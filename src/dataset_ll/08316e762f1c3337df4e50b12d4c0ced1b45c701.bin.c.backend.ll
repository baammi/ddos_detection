source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_c9ac.16 = constant i32 -382906384
@global_var_10414.18 = constant i32 -382906384
@global_var_1f078.22 = global i32 0
@global_var_b200.28 = constant i32 -382906384
@global_var_b638.30 = constant i32 -382906384
@global_var_aa88.32 = constant i32 -382906384
@global_var_a3dc.34 = constant i32 -382906384
@global_var_9cf8.36 = constant i32 -382906384
@global_var_9508.38 = constant i32 -382906384
@global_var_8efc.40 = constant i32 -382906384
@global_var_8874.42 = constant i32 -382906384
@global_var_1f644.44 = global i32 0
@global_var_1f07c.55 = global i32 0
@global_var_16460.57 = constant i32 47
@global_var_1f648.60 = local_unnamed_addr global i32 0
@global_var_1f080.62 = global i32 0
@global_var_c6f4.65 = constant i32 -382910448
@global_var_1f040.67 = global i32 62668
@global_var_1f650.71 = local_unnamed_addr global i32 0
@global_var_1f64e.72 = local_unnamed_addr global i32 0
@global_var_1f038.74 = global i32 -1
@global_var_1f084.79 = global i32 0
@global_var_16464.87 = constant i32 10
@global_var_1f03c.90 = global i32 -1
@global_var_12714.94 = constant i32 -449978364
@global_var_f4cc.95 = constant i32 -382910352
@global_var_16468.99 = constant i32 16777216
@global_var_1f08c.101 = global i32 0
@global_var_1f098.103 = global i32 0
@global_var_1f090.105 = global i32 0
@global_var_1f094.107 = global i32 0
@global_var_16470.113 = constant [23 x i8] c"g1abc4dmo35hnp2lie0kjf\00"
@global_var_1f664.119 = global i32 0
@global_var_1f0d0.121 = global i32 0
@global_var_1f09c.123 = global i32 0
@global_var_1f0c8.125 = global i32 0
@global_var_1f65c.132 = global i32 0
@global_var_1f660.134 = global i32 0
@global_var_1f0a2.137 = local_unnamed_addr global i32 0
@global_var_1f0a8.138 = local_unnamed_addr global i32 0
@global_var_1f0a4.139 = local_unnamed_addr global i32 0
@global_var_1f0a9.140 = local_unnamed_addr global i32 0
@global_var_1f0b4.141 = global i32 0
@global_var_1f0c2.145 = local_unnamed_addr global i32 0
@global_var_16554.147 = constant i32 0
@global_var_16488.149 = constant [5 x i8] c"7**1\00"
@global_var_16490.151 = constant [6 x i8] c"$!(,+\00"
@global_var_16514.153 = constant [5 x i8] c"twvq\00"
@global_var_16498.155 = constant [5 x i8] c"5$66\00"
@global_var_164a0.157 = constant [7 x i8] c"=&vptt\00"
@global_var_164a8.159 = constant [6 x i8] c"3,?=3\00"
@global_var_164b0.161 = constant [7 x i8] c"$+16)4\00"
@global_var_164b8.163 = constant [9 x i8] c"tuut&-,+\00"
@global_var_164c4.165 = constant [7 x i8] c"twvqps\00"
@global_var_164cc.167 = constant [4 x i8] c"twv\00"
@global_var_164d0.169 = constant [5 x i8] c"06 7\00"
@global_var_164d8.171 = constant [8 x i8] c"6055*71\00"
@global_var_164e0.173 = constant [4 x i8] c"p05\00"
@global_var_164e4.175 = constant [8 x i8] c"! #$0)1\00"
@global_var_164ec.177 = constant [4 x i8] c"$!(\00"
@global_var_164f0.179 = constant [7 x i8] c"!$ (*+\00"
@global_var_164f8.181 = constant [4 x i8] c"',+\00"
@global_var_164fc.183 = constant [5 x i8] c"$+.*\00"
@global_var_16504.185 = constant [9 x i8] c"-0+1prp|\00"
@global_var_16510.187 = constant [9 x i8] c"twvqtwvq\00"
@global_var_1651c.189 = constant [6 x i8] c"11+ 1\00"
@global_var_16524.191 = constant [6 x i8] c"?)==k\00"
@global_var_1652c.193 = constant [6 x i8] c"twvqp\00"
@global_var_16534.195 = constant [8 x i8] c"$40$7,*\00"
@global_var_1653c.197 = constant [5 x i8] c"'$'<\00"
@global_var_16544.199 = constant [5 x i8] c"170 \00"
@global_var_1654c.201 = constant [9 x i8] c"&-$+\22 ( \00"
@global_var_16558.203 = constant [7 x i8] c"twvtwv\00"
@global_var_1f0ac.204 = local_unnamed_addr global i32 0
@global_var_1f0b0.205 = local_unnamed_addr global i32 0
@global_var_1f0aa.206 = local_unnamed_addr global i32 0
@global_var_1f0b8.208 = local_unnamed_addr global i32 0
@global_var_1f0c4.209 = local_unnamed_addr global i32 0
@global_var_d368.211 = constant i32 -382910352
@global_var_16568.213 = constant [3 x i8] c"\0D\0A\00"
@global_var_1656c.215 = constant [5 x i8] c"ogin\00"
@global_var_16574.217 = constant [8 x i8] c"assword\00"
@global_var_16585.219 = constant i32 1159724031
@global_var_1657c.221 = constant i32 2095871
@global_var_16560.226 = constant [6 x i8] c"enter\00"
@global_var_1f66c.229 = global i32 0
@global_var_1f048.232 = global i32 -555810886
@global_var_16588.237 = constant [3 x i8] c"E:\00"
@global_var_1f67c.238 = local_unnamed_addr global i32 0
@global_var_1f680.239 = local_unnamed_addr global i32 0
@global_var_1658c.241 = constant [23 x i8] c"+ =06,*16*)01,*+6k+ 1E\00"
@global_var_1f724.242 = local_unnamed_addr global i32 0
@global_var_1f728.243 = local_unnamed_addr global i32 0
@global_var_165a4.245 = constant i32 41214
@global_var_1f72c.246 = local_unnamed_addr global i32 0
@global_var_165a8.248 = constant [59 x i8] c"\22*6-e1-$1e&-,+ 6 e#$(,)<e$1e1- e*1- 7e1$') e607 e$1 e$)*1E\00"
@global_var_1f678.249 = local_unnamed_addr global i32 0
@global_var_1f674.250 = local_unnamed_addr global i32 0
@global_var_165e4.252 = constant [7 x i8] c"6- ))E\00"
@global_var_1f6ec.253 = local_unnamed_addr global i32 0
@global_var_1f6f0.254 = local_unnamed_addr global i32 0
@global_var_165ec.256 = constant [8 x i8] c" +$') E\00"
@global_var_1f6f4.257 = local_unnamed_addr global i32 0
@global_var_1f6f8.258 = local_unnamed_addr global i32 0
@global_var_165f4.260 = constant [8 x i8] c"6<61 (E\00"
@global_var_1f6fc.261 = local_unnamed_addr global i32 0
@global_var_1f700.262 = local_unnamed_addr global i32 0
@global_var_165fc.264 = constant [4 x i8] c"6-E\00"
@global_var_1f710.265 = local_unnamed_addr global i32 0
@global_var_1f70c.266 = local_unnamed_addr global i32 0
@global_var_16600.268 = constant i32 724313962
@global_var_1f708.269 = local_unnamed_addr global i32 0
@global_var_1f704.270 = global i32 0
@global_var_16618.272 = constant i32 269878280
@global_var_1f718.273 = local_unnamed_addr global i32 0
@global_var_1f714.274 = local_unnamed_addr global i32 0
@global_var_16634.276 = constant [10 x i8] c"+&*77 &1E\00"
@global_var_1f720.277 = global i32 0
@global_var_1f71c.278 = local_unnamed_addr global i32 0
@global_var_16640.280 = constant [17 x i8] c"j',+j'06<'*=e56E\00"
@global_var_16654.282 = constant [23 x i8] c"j',+j'06<'*=e.,))eh|jE\00"
@global_var_1666c.284 = constant [8 x i8] c"j57*&jE\00"
@global_var_1f684.285 = local_unnamed_addr global i32 0
@global_var_1f688.286 = local_unnamed_addr global i32 0
@global_var_16674.288 = constant [6 x i8] c"j = E\00"
@global_var_1f690.289 = local_unnamed_addr global i32 0
@global_var_1f68c.290 = local_unnamed_addr global i32 0
@global_var_1667c.292 = constant [5 x i8] c"j#!E\00"
@global_var_1f6a0.293 = local_unnamed_addr global i32 0
@global_var_1f69c.294 = local_unnamed_addr global i32 0
@global_var_16684.296 = constant [7 x i8] c"j($56E\00"
@global_var_1f6a4.297 = local_unnamed_addr global i32 0
@global_var_1f6a8.298 = local_unnamed_addr global i32 0
@global_var_1668c.300 = constant [15 x i8] c"j57*&j+ 1j1&5E\00"
@global_var_1f6ac.301 = local_unnamed_addr global i32 0
@global_var_1f6b0.302 = local_unnamed_addr global i32 0
@global_var_1669c.304 = constant [11 x i8] c"!37\0D )5 7E\00"
@global_var_1f6b8.305 = local_unnamed_addr global i32 0
@global_var_1f6b4.306 = local_unnamed_addr global i32 0
@global_var_166f0.308 = constant i32 808064529
@global_var_1f6c0.309 = local_unnamed_addr global i32 0
@global_var_1f6bc.310 = local_unnamed_addr global i32 0
@global_var_166a8.312 = constant [18 x i8] c"j 1&j7 6*)3k&*+#E\00"
@global_var_1f6c8.313 = local_unnamed_addr global i32 0
@global_var_1f6c4.314 = local_unnamed_addr global i32 0
@global_var_166bc.316 = constant [13 x i8] c"+$( 6 73 7eE\00"
@global_var_1f6d0.317 = local_unnamed_addr global i32 0
@global_var_1f6cc.318 = local_unnamed_addr global i32 0
@global_var_166cc.320 = constant [15 x i8] c"j! 3j2$1&-!*\22E\00"
@global_var_1f6d4.321 = local_unnamed_addr global i32 0
@global_var_1f6d8.322 = local_unnamed_addr global i32 0
@global_var_166dc.324 = constant [20 x i8] c"j! 3j(,6&j2$1&-!*\22E\00"
@global_var_1f6dc.325 = local_unnamed_addr global i32 0
@global_var_1f6e0.326 = local_unnamed_addr global i32 0
@global_var_1f504.328 = global i32 0
@global_var_1f6e4.332 = local_unnamed_addr global i32 0
@global_var_1f0d4.335 = global i32 0
@global_var_1f0d8.337 = global i32 0
@global_var_16708.340 = constant [10 x i8] c"/dev/null\00"
@global_var_1f004.344 = global i32 33036
@global_var_1f008.346 = global i32 32968
@global_var_fb2c.347 = constant i32 -352321519
@global_var_fbdc.354 = constant i32 -450007036
@global_var_1f0f0.358 = global i32 0
@global_var_1f0f4.360 = global i32 0
@global_var_1f4f8.366 = global i32 0
@global_var_1f4fc.370 = global i32 0
@global_var_16712.374 = constant i32 35062016
@global_var_1f0e4.376 = global i32 0
@global_var_1f0e0.378 = global i32 0
@global_var_1f0e8.379 = global i32 0
@global_var_11288.384 = constant i32 -516948194
@global_var_1179c.395 = constant i32 -450007036
@global_var_118f8.397 = constant i32 -509607923
@global_var_1673c.400 = constant i32 -1
@global_var_16734.402 = constant i32 2147483647
@global_var_1239c.405 = constant i32 -449978364
@global_var_1f500.409 = global i32 0
@global_var_16744.411 = constant [10 x i8] c"LINUX_2.6\00"
@global_var_16750.413 = constant [21 x i8] c"__vdso_clock_gettime\00"
@global_var_12664.415 = constant i32 -382910336
@global_var_1f04c.419 = global i32 0
@global_var_12884.420 = constant i32 -484573183
@global_var_1f050.423 = global i32 0
@global_var_128d8.424 = constant i32 -509595648
@global_var_1f054.426 = global i32 0
@global_var_1294c.427 = constant i32 -300085392
@global_var_1f508.432 = global i32 0
@global_var_16772.435 = constant i32 -1
@global_var_16771.437 = constant i32 -1
@global_var_16768.439 = constant i32 67240192
@global_var_9999.442 = constant i32 1961558024
@global_var_1f624.445 = global i32 0
@global_var_1f620.448 = global i32 0
@global_var_1f62c.450 = global i32 0
@global_var_1f628.454 = global i32 0
@global_var_13f10.474 = constant i32 -382910352
@global_var_1f634.476 = global i32 0
@global_var_1f63c.479 = global i32 0
@global_var_1f638.482 = global i32 0
@global_var_1f010.484 = global i32 0
@global_var_1f058.3 = external global i8*
@global_var_1f074.20 = external global i8*
@global_var_1f075.26 = global i8 0
@global_var_1f64c.70 = global i16* null
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1f044.76 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1f088.92 = external global i8*
@global_var_1f0cc.127 = global i16* null
@global_var_1f0a0.136 = external global i8*
@global_var_1f0c0.142 = local_unnamed_addr global i8 0
@global_var_1f0b6.143 = local_unnamed_addr global i16 0
@global_var_1f0c1.144 = local_unnamed_addr global i8 0
@global_var_1f6e8.330 = external global i8*

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_80b4() local_unnamed_addr {
entry:
  %v3_80b4 = load i32, i32* @r0, align 4
  ret i32 %v3_80b4
}

define i32 @function_80c8(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80c8 = load i32, i32* @r4, align 4
  store i32 %v3_80c8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1f058.3 to i32), i32* %r4.global-to-local, align 4
  %v2_80d0 = load i8, i8* bitcast (i8** @global_var_1f058.3 to i8*), align 4
  %v2_80d4 = icmp eq i8 %v2_80d0, 0
  br i1 %v2_80d4, label %dec_label_pc_80dc, label %dec_label_pc_80f8

dec_label_pc_80dc:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80ec = call i32 @function_8104()
  store i32 %v3_80ec, i32* @r0, align 4
  %v2_80f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_80f4 = inttoptr i32 %v2_80f4 to i8*
  store i8 1, i8* %v3_80f4, align 1
  %v2_80f8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80f8

dec_label_pc_80f8:                                ; preds = %entry, %dec_label_pc_80dc
  %v2_80f8 = phi i32 [ %v3_80c8, %entry ], [ %v2_80f8.pre, %dec_label_pc_80dc ]
  store i32 %v2_80f8, i32* %r4.global-to-local, align 4
  %v1_80fc = load i32, i32* @r0, align 4
  ret i32 %v1_80fc

; uselistorder directives
  uselistorder i8** @global_var_1f058.3, { 1, 0 }
  uselistorder label %dec_label_pc_80f8, { 1, 0 }
}

define i32 @function_8104() local_unnamed_addr {
dec_label_pc_8104:
  %v0_8108 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8108, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_8104
  %v1_8108 = load i32, i32* @r1, align 4
  %v2_8108 = load i32, i32* @r0, align 4
  %v3_8108 = and i32 %v2_8108, %v1_8108
  call void @__pseudo_branch(i32 %v3_8108)
  br label %bb3

bb3:                                              ; preds = %bb, %dec_label_pc_8104
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8130 = load i32, i32* inttoptr (i32 126988 to i32*), align 4
  %v2_8134 = icmp eq i32 %v2_8130, 0
  br i1 %v2_8134, label %dec_label_pc_814c, label %dec_label_pc_813c

dec_label_pc_813c:                                ; preds = %bb3
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_814c

dec_label_pc_814c:                                ; preds = %bb3, %dec_label_pc_813c
  ret i32 126988

; uselistorder directives
  uselistorder label %dec_label_pc_814c, { 1, 0 }
}

define i32 @entry_point() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v3_8188 = call i32 @function_8190(i32* nonnull %stack_var_0, i32 0)
  ret i32 %v3_8188
}

define i32 @function_8190(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8190:
  %tmp = ptrtoint i32* %arg1 to i32
  %v0_8190 = load i32, i32* @lr, align 4
  %v2_81a0 = load i32, i32* %arg1, align 4
  %v1_81a4 = add i32 %tmp, 4
  %v7_81bc = inttoptr i32 %v1_81a4 to i32*
  %v8_81bc = call i32 @function_f948(i32 ptrtoint (i32* @global_var_c9ac.16 to i32), i32 %v2_81a0, i32* %v7_81bc, i32 32948, i32 91212, i32 0, i32 %v0_8190)
  ret i32 %v8_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81cc = icmp eq i32 %arg1, 0
  br i1 %v2_81cc, label %dec_label_pc_8214, label %dec_label_pc_81dc

dec_label_pc_81dc:                                ; preds = %dec_label_pc_81cc
  %v0_81dc = load i32, i32* %r1.global-to-local, align 4
  %v1_81dc = add i32 %v0_81dc, 4
  %v2_81dc = inttoptr i32 %v1_81dc to i8*
  %v3_81dc = load i8, i8* %v2_81dc, align 1
  %v4_81dc = zext i8 %v3_81dc to i32
  %v9_81e0 = icmp eq i32 %v4_81dc, %arg3
  br i1 %v9_81e0, label %dec_label_pc_8220, label %dec_label_pc_8204.preheader

dec_label_pc_8204.preheader:                      ; preds = %dec_label_pc_81dc
  br label %dec_label_pc_8204

dec_label_pc_81f4:                                ; preds = %dec_label_pc_8204
  %v1_81f4 = add i32 %v0_81fc.in, 12
  %v2_81f4 = inttoptr i32 %v1_81f4 to i8*
  %v3_81f4 = load i8, i8* %v2_81f4, align 1
  %v4_81f4 = zext i8 %v3_81f4 to i32
  %v9_81f8 = icmp eq i32 %v4_81f4, %arg3
  br i1 %v9_81f8, label %dec_label_pc_8220, label %dec_label_pc_8204

dec_label_pc_8204:                                ; preds = %dec_label_pc_8204.preheader, %dec_label_pc_81f4
  %v0_81fc.in = phi i32 [ %v0_81dc, %dec_label_pc_8204.preheader ], [ %v0_81fc, %dec_label_pc_81f4 ]
  %v0_8204 = phi i32 [ 0, %dec_label_pc_8204.preheader ], [ %v1_8204, %dec_label_pc_81f4 ]
  %v0_81fc = add i32 %v0_81fc.in, 8
  %v1_8204 = add i32 %v0_8204, 1
  %v9_8208 = icmp eq i32 %v1_8204, %arg1
  store i32 %v0_81fc, i32* %r1.global-to-local, align 4
  br i1 %v9_8208, label %dec_label_pc_8214, label %dec_label_pc_81f4

dec_label_pc_8214:                                ; preds = %dec_label_pc_8204, %dec_label_pc_81cc, %dec_label_pc_8220
  %v0_8214 = phi i32 [ %arg4, %dec_label_pc_81cc ], [ %v2_8220, %dec_label_pc_8220 ], [ %arg4, %dec_label_pc_8204 ]
  ret i32 %v0_8214

dec_label_pc_8220:                                ; preds = %dec_label_pc_81f4, %dec_label_pc_81dc
  %v0_8220 = phi i32 [ %v0_81dc, %dec_label_pc_81dc ], [ %v0_81fc, %dec_label_pc_81f4 ]
  %v1_8220 = inttoptr i32 %v0_8220 to i32*
  %v2_8220 = load i32, i32* %v1_8220, align 4
  br label %dec_label_pc_8214

; uselistorder directives
  uselistorder i32 %v1_8204, { 1, 0 }
  uselistorder i32 %v0_81fc, { 1, 0, 2 }
  uselistorder i32 %v0_81fc.in, { 1, 0 }
  uselistorder i32 %v0_81dc, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8214, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8204, { 1, 0 }
}

define i32 @function_8228(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8228:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8228 = icmp eq i32 %arg1, 0
  %v3_822c = load i32, i32* @r4, align 4
  store i32 %v3_822c, i32* %stack_var_-8, align 4
  %v6_822c = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8228, label %dec_label_pc_8270, label %dec_label_pc_8238

dec_label_pc_8238:                                ; preds = %dec_label_pc_8228
  %v0_8238 = load i32, i32* %r1.global-to-local, align 4
  %v1_8238 = add i32 %v0_8238, 4
  %v2_8238 = inttoptr i32 %v1_8238 to i8*
  %v3_8238 = load i8, i8* %v2_8238, align 1
  %v4_8238 = zext i8 %v3_8238 to i32
  %v9_823c = icmp eq i32 %v4_8238, %arg3
  br i1 %v9_823c, label %dec_label_pc_827c, label %dec_label_pc_8260.preheader

dec_label_pc_8260.preheader:                      ; preds = %dec_label_pc_8238
  br label %dec_label_pc_8260

dec_label_pc_8250:                                ; preds = %dec_label_pc_8260
  %v1_8250 = add i32 %v0_8258.in, 12
  %v2_8250 = inttoptr i32 %v1_8250 to i8*
  %v3_8250 = load i8, i8* %v2_8250, align 1
  %v4_8250 = zext i8 %v3_8250 to i32
  %v9_8254 = icmp eq i32 %v4_8250, %arg3
  br i1 %v9_8254, label %dec_label_pc_827c, label %dec_label_pc_8260

dec_label_pc_8260:                                ; preds = %dec_label_pc_8260.preheader, %dec_label_pc_8250
  %v0_8258.in = phi i32 [ %v0_8238, %dec_label_pc_8260.preheader ], [ %v0_8258, %dec_label_pc_8250 ]
  %v0_8260 = phi i32 [ 0, %dec_label_pc_8260.preheader ], [ %v1_8260, %dec_label_pc_8250 ]
  %v0_8258 = add i32 %v0_8258.in, 8
  %v1_8260 = add i32 %v0_8260, 1
  store i32 %v1_8260, i32* @lr, align 4
  %v9_8264 = icmp eq i32 %v1_8260, %arg1
  store i32 %v0_8258, i32* %r1.global-to-local, align 4
  br i1 %v9_8264, label %dec_label_pc_8270, label %dec_label_pc_8250

dec_label_pc_8270:                                ; preds = %dec_label_pc_8260, %dec_label_pc_827c, %dec_label_pc_8228, %dec_label_pc_8288
  %v2_8274 = phi i32 [ %v3_822c, %dec_label_pc_827c ], [ %v3_822c, %dec_label_pc_8228 ], [ %v2_8274.pre, %dec_label_pc_8288 ], [ %v3_822c, %dec_label_pc_8260 ]
  %v0_8270 = phi i32 [ %arg4, %dec_label_pc_827c ], [ %arg4, %dec_label_pc_8228 ], [ %v1_8288, %dec_label_pc_8288 ], [ %arg4, %dec_label_pc_8260 ]
  store i32 %v2_8274, i32* @r4, align 4
  store i32 %v6_822c, i32* @lr, align 4
  ret i32 %v0_8270

dec_label_pc_827c:                                ; preds = %dec_label_pc_8250, %dec_label_pc_8238
  %v0_827c = phi i32 [ %v0_8238, %dec_label_pc_8238 ], [ %v0_8258, %dec_label_pc_8250 ]
  %v1_827c = inttoptr i32 %v0_827c to i32*
  %v2_827c = load i32, i32* %v1_827c, align 4
  store i32 %v2_827c, i32* @r0, align 4
  %v2_8280 = icmp eq i32 %v2_827c, 0
  br i1 %v2_8280, label %dec_label_pc_8270, label %dec_label_pc_8288

dec_label_pc_8288:                                ; preds = %dec_label_pc_827c
  %v1_8288 = call i32 @function_114f4(i32 %v2_827c)
  %v2_8274.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8270

; uselistorder directives
  uselistorder i32 %v1_8260, { 1, 2, 0 }
  uselistorder i32 %v0_8258, { 1, 0, 2 }
  uselistorder i32 %v0_8258.in, { 1, 0 }
  uselistorder i32 %v0_8238, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8270, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8260, { 1, 0 }
}

define i32 @function_8294(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8294:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8294 = icmp eq i32 %arg1, 0
  %v3_8298 = load i32, i32* @r4, align 4
  store i32 %v3_8298, i32* %stack_var_-8, align 4
  %v6_8298 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8294, label %dec_label_pc_82dc, label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8294
  %v0_82a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_82a4 = add i32 %v0_82a4, 4
  %v2_82a4 = inttoptr i32 %v1_82a4 to i8*
  %v3_82a4 = load i8, i8* %v2_82a4, align 1
  %v4_82a4 = zext i8 %v3_82a4 to i32
  %v9_82a8 = icmp eq i32 %v4_82a4, %arg3
  br i1 %v9_82a8, label %dec_label_pc_82e8, label %dec_label_pc_82cc.preheader

dec_label_pc_82cc.preheader:                      ; preds = %dec_label_pc_82a4
  %v2_82ac = add i32 %v0_82a4, 8
  store i32 %v2_82ac, i32* @ip, align 4
  br label %dec_label_pc_82cc

dec_label_pc_82bc:                                ; preds = %dec_label_pc_82cc
  %v1_82bc = add i32 %v0_82c4, 4
  %v2_82bc = inttoptr i32 %v1_82bc to i8*
  %v3_82bc = load i8, i8* %v2_82bc, align 1
  %v4_82bc = zext i8 %v3_82bc to i32
  %v9_82c0 = icmp eq i32 %v4_82bc, %arg3
  %v1_82c4 = add i32 %v0_82c4, 8
  store i32 %v1_82c4, i32* @ip, align 4
  br i1 %v9_82c0, label %dec_label_pc_82e8, label %dec_label_pc_82cc

dec_label_pc_82cc:                                ; preds = %dec_label_pc_82cc.preheader, %dec_label_pc_82bc
  %v0_82c4 = phi i32 [ %v2_82ac, %dec_label_pc_82cc.preheader ], [ %v1_82c4, %dec_label_pc_82bc ]
  %v0_82cc = phi i32 [ 0, %dec_label_pc_82cc.preheader ], [ %v1_82cc, %dec_label_pc_82bc ]
  %v1_82cc = add i32 %v0_82cc, 1
  store i32 %v1_82cc, i32* @lr, align 4
  %v9_82d0 = icmp eq i32 %v1_82cc, %arg1
  store i32 %v0_82c4, i32* %r1.global-to-local, align 4
  br i1 %v9_82d0, label %dec_label_pc_82dc, label %dec_label_pc_82bc

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82cc, %dec_label_pc_82e8, %dec_label_pc_8294, %dec_label_pc_82f4
  %v2_82e0 = phi i32 [ %v3_8298, %dec_label_pc_82e8 ], [ %v3_8298, %dec_label_pc_8294 ], [ %v2_82e0.pre, %dec_label_pc_82f4 ], [ %v3_8298, %dec_label_pc_82cc ]
  %v0_82dc = phi i32 [ %arg4, %dec_label_pc_82e8 ], [ %arg4, %dec_label_pc_8294 ], [ %v3_82f8, %dec_label_pc_82f4 ], [ %arg4, %dec_label_pc_82cc ]
  store i32 %v2_82e0, i32* @r4, align 4
  store i32 %v6_8298, i32* @lr, align 4
  ret i32 %v0_82dc

dec_label_pc_82e8:                                ; preds = %dec_label_pc_82bc, %dec_label_pc_82a4
  %v0_82e8 = phi i32 [ %v0_82a4, %dec_label_pc_82a4 ], [ %v0_82c4, %dec_label_pc_82bc ]
  %v1_82e8 = inttoptr i32 %v0_82e8 to i32*
  %v2_82e8 = load i32, i32* %v1_82e8, align 4
  %v2_82ec = icmp eq i32 %v2_82e8, 0
  br i1 %v2_82ec, label %dec_label_pc_82dc, label %dec_label_pc_82f4

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82e8
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_82f8 = inttoptr i32 %v2_82e8 to i8*
  %v3_82f8 = call i32 @function_f334(i8* %v2_82f8, i32 10)
  %v2_82e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_82dc

; uselistorder directives
  uselistorder i32 %v1_82cc, { 1, 2, 0 }
  uselistorder i32 %v0_82c4, { 0, 3, 2, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_82dc, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_82cc, { 1, 0 }
}

define i32 @function_8304(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8304:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v9_8304 = load i32, i32* @r6, align 4
  %v12_8304 = load i32, i32* @r7, align 4
  %v18_8304 = load i32, i32* @sb, align 4
  %v21_8304 = load i32, i32* @sl, align 4
  %v24_8304 = load i32, i32* @fp, align 4
  %v27_8304 = load i32, i32* @lr, align 4
  %v2_8308 = icmp ugt i32 %arg2, 2
  %v7_8308 = icmp eq i32 %arg2, 3
  store i1 %v7_8308, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_8314 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8314, i32* @r5, align 4
  %v2_8318 = xor i1 %v7_8308, true
  %v3_8318 = and i1 %v2_8308, %v2_8318
  br i1 %v3_8318, label %dec_label_pc_8328, label %dec_label_pc_831c

dec_label_pc_831c:                                ; preds = %dec_label_pc_8358, %.dec_label_pc_831c_crit_edge, %dec_label_pc_834c, %dec_label_pc_833c, %dec_label_pc_8328, %dec_label_pc_8304, %dec_label_pc_8500
  %v1_8324 = phi i32 [ %v1_8324.pre, %.dec_label_pc_831c_crit_edge ], [ %v1_832c, %dec_label_pc_8358 ], [ %v1_832c, %dec_label_pc_834c ], [ %v1_832c, %dec_label_pc_833c ], [ %v1_832c, %dec_label_pc_8328 ], [ %v0_8314, %dec_label_pc_8304 ], [ %v1_8504, %dec_label_pc_8500 ]
  store i32 %v9_8304, i32* @r6, align 4
  store i32 %v12_8304, i32* @r7, align 4
  store i32 %v18_8304, i32* @sb, align 4
  store i32 %v21_8304, i32* @sl, align 4
  store i32 %v24_8304, i32* @fp, align 4
  store i32 %v27_8304, i32* @lr, align 4
  ret i32 %v1_8324

dec_label_pc_8328:                                ; preds = %dec_label_pc_8304
  %v1_8328 = inttoptr i32 %v0_8314 to i32*
  %v2_8328 = load i32, i32* %v1_8328, align 4
  store i32 %v2_8328, i32* %r0.global-to-local, align 4
  %v1_832c = call i32 @function_11664(i32 %v2_8328)
  store i32 %v1_832c, i32* %r0.global-to-local, align 4
  %v0_8330 = load i32, i32* @r4, align 4
  %v7_8330 = icmp eq i32 %v0_8330, 4
  store i1 %v7_8330, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8330, label %dec_label_pc_831c, label %dec_label_pc_833c

dec_label_pc_833c:                                ; preds = %dec_label_pc_8328
  %v0_833c = load i32, i32* @r5, align 4
  %v1_833c = add i32 %v0_833c, 4
  %v2_833c = inttoptr i32 %v1_833c to i8*
  %v3_833c = load i8, i8* %v2_833c, align 1
  %v4_833c = zext i8 %v3_833c to i32
  store i32 %v4_833c, i32* %r3.global-to-local, align 4
  %v7_8340 = icmp eq i32 %v0_8330, 5
  store i1 %v7_8340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8340, label %dec_label_pc_831c, label %dec_label_pc_834c

dec_label_pc_834c:                                ; preds = %dec_label_pc_833c
  %v1_834c = add i32 %v0_833c, 5
  %v2_834c = inttoptr i32 %v1_834c to i8*
  %v3_834c = load i8, i8* %v2_834c, align 1
  %v4_834c = zext i8 %v3_834c to i32
  store i32 %v4_834c, i32* @sb, align 4
  %v2_8350 = icmp eq i8 %v3_834c, 0
  store i1 %v2_8350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8350, label %dec_label_pc_831c, label %dec_label_pc_8358

dec_label_pc_8358:                                ; preds = %dec_label_pc_834c
  %v2_835c = mul nuw nsw i32 %v4_834c, 5
  store i32 %v2_835c, i32* @r7, align 4
  %v1_8360 = add i32 %v0_8330, -6
  store i32 %v1_8360, i32* %r3.global-to-local, align 4
  %v3_8364 = icmp ult i32 %v1_8360, %v2_835c
  %v9_8364 = icmp eq i32 %v1_8360, %v2_835c
  store i1 %v9_8364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8364, label %dec_label_pc_831c, label %dec_label_pc_836c

dec_label_pc_836c:                                ; preds = %dec_label_pc_8358
  store i32 %v4_834c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8360, i32* @r6, align 4
  %v2_8378 = call i32 @function_fea0(i32 %v4_834c, i32 24)
  store i32 %v2_8378, i32* %ip.global-to-local, align 4
  %v0_8384 = load i32, i32* @r7, align 4
  %v1_8384 = load i32, i32* @r4, align 4
  %v2_8384 = sub i32 %v1_8384, %v0_8384
  store i32 %v2_8384, i32* @r7, align 4
  %v0_8388 = load i32, i32* @r5, align 4
  %v1_8388 = add i32 %v0_8388, 11
  store i32 %v1_8388, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_838c, %dec_label_pc_836c
  %v1_8390 = phi i32 [ %v1_83bc, %dec_label_pc_838c ], [ %v2_8378, %dec_label_pc_836c ]
  %v0_838c = phi i32 [ %v1_83b8, %dec_label_pc_838c ], [ %v1_8388, %dec_label_pc_836c ]
  %v1_838c = add i32 %v0_838c, -5
  %v2_838c = inttoptr i32 %v1_838c to i32*
  %v3_838c = load i32, i32* %v2_838c, align 4
  store i32 %v3_838c, i32* %r1.global-to-local, align 4
  %v2_8390 = add i32 %v1_8390, 16
  %v3_8390 = inttoptr i32 %v2_8390 to i32*
  store i32 %v3_838c, i32* %v3_8390, align 4
  %v0_8394 = load i32, i32* @r6, align 4
  %v1_8394 = add i32 %v0_8394, -5
  store i32 %v1_8394, i32* @r6, align 4
  %v0_8398 = load i32, i32* %r0.global-to-local, align 4
  %v1_8398 = add i32 %v0_8398, -1
  %v2_8398 = inttoptr i32 %v1_8398 to i8*
  %v3_8398 = load i8, i8* %v2_8398, align 1
  %v4_8398 = zext i8 %v3_8398 to i32
  store i32 %v4_8398, i32* @r2, align 4
  %v0_839c = load i32, i32* @r7, align 4
  %v1_839c = add i32 %v0_839c, -6
  store i32 %v1_839c, i32* %r3.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  %v9_83a4 = icmp eq i32 %v1_8394, %v1_839c
  store i1 %v9_83a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_8398, i32* @r4, align 4
  %v2_83ac = load i32, i32* %ip.global-to-local, align 4
  %v3_83ac = add i32 %v2_83ac, 20
  %v4_83ac = inttoptr i32 %v3_83ac to i8*
  store i8 %v3_8398, i8* %v4_83ac, align 1
  %v0_83b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_83b0 = load i32, i32* %ip.global-to-local, align 4
  %v2_83b0 = add i32 %v1_83b0, 4
  %v3_83b0 = inttoptr i32 %v2_83b0 to i32*
  store i32 %v0_83b0, i32* %v3_83b0, align 4
  %v0_83b4 = load i32, i32* @lr, align 4
  %v1_83b4 = trunc i32 %v0_83b4 to i16
  %v2_83b4 = load i32, i32* %ip.global-to-local, align 4
  %v3_83b4 = inttoptr i32 %v2_83b4 to i16*
  store i16 %v1_83b4, i16* %v3_83b4, align 2
  %v0_83b8 = load i32, i32* %r0.global-to-local, align 4
  %v1_83b8 = add i32 %v0_83b8, 5
  store i32 %v1_83b8, i32* %r0.global-to-local, align 4
  %v0_83bc = load i32, i32* %ip.global-to-local, align 4
  %v1_83bc = add i32 %v0_83bc, 24
  store i32 %v1_83bc, i32* %ip.global-to-local, align 4
  %v0_83c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83c0, label %dec_label_pc_83c4, label %dec_label_pc_838c

dec_label_pc_83c4:                                ; preds = %dec_label_pc_838c
  %v0_83c4 = load i32, i32* @r6, align 4
  %v2_83c4 = icmp eq i32 %v0_83c4, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83c4, label %dec_label_pc_84c4, label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_83c4
  %v0_83cc = load i32, i32* @r4, align 4
  %v1_83cc = inttoptr i32 %v0_83cc to i8*
  %v2_83cc = load i8, i8* %v1_83cc, align 1
  %v3_83cc = zext i8 %v2_83cc to i32
  store i32 %v3_83cc, i32* @r5, align 4
  %v2_83d0 = icmp eq i8 %v2_83cc, 0
  store i1 %v2_83d0, i1* %cpsr_z.global-to-local, align 1
  %v0_83d4 = load i32, i32* @r7, align 4
  %v1_83d4 = add i32 %v0_83d4, -7
  store i32 %v1_83d4, i32* @r8, align 4
  br i1 %v2_83d0, label %bb, label %dec_label_pc_83e0

bb:                                               ; preds = %dec_label_pc_83cc
  store i32 %v3_83cc, i32* @r6, align 4
  br label %dec_label_pc_8494

dec_label_pc_83e0:                                ; preds = %dec_label_pc_83cc
  store i32 %v3_83cc, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83e8 = call i32 @function_fea0(i32 %v3_83cc, i32 8)
  store i32 %v2_83e8, i32* %r0.global-to-local, align 4
  %v0_83ec = load i32, i32* @r8, align 4
  %v2_83ec = icmp eq i32 %v0_83ec, 0
  store i1 %v2_83ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83e8, i32* @r6, align 4
  br i1 %v2_83ec, label %dec_label_pc_84c4, label %dec_label_pc_83f8

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83e0
  %v0_83f8 = load i32, i32* @r4, align 4
  %v1_83f8 = add i32 %v0_83f8, 1
  %v2_83f8 = inttoptr i32 %v1_83f8 to i8*
  %v3_83f8 = load i8, i8* %v2_83f8, align 1
  %v0_83fc = load i32, i32* @r7, align 4
  %v7_83fc = icmp eq i32 %v0_83fc, 8
  store i1 %v7_83fc, i1* %cpsr_z.global-to-local, align 1
  %v3_8400 = add i32 %v2_83e8, 4
  %v4_8400 = inttoptr i32 %v3_8400 to i8*
  store i8 %v3_83f8, i8* %v4_8400, align 1
  %v0_8404 = load i32, i32* @r4, align 4
  %v1_8404 = add i32 %v0_8404, 1
  store i32 %v1_8404, i32* %r3.global-to-local, align 4
  %v0_8408 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8408, label %dec_label_pc_84c4, label %dec_label_pc_840c

dec_label_pc_840c:                                ; preds = %dec_label_pc_83f8
  %v1_840c = add i32 %v0_8404, 2
  %v2_840c = inttoptr i32 %v1_840c to i8*
  %v3_840c = load i8, i8* %v2_840c, align 1
  %v4_840c = zext i8 %v3_840c to i32
  store i32 %v4_840c, i32* @r4, align 4
  %v0_8410 = load i32, i32* @r7, align 4
  %v1_8410 = add i32 %v0_8410, -9
  store i32 %v1_8410, i32* @r7, align 4
  %v9_8414 = icmp eq i32 %v1_8410, %v4_840c
  store i1 %v9_8414, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_840c, i32* %r1.global-to-local, align 4
  %v5_841c = icmp slt i32 %v1_8410, %v4_840c
  br i1 %v5_841c, label %dec_label_pc_84c4, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_840c
  %v7_841c4711 = add i32 %v0_8404, 3
  store i32 %v7_841c4711, i32* @r8, align 4
  %v6_8420812 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8420812, i32* @sl, align 4
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_846c

dec_label_pc_8430:                                ; preds = %dec_label_pc_846c
  %v0_8430 = load i32, i32* @r7, align 4
  %v1_8430 = load i32, i32* @r4, align 4
  %v2_8430 = sub i32 %v0_8430, %v1_8430
  store i32 %v2_8430, i32* %r1.global-to-local, align 4
  %v9_8430 = icmp eq i32 %v0_8430, %v1_8430
  store i1 %v9_8430, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8430, label %dec_label_pc_84c4, label %dec_label_pc_8438

dec_label_pc_8438:                                ; preds = %dec_label_pc_8430
  %v3_8438 = mul i32 %v0_848c, 8
  store i32 %v3_8438, i32* %r3.global-to-local, align 4
  %v1_843c = load i32, i32* @r8, align 4
  %v2_843c = add i32 %v1_843c, %v1_8430
  %v3_843c = inttoptr i32 %v2_843c to i8*
  %v4_843c = load i8, i8* %v3_843c, align 1
  %v6_843c = zext i8 %v4_843c to i32
  store i32 %v6_843c, i32* @r2, align 4
  %v0_8440 = load i32, i32* @r6, align 4
  %v2_8440 = add i32 %v0_8440, %v3_8438
  store i32 %v2_8440, i32* @sl, align 4
  %v1_8444 = add i32 %v2_8430, -1
  store i32 %v1_8444, i32* %r3.global-to-local, align 4
  %v7_8444 = icmp eq i32 %v2_8430, 1
  store i1 %v7_8444, i1* %cpsr_z.global-to-local, align 1
  %v3_8448 = add i32 %v2_8440, 4
  %v4_8448 = inttoptr i32 %v3_8448 to i8*
  store i8 %v4_843c, i8* %v4_8448, align 1
  %v0_844c = load i32, i32* @r4, align 4
  %v1_844c = load i32, i32* @r8, align 4
  %v2_844c = add i32 %v1_844c, %v0_844c
  store i32 %v2_844c, i32* %r1.global-to-local, align 4
  %v0_8450 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8450, label %dec_label_pc_84c4, label %dec_label_pc_8454

dec_label_pc_8454:                                ; preds = %dec_label_pc_8438
  %v1_8454 = add i32 %v2_844c, 1
  %v2_8454 = inttoptr i32 %v1_8454 to i8*
  %v3_8454 = load i8, i8* %v2_8454, align 1
  %v4_8454 = zext i8 %v3_8454 to i32
  store i32 %v4_8454, i32* @r4, align 4
  %v0_8458 = load i32, i32* %r3.global-to-local, align 4
  %v1_8458 = add i32 %v0_8458, -1
  store i32 %v1_8458, i32* @r7, align 4
  %v2_845c = sub i32 %v1_8458, %v4_8454
  %tmp46 = sub i32 0, %v2_845c
  %v6_845c = and i32 %v1_8458, %tmp46
  %v7_845c = icmp slt i32 %v6_845c, 0
  %v8_845c = icmp slt i32 %v2_845c, 0
  %v9_845c = icmp eq i32 %v1_8458, %v4_8454
  store i1 %v9_845c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8454, i32* %r1.global-to-local, align 4
  %v2_8464 = xor i1 %v8_845c, %v7_845c
  br i1 %v2_8464, label %dec_label_pc_84c4, label %dec_label_pc_8468

dec_label_pc_8468:                                ; preds = %dec_label_pc_8454
  %v1_8468 = add i32 %v2_844c, 2
  store i32 %v1_8468, i32* @r8, align 4
  br label %dec_label_pc_846c

dec_label_pc_846c:                                ; preds = %.thread10, %dec_label_pc_8468
  %v0_8470 = phi i32 [ %v4_840c, %.thread10 ], [ %v4_8454, %dec_label_pc_8468 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_8470 = add nuw nsw i32 %v0_8470, 1
  store i32 %v2_8470, i32* %r0.global-to-local, align 4
  %v2_8474 = call i32 @function_fea0(i32 %v2_8470, i32 1)
  store i32 %v2_8474, i32* %r0.global-to-local, align 4
  %v0_8478 = load i32, i32* @fp, align 4
  %v1_8478 = add i32 %v0_8478, 1
  store i32 %v1_8478, i32* @fp, align 4
  %v1_847c = load i32, i32* @sl, align 4
  %v2_847c = inttoptr i32 %v1_847c to i32*
  store i32 %v2_8474, i32* %v2_847c, align 4
  %v0_8480 = load i32, i32* @r8, align 4
  store i32 %v0_8480, i32* %r1.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v3_8488 = call i32 @function_f280(i32 %v2_8474, i32 %v0_8480, i32 %v0_8484)
  store i32 %v3_8488, i32* %r0.global-to-local, align 4
  %v0_848c = load i32, i32* @fp, align 4
  %v1_848c = load i32, i32* @r5, align 4
  %v9_848c = icmp eq i32 %v0_848c, %v1_848c
  store i1 %v9_848c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_848c, label %dec_label_pc_8494, label %dec_label_pc_8430

dec_label_pc_8494:                                ; preds = %dec_label_pc_846c, %bb
  %v0_8494 = call i32 @function_fb60()
  store i32 %v0_8494, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_849c = inttoptr i32 %v0_8494 to i32*
  store i32 0, i32* %v2_849c, align 4
  %v0_84a0 = call i32 @function_118e0()
  store i32 %v0_84a0, i32* %r0.global-to-local, align 4
  %v7_84a4 = icmp eq i32 %v0_84a0, -1
  %. = zext i1 %v7_84a4 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_84b0 = icmp eq i32 %v0_84a0, 0
  store i1 %v2_84b0, i1* %cpsr_z.global-to-local, align 1
  %tmp49 = icmp slt i32 %v0_84a0, 1
  br i1 %tmp49, label %bb50, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_8494
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_84c4

bb50:                                             ; preds = %dec_label_pc_8494
  store i32 %., i32* @r2, align 4
  %v2_84bc = icmp eq i1 %v7_84a4, false
  store i1 %v2_84bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84bc, label %dec_label_pc_850c, label %dec_label_pc_84c4

dec_label_pc_84c4:                                ; preds = %dec_label_pc_8454, %dec_label_pc_8438, %dec_label_pc_8430, %dec_label_pc_840c, %.thread14, %bb50, %dec_label_pc_83f8, %dec_label_pc_83e0, %dec_label_pc_83c4
  store i32 %v2_8378, i32* %r3.global-to-local, align 4
  %v2_84c8 = icmp eq i32 %v2_8378, 0
  store i1 %v2_84c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84c8, label %bb52, label %bb51

bb51:                                             ; preds = %dec_label_pc_84c4
  store i32 %v2_8378, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %dec_label_pc_84c4, %bb51
  store i32 34004, i32* @lr, align 4
  %v1_84d0 = xor i1 %v2_84c8, true
  call void @__pseudo_cond_branch(i1 %v1_84d0, i32 ptrtoint (i32* @global_var_10414.18 to i32))
  %v0_84d4 = load i32, i32* @r6, align 4
  %v2_84d4 = icmp eq i32 %v0_84d4, 0
  store i1 %v2_84d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84d4, label %.dec_label_pc_831c_crit_edge, label %dec_label_pc_84dc

.dec_label_pc_831c_crit_edge:                     ; preds = %bb52
  %v1_8324.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_831c

dec_label_pc_84dc:                                ; preds = %bb52
  %v0_84dc = load i32, i32* @r5, align 4
  %v2_84dc = icmp eq i32 %v0_84dc, 0
  store i1 %v2_84dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84dc, label %dec_label_pc_8500, label %dec_label_pc_84e4

dec_label_pc_84e4:                                ; preds = %dec_label_pc_84dc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_84e8

dec_label_pc_84e8:                                ; preds = %dec_label_pc_84e8, %dec_label_pc_84e4
  %v1_84e8 = phi i32 [ 0, %dec_label_pc_84e4 ], [ %v1_84f4, %dec_label_pc_84e8 ]
  %v0_84e8 = phi i32 [ %v0_84d4, %dec_label_pc_84e4 ], [ %v0_8500.pre, %dec_label_pc_84e8 ]
  %v4_84e8 = mul i32 %v1_84e8, 8
  %v5_84e8 = add i32 %v4_84e8, %v0_84e8
  %v6_84e8 = inttoptr i32 %v5_84e8 to i32*
  %v7_84e8 = load i32, i32* %v6_84e8, align 4
  store i32 %v7_84e8, i32* %r0.global-to-local, align 4
  %v2_84ec = icmp eq i32 %v7_84e8, 0
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  store i32 34036, i32* @lr, align 4
  %v1_84f0 = xor i1 %v2_84ec, true
  call void @__pseudo_cond_branch(i1 %v1_84f0, i32 ptrtoint (i32* @global_var_10414.18 to i32))
  %v0_84f4 = load i32, i32* @r4, align 4
  %v1_84f4 = add i32 %v0_84f4, 1
  store i32 %v1_84f4, i32* @r4, align 4
  %v0_84f8 = load i32, i32* @r5, align 4
  %v9_84f8 = icmp eq i32 %v0_84f8, %v1_84f4
  store i1 %v9_84f8, i1* %cpsr_z.global-to-local, align 1
  %v0_8500.pre = load i32, i32* @r6, align 4
  br i1 %v9_84f8, label %dec_label_pc_8500, label %dec_label_pc_84e8

dec_label_pc_8500:                                ; preds = %dec_label_pc_84e8, %dec_label_pc_84dc
  %v0_8500 = phi i32 [ %v0_84d4, %dec_label_pc_84dc ], [ %v0_8500.pre, %dec_label_pc_84e8 ]
  store i32 %v0_8500, i32* %r0.global-to-local, align 4
  %v1_8504 = call i32 @function_10414(i32 %v0_8500)
  store i32 %v1_8504, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_831c

dec_label_pc_850c:                                ; preds = %bb50
  store i32 ptrtoint (i8** @global_var_1f074.20 to i32), i32* %r3.global-to-local, align 4
  %v2_8510 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_8510 = zext i8 %v2_8510 to i32
  store i32 %v3_8510, i32* %r0.global-to-local, align 4
  %v2_8514 = icmp eq i8 %v2_8510, 0
  store i1 %v2_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8514, label %dec_label_pc_8578, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_850c
  store i32 ptrtoint (i32* @global_var_1f078.22 to i32), i32* %r3.global-to-local, align 4
  %v2_8520 = load i32, i32* @global_var_1f078.22, align 4
  %v1_8524 = inttoptr i32 %v2_8520 to i32*
  %v2_8524 = load i32, i32* %v1_8524, align 4
  store i32 %v2_8524, i32* %ip.global-to-local, align 4
  %v1_852c = add i32 %v2_8524, 4
  %v2_852c = inttoptr i32 %v1_852c to i8*
  %v3_852c = load i8, i8* %v2_852c, align 1
  %v4_852c = zext i8 %v3_852c to i32
  store i32 %v4_852c, i32* %r3.global-to-local, align 4
  %v9_8530 = icmp eq i8 %v3_852c, %v3_833c
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8530, label %dec_label_pc_8558, label %dec_label_pc_8538

dec_label_pc_8538:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8544
  %v0_8538 = phi i32 [ %v1_8538, %dec_label_pc_8544 ], [ 0, %dec_label_pc_851c ]
  %v1_8538 = add i32 %v0_8538, 1
  %v9_853c = icmp eq i32 %v1_8538, %v3_8510
  store i1 %v9_853c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_853c, label %dec_label_pc_8578, label %dec_label_pc_8544

dec_label_pc_8544:                                ; preds = %dec_label_pc_8538
  %v4_8544 = mul i32 %v1_8538, 4
  %v5_8544 = add i32 %v4_8544, %v2_8520
  %v6_8544 = inttoptr i32 %v5_8544 to i32*
  %v7_8544 = load i32, i32* %v6_8544, align 4
  store i32 %v7_8544, i32* %ip.global-to-local, align 4
  %v1_854c = add i32 %v7_8544, 4
  %v2_854c = inttoptr i32 %v1_854c to i8*
  %v3_854c = load i8, i8* %v2_854c, align 1
  %v4_854c = zext i8 %v3_854c to i32
  store i32 %v4_854c, i32* %r3.global-to-local, align 4
  %v9_8550 = icmp eq i8 %v3_854c, %v3_833c
  store i1 %v9_8550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8550, label %dec_label_pc_8558, label %dec_label_pc_8538

dec_label_pc_8558:                                ; preds = %dec_label_pc_8544, %dec_label_pc_851c
  %v0_856c = phi i32 [ %v2_8524, %dec_label_pc_851c ], [ %v7_8544, %dec_label_pc_8544 ]
  store i32 %v1_832c, i32* %r0.global-to-local, align 4
  %v0_8568 = load i32, i32* @r5, align 4
  store i32 %v0_8568, i32* %r3.global-to-local, align 4
  %v1_856c = inttoptr i32 %v0_856c to i32*
  %v2_856c = load i32, i32* %v1_856c, align 4
  store i32 %v2_856c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v2_856c)
  br label %dec_label_pc_8578

dec_label_pc_8578:                                ; preds = %dec_label_pc_8538, %dec_label_pc_850c, %dec_label_pc_8558
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_857c = call i32 @function_fb78(i32 0)
  store i32 %v1_857c, i32* %r0.global-to-local, align 4
  %v0_8580 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8580, label %bb54, label %.thread17

bb54:                                             ; preds = %dec_label_pc_8578
  %v1_8580 = load i32, i32* @r1, align 4
  %v2_8580 = load i32, i32* @r4, align 4
  %v4_8580 = lshr i32 %v2_8580, %v1_857c
  %v5_8580 = sub i32 32, %v1_857c
  %v6_8580 = shl i32 %v2_8580, %v5_8580
  %v7_8580 = or i32 %v6_8580, %v4_8580
  %v9_8580 = and i32 %v7_8580, %v1_8580
  call void @__pseudo_branch(i32 %v9_8580)
  %v0_8584.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8584.pr, label %bb55, label %.thread17

bb55:                                             ; preds = %bb54
  %v1_8584 = load i32, i32* @r1, align 4
  %v2_8584 = load i32, i32* @r8, align 4
  %v4_8584 = lshr i32 %v2_8584, %v1_857c
  %v6_8584 = shl i32 %v2_8584, %v5_8580
  %v7_8584 = or i32 %v6_8584, %v4_8584
  %v9_8584 = and i32 %v7_8584, %v1_8584
  call void @__pseudo_branch(i32 %v9_8584)
  br label %.thread17

.thread17:                                        ; preds = %dec_label_pc_8578, %bb54, %bb55
  ret i32 %v1_857c

; uselistorder directives
  uselistorder i32 %v1_857c, { 0, 3, 2, 1, 4 }
  uselistorder i1 %v9_8550, { 1, 0 }
  uselistorder i32 %v1_8538, { 1, 2, 0 }
  uselistorder i1 %v9_8530, { 1, 0 }
  uselistorder i32 %v1_8504, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v1_84f4, { 1, 2, 0 }
  uselistorder i1 %v2_84c8, { 0, 2, 1 }
  uselistorder i1 %v2_84bc, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_84a4, { 1, 0 }
  uselistorder i32 %v0_84a0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_848c, { 1, 0 }
  uselistorder i32 %v2_845c, { 1, 0 }
  uselistorder i32 %v1_8458, { 2, 0, 1, 3 }
  uselistorder i32 %v4_8454, { 0, 2, 1, 3 }
  uselistorder i32 %v3_8438, { 1, 0 }
  uselistorder i32 %v3_83cc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83bc, { 1, 0 }
  uselistorder i32 %v1_83b8, { 1, 0 }
  uselistorder i32 %v2_8378, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_834c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_832c, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v0_8314, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 1, 2, 3, 6, 7, 8, 9, 10, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 4, 3, 5, 10, 7, 8, 20, 9, 2, 11, 12, 14, 13, 21, 22, 15, 16, 17, 18, 19, 23, 25, 24, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 5, 4, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 0, 13, 18, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder label %.thread17, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8578, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8538, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %dec_label_pc_84c4, { 5, 4, 0, 1, 2, 3, 6, 7, 8 }
  uselistorder label %dec_label_pc_846c, { 1, 0 }
  uselistorder label %dec_label_pc_831c, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8588(i32 %arg1) local_unnamed_addr {
dec_label_pc_8588:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8588 = load i32, i32* @r4, align 4
  store i32 %v3_8588, i32* %stack_var_-24, align 4
  %v6_8588 = load i32, i32* @r5, align 4
  %v9_8588 = load i32, i32* @r6, align 4
  %v12_8588 = load i32, i32* @r7, align 4
  %v15_8588 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_8594 = call i32 @function_fea0(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1f074.20 to i32), i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f078.22 to i32), i32* @r6, align 4
  store i32 44312, i32* %r2.global-to-local, align 4
  store i32 %v2_8594, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1f075.26 to i32), i32* %r1.global-to-local, align 4
  %v2_85b4 = load i32, i32* @global_var_1f078.22, align 4
  %v2_85b8 = inttoptr i32 %v2_8594 to i32*
  store i32 44312, i32* %v2_85b8, align 4
  %v3_85bc = load i32, i32* @r4, align 4
  %v4_85bc = add i32 %v3_85bc, 4
  %v5_85bc = inttoptr i32 %v4_85bc to i8*
  store i8 0, i8* %v5_85bc, align 1
  %v0_85c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_85c0 = mul i32 %v0_85c0, 4
  store i32 %v3_85c0, i32* %r1.global-to-local, align 4
  %v5_85c4 = call i32 @function_1105c(i32 %v2_85b4, i32 %v3_85c0, i32 44312, i32 0)
  %v2_85c8 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_85c8 = zext i8 %v2_85c8 to i32
  store i32 %v5_85c4, i32* %r2.global-to-local, align 4
  %v0_85d0 = load i32, i32* @r4, align 4
  %v5_85d0 = mul nuw nsw i32 %v3_85c8, 4
  %v6_85d0 = add i32 %v5_85d0, %v5_85c4
  %v7_85d0 = inttoptr i32 %v6_85d0 to i32*
  store i32 %v0_85d0, i32* %v7_85d0, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1f075.26 to i32), i32* %r3.global-to-local, align 4
  %v1_85e0 = load i32, i32* @r6, align 4
  %v2_85e0 = inttoptr i32 %v1_85e0 to i32*
  store i32 %v5_85c4, i32* %v2_85e0, align 4
  %v0_85e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_85e4 = trunc i32 %v0_85e4 to i8
  %v2_85e4 = load i32, i32* @r5, align 4
  %v3_85e4 = inttoptr i32 %v2_85e4 to i8*
  store i8 %v1_85e4, i8* %v3_85e4, align 1
  %v2_85e8 = call i32 @function_fea0(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_b200.28 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_85e8, i32* @r4, align 4
  store i32 ptrtoint (i8* @global_var_1f075.26 to i32), i32* %r1.global-to-local, align 4
  %v2_8600 = load i32, i32* @global_var_1f078.22, align 4
  %v2_8604 = inttoptr i32 %v2_85e8 to i32*
  store i32 ptrtoint (i32* @global_var_b200.28 to i32), i32* %v2_8604, align 4
  %v0_8608 = load i32, i32* @r7, align 4
  %v1_8608 = trunc i32 %v0_8608 to i8
  %v2_8608 = load i32, i32* @r4, align 4
  %v3_8608 = add i32 %v2_8608, 4
  %v4_8608 = inttoptr i32 %v3_8608 to i8*
  store i8 %v1_8608, i8* %v4_8608, align 1
  %v0_860c = load i32, i32* %r1.global-to-local, align 4
  %v3_860c = mul i32 %v0_860c, 4
  store i32 %v3_860c, i32* %r1.global-to-local, align 4
  %v4_8610 = call i32 @function_1105c(i32 %v2_8600, i32 %v3_860c, i32 %v5_85c4, i32 ptrtoint (i32* @global_var_b200.28 to i32))
  %v2_8614 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_8614 = zext i8 %v2_8614 to i32
  store i32 %v3_8614, i32* %r3.global-to-local, align 4
  store i32 %v4_8610, i32* %r2.global-to-local, align 4
  %v0_861c = load i32, i32* @r4, align 4
  %v5_861c = mul nuw nsw i32 %v3_8614, 4
  %v6_861c = add i32 %v5_861c, %v4_8610
  %v7_861c = inttoptr i32 %v6_861c to i32*
  store i32 %v0_861c, i32* %v7_861c, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8624 = load i32, i32* %r3.global-to-local, align 4
  %v1_8624 = load i32, i32* @r7, align 4
  %v2_8624 = add i32 %v1_8624, %v0_8624
  store i32 %v2_8624, i32* %r3.global-to-local, align 4
  %v1_862c = trunc i32 %v2_8624 to i8
  %v2_862c = load i32, i32* @r5, align 4
  %v3_862c = inttoptr i32 %v2_862c to i8*
  store i8 %v1_862c, i8* %v3_862c, align 1
  %v0_8630 = load i32, i32* %r2.global-to-local, align 4
  %v1_8630 = load i32, i32* @r6, align 4
  %v2_8630 = inttoptr i32 %v1_8630 to i32*
  store i32 %v0_8630, i32* %v2_8630, align 4
  %v2_8634 = call i32 @function_fea0(i32 %v1_8624, i32 8)
  %v2_8638 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_8638 = zext i8 %v2_8638 to i32
  store i32 ptrtoint (i32* @global_var_b638.30 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8634, i32* @r4, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8648 = load i32, i32* @r7, align 4
  %v2_8648 = add i32 %v1_8648, %v3_8638
  store i32 %v2_8648, i32* %r1.global-to-local, align 4
  %v2_864c = load i32, i32* @global_var_1f078.22, align 4
  %v2_8650 = inttoptr i32 %v2_8634 to i32*
  store i32 ptrtoint (i32* @global_var_b638.30 to i32), i32* %v2_8650, align 4
  %v3_8654 = load i32, i32* @r4, align 4
  %v4_8654 = add i32 %v3_8654, 4
  %v5_8654 = inttoptr i32 %v4_8654 to i8*
  store i8 2, i8* %v5_8654, align 1
  %v0_8658 = load i32, i32* %r1.global-to-local, align 4
  %v3_8658 = mul i32 %v0_8658, 4
  store i32 %v3_8658, i32* %r1.global-to-local, align 4
  %v5_865c = call i32 @function_1105c(i32 %v2_864c, i32 %v3_8658, i32 ptrtoint (i32* @global_var_b638.30 to i32), i32 2)
  %v2_8660 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_8660 = zext i8 %v2_8660 to i32
  store i32 %v3_8660, i32* %r3.global-to-local, align 4
  store i32 %v5_865c, i32* %r2.global-to-local, align 4
  %v0_8668 = load i32, i32* @r4, align 4
  %v5_8668 = mul nuw nsw i32 %v3_8660, 4
  %v6_8668 = add i32 %v5_8668, %v5_865c
  %v7_8668 = inttoptr i32 %v6_8668 to i32*
  store i32 %v0_8668, i32* %v7_8668, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8670 = load i32, i32* %r3.global-to-local, align 4
  %v1_8670 = load i32, i32* @r7, align 4
  %v2_8670 = add i32 %v1_8670, %v0_8670
  store i32 %v2_8670, i32* %r3.global-to-local, align 4
  %v1_8678 = load i32, i32* @r6, align 4
  %v2_8678 = inttoptr i32 %v1_8678 to i32*
  store i32 %v5_865c, i32* %v2_8678, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = trunc i32 %v0_867c to i8
  %v2_867c = load i32, i32* @r5, align 4
  %v3_867c = inttoptr i32 %v2_867c to i8*
  store i8 %v1_867c, i8* %v3_867c, align 1
  %v2_8680 = call i32 @function_fea0(i32 %v1_8670, i32 8)
  %v2_8684 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_8684 = zext i8 %v2_8684 to i32
  store i32 ptrtoint (i32* @global_var_aa88.32 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r8, align 4
  store i32 %v2_8680, i32* @r4, align 4
  %v1_8694 = load i32, i32* @r7, align 4
  %v2_8694 = add i32 %v1_8694, %v3_8684
  store i32 %v2_8694, i32* %r1.global-to-local, align 4
  %v2_8698 = load i32, i32* @global_var_1f078.22, align 4
  %v2_869c = inttoptr i32 %v2_8680 to i32*
  store i32 ptrtoint (i32* @global_var_aa88.32 to i32), i32* %v2_869c, align 4
  %v0_86a0 = load i32, i32* @r8, align 4
  %v1_86a0 = trunc i32 %v0_86a0 to i8
  %v2_86a0 = load i32, i32* @r4, align 4
  %v3_86a0 = add i32 %v2_86a0, 4
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 %v1_86a0, i8* %v4_86a0, align 1
  %v0_86a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_86a4 = mul i32 %v0_86a4, 4
  store i32 %v3_86a4, i32* %r1.global-to-local, align 4
  %v4_86a8 = call i32 @function_1105c(i32 %v2_8698, i32 %v3_86a4, i32 %v5_865c, i32 ptrtoint (i32* @global_var_aa88.32 to i32))
  %v2_86ac = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_86ac = zext i8 %v2_86ac to i32
  store i32 %v3_86ac, i32* %r3.global-to-local, align 4
  store i32 %v4_86a8, i32* %r2.global-to-local, align 4
  %v0_86b4 = load i32, i32* @r4, align 4
  %v5_86b4 = mul nuw nsw i32 %v3_86ac, 4
  %v6_86b4 = add i32 %v5_86b4, %v4_86a8
  %v7_86b4 = inttoptr i32 %v6_86b4 to i32*
  store i32 %v0_86b4, i32* %v7_86b4, align 4
  %v0_86b8 = load i32, i32* @r8, align 4
  store i32 %v0_86b8, i32* %r1.global-to-local, align 4
  %v0_86bc = load i32, i32* %r3.global-to-local, align 4
  %v1_86bc = load i32, i32* @r7, align 4
  %v2_86bc = add i32 %v1_86bc, %v0_86bc
  store i32 %v2_86bc, i32* %r3.global-to-local, align 4
  %v1_86c4 = trunc i32 %v2_86bc to i8
  %v2_86c4 = load i32, i32* @r5, align 4
  %v3_86c4 = inttoptr i32 %v2_86c4 to i8*
  store i8 %v1_86c4, i8* %v3_86c4, align 1
  %v0_86c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r6, align 4
  %v2_86c8 = inttoptr i32 %v1_86c8 to i32*
  store i32 %v0_86c8, i32* %v2_86c8, align 4
  %v2_86cc = call i32 @function_fea0(i32 %v1_86bc, i32 %v0_86b8)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 ptrtoint (i32* @global_var_a3dc.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86cc, i32* @r4, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r7, align 4
  %v2_86e0 = add i32 %v1_86e0, %v3_86d0
  store i32 %v2_86e0, i32* %r1.global-to-local, align 4
  %v2_86e4 = load i32, i32* @global_var_1f078.22, align 4
  %v2_86e8 = inttoptr i32 %v2_86cc to i32*
  store i32 ptrtoint (i32* @global_var_a3dc.34 to i32), i32* %v2_86e8, align 4
  %v3_86ec = load i32, i32* @r4, align 4
  %v4_86ec = add i32 %v3_86ec, 4
  %v5_86ec = inttoptr i32 %v4_86ec to i8*
  store i8 3, i8* %v5_86ec, align 1
  %v0_86f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86f0 = mul i32 %v0_86f0, 4
  store i32 %v3_86f0, i32* %r1.global-to-local, align 4
  %v5_86f4 = call i32 @function_1105c(i32 %v2_86e4, i32 %v3_86f0, i32 ptrtoint (i32* @global_var_a3dc.34 to i32), i32 3)
  %v2_86f8 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_86f8 = zext i8 %v2_86f8 to i32
  store i32 %v3_86f8, i32* %r3.global-to-local, align 4
  store i32 %v5_86f4, i32* %r2.global-to-local, align 4
  %v0_8700 = load i32, i32* @r4, align 4
  %v5_8700 = mul nuw nsw i32 %v3_86f8, 4
  %v6_8700 = add i32 %v5_8700, %v5_86f4
  %v7_8700 = inttoptr i32 %v6_8700 to i32*
  store i32 %v0_8700, i32* %v7_8700, align 4
  %v0_8704 = load i32, i32* @r8, align 4
  store i32 %v0_8704, i32* %r1.global-to-local, align 4
  %v0_8708 = load i32, i32* %r3.global-to-local, align 4
  %v1_8708 = load i32, i32* @r7, align 4
  %v2_8708 = add i32 %v1_8708, %v0_8708
  store i32 %v2_8708, i32* %r3.global-to-local, align 4
  %v1_8710 = trunc i32 %v2_8708 to i8
  %v2_8710 = load i32, i32* @r5, align 4
  %v3_8710 = inttoptr i32 %v2_8710 to i8*
  store i8 %v1_8710, i8* %v3_8710, align 1
  %v0_8714 = load i32, i32* %r2.global-to-local, align 4
  %v1_8714 = load i32, i32* @r6, align 4
  %v2_8714 = inttoptr i32 %v1_8714 to i32*
  store i32 %v0_8714, i32* %v2_8714, align 4
  %v2_8718 = call i32 @function_fea0(i32 %v1_8708, i32 %v0_8704)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 ptrtoint (i32* @global_var_9cf8.36 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8718, i32* @r4, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_872c = load i32, i32* @r7, align 4
  %v2_872c = add i32 %v1_872c, %v3_871c
  store i32 %v2_872c, i32* %r1.global-to-local, align 4
  %v2_8730 = load i32, i32* @global_var_1f078.22, align 4
  %v2_8734 = inttoptr i32 %v2_8718 to i32*
  store i32 ptrtoint (i32* @global_var_9cf8.36 to i32), i32* %v2_8734, align 4
  %v3_8738 = load i32, i32* @r4, align 4
  %v4_8738 = add i32 %v3_8738, 4
  %v5_8738 = inttoptr i32 %v4_8738 to i8*
  store i8 4, i8* %v5_8738, align 1
  %v0_873c = load i32, i32* %r1.global-to-local, align 4
  %v3_873c = mul i32 %v0_873c, 4
  store i32 %v3_873c, i32* %r1.global-to-local, align 4
  %v5_8740 = call i32 @function_1105c(i32 %v2_8730, i32 %v3_873c, i32 ptrtoint (i32* @global_var_9cf8.36 to i32), i32 4)
  %v2_8744 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_8744 = zext i8 %v2_8744 to i32
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v5_8740, i32* %r2.global-to-local, align 4
  %v0_874c = load i32, i32* @r4, align 4
  %v5_874c = mul nuw nsw i32 %v3_8744, 4
  %v6_874c = add i32 %v5_874c, %v5_8740
  %v7_874c = inttoptr i32 %v6_874c to i32*
  store i32 %v0_874c, i32* %v7_874c, align 4
  %v0_8750 = load i32, i32* @r8, align 4
  store i32 %v0_8750, i32* %r1.global-to-local, align 4
  %v0_8754 = load i32, i32* %r3.global-to-local, align 4
  %v1_8754 = load i32, i32* @r7, align 4
  %v2_8754 = add i32 %v1_8754, %v0_8754
  store i32 %v2_8754, i32* %r3.global-to-local, align 4
  %v1_875c = trunc i32 %v2_8754 to i8
  %v2_875c = load i32, i32* @r5, align 4
  %v3_875c = inttoptr i32 %v2_875c to i8*
  store i8 %v1_875c, i8* %v3_875c, align 1
  %v0_8760 = load i32, i32* %r2.global-to-local, align 4
  %v1_8760 = load i32, i32* @r6, align 4
  %v2_8760 = inttoptr i32 %v1_8760 to i32*
  store i32 %v0_8760, i32* %v2_8760, align 4
  %v2_8764 = call i32 @function_fea0(i32 %v1_8754, i32 %v0_8750)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 ptrtoint (i32* @global_var_9508.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8764, i32* @r4, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r7, align 4
  %v2_8778 = add i32 %v1_8778, %v3_8768
  store i32 %v2_8778, i32* %r1.global-to-local, align 4
  %v2_877c = load i32, i32* @global_var_1f078.22, align 4
  %v2_8780 = inttoptr i32 %v2_8764 to i32*
  store i32 ptrtoint (i32* @global_var_9508.38 to i32), i32* %v2_8780, align 4
  %v3_8784 = load i32, i32* @r4, align 4
  %v4_8784 = add i32 %v3_8784, 4
  %v5_8784 = inttoptr i32 %v4_8784 to i8*
  store i8 5, i8* %v5_8784, align 1
  %v0_8788 = load i32, i32* %r1.global-to-local, align 4
  %v3_8788 = mul i32 %v0_8788, 4
  store i32 %v3_8788, i32* %r1.global-to-local, align 4
  %v5_878c = call i32 @function_1105c(i32 %v2_877c, i32 %v3_8788, i32 ptrtoint (i32* @global_var_9508.38 to i32), i32 5)
  %v2_8790 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_8790 = zext i8 %v2_8790 to i32
  store i32 %v3_8790, i32* %r3.global-to-local, align 4
  store i32 %v5_878c, i32* %r2.global-to-local, align 4
  %v0_8798 = load i32, i32* @r4, align 4
  %v5_8798 = mul nuw nsw i32 %v3_8790, 4
  %v6_8798 = add i32 %v5_8798, %v5_878c
  %v7_8798 = inttoptr i32 %v6_8798 to i32*
  store i32 %v0_8798, i32* %v7_8798, align 4
  %v0_879c = load i32, i32* @r8, align 4
  store i32 %v0_879c, i32* %r1.global-to-local, align 4
  %v0_87a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87a0 = load i32, i32* @r7, align 4
  %v2_87a0 = add i32 %v1_87a0, %v0_87a0
  store i32 %v2_87a0, i32* %r3.global-to-local, align 4
  %v1_87a8 = trunc i32 %v2_87a0 to i8
  %v2_87a8 = load i32, i32* @r5, align 4
  %v3_87a8 = inttoptr i32 %v2_87a8 to i8*
  store i8 %v1_87a8, i8* %v3_87a8, align 1
  %v0_87ac = load i32, i32* %r2.global-to-local, align 4
  %v1_87ac = load i32, i32* @r6, align 4
  %v2_87ac = inttoptr i32 %v1_87ac to i32*
  store i32 %v0_87ac, i32* %v2_87ac, align 4
  %v2_87b0 = call i32 @function_fea0(i32 %v1_87a0, i32 %v0_879c)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 ptrtoint (i32* @global_var_8efc.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87b0, i32* @r4, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r7, align 4
  %v2_87c4 = add i32 %v1_87c4, %v3_87b4
  store i32 %v2_87c4, i32* %r1.global-to-local, align 4
  %v2_87c8 = load i32, i32* @global_var_1f078.22, align 4
  %v2_87cc = inttoptr i32 %v2_87b0 to i32*
  store i32 ptrtoint (i32* @global_var_8efc.40 to i32), i32* %v2_87cc, align 4
  %v3_87d0 = load i32, i32* @r4, align 4
  %v4_87d0 = add i32 %v3_87d0, 4
  %v5_87d0 = inttoptr i32 %v4_87d0 to i8*
  store i8 6, i8* %v5_87d0, align 1
  %v0_87d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_87d4 = mul i32 %v0_87d4, 4
  store i32 %v3_87d4, i32* %r1.global-to-local, align 4
  %v5_87d8 = call i32 @function_1105c(i32 %v2_87c8, i32 %v3_87d4, i32 ptrtoint (i32* @global_var_8efc.40 to i32), i32 6)
  %v2_87dc = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_87dc = zext i8 %v2_87dc to i32
  store i32 %v3_87dc, i32* %r3.global-to-local, align 4
  store i32 %v5_87d8, i32* %r2.global-to-local, align 4
  %v0_87e4 = load i32, i32* @r4, align 4
  %v5_87e4 = mul nuw nsw i32 %v3_87dc, 4
  %v6_87e4 = add i32 %v5_87e4, %v5_87d8
  %v7_87e4 = inttoptr i32 %v6_87e4 to i32*
  store i32 %v0_87e4, i32* %v7_87e4, align 4
  %v0_87e8 = load i32, i32* @r8, align 4
  store i32 %v0_87e8, i32* %r1.global-to-local, align 4
  %v0_87ec = load i32, i32* %r3.global-to-local, align 4
  %v1_87ec = load i32, i32* @r7, align 4
  %v2_87ec = add i32 %v1_87ec, %v0_87ec
  store i32 %v2_87ec, i32* %r3.global-to-local, align 4
  %v1_87f4 = trunc i32 %v2_87ec to i8
  %v2_87f4 = load i32, i32* @r5, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v0_87f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r6, align 4
  %v2_87f8 = inttoptr i32 %v1_87f8 to i32*
  store i32 %v0_87f8, i32* %v2_87f8, align 4
  %v2_87fc = call i32 @function_fea0(i32 %v1_87ec, i32 %v0_87e8)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 ptrtoint (i32* @global_var_8874.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87fc, i32* @r4, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_8810 = load i32, i32* @r7, align 4
  %v2_8810 = add i32 %v1_8810, %v3_8800
  store i32 %v2_8810, i32* %r1.global-to-local, align 4
  %v2_8814 = load i32, i32* @global_var_1f078.22, align 4
  %v2_8818 = inttoptr i32 %v2_87fc to i32*
  store i32 ptrtoint (i32* @global_var_8874.42 to i32), i32* %v2_8818, align 4
  %v3_881c = load i32, i32* @r4, align 4
  %v4_881c = add i32 %v3_881c, 4
  %v5_881c = inttoptr i32 %v4_881c to i8*
  store i8 7, i8* %v5_881c, align 1
  %v0_8820 = load i32, i32* %r1.global-to-local, align 4
  %v3_8820 = mul i32 %v0_8820, 4
  store i32 %v3_8820, i32* %r1.global-to-local, align 4
  %v5_8824 = call i32 @function_1105c(i32 %v2_8814, i32 %v3_8820, i32 ptrtoint (i32* @global_var_8874.42 to i32), i32 7)
  %v2_8828 = load i8, i8* bitcast (i8** @global_var_1f074.20 to i8*), align 4
  %v3_8828 = zext i8 %v2_8828 to i32
  store i32 %v3_8828, i32* %r3.global-to-local, align 4
  %v1_882c = load i32, i32* @r6, align 4
  %v2_882c = inttoptr i32 %v1_882c to i32*
  store i32 %v5_8824, i32* %v2_882c, align 4
  %v0_8830 = load i32, i32* @r4, align 4
  %v2_8830 = load i32, i32* %r3.global-to-local, align 4
  %v5_8830 = mul i32 %v2_8830, 4
  %v6_8830 = add i32 %v5_8830, %v5_8824
  %v7_8830 = inttoptr i32 %v6_8830 to i32*
  store i32 %v0_8830, i32* %v7_8830, align 4
  %v0_8834 = load i32, i32* %r3.global-to-local, align 4
  %v1_8834 = load i32, i32* @r7, align 4
  %v2_8834 = add i32 %v1_8834, %v0_8834
  store i32 %v2_8834, i32* %r2.global-to-local, align 4
  %v1_883c = trunc i32 %v2_8834 to i8
  %v2_883c = load i32, i32* @r5, align 4
  %v3_883c = inttoptr i32 %v2_883c to i8*
  store i8 %v1_883c, i8* %v3_883c, align 1
  %v2_8840 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8840, i32* @r4, align 4
  store i32 %v6_8588, i32* @r5, align 4
  store i32 %v9_8588, i32* @r6, align 4
  store i32 %v12_8588, i32* @r7, align 4
  store i32 %v15_8588, i32* @r8, align 4
  ret i32 %v1_8834

; uselistorder directives
  uselistorder i32 %v1_8834, { 1, 0 }
  uselistorder i32 %v3_8820, { 1, 0 }
  uselistorder i32 %v1_87ec, { 1, 0 }
  uselistorder i32 %v3_87d4, { 1, 0 }
  uselistorder i32 %v1_87a0, { 1, 0 }
  uselistorder i32 %v3_8788, { 1, 0 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %v3_873c, { 1, 0 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v3_86f0, { 1, 0 }
  uselistorder i32 %v1_86bc, { 1, 0 }
  uselistorder i32 %v3_86a4, { 1, 0 }
  uselistorder i32 %v1_8670, { 1, 0 }
  uselistorder i32 %v5_865c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8658, { 1, 0 }
  uselistorder i32 %v1_8624, { 1, 0 }
  uselistorder i32 %v3_860c, { 1, 0 }
  uselistorder i32 %v2_85e8, { 1, 0 }
  uselistorder i32 %v5_85c4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_85c0, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f074.20 to i8*), { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1f075.26 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_1f074.20, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f074.20 to i32), { 1, 0 }
}

define i32 @function_8874(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8874:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_8874 = load i32, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_88a0 = call i32 @function_fea0(i32 %arg2, i32 4)
  %v0_88a4 = load i32, i32* @r4, align 4
  store i32 %v0_88a4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_88b0 = load i32, i32* @r7, align 4
  store i32 %v0_88b0, i32* %r3.global-to-local, align 4
  %v0_88b4 = load i32, i32* @r5, align 4
  store i32 %v0_88b4, i32* %r0.global-to-local, align 4
  %v5_88b8 = inttoptr i32 %v0_88a4 to i32*
  %v6_88b8 = call i32 @function_8294(i32 %v0_88b4, i32* %v5_88b8, i32 2, i32 %v0_88b0, i32 %v2_88a0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_88d0 = load i32, i32* @r4, align 4
  store i32 %v0_88d0, i32* %r1.global-to-local, align 4
  %v0_88d4 = load i32, i32* @r5, align 4
  store i32 %v0_88d4, i32* %r0.global-to-local, align 4
  %v5_88d8 = trunc i32 %v6_88b8 to i8
  %v6_88dc = inttoptr i32 %v0_88d0 to i32*
  %v7_88dc = call i32 @function_8294(i32 %v0_88d4, i32* %v6_88dc, i32 3, i32 65535, i32 %v6_88b8)
  %v0_88e0 = load i32, i32* @r4, align 4
  store i32 %v0_88e0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_88f0 = load i32, i32* @r5, align 4
  store i32 %v0_88f0, i32* %r0.global-to-local, align 4
  %v5_88f4 = inttoptr i32 %v0_88e0 to i32*
  %v6_88f4 = call i32 @function_8294(i32 %v0_88f0, i32* %v5_88f4, i32 4, i32 64, i32 %v7_88dc)
  %v0_8900 = load i32, i32* @r4, align 4
  store i32 %v0_8900, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_890c = load i32, i32* @r5, align 4
  store i32 %v0_890c, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_88f4, 16777216
  %v5_8914 = sdiv i32 %sext, 16777216
  %v6_8914 = inttoptr i32 %v0_8900 to i32*
  %v7_8914 = call i32 @function_8294(i32 %v0_890c, i32* %v6_8914, i32 5, i32 1, i32 %v5_8914)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8928 = load i32, i32* @r4, align 4
  store i32 %v0_8928, i32* %r1.global-to-local, align 4
  %v0_892c = load i32, i32* @r5, align 4
  store i32 %v0_892c, i32* %r0.global-to-local, align 4
  %v1_8930 = urem i32 %v7_8914, 256
  store i32 %v1_8930, i32* @fp, align 4
  %v5_8934 = inttoptr i32 %v0_8928 to i32*
  %v6_8934 = call i32 @function_8294(i32 %v0_892c, i32* %v5_8934, i32 6, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8940 = load i32, i32* @r4, align 4
  store i32 %v0_8940, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_894c = load i32, i32* @r5, align 4
  store i32 %v0_894c, i32* %r0.global-to-local, align 4
  %v5_8950 = inttoptr i32 %v0_8940 to i32*
  %v6_8950 = call i32 @function_8294(i32 %v0_894c, i32* %v5_8950, i32 7, i32 65535, i32 %v6_8934)
  %v0_8954 = load i32, i32* @r4, align 4
  store i32 %v0_8954, i32* %r1.global-to-local, align 4
  %v0_8958 = load i32, i32* @r7, align 4
  store i32 %v0_8958, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8950, i32* @sb, align 4
  %v0_8964 = load i32, i32* @r5, align 4
  store i32 %v0_8964, i32* %r0.global-to-local, align 4
  %v5_8968 = inttoptr i32 %v0_8954 to i32*
  %v6_8968 = call i32 @function_8294(i32 %v0_8964, i32* %v5_8968, i32 %v0_8958, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8978 = load i32, i32* @r4, align 4
  store i32 %v0_8978, i32* %r1.global-to-local, align 4
  %v0_897c = load i32, i32* @r5, align 4
  store i32 %v0_897c, i32* %r0.global-to-local, align 4
  %v5_8980 = inttoptr i32 %v0_8978 to i32*
  %v6_8980 = call i32 @function_8294(i32 %v0_897c, i32* %v5_8980, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8988 = urem i32 %v6_8980, 256
  %v0_898c = load i32, i32* @r4, align 4
  store i32 %v0_898c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_8994 = load i32, i32* @r7, align 4
  store i32 %v0_8994, i32* %r3.global-to-local, align 4
  %v0_8998 = load i32, i32* @r5, align 4
  store i32 %v0_8998, i32* %r0.global-to-local, align 4
  %v5_89a0 = inttoptr i32 %v0_898c to i32*
  %v6_89a0 = call i32 @function_8294(i32 %v0_8998, i32* %v5_89a0, i32 18, i32 %v0_8994, i32 %v1_8988)
  %v0_89a8 = load i32, i32* @r4, align 4
  store i32 %v0_89a8, i32* %r1.global-to-local, align 4
  %v2_89ac = load i32, i32* @global_var_1f644.44, align 4
  store i32 %v2_89ac, i32* %r3.global-to-local, align 4
  store i32 %v6_89a0, i32* @r8, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_89b8 = load i32, i32* @r5, align 4
  store i32 %v0_89b8, i32* %r0.global-to-local, align 4
  %v5_89bc = inttoptr i32 %v0_89a8 to i32*
  %v6_89bc = call i32 @function_8294(i32 %v0_89b8, i32* %v5_89bc, i32 19, i32 %v2_89ac, i32 ptrtoint (i32* @0 to i32))
  %v0_89c4 = load i32, i32* @r7, align 4
  store i32 %v0_89c4, i32* %r0.global-to-local, align 4
  %v1_89c8 = inttoptr i32 %v0_89c4 to i32*
  %v2_89c8 = call i32 @function_126dc(i32* %v1_89c8)
  %v1_89cc = load i32, i32* @r6, align 4
  %v2_89cc = add i32 %v1_89cc, %v2_89c8
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_89e0 = call i32 @function_117e8(i32 2, i32 3, i32 6)
  store i32 %v3_89e0, i32* @r0, align 4
  %v7_89e4 = icmp eq i32 %v3_89e0, -1
  store i1 %v7_89e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_89e4, label %dec_label_pc_8edc, label %dec_label_pc_89f0

dec_label_pc_89f0:                                ; preds = %dec_label_pc_8874
  store i32 1, i32* %stack_var_-44, align 4
  %v6_89f8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_89f8, i32* %r3.global-to-local, align 4
  %v0_8a00 = load i32, i32* @r7, align 4
  store i32 %v0_8a00, i32* %r1.global-to-local, align 4
  store i32 3, i32* @r2, align 4
  %v5_8a0c = call i32 @function_11778(i32 %v3_89e0, i32 %v0_8a00, i32 3, i32 %v6_89f8, i32 4)
  store i32 %v5_8a0c, i32* %r0.global-to-local, align 4
  %v7_8a10 = icmp eq i32 %v5_8a0c, -1
  store i1 %v7_8a10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a10, label %dec_label_pc_8ed4, label %dec_label_pc_8a18

dec_label_pc_8a18:                                ; preds = %dec_label_pc_89f0
  %v3_8a20 = mul i32 %v7_88dc, 65536
  store i32 %v3_8a20, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_8a2c = load i32, i32* @sb, align 4
  %v3_8a30 = urem i32 %v6_8934, 65536
  store i32 %v3_8a30, i32* %r2.global-to-local, align 4
  %v3_8a34 = urem i32 %v0_8a2c, 65536
  store i32 %v3_8a34, i32* %r1.global-to-local, align 4
  %v0_8a38 = load i32, i32* @r8, align 4
  %v1_8a38 = urem i32 %v0_8a38, 256
  store i32 %v1_8a38, i32* @r8, align 4
  %v2_8a3c = icmp eq i32 %arg2, 0
  store i1 %v2_8a3c, i1* %cpsr_z.global-to-local, align 1
  %v3_8a40 = urem i32 %v7_88dc, 65536
  store i32 %v3_8a40, i32* @sb, align 4
  %v0_8a50 = load i32, i32* @r7, align 4
  store i32 %v0_8a50, i32* %stack_var_-44, align 4
  br i1 %v2_8a3c, label %dec_label_pc_8c44.preheader, label %dec_label_pc_8a58

dec_label_pc_8a58:                                ; preds = %dec_label_pc_8a18
  %v3_8a60 = mul i32 %v6_8968, 65536
  %v1_8a64 = add i32 %v3_8a60, 524288
  %v1_8a68 = add i32 %v3_8a60, 4325376
  %v1_8a70 = add i32 %v3_8a60, 1835008
  %v3_8a74 = udiv i32 %v1_8a68, 65536
  store i32 %v3_8a74, i32* %r1.global-to-local, align 4
  %v3_8a78 = udiv i32 %v1_8a70, 65536
  store i32 %v3_8a78, i32* %r3.global-to-local, align 4
  %v3_8a7c = xor i32 %v3_8a40, 65535
  store i32 %v3_8a7c, i32* %r2.global-to-local, align 4
  %v3_8a80 = udiv i32 %v1_8a64, 65536
  store i32 %v3_8a80, i32* %r0.global-to-local, align 4
  store i32 %v0_8a50, i32* @r4, align 4
  %v2_8b4c = icmp eq i32 %v1_8a38, 0
  %v1_8c08 = trunc i32 %v5_8914 to i8
  br label %dec_label_pc_8ba0

dec_label_pc_8a9c:                                ; preds = %dec_label_pc_8ba0, %dec_label_pc_8c20
  %v2_8aa0 = phi i32 [ %v0_8c0c, %dec_label_pc_8ba0 ], [ %v2_8aa0.pre, %dec_label_pc_8c20 ]
  %v3_8aa0 = add i32 %v2_8aa0, 9
  %v4_8aa0 = inttoptr i32 %v3_8aa0 to i8*
  store i8 47, i8* %v4_8aa0, align 1
  %v3_8aa4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  store i32 %v6_89bc, i32* %r1.global-to-local, align 4
  %v3_8aac = mul i32 %v3_8aa4, 32
  store i32 %v3_8aac, i32* %r3.global-to-local, align 4
  %v1_8ab0 = load i32, i32* %r4.global-to-local, align 4
  %v2_8ab0 = add i32 %v1_8ab0, 12
  %v3_8ab0 = inttoptr i32 %v2_8ab0 to i32*
  store i32 %v6_89bc, i32* %v3_8ab0, align 4
  %v0_8ab4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ab4 = load i32, i32* %r2.global-to-local, align 4
  %tmp = mul i32 %v1_8ab4, -8
  %v5_8ab4 = add i32 %v0_8ab4, %tmp
  %v1_8ab8 = load i32, i32* @sl, align 4
  %v2_8ab8 = add i32 %v1_8ab8, %v5_8ab4
  store i32 %v2_8ab8, i32* %r3.global-to-local, align 4
  %v1_8abc = add i32 %v2_8ab8, 16
  %v2_8abc = inttoptr i32 %v1_8abc to i32*
  %v3_8abc = load i32, i32* %v2_8abc, align 4
  store i32 %v3_8abc, i32* %r2.global-to-local, align 4
  store i32 25856, i32* %r0.global-to-local, align 4
  %v1_8ac4 = load i32, i32* %r4.global-to-local, align 4
  %v2_8ac4 = add i32 %v1_8ac4, 16
  %v3_8ac4 = inttoptr i32 %v2_8ac4 to i32*
  store i32 %v3_8abc, i32* %v3_8ac4, align 4
  %v0_8ac8 = load i32, i32* %r0.global-to-local, align 4
  %v1_8ac8 = add i32 %v0_8ac8, 88
  store i32 %v1_8ac8, i32* %r0.global-to-local, align 4
  %v1_8acc = call i32 @function_114e0(i32 %v1_8ac8)
  %v2_8acc = trunc i32 %v1_8acc to i16
  %v3_8ad0 = load i32, i32* @r8, align 4
  %v4_8ad0 = add i32 %v3_8ad0, 2
  %v5_8ad0 = inttoptr i32 %v4_8ad0 to i16*
  store i16 %v2_8acc, i16* %v5_8ad0, align 2
  store i32 2048, i32* %r0.global-to-local, align 4
  %v1_8ad8 = call i32 @function_114e0(i32 2048)
  %v2_8ad8 = trunc i32 %v1_8ad8 to i8
  store i32 %v1_8ad8, i32* %r0.global-to-local, align 4
  %v4_8adc = udiv i32 %v1_8ad8, 256
  store i32 %v4_8adc, i32* %r3.global-to-local, align 4
  %v1_8ae0 = trunc i32 %v4_8adc to i8
  %v2_8ae0 = load i32, i32* @r6, align 4
  %v3_8ae0 = add i32 %v2_8ae0, 13
  %v4_8ae0 = inttoptr i32 %v3_8ae0 to i8*
  store i8 %v1_8ae0, i8* %v4_8ae0, align 1
  %v3_8ae4 = load i32, i32* @r6, align 4
  %v4_8ae4 = add i32 %v3_8ae4, 12
  %v5_8ae4 = inttoptr i32 %v4_8ae4 to i8*
  store i8 %v2_8ad8, i8* %v5_8ae4, align 1
  %v0_8ae8 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ae8 = add i32 %v0_8ae8, 38
  %v2_8ae8 = inttoptr i32 %v1_8ae8 to i8*
  %v3_8ae8 = load i8, i8* %v2_8ae8, align 1
  %tmp58 = urem i8 %v3_8ae8, 16
  %v1_8aec = zext i8 %tmp58 to i32
  %v1_8af0 = or i32 %v1_8aec, 64
  store i32 %v1_8af0, i32* %r3.global-to-local, align 4
  %v1_8af4 = trunc i32 %v1_8af0 to i8
  store i8 %v1_8af4, i8* %v2_8ae8, align 1
  %v0_8af8 = load i32, i32* %r4.global-to-local, align 4
  %v1_8af8 = add i32 %v0_8af8, 38
  %v2_8af8 = inttoptr i32 %v1_8af8 to i8*
  %v3_8af8 = load i8, i8* %v2_8af8, align 1
  %v1_8afc = and i8 %v3_8af8, -16
  %v1_8b00 = or i8 %v1_8afc, 5
  store i8 %v1_8b00, i8* %v2_8af8, align 1
  store i32 %v6_88b8, i32* %r2.global-to-local, align 4
  %v2_8b0c = load i32, i32* @r5, align 4
  %v3_8b0c = add i32 %v2_8b0c, 1
  %v4_8b0c = inttoptr i32 %v3_8b0c to i8*
  store i8 %v5_88d8, i8* %v4_8b0c, align 1
  store i32 %v3_8a78, i32* %r0.global-to-local, align 4
  %v1_8b14 = call i32 @function_114e0(i32 %v3_8a78)
  %v2_8b14 = trunc i32 %v1_8b14 to i16
  %v3_8b18 = load i32, i32* @r5, align 4
  %v4_8b18 = add i32 %v3_8b18, 2
  %v5_8b18 = inttoptr i32 %v4_8b18 to i16*
  store i16 %v2_8b14, i16* %v5_8b18, align 2
  store i32 %v3_8a7c, i32* %r0.global-to-local, align 4
  %v1_8b20 = call i32 @function_114e0(i32 %v3_8a7c)
  %v2_8b20 = trunc i32 %v1_8b20 to i16
  store i32 %v1_8b20, i32* %r0.global-to-local, align 4
  store i32 %v5_8914, i32* %r3.global-to-local, align 4
  %v0_8b28 = load i32, i32* @fp, align 4
  %v2_8b28 = icmp eq i32 %v0_8b28, 0
  store i1 %v2_8b28, i1* %cpsr_z.global-to-local, align 1
  %v3_8b2c = load i32, i32* @r5, align 4
  %v4_8b2c = add i32 %v3_8b2c, 4
  %v5_8b2c = inttoptr i32 %v4_8b2c to i16*
  store i16 %v2_8b20, i16* %v5_8b2c, align 2
  %v0_8b30 = load i32, i32* %r3.global-to-local, align 4
  %v1_8b30 = trunc i32 %v0_8b30 to i8
  %v2_8b30 = load i32, i32* @r5, align 4
  %v3_8b30 = add i32 %v2_8b30, 8
  %v4_8b30 = inttoptr i32 %v3_8b30 to i8*
  store i8 %v1_8b30, i8* %v4_8b30, align 1
  %v0_8b34 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8b34, label %dec_label_pc_8b38, label %dec_label_pc_8ee8

dec_label_pc_8b38:                                ; preds = %dec_label_pc_8a9c, %dec_label_pc_8ee8
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_8b3c = load i32, i32* @r5, align 4
  %v3_8b3c = add i32 %v2_8b3c, 9
  %v4_8b3c = inttoptr i32 %v3_8b3c to i8*
  store i8 17, i8* %v4_8b3c, align 1
  %v0_8b40 = call i32 @function_d1c4()
  store i32 %v0_8b40, i32* %r0.global-to-local, align 4
  store i32 %v1_8a38, i32* %r1.global-to-local, align 4
  store i1 %v2_8b4c, i1* %cpsr_z.global-to-local, align 1
  %v1_8b50 = sub i32 1023, %v0_8b40
  store i32 %v1_8b50, i32* %r3.global-to-local, align 4
  br i1 %v2_8b4c, label %.thread, label %.thread3

.thread:                                          ; preds = %dec_label_pc_8b38
  %v2_8b58 = load i32, i32* @r5, align 4
  %v3_8b58 = add i32 %v2_8b58, 16
  %v4_8b58 = inttoptr i32 %v3_8b58 to i32*
  store i32 %v1_8b50, i32* %v4_8b58, align 4
  br label %bb

.thread3:                                         ; preds = %dec_label_pc_8b38
  %v1_8b54 = load i32, i32* %r4.global-to-local, align 4
  %v2_8b54 = add i32 %v1_8b54, 16
  %v3_8b54 = inttoptr i32 %v2_8b54 to i32*
  %v4_8b54 = load i32, i32* %v3_8b54, align 4
  store i32 %v4_8b54, i32* %r3.global-to-local, align 4
  %v2_8b5c = load i32, i32* @r5, align 4
  %v3_8b5c = add i32 %v2_8b5c, 16
  %v4_8b5c = inttoptr i32 %v3_8b5c to i32*
  store i32 %v4_8b54, i32* %v4_8b5c, align 4
  br label %bb

bb:                                               ; preds = %.thread, %.thread3
  %v1_8b60 = load i32, i32* @r5, align 4
  %v2_8b60 = add i32 %v1_8b60, 12
  %v3_8b60 = inttoptr i32 %v2_8b60 to i32*
  store i32 %v0_8b40, i32* %v3_8b60, align 4
  store i32 %v3_8a30, i32* %r0.global-to-local, align 4
  %v1_8b68 = call i32 @function_114e0(i32 %v3_8a30)
  %v2_8b68 = trunc i32 %v1_8b68 to i16
  %v3_8b6c = load i32, i32* @r7, align 4
  %v4_8b6c = inttoptr i32 %v3_8b6c to i16*
  store i16 %v2_8b68, i16* %v4_8b6c, align 2
  store i32 %v3_8a34, i32* %r0.global-to-local, align 4
  %v1_8b74 = call i32 @function_114e0(i32 %v3_8a34)
  %v2_8b74 = trunc i32 %v1_8b74 to i16
  %v3_8b78 = load i32, i32* @r7, align 4
  %v4_8b78 = add i32 %v3_8b78, 2
  %v5_8b78 = inttoptr i32 %v4_8b78 to i16*
  store i16 %v2_8b74, i16* %v5_8b78, align 2
  store i32 %v3_8a80, i32* %r0.global-to-local, align 4
  %v1_8b80 = call i32 @function_114e0(i32 %v3_8a80)
  %v2_8b80 = trunc i32 %v1_8b80 to i16
  store i32 %v1_8b80, i32* %r0.global-to-local, align 4
  %v3_8b84 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8b84, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_8b8c = add i32 %v3_8b84, 1
  store i32 %v1_8b8c, i32* @r4, align 4
  %v9_8b90 = icmp eq i32 %v1_8b8c, %arg2
  store i1 %v9_8b90, i1* %cpsr_z.global-to-local, align 1
  %v3_8b94 = load i32, i32* @r7, align 4
  %v4_8b94 = add i32 %v3_8b94, 4
  %v5_8b94 = inttoptr i32 %v4_8b94 to i16*
  store i16 %v2_8b80, i16* %v5_8b94, align 2
  %v0_8b98 = load i32, i32* @r4, align 4
  store i32 %v0_8b98, i32* %stack_var_-44, align 4
  %v6_8b9c = icmp slt i32 %v1_8b8c, %arg2
  br i1 %v6_8b9c, label %dec_label_pc_8ba0, label %dec_label_pc_8c44.preheader

dec_label_pc_8c44.preheader:                      ; preds = %bb, %dec_label_pc_8a18
  %v1_8c60 = add i32 %v6_8968, 8
  %v1_8c68 = add i32 %v6_8968, 66
  %v2_8c78 = icmp eq i32 %v6_89bc, -1
  %v7_8c78 = icmp eq i32 %v6_89bc, -1
  %v2_8e94 = icmp eq i32 %v1_8a38, 0
  %v2_8cd0 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8ce8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8cf8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_8d0c = ptrtoint i32* %stack_var_-54 to i32
  %v2_8d18 = icmp eq i32 %v1_8988, 0
  br label %dec_label_pc_8c44

dec_label_pc_8ba0:                                ; preds = %bb, %dec_label_pc_8a58
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8bac = call i32 @function_fea0(i32 1510, i32 4)
  store i32 %v2_8bac, i32* %r0.global-to-local, align 4
  store i32 %v2_88a0, i32* %r2.global-to-local, align 4
  %v3_8bb4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8bb4, i32* %r3.global-to-local, align 4
  %v2_8bb8 = load i32, i32* @r4, align 4
  %v5_8bb8 = mul i32 %v2_8bb8, 4
  %v6_8bb8 = add i32 %v5_8bb8, %v2_88a0
  %v7_8bb8 = inttoptr i32 %v6_8bb8 to i32*
  store i32 %v2_8bac, i32* %v7_8bb8, align 4
  %v0_8bbc = load i32, i32* %r2.global-to-local, align 4
  %v1_8bbc = load i32, i32* %r3.global-to-local, align 4
  %v4_8bbc = mul i32 %v1_8bbc, 4
  %v5_8bbc = add i32 %v4_8bbc, %v0_8bbc
  %v6_8bbc = inttoptr i32 %v5_8bbc to i32*
  %v7_8bbc = load i32, i32* %v6_8bbc, align 4
  store i32 %v7_8bbc, i32* %r4.global-to-local, align 4
  %v1_8bc0 = inttoptr i32 %v7_8bbc to i8*
  %v2_8bc0 = load i8, i8* %v1_8bc0, align 1
  %tmp59 = urem i8 %v2_8bc0, 16
  %v1_8bc4 = zext i8 %tmp59 to i32
  %v1_8bc8 = or i32 %v1_8bc4, 64
  store i32 %v1_8bc8, i32* %r2.global-to-local, align 4
  %v1_8bcc = trunc i32 %v1_8bc8 to i8
  store i8 %v1_8bcc, i8* %v1_8bc0, align 1
  %v0_8bd0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bd0 = inttoptr i32 %v0_8bd0 to i8*
  %v2_8bd0 = load i8, i8* %v1_8bd0, align 1
  %v1_8bd4 = and i8 %v2_8bd0, -16
  %v1_8bd8 = or i8 %v1_8bd4, 5
  store i8 %v1_8bd8, i8* %v1_8bd0, align 1
  store i32 %v6_88b8, i32* %r3.global-to-local, align 4
  %v2_8be4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8be4 = add i32 %v2_8be4, 1
  %v4_8be4 = inttoptr i32 %v3_8be4 to i8*
  store i8 %v5_88d8, i8* %v4_8be4, align 1
  store i32 %v3_8a74, i32* %r0.global-to-local, align 4
  %v1_8bec = call i32 @function_114e0(i32 %v3_8a74)
  %v2_8bec = trunc i32 %v1_8bec to i16
  %v3_8bf0 = load i32, i32* %r4.global-to-local, align 4
  %v4_8bf0 = add i32 %v3_8bf0, 2
  %v5_8bf0 = inttoptr i32 %v4_8bf0 to i16*
  store i16 %v2_8bec, i16* %v5_8bf0, align 2
  %v0_8bf4 = load i32, i32* @sb, align 4
  store i32 %v0_8bf4, i32* %r0.global-to-local, align 4
  %v1_8bf8 = call i32 @function_114e0(i32 %v0_8bf4)
  %v2_8bf8 = trunc i32 %v1_8bf8 to i16
  %v3_8bfc = load i32, i32* %r4.global-to-local, align 4
  %v4_8bfc = add i32 %v3_8bfc, 4
  %v5_8bfc = inttoptr i32 %v4_8bfc to i16*
  store i16 %v2_8bf8, i16* %v5_8bfc, align 2
  store i32 %v5_8914, i32* %r0.global-to-local, align 4
  %v0_8c04 = load i32, i32* @fp, align 4
  %v2_8c04 = icmp eq i32 %v0_8c04, 0
  store i1 %v2_8c04, i1* %cpsr_z.global-to-local, align 1
  %v2_8c08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c08 = add i32 %v2_8c08, 8
  %v4_8c08 = inttoptr i32 %v3_8c08 to i8*
  store i8 %v1_8c08, i8* %v4_8c08, align 1
  %v0_8c0c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c0c = add i32 %v0_8c0c, 38
  store i32 %v1_8c0c, i32* @r5, align 4
  %v1_8c10 = add i32 %v0_8c0c, 58
  store i32 %v1_8c10, i32* @r7, align 4
  %v1_8c14 = add i32 %v0_8c0c, 24
  store i32 %v1_8c14, i32* @r6, align 4
  %v1_8c18 = add i32 %v0_8c0c, 20
  store i32 %v1_8c18, i32* @r8, align 4
  %v0_8c1c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c1c, label %dec_label_pc_8a9c, label %dec_label_pc_8c20

dec_label_pc_8c20:                                ; preds = %dec_label_pc_8ba0
  store i32 16384, i32* %r0.global-to-local, align 4
  %v1_8c24 = call i32 @function_114e0(i32 16384)
  %v2_8c24 = trunc i32 %v1_8c24 to i16
  store i32 %v1_8c24, i32* %r0.global-to-local, align 4
  %v3_8c28 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c28 = add i32 %v3_8c28, 6
  %v5_8c28 = inttoptr i32 %v4_8c28 to i16*
  store i16 %v2_8c24, i16* %v5_8c28, align 2
  %v2_8aa0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8a9c

dec_label_pc_8c30:                                ; preds = %dec_label_pc_8d20, %dec_label_pc_8c44
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_8c34 = call i32 @function_126dc(i32* null)
  store i32 %v2_8c34, i32* %r0.global-to-local, align 4
  store i32 %v2_89cc, i32* %r3.global-to-local, align 4
  %v9_8c3c = icmp eq i32 %v2_89cc, %v2_8c34
  store i1 %v9_8c3c, i1* %cpsr_z.global-to-local, align 1
  %v5_8c40 = icmp slt i32 %v2_89cc, %v2_8c34
  br i1 %v5_8c40, label %dec_label_pc_8edc, label %dec_label_pc_8c44

dec_label_pc_8c44:                                ; preds = %dec_label_pc_8c44.preheader, %dec_label_pc_8c30
  store i1 %v2_8a3c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8a3c, label %dec_label_pc_8c30, label %dec_label_pc_8c58

dec_label_pc_8c58:                                ; preds = %dec_label_pc_8c44
  store i32 %v6_8968, i32* %r2.global-to-local, align 4
  store i32 %v1_8c60, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_8c68, i32* @fp, align 4
  br label %dec_label_pc_8dd0

dec_label_pc_8c74:                                ; preds = %dec_label_pc_8dd0
  store i32 %v6_89bc, i32* %r2.global-to-local, align 4
  store i1 %v7_8c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8c78, label %dec_label_pc_8e38, label %dec_label_pc_8c80

dec_label_pc_8c80:                                ; preds = %dec_label_pc_8dfc, %dec_label_pc_8c74
  store i32 65535, i32* @r4, align 4
  %v0_8c88 = load i32, i32* @sb, align 4
  %v9_8c88 = icmp eq i32 %v0_8c88, 65535
  store i1 %v9_8c88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8c88, label %dec_label_pc_8e50, label %dec_label_pc_8c90

dec_label_pc_8c90:                                ; preds = %dec_label_pc_8e38.dec_label_pc_8c90_crit_edge, %dec_label_pc_8c80
  %v1_8c94 = phi i32 [ %v1_8c94.pre, %dec_label_pc_8e38.dec_label_pc_8c90_crit_edge ], [ 65535, %dec_label_pc_8c80 ]
  store i32 %v3_8a30, i32* %r3.global-to-local, align 4
  %v9_8c94 = icmp eq i32 %v3_8a30, %v1_8c94
  store i1 %v9_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8c94, label %dec_label_pc_8e78, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8e50, %dec_label_pc_8c90
  %v1_8ca0 = phi i32 [ %v1_8e70, %dec_label_pc_8e50 ], [ %v1_8c94, %dec_label_pc_8c90 ]
  store i32 %v3_8a34, i32* %r0.global-to-local, align 4
  %v9_8ca0 = icmp eq i32 %v3_8a34, %v1_8ca0
  store i1 %v9_8ca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8ca0, label %dec_label_pc_8e8c, label %dec_label_pc_8ca8

dec_label_pc_8ca8:                                ; preds = %dec_label_pc_8e78, %dec_label_pc_8c9c
  store i32 %v1_8a38, i32* %r1.global-to-local, align 4
  store i1 %v2_8e94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e94, label %dec_label_pc_8ea8, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_8ca8
  %v1_8cb0 = load i32, i32* @r5, align 4
  %v2_8cb0 = add i32 %v1_8cb0, 16
  %v3_8cb0 = inttoptr i32 %v2_8cb0 to i32*
  %v4_8cb0 = load i32, i32* %v3_8cb0, align 4
  store i32 %v4_8cb0, i32* %r3.global-to-local, align 4
  %v2_8cb4 = load i32, i32* @r6, align 4
  %v3_8cb4 = add i32 %v2_8cb4, 16
  %v4_8cb4 = inttoptr i32 %v3_8cb4 to i32*
  store i32 %v4_8cb0, i32* %v4_8cb4, align 4
  br label %dec_label_pc_8cbc

dec_label_pc_8cbc:                                ; preds = %bb57, %.thread4, %dec_label_pc_8ea8
  %v0_8cbc = call i32 @function_d1c4()
  store i32 %v0_8cbc, i32* %r0.global-to-local, align 4
  store i32 %v0_8cbc, i32* %stack_var_-48, align 4
  %v0_8cc4 = call i32 @function_d1c4()
  store i32 %v0_8cc4, i32* %r0.global-to-local, align 4
  store i32 %v0_8cc4, i32* %stack_var_-52, align 4
  %v0_8ccc = call i32 @function_d1c4()
  store i32 %v2_8cd0, i32* %r1.global-to-local, align 4
  store i32 %v0_8ccc, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8cdc = load i32, i32* @r7, align 4
  store i32 %v0_8cdc, i32* %r0.global-to-local, align 4
  %v3_8ce0 = call i32 @function_f280(i32 %v0_8cdc, i32 %v2_8cd0, i32 4)
  %v0_8ce4 = load i32, i32* @r7, align 4
  %v1_8ce4 = add i32 %v0_8ce4, 6
  store i32 %v1_8ce4, i32* %r0.global-to-local, align 4
  store i32 %v2_8ce8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8cf0 = call i32 @function_f280(i32 %v1_8ce4, i32 %v2_8ce8, i32 4)
  %v0_8cf4 = load i32, i32* @r7, align 4
  %v1_8cf4 = add i32 %v0_8cf4, 4
  store i32 %v1_8cf4, i32* %r0.global-to-local, align 4
  store i32 %v2_8cf8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8d00 = call i32 @function_f280(i32 %v1_8cf4, i32 %v2_8cf8, i32 2)
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8d08 = load i32, i32* @r7, align 4
  %v1_8d08 = add i32 %v0_8d08, 10
  store i32 %v1_8d08, i32* %r0.global-to-local, align 4
  store i32 %v2_8d0c, i32* %r1.global-to-local, align 4
  %v3_8d10 = call i32 @function_f280(i32 %v1_8d08, i32 %v2_8d0c, i32 2)
  store i32 %v3_8d10, i32* %r0.global-to-local, align 4
  store i32 %v1_8988, i32* %r2.global-to-local, align 4
  store i1 %v2_8d18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8d18, label %dec_label_pc_8d20, label %dec_label_pc_8eb4

dec_label_pc_8d20:                                ; preds = %dec_label_pc_8cbc, %dec_label_pc_8eb4
  %v2_8d24 = load i32, i32* @r5, align 4
  %v3_8d24 = add i32 %v2_8d24, 10
  %v4_8d24 = inttoptr i32 %v3_8d24 to i16*
  store i16 0, i16* %v4_8d24, align 2
  %v0_8d28 = load i32, i32* @r5, align 4
  store i32 %v0_8d28, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_8d30 = call i32 @function_bd1c(i32 %v0_8d28, i32 20)
  %v3_8d30 = trunc i32 %v2_8d30 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_8d38 = load i32, i32* @r5, align 4
  %v4_8d38 = add i32 %v3_8d38, 10
  %v5_8d38 = inttoptr i32 %v4_8d38 to i16*
  store i16 %v3_8d30, i16* %v5_8d38, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8d40 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d40 = trunc i32 %v0_8d40 to i16
  %v2_8d40 = load i32, i32* @r6, align 4
  %v3_8d40 = add i32 %v2_8d40, 10
  %v4_8d40 = inttoptr i32 %v3_8d40 to i16*
  store i16 %v1_8d40, i16* %v4_8d40, align 2
  %v0_8d44 = load i32, i32* @r6, align 4
  store i32 %v0_8d44, i32* @r0, align 4
  %v2_8d48 = call i32 @function_bd1c(i32 %v0_8d44, i32 20)
  %v3_8d48 = trunc i32 %v2_8d48 to i16
  store i32 %v2_8d48, i32* %r0.global-to-local, align 4
  %v3_8d4c = load i32, i32* @r6, align 4
  %v4_8d4c = add i32 %v3_8d4c, 10
  %v5_8d4c = inttoptr i32 %v4_8d4c to i16*
  store i16 %v3_8d48, i16* %v5_8d4c, align 2
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d54 = load i32, i32* @r8, align 4
  %v3_8d54 = add i32 %v2_8d54, 6
  %v4_8d54 = inttoptr i32 %v3_8d54 to i16*
  store i16 0, i16* %v4_8d54, align 2
  %v0_8d58 = load i32, i32* @r8, align 4
  store i32 %v0_8d58, i32* @r1, align 4
  %v1_8d5c = add i32 %v0_8d58, 4
  %v2_8d5c = inttoptr i32 %v1_8d5c to i16*
  %v3_8d5c = load i16, i16* %v2_8d5c, align 2
  %v4_8d5c = zext i16 %v3_8d5c to i32
  store i32 %v4_8d5c, i32* %r2.global-to-local, align 4
  store i32 %v1_8c60, i32* %r3.global-to-local, align 4
  %v0_8d64 = load i32, i32* @r6, align 4
  store i32 %v0_8d64, i32* %r0.global-to-local, align 4
  %v4_8d68 = call i32 @function_bd6c(i32 %v0_8d64, i32 %v0_8d58, i32 %v4_8d5c, i32 %v1_8c60)
  %v5_8d68 = trunc i32 %v4_8d68 to i16
  store i32 %v4_8d68, i32* %r0.global-to-local, align 4
  %v3_8d6c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8d6c, i32* %r2.global-to-local, align 4
  %v3_8d70 = mul i32 %v3_8d6c, 32
  store i32 %v3_8d70, i32* %r3.global-to-local, align 4
  %v0_8d74 = load i32, i32* @r5, align 4
  %v1_8d74 = add i32 %v0_8d74, 16
  %v2_8d74 = inttoptr i32 %v1_8d74 to i32*
  %v3_8d74 = load i32, i32* %v2_8d74, align 4
  store i32 %v3_8d74, i32* %r1.global-to-local, align 4
  %v5_8d78 = mul i32 %v3_8d6c, 24
  store i32 %v5_8d78, i32* %r3.global-to-local, align 4
  %v1_8d7c = load i32, i32* @sl, align 4
  %v2_8d7c = add i32 %v1_8d7c, %v5_8d78
  store i32 %v2_8d7c, i32* @lr, align 4
  %v3_8d80 = load i32, i32* @r8, align 4
  %v4_8d80 = add i32 %v3_8d80, 6
  %v5_8d80 = inttoptr i32 %v4_8d80 to i16*
  store i16 %v5_8d68, i16* %v5_8d80, align 2
  %v0_8d84 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d84 = load i32, i32* @lr, align 4
  %v2_8d84 = add i32 %v1_8d84, 4
  %v3_8d84 = inttoptr i32 %v2_8d84 to i32*
  store i32 %v0_8d84, i32* %v3_8d84, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_8d90 = load i32, i32* %r3.global-to-local, align 4
  %v3_8d90 = load i32, i32* @sl, align 4
  %v4_8d90 = add i32 %v3_8d90, %v2_8d90
  %v5_8d90 = inttoptr i32 %v4_8d90 to i16*
  store i16 2, i16* %v5_8d90, align 2
  %v0_8d94 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d94 = trunc i32 %v0_8d94 to i16
  %v2_8d94 = load i32, i32* @lr, align 4
  %v3_8d94 = add i32 %v2_8d94, 2
  %v4_8d94 = inttoptr i32 %v3_8d94 to i16*
  store i16 %v1_8d94, i16* %v4_8d94, align 2
  %v0_8d98 = load i32, i32* @fp, align 4
  store i32 %v0_8d98, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8da4 = load i32, i32* @r5, align 4
  store i32 %v0_8da4, i32* @r1, align 4
  store i32 %v3_89e0, i32* @r0, align 4
  %v0_8db4 = call i32 @function_1172c()
  %v3_8db8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8db8, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_8dc0 = add i32 %v3_8db8, 1
  store i32 %v1_8dc0, i32* %r0.global-to-local, align 4
  %v9_8dc4 = icmp eq i32 %v1_8dc0, %arg2
  store i1 %v9_8dc4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8dc0, i32* %stack_var_-44, align 4
  %v6_8dcc = icmp slt i32 %v1_8dc0, %arg2
  br i1 %v6_8dcc, label %dec_label_pc_8dd0, label %dec_label_pc_8c30

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8d20, %dec_label_pc_8c58
  %v1_8de4 = phi i32 [ %v1_8dc0, %dec_label_pc_8d20 ], [ 0, %dec_label_pc_8c58 ]
  %v5_8dd4 = mul i32 %v1_8de4, 24
  %v1_8dd8 = load i32, i32* @sl, align 4
  %v2_8dd8 = add i32 %v1_8dd8, %v5_8dd4
  store i32 %v2_8dd8, i32* %r3.global-to-local, align 4
  store i32 %v2_88a0, i32* %r1.global-to-local, align 4
  %v1_8de0 = add i32 %v2_8dd8, 20
  %v2_8de0 = inttoptr i32 %v1_8de0 to i8*
  %v3_8de0 = load i8, i8* %v2_8de0, align 1
  %v4_8de0 = zext i8 %v3_8de0 to i32
  store i32 %v4_8de0, i32* %r2.global-to-local, align 4
  %v4_8de4 = mul i32 %v1_8de4, 4
  %v5_8de4 = add i32 %v4_8de4, %v2_88a0
  %v6_8de4 = inttoptr i32 %v5_8de4 to i32*
  %v7_8de4 = load i32, i32* %v6_8de4, align 4
  store i32 %v7_8de4, i32* @r5, align 4
  %v2_8de8 = icmp ugt i8 %v3_8de0, 30
  %v7_8de8 = icmp eq i8 %v3_8de0, 31
  store i1 %v7_8de8, i1* %cpsr_z.global-to-local, align 1
  %v1_8dec = add i32 %v7_8de4, 24
  store i32 %v1_8dec, i32* @r7, align 4
  %v1_8df0 = add i32 %v7_8de4, 38
  store i32 %v1_8df0, i32* @r6, align 4
  %v1_8df4 = add i32 %v7_8de4, 58
  store i32 %v1_8df4, i32* @r8, align 4
  %v2_8df8 = xor i1 %v7_8de8, true
  %v3_8df8 = and i1 %v2_8de8, %v2_8df8
  br i1 %v3_8df8, label %dec_label_pc_8c74, label %dec_label_pc_8dfc

dec_label_pc_8dfc:                                ; preds = %dec_label_pc_8dd0
  %v1_8dfc = add i32 %v2_8dd8, 16
  %v2_8dfc = inttoptr i32 %v1_8dfc to i32*
  %v3_8dfc = load i32, i32* %v2_8dfc, align 4
  store i32 %v3_8dfc, i32* %r0.global-to-local, align 4
  %v1_8e00 = call i32 @function_11664(i32 %v3_8dfc)
  store i32 %v1_8e00, i32* %r0.global-to-local, align 4
  store i32 %v1_8e00, i32* %r4.global-to-local, align 4
  %v0_8e08 = call i32 @function_d1c4()
  store i32 %v0_8e08, i32* %r0.global-to-local, align 4
  %v3_8e0c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8e0c, i32* %r2.global-to-local, align 4
  %v5_8e14 = mul i32 %v3_8e0c, 24
  %v1_8e18 = load i32, i32* @sl, align 4
  %v2_8e18 = add i32 %v1_8e18, %v5_8e14
  store i32 %v2_8e18, i32* %r3.global-to-local, align 4
  %v1_8e1c = add i32 %v2_8e18, 20
  %v2_8e1c = inttoptr i32 %v1_8e1c to i8*
  %v3_8e1c = load i8, i8* %v2_8e1c, align 1
  %v4_8e1c = zext i8 %v3_8e1c to i32
  store i32 %v4_8e1c, i32* %r2.global-to-local, align 4
  %v0_8e20 = load i32, i32* %r4.global-to-local, align 4
  %v7_8e20 = lshr i32 %v0_8e08, %v4_8e1c
  %v8_8e20 = add i32 %v7_8e20, %v0_8e20
  store i32 %v8_8e20, i32* %r0.global-to-local, align 4
  %v1_8e24 = call i32 @function_114bc(i32 %v8_8e20)
  store i32 %v1_8e24, i32* %r0.global-to-local, align 4
  store i32 %v6_89bc, i32* %r2.global-to-local, align 4
  store i1 %v7_8c78, i1* %cpsr_z.global-to-local, align 1
  %v1_8e30 = load i32, i32* @r5, align 4
  %v2_8e30 = add i32 %v1_8e30, 16
  %v3_8e30 = inttoptr i32 %v2_8e30 to i32*
  store i32 %v1_8e24, i32* %v3_8e30, align 4
  br i1 %v2_8c78, label %dec_label_pc_8e38, label %dec_label_pc_8c80

dec_label_pc_8e38:                                ; preds = %dec_label_pc_8dfc, %dec_label_pc_8c74
  %v0_8e38 = call i32 @function_d1c4()
  store i32 %v0_8e38, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_8e44 = load i32, i32* @sb, align 4
  %v9_8e44 = icmp eq i32 %v0_8e44, 65535
  store i1 %v9_8e44, i1* %cpsr_z.global-to-local, align 1
  %v1_8e48 = load i32, i32* @r5, align 4
  %v2_8e48 = add i32 %v1_8e48, 12
  %v3_8e48 = inttoptr i32 %v2_8e48 to i32*
  store i32 %v0_8e38, i32* %v3_8e48, align 4
  br i1 %v9_8e44, label %dec_label_pc_8e50, label %dec_label_pc_8e38.dec_label_pc_8c90_crit_edge

dec_label_pc_8e38.dec_label_pc_8c90_crit_edge:    ; preds = %dec_label_pc_8e38
  %v1_8c94.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8c90

dec_label_pc_8e50:                                ; preds = %dec_label_pc_8e38, %dec_label_pc_8c80
  %v0_8e50 = call i32 @function_d1c4()
  %v3_8e58 = urem i32 %v0_8e50, 65536
  store i32 %v3_8e58, i32* %r0.global-to-local, align 4
  %v1_8e60 = sub nsw i32 999, %v3_8e58
  store i32 %v1_8e60, i32* %r3.global-to-local, align 4
  %v1_8e64 = trunc i32 %v0_8e50 to i16
  %v2_8e64 = load i32, i32* @r5, align 4
  %v3_8e64 = add i32 %v2_8e64, 4
  %v4_8e64 = inttoptr i32 %v3_8e64 to i16*
  store i16 %v1_8e64, i16* %v4_8e64, align 2
  %v0_8e68 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e68 = trunc i32 %v0_8e68 to i16
  %v2_8e68 = load i32, i32* @r6, align 4
  %v3_8e68 = add i32 %v2_8e68, 4
  %v4_8e68 = inttoptr i32 %v3_8e68 to i16*
  store i16 %v1_8e68, i16* %v4_8e68, align 2
  store i32 %v3_8a30, i32* %r3.global-to-local, align 4
  %v1_8e70 = load i32, i32* @r4, align 4
  %v9_8e70 = icmp eq i32 %v3_8a30, %v1_8e70
  store i1 %v9_8e70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8e70, label %dec_label_pc_8e78, label %dec_label_pc_8c9c

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8e50, %dec_label_pc_8c90
  %v0_8e78 = call i32 @function_d1c4()
  %v1_8e78 = trunc i32 %v0_8e78 to i16
  %v3_8e7c = load i32, i32* @r5, align 4
  %v4_8e7c = add i32 %v3_8e7c, 58
  %v5_8e7c = inttoptr i32 %v4_8e7c to i16*
  store i16 %v1_8e78, i16* %v5_8e7c, align 2
  store i32 %v3_8a34, i32* %r0.global-to-local, align 4
  %v1_8e84 = load i32, i32* @r4, align 4
  %v9_8e84 = icmp eq i32 %v3_8a34, %v1_8e84
  store i1 %v9_8e84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8e84, label %dec_label_pc_8e8c, label %dec_label_pc_8ca8

dec_label_pc_8e8c:                                ; preds = %dec_label_pc_8e78, %dec_label_pc_8c9c
  %v0_8e8c = call i32 @function_d1c4()
  %v1_8e8c = trunc i32 %v0_8e8c to i16
  store i32 %v0_8e8c, i32* %r0.global-to-local, align 4
  store i32 %v1_8a38, i32* %r1.global-to-local, align 4
  store i1 %v2_8e94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e94, label %.thread15, label %bb57

.thread15:                                        ; preds = %dec_label_pc_8e8c
  %v3_8e9c16 = load i32, i32* @r8, align 4
  %v4_8e9c17 = add i32 %v3_8e9c16, 2
  %v5_8e9c18 = inttoptr i32 %v4_8e9c17 to i16*
  store i16 %v1_8e8c, i16* %v5_8e9c18, align 2
  br label %dec_label_pc_8ea8

bb57:                                             ; preds = %dec_label_pc_8e8c
  %v1_8e98 = load i32, i32* @r5, align 4
  %v2_8e98 = add i32 %v1_8e98, 16
  %v3_8e98 = inttoptr i32 %v2_8e98 to i32*
  %v4_8e98 = load i32, i32* %v3_8e98, align 4
  store i32 %v4_8e98, i32* %r3.global-to-local, align 4
  %v3_8e9c = load i32, i32* @r8, align 4
  %v4_8e9c = add i32 %v3_8e9c, 2
  %v5_8e9c = inttoptr i32 %v4_8e9c to i16*
  store i16 %v1_8e8c, i16* %v5_8e9c, align 2
  %v1_8ea0 = load i32, i32* %r3.global-to-local, align 4
  %v2_8ea0 = load i32, i32* @r6, align 4
  %v3_8ea0 = add i32 %v2_8ea0, 16
  %v4_8ea0 = inttoptr i32 %v3_8ea0 to i32*
  store i32 %v1_8ea0, i32* %v4_8ea0, align 4
  br label %dec_label_pc_8cbc

dec_label_pc_8ea8:                                ; preds = %.thread15, %dec_label_pc_8ca8
  %v0_8ea8 = call i32 @function_d1c4()
  store i32 %v0_8ea8, i32* %r0.global-to-local, align 4
  %v1_8eac = load i32, i32* @r6, align 4
  %v2_8eac = add i32 %v1_8eac, 16
  %v3_8eac = inttoptr i32 %v2_8eac to i32*
  store i32 %v0_8ea8, i32* %v3_8eac, align 4
  br label %dec_label_pc_8cbc

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_8cbc
  %v0_8eb4 = load i32, i32* @r8, align 4
  %v1_8eb4 = add i32 %v0_8eb4, 8
  store i32 %v1_8eb4, i32* @r4, align 4
  store i32 %v1_8eb4, i32* %r0.global-to-local, align 4
  store i32 %v6_8968, i32* %r1.global-to-local, align 4
  %v2_8ec0 = call i32 @function_d288(i32 %v1_8eb4, i32 %v6_8968)
  store i32 %v6_8968, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8ecc = load i32, i32* @r4, align 4
  %v4_8ecc = add i32 %v2_8ecc, %v6_8968
  %v5_8ecc = inttoptr i32 %v4_8ecc to i8*
  store i8 0, i8* %v5_8ecc, align 1
  br label %dec_label_pc_8d20

dec_label_pc_8ed4:                                ; preds = %dec_label_pc_89f0
  store i32 %v3_89e0, i32* %r0.global-to-local, align 4
  %v1_8ed8 = call i32 @function_12714(i32 %v3_89e0)
  store i32 %v1_8ed8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8edc

dec_label_pc_8edc:                                ; preds = %dec_label_pc_8c30, %dec_label_pc_8874, %dec_label_pc_8ed4
  %v1_8ee4 = phi i32 [ %v3_89e0, %dec_label_pc_8874 ], [ %v1_8ed8, %dec_label_pc_8ed4 ], [ %v2_8c34, %dec_label_pc_8c30 ]
  store i32 %v3_8874, i32* %r4.global-to-local, align 4
  ret i32 %v1_8ee4

dec_label_pc_8ee8:                                ; preds = %dec_label_pc_8a9c
  store i32 16384, i32* %r0.global-to-local, align 4
  %v1_8eec = call i32 @function_114e0(i32 16384)
  %v2_8eec = trunc i32 %v1_8eec to i16
  store i32 %v1_8eec, i32* %r0.global-to-local, align 4
  %v3_8ef0 = load i32, i32* @r5, align 4
  %v4_8ef0 = add i32 %v3_8ef0, 6
  %v5_8ef0 = inttoptr i32 %v4_8ef0 to i16*
  store i16 %v2_8eec, i16* %v5_8ef0, align 2
  br label %dec_label_pc_8b38

; uselistorder directives
  uselistorder i32 %v1_8eec, { 1, 0 }
  uselistorder i16 %v1_8e8c, { 1, 0 }
  uselistorder i32 %v0_8e8c, { 1, 0 }
  uselistorder i32 %v1_8e70, { 1, 0 }
  uselistorder i32 %v3_8e58, { 1, 0 }
  uselistorder i32 %v0_8e50, { 1, 0 }
  uselistorder i32 %v7_8de4, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8dc0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_8d6c, { 1, 0, 2 }
  uselistorder i32 %v4_8d68, { 1, 0 }
  uselistorder i32 %v2_8d48, { 1, 0 }
  uselistorder i32 %v1_8c24, { 1, 0 }
  uselistorder i32 %v0_8c0c, { 1, 2, 3, 4, 0 }
  uselistorder i1 %v2_8e94, { 2, 3, 1, 0 }
  uselistorder i1 %v7_8c78, { 2, 1, 0 }
  uselistorder i32 %v1_8c60, { 1, 0, 2 }
  uselistorder i32 %v1_8b80, { 1, 0 }
  uselistorder i32 %v0_8b40, { 1, 0, 2 }
  uselistorder i32 %v1_8b20, { 1, 0 }
  uselistorder i32 %v4_8adc, { 1, 0 }
  uselistorder i32 %v1_8ad8, { 0, 2, 1 }
  uselistorder i32 %v3_8a80, { 2, 1, 0 }
  uselistorder i32 %v3_8a78, { 2, 1, 0 }
  uselistorder i32 %v3_8a74, { 2, 1, 0 }
  uselistorder i32 %v3_8a60, { 2, 1, 0 }
  uselistorder i32 %v3_8a40, { 1, 0 }
  uselistorder i1 %v2_8a3c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8a38, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v7_8a10, { 1, 0 }
  uselistorder i1 %v7_89e4, { 1, 0 }
  uselistorder i32 %v3_89e0, { 1, 3, 4, 5, 2, 0, 6 }
  uselistorder i32 %v2_89cc, { 2, 1, 0 }
  uselistorder i32 %v6_89bc, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_8968, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v5_8914, { 1, 0, 3, 2 }
  uselistorder i32 %v7_88dc, { 1, 0, 2 }
  uselistorder i8 %v5_88d8, { 1, 0 }
  uselistorder i32 %v6_88b8, { 1, 2, 0, 3 }
  uselistorder i32 %v2_88a0, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 18, 31, 32, 33, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 45, 46, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 15, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 16, 22, 23, 24, 17, 18, 19, 20, 21, 25, 36, 37, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 16, 17, 19, 20, 32, 33, 21, 22, 23, 25, 24, 26, 27, 29, 28, 31, 30, 0 }
  uselistorder i32* %r0.global-to-local, { 8, 7, 1, 9, 10, 11, 13, 15, 12, 14, 16, 6, 17, 18, 5, 19, 20, 4, 21, 22, 24, 23, 25, 26, 27, 28, 31, 29, 30, 33, 32, 35, 34, 48, 49, 50, 53, 51, 37, 36, 38, 39, 3, 41, 40, 42, 44, 43, 45, 46, 47, 52, 65, 2, 66, 67, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 12, 5, 6, 7, 8, 9, 10, 11, 14, 13, 19, 20, 15, 16, 17, 18, 21, 22, 23 }
  uselistorder i32 %arg2, { 6, 5, 4, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_8edc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d20, { 1, 0 }
  uselistorder label %dec_label_pc_8cbc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8c44, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_8b38, { 1, 0 }
  uselistorder label %dec_label_pc_8a9c, { 1, 0 }
}

define i32 @function_8efc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8efc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_8efc = load i32, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_8f28 = call i32 @function_fea0(i32 %arg2, i32 4)
  %v0_8f2c = load i32, i32* @r4, align 4
  store i32 %v0_8f2c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8f38 = load i32, i32* @r7, align 4
  store i32 %v0_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v5_8f40 = inttoptr i32 %v0_8f2c to i32*
  %v6_8f40 = call i32 @function_8294(i32 %v0_8f3c, i32* %v5_8f40, i32 2, i32 %v0_8f38, i32 %v2_8f28)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* %r1.global-to-local, align 4
  %v0_8f5c = load i32, i32* @r5, align 4
  %v5_8f60 = trunc i32 %v6_8f40 to i8
  %v6_8f64 = inttoptr i32 %v0_8f58 to i32*
  %v7_8f64 = call i32 @function_8294(i32 %v0_8f5c, i32* %v6_8f64, i32 3, i32 65535, i32 %v6_8f40)
  %v0_8f68 = load i32, i32* @r4, align 4
  store i32 %v0_8f68, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f78 = load i32, i32* @r5, align 4
  %v5_8f7c = inttoptr i32 %v0_8f68 to i32*
  %v6_8f7c = call i32 @function_8294(i32 %v0_8f78, i32* %v5_8f7c, i32 4, i32 64, i32 %v7_8f64)
  %v0_8f80 = load i32, i32* @r4, align 4
  store i32 %v0_8f80, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8f90 = load i32, i32* @r5, align 4
  %v1_8f94 = urem i32 %v6_8f7c, 256
  store i32 %v1_8f94, i32* @sb, align 4
  %v5_8f98 = inttoptr i32 %v0_8f80 to i32*
  %v6_8f98 = call i32 @function_8294(i32 %v0_8f90, i32* %v5_8f98, i32 5, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8fac = load i32, i32* @r4, align 4
  store i32 %v0_8fac, i32* %r1.global-to-local, align 4
  %v0_8fb0 = load i32, i32* @r5, align 4
  %v1_8fb4 = urem i32 %v6_8f98, 256
  store i32 %v1_8fb4, i32* @sl, align 4
  %v5_8fb8 = inttoptr i32 %v0_8fac to i32*
  %v6_8fb8 = call i32 @function_8294(i32 %v0_8fb0, i32* %v5_8fb8, i32 6, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8fc4 = load i32, i32* @r4, align 4
  store i32 %v0_8fc4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_8fd0 = load i32, i32* @r5, align 4
  %v5_8fd4 = inttoptr i32 %v0_8fc4 to i32*
  %v6_8fd4 = call i32 @function_8294(i32 %v0_8fd0, i32* %v5_8fd4, i32 7, i32 65535, i32 %v6_8fb8)
  %v0_8fd8 = load i32, i32* @r4, align 4
  store i32 %v0_8fd8, i32* %r1.global-to-local, align 4
  %v0_8fdc = load i32, i32* @r7, align 4
  store i32 %v0_8fdc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8fd4, i32* @fp, align 4
  %v0_8fe8 = load i32, i32* @r5, align 4
  %v5_8fec = inttoptr i32 %v0_8fd8 to i32*
  %v6_8fec = call i32 @function_8294(i32 %v0_8fe8, i32* %v5_8fec, i32 %v0_8fdc, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ffc = load i32, i32* @r4, align 4
  store i32 %v0_8ffc, i32* %r1.global-to-local, align 4
  %v0_9000 = load i32, i32* @r5, align 4
  %v5_9004 = inttoptr i32 %v0_8ffc to i32*
  %v6_9004 = call i32 @function_8294(i32 %v0_9000, i32* %v5_9004, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_900c = urem i32 %v6_9004, 256
  %v0_9010 = load i32, i32* @r4, align 4
  store i32 %v0_9010, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_9018 = load i32, i32* @r7, align 4
  store i32 %v0_9018, i32* %r3.global-to-local, align 4
  %v0_901c = load i32, i32* @r5, align 4
  %v5_9024 = inttoptr i32 %v0_9010 to i32*
  %v6_9024 = call i32 @function_8294(i32 %v0_901c, i32* %v5_9024, i32 18, i32 %v0_9018, i32 %v1_900c)
  %v0_902c = load i32, i32* @r4, align 4
  store i32 %v0_902c, i32* %r1.global-to-local, align 4
  %v2_9030 = load i32, i32* @global_var_1f644.44, align 4
  store i32 %v2_9030, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_903c = load i32, i32* @r5, align 4
  %v5_9040 = inttoptr i32 %v0_902c to i32*
  %v6_9040 = call i32 @function_8294(i32 %v0_903c, i32* %v5_9040, i32 19, i32 %v2_9030, i32 %v6_9024)
  %v0_9048 = load i32, i32* @r7, align 4
  %v1_904c = inttoptr i32 %v0_9048 to i32*
  %v2_904c = call i32 @function_126dc(i32* %v1_904c)
  %v1_9050 = load i32, i32* @r6, align 4
  %v2_9050 = add i32 %v1_9050, %v2_904c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9064 = call i32 @function_117e8(i32 2, i32 3, i32 6)
  store i32 %v3_9064, i32* @r0, align 4
  %v7_9068 = icmp eq i32 %v3_9064, -1
  store i1 %v7_9068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9068, label %dec_label_pc_94e8, label %dec_label_pc_9074

dec_label_pc_9074:                                ; preds = %dec_label_pc_8efc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_907c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_907c, i32* %r3.global-to-local, align 4
  store i32 4, i32* @ip, align 4
  %v0_9084 = load i32, i32* @r7, align 4
  store i32 %v0_9084, i32* %r1.global-to-local, align 4
  store i32 3, i32* @r2, align 4
  %v5_9090 = call i32 @function_11778(i32 %v3_9064, i32 %v0_9084, i32 3, i32 %v6_907c, i32 4)
  %v7_9094 = icmp eq i32 %v5_9090, -1
  store i1 %v7_9094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9094, label %dec_label_pc_94e0, label %dec_label_pc_909c

dec_label_pc_909c:                                ; preds = %dec_label_pc_9074
  %v0_90a8 = load i32, i32* @fp, align 4
  %v3_90ac = urem i32 %v0_90a8, 65536
  %v3_90b0 = mul i32 %v7_8f64, 65536
  store i32 %v3_90b0, i32* %r3.global-to-local, align 4
  %v3_90c0 = urem i32 %v6_8fb8, 65536
  store i32 %v3_90c0, i32* %r2.global-to-local, align 4
  %v1_90c4 = urem i32 %v6_9024, 256
  store i32 %v1_90c4, i32* %r1.global-to-local, align 4
  %v2_90c8 = icmp eq i32 %arg2, 0
  store i1 %v2_90c8, i1* %cpsr_z.global-to-local, align 1
  %v3_90cc = urem i32 %v7_8f64, 65536
  store i32 %v3_90cc, i32* @fp, align 4
  %v0_90d8 = load i32, i32* @r7, align 4
  store i32 %v0_90d8, i32* %stack_var_-44, align 4
  br i1 %v2_90c8, label %dec_label_pc_92ac.preheader, label %dec_label_pc_90e0

dec_label_pc_90e0:                                ; preds = %dec_label_pc_909c
  %v3_90e4 = mul i32 %v6_8fec, 65536
  %v1_90ec = add i32 %v3_90e4, 524288
  %v1_90f0 = add i32 %v3_90e4, 3407872
  %v1_90f8 = add i32 %v3_90e4, 1835008
  %v3_90fc = udiv i32 %v1_90f0, 65536
  store i32 %v3_90fc, i32* %r1.global-to-local, align 4
  %v3_9100 = udiv i32 %v1_90f8, 65536
  store i32 %v3_9100, i32* %r3.global-to-local, align 4
  %v3_9104 = xor i32 %v3_90cc, 65535
  store i32 %v3_9104, i32* %r2.global-to-local, align 4
  %v3_9108 = udiv i32 %v1_90ec, 65536
  store i32 %v0_90d8, i32* @r4, align 4
  %v2_91b8 = icmp eq i32 %v1_90c4, 0
  br label %dec_label_pc_920c

dec_label_pc_9124:                                ; preds = %dec_label_pc_920c, %dec_label_pc_9288
  %v2_9128 = phi i32 [ %v0_9278, %dec_label_pc_920c ], [ %v2_9128.pre, %dec_label_pc_9288 ]
  %v3_9128 = add i32 %v2_9128, 9
  %v4_9128 = inttoptr i32 %v3_9128 to i8*
  store i8 47, i8* %v4_9128, align 1
  %v3_912c = load i32, i32* %stack_var_-44, align 4
  %v5_9134 = mul i32 %v3_912c, 24
  store i32 %v5_9134, i32* %r3.global-to-local, align 4
  store i32 %v6_9040, i32* %r2.global-to-local, align 4
  %v1_913c = load i32, i32* %r4.global-to-local, align 4
  %v2_913c = add i32 %v1_913c, 12
  %v3_913c = inttoptr i32 %v2_913c to i32*
  store i32 %v6_9040, i32* %v3_913c, align 4
  %v0_9140 = load i32, i32* %r3.global-to-local, align 4
  %v1_9140 = load i32, i32* @r8, align 4
  %v2_9140 = add i32 %v1_9140, %v0_9140
  store i32 %v2_9140, i32* %r3.global-to-local, align 4
  %v1_9144 = add i32 %v2_9140, 16
  %v2_9144 = inttoptr i32 %v1_9144 to i32*
  %v3_9144 = load i32, i32* %v2_9144, align 4
  store i32 %v3_9144, i32* %r2.global-to-local, align 4
  %v1_914c = load i32, i32* %r4.global-to-local, align 4
  %v2_914c = add i32 %v1_914c, 16
  %v3_914c = inttoptr i32 %v2_914c to i32*
  store i32 %v3_9144, i32* %v3_914c, align 4
  %v1_9150 = call i32 @function_114e0(i32 2048)
  %v2_9150 = trunc i32 %v1_9150 to i16
  %v3_9154 = load i32, i32* @r7, align 4
  %v4_9154 = add i32 %v3_9154, 2
  %v5_9154 = inttoptr i32 %v4_9154 to i16*
  store i16 %v2_9150, i16* %v5_9154, align 2
  %v0_9158 = load i32, i32* %r4.global-to-local, align 4
  %v1_9158 = add i32 %v0_9158, 24
  %v2_9158 = inttoptr i32 %v1_9158 to i8*
  %v3_9158 = load i8, i8* %v2_9158, align 1
  %tmp = urem i8 %v3_9158, 16
  %v1_915c = zext i8 %tmp to i32
  %v1_9160 = or i32 %v1_915c, 64
  store i32 %v1_9160, i32* %r3.global-to-local, align 4
  %v1_9164 = trunc i32 %v1_9160 to i8
  store i8 %v1_9164, i8* %v2_9158, align 1
  %v0_9168 = load i32, i32* %r4.global-to-local, align 4
  %v1_9168 = add i32 %v0_9168, 24
  %v2_9168 = inttoptr i32 %v1_9168 to i8*
  %v3_9168 = load i8, i8* %v2_9168, align 1
  %v4_9168 = zext i8 %v3_9168 to i32
  %v1_916c = and i32 %v4_9168, 240
  %v1_9170 = or i32 %v1_916c, 5
  store i32 %v1_9170, i32* %r2.global-to-local, align 4
  %v1_9174 = trunc i32 %v1_9170 to i8
  store i8 %v1_9174, i8* %v2_9168, align 1
  store i32 %v6_8f40, i32* %r3.global-to-local, align 4
  %v2_917c = load i32, i32* @r5, align 4
  %v3_917c = add i32 %v2_917c, 1
  %v4_917c = inttoptr i32 %v3_917c to i8*
  store i8 %v5_8f60, i8* %v4_917c, align 1
  %v1_9184 = call i32 @function_114e0(i32 %v3_9100)
  %v2_9184 = trunc i32 %v1_9184 to i16
  %v3_9188 = load i32, i32* @r5, align 4
  %v4_9188 = add i32 %v3_9188, 2
  %v5_9188 = inttoptr i32 %v4_9188 to i16*
  store i16 %v2_9184, i16* %v5_9188, align 2
  %v1_9190 = call i32 @function_114e0(i32 %v3_9104)
  %v2_9190 = trunc i32 %v1_9190 to i16
  %v0_9194 = load i32, i32* @sl, align 4
  %v2_9194 = icmp eq i32 %v0_9194, 0
  store i1 %v2_9194, i1* %cpsr_z.global-to-local, align 1
  %v3_9198 = load i32, i32* @r5, align 4
  %v4_9198 = add i32 %v3_9198, 4
  %v5_9198 = inttoptr i32 %v4_9198 to i16*
  store i16 %v2_9190, i16* %v5_9198, align 2
  %v0_919c = load i32, i32* @sb, align 4
  %v1_919c = trunc i32 %v0_919c to i8
  %v2_919c = load i32, i32* @r5, align 4
  %v3_919c = add i32 %v2_919c, 8
  %v4_919c = inttoptr i32 %v3_919c to i8*
  store i8 %v1_919c, i8* %v4_919c, align 1
  %v0_91a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_91a0, label %dec_label_pc_91a4, label %dec_label_pc_94f4

dec_label_pc_91a4:                                ; preds = %dec_label_pc_9124, %dec_label_pc_94f4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_91a8 = load i32, i32* @r5, align 4
  %v3_91a8 = add i32 %v2_91a8, 9
  %v4_91a8 = inttoptr i32 %v3_91a8 to i8*
  store i8 17, i8* %v4_91a8, align 1
  %v0_91ac = call i32 @function_d1c4()
  store i32 %v1_90c4, i32* %r1.global-to-local, align 4
  store i1 %v2_91b8, i1* %cpsr_z.global-to-local, align 1
  %v1_91bc = sub i32 1023, %v0_91ac
  store i32 %v1_91bc, i32* %r3.global-to-local, align 4
  br i1 %v2_91b8, label %.thread, label %.thread2

.thread:                                          ; preds = %dec_label_pc_91a4
  %v2_91c4 = load i32, i32* @r5, align 4
  %v3_91c4 = add i32 %v2_91c4, 16
  %v4_91c4 = inttoptr i32 %v3_91c4 to i32*
  store i32 %v1_91bc, i32* %v4_91c4, align 4
  br label %bb

.thread2:                                         ; preds = %dec_label_pc_91a4
  %v1_91c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_91c0 = add i32 %v1_91c0, 16
  %v3_91c0 = inttoptr i32 %v2_91c0 to i32*
  %v4_91c0 = load i32, i32* %v3_91c0, align 4
  store i32 %v4_91c0, i32* %r3.global-to-local, align 4
  %v2_91c8 = load i32, i32* @r5, align 4
  %v3_91c8 = add i32 %v2_91c8, 16
  %v4_91c8 = inttoptr i32 %v3_91c8 to i32*
  store i32 %v4_91c0, i32* %v4_91c8, align 4
  br label %bb

bb:                                               ; preds = %.thread, %.thread2
  %v1_91cc = load i32, i32* @r5, align 4
  %v2_91cc = add i32 %v1_91cc, 12
  %v3_91cc = inttoptr i32 %v2_91cc to i32*
  store i32 %v0_91ac, i32* %v3_91cc, align 4
  %v1_91d4 = call i32 @function_114e0(i32 %v3_90c0)
  %v2_91d4 = trunc i32 %v1_91d4 to i16
  %v3_91d8 = load i32, i32* @r6, align 4
  %v4_91d8 = inttoptr i32 %v3_91d8 to i16*
  store i16 %v2_91d4, i16* %v4_91d8, align 2
  %v1_91e0 = call i32 @function_114e0(i32 %v3_90ac)
  %v2_91e0 = trunc i32 %v1_91e0 to i16
  %v3_91e4 = load i32, i32* @r6, align 4
  %v4_91e4 = add i32 %v3_91e4, 2
  %v5_91e4 = inttoptr i32 %v4_91e4 to i16*
  store i16 %v2_91e0, i16* %v5_91e4, align 2
  %v1_91ec = call i32 @function_114e0(i32 %v3_9108)
  %v2_91ec = trunc i32 %v1_91ec to i16
  %v3_91f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_91f0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_91f8 = add i32 %v3_91f0, 1
  store i32 %v1_91f8, i32* @r4, align 4
  %v9_91fc = icmp eq i32 %v1_91f8, %arg2
  store i1 %v9_91fc, i1* %cpsr_z.global-to-local, align 1
  %v3_9200 = load i32, i32* @r6, align 4
  %v4_9200 = add i32 %v3_9200, 4
  %v5_9200 = inttoptr i32 %v4_9200 to i16*
  store i16 %v2_91ec, i16* %v5_9200, align 2
  %v0_9204 = load i32, i32* @r4, align 4
  store i32 %v0_9204, i32* %stack_var_-44, align 4
  %v6_9208 = icmp slt i32 %v1_91f8, %arg2
  br i1 %v6_9208, label %dec_label_pc_920c, label %dec_label_pc_92ac.preheader

dec_label_pc_92ac.preheader:                      ; preds = %bb, %dec_label_pc_909c
  %v1_92c8 = add i32 %v6_8fec, 8
  %v1_92cc = add i32 %v6_8fec, 52
  %v2_92d8 = icmp eq i32 %v6_9040, -1
  %v7_92d8 = icmp eq i32 %v6_9040, -1
  %v2_9498 = icmp eq i32 %v1_90c4, 0
  %v2_94b4 = icmp eq i32 %v1_900c, 0
  br label %dec_label_pc_92ac

dec_label_pc_920c:                                ; preds = %bb, %dec_label_pc_90e0
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9218 = call i32 @function_fea0(i32 1510, i32 4)
  %v2_9220 = load i32, i32* @r4, align 4
  %v5_9220 = mul i32 %v2_9220, 4
  %v6_9220 = add i32 %v5_9220, %v2_8f28
  %v7_9220 = inttoptr i32 %v6_9220 to i32*
  store i32 %v2_9218, i32* %v7_9220, align 4
  %v3_9224 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9224, i32* %r3.global-to-local, align 4
  %v4_922c = mul i32 %v3_9224, 4
  %v5_922c = add i32 %v4_922c, %v2_8f28
  %v6_922c = inttoptr i32 %v5_922c to i32*
  %v7_922c = load i32, i32* %v6_922c, align 4
  store i32 %v7_922c, i32* %r4.global-to-local, align 4
  %v1_9230 = inttoptr i32 %v7_922c to i8*
  %v2_9230 = load i8, i8* %v1_9230, align 1
  %tmp52 = urem i8 %v2_9230, 16
  %v1_9234 = zext i8 %tmp52 to i32
  %v1_9238 = or i32 %v1_9234, 64
  store i32 %v1_9238, i32* %r2.global-to-local, align 4
  %v1_923c = trunc i32 %v1_9238 to i8
  store i8 %v1_923c, i8* %v1_9230, align 1
  %v0_9240 = load i32, i32* %r4.global-to-local, align 4
  %v1_9240 = inttoptr i32 %v0_9240 to i8*
  %v2_9240 = load i8, i8* %v1_9240, align 1
  %v3_9240 = zext i8 %v2_9240 to i32
  %v1_9244 = and i32 %v3_9240, 240
  %v1_9248 = or i32 %v1_9244, 5
  store i32 %v1_9248, i32* %r3.global-to-local, align 4
  %v1_924c = trunc i32 %v1_9248 to i8
  store i8 %v1_924c, i8* %v1_9240, align 1
  store i32 %v6_8f40, i32* %r1.global-to-local, align 4
  %v2_9254 = load i32, i32* %r4.global-to-local, align 4
  %v3_9254 = add i32 %v2_9254, 1
  %v4_9254 = inttoptr i32 %v3_9254 to i8*
  store i8 %v5_8f60, i8* %v4_9254, align 1
  %v1_925c = call i32 @function_114e0(i32 %v3_90fc)
  %v2_925c = trunc i32 %v1_925c to i16
  %v3_9260 = load i32, i32* %r4.global-to-local, align 4
  %v4_9260 = add i32 %v3_9260, 2
  %v5_9260 = inttoptr i32 %v4_9260 to i16*
  store i16 %v2_925c, i16* %v5_9260, align 2
  %v0_9264 = load i32, i32* @fp, align 4
  %v1_9268 = call i32 @function_114e0(i32 %v0_9264)
  %v2_9268 = trunc i32 %v1_9268 to i16
  %v0_926c = load i32, i32* @sl, align 4
  %v2_926c = icmp eq i32 %v0_926c, 0
  store i1 %v2_926c, i1* %cpsr_z.global-to-local, align 1
  %v3_9270 = load i32, i32* %r4.global-to-local, align 4
  %v4_9270 = add i32 %v3_9270, 4
  %v5_9270 = inttoptr i32 %v4_9270 to i16*
  store i16 %v2_9268, i16* %v5_9270, align 2
  %v0_9274 = load i32, i32* @sb, align 4
  %v1_9274 = trunc i32 %v0_9274 to i8
  %v2_9274 = load i32, i32* %r4.global-to-local, align 4
  %v3_9274 = add i32 %v2_9274, 8
  %v4_9274 = inttoptr i32 %v3_9274 to i8*
  store i8 %v1_9274, i8* %v4_9274, align 1
  %v0_9278 = load i32, i32* %r4.global-to-local, align 4
  %v1_9278 = add i32 %v0_9278, 24
  store i32 %v1_9278, i32* @r5, align 4
  %v1_927c = add i32 %v0_9278, 44
  store i32 %v1_927c, i32* @r6, align 4
  %v1_9280 = add i32 %v0_9278, 20
  store i32 %v1_9280, i32* @r7, align 4
  %v0_9284 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9284, label %dec_label_pc_9124, label %dec_label_pc_9288

dec_label_pc_9288:                                ; preds = %dec_label_pc_920c
  %v1_928c = call i32 @function_114e0(i32 16384)
  %v2_928c = trunc i32 %v1_928c to i16
  %v3_9290 = load i32, i32* %r4.global-to-local, align 4
  %v4_9290 = add i32 %v3_9290, 6
  %v5_9290 = inttoptr i32 %v4_9290 to i16*
  store i16 %v2_928c, i16* %v5_9290, align 2
  %v2_9128.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9124

dec_label_pc_9298:                                ; preds = %dec_label_pc_9328, %dec_label_pc_92ac
  %v2_929c = call i32 @function_126dc(i32* null)
  store i32 %v2_9050, i32* %r3.global-to-local, align 4
  %v9_92a4 = icmp eq i32 %v2_9050, %v2_929c
  store i1 %v9_92a4, i1* %cpsr_z.global-to-local, align 1
  %v5_92a8 = icmp slt i32 %v2_9050, %v2_929c
  br i1 %v5_92a8, label %dec_label_pc_94e8, label %dec_label_pc_92ac

dec_label_pc_92ac:                                ; preds = %dec_label_pc_92ac.preheader, %dec_label_pc_9298
  store i1 %v2_90c8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_90c8, label %dec_label_pc_9298, label %dec_label_pc_92c0

dec_label_pc_92c0:                                ; preds = %dec_label_pc_92ac
  store i32 %v6_8fec, i32* %r1.global-to-local, align 4
  store i32 %v1_92c8, i32* @sb, align 4
  store i32 %v1_92cc, i32* @sl, align 4
  br label %dec_label_pc_93d8

dec_label_pc_92d4:                                ; preds = %dec_label_pc_93d8
  store i32 %v6_9040, i32* %r2.global-to-local, align 4
  store i1 %v7_92d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92d8, label %dec_label_pc_943c, label %dec_label_pc_92e0

dec_label_pc_92e0:                                ; preds = %dec_label_pc_9400, %dec_label_pc_92d4
  store i32 65535, i32* @r4, align 4
  %v0_92e8 = load i32, i32* @fp, align 4
  %v9_92e8 = icmp eq i32 %v0_92e8, 65535
  store i1 %v9_92e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_92e8, label %dec_label_pc_9454, label %dec_label_pc_92f0

dec_label_pc_92f0:                                ; preds = %dec_label_pc_943c.dec_label_pc_92f0_crit_edge, %dec_label_pc_92e0
  %v1_92f4 = phi i32 [ %v1_92f4.pre, %dec_label_pc_943c.dec_label_pc_92f0_crit_edge ], [ 65535, %dec_label_pc_92e0 ]
  store i32 %v3_90c0, i32* %r3.global-to-local, align 4
  %v9_92f4 = icmp eq i32 %v3_90c0, %v1_92f4
  store i1 %v9_92f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_92f4, label %dec_label_pc_947c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_9454, %dec_label_pc_92f0
  %v1_9300 = phi i32 [ %v1_9474, %dec_label_pc_9454 ], [ %v1_92f4, %dec_label_pc_92f0 ]
  %v9_9300 = icmp eq i32 %v3_90ac, %v1_9300
  store i1 %v9_9300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9300, label %dec_label_pc_9490, label %dec_label_pc_9308

dec_label_pc_9308:                                ; preds = %dec_label_pc_947c, %dec_label_pc_92fc
  store i32 %v1_90c4, i32* %r1.global-to-local, align 4
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94ac, label %.thread3

.thread3:                                         ; preds = %dec_label_pc_9308
  %v1_9310 = load i32, i32* @r5, align 4
  %v2_9310 = add i32 %v1_9310, 16
  %v3_9310 = inttoptr i32 %v2_9310 to i32*
  %v4_9310 = load i32, i32* %v3_9310, align 4
  store i32 %v4_9310, i32* @r3, align 4
  %v2_9314 = load i32, i32* @r6, align 4
  %v3_9314 = add i32 %v2_9314, 16
  %v4_9314 = inttoptr i32 %v3_9314 to i32*
  store i32 %v4_9310, i32* %v4_9314, align 4
  br label %dec_label_pc_931c

dec_label_pc_931c:                                ; preds = %bb51, %.thread3
  store i32 %v1_900c, i32* %r2.global-to-local, align 4
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94b4, label %dec_label_pc_9328, label %dec_label_pc_94c0

dec_label_pc_9328:                                ; preds = %dec_label_pc_931c, %dec_label_pc_94ac, %dec_label_pc_94c0
  %v2_932c = load i32, i32* @r5, align 4
  %v3_932c = add i32 %v2_932c, 10
  %v4_932c = inttoptr i32 %v3_932c to i16*
  store i16 0, i16* %v4_932c, align 2
  %v0_9330 = load i32, i32* @r5, align 4
  store i32 %v0_9330, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_9338 = call i32 @function_bd1c(i32 %v0_9330, i32 20)
  %v3_9338 = trunc i32 %v2_9338 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9340 = load i32, i32* @r5, align 4
  %v4_9340 = add i32 %v3_9340, 10
  %v5_9340 = inttoptr i32 %v4_9340 to i16*
  store i16 %v3_9338, i16* %v5_9340, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9348 = load i32, i32* %r2.global-to-local, align 4
  %v1_9348 = trunc i32 %v0_9348 to i16
  %v2_9348 = load i32, i32* @r6, align 4
  %v3_9348 = add i32 %v2_9348, 10
  %v4_9348 = inttoptr i32 %v3_9348 to i16*
  store i16 %v1_9348, i16* %v4_9348, align 2
  %v0_934c = load i32, i32* @r6, align 4
  store i32 %v0_934c, i32* @r0, align 4
  %v2_9350 = call i32 @function_bd1c(i32 %v0_934c, i32 20)
  %v3_9350 = trunc i32 %v2_9350 to i16
  %v3_9354 = load i32, i32* @r6, align 4
  %v4_9354 = add i32 %v3_9354, 10
  %v5_9354 = inttoptr i32 %v4_9354 to i16*
  store i16 %v3_9350, i16* %v5_9354, align 2
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_935c = load i32, i32* @r7, align 4
  %v3_935c = add i32 %v2_935c, 6
  %v4_935c = inttoptr i32 %v3_935c to i16*
  store i16 0, i16* %v4_935c, align 2
  %v0_9360 = load i32, i32* @r7, align 4
  store i32 %v0_9360, i32* @r1, align 4
  %v1_9364 = add i32 %v0_9360, 4
  %v2_9364 = inttoptr i32 %v1_9364 to i16*
  %v3_9364 = load i16, i16* %v2_9364, align 2
  %v4_9364 = zext i16 %v3_9364 to i32
  store i32 %v4_9364, i32* %r2.global-to-local, align 4
  %v0_9368 = load i32, i32* @sb, align 4
  store i32 %v0_9368, i32* %r3.global-to-local, align 4
  %v0_936c = load i32, i32* @r6, align 4
  %v4_9370 = call i32 @function_bd6c(i32 %v0_936c, i32 %v0_9360, i32 %v4_9364, i32 %v0_9368)
  %v5_9370 = trunc i32 %v4_9370 to i16
  %v3_9374 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9374, i32* %r2.global-to-local, align 4
  %v3_9378 = mul i32 %v3_9374, 32
  store i32 %v3_9378, i32* %r3.global-to-local, align 4
  %v0_937c = load i32, i32* @r5, align 4
  %v1_937c = add i32 %v0_937c, 16
  %v2_937c = inttoptr i32 %v1_937c to i32*
  %v3_937c = load i32, i32* %v2_937c, align 4
  store i32 %v3_937c, i32* %r1.global-to-local, align 4
  %v5_9380 = mul i32 %v3_9374, 24
  store i32 %v5_9380, i32* %r3.global-to-local, align 4
  %v1_9384 = load i32, i32* @r8, align 4
  %v2_9384 = add i32 %v1_9384, %v5_9380
  store i32 %v2_9384, i32* @lr, align 4
  %v3_9388 = load i32, i32* @r7, align 4
  %v4_9388 = add i32 %v3_9388, 6
  %v5_9388 = inttoptr i32 %v4_9388 to i16*
  store i16 %v5_9370, i16* %v5_9388, align 2
  %v0_938c = load i32, i32* %r1.global-to-local, align 4
  %v1_938c = load i32, i32* @lr, align 4
  %v2_938c = add i32 %v1_938c, 4
  %v3_938c = inttoptr i32 %v2_938c to i32*
  store i32 %v0_938c, i32* %v3_938c, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_9398 = load i32, i32* %r3.global-to-local, align 4
  %v3_9398 = load i32, i32* @r8, align 4
  %v4_9398 = add i32 %v3_9398, %v2_9398
  %v5_9398 = inttoptr i32 %v4_9398 to i16*
  store i16 2, i16* %v5_9398, align 2
  %v0_939c = load i32, i32* %r1.global-to-local, align 4
  %v1_939c = trunc i32 %v0_939c to i16
  %v2_939c = load i32, i32* @lr, align 4
  %v3_939c = add i32 %v2_939c, 2
  %v4_939c = inttoptr i32 %v3_939c to i16*
  store i16 %v1_939c, i16* %v4_939c, align 2
  %v0_93a0 = load i32, i32* @sl, align 4
  store i32 %v0_93a0, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_93ac = load i32, i32* @r5, align 4
  store i32 %v0_93ac, i32* @r1, align 4
  store i32 %v3_9064, i32* @r0, align 4
  %v0_93bc = call i32 @function_1172c()
  %v3_93c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_93c0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_93c8 = add i32 %v3_93c0, 1
  %v9_93cc = icmp eq i32 %v1_93c8, %arg2
  store i1 %v9_93cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_93c8, i32* %stack_var_-44, align 4
  %v6_93d4 = icmp slt i32 %v1_93c8, %arg2
  br i1 %v6_93d4, label %dec_label_pc_93d8, label %dec_label_pc_9298

dec_label_pc_93d8:                                ; preds = %dec_label_pc_9328, %dec_label_pc_92c0
  %v1_93ec = phi i32 [ %v1_93c8, %dec_label_pc_9328 ], [ 0, %dec_label_pc_92c0 ]
  %v5_93dc = mul i32 %v1_93ec, 24
  %v1_93e0 = load i32, i32* @r8, align 4
  %v2_93e0 = add i32 %v1_93e0, %v5_93dc
  store i32 %v2_93e0, i32* %r3.global-to-local, align 4
  store i32 %v2_8f28, i32* %r1.global-to-local, align 4
  %v1_93e8 = add i32 %v2_93e0, 20
  %v2_93e8 = inttoptr i32 %v1_93e8 to i8*
  %v3_93e8 = load i8, i8* %v2_93e8, align 1
  %v4_93e8 = zext i8 %v3_93e8 to i32
  store i32 %v4_93e8, i32* %r2.global-to-local, align 4
  %v4_93ec = mul i32 %v1_93ec, 4
  %v5_93ec = add i32 %v4_93ec, %v2_8f28
  %v6_93ec = inttoptr i32 %v5_93ec to i32*
  %v7_93ec = load i32, i32* %v6_93ec, align 4
  store i32 %v7_93ec, i32* @r5, align 4
  %v2_93f0 = icmp ugt i8 %v3_93e8, 30
  %v7_93f0 = icmp eq i8 %v3_93e8, 31
  store i1 %v7_93f0, i1* %cpsr_z.global-to-local, align 1
  %v1_93f4 = add i32 %v7_93ec, 24
  store i32 %v1_93f4, i32* @r6, align 4
  %v1_93f8 = add i32 %v7_93ec, 44
  store i32 %v1_93f8, i32* @r7, align 4
  %v2_93fc = xor i1 %v7_93f0, true
  %v3_93fc = and i1 %v2_93f0, %v2_93fc
  br i1 %v3_93fc, label %dec_label_pc_92d4, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_93d8
  %v1_9400 = add i32 %v2_93e0, 16
  %v2_9400 = inttoptr i32 %v1_9400 to i32*
  %v3_9400 = load i32, i32* %v2_9400, align 4
  %v1_9404 = call i32 @function_11664(i32 %v3_9400)
  store i32 %v1_9404, i32* %r4.global-to-local, align 4
  %v0_940c = call i32 @function_d1c4()
  %v3_9410 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9410, i32* %r2.global-to-local, align 4
  %v5_9418 = mul i32 %v3_9410, 24
  %v1_941c = load i32, i32* @r8, align 4
  %v2_941c = add i32 %v1_941c, %v5_9418
  store i32 %v2_941c, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v2_941c, 20
  %v2_9420 = inttoptr i32 %v1_9420 to i8*
  %v3_9420 = load i8, i8* %v2_9420, align 1
  %v4_9420 = zext i8 %v3_9420 to i32
  store i32 %v4_9420, i32* %r2.global-to-local, align 4
  %v0_9424 = load i32, i32* %r4.global-to-local, align 4
  %v7_9424 = lshr i32 %v0_940c, %v4_9420
  %v8_9424 = add i32 %v7_9424, %v0_9424
  %v1_9428 = call i32 @function_114bc(i32 %v8_9424)
  store i32 %v6_9040, i32* %r2.global-to-local, align 4
  store i1 %v7_92d8, i1* %cpsr_z.global-to-local, align 1
  %v1_9434 = load i32, i32* @r5, align 4
  %v2_9434 = add i32 %v1_9434, 16
  %v3_9434 = inttoptr i32 %v2_9434 to i32*
  store i32 %v1_9428, i32* %v3_9434, align 4
  br i1 %v2_92d8, label %dec_label_pc_943c, label %dec_label_pc_92e0

dec_label_pc_943c:                                ; preds = %dec_label_pc_9400, %dec_label_pc_92d4
  %v0_943c = call i32 @function_d1c4()
  store i32 65535, i32* @r4, align 4
  %v0_9448 = load i32, i32* @fp, align 4
  %v9_9448 = icmp eq i32 %v0_9448, 65535
  store i1 %v9_9448, i1* %cpsr_z.global-to-local, align 1
  %v1_944c = load i32, i32* @r5, align 4
  %v2_944c = add i32 %v1_944c, 12
  %v3_944c = inttoptr i32 %v2_944c to i32*
  store i32 %v0_943c, i32* %v3_944c, align 4
  br i1 %v9_9448, label %dec_label_pc_9454, label %dec_label_pc_943c.dec_label_pc_92f0_crit_edge

dec_label_pc_943c.dec_label_pc_92f0_crit_edge:    ; preds = %dec_label_pc_943c
  %v1_92f4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_92f0

dec_label_pc_9454:                                ; preds = %dec_label_pc_943c, %dec_label_pc_92e0
  %v0_9454 = call i32 @function_d1c4()
  %v3_945c = urem i32 %v0_9454, 65536
  %v1_9464 = sub nsw i32 999, %v3_945c
  store i32 %v1_9464, i32* %r3.global-to-local, align 4
  %v1_9468 = trunc i32 %v0_9454 to i16
  %v2_9468 = load i32, i32* @r5, align 4
  %v3_9468 = add i32 %v2_9468, 4
  %v4_9468 = inttoptr i32 %v3_9468 to i16*
  store i16 %v1_9468, i16* %v4_9468, align 2
  %v0_946c = load i32, i32* %r3.global-to-local, align 4
  %v1_946c = trunc i32 %v0_946c to i16
  %v2_946c = load i32, i32* @r6, align 4
  %v3_946c = add i32 %v2_946c, 4
  %v4_946c = inttoptr i32 %v3_946c to i16*
  store i16 %v1_946c, i16* %v4_946c, align 2
  store i32 %v3_90c0, i32* %r3.global-to-local, align 4
  %v1_9474 = load i32, i32* @r4, align 4
  %v9_9474 = icmp eq i32 %v3_90c0, %v1_9474
  store i1 %v9_9474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9474, label %dec_label_pc_947c, label %dec_label_pc_92fc

dec_label_pc_947c:                                ; preds = %dec_label_pc_9454, %dec_label_pc_92f0
  %v0_947c = call i32 @function_d1c4()
  %v1_947c = trunc i32 %v0_947c to i16
  %v3_9480 = load i32, i32* @r5, align 4
  %v4_9480 = add i32 %v3_9480, 44
  %v5_9480 = inttoptr i32 %v4_9480 to i16*
  store i16 %v1_947c, i16* %v5_9480, align 2
  %v1_9488 = load i32, i32* @r4, align 4
  %v9_9488 = icmp eq i32 %v3_90ac, %v1_9488
  store i1 %v9_9488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9488, label %dec_label_pc_9490, label %dec_label_pc_9308

dec_label_pc_9490:                                ; preds = %dec_label_pc_947c, %dec_label_pc_92fc
  %v0_9490 = call i32 @function_d1c4()
  %v1_9490 = trunc i32 %v0_9490 to i16
  store i32 %v1_90c4, i32* %r1.global-to-local, align 4
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %.thread14, label %bb51

.thread14:                                        ; preds = %dec_label_pc_9490
  %v3_94a015 = load i32, i32* @r7, align 4
  %v4_94a016 = add i32 %v3_94a015, 2
  %v5_94a017 = inttoptr i32 %v4_94a016 to i16*
  store i16 %v1_9490, i16* %v5_94a017, align 2
  br label %dec_label_pc_94ac

bb51:                                             ; preds = %dec_label_pc_9490
  %v1_949c = load i32, i32* @r5, align 4
  %v2_949c = add i32 %v1_949c, 16
  %v3_949c = inttoptr i32 %v2_949c to i32*
  %v4_949c = load i32, i32* %v3_949c, align 4
  store i32 %v4_949c, i32* @r3, align 4
  %v3_94a0 = load i32, i32* @r7, align 4
  %v4_94a0 = add i32 %v3_94a0, 2
  %v5_94a0 = inttoptr i32 %v4_94a0 to i16*
  store i16 %v1_9490, i16* %v5_94a0, align 2
  %v1_94a4 = load i32, i32* @r3, align 4
  %v2_94a4 = load i32, i32* @r6, align 4
  %v3_94a4 = add i32 %v2_94a4, 16
  %v4_94a4 = inttoptr i32 %v3_94a4 to i32*
  store i32 %v1_94a4, i32* %v4_94a4, align 4
  br label %dec_label_pc_931c

dec_label_pc_94ac:                                ; preds = %.thread14, %dec_label_pc_9308
  %v0_94ac = call i32 @function_d1c4()
  store i32 %v1_900c, i32* %r2.global-to-local, align 4
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v1_94b8 = load i32, i32* @r6, align 4
  %v2_94b8 = add i32 %v1_94b8, 16
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v0_94ac, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9328, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_931c, %dec_label_pc_94ac
  %v0_94c0 = load i32, i32* @r7, align 4
  %v1_94c0 = add i32 %v0_94c0, 8
  store i32 %v1_94c0, i32* @r4, align 4
  store i32 %v6_8fec, i32* %r1.global-to-local, align 4
  %v2_94cc = call i32 @function_d288(i32 %v1_94c0, i32 %v6_8fec)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_94d8 = load i32, i32* @r4, align 4
  %v4_94d8 = add i32 %v2_94d8, %v6_8fec
  %v5_94d8 = inttoptr i32 %v4_94d8 to i8*
  store i8 0, i8* %v5_94d8, align 1
  br label %dec_label_pc_9328

dec_label_pc_94e0:                                ; preds = %dec_label_pc_9074
  %v1_94e4 = call i32 @function_12714(i32 %v3_9064)
  br label %dec_label_pc_94e8

dec_label_pc_94e8:                                ; preds = %dec_label_pc_9298, %dec_label_pc_8efc, %dec_label_pc_94e0
  %v1_94f0 = phi i32 [ %v3_9064, %dec_label_pc_8efc ], [ %v1_94e4, %dec_label_pc_94e0 ], [ %v2_929c, %dec_label_pc_9298 ]
  store i32 %v3_8efc, i32* %r4.global-to-local, align 4
  ret i32 %v1_94f0

dec_label_pc_94f4:                                ; preds = %dec_label_pc_9124
  %v1_94f8 = call i32 @function_114e0(i32 16384)
  %v2_94f8 = trunc i32 %v1_94f8 to i16
  %v3_94fc = load i32, i32* @r5, align 4
  %v4_94fc = add i32 %v3_94fc, 6
  %v5_94fc = inttoptr i32 %v4_94fc to i16*
  store i16 %v2_94f8, i16* %v5_94fc, align 2
  br label %dec_label_pc_91a4

; uselistorder directives
  uselistorder i16 %v1_9490, { 1, 0 }
  uselistorder i32 %v1_9474, { 1, 0 }
  uselistorder i32 %v0_9454, { 1, 0 }
  uselistorder i32 %v7_93ec, { 1, 0, 2 }
  uselistorder i32 %v1_93c8, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9374, { 1, 0, 2 }
  uselistorder i32 %v0_9278, { 1, 2, 3, 0 }
  uselistorder i1 %v2_94b4, { 2, 3, 1, 0 }
  uselistorder i1 %v2_9498, { 2, 3, 1, 0 }
  uselistorder i1 %v7_92d8, { 2, 1, 0 }
  uselistorder i32 %v0_91ac, { 1, 0 }
  uselistorder i32 %v3_9100, { 1, 0 }
  uselistorder i32 %v3_90fc, { 1, 0 }
  uselistorder i32 %v3_90e4, { 2, 1, 0 }
  uselistorder i32 %v3_90cc, { 1, 0 }
  uselistorder i1 %v2_90c8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_90c4, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_90ac, { 2, 1, 0 }
  uselistorder i1 %v7_9094, { 1, 0 }
  uselistorder i1 %v7_9068, { 1, 0 }
  uselistorder i32 %v3_9064, { 1, 3, 4, 2, 0, 5 }
  uselistorder i32 %v2_9050, { 2, 1, 0 }
  uselistorder i32 %v6_9040, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_900c, { 1, 0, 2, 3 }
  uselistorder i32 %v6_8fec, { 1, 3, 2, 4, 6, 5, 0 }
  uselistorder i32 %v7_8f64, { 1, 0, 2 }
  uselistorder i8 %v5_8f60, { 1, 0 }
  uselistorder i32 %v6_8f40, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8f28, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 15, 3, 9, 10, 11, 12, 13, 14, 16, 4, 5, 6, 7, 8 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 14, 6, 7, 8, 9, 10, 11, 12, 13, 16, 15, 26, 27, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 12, 5, 6, 7, 8, 9, 10, 11, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 10, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 12, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 29, 28, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 13, 6, 7, 8, 9, 10, 11, 12, 15, 14, 20, 21, 16, 17, 18, 19, 22, 23, 24 }
  uselistorder i32 %arg2, { 6, 5, 4, 3, 2, 1, 0, 7, 8 }
  uselistorder label %dec_label_pc_94e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_94c0, { 1, 0 }
  uselistorder label %dec_label_pc_9328, { 2, 1, 0 }
  uselistorder label %dec_label_pc_92ac, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_91a4, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 1, 0 }
}

define i32 @function_9508(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9508:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_2()
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %tmp26 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9508 = load i32, i32* @r4, align 4
  %v6_9508 = load i32, i32* @r5, align 4
  %v27_9508 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_9534 = call i32 @function_fea0(i32 %arg2, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_9534, i32* @sb, align 4
  %v2_9544 = call i32 @function_fea0(i32 %arg2, i32 4)
  %v0_9548 = load i32, i32* @r4, align 4
  store i32 %v0_9548, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_9554 = load i32, i32* @r7, align 4
  store i32 %v0_9554, i32* %r3.global-to-local, align 4
  %v0_9558 = load i32, i32* @r5, align 4
  %v5_955c = inttoptr i32 %v0_9548 to i32*
  %v6_955c = call i32 @function_8294(i32 %v0_9558, i32* %v5_955c, i32 2, i32 %v0_9554, i32 %v2_9544)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9574 = load i32, i32* @r4, align 4
  store i32 %v0_9574, i32* %r1.global-to-local, align 4
  %v0_9578 = load i32, i32* @r5, align 4
  %sext = mul i32 %v6_955c, 16777216
  %v5_9580 = sdiv i32 %sext, 16777216
  %v6_9580 = inttoptr i32 %v0_9574 to i32*
  %v7_9580 = call i32 @function_8294(i32 %v0_9578, i32* %v6_9580, i32 3, i32 65535, i32 %v5_9580)
  %v0_9584 = load i32, i32* @r4, align 4
  store i32 %v0_9584, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9580, i32* @r8, align 4
  %v0_9594 = load i32, i32* @r5, align 4
  %v5_9598 = inttoptr i32 %v0_9584 to i32*
  %v6_9598 = call i32 @function_8294(i32 %v0_9594, i32* %v5_9598, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_95a4 = load i32, i32* @r4, align 4
  store i32 %v0_95a4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_95b0 = load i32, i32* @r5, align 4
  %sext4 = mul i32 %v6_9598, 16777216
  %v5_95b8 = sdiv i32 %sext4, 16777216
  %v6_95b8 = inttoptr i32 %v0_95a4 to i32*
  %v7_95b8 = call i32 @function_8294(i32 %v0_95b0, i32* %v6_95b8, i32 5, i32 1, i32 %v5_95b8)
  %v1_95c4 = urem i32 %v7_95b8, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_95cc = load i32, i32* @r4, align 4
  store i32 %v0_95cc, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  %v5_95dc = inttoptr i32 %v0_95cc to i32*
  %v6_95dc = call i32 @function_8294(i32 %v0_95d4, i32* %v5_95dc, i32 7, i32 65535, i32 %v1_95c4)
  %v3_95e4 = urem i32 %v6_95dc, 65536
  %v0_95e8 = load i32, i32* @r4, align 4
  store i32 %v0_95e8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_95f0 = load i32, i32* @r7, align 4
  store i32 %v0_95f0, i32* %r3.global-to-local, align 4
  %v0_95f4 = load i32, i32* @r5, align 4
  %v5_95fc = inttoptr i32 %v0_95e8 to i32*
  %v6_95fc = call i32 @function_8294(i32 %v0_95f4, i32* %v5_95fc, i32 10, i32 %v0_95f0, i32 %v3_95e4)
  %v1_9604 = urem i32 %v6_95fc, 256
  %v0_9608 = load i32, i32* @r4, align 4
  store i32 %v0_9608, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9614 = load i32, i32* @r5, align 4
  %v5_961c = inttoptr i32 %v0_9608 to i32*
  %v6_961c = call i32 @function_8294(i32 %v0_9614, i32* %v5_961c, i32 11, i32 1, i32 %v1_9604)
  %v1_9624 = urem i32 %v6_961c, 256
  %v0_9628 = load i32, i32* @r4, align 4
  store i32 %v0_9628, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9634 = load i32, i32* @r5, align 4
  %v5_963c = inttoptr i32 %v0_9628 to i32*
  %v6_963c = call i32 @function_8294(i32 %v0_9634, i32* %v5_963c, i32 12, i32 1, i32 %v1_9624)
  %v1_9644 = urem i32 %v6_963c, 256
  %v0_9648 = load i32, i32* @r4, align 4
  store i32 %v0_9648, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_9650 = load i32, i32* @r7, align 4
  store i32 %v0_9650, i32* %r3.global-to-local, align 4
  %v0_9654 = load i32, i32* @r5, align 4
  %v5_965c = inttoptr i32 %v0_9648 to i32*
  %v6_965c = call i32 @function_8294(i32 %v0_9654, i32* %v5_965c, i32 13, i32 %v0_9650, i32 %v1_9644)
  %v1_9664 = urem i32 %v6_965c, 256
  %v0_9668 = load i32, i32* @r4, align 4
  store i32 %v0_9668, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_9670 = load i32, i32* @r7, align 4
  store i32 %v0_9670, i32* %r3.global-to-local, align 4
  %v0_9674 = load i32, i32* @r5, align 4
  %v5_967c = inttoptr i32 %v0_9668 to i32*
  %v6_967c = call i32 @function_8294(i32 %v0_9674, i32* %v5_967c, i32 14, i32 %v0_9670, i32 %v1_9664)
  %v1_9684 = urem i32 %v6_967c, 256
  %v0_9688 = load i32, i32* @r4, align 4
  store i32 %v0_9688, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_9690 = load i32, i32* @r7, align 4
  store i32 %v0_9690, i32* %r3.global-to-local, align 4
  %v0_9694 = load i32, i32* @r5, align 4
  %v5_969c = inttoptr i32 %v0_9688 to i32*
  %v6_969c = call i32 @function_8294(i32 %v0_9694, i32* %v5_969c, i32 15, i32 %v0_9690, i32 %v1_9684)
  %v1_96a4 = urem i32 %v6_969c, 256
  %v0_96a8 = load i32, i32* @r7, align 4
  store i32 %v0_96a8, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_96b0 = load i32, i32* @r4, align 4
  store i32 %v0_96b0, i32* %r1.global-to-local, align 4
  %v0_96b4 = load i32, i32* @r5, align 4
  %v5_96bc = inttoptr i32 %v0_96b0 to i32*
  %v6_96bc = call i32 @function_8294(i32 %v0_96b4, i32* %v5_96bc, i32 %v0_96a8, i32 768, i32 %v1_96a4)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96c8 = load i32, i32* @r4, align 4
  store i32 %v0_96c8, i32* %r1.global-to-local, align 4
  %v0_96d0 = load i32, i32* @r5, align 4
  %v5_96d4 = inttoptr i32 %v0_96c8 to i32*
  %v6_96d4 = call i32 @function_8294(i32 %v0_96d0, i32* %v5_96d4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_96dc = urem i32 %v6_96d4, 256
  store i32 %v1_96dc, i32* %r3.global-to-local, align 4
  %v0_96e0 = load i32, i32* @r7, align 4
  %v1_96e8 = inttoptr i32 %v0_96e0 to i32*
  %v2_96e8 = call i32 @function_126dc(i32* %v1_96e8)
  %v1_96ec = load i32, i32* @r6, align 4
  %v2_96ec = add i32 %v1_96ec, %v2_96e8
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9700 = call i32 @function_117e8(i32 2, i32 3, i32 6)
  store i32 %v3_9700, i32* @r0, align 4
  %v7_9704 = icmp eq i32 %v3_9700, -1
  store i1 %v7_9704, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9700, i32* @sl, align 4
  br i1 %v7_9704, label %dec_label_pc_9a48, label %dec_label_pc_9710

dec_label_pc_9710:                                ; preds = %dec_label_pc_9508
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9718 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9718, i32* %r3.global-to-local, align 4
  store i32 4, i32* @ip, align 4
  %v0_9720 = load i32, i32* @r7, align 4
  store i32 %v0_9720, i32* %r1.global-to-local, align 4
  store i32 3, i32* @r2, align 4
  %v5_972c = call i32 @function_11778(i32 %v3_9700, i32 %v0_9720, i32 3, i32 %v6_9718, i32 ptrtoint (i32* @0 to i32))
  %v7_9730 = icmp eq i32 %v5_972c, -1
  store i1 %v7_9730, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9730, label %dec_label_pc_9a40, label %dec_label_pc_9738

dec_label_pc_9738:                                ; preds = %dec_label_pc_9710
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_973c = load i32, i32* @r8, align 4
  %v3_9740 = urem i32 %v0_973c, 65536
  store i32 %v3_9740, i32* %r3.global-to-local, align 4
  %v2_9744 = icmp eq i32 %arg2, 0
  store i1 %v2_9744, i1* %cpsr_z.global-to-local, align 1
  %v0_9748 = load i32, i32* @r7, align 4
  store i32 %v0_9748, i32* %stack_var_-44, align 4
  br i1 %v2_9744, label %dec_label_pc_98e4.preheader, label %dec_label_pc_9754.preheader

dec_label_pc_9754.preheader:                      ; preds = %dec_label_pc_9738
  %v2_979c = ptrtoint i32* %stack_var_-160 to i32
  %v3_9a90 = icmp eq i32 %v3_95e4, 65535
  %v2_97e4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_97fc = ptrtoint i32* %stack_var_-80 to i32
  %v2_9804 = ptrtoint i32* %stack_var_-336 to i32
  %v2_9808 = ptrtoint i32* %stack_var_-48 to i32
  %v4_9890 = zext i8 %tmp to i32
  %v1_9894 = and i32 %v4_9890, 18
  %v2_9898 = icmp eq i32 %v1_9894, 18
  %v2_9b90 = icmp eq i32 %v1_95c4, 0
  %v3_987c = sext i16 %tmp53 to i32
  %v1_98a0 = and i32 %v4_9890, 5
  %v2_98a0 = icmp eq i32 %v1_98a0, 0
  %v1_9b70 = trunc i32 %v5_9580 to i8
  %v1_9c24 = urem i32 %v6_95fc, 2
  %tmp77 = sub nsw i32 0, %v1_9c24
  %v4_9c2c = and i32 %tmp77, 32
  %v1_9c3c = urem i32 %v6_961c, 2
  %tmp78 = sub nsw i32 0, %v1_9c3c
  %v4_9c44 = and i32 %tmp78, 16
  %v1_9c54 = urem i32 %v6_963c, 2
  %tmp79 = sub nsw i32 0, %v1_9c54
  %v4_9c5c = and i32 %tmp79, 8
  %v1_9c6c = urem i32 %v6_965c, 2
  %tmp80 = sub nsw i32 0, %v1_9c6c
  %v4_9c74 = and i32 %tmp80, 4
  %v1_9c84 = urem i32 %v6_967c, 2
  %tmp81 = sub nsw i32 0, %v1_9c84
  %v3_9c8c = and i32 %tmp81, 2
  %v1_9c9c = urem i32 %v6_969c, 2
  br label %dec_label_pc_9754

dec_label_pc_9754:                                ; preds = %dec_label_pc_9ba8, %dec_label_pc_98cc, %dec_label_pc_9754.preheader
  %stack_var_-60.0 = phi i32 [ %tmp26, %dec_label_pc_9754.preheader ], [ %stack_var_-60.5, %dec_label_pc_98cc ], [ %v0_9ad4, %dec_label_pc_9ba8 ]
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9760 = call i32 @function_117e8(i32 2, i32 1, i32 0)
  %v7_9764 = icmp eq i32 %v3_9760, -1
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9760, i32* @r8, align 4
  br i1 %v7_9764, label %dec_label_pc_98cc, label %dec_label_pc_9770

dec_label_pc_9770:                                ; preds = %dec_label_pc_9754, %dec_label_pc_98a8
  %v0_9778 = phi i32 [ %v3_98bc, %dec_label_pc_98a8 ], [ %v3_9760, %dec_label_pc_9754 ]
  %stack_var_-60.1 = phi i32 [ %v0_9ad4, %dec_label_pc_98a8 ], [ %stack_var_-60.0, %dec_label_pc_9754 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9778 = call i32 @function_fbfc(i32 %v0_9778, i32 3, i32 0)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9780 = or i32 %v3_9778, 2048
  store i32 %v1_9780, i32* %r2.global-to-local, align 4
  %v0_9784 = load i32, i32* @r8, align 4
  %v3_9788 = call i32 @function_fbfc(i32 %v0_9784, i32 4, i32 %v1_9780)
  %v3_978c = load i32, i32* %stack_var_-44, align 4
  %v5_9794 = mul i32 %v3_978c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v2_97a8 = add i32 %v5_9794, %arg3
  store i32 %v2_97a8, i32* %r3.global-to-local, align 4
  %v1_97ac = add i32 %v2_97a8, 20
  %v2_97ac = inttoptr i32 %v1_97ac to i8*
  %v3_97ac = load i8, i8* %v2_97ac, align 1
  %v4_97ac = zext i8 %v3_97ac to i32
  store i32 %v4_97ac, i32* %r2.global-to-local, align 4
  %v2_97b0 = icmp ugt i8 %v3_97ac, 30
  %v7_97b0 = icmp eq i8 %v3_97ac, 31
  store i1 %v7_97b0, i1* %cpsr_z.global-to-local, align 1
  %v2_97b4 = xor i1 %v7_97b0, true
  %v3_97b4 = and i1 %v2_97b0, %v2_97b4
  br i1 %v3_97b4, label %bb, label %bb63

bb:                                               ; preds = %dec_label_pc_9770
  %v5_97b4 = add i32 %v2_97a8, 16
  %v6_97b4 = inttoptr i32 %v5_97b4 to i32*
  %v7_97b4 = load i32, i32* %v6_97b4, align 4
  store i32 %v7_97b4, i32* %r3.global-to-local, align 4
  br label %bb63

bb63:                                             ; preds = %dec_label_pc_9770, %bb
  %v4_97b8 = phi i32 [ %v2_97a8, %dec_label_pc_9770 ], [ %v7_97b4, %bb ]
  %v4_97b8.stack_var_-60.1 = select i1 %v3_97b4, i32 %v4_97b8, i32 %stack_var_-60.1
  %v2_97bc = xor i1 %v2_97b0, true
  %v3_97bc = or i1 %v7_97b0, %v2_97bc
  br i1 %v3_97bc, label %dec_label_pc_9a54, label %dec_label_pc_97c0

dec_label_pc_97c0:                                ; preds = %bb63
  store i32 %v3_95e4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9a90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9a90, label %dec_label_pc_9a9c, label %dec_label_pc_97d4

dec_label_pc_97d4:                                ; preds = %dec_label_pc_9a54, %dec_label_pc_97c0
  %stack_var_-60.3 = phi i32 [ %v1_9a80, %dec_label_pc_9a54 ], [ %v4_97b8.stack_var_-60.1, %dec_label_pc_97c0 ]
  %v1_97d8 = call i32 @function_114e0(i32 %v3_95e4)
  %v2_97d8 = trunc i32 %v1_97d8 to i16
  store i32 %v2_979c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_97e4

dec_label_pc_97e4:                                ; preds = %dec_label_pc_9a9c, %dec_label_pc_97d4
  %v0_9ad4 = phi i32 [ %stack_var_-60.6, %dec_label_pc_9a9c ], [ %stack_var_-60.3, %dec_label_pc_97d4 ]
  %storemerge = phi i16 [ %v1_9a9c, %dec_label_pc_9a9c ], [ %v2_97d8, %dec_label_pc_97d4 ]
  store i32 %v2_97e4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_97ec = load i32, i32* @r8, align 4
  %v3_97f0 = call i32 @function_1142c(i32 %v0_97ec, i32 %v2_97e4, i32 16)
  %v2_97f8 = call i32 @function_126dc(i32* null)
  store i32 %v2_97fc, i32* @r7, align 4
  store i32 %v2_97f8, i32* @r4, align 4
  store i32 %v2_9804, i32* @r6, align 4
  store i32 %v2_9808, i32* @r5, align 4
  %v9_985c = icmp eq i32 %tmp23, %v0_9ad4
  %v4_9884 = zext i16 %storemerge to i32
  %. = zext i1 %v9_985c to i32
  %v9_9870 = icmp eq i1 %v9_985c, false
  %v9_9888 = icmp eq i32 %v3_987c, %v4_9884
  br label %dec_label_pc_9820

dec_label_pc_9810:                                ; preds = %.thread20, %dec_label_pc_9878, %dec_label_pc_98a0, %bb66
  %v2_9810 = call i32 @function_126dc(i32* null)
  %v0_9814 = load i32, i32* @r4, align 4
  %v2_9814 = sub i32 %v2_9810, %v0_9814
  %v7_9818 = icmp eq i32 %v2_9814, 10
  store i1 %v7_9818, i1* %cpsr_z.global-to-local, align 1
  %v8_981c = icmp sgt i32 %v2_9814, 10
  br i1 %v8_981c, label %dec_label_pc_98a8, label %dec_label_pc_9820

dec_label_pc_9820:                                ; preds = %dec_label_pc_9810, %dec_label_pc_97e4
  store i32 256, i32* @r2, align 4
  store i32 %v2_9804, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9830 = load i32, i32* @sl, align 4
  store i32 %v0_9830, i32* @r0, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v0_9840 = call i32 @function_116c0()
  store i32 %v0_9840, i32* %r2.global-to-local, align 4
  %v7_9848 = icmp eq i32 %v0_9840, -1
  store i1 %v7_9848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9848, label %dec_label_pc_9a48, label %dec_label_pc_9854

dec_label_pc_9854:                                ; preds = %dec_label_pc_9820
  store i32 %tmp23, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_9868 = icmp eq i32 %v0_9840, 40
  store i1 %v7_9868, i1* %cpsr_z.global-to-local, align 1
  %tmp82 = icmp ult i32 %v0_9840, 41
  br i1 %tmp82, label %.thread20, label %bb66

.thread20:                                        ; preds = %dec_label_pc_9854
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9810

bb66:                                             ; preds = %dec_label_pc_9854
  store i1 %v9_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9870, label %dec_label_pc_9810, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %bb66
  store i32 %v3_987c, i32* %r1.global-to-local, align 4
  store i32 %v2_979c, i32* %r3.global-to-local, align 4
  store i32 %v4_9884, i32* %r2.global-to-local, align 4
  store i1 %v9_9888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9888, label %dec_label_pc_9890, label %dec_label_pc_9810

dec_label_pc_9890:                                ; preds = %dec_label_pc_9878
  store i32 %v4_9890, i32* %r2.global-to-local, align 4
  store i32 %v1_9894, i32* %r3.global-to-local, align 4
  store i1 %v2_9898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9898, label %dec_label_pc_9ad0, label %dec_label_pc_98a0

dec_label_pc_98a0:                                ; preds = %dec_label_pc_9890
  store i1 %v2_98a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98a0, label %dec_label_pc_9810, label %dec_label_pc_98a8

dec_label_pc_98a8:                                ; preds = %dec_label_pc_98a0, %dec_label_pc_9810
  %v0_98a8 = load i32, i32* @r8, align 4
  %v1_98ac = call i32 @function_12714(i32 %v0_98a8)
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_98bc = call i32 @function_117e8(i32 2, i32 1, i32 0)
  %v3_98c0 = icmp eq i32 %v3_98bc, -1
  %v8_98c0 = icmp eq i32 %v3_98bc, -1
  store i1 %v8_98c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_98bc, i32* @r8, align 4
  br i1 %v3_98c0, label %dec_label_pc_98cc, label %dec_label_pc_9770

dec_label_pc_98cc:                                ; preds = %dec_label_pc_98a8, %dec_label_pc_9754
  %stack_var_-60.5 = phi i32 [ %stack_var_-60.0, %dec_label_pc_9754 ], [ %v0_9ad4, %dec_label_pc_98a8 ]
  %v3_98cc = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_98d4 = add i32 %v3_98cc, 1
  store i32 %v1_98d4, i32* %r3.global-to-local, align 4
  %v9_98d8 = icmp eq i32 %v1_98d4, %arg2
  store i1 %v9_98d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_98d4, i32* %stack_var_-44, align 4
  %v8_98e0 = icmp slt i32 %v1_98d4, %arg2
  br i1 %v8_98e0, label %dec_label_pc_9754, label %dec_label_pc_98e4.preheader

dec_label_pc_98e4.preheader:                      ; preds = %dec_label_pc_98cc, %dec_label_pc_9ba8, %dec_label_pc_9738
  %v3_98fc = mul i32 %v6_96bc, 65536
  %v1_9900 = add i32 %v3_98fc, 1310720
  %v3_9904 = udiv i32 %v1_9900, 65536
  %v2_9a18 = icmp eq i32 %v1_96dc, 0
  %v1_990c = add i32 %v6_96bc, 20
  %v1_9910 = add i32 %v6_96bc, 40
  %v3_9a08 = icmp eq i32 %v3_9740, 65535
  br label %dec_label_pc_98e4

dec_label_pc_98e4:                                ; preds = %dec_label_pc_98e4.preheader, %dec_label_pc_9ab8
  store i1 %v2_9744, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9744, label %dec_label_pc_9ab8, label %dec_label_pc_98f8

dec_label_pc_98f8:                                ; preds = %dec_label_pc_98e4
  store i32 %v6_96bc, i32* %r1.global-to-local, align 4
  store i32 %v1_9900, i32* %r3.global-to-local, align 4
  store i32 %v3_9904, i32* @fp, align 4
  store i32 %v1_990c, i32* @r8, align 4
  store i32 %v1_9910, i32* @r7, align 4
  br label %dec_label_pc_99f4

dec_label_pc_9918:                                ; preds = %dec_label_pc_9a14, %dec_label_pc_9a20
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_991c = load i32, i32* @r5, align 4
  %v3_991c = add i32 %v2_991c, 10
  %v4_991c = inttoptr i32 %v3_991c to i16*
  store i16 0, i16* %v4_991c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9924 = load i32, i32* @r5, align 4
  store i32 %v0_9924, i32* @r0, align 4
  %v2_9928 = call i32 @function_bd1c(i32 %v0_9924, i32 20)
  %v3_9928 = trunc i32 %v2_9928 to i16
  %v3_992c = load i32, i32* %stack_var_-44, align 4
  %v3_9930 = mul i32 %v3_992c, 16
  %v1_9934 = load i32, i32* @sb, align 4
  %v2_9934 = add i32 %v1_9934, %v3_9930
  store i32 %v2_9934, i32* %r2.global-to-local, align 4
  %v1_9938 = add i32 %v2_9934, 4
  %v2_9938 = inttoptr i32 %v1_9938 to i32*
  %v3_9938 = load i32, i32* %v2_9938, align 4
  %v3_993c = mul i32 %v3_9938, 65536
  store i32 %v3_993c, i32* %r1.global-to-local, align 4
  %v1_9940 = add i32 %v3_9938, 1
  store i32 %v1_9940, i32* %r3.global-to-local, align 4
  store i32 %v1_9940, i32* %v2_9938, align 4
  %v3_9948 = load i32, i32* @r5, align 4
  %v4_9948 = add i32 %v3_9948, 10
  %v5_9948 = inttoptr i32 %v4_9948 to i16*
  store i16 %v3_9928, i16* %v5_9948, align 2
  %v0_994c = load i32, i32* %r1.global-to-local, align 4
  %v3_994c = udiv i32 %v0_994c, 65536
  %v1_9950 = call i32 @function_114e0(i32 %v3_994c)
  %v1_9954 = load i32, i32* @r6, align 4
  %v2_9954 = add i32 %v1_9954, 4
  %v3_9954 = inttoptr i32 %v2_9954 to i32*
  store i32 %v1_9950, i32* %v3_9954, align 4
  %v3_9958 = load i32, i32* %stack_var_-44, align 4
  %v3_995c = mul i32 %v3_9958, 16
  %v1_9960 = load i32, i32* @sb, align 4
  %v2_9960 = add i32 %v1_9960, %v3_995c
  store i32 %v2_9960, i32* %r3.global-to-local, align 4
  %v1_9964 = add i32 %v2_9960, 8
  %v2_9964 = inttoptr i32 %v1_9964 to i32*
  %v3_9964 = load i32, i32* %v2_9964, align 4
  %v3_996c = urem i32 %v3_9964, 65536
  %v1_9970 = call i32 @function_114e0(i32 %v3_996c)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9978 = load i32, i32* @r6, align 4
  %v2_9978 = add i32 %v1_9978, 8
  %v3_9978 = inttoptr i32 %v2_9978 to i32*
  store i32 %v1_9970, i32* %v3_9978, align 4
  %v0_997c = load i32, i32* %r3.global-to-local, align 4
  %v1_997c = trunc i32 %v0_997c to i16
  %v2_997c = load i32, i32* @r6, align 4
  %v3_997c = add i32 %v2_997c, 16
  %v4_997c = inttoptr i32 %v3_997c to i16*
  store i16 %v1_997c, i16* %v4_997c, align 2
  %v0_9980 = load i32, i32* @fp, align 4
  %v1_9984 = call i32 @function_114e0(i32 %v0_9980)
  %v0_9988 = load i32, i32* @r6, align 4
  store i32 %v0_9988, i32* @r1, align 4
  store i32 %v1_9984, i32* %r2.global-to-local, align 4
  %v0_9990 = load i32, i32* @r8, align 4
  store i32 %v0_9990, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* @r5, align 4
  %v4_9998 = call i32 @function_bd6c(i32 %v0_9994, i32 %v0_9988, i32 %v1_9984, i32 %v0_9990)
  %v5_9998 = trunc i32 %v4_9998 to i16
  %v3_999c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_999c, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v3_99a4 = mul i32 %v3_999c, 32
  store i32 %v3_99a4, i32* %lr.global-to-local, align 4
  %v3_99a8 = load i32, i32* @r6, align 4
  %v4_99a8 = add i32 %v3_99a8, 16
  %v5_99a8 = inttoptr i32 %v4_99a8 to i16*
  store i16 %v5_9998, i16* %v5_99a8, align 2
  %v0_99ac = load i32, i32* %lr.global-to-local, align 4
  %v1_99ac = load i32, i32* %r3.global-to-local, align 4
  %tmp83 = mul i32 %v1_99ac, -8
  %v5_99ac = add i32 %v0_99ac, %tmp83
  store i32 %v5_99ac, i32* %lr.global-to-local, align 4
  %v0_99b0 = load i32, i32* @r6, align 4
  %v1_99b0 = add i32 %v0_99b0, 2
  %v2_99b0 = inttoptr i32 %v1_99b0 to i16*
  %v3_99b0 = load i16, i16* %v2_99b0, align 2
  %v4_99b0 = zext i16 %v3_99b0 to i32
  store i32 %v4_99b0, i32* @r6, align 4
  %v1_99b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_99b4 = add i32 %v1_99b4, %v5_99ac
  store i32 %v2_99b4, i32* @lr, align 4
  %v3_99b8 = add i32 %v2_99b4, 2
  %v4_99b8 = inttoptr i32 %v3_99b8 to i16*
  store i16 %v3_99b0, i16* %v4_99b8, align 2
  %v0_99bc = load i32, i32* @r7, align 4
  store i32 %v0_99bc, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_99c8 = load i32, i32* @r5, align 4
  store i32 %v0_99c8, i32* @r1, align 4
  %v0_99cc = load i32, i32* @sl, align 4
  store i32 %v0_99cc, i32* @r0, align 4
  %v0_99d8 = call i32 @function_1172c()
  %v3_99dc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_99dc, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_99e4 = add i32 %v3_99dc, 1
  %v9_99e8 = icmp eq i32 %v1_99e4, %arg2
  store i1 %v9_99e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_99e4, i32* %stack_var_-44, align 4
  %v7_99f0 = icmp slt i32 %v1_99e4, %arg2
  br i1 %v7_99f0, label %dec_label_pc_99f4, label %dec_label_pc_9ab8

dec_label_pc_99f4:                                ; preds = %dec_label_pc_9918, %dec_label_pc_98f8
  %v1_9a00 = phi i32 [ %v1_99e4, %dec_label_pc_9918 ], [ 0, %dec_label_pc_98f8 ]
  store i32 %v2_9544, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9740, i32* %r1.global-to-local, align 4
  %v4_9a00 = mul i32 %v1_9a00, 4
  %v5_9a00 = add i32 %v4_9a00, %v2_9544
  %v6_9a00 = inttoptr i32 %v5_9a00 to i32*
  %v7_9a00 = load i32, i32* %v6_9a00, align 4
  store i32 %v7_9a00, i32* @r5, align 4
  store i32 65535, i32* @r3, align 4
  store i1 %v3_9a08, i1* %cpsr_z.global-to-local, align 1
  %v1_9a0c = add i32 %v7_9a00, 20
  store i32 %v1_9a0c, i32* @r6, align 4
  br i1 %v3_9a08, label %dec_label_pc_9aac, label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99f4, %dec_label_pc_9aac
  store i32 %v1_96dc, i32* %r2.global-to-local, align 4
  store i1 %v2_9a18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a18, label %dec_label_pc_9918, label %dec_label_pc_9a20

dec_label_pc_9a20:                                ; preds = %dec_label_pc_9a14
  %v0_9a20 = load i32, i32* @r5, align 4
  %v1_9a20 = add i32 %v0_9a20, 40
  store i32 %v1_9a20, i32* @r4, align 4
  store i32 %v6_96bc, i32* %r1.global-to-local, align 4
  %v2_9a2c = call i32 @function_d288(i32 %v1_9a20, i32 %v6_96bc)
  store i32 %v6_96bc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9a38 = load i32, i32* @r4, align 4
  %v4_9a38 = add i32 %v2_9a38, %v6_96bc
  %v5_9a38 = inttoptr i32 %v4_9a38 to i8*
  store i8 0, i8* %v5_9a38, align 1
  br label %dec_label_pc_9918

dec_label_pc_9a40:                                ; preds = %dec_label_pc_9710
  %v0_9a40 = load i32, i32* @sl, align 4
  %v1_9a44 = call i32 @function_12714(i32 %v0_9a40)
  br label %dec_label_pc_9a48

dec_label_pc_9a48:                                ; preds = %dec_label_pc_9820, %dec_label_pc_9ab8, %dec_label_pc_9508, %dec_label_pc_9a40
  %v1_9a50 = phi i32 [ %v3_9700, %dec_label_pc_9508 ], [ %v1_9a44, %dec_label_pc_9a40 ], [ %v2_9abc, %dec_label_pc_9ab8 ], [ 0, %dec_label_pc_9820 ]
  store i32 %v3_9508, i32* %r4.global-to-local, align 4
  store i32 %v6_9508, i32* %r5.global-to-local, align 4
  store i32 %v27_9508, i32* %lr.global-to-local, align 4
  ret i32 %v1_9a50

dec_label_pc_9a54:                                ; preds = %bb63
  %v1_9a54 = add i32 %v4_97b8, 16
  %v2_9a54 = inttoptr i32 %v1_9a54 to i32*
  %v3_9a54 = load i32, i32* %v2_9a54, align 4
  %v1_9a58 = call i32 @function_11664(i32 %v3_9a54)
  store i32 %v1_9a58, i32* @r4, align 4
  %v0_9a60 = call i32 @function_d1c4()
  %v3_9a64 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9a64, i32* %r2.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v5_9a70 = mul i32 %v3_9a64, 24
  %v2_9a74 = add i32 %v5_9a70, %arg3
  store i32 %v2_9a74, i32* %r3.global-to-local, align 4
  %v1_9a78 = add i32 %v2_9a74, 20
  %v2_9a78 = inttoptr i32 %v1_9a78 to i8*
  %v3_9a78 = load i8, i8* %v2_9a78, align 1
  %v4_9a78 = zext i8 %v3_9a78 to i32
  store i32 %v4_9a78, i32* %r2.global-to-local, align 4
  %v0_9a7c = load i32, i32* @r4, align 4
  %v7_9a7c = lshr i32 %v0_9a60, %v4_9a78
  %v8_9a7c = add i32 %v7_9a7c, %v0_9a7c
  %v1_9a80 = call i32 @function_114bc(i32 %v8_9a7c)
  store i32 %v3_95e4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9a90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9a90, label %dec_label_pc_9a9c, label %dec_label_pc_97d4

dec_label_pc_9a9c:                                ; preds = %dec_label_pc_9a54, %dec_label_pc_97c0
  %stack_var_-60.6 = phi i32 [ %v1_9a80, %dec_label_pc_9a54 ], [ %v4_97b8.stack_var_-60.1, %dec_label_pc_97c0 ]
  %v0_9a9c = call i32 @function_d1c4()
  %v1_9a9c = trunc i32 %v0_9a9c to i16
  store i32 %v2_979c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_97e4

dec_label_pc_9aac:                                ; preds = %dec_label_pc_99f4
  %v0_9aac = call i32 @function_d1c4()
  %v1_9aac = trunc i32 %v0_9aac to i16
  %v3_9ab0 = load i32, i32* @r5, align 4
  %v4_9ab0 = add i32 %v3_9ab0, 4
  %v5_9ab0 = inttoptr i32 %v4_9ab0 to i16*
  store i16 %v1_9aac, i16* %v5_9ab0, align 2
  br label %dec_label_pc_9a14

dec_label_pc_9ab8:                                ; preds = %dec_label_pc_9918, %dec_label_pc_98e4
  %v2_9abc = call i32 @function_126dc(i32* null)
  store i32 %v2_96ec, i32* %r3.global-to-local, align 4
  %v9_9ac4 = icmp eq i32 %v2_96ec, %v2_9abc
  store i1 %v9_9ac4, i1* %cpsr_z.global-to-local, align 1
  %v6_9ac8 = icmp slt i32 %v2_96ec, %v2_9abc
  br i1 %v6_9ac8, label %dec_label_pc_9a48, label %dec_label_pc_98e4

dec_label_pc_9ad0:                                ; preds = %dec_label_pc_9890
  %v3_9ad0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ad0, i32* %r4.global-to-local, align 4
  %v1_9ad4 = load i32, i32* @sb, align 4
  %v5_9ad4 = mul i32 %v3_9ad0, 16
  %v6_9ad4 = add i32 %v1_9ad4, %v5_9ad4
  %v7_9ad4 = inttoptr i32 %v6_9ad4 to i32*
  store i32 %v0_9ad4, i32* %v7_9ad4, align 4
  %v0_9ad8 = load i32, i32* @fp, align 4
  %v1_9ad8 = add i32 %v0_9ad8, 4
  %v2_9ad8 = inttoptr i32 %v1_9ad8 to i32*
  %v3_9ad8 = load i32, i32* %v2_9ad8, align 4
  %v1_9adc = call i32 @function_11664(i32 %v3_9ad8)
  %v0_9ae0 = load i32, i32* %r4.global-to-local, align 4
  %v3_9ae0 = mul i32 %v0_9ae0, 16
  %v1_9ae4 = load i32, i32* @sb, align 4
  %v2_9ae4 = add i32 %v1_9ae4, %v3_9ae0
  store i32 %v2_9ae4, i32* %r4.global-to-local, align 4
  %v2_9ae8 = add i32 %v2_9ae4, 4
  %v3_9ae8 = inttoptr i32 %v2_9ae8 to i32*
  store i32 %v1_9adc, i32* %v3_9ae8, align 4
  %v0_9aec = load i32, i32* @fp, align 4
  %v1_9aec = add i32 %v0_9aec, 8
  %v2_9aec = inttoptr i32 %v1_9aec to i32*
  %v3_9aec = load i32, i32* %v2_9aec, align 4
  %v3_9af0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9af0, i32* %r5.global-to-local, align 4
  %v1_9af4 = call i32 @function_11664(i32 %v3_9aec)
  %v3_9af8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9af8, i32* @r6, align 4
  %v0_9afc = load i32, i32* @fp, align 4
  %v1_9afc = add i32 %v0_9afc, 2
  %v2_9afc = inttoptr i32 %v1_9afc to i16*
  %v3_9afc = load i16, i16* %v2_9afc, align 2
  %v4_9afc = zext i16 %v3_9afc to i32
  store i32 %v4_9afc, i32* %r2.global-to-local, align 4
  %v3_9b00 = mul i32 %v3_9af8, 16
  %v1_9b04 = load i32, i32* @sb, align 4
  %v2_9b04 = add i32 %v1_9b04, %v3_9b00
  store i32 %v2_9b04, i32* %r3.global-to-local, align 4
  store i32 %v6_96bc, i32* %r1.global-to-local, align 4
  %v3_9b0c = add i32 %v2_9b04, 12
  %v4_9b0c = inttoptr i32 %v3_9b0c to i16*
  store i16 %v3_9afc, i16* %v4_9b0c, align 2
  %v0_9b10 = load i32, i32* %r1.global-to-local, align 4
  %v1_9b10 = add i32 %v0_9b10, 40
  store i32 %v1_9b10, i32* @r4, align 4
  store i32 %v3_987c, i32* %r1.global-to-local, align 4
  %v0_9b1c = load i32, i32* %r5.global-to-local, align 4
  %v3_9b1c = mul i32 %v0_9b1c, 16
  %v1_9b20 = load i32, i32* @sb, align 4
  %v2_9b20 = add i32 %v1_9b20, %v3_9b1c
  store i32 %v2_9b20, i32* @r5, align 4
  %v2_9b24 = add i32 %v2_9b20, 8
  %v3_9b24 = inttoptr i32 %v2_9b24 to i32*
  store i32 %v1_9af4, i32* %v3_9b24, align 4
  %v0_9b28 = load i32, i32* %r1.global-to-local, align 4
  %v1_9b28 = trunc i32 %v0_9b28 to i16
  %v2_9b28 = load i32, i32* %r3.global-to-local, align 4
  %v3_9b28 = add i32 %v2_9b28, 14
  %v4_9b28 = inttoptr i32 %v3_9b28 to i16*
  store i16 %v1_9b28, i16* %v4_9b28, align 2
  %v0_9b2c = load i32, i32* @r4, align 4
  store i32 %v0_9b2c, i32* @r0, align 4
  %v0_9b30 = call i32 @function_10910()
  store i32 %v2_9544, i32* %r3.global-to-local, align 4
  %v2_9b3c = load i32, i32* @r6, align 4
  %v5_9b3c = mul i32 %v2_9b3c, 4
  %v6_9b3c = add i32 %v5_9b3c, %v2_9544
  %v7_9b3c = inttoptr i32 %v6_9b3c to i32*
  store i32 %v0_9b30, i32* %v7_9b3c, align 4
  %v3_9b40 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9b40, i32* %r2.global-to-local, align 4
  %v0_9b44 = load i32, i32* %r3.global-to-local, align 4
  %v4_9b44 = mul i32 %v3_9b40, 4
  %v5_9b44 = add i32 %v0_9b44, %v4_9b44
  %v6_9b44 = inttoptr i32 %v5_9b44 to i32*
  %v7_9b44 = load i32, i32* %v6_9b44, align 4
  store i32 %v7_9b44, i32* @r5, align 4
  %v1_9b48 = inttoptr i32 %v7_9b44 to i8*
  %v2_9b48 = load i8, i8* %v1_9b48, align 1
  %tmp84 = urem i8 %v2_9b48, 16
  %v1_9b4c = zext i8 %tmp84 to i32
  %v1_9b50 = or i32 %v1_9b4c, 64
  store i32 %v1_9b50, i32* %r3.global-to-local, align 4
  %v1_9b54 = trunc i32 %v1_9b50 to i8
  store i8 %v1_9b54, i8* %v1_9b48, align 1
  %v0_9b58 = load i32, i32* @r5, align 4
  %v1_9b58 = inttoptr i32 %v0_9b58 to i8*
  %v2_9b58 = load i8, i8* %v1_9b58, align 1
  %v3_9b58 = zext i8 %v2_9b58 to i32
  %v1_9b5c = and i32 %v3_9b58, 240
  %v1_9b60 = or i32 %v1_9b5c, 5
  store i32 %v1_9b60, i32* %r2.global-to-local, align 4
  %v1_9b64 = trunc i32 %v1_9b60 to i8
  store i8 %v1_9b64, i8* %v1_9b58, align 1
  store i32 %v5_9580, i32* %r1.global-to-local, align 4
  %v0_9b6c = load i32, i32* @r4, align 4
  %v3_9b6c = mul i32 %v0_9b6c, 65536
  store i32 %v3_9b6c, i32* %r4.global-to-local, align 4
  %v2_9b70 = load i32, i32* @r5, align 4
  %v3_9b70 = add i32 %v2_9b70, 1
  %v4_9b70 = inttoptr i32 %v3_9b70 to i8*
  store i8 %v1_9b70, i8* %v4_9b70, align 1
  %v0_9b74 = load i32, i32* %r4.global-to-local, align 4
  %v3_9b74 = udiv i32 %v0_9b74, 65536
  %v1_9b78 = call i32 @function_114e0(i32 %v3_9b74)
  %v2_9b78 = trunc i32 %v1_9b78 to i16
  %v3_9b7c = load i32, i32* @r5, align 4
  %v4_9b7c = add i32 %v3_9b7c, 2
  %v5_9b7c = inttoptr i32 %v4_9b7c to i16*
  store i16 %v2_9b78, i16* %v5_9b7c, align 2
  %v1_9b84 = call i32 @function_114e0(i32 %v3_9740)
  %v2_9b84 = trunc i32 %v1_9b84 to i16
  store i32 %v1_95c4, i32* %r2.global-to-local, align 4
  store i32 %v5_95b8, i32* %r3.global-to-local, align 4
  store i1 %v2_9b90, i1* %cpsr_z.global-to-local, align 1
  %v3_9b94 = load i32, i32* @r5, align 4
  %v4_9b94 = add i32 %v3_9b94, 4
  %v5_9b94 = inttoptr i32 %v4_9b94 to i16*
  store i16 %v2_9b84, i16* %v5_9b94, align 2
  %v0_9b98 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b98 = trunc i32 %v0_9b98 to i8
  %v2_9b98 = load i32, i32* @r5, align 4
  %v3_9b98 = add i32 %v2_9b98, 8
  %v4_9b98 = inttoptr i32 %v3_9b98 to i8*
  store i8 %v1_9b98, i8* %v4_9b98, align 1
  %v0_9b9c = load i32, i32* @r5, align 4
  %v1_9b9c = add i32 %v0_9b9c, 20
  store i32 %v1_9b9c, i32* @fp, align 4
  %v1_9ba0 = add i32 %v0_9b9c, 40
  store i32 %v1_9ba0, i32* @r4, align 4
  %v0_9ba4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9ba4, label %dec_label_pc_9ba8, label %dec_label_pc_9ce4

dec_label_pc_9ba8:                                ; preds = %dec_label_pc_9ad0, %dec_label_pc_9ce4
  %v2_9bac = phi i32 [ %v0_9b9c, %dec_label_pc_9ad0 ], [ %v2_9bac.pre, %dec_label_pc_9ce4 ]
  %v3_9bac = add i32 %v2_9bac, 9
  %v4_9bac = inttoptr i32 %v3_9bac to i8*
  store i8 6, i8* %v4_9bac, align 1
  store i32 ptrtoint (i32* @global_var_1f644.44 to i32), i32* %r2.global-to-local, align 4
  %v2_9bb4 = load i32, i32* @global_var_1f644.44, align 4
  store i32 %v2_9bb4, i32* %r1.global-to-local, align 4
  %v1_9bb8 = load i32, i32* @r5, align 4
  %v2_9bb8 = add i32 %v1_9bb8, 12
  %v3_9bb8 = inttoptr i32 %v2_9bb8 to i32*
  store i32 %v2_9bb4, i32* %v3_9bb8, align 4
  %v3_9bbc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9bbc, i32* %r3.global-to-local, align 4
  %v0_9bc0 = load i32, i32* @sb, align 4
  %v4_9bc0 = mul i32 %v3_9bbc, 16
  %v5_9bc0 = add i32 %v0_9bc0, %v4_9bc0
  %v6_9bc0 = inttoptr i32 %v5_9bc0 to i32*
  %v7_9bc0 = load i32, i32* %v6_9bc0, align 4
  store i32 %v7_9bc0, i32* %r2.global-to-local, align 4
  store i32 %v5_9bc0, i32* %r3.global-to-local, align 4
  %v1_9bcc = load i32, i32* @r5, align 4
  %v2_9bcc = add i32 %v1_9bcc, 16
  %v3_9bcc = inttoptr i32 %v2_9bcc to i32*
  store i32 %v7_9bc0, i32* %v3_9bcc, align 4
  %v0_9bd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_9bd0 = add i32 %v0_9bd0, 12
  %v2_9bd0 = inttoptr i32 %v1_9bd0 to i16*
  %v3_9bd0 = load i16, i16* %v2_9bd0, align 2
  %v4_9bd0 = zext i16 %v3_9bd0 to i32
  store i32 %v4_9bd0, i32* %r1.global-to-local, align 4
  %v2_9bd4 = load i32, i32* @r5, align 4
  %v3_9bd4 = add i32 %v2_9bd4, 20
  %v4_9bd4 = inttoptr i32 %v3_9bd4 to i16*
  store i16 %v3_9bd0, i16* %v4_9bd4, align 2
  %v0_9bd8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9bd8 = add i32 %v0_9bd8, 8
  %v2_9bd8 = inttoptr i32 %v1_9bd8 to i32*
  %v3_9bd8 = load i32, i32* %v2_9bd8, align 4
  store i32 %v3_9bd8, i32* %r1.global-to-local, align 4
  %v0_9bdc = load i32, i32* @fp, align 4
  %v1_9bdc = add i32 %v0_9bdc, 13
  %v2_9bdc = inttoptr i32 %v1_9bdc to i8*
  %v3_9bdc = load i8, i8* %v2_9bdc, align 1
  %v4_9bdc = zext i8 %v3_9bdc to i32
  store i32 %v4_9bdc, i32* %r2.global-to-local, align 4
  %v2_9be0 = add i32 %v0_9bdc, 4
  %v3_9be0 = inttoptr i32 %v2_9be0 to i32*
  store i32 %v3_9bd8, i32* %v3_9be0, align 4
  %v0_9be4 = load i32, i32* %r2.global-to-local, align 4
  %v1_9be4 = or i32 %v0_9be4, 1
  store i32 %v1_9be4, i32* %r2.global-to-local, align 4
  %v0_9be8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9be8 = add i32 %v0_9be8, 4
  %v2_9be8 = inttoptr i32 %v1_9be8 to i32*
  %v3_9be8 = load i32, i32* %v2_9be8, align 4
  store i32 %v3_9be8, i32* %r1.global-to-local, align 4
  %v1_9bec = add i32 %v0_9be8, 14
  %v2_9bec = inttoptr i32 %v1_9bec to i16*
  %v3_9bec = load i16, i16* %v2_9bec, align 2
  %v4_9bec = zext i16 %v3_9bec to i32
  store i32 %v4_9bec, i32* %r3.global-to-local, align 4
  %v1_9bf0 = trunc i32 %v1_9be4 to i8
  %v2_9bf0 = load i32, i32* @fp, align 4
  %v3_9bf0 = add i32 %v2_9bf0, 13
  %v4_9bf0 = inttoptr i32 %v3_9bf0 to i8*
  store i8 %v1_9bf0, i8* %v4_9bf0, align 1
  %v0_9bf4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9bf4 = trunc i32 %v0_9bf4 to i16
  %v2_9bf4 = load i32, i32* @fp, align 4
  %v3_9bf4 = add i32 %v2_9bf4, 2
  %v4_9bf4 = inttoptr i32 %v3_9bf4 to i16*
  store i16 %v1_9bf4, i16* %v4_9bf4, align 2
  %v0_9bf8 = load i32, i32* @fp, align 4
  %v1_9bf8 = add i32 %v0_9bf8, 12
  %v2_9bf8 = inttoptr i32 %v1_9bf8 to i8*
  %v3_9bf8 = load i8, i8* %v2_9bf8, align 1
  %v4_9bf8 = zext i8 %v3_9bf8 to i32
  store i32 %v4_9bf8, i32* %r3.global-to-local, align 4
  %v1_9bfc = add i32 %v0_9bf8, 13
  %v2_9bfc = inttoptr i32 %v1_9bfc to i8*
  %v3_9bfc = load i8, i8* %v2_9bfc, align 1
  %v4_9bfc = zext i8 %v3_9bfc to i32
  %tmp85 = urem i8 %v3_9bf8, 16
  %v1_9c00 = zext i8 %tmp85 to i32
  %v1_9c04 = or i32 %v1_9c00, 128
  store i32 %v1_9c04, i32* %r3.global-to-local, align 4
  %v1_9c08 = or i32 %v4_9bfc, 16
  store i32 %v1_9c08, i32* %r2.global-to-local, align 4
  %v0_9c0c = load i32, i32* %r1.global-to-local, align 4
  %v2_9c0c = add i32 %v0_9bf8, 8
  %v3_9c0c = inttoptr i32 %v2_9c0c to i32*
  store i32 %v0_9c0c, i32* %v3_9c0c, align 4
  %v0_9c10 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c10 = trunc i32 %v0_9c10 to i8
  %v2_9c10 = load i32, i32* @fp, align 4
  %v3_9c10 = add i32 %v2_9c10, 12
  %v4_9c10 = inttoptr i32 %v3_9c10 to i8*
  store i8 %v1_9c10, i8* %v4_9c10, align 1
  %v0_9c14 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c14 = trunc i32 %v0_9c14 to i8
  %v2_9c14 = load i32, i32* @fp, align 4
  %v3_9c14 = add i32 %v2_9c14, 13
  %v4_9c14 = inttoptr i32 %v3_9c14 to i8*
  store i8 %v1_9c14, i8* %v4_9c14, align 1
  %v0_9c18 = call i32 @function_d1c4()
  %v1_9c18 = trunc i32 %v0_9c18 to i16
  store i32 %v1_9604, i32* %r1.global-to-local, align 4
  %v0_9c20 = load i32, i32* @fp, align 4
  %v1_9c20 = add i32 %v0_9c20, 13
  %v2_9c20 = inttoptr i32 %v1_9c20 to i8*
  %v3_9c20 = load i8, i8* %v2_9c20, align 1
  %v4_9c20 = zext i8 %v3_9c20 to i32
  store i32 %v1_9c24, i32* %r2.global-to-local, align 4
  %v1_9c28 = and i32 %v4_9c20, 223
  %v5_9c2c = or i32 %v1_9c28, %v4_9c2c
  store i32 %v5_9c2c, i32* %r3.global-to-local, align 4
  %v1_9c30 = trunc i32 %v5_9c2c to i8
  store i8 %v1_9c30, i8* %v2_9c20, align 1
  store i32 %v1_9624, i32* %r1.global-to-local, align 4
  %v0_9c38 = load i32, i32* @fp, align 4
  %v1_9c38 = add i32 %v0_9c38, 13
  %v2_9c38 = inttoptr i32 %v1_9c38 to i8*
  %v3_9c38 = load i8, i8* %v2_9c38, align 1
  %v4_9c38 = zext i8 %v3_9c38 to i32
  store i32 %v1_9c3c, i32* %r3.global-to-local, align 4
  %v1_9c40 = and i32 %v4_9c38, 239
  %v5_9c44 = or i32 %v1_9c40, %v4_9c44
  store i32 %v5_9c44, i32* %r2.global-to-local, align 4
  %v1_9c48 = trunc i32 %v5_9c44 to i8
  store i8 %v1_9c48, i8* %v2_9c38, align 1
  store i32 %v1_9644, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @fp, align 4
  %v1_9c50 = add i32 %v0_9c50, 13
  %v2_9c50 = inttoptr i32 %v1_9c50 to i8*
  %v3_9c50 = load i8, i8* %v2_9c50, align 1
  %v4_9c50 = zext i8 %v3_9c50 to i32
  store i32 %v1_9c54, i32* %r2.global-to-local, align 4
  %v1_9c58 = and i32 %v4_9c50, 247
  %v5_9c5c = or i32 %v1_9c58, %v4_9c5c
  store i32 %v5_9c5c, i32* %r3.global-to-local, align 4
  %v1_9c60 = trunc i32 %v5_9c5c to i8
  store i8 %v1_9c60, i8* %v2_9c50, align 1
  store i32 %v1_9664, i32* %r1.global-to-local, align 4
  %v0_9c68 = load i32, i32* @fp, align 4
  %v1_9c68 = add i32 %v0_9c68, 13
  %v2_9c68 = inttoptr i32 %v1_9c68 to i8*
  %v3_9c68 = load i8, i8* %v2_9c68, align 1
  %v4_9c68 = zext i8 %v3_9c68 to i32
  store i32 %v1_9c6c, i32* %r3.global-to-local, align 4
  %v1_9c70 = and i32 %v4_9c68, 251
  %v5_9c74 = or i32 %v1_9c70, %v4_9c74
  store i32 %v5_9c74, i32* %r2.global-to-local, align 4
  %v1_9c78 = trunc i32 %v5_9c74 to i8
  store i8 %v1_9c78, i8* %v2_9c68, align 1
  store i32 %v1_9684, i32* %r1.global-to-local, align 4
  %v0_9c80 = load i32, i32* @fp, align 4
  %v1_9c80 = add i32 %v0_9c80, 13
  %v2_9c80 = inttoptr i32 %v1_9c80 to i8*
  %v3_9c80 = load i8, i8* %v2_9c80, align 1
  %v4_9c80 = zext i8 %v3_9c80 to i32
  store i32 %v1_9c84, i32* %r2.global-to-local, align 4
  %v1_9c88 = and i32 %v4_9c80, 253
  %v4_9c8c = or i32 %v1_9c88, %v3_9c8c
  store i32 %v4_9c8c, i32* %r3.global-to-local, align 4
  %v1_9c90 = trunc i32 %v4_9c8c to i8
  store i8 %v1_9c90, i8* %v2_9c80, align 1
  store i32 %v1_96a4, i32* %r1.global-to-local, align 4
  %v0_9c98 = load i32, i32* @fp, align 4
  %v1_9c98 = add i32 %v0_9c98, 13
  %v2_9c98 = inttoptr i32 %v1_9c98 to i8*
  %v3_9c98 = load i8, i8* %v2_9c98, align 1
  %v4_9c98 = zext i8 %v3_9c98 to i32
  %v1_9ca0 = and i32 %v4_9c98, 254
  store i32 %v1_9ca0, i32* %r2.global-to-local, align 4
  %v2_9ca4 = or i32 %v1_9ca0, %v1_9c9c
  store i32 %v2_9ca4, i32* @r3, align 4
  %v1_9ca8 = trunc i32 %v2_9ca4 to i8
  store i8 %v1_9ca8, i8* %v2_9c98, align 1
  %v3_9cac = load i32, i32* @fp, align 4
  %v4_9cac = add i32 %v3_9cac, 14
  %v5_9cac = inttoptr i32 %v4_9cac to i16*
  store i16 %v1_9c18, i16* %v5_9cac, align 2
  store i32 %v6_96bc, i32* %r1.global-to-local, align 4
  %v0_9cb4 = load i32, i32* @r4, align 4
  %v2_9cb8 = call i32 @function_d288(i32 %v0_9cb4, i32 %v6_96bc)
  store i32 %v6_96bc, i32* %r2.global-to-local, align 4
  %v2_9cc4 = load i32, i32* @r4, align 4
  %v4_9cc4 = add i32 %v2_9cc4, %v6_96bc
  %v5_9cc4 = inttoptr i32 %v4_9cc4 to i8*
  store i8 0, i8* %v5_9cc4, align 1
  %v3_9cc8 = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_9cd0 = add i32 %v3_9cc8, 1
  store i32 %v1_9cd0, i32* %r3.global-to-local, align 4
  %v9_9cd4 = icmp eq i32 %v1_9cd0, %arg2
  store i1 %v9_9cd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9cd0, i32* %stack_var_-44, align 4
  %v8_9cdc = icmp slt i32 %v1_9cd0, %arg2
  br i1 %v8_9cdc, label %dec_label_pc_9754, label %dec_label_pc_98e4.preheader

dec_label_pc_9ce4:                                ; preds = %dec_label_pc_9ad0
  %v1_9ce8 = call i32 @function_114e0(i32 16384)
  %v2_9ce8 = trunc i32 %v1_9ce8 to i16
  %v3_9cec = load i32, i32* @r5, align 4
  %v4_9cec = add i32 %v3_9cec, 6
  %v5_9cec = inttoptr i32 %v4_9cec to i16*
  store i16 %v2_9ce8, i16* %v5_9cec, align 2
  %v2_9bac.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9ba8

; uselistorder directives
  uselistorder i32 %v1_9cd0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9abc, { 1, 2, 0 }
  uselistorder i32 %v1_9a80, { 1, 0 }
  uselistorder i32 %v1_99e4, { 1, 2, 0, 3 }
  uselistorder i32 %v5_99ac, { 1, 0 }
  uselistorder i32 %v3_9938, { 1, 0 }
  uselistorder i1 %v3_9a08, { 1, 0 }
  uselistorder i32 %v1_9900, { 1, 0 }
  uselistorder i32 %v1_98d4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_98bc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_9848, { 1, 0 }
  uselistorder i32 %v0_9840, { 0, 2, 1, 3 }
  uselistorder i1 %v9_9870, { 1, 0 }
  uselistorder i32 %v4_9884, { 1, 0 }
  uselistorder i32 %v0_9ad4, { 2, 1, 4, 0, 3 }
  uselistorder i32 %v4_97b8, { 1, 0 }
  uselistorder i1 %v7_97b0, { 1, 0, 2 }
  uselistorder i1 %v7_9764, { 1, 0 }
  uselistorder i32 %v3_9760, { 1, 2, 0 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i32 %v1_9c84, { 1, 0 }
  uselistorder i32 %v1_9c6c, { 1, 0 }
  uselistorder i32 %v1_9c54, { 1, 0 }
  uselistorder i32 %v1_9c3c, { 1, 0 }
  uselistorder i32 %v1_9c24, { 1, 0 }
  uselistorder i32 %v3_987c, { 0, 2, 1 }
  uselistorder i1 %v2_9898, { 1, 0 }
  uselistorder i32 %v1_9894, { 1, 0 }
  uselistorder i32 %v4_9890, { 2, 0, 1 }
  uselistorder i1 %v3_9a90, { 1, 0, 2, 3 }
  uselistorder i32 %v2_979c, { 2, 1, 0 }
  uselistorder i1 %v2_9744, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9740, { 1, 2, 3, 0 }
  uselistorder i1 %v7_9730, { 1, 0 }
  uselistorder i1 %v7_9704, { 1, 0 }
  uselistorder i32 %v3_9700, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_96ec, { 2, 1, 0 }
  uselistorder i32 %v1_96dc, { 2, 1, 0 }
  uselistorder i32 %v6_96bc, { 1, 7, 6, 5, 8, 2, 11, 10, 9, 12, 4, 3, 0 }
  uselistorder i32 %v3_95e4, { 1, 3, 0, 4, 2 }
  uselistorder i32 %v5_9580, { 0, 2, 1 }
  uselistorder i32 %v2_9544, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 18, 19 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 38, 29, 30, 31, 32, 33, 35, 36, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 53, 55, 57, 56, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 7, 8, 6, 9, 10, 11, 12, 13, 14, 16, 0, 17, 18, 15, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg3, { 0, 2, 4, 1, 3, 5 }
  uselistorder i32 %arg2, { 1, 2, 7, 3, 4, 9, 5, 6, 8, 0, 10, 11, 12, 13 }
  uselistorder label %dec_label_pc_9ba8, { 1, 0 }
  uselistorder label %dec_label_pc_9a48, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %dec_label_pc_9918, { 1, 0 }
  uselistorder label %dec_label_pc_98e4, { 1, 0 }
  uselistorder label %dec_label_pc_98e4.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9810, { 2, 1, 3, 0 }
  uselistorder label %bb63, { 1, 0 }
  uselistorder label %dec_label_pc_9770, { 1, 0 }
}

define i32 @function_9cf8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9cf8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9cf8 = load i32, i32* @r4, align 4
  %v27_9cf8 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_9d24 = call i32 @function_fea0(i32 %arg2, i32 4)
  %v0_9d28 = load i32, i32* @r4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_9d34 = load i32, i32* @sl, align 4
  store i32 %v0_9d34, i32* %r3.global-to-local, align 4
  %v0_9d38 = load i32, i32* @r5, align 4
  %v5_9d3c = inttoptr i32 %v0_9d28 to i32*
  %v6_9d3c = call i32 @function_8294(i32 %v0_9d38, i32* %v5_9d3c, i32 2, i32 %v0_9d34, i32 %v2_9d24)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9d54 = load i32, i32* @r4, align 4
  %v0_9d58 = load i32, i32* @r5, align 4
  %v5_9d5c = trunc i32 %v6_9d3c to i8
  %v6_9d60 = inttoptr i32 %v0_9d54 to i32*
  %v7_9d60 = call i32 @function_8294(i32 %v0_9d58, i32* %v6_9d60, i32 3, i32 65535, i32 %v6_9d3c)
  %v0_9d64 = load i32, i32* @r4, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_9d74 = load i32, i32* @r5, align 4
  %v5_9d78 = inttoptr i32 %v0_9d64 to i32*
  %v6_9d78 = call i32 @function_8294(i32 %v0_9d74, i32* %v5_9d78, i32 4, i32 64, i32 %v7_9d60)
  %v0_9d84 = load i32, i32* @r4, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_9d8c = load i32, i32* @sl, align 4
  store i32 %v0_9d8c, i32* %r3.global-to-local, align 4
  %v0_9d90 = load i32, i32* @r5, align 4
  %sext = mul i32 %v6_9d78, 16777216
  %v5_9d98 = sdiv i32 %sext, 16777216
  %v6_9d98 = inttoptr i32 %v0_9d84 to i32*
  %v7_9d98 = call i32 @function_8294(i32 %v0_9d90, i32* %v6_9d98, i32 5, i32 %v0_9d8c, i32 %v5_9d98)
  %v1_9da4 = urem i32 %v7_9d98, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9db0 = load i32, i32* @r4, align 4
  %v0_9db4 = load i32, i32* @r5, align 4
  %v5_9dbc = inttoptr i32 %v0_9db0 to i32*
  %v6_9dbc = call i32 @function_8294(i32 %v0_9db4, i32* %v5_9dbc, i32 6, i32 65535, i32 %v1_9da4)
  %v0_9dc8 = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9dd4 = load i32, i32* @r5, align 4
  %v5_9dd8 = inttoptr i32 %v0_9dc8 to i32*
  %v6_9dd8 = call i32 @function_8294(i32 %v0_9dd4, i32* %v5_9dd8, i32 7, i32 65535, i32 %v6_9dbc)
  %v0_9de4 = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9df0 = load i32, i32* @r5, align 4
  %v5_9df4 = inttoptr i32 %v0_9de4 to i32*
  %v6_9df4 = call i32 @function_8294(i32 %v0_9df0, i32* %v5_9df4, i32 16, i32 65535, i32 %v6_9dd8)
  %v0_9e00 = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_9e0c = load i32, i32* @r5, align 4
  %v5_9e10 = inttoptr i32 %v0_9e00 to i32*
  %v6_9e10 = call i32 @function_8294(i32 %v0_9e0c, i32* %v5_9e10, i32 17, i32 65535, i32 %v6_9df4)
  %v0_9e14 = load i32, i32* @r4, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9e20 = load i32, i32* @sl, align 4
  store i32 %v0_9e20, i32* %r3.global-to-local, align 4
  %v0_9e24 = load i32, i32* @r5, align 4
  %v5_9e28 = inttoptr i32 %v0_9e14 to i32*
  %v6_9e28 = call i32 @function_8294(i32 %v0_9e24, i32* %v5_9e28, i32 10, i32 %v0_9e20, i32 %v6_9e10)
  %v0_9e2c = load i32, i32* @r4, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9e3c = load i32, i32* @r5, align 4
  %v5_9e40 = inttoptr i32 %v0_9e2c to i32*
  %v6_9e40 = call i32 @function_8294(i32 %v0_9e3c, i32* %v5_9e40, i32 11, i32 1, i32 %v6_9e28)
  %v0_9e44 = load i32, i32* @r4, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_9e50 = load i32, i32* @sl, align 4
  store i32 %v0_9e50, i32* %r3.global-to-local, align 4
  %v0_9e54 = load i32, i32* @r5, align 4
  %v5_9e58 = inttoptr i32 %v0_9e44 to i32*
  %v6_9e58 = call i32 @function_8294(i32 %v0_9e54, i32* %v5_9e58, i32 12, i32 %v0_9e50, i32 %v6_9e40)
  %v0_9e5c = load i32, i32* @r4, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_9e68 = load i32, i32* @sl, align 4
  store i32 %v0_9e68, i32* %r3.global-to-local, align 4
  %v0_9e6c = load i32, i32* @r5, align 4
  %v5_9e70 = inttoptr i32 %v0_9e5c to i32*
  %v6_9e70 = call i32 @function_8294(i32 %v0_9e6c, i32* %v5_9e70, i32 13, i32 %v0_9e68, i32 %v6_9e58)
  %v0_9e74 = load i32, i32* @r4, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_9e80 = load i32, i32* @sl, align 4
  store i32 %v0_9e80, i32* %r3.global-to-local, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v5_9e88 = inttoptr i32 %v0_9e74 to i32*
  %v6_9e88 = call i32 @function_8294(i32 %v0_9e84, i32* %v5_9e88, i32 14, i32 %v0_9e80, i32 %v6_9e70)
  %v0_9e8c = load i32, i32* @r4, align 4
  %v0_9e90 = load i32, i32* @sl, align 4
  store i32 %v0_9e90, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v6_9e88, i32* @fp, align 4
  %v0_9e9c = load i32, i32* @r5, align 4
  %v5_9ea0 = inttoptr i32 %v0_9e8c to i32*
  %v6_9ea0 = call i32 @function_8294(i32 %v0_9e9c, i32* %v5_9ea0, i32 15, i32 %v0_9e90, i32 ptrtoint (i32* @0 to i32))
  %v0_9ea4 = load i32, i32* @r4, align 4
  %v0_9ea8 = load i32, i32* @sl, align 4
  store i32 %v0_9ea8, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9ea0, i32* @sb, align 4
  %v0_9eb4 = load i32, i32* @r5, align 4
  %v5_9eb8 = inttoptr i32 %v0_9ea4 to i32*
  %v6_9eb8 = call i32 @function_8294(i32 %v0_9eb4, i32* %v5_9eb8, i32 %v0_9ea8, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ec4 = load i32, i32* @r4, align 4
  store i32 %v6_9eb8, i32* @r7, align 4
  %v0_9ecc = load i32, i32* @r5, align 4
  %v5_9ed0 = inttoptr i32 %v0_9ec4 to i32*
  %v6_9ed0 = call i32 @function_8294(i32 %v0_9ecc, i32* %v5_9ed0, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_9edc = load i32, i32* @global_var_1f644.44, align 4
  store i32 %v2_9edc, i32* %r3.global-to-local, align 4
  %v1_9ee0 = urem i32 %v6_9ed0, 256
  %v0_9ee4 = load i32, i32* @r4, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v5_9ef4 = inttoptr i32 %v0_9ee4 to i32*
  %v6_9ef4 = call i32 @function_8228(i32 %v0_9eec, i32* %v5_9ef4, i32 19, i32 %v2_9edc, i32 %v1_9ee0)
  %v0_9efc = load i32, i32* @sl, align 4
  %v1_9f00 = inttoptr i32 %v0_9efc to i32*
  %v2_9f00 = call i32 @function_126dc(i32* %v1_9f00)
  %v1_9f04 = load i32, i32* @r6, align 4
  %v2_9f04 = add i32 %v1_9f04, %v2_9f00
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9f18 = call i32 @function_117e8(i32 2, i32 3, i32 6)
  store i32 %v3_9f18, i32* @r0, align 4
  %v7_9f1c = icmp eq i32 %v3_9f18, -1
  store i1 %v7_9f1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f1c, label %dec_label_pc_a3cc, label %dec_label_pc_9f28

dec_label_pc_9f28:                                ; preds = %dec_label_pc_9cf8
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9f30 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9f30, i32* %r3.global-to-local, align 4
  store i32 4, i32* @ip, align 4
  %v0_9f38 = load i32, i32* @sl, align 4
  store i32 3, i32* @r2, align 4
  %v5_9f44 = call i32 @function_11778(i32 %v3_9f18, i32 %v0_9f38, i32 3, i32 %v6_9f30, i32 4)
  %v7_9f48 = icmp eq i32 %v5_9f44, -1
  store i1 %v7_9f48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f48, label %dec_label_pc_a3c4, label %dec_label_pc_9f50

dec_label_pc_9f50:                                ; preds = %dec_label_pc_9f28
  %v3_9f6c = urem i32 %v7_9d60, 65536
  store i32 %v3_9f6c, i32* %r3.global-to-local, align 4
  %v3_9f70 = urem i32 %v6_9dbc, 65536
  store i32 %v3_9f70, i32* %r2.global-to-local, align 4
  %v3_9f74 = urem i32 %v6_9dd8, 65536
  %v2_9f78 = icmp eq i32 %arg2, 0
  store i1 %v2_9f78, i1* %cpsr_z.global-to-local, align 1
  %v0_9f88 = load i32, i32* @sl, align 4
  store i32 %v0_9f88, i32* %stack_var_-44, align 4
  br i1 %v2_9f78, label %dec_label_pc_a1ac.preheader, label %dec_label_pc_9f90

dec_label_pc_9f90:                                ; preds = %dec_label_pc_9f50
  %v3_9f98 = urem i32 %v6_9df4, 65536
  %v0_9f9c = load i32, i32* @r7, align 4
  %v3_9f9c = mul i32 %v0_9f9c, 65536
  %v1_9fa8 = add i32 %v3_9f9c, 2621440
  %v3_9fac = udiv i32 %v1_9fa8, 65536
  %v1_9fb0 = urem i32 %v6_9e28, 2
  store i32 %v6_9e58, i32* %r2.global-to-local, align 4
  store i32 %v0_9f88, i32* @r4, align 4
  %v1_9fd0 = urem i32 %v6_9e40, 2
  store i32 %v1_9fd0, i32* %r3.global-to-local, align 4
  %v1_9fd4 = urem i32 %v6_9e58, 2
  %v1_9fd8 = urem i32 %v6_9e70, 2
  %v0_9fdc = load i32, i32* @fp, align 4
  %v1_9fdc = urem i32 %v0_9fdc, 2
  store i32 %v1_9fdc, i32* @fp, align 4
  %v0_9fe0 = load i32, i32* @sb, align 4
  %v1_9fe0 = urem i32 %v0_9fe0, 2
  store i32 %v1_9fe0, i32* @sb, align 4
  %v1_9fe4 = urem i32 %v6_9e58, 256
  store i32 %v1_9fe4, i32* @sl, align 4
  %v2_a170 = icmp eq i32 %v1_9da4, 0
  %tmp = sub nsw i32 0, %v1_9fb0
  %v4_a04c = and i32 %tmp, 32
  %tmp51 = sub nsw i32 0, %v1_9fd0
  %v4_a060 = and i32 %tmp51, 16
  %tmp52 = sub nsw i32 0, %v1_9fd4
  %v4_a074 = and i32 %tmp52, 8
  %tmp53 = sub nsw i32 0, %v1_9fd8
  %v4_a088 = and i32 %tmp53, 4
  br label %dec_label_pc_a108

dec_label_pc_9ff8:                                ; preds = %dec_label_pc_a108, %dec_label_pc_a188
  %v2_9ffc = phi i32 [ %v0_a17c, %dec_label_pc_a108 ], [ %v2_9ffc.pre, %dec_label_pc_a188 ]
  %v3_9ffc = add i32 %v2_9ffc, 9
  %v4_9ffc = inttoptr i32 %v3_9ffc to i8*
  store i8 6, i8* %v4_9ffc, align 1
  %v3_a000 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a000, i32* %r2.global-to-local, align 4
  %v3_a008 = mul i32 %v3_a000, 32
  store i32 %v3_a008, i32* %r3.global-to-local, align 4
  %v1_a00c = load i32, i32* @r4, align 4
  %v2_a00c = add i32 %v1_a00c, 12
  %v3_a00c = inttoptr i32 %v2_a00c to i32*
  store i32 %v6_9ef4, i32* %v3_a00c, align 4
  %v0_a010 = load i32, i32* %r3.global-to-local, align 4
  %v1_a010 = load i32, i32* %r2.global-to-local, align 4
  %tmp54 = mul i32 %v1_a010, -8
  %v5_a010 = add i32 %v0_a010, %tmp54
  %v1_a014 = load i32, i32* @r8, align 4
  %v2_a014 = add i32 %v1_a014, %v5_a010
  store i32 %v2_a014, i32* %r3.global-to-local, align 4
  %v1_a018 = add i32 %v2_a014, 16
  %v2_a018 = inttoptr i32 %v1_a018 to i32*
  %v3_a018 = load i32, i32* %v2_a018, align 4
  store i32 %v3_a018, i32* %r2.global-to-local, align 4
  %v1_a020 = load i32, i32* @r4, align 4
  %v2_a020 = add i32 %v1_a020, 16
  %v3_a020 = inttoptr i32 %v2_a020 to i32*
  store i32 %v3_a018, i32* %v3_a020, align 4
  %v1_a024 = call i32 @function_114e0(i32 %v3_9f70)
  %v2_a024 = trunc i32 %v1_a024 to i16
  %v3_a028 = load i32, i32* @r4, align 4
  %v4_a028 = add i32 %v3_a028, 20
  %v5_a028 = inttoptr i32 %v4_a028 to i16*
  store i16 %v2_a024, i16* %v5_a028, align 2
  %v1_a030 = call i32 @function_114e0(i32 %v3_9f74)
  %v2_a030 = trunc i32 %v1_a030 to i16
  %v3_a034 = load i32, i32* @r5, align 4
  %v4_a034 = add i32 %v3_a034, 2
  %v5_a034 = inttoptr i32 %v4_a034 to i16*
  store i16 %v2_a030, i16* %v5_a034, align 2
  %v1_a03c = call i32 @function_114e0(i32 %v3_9f98)
  %v0_a040 = load i32, i32* @r5, align 4
  %v1_a040 = add i32 %v0_a040, 13
  %v2_a040 = inttoptr i32 %v1_a040 to i8*
  %v3_a040 = load i8, i8* %v2_a040, align 1
  %v4_a040 = zext i8 %v3_a040 to i32
  %v1_a048 = and i32 %v4_a040, 223
  %v5_a04c = or i32 %v1_a048, %v4_a04c
  store i32 %v5_a04c, i32* %r3.global-to-local, align 4
  %v1_a050 = trunc i32 %v5_a04c to i8
  store i8 %v1_a050, i8* %v2_a040, align 1
  %v0_a054 = load i32, i32* @r5, align 4
  %v1_a054 = add i32 %v0_a054, 13
  %v2_a054 = inttoptr i32 %v1_a054 to i8*
  %v3_a054 = load i8, i8* %v2_a054, align 1
  %v4_a054 = zext i8 %v3_a054 to i32
  store i32 %v1_9fd0, i32* %r3.global-to-local, align 4
  %v1_a05c = and i32 %v4_a054, 239
  %v5_a060 = or i32 %v1_a05c, %v4_a060
  store i32 %v5_a060, i32* %r2.global-to-local, align 4
  %v1_a064 = trunc i32 %v5_a060 to i8
  store i8 %v1_a064, i8* %v2_a054, align 1
  %v0_a068 = load i32, i32* @r5, align 4
  %v1_a068 = add i32 %v0_a068, 13
  %v2_a068 = inttoptr i32 %v1_a068 to i8*
  %v3_a068 = load i8, i8* %v2_a068, align 1
  %v4_a068 = zext i8 %v3_a068 to i32
  %v1_a070 = and i32 %v4_a068, 247
  %v5_a074 = or i32 %v1_a070, %v4_a074
  store i32 %v5_a074, i32* %r3.global-to-local, align 4
  %v1_a078 = trunc i32 %v5_a074 to i8
  store i8 %v1_a078, i8* %v2_a068, align 1
  %v0_a07c = load i32, i32* @r5, align 4
  %v1_a07c = add i32 %v0_a07c, 13
  %v2_a07c = inttoptr i32 %v1_a07c to i8*
  %v3_a07c = load i8, i8* %v2_a07c, align 1
  %v4_a07c = zext i8 %v3_a07c to i32
  store i32 %v1_9fd8, i32* %r3.global-to-local, align 4
  %v1_a084 = and i32 %v4_a07c, 251
  %v5_a088 = or i32 %v1_a084, %v4_a088
  store i32 %v5_a088, i32* %r2.global-to-local, align 4
  %v1_a08c = trunc i32 %v5_a088 to i8
  store i8 %v1_a08c, i8* %v2_a07c, align 1
  %v0_a090 = load i32, i32* @r5, align 4
  %v1_a090 = add i32 %v0_a090, 13
  %v2_a090 = inttoptr i32 %v1_a090 to i8*
  %v3_a090 = load i8, i8* %v2_a090, align 1
  %v4_a090 = zext i8 %v3_a090 to i32
  %v1_a094 = and i32 %v4_a090, 253
  %v1_a098 = load i32, i32* @fp, align 4
  %v3_a098 = mul i32 %v1_a098, 2
  %v4_a098 = or i32 %v3_a098, %v1_a094
  store i32 %v4_a098, i32* %r3.global-to-local, align 4
  %v1_a09c = trunc i32 %v4_a098 to i8
  store i8 %v1_a09c, i8* %v2_a090, align 1
  %v0_a0a0 = load i32, i32* @r5, align 4
  %v1_a0a0 = add i32 %v0_a0a0, 12
  %v2_a0a0 = inttoptr i32 %v1_a0a0 to i8*
  %v3_a0a0 = load i8, i8* %v2_a0a0, align 1
  %v4_a0a0 = zext i8 %v3_a0a0 to i32
  store i32 %v4_a0a0, i32* %r2.global-to-local, align 4
  %v1_a0a4 = add i32 %v0_a0a0, 13
  %v2_a0a4 = inttoptr i32 %v1_a0a4 to i8*
  %v3_a0a4 = load i8, i8* %v2_a0a4, align 1
  %v4_a0a4 = zext i8 %v3_a0a4 to i32
  %tmp55 = urem i8 %v3_a0a0, 16
  %v1_a0a8 = zext i8 %tmp55 to i32
  %v1_a0ac = and i32 %v4_a0a4, 254
  %v0_a0b0 = load i32, i32* @sb, align 4
  %v2_a0b0 = or i32 %v1_a0ac, %v0_a0b0
  store i32 %v2_a0b0, i32* %r3.global-to-local, align 4
  %v1_a0b4 = or i32 %v1_a0a8, 80
  store i32 %v1_a0b4, i32* %r2.global-to-local, align 4
  %v1_a0b8 = trunc i32 %v2_a0b0 to i8
  store i8 %v1_a0b8, i8* %v2_a0a4, align 1
  %v0_a0bc = load i32, i32* %r2.global-to-local, align 4
  %v1_a0bc = trunc i32 %v0_a0bc to i8
  %v2_a0bc = load i32, i32* @r5, align 4
  %v3_a0bc = add i32 %v2_a0bc, 12
  %v4_a0bc = inttoptr i32 %v3_a0bc to i8*
  store i8 %v1_a0bc, i8* %v4_a0bc, align 1
  %v1_a0c0 = load i32, i32* @r5, align 4
  %v2_a0c0 = add i32 %v1_a0c0, 4
  %v3_a0c0 = inttoptr i32 %v2_a0c0 to i32*
  store i32 %v1_a03c, i32* %v3_a0c0, align 4
  %v0_a0c4 = call i32 @function_d1c4()
  %v1_a0c4 = trunc i32 %v0_a0c4 to i16
  %v0_a0c8 = load i32, i32* @sl, align 4
  %v2_a0c8 = icmp eq i32 %v0_a0c8, 0
  store i1 %v2_a0c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a0c8, label %.thread3, label %bb

bb:                                               ; preds = %dec_label_pc_9ff8
  %v1_a0cc = load i32, i32* @r5, align 4
  %v2_a0cc = add i32 %v1_a0cc, 13
  %v3_a0cc = inttoptr i32 %v2_a0cc to i8*
  %v4_a0cc = load i8, i8* %v3_a0cc, align 1
  %v5_a0cc = zext i8 %v4_a0cc to i32
  %v2_a0d0 = or i32 %v5_a0cc, 8
  store i32 %v2_a0d0, i32* @r3, align 4
  %v2_a0d4 = trunc i32 %v2_a0d0 to i8
  store i8 %v2_a0d4, i8* %v3_a0cc, align 1
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_9ff8, %bb
  %v3_a0d8 = load i32, i32* @r5, align 4
  %v4_a0d8 = add i32 %v3_a0d8, 14
  %v5_a0d8 = inttoptr i32 %v4_a0d8 to i16*
  store i16 %v1_a0c4, i16* %v5_a0d8, align 2
  %v0_a0dc = load i32, i32* @r7, align 4
  %v0_a0e0 = load i32, i32* @r6, align 4
  %v2_a0e4 = call i32 @function_d288(i32 %v0_a0e0, i32 %v0_a0dc)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a0ec = load i32, i32* @r6, align 4
  %v3_a0ec = load i32, i32* @r7, align 4
  %v4_a0ec = add i32 %v3_a0ec, %v2_a0ec
  %v5_a0ec = inttoptr i32 %v4_a0ec to i8*
  store i8 0, i8* %v5_a0ec, align 1
  %v3_a0f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a0f0, i32* %r2.global-to-local, align 4
  %v1_a0f8 = add i32 %v3_a0f0, 1
  store i32 %v1_a0f8, i32* @r4, align 4
  %v9_a0fc = icmp eq i32 %v1_a0f8, %arg2
  store i1 %v9_a0fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a0f8, i32* %stack_var_-44, align 4
  %v6_a104 = icmp slt i32 %v1_a0f8, %arg2
  br i1 %v6_a104, label %dec_label_pc_a108, label %dec_label_pc_a1ac.preheader

dec_label_pc_a1ac.preheader:                      ; preds = %.thread3, %dec_label_pc_9f50
  %v2_a1e0 = icmp eq i32 %v6_9ef4, -1
  %v7_a1e0 = icmp eq i32 %v6_9ef4, -1
  %v3_a338 = icmp eq i32 %v3_9f6c, 65535
  %v2_a3a0 = icmp eq i32 %v1_9ee0, 0
  br label %dec_label_pc_a1ac

dec_label_pc_a108:                                ; preds = %.thread3, %dec_label_pc_9f90
  %v2_a114 = call i32 @function_fea0(i32 1510, i32 1)
  %v2_a11c = load i32, i32* @r4, align 4
  %v5_a11c = mul i32 %v2_a11c, 4
  %v6_a11c = add i32 %v5_a11c, %v2_9d24
  %v7_a11c = inttoptr i32 %v6_a11c to i32*
  store i32 %v2_a114, i32* %v7_a11c, align 4
  %v3_a120 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a120, i32* %r3.global-to-local, align 4
  %v4_a128 = mul i32 %v3_a120, 4
  %v5_a128 = add i32 %v4_a128, %v2_9d24
  %v6_a128 = inttoptr i32 %v5_a128 to i32*
  %v7_a128 = load i32, i32* %v6_a128, align 4
  store i32 %v7_a128, i32* @r4, align 4
  %v1_a12c = inttoptr i32 %v7_a128 to i8*
  %v2_a12c = load i8, i8* %v1_a12c, align 1
  %tmp56 = urem i8 %v2_a12c, 16
  %v1_a130 = zext i8 %tmp56 to i32
  %v1_a134 = or i32 %v1_a130, 64
  store i32 %v1_a134, i32* %r2.global-to-local, align 4
  %v1_a138 = trunc i32 %v1_a134 to i8
  store i8 %v1_a138, i8* %v1_a12c, align 1
  %v0_a13c = load i32, i32* @r4, align 4
  %v1_a13c = inttoptr i32 %v0_a13c to i8*
  %v2_a13c = load i8, i8* %v1_a13c, align 1
  %v3_a13c = zext i8 %v2_a13c to i32
  %v1_a140 = and i32 %v3_a13c, 240
  %v1_a144 = or i32 %v1_a140, 5
  store i32 %v1_a144, i32* %r3.global-to-local, align 4
  %v1_a148 = trunc i32 %v1_a144 to i8
  store i8 %v1_a148, i8* %v1_a13c, align 1
  %v2_a150 = load i32, i32* @r4, align 4
  %v3_a150 = add i32 %v2_a150, 1
  %v4_a150 = inttoptr i32 %v3_a150 to i8*
  store i8 %v5_9d5c, i8* %v4_a150, align 1
  %v1_a158 = call i32 @function_114e0(i32 %v3_9fac)
  %v2_a158 = trunc i32 %v1_a158 to i16
  %v3_a15c = load i32, i32* @r4, align 4
  %v4_a15c = add i32 %v3_a15c, 2
  %v5_a15c = inttoptr i32 %v4_a15c to i16*
  store i16 %v2_a158, i16* %v5_a15c, align 2
  %v1_a164 = call i32 @function_114e0(i32 %v3_9f6c)
  %v2_a164 = trunc i32 %v1_a164 to i16
  store i32 %v1_9da4, i32* %r2.global-to-local, align 4
  store i32 %v5_9d98, i32* %r3.global-to-local, align 4
  store i1 %v2_a170, i1* %cpsr_z.global-to-local, align 1
  %v3_a174 = load i32, i32* @r4, align 4
  %v4_a174 = add i32 %v3_a174, 4
  %v5_a174 = inttoptr i32 %v4_a174 to i16*
  store i16 %v2_a164, i16* %v5_a174, align 2
  %v0_a178 = load i32, i32* %r3.global-to-local, align 4
  %v1_a178 = trunc i32 %v0_a178 to i8
  %v2_a178 = load i32, i32* @r4, align 4
  %v3_a178 = add i32 %v2_a178, 8
  %v4_a178 = inttoptr i32 %v3_a178 to i8*
  store i8 %v1_a178, i8* %v4_a178, align 1
  %v0_a17c = load i32, i32* @r4, align 4
  %v1_a17c = add i32 %v0_a17c, 20
  store i32 %v1_a17c, i32* @r5, align 4
  %v1_a180 = add i32 %v0_a17c, 40
  store i32 %v1_a180, i32* @r6, align 4
  %v0_a184 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a184, label %dec_label_pc_9ff8, label %dec_label_pc_a188

dec_label_pc_a188:                                ; preds = %dec_label_pc_a108
  %v1_a18c = call i32 @function_114e0(i32 16384)
  %v2_a18c = trunc i32 %v1_a18c to i16
  %v3_a190 = load i32, i32* @r4, align 4
  %v4_a190 = add i32 %v3_a190, 6
  %v5_a190 = inttoptr i32 %v4_a190 to i16*
  store i16 %v2_a18c, i16* %v5_a190, align 2
  %v2_9ffc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9ff8

dec_label_pc_a198:                                ; preds = %dec_label_pc_a238, %dec_label_pc_a1ac
  %v2_a19c = call i32 @function_126dc(i32* null)
  %v9_a1a4 = icmp eq i32 %v2_9f04, %v2_a19c
  store i1 %v9_a1a4, i1* %cpsr_z.global-to-local, align 1
  %v5_a1a8 = icmp slt i32 %v2_9f04, %v2_a19c
  br i1 %v5_a1a8, label %dec_label_pc_a3cc, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a1ac.preheader, %dec_label_pc_a198
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 %v2_9f78, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9f78, label %dec_label_pc_a198, label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_a1ac
  %v0_a1c0 = load i32, i32* @r7, align 4
  %v3_a1c0 = mul i32 %v0_a1c0, 65536
  %v1_a1c4 = add i32 %v3_a1c0, 1310720
  store i32 %v1_a1c4, i32* %r3.global-to-local, align 4
  %v3_a1c8 = udiv i32 %v1_a1c4, 65536
  store i32 %v3_a1c8, i32* @fp, align 4
  %v1_a1d0 = add i32 %v0_a1c0, 20
  store i32 %v1_a1d0, i32* @sb, align 4
  %v1_a1d4 = add i32 %v0_a1c0, 40
  store i32 %v1_a1d4, i32* @sl, align 4
  br label %dec_label_pc_a2c8

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_a2c8
  store i32 %v6_9ef4, i32* %r2.global-to-local, align 4
  store i1 %v7_a1e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1e0, label %dec_label_pc_a328, label %dec_label_pc_a1e8

dec_label_pc_a1e8:                                ; preds = %dec_label_pc_a2ec, %dec_label_pc_a1dc
  store i32 %v3_9f6c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a338, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a338, label %dec_label_pc_a344, label %dec_label_pc_a1fc

dec_label_pc_a1fc:                                ; preds = %dec_label_pc_a328.dec_label_pc_a1fc_crit_edge, %dec_label_pc_a1e8
  %v1_a200 = phi i32 [ %v1_a200.pre, %dec_label_pc_a328.dec_label_pc_a1fc_crit_edge ], [ 65535, %dec_label_pc_a1e8 ]
  %v9_a200 = icmp eq i32 %v3_9f70, %v1_a200
  store i1 %v9_a200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a200, label %dec_label_pc_a358, label %dec_label_pc_a208

dec_label_pc_a208:                                ; preds = %dec_label_pc_a344, %dec_label_pc_a1fc
  %v1_a20c = phi i32 [ %v1_a350, %dec_label_pc_a344 ], [ %v1_a200, %dec_label_pc_a1fc ]
  %v9_a20c = icmp eq i32 %v3_9f74, %v1_a20c
  store i1 %v9_a20c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a20c, label %dec_label_pc_a36c, label %dec_label_pc_a214

dec_label_pc_a214:                                ; preds = %dec_label_pc_a358.dec_label_pc_a214_crit_edge, %dec_label_pc_a208
  %v1_a218 = phi i32 [ %v1_a218.pre, %dec_label_pc_a358.dec_label_pc_a214_crit_edge ], [ %v1_a20c, %dec_label_pc_a208 ]
  store i32 %v6_9df4, i32* %r2.global-to-local, align 4
  %v9_a218 = icmp eq i32 %v6_9df4, %v1_a218
  store i1 %v9_a218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a218, label %dec_label_pc_a380, label %dec_label_pc_a220

dec_label_pc_a220:                                ; preds = %dec_label_pc_a36c.dec_label_pc_a220_crit_edge, %dec_label_pc_a214
  %v1_a224 = phi i32 [ %v1_a224.pre, %dec_label_pc_a36c.dec_label_pc_a220_crit_edge ], [ %v1_a218, %dec_label_pc_a214 ]
  store i32 %v6_9e10, i32* @r3, align 4
  %v9_a224 = icmp eq i32 %v6_9e10, %v1_a224
  store i1 %v9_a224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a224, label %dec_label_pc_a394, label %dec_label_pc_a22c

dec_label_pc_a22c:                                ; preds = %dec_label_pc_a380, %dec_label_pc_a220
  store i1 %v2_a3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a3a0, label %dec_label_pc_a238, label %dec_label_pc_a3a8

dec_label_pc_a238:                                ; preds = %dec_label_pc_a22c, %dec_label_pc_a394, %dec_label_pc_a3a8
  %v2_a23c = load i32, i32* @r5, align 4
  %v3_a23c = add i32 %v2_a23c, 10
  %v4_a23c = inttoptr i32 %v3_a23c to i16*
  store i16 0, i16* %v4_a23c, align 2
  %v0_a240 = load i32, i32* @r5, align 4
  store i32 %v0_a240, i32* @r0, align 4
  %v2_a248 = call i32 @function_bd1c(i32 %v0_a240, i32 20)
  %v3_a248 = trunc i32 %v2_a248 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a250 = load i32, i32* @r5, align 4
  %v4_a250 = add i32 %v3_a250, 10
  %v5_a250 = inttoptr i32 %v4_a250 to i16*
  store i16 %v3_a248, i16* %v5_a250, align 2
  %v0_a254 = load i32, i32* %r2.global-to-local, align 4
  %v1_a254 = trunc i32 %v0_a254 to i16
  %v2_a254 = load i32, i32* @r6, align 4
  %v3_a254 = add i32 %v2_a254, 16
  %v4_a254 = inttoptr i32 %v3_a254 to i16*
  store i16 %v1_a254, i16* %v4_a254, align 2
  %v0_a258 = load i32, i32* @fp, align 4
  %v1_a25c = call i32 @function_114e0(i32 %v0_a258)
  %v0_a260 = load i32, i32* @r6, align 4
  store i32 %v0_a260, i32* @r1, align 4
  store i32 %v1_a25c, i32* %r2.global-to-local, align 4
  %v0_a268 = load i32, i32* @sb, align 4
  store i32 %v0_a268, i32* %r3.global-to-local, align 4
  %v0_a26c = load i32, i32* @r5, align 4
  %v4_a270 = call i32 @function_bd6c(i32 %v0_a26c, i32 %v0_a260, i32 %v1_a25c, i32 %v0_a268)
  %v5_a270 = trunc i32 %v4_a270 to i16
  %v3_a274 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a274, i32* %r3.global-to-local, align 4
  %v3_a278 = mul i32 %v3_a274, 32
  store i32 %v3_a278, i32* %lr.global-to-local, align 4
  %v3_a27c = load i32, i32* @r6, align 4
  %v4_a27c = add i32 %v3_a27c, 16
  %v5_a27c = inttoptr i32 %v4_a27c to i16*
  store i16 %v5_a270, i16* %v5_a27c, align 2
  %v0_a280 = load i32, i32* %lr.global-to-local, align 4
  %v1_a280 = load i32, i32* %r3.global-to-local, align 4
  %tmp57 = mul i32 %v1_a280, -8
  %v5_a280 = add i32 %v0_a280, %tmp57
  store i32 %v5_a280, i32* %lr.global-to-local, align 4
  %v0_a284 = load i32, i32* @r6, align 4
  %v1_a284 = add i32 %v0_a284, 2
  %v2_a284 = inttoptr i32 %v1_a284 to i16*
  %v3_a284 = load i16, i16* %v2_a284, align 2
  %v4_a284 = zext i16 %v3_a284 to i32
  store i32 %v4_a284, i32* @r6, align 4
  %v1_a288 = load i32, i32* @r8, align 4
  %v2_a288 = add i32 %v1_a288, %v5_a280
  store i32 %v2_a288, i32* @lr, align 4
  %v3_a28c = add i32 %v2_a288, 2
  %v4_a28c = inttoptr i32 %v3_a28c to i16*
  store i16 %v3_a284, i16* %v4_a28c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a298 = load i32, i32* @r5, align 4
  store i32 %v0_a298, i32* @r1, align 4
  store i32 %v3_9f18, i32* @r0, align 4
  %v0_a2a0 = load i32, i32* @sl, align 4
  store i32 %v0_a2a0, i32* @r2, align 4
  %v0_a2ac = call i32 @function_1172c()
  %v3_a2b0 = load i32, i32* %stack_var_-44, align 4
  %v1_a2b4 = add i32 %v3_a2b0, 1
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_a2bc = icmp eq i32 %v1_a2b4, %arg2
  store i1 %v9_a2bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a2b4, i32* %stack_var_-44, align 4
  %v6_a2c4 = icmp slt i32 %v1_a2b4, %arg2
  br i1 %v6_a2c4, label %dec_label_pc_a2c8, label %dec_label_pc_a198

dec_label_pc_a2c8:                                ; preds = %dec_label_pc_a238, %dec_label_pc_a1c0
  %v1_a2dc = phi i32 [ %v1_a2b4, %dec_label_pc_a238 ], [ 0, %dec_label_pc_a1c0 ]
  %v5_a2cc = mul i32 %v1_a2dc, 24
  %v1_a2d0 = load i32, i32* @r8, align 4
  %v2_a2d0 = add i32 %v1_a2d0, %v5_a2cc
  store i32 %v2_a2d0, i32* %r3.global-to-local, align 4
  %v1_a2d8 = add i32 %v2_a2d0, 20
  %v2_a2d8 = inttoptr i32 %v1_a2d8 to i8*
  %v3_a2d8 = load i8, i8* %v2_a2d8, align 1
  %v4_a2d8 = zext i8 %v3_a2d8 to i32
  store i32 %v4_a2d8, i32* %r2.global-to-local, align 4
  %v4_a2dc = mul i32 %v1_a2dc, 4
  %v5_a2dc = add i32 %v4_a2dc, %v2_9d24
  %v6_a2dc = inttoptr i32 %v5_a2dc to i32*
  %v7_a2dc = load i32, i32* %v6_a2dc, align 4
  store i32 %v7_a2dc, i32* @r5, align 4
  %v2_a2e0 = icmp ugt i8 %v3_a2d8, 30
  %v7_a2e0 = icmp eq i8 %v3_a2d8, 31
  store i1 %v7_a2e0, i1* %cpsr_z.global-to-local, align 1
  %v1_a2e4 = add i32 %v7_a2dc, 20
  store i32 %v1_a2e4, i32* @r6, align 4
  %v2_a2e8 = xor i1 %v7_a2e0, true
  %v3_a2e8 = and i1 %v2_a2e0, %v2_a2e8
  br i1 %v3_a2e8, label %dec_label_pc_a1dc, label %dec_label_pc_a2ec

dec_label_pc_a2ec:                                ; preds = %dec_label_pc_a2c8
  %v1_a2ec = add i32 %v2_a2d0, 16
  %v2_a2ec = inttoptr i32 %v1_a2ec to i32*
  %v3_a2ec = load i32, i32* %v2_a2ec, align 4
  %v1_a2f0 = call i32 @function_11664(i32 %v3_a2ec)
  store i32 %v1_a2f0, i32* %r4.global-to-local, align 4
  %v0_a2f8 = call i32 @function_d1c4()
  %v3_a2fc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a2fc, i32* %r2.global-to-local, align 4
  %v5_a304 = mul i32 %v3_a2fc, 24
  %v1_a308 = load i32, i32* @r8, align 4
  %v2_a308 = add i32 %v1_a308, %v5_a304
  store i32 %v2_a308, i32* %r3.global-to-local, align 4
  %v1_a30c = add i32 %v2_a308, 20
  %v2_a30c = inttoptr i32 %v1_a30c to i8*
  %v3_a30c = load i8, i8* %v2_a30c, align 1
  %v4_a30c = zext i8 %v3_a30c to i32
  store i32 %v4_a30c, i32* %r2.global-to-local, align 4
  %v0_a310 = load i32, i32* %r4.global-to-local, align 4
  %v7_a310 = lshr i32 %v0_a2f8, %v4_a30c
  %v8_a310 = add i32 %v7_a310, %v0_a310
  %v1_a314 = call i32 @function_114bc(i32 %v8_a310)
  store i32 %v6_9ef4, i32* %r2.global-to-local, align 4
  store i1 %v7_a1e0, i1* %cpsr_z.global-to-local, align 1
  %v1_a320 = load i32, i32* @r5, align 4
  %v2_a320 = add i32 %v1_a320, 16
  %v3_a320 = inttoptr i32 %v2_a320 to i32*
  store i32 %v1_a314, i32* %v3_a320, align 4
  br i1 %v2_a1e0, label %dec_label_pc_a328, label %dec_label_pc_a1e8

dec_label_pc_a328:                                ; preds = %dec_label_pc_a2ec, %dec_label_pc_a1dc
  %v0_a328 = call i32 @function_d1c4()
  store i32 %v3_9f6c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a338, i1* %cpsr_z.global-to-local, align 1
  %v1_a33c = load i32, i32* @r5, align 4
  %v2_a33c = add i32 %v1_a33c, 12
  %v3_a33c = inttoptr i32 %v2_a33c to i32*
  store i32 %v0_a328, i32* %v3_a33c, align 4
  br i1 %v3_a338, label %dec_label_pc_a344, label %dec_label_pc_a328.dec_label_pc_a1fc_crit_edge

dec_label_pc_a328.dec_label_pc_a1fc_crit_edge:    ; preds = %dec_label_pc_a328
  %v1_a200.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a1fc

dec_label_pc_a344:                                ; preds = %dec_label_pc_a328, %dec_label_pc_a1e8
  %v0_a344 = call i32 @function_d1c4()
  %v1_a344 = trunc i32 %v0_a344 to i16
  %v3_a348 = load i32, i32* @r5, align 4
  %v4_a348 = add i32 %v3_a348, 4
  %v5_a348 = inttoptr i32 %v4_a348 to i16*
  store i16 %v1_a344, i16* %v5_a348, align 2
  %v1_a350 = load i32, i32* @r4, align 4
  %v9_a350 = icmp eq i32 %v3_9f70, %v1_a350
  store i1 %v9_a350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a350, label %dec_label_pc_a358, label %dec_label_pc_a208

dec_label_pc_a358:                                ; preds = %dec_label_pc_a344, %dec_label_pc_a1fc
  %v0_a358 = call i32 @function_d1c4()
  %v1_a358 = trunc i32 %v0_a358 to i16
  %v1_a360 = load i32, i32* @r4, align 4
  %v9_a360 = icmp eq i32 %v3_9f74, %v1_a360
  store i1 %v9_a360, i1* %cpsr_z.global-to-local, align 1
  %v3_a364 = load i32, i32* @r5, align 4
  %v4_a364 = add i32 %v3_a364, 20
  %v5_a364 = inttoptr i32 %v4_a364 to i16*
  store i16 %v1_a358, i16* %v5_a364, align 2
  br i1 %v9_a360, label %dec_label_pc_a36c, label %dec_label_pc_a358.dec_label_pc_a214_crit_edge

dec_label_pc_a358.dec_label_pc_a214_crit_edge:    ; preds = %dec_label_pc_a358
  %v1_a218.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a214

dec_label_pc_a36c:                                ; preds = %dec_label_pc_a358, %dec_label_pc_a208
  %v0_a36c = call i32 @function_d1c4()
  %v1_a36c = trunc i32 %v0_a36c to i16
  store i32 %v6_9df4, i32* %r2.global-to-local, align 4
  %v1_a374 = load i32, i32* @r4, align 4
  %v9_a374 = icmp eq i32 %v6_9df4, %v1_a374
  store i1 %v9_a374, i1* %cpsr_z.global-to-local, align 1
  %v3_a378 = load i32, i32* @r6, align 4
  %v4_a378 = add i32 %v3_a378, 2
  %v5_a378 = inttoptr i32 %v4_a378 to i16*
  store i16 %v1_a36c, i16* %v5_a378, align 2
  br i1 %v9_a374, label %dec_label_pc_a380, label %dec_label_pc_a36c.dec_label_pc_a220_crit_edge

dec_label_pc_a36c.dec_label_pc_a220_crit_edge:    ; preds = %dec_label_pc_a36c
  %v1_a224.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a220

dec_label_pc_a380:                                ; preds = %dec_label_pc_a36c, %dec_label_pc_a214
  %v0_a380 = call i32 @function_d1c4()
  store i32 %v6_9e10, i32* @r3, align 4
  %v1_a388 = load i32, i32* @r4, align 4
  %v9_a388 = icmp eq i32 %v6_9e10, %v1_a388
  store i1 %v9_a388, i1* %cpsr_z.global-to-local, align 1
  %v1_a38c = load i32, i32* @r6, align 4
  %v2_a38c = add i32 %v1_a38c, 4
  %v3_a38c = inttoptr i32 %v2_a38c to i32*
  store i32 %v0_a380, i32* %v3_a38c, align 4
  br i1 %v9_a388, label %dec_label_pc_a394, label %dec_label_pc_a22c

dec_label_pc_a394:                                ; preds = %dec_label_pc_a380, %dec_label_pc_a220
  %v0_a394 = call i32 @function_d1c4()
  %v1_a398 = load i32, i32* @r6, align 4
  %v2_a398 = add i32 %v1_a398, 8
  %v3_a398 = inttoptr i32 %v2_a398 to i32*
  store i32 %v0_a394, i32* %v3_a398, align 4
  store i1 %v2_a3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a3a0, label %dec_label_pc_a238, label %dec_label_pc_a3a8

dec_label_pc_a3a8:                                ; preds = %dec_label_pc_a22c, %dec_label_pc_a394
  %v0_a3a8 = load i32, i32* @r5, align 4
  %v1_a3a8 = add i32 %v0_a3a8, 40
  store i32 %v1_a3a8, i32* @r4, align 4
  %v0_a3b0 = load i32, i32* @r7, align 4
  %v2_a3b4 = call i32 @function_d288(i32 %v1_a3a8, i32 %v0_a3b0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a3bc = load i32, i32* @r4, align 4
  %v3_a3bc = load i32, i32* @r7, align 4
  %v4_a3bc = add i32 %v3_a3bc, %v2_a3bc
  %v5_a3bc = inttoptr i32 %v4_a3bc to i8*
  store i8 0, i8* %v5_a3bc, align 1
  br label %dec_label_pc_a238

dec_label_pc_a3c4:                                ; preds = %dec_label_pc_9f28
  %v1_a3c8 = call i32 @function_12714(i32 %v3_9f18)
  br label %dec_label_pc_a3cc

dec_label_pc_a3cc:                                ; preds = %dec_label_pc_a198, %dec_label_pc_9cf8, %dec_label_pc_a3c4
  %v1_a3d4 = phi i32 [ %v3_9f18, %dec_label_pc_9cf8 ], [ %v1_a3c8, %dec_label_pc_a3c4 ], [ %v2_a19c, %dec_label_pc_a198 ]
  store i32 %v3_9cf8, i32* %r4.global-to-local, align 4
  store i32 %v27_9cf8, i32* %lr.global-to-local, align 4
  ret i32 %v1_a3d4

; uselistorder directives
  uselistorder i32 %v1_a350, { 1, 0 }
  uselistorder i32 %v1_a2b4, { 1, 2, 0, 3 }
  uselistorder i32 %v5_a280, { 1, 0 }
  uselistorder i32 %v0_a1c0, { 2, 1, 0 }
  uselistorder i32 %v0_a17c, { 1, 2, 0 }
  uselistorder i1 %v2_a3a0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a338, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a1e0, { 2, 1, 0 }
  uselistorder i32 %v1_a0f8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_9fd8, { 1, 0 }
  uselistorder i32 %v1_9fd0, { 2, 0, 1 }
  uselistorder i1 %v2_9f78, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9f6c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_9f48, { 1, 0 }
  uselistorder i1 %v7_9f1c, { 1, 0 }
  uselistorder i32 %v3_9f18, { 1, 3, 4, 2, 0, 5 }
  uselistorder i32 %v2_9f04, { 1, 0 }
  uselistorder i32 %v6_9ef4, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v6_9e10, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_9df4, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 10, 4, 5, 6, 7, 8, 9, 11, 22, 23, 24, 25, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 21, 22, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 17, 16, 20, 21, 18, 19, 22, 23, 24 }
  uselistorder i32 %arg2, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder label %dec_label_pc_a3cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a3a8, { 1, 0 }
  uselistorder label %dec_label_pc_a238, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a1ac, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_9ff8, { 1, 0 }
}

define i32 @function_a3dc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a3dc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a3dc = load i32, i32* @r4, align 4
  %v27_a3dc = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_a408 = call i32 @function_fea0(i32 %arg2, i32 4)
  %v0_a40c = load i32, i32* @r4, align 4
  store i32 %v0_a40c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a414 = load i32, i32* @r7, align 4
  store i32 %v0_a414, i32* %r3.global-to-local, align 4
  store i32 %v2_a408, i32* @fp, align 4
  %v0_a41c = load i32, i32* @r5, align 4
  %v5_a420 = inttoptr i32 %v0_a40c to i32*
  %v6_a420 = call i32 @function_8294(i32 %v0_a41c, i32* %v5_a420, i32 2, i32 %v0_a414, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a438 = load i32, i32* @r4, align 4
  store i32 %v0_a438, i32* %r1.global-to-local, align 4
  %v0_a43c = load i32, i32* @r5, align 4
  %v5_a440 = trunc i32 %v6_a420 to i8
  %v6_a444 = inttoptr i32 %v0_a438 to i32*
  %v7_a444 = call i32 @function_8294(i32 %v0_a43c, i32* %v6_a444, i32 3, i32 65535, i32 %v6_a420)
  %v0_a448 = load i32, i32* @r4, align 4
  store i32 %v0_a448, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a458 = load i32, i32* @r5, align 4
  %v5_a45c = inttoptr i32 %v0_a448 to i32*
  %v6_a45c = call i32 @function_8294(i32 %v0_a458, i32* %v5_a45c, i32 4, i32 64, i32 %v7_a444)
  %v0_a468 = load i32, i32* @r4, align 4
  store i32 %v0_a468, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a474 = load i32, i32* @r5, align 4
  %sext = mul i32 %v6_a45c, 16777216
  %v5_a47c = sdiv i32 %sext, 16777216
  %v6_a47c = inttoptr i32 %v0_a468 to i32*
  %v7_a47c = call i32 @function_8294(i32 %v0_a474, i32* %v6_a47c, i32 5, i32 1, i32 %v5_a47c)
  %v1_a488 = urem i32 %v7_a47c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a494 = load i32, i32* @r4, align 4
  store i32 %v0_a494, i32* %r1.global-to-local, align 4
  %v0_a498 = load i32, i32* @r5, align 4
  %v5_a4a0 = inttoptr i32 %v0_a494 to i32*
  %v6_a4a0 = call i32 @function_8294(i32 %v0_a498, i32* %v5_a4a0, i32 6, i32 65535, i32 %v1_a488)
  %v0_a4ac = load i32, i32* @r4, align 4
  store i32 %v0_a4ac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a4b8 = load i32, i32* @r5, align 4
  %v5_a4bc = inttoptr i32 %v0_a4ac to i32*
  %v6_a4bc = call i32 @function_8294(i32 %v0_a4b8, i32* %v5_a4bc, i32 7, i32 65535, i32 %v6_a4a0)
  %v0_a4c8 = load i32, i32* @r4, align 4
  store i32 %v0_a4c8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a4d4 = load i32, i32* @r5, align 4
  %v5_a4d8 = inttoptr i32 %v0_a4c8 to i32*
  %v6_a4d8 = call i32 @function_8294(i32 %v0_a4d4, i32* %v5_a4d8, i32 16, i32 65535, i32 %v6_a4bc)
  %v0_a4dc = load i32, i32* @r4, align 4
  store i32 %v0_a4dc, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a4e8 = load i32, i32* @r7, align 4
  store i32 %v0_a4e8, i32* %r3.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r5, align 4
  %v5_a4f0 = inttoptr i32 %v0_a4dc to i32*
  %v6_a4f0 = call i32 @function_8294(i32 %v0_a4ec, i32* %v5_a4f0, i32 17, i32 %v0_a4e8, i32 %v6_a4d8)
  %v0_a4f4 = load i32, i32* @r4, align 4
  store i32 %v0_a4f4, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a500 = load i32, i32* @r7, align 4
  store i32 %v0_a500, i32* %r3.global-to-local, align 4
  %v0_a504 = load i32, i32* @r5, align 4
  %v5_a508 = inttoptr i32 %v0_a4f4 to i32*
  %v6_a508 = call i32 @function_8294(i32 %v0_a504, i32* %v5_a508, i32 10, i32 %v0_a500, i32 %v6_a4f0)
  %v0_a50c = load i32, i32* @r4, align 4
  store i32 %v0_a50c, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_a518 = load i32, i32* @r7, align 4
  store i32 %v0_a518, i32* %r3.global-to-local, align 4
  %v0_a51c = load i32, i32* @r5, align 4
  %v5_a520 = inttoptr i32 %v0_a50c to i32*
  %v6_a520 = call i32 @function_8294(i32 %v0_a51c, i32* %v5_a520, i32 11, i32 %v0_a518, i32 %v6_a508)
  %v0_a524 = load i32, i32* @r4, align 4
  store i32 %v0_a524, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a530 = load i32, i32* @r7, align 4
  store i32 %v0_a530, i32* %r3.global-to-local, align 4
  %v0_a534 = load i32, i32* @r5, align 4
  %v5_a538 = inttoptr i32 %v0_a524 to i32*
  %v6_a538 = call i32 @function_8294(i32 %v0_a534, i32* %v5_a538, i32 12, i32 %v0_a530, i32 %v6_a520)
  %v0_a53c = load i32, i32* @r4, align 4
  store i32 %v0_a53c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_a548 = load i32, i32* @r7, align 4
  store i32 %v0_a548, i32* %r3.global-to-local, align 4
  %v0_a54c = load i32, i32* @r5, align 4
  %v5_a550 = inttoptr i32 %v0_a53c to i32*
  %v6_a550 = call i32 @function_8294(i32 %v0_a54c, i32* %v5_a550, i32 13, i32 %v0_a548, i32 %v6_a538)
  %v0_a554 = load i32, i32* @r4, align 4
  store i32 %v0_a554, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a564 = load i32, i32* @r5, align 4
  %v5_a568 = inttoptr i32 %v0_a554 to i32*
  %v6_a568 = call i32 @function_8294(i32 %v0_a564, i32* %v5_a568, i32 14, i32 1, i32 %v6_a550)
  %v0_a56c = load i32, i32* @r4, align 4
  store i32 %v0_a56c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_a578 = load i32, i32* @r7, align 4
  store i32 %v0_a578, i32* %r3.global-to-local, align 4
  %v0_a57c = load i32, i32* @r5, align 4
  %v5_a580 = inttoptr i32 %v0_a56c to i32*
  %v6_a580 = call i32 @function_8294(i32 %v0_a57c, i32* %v5_a580, i32 15, i32 %v0_a578, i32 %v6_a568)
  %v0_a588 = load i32, i32* @r4, align 4
  store i32 %v0_a588, i32* %r1.global-to-local, align 4
  %v2_a58c = load i32, i32* @global_var_1f644.44, align 4
  store i32 %v2_a58c, i32* %r3.global-to-local, align 4
  store i32 %v6_a580, i32* @r8, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_a598 = load i32, i32* @r5, align 4
  %v5_a59c = inttoptr i32 %v0_a588 to i32*
  %v6_a59c = call i32 @function_8228(i32 %v0_a598, i32* %v5_a59c, i32 19, i32 %v2_a58c, i32 ptrtoint (i32* @0 to i32))
  %v0_a5a4 = load i32, i32* @r7, align 4
  %v1_a5a8 = inttoptr i32 %v0_a5a4 to i32*
  %v2_a5a8 = call i32 @function_126dc(i32* %v1_a5a8)
  %v1_a5ac = load i32, i32* @r6, align 4
  %v2_a5ac = add i32 %v1_a5ac, %v2_a5a8
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a5c0 = call i32 @function_117e8(i32 2, i32 3, i32 6)
  store i32 %v3_a5c0, i32* @r0, align 4
  %v7_a5c4 = icmp eq i32 %v3_a5c0, -1
  store i1 %v7_a5c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a5c0, i32* @sb, align 4
  br i1 %v7_a5c4, label %dec_label_pc_aa78, label %dec_label_pc_a5d0

dec_label_pc_a5d0:                                ; preds = %dec_label_pc_a3dc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a5d8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a5d8, i32* %r3.global-to-local, align 4
  %v0_a5e0 = load i32, i32* @r7, align 4
  store i32 %v0_a5e0, i32* %r1.global-to-local, align 4
  store i32 3, i32* @r2, align 4
  %v5_a5ec = call i32 @function_11778(i32 %v3_a5c0, i32 %v0_a5e0, i32 3, i32 %v6_a5d8, i32 ptrtoint (i32* @0 to i32))
  %v7_a5f0 = icmp eq i32 %v5_a5ec, -1
  store i1 %v7_a5f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5f0, label %dec_label_pc_aa70, label %dec_label_pc_a5f8

dec_label_pc_a5f8:                                ; preds = %dec_label_pc_a5d0
  %v3_a610 = urem i32 %v6_a4bc, 65536
  %v3_a620 = urem i32 %v7_a444, 65536
  store i32 %v3_a620, i32* %r3.global-to-local, align 4
  %v3_a624 = urem i32 %v6_a4a0, 65536
  store i32 %v3_a624, i32* %r2.global-to-local, align 4
  %v1_a628 = urem i32 %v6_a508, 256
  store i32 %v1_a628, i32* %r1.global-to-local, align 4
  %v2_a62c = icmp eq i32 %arg2, 0
  store i1 %v2_a62c, i1* %cpsr_z.global-to-local, align 1
  %v0_a638 = load i32, i32* @r7, align 4
  store i32 %v0_a638, i32* %stack_var_-44, align 4
  br i1 %v2_a62c, label %dec_label_pc_a880.preheader, label %dec_label_pc_a644

dec_label_pc_a644:                                ; preds = %dec_label_pc_a5f8
  %v3_a64c = urem i32 %v6_a4d8, 65536
  %v1_a658 = urem i32 %v6_a508, 2
  %v1_a668 = urem i32 %v6_a520, 2
  %v1_a66c = urem i32 %v6_a538, 2
  store i32 %v1_a66c, i32* %r1.global-to-local, align 4
  %v1_a670 = urem i32 %v6_a550, 2
  store i32 %v1_a670, i32* %r2.global-to-local, align 4
  %v1_a674 = urem i32 %v6_a568, 2
  store i32 %v1_a674, i32* %r3.global-to-local, align 4
  %v0_a678 = load i32, i32* @r8, align 4
  %v1_a678 = urem i32 %v0_a678, 2
  store i32 %v1_a678, i32* @r8, align 4
  store i32 %v0_a638, i32* @r4, align 4
  %v2_a848 = icmp eq i32 %v1_a488, 0
  %tmp = sub nsw i32 0, %v1_a658
  %v4_a6ec = and i32 %tmp, 32
  %tmp50 = sub nsw i32 0, %v1_a668
  %v4_a700 = and i32 %tmp50, 16
  %tmp51 = sub nsw i32 0, %v1_a66c
  %v4_a714 = and i32 %tmp51, 8
  %tmp52 = sub nsw i32 0, %v1_a670
  %v4_a728 = and i32 %tmp52, 4
  %tmp53 = sub nsw i32 0, %v1_a674
  %v3_a73c = and i32 %tmp53, 2
  br label %dec_label_pc_a7ec

dec_label_pc_a698:                                ; preds = %dec_label_pc_a7ec, %dec_label_pc_a85c
  %v2_a69c = phi i32 [ %v0_a854, %dec_label_pc_a7ec ], [ %v2_a69c.pre, %dec_label_pc_a85c ]
  store i32 6, i32* @r6, align 4
  %v3_a69c = add i32 %v2_a69c, 9
  %v4_a69c = inttoptr i32 %v3_a69c to i8*
  store i8 6, i8* %v4_a69c, align 1
  %v3_a6a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a6a0, i32* %r2.global-to-local, align 4
  %v3_a6a8 = mul i32 %v3_a6a0, 32
  store i32 %v3_a6a8, i32* %r3.global-to-local, align 4
  %v1_a6ac = load i32, i32* @r8, align 4
  %v2_a6ac = add i32 %v1_a6ac, 12
  %v3_a6ac = inttoptr i32 %v2_a6ac to i32*
  store i32 %v6_a59c, i32* %v3_a6ac, align 4
  %v0_a6b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6b0 = load i32, i32* %r2.global-to-local, align 4
  %tmp54 = mul i32 %v1_a6b0, -8
  %v5_a6b0 = add i32 %v0_a6b0, %tmp54
  %v1_a6b4 = load i32, i32* @sl, align 4
  %v2_a6b4 = add i32 %v1_a6b4, %v5_a6b0
  store i32 %v2_a6b4, i32* %r3.global-to-local, align 4
  %v1_a6b8 = add i32 %v2_a6b4, 16
  %v2_a6b8 = inttoptr i32 %v1_a6b8 to i32*
  %v3_a6b8 = load i32, i32* %v2_a6b8, align 4
  store i32 %v3_a6b8, i32* %r2.global-to-local, align 4
  %v1_a6c0 = load i32, i32* @r8, align 4
  %v2_a6c0 = add i32 %v1_a6c0, 16
  %v3_a6c0 = inttoptr i32 %v2_a6c0 to i32*
  store i32 %v3_a6b8, i32* %v3_a6c0, align 4
  %v1_a6c4 = call i32 @function_114e0(i32 %v3_a624)
  %v2_a6c4 = trunc i32 %v1_a6c4 to i16
  %v3_a6c8 = load i32, i32* @r8, align 4
  %v4_a6c8 = add i32 %v3_a6c8, 20
  %v5_a6c8 = inttoptr i32 %v4_a6c8 to i16*
  store i16 %v2_a6c4, i16* %v5_a6c8, align 2
  %v1_a6d0 = call i32 @function_114e0(i32 %v3_a610)
  %v2_a6d0 = trunc i32 %v1_a6d0 to i16
  %v3_a6d4 = load i32, i32* @r7, align 4
  %v4_a6d4 = add i32 %v3_a6d4, 2
  %v5_a6d4 = inttoptr i32 %v4_a6d4 to i16*
  store i16 %v2_a6d0, i16* %v5_a6d4, align 2
  %v1_a6dc = call i32 @function_114e0(i32 %v3_a64c)
  %v0_a6e0 = load i32, i32* @r7, align 4
  %v1_a6e0 = add i32 %v0_a6e0, 13
  %v2_a6e0 = inttoptr i32 %v1_a6e0 to i8*
  %v3_a6e0 = load i8, i8* %v2_a6e0, align 1
  %v4_a6e0 = zext i8 %v3_a6e0 to i32
  store i32 %v1_a658, i32* %r1.global-to-local, align 4
  %v1_a6e8 = and i32 %v4_a6e0, 223
  %v5_a6ec = or i32 %v1_a6e8, %v4_a6ec
  store i32 %v5_a6ec, i32* %r3.global-to-local, align 4
  %v1_a6f0 = trunc i32 %v5_a6ec to i8
  store i8 %v1_a6f0, i8* %v2_a6e0, align 1
  %v0_a6f4 = load i32, i32* @r7, align 4
  %v1_a6f4 = add i32 %v0_a6f4, 13
  %v2_a6f4 = inttoptr i32 %v1_a6f4 to i8*
  %v3_a6f4 = load i8, i8* %v2_a6f4, align 1
  %v4_a6f4 = zext i8 %v3_a6f4 to i32
  store i32 %v1_a668, i32* %r3.global-to-local, align 4
  %v1_a6fc = and i32 %v4_a6f4, 239
  %v5_a700 = or i32 %v1_a6fc, %v4_a700
  store i32 %v5_a700, i32* %r2.global-to-local, align 4
  %v1_a704 = trunc i32 %v5_a700 to i8
  store i8 %v1_a704, i8* %v2_a6f4, align 1
  %v0_a708 = load i32, i32* @r7, align 4
  %v1_a708 = add i32 %v0_a708, 13
  %v2_a708 = inttoptr i32 %v1_a708 to i8*
  %v3_a708 = load i8, i8* %v2_a708, align 1
  %v4_a708 = zext i8 %v3_a708 to i32
  store i32 %v1_a66c, i32* %r1.global-to-local, align 4
  %v1_a710 = and i32 %v4_a708, 247
  %v5_a714 = or i32 %v1_a710, %v4_a714
  store i32 %v5_a714, i32* %r3.global-to-local, align 4
  %v1_a718 = trunc i32 %v5_a714 to i8
  store i8 %v1_a718, i8* %v2_a708, align 1
  %v0_a71c = load i32, i32* @r7, align 4
  %v1_a71c = add i32 %v0_a71c, 13
  %v2_a71c = inttoptr i32 %v1_a71c to i8*
  %v3_a71c = load i8, i8* %v2_a71c, align 1
  %v4_a71c = zext i8 %v3_a71c to i32
  store i32 %v1_a670, i32* %r3.global-to-local, align 4
  %v1_a724 = and i32 %v4_a71c, 251
  %v5_a728 = or i32 %v1_a724, %v4_a728
  store i32 %v5_a728, i32* %r2.global-to-local, align 4
  %v1_a72c = trunc i32 %v5_a728 to i8
  store i8 %v1_a72c, i8* %v2_a71c, align 1
  %v0_a730 = load i32, i32* @r7, align 4
  %v1_a730 = add i32 %v0_a730, 13
  %v2_a730 = inttoptr i32 %v1_a730 to i8*
  %v3_a730 = load i8, i8* %v2_a730, align 1
  %v4_a730 = zext i8 %v3_a730 to i32
  store i32 %v1_a674, i32* %r1.global-to-local, align 4
  %v1_a738 = and i32 %v4_a730, 253
  %v4_a73c = or i32 %v1_a738, %v3_a73c
  store i32 %v4_a73c, i32* %r3.global-to-local, align 4
  %v1_a740 = trunc i32 %v4_a73c to i8
  store i8 %v1_a740, i8* %v2_a730, align 1
  %v0_a744 = load i32, i32* @r7, align 4
  %v1_a744 = add i32 %v0_a744, 12
  %v2_a744 = inttoptr i32 %v1_a744 to i8*
  %v3_a744 = load i8, i8* %v2_a744, align 1
  %v4_a744 = zext i8 %v3_a744 to i32
  store i32 %v4_a744, i32* %r2.global-to-local, align 4
  %v1_a748 = add i32 %v0_a744, 13
  %v2_a748 = inttoptr i32 %v1_a748 to i8*
  %v3_a748 = load i8, i8* %v2_a748, align 1
  %v4_a748 = zext i8 %v3_a748 to i32
  store i32 %v1_a678, i32* %r1.global-to-local, align 4
  %tmp55 = urem i8 %v3_a744, 16
  %v1_a750 = zext i8 %tmp55 to i32
  %v1_a754 = and i32 %v4_a748, 254
  %v2_a758 = or i32 %v1_a754, %v1_a678
  store i32 %v2_a758, i32* %r3.global-to-local, align 4
  %v1_a75c = or i32 %v1_a750, 160
  store i32 %v1_a75c, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r4.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  %v1_a768 = trunc i32 %v2_a758 to i8
  store i8 %v1_a768, i8* %v2_a748, align 1
  %v0_a76c = load i32, i32* %r2.global-to-local, align 4
  %v1_a76c = trunc i32 %v0_a76c to i8
  %v2_a76c = load i32, i32* @r7, align 4
  %v3_a76c = add i32 %v2_a76c, 12
  %v4_a76c = inttoptr i32 %v3_a76c to i8*
  store i8 %v1_a76c, i8* %v4_a76c, align 1
  %v1_a770 = load i32, i32* @r7, align 4
  %v2_a770 = add i32 %v1_a770, 4
  %v3_a770 = inttoptr i32 %v2_a770 to i32*
  store i32 %v1_a6dc, i32* %v3_a770, align 4
  %v0_a774 = load i32, i32* %r4.global-to-local, align 4
  %v1_a774 = trunc i32 %v0_a774 to i8
  %v2_a774 = load i32, i32* @r8, align 4
  %v3_a774 = add i32 %v2_a774, 41
  %v4_a774 = inttoptr i32 %v3_a774 to i8*
  store i8 %v1_a774, i8* %v4_a774, align 1
  %v0_a778 = load i32, i32* @r5, align 4
  %v1_a778 = trunc i32 %v0_a778 to i8
  %v2_a778 = load i32, i32* @r8, align 4
  %v3_a778 = add i32 %v2_a778, 40
  %v4_a778 = inttoptr i32 %v3_a778 to i8*
  store i8 %v1_a778, i8* %v4_a778, align 1
  %v0_a77c = call i32 @function_d1c4()
  %v1_a780 = urem i32 %v0_a77c, 16
  %v1_a784 = or i32 %v1_a780, 1392
  %v1_a788 = add nuw nsw i32 %v1_a784, 8
  %v1_a78c = call i32 @function_114e0(i32 %v1_a788)
  %v2_a78c = trunc i32 %v1_a78c to i16
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a798 = load i32, i32* %r4.global-to-local, align 4
  %v1_a798 = trunc i32 %v0_a798 to i8
  %v2_a798 = load i32, i32* @r8, align 4
  %v3_a798 = add i32 %v2_a798, 44
  %v4_a798 = inttoptr i32 %v3_a798 to i8*
  store i8 %v1_a798, i8* %v4_a798, align 1
  %v0_a79c = load i32, i32* %r3.global-to-local, align 4
  %v1_a79c = trunc i32 %v0_a79c to i8
  %v2_a79c = load i32, i32* @r8, align 4
  %v3_a79c = add i32 %v2_a79c, 46
  %v4_a79c = inttoptr i32 %v3_a79c to i8*
  store i8 %v1_a79c, i8* %v4_a79c, align 1
  %v0_a7a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a7a0 = trunc i32 %v0_a7a0 to i8
  %v2_a7a0 = load i32, i32* @r8, align 4
  %v3_a7a0 = add i32 %v2_a7a0, 47
  %v4_a7a0 = inttoptr i32 %v3_a7a0 to i8*
  store i8 %v1_a7a0, i8* %v4_a7a0, align 1
  %v3_a7a4 = load i32, i32* @r8, align 4
  %v4_a7a4 = add i32 %v3_a7a4, 42
  %v5_a7a4 = inttoptr i32 %v4_a7a4 to i16*
  store i16 %v2_a78c, i16* %v5_a7a4, align 2
  %v0_a7a8 = load i32, i32* @r5, align 4
  %v1_a7a8 = trunc i32 %v0_a7a8 to i8
  %v2_a7a8 = load i32, i32* @r8, align 4
  %v3_a7a8 = add i32 %v2_a7a8, 45
  %v4_a7a8 = inttoptr i32 %v3_a7a8 to i8*
  store i8 %v1_a7a8, i8* %v4_a7a8, align 1
  %v0_a7ac = call i32 @function_d1c4()
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a7bc = load i32, i32* @r6, align 4
  %v1_a7bc = trunc i32 %v0_a7bc to i8
  %v2_a7bc = load i32, i32* @r8, align 4
  %v3_a7bc = add i32 %v2_a7bc, 59
  %v4_a7bc = inttoptr i32 %v3_a7bc to i8*
  store i8 %v1_a7bc, i8* %v4_a7bc, align 1
  %v0_a7c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a7c0 = trunc i32 %v0_a7c0 to i8
  %v2_a7c0 = load i32, i32* @r8, align 4
  %v3_a7c0 = add i32 %v2_a7c0, 56
  %v4_a7c0 = inttoptr i32 %v3_a7c0 to i8*
  store i8 %v1_a7c0, i8* %v4_a7c0, align 1
  %v0_a7c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7c4 = trunc i32 %v0_a7c4 to i8
  %v2_a7c4 = load i32, i32* @r8, align 4
  %v3_a7c4 = add i32 %v2_a7c4, 58
  %v4_a7c4 = inttoptr i32 %v3_a7c4 to i8*
  store i8 %v1_a7c4, i8* %v4_a7c4, align 1
  %v0_a7c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7c8 = trunc i32 %v0_a7c8 to i8
  %v2_a7c8 = load i32, i32* @r8, align 4
  %v3_a7c8 = add i32 %v2_a7c8, 57
  %v4_a7c8 = inttoptr i32 %v3_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v4_a7c8, align 1
  %v1_a7cc = load i32, i32* @r8, align 4
  %v2_a7cc = add i32 %v1_a7cc, 48
  %v3_a7cc = inttoptr i32 %v2_a7cc to i32*
  store i32 %v0_a7ac, i32* %v3_a7cc, align 4
  %v0_a7d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7d0 = load i32, i32* @r8, align 4
  %v2_a7d0 = add i32 %v1_a7d0, 52
  %v3_a7d0 = inttoptr i32 %v2_a7d0 to i32*
  store i32 %v0_a7d0, i32* %v3_a7d0, align 4
  %v3_a7d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7d4, i32* %r3.global-to-local, align 4
  %v1_a7d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a7d8 = add i32 %v1_a7d8, %v3_a7d4
  store i32 %v2_a7d8, i32* @r4, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v9_a7e0 = icmp eq i32 %v2_a7d8, %arg2
  store i1 %v9_a7e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a7d8, i32* %stack_var_-44, align 4
  %v6_a7e8 = icmp slt i32 %v2_a7d8, %arg2
  br i1 %v6_a7e8, label %dec_label_pc_a7ec, label %dec_label_pc_a880.preheader

dec_label_pc_a880.preheader:                      ; preds = %dec_label_pc_a698, %dec_label_pc_a5f8
  %v2_a8a0 = icmp eq i32 %v6_a59c, -1
  %v7_a8a0 = icmp eq i32 %v6_a59c, -1
  %v3_a9f4 = icmp eq i32 %v3_a620, 65535
  %v2_aa58 = icmp eq i32 %v1_a628, 0
  br label %dec_label_pc_a880

dec_label_pc_a7ec:                                ; preds = %dec_label_pc_a698, %dec_label_pc_a644
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a7f4 = call i32 @function_fea0(i32 128, i32 1)
  %v3_a7f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7f8, i32* %r3.global-to-local, align 4
  %v1_a7fc = load i32, i32* @fp, align 4
  %v2_a7fc = load i32, i32* @r4, align 4
  %v5_a7fc = mul i32 %v2_a7fc, 4
  %v6_a7fc = add i32 %v5_a7fc, %v1_a7fc
  %v7_a7fc = inttoptr i32 %v6_a7fc to i32*
  store i32 %v2_a7f4, i32* %v7_a7fc, align 4
  %v0_a800 = load i32, i32* @fp, align 4
  %v1_a800 = load i32, i32* %r3.global-to-local, align 4
  %v4_a800 = mul i32 %v1_a800, 4
  %v5_a800 = add i32 %v4_a800, %v0_a800
  %v6_a800 = inttoptr i32 %v5_a800 to i32*
  %v7_a800 = load i32, i32* %v6_a800, align 4
  store i32 %v7_a800, i32* @r8, align 4
  %v1_a804 = inttoptr i32 %v7_a800 to i8*
  %v2_a804 = load i8, i8* %v1_a804, align 1
  %tmp56 = urem i8 %v2_a804, 16
  %v1_a808 = zext i8 %tmp56 to i32
  %v1_a80c = or i32 %v1_a808, 64
  store i32 %v1_a80c, i32* %r2.global-to-local, align 4
  %v1_a810 = trunc i32 %v1_a80c to i8
  store i8 %v1_a810, i8* %v1_a804, align 1
  %v0_a814 = load i32, i32* @r8, align 4
  %v1_a814 = inttoptr i32 %v0_a814 to i8*
  %v2_a814 = load i8, i8* %v1_a814, align 1
  %v3_a814 = zext i8 %v2_a814 to i32
  %v1_a818 = and i32 %v3_a814, 240
  %v1_a81c = or i32 %v1_a818, 5
  store i32 %v1_a81c, i32* %r3.global-to-local, align 4
  %v1_a820 = trunc i32 %v1_a81c to i8
  store i8 %v1_a820, i8* %v1_a814, align 1
  %v2_a828 = load i32, i32* @r8, align 4
  %v3_a828 = add i32 %v2_a828, 1
  %v4_a828 = inttoptr i32 %v3_a828 to i8*
  store i8 %v5_a440, i8* %v4_a828, align 1
  %v1_a830 = call i32 @function_114e0(i32 60)
  %v2_a830 = trunc i32 %v1_a830 to i16
  %v3_a834 = load i32, i32* @r8, align 4
  %v4_a834 = add i32 %v3_a834, 2
  %v5_a834 = inttoptr i32 %v4_a834 to i16*
  store i16 %v2_a830, i16* %v5_a834, align 2
  %v1_a83c = call i32 @function_114e0(i32 %v3_a620)
  %v2_a83c = trunc i32 %v1_a83c to i16
  store i32 %v1_a488, i32* %r1.global-to-local, align 4
  store i32 %v5_a47c, i32* %r2.global-to-local, align 4
  store i1 %v2_a848, i1* %cpsr_z.global-to-local, align 1
  %v3_a84c = load i32, i32* @r8, align 4
  %v4_a84c = add i32 %v3_a84c, 4
  %v5_a84c = inttoptr i32 %v4_a84c to i16*
  store i16 %v2_a83c, i16* %v5_a84c, align 2
  %v0_a850 = load i32, i32* %r2.global-to-local, align 4
  %v1_a850 = trunc i32 %v0_a850 to i8
  %v2_a850 = load i32, i32* @r8, align 4
  %v3_a850 = add i32 %v2_a850, 8
  %v4_a850 = inttoptr i32 %v3_a850 to i8*
  store i8 %v1_a850, i8* %v4_a850, align 1
  %v0_a854 = load i32, i32* @r8, align 4
  %v1_a854 = add i32 %v0_a854, 20
  store i32 %v1_a854, i32* @r7, align 4
  %v0_a858 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a858, label %dec_label_pc_a698, label %dec_label_pc_a85c

dec_label_pc_a85c:                                ; preds = %dec_label_pc_a7ec
  %v1_a860 = call i32 @function_114e0(i32 16384)
  %v2_a860 = trunc i32 %v1_a860 to i16
  %v3_a864 = load i32, i32* @r8, align 4
  %v4_a864 = add i32 %v3_a864, 6
  %v5_a864 = inttoptr i32 %v4_a864 to i16*
  store i16 %v2_a860, i16* %v5_a864, align 2
  %v2_a69c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a698

dec_label_pc_a86c:                                ; preds = %dec_label_pc_a8f8, %dec_label_pc_a880
  %v2_a870 = call i32 @function_126dc(i32* null)
  store i32 %v2_a5ac, i32* %r2.global-to-local, align 4
  %v9_a878 = icmp eq i32 %v2_a5ac, %v2_a870
  store i1 %v9_a878, i1* %cpsr_z.global-to-local, align 1
  %v5_a87c = icmp slt i32 %v2_a5ac, %v2_a870
  br i1 %v5_a87c, label %dec_label_pc_aa78, label %dec_label_pc_a880

dec_label_pc_a880:                                ; preds = %dec_label_pc_a880.preheader, %dec_label_pc_a86c
  store i1 %v2_a62c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a62c, label %dec_label_pc_a86c, label %dec_label_pc_a894

dec_label_pc_a894:                                ; preds = %dec_label_pc_a880
  br label %dec_label_pc_a988

dec_label_pc_a89c:                                ; preds = %dec_label_pc_a988
  store i1 %v7_a8a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a8a0, label %dec_label_pc_a9e4, label %dec_label_pc_a8a8

dec_label_pc_a8a8:                                ; preds = %dec_label_pc_a9a8, %dec_label_pc_a89c
  store i32 %v3_a620, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a9f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9f4, label %dec_label_pc_aa00, label %dec_label_pc_a8bc

dec_label_pc_a8bc:                                ; preds = %dec_label_pc_a9e4.dec_label_pc_a8bc_crit_edge, %dec_label_pc_a8a8
  %v1_a8c0 = phi i32 [ %v1_a8c0.pre, %dec_label_pc_a9e4.dec_label_pc_a8bc_crit_edge ], [ 65535, %dec_label_pc_a8a8 ]
  store i32 %v3_a624, i32* %r2.global-to-local, align 4
  %v9_a8c0 = icmp eq i32 %v3_a624, %v1_a8c0
  store i1 %v9_a8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a8c0, label %dec_label_pc_aa14, label %dec_label_pc_a8c8

dec_label_pc_a8c8:                                ; preds = %dec_label_pc_aa00.dec_label_pc_a8c8_crit_edge, %dec_label_pc_a8bc
  %v1_a8cc = phi i32 [ %v1_a8cc.pre, %dec_label_pc_aa00.dec_label_pc_a8c8_crit_edge ], [ %v1_a8c0, %dec_label_pc_a8bc ]
  store i32 %v3_a610, i32* %r3.global-to-local, align 4
  %v9_a8cc = icmp eq i32 %v3_a610, %v1_a8cc
  store i1 %v9_a8cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a8cc, label %dec_label_pc_aa28, label %dec_label_pc_a8d4

dec_label_pc_a8d4:                                ; preds = %dec_label_pc_aa14.dec_label_pc_a8d4_crit_edge, %dec_label_pc_a8c8
  %v1_a8d8 = phi i32 [ %v1_a8d8.pre, %dec_label_pc_aa14.dec_label_pc_a8d4_crit_edge ], [ %v1_a8cc, %dec_label_pc_a8c8 ]
  %v9_a8d8 = icmp eq i32 %v6_a4d8, %v1_a8d8
  store i1 %v9_a8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a8d8, label %dec_label_pc_aa3c, label %dec_label_pc_a8e0

dec_label_pc_a8e0:                                ; preds = %dec_label_pc_aa28, %dec_label_pc_a8d4
  %v1_a8e4 = phi i32 [ %v1_aa34, %dec_label_pc_aa28 ], [ %v1_a8d8, %dec_label_pc_a8d4 ]
  store i32 %v6_a4f0, i32* %r1.global-to-local, align 4
  %v9_a8e4 = icmp eq i32 %v6_a4f0, %v1_a8e4
  store i1 %v9_a8e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a8e4, label %dec_label_pc_aa50, label %dec_label_pc_a8ec

dec_label_pc_a8ec:                                ; preds = %dec_label_pc_aa3c, %dec_label_pc_a8e0
  store i32 %v1_a628, i32* %r2.global-to-local, align 4
  store i1 %v2_aa58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa58, label %dec_label_pc_a8f8, label %dec_label_pc_aa64

dec_label_pc_a8f8:                                ; preds = %dec_label_pc_a8ec, %dec_label_pc_aa50, %dec_label_pc_aa64
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a8fc = load i32, i32* @r5, align 4
  %v3_a8fc = add i32 %v2_a8fc, 10
  %v4_a8fc = inttoptr i32 %v3_a8fc to i16*
  store i16 0, i16* %v4_a8fc, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a904 = load i32, i32* @r5, align 4
  store i32 %v0_a904, i32* @r0, align 4
  %v2_a908 = call i32 @function_bd1c(i32 %v0_a904, i32 20)
  %v3_a908 = trunc i32 %v2_a908 to i16
  %v3_a90c = load i32, i32* @r5, align 4
  %v4_a90c = add i32 %v3_a90c, 10
  %v5_a90c = inttoptr i32 %v4_a90c to i16*
  store i16 %v3_a908, i16* %v5_a90c, align 2
  %v2_a914 = load i32, i32* @r6, align 4
  %v3_a914 = add i32 %v2_a914, 16
  %v4_a914 = inttoptr i32 %v3_a914 to i16*
  store i16 0, i16* %v4_a914, align 2
  %v1_a91c = call i32 @function_114e0(i32 40)
  %v0_a920 = load i32, i32* @r6, align 4
  store i32 %v0_a920, i32* @r1, align 4
  store i32 %v1_a91c, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_a92c = load i32, i32* @r5, align 4
  %v4_a930 = call i32 @function_bd6c(i32 %v0_a92c, i32 %v0_a920, i32 %v1_a91c, i32 40)
  %v5_a930 = trunc i32 %v4_a930 to i16
  %v3_a934 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a934, i32* %r3.global-to-local, align 4
  %v3_a938 = mul i32 %v3_a934, 32
  store i32 %v3_a938, i32* %lr.global-to-local, align 4
  %v3_a93c = load i32, i32* @r6, align 4
  %v4_a93c = add i32 %v3_a93c, 16
  %v5_a93c = inttoptr i32 %v4_a93c to i16*
  store i16 %v5_a930, i16* %v5_a93c, align 2
  %v0_a940 = load i32, i32* %lr.global-to-local, align 4
  %v1_a940 = load i32, i32* %r3.global-to-local, align 4
  %tmp57 = mul i32 %v1_a940, -8
  %v5_a940 = add i32 %v0_a940, %tmp57
  store i32 %v5_a940, i32* %lr.global-to-local, align 4
  %v0_a944 = load i32, i32* @r6, align 4
  %v1_a944 = add i32 %v0_a944, 2
  %v2_a944 = inttoptr i32 %v1_a944 to i16*
  %v3_a944 = load i16, i16* %v2_a944, align 2
  %v4_a944 = zext i16 %v3_a944 to i32
  store i32 %v4_a944, i32* @r6, align 4
  %v1_a948 = load i32, i32* @sl, align 4
  %v2_a948 = add i32 %v1_a948, %v5_a940
  store i32 %v2_a948, i32* @lr, align 4
  %v3_a94c = add i32 %v2_a948, 2
  %v4_a94c = inttoptr i32 %v3_a94c to i16*
  store i16 %v3_a944, i16* %v4_a94c, align 2
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a95c = load i32, i32* @sb, align 4
  store i32 %v0_a95c, i32* @r0, align 4
  store i32 60, i32* @r2, align 4
  %v0_a96c = call i32 @function_1172c()
  %v3_a970 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a970, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_a978 = add i32 %v3_a970, 1
  %v9_a97c = icmp eq i32 %v1_a978, %arg2
  store i1 %v9_a97c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a978, i32* %stack_var_-44, align 4
  %v6_a984 = icmp slt i32 %v1_a978, %arg2
  br i1 %v6_a984, label %dec_label_pc_a988, label %dec_label_pc_a86c

dec_label_pc_a988:                                ; preds = %dec_label_pc_a8f8, %dec_label_pc_a894
  %v1_a998 = phi i32 [ %v1_a978, %dec_label_pc_a8f8 ], [ 0, %dec_label_pc_a894 ]
  %v5_a98c = mul i32 %v1_a998, 24
  %v1_a990 = load i32, i32* @sl, align 4
  %v2_a990 = add i32 %v1_a990, %v5_a98c
  store i32 %v2_a990, i32* %r3.global-to-local, align 4
  %v1_a994 = add i32 %v2_a990, 20
  %v2_a994 = inttoptr i32 %v1_a994 to i8*
  %v3_a994 = load i8, i8* %v2_a994, align 1
  %v4_a994 = zext i8 %v3_a994 to i32
  store i32 %v4_a994, i32* %r2.global-to-local, align 4
  %v0_a998 = load i32, i32* @fp, align 4
  %v4_a998 = mul i32 %v1_a998, 4
  %v5_a998 = add i32 %v0_a998, %v4_a998
  %v6_a998 = inttoptr i32 %v5_a998 to i32*
  %v7_a998 = load i32, i32* %v6_a998, align 4
  store i32 %v7_a998, i32* @r5, align 4
  %v2_a99c = icmp ugt i8 %v3_a994, 30
  %v7_a99c = icmp eq i8 %v3_a994, 31
  store i1 %v7_a99c, i1* %cpsr_z.global-to-local, align 1
  %v1_a9a0 = add i32 %v7_a998, 20
  store i32 %v1_a9a0, i32* @r6, align 4
  %v2_a9a4 = xor i1 %v7_a99c, true
  %v3_a9a4 = and i1 %v2_a99c, %v2_a9a4
  br i1 %v3_a9a4, label %dec_label_pc_a89c, label %dec_label_pc_a9a8

dec_label_pc_a9a8:                                ; preds = %dec_label_pc_a988
  %v1_a9a8 = add i32 %v2_a990, 16
  %v2_a9a8 = inttoptr i32 %v1_a9a8 to i32*
  %v3_a9a8 = load i32, i32* %v2_a9a8, align 4
  %v1_a9ac = call i32 @function_11664(i32 %v3_a9a8)
  store i32 %v1_a9ac, i32* %r4.global-to-local, align 4
  %v0_a9b4 = call i32 @function_d1c4()
  %v3_a9b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a9b8, i32* %r2.global-to-local, align 4
  %v5_a9c0 = mul i32 %v3_a9b8, 24
  %v1_a9c4 = load i32, i32* @sl, align 4
  %v2_a9c4 = add i32 %v1_a9c4, %v5_a9c0
  store i32 %v2_a9c4, i32* %r3.global-to-local, align 4
  %v1_a9c8 = add i32 %v2_a9c4, 20
  %v2_a9c8 = inttoptr i32 %v1_a9c8 to i8*
  %v3_a9c8 = load i8, i8* %v2_a9c8, align 1
  %v4_a9c8 = zext i8 %v3_a9c8 to i32
  store i32 %v4_a9c8, i32* %r2.global-to-local, align 4
  %v0_a9cc = load i32, i32* %r4.global-to-local, align 4
  %v7_a9cc = lshr i32 %v0_a9b4, %v4_a9c8
  %v8_a9cc = add i32 %v7_a9cc, %v0_a9cc
  %v1_a9d0 = call i32 @function_114bc(i32 %v8_a9cc)
  %v1_a9d4 = load i32, i32* @r5, align 4
  %v2_a9d4 = add i32 %v1_a9d4, 16
  %v3_a9d4 = inttoptr i32 %v2_a9d4 to i32*
  store i32 %v1_a9d0, i32* %v3_a9d4, align 4
  store i1 %v7_a8a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a8a0, label %dec_label_pc_a9e4, label %dec_label_pc_a8a8

dec_label_pc_a9e4:                                ; preds = %dec_label_pc_a9a8, %dec_label_pc_a89c
  %v0_a9e4 = call i32 @function_d1c4()
  store i32 %v3_a620, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a9f4, i1* %cpsr_z.global-to-local, align 1
  %v1_a9f8 = load i32, i32* @r5, align 4
  %v2_a9f8 = add i32 %v1_a9f8, 12
  %v3_a9f8 = inttoptr i32 %v2_a9f8 to i32*
  store i32 %v0_a9e4, i32* %v3_a9f8, align 4
  br i1 %v3_a9f4, label %dec_label_pc_aa00, label %dec_label_pc_a9e4.dec_label_pc_a8bc_crit_edge

dec_label_pc_a9e4.dec_label_pc_a8bc_crit_edge:    ; preds = %dec_label_pc_a9e4
  %v1_a8c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a8bc

dec_label_pc_aa00:                                ; preds = %dec_label_pc_a9e4, %dec_label_pc_a8a8
  %v0_aa00 = call i32 @function_d1c4()
  %v1_aa00 = trunc i32 %v0_aa00 to i16
  store i32 %v3_a624, i32* %r2.global-to-local, align 4
  %v1_aa08 = load i32, i32* @r4, align 4
  %v9_aa08 = icmp eq i32 %v3_a624, %v1_aa08
  store i1 %v9_aa08, i1* %cpsr_z.global-to-local, align 1
  %v3_aa0c = load i32, i32* @r5, align 4
  %v4_aa0c = add i32 %v3_aa0c, 4
  %v5_aa0c = inttoptr i32 %v4_aa0c to i16*
  store i16 %v1_aa00, i16* %v5_aa0c, align 2
  br i1 %v9_aa08, label %dec_label_pc_aa14, label %dec_label_pc_aa00.dec_label_pc_a8c8_crit_edge

dec_label_pc_aa00.dec_label_pc_a8c8_crit_edge:    ; preds = %dec_label_pc_aa00
  %v1_a8cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a8c8

dec_label_pc_aa14:                                ; preds = %dec_label_pc_aa00, %dec_label_pc_a8bc
  %v0_aa14 = call i32 @function_d1c4()
  %v1_aa14 = trunc i32 %v0_aa14 to i16
  store i32 %v3_a610, i32* %r3.global-to-local, align 4
  %v1_aa1c = load i32, i32* @r4, align 4
  %v9_aa1c = icmp eq i32 %v3_a610, %v1_aa1c
  store i1 %v9_aa1c, i1* %cpsr_z.global-to-local, align 1
  %v3_aa20 = load i32, i32* @r5, align 4
  %v4_aa20 = add i32 %v3_aa20, 20
  %v5_aa20 = inttoptr i32 %v4_aa20 to i16*
  store i16 %v1_aa14, i16* %v5_aa20, align 2
  br i1 %v9_aa1c, label %dec_label_pc_aa28, label %dec_label_pc_aa14.dec_label_pc_a8d4_crit_edge

dec_label_pc_aa14.dec_label_pc_a8d4_crit_edge:    ; preds = %dec_label_pc_aa14
  %v1_a8d8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a8d4

dec_label_pc_aa28:                                ; preds = %dec_label_pc_aa14, %dec_label_pc_a8c8
  %v0_aa28 = call i32 @function_d1c4()
  %v1_aa28 = trunc i32 %v0_aa28 to i16
  %v3_aa2c = load i32, i32* @r6, align 4
  %v4_aa2c = add i32 %v3_aa2c, 2
  %v5_aa2c = inttoptr i32 %v4_aa2c to i16*
  store i16 %v1_aa28, i16* %v5_aa2c, align 2
  %v1_aa34 = load i32, i32* @r4, align 4
  %v9_aa34 = icmp eq i32 %v6_a4d8, %v1_aa34
  store i1 %v9_aa34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa34, label %dec_label_pc_aa3c, label %dec_label_pc_a8e0

dec_label_pc_aa3c:                                ; preds = %dec_label_pc_aa28, %dec_label_pc_a8d4
  %v0_aa3c = call i32 @function_d1c4()
  store i32 %v6_a4f0, i32* %r1.global-to-local, align 4
  %v1_aa44 = load i32, i32* @r4, align 4
  %v9_aa44 = icmp eq i32 %v6_a4f0, %v1_aa44
  store i1 %v9_aa44, i1* %cpsr_z.global-to-local, align 1
  %v1_aa48 = load i32, i32* @r6, align 4
  %v2_aa48 = add i32 %v1_aa48, 4
  %v3_aa48 = inttoptr i32 %v2_aa48 to i32*
  store i32 %v0_aa3c, i32* %v3_aa48, align 4
  br i1 %v9_aa44, label %dec_label_pc_aa50, label %dec_label_pc_a8ec

dec_label_pc_aa50:                                ; preds = %dec_label_pc_aa3c, %dec_label_pc_a8e0
  %v0_aa50 = call i32 @function_d1c4()
  store i32 %v1_a628, i32* %r2.global-to-local, align 4
  store i1 %v2_aa58, i1* %cpsr_z.global-to-local, align 1
  %v1_aa5c = load i32, i32* @r6, align 4
  %v2_aa5c = add i32 %v1_aa5c, 8
  %v3_aa5c = inttoptr i32 %v2_aa5c to i32*
  store i32 %v0_aa50, i32* %v3_aa5c, align 4
  br i1 %v2_aa58, label %dec_label_pc_a8f8, label %dec_label_pc_aa64

dec_label_pc_aa64:                                ; preds = %dec_label_pc_a8ec, %dec_label_pc_aa50
  %v0_aa64 = call i32 @function_d1c4()
  %v1_aa64 = trunc i32 %v0_aa64 to i16
  %v3_aa68 = load i32, i32* @r6, align 4
  %v4_aa68 = add i32 %v3_aa68, 18
  %v5_aa68 = inttoptr i32 %v4_aa68 to i16*
  store i16 %v1_aa64, i16* %v5_aa68, align 2
  br label %dec_label_pc_a8f8

dec_label_pc_aa70:                                ; preds = %dec_label_pc_a5d0
  %v0_aa70 = load i32, i32* @sb, align 4
  %v1_aa74 = call i32 @function_12714(i32 %v0_aa70)
  br label %dec_label_pc_aa78

dec_label_pc_aa78:                                ; preds = %dec_label_pc_a86c, %dec_label_pc_a3dc, %dec_label_pc_aa70
  %v1_aa80 = phi i32 [ %v3_a5c0, %dec_label_pc_a3dc ], [ %v1_aa74, %dec_label_pc_aa70 ], [ %v2_a870, %dec_label_pc_a86c ]
  store i32 %v3_a3dc, i32* %r4.global-to-local, align 4
  store i32 %v27_a3dc, i32* %lr.global-to-local, align 4
  ret i32 %v1_aa80

; uselistorder directives
  uselistorder i32 %v1_aa34, { 1, 0 }
  uselistorder i32 %v1_a978, { 1, 2, 0, 3 }
  uselistorder i32 %v5_a940, { 1, 0 }
  uselistorder i32 %v0_a854, { 1, 0 }
  uselistorder i1 %v2_aa58, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a9f4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a8a0, { 2, 1, 0 }
  uselistorder i32 %v2_a7d8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a678, { 2, 1, 0 }
  uselistorder i32 %v1_a674, { 2, 0, 1 }
  uselistorder i32 %v1_a670, { 2, 0, 1 }
  uselistorder i32 %v1_a66c, { 2, 0, 1 }
  uselistorder i32 %v1_a668, { 1, 0 }
  uselistorder i32 %v1_a658, { 1, 0 }
  uselistorder i1 %v2_a62c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a628, { 2, 1, 3, 0 }
  uselistorder i32 %v3_a620, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_a5f0, { 1, 0 }
  uselistorder i1 %v7_a5c4, { 1, 0 }
  uselistorder i32 %v3_a5c0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_a5ac, { 2, 1, 0 }
  uselistorder i32 %v6_a59c, { 0, 2, 1 }
  uselistorder i32 %v6_a4f0, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a4d8, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 10, 3, 4, 5, 6, 7, 8, 9, 11, 26, 27, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 24, 25, 26, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 14, 15, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 17, 16, 19, 20, 18, 21, 22, 23 }
  uselistorder i32 60, { 1, 0 }
  uselistorder i32 %arg2, { 6, 5, 4, 3, 2, 1, 0, 7, 8 }
  uselistorder label %dec_label_pc_aa78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa64, { 1, 0 }
  uselistorder label %dec_label_pc_a8f8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a880, { 1, 0 }
  uselistorder label %dec_label_pc_a698, { 1, 0 }
}

define i32 @function_aa88(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_aa88:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* %stack_var_-80, align 4
  %v2_aaac = call i32 @function_fea0(i32 %arg2, i32 4)
  %v0_aab8 = load i32, i32* @sb, align 4
  store i32 %v0_aab8, i32* %r0.global-to-local, align 4
  %v2_aabc = call i32 @function_fea0(i32 %v0_aab8, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_aac8 = load i32, i32* @r5, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v2_aabc, i32* @sl, align 4
  %v0_aad8 = load i32, i32* @r4, align 4
  store i32 %v0_aad8, i32* %r0.global-to-local, align 4
  %v5_aadc = inttoptr i32 %v0_aac8 to i32*
  %v6_aadc = call i32 @function_8294(i32 %v0_aad8, i32* %v5_aadc, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_aae0 = load i32, i32* @r5, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_aaec = load i32, i32* @r6, align 4
  %v0_aaf0 = load i32, i32* @r4, align 4
  store i32 %v0_aaf0, i32* %r0.global-to-local, align 4
  %v3_aaf4 = urem i32 %v6_aadc, 65536
  store i32 %v3_aaf4, i32* @fp, align 4
  %v5_aaf8 = inttoptr i32 %v0_aae0 to i32*
  %v6_aaf8 = call i32 @function_8294(i32 %v0_aaf0, i32* %v5_aaf8, i32 6, i32 %v0_aaec, i32 ptrtoint (i32* @0 to i32))
  %v0_aafc = load i32, i32* @r5, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_ab0c = load i32, i32* @r4, align 4
  store i32 %v0_ab0c, i32* %r0.global-to-local, align 4
  %v3_ab10 = urem i32 %v6_aaf8, 65536
  store i32 %v3_ab10, i32* @r8, align 4
  %v5_ab14 = inttoptr i32 %v0_aafc to i32*
  %v6_ab14 = call i32 @function_8294(i32 %v0_ab0c, i32* %v5_ab14, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  %v3_ab24 = urem i32 %v6_ab14, 65536
  store i32 %v3_ab24, i32* @ip, align 4
  %v0_ab28 = load i32, i32* @r5, align 4
  %v0_ab2c = load i32, i32* @r4, align 4
  store i32 %v0_ab2c, i32* %r0.global-to-local, align 4
  %v5_ab34 = inttoptr i32 %v0_ab28 to i32*
  %v6_ab34 = call i32 @function_8294(i32 %v0_ab2c, i32* %v5_ab34, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_ab40 = urem i32 %v6_ab34, 256
  store i32 %v1_ab40, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v2_ab5c = call i32 @function_126dc(i32* null)
  %v0_ab60 = load i32, i32* @r8, align 4
  %v1_ab60 = load i32, i32* @r6, align 4
  %v9_ab60 = icmp eq i32 %v0_ab60, %v1_ab60
  %v1_ab64 = load i32, i32* @r7, align 4
  %v2_ab64 = add i32 %v1_ab64, %v2_ab5c
  store i32 %v2_ab64, i32* %r0.global-to-local, align 4
  br i1 %v9_ab60, label %dec_label_pc_ad04, label %dec_label_pc_ab70

dec_label_pc_ab70:                                ; preds = %dec_label_pc_aa88
  store i32 %v0_ab60, i32* %r0.global-to-local, align 4
  %v1_ab74 = call i32 @function_114e0(i32 %v0_ab60)
  br label %dec_label_pc_ab7c

dec_label_pc_ab7c:                                ; preds = %dec_label_pc_ad04, %dec_label_pc_ab70
  %storemerge = phi i32 [ %v1_ab74, %dec_label_pc_ab70 ], [ %v3_ad0c, %dec_label_pc_ad04 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_ab7c = load i32, i32* @sb, align 4
  %v2_ab7c = icmp eq i32 %v0_ab7c, 0
  br i1 %v2_ab7c, label %dec_label_pc_ac88, label %dec_label_pc_ab84

dec_label_pc_ab84:                                ; preds = %dec_label_pc_ab7c
  store i32 0, i32* @r8, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v2_abb8 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_ac0c

dec_label_pc_ab94:                                ; preds = %dec_label_pc_ac0c
  %v1_ab94 = call i32 @function_114e0(i32 %v0_ac30)
  %v2_ab94 = trunc i32 %v1_ab94 to i16
  store i32 %v1_ab94, i32* %r0.global-to-local, align 4
  %v3_ab98 = load i32, i32* @r5, align 4
  %v4_ab98 = add i32 %v3_ab98, 2
  %v5_ab98 = inttoptr i32 %v4_ab98 to i16*
  store i16 %v2_ab94, i16* %v5_ab98, align 2
  br label %dec_label_pc_ab9c

dec_label_pc_ab9c:                                ; preds = %dec_label_pc_ac38, %dec_label_pc_ab94
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_aba8 = call i32 @function_117e8(i32 2, i32 2, i32 17)
  store i32 %v3_aba8, i32* %r0.global-to-local, align 4
  %v7_abac = icmp eq i32 %v3_aba8, -1
  %v0_abb0 = load i32, i32* @r8, align 4
  %v1_abb0 = add i32 %v0_abb0, 1
  store i32 %v1_abb0, i32* @r8, align 4
  %v0_abb4 = load i32, i32* @r7, align 4
  %v1_abb4 = add i32 %v0_abb4, 24
  store i32 %v1_abb4, i32* @r7, align 4
  store i32 16, i32* @r2, align 4
  %v1_abc0 = load i32, i32* @r6, align 4
  %v2_abc0 = load i32, i32* @sl, align 4
  %v3_abc0 = add i32 %v2_abc0, %v1_abc0
  %v4_abc0 = inttoptr i32 %v3_abc0 to i32*
  store i32 %v3_aba8, i32* %v4_abc0, align 4
  br i1 %v7_abac, label %dec_label_pc_acac.loopexit2, label %dec_label_pc_abc8

dec_label_pc_abc8:                                ; preds = %dec_label_pc_ab9c
  store i32 2, i32* %stack_var_-56, align 4
  %v0_abe0 = load i32, i32* %r0.global-to-local, align 4
  %v3_abe0 = call i32 @function_11404(i32 %v0_abe0, i32 %v2_abb8, i32 16)
  store i32 %v3_abe0, i32* %r0.global-to-local, align 4
  %v0_abe4 = load i32, i32* @r5, align 4
  %v1_abe4 = add i32 %v0_abe4, 20
  %v2_abe4 = inttoptr i32 %v1_abe4 to i8*
  %v3_abe4 = load i8, i8* %v2_abe4, align 1
  %tmp = icmp ult i8 %v3_abe4, 32
  br i1 %tmp, label %dec_label_pc_ac4c, label %dec_label_pc_abf0

dec_label_pc_abf0:                                ; preds = %dec_label_pc_abc8
  %v0_abf0 = load i32, i32* @r6, align 4
  %v1_abf0 = load i32, i32* @sl, align 4
  %v2_abf0 = add i32 %v1_abf0, %v0_abf0
  %v3_abf0 = inttoptr i32 %v2_abf0 to i32*
  %v4_abf0 = load i32, i32* %v3_abf0, align 4
  store i32 %v4_abf0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_abfc = call i32 @function_1142c(i32 %v4_abf0, i32 %v0_abe4, i32 16)
  store i32 %v3_abfc, i32* %r0.global-to-local, align 4
  %v0_ac00 = load i32, i32* @r8, align 4
  %v1_ac00 = load i32, i32* @sb, align 4
  %v9_ac00 = icmp eq i32 %v0_ac00, %v1_ac00
  %v0_ac04 = load i32, i32* @r6, align 4
  %v1_ac04 = add i32 %v0_ac04, 4
  store i32 %v1_ac04, i32* @r6, align 4
  br i1 %v9_ac00, label %dec_label_pc_ac88, label %dec_label_pc_ac0c

dec_label_pc_ac0c:                                ; preds = %dec_label_pc_ac4c, %dec_label_pc_abf0, %dec_label_pc_ab84
  store i32 65535, i32* @r4, align 4
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_ac1c = call i32 @function_fea0(i32 65535, i32 1)
  %v2_ac20 = load i32, i32* %stack_var_-80, align 4
  store i32 %v2_ac20, i32* %r2.global-to-local, align 4
  %v0_ac24 = load i32, i32* @fp, align 4
  %v1_ac24 = load i32, i32* @r4, align 4
  %v9_ac24 = icmp eq i32 %v0_ac24, %v1_ac24
  %v1_ac28 = load i32, i32* @r6, align 4
  %v3_ac28 = add i32 %v1_ac28, %v2_aaac
  %v4_ac28 = inttoptr i32 %v3_ac28 to i32*
  store i32 %v2_ac1c, i32* %v4_ac28, align 4
  %v0_ac2c = load i32, i32* %r2.global-to-local, align 4
  %v1_ac2c = load i32, i32* @r7, align 4
  %v2_ac2c = add i32 %v1_ac2c, %v0_ac2c
  store i32 %v2_ac2c, i32* @r5, align 4
  %v0_ac30 = load i32, i32* @fp, align 4
  store i32 %v0_ac30, i32* %r0.global-to-local, align 4
  br i1 %v9_ac24, label %dec_label_pc_ac38, label %dec_label_pc_ab94

dec_label_pc_ac38:                                ; preds = %dec_label_pc_ac0c
  %v0_ac38 = call i32 @function_d1c4()
  %v1_ac38 = trunc i32 %v0_ac38 to i16
  store i32 %v0_ac38, i32* %r0.global-to-local, align 4
  %v2_ac3c = load i32, i32* %stack_var_-80, align 4
  store i32 %v2_ac3c, i32* %r2.global-to-local, align 4
  %v1_ac40 = load i32, i32* @r7, align 4
  %v2_ac40 = add i32 %v1_ac40, %v2_ac3c
  store i32 %v2_ac40, i32* @r5, align 4
  %v4_ac44 = add i32 %v2_ac40, 2
  %v5_ac44 = inttoptr i32 %v4_ac44 to i16*
  store i16 %v1_ac38, i16* %v5_ac44, align 2
  br label %dec_label_pc_ab9c

dec_label_pc_ac4c:                                ; preds = %dec_label_pc_abc8
  %v1_ac4c = add i32 %v0_abe4, 16
  %v2_ac4c = inttoptr i32 %v1_ac4c to i32*
  %v3_ac4c = load i32, i32* %v2_ac4c, align 4
  store i32 %v3_ac4c, i32* %r0.global-to-local, align 4
  %v1_ac50 = call i32 @function_11664(i32 %v3_ac4c)
  store i32 %v1_ac50, i32* %r0.global-to-local, align 4
  store i32 %v1_ac50, i32* @r4, align 4
  %v0_ac58 = call i32 @function_d1c4()
  store i32 %v0_ac58, i32* %r0.global-to-local, align 4
  %v0_ac5c = load i32, i32* @r5, align 4
  %v1_ac5c = add i32 %v0_ac5c, 20
  %v2_ac5c = inttoptr i32 %v1_ac5c to i8*
  %v3_ac5c = load i8, i8* %v2_ac5c, align 1
  %v4_ac5c = zext i8 %v3_ac5c to i32
  %v0_ac60 = load i32, i32* @r4, align 4
  %v7_ac60 = lshr i32 %v0_ac58, %v4_ac5c
  %v8_ac60 = add i32 %v7_ac60, %v0_ac60
  store i32 %v8_ac60, i32* %r0.global-to-local, align 4
  %v1_ac64 = call i32 @function_114bc(i32 %v8_ac60)
  store i32 %v1_ac64, i32* %r0.global-to-local, align 4
  %v1_ac68 = load i32, i32* @r5, align 4
  %v2_ac68 = add i32 %v1_ac68, 4
  %v3_ac68 = inttoptr i32 %v2_ac68 to i32*
  store i32 %v1_ac64, i32* %v3_ac68, align 4
  %v0_ac6c = load i32, i32* @r5, align 4
  %v0_ac70 = load i32, i32* @r6, align 4
  %v1_ac70 = load i32, i32* @sl, align 4
  %v2_ac70 = add i32 %v1_ac70, %v0_ac70
  %v3_ac70 = inttoptr i32 %v2_ac70 to i32*
  %v4_ac70 = load i32, i32* %v3_ac70, align 4
  store i32 %v4_ac70, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_ac78 = call i32 @function_1142c(i32 %v4_ac70, i32 %v0_ac6c, i32 16)
  store i32 %v3_ac78, i32* %r0.global-to-local, align 4
  %v0_ac7c = load i32, i32* @r8, align 4
  %v1_ac7c = load i32, i32* @sb, align 4
  %v9_ac7c = icmp eq i32 %v0_ac7c, %v1_ac7c
  %v0_ac80 = load i32, i32* @r6, align 4
  %v1_ac80 = add i32 %v0_ac80, 4
  store i32 %v1_ac80, i32* @r6, align 4
  br i1 %v9_ac7c, label %dec_label_pc_ac88, label %dec_label_pc_ac0c

dec_label_pc_ac88:                                ; preds = %dec_label_pc_ac4c, %dec_label_pc_abf0, %dec_label_pc_ab7c
  %v1_ac8c6 = phi i32 [ 0, %dec_label_pc_ab7c ], [ %v0_ac7c, %dec_label_pc_ac4c ], [ %v0_ac00, %dec_label_pc_abf0 ]
  store i32 0, i32* @r5, align 4
  %v2_acc0 = icmp eq i32 %v1_ab40, 0
  br label %dec_label_pc_ac8c

dec_label_pc_ac8c:                                ; preds = %dec_label_pc_ac8c.backedge, %dec_label_pc_ac88
  %v1_ac8c = phi i32 [ %v1_ac8c.pre, %dec_label_pc_ac8c.backedge ], [ %v1_ac8c6, %dec_label_pc_ac88 ]
  %v1_acc4 = phi i32 [ %v0_ac8c4, %dec_label_pc_ac8c.backedge ], [ 0, %dec_label_pc_ac88 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v5_ac94 = icmp slt i32 %v1_acc4, %v1_ac8c
  br i1 %v5_ac94, label %dec_label_pc_acb8, label %dec_label_pc_ac98

dec_label_pc_ac98:                                ; preds = %dec_label_pc_ac8c
  %v2_ac98 = call i32 @function_126dc(i32* null)
  store i32 %v2_ac98, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v6_aca8 = icmp slt i32 %v2_ab64, %v2_ac98
  br i1 %v6_aca8, label %dec_label_pc_acac, label %dec_label_pc_ac8c.backedge

dec_label_pc_acac.loopexit2:                      ; preds = %dec_label_pc_ab9c
  %v1_acb4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_acac

dec_label_pc_acac:                                ; preds = %dec_label_pc_ac98, %dec_label_pc_acac.loopexit2
  %v1_acb4 = phi i32 [ %v1_acb4.pre, %dec_label_pc_acac.loopexit2 ], [ %v2_ac98, %dec_label_pc_ac98 ]
  ret i32 %v1_acb4

dec_label_pc_acb8:                                ; preds = %dec_label_pc_ac8c
  store i32 %v1_ab40, i32* %r2.global-to-local, align 4
  store i32 %v2_aaac, i32* @r3, align 4
  %v4_acc4 = mul i32 %v1_acc4, 4
  %v5_acc4 = add i32 %v4_acc4, %v2_aaac
  %v6_acc4 = inttoptr i32 %v5_acc4 to i32*
  %v7_acc4 = load i32, i32* %v6_acc4, align 4
  store i32 %v7_acc4, i32* @r4, align 4
  br i1 %v2_acc0, label %dec_label_pc_accc, label %dec_label_pc_ace8

dec_label_pc_accc:                                ; preds = %dec_label_pc_acb8, %dec_label_pc_ace8
  %v0_acd0 = phi i32 [ %v7_acc4, %dec_label_pc_acb8 ], [ %v0_acd0.pre, %dec_label_pc_ace8 ]
  %v1_accc = phi i32 [ %v1_acc4, %dec_label_pc_acb8 ], [ %v1_accc.pre, %dec_label_pc_ace8 ]
  %v0_accc = load i32, i32* @sl, align 4
  %v4_accc = mul i32 %v1_accc, 4
  %v5_accc = add i32 %v4_accc, %v0_accc
  %v6_accc = inttoptr i32 %v5_accc to i32*
  %v7_accc = load i32, i32* %v6_accc, align 4
  store i32 %v7_accc, i32* @r0, align 4
  store i32 %v0_acd0, i32* @r1, align 4
  store i32 %v3_ab24, i32* @r2, align 4
  %v4_acdc = call i32 @function_11708(i32 %v7_accc, i32 %v0_acd0, i32 %v3_ab24, i32 16384)
  store i32 %v4_acdc, i32* %r0.global-to-local, align 4
  %v0_ace0 = load i32, i32* @r5, align 4
  %v1_ace0 = add i32 %v0_ace0, 1
  store i32 %v1_ace0, i32* @r5, align 4
  br label %dec_label_pc_ac8c.backedge

dec_label_pc_ac8c.backedge:                       ; preds = %dec_label_pc_accc, %dec_label_pc_ac98
  %v0_ac8c4 = phi i32 [ %v1_ace0, %dec_label_pc_accc ], [ 0, %dec_label_pc_ac98 ]
  %v1_ac8c.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_ac8c

dec_label_pc_ace8:                                ; preds = %dec_label_pc_acb8
  store i32 %v7_acc4, i32* %r0.global-to-local, align 4
  %v2_acf0 = call i32 @function_d288(i32 %v7_acc4, i32 %v3_ab24)
  store i32 %v2_acf0, i32* %r0.global-to-local, align 4
  store i32 %v3_ab24, i32* %r2.global-to-local, align 4
  %v3_acfc = load i32, i32* @r4, align 4
  %v4_acfc = add i32 %v3_acfc, %v3_ab24
  %v5_acfc = inttoptr i32 %v4_acfc to i8*
  store i8 0, i8* %v5_acfc, align 1
  %v1_accc.pre = load i32, i32* @r5, align 4
  %v0_acd0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_accc

dec_label_pc_ad04:                                ; preds = %dec_label_pc_aa88
  %v0_ad04 = call i32 @function_d1c4()
  %v3_ad0c = urem i32 %v0_ad04, 65536
  br label %dec_label_pc_ab7c

; uselistorder directives
  uselistorder i32 %v0_acd0, { 1, 0 }
  uselistorder i32 %v7_acc4, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ac38, { 1, 0 }
  uselistorder i32 %v0_ac30, { 1, 0 }
  uselistorder i32 %v3_aba8, { 1, 0, 2 }
  uselistorder i32 %v1_ab94, { 1, 0 }
  uselistorder i32 %v0_ab60, { 1, 0, 2 }
  uselistorder i32 %v1_ab40, { 2, 1, 0 }
  uselistorder i32 %v3_ab24, { 5, 3, 4, 1, 2, 0 }
  uselistorder i32 %v2_aaac, { 0, 2, 1 }
  uselistorder i32* %stack_var_-56, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 7, 8, 5, 6, 9, 11, 10, 12, 13, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 33, 19, 5, 4, 7, 6, 9, 8, 10, 12, 11, 13, 17, 22, 15, 14, 32, 18, 20, 16, 21, 0, 24, 23, 25, 26, 27, 28, 29, 30, 31, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_accc, { 1, 0 }
  uselistorder label %dec_label_pc_acac, { 1, 0 }
}

define i32 @function_ad18(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ad18:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_ad18 = load i32, i32* @r4, align 4
  %v27_ad18 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_ad44 = call i32 @function_fea0(i32 %arg2, i32 4)
  %v0_ad48 = load i32, i32* @r4, align 4
  store i32 %v0_ad48, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ad54 = load i32, i32* @sl, align 4
  store i32 %v0_ad54, i32* %r3.global-to-local, align 4
  %v0_ad58 = load i32, i32* @r5, align 4
  %v5_ad5c = inttoptr i32 %v0_ad48 to i32*
  %v6_ad5c = call i32 @function_8294(i32 %v0_ad58, i32* %v5_ad5c, i32 2, i32 %v0_ad54, i32 %v2_ad44)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ad74 = load i32, i32* @r4, align 4
  store i32 %v0_ad74, i32* %r1.global-to-local, align 4
  %v0_ad78 = load i32, i32* @r5, align 4
  %v5_ad7c = trunc i32 %v6_ad5c to i8
  %v6_ad80 = inttoptr i32 %v0_ad74 to i32*
  %v7_ad80 = call i32 @function_8294(i32 %v0_ad78, i32* %v6_ad80, i32 3, i32 65535, i32 %v6_ad5c)
  %v0_ad84 = load i32, i32* @r4, align 4
  store i32 %v0_ad84, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_ad94 = load i32, i32* @r5, align 4
  %v5_ad98 = inttoptr i32 %v0_ad84 to i32*
  %v6_ad98 = call i32 @function_8294(i32 %v0_ad94, i32* %v5_ad98, i32 4, i32 64, i32 %v7_ad80)
  %v0_ada4 = load i32, i32* @r4, align 4
  store i32 %v0_ada4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_adac = load i32, i32* @sl, align 4
  store i32 %v0_adac, i32* %r3.global-to-local, align 4
  %v0_adb0 = load i32, i32* @r5, align 4
  %sext = mul i32 %v6_ad98, 16777216
  %v5_adb8 = sdiv i32 %sext, 16777216
  %v6_adb8 = inttoptr i32 %v0_ada4 to i32*
  %v7_adb8 = call i32 @function_8294(i32 %v0_adb0, i32* %v6_adb8, i32 5, i32 %v0_adac, i32 %v5_adb8)
  %v1_adc4 = urem i32 %v7_adb8, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_add0 = load i32, i32* @r4, align 4
  store i32 %v0_add0, i32* %r1.global-to-local, align 4
  %v0_add4 = load i32, i32* @r5, align 4
  %v5_addc = inttoptr i32 %v0_add0 to i32*
  %v6_addc = call i32 @function_8294(i32 %v0_add4, i32* %v5_addc, i32 6, i32 65535, i32 %v1_adc4)
  %v0_ade8 = load i32, i32* @r4, align 4
  store i32 %v0_ade8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_adf4 = load i32, i32* @r5, align 4
  %v5_adf8 = inttoptr i32 %v0_ade8 to i32*
  %v6_adf8 = call i32 @function_8294(i32 %v0_adf4, i32* %v5_adf8, i32 7, i32 65535, i32 %v6_addc)
  %v0_adfc = load i32, i32* @r4, align 4
  store i32 %v0_adfc, i32* %r1.global-to-local, align 4
  %v0_ae04 = load i32, i32* @sl, align 4
  store i32 %v0_ae04, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ae0c = load i32, i32* @r5, align 4
  %v5_ae10 = inttoptr i32 %v0_adfc to i32*
  %v6_ae10 = call i32 @function_8294(i32 %v0_ae0c, i32* %v5_ae10, i32 %v0_ae04, i32 512, i32 %v6_adf8)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ae1c = load i32, i32* @r4, align 4
  store i32 %v0_ae1c, i32* %r1.global-to-local, align 4
  store i32 %v6_ae10, i32* @r8, align 4
  %v0_ae24 = load i32, i32* @r5, align 4
  %v5_ae28 = inttoptr i32 %v0_ae1c to i32*
  %v6_ae28 = call i32 @function_8294(i32 %v0_ae24, i32* %v5_ae28, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_ae34 = load i32, i32* @global_var_1f644.44, align 4
  store i32 %v2_ae34, i32* %r3.global-to-local, align 4
  %v1_ae38 = urem i32 %v6_ae28, 256
  %v0_ae3c = load i32, i32* @r4, align 4
  store i32 %v0_ae3c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_ae44 = load i32, i32* @r5, align 4
  %v5_ae4c = inttoptr i32 %v0_ae3c to i32*
  %v6_ae4c = call i32 @function_8294(i32 %v0_ae44, i32* %v5_ae4c, i32 19, i32 %v2_ae34, i32 %v1_ae38)
  %v0_ae54 = load i32, i32* @sl, align 4
  %v1_ae58 = inttoptr i32 %v0_ae54 to i32*
  %v2_ae58 = call i32 @function_126dc(i32* %v1_ae58)
  %v1_ae5c = load i32, i32* @r6, align 4
  %v2_ae5c = add i32 %v1_ae5c, %v2_ae58
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_ae70 = call i32 @function_117e8(i32 2, i32 3, i32 17)
  store i32 %v3_ae70, i32* @r0, align 4
  %v7_ae74 = icmp eq i32 %v3_ae70, -1
  store i1 %v7_ae74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ae70, i32* @sb, align 4
  br i1 %v7_ae74, label %dec_label_pc_b1f0, label %dec_label_pc_ae80

dec_label_pc_ae80:                                ; preds = %dec_label_pc_ad18
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ae88 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ae88, i32* %r3.global-to-local, align 4
  store i32 4, i32* @ip, align 4
  %v0_ae90 = load i32, i32* @sl, align 4
  store i32 %v0_ae90, i32* %r1.global-to-local, align 4
  store i32 3, i32* @r2, align 4
  %v5_ae9c = call i32 @function_11778(i32 %v3_ae70, i32 %v0_ae90, i32 3, i32 %v6_ae88, i32 ptrtoint (i32* @0 to i32))
  %v7_aea0 = icmp eq i32 %v5_ae9c, -1
  store i1 %v7_aea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aea0, label %dec_label_pc_b1e8, label %dec_label_pc_aea8

dec_label_pc_aea8:                                ; preds = %dec_label_pc_ae80
  %v0_aeac = load i32, i32* @r8, align 4
  %v3_aeb4 = urem i32 %v0_aeac, 65536
  %v3_aebc = icmp ult i32 %v3_aeb4, 1460
  %.v3_aeb4 = select i1 %v3_aebc, i32 %v3_aeb4, i32 1460
  store i32 %.v3_aeb4, i32* @fp, align 4
  %v3_aee0 = urem i32 %v7_ad80, 65536
  store i32 %v3_aee0, i32* %r1.global-to-local, align 4
  %v3_aee4 = urem i32 %v6_addc, 65536
  store i32 %v3_aee4, i32* %r3.global-to-local, align 4
  %v3_aee8 = urem i32 %v6_adf8, 65536
  store i32 %v3_aee8, i32* %r2.global-to-local, align 4
  %v2_aeec = icmp eq i32 %arg2, 0
  store i1 %v2_aeec, i1* %cpsr_z.global-to-local, align 1
  %v0_aefc = load i32, i32* @sl, align 4
  store i32 %v0_aefc, i32* %stack_var_-44, align 4
  br i1 %v2_aeec, label %dec_label_pc_b024.preheader, label %dec_label_pc_af04

dec_label_pc_af04:                                ; preds = %dec_label_pc_aea8
  %v1_af04 = add nuw nsw i32 %.v3_aeb4, 28
  %v1_af08 = add nuw nsw i32 %.v3_aeb4, 8
  %v3_af0c = mul i32 %v1_af04, 65536
  store i32 %v3_af0c, i32* %r3.global-to-local, align 4
  %v3_af10 = mul i32 %v1_af08, 65536
  store i32 %v3_af10, i32* %r2.global-to-local, align 4
  %v3_af14 = urem i32 %v1_af04, 65536
  store i32 %v3_af14, i32* @r8, align 4
  %v3_af18 = urem i32 %v1_af08, 65536
  store i32 %v3_af18, i32* @r6, align 4
  store i32 %v0_aefc, i32* @r4, align 4
  %v1_aff4 = trunc i32 %v5_adb8 to i8
  br label %dec_label_pc_af88

dec_label_pc_af24:                                ; preds = %dec_label_pc_af88, %dec_label_pc_b000
  %v2_af28 = phi i32 [ %v0_aff8, %dec_label_pc_af88 ], [ %v2_af28.pre, %dec_label_pc_b000 ]
  %v3_af28 = add i32 %v2_af28, 9
  %v4_af28 = inttoptr i32 %v3_af28 to i8*
  store i8 17, i8* %v4_af28, align 1
  %v3_af2c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_af2c, i32* %r2.global-to-local, align 4
  store i32 %v6_ae4c, i32* %r1.global-to-local, align 4
  %v3_af34 = mul i32 %v3_af2c, 32
  store i32 %v3_af34, i32* %r3.global-to-local, align 4
  %v1_af38 = load i32, i32* %r4.global-to-local, align 4
  %v2_af38 = add i32 %v1_af38, 12
  %v3_af38 = inttoptr i32 %v2_af38 to i32*
  store i32 %v6_ae4c, i32* %v3_af38, align 4
  %v0_af3c = load i32, i32* %r3.global-to-local, align 4
  %v1_af3c = load i32, i32* %r2.global-to-local, align 4
  %tmp = mul i32 %v1_af3c, -8
  %v5_af3c = add i32 %v0_af3c, %tmp
  %v1_af40 = load i32, i32* @r7, align 4
  %v2_af40 = add i32 %v1_af40, %v5_af3c
  store i32 %v2_af40, i32* %r3.global-to-local, align 4
  %v1_af44 = add i32 %v2_af40, 16
  %v2_af44 = inttoptr i32 %v1_af44 to i32*
  %v3_af44 = load i32, i32* %v2_af44, align 4
  store i32 %v3_af44, i32* %r2.global-to-local, align 4
  %v1_af4c = load i32, i32* %r4.global-to-local, align 4
  %v2_af4c = add i32 %v1_af4c, 16
  %v3_af4c = inttoptr i32 %v2_af4c to i32*
  store i32 %v3_af44, i32* %v3_af4c, align 4
  %v1_af50 = call i32 @function_114e0(i32 %v3_aee4)
  %v2_af50 = trunc i32 %v1_af50 to i16
  %v3_af54 = load i32, i32* %r4.global-to-local, align 4
  %v4_af54 = add i32 %v3_af54, 20
  %v5_af54 = inttoptr i32 %v4_af54 to i16*
  store i16 %v2_af50, i16* %v5_af54, align 2
  %v1_af5c = call i32 @function_114e0(i32 %v3_aee8)
  %v2_af5c = trunc i32 %v1_af5c to i16
  %v3_af60 = load i32, i32* @r5, align 4
  %v4_af60 = add i32 %v3_af60, 2
  %v5_af60 = inttoptr i32 %v4_af60 to i16*
  store i16 %v2_af5c, i16* %v5_af60, align 2
  %v0_af64 = load i32, i32* @r6, align 4
  %v1_af68 = call i32 @function_114e0(i32 %v0_af64)
  %v2_af68 = trunc i32 %v1_af68 to i16
  %v3_af6c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_af6c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_af74 = add i32 %v3_af6c, 1
  store i32 %v1_af74, i32* @r4, align 4
  %v9_af78 = icmp eq i32 %v1_af74, %arg2
  store i1 %v9_af78, i1* %cpsr_z.global-to-local, align 1
  %v3_af7c = load i32, i32* @r5, align 4
  %v4_af7c = add i32 %v3_af7c, 4
  %v5_af7c = inttoptr i32 %v4_af7c to i16*
  store i16 %v2_af68, i16* %v5_af7c, align 2
  %v0_af80 = load i32, i32* @r4, align 4
  store i32 %v0_af80, i32* %stack_var_-44, align 4
  %v6_af84 = icmp slt i32 %v1_af74, %arg2
  br i1 %v6_af84, label %dec_label_pc_af88, label %dec_label_pc_b024.preheader

dec_label_pc_b024.preheader:                      ; preds = %dec_label_pc_af24, %dec_label_pc_aea8
  %v2_b04c = icmp eq i32 %v6_ae4c, -1
  %v7_b04c = icmp eq i32 %v6_ae4c, -1
  %v3_b184 = icmp eq i32 %v3_aee0, 65535
  %v2_b1c0 = icmp eq i32 %v1_ae38, 0
  br label %dec_label_pc_b024

dec_label_pc_af88:                                ; preds = %dec_label_pc_af24, %dec_label_pc_af04
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_af94 = call i32 @function_fea0(i32 1510, i32 1)
  store i32 %v2_ad44, i32* %r1.global-to-local, align 4
  %v3_af9c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_af9c, i32* %r3.global-to-local, align 4
  %v2_afa0 = load i32, i32* @r4, align 4
  %v5_afa0 = mul i32 %v2_afa0, 4
  %v6_afa0 = add i32 %v5_afa0, %v2_ad44
  %v7_afa0 = inttoptr i32 %v6_afa0 to i32*
  store i32 %v2_af94, i32* %v7_afa0, align 4
  %v0_afa4 = load i32, i32* %r1.global-to-local, align 4
  %v1_afa4 = load i32, i32* %r3.global-to-local, align 4
  %v4_afa4 = mul i32 %v1_afa4, 4
  %v5_afa4 = add i32 %v4_afa4, %v0_afa4
  %v6_afa4 = inttoptr i32 %v5_afa4 to i32*
  %v7_afa4 = load i32, i32* %v6_afa4, align 4
  store i32 %v7_afa4, i32* %r4.global-to-local, align 4
  %v1_afa8 = inttoptr i32 %v7_afa4 to i8*
  %v2_afa8 = load i8, i8* %v1_afa8, align 1
  %tmp37 = urem i8 %v2_afa8, 16
  %v1_afac = zext i8 %tmp37 to i32
  %v1_afb0 = or i32 %v1_afac, 64
  store i32 %v1_afb0, i32* %r2.global-to-local, align 4
  %v1_afb4 = trunc i32 %v1_afb0 to i8
  store i8 %v1_afb4, i8* %v1_afa8, align 1
  %v0_afb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_afb8 = inttoptr i32 %v0_afb8 to i8*
  %v2_afb8 = load i8, i8* %v1_afb8, align 1
  %v3_afb8 = zext i8 %v2_afb8 to i32
  %v1_afbc = and i32 %v3_afb8, 240
  %v1_afc0 = or i32 %v1_afbc, 5
  store i32 %v1_afc0, i32* %r3.global-to-local, align 4
  %v1_afc4 = trunc i32 %v1_afc0 to i8
  store i8 %v1_afc4, i8* %v1_afb8, align 1
  store i32 %v6_ad5c, i32* %r2.global-to-local, align 4
  %v0_afcc = load i32, i32* @r8, align 4
  %v2_afd0 = load i32, i32* %r4.global-to-local, align 4
  %v3_afd0 = add i32 %v2_afd0, 1
  %v4_afd0 = inttoptr i32 %v3_afd0 to i8*
  store i8 %v5_ad7c, i8* %v4_afd0, align 1
  %v1_afd4 = call i32 @function_114e0(i32 %v0_afcc)
  %v2_afd4 = trunc i32 %v1_afd4 to i16
  %v3_afd8 = load i32, i32* %r4.global-to-local, align 4
  %v4_afd8 = add i32 %v3_afd8, 2
  %v5_afd8 = inttoptr i32 %v4_afd8 to i16*
  store i16 %v2_afd4, i16* %v5_afd8, align 2
  %v1_afe0 = call i32 @function_114e0(i32 %v3_aee0)
  %v2_afe0 = trunc i32 %v1_afe0 to i16
  store i32 %v1_adc4, i32* %r3.global-to-local, align 4
  %v3_afe8 = load i32, i32* %r4.global-to-local, align 4
  %v4_afe8 = add i32 %v3_afe8, 4
  %v5_afe8 = inttoptr i32 %v4_afe8 to i16*
  store i16 %v2_afe0, i16* %v5_afe8, align 2
  %v0_aff0 = load i32, i32* %r3.global-to-local, align 4
  %v2_aff0 = icmp eq i32 %v0_aff0, 0
  store i1 %v2_aff0, i1* %cpsr_z.global-to-local, align 1
  %v2_aff4 = load i32, i32* %r4.global-to-local, align 4
  %v3_aff4 = add i32 %v2_aff4, 8
  %v4_aff4 = inttoptr i32 %v3_aff4 to i8*
  store i8 %v1_aff4, i8* %v4_aff4, align 1
  %v0_aff8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aff8 = add i32 %v0_aff8, 20
  store i32 %v1_aff8, i32* @r5, align 4
  %v0_affc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_affc, label %dec_label_pc_af24, label %dec_label_pc_b000

dec_label_pc_b000:                                ; preds = %dec_label_pc_af88
  %v1_b004 = call i32 @function_114e0(i32 16384)
  %v2_b004 = trunc i32 %v1_b004 to i16
  %v3_b008 = load i32, i32* %r4.global-to-local, align 4
  %v4_b008 = add i32 %v3_b008, 6
  %v5_b008 = inttoptr i32 %v4_b008 to i16*
  store i16 %v2_b004, i16* %v5_b008, align 2
  %v2_af28.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_af24

dec_label_pc_b010:                                ; preds = %dec_label_pc_b08c, %dec_label_pc_b024
  %v2_b014 = call i32 @function_126dc(i32* null)
  store i32 %v2_ae5c, i32* %r2.global-to-local, align 4
  %v9_b01c = icmp eq i32 %v2_ae5c, %v2_b014
  store i1 %v9_b01c, i1* %cpsr_z.global-to-local, align 1
  %v5_b020 = icmp slt i32 %v2_ae5c, %v2_b014
  br i1 %v5_b020, label %dec_label_pc_b1f0, label %dec_label_pc_b024

dec_label_pc_b024:                                ; preds = %dec_label_pc_b024.preheader, %dec_label_pc_b010
  store i1 %v2_aeec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aeec, label %dec_label_pc_b010, label %dec_label_pc_b038

dec_label_pc_b038:                                ; preds = %dec_label_pc_b024
  %v0_b03c = load i32, i32* @fp, align 4
  %v1_b03c = add i32 %v0_b03c, 8
  store i32 %v1_b03c, i32* @sl, align 4
  %v1_b040 = add i32 %v0_b03c, 28
  store i32 %v1_b040, i32* @r8, align 4
  br label %dec_label_pc_b114

dec_label_pc_b048:                                ; preds = %dec_label_pc_b114
  store i32 %v6_ae4c, i32* %r2.global-to-local, align 4
  store i1 %v7_b04c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b04c, label %dec_label_pc_b174, label %dec_label_pc_b054

dec_label_pc_b054:                                ; preds = %dec_label_pc_b138, %dec_label_pc_b048
  store i32 %v3_aee0, i32* @r3, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b184, label %dec_label_pc_b190, label %dec_label_pc_b068

dec_label_pc_b068:                                ; preds = %dec_label_pc_b174.dec_label_pc_b068_crit_edge, %dec_label_pc_b054
  %v1_b06c = phi i32 [ %v1_b06c.pre, %dec_label_pc_b174.dec_label_pc_b068_crit_edge ], [ 65535, %dec_label_pc_b054 ]
  %v9_b06c = icmp eq i32 %v3_aee4, %v1_b06c
  store i1 %v9_b06c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b06c, label %dec_label_pc_b1a4, label %dec_label_pc_b074

dec_label_pc_b074:                                ; preds = %dec_label_pc_b190, %dec_label_pc_b068
  %v1_b078 = phi i32 [ %v1_b19c, %dec_label_pc_b190 ], [ %v1_b06c, %dec_label_pc_b068 ]
  store i32 %v3_aee8, i32* %r1.global-to-local, align 4
  %v9_b078 = icmp eq i32 %v3_aee8, %v1_b078
  store i1 %v9_b078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b078, label %dec_label_pc_b1b8, label %dec_label_pc_b080

dec_label_pc_b080:                                ; preds = %dec_label_pc_b1a4, %dec_label_pc_b074
  store i32 %v1_ae38, i32* %r2.global-to-local, align 4
  store i1 %v2_b1c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b1c0, label %dec_label_pc_b08c, label %dec_label_pc_b1cc

dec_label_pc_b08c:                                ; preds = %dec_label_pc_b080, %dec_label_pc_b1b8, %dec_label_pc_b1cc
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b090 = load i32, i32* @r5, align 4
  %v3_b090 = add i32 %v2_b090, 10
  %v4_b090 = inttoptr i32 %v3_b090 to i16*
  store i16 0, i16* %v4_b090, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b098 = load i32, i32* @r5, align 4
  store i32 %v0_b098, i32* @r0, align 4
  %v2_b09c = call i32 @function_bd1c(i32 %v0_b098, i32 20)
  %v3_b09c = trunc i32 %v2_b09c to i16
  %v3_b0a0 = load i32, i32* @r5, align 4
  %v4_b0a0 = add i32 %v3_b0a0, 10
  %v5_b0a0 = inttoptr i32 %v4_b0a0 to i16*
  store i16 %v3_b09c, i16* %v5_b0a0, align 2
  %v2_b0a8 = load i32, i32* @r6, align 4
  %v3_b0a8 = add i32 %v2_b0a8, 6
  %v4_b0a8 = inttoptr i32 %v3_b0a8 to i16*
  store i16 0, i16* %v4_b0a8, align 2
  %v0_b0ac = load i32, i32* @r6, align 4
  store i32 %v0_b0ac, i32* @r1, align 4
  %v1_b0b0 = add i32 %v0_b0ac, 4
  %v2_b0b0 = inttoptr i32 %v1_b0b0 to i16*
  %v3_b0b0 = load i16, i16* %v2_b0b0, align 2
  %v4_b0b0 = zext i16 %v3_b0b0 to i32
  store i32 %v4_b0b0, i32* %r2.global-to-local, align 4
  %v0_b0b4 = load i32, i32* @sl, align 4
  store i32 %v0_b0b4, i32* %r3.global-to-local, align 4
  %v0_b0b8 = load i32, i32* @r5, align 4
  %v4_b0bc = call i32 @function_bd6c(i32 %v0_b0b8, i32 %v0_b0ac, i32 %v4_b0b0, i32 %v0_b0b4)
  %v5_b0bc = trunc i32 %v4_b0bc to i16
  %v3_b0c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b0c0, i32* %r3.global-to-local, align 4
  %v3_b0c4 = mul i32 %v3_b0c0, 32
  store i32 %v3_b0c4, i32* %lr.global-to-local, align 4
  %v3_b0c8 = load i32, i32* @r6, align 4
  %v4_b0c8 = add i32 %v3_b0c8, 6
  %v5_b0c8 = inttoptr i32 %v4_b0c8 to i16*
  store i16 %v5_b0bc, i16* %v5_b0c8, align 2
  %v0_b0cc = load i32, i32* %lr.global-to-local, align 4
  %v1_b0cc = load i32, i32* %r3.global-to-local, align 4
  %tmp38 = mul i32 %v1_b0cc, -8
  %v5_b0cc = add i32 %v0_b0cc, %tmp38
  store i32 %v5_b0cc, i32* %lr.global-to-local, align 4
  %v0_b0d0 = load i32, i32* @r6, align 4
  %v1_b0d0 = add i32 %v0_b0d0, 2
  %v2_b0d0 = inttoptr i32 %v1_b0d0 to i16*
  %v3_b0d0 = load i16, i16* %v2_b0d0, align 2
  %v4_b0d0 = zext i16 %v3_b0d0 to i32
  store i32 %v4_b0d0, i32* @r6, align 4
  %v1_b0d4 = load i32, i32* @r7, align 4
  %v2_b0d4 = add i32 %v1_b0d4, %v5_b0cc
  store i32 %v2_b0d4, i32* @lr, align 4
  %v3_b0d8 = add i32 %v2_b0d4, 2
  %v4_b0d8 = inttoptr i32 %v3_b0d8 to i16*
  store i16 %v3_b0d0, i16* %v4_b0d8, align 2
  %v0_b0dc = load i32, i32* @r5, align 4
  store i32 %v0_b0dc, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b0e8 = load i32, i32* @sb, align 4
  store i32 %v0_b0e8, i32* @r0, align 4
  %v0_b0ec = load i32, i32* @r8, align 4
  store i32 %v0_b0ec, i32* @r2, align 4
  %v0_b0f8 = call i32 @function_1172c()
  %v3_b0fc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b0fc, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_b104 = add i32 %v3_b0fc, 1
  %v9_b108 = icmp eq i32 %v1_b104, %arg2
  store i1 %v9_b108, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b104, i32* %stack_var_-44, align 4
  %v6_b110 = icmp slt i32 %v1_b104, %arg2
  br i1 %v6_b110, label %dec_label_pc_b114, label %dec_label_pc_b010

dec_label_pc_b114:                                ; preds = %dec_label_pc_b08c, %dec_label_pc_b038
  %v1_b128 = phi i32 [ %v1_b104, %dec_label_pc_b08c ], [ 0, %dec_label_pc_b038 ]
  %v5_b118 = mul i32 %v1_b128, 24
  %v1_b11c = load i32, i32* @r7, align 4
  %v2_b11c = add i32 %v1_b11c, %v5_b118
  store i32 %v2_b11c, i32* %r3.global-to-local, align 4
  store i32 %v2_ad44, i32* %r1.global-to-local, align 4
  %v1_b124 = add i32 %v2_b11c, 20
  %v2_b124 = inttoptr i32 %v1_b124 to i8*
  %v3_b124 = load i8, i8* %v2_b124, align 1
  %v4_b124 = zext i8 %v3_b124 to i32
  store i32 %v4_b124, i32* %r2.global-to-local, align 4
  %v4_b128 = mul i32 %v1_b128, 4
  %v5_b128 = add i32 %v4_b128, %v2_ad44
  %v6_b128 = inttoptr i32 %v5_b128 to i32*
  %v7_b128 = load i32, i32* %v6_b128, align 4
  store i32 %v7_b128, i32* @r5, align 4
  %v2_b12c = icmp ugt i8 %v3_b124, 30
  %v7_b12c = icmp eq i8 %v3_b124, 31
  store i1 %v7_b12c, i1* %cpsr_z.global-to-local, align 1
  %v1_b130 = add i32 %v7_b128, 20
  store i32 %v1_b130, i32* @r6, align 4
  %v2_b134 = xor i1 %v7_b12c, true
  %v3_b134 = and i1 %v2_b12c, %v2_b134
  br i1 %v3_b134, label %dec_label_pc_b048, label %dec_label_pc_b138

dec_label_pc_b138:                                ; preds = %dec_label_pc_b114
  %v1_b138 = add i32 %v2_b11c, 16
  %v2_b138 = inttoptr i32 %v1_b138 to i32*
  %v3_b138 = load i32, i32* %v2_b138, align 4
  %v1_b13c = call i32 @function_11664(i32 %v3_b138)
  store i32 %v1_b13c, i32* %r4.global-to-local, align 4
  %v0_b144 = call i32 @function_d1c4()
  %v3_b148 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b148, i32* %r2.global-to-local, align 4
  %v5_b150 = mul i32 %v3_b148, 24
  %v1_b154 = load i32, i32* @r7, align 4
  %v2_b154 = add i32 %v1_b154, %v5_b150
  store i32 %v2_b154, i32* %r3.global-to-local, align 4
  %v1_b158 = add i32 %v2_b154, 20
  %v2_b158 = inttoptr i32 %v1_b158 to i8*
  %v3_b158 = load i8, i8* %v2_b158, align 1
  %v4_b158 = zext i8 %v3_b158 to i32
  store i32 %v4_b158, i32* %r2.global-to-local, align 4
  %v0_b15c = load i32, i32* %r4.global-to-local, align 4
  %v7_b15c = lshr i32 %v0_b144, %v4_b158
  %v8_b15c = add i32 %v7_b15c, %v0_b15c
  %v1_b160 = call i32 @function_114bc(i32 %v8_b15c)
  store i32 %v6_ae4c, i32* %r2.global-to-local, align 4
  store i1 %v7_b04c, i1* %cpsr_z.global-to-local, align 1
  %v1_b16c = load i32, i32* @r5, align 4
  %v2_b16c = add i32 %v1_b16c, 16
  %v3_b16c = inttoptr i32 %v2_b16c to i32*
  store i32 %v1_b160, i32* %v3_b16c, align 4
  br i1 %v2_b04c, label %dec_label_pc_b174, label %dec_label_pc_b054

dec_label_pc_b174:                                ; preds = %dec_label_pc_b138, %dec_label_pc_b048
  %v0_b174 = call i32 @function_d1c4()
  store i32 %v3_aee0, i32* @r3, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b184, i1* %cpsr_z.global-to-local, align 1
  %v1_b188 = load i32, i32* @r5, align 4
  %v2_b188 = add i32 %v1_b188, 12
  %v3_b188 = inttoptr i32 %v2_b188 to i32*
  store i32 %v0_b174, i32* %v3_b188, align 4
  br i1 %v3_b184, label %dec_label_pc_b190, label %dec_label_pc_b174.dec_label_pc_b068_crit_edge

dec_label_pc_b174.dec_label_pc_b068_crit_edge:    ; preds = %dec_label_pc_b174
  %v1_b06c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b068

dec_label_pc_b190:                                ; preds = %dec_label_pc_b174, %dec_label_pc_b054
  %v0_b190 = call i32 @function_d1c4()
  %v1_b190 = trunc i32 %v0_b190 to i16
  %v3_b194 = load i32, i32* @r5, align 4
  %v4_b194 = add i32 %v3_b194, 4
  %v5_b194 = inttoptr i32 %v4_b194 to i16*
  store i16 %v1_b190, i16* %v5_b194, align 2
  %v1_b19c = load i32, i32* @r4, align 4
  %v9_b19c = icmp eq i32 %v3_aee4, %v1_b19c
  store i1 %v9_b19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b19c, label %dec_label_pc_b1a4, label %dec_label_pc_b074

dec_label_pc_b1a4:                                ; preds = %dec_label_pc_b190, %dec_label_pc_b068
  %v0_b1a4 = call i32 @function_d1c4()
  %v1_b1a4 = trunc i32 %v0_b1a4 to i16
  store i32 %v3_aee8, i32* %r1.global-to-local, align 4
  %v1_b1ac = load i32, i32* @r4, align 4
  %v9_b1ac = icmp eq i32 %v3_aee8, %v1_b1ac
  store i1 %v9_b1ac, i1* %cpsr_z.global-to-local, align 1
  %v3_b1b0 = load i32, i32* @r5, align 4
  %v4_b1b0 = add i32 %v3_b1b0, 20
  %v5_b1b0 = inttoptr i32 %v4_b1b0 to i16*
  store i16 %v1_b1a4, i16* %v5_b1b0, align 2
  br i1 %v9_b1ac, label %dec_label_pc_b1b8, label %dec_label_pc_b080

dec_label_pc_b1b8:                                ; preds = %dec_label_pc_b1a4, %dec_label_pc_b074
  %v0_b1b8 = call i32 @function_d1c4()
  %v1_b1b8 = trunc i32 %v0_b1b8 to i16
  store i32 %v1_ae38, i32* %r2.global-to-local, align 4
  store i1 %v2_b1c0, i1* %cpsr_z.global-to-local, align 1
  %v3_b1c4 = load i32, i32* @r6, align 4
  %v4_b1c4 = add i32 %v3_b1c4, 2
  %v5_b1c4 = inttoptr i32 %v4_b1c4 to i16*
  store i16 %v1_b1b8, i16* %v5_b1c4, align 2
  br i1 %v2_b1c0, label %dec_label_pc_b08c, label %dec_label_pc_b1cc

dec_label_pc_b1cc:                                ; preds = %dec_label_pc_b080, %dec_label_pc_b1b8
  %v0_b1cc = load i32, i32* @r5, align 4
  %v1_b1cc = add i32 %v0_b1cc, 28
  store i32 %v1_b1cc, i32* @r4, align 4
  %v0_b1d4 = load i32, i32* @fp, align 4
  store i32 %v0_b1d4, i32* %r1.global-to-local, align 4
  %v2_b1d8 = call i32 @function_d288(i32 %v1_b1cc, i32 %v0_b1d4)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b1e0 = load i32, i32* @fp, align 4
  %v3_b1e0 = load i32, i32* @r4, align 4
  %v4_b1e0 = add i32 %v3_b1e0, %v2_b1e0
  %v5_b1e0 = inttoptr i32 %v4_b1e0 to i8*
  store i8 0, i8* %v5_b1e0, align 1
  br label %dec_label_pc_b08c

dec_label_pc_b1e8:                                ; preds = %dec_label_pc_ae80
  %v0_b1e8 = load i32, i32* @sb, align 4
  %v1_b1ec = call i32 @function_12714(i32 %v0_b1e8)
  br label %dec_label_pc_b1f0

dec_label_pc_b1f0:                                ; preds = %dec_label_pc_b010, %dec_label_pc_ad18, %dec_label_pc_b1e8
  %v1_b1f8 = phi i32 [ %v3_ae70, %dec_label_pc_ad18 ], [ %v1_b1ec, %dec_label_pc_b1e8 ], [ %v2_b014, %dec_label_pc_b010 ]
  store i32 %v3_ad18, i32* %r4.global-to-local, align 4
  store i32 %v27_ad18, i32* %lr.global-to-local, align 4
  ret i32 %v1_b1f8

; uselistorder directives
  uselistorder i32 %v1_b19c, { 1, 0 }
  uselistorder i32 %v1_b104, { 1, 2, 0, 3 }
  uselistorder i32 %v5_b0cc, { 1, 0 }
  uselistorder i32 %v0_aff8, { 1, 0 }
  uselistorder i1 %v2_b1c0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_b184, { 1, 0, 2, 3 }
  uselistorder i1 %v7_b04c, { 2, 1, 0 }
  uselistorder i32 %v1_af08, { 1, 0 }
  uselistorder i32 %v1_af04, { 1, 0 }
  uselistorder i1 %v2_aeec, { 1, 0, 2, 3 }
  uselistorder i32 %v3_aee0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %.v3_aeb4, { 1, 0, 2 }
  uselistorder i32 %v3_aeb4, { 1, 0 }
  uselistorder i1 %v7_aea0, { 1, 0 }
  uselistorder i1 %v7_ae74, { 1, 0 }
  uselistorder i32 %v3_ae70, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_ae5c, { 2, 1, 0 }
  uselistorder i32 %v6_ae4c, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_ae38, { 1, 0, 2, 3 }
  uselistorder i32 %v5_adb8, { 1, 0 }
  uselistorder i32 %v6_ad5c, { 1, 0, 2 }
  uselistorder i32 %v2_ad44, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 9, 3, 4, 5, 6, 7, 8, 10, 15, 16, 17, 18, 19, 11, 12, 13, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 14, 15, 10, 11, 12, 13, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 6, 3, 4, 5, 8, 9, 10, 7, 11, 12, 13, 14, 15, 17, 16, 18, 19, 21, 20, 23, 22, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 12, 15, 16, 14, 17, 18, 19 }
  uselistorder i32 %arg2, { 6, 5, 4, 3, 2, 1, 0, 7, 8 }
  uselistorder label %dec_label_pc_b1f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b1cc, { 1, 0 }
  uselistorder label %dec_label_pc_b08c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b024, { 1, 0 }
  uselistorder label %dec_label_pc_af24, { 1, 0 }
}

define i32 @function_b200(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b200:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_b200 = load i32, i32* @r4, align 4
  %v27_b200 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b22c = call i32 @function_fea0(i32 %arg2, i32 4)
  %v0_b230 = load i32, i32* @r4, align 4
  store i32 %v0_b230, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b238 = load i32, i32* @r7, align 4
  store i32 %v0_b238, i32* %r3.global-to-local, align 4
  store i32 %v2_b22c, i32* @sb, align 4
  %v0_b240 = load i32, i32* @r5, align 4
  %v5_b244 = inttoptr i32 %v0_b230 to i32*
  %v6_b244 = call i32 @function_8294(i32 %v0_b240, i32* %v5_b244, i32 2, i32 %v0_b238, i32 ptrtoint (i32* @0 to i32))
  %v0_b254 = load i32, i32* @r4, align 4
  store i32 %v0_b254, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b260 = load i32, i32* @r5, align 4
  %v5_b264 = trunc i32 %v6_b244 to i8
  %v6_b268 = inttoptr i32 %v0_b254 to i32*
  %v7_b268 = call i32 @function_8294(i32 %v0_b260, i32* %v6_b268, i32 3, i32 65535, i32 %v6_b244)
  %v0_b26c = load i32, i32* @r4, align 4
  store i32 %v0_b26c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b27c = load i32, i32* @r5, align 4
  %v5_b280 = inttoptr i32 %v0_b26c to i32*
  %v6_b280 = call i32 @function_8294(i32 %v0_b27c, i32* %v5_b280, i32 4, i32 64, i32 %v7_b268)
  %v0_b288 = load i32, i32* @r4, align 4
  store i32 %v0_b288, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b294 = load i32, i32* @r7, align 4
  store i32 %v0_b294, i32* %r3.global-to-local, align 4
  %v0_b298 = load i32, i32* @r5, align 4
  %sext = mul i32 %v6_b280, 16777216
  %v5_b2a0 = sdiv i32 %sext, 16777216
  %v6_b2a0 = inttoptr i32 %v0_b288 to i32*
  %v7_b2a0 = call i32 @function_8294(i32 %v0_b298, i32* %v6_b2a0, i32 5, i32 %v0_b294, i32 %v5_b2a0)
  %v1_b2ac = urem i32 %v7_b2a0, 256
  %v0_b2b0 = load i32, i32* @r4, align 4
  store i32 %v0_b2b0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b2bc = load i32, i32* @r5, align 4
  %v5_b2c4 = inttoptr i32 %v0_b2b0 to i32*
  %v6_b2c4 = call i32 @function_8294(i32 %v0_b2bc, i32* %v5_b2c4, i32 6, i32 65535, i32 %v1_b2ac)
  %v0_b2cc = load i32, i32* @r4, align 4
  store i32 %v0_b2cc, i32* %r1.global-to-local, align 4
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b2dc = load i32, i32* @r5, align 4
  %v5_b2e0 = inttoptr i32 %v0_b2cc to i32*
  %v6_b2e0 = call i32 @function_8294(i32 %v0_b2dc, i32* %v5_b2e0, i32 7, i32 27015, i32 %v6_b2c4)
  store i32 %v6_b2e0, i32* @r4, align 4
  %v0_b2e8 = load i32, i32* @r7, align 4
  store i32 %v0_b2e8, i32* %stack_var_-48, align 4
  %v1_b2f0 = inttoptr i32 %v0_b2e8 to i32*
  %v2_b2f0 = call i32 @function_126dc(i32* %v1_b2f0)
  %v1_b2f4 = load i32, i32* @r6, align 4
  %v2_b2f4 = add i32 %v1_b2f4, %v2_b2f0
  %v1_b300 = call i32 @function_edb4(i32 10)
  %v2_b304 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_b304, i32* %r1.global-to-local, align 4
  %v3_b30c = call i32 @function_ecf0(i32 10, i32* nonnull %stack_var_-48)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v3_b30c, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b320 = call i32 @function_117e8(i32 2, i32 3, i32 17)
  store i32 %v3_b320, i32* @r0, align 4
  %v7_b324 = icmp eq i32 %v3_b320, -1
  store i1 %v7_b324, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b320, i32* @sl, align 4
  br i1 %v7_b324, label %dec_label_pc_b628, label %dec_label_pc_b330

dec_label_pc_b330:                                ; preds = %dec_label_pc_b200
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b338 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b338, i32* %r3.global-to-local, align 4
  %v0_b340 = load i32, i32* @r7, align 4
  store i32 %v0_b340, i32* %r1.global-to-local, align 4
  store i32 3, i32* @r2, align 4
  %v5_b34c = call i32 @function_11778(i32 %v3_b320, i32 %v0_b340, i32 3, i32 %v6_b338, i32 ptrtoint (i32* @0 to i32))
  %v7_b350 = icmp eq i32 %v5_b34c, -1
  store i1 %v7_b350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b350, label %dec_label_pc_b620, label %dec_label_pc_b358

dec_label_pc_b358:                                ; preds = %dec_label_pc_b330
  %v0_b368 = load i32, i32* @r4, align 4
  %v3_b36c = urem i32 %v7_b268, 65536
  store i32 %v3_b36c, i32* %r3.global-to-local, align 4
  %v3_b370 = urem i32 %v6_b2c4, 65536
  store i32 %v3_b370, i32* %r2.global-to-local, align 4
  %v3_b374 = urem i32 %v0_b368, 65536
  store i32 %v3_b374, i32* %r1.global-to-local, align 4
  %v0_b378 = load i32, i32* @fp, align 4
  %v2_b378 = icmp eq i32 %v0_b378, 0
  store i1 %v2_b378, i1* %cpsr_z.global-to-local, align 1
  %v0_b388 = load i32, i32* @r7, align 4
  store i32 %v0_b388, i32* %stack_var_-44, align 4
  br i1 %v2_b378, label %dec_label_pc_b4c0.preheader, label %dec_label_pc_b390

dec_label_pc_b4c0.preheader:                      ; preds = %dec_label_pc_b398, %dec_label_pc_b358
  %v0_b4c4.ph = phi i32 [ 0, %dec_label_pc_b358 ], [ %v1_b414, %dec_label_pc_b398 ]
  %v3_b4dc = icmp eq i32 %v3_b36c, 65535
  br label %dec_label_pc_b4c0

dec_label_pc_b390:                                ; preds = %dec_label_pc_b358
  store i32 %v0_b388, i32* @r4, align 4
  %v2_b488 = icmp eq i32 %v1_b2ac, 0
  br label %dec_label_pc_b420

dec_label_pc_b398:                                ; preds = %dec_label_pc_b420, %dec_label_pc_b49c
  %v2_b39c = phi i32 [ %v0_b494, %dec_label_pc_b420 ], [ %v2_b39c.pre, %dec_label_pc_b49c ]
  %v3_b39c = add i32 %v2_b39c, 9
  %v4_b39c = inttoptr i32 %v3_b39c to i8*
  store i8 17, i8* %v4_b39c, align 1
  %v3_b3a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b3a4, i32* %r1.global-to-local, align 4
  %v2_b3a8 = load i32, i32* @global_var_1f644.44, align 4
  store i32 %v2_b3a8, i32* %r2.global-to-local, align 4
  %v5_b3b0 = mul i32 %v3_b3a4, 24
  store i32 %v5_b3b0, i32* %r3.global-to-local, align 4
  %v1_b3b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b3b4 = add i32 %v1_b3b4, 12
  %v3_b3b4 = inttoptr i32 %v2_b3b4 to i32*
  store i32 %v2_b3a8, i32* %v3_b3b4, align 4
  %v0_b3b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3b8 = load i32, i32* @r8, align 4
  %v2_b3b8 = add i32 %v1_b3b8, %v0_b3b8
  store i32 %v2_b3b8, i32* %r3.global-to-local, align 4
  %v1_b3bc = add i32 %v2_b3b8, 16
  %v2_b3bc = inttoptr i32 %v1_b3bc to i32*
  %v3_b3bc = load i32, i32* %v2_b3bc, align 4
  store i32 %v3_b3bc, i32* %r2.global-to-local, align 4
  %v1_b3c4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b3c4 = add i32 %v1_b3c4, 16
  %v3_b3c4 = inttoptr i32 %v2_b3c4 to i32*
  store i32 %v3_b3bc, i32* %v3_b3c4, align 4
  %v1_b3c8 = call i32 @function_114e0(i32 %v3_b370)
  %v2_b3c8 = trunc i32 %v1_b3c8 to i16
  %v3_b3cc = load i32, i32* %r4.global-to-local, align 4
  %v4_b3cc = add i32 %v3_b3cc, 20
  %v5_b3cc = inttoptr i32 %v4_b3cc to i16*
  store i16 %v2_b3c8, i16* %v5_b3cc, align 2
  %v1_b3d4 = call i32 @function_114e0(i32 %v3_b374)
  %v2_b3d4 = trunc i32 %v1_b3d4 to i16
  %v3_b3d8 = load i32, i32* %stack_var_-48, align 4
  %v1_b3dc = mul i32 %v3_b3d8, 65536
  %v3_b3e0 = add i32 %v1_b3dc, 786432
  store i32 %v3_b3e0, i32* %r3.global-to-local, align 4
  %v3_b3e4 = load i32, i32* @r5, align 4
  %v4_b3e4 = add i32 %v3_b3e4, 2
  %v5_b3e4 = inttoptr i32 %v4_b3e4 to i16*
  store i16 %v2_b3d4, i16* %v5_b3e4, align 2
  %v0_b3e8 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3e8 = udiv i32 %v0_b3e8, 65536
  %v1_b3ec = call i32 @function_114e0(i32 %v3_b3e8)
  %v2_b3ec = trunc i32 %v1_b3ec to i16
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_b3f4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b3f4 = add i32 %v1_b3f4, 28
  %v3_b3f4 = inttoptr i32 %v2_b3f4 to i32*
  store i32 -1, i32* %v3_b3f4, align 4
  %v3_b3f8 = load i32, i32* @r5, align 4
  %v4_b3f8 = add i32 %v3_b3f8, 4
  %v5_b3f8 = inttoptr i32 %v4_b3f8 to i16*
  store i16 %v2_b3ec, i16* %v5_b3f8, align 2
  %v0_b3fc = load i32, i32* @r6, align 4
  store i32 %v0_b3fc, i32* %r1.global-to-local, align 4
  %v0_b400 = load i32, i32* %r4.global-to-local, align 4
  %v1_b400 = add i32 %v0_b400, 32
  %v3_b404 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b404, i32* %r2.global-to-local, align 4
  %v3_b408 = call i32 @function_f280(i32 %v1_b400, i32 %v0_b3fc, i32 %v3_b404)
  %v3_b40c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b40c, i32* %r3.global-to-local, align 4
  %v1_b410 = add i32 %v3_b40c, 1
  store i32 %v1_b410, i32* @r4, align 4
  %v1_b414 = load i32, i32* @fp, align 4
  %v9_b414 = icmp eq i32 %v1_b410, %v1_b414
  store i1 %v9_b414, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b410, i32* %stack_var_-44, align 4
  %v6_b41c = icmp slt i32 %v1_b410, %v1_b414
  br i1 %v6_b41c, label %dec_label_pc_b420, label %dec_label_pc_b4c0.preheader

dec_label_pc_b420:                                ; preds = %dec_label_pc_b398, %dec_label_pc_b390
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_b428 = call i32 @function_fea0(i32 128, i32 1)
  %v3_b42c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b42c, i32* %r2.global-to-local, align 4
  %v1_b430 = load i32, i32* @sb, align 4
  %v2_b430 = load i32, i32* @r4, align 4
  %v5_b430 = mul i32 %v2_b430, 4
  %v6_b430 = add i32 %v5_b430, %v1_b430
  %v7_b430 = inttoptr i32 %v6_b430 to i32*
  store i32 %v2_b428, i32* %v7_b430, align 4
  %v0_b434 = load i32, i32* @sb, align 4
  %v1_b434 = load i32, i32* %r2.global-to-local, align 4
  %v4_b434 = mul i32 %v1_b434, 4
  %v5_b434 = add i32 %v4_b434, %v0_b434
  %v6_b434 = inttoptr i32 %v5_b434 to i32*
  %v7_b434 = load i32, i32* %v6_b434, align 4
  store i32 %v7_b434, i32* %r4.global-to-local, align 4
  %v1_b438 = inttoptr i32 %v7_b434 to i8*
  %v2_b438 = load i8, i8* %v1_b438, align 1
  %tmp = urem i8 %v2_b438, 16
  %v1_b43c = zext i8 %tmp to i32
  %v1_b440 = or i32 %v1_b43c, 64
  store i32 %v1_b440, i32* %r3.global-to-local, align 4
  %v1_b444 = trunc i32 %v1_b440 to i8
  store i8 %v1_b444, i8* %v1_b438, align 1
  %v0_b448 = load i32, i32* %r4.global-to-local, align 4
  %v1_b448 = inttoptr i32 %v0_b448 to i8*
  %v2_b448 = load i8, i8* %v1_b448, align 1
  %v1_b44c = and i8 %v2_b448, -16
  %v1_b450 = or i8 %v1_b44c, 5
  store i8 %v1_b450, i8* %v1_b448, align 1
  store i32 %v6_b244, i32* %r2.global-to-local, align 4
  %v2_b45c = load i32, i32* %r4.global-to-local, align 4
  %v3_b45c = add i32 %v2_b45c, 1
  %v4_b45c = inttoptr i32 %v3_b45c to i8*
  store i8 %v5_b264, i8* %v4_b45c, align 1
  %v3_b460 = load i32, i32* %stack_var_-48, align 4
  %v1_b464 = add i32 %v3_b460, 32
  %v3_b46c = urem i32 %v1_b464, 65536
  %v1_b470 = call i32 @function_114e0(i32 %v3_b46c)
  %v2_b470 = trunc i32 %v1_b470 to i16
  %v3_b474 = load i32, i32* %r4.global-to-local, align 4
  %v4_b474 = add i32 %v3_b474, 2
  %v5_b474 = inttoptr i32 %v4_b474 to i16*
  store i16 %v2_b470, i16* %v5_b474, align 2
  %v1_b47c = call i32 @function_114e0(i32 %v3_b36c)
  %v2_b47c = trunc i32 %v1_b47c to i16
  store i32 %v5_b2a0, i32* %r1.global-to-local, align 4
  store i32 %v1_b2ac, i32* %r3.global-to-local, align 4
  store i1 %v2_b488, i1* %cpsr_z.global-to-local, align 1
  %v3_b48c = load i32, i32* %r4.global-to-local, align 4
  %v4_b48c = add i32 %v3_b48c, 4
  %v5_b48c = inttoptr i32 %v4_b48c to i16*
  store i16 %v2_b47c, i16* %v5_b48c, align 2
  %v0_b490 = load i32, i32* %r1.global-to-local, align 4
  %v1_b490 = trunc i32 %v0_b490 to i8
  %v2_b490 = load i32, i32* %r4.global-to-local, align 4
  %v3_b490 = add i32 %v2_b490, 8
  %v4_b490 = inttoptr i32 %v3_b490 to i8*
  store i8 %v1_b490, i8* %v4_b490, align 1
  %v0_b494 = load i32, i32* %r4.global-to-local, align 4
  %v1_b494 = add i32 %v0_b494, 20
  store i32 %v1_b494, i32* @r5, align 4
  %v0_b498 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b498, label %dec_label_pc_b398, label %dec_label_pc_b49c

dec_label_pc_b49c:                                ; preds = %dec_label_pc_b420
  %v1_b4a0 = call i32 @function_114e0(i32 16384)
  %v2_b4a0 = trunc i32 %v1_b4a0 to i16
  %v3_b4a4 = load i32, i32* %r4.global-to-local, align 4
  %v4_b4a4 = add i32 %v3_b4a4, 6
  %v5_b4a4 = inttoptr i32 %v4_b4a4 to i16*
  store i16 %v2_b4a0, i16* %v5_b4a4, align 2
  %v2_b39c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b398

dec_label_pc_b4ac:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b4c0
  %v2_b4b0 = call i32 @function_126dc(i32* null)
  store i32 %v2_b2f4, i32* %r3.global-to-local, align 4
  %v9_b4b8 = icmp eq i32 %v2_b2f4, %v2_b4b0
  store i1 %v9_b4b8, i1* %cpsr_z.global-to-local, align 1
  %v5_b4bc = icmp slt i32 %v2_b2f4, %v2_b4b0
  br i1 %v5_b4bc, label %dec_label_pc_b628, label %dec_label_pc_b4ac.dec_label_pc_b4c0_crit_edge

dec_label_pc_b4ac.dec_label_pc_b4c0_crit_edge:    ; preds = %dec_label_pc_b4ac
  %v0_b4c4.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b4c0

dec_label_pc_b4c0:                                ; preds = %dec_label_pc_b4c0.preheader, %dec_label_pc_b4ac.dec_label_pc_b4c0_crit_edge
  %v0_b4c4 = phi i32 [ %v0_b4c4.pre, %dec_label_pc_b4ac.dec_label_pc_b4c0_crit_edge ], [ %v0_b4c4.ph, %dec_label_pc_b4c0.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b4c4 = icmp eq i32 %v0_b4c4, 0
  store i1 %v2_b4c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b4c4, label %dec_label_pc_b4ac, label %dec_label_pc_b4d0

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b4c0
  br label %dec_label_pc_b588

dec_label_pc_b4d8:                                ; preds = %dec_label_pc_b588
  store i32 %v3_b36c, i32* %r1.global-to-local, align 4
  store i1 %v3_b4dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4dc, label %dec_label_pc_b5ec, label %dec_label_pc_b4e4

dec_label_pc_b4e4:                                ; preds = %dec_label_pc_b5b0.dec_label_pc_b4e4_crit_edge, %dec_label_pc_b4d8
  %v1_b4e8 = phi i32 [ %v1_b4e8.pre, %dec_label_pc_b5b0.dec_label_pc_b4e4_crit_edge ], [ 65535, %dec_label_pc_b4d8 ]
  store i32 %v3_b370, i32* %r2.global-to-local, align 4
  %v9_b4e8 = icmp eq i32 %v3_b370, %v1_b4e8
  store i1 %v9_b4e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4e8, label %dec_label_pc_b600, label %dec_label_pc_b4f0

dec_label_pc_b4f0:                                ; preds = %dec_label_pc_b5ec.dec_label_pc_b4f0_crit_edge, %dec_label_pc_b4e4
  %v1_b4f4 = phi i32 [ %v1_b4f4.pre, %dec_label_pc_b5ec.dec_label_pc_b4f0_crit_edge ], [ %v1_b4e8, %dec_label_pc_b4e4 ]
  store i32 %v3_b374, i32* %r3.global-to-local, align 4
  %v9_b4f4 = icmp eq i32 %v3_b374, %v1_b4f4
  store i1 %v9_b4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4f4, label %dec_label_pc_b614, label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %dec_label_pc_b600, %dec_label_pc_b4f0, %dec_label_pc_b614
  %v2_b500 = load i32, i32* @r5, align 4
  %v3_b500 = add i32 %v2_b500, 10
  %v4_b500 = inttoptr i32 %v3_b500 to i16*
  store i16 0, i16* %v4_b500, align 2
  %v0_b504 = load i32, i32* @r5, align 4
  store i32 %v0_b504, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_b50c = call i32 @function_bd1c(i32 %v0_b504, i32 20)
  %v3_b50c = trunc i32 %v2_b50c to i16
  %v3_b510 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b510, i32* %r3.global-to-local, align 4
  %v3_b514 = load i32, i32* @r5, align 4
  %v4_b514 = add i32 %v3_b514, 10
  %v5_b514 = inttoptr i32 %v4_b514 to i16*
  store i16 %v3_b50c, i16* %v5_b514, align 2
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b51c = load i32, i32* @r6, align 4
  %v3_b51c = add i32 %v2_b51c, 6
  %v4_b51c = inttoptr i32 %v3_b51c to i16*
  store i16 0, i16* %v4_b51c, align 2
  %v0_b520 = load i32, i32* @r6, align 4
  store i32 %v0_b520, i32* @r1, align 4
  %v1_b524 = add i32 %v0_b520, 4
  %v2_b524 = inttoptr i32 %v1_b524 to i16*
  %v3_b524 = load i16, i16* %v2_b524, align 2
  %v4_b524 = zext i16 %v3_b524 to i32
  store i32 %v4_b524, i32* %r2.global-to-local, align 4
  %v0_b528 = load i32, i32* %r3.global-to-local, align 4
  %v1_b528 = add i32 %v0_b528, 12
  store i32 %v1_b528, i32* %r3.global-to-local, align 4
  %v0_b52c = load i32, i32* @r5, align 4
  %v4_b530 = call i32 @function_bd6c(i32 %v0_b52c, i32 %v0_b520, i32 %v4_b524, i32 %v1_b528)
  %v5_b530 = trunc i32 %v4_b530 to i16
  %v3_b534 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b534, i32* %r3.global-to-local, align 4
  %v3_b538 = mul i32 %v3_b534, 32
  store i32 %v3_b538, i32* %lr.global-to-local, align 4
  %v3_b53c = load i32, i32* @r6, align 4
  %v4_b53c = add i32 %v3_b53c, 6
  %v5_b53c = inttoptr i32 %v4_b53c to i16*
  store i16 %v5_b530, i16* %v5_b53c, align 2
  %v0_b540 = load i32, i32* %lr.global-to-local, align 4
  %v1_b540 = load i32, i32* %r3.global-to-local, align 4
  %tmp33 = mul i32 %v1_b540, -8
  %v5_b540 = add i32 %v0_b540, %tmp33
  store i32 %v5_b540, i32* %lr.global-to-local, align 4
  %v0_b544 = load i32, i32* @r6, align 4
  %v1_b544 = add i32 %v0_b544, 2
  %v2_b544 = inttoptr i32 %v1_b544 to i16*
  %v3_b544 = load i16, i16* %v2_b544, align 2
  %v4_b544 = zext i16 %v3_b544 to i32
  store i32 %v4_b544, i32* @r6, align 4
  %v3_b548 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b548, i32* %r2.global-to-local, align 4
  %v1_b54c = load i32, i32* @r8, align 4
  %v2_b54c = add i32 %v1_b54c, %v5_b540
  store i32 %v2_b54c, i32* @lr, align 4
  %v3_b550 = add i32 %v2_b54c, 2
  %v4_b550 = inttoptr i32 %v3_b550 to i16*
  store i16 %v3_b544, i16* %v4_b550, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b55c = load i32, i32* @r5, align 4
  store i32 %v0_b55c, i32* @r1, align 4
  %v0_b560 = load i32, i32* %r2.global-to-local, align 4
  %v1_b560 = add i32 %v0_b560, 32
  store i32 %v1_b560, i32* @r2, align 4
  %v0_b564 = load i32, i32* @sl, align 4
  store i32 %v0_b564, i32* @r0, align 4
  %v0_b570 = call i32 @function_1172c()
  %v3_b574 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b574, i32* %r3.global-to-local, align 4
  %v1_b578 = add i32 %v3_b574, 1
  %v1_b57c = load i32, i32* @fp, align 4
  %v9_b57c = icmp eq i32 %v1_b578, %v1_b57c
  store i1 %v9_b57c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b578, i32* %stack_var_-44, align 4
  %v6_b584 = icmp slt i32 %v1_b578, %v1_b57c
  br i1 %v6_b584, label %dec_label_pc_b588, label %dec_label_pc_b4ac

dec_label_pc_b588:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b4d0
  %v1_b598 = phi i32 [ %v1_b578, %dec_label_pc_b4fc ], [ 0, %dec_label_pc_b4d0 ]
  %v5_b58c = mul i32 %v1_b598, 24
  %v1_b590 = load i32, i32* @r8, align 4
  %v2_b590 = add i32 %v1_b590, %v5_b58c
  store i32 %v2_b590, i32* %r3.global-to-local, align 4
  %v1_b594 = add i32 %v2_b590, 20
  %v2_b594 = inttoptr i32 %v1_b594 to i8*
  %v3_b594 = load i8, i8* %v2_b594, align 1
  %v4_b594 = zext i8 %v3_b594 to i32
  store i32 %v4_b594, i32* %r2.global-to-local, align 4
  %v0_b598 = load i32, i32* @sb, align 4
  %v4_b598 = mul i32 %v1_b598, 4
  %v5_b598 = add i32 %v0_b598, %v4_b598
  %v6_b598 = inttoptr i32 %v5_b598 to i32*
  %v7_b598 = load i32, i32* %v6_b598, align 4
  store i32 %v7_b598, i32* @r5, align 4
  %v2_b5a0 = icmp ugt i8 %v3_b594, 30
  %v7_b5a0 = icmp eq i8 %v3_b594, 31
  store i1 %v7_b5a0, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_b5a8 = add i32 %v7_b598, 20
  store i32 %v1_b5a8, i32* @r6, align 4
  %v2_b5ac = xor i1 %v7_b5a0, true
  %v3_b5ac = and i1 %v2_b5a0, %v2_b5ac
  br i1 %v3_b5ac, label %dec_label_pc_b4d8, label %dec_label_pc_b5b0

dec_label_pc_b5b0:                                ; preds = %dec_label_pc_b588
  %v1_b5b0 = add i32 %v2_b590, 16
  %v2_b5b0 = inttoptr i32 %v1_b5b0 to i32*
  %v3_b5b0 = load i32, i32* %v2_b5b0, align 4
  %v1_b5b4 = call i32 @function_11664(i32 %v3_b5b0)
  store i32 %v1_b5b4, i32* @r4, align 4
  %v0_b5bc = call i32 @function_d1c4()
  %v3_b5c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b5c0, i32* %r2.global-to-local, align 4
  %v5_b5c8 = mul i32 %v3_b5c0, 24
  %v1_b5cc = load i32, i32* @r8, align 4
  %v2_b5cc = add i32 %v1_b5cc, %v5_b5c8
  store i32 %v2_b5cc, i32* %r3.global-to-local, align 4
  %v1_b5d0 = add i32 %v2_b5cc, 20
  %v2_b5d0 = inttoptr i32 %v1_b5d0 to i8*
  %v3_b5d0 = load i8, i8* %v2_b5d0, align 1
  %v4_b5d0 = zext i8 %v3_b5d0 to i32
  store i32 %v4_b5d0, i32* %r2.global-to-local, align 4
  %v0_b5d4 = load i32, i32* @r4, align 4
  %v7_b5d4 = lshr i32 %v0_b5bc, %v4_b5d0
  %v8_b5d4 = add i32 %v7_b5d4, %v0_b5d4
  %v1_b5d8 = call i32 @function_114bc(i32 %v8_b5d4)
  store i32 %v3_b36c, i32* %r1.global-to-local, align 4
  %v1_b5e0 = load i32, i32* @r7, align 4
  %v9_b5e0 = icmp eq i32 %v3_b36c, %v1_b5e0
  store i1 %v9_b5e0, i1* %cpsr_z.global-to-local, align 1
  %v1_b5e4 = load i32, i32* @r5, align 4
  %v2_b5e4 = add i32 %v1_b5e4, 16
  %v3_b5e4 = inttoptr i32 %v2_b5e4 to i32*
  store i32 %v1_b5d8, i32* %v3_b5e4, align 4
  br i1 %v9_b5e0, label %dec_label_pc_b5ec, label %dec_label_pc_b5b0.dec_label_pc_b4e4_crit_edge

dec_label_pc_b5b0.dec_label_pc_b4e4_crit_edge:    ; preds = %dec_label_pc_b5b0
  %v1_b4e8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b4e4

dec_label_pc_b5ec:                                ; preds = %dec_label_pc_b5b0, %dec_label_pc_b4d8
  %v0_b5ec = call i32 @function_d1c4()
  %v1_b5ec = trunc i32 %v0_b5ec to i16
  store i32 %v3_b370, i32* %r2.global-to-local, align 4
  %v1_b5f4 = load i32, i32* @r7, align 4
  %v9_b5f4 = icmp eq i32 %v3_b370, %v1_b5f4
  store i1 %v9_b5f4, i1* %cpsr_z.global-to-local, align 1
  %v3_b5f8 = load i32, i32* @r5, align 4
  %v4_b5f8 = add i32 %v3_b5f8, 4
  %v5_b5f8 = inttoptr i32 %v4_b5f8 to i16*
  store i16 %v1_b5ec, i16* %v5_b5f8, align 2
  br i1 %v9_b5f4, label %dec_label_pc_b600, label %dec_label_pc_b5ec.dec_label_pc_b4f0_crit_edge

dec_label_pc_b5ec.dec_label_pc_b4f0_crit_edge:    ; preds = %dec_label_pc_b5ec
  %v1_b4f4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b4f0

dec_label_pc_b600:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4e4
  %v0_b600 = call i32 @function_d1c4()
  %v1_b600 = trunc i32 %v0_b600 to i16
  store i32 %v3_b374, i32* %r3.global-to-local, align 4
  %v1_b608 = load i32, i32* @r7, align 4
  %v9_b608 = icmp eq i32 %v3_b374, %v1_b608
  store i1 %v9_b608, i1* %cpsr_z.global-to-local, align 1
  %v3_b60c = load i32, i32* @r5, align 4
  %v4_b60c = add i32 %v3_b60c, 20
  %v5_b60c = inttoptr i32 %v4_b60c to i16*
  store i16 %v1_b600, i16* %v5_b60c, align 2
  br i1 %v9_b608, label %dec_label_pc_b614, label %dec_label_pc_b4fc

dec_label_pc_b614:                                ; preds = %dec_label_pc_b600, %dec_label_pc_b4f0
  %v0_b614 = call i32 @function_d1c4()
  %v1_b614 = trunc i32 %v0_b614 to i16
  %v3_b618 = load i32, i32* @r6, align 4
  %v4_b618 = add i32 %v3_b618, 2
  %v5_b618 = inttoptr i32 %v4_b618 to i16*
  store i16 %v1_b614, i16* %v5_b618, align 2
  br label %dec_label_pc_b4fc

dec_label_pc_b620:                                ; preds = %dec_label_pc_b330
  %v0_b620 = load i32, i32* @sl, align 4
  %v1_b624 = call i32 @function_12714(i32 %v0_b620)
  br label %dec_label_pc_b628

dec_label_pc_b628:                                ; preds = %dec_label_pc_b4ac, %dec_label_pc_b200, %dec_label_pc_b620
  %v1_b630 = phi i32 [ %v3_b320, %dec_label_pc_b200 ], [ %v1_b624, %dec_label_pc_b620 ], [ %v2_b4b0, %dec_label_pc_b4ac ]
  store i32 %v3_b200, i32* %r4.global-to-local, align 4
  store i32 %v27_b200, i32* %lr.global-to-local, align 4
  ret i32 %v1_b630

; uselistorder directives
  uselistorder i32 %v1_b578, { 1, 2, 0, 3 }
  uselistorder i32 %v5_b540, { 1, 0 }
  uselistorder i32 %v0_b494, { 1, 0 }
  uselistorder i32 %v1_b414, { 1, 2, 0 }
  uselistorder i32 %v1_b410, { 1, 0, 2, 3 }
  uselistorder i1 %v3_b4dc, { 1, 0 }
  uselistorder i32 %v3_b36c, { 1, 2, 0, 3, 5, 4 }
  uselistorder i1 %v7_b350, { 1, 0 }
  uselistorder i1 %v7_b324, { 1, 0 }
  uselistorder i32 %v3_b320, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_b2f4, { 2, 1, 0 }
  uselistorder i32 %v6_b244, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 0, 7, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 13, 1, 7, 8, 9, 10, 11, 12, 14, 2, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 11, 3, 4, 5, 6, 7, 8, 9, 10, 13, 12, 21, 22, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 9, 4, 5, 6, 7, 8, 13, 14, 15, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 6, 7, 8, 4, 5, 9, 10, 12, 11, 13, 14, 15, 17, 16, 19, 18, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 7, 3, 4, 5, 6, 9, 8, 11, 12, 10, 13, 14, 15 }
  uselistorder i8 -16, { 0, 2, 1 }
  uselistorder label %dec_label_pc_b628, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b4fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b4c0, { 1, 0 }
  uselistorder label %dec_label_pc_b398, { 1, 0 }
}

define i32 @function_b638(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b638:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v3_b638 = load i32, i32* @r4, align 4
  %v6_b638 = load i32, i32* @r5, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b668 = call i32 @function_fea0(i32 %arg2, i32 4)
  %v0_b66c = load i32, i32* @r4, align 4
  store i32 %v0_b66c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b678 = load i32, i32* @sl, align 4
  store i32 %v0_b678, i32* %r3.global-to-local, align 4
  %v0_b67c = load i32, i32* @r5, align 4
  store i32 %v0_b67c, i32* %r0.global-to-local, align 4
  %v5_b680 = inttoptr i32 %v0_b66c to i32*
  %v6_b680 = call i32 @function_8294(i32 %v0_b67c, i32* %v5_b680, i32 2, i32 %v0_b678, i32 %v2_b668)
  %v1_b68c = urem i32 %v6_b680, 256
  store i32 %v1_b68c, i32* %ip.global-to-local, align 4
  %v0_b690 = load i32, i32* @r4, align 4
  store i32 %v0_b690, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b69c = load i32, i32* @r5, align 4
  store i32 %v0_b69c, i32* %r0.global-to-local, align 4
  %v5_b6a0 = trunc i32 %v6_b680 to i8
  %v6_b6a4 = inttoptr i32 %v0_b690 to i32*
  %v7_b6a4 = call i32 @function_8294(i32 %v0_b69c, i32* %v6_b6a4, i32 3, i32 65535, i32 %v6_b680)
  %v0_b6a8 = load i32, i32* @r4, align 4
  store i32 %v0_b6a8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b6b8 = load i32, i32* @r5, align 4
  store i32 %v0_b6b8, i32* %r0.global-to-local, align 4
  %v5_b6bc = inttoptr i32 %v0_b6a8 to i32*
  %v6_b6bc = call i32 @function_8294(i32 %v0_b6b8, i32* %v5_b6bc, i32 4, i32 64, i32 %v7_b6a4)
  %v0_b6c4 = load i32, i32* @r4, align 4
  store i32 %v0_b6c4, i32* %r1.global-to-local, align 4
  %v1_b6c8 = urem i32 %v6_b6bc, 256
  store i32 %v1_b6c8, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b6d0 = load i32, i32* @sl, align 4
  store i32 %v0_b6d0, i32* %r3.global-to-local, align 4
  %v0_b6d4 = load i32, i32* @r5, align 4
  store i32 %v0_b6d4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_b6bc, 16777216
  %v5_b6dc = sdiv i32 %sext, 16777216
  %v6_b6dc = inttoptr i32 %v0_b6c4 to i32*
  %v7_b6dc = call i32 @function_8294(i32 %v0_b6d4, i32* %v6_b6dc, i32 5, i32 %v0_b6d0, i32 %v5_b6dc)
  %v1_b6e8 = urem i32 %v7_b6dc, 256
  store i32 %v1_b6e8, i32* %ip.global-to-local, align 4
  %v0_b6ec = load i32, i32* @r4, align 4
  store i32 %v0_b6ec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b6f8 = load i32, i32* @r5, align 4
  store i32 %v0_b6f8, i32* %r0.global-to-local, align 4
  %v5_b700 = inttoptr i32 %v0_b6ec to i32*
  %v6_b700 = call i32 @function_8294(i32 %v0_b6f8, i32* %v5_b700, i32 6, i32 65535, i32 %v1_b6e8)
  %v0_b704 = load i32, i32* @r4, align 4
  store i32 %v0_b704, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v0_b714 = load i32, i32* @r5, align 4
  store i32 %v0_b714, i32* %r0.global-to-local, align 4
  %v5_b718 = inttoptr i32 %v0_b704 to i32*
  %v6_b718 = call i32 @function_8294(i32 %v0_b714, i32* %v5_b718, i32 7, i32 53, i32 %v6_b700)
  %v0_b720 = load i32, i32* @r4, align 4
  store i32 %v0_b720, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v0_b730 = load i32, i32* @r5, align 4
  store i32 %v0_b730, i32* %r0.global-to-local, align 4
  %v5_b734 = inttoptr i32 %v0_b720 to i32*
  %v6_b734 = call i32 @function_8294(i32 %v0_b730, i32* %v5_b734, i32 9, i32 65535, i32 %v6_b718)
  %v0_b738 = load i32, i32* @r4, align 4
  store i32 %v0_b738, i32* %r1.global-to-local, align 4
  %v0_b740 = load i32, i32* @sl, align 4
  store i32 %v0_b740, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_b748 = load i32, i32* @r5, align 4
  store i32 %v0_b748, i32* %r0.global-to-local, align 4
  %v5_b74c = inttoptr i32 %v0_b738 to i32*
  %v6_b74c = call i32 @function_8294(i32 %v0_b748, i32* %v5_b74c, i32 %v0_b740, i32 12, i32 %v6_b734)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_b754 = load i32, i32* @sl, align 4
  store i32 %v0_b754, i32* %r3.global-to-local, align 4
  %v0_b758 = load i32, i32* @r4, align 4
  store i32 %v0_b758, i32* %r1.global-to-local, align 4
  store i32 %v6_b74c, i32* @fp, align 4
  %v0_b760 = load i32, i32* @r5, align 4
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  %v4_b764 = inttoptr i32 %v0_b758 to i32*
  %v5_b764 = call i32 @function_81cc(i32 %v0_b760, i32* %v4_b764, i32 8, i32 %v0_b754)
  store i32 %v5_b764, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_b770 = call i32 @function_edb4(i32 11)
  %v0_b774 = load i32, i32* @sl, align 4
  store i32 %v0_b774, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v2_b77c = inttoptr i32 %v0_b774 to i32*
  %v3_b77c = call i32 @function_ecf0(i32 11, i32* %v2_b77c)
  store i32 %v3_b77c, i32* %r0.global-to-local, align 4
  %v0_b780 = load i32, i32* @sl, align 4
  store i32 %v0_b780, i32* %r1.global-to-local, align 4
  %v2_b784 = call i32 @function_fd74(i32 %v3_b77c, i32 %v0_b780)
  store i32 %v2_b784, i32* @r4, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_b790 = call i32 @function_ed14(i32 11)
  store i32 %v1_b790, i32* %r0.global-to-local, align 4
  %v0_b794 = load i32, i32* @r4, align 4
  %v1_b794 = load i32, i32* @sl, align 4
  %v9_b794 = icmp eq i32 %v0_b794, %v1_b794
  store i1 %v9_b794, i1* %cpsr_z.global-to-local, align 1
  %v5_b798 = icmp slt i32 %v0_b794, %v1_b794
  br i1 %v5_b798, label %dec_label_pc_b854, label %dec_label_pc_b79c

dec_label_pc_b79c:                                ; preds = %dec_label_pc_b638
  %v2_b7a0 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_b7a0, i32* @sb, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_b7a0, i32* %r1.global-to-local, align 4
  store i32 %v0_b794, i32* %r0.global-to-local, align 4
  %v3_b7b0 = call i32 @function_12790(i32 %v0_b794, i32 %v2_b7a0, i32 2048)
  store i32 %v3_b7b0, i32* @r6, align 4
  %v0_b7b8 = load i32, i32* @r4, align 4
  store i32 %v0_b7b8, i32* %r0.global-to-local, align 4
  %v1_b7bc = call i32 @function_12714(i32 %v0_b7b8)
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_b7c4 = call i32 @function_edb4(i32 12)
  %v0_b7c8 = load i32, i32* @sl, align 4
  store i32 %v0_b7c8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v2_b7d0 = inttoptr i32 %v0_b7c8 to i32*
  %v3_b7d0 = call i32 @function_ecf0(i32 12, i32* %v2_b7d0)
  %v0_b7d4 = load i32, i32* @r6, align 4
  store i32 %v0_b7d4, i32* @r1, align 4
  store i32 %v3_b7d0, i32* %r2.global-to-local, align 4
  store i32 %v2_b7a0, i32* %r0.global-to-local, align 4
  %v3_b7e0 = bitcast i32* %stack_var_-2124 to i8*
  %v4_b7e0 = call i32 @function_f56c(i8* %v3_b7e0, i32 %v0_b7d4, i32 %v3_b7d0)
  store i32 %v4_b7e0, i32* @r8, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_b7ec = call i32 @function_ed14(i32 12)
  store i32 %v1_b7ec, i32* %r0.global-to-local, align 4
  %v0_b7f0 = load i32, i32* @r8, align 4
  %v7_b7f0 = icmp eq i32 %v0_b7f0, -1
  store i1 %v7_b7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b7f0, label %dec_label_pc_b854, label %dec_label_pc_b7f8

dec_label_pc_b7f8:                                ; preds = %dec_label_pc_b79c
  %v0_b7f8 = load i32, i32* @r6, align 4
  %v9_b7f8 = icmp eq i32 %v0_b7f8, %v0_b7f0
  store i1 %v9_b7f8, i1* %cpsr_z.global-to-local, align 1
  %v7_b7fc = icmp sgt i32 %v0_b7f8, %v0_b7f0
  br i1 %v7_b7fc, label %dec_label_pc_b800, label %dec_label_pc_b854

dec_label_pc_b800:                                ; preds = %dec_label_pc_b7f8
  %v0_b800 = load i32, i32* @sl, align 4
  store i32 %v0_b800, i32* %r1.global-to-local, align 4
  %v0_b804 = load i32, i32* @sb, align 4
  %v2_b804 = add i32 %v0_b804, %v0_b7f0
  store i32 %v2_b804, i32* %ip.global-to-local, align 4
  store i32 %v0_b7f0, i32* %r4.global-to-local, align 4
  %v1_b814 = add i32 %v0_b7f8, -1
  br label %dec_label_pc_b80c

dec_label_pc_b80c:                                ; preds = %dec_label_pc_b848, %dec_label_pc_b800
  %v0_b848 = phi i32 [ %v1_b848, %dec_label_pc_b848 ], [ %v0_b7f0, %dec_label_pc_b800 ]
  %v0_b830 = phi i32 [ %v0_b83012, %dec_label_pc_b848 ], [ %v0_b800, %dec_label_pc_b800 ]
  %v0_b810 = phi i32 [ %v0_b8108, %dec_label_pc_b848 ], [ %v0_b800, %dec_label_pc_b800 ]
  %v0_b818 = phi i32 [ %v1_b818, %dec_label_pc_b848 ], [ %v2_b804, %dec_label_pc_b800 ]
  %v1_b80c = inttoptr i32 %v0_b818 to i8*
  %v2_b80c = load i8, i8* %v1_b80c, align 1
  %v3_b80c = zext i8 %v2_b80c to i32
  store i32 %v3_b80c, i32* %r0.global-to-local, align 4
  %v2_b810 = icmp eq i32 %v0_b810, 0
  store i1 %v2_b810, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b814, i32* @r5, align 4
  %v1_b818 = add i32 %v0_b818, 1
  store i32 %v1_b818, i32* %ip.global-to-local, align 4
  %v1_b81c = add nsw i32 %v3_b80c, -48
  store i32 %v1_b81c, i32* @lr, align 4
  br i1 %v2_b810, label %dec_label_pc_b824, label %dec_label_pc_b834

dec_label_pc_b824:                                ; preds = %dec_label_pc_b80c
  %v7_b824 = icmp eq i8 %v2_b80c, 9
  store i1 %v7_b824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b824, label %dec_label_pc_b848, label %bb

bb:                                               ; preds = %dec_label_pc_b824
  %v8_b828 = icmp eq i8 %v2_b80c, 32
  store i1 %v8_b828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b828, label %dec_label_pc_b848, label %dec_label_pc_b830

dec_label_pc_b830:                                ; preds = %bb
  %v1_b830 = add i32 %v0_b830, 1
  store i32 %v1_b830, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b834

dec_label_pc_b834:                                ; preds = %dec_label_pc_b80c, %dec_label_pc_b830
  %v0_b83013 = phi i32 [ %v0_b830, %dec_label_pc_b80c ], [ %v1_b830, %dec_label_pc_b830 ]
  %v0_b8109 = phi i32 [ %v0_b810, %dec_label_pc_b80c ], [ %v1_b830, %dec_label_pc_b830 ]
  %v7_b834 = icmp eq i8 %v2_b80c, 46
  store i1 %v7_b834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b834, label %dec_label_pc_b840, label %bb83

bb83:                                             ; preds = %dec_label_pc_b834
  %v3_b838 = icmp ugt i32 %v1_b81c, 8
  %v8_b838 = icmp eq i32 %v1_b81c, 9
  store i1 %v8_b838, i1* %cpsr_z.global-to-local, align 1
  %v2_b83c = xor i1 %v8_b838, true
  %v3_b83c = and i1 %v3_b838, %v2_b83c
  br i1 %v3_b83c, label %dec_label_pc_b878, label %dec_label_pc_b840

dec_label_pc_b840:                                ; preds = %dec_label_pc_b834, %bb83
  %v9_b840 = icmp eq i32 %v1_b814, %v0_b848
  store i1 %v9_b840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b840, label %dec_label_pc_b878, label %dec_label_pc_b848

dec_label_pc_b848:                                ; preds = %dec_label_pc_b824, %dec_label_pc_b840, %bb
  %v0_b83012 = phi i32 [ %v0_b830, %dec_label_pc_b824 ], [ %v0_b83013, %dec_label_pc_b840 ], [ %v0_b830, %bb ]
  %v0_b8108 = phi i32 [ 0, %dec_label_pc_b824 ], [ %v0_b8109, %dec_label_pc_b840 ], [ 0, %bb ]
  %v1_b848 = add i32 %v0_b848, 1
  store i32 %v1_b848, i32* @r4, align 4
  %v9_b84c = icmp eq i32 %v1_b848, %v0_b7f8
  store i1 %v9_b84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b84c, label %dec_label_pc_b854, label %dec_label_pc_b80c

dec_label_pc_b854:                                ; preds = %dec_label_pc_b848, %dec_label_pc_b7f8, %dec_label_pc_b79c, %dec_label_pc_b638
  %v0_b854 = call i32 @function_d1c4()
  %v1_b858 = urem i32 %v0_b854, 4
  store i32 %v1_b858, i32* %r0.global-to-local, align 4
  %v2_b85c = icmp eq i32 %v1_b858, 3
  store i1 %v2_b85c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_b854 to i2
  switch i2 %trunc, label %dec_label_pc_b8b03 [
    i2 0, label %dec_label_pc_bcd4
    i2 1, label %dec_label_pc_bcec
    i2 -2, label %dec_label_pc_bcfc
    i2 -1, label %dec_label_pc_bcbc
  ]

dec_label_pc_b878:                                ; preds = %dec_label_pc_b840, %bb83
  %v0_b848.lcssa = phi i32 [ %v1_b814, %dec_label_pc_b840 ], [ %v0_b848, %bb83 ]
  %v2_b87c = sub i32 %v0_b848.lcssa, %v0_b7f0
  store i32 %v2_b87c, i32* @r4, align 4
  %v2_b880 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_b880, i32* @r5, align 4
  store i32 %v2_b804, i32* %r1.global-to-local, align 4
  store i32 %v2_b880, i32* %r0.global-to-local, align 4
  store i32 %v2_b87c, i32* %r2.global-to-local, align 4
  %v3_b890 = call i32 @function_f280(i32 %v2_b880, i32 %v2_b804, i32 %v2_b87c)
  %v2_b894 = ptrtoint i32* %stack_var_-40 to i32
  %v1_b898 = load i32, i32* @r4, align 4
  %v2_b898 = add i32 %v1_b898, %v2_b894
  store i32 %v2_b898, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_b880, i32* @r0, align 4
  %v3_b8a4 = add i32 %v2_b898, -36
  %v4_b8a4 = inttoptr i32 %v3_b8a4 to i8*
  store i8 0, i8* %v4_b8a4, align 1
  %v1_b8a8 = call i32 @function_114f4(i32 %v2_b880)
  store i32 %v1_b8a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8b0

dec_label_pc_b8b03:                               ; preds = %dec_label_pc_b854
  unreachable

dec_label_pc_b8b0:                                ; preds = %dec_label_pc_bcfc, %dec_label_pc_bcec, %dec_label_pc_bcd4, %dec_label_pc_bcbc, %dec_label_pc_b878
  %stack_var_-2172.0 = phi i32 [ %v1_bcc8, %dec_label_pc_bcbc ], [ %v1_bd08, %dec_label_pc_bcfc ], [ %v1_bcf0, %dec_label_pc_bcec ], [ %v1_bce0, %dec_label_pc_bcd4 ], [ %v1_b8a8, %dec_label_pc_b878 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b8b4 = call i32 @function_126dc(i32* null)
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v0_b8bc = load i32, i32* @r7, align 4
  %v2_b8bc = icmp eq i32 %v0_b8bc, 0
  store i1 %v2_b8bc, i1* %cpsr_z.global-to-local, align 1
  %v2_b8c0 = add i32 %v2_b8b4, %arg1
  store i32 %v2_b8c0, i32* %r0.global-to-local, align 4
  br i1 %v2_b8bc, label %dec_label_pc_bc84, label %dec_label_pc_b8cc

dec_label_pc_b8cc:                                ; preds = %dec_label_pc_b8b0
  store i32 %v0_b8bc, i32* %r0.global-to-local, align 4
  %v1_b8d0 = inttoptr i32 %v0_b8bc to i8*
  %v2_b8d0 = call i32 @function_f210(i8* %v1_b8d0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b8e4 = call i32 @function_117e8(i32 2, i32 3, i32 17)
  store i32 %v3_b8e4, i32* @r0, align 4
  %v7_b8e8 = icmp eq i32 %v3_b8e4, -1
  store i1 %v7_b8e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b8e8, label %dec_label_pc_bc84, label %dec_label_pc_b8f4

dec_label_pc_b8f4:                                ; preds = %dec_label_pc_b8cc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b8fc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b8fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* @r2, align 4
  %v5_b910 = call i32 @function_11778(i32 %v3_b8e4, i32 0, i32 3, i32 %v6_b8fc, i32 4)
  store i32 %v5_b910, i32* %r0.global-to-local, align 4
  %v7_b914 = icmp eq i32 %v5_b910, -1
  store i1 %v7_b914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b914, label %dec_label_pc_bc7c, label %dec_label_pc_b91c

dec_label_pc_b91c:                                ; preds = %dec_label_pc_b8f4
  %v3_b940 = urem i32 %v7_b6a4, 65536
  store i32 %v3_b940, i32* %r3.global-to-local, align 4
  %v2_b944 = icmp eq i32 %arg2, 0
  store i1 %v2_b944, i1* %cpsr_z.global-to-local, align 1
  %v3_b948 = urem i32 %v6_b700, 65536
  store i32 %v3_b948, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_b950 = urem i32 %v6_b718, 65536
  store i32 %v3_b950, i32* %r1.global-to-local, align 4
  %v3_b954 = urem i32 %v6_b734, 65536
  store i32 %v3_b954, i32* %r0.global-to-local, align 4
  %v0_b968 = load i32, i32* @fp, align 4
  %v1_b968 = urem i32 %v0_b968, 256
  store i32 %v1_b968, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b944, label %dec_label_pc_bc94.critedge, label %dec_label_pc_b974

dec_label_pc_b974:                                ; preds = %dec_label_pc_b91c
  store i32 %v2_b8d0, i32* %r0.global-to-local, align 4
  %v2_b978 = add i32 %v1_b968, %v2_b8d0
  %v3_b97c = mul i32 %v2_b978, 65536
  %v1_b980 = add i32 %v3_b97c, 1769472
  store i32 %v1_b980, i32* %r2.global-to-local, align 4
  %v1_b984 = add i32 %v3_b97c, 3080192
  store i32 %v1_b984, i32* %r3.global-to-local, align 4
  %v3_b988 = udiv i32 %v1_b984, 65536
  store i32 %v3_b988, i32* @sb, align 4
  %v3_b98c = udiv i32 %v1_b980, 65536
  store i32 %v3_b98c, i32* @r8, align 4
  store i32 0, i32* @r5, align 4
  %v1_b994 = add i32 %v2_b8d0, 1
  store i32 %v1_b994, i32* @fp, align 4
  %v2_b9f8 = icmp eq i32 %v1_b6e8, 0
  %v2_ba94 = icmp eq i32 %v2_b8d0, 0
  %tmp84 = icmp slt i32 %v2_b8d0, 1
  br label %dec_label_pc_b998

dec_label_pc_b998:                                ; preds = %dec_label_pc_bae0, %dec_label_pc_b974
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_b9a0 = call i32 @function_fea0(i32 600, i32 1)
  store i32 %v2_b9a0, i32* %r0.global-to-local, align 4
  store i32 %v2_b668, i32* %r1.global-to-local, align 4
  %v3_b9a8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b9a8, i32* %r3.global-to-local, align 4
  %v2_b9ac = load i32, i32* @r5, align 4
  %v5_b9ac = mul i32 %v2_b9ac, 4
  %v6_b9ac = add i32 %v5_b9ac, %v2_b668
  %v7_b9ac = inttoptr i32 %v6_b9ac to i32*
  store i32 %v2_b9a0, i32* %v7_b9ac, align 4
  %v0_b9b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b9b0 = load i32, i32* %r3.global-to-local, align 4
  %v4_b9b0 = mul i32 %v1_b9b0, 4
  %v5_b9b0 = add i32 %v4_b9b0, %v0_b9b0
  %v6_b9b0 = inttoptr i32 %v5_b9b0 to i32*
  %v7_b9b0 = load i32, i32* %v6_b9b0, align 4
  store i32 %v7_b9b0, i32* %r5.global-to-local, align 4
  %v1_b9b4 = inttoptr i32 %v7_b9b0 to i8*
  %v2_b9b4 = load i8, i8* %v1_b9b4, align 1
  %tmp = urem i8 %v2_b9b4, 16
  %v1_b9b8 = zext i8 %tmp to i32
  %v1_b9bc = or i32 %v1_b9b8, 64
  store i32 %v1_b9bc, i32* %r2.global-to-local, align 4
  %v1_b9c0 = trunc i32 %v1_b9bc to i8
  store i8 %v1_b9c0, i8* %v1_b9b4, align 1
  %v0_b9c4 = load i32, i32* %r5.global-to-local, align 4
  %v1_b9c4 = inttoptr i32 %v0_b9c4 to i8*
  %v2_b9c4 = load i8, i8* %v1_b9c4, align 1
  %v3_b9c4 = zext i8 %v2_b9c4 to i32
  %v1_b9c8 = and i32 %v3_b9c4, 240
  %v1_b9cc = or i32 %v1_b9c8, 5
  store i32 %v1_b9cc, i32* %r3.global-to-local, align 4
  %v1_b9d0 = trunc i32 %v1_b9cc to i8
  store i8 %v1_b9d0, i8* %v1_b9c4, align 1
  store i32 %v6_b680, i32* %r2.global-to-local, align 4
  %v0_b9d8 = load i32, i32* @sb, align 4
  store i32 %v0_b9d8, i32* %r0.global-to-local, align 4
  %v2_b9dc = load i32, i32* %r5.global-to-local, align 4
  %v3_b9dc = add i32 %v2_b9dc, 1
  %v4_b9dc = inttoptr i32 %v3_b9dc to i8*
  store i8 %v5_b6a0, i8* %v4_b9dc, align 1
  %v1_b9e0 = call i32 @function_114e0(i32 %v0_b9d8)
  %v2_b9e0 = trunc i32 %v1_b9e0 to i16
  %v3_b9e4 = load i32, i32* %r5.global-to-local, align 4
  %v4_b9e4 = add i32 %v3_b9e4, 2
  %v5_b9e4 = inttoptr i32 %v4_b9e4 to i16*
  store i16 %v2_b9e0, i16* %v5_b9e4, align 2
  store i32 %v3_b940, i32* %r0.global-to-local, align 4
  %v1_b9ec = call i32 @function_114e0(i32 %v3_b940)
  %v2_b9ec = trunc i32 %v1_b9ec to i16
  store i32 %v1_b9ec, i32* %r0.global-to-local, align 4
  store i32 %v1_b6e8, i32* %r3.global-to-local, align 4
  store i32 %v5_b6dc, i32* %ip.global-to-local, align 4
  store i1 %v2_b9f8, i1* %cpsr_z.global-to-local, align 1
  %v3_b9fc = load i32, i32* %r5.global-to-local, align 4
  %v4_b9fc = add i32 %v3_b9fc, 4
  %v5_b9fc = inttoptr i32 %v4_b9fc to i16*
  store i16 %v2_b9ec, i16* %v5_b9fc, align 2
  %v0_ba00 = load i32, i32* %ip.global-to-local, align 4
  %v1_ba00 = trunc i32 %v0_ba00 to i8
  %v2_ba00 = load i32, i32* %r5.global-to-local, align 4
  %v3_ba00 = add i32 %v2_ba00, 8
  %v4_ba00 = inttoptr i32 %v3_ba00 to i8*
  store i8 %v1_ba00, i8* %v4_ba00, align 1
  %v0_ba04 = load i32, i32* %r5.global-to-local, align 4
  %v1_ba04 = add i32 %v0_ba04, 20
  store i32 %v1_ba04, i32* %r4.global-to-local, align 4
  %v1_ba08 = add i32 %v0_ba04, 28
  store i32 %v1_ba08, i32* @r6, align 4
  %v0_ba0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba0c, label %dec_label_pc_ba10, label %dec_label_pc_bcac

dec_label_pc_ba10:                                ; preds = %dec_label_pc_b998, %dec_label_pc_bcac
  %v2_ba14 = phi i32 [ %v0_ba04, %dec_label_pc_b998 ], [ %v2_ba14.pre, %dec_label_pc_bcac ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v3_ba14 = add i32 %v2_ba14, 9
  %v4_ba14 = inttoptr i32 %v3_ba14 to i8*
  store i8 17, i8* %v4_ba14, align 1
  store i32 %stack_var_-2172.0, i32* %r1.global-to-local, align 4
  %v2_ba20 = load i32, i32* @global_var_1f644.44, align 4
  store i32 %v2_ba20, i32* %r2.global-to-local, align 4
  %v1_ba24 = load i32, i32* %r5.global-to-local, align 4
  %v2_ba24 = add i32 %v1_ba24, 16
  %v3_ba24 = inttoptr i32 %v2_ba24 to i32*
  store i32 %stack_var_-2172.0, i32* %v3_ba24, align 4
  %v0_ba28 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba28 = load i32, i32* %r5.global-to-local, align 4
  %v2_ba28 = add i32 %v1_ba28, 12
  %v3_ba28 = inttoptr i32 %v2_ba28 to i32*
  store i32 %v0_ba28, i32* %v3_ba28, align 4
  store i32 %v3_b948, i32* %r0.global-to-local, align 4
  %v1_ba30 = call i32 @function_114e0(i32 %v3_b948)
  %v2_ba30 = trunc i32 %v1_ba30 to i16
  %v3_ba34 = load i32, i32* %r5.global-to-local, align 4
  %v4_ba34 = add i32 %v3_ba34, 20
  %v5_ba34 = inttoptr i32 %v4_ba34 to i16*
  store i16 %v2_ba30, i16* %v5_ba34, align 2
  store i32 %v3_b950, i32* %r0.global-to-local, align 4
  %v1_ba3c = call i32 @function_114e0(i32 %v3_b950)
  %v2_ba3c = trunc i32 %v1_ba3c to i16
  %v3_ba40 = load i32, i32* %r4.global-to-local, align 4
  %v4_ba40 = add i32 %v3_ba40, 2
  %v5_ba40 = inttoptr i32 %v4_ba40 to i16*
  store i16 %v2_ba3c, i16* %v5_ba40, align 2
  %v0_ba44 = load i32, i32* @r8, align 4
  store i32 %v0_ba44, i32* %r0.global-to-local, align 4
  %v1_ba48 = call i32 @function_114e0(i32 %v0_ba44)
  %v2_ba48 = trunc i32 %v1_ba48 to i16
  %v3_ba4c = load i32, i32* %r4.global-to-local, align 4
  %v4_ba4c = add i32 %v3_ba4c, 4
  %v5_ba4c = inttoptr i32 %v4_ba4c to i16*
  store i16 %v2_ba48, i16* %v5_ba4c, align 2
  store i32 %v3_b954, i32* %r0.global-to-local, align 4
  %v1_ba54 = call i32 @function_114e0(i32 %v3_b954)
  %v2_ba54 = trunc i32 %v1_ba54 to i16
  %v3_ba58 = load i32, i32* %r5.global-to-local, align 4
  %v4_ba58 = add i32 %v3_ba58, 28
  %v5_ba58 = inttoptr i32 %v4_ba58 to i16*
  store i16 %v2_ba54, i16* %v5_ba58, align 2
  store i32 256, i32* %r0.global-to-local, align 4
  %v1_ba60 = call i32 @function_114e0(i32 256)
  %v2_ba60 = trunc i32 %v1_ba60 to i16
  %v3_ba64 = load i32, i32* @r6, align 4
  %v4_ba64 = add i32 %v3_ba64, 2
  %v5_ba64 = inttoptr i32 %v4_ba64 to i16*
  store i16 %v2_ba60, i16* %v5_ba64, align 2
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_ba6c = call i32 @function_114e0(i32 1)
  %v2_ba6c = trunc i32 %v1_ba6c to i16
  %v0_ba70 = load i32, i32* %r5.global-to-local, align 4
  %v1_ba70 = add i32 %v0_ba70, 41
  store i32 %v1_ba70, i32* %r3.global-to-local, align 4
  %v1_ba74 = load i32, i32* @sl, align 4
  %v2_ba74 = add i32 %v1_ba74, %v1_ba70
  store i32 %v2_ba74, i32* %r4.global-to-local, align 4
  %v3_ba78 = load i32, i32* @r6, align 4
  %v4_ba78 = add i32 %v3_ba78, 4
  %v5_ba78 = inttoptr i32 %v4_ba78 to i16*
  store i16 %v2_ba6c, i16* %v5_ba78, align 2
  %v0_ba7c = load i32, i32* @fp, align 4
  store i32 %v0_ba7c, i32* %r2.global-to-local, align 4
  %v0_ba80 = load i32, i32* %r4.global-to-local, align 4
  %v1_ba80 = add i32 %v0_ba80, 1
  store i32 %v1_ba80, i32* %r0.global-to-local, align 4
  %v0_ba84 = load i32, i32* @sl, align 4
  %v1_ba84 = trunc i32 %v0_ba84 to i8
  %v2_ba84 = load i32, i32* %r5.global-to-local, align 4
  %v3_ba84 = add i32 %v2_ba84, 40
  %v4_ba84 = inttoptr i32 %v3_ba84 to i8*
  store i8 %v1_ba84, i8* %v4_ba84, align 1
  %v0_ba88 = load i32, i32* @r7, align 4
  store i32 %v0_ba88, i32* %r1.global-to-local, align 4
  %v3_ba8c = call i32 @function_f280(i32 %v1_ba80, i32 %v0_ba88, i32 %v0_ba7c)
  store i32 %v3_ba8c, i32* %r0.global-to-local, align 4
  store i32 %v2_b8d0, i32* %r2.global-to-local, align 4
  store i1 %v2_ba94, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp84, label %.dec_label_pc_bae0_crit_edge, label %dec_label_pc_baa4

.dec_label_pc_bae0_crit_edge:                     ; preds = %dec_label_pc_ba10
  %v5_ba98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_ba98, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bae0

dec_label_pc_baa4:                                ; preds = %dec_label_pc_ba10
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_baa8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_baa8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bab0

dec_label_pc_bab0:                                ; preds = %bb87, %dec_label_pc_baa4
  %v0_bac84090 = phi i32 [ %v0_bac84091, %bb87 ], [ 0, %dec_label_pc_baa4 ]
  %v1_bab8.off0 = phi i8 [ %v1_bab821.off0, %bb87 ], [ 0, %dec_label_pc_baa4 ]
  %v0_bab0 = phi i32 [ %v1_bacc44, %bb87 ], [ 0, %dec_label_pc_baa4 ]
  %v1_bab0 = load i32, i32* @r7, align 4
  %v2_bab0 = add i32 %v1_bab0, %v0_bab0
  %v3_bab0 = inttoptr i32 %v2_bab0 to i8*
  %v4_bab0 = load i8, i8* %v3_bab0, align 1
  %v6_bab0 = zext i8 %v4_bab0 to i32
  store i32 %v6_bab0, i32* %r3.global-to-local, align 4
  %v7_bab4 = icmp eq i8 %v4_bab0, 46
  store i1 %v7_bab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bab4, label %bb85, label %.thread6

bb85:                                             ; preds = %dec_label_pc_bab0
  %v3_bab8 = load i32, i32* %r0.global-to-local, align 4
  %v4_bab8 = inttoptr i32 %v3_bab8 to i8*
  store i8 %v1_bab8.off0, i8* %v4_bab8, align 1
  %v0_babc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_babc.pr, label %bb86, label %..thread5_crit_edge

..thread5_crit_edge:                              ; preds = %bb85
  %v0_bacc.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_bac840.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread6

bb86:                                             ; preds = %bb85
  %v1_babc = load i32, i32* %r4.global-to-local, align 4
  %v2_babc = load i32, i32* %r1.global-to-local, align 4
  %v3_babc = add i32 %v1_babc, 1
  %v2_bac0 = add i32 %v3_babc, %v2_babc
  store i32 %v2_bac0, i32* %r0.global-to-local, align 4
  store i32 %v2_b8d0, i32* %r3.global-to-local, align 4
  %v0_bac8 = load i32, i32* %ip.global-to-local, align 4
  %v1_bac8 = add i32 %v0_bac8, 1
  store i32 %v1_bac8, i32* %r2.global-to-local, align 4
  %v1_bacc = add i32 %v2_babc, 1
  store i32 %v1_bacc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb87

.thread6:                                         ; preds = %..thread5_crit_edge, %dec_label_pc_bab0
  %v0_bac840 = phi i32 [ %v0_bac84090, %dec_label_pc_bab0 ], [ %v0_bac840.pre, %..thread5_crit_edge ]
  %v0_bacc.ph = phi i32 [ %v0_bab0, %dec_label_pc_bab0 ], [ %v0_bacc.pre, %..thread5_crit_edge ]
  store i32 %v2_b8d0, i32* %r3.global-to-local, align 4
  %v1_bac841 = add i32 %v0_bac840, 1
  store i32 %v1_bac841, i32* %r2.global-to-local, align 4
  %v1_bacc42 = add i32 %v0_bacc.ph, 1
  store i32 %v1_bacc42, i32* %r1.global-to-local, align 4
  %v2_bad4 = urem i32 %v1_bac841, 256
  store i32 %v2_bad4, i32* %ip.global-to-local, align 4
  %extract.t31 = trunc i32 %v1_bac841 to i8
  br label %bb87

bb87:                                             ; preds = %bb86, %.thread6
  %v0_bac84091 = phi i32 [ 0, %bb86 ], [ %v2_bad4, %.thread6 ]
  %v1_bacc44 = phi i32 [ %v1_bacc, %bb86 ], [ %v1_bacc42, %.thread6 ]
  %v1_bab821.off0 = phi i8 [ 0, %bb86 ], [ %extract.t31, %.thread6 ]
  %v9_bad8 = icmp eq i32 %v1_bacc44, %v2_b8d0
  store i1 %v9_bad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bad8, label %dec_label_pc_bae0.loopexit, label %dec_label_pc_bab0

dec_label_pc_bae0.loopexit:                       ; preds = %bb87
  %v2_bae0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bae0

dec_label_pc_bae0:                                ; preds = %.dec_label_pc_bae0_crit_edge, %dec_label_pc_bae0.loopexit
  %v2_bae0 = phi i32 [ %v5_ba98, %.dec_label_pc_bae0_crit_edge ], [ %v2_bae0.pre, %dec_label_pc_bae0.loopexit ]
  %v0_bae0.off0 = phi i8 [ 0, %.dec_label_pc_bae0_crit_edge ], [ %v1_bab821.off0, %dec_label_pc_bae0.loopexit ]
  %v3_bae0 = inttoptr i32 %v2_bae0 to i8*
  store i8 %v0_bae0.off0, i8* %v3_bae0, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_bae8 = call i32 @function_114e0(i32 1)
  %v2_bae8 = trunc i32 %v1_bae8 to i16
  store i32 %v2_b8d0, i32* %ip.global-to-local, align 4
  %v0_baf0 = load i32, i32* %r4.global-to-local, align 4
  %v2_baf0 = add i32 %v0_baf0, %v2_b8d0
  store i32 %v2_baf0, i32* %r4.global-to-local, align 4
  %v4_baf4 = add i32 %v2_baf0, 2
  %v5_baf4 = inttoptr i32 %v4_baf4 to i16*
  store i16 %v2_bae8, i16* %v5_baf4, align 2
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_bafc = call i32 @function_114e0(i32 1)
  %v2_bafc = trunc i32 %v1_bafc to i16
  store i32 %v1_bafc, i32* %r0.global-to-local, align 4
  %v3_bb00 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bb00, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_bb08 = add i32 %v3_bb00, 1
  store i32 %v1_bb08, i32* @r5, align 4
  %v0_bb0c = load i32, i32* %r4.global-to-local, align 4
  %v1_bb0c = add i32 %v0_bb0c, 2
  store i32 %v1_bb0c, i32* @r4, align 4
  %v9_bb10 = icmp eq i32 %v1_bb08, %arg2
  store i1 %v9_bb10, i1* %cpsr_z.global-to-local, align 1
  %v4_bb14 = add i32 %v0_bb0c, 4
  %v5_bb14 = inttoptr i32 %v4_bb14 to i16*
  store i16 %v2_bafc, i16* %v5_bb14, align 2
  %v0_bb18 = load i32, i32* @r5, align 4
  store i32 %v0_bb18, i32* %stack_var_-44, align 4
  %v5_bb1c = icmp slt i32 %v1_bb08, %arg2
  br i1 %v5_bb1c, label %dec_label_pc_b998, label %dec_label_pc_bb20

dec_label_pc_bb20:                                ; preds = %dec_label_pc_bae0, %dec_label_pc_bc94
  store i1 %v2_b944, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b944, label %dec_label_pc_bc94, label %dec_label_pc_bb34

dec_label_pc_bb34:                                ; preds = %dec_label_pc_bb20
  store i32 %v2_b8d0, i32* %ip.global-to-local, align 4
  %v1_bb38 = load i32, i32* @sl, align 4
  %v2_bb38 = add i32 %v1_bb38, %v2_b8d0
  store i32 %v2_bb38, i32* %r3.global-to-local, align 4
  %v1_bb3c = add i32 %v2_bb38, 47
  store i32 %v1_bb3c, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_bb44 = add i32 %v2_bb38, 27
  store i32 %v1_bb44, i32* @sb, align 4
  %v3_bc20 = icmp eq i32 %v3_b940, 65535
  %v3_bb50 = icmp eq i32 %v3_b948, 65535
  br label %dec_label_pc_bc0c

dec_label_pc_bb4c:                                ; preds = %dec_label_pc_bc0c
  store i32 %v3_b948, i32* @r3, align 4
  store i1 %v3_bb50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bb50, label %dec_label_pc_bc48, label %dec_label_pc_bb58

dec_label_pc_bb58:                                ; preds = %dec_label_pc_bc34.dec_label_pc_bb58_crit_edge, %dec_label_pc_bb4c
  %v1_bb5c = phi i32 [ %v1_bb5c.pre, %dec_label_pc_bc34.dec_label_pc_bb58_crit_edge ], [ 65535, %dec_label_pc_bb4c ]
  store i32 %v3_b950, i32* @ip, align 4
  %v9_bb5c = icmp eq i32 %v3_b950, %v1_bb5c
  store i1 %v9_bb5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb5c, label %dec_label_pc_bc5c, label %dec_label_pc_bb64

dec_label_pc_bb64:                                ; preds = %dec_label_pc_bc48.dec_label_pc_bb64_crit_edge, %dec_label_pc_bb58
  %v1_bb68 = phi i32 [ %v1_bb68.pre, %dec_label_pc_bc48.dec_label_pc_bb64_crit_edge ], [ %v1_bb5c, %dec_label_pc_bb58 ]
  store i32 %v3_b954, i32* %r0.global-to-local, align 4
  %v9_bb68 = icmp eq i32 %v3_b954, %v1_bb68
  store i1 %v9_bb68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb68, label %dec_label_pc_bc70, label %dec_label_pc_bb70

dec_label_pc_bb70:                                ; preds = %dec_label_pc_bc5c, %dec_label_pc_bb64, %dec_label_pc_bc70
  %v0_bb70 = load i32, i32* @r7, align 4
  store i32 %v0_bb70, i32* %r0.global-to-local, align 4
  %v0_bb74 = load i32, i32* @sl, align 4
  store i32 %v0_bb74, i32* %r1.global-to-local, align 4
  %v2_bb78 = call i32 @function_d288(i32 %v0_bb70, i32 %v0_bb74)
  %v0_bb7c = load i32, i32* @r8, align 4
  %v1_bb7c = trunc i32 %v0_bb7c to i8
  %v2_bb7c = load i32, i32* @r7, align 4
  %v3_bb7c = load i32, i32* @sl, align 4
  %v4_bb7c = add i32 %v3_bb7c, %v2_bb7c
  %v5_bb7c = inttoptr i32 %v4_bb7c to i8*
  store i8 %v1_bb7c, i8* %v5_bb7c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bb84 = load i32, i32* @r8, align 4
  %v1_bb84 = trunc i32 %v0_bb84 to i16
  %v2_bb84 = load i32, i32* @r4, align 4
  %v3_bb84 = add i32 %v2_bb84, 10
  %v4_bb84 = inttoptr i32 %v3_bb84 to i16*
  store i16 %v1_bb84, i16* %v4_bb84, align 2
  %v0_bb88 = load i32, i32* @r4, align 4
  store i32 %v0_bb88, i32* @r0, align 4
  %v2_bb8c = call i32 @function_bd1c(i32 %v0_bb88, i32 20)
  %v3_bb8c = trunc i32 %v2_bb8c to i16
  store i32 %v2_bb8c, i32* %r0.global-to-local, align 4
  %v3_bb90 = load i32, i32* @r4, align 4
  %v4_bb90 = add i32 %v3_bb90, 10
  %v5_bb90 = inttoptr i32 %v4_bb90 to i16*
  store i16 %v3_bb8c, i16* %v5_bb90, align 2
  %v0_bb94 = load i32, i32* @r6, align 4
  store i32 %v0_bb94, i32* @r1, align 4
  %v1_bb98 = add i32 %v0_bb94, 4
  %v2_bb98 = inttoptr i32 %v1_bb98 to i16*
  %v3_bb98 = load i16, i16* %v2_bb98, align 2
  %v4_bb98 = zext i16 %v3_bb98 to i32
  store i32 %v4_bb98, i32* %r2.global-to-local, align 4
  %v0_bb9c = load i32, i32* @r8, align 4
  %v1_bb9c = trunc i32 %v0_bb9c to i16
  %v3_bb9c = add i32 %v0_bb94, 6
  %v4_bb9c = inttoptr i32 %v3_bb9c to i16*
  store i16 %v1_bb9c, i16* %v4_bb9c, align 2
  %v0_bba0 = load i32, i32* @sb, align 4
  store i32 %v0_bba0, i32* %r3.global-to-local, align 4
  %v0_bba4 = load i32, i32* @r4, align 4
  store i32 %v0_bba4, i32* %r0.global-to-local, align 4
  %v4_bba8 = call i32 @function_bd6c(i32 %v0_bba4, i32 %v0_bb94, i32 %v4_bb98, i32 %v0_bba0)
  %v5_bba8 = trunc i32 %v4_bba8 to i16
  store i32 %v4_bba8, i32* %r0.global-to-local, align 4
  %v3_bbac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bbac, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v3_bbb4 = mul i32 %v3_bbac, 32
  store i32 %v3_bbb4, i32* %ip.global-to-local, align 4
  %v3_bbb8 = load i32, i32* @r6, align 4
  %v4_bbb8 = add i32 %v3_bbb8, 6
  %v5_bbb8 = inttoptr i32 %v4_bbb8 to i16*
  store i16 %v5_bba8, i16* %v5_bbb8, align 2
  store i32 %stack_var_-2172.0, i32* %r2.global-to-local, align 4
  %v0_bbc0 = load i32, i32* @r6, align 4
  %v1_bbc0 = add i32 %v0_bbc0, 2
  %v2_bbc0 = inttoptr i32 %v1_bbc0 to i16*
  %v3_bbc0 = load i16, i16* %v2_bbc0, align 2
  %v4_bbc0 = zext i16 %v3_bbc0 to i32
  store i32 %v4_bbc0, i32* @r6, align 4
  %v0_bbc4 = load i32, i32* %ip.global-to-local, align 4
  %v1_bbc4 = load i32, i32* %r3.global-to-local, align 4
  %tmp93 = mul i32 %v1_bbc4, -8
  %v5_bbc4 = add i32 %v0_bbc4, %tmp93
  %v1_bbc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_bbc8 = add i32 %v1_bbc8, %v5_bbc4
  store i32 %v2_bbc8, i32* %ip.global-to-local, align 4
  %v2_bbcc = add i32 %v2_bbc8, 4
  %v3_bbcc = inttoptr i32 %v2_bbcc to i32*
  store i32 %stack_var_-2172.0, i32* %v3_bbcc, align 4
  %v0_bbd0 = load i32, i32* @r6, align 4
  %v1_bbd0 = trunc i32 %v0_bbd0 to i16
  %v2_bbd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbd0 = add i32 %v2_bbd0, 2
  %v4_bbd0 = inttoptr i32 %v3_bbd0 to i16*
  store i16 %v1_bbd0, i16* %v4_bbd0, align 2
  %v0_bbd4 = load i32, i32* @r4, align 4
  store i32 %v0_bbd4, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8e4, i32* @r0, align 4
  %v0_bbe0 = load i32, i32* @fp, align 4
  store i32 %v0_bbe0, i32* @r2, align 4
  store i32 16, i32* @r4, align 4
  %v0_bbf0 = call i32 @function_1172c()
  %v3_bbf4 = load i32, i32* %stack_var_-44, align 4
  %v1_bbf8 = add i32 %v3_bbf4, 1
  store i32 %v1_bbf8, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_bc00 = icmp eq i32 %v1_bbf8, %arg2
  store i1 %v9_bc00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bbf8, i32* %stack_var_-44, align 4
  %v6_bc08 = icmp slt i32 %v1_bbf8, %arg2
  br i1 %v6_bc08, label %dec_label_pc_bc0c, label %dec_label_pc_bc94

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_bb70, %dec_label_pc_bb34
  %v1_bc18 = phi i32 [ %v1_bbf8, %dec_label_pc_bb70 ], [ 0, %dec_label_pc_bb34 ]
  store i32 %v2_b668, i32* %r1.global-to-local, align 4
  store i32 65536, i32* %r5.global-to-local, align 4
  store i32 %v3_b940, i32* %r2.global-to-local, align 4
  %v4_bc18 = mul i32 %v1_bc18, 4
  %v5_bc18 = add i32 %v4_bc18, %v2_b668
  %v6_bc18 = inttoptr i32 %v5_bc18 to i32*
  %v7_bc18 = load i32, i32* %v6_bc18, align 4
  store i32 %v7_bc18, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_bc20, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* @r8, align 4
  %v1_bc28 = add i32 %v7_bc18, 20
  store i32 %v1_bc28, i32* @r6, align 4
  %v1_bc2c = add i32 %v7_bc18, 41
  store i32 %v1_bc2c, i32* @r7, align 4
  br i1 %v3_bc20, label %dec_label_pc_bc34, label %dec_label_pc_bb4c

dec_label_pc_bc34:                                ; preds = %dec_label_pc_bc0c
  %v0_bc34 = call i32 @function_d1c4()
  %v1_bc34 = trunc i32 %v0_bc34 to i16
  store i32 %v0_bc34, i32* %r0.global-to-local, align 4
  store i32 %v3_b948, i32* @r3, align 4
  %v1_bc3c = load i32, i32* @r5, align 4
  %v9_bc3c = icmp eq i32 %v3_b948, %v1_bc3c
  store i1 %v9_bc3c, i1* %cpsr_z.global-to-local, align 1
  %v3_bc40 = load i32, i32* @r4, align 4
  %v4_bc40 = add i32 %v3_bc40, 4
  %v5_bc40 = inttoptr i32 %v4_bc40 to i16*
  store i16 %v1_bc34, i16* %v5_bc40, align 2
  br i1 %v9_bc3c, label %dec_label_pc_bc48, label %dec_label_pc_bc34.dec_label_pc_bb58_crit_edge

dec_label_pc_bc34.dec_label_pc_bb58_crit_edge:    ; preds = %dec_label_pc_bc34
  %v1_bb5c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bb58

dec_label_pc_bc48:                                ; preds = %dec_label_pc_bc34, %dec_label_pc_bb4c
  %v0_bc48 = call i32 @function_d1c4()
  %v1_bc48 = trunc i32 %v0_bc48 to i16
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  store i32 %v3_b950, i32* @ip, align 4
  %v1_bc50 = load i32, i32* @r5, align 4
  %v9_bc50 = icmp eq i32 %v3_b950, %v1_bc50
  store i1 %v9_bc50, i1* %cpsr_z.global-to-local, align 1
  %v3_bc54 = load i32, i32* @r4, align 4
  %v4_bc54 = add i32 %v3_bc54, 20
  %v5_bc54 = inttoptr i32 %v4_bc54 to i16*
  store i16 %v1_bc48, i16* %v5_bc54, align 2
  br i1 %v9_bc50, label %dec_label_pc_bc5c, label %dec_label_pc_bc48.dec_label_pc_bb64_crit_edge

dec_label_pc_bc48.dec_label_pc_bb64_crit_edge:    ; preds = %dec_label_pc_bc48
  %v1_bb68.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bb64

dec_label_pc_bc5c:                                ; preds = %dec_label_pc_bc48, %dec_label_pc_bb58
  %v0_bc5c = call i32 @function_d1c4()
  %v1_bc5c = trunc i32 %v0_bc5c to i16
  %v3_bc60 = load i32, i32* @r6, align 4
  %v4_bc60 = add i32 %v3_bc60, 2
  %v5_bc60 = inttoptr i32 %v4_bc60 to i16*
  store i16 %v1_bc5c, i16* %v5_bc60, align 2
  store i32 %v3_b954, i32* %r0.global-to-local, align 4
  %v1_bc68 = load i32, i32* @r5, align 4
  %v9_bc68 = icmp eq i32 %v3_b954, %v1_bc68
  store i1 %v9_bc68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc68, label %dec_label_pc_bc70, label %dec_label_pc_bb70

dec_label_pc_bc70:                                ; preds = %dec_label_pc_bc5c, %dec_label_pc_bb64
  %v0_bc70 = call i32 @function_d1c4()
  %v1_bc70 = trunc i32 %v0_bc70 to i16
  store i32 %v0_bc70, i32* %r0.global-to-local, align 4
  %v3_bc74 = load i32, i32* @r4, align 4
  %v4_bc74 = add i32 %v3_bc74, 28
  %v5_bc74 = inttoptr i32 %v4_bc74 to i16*
  store i16 %v1_bc70, i16* %v5_bc74, align 2
  br label %dec_label_pc_bb70

dec_label_pc_bc7c:                                ; preds = %dec_label_pc_b8f4
  store i32 %v3_b8e4, i32* %r0.global-to-local, align 4
  %v1_bc80 = call i32 @function_12714(i32 %v3_b8e4)
  store i32 %v1_bc80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bc84

dec_label_pc_bc84:                                ; preds = %dec_label_pc_bc94, %dec_label_pc_b8cc, %dec_label_pc_b8b0, %dec_label_pc_bc7c
  %v1_bc90 = phi i32 [ %v3_b8e4, %dec_label_pc_b8cc ], [ %v2_b8c0, %dec_label_pc_b8b0 ], [ %v1_bc80, %dec_label_pc_bc7c ], [ %v2_bc98, %dec_label_pc_bc94 ]
  store i32 %v3_b638, i32* %r4.global-to-local, align 4
  store i32 %v6_b638, i32* %r5.global-to-local, align 4
  ret i32 %v1_bc90

dec_label_pc_bc94.critedge:                       ; preds = %dec_label_pc_b91c
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br label %dec_label_pc_bc94

dec_label_pc_bc94:                                ; preds = %dec_label_pc_bb70, %dec_label_pc_bc94.critedge, %dec_label_pc_bb20
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bc98 = call i32 @function_126dc(i32* null)
  store i32 %v2_bc98, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c0, i32* %ip.global-to-local, align 4
  %v9_bca0 = icmp eq i32 %v2_b8c0, %v2_bc98
  store i1 %v9_bca0, i1* %cpsr_z.global-to-local, align 1
  %v6_bca4 = icmp slt i32 %v2_b8c0, %v2_bc98
  br i1 %v6_bca4, label %dec_label_pc_bc84, label %dec_label_pc_bb20

dec_label_pc_bcac:                                ; preds = %dec_label_pc_b998
  store i32 16384, i32* %r0.global-to-local, align 4
  %v1_bcb0 = call i32 @function_114e0(i32 16384)
  %v2_bcb0 = trunc i32 %v1_bcb0 to i16
  store i32 %v1_bcb0, i32* %r0.global-to-local, align 4
  %v3_bcb4 = load i32, i32* %r5.global-to-local, align 4
  %v4_bcb4 = add i32 %v3_bcb4, 6
  %v5_bcb4 = inttoptr i32 %v4_bcb4 to i16*
  store i16 %v2_bcb0, i16* %v5_bcb4, align 2
  %v2_ba14.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_ba10

dec_label_pc_bcbc:                                ; preds = %dec_label_pc_b854
  store i32 67240450, i32* %r0.global-to-local, align 4
  %v1_bcc8 = call i32 @function_114bc(i32 67240450)
  store i32 %v1_bcc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8b0

dec_label_pc_bcd4:                                ; preds = %dec_label_pc_b854
  store i32 134744072, i32* %r0.global-to-local, align 4
  %v1_bce0 = call i32 @function_114bc(i32 134744072)
  store i32 %v1_bce0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8b0

dec_label_pc_bcec:                                ; preds = %dec_label_pc_b854
  store i32 1246898730, i32* %r0.global-to-local, align 4
  %v1_bcf0 = call i32 @function_114bc(i32 1246898730)
  store i32 %v1_bcf0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8b0

dec_label_pc_bcfc:                                ; preds = %dec_label_pc_b854
  store i32 1074151430, i32* %r0.global-to-local, align 4
  %v1_bd08 = call i32 @function_114bc(i32 1074151430)
  store i32 %v1_bd08, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8b0

; uselistorder directives
  uselistorder i32 %v1_bd08, { 1, 0 }
  uselistorder i32 %v1_bcf0, { 1, 0 }
  uselistorder i32 %v1_bce0, { 1, 0 }
  uselistorder i32 %v1_bcc8, { 1, 0 }
  uselistorder i32 %v1_bcb0, { 1, 0 }
  uselistorder i32 %v2_bc98, { 1, 2, 3, 0 }
  uselistorder i32 %v0_bc70, { 1, 0 }
  uselistorder i32 %v0_bc48, { 1, 0 }
  uselistorder i32 %v0_bc34, { 1, 0 }
  uselistorder i32 %v7_bc18, { 1, 0, 2 }
  uselistorder i32 %v1_bbf8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_bba8, { 1, 0 }
  uselistorder i32 %v0_bb94, { 1, 0, 2, 3 }
  uselistorder i32 %v2_bb8c, { 1, 0 }
  uselistorder i1 %v3_bb50, { 1, 0 }
  uselistorder i1 %v3_bc20, { 1, 0 }
  uselistorder i32 %v1_bafc, { 1, 0 }
  uselistorder i32 %v2_bad4, { 1, 0 }
  uselistorder i32 %v1_bac841, { 1, 0, 2 }
  uselistorder i32 %v2_babc, { 1, 0 }
  uselistorder i32 %v0_bab0, { 1, 0 }
  uselistorder i32 %v1_b9ec, { 1, 0 }
  uselistorder i32 %v3_b97c, { 1, 0 }
  uselistorder i32 %v1_b968, { 1, 0 }
  uselistorder i32 %v3_b948, { 0, 1, 2, 6, 3, 4, 5 }
  uselistorder i32 %v3_b940, { 0, 4, 1, 2, 3 }
  uselistorder i1 %v7_b914, { 1, 0 }
  uselistorder i1 %v7_b8e8, { 1, 0 }
  uselistorder i32 %v3_b8e4, { 1, 3, 4, 5, 2, 0, 6 }
  uselistorder i32 %v2_b8d0, { 0, 12, 1, 7, 4, 3, 6, 8, 10, 9, 5, 2, 11 }
  uselistorder i32 %v2_b8c0, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_b8bc, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2172.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_b880, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_b87c, { 1, 0, 2 }
  uselistorder i32 %v1_b858, { 1, 0 }
  uselistorder i32 %v0_b854, { 1, 0 }
  uselistorder i32 %v1_b848, { 1, 2, 0 }
  uselistorder i1 %v7_b834, { 1, 0 }
  uselistorder i32 %v1_b830, { 1, 0, 2 }
  uselistorder i1 %v8_b828, { 1, 0 }
  uselistorder i1 %v7_b824, { 1, 0 }
  uselistorder i32 %v1_b818, { 1, 0 }
  uselistorder i8 %v2_b80c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_b810, { 1, 0 }
  uselistorder i32 %v0_b830, { 1, 2, 3, 0 }
  uselistorder i32 %v2_b804, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b800, { 1, 0, 2 }
  uselistorder i32 %v0_b7f8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_b7f0, { 1, 0 }
  uselistorder i32 %v0_b7f0, { 2, 3, 4, 1, 6, 5, 0 }
  uselistorder i32 %v2_b7a0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_b794, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b6e8, { 1, 2, 3, 0 }
  uselistorder i32 %v6_b680, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b668, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r5.global-to-local, { 13, 12, 15, 16, 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14 }
  uselistorder i32* %r4.global-to-local, { 10, 11, 12, 4, 0, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 23, 24, 25, 26, 27, 28, 29, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 27, 25, 26, 28, 1, 29, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 33, 29, 30, 31, 32, 34, 1, 37, 36, 35, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 23, 22, 24, 26, 25, 28, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 7, 6, 9, 8, 61, 60, 63, 62, 66, 64, 67, 65, 68, 70, 69, 72, 71, 73, 75, 74, 76, 78, 77, 79, 11, 10, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 29, 26, 27, 28, 30, 31, 33, 32, 34, 35, 36, 37, 38, 40, 39, 41, 42, 44, 43, 45, 1, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %ip.global-to-local, { 11, 12, 13, 14, 15, 16, 17, 18, 21, 20, 19, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 21, 0, 22, 23, 24, 29, 25, 26, 27, 28, 30, 31, 32, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 41, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @function_114f4, { 1, 0 }
  uselistorder i32 %arg2, { 6, 5, 4, 3, 2, 1, 0, 7, 8, 9 }
  uselistorder label %dec_label_pc_bc94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bc84, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_bb70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bb20, { 1, 0 }
  uselistorder label %dec_label_pc_bae0, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %dec_label_pc_ba10, { 1, 0 }
  uselistorder label %dec_label_pc_b848, { 1, 2, 0 }
  uselistorder label %dec_label_pc_b840, { 1, 0 }
  uselistorder label %dec_label_pc_b834, { 1, 0 }
}

define i32 @function_bd1c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_bd1c:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_bd40, label %dec_label_pc_bd28

dec_label_pc_bd28:                                ; preds = %dec_label_pc_bd1c
  %v0_bd30.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bd2c

dec_label_pc_bd2c:                                ; preds = %dec_label_pc_bd2c, %dec_label_pc_bd28
  %v0_bd38 = phi i32 [ %v2_bd38, %dec_label_pc_bd2c ], [ 0, %dec_label_pc_bd28 ]
  %v0_bd30 = phi i32 [ %v5_bd30, %dec_label_pc_bd2c ], [ %v0_bd30.pre, %dec_label_pc_bd28 ]
  %v0_bd2c = phi i32 [ %v1_bd2c, %dec_label_pc_bd2c ], [ %arg1, %dec_label_pc_bd28 ]
  %v1_bd2c = add i32 %v0_bd2c, -2
  %v1_bd30 = inttoptr i32 %v0_bd30 to i16*
  %v2_bd30 = load i16, i16* %v1_bd30, align 2
  %v3_bd30 = zext i16 %v2_bd30 to i32
  %v5_bd30 = add i32 %v0_bd30, -2
  store i32 %v5_bd30, i32* @r0, align 4
  %v2_bd38 = add i32 %v3_bd30, %v0_bd38
  %v1_bd2c.cmp = icmp ugt i32 %v1_bd2c, 1
  br i1 %v1_bd2c.cmp, label %dec_label_pc_bd2c, label %dec_label_pc_bd40.loopexit

dec_label_pc_bd40.loopexit:                       ; preds = %dec_label_pc_bd2c
  br label %dec_label_pc_bd40

dec_label_pc_bd40:                                ; preds = %dec_label_pc_bd1c, %dec_label_pc_bd40.loopexit
  %v1_bd48 = phi i32 [ %v2_bd38, %dec_label_pc_bd40.loopexit ], [ 0, %dec_label_pc_bd1c ]
  %v0_bd40 = phi i32 [ %v1_bd2c, %dec_label_pc_bd40.loopexit ], [ %arg1, %dec_label_pc_bd1c ]
  %v7_bd40 = icmp eq i32 %v0_bd40, 1
  br i1 %v7_bd40, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_bd40
  %v1_bd44 = load i32, i32* @r0, align 4
  %v2_bd44 = inttoptr i32 %v1_bd44 to i8*
  %v3_bd44 = load i8, i8* %v2_bd44, align 1
  %v4_bd44 = zext i8 %v3_bd44 to i32
  %v3_bd48 = add i32 %v1_bd48, %v4_bd44
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bd40, %bb
  %v0_bd4c = phi i32 [ %v1_bd48, %dec_label_pc_bd40 ], [ %v3_bd48, %bb ]
  %v3_bd50 = urem i32 %v0_bd4c, 65536
  %v4_bd54 = udiv i32 %v0_bd4c, 65536
  %v5_bd54 = add nuw nsw i32 %v4_bd54, %v3_bd50
  %v4_bd58 = udiv i32 %v5_bd54, 65536
  %v5_bd58 = add nuw nsw i32 %v4_bd58, %v5_bd54
  %v1_bd5c = urem i32 %v5_bd58, 65536
  %v3_bd64 = xor i32 %v1_bd5c, 65535
  ret i32 %v3_bd64

; uselistorder directives
  uselistorder i32 %v5_bd54, { 1, 0 }
  uselistorder i32 %v5_bd30, { 1, 0 }
  uselistorder i32 %v1_bd2c, { 1, 0, 2 }
  uselistorder i32 %v0_bd30, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_bd40, { 1, 0 }
}

define i32 @function_bd6c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bd6c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  %v0_bd70 = load i32, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v1_bd80 = add i32 %arg1, 12
  %v2_bd80 = inttoptr i32 %v1_bd80 to i32*
  %v3_bd80 = load i32, i32* %v2_bd80, align 4
  store i32 %v3_bd80, i32* %r6.global-to-local, align 4
  %v1_bd84 = add i32 %arg1, 16
  %v2_bd84 = inttoptr i32 %v1_bd84 to i32*
  %v3_bd84 = load i32, i32* %v2_bd84, align 4
  store i32 %v3_bd84, i32* %r5.global-to-local, align 4
  %v7_bd88 = icmp sgt i32 %v0_bd70, 1
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v7_bd88, label %dec_label_pc_bd94.preheader, label %dec_label_pc_bda8

dec_label_pc_bd94.preheader:                      ; preds = %dec_label_pc_bd6c
  %v0_bd98.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_bd94

dec_label_pc_bd94:                                ; preds = %dec_label_pc_bd94.preheader, %dec_label_pc_bd94
  %v0_bda0 = phi i32 [ 0, %dec_label_pc_bd94.preheader ], [ %v2_bda0, %dec_label_pc_bd94 ]
  %v0_bd98 = phi i32 [ %v0_bd98.pre, %dec_label_pc_bd94.preheader ], [ %v5_bd98, %dec_label_pc_bd94 ]
  %v0_bd94 = phi i32 [ %v0_bd70, %dec_label_pc_bd94.preheader ], [ %v1_bd94, %dec_label_pc_bd94 ]
  %v1_bd94 = add nsw i32 %v0_bd94, -2
  %v1_bd98 = inttoptr i32 %v0_bd98 to i16*
  %v2_bd98 = load i16, i16* %v1_bd98, align 2
  %v3_bd98 = zext i16 %v2_bd98 to i32
  store i32 %v3_bd98, i32* %r3.global-to-local, align 4
  %v5_bd98 = add i32 %v0_bd98, -2
  store i32 %v5_bd98, i32* @r1, align 4
  %v2_bda0 = add i32 %v3_bd98, %v0_bda0
  store i32 %v2_bda0, i32* %r4.global-to-local, align 4
  %v8_bda4 = icmp sgt i32 %v1_bd94, 1
  br i1 %v8_bda4, label %dec_label_pc_bd94, label %dec_label_pc_bda8.loopexit

dec_label_pc_bda8.loopexit:                       ; preds = %dec_label_pc_bd94
  br label %dec_label_pc_bda8

dec_label_pc_bda8:                                ; preds = %dec_label_pc_bda8.loopexit, %dec_label_pc_bd6c
  %v1_bdb4 = phi i32 [ %v2_bda0, %dec_label_pc_bda8.loopexit ], [ 0, %dec_label_pc_bd6c ]
  %v0_bda8 = phi i32 [ %v1_bd94, %dec_label_pc_bda8.loopexit ], [ %v0_bd70, %dec_label_pc_bd6c ]
  %v7_bda8 = icmp eq i32 %v0_bda8, 1
  br i1 %v7_bda8, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_bda8
  %v1_bdb01 = add i32 %arg1, 9
  %v2_bdb02 = inttoptr i32 %v1_bdb01 to i8*
  %v3_bdb03 = load i8, i8* %v2_bdb02, align 1
  br label %bb20

bb:                                               ; preds = %dec_label_pc_bda8
  %v1_bdac = load i32, i32* @r1, align 4
  %v2_bdac = inttoptr i32 %v1_bdac to i8*
  %v3_bdac = load i8, i8* %v2_bdac, align 1
  %v4_bdac = zext i8 %v3_bdac to i32
  store i32 %v4_bdac, i32* %r3.global-to-local, align 4
  %v1_bdb0 = add i32 %arg1, 9
  %v2_bdb0 = inttoptr i32 %v1_bdb0 to i8*
  %v3_bdb0 = load i8, i8* %v2_bdb0, align 1
  %v3_bdb4 = add i32 %v4_bdac, %v1_bdb4
  store i32 %v3_bdb4, i32* %r4.global-to-local, align 4
  br label %bb20

bb20:                                             ; preds = %.thread, %bb
  %v4_bdb05.in = phi i8 [ %v3_bdb03, %.thread ], [ %v3_bdb0, %bb ]
  %v4_bdb05 = zext i8 %v4_bdb05.in to i32
  %v1_bdb8 = call i32 @function_114e0(i32 %v4_bdb05)
  %v0_bdbc = load i32, i32* %r5.global-to-local, align 4
  %v0_bdc0 = load i32, i32* %r6.global-to-local, align 4
  %v3_bdc4 = urem i32 %v0_bdc0, 65536
  %v3_bdc8 = urem i32 %v0_bdbc, 65536
  %v4_bdd0 = udiv i32 %v0_bdc0, 65536
  %v4_bdd4 = udiv i32 %v0_bdbc, 65536
  %v1_bdd8 = load i32, i32* %r7.global-to-local, align 4
  %v1_bddc = load i32, i32* %r4.global-to-local, align 4
  %v2_bdcc = add nuw nsw i32 %v4_bdd4, %v3_bdc8
  %v5_bdd0 = add nuw nsw i32 %v2_bdcc, %v3_bdc4
  %v5_bdd4 = add nuw nsw i32 %v5_bdd0, %v4_bdd0
  %v2_bdd8 = add i32 %v5_bdd4, %v1_bdd8
  %v2_bddc = add i32 %v2_bdd8, %v1_bddc
  store i32 %v2_bddc, i32* %r3.global-to-local, align 4
  %v2_bde0 = add i32 %v2_bddc, %v1_bdb8
  %tmp = icmp ult i32 %v2_bde0, 65536
  br i1 %tmp, label %dec_label_pc_be00, label %dec_label_pc_bdec

dec_label_pc_bdec:                                ; preds = %bb20, %dec_label_pc_bdec
  %v2_bdf46 = phi i32 [ %v2_bdf4, %dec_label_pc_bdec ], [ %v2_bde0, %bb20 ]
  %v3_bdf87.in = phi i32 [ %v2_bdf4, %dec_label_pc_bdec ], [ %v2_bde0, %bb20 ]
  %v3_bdf87 = udiv i32 %v3_bdf87.in, 65536
  %v3_bdf0 = urem i32 %v2_bdf46, 65536
  %v2_bdf4 = add nuw nsw i32 %v3_bdf0, %v3_bdf87
  %tmp21 = icmp ult i32 %v2_bdf4, 65536
  br i1 %tmp21, label %dec_label_pc_be00.loopexit, label %dec_label_pc_bdec

dec_label_pc_be00.loopexit:                       ; preds = %dec_label_pc_bdec
  store i32 %v3_bdf0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_be00

dec_label_pc_be00:                                ; preds = %dec_label_pc_be00.loopexit, %bb20
  %v0_be00 = phi i32 [ %v2_bdf4, %dec_label_pc_be00.loopexit ], [ %v2_bde0, %bb20 ]
  %v1_be00 = urem i32 %v0_be00, 65536
  %v3_be08 = xor i32 %v1_be00, 65535
  ret i32 %v3_be08

; uselistorder directives
  uselistorder i32 %v2_bdf4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_bdf0, { 1, 0 }
  uselistorder i32 %v2_bde0, { 3, 0, 2, 1 }
  uselistorder i32 %v2_bda0, { 0, 2, 1 }
  uselistorder i32 %v5_bd98, { 1, 0 }
  uselistorder i32 %v0_bd98, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_bdec, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_bd94, { 1, 0 }
}

define i32 @function_be18(i32 %arg1) local_unnamed_addr {
dec_label_pc_be18:
  %v2_be24 = load i32, i32* @global_var_1f07c.55, align 4
  store i32 %v2_be24, i32* @r0, align 4
  %v2_be2c = call i32 @function_11a6c(i32 %v2_be24, i32 9)
  ret i32 %v2_be2c
}

define i32 @function_be40(i32 %arg1) local_unnamed_addr {
dec_label_pc_be40:
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-585 = alloca i8, align 1
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-4681 = alloca i32, align 4
  %v3_be40 = load i32, i32* @r4, align 4
  %v6_be40 = load i32, i32* @r5, align 4
  %v9_be40 = load i32, i32* @r6, align 4
  %v12_be40 = load i32, i32* @r7, align 4
  %v15_be40 = load i32, i32* @r8, align 4
  %v18_be40 = load i32, i32* @sb, align 4
  %v21_be40 = load i32, i32* @sl, align 4
  %v24_be40 = load i32, i32* @fp, align 4
  %v27_be40 = load i32, i32* @lr, align 4
  %v2_be54 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_be54, i32* @sl, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_be68 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_be68, i32* @fp, align 4
  %v3_be74 = bitcast i32* %stack_var_-4681 to i8*
  %v4_be74 = call i32 @function_12154(i8* %v3_be74, i32 0, i32 4096)
  %v3_be88 = bitcast i32* %stack_var_-8777 to i8*
  %v4_be88 = call i32 @function_12154(i8* %v3_be88, i32 0, i32 4096)
  %v2_be8c = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_be8c, i32* @r6, align 4
  %v4_bea0 = call i32 @function_12154(i8* nonnull %stack_var_-585, i32 0, i32 513)
  %v0_beac = load i32, i32* @r4, align 4
  store i32 0, i32* @r4, align 4
  %v2_beb4 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_beb4, i32* @sb, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v1_bec8 = call i32 @function_11688(i32 %v0_beac)
  %v3_bed4 = trunc i32 %v1_bec8 to i8
  %v4_bed4 = call i32 @function_f5fc(i8 %v3_bed4, i32 16, i32 %v2_beb4)
  %v2_bedc = call i32 @function_f210(i8* nonnull %stack_var_-72)
  %v7_bee0 = icmp eq i32 %v2_bedc, 2
  br i1 %v7_bee0, label %dec_label_pc_c388, label %dec_label_pc_bee8

dec_label_pc_bee8:                                ; preds = %dec_label_pc_be40, %dec_label_pc_c388
  %v1_beec = call i32 @function_edb4(i32 3)
  %v1_bef4 = call i32 @function_edb4(i32 4)
  %v1_befc = call i32 @function_edb4(i32 6)
  %v1_bf04 = call i32 @function_edb4(i32 8)
  %v0_bf08 = load i32, i32* @r4, align 4
  %v2_bf10 = inttoptr i32 %v0_bf08 to i32*
  %v3_bf10 = call i32 @function_ecf0(i32 8, i32* %v2_bf10)
  %v0_bf14 = load i32, i32* @r4, align 4
  %v2_bf18 = call i32 @function_fd74(i32 %v3_bf10, i32 %v0_bf14)
  %v7_bf1c = icmp eq i32 %v2_bf18, -1
  store i32 %v2_bf18, i32* @r8, align 4
  br i1 %v7_bf1c, label %dec_label_pc_c348, label %dec_label_pc_bf28.preheader

dec_label_pc_bf28.preheader:                      ; preds = %dec_label_pc_bee8
  %v4_bf3454 = call i32 @function_f470(i8* nonnull %stack_var_-585, i32 512, i32 %v2_bf18)
  %v2_bf3856 = icmp eq i32 %v4_bf3454, 0
  br i1 %v2_bf3856, label %dec_label_pc_c0c0.loopexit, label %dec_label_pc_bf40.lr.ph

dec_label_pc_bf40.lr.ph:                          ; preds = %dec_label_pc_bf28.preheader
  %v2_bf88 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_bf40

dec_label_pc_bf40:                                ; preds = %dec_label_pc_bf40.lr.ph, %dec_label_pc_bf28.backedge
  %v3_bf44 = load i8, i8* %stack_var_-585, align 1
  %v4_bf44 = sext i8 %v3_bf44 to i32
  %v2_bf48 = icmp eq i8 %v3_bf44, 0
  br i1 %v2_bf48, label %bb124, label %bb

bb:                                               ; preds = %dec_label_pc_bf40
  %v8_bf4c = icmp eq i8 %v3_bf44, 58
  br i1 %v8_bf4c, label %.thread6, label %dec_label_pc_bf60

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_bf78

bb124:                                            ; preds = %dec_label_pc_bf40
  br label %dec_label_pc_bf78

dec_label_pc_bf60:                                ; preds = %bb
  %v1_bf68.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bf64

dec_label_pc_bf64:                                ; preds = %bb125, %dec_label_pc_bf60
  %v0_bf64 = phi i32 [ %v1_bf64, %bb125 ], [ 0, %dec_label_pc_bf60 ]
  %v1_bf64 = add i32 %v0_bf64, 1
  %v2_bf68 = add i32 %v1_bf64, %v1_bf68.pre
  %v3_bf68 = inttoptr i32 %v2_bf68 to i8*
  %v4_bf68 = load i8, i8* %v3_bf68, align 1
  %v6_bf68 = zext i8 %v4_bf68 to i32
  %v2_bf6c = icmp eq i8 %v4_bf68, 0
  br i1 %v2_bf6c, label %dec_label_pc_bf78, label %bb125

bb125:                                            ; preds = %dec_label_pc_bf64
  %v8_bf70 = icmp eq i8 %v4_bf68, 58
  br i1 %v8_bf70, label %dec_label_pc_bf78, label %dec_label_pc_bf64

dec_label_pc_bf78:                                ; preds = %dec_label_pc_bf64, %bb125, %bb124, %.thread6
  %v1_bfa4 = phi i32 [ 0, %.thread6 ], [ 0, %bb124 ], [ %v1_bf64, %bb125 ], [ %v1_bf64, %dec_label_pc_bf64 ]
  %v0_bf78 = phi i32 [ %v4_bf44, %.thread6 ], [ %v4_bf44, %bb124 ], [ %v6_bf68, %bb125 ], [ %v6_bf68, %dec_label_pc_bf64 ]
  %v2_bf78 = icmp eq i32 %v0_bf78, 0
  br i1 %v2_bf78, label %dec_label_pc_bf28.backedge, label %dec_label_pc_bf80

dec_label_pc_bf28.backedge:                       ; preds = %dec_label_pc_bf78, %dec_label_pc_c048, %dec_label_pc_c088, %dec_label_pc_bfc4
  %v0_bf30 = load i32, i32* @r8, align 4
  %v4_bf34 = call i32 @function_f470(i8* nonnull %stack_var_-585, i32 512, i32 %v0_bf30)
  %v2_bf38 = icmp eq i32 %v4_bf34, 0
  br i1 %v2_bf38, label %dec_label_pc_c0c0.loopexit, label %dec_label_pc_bf40

dec_label_pc_bf80:                                ; preds = %dec_label_pc_bf78
  %v1_bf84 = add i32 %v1_bfa4, 2
  %v2_bf8c = add i32 %v1_bf84, %v2_bf88
  %v1_bf90 = add i32 %v2_bf8c, -545
  %v2_bf90 = inttoptr i32 %v1_bf90 to i8*
  %v3_bf90 = load i8, i8* %v2_bf90, align 1
  %v2_bf94 = icmp eq i8 %v3_bf90, 0
  br i1 %v2_bf94, label %bb127, label %bb126

bb126:                                            ; preds = %dec_label_pc_bf80
  %v8_bf98 = icmp eq i8 %v3_bf90, 32
  br i1 %v8_bf98, label %.thread10, label %dec_label_pc_bfa4

.thread10:                                        ; preds = %bb126
  store i32 %v1_bf84, i32* @r5, align 4
  br label %dec_label_pc_bfc4

bb127:                                            ; preds = %dec_label_pc_bf80
  store i32 %v1_bf84, i32* @r5, align 4
  br label %dec_label_pc_bfc4

dec_label_pc_bfa4:                                ; preds = %bb126
  %v0_bfa4 = load i32, i32* @r6, align 4
  %v2_bfa4 = add i32 %v0_bfa4, %v1_bfa4
  br label %dec_label_pc_bfac

dec_label_pc_bfac:                                ; preds = %bb128, %dec_label_pc_bfa4
  %v0_bfb813 = phi i32 [ %v1_bfb8, %bb128 ], [ %v1_bf84, %dec_label_pc_bfa4 ]
  %v0_bfbc15 = phi i32 [ %v1_bfbc, %bb128 ], [ %v2_bfa4, %dec_label_pc_bfa4 ]
  %v1_bfac = add i32 %v0_bfbc15, 3
  %v2_bfac = inttoptr i32 %v1_bfac to i8*
  %v3_bfac = load i8, i8* %v2_bfac, align 1
  %v2_bfb0 = icmp eq i8 %v3_bfac, 0
  br i1 %v2_bfb0, label %.thread12, label %bb128

.thread12:                                        ; preds = %dec_label_pc_bfac
  %v1_bfb814 = add i32 %v0_bfb813, 1
  store i32 %v1_bfb814, i32* @r5, align 4
  br label %dec_label_pc_bfc4

bb128:                                            ; preds = %dec_label_pc_bfac
  %v8_bfb4 = icmp eq i8 %v3_bfac, 32
  %v1_bfb8 = add i32 %v0_bfb813, 1
  store i32 %v1_bfb8, i32* @r5, align 4
  %v1_bfbc = add i32 %v0_bfbc15, 1
  br i1 %v8_bfb4, label %dec_label_pc_bfc4, label %dec_label_pc_bfac

dec_label_pc_bfc4:                                ; preds = %bb128, %bb127, %.thread12, %.thread10
  %v1_bfd0 = phi i32 [ %v1_bfb814, %.thread12 ], [ %v1_bf84, %.thread10 ], [ %v1_bf84, %bb127 ], [ %v1_bfb8, %bb128 ]
  %v0_bfc4 = load i32, i32* @r6, align 4
  %v2_bfc4 = add i32 %v0_bfc4, %v1_bf84
  store i32 %v2_bfc4, i32* @r4, align 4
  %v2_bfd0 = add i32 %v1_bfd0, %v2_bf88
  store i32 0, i32* @r7, align 4
  %v3_bfd8 = add i32 %v2_bfd0, -545
  %v4_bfd8 = inttoptr i32 %v3_bfd8 to i8*
  store i8 0, i8* %v4_bfd8, align 1
  %v0_bfdc = load i32, i32* @r4, align 4
  %v1_bfe0 = inttoptr i32 %v0_bfdc to i8*
  %v2_bfe0 = call i32 @function_f210(i8* %v1_bfe0)
  store i32 %v2_bfe0, i32* @r1, align 4
  %v0_bfec = load i32, i32* @r4, align 4
  %v3_bff0 = inttoptr i32 %v0_bfec to i8*
  %v4_bff0 = call i32 @function_f56c(i8* %v3_bff0, i32 %v2_bfe0, i32 %v2_beb4)
  %v7_bff4 = icmp eq i32 %v4_bff0, -1
  br i1 %v7_bff4, label %dec_label_pc_bf28.backedge, label %dec_label_pc_c010.preheader

dec_label_pc_c010.preheader:                      ; preds = %dec_label_pc_bfc4
  %v1_bff8 = load i32, i32* @r7, align 4
  %v1_bffc = load i32, i32* @r6, align 4
  %v2_bffc = load i32, i32* @r5, align 4
  %v3_bffc = add i32 %v2_bffc, %v1_bffc
  store i32 %v1_bff8, i32* @lr, align 4
  %v1_c01046 = add i32 %v3_bffc, 2
  %v2_c01047 = inttoptr i32 %v1_c01046 to i8*
  %v3_c01048 = load i8, i8* %v2_c01047, align 1
  %v2_c01450 = icmp eq i8 %v3_c01048, 0
  %v1_c01852 = add i32 %v2_bffc, 2
  br i1 %v2_c01450, label %dec_label_pc_c048, label %dec_label_pc_c020

dec_label_pc_c020:                                ; preds = %dec_label_pc_c010.preheader, %dec_label_pc_c010.backedge
  %v0_c04881 = phi i32 [ %v0_c04879, %dec_label_pc_c010.backedge ], [ %v1_bff8, %dec_label_pc_c010.preheader ]
  %v0_c030.pr = phi i32 [ %v0_c030.pr68, %dec_label_pc_c010.backedge ], [ %v1_bff8, %dec_label_pc_c010.preheader ]
  %v0_c35c = phi i32 [ %v0_c35c71, %dec_label_pc_c010.backedge ], [ %v1_bff8, %dec_label_pc_c010.preheader ]
  %v0_c01876 = phi i32 [ %v1_c018, %dec_label_pc_c010.backedge ], [ %v1_c01852, %dec_label_pc_c010.preheader ]
  %v0_c040 = phi i32 [ %v0_c010, %dec_label_pc_c010.backedge ], [ %v3_bffc, %dec_label_pc_c010.preheader ]
  %v1_c024.in = phi i8 [ %v3_c010, %dec_label_pc_c010.backedge ], [ %v3_c01048, %dec_label_pc_c010.preheader ]
  %v7_c020 = icmp eq i8 %v1_c024.in, 9
  br i1 %v7_c020, label %bb130, label %bb129

bb129:                                            ; preds = %dec_label_pc_c020
  %v8_c024 = icmp eq i8 %v1_c024.in, 32
  br i1 %v8_c024, label %.thread24, label %dec_label_pc_c030

.thread24:                                        ; preds = %bb129
  br label %dec_label_pc_c03c

bb130:                                            ; preds = %dec_label_pc_c020
  br label %dec_label_pc_c03c

dec_label_pc_c030:                                ; preds = %bb129
  %v7_c030 = icmp eq i32 %v0_c030.pr, 1
  br i1 %v7_c030, label %dec_label_pc_c35c, label %dec_label_pc_c038

dec_label_pc_c038:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c030
  %v0_c03c73 = phi i32 [ %v1_c35c, %dec_label_pc_c35c ], [ %v0_c35c, %dec_label_pc_c030 ]
  br label %dec_label_pc_c03c

dec_label_pc_c03c:                                ; preds = %bb130, %.thread24, %dec_label_pc_c038
  %v0_c03c = phi i32 [ %v0_c35c, %.thread24 ], [ %v0_c35c, %bb130 ], [ %v0_c03c73, %dec_label_pc_c038 ]
  %v0_c030.pr69 = phi i32 [ 1, %.thread24 ], [ 1, %bb130 ], [ 0, %dec_label_pc_c038 ]
  %v7_c044 = icmp sgt i32 %v0_c03c, 6
  br i1 %v7_c044, label %dec_label_pc_c048, label %dec_label_pc_c010.backedge

dec_label_pc_c048:                                ; preds = %dec_label_pc_c010.backedge, %dec_label_pc_c03c, %dec_label_pc_c010.preheader
  %v1_c094 = phi i32 [ %v1_c01852, %dec_label_pc_c010.preheader ], [ %v1_c018, %dec_label_pc_c010.backedge ], [ %v0_c01876, %dec_label_pc_c03c ]
  %v0_c048 = phi i32 [ %v1_bff8, %dec_label_pc_c010.preheader ], [ %v0_c04879, %dec_label_pc_c010.backedge ], [ %v0_c04881, %dec_label_pc_c03c ]
  %v2_c048 = icmp eq i32 %v0_c048, 0
  br i1 %v2_c048, label %dec_label_pc_bf28.backedge, label %dec_label_pc_c054

dec_label_pc_c054:                                ; preds = %dec_label_pc_c048
  %v2_c05c = add i32 %v1_c094, %v2_bf88
  %v1_c060 = add i32 %v2_c05c, -545
  %v2_c060 = inttoptr i32 %v1_c060 to i8*
  %v3_c060 = load i8, i8* %v2_c060, align 1
  %v2_c064 = icmp eq i8 %v3_c060, 0
  br i1 %v2_c064, label %dec_label_pc_c088, label %bb131

bb131:                                            ; preds = %dec_label_pc_c054
  %v8_c068 = icmp eq i8 %v3_c060, 32
  br i1 %v8_c068, label %dec_label_pc_c088, label %dec_label_pc_c070

dec_label_pc_c070:                                ; preds = %bb131
  %v2_c070 = add i32 %v1_c094, %v1_bffc
  br label %dec_label_pc_c074

dec_label_pc_c074:                                ; preds = %bb132, %dec_label_pc_c070
  %v0_c08027 = phi i32 [ %v1_c080, %bb132 ], [ %v1_c094, %dec_label_pc_c070 ]
  %v0_c074 = phi i32 [ %v1_c074, %bb132 ], [ %v2_c070, %dec_label_pc_c070 ]
  %v1_c074 = add i32 %v0_c074, 1
  %v2_c074 = inttoptr i32 %v1_c074 to i8*
  %v3_c074 = load i8, i8* %v2_c074, align 1
  %v2_c078 = icmp eq i8 %v3_c074, 0
  br i1 %v2_c078, label %.thread26, label %bb132

.thread26:                                        ; preds = %dec_label_pc_c074
  %v1_c08028 = add i32 %v0_c08027, 1
  br label %dec_label_pc_c088

bb132:                                            ; preds = %dec_label_pc_c074
  %v8_c07c = icmp eq i8 %v3_c074, 32
  %v1_c080 = add i32 %v0_c08027, 1
  br i1 %v8_c07c, label %dec_label_pc_c088, label %dec_label_pc_c074

dec_label_pc_c088:                                ; preds = %bb132, %dec_label_pc_c054, %.thread26, %bb131
  %v1_c090 = phi i32 [ %v1_c094, %dec_label_pc_c054 ], [ %v1_c08028, %.thread26 ], [ %v1_c094, %bb131 ], [ %v1_c080, %bb132 ]
  %v2_c090 = add i32 %v1_c090, %v2_bf88
  %v2_c094 = add i32 %v1_c094, %v1_bffc
  store i32 %v2_c094, i32* @r4, align 4
  %v3_c0a0 = add i32 %v2_c090, -545
  %v4_c0a0 = inttoptr i32 %v3_c0a0 to i8*
  store i8 0, i8* %v4_c0a0, align 1
  %v1_c0a4 = inttoptr i32 %v2_c094 to i8*
  %v2_c0a4 = call i32 @function_f210(i8* %v1_c0a4)
  %v8_c0ac = icmp sgt i32 %v2_c0a4, 15
  br i1 %v8_c0ac, label %dec_label_pc_bf28.backedge, label %dec_label_pc_c0b0

dec_label_pc_c0b0:                                ; preds = %dec_label_pc_c088
  %v0_c0b4 = load i32, i32* @r4, align 4
  %v2_c0b8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_c0b8, i32* @r0, align 4
  %v2_c0bc = bitcast i32* %stack_var_-56 to i8*
  %v3_c0bc = call i32 @function_f238(i8* %v2_c0bc, i32 %v0_c0b4)
  br label %dec_label_pc_c0c0

dec_label_pc_c0c0.loopexit:                       ; preds = %dec_label_pc_bf28.backedge, %dec_label_pc_bf28.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre91 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_c0c0

dec_label_pc_c0c0:                                ; preds = %dec_label_pc_c0c0.loopexit, %dec_label_pc_c0b0
  %v1_c0d0.pre-phi = phi i8* [ %.pre91, %dec_label_pc_c0c0.loopexit ], [ %v2_c0bc, %dec_label_pc_c0b0 ]
  %v2_c0cc.pre-phi = phi i32 [ %.pre, %dec_label_pc_c0c0.loopexit ], [ %v2_c0b8, %dec_label_pc_c0b0 ]
  %v0_c0c0 = load i32, i32* @r8, align 4
  %v1_c0c4 = call i32 @function_12714(i32 %v0_c0c0)
  %v2_c0d0 = call i32 @function_f210(i8* %v1_c0d0.pre-phi)
  store i32 %v2_c0d0, i32* @r4, align 4
  %v2_c0d4 = icmp eq i32 %v2_c0d0, 0
  br i1 %v2_c0d4, label %dec_label_pc_c32c, label %dec_label_pc_c0e0

dec_label_pc_c0e0:                                ; preds = %dec_label_pc_c0c0
  %v3_c0e8 = call i32 @function_ecf0(i32 3, i32* null)
  store i32 %v3_c0e8, i32* @r0, align 4
  %v1_c0ec = call i32 @function_f850(i32 %v3_c0e8)
  store i32 %v1_c0ec, i32* @sb, align 4
  %v2_c0f0 = icmp eq i32 %v1_c0ec, 0
  br i1 %v2_c0f0, label %dec_label_pc_c320, label %dec_label_pc_c100.preheader

dec_label_pc_c100.preheader:                      ; preds = %dec_label_pc_c0e0
  store i32 0, i32* @r5, align 4
  %v1_c10441 = inttoptr i32 %v1_c0ec to i32*
  %v2_c10442 = call i32 @function_f89c(i32* %v1_c10441)
  %v2_c10844 = icmp eq i32 %v2_c10442, 0
  br i1 %v2_c10844, label %dec_label_pc_c314, label %dec_label_pc_c110.preheader

dec_label_pc_c100.loopexit:                       ; preds = %dec_label_pc_c118, %dec_label_pc_c128, %dec_label_pc_c194
  %v0_c100 = load i32, i32* @sb, align 4
  %v1_c104 = inttoptr i32 %v0_c100 to i32*
  %v2_c104 = call i32 @function_f89c(i32* %v1_c104)
  %v2_c108 = icmp eq i32 %v2_c104, 0
  br i1 %v2_c108, label %dec_label_pc_c314, label %dec_label_pc_c110.preheader

dec_label_pc_c110.preheader:                      ; preds = %dec_label_pc_c100.preheader, %dec_label_pc_c100.loopexit
  %v0_c11888 = phi i32 [ %v2_c104, %dec_label_pc_c100.loopexit ], [ %v2_c10442, %dec_label_pc_c100.preheader ]
  br label %dec_label_pc_c110

dec_label_pc_c110:                                ; preds = %dec_label_pc_c110.preheader, %dec_label_pc_c2fc
  %v0_c130 = phi i32 [ %v0_c11888, %dec_label_pc_c110.preheader ], [ %v2_c308, %dec_label_pc_c2fc ]
  %v0_c110 = load i32, i32* @r5, align 4
  %v2_c110 = icmp eq i32 %v0_c110, 0
  br i1 %v2_c110, label %dec_label_pc_c118, label %dec_label_pc_c314

dec_label_pc_c118:                                ; preds = %dec_label_pc_c110
  %v1_c118 = add i32 %v0_c130, 19
  %v2_c118 = inttoptr i32 %v1_c118 to i8*
  %v3_c118 = load i8, i8* %v2_c118, align 1
  %v4_c118 = zext i8 %v3_c118 to i32
  %v1_c11c = add nsw i32 %v4_c118, -48
  %tmp = icmp ugt i32 %v1_c11c, 9
  br i1 %tmp, label %dec_label_pc_c100.loopexit, label %dec_label_pc_c128

dec_label_pc_c128:                                ; preds = %dec_label_pc_c118
  store i32 %v1_c118, i32* @r7, align 4
  %v3_c134 = call i32 @function_ecf0(i32 3, i32* null)
  store i32 %v2_be54, i32* @r0, align 4
  %v3_c140 = call i32 @function_f238(i8* %v3_be74, i32 %v3_c134)
  %v2_c148 = call i32 @function_f210(i8* %v3_be74)
  %v0_c14c = load i32, i32* @r7, align 4
  %v1_c150 = load i32, i32* @sl, align 4
  %v2_c150 = add i32 %v1_c150, %v2_c148
  store i32 %v2_c150, i32* @r0, align 4
  %v2_c154 = inttoptr i32 %v2_c150 to i8*
  %v3_c154 = call i32 @function_f238(i8* %v2_c154, i32 %v0_c14c)
  %v2_c15c = call i32 @function_f210(i8* %v3_be74)
  %v0_c160 = load i32, i32* @r5, align 4
  store i32 %v2_c15c, i32* @r4, align 4
  %v2_c16c = inttoptr i32 %v0_c160 to i32*
  %v3_c16c = call i32 @function_ecf0(i32 4, i32* %v2_c16c)
  %v0_c174 = load i32, i32* @r4, align 4
  %v1_c174 = load i32, i32* @sl, align 4
  %v2_c174 = add i32 %v1_c174, %v0_c174
  store i32 %v2_c174, i32* @r0, align 4
  %v2_c178 = inttoptr i32 %v2_c174 to i8*
  %v3_c178 = call i32 @function_f238(i8* %v2_c178, i32 %v3_c16c)
  store i32 %v2_be54, i32* @r0, align 4
  store i32 4096, i32* @r2, align 4
  %v3_c188 = call i32 @function_127d0(i32 %v2_be54, i32 %v2_be68, i32 4096)
  %v7_c18c = icmp eq i32 %v3_c188, -1
  br i1 %v7_c18c, label %dec_label_pc_c100.loopexit, label %dec_label_pc_c194

dec_label_pc_c194:                                ; preds = %dec_label_pc_c128
  %v0_c194 = load i32, i32* @r5, align 4
  %v2_c19c = inttoptr i32 %v0_c194 to i32*
  %v3_c19c = call i32 @function_ecf0(i32 3, i32* %v2_c19c)
  store i32 %v2_be54, i32* @r0, align 4
  %v3_c1a8 = call i32 @function_f238(i8* %v3_be74, i32 %v3_c19c)
  %v2_c1b0 = call i32 @function_f210(i8* %v3_be74)
  %v0_c1b4 = load i32, i32* @r7, align 4
  %v1_c1b8 = load i32, i32* @sl, align 4
  %v2_c1b8 = add i32 %v1_c1b8, %v2_c1b0
  store i32 %v2_c1b8, i32* @r0, align 4
  %v2_c1bc = inttoptr i32 %v2_c1b8 to i8*
  %v3_c1bc = call i32 @function_f238(i8* %v2_c1bc, i32 %v0_c1b4)
  %v2_c1c4 = call i32 @function_f210(i8* %v3_be74)
  %v0_c1c8 = load i32, i32* @r5, align 4
  store i32 %v2_c1c4, i32* @r4, align 4
  %v2_c1d4 = inttoptr i32 %v0_c1c8 to i32*
  %v3_c1d4 = call i32 @function_ecf0(i32 6, i32* %v2_c1d4)
  %v0_c1dc = load i32, i32* @r4, align 4
  %v1_c1dc = load i32, i32* @sl, align 4
  %v2_c1dc = add i32 %v1_c1dc, %v0_c1dc
  store i32 %v2_c1dc, i32* @r0, align 4
  %v2_c1e0 = inttoptr i32 %v2_c1dc to i8*
  %v3_c1e0 = call i32 @function_f238(i8* %v2_c1e0, i32 %v3_c1d4)
  store i32 %v2_be54, i32* @r0, align 4
  %v1_c1e8 = call i32 @function_f850(i32 %v2_be54)
  store i32 %v1_c1e8, i32* @r8, align 4
  %v2_c1ec = icmp eq i32 %v1_c1e8, 0
  br i1 %v2_c1ec, label %dec_label_pc_c100.loopexit, label %dec_label_pc_c1f4.preheader

dec_label_pc_c1f4.preheader:                      ; preds = %dec_label_pc_c194
  %v1_c1f836 = inttoptr i32 %v1_c1e8 to i32*
  %v2_c1f837 = call i32 @function_f89c(i32* %v1_c1f836)
  store i32 %v2_c1f837, i32* @r6, align 4
  %v2_c1fc39 = icmp eq i32 %v2_c1f837, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_be68, i32* @r0, align 4
  br i1 %v2_c1fc39, label %dec_label_pc_c2fc, label %dec_label_pc_c20cthread-pre-split

dec_label_pc_c1f4.loopexit:                       ; preds = %dec_label_pc_c214, %dec_label_pc_c2ac
  %v0_c1f4 = load i32, i32* @r8, align 4
  %v1_c1f8 = inttoptr i32 %v0_c1f4 to i32*
  %v2_c1f8 = call i32 @function_f89c(i32* %v1_c1f8)
  store i32 %v2_c1f8, i32* @r6, align 4
  %v2_c1fc = icmp eq i32 %v2_c1f8, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_be68, i32* @r0, align 4
  br i1 %v2_c1fc, label %dec_label_pc_c2fc, label %dec_label_pc_c20cthread-pre-split

dec_label_pc_c20cthread-pre-split:                ; preds = %dec_label_pc_c1f4.preheader, %dec_label_pc_c1f4.loopexit
  %v0_c20c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_c20c

dec_label_pc_c20c:                                ; preds = %dec_label_pc_c20cthread-pre-split, %dec_label_pc_c2d4
  %v0_c20c = phi i32 [ %v0_c20c.pr, %dec_label_pc_c20cthread-pre-split ], [ 1, %dec_label_pc_c2d4 ]
  %v2_c20c = icmp eq i32 %v0_c20c, 0
  br i1 %v2_c20c, label %dec_label_pc_c214, label %dec_label_pc_c2fc

dec_label_pc_c214:                                ; preds = %dec_label_pc_c20c
  %v0_c214 = call i32 @function_f2a4()
  %v0_c218 = load i32, i32* @r5, align 4
  %v2_c220 = inttoptr i32 %v0_c218 to i32*
  %v3_c220 = call i32 @function_ecf0(i32 3, i32* %v2_c220)
  store i32 %v2_be54, i32* @r0, align 4
  %v3_c22c = call i32 @function_f238(i8* %v3_be74, i32 %v3_c220)
  %v2_c234 = call i32 @function_f210(i8* %v3_be74)
  %v0_c238 = load i32, i32* @r7, align 4
  %v1_c23c = load i32, i32* @sl, align 4
  %v2_c23c = add i32 %v1_c23c, %v2_c234
  store i32 %v2_c23c, i32* @r0, align 4
  %v2_c240 = inttoptr i32 %v2_c23c to i8*
  %v3_c240 = call i32 @function_f238(i8* %v2_c240, i32 %v0_c238)
  %v2_c248 = call i32 @function_f210(i8* %v3_be74)
  %v0_c24c = load i32, i32* @r5, align 4
  store i32 %v2_c248, i32* @r4, align 4
  %v2_c258 = inttoptr i32 %v0_c24c to i32*
  %v3_c258 = call i32 @function_ecf0(i32 6, i32* %v2_c258)
  %v0_c260 = load i32, i32* @r4, align 4
  %v1_c260 = load i32, i32* @sl, align 4
  %v2_c260 = add i32 %v1_c260, %v0_c260
  store i32 %v2_c260, i32* @r0, align 4
  %v2_c264 = inttoptr i32 %v2_c260 to i8*
  %v3_c264 = call i32 @function_f238(i8* %v2_c264, i32 %v3_c258)
  %v2_c26c = call i32 @function_f210(i8* %v3_be74)
  %v1_c274 = load i32, i32* @sl, align 4
  %v2_c274 = add i32 %v1_c274, %v2_c26c
  store i32 %v2_c274, i32* @r0, align 4
  %v2_c278 = inttoptr i32 %v2_c274 to i8*
  %v3_c278 = call i32 @function_f238(i8* %v2_c278, i32 ptrtoint (i32* @global_var_16460.57 to i32))
  %v2_c280 = call i32 @function_f210(i8* %v3_be74)
  %v0_c284 = load i32, i32* @r6, align 4
  %v1_c284 = add i32 %v0_c284, 19
  %v1_c288 = load i32, i32* @sl, align 4
  %v2_c288 = add i32 %v1_c288, %v2_c280
  store i32 %v2_c288, i32* @r0, align 4
  %v2_c28c = inttoptr i32 %v2_c288 to i8*
  %v3_c28c = call i32 @function_f238(i8* %v2_c28c, i32 %v1_c284)
  store i32 %v2_be54, i32* @r0, align 4
  store i32 4096, i32* @r2, align 4
  %v3_c29c = call i32 @function_127d0(i32 %v2_be54, i32 %v2_be68, i32 4096)
  %v7_c2a0 = icmp eq i32 %v3_c29c, -1
  br i1 %v7_c2a0, label %dec_label_pc_c1f4.loopexit, label %dec_label_pc_c2ac

dec_label_pc_c2ac:                                ; preds = %dec_label_pc_c214
  %v2_c2ac = call i32 @function_f210(i8* %v3_be88)
  store i32 %v2_c2ac, i32* @r1, align 4
  %v4_c2c0 = call i32 @function_f56c(i8* %v3_be88, i32 %v2_c2ac, i32 %v2_c0cc.pre-phi)
  %v7_c2c4 = icmp eq i32 %v4_c2c0, -1
  br i1 %v7_c2c4, label %dec_label_pc_c1f4.loopexit, label %dec_label_pc_c2d4

dec_label_pc_c2d4:                                ; preds = %dec_label_pc_c2ac
  %v0_c2cc = load i32, i32* @r7, align 4
  %v2_c2d4 = inttoptr i32 %v0_c2cc to i8*
  %v3_c2d4 = call i32 @function_f334(i8* %v2_c2d4, i32 10)
  store i32 %v3_c2d4, i32* @r0, align 4
  %v2_c2dc = call i32 @function_11a6c(i32 %v3_c2d4, i32 9)
  %v0_c2e0 = load i32, i32* @r8, align 4
  %v1_c2e4 = inttoptr i32 %v0_c2e0 to i32*
  %v2_c2e4 = call i32 @function_f89c(i32* %v1_c2e4)
  store i32 %v2_c2e4, i32* @r6, align 4
  %v2_c2e8 = icmp eq i32 %v2_c2e4, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_be68, i32* @r0, align 4
  br i1 %v2_c2e8, label %dec_label_pc_c2fc, label %dec_label_pc_c20c

dec_label_pc_c2fc:                                ; preds = %dec_label_pc_c1f4.loopexit, %dec_label_pc_c2d4, %dec_label_pc_c20c, %dec_label_pc_c1f4.preheader
  %v0_c2fc = load i32, i32* @r8, align 4
  %v1_c300 = inttoptr i32 %v0_c2fc to i32*
  %v2_c300 = call i32 @function_f820(i32* %v1_c300)
  %v0_c304 = load i32, i32* @sb, align 4
  %v1_c308 = inttoptr i32 %v0_c304 to i32*
  %v2_c308 = call i32 @function_f89c(i32* %v1_c308)
  %v2_c30c = icmp eq i32 %v2_c308, 0
  br i1 %v2_c30c, label %dec_label_pc_c314, label %dec_label_pc_c110

dec_label_pc_c314:                                ; preds = %dec_label_pc_c100.loopexit, %dec_label_pc_c2fc, %dec_label_pc_c110, %dec_label_pc_c100.preheader
  %v0_c314 = load i32, i32* @sb, align 4
  %v1_c318 = inttoptr i32 %v0_c314 to i32*
  %v2_c318 = call i32 @function_f820(i32* %v1_c318)
  %v0_c31c = load i32, i32* @r5, align 4
  %v1_c31c = urem i32 %v0_c31c, 256
  br label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %dec_label_pc_c0e0, %dec_label_pc_c314
  %storemerge = phi i32 [ %v1_c31c, %dec_label_pc_c314 ], [ 0, %dec_label_pc_c0e0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_c324 = call i32 @function_12800(i32 1)
  br label %dec_label_pc_c32c

dec_label_pc_c32c:                                ; preds = %dec_label_pc_c0c0, %dec_label_pc_c320
  %v1_c32c = call i32 @function_ed14(i32 3)
  %v1_c334 = call i32 @function_ed14(i32 4)
  %v1_c33c = call i32 @function_ed14(i32 6)
  %v1_c344 = call i32 @function_ed14(i32 8)
  br label %dec_label_pc_c348

dec_label_pc_c348:                                ; preds = %dec_label_pc_bee8, %dec_label_pc_c32c
  %v0_c348 = load i32, i32* @r4, align 4
  store i32 %v3_be40, i32* @r4, align 4
  store i32 %v6_be40, i32* @r5, align 4
  store i32 %v9_be40, i32* @r6, align 4
  store i32 %v12_be40, i32* @r7, align 4
  store i32 %v15_be40, i32* @r8, align 4
  store i32 %v18_be40, i32* @sb, align 4
  store i32 %v21_be40, i32* @sl, align 4
  store i32 %v24_be40, i32* @fp, align 4
  store i32 %v27_be40, i32* @lr, align 4
  ret i32 %v0_c348

dec_label_pc_c35c:                                ; preds = %dec_label_pc_c030
  %v1_c35c = add i32 %v0_c35c, 1
  %v7_c360 = icmp eq i32 %v0_c35c, 0
  br i1 %v7_c360, label %dec_label_pc_c368, label %dec_label_pc_c038

dec_label_pc_c368:                                ; preds = %dec_label_pc_c35c
  %v1_c368 = add i32 %v0_c040, 3
  %v2_c368 = inttoptr i32 %v1_c368 to i8*
  %v3_c368 = load i8, i8* %v2_c368, align 1
  %v7_c36c = icmp eq i8 %v3_c368, 65
  br i1 %v7_c36c, label %dec_label_pc_c380, label %dec_label_pc_c374

dec_label_pc_c374:                                ; preds = %dec_label_pc_c368, %dec_label_pc_c380
  %v0_c04880 = phi i32 [ %v0_c04881, %dec_label_pc_c368 ], [ 1, %dec_label_pc_c380 ]
  br label %dec_label_pc_c010.backedge

dec_label_pc_c010.backedge:                       ; preds = %dec_label_pc_c374, %dec_label_pc_c03c
  %v0_c04879 = phi i32 [ %v0_c04880, %dec_label_pc_c374 ], [ %v0_c04881, %dec_label_pc_c03c ]
  %v0_c35c71 = phi i32 [ %v1_c35c, %dec_label_pc_c374 ], [ %v0_c03c, %dec_label_pc_c03c ]
  %v0_c030.pr68 = phi i32 [ 0, %dec_label_pc_c374 ], [ %v0_c030.pr69, %dec_label_pc_c03c ]
  %v0_c010 = add i32 %v0_c040, 1
  %v1_c010 = add i32 %v0_c040, 3
  %v2_c010 = inttoptr i32 %v1_c010 to i8*
  %v3_c010 = load i8, i8* %v2_c010, align 1
  %v2_c014 = icmp eq i8 %v3_c010, 0
  %v1_c018 = add i32 %v0_c01876, 1
  br i1 %v2_c014, label %dec_label_pc_c048, label %dec_label_pc_c020

dec_label_pc_c380:                                ; preds = %dec_label_pc_c368
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_c374

dec_label_pc_c388:                                ; preds = %dec_label_pc_be40
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_bee8

; uselistorder directives
  uselistorder i32 %v1_c018, { 1, 0 }
  uselistorder i8 %v3_c010, { 1, 0 }
  uselistorder i32 %v0_c04879, { 1, 0 }
  uselistorder i32 %v1_c35c, { 1, 0 }
  uselistorder i32 %v2_c308, { 1, 0 }
  uselistorder i32 %v1_c074, { 1, 0 }
  uselistorder i32 %v0_c08027, { 1, 0 }
  uselistorder i32 %v1_c094, { 0, 3, 4, 5, 1, 2 }
  uselistorder i32 %v0_c03c, { 1, 0 }
  uselistorder i32 %v0_c01876, { 1, 0 }
  uselistorder i32 %v0_c35c, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_c04881, { 1, 2, 0 }
  uselistorder i32 %v1_c01852, { 1, 0 }
  uselistorder i32 %v2_bffc, { 1, 0 }
  uselistorder i32 %v1_bff8, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_bfb8, { 0, 2, 1 }
  uselistorder i32 %v0_bfb813, { 1, 0 }
  uselistorder i32 %v1_bf84, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_bf18, { 1, 2, 0 }
  uselistorder i8* %v3_be88, { 1, 0, 2 }
  uselistorder i32 %v2_be68, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_be54, { 1, 0, 2, 4, 3, 5, 7, 6, 8, 9 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 47, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_127d0, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_f470, { 1, 0 }
  uselistorder label %dec_label_pc_c374, { 1, 0 }
  uselistorder label %dec_label_pc_c348, { 1, 0 }
  uselistorder label %dec_label_pc_c32c, { 1, 0 }
  uselistorder label %dec_label_pc_c320, { 1, 0 }
  uselistorder label %dec_label_pc_c314, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c2fc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c20c, { 1, 0 }
  uselistorder label %dec_label_pc_c20cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_c1f4.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_c110, { 1, 0 }
  uselistorder label %dec_label_pc_c110.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c100.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c088, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_c03c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c020, { 1, 0 }
  uselistorder label %dec_label_pc_bfc4, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_bf28.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_bf78, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_bf40, { 1, 0 }
  uselistorder label %dec_label_pc_bee8, { 1, 0 }
}

define i32 @function_c3b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_c3b8:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %v3_c3b8 = load i32, i32* @r4, align 4
  %v6_c3b8 = load i32, i32* @r5, align 4
  %v9_c3b8 = load i32, i32* @r6, align 4
  %v12_c3b8 = load i32, i32* @r7, align 4
  %v15_c3b8 = load i32, i32* @r8, align 4
  %v18_c3b8 = load i32, i32* @sb, align 4
  %v21_c3b8 = load i32, i32* @sl, align 4
  %v24_c3b8 = load i32, i32* @fp, align 4
  %v2_c3c4 = call i32 @function_126dc(i32* null)
  store i32 %v2_c3c4, i32* @r5, align 4
  %v0_c3cc = call i32 @function_118e0()
  %v7_c3d0 = icmp eq i32 %v0_c3cc, -1
  %. = zext i1 %v7_c3d0 to i32
  %tmp65 = icmp slt i32 %v0_c3cc, 1
  %storemerge46 = select i1 %tmp65, i32 %., i32 1
  store i32 %storemerge46, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f07c.55 to i32), i32* %r3.global-to-local, align 4
  %v2_c3ec = icmp eq i32 %storemerge46, 0
  store i32 %v0_c3cc, i32* @global_var_1f07c.55, align 4
  br i1 %v2_c3ec, label %dec_label_pc_c404, label %dec_label_pc_c3f8

dec_label_pc_c3f8:                                ; preds = %dec_label_pc_c458, %dec_label_pc_c3b8
  %v1_c400 = phi i32 [ %v0_c3cc, %dec_label_pc_c3b8 ], [ 0, %dec_label_pc_c458 ]
  store i32 %v3_c3b8, i32* @r4, align 4
  store i32 %v6_c3b8, i32* @r5, align 4
  store i32 %v9_c3b8, i32* @r6, align 4
  store i32 %v12_c3b8, i32* @r7, align 4
  store i32 %v15_c3b8, i32* @r8, align 4
  store i32 %v18_c3b8, i32* @sb, align 4
  store i32 %v21_c3b8, i32* @sl, align 4
  store i32 %v24_c3b8, i32* @fp, align 4
  ret i32 %v1_c400

dec_label_pc_c404:                                ; preds = %dec_label_pc_c3b8
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v1_c418 = call i32 @function_114e0(i32 81)
  %v1_c41c = call i32 @function_be40(i32 %v1_c418)
  %v2_c420 = icmp eq i32 %v1_c41c, 0
  br i1 %v2_c420, label %dec_label_pc_c428, label %dec_label_pc_c684

dec_label_pc_c428:                                ; preds = %dec_label_pc_c404, %dec_label_pc_c684, %dec_label_pc_c6b0
  %v1_c42c = call i32 @function_12800(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_c434 = call i32 @function_10910()
  %v1_c434 = inttoptr i32 %v0_c434 to i8*
  store i32 %v0_c434, i32* @global_var_1f648.60, align 4
  store i32 ptrtoint (i32* @global_var_1f080.62 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v1_c434, align 1
  %v0_c44c = load i32, i32* %r2.global-to-local, align 4
  %v1_c44c = load i32, i32* %r3.global-to-local, align 4
  %v2_c44c = inttoptr i32 %v1_c44c to i32*
  store i32 %v0_c44c, i32* %v2_c44c, align 4
  %v0_c450 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_c450, i32* @fp, align 4
  store i32 400, i32* @r6, align 4
  %v2_c54c = ptrtoint i32* %stack_var_-120 to i32
  %v2_c558 = bitcast i32* %stack_var_-120 to i8*
  %v2_c5b8 = ptrtoint i32* %stack_var_-632 to i32
  br label %dec_label_pc_c458

dec_label_pc_c458:                                ; preds = %dec_label_pc_c518, %dec_label_pc_c428
  %v1_c45c = call i32 @function_edb4(i32 3)
  %v3_c468 = call i32 @function_ecf0(i32 3, i32* null)
  store i32 %v3_c468, i32* @r0, align 4
  %v1_c46c = call i32 @function_f850(i32 %v3_c468)
  store i32 %v1_c46c, i32* @sl, align 4
  %v2_c470 = icmp eq i32 %v1_c46c, 0
  br i1 %v2_c470, label %dec_label_pc_c3f8, label %dec_label_pc_c478

dec_label_pc_c478:                                ; preds = %dec_label_pc_c458
  %v1_c47c = call i32 @function_ed14(i32 3)
  %v0_c48027 = load i32, i32* @sl, align 4
  %v1_c48428 = inttoptr i32 %v0_c48027 to i32*
  %v2_c48429 = call i32 @function_f89c(i32* %v1_c48428)
  %v2_c48831 = icmp eq i32 %v2_c48429, 0
  br i1 %v2_c48831, label %dec_label_pc_c518, label %dec_label_pc_c490.preheader

dec_label_pc_c490.preheader:                      ; preds = %dec_label_pc_c478, %dec_label_pc_c480.backedge
  %v0_c49036 = phi i32 [ %v2_c484, %dec_label_pc_c480.backedge ], [ %v2_c48429, %dec_label_pc_c478 ]
  br label %dec_label_pc_c490

dec_label_pc_c490:                                ; preds = %dec_label_pc_c490.preheader, %dec_label_pc_c500
  %v0_c4a0 = phi i32 [ %v0_c49036, %dec_label_pc_c490.preheader ], [ %v2_c50c, %dec_label_pc_c500 ]
  %v1_c490 = add i32 %v0_c4a0, 19
  %v2_c490 = inttoptr i32 %v1_c490 to i8*
  %v3_c490 = load i8, i8* %v2_c490, align 1
  %v4_c490 = zext i8 %v3_c490 to i32
  %v1_c494 = add nsw i32 %v4_c490, -48
  store i32 %v1_c494, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_c494, 9
  br i1 %tmp, label %dec_label_pc_c480.backedge, label %dec_label_pc_c4a0

dec_label_pc_c4a0:                                ; preds = %dec_label_pc_c490
  store i32 %v1_c490, i32* @r4, align 4
  %v3_c4ac = call i32 @function_f334(i8* %v2_c490, i32 10)
  %v0_c4b0 = load i32, i32* @r6, align 4
  store i32 %v3_c4ac, i32* @r8, align 4
  %v0_c4b8 = load i32, i32* @fp, align 4
  %v1_c4b8 = add i32 %v0_c4b8, 1
  store i32 %v1_c4b8, i32* @fp, align 4
  %v5_c4bc = icmp slt i32 %v0_c4b0, %v3_c4ac
  %v2_c528 = call i32 @function_126dc(i32* null)
  br i1 %v5_c4bc, label %dec_label_pc_c524, label %dec_label_pc_c4c0

dec_label_pc_c4c0:                                ; preds = %dec_label_pc_c4a0
  %v0_c4c8 = load i32, i32* @r5, align 4
  %v2_c4c8 = sub i32 %v2_c528, %v0_c4c8
  %v7_c4d0 = icmp slt i32 %v2_c4c8, 601
  br i1 %v7_c4d0, label %dec_label_pc_c4d8, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_c4c0
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_c480.backedge

dec_label_pc_c4d8:                                ; preds = %dec_label_pc_c4c0
  %v0_c4d8 = load i32, i32* @r8, align 4
  %v7_c4dc = icmp slt i32 %v0_c4d8, 401
  br i1 %v7_c4dc, label %dec_label_pc_c480.backedge, label %dec_label_pc_c4e0

dec_label_pc_c4e0:                                ; preds = %dec_label_pc_c4d8
  %v2_c4e4 = load i32, i32* @fp, align 4
  %v3_c4e4 = zext i32 %v2_c4e4 to i64
  %v4_c4e4 = mul nuw i64 %v3_c4e4, 3435973837
  %v3_c4e81 = udiv i64 %v4_c4e4, 34359738368
  %v3_c4ec3 = mul nuw nsw i64 %v3_c4e81, 8
  %v3_c4ec = trunc i64 %v3_c4ec3 to i32
  store i32 %v3_c4ec, i32* %r3.global-to-local, align 4
  %v2_c4f05 = mul nuw nsw i64 %v3_c4e81, 2
  %v2_c4f0 = trunc i64 %v2_c4f05 to i32
  %v2_c4f4 = add i32 %v3_c4ec, %v2_c4f0
  store i32 %v2_c4f4, i32* %r2.global-to-local, align 4
  %v9_c4f8 = icmp eq i32 %v2_c4e4, %v2_c4f4
  br i1 %v9_c4f8, label %dec_label_pc_c500, label %dec_label_pc_c480.backedge

dec_label_pc_c500:                                ; preds = %dec_label_pc_c4e0
  %v1_c504 = call i32 @function_12800(i32 1)
  %v0_c508 = load i32, i32* @sl, align 4
  %v1_c50c = inttoptr i32 %v0_c508 to i32*
  %v2_c50c = call i32 @function_f89c(i32* %v1_c50c)
  %v2_c510 = icmp eq i32 %v2_c50c, 0
  br i1 %v2_c510, label %dec_label_pc_c518, label %dec_label_pc_c490

dec_label_pc_c518:                                ; preds = %dec_label_pc_c480.backedge, %dec_label_pc_c500, %dec_label_pc_c478
  %v0_c518 = load i32, i32* @sl, align 4
  %v1_c51c = inttoptr i32 %v0_c518 to i32*
  %v2_c51c = call i32 @function_f820(i32* %v1_c51c)
  br label %dec_label_pc_c458

dec_label_pc_c524:                                ; preds = %dec_label_pc_c4a0
  %v1_c534 = call i32 @function_edb4(i32 3)
  %v1_c53c = call i32 @function_edb4(i32 7)
  %v3_c548 = call i32 @function_ecf0(i32 3, i32* null)
  store i32 %v2_c54c, i32* @sb, align 4
  store i32 %v2_c54c, i32* @r0, align 4
  %v3_c558 = call i32 @function_f238(i8* %v2_c558, i32 %v3_c548)
  %v1_c55c = load i32, i32* @sb, align 4
  %v2_c55c = add i32 %v1_c55c, %v3_c558
  store i32 %v2_c55c, i32* @r5, align 4
  %v0_c560 = load i32, i32* @r4, align 4
  store i32 %v2_c55c, i32* @r0, align 4
  %v2_c568 = inttoptr i32 %v2_c55c to i8*
  %v3_c568 = call i32 @function_f238(i8* %v2_c568, i32 %v0_c560)
  store i32 %v3_c568, i32* @r4, align 4
  %v3_c578 = call i32 @function_ecf0(i32 7, i32* null)
  %v0_c580 = load i32, i32* @r4, align 4
  %v1_c580 = load i32, i32* @r5, align 4
  %v2_c580 = add i32 %v1_c580, %v0_c580
  store i32 %v2_c580, i32* @r0, align 4
  %v2_c584 = inttoptr i32 %v2_c580 to i8*
  %v3_c584 = call i32 @function_f238(i8* %v2_c584, i32 %v3_c578)
  %v1_c58c = call i32 @function_ed14(i32 3)
  %v1_c594 = call i32 @function_ed14(i32 7)
  %v2_c5a0 = call i32 @function_fd74(i32 %v2_c54c, i32 0)
  %v7_c5a4 = icmp eq i32 %v2_c5a0, -1
  store i32 %v2_c5a0, i32* @r7, align 4
  br i1 %v7_c5a4, label %dec_label_pc_c650, label %dec_label_pc_c5b0

dec_label_pc_c5b0:                                ; preds = %dec_label_pc_c524
  %v1_c5b4 = call i32 @function_edb4(i32 9)
  store i32 %v2_c5b8, i32* @r6, align 4
  br label %dec_label_pc_c5bc

dec_label_pc_c5bc:                                ; preds = %dec_label_pc_c620, %.thread12, %dec_label_pc_c5d4, %dec_label_pc_c5b0
  %v0_c5bc = load i32, i32* @r7, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v3_c5c8 = call i32 @function_12790(i32 %v0_c5bc, i32 %v2_c5b8, i32 512)
  store i32 %v3_c5c8, i32* @r4, align 4
  %tmp68 = icmp slt i32 %v3_c5c8, 1
  br i1 %tmp68, label %dec_label_pc_c670, label %dec_label_pc_c5d4

dec_label_pc_c5d4:                                ; preds = %dec_label_pc_c5bc
  %v3_c5dc = call i32 @function_ecf0(i32 9, i32* null)
  store i32 %v3_c5dc, i32* @r5, align 4
  %v3_c5ec = call i32 @function_ecf0(i32 9, i32* null)
  %v1_c5f0 = inttoptr i32 %v3_c5ec to i8*
  %v2_c5f0 = call i32 @function_f210(i8* %v1_c5f0)
  %v0_c5f4 = load i32, i32* @r4, align 4
  %v5_c5f8 = icmp slt i32 %v0_c5f4, %v2_c5f0
  br i1 %v5_c5f8, label %dec_label_pc_c5bc, label %.thread12

.thread12:                                        ; preds = %dec_label_pc_c5d4
  %v1_c60419 = add i32 %v0_c5f4, -1
  store i32 %v1_c60419, i32* @r4, align 4
  %v2_c60420 = icmp eq i32 %v0_c5f4, 0
  br i1 %v2_c60420, label %dec_label_pc_c5bc, label %dec_label_pc_c60c.lr.ph

dec_label_pc_c60c.lr.ph:                          ; preds = %.thread12
  %v0_c60c.pre = load i32, i32* @r5, align 4
  %v1_c610.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c60c

dec_label_pc_c60c:                                ; preds = %dec_label_pc_c620, %dec_label_pc_c60c.lr.ph
  %v0_c604 = phi i32 [ %v1_c60419, %dec_label_pc_c60c.lr.ph ], [ %v1_c604, %dec_label_pc_c620 ]
  %v0_c620 = phi i32 [ 0, %dec_label_pc_c60c.lr.ph ], [ %v1_c620, %dec_label_pc_c620 ]
  %v1_c60c = phi i32 [ 0, %dec_label_pc_c60c.lr.ph ], [ %v1_c60c39, %dec_label_pc_c620 ]
  %v2_c60c = add i32 %v1_c60c, %v0_c60c.pre
  %v3_c60c = inttoptr i32 %v2_c60c to i8*
  %v4_c60c = load i8, i8* %v3_c60c, align 1
  %v6_c60c = zext i8 %v4_c60c to i32
  store i32 %v6_c60c, i32* %r2.global-to-local, align 4
  %v2_c610 = add i32 %v0_c620, %v1_c610.pre
  %v3_c610 = inttoptr i32 %v2_c610 to i8*
  %v4_c610 = load i8, i8* %v3_c610, align 1
  %v6_c610 = zext i8 %v4_c610 to i32
  store i32 %v6_c610, i32* %r3.global-to-local, align 4
  %v9_c614 = icmp eq i8 %v4_c610, %v4_c60c
  br i1 %v9_c614, label %dec_label_pc_c628, label %bb69

bb69:                                             ; preds = %dec_label_pc_c60c
  br label %dec_label_pc_c620

dec_label_pc_c620:                                ; preds = %bb69, %dec_label_pc_c628
  %v1_c60c39 = phi i32 [ %v1_c628, %dec_label_pc_c628 ], [ 0, %bb69 ]
  %v1_c620 = add i32 %v0_c620, 1
  %v1_c604 = add i32 %v0_c604, -1
  store i32 %v1_c604, i32* @r4, align 4
  %v2_c604 = icmp eq i32 %v0_c604, 0
  br i1 %v2_c604, label %dec_label_pc_c5bc, label %dec_label_pc_c60c

dec_label_pc_c628:                                ; preds = %dec_label_pc_c60c
  %v1_c628 = add i32 %v1_c60c, 1
  %v9_c62c = icmp eq i32 %v2_c5f0, %v1_c628
  br i1 %v9_c62c, label %dec_label_pc_c634, label %dec_label_pc_c620

dec_label_pc_c634:                                ; preds = %dec_label_pc_c628
  %v1_c638 = call i32 @function_ed14(i32 9)
  %v0_c63c = load i32, i32* @r7, align 4
  %v1_c640 = call i32 @function_12714(i32 %v0_c63c)
  %v0_c644 = load i32, i32* @r8, align 4
  store i32 %v0_c644, i32* @r0, align 4
  %v2_c64c = call i32 @function_11a6c(i32 %v0_c644, i32 9)
  br label %dec_label_pc_c650

dec_label_pc_c650:                                ; preds = %dec_label_pc_c524, %dec_label_pc_c670, %dec_label_pc_c634
  store i32 %v2_c54c, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_c658 = call i32 @function_f2a4()
  %v1_c660 = call i32 @function_12800(i32 1)
  store i32 %v2_c528, i32* @r5, align 4
  %v0_c668 = load i32, i32* @r8, align 4
  store i32 %v0_c668, i32* @r6, align 4
  br label %dec_label_pc_c480.backedge

dec_label_pc_c480.backedge:                       ; preds = %dec_label_pc_c4e0, %dec_label_pc_c4d8, %dec_label_pc_c490, %dec_label_pc_c650, %.thread7
  %v0_c480 = load i32, i32* @sl, align 4
  %v1_c484 = inttoptr i32 %v0_c480 to i32*
  %v2_c484 = call i32 @function_f89c(i32* %v1_c484)
  %v2_c488 = icmp eq i32 %v2_c484, 0
  br i1 %v2_c488, label %dec_label_pc_c518, label %dec_label_pc_c490.preheader

dec_label_pc_c670:                                ; preds = %dec_label_pc_c5bc
  %v1_c674 = call i32 @function_ed14(i32 9)
  %v0_c678 = load i32, i32* @r7, align 4
  %v1_c67c = call i32 @function_12714(i32 %v0_c678)
  br label %dec_label_pc_c650

dec_label_pc_c684:                                ; preds = %dec_label_pc_c404
  %v2_c408 = ptrtoint i32* %stack_var_-128 to i32
  %v1_c688 = call i32 @function_114e0(i32 23)
  store i32 %v2_c408, i32* %r3.global-to-local, align 4
  %v0_c694 = load i32, i32* @r4, align 4
  store i32 %v0_c694, i32* %r2.global-to-local, align 4
  %v3_c6a0 = call i32 @function_117e8(i32 2, i32 1, i32 %v0_c694)
  %v7_c6a4 = icmp eq i32 %v3_c6a0, -1
  store i32 %v3_c6a0, i32* @r4, align 4
  br i1 %v7_c6a4, label %dec_label_pc_c428, label %dec_label_pc_c6b0

dec_label_pc_c6b0:                                ; preds = %dec_label_pc_c684
  %v2_c6b0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 16, i32* @r2, align 4
  %v3_c6b8 = call i32 @function_11404(i32 %v3_c6a0, i32 %v2_c6b0, i32 16)
  %v0_c6bc = load i32, i32* @r4, align 4
  store i32 %v0_c6bc, i32* @r0, align 4
  %v2_c6c4 = call i32 @function_1163c(i32 %v0_c6bc, i32 1)
  br label %dec_label_pc_c428

; uselistorder directives
  uselistorder i32 %v3_c6a0, { 2, 1, 0 }
  uselistorder i32 %v2_c484, { 1, 0 }
  uselistorder i32 %v1_c628, { 1, 0 }
  uselistorder i32 %v1_c604, { 1, 0 }
  uselistorder i32 %v1_c60c, { 1, 0 }
  uselistorder i32 %v0_c620, { 1, 0 }
  uselistorder i32 %v0_c604, { 1, 0 }
  uselistorder i32 %v0_c5f4, { 1, 0, 2 }
  uselistorder i32 %v2_c5f0, { 1, 0 }
  uselistorder i32 %v2_c5a0, { 1, 0 }
  uselistorder i32 %v2_c50c, { 1, 0 }
  uselistorder i32 %storemerge46, { 1, 0 }
  uselistorder i32 %v0_c3cc, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-56, { 1, 0 }
  uselistorder i32 (i32*)* @function_f89c, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_f850, { 2, 1, 0 }
  uselistorder i32* @global_var_1f07c.55, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c480.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_c650, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c620, { 1, 0 }
  uselistorder label %dec_label_pc_c490, { 1, 0 }
  uselistorder label %dec_label_pc_c490.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c428, { 2, 1, 0 }
}

define i32 @function_c6dc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c6dc:
  store i32 ptrtoint (i32* @global_var_c6f4.65 to i32), i32* @global_var_1f040.67, align 4
  ret i32 %arg1
}

define i32 @function_c6f4() local_unnamed_addr {
dec_label_pc_c6f4:
  %v1_c6fc = call i32 @function_edb4(i32 2)
  %v1_c704 = call i32 @function_114bc(i32 -644634568)
  store i32 ptrtoint (i16** @global_var_1f64c.70 to i32), i32* @r4, align 4
  store i32 %v1_c704, i32* @global_var_1f650.71, align 4
  %v3_c718 = call i32 @function_ecf0(i32 2, i32* null)
  %v4_c718 = inttoptr i32 %v3_c718 to i16*
  %v3_c71c = load i16, i16* %v4_c718, align 2
  store i16 %v3_c71c, i16* bitcast (i32* @global_var_1f64e.72 to i16*), align 4
  %v1_c728 = call i32 @function_ed14(i32 2)
  ret i32 %v1_c728
}

define i32 @function_c734(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c734:
  %v0_c734 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c734, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_c734
  %v21_c734 = add i32 %arg2, 24
  %v22_c734 = inttoptr i32 %v21_c734 to i32*
  %v23_c734 = load i32, i32* %v22_c734, align 4
  call void @__pseudo_branch(i32 %v23_c734)
  %v0_c738.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c738.pr, label %bb1, label %bb2

bb1:                                              ; preds = %bb
  %v2_c738 = load i32, i32* @ip, align 4
  %v5_c738 = sdiv i32 %v2_c738, 4096
  %v6_c738 = and i32 %v5_c738, %arg1
  call void @__pseudo_branch(i32 %v6_c738)
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_c734, %bb, %bb1
  %v7_c738 = load i32, i32* @r0, align 4
  ret i32 %v7_c738

; uselistorder directives
  uselistorder label %bb2, { 2, 1, 0 }
}

define i32 @function_c73c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c73c:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_c73c = load i32, i32* @r4, align 4
  %v6_c73c = load i32, i32* @r5, align 4
  %v9_c73c = load i32, i32* @r6, align 4
  %v12_c73c = load i32, i32* @r7, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_c758 = call i32 @function_117e8(i32 2, i32 1, i32 0)
  store i32 %v3_c758, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1f038.74 to i32), i32* @r6, align 4
  %v7_c760 = icmp eq i32 %v3_c758, -1
  store i32 %v3_c758, i32* @global_var_1f038.74, align 4
  br i1 %v7_c760, label %dec_label_pc_c814, label %dec_label_pc_c76c

dec_label_pc_c76c:                                ; preds = %dec_label_pc_c73c
  %v2_c76c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_c76c, i32* @r3, align 4
  %v0_c770 = load i32, i32* @r4, align 4
  store i32 4, i32* @r5, align 4
  store i32 2, i32* @r2, align 4
  %v5_c780 = call i32 @function_11778(i32 %v3_c758, i32 %v0_c770, i32 2, i32 %v2_c76c, i32 4)
  %v2_c784 = load i32, i32* @global_var_1f038.74, align 4
  store i32 %v2_c784, i32* @r4, align 4
  %v3_c794 = call i32 @function_fbfc(i32 %v2_c784, i32 3, i32 0)
  store i32 ptrtoint (i8** @global_var_1f044.76 to i32), i32* @r7, align 4
  %v1_c79c = or i32 %v3_c794, 2048
  %v0_c7a0 = load i32, i32* @r5, align 4
  %v0_c7a4 = load i32, i32* @r4, align 4
  %v3_c7a8 = call i32 @function_fbfc(i32 %v0_c7a4, i32 %v0_c7a0, i32 %v1_c79c)
  %v2_c7ac = load i8, i8* bitcast (i8** @global_var_1f044.76 to i8*), align 4
  %v2_c7b0 = icmp eq i8 %v2_c7ac, 0
  store i32 2, i32* %stack_var_-44, align 4
  br i1 %v2_c7b0, label %dec_label_pc_c7c0, label %dec_label_pc_c820

dec_label_pc_c7c0:                                ; preds = %dec_label_pc_c76c
  br label %dec_label_pc_c7c8

dec_label_pc_c7c8:                                ; preds = %dec_label_pc_c820, %dec_label_pc_c7c0
  %v1_c7d4 = call i32 @function_114e0(i32 1991)
  %v0_c7dc = call i32 @function_fb60()
  store i32 0, i32* @r4, align 4
  %v2_c7e4 = inttoptr i32 %v0_c7dc to i32*
  store i32 0, i32* %v2_c7e4, align 4
  %v2_c7e8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_c7e8, i32* @r5, align 4
  %v2_c7ec = load i32, i32* @global_var_1f038.74, align 4
  store i32 16, i32* @r2, align 4
  %v3_c7f8 = call i32 @function_11404(i32 %v2_c7ec, i32 %v2_c7e8, i32 16)
  %v7_c7fc = icmp eq i32 %v3_c7f8, -1
  br i1 %v7_c7fc, label %dec_label_pc_c834, label %dec_label_pc_c804

dec_label_pc_c804:                                ; preds = %dec_label_pc_c7c8
  %v2_c80c = load i32, i32* @global_var_1f038.74, align 4
  store i32 %v2_c80c, i32* @r0, align 4
  %v2_c810 = call i32 @function_1163c(i32 %v2_c80c, i32 1)
  br label %dec_label_pc_c814

dec_label_pc_c814:                                ; preds = %dec_label_pc_c73c, %dec_label_pc_c844, %dec_label_pc_c804
  %v1_c81c = phi i32 [ %v3_c758, %dec_label_pc_c73c ], [ %v1_c894, %dec_label_pc_c844 ], [ %v2_c810, %dec_label_pc_c804 ]
  store i32 %v3_c73c, i32* @r4, align 4
  store i32 %v6_c73c, i32* @r5, align 4
  store i32 %v9_c73c, i32* @r6, align 4
  store i32 %v12_c73c, i32* @r7, align 4
  ret i32 %v1_c81c

dec_label_pc_c820:                                ; preds = %dec_label_pc_c76c
  %v1_c828 = call i32 @function_114bc(i32 2130706433)
  br label %dec_label_pc_c7c8

dec_label_pc_c834:                                ; preds = %dec_label_pc_c7c8
  %v0_c834 = call i32 @function_fb60()
  %v1_c838 = inttoptr i32 %v0_c834 to i32*
  %v2_c838 = load i32, i32* %v1_c838, align 4
  %v7_c83c = icmp eq i32 %v2_c838, 99
  br i1 %v7_c83c, label %dec_label_pc_c89c, label %dec_label_pc_c844

dec_label_pc_c844:                                ; preds = %dec_label_pc_c89c, %bb, %dec_label_pc_c834
  store i32 2, i32* %stack_var_-44, align 4
  %v1_c85c = call i32 @function_114e0(i32 1991)
  %v2_c86c = load i32, i32* @global_var_1f038.74, align 4
  %v3_c870 = call i32 @function_1142c(i32 %v2_c86c, i32 %v2_c7e8, i32 16)
  %v1_c878 = call i32 @function_12800(i32 5)
  %v2_c87c = load i32, i32* @global_var_1f038.74, align 4
  %v1_c880 = call i32 @function_12714(i32 %v2_c87c)
  %v1_c88c = call i32 @function_114e0(i32 1991)
  %v1_c890 = call i32 @function_be40(i32 %v1_c88c)
  %v1_c894 = call i32 @function_c73c(i32 %v1_c890)
  br label %dec_label_pc_c814

dec_label_pc_c89c:                                ; preds = %dec_label_pc_c834
  %v2_c89c = load i8, i8* bitcast (i8** @global_var_1f044.76 to i8*), align 4
  %v3_c89c = zext i8 %v2_c89c to i32
  %v1_c8a0 = load i32, i32* @r4, align 4
  %v9_c8a0 = icmp eq i32 %v3_c89c, %v1_c8a0
  br i1 %v9_c8a0, label %dec_label_pc_c844, label %bb

bb:                                               ; preds = %dec_label_pc_c89c
  %v2_c8a8 = trunc i32 %v1_c8a0 to i8
  store i8 %v2_c8a8, i8* bitcast (i8** @global_var_1f044.76 to i8*), align 4
  br label %dec_label_pc_c844

; uselistorder directives
  uselistorder i32 %v3_c758, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 0, 2, 1 }
  uselistorder i32 (i32)* @function_be40, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_1163c, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11404, { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f044.76 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1f044.76, { 1, 0 }
  uselistorder label %dec_label_pc_c844, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c814, { 1, 2, 0 }
}

define i32 @function_c8bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_c8bc:
  %stack_var_-20 = alloca i32, align 4
  %v3_c8bc = load i32, i32* @r4, align 4
  %v6_c8bc = load i32, i32* @r5, align 4
  %v0_c8c4 = call i32 @function_118e0()
  %v7_c8c8 = icmp eq i32 %v0_c8c4, -1
  %. = zext i1 %v7_c8c8 to i32
  %tmp11 = icmp slt i32 %v0_c8c4, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_c8e4 = icmp eq i32 %storemerge4, 0
  store i32 %v0_c8c4, i32* @global_var_1f084.79, align 4
  br i1 %v2_c8e4, label %dec_label_pc_c8fc, label %dec_label_pc_c8f0

dec_label_pc_c8f0:                                ; preds = %dec_label_pc_c8bc
  store i32 %v3_c8bc, i32* @r4, align 4
  store i32 %v6_c8bc, i32* @r5, align 4
  ret i32 %v0_c8c4

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8bc
  store i32 1, i32* %stack_var_-20, align 4
  %v1_c908 = call i32 @function_edb4(i32 13)
  %v1_c910 = call i32 @function_edb4(i32 14)
  %v0_c914 = load i32, i32* @r5, align 4
  %v2_c91c = inttoptr i32 %v0_c914 to i32*
  %v3_c91c = call i32 @function_ecf0(i32 13, i32* %v2_c91c)
  %v2_c924 = call i32 @function_fd74(i32 %v3_c91c, i32 2)
  %v7_c928 = icmp eq i32 %v2_c924, -1
  store i32 %v2_c924, i32* @r4, align 4
  br i1 %v7_c928, label %dec_label_pc_c970, label %dec_label_pc_c934

dec_label_pc_c934:                                ; preds = %dec_label_pc_c970, %dec_label_pc_c8fc
  %v0_c940 = phi i32 [ %v2_c980, %dec_label_pc_c970 ], [ %v2_c924, %dec_label_pc_c8fc ]
  store i32 %v0_c940, i32* @r0, align 4
  %v2_c944 = ptrtoint i32* %stack_var_-20 to i32
  %v3_c948 = call i32 @function_11238(i32 %v0_c940, i32 -2147199228, i32 %v2_c944)
  br label %dec_label_pc_c94c

dec_label_pc_c94c:                                ; preds = %dec_label_pc_c94c, %dec_label_pc_c934
  %v0_c958 = load i32, i32* @r4, align 4
  store i32 %v0_c958, i32* @r0, align 4
  %v3_c960 = call i32 @function_11238(i32 %v0_c958, i32 -2147199227, i32 0)
  %v1_c968 = call i32 @function_12800(i32 10)
  br label %dec_label_pc_c94c

dec_label_pc_c970:                                ; preds = %dec_label_pc_c8fc
  %v0_c970 = load i32, i32* @r5, align 4
  %v2_c978 = inttoptr i32 %v0_c970 to i32*
  %v3_c978 = call i32 @function_ecf0(i32 14, i32* %v2_c978)
  %v2_c980 = call i32 @function_fd74(i32 %v3_c978, i32 2)
  %v3_c984 = icmp eq i32 %v2_c980, -1
  store i32 %v2_c980, i32* @r4, align 4
  br i1 %v3_c984, label %dec_label_pc_c990, label %dec_label_pc_c934

dec_label_pc_c990:                                ; preds = %dec_label_pc_c970
  %v1_c994 = call i32 @function_ed14(i32 13)
  %v1_c99c = call i32 @function_ed14(i32 14)
  %v0_c9a0 = load i32, i32* @r5, align 4
  %v1_c9a4 = call i32 @function_fb78(i32 %v0_c9a0)
  %v0_c9a8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c9a8, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_c990
  %v2_c9a8 = load i32, i32* @r4, align 4
  %v4_c9a8 = mul i32 %v2_c9a8, 2
  %v5_c9a8 = and i32 %v4_c9a8, 2
  call void @__pseudo_branch(i32 %v5_c9a8)
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_c990, %bb14
  ret i32 %v1_c9a4

; uselistorder directives
  uselistorder i32 %v2_c980, { 1, 2, 0 }
  uselistorder i32 %v0_c940, { 1, 0 }
  uselistorder i32 %v2_c924, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_c8c4, { 2, 1, 3, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11238, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_c9ac(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_c9ac:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1552 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-528 = alloca i32, align 4
  %stack_var_-400 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %v2_c9b8 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_c9b8, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_c9d0 = call i32 @function_11b38(i32* nonnull %stack_var_-272)
  %v2_c9dc = call i32 @function_11ad0(i32 %v2_c9b8, i32 2)
  %v0_c9e0 = load i32, i32* @r5, align 4
  store i32 %v0_c9e0, i32* @r2, align 4
  store i32 %v0_c9e0, i32* @r0, align 4
  %v3_c9ec = call i32 @function_11ba4(i32 %v0_c9e0, i32 %v2_c9b8, i32 %v0_c9e0)
  %v2_c9f8 = call i32 @function_11b4c(i32 17, i32 1)
  %v2_ca04 = call i32 @function_11b4c(i32 5, i32 50908)
  %v0_ca08 = call i32 @function_f4cc()
  store i32 ptrtoint (i16** @global_var_1f64c.70 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f644.44 to i32), i32* @fp, align 4
  store i16 2, i16* bitcast (i16** @global_var_1f64c.70 to i16*), align 4
  store i32 %v0_ca08, i32* @global_var_1f644.44, align 4
  %v1_ca24 = call i32 @function_114bc(i32 -1334109607)
  store i32 %v1_ca24, i32* @global_var_1f650.71, align 4
  %v1_ca30 = call i32 @function_114e0(i32 23)
  %v2_ca30 = trunc i32 %v1_ca30 to i16
  store i16 %v2_ca30, i16* bitcast (i32* @global_var_1f64e.72 to i16*), align 4
  %v2_ca38 = call i32 @function_ee54(i32 %v1_ca30)
  store i32 ptrtoint (i32* @global_var_c6f4.65 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f040.67 to i32), i32* %r2.global-to-local, align 4
  %v2_ca44 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_ca44, i32* @sb, align 4
  store i32 ptrtoint (i32* @global_var_c6f4.65 to i32), i32* @global_var_1f040.67, align 4
  %v1_ca4c = call i32 @function_c73c(i32 %v2_ca38)
  %v1_ca50 = call i32 @function_d220(i32 %v1_ca4c)
  store i32 %v2_ca44, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_ca5c = call i32 @function_f2a4()
  %v0_ca60 = load i32, i32* @r6, align 4
  %v7_ca60 = icmp eq i32 %v0_ca60, 2
  br i1 %v7_ca60, label %dec_label_pc_cb94, label %dec_label_pc_ca68

dec_label_pc_ca68:                                ; preds = %dec_label_pc_cb94, %dec_label_pc_c9ac, %dec_label_pc_cba4
  %v0_ca68 = call i32 @function_d1c4()
  store i32 %v0_ca68, i32* @r6, align 4
  %v0_ca70 = load i32, i32* @r8, align 4
  %v1_ca70 = inttoptr i32 %v0_ca70 to i32*
  %v2_ca70 = load i32, i32* %v1_ca70, align 4
  %v1_ca74 = inttoptr i32 %v2_ca70 to i8*
  %v2_ca74 = call i32 @function_f210(i8* %v1_ca74)
  store i32 %v2_ca74, i32* @r5, align 4
  %v0_ca7c = load i32, i32* @r8, align 4
  %v1_ca7c = inttoptr i32 %v0_ca7c to i32*
  %v2_ca7c = load i32, i32* %v1_ca7c, align 4
  %v1_ca80 = inttoptr i32 %v2_ca7c to i8*
  %v2_ca80 = call i32 @function_f210(i8* %v1_ca80)
  %v0_ca84 = load i32, i32* @r5, align 4
  %v1_ca84 = sub i32 20, %v0_ca84
  store i32 %v2_ca80, i32* @r4, align 4
  %v0_ca8c = load i32, i32* @r6, align 4
  %v2_ca90 = call i32 @function_f7f4(i32 %v0_ca8c, i32 %v1_ca84)
  %v2_ca94 = ptrtoint i32* %stack_var_-112 to i32
  store i32 %v2_ca94, i32* @r5, align 4
  %v0_ca98 = load i32, i32* @r4, align 4
  %v2_ca98 = add i32 %v0_ca98, %v1_ca84
  store i32 %v2_ca98, i32* @r4, align 4
  %v2_caa4 = call i32 @function_d288(i32 %v2_ca94, i32 %v2_ca98)
  %v2_caac = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_caac, i32* %ip.global-to-local, align 4
  %v1_cab0 = load i32, i32* @r4, align 4
  %v2_cab0 = add i32 %v1_cab0, %v2_caac
  store i32 %v2_cab0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_cabc = load i32, i32* @r8, align 4
  %v1_cabc = inttoptr i32 %v0_cabc to i32*
  %v2_cabc = load i32, i32* %v1_cabc, align 4
  store i32 %v2_cabc, i32* @r0, align 4
  %v3_cac0 = add i32 %v2_cab0, -72
  %v4_cac0 = inttoptr i32 %v3_cac0 to i8*
  store i8 0, i8* %v4_cac0, align 1
  %v2_cac4 = inttoptr i32 %v2_cabc to i8*
  %v3_cac4 = call i32 @function_f238(i8* %v2_cac4, i32 %v2_ca94)
  store i32 32, i32* @r1, align 4
  store i32 %v2_ca94, i32* @r0, align 4
  %v0_cad0 = call i32 @function_f2a4()
  %v0_cad4 = call i32 @function_d1c4()
  store i32 %v0_cad4, i32* @r7, align 4
  %v0_cadc = load i32, i32* @r8, align 4
  %v1_cadc = inttoptr i32 %v0_cadc to i32*
  %v2_cadc = load i32, i32* %v1_cadc, align 4
  %v1_cae0 = inttoptr i32 %v2_cadc to i8*
  %v2_cae0 = call i32 @function_f210(i8* %v1_cae0)
  store i32 %v2_cae0, i32* @r6, align 4
  %v0_cae8 = load i32, i32* @r8, align 4
  %v1_cae8 = inttoptr i32 %v0_cae8 to i32*
  %v2_cae8 = load i32, i32* %v1_cae8, align 4
  %v1_caec = inttoptr i32 %v2_cae8 to i8*
  %v2_caec = call i32 @function_f210(i8* %v1_caec)
  %v0_caf0 = load i32, i32* @r6, align 4
  %v1_caf0 = sub i32 20, %v0_caf0
  store i32 %v2_caec, i32* @r4, align 4
  %v0_caf8 = load i32, i32* @r7, align 4
  %v2_cafc = call i32 @function_f7f4(i32 %v0_caf8, i32 %v1_caf0)
  %v0_cb00 = load i32, i32* @r4, align 4
  %v2_cb00 = add i32 %v0_cb00, %v1_caf0
  store i32 %v2_cb00, i32* @r4, align 4
  %v2_cb0c = call i32 @function_d288(i32 %v2_ca94, i32 %v2_cb00)
  store i32 %v2_caac, i32* @lr, align 4
  %v1_cb18 = load i32, i32* @r4, align 4
  %v2_cb18 = add i32 %v1_cb18, %v2_caac
  store i32 %v2_cb18, i32* %r3.global-to-local, align 4
  %v0_cb1c = load i32, i32* @sl, align 4
  %v1_cb1c = trunc i32 %v0_cb1c to i8
  %v3_cb1c = add i32 %v2_cb18, -72
  %v4_cb1c = inttoptr i32 %v3_cb1c to i8*
  store i8 %v1_cb1c, i8* %v4_cb1c, align 1
  %v2_cb28 = call i32 @function_fe40(i32 15, i32 %v2_ca94)
  %v1_cb30 = call i32 @function_edb4(i32 1)
  %v3_cb3c = call i32 @function_ecf0(i32 1, i32* nonnull %stack_var_-48)
  %v3_cb40 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_cb40, i32* %r2.global-to-local, align 4
  %v3_cb4c = call i32 @function_12834(i32 1, i32 %v3_cb3c, i32 %v3_cb40)
  store i32 1, i32* %r2.global-to-local, align 4
  %v3_cb5c = call i32 @function_12834(i32 1, i32 ptrtoint (i32* @global_var_16464.87 to i32), i32 1)
  %v1_cb64 = call i32 @function_ed14(i32 1)
  %v1_cb68 = call i32 @function_8588(i32 %v1_cb64)
  %v1_cb6c = call i32 @function_c3b8(i32 %v1_cb68)
  %v1_cb70 = call i32 @function_c8bc(i32 %v1_cb6c)
  %v0_cb74 = call i32 @function_118e0()
  store i32 %v0_cb74, i32* @r0, align 4
  %v1_cb78 = load i32, i32* @sl, align 4
  %v7_cb7c = icmp sgt i32 %v0_cb74, %v1_cb78
  br i1 %v7_cb7c, label %dec_label_pc_cb80, label %dec_label_pc_cbcc

dec_label_pc_cb80:                                ; preds = %dec_label_pc_ca68
  ret i32 %v1_cb78

dec_label_pc_cb94:                                ; preds = %dec_label_pc_c9ac
  %v0_cb94 = load i32, i32* @r8, align 4
  %v1_cb94 = add i32 %v0_cb94, 4
  %v2_cb94 = inttoptr i32 %v1_cb94 to i32*
  %v3_cb94 = load i32, i32* %v2_cb94, align 4
  %v1_cb98 = inttoptr i32 %v3_cb94 to i8*
  %v2_cb98 = call i32 @function_f210(i8* %v1_cb98)
  %v8_cba0 = icmp sgt i32 %v2_cb98, 31
  br i1 %v8_cba0, label %dec_label_pc_ca68, label %dec_label_pc_cba4

dec_label_pc_cba4:                                ; preds = %dec_label_pc_cb94
  %v0_cba4 = load i32, i32* @r8, align 4
  %v1_cba4 = add i32 %v0_cba4, 4
  %v2_cba4 = inttoptr i32 %v1_cba4 to i32*
  %v3_cba4 = load i32, i32* %v2_cba4, align 4
  store i32 %v2_ca44, i32* @r0, align 4
  %v2_cbac = bitcast i32* %stack_var_-144 to i8*
  %v3_cbac = call i32 @function_f238(i8* %v2_cbac, i32 %v3_cba4)
  %v0_cbb0 = load i32, i32* @r8, align 4
  %v1_cbb0 = add i32 %v0_cbb0, 4
  %v2_cbb0 = inttoptr i32 %v1_cbb0 to i32*
  %v3_cbb0 = load i32, i32* %v2_cbb0, align 4
  %v1_cbb8 = inttoptr i32 %v3_cbb0 to i8*
  %v2_cbb8 = call i32 @function_f210(i8* %v1_cbb8)
  store i32 %v2_cbb8, i32* @r1, align 4
  store i32 %v3_cbb0, i32* @r0, align 4
  %v0_cbc4 = call i32 @function_f2a4()
  br label %dec_label_pc_ca68

dec_label_pc_cbcc:                                ; preds = %dec_label_pc_ca68
  %v1_cbcc = call i32 @function_127e8(i32 %v0_cb74)
  %v0_cbd4 = load i32, i32* @sl, align 4
  %v1_cbd8 = call i32 @function_12714(i32 %v0_cbd4)
  %v1_cbe0 = call i32 @function_12714(i32 1)
  %v1_cbe8 = call i32 @function_12714(i32 2)
  %v1_cbec = call i32 @function_8588(i32 %v1_cbe8)
  %v1_cbf0 = call i32 @function_c3b8(i32 %v1_cbec)
  %v1_cbf4 = call i32 @function_c8bc(i32 %v1_cbf0)
  %v1_cbf8 = call i32 @function_d590(i32 %v1_cbf4)
  %v2_cbfc = ptrtoint i32* %stack_var_-400 to i32
  store i32 %v2_cbfc, i32* @r7, align 4
  %v2_cc00 = ptrtoint i32* %stack_var_-528 to i32
  store i32 %v2_cc00, i32* @r6, align 4
  %v2_ccf0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_cd34 = ptrtoint i32* %stack_var_-288 to i32
  %v2_cf38 = ptrtoint i8** %stack_var_-42 to i32
  %v2_d104 = ptrtoint i32* %stack_var_-1552 to i32
  %v2_cf5c = ptrtoint i32* %stack_var_-52 to i32
  %v2_cf60 = ptrtoint i32* %stack_var_-56 to i32
  %v1_d00c = bitcast i32* %stack_var_-144 to i8*
  %v2_cfcc = ptrtoint i32* %stack_var_-80 to i32
  %v1_cfe8 = sub i32 0, %v1_cbcc
  br label %dec_label_pc_cc04

dec_label_pc_cc04:                                ; preds = %dec_label_pc_d130, %dec_label_pc_d088, %dec_label_pc_d078, %dec_label_pc_d068, %dec_label_pc_d008, %dec_label_pc_ce34, %dec_label_pc_ce20, %bb40, %dec_label_pc_d180, %dec_label_pc_d0d4, %dec_label_pc_d098, %dec_label_pc_d054, %dec_label_pc_cf84, %dec_label_pc_cea4, %dec_label_pc_cdd0, %dec_label_pc_cbcc
  store i32 0, i32* %stack_var_-400, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cc10, %dec_label_pc_cc04
  %v1_cc14 = phi i32 [ %v1_cc18, %dec_label_pc_cc10 ], [ 4, %dec_label_pc_cc04 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_cc14 = load i32, i32* @r7, align 4
  %v3_cc14 = add i32 %v2_cc14, %v1_cc14
  %v4_cc14 = inttoptr i32 %v3_cc14 to i32*
  store i32 0, i32* %v4_cc14, align 4
  %v0_cc18 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc18 = add i32 %v0_cc18, 4
  store i32 %v1_cc18, i32* %r3.global-to-local, align 4
  %v7_cc1c = icmp eq i32 %v1_cc18, 128
  br i1 %v7_cc1c, label %dec_label_pc_cc24, label %dec_label_pc_cc10

dec_label_pc_cc24:                                ; preds = %dec_label_pc_cc10
  %v0_cc24 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_cc24, i32* %stack_var_-528, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cc2c

dec_label_pc_cc2c:                                ; preds = %dec_label_pc_cc2c, %dec_label_pc_cc24
  %v1_cc30 = phi i32 [ %v1_cc34, %dec_label_pc_cc2c ], [ 4, %dec_label_pc_cc24 ]
  store i32 0, i32* @r4, align 4
  %v2_cc30 = load i32, i32* @r6, align 4
  %v3_cc30 = add i32 %v2_cc30, %v1_cc30
  %v4_cc30 = inttoptr i32 %v3_cc30 to i32*
  store i32 0, i32* %v4_cc30, align 4
  %v0_cc34 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc34 = add i32 %v0_cc34, 4
  store i32 %v1_cc34, i32* %r3.global-to-local, align 4
  %v7_cc38 = icmp eq i32 %v1_cc34, 128
  br i1 %v7_cc38, label %dec_label_pc_cc40, label %dec_label_pc_cc2c

dec_label_pc_cc40:                                ; preds = %dec_label_pc_cc2c
  %v2_cc44 = load i32, i32* @global_var_1f038.74, align 4
  %v7_cc48 = icmp eq i32 %v2_cc44, -1
  br i1 %v7_cc48, label %dec_label_pc_cc78, label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc40
  %v3_cc50 = udiv i32 %v2_cc44, 32
  store i32 %v2_caac, i32* %r2.global-to-local, align 4
  %v3_cc5c = mul nuw nsw i32 %v3_cc50, 4
  %v2_cc60 = add i32 %v3_cc5c, %v2_caac
  store i32 %v2_cc60, i32* %r3.global-to-local, align 4
  %v1_cc64 = add i32 %v2_cc60, -360
  %v2_cc64 = inttoptr i32 %v1_cc64 to i32*
  %v3_cc64 = load i32, i32* %v2_cc64, align 4
  %v1_cc68 = urem i32 %v2_cc44, 32
  %v7_cc70 = shl i32 1, %v1_cc68
  %v8_cc70 = or i32 %v3_cc64, %v7_cc70
  store i32 %v8_cc70, i32* %r2.global-to-local, align 4
  store i32 %v8_cc70, i32* %v2_cc64, align 4
  br label %dec_label_pc_cc78

dec_label_pc_cc78:                                ; preds = %dec_label_pc_cc40, %dec_label_pc_cc50
  store i32 ptrtoint (i32* @global_var_1f03c.90 to i32), i32* %ip.global-to-local, align 4
  %v2_cc7c = load i32, i32* @global_var_1f03c.90, align 4
  store i32 %v2_cc7c, i32* %r3.global-to-local, align 4
  %v7_cc80 = icmp eq i32 %v2_cc7c, -1
  store i32 ptrtoint (i32* @global_var_1f03c.90 to i32), i32* @r8, align 4
  br i1 %v7_cc80, label %dec_label_pc_cebc, label %dec_label_pc_cc8c

dec_label_pc_cc8c:                                ; preds = %dec_label_pc_cebc, %dec_label_pc_cc78, %bb42
  %v2_cc90 = load i8, i8* bitcast (i8** @global_var_1f088.92 to i8*), align 4
  %v3_cc90 = zext i8 %v2_cc90 to i32
  store i32 %v3_cc90, i32* %r3.global-to-local, align 4
  %v2_cc94 = icmp eq i8 %v2_cc90, 0
  br i1 %v2_cc94, label %dec_label_pc_cdec, label %dec_label_pc_cc9c

dec_label_pc_cc9c:                                ; preds = %dec_label_pc_cc8c
  %v2_cca0 = load i32, i32* @global_var_1f03c.90, align 4
  store i32 %v2_cca0, i32* %ip.global-to-local, align 4
  %v3_cca8 = udiv i32 %v2_cca0, 32
  store i32 %v2_caac, i32* %r2.global-to-local, align 4
  %v3_ccb0 = mul nuw nsw i32 %v3_cca8, 4
  %v2_ccb4 = add i32 %v3_ccb0, %v2_caac
  store i32 %v2_ccb4, i32* %r3.global-to-local, align 4
  %v1_ccb8 = add i32 %v2_ccb4, -488
  %v2_ccb8 = inttoptr i32 %v1_ccb8 to i32*
  %v3_ccb8 = load i32, i32* %v2_ccb8, align 4
  %v1_ccbc = urem i32 %v2_cca0, 32
  %v7_ccc4 = shl i32 1, %v1_ccbc
  %v8_ccc4 = or i32 %v3_ccb8, %v7_ccc4
  store i32 %v8_ccc4, i32* %r2.global-to-local, align 4
  store i32 %v8_ccc4, i32* %v2_ccb8, align 4
  br label %dec_label_pc_cccc

dec_label_pc_cccc:                                ; preds = %dec_label_pc_cdec, %dec_label_pc_cc9c
  %v2_ccd0 = load i32, i32* @global_var_1f038.74, align 4
  store i32 0, i32* @lr, align 4
  %v0_ccd8 = load i32, i32* %ip.global-to-local, align 4
  %v5_ccdc = icmp slt i32 %v0_ccd8, %v2_ccd0
  br i1 %v5_ccdc, label %bb40, label %bb

bb:                                               ; preds = %dec_label_pc_cccc
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_cccc, %bb
  %v0_ccec = phi i32 [ %v2_ccd0, %dec_label_pc_cccc ], [ %v0_ccd8, %bb ]
  store i32 10, i32* %stack_var_-64, align 4
  %v1_ccec = add i32 %v0_ccec, 1
  store i32 %v2_ccf0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_cc00, i32* %r2.global-to-local, align 4
  %v5_cd08 = call i32 @function_1196c(i32 %v1_ccec, i32 %v2_cbfc, i32 %v2_cc00, i32 0, i32 %v2_ccf0)
  %v8_cd0c = icmp eq i32 %v5_cd08, -1
  br i1 %v8_cd0c, label %dec_label_pc_cc04, label %dec_label_pc_cd14

dec_label_pc_cd14:                                ; preds = %bb40
  %v6_cd08 = trunc i32 %v5_cd08 to i16
  %v3_cd14 = icmp eq i16 %v6_cd08, 0
  br i1 %v3_cd14, label %dec_label_pc_cd1c, label %dec_label_pc_cd48

dec_label_pc_cd1c:                                ; preds = %dec_label_pc_cd14
  %v2_cd20 = load i32, i32* @sl, align 4
  %v5_cd24 = srem i32 %v2_cd20, 6
  %v4_cd2c = sub i32 %v2_cd20, %v5_cd24
  store i32 %v4_cd2c, i32* %r3.global-to-local, align 4
  store i32 %v5_cd24, i32* %r2.global-to-local, align 4
  %v2_cd38 = icmp eq i32 %v5_cd24, 0
  %v7_cd3c = inttoptr i32 %v5_cd08 to i8*
  store i8* %v7_cd3c, i8** %stack_var_-42, align 4
  %v1_cd40 = add i32 %v2_cd20, 1
  store i32 %v1_cd40, i32* @sl, align 4
  br i1 %v2_cd38, label %dec_label_pc_cf2c, label %dec_label_pc_cd48

dec_label_pc_cd48:                                ; preds = %dec_label_pc_cd14, %dec_label_pc_cd1c, %dec_label_pc_cf2c
  store i32 ptrtoint (i32* @global_var_1f038.74 to i32), i32* %r3.global-to-local, align 4
  %v2_cd4c = load i32, i32* @global_var_1f038.74, align 4
  %v7_cd50 = icmp eq i32 %v2_cd4c, -1
  br i1 %v7_cd50, label %dec_label_pc_cd80, label %dec_label_pc_cd58

dec_label_pc_cd58:                                ; preds = %dec_label_pc_cd48
  %v3_cd58 = udiv i32 %v2_cd4c, 32
  %v3_cd60 = mul nuw nsw i32 %v3_cd58, 4
  store i32 %v2_caac, i32* %ip.global-to-local, align 4
  %v2_cd68 = add i32 %v3_cd60, %v2_caac
  store i32 %v2_cd68, i32* %r3.global-to-local, align 4
  %v1_cd6c = add i32 %v2_cd68, -360
  %v2_cd6c = inttoptr i32 %v1_cd6c to i32*
  %v3_cd6c = load i32, i32* %v2_cd6c, align 4
  %v1_cd70 = urem i32 %v2_cd4c, 32
  %v6_cd74 = lshr i32 %v3_cd6c, %v1_cd70
  store i32 %v6_cd74, i32* %r2.global-to-local, align 4
  %v1_cd78 = urem i32 %v6_cd74, 2
  %v2_cd78 = icmp eq i32 %v1_cd78, 0
  br i1 %v2_cd78, label %dec_label_pc_cd80, label %dec_label_pc_cfc0

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd58, %dec_label_pc_cd48
  %v2_cd84 = load i8, i8* bitcast (i8** @global_var_1f088.92 to i8*), align 4
  %v3_cd84 = zext i8 %v2_cd84 to i32
  store i32 %v3_cd84, i32* @r4, align 4
  %v2_cd88 = icmp eq i8 %v2_cd84, 0
  store i32 ptrtoint (i32* @global_var_1f03c.90 to i32), i32* %r2.global-to-local, align 4
  %v2_ce24 = load i32, i32* @global_var_1f03c.90, align 4
  br i1 %v2_cd88, label %dec_label_pc_ce20, label %dec_label_pc_cd90

dec_label_pc_cd90:                                ; preds = %dec_label_pc_cd80
  %v3_cd9c = udiv i32 %v2_ce24, 32
  store i32 %v2_caac, i32* %ip.global-to-local, align 4
  %v3_cda4 = mul nuw nsw i32 %v3_cd9c, 4
  %v2_cda8 = add i32 %v3_cda4, %v2_caac
  store i32 %v2_cda8, i32* %r3.global-to-local, align 4
  %v1_cdac = add i32 %v2_cda8, -488
  %v2_cdac = inttoptr i32 %v1_cdac to i32*
  %v3_cdac = load i32, i32* %v2_cdac, align 4
  %v1_cdb0 = urem i32 %v2_ce24, 32
  %v6_cdb4 = lshr i32 %v3_cdac, %v1_cdb0
  store i32 %v6_cdb4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f088.92 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_cdc0 = urem i32 %v6_cdb4, 2
  %v2_cdc0 = icmp eq i32 %v1_cdc0, 0
  store i8 0, i8* bitcast (i8** @global_var_1f088.92 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1f03c.90 to i32), i32* @r5, align 4
  br i1 %v2_cdc0, label %dec_label_pc_cdd0, label %dec_label_pc_cf4c

dec_label_pc_cdd0:                                ; preds = %dec_label_pc_cd90
  store i32 52696, i32* @lr, align 4
  %v1_cdd4 = icmp ne i32 %v2_ce24, -1
  call void @__pseudo_cond_branch(i1 %v1_cdd4, i32 ptrtoint (i32* @global_var_12714.94 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_cddc = load i32, i32* @r5, align 4
  %v2_cddc = inttoptr i32 %v1_cddc to i32*
  store i32 -1, i32* %v2_cddc, align 4
  %v1_cde4 = call i32 @function_12800(i32 1)
  br label %dec_label_pc_cc04

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cc8c
  %v2_cdf0 = load i32, i32* @global_var_1f03c.90, align 4
  store i32 %v2_cdf0, i32* %ip.global-to-local, align 4
  %v3_cdf8 = udiv i32 %v2_cdf0, 32
  %v3_cdfc = mul nuw nsw i32 %v3_cdf8, 4
  %v2_ce04 = add i32 %v3_cdfc, %v2_caac
  store i32 %v2_ce04, i32* %r3.global-to-local, align 4
  %v1_ce08 = add i32 %v2_ce04, -360
  %v2_ce08 = inttoptr i32 %v1_ce08 to i32*
  %v3_ce08 = load i32, i32* %v2_ce08, align 4
  %v1_ce0c = urem i32 %v2_cdf0, 32
  %v7_ce14 = shl i32 1, %v1_ce0c
  %v8_ce14 = or i32 %v3_ce08, %v7_ce14
  store i32 %v8_ce14, i32* %r2.global-to-local, align 4
  store i32 %v8_ce14, i32* %v2_ce08, align 4
  br label %dec_label_pc_cccc

dec_label_pc_ce20:                                ; preds = %dec_label_pc_cd80
  %v7_ce28 = icmp eq i32 %v2_ce24, -1
  store i32 ptrtoint (i32* @global_var_1f03c.90 to i32), i32* @r5, align 4
  br i1 %v7_ce28, label %dec_label_pc_cc04, label %dec_label_pc_ce34

dec_label_pc_ce34:                                ; preds = %dec_label_pc_ce20
  %v3_ce34 = udiv i32 %v2_ce24, 32
  %v3_ce3c = mul nuw nsw i32 %v3_ce34, 4
  store i32 %v2_caac, i32* %ip.global-to-local, align 4
  %v2_ce44 = add i32 %v3_ce3c, %v2_caac
  store i32 %v2_ce44, i32* %r3.global-to-local, align 4
  %v1_ce48 = add i32 %v2_ce44, -360
  %v2_ce48 = inttoptr i32 %v1_ce48 to i32*
  %v3_ce48 = load i32, i32* %v2_ce48, align 4
  %v1_ce4c = urem i32 %v2_ce24, 32
  %v6_ce50 = lshr i32 %v3_ce48, %v1_ce4c
  store i32 %v6_ce50, i32* %r2.global-to-local, align 4
  %v1_ce54 = urem i32 %v6_ce50, 2
  %v2_ce54 = icmp eq i32 %v1_ce54, 0
  br i1 %v2_ce54, label %dec_label_pc_cc04, label %dec_label_pc_ce5c

dec_label_pc_ce5c:                                ; preds = %dec_label_pc_ce34
  %v6_ce60 = inttoptr i32 %v3_cd84 to i8*
  store i8* %v6_ce60, i8** %stack_var_-42, align 4
  store i32 %v2_cf38, i32* @r8, align 4
  %v0_ce64 = call i32 @function_fb60()
  %v0_ce68 = load i32, i32* @r4, align 4
  %v2_ce68 = inttoptr i32 %v0_ce64 to i32*
  store i32 %v0_ce68, i32* %v2_ce68, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_ce74 = load i32, i32* @global_var_1f03c.90, align 4
  store i32 %v2_ce74, i32* @r0, align 4
  store i32 %v2_cf38, i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  %v4_ce80 = call i32 @function_1169c(i32 %v2_ce74, i32 %v2_cf38, i32 2, i32 16386)
  %v7_ce84 = icmp eq i32 %v4_ce80, -1
  br i1 %v7_ce84, label %dec_label_pc_d068, label %dec_label_pc_ce8c

dec_label_pc_ce8c:                                ; preds = %dec_label_pc_ce5c
  %v2_ce8c = icmp eq i32 %v4_ce80, 0
  br i1 %v2_ce8c, label %dec_label_pc_d098, label %dec_label_pc_ce94

dec_label_pc_ce94:                                ; preds = %dec_label_pc_ce8c
  %v3_ce98 = load i8*, i8** %stack_var_-42, align 4
  %v3_ce9c = icmp eq i8* %v3_ce98, null
  br i1 %v3_ce9c, label %dec_label_pc_cea4, label %dec_label_pc_d0c0

dec_label_pc_cea4:                                ; preds = %dec_label_pc_ce94
  %v2_cea4 = load i32, i32* @global_var_1f03c.90, align 4
  store i32 %v2_cea4, i32* @r0, align 4
  store i32 %v2_cf38, i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ceb4 = call i32 @function_1169c(i32 %v2_cea4, i32 %v2_cf38, i32 2, i32 16384)
  br label %dec_label_pc_cc04

dec_label_pc_cebc:                                ; preds = %dec_label_pc_cc78
  %v0_cec4 = load i32, i32* @r4, align 4
  store i32 %v0_cec4, i32* %r2.global-to-local, align 4
  %v3_cec8 = call i32 @function_117e8(i32 2, i32 1, i32 %v0_cec4)
  %v7_cecc = icmp eq i32 %v3_cec8, -1
  store i32 %v3_cec8, i32* @r5, align 4
  %v1_ced4 = load i32, i32* @r8, align 4
  %v2_ced4 = inttoptr i32 %v1_ced4 to i32*
  store i32 %v3_cec8, i32* %v2_ced4, align 4
  br i1 %v7_cecc, label %dec_label_pc_cc8c, label %dec_label_pc_cedc

dec_label_pc_cedc:                                ; preds = %dec_label_pc_cebc
  %v0_cedc = load i32, i32* @r4, align 4
  store i32 %v0_cedc, i32* %r2.global-to-local, align 4
  %v3_cee4 = call i32 @function_fbfc(i32 %v3_cec8, i32 3, i32 %v0_cedc)
  %v1_ceec = or i32 %v3_cee4, 2048
  store i32 %v1_ceec, i32* %r2.global-to-local, align 4
  %v0_cef0 = load i32, i32* @r5, align 4
  %v3_cef4 = call i32 @function_fbfc(i32 %v0_cef0, i32 4, i32 %v1_ceec)
  store i32 ptrtoint (i32* @global_var_1f040.67 to i32), i32* @lr, align 4
  %v2_cefc = load i32, i32* @global_var_1f040.67, align 4
  store i32 %v2_cefc, i32* %r3.global-to-local, align 4
  %v2_cf00 = icmp eq i32 %v2_cefc, 0
  br i1 %v2_cf00, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_cedc
  store i32 53004, i32* @lr, align 4
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_cedc, %bb41
  %v2_cf08 = xor i1 %v2_cf00, true
  call void @__pseudo_cond_branch(i1 %v2_cf08, i32 ptrtoint (i32* @global_var_f4cc.95 to i32))
  store i32 ptrtoint (i8** @global_var_1f088.92 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_cf14 = load i32, i32* @global_var_1f03c.90, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1f088.92 to i8*), align 4
  %v4_cf24 = call i32 @function_1142c(i32 %v2_cf14, i32 ptrtoint (i16** @global_var_1f64c.70 to i32), i32 16)
  br label %dec_label_pc_cc8c

dec_label_pc_cf2c:                                ; preds = %dec_label_pc_cd1c
  %v2_cf34 = load i32, i32* @global_var_1f03c.90, align 4
  store i32 %v2_cf34, i32* @r0, align 4
  store i32 %v2_cf38, i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_cf44 = call i32 @function_11708(i32 %v2_cf34, i32 %v2_cf38, i32 2, i32 16384)
  br label %dec_label_pc_cd48

dec_label_pc_cf4c:                                ; preds = %dec_label_pc_cd90
  store i32 4, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_cf5c, i32* %r3.global-to-local, align 4
  store i32 %v2_cf60, i32* %ip.global-to-local, align 4
  store i32 4, i32* @r2, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_cf74 = call i32 @function_11498(i32 %v2_ce24, i32 1, i32 4, i32 %v2_cf5c, i32 %v2_cf60)
  %v3_cf78 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_cf78, i32* %r3.global-to-local, align 4
  %v2_cf7c = icmp eq i32 %v3_cf78, 0
  br i1 %v2_cf7c, label %dec_label_pc_d008, label %dec_label_pc_cf84

dec_label_pc_cf84:                                ; preds = %dec_label_pc_cf4c
  %v2_cf84 = load i32, i32* @global_var_1f03c.90, align 4
  %v1_cf88 = call i32 @function_12714(i32 %v2_cf84)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_cf90 = load i32, i32* @r5, align 4
  %v2_cf90 = inttoptr i32 %v1_cf90 to i32*
  store i32 -1, i32* %v2_cf90, align 4
  %v0_cf94 = call i32 @function_d1c4()
  %v3_cf9c = zext i32 %v0_cf94 to i64
  %v4_cf9c = mul nuw i64 %v3_cf9c, 3435973837
  %v7_cf9c = trunc i64 %v4_cf9c to i32
  store i32 %v7_cf9c, i32* @lr, align 4
  %v3_cfa01 = udiv i64 %v4_cf9c, 34359738368
  %v3_cfa43 = mul nuw nsw i64 %v3_cfa01, 8
  %v3_cfa4 = trunc i64 %v3_cfa43 to i32
  store i32 %v3_cfa4, i32* %r2.global-to-local, align 4
  %v2_cfa85 = mul nuw nsw i64 %v3_cfa01, 2
  %v2_cfa8 = trunc i64 %v2_cfa85 to i32
  %v2_cfac = add i32 %v3_cfa4, %v2_cfa8
  store i32 %v2_cfac, i32* %r3.global-to-local, align 4
  %v2_cfb0 = sub i32 %v0_cf94, %v2_cfac
  %v1_cfb4 = add i32 %v2_cfb0, 1
  %v1_cfb8 = call i32 @function_12800(i32 %v1_cfb4)
  br label %dec_label_pc_cc04

dec_label_pc_cfc0:                                ; preds = %dec_label_pc_cd58
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_cf5c, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_cfd4 = call i32 @function_113c0(i32 %v2_cd4c, i32 %v2_cfcc, i32 %v2_cf5c, i32 16, i32 16)
  %v1_cfd8 = call i32 @function_d340(i32 %v5_cfd4)
  %v1_cfdc = call i32 @function_be18(i32 %v1_cfd8)
  store i32 %v1_cfe8, i32* @r0, align 4
  %v2_cfec = call i32 @function_11a6c(i32 %v1_cfe8, i32 9)
  store i32 ptrtoint (i32* @global_var_1f084.79 to i32), i32* %r3.global-to-local, align 4
  %v2_cff4 = load i32, i32* @global_var_1f084.79, align 4
  store i32 %v2_cff4, i32* @r0, align 4
  %v2_cff8 = icmp eq i32 %v2_cff4, 0
  br i1 %v2_cff8, label %dec_label_pc_d000, label %dec_label_pc_d0e8

dec_label_pc_d000:                                ; preds = %dec_label_pc_cfc0, %dec_label_pc_d0e8
  %v1_d004 = call i32 @function_fb78(i32 0)
  br label %dec_label_pc_d008

dec_label_pc_d008:                                ; preds = %dec_label_pc_cf4c, %dec_label_pc_d000
  %v2_d00c = call i32 @function_f210(i8* %v1_d00c)
  %sext = mul i32 %v2_d00c, 16777216
  %v1_d010 = sdiv i32 %sext, 16777216
  %v7_d010 = inttoptr i32 %v1_d010 to i8*
  store i8* %v7_d010, i8** %stack_var_-42, align 4
  %v0_d014 = call i32 @function_f4cc()
  %v0_d018 = load i32, i32* @r4, align 4
  store i32 %v0_d018, i32* @r2, align 4
  %v1_d01c = load i32, i32* @fp, align 4
  %v2_d01c = inttoptr i32 %v1_d01c to i32*
  store i32 %v0_d014, i32* %v2_d01c, align 4
  store i32 ptrtoint (i32* @global_var_16468.99 to i32), i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d028 = load i32, i32* @r5, align 4
  %v1_d028 = inttoptr i32 %v0_d028 to i32*
  %v2_d028 = load i32, i32* %v1_d028, align 4
  store i32 %v2_d028, i32* @r0, align 4
  %v4_d02c = call i32 @function_11708(i32 %v2_d028, i32 ptrtoint (i32* @global_var_16468.99 to i32), i32 %v0_d018, i32 16384)
  store i32 1, i32* @r2, align 4
  %v0_d038 = load i32, i32* @r5, align 4
  %v1_d038 = inttoptr i32 %v0_d038 to i32*
  %v2_d038 = load i32, i32* %v1_d038, align 4
  store i32 %v2_d038, i32* @r0, align 4
  store i32 %v2_cf38, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_d044 = call i32 @function_11708(i32 %v2_d038, i32 %v2_cf38, i32 1, i32 16384)
  %v3_d048 = load i8*, i8** %stack_var_-42, align 4
  %v4_d048 = ptrtoint i8* %v3_d048 to i32
  store i32 %v4_d048, i32* @r2, align 4
  %v3_d04c = icmp eq i8* %v3_d048, null
  br i1 %v3_d04c, label %dec_label_pc_cc04, label %dec_label_pc_d054

dec_label_pc_d054:                                ; preds = %dec_label_pc_d008
  %v0_d054 = load i32, i32* @r5, align 4
  %v1_d054 = inttoptr i32 %v0_d054 to i32*
  %v2_d054 = load i32, i32* %v1_d054, align 4
  store i32 %v2_d054, i32* @r0, align 4
  store i32 %v2_ca44, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d060 = call i32 @function_11708(i32 %v2_d054, i32 %v2_ca44, i32 %v4_d048, i32 16384)
  br label %dec_label_pc_cc04

dec_label_pc_d068:                                ; preds = %dec_label_pc_d0f4, %dec_label_pc_ce5c
  %v0_d068 = call i32 @function_fb60()
  %v1_d06c = inttoptr i32 %v0_d068 to i32*
  %v2_d06c = load i32, i32* %v1_d06c, align 4
  store i32 %v2_d06c, i32* %r3.global-to-local, align 4
  %v7_d070 = icmp eq i32 %v2_d06c, 11
  br i1 %v7_d070, label %dec_label_pc_cc04, label %dec_label_pc_d078

dec_label_pc_d078:                                ; preds = %dec_label_pc_d068
  %v0_d078 = call i32 @function_fb60()
  %v1_d07c = inttoptr i32 %v0_d078 to i32*
  %v2_d07c = load i32, i32* %v1_d07c, align 4
  store i32 %v2_d07c, i32* %r3.global-to-local, align 4
  %v7_d080 = icmp eq i32 %v2_d07c, 11
  br i1 %v7_d080, label %dec_label_pc_cc04, label %dec_label_pc_d088

dec_label_pc_d088:                                ; preds = %dec_label_pc_d078
  %v0_d088 = call i32 @function_fb60()
  %v1_d08c = inttoptr i32 %v0_d088 to i32*
  %v2_d08c = load i32, i32* %v1_d08c, align 4
  store i32 %v2_d08c, i32* %r3.global-to-local, align 4
  %v7_d090 = icmp eq i32 %v2_d08c, 4
  br i1 %v7_d090, label %dec_label_pc_cc04, label %dec_label_pc_d098

dec_label_pc_d098:                                ; preds = %dec_label_pc_d128, %dec_label_pc_d088, %dec_label_pc_ce8c
  %v2_d09c = load i32, i32* @global_var_1f03c.90, align 4
  store i32 53416, i32* @lr, align 4
  %v1_d0a4 = icmp ne i32 %v2_d09c, -1
  call void @__pseudo_cond_branch(i1 %v1_d0a4, i32 ptrtoint (i32* @global_var_12714.94 to i32))
  store i32 ptrtoint (i32* @global_var_1f03c.90 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1f03c.90, align 4
  %v1_d0b8 = call i32 @function_12800(i32 1)
  br label %dec_label_pc_cc04

dec_label_pc_d0c0:                                ; preds = %dec_label_pc_ce94
  %v4_ce98 = ptrtoint i8* %v3_ce98 to i32
  %v2_d0c0 = call i32 @function_11688(i32 %v4_ce98)
  %v3_d0c0 = trunc i32 %v2_d0c0 to i16
  store i32 %v2_cd34, i32* %r2.global-to-local, align 4
  %v7_d0cc = inttoptr i32 %v2_d0c0 to i8*
  store i8* %v7_d0cc, i8** %stack_var_-42, align 4
  %tmp43 = icmp ult i16 %v3_d0c0, 1025
  br i1 %tmp43, label %dec_label_pc_d0f4, label %dec_label_pc_d0d4

dec_label_pc_d0d4:                                ; preds = %dec_label_pc_d0c0
  %v2_d0d4 = load i32, i32* @global_var_1f03c.90, align 4
  %v1_d0d8 = call i32 @function_12714(i32 %v2_d0d4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d0e0 = load i32, i32* @r5, align 4
  %v2_d0e0 = inttoptr i32 %v1_d0e0 to i32*
  store i32 -1, i32* %v2_d0e0, align 4
  br label %dec_label_pc_cc04

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_cfc0
  %v2_d0ec = call i32 @function_11a6c(i32 %v2_cff4, i32 9)
  br label %dec_label_pc_d000

dec_label_pc_d0f4:                                ; preds = %dec_label_pc_d0c0
  %v0_d0f4 = call i32 @function_fb60()
  %v0_d0f8 = load i32, i32* @r4, align 4
  %v2_d0f8 = inttoptr i32 %v0_d0f4 to i32*
  store i32 %v0_d0f8, i32* %v2_d0f8, align 4
  store i32 %v2_cd34, i32* %ip.global-to-local, align 4
  store i32 %v2_d104, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_d110 = load i32, i32* @global_var_1f03c.90, align 4
  store i32 %v2_d110, i32* @r0, align 4
  store i32 %v2_d104, i32* @r1, align 4
  %v3_d118 = load i8*, i8** %stack_var_-42, align 4
  %v4_d118 = ptrtoint i8* %v3_d118 to i32
  store i32 %v4_d118, i32* @r2, align 4
  %v5_d11c = call i32 @function_1169c(i32 %v2_d110, i32 %v2_d104, i32 %v4_d118, i32 16386)
  %v7_d120 = icmp eq i32 %v5_d11c, -1
  br i1 %v7_d120, label %dec_label_pc_d068, label %dec_label_pc_d128

dec_label_pc_d128:                                ; preds = %dec_label_pc_d0f4
  %v2_d128 = icmp eq i32 %v5_d11c, 0
  br i1 %v2_d128, label %dec_label_pc_d098, label %dec_label_pc_d130

dec_label_pc_d130:                                ; preds = %dec_label_pc_d128
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_cf38, i32* @r1, align 4
  %v2_d13c = load i32, i32* @global_var_1f03c.90, align 4
  store i32 %v2_d13c, i32* @r0, align 4
  %v4_d140 = call i32 @function_1169c(i32 %v2_d13c, i32 %v2_cf38, i32 2, i32 16384)
  %v3_d148 = load i8*, i8** %stack_var_-42, align 4
  %v4_d148 = ptrtoint i8* %v3_d148 to i32
  %v2_d14c = call i32 @function_11688(i32 %v4_d148)
  store i32 %v2_cd34, i32* @lr, align 4
  %sext7 = mul i32 %v2_d14c, 65536
  %v1_d154 = sdiv i32 %sext7, 65536
  store i32 %v1_d154, i32* %ip.global-to-local, align 4
  store i32 %v1_d154, i32* @r2, align 4
  store i32 %v2_d104, i32* @r1, align 4
  %v2_d160 = load i32, i32* @global_var_1f03c.90, align 4
  store i32 %v2_d160, i32* @r0, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_d168 = inttoptr i32 %v1_d154 to i8*
  store i8* %v6_d168, i8** %stack_var_-42, align 4
  %v6_d16c = call i32 @function_1169c(i32 %v2_d160, i32 %v2_d104, i32 %v1_d154, i32 16384)
  store i32 %v2_cd34, i32* %r2.global-to-local, align 4
  %v3_d174 = load i8*, i8** %stack_var_-42, align 4
  %v3_d178 = icmp eq i8* %v3_d174, null
  br i1 %v3_d178, label %dec_label_pc_cc04, label %dec_label_pc_d180

dec_label_pc_d180:                                ; preds = %dec_label_pc_d130
  %v4_d174 = ptrtoint i8* %v3_d174 to i32
  %v5_d184 = call i32 @function_8304(i32* nonnull %stack_var_-1552, i32 %v4_d174, i32 %v2_cd34)
  br label %dec_label_pc_cc04

; uselistorder directives
  uselistorder i8* %v3_d174, { 1, 0 }
  uselistorder i32 %v1_d154, { 0, 3, 1, 2 }
  uselistorder i32 %v5_d11c, { 1, 0 }
  uselistorder i32 %v3_cec8, { 3, 2, 1, 0 }
  uselistorder i8* %v3_ce98, { 1, 0 }
  uselistorder i32 %v4_ce80, { 1, 0 }
  uselistorder i32 %v2_cdf0, { 1, 0, 2 }
  uselistorder i32 %v2_ce24, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_cd4c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_cd24, { 1, 0, 2 }
  uselistorder i32 %v2_cd20, { 2, 0, 1 }
  uselistorder i32 %v5_cd08, { 1, 2, 0 }
  uselistorder i32 %v2_cca0, { 1, 0, 2 }
  uselistorder i32 %v2_cc44, { 2, 1, 0 }
  uselistorder i32 %v1_cc34, { 1, 2, 0 }
  uselistorder i32 %v1_cc18, { 1, 2, 0 }
  uselistorder i32 %v2_cf5c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d104, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_cf38, { 7, 8, 1, 0, 9, 10, 5, 6, 3, 4, 2 }
  uselistorder i32 %v2_cd34, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v2_cc00, { 1, 0, 2 }
  uselistorder i32 %v2_caac, { 0, 12, 1, 2, 11, 3, 10, 4, 9, 5, 8, 6, 13, 7, 14 }
  uselistorder i32 %v2_ca94, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_ca44, { 1, 0, 2, 3, 4 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* @global_var_1f084.79, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_12800, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f088.92 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f088.92 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* @global_var_1f03c.90, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_1f03c.90 to i32), { 2, 0, 4, 3, 1, 5 }
  uselistorder i32* @global_var_1f038.74, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32 (i32)* @function_c8bc, { 1, 0 }
  uselistorder i32 (i32)* @function_c3b8, { 1, 0 }
  uselistorder i32 (i32)* @function_8588, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12834, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d288, { 10, 9, 1, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32)* @function_c73c, { 1, 0 }
  uselistorder i32* @global_var_1f040.67, { 2, 0, 3, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_c6f4.65 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_1f64c.70 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_11b4c, { 1, 0 }
  uselistorder label %dec_label_pc_d008, { 1, 0 }
  uselistorder label %dec_label_pc_d000, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_cd48, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_cc8c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cc78, { 1, 0 }
  uselistorder label %dec_label_pc_cc04, { 8, 0, 9, 10, 1, 2, 3, 11, 4, 12, 13, 5, 6, 14, 7, 15 }
  uselistorder label %dec_label_pc_ca68, { 2, 0, 1 }
}

define i32 @function_d1b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1b4:
  call void @__pseudo_cond_branch(i1 false, i32 -22315928)
  %v0_d1bc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d1bc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d1b4
  %v2_d1bc = load i32, i32* @r4, align 4
  %v4_d1bc = mul i32 %v2_d1bc, 2
  %v5_d1bc = and i32 %v4_d1bc, %arg1
  call void @__pseudo_branch(i32 %v5_d1bc)
  %v0_d1c0.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d1c0.pr, label %bb1, label %.thread

bb1:                                              ; preds = %bb
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d1b4, %bb, %bb1
  %v9_d1c0 = load i32, i32* @r0, align 4
  ret i32 %v9_d1c0

; uselistorder directives
  uselistorder label %.thread, { 2, 1, 0 }
}

define i32 @function_d1c4() local_unnamed_addr {
dec_label_pc_d1c4:
  %v2_d1d0 = load i32, i32* @global_var_1f08c.101, align 4
  %v2_d1d4 = load i32, i32* @global_var_1f098.103, align 4
  %v4_d1e0 = mul i32 %v2_d1d0, 2048
  %v5_d1e0 = xor i32 %v4_d1e0, %v2_d1d0
  store i32 %v5_d1e0, i32* @r3, align 4
  %v4_d1e4 = udiv i32 %v2_d1d4, 524288
  %v5_d1e4 = xor i32 %v4_d1e4, %v2_d1d4
  %v2_d1e8 = load i32, i32* @global_var_1f090.105, align 4
  %v2_d1ec = load i32, i32* @global_var_1f094.107, align 4
  store i32 %v2_d1ec, i32* @ip, align 4
  %v2_d1f0 = xor i32 %v5_d1e4, %v5_d1e0
  %v4_d1f4 = udiv i32 %v5_d1e0, 256
  %v5_d1f4 = xor i32 %v2_d1f0, %v4_d1f4
  store i32 %v2_d1e8, i32* @global_var_1f08c.101, align 4
  store i32 %v2_d1ec, i32* @global_var_1f090.105, align 4
  store i32 %v2_d1d4, i32* @global_var_1f094.107, align 4
  store i32 %v5_d1f4, i32* @global_var_1f098.103, align 4
  ret i32 %v5_d1f4

; uselistorder directives
  uselistorder i32 %v2_d1d4, { 2, 1, 0 }
  uselistorder i32 %v2_d1d0, { 1, 0 }
}

define i32 @function_d220(i32 %arg1) local_unnamed_addr {
dec_label_pc_d220:
  %v3_d220 = load i32, i32* @r4, align 4
  %v6_d220 = load i32, i32* @r5, align 4
  %v2_d22c = call i32 @function_126dc(i32* null)
  store i32 %v2_d22c, i32* @r0, align 4
  store i32 %v2_d22c, i32* @global_var_1f08c.101, align 4
  %v1_d238 = call i32 @function_12768(i32 %v2_d22c)
  store i32 %v1_d238, i32* @r0, align 4
  store i32 %v1_d238, i32* @r4, align 4
  %v0_d240 = call i32 @function_1277c()
  store i32 ptrtoint (i32* @global_var_1f090.105 to i32), i32* @r5, align 4
  %v1_d248 = load i32, i32* @r4, align 4
  %v2_d248 = xor i32 %v1_d248, %v0_d240
  store i32 %v2_d248, i32* @global_var_1f090.105, align 4
  %v1_d250 = call i32 @function_12560(i32 %v2_d248)
  %v2_d254 = load i32, i32* @global_var_1f090.105, align 4
  %v2_d260 = xor i32 %v2_d254, %v1_d250
  store i32 %v2_d260, i32* @global_var_1f098.103, align 4
  store i32 %v1_d250, i32* @global_var_1f094.107, align 4
  store i32 %v3_d220, i32* @r4, align 4
  store i32 %v6_d220, i32* @r5, align 4
  ret i32 %v1_d250

; uselistorder directives
  uselistorder i32 %v1_d250, { 1, 2, 0 }
}

define i32 @function_d288(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d288:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-63 = alloca i32, align 4
  %v3_d288 = load i32, i32* @r4, align 4
  %v6_d288 = load i32, i32* @r5, align 4
  %v12_d288 = load i32, i32* @r7, align 4
  %v18_d288 = load i32, i32* @sb, align 4
  %v24_d288 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @fp, align 4
  %v2_d28c = icmp eq i32 %arg2, 0
  %v0_d294 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d294, i32* @sb, align 4
  br i1 %v2_d28c, label %dec_label_pc_d320, label %dec_label_pc_d29c

dec_label_pc_d29c:                                ; preds = %dec_label_pc_d288
  %v2_d29c = ptrtoint i32* %stack_var_-63 to i32
  store i32 %v2_d29c, i32* %r0.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v4_d2a8 = bitcast i32* %stack_var_-63 to i16*
  %v5_d2a8 = call i32 @function_11cfc(i16* %v4_d2a8, i32 ptrtoint ([23 x i8]* @global_var_16470.113 to i32), i32 23)
  store i32 %v5_d2a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f08c.101 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f090.105 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f094.107 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1f098.103 to i32), i32* %r6.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v1_d2f4 = bitcast i32* %stack_var_-63 to i8*
  %v2_d304 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_d2c0

dec_label_pc_d2c0:                                ; preds = %dec_label_pc_d2c0.dec_label_pc_d2c0_crit_edge, %dec_label_pc_d29c
  %v1_d2e4 = phi i32 [ %v1_d2e4.pre, %dec_label_pc_d2c0.dec_label_pc_d2c0_crit_edge ], [ ptrtoint (i32* @global_var_1f08c.101 to i32), %dec_label_pc_d29c ]
  %v2_d2c0 = load i32, i32* @global_var_1f098.103, align 4
  store i32 %v2_d2c0, i32* %r2.global-to-local, align 4
  %v2_d2c4 = load i32, i32* @global_var_1f08c.101, align 4
  %v4_d2c8 = udiv i32 %v2_d2c0, 524288
  %v5_d2c8 = xor i32 %v4_d2c8, %v2_d2c0
  %v4_d2cc = mul i32 %v2_d2c4, 2048
  %v5_d2cc = xor i32 %v4_d2cc, %v2_d2c4
  %v2_d2d0 = xor i32 %v5_d2c8, %v5_d2cc
  %v2_d2d4 = load i32, i32* @global_var_1f090.105, align 4
  %v2_d2d8 = load i32, i32* @global_var_1f094.107, align 4
  store i32 %v2_d2d8, i32* @ip, align 4
  %v4_d2dc = udiv i32 %v5_d2cc, 256
  %v5_d2dc = xor i32 %v2_d2d0, %v4_d2dc
  store i32 %v5_d2dc, i32* @r4, align 4
  store i32 %v2_d29c, i32* %r0.global-to-local, align 4
  %v2_d2e4 = inttoptr i32 %v1_d2e4 to i32*
  store i32 %v2_d2d4, i32* %v2_d2e4, align 4
  %v0_d2e8 = load i32, i32* @ip, align 4
  %v1_d2e8 = load i32, i32* %r8.global-to-local, align 4
  %v2_d2e8 = inttoptr i32 %v1_d2e8 to i32*
  store i32 %v0_d2e8, i32* %v2_d2e8, align 4
  %v0_d2ec = load i32, i32* %r2.global-to-local, align 4
  %v1_d2ec = load i32, i32* @r7, align 4
  %v2_d2ec = inttoptr i32 %v1_d2ec to i32*
  store i32 %v0_d2ec, i32* %v2_d2ec, align 4
  %v0_d2f0 = load i32, i32* @r4, align 4
  %v1_d2f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_d2f0 = inttoptr i32 %v1_d2f0 to i32*
  store i32 %v0_d2f0, i32* %v2_d2f0, align 4
  %v2_d2f4 = call i32 @function_f210(i8* %v1_d2f4)
  %v0_d2fc = load i32, i32* @r4, align 4
  store i32 %v0_d2fc, i32* %r0.global-to-local, align 4
  %v2_d300 = call i32 @function_f7f4(i32 %v0_d2fc, i32 %v2_d2f4)
  store i32 %v2_d300, i32* %r0.global-to-local, align 4
  %v2_d308 = add i32 %v2_d2f4, %v2_d304
  %v1_d30c = add i32 %v2_d308, -23
  %v2_d30c = inttoptr i32 %v1_d30c to i8*
  %v3_d30c = load i8, i8* %v2_d30c, align 1
  %v2_d310 = load i32, i32* @r5, align 4
  %v3_d310 = load i32, i32* @sb, align 4
  %v4_d310 = add i32 %v3_d310, %v2_d310
  %v5_d310 = inttoptr i32 %v4_d310 to i8*
  store i8 %v3_d30c, i8* %v5_d310, align 1
  %v0_d314 = load i32, i32* @r5, align 4
  %v1_d314 = add i32 %v0_d314, 1
  store i32 %v1_d314, i32* @r5, align 4
  %v1_d318 = load i32, i32* @fp, align 4
  %v9_d318 = icmp eq i32 %v1_d314, %v1_d318
  br i1 %v9_d318, label %dec_label_pc_d320.loopexit, label %dec_label_pc_d2c0.dec_label_pc_d2c0_crit_edge

dec_label_pc_d2c0.dec_label_pc_d2c0_crit_edge:    ; preds = %dec_label_pc_d2c0
  %v1_d2e4.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_d2c0

dec_label_pc_d320.loopexit:                       ; preds = %dec_label_pc_d2c0
  %v1_d328.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d320

dec_label_pc_d320:                                ; preds = %dec_label_pc_d320.loopexit, %dec_label_pc_d288
  %v1_d328 = phi i32 [ %v1_d328.pre, %dec_label_pc_d320.loopexit ], [ %v0_d294, %dec_label_pc_d288 ]
  store i32 %v3_d288, i32* @r4, align 4
  store i32 %v6_d288, i32* @r5, align 4
  store i32 %v12_d288, i32* @r7, align 4
  store i32 %v18_d288, i32* @sb, align 4
  store i32 %v24_d288, i32* @fp, align 4
  ret i32 %v1_d328

; uselistorder directives
  uselistorder i32 %v2_d2c4, { 1, 0 }
  uselistorder i32 %v2_d2c0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 7, 6, 0, 1 }
  uselistorder i32* @global_var_1f098.103, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1f094.107, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1f090.105, { 2, 3, 1, 5, 0, 4 }
  uselistorder i32* @global_var_1f08c.101, { 2, 4, 1, 0, 3 }
}

define i32 @function_d340(i32 %arg1) local_unnamed_addr {
dec_label_pc_d340:
  %v2_d34c = load i32, i32* @global_var_1f664.119, align 4
  store i32 %v2_d34c, i32* @r0, align 4
  %v2_d354 = call i32 @function_11a6c(i32 %v2_d34c, i32 9)
  ret i32 %v2_d354

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_11a6c, { 5, 4, 3, 2, 1, 0 }
}

define i32 @function_d368() local_unnamed_addr {
dec_label_pc_d368:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_d368 = load i32, i32* @r4, align 4
  store i32 %v3_d368, i32* %stack_var_-16, align 4
  %v6_d368 = load i32, i32* @r5, align 4
  %v9_d368 = load i32, i32* @r6, align 4
  %v12_d368 = load i32, i32* @lr, align 4
  %v0_d36c = load i32, i32* @r0, align 4
  store i32 %v0_d36c, i32* @r5, align 4
  %v1_d370 = add i32 %v0_d36c, 4
  %v2_d370 = inttoptr i32 %v1_d370 to i32*
  %v3_d370 = load i32, i32* %v2_d370, align 4
  store i32 %v3_d370, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 54164, i32* @lr, align 4
  %v1_d390 = icmp ne i32 %v3_d370, -1
  call void @__pseudo_cond_branch(i1 %v1_d390, i32 ptrtoint (i32* @global_var_12714.94 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_d39c = load i32, i32* @r6, align 4
  store i32 %v0_d39c, i32* %r2.global-to-local, align 4
  %v3_d3a0 = call i32 @function_117e8(i32 2, i32 1, i32 %v0_d39c)
  store i32 %v3_d3a0, i32* %r0.global-to-local, align 4
  %v7_d3a4 = icmp eq i32 %v3_d3a0, -1
  %v1_d3a8 = load i32, i32* @r5, align 4
  %v2_d3a8 = add i32 %v1_d3a8, 4
  %v3_d3a8 = inttoptr i32 %v2_d3a8 to i32*
  store i32 %v3_d3a0, i32* %v3_d3a8, align 4
  br i1 %v7_d3a4, label %dec_label_pc_d368.dec_label_pc_d420_crit_edge, label %dec_label_pc_d3b0

dec_label_pc_d368.dec_label_pc_d420_crit_edge:    ; preds = %dec_label_pc_d368
  %v1_d428.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d420

dec_label_pc_d3b0:                                ; preds = %dec_label_pc_d368
  %v2_d374 = ptrtoint i32* %stack_var_-32 to i32
  %v0_d3b0 = load i32, i32* @r5, align 4
  %v1_d3b0 = add i32 %v0_d3b0, 28
  store i32 %v1_d3b0, i32* @r0, align 4
  %v0_d3b4 = load i32, i32* @r6, align 4
  %v2_d3b4 = add i32 %v0_d3b0, 24
  %v3_d3b4 = inttoptr i32 %v2_d3b4 to i32*
  store i32 %v0_d3b4, i32* %v3_d3b4, align 4
  store i32 256, i32* @r1, align 4
  %v0_d3bc = call i32 @function_f2a4()
  store i32 %v0_d3bc, i32* %r0.global-to-local, align 4
  %v0_d3c0 = load i32, i32* @r5, align 4
  %v1_d3c0 = add i32 %v0_d3c0, 4
  %v2_d3c0 = inttoptr i32 %v1_d3c0 to i32*
  %v3_d3c0 = load i32, i32* %v2_d3c0, align 4
  store i32 %v3_d3c0, i32* @r4, align 4
  %v0_d3c4 = load i32, i32* @r6, align 4
  store i32 %v0_d3c4, i32* %r2.global-to-local, align 4
  store i32 %v3_d3c0, i32* %r0.global-to-local, align 4
  %v3_d3d0 = call i32 @function_fbfc(i32 %v3_d3c0, i32 3, i32 %v0_d3c4)
  %v1_d3d8 = or i32 %v3_d3d0, 2048
  store i32 %v1_d3d8, i32* %r2.global-to-local, align 4
  %v0_d3dc = load i32, i32* @r4, align 4
  store i32 %v0_d3dc, i32* %r0.global-to-local, align 4
  %v3_d3e0 = call i32 @function_fbfc(i32 %v0_d3dc, i32 4, i32 %v1_d3d8)
  store i32 %v3_d3e0, i32* %r0.global-to-local, align 4
  %v2_d3e8 = load i32, i32* @global_var_1f0d0.121, align 4
  store i32 %v2_d3e8, i32* %r2.global-to-local, align 4
  %v1_d3f0 = load i32, i32* @r5, align 4
  %v2_d3f0 = add i32 %v1_d3f0, 12
  %v3_d3f0 = inttoptr i32 %v2_d3f0 to i32*
  store i32 1, i32* %v3_d3f0, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_d3fc = load i32, i32* %r2.global-to-local, align 4
  %v1_d3fc = load i32, i32* @r5, align 4
  %v2_d3fc = add i32 %v1_d3fc, 8
  %v3_d3fc = inttoptr i32 %v2_d3fc to i32*
  store i32 %v0_d3fc, i32* %v3_d3fc, align 4
  %v0_d400 = load i32, i32* @r5, align 4
  %v1_d404 = add i32 %v0_d400, 4
  %v2_d404 = inttoptr i32 %v1_d404 to i32*
  %v3_d404 = load i32, i32* %v2_d404, align 4
  store i32 %v3_d404, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d41c = call i32 @function_1142c(i32 %v3_d404, i32 %v2_d374, i32 16)
  store i32 %v3_d41c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d420

dec_label_pc_d420:                                ; preds = %dec_label_pc_d368.dec_label_pc_d420_crit_edge, %dec_label_pc_d3b0
  %v1_d428 = phi i32 [ %v1_d428.pre, %dec_label_pc_d368.dec_label_pc_d420_crit_edge ], [ %v3_d41c, %dec_label_pc_d3b0 ]
  %v2_d424 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_d424, i32* @r4, align 4
  store i32 %v6_d368, i32* @r5, align 4
  store i32 %v9_d368, i32* @r6, align 4
  store i32 %v12_d368, i32* @lr, align 4
  ret i32 %v1_d428

; uselistorder directives
  uselistorder i32 %v3_d3a0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_f2a4, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_d420, { 1, 0 }
}

define i32 @function_d430(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d430:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_d430 = load i32, i32* @r4, align 4
  %v6_d430 = load i32, i32* @r5, align 4
  %v9_d430 = load i32, i32* @r6, align 4
  %v12_d430 = load i32, i32* @r7, align 4
  %v15_d430 = load i32, i32* @r8, align 4
  %v18_d430 = load i32, i32* @sb, align 4
  %v21_d430 = load i32, i32* @sl, align 4
  %v24_d430 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1f09c.123 to i32), i32* @fp, align 4
  %v2_d438 = load i32, i32* @global_var_1f09c.123, align 4
  store i32 ptrtoint (i32* @global_var_1f0c8.125 to i32), i32* @sl, align 4
  %v1_d444 = add i32 %v2_d438, 1
  store i32 %v1_d444, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_d450 = load i32, i32* @global_var_1f0c8.125, align 4
  store i32 %v2_d450, i32* %r0.global-to-local, align 4
  %v3_d454 = mul i32 %v1_d444, 16
  store i32 %v3_d454, i32* %r1.global-to-local, align 4
  %v4_d45c = call i32 @function_1105c(i32 %v2_d450, i32 %v3_d454, i32 %arg3, i32 %v1_d444)
  %v2_d460 = load i32, i32* @global_var_1f09c.123, align 4
  store i32 %v2_d460, i32* %r2.global-to-local, align 4
  store i32 %v4_d45c, i32* @r8, align 4
  %v0_d468 = load i32, i32* @r5, align 4
  store i32 %v0_d468, i32* %r0.global-to-local, align 4
  %v1_d470 = load i32, i32* @sl, align 4
  %v2_d470 = inttoptr i32 %v1_d470 to i32*
  store i32 %v4_d45c, i32* %v2_d470, align 4
  %v1_d474 = inttoptr i32 %v0_d468 to i8*
  %v2_d474 = call i32 @function_f210(i8* %v1_d474)
  %sext = mul i32 %v2_d474, 16777216
  %v1_d478 = sdiv i32 %sext, 16777216
  %v2_d478 = add nsw i32 %v1_d478, 1
  store i32 %v2_d478, i32* @r4, align 4
  store i32 %v1_d478, i32* @r7, align 4
  store i32 %v2_d478, i32* @r0, align 4
  %v0_d484 = call i32 @function_10910()
  store i32 %v0_d484, i32* %r0.global-to-local, align 4
  %v0_d488 = load i32, i32* @r5, align 4
  store i32 %v0_d488, i32* %r1.global-to-local, align 4
  %v0_d48c = load i32, i32* @r4, align 4
  store i32 %v0_d48c, i32* %r2.global-to-local, align 4
  store i32 %v0_d484, i32* %r6.global-to-local, align 4
  %v3_d494 = call i32 @function_f280(i32 %v0_d484, i32 %v0_d488, i32 %v0_d48c)
  store i32 %v3_d494, i32* %r0.global-to-local, align 4
  %v0_d498 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_d498, 1
  %extract.t6 = trunc i32 %v0_d498 to i8
  br i1 %tmp22, label %dec_label_pc_d4bc, label %dec_label_pc_d4a0

dec_label_pc_d4a0:                                ; preds = %dec_label_pc_d430
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d4a4

dec_label_pc_d4a4:                                ; preds = %dec_label_pc_d4a4, %dec_label_pc_d4a0
  %v2_d4ac = phi i32 [ %v1_d4b0, %dec_label_pc_d4a4 ], [ 0, %dec_label_pc_d4a0 ]
  %v1_d4a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_d4a4 = add i32 %v1_d4a4, %v2_d4ac
  %v3_d4a4 = inttoptr i32 %v2_d4a4 to i8*
  %v4_d4a4 = load i8, i8* %v3_d4a4, align 1
  %v6_d4a4 = zext i8 %v4_d4a4 to i32
  %v1_d4a8 = xor i32 %v6_d4a4, 69
  store i32 %v1_d4a8, i32* %r3.global-to-local, align 4
  %v1_d4ac = trunc i32 %v1_d4a8 to i8
  store i8 %v1_d4ac, i8* %v3_d4a4, align 1
  %v0_d4b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d4b0 = add i32 %v0_d4b0, 1
  store i32 %v1_d4b0, i32* %r2.global-to-local, align 4
  %v1_d4b4 = load i32, i32* @r7, align 4
  %v9_d4b4 = icmp eq i32 %v1_d4b0, %v1_d4b4
  br i1 %v9_d4b4, label %dec_label_pc_d4bc.loopexit, label %dec_label_pc_d4a4

dec_label_pc_d4bc.loopexit:                       ; preds = %dec_label_pc_d4a4
  %extract.t = trunc i32 %v1_d4b0 to i8
  br label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d4bc.loopexit, %dec_label_pc_d430
  %v0_d4cc.off0 = phi i8 [ %extract.t, %dec_label_pc_d4bc.loopexit ], [ %extract.t6, %dec_label_pc_d430 ]
  %v2_d4bc = load i32, i32* @global_var_1f09c.123, align 4
  %v2_d4c0 = load i32, i32* @global_var_1f0c8.125, align 4
  %v3_d4c4 = mul i32 %v2_d4bc, 16
  store i32 %v3_d4c4, i32* @sb, align 4
  %v2_d4c8 = add i32 %v2_d4c0, %v3_d4c4
  store i32 %v2_d4c8, i32* %r2.global-to-local, align 4
  %v3_d4cc = add i32 %v2_d4c8, 12
  %v4_d4cc = inttoptr i32 %v3_d4cc to i8*
  store i8 %v0_d4cc.off0, i8* %v4_d4cc, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_d460, i32* %r3.global-to-local, align 4
  %v0_d4d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_d4d8 = load i32, i32* @r8, align 4
  %v5_d4d8 = mul i32 %v2_d460, 16
  %v6_d4d8 = add i32 %v1_d4d8, %v5_d4d8
  %v7_d4d8 = inttoptr i32 %v6_d4d8 to i32*
  store i32 %v0_d4d8, i32* %v7_d4d8, align 4
  %v2_d4dc = load i32, i32* @global_var_1f0c8.125, align 4
  store i32 %v2_d4dc, i32* @r7, align 4
  %v1_d4e0 = inttoptr i32 %arg2 to i8*
  %v2_d4e0 = call i32 @function_f210(i8* %v1_d4e0)
  %sext1 = mul i32 %v2_d4e0, 16777216
  %v1_d4e4 = sdiv i32 %sext1, 16777216
  %v2_d4e4 = add nsw i32 %v1_d4e4, 1
  store i32 %v2_d4e4, i32* @r4, align 4
  store i32 %v1_d4e4, i32* @r6, align 4
  store i32 %v2_d4e4, i32* @r0, align 4
  %v0_d4f0 = call i32 @function_10910()
  store i32 %v0_d4f0, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_d4f8 = load i32, i32* @r4, align 4
  store i32 %v0_d4f8, i32* %r2.global-to-local, align 4
  store i32 %v0_d4f0, i32* %r5.global-to-local, align 4
  %v3_d500 = call i32 @function_f280(i32 %v0_d4f0, i32 %arg2, i32 %v0_d4f8)
  store i32 %v3_d500, i32* %r0.global-to-local, align 4
  %v0_d504 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_d504, 1
  %extract.t8 = trunc i32 %v0_d504 to i8
  br i1 %tmp23, label %dec_label_pc_d528, label %dec_label_pc_d50c

dec_label_pc_d50c:                                ; preds = %dec_label_pc_d4bc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d510

dec_label_pc_d510:                                ; preds = %dec_label_pc_d510, %dec_label_pc_d50c
  %v2_d518 = phi i32 [ %v1_d51c, %dec_label_pc_d510 ], [ 0, %dec_label_pc_d50c ]
  %v1_d510 = load i32, i32* %r5.global-to-local, align 4
  %v2_d510 = add i32 %v1_d510, %v2_d518
  %v3_d510 = inttoptr i32 %v2_d510 to i8*
  %v4_d510 = load i8, i8* %v3_d510, align 1
  %v6_d510 = zext i8 %v4_d510 to i32
  %v1_d514 = xor i32 %v6_d510, 69
  store i32 %v1_d514, i32* %r3.global-to-local, align 4
  %v1_d518 = trunc i32 %v1_d514 to i8
  store i8 %v1_d518, i8* %v3_d510, align 1
  %v0_d51c = load i32, i32* %r2.global-to-local, align 4
  %v1_d51c = add i32 %v0_d51c, 1
  store i32 %v1_d51c, i32* %r2.global-to-local, align 4
  %v1_d520 = load i32, i32* @r6, align 4
  %v9_d520 = icmp eq i32 %v1_d51c, %v1_d520
  br i1 %v9_d520, label %dec_label_pc_d528.loopexit, label %dec_label_pc_d510

dec_label_pc_d528.loopexit:                       ; preds = %dec_label_pc_d510
  %extract.t7 = trunc i32 %v1_d51c to i8
  br label %dec_label_pc_d528

dec_label_pc_d528:                                ; preds = %dec_label_pc_d528.loopexit, %dec_label_pc_d4bc
  %v0_d538.off0 = phi i8 [ %extract.t7, %dec_label_pc_d528.loopexit ], [ %extract.t8, %dec_label_pc_d4bc ]
  %v2_d528 = load i32, i32* @global_var_1f09c.123, align 4
  store i32 %v2_d528, i32* %r0.global-to-local, align 4
  %v2_d52c = load i32, i32* @global_var_1f0c8.125, align 4
  %v3_d530 = mul i32 %v2_d528, 16
  store i32 %v3_d530, i32* %r1.global-to-local, align 4
  %v2_d534 = or i32 %v3_d530, 13
  %v3_d538 = add i32 %v2_d534, %v2_d52c
  %v4_d538 = inttoptr i32 %v3_d538 to i8*
  store i8 %v0_d538.off0, i8* %v4_d538, align 1
  store i32 ptrtoint (i16** @global_var_1f0cc.127 to i32), i32* %r4.global-to-local, align 4
  %v2_d544 = load i16, i16* bitcast (i16** @global_var_1f0cc.127 to i16*), align 4
  %v3_d544 = zext i16 %v2_d544 to i32
  store i32 %v3_d544, i32* %lr.global-to-local, align 4
  %v2_d54c = load i32, i32* @global_var_1f0c8.125, align 4
  store i32 %v2_d54c, i32* %r2.global-to-local, align 4
  %v0_d554 = load i32, i32* %r1.global-to-local, align 4
  %v2_d554 = add i32 %v0_d554, %v2_d54c
  store i32 %v2_d554, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1f0cc.127 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_d55c = load i32, i32* @sb, align 4
  %v1_d55c = load i32, i32* @r7, align 4
  %v2_d55c = add i32 %v1_d55c, %v0_d55c
  store i32 %v2_d55c, i32* %ip.global-to-local, align 4
  %v0_d560 = load i32, i32* %r0.global-to-local, align 4
  %v1_d560 = add i32 %v0_d560, 1
  store i32 %v1_d560, i32* %r0.global-to-local, align 4
  %v3_d564 = add i32 %v2_d554, 10
  %v4_d564 = inttoptr i32 %v3_d564 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1f0cc.127 to i32), i32 16), i32 16) to i16), i16* %v4_d564, align 2
  %v0_d568 = load i32, i32* %lr.global-to-local, align 4
  %v1_d568 = trunc i32 %v0_d568 to i16
  %v2_d568 = load i32, i32* %r1.global-to-local, align 4
  %v3_d568 = add i32 %v2_d568, 8
  %v4_d568 = inttoptr i32 %v3_d568 to i16*
  store i16 %v1_d568, i16* %v4_d568, align 2
  %v0_d56c = load i32, i32* %r5.global-to-local, align 4
  %v1_d56c = load i32, i32* %ip.global-to-local, align 4
  %v2_d56c = add i32 %v1_d56c, 4
  %v3_d56c = inttoptr i32 %v2_d56c to i32*
  store i32 %v0_d56c, i32* %v3_d56c, align 4
  %v1_d570 = load i32, i32* @fp, align 4
  %v2_d570 = inttoptr i32 %v1_d570 to i32*
  store i32 %v1_d560, i32* %v2_d570, align 4
  %v0_d574 = load i32, i32* %r3.global-to-local, align 4
  %v1_d574 = trunc i32 %v0_d574 to i16
  %v2_d574 = load i32, i32* %r4.global-to-local, align 4
  %v3_d574 = inttoptr i32 %v2_d574 to i16*
  store i16 %v1_d574, i16* %v3_d574, align 2
  store i32 %v3_d430, i32* @r4, align 4
  store i32 %v6_d430, i32* @r5, align 4
  store i32 %v9_d430, i32* @r6, align 4
  store i32 %v12_d430, i32* @r7, align 4
  store i32 %v15_d430, i32* @r8, align 4
  store i32 %v18_d430, i32* @sb, align 4
  store i32 %v21_d430, i32* @sl, align 4
  store i32 %v24_d430, i32* @fp, align 4
  ret i32 %v1_d560

; uselistorder directives
  uselistorder i32 %v3_d530, { 1, 0 }
  uselistorder i32 %v1_d51c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_d4f0, { 1, 0, 2 }
  uselistorder i32 %v3_d4c4, { 1, 0 }
  uselistorder i32 %v1_d4b0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_d484, { 1, 0, 2 }
  uselistorder i32 %v2_d460, { 1, 0, 2 }
  uselistorder i32 %v3_d454, { 1, 0 }
  uselistorder i32 %v1_d444, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_f210, { 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 (i32, i32, i32, i32)* @function_1105c, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_d590(i32 %arg1) local_unnamed_addr {
dec_label_pc_d590:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sp.global-to-local = alloca i32, align 4
  store i32 0, i32* %sp.global-to-local, align 4
  %tmp275 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %tmp303 = call i16 @__decompiler_undefined_function_3()
  %v18_d590 = load i32, i32* @sb, align 4
  %v21_d590 = load i32, i32* @sl, align 4
  %v24_d590 = load i32, i32* @fp, align 4
  %v27_d590 = load i32, i32* @lr, align 4
  %v0_d59c = call i32 @function_118e0()
  store i32 %v0_d59c, i32* %r0.global-to-local, align 4
  %v7_d5a0 = icmp eq i32 %v0_d59c, -1
  %. = zext i1 %v7_d5a0 to i32
  %tmp306 = icmp slt i32 %v0_d59c, 1
  %storemerge269 = select i1 %tmp306, i32 %., i32 1
  store i32 %storemerge269, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f664.119 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_d5bc = icmp eq i32 %storemerge269, 0
  store i1 %v2_d5bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_d59c, i32* @global_var_1f664.119, align 4
  br i1 %v2_d5bc, label %dec_label_pc_d5d8, label %dec_label_pc_d5c8

dec_label_pc_d5c8:                                ; preds = %dec_label_pc_d590
  store i32 %v18_d590, i32* @sb, align 4
  store i32 %v21_d590, i32* @sl, align 4
  store i32 %v24_d590, i32* @fp, align 4
  store i32 %v27_d590, i32* @lr, align 4
  ret i32 %v0_d59c

dec_label_pc_d5d8:                                ; preds = %dec_label_pc_d590
  %v0_d5d8 = call i32 @function_f4cc()
  store i32 %v0_d5d8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f644.44 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d5d8, i32* @global_var_1f644.44, align 4
  %v1_d5e4 = call i32 @function_d220(i32 %v0_d5d8)
  %v0_d5e8 = load i32, i32* @r4, align 4
  store i32 %v0_d5e8, i32* %r0.global-to-local, align 4
  %v1_d5ec = inttoptr i32 %v0_d5e8 to i32*
  %v2_d5ec = call i32 @function_126dc(i32* %v1_d5ec)
  store i32 ptrtoint (i32* @global_var_1f0d0.121 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_d5ec, i32* @global_var_1f0d0.121, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_d600 = call i32 @function_fea0(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_1f65c.132 to i32), i32* %r3.global-to-local, align 4
  %v0_d608 = load i32, i32* @r4, align 4
  store i32 %v0_d608, i32* %stack_var_-52, align 4
  store i32 %v2_d600, i32* @global_var_1f65c.132, align 4
  store i32 %v0_d608, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d614

dec_label_pc_d614:                                ; preds = %dec_label_pc_d614.dec_label_pc_d614_crit_edge, %dec_label_pc_d5d8
  %v2_d620 = phi i32 [ %v2_d620.pre, %dec_label_pc_d614.dec_label_pc_d614_crit_edge ], [ %v2_d600, %dec_label_pc_d5d8 ]
  %v0_d628 = phi i32 [ %v0_d658, %dec_label_pc_d614.dec_label_pc_d614_crit_edge ], [ %v0_d608, %dec_label_pc_d5d8 ]
  %v3_d61c = mul i32 %v0_d628, 256
  store i32 %v3_d61c, i32* %ip.global-to-local, align 4
  store i32 %v2_d620, i32* @lr, align 4
  %v2_d630 = mul i32 %v0_d628, 288
  %v1_d638 = add i32 %v0_d628, 1
  store i32 %v1_d638, i32* %r0.global-to-local, align 4
  %v2_d63c = add i32 %v2_d630, %v2_d620
  store i32 %v2_d63c, i32* %r2.global-to-local, align 4
  store i32 %v2_d63c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v2_d650 = add i32 %v2_d63c, 4
  %v3_d650 = inttoptr i32 %v2_d650 to i32*
  store i32 -1, i32* %v3_d650, align 4
  %v0_d654 = load i32, i32* @r5, align 4
  %v1_d654 = load i32, i32* %r1.global-to-local, align 4
  %v2_d654 = add i32 %v1_d654, 12
  %v3_d654 = inttoptr i32 %v2_d654 to i32*
  store i32 %v0_d654, i32* %v3_d654, align 4
  %v0_d658 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d658, i32* %stack_var_-52, align 4
  %v7_d65c = icmp sgt i32 %v1_d638, 255
  br i1 %v7_d65c, label %dec_label_pc_d660, label %dec_label_pc_d614.dec_label_pc_d614_crit_edge

dec_label_pc_d614.dec_label_pc_d614_crit_edge:    ; preds = %dec_label_pc_d614
  %v2_d620.pre = load i32, i32* @global_var_1f65c.132, align 4
  br label %dec_label_pc_d614

dec_label_pc_d660:                                ; preds = %dec_label_pc_d614
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_d66c = call i32 @function_117e8(i32 2, i32 3, i32 6)
  store i32 %v3_d66c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f660.134 to i32), i32* %r2.global-to-local, align 4
  %v2_d674 = icmp eq i32 %v3_d66c, -1
  store i1 %v2_d674, i1* %cpsr_c.global-to-local, align 1
  %v7_d674 = icmp eq i32 %v3_d66c, -1
  store i1 %v7_d674, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d66c, i32* @r4, align 4
  store i32 %v3_d66c, i32* @global_var_1f660.134, align 4
  br i1 %v7_d674, label %dec_label_pc_ddb4, label %dec_label_pc_d684

dec_label_pc_d684:                                ; preds = %dec_label_pc_d660
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_d688 = load i32, i32* @r5, align 4
  store i32 %v0_d688, i32* %r2.global-to-local, align 4
  %v3_d68c = call i32 @function_fbfc(i32 %v3_d66c, i32 3, i32 %v0_d688)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_d694 = or i32 %v3_d68c, 2048
  store i32 %v1_d694, i32* %r2.global-to-local, align 4
  %v0_d698 = load i32, i32* @r4, align 4
  store i32 %v0_d698, i32* %r0.global-to-local, align 4
  %v3_d69c = call i32 @function_fbfc(i32 %v0_d698, i32 4, i32 %v1_d694)
  %v2_d6a4 = load i32, i32* @global_var_1f660.134, align 4
  store i32 %v2_d6a4, i32* @r0, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_d6b0 = load i32, i32* @r5, align 4
  store i32 %v0_d6b0, i32* %r1.global-to-local, align 4
  store i32 3, i32* @r2, align 4
  %v2_d6b8 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_d6b8, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_d6c8 = call i32 @function_11778(i32 %v2_d6a4, i32 %v0_d6b0, i32 3, i32 %v2_d6b8, i32 4)
  store i32 %v5_d6c8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_d6cc = icmp eq i32 %v5_d6c8, 0
  store i1 %v2_d6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d6cc, label %dec_label_pc_d6d4, label %dec_label_pc_dda8

dec_label_pc_d6d4:                                ; preds = %dec_label_pc_d684, %dec_label_pc_d6d4
  %v0_d6d4 = call i32 @function_d1c4()
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_d6dc = urem i32 %v0_d6d4, 65536
  %v4_d6dc = trunc i32 %v0_d6d4 to i16
  store i32 %v3_d6dc, i32* %r0.global-to-local, align 4
  %v2_d6e4 = call i32 @function_11688(i32 %v0_d6d4)
  store i32 %v2_d6e4, i32* %r0.global-to-local, align 4
  %v2_d6e8 = icmp ugt i32 %v2_d6e4, 1023
  store i1 %v2_d6e8, i1* %cpsr_c.global-to-local, align 1
  %v7_d6e8 = icmp eq i32 %v2_d6e4, 1024
  store i1 %v7_d6e8, i1* %cpsr_z.global-to-local, align 1
  %v3_d6ec = icmp ult i32 %v2_d6e4, 1022
  br i1 %v3_d6ec, label %dec_label_pc_d6d4, label %dec_label_pc_d6f0

dec_label_pc_d6f0:                                ; preds = %dec_label_pc_d6d4
  %v2_d6f4 = load i8, i8* bitcast (i8** @global_var_1f0a0.136 to i8*), align 4
  %v3_d6f4 = zext i8 %v2_d6f4 to i32
  %v1_d6f8 = and i32 %v3_d6f4, 240
  %v1_d6fc = or i32 %v1_d6f8, 5
  store i32 %v1_d6fc, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1f0a0.136 to i8*), align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_d718 = call i32 @function_114e0(i32 40)
  %v2_d718 = trunc i32 %v1_d718 to i16
  store i32 %v1_d718, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), i32* %r1.global-to-local, align 4
  store i16 %v2_d718, i16* bitcast (i32* @global_var_1f0a2.137 to i16*), align 4
  %v0_d724 = call i32 @function_d1c4()
  %v1_d724 = trunc i32 %v0_d724 to i16
  store i8 64, i8* bitcast (i32* @global_var_1f0a8.138 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), i32* %r3.global-to-local, align 4
  store i16 %v1_d724, i16* bitcast (i32* @global_var_1f0a4.139 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i8 6, i8* bitcast (i32* @global_var_1f0a9.140 to i8*), align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_d748 = call i32 @function_114e0(i32 23)
  %v2_d748 = trunc i32 %v1_d748 to i16
  store i32 %v1_d748, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0b4.141 to i32), i32* @fp, align 4
  %v3_d754 = load i8, i8* @global_var_1f0c0.142, align 1
  %tmp = urem i8 %v3_d754, 16
  %v1_d758 = zext i8 %tmp to i32
  %v1_d75c = or i32 %v1_d758, 80
  store i32 %v1_d75c, i32* %r3.global-to-local, align 4
  %v1_d760 = trunc i32 %v1_d75c to i8
  store i8 %v1_d760, i8* @global_var_1f0c0.142, align 1
  store i32 %v0_d6d4, i32* @lr, align 4
  store i16 %v2_d748, i16* @global_var_1f0b6.143, align 2
  store i16 %v4_d6dc, i16* bitcast (i32* @global_var_1f0b4.141 to i16*), align 4
  %v0_d770 = call i32 @function_d1c4()
  %v1_d770 = trunc i32 %v0_d770 to i16
  %v3_d774 = load i8, i8* @global_var_1f0c1.144, align 1
  %v4_d774 = zext i8 %v3_d774 to i32
  %v1_d778 = or i32 %v4_d774, 2
  store i32 %v1_d778, i32* %r3.global-to-local, align 4
  %v1_d77c = trunc i32 %v1_d778 to i8
  store i8 %v1_d77c, i8* @global_var_1f0c1.144, align 1
  store i16 %v1_d770, i16* bitcast (i32* @global_var_1f0c2.145 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_16554.147 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d790 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint (i32* @global_var_16554.147 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32* %r1.global-to-local, align 4
  %v5_d7a0 = call i32 @function_d430(i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16514.153 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_d7b0 = call i32 @function_d430(i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32 ptrtoint ([5 x i8]* @global_var_16514.153 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16554.147 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d7c0 = call i32 @function_d430(i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32 ptrtoint (i32* @global_var_16554.147 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16498.155 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_d7d0 = call i32 @function_d430(i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32 ptrtoint ([5 x i8]* @global_var_16498.155 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_164a0.157 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_d7e0 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_164a0.157 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_164a8.159 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_d7f0 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_164a8.159 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_164b0.161 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_d800 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_164b0.161 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_164b8.163 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_d810 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_164b8.163 to i32), i32 13)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_164c4.165 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_d820 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_164c4.165 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_164cc.167 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_d830 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([4 x i8]* @global_var_164cc.167 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_164d0.169 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_164d0.169 to i32), i32* %r1.global-to-local, align 4
  %v5_d840 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_164d0.169 to i32), i32 ptrtoint ([5 x i8]* @global_var_164d0.169 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_164d8.171 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_164d8.171 to i32), i32* %r1.global-to-local, align 4
  %v5_d850 = call i32 @function_d430(i32 ptrtoint ([8 x i8]* @global_var_164d8.171 to i32), i32 ptrtoint ([8 x i8]* @global_var_164d8.171 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_16514.153 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16514.153 to i32), i32* %r1.global-to-local, align 4
  %v5_d860 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16514.153 to i32), i32 ptrtoint ([5 x i8]* @global_var_16514.153 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_164e0.173 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_d870 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([4 x i8]* @global_var_164e0.173 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_164e4.175 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16554.147 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_d880 = call i32 @function_d430(i32 ptrtoint ([8 x i8]* @global_var_164e4.175 to i32), i32 ptrtoint (i32* @global_var_16554.147 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_164e4.175 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_d890 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([8 x i8]* @global_var_164e4.175 to i32), i32 11)
  store i32 ptrtoint ([4 x i8]* @global_var_164ec.177 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16554.147 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_d8a0 = call i32 @function_d430(i32 ptrtoint ([4 x i8]* @global_var_164ec.177 to i32), i32 ptrtoint (i32* @global_var_16554.147 to i32), i32 3)
  store i32 ptrtoint ([7 x i8]* @global_var_164f0.179 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16554.147 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_d8b0 = call i32 @function_d430(i32 ptrtoint ([7 x i8]* @global_var_164f0.179 to i32), i32 ptrtoint (i32* @global_var_16554.147 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_164f8.181 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16554.147 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_d8c0 = call i32 @function_d430(i32 ptrtoint ([4 x i8]* @global_var_164f8.181 to i32), i32 ptrtoint (i32* @global_var_16554.147 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_164fc.183 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_d8d0 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([5 x i8]* @global_var_164fc.183 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16504.185 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_d8e0 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_16504.185 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16510.187 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_d8f0 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_16510.187 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1651c.189 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_d900 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_1651c.189 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16524.191 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_d910 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_16524.191 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r1.global-to-local, align 4
  %v5_d920 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1652c.193 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_d930 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_1652c.193 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16534.195 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_d940 = call i32 @function_d430(i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32 ptrtoint ([8 x i8]* @global_var_16534.195 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_1653c.197 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1653c.197 to i32), i32* %r1.global-to-local, align 4
  %v5_d950 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_1653c.197 to i32), i32 ptrtoint ([5 x i8]* @global_var_1653c.197 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16544.199 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_d960 = call i32 @function_d430(i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32 ptrtoint ([5 x i8]* @global_var_16544.199 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1654c.201 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_d970 = call i32 @function_d430(i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), i32 ptrtoint ([9 x i8]* @global_var_1654c.201 to i32), i32 13)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1654c.201 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_d980 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_1654c.201 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16558.203 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_d990 = call i32 @function_d430(i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_16558.203 to i32), i32 10)
  %v2_d998 = ptrtoint i32* %stack_var_-1866 to i32
  store i32 %v2_d998, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d9a0

dec_label_pc_d9a0:                                ; preds = %dec_label_pc_e0ec, %dec_label_pc_d6f0
  %stack_var_-1880.0 = phi i32 [ %v2_d998, %dec_label_pc_d6f0 ], [ %stack_var_-1880.1, %dec_label_pc_e0ec ]
  %stack_var_-1876.0 = phi i16 [ %v4_d6dc, %dec_label_pc_d6f0 ], [ %stack_var_-1876.1, %dec_label_pc_e0ec ]
  store i32 ptrtoint (i32* @global_var_1f0d0.121 to i32), i32* %r1.global-to-local, align 4
  %v2_d9a4 = load i32, i32* @global_var_1f0d0.121, align 4
  store i32 %v2_d9a4, i32* @r5, align 4
  %v0_d9a8 = load i32, i32* @sb, align 4
  %v3_d9a8 = icmp uge i32 %v0_d9a8, %v2_d9a4
  store i1 %v3_d9a8, i1* %cpsr_c.global-to-local, align 1
  %v9_d9a8 = icmp eq i32 %v0_d9a8, %v2_d9a4
  store i1 %v9_d9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d9a8, label %dec_label_pc_dc10, label %dec_label_pc_d9b0

dec_label_pc_d9b0:                                ; preds = %dec_label_pc_d9a0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_d9b8 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_d9bc

dec_label_pc_d9bc:                                ; preds = %dec_label_pc_db7c, %dec_label_pc_d9b0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_d9d0 = call i32 @function_d1c4()
  %v1_d9d0 = trunc i32 %v0_d9d0 to i16
  store i32 %v0_d9d0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f644.44 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), i32* %ip.global-to-local, align 4
  %v2_d9dc = load i32, i32* @global_var_1f644.44, align 4
  store i32 %v2_d9dc, i32* %r3.global-to-local, align 4
  store i16 %v1_d9d0, i16* bitcast (i32* @global_var_1f0a4.139 to i16*), align 4
  store i32 %v2_d9dc, i32* @global_var_1f0ac.204, align 4
  br label %dec_label_pc_d9e8

dec_label_pc_d9e8:                                ; preds = %dec_label_pc_dabc, %dec_label_pc_da18, %dec_label_pc_daf0, %dec_label_pc_dae4, %dec_label_pc_dad8, %dec_label_pc_dacc, %.thread30, %bb327, %bb326, %bb325, %bb324, %bb323, %dec_label_pc_dab4, %dec_label_pc_daac, %bb319, %dec_label_pc_da7c, %dec_label_pc_da58, %bb312, %dec_label_pc_da28, %bb311, %dec_label_pc_da10, %bb310, %bb329, %dec_label_pc_d9bc
  %v0_d9e8 = call i32 @function_d1c4()
  store i32 %v0_d9e8, i32* %r0.global-to-local, align 4
  %v1_d9ec = urem i32 %v0_d9e8, 256
  store i32 %v1_d9ec, i32* %r1.global-to-local, align 4
  %v3_d9f0 = udiv i32 %v0_d9e8, 256
  store i32 %v3_d9f0, i32* %r3.global-to-local, align 4
  %v3_d9f4 = udiv i32 %v0_d9e8, 65536
  store i32 %v3_d9f4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_d9f8 = icmp eq i32 %v1_d9ec, 0
  store i1 %v2_d9f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d9f8, label %bb310, label %bb309

bb309:                                            ; preds = %dec_label_pc_d9e8
  %v3_d9fc = icmp ugt i32 %v1_d9ec, 126
  store i1 %v3_d9fc, i1* %cpsr_c.global-to-local, align 1
  %v8_d9fc = icmp eq i32 %v1_d9ec, 127
  store i1 %v8_d9fc, i1* %cpsr_z.global-to-local, align 1
  br label %bb310

bb310:                                            ; preds = %dec_label_pc_d9e8, %bb309
  %v0_da0c = phi i1 [ true, %dec_label_pc_d9e8 ], [ %v8_d9fc, %bb309 ]
  %v1_da00 = urem i32 %v3_d9f0, 256
  store i32 %v1_da00, i32* %ip.global-to-local, align 4
  %v1_da04 = urem i32 %v3_d9f4, 256
  store i32 %v1_da04, i32* %r2.global-to-local, align 4
  %v1_da08 = and i32 %v0_d9e8, 8388608
  %v2_da08 = icmp ne i32 %v1_da08, 0
  store i1 %v2_da08, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_da0c, label %dec_label_pc_d9e8, label %dec_label_pc_da10

dec_label_pc_da10:                                ; preds = %bb310
  %v2_da10 = icmp ugt i32 %v1_d9ec, 2
  store i1 %v2_da10, i1* %cpsr_c.global-to-local, align 1
  %v7_da10 = icmp eq i32 %v1_d9ec, 3
  store i1 %v7_da10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_da10, label %dec_label_pc_d9e8, label %dec_label_pc_da18

dec_label_pc_da18:                                ; preds = %dec_label_pc_da10
  %v1_da18 = add nsw i32 %v1_d9ec, -15
  store i32 %v1_da18, i32* %r3.global-to-local, align 4
  %v2_da1c = icmp ugt i32 %v1_d9ec, 55
  store i1 %v2_da1c, i1* %cpsr_c.global-to-local, align 1
  %v7_da1c = icmp eq i32 %v1_d9ec, 56
  store i1 %v7_da1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_da1c, label %dec_label_pc_d9e8, label %bb311

bb311:                                            ; preds = %dec_label_pc_da18
  %v3_da20 = icmp ne i32 %v1_da18, 0
  store i1 %v3_da20, i1* %cpsr_c.global-to-local, align 1
  %v8_da20 = icmp eq i32 %v1_da18, 1
  store i1 %v8_da20, i1* %cpsr_z.global-to-local, align 1
  %v2_da24 = xor i1 %v3_da20, true
  %v3_da24 = or i1 %v8_da20, %v2_da24
  br i1 %v3_da24, label %dec_label_pc_d9e8, label %dec_label_pc_da28

dec_label_pc_da28:                                ; preds = %bb311
  %v2_da28 = icmp ugt i32 %v1_d9ec, 9
  store i1 %v2_da28, i1* %cpsr_c.global-to-local, align 1
  %v7_da28 = icmp eq i32 %v1_d9ec, 10
  store i1 %v7_da28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_da28, label %dec_label_pc_d9e8, label %dec_label_pc_da30

dec_label_pc_da30:                                ; preds = %dec_label_pc_da28
  %v2_da30 = icmp ugt i32 %v1_d9ec, 191
  store i1 %v2_da30, i1* %cpsr_c.global-to-local, align 1
  %v7_da30 = icmp eq i32 %v1_d9ec, 192
  store i1 %v7_da30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_da30, label %bb312, label %dec_label_pc_da3c

bb312:                                            ; preds = %dec_label_pc_da30
  %v3_da34 = icmp ugt i32 %v1_da00, 167
  store i1 %v3_da34, i1* %cpsr_c.global-to-local, align 1
  %v8_da34 = icmp eq i32 %v1_da00, 168
  store i1 %v8_da34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_da34, label %dec_label_pc_d9e8, label %dec_label_pc_da3c

dec_label_pc_da3c:                                ; preds = %dec_label_pc_da30, %bb312
  %v7_da3c = icmp eq i32 %v1_d9ec, 172
  %.383 = zext i1 %v7_da3c to i32
  store i32 %.383, i32* %r3.global-to-local, align 4
  %v2_da48 = icmp ugt i32 %v1_da00, 14
  store i1 %v2_da48, i1* %cpsr_c.global-to-local, align 1
  %v7_da48 = icmp eq i32 %v1_da00, 15
  store i1 %v7_da48, i1* %cpsr_z.global-to-local, align 1
  %v2_da4c = xor i1 %v2_da48, true
  %v3_da4c = or i1 %v7_da48, %v2_da4c
  br i1 %v3_da4c, label %.thread8, label %bb315

.thread8:                                         ; preds = %dec_label_pc_da3c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_da60

bb315:                                            ; preds = %dec_label_pc_da3c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_da50 = icmp eq i1 %v7_da3c, false
  store i1 %v2_da50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_da50, label %dec_label_pc_da60, label %dec_label_pc_da58

dec_label_pc_da58:                                ; preds = %bb315
  %v2_da58 = icmp ugt i32 %v1_da00, 30
  store i1 %v2_da58, i1* %cpsr_c.global-to-local, align 1
  %v7_da58 = icmp eq i32 %v1_da00, 31
  store i1 %v7_da58, i1* %cpsr_z.global-to-local, align 1
  %v2_da5c = xor i1 %v2_da58, true
  %v3_da5c = or i1 %v7_da58, %v2_da5c
  br i1 %v3_da5c, label %dec_label_pc_d9e8, label %dec_label_pc_da60

dec_label_pc_da60:                                ; preds = %.thread8, %dec_label_pc_da58, %bb315
  %v7_da60 = icmp eq i32 %v1_d9ec, 100
  %.384 = zext i1 %v7_da60 to i32
  store i32 %.384, i32* %r3.global-to-local, align 4
  %v2_da6c = icmp ugt i32 %v1_da00, 62
  store i1 %v2_da6c, i1* %cpsr_c.global-to-local, align 1
  %v7_da6c = icmp eq i32 %v1_da00, 63
  store i1 %v7_da6c, i1* %cpsr_z.global-to-local, align 1
  %v2_da70 = xor i1 %v2_da6c, true
  %v3_da70 = or i1 %v7_da6c, %v2_da70
  br i1 %v3_da70, label %.thread13, label %bb318

.thread13:                                        ; preds = %dec_label_pc_da60
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_da84

bb318:                                            ; preds = %dec_label_pc_da60
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_da74 = icmp eq i1 %v7_da60, false
  store i1 %v2_da74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_da74, label %dec_label_pc_da84, label %dec_label_pc_da7c

dec_label_pc_da7c:                                ; preds = %bb318
  %v2_da7c = icmp ugt i32 %v1_da00, 125
  store i1 %v2_da7c, i1* %cpsr_c.global-to-local, align 1
  %v7_da7c = icmp eq i32 %v1_da00, 126
  store i1 %v7_da7c, i1* %cpsr_z.global-to-local, align 1
  %v2_da80 = xor i1 %v2_da7c, true
  %v3_da80 = or i1 %v7_da7c, %v2_da80
  br i1 %v3_da80, label %dec_label_pc_d9e8, label %dec_label_pc_da84

dec_label_pc_da84:                                ; preds = %.thread13, %dec_label_pc_da7c, %bb318
  %v2_da84 = icmp ugt i32 %v1_d9ec, 168
  store i1 %v2_da84, i1* %cpsr_c.global-to-local, align 1
  %v7_da84 = icmp eq i32 %v1_d9ec, 169
  store i1 %v7_da84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_da84, label %bb319, label %dec_label_pc_da90

bb319:                                            ; preds = %dec_label_pc_da84
  %v3_da88 = icmp eq i32 %v1_da00, 255
  store i1 %v3_da88, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_da88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_da88, label %dec_label_pc_d9e8, label %dec_label_pc_da90

dec_label_pc_da90:                                ; preds = %dec_label_pc_da84, %bb319
  %v7_da90 = icmp eq i32 %v1_d9ec, 198
  %.385 = zext i1 %v7_da90 to i32
  store i32 %.385, i32* %r3.global-to-local, align 4
  %v2_da9c = icmp ugt i32 %v1_da00, 16
  store i1 %v2_da9c, i1* %cpsr_c.global-to-local, align 1
  %v7_da9c = icmp eq i32 %v1_da00, 17
  store i1 %v7_da9c, i1* %cpsr_z.global-to-local, align 1
  %v2_daa0 = xor i1 %v2_da9c, true
  %v3_daa0 = or i1 %v7_da9c, %v2_daa0
  br i1 %v3_daa0, label %.thread19, label %bb322

.thread19:                                        ; preds = %dec_label_pc_da90
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_dab4

bb322:                                            ; preds = %dec_label_pc_da90
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_daa4 = icmp eq i1 %v7_da90, false
  store i1 %v2_daa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_daa4, label %dec_label_pc_dab4, label %dec_label_pc_daac

dec_label_pc_daac:                                ; preds = %bb322
  %v2_daac = icmp ugt i32 %v1_da00, 18
  store i1 %v2_daac, i1* %cpsr_c.global-to-local, align 1
  %v7_daac = icmp eq i32 %v1_da00, 19
  store i1 %v7_daac, i1* %cpsr_z.global-to-local, align 1
  %v2_dab0 = xor i1 %v2_daac, true
  %v3_dab0 = or i1 %v7_daac, %v2_dab0
  br i1 %v3_dab0, label %dec_label_pc_d9e8, label %dec_label_pc_dab4

dec_label_pc_dab4:                                ; preds = %.thread19, %dec_label_pc_daac, %bb322
  %v2_dab4 = icmp ugt i32 %v1_d9ec, 222
  store i1 %v2_dab4, i1* %cpsr_c.global-to-local, align 1
  %v7_dab4 = icmp eq i32 %v1_d9ec, 223
  store i1 %v7_dab4, i1* %cpsr_z.global-to-local, align 1
  %v2_dab8 = xor i1 %v7_dab4, true
  %v3_dab8 = and i1 %v2_dab4, %v2_dab8
  br i1 %v3_dab8, label %dec_label_pc_d9e8, label %dec_label_pc_dabc

dec_label_pc_dabc:                                ; preds = %dec_label_pc_dab4
  %v1_dabc = add nsw i32 %v1_d9ec, -6
  store i32 %v1_dabc, i32* %r3.global-to-local, align 4
  %v2_dac0 = icmp ugt i32 %v1_d9ec, 10
  store i1 %v2_dac0, i1* %cpsr_c.global-to-local, align 1
  %v7_dac0 = icmp eq i32 %v1_d9ec, 11
  store i1 %v7_dac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dac0, label %dec_label_pc_d9e8, label %bb323

bb323:                                            ; preds = %dec_label_pc_dabc
  %v3_dac4 = icmp ne i32 %v1_dabc, 0
  store i1 %v3_dac4, i1* %cpsr_c.global-to-local, align 1
  %v8_dac4 = icmp eq i32 %v1_dabc, 1
  store i1 %v8_dac4, i1* %cpsr_z.global-to-local, align 1
  %v2_dac8 = xor i1 %v3_dac4, true
  %v3_dac8 = or i1 %v8_dac4, %v2_dac8
  br i1 %v3_dac8, label %dec_label_pc_d9e8, label %dec_label_pc_dacc

dec_label_pc_dacc:                                ; preds = %bb323
  %v2_dacc = icmp ugt i32 %v1_d9ec, 21
  store i1 %v2_dacc, i1* %cpsr_c.global-to-local, align 1
  %v7_dacc = icmp eq i32 %v1_d9ec, 22
  store i1 %v7_dacc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dacc, label %dec_label_pc_d9e8, label %bb324

bb324:                                            ; preds = %dec_label_pc_dacc
  %v3_dad0 = icmp ugt i32 %v1_d9ec, 20
  store i1 %v3_dad0, i1* %cpsr_c.global-to-local, align 1
  %v8_dad0 = icmp eq i32 %v1_d9ec, 21
  store i1 %v8_dad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_dad0, label %dec_label_pc_d9e8, label %dec_label_pc_dad8

dec_label_pc_dad8:                                ; preds = %bb324
  %v2_dad8 = icmp ugt i32 %v1_d9ec, 27
  store i1 %v2_dad8, i1* %cpsr_c.global-to-local, align 1
  %v7_dad8 = icmp eq i32 %v1_d9ec, 28
  store i1 %v7_dad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dad8, label %dec_label_pc_d9e8, label %bb325

bb325:                                            ; preds = %dec_label_pc_dad8
  %v3_dadc = icmp ugt i32 %v1_d9ec, 25
  store i1 %v3_dadc, i1* %cpsr_c.global-to-local, align 1
  %v8_dadc = icmp eq i32 %v1_d9ec, 26
  store i1 %v8_dadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_dadc, label %dec_label_pc_d9e8, label %dec_label_pc_dae4

dec_label_pc_dae4:                                ; preds = %bb325
  %v2_dae4 = icmp ugt i32 %v1_d9ec, 29
  store i1 %v2_dae4, i1* %cpsr_c.global-to-local, align 1
  %v7_dae4 = icmp eq i32 %v1_d9ec, 30
  store i1 %v7_dae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dae4, label %dec_label_pc_d9e8, label %bb326

bb326:                                            ; preds = %dec_label_pc_dae4
  %v3_dae8 = icmp ugt i32 %v1_d9ec, 28
  store i1 %v3_dae8, i1* %cpsr_c.global-to-local, align 1
  %v8_dae8 = icmp eq i32 %v1_d9ec, 29
  store i1 %v8_dae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_dae8, label %dec_label_pc_d9e8, label %dec_label_pc_daf0

dec_label_pc_daf0:                                ; preds = %bb326
  %v2_daf0 = icmp ugt i32 %v1_d9ec, 54
  store i1 %v2_daf0, i1* %cpsr_c.global-to-local, align 1
  %v7_daf0 = icmp eq i32 %v1_d9ec, 55
  store i1 %v7_daf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_daf0, label %dec_label_pc_d9e8, label %bb327

bb327:                                            ; preds = %dec_label_pc_daf0
  %v3_daf4 = icmp ugt i32 %v1_d9ec, 32
  store i1 %v3_daf4, i1* %cpsr_c.global-to-local, align 1
  %v8_daf4 = icmp eq i32 %v1_d9ec, 33
  store i1 %v8_daf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_daf4, label %dec_label_pc_d9e8, label %dec_label_pc_dafc

dec_label_pc_dafc:                                ; preds = %bb327
  %v2_dafc = icmp ugt i32 %v1_d9ec, 214
  store i1 %v2_dafc, i1* %cpsr_c.global-to-local, align 1
  %v7_dafc = icmp eq i32 %v1_d9ec, 215
  store i1 %v7_dafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dafc, label %.thread30, label %bb328

bb328:                                            ; preds = %dec_label_pc_dafc
  %v3_db00 = icmp ugt i32 %v1_d9ec, 213
  store i1 %v3_db00, i1* %cpsr_c.global-to-local, align 1
  %v8_db00 = icmp eq i32 %v1_d9ec, 214
  store i1 %v8_db00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_db00, label %bb329, label %dec_label_pc_db10

.thread30:                                        ; preds = %dec_label_pc_dafc
  br label %dec_label_pc_d9e8

bb329:                                            ; preds = %bb328
  br label %dec_label_pc_d9e8

dec_label_pc_db10:                                ; preds = %bb328
  store i32 0, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v5_db1c = call i32 @llvm.bswap.i32(i32 %v0_d9e8)
  store i32 %v5_db1c, i32* %r0.global-to-local, align 4
  %v1_db20 = call i32 @function_114bc(i32 %v5_db1c)
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v1_db20, i32* @global_var_1f0b0.205, align 4
  %v0_db30 = load i32, i32* @r4, align 4
  %v1_db30 = trunc i32 %v0_db30 to i16
  store i16 %v1_db30, i16* bitcast (i32* @global_var_1f0aa.206 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), i32* @r0, align 4
  %v3_db38 = call i32 @function_bd1c(i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), i32 20)
  %v4_db38 = trunc i32 %v3_db38 to i16
  store i32 %v3_db38, i32* %r0.global-to-local, align 4
  %v3_db3c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_db3c, i32* %r1.global-to-local, align 4
  %v5_db4c = sdiv i32 %v3_db3c, 10
  %v3_db50 = mul i32 %v5_db4c, 8
  store i32 %v3_db50, i32* %r2.global-to-local, align 4
  %v2_db58 = mul i32 %v5_db4c, 10
  store i32 %v2_db58, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), i32* %ip.global-to-local, align 4
  %v3_db60 = icmp uge i32 %v3_db3c, %v2_db58
  store i1 %v3_db60, i1* %cpsr_c.global-to-local, align 1
  %v9_db60 = icmp eq i32 %v3_db3c, %v2_db58
  store i1 %v9_db60, i1* %cpsr_z.global-to-local, align 1
  store i16 %v4_db38, i16* bitcast (i32* @global_var_1f0aa.206 to i16*), align 4
  br i1 %v9_db60, label %dec_label_pc_db6c, label %dec_label_pc_df00

dec_label_pc_db6c:                                ; preds = %dec_label_pc_db10
  store i32 2323, i32* %r0.global-to-local, align 4
  %v1_db74 = call i32 @function_114e0(i32 2323)
  store i32 %v1_db74, i32* %r0.global-to-local, align 4
  %extract.t487 = trunc i32 %v1_db74 to i16
  br label %dec_label_pc_db7c

dec_label_pc_db7c:                                ; preds = %dec_label_pc_df00, %dec_label_pc_db6c
  %v1_db74.sink.off0 = phi i16 [ %extract.t487, %dec_label_pc_db6c ], [ %extract.t488, %dec_label_pc_df00 ]
  store i16 %v1_db74.sink.off0, i16* @global_var_1f0b6.143, align 2
  %v3_db80 = load i32, i32* @global_var_1f0b0.205, align 4
  store i32 %v3_db80, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_db80, i32* @global_var_1f0b8.208, align 4
  store i16 0, i16* bitcast (i32* @global_var_1f0c4.209 to i16*), align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_db94 = call i32 @function_114e0(i32 20)
  store i32 %v1_db94, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), i32* %r0.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0b4.141 to i32), i32* @r1, align 4
  %v5_dba8 = call i32 @function_bd6c(i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), i32 ptrtoint (i32* @global_var_1f0b4.141 to i32), i32 %v1_db94, i32 20)
  %v6_dba8 = trunc i32 %v5_dba8 to i16
  store i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), i32* @r1, align 4
  %v2_dbc0 = load i32, i32* @global_var_1f660.134, align 4
  store i16 %v6_dba8, i16* bitcast (i32* @global_var_1f0c4.209 to i16*), align 4
  store i32 %v2_d9b8, i32* @lr, align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v3_dbdc = load i16, i16* @global_var_1f0b6.143, align 2
  %v4_dbdc = zext i16 %v3_dbdc to i32
  store i32 %v4_dbdc, i32* %ip.global-to-local, align 4
  store i32 %v2_dbc0, i32* @r0, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* @r2, align 4
  %v0_dbf4 = call i32 @function_1172c()
  store i32 %v0_dbf4, i32* %r0.global-to-local, align 4
  %v3_dbf8 = load i32, i32* %stack_var_-52, align 4
  %v1_dbfc = add i32 %v3_dbf8, 1
  store i32 %v1_dbfc, i32* %r3.global-to-local, align 4
  %v3_dc00 = icmp ugt i32 %v1_dbfc, 383
  store i1 %v3_dc00, i1* %cpsr_c.global-to-local, align 1
  %v8_dc00 = icmp eq i32 %v1_dbfc, 384
  store i1 %v8_dc00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dbfc, i32* %stack_var_-52, align 4
  %v5_dc08 = icmp slt i32 %v1_dbfc, 384
  br i1 %v5_dc08, label %dec_label_pc_d9bc, label %dec_label_pc_dc0c

dec_label_pc_dc0c:                                ; preds = %dec_label_pc_db7c
  %v0_dc0c = load i32, i32* @r5, align 4
  store i32 %v0_dc0c, i32* @sb, align 4
  br label %dec_label_pc_dc10

dec_label_pc_dc10:                                ; preds = %dec_label_pc_d9a0, %dec_label_pc_dc0c
  store i32 %stack_var_-1880.0, i32* @lr, align 4
  store i32 0, i32* @r6, align 4
  %v1_dc18 = add i32 %stack_var_-1880.0, 20
  store i32 %v1_dc18, i32* @r5, align 4
  %v1_dc84 = add i32 %stack_var_-1880.0, 16
  %v2_dc84 = inttoptr i32 %v1_dc84 to i32*
  %v1_dc98 = add i32 %stack_var_-1880.0, 9
  %v2_dc98 = inttoptr i32 %v1_dc98 to i8*
  %v4_dcd4 = sext i16 %stack_var_-1876.0 to i32
  %v1_dd18 = add i32 %stack_var_-1880.0, 12
  %v2_dd18 = inttoptr i32 %v1_dd18 to i32*
  br label %dec_label_pc_dc1c

dec_label_pc_dc1c:                                ; preds = %dec_label_pc_dd04, %dec_label_pc_dcfc, %dec_label_pc_dcf4, %dec_label_pc_dcd0, %dec_label_pc_dcb8, %dec_label_pc_dc94, %dec_label_pc_dc7c, %dec_label_pc_dcec, %dec_label_pc_dce0, %dec_label_pc_dc74, %dec_label_pc_dd94, %dec_label_pc_dc10
  %v0_dc1c = call i32 @function_fb60()
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_dc24 = inttoptr i32 %v0_dc1c to i32*
  store i32 0, i32* %v2_dc24, align 4
  %v2_dc30 = load i32, i32* @global_var_1f660.134, align 4
  store i32 %v2_dc30, i32* @r0, align 4
  store i32 1514, i32* @r2, align 4
  store i32 %stack_var_-1880.0, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_dc48 = call i32 @function_116c0()
  store i32 %v0_dc48, i32* %r0.global-to-local, align 4
  store i32 %v0_dc48, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dc4c = icmp eq i32 %v0_dc48, 0
  store i1 %v2_dc4c, i1* %cpsr_z.global-to-local, align 1
  %tmp330 = icmp slt i32 %v0_dc48, 1
  br i1 %tmp330, label %dec_label_pc_ddbc, label %dec_label_pc_dc54

dec_label_pc_dc54:                                ; preds = %dec_label_pc_dc1c
  %v0_dc54 = call i32 @function_fb60()
  store i32 %v0_dc54, i32* %r0.global-to-local, align 4
  %v1_dc58 = inttoptr i32 %v0_dc54 to i32*
  %v2_dc58 = load i32, i32* %v1_dc58, align 4
  store i32 %v2_dc58, i32* %r3.global-to-local, align 4
  %v2_dc5c = icmp ugt i32 %v2_dc58, 10
  store i1 %v2_dc5c, i1* %cpsr_c.global-to-local, align 1
  %v7_dc5c = icmp eq i32 %v2_dc58, 11
  store i1 %v7_dc5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dc5c, label %dec_label_pc_ddbc, label %dec_label_pc_dc64

dec_label_pc_dc64:                                ; preds = %dec_label_pc_dc54
  %v0_dc64 = call i32 @function_fb60()
  store i32 %v0_dc64, i32* %r0.global-to-local, align 4
  %v1_dc68 = inttoptr i32 %v0_dc64 to i32*
  %v2_dc68 = load i32, i32* %v1_dc68, align 4
  store i32 %v2_dc68, i32* %r3.global-to-local, align 4
  %v2_dc6c = icmp ugt i32 %v2_dc68, 10
  store i1 %v2_dc6c, i1* %cpsr_c.global-to-local, align 1
  %v7_dc6c = icmp eq i32 %v2_dc68, 11
  store i1 %v7_dc6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dc6c, label %dec_label_pc_ddbc, label %dec_label_pc_dc74

dec_label_pc_dc74:                                ; preds = %dec_label_pc_dc64
  %v0_dc74 = load i32, i32* @r4, align 4
  %v2_dc74 = icmp ugt i32 %v0_dc74, 38
  store i1 %v2_dc74, i1* %cpsr_c.global-to-local, align 1
  %v7_dc74 = icmp eq i32 %v0_dc74, 39
  store i1 %v7_dc74, i1* %cpsr_z.global-to-local, align 1
  %v2_dc78 = xor i1 %v2_dc74, true
  %v3_dc78 = or i1 %v7_dc74, %v2_dc78
  br i1 %v3_dc78, label %dec_label_pc_dc1c, label %dec_label_pc_dc7c

dec_label_pc_dc7c:                                ; preds = %dec_label_pc_dc74
  store i32 %stack_var_-1880.0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f644.44 to i32), i32* %ip.global-to-local, align 4
  %v3_dc84 = load i32, i32* %v2_dc84, align 4
  store i32 %v3_dc84, i32* %r2.global-to-local, align 4
  %v2_dc88 = load i32, i32* @global_var_1f644.44, align 4
  store i32 %v2_dc88, i32* %r3.global-to-local, align 4
  %v3_dc8c = icmp uge i32 %v3_dc84, %v2_dc88
  store i1 %v3_dc8c, i1* %cpsr_c.global-to-local, align 1
  %v9_dc8c = icmp eq i32 %v3_dc84, %v2_dc88
  store i1 %v9_dc8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc8c, label %dec_label_pc_dc94, label %dec_label_pc_dc1c

dec_label_pc_dc94:                                ; preds = %dec_label_pc_dc7c
  store i32 %stack_var_-1880.0, i32* @lr, align 4
  %v3_dc98 = load i8, i8* %v2_dc98, align 1
  %v4_dc98 = zext i8 %v3_dc98 to i32
  store i32 %v4_dc98, i32* %r3.global-to-local, align 4
  %v2_dc9c = icmp ugt i8 %v3_dc98, 5
  store i1 %v2_dc9c, i1* %cpsr_c.global-to-local, align 1
  %v7_dc9c = icmp eq i8 %v3_dc98, 6
  store i1 %v7_dc9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dc9c, label %dec_label_pc_dca4, label %dec_label_pc_dc1c

dec_label_pc_dca4:                                ; preds = %dec_label_pc_dc94
  store i32 23, i32* %r0.global-to-local, align 4
  %v0_dca8 = load i32, i32* @r5, align 4
  %v1_dca8 = inttoptr i32 %v0_dca8 to i16*
  %v2_dca8 = load i16, i16* %v1_dca8, align 2
  %v3_dca8 = zext i16 %v2_dca8 to i32
  store i32 %v3_dca8, i32* @r4, align 4
  %v1_dcac = call i32 @function_114e0(i32 23)
  store i32 %v1_dcac, i32* %r0.global-to-local, align 4
  %v0_dcb0 = load i32, i32* @r4, align 4
  %v3_dcb0 = icmp uge i32 %v0_dcb0, %v1_dcac
  store i1 %v3_dcb0, i1* %cpsr_c.global-to-local, align 1
  %v9_dcb0 = icmp eq i32 %v0_dcb0, %v1_dcac
  store i1 %v9_dcb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dcb0, label %dec_label_pc_dcd0, label %dec_label_pc_dcb8

dec_label_pc_dcb8:                                ; preds = %dec_label_pc_dca4
  store i32 2323, i32* %r0.global-to-local, align 4
  %v0_dcc0 = load i32, i32* @r5, align 4
  %v1_dcc0 = inttoptr i32 %v0_dcc0 to i16*
  %v2_dcc0 = load i16, i16* %v1_dcc0, align 2
  %v3_dcc0 = zext i16 %v2_dcc0 to i32
  store i32 %v3_dcc0, i32* @r4, align 4
  %v1_dcc4 = call i32 @function_114e0(i32 2323)
  store i32 %v1_dcc4, i32* %r0.global-to-local, align 4
  %v0_dcc8 = load i32, i32* @r4, align 4
  %v3_dcc8 = icmp uge i32 %v0_dcc8, %v1_dcc4
  store i1 %v3_dcc8, i1* %cpsr_c.global-to-local, align 1
  %v9_dcc8 = icmp eq i32 %v0_dcc8, %v1_dcc4
  store i1 %v9_dcc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dcc8, label %dec_label_pc_dcd0, label %dec_label_pc_dc1c

dec_label_pc_dcd0:                                ; preds = %dec_label_pc_dcb8, %dec_label_pc_dca4
  %v0_dcd0 = load i32, i32* @r5, align 4
  %v1_dcd0 = add i32 %v0_dcd0, 2
  %v2_dcd0 = inttoptr i32 %v1_dcd0 to i16*
  %v3_dcd0 = load i16, i16* %v2_dcd0, align 2
  %v4_dcd0 = zext i16 %v3_dcd0 to i32
  store i32 %v4_dcd0, i32* %r3.global-to-local, align 4
  store i32 %v4_dcd4, i32* %r0.global-to-local, align 4
  %v3_dcd8 = icmp uge i32 %v4_dcd0, %v4_dcd4
  store i1 %v3_dcd8, i1* %cpsr_c.global-to-local, align 1
  %v9_dcd8 = icmp eq i32 %v4_dcd0, %v4_dcd4
  store i1 %v9_dcd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dcd8, label %dec_label_pc_dce0, label %dec_label_pc_dc1c

dec_label_pc_dce0:                                ; preds = %dec_label_pc_dcd0
  %v1_dce0 = add i32 %v0_dcd0, 13
  %v2_dce0 = inttoptr i32 %v1_dce0 to i8*
  %v3_dce0 = load i8, i8* %v2_dce0, align 1
  %v4_dce0 = zext i8 %v3_dce0 to i32
  store i32 %v4_dce0, i32* %r3.global-to-local, align 4
  %v1_dce4 = and i32 %v4_dce0, 2
  %v2_dce4 = icmp eq i32 %v1_dce4, 0
  store i1 %v2_dce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dce4, label %dec_label_pc_dc1c, label %dec_label_pc_dcec

dec_label_pc_dcec:                                ; preds = %dec_label_pc_dce0
  %v1_dcec = and i32 %v4_dce0, 16
  %v2_dcec = icmp eq i32 %v1_dcec, 0
  store i1 %v2_dcec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dcec, label %dec_label_pc_dc1c, label %dec_label_pc_dcf4

dec_label_pc_dcf4:                                ; preds = %dec_label_pc_dcec
  %v1_dcf4 = and i32 %v4_dce0, 4
  %v2_dcf4 = icmp eq i32 %v1_dcf4, 0
  store i1 %v2_dcf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dcf4, label %dec_label_pc_dcfc, label %dec_label_pc_dc1c

dec_label_pc_dcfc:                                ; preds = %dec_label_pc_dcf4
  %tmp489 = urem i8 %v3_dce0, 2
  %v2_dcfc = icmp eq i8 %tmp489, 0
  store i1 %v2_dcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dcfc, label %dec_label_pc_dd04, label %dec_label_pc_dc1c

dec_label_pc_dd04:                                ; preds = %dec_label_pc_dcfc
  %v1_dd04 = add i32 %v0_dcd0, 8
  %v2_dd04 = inttoptr i32 %v1_dd04 to i32*
  %v3_dd04 = load i32, i32* %v2_dd04, align 4
  store i32 %v3_dd04, i32* %r0.global-to-local, align 4
  %v1_dd08 = call i32 @function_11664(i32 %v3_dd04)
  %v1_dd0c = add i32 %v1_dd08, -1
  store i32 %v1_dd0c, i32* %r0.global-to-local, align 4
  %v1_dd10 = call i32 @function_114bc(i32 %v1_dd0c)
  store i32 %v1_dd10, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  %v3_dd18 = load i32, i32* %v2_dd18, align 4
  store i32 %v3_dd18, i32* %ip.global-to-local, align 4
  %v3_dd1c = icmp uge i32 %v1_dd10, %v3_dd18
  store i1 %v3_dd1c, i1* %cpsr_c.global-to-local, align 1
  %v9_dd1c = icmp eq i32 %v1_dd10, %v3_dd18
  store i1 %v9_dd1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dd1c, label %dec_label_pc_dd24, label %dec_label_pc_dc1c

dec_label_pc_dd24:                                ; preds = %dec_label_pc_dd04
  %v0_dd24 = load i32, i32* @r6, align 4
  %v2_dd24 = icmp ugt i32 %v0_dd24, 254
  store i1 %v2_dd24, i1* %cpsr_c.global-to-local, align 1
  %v7_dd24 = icmp eq i32 %v0_dd24, 255
  store i1 %v7_dd24, i1* %cpsr_z.global-to-local, align 1
  %v8_dd28 = icmp sgt i32 %v0_dd24, 255
  br i1 %v8_dd28, label %dec_label_pc_ddbc, label %dec_label_pc_dd2c

dec_label_pc_dd2c:                                ; preds = %dec_label_pc_dd24
  %v2_dd34 = load i32, i32* @global_var_1f65c.132, align 4
  store i32 %v2_dd34, i32* %r1.global-to-local, align 4
  %v3_dd38 = mul i32 %v0_dd24, 256
  store i32 %v3_dd38, i32* %r2.global-to-local, align 4
  %v2_dd3c = mul i32 %v0_dd24, 288
  store i32 %v2_dd3c, i32* %r3.global-to-local, align 4
  %v2_dd40 = add i32 %v2_dd34, %v2_dd3c
  store i32 %v2_dd40, i32* @r0, align 4
  %v1_dd44 = add i32 %v2_dd40, 12
  %v2_dd44 = inttoptr i32 %v1_dd44 to i32*
  %v3_dd44 = load i32, i32* %v2_dd44, align 4
  store i32 %v3_dd44, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dd48 = icmp eq i32 %v3_dd44, 0
  store i1 %v2_dd48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dd48, label %dec_label_pc_dd8c, label %dec_label_pc_dd68.preheader

dec_label_pc_dd68.preheader:                      ; preds = %dec_label_pc_dd2c
  %v2_dd4c = add i32 %v0_dd24, 1
  %v2_dd54 = and i32 %v2_dd4c, 134217728
  %v3_dd54 = icmp ne i32 %v2_dd54, 0
  store i1 %v3_dd54, i1* %cpsr_c.global-to-local, align 1
  %v3_dd58 = mul i32 %v2_dd4c, 288
  %v3_dd5c = add i32 %v2_dd34, %v3_dd58
  store i32 %v3_dd5c, i32* %r3.global-to-local, align 4
  store i32 %v0_dd24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dd68

dec_label_pc_dd68:                                ; preds = %dec_label_pc_dd68.preheader, %dec_label_pc_dd74
  %v0_dd74 = phi i32 [ %v3_dd5c, %dec_label_pc_dd68.preheader ], [ %v1_dd80, %dec_label_pc_dd74 ]
  %v0_dd68 = phi i32 [ %v0_dd24, %dec_label_pc_dd68.preheader ], [ %v1_dd68, %dec_label_pc_dd74 ]
  %v1_dd68 = add i32 %v0_dd68, 1
  store i32 %v1_dd68, i32* %r2.global-to-local, align 4
  %v7_dd6c = icmp eq i32 %v1_dd68, 256
  br i1 %v7_dd6c, label %dec_label_pc_ddbc.loopexit, label %dec_label_pc_dd74

dec_label_pc_dd74:                                ; preds = %dec_label_pc_dd68
  store i32 %v0_dd74, i32* @r0, align 4
  %v1_dd78 = add i32 %v0_dd74, 12
  %v2_dd78 = inttoptr i32 %v1_dd78 to i32*
  %v3_dd78 = load i32, i32* %v2_dd78, align 4
  %v2_dd7c = icmp eq i32 %v3_dd78, 0
  %v1_dd80 = add i32 %v0_dd74, 288
  store i32 %v1_dd80, i32* %r3.global-to-local, align 4
  br i1 %v2_dd7c, label %dec_label_pc_dd88, label %dec_label_pc_dd68

dec_label_pc_dd88:                                ; preds = %dec_label_pc_dd74
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dd68, i32* @r6, align 4
  br label %dec_label_pc_dd8c

dec_label_pc_dd8c:                                ; preds = %dec_label_pc_dd2c, %dec_label_pc_dd88
  %v1_dd98 = phi i32 [ %v2_dd40, %dec_label_pc_dd2c ], [ %v0_dd74, %dec_label_pc_dd88 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dd8c = icmp eq i32 %v1_dd98, 0
  store i1 %v2_dd8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dd8c, label %dec_label_pc_ddbc, label %dec_label_pc_dd94

dec_label_pc_dd94:                                ; preds = %dec_label_pc_dd8c
  %v0_dd94 = load i32, i32* @r5, align 4
  %v1_dd94 = inttoptr i32 %v0_dd94 to i16*
  %v2_dd94 = load i16, i16* %v1_dd94, align 2
  %v3_dd94 = zext i16 %v2_dd94 to i32
  store i32 %v3_dd94, i32* %r3.global-to-local, align 4
  %v2_dd98 = add i32 %v1_dd98, 16
  %v3_dd98 = inttoptr i32 %v2_dd98 to i32*
  store i32 %v1_dd10, i32* %v3_dd98, align 4
  %v0_dd9c = load i32, i32* %r3.global-to-local, align 4
  %v1_dd9c = trunc i32 %v0_dd9c to i16
  %v2_dd9c = load i32, i32* @r0, align 4
  %v3_dd9c = add i32 %v2_dd9c, 20
  %v4_dd9c = inttoptr i32 %v3_dd9c to i16*
  store i16 %v1_dd9c, i16* %v4_dd9c, align 2
  %v0_dda0 = call i32 @function_d368()
  store i32 %v0_dda0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dc1c

dec_label_pc_dda8:                                ; preds = %dec_label_pc_d684
  store i32 ptrtoint (i32* @global_var_1f660.134 to i32), i32* %ip.global-to-local, align 4
  %v2_ddac = load i32, i32* @global_var_1f660.134, align 4
  store i32 %v2_ddac, i32* %r0.global-to-local, align 4
  %v1_ddb0 = call i32 @function_12714(i32 %v2_ddac)
  store i32 %v1_ddb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ddb4

dec_label_pc_ddb4:                                ; preds = %dec_label_pc_d660, %dec_label_pc_dda8
  %v0_ddb4 = load i32, i32* @r5, align 4
  store i32 %v0_ddb4, i32* %r0.global-to-local, align 4
  %v1_ddb8 = call i32 @function_fb78(i32 %v0_ddb4)
  store i32 %v1_ddb8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ddbc

dec_label_pc_ddbc.loopexit:                       ; preds = %dec_label_pc_dd68
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ddbc

dec_label_pc_ddbc:                                ; preds = %dec_label_pc_dd8c, %dec_label_pc_dd24, %dec_label_pc_dc64, %dec_label_pc_dc54, %dec_label_pc_dc1c, %dec_label_pc_ddbc.loopexit, %dec_label_pc_ddb4
  %stack_var_-1880.1 = phi i32 [ %tmp275, %dec_label_pc_ddb4 ], [ %stack_var_-1880.0, %dec_label_pc_ddbc.loopexit ], [ %stack_var_-1880.0, %dec_label_pc_dc1c ], [ %stack_var_-1880.0, %dec_label_pc_dc54 ], [ %stack_var_-1880.0, %dec_label_pc_dc64 ], [ %stack_var_-1880.0, %dec_label_pc_dd24 ], [ %stack_var_-1880.0, %dec_label_pc_dd8c ]
  %stack_var_-1876.1 = phi i16 [ %tmp303, %dec_label_pc_ddb4 ], [ %stack_var_-1876.0, %dec_label_pc_ddbc.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_dc1c ], [ %stack_var_-1876.0, %dec_label_pc_dc54 ], [ %stack_var_-1876.0, %dec_label_pc_dc64 ], [ %stack_var_-1876.0, %dec_label_pc_dd24 ], [ %stack_var_-1876.0, %dec_label_pc_dd8c ]
  store i32 0, i32* %stack_var_-224, align 4
  store i32 1668, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ddd8442 = load i32, i32* %sp.global-to-local, align 4
  %v3_ddd8443 = add i32 %v2_ddd8442, 1668
  %v4_ddd8444 = inttoptr i32 %v3_ddd8443 to i32*
  store i32 0, i32* %v4_ddd8444, align 4
  br label %dec_label_pc_ddc8.dec_label_pc_ddc8_crit_edge

dec_label_pc_ddc8.dec_label_pc_ddc8_crit_edge:    ; preds = %dec_label_pc_ddbc, %dec_label_pc_ddc8.dec_label_pc_ddc8_crit_edge
  %v0_ddc8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ddc8 = add i32 %v0_ddc8.pre, 1664
  store i32 %v1_ddc8, i32* %ip.global-to-local, align 4
  %v1_ddcc = add i32 %v0_ddc8.pre, 4
  store i32 %v1_ddcc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_ddd4 = icmp eq i32 %v1_ddcc, 128
  %v2_ddd8 = load i32, i32* %sp.global-to-local, align 4
  %v3_ddd8 = add i32 %v2_ddd8, %v1_ddc8
  %v4_ddd8 = inttoptr i32 %v3_ddd8 to i32*
  store i32 0, i32* %v4_ddd8, align 4
  br i1 %v7_ddd4, label %dec_label_pc_dde0, label %dec_label_pc_ddc8.dec_label_pc_ddc8_crit_edge

dec_label_pc_dde0:                                ; preds = %dec_label_pc_ddc8.dec_label_pc_ddc8_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_dde0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_dde0, i32* %stack_var_-352, align 4
  %v1_dde8436 = add i32 %v0_dde0, 1540
  store i32 %v1_dde8436, i32* @lr, align 4
  %v1_ddec437 = add i32 %v0_dde0, 8
  store i32 %v1_ddec437, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_ddf4438 = icmp eq i32 %v1_ddec437, 128
  %v2_ddf8439 = load i32, i32* %sp.global-to-local, align 4
  %v3_ddf8440 = add i32 %v2_ddf8439, %v1_dde8436
  %v4_ddf8441 = inttoptr i32 %v3_ddf8440 to i32*
  store i32 0, i32* %v4_ddf8441, align 4
  br i1 %v7_ddf4438, label %dec_label_pc_de00, label %dec_label_pc_dde8.dec_label_pc_dde8_crit_edge

dec_label_pc_dde8.dec_label_pc_dde8_crit_edge:    ; preds = %dec_label_pc_dde0, %dec_label_pc_dde8.dec_label_pc_dde8_crit_edge
  %v0_dde8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_dde8 = add i32 %v0_dde8.pre, 1536
  store i32 %v1_dde8, i32* @lr, align 4
  %v1_ddec = add i32 %v0_dde8.pre, 4
  store i32 %v1_ddec, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_ddf4 = icmp eq i32 %v1_ddec, 128
  %v2_ddf8 = load i32, i32* %sp.global-to-local, align 4
  %v3_ddf8 = add i32 %v2_ddf8, %v1_dde8
  %v4_ddf8 = inttoptr i32 %v3_ddf8 to i32*
  store i32 0, i32* %v4_ddf8, align 4
  br i1 %v7_ddf4, label %dec_label_pc_de00, label %dec_label_pc_dde8.dec_label_pc_dde8_crit_edge

dec_label_pc_de00:                                ; preds = %dec_label_pc_dde8.dec_label_pc_dde8_crit_edge, %dec_label_pc_dde0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_de00 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_de00, i32* @r6, align 4
  store i32 %v0_de00, i32* @r5, align 4
  store i32 %v0_de00, i32* %stack_var_-52, align 4
  %v2_eb6c = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_de60

dec_label_pc_de10:                                ; preds = %dec_label_pc_de90
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_de7c, i1* %cpsr_z.global-to-local, align 1
  %v1_eb5c = add i32 %v2_de74, 4
  %v2_eb5c = inttoptr i32 %v1_eb5c to i32*
  %v3_eb5c = load i32, i32* %v2_eb5c, align 4
  br i1 %v7_de7c, label %dec_label_pc_eb5c, label %dec_label_pc_de18

dec_label_pc_de18:                                ; preds = %dec_label_pc_de10
  store i32 %v3_eb5c, i32* %ip.global-to-local, align 4
  %v3_de20 = udiv i32 %v3_eb5c, 32
  store i32 %v2_eb6c, i32* %r0.global-to-local, align 4
  %v3_de28 = mul nuw nsw i32 %v3_de20, 4
  %v2_de2c = add i32 %v3_de28, %v2_eb6c
  store i32 %v2_de2c, i32* %r3.global-to-local, align 4
  %v1_de30 = add i32 %v2_de2c, -184
  %v2_de30 = inttoptr i32 %v1_de30 to i32*
  %v3_de30 = load i32, i32* %v2_de30, align 4
  %v1_de34 = urem i32 %v3_eb5c, 32
  store i32 %v1_de34, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_de3c = shl i32 1, %v1_de34
  %v8_de3c = or i32 %v3_de30, %v7_de3c
  store i32 %v8_de3c, i32* %r2.global-to-local, align 4
  store i32 %v8_de3c, i32* %v2_de30, align 4
  %v0_de44 = load i32, i32* @r6, align 4
  %v1_de44 = load i32, i32* %ip.global-to-local, align 4
  %v3_de44 = icmp uge i32 %v0_de44, %v1_de44
  store i1 %v3_de44, i1* %cpsr_c.global-to-local, align 1
  %v9_de44 = icmp eq i32 %v0_de44, %v1_de44
  store i1 %v9_de44, i1* %cpsr_z.global-to-local, align 1
  %v5_de48 = icmp slt i32 %v0_de44, %v1_de44
  br i1 %v5_de48, label %bb331, label %bb332

bb331:                                            ; preds = %dec_label_pc_de18
  store i32 %v1_de44, i32* @r6, align 4
  br label %bb332

bb332:                                            ; preds = %.thread44, %bb338, %bb336, %bb382, %dec_label_pc_def4, %dec_label_pc_de18, %bb331
  %v3_de4c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_de4c, i32* %r3.global-to-local, align 4
  %v1_de50 = add i32 %v3_de4c, 1
  store i32 %v1_de50, i32* %r2.global-to-local, align 4
  %v2_de54 = icmp ugt i32 %v1_de50, 254
  store i1 %v2_de54, i1* %cpsr_c.global-to-local, align 1
  %v7_de54 = icmp eq i32 %v1_de50, 255
  store i1 %v7_de54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_de50, i32* %stack_var_-52, align 4
  %v8_de5c = icmp sgt i32 %v1_de50, 255
  br i1 %v8_de5c, label %dec_label_pc_df10, label %dec_label_pc_de60

dec_label_pc_de60:                                ; preds = %bb332, %dec_label_pc_de00
  %v0_de6c = phi i32 [ %v1_de50, %bb332 ], [ %v0_de00, %dec_label_pc_de00 ]
  store i32 ptrtoint (i32* @global_var_1f65c.132 to i32), i32* %r0.global-to-local, align 4
  %v3_de64 = mul i32 %v0_de6c, 256
  store i32 %v3_de64, i32* %r3.global-to-local, align 4
  %v2_de68 = load i32, i32* @global_var_1f65c.132, align 4
  store i32 %v2_de68, i32* %r1.global-to-local, align 4
  %v2_de70 = mul i32 %v0_de6c, 288
  store i32 %v2_de70, i32* %r2.global-to-local, align 4
  %v2_de74 = add i32 %v2_de68, %v2_de70
  store i32 %v2_de74, i32* @r4, align 4
  %v1_de78 = add i32 %v2_de74, 12
  %v2_de78 = inttoptr i32 %v1_de78 to i32*
  %v3_de78 = load i32, i32* %v2_de78, align 4
  store i32 %v3_de78, i32* %ip.global-to-local, align 4
  %v2_de7c = icmp ne i32 %v3_de78, 0
  store i1 %v2_de7c, i1* %cpsr_c.global-to-local, align 1
  %v7_de7c = icmp eq i32 %v3_de78, 1
  store i1 %v7_de7c, i1* %cpsr_z.global-to-local, align 1
  %v2_de80 = xor i1 %v2_de7c, true
  %v3_de80 = or i1 %v7_de7c, %v2_de80
  br i1 %v3_de80, label %bb333, label %bb334

bb333:                                            ; preds = %dec_label_pc_de60
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb334

bb334:                                            ; preds = %dec_label_pc_de60, %bb333
  %v1_dea0143 = phi i32 [ %v2_de68, %dec_label_pc_de60 ], [ 5, %bb333 ]
  %v2_de84 = xor i1 %v7_de7c, true
  %v3_de84 = and i1 %v2_de7c, %v2_de84
  br i1 %v3_de84, label %bb335, label %bb336

bb335:                                            ; preds = %bb334
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb336

bb336:                                            ; preds = %bb334, %bb335
  %v1_dea0 = phi i32 [ %v1_dea0143, %bb334 ], [ 30, %bb335 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_de88 = icmp eq i32 %v3_de78, 0
  store i1 %v2_de88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_de88, label %bb332, label %dec_label_pc_de90

dec_label_pc_de90:                                ; preds = %bb336
  store i32 ptrtoint (i32* @global_var_1f0d0.121 to i32), i32* %r2.global-to-local, align 4
  %v2_de94 = load i32, i32* @global_var_1f0d0.121, align 4
  store i32 %v2_de94, i32* %r3.global-to-local, align 4
  %v1_de98 = add i32 %v2_de74, 8
  %v2_de98 = inttoptr i32 %v1_de98 to i32*
  %v3_de98 = load i32, i32* %v2_de98, align 4
  store i32 %v3_de98, i32* %r2.global-to-local, align 4
  %v2_de9c = sub i32 %v2_de94, %v3_de98
  store i32 %v2_de9c, i32* %r3.global-to-local, align 4
  %v3_dea0 = icmp uge i32 %v2_de9c, %v1_dea0
  store i1 %v3_dea0, i1* %cpsr_c.global-to-local, align 1
  %v9_dea0 = icmp eq i32 %v2_de9c, %v1_dea0
  store i1 %v9_dea0, i1* %cpsr_z.global-to-local, align 1
  %v2_dea4 = xor i1 %v3_dea0, true
  %v3_dea4 = or i1 %v9_dea0, %v2_dea4
  br i1 %v3_dea4, label %dec_label_pc_de10, label %dec_label_pc_dea8

dec_label_pc_dea8:                                ; preds = %dec_label_pc_de90
  %v1_dea8 = add i32 %v2_de74, 4
  %v2_dea8 = inttoptr i32 %v1_dea8 to i32*
  %v3_dea8 = load i32, i32* %v2_dea8, align 4
  store i32 %v3_dea8, i32* %r0.global-to-local, align 4
  %v1_deac = call i32 @function_12714(i32 %v3_dea8)
  store i32 %v1_deac, i32* %r0.global-to-local, align 4
  %v0_deb0 = load i32, i32* @r4, align 4
  %v1_deb0 = add i32 %v0_deb0, 12
  %v2_deb0 = inttoptr i32 %v1_deb0 to i32*
  %v3_deb0 = load i32, i32* %v2_deb0, align 4
  store i32 %v3_deb0, i32* %r3.global-to-local, align 4
  %v2_deb4 = icmp ugt i32 %v3_deb0, 1
  store i1 %v2_deb4, i1* %cpsr_c.global-to-local, align 1
  %v7_deb4 = icmp eq i32 %v3_deb0, 2
  store i1 %v7_deb4, i1* %cpsr_z.global-to-local, align 1
  %v2_deb8 = xor i1 %v2_deb4, true
  %v3_deb8 = or i1 %v7_deb4, %v2_deb8
  br i1 %v3_deb8, label %bb337, label %.thread239

.thread239:                                       ; preds = %dec_label_pc_dea8
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_dec0236240 = add i32 %v0_deb0, 4
  %v3_dec0237241 = inttoptr i32 %v2_dec0236240 to i32*
  store i32 -1, i32* %v3_dec0237241, align 4
  br label %bb338

bb337:                                            ; preds = %dec_label_pc_dea8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_dec0233 = add i32 %v0_deb0, 4
  %v3_dec0234 = inttoptr i32 %v2_dec0233 to i32*
  store i32 -1, i32* %v3_dec0234, align 4
  %v4_dec4 = load i32, i32* %r3.global-to-local, align 4
  %v5_dec4 = load i32, i32* @r4, align 4
  %v6_dec4 = add i32 %v5_dec4, 12
  %v7_dec4 = inttoptr i32 %v6_dec4 to i32*
  store i32 %v4_dec4, i32* %v7_dec4, align 4
  %v4_dec8 = load i32, i32* %r3.global-to-local, align 4
  %v5_dec8 = trunc i32 %v4_dec8 to i8
  %v6_dec8 = load i32, i32* @r4, align 4
  %v7_dec8 = add i32 %v6_dec8, 284
  %v8_dec8 = inttoptr i32 %v7_dec8 to i8*
  store i8 %v5_dec8, i8* %v8_dec8, align 1
  %v0_decc.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_decc.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb338

bb338:                                            ; preds = %.thread239, %bb337
  %v1_decc = phi i1 [ %v1_decc.pre, %bb337 ], [ %v2_deb4, %.thread239 ]
  %v0_decc = phi i1 [ %v0_decc.pre, %bb337 ], [ false, %.thread239 ]
  %v2_decc = xor i1 %v1_decc, true
  %v3_decc = or i1 %v0_decc, %v2_decc
  br i1 %v3_decc, label %bb332, label %dec_label_pc_ded0

dec_label_pc_ded0:                                ; preds = %bb338
  %v0_ded0 = load i32, i32* @r4, align 4
  %v1_ded0 = add i32 %v0_ded0, 284
  %v2_ded0 = inttoptr i32 %v1_ded0 to i8*
  %v3_ded0 = load i8, i8* %v2_ded0, align 1
  %v4_ded0 = zext i8 %v3_ded0 to i32
  %v1_ded4 = add nuw nsw i32 %v4_ded0, 1
  %v1_ded8 = urem i32 %v1_ded4, 256
  store i32 %v1_ded8, i32* %r3.global-to-local, align 4
  %v2_dedc = icmp ugt i32 %v1_ded8, 9
  store i1 %v2_dedc, i1* %cpsr_c.global-to-local, align 1
  %v7_dedc = icmp eq i32 %v1_ded8, 10
  store i1 %v7_dedc, i1* %cpsr_z.global-to-local, align 1
  %v1_dee0 = trunc i32 %v1_ded4 to i8
  store i8 %v1_dee0, i8* %v2_ded0, align 1
  %v0_dee4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dee4, label %.thread44, label %dec_label_pc_def4

.thread44:                                        ; preds = %dec_label_pc_ded0
  %v1_dee4 = load i32, i32* %r3.global-to-local, align 4
  %v2_dee4 = add i32 %v1_dee4, -10
  store i32 %v2_dee4, i32* %r3.global-to-local, align 4
  %v2_dee8 = load i32, i32* @r4, align 4
  %v3_dee8 = add i32 %v2_dee8, 12
  %v4_dee8 = inttoptr i32 %v3_dee8 to i32*
  store i32 %v2_dee4, i32* %v4_dee8, align 4
  %v1_deec = load i32, i32* %r3.global-to-local, align 4
  %v2_deec = trunc i32 %v1_deec to i8
  %v3_deec = load i32, i32* @r4, align 4
  %v4_deec = add i32 %v3_deec, 284
  %v5_deec = inttoptr i32 %v4_deec to i8*
  store i8 %v2_deec, i8* %v5_deec, align 1
  %v0_def0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_def0.pr.pr, label %bb332, label %dec_label_pc_def4

dec_label_pc_def4:                                ; preds = %dec_label_pc_ded0, %.thread44
  %v0_def4 = load i32, i32* @r4, align 4
  store i32 %v0_def4, i32* @r0, align 4
  %v0_def8 = call i32 @function_d368()
  store i32 %v0_def8, i32* %r0.global-to-local, align 4
  br label %bb332

dec_label_pc_df00:                                ; preds = %dec_label_pc_db10
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_df04 = call i32 @function_114e0(i32 23)
  %extract.t488 = trunc i32 %v1_df04 to i16
  br label %dec_label_pc_db7c

dec_label_pc_df10:                                ; preds = %bb332
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_df1c = load i32, i32* @r6, align 4
  %v1_df1c = load i32, i32* @r5, align 4
  %v3_df1c = icmp uge i32 %v0_df1c, %v1_df1c
  store i1 %v3_df1c, i1* %cpsr_c.global-to-local, align 1
  %v9_df1c = icmp eq i32 %v0_df1c, %v1_df1c
  store i1 %v9_df1c, i1* %cpsr_z.global-to-local, align 1
  %v5_df20 = icmp slt i32 %v0_df1c, %v1_df1c
  %storemerge = select i1 %v5_df20, i32 %v1_df1c, i32 %v0_df1c
  %v2_df2c = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_df2c, i32* %ip.global-to-local, align 4
  %v2_df30 = ptrtoint i32* %stack_var_-224 to i32
  store i32 %v2_df30, i32* %r1.global-to-local, align 4
  %v2_df34 = ptrtoint i32* %stack_var_-352 to i32
  store i32 %v2_df34, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_df3c = add i32 %storemerge, 1
  store i32 %v1_df3c, i32* %r0.global-to-local, align 4
  %v5_df48 = call i32 @function_1196c(i32 %v1_df3c, i32 %v2_df30, i32 %v2_df34, i32 0, i32 %v2_df2c)
  %v0_df4c = load i32, i32* @r4, align 4
  store i32 %v0_df4c, i32* %r0.global-to-local, align 4
  %v1_df50 = inttoptr i32 %v0_df4c to i32*
  %v2_df50 = call i32 @function_126dc(i32* %v1_df50)
  store i32 %v2_df50, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0d0.121 to i32), i32* @lr, align 4
  %v0_df58 = load i32, i32* @r4, align 4
  store i32 %v0_df58, i32* %stack_var_-52, align 4
  store i32 %v2_df50, i32* @global_var_1f0d0.121, align 4
  %v2_e898 = ptrtoint i32* %stack_var_-45 to i32
  %v3_e8a8 = bitcast i32* %stack_var_-45 to i16*
  %v2_e8ac = ptrtoint i32* %stack_var_-80 to i32
  %v2_e8b4 = ptrtoint i32* %stack_var_-77 to i32
  %v3_e8bc = bitcast i32* %stack_var_-77 to i16*
  %v2_e63c = ptrtoint i32* %stack_var_-60 to i32
  %v2_ea00 = ptrtoint i32* %stack_var_-96 to i32
  %v2_eaa0 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_df60

dec_label_pc_df60:                                ; preds = %dec_label_pc_e0ec, %dec_label_pc_df10
  %v0_df6c = phi i32 [ %v1_e0f0, %dec_label_pc_e0ec ], [ %v0_df58, %dec_label_pc_df10 ]
  store i32 ptrtoint (i32* @global_var_1f65c.132 to i32), i32* %r0.global-to-local, align 4
  %v3_df64 = mul i32 %v0_df6c, 256
  store i32 %v3_df64, i32* %r3.global-to-local, align 4
  %v2_df68 = load i32, i32* @global_var_1f65c.132, align 4
  store i32 %v2_df68, i32* %r1.global-to-local, align 4
  %v2_df70 = mul i32 %v0_df6c, 288
  store i32 %v2_df70, i32* %r2.global-to-local, align 4
  %v2_df74 = add i32 %v2_df68, %v2_df70
  store i32 %v2_df74, i32* @r5, align 4
  %v1_df78 = add i32 %v2_df74, 4
  %v2_df78 = inttoptr i32 %v1_df78 to i32*
  %v3_df78 = load i32, i32* %v2_df78, align 4
  store i32 %v3_df78, i32* %r0.global-to-local, align 4
  %v2_df7c = icmp eq i32 %v3_df78, -1
  store i1 %v2_df7c, i1* %cpsr_c.global-to-local, align 1
  %v7_df7c = icmp eq i32 %v3_df78, -1
  store i1 %v7_df7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df7c, label %dec_label_pc_e0ec, label %dec_label_pc_df84

dec_label_pc_df84:                                ; preds = %dec_label_pc_df60
  %v3_df84 = udiv i32 %v3_df78, 32
  store i32 %v2_eb6c, i32* %r1.global-to-local, align 4
  %v3_df90 = mul nuw nsw i32 %v3_df84, 4
  store i32 %v3_df90, i32* %ip.global-to-local, align 4
  %v2_df94 = add i32 %v3_df90, %v2_eb6c
  store i32 %v2_df94, i32* %r2.global-to-local, align 4
  %v1_df98 = add i32 %v2_df94, -312
  %v2_df98 = inttoptr i32 %v1_df98 to i32*
  %v3_df98 = load i32, i32* %v2_df98, align 4
  %v1_df9c = urem i32 %v3_df78, 32
  store i32 %v1_df9c, i32* %r1.global-to-local, align 4
  %v2_dfa0 = add nsw i32 %v1_df9c, -1
  %v3_dfa0 = shl i32 1, %v2_dfa0
  %v4_dfa0 = and i32 %v3_df98, %v3_dfa0
  %v5_dfa0 = icmp ne i32 %v4_dfa0, 0
  store i1 %v5_dfa0, i1* %cpsr_c.global-to-local, align 1
  %v6_dfa0 = lshr i32 %v3_df98, %v1_df9c
  store i32 %v6_dfa0, i32* %r3.global-to-local, align 4
  %v1_dfa4 = urem i32 %v6_dfa0, 2
  %v2_dfa4 = icmp eq i32 %v1_dfa4, 0
  store i1 %v2_dfa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfa4, label %dec_label_pc_dfac, label %dec_label_pc_ea8c

dec_label_pc_dfac:                                ; preds = %dec_label_pc_df84, %dec_label_pc_eb3c
  %v1_dfbc = phi i32 [ %v1_df9c, %dec_label_pc_df84 ], [ %v1_dfbc.pre, %dec_label_pc_eb3c ]
  %v0_dfb4 = phi i32 [ %v3_df90, %dec_label_pc_df84 ], [ %v0_dfb4.pre, %dec_label_pc_eb3c ]
  store i32 %v2_eb6c, i32* @lr, align 4
  %v2_dfb4 = add i32 %v0_dfb4, %v2_eb6c
  store i32 %v2_dfb4, i32* %r2.global-to-local, align 4
  %v1_dfb8 = add i32 %v2_dfb4, -184
  %v2_dfb8 = inttoptr i32 %v1_dfb8 to i32*
  %v3_dfb8 = load i32, i32* %v2_dfb8, align 4
  %v2_dfbc = add i32 %v1_dfbc, -1
  %v3_dfbc = shl i32 1, %v2_dfbc
  %v4_dfbc = and i32 %v3_dfb8, %v3_dfbc
  %v5_dfbc = icmp ne i32 %v4_dfbc, 0
  store i1 %v5_dfbc, i1* %cpsr_c.global-to-local, align 1
  %v6_dfbc = lshr i32 %v3_dfb8, %v1_dfbc
  store i32 %v6_dfbc, i32* %r3.global-to-local, align 4
  %v1_dfc0 = urem i32 %v6_dfbc, 2
  %v2_dfc0 = icmp eq i32 %v1_dfc0, 0
  store i1 %v2_dfc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfc0, label %dec_label_pc_e0ec, label %dec_label_pc_dfc8.preheader

dec_label_pc_dfc8.preheader:                      ; preds = %dec_label_pc_dfac
  %v0_dfc8127 = load i32, i32* @r5, align 4
  %v1_dfc8128 = add i32 %v0_dfc8127, 12
  %v2_dfc8129 = inttoptr i32 %v1_dfc8128 to i32*
  %v3_dfc8130 = load i32, i32* %v2_dfc8129, align 4
  store i32 %v3_dfc8130, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dfcc126132 = icmp eq i32 %v3_dfc8130, 0
  store i1 %v2_dfcc126132, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfcc126132, label %dec_label_pc_e0ec, label %dec_label_pc_dfd4.lr.ph

dec_label_pc_dfc8.loopexit:                       ; preds = %dec_label_pc_e9a4, %dec_label_pc_e794, %dec_label_pc_e7b8, %dec_label_pc_ebac
  %v0_dfc8 = load i32, i32* @r5, align 4
  %v1_dfc8 = add i32 %v0_dfc8, 12
  %v2_dfc8 = inttoptr i32 %v1_dfc8 to i32*
  %v3_dfc8 = load i32, i32* %v2_dfc8, align 4
  store i32 %v3_dfc8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dfcc126 = icmp eq i32 %v3_dfc8, 0
  store i1 %v2_dfcc126, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfcc126, label %dec_label_pc_e0ec, label %dec_label_pc_dfd4.lr.ph

dec_label_pc_dfd4.lr.ph:                          ; preds = %dec_label_pc_dfc8.preheader, %dec_label_pc_dfc8.loopexit
  %v0_dfd4158 = phi i32 [ %v0_dfc8, %dec_label_pc_dfc8.loopexit ], [ %v0_dfc8127, %dec_label_pc_dfc8.preheader ]
  br label %dec_label_pc_dfd4

dec_label_pc_dfccthread-pre-split.thread:         ; preds = %dec_label_pc_e1a8, %dec_label_pc_e27c, %dec_label_pc_e350, %dec_label_pc_e424, %dec_label_pc_e4f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_dfd4

dec_label_pc_dfccthread-pre-split.thread484:      ; preds = %dec_label_pc_e614, %dec_label_pc_e3b4, %dec_label_pc_e2e0, %dec_label_pc_e488, %dec_label_pc_e20c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_dfd4

dec_label_pc_dfccthread-pre-split:                ; preds = %dec_label_pc_e04c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dfcc = icmp eq i32 %v3_e04c, 0
  store i1 %v2_dfcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfcc, label %dec_label_pc_e0ec, label %dec_label_pc_dfd4

dec_label_pc_dfd4:                                ; preds = %dec_label_pc_dfccthread-pre-split.thread, %dec_label_pc_dfccthread-pre-split, %dec_label_pc_dfccthread-pre-split.thread484, %dec_label_pc_dfd4.lr.ph
  %v0_ea68 = phi i32 [ %v0_dfd4158, %dec_label_pc_dfd4.lr.ph ], [ %v0_e04c, %dec_label_pc_dfccthread-pre-split.thread484 ], [ %v0_e04c, %dec_label_pc_dfccthread-pre-split ], [ %v0_e04c, %dec_label_pc_dfccthread-pre-split.thread ]
  %v1_dfd4 = add i32 %v0_ea68, 24
  %v2_dfd4 = inttoptr i32 %v1_dfd4 to i32*
  %v3_dfd4 = load i32, i32* %v2_dfd4, align 4
  store i32 %v3_dfd4, i32* %r3.global-to-local, align 4
  %v2_dfd8 = icmp ugt i32 %v3_dfd4, 255
  store i1 %v2_dfd8, i1* %cpsr_c.global-to-local, align 1
  %v7_dfd8 = icmp eq i32 %v3_dfd4, 256
  store i1 %v7_dfd8, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_ea68, 28
  store i32 %.pre, i32* @sl, align 4
  br i1 %v7_dfd8, label %dec_label_pc_ea68, label %dec_label_pc_dfe4

dec_label_pc_dfe4:                                ; preds = %dec_label_pc_dfd4, %dec_label_pc_ea68
  %v0_dfe4 = call i32 @function_fb60()
  store i32 %v0_dfe4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v2_dfec = inttoptr i32 %v0_dfe4 to i32*
  store i32 0, i32* %v2_dfec, align 4
  %v0_dff0 = load i32, i32* @r5, align 4
  %v1_dff0 = add i32 %v0_dff0, 24
  %v2_dff0 = inttoptr i32 %v1_dff0 to i32*
  %v3_dff0 = load i32, i32* %v2_dff0, align 4
  store i32 %v3_dff0, i32* %r2.global-to-local, align 4
  %v0_dff4 = load i32, i32* @sl, align 4
  %v2_dff4 = add i32 %v0_dff4, %v3_dff0
  store i32 %v2_dff4, i32* @r4, align 4
  %v1_dff8 = add i32 %v0_dff0, 4
  %v2_dff8 = inttoptr i32 %v1_dff8 to i32*
  %v3_dff8 = load i32, i32* %v2_dff8, align 4
  store i32 %v3_dff8, i32* @r0, align 4
  %v1_dffc = sub i32 256, %v3_dff0
  store i32 %v1_dffc, i32* @r2, align 4
  store i32 %v2_dff4, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e008 = call i32 @function_1169c(i32 %v3_dff8, i32 %v2_dff4, i32 %v1_dffc, i32 16384)
  store i32 %v4_e008, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e00c = icmp eq i32 %v4_e008, 0
  store i1 %v2_e00c, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v4_e008, 1
  br i1 %tmp339, label %dec_label_pc_ea4c, label %dec_label_pc_e014

dec_label_pc_e014:                                ; preds = %dec_label_pc_dfe4
  %v0_e014 = load i32, i32* @r6, align 4
  store i32 %v0_e014, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e018

dec_label_pc_e018:                                ; preds = %.thread51, %dec_label_pc_e014
  %v3_e024 = phi i32 [ %v1_e028, %.thread51 ], [ %v0_e014, %dec_label_pc_e014 ]
  %v1_e018 = load i32, i32* @r4, align 4
  %v2_e018 = add i32 %v1_e018, %v3_e024
  %v3_e018 = inttoptr i32 %v2_e018 to i8*
  %v4_e018 = load i8, i8* %v3_e018, align 1
  %v6_e018 = zext i8 %v4_e018 to i32
  store i32 %v6_e018, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e01c = icmp eq i8 %v4_e018, 0
  store i1 %v2_e01c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e01c, label %bb340, label %.thread51

bb340:                                            ; preds = %dec_label_pc_e018
  %v2_e020 = add nuw nsw i32 %v6_e018, 65
  store i32 %v2_e020, i32* %r3.global-to-local, align 4
  %v2_e024 = trunc i32 %v2_e020 to i8
  store i8 %v2_e024, i8* %v3_e018, align 1
  %v0_e028.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread51

.thread51:                                        ; preds = %dec_label_pc_e018, %bb340
  %v0_e028 = phi i32 [ %v3_e024, %dec_label_pc_e018 ], [ %v0_e028.pre, %bb340 ]
  %v1_e028 = add i32 %v0_e028, 1
  store i32 %v1_e028, i32* %r2.global-to-local, align 4
  %v3_e02c = icmp uge i32 %v1_e028, %v4_e008
  store i1 %v3_e02c, i1* %cpsr_c.global-to-local, align 1
  %v9_e02c = icmp eq i32 %v1_e028, %v4_e008
  store i1 %v9_e02c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e02c, label %dec_label_pc_e034, label %dec_label_pc_e018

dec_label_pc_e034:                                ; preds = %.thread51, %dec_label_pc_ea50
  store i32 ptrtoint (i32* @global_var_1f0d0.121 to i32), i32* %r1.global-to-local, align 4
  %v0_e038 = load i32, i32* @r5, align 4
  %v1_e038 = add i32 %v0_e038, 24
  %v2_e038 = inttoptr i32 %v1_e038 to i32*
  %v3_e038 = load i32, i32* %v2_e038, align 4
  %v2_e03c = load i32, i32* @global_var_1f0d0.121, align 4
  store i32 %v2_e03c, i32* %r2.global-to-local, align 4
  %v2_e040 = add i32 %v3_e038, %v4_e008
  store i32 %v2_e040, i32* %r3.global-to-local, align 4
  store i32 %v2_e040, i32* %v2_e038, align 4
  %v0_e048 = load i32, i32* %r2.global-to-local, align 4
  %v1_e048 = load i32, i32* @r5, align 4
  %v2_e048 = add i32 %v1_e048, 8
  %v3_e048 = inttoptr i32 %v2_e048 to i32*
  store i32 %v0_e048, i32* %v3_e048, align 4
  br label %dec_label_pc_e04c

dec_label_pc_e04c:                                ; preds = %dec_label_pc_e180, %dec_label_pc_e034
  %v0_e04c = load i32, i32* @r5, align 4
  %v1_e04c = add i32 %v0_e04c, 12
  %v2_e04c = inttoptr i32 %v1_e04c to i32*
  %v3_e04c = load i32, i32* %v2_e04c, align 4
  store i32 %v3_e04c, i32* %r0.global-to-local, align 4
  %v1_e050 = add i32 %v3_e04c, -2
  store i32 %v1_e050, i32* %r3.global-to-local, align 4
  %v7_e054 = icmp eq i32 %v1_e050, 8
  store i1 %v7_e054, i1* %cpsr_z.global-to-local, align 1
  %v5_e058 = and i32 %v1_e050, 1073741824
  %v6_e058 = icmp ne i32 %v5_e058, 0
  store i1 %v6_e058, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_e04c, label %dec_label_pc_dfccthread-pre-split [
    i32 2, label %dec_label_pc_e7c4
    i32 3, label %dec_label_pc_e684
    i32 4, label %dec_label_pc_e728
    i32 5, label %dec_label_pc_e4f8
    i32 6, label %dec_label_pc_e350
    i32 7, label %dec_label_pc_e27c
    i32 8, label %dec_label_pc_e424
    i32 9, label %dec_label_pc_e1a8
    i32 10, label %dec_label_pc_e104
  ]

dec_label_pc_e084:                                ; preds = %dec_label_pc_ea4c
  %v0_e084 = call i32 @function_fb60()
  store i32 %v0_e084, i32* %r0.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_e08c = inttoptr i32 %v0_e084 to i32*
  store i32 104, i32* %v2_e08c, align 4
  br label %dec_label_pc_e090

dec_label_pc_e090:                                ; preds = %dec_label_pc_ea50, %dec_label_pc_e084
  %v0_e090 = call i32 @function_fb60()
  store i32 %v0_e090, i32* %r0.global-to-local, align 4
  %v1_e094 = inttoptr i32 %v0_e090 to i32*
  %v2_e094 = load i32, i32* %v1_e094, align 4
  store i32 %v2_e094, i32* %r3.global-to-local, align 4
  %v2_e098 = icmp ugt i32 %v2_e094, 10
  store i1 %v2_e098, i1* %cpsr_c.global-to-local, align 1
  %v7_e098 = icmp eq i32 %v2_e094, 11
  store i1 %v7_e098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e098, label %dec_label_pc_e0ec, label %dec_label_pc_e0a0

dec_label_pc_e0a0:                                ; preds = %dec_label_pc_e090
  %v0_e0a0 = call i32 @function_fb60()
  store i32 %v0_e0a0, i32* %r0.global-to-local, align 4
  %v1_e0a4 = inttoptr i32 %v0_e0a0 to i32*
  %v2_e0a4 = load i32, i32* %v1_e0a4, align 4
  store i32 %v2_e0a4, i32* %r3.global-to-local, align 4
  %v2_e0a8 = icmp ugt i32 %v2_e0a4, 10
  store i1 %v2_e0a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e0a8 = icmp eq i32 %v2_e0a4, 11
  store i1 %v7_e0a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0a8, label %dec_label_pc_e0ec, label %dec_label_pc_e0b0

dec_label_pc_e0b0:                                ; preds = %dec_label_pc_e0a0
  %v0_e0b0 = load i32, i32* @r5, align 4
  %v1_e0b0 = add i32 %v0_e0b0, 4
  %v2_e0b0 = inttoptr i32 %v1_e0b0 to i32*
  %v3_e0b0 = load i32, i32* %v2_e0b0, align 4
  store i32 %v3_e0b0, i32* %r0.global-to-local, align 4
  %v1_e0b4 = call i32 @function_12714(i32 %v3_e0b0)
  store i32 %v1_e0b4, i32* %r0.global-to-local, align 4
  %v0_e0b8 = load i32, i32* @r5, align 4
  %v1_e0b8 = add i32 %v0_e0b8, 284
  %v2_e0b8 = inttoptr i32 %v1_e0b8 to i8*
  %v3_e0b8 = load i8, i8* %v2_e0b8, align 1
  %v4_e0b8 = zext i8 %v3_e0b8 to i32
  %v1_e0bc = add nuw nsw i32 %v4_e0b8, 1
  %v1_e0c0 = urem i32 %v1_e0bc, 256
  store i32 %v1_e0c0, i32* %r3.global-to-local, align 4
  %v2_e0c4 = icmp ugt i32 %v1_e0c0, 8
  store i1 %v2_e0c4, i1* %cpsr_c.global-to-local, align 1
  %v7_e0c4 = icmp eq i32 %v1_e0c0, 9
  store i1 %v7_e0c4, i1* %cpsr_z.global-to-local, align 1
  %v1_e0c8 = trunc i32 %v1_e0bc to i8
  store i8 %v1_e0c8, i8* %v2_e0b8, align 1
  %v0_e0cc = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_e0cc = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_e0cc = xor i1 %v1_e0cc, true
  %v3_e0cc = and i1 %v0_e0cc, %v2_e0cc
  br i1 %v3_e0cc, label %bb341, label %.thread255

.thread255:                                       ; preds = %dec_label_pc_e0b0
  store i32 -1, i32* %r2.global-to-local, align 4
  %v1_e0d8251256 = load i32, i32* @r5, align 4
  %v2_e0d8252257 = add i32 %v1_e0d8251256, 4
  %v3_e0d8253258 = inttoptr i32 %v2_e0d8252257 to i32*
  store i32 -1, i32* %v3_e0d8253258, align 4
  br label %bb342

bb341:                                            ; preds = %dec_label_pc_e0b0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_e0d8247 = load i32, i32* @r5, align 4
  %v2_e0d8248 = add i32 %v1_e0d8247, 4
  %v3_e0d8249 = inttoptr i32 %v2_e0d8248 to i32*
  store i32 -1, i32* %v3_e0d8249, align 4
  %v4_e0dc = load i32, i32* %r0.global-to-local, align 4
  %v5_e0dc = load i32, i32* @r5, align 4
  %v6_e0dc = add i32 %v5_e0dc, 12
  %v7_e0dc = inttoptr i32 %v6_e0dc to i32*
  store i32 %v4_e0dc, i32* %v7_e0dc, align 4
  %v4_e0e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_e0e0 = trunc i32 %v4_e0e0 to i8
  %v6_e0e0 = load i32, i32* @r5, align 4
  %v7_e0e0 = add i32 %v6_e0e0, 284
  %v8_e0e0 = inttoptr i32 %v7_e0e0 to i8*
  store i8 %v5_e0e0, i8* %v8_e0e0, align 1
  %v0_e0e4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_e0e4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb342

bb342:                                            ; preds = %.thread255, %bb341
  %v1_e0e8 = phi i1 [ %v1_e0e4.pre, %bb341 ], [ %v0_e0cc, %.thread255 ]
  %v0_e0e8 = phi i1 [ %v0_e0e4.pre, %bb341 ], [ %v1_e0cc, %.thread255 ]
  %v2_e0e4 = xor i1 %v1_e0e8, true
  %v3_e0e4 = or i1 %v0_e0e8, %v2_e0e4
  br i1 %v3_e0e4, label %bb343, label %bb344

bb343:                                            ; preds = %bb342
  %v4_e0e4 = load i32, i32* @r5, align 4
  store i32 %v4_e0e4, i32* %r0.global-to-local, align 4
  br label %bb344

bb344:                                            ; preds = %bb342, %bb343
  store i32 57580, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_e0e4, i32 ptrtoint (i32* @global_var_d368.211 to i32))
  br label %dec_label_pc_e0ec

dec_label_pc_e0ec:                                ; preds = %dec_label_pc_dfc8.loopexit, %dec_label_pc_dfccthread-pre-split, %dec_label_pc_dfc8.preheader, %dec_label_pc_e0a0, %dec_label_pc_e090, %dec_label_pc_dfac, %dec_label_pc_df60, %dec_label_pc_eb90, %bb344
  %v3_e0ec = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_e0ec, i32* %r3.global-to-local, align 4
  %v1_e0f0 = add i32 %v3_e0ec, 1
  store i32 %v1_e0f0, i32* @r4, align 4
  %v2_e0f4 = icmp ugt i32 %v1_e0f0, 254
  store i1 %v2_e0f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e0f4 = icmp eq i32 %v1_e0f0, 255
  store i1 %v7_e0f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e0f0, i32* %stack_var_-52, align 4
  %v7_e0fc = icmp slt i32 %v1_e0f0, 256
  br i1 %v7_e0fc, label %dec_label_pc_df60, label %dec_label_pc_d9a0

dec_label_pc_e104:                                ; preds = %dec_label_pc_e04c
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_e108 = call i32 @function_edb4(i32 22)
  store i32 %v2_e63c, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_e118 = call i32 @function_ecf0(i32 22, i32* nonnull %stack_var_-60)
  %v3_e11c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e118, i32* %r2.global-to-local, align 4
  %v1_e124 = add i32 %v3_e11c, -1
  store i32 %v1_e124, i32* %r3.global-to-local, align 4
  %v0_e128 = load i32, i32* @sl, align 4
  store i32 %v0_e128, i32* %r0.global-to-local, align 4
  %v0_e12c = load i32, i32* @r5, align 4
  %v1_e12c = add i32 %v0_e12c, 24
  %v2_e12c = inttoptr i32 %v1_e12c to i32*
  %v3_e12c = load i32, i32* %v2_e12c, align 4
  store i32 %v3_e12c, i32* %r1.global-to-local, align 4
  %v4_e130 = call i32 @function_f2c8(i32 %v0_e128, i32 %v3_e12c, i32 %v3_e118, i32 %v1_e124)
  %v2_e134 = icmp eq i32 %v4_e130, -1
  store i1 %v2_e134, i1* %cpsr_c.global-to-local, align 1
  %v7_e134 = icmp eq i32 %v4_e130, -1
  store i1 %v7_e134, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_e130, i32* @r4, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_e9a8 = call i32 @function_ed14(i32 22)
  br i1 %v7_e134, label %dec_label_pc_e9a4, label %dec_label_pc_e140

dec_label_pc_e140:                                ; preds = %dec_label_pc_e104
  store i32 %v1_e9a8, i32* %r0.global-to-local, align 4
  %v0_e148 = load i32, i32* @r5, align 4
  %v1_e148 = add i32 %v0_e148, 4
  %v2_e148 = inttoptr i32 %v1_e148 to i32*
  %v3_e148 = load i32, i32* %v2_e148, align 4
  store i32 %v3_e148, i32* %r0.global-to-local, align 4
  %v1_e14c = call i32 @function_12714(i32 %v3_e148)
  store i32 %v1_e14c, i32* %r0.global-to-local, align 4
  %v0_e150 = load i32, i32* @r5, align 4
  %v1_e150 = add i32 %v0_e150, 284
  %v2_e150 = inttoptr i32 %v1_e150 to i8*
  %v3_e150 = load i8, i8* %v2_e150, align 1
  %v4_e150 = zext i8 %v3_e150 to i32
  %v1_e154 = add nuw nsw i32 %v4_e150, 1
  %v1_e158 = urem i32 %v1_e154, 256
  store i32 %v1_e158, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_e160 = icmp ugt i32 %v1_e158, 9
  store i1 %v2_e160, i1* %cpsr_c.global-to-local, align 1
  %v7_e160 = icmp eq i32 %v1_e158, 10
  store i1 %v7_e160, i1* %cpsr_z.global-to-local, align 1
  %v2_e164 = add i32 %v0_e150, 4
  %v3_e164 = inttoptr i32 %v2_e164 to i32*
  store i32 -1, i32* %v3_e164, align 4
  %v0_e168 = load i32, i32* %r3.global-to-local, align 4
  %v1_e168 = trunc i32 %v0_e168 to i8
  %v2_e168 = load i32, i32* @r5, align 4
  %v3_e168 = add i32 %v2_e168, 284
  %v4_e168 = inttoptr i32 %v3_e168 to i8*
  store i8 %v1_e168, i8* %v4_e168, align 1
  %v0_e16c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e16c, label %dec_label_pc_e170, label %dec_label_pc_ea5c

dec_label_pc_e170:                                ; preds = %dec_label_pc_e140
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e174 = load i32, i32* @r5, align 4
  %v2_e174 = add i32 %v1_e174, 12
  %v3_e174 = inttoptr i32 %v2_e174 to i32*
  store i32 0, i32* %v3_e174, align 4
  %v0_e178 = load i32, i32* %r3.global-to-local, align 4
  %v1_e178 = trunc i32 %v0_e178 to i8
  %v2_e178 = load i32, i32* @r5, align 4
  %v3_e178 = add i32 %v2_e178, 284
  %v4_e178 = inttoptr i32 %v3_e178 to i8*
  store i8 %v1_e178, i8* %v4_e178, align 1
  br label %dec_label_pc_e17c

dec_label_pc_e17c:                                ; preds = %dec_label_pc_ea5c, %dec_label_pc_e170
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_e180

dec_label_pc_e180:                                ; preds = %dec_label_pc_e7b8, %dec_label_pc_e62c, %dec_label_pc_e4a0, %dec_label_pc_e3cc, %dec_label_pc_e2f8, %dec_label_pc_e224, %dec_label_pc_e17c
  %v0_e180 = load i32, i32* @r5, align 4
  %v1_e180 = add i32 %v0_e180, 24
  %v2_e180 = inttoptr i32 %v1_e180 to i32*
  %v3_e180 = load i32, i32* %v2_e180, align 4
  %v0_e184 = load i32, i32* @r7, align 4
  %v2_e184 = sub i32 %v0_e184, %v3_e180
  %v3_e184 = icmp uge i32 %v0_e184, %v3_e180
  store i1 %v3_e184, i1* %cpsr_c.global-to-local, align 1
  %v4_e184 = xor i32 %v0_e184, %v3_e180
  %v5_e184 = xor i32 %v2_e184, %v0_e184
  %v6_e184 = and i32 %v5_e184, %v4_e184
  %v7_e184 = icmp slt i32 %v6_e184, 0
  %v8_e184 = icmp slt i32 %v2_e184, 0
  %v9_e184 = icmp eq i32 %v0_e184, %v3_e180
  store i1 %v9_e184, i1* %cpsr_z.global-to-local, align 1
  %v2_e188 = xor i1 %v8_e184, %v7_e184
  %v0_e184.v3_e180 = select i1 %v2_e188, i32 %v0_e184, i32 %v3_e180
  store i32 %v0_e184.v3_e180, i32* %r1.global-to-local, align 4
  %v2_e190 = sub i32 %v3_e180, %v0_e184.v3_e180
  store i32 %v2_e190, i32* %r2.global-to-local, align 4
  store i32 %v2_e190, i32* %v2_e180, align 4
  %v0_e198 = load i32, i32* @sl, align 4
  %v1_e198 = load i32, i32* %r1.global-to-local, align 4
  %v2_e198 = add i32 %v1_e198, %v0_e198
  store i32 %v2_e198, i32* %r1.global-to-local, align 4
  store i32 %v0_e198, i32* %r0.global-to-local, align 4
  %v3_e1a0 = inttoptr i32 %v0_e198 to i8*
  %v4_e1a0 = call i32 @function_12008(i8* %v3_e1a0, i32 %v2_e198, i32 %v2_e190)
  store i32 %v4_e1a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e04c

dec_label_pc_e1a8:                                ; preds = %dec_label_pc_e04c
  %v1_e1a8 = add i32 %v0_e04c, 24
  %v2_e1a8 = inttoptr i32 %v1_e1a8 to i32*
  %v3_e1a8 = load i32, i32* %v2_e1a8, align 4
  store i32 %v3_e1a8, i32* %r2.global-to-local, align 4
  %v1_e1ac = add i32 %v3_e1a8, -1
  store i32 %v1_e1ac, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e1b0 = icmp eq i32 %v1_e1ac, 0
  store i1 %v2_e1b0, i1* %cpsr_z.global-to-local, align 1
  %tmp347 = icmp slt i32 %v1_e1ac, 1
  br i1 %tmp347, label %dec_label_pc_dfccthread-pre-split.thread, label %dec_label_pc_e1b8

dec_label_pc_e1b8:                                ; preds = %dec_label_pc_e1a8
  %v2_e1b8 = add i32 %v1_e1ac, %v0_e04c
  store i32 %v2_e1b8, i32* %r3.global-to-local, align 4
  %v1_e1bc = add i32 %v2_e1b8, 28
  %v2_e1bc = inttoptr i32 %v1_e1bc to i8*
  %v3_e1bc = load i8, i8* %v2_e1bc, align 1
  %v4_e1bc = zext i8 %v3_e1bc to i32
  store i32 %v4_e1bc, i32* %r3.global-to-local, align 4
  %v2_e1c0 = icmp ugt i8 %v3_e1bc, 61
  store i1 %v2_e1c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e1c0 = icmp eq i8 %v3_e1bc, 62
  store i1 %v7_e1c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e1c0, label %dec_label_pc_e224, label %bb348

bb348:                                            ; preds = %dec_label_pc_e1b8
  %v3_e1c4 = icmp ugt i8 %v3_e1bc, 57
  store i1 %v3_e1c4, i1* %cpsr_c.global-to-local, align 1
  %v8_e1c4 = icmp eq i8 %v3_e1bc, 58
  store i1 %v8_e1c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e1c4, label %dec_label_pc_e224, label %dec_label_pc_e1cc

dec_label_pc_e1cc:                                ; preds = %bb348
  %v2_e1cc = icmp ugt i8 %v3_e1bc, 35
  store i1 %v2_e1cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e1cc = icmp eq i8 %v3_e1bc, 36
  store i1 %v7_e1cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e1cc, label %dec_label_pc_e224, label %dec_label_pc_e1d4

dec_label_pc_e1d4:                                ; preds = %dec_label_pc_e1cc
  %v2_e1d4 = icmp ugt i8 %v3_e1bc, 34
  store i1 %v2_e1d4, i1* %cpsr_c.global-to-local, align 1
  %v7_e1d4 = icmp eq i8 %v3_e1bc, 35
  store i1 %v7_e1d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e1d4, label %dec_label_pc_e224, label %dec_label_pc_e1dc

dec_label_pc_e1dc:                                ; preds = %dec_label_pc_e1d4
  %v2_e1dc = icmp ugt i8 %v3_e1bc, 36
  store i1 %v2_e1dc, i1* %cpsr_c.global-to-local, align 1
  %v7_e1dc = icmp eq i8 %v3_e1bc, 37
  store i1 %v7_e1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e1dc, label %dec_label_pc_e224, label %dec_label_pc_e20c.preheader

dec_label_pc_e20c.preheader:                      ; preds = %dec_label_pc_e1dc
  %v3_e1e0 = add i32 %v0_e04c, 28
  %v2_e1e4 = add i32 %v3_e1e0, %v3_e1a8
  store i32 %v2_e1e4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e20c

dec_label_pc_e1f0:                                ; preds = %bb349
  %v2_e1f0 = icmp ugt i8 %v3_e214, 35
  store i1 %v2_e1f0, i1* %cpsr_c.global-to-local, align 1
  %v7_e1f0 = icmp eq i8 %v3_e214, 36
  store i1 %v7_e1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e1f0, label %dec_label_pc_e224, label %dec_label_pc_e1f8

dec_label_pc_e1f8:                                ; preds = %dec_label_pc_e1f0
  %v2_e1f8 = icmp ugt i8 %v3_e214, 34
  store i1 %v2_e1f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e1f8 = icmp eq i8 %v3_e214, 35
  store i1 %v7_e1f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e1f8, label %dec_label_pc_e224, label %dec_label_pc_e200

dec_label_pc_e200:                                ; preds = %dec_label_pc_e1f8
  %v2_e200 = icmp ugt i8 %v3_e214, 36
  store i1 %v2_e200, i1* %cpsr_c.global-to-local, align 1
  %v7_e200 = icmp eq i8 %v3_e214, 37
  store i1 %v7_e200, i1* %cpsr_z.global-to-local, align 1
  %v1_e204 = add i32 %v0_e204, -1
  store i32 %v1_e204, i32* %r3.global-to-local, align 4
  br i1 %v7_e200, label %dec_label_pc_e224, label %dec_label_pc_e20c

dec_label_pc_e20c:                                ; preds = %dec_label_pc_e20c.preheader, %dec_label_pc_e200
  %v0_e204 = phi i32 [ %v2_e1e4, %dec_label_pc_e20c.preheader ], [ %v1_e204, %dec_label_pc_e200 ]
  %v0_e20c = phi i32 [ %v1_e1ac, %dec_label_pc_e20c.preheader ], [ %v1_e20c, %dec_label_pc_e200 ]
  %v1_e20c = add i32 %v0_e20c, -1
  store i32 %v1_e20c, i32* %r1.global-to-local, align 4
  %v2_e20c = icmp ne i32 %v0_e20c, 0
  store i1 %v2_e20c, i1* %cpsr_c.global-to-local, align 1
  %v7_e20c = icmp eq i32 %v0_e20c, 1
  store i1 %v7_e20c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e20c, label %dec_label_pc_dfccthread-pre-split.thread484, label %dec_label_pc_e214

dec_label_pc_e214:                                ; preds = %dec_label_pc_e20c
  %v1_e214 = add i32 %v0_e204, -2
  %v2_e214 = inttoptr i32 %v1_e214 to i8*
  %v3_e214 = load i8, i8* %v2_e214, align 1
  %v4_e214 = zext i8 %v3_e214 to i32
  store i32 %v4_e214, i32* %r2.global-to-local, align 4
  %v2_e218 = icmp ugt i8 %v3_e214, 61
  store i1 %v2_e218, i1* %cpsr_c.global-to-local, align 1
  %v7_e218 = icmp eq i8 %v3_e214, 62
  store i1 %v7_e218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e218, label %dec_label_pc_e224, label %bb349

bb349:                                            ; preds = %dec_label_pc_e214
  %v3_e21c = icmp ugt i8 %v3_e214, 57
  store i1 %v3_e21c, i1* %cpsr_c.global-to-local, align 1
  %v8_e21c = icmp eq i8 %v3_e214, 58
  store i1 %v8_e21c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e21c, label %dec_label_pc_e224, label %dec_label_pc_e1f0

dec_label_pc_e224:                                ; preds = %dec_label_pc_e214, %bb349, %dec_label_pc_e200, %dec_label_pc_e1f8, %dec_label_pc_e1f0, %dec_label_pc_e1dc, %dec_label_pc_e1b8, %dec_label_pc_e1d4, %dec_label_pc_e1cc, %bb348
  %v0_e228 = phi i32 [ %v1_e1ac, %dec_label_pc_e1dc ], [ %v1_e1ac, %dec_label_pc_e1b8 ], [ %v1_e1ac, %dec_label_pc_e1d4 ], [ %v1_e1ac, %dec_label_pc_e1cc ], [ %v1_e1ac, %bb348 ], [ %v1_e20c, %dec_label_pc_e1f0 ], [ %v1_e20c, %dec_label_pc_e1f8 ], [ %v1_e20c, %dec_label_pc_e200 ], [ %v1_e20c, %bb349 ], [ %v1_e20c, %dec_label_pc_e214 ]
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_e228 = add i32 %v0_e228, 1
  store i32 %v1_e228, i32* @r7, align 4
  %v1_e22c = call i32 @function_edb4(i32 19)
  store i32 %v2_e63c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v3_e23c = call i32 @function_ecf0(i32 19, i32* nonnull %stack_var_-60)
  store i32 %v3_e23c, i32* %r0.global-to-local, align 4
  %v3_e240 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e240, i32* @r2, align 4
  store i32 %v3_e23c, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e24c = load i32, i32* @r5, align 4
  %v1_e24c = add i32 %v0_e24c, 4
  %v2_e24c = inttoptr i32 %v1_e24c to i32*
  %v3_e24c = load i32, i32* %v2_e24c, align 4
  store i32 %v3_e24c, i32* @r0, align 4
  %v4_e250 = call i32 @function_11708(i32 %v3_e24c, i32 %v3_e23c, i32 %v3_e240, i32 16384)
  store i32 %v4_e250, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e260 = load i32, i32* @r5, align 4
  %v1_e260 = add i32 %v0_e260, 4
  %v2_e260 = inttoptr i32 %v1_e260 to i32*
  %v3_e260 = load i32, i32* %v2_e260, align 4
  store i32 %v3_e260, i32* @r0, align 4
  %v4_e264 = call i32 @function_11708(i32 %v3_e260, i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32 2, i32 16384)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_e26c = call i32 @function_ed14(i32 19)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_e274 = load i32, i32* @r5, align 4
  %v2_e274 = add i32 %v1_e274, 12
  %v3_e274 = inttoptr i32 %v2_e274 to i32*
  store i32 10, i32* %v3_e274, align 4
  br label %dec_label_pc_e180

dec_label_pc_e27c:                                ; preds = %dec_label_pc_e04c
  %v1_e27c = add i32 %v0_e04c, 24
  %v2_e27c = inttoptr i32 %v1_e27c to i32*
  %v3_e27c = load i32, i32* %v2_e27c, align 4
  store i32 %v3_e27c, i32* %r2.global-to-local, align 4
  %v1_e280 = add i32 %v3_e27c, -1
  store i32 %v1_e280, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e284 = icmp eq i32 %v1_e280, 0
  store i1 %v2_e284, i1* %cpsr_z.global-to-local, align 1
  %tmp350 = icmp slt i32 %v1_e280, 1
  br i1 %tmp350, label %dec_label_pc_dfccthread-pre-split.thread, label %dec_label_pc_e28c

dec_label_pc_e28c:                                ; preds = %dec_label_pc_e27c
  %v2_e28c = add i32 %v1_e280, %v0_e04c
  store i32 %v2_e28c, i32* %r3.global-to-local, align 4
  %v1_e290 = add i32 %v2_e28c, 28
  %v2_e290 = inttoptr i32 %v1_e290 to i8*
  %v3_e290 = load i8, i8* %v2_e290, align 1
  %v4_e290 = zext i8 %v3_e290 to i32
  store i32 %v4_e290, i32* %r3.global-to-local, align 4
  %v2_e294 = icmp ugt i8 %v3_e290, 61
  store i1 %v2_e294, i1* %cpsr_c.global-to-local, align 1
  %v7_e294 = icmp eq i8 %v3_e290, 62
  store i1 %v7_e294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e294, label %dec_label_pc_e2f8, label %bb351

bb351:                                            ; preds = %dec_label_pc_e28c
  %v3_e298 = icmp ugt i8 %v3_e290, 57
  store i1 %v3_e298, i1* %cpsr_c.global-to-local, align 1
  %v8_e298 = icmp eq i8 %v3_e290, 58
  store i1 %v8_e298, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e298, label %dec_label_pc_e2f8, label %dec_label_pc_e2a0

dec_label_pc_e2a0:                                ; preds = %bb351
  %v2_e2a0 = icmp ugt i8 %v3_e290, 35
  store i1 %v2_e2a0, i1* %cpsr_c.global-to-local, align 1
  %v7_e2a0 = icmp eq i8 %v3_e290, 36
  store i1 %v7_e2a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e2a0, label %dec_label_pc_e2f8, label %dec_label_pc_e2a8

dec_label_pc_e2a8:                                ; preds = %dec_label_pc_e2a0
  %v2_e2a8 = icmp ugt i8 %v3_e290, 34
  store i1 %v2_e2a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e2a8 = icmp eq i8 %v3_e290, 35
  store i1 %v7_e2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e2a8, label %dec_label_pc_e2f8, label %dec_label_pc_e2b0

dec_label_pc_e2b0:                                ; preds = %dec_label_pc_e2a8
  %v2_e2b0 = icmp ugt i8 %v3_e290, 36
  store i1 %v2_e2b0, i1* %cpsr_c.global-to-local, align 1
  %v7_e2b0 = icmp eq i8 %v3_e290, 37
  store i1 %v7_e2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e2b0, label %dec_label_pc_e2f8, label %dec_label_pc_e2e0.preheader

dec_label_pc_e2e0.preheader:                      ; preds = %dec_label_pc_e2b0
  %v3_e2b4 = add i32 %v0_e04c, 28
  %v2_e2b8 = add i32 %v3_e2b4, %v3_e27c
  store i32 %v2_e2b8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e2e0

dec_label_pc_e2c4:                                ; preds = %bb352
  %v2_e2c4 = icmp ugt i8 %v3_e2e8, 35
  store i1 %v2_e2c4, i1* %cpsr_c.global-to-local, align 1
  %v7_e2c4 = icmp eq i8 %v3_e2e8, 36
  store i1 %v7_e2c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e2c4, label %dec_label_pc_e2f8, label %dec_label_pc_e2cc

dec_label_pc_e2cc:                                ; preds = %dec_label_pc_e2c4
  %v2_e2cc = icmp ugt i8 %v3_e2e8, 34
  store i1 %v2_e2cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e2cc = icmp eq i8 %v3_e2e8, 35
  store i1 %v7_e2cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e2cc, label %dec_label_pc_e2f8, label %dec_label_pc_e2d4

dec_label_pc_e2d4:                                ; preds = %dec_label_pc_e2cc
  %v2_e2d4 = icmp ugt i8 %v3_e2e8, 36
  store i1 %v2_e2d4, i1* %cpsr_c.global-to-local, align 1
  %v7_e2d4 = icmp eq i8 %v3_e2e8, 37
  store i1 %v7_e2d4, i1* %cpsr_z.global-to-local, align 1
  %v1_e2d8 = add i32 %v0_e2d8, -1
  store i32 %v1_e2d8, i32* %r3.global-to-local, align 4
  br i1 %v7_e2d4, label %dec_label_pc_e2f8, label %dec_label_pc_e2e0

dec_label_pc_e2e0:                                ; preds = %dec_label_pc_e2e0.preheader, %dec_label_pc_e2d4
  %v0_e2d8 = phi i32 [ %v2_e2b8, %dec_label_pc_e2e0.preheader ], [ %v1_e2d8, %dec_label_pc_e2d4 ]
  %v0_e2e0 = phi i32 [ %v1_e280, %dec_label_pc_e2e0.preheader ], [ %v1_e2e0, %dec_label_pc_e2d4 ]
  %v1_e2e0 = add i32 %v0_e2e0, -1
  store i32 %v1_e2e0, i32* %r1.global-to-local, align 4
  %v2_e2e0 = icmp ne i32 %v0_e2e0, 0
  store i1 %v2_e2e0, i1* %cpsr_c.global-to-local, align 1
  %v7_e2e0 = icmp eq i32 %v0_e2e0, 1
  store i1 %v7_e2e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e2e0, label %dec_label_pc_dfccthread-pre-split.thread484, label %dec_label_pc_e2e8

dec_label_pc_e2e8:                                ; preds = %dec_label_pc_e2e0
  %v1_e2e8 = add i32 %v0_e2d8, -2
  %v2_e2e8 = inttoptr i32 %v1_e2e8 to i8*
  %v3_e2e8 = load i8, i8* %v2_e2e8, align 1
  %v4_e2e8 = zext i8 %v3_e2e8 to i32
  store i32 %v4_e2e8, i32* %r2.global-to-local, align 4
  %v2_e2ec = icmp ugt i8 %v3_e2e8, 61
  store i1 %v2_e2ec, i1* %cpsr_c.global-to-local, align 1
  %v7_e2ec = icmp eq i8 %v3_e2e8, 62
  store i1 %v7_e2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e2ec, label %dec_label_pc_e2f8, label %bb352

bb352:                                            ; preds = %dec_label_pc_e2e8
  %v3_e2f0 = icmp ugt i8 %v3_e2e8, 57
  store i1 %v3_e2f0, i1* %cpsr_c.global-to-local, align 1
  %v8_e2f0 = icmp eq i8 %v3_e2e8, 58
  store i1 %v8_e2f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e2f0, label %dec_label_pc_e2f8, label %dec_label_pc_e2c4

dec_label_pc_e2f8:                                ; preds = %dec_label_pc_e2e8, %bb352, %dec_label_pc_e2d4, %dec_label_pc_e2cc, %dec_label_pc_e2c4, %dec_label_pc_e2b0, %dec_label_pc_e28c, %dec_label_pc_e2a8, %dec_label_pc_e2a0, %bb351
  %v0_e2fc = phi i32 [ %v1_e280, %dec_label_pc_e2b0 ], [ %v1_e280, %dec_label_pc_e28c ], [ %v1_e280, %dec_label_pc_e2a8 ], [ %v1_e280, %dec_label_pc_e2a0 ], [ %v1_e280, %bb351 ], [ %v1_e2e0, %dec_label_pc_e2c4 ], [ %v1_e2e0, %dec_label_pc_e2cc ], [ %v1_e2e0, %dec_label_pc_e2d4 ], [ %v1_e2e0, %bb352 ], [ %v1_e2e0, %dec_label_pc_e2e8 ]
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_e2fc = add i32 %v0_e2fc, 1
  store i32 %v1_e2fc, i32* @r7, align 4
  %v1_e300 = call i32 @function_edb4(i32 16)
  store i32 %v2_e63c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v3_e310 = call i32 @function_ecf0(i32 16, i32* nonnull %stack_var_-60)
  store i32 %v3_e310, i32* %r0.global-to-local, align 4
  %v3_e314 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e314, i32* @r2, align 4
  store i32 %v3_e310, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e320 = load i32, i32* @r5, align 4
  %v1_e320 = add i32 %v0_e320, 4
  %v2_e320 = inttoptr i32 %v1_e320 to i32*
  %v3_e320 = load i32, i32* %v2_e320, align 4
  store i32 %v3_e320, i32* @r0, align 4
  %v4_e324 = call i32 @function_11708(i32 %v3_e320, i32 %v3_e310, i32 %v3_e314, i32 16384)
  store i32 %v4_e324, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e334 = load i32, i32* @r5, align 4
  %v1_e334 = add i32 %v0_e334, 4
  %v2_e334 = inttoptr i32 %v1_e334 to i32*
  %v3_e334 = load i32, i32* %v2_e334, align 4
  store i32 %v3_e334, i32* @r0, align 4
  %v4_e338 = call i32 @function_11708(i32 %v3_e334, i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32 2, i32 16384)
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_e340 = call i32 @function_ed14(i32 16)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_e348 = load i32, i32* @r5, align 4
  %v2_e348 = add i32 %v1_e348, 12
  %v3_e348 = inttoptr i32 %v2_e348 to i32*
  store i32 8, i32* %v3_e348, align 4
  br label %dec_label_pc_e180

dec_label_pc_e350:                                ; preds = %dec_label_pc_e04c
  %v1_e350 = add i32 %v0_e04c, 24
  %v2_e350 = inttoptr i32 %v1_e350 to i32*
  %v3_e350 = load i32, i32* %v2_e350, align 4
  store i32 %v3_e350, i32* %r2.global-to-local, align 4
  %v1_e354 = add i32 %v3_e350, -1
  store i32 %v1_e354, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e358 = icmp eq i32 %v1_e354, 0
  store i1 %v2_e358, i1* %cpsr_z.global-to-local, align 1
  %tmp353 = icmp slt i32 %v1_e354, 1
  br i1 %tmp353, label %dec_label_pc_dfccthread-pre-split.thread, label %dec_label_pc_e360

dec_label_pc_e360:                                ; preds = %dec_label_pc_e350
  %v2_e360 = add i32 %v1_e354, %v0_e04c
  store i32 %v2_e360, i32* %r3.global-to-local, align 4
  %v1_e364 = add i32 %v2_e360, 28
  %v2_e364 = inttoptr i32 %v1_e364 to i8*
  %v3_e364 = load i8, i8* %v2_e364, align 1
  %v4_e364 = zext i8 %v3_e364 to i32
  store i32 %v4_e364, i32* %r3.global-to-local, align 4
  %v2_e368 = icmp ugt i8 %v3_e364, 61
  store i1 %v2_e368, i1* %cpsr_c.global-to-local, align 1
  %v7_e368 = icmp eq i8 %v3_e364, 62
  store i1 %v7_e368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e368, label %dec_label_pc_e3cc, label %bb354

bb354:                                            ; preds = %dec_label_pc_e360
  %v3_e36c = icmp ugt i8 %v3_e364, 57
  store i1 %v3_e36c, i1* %cpsr_c.global-to-local, align 1
  %v8_e36c = icmp eq i8 %v3_e364, 58
  store i1 %v8_e36c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e36c, label %dec_label_pc_e3cc, label %dec_label_pc_e374

dec_label_pc_e374:                                ; preds = %bb354
  %v2_e374 = icmp ugt i8 %v3_e364, 35
  store i1 %v2_e374, i1* %cpsr_c.global-to-local, align 1
  %v7_e374 = icmp eq i8 %v3_e364, 36
  store i1 %v7_e374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e374, label %dec_label_pc_e3cc, label %dec_label_pc_e37c

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e374
  %v2_e37c = icmp ugt i8 %v3_e364, 34
  store i1 %v2_e37c, i1* %cpsr_c.global-to-local, align 1
  %v7_e37c = icmp eq i8 %v3_e364, 35
  store i1 %v7_e37c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e37c, label %dec_label_pc_e3cc, label %dec_label_pc_e384

dec_label_pc_e384:                                ; preds = %dec_label_pc_e37c
  %v2_e384 = icmp ugt i8 %v3_e364, 36
  store i1 %v2_e384, i1* %cpsr_c.global-to-local, align 1
  %v7_e384 = icmp eq i8 %v3_e364, 37
  store i1 %v7_e384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e384, label %dec_label_pc_e3cc, label %dec_label_pc_e3b4.preheader

dec_label_pc_e3b4.preheader:                      ; preds = %dec_label_pc_e384
  %v3_e388 = add i32 %v0_e04c, 28
  %v2_e38c = add i32 %v3_e388, %v3_e350
  store i32 %v2_e38c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e3b4

dec_label_pc_e398:                                ; preds = %bb355
  %v2_e398 = icmp ugt i8 %v3_e3bc, 35
  store i1 %v2_e398, i1* %cpsr_c.global-to-local, align 1
  %v7_e398 = icmp eq i8 %v3_e3bc, 36
  store i1 %v7_e398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e398, label %dec_label_pc_e3cc, label %dec_label_pc_e3a0

dec_label_pc_e3a0:                                ; preds = %dec_label_pc_e398
  %v2_e3a0 = icmp ugt i8 %v3_e3bc, 34
  store i1 %v2_e3a0, i1* %cpsr_c.global-to-local, align 1
  %v7_e3a0 = icmp eq i8 %v3_e3bc, 35
  store i1 %v7_e3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e3a0, label %dec_label_pc_e3cc, label %dec_label_pc_e3a8

dec_label_pc_e3a8:                                ; preds = %dec_label_pc_e3a0
  %v2_e3a8 = icmp ugt i8 %v3_e3bc, 36
  store i1 %v2_e3a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e3a8 = icmp eq i8 %v3_e3bc, 37
  store i1 %v7_e3a8, i1* %cpsr_z.global-to-local, align 1
  %v1_e3ac = add i32 %v0_e3ac, -1
  store i32 %v1_e3ac, i32* %r3.global-to-local, align 4
  br i1 %v7_e3a8, label %dec_label_pc_e3cc, label %dec_label_pc_e3b4

dec_label_pc_e3b4:                                ; preds = %dec_label_pc_e3b4.preheader, %dec_label_pc_e3a8
  %v0_e3ac = phi i32 [ %v2_e38c, %dec_label_pc_e3b4.preheader ], [ %v1_e3ac, %dec_label_pc_e3a8 ]
  %v0_e3b4 = phi i32 [ %v1_e354, %dec_label_pc_e3b4.preheader ], [ %v1_e3b4, %dec_label_pc_e3a8 ]
  %v1_e3b4 = add i32 %v0_e3b4, -1
  store i32 %v1_e3b4, i32* %r1.global-to-local, align 4
  %v2_e3b4 = icmp ne i32 %v0_e3b4, 0
  store i1 %v2_e3b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e3b4 = icmp eq i32 %v0_e3b4, 1
  store i1 %v7_e3b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e3b4, label %dec_label_pc_dfccthread-pre-split.thread484, label %dec_label_pc_e3bc

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e3b4
  %v1_e3bc = add i32 %v0_e3ac, -2
  %v2_e3bc = inttoptr i32 %v1_e3bc to i8*
  %v3_e3bc = load i8, i8* %v2_e3bc, align 1
  %v4_e3bc = zext i8 %v3_e3bc to i32
  store i32 %v4_e3bc, i32* %r2.global-to-local, align 4
  %v2_e3c0 = icmp ugt i8 %v3_e3bc, 61
  store i1 %v2_e3c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e3c0 = icmp eq i8 %v3_e3bc, 62
  store i1 %v7_e3c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e3c0, label %dec_label_pc_e3cc, label %bb355

bb355:                                            ; preds = %dec_label_pc_e3bc
  %v3_e3c4 = icmp ugt i8 %v3_e3bc, 57
  store i1 %v3_e3c4, i1* %cpsr_c.global-to-local, align 1
  %v8_e3c4 = icmp eq i8 %v3_e3bc, 58
  store i1 %v8_e3c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e3c4, label %dec_label_pc_e3cc, label %dec_label_pc_e398

dec_label_pc_e3cc:                                ; preds = %dec_label_pc_e3bc, %bb355, %dec_label_pc_e3a8, %dec_label_pc_e3a0, %dec_label_pc_e398, %dec_label_pc_e384, %dec_label_pc_e360, %dec_label_pc_e37c, %dec_label_pc_e374, %bb354
  %v0_e3d0 = phi i32 [ %v1_e354, %dec_label_pc_e384 ], [ %v1_e354, %dec_label_pc_e360 ], [ %v1_e354, %dec_label_pc_e37c ], [ %v1_e354, %dec_label_pc_e374 ], [ %v1_e354, %bb354 ], [ %v1_e3b4, %dec_label_pc_e398 ], [ %v1_e3b4, %dec_label_pc_e3a0 ], [ %v1_e3b4, %dec_label_pc_e3a8 ], [ %v1_e3b4, %bb355 ], [ %v1_e3b4, %dec_label_pc_e3bc ]
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_e3d0 = add i32 %v0_e3d0, 1
  store i32 %v1_e3d0, i32* @r7, align 4
  %v1_e3d4 = call i32 @function_edb4(i32 18)
  store i32 %v2_e63c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v3_e3e4 = call i32 @function_ecf0(i32 18, i32* nonnull %stack_var_-60)
  store i32 %v3_e3e4, i32* %r0.global-to-local, align 4
  %v3_e3e8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e3e8, i32* @r2, align 4
  store i32 %v3_e3e4, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e3f4 = load i32, i32* @r5, align 4
  %v1_e3f4 = add i32 %v0_e3f4, 4
  %v2_e3f4 = inttoptr i32 %v1_e3f4 to i32*
  %v3_e3f4 = load i32, i32* %v2_e3f4, align 4
  store i32 %v3_e3f4, i32* @r0, align 4
  %v4_e3f8 = call i32 @function_11708(i32 %v3_e3f4, i32 %v3_e3e4, i32 %v3_e3e8, i32 16384)
  store i32 %v4_e3f8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e408 = load i32, i32* @r5, align 4
  %v1_e408 = add i32 %v0_e408, 4
  %v2_e408 = inttoptr i32 %v1_e408 to i32*
  %v3_e408 = load i32, i32* %v2_e408, align 4
  store i32 %v3_e408, i32* @r0, align 4
  %v4_e40c = call i32 @function_11708(i32 %v3_e408, i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32 2, i32 16384)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_e414 = call i32 @function_ed14(i32 18)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_e41c = load i32, i32* @r5, align 4
  %v2_e41c = add i32 %v1_e41c, 12
  %v3_e41c = inttoptr i32 %v2_e41c to i32*
  store i32 7, i32* %v3_e41c, align 4
  br label %dec_label_pc_e180

dec_label_pc_e424:                                ; preds = %dec_label_pc_e04c
  %v1_e424 = add i32 %v0_e04c, 24
  %v2_e424 = inttoptr i32 %v1_e424 to i32*
  %v3_e424 = load i32, i32* %v2_e424, align 4
  store i32 %v3_e424, i32* %r2.global-to-local, align 4
  %v1_e428 = add i32 %v3_e424, -1
  store i32 %v1_e428, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e42c = icmp eq i32 %v1_e428, 0
  store i1 %v2_e42c, i1* %cpsr_z.global-to-local, align 1
  %tmp356 = icmp slt i32 %v1_e428, 1
  br i1 %tmp356, label %dec_label_pc_dfccthread-pre-split.thread, label %dec_label_pc_e434

dec_label_pc_e434:                                ; preds = %dec_label_pc_e424
  %v2_e434 = add i32 %v1_e428, %v0_e04c
  store i32 %v2_e434, i32* %r3.global-to-local, align 4
  %v1_e438 = add i32 %v2_e434, 28
  %v2_e438 = inttoptr i32 %v1_e438 to i8*
  %v3_e438 = load i8, i8* %v2_e438, align 1
  %v4_e438 = zext i8 %v3_e438 to i32
  store i32 %v4_e438, i32* %r3.global-to-local, align 4
  %v2_e43c = icmp ugt i8 %v3_e438, 61
  store i1 %v2_e43c, i1* %cpsr_c.global-to-local, align 1
  %v7_e43c = icmp eq i8 %v3_e438, 62
  store i1 %v7_e43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e43c, label %dec_label_pc_e4a0, label %bb357

bb357:                                            ; preds = %dec_label_pc_e434
  %v3_e440 = icmp ugt i8 %v3_e438, 57
  store i1 %v3_e440, i1* %cpsr_c.global-to-local, align 1
  %v8_e440 = icmp eq i8 %v3_e438, 58
  store i1 %v8_e440, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e440, label %dec_label_pc_e4a0, label %dec_label_pc_e448

dec_label_pc_e448:                                ; preds = %bb357
  %v2_e448 = icmp ugt i8 %v3_e438, 35
  store i1 %v2_e448, i1* %cpsr_c.global-to-local, align 1
  %v7_e448 = icmp eq i8 %v3_e438, 36
  store i1 %v7_e448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e448, label %dec_label_pc_e4a0, label %dec_label_pc_e450

dec_label_pc_e450:                                ; preds = %dec_label_pc_e448
  %v2_e450 = icmp ugt i8 %v3_e438, 34
  store i1 %v2_e450, i1* %cpsr_c.global-to-local, align 1
  %v7_e450 = icmp eq i8 %v3_e438, 35
  store i1 %v7_e450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e450, label %dec_label_pc_e4a0, label %dec_label_pc_e458

dec_label_pc_e458:                                ; preds = %dec_label_pc_e450
  %v2_e458 = icmp ugt i8 %v3_e438, 36
  store i1 %v2_e458, i1* %cpsr_c.global-to-local, align 1
  %v7_e458 = icmp eq i8 %v3_e438, 37
  store i1 %v7_e458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e458, label %dec_label_pc_e4a0, label %dec_label_pc_e488.preheader

dec_label_pc_e488.preheader:                      ; preds = %dec_label_pc_e458
  %v3_e45c = add i32 %v0_e04c, 28
  %v2_e460 = add i32 %v3_e45c, %v3_e424
  store i32 %v2_e460, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e488

dec_label_pc_e46c:                                ; preds = %bb358
  %v2_e46c = icmp ugt i8 %v3_e490, 35
  store i1 %v2_e46c, i1* %cpsr_c.global-to-local, align 1
  %v7_e46c = icmp eq i8 %v3_e490, 36
  store i1 %v7_e46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e46c, label %dec_label_pc_e4a0, label %dec_label_pc_e474

dec_label_pc_e474:                                ; preds = %dec_label_pc_e46c
  %v2_e474 = icmp ugt i8 %v3_e490, 34
  store i1 %v2_e474, i1* %cpsr_c.global-to-local, align 1
  %v7_e474 = icmp eq i8 %v3_e490, 35
  store i1 %v7_e474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e474, label %dec_label_pc_e4a0, label %dec_label_pc_e47c

dec_label_pc_e47c:                                ; preds = %dec_label_pc_e474
  %v2_e47c = icmp ugt i8 %v3_e490, 36
  store i1 %v2_e47c, i1* %cpsr_c.global-to-local, align 1
  %v7_e47c = icmp eq i8 %v3_e490, 37
  store i1 %v7_e47c, i1* %cpsr_z.global-to-local, align 1
  %v1_e480 = add i32 %v0_e480, -1
  store i32 %v1_e480, i32* %r3.global-to-local, align 4
  br i1 %v7_e47c, label %dec_label_pc_e4a0, label %dec_label_pc_e488

dec_label_pc_e488:                                ; preds = %dec_label_pc_e488.preheader, %dec_label_pc_e47c
  %v0_e480 = phi i32 [ %v2_e460, %dec_label_pc_e488.preheader ], [ %v1_e480, %dec_label_pc_e47c ]
  %v0_e488 = phi i32 [ %v1_e428, %dec_label_pc_e488.preheader ], [ %v1_e488, %dec_label_pc_e47c ]
  %v1_e488 = add i32 %v0_e488, -1
  store i32 %v1_e488, i32* %r1.global-to-local, align 4
  %v2_e488 = icmp ne i32 %v0_e488, 0
  store i1 %v2_e488, i1* %cpsr_c.global-to-local, align 1
  %v7_e488 = icmp eq i32 %v0_e488, 1
  store i1 %v7_e488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e488, label %dec_label_pc_dfccthread-pre-split.thread484, label %dec_label_pc_e490

dec_label_pc_e490:                                ; preds = %dec_label_pc_e488
  %v1_e490 = add i32 %v0_e480, -2
  %v2_e490 = inttoptr i32 %v1_e490 to i8*
  %v3_e490 = load i8, i8* %v2_e490, align 1
  %v4_e490 = zext i8 %v3_e490 to i32
  store i32 %v4_e490, i32* %r2.global-to-local, align 4
  %v2_e494 = icmp ugt i8 %v3_e490, 61
  store i1 %v2_e494, i1* %cpsr_c.global-to-local, align 1
  %v7_e494 = icmp eq i8 %v3_e490, 62
  store i1 %v7_e494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e494, label %dec_label_pc_e4a0, label %bb358

bb358:                                            ; preds = %dec_label_pc_e490
  %v3_e498 = icmp ugt i8 %v3_e490, 57
  store i1 %v3_e498, i1* %cpsr_c.global-to-local, align 1
  %v8_e498 = icmp eq i8 %v3_e490, 58
  store i1 %v8_e498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e498, label %dec_label_pc_e4a0, label %dec_label_pc_e46c

dec_label_pc_e4a0:                                ; preds = %dec_label_pc_e490, %bb358, %dec_label_pc_e47c, %dec_label_pc_e474, %dec_label_pc_e46c, %dec_label_pc_e458, %dec_label_pc_e434, %dec_label_pc_e450, %dec_label_pc_e448, %bb357
  %v0_e4a4 = phi i32 [ %v1_e428, %dec_label_pc_e458 ], [ %v1_e428, %dec_label_pc_e434 ], [ %v1_e428, %dec_label_pc_e450 ], [ %v1_e428, %dec_label_pc_e448 ], [ %v1_e428, %bb357 ], [ %v1_e488, %dec_label_pc_e46c ], [ %v1_e488, %dec_label_pc_e474 ], [ %v1_e488, %dec_label_pc_e47c ], [ %v1_e488, %bb358 ], [ %v1_e488, %dec_label_pc_e490 ]
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_e4a4 = add i32 %v0_e4a4, 1
  store i32 %v1_e4a4, i32* @r7, align 4
  %v1_e4a8 = call i32 @function_edb4(i32 20)
  store i32 %v2_e63c, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_e4b8 = call i32 @function_ecf0(i32 20, i32* nonnull %stack_var_-60)
  store i32 %v3_e4b8, i32* %r0.global-to-local, align 4
  %v3_e4bc = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e4bc, i32* @r2, align 4
  store i32 %v3_e4b8, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e4c8 = load i32, i32* @r5, align 4
  %v1_e4c8 = add i32 %v0_e4c8, 4
  %v2_e4c8 = inttoptr i32 %v1_e4c8 to i32*
  %v3_e4c8 = load i32, i32* %v2_e4c8, align 4
  store i32 %v3_e4c8, i32* @r0, align 4
  %v4_e4cc = call i32 @function_11708(i32 %v3_e4c8, i32 %v3_e4b8, i32 %v3_e4bc, i32 16384)
  store i32 %v4_e4cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e4dc = load i32, i32* @r5, align 4
  %v1_e4dc = add i32 %v0_e4dc, 4
  %v2_e4dc = inttoptr i32 %v1_e4dc to i32*
  %v3_e4dc = load i32, i32* %v2_e4dc, align 4
  store i32 %v3_e4dc, i32* @r0, align 4
  %v4_e4e0 = call i32 @function_11708(i32 %v3_e4dc, i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_e4e8 = call i32 @function_ed14(i32 20)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_e4f0 = load i32, i32* @r5, align 4
  %v2_e4f0 = add i32 %v1_e4f0, 12
  %v3_e4f0 = inttoptr i32 %v2_e4f0 to i32*
  store i32 9, i32* %v3_e4f0, align 4
  br label %dec_label_pc_e180

dec_label_pc_e4f8:                                ; preds = %dec_label_pc_e04c
  %v1_e4f8 = add i32 %v0_e04c, 24
  %v2_e4f8 = inttoptr i32 %v1_e4f8 to i32*
  %v3_e4f8 = load i32, i32* %v2_e4f8, align 4
  store i32 %v3_e4f8, i32* %r2.global-to-local, align 4
  %v1_e4fc = add i32 %v3_e4f8, -1
  store i32 %v1_e4fc, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e500 = icmp eq i32 %v1_e4fc, 0
  store i1 %v2_e500, i1* %cpsr_z.global-to-local, align 1
  %tmp359 = icmp slt i32 %v1_e4fc, 1
  br i1 %tmp359, label %dec_label_pc_dfccthread-pre-split.thread, label %dec_label_pc_e508

dec_label_pc_e508:                                ; preds = %dec_label_pc_e4f8
  %v2_e508 = add i32 %v1_e4fc, %v0_e04c
  store i32 %v2_e508, i32* %r3.global-to-local, align 4
  %v1_e50c = add i32 %v2_e508, 28
  %v2_e50c = inttoptr i32 %v1_e50c to i8*
  %v3_e50c = load i8, i8* %v2_e50c, align 1
  %v4_e50c = zext i8 %v3_e50c to i32
  store i32 %v4_e50c, i32* %r3.global-to-local, align 4
  %v2_e510 = icmp ugt i8 %v3_e50c, 61
  store i1 %v2_e510, i1* %cpsr_c.global-to-local, align 1
  %v7_e510 = icmp eq i8 %v3_e50c, 62
  store i1 %v7_e510, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e510, label %dec_label_pc_e62c, label %bb360

bb360:                                            ; preds = %dec_label_pc_e508
  %v3_e514 = icmp ugt i8 %v3_e50c, 57
  store i1 %v3_e514, i1* %cpsr_c.global-to-local, align 1
  %v8_e514 = icmp eq i8 %v3_e50c, 58
  store i1 %v8_e514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e514, label %dec_label_pc_e62c, label %dec_label_pc_e51c

dec_label_pc_e51c:                                ; preds = %bb360
  %v2_e51c = icmp ugt i8 %v3_e50c, 35
  store i1 %v2_e51c, i1* %cpsr_c.global-to-local, align 1
  %v7_e51c = icmp eq i8 %v3_e50c, 36
  store i1 %v7_e51c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e51c, label %dec_label_pc_e62c, label %dec_label_pc_e524

dec_label_pc_e524:                                ; preds = %dec_label_pc_e51c
  %v2_e524 = icmp ugt i8 %v3_e50c, 34
  store i1 %v2_e524, i1* %cpsr_c.global-to-local, align 1
  %v7_e524 = icmp eq i8 %v3_e50c, 35
  store i1 %v7_e524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e524, label %dec_label_pc_e62c, label %dec_label_pc_e52c

dec_label_pc_e52c:                                ; preds = %dec_label_pc_e524
  %v2_e52c = icmp ugt i8 %v3_e50c, 36
  store i1 %v2_e52c, i1* %cpsr_c.global-to-local, align 1
  %v7_e52c = icmp eq i8 %v3_e50c, 37
  store i1 %v7_e52c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e52c, label %dec_label_pc_e62c, label %dec_label_pc_e614.preheader

dec_label_pc_e614.preheader:                      ; preds = %dec_label_pc_e52c
  %v3_e530 = add i32 %v0_e04c, 28
  %v2_e534 = add i32 %v3_e530, %v3_e4f8
  store i32 %v2_e534, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e614

bb361:                                            ; preds = %bb362
  %v2_e5f8 = icmp ugt i8 %v3_e61c, 35
  store i1 %v2_e5f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e5f8 = icmp eq i8 %v3_e61c, 36
  store i1 %v7_e5f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5f8, label %dec_label_pc_e62c, label %dec_label_pc_e600

dec_label_pc_e600:                                ; preds = %bb361
  %v2_e600 = icmp ugt i8 %v3_e61c, 34
  store i1 %v2_e600, i1* %cpsr_c.global-to-local, align 1
  %v7_e600 = icmp eq i8 %v3_e61c, 35
  store i1 %v7_e600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e600, label %dec_label_pc_e62c, label %dec_label_pc_e608

dec_label_pc_e608:                                ; preds = %dec_label_pc_e600
  %v2_e608 = icmp ugt i8 %v3_e61c, 36
  store i1 %v2_e608, i1* %cpsr_c.global-to-local, align 1
  %v7_e608 = icmp eq i8 %v3_e61c, 37
  store i1 %v7_e608, i1* %cpsr_z.global-to-local, align 1
  %v1_e60c = add i32 %v0_e60c, -1
  store i32 %v1_e60c, i32* %r3.global-to-local, align 4
  br i1 %v7_e608, label %dec_label_pc_e62c, label %dec_label_pc_e614

dec_label_pc_e614:                                ; preds = %dec_label_pc_e614.preheader, %dec_label_pc_e608
  %v0_e60c = phi i32 [ %v2_e534, %dec_label_pc_e614.preheader ], [ %v1_e60c, %dec_label_pc_e608 ]
  %v0_e614 = phi i32 [ %v1_e4fc, %dec_label_pc_e614.preheader ], [ %v1_e614, %dec_label_pc_e608 ]
  %v1_e614 = add i32 %v0_e614, -1
  store i32 %v1_e614, i32* %r1.global-to-local, align 4
  %v2_e614 = icmp ne i32 %v0_e614, 0
  store i1 %v2_e614, i1* %cpsr_c.global-to-local, align 1
  %v7_e614 = icmp eq i32 %v0_e614, 1
  store i1 %v7_e614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e614, label %dec_label_pc_dfccthread-pre-split.thread484, label %dec_label_pc_e61c

dec_label_pc_e61c:                                ; preds = %dec_label_pc_e614
  %v1_e61c = add i32 %v0_e60c, -2
  %v2_e61c = inttoptr i32 %v1_e61c to i8*
  %v3_e61c = load i8, i8* %v2_e61c, align 1
  %v4_e61c = zext i8 %v3_e61c to i32
  store i32 %v4_e61c, i32* %r2.global-to-local, align 4
  %v2_e620 = icmp ugt i8 %v3_e61c, 61
  store i1 %v2_e620, i1* %cpsr_c.global-to-local, align 1
  %v7_e620 = icmp eq i8 %v3_e61c, 62
  store i1 %v7_e620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e620, label %dec_label_pc_e62c, label %bb362

bb362:                                            ; preds = %dec_label_pc_e61c
  %v3_e624 = icmp ugt i8 %v3_e61c, 57
  store i1 %v3_e624, i1* %cpsr_c.global-to-local, align 1
  %v8_e624 = icmp eq i8 %v3_e61c, 58
  store i1 %v8_e624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e624, label %dec_label_pc_e62c, label %bb361

dec_label_pc_e62c:                                ; preds = %dec_label_pc_e61c, %bb362, %dec_label_pc_e608, %dec_label_pc_e600, %bb361, %dec_label_pc_e52c, %dec_label_pc_e508, %dec_label_pc_e524, %dec_label_pc_e51c, %bb360
  %v0_e630 = phi i32 [ %v1_e4fc, %dec_label_pc_e52c ], [ %v1_e4fc, %dec_label_pc_e508 ], [ %v1_e4fc, %dec_label_pc_e524 ], [ %v1_e4fc, %dec_label_pc_e51c ], [ %v1_e4fc, %bb360 ], [ %v1_e614, %bb361 ], [ %v1_e614, %dec_label_pc_e600 ], [ %v1_e614, %dec_label_pc_e608 ], [ %v1_e614, %bb362 ], [ %v1_e614, %dec_label_pc_e61c ]
  store i32 17, i32* %r0.global-to-local, align 4
  %v1_e630 = add i32 %v0_e630, 1
  store i32 %v1_e630, i32* @r7, align 4
  %v1_e634 = call i32 @function_edb4(i32 17)
  store i32 %v2_e63c, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r0.global-to-local, align 4
  %v3_e644 = call i32 @function_ecf0(i32 17, i32* nonnull %stack_var_-60)
  store i32 %v3_e644, i32* %r0.global-to-local, align 4
  %v3_e648 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e648, i32* @r2, align 4
  store i32 %v3_e644, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e654 = load i32, i32* @r5, align 4
  %v1_e654 = add i32 %v0_e654, 4
  %v2_e654 = inttoptr i32 %v1_e654 to i32*
  %v3_e654 = load i32, i32* %v2_e654, align 4
  store i32 %v3_e654, i32* @r0, align 4
  %v4_e658 = call i32 @function_11708(i32 %v3_e654, i32 %v3_e644, i32 %v3_e648, i32 16384)
  store i32 %v4_e658, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e668 = load i32, i32* @r5, align 4
  %v1_e668 = add i32 %v0_e668, 4
  %v2_e668 = inttoptr i32 %v1_e668 to i32*
  %v3_e668 = load i32, i32* %v2_e668, align 4
  store i32 %v3_e668, i32* @r0, align 4
  %v4_e66c = call i32 @function_11708(i32 %v3_e668, i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32 2, i32 16384)
  store i32 17, i32* %r0.global-to-local, align 4
  %v1_e674 = call i32 @function_ed14(i32 17)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_e67c = load i32, i32* @r5, align 4
  %v2_e67c = add i32 %v1_e67c, 12
  %v3_e67c = inttoptr i32 %v2_e67c to i32*
  store i32 6, i32* %v3_e67c, align 4
  br label %dec_label_pc_e180

dec_label_pc_e684:                                ; preds = %dec_label_pc_e04c
  %v1_e684 = add i32 %v0_e04c, 24
  %v2_e684 = inttoptr i32 %v1_e684 to i32*
  %v3_e684 = load i32, i32* %v2_e684, align 4
  store i32 %v3_e684, i32* %r1.global-to-local, align 4
  %v1_e688 = add i32 %v3_e684, -1
  store i32 %v1_e688, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e68c = icmp eq i32 %v1_e688, 0
  store i1 %v2_e68c, i1* %cpsr_z.global-to-local, align 1
  %tmp363 = icmp slt i32 %v1_e688, 1
  br i1 %tmp363, label %dec_label_pc_e700, label %dec_label_pc_e694

dec_label_pc_e694:                                ; preds = %dec_label_pc_e684
  %v2_e694 = add i32 %v1_e688, %v0_e04c
  store i32 %v2_e694, i32* %r3.global-to-local, align 4
  %v1_e698 = add i32 %v2_e694, 28
  %v2_e698 = inttoptr i32 %v1_e698 to i8*
  %v3_e698 = load i8, i8* %v2_e698, align 1
  %v4_e698 = zext i8 %v3_e698 to i32
  store i32 %v4_e698, i32* %r3.global-to-local, align 4
  %v2_e69c = icmp ugt i8 %v3_e698, 61
  store i1 %v2_e69c, i1* %cpsr_c.global-to-local, align 1
  %v7_e69c = icmp eq i8 %v3_e698, 62
  store i1 %v7_e69c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e69c, label %dec_label_pc_e940, label %bb364

bb364:                                            ; preds = %dec_label_pc_e694
  %v3_e6a0 = icmp ugt i8 %v3_e698, 57
  store i1 %v3_e6a0, i1* %cpsr_c.global-to-local, align 1
  %v8_e6a0 = icmp eq i8 %v3_e698, 58
  store i1 %v8_e6a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e6a0, label %dec_label_pc_e940, label %dec_label_pc_e6a8

dec_label_pc_e6a8:                                ; preds = %bb364
  %v2_e6a8 = icmp ugt i8 %v3_e698, 35
  store i1 %v2_e6a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e6a8 = icmp eq i8 %v3_e698, 36
  store i1 %v7_e6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6a8, label %dec_label_pc_e940, label %dec_label_pc_e6b0

dec_label_pc_e6b0:                                ; preds = %dec_label_pc_e6a8
  %v2_e6b0 = icmp ugt i8 %v3_e698, 34
  store i1 %v2_e6b0, i1* %cpsr_c.global-to-local, align 1
  %v7_e6b0 = icmp eq i8 %v3_e698, 35
  store i1 %v7_e6b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6b0, label %dec_label_pc_e940, label %dec_label_pc_e6b8

dec_label_pc_e6b8:                                ; preds = %dec_label_pc_e6b0
  %v2_e6b8 = icmp ugt i8 %v3_e698, 36
  store i1 %v2_e6b8, i1* %cpsr_c.global-to-local, align 1
  %v7_e6b8 = icmp eq i8 %v3_e698, 37
  store i1 %v7_e6b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6b8, label %dec_label_pc_e940, label %dec_label_pc_e6f8.preheader

dec_label_pc_e6f8.preheader:                      ; preds = %dec_label_pc_e6b8
  %v3_e6bc = add i32 %v0_e04c, 28
  %v2_e6c0 = add i32 %v3_e6bc, %v3_e684
  store i32 %v2_e6c0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e6f8

dec_label_pc_e6cc:                                ; preds = %dec_label_pc_e6f8
  %v1_e6cc = add i32 %v0_e6f0, -2
  %v2_e6cc = inttoptr i32 %v1_e6cc to i8*
  %v3_e6cc = load i8, i8* %v2_e6cc, align 1
  %v4_e6cc = zext i8 %v3_e6cc to i32
  store i32 %v4_e6cc, i32* %r2.global-to-local, align 4
  %v2_e6d0 = icmp ugt i8 %v3_e6cc, 61
  store i1 %v2_e6d0, i1* %cpsr_c.global-to-local, align 1
  %v7_e6d0 = icmp eq i8 %v3_e6cc, 62
  store i1 %v7_e6d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6d0, label %dec_label_pc_e940, label %bb365

bb365:                                            ; preds = %dec_label_pc_e6cc
  %v3_e6d4 = icmp ugt i8 %v3_e6cc, 57
  store i1 %v3_e6d4, i1* %cpsr_c.global-to-local, align 1
  %v8_e6d4 = icmp eq i8 %v3_e6cc, 58
  store i1 %v8_e6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e6d4, label %dec_label_pc_e940, label %dec_label_pc_e6dc

dec_label_pc_e6dc:                                ; preds = %bb365
  %v2_e6dc = icmp ugt i8 %v3_e6cc, 35
  store i1 %v2_e6dc, i1* %cpsr_c.global-to-local, align 1
  %v7_e6dc = icmp eq i8 %v3_e6cc, 36
  store i1 %v7_e6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6dc, label %dec_label_pc_e940, label %dec_label_pc_e6e4

dec_label_pc_e6e4:                                ; preds = %dec_label_pc_e6dc
  %v2_e6e4 = icmp ugt i8 %v3_e6cc, 34
  store i1 %v2_e6e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e6e4 = icmp eq i8 %v3_e6cc, 35
  store i1 %v7_e6e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6e4, label %dec_label_pc_e940, label %dec_label_pc_e6ec

dec_label_pc_e6ec:                                ; preds = %dec_label_pc_e6e4
  %v2_e6ec = icmp ugt i8 %v3_e6cc, 36
  store i1 %v2_e6ec, i1* %cpsr_c.global-to-local, align 1
  %v7_e6ec = icmp eq i8 %v3_e6cc, 37
  store i1 %v7_e6ec, i1* %cpsr_z.global-to-local, align 1
  %v1_e6f0 = add i32 %v0_e6f0, -1
  store i32 %v1_e6f0, i32* %r3.global-to-local, align 4
  br i1 %v7_e6ec, label %dec_label_pc_e940, label %dec_label_pc_e6f8

dec_label_pc_e6f8:                                ; preds = %dec_label_pc_e6f8.preheader, %dec_label_pc_e6ec
  %v0_e6f0 = phi i32 [ %v2_e6c0, %dec_label_pc_e6f8.preheader ], [ %v1_e6f0, %dec_label_pc_e6ec ]
  %v0_e6f8 = phi i32 [ %v1_e688, %dec_label_pc_e6f8.preheader ], [ %v1_e6f8, %dec_label_pc_e6ec ]
  %v1_e6f8 = add i32 %v0_e6f8, -1
  store i32 %v1_e6f8, i32* %r0.global-to-local, align 4
  %v2_e6f8 = icmp ne i32 %v0_e6f8, 0
  store i1 %v2_e6f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e6f8 = icmp eq i32 %v0_e6f8, 1
  store i1 %v7_e6f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6f8, label %dec_label_pc_e700, label %dec_label_pc_e6cc

dec_label_pc_e700:                                ; preds = %dec_label_pc_e6f8, %dec_label_pc_e684
  %v0_e700 = load i32, i32* @sl, align 4
  store i32 %v0_e700, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1656c.215 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_e70c = call i32 @function_f2c8(i32 %v0_e700, i32 %v3_e684, i32 ptrtoint ([5 x i8]* @global_var_1656c.215 to i32), i32 4)
  store i32 %v5_e70c, i32* %r0.global-to-local, align 4
  %v2_e710 = icmp eq i32 %v5_e70c, -1
  store i1 %v2_e710, i1* %cpsr_c.global-to-local, align 1
  %v7_e710 = icmp eq i32 %v5_e70c, -1
  store i1 %v7_e710, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_e70c, i32* @r7, align 4
  br i1 %v7_e710, label %dec_label_pc_ebac, label %dec_label_pc_e71c

dec_label_pc_e71c:                                ; preds = %dec_label_pc_ebac, %dec_label_pc_e700
  %v0_e71c = phi i32 [ %v5_ebbc, %dec_label_pc_ebac ], [ %v5_e70c, %dec_label_pc_e700 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e71c = icmp eq i32 %v0_e71c, 0
  store i1 %v2_e71c, i1* %cpsr_z.global-to-local, align 1
  %tmp366 = icmp slt i32 %v0_e71c, 1
  br i1 %tmp366, label %dec_label_pc_e7b8, label %dec_label_pc_e71c.dec_label_pc_e944_crit_edge

dec_label_pc_e71c.dec_label_pc_e944_crit_edge:    ; preds = %dec_label_pc_e71c
  %v0_e944.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_e944

dec_label_pc_e728:                                ; preds = %dec_label_pc_e04c
  %v1_e728 = add i32 %v0_e04c, 24
  %v2_e728 = inttoptr i32 %v1_e728 to i32*
  %v3_e728 = load i32, i32* %v2_e728, align 4
  store i32 %v3_e728, i32* %r1.global-to-local, align 4
  %v1_e72c = add i32 %v3_e728, -1
  store i32 %v1_e72c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e730 = icmp eq i32 %v1_e72c, 0
  store i1 %v2_e730, i1* %cpsr_z.global-to-local, align 1
  %tmp367 = icmp slt i32 %v1_e72c, 1
  br i1 %tmp367, label %dec_label_pc_e794, label %dec_label_pc_e738

dec_label_pc_e738:                                ; preds = %dec_label_pc_e728
  %v2_e738 = add i32 %v1_e72c, %v0_e04c
  store i32 %v2_e738, i32* %r3.global-to-local, align 4
  %v1_e73c = add i32 %v2_e738, 28
  %v2_e73c = inttoptr i32 %v1_e73c to i8*
  %v3_e73c = load i8, i8* %v2_e73c, align 1
  %v4_e73c = zext i8 %v3_e73c to i32
  store i32 %v4_e73c, i32* %r3.global-to-local, align 4
  %v2_e740 = icmp ugt i8 %v3_e73c, 61
  store i1 %v2_e740, i1* %cpsr_c.global-to-local, align 1
  %v7_e740 = icmp eq i8 %v3_e73c, 62
  store i1 %v7_e740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e740, label %dec_label_pc_e904, label %bb368

bb368:                                            ; preds = %dec_label_pc_e738
  %v3_e744 = icmp ugt i8 %v3_e73c, 57
  store i1 %v3_e744, i1* %cpsr_c.global-to-local, align 1
  %v8_e744 = icmp eq i8 %v3_e73c, 58
  store i1 %v8_e744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e744, label %dec_label_pc_e904, label %dec_label_pc_e74c

dec_label_pc_e74c:                                ; preds = %bb368
  %v2_e74c = icmp ugt i8 %v3_e73c, 35
  store i1 %v2_e74c, i1* %cpsr_c.global-to-local, align 1
  %v7_e74c = icmp eq i8 %v3_e73c, 36
  store i1 %v7_e74c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e74c, label %dec_label_pc_e904, label %dec_label_pc_e754

dec_label_pc_e754:                                ; preds = %dec_label_pc_e74c
  %v2_e754 = icmp ugt i8 %v3_e73c, 34
  store i1 %v2_e754, i1* %cpsr_c.global-to-local, align 1
  %v7_e754 = icmp eq i8 %v3_e73c, 35
  store i1 %v7_e754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e754, label %dec_label_pc_e904, label %dec_label_pc_e78c.preheader

dec_label_pc_e78c.preheader:                      ; preds = %dec_label_pc_e754
  %v3_e758 = add i32 %v0_e04c, 28
  %v2_e75c = add i32 %v3_e758, %v3_e728
  store i32 %v2_e75c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e78c

dec_label_pc_e768:                                ; preds = %dec_label_pc_e78c
  %v1_e768 = add i32 %v0_e784, -2
  %v2_e768 = inttoptr i32 %v1_e768 to i8*
  %v3_e768 = load i8, i8* %v2_e768, align 1
  %v4_e768 = zext i8 %v3_e768 to i32
  store i32 %v4_e768, i32* %r2.global-to-local, align 4
  %v2_e76c = icmp ugt i8 %v3_e768, 61
  store i1 %v2_e76c, i1* %cpsr_c.global-to-local, align 1
  %v7_e76c = icmp eq i8 %v3_e768, 62
  store i1 %v7_e76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e76c, label %dec_label_pc_e904, label %bb369

bb369:                                            ; preds = %dec_label_pc_e768
  %v3_e770 = icmp ugt i8 %v3_e768, 57
  store i1 %v3_e770, i1* %cpsr_c.global-to-local, align 1
  %v8_e770 = icmp eq i8 %v3_e768, 58
  store i1 %v8_e770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e770, label %dec_label_pc_e904, label %dec_label_pc_e778

dec_label_pc_e778:                                ; preds = %bb369
  %v2_e778 = icmp ugt i8 %v3_e768, 35
  store i1 %v2_e778, i1* %cpsr_c.global-to-local, align 1
  %v7_e778 = icmp eq i8 %v3_e768, 36
  store i1 %v7_e778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e778, label %dec_label_pc_e904, label %dec_label_pc_e780

dec_label_pc_e780:                                ; preds = %dec_label_pc_e778
  %v2_e780 = icmp ugt i8 %v3_e768, 34
  store i1 %v2_e780, i1* %cpsr_c.global-to-local, align 1
  %v7_e780 = icmp eq i8 %v3_e768, 35
  store i1 %v7_e780, i1* %cpsr_z.global-to-local, align 1
  %v1_e784 = add i32 %v0_e784, -1
  store i32 %v1_e784, i32* %r3.global-to-local, align 4
  br i1 %v7_e780, label %dec_label_pc_e904, label %dec_label_pc_e78c

dec_label_pc_e78c:                                ; preds = %dec_label_pc_e78c.preheader, %dec_label_pc_e780
  %v0_e784 = phi i32 [ %v2_e75c, %dec_label_pc_e78c.preheader ], [ %v1_e784, %dec_label_pc_e780 ]
  %v0_e78c = phi i32 [ %v1_e72c, %dec_label_pc_e78c.preheader ], [ %v1_e78c, %dec_label_pc_e780 ]
  %v1_e78c = add i32 %v0_e78c, -1
  store i32 %v1_e78c, i32* %r0.global-to-local, align 4
  %v2_e78c = icmp ne i32 %v0_e78c, 0
  store i1 %v2_e78c, i1* %cpsr_c.global-to-local, align 1
  %v7_e78c = icmp eq i32 %v0_e78c, 1
  store i1 %v7_e78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e78c, label %dec_label_pc_e794, label %dec_label_pc_e768

dec_label_pc_e794:                                ; preds = %dec_label_pc_e78c, %dec_label_pc_e728
  %v0_e794 = load i32, i32* @sl, align 4
  store i32 %v0_e794, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16574.217 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_e7a0 = call i32 @function_f2c8(i32 %v0_e794, i32 %v3_e728, i32 ptrtoint ([8 x i8]* @global_var_16574.217 to i32), i32 7)
  store i32 %v5_e7a0, i32* %r0.global-to-local, align 4
  %v2_e7a4 = icmp eq i32 %v5_e7a0, -1
  store i1 %v2_e7a4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7a4 = icmp eq i32 %v5_e7a0, -1
  store i1 %v7_e7a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_e7a0, i32* @r7, align 4
  br i1 %v7_e7a4, label %dec_label_pc_dfc8.loopexit, label %dec_label_pc_e7b0

dec_label_pc_e7b0:                                ; preds = %dec_label_pc_e794
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7b0 = icmp eq i32 %v5_e7a0, 0
  store i1 %v2_e7b0, i1* %cpsr_z.global-to-local, align 1
  %v5_e7b4 = icmp sgt i32 %v5_e7a0, 0
  br i1 %v5_e7b4, label %dec_label_pc_e7b0.dec_label_pc_e908_crit_edge, label %dec_label_pc_e7b8

dec_label_pc_e7b0.dec_label_pc_e908_crit_edge:    ; preds = %dec_label_pc_e7b0
  %v0_e908.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_e908

dec_label_pc_e7b8:                                ; preds = %dec_label_pc_e884, %bb373, %dec_label_pc_e7b0, %dec_label_pc_e71c, %dec_label_pc_e9f0, %dec_label_pc_e908, %dec_label_pc_e944, %dec_label_pc_ea34
  %v0_e7b8 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7b8 = icmp eq i32 %v0_e7b8, 0
  store i1 %v2_e7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7b8, label %dec_label_pc_dfc8.loopexit, label %dec_label_pc_e180

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e04c
  %v1_e7c4 = add i32 %v0_e04c, 24
  %v2_e7c4 = inttoptr i32 %v1_e7c4 to i32*
  %v3_e7c4 = load i32, i32* %v2_e7c4, align 4
  store i32 %v3_e7c4, i32* %r2.global-to-local, align 4
  %v0_e7c8 = load i32, i32* @sl, align 4
  store i32 %v0_e7c8, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_e7d0123 = icmp eq i32 %v3_e7c4, 0
  store i1 %v9_e7d0123, i1* %cpsr_z.global-to-local, align 1
  %v7_e7d4124 = icmp sgt i32 %v3_e7c4, 0
  br i1 %v7_e7d4124, label %dec_label_pc_e7d8.preheader, label %dec_label_pc_e884

dec_label_pc_e7d0.loopexit:                       ; preds = %dec_label_pc_e7f4
  %v2_e7fc = add i32 %v1_e7fc, 2
  store i32 %v2_e7fc, i32* @r4, align 4
  %v2_e800 = add i32 %v1_e800, 2
  store i32 %v2_e800, i32* @r7, align 4
  %v3_e7d0 = icmp uge i32 %v0_e7d0, %v2_e800
  store i1 %v3_e7d0, i1* %cpsr_c.global-to-local, align 1
  %v9_e7d0 = icmp eq i32 %v0_e7d0, %v2_e800
  store i1 %v9_e7d0, i1* %cpsr_z.global-to-local, align 1
  %v7_e7d4 = icmp sgt i32 %v0_e7d0, %v2_e800
  br i1 %v7_e7d4, label %dec_label_pc_e7d8.preheader, label %dec_label_pc_e884

dec_label_pc_e7d8.preheader:                      ; preds = %dec_label_pc_e7c4, %dec_label_pc_e7d0.loopexit
  %v6_e88c207 = phi i32 [ %v6_e88c208, %dec_label_pc_e7d0.loopexit ], [ %v0_e04c, %dec_label_pc_e7c4 ]
  %v1_e800190 = phi i32 [ %v2_e800, %dec_label_pc_e7d0.loopexit ], [ 0, %dec_label_pc_e7c4 ]
  %v1_e7e4188 = phi i32 [ %v0_e7d0, %dec_label_pc_e7d0.loopexit ], [ %v3_e7c4, %dec_label_pc_e7c4 ]
  %v0_e7d8186 = phi i32 [ %v2_e7fc, %dec_label_pc_e7d0.loopexit ], [ %v0_e7c8, %dec_label_pc_e7c4 ]
  br label %dec_label_pc_e7d8

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e7d8.preheader, %dec_label_pc_e868
  %v6_e88c208 = phi i32 [ %v6_e88c207, %dec_label_pc_e7d8.preheader ], [ %v0_e870, %dec_label_pc_e868 ]
  %v1_e800 = phi i32 [ %v1_e800190, %dec_label_pc_e7d8.preheader ], [ %v1_e874, %dec_label_pc_e868 ]
  %v0_e7d0 = phi i32 [ %v1_e7e4188, %dec_label_pc_e7d8.preheader ], [ %v3_e870, %dec_label_pc_e868 ]
  %v1_e7fc = phi i32 [ %v0_e7d8186, %dec_label_pc_e7d8.preheader ], [ %v1_e87c, %dec_label_pc_e868 ]
  %v1_e7d8 = inttoptr i32 %v1_e7fc to i8*
  %v2_e7d8 = load i8, i8* %v1_e7d8, align 1
  %v3_e7d8 = zext i8 %v2_e7d8 to i32
  store i32 %v3_e7d8, i32* %r3.global-to-local, align 4
  %v2_e7dc = icmp eq i8 %v2_e7d8, -1
  store i1 %v2_e7dc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_e7dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7dc, label %dec_label_pc_e7e4, label %dec_label_pc_e884

dec_label_pc_e7e4:                                ; preds = %dec_label_pc_e7d8
  %v0_e7e4 = load i32, i32* @sl, align 4
  %v2_e7e4 = add i32 %v0_e7e4, %v0_e7d0
  store i32 %v2_e7e4, i32* %r1.global-to-local, align 4
  %v1_e7e8 = add i32 %v1_e7fc, 1
  store i32 %v1_e7e8, i32* @r6, align 4
  %v3_e7ec = icmp uge i32 %v2_e7e4, %v1_e7e8
  store i1 %v3_e7ec, i1* %cpsr_c.global-to-local, align 1
  %v9_e7ec = icmp eq i32 %v2_e7e4, %v1_e7e8
  store i1 %v9_e7ec, i1* %cpsr_z.global-to-local, align 1
  %v2_e7f0 = xor i1 %v3_e7ec, true
  %v3_e7f0 = or i1 %v9_e7ec, %v2_e7f0
  br i1 %v3_e7f0, label %dec_label_pc_e884, label %dec_label_pc_e7f4

dec_label_pc_e7f4:                                ; preds = %dec_label_pc_e7e4
  %v2_e7f4 = inttoptr i32 %v1_e7e8 to i8*
  %v3_e7f4 = load i8, i8* %v2_e7f4, align 1
  %v4_e7f4 = zext i8 %v3_e7f4 to i32
  store i32 %v4_e7f4, i32* @r3, align 4
  %v2_e7f8 = icmp eq i8 %v3_e7f4, -1
  store i1 %v2_e7f8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_e7f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7f8, label %dec_label_pc_e7d0.loopexit, label %dec_label_pc_e808

dec_label_pc_e808:                                ; preds = %dec_label_pc_e7f4
  %v2_e808 = icmp ugt i8 %v3_e7f4, -4
  store i1 %v2_e808, i1* %cpsr_c.global-to-local, align 1
  %v7_e808 = icmp eq i8 %v3_e7f4, -3
  store i1 %v7_e808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e808, label %dec_label_pc_e894, label %dec_label_pc_e810

dec_label_pc_e810:                                ; preds = %dec_label_pc_e808
  %v1_e810 = add i32 %v1_e7fc, 2
  store i32 %v1_e810, i32* %r3.global-to-local, align 4
  %v3_e814 = icmp uge i32 %v2_e7e4, %v1_e810
  store i1 %v3_e814, i1* %cpsr_c.global-to-local, align 1
  %v9_e814 = icmp eq i32 %v2_e7e4, %v1_e810
  store i1 %v9_e814, i1* %cpsr_z.global-to-local, align 1
  %v2_e818 = xor i1 %v3_e814, true
  %v3_e818 = or i1 %v9_e814, %v2_e818
  br i1 %v3_e818, label %dec_label_pc_e884, label %dec_label_pc_e81c

dec_label_pc_e81c:                                ; preds = %dec_label_pc_e8f4, %bb374, %.thread98, %dec_label_pc_e810
  %v0_e81c = load i32, i32* @r6, align 4
  %v1_e81c = inttoptr i32 %v0_e81c to i8*
  %v2_e81c = load i8, i8* %v1_e81c, align 1
  %v3_e81c = zext i8 %v2_e81c to i32
  store i32 %v3_e81c, i32* %r3.global-to-local, align 4
  %v2_e820 = icmp ugt i8 %v2_e81c, -4
  store i1 %v2_e820, i1* %cpsr_c.global-to-local, align 1
  %v7_e820 = icmp eq i8 %v2_e81c, -3
  store i1 %v7_e820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e820, label %.thread90, label %dec_label_pc_e830

.thread90:                                        ; preds = %dec_label_pc_e81c
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_e81c, align 1
  %v0_e82c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e82c.pr.pr, label %.thread93, label %.thread90.dec_label_pc_e830thread-pre-split_crit_edge

.thread90.dec_label_pc_e830thread-pre-split_crit_edge: ; preds = %.thread90
  %v0_e830.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e830

dec_label_pc_e830:                                ; preds = %dec_label_pc_e81c, %.thread90.dec_label_pc_e830thread-pre-split_crit_edge
  %v0_e830.pr = phi i32 [ %v0_e830.pr.pre, %.thread90.dec_label_pc_e830thread-pre-split_crit_edge ], [ %v3_e81c, %dec_label_pc_e81c ]
  %v2_e830 = icmp ugt i32 %v0_e830.pr, 250
  store i1 %v2_e830, i1* %cpsr_c.global-to-local, align 1
  %v7_e830 = icmp eq i32 %v0_e830.pr, 251
  store i1 %v7_e830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e830, label %bb370, label %.thread93

bb370:                                            ; preds = %dec_label_pc_e830
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_e838 = load i32, i32* @r6, align 4
  %v4_e838 = inttoptr i32 %v3_e838 to i8*
  store i8 -3, i8* %v4_e838, align 1
  br label %.thread93

.thread93:                                        ; preds = %dec_label_pc_e830, %.thread90, %bb370
  %v0_e83c = load i32, i32* @r4, align 4
  %v1_e83c = add i32 %v0_e83c, 2
  %v2_e83c = inttoptr i32 %v1_e83c to i8*
  %v3_e83c = load i8, i8* %v2_e83c, align 1
  %v4_e83c = zext i8 %v3_e83c to i32
  store i32 %v4_e83c, i32* %r3.global-to-local, align 4
  %v2_e840 = icmp ugt i8 %v3_e83c, -4
  store i1 %v2_e840, i1* %cpsr_c.global-to-local, align 1
  %v7_e840 = icmp eq i8 %v3_e83c, -3
  store i1 %v7_e840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e840, label %.thread94, label %dec_label_pc_e850

.thread94:                                        ; preds = %.thread93
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_e83c, align 1
  %v0_e84c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e84c.pr.pr, label %.thread97, label %.thread94.dec_label_pc_e850thread-pre-split_crit_edge

.thread94.dec_label_pc_e850thread-pre-split_crit_edge: ; preds = %.thread94
  %v0_e850.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e850

dec_label_pc_e850:                                ; preds = %.thread93, %.thread94.dec_label_pc_e850thread-pre-split_crit_edge
  %v0_e850.pr = phi i32 [ %v0_e850.pr.pre, %.thread94.dec_label_pc_e850thread-pre-split_crit_edge ], [ %v4_e83c, %.thread93 ]
  %v2_e850 = icmp ugt i32 %v0_e850.pr, 250
  store i1 %v2_e850, i1* %cpsr_c.global-to-local, align 1
  %v7_e850 = icmp eq i32 %v0_e850.pr, 251
  store i1 %v7_e850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e850, label %bb371, label %.thread97

bb371:                                            ; preds = %dec_label_pc_e850
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_e858 = load i32, i32* @r4, align 4
  %v4_e858 = add i32 %v3_e858, 2
  %v5_e858 = inttoptr i32 %v4_e858 to i8*
  store i8 -3, i8* %v5_e858, align 1
  br label %.thread97

.thread97:                                        ; preds = %dec_label_pc_e850, %.thread94, %bb371
  %v0_e85c = load i32, i32* @r5, align 4
  %v1_e85c = add i32 %v0_e85c, 4
  %v2_e85c = inttoptr i32 %v1_e85c to i32*
  %v3_e85c = load i32, i32* %v2_e85c, align 4
  store i32 %v3_e85c, i32* @r0, align 4
  %v0_e860 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e868

dec_label_pc_e868:                                ; preds = %dec_label_pc_e97c, %.thread97
  %v0_e86c = phi i32 [ %v3_e994, %dec_label_pc_e97c ], [ %v3_e85c, %.thread97 ]
  %storemerge3 = phi i32 [ %v2_e8b4, %dec_label_pc_e97c ], [ %v0_e860, %.thread97 ]
  %storemerge2 = phi i32 [ 9, %dec_label_pc_e97c ], [ 3, %.thread97 ]
  store i32 %storemerge3, i32* @r1, align 4
  store i32 %storemerge2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e86c = call i32 @function_11708(i32 %v0_e86c, i32 %storemerge3, i32 %storemerge2, i32 16384)
  store i32 %v4_e86c, i32* %r0.global-to-local, align 4
  %v0_e870 = load i32, i32* @r5, align 4
  %v1_e870 = add i32 %v0_e870, 24
  %v2_e870 = inttoptr i32 %v1_e870 to i32*
  %v3_e870 = load i32, i32* %v2_e870, align 4
  store i32 %v3_e870, i32* %r2.global-to-local, align 4
  %v0_e874 = load i32, i32* @r7, align 4
  %v1_e874 = add i32 %v0_e874, 3
  store i32 %v1_e874, i32* @r7, align 4
  %v3_e878 = icmp uge i32 %v3_e870, %v1_e874
  store i1 %v3_e878, i1* %cpsr_c.global-to-local, align 1
  %v9_e878 = icmp eq i32 %v3_e870, %v1_e874
  store i1 %v9_e878, i1* %cpsr_z.global-to-local, align 1
  %v0_e87c = load i32, i32* @r4, align 4
  %v1_e87c = add i32 %v0_e87c, 3
  store i32 %v1_e87c, i32* @r4, align 4
  %v8_e880 = icmp sgt i32 %v3_e870, %v1_e874
  br i1 %v8_e880, label %dec_label_pc_e7d8, label %dec_label_pc_e884

dec_label_pc_e884:                                ; preds = %dec_label_pc_e7d0.loopexit, %dec_label_pc_e7d8, %dec_label_pc_e868, %dec_label_pc_e810, %dec_label_pc_e7e4, %dec_label_pc_e7c4, %dec_label_pc_e894.dec_label_pc_e884.loopexit_crit_edge
  %v6_e88c = phi i32 [ %v0_e8c0, %dec_label_pc_e894.dec_label_pc_e884.loopexit_crit_edge ], [ %v0_e04c, %dec_label_pc_e7c4 ], [ %v6_e88c208, %dec_label_pc_e7d8 ], [ %v0_e870, %dec_label_pc_e868 ], [ %v6_e88c208, %dec_label_pc_e810 ], [ %v6_e88c208, %dec_label_pc_e7e4 ], [ %v6_e88c208, %dec_label_pc_e7d0.loopexit ]
  %v0_e884 = phi i32 [ %v0_e884.pre.pre, %dec_label_pc_e894.dec_label_pc_e884.loopexit_crit_edge ], [ 0, %dec_label_pc_e7c4 ], [ %v1_e800, %dec_label_pc_e7d8 ], [ %v1_e874, %dec_label_pc_e868 ], [ %v1_e800, %dec_label_pc_e810 ], [ %v1_e800, %dec_label_pc_e7e4 ], [ %v2_e800, %dec_label_pc_e7d0.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e884 = icmp eq i32 %v0_e884, 0
  store i1 %v2_e884, i1* %cpsr_z.global-to-local, align 1
  %tmp372 = icmp slt i32 %v0_e884, 1
  br i1 %tmp372, label %dec_label_pc_e7b8, label %bb373

bb373:                                            ; preds = %dec_label_pc_e884
  store i32 3, i32* %r0.global-to-local, align 4
  %v7_e88c = add i32 %v6_e88c, 12
  %v8_e88c = inttoptr i32 %v7_e88c to i32*
  store i32 3, i32* %v8_e88c, align 4
  br label %dec_label_pc_e7b8

dec_label_pc_e894:                                ; preds = %dec_label_pc_e808
  store i32 %v2_e898, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_16585.219 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 %v2_e898, i32* %r0.global-to-local, align 4
  %v4_e8a8 = call i32 @function_11cfc(i16* %v3_e8a8, i32 ptrtoint (i32* @global_var_16585.219 to i32), i32 3)
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v2_e8b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1657c.221 to i32), i32* %r1.global-to-local, align 4
  %v4_e8bc = call i32 @function_11cfc(i16* %v3_e8bc, i32 ptrtoint (i32* @global_var_1657c.221 to i32), i32 9)
  store i32 %v4_e8bc, i32* %r0.global-to-local, align 4
  %v0_e8c0 = load i32, i32* @r5, align 4
  %v1_e8c0 = add i32 %v0_e8c0, 24
  %v2_e8c0 = inttoptr i32 %v1_e8c0 to i32*
  %v3_e8c0 = load i32, i32* %v2_e8c0, align 4
  %v0_e8c4 = load i32, i32* @r4, align 4
  %v1_e8c4 = add i32 %v0_e8c4, 2
  store i32 %v1_e8c4, i32* %r2.global-to-local, align 4
  %v0_e8c8 = load i32, i32* @sl, align 4
  %v2_e8c8 = add i32 %v0_e8c8, %v3_e8c0
  store i32 %v2_e8c8, i32* %r3.global-to-local, align 4
  %v3_e8cc = icmp uge i32 %v2_e8c8, %v1_e8c4
  store i1 %v3_e8cc, i1* %cpsr_c.global-to-local, align 1
  %v9_e8cc = icmp eq i32 %v2_e8c8, %v1_e8c4
  store i1 %v9_e8cc, i1* %cpsr_z.global-to-local, align 1
  %v2_e8d0 = xor i1 %v3_e8cc, true
  %v3_e8d0 = or i1 %v9_e8cc, %v2_e8d0
  br i1 %v3_e8d0, label %dec_label_pc_e894.dec_label_pc_e884.loopexit_crit_edge, label %dec_label_pc_e8d4

dec_label_pc_e894.dec_label_pc_e884.loopexit_crit_edge: ; preds = %dec_label_pc_e894
  %v0_e884.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_e884

dec_label_pc_e8d4:                                ; preds = %dec_label_pc_e894
  %v2_e8d4 = inttoptr i32 %v1_e8c4 to i8*
  %v3_e8d4 = load i8, i8* %v2_e8d4, align 1
  %v4_e8d4 = zext i8 %v3_e8d4 to i32
  store i32 %v4_e8d4, i32* %r3.global-to-local, align 4
  %v2_e8d8 = icmp ugt i8 %v3_e8d4, 30
  store i1 %v2_e8d8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8d8 = icmp eq i8 %v3_e8d4, 31
  store i1 %v7_e8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8d8, label %dec_label_pc_e97c, label %dec_label_pc_e8e0

dec_label_pc_e8e0:                                ; preds = %dec_label_pc_e8d4
  %v1_e8e0 = inttoptr i32 %v0_e8c4 to i8*
  %v2_e8e0 = load i8, i8* %v1_e8e0, align 1
  %v3_e8e0 = zext i8 %v2_e8e0 to i32
  store i32 %v3_e8e0, i32* %r3.global-to-local, align 4
  %v2_e8e4 = icmp ugt i8 %v2_e8e0, -4
  store i1 %v2_e8e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e8e4 = icmp eq i8 %v2_e8e0, -3
  store i1 %v7_e8e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8e4, label %.thread98, label %dec_label_pc_e8f4

.thread98:                                        ; preds = %dec_label_pc_e8e0
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_e8e0, align 1
  %v0_e8f0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e8f0.pr.pr, label %dec_label_pc_e81c, label %.thread98.dec_label_pc_e8f4thread-pre-split_crit_edge

.thread98.dec_label_pc_e8f4thread-pre-split_crit_edge: ; preds = %.thread98
  %v0_e8f4.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e8f4

dec_label_pc_e8f4:                                ; preds = %dec_label_pc_e8e0, %.thread98.dec_label_pc_e8f4thread-pre-split_crit_edge
  %v0_e8f4.pr = phi i32 [ %v0_e8f4.pr.pre, %.thread98.dec_label_pc_e8f4thread-pre-split_crit_edge ], [ %v3_e8e0, %dec_label_pc_e8e0 ]
  %v2_e8f4 = icmp ugt i32 %v0_e8f4.pr, 250
  store i1 %v2_e8f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e8f4 = icmp eq i32 %v0_e8f4.pr, 251
  store i1 %v7_e8f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8f4, label %bb374, label %dec_label_pc_e81c

bb374:                                            ; preds = %dec_label_pc_e8f4
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_e8fc = load i32, i32* @r4, align 4
  %v4_e8fc = inttoptr i32 %v3_e8fc to i8*
  store i8 -3, i8* %v4_e8fc, align 1
  br label %dec_label_pc_e81c

dec_label_pc_e904:                                ; preds = %dec_label_pc_e768, %dec_label_pc_e780, %dec_label_pc_e778, %bb369, %dec_label_pc_e754, %dec_label_pc_e738, %dec_label_pc_e74c, %bb368
  %v0_e904 = phi i32 [ %v1_e72c, %dec_label_pc_e754 ], [ %v1_e72c, %dec_label_pc_e738 ], [ %v1_e72c, %dec_label_pc_e74c ], [ %v1_e72c, %bb368 ], [ %v1_e78c, %bb369 ], [ %v1_e78c, %dec_label_pc_e778 ], [ %v1_e78c, %dec_label_pc_e780 ], [ %v1_e78c, %dec_label_pc_e768 ]
  %v1_e904 = add i32 %v0_e904, 1
  store i32 %v1_e904, i32* @r7, align 4
  br label %dec_label_pc_e908

dec_label_pc_e908:                                ; preds = %dec_label_pc_e7b0.dec_label_pc_e908_crit_edge, %dec_label_pc_e904
  %v0_e908 = phi i32 [ %v0_e908.pre, %dec_label_pc_e7b0.dec_label_pc_e908_crit_edge ], [ %v0_e04c, %dec_label_pc_e904 ]
  %v1_e908 = inttoptr i32 %v0_e908 to i32*
  %v2_e908 = load i32, i32* %v1_e908, align 4
  store i32 %v2_e908, i32* %r3.global-to-local, align 4
  %v1_e90c = add i32 %v0_e908, 4
  %v2_e90c = inttoptr i32 %v1_e90c to i32*
  %v3_e90c = load i32, i32* %v2_e90c, align 4
  store i32 %v3_e90c, i32* @r0, align 4
  %v1_e910 = add i32 %v2_e908, 13
  %v2_e910 = inttoptr i32 %v1_e910 to i8*
  %v3_e910 = load i8, i8* %v2_e910, align 1
  %v4_e910 = zext i8 %v3_e910 to i32
  store i32 %v4_e910, i32* @r2, align 4
  %v1_e914 = add i32 %v2_e908, 4
  %v2_e914 = inttoptr i32 %v1_e914 to i32*
  %v3_e914 = load i32, i32* %v2_e914, align 4
  store i32 %v3_e914, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e91c = call i32 @function_11708(i32 %v3_e90c, i32 %v3_e914, i32 %v4_e910, i32 16384)
  store i32 %v4_e91c, i32* %r0.global-to-local, align 4
  %v0_e920 = load i32, i32* @r5, align 4
  %v1_e920 = add i32 %v0_e920, 4
  %v2_e920 = inttoptr i32 %v1_e920 to i32*
  %v3_e920 = load i32, i32* %v2_e920, align 4
  store i32 %v3_e920, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e930 = call i32 @function_11708(i32 %v3_e920, i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_e938 = load i32, i32* @r5, align 4
  %v2_e938 = add i32 %v1_e938, 12
  %v3_e938 = inttoptr i32 %v2_e938 to i32*
  store i32 5, i32* %v3_e938, align 4
  br label %dec_label_pc_e7b8

dec_label_pc_e940:                                ; preds = %dec_label_pc_e6cc, %dec_label_pc_e6ec, %dec_label_pc_e6e4, %dec_label_pc_e6dc, %bb365, %dec_label_pc_e6b8, %dec_label_pc_e694, %dec_label_pc_e6b0, %dec_label_pc_e6a8, %bb364
  %v0_e940 = phi i32 [ %v1_e688, %dec_label_pc_e6b8 ], [ %v1_e688, %dec_label_pc_e694 ], [ %v1_e688, %dec_label_pc_e6b0 ], [ %v1_e688, %dec_label_pc_e6a8 ], [ %v1_e688, %bb364 ], [ %v1_e6f8, %bb365 ], [ %v1_e6f8, %dec_label_pc_e6dc ], [ %v1_e6f8, %dec_label_pc_e6e4 ], [ %v1_e6f8, %dec_label_pc_e6ec ], [ %v1_e6f8, %dec_label_pc_e6cc ]
  %v1_e940 = add i32 %v0_e940, 1
  store i32 %v1_e940, i32* @r7, align 4
  br label %dec_label_pc_e944

dec_label_pc_e944:                                ; preds = %dec_label_pc_e71c.dec_label_pc_e944_crit_edge, %dec_label_pc_e940
  %v0_e944 = phi i32 [ %v0_e944.pre, %dec_label_pc_e71c.dec_label_pc_e944_crit_edge ], [ %v0_e04c, %dec_label_pc_e940 ]
  %v1_e944 = inttoptr i32 %v0_e944 to i32*
  %v2_e944 = load i32, i32* %v1_e944, align 4
  store i32 %v2_e944, i32* %r3.global-to-local, align 4
  %v1_e948 = add i32 %v0_e944, 4
  %v2_e948 = inttoptr i32 %v1_e948 to i32*
  %v3_e948 = load i32, i32* %v2_e948, align 4
  store i32 %v3_e948, i32* @r0, align 4
  %v1_e94c = add i32 %v2_e944, 12
  %v2_e94c = inttoptr i32 %v1_e94c to i8*
  %v3_e94c = load i8, i8* %v2_e94c, align 1
  %v4_e94c = zext i8 %v3_e94c to i32
  store i32 %v4_e94c, i32* @r2, align 4
  %v1_e950 = inttoptr i32 %v2_e944 to i32*
  %v2_e950 = load i32, i32* %v1_e950, align 4
  store i32 %v2_e950, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e958 = call i32 @function_11708(i32 %v3_e948, i32 %v2_e950, i32 %v4_e94c, i32 16384)
  store i32 %v4_e958, i32* %r0.global-to-local, align 4
  %v0_e95c = load i32, i32* @r5, align 4
  %v1_e95c = add i32 %v0_e95c, 4
  %v2_e95c = inttoptr i32 %v1_e95c to i32*
  %v3_e95c = load i32, i32* %v2_e95c, align 4
  store i32 %v3_e95c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e96c = call i32 @function_11708(i32 %v3_e95c, i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_e974 = load i32, i32* @r5, align 4
  %v2_e974 = add i32 %v1_e974, 12
  %v3_e974 = inttoptr i32 %v2_e974 to i32*
  store i32 4, i32* %v3_e974, align 4
  br label %dec_label_pc_e7b8

dec_label_pc_e97c:                                ; preds = %dec_label_pc_e8d4
  store i32 %v2_e898, i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_e988 = add i32 %v0_e8c0, 4
  %v2_e988 = inttoptr i32 %v1_e988 to i32*
  %v3_e988 = load i32, i32* %v2_e988, align 4
  store i32 %v3_e988, i32* @r0, align 4
  %v4_e98c = call i32 @function_11708(i32 %v3_e988, i32 %v2_e898, i32 3, i32 16384)
  store i32 %v4_e98c, i32* %r0.global-to-local, align 4
  store i32 %v2_e8ac, i32* %r1.global-to-local, align 4
  %v0_e994 = load i32, i32* @r5, align 4
  %v1_e994 = add i32 %v0_e994, 4
  %v2_e994 = inttoptr i32 %v1_e994 to i32*
  %v3_e994 = load i32, i32* %v2_e994, align 4
  store i32 %v3_e994, i32* @r0, align 4
  br label %dec_label_pc_e868

dec_label_pc_e9a4:                                ; preds = %dec_label_pc_e104
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_e9b0 = call i32 @function_edb4(i32 21)
  store i32 %v2_e63c, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_e9c0 = call i32 @function_ecf0(i32 21, i32* nonnull %stack_var_-60)
  store i32 %v3_e9c0, i32* %r0.global-to-local, align 4
  %v3_e9c4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e9c0, i32* %r2.global-to-local, align 4
  %v1_e9cc = add i32 %v3_e9c4, -1
  store i32 %v1_e9cc, i32* %r3.global-to-local, align 4
  %v0_e9d0 = load i32, i32* @r5, align 4
  %v1_e9d0 = add i32 %v0_e9d0, 24
  %v2_e9d0 = inttoptr i32 %v1_e9d0 to i32*
  %v3_e9d0 = load i32, i32* %v2_e9d0, align 4
  store i32 %v3_e9d0, i32* %r1.global-to-local, align 4
  %v0_e9d4 = load i32, i32* @sl, align 4
  store i32 %v0_e9d4, i32* %r0.global-to-local, align 4
  %v4_e9d8 = call i32 @function_f2c8(i32 %v0_e9d4, i32 %v3_e9d0, i32 %v3_e9c0, i32 %v1_e9cc)
  store i32 %v4_e9d8, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_e9e4 = call i32 @function_ed14(i32 21)
  store i32 %v1_e9e4, i32* %r0.global-to-local, align 4
  %v0_e9e8 = load i32, i32* @r7, align 4
  %v2_e9e8 = icmp eq i32 %v0_e9e8, -1
  store i1 %v2_e9e8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9e8 = icmp eq i32 %v0_e9e8, -1
  store i1 %v7_e9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9e8, label %dec_label_pc_dfc8.loopexit, label %dec_label_pc_e9f0

dec_label_pc_e9f0:                                ; preds = %dec_label_pc_e9a4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9f0 = icmp eq i32 %v0_e9e8, 0
  store i1 %v2_e9f0, i1* %cpsr_z.global-to-local, align 1
  %tmp375 = icmp slt i32 %v0_e9e8, 1
  br i1 %tmp375, label %dec_label_pc_e7b8, label %dec_label_pc_e9f8

dec_label_pc_e9f8:                                ; preds = %dec_label_pc_e9f0
  %v0_e9f8 = load i32, i32* @r5, align 4
  %v1_e9f8 = add i32 %v0_e9f8, 20
  %v2_e9f8 = inttoptr i32 %v1_e9f8 to i16*
  %v3_e9f8 = load i16, i16* %v2_e9f8, align 2
  %v4_e9f8 = zext i16 %v3_e9f8 to i32
  store i32 %v4_e9f8, i32* %r3.global-to-local, align 4
  %v1_e9fc = add i32 %v0_e9f8, 16
  %v2_e9fc = inttoptr i32 %v1_e9fc to i32*
  %v3_e9fc = load i32, i32* %v2_e9fc, align 4
  store i32 %v3_e9fc, i32* %r2.global-to-local, align 4
  store i32 %v2_ea00, i32* %ip.global-to-local, align 4
  store i32 %v4_e9f8, i32* %stack_var_-42, align 4
  store i32 %v3_e9fc, i32* %stack_var_-60, align 4
  %v1_ea0c = inttoptr i32 %v0_e9f8 to i32*
  %v2_ea0c = load i32, i32* %v1_ea0c, align 4
  store i32 %v2_ea0c, i32* @r8, align 4
  %v0_ea10 = call i32 @function_118e0()
  store i32 %v0_ea10, i32* %r0.global-to-local, align 4
  %v7_ea14 = icmp eq i32 %v0_ea10, -1
  %.386 = zext i1 %v7_ea14 to i32
  store i32 %.386, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea20 = icmp eq i32 %v0_ea10, 0
  store i1 %v2_ea20, i1* %cpsr_z.global-to-local, align 1
  %tmp378 = icmp slt i32 %v0_ea10, 1
  br i1 %tmp378, label %bb379, label %.thread104

.thread104:                                       ; preds = %dec_label_pc_e9f8
  store i32 1, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ea34

bb379:                                            ; preds = %dec_label_pc_e9f8
  store i32 %.386, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea2c = icmp eq i1 %v7_ea14, false
  store i1 %v2_ea2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea2c, label %dec_label_pc_ebd0, label %dec_label_pc_ea34

dec_label_pc_ea34:                                ; preds = %.thread104, %bb379
  %v0_ea34 = load i32, i32* @r5, align 4
  %v1_ea34 = add i32 %v0_ea34, 4
  %v2_ea34 = inttoptr i32 %v1_ea34 to i32*
  %v3_ea34 = load i32, i32* %v2_ea34, align 4
  store i32 %v3_ea34, i32* %r0.global-to-local, align 4
  %v1_ea38 = call i32 @function_12714(i32 %v3_ea34)
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_ea40 = load i32, i32* @r4, align 4
  %v1_ea40 = load i32, i32* @r5, align 4
  %v2_ea40 = add i32 %v1_ea40, 4
  %v3_ea40 = inttoptr i32 %v2_ea40 to i32*
  store i32 %v0_ea40, i32* %v3_ea40, align 4
  %v0_ea44 = load i32, i32* %r0.global-to-local, align 4
  %v1_ea44 = load i32, i32* @r5, align 4
  %v2_ea44 = add i32 %v1_ea44, 12
  %v3_ea44 = inttoptr i32 %v2_ea44 to i32*
  store i32 %v0_ea44, i32* %v3_ea44, align 4
  br label %dec_label_pc_e7b8

dec_label_pc_ea4c:                                ; preds = %dec_label_pc_dfe4
  br i1 %v2_e00c, label %dec_label_pc_e084, label %dec_label_pc_ea50

dec_label_pc_ea50:                                ; preds = %dec_label_pc_ea4c
  %v3_ea50 = icmp eq i32 %v4_e008, -1
  store i1 %v3_ea50, i1* %cpsr_c.global-to-local, align 1
  %v8_ea50 = icmp eq i32 %v4_e008, -1
  store i1 %v8_ea50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ea50, label %dec_label_pc_e090, label %dec_label_pc_e034

dec_label_pc_ea5c:                                ; preds = %dec_label_pc_e140
  %v0_ea5c = load i32, i32* @r5, align 4
  store i32 %v0_ea5c, i32* @r0, align 4
  %v0_ea60 = call i32 @function_d368()
  store i32 %v0_ea60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e17c

dec_label_pc_ea68:                                ; preds = %dec_label_pc_dfd4
  store i32 %.pre, i32* %r0.global-to-local, align 4
  %v1_ea70 = add i32 %v0_ea68, 92
  store i32 %v1_ea70, i32* %r1.global-to-local, align 4
  store i32 192, i32* %r2.global-to-local, align 4
  %v3_ea78 = inttoptr i32 %.pre to i8*
  %v4_ea78 = call i32 @function_12008(i8* %v3_ea78, i32 %v1_ea70, i32 192)
  store i32 %v4_ea78, i32* %r0.global-to-local, align 4
  %v0_ea7c = load i32, i32* @r5, align 4
  %v1_ea7c = add i32 %v0_ea7c, 24
  %v2_ea7c = inttoptr i32 %v1_ea7c to i32*
  %v3_ea7c = load i32, i32* %v2_ea7c, align 4
  %v1_ea80 = add i32 %v3_ea7c, -64
  store i32 %v1_ea80, i32* %r3.global-to-local, align 4
  store i32 %v1_ea80, i32* %v2_ea7c, align 4
  br label %dec_label_pc_dfe4

dec_label_pc_ea8c:                                ; preds = %dec_label_pc_df84
  store i32 4, i32* @r2, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_eaa0, i32* %r3.global-to-local, align 4
  store i32 %v2_e63c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v5_eab8 = call i32 @function_11498(i32 %v3_df78, i32 1, i32 4, i32 %v2_eaa0, i32 %v2_e63c)
  %v3_eabc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_eabc, i32* %r3.global-to-local, align 4
  %v2_eac0 = or i32 %v3_eabc, %v5_eab8
  store i32 %v2_eac0, i32* %r0.global-to-local, align 4
  %v4_eac0 = icmp eq i32 %v2_eac0, 0
  store i1 %v4_eac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_eac0, label %dec_label_pc_eac8, label %dec_label_pc_eb90

dec_label_pc_eac8:                                ; preds = %dec_label_pc_ea8c
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_eacc = load i32, i32* @r5, align 4
  %v2_eacc = add i32 %v1_eacc, 12
  %v3_eacc = inttoptr i32 %v2_eacc to i32*
  store i32 2, i32* %v3_eacc, align 4
  %v0_ead0 = call i32 @function_d1c4()
  store i32 %v0_ead0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_1f0cc.127 to i32), i32* %r3.global-to-local, align 4
  %v2_ead8 = load i16, i16* bitcast (i16** @global_var_1f0cc.127 to i16*), align 4
  %v3_ead8 = zext i16 %v2_ead8 to i32
  store i32 %v3_ead8, i32* %r1.global-to-local, align 4
  %v3_eadc = call i32 @function_f7f4(i32 %v0_ead0, i32 %v3_ead8)
  store i32 %v3_eadc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f09c.123 to i32), i32* %r3.global-to-local, align 4
  %v2_eae4 = load i32, i32* @global_var_1f09c.123, align 4
  store i32 %v2_eae4, i32* %ip.global-to-local, align 4
  %v1_eaec = load i32, i32* @r4, align 4
  %v9_eaec = icmp eq i32 %v2_eae4, %v1_eaec
  store i1 %v9_eaec, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_ead8, i32* %r1.global-to-local, align 4
  %v7_eaf4 = icmp sgt i32 %v2_eae4, %v1_eaec
  br i1 %v7_eaf4, label %dec_label_pc_eaf8, label %dec_label_pc_eb38

dec_label_pc_eaf8:                                ; preds = %dec_label_pc_eac8
  %v2_eafc = load i32, i32* @global_var_1f0c8.125, align 4
  store i32 %v2_eafc, i32* %r3.global-to-local, align 4
  store i32 %v1_eaec, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eb18

dec_label_pc_eb08:                                ; preds = %dec_label_pc_eb28, %dec_label_pc_eb18
  %v1_eb08 = add i32 %v0_eb08, 1
  store i32 %v1_eb08, i32* %r2.global-to-local, align 4
  %v9_eb0c = icmp eq i32 %v1_eb08, %v2_eae4
  %v1_eb10 = add i32 %v0_eb10, 16
  store i32 %v1_eb10, i32* %r3.global-to-local, align 4
  br i1 %v9_eb0c, label %dec_label_pc_eb38.loopexit, label %dec_label_pc_eb18

dec_label_pc_eb18:                                ; preds = %dec_label_pc_eb08, %dec_label_pc_eaf8
  %v0_eb08 = phi i32 [ %v1_eb08, %dec_label_pc_eb08 ], [ %v1_eaec, %dec_label_pc_eaf8 ]
  %v0_eb10 = phi i32 [ %v1_eb10, %dec_label_pc_eb08 ], [ %v2_eafc, %dec_label_pc_eaf8 ]
  store i32 %v0_eb10, i32* %r0.global-to-local, align 4
  %v1_eb1c = add i32 %v0_eb10, 8
  %v2_eb1c = inttoptr i32 %v1_eb1c to i16*
  %v3_eb1c = load i16, i16* %v2_eb1c, align 2
  %v4_eb1c = zext i16 %v3_eb1c to i32
  store i32 %v4_eb1c, i32* %r3.global-to-local, align 4
  %tmp380 = icmp ugt i16 %v3_eb1c, %v2_ead8
  br i1 %tmp380, label %dec_label_pc_eb08, label %dec_label_pc_eb28

dec_label_pc_eb28:                                ; preds = %dec_label_pc_eb18
  %v1_eb28 = add i32 %v0_eb10, 10
  %v2_eb28 = inttoptr i32 %v1_eb28 to i16*
  %v3_eb28 = load i16, i16* %v2_eb28, align 2
  %v4_eb28 = zext i16 %v3_eb28 to i32
  store i32 %v4_eb28, i32* %r3.global-to-local, align 4
  %v3_eb2c = icmp uge i16 %v3_eb28, %v2_ead8
  %v9_eb2c = icmp eq i16 %v3_eb28, %v2_ead8
  %v2_eb30 = xor i1 %v3_eb2c, true
  %v3_eb30 = or i1 %v9_eb2c, %v2_eb30
  br i1 %v3_eb30, label %dec_label_pc_eb08, label %dec_label_pc_eb3c.loopexit

dec_label_pc_eb38.loopexit:                       ; preds = %dec_label_pc_eb08
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb38

dec_label_pc_eb38:                                ; preds = %dec_label_pc_eb38.loopexit, %dec_label_pc_eac8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb3c

dec_label_pc_eb3c.loopexit:                       ; preds = %dec_label_pc_eb28
  store i1 %v3_eb2c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb3c

dec_label_pc_eb3c:                                ; preds = %dec_label_pc_eb3c.loopexit, %dec_label_pc_eb38
  %v0_eb50 = phi i32 [ %v0_eb10, %dec_label_pc_eb3c.loopexit ], [ 0, %dec_label_pc_eb38 ]
  %v0_eb3c = load i32, i32* @r5, align 4
  %v1_eb3c = add i32 %v0_eb3c, 4
  %v2_eb3c = inttoptr i32 %v1_eb3c to i32*
  %v3_eb3c = load i32, i32* %v2_eb3c, align 4
  %v3_eb40 = udiv i32 %v3_eb3c, 32
  store i32 %v3_eb40, i32* %r2.global-to-local, align 4
  %v1_eb44 = urem i32 %v3_eb3c, 32
  store i32 %v1_eb44, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_eb48 = mul nuw nsw i32 %v3_eb40, 4
  store i32 %v3_eb48, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_eb50 = inttoptr i32 %v0_eb3c to i32*
  store i32 %v0_eb50, i32* %v2_eb50, align 4
  %v0_eb54 = load i32, i32* %r3.global-to-local, align 4
  %v1_eb54 = load i32, i32* @r5, align 4
  %v2_eb54 = add i32 %v1_eb54, 24
  %v3_eb54 = inttoptr i32 %v2_eb54 to i32*
  store i32 %v0_eb54, i32* %v3_eb54, align 4
  %v0_dfb4.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_dfbc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_dfac

dec_label_pc_eb5c:                                ; preds = %dec_label_pc_de10
  store i32 %v3_eb5c, i32* %r0.global-to-local, align 4
  %v3_eb64 = udiv i32 %v3_eb5c, 32
  %v3_eb68 = mul nuw nsw i32 %v3_eb64, 4
  store i32 %v2_eb6c, i32* @lr, align 4
  %v2_eb70 = add i32 %v3_eb68, %v2_eb6c
  store i32 %v2_eb70, i32* %r3.global-to-local, align 4
  %v1_eb74 = add i32 %v2_eb70, -312
  %v2_eb74 = inttoptr i32 %v1_eb74 to i32*
  %v3_eb74 = load i32, i32* %v2_eb74, align 4
  %v1_eb78 = urem i32 %v3_eb5c, 32
  store i32 %v1_eb78, i32* %r1.global-to-local, align 4
  %v7_eb7c = shl i32 1, %v1_eb78
  %v8_eb7c = or i32 %v3_eb74, %v7_eb7c
  store i32 %v8_eb7c, i32* %r2.global-to-local, align 4
  %v1_eb80 = load i32, i32* @r5, align 4
  %v3_eb80 = icmp uge i32 %v3_eb5c, %v1_eb80
  store i1 %v3_eb80, i1* %cpsr_c.global-to-local, align 1
  %v9_eb80 = icmp eq i32 %v3_eb5c, %v1_eb80
  store i1 %v9_eb80, i1* %cpsr_z.global-to-local, align 1
  %v7_eb84 = icmp sgt i32 %v3_eb5c, %v1_eb80
  br i1 %v7_eb84, label %bb381, label %bb382

bb381:                                            ; preds = %dec_label_pc_eb5c
  store i32 %v3_eb5c, i32* @r5, align 4
  br label %bb382

bb382:                                            ; preds = %dec_label_pc_eb5c, %bb381
  store i32 %v8_eb7c, i32* %v2_eb74, align 4
  br label %bb332

dec_label_pc_eb90:                                ; preds = %dec_label_pc_ea8c
  %v0_eb90 = load i32, i32* @r5, align 4
  %v1_eb90 = add i32 %v0_eb90, 4
  %v2_eb90 = inttoptr i32 %v1_eb90 to i32*
  %v3_eb90 = load i32, i32* %v2_eb90, align 4
  store i32 %v3_eb90, i32* %r0.global-to-local, align 4
  %v1_eb94 = call i32 @function_12714(i32 %v3_eb90)
  store i32 %v1_eb94, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_eb9c = load i32, i32* @r4, align 4
  %v1_eb9c = load i32, i32* @r5, align 4
  %v2_eb9c = add i32 %v1_eb9c, 12
  %v3_eb9c = inttoptr i32 %v2_eb9c to i32*
  store i32 %v0_eb9c, i32* %v3_eb9c, align 4
  %v0_eba0 = load i32, i32* %r3.global-to-local, align 4
  %v1_eba0 = load i32, i32* @r5, align 4
  %v2_eba0 = add i32 %v1_eba0, 4
  %v3_eba0 = inttoptr i32 %v2_eba0 to i32*
  store i32 %v0_eba0, i32* %v3_eba0, align 4
  %v0_eba4 = load i32, i32* @r4, align 4
  %v1_eba4 = trunc i32 %v0_eba4 to i8
  %v2_eba4 = load i32, i32* @r5, align 4
  %v3_eba4 = add i32 %v2_eba4, 284
  %v4_eba4 = inttoptr i32 %v3_eba4 to i8*
  store i8 %v1_eba4, i8* %v4_eba4, align 1
  br label %dec_label_pc_e0ec

dec_label_pc_ebac:                                ; preds = %dec_label_pc_e700
  %v0_ebac = load i32, i32* @sl, align 4
  store i32 %v0_ebac, i32* %r0.global-to-local, align 4
  %v0_ebb0 = load i32, i32* @r5, align 4
  %v1_ebb0 = add i32 %v0_ebb0, 24
  %v2_ebb0 = inttoptr i32 %v1_ebb0 to i32*
  %v3_ebb0 = load i32, i32* %v2_ebb0, align 4
  store i32 %v3_ebb0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16560.226 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_ebbc = call i32 @function_f2c8(i32 %v0_ebac, i32 %v3_ebb0, i32 ptrtoint ([6 x i8]* @global_var_16560.226 to i32), i32 5)
  store i32 %v5_ebbc, i32* %r0.global-to-local, align 4
  %v3_ebc0 = icmp eq i32 %v5_ebbc, -1
  store i1 %v3_ebc0, i1* %cpsr_c.global-to-local, align 1
  %v8_ebc0 = icmp eq i32 %v5_ebbc, -1
  store i1 %v8_ebc0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_ebbc, i32* @r7, align 4
  br i1 %v3_ebc0, label %dec_label_pc_dfc8.loopexit, label %dec_label_pc_e71c

dec_label_pc_ebd0:                                ; preds = %bb379
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ebdc = call i32 @function_117e8(i32 2, i32 1, i32 0)
  store i32 %v3_ebdc, i32* %r0.global-to-local, align 4
  %v2_ebe0 = icmp eq i32 %v3_ebdc, -1
  store i1 %v2_ebe0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebe0 = icmp eq i32 %v3_ebdc, -1
  store i1 %v7_ebe0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ebdc, i32* @r4, align 4
  br i1 %v7_ebe0, label %dec_label_pc_ece8, label %dec_label_pc_ebec

dec_label_pc_ebec:                                ; preds = %dec_label_pc_ebd0
  store i32 %v2_ea00, i32* @lr, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 -1781865999, i32* %r0.global-to-local, align 4
  %v1_ebfc = call i32 @function_114bc(i32 -1781865999)
  %v0_ec00 = load i32, i32* @r6, align 4
  store i32 %v0_ec00, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v2_ec0c = inttoptr i32 %v0_ec00 to i32*
  %v3_ec0c = call i32 @function_ecf0(i32 24, i32* %v2_ec0c)
  store i32 %v2_ea00, i32* %r1.global-to-local, align 4
  %v0_ec20 = load i32, i32* @r4, align 4
  store i32 %v0_ec20, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_ec28 = call i32 @function_1142c(i32 %v0_ec20, i32 %v2_ea00, i32 16)
  store i32 %v3_ec28, i32* %r0.global-to-local, align 4
  %v3_ec2c = icmp eq i32 %v3_ec28, -1
  store i1 %v3_ec2c, i1* %cpsr_c.global-to-local, align 1
  %v8_ec2c = icmp eq i32 %v3_ec28, -1
  store i1 %v8_ec2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ec2c, label %dec_label_pc_ec34, label %dec_label_pc_ec44

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ebec
  %v0_ec34 = load i32, i32* @r4, align 4
  store i32 %v0_ec34, i32* %r0.global-to-local, align 4
  %v1_ec38 = call i32 @function_12714(i32 %v0_ec34)
  %v0_ec3c = load i32, i32* @r6, align 4
  store i32 %v0_ec3c, i32* %r0.global-to-local, align 4
  %v1_ec40 = call i32 @function_fb78(i32 %v0_ec3c)
  store i32 %v1_ec40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ec44

dec_label_pc_ec44:                                ; preds = %dec_label_pc_ebec, %dec_label_pc_ec34
  store i32 1, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_eaa0, i32* @r1, align 4
  %v0_ec54 = load i32, i32* @r4, align 4
  store i32 %v0_ec54, i32* @r0, align 4
  %v0_ec58 = load i32, i32* @r6, align 4
  store i32 %v0_ec58, i32* %stack_var_-56, align 4
  %v5_ec5c = call i32 @function_11708(i32 %v0_ec54, i32 %v2_eaa0, i32 1, i32 16384)
  store i32 %v2_e63c, i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ec70 = load i32, i32* @r4, align 4
  store i32 %v0_ec70, i32* @r0, align 4
  %v4_ec74 = call i32 @function_11708(i32 %v0_ec70, i32 %v2_e63c, i32 4, i32 16384)
  %v2_ec7c = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_ec7c, i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ec88 = load i32, i32* @r4, align 4
  store i32 %v0_ec88, i32* @r0, align 4
  %v4_ec8c = call i32 @function_11708(i32 %v0_ec88, i32 %v2_ec7c, i32 2, i32 16384)
  %v0_ec90 = load i32, i32* @r8, align 4
  %v1_ec90 = add i32 %v0_ec90, 12
  store i32 %v1_ec90, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ec9c = load i32, i32* @r4, align 4
  store i32 %v0_ec9c, i32* @r0, align 4
  %v4_eca0 = call i32 @function_11708(i32 %v0_ec9c, i32 %v1_ec90, i32 1, i32 16384)
  store i32 %v4_eca0, i32* %r0.global-to-local, align 4
  %v0_eca4 = load i32, i32* @r8, align 4
  %v1_eca4 = inttoptr i32 %v0_eca4 to i32*
  %v2_eca4 = load i32, i32* %v1_eca4, align 4
  store i32 %v2_eca4, i32* @r1, align 4
  %v1_eca8 = add i32 %v0_eca4, 12
  %v2_eca8 = inttoptr i32 %v1_eca8 to i8*
  %v3_eca8 = load i8, i8* %v2_eca8, align 1
  %v4_eca8 = zext i8 %v3_eca8 to i32
  store i32 %v4_eca8, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ecb0 = load i32, i32* @r4, align 4
  store i32 %v0_ecb0, i32* @r0, align 4
  %v4_ecb4 = call i32 @function_11708(i32 %v0_ecb0, i32 %v2_eca4, i32 %v4_eca8, i32 16384)
  %v0_ecb8 = load i32, i32* @r8, align 4
  %v1_ecb8 = add i32 %v0_ecb8, 13
  store i32 %v1_ecb8, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ecc4 = load i32, i32* @r4, align 4
  store i32 %v0_ecc4, i32* @r0, align 4
  %v4_ecc8 = call i32 @function_11708(i32 %v0_ecc4, i32 %v1_ecb8, i32 1, i32 16384)
  %v0_eccc = load i32, i32* @r4, align 4
  store i32 %v0_eccc, i32* @r0, align 4
  %v0_ecd0 = load i32, i32* @r8, align 4
  %v1_ecd0 = add i32 %v0_ecd0, 13
  %v2_ecd0 = inttoptr i32 %v1_ecd0 to i8*
  %v3_ecd0 = load i8, i8* %v2_ecd0, align 1
  %v4_ecd0 = zext i8 %v3_ecd0 to i32
  store i32 %v4_ecd0, i32* @r2, align 4
  %v1_ecd4 = add i32 %v0_ecd0, 4
  %v2_ecd4 = inttoptr i32 %v1_ecd4 to i32*
  %v3_ecd4 = load i32, i32* %v2_ecd4, align 4
  store i32 %v3_ecd4, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ecdc = call i32 @function_11708(i32 %v0_eccc, i32 %v3_ecd4, i32 %v4_ecd0, i32 16384)
  %v0_ece0 = load i32, i32* @r4, align 4
  store i32 %v0_ece0, i32* %r0.global-to-local, align 4
  %v1_ece4 = call i32 @function_12714(i32 %v0_ece0)
  store i32 %v1_ece4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ece8

dec_label_pc_ece8:                                ; preds = %dec_label_pc_ebd0, %dec_label_pc_ec44
  %v0_ece8 = load i32, i32* @r6, align 4
  store i32 %v0_ece8, i32* %r0.global-to-local, align 4
  %v1_ecec = call i32 @function_fb78(i32 %v0_ece8)
  store i32 %v1_ecec, i32* %r0.global-to-local, align 4
  ret i32 %v1_ecec

; uselistorder directives
  uselistorder i1 %v7_ebe0, { 1, 0 }
  uselistorder i32 %v3_ebdc, { 1, 0, 2, 3 }
  uselistorder i32 %v5_ebbc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v1_eb80, { 0, 2, 1 }
  uselistorder i32 %v1_eb78, { 1, 0 }
  uselistorder i32 %v3_eb3c, { 1, 0 }
  uselistorder i1 %v3_eb2c, { 1, 0 }
  uselistorder i32 %v0_eb10, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_eae4, { 0, 2, 1, 3 }
  uselistorder i1 %v2_ea2c, { 1, 0 }
  uselistorder i32 %.386, { 1, 0 }
  uselistorder i1 %v7_ea14, { 1, 0 }
  uselistorder i32 %v0_ea10, { 2, 1, 0, 3 }
  uselistorder i1 %v7_e9e8, { 1, 0 }
  uselistorder i32 %v0_e9e8, { 2, 1, 0, 3 }
  uselistorder i32 %v3_e994, { 1, 0 }
  uselistorder i32 %v0_e944, { 1, 0 }
  uselistorder i32 %v0_e908, { 1, 0 }
  uselistorder i32 %v0_e8f4.pr, { 1, 0 }
  uselistorder i32 %v0_e8c0, { 1, 2, 0 }
  uselistorder i32 %v0_e884, { 1, 0 }
  uselistorder i32 %v1_e87c, { 1, 0 }
  uselistorder i32 %v1_e874, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_e870, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_e870, { 0, 2, 1 }
  uselistorder i32 %v0_e850.pr, { 1, 0 }
  uselistorder i32 %v0_e830.pr, { 1, 0 }
  uselistorder i1 %v7_e808, { 1, 0 }
  uselistorder i1 %v2_e7f8, { 1, 0, 2 }
  uselistorder i1 %v2_e7dc, { 1, 0, 2 }
  uselistorder i32 %v1_e7fc, { 1, 2, 3, 0 }
  uselistorder i32 %v0_e7d0, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_e800, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_e7c4, { 0, 2, 1, 3 }
  uselistorder i1 %v7_e7a4, { 1, 0 }
  uselistorder i32 %v5_e7a0, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32 %v1_e78c, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_e78c, { 0, 2, 1 }
  uselistorder i32 %v0_e784, { 1, 0 }
  uselistorder i1 %v7_e780, { 1, 0 }
  uselistorder i1 %v7_e778, { 1, 0 }
  uselistorder i1 %v8_e770, { 1, 0 }
  uselistorder i1 %v7_e754, { 1, 0 }
  uselistorder i1 %v7_e74c, { 1, 0 }
  uselistorder i1 %v8_e744, { 1, 0 }
  uselistorder i32 %v1_e72c, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i32 %v3_e728, { 1, 0, 2, 3 }
  uselistorder i32 %v0_e71c, { 1, 0 }
  uselistorder i1 %v7_e710, { 1, 0 }
  uselistorder i32 %v5_e70c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_e6f8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e6f8, { 0, 2, 1 }
  uselistorder i32 %v0_e6f0, { 1, 0 }
  uselistorder i1 %v7_e6ec, { 1, 0 }
  uselistorder i1 %v7_e6e4, { 1, 0 }
  uselistorder i1 %v7_e6dc, { 1, 0 }
  uselistorder i1 %v8_e6d4, { 1, 0 }
  uselistorder i1 %v7_e6b8, { 1, 0 }
  uselistorder i1 %v7_e6b0, { 1, 0 }
  uselistorder i1 %v7_e6a8, { 1, 0 }
  uselistorder i1 %v8_e6a0, { 1, 0 }
  uselistorder i32 %v1_e688, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v3_e684, { 1, 0, 2, 3 }
  uselistorder i1 %v8_e624, { 1, 0 }
  uselistorder i8 %v3_e61c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e614, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e614, { 0, 2, 1 }
  uselistorder i32 %v0_e60c, { 1, 0 }
  uselistorder i1 %v7_e608, { 1, 0 }
  uselistorder i1 %v7_e600, { 1, 0 }
  uselistorder i1 %v7_e5f8, { 1, 0 }
  uselistorder i1 %v7_e52c, { 1, 0 }
  uselistorder i1 %v7_e524, { 1, 0 }
  uselistorder i1 %v7_e51c, { 1, 0 }
  uselistorder i1 %v8_e514, { 1, 0 }
  uselistorder i32 %v1_e4fc, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_e498, { 1, 0 }
  uselistorder i8 %v3_e490, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e488, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e488, { 0, 2, 1 }
  uselistorder i32 %v0_e480, { 1, 0 }
  uselistorder i1 %v7_e47c, { 1, 0 }
  uselistorder i1 %v7_e474, { 1, 0 }
  uselistorder i1 %v7_e46c, { 1, 0 }
  uselistorder i1 %v7_e458, { 1, 0 }
  uselistorder i1 %v7_e450, { 1, 0 }
  uselistorder i1 %v7_e448, { 1, 0 }
  uselistorder i1 %v8_e440, { 1, 0 }
  uselistorder i32 %v1_e428, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_e3c4, { 1, 0 }
  uselistorder i8 %v3_e3bc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e3b4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e3b4, { 0, 2, 1 }
  uselistorder i32 %v0_e3ac, { 1, 0 }
  uselistorder i1 %v7_e3a8, { 1, 0 }
  uselistorder i1 %v7_e3a0, { 1, 0 }
  uselistorder i1 %v7_e398, { 1, 0 }
  uselistorder i1 %v7_e384, { 1, 0 }
  uselistorder i1 %v7_e37c, { 1, 0 }
  uselistorder i1 %v7_e374, { 1, 0 }
  uselistorder i1 %v8_e36c, { 1, 0 }
  uselistorder i32 %v1_e354, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_e2f0, { 1, 0 }
  uselistorder i8 %v3_e2e8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e2e0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e2e0, { 0, 2, 1 }
  uselistorder i32 %v0_e2d8, { 1, 0 }
  uselistorder i1 %v7_e2d4, { 1, 0 }
  uselistorder i1 %v7_e2cc, { 1, 0 }
  uselistorder i1 %v7_e2c4, { 1, 0 }
  uselistorder i1 %v7_e2b0, { 1, 0 }
  uselistorder i1 %v7_e2a8, { 1, 0 }
  uselistorder i1 %v7_e2a0, { 1, 0 }
  uselistorder i1 %v8_e298, { 1, 0 }
  uselistorder i32 %v1_e280, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_e21c, { 1, 0 }
  uselistorder i8 %v3_e214, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e20c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e20c, { 0, 2, 1 }
  uselistorder i32 %v0_e204, { 1, 0 }
  uselistorder i1 %v7_e200, { 1, 0 }
  uselistorder i1 %v7_e1f8, { 1, 0 }
  uselistorder i1 %v7_e1f0, { 1, 0 }
  uselistorder i1 %v7_e1dc, { 1, 0 }
  uselistorder i1 %v7_e1d4, { 1, 0 }
  uselistorder i1 %v7_e1cc, { 1, 0 }
  uselistorder i1 %v8_e1c4, { 1, 0 }
  uselistorder i32 %v1_e1ac, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_e198, { 1, 2, 0 }
  uselistorder i32 %v2_e184, { 1, 0 }
  uselistorder i32 %v0_e184, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_e180, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_e158, { 2, 1, 0 }
  uselistorder i1 %v7_e134, { 1, 0 }
  uselistorder i32 %v4_e130, { 1, 0, 2 }
  uselistorder i32 %v1_e0f0, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_e0cc, { 1, 0 }
  uselistorder i32 %v1_e0c0, { 2, 1, 0 }
  uselistorder i32 %v1_e0bc, { 1, 0 }
  uselistorder i32 %v3_e04c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_e04c, { 20, 22, 4, 0, 19, 5, 6, 23, 7, 8, 21, 9, 10, 24, 11, 12, 27, 13, 14, 25, 15, 16, 26, 17, 18, 28, 29, 3, 2, 1 }
  uselistorder i32 %v1_e028, { 1, 2, 3, 0 }
  uselistorder i32 %v3_e024, { 1, 0 }
  uselistorder i32 %v4_e008, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_dff4, { 1, 0, 2 }
  uselistorder i32 %v3_dff0, { 1, 0, 2 }
  uselistorder i32 %v0_ea68, { 1, 0, 2 }
  uselistorder i32 %v3_dfb8, { 1, 0 }
  uselistorder i32 %v1_df9c, { 3, 2, 1, 0 }
  uselistorder i32 %v3_df98, { 1, 0 }
  uselistorder i32 %v3_df90, { 1, 2, 0 }
  uselistorder i1 %v7_df7c, { 1, 0 }
  uselistorder i32 %v3_df78, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_df6c, { 1, 0 }
  uselistorder i32 %v2_eaa0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_ea00, { 1, 0, 2, 3 }
  uselistorder i32 %v2_e63c, { 4, 5, 1, 0, 3, 10, 7, 9, 8, 6, 2 }
  uselistorder i32 %v2_e8b4, { 1, 0 }
  uselistorder i32 %v1_df1c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_df1c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_ded8, { 2, 1, 0 }
  uselistorder i32 %v1_ded4, { 1, 0 }
  uselistorder i1 %v2_deb4, { 1, 0, 2 }
  uselistorder i32 %v0_deb0, { 1, 0, 2 }
  uselistorder i1 %v7_de7c, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_de7c, { 1, 0, 2 }
  uselistorder i32 %v2_de74, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_de68, { 1, 0, 2 }
  uselistorder i32 %v0_de6c, { 1, 0 }
  uselistorder i32 %v1_de50, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_de44, { 0, 1, 3, 2 }
  uselistorder i32 %v0_de44, { 0, 2, 1 }
  uselistorder i32 %v1_de34, { 1, 0 }
  uselistorder i32 %v3_eb5c, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v2_eb6c, { 0, 7, 1, 5, 2, 4, 3, 6 }
  uselistorder i32 %v1_dd80, { 1, 0 }
  uselistorder i32 %v1_dd68, { 0, 2, 3, 1 }
  uselistorder i32 %v0_dd74, { 0, 3, 2, 1 }
  uselistorder i32 %v0_dd24, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i1 %v2_dcfc, { 1, 0 }
  uselistorder i32 %v0_dcc8, { 1, 0 }
  uselistorder i32 %v0_dcb0, { 1, 0 }
  uselistorder i32 %v0_dc74, { 1, 0 }
  uselistorder i32 %v1_dbfc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_db4c, { 1, 0 }
  uselistorder i32 %v3_db3c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_db38, { 1, 0 }
  uselistorder i32 %v5_db1c, { 1, 0 }
  uselistorder i1 %v2_daa4, { 1, 0 }
  uselistorder i1 %v3_da88, { 1, 0, 2 }
  uselistorder i1 %v2_da74, { 1, 0 }
  uselistorder i1 %v2_da50, { 1, 0 }
  uselistorder i32 %v1_da00, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_d9ec, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_d9e8, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 %v0_d9d0, { 1, 0 }
  uselistorder i32 %v0_d9a8, { 1, 0 }
  uselistorder i32 %stack_var_-1880.0, { 0, 1, 2, 3, 4, 5, 6, 8, 10, 12, 7, 9, 11, 14, 13 }
  uselistorder i32 %v1_d748, { 1, 0 }
  uselistorder i32 %v1_d718, { 1, 0 }
  uselistorder i32 %v0_d6d4, { 2, 1, 3, 0 }
  uselistorder i1 %v7_d674, { 1, 0 }
  uselistorder i32 %v3_d66c, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_d658, { 1, 0 }
  uselistorder i32 %v2_d63c, { 1, 0, 2 }
  uselistorder i32 %v0_d628, { 1, 2, 0 }
  uselistorder i32 %storemerge269, { 1, 0 }
  uselistorder i32 %v0_d59c, { 3, 2, 1, 0, 4 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-96, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-68, { 1, 0 }
  uselistorder i32* %stack_var_-224, { 1, 0 }
  uselistorder i32* %stack_var_-352, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 7, 8, 9, 5, 10, 0, 11, 3, 12, 1, 13, 2, 14, 4, 15, 6, 16 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %sp.global-to-local, { 2, 1, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 65, 66, 67, 68, 69, 70, 71, 26, 79, 80, 81, 82, 83, 84, 86, 85, 87, 88, 89, 90, 91, 92, 155, 72, 73, 0, 27, 28, 29, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 76, 77, 74, 75, 78, 99, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 121, 118, 123, 165, 166, 124, 125, 167, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 146, 149, 148, 164, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163 }
  uselistorder i32* %r2.global-to-local, { 20, 21, 7, 27, 28, 29, 30, 31, 22, 23, 0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 57, 59, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 54, 55, 43, 44, 46, 45, 42, 103, 47, 104, 48, 105, 106, 49, 50, 51, 52, 53, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 107, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102 }
  uselistorder i32* %r1.global-to-local, { 22, 24, 23, 25, 5, 31, 32, 33, 34, 35, 36, 37, 26, 27, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 95, 96, 29, 30, 38, 39, 40, 41, 42, 44, 45, 46, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 97, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94 }
  uselistorder i32* %r0.global-to-local, { 53, 52, 55, 54, 56, 57, 58, 59, 61, 60, 62, 63, 65, 64, 15, 13, 89, 85, 86, 87, 88, 90, 93, 92, 91, 98, 94, 68, 66, 67, 69, 70, 72, 71, 73, 75, 74, 76, 1, 14, 16, 6, 8, 3, 2, 4, 5, 7, 12, 9, 10, 11, 20, 17, 18, 19, 21, 22, 23, 25, 24, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 49, 48, 50, 79, 78, 81, 80, 82, 77, 83, 84, 113, 95, 96, 97, 100, 99, 101, 102, 104, 103, 105, 109, 106, 51, 107, 108, 110, 112, 111, 114, 115, 120, 116, 119, 117, 118, 121, 123, 124, 122, 125, 127, 126, 128, 129, 131, 130, 133, 132, 134, 135, 136, 137, 138, 139, 0, 140, 141, 142, 143, 145, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 179, 182, 181, 184, 183, 185, 186, 191, 187, 188, 189, 190, 192, 193, 194, 195 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 9, 7, 8, 10, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i1* %cpsr_z.global-to-local, { 108, 109, 31, 126, 121, 122, 127, 128, 129, 110, 219, 111, 113, 114, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 106, 112, 19, 20, 25, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 39, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 49, 50, 51, 46, 47, 48, 52, 53, 54, 55, 56, 57, 61, 62, 63, 58, 59, 60, 64, 65, 66, 67, 68, 69, 73, 74, 75, 70, 71, 72, 76, 77, 78, 79, 80, 81, 85, 86, 87, 82, 83, 84, 88, 89, 90, 91, 92, 93, 97, 98, 99, 94, 95, 96, 100, 101, 102, 103, 104, 105, 115, 116, 117, 118, 135, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 214, 175, 107, 216, 142, 143, 144, 145, 147, 146, 148, 149, 150, 153, 155, 156, 154, 151, 152, 123, 124, 119, 157, 120, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 218, 192, 193, 194, 195, 196, 215, 197, 198, 199, 217, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 125, 213 }
  uselistorder i1* %cpsr_c.global-to-local, { 105, 106, 28, 122, 123, 117, 118, 124, 125, 107, 213, 108, 110, 111, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 210, 109, 16, 17, 22, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 36, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 46, 47, 48, 43, 44, 45, 49, 50, 51, 52, 53, 54, 58, 59, 60, 55, 56, 57, 61, 62, 63, 64, 65, 66, 70, 71, 72, 67, 68, 69, 73, 74, 75, 76, 77, 78, 82, 83, 84, 79, 80, 81, 85, 86, 87, 88, 89, 90, 94, 95, 96, 91, 92, 93, 97, 98, 99, 100, 101, 102, 112, 113, 114, 131, 127, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 208, 166, 103, 104, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 148, 145, 146, 119, 120, 115, 151, 116, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 209, 184, 185, 186, 187, 188, 212, 189, 190, 191, 211, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 121, 207 }
  uselistorder i16* bitcast (i16** @global_var_1f0cc.127 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1f0cc.127, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1f0cc.127 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11498, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 4, 5 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_16568.213 to i32), { 5, 7, 6, 8, 0, 9, 3, 10, 1, 11, 2, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11708, { 11, 10, 9, 8, 7, 6, 5, 27, 23, 22, 25, 24, 26, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11 }
  uselistorder i8 34, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 36, { 4, 5, 0, 1, 2, 3, 6, 7, 8, 9, 18, 19, 20, 21, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25 }
  uselistorder i8 35, { 4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 20, 21, 22, 23, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27 }
  uselistorder i8 58, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13, 14, 15 }
  uselistorder i8 57, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 62, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 61, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i32 (i8*, i32, i32)* @function_12008, { 1, 0 }
  uselistorder i32 (i32)* @function_ed14, { 16, 21, 20, 19, 18, 17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_f2c8, { 3, 1, 4, 2, 0 }
  uselistorder i32 (i32, i32*)* @function_ecf0, { 5, 6, 0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 (i32)* @function_edb4, { 16, 21, 20, 19, 18, 17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_1169c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_1196c, { 1, 0 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_d368, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_11664, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i8 5, { 4, 0, 2, 1, 3 }
  uselistorder i32 16384, { 20, 58, 21, 59, 22, 60, 23, 61, 24, 62, 25, 63, 11, 64, 0, 42, 16, 46, 17, 47, 18, 44, 19, 45, 15, 43, 1, 48, 2, 49, 3, 50, 4, 51, 5, 52, 6, 53, 7, 54, 8, 55, 9, 56, 10, 57, 26, 65, 66, 67, 14, 68, 13, 69, 29, 70, 30, 71, 12, 72, 27, 73, 28, 74, 31, 75, 76, 77, 32, 78, 33, 34, 79, 35, 80, 36, 37, 81, 82, 38, 83, 39, 40, 84, 85, 41, 86 }
  uselistorder i32 (i32, i32, i32, i32)* @function_bd6c, { 8, 1, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32)* @function_bd1c, { 10, 2, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 29, { 1, 0 }
  uselistorder i32 18, { 2, 7, 3, 8, 4, 9, 6, 10, 5, 11, 0, 12, 1, 13 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_1654c.201 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_164e4.175 to i32), { 0, 2, 1, 3 }
  uselistorder i32 13, { 10, 11, 9, 12, 4, 13, 5, 14, 0, 6, 7, 8, 15, 16, 17, 18, 19, 20, 1, 21, 22, 23, 24, 25, 26, 27, 28, 2, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 3, 40, 41 }
  uselistorder i32 11, { 11, 12, 13, 14, 15, 2, 16, 3, 17, 4, 18, 5, 19, 6, 20, 21, 22, 7, 23, 8, 24, 9, 25, 0, 26, 10, 27, 1, 28, 29 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16514.153 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16490.151 to i32), { 0, 9, 1, 10, 2, 11, 3, 12, 4, 13, 5, 14, 6, 7, 8, 15 }
  uselistorder i32 (i32, i32, i32)* @function_d430, { 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16488.149 to i32), { 0, 20, 1, 21, 2, 22, 3, 4, 5, 23, 6, 24, 7, 25, 8, 26, 9, 27, 10, 28, 11, 29, 12, 30, 13, 31, 14, 32, 15, 33, 16, 34, 17, 35, 18, 36, 19, 37 }
  uselistorder i32 ptrtoint (i32* @global_var_16554.147 to i32), { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i8* @global_var_1f0c1.144, { 1, 0 }
  uselistorder i16* @global_var_1f0b6.143, { 2, 0, 1 }
  uselistorder i8* @global_var_1f0c0.142, { 1, 0 }
  uselistorder i8 6, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f0a0.136 to i32), { 2, 3, 9, 8, 1, 0, 7, 6, 5, 4 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 (i32)* @function_11688, { 3, 2, 1, 0 }
  uselistorder i32 ()* @function_d1c4, { 64, 63, 62, 61, 60, 59, 58, 57, 56, 13, 12, 11, 10, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11778, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_fbfc, { 7, 6, 9, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @global_var_1f660.134, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_1f65c.132, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 2, 3, 6, 0, 1, 4, 5, 7 }
  uselistorder i32* @global_var_1f0d0.121, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @function_126dc, { 0, 1, 2, 3, 4, 22, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24 }
  uselistorder i32 (i32)* @function_d220, { 1, 0 }
  uselistorder i32* @global_var_1f644.44, { 2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32 ()* @function_f4cc, { 2, 1, 0 }
  uselistorder i32* @global_var_1f664.119, { 0, 2, 1 }
  uselistorder i32 ()* @function_118e0, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_ece8, { 1, 0 }
  uselistorder label %dec_label_pc_ec44, { 1, 0 }
  uselistorder label %bb382, { 1, 0 }
  uselistorder label %dec_label_pc_ea34, { 1, 0 }
  uselistorder label %dec_label_pc_e944, { 1, 0 }
  uselistorder label %dec_label_pc_e940, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e908, { 1, 0 }
  uselistorder label %dec_label_pc_e904, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_e8f4, { 1, 0 }
  uselistorder label %dec_label_pc_e884, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread97, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e850, { 1, 0 }
  uselistorder label %.thread93, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e830, { 1, 0 }
  uselistorder label %dec_label_pc_e81c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e7d8, { 1, 0 }
  uselistorder label %dec_label_pc_e7d8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e7b8, { 7, 4, 6, 5, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e78c, { 1, 0 }
  uselistorder label %dec_label_pc_e6f8, { 1, 0 }
  uselistorder label %dec_label_pc_e62c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e614, { 1, 0 }
  uselistorder label %dec_label_pc_e4a0, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e488, { 1, 0 }
  uselistorder label %dec_label_pc_e3cc, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e3b4, { 1, 0 }
  uselistorder label %dec_label_pc_e2f8, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e2e0, { 1, 0 }
  uselistorder label %dec_label_pc_e224, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e20c, { 1, 0 }
  uselistorder label %dec_label_pc_e0ec, { 7, 8, 3, 4, 1, 0, 2, 5, 6 }
  uselistorder label %bb344, { 1, 0 }
  uselistorder label %bb342, { 1, 0 }
  uselistorder label %dec_label_pc_e034, { 1, 0 }
  uselistorder label %.thread51, { 1, 0 }
  uselistorder label %dec_label_pc_dfe4, { 1, 0 }
  uselistorder label %dec_label_pc_dfd4, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_dfccthread-pre-split.thread484, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_dfccthread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_dfd4.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_dfc8.loopexit, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_dfac, { 1, 0 }
  uselistorder label %dec_label_pc_def4, { 1, 0 }
  uselistorder label %bb338, { 1, 0 }
  uselistorder label %bb336, { 1, 0 }
  uselistorder label %bb334, { 1, 0 }
  uselistorder label %bb332, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_dde8.dec_label_pc_dde8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ddc8.dec_label_pc_ddc8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ddbc, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_ddb4, { 1, 0 }
  uselistorder label %dec_label_pc_dd8c, { 1, 0 }
  uselistorder label %dec_label_pc_dd68, { 1, 0 }
  uselistorder label %dec_label_pc_dc1c, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_dc10, { 1, 0 }
  uselistorder label %dec_label_pc_dab4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_da90, { 1, 0 }
  uselistorder label %dec_label_pc_da84, { 1, 2, 0 }
  uselistorder label %dec_label_pc_da60, { 1, 2, 0 }
  uselistorder label %dec_label_pc_da3c, { 1, 0 }
  uselistorder label %bb310, { 1, 0 }
  uselistorder label %dec_label_pc_d9e8, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_d6d4, { 1, 0 }
}

define i32 @function_ecf0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_ecf0:
  store i32 ptrtoint (i32* @global_var_1f66c.229 to i32), i32* @r2, align 4
  %v3_ecf4 = mul i32 %arg1, 8
  %v2_ecf8 = add i32 %v3_ecf4, ptrtoint (i32* @global_var_1f66c.229 to i32)
  %v2_ecfc = icmp eq i32* %arg2, null
  br i1 %v2_ecfc, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_ecf0
  %v3_ed044 = inttoptr i32 %v2_ecf8 to i32*
  %v4_ed045 = load i32, i32* %v3_ed044, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_ecf0
  %v2_ed00 = add i32 %v3_ecf4, add (i32 ptrtoint (i32* @global_var_1f66c.229 to i32), i32 4)
  %v3_ed00 = inttoptr i32 %v2_ed00 to i16*
  %v4_ed00 = load i16, i16* %v3_ed00, align 4
  %v5_ed00 = zext i16 %v4_ed00 to i32
  %v3_ed04 = inttoptr i32 %v2_ecf8 to i32*
  %v4_ed04 = load i32, i32* %v3_ed04, align 4
  store i32 %v5_ed00, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_ed046 = phi i32 [ %v4_ed045, %.thread ], [ %v4_ed04, %bb ]
  ret i32 %v4_ed046

; uselistorder directives
  uselistorder i32 %v2_ecf8, { 1, 0 }
  uselistorder i32 %v3_ecf4, { 1, 0 }
  uselistorder i32* null, { 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 13, 14, 15, 16, 17, 3, 18, 19, 20, 21, 1, 22, 23, 24 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_ed14(i32 %arg1) local_unnamed_addr {
dec_label_pc_ed14:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_ed1c = mul i32 %arg1, 8
  %v2_ed20 = add i32 %v3_ed1c, ptrtoint (i32* @global_var_1f66c.229 to i32)
  %v2_ed24 = load i32, i32* @global_var_1f048.232, align 4
  %v1_ed28 = add i32 %v3_ed1c, add (i32 ptrtoint (i32* @global_var_1f66c.229 to i32), i32 4)
  %v2_ed28 = inttoptr i32 %v1_ed28 to i16*
  %v3_ed28 = load i16, i16* %v2_ed28, align 4
  %v3_ed2c = udiv i32 %v2_ed24, 256
  store i32 %v3_ed2c, i32* @r2, align 4
  %v2_ed30 = icmp eq i16 %v3_ed28, 0
  %v3_ed34 = udiv i32 %v2_ed24, 65536
  %v3_ed38 = load i32, i32* @r4, align 4
  store i32 %v3_ed38, i32* %stack_var_-16, align 4
  %v1_ed3c = urem i32 %v3_ed2c, 256
  store i32 %v1_ed3c, i32* %r6.global-to-local, align 4
  %v1_ed40 = urem i32 %v3_ed34, 256
  store i32 %v1_ed40, i32* %r5.global-to-local, align 4
  %v3_ed44 = udiv i32 %v2_ed24, 16777216
  store i32 %v3_ed44, i32* %r4.global-to-local, align 4
  %v1_ed48 = urem i32 %v2_ed24, 256
  store i32 %v1_ed48, i32* %lr.global-to-local, align 4
  br i1 %v2_ed30, label %dec_label_pc_eda4, label %dec_label_pc_ed50

dec_label_pc_ed50:                                ; preds = %dec_label_pc_ed14
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_ed54 = inttoptr i32 %v2_ed20 to i32*
  br label %dec_label_pc_ed54

dec_label_pc_ed54:                                ; preds = %dec_label_pc_ed54.dec_label_pc_ed54_crit_edge, %dec_label_pc_ed50
  %v0_ed5c = phi i32 [ %v0_ed5c.pre, %dec_label_pc_ed54.dec_label_pc_ed54_crit_edge ], [ %v1_ed48, %dec_label_pc_ed50 ]
  %v2_ed60 = phi i32 [ %v1_ed98, %dec_label_pc_ed54.dec_label_pc_ed54_crit_edge ], [ 0, %dec_label_pc_ed50 ]
  %v2_ed54 = load i32, i32* %v1_ed54, align 4
  %v2_ed58 = add i32 %v2_ed54, %v2_ed60
  %v3_ed58 = inttoptr i32 %v2_ed58 to i8*
  %v4_ed58 = load i8, i8* %v3_ed58, align 1
  %v6_ed58 = zext i8 %v4_ed58 to i32
  %v2_ed5c = xor i32 %v6_ed58, %v0_ed5c
  %v1_ed60 = trunc i32 %v2_ed5c to i8
  store i8 %v1_ed60, i8* %v3_ed58, align 1
  %v2_ed64 = load i32, i32* %v1_ed54, align 4
  %v0_ed68 = load i32, i32* %ip.global-to-local, align 4
  %v2_ed68 = add i32 %v0_ed68, %v2_ed64
  %v3_ed68 = inttoptr i32 %v2_ed68 to i8*
  %v4_ed68 = load i8, i8* %v3_ed68, align 1
  %v6_ed68 = zext i8 %v4_ed68 to i32
  %v0_ed6c = load i32, i32* %r6.global-to-local, align 4
  %v2_ed6c = xor i32 %v0_ed6c, %v6_ed68
  %v1_ed70 = trunc i32 %v2_ed6c to i8
  store i8 %v1_ed70, i8* %v3_ed68, align 1
  %v2_ed74 = load i32, i32* %v1_ed54, align 4
  %v0_ed78 = load i32, i32* %ip.global-to-local, align 4
  %v2_ed78 = add i32 %v0_ed78, %v2_ed74
  %v3_ed78 = inttoptr i32 %v2_ed78 to i8*
  %v4_ed78 = load i8, i8* %v3_ed78, align 1
  %v6_ed78 = zext i8 %v4_ed78 to i32
  %v0_ed7c = load i32, i32* %r5.global-to-local, align 4
  %v2_ed7c = xor i32 %v0_ed7c, %v6_ed78
  %v1_ed80 = trunc i32 %v2_ed7c to i8
  store i8 %v1_ed80, i8* %v3_ed78, align 1
  %v2_ed84 = load i32, i32* %v1_ed54, align 4
  %v0_ed88 = load i32, i32* %ip.global-to-local, align 4
  %v2_ed88 = add i32 %v0_ed88, %v2_ed84
  %v3_ed88 = inttoptr i32 %v2_ed88 to i8*
  %v4_ed88 = load i8, i8* %v3_ed88, align 1
  %v6_ed88 = zext i8 %v4_ed88 to i32
  %v0_ed8c = load i32, i32* %r4.global-to-local, align 4
  %v2_ed8c = xor i32 %v0_ed8c, %v6_ed88
  %v1_ed90 = trunc i32 %v2_ed8c to i8
  store i8 %v1_ed90, i8* %v3_ed88, align 1
  %v3_ed94 = load i16, i16* %v2_ed28, align 4
  %v4_ed94 = zext i16 %v3_ed94 to i32
  store i32 %v4_ed94, i32* @r2, align 4
  %v0_ed98 = load i32, i32* %ip.global-to-local, align 4
  %v1_ed98 = add i32 %v0_ed98, 1
  store i32 %v1_ed98, i32* %ip.global-to-local, align 4
  %v8_eda0 = icmp sgt i32 %v4_ed94, %v1_ed98
  br i1 %v8_eda0, label %dec_label_pc_ed54.dec_label_pc_ed54_crit_edge, label %dec_label_pc_eda4.loopexit

dec_label_pc_ed54.dec_label_pc_ed54_crit_edge:    ; preds = %dec_label_pc_ed54
  %v0_ed5c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_ed54

dec_label_pc_eda4.loopexit:                       ; preds = %dec_label_pc_ed54
  %v2_eda4.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_eda4

dec_label_pc_eda4:                                ; preds = %dec_label_pc_eda4.loopexit, %dec_label_pc_ed14
  %v2_eda4 = phi i32 [ %v2_eda4.pre, %dec_label_pc_eda4.loopexit ], [ %v3_ed38, %dec_label_pc_ed14 ]
  store i32 %v2_eda4, i32* @r4, align 4
  ret i32 %v2_ed20

; uselistorder directives
  uselistorder i32 %v1_ed98, { 1, 2, 0 }
  uselistorder i32 %v1_ed48, { 1, 0 }
  uselistorder i32 %v3_ed2c, { 1, 0 }
  uselistorder i32 %v2_ed24, { 3, 0, 1, 2 }
  uselistorder i32 %v2_ed20, { 1, 0 }
  uselistorder i32 %v3_ed1c, { 1, 0 }
}

define i32 @function_edb4(i32 %arg1) local_unnamed_addr {
dec_label_pc_edb4:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_edbc = mul i32 %arg1, 8
  %v2_edc0 = add i32 %v3_edbc, ptrtoint (i32* @global_var_1f66c.229 to i32)
  %v2_edc4 = load i32, i32* @global_var_1f048.232, align 4
  %v1_edc8 = add i32 %v3_edbc, add (i32 ptrtoint (i32* @global_var_1f66c.229 to i32), i32 4)
  %v2_edc8 = inttoptr i32 %v1_edc8 to i16*
  %v3_edc8 = load i16, i16* %v2_edc8, align 4
  %v3_edcc = udiv i32 %v2_edc4, 256
  %v2_edd0 = icmp eq i16 %v3_edc8, 0
  %v3_edd4 = udiv i32 %v2_edc4, 65536
  %v3_edd8 = load i32, i32* @r4, align 4
  store i32 %v3_edd8, i32* %stack_var_-16, align 4
  %v1_eddc = urem i32 %v3_edcc, 256
  store i32 %v1_eddc, i32* %r6.global-to-local, align 4
  %v1_ede0 = urem i32 %v3_edd4, 256
  store i32 %v1_ede0, i32* %r5.global-to-local, align 4
  %v3_ede4 = udiv i32 %v2_edc4, 16777216
  store i32 %v3_ede4, i32* %r4.global-to-local, align 4
  %v1_ede8 = urem i32 %v2_edc4, 256
  store i32 %v1_ede8, i32* %lr.global-to-local, align 4
  br i1 %v2_edd0, label %dec_label_pc_ee44, label %dec_label_pc_edf0

dec_label_pc_edf0:                                ; preds = %dec_label_pc_edb4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_edf4 = inttoptr i32 %v2_edc0 to i32*
  br label %dec_label_pc_edf4

dec_label_pc_edf4:                                ; preds = %dec_label_pc_edf4.dec_label_pc_edf4_crit_edge, %dec_label_pc_edf0
  %v0_edfc = phi i32 [ %v0_edfc.pre, %dec_label_pc_edf4.dec_label_pc_edf4_crit_edge ], [ %v1_ede8, %dec_label_pc_edf0 ]
  %v2_ee00 = phi i32 [ %v1_ee38, %dec_label_pc_edf4.dec_label_pc_edf4_crit_edge ], [ 0, %dec_label_pc_edf0 ]
  %v2_edf4 = load i32, i32* %v1_edf4, align 4
  %v2_edf8 = add i32 %v2_edf4, %v2_ee00
  %v3_edf8 = inttoptr i32 %v2_edf8 to i8*
  %v4_edf8 = load i8, i8* %v3_edf8, align 1
  %v6_edf8 = zext i8 %v4_edf8 to i32
  %v2_edfc = xor i32 %v6_edf8, %v0_edfc
  %v1_ee00 = trunc i32 %v2_edfc to i8
  store i8 %v1_ee00, i8* %v3_edf8, align 1
  %v2_ee04 = load i32, i32* %v1_edf4, align 4
  %v0_ee08 = load i32, i32* %ip.global-to-local, align 4
  %v2_ee08 = add i32 %v0_ee08, %v2_ee04
  %v3_ee08 = inttoptr i32 %v2_ee08 to i8*
  %v4_ee08 = load i8, i8* %v3_ee08, align 1
  %v6_ee08 = zext i8 %v4_ee08 to i32
  %v0_ee0c = load i32, i32* %r6.global-to-local, align 4
  %v2_ee0c = xor i32 %v0_ee0c, %v6_ee08
  %v1_ee10 = trunc i32 %v2_ee0c to i8
  store i8 %v1_ee10, i8* %v3_ee08, align 1
  %v2_ee14 = load i32, i32* %v1_edf4, align 4
  %v0_ee18 = load i32, i32* %ip.global-to-local, align 4
  %v2_ee18 = add i32 %v0_ee18, %v2_ee14
  %v3_ee18 = inttoptr i32 %v2_ee18 to i8*
  %v4_ee18 = load i8, i8* %v3_ee18, align 1
  %v6_ee18 = zext i8 %v4_ee18 to i32
  %v0_ee1c = load i32, i32* %r5.global-to-local, align 4
  %v2_ee1c = xor i32 %v0_ee1c, %v6_ee18
  %v1_ee20 = trunc i32 %v2_ee1c to i8
  store i8 %v1_ee20, i8* %v3_ee18, align 1
  %v2_ee24 = load i32, i32* %v1_edf4, align 4
  %v0_ee28 = load i32, i32* %ip.global-to-local, align 4
  %v2_ee28 = add i32 %v0_ee28, %v2_ee24
  %v3_ee28 = inttoptr i32 %v2_ee28 to i8*
  %v4_ee28 = load i8, i8* %v3_ee28, align 1
  %v6_ee28 = zext i8 %v4_ee28 to i32
  %v0_ee2c = load i32, i32* %r4.global-to-local, align 4
  %v2_ee2c = xor i32 %v0_ee2c, %v6_ee28
  %v1_ee30 = trunc i32 %v2_ee2c to i8
  store i8 %v1_ee30, i8* %v3_ee28, align 1
  %v3_ee34 = load i16, i16* %v2_edc8, align 4
  %v4_ee34 = zext i16 %v3_ee34 to i32
  %v0_ee38 = load i32, i32* %ip.global-to-local, align 4
  %v1_ee38 = add i32 %v0_ee38, 1
  store i32 %v1_ee38, i32* %ip.global-to-local, align 4
  %v8_ee40 = icmp sgt i32 %v4_ee34, %v1_ee38
  br i1 %v8_ee40, label %dec_label_pc_edf4.dec_label_pc_edf4_crit_edge, label %dec_label_pc_ee44.loopexit

dec_label_pc_edf4.dec_label_pc_edf4_crit_edge:    ; preds = %dec_label_pc_edf4
  %v0_edfc.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_edf4

dec_label_pc_ee44.loopexit:                       ; preds = %dec_label_pc_edf4
  %v2_ee44.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_ee44

dec_label_pc_ee44:                                ; preds = %dec_label_pc_ee44.loopexit, %dec_label_pc_edb4
  %v2_ee44 = phi i32 [ %v2_ee44.pre, %dec_label_pc_ee44.loopexit ], [ %v3_edd8, %dec_label_pc_edb4 ]
  store i32 %v2_ee44, i32* @r4, align 4
  ret i32 %v2_edc0

; uselistorder directives
  uselistorder i32 %v1_ee38, { 1, 2, 0 }
  uselistorder i32 %v1_ede8, { 1, 0 }
  uselistorder i32 %v2_edc4, { 3, 0, 1, 2 }
  uselistorder i32 %v2_edc0, { 1, 0 }
  uselistorder i32 %v3_edbc, { 1, 0 }
}

define i32 @function_ee54(i32 %arg1) local_unnamed_addr {
dec_label_pc_ee54:
  %stack_var_-24 = alloca i32, align 4
  %v3_ee54 = load i32, i32* @r4, align 4
  store i32 %v3_ee54, i32* %stack_var_-24, align 4
  %v6_ee54 = load i32, i32* @r5, align 4
  %v9_ee54 = load i32, i32* @r6, align 4
  %v12_ee54 = load i32, i32* @r7, align 4
  %v15_ee54 = load i32, i32* @r8, align 4
  store i32 2, i32* @r0, align 4
  %v0_ee5c = call i32 @function_10910()
  store i32 ptrtoint (i32* @global_var_1f66c.229 to i32), i32* @r4, align 4
  store i32 2, i32* @r5, align 4
  store i32 %v0_ee5c, i32* @r6, align 4
  %v4_ee74 = call i32 @function_f280(i32 %v0_ee5c, i32 ptrtoint ([3 x i8]* @global_var_16588.237 to i32), i32 2)
  store i32 22, i32* @r0, align 4
  %v0_ee7c = load i32, i32* @r6, align 4
  store i32 %v0_ee7c, i32* @global_var_1f67c.238, align 4
  %v0_ee80 = load i32, i32* @r5, align 4
  %v1_ee80 = trunc i32 %v0_ee80 to i16
  store i16 %v1_ee80, i16* bitcast (i32* @global_var_1f680.239 to i16*), align 4
  %v0_ee84 = call i32 @function_10910()
  store i32 %v0_ee84, i32* @r6, align 4
  store i32 22, i32* @r7, align 4
  %v4_ee98 = call i32 @function_f280(i32 %v0_ee84, i32 ptrtoint ([23 x i8]* @global_var_1658c.241 to i32), i32 22)
  %v0_ee9c = load i32, i32* @r5, align 4
  store i32 %v0_ee9c, i32* @r0, align 4
  %v0_eea0 = load i32, i32* @r6, align 4
  store i32 %v0_eea0, i32* @global_var_1f724.242, align 4
  %v0_eea4 = load i32, i32* @r7, align 4
  %v1_eea4 = trunc i32 %v0_eea4 to i16
  store i16 %v1_eea4, i16* bitcast (i32* @global_var_1f728.243 to i16*), align 4
  %v0_eea8 = call i32 @function_10910()
  %v0_eeac = load i32, i32* @r5, align 4
  store i32 %v0_eea8, i32* @r6, align 4
  %v3_eeb8 = call i32 @function_f280(i32 %v0_eea8, i32 ptrtoint (i32* @global_var_165a4.245 to i32), i32 %v0_eeac)
  store i32 58, i32* @r0, align 4
  %v0_eec0 = load i32, i32* @r6, align 4
  store i32 %v0_eec0, i32* @global_var_1f72c.246, align 4
  %v0_eec4 = load i32, i32* @r5, align 4
  %v1_eec4 = trunc i32 %v0_eec4 to i16
  %v2_eec4 = load i32, i32* @r4, align 4
  %v3_eec4 = add i32 %v2_eec4, 196
  %v4_eec4 = inttoptr i32 %v3_eec4 to i16*
  store i16 %v1_eec4, i16* %v4_eec4, align 2
  %v0_eec8 = call i32 @function_10910()
  store i32 %v0_eec8, i32* @r5, align 4
  %v4_eed8 = call i32 @function_f280(i32 %v0_eec8, i32 ptrtoint ([59 x i8]* @global_var_165a8.248 to i32), i32 58)
  store i32 6, i32* @r0, align 4
  store i16 58, i16* bitcast (i32* @global_var_1f678.249 to i16*), align 4
  %v0_eee8 = load i32, i32* @r5, align 4
  store i32 %v0_eee8, i32* @global_var_1f674.250, align 4
  %v0_eeec = call i32 @function_10910()
  store i32 %v0_eeec, i32* @r5, align 4
  store i32 6, i32* @r8, align 4
  %v4_ef00 = call i32 @function_f280(i32 %v0_eeec, i32 ptrtoint ([7 x i8]* @global_var_165e4.252 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r6, align 4
  %v0_ef0c = load i32, i32* @r5, align 4
  store i32 %v0_ef0c, i32* @global_var_1f6ec.253, align 4
  %v0_ef10 = load i32, i32* @r8, align 4
  %v1_ef10 = trunc i32 %v0_ef10 to i16
  store i16 %v1_ef10, i16* bitcast (i32* @global_var_1f6f0.254 to i16*), align 4
  %v0_ef14 = call i32 @function_10910()
  %v0_ef18 = load i32, i32* @r6, align 4
  store i32 %v0_ef14, i32* @r5, align 4
  %v4_ef24 = call i32 @function_f280(i32 %v0_ef14, i32 ptrtoint ([8 x i8]* @global_var_165ec.256 to i32), i32 %v0_ef18)
  %v0_ef28 = load i32, i32* @r6, align 4
  store i32 %v0_ef28, i32* @r0, align 4
  %v0_ef2c = load i32, i32* @r5, align 4
  store i32 %v0_ef2c, i32* @global_var_1f6f4.257, align 4
  %v1_ef30 = trunc i32 %v0_ef28 to i16
  store i16 %v1_ef30, i16* bitcast (i32* @global_var_1f6f8.258 to i16*), align 4
  %v0_ef34 = call i32 @function_10910()
  %v0_ef38 = load i32, i32* @r6, align 4
  store i32 %v0_ef34, i32* @r5, align 4
  %v4_ef44 = call i32 @function_f280(i32 %v0_ef34, i32 ptrtoint ([8 x i8]* @global_var_165f4.260 to i32), i32 %v0_ef38)
  store i32 3, i32* @r0, align 4
  %v0_ef4c = load i32, i32* @r5, align 4
  store i32 %v0_ef4c, i32* @global_var_1f6fc.261, align 4
  %v0_ef50 = load i32, i32* @r6, align 4
  %v1_ef50 = trunc i32 %v0_ef50 to i16
  store i16 %v1_ef50, i16* bitcast (i32* @global_var_1f700.262 to i16*), align 4
  %v0_ef54 = call i32 @function_10910()
  store i32 %v0_ef54, i32* @r5, align 4
  %v4_ef64 = call i32 @function_f280(i32 %v0_ef54, i32 ptrtoint ([4 x i8]* @global_var_165fc.264 to i32), i32 3)
  store i32 20, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_1f710.265 to i16*), align 4
  %v0_ef74 = load i32, i32* @r5, align 4
  store i32 %v0_ef74, i32* @global_var_1f70c.266, align 4
  %v0_ef78 = call i32 @function_10910()
  store i32 %v0_ef78, i32* @r5, align 4
  %v3_ef88 = call i32 @function_f280(i32 %v0_ef78, i32 ptrtoint (i32* @global_var_16600.268 to i32), i32 20)
  store i32 25, i32* @r0, align 4
  store i16 20, i16* bitcast (i32* @global_var_1f708.269 to i16*), align 4
  %v0_ef98 = load i32, i32* @r5, align 4
  store i32 %v0_ef98, i32* @global_var_1f704.270, align 4
  %v0_ef9c = call i32 @function_10910()
  store i32 %v0_ef9c, i32* @r5, align 4
  %v3_efac = call i32 @function_f280(i32 %v0_ef9c, i32 ptrtoint (i32* @global_var_16618.272 to i32), i32 25)
  store i32 9, i32* @r0, align 4
  store i16 25, i16* bitcast (i32* @global_var_1f718.273 to i16*), align 4
  %v0_efbc = load i32, i32* @r5, align 4
  store i32 %v0_efbc, i32* @global_var_1f714.274, align 4
  %v0_efc0 = call i32 @function_10910()
  store i32 %v0_efc0, i32* @r5, align 4
  %v4_efd0 = call i32 @function_f280(i32 %v0_efc0, i32 ptrtoint ([10 x i8]* @global_var_16634.276 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_1f720.277 to i16*), align 4
  %v0_efe0 = load i32, i32* @r5, align 4
  store i32 %v0_efe0, i32* @global_var_1f71c.278, align 4
  %v0_efe4 = call i32 @function_10910()
  store i32 %v0_efe4, i32* @r5, align 4
  %v4_eff4 = call i32 @function_f280(i32 %v0_efe4, i32 ptrtoint ([17 x i8]* @global_var_16640.280 to i32), i32 16)
  %v0_effc = load i32, i32* @r7, align 4
  store i32 %v0_effc, i32* @r0, align 4
  %v2_f000 = load i32, i32* @r4, align 4
  %v3_f000 = add i32 %v2_f000, 204
  %v4_f000 = inttoptr i32 %v3_f000 to i16*
  store i16 16, i16* %v4_f000, align 2
  %v0_f004 = load i32, i32* @r5, align 4
  %v1_f004 = load i32, i32* @r4, align 4
  %v2_f004 = add i32 %v1_f004, 200
  %v3_f004 = inttoptr i32 %v2_f004 to i32*
  store i32 %v0_f004, i32* %v3_f004, align 4
  %v0_f008 = call i32 @function_10910()
  %v0_f010 = load i32, i32* @r7, align 4
  store i32 %v0_f008, i32* @r5, align 4
  %v4_f018 = call i32 @function_f280(i32 %v0_f008, i32 ptrtoint ([23 x i8]* @global_var_16654.282 to i32), i32 %v0_f010)
  %v0_f01c = load i32, i32* @r6, align 4
  store i32 %v0_f01c, i32* @r0, align 4
  %v0_f020 = load i32, i32* @r5, align 4
  %v1_f020 = load i32, i32* @r4, align 4
  %v2_f020 = add i32 %v1_f020, 208
  %v3_f020 = inttoptr i32 %v2_f020 to i32*
  store i32 %v0_f020, i32* %v3_f020, align 4
  %v0_f024 = load i32, i32* @r7, align 4
  %v1_f024 = trunc i32 %v0_f024 to i16
  %v2_f024 = load i32, i32* @r4, align 4
  %v3_f024 = add i32 %v2_f024, 212
  %v4_f024 = inttoptr i32 %v3_f024 to i16*
  store i16 %v1_f024, i16* %v4_f024, align 2
  %v0_f028 = call i32 @function_10910()
  %v0_f02c = load i32, i32* @r6, align 4
  store i32 %v0_f028, i32* @r5, align 4
  %v4_f038 = call i32 @function_f280(i32 %v0_f028, i32 ptrtoint ([8 x i8]* @global_var_1666c.284 to i32), i32 %v0_f02c)
  store i32 5, i32* @r0, align 4
  %v0_f040 = load i32, i32* @r5, align 4
  store i32 %v0_f040, i32* @global_var_1f684.285, align 4
  %v0_f044 = load i32, i32* @r6, align 4
  %v1_f044 = trunc i32 %v0_f044 to i16
  store i16 %v1_f044, i16* bitcast (i32* @global_var_1f688.286 to i16*), align 4
  %v0_f048 = call i32 @function_10910()
  store i32 %v0_f048, i32* @r5, align 4
  %v4_f058 = call i32 @function_f280(i32 %v0_f048, i32 ptrtoint ([6 x i8]* @global_var_16674.288 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  store i16 5, i16* bitcast (i32* @global_var_1f690.289 to i16*), align 4
  %v0_f068 = load i32, i32* @r5, align 4
  store i32 %v0_f068, i32* @global_var_1f68c.290, align 4
  %v0_f06c = call i32 @function_10910()
  store i32 %v0_f06c, i32* @r5, align 4
  %v4_f07c = call i32 @function_f280(i32 %v0_f06c, i32 ptrtoint ([5 x i8]* @global_var_1667c.292 to i32), i32 4)
  %v0_f084 = load i32, i32* @r8, align 4
  store i32 %v0_f084, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_1f6a0.293 to i16*), align 4
  %v0_f08c = load i32, i32* @r5, align 4
  store i32 %v0_f08c, i32* @global_var_1f69c.294, align 4
  %v0_f090 = call i32 @function_10910()
  %v0_f098 = load i32, i32* @r8, align 4
  store i32 %v0_f090, i32* @r5, align 4
  %v4_f0a0 = call i32 @function_f280(i32 %v0_f090, i32 ptrtoint ([7 x i8]* @global_var_16684.296 to i32), i32 %v0_f098)
  store i32 14, i32* @r0, align 4
  %v0_f0a8 = load i32, i32* @r5, align 4
  store i32 %v0_f0a8, i32* @global_var_1f6a4.297, align 4
  %v0_f0ac = load i32, i32* @r8, align 4
  %v1_f0ac = trunc i32 %v0_f0ac to i16
  store i16 %v1_f0ac, i16* bitcast (i32* @global_var_1f6a8.298 to i16*), align 4
  %v0_f0b0 = call i32 @function_10910()
  store i32 %v0_f0b0, i32* @r5, align 4
  %v0_f0c0 = load i32, i32* @r6, align 4
  %v2_f0c0 = mul i32 %v0_f0c0, 2
  store i32 %v2_f0c0, i32* @r6, align 4
  %v4_f0c4 = call i32 @function_f280(i32 %v0_f0b0, i32 ptrtoint ([15 x i8]* @global_var_1668c.300 to i32), i32 14)
  store i32 10, i32* @r0, align 4
  %v0_f0cc = load i32, i32* @r5, align 4
  store i32 %v0_f0cc, i32* @global_var_1f6ac.301, align 4
  %v0_f0d0 = load i32, i32* @r6, align 4
  %v1_f0d0 = trunc i32 %v0_f0d0 to i16
  store i16 %v1_f0d0, i16* bitcast (i32* @global_var_1f6b0.302 to i16*), align 4
  %v0_f0d4 = call i32 @function_10910()
  store i32 %v0_f0d4, i32* @r5, align 4
  %v4_f0e4 = call i32 @function_f280(i32 %v0_f0d4, i32 ptrtoint ([11 x i8]* @global_var_1669c.304 to i32), i32 10)
  store i32 21, i32* @r0, align 4
  store i16 10, i16* bitcast (i32* @global_var_1f6b8.305 to i16*), align 4
  %v0_f0f4 = load i32, i32* @r5, align 4
  store i32 %v0_f0f4, i32* @global_var_1f6b4.306, align 4
  %v0_f0f8 = call i32 @function_10910()
  store i32 %v0_f0f8, i32* @r5, align 4
  %v3_f108 = call i32 @function_f280(i32 %v0_f0f8, i32 ptrtoint (i32* @global_var_166f0.308 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_1f6c0.309 to i16*), align 4
  %v0_f118 = load i32, i32* @r5, align 4
  store i32 %v0_f118, i32* @global_var_1f6bc.310, align 4
  %v0_f11c = call i32 @function_10910()
  store i32 %v0_f11c, i32* @r5, align 4
  %v4_f12c = call i32 @function_f280(i32 %v0_f11c, i32 ptrtoint ([18 x i8]* @global_var_166a8.312 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_1f6c8.313 to i16*), align 4
  %v0_f13c = load i32, i32* @r5, align 4
  store i32 %v0_f13c, i32* @global_var_1f6c4.314, align 4
  %v0_f140 = call i32 @function_10910()
  store i32 %v0_f140, i32* @r5, align 4
  %v4_f150 = call i32 @function_f280(i32 %v0_f140, i32 ptrtoint ([13 x i8]* @global_var_166bc.316 to i32), i32 12)
  %v0_f158 = load i32, i32* @r6, align 4
  store i32 %v0_f158, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_1f6d0.317 to i16*), align 4
  %v0_f160 = load i32, i32* @r5, align 4
  store i32 %v0_f160, i32* @global_var_1f6cc.318, align 4
  %v0_f164 = call i32 @function_10910()
  %v0_f16c = load i32, i32* @r6, align 4
  store i32 %v0_f164, i32* @r5, align 4
  %v4_f174 = call i32 @function_f280(i32 %v0_f164, i32 ptrtoint ([15 x i8]* @global_var_166cc.320 to i32), i32 %v0_f16c)
  store i32 19, i32* @r0, align 4
  %v0_f17c = load i32, i32* @r5, align 4
  store i32 %v0_f17c, i32* @global_var_1f6d4.321, align 4
  %v0_f180 = load i32, i32* @r6, align 4
  %v1_f180 = trunc i32 %v0_f180 to i16
  store i16 %v1_f180, i16* bitcast (i32* @global_var_1f6d8.322 to i16*), align 4
  %v0_f184 = call i32 @function_10910()
  %v4_f194 = call i32 @function_f280(i32 %v0_f184, i32 ptrtoint ([20 x i8]* @global_var_166dc.324 to i32), i32 19)
  store i32 %v0_f184, i32* @global_var_1f6dc.325, align 4
  store i16 19, i16* bitcast (i32* @global_var_1f6e0.326 to i16*), align 4
  %v2_f1a4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_f1a4, i32* @r4, align 4
  store i32 %v6_ee54, i32* @r5, align 4
  store i32 %v9_ee54, i32* @r6, align 4
  store i32 %v12_ee54, i32* @r7, align 4
  store i32 %v15_ee54, i32* @r8, align 4
  ret i32 %v4_f194

; uselistorder directives
  uselistorder i32 %v0_f164, { 1, 0 }
  uselistorder i32 %v0_f090, { 1, 0 }
  uselistorder i32 %v0_f028, { 1, 0 }
  uselistorder i32 %v0_f008, { 1, 0 }
  uselistorder i32 %v0_ef34, { 1, 0 }
  uselistorder i32 %v0_ef14, { 1, 0 }
  uselistorder i32 %v0_eea8, { 1, 0 }
  uselistorder i32 %v0_ee5c, { 1, 0 }
  uselistorder i32 19, { 2, 12, 3, 9, 4, 10, 5, 11, 13, 14, 15, 16, 0, 17, 6, 18, 1, 19, 7, 20, 8, 21 }
  uselistorder i32 17, { 1, 14, 2, 11, 3, 12, 4, 13, 15, 5, 16, 6, 17, 7, 18, 8, 19, 9, 20, 0, 21, 10, 22, 23, 24 }
  uselistorder i32 21, { 0, 8, 1, 5, 2, 6, 3, 7, 9, 4 }
  uselistorder i32 (i32, i32, i32)* @function_f280, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1f66c.229 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_f210(i8* %arg1) local_unnamed_addr {
dec_label_pc_f210:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_f214 = load i8, i8* %arg1, align 1
  %v2_f218 = icmp eq i8 %v3_f214, 0
  %v0_f21c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f218, i32 %v0_f21c)
  br label %dec_label_pc_f224

dec_label_pc_f224:                                ; preds = %dec_label_pc_f224, %dec_label_pc_f210
  %v0_f224 = phi i32 [ %v1_f224, %dec_label_pc_f224 ], [ 0, %dec_label_pc_f210 ]
  %v1_f224 = add i32 %v0_f224, 1
  %v2_f228 = add i32 %v1_f224, %tmp
  %v3_f228 = inttoptr i32 %v2_f228 to i8*
  %v4_f228 = load i8, i8* %v3_f228, align 1
  %v2_f22c = icmp eq i8 %v4_f228, 0
  br i1 %v2_f22c, label %dec_label_pc_f234, label %dec_label_pc_f224

dec_label_pc_f234:                                ; preds = %dec_label_pc_f224
  ret i32 %v1_f224
}

define i32 @function_f238(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f238:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_f238 = load i8, i8* %arg1, align 1
  %v3_f238 = zext i8 %v2_f238 to i32
  store i32 %v3_f238, i32* @r2, align 4
  %v2_f23c = icmp eq i8 %v2_f238, 0
  br i1 %v2_f23c, label %bb, label %dec_label_pc_f248

bb:                                               ; preds = %dec_label_pc_f238
  store i32 %v3_f238, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f25c

dec_label_pc_f248:                                ; preds = %dec_label_pc_f238
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f24c

dec_label_pc_f24c:                                ; preds = %dec_label_pc_f24c, %dec_label_pc_f248
  %v0_f24c = phi i32 [ %v1_f24c, %dec_label_pc_f24c ], [ 0, %dec_label_pc_f248 ]
  %v1_f24c = add i32 %v0_f24c, 1
  store i32 %v1_f24c, i32* %ip.global-to-local, align 4
  %v2_f250 = add i32 %v1_f24c, %tmp
  %v3_f250 = inttoptr i32 %v2_f250 to i8*
  %v4_f250 = load i8, i8* %v3_f250, align 1
  %v6_f250 = zext i8 %v4_f250 to i32
  store i32 %v6_f250, i32* %r3.global-to-local, align 4
  %v2_f254 = icmp eq i8 %v4_f250, 0
  br i1 %v2_f254, label %dec_label_pc_f25c, label %dec_label_pc_f24c

dec_label_pc_f25c:                                ; preds = %dec_label_pc_f24c, %bb
  %v0_f25c = phi i32 [ %v3_f238, %bb ], [ %v1_f24c, %dec_label_pc_f24c ]
  store i32 %v0_f25c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f268

dec_label_pc_f264:                                ; preds = %dec_label_pc_f268
  %v0_f264 = load i32, i32* %r1.global-to-local, align 4
  %v1_f264 = add i32 %v0_f264, 1
  %v2_f264 = inttoptr i32 %v1_f264 to i8*
  %v3_f264 = load i8, i8* %v2_f264, align 1
  %v4_f264 = zext i8 %v3_f264 to i32
  store i32 %v4_f264, i32* @r2, align 4
  store i32 %v1_f264, i32* %r1.global-to-local, align 4
  %v0_f268.pr = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f268

dec_label_pc_f268:                                ; preds = %dec_label_pc_f25c, %dec_label_pc_f264
  %v0_f270.off0 = phi i8 [ %v2_f238, %dec_label_pc_f25c ], [ %v3_f264, %dec_label_pc_f264 ]
  %v0_f268 = phi i32 [ %v0_f25c, %dec_label_pc_f25c ], [ %v0_f268.pr, %dec_label_pc_f264 ]
  %v1_f268 = add i32 %v0_f268, -1
  store i32 %v1_f268, i32* %r3.global-to-local, align 4
  %v3_f26c = icmp eq i32 %v0_f268, 0
  %v2_f270 = load i32, i32* @r0, align 4
  %v3_f270 = inttoptr i32 %v2_f270 to i8*
  store i8 %v0_f270.off0, i8* %v3_f270, align 1
  %v4_f270 = load i32, i32* @r0, align 4
  %v5_f270 = add i32 %v4_f270, 1
  store i32 %v5_f270, i32* @r0, align 4
  br i1 %v3_f26c, label %dec_label_pc_f278, label %dec_label_pc_f264

dec_label_pc_f278:                                ; preds = %dec_label_pc_f268
  %v0_f278 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_f278

; uselistorder directives
  uselistorder i32 %v0_f268, { 1, 0 }
  uselistorder i32 %v0_f25c, { 1, 0 }
  uselistorder i32 %v1_f24c, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_f268, { 1, 0 }
}

define i32 @function_f280(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f280:
  store i32 %arg3, i32* @r2, align 4
  %v2_f280 = icmp eq i32 %arg3, 0
  %v0_f284 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f280, i32 %v0_f284)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_f28c

dec_label_pc_f28c:                                ; preds = %dec_label_pc_f28c, %dec_label_pc_f280
  %v0_f28c = phi i32 [ %v1_f294, %dec_label_pc_f28c ], [ 0, %dec_label_pc_f280 ]
  %v2_f28c = add i32 %v0_f28c, %arg2
  %v3_f28c = inttoptr i32 %v2_f28c to i8*
  %v4_f28c = load i8, i8* %v3_f28c, align 1
  %v6_f28c = zext i8 %v4_f28c to i32
  store i32 %v6_f28c, i32* @r3, align 4
  %v4_f290 = add i32 %v0_f28c, %arg1
  %v5_f290 = inttoptr i32 %v4_f290 to i8*
  store i8 %v4_f28c, i8* %v5_f290, align 1
  %v0_f294 = load i32, i32* @ip, align 4
  %v1_f294 = add i32 %v0_f294, 1
  store i32 %v1_f294, i32* @ip, align 4
  %v9_f298 = icmp eq i32 %v1_f294, %arg3
  br i1 %v9_f298, label %dec_label_pc_f2a0, label %dec_label_pc_f28c

dec_label_pc_f2a0:                                ; preds = %dec_label_pc_f28c
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_f294, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_f2a4() local_unnamed_addr {
dec_label_pc_f2a4:
  %r2.global-to-local = alloca i32, align 4
  %v0_f2a4 = load i32, i32* @r1, align 4
  %v2_f2a4 = icmp eq i32 %v0_f2a4, 0
  %v0_f2a8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f2a4, i32 %v0_f2a8)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f2b0

dec_label_pc_f2b0:                                ; preds = %dec_label_pc_f2b0, %dec_label_pc_f2a4
  %v2_f2b4 = phi i32 [ %v1_f2b8, %dec_label_pc_f2b0 ], [ 0, %dec_label_pc_f2a4 ]
  store i32 0, i32* @r3, align 4
  %v3_f2b4 = load i32, i32* @r0, align 4
  %v4_f2b4 = add i32 %v3_f2b4, %v2_f2b4
  %v5_f2b4 = inttoptr i32 %v4_f2b4 to i8*
  store i8 0, i8* %v5_f2b4, align 1
  %v0_f2b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f2b8 = add i32 %v0_f2b8, 1
  store i32 %v1_f2b8, i32* %r2.global-to-local, align 4
  %v1_f2bc = load i32, i32* @r1, align 4
  %v9_f2bc = icmp eq i32 %v1_f2b8, %v1_f2bc
  br i1 %v9_f2bc, label %dec_label_pc_f2c4, label %dec_label_pc_f2b0

dec_label_pc_f2c4:                                ; preds = %dec_label_pc_f2b0
  %v1_f2c4 = load i32, i32* @r0, align 4
  ret i32 %v1_f2c4

; uselistorder directives
  uselistorder i32 %v1_f2b8, { 1, 2, 0 }
}

define i32 @function_f2c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f2c8:
  %v7_f2dc = icmp sgt i32 %arg4, %arg2
  br i1 %v7_f2dc, label %dec_label_pc_f2e4, label %dec_label_pc_f2ec

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_f300, %dec_label_pc_f2ec, %dec_label_pc_f2c8, %dec_label_pc_f32c
  %storemerge = phi i32 [ %v1_f32c, %dec_label_pc_f32c ], [ -1, %dec_label_pc_f2c8 ], [ -1, %dec_label_pc_f2ec ], [ -1, %dec_label_pc_f300 ]
  ret i32 %storemerge

dec_label_pc_f2ec:                                ; preds = %dec_label_pc_f2c8
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_f2e4, label %dec_label_pc_f2f4

dec_label_pc_f2f4:                                ; preds = %dec_label_pc_f2ec
  br label %dec_label_pc_f30c

dec_label_pc_f300:                                ; preds = %bb, %dec_label_pc_f320
  %v1_f30c3 = phi i32 [ %v1_f320, %dec_label_pc_f320 ], [ 0, %bb ]
  %v1_f300 = add i32 %v0_f32c, 1
  %v9_f304 = icmp eq i32 %v1_f300, %arg2
  br i1 %v9_f304, label %dec_label_pc_f2e4, label %dec_label_pc_f30c

dec_label_pc_f30c:                                ; preds = %dec_label_pc_f300, %dec_label_pc_f2f4
  %v0_f32c = phi i32 [ %v1_f300, %dec_label_pc_f300 ], [ 0, %dec_label_pc_f2f4 ]
  %v1_f30c = phi i32 [ %v1_f30c3, %dec_label_pc_f300 ], [ 0, %dec_label_pc_f2f4 ]
  %v2_f30c = add i32 %v1_f30c, %arg3
  %v3_f30c = inttoptr i32 %v2_f30c to i8*
  %v4_f30c = load i8, i8* %v3_f30c, align 1
  %v2_f310 = add i32 %v0_f32c, %arg1
  %v3_f310 = inttoptr i32 %v2_f310 to i8*
  %v4_f310 = load i8, i8* %v3_f310, align 1
  %v9_f314 = icmp eq i8 %v4_f310, %v4_f30c
  br i1 %v9_f314, label %dec_label_pc_f320, label %bb

bb:                                               ; preds = %dec_label_pc_f30c
  br label %dec_label_pc_f300

dec_label_pc_f320:                                ; preds = %dec_label_pc_f30c
  %v1_f320 = add i32 %v1_f30c, 1
  %v9_f324 = icmp eq i32 %v1_f320, %arg4
  br i1 %v9_f324, label %dec_label_pc_f32c, label %dec_label_pc_f300

dec_label_pc_f32c:                                ; preds = %dec_label_pc_f320
  %v1_f32c = add i32 %v0_f32c, 1
  br label %dec_label_pc_f2e4

; uselistorder directives
  uselistorder i32 %v1_f320, { 1, 0 }
  uselistorder i32 %v1_f30c, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f300, { 1, 0 }
  uselistorder label %dec_label_pc_f2e4, { 3, 0, 1, 2 }
}

define i32 @function_f334(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f334:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_f334 = load i32, i32* @r4, align 4
  %v6_f334 = load i32, i32* @r5, align 4
  %v12_f334 = load i32, i32* @r7, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f344

dec_label_pc_f344:                                ; preds = %.thread, %dec_label_pc_f358, %bb, %dec_label_pc_f334
  %v0_f344 = phi i32 [ %tmp, %dec_label_pc_f334 ], [ %v5_f344, %bb ], [ %v5_f344, %dec_label_pc_f358 ], [ %v5_f344, %.thread ]
  %v1_f344 = inttoptr i32 %v0_f344 to i8*
  %v2_f344 = load i8, i8* %v1_f344, align 1
  %v5_f344 = add i32 %v0_f344, 1
  store i32 %v5_f344, i32* @r5, align 4
  %v7_f348 = icmp eq i8 %v2_f344, 9
  br i1 %v7_f348, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_f344
  br label %dec_label_pc_f344

bb:                                               ; preds = %dec_label_pc_f344
  %v3_f344 = zext i8 %v2_f344 to i32
  %v8_f34c = icmp eq i8 %v2_f344, 32
  store i32 %v3_f344, i32* @r4, align 4
  br i1 %v8_f34c, label %dec_label_pc_f344, label %dec_label_pc_f358

dec_label_pc_f358:                                ; preds = %bb
  %v7_f358 = icmp eq i8 %v2_f344, 10
  br i1 %v7_f358, label %dec_label_pc_f344, label %dec_label_pc_f360

dec_label_pc_f360:                                ; preds = %dec_label_pc_f358
  %v7_f360 = icmp eq i8 %v2_f344, 45
  br i1 %v7_f360, label %dec_label_pc_f450, label %dec_label_pc_f368

dec_label_pc_f368:                                ; preds = %dec_label_pc_f360
  %v7_f368 = icmp eq i8 %v2_f344, 43
  br i1 %v7_f368, label %bb44, label %dec_label_pc_f378

bb44:                                             ; preds = %dec_label_pc_f368
  %v2_f36c = inttoptr i32 %v5_f344 to i8*
  %v3_f36c = load i8, i8* %v2_f36c, align 1
  %v4_f36c = zext i8 %v3_f36c to i32
  store i32 %v4_f36c, i32* @r4, align 4
  %v6_f36c = add i32 %v0_f344, 2
  store i32 %v6_f36c, i32* @r5, align 4
  br label %dec_label_pc_f378

dec_label_pc_f378:                                ; preds = %bb44, %dec_label_pc_f368, %dec_label_pc_f450
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_f450 ], [ 2147483647, %dec_label_pc_f368 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_f450 ], [ 0, %dec_label_pc_f368 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_f380 = call i32 @function_f7f4(i32 %storemerge1, i32 %arg2)
  %v0_f384 = load i32, i32* @r7, align 4
  store i32 %v0_f384, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_f38c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f38c, i32* @r1, align 4
  %v0_f390 = call i32 @function_f6f8()
  store i32 0, i32* @ip, align 4
  %v0_f3a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f3a0.outer

dec_label_pc_f3a0.outer:                          ; preds = %.thread5, %dec_label_pc_f378
  %v2_f41c.ph = phi i32 [ %v5_f41c, %.thread5 ], [ 0, %dec_label_pc_f378 ]
  %v1_f3e0.ph = phi i32 [ %v4_f420, %.thread5 ], [ %v0_f3a0.pre, %dec_label_pc_f378 ]
  %v1_f3f8.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_f378 ]
  %v3_f3ec = icmp uge i32 %v2_f41c.ph, %v0_f390
  %v9_f3ec = icmp eq i32 %v2_f41c.ph, %v0_f390
  %v2_f3f0 = xor i1 %v3_f3ec, true
  %v3_f3f0 = or i1 %v9_f3ec, %v2_f3f0
  %v2_f3f4 = xor i1 %v9_f3ec, true
  %v3_f3f4 = and i1 %v3_f3ec, %v2_f3f4
  %v2_f414 = icmp eq i1 %v9_f3ec, false
  br label %dec_label_pc_f3a0

dec_label_pc_f3a0:                                ; preds = %dec_label_pc_f3a0.outer, %dec_label_pc_f428
  %v1_f3f8 = phi i32 [ -1, %dec_label_pc_f428 ], [ %v1_f3f8.ph, %dec_label_pc_f3a0.outer ]
  %v1_f3e0 = phi i32 [ %v3_f428, %dec_label_pc_f428 ], [ %v1_f3e0.ph, %dec_label_pc_f3a0.outer ]
  %v1_f3a0 = urem i32 %v1_f3e0, 256
  %v1_f3a4 = add nsw i32 %v1_f3a0, -48
  %v1_f3ac = add nsw i32 %v1_f3a0, -97
  %v1_f3b0 = add i32 %v1_f3e0, -48
  store i32 %v1_f3b0, i32* @r2, align 4
  %v1_f3b4 = add nsw i32 %v1_f3a0, -65
  %tmp75 = icmp ult i32 %v1_f3a4, 10
  br i1 %tmp75, label %dec_label_pc_f3e4, label %dec_label_pc_f3bc

dec_label_pc_f3bc:                                ; preds = %dec_label_pc_f3a0
  %v2_f3bc = icmp ugt i32 %v1_f3b4, 24
  %v7_f3bc = icmp eq i32 %v1_f3b4, 25
  %v2_f3c0 = xor i1 %v7_f3bc, true
  %v3_f3c0 = and i1 %v2_f3bc, %v2_f3c0
  br i1 %v3_f3c0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_f3bc
  store i32 0, i32* @r2, align 4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_f3bc, %bb45
  %v0_f3d414 = phi i32 [ %v1_f3b0, %dec_label_pc_f3bc ], [ 0, %bb45 ]
  %v2_f3c4 = xor i1 %v2_f3bc, true
  %v3_f3c4 = or i1 %v7_f3bc, %v2_f3c4
  br i1 %v3_f3c4, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  store i32 1, i32* @r2, align 4
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_f3d4 = phi i32 [ %v0_f3d414, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_f3c0, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_f3cc = icmp ugt i32 %v1_f3ac, 24
  %v11_f3cc = icmp eq i32 %v1_f3ac, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_f3d0 = phi i1 [ %v7_f3bc, %bb48 ], [ %v11_f3cc, %bb49 ]
  %v0_f3d0 = phi i1 [ %v2_f3bc, %bb48 ], [ %v6_f3cc, %bb49 ]
  %v2_f3d0 = xor i1 %v1_f3d0, true
  %v3_f3d0 = and i1 %v0_f3d0, %v2_f3d0
  br i1 %v3_f3d0, label %dec_label_pc_f434, label %dec_label_pc_f3d4

dec_label_pc_f3d4:                                ; preds = %bb50
  %v2_f3d4 = icmp eq i32 %v0_f3d4, 0
  %. = select i1 %v2_f3d4, i32 87, i32 55
  %v2_f3e0 = sub i32 %v1_f3e0, %.
  store i32 %v2_f3e0, i32* @r2, align 4
  br label %dec_label_pc_f3e4

dec_label_pc_f3e4:                                ; preds = %dec_label_pc_f3a0, %dec_label_pc_f3d4
  %v0_f3f829 = phi i32 [ %v1_f3b4, %dec_label_pc_f3a0 ], [ %., %dec_label_pc_f3d4 ]
  %v3_f41c = phi i32 [ %v1_f3b0, %dec_label_pc_f3a0 ], [ %v2_f3e0, %dec_label_pc_f3d4 ]
  %v1_f3e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_f3e4 = sub i32 %v3_f41c, %v1_f3e4
  %v4_f3e4 = xor i32 %v1_f3e4, %v3_f41c
  %v5_f3e4 = xor i32 %v2_f3e4, %v3_f41c
  %v6_f3e4 = and i32 %v5_f3e4, %v4_f3e4
  %v7_f3e4 = icmp slt i32 %v6_f3e4, 0
  %v8_f3e4 = icmp slt i32 %v2_f3e4, 0
  %v2_f3e8 = xor i1 %v8_f3e4, %v7_f3e4
  br i1 %v2_f3e8, label %dec_label_pc_f3ec, label %dec_label_pc_f434

dec_label_pc_f3ec:                                ; preds = %dec_label_pc_f3e4
  br i1 %v3_f3f0, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_f3ec
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_f3ec, %bb53
  %v0_f3f828 = phi i32 [ %v0_f3f829, %dec_label_pc_f3ec ], [ 0, %bb53 ]
  br i1 %v3_f3f4, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_f3f8 = phi i32 [ %v0_f3f828, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_f3f8, 0
  %v4_f3f8 = zext i1 %tmp76 to i32
  %v5_f3f8 = or i32 %v0_f3f8, %v4_f3f8
  %v7_f3f8 = icmp eq i32 %v5_f3f8, 0
  br i1 %v7_f3f8, label %dec_label_pc_f400, label %dec_label_pc_f428

dec_label_pc_f400:                                ; preds = %bb56
  %v1_f40c = load i32, i32* %r8.global-to-local, align 4
  %v2_f40c = sub i32 %v3_f41c, %v1_f40c
  %v4_f40c = xor i32 %v1_f40c, %v3_f41c
  %v5_f40c = xor i32 %v2_f40c, %v3_f41c
  %v6_f40c = and i32 %v5_f40c, %v4_f40c
  %v7_f40c = icmp slt i32 %v6_f40c, 0
  %v8_f40c = icmp slt i32 %v2_f40c, 0
  %v9_f40c = icmp eq i32 %v3_f41c, %v1_f40c
  %v3_f410 = xor i1 %v8_f40c, %v7_f40c
  %v4_f410 = or i1 %v9_f40c, %v3_f410
  br i1 %v4_f410, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_f400
  store i32 1, i32* @ip, align 4
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_f400
  store i32 1, i32* @ip, align 4
  br i1 %v2_f414, label %.thread5, label %dec_label_pc_f428

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_f41c = mul i32 %v1_f3e4, %v2_f41c.ph
  %v5_f41c = add i32 %v4_f41c, %v3_f41c
  %v1_f420 = load i32, i32* @r5, align 4
  %v2_f420 = inttoptr i32 %v1_f420 to i8*
  %v3_f420 = load i8, i8* %v2_f420, align 1
  %v4_f420 = zext i8 %v3_f420 to i32
  %v6_f420 = add i32 %v1_f420, 1
  store i32 %v6_f420, i32* @r5, align 4
  br label %dec_label_pc_f3a0.outer

dec_label_pc_f428:                                ; preds = %thread-pre-split, %bb56
  %v0_f428 = load i32, i32* @r5, align 4
  %v1_f428 = inttoptr i32 %v0_f428 to i8*
  %v2_f428 = load i8, i8* %v1_f428, align 1
  %v3_f428 = zext i8 %v2_f428 to i32
  %v5_f428 = add i32 %v0_f428, 1
  store i32 %v5_f428, i32* @r5, align 4
  store i32 -1, i32* @ip, align 4
  br label %dec_label_pc_f3a0

dec_label_pc_f434:                                ; preds = %dec_label_pc_f3e4, %bb50
  %v1_f434 = icmp slt i32 %v1_f3f8, 0
  %v0_f460 = load i32, i32* %sl.global-to-local, align 4
  %v2_f460 = icmp eq i32 %v0_f460, 0
  br i1 %v1_f434, label %dec_label_pc_f460, label %dec_label_pc_f43c

dec_label_pc_f43c:                                ; preds = %dec_label_pc_f434
  br i1 %v2_f460, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_f43c
  %v2_f440 = sub i32 0, %v2_f41c.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_f43c, %bb59
  %v1_f44c = phi i32 [ -2147483648, %bb61 ], [ %v2_f41c.ph, %dec_label_pc_f43c ], [ %v2_f440, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_f334, i32* @r4, align 4
  store i32 %v6_f334, i32* @r5, align 4
  store i32 %v12_f334, i32* @r7, align 4
  ret i32 %v1_f44c

dec_label_pc_f450:                                ; preds = %dec_label_pc_f360
  %v1_f450 = inttoptr i32 %v5_f344 to i8*
  %v2_f450 = load i8, i8* %v1_f450, align 1
  %v3_f450 = zext i8 %v2_f450 to i32
  store i32 %v3_f450, i32* @r4, align 4
  %v5_f450 = add i32 %v0_f344, 2
  store i32 %v5_f450, i32* @r5, align 4
  br label %dec_label_pc_f378

dec_label_pc_f460:                                ; preds = %dec_label_pc_f434
  br i1 %v2_f460, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_f460
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_f460
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_f460, { 1, 0 }
  uselistorder i32 %v2_f40c, { 1, 0 }
  uselistorder i32 %v1_f40c, { 1, 0, 2 }
  uselistorder i32 %v2_f3e4, { 1, 0 }
  uselistorder i32 %v3_f41c, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_f3bc, { 1, 2, 0 }
  uselistorder i1 %v2_f3bc, { 1, 0, 2 }
  uselistorder i32 %v1_f3a0, { 1, 2, 0 }
  uselistorder i32 %v1_f3e0, { 1, 2, 0 }
  uselistorder i32 %v1_f3f8, { 1, 0 }
  uselistorder i1 %v9_f3ec, { 1, 0, 2 }
  uselistorder i1 %v3_f3ec, { 1, 0 }
  uselistorder i32 %v2_f41c.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_f390, { 1, 0 }
  uselistorder i32 %v5_f344, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_f344, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f344, { 0, 1, 3, 2 }
  uselistorder i8 32, { 2, 3, 4, 0, 5, 6, 7, 1 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_f3e4, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_f3a0, { 1, 0 }
  uselistorder label %dec_label_pc_f378, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f344, { 1, 2, 0, 3 }
}

define i32 @function_f470(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f470:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_f470 = load i32, i32* @r4, align 4
  store i32 %v3_f470, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r7.global-to-local, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f488

dec_label_pc_f488:                                ; preds = %dec_label_pc_f4ac.dec_label_pc_f488_crit_edge, %dec_label_pc_f470
  %v0_f48c = phi i32 [ %v0_f48c.pre, %dec_label_pc_f4ac.dec_label_pc_f488_crit_edge ], [ %arg3, %dec_label_pc_f470 ]
  %v0_f488 = phi i32 [ %v5_f4ac, %dec_label_pc_f4ac.dec_label_pc_f488_crit_edge ], [ %tmp, %dec_label_pc_f470 ]
  %v4_f494 = call i32 @function_12790(i32 %v0_f48c, i32 %v0_f488, i32 1)
  %v7_f498 = icmp eq i32 %v4_f494, 1
  %v0_f4a0 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_f498, label %dec_label_pc_f4a0, label %dec_label_pc_f4b8

dec_label_pc_f4a0:                                ; preds = %dec_label_pc_f488
  %v1_f4a0 = add i32 %v0_f4a0, 1
  store i32 %v1_f4a0, i32* %r5.global-to-local, align 4
  %v1_f4a4 = load i32, i32* %r8.global-to-local, align 4
  %v6_f4a8 = icmp slt i32 %v1_f4a0, %v1_f4a4
  br i1 %v6_f4a8, label %dec_label_pc_f4ac, label %.loopexit

dec_label_pc_f4ac:                                ; preds = %dec_label_pc_f4a0
  %v0_f4ac = load i32, i32* @r4, align 4
  %v1_f4ac = inttoptr i32 %v0_f4ac to i8*
  %v2_f4ac = load i8, i8* %v1_f4ac, align 1
  %v5_f4ac = add i32 %v0_f4ac, 1
  store i32 %v5_f4ac, i32* @r4, align 4
  %v7_f4b0 = icmp eq i8 %v2_f4ac, 10
  br i1 %v7_f4b0, label %dec_label_pc_f4b8, label %dec_label_pc_f4ac.dec_label_pc_f488_crit_edge

dec_label_pc_f4ac.dec_label_pc_f488_crit_edge:    ; preds = %dec_label_pc_f4ac
  %v0_f48c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f488

dec_label_pc_f4b8:                                ; preds = %dec_label_pc_f488, %dec_label_pc_f4ac
  %v0_f4b8 = phi i32 [ %v1_f4a0, %dec_label_pc_f4ac ], [ %v0_f4a0, %dec_label_pc_f488 ]
  %v2_f4b8 = icmp eq i32 %v0_f4b8, 0
  br i1 %v2_f4b8, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_f4b8
  store i32 0, i32* %r7.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_f4a0, %dec_label_pc_f4b8, %bb
  %v0_f4c0 = load i32, i32* %r7.global-to-local, align 4
  %v2_f4c4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_f4c4, i32* @r4, align 4
  ret i32 %v0_f4c0

; uselistorder directives
  uselistorder i32 %v5_f4ac, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @function_12790, { 1, 2, 0 }
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f4b8, { 1, 0 }
}

define i32 @function_f4cc() local_unnamed_addr {
dec_label_pc_f4cc:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f4cc = load i32, i32* @r4, align 4
  %v6_f4cc = load i32, i32* @r5, align 4
  %v9_f4cc = load i32, i32* @r6, align 4
  store i32 16, i32* @r6, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_f4dc = call i32 @function_fb60()
  store i32 0, i32* @r4, align 4
  %v2_f4e4 = inttoptr i32 %v0_f4dc to i32*
  store i32 0, i32* %v2_f4e4, align 4
  %v0_f4f0 = load i32, i32* @r4, align 4
  %v3_f4f4 = call i32 @function_117e8(i32 2, i32 2, i32 %v0_f4f0)
  %v7_f4f8 = icmp eq i32 %v3_f4f4, -1
  store i32 %v3_f4f4, i32* @r5, align 4
  br i1 %v7_f4f8, label %bb, label %dec_label_pc_f508

bb:                                               ; preds = %dec_label_pc_f4cc
  %v1_f500 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f560

dec_label_pc_f508:                                ; preds = %dec_label_pc_f4cc
  store i32 2, i32* %stack_var_-36, align 4
  %v1_f51c = call i32 @function_114bc(i32 134744072)
  %v1_f528 = call i32 @function_114e0(i32 53)
  %v2_f52c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f52c, i32* @r4, align 4
  %v0_f534 = load i32, i32* @r6, align 4
  %v0_f53c = load i32, i32* @r5, align 4
  %v3_f540 = call i32 @function_1142c(i32 %v0_f53c, i32 %v2_f52c, i32 %v0_f534)
  %v2_f548 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_f548, i32* @r2, align 4
  %v0_f54c = load i32, i32* @r5, align 4
  %v3_f550 = call i32 @function_11470(i32 %v0_f54c, i32 %v2_f52c, i32 %v2_f548)
  %v0_f554 = load i32, i32* @r5, align 4
  %v1_f558 = call i32 @function_12714(i32 %v0_f554)
  br label %dec_label_pc_f560

dec_label_pc_f560:                                ; preds = %bb, %dec_label_pc_f508
  %storemerge = phi i32 [ %v1_f51c, %dec_label_pc_f508 ], [ %v1_f500, %bb ]
  store i32 %v3_f4cc, i32* @r4, align 4
  store i32 %v6_f4cc, i32* @r5, align 4
  store i32 %v9_f4cc, i32* @r6, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_f4f4, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1142c, { 6, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_114e0, { 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 11, 14, 13, 12, 68, 67, 66, 65, 64, 63, 62, 61, 60, 56, 55, 59, 58, 57, 54, 50, 49, 53, 52, 51, 48, 47, 46, 45, 40, 39, 44, 43, 42, 41, 38, 37, 33, 32, 36, 35, 34, 31, 30, 29, 28, 27, 26, 25, 24, 23, 16, 15, 22, 21, 20, 19, 18, 17, 10, 9, 1, 0, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32)* @function_114bc, { 17, 18, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_117e8, { 16, 17, 14, 15, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f560, { 1, 0 }
}

define i32 @function_f56c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f56c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_f570 = load i8, i8* %tmp, align 1
  %v2_f574 = icmp eq i8 %v3_f570, 0
  br i1 %v2_f574, label %bb, label %dec_label_pc_f588

bb:                                               ; preds = %dec_label_pc_f56c
  %v4_f570 = zext i8 %v3_f570 to i32
  br label %dec_label_pc_f59c

dec_label_pc_f588:                                ; preds = %dec_label_pc_f56c
  br label %dec_label_pc_f58c

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f58c, %dec_label_pc_f588
  %v0_f58c = phi i32 [ %v1_f58c, %dec_label_pc_f58c ], [ 0, %dec_label_pc_f588 ]
  %v1_f58c = add i32 %v0_f58c, 1
  %v2_f590 = add i32 %v1_f58c, %arg2
  %v3_f590 = inttoptr i32 %v2_f590 to i8*
  %v4_f590 = load i8, i8* %v3_f590, align 1
  %v2_f594 = icmp eq i8 %v4_f590, 0
  br i1 %v2_f594, label %dec_label_pc_f59c, label %dec_label_pc_f58c

dec_label_pc_f59c:                                ; preds = %dec_label_pc_f58c, %bb
  %v0_f5e021 = phi i32 [ %v4_f570, %bb ], [ %v1_f58c, %dec_label_pc_f58c ]
  %v0_f5a42 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_f5a42, 1
  br i1 %tmp29, label %dec_label_pc_f5f4, label %dec_label_pc_f5b0

dec_label_pc_f5b0:                                ; preds = %dec_label_pc_f59c, %dec_label_pc_f5a4.backedge
  %v0_f5a8.in = phi i32 [ %v0_f5a8, %dec_label_pc_f5a4.backedge ], [ %v0_f5a42, %dec_label_pc_f59c ]
  %v1_f5bc = phi i32 [ %v1_f5bc15, %dec_label_pc_f5a4.backedge ], [ 0, %dec_label_pc_f59c ]
  %v0_f5b0 = phi i32 [ %v5_f5b0, %dec_label_pc_f5a4.backedge ], [ %tmp23, %dec_label_pc_f59c ]
  %v0_f5a8 = add i32 %v0_f5a8.in, -1
  %v1_f5b0 = inttoptr i32 %v0_f5b0 to i8*
  %v2_f5b0 = load i8, i8* %v1_f5b0, align 1
  %v3_f5b0 = zext i8 %v2_f5b0 to i32
  %v5_f5b0 = add i32 %v0_f5b0, 1
  %v1_f5b4 = add nsw i32 %v3_f5b0, -65
  %v2_f5bc = add i32 %v1_f5bc, %arg2
  %v3_f5bc = inttoptr i32 %v2_f5bc to i8*
  %v4_f5bc = load i8, i8* %v3_f5bc, align 1
  %v6_f5bc = zext i8 %v4_f5bc to i32
  %v1_f5c0 = add nsw i32 %v6_f5bc, -65
  %tmp38 = icmp ult i32 %v1_f5b4, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_f5b0
  %v5_f5c4 = or i32 %v3_f5b0, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_f5b0, %bb30
  %v1_f5d0 = phi i32 [ %v3_f5b0, %dec_label_pc_f5b0 ], [ %v5_f5c4, %bb30 ]
  %tmp39 = icmp ult i32 %v1_f5c0, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_f5cc = or i32 %v6_f5bc, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v0_f5d0 = phi i32 [ %v6_f5bc, %bb31 ], [ %v5_f5cc, %bb32 ]
  %v9_f5d0 = icmp eq i32 %v0_f5d0, %v1_f5d0
  br i1 %v9_f5d0, label %dec_label_pc_f5dc, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_f5a4.backedge

dec_label_pc_f5a4.backedge:                       ; preds = %bb34, %dec_label_pc_f5dc
  %v1_f5bc15 = phi i32 [ 0, %bb34 ], [ %v1_f5dc, %dec_label_pc_f5dc ]
  %tmp35 = icmp slt i32 %v0_f5a8, 1
  br i1 %tmp35, label %dec_label_pc_f5f4, label %dec_label_pc_f5b0

dec_label_pc_f5dc:                                ; preds = %bb33
  %v1_f5dc = add i32 %v1_f5bc, 1
  %v9_f5e0 = icmp eq i32 %v0_f5e021, %v1_f5dc
  br i1 %v9_f5e0, label %dec_label_pc_f5e8, label %dec_label_pc_f5a4.backedge

dec_label_pc_f5e8:                                ; preds = %dec_label_pc_f5dc
  %v2_f5e8 = sub i32 %v5_f5b0, %tmp23
  br label %dec_label_pc_f5f4

dec_label_pc_f5f4:                                ; preds = %dec_label_pc_f5a4.backedge, %dec_label_pc_f59c, %dec_label_pc_f5e8
  %storemerge = phi i32 [ %v2_f5e8, %dec_label_pc_f5e8 ], [ -1, %dec_label_pc_f59c ], [ -1, %dec_label_pc_f5a4.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_f5dc, { 1, 0 }
  uselistorder i32 %v0_f5b0, { 1, 0 }
  uselistorder i32 %v1_f5bc, { 1, 0 }
  uselistorder i8 %v3_f570, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder label %dec_label_pc_f5f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f5a4.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_f5b0, { 1, 0 }
}

define i32 @function_f5fc(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f5fc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_f5fc = load i32, i32* @r4, align 4
  %v6_f5fc = load i32, i32* @r5, align 4
  %v12_f5fc = load i32, i32* @r7, align 4
  %v0_f600 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f600, i32* %r8.global-to-local, align 4
  %v2_f600 = icmp eq i32 %v0_f600, 0
  store i1 %v2_f600, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_f600, label %dec_label_pc_f6e0, label %dec_label_pc_f610

dec_label_pc_f610:                                ; preds = %dec_label_pc_f5fc
  %v3_f610 = icmp eq i8 %arg1, 0
  store i1 %v3_f610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f610, label %.thread, label %dec_label_pc_f624

.thread:                                          ; preds = %dec_label_pc_f610
  %v4_f618 = inttoptr i32 %v0_f600 to i8*
  store i8 48, i8* %v4_f618, align 1
  %v0_f61c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f61c.pr.pr, label %.thread1, label %dec_label_pc_f624

.thread1:                                         ; preds = %.thread
  %v4_f61c = load i32, i32* %r8.global-to-local, align 4
  %v5_f61c = add i32 %v4_f61c, 1
  %v6_f61c = inttoptr i32 %v5_f61c to i8*
  store i8 0, i8* %v6_f61c, align 1
  %v0_f620.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f620.pr.pr, label %dec_label_pc_f6e0, label %dec_label_pc_f624

dec_label_pc_f624:                                ; preds = %dec_label_pc_f610, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_f628 = icmp eq i32 %arg2, 10
  store i1 %v7_f628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f628, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_f624
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_f624
  %v4_f624 = zext i1 %tmp47 to i32
  store i32 %v4_f624, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_f6488 = sub nsw i32 0, %tmp
  %tmp.v3_f6488 = select i1 %phitmp, i32 %tmp, i32 %v3_f6488
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_f6488, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* @r5, align 4
  %v2_f654 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_f654, i32* @r7, align 4
  br label %dec_label_pc_f658

dec_label_pc_f658:                                ; preds = %bb45, %.thread6
  %v0_f658 = phi i32 [ %v0_f67c, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_f658, i32* %r0.global-to-local, align 4
  %v0_f65c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f65c, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_f658, 16777216
  %v1_f660 = sdiv i32 %sext, 16777216
  %v3_f660 = call i32 @function_f7f4(i32 %v1_f660, i32 %v0_f65c)
  %v7_f664 = icmp eq i32 %v0_f65c, 9
  store i1 %v7_f664, i1* %cpsr_z.global-to-local, align 1
  %v1_f668 = add i32 %v0_f65c, 48
  %v0_f66c = load i32, i32* @r4, align 4
  store i32 %v0_f66c, i32* @r0, align 4
  %v7_f670 = icmp sgt i32 %v0_f65c, 9
  %extract.t = trunc i32 %v1_f668 to i8
  br i1 %v7_f670, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_f658
  %v9_f670 = add i32 %v0_f65c, 55
  %extract.t27 = trunc i32 %v9_f670 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_f658, %bb44
  %v0_f678.off0 = phi i8 [ %extract.t, %dec_label_pc_f658 ], [ %extract.t27, %bb44 ]
  %v0_f674 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f674, i32* @r1, align 4
  %v2_f678 = load i32, i32* @r5, align 4
  %v3_f678 = load i32, i32* @r7, align 4
  %v4_f678 = add i32 %v3_f678, %v2_f678
  %v5_f678 = inttoptr i32 %v4_f678 to i8*
  store i8 %v0_f678.off0, i8* %v5_f678, align 1
  %v0_f67c = call i32 @function_f6f8()
  store i32 %v0_f67c, i32* %r0.global-to-local, align 4
  store i32 %v0_f67c, i32* @r4, align 4
  %v2_f680 = icmp eq i32 %v0_f67c, 0
  store i1 %v2_f680, i1* %cpsr_z.global-to-local, align 1
  %v0_f684 = load i32, i32* @r5, align 4
  %v1_f684 = add i32 %v0_f684, -1
  store i32 %v1_f684, i32* @r5, align 4
  br i1 %v2_f680, label %dec_label_pc_f68c, label %dec_label_pc_f658

dec_label_pc_f68c:                                ; preds = %bb45
  %v0_f68c = load i32, i32* %sl.global-to-local, align 4
  %v2_f68c = icmp eq i32 %v0_f68c, 0
  store i1 %v2_f68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f68c, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_f68c
  %v3_f690 = ptrtoint i32* %stack_var_-32 to i32
  %v3_f694 = add i32 %v1_f684, %v3_f690
  store i32 %v3_f694, i32* %r2.global-to-local, align 4
  %v4_f69c = add i32 %v3_f694, -34
  %v5_f69c = inttoptr i32 %v4_f69c to i8*
  store i8 45, i8* %v5_f69c, align 1
  %v0_f6a0.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f6a0.pre = load i32, i32* @r5, align 4
  br i1 %v0_f6a0.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_f68c
  %v1_f6a0 = phi i32 [ %v1_f684, %dec_label_pc_f68c ], [ %v1_f6a0.pre, %.thread11 ]
  %v2_f6a0 = add i32 %v1_f6a0, 1
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_f6ac = phi i32 [ %v2_f6a0, %.thread12 ], [ %v1_f6a0.pre, %.thread11 ]
  %v0_f6a4 = load i32, i32* @r7, align 4
  %v2_f6a4 = add i32 %v0_f6a4, %v1_f6ac
  %v3_f6a4 = inttoptr i32 %v2_f6a4 to i8*
  %v4_f6a4 = load i8, i8* %v3_f6a4, align 1
  %v6_f6a4 = zext i8 %v4_f6a4 to i32
  %v2_f6a8 = icmp eq i8 %v4_f6a4, 0
  store i1 %v2_f6a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_f6a4, i32* %r2.global-to-local, align 4
  br i1 %v2_f6a8, label %dec_label_pc_f6f0, label %dec_label_pc_f6b8.preheader

dec_label_pc_f6b8.preheader:                      ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f6b8

dec_label_pc_f6b8:                                ; preds = %dec_label_pc_f6b8.preheader, %dec_label_pc_f6b8
  %v0_f6b8 = phi i32 [ 0, %dec_label_pc_f6b8.preheader ], [ %v1_f6b8, %dec_label_pc_f6b8 ]
  %v1_f6b8 = add i32 %v0_f6b8, 1
  store i32 %v1_f6b8, i32* %r1.global-to-local, align 4
  %v2_f6bc = add i32 %v1_f6b8, %v2_f6a4
  %v3_f6bc = inttoptr i32 %v2_f6bc to i8*
  %v4_f6bc = load i8, i8* %v3_f6bc, align 1
  %v2_f6c0 = icmp eq i8 %v4_f6bc, 0
  store i1 %v2_f6c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6c0, label %dec_label_pc_f6c8, label %dec_label_pc_f6b8

dec_label_pc_f6c8:                                ; preds = %dec_label_pc_f6b8, %dec_label_pc_f6f0
  %v0_f6cc24 = phi i32 [ %v6_f6a4, %dec_label_pc_f6f0 ], [ %v1_f6b8, %dec_label_pc_f6b8 ]
  %v0_f6c8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f6c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6cc

dec_label_pc_f6cc:                                ; preds = %dec_label_pc_f6cc.dec_label_pc_f6cc_crit_edge, %dec_label_pc_f6c8
  %v2_f6d8 = phi i32 [ %v5_f6d8, %dec_label_pc_f6cc.dec_label_pc_f6cc_crit_edge ], [ %v0_f6c8, %dec_label_pc_f6c8 ]
  %v0_f6d0 = phi i32 [ %v0_f6d0.pre, %dec_label_pc_f6cc.dec_label_pc_f6cc_crit_edge ], [ %v2_f6a4, %dec_label_pc_f6c8 ]
  %v0_f6cc = phi i32 [ %v0_f6cc.pre, %dec_label_pc_f6cc.dec_label_pc_f6cc_crit_edge ], [ %v0_f6cc24, %dec_label_pc_f6c8 ]
  %v1_f6cc = add i32 %v0_f6cc, -1
  store i32 %v1_f6cc, i32* %r1.global-to-local, align 4
  %v1_f6d0 = inttoptr i32 %v0_f6d0 to i8*
  %v2_f6d0 = load i8, i8* %v1_f6d0, align 1
  %v5_f6d0 = add i32 %v0_f6d0, 1
  store i32 %v5_f6d0, i32* %r2.global-to-local, align 4
  %v3_f6d4 = icmp eq i32 %v0_f6cc, 0
  store i1 %v3_f6d4, i1* %cpsr_z.global-to-local, align 1
  %v3_f6d8 = inttoptr i32 %v2_f6d8 to i8*
  store i8 %v2_f6d0, i8* %v3_f6d8, align 1
  %v4_f6d8 = load i32, i32* %r0.global-to-local, align 4
  %v5_f6d8 = add i32 %v4_f6d8, 1
  store i32 %v5_f6d8, i32* %r0.global-to-local, align 4
  br i1 %v3_f6d4, label %dec_label_pc_f6e0, label %dec_label_pc_f6cc.dec_label_pc_f6cc_crit_edge

dec_label_pc_f6cc.dec_label_pc_f6cc_crit_edge:    ; preds = %dec_label_pc_f6cc
  %v0_f6cc.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_f6d0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f6cc

dec_label_pc_f6e0:                                ; preds = %dec_label_pc_f6cc, %.thread1, %dec_label_pc_f5fc
  %v0_f6e0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f6e0, i32* %r0.global-to-local, align 4
  store i32 %v3_f5fc, i32* @r4, align 4
  store i32 %v6_f5fc, i32* @r5, align 4
  store i32 %v12_f5fc, i32* @r7, align 4
  ret i32 %v0_f6e0

dec_label_pc_f6f0:                                ; preds = %.thread11._crit_edge
  store i32 %v6_f6a4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f6c8

; uselistorder directives
  uselistorder i32 %v5_f6d8, { 1, 0 }
  uselistorder i1 %v3_f6d4, { 1, 0 }
  uselistorder i32 %v0_f6d0, { 1, 0 }
  uselistorder i32 %v1_f6b8, { 0, 1, 3, 2 }
  uselistorder i32 %v6_f6a4, { 1, 0 }
  uselistorder i32 %v2_f6a4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_f6a0.pre, { 1, 0 }
  uselistorder i32 %v1_f684, { 1, 0, 2 }
  uselistorder i32 %v0_f67c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_f65c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_f600, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 11, 10, 12, 13 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_f6c8, { 1, 0 }
  uselistorder label %dec_label_pc_f6b8, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_f624, { 2, 1, 0 }
}

define i32 @function_f6f8() local_unnamed_addr {
dec_label_pc_f6f8:
  %r2.global-to-local = alloca i32, align 4
  %v0_f6f8 = load i32, i32* @r1, align 4
  %v1_f6f8 = add i32 %v0_f6f8, -1
  store i32 %v1_f6f8, i32* %r2.global-to-local, align 4
  %v2_f6f8 = icmp eq i32 %v0_f6f8, 0
  %v7_f6f8 = icmp eq i32 %v0_f6f8, 1
  %v0_f6fc = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_f6f8, i32 %v0_f6fc)
  br i1 %v2_f6f8, label %dec_label_pc_f7e0, label %dec_label_pc_f704

dec_label_pc_f704:                                ; preds = %dec_label_pc_f6f8
  %v0_f704 = load i32, i32* @r0, align 4
  %v1_f704 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_f704, %v1_f704
  br i1 %tmp, label %dec_label_pc_f70c, label %dec_label_pc_f798

dec_label_pc_f70c:                                ; preds = %dec_label_pc_f704
  %v1_f70c = load i32, i32* %r2.global-to-local, align 4
  %v2_f70c = and i32 %v1_f70c, %v1_f704
  %v4_f70c = icmp eq i32 %v2_f70c, 0
  br i1 %v4_f70c, label %dec_label_pc_f7a4, label %dec_label_pc_f714

dec_label_pc_f714:                                ; preds = %dec_label_pc_f70c
  %v3_f714 = icmp ult i32 %v1_f704, 536870912
  br i1 %v3_f714, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_f714
  %v4_f718 = mul i32 %v1_f704, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_f714, %.thread
  %v0_f738.pr36.ph = phi i32 [ %v4_f718, %.thread ], [ %v1_f704, %dec_label_pc_f714 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_f714 ]
  store i32 %storemerge133, i32* @r3, align 4
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_f738.pr36 = phi i32 [ %v4_f72c, %bb81 ], [ %v0_f738.pr36.ph, %.preheader.preheader ]
  %v1_f730 = phi i32 [ %v4_f730, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_f724 = icmp ugt i32 %v0_f738.pr36, 268435455
  br i1 %v2_f724, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_f738thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_f728 = icmp ult i32 %v0_f738.pr36, %v0_f704
  br i1 %v4_f728, label %bb80, label %dec_label_pc_f738thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_f72c = and i32 %v0_f738.pr36, 268435456
  %v3_f72c = icmp eq i32 %v2_f72c, 0
  %v4_f72c = mul i32 %v0_f738.pr36, 16
  br i1 %v3_f72c, label %bb81, label %dec_label_pc_f738.loopexit

bb81:                                             ; preds = %bb80
  %v2_f730 = and i32 %v1_f730, 268435456
  %v3_f730 = icmp eq i32 %v2_f730, 0
  %v4_f730 = mul i32 %v1_f730, 16
  store i32 %v4_f730, i32* @r3, align 4
  br i1 %v3_f730, label %.preheader, label %dec_label_pc_f738thread-pre-split.loopexit.loopexit

dec_label_pc_f738thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_f74448.ph = phi i32 [ %v1_f730, %bb ], [ %v4_f730, %bb81 ]
  %v0_f738.pr38.ph = phi i32 [ %v0_f738.pr36, %bb ], [ %v4_f72c, %bb81 ]
  br label %dec_label_pc_f738thread-pre-split.loopexit

dec_label_pc_f738thread-pre-split.loopexit:       ; preds = %dec_label_pc_f738thread-pre-split.loopexit.loopexit, %.thread2
  %v1_f74448 = phi i32 [ %v1_f730, %.thread2 ], [ %v1_f74448.ph, %dec_label_pc_f738thread-pre-split.loopexit.loopexit ]
  %v0_f738.pr38 = phi i32 [ %v0_f738.pr36, %.thread2 ], [ %v0_f738.pr38.ph, %dec_label_pc_f738thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_f738thread-pre-split

dec_label_pc_f738thread-pre-split:                ; preds = %dec_label_pc_f738thread-pre-split.loopexit, %bb83
  %v1_f74446 = phi i32 [ %v1_f74448, %dec_label_pc_f738thread-pre-split.loopexit ], [ %v3_f744, %bb83 ]
  %v0_f738.pr = phi i32 [ %v0_f738.pr38, %dec_label_pc_f738thread-pre-split.loopexit ], [ %v3_f740, %bb83 ]
  br label %dec_label_pc_f738

dec_label_pc_f738.loopexit:                       ; preds = %bb80
  br label %dec_label_pc_f738

dec_label_pc_f738:                                ; preds = %dec_label_pc_f738.loopexit, %dec_label_pc_f738thread-pre-split
  %v1_f744 = phi i32 [ %v1_f74446, %dec_label_pc_f738thread-pre-split ], [ %v1_f730, %dec_label_pc_f738.loopexit ]
  %v1_f740 = phi i32 [ %v0_f738.pr, %dec_label_pc_f738thread-pre-split ], [ %v4_f72c, %dec_label_pc_f738.loopexit ]
  %v2_f738 = icmp slt i32 %v1_f740, 0
  br i1 %v2_f738, label %dec_label_pc_f74c, label %bb82

bb82:                                             ; preds = %dec_label_pc_f738
  %v4_f73c = icmp ult i32 %v1_f740, %v0_f704
  br i1 %v4_f73c, label %bb83, label %dec_label_pc_f74c

bb83:                                             ; preds = %bb82
  %v3_f740 = mul i32 %v1_f740, 2
  %v2_f744 = icmp slt i32 %v1_f744, 0
  %v3_f744 = mul i32 %v1_f744, 2
  store i32 %v3_f744, i32* @r3, align 4
  br i1 %v2_f744, label %dec_label_pc_f74c, label %dec_label_pc_f738thread-pre-split

dec_label_pc_f74c:                                ; preds = %bb82, %dec_label_pc_f738, %bb83
  %v2_f75859 = phi i32 [ %v3_f744, %bb83 ], [ %v1_f744, %bb82 ], [ %v1_f744, %dec_label_pc_f738 ]
  %v1_f75051 = phi i32 [ %v3_f740, %bb83 ], [ %v1_f740, %bb82 ], [ %v1_f740, %dec_label_pc_f738 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f750

dec_label_pc_f750:                                ; preds = %.thread11, %dec_label_pc_f74c
  %v1_f784 = phi i32 [ %v4_f784, %.thread11 ], [ %v2_f75859, %dec_label_pc_f74c ]
  %v1_f758 = phi i32 [ %v0_f790, %.thread11 ], [ 0, %dec_label_pc_f74c ]
  %v1_f788 = phi i32 [ %v4_f788, %.thread11 ], [ %v1_f75051, %dec_label_pc_f74c ]
  %v1_f754 = phi i32 [ %v0_f780, %.thread11 ], [ %v0_f704, %dec_label_pc_f74c ]
  %v3_f750 = icmp ult i32 %v1_f754, %v1_f788
  br i1 %v3_f750, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_f750
  %v3_f754 = sub i32 %v1_f754, %v1_f788
  %v3_f758 = or i32 %v1_f758, %v1_f784
  store i32 %v3_f758, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_f750, %bb84
  %v1_f760 = phi i32 [ %v1_f754, %dec_label_pc_f750 ], [ %v3_f754, %bb84 ]
  %v1_f764 = phi i32 [ %v1_f758, %dec_label_pc_f750 ], [ %v3_f758, %bb84 ]
  %v4_f75c = udiv i32 %v1_f788, 2
  %v6_f75c = icmp ult i32 %v1_f760, %v4_f75c
  br i1 %v6_f75c, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_f760 = urem i32 %v1_f788, 2
  %v4_f760 = icmp eq i32 %v3_f760, 0
  %v6_f760 = sub i32 %v1_f760, %v4_f75c
  br i1 %v4_f760, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_f764 = udiv i32 %v1_f784, 2
  %v6_f764 = or i32 %v1_f764, %v5_f764
  store i32 %v6_f764, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_f76c = phi i32 [ %v6_f760, %bb85 ], [ %v1_f760, %.thread7 ], [ %v6_f760, %bb86 ]
  %v1_f770 = phi i32 [ %v1_f764, %bb85 ], [ %v1_f764, %.thread7 ], [ %v6_f764, %bb86 ]
  %v4_f768 = udiv i32 %v1_f788, 4
  %v6_f768 = icmp ult i32 %v1_f76c, %v4_f768
  br i1 %v6_f768, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_f76c = and i32 %v1_f788, 2
  %v4_f76c = icmp eq i32 %v3_f76c, 0
  %v6_f76c = sub i32 %v1_f76c, %v4_f768
  br i1 %v4_f76c, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_f770 = udiv i32 %v1_f784, 4
  %v6_f770 = or i32 %v1_f770, %v5_f770
  store i32 %v6_f770, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_f778 = phi i32 [ %v6_f76c, %bb87 ], [ %v1_f76c, %.thread8 ], [ %v6_f76c, %bb88 ]
  %v1_f77c = phi i32 [ %v1_f770, %bb87 ], [ %v1_f770, %.thread8 ], [ %v6_f770, %bb88 ]
  %v4_f774 = udiv i32 %v1_f788, 8
  %v6_f774 = icmp ult i32 %v1_f778, %v4_f774
  br i1 %v6_f774, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_f778 = and i32 %v1_f788, 4
  %v4_f778 = icmp eq i32 %v3_f778, 0
  %v6_f778 = sub i32 %v1_f778, %v4_f774
  br i1 %v4_f778, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_f77c = udiv i32 %v1_f784, 8
  %v6_f77c = or i32 %v1_f77c, %v5_f77c
  store i32 %v6_f77c, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_f790 = phi i32 [ %v1_f77c, %bb89 ], [ %v1_f77c, %.thread9 ], [ %v6_f77c, %bb90 ]
  %v0_f780 = phi i32 [ %v6_f778, %bb89 ], [ %v1_f778, %.thread9 ], [ %v6_f778, %bb90 ]
  %v2_f780 = icmp eq i32 %v0_f780, 0
  br i1 %v2_f780, label %dec_label_pc_f790, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %v4_f784 = udiv i32 %v1_f784, 16
  store i32 %v4_f784, i32* @r3, align 4
  %tmp138 = icmp ult i32 %v1_f784, 16
  br i1 %tmp138, label %dec_label_pc_f790, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_f788 = udiv i32 %v1_f788, 16
  br label %dec_label_pc_f750

dec_label_pc_f790:                                ; preds = %thread-pre-split, %bb91
  ret i32 %v0_f790

dec_label_pc_f798:                                ; preds = %dec_label_pc_f704
  %v9_f704 = icmp eq i32 %v0_f704, %v1_f704
  %. = zext i1 %v9_f704 to i32
  ret i32 %.

dec_label_pc_f7a4:                                ; preds = %dec_label_pc_f70c
  %v2_f7a4 = icmp ugt i32 %v1_f704, 65535
  br i1 %v2_f7a4, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_f7a4
  %v2_f7a8 = and i32 %v1_f704, 32768
  %v3_f7a8 = icmp eq i32 %v2_f7a8, 0
  %v4_f7a8 = udiv i32 %v1_f704, 65536
  br i1 %v3_f7a8, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_f7a4
  %v0_f7b465 = phi i32 [ %v1_f704, %dec_label_pc_f7a4 ], [ %v4_f7a8, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_f7b8 = phi i32 [ %v0_f7b465, %.thread16 ], [ %v4_f7a8, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_f7b4 = icmp ugt i32 %v1_f7b8, 255
  br i1 %v2_f7b4, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_f7b8 = and i32 %v1_f7b8, 128
  %v3_f7b8 = icmp eq i32 %v2_f7b8, 0
  %v4_f7b8 = udiv i32 %v1_f7b8, 256
  br i1 %v3_f7b8, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_f7bc = or i32 %storemerge, 8
  store i32 %v2_f7bc, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_f7c8 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_f7bc, %bb98 ]
  %v1_f7c4 = phi i32 [ %v1_f7b8, %bb96 ], [ %v4_f7b8, %bb97 ], [ %v4_f7b8, %bb98 ]
  %v2_f7c0 = icmp ugt i32 %v1_f7c4, 15
  br i1 %v2_f7c0, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_f7c4 = and i32 %v1_f7c4, 8
  %v3_f7c4 = icmp eq i32 %v2_f7c4, 0
  %v4_f7c4 = udiv i32 %v1_f7c4, 16
  br i1 %v3_f7c4, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_f7c8 = add nsw i32 %v1_f7c8, 4
  store i32 %v2_f7c8, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_f7d0 = phi i32 [ %v1_f7c8, %.thread17 ], [ %v1_f7c8, %bb99 ], [ %v2_f7c8, %bb100 ]
  %v5_f7d4 = phi i32 [ %v1_f7c4, %.thread17 ], [ %v4_f7c4, %bb99 ], [ %v4_f7c4, %bb100 ]
  %v2_f7cc = icmp ugt i32 %v5_f7d4, 3
  %v7_f7cc = icmp eq i32 %v5_f7d4, 4
  %v2_f7d0 = xor i1 %v7_f7cc, true
  %v3_f7d0 = and i1 %v2_f7cc, %v2_f7d0
  br i1 %v3_f7d0, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_f7d0 = add nsw i32 %v4_f7d0, 3
  store i32 %v5_f7d0, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_f7d4 = phi i32 [ %v4_f7d0, %.thread18 ], [ %v5_f7d0, %bb101 ]
  %v2_f7d4 = xor i1 %v2_f7cc, true
  %v3_f7d4 = or i1 %v7_f7cc, %v2_f7d4
  br i1 %v3_f7d4, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_f7d4 = udiv i32 %v5_f7d4, 2
  %v9_f7d4 = add i32 %v4_f7d4, %v8_f7d4
  store i32 %v9_f7d4, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_f7d8 = phi i32 [ %v4_f7d4, %bb102 ], [ %v9_f7d4, %bb103 ]
  %v6_f7d8 = lshr i32 %v0_f704, %v1_f7d8
  ret i32 %v6_f7d8

dec_label_pc_f7e0:                                ; preds = %dec_label_pc_f6f8
  %v0_f7e0 = load i32, i32* @lr, align 4
  %v0_f7e4 = call i32 @function_f80c()
  store i32 %v0_f7e0, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_f7d4, { 1, 0 }
  uselistorder i1 %v7_f7cc, { 1, 0 }
  uselistorder i32 %v4_f7c4, { 1, 0 }
  uselistorder i32 %v1_f7c4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f7bc, { 1, 0 }
  uselistorder i32 %v4_f7b8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_f7b8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_f7a8, { 1, 0 }
  uselistorder i32 %v0_f780, { 1, 0 }
  uselistorder i32 %v4_f774, { 1, 0 }
  uselistorder i32 %v1_f77c, { 1, 2, 0 }
  uselistorder i32 %v4_f768, { 1, 0 }
  uselistorder i32 %v1_f770, { 1, 2, 0 }
  uselistorder i32 %v4_f75c, { 1, 0 }
  uselistorder i32 %v1_f764, { 1, 2, 0 }
  uselistorder i32 %v1_f788, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_f758, { 1, 0 }
  uselistorder i32 %v3_f744, { 2, 0, 1 }
  uselistorder i32 %v3_f740, { 1, 0 }
  uselistorder i32 %v1_f740, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_f744, { 1, 2, 0, 3 }
  uselistorder i32 %v4_f730, { 2, 0, 1 }
  uselistorder i32 %v4_f72c, { 2, 1, 0 }
  uselistorder i32 %v1_f730, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_f738.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_f704, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_f704, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_f6f8, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_f790, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_f74c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f738thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_f7f4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f7f4:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_f7f8 = call i32 @function_f6f8()
  %v2_f800 = mul i32 %v0_f7f8, %arg2
  store i32 %v2_f800, i32* @r3, align 4
  ret i32 %v0_f7f8

; uselistorder directives
  uselistorder i32 %v0_f7f8, { 1, 0 }
}

define i32 @function_f80c() local_unnamed_addr {
dec_label_pc_f80c:
  %v1_f814 = call i32 @function_11a84(i32 8)
  ret i32 %v1_f814
}

define i32 @function_f820(i32* %arg1) local_unnamed_addr {
dec_label_pc_f820:
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_f820 = load i32, i32* @r4, align 4
  %v6_f820 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_f82c = load i32, i32* %arg1, align 4
  %v1_f830 = call i32 @function_12714(i32 %v2_f82c)
  store i32 %v1_f830, i32* @r5, align 4
  %v0_f838 = load i32, i32* @r4, align 4
  %v1_f83c = call i32 @function_10414(i32 %v0_f838)
  %v0_f840 = load i32, i32* @r5, align 4
  store i32 %v3_f820, i32* @r4, align 4
  store i32 %v6_f820, i32* @r5, align 4
  ret i32 %v0_f840

; uselistorder directives
  uselistorder i32 (i32)* @function_12714, { 11, 24, 28, 27, 23, 26, 25, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 10, 1, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
}

define i32 @function_f850(i32 %arg1) local_unnamed_addr {
dec_label_pc_f850:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_f850 = load i32, i32* @r7, align 4
  store i32 %v3_f850, i32* %stack_var_-8, align 4
  %v0_f858 = load i32, i32* @r0, align 4
  %v2_f858 = call i32 @function_fd74(i32 %v0_f858, i32 540672)
  store i32 %v2_f858, i32* %r0.global-to-local, align 4
  store i32 %v2_f858, i32* @r7, align 4
  %v1_f85c = icmp slt i32 %v2_f858, 0
  br i1 %v1_f85c, label %.thread5, label %dec_label_pc_f868

.thread5:                                         ; preds = %dec_label_pc_f850
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f894

dec_label_pc_f868:                                ; preds = %dec_label_pc_f850
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_f870 = call i32 @function_fea0(i32 1, i32 2080)
  store i32 %v2_f870, i32* %r0.global-to-local, align 4
  %v2_f874 = icmp eq i32 %v2_f870, 0
  br i1 %v2_f874, label %dec_label_pc_f884, label %.thread.dec_label_pc_f894_crit_edge

.thread.dec_label_pc_f894_crit_edge:              ; preds = %dec_label_pc_f868
  store i32 %v2_f870, i32* %r0.global-to-local, align 4
  %v1_f87c = load i32, i32* @r7, align 4
  %v3_f87c = inttoptr i32 %v2_f870 to i32*
  store i32 %v1_f87c, i32* %v3_f87c, align 4
  %v1_f898.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f894

dec_label_pc_f884:                                ; preds = %dec_label_pc_f868
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f894

dec_label_pc_f894:                                ; preds = %.thread5, %.thread.dec_label_pc_f894_crit_edge, %dec_label_pc_f884
  %v1_f898 = phi i32 [ %v1_f898.pre, %.thread.dec_label_pc_f894_crit_edge ], [ 0, %dec_label_pc_f884 ], [ 0, %.thread5 ]
  %v2_f894 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_f894, i32* @r7, align 4
  ret i32 %v1_f898

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 (i32, i32)* @function_fea0, { 31, 32, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32, i32)* @function_fd74, { 2, 5, 4, 3, 1, 0 }
  uselistorder label %dec_label_pc_f894, { 2, 1, 0 }
}

define i32 @function_f89c(i32* %arg1) local_unnamed_addr {
dec_label_pc_f89c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_f89c = load i32, i32* @r4, align 4
  store i32 %v3_f89c, i32* %stack_var_-12, align 4
  %v1_f8a0 = add i32 %tmp, 16
  store i32 %v1_f8a0, i32* %r2.global-to-local, align 4
  %v1_f8a4 = inttoptr i32 %v1_f8a0 to i32*
  %v2_f8a4 = load i32, i32* %v1_f8a4, align 4
  store i32 %v2_f8a4, i32* %r2.global-to-local, align 4
  %v3_f8a4 = add i32 %tmp, 20
  %v4_f8a4 = inttoptr i32 %v3_f8a4 to i32*
  %v5_f8a4 = load i32, i32* %v4_f8a4, align 4
  store i32 %v5_f8a4, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* %ip.global-to-local, align 4
  %v5_f8b4 = icmp slt i32 %v2_f8a4, %v5_f8a4
  br i1 %v5_f8b4, label %dec_label_pc_f908, label %dec_label_pc_f8b8

dec_label_pc_f8b8:                                ; preds = %dec_label_pc_f89c
  store i32 217, i32* %r7.global-to-local, align 4
  %v2_f8bc = load i32, i32* %arg1, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_f8bc, i32* %r7.global-to-local, align 4
  %tmp9 = icmp slt i32 %v2_f8bc, 1
  br i1 %tmp9, label %dec_label_pc_f8e0, label %.dec_label_pc_f908_crit_edge

.dec_label_pc_f908_crit_edge:                     ; preds = %dec_label_pc_f8b8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_f8bc, i32* %v4_f8a4, align 4
  %v5_f8d8 = load i32, i32* %r3.global-to-local, align 4
  %v6_f8d8 = load i32, i32* %ip.global-to-local, align 4
  %v7_f8d8 = add i32 %v6_f8d8, 16
  %v8_f8d8 = inttoptr i32 %v7_f8d8 to i32*
  store i32 %v5_f8d8, i32* %v8_f8d8, align 4
  %v0_f908.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f908

dec_label_pc_f8e0:                                ; preds = %dec_label_pc_f8b8
  %v1_f8e0 = add i32 %v2_f8bc, 2
  %v7_f8e0 = icmp eq i32 %v1_f8e0, 0
  br i1 %v7_f8e0, label %bb10, label %bb

bb:                                               ; preds = %dec_label_pc_f8e0
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_f8e0, %bb
  %storemerge = phi i32 [ 1, %bb ], [ %v1_f8e0, %dec_label_pc_f8e0 ]
  %v0_f8e8 = phi i32 [ 1, %bb ], [ 0, %dec_label_pc_f8e0 ]
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %tmp12 = icmp slt i32 %v2_f8bc, 0
  %v4_f8e8 = zext i1 %tmp12 to i32
  %v5_f8e8 = and i32 %v0_f8e8, %v4_f8e8
  %v6_f8e8 = icmp eq i32 %v5_f8e8, 0
  br i1 %v6_f8e8, label %bb11, label %dec_label_pc_f8f4

bb11:                                             ; preds = %bb10
  store i32 0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f930

dec_label_pc_f8f4:                                ; preds = %bb10
  %v0_f8f4 = call i32 @function_fb60()
  %v0_f8f8 = load i32, i32* %r7.global-to-local, align 4
  %v1_f8f8 = sub i32 0, %v0_f8f8
  store i32 %v1_f8f8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_f900 = inttoptr i32 %v0_f8f4 to i32*
  store i32 %v1_f8f8, i32* %v2_f900, align 4
  br label %dec_label_pc_f930

dec_label_pc_f908:                                ; preds = %.dec_label_pc_f908_crit_edge, %dec_label_pc_f89c
  %v1_f924 = phi i32 [ %v0_f908.pre, %.dec_label_pc_f908_crit_edge ], [ %tmp, %dec_label_pc_f89c ]
  %v1_f908 = add i32 %v1_f924, 16
  %v2_f908 = inttoptr i32 %v1_f908 to i32*
  %v3_f908 = load i32, i32* %v2_f908, align 4
  %v1_f90c = add i32 %v1_f924, 32
  store i32 %v1_f90c, i32* %r3.global-to-local, align 4
  %v2_f910 = add i32 %v3_f908, %v1_f90c
  store i32 %v2_f910, i32* %lr.global-to-local, align 4
  %v1_f914 = add i32 %v2_f910, 16
  %v2_f914 = inttoptr i32 %v1_f914 to i16*
  %v3_f914 = load i16, i16* %v2_f914, align 2
  %v4_f914 = zext i16 %v3_f914 to i32
  store i32 %v4_f914, i32* %r2.global-to-local, align 4
  %v1_f918 = add i32 %v2_f910, 8
  store i32 %v1_f918, i32* %r3.global-to-local, align 4
  %v1_f91c = inttoptr i32 %v1_f918 to i32*
  %v2_f91c = load i32, i32* %v1_f91c, align 4
  store i32 %v2_f91c, i32* %r3.global-to-local, align 4
  %v3_f91c = add i32 %v2_f910, 12
  %v4_f91c = inttoptr i32 %v3_f91c to i32*
  %v5_f91c = load i32, i32* %v4_f91c, align 4
  store i32 %v5_f91c, i32* %r4.global-to-local, align 4
  %v2_f920 = add i32 %v4_f914, %v3_f908
  store i32 %v2_f920, i32* %r2.global-to-local, align 4
  %v2_f924 = add i32 %v1_f924, 8
  %v3_f924 = inttoptr i32 %v2_f924 to i32*
  store i32 %v2_f91c, i32* %v3_f924, align 4
  %v0_f928 = load i32, i32* %r4.global-to-local, align 4
  %v1_f928 = load i32, i32* %ip.global-to-local, align 4
  %v2_f928 = add i32 %v1_f928, 12
  %v3_f928 = inttoptr i32 %v2_f928 to i32*
  store i32 %v0_f928, i32* %v3_f928, align 4
  %v0_f92c = load i32, i32* %r2.global-to-local, align 4
  %v1_f92c = load i32, i32* %ip.global-to-local, align 4
  %v2_f92c = add i32 %v1_f92c, 16
  %v3_f92c = inttoptr i32 %v2_f92c to i32*
  store i32 %v0_f92c, i32* %v3_f92c, align 4
  br label %dec_label_pc_f930

dec_label_pc_f930:                                ; preds = %bb11, %dec_label_pc_f8f4, %dec_label_pc_f908
  %v0_f930 = load i32, i32* %lr.global-to-local, align 4
  %v2_f938 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f938, i32* @r4, align 4
  ret i32 %v0_f930

; uselistorder directives
  uselistorder i32 %v1_f924, { 0, 2, 1 }
  uselistorder i32 %tmp, { 0, 3, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32* %lr.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_f930, { 2, 1, 0 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @function_f944(i32 %arg1) local_unnamed_addr {
dec_label_pc_f944:
  %v1_f944 = load i32, i32* @r0, align 4
  ret i32 %v1_f944
}

define i32 @function_f948(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_f948:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp41 = call i32 @__decompiler_undefined_function_0()
  %tmp42 = call i32 @__decompiler_undefined_function_0()
  %tmp43 = call i32 @__decompiler_undefined_function_0()
  %tmp44 = call i32 @__decompiler_undefined_function_0()
  %tmp45 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-56 = alloca i32, align 4
  %tmp55 = call i32 @__decompiler_undefined_function_0()
  %tmp56 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %v4_f94c = mul i32 %arg2, 4
  %v5_f94c = add i32 %v4_f94c, 4
  %v1_f950 = add i32 %v5_f94c, %tmp
  store i32 %v1_f950, i32* @r5, align 4
  %v2_f958 = load i32, i32* %arg3, align 4
  store i32 %v2_f958, i32* @r7, align 4
  store i32 %v1_f950, i32* @global_var_1f504.328, align 4
  %v2_f960 = ptrtoint i32* %stack_var_-208 to i32
  store i32 %tmp, i32* @r6, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg1, i32* @sl, align 4
  br label %dec_label_pc_f974

dec_label_pc_f974:                                ; preds = %dec_label_pc_f974, %dec_label_pc_f948
  %v0_f974 = phi i32 [ %v4_f978, %dec_label_pc_f974 ], [ %v1_f950, %dec_label_pc_f948 ]
  store i32 %v0_f974, i32* @r4, align 4
  %v1_f978 = inttoptr i32 %v0_f974 to i32*
  %v2_f978 = load i32, i32* %v1_f978, align 4
  store i32 %v2_f978, i32* %r1.global-to-local, align 4
  %v4_f978 = add i32 %v0_f974, 4
  %v2_f97c = icmp eq i32 %v2_f978, 0
  br i1 %v2_f97c, label %dec_label_pc_f984, label %dec_label_pc_f974

dec_label_pc_f984:                                ; preds = %dec_label_pc_f974
  store i32 152, i32* %r2.global-to-local, align 4
  store i32 %v2_f960, i32* %r0.global-to-local, align 4
  %v3_f98c = bitcast i32* %stack_var_-208 to i8*
  %v4_f98c = call i32 @function_12154(i8* %v3_f98c, i32 0, i32 152)
  store i32 %v4_f98c, i32* %r0.global-to-local, align 4
  %v0_f994 = load i32, i32* @r4, align 4
  %v1_f994 = add i32 %v0_f994, 4
  store i32 %v1_f994, i32* %r2.global-to-local, align 4
  store i32 %v0_f994, i32* %r1.global-to-local, align 4
  store i32 %v1_f994, i32* @global_var_1f6f8.258, align 4
  %v2_f9bc19 = inttoptr i32 %v1_f994 to i32*
  %v3_f9bc20 = load i32, i32* %v2_f9bc19, align 4
  %v2_f9c022 = icmp eq i32 %v3_f9bc20, 0
  br i1 %v2_f9c022, label %dec_label_pc_f9c8, label %dec_label_pc_f9a4.lr.ph

dec_label_pc_f9a4.lr.ph:                          ; preds = %dec_label_pc_f984
  %v6_f9ac = ptrtoint i32* %stack_var_-32 to i32
  br label %dec_label_pc_f9a4

dec_label_pc_f9a4:                                ; preds = %dec_label_pc_f9a4.lr.ph, %dec_label_pc_f9bc
  %v4_f9a8 = phi i32 [ %v0_f994, %dec_label_pc_f9a4.lr.ph ], [ %v1_f9b8, %dec_label_pc_f9bc ]
  %v5_f9b0 = phi i32 [ %v3_f9bc20, %dec_label_pc_f9a4.lr.ph ], [ %v3_f9bc, %dec_label_pc_f9bc ]
  %v2_f9a4 = icmp ugt i32 %v5_f9b0, 36
  %v7_f9a4 = icmp eq i32 %v5_f9b0, 37
  %v2_f9a8 = xor i1 %v2_f9a4, true
  %v3_f9a8 = or i1 %v7_f9a4, %v2_f9a8
  br i1 %v3_f9a8, label %bb, label %.thread38

bb:                                               ; preds = %dec_label_pc_f9a4
  %v5_f9a8 = add i32 %v4_f9a8, 8
  %v6_f9a8 = inttoptr i32 %v5_f9a8 to i32*
  %v7_f9a8 = load i32, i32* %v6_f9a8, align 4
  store i32 %v7_f9a8, i32* %r2.global-to-local, align 4
  store i32 %v6_f9ac, i32* %r0.global-to-local, align 4
  %v6_f9b0 = and i32 %v5_f9b0, 1073741824
  %v7_f9b0 = icmp ne i32 %v6_f9b0, 0
  %v8_f9b0 = mul i32 %v5_f9b0, 4
  %v9_f9b0 = add i32 %v8_f9b0, %v6_f9ac
  br label %.thread38

.thread38:                                        ; preds = %dec_label_pc_f9a4, %bb
  %v5_f9b4 = phi i32 [ %v9_f9b0, %bb ], [ %v5_f9b0, %dec_label_pc_f9a4 ]
  %v1_f9b423 = phi i1 [ %v7_f9b0, %bb ], [ %v2_f9a4, %dec_label_pc_f9a4 ]
  %v2_f9b4 = xor i1 %v1_f9b423, true
  %v3_f9b4 = or i1 %v7_f9a4, %v2_f9b4
  br i1 %v3_f9b4, label %bb60, label %dec_label_pc_f9bc

bb60:                                             ; preds = %.thread38
  %v4_f9b4 = load i32, i32* %r2.global-to-local, align 4
  %v6_f9b4 = add i32 %v5_f9b4, -176
  %v7_f9b4 = inttoptr i32 %v6_f9b4 to i32*
  store i32 %v4_f9b4, i32* %v7_f9b4, align 4
  %v0_f9b8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f9bc

dec_label_pc_f9bc:                                ; preds = %.thread38, %bb60
  %v0_f9b8 = phi i32 [ %v4_f9a8, %.thread38 ], [ %v0_f9b8.pre, %bb60 ]
  %v1_f9b8 = add i32 %v0_f9b8, 8
  store i32 %v1_f9b8, i32* %r1.global-to-local, align 4
  %v1_f9bc = add i32 %v0_f9b8, 12
  %v2_f9bc = inttoptr i32 %v1_f9bc to i32*
  %v3_f9bc = load i32, i32* %v2_f9bc, align 4
  %v2_f9c0 = icmp eq i32 %v3_f9bc, 0
  br i1 %v2_f9c0, label %dec_label_pc_f9bc.dec_label_pc_f9c8_crit_edge, label %dec_label_pc_f9a4

dec_label_pc_f9bc.dec_label_pc_f9c8_crit_edge:    ; preds = %dec_label_pc_f9bc
  br label %dec_label_pc_f9c8

dec_label_pc_f9c8:                                ; preds = %dec_label_pc_f9bc.dec_label_pc_f9c8_crit_edge, %dec_label_pc_f984
  store i32 %tmp45, i32* %r2.global-to-local, align 4
  %v0_f9e8 = load i32, i32* @r7, align 4
  %v2_f9e8 = icmp eq i32 %v0_f9e8, 0
  store i32 %tmp45, i32* @global_var_1f700.262, align 4
  br i1 %v2_f9e8, label %dec_label_pc_fa2c, label %dec_label_pc_f9f4

dec_label_pc_f9f4:                                ; preds = %dec_label_pc_f9c8
  store i32 ptrtoint (i32* @global_var_1f0d4.335 to i32), i32* %r2.global-to-local, align 4
  store i32 %v0_f9e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0d4.335 to i32), i32* %r0.global-to-local, align 4
  store i32 %v0_f9e8, i32* @global_var_1f0d8.337, align 4
  store i32 %v0_f9e8, i32* @global_var_1f0d4.335, align 4
  %v1_fa2013 = inttoptr i32 %v0_f9e8 to i8*
  %v2_fa2014 = load i8, i8* %v1_fa2013, align 1
  %v2_fa2416 = icmp eq i8 %v2_fa2014, 0
  br i1 %v2_fa2416, label %dec_label_pc_fa2c, label %dec_label_pc_fa10

dec_label_pc_fa10:                                ; preds = %dec_label_pc_f9f4, %.thread
  %v1_fa14 = phi i32 [ %v1_fa1c, %.thread ], [ %v0_f9e8, %dec_label_pc_f9f4 ]
  %v0_fa10.in = phi i8 [ %v2_fa20, %.thread ], [ %v2_fa2014, %dec_label_pc_f9f4 ]
  %v7_fa10 = icmp eq i8 %v0_fa10.in, 47
  br i1 %v7_fa10, label %bb61, label %.thread

bb61:                                             ; preds = %dec_label_pc_fa10
  %v2_fa14 = add i32 %v1_fa14, 1
  %v2_fa18 = load i32, i32* %r0.global-to-local, align 4
  %v3_fa18 = inttoptr i32 %v2_fa18 to i32*
  store i32 %v2_fa14, i32* %v3_fa18, align 4
  %v0_fa1c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_fa10, %bb61
  %v0_fa1c = phi i32 [ %v1_fa14, %dec_label_pc_fa10 ], [ %v0_fa1c.pre, %bb61 ]
  %v1_fa1c = add i32 %v0_fa1c, 1
  store i32 %v1_fa1c, i32* %r1.global-to-local, align 4
  %v1_fa20 = inttoptr i32 %v1_fa1c to i8*
  %v2_fa20 = load i8, i8* %v1_fa20, align 1
  %v2_fa24 = icmp eq i8 %v2_fa20, 0
  br i1 %v2_fa24, label %dec_label_pc_fa2c, label %dec_label_pc_fa10

dec_label_pc_fa2c:                                ; preds = %.thread, %dec_label_pc_f9f4, %dec_label_pc_f9c8
  store i32 %v2_f960, i32* %r0.global-to-local, align 4
  %v1_fa30 = call i32 @function_129c4(i32 %v2_f960)
  store i32 %tmp44, i32* @r0, align 4
  %v2_fa40 = call i32 @function_f944(i32 %tmp44)
  store i32 %v2_fa40, i32* @r0, align 4
  store i32 %tmp56, i32* %r2.global-to-local, align 4
  %v9_fa4c = icmp eq i32 %tmp56, %tmp43
  br i1 %v9_fa4c, label %dec_label_pc_fa54, label %dec_label_pc_fa70

dec_label_pc_fa54:                                ; preds = %dec_label_pc_fa2c
  store i32 %tmp55, i32* %r2.global-to-local, align 4
  %v9_fa5c = icmp eq i32 %tmp55, %tmp42
  br i1 %v9_fa5c, label %dec_label_pc_fa64, label %dec_label_pc_fa70

dec_label_pc_fa64:                                ; preds = %dec_label_pc_fa54
  %v2_fa68 = icmp eq i32 %tmp41, 0
  br i1 %v2_fa68, label %dec_label_pc_faec, label %dec_label_pc_fa70

dec_label_pc_fa70:                                ; preds = %dec_label_pc_fa54, %dec_label_pc_fa2c, %dec_label_pc_fa64
  %v2_fa70 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_fa70, i32* @r4, align 4
  store i32 %v2_fa70, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v3_fa80 = bitcast i32* %stack_var_-56 to i8*
  %v4_fa80 = call i32 @function_12154(i8* %v3_fa80, i32 0, i32 24)
  store i32 168, i32* %r7.global-to-local, align 4
  store i32 %v2_fa70, i32* @r0, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_faac

dec_label_pc_faac:                                ; preds = %bb63, %dec_label_pc_fa70
  %v1_faac = phi i32 [ %v1_fad4, %bb63 ], [ 0, %dec_label_pc_fa70 ]
  %v0_faac = load i32, i32* @r4, align 4
  %v2_faac = add i32 %v0_faac, %v1_faac
  %v1_fab0 = add i32 %v2_faac, 6
  %v2_fab0 = inttoptr i32 %v1_fab0 to i16*
  %v3_fab0 = load i16, i16* %v2_fab0, align 2
  %v1_fab4 = and i16 %v3_fab0, 32
  %v2_fab4 = icmp eq i16 %v1_fab4, 0
  br i1 %v2_fab4, label %bb63, label %dec_label_pc_fabc

dec_label_pc_fabc:                                ; preds = %dec_label_pc_faac
  store i32 5, i32* %r7.global-to-local, align 4
  store i32 ptrtoint ([10 x i8]* @global_var_16708.340 to i32), i32* @r0, align 4
  store i32 131074, i32* %r1.global-to-local, align 4
  br i1 icmp slt ([10 x i8]* @global_var_16708.340, [10 x i8]* null), label %bb62, label %bb63

bb62:                                             ; preds = %dec_label_pc_fabc
  %v3_fad0 = load i32, i32* %ip.global-to-local, align 4
  %v4_fad0 = trunc i32 %v3_fad0 to i8
  %v6_fad0 = inttoptr i32 %v3_fad0 to i8*
  store i8 %v4_fad0, i8* %v6_fad0, align 1
  %v0_fad4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb63

bb63:                                             ; preds = %dec_label_pc_faac, %dec_label_pc_fabc, %bb62
  %v0_fad4 = phi i32 [ %v1_faac, %dec_label_pc_faac ], [ %v1_faac, %dec_label_pc_fabc ], [ %v0_fad4.pre, %bb62 ]
  %v1_fad4 = add i32 %v0_fad4, 8
  store i32 %v1_fad4, i32* %r2.global-to-local, align 4
  %v7_fad8 = icmp eq i32 %v1_fad4, 24
  br i1 %v7_fad8, label %dec_label_pc_fae0, label %dec_label_pc_faac

dec_label_pc_fae0:                                ; preds = %bb63
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* @global_var_1f6f0.254, align 4
  br label %dec_label_pc_faec

dec_label_pc_faec:                                ; preds = %dec_label_pc_fa64, %dec_label_pc_fae0
  store i32 64248, i32* @lr, align 4
  %v1_faf4 = call i32 @function_80b4()
  store i32 %v1_faf4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f008.346 to i32), i32* %r7.global-to-local, align 4
  br i1 icmp uge (i32* @global_var_1f004.344, i32* @global_var_1f008.346), label %dec_label_pc_fb18, label %dec_label_pc_fb04

dec_label_pc_fb04:                                ; preds = %dec_label_pc_fb04, %dec_label_pc_faec
  %v0_fb04 = phi i32 [ %v4_fb04, %dec_label_pc_fb04 ], [ ptrtoint (i32* @global_var_1f004.344 to i32), %dec_label_pc_faec ]
  %v1_fb04 = inttoptr i32 %v0_fb04 to i32*
  %v2_fb04 = load i32, i32* %v1_fb04, align 4
  %v4_fb04 = add i32 %v0_fb04, 4
  call void @__pseudo_branch(i32 %v2_fb04)
  %v1_fb10 = load i32, i32* %r7.global-to-local, align 4
  %v3_fb10 = icmp ult i32 %v4_fb04, %v1_fb10
  br i1 %v3_fb10, label %dec_label_pc_fb04, label %dec_label_pc_fb18

dec_label_pc_fb18:                                ; preds = %dec_label_pc_fb04, %dec_label_pc_faec
  %v0_fb18 = load i32, i32* @r6, align 4
  store i32 %v0_fb18, i32* %r1.global-to-local, align 4
  %v0_fb1c = load i32, i32* @r5, align 4
  store i32 %v0_fb1c, i32* %r2.global-to-local, align 4
  %v0_fb20 = load i32, i32* @r8, align 4
  store i32 %v0_fb20, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_fb2c = call i32 @function_fb78(i32 %v0_fb20)
  store i32 %v1_fb2c, i32* %r0.global-to-local, align 4
  ret i32 %v1_fb2c

; uselistorder directives
  uselistorder i32 %v0_fb04, { 1, 0 }
  uselistorder i32 %v1_fad4, { 1, 2, 0 }
  uselistorder i32 %v1_faac, { 1, 2, 0 }
  uselistorder i8 %v2_fa20, { 1, 0 }
  uselistorder i32 %v1_fa1c, { 1, 2, 0 }
  uselistorder i32 %v0_f9e8, { 0, 4, 3, 2, 1, 5 }
  uselistorder i32 %v3_f9bc, { 1, 0 }
  uselistorder i32 %v1_f9b8, { 1, 0 }
  uselistorder i32 %v0_f9b8, { 1, 0 }
  uselistorder i1 %v2_f9a4, { 1, 0 }
  uselistorder i32 %v5_f9b0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_f974, { 2, 1, 0 }
  uselistorder i32 %v2_f960, { 1, 0, 2 }
  uselistorder i32 %tmp56, { 1, 0 }
  uselistorder i32 %tmp55, { 1, 0 }
  uselistorder i32 %tmp44, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 10, 6, 7, 8, 9, 13, 14, 11, 12, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 8, 4, 5, 6, 7, 9, 10, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 1, 9, 5, 6, 7, 8, 2, 10, 0 }
  uselistorder i32 (i32)* @function_fb78, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32* @global_var_1f004.344, { 1, 0 }
  uselistorder i32 168, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_faec, { 1, 0 }
  uselistorder label %bb63, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fa70, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fa10, { 1, 0 }
  uselistorder label %dec_label_pc_f9bc, { 1, 0 }
  uselistorder label %.thread38, { 1, 0 }
  uselistorder label %dec_label_pc_f9a4, { 1, 0 }
}

define i32 @function_fb60() local_unnamed_addr {
dec_label_pc_fb60:
  %v0_fb64 = call i32 @function_1293c()
  %v1_fb68 = add i32 %v0_fb64, -164
  ret i32 %v1_fb68
}

define i32 @function_fb74() local_unnamed_addr {
dec_label_pc_fb74:
  %v1_fb74 = load i32, i32* @r0, align 4
  ret i32 %v1_fb74
}

define i32 @function_fb78(i32 %arg1) local_unnamed_addr {
dec_label_pc_fb78:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  store i32 %arg1, i32* %r6.global-to-local, align 4
  %v1_fb84 = call i32 @function_fb74()
  store i32 %v1_fb84, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1f008.346 to i32), i32* %r5.global-to-local, align 4
  br i1 and (i1 icmp ule (i32 ptrtoint (i32* @global_var_1f008.346 to i32), i32 126988), i1 icmp ne (i32 ptrtoint (i32* @global_var_1f008.346 to i32), i32 126988)), label %dec_label_pc_fb94, label %dec_label_pc_fba8

dec_label_pc_fb94:                                ; preds = %dec_label_pc_fb78, %dec_label_pc_fb94
  %v0_fb943 = phi i32 [ %v1_fb94, %dec_label_pc_fb94 ], [ 126988, %dec_label_pc_fb78 ]
  %v1_fb94 = add i32 %v0_fb943, -4
  %v2_fb94 = inttoptr i32 %v1_fb94 to i32*
  %v3_fb94 = load i32, i32* %v2_fb94, align 4
  call void @__pseudo_branch(i32 %v3_fb94)
  %v1_fba0.pre = load i32, i32* %r5.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_fb94, %v1_fba0.pre
  br i1 %tmp, label %dec_label_pc_fb94, label %dec_label_pc_fba8

dec_label_pc_fba8:                                ; preds = %dec_label_pc_fb94, %dec_label_pc_fb78
  store i32 64436, i32* @lr, align 4
  %v1_fbb0 = call i32 @function_1644c()
  store i32 %v1_fbb0, i32* @r0, align 4
  %v1_fbbc = call i32 @function_13e04()
  %v0_fbc0 = load i32, i32* %r6.global-to-local, align 4
  %v1_fbc4 = call i32 @function_12b1c(i32 %v0_fbc0)
  ret i32 %v1_fbc4

; uselistorder directives
  uselistorder i32 %v1_fb94, { 0, 2, 1 }
  uselistorder i32 126988, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_fb94, { 1, 0 }
}

define i32 @function_fbdc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fbdc:
  store i32 %arg4, i32* @r3, align 4
  store i32 %arg4, i32* @r2, align 4
  ret i32 %arg2
}

define i32 @function_fbfc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fbfc:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %v3_fc00 = load i32, i32* @r4, align 4
  %v15_fc00 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  %v7_fc10 = icmp eq i32 %arg2, 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  br i1 %v7_fc10, label %bb, label %dec_label_pc_fc28

bb:                                               ; preds = %dec_label_pc_fbfc
  %v2_fc20 = or i32 %arg3, 131072
  store i32 %v2_fc20, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_fd48

dec_label_pc_fc28:                                ; preds = %dec_label_pc_fbfc
  %v7_fc28 = icmp eq i32 %arg2, 14
  br i1 %v7_fc28, label %dec_label_pc_fc30, label %dec_label_pc_fc58

dec_label_pc_fc30:                                ; preds = %dec_label_pc_fc28
  store i32 %arg1, i32* @r1, align 4
  store i32 14, i32* @r2, align 4
  %v3_fc50 = call i32 @function_12360(i32 221, i32 %arg1, i32 14)
  store i32 %v3_fc50, i32* @r0, align 4
  br label %dec_label_pc_fd5c

dec_label_pc_fc58:                                ; preds = %dec_label_pc_fc28
  %v7_fc58 = icmp eq i32 %arg2, 9
  br i1 %v7_fc58, label %dec_label_pc_fc60, label %dec_label_pc_fcb0

dec_label_pc_fc60:                                ; preds = %dec_label_pc_fc58
  %v2_fc6c = ptrtoint i32* %stack_var_-44 to i32
  %v4_fc70 = call i32 @function_fbdc(i32 221, i32 %arg1, i32 16, i32 %v2_fc6c)
  store i32 %v4_fc70, i32* @r0, align 4
  %v4_fc78 = icmp eq i32 %v4_fc70, -22
  br i1 %v4_fc78, label %dec_label_pc_fc7c, label %dec_label_pc_fc94

dec_label_pc_fc7c:                                ; preds = %dec_label_pc_fc60
  %v0_fc7c = load i32, i32* %r7.global-to-local, align 4
  %v0_fc80 = load i32, i32* %r6.global-to-local, align 4
  %v0_fc84 = load i32, i32* %r5.global-to-local, align 4
  %v4_fc8c = call i32 @function_fbdc(i32 221, i32 %v0_fc7c, i32 %v0_fc80, i32 %v0_fc84)
  br label %dec_label_pc_fd60

dec_label_pc_fc94:                                ; preds = %dec_label_pc_fc60
  %v2_fc94 = icmp eq i32 %v4_fc70, 0
  br i1 %v2_fc94, label %dec_label_pc_fc9c, label %dec_label_pc_fd5c

dec_label_pc_fc9c:                                ; preds = %dec_label_pc_fc94
  %v3_fc9c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_fc9c, i32* @r3, align 4
  %v7_fca4 = icmp eq i32 %v3_fc9c, 2
  br i1 %v7_fca4, label %bb21, label %dec_label_pc_fd60

bb21:                                             ; preds = %dec_label_pc_fc9c
  %v2_fca8 = sub i32 0, %tmp
  br label %dec_label_pc_fd60

dec_label_pc_fcb0:                                ; preds = %dec_label_pc_fc58
  %v9_fcb4 = icmp eq i32 %arg2, 1030
  br i1 %v9_fcb4, label %dec_label_pc_fcbc, label %dec_label_pc_fd48

dec_label_pc_fcbc:                                ; preds = %dec_label_pc_fcb0
  %v4_fccc = call i32 @function_fbdc(i32 221, i32 %arg1, i32 1030, i32 %arg3)
  %v7_fcd0 = icmp eq i32 %v4_fccc, -22
  store i32 %v4_fccc, i32* @r4, align 4
  br i1 %v7_fcd0, label %dec_label_pc_fce4, label %dec_label_pc_fd2c

dec_label_pc_fce4:                                ; preds = %dec_label_pc_fcbc
  %v0_fce4 = load i32, i32* %r6.global-to-local, align 4
  %v0_fcec = load i32, i32* %r7.global-to-local, align 4
  %v4_fcf4 = call i32 @function_fbdc(i32 221, i32 %v0_fcec, i32 %v0_fce4, i32 0)
  %v7_fcf8 = icmp eq i32 %v4_fcf4, -22
  br i1 %v7_fcf8, label %dec_label_pc_fd14, label %dec_label_pc_fd00

dec_label_pc_fd00:                                ; preds = %dec_label_pc_fce4
  %v1_fd00 = icmp slt i32 %v4_fcf4, 0
  br i1 %v1_fd00, label %dec_label_pc_fd40, label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fd00
  store i32 6, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_fd40

dec_label_pc_fd14:                                ; preds = %dec_label_pc_fce4
  %v0_fd14 = load i32, i32* %r7.global-to-local, align 4
  %v0_fd18 = load i32, i32* %r5.global-to-local, align 4
  %v4_fd24 = call i32 @function_fbdc(i32 221, i32 %v0_fd14, i32 0, i32 %v0_fd18)
  store i32 %v4_fd24, i32* @r4, align 4
  br label %dec_label_pc_fd2c

dec_label_pc_fd2c:                                ; preds = %dec_label_pc_fcbc, %dec_label_pc_fd14
  %v3_fd30 = phi i32 [ %v4_fd24, %dec_label_pc_fd14 ], [ %v4_fccc, %dec_label_pc_fcbc ]
  %storemerge1 = icmp slt i32 %v3_fd30, 0
  br i1 %storemerge1, label %.thread6, label %bb23

bb23:                                             ; preds = %dec_label_pc_fd2c
  store i32 2, i32* @r2, align 4
  store i32 1, i32* @r3, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_fd2c, %bb23
  %v3_fd3c = xor i1 %storemerge1, true
  call void @__pseudo_cond_branch(i1 %v3_fd3c, i32 ptrtoint (i32* @global_var_fbdc.354 to i32))
  br label %dec_label_pc_fd40

dec_label_pc_fd40:                                ; preds = %dec_label_pc_fd00, %dec_label_pc_fd08, %.thread6
  %v0_fd40 = load i32, i32* @r4, align 4
  store i32 %v0_fd40, i32* @r0, align 4
  br label %dec_label_pc_fd5c

dec_label_pc_fd48:                                ; preds = %bb, %dec_label_pc_fcb0
  %v0_fd50 = phi i32 [ %arg3, %dec_label_pc_fcb0 ], [ %v2_fc20, %bb ]
  %v4_fd58 = call i32 @function_fbdc(i32 221, i32 %arg1, i32 %arg2, i32 %v0_fd50)
  store i32 %v4_fd58, i32* @r0, align 4
  br label %dec_label_pc_fd5c

dec_label_pc_fd5c:                                ; preds = %dec_label_pc_fc94, %dec_label_pc_fd40, %dec_label_pc_fc30, %dec_label_pc_fd48
  %v0_fd5c = call i32 @function_fe0c()
  br label %dec_label_pc_fd60

dec_label_pc_fd60:                                ; preds = %bb21, %dec_label_pc_fc9c, %dec_label_pc_fc7c, %dec_label_pc_fd5c
  %v1_fd6c = phi i32 [ %v2_fca8, %bb21 ], [ %tmp, %dec_label_pc_fc9c ], [ %v4_fc8c, %dec_label_pc_fc7c ], [ %v0_fd5c, %dec_label_pc_fd5c ]
  store i32 %v3_fc00, i32* @r4, align 4
  store i32 %v15_fc00, i32* @lr, align 4
  ret i32 %v1_fd6c

; uselistorder directives
  uselistorder i32 %v4_fcf4, { 1, 0 }
  uselistorder i32 %v4_fccc, { 1, 2, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_fbdc, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg2, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %arg1, { 0, 2, 1, 3, 5, 4 }
  uselistorder label %dec_label_pc_fd60, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_fd5c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_fd48, { 1, 0 }
  uselistorder label %dec_label_pc_fd40, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %dec_label_pc_fd2c, { 1, 0 }
}

define i32 @function_fd74(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fd74:
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v1_fd84 = and i32 %arg2, 64
  %v2_fd84 = icmp eq i32 %v1_fd84, 0
  br i1 %v2_fd84, label %dec_label_pc_fd8c, label %dec_label_pc_fda4

dec_label_pc_fd8c:                                ; preds = %dec_label_pc_fd74
  %v2_fd94 = and i32 %arg2, 4210688
  %v3_fd98 = icmp eq i32 %v2_fd94, 4210688
  br i1 %v3_fd98, label %dec_label_pc_fda4, label %dec_label_pc_fdb0

dec_label_pc_fda4:                                ; preds = %dec_label_pc_fd8c, %dec_label_pc_fd74
  br label %dec_label_pc_fdb0

dec_label_pc_fdb0:                                ; preds = %dec_label_pc_fd8c, %dec_label_pc_fda4
  store i32 %arg1, i32* @r1, align 4
  %v1_fdb8 = or i32 %arg2, 131072
  store i32 %v1_fdb8, i32* @r2, align 4
  %v3_fdcc = call i32 @function_12360(i32 5, i32 %arg1, i32 %v1_fdb8)
  %v1_fdd0 = icmp slt i32 %v3_fdcc, 0
  br i1 %v1_fdd0, label %dec_label_pc_fdf0, label %dec_label_pc_fdd8

dec_label_pc_fdd8:                                ; preds = %dec_label_pc_fdb0
  %v0_fdd8 = load i32, i32* %r7.global-to-local, align 4
  %v1_fdd8 = and i32 %v0_fdd8, 524288
  %v2_fdd8 = icmp eq i32 %v1_fdd8, 0
  br i1 %v2_fdd8, label %dec_label_pc_fdf0, label %dec_label_pc_fde0

dec_label_pc_fde0:                                ; preds = %dec_label_pc_fdd8
  store i32 221, i32* %r7.global-to-local, align 4
  store i32 1, i32* @r2, align 4
  br label %dec_label_pc_fdf0

dec_label_pc_fdf0:                                ; preds = %dec_label_pc_fde0, %dec_label_pc_fdd8, %dec_label_pc_fdb0
  store i32 %v3_fdcc, i32* @r0, align 4
  %v0_fdf4 = call i32 @function_fe0c()
  ret i32 %v0_fdf4

; uselistorder directives
  uselistorder i32 221, { 7, 3, 4, 2, 1, 5, 0, 6 }
  uselistorder i32 64, { 9, 8, 10, 1, 11, 12, 2, 13, 14, 3, 15, 16, 4, 17, 18, 5, 19, 20, 0, 21, 23, 22, 6, 24, 26, 25, 7, 27 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_fdb0, { 1, 0 }
}

define i32 @function_fe0c() local_unnamed_addr {
dec_label_pc_fe0c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_fe0c = load i32, i32* @r0, align 4
  %v2_fe0c = icmp ugt i32 %v0_fe0c, -4097
  %v7_fe0c = icmp eq i32 %v0_fe0c, -4096
  %v3_fe10 = load i32, i32* @r4, align 4
  store i32 %v3_fe10, i32* %stack_var_-8, align 4
  %v2_fe14 = xor i1 %v2_fe0c, true
  %v3_fe14 = or i1 %v7_fe0c, %v2_fe14
  br i1 %v3_fe14, label %bb, label %bb4

bb:                                               ; preds = %dec_label_pc_fe0c
  store i32 %v0_fe0c, i32* @r2, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_fe0c, %bb
  store i32 %v0_fe0c, i32* %r4.global-to-local, align 4
  %v2_fe1c = xor i1 %v7_fe0c, true
  %v3_fe1c = and i1 %v2_fe0c, %v2_fe1c
  br i1 %v3_fe1c, label %dec_label_pc_fe2c, label %dec_label_pc_fe20

dec_label_pc_fe20:                                ; preds = %bb4, %dec_label_pc_fe2c
  %v2_fe24 = phi i32 [ %v3_fe10, %bb4 ], [ %v2_fe24.pre, %dec_label_pc_fe2c ]
  %v0_fe20 = load i32, i32* @r2, align 4
  store i32 %v2_fe24, i32* @r4, align 4
  ret i32 %v0_fe20

dec_label_pc_fe2c:                                ; preds = %bb4
  %v0_fe2c = call i32 @function_fb60()
  %v0_fe30 = load i32, i32* %r4.global-to-local, align 4
  %v1_fe30 = sub i32 0, %v0_fe30
  store i32 %v1_fe30, i32* @r3, align 4
  store i32 -1, i32* @r2, align 4
  %v2_fe38 = inttoptr i32 %v0_fe2c to i32*
  store i32 %v1_fe30, i32* %v2_fe38, align 4
  %v2_fe24.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_fe20

; uselistorder directives
  uselistorder i1 %v7_fe0c, { 1, 0 }
  uselistorder i1 %v2_fe0c, { 1, 0 }
  uselistorder i32 %v0_fe0c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_fe20, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_fe40(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_-12, align 4
  %v3_fe44 = load i32, i32* @r4, align 4
  %v2_fe4c = ptrtoint i32* %stack_var_-12 to i32
  %v2_fe5c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_fe5c, i32* %ip.global-to-local, align 4
  %v4_fe6020 = add i32 %v2_fe4c, 4
  store i32 %v4_fe6020, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge

dec_label_pc_fe60.dec_label_pc_fe60_crit_edge:    ; preds = %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.dec_label_pc_fe60.dec_label_pc_fe60_crit_edge_crit_edge, %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.lr.ph
  %v2_fe64.pre = phi i32 [ %v2_fe5c, %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.lr.ph ], [ %v2_fe64.pre.pre, %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.dec_label_pc_fe60.dec_label_pc_fe60_crit_edge_crit_edge ]
  %v0_fe60.pre = phi i32 [ %v4_fe6020, %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.lr.ph ], [ %v0_fe60.pre.pre, %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.dec_label_pc_fe60.dec_label_pc_fe60_crit_edge_crit_edge ]
  %v1_fe6825 = phi i32 [ 4, %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.lr.ph ], [ %v1_fe68, %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.dec_label_pc_fe60.dec_label_pc_fe60_crit_edge_crit_edge ]
  %v1_fe60 = inttoptr i32 %v0_fe60.pre to i32*
  %v2_fe60 = load i32, i32* %v1_fe60, align 4
  %v4_fe60 = add i32 %v0_fe60.pre, 4
  store i32 %v4_fe60, i32* %r0.global-to-local, align 4
  %v3_fe64 = add i32 %v1_fe6825, %v2_fe64.pre
  %v4_fe64 = inttoptr i32 %v3_fe64 to i32*
  store i32 %v2_fe60, i32* %v4_fe64, align 4
  %v0_fe68 = load i32, i32* %r2.global-to-local, align 4
  %v1_fe68 = add i32 %v0_fe68, 4
  store i32 %v1_fe68, i32* %r2.global-to-local, align 4
  %v7_fe6c = icmp eq i32 %v1_fe68, 16
  br i1 %v7_fe6c, label %dec_label_pc_fe74, label %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.dec_label_pc_fe60.dec_label_pc_fe60_crit_edge_crit_edge

dec_label_pc_fe60.dec_label_pc_fe60_crit_edge.dec_label_pc_fe60.dec_label_pc_fe60_crit_edge_crit_edge: ; preds = %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge
  %v0_fe60.pre.pre = load i32, i32* %r0.global-to-local, align 4
  %v2_fe64.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge

dec_label_pc_fe74:                                ; preds = %dec_label_pc_fe60.dec_label_pc_fe60_crit_edge
  store i32 %arg1, i32* @r0, align 4
  %v0_fe8c = call i32 @function_fe0c()
  store i32 %v0_fe8c, i32* %r0.global-to-local, align 4
  store i32 %v3_fe44, i32* @r4, align 4
  ret i32 %v0_fe8c

; uselistorder directives
  uselistorder i32 %v1_fe68, { 1, 2, 0 }
  uselistorder i32 %v0_fe60.pre, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 0 }
}

define i32 @function_fea0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fea0:
  store i32 %arg2, i32* @r1, align 4
  %v3_fea0 = load i32, i32* @r4, align 4
  %v6_fea0 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_fea4 = icmp eq i32 %arg2, 0
  store i32 %arg1, i32* @r4, align 4
  br i1 %v2_fea4, label %dec_label_pc_fec4, label %dec_label_pc_feb4

dec_label_pc_feb4:                                ; preds = %dec_label_pc_fea0
  store i32 -1, i32* @r0, align 4
  %v0_feb8 = call i32 @function_f6f8()
  %v1_febc = load i32, i32* @r4, align 4
  %v3_febc = icmp ult i32 %v0_feb8, %v1_febc
  br i1 %v3_febc, label %dec_label_pc_fee0, label %dec_label_pc_feb4.dec_label_pc_fec4_crit_edge

dec_label_pc_feb4.dec_label_pc_fec4_crit_edge:    ; preds = %dec_label_pc_feb4
  %v1_fec4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_fec4

dec_label_pc_fec4:                                ; preds = %dec_label_pc_feb4.dec_label_pc_fec4_crit_edge, %dec_label_pc_fea0
  %v1_fec4 = phi i32 [ %v1_fec4.pre, %dec_label_pc_feb4.dec_label_pc_fec4_crit_edge ], [ 0, %dec_label_pc_fea0 ]
  %v0_fec4 = phi i32 [ %v1_febc, %dec_label_pc_feb4.dec_label_pc_fec4_crit_edge ], [ %arg1, %dec_label_pc_fea0 ]
  %v2_fec4 = mul i32 %v0_fec4, %v1_fec4
  %v1_fec8 = call i32 @function_11008(i32 %v2_fec4)
  store i32 %v1_fec8, i32* @r2, align 4
  br label %dec_label_pc_fed0

dec_label_pc_fed0:                                ; preds = %dec_label_pc_fee0, %dec_label_pc_fec4
  %v0_fed0 = phi i32 [ %v0_fed0.pre, %dec_label_pc_fee0 ], [ %v1_fec8, %dec_label_pc_fec4 ]
  store i32 %v3_fea0, i32* @r4, align 4
  store i32 %v6_fea0, i32* @r5, align 4
  ret i32 %v0_fed0

dec_label_pc_fee0:                                ; preds = %dec_label_pc_feb4
  %v0_fee0 = call i32 @function_fb60()
  store i32 0, i32* @r2, align 4
  %v2_feec = inttoptr i32 %v0_fee0 to i32*
  store i32 12, i32* %v2_feec, align 4
  %v0_fed0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_fed0
}

define i32 @function_fef4(i32* %arg1) local_unnamed_addr {
dec_label_pc_fef4:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_fef4 = load i32, i32* @r4, align 4
  store i32 %v3_fef4, i32* %stack_var_-36, align 4
  %v6_fef4 = load i32, i32* @r5, align 4
  %v9_fef4 = load i32, i32* @r6, align 4
  %v12_fef4 = load i32, i32* @r7, align 4
  %v15_fef4 = load i32, i32* @r8, align 4
  %v21_fef4 = load i32, i32* @sl, align 4
  %v2_fef8 = load i32, i32* %arg1, align 4
  store i32 %v2_fef8, i32* @sl, align 4
  %v1_fefc = urem i32 %v2_fef8, 2
  %v2_fefc = icmp eq i32 %v1_fefc, 0
  store i32 %tmp, i32* %fp.global-to-local, align 4
  br i1 %v2_fefc, label %dec_label_pc_ff0c, label %dec_label_pc_ffe8

dec_label_pc_ff0c:                                ; preds = %dec_label_pc_fef4, %dec_label_pc_ffdc
  %v0_ff0c = phi i32 [ %v0_ffdc, %dec_label_pc_ffdc ], [ %v2_fef8, %dec_label_pc_fef4 ]
  %v3_ff0c = udiv i32 %v0_ff0c, 16
  store i32 %v3_ff0c, i32* %r3.global-to-local, align 4
  %v1_ff10 = add nsw i32 %v3_ff0c, -1
  store i32 %v1_ff10, i32* @r0, align 4
  %tmp39 = icmp ult i32 %v1_ff10, 33
  br i1 %tmp39, label %.thread, label %dec_label_pc_ff20

.thread:                                          ; preds = %dec_label_pc_ff0c
  store i32 %v1_ff10, i32* @r8, align 4
  br label %dec_label_pc_ff38

dec_label_pc_ff20:                                ; preds = %dec_label_pc_ff0c
  %tmp40 = icmp ugt i32 %v1_ff10, 7168
  br i1 %tmp40, label %.thread18, label %dec_label_pc_ff2c

.thread18:                                        ; preds = %dec_label_pc_ff20
  store i32 63, i32* @r8, align 4
  br label %dec_label_pc_ff38

dec_label_pc_ff2c:                                ; preds = %dec_label_pc_ff20
  %v0_ff2c = call i32 @function_14290()
  %v3_ff30 = udiv i32 %v0_ff2c, 2097152
  %v1_ff34 = add nsw i32 %v3_ff30, -496
  store i32 %v1_ff34, i32* @r8, align 4
  br label %dec_label_pc_ff38

dec_label_pc_ff38:                                ; preds = %.thread18, %.thread, %dec_label_pc_ff2c
  %v0_ff40 = phi i32 [ 63, %.thread18 ], [ %v1_ff10, %.thread ], [ %v1_ff34, %dec_label_pc_ff2c ]
  %v3_ff3c = load i32, i32* @global_var_1f6f4.257, align 4
  store i32 %v3_ff3c, i32* %r2.global-to-local, align 4
  %v3_ff40 = mul i32 %v0_ff40, 16
  store i32 %v3_ff40, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %sb.global-to-local, align 4
  %v2_ff48 = icmp eq i32 %v3_ff3c, 0
  store i1 %v2_ff48, i1* @cpsr_z, align 1
  %v1_ff4c = or i32 %v3_ff40, 8
  store i32 %v1_ff4c, i32* %r3.global-to-local, align 4
  %v2_ff50 = add i32 %v1_ff4c, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  store i32 %v2_ff50, i32* @r6, align 4
  br i1 %v2_ff48, label %bb, label %dec_label_pc_10018

bb:                                               ; preds = %dec_label_pc_ff38
  %v1_ff54 = load i32, i32* @sl, align 4
  store i32 %v1_ff54, i32* @r0, align 4
  br label %dec_label_pc_ff5c

dec_label_pc_ff5c:                                ; preds = %bb, %dec_label_pc_10054
  %v0_ff8038 = phi i32 [ %v1_ff54, %bb ], [ %v2_10054, %dec_label_pc_10054 ]
  %v0_ff60 = phi i32 [ ptrtoint (i32* @global_var_1f0f0.358 to i32), %bb ], [ %v0_ff60.pre, %dec_label_pc_10054 ]
  %v0_ff5c = phi i32 [ %v0_ff40, %bb ], [ %v0_ff5c.pre, %dec_label_pc_10054 ]
  %v1_ff5c = add i32 %v0_ff5c, 1
  store i32 %v1_ff5c, i32* %r1.global-to-local, align 4
  %v4_ff60 = mul i32 %v1_ff5c, 16
  %v5_ff60 = add i32 %v4_ff60, %v0_ff60
  %v6_ff60 = inttoptr i32 %v5_ff60 to i32*
  %v7_ff60 = load i32, i32* %v6_ff60, align 4
  store i32 %v7_ff60, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r6.global-to-local, align 4
  %v2_ff68 = icmp eq i32 %v7_ff60, 0
  br i1 %v2_ff68, label %bb31, label %.thread4

bb31:                                             ; preds = %dec_label_pc_ff5c
  %v4_ff6c = mul i32 %v1_ff5c, 16
  %v3_ff70 = add i32 %v4_ff6c, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  store i32 %v3_ff70, i32* %r3.global-to-local, align 4
  %v2_ff74 = add i32 %v4_ff6c, add (i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32 -8)
  store i32 %v2_ff74, i32* %r2.global-to-local, align 4
  %v7_ff78 = add i32 %v4_ff60, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  %v8_ff78 = inttoptr i32 %v7_ff78 to i32*
  store i32 %v2_ff74, i32* %v8_ff78, align 4
  %v1_ff7c = load i32, i32* %r2.global-to-local, align 4
  %v2_ff7c = load i32, i32* %r3.global-to-local, align 4
  %v3_ff7c = add i32 %v2_ff7c, 4
  %v4_ff7c = inttoptr i32 %v3_ff7c to i32*
  store i32 %v1_ff7c, i32* %v4_ff7c, align 4
  %v0_ff80.pre = load i32, i32* @r0, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_ff5c, %bb31
  %v0_ff80 = phi i32 [ %v0_ff8038, %dec_label_pc_ff5c ], [ %v0_ff80.pre, %bb31 ]
  %v1_ff80 = load i32, i32* @sl, align 4
  %v9_ff80 = icmp eq i32 %v0_ff80, %v1_ff80
  br i1 %v9_ff80, label %dec_label_pc_1005c, label %dec_label_pc_ff88

dec_label_pc_ff88:                                ; preds = %.thread4
  %v0_ff88 = load i32, i32* @r5, align 4
  %v1_ff88 = add i32 %v0_ff88, 8
  store i32 %v1_ff88, i32* %r2.global-to-local, align 4
  %v1_ff8c = load i32, i32* %r6.global-to-local, align 4
  %v2_ff8c = add i32 %v1_ff8c, %v1_ff88
  %v3_ff8c = inttoptr i32 %v2_ff8c to i32*
  %v4_ff8c = load i32, i32* %v3_ff8c, align 4
  store i32 %v4_ff8c, i32* %r3.global-to-local, align 4
  %v2_ff90 = icmp eq i32 %v4_ff8c, 0
  store i1 %v2_ff90, i1* @cpsr_z, align 1
  store i32 %v2_ff8c, i32* %r4.global-to-local, align 4
  br i1 %v2_ff90, label %dec_label_pc_ffdc, label %dec_label_pc_ff9c

dec_label_pc_ff9c:                                ; preds = %dec_label_pc_ff88
  %v0_ff9c = call i32 @function_12874()
  store i32 %v0_ff9c, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ffa4 = load i32, i32* %r2.global-to-local, align 4
  %v2_ffa4 = load i32, i32* %r6.global-to-local, align 4
  %v3_ffa4 = add i32 %v2_ffa4, %v1_ffa4
  %v4_ffa4 = inttoptr i32 %v3_ffa4 to i32*
  store i32 0, i32* %v4_ffa4, align 4
  %v0_ffa8 = call i32 @function_12874()
  %v0_ffac = load i32, i32* @r5, align 4
  %v1_ffac = add i32 %v0_ffac, 12
  store i32 %v1_ffac, i32* %r3.global-to-local, align 4
  %v1_ffb0 = load i32, i32* %r6.global-to-local, align 4
  %v2_ffb0 = add i32 %v1_ffb0, %v1_ffac
  %v3_ffb0 = inttoptr i32 %v2_ffb0 to i32*
  %v4_ffb0 = load i32, i32* %v3_ffb0, align 4
  store i32 %v4_ffb0, i32* %r2.global-to-local, align 4
  %v2_ffb4 = icmp eq i32 %v4_ffb0, 0
  br i1 %v2_ffb4, label %dec_label_pc_ffd8, label %dec_label_pc_ffbc

dec_label_pc_ffbc:                                ; preds = %dec_label_pc_ff9c
  %v0_ffc0 = load i32, i32* %r4.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v7_ffd0 = icmp eq i32 %v0_ffc0, -38
  br i1 %v7_ffd0, label %dec_label_pc_10040, label %dec_label_pc_ffd8

dec_label_pc_ffd8:                                ; preds = %dec_label_pc_ffbc, %dec_label_pc_ff9c
  %v0_ffd8 = load i32, i32* %fp.global-to-local, align 4
  %v1_ffd8 = inttoptr i32 %v0_ffd8 to i32*
  %v2_ffd8 = load i32, i32* %v1_ffd8, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_ffdc:                                ; preds = %dec_label_pc_ff88, %dec_label_pc_10040, %dec_label_pc_ffd8
  %v0_ffdc = phi i32 [ %v0_ff80, %dec_label_pc_ff88 ], [ %v2_1004c, %dec_label_pc_10040 ], [ %v2_ffd8, %dec_label_pc_ffd8 ]
  store i32 %v0_ffdc, i32* @sl, align 4
  %v1_ffe0 = urem i32 %v0_ffdc, 2
  %v2_ffe0 = icmp eq i32 %v1_ffe0, 0
  br i1 %v2_ffe0, label %dec_label_pc_ff0c, label %dec_label_pc_ffe8

dec_label_pc_ffe8:                                ; preds = %dec_label_pc_ffdc, %dec_label_pc_fef4
  br label %dec_label_pc_ffec

dec_label_pc_ffec:                                ; preds = %dec_label_pc_100f8, %dec_label_pc_100f0, %dec_label_pc_ffe8
  %v1_fff4 = phi i32 [ 1, %dec_label_pc_100f8 ], [ 1, %dec_label_pc_100f0 ], [ 0, %dec_label_pc_ffe8 ]
  %v2_fff0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_fff0, i32* @r4, align 4
  store i32 %v6_fef4, i32* @r5, align 4
  store i32 %v9_fef4, i32* @r6, align 4
  store i32 %v12_fef4, i32* @r7, align 4
  store i32 %v15_fef4, i32* @r8, align 4
  store i32 %v21_fef4, i32* @sl, align 4
  ret i32 %v1_fff4

dec_label_pc_10000:                               ; preds = %dec_label_pc_1003c
  %v0_10000 = load i32, i32* @r5, align 4
  %v1_10000 = add i32 %v0_10000, 12
  store i32 1, i32* @r2, align 4
  %v1_10008 = load i32, i32* %sb.global-to-local, align 4
  %v2_10008 = add i32 %v1_10000, %v1_10008
  store i32 %v2_10008, i32* %r1.global-to-local, align 4
  %v0_1000c = load i32, i32* @r6, align 4
  store i32 1, i32* @r3, align 4
  %v2_10014 = inttoptr i32 %v0_1000c to i32*
  %v3_10014 = call i32 @function_12424(i32* %v2_10014, i32 %v2_10008)
  %v0_10018.pre = load i32, i32* @r5, align 4
  %v1_1001c.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_10018

dec_label_pc_10018:                               ; preds = %dec_label_pc_ff38, %dec_label_pc_10000
  %v1_1001c = phi i32 [ %v1_1001c.pre, %dec_label_pc_10000 ], [ ptrtoint (i32* @global_var_1f0f0.358 to i32), %dec_label_pc_ff38 ]
  %v0_10018 = phi i32 [ %v0_10018.pre, %dec_label_pc_10000 ], [ %v3_ff40, %dec_label_pc_ff38 ]
  %v1_10018 = add i32 %v0_10018, 8
  store i32 %v1_10018, i32* %r3.global-to-local, align 4
  %v2_1001c = add i32 %v1_10018, %v1_1001c
  store i32 %v2_1001c, i32* @r7, align 4
  br label %dec_label_pc_10020

dec_label_pc_10020:                               ; preds = %dec_label_pc_10020.dec_label_pc_10020_crit_edge, %dec_label_pc_10018
  %v0_10020 = phi i32 [ %v0_10020.pre, %dec_label_pc_10020.dec_label_pc_10020_crit_edge ], [ %v2_1001c, %dec_label_pc_10018 ]
  %v1_10020 = inttoptr i32 %v0_10020 to i32*
  %v2_10020 = load i32, i32* %v1_10020, align 4
  store i32 %v2_10020, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v0_10020, i32* %r2.global-to-local, align 4
  %v4_10030 = call i32 @function_128c8(i32 %v2_10020, i32 1, i32* %v1_10020)
  %v2_10034 = icmp eq i32 %v4_10030, 0
  store i1 %v2_10034, i1* @cpsr_z, align 1
  br i1 %v2_10034, label %dec_label_pc_1003c, label %dec_label_pc_10020.dec_label_pc_10020_crit_edge

dec_label_pc_10020.dec_label_pc_10020_crit_edge:  ; preds = %dec_label_pc_10020
  %v0_10020.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10020

dec_label_pc_1003c:                               ; preds = %dec_label_pc_10020
  %v0_fff8 = load i32, i32* @r4, align 4
  %v2_fff8 = icmp eq i32 %v0_fff8, 0
  br i1 %v2_fff8, label %dec_label_pc_10054, label %dec_label_pc_10000

dec_label_pc_10040:                               ; preds = %dec_label_pc_ffbc
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_1004c = load i32, i32* %fp.global-to-local, align 4
  %v1_1004c = inttoptr i32 %v0_1004c to i32*
  %v2_1004c = load i32, i32* %v1_1004c, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_10054:                               ; preds = %dec_label_pc_1003c
  %v0_10054 = load i32, i32* %fp.global-to-local, align 4
  %v1_10054 = inttoptr i32 %v0_10054 to i32*
  %v2_10054 = load i32, i32* %v1_10054, align 4
  store i32 %v2_10054, i32* @r0, align 4
  %v0_ff5c.pre = load i32, i32* @r8, align 4
  %v0_ff60.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_ff5c

dec_label_pc_1005c:                               ; preds = %.thread4
  %v1_1005c = and i32 %v0_ff80, -2
  store i32 %v1_1005c, i32* %r3.global-to-local, align 4
  %v1_10060 = load i32, i32* %fp.global-to-local, align 4
  %v2_10060 = sub i32 %v1_10060, %v1_1005c
  store i32 %v2_10060, i32* @r7, align 4
  %v1_10064 = add i32 %v2_10060, 8
  %v1_10068 = inttoptr i32 %v1_10064 to i32*
  %v2_10068 = load i32, i32* %v1_10068, align 4
  store i32 %v2_10068, i32* @r0, align 4
  %v3_10068 = add i32 %v2_10060, 12
  %v4_10068 = inttoptr i32 %v3_10068 to i32*
  %v5_10068 = load i32, i32* %v4_10068, align 4
  store i32 %v5_10068, i32* %ip.global-to-local, align 4
  %v9_1006c = icmp eq i32 %v5_10068, %v2_10068
  br i1 %v9_1006c, label %dec_label_pc_1010c, label %dec_label_pc_10074

dec_label_pc_10074:                               ; preds = %dec_label_pc_1005c, %dec_label_pc_1016c
  %v0_10080 = phi i32 [ %v2_10060, %dec_label_pc_1005c ], [ %v0_1016c, %dec_label_pc_1016c ]
  %v1_10074 = add i32 %v0_10080, 4
  %v2_10074 = inttoptr i32 %v1_10074 to i32*
  %v3_10074 = load i32, i32* %v2_10074, align 4
  %v1_10078 = or i32 %v3_10074, 1
  store i32 %v1_10078, i32* %r2.global-to-local, align 4
  %v1_1007c = and i32 %v3_10074, -2
  store i32 %v1_1007c, i32* %r1.global-to-local, align 4
  %v2_10080 = add i32 %v1_1007c, %v0_10080
  %v3_10080 = inttoptr i32 %v2_10080 to i32*
  %v4_10080 = load i32, i32* %v3_10080, align 4
  %v1_10084 = or i32 %v4_10080, 1
  store i32 %v1_10084, i32* %r3.global-to-local, align 4
  store i32 %v1_10084, i32* %v3_10080, align 4
  %v0_1008c = load i32, i32* %r2.global-to-local, align 4
  %v1_1008c = load i32, i32* @r7, align 4
  %v2_1008c = add i32 %v1_1008c, 4
  %v3_1008c = inttoptr i32 %v2_1008c to i32*
  store i32 %v0_1008c, i32* %v3_1008c, align 4
  %v0_10090 = load i32, i32* @r5, align 4
  %v1_10090 = add i32 %v0_10090, 8
  store i32 %v1_10090, i32* %r4.global-to-local, align 4
  %v0_10094 = load i32, i32* @r0, align 4
  %v1_10094 = load i32, i32* %ip.global-to-local, align 4
  %v2_10094 = add i32 %v1_10094, 8
  %v3_10094 = inttoptr i32 %v2_10094 to i32*
  store i32 %v0_10094, i32* %v3_10094, align 4
  %v0_10098 = load i32, i32* %r4.global-to-local, align 4
  %v1_10098 = load i32, i32* %sb.global-to-local, align 4
  %v2_10098 = add i32 %v1_10098, %v0_10098
  %v3_10098 = inttoptr i32 %v2_10098 to i32*
  %v4_10098 = load i32, i32* %v3_10098, align 4
  store i32 %v4_10098, i32* %r3.global-to-local, align 4
  %v0_1009c = load i32, i32* @r7, align 4
  %v1_1009c = add i32 %v0_1009c, 8
  %v2_1009c = inttoptr i32 %v1_1009c to i32*
  %v3_1009c = load i32, i32* %v2_1009c, align 4
  store i32 %v3_1009c, i32* %r2.global-to-local, align 4
  %v2_100a0 = icmp eq i32 %v4_10098, 0
  store i1 %v2_100a0, i1* @cpsr_z, align 1
  %v0_100a4 = load i32, i32* %ip.global-to-local, align 4
  %v2_100a4 = add i32 %v3_1009c, 12
  %v3_100a4 = inttoptr i32 %v2_100a4 to i32*
  store i32 %v0_100a4, i32* %v3_100a4, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r1.global-to-local, align 4
  %v0_100ac = load i32, i32* %r4.global-to-local, align 4
  %v1_100ac = load i32, i32* %sb.global-to-local, align 4
  %v2_100ac = add i32 %v1_100ac, %v0_100ac
  store i32 %v2_100ac, i32* %r6.global-to-local, align 4
  br i1 %v2_100a0, label %dec_label_pc_100f0, label %dec_label_pc_100b4

dec_label_pc_100b4:                               ; preds = %dec_label_pc_10074
  %v0_100b4 = call i32 @function_12874()
  store i32 %v0_100b4, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_100bc = load i32, i32* %r4.global-to-local, align 4
  %v2_100bc = load i32, i32* %r1.global-to-local, align 4
  %v3_100bc = add i32 %v2_100bc, %v1_100bc
  %v4_100bc = inttoptr i32 %v3_100bc to i32*
  store i32 0, i32* %v4_100bc, align 4
  %v0_100c0 = call i32 @function_12874()
  %v0_100c4 = load i32, i32* @r5, align 4
  %v1_100c4 = add i32 %v0_100c4, 12
  store i32 %v1_100c4, i32* %r3.global-to-local, align 4
  %v1_100c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_100c8 = add i32 %v1_100c8, %v1_100c4
  %v3_100c8 = inttoptr i32 %v2_100c8 to i32*
  %v4_100c8 = load i32, i32* %v3_100c8, align 4
  store i32 %v4_100c8, i32* %r2.global-to-local, align 4
  %v2_100cc = icmp eq i32 %v4_100c8, 0
  br i1 %v2_100cc, label %dec_label_pc_100f0, label %dec_label_pc_100d4

dec_label_pc_100d4:                               ; preds = %dec_label_pc_100b4
  %v0_100d8 = load i32, i32* %r6.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v7_100e8 = icmp eq i32 %v0_100d8, -38
  br i1 %v7_100e8, label %dec_label_pc_100f8, label %dec_label_pc_100f0

dec_label_pc_100f0:                               ; preds = %dec_label_pc_100d4, %dec_label_pc_100b4, %dec_label_pc_10074
  br label %dec_label_pc_ffec

dec_label_pc_100f8:                               ; preds = %dec_label_pc_100d4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ffec

dec_label_pc_1010c:                               ; preds = %dec_label_pc_1005c
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_10110 = load i32, i32* @r8, align 4
  %v1_10110 = sub i32 32, %v0_10110
  store i32 %v1_10110, i32* %r1.global-to-local, align 4
  %v7_10118 = lshr i32 1, %v1_10110
  store i32 %v7_10118, i32* %r4.global-to-local, align 4
  %v1_1011c = add i32 %v0_10110, -32
  %v6_1011c = icmp slt i32 %v1_1011c, 0
  %v7_1011c = icmp eq i32 %v0_10110, 32
  store i1 %v7_1011c, i1* @cpsr_z, align 1
  %v6_10120 = shl i32 1, %v0_10110
  store i32 %v6_10120, i32* %r3.global-to-local, align 4
  br i1 %v6_1011c, label %bb33, label %bb32

bb32:                                             ; preds = %dec_label_pc_1010c
  %v7_10124 = shl i32 1, %v1_1011c
  store i32 %v7_10124, i32* %r4.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_1010c, %bb32
  %v0_1012c = phi i32 [ %v7_10118, %dec_label_pc_1010c ], [ %v7_10124, %bb32 ]
  %v1_10128 = sub i32 -1, %v6_10120
  %v1_1012c = sub i32 -1, %v0_1012c
  store i32 %v1_1012c, i32* %fp.global-to-local, align 4
  store i32 %v1_10128, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10134

dec_label_pc_10134:                               ; preds = %dec_label_pc_10134.dec_label_pc_10134_crit_edge, %bb33
  %v1_1013c = phi i32 [ %v1_1013c.pre, %dec_label_pc_10134.dec_label_pc_10134_crit_edge ], [ %v1_10128, %bb33 ]
  %v2_10134 = load i32, i32* @global_var_1f0f0.358, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r2.global-to-local, align 4
  %v2_1013c = and i32 %v2_10134, %v1_1013c
  store i32 %v2_1013c, i32* %r1.global-to-local, align 4
  %v4_10140 = call i32 @function_128c8(i32 %v2_10134, i32 %v2_1013c, i32* nonnull @global_var_1f0f0.358)
  %v2_10144 = icmp eq i32 %v4_10140, 0
  store i1 %v2_10144, i1* @cpsr_z, align 1
  br i1 %v2_10144, label %dec_label_pc_1014c, label %dec_label_pc_10134.dec_label_pc_10134_crit_edge

dec_label_pc_10134.dec_label_pc_10134_crit_edge:  ; preds = %dec_label_pc_10134
  %v1_1013c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10134

dec_label_pc_1014c:                               ; preds = %dec_label_pc_10134
  store i32 ptrtoint (i32* @global_var_1f0f4.360 to i32), i32* %r6.global-to-local, align 4
  %v0_10150 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_10150, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10154

dec_label_pc_10154:                               ; preds = %dec_label_pc_10154.dec_label_pc_10154_crit_edge, %dec_label_pc_1014c
  %v1_1015c = phi i32 [ %v1_1015c.pre, %dec_label_pc_10154.dec_label_pc_10154_crit_edge ], [ %v0_10150, %dec_label_pc_1014c ]
  %v2_10154 = load i32, i32* @global_var_1f0f4.360, align 4
  store i32 ptrtoint (i32* @global_var_1f0f4.360 to i32), i32* %r2.global-to-local, align 4
  %v2_1015c = and i32 %v2_10154, %v1_1015c
  store i32 %v2_1015c, i32* %r1.global-to-local, align 4
  %v4_10160 = call i32 @function_128c8(i32 %v2_10154, i32 %v2_1015c, i32* nonnull @global_var_1f0f4.360)
  %v2_10164 = icmp eq i32 %v4_10160, 0
  store i1 %v2_10164, i1* @cpsr_z, align 1
  br i1 %v2_10164, label %dec_label_pc_1016c, label %dec_label_pc_10154.dec_label_pc_10154_crit_edge

dec_label_pc_10154.dec_label_pc_10154_crit_edge:  ; preds = %dec_label_pc_10154
  %v1_1015c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10154

dec_label_pc_1016c:                               ; preds = %dec_label_pc_10154
  %v0_1016c = load i32, i32* @r7, align 4
  %v1_1016c = add i32 %v0_1016c, 8
  %v1_10170 = inttoptr i32 %v1_1016c to i32*
  %v2_10170 = load i32, i32* %v1_10170, align 4
  store i32 %v2_10170, i32* @r0, align 4
  %v3_10170 = add i32 %v0_1016c, 12
  %v4_10170 = inttoptr i32 %v3_10170 to i32*
  %v5_10170 = load i32, i32* %v4_10170, align 4
  store i32 %v5_10170, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10074

; uselistorder directives
  uselistorder i32 %v0_1016c, { 1, 2, 0 }
  uselistorder i32 %v2_10154, { 1, 0 }
  uselistorder i32 %v2_10134, { 1, 0 }
  uselistorder i32 %v1_10128, { 1, 0 }
  uselistorder i32 %v2_10054, { 1, 0 }
  uselistorder i32 %v0_10020, { 1, 0 }
  uselistorder i32 %v0_ffdc, { 0, 2, 1 }
  uselistorder i32 %v0_ff80, { 0, 2, 1 }
  uselistorder i32 %v4_ff6c, { 1, 0 }
  uselistorder i32 %v4_ff60, { 1, 0 }
  uselistorder i32 %v3_ff40, { 2, 1, 0 }
  uselistorder i32 %v0_ff40, { 1, 0 }
  uselistorder i32 %v1_ff10, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v3_ff0c, { 1, 0 }
  uselistorder i32 %v2_fef8, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %dec_label_pc_10074, { 1, 0 }
  uselistorder label %dec_label_pc_10018, { 1, 0 }
  uselistorder label %dec_label_pc_ffdc, { 1, 2, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %dec_label_pc_ff5c, { 1, 0 }
  uselistorder label %dec_label_pc_ff38, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ff0c, { 1, 0 }
}

define i32 @function_10184(i32 %arg1) local_unnamed_addr {
dec_label_pc_10184:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10184 = load i32, i32* @r4, align 4
  store i32 %v3_10184, i32* %stack_var_-36, align 4
  %v6_10184 = load i32, i32* @r5, align 4
  %v9_10184 = load i32, i32* @r6, align 4
  %v12_10184 = load i32, i32* @r7, align 4
  %v15_10184 = load i32, i32* @r8, align 4
  %v21_10184 = load i32, i32* @sl, align 4
  %v1_10188 = add i32 %arg1, 4
  %v2_10188 = inttoptr i32 %v1_10188 to i32*
  %v3_10188 = load i32, i32* %v2_10188, align 4
  store i32 %v3_10188, i32* @sl, align 4
  %v1_1018c = urem i32 %v3_10188, 2
  %v2_1018c = icmp eq i32 %v1_1018c, 0
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v3_10188, i32* %r7.global-to-local, align 4
  br i1 %v2_1018c, label %dec_label_pc_101a0, label %dec_label_pc_10280

dec_label_pc_101a0:                               ; preds = %dec_label_pc_10184, %dec_label_pc_10274
  %v0_101a0 = phi i32 [ %v0_10274, %dec_label_pc_10274 ], [ %v3_10188, %dec_label_pc_10184 ]
  %v3_101a0 = udiv i32 %v0_101a0, 16
  store i32 %v3_101a0, i32* %r3.global-to-local, align 4
  %v1_101a4 = add nsw i32 %v3_101a0, -1
  store i32 %v1_101a4, i32* @r0, align 4
  %tmp = icmp ult i32 %v1_101a4, 33
  br i1 %tmp, label %.thread, label %dec_label_pc_101b4

.thread:                                          ; preds = %dec_label_pc_101a0
  store i32 %v1_101a4, i32* @r8, align 4
  br label %dec_label_pc_101cc

dec_label_pc_101b4:                               ; preds = %dec_label_pc_101a0
  %tmp37 = icmp ugt i32 %v1_101a4, 7168
  br i1 %tmp37, label %.thread19, label %dec_label_pc_101c0

.thread19:                                        ; preds = %dec_label_pc_101b4
  store i32 63, i32* @r8, align 4
  br label %dec_label_pc_101cc

dec_label_pc_101c0:                               ; preds = %dec_label_pc_101b4
  %v0_101c0 = call i32 @function_14290()
  %v3_101c4 = udiv i32 %v0_101c0, 2097152
  %v1_101c8 = add nsw i32 %v3_101c4, -496
  store i32 %v1_101c8, i32* @r8, align 4
  br label %dec_label_pc_101cc

dec_label_pc_101cc:                               ; preds = %.thread19, %.thread, %dec_label_pc_101c0
  %v0_101d4 = phi i32 [ 63, %.thread19 ], [ %v1_101a4, %.thread ], [ %v1_101c8, %dec_label_pc_101c0 ]
  %v3_101d0 = load i32, i32* @global_var_1f6f4.257, align 4
  store i32 %v3_101d0, i32* %r2.global-to-local, align 4
  %v3_101d4 = mul i32 %v0_101d4, 16
  store i32 %v3_101d4, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %sb.global-to-local, align 4
  %v2_101dc = icmp eq i32 %v3_101d0, 0
  store i1 %v2_101dc, i1* @cpsr_z, align 1
  %v1_101e0 = or i32 %v3_101d4, 8
  store i32 %v1_101e0, i32* %r3.global-to-local, align 4
  %v2_101e4 = add i32 %v1_101e0, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  store i32 %v2_101e4, i32* @r6, align 4
  br i1 %v2_101dc, label %bb, label %dec_label_pc_102b0

bb:                                               ; preds = %dec_label_pc_101cc
  %v1_101e8 = load i32, i32* @sl, align 4
  store i32 %v1_101e8, i32* @r0, align 4
  br label %dec_label_pc_101f0

dec_label_pc_101f0:                               ; preds = %bb, %dec_label_pc_102d8
  %v0_1021436 = phi i32 [ %v1_101e8, %bb ], [ %v3_102d8, %dec_label_pc_102d8 ]
  %v0_101f4 = phi i32 [ ptrtoint (i32* @global_var_1f0f0.358 to i32), %bb ], [ %v0_101f4.pre, %dec_label_pc_102d8 ]
  %v0_101f0 = phi i32 [ %v0_101d4, %bb ], [ %v0_101f0.pre, %dec_label_pc_102d8 ]
  %v1_101f0 = add i32 %v0_101f0, 1
  store i32 %v1_101f0, i32* %r1.global-to-local, align 4
  %v4_101f4 = mul i32 %v1_101f0, 16
  %v5_101f4 = add i32 %v4_101f4, %v0_101f4
  %v6_101f4 = inttoptr i32 %v5_101f4 to i32*
  %v7_101f4 = load i32, i32* %v6_101f4, align 4
  store i32 %v7_101f4, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r6.global-to-local, align 4
  %v2_101fc = icmp eq i32 %v7_101f4, 0
  br i1 %v2_101fc, label %bb31, label %.thread4

bb31:                                             ; preds = %dec_label_pc_101f0
  %v4_10200 = mul i32 %v1_101f0, 16
  %v3_10204 = add i32 %v4_10200, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  store i32 %v3_10204, i32* %r3.global-to-local, align 4
  %v2_10208 = add i32 %v4_10200, add (i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32 -8)
  store i32 %v2_10208, i32* %r2.global-to-local, align 4
  %v7_1020c = add i32 %v4_101f4, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  %v8_1020c = inttoptr i32 %v7_1020c to i32*
  store i32 %v2_10208, i32* %v8_1020c, align 4
  %v1_10210 = load i32, i32* %r2.global-to-local, align 4
  %v2_10210 = load i32, i32* %r3.global-to-local, align 4
  %v3_10210 = add i32 %v2_10210, 4
  %v4_10210 = inttoptr i32 %v3_10210 to i32*
  store i32 %v1_10210, i32* %v4_10210, align 4
  %v0_10214.pre = load i32, i32* @r0, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_101f0, %bb31
  %v0_10214 = phi i32 [ %v0_1021436, %dec_label_pc_101f0 ], [ %v0_10214.pre, %bb31 ]
  %v1_10214 = load i32, i32* @sl, align 4
  %v9_10214 = icmp eq i32 %v0_10214, %v1_10214
  br i1 %v9_10214, label %dec_label_pc_102f4, label %dec_label_pc_1021c

dec_label_pc_1021c:                               ; preds = %.thread4
  %v0_1021c = load i32, i32* @r5, align 4
  %v1_1021c = add i32 %v0_1021c, 8
  store i32 %v1_1021c, i32* %r2.global-to-local, align 4
  %v1_10220 = load i32, i32* %r6.global-to-local, align 4
  %v2_10220 = add i32 %v1_10220, %v1_1021c
  %v3_10220 = inttoptr i32 %v2_10220 to i32*
  %v4_10220 = load i32, i32* %v3_10220, align 4
  store i32 %v4_10220, i32* %r3.global-to-local, align 4
  %v2_10224 = icmp eq i32 %v4_10220, 0
  store i1 %v2_10224, i1* @cpsr_z, align 1
  store i32 %v2_10220, i32* %r4.global-to-local, align 4
  br i1 %v2_10224, label %dec_label_pc_10274, label %dec_label_pc_10230

dec_label_pc_10230:                               ; preds = %dec_label_pc_1021c
  %v0_10230 = call i32 @function_12874()
  store i32 %v0_10230, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10238 = load i32, i32* %r2.global-to-local, align 4
  %v2_10238 = load i32, i32* %r6.global-to-local, align 4
  %v3_10238 = add i32 %v2_10238, %v1_10238
  %v4_10238 = inttoptr i32 %v3_10238 to i32*
  store i32 0, i32* %v4_10238, align 4
  %v0_1023c = call i32 @function_12874()
  %v0_10240 = load i32, i32* @r5, align 4
  %v1_10240 = add i32 %v0_10240, 12
  store i32 %v1_10240, i32* %r3.global-to-local, align 4
  %v1_10244 = load i32, i32* %r6.global-to-local, align 4
  %v2_10244 = add i32 %v1_10244, %v1_10240
  %v3_10244 = inttoptr i32 %v2_10244 to i32*
  %v4_10244 = load i32, i32* %v3_10244, align 4
  store i32 %v4_10244, i32* %r2.global-to-local, align 4
  %v2_10248 = icmp eq i32 %v4_10244, 0
  br i1 %v2_10248, label %dec_label_pc_1026c, label %dec_label_pc_10250

dec_label_pc_10250:                               ; preds = %dec_label_pc_10230
  store i32 240, i32* %r7.global-to-local, align 4
  %v0_10254 = load i32, i32* %r4.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v7_10264 = icmp eq i32 %v0_10254, -38
  br i1 %v7_10264, label %dec_label_pc_102e4, label %dec_label_pc_1026c

dec_label_pc_1026c:                               ; preds = %dec_label_pc_10250, %dec_label_pc_10230, %dec_label_pc_102e4
  %v0_1026c = load i32, i32* %fp.global-to-local, align 4
  %v1_1026c = add i32 %v0_1026c, 4
  %v2_1026c = inttoptr i32 %v1_1026c to i32*
  %v3_1026c = load i32, i32* %v2_1026c, align 4
  store i32 %v3_1026c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10274

dec_label_pc_10274:                               ; preds = %dec_label_pc_1021c, %dec_label_pc_1026c
  %v0_10274 = phi i32 [ %v0_10214, %dec_label_pc_1021c ], [ %v3_1026c, %dec_label_pc_1026c ]
  store i32 %v0_10274, i32* @sl, align 4
  %v1_10278 = urem i32 %v0_10274, 2
  %v2_10278 = icmp eq i32 %v1_10278, 0
  br i1 %v2_10278, label %dec_label_pc_101a0, label %dec_label_pc_10280

dec_label_pc_10280:                               ; preds = %dec_label_pc_10274, %dec_label_pc_10184
  br label %dec_label_pc_10284

dec_label_pc_10284:                               ; preds = %dec_label_pc_10384, %dec_label_pc_1037c, %dec_label_pc_10280
  %v1_1028c = phi i32 [ 1, %dec_label_pc_10384 ], [ 1, %dec_label_pc_1037c ], [ 0, %dec_label_pc_10280 ]
  %v2_10288 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10288, i32* @r4, align 4
  store i32 %v6_10184, i32* @r5, align 4
  store i32 %v9_10184, i32* @r6, align 4
  store i32 %v12_10184, i32* @r7, align 4
  store i32 %v15_10184, i32* @r8, align 4
  store i32 %v21_10184, i32* @sl, align 4
  ret i32 %v1_1028c

dec_label_pc_10298:                               ; preds = %dec_label_pc_102d4
  %v0_10298 = load i32, i32* @r5, align 4
  %v1_10298 = add i32 %v0_10298, 12
  store i32 1, i32* @r2, align 4
  %v1_102a0 = load i32, i32* %sb.global-to-local, align 4
  %v2_102a0 = add i32 %v1_10298, %v1_102a0
  store i32 %v2_102a0, i32* %r1.global-to-local, align 4
  %v0_102a4 = load i32, i32* @r6, align 4
  store i32 1, i32* @r3, align 4
  %v2_102ac = inttoptr i32 %v0_102a4 to i32*
  %v3_102ac = call i32 @function_12424(i32* %v2_102ac, i32 %v2_102a0)
  %v0_102b0.pre = load i32, i32* @r5, align 4
  %v1_102b4.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_102b0

dec_label_pc_102b0:                               ; preds = %dec_label_pc_101cc, %dec_label_pc_10298
  %v1_102b4 = phi i32 [ %v1_102b4.pre, %dec_label_pc_10298 ], [ ptrtoint (i32* @global_var_1f0f0.358 to i32), %dec_label_pc_101cc ]
  %v0_102b0 = phi i32 [ %v0_102b0.pre, %dec_label_pc_10298 ], [ %v3_101d4, %dec_label_pc_101cc ]
  %v1_102b0 = add i32 %v0_102b0, 8
  store i32 %v1_102b0, i32* %r3.global-to-local, align 4
  %v2_102b4 = add i32 %v1_102b0, %v1_102b4
  store i32 %v2_102b4, i32* @r7, align 4
  br label %dec_label_pc_102b8

dec_label_pc_102b8:                               ; preds = %dec_label_pc_102b8.dec_label_pc_102b8_crit_edge, %dec_label_pc_102b0
  %v0_102b8 = phi i32 [ %v0_102b8.pre, %dec_label_pc_102b8.dec_label_pc_102b8_crit_edge ], [ %v2_102b4, %dec_label_pc_102b0 ]
  %v1_102b8 = inttoptr i32 %v0_102b8 to i32*
  %v2_102b8 = load i32, i32* %v1_102b8, align 4
  store i32 %v2_102b8, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v0_102b8, i32* %r2.global-to-local, align 4
  %v4_102c8 = call i32 @function_128c8(i32 %v2_102b8, i32 1, i32* %v1_102b8)
  %v2_102cc = icmp eq i32 %v4_102c8, 0
  store i1 %v2_102cc, i1* @cpsr_z, align 1
  br i1 %v2_102cc, label %dec_label_pc_102d4, label %dec_label_pc_102b8.dec_label_pc_102b8_crit_edge

dec_label_pc_102b8.dec_label_pc_102b8_crit_edge:  ; preds = %dec_label_pc_102b8
  %v0_102b8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_102b8

dec_label_pc_102d4:                               ; preds = %dec_label_pc_102b8
  %v0_10290 = load i32, i32* @r4, align 4
  %v2_10290 = icmp eq i32 %v0_10290, 0
  br i1 %v2_10290, label %dec_label_pc_102d8, label %dec_label_pc_10298

dec_label_pc_102d8:                               ; preds = %dec_label_pc_102d4
  %v0_102d8 = load i32, i32* %fp.global-to-local, align 4
  %v1_102d8 = add i32 %v0_102d8, 4
  %v2_102d8 = inttoptr i32 %v1_102d8 to i32*
  %v3_102d8 = load i32, i32* %v2_102d8, align 4
  store i32 %v3_102d8, i32* @r0, align 4
  store i32 %v3_102d8, i32* %r7.global-to-local, align 4
  %v0_101f0.pre = load i32, i32* @r8, align 4
  %v0_101f4.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_101f0

dec_label_pc_102e4:                               ; preds = %dec_label_pc_10250
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1026c

dec_label_pc_102f4:                               ; preds = %.thread4
  %v0_102f4 = load i32, i32* %fp.global-to-local, align 4
  %v1_102f4 = add i32 %v0_102f4, 12
  %v2_102f4 = inttoptr i32 %v1_102f4 to i32*
  %v3_102f4 = load i32, i32* %v2_102f4, align 4
  store i32 %v3_102f4, i32* @r0, align 4
  %v1_102f8 = add i32 %v0_102f4, 8
  %v2_102f8 = inttoptr i32 %v1_102f8 to i32*
  %v3_102f8 = load i32, i32* %v2_102f8, align 4
  store i32 %v3_102f8, i32* %r1.global-to-local, align 4
  %v9_102fc = icmp eq i32 %v3_102f4, %v3_102f8
  br i1 %v9_102fc, label %dec_label_pc_10398, label %dec_label_pc_102f4.dec_label_pc_10304_crit_edge

dec_label_pc_102f4.dec_label_pc_10304_crit_edge:  ; preds = %dec_label_pc_102f4
  %v0_10304.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10304

dec_label_pc_10304:                               ; preds = %dec_label_pc_102f4.dec_label_pc_10304_crit_edge, %dec_label_pc_103f8
  %v2_10314 = phi i32 [ %v0_102f4, %dec_label_pc_102f4.dec_label_pc_10304_crit_edge ], [ %v0_103f8, %dec_label_pc_103f8 ]
  %v0_10304 = phi i32 [ %v0_10304.pre, %dec_label_pc_102f4.dec_label_pc_10304_crit_edge ], [ %v3_103f8, %dec_label_pc_103f8 ]
  %v1_10304 = or i32 %v0_10304, 1
  store i32 %v1_10304, i32* %r7.global-to-local, align 4
  %v1_10308 = and i32 %v0_10304, -2
  store i32 %v1_10308, i32* %r2.global-to-local, align 4
  %v2_1030c = add i32 %v1_10308, %v2_10314
  %v3_1030c = inttoptr i32 %v2_1030c to i32*
  %v4_1030c = load i32, i32* %v3_1030c, align 4
  %v1_10310 = or i32 %v4_1030c, 1
  store i32 %v1_10310, i32* %r3.global-to-local, align 4
  store i32 %v1_10310, i32* %v3_1030c, align 4
  %v0_10318 = load i32, i32* %r7.global-to-local, align 4
  %v1_10318 = load i32, i32* %fp.global-to-local, align 4
  %v2_10318 = add i32 %v1_10318, 4
  %v3_10318 = inttoptr i32 %v2_10318 to i32*
  store i32 %v0_10318, i32* %v3_10318, align 4
  %v0_1031c = load i32, i32* @r5, align 4
  %v1_1031c = add i32 %v0_1031c, 8
  store i32 %v1_1031c, i32* %r4.global-to-local, align 4
  %v0_10320 = load i32, i32* %r1.global-to-local, align 4
  %v1_10320 = load i32, i32* @r0, align 4
  %v2_10320 = add i32 %v1_10320, 8
  %v3_10320 = inttoptr i32 %v2_10320 to i32*
  store i32 %v0_10320, i32* %v3_10320, align 4
  %v0_10324 = load i32, i32* %r4.global-to-local, align 4
  %v1_10324 = load i32, i32* %sb.global-to-local, align 4
  %v2_10324 = add i32 %v1_10324, %v0_10324
  %v3_10324 = inttoptr i32 %v2_10324 to i32*
  %v4_10324 = load i32, i32* %v3_10324, align 4
  store i32 %v4_10324, i32* %r3.global-to-local, align 4
  %v0_10328 = load i32, i32* %fp.global-to-local, align 4
  %v1_10328 = add i32 %v0_10328, 8
  %v2_10328 = inttoptr i32 %v1_10328 to i32*
  %v3_10328 = load i32, i32* %v2_10328, align 4
  store i32 %v3_10328, i32* %r2.global-to-local, align 4
  %v2_1032c = icmp eq i32 %v4_10324, 0
  store i1 %v2_1032c, i1* @cpsr_z, align 1
  %v0_10330 = load i32, i32* @r0, align 4
  %v2_10330 = add i32 %v3_10328, 12
  %v3_10330 = inttoptr i32 %v2_10330 to i32*
  store i32 %v0_10330, i32* %v3_10330, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r1.global-to-local, align 4
  %v0_10338 = load i32, i32* %r4.global-to-local, align 4
  %v1_10338 = load i32, i32* %sb.global-to-local, align 4
  %v2_10338 = add i32 %v1_10338, %v0_10338
  store i32 %v2_10338, i32* %r6.global-to-local, align 4
  br i1 %v2_1032c, label %dec_label_pc_1037c, label %dec_label_pc_10340

dec_label_pc_10340:                               ; preds = %dec_label_pc_10304
  %v0_10340 = call i32 @function_12874()
  store i32 %v0_10340, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10348 = load i32, i32* %r4.global-to-local, align 4
  %v2_10348 = load i32, i32* %r1.global-to-local, align 4
  %v3_10348 = add i32 %v2_10348, %v1_10348
  %v4_10348 = inttoptr i32 %v3_10348 to i32*
  store i32 0, i32* %v4_10348, align 4
  %v0_1034c = call i32 @function_12874()
  %v0_10350 = load i32, i32* @r5, align 4
  %v1_10350 = add i32 %v0_10350, 12
  store i32 %v1_10350, i32* %r3.global-to-local, align 4
  %v1_10354 = load i32, i32* %r1.global-to-local, align 4
  %v2_10354 = add i32 %v1_10354, %v1_10350
  %v3_10354 = inttoptr i32 %v2_10354 to i32*
  %v4_10354 = load i32, i32* %v3_10354, align 4
  store i32 %v4_10354, i32* %r2.global-to-local, align 4
  %v2_10358 = icmp eq i32 %v4_10354, 0
  br i1 %v2_10358, label %dec_label_pc_1037c, label %dec_label_pc_10360

dec_label_pc_10360:                               ; preds = %dec_label_pc_10340
  store i32 240, i32* %r7.global-to-local, align 4
  %v0_10364 = load i32, i32* %r6.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v7_10374 = icmp eq i32 %v0_10364, -38
  br i1 %v7_10374, label %dec_label_pc_10384, label %dec_label_pc_1037c

dec_label_pc_1037c:                               ; preds = %dec_label_pc_10360, %dec_label_pc_10340, %dec_label_pc_10304
  br label %dec_label_pc_10284

dec_label_pc_10384:                               ; preds = %dec_label_pc_10360
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10284

dec_label_pc_10398:                               ; preds = %dec_label_pc_102f4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_1039c = load i32, i32* @r8, align 4
  %v1_1039c = sub i32 32, %v0_1039c
  store i32 %v1_1039c, i32* %r1.global-to-local, align 4
  %v7_103a4 = lshr i32 1, %v1_1039c
  store i32 %v7_103a4, i32* %r4.global-to-local, align 4
  %v1_103a8 = add i32 %v0_1039c, -32
  %v6_103a8 = icmp slt i32 %v1_103a8, 0
  %v7_103a8 = icmp eq i32 %v0_1039c, 32
  store i1 %v7_103a8, i1* @cpsr_z, align 1
  %v6_103ac = shl i32 1, %v0_1039c
  store i32 %v6_103ac, i32* %r3.global-to-local, align 4
  br i1 %v6_103a8, label %bb33, label %bb32

bb32:                                             ; preds = %dec_label_pc_10398
  %v7_103b0 = shl i32 1, %v1_103a8
  store i32 %v7_103b0, i32* %r4.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_10398, %bb32
  %v0_103b8 = phi i32 [ %v7_103a4, %dec_label_pc_10398 ], [ %v7_103b0, %bb32 ]
  %v1_103b4 = sub i32 -1, %v6_103ac
  store i32 %v1_103b4, i32* @r7, align 4
  %v1_103b8 = sub i32 -1, %v0_103b8
  store i32 %v1_103b8, i32* %r8.global-to-local, align 4
  store i32 %v1_103b4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_103c0

dec_label_pc_103c0:                               ; preds = %dec_label_pc_103c0.dec_label_pc_103c0_crit_edge, %bb33
  %v1_103c8 = phi i32 [ %v1_103c8.pre, %dec_label_pc_103c0.dec_label_pc_103c0_crit_edge ], [ %v1_103b4, %bb33 ]
  %v2_103c0 = load i32, i32* @global_var_1f0f0.358, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r2.global-to-local, align 4
  %v2_103c8 = and i32 %v2_103c0, %v1_103c8
  store i32 %v2_103c8, i32* %r1.global-to-local, align 4
  %v4_103cc = call i32 @function_128c8(i32 %v2_103c0, i32 %v2_103c8, i32* nonnull @global_var_1f0f0.358)
  %v2_103d0 = icmp eq i32 %v4_103cc, 0
  store i1 %v2_103d0, i1* @cpsr_z, align 1
  br i1 %v2_103d0, label %dec_label_pc_103d8, label %dec_label_pc_103c0.dec_label_pc_103c0_crit_edge

dec_label_pc_103c0.dec_label_pc_103c0_crit_edge:  ; preds = %dec_label_pc_103c0
  %v1_103c8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_103c0

dec_label_pc_103d8:                               ; preds = %dec_label_pc_103c0
  store i32 ptrtoint (i32* @global_var_1f0f4.360 to i32), i32* %r6.global-to-local, align 4
  %v0_103dc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_103dc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_103e0

dec_label_pc_103e0:                               ; preds = %dec_label_pc_103e0.dec_label_pc_103e0_crit_edge, %dec_label_pc_103d8
  %v1_103e8 = phi i32 [ %v1_103e8.pre, %dec_label_pc_103e0.dec_label_pc_103e0_crit_edge ], [ %v0_103dc, %dec_label_pc_103d8 ]
  %v2_103e0 = load i32, i32* @global_var_1f0f4.360, align 4
  store i32 ptrtoint (i32* @global_var_1f0f4.360 to i32), i32* %r2.global-to-local, align 4
  %v2_103e8 = and i32 %v2_103e0, %v1_103e8
  store i32 %v2_103e8, i32* %r1.global-to-local, align 4
  %v4_103ec = call i32 @function_128c8(i32 %v2_103e0, i32 %v2_103e8, i32* nonnull @global_var_1f0f4.360)
  %v2_103f0 = icmp eq i32 %v4_103ec, 0
  store i1 %v2_103f0, i1* @cpsr_z, align 1
  br i1 %v2_103f0, label %dec_label_pc_103f8, label %dec_label_pc_103e0.dec_label_pc_103e0_crit_edge

dec_label_pc_103e0.dec_label_pc_103e0_crit_edge:  ; preds = %dec_label_pc_103e0
  %v1_103e8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_103e0

dec_label_pc_103f8:                               ; preds = %dec_label_pc_103e0
  %v0_103f8 = load i32, i32* %fp.global-to-local, align 4
  %v1_103f8 = add i32 %v0_103f8, 4
  %v2_103f8 = inttoptr i32 %v1_103f8 to i32*
  %v3_103f8 = load i32, i32* %v2_103f8, align 4
  store i32 %v3_103f8, i32* %r7.global-to-local, align 4
  %v1_103fc = add i32 %v0_103f8, 12
  %v2_103fc = inttoptr i32 %v1_103fc to i32*
  %v3_103fc = load i32, i32* %v2_103fc, align 4
  store i32 %v3_103fc, i32* @r0, align 4
  %v1_10400 = add i32 %v0_103f8, 8
  %v2_10400 = inttoptr i32 %v1_10400 to i32*
  %v3_10400 = load i32, i32* %v2_10400, align 4
  store i32 %v3_10400, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10304

; uselistorder directives
  uselistorder i32 %v3_103f8, { 1, 0 }
  uselistorder i32 %v0_103f8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_103e0, { 1, 0 }
  uselistorder i32 %v2_103c0, { 1, 0 }
  uselistorder i32 %v1_103b4, { 2, 1, 0 }
  uselistorder i32 %v0_10304, { 1, 0 }
  uselistorder i32 %v3_102d8, { 1, 2, 0 }
  uselistorder i32 %v0_102b8, { 1, 0 }
  uselistorder i32 %v0_10274, { 0, 2, 1 }
  uselistorder i32 %v0_10214, { 1, 0 }
  uselistorder i32 %v4_10200, { 1, 0 }
  uselistorder i32 %v4_101f4, { 1, 0 }
  uselistorder i32 %v3_101d4, { 2, 1, 0 }
  uselistorder i32 %v0_101d4, { 1, 0 }
  uselistorder i32 %v1_101a4, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v3_101a0, { 1, 0 }
  uselistorder i32 %v3_10188, { 1, 2, 0, 3 }
  uselistorder i32* %sb.global-to-local, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 7, 4, 5, 6, 8 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %dec_label_pc_10304, { 1, 0 }
  uselistorder label %dec_label_pc_102b0, { 1, 0 }
  uselistorder label %dec_label_pc_10274, { 1, 0 }
  uselistorder label %dec_label_pc_1026c, { 2, 0, 1 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %dec_label_pc_101f0, { 1, 0 }
  uselistorder label %dec_label_pc_101cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_101a0, { 1, 0 }
}

define i32 @function_10414(i32 %arg1) local_unnamed_addr {
dec_label_pc_10414:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_10414 = load i32, i32* @r4, align 4
  %v6_10414 = load i32, i32* @r5, align 4
  %v9_10414 = load i32, i32* @r6, align 4
  %v12_10414 = load i32, i32* @r7, align 4
  %v15_10414 = load i32, i32* @r8, align 4
  %v18_10414 = load i32, i32* @sb, align 4
  %v21_10414 = load i32, i32* @sl, align 4
  %v24_10414 = load i32, i32* @fp, align 4
  %v0_10418 = load i32, i32* %r0.global-to-local, align 4
  %v2_10418 = icmp eq i32 %v0_10418, 0
  br i1 %v2_10418, label %dec_label_pc_107d8, label %dec_label_pc_10424

dec_label_pc_10424:                               ; preds = %dec_label_pc_10414
  %v1_10424 = add i32 %v0_10418, -8
  store i32 %v1_10424, i32* @r8, align 4
  %v1_10428 = add i32 %v0_10418, -4
  %v2_10428 = inttoptr i32 %v1_10428 to i32*
  %v3_10428 = load i32, i32* %v2_10428, align 4
  store i32 %v3_10428, i32* %r1.global-to-local, align 4
  %v1_1042c = urem i32 %v3_10428, 2
  store i32 %v1_1042c, i32* @r3, align 4
  %v2_1042c = icmp eq i32 %v1_1042c, 0
  br i1 %v2_1042c, label %dec_label_pc_10874, label %dec_label_pc_10434

dec_label_pc_10434:                               ; preds = %dec_label_pc_10424
  %v1_10434 = and i32 %v3_10428, -2
  store i32 %v1_10434, i32* %r0.global-to-local, align 4
  %v2_10438 = add i32 %v1_10434, %v1_10424
  %v3_10438 = inttoptr i32 %v2_10438 to i32*
  %v4_10438 = load i32, i32* %v3_10438, align 4
  store i32 %v4_10438, i32* %r3.global-to-local, align 4
  %v9_1043c = icmp eq i32 %v3_10428, %v4_10438
  br i1 %v9_1043c, label %.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_10434
  store i32 0, i32* @r3, align 4
  call void @llvm.trap()
  unreachable

.preheader:                                       ; preds = %dec_label_pc_10434
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v2_10438, i32* @sb, align 4
  store i32 %v1_10434, i32* @fp, align 4
  br label %bb62

.loopexit:                                        ; preds = %dec_label_pc_105fc
  %v0_10468.pre = load i32, i32* @r8, align 4
  br label %bb62

bb62:                                             ; preds = %.preheader, %.loopexit
  %v0_10468 = phi i32 [ %v0_10468.pre, %.loopexit ], [ %v1_10424, %.preheader ]
  %v0_10464 = phi i32 [ %v0_10464.pre, %.loopexit ], [ %v2_10438, %.preheader ]
  %stack_var_-44.2 = phi i32 [ %stack_var_-44.5, %.loopexit ], [ 0, %.preheader ]
  %v1_10464 = add i32 %v0_10464, 4
  %v2_10464 = inttoptr i32 %v1_10464 to i32*
  %v3_10464 = load i32, i32* %v2_10464, align 4
  store i32 %v3_10464, i32* %r3.global-to-local, align 4
  %v1_10468 = inttoptr i32 %v0_10468 to i32*
  %v2_10468 = load i32, i32* %v1_10468, align 4
  store i32 %v2_10468, i32* %r2.global-to-local, align 4
  %v2_1046c = and i32 %v2_10468, %v3_10464
  store i32 %v2_1046c, i32* %r3.global-to-local, align 4
  %v1_10470 = urem i32 %v2_1046c, 2
  %v2_10470 = icmp eq i32 %v1_10470, 0
  br i1 %v2_10470, label %dec_label_pc_105b0.preheader, label %.dec_label_pc_10478_crit_edge

.dec_label_pc_10478_crit_edge:                    ; preds = %bb62
  %v0_10478.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_10478

dec_label_pc_10478:                               ; preds = %dec_label_pc_10638, %.dec_label_pc_10478_crit_edge
  %v1_10488 = phi i32 [ %v0_10464, %.dec_label_pc_10478_crit_edge ], [ %v2_10638, %dec_label_pc_10638 ]
  %v0_10484 = phi i32 [ %v0_10478.pre, %.dec_label_pc_10478_crit_edge ], [ %v2_1063c, %dec_label_pc_10638 ]
  %stack_var_-44.3 = phi i32 [ %stack_var_-44.2, %.dec_label_pc_10478_crit_edge ], [ %stack_var_-44.6, %dec_label_pc_10638 ]
  %v3_10478 = udiv i32 %v0_10484, 16
  %v1_1047c = add nsw i32 %v3_10478, -1
  store i32 %v1_1047c, i32* @r0, align 4
  %v1_10484 = or i32 %v0_10484, 1
  store i32 %v1_10484, i32* %r3.global-to-local, align 4
  %v2_10488 = inttoptr i32 %v1_10488 to i32*
  store i32 %v1_10484, i32* %v2_10488, align 4
  %v0_1048c = load i32, i32* %r3.global-to-local, align 4
  %v1_1048c = load i32, i32* @r8, align 4
  %v2_1048c = add i32 %v1_1048c, 4
  %v3_1048c = inttoptr i32 %v2_1048c to i32*
  store i32 %v0_1048c, i32* %v3_1048c, align 4
  %tmp = icmp ult i32 %v1_1047c, 33
  %v4_10490 = load i32, i32* @r0, align 4
  br i1 %tmp, label %.thread, label %dec_label_pc_10498

.thread:                                          ; preds = %dec_label_pc_10478
  store i32 %v4_10490, i32* @sl, align 4
  br label %dec_label_pc_104b0

dec_label_pc_10498:                               ; preds = %dec_label_pc_10478
  %tmp80 = icmp ugt i32 %v4_10490, 7168
  br i1 %tmp80, label %.thread45, label %dec_label_pc_104a4

.thread45:                                        ; preds = %dec_label_pc_10498
  store i32 63, i32* @sl, align 4
  br label %dec_label_pc_104b0

dec_label_pc_104a4:                               ; preds = %dec_label_pc_10498
  %v0_104a4 = call i32 @function_14290()
  %v3_104a8 = udiv i32 %v0_104a4, 2097152
  store i32 %v3_104a8, i32* %r0.global-to-local, align 4
  %v1_104ac = add nsw i32 %v3_104a8, -496
  store i32 %v1_104ac, i32* @sl, align 4
  br label %dec_label_pc_104b0

dec_label_pc_104b0:                               ; preds = %.thread45, %.thread, %dec_label_pc_104a4
  %v0_104b8 = phi i32 [ 63, %.thread45 ], [ %v4_10490, %.thread ], [ %v1_104ac, %dec_label_pc_104a4 ]
  %v3_104b4 = load i32, i32* @global_var_1f6f4.257, align 4
  store i32 %v3_104b4, i32* %r2.global-to-local, align 4
  %v3_104b8 = mul i32 %v0_104b8, 16
  store i32 %v3_104b8, i32* @r6, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r0.global-to-local, align 4
  %v1_104c0 = or i32 %v3_104b8, 8
  store i32 %v1_104c0, i32* %r3.global-to-local, align 4
  %v2_104c4 = icmp eq i32 %v3_104b4, 0
  store i1 %v2_104c4, i1* @cpsr_z, align 1
  %v2_104c8 = add i32 %v1_104c0, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  store i32 %v2_104c8, i32* @r5, align 4
  br i1 %v2_104c4, label %dec_label_pc_104d0, label %dec_label_pc_10808

dec_label_pc_104d0.loopexit:                      ; preds = %dec_label_pc_10830
  %v0_104d4.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_104d0

dec_label_pc_104d0:                               ; preds = %dec_label_pc_104d0.loopexit, %dec_label_pc_104b0
  %v0_104d4 = phi i32 [ %v0_104d4.pre, %dec_label_pc_104d0.loopexit ], [ %v0_104b8, %dec_label_pc_104b0 ]
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r2.global-to-local, align 4
  %v1_104d4 = add i32 %v0_104d4, 1
  store i32 %v1_104d4, i32* %r1.global-to-local, align 4
  %v4_104d8 = mul i32 %v1_104d4, 16
  %v5_104d8 = add i32 %v4_104d8, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  %v6_104d8 = inttoptr i32 %v5_104d8 to i32*
  %v7_104d8 = load i32, i32* %v6_104d8, align 4
  store i32 %v7_104d8, i32* %r3.global-to-local, align 4
  %v2_104dc = icmp eq i32 %v7_104d8, 0
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r1.global-to-local, align 4
  br i1 %v2_104dc, label %dec_label_pc_10894, label %dec_label_pc_104ec

dec_label_pc_104ec:                               ; preds = %dec_label_pc_104d0, %dec_label_pc_10894
  store i32 ptrtoint (i8** @global_var_1f6e8.330 to i32), i32* %r1.global-to-local, align 4
  %v3_104f0 = load i32, i32* @global_var_1f6f4.257, align 4
  store i32 %v3_104f0, i32* %r3.global-to-local, align 4
  %v2_104f4 = icmp eq i32 %v3_104f0, 0
  store i1 %v2_104f4, i1* @cpsr_z, align 1
  br i1 %v2_104f4, label %dec_label_pc_104fc, label %dec_label_pc_10834

dec_label_pc_104fc:                               ; preds = %dec_label_pc_10864, %dec_label_pc_104ec
  %v0_104fc = load i32, i32* @r8, align 4
  %v1_104fc = inttoptr i32 %v0_104fc to i32*
  %v2_104fc = load i32, i32* %v1_104fc, align 4
  store i32 %v2_104fc, i32* %r2.global-to-local, align 4
  %v0_10500 = load i32, i32* @sb, align 4
  %v1_10500 = add i32 %v0_10500, 4
  %v2_10500 = inttoptr i32 %v1_10500 to i32*
  %v3_10500 = load i32, i32* %v2_10500, align 4
  %v2_10504 = and i32 %v3_10500, %v2_104fc
  store i32 %v2_10504, i32* %r3.global-to-local, align 4
  %v1_10508 = urem i32 %v2_10504, 2
  store i32 %v1_10508, i32* %r2.global-to-local, align 4
  %v2_10508 = icmp eq i32 %v1_10508, 0
  br i1 %v2_10508, label %dec_label_pc_10510, label %dec_label_pc_10658

dec_label_pc_10510:                               ; preds = %dec_label_pc_104fc
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* @r0, align 4
  %v3_10514 = load i32, i32* @global_var_1f4f8.366, align 4
  store i32 %v3_10514, i32* %r3.global-to-local, align 4
  %v2_10518 = icmp eq i32 %v3_10514, 0
  store i1 %v2_10518, i1* @cpsr_z, align 1
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r4.global-to-local, align 4
  br i1 %v2_10518, label %dec_label_pc_1055c, label %dec_label_pc_10524

dec_label_pc_10524:                               ; preds = %dec_label_pc_10510
  %v0_10524 = call i32 @function_12874()
  store i32 %v0_10524, i32* @r0, align 4
  %v0_10528 = load i32, i32* %r2.global-to-local, align 4
  %v2_10528 = add i32 %v0_10524, 1032
  %v3_10528 = inttoptr i32 %v2_10528 to i32*
  store i32 %v0_10528, i32* %v3_10528, align 4
  %v0_1052c = call i32 @function_12874()
  store i32 %v0_1052c, i32* @r0, align 4
  %v1_10530 = add i32 %v0_1052c, 1036
  %v2_10530 = inttoptr i32 %v1_10530 to i32*
  %v3_10530 = load i32, i32* %v2_10530, align 4
  store i32 %v3_10530, i32* %r3.global-to-local, align 4
  %v2_10534 = icmp eq i32 %v3_10530, 0
  br i1 %v2_10534, label %dec_label_pc_1055c, label %dec_label_pc_1053c

dec_label_pc_1053c:                               ; preds = %dec_label_pc_10524
  %v1_10540 = add i32 %v0_1052c, 1032
  store i32 %v1_10540, i32* @r0, align 4
  store i32 240, i32* @r7, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v7_10554 = icmp eq i32 %v0_1052c, -1070
  br i1 %v7_10554, label %dec_label_pc_108b0, label %dec_label_pc_1055c

dec_label_pc_1055c:                               ; preds = %dec_label_pc_1053c, %dec_label_pc_10524, %dec_label_pc_10510, %dec_label_pc_108b0
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r1.global-to-local, align 4
  %v0_10560 = load i32, i32* @r6, align 4
  %v1_10560 = add i32 %v0_10560, 8
  store i32 %v1_10560, i32* %r2.global-to-local, align 4
  %v2_10564 = add i32 %v0_10560, add (i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32 8)
  %v3_10564 = inttoptr i32 %v2_10564 to i32*
  %v4_10564 = load i32, i32* %v3_10564, align 4
  store i32 %v4_10564, i32* %r3.global-to-local, align 4
  %v2_10568 = icmp eq i32 %v4_10564, 0
  store i1 %v2_10568, i1* @cpsr_z, align 1
  store i32 %v2_10564, i32* @r4, align 4
  br i1 %v2_10568, label %dec_label_pc_105b0.preheader, label %dec_label_pc_10574

dec_label_pc_10574:                               ; preds = %dec_label_pc_1055c
  %v0_10574 = call i32 @function_12874()
  store i32 %v0_10574, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_1057c = load i32, i32* %r2.global-to-local, align 4
  %v2_1057c = load i32, i32* %r1.global-to-local, align 4
  %v3_1057c = add i32 %v2_1057c, %v1_1057c
  %v4_1057c = inttoptr i32 %v3_1057c to i32*
  store i32 0, i32* %v4_1057c, align 4
  %v0_10580 = call i32 @function_12874()
  store i32 %v0_10580, i32* %r0.global-to-local, align 4
  %v0_10584 = load i32, i32* @r6, align 4
  %v1_10584 = add i32 %v0_10584, 12
  store i32 %v1_10584, i32* %r3.global-to-local, align 4
  %v1_10588 = load i32, i32* %r1.global-to-local, align 4
  %v2_10588 = add i32 %v1_10588, %v1_10584
  %v3_10588 = inttoptr i32 %v2_10588 to i32*
  %v4_10588 = load i32, i32* %v3_10588, align 4
  store i32 %v4_10588, i32* %r2.global-to-local, align 4
  %v2_1058c = icmp eq i32 %v4_10588, 0
  br i1 %v2_1058c, label %dec_label_pc_105b0.preheader, label %dec_label_pc_10594

dec_label_pc_10594:                               ; preds = %dec_label_pc_10574
  store i32 240, i32* @r7, align 4
  %v0_10598 = load i32, i32* @r4, align 4
  store i32 %v0_10598, i32* %r0.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v7_105a8 = icmp eq i32 %v0_10598, -38
  br i1 %v7_105a8, label %dec_label_pc_108c4, label %dec_label_pc_105b0.preheader

dec_label_pc_105b0.preheader:                     ; preds = %dec_label_pc_108c4, %bb62, %dec_label_pc_1055c, %dec_label_pc_10574, %dec_label_pc_10594
  %stack_var_-44.4.ph = phi i32 [ %stack_var_-44.3, %dec_label_pc_10594 ], [ %stack_var_-44.3, %dec_label_pc_108c4 ], [ %stack_var_-44.3, %dec_label_pc_10574 ], [ %stack_var_-44.3, %dec_label_pc_1055c ], [ %stack_var_-44.2, %bb62 ]
  %v0_105b0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_105b0

dec_label_pc_105b0:                               ; preds = %dec_label_pc_105b0.preheader, %dec_label_pc_10638
  %v0_105b0 = phi i32 [ %v0_10644, %dec_label_pc_10638 ], [ %v0_105b0.pre, %dec_label_pc_105b0.preheader ]
  %stack_var_-44.4 = phi i32 [ %stack_var_-44.6, %dec_label_pc_10638 ], [ %stack_var_-44.4.ph, %dec_label_pc_105b0.preheader ]
  store i32 %v0_105b0, i32* %r0.global-to-local, align 4
  %v1_105b4 = inttoptr i32 %v0_105b0 to i32*
  %v2_105b4 = call i32 @function_fef4(i32* %v1_105b4)
  store i32 %v2_105b4, i32* %r0.global-to-local, align 4
  %v2_105b8 = icmp eq i32 %v2_105b4, 0
  br i1 %v2_105b8, label %dec_label_pc_105fc, label %dec_label_pc_105c0

dec_label_pc_105c0:                               ; preds = %dec_label_pc_105b0
  %v0_105c0 = load i32, i32* @r8, align 4
  %v1_105c0 = inttoptr i32 %v0_105c0 to i32*
  %v2_105c0 = load i32, i32* %v1_105c0, align 4
  %v1_105c4 = and i32 %v2_105c0, -2
  store i32 %v1_105c4, i32* %r3.global-to-local, align 4
  %v2_105c8 = sub i32 %v0_105c0, %v1_105c4
  store i32 %v2_105c8, i32* @r8, align 4
  %v1_105cc = add i32 %v2_105c8, 4
  %v2_105cc = inttoptr i32 %v1_105cc to i32*
  %v3_105cc = load i32, i32* %v2_105cc, align 4
  store i32 %v1_10434, i32* %r0.global-to-local, align 4
  %v1_105d4 = and i32 %v3_105cc, -2
  store i32 %v1_105d4, i32* %r2.global-to-local, align 4
  %v2_105d8 = add i32 %v1_105d4, %v1_10434
  store i32 %v2_105d8, i32* %r3.global-to-local, align 4
  %v0_105e0 = load i32, i32* @fp, align 4
  %v2_105e0 = add i32 %v0_105e0, %v1_105d4
  store i32 %v2_105e0, i32* @fp, align 4
  %tmp81 = icmp ult i32 %v2_105d8, 163841
  br i1 %tmp81, label %dec_label_pc_105fc, label %dec_label_pc_105e8

dec_label_pc_105e8:                               ; preds = %dec_label_pc_105c0
  %v2_105e8 = xor i32 %v2_105d8, %v1_105d4
  store i32 %v2_105e8, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-44.4, i32* %r1.global-to-local, align 4
  %v3_105f0 = icmp ult i32 %v1_105d4, %v2_105e8
  br i1 %v3_105f0, label %bb63, label %dec_label_pc_105fc

bb63:                                             ; preds = %dec_label_pc_105e8
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_105fc

dec_label_pc_105fc:                               ; preds = %dec_label_pc_105e8, %bb63, %dec_label_pc_105c0, %dec_label_pc_105b0
  %stack_var_-44.5 = phi i32 [ %stack_var_-44.4, %dec_label_pc_105b0 ], [ %stack_var_-44.4, %dec_label_pc_105c0 ], [ %stack_var_-44.4, %dec_label_pc_105e8 ], [ 1, %bb63 ]
  %v0_105fc = load i32, i32* @sb, align 4
  store i32 %v0_105fc, i32* %r0.global-to-local, align 4
  %v1_10600 = call i32 @function_10184(i32 %v0_105fc)
  store i32 %v1_10600, i32* %r0.global-to-local, align 4
  %v2_10604 = icmp eq i32 %v1_10600, 0
  %v0_10464.pre = load i32, i32* @sb, align 4
  br i1 %v2_10604, label %.loopexit, label %dec_label_pc_1060c

dec_label_pc_1060c:                               ; preds = %dec_label_pc_105fc
  %v1_1060c = add i32 %v0_10464.pre, 4
  %v2_1060c = inttoptr i32 %v1_1060c to i32*
  %v3_1060c = load i32, i32* %v2_1060c, align 4
  store i32 %v1_10434, i32* %r0.global-to-local, align 4
  %v1_10614 = and i32 %v3_1060c, -2
  store i32 %v1_10614, i32* %r2.global-to-local, align 4
  %v2_10618 = add i32 %v1_10614, %v1_10434
  store i32 %v2_10618, i32* %r3.global-to-local, align 4
  %tmp82 = icmp ult i32 %v2_10618, 163841
  br i1 %tmp82, label %dec_label_pc_10638, label %dec_label_pc_10624

dec_label_pc_10624:                               ; preds = %dec_label_pc_1060c
  %v2_10624 = xor i32 %v2_10618, %v1_10614
  store i32 %v2_10624, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-44.5, i32* %r1.global-to-local, align 4
  %v3_1062c = icmp ult i32 %v1_10614, %v2_10624
  br i1 %v3_1062c, label %bb64, label %dec_label_pc_10638

bb64:                                             ; preds = %dec_label_pc_10624
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10638

dec_label_pc_10638:                               ; preds = %dec_label_pc_10624, %bb64, %dec_label_pc_1060c
  %stack_var_-44.6 = phi i32 [ %stack_var_-44.5, %dec_label_pc_1060c ], [ %stack_var_-44.5, %dec_label_pc_10624 ], [ 1, %bb64 ]
  %v2_10638 = add i32 %v1_10614, %v0_10464.pre
  store i32 %v2_10638, i32* @sb, align 4
  %v0_1063c = load i32, i32* @fp, align 4
  %v2_1063c = add i32 %v0_1063c, %v1_10614
  store i32 %v2_1063c, i32* @fp, align 4
  %v1_10640 = add i32 %v2_10638, 4
  %v2_10640 = inttoptr i32 %v1_10640 to i32*
  %v3_10640 = load i32, i32* %v2_10640, align 4
  store i32 %v3_10640, i32* %r3.global-to-local, align 4
  %v0_10644 = load i32, i32* @r8, align 4
  %v1_10644 = inttoptr i32 %v0_10644 to i32*
  %v2_10644 = load i32, i32* %v1_10644, align 4
  store i32 %v2_10644, i32* %r2.global-to-local, align 4
  %v2_10648 = and i32 %v2_10644, %v3_10640
  store i32 %v2_10648, i32* %r3.global-to-local, align 4
  %v1_1064c = urem i32 %v2_10648, 2
  %v2_1064c = icmp eq i32 %v1_1064c, 0
  br i1 %v2_1064c, label %dec_label_pc_105b0, label %dec_label_pc_10478

dec_label_pc_10658:                               ; preds = %dec_label_pc_104fc
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r2.global-to-local, align 4
  %v2_1065c = load i32, i32* @global_var_1f0f0.358, align 4
  %v5_1065c = load i32, i32* @global_var_1f0f4.360, align 4
  store i32 %v5_1065c, i32* %r4.global-to-local, align 4
  %v1_10660 = load i32, i32* @sl, align 4
  %v6_10660 = lshr i32 %v2_1065c, %v1_10660
  %v1_10664 = sub i32 32, %v1_10660
  %v7_10668 = shl i32 %v5_1065c, %v1_10664
  %v8_10668 = or i32 %v7_10668, %v6_10660
  store i32 %v8_10668, i32* %r3.global-to-local, align 4
  %v1_1066c = add i32 %v1_10660, -32
  store i32 %v1_1066c, i32* %r1.global-to-local, align 4
  %v6_1066c = icmp slt i32 %v1_1066c, 0
  br i1 %v6_1066c, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_10658
  %v7_10670 = lshr i32 %v5_1065c, %v1_1066c
  store i32 %v7_10670, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_10658, %bb65
  %v0_10674 = phi i32 [ %v8_10668, %dec_label_pc_10658 ], [ %v7_10670, %bb65 ]
  %v1_10674 = urem i32 %v0_10674, 2
  store i32 %v1_10674, i32* %r0.global-to-local, align 4
  %v2_10674 = icmp eq i32 %v1_10674, 0
  br i1 %v2_10674, label %dec_label_pc_1067c, label %dec_label_pc_106d8

dec_label_pc_1067c:                               ; preds = %bb66
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_10680 = icmp eq i32 %v1_1066c, 0
  store i1 %v2_10680, i1* @cpsr_z, align 1
  %v7_10684 = lshr i32 1, %v1_10664
  store i32 %v7_10684, i32* %r4.global-to-local, align 4
  %v6_10688 = shl i32 1, %v1_10660
  store i32 %v6_10688, i32* %r3.global-to-local, align 4
  br i1 %v6_1066c, label %bb68, label %bb67

bb67:                                             ; preds = %dec_label_pc_1067c
  %v9_1068c = shl i32 1, %v1_1066c
  store i32 %v9_1068c, i32* %r4.global-to-local, align 4
  br label %bb68

bb68:                                             ; preds = %dec_label_pc_1067c, %bb67
  %v0_10694 = phi i32 [ %v7_10684, %dec_label_pc_1067c ], [ %v9_1068c, %bb67 ]
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* @r7, align 4
  store i32 %v6_10688, i32* %r5.global-to-local, align 4
  store i32 %v2_1065c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r2.global-to-local, align 4
  %v2_106a873 = or i32 %v2_1065c, %v6_10688
  store i32 %v2_106a873, i32* %r1.global-to-local, align 4
  %v4_106ac74 = call i32 @function_128c8(i32 %v2_1065c, i32 %v2_106a873, i32* nonnull @global_var_1f0f0.358)
  store i32 %v4_106ac74, i32* %r0.global-to-local, align 4
  %v2_106b076 = icmp eq i32 %v4_106ac74, 0
  store i1 %v2_106b076, i1* @cpsr_z, align 1
  br i1 %v2_106b076, label %dec_label_pc_106b8, label %dec_label_pc_106a0.dec_label_pc_106a0_crit_edge

dec_label_pc_106a0.dec_label_pc_106a0_crit_edge:  ; preds = %bb68, %dec_label_pc_106a0.dec_label_pc_106a0_crit_edge
  %v2_106a0.pre = load i32, i32* @global_var_1f0f0.358, align 4
  %v1_106a8.pre = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_106a0.pre, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r2.global-to-local, align 4
  %v2_106a8 = or i32 %v2_106a0.pre, %v1_106a8.pre
  store i32 %v2_106a8, i32* %r1.global-to-local, align 4
  %v4_106ac = call i32 @function_128c8(i32 %v2_106a0.pre, i32 %v2_106a8, i32* nonnull @global_var_1f0f0.358)
  store i32 %v4_106ac, i32* %r0.global-to-local, align 4
  %v2_106b0 = icmp eq i32 %v4_106ac, 0
  store i1 %v2_106b0, i1* @cpsr_z, align 1
  br i1 %v2_106b0, label %dec_label_pc_106b8, label %dec_label_pc_106a0.dec_label_pc_106a0_crit_edge

dec_label_pc_106b8:                               ; preds = %dec_label_pc_106a0.dec_label_pc_106a0_crit_edge, %bb68
  store i32 ptrtoint (i32* @global_var_1f0f4.360 to i32), i32* %r5.global-to-local, align 4
  store i32 %v0_10694, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_106c0

dec_label_pc_106c0:                               ; preds = %dec_label_pc_106c0.dec_label_pc_106c0_crit_edge, %dec_label_pc_106b8
  %v1_106c8 = phi i32 [ %v1_106c8.pre, %dec_label_pc_106c0.dec_label_pc_106c0_crit_edge ], [ %v0_10694, %dec_label_pc_106b8 ]
  %v2_106c0 = load i32, i32* @global_var_1f0f4.360, align 4
  store i32 %v2_106c0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0f4.360 to i32), i32* %r2.global-to-local, align 4
  %v2_106c8 = or i32 %v2_106c0, %v1_106c8
  store i32 %v2_106c8, i32* %r1.global-to-local, align 4
  %v4_106cc = call i32 @function_128c8(i32 %v2_106c0, i32 %v2_106c8, i32* nonnull @global_var_1f0f4.360)
  store i32 %v4_106cc, i32* %r0.global-to-local, align 4
  %v2_106d0 = icmp eq i32 %v4_106cc, 0
  store i1 %v2_106d0, i1* @cpsr_z, align 1
  br i1 %v2_106d0, label %dec_label_pc_106d8.loopexit, label %dec_label_pc_106c0.dec_label_pc_106c0_crit_edge

dec_label_pc_106c0.dec_label_pc_106c0_crit_edge:  ; preds = %dec_label_pc_106c0
  %v1_106c8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_106c0

dec_label_pc_106d8.loopexit:                      ; preds = %dec_label_pc_106c0
  %v1_106dc.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_106d8

dec_label_pc_106d8:                               ; preds = %dec_label_pc_106d8.loopexit, %bb66
  %v1_106dc = phi i32 [ %v1_106dc.pre, %dec_label_pc_106d8.loopexit ], [ %v0_10500, %bb66 ]
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* @r0, align 4
  %v0_106dc = load i32, i32* @fp, align 4
  %v2_106dc = inttoptr i32 %v1_106dc to i32*
  store i32 %v0_106dc, i32* %v2_106dc, align 4
  %v0_106e0 = load i32, i32* @fp, align 4
  %v1_106e0 = load i32, i32* @r8, align 4
  %v2_106e0 = add i32 %v1_106e0, 4
  %v3_106e0 = inttoptr i32 %v2_106e0 to i32*
  store i32 %v0_106e0, i32* %v3_106e0, align 4
  %v3_106e4 = load i32, i32* @global_var_1f4f8.366, align 4
  store i32 %v3_106e4, i32* %r3.global-to-local, align 4
  %v2_106e8 = icmp eq i32 %v3_106e4, 0
  store i1 %v2_106e8, i1* @cpsr_z, align 1
  %v0_106ec = load i32, i32* @r0, align 4
  store i32 %v0_106ec, i32* %r4.global-to-local, align 4
  br i1 %v2_106e8, label %dec_label_pc_10740, label %dec_label_pc_106f4

dec_label_pc_106f4:                               ; preds = %dec_label_pc_106d8
  %v0_106f4 = call i32 @function_12874()
  store i32 %v0_106f4, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_106fc = add i32 %v0_106f4, 1032
  %v3_106fc = inttoptr i32 %v2_106fc to i32*
  store i32 0, i32* %v3_106fc, align 4
  %v0_10700 = call i32 @function_12874()
  store i32 %v0_10700, i32* %r0.global-to-local, align 4
  %v1_10704 = add i32 %v0_10700, 1036
  %v2_10704 = inttoptr i32 %v1_10704 to i32*
  %v3_10704 = load i32, i32* %v2_10704, align 4
  store i32 %v3_10704, i32* %r3.global-to-local, align 4
  %v2_10708 = icmp eq i32 %v3_10704, 0
  br i1 %v2_10708, label %dec_label_pc_10740, label %dec_label_pc_10710

dec_label_pc_10710:                               ; preds = %dec_label_pc_106f4
  %v1_10714 = add i32 %v0_10700, 1032
  store i32 %v1_10714, i32* %r0.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1072c = icmp eq i32 %v1_10714, -38
  br i1 %v4_1072c, label %dec_label_pc_10730, label %dec_label_pc_10740

dec_label_pc_10730:                               ; preds = %dec_label_pc_10710
  store i32 ptrtoint (i32* @global_var_1f4f8.366 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10740

dec_label_pc_10740:                               ; preds = %dec_label_pc_10710, %dec_label_pc_10730, %dec_label_pc_106f4, %dec_label_pc_106d8
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r2.global-to-local, align 4
  %v3_10748 = mul i32 %v1_104d4, 16
  %v2_1074c = add i32 %v3_10748, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  store i32 %v2_1074c, i32* %r3.global-to-local, align 4
  %v1_10750 = add i32 %v3_10748, add (i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32 -8)
  store i32 %v1_10750, i32* %r1.global-to-local, align 4
  %v1_10754 = load i32, i32* @r8, align 4
  %v2_10754 = add i32 %v1_10754, 8
  %v3_10754 = inttoptr i32 %v2_10754 to i32*
  store i32 %v1_10750, i32* %v3_10754, align 4
  %v0_10758 = load i32, i32* %r3.global-to-local, align 4
  %v1_10758 = add i32 %v0_10758, 4
  %v2_10758 = inttoptr i32 %v1_10758 to i32*
  %v3_10758 = load i32, i32* %v2_10758, align 4
  store i32 %v3_10758, i32* %r2.global-to-local, align 4
  %v1_1075c = load i32, i32* @r8, align 4
  %v2_1075c = add i32 %v1_1075c, 12
  %v3_1075c = inttoptr i32 %v2_1075c to i32*
  store i32 %v3_10758, i32* %v3_1075c, align 4
  %v0_10760 = load i32, i32* @r8, align 4
  %v1_10760 = load i32, i32* %r1.global-to-local, align 4
  %v2_10760 = add i32 %v1_10760, 12
  %v3_10760 = inttoptr i32 %v2_10760 to i32*
  store i32 %v0_10760, i32* %v3_10760, align 4
  store i32 %stack_var_-44.3, i32* @r0, align 4
  %v0_10768 = load i32, i32* @r8, align 4
  %v1_10768 = add i32 %v0_10768, 12
  %v2_10768 = inttoptr i32 %v1_10768 to i32*
  %v3_10768 = load i32, i32* %v2_10768, align 4
  store i32 %v3_10768, i32* %r3.global-to-local, align 4
  %v2_1076c = icmp eq i32 %stack_var_-44.3, 0
  %v2_10770 = add i32 %v3_10768, 8
  %v3_10770 = inttoptr i32 %v2_10770 to i32*
  store i32 %v0_10768, i32* %v3_10770, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* @r4, align 4
  br i1 %v2_1076c, label %dec_label_pc_1077c, label %dec_label_pc_108d4

dec_label_pc_1077c:                               ; preds = %dec_label_pc_10740, %dec_label_pc_108d4
  %v1_10788 = phi i32 [ ptrtoint (i32* @global_var_1f0f0.358 to i32), %dec_label_pc_10740 ], [ %v1_10780.pre, %dec_label_pc_108d4 ]
  %v0_1077c = load i32, i32* @r6, align 4
  %v1_1077c = add i32 %v0_1077c, 8
  store i32 %v1_1077c, i32* %r2.global-to-local, align 4
  %v2_10780 = add i32 %v1_1077c, %v1_10788
  %v3_10780 = inttoptr i32 %v2_10780 to i32*
  %v4_10780 = load i32, i32* %v3_10780, align 4
  store i32 %v4_10780, i32* @r3, align 4
  %v2_10784 = icmp eq i32 %v4_10780, 0
  store i1 %v2_10784, i1* @cpsr_z, align 1
  store i32 %v2_10780, i32* %r5.global-to-local, align 4
  br i1 %v2_10784, label %dec_label_pc_1077c.dec_label_pc_107d8_crit_edge, label %dec_label_pc_10790

dec_label_pc_1077c.dec_label_pc_107d8_crit_edge:  ; preds = %dec_label_pc_1077c
  %v1_107e0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_107d8

dec_label_pc_10790:                               ; preds = %dec_label_pc_1077c
  %v0_10790 = call i32 @function_12874()
  store i32 %v0_10790, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10798 = load i32, i32* %r2.global-to-local, align 4
  %v2_10798 = load i32, i32* @r4, align 4
  %v3_10798 = add i32 %v2_10798, %v1_10798
  %v4_10798 = inttoptr i32 %v3_10798 to i32*
  store i32 0, i32* %v4_10798, align 4
  %v0_1079c = call i32 @function_12874()
  store i32 %v0_1079c, i32* %r0.global-to-local, align 4
  %v0_107a0 = load i32, i32* @r6, align 4
  %v1_107a0 = add i32 %v0_107a0, 12
  store i32 %v1_107a0, i32* @r3, align 4
  %v1_107a4 = load i32, i32* @r4, align 4
  %v2_107a4 = add i32 %v1_107a4, %v1_107a0
  %v3_107a4 = inttoptr i32 %v2_107a4 to i32*
  %v4_107a4 = load i32, i32* %v3_107a4, align 4
  store i32 %v4_107a4, i32* %r2.global-to-local, align 4
  %v2_107a8 = icmp eq i32 %v4_107a4, 0
  br i1 %v2_107a8, label %dec_label_pc_107d8, label %dec_label_pc_107b0

dec_label_pc_107b0:                               ; preds = %dec_label_pc_10790
  %v0_107b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_107b4, i32* %r0.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_107c8 = icmp eq i32 %v0_107b4, -38
  br i1 %v4_107c8, label %dec_label_pc_107cc, label %dec_label_pc_107d8

dec_label_pc_107cc:                               ; preds = %dec_label_pc_107b0
  store i32 -38, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_107d8

dec_label_pc_107d8:                               ; preds = %dec_label_pc_1077c.dec_label_pc_107d8_crit_edge, %dec_label_pc_107b0, %dec_label_pc_107cc, %dec_label_pc_10790, %dec_label_pc_10414, %bb70
  %v1_107e0 = phi i32 [ %v1_107e0.pre, %dec_label_pc_1077c.dec_label_pc_107d8_crit_edge ], [ %v0_107b4, %dec_label_pc_107b0 ], [ -38, %dec_label_pc_107cc ], [ %v0_1079c, %dec_label_pc_10790 ], [ 0, %dec_label_pc_10414 ], [ %v1_1088c, %bb70 ]
  store i32 %v3_10414, i32* @r4, align 4
  store i32 %v6_10414, i32* @r5, align 4
  store i32 %v9_10414, i32* @r6, align 4
  store i32 %v12_10414, i32* @r7, align 4
  store i32 %v15_10414, i32* @r8, align 4
  store i32 %v18_10414, i32* @sb, align 4
  store i32 %v21_10414, i32* @sl, align 4
  store i32 %v24_10414, i32* @fp, align 4
  ret i32 %v1_107e0

dec_label_pc_107ec:                               ; preds = %dec_label_pc_10830
  %v0_107f0 = load i32, i32* @r6, align 4
  store i32 1, i32* @r2, align 4
  %v2_107f8 = add i32 %v0_107f0, add (i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32 12)
  store i32 %v2_107f8, i32* %r1.global-to-local, align 4
  %v0_107fc = load i32, i32* @r5, align 4
  store i32 %v0_107fc, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v2_10804 = inttoptr i32 %v0_107fc to i32*
  %v3_10804 = call i32 @function_12424(i32* %v2_10804, i32 %v2_107f8)
  store i32 %v3_10804, i32* %r0.global-to-local, align 4
  %v0_1080c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10808

dec_label_pc_10808:                               ; preds = %dec_label_pc_104b0, %dec_label_pc_107ec
  %v0_1080c = phi i32 [ %v0_1080c.pre, %dec_label_pc_107ec ], [ %v3_104b8, %dec_label_pc_104b0 ]
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r0.global-to-local, align 4
  %v1_1080c = add i32 %v0_1080c, 8
  store i32 %v1_1080c, i32* %r3.global-to-local, align 4
  %v2_10810 = add i32 %v0_1080c, add (i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32 8)
  store i32 %v2_10810, i32* @r7, align 4
  br label %dec_label_pc_10814

dec_label_pc_10814:                               ; preds = %dec_label_pc_10814.dec_label_pc_10814_crit_edge, %dec_label_pc_10808
  %v0_10814 = phi i32 [ %v0_10814.pre, %dec_label_pc_10814.dec_label_pc_10814_crit_edge ], [ %v2_10810, %dec_label_pc_10808 ]
  %v1_10814 = inttoptr i32 %v0_10814 to i32*
  %v2_10814 = load i32, i32* %v1_10814, align 4
  store i32 %v2_10814, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_10814, i32* %r0.global-to-local, align 4
  store i32 %v0_10814, i32* %r2.global-to-local, align 4
  %v4_10824 = call i32 @function_128c8(i32 %v2_10814, i32 1, i32* %v1_10814)
  store i32 %v4_10824, i32* %r0.global-to-local, align 4
  %v2_10828 = icmp eq i32 %v4_10824, 0
  store i1 %v2_10828, i1* @cpsr_z, align 1
  br i1 %v2_10828, label %dec_label_pc_10830, label %dec_label_pc_10814.dec_label_pc_10814_crit_edge

dec_label_pc_10814.dec_label_pc_10814_crit_edge:  ; preds = %dec_label_pc_10814
  %v0_10814.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10814

dec_label_pc_10830:                               ; preds = %dec_label_pc_10814
  %v0_107e4 = load i32, i32* @r4, align 4
  %v2_107e4 = icmp eq i32 %v0_107e4, 0
  br i1 %v2_107e4, label %dec_label_pc_104d0.loopexit, label %dec_label_pc_107ec

dec_label_pc_10834:                               ; preds = %dec_label_pc_10834, %dec_label_pc_1086c, %dec_label_pc_104ec
  %v3_10838 = load i32, i32* @global_var_1f4f8.366, align 4
  store i32 %v3_10838, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f4f8.366 to i32), i32* %r2.global-to-local, align 4
  store i32 %v3_10838, i32* %r0.global-to-local, align 4
  %v4_10848 = call i32 @function_128c8(i32 %v3_10838, i32 1, i32* nonnull @global_var_1f4f8.366)
  %v2_1084c = icmp eq i32 %v4_10848, 0
  store i1 %v2_1084c, i1* @cpsr_z, align 1
  store i32 ptrtoint (i32* @global_var_1f4f8.366 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* @r2, align 4
  store i32 1, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_1f4fc.370 to i32), i32* %r1.global-to-local, align 4
  br i1 %v2_1084c, label %dec_label_pc_10864, label %dec_label_pc_10834

dec_label_pc_10864:                               ; preds = %dec_label_pc_10834
  %v0_10864 = load i32, i32* @r4, align 4
  %v2_10864 = icmp eq i32 %v0_10864, 0
  br i1 %v2_10864, label %dec_label_pc_104fc, label %dec_label_pc_1086c

dec_label_pc_1086c:                               ; preds = %dec_label_pc_10864
  %v3_1086c = call i32 @function_12424(i32* nonnull @global_var_1f4f8.366, i32 ptrtoint (i32* @global_var_1f4fc.370 to i32))
  store i32 %v3_1086c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10834

dec_label_pc_10874:                               ; preds = %dec_label_pc_10424
  %v2_10874 = inttoptr i32 %v1_10424 to i32*
  %v3_10874 = load i32, i32* %v2_10874, align 4
  store i32 %v3_10874, i32* %r0.global-to-local, align 4
  %v1_10878 = and i32 %v3_10428, -2
  %v1_1087c = urem i32 %v3_10874, 2
  %v2_1087c = icmp eq i32 %v1_1087c, 0
  %v2_10880 = add i32 %v3_10874, %v1_10878
  store i32 %v2_10880, i32* @r1, align 4
  br i1 %v2_1087c, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_10874
  call void @llvm.trap()
  unreachable

bb70:                                             ; preds = %dec_label_pc_10874
  %v2_10888 = sub i32 %v1_10424, %v3_10874
  store i32 %v2_10888, i32* %r0.global-to-local, align 4
  %v1_1088c = call i32 @function_11388(i32 %v2_10888)
  store i32 %v1_1088c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_107d8

dec_label_pc_10894:                               ; preds = %dec_label_pc_104d0
  store i32 %v1_104d4, i32* %r0.global-to-local, align 4
  %v3_10898 = mul i32 %v1_104d4, 16
  %v2_1089c = add i32 %v3_10898, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  store i32 %v2_1089c, i32* %r3.global-to-local, align 4
  %v1_108a0 = add i32 %v3_10898, add (i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32 -8)
  store i32 %v1_108a0, i32* %r2.global-to-local, align 4
  store i32 %v1_108a0, i32* %v6_104d8, align 4
  %v0_108a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_108a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_108a8 = add i32 %v1_108a8, 4
  %v3_108a8 = inttoptr i32 %v2_108a8 to i32*
  store i32 %v0_108a8, i32* %v3_108a8, align 4
  br label %dec_label_pc_104ec

dec_label_pc_108b0:                               ; preds = %dec_label_pc_1053c
  store i32 ptrtoint (i32* @global_var_1f4f8.366 to i32), i32* @r0, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1055c

dec_label_pc_108c4:                               ; preds = %dec_label_pc_10594
  store i32 %v0_10598, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_105b0.preheader

dec_label_pc_108d4:                               ; preds = %dec_label_pc_10740
  %v0_108d4 = load i32, i32* @r8, align 4
  %v0_108d8 = load i32, i32* @sb, align 4
  %v1_108d8 = add i32 %v0_108d8, -16
  %v1_108dc = add i32 %v0_108d4, 4111
  %v1_108e8 = and i32 %v1_108dc, -4096
  store i32 %v1_108e8, i32* @r0, align 4
  %v1_108ec = and i32 %v1_108d8, -4096
  %v2_108f0 = sub i32 %v1_108ec, %v1_108e8
  store i32 %v2_108f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* @r2, align 4
  %v4_108f8 = call i32 @function_11270(i32 %v1_108e8, i32 %v2_108f0, i32 4, i32 %v3_10768)
  store i32 %v4_108f8, i32* @r0, align 4
  %v1_10780.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1077c

; uselistorder directives
  uselistorder i32 %v3_10898, { 1, 0 }
  uselistorder i32 %v1_1088c, { 1, 0 }
  uselistorder i32 %v3_10874, { 2, 1, 0, 3 }
  uselistorder i32 %v0_10814, { 1, 0 }
  uselistorder i32 %v0_1080c, { 1, 0 }
  uselistorder i32 %v3_10768, { 1, 0, 2 }
  uselistorder i32 %v3_10748, { 1, 0 }
  uselistorder i32 %v2_106c0, { 1, 0, 2 }
  uselistorder i32 %v2_106a0.pre, { 0, 2, 1 }
  uselistorder i32 %v7_10684, { 1, 0 }
  uselistorder i32 %v1_10674, { 1, 0 }
  uselistorder i32 %v1_1066c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_10644, { 1, 0 }
  uselistorder i32 %v2_1063c, { 1, 0 }
  uselistorder i32 %v2_10638, { 1, 2, 0 }
  uselistorder i32 %v2_10618, { 1, 0, 2 }
  uselistorder i32 %v1_10614, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_10464.pre, { 1, 2, 0 }
  uselistorder i32 %stack_var_-44.5, { 1, 2, 3, 0 }
  uselistorder i32 %v2_105d8, { 1, 0, 2 }
  uselistorder i32 %v1_105d4, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_105b0, { 1, 0 }
  uselistorder i32 %v0_10598, { 1, 0, 2 }
  uselistorder i32 %v1_10508, { 1, 0 }
  uselistorder i32 %v1_104d4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_104b8, { 2, 1, 0 }
  uselistorder i32 %v0_104b8, { 1, 0 }
  uselistorder i32 %v3_104a8, { 1, 0 }
  uselistorder i32 %v4_10490, { 1, 0, 2 }
  uselistorder i32 %v0_10484, { 1, 0 }
  uselistorder i32 %stack_var_-44.2, { 1, 0 }
  uselistorder i32 %v2_10438, { 1, 0, 2 }
  uselistorder i32 %v1_10434, { 0, 4, 1, 5, 3, 2, 6 }
  uselistorder i32 %v1_1042c, { 1, 0 }
  uselistorder i32 %v3_10428, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_10424, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_10418, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21, 23, 24, 25, 22, 26, 27, 28, 29, 30 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 38, 7, 8, 10, 9, 11, 18, 14, 15, 13, 12, 17, 16, 19, 20, 21, 22, 24, 23, 28, 25, 3, 2, 26, 27, 4, 29, 30, 33, 32, 31, 34, 35, 36, 37, 0, 1 }
  uselistorder i32 1032, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_10834, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10808, { 1, 0 }
  uselistorder label %dec_label_pc_107d8, { 5, 2, 1, 3, 0, 4 }
  uselistorder label %dec_label_pc_1077c, { 1, 0 }
  uselistorder label %dec_label_pc_10740, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_106a0.dec_label_pc_106a0_crit_edge, { 1, 0 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %dec_label_pc_10638, { 1, 0, 2 }
  uselistorder label %dec_label_pc_105fc, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_105b0, { 1, 0 }
  uselistorder label %dec_label_pc_105b0.preheader, { 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1055c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_104ec, { 1, 0 }
  uselistorder label %dec_label_pc_104b0, { 2, 0, 1 }
  uselistorder label %bb62, { 1, 0 }
}

define i32 @function_10910() local_unnamed_addr {
dec_label_pc_10910:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_10910 = load i32, i32* @r4, align 4
  %v6_10910 = load i32, i32* @r5, align 4
  %v9_10910 = load i32, i32* @r6, align 4
  %v12_10910 = load i32, i32* @r7, align 4
  %v15_10910 = load i32, i32* @r8, align 4
  %v18_10910 = load i32, i32* @sb, align 4
  %v21_10910 = load i32, i32* @sl, align 4
  %v24_10910 = load i32, i32* @fp, align 4
  store i32 2147479535, i32* %r3.global-to-local, align 4
  %v0_1091c = load i32, i32* @r0, align 4
  %v1_1091c = add i32 %v0_1091c, -1
  store i32 %v1_1091c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v1_1091c, 2147479536
  br i1 %tmp, label %dec_label_pc_10cbc, label %dec_label_pc_1092c

dec_label_pc_1092c:                               ; preds = %dec_label_pc_10910
  %v2_1092c = icmp eq i32 %v0_1091c, 0
  br i1 %v2_1092c, label %.thread, label %dec_label_pc_10f94

.thread:                                          ; preds = %dec_label_pc_1092c
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_10940

dec_label_pc_10940:                               ; preds = %.thread43, %.thread, %dec_label_pc_10ce4
  %v1_10958 = phi i32 [ %v1_10cf4, %dec_label_pc_10ce4 ], [ 0, %.thread ], [ %v1_10cd4, %.thread43 ]
  %v0_10d00 = phi i32 [ %v1_10cc0, %dec_label_pc_10ce4 ], [ 16, %.thread ], [ %v1_10cc0, %.thread43 ]
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_10944 = sub nsw i32 32, %v1_10958
  store i32 %v1_10944, i32* %r1.global-to-local, align 4
  %v7_1094c = lshr i32 1, %v1_10944
  store i32 %v7_1094c, i32* %r4.global-to-local, align 4
  %v1_10950 = add nsw i32 %v1_10958, -32
  store i32 %v1_10950, i32* %r0.global-to-local, align 4
  %v6_10950 = icmp slt i32 %v1_10958, 32
  br i1 %v6_10950, label %bb64, label %bb

bb:                                               ; preds = %dec_label_pc_10940
  %v7_10954 = shl i32 1, %v1_10950
  store i32 %v7_10954, i32* %r4.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_10940, %bb
  %v0_10960 = phi i32 [ %v7_1094c, %dec_label_pc_10940 ], [ %v7_10954, %bb ]
  %v1_1095c = shl i32 -1, %v1_10958
  %v6_10960 = sub i32 -1, %v0_10960
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* @sl, align 4
  store i32 ptrtoint (i8** @global_var_1f6e8.330 to i32), i32* @fp, align 4
  %v2_1097470 = load i32, i32* @global_var_1f0f0.358, align 4
  %v5_1097471 = load i32, i32* @global_var_1f0f4.360, align 4
  store i32 %v5_1097471, i32* @r4, align 4
  %v2_1098072 = and i32 %v2_1097470, %v1_1095c
  store i32 %v2_1098072, i32* %r1.global-to-local, align 4
  %v2_1098473 = and i32 %v5_1097471, %v6_10960
  store i32 %v2_1098473, i32* %r2.global-to-local, align 4
  %v2_1098874 = or i32 %v2_1098473, %v2_1098072
  store i32 %v2_1098874, i32* %r3.global-to-local, align 4
  %v4_1098876 = icmp eq i32 %v2_1098874, 0
  br i1 %v4_1098876, label %dec_label_pc_10abc, label %dec_label_pc_10990.preheader

dec_label_pc_10974.loopexit:                      ; preds = %dec_label_pc_10a40, %dec_label_pc_10a58, %dec_label_pc_10a78
  %v2_10974 = load i32, i32* @global_var_1f0f0.358, align 4
  %v5_10974 = load i32, i32* @global_var_1f0f4.360, align 4
  store i32 %v5_10974, i32* @r4, align 4
  %v2_10980 = and i32 %v2_10974, %v1_1095c
  store i32 %v2_10980, i32* %r1.global-to-local, align 4
  %v2_10984 = and i32 %v5_10974, %v6_10960
  store i32 %v2_10984, i32* %r2.global-to-local, align 4
  %v2_10988 = or i32 %v2_10984, %v2_10980
  store i32 %v2_10988, i32* %r3.global-to-local, align 4
  %v4_10988 = icmp eq i32 %v2_10988, 0
  br i1 %v4_10988, label %dec_label_pc_10abc, label %dec_label_pc_10990.preheader

dec_label_pc_10990.preheader:                     ; preds = %bb64, %dec_label_pc_10974.loopexit
  %v2_1098478 = phi i32 [ %v2_10984, %dec_label_pc_10974.loopexit ], [ %v2_1098473, %bb64 ]
  %v2_1098077 = phi i32 [ %v2_10980, %dec_label_pc_10974.loopexit ], [ %v2_1098072, %bb64 ]
  br label %dec_label_pc_10990

dec_label_pc_10990:                               ; preds = %dec_label_pc_10990.preheader, %dec_label_pc_10a94
  %v0_10998 = phi i32 [ %v2_10ab0, %dec_label_pc_10a94 ], [ %v2_1098478, %dec_label_pc_10990.preheader ]
  %v0_10c10 = phi i32 [ %v2_10aac, %dec_label_pc_10a94 ], [ %v2_1098077, %dec_label_pc_10990.preheader ]
  store i32 %v0_10c10, i32* %r3.global-to-local, align 4
  %v2_10990 = icmp eq i32 %v0_10c10, 0
  br i1 %v2_10990, label %dec_label_pc_10998, label %dec_label_pc_10c10

dec_label_pc_10998:                               ; preds = %dec_label_pc_10990
  %v1_10998 = sub i32 0, %v0_10998
  %v2_1099c = and i32 %v0_10998, %v1_10998
  store i32 %v2_1099c, i32* %r0.global-to-local, align 4
  %v3_109ac = mul i32 %v2_1099c, 1088
  store i32 %v3_109ac, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16712.374 to i32), i32* %r2.global-to-local, align 4
  %v2_109e0 = mul i32 %v2_1099c, 124511785
  store i32 %v2_109e0, i32* %r3.global-to-local, align 4
  %v4_109e4 = udiv i32 %v2_109e0, 134217728
  %v5_109e4 = add i32 %v4_109e4, ptrtoint (i32* @global_var_16712.374 to i32)
  %v6_109e4 = inttoptr i32 %v5_109e4 to i8*
  %v7_109e4 = load i8, i8* %v6_109e4, align 1
  %v9_109e4 = zext i8 %v7_109e4 to i32
  store i32 %v9_109e4, i32* %r1.global-to-local, align 4
  %v1_109e8 = add nuw nsw i32 %v9_109e4, 32
  br label %dec_label_pc_109ec

dec_label_pc_109ec:                               ; preds = %dec_label_pc_10c10, %dec_label_pc_10998
  %storemerge = phi i32 [ %v1_109e8, %dec_label_pc_10998 ], [ %v9_10c5c, %dec_label_pc_10c10 ]
  store i32 %storemerge, i32* @r8, align 4
  %v3_109ec = load i32, i32* @global_var_1f6f4.257, align 4
  store i32 %v3_109ec, i32* %r2.global-to-local, align 4
  %v3_109f0 = mul nsw i32 %storemerge, 16
  store i32 %v3_109f0, i32* @r6, align 4
  %v1_109f4 = or i32 %v3_109f0, 8
  store i32 %v1_109f4, i32* %r3.global-to-local, align 4
  %v2_109f8 = icmp eq i32 %v3_109ec, 0
  store i1 %v2_109f8, i1* @cpsr_z, align 1
  %v1_109fc = load i32, i32* @sl, align 4
  %v2_109fc = add i32 %v1_109fc, %v1_109f4
  store i32 %v2_109fc, i32* @r5, align 4
  br i1 %v2_109f8, label %dec_label_pc_10a04, label %dec_label_pc_10be8

dec_label_pc_10a04.loopexit:                      ; preds = %dec_label_pc_10c0c
  %v0_10a04.pre = load i32, i32* @r8, align 4
  %v0_10a08.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_10a04

dec_label_pc_10a04:                               ; preds = %dec_label_pc_10a04.loopexit, %dec_label_pc_109ec
  %v0_10a08 = phi i32 [ %v0_10a08.pre, %dec_label_pc_10a04.loopexit ], [ %v1_109fc, %dec_label_pc_109ec ]
  %v0_10d2c = phi i32 [ %v0_10a04.pre, %dec_label_pc_10a04.loopexit ], [ %storemerge, %dec_label_pc_109ec ]
  %v1_10a04 = add i32 %v0_10d2c, 1
  store i32 %v1_10a04, i32* %r1.global-to-local, align 4
  %v4_10a08 = mul i32 %v1_10a04, 16
  %v5_10a08 = add i32 %v4_10a08, %v0_10a08
  %v6_10a08 = inttoptr i32 %v5_10a08 to i32*
  %v7_10a08 = load i32, i32* %v6_10a08, align 4
  store i32 %v7_10a08, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* @r0, align 4
  %v2_10a10 = icmp eq i32 %v7_10a08, 0
  br i1 %v2_10a10, label %.thread7, label %dec_label_pc_10a2c

.thread7:                                         ; preds = %dec_label_pc_10a04
  %v4_10a14 = mul i32 %v1_10a04, 16
  %v3_10a18 = add i32 %v4_10a14, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  store i32 %v3_10a18, i32* %r3.global-to-local, align 4
  %v2_10a1c = add i32 %v4_10a14, add (i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32 -8)
  store i32 %v2_10a1c, i32* %r2.global-to-local, align 4
  %v7_10a20 = add i32 %v4_10a08, ptrtoint (i32* @global_var_1f0f0.358 to i32)
  %v8_10a20 = inttoptr i32 %v7_10a20 to i32*
  store i32 %v2_10a1c, i32* %v8_10a20, align 4
  %v1_10a24 = load i32, i32* %r2.global-to-local, align 4
  %v2_10a24 = load i32, i32* %r3.global-to-local, align 4
  %v3_10a24 = add i32 %v2_10a24, 4
  %v4_10a24 = inttoptr i32 %v3_10a24 to i32*
  store i32 %v1_10a24, i32* %v4_10a24, align 4
  %v1_10a44.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_10a40

dec_label_pc_10a2c:                               ; preds = %dec_label_pc_10a04
  %v1_10a34 = add i32 %v4_10a08, add (i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32 -8)
  store i32 %v1_10a34, i32* %r3.global-to-local, align 4
  %v9_10a38 = icmp eq i32 %v7_10a08, %v1_10a34
  br i1 %v9_10a38, label %dec_label_pc_10a40, label %dec_label_pc_10d2c

dec_label_pc_10a40:                               ; preds = %.thread7, %dec_label_pc_10a2c
  %v1_10a44 = phi i32 [ %v1_10a44.pre, %.thread7 ], [ %v0_10a08, %dec_label_pc_10a2c ]
  %v0_10a40 = load i32, i32* @r6, align 4
  %v1_10a40 = add i32 %v0_10a40, 8
  store i32 %v1_10a40, i32* %r2.global-to-local, align 4
  %v2_10a44 = add i32 %v1_10a44, %v1_10a40
  %v3_10a44 = inttoptr i32 %v2_10a44 to i32*
  %v4_10a44 = load i32, i32* %v3_10a44, align 4
  store i32 %v4_10a44, i32* %r3.global-to-local, align 4
  %v2_10a48 = icmp eq i32 %v4_10a44, 0
  store i1 %v2_10a48, i1* @cpsr_z, align 1
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_10a44, i32* %r4.global-to-local, align 4
  br i1 %v2_10a48, label %dec_label_pc_10974.loopexit, label %dec_label_pc_10a58

dec_label_pc_10a58:                               ; preds = %dec_label_pc_10a40
  %v0_10a58 = call i32 @function_12874()
  store i32 %v0_10a58, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10a60 = load i32, i32* %r2.global-to-local, align 4
  %v2_10a60 = load i32, i32* %r1.global-to-local, align 4
  %v3_10a60 = add i32 %v2_10a60, %v1_10a60
  %v4_10a60 = inttoptr i32 %v3_10a60 to i32*
  store i32 0, i32* %v4_10a60, align 4
  %v0_10a64 = call i32 @function_12874()
  store i32 %v0_10a64, i32* %r0.global-to-local, align 4
  %v0_10a68 = load i32, i32* @r6, align 4
  %v1_10a68 = add i32 %v0_10a68, 12
  store i32 %v1_10a68, i32* %r3.global-to-local, align 4
  %v1_10a6c = load i32, i32* %r1.global-to-local, align 4
  %v2_10a6c = add i32 %v1_10a6c, %v1_10a68
  %v3_10a6c = inttoptr i32 %v2_10a6c to i32*
  %v4_10a6c = load i32, i32* %v3_10a6c, align 4
  store i32 %v4_10a6c, i32* %r2.global-to-local, align 4
  %v2_10a70 = icmp eq i32 %v4_10a6c, 0
  br i1 %v2_10a70, label %dec_label_pc_10974.loopexit, label %dec_label_pc_10a78

dec_label_pc_10a78:                               ; preds = %dec_label_pc_10a58
  store i32 240, i32* @r7, align 4
  %v0_10a7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10a7c, i32* %r0.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10a90 = icmp eq i32 %v0_10a7c, -38
  br i1 %v4_10a90, label %dec_label_pc_10a94, label %dec_label_pc_10974.loopexit

dec_label_pc_10a94:                               ; preds = %dec_label_pc_10a78
  store i32 -38, i32* %r0.global-to-local, align 4
  %v2_10aa0 = load i32, i32* @global_var_1f0f0.358, align 4
  %v5_10aa0 = load i32, i32* @global_var_1f0f4.360, align 4
  store i32 %v5_10aa0, i32* @r4, align 4
  %v2_10aac = and i32 %v2_10aa0, %v1_1095c
  store i32 %v2_10aac, i32* %r1.global-to-local, align 4
  %v2_10ab0 = and i32 %v5_10aa0, %v6_10960
  store i32 %v2_10ab0, i32* %r2.global-to-local, align 4
  %v2_10ab4 = or i32 %v2_10ab0, %v2_10aac
  store i32 %v2_10ab4, i32* %r3.global-to-local, align 4
  %v4_10ab4 = icmp eq i32 %v2_10ab4, 0
  br i1 %v4_10ab4, label %dec_label_pc_10abc, label %dec_label_pc_10990

dec_label_pc_10abc:                               ; preds = %bb64, %dec_label_pc_10974.loopexit, %dec_label_pc_10a94
  %v3_10abc = load i32, i32* @global_var_1f6f4.257, align 4
  store i32 %v3_10abc, i32* %r3.global-to-local, align 4
  store i32 %v0_10d00, i32* %ip.global-to-local, align 4
  %v2_10ac4 = icmp eq i32 %v3_10abc, 0
  store i1 %v2_10ac4, i1* @cpsr_z, align 1
  %v1_10ac8 = add i32 %v0_10d00, 16
  store i32 %v1_10ac8, i32* %r2.global-to-local, align 4
  store i32 %v1_10ac8, i32* %stack_var_-44, align 4
  store i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), i32* @r6, align 4
  br i1 %v2_10ac4, label %dec_label_pc_10ad8, label %dec_label_pc_10c80

dec_label_pc_10ad8:                               ; preds = %dec_label_pc_10c64, %dec_label_pc_10abc
  %v2_10ad8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_10ad8, i32* %r0.global-to-local, align 4
  %v2_10adc = call i32 @function_13720(i32* nonnull %stack_var_-44)
  store i32 %v2_10adc, i32* @r0, align 4
  store i32 %v2_10adc, i32* %r4.global-to-local, align 4
  %v2_10ae0 = icmp eq i32 %v2_10adc, 0
  br i1 %v2_10ae0, label %dec_label_pc_10e70, label %dec_label_pc_10ae8

dec_label_pc_10ae8:                               ; preds = %dec_label_pc_10ad8
  store i32 ptrtoint (i32* @global_var_1f0e0.378 to i32), i32* @r0, align 4
  %v2_10aec = load i32, i32* @global_var_1f0e0.378, align 4
  store i32 %v2_10aec, i32* %r3.global-to-local, align 4
  %v9_10af0 = icmp eq i32 %v2_10adc, %v2_10aec
  br i1 %v9_10af0, label %dec_label_pc_10b10, label %dec_label_pc_10af8

dec_label_pc_10af8:                               ; preds = %dec_label_pc_10ae8
  %v3_10af8 = load i32, i32* %stack_var_-44, align 4
  %v1_10afc = add i32 %v2_10adc, 16
  store i32 %v1_10afc, i32* %r4.global-to-local, align 4
  %v1_10b00 = add i32 %v3_10af8, -16
  store i32 %v1_10b00, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 %v1_10b00, i32* %stack_var_-44, align 4
  %v2_10b0c = add i32 %v2_10adc, 8
  %v3_10b0c = inttoptr i32 %v2_10b0c to i32*
  store i32 1, i32* %v3_10b0c, align 4
  %v0_10b14.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b10

dec_label_pc_10b10:                               ; preds = %dec_label_pc_10ae8, %dec_label_pc_10af8
  %v0_10b14 = phi i32 [ %v2_10adc, %dec_label_pc_10ae8 ], [ %v0_10b14.pre, %dec_label_pc_10af8 ]
  %v3_10b10 = load i32, i32* %stack_var_-44, align 4
  %v1_10b14 = add i32 %v0_10b14, -8
  store i32 %v1_10b14, i32* @r5, align 4
  %v1_10b18 = or i32 %v3_10b10, 1
  store i32 %v1_10b18, i32* %r1.global-to-local, align 4
  %v2_10b1c = add i32 %v3_10b10, %v0_10b14
  store i32 %v2_10b1c, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r4, align 4
  %v1_10b24 = add i32 %v2_10b1c, -8
  %v2_10b24 = inttoptr i32 %v1_10b24 to i32*
  store i32 %v1_10b18, i32* %v2_10b24, align 4
  %v4_10b24 = add i32 %v2_10b1c, -4
  %v5_10b24 = inttoptr i32 %v4_10b24 to i32*
  %v6_10b24 = load i32, i32* @r4, align 4
  store i32 %v6_10b24, i32* %v5_10b24, align 4
  %v0_10b28 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b28 = load i32, i32* @r5, align 4
  %v2_10b28 = add i32 %v1_10b28, 4
  %v3_10b28 = inttoptr i32 %v2_10b28 to i32*
  store i32 %v0_10b28, i32* %v3_10b28, align 4
  %v2_10b2c = load i32, i32* @global_var_1f0e4.376, align 4
  store i32 %v2_10b2c, i32* %r2.global-to-local, align 4
  %v2_10b30 = icmp eq i32 %v2_10b2c, 0
  store i1 %v2_10b30, i1* @cpsr_z, align 1
  %v0_10b34 = load i32, i32* %r3.global-to-local, align 4
  %v1_10b34 = load i32, i32* @r0, align 4
  %v2_10b34 = inttoptr i32 %v1_10b34 to i32*
  store i32 %v0_10b34, i32* %v2_10b34, align 4
  br i1 %v2_10b30, label %dec_label_pc_10b58, label %dec_label_pc_10b3c

dec_label_pc_10b3c:                               ; preds = %dec_label_pc_10b10
  %v0_10b3c = call i32 @function_12874()
  store i32 %v0_10b3c, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10b44 = load i32, i32* @r6, align 4
  %v2_10b44 = inttoptr i32 %v1_10b44 to i32*
  store i32 0, i32* %v2_10b44, align 4
  %v0_10b48 = call i32 @function_12874()
  store i32 %v0_10b48, i32* %r0.global-to-local, align 4
  %v3_10b4c = load i32, i32* @global_var_1f0e8.379, align 4
  store i32 %v3_10b4c, i32* %r3.global-to-local, align 4
  %v2_10b50 = icmp eq i32 %v3_10b4c, 0
  br i1 %v2_10b50, label %dec_label_pc_10b58, label %dec_label_pc_10e20

dec_label_pc_10b58:                               ; preds = %dec_label_pc_10b3c, %dec_label_pc_10b10, %dec_label_pc_10e20, %dec_label_pc_10e3c
  %v0_10b58 = load i32, i32* @r5, align 4
  store i32 %v0_10b58, i32* %r0.global-to-local, align 4
  %v1_10b5c = inttoptr i32 %v0_10b58 to i32*
  %v2_10b5c = call i32 @function_fef4(i32* %v1_10b5c)
  store i32 %v2_10b5c, i32* %r0.global-to-local, align 4
  %v2_10b60 = icmp eq i32 %v2_10b5c, 0
  %v1_10b64 = load i32, i32* @r5, align 4
  br i1 %v2_10b60, label %bb65, label %dec_label_pc_10b6c

bb65:                                             ; preds = %dec_label_pc_10b58
  store i32 %v1_10b64, i32* @r8, align 4
  br label %dec_label_pc_10b9c

dec_label_pc_10b6c:                               ; preds = %dec_label_pc_10b58
  %v1_10b6c = inttoptr i32 %v1_10b64 to i32*
  %v2_10b6c = load i32, i32* %v1_10b6c, align 4
  %v1_10b70 = and i32 %v2_10b6c, -2
  %v2_10b74 = sub i32 %v1_10b64, %v1_10b70
  store i32 %v2_10b74, i32* %r3.global-to-local, align 4
  %v1_10b78 = add i32 %v2_10b74, 4
  %v2_10b78 = inttoptr i32 %v1_10b78 to i32*
  %v3_10b78 = load i32, i32* %v2_10b78, align 4
  store i32 %v3_10b78, i32* %r1.global-to-local, align 4
  %v1_10b7c = add i32 %v1_10b64, 4
  %v2_10b7c = inttoptr i32 %v1_10b7c to i32*
  %v3_10b7c = load i32, i32* %v2_10b7c, align 4
  store i32 %v3_10b7c, i32* %r2.global-to-local, align 4
  %v1_10b80 = and i32 %v3_10b78, -2
  %v2_10b84 = add i32 %v3_10b7c, %v1_10b80
  store i32 %v2_10b84, i32* %r1.global-to-local, align 4
  store i32 %v2_10b84, i32* %v2_10b78, align 4
  %v0_10b8c = load i32, i32* %r2.global-to-local, align 4
  %v1_10b8c = and i32 %v0_10b8c, -2
  store i32 %v1_10b8c, i32* %r2.global-to-local, align 4
  %v0_10b90 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b90 = load i32, i32* @r5, align 4
  %v3_10b90 = add i32 %v1_10b90, %v1_10b8c
  %v4_10b90 = inttoptr i32 %v3_10b90 to i32*
  store i32 %v0_10b90, i32* %v4_10b90, align 4
  %v0_10b94 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10b94, i32* @r8, align 4
  store i32 %v0_10b94, i32* @r5, align 4
  br label %dec_label_pc_10b9c

dec_label_pc_10b9c:                               ; preds = %bb65, %dec_label_pc_10df4, %dec_label_pc_10dd4, %dec_label_pc_10dbc, %dec_label_pc_10e10, %dec_label_pc_10b6c
  %v0_10b9c = load i32, i32* @r5, align 4
  %v1_10b9c = add i32 %v0_10b9c, 4
  %v2_10b9c = inttoptr i32 %v1_10b9c to i32*
  %v3_10b9c = load i32, i32* %v2_10b9c, align 4
  %v1_10ba0 = and i32 %v3_10b9c, -2
  store i32 %v1_10ba0, i32* %r1.global-to-local, align 4
  store i32 %v0_10d00, i32* @r3, align 4
  %v1_10ba8 = add i32 %v1_10ba0, -16
  store i32 %v1_10ba8, i32* %r2.global-to-local, align 4
  %v3_10bac = icmp ult i32 %v0_10d00, %v1_10ba8
  br i1 %v3_10bac, label %dec_label_pc_10cfc, label %dec_label_pc_10bb4

dec_label_pc_10bb4:                               ; preds = %dec_label_pc_10b9c, %dec_label_pc_10cfc
  %v0_10bb4 = load i32, i32* @r8, align 4
  %v1_10bb4 = add i32 %v0_10bb4, 8
  store i32 %v1_10bb4, i32* @ip, align 4
  br label %dec_label_pc_10bb8

dec_label_pc_10bb8:                               ; preds = %.thread14, %dec_label_pc_10fdc, %dec_label_pc_10f94, %dec_label_pc_10e7c, %dec_label_pc_10bb4
  %v0_10bb8 = load i32, i32* @ip, align 4
  store i32 %v0_10bb8, i32* %r0.global-to-local, align 4
  store i32 %v3_10910, i32* @r4, align 4
  store i32 %v6_10910, i32* @r5, align 4
  store i32 %v9_10910, i32* @r6, align 4
  store i32 %v12_10910, i32* @r7, align 4
  store i32 %v15_10910, i32* @r8, align 4
  store i32 %v18_10910, i32* @sb, align 4
  store i32 %v21_10910, i32* @sl, align 4
  store i32 %v24_10910, i32* @fp, align 4
  ret i32 %v0_10bb8

dec_label_pc_10bd0:                               ; preds = %dec_label_pc_10c0c
  %v0_10bd0 = load i32, i32* @r6, align 4
  %v1_10bd0 = add i32 %v0_10bd0, 12
  store i32 1, i32* @r2, align 4
  %v1_10bd8 = load i32, i32* @sl, align 4
  %v2_10bd8 = add i32 %v1_10bd0, %v1_10bd8
  store i32 %v2_10bd8, i32* %r1.global-to-local, align 4
  %v0_10bdc = load i32, i32* @r5, align 4
  store i32 %v0_10bdc, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v2_10be4 = inttoptr i32 %v0_10bdc to i32*
  %v3_10be4 = call i32 @function_12424(i32* %v2_10be4, i32 %v2_10bd8)
  store i32 %v3_10be4, i32* %r0.global-to-local, align 4
  %v0_10be8.pre = load i32, i32* @r6, align 4
  %v1_10bec.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_10be8

dec_label_pc_10be8:                               ; preds = %dec_label_pc_109ec, %dec_label_pc_10bd0
  %v1_10bec = phi i32 [ %v1_10bec.pre, %dec_label_pc_10bd0 ], [ %v1_109fc, %dec_label_pc_109ec ]
  %v0_10be8 = phi i32 [ %v0_10be8.pre, %dec_label_pc_10bd0 ], [ %v3_109f0, %dec_label_pc_109ec ]
  %v1_10be8 = add i32 %v0_10be8, 8
  store i32 %v1_10be8, i32* %r3.global-to-local, align 4
  %v2_10bec = add i32 %v1_10be8, %v1_10bec
  store i32 %v2_10bec, i32* @r4, align 4
  br label %dec_label_pc_10bf0

dec_label_pc_10bf0:                               ; preds = %dec_label_pc_10bf0.dec_label_pc_10bf0_crit_edge, %dec_label_pc_10be8
  %v0_10bf0 = phi i32 [ %v0_10bf0.pre, %dec_label_pc_10bf0.dec_label_pc_10bf0_crit_edge ], [ %v2_10bec, %dec_label_pc_10be8 ]
  %v1_10bf0 = inttoptr i32 %v0_10bf0 to i32*
  %v2_10bf0 = load i32, i32* %v1_10bf0, align 4
  store i32 %v2_10bf0, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_10bf0, i32* %r0.global-to-local, align 4
  store i32 %v0_10bf0, i32* %r2.global-to-local, align 4
  %v4_10c00 = call i32 @function_128c8(i32 %v2_10bf0, i32 1, i32* %v1_10bf0)
  store i32 %v4_10c00, i32* %r0.global-to-local, align 4
  %v2_10c04 = icmp eq i32 %v4_10c00, 0
  store i1 %v2_10c04, i1* @cpsr_z, align 1
  br i1 %v2_10c04, label %dec_label_pc_10c0c, label %dec_label_pc_10bf0.dec_label_pc_10bf0_crit_edge

dec_label_pc_10bf0.dec_label_pc_10bf0_crit_edge:  ; preds = %dec_label_pc_10bf0
  %v0_10bf0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10bf0

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_10bf0
  %v0_10bc8 = load i32, i32* @r7, align 4
  %v2_10bc8 = icmp eq i32 %v0_10bc8, 0
  br i1 %v2_10bc8, label %dec_label_pc_10a04.loopexit, label %dec_label_pc_10bd0

dec_label_pc_10c10:                               ; preds = %dec_label_pc_10990
  %v1_10c10 = sub i32 0, %v0_10c10
  %v2_10c14 = and i32 %v0_10c10, %v1_10c10
  store i32 %v2_10c14, i32* %r0.global-to-local, align 4
  %v3_10c24 = mul i32 %v2_10c14, 1088
  store i32 %v3_10c24, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16712.374 to i32), i32* %r3.global-to-local, align 4
  %v2_10c58 = mul i32 %v2_10c14, 124511785
  store i32 %v2_10c58, i32* %r2.global-to-local, align 4
  %v4_10c5c = udiv i32 %v2_10c58, 134217728
  %v5_10c5c = add i32 %v4_10c5c, ptrtoint (i32* @global_var_16712.374 to i32)
  %v6_10c5c = inttoptr i32 %v5_10c5c to i8*
  %v7_10c5c = load i8, i8* %v6_10c5c, align 1
  %v9_10c5c = zext i8 %v7_10c5c to i32
  br label %dec_label_pc_109ec

dec_label_pc_10c64:                               ; preds = %dec_label_pc_10c9c, %dec_label_pc_10c80
  store i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* @r2, align 4
  %v0_10c6c = load i32, i32* @r4, align 4
  %v2_10c6c = icmp eq i32 %v0_10c6c, 0
  store i32 ptrtoint (i32* @global_var_1f0e8.379 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  br i1 %v2_10c6c, label %dec_label_pc_10ad8, label %dec_label_pc_10c7c

dec_label_pc_10c7c:                               ; preds = %dec_label_pc_10c64
  %v3_10c7c = call i32 @function_12424(i32* nonnull @global_var_1f0e4.376, i32 ptrtoint (i32* @global_var_1f0e8.379 to i32))
  store i32 %v3_10c7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c80

dec_label_pc_10c80:                               ; preds = %dec_label_pc_10c9c, %dec_label_pc_10c7c, %dec_label_pc_10abc
  %v2_10c80 = load i32, i32* @global_var_1f0e4.376, align 4
  store i32 %v2_10c80, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_10c80, i32* %r0.global-to-local, align 4
  %v4_10c90 = call i32 @function_128c8(i32 %v2_10c80, i32 1, i32* nonnull @global_var_1f0e4.376)
  store i32 %v4_10c90, i32* %r0.global-to-local, align 4
  %v2_10c94 = icmp eq i32 %v4_10c90, 0
  store i1 %v2_10c94, i1* @cpsr_z, align 1
  br i1 %v2_10c94, label %dec_label_pc_10c64, label %dec_label_pc_10c9c

dec_label_pc_10c9c:                               ; preds = %dec_label_pc_10c80
  %v2_10c9c = load i32, i32* @global_var_1f0e4.376, align 4
  store i32 %v2_10c9c, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_10c9c, i32* %r0.global-to-local, align 4
  %v4_10cac = call i32 @function_128c8(i32 %v2_10c9c, i32 1, i32* nonnull @global_var_1f0e4.376)
  store i32 %v4_10cac, i32* %r0.global-to-local, align 4
  %v2_10cb0 = icmp eq i32 %v4_10cac, 0
  store i1 %v2_10cb0, i1* @cpsr_z, align 1
  br i1 %v2_10cb0, label %dec_label_pc_10c64, label %dec_label_pc_10c80

dec_label_pc_10cbc:                               ; preds = %dec_label_pc_10910
  %v1_10cbc = add i32 %v0_1091c, 23
  %v1_10cc0 = and i32 %v1_10cbc, -16
  store i32 %v1_10cc0, i32* %r3.global-to-local, align 4
  %tmp80 = icmp ugt i32 %v1_10cc0, 114688
  br i1 %tmp80, label %dec_label_pc_10f34, label %dec_label_pc_10cd0

dec_label_pc_10cd0:                               ; preds = %dec_label_pc_10cbc
  %v3_10cd0 = udiv i32 %v1_10cbc, 16
  store i32 %v3_10cd0, i32* %r3.global-to-local, align 4
  %v1_10cd4 = add nsw i32 %v3_10cd0, -1
  store i32 %v1_10cd4, i32* @r0, align 4
  %tmp81 = icmp ult i32 %v1_10cd4, 33
  br i1 %tmp81, label %.thread43, label %dec_label_pc_10ce4

.thread43:                                        ; preds = %dec_label_pc_10cd0
  store i32 %v1_10cd4, i32* @sb, align 4
  br label %dec_label_pc_10940

dec_label_pc_10ce4:                               ; preds = %dec_label_pc_10cd0
  %v0_10ce4 = call i32 @function_14290()
  %v1_10cec = add i32 %v0_10ce4, 2097151
  %v3_10cf0 = udiv i32 %v1_10cec, 2097152
  store i32 %v3_10cf0, i32* %r0.global-to-local, align 4
  %v1_10cf4 = add nsw i32 %v3_10cf0, -496
  store i32 %v1_10cf4, i32* @sb, align 4
  br label %dec_label_pc_10940

dec_label_pc_10cfc:                               ; preds = %dec_label_pc_10b9c
  store i32 %v0_10d00, i32* %ip.global-to-local, align 4
  %v2_10d00 = sub i32 %v1_10ba0, %v0_10d00
  %v1_10d04 = or i32 %v2_10d00, 1
  store i32 %v1_10d04, i32* @r3, align 4
  %v1_10d08 = load i32, i32* @r8, align 4
  %v2_10d08 = add i32 %v1_10d08, %v0_10d00
  store i32 %v2_10d08, i32* %r0.global-to-local, align 4
  %v1_10d0c = or i32 %v0_10d00, 1
  store i32 %v1_10d0c, i32* @r2, align 4
  %v2_10d10 = add i32 %v2_10d08, 4
  %v3_10d10 = inttoptr i32 %v2_10d10 to i32*
  store i32 %v1_10d04, i32* %v3_10d10, align 4
  %v0_10d14 = load i32, i32* @r2, align 4
  %v1_10d14 = load i32, i32* %ip.global-to-local, align 4
  %v2_10d14 = load i32, i32* @r8, align 4
  %v3_10d14 = add i32 %v2_10d14, %v1_10d14
  %v4_10d14 = inttoptr i32 %v3_10d14 to i32*
  store i32 %v0_10d14, i32* %v4_10d14, align 4
  %v0_10d18 = load i32, i32* @r2, align 4
  %v1_10d18 = load i32, i32* @r5, align 4
  %v2_10d18 = add i32 %v1_10d18, 4
  %v3_10d18 = inttoptr i32 %v2_10d18 to i32*
  store i32 %v0_10d18, i32* %v3_10d18, align 4
  %v0_10d1c = load i32, i32* @r3, align 4
  %v1_10d1c = load i32, i32* %r1.global-to-local, align 4
  %v2_10d1c = load i32, i32* @r8, align 4
  %v3_10d1c = add i32 %v2_10d1c, %v1_10d1c
  %v4_10d1c = inttoptr i32 %v3_10d1c to i32*
  store i32 %v0_10d1c, i32* %v4_10d1c, align 4
  %v0_10d20 = load i32, i32* %r0.global-to-local, align 4
  %v1_10d20 = add i32 %v0_10d20, 8
  store i32 %v1_10d20, i32* %r0.global-to-local, align 4
  %v1_10d24 = call i32 @function_10414(i32 %v1_10d20)
  store i32 %v1_10d24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10d2c:                               ; preds = %dec_label_pc_10a2c
  %v1_10d2c = add i32 %v0_10d2c, -39
  %v3_10d2c = sub i32 38, %v0_10d2c
  %v4_10d2c = and i32 %v3_10d2c, %v0_10d2c
  %v5_10d2c = icmp slt i32 %v4_10d2c, 0
  %v6_10d2c = icmp slt i32 %v1_10d2c, 0
  %v7_10d2c = icmp eq i32 %v0_10d2c, 39
  %v3_10d30 = xor i1 %v6_10d2c, %v5_10d2c
  %v4_10d30 = or i1 %v7_10d2c, %v3_10d30
  br i1 %v4_10d30, label %dec_label_pc_10d80, label %dec_label_pc_10d34

dec_label_pc_10d34:                               ; preds = %dec_label_pc_10d2c
  %v0_10d34 = load i32, i32* @sb, align 4
  %v1_10d34 = add i32 %v0_10d34, 3
  store i32 %v1_10d34, i32* %r3.global-to-local, align 4
  %v2_10d38 = sub i32 %v1_10d34, %v0_10d2c
  %v4_10d38 = xor i32 %v1_10d34, %v0_10d2c
  %v5_10d38 = xor i32 %v2_10d38, %v1_10d34
  %v6_10d38 = and i32 %v5_10d38, %v4_10d38
  %v7_10d38 = icmp slt i32 %v6_10d38, 0
  %v8_10d38 = icmp slt i32 %v2_10d38, 0
  %v9_10d38 = icmp eq i32 %v1_10d34, %v0_10d2c
  %v3_10d3c = xor i1 %v8_10d38, %v7_10d38
  %v4_10d3c = or i1 %v9_10d38, %v3_10d3c
  br i1 %v4_10d3c, label %dec_label_pc_10d40, label %dec_label_pc_10e4c

dec_label_pc_10d40:                               ; preds = %dec_label_pc_10d34
  %v1_10d40 = add i32 %v7_10a08, 4
  %v2_10d40 = inttoptr i32 %v1_10d40 to i32*
  %v3_10d40 = load i32, i32* %v2_10d40, align 4
  store i32 %v3_10d40, i32* %r3.global-to-local, align 4
  store i32 %v0_10d00, i32* %r2.global-to-local, align 4
  %v1_10d48 = and i32 %v3_10d40, -2
  store i32 %v1_10d48, i32* @r7, align 4
  %v2_10d4c = sub i32 %v1_10d48, %v0_10d00
  store i32 %v2_10d4c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10d50

dec_label_pc_10d50:                               ; preds = %dec_label_pc_10e54, %dec_label_pc_10d40
  %v0_10d50 = phi i32 [ %v2_10e60, %dec_label_pc_10e54 ], [ %v2_10d4c, %dec_label_pc_10d40 ]
  %v3_10d50 = udiv i32 %v0_10d50, 16
  store i32 %v3_10d50, i32* %r3.global-to-local, align 4
  %v1_10d54 = add nsw i32 %v3_10d50, -1
  store i32 %v1_10d54, i32* @r0, align 4
  %tmp82 = icmp ult i32 %v1_10d54, 33
  br i1 %tmp82, label %dec_label_pc_10d80, label %dec_label_pc_10d60

dec_label_pc_10d60:                               ; preds = %dec_label_pc_10d50
  %tmp83 = icmp ugt i32 %v1_10d54, 7168
  br i1 %tmp83, label %.thread45, label %dec_label_pc_10d6c

.thread45:                                        ; preds = %dec_label_pc_10d60
  store i32 63, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d78

dec_label_pc_10d6c:                               ; preds = %dec_label_pc_10d60
  %v0_10d6c = call i32 @function_14290()
  %v3_10d70 = udiv i32 %v0_10d6c, 2097152
  %v1_10d74 = add nsw i32 %v3_10d70, -496
  store i32 %v1_10d74, i32* %r0.global-to-local, align 4
  %v0_10d78.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_10d78

dec_label_pc_10d78:                               ; preds = %.thread45, %dec_label_pc_10d6c
  %v1_10d78 = phi i32 [ %v1_10d74, %dec_label_pc_10d6c ], [ 63, %.thread45 ]
  %v0_10d78 = phi i32 [ %v0_10d78.pre, %dec_label_pc_10d6c ], [ %v0_10d2c, %.thread45 ]
  %v9_10d78 = icmp eq i32 %v0_10d78, %v1_10d78
  br i1 %v9_10d78, label %dec_label_pc_10ef4, label %dec_label_pc_10d78.dec_label_pc_10d80_crit_edge

dec_label_pc_10d78.dec_label_pc_10d80_crit_edge:  ; preds = %dec_label_pc_10d78
  %v0_10d80.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10d80

dec_label_pc_10d80:                               ; preds = %dec_label_pc_10d78.dec_label_pc_10d80_crit_edge, %dec_label_pc_10e4c, %dec_label_pc_10d50, %dec_label_pc_10d2c, %dec_label_pc_10e54
  %v1_10e98 = phi i32 [ %v0_10d78, %dec_label_pc_10d78.dec_label_pc_10d80_crit_edge ], [ %v0_10d2c, %dec_label_pc_10e4c ], [ %v0_10d2c, %dec_label_pc_10d50 ], [ %v0_10d2c, %dec_label_pc_10d2c ], [ 63, %dec_label_pc_10e54 ]
  %v0_10d80 = phi i32 [ %v0_10d80.pre, %dec_label_pc_10d78.dec_label_pc_10d80_crit_edge ], [ %v7_10a08, %dec_label_pc_10e4c ], [ %v7_10a08, %dec_label_pc_10d50 ], [ %v7_10a08, %dec_label_pc_10d2c ], [ %v7_10a08, %dec_label_pc_10e54 ]
  %v1_10d80 = add i32 %v0_10d80, 8
  store i32 %v1_10d80, i32* %r3.global-to-local, align 4
  %v1_10d84 = inttoptr i32 %v1_10d80 to i32*
  %v2_10d84 = load i32, i32* %v1_10d84, align 4
  store i32 %v2_10d84, i32* %r3.global-to-local, align 4
  %v3_10d84 = add i32 %v0_10d80, 12
  %v4_10d84 = inttoptr i32 %v3_10d84 to i32*
  %v5_10d84 = load i32, i32* %v4_10d84, align 4
  store i32 %v5_10d84, i32* %ip.global-to-local, align 4
  %v9_10d88 = icmp eq i32 %v5_10d84, %v2_10d84
  br i1 %v9_10d88, label %dec_label_pc_10e84, label %dec_label_pc_10d90

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d80, %dec_label_pc_10ee8
  %v1_10d98 = phi i32 [ %v5_10d84, %dec_label_pc_10d80 ], [ %v5_10eec, %dec_label_pc_10ee8 ]
  %v0_10d98 = phi i32 [ %v2_10d84, %dec_label_pc_10d80 ], [ %v2_10eec, %dec_label_pc_10ee8 ]
  %v0_10d90 = phi i32 [ %v0_10d80, %dec_label_pc_10d80 ], [ %v0_10ee8, %dec_label_pc_10ee8 ]
  %v1_10d90 = add i32 %v0_10d90, 4
  %v2_10d90 = inttoptr i32 %v1_10d90 to i32*
  %v3_10d90 = load i32, i32* %v2_10d90, align 4
  %v1_10d94 = or i32 %v3_10d90, 1
  store i32 %v1_10d94, i32* %r2.global-to-local, align 4
  %v2_10d98 = add i32 %v1_10d98, 8
  %v3_10d98 = inttoptr i32 %v2_10d98 to i32*
  store i32 %v0_10d98, i32* %v3_10d98, align 4
  %v0_10d9c = load i32, i32* %r2.global-to-local, align 4
  %v1_10d9c = and i32 %v0_10d9c, -2
  store i32 %v1_10d9c, i32* @r0, align 4
  %v1_10da0 = load i32, i32* @r5, align 4
  %v2_10da0 = add i32 %v1_10da0, %v1_10d9c
  %v3_10da0 = inttoptr i32 %v2_10da0 to i32*
  %v4_10da0 = load i32, i32* %v3_10da0, align 4
  store i32 %v4_10da0, i32* %r3.global-to-local, align 4
  %v1_10da4 = add i32 %v1_10da0, 8
  %v2_10da4 = inttoptr i32 %v1_10da4 to i32*
  %v3_10da4 = load i32, i32* %v2_10da4, align 4
  store i32 %v3_10da4, i32* %r1.global-to-local, align 4
  %v1_10da8 = or i32 %v4_10da0, 1
  store i32 %v1_10da8, i32* %r3.global-to-local, align 4
  %v0_10dac = load i32, i32* %ip.global-to-local, align 4
  %v2_10dac = add i32 %v3_10da4, 12
  %v3_10dac = inttoptr i32 %v2_10dac to i32*
  store i32 %v0_10dac, i32* %v3_10dac, align 4
  %v0_10db0 = load i32, i32* %r3.global-to-local, align 4
  %v1_10db0 = load i32, i32* @r0, align 4
  %v2_10db0 = load i32, i32* @r5, align 4
  %v3_10db0 = add i32 %v2_10db0, %v1_10db0
  %v4_10db0 = inttoptr i32 %v3_10db0 to i32*
  store i32 %v0_10db0, i32* %v4_10db0, align 4
  %v0_10db4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10db4 = load i32, i32* @r5, align 4
  %v2_10db4 = add i32 %v1_10db4, 4
  %v3_10db4 = inttoptr i32 %v2_10db4 to i32*
  store i32 %v0_10db4, i32* %v3_10db4, align 4
  %v0_10db8 = load i32, i32* @r5, align 4
  store i32 %v0_10db8, i32* @r8, align 4
  br label %dec_label_pc_10dbc

dec_label_pc_10dbc:                               ; preds = %dec_label_pc_10ef4, %dec_label_pc_10d90
  %v0_10dbc = load i32, i32* @r6, align 4
  %v1_10dbc = add i32 %v0_10dbc, 8
  store i32 %v1_10dbc, i32* %r2.global-to-local, align 4
  %v1_10dc0 = load i32, i32* @sl, align 4
  %v2_10dc0 = add i32 %v1_10dc0, %v1_10dbc
  %v3_10dc0 = inttoptr i32 %v2_10dc0 to i32*
  %v4_10dc0 = load i32, i32* %v3_10dc0, align 4
  store i32 %v4_10dc0, i32* %r3.global-to-local, align 4
  %v2_10dc4 = icmp eq i32 %v4_10dc0, 0
  store i1 %v2_10dc4, i1* @cpsr_z, align 1
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_10dc0, i32* @r4, align 4
  br i1 %v2_10dc4, label %dec_label_pc_10b9c, label %dec_label_pc_10dd4

dec_label_pc_10dd4:                               ; preds = %dec_label_pc_10dbc
  %v0_10dd4 = call i32 @function_12874()
  store i32 %v0_10dd4, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10ddc = load i32, i32* %r2.global-to-local, align 4
  %v2_10ddc = load i32, i32* %r1.global-to-local, align 4
  %v3_10ddc = add i32 %v2_10ddc, %v1_10ddc
  %v4_10ddc = inttoptr i32 %v3_10ddc to i32*
  store i32 0, i32* %v4_10ddc, align 4
  %v0_10de0 = call i32 @function_12874()
  store i32 %v0_10de0, i32* %r0.global-to-local, align 4
  %v0_10de4 = load i32, i32* @r6, align 4
  %v1_10de4 = add i32 %v0_10de4, 12
  store i32 %v1_10de4, i32* %r3.global-to-local, align 4
  %v1_10de8 = load i32, i32* %r1.global-to-local, align 4
  %v2_10de8 = add i32 %v1_10de8, %v1_10de4
  %v3_10de8 = inttoptr i32 %v2_10de8 to i32*
  %v4_10de8 = load i32, i32* %v3_10de8, align 4
  store i32 %v4_10de8, i32* %r2.global-to-local, align 4
  %v2_10dec = icmp eq i32 %v4_10de8, 0
  br i1 %v2_10dec, label %dec_label_pc_10b9c, label %dec_label_pc_10df4

dec_label_pc_10df4:                               ; preds = %dec_label_pc_10dd4
  store i32 240, i32* @r7, align 4
  %v0_10df8 = load i32, i32* @r4, align 4
  store i32 %v0_10df8, i32* %r0.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10e0c = icmp eq i32 %v0_10df8, -38
  br i1 %v4_10e0c, label %dec_label_pc_10e10, label %dec_label_pc_10b9c

dec_label_pc_10e10:                               ; preds = %dec_label_pc_10df4
  store i32 -38, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10b9c

dec_label_pc_10e20:                               ; preds = %dec_label_pc_10b3c
  store i32 240, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), i32* %r0.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  %v0_10e2c = load i32, i32* @r4, align 4
  store i32 %v0_10e2c, i32* %r2.global-to-local, align 4
  br i1 icmp ne (i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), i32 -38), label %dec_label_pc_10b58, label %dec_label_pc_10e3c

dec_label_pc_10e3c:                               ; preds = %dec_label_pc_10e20
  store i32 %v0_10e2c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10b58

dec_label_pc_10e4c:                               ; preds = %dec_label_pc_10d34
  %v7_10e4c = icmp eq i32 %v0_10d2c, 63
  br i1 %v7_10e4c, label %dec_label_pc_10e54, label %dec_label_pc_10d80

dec_label_pc_10e54:                               ; preds = %dec_label_pc_10e4c
  %v1_10e54 = add i32 %v7_10a08, 4
  %v2_10e54 = inttoptr i32 %v1_10e54 to i32*
  %v3_10e54 = load i32, i32* %v2_10e54, align 4
  store i32 %v3_10e54, i32* %r3.global-to-local, align 4
  store i32 %v0_10d00, i32* %r1.global-to-local, align 4
  %v1_10e5c = and i32 %v3_10e54, -2
  store i32 %v1_10e5c, i32* @r7, align 4
  %v2_10e60 = sub i32 %v1_10e5c, %v0_10d00
  store i32 %v2_10e60, i32* %r4.global-to-local, align 4
  %tmp84 = icmp ult i32 %v2_10e60, 114689
  br i1 %tmp84, label %dec_label_pc_10d80, label %dec_label_pc_10d50

dec_label_pc_10e70:                               ; preds = %dec_label_pc_10ad8
  %v2_10e70 = load i32, i32* @global_var_1f0e4.376, align 4
  store i32 %v2_10e70, i32* @r3, align 4
  %v2_10e74 = icmp eq i32 %v2_10e70, 0
  store i1 %v2_10e74, i1* @cpsr_z, align 1
  br i1 %v2_10e74, label %dec_label_pc_10e7c, label %dec_label_pc_10fa8

dec_label_pc_10e7c:                               ; preds = %.thread14, %dec_label_pc_10e70, %dec_label_pc_10fc0, %dec_label_pc_10fa8
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10bb8

dec_label_pc_10e84:                               ; preds = %dec_label_pc_10d80
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_10e88 = sub i32 32, %v1_10e98
  store i32 %v1_10e88, i32* %r1.global-to-local, align 4
  %v7_10e90 = lshr i32 1, %v1_10e88
  store i32 %v7_10e90, i32* %r4.global-to-local, align 4
  %v1_10e94 = add i32 %v1_10e98, -32
  store i32 %v1_10e94, i32* %r0.global-to-local, align 4
  %v6_10e94 = icmp slt i32 %v1_10e94, 0
  %v7_10e94 = icmp eq i32 %v1_10e98, 32
  store i1 %v7_10e94, i1* @cpsr_z, align 1
  %v6_10e98 = shl i32 1, %v1_10e98
  store i32 %v6_10e98, i32* %r3.global-to-local, align 4
  br i1 %v6_10e94, label %bb67, label %bb66

bb66:                                             ; preds = %dec_label_pc_10e84
  %v7_10e9c = shl i32 1, %v1_10e94
  store i32 %v7_10e9c, i32* %r4.global-to-local, align 4
  br label %bb67

bb67:                                             ; preds = %dec_label_pc_10e84, %bb66
  %v0_10ea8 = phi i32 [ %v7_10e90, %dec_label_pc_10e84 ], [ %v7_10e9c, %bb66 ]
  %v1_10ea0 = sub i32 -1, %v6_10e98
  store i32 %v1_10ea0, i32* @r7, align 4
  %v1_10ea8 = sub i32 -1, %v0_10ea8
  store i32 %v1_10ea8, i32* %r8.global-to-local, align 4
  store i32 %v1_10ea0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10eb0

dec_label_pc_10eb0:                               ; preds = %dec_label_pc_10eb0.dec_label_pc_10eb0_crit_edge, %bb67
  %v1_10eb8 = phi i32 [ %v1_10eb8.pre, %dec_label_pc_10eb0.dec_label_pc_10eb0_crit_edge ], [ %v1_10ea0, %bb67 ]
  %v2_10eb0 = load i32, i32* @global_var_1f0f0.358, align 4
  store i32 %v2_10eb0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32* %r2.global-to-local, align 4
  %v2_10eb8 = and i32 %v2_10eb0, %v1_10eb8
  store i32 %v2_10eb8, i32* %r1.global-to-local, align 4
  %v4_10ebc = call i32 @function_128c8(i32 %v2_10eb0, i32 %v2_10eb8, i32* nonnull @global_var_1f0f0.358)
  store i32 %v4_10ebc, i32* %r0.global-to-local, align 4
  %v2_10ec0 = icmp eq i32 %v4_10ebc, 0
  store i1 %v2_10ec0, i1* @cpsr_z, align 1
  br i1 %v2_10ec0, label %dec_label_pc_10ec8, label %dec_label_pc_10eb0.dec_label_pc_10eb0_crit_edge

dec_label_pc_10eb0.dec_label_pc_10eb0_crit_edge:  ; preds = %dec_label_pc_10eb0
  %v1_10eb8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10eb0

dec_label_pc_10ec8:                               ; preds = %dec_label_pc_10eb0
  store i32 ptrtoint (i32* @global_var_1f0f4.360 to i32), i32* @sb, align 4
  %v0_10ecc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10ecc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ed0

dec_label_pc_10ed0:                               ; preds = %dec_label_pc_10ed0.dec_label_pc_10ed0_crit_edge, %dec_label_pc_10ec8
  %v1_10ed8 = phi i32 [ %v1_10ed8.pre, %dec_label_pc_10ed0.dec_label_pc_10ed0_crit_edge ], [ %v0_10ecc, %dec_label_pc_10ec8 ]
  %v2_10ed0 = load i32, i32* @global_var_1f0f4.360, align 4
  store i32 %v2_10ed0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f0f4.360 to i32), i32* %r2.global-to-local, align 4
  %v2_10ed8 = and i32 %v2_10ed0, %v1_10ed8
  store i32 %v2_10ed8, i32* %r1.global-to-local, align 4
  %v4_10edc = call i32 @function_128c8(i32 %v2_10ed0, i32 %v2_10ed8, i32* nonnull @global_var_1f0f4.360)
  store i32 %v4_10edc, i32* %r0.global-to-local, align 4
  %v2_10ee0 = icmp eq i32 %v4_10edc, 0
  store i1 %v2_10ee0, i1* @cpsr_z, align 1
  br i1 %v2_10ee0, label %dec_label_pc_10ee8, label %dec_label_pc_10ed0.dec_label_pc_10ed0_crit_edge

dec_label_pc_10ed0.dec_label_pc_10ed0_crit_edge:  ; preds = %dec_label_pc_10ed0
  %v1_10ed8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ed0

dec_label_pc_10ee8:                               ; preds = %dec_label_pc_10ed0
  %v0_10ee8 = load i32, i32* @r5, align 4
  %v1_10ee8 = add i32 %v0_10ee8, 8
  store i32 %v1_10ee8, i32* %r3.global-to-local, align 4
  %v1_10eec = inttoptr i32 %v1_10ee8 to i32*
  %v2_10eec = load i32, i32* %v1_10eec, align 4
  store i32 %v2_10eec, i32* %r3.global-to-local, align 4
  %v3_10eec = add i32 %v0_10ee8, 12
  %v4_10eec = inttoptr i32 %v3_10eec to i32*
  %v5_10eec = load i32, i32* %v4_10eec, align 4
  store i32 %v5_10eec, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10d90

dec_label_pc_10ef4:                               ; preds = %dec_label_pc_10d78
  store i32 %v0_10d00, i32* %ip.global-to-local, align 4
  %v0_10ef8 = load i32, i32* @r5, align 4
  %v1_10ef8 = add i32 %v0_10ef8, 12
  %v2_10ef8 = inttoptr i32 %v1_10ef8 to i32*
  %v3_10ef8 = load i32, i32* %v2_10ef8, align 4
  store i32 %v3_10ef8, i32* @r0, align 4
  %v1_10efc = add i32 %v0_10ef8, 8
  %v2_10efc = inttoptr i32 %v1_10efc to i32*
  %v3_10efc = load i32, i32* %v2_10efc, align 4
  store i32 %v3_10efc, i32* %r2.global-to-local, align 4
  %v2_10f00 = add i32 %v0_10ef8, %v0_10d00
  store i32 %v2_10f00, i32* %r3.global-to-local, align 4
  %v2_10f04 = add i32 %v2_10f00, 8
  %v3_10f04 = inttoptr i32 %v2_10f04 to i32*
  store i32 %v3_10efc, i32* %v3_10f04, align 4
  %v0_10f08 = load i32, i32* %r3.global-to-local, align 4
  %v1_10f08 = load i32, i32* @r0, align 4
  %v2_10f08 = add i32 %v1_10f08, 8
  %v3_10f08 = inttoptr i32 %v2_10f08 to i32*
  store i32 %v0_10f08, i32* %v3_10f08, align 4
  %v0_10f0c = load i32, i32* %r3.global-to-local, align 4
  %v1_10f0c = add i32 %v0_10f0c, 8
  %v2_10f0c = inttoptr i32 %v1_10f0c to i32*
  %v3_10f0c = load i32, i32* %v2_10f0c, align 4
  store i32 %v3_10f0c, i32* %r1.global-to-local, align 4
  %v0_10f10 = load i32, i32* %ip.global-to-local, align 4
  %v1_10f10 = or i32 %v0_10f10, 1
  store i32 %v1_10f10, i32* %r2.global-to-local, align 4
  %v0_10f14 = load i32, i32* @r5, align 4
  store i32 %v0_10f14, i32* @r8, align 4
  %v0_10f18 = load i32, i32* %r4.global-to-local, align 4
  %v2_10f18 = add i32 %v0_10f0c, 4
  %v3_10f18 = inttoptr i32 %v2_10f18 to i32*
  store i32 %v0_10f18, i32* %v3_10f18, align 4
  %v0_10f1c = load i32, i32* @r0, align 4
  %v1_10f1c = load i32, i32* %r3.global-to-local, align 4
  %v2_10f1c = add i32 %v1_10f1c, 12
  %v3_10f1c = inttoptr i32 %v2_10f1c to i32*
  store i32 %v0_10f1c, i32* %v3_10f1c, align 4
  %v0_10f20 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f20 = load i32, i32* @r5, align 4
  %v2_10f20 = load i32, i32* %ip.global-to-local, align 4
  %v3_10f20 = add i32 %v2_10f20, %v1_10f20
  %v4_10f20 = inttoptr i32 %v3_10f20 to i32*
  store i32 %v0_10f20, i32* %v4_10f20, align 4
  %v0_10f24 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f24 = load i32, i32* @r5, align 4
  %v2_10f24 = add i32 %v1_10f24, 4
  %v3_10f24 = inttoptr i32 %v2_10f24 to i32*
  store i32 %v0_10f24, i32* %v3_10f24, align 4
  %v0_10f28 = load i32, i32* %r3.global-to-local, align 4
  %v1_10f28 = load i32, i32* %r1.global-to-local, align 4
  %v2_10f28 = add i32 %v1_10f28, 12
  %v3_10f28 = inttoptr i32 %v2_10f28 to i32*
  store i32 %v0_10f28, i32* %v3_10f28, align 4
  %v0_10f2c = load i32, i32* %r4.global-to-local, align 4
  %v1_10f2c = load i32, i32* @r7, align 4
  %v2_10f2c = load i32, i32* @r5, align 4
  %v3_10f2c = add i32 %v2_10f2c, %v1_10f2c
  %v4_10f2c = inttoptr i32 %v3_10f2c to i32*
  store i32 %v0_10f2c, i32* %v4_10f2c, align 4
  br label %dec_label_pc_10dbc

dec_label_pc_10f34:                               ; preds = %dec_label_pc_10cbc
  %v1_10f38 = add i32 %v1_10cc0, 4103
  %v1_10f40 = and i32 %v1_10f38, -4096
  store i32 %v1_10f40, i32* @r6, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  store i32 %v1_10f40, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @ip, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v7_10f6c = call i32 @function_1128c(i32 0, i32 %v1_10f40, i32 3, i32 34, i32 -1, i32 0, i32 0)
  store i32 %v7_10f6c, i32* %r0.global-to-local, align 4
  %v3_10f70 = icmp eq i32 %v7_10f6c, -1
  %v8_10f70 = icmp eq i32 %v7_10f6c, -1
  br i1 %v8_10f70, label %.thread14, label %bb68

bb68:                                             ; preds = %dec_label_pc_10f34
  %v2_10f74 = add i32 %v7_10f6c, 8
  store i32 %v2_10f74, i32* @r3, align 4
  %v1_10f78 = load i32, i32* @r6, align 4
  %v2_10f78 = add i32 %v1_10f78, -8
  store i32 %v2_10f78, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10f80 = add i32 %v7_10f6c, 16
  store i32 %v2_10f80, i32* @ip, align 4
  %v4_10f84 = inttoptr i32 %v2_10f74 to i32*
  store i32 8, i32* %v4_10f84, align 4
  %v1_10f88 = load i32, i32* %r1.global-to-local, align 4
  %v2_10f88 = load i32, i32* @r3, align 4
  %v3_10f88 = add i32 %v2_10f88, 4
  %v4_10f88 = inttoptr i32 %v3_10f88 to i32*
  store i32 %v1_10f88, i32* %v4_10f88, align 4
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_10f34, %bb68
  br i1 %v3_10f70, label %dec_label_pc_10e7c, label %dec_label_pc_10bb8

dec_label_pc_10f94:                               ; preds = %dec_label_pc_1092c
  %v0_10f94 = call i32 @function_fb60()
  store i32 %v0_10f94, i32* %r0.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  store i32 0, i32* @ip, align 4
  %v2_10fa0 = inttoptr i32 %v0_10f94 to i32*
  store i32 12, i32* %v2_10fa0, align 4
  br label %dec_label_pc_10bb8

dec_label_pc_10fa8:                               ; preds = %dec_label_pc_10e70
  %v0_10fa8 = call i32 @function_12874()
  store i32 %v0_10fa8, i32* @r0, align 4
  %v0_10fac = load i32, i32* %r4.global-to-local, align 4
  %v1_10fac = load i32, i32* @r6, align 4
  %v2_10fac = inttoptr i32 %v1_10fac to i32*
  store i32 %v0_10fac, i32* %v2_10fac, align 4
  %v0_10fb0 = call i32 @function_12874()
  store i32 %v0_10fb0, i32* %r0.global-to-local, align 4
  %v3_10fb4 = load i32, i32* @global_var_1f0e8.379, align 4
  store i32 %v3_10fb4, i32* @r3, align 4
  %v2_10fb8 = icmp eq i32 %v3_10fb4, 0
  br i1 %v2_10fb8, label %dec_label_pc_10e7c, label %dec_label_pc_10fc0

dec_label_pc_10fc0:                               ; preds = %dec_label_pc_10fa8
  store i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), i32* %r0.global-to-local, align 4
  store i32 129, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  br i1 icmp ne (i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), i32 -38), label %dec_label_pc_10e7c, label %dec_label_pc_10fdc

dec_label_pc_10fdc:                               ; preds = %dec_label_pc_10fc0
  store i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_10fe8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10fe8, i32* @ip, align 4
  br label %dec_label_pc_10bb8

; uselistorder directives
  uselistorder i32 %v7_10f6c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_10eec, { 1, 0 }
  uselistorder i32 %v2_10eec, { 1, 0 }
  uselistorder i32 %v0_10ee8, { 1, 2, 0 }
  uselistorder i32 %v2_10ed0, { 1, 0, 2 }
  uselistorder i32 %v2_10eb0, { 1, 0, 2 }
  uselistorder i32 %v1_10ea0, { 2, 1, 0 }
  uselistorder i32 %v1_10e94, { 0, 2, 1 }
  uselistorder i32 %v2_10e60, { 0, 2, 1 }
  uselistorder i32 %v1_10da0, { 1, 0 }
  uselistorder i32 %v0_10d80, { 0, 2, 1 }
  uselistorder i32 %v3_10d50, { 1, 0 }
  uselistorder i32 %v2_10d38, { 1, 0 }
  uselistorder i32 %v1_10d34, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_10cf4, { 1, 0 }
  uselistorder i32 %v3_10cf0, { 1, 0 }
  uselistorder i32 %v1_10cd4, { 2, 0, 3, 1 }
  uselistorder i32 %v3_10cd0, { 1, 0 }
  uselistorder i32 %v1_10cc0, { 3, 0, 4, 2, 1 }
  uselistorder i32 %v0_10bf0, { 1, 0 }
  uselistorder i32 %v1_10b64, { 0, 2, 1, 3 }
  uselistorder i32 %v2_10b1c, { 1, 0, 2 }
  uselistorder i32 %v2_10adc, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32 %v2_10ab0, { 0, 2, 1 }
  uselistorder i32 %v2_10aac, { 0, 2, 1 }
  uselistorder i32 %v4_10a14, { 1, 0 }
  uselistorder i32 %v7_10a08, { 5, 0, 1, 2, 3, 4, 6, 7, 8 }
  uselistorder i32 %v4_10a08, { 0, 2, 1 }
  uselistorder i32 %v0_10d2c, { 5, 8, 7, 6, 9, 3, 11, 4, 0, 10, 2, 1, 12 }
  uselistorder i32 %v1_109fc, { 0, 2, 1 }
  uselistorder i32 %v3_109f0, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v0_10c10, { 1, 0, 2, 3 }
  uselistorder i32 %v0_10998, { 1, 0 }
  uselistorder i32 %v6_10960, { 1, 2, 0 }
  uselistorder i32 %v1_1095c, { 1, 2, 0 }
  uselistorder i32 %v0_10d00, { 0, 7, 6, 5, 9, 8, 2, 1, 3, 10, 12, 11, 4, 13 }
  uselistorder i32 %v1_10958, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32* %r4.global-to-local, { 7, 8, 16, 17, 10, 11, 12, 13, 14, 15, 18, 0, 5, 6, 9, 1, 2, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 25, 26, 27, 28, 29, 30, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24 }
  uselistorder i32* %r2.global-to-local, { 1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 2, 3, 4, 5, 6, 7, 8, 9, 10, 23, 24, 25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 9, 3, 5, 4, 6, 8, 7, 10, 11, 12, 13, 25, 26, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 6, 7, 1, 34, 36, 35, 2, 37, 38, 39, 40, 42, 41, 43, 8, 9, 0, 10, 11, 12, 13, 15, 14, 20, 18, 17, 16, 19, 25, 23, 22, 21, 24, 3, 31, 32, 33, 27, 26, 28, 29, 30 }
  uselistorder i32* %ip.global-to-local, { 4, 5, 6, 8, 7, 0, 1, 2, 3 }
  uselistorder i32 38, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 ()* @function_14290, { 4, 1, 2, 3, 0 }
  uselistorder i32 (i32*)* @function_fef4, { 1, 0 }
  uselistorder i32* @global_var_1f0e4.376, { 3, 1, 4, 2, 5, 0, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1f0e4.376 to i32), { 1, 2, 3, 0, 4, 5, 6, 7, 8 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), i32 -8), { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 124511785, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_16712.374 to i32), { 0, 2, 1, 3 }
  uselistorder i32* @global_var_1f0f4.360, { 1, 5, 6, 7, 0, 2, 8, 9, 3, 10, 4, 11, 12 }
  uselistorder i32* @global_var_1f0f0.358, { 3, 7, 8, 9, 0, 4, 2, 1, 10, 5, 11, 6, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_1f0f0.358 to i32), { 23, 24, 25, 10, 3, 26, 27, 4, 28, 18, 12, 29, 20, 30, 31, 32, 2, 33, 34, 21, 35, 11, 36, 13, 22, 37, 5, 38, 39, 40, 0, 14, 6, 41, 15, 7, 42, 43, 44, 1, 16, 19, 8, 45, 17, 9, 46 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %bb67, { 1, 0 }
  uselistorder label %dec_label_pc_10e7c, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_10d90, { 1, 0 }
  uselistorder label %dec_label_pc_10d80, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10d78, { 1, 0 }
  uselistorder label %dec_label_pc_10be8, { 1, 0 }
  uselistorder label %dec_label_pc_10bb8, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_10bb4, { 1, 0 }
  uselistorder label %dec_label_pc_10b9c, { 4, 1, 2, 3, 5, 0 }
  uselistorder label %dec_label_pc_10b58, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_10b10, { 1, 0 }
  uselistorder label %dec_label_pc_10abc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10a40, { 1, 0 }
  uselistorder label %dec_label_pc_10990, { 1, 0 }
  uselistorder label %dec_label_pc_10990.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10974.loopexit, { 2, 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_10940, { 2, 0, 1 }
}

define i32 @function_11008(i32 %arg1) local_unnamed_addr {
dec_label_pc_11008:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_11010 = call i32 @function_10910()
  %v2_11014 = icmp eq i32 %v0_11010, 0
  br i1 %v2_11014, label %dec_label_pc_11054, label %dec_label_pc_1101c

dec_label_pc_1101c:                               ; preds = %dec_label_pc_11008
  %v1_1101c = add i32 %v0_11010, -4
  %v2_1101c = inttoptr i32 %v1_1101c to i32*
  %v3_1101c = load i32, i32* %v2_1101c, align 4
  %v1_11020 = urem i32 %v3_1101c, 2
  %v2_11020 = icmp eq i32 %v1_11020, 0
  br i1 %v2_11020, label %dec_label_pc_11054, label %dec_label_pc_11028

dec_label_pc_11028:                               ; preds = %dec_label_pc_1101c
  %v0_11028 = load i32, i32* @r4, align 4
  %v1_11028 = add i32 %v0_11028, 3
  %v3_1102c = udiv i32 %v1_11028, 4
  store i32 %v3_1102c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v1_11028, 4
  br i1 %tmp, label %dec_label_pc_11054, label %dec_label_pc_11034

dec_label_pc_11034:                               ; preds = %dec_label_pc_11028
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11038

dec_label_pc_11038:                               ; preds = %.thread, %dec_label_pc_11034
  %v0_110482 = phi i32 [ %v1_11048, %.thread ], [ %v3_1102c, %dec_label_pc_11034 ]
  %v2_11044 = phi i32 [ %v1_1104c, %.thread ], [ 0, %dec_label_pc_11034 ]
  %v2_11038 = add i32 %v2_11044, %v0_11010
  %v3_11038 = inttoptr i32 %v2_11038 to i32*
  %v4_11038 = load i32, i32* %v3_11038, align 4
  %v2_1103c = icmp eq i32 %v4_11038, 0
  br i1 %v2_1103c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_11038
  store i32 0, i32* %v3_11038, align 4
  %v0_11048.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_1104c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11038, %bb
  %v0_1104c = phi i32 [ %v2_11044, %dec_label_pc_11038 ], [ %v0_1104c.pre, %bb ]
  %v0_11048 = phi i32 [ %v0_110482, %dec_label_pc_11038 ], [ %v0_11048.pre, %bb ]
  %v1_11048 = add i32 %v0_11048, -1
  store i32 %v1_11048, i32* %r2.global-to-local, align 4
  %v7_11048 = icmp eq i32 %v0_11048, 1
  %v1_1104c = add i32 %v0_1104c, 4
  store i32 %v1_1104c, i32* %r1.global-to-local, align 4
  br i1 %v7_11048, label %dec_label_pc_11054.loopexit, label %dec_label_pc_11038

dec_label_pc_11054.loopexit:                      ; preds = %.thread
  br label %dec_label_pc_11054

dec_label_pc_11054:                               ; preds = %dec_label_pc_11054.loopexit, %dec_label_pc_11028, %dec_label_pc_1101c, %dec_label_pc_11008
  ret i32 %v0_11010

; uselistorder directives
  uselistorder i32 %v1_1104c, { 1, 0 }
  uselistorder i32 %v1_11048, { 1, 0 }
  uselistorder i32 %v2_11044, { 1, 0 }
  uselistorder i32 %v3_1102c, { 1, 0 }
  uselistorder i32 %v0_11010, { 1, 0, 2, 3 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1105c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1105c:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_1105c = load i32, i32* @r4, align 4
  store i32 %v3_1105c, i32* %stack_var_-32, align 4
  %v6_1105c = load i32, i32* @r5, align 4
  %v9_1105c = load i32, i32* @r6, align 4
  %v12_1105c = load i32, i32* @r7, align 4
  %v15_1105c = load i32, i32* @r8, align 4
  %v18_1105c = load i32, i32* @sb, align 4
  %v21_1105c = load i32, i32* @sl, align 4
  %v24_1105c = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_11060 = icmp eq i32 %arg1, 0
  store i32 %arg2, i32* @r0, align 4
  br i1 %v2_11060, label %dec_label_pc_111f8, label %dec_label_pc_1106c

dec_label_pc_1106c:                               ; preds = %dec_label_pc_1105c
  store i32 2147479535, i32* %r3.global-to-local, align 4
  %v1_11074 = add i32 %arg2, -1
  %tmp = icmp ult i32 %v1_11074, 2147479536
  br i1 %tmp, label %.thread, label %dec_label_pc_11088

.thread:                                          ; preds = %dec_label_pc_1106c
  %v5_1107c = add i32 %arg2, 23
  store i32 %v5_1107c, i32* %r3.global-to-local, align 4
  %v5_11080 = and i32 %v5_1107c, -16
  br label %dec_label_pc_11094

dec_label_pc_11088:                               ; preds = %dec_label_pc_1106c
  %v2_11088 = icmp eq i32 %arg2, 0
  br i1 %v2_11088, label %dec_label_pc_11094, label %dec_label_pc_11224

dec_label_pc_11094:                               ; preds = %dec_label_pc_11088, %.thread
  %v0_1118c = phi i32 [ %v5_11080, %.thread ], [ 16, %dec_label_pc_11088 ]
  store i32 %v0_1118c, i32* @r5, align 4
  %v1_11094 = add i32 %arg1, -8
  store i32 %v1_11094, i32* @r4, align 4
  %v1_11098 = add i32 %arg1, -4
  %v2_11098 = inttoptr i32 %v1_11098 to i32*
  %v3_11098 = load i32, i32* %v2_11098, align 4
  %v1_1109c = urem i32 %v3_11098, 2
  store i32 %v1_1109c, i32* %r3.global-to-local, align 4
  %v2_1109c = icmp eq i32 %v1_1109c, 0
  %v1_110a0 = and i32 %v3_11098, -2
  store i32 %v1_110a0, i32* @r6, align 4
  br i1 %v2_1109c, label %dec_label_pc_110a8, label %dec_label_pc_11118

dec_label_pc_110a8:                               ; preds = %dec_label_pc_11094
  %v2_110a8 = inttoptr i32 %v1_11094 to i32*
  %v3_110a8 = load i32, i32* %v2_110a8, align 4
  store i32 %v3_110a8, i32* @r7, align 4
  %v1_110ac = urem i32 %v3_110a8, 2
  %v2_110ac = icmp eq i32 %v1_110ac, 0
  %v2_110b0 = add i32 %v3_110a8, %v0_1118c
  store i32 %v2_110b0, i32* @r8, align 4
  br i1 %v2_110ac, label %bb34, label %bb33

bb33:                                             ; preds = %dec_label_pc_110a8
  call void @llvm.trap()
  unreachable

bb34:                                             ; preds = %dec_label_pc_110a8
  %v3_110bc = icmp ult i32 %v2_110b0, 4094
  br i1 %v3_110bc, label %dec_label_pc_1118c, label %dec_label_pc_110c0

dec_label_pc_110c0:                               ; preds = %dec_label_pc_1118c.dec_label_pc_110c0_crit_edge, %bb34
  %v1_110cc = phi i32 [ %v1_110cc.pre, %dec_label_pc_1118c.dec_label_pc_110c0_crit_edge ], [ %v3_110a8, %bb34 ]
  %v0_110cc = phi i32 [ %v0_110cc.pre, %dec_label_pc_1118c.dec_label_pc_110c0_crit_edge ], [ %v1_110a0, %bb34 ]
  %v0_110c0 = phi i32 [ %v0_110c0.pre, %dec_label_pc_1118c.dec_label_pc_110c0_crit_edge ], [ %v2_110b0, %bb34 ]
  %v1_110c4 = add i32 %v0_110c0, 4095
  store i32 %v1_110c4, i32* %r3.global-to-local, align 4
  %v2_110cc = add i32 %v1_110cc, %v0_110cc
  store i32 %v2_110cc, i32* %r6.global-to-local, align 4
  %v1_110d0 = and i32 %v1_110c4, -4096
  store i32 %v1_110d0, i32* %r5.global-to-local, align 4
  %v9_110d4 = icmp eq i32 %v2_110cc, %v1_110d0
  br i1 %v9_110d4, label %bb37, label %dec_label_pc_110dc

dec_label_pc_110dc:                               ; preds = %dec_label_pc_110c0
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 %v1_110d0, i32* @r2, align 4
  %v1_110e4 = load i32, i32* @r4, align 4
  %v2_110e4 = sub i32 %v1_110e4, %v1_110cc
  store i32 %v2_110e4, i32* @r0, align 4
  store i32 %v2_110cc, i32* %r1.global-to-local, align 4
  %v4_110ec = call i32 @function_1134c(i32 %v2_110e4, i32 %v2_110cc, i32 %v1_110d0, i32 1)
  store i32 %v4_110ec, i32* %r0.global-to-local, align 4
  %v3_110f0 = icmp eq i32 %v4_110ec, -1
  %v8_110f0 = icmp eq i32 %v4_110ec, -1
  br i1 %v8_110f0, label %.thread3, label %bb35

bb35:                                             ; preds = %dec_label_pc_110dc
  %v1_110f4 = load i32, i32* @r7, align 4
  %v3_110f4 = add i32 %v1_110f4, %v4_110ec
  store i32 %v3_110f4, i32* %r3.global-to-local, align 4
  %v2_110f8 = load i32, i32* %r5.global-to-local, align 4
  %v3_110f8 = sub i32 %v2_110f8, %v1_110f4
  %v2_110fc = add i32 %v3_110f4, 8
  store i32 %v2_110fc, i32* @sb, align 4
  %v3_11100 = add i32 %v3_110f4, 4
  %v4_11100 = inttoptr i32 %v3_11100 to i32*
  store i32 %v3_110f8, i32* %v4_11100, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_110dc, %bb35
  br i1 %v3_110f0, label %dec_label_pc_11108, label %dec_label_pc_11154

dec_label_pc_11108:                               ; preds = %.thread3
  %v0_11108 = load i32, i32* %r6.global-to-local, align 4
  %v1_11108 = load i32, i32* %r5.global-to-local, align 4
  %tmp41 = icmp ugt i32 %v0_11108, %v1_11108
  br i1 %tmp41, label %bb37, label %bb36

bb36:                                             ; preds = %dec_label_pc_11108
  store i32 0, i32* @sl, align 4
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_11108, %dec_label_pc_110c0, %bb36
  %v0_11110 = load i32, i32* @sl, align 4
  store i32 %v0_11110, i32* @sb, align 4
  br label %dec_label_pc_11154

dec_label_pc_11118:                               ; preds = %dec_label_pc_11094
  %v2_11118 = add i32 %v1_110a0, %v1_11094
  %v3_11118 = inttoptr i32 %v2_11118 to i32*
  %v4_11118 = load i32, i32* %v3_11118, align 4
  store i32 %v4_11118, i32* %r3.global-to-local, align 4
  %v9_1111c = icmp eq i32 %v3_11098, %v4_11118
  br i1 %v9_1111c, label %.thread4, label %bb38

bb38:                                             ; preds = %dec_label_pc_11118
  store i32 0, i32* %r3.global-to-local, align 4
  call void @llvm.trap()
  unreachable

.thread4:                                         ; preds = %dec_label_pc_11118
  %v3_11128 = icmp ult i32 %v1_110a0, %v0_1118c
  br i1 %v3_11128, label %dec_label_pc_111b4, label %.thread9

.thread9:                                         ; preds = %.thread4
  %v2_1112c = or i32 %v3_11098, 1
  store i32 %v2_1112c, i32* %r3.global-to-local, align 4
  store i32 %v2_11118, i32* @r7, align 4
  store i32 %v2_1112c, i32* %v3_11118, align 4
  %v1_11138 = load i32, i32* %r3.global-to-local, align 4
  %v2_11138 = load i32, i32* @r4, align 4
  %v3_11138 = add i32 %v2_11138, 4
  %v4_11138 = inttoptr i32 %v3_11138 to i32*
  store i32 %v1_11138, i32* %v4_11138, align 4
  br label %dec_label_pc_11140

dec_label_pc_11140:                               ; preds = %dec_label_pc_11200, %.thread9
  %v0_11140 = load i32, i32* %r3.global-to-local, align 4
  %v1_11140 = and i32 %v0_11140, -2
  store i32 %v1_11140, i32* %r1.global-to-local, align 4
  %v1_11144 = add i32 %v1_11140, -16
  %v1_11148 = load i32, i32* @r5, align 4
  %tmp42 = icmp ugt i32 %v1_11144, %v1_11148
  br i1 %tmp42, label %dec_label_pc_11160, label %dec_label_pc_11150

dec_label_pc_11150:                               ; preds = %dec_label_pc_11140, %dec_label_pc_11160
  %v0_11150 = load i32, i32* @r4, align 4
  %v1_11150 = add i32 %v0_11150, 8
  store i32 %v1_11150, i32* @sb, align 4
  br label %dec_label_pc_11154

dec_label_pc_11154:                               ; preds = %.thread3, %dec_label_pc_111d0, %dec_label_pc_11224, %dec_label_pc_111e0, %dec_label_pc_1119c, %bb37, %dec_label_pc_11150
  %v0_11154 = load i32, i32* @sb, align 4
  store i32 %v0_11154, i32* %r0.global-to-local, align 4
  %v2_11158 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11158, i32* @r4, align 4
  store i32 %v6_1105c, i32* @r5, align 4
  store i32 %v9_1105c, i32* @r6, align 4
  store i32 %v12_1105c, i32* @r7, align 4
  store i32 %v15_1105c, i32* @r8, align 4
  store i32 %v18_1105c, i32* @sb, align 4
  store i32 %v21_1105c, i32* @sl, align 4
  store i32 %v24_1105c, i32* @lr, align 4
  ret i32 %v0_11154

dec_label_pc_11160:                               ; preds = %dec_label_pc_11140
  %v2_11160 = sub i32 %v1_11140, %v1_11148
  %v1_11164 = or i32 %v2_11160, 1
  store i32 %v1_11164, i32* %r3.global-to-local, align 4
  %v0_11168 = load i32, i32* @r4, align 4
  %v2_11168 = add i32 %v0_11168, %v1_11148
  store i32 %v2_11168, i32* %r0.global-to-local, align 4
  %v1_1116c = or i32 %v1_11148, 1
  store i32 %v1_1116c, i32* @r2, align 4
  %v2_11170 = add i32 %v2_11168, 4
  %v3_11170 = inttoptr i32 %v2_11170 to i32*
  store i32 %v1_11164, i32* %v3_11170, align 4
  %v0_11174 = load i32, i32* @r2, align 4
  %v1_11174 = load i32, i32* @r4, align 4
  %v2_11174 = load i32, i32* @r5, align 4
  %v3_11174 = add i32 %v2_11174, %v1_11174
  %v4_11174 = inttoptr i32 %v3_11174 to i32*
  store i32 %v0_11174, i32* %v4_11174, align 4
  %v0_11178 = load i32, i32* @r2, align 4
  %v1_11178 = load i32, i32* @r4, align 4
  %v2_11178 = add i32 %v1_11178, 4
  %v3_11178 = inttoptr i32 %v2_11178 to i32*
  store i32 %v0_11178, i32* %v3_11178, align 4
  %v0_1117c = load i32, i32* %r3.global-to-local, align 4
  %v1_1117c = load i32, i32* @r4, align 4
  %v2_1117c = load i32, i32* %r1.global-to-local, align 4
  %v3_1117c = add i32 %v2_1117c, %v1_1117c
  %v4_1117c = inttoptr i32 %v3_1117c to i32*
  store i32 %v0_1117c, i32* %v4_1117c, align 4
  %v0_11180 = load i32, i32* %r0.global-to-local, align 4
  %v1_11180 = add i32 %v0_11180, 8
  store i32 %v1_11180, i32* %r0.global-to-local, align 4
  %v1_11184 = call i32 @function_10414(i32 %v1_11180)
  store i32 %v1_11184, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11150

dec_label_pc_1118c:                               ; preds = %bb34
  store i32 %v0_1118c, i32* @r0, align 4
  %v0_11190 = call i32 @function_10910()
  store i32 %v0_11190, i32* %r0.global-to-local, align 4
  store i32 %v0_11190, i32* @sb, align 4
  %v2_11194 = icmp eq i32 %v0_11190, 0
  br i1 %v2_11194, label %dec_label_pc_1118c.dec_label_pc_110c0_crit_edge, label %dec_label_pc_1119c

dec_label_pc_1118c.dec_label_pc_110c0_crit_edge:  ; preds = %dec_label_pc_1118c
  %v0_110c0.pre = load i32, i32* @r8, align 4
  %v0_110cc.pre = load i32, i32* @r6, align 4
  %v1_110cc.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_110c0

dec_label_pc_1119c:                               ; preds = %dec_label_pc_1118c
  %v0_1119c = load i32, i32* @r5, align 4
  %v1_1119c = add i32 %v0_1119c, -8
  %v0_111a0 = load i32, i32* @sl, align 4
  store i32 %v0_111a0, i32* %r1.global-to-local, align 4
  %v3_111a4 = inttoptr i32 %v0_11190 to i16*
  %v4_111a4 = call i32 @function_11cfc(i16* %v3_111a4, i32 %v0_111a0, i32 %v1_1119c)
  %v0_111a8 = load i32, i32* @sl, align 4
  store i32 %v0_111a8, i32* %r0.global-to-local, align 4
  %v1_111ac = call i32 @function_10414(i32 %v0_111a8)
  store i32 %v1_111ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11154

dec_label_pc_111b4:                               ; preds = %.thread4
  store i32 %v2_11118, i32* @r7, align 4
  store i32 %v2_11118, i32* %r0.global-to-local, align 4
  %v1_111b8 = call i32 @function_10184(i32 %v2_11118)
  store i32 %v1_111b8, i32* %r0.global-to-local, align 4
  %v2_111bc = icmp eq i32 %v1_111b8, 0
  br i1 %v2_111bc, label %.thread12, label %dec_label_pc_11200

.thread12:                                        ; preds = %dec_label_pc_111b4
  %v1_111c0 = load i32, i32* @r6, align 4
  %v2_111c0 = or i32 %v1_111c0, 1
  store i32 %v2_111c0, i32* %r3.global-to-local, align 4
  %v2_111c4 = load i32, i32* @r4, align 4
  %v4_111c4 = add i32 %v2_111c4, %v1_111c0
  %v5_111c4 = inttoptr i32 %v4_111c4 to i32*
  store i32 %v2_111c0, i32* %v5_111c4, align 4
  %v1_111c8 = load i32, i32* %r3.global-to-local, align 4
  %v2_111c8 = load i32, i32* @r4, align 4
  %v3_111c8 = add i32 %v2_111c8, 4
  %v4_111c8 = inttoptr i32 %v3_111c8 to i32*
  store i32 %v1_111c8, i32* %v4_111c8, align 4
  br label %dec_label_pc_111d0

dec_label_pc_111d0:                               ; preds = %dec_label_pc_11200, %.thread12
  %v0_111d0 = load i32, i32* @r5, align 4
  %v1_111d0 = add i32 %v0_111d0, -8
  store i32 %v1_111d0, i32* @r0, align 4
  %v0_111d4 = call i32 @function_10910()
  store i32 %v0_111d4, i32* %r0.global-to-local, align 4
  store i32 %v0_111d4, i32* @sb, align 4
  %v2_111d8 = icmp eq i32 %v0_111d4, 0
  br i1 %v2_111d8, label %dec_label_pc_11154, label %dec_label_pc_111e0

dec_label_pc_111e0:                               ; preds = %dec_label_pc_111d0
  %v0_111e0 = load i32, i32* @sl, align 4
  store i32 %v0_111e0, i32* %r1.global-to-local, align 4
  %v0_111e4 = load i32, i32* @r6, align 4
  %v1_111e4 = add i32 %v0_111e4, -8
  %v3_111e8 = inttoptr i32 %v0_111d4 to i16*
  %v4_111e8 = call i32 @function_11cfc(i16* %v3_111e8, i32 %v0_111e0, i32 %v1_111e4)
  %v0_111ec = load i32, i32* @r4, align 4
  %v1_111ec = add i32 %v0_111ec, 8
  store i32 %v1_111ec, i32* %r0.global-to-local, align 4
  %v1_111f0 = call i32 @function_10414(i32 %v1_111ec)
  store i32 %v1_111f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11154

dec_label_pc_111f8:                               ; preds = %dec_label_pc_1105c
  store i32 %v21_1105c, i32* @sl, align 4
  %v0_111fc = call i32 @function_10910()
  store i32 %v0_111fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11200

dec_label_pc_11200:                               ; preds = %dec_label_pc_111b4, %dec_label_pc_111f8
  %v0_11200 = load i32, i32* @r7, align 4
  %v1_11200 = add i32 %v0_11200, 4
  %v2_11200 = inttoptr i32 %v1_11200 to i32*
  %v3_11200 = load i32, i32* %v2_11200, align 4
  %v1_11204 = and i32 %v3_11200, -2
  %v1_11208 = load i32, i32* @r6, align 4
  %v2_11208 = add i32 %v1_11208, %v1_11204
  %v1_1120c = load i32, i32* @r5, align 4
  %v3_1120c = icmp ult i32 %v2_11208, %v1_1120c
  %v1_11210 = or i32 %v2_11208, 1
  store i32 %v1_11210, i32* %r3.global-to-local, align 4
  %v3_11214 = add i32 %v1_11204, %v0_11200
  %v4_11214 = inttoptr i32 %v3_11214 to i32*
  store i32 %v1_11210, i32* %v4_11214, align 4
  %v0_11218 = load i32, i32* %r3.global-to-local, align 4
  %v1_11218 = load i32, i32* @r4, align 4
  %v2_11218 = add i32 %v1_11218, 4
  %v3_11218 = inttoptr i32 %v2_11218 to i32*
  store i32 %v0_11218, i32* %v3_11218, align 4
  br i1 %v3_1120c, label %dec_label_pc_111d0, label %dec_label_pc_11140

dec_label_pc_11224:                               ; preds = %dec_label_pc_11088
  %v0_11224 = call i32 @function_fb60()
  store i32 %v0_11224, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_11230 = inttoptr i32 %v0_11224 to i32*
  store i32 12, i32* %v2_11230, align 4
  br label %dec_label_pc_11154

; uselistorder directives
  uselistorder i32 %v1_11148, { 2, 1, 3, 0 }
  uselistorder i32 %v2_11118, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_110f4, { 1, 0 }
  uselistorder i32 %v4_110ec, { 1, 0, 2, 3 }
  uselistorder i32 %v2_110cc, { 1, 0, 2, 3 }
  uselistorder i32 %v2_110b0, { 1, 0, 2 }
  uselistorder i32 %v3_110a8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_110a0, { 2, 1, 0, 3 }
  uselistorder i32 %v1_1109c, { 1, 0 }
  uselistorder i32 %v3_11098, { 1, 2, 3, 0 }
  uselistorder i32 %v0_1118c, { 0, 2, 1, 3 }
  uselistorder i32 %v21_1105c, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 14, 13, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 6, 8, 7, 9, 10, 11, 16, 12, 13, 14, 15, 1, 0 }
  uselistorder i32 (i32)* @function_10184, { 1, 0 }
  uselistorder i32 ()* @function_10910, { 31, 2, 1, 0, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 (i32)* @function_10414, { 4, 3, 2, 0, 5, 1 }
  uselistorder i32 %arg2, { 1, 0, 3, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11200, { 1, 0 }
  uselistorder label %dec_label_pc_11154, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder label %dec_label_pc_11150, { 1, 0 }
  uselistorder label %bb37, { 2, 0, 1 }
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_11238(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11238:
  store i32 %arg2, i32* @r2, align 4
  %v0_1125c = call i32 @function_fe0c()
  ret i32 %v0_1125c
}

define i32 @function_11270(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11270:
  %v0_1127c = call i32 @function_fe0c()
  ret i32 %v0_1127c
}

define i32 @function_11288() local_unnamed_addr {
dec_label_pc_11288:
  %v1_11288 = load i32, i32* @r0, align 4
  ret i32 %v1_11288
}

define i32 @function_1128c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1128c:
  %fp.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %v2_112a4 = urem i32 %arg6, 4096
  %v2_112a8 = and i32 %arg7, -4096
  %v2_112ac = or i32 %v2_112a8, %v2_112a4
  %v4_112ac = icmp eq i32 %v2_112ac, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg3, i32* %fp.global-to-local, align 4
  %v0_112bc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_112bc, i32* %sl.global-to-local, align 4
  br i1 %v4_112ac, label %dec_label_pc_112d4, label %dec_label_pc_112c4

dec_label_pc_112c4:                               ; preds = %dec_label_pc_1128c
  %v0_112c4 = call i32 @function_fb60()
  br label %dec_label_pc_112e8

dec_label_pc_112d4:                               ; preds = %dec_label_pc_1128c
  %tmp = icmp ult i32 %arg2, 2147483647
  br i1 %tmp, label %dec_label_pc_112f0, label %dec_label_pc_112dc

dec_label_pc_112dc:                               ; preds = %dec_label_pc_112d4
  %v0_112dc = call i32 @function_fb60()
  br label %dec_label_pc_112e8

dec_label_pc_112e8:                               ; preds = %dec_label_pc_112c4, %dec_label_pc_112dc
  %storemerge1 = phi i32 [ %v0_112c4, %dec_label_pc_112c4 ], [ %v0_112dc, %dec_label_pc_112dc ]
  %storemerge = phi i32 [ 22, %dec_label_pc_112c4 ], [ 12, %dec_label_pc_112dc ]
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %storemerge, i32* @r3, align 4
  %v2_112e8 = inttoptr i32 %storemerge1 to i32*
  store i32 %storemerge, i32* %v2_112e8, align 4
  %v0_11330.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11330

dec_label_pc_112f0:                               ; preds = %dec_label_pc_112d4
  %v1_112f0 = and i32 %v0_112bc, 16
  %v2_112f0 = icmp eq i32 %v1_112f0, 0
  br i1 %v2_112f0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_112f0
  store i32 70280, i32* %r3.global-to-local, align 4
  store i32 70400, i32* @lr, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_112f0, %bb
  %v2_112fc = xor i1 %v2_112f0, true
  call void @__pseudo_cond_branch(i1 %v2_112fc, i32 ptrtoint (i32* @global_var_11288.384 to i32))
  %v0_11310 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11310, i32* @r0, align 4
  %v0_11314 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_11314, i32* @r2, align 4
  %v0_11318 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_11318, i32* @r3, align 4
  %v3_1131c = load i32, i32* %stack_var_0, align 4
  store i32 %v3_1131c, i32* @r4, align 4
  %v0_11328 = call i32 @function_fe0c()
  store i32 %v0_11328, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11330

dec_label_pc_11330:                               ; preds = %dec_label_pc_112e8, %.thread
  %v0_11330 = phi i32 [ %v0_11330.pre, %dec_label_pc_112e8 ], [ %v0_11328, %.thread ]
  ret i32 %v0_11330

; uselistorder directives
  uselistorder i32* %stack_var_0, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 3, 1, 2, 0 }
  uselistorder i32 -4096, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_11330, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_112e8, { 1, 0 }
}

define i32 @function_1134c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1134c:
  store i32 %arg2, i32* @r4, align 4
  %v0_11370 = call i32 @function_fe0c()
  ret i32 %v0_11370
}

define i32 @function_11388(i32 %arg1) local_unnamed_addr {
dec_label_pc_11388:
  store i32 %arg1, i32* @r0, align 4
  store i32 70280, i32* @r3, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 70564, i32* @lr, align 4
  %v1_113a0 = call i32 @function_11288()
  %v0_113a4 = load i32, i32* @r4, align 4
  store i32 %v0_113a4, i32* @r0, align 4
  %v0_113b0 = call i32 @function_fe0c()
  ret i32 %v0_113b0
}

define i32 @function_113c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_113c0:
  store i32 %arg1, i32* @r1, align 4
  store i32 %arg2, i32* @r2, align 4
  %v3_113ec = call i32 @function_12360(i32 285, i32 %arg1, i32 %arg2)
  store i32 %v3_113ec, i32* @r0, align 4
  %v0_113f0 = call i32 @function_fe0c()
  ret i32 %v0_113f0

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @function_11404(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11404:
  store i32 %arg1, i32* @r0, align 4
  %v3_11408 = load i32, i32* @r4, align 4
  store i32 0, i32* @r4, align 4
  %v0_1141c = call i32 @function_fe0c()
  store i32 %v3_11408, i32* @r4, align 4
  ret i32 %v0_1141c
}

define i32 @function_1142c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1142c:
  store i32 %arg1, i32* @r1, align 4
  store i32 %arg2, i32* @r2, align 4
  %v3_11458 = call i32 @function_12360(i32 283, i32 %arg1, i32 %arg2)
  store i32 %v3_11458, i32* @r0, align 4
  %v0_1145c = call i32 @function_fe0c()
  ret i32 %v0_1145c

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @function_11470(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11470:
  store i32 %arg1, i32* @r0, align 4
  %v3_11474 = load i32, i32* @r4, align 4
  store i32 0, i32* @r4, align 4
  %v0_11488 = call i32 @function_fe0c()
  store i32 %v3_11474, i32* @r4, align 4
  ret i32 %v0_11488
}

define i32 @function_11498(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11498:
  store i32 %arg1, i32* @r0, align 4
  %v3_11498 = load i32, i32* @r4, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_114ac = call i32 @function_fe0c()
  store i32 %v3_11498, i32* @r4, align 4
  ret i32 %v0_114ac
}

define i32 @function_114bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_114bc:
  %v2_114d8 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v2_114d8
}

define i32 @function_114e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_114e0:
  %v3_114e0 = udiv i32 %arg1, 256
  %v4_114e4 = mul i32 %arg1, 256
  %v5_114e4 = or i32 %v4_114e4, %v3_114e0
  %v3_114ec = urem i32 %v5_114e4, 65536
  ret i32 %v3_114ec
}

define i32 @function_114f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_114f4:
  %stack_var_-12 = alloca i32, align 4
  %v2_114fc = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_114fc, i32* @r1, align 4
  %v0_11500 = call i32 @function_1151c()
  %v2_11504 = icmp eq i32 %v0_11500, 0
  %v4_11508 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_11504, i32 -1, i32 %v4_11508
  ret i32 %storemerge
}

define i32 @function_1151c() local_unnamed_addr {
dec_label_pc_1151c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-28 = alloca i8*, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_1151c = load i32, i32* @r4, align 4
  %v6_1151c = load i32, i32* @r5, align 4
  %v9_1151c = load i32, i32* @r6, align 4
  %v12_1151c = load i32, i32* @r7, align 4
  %v15_1151c = load i32, i32* @r8, align 4
  %v2_11524 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_11524, i32* @r4, align 4
  %v0_11528 = load i32, i32* @r0, align 4
  store i32 %v0_11528, i32* @r5, align 4
  %v0_1152c = load i32, i32* @r1, align 4
  store i32 %v0_1152c, i32* @r8, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_1153c = bitcast i32* %stack_var_-44 to i8*
  %v4_1153c = call i32 @function_12154(i8* %v3_1153c, i32 0, i32 16)
  store i32 %v2_11524, i32* @r7, align 4
  %v2_11544 = ptrtoint i8** %stack_var_-28 to i32
  store i32 %v2_11544, i32* @r6, align 4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_1154c

dec_label_pc_1154c:                               ; preds = %dec_label_pc_115b4, %dec_label_pc_1151c
  store i32 %v2_11544, i32* @r1, align 4
  %v0_11550 = load i32, i32* @r5, align 4
  store i32 %v0_11550, i32* @r0, align 4
  store i32 0, i32* @r2, align 4
  %v3_11558 = call i32 @function_11c88(i32 %v0_11550, i32 %v2_11544, i32 0)
  %v3_1155c = load i8*, i8** %stack_var_-28, align 4
  %v4_1155c = ptrtoint i8* %v3_1155c to i32
  store i32 %v4_1155c, i32* %r1.global-to-local, align 4
  %v1_11560 = load i32, i32* @r5, align 4
  %v9_11560 = icmp eq i32 %v4_1155c, %v1_11560
  br i1 %v9_11560, label %dec_label_pc_11630, label %dec_label_pc_11568

dec_label_pc_11568:                               ; preds = %dec_label_pc_1154c
  %v2_11568 = load i8, i8* %v3_1155c, align 1
  %v3_11568 = zext i8 %v2_11568 to i32
  store i32 %v3_11568, i32* %r2.global-to-local, align 4
  %v2_1156c = icmp eq i8 %v2_11568, 0
  br i1 %v2_1156c, label %dec_label_pc_11578, label %bb

bb:                                               ; preds = %dec_label_pc_11568
  %v8_11570 = icmp eq i8 %v2_11568, 46
  br i1 %v8_11570, label %dec_label_pc_11578, label %dec_label_pc_11630

dec_label_pc_11578:                               ; preds = %dec_label_pc_11568, %bb
  %v1_11578 = inttoptr i32 %v1_11560 to i8*
  %v2_11578 = load i8, i8* %v1_11578, align 1
  %v3_11578 = zext i8 %v2_11578 to i32
  %v1_1157c = add nsw i32 %v3_11578, -48
  %v1_11584 = add i32 %v4_1155c, 1
  store i32 %v1_11584, i32* @r5, align 4
  %tmp = icmp ugt i32 %v1_1157c, 9
  br i1 %tmp, label %dec_label_pc_11630, label %dec_label_pc_1158c

dec_label_pc_1158c:                               ; preds = %dec_label_pc_11578
  %v1_11590 = load i32, i32* @r7, align 4
  %v2_11590 = load i32, i32* @r4, align 4
  %v5_11590 = mul i32 %v2_11590, 4
  %v6_11590 = add i32 %v5_11590, %v1_11590
  %v7_11590 = inttoptr i32 %v6_11590 to i32*
  store i32 %v3_11558, i32* %v7_11590, align 4
  %v0_11598 = load i32, i32* @r4, align 4
  br i1 %v2_1156c, label %dec_label_pc_11598, label %dec_label_pc_115b4

dec_label_pc_11598:                               ; preds = %dec_label_pc_1158c
  %v7_11598 = icmp eq i32 %v0_11598, 1
  br i1 %v7_11598, label %dec_label_pc_115d4, label %dec_label_pc_115a0

dec_label_pc_115a0:                               ; preds = %dec_label_pc_11598
  %v7_115a0 = icmp eq i32 %v0_11598, 2
  br i1 %v7_115a0, label %dec_label_pc_115ec, label %dec_label_pc_115a8

dec_label_pc_115a8:                               ; preds = %dec_label_pc_115a0
  %v2_115a8 = icmp eq i32 %v0_11598, 0
  br i1 %v2_115a8, label %dec_label_pc_115c4, label %dec_label_pc_11600

dec_label_pc_115b4:                               ; preds = %dec_label_pc_1158c
  %v1_115b4 = add i32 %v0_11598, 1
  store i32 %v1_115b4, i32* @r4, align 4
  %v7_115b8 = icmp eq i32 %v1_115b4, 4
  br i1 %v7_115b8, label %dec_label_pc_11630, label %dec_label_pc_1154c

dec_label_pc_115c4:                               ; preds = %dec_label_pc_115a8
  %v3_115c4 = load i32, i32* %stack_var_-44, align 4
  %v3_115c8 = udiv i32 %v3_115c4, 16777216
  store i32 %v3_115c8, i32* %r2.global-to-local, align 4
  %v1_115cc = urem i32 %v3_115c4, 16777216
  store i32 %v3_115c8, i32* %stack_var_-44, align 4
  br label %dec_label_pc_115d4

dec_label_pc_115d4:                               ; preds = %dec_label_pc_11598, %dec_label_pc_115c4
  %stack_var_-40.0 = phi i32 [ %tmp6, %dec_label_pc_11598 ], [ %v1_115cc, %dec_label_pc_115c4 ]
  %v3_115dc = urem i32 %stack_var_-40.0, 65536
  %v3_115e0 = udiv i32 %stack_var_-40.0, 65536
  store i32 %v3_115e0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_115ec

dec_label_pc_115ec:                               ; preds = %dec_label_pc_115a0, %dec_label_pc_115d4
  %stack_var_-36.0 = phi i32 [ %v3_115dc, %dec_label_pc_115d4 ], [ %tmp5, %dec_label_pc_115a0 ]
  %v3_115f0 = udiv i32 %stack_var_-36.0, 256
  store i32 %v3_115f0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11600

dec_label_pc_11600:                               ; preds = %dec_label_pc_115a8, %dec_label_pc_115ec
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v2_11524, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11608

dec_label_pc_11608:                               ; preds = %dec_label_pc_11614.dec_label_pc_11608_crit_edge, %dec_label_pc_11600
  %v2_11614 = phi i32 [ %v1_11618, %dec_label_pc_11614.dec_label_pc_11608_crit_edge ], [ 0, %dec_label_pc_11600 ]
  %v0_11608 = phi i32 [ %v0_11608.pre, %dec_label_pc_11614.dec_label_pc_11608_crit_edge ], [ %v2_11524, %dec_label_pc_11600 ]
  %v4_11608 = mul i32 %v2_11614, 4
  %v5_11608 = add i32 %v4_11608, %v0_11608
  %v6_11608 = inttoptr i32 %v5_11608 to i32*
  %v7_11608 = load i32, i32* %v6_11608, align 4
  %tmp18 = icmp ugt i32 %v7_11608, 255
  br i1 %tmp18, label %dec_label_pc_11630, label %dec_label_pc_11614

dec_label_pc_11614:                               ; preds = %dec_label_pc_11608
  %v1_11614 = trunc i32 %v7_11608 to i8
  %v3_11614 = load i32, i32* @r8, align 4
  %v4_11614 = add i32 %v3_11614, %v2_11614
  %v5_11614 = inttoptr i32 %v4_11614 to i8*
  store i8 %v1_11614, i8* %v5_11614, align 1
  %v0_11618 = load i32, i32* %r2.global-to-local, align 4
  %v1_11618 = add i32 %v0_11618, 1
  store i32 %v1_11618, i32* %r2.global-to-local, align 4
  %v7_1161c = icmp eq i32 %v1_11618, 4
  br i1 %v7_1161c, label %dec_label_pc_11630, label %dec_label_pc_11614.dec_label_pc_11608_crit_edge

dec_label_pc_11614.dec_label_pc_11608_crit_edge:  ; preds = %dec_label_pc_11614
  %v0_11608.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11608

dec_label_pc_11630:                               ; preds = %dec_label_pc_1154c, %dec_label_pc_11578, %dec_label_pc_115b4, %bb, %dec_label_pc_11608, %dec_label_pc_11614
  %storemerge = phi i32 [ 1, %dec_label_pc_11614 ], [ 0, %dec_label_pc_11608 ], [ 0, %bb ], [ 0, %dec_label_pc_115b4 ], [ 0, %dec_label_pc_11578 ], [ 0, %dec_label_pc_1154c ]
  store i32 %v3_1151c, i32* @r4, align 4
  store i32 %v6_1151c, i32* @r5, align 4
  store i32 %v9_1151c, i32* @r6, align 4
  store i32 %v12_1151c, i32* @r7, align 4
  store i32 %v15_1151c, i32* @r8, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11618, { 1, 2, 0 }
  uselistorder i32 %v7_11608, { 1, 0 }
  uselistorder i32 %v3_115c8, { 1, 0 }
  uselistorder i32 %v3_115c4, { 1, 0 }
  uselistorder i32 %v0_11598, { 3, 0, 1, 2 }
  uselistorder i32 %v2_11544, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 2, 0, 3 }
  uselistorder i8** %stack_var_-28, { 1, 0 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11630, { 5, 4, 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_11600, { 1, 0 }
  uselistorder label %dec_label_pc_115ec, { 1, 0 }
  uselistorder label %dec_label_pc_115d4, { 1, 0 }
  uselistorder label %dec_label_pc_11578, { 1, 0 }
}

define i32 @function_1163c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1163c:
  store i32 0, i32* @r2, align 4
  %v3_11640 = load i32, i32* @r4, align 4
  store i32 0, i32* @r4, align 4
  %v0_11658 = call i32 @function_fe0c()
  store i32 %v3_11640, i32* @r4, align 4
  ret i32 %v0_11658
}

define i32 @function_11664(i32 %arg1) local_unnamed_addr {
dec_label_pc_11664:
  %v2_11680 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v2_11680
}

define i32 @function_11688(i32 %arg1) local_unnamed_addr {
dec_label_pc_11688:
  %v3_11688 = udiv i32 %arg1, 256
  %v4_1168c = mul i32 %arg1, 256
  %v5_1168c = or i32 %v4_1168c, %v3_11688
  %v3_11694 = urem i32 %v5_1168c, 65536
  ret i32 %v3_11694
}

define i32 @function_1169c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1169c:
  %v0_116b0 = call i32 @function_116c0()
  ret i32 %v0_116b0

; uselistorder directives
  uselistorder i32 ()* @function_116c0, { 2, 1, 0 }
}

define i32 @function_116c0() local_unnamed_addr {
dec_label_pc_116c0:
  %v0_116c0 = load i32, i32* @lr, align 4
  %v0_116c4 = load i32, i32* @r1, align 4
  %v0_116cc = load i32, i32* @r2, align 4
  store i32 %v0_116cc, i32* @lr, align 4
  store i32 %v0_116c4, i32* @r2, align 4
  %v0_116e0 = load i32, i32* @r0, align 4
  store i32 %v0_116e0, i32* @r1, align 4
  %v3_116f4 = call i32 @function_12360(i32 292, i32 %v0_116e0, i32 %v0_116c4)
  store i32 %v3_116f4, i32* @r0, align 4
  %v0_116f8 = call i32 @function_fe0c()
  store i32 %v0_116c0, i32* @lr, align 4
  ret i32 %v0_116f8
}

define i32 @function_11708(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11708:
  %v0_1171c = call i32 @function_1172c()
  ret i32 %v0_1171c

; uselistorder directives
  uselistorder i32 ()* @function_1172c, { 6, 9, 1, 8, 7, 5, 4, 3, 2, 0 }
}

define i32 @function_1172c() local_unnamed_addr {
dec_label_pc_1172c:
  %v0_1172c = load i32, i32* @lr, align 4
  %v0_11730 = load i32, i32* @r1, align 4
  %v0_11738 = load i32, i32* @r2, align 4
  store i32 %v0_11738, i32* @lr, align 4
  store i32 %v0_11730, i32* @r2, align 4
  %v0_1174c = load i32, i32* @r0, align 4
  store i32 %v0_1174c, i32* @r1, align 4
  %v3_11760 = call i32 @function_12360(i32 290, i32 %v0_1174c, i32 %v0_11730)
  store i32 %v3_11760, i32* @r0, align 4
  %v0_11764 = call i32 @function_fe0c()
  store i32 %v0_1172c, i32* @lr, align 4
  ret i32 %v0_11764
}

define i32 @function_11778(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11778:
  %v3_11778 = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_1178c = call i32 @function_fe0c()
  store i32 %v3_11778, i32* @r4, align 4
  ret i32 %v0_1178c
}

define i32 @function_11798(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11798:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_11798 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11798, label %bb, label %dec_label_pc_11798._crit_edge

bb:                                               ; preds = %dec_label_pc_11798
  %v1_11798 = load i32, i32* %r0.global-to-local, align 4
  %v2_11798 = load i32, i32* @r6, align 4
  %v5_11798 = udiv i32 %v2_11798, 4
  %v6_11798 = and i32 %v5_11798, %v1_11798
  store i32 %v6_11798, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11798._crit_edge

dec_label_pc_11798._crit_edge:                    ; preds = %dec_label_pc_11798, %bb
  store i32 %arg2, i32* %r0.global-to-local, align 4
  ret i32 %arg2

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11798._crit_edge, { 1, 0 }
}

define i32 @function_117bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_117bc:
  store i32 %arg4, i32* @r2, align 4
  store i32 %arg5, i32* @r3, align 4
  ret i32 %arg2
}

define i32 @function_117e8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_117e8:
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v3_117e8 = load i32, i32* @r4, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg3, i32* %r8.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %v7_1181c = call i32 @function_117bc(i32 281, i32 %arg1, i32 %arg2, i32 %arg3, i32 0, i32 0, i32 0)
  store i32 %v7_1181c, i32* @r0, align 4
  %v0_11820 = call i32 @function_fe0c()
  %v1_11824 = icmp slt i32 %v0_11820, 0
  br i1 %v1_11824, label %dec_label_pc_1182c, label %dec_label_pc_118c8

dec_label_pc_1182c:                               ; preds = %dec_label_pc_117e8
  %v0_1182c = call i32 @function_fb60()
  %v1_11830 = inttoptr i32 %v0_1182c to i32*
  %v2_11830 = load i32, i32* %v1_11830, align 4
  %v7_11834 = icmp eq i32 %v2_11830, 22
  br i1 %v7_11834, label %dec_label_pc_1184c, label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %dec_label_pc_1182c
  %v0_1183c = call i32 @function_fb60()
  %v1_11840 = inttoptr i32 %v0_1183c to i32*
  %v2_11840 = load i32, i32* %v1_11840, align 4
  store i32 %v2_11840, i32* @r3, align 4
  %v7_11844 = icmp eq i32 %v2_11840, 93
  br i1 %v7_11844, label %dec_label_pc_1184c, label %dec_label_pc_118c8

dec_label_pc_1184c:                               ; preds = %dec_label_pc_1183c, %dec_label_pc_1182c
  %v0_11850 = load i32, i32* %r5.global-to-local, align 4
  %v2_11850 = and i32 %v0_11850, 526336
  store i32 %v2_11850, i32* @r3, align 4
  %v2_11854 = icmp eq i32 %v2_11850, 0
  br i1 %v2_11854, label %dec_label_pc_118c8, label %dec_label_pc_1185c

dec_label_pc_1185c:                               ; preds = %dec_label_pc_1184c
  %v0_11860 = load i32, i32* %r7.global-to-local, align 4
  %v1_11864 = and i32 %v0_11850, -526337
  %v0_11868 = load i32, i32* %r8.global-to-local, align 4
  %v0_11870 = load i32, i32* @r4, align 4
  %v7_1187c = call i32 @function_117bc(i32 281, i32 %v0_11860, i32 %v1_11864, i32 %v0_11868, i32 %v0_11870, i32 %v0_11870, i32 %v0_11870)
  store i32 %v7_1187c, i32* @r0, align 4
  %v0_11880 = call i32 @function_fe0c()
  %v1_11884 = icmp slt i32 %v0_11880, 0
  br i1 %v1_11884, label %dec_label_pc_118c8, label %dec_label_pc_1188c

dec_label_pc_1188c:                               ; preds = %dec_label_pc_1185c
  %v0_1188c = load i32, i32* %r5.global-to-local, align 4
  %v1_1188c = and i32 %v0_1188c, 524288
  %v2_1188c = icmp eq i32 %v1_1188c, 0
  br i1 %v2_1188c, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_1188c
  store i32 1, i32* @r3, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1188c, %bb
  %v1_118a0 = xor i1 %v2_1188c, true
  call void @__pseudo_cond_branch(i1 %v1_118a0, i32 ptrtoint (i32* @global_var_1179c.395 to i32))
  %v0_118a4 = load i32, i32* %r5.global-to-local, align 4
  %v1_118a4 = and i32 %v0_118a4, 2048
  %v2_118a4 = icmp eq i32 %v1_118a4, 0
  br i1 %v2_118a4, label %.thread5, label %bb15

bb15:                                             ; preds = %.thread2
  store i32 2048, i32* @r3, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread2, %bb15
  %v1_118b8 = xor i1 %v2_118a4, true
  call void @__pseudo_cond_branch(i1 %v1_118b8, i32 ptrtoint (i32* @global_var_1179c.395 to i32))
  br label %dec_label_pc_118c8

dec_label_pc_118c8:                               ; preds = %dec_label_pc_1184c, %dec_label_pc_117e8, %dec_label_pc_1183c, %.thread5, %dec_label_pc_1185c
  %storemerge.in = phi i32* [ @r4, %dec_label_pc_1185c ], [ @r4, %.thread5 ], [ @r6, %dec_label_pc_1183c ], [ @r6, %dec_label_pc_117e8 ], [ @r6, %dec_label_pc_1184c ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %v3_117e8, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 524288, { 4, 2, 0, 1, 3, 5 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_117bc, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_118c8, { 3, 4, 0, 2, 1 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_118d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_118d4:
  %v0_118d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_118d4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_118d4
  %v2_118d4 = load i32, i32* @sb, align 4
  %v8_118d4 = shl i32 %v2_118d4, %arg2
  %v9_118d4 = and i32 %v8_118d4, %arg1
  %v1_118d8 = load i32, i32* @r8, align 4
  %v5_118d8 = mul i32 %v9_118d4, 65536
  %v6_118d8 = and i32 %v5_118d8, %v1_118d8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_118d4, %bb
  %v7_118d8 = phi i32 [ %arg1, %dec_label_pc_118d4 ], [ %v6_118d8, %bb ]
  ret i32 %v7_118d8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_118dc() local_unnamed_addr {
dec_label_pc_118dc:
  %v1_118dc = load i32, i32* @r0, align 4
  ret i32 %v1_118dc
}

define i32 @function_118e0() local_unnamed_addr {
dec_label_pc_118e0:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %v15_118e0 = load i32, i32* @lr, align 4
  store i32 -1, i32* @r0, align 4
  %v2_118e8 = ptrtoint i32* %stack_var_-152 to i32
  %v1_118f4 = call i32 @function_118dc()
  %v1_11900 = call i32 @function_119d4(i32 %v2_118e8)
  store i32 %v1_11900, i32* @r0, align 4
  store i32 2, i32* %r7.global-to-local, align 4
  %v0_1190c = call i32 @function_fe0c()
  store i32 %v0_1190c, i32* %r4.global-to-local, align 4
  %v2_11910 = icmp eq i32 %v0_1190c, 0
  br i1 %v2_11910, label %dec_label_pc_11918, label %dec_label_pc_1193c

dec_label_pc_11918:                               ; preds = %dec_label_pc_118e0
  %v0_11918 = call i32 @function_1293c()
  store i32 %v0_11918, i32* %r2.global-to-local, align 4
  %v0_11920 = load i32, i32* %r7.global-to-local, align 4
  %v1_11920 = add i32 %v0_11920, 222
  store i32 %v1_11920, i32* %r7.global-to-local, align 4
  %v2_1192c = add i32 %v0_11918, -176
  %v3_1192c = inttoptr i32 %v2_1192c to i32*
  store i32 %v0_11918, i32* %v3_1192c, align 4
  %v0_11930 = load i32, i32* %r4.global-to-local, align 4
  %v1_11930 = load i32, i32* %r2.global-to-local, align 4
  %v2_11930 = add i32 %v1_11930, -60
  %v3_11930 = inttoptr i32 %v2_11930 to i32*
  store i32 %v0_11930, i32* %v3_11930, align 4
  %v0_11934 = load i32, i32* %r4.global-to-local, align 4
  %v1_11934 = load i32, i32* %r2.global-to-local, align 4
  %v2_11934 = add i32 %v1_11934, -64
  %v3_11934 = inttoptr i32 %v2_11934 to i32*
  store i32 %v0_11934, i32* %v3_11934, align 4
  %v0_11938 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11938, i32* @global_var_1f6f4.257, align 4
  br label %dec_label_pc_1193c

dec_label_pc_1193c:                               ; preds = %dec_label_pc_118e0, %dec_label_pc_11918
  %v1_11940 = call i32 @function_11a3c(i32 %v2_118e8)
  %v0_11944 = load i32, i32* %r4.global-to-local, align 4
  %v1_11944 = sub i32 1, %v0_11944
  %v2_11944 = icmp ult i32 %v0_11944, 2
  br i1 %v2_11944, label %bb7, label %bb

bb:                                               ; preds = %dec_label_pc_1193c
  br label %bb7

bb7:                                              ; preds = %dec_label_pc_1193c, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_11944, %dec_label_pc_1193c ]
  store i32 %storemerge, i32* @r0, align 4
  %v1_11950 = call i32 @function_118dc()
  %v0_11954 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v15_118e0, i32* @lr, align 4
  ret i32 %v0_11954

; uselistorder directives
  uselistorder i32* %r4.global-to-local, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 -64, { 1, 0 }
  uselistorder i32 222, { 1, 0 }
  uselistorder i32 ()* @function_118dc, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
  uselistorder label %dec_label_pc_1193c, { 1, 0 }
}

define i32 @function_1196c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1196c:
  %v0_1196c = load i32, i32* @lr, align 4
  store i32 %arg3, i32* @lr, align 4
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v3_1199c = call i32 @function_12360(i32 142, i32 %arg1, i32 %arg2)
  store i32 %v3_1199c, i32* @r0, align 4
  %v0_119a0 = call i32 @function_fe0c()
  store i32 %v0_1196c, i32* @lr, align 4
  ret i32 %v0_119a0
}

define i32 @function_119b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_119b0:
  store i32 %arg4, i32* @r2, align 4
  store i32 %arg5, i32* @r3, align 4
  ret i32 %arg2
}

define i32 @function_119d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_119d4:
  %v5_119f4 = call i32 @function_119b0(i32 175, i32 0, i32 ptrtoint (i32* @global_var_1673c.400 to i32), i32 %arg1, i32 8)
  ret i32 %v5_119f4
}

define i32 @function_11a08(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a08:
  %v5_11a28 = call i32 @function_119b0(i32 175, i32 0, i32 ptrtoint (i32* @global_var_16734.402 to i32), i32 %arg1, i32 8)
  ret i32 %v5_11a28
}

define i32 @function_11a3c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a3c:
  store i32 8, i32* @ip, align 4
  %v5_11a5c = call i32 @function_119b0(i32 175, i32 2, i32 %arg1, i32 0, i32 8)
  ret i32 %v5_11a5c

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_119b0, { 1, 0, 2 }
}

define i32 @function_11a6c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a6c:
  %v0_11a78 = call i32 @function_fe0c()
  ret i32 %v0_11a78
}

define i32 @function_11a84(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a84:
  %stack_var_-144 = alloca i32, align 4
  %v3_11a84 = load i32, i32* @r4, align 4
  %v2_11a88 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %arg1, i32* @r4, align 4
  %v1_11a98 = call i32 @function_11a08(i32 %v2_11a88)
  store i32 %v1_11a98, i32* @r0, align 4
  %v0_11ab0 = call i32 @function_fe0c()
  %v1_11abc = call i32 @function_11a3c(i32 %v2_11a88)
  store i32 %v3_11a84, i32* @r4, align 4
  ret i32 %v0_11ab0
}

define i32 @function_11ad0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11ad0:
  %r2.global-to-local = alloca i32, align 4
  %v1_11ad8 = add i32 %arg2, -1
  %tmp = icmp ugt i32 %v1_11ad8, 63
  br i1 %tmp, label %dec_label_pc_11af8, label %dec_label_pc_11aec

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11ad0
  %v1_11aec = add i32 %arg2, -32
  %tmp4 = icmp ugt i32 %v1_11aec, 2
  br i1 %tmp4, label %dec_label_pc_11b0c, label %dec_label_pc_11af8

dec_label_pc_11af8:                               ; preds = %dec_label_pc_11aec, %dec_label_pc_11ad0
  %v0_11af8 = call i32 @function_fb60()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11b04 = inttoptr i32 %v0_11af8 to i32*
  store i32 22, i32* %v2_11b04, align 4
  %v0_11b28.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11b28

dec_label_pc_11b0c:                               ; preds = %dec_label_pc_11aec
  %v3_11b0c = udiv i32 %v1_11ad8, 32
  %v4_11b10 = mul nuw nsw i32 %v3_11b0c, 4
  %v5_11b10 = add i32 %v4_11b10, %arg1
  %v6_11b10 = inttoptr i32 %v5_11b10 to i32*
  %v7_11b10 = load i32, i32* %v6_11b10, align 4
  %v1_11b18 = urem i32 %v1_11ad8, 32
  %v7_11b1c = shl i32 1, %v1_11b18
  %v8_11b1c = or i32 %v7_11b10, %v7_11b1c
  store i32 %v8_11b1c, i32* %v6_11b10, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11b28

dec_label_pc_11b28:                               ; preds = %dec_label_pc_11af8, %dec_label_pc_11b0c
  %v0_11b28 = phi i32 [ %v0_11b28.pre, %dec_label_pc_11af8 ], [ 0, %dec_label_pc_11b0c ]
  ret i32 %v0_11b28

; uselistorder directives
  uselistorder i32 %v1_11ad8, { 2, 1, 0 }
  uselistorder i32 63, { 0, 7, 5, 4, 8, 1, 10, 2, 9, 3, 11, 6 }
  uselistorder label %dec_label_pc_11b28, { 1, 0 }
}

define i32 @function_11b38(i32* %arg1) local_unnamed_addr {
dec_label_pc_11b38:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11b40 = add i32 %tmp, 4
  %v3_11b40 = inttoptr i32 %v2_11b40 to i32*
  store i32 0, i32* %v3_11b40, align 4
  %v1_11b44 = load i32, i32* %r3.global-to-local, align 4
  %v2_11b44 = inttoptr i32 %v1_11b44 to i32*
  store i32 0, i32* %v2_11b44, align 4
  ret i32 0
}

define i32 @function_11b4c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b4c:
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v6_11b4c = load i32, i32* @r5, align 4
  %v9_11b4c = load i32, i32* @r6, align 4
  %v2_11b50 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r6, align 4
  %v3_11b68 = bitcast i32* %stack_var_-296 to i8*
  %v4_11b68 = call i32 @function_12154(i8* %v3_11b68, i32 0, i32 140)
  %v0_11b70 = load i32, i32* @r5, align 4
  store i32 %v2_11b50, i32* @r1, align 4
  %v2_11b78 = ptrtoint i32* %stack_var_-156 to i32
  store i32 %v2_11b78, i32* @r2, align 4
  %v0_11b7c = load i32, i32* @r6, align 4
  store i32 %v0_11b7c, i32* %stack_var_-296, align 4
  %v5_11b84 = call i32 @function_13a7c(i32 %v0_11b70, i32 %v2_11b50, i32 %v2_11b78, i32 268435456, i32 %v0_11b7c)
  %v1_11b88 = icmp slt i32 %v5_11b84, 0
  br i1 %v1_11b88, label %bb10, label %bb

bb:                                               ; preds = %dec_label_pc_11b4c
  %v6_11b8c = load i32, i32* %stack_var_-156, align 4
  br label %bb11

bb10:                                             ; preds = %dec_label_pc_11b4c
  br label %bb11

bb11:                                             ; preds = %bb, %bb10
  %v1_11ba0 = phi i32 [ %v6_11b8c, %bb ], [ -1, %bb10 ]
  store i32 %v6_11b4c, i32* @r5, align 4
  store i32 %v9_11b4c, i32* @r6, align 4
  ret i32 %v1_11ba0

; uselistorder directives
  uselistorder i32* %stack_var_-296, { 1, 0, 2 }
  uselistorder i32 (i8*, i32, i32)* @function_12154, { 0, 4, 5, 6, 1, 2, 3 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_11ba4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ba4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11ba4 = load i32, i32* @r4, align 4
  store i32 %v3_11ba4, i32* %stack_var_-8, align 4
  %v0_11ba8 = call i32 @function_12508()
  store i32 %v0_11ba8, i32* %r4.global-to-local, align 4
  %v2_11bac = icmp eq i32 %v0_11ba8, 0
  br i1 %v2_11bac, label %dec_label_pc_11bc0, label %dec_label_pc_11bb4

dec_label_pc_11bb4:                               ; preds = %dec_label_pc_11ba4
  %v0_11bb4 = call i32 @function_fb60()
  %v0_11bb8 = load i32, i32* %r4.global-to-local, align 4
  %v2_11bb8 = inttoptr i32 %v0_11bb4 to i32*
  store i32 %v0_11bb8, i32* %v2_11bb8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11bc0

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11ba4, %dec_label_pc_11bb4
  %v0_11bc0 = phi i32 [ 0, %dec_label_pc_11ba4 ], [ -1, %dec_label_pc_11bb4 ]
  %v2_11bc4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11bc4, i32* @r4, align 4
  ret i32 %v0_11bc0

; uselistorder directives
  uselistorder label %dec_label_pc_11bc0, { 1, 0 }
}

define i32 @function_11bcc() local_unnamed_addr {
dec_label_pc_11bcc:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp12 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %v6_11bcc = load i32, i32* @r5, align 4
  %v9_11bcc = load i32, i32* @r6, align 4
  %v12_11bcc = load i32, i32* @r7, align 4
  %v0_11bd0 = load i32, i32* @r0, align 4
  store i32 %v0_11bd0, i32* @r5, align 4
  %v1_11bd0 = icmp slt i32 %v0_11bd0, 0
  %v4_11bdc = add i32 %v0_11bd0, 2147483647
  %storemerge = select i1 %v1_11bd0, i32 -1, i32 %v4_11bdc
  %v2_11be0 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_11be0, i32* @r4, align 4
  %v0_11be4 = load i32, i32* @r1, align 4
  store i32 %v0_11be4, i32* @r7, align 4
  %v0_11bf0 = load i32, i32* @r2, align 4
  store i32 %v0_11bf0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-168, align 4
  %v7_11c14 = call i32 @function_132f4(i32 %v2_11be0, i32 0, i32 0, i32 0, i32 0, i32 %v0_11bd0, i32 %storemerge)
  store i32 %tmp3, i32* @r4, align 4
  %v0_11c24 = load i32, i32* @r6, align 4
  %v6_11c30 = sext i32 %v0_11c24 to i64
  %v7_11c30 = call i32 @function_12b34(i32 %v2_11be0, i64 %v6_11c30, i32 1, i32 %tmp12, i32 %tmp12, i32 %tmp3)
  %v0_11c34 = load i32, i32* @r7, align 4
  %v2_11c34 = icmp eq i32 %v0_11c34, 0
  br i1 %v2_11c34, label %dec_label_pc_11c58, label %dec_label_pc_11c3c

dec_label_pc_11c3c:                               ; preds = %dec_label_pc_11bcc
  %v0_11c50 = load i32, i32* @r5, align 4
  %v2_11c44 = add i32 %v0_11bd0, %tmp
  %v2_11c4c = sub i32 %v2_11c44, %storemerge
  %v2_11c50 = add i32 %v2_11c4c, %v0_11c50
  %v2_11c54 = inttoptr i32 %v0_11c34 to i32*
  store i32 %v2_11c50, i32* %v2_11c54, align 4
  br label %dec_label_pc_11c58

dec_label_pc_11c58:                               ; preds = %dec_label_pc_11bcc, %dec_label_pc_11c3c
  store i32 %v6_11bcc, i32* @r5, align 4
  store i32 %v9_11bcc, i32* @r6, align 4
  store i32 %v12_11bcc, i32* @r7, align 4
  ret i32 %v7_11c30

; uselistorder directives
  uselistorder i32 %v2_11be0, { 1, 0, 2 }
  uselistorder i32 %v0_11bd0, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_11c58, { 1, 0 }
}

define i32 @function_11c64() local_unnamed_addr {
dec_label_pc_11c64:
  store i32 0, i32* @r4, align 4
  %v0_11c78 = call i32 @function_11bcc()
  ret i32 %v0_11c78
}

define i32 @function_11c88(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11c88:
  %v3_11c88 = load i32, i32* @r4, align 4
  store i32 0, i32* @r4, align 4
  %v0_11c9c = call i32 @function_11bcc()
  store i32 %v3_11c88, i32* @r4, align 4
  ret i32 %v0_11c9c
}

define i32 @function_11cac() local_unnamed_addr {
dec_label_pc_11cac:
  store i32 -2147483648, i32* @r4, align 4
  %v0_11cc0 = call i32 @function_11bcc()
  ret i32 %v0_11cc0
}

define i32 @function_11cd4() local_unnamed_addr {
dec_label_pc_11cd4:
  store i32 -1, i32* @r4, align 4
  %v0_11ce8 = call i32 @function_11bcc()
  ret i32 %v0_11ce8

; uselistorder directives
  uselistorder i32 ()* @function_11bcc, { 3, 2, 0, 1 }
}

define i32 @function_11cfc(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11cfc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_11cfc = load i32, i32* %r0.global-to-local, align 4
  %v8_11cfc = load i32, i32* @r4, align 4
  %v11_11cfc = load i32, i32* @lr, align 4
  %v0_11d04 = load i32, i32* %r2.global-to-local, align 4
  %v1_11d04 = add i32 %v0_11d04, -4
  %v2_11d04 = icmp ugt i32 %v0_11d04, 3
  store i1 %v2_11d04, i1* %cpsr_c.global-to-local, align 1
  %v6_11d04 = icmp slt i32 %v1_11d04, 0
  store i1 %v6_11d04, i1* %cpsr_n.global-to-local, align 1
  %v3_11d08 = icmp ult i32 %v0_11d04, 2
  br i1 %v3_11d08, label %dec_label_pc_11fd8, label %dec_label_pc_11d0c

dec_label_pc_11d0c:                               ; preds = %dec_label_pc_11cfc
  %v0_11d0c = load i32, i32* %r1.global-to-local, align 4
  %v1_11d0c = sub i32 0, %v0_11d0c
  %v1_11d10 = urem i32 %v1_11d0c, 4
  store i32 %v1_11d10, i32* @r3, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11d10 = icmp eq i32 %v1_11d10, 0
  br i1 %v2_11d10, label %.thread2, label %dec_label_pc_11d18

dec_label_pc_11d18:                               ; preds = %dec_label_pc_11d0c
  %v1_11d18 = and i32 %v1_11d0c, 2
  %v2_11d18 = icmp ne i32 %v1_11d18, 0
  store i1 %v2_11d18, i1* %cpsr_c.global-to-local, align 1
  %v3_11d18 = shl i32 %v1_11d0c, 31
  store i32 %v3_11d18, i32* %ip.global-to-local, align 4
  %v4_11d18 = icmp ne i32 %v3_11d18, 0
  store i1 %v4_11d18, i1* %cpsr_n.global-to-local, align 1
  %v2_11d1c = sub i32 %v0_11d04, %v1_11d10
  store i32 %v2_11d1c, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v1_11d10 to i8
  br i1 %v4_11d18, label %bb, label %bb128

bb:                                               ; preds = %dec_label_pc_11d18
  %v2_11d20 = inttoptr i32 %v0_11d0c to i8*
  %v3_11d20 = load i8, i8* %v2_11d20, align 1
  %v4_11d20 = zext i8 %v3_11d20 to i32
  store i32 %v4_11d20, i32* @r3, align 4
  %v6_11d20 = add i32 %v0_11d0c, 1
  store i32 %v6_11d20, i32* %r1.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_11d18, %bb
  %v1_11d2c.off0 = phi i8 [ %extract.t, %dec_label_pc_11d18 ], [ %v3_11d20, %bb ]
  %v1_11d24 = phi i32 [ %v0_11d0c, %dec_label_pc_11d18 ], [ %v6_11d20, %bb ]
  %extract.t191 = trunc i32 %v8_11cfc to i8
  br i1 %v2_11d18, label %bb129, label %.thread

bb129:                                            ; preds = %bb128
  %v2_11d24 = inttoptr i32 %v1_11d24 to i8*
  %v3_11d24 = load i8, i8* %v2_11d24, align 1
  %v4_11d24 = zext i8 %v3_11d24 to i32
  store i32 %v4_11d24, i32* @r4, align 4
  %v6_11d24 = add i32 %v1_11d24, 1
  store i32 %v6_11d24, i32* %r1.global-to-local, align 4
  %v2_11d28 = inttoptr i32 %v6_11d24 to i8*
  %v3_11d28 = load i8, i8* %v2_11d28, align 1
  %v4_11d28 = zext i8 %v3_11d28 to i32
  store i32 %v4_11d28, i32* %ip.global-to-local, align 4
  %v6_11d28 = add i32 %v1_11d24, 2
  store i32 %v6_11d28, i32* %r1.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %bb128, %bb129
  %v1_11d30182.off0 = phi i8 [ %extract.t191, %bb128 ], [ %v3_11d24, %bb129 ]
  br i1 %v4_11d18, label %bb130, label %bb131

bb130:                                            ; preds = %.thread
  %v4_11d2c = inttoptr i32 %v3_11cfc to i8*
  store i8 %v1_11d2c.off0, i8* %v4_11d2c, align 1
  %v5_11d2c = load i32, i32* %r0.global-to-local, align 4
  %v6_11d2c = add i32 %v5_11d2c, 1
  store i32 %v6_11d2c, i32* %r0.global-to-local, align 4
  %v0_11d30.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_11d30.pre, label %bb130.bb132_crit_edge, label %.thread2

bb130.bb132_crit_edge:                            ; preds = %bb130
  %v1_11d30.pre = load i32, i32* @r4, align 4
  %extract.t189 = trunc i32 %v1_11d30.pre to i8
  br label %bb132

bb131:                                            ; preds = %.thread
  br i1 %v2_11d18, label %bb132, label %.thread2

bb132:                                            ; preds = %bb130.bb132_crit_edge, %bb131
  %v1_11d30.off0 = phi i8 [ %extract.t189, %bb130.bb132_crit_edge ], [ %v1_11d30182.off0, %bb131 ]
  %v3_11d3088 = phi i32 [ %v6_11d2c, %bb130.bb132_crit_edge ], [ %v3_11cfc, %bb131 ]
  %v4_11d30 = inttoptr i32 %v3_11d3088 to i8*
  store i8 %v1_11d30.off0, i8* %v4_11d30, align 1
  %v5_11d30 = load i32, i32* %r0.global-to-local, align 4
  %v6_11d30 = add i32 %v5_11d30, 1
  store i32 %v6_11d30, i32* %r0.global-to-local, align 4
  %v0_11d34.pr = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_11d34.pr, label %bb133, label %.thread2

bb133:                                            ; preds = %bb132
  %v1_11d34 = load i32, i32* %ip.global-to-local, align 4
  %v2_11d34 = trunc i32 %v1_11d34 to i8
  %v4_11d34 = inttoptr i32 %v6_11d30 to i8*
  store i8 %v2_11d34, i8* %v4_11d34, align 1
  %v5_11d34 = load i32, i32* %r0.global-to-local, align 4
  %v6_11d34 = add i32 %v5_11d34, 1
  store i32 %v6_11d34, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %bb130, %bb131, %dec_label_pc_11d0c, %bb132, %bb133
  %v1_11d68 = phi i32 [ %v3_11cfc, %bb131 ], [ %v3_11cfc, %dec_label_pc_11d0c ], [ %v6_11d30, %bb132 ], [ %v6_11d34, %bb133 ], [ %v6_11d2c, %bb130 ]
  %v1_11d38 = load i32, i32* %r1.global-to-local, align 4
  %v2_11d38 = xor i32 %v1_11d38, %v1_11d68
  store i32 %v2_11d38, i32* @ip, align 4
  %v1_11d3c = urem i32 %v2_11d38, 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11d3c = icmp eq i32 %v1_11d3c, 0
  br i1 %v2_11d3c, label %dec_label_pc_11d44, label %dec_label_pc_11dec

dec_label_pc_11d44:                               ; preds = %.thread2
  %v2_11d44 = load i32, i32* @r5, align 4
  store i32 %v2_11d44, i32* %stack_var_-40, align 4
  %v5_11d44 = load i32, i32* @r6, align 4
  %v8_11d44 = load i32, i32* @r7, align 4
  %v11_11d44 = load i32, i32* @r8, align 4
  %v14_11d44 = load i32, i32* @sb, align 4
  %v17_11d44 = load i32, i32* @sl, align 4
  %v20_11d44 = load i32, i32* @fp, align 4
  %v1_11d48 = sub i32 0, %v1_11d68
  %v1_11d4c = and i32 %v1_11d48, 28
  store i32 %v1_11d4c, i32* @r3, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11d4c = icmp eq i32 %v1_11d4c, 0
  %v0_11d80.pre = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_11d4c, label %dec_label_pc_11d80, label %dec_label_pc_11d54

dec_label_pc_11d54:                               ; preds = %dec_label_pc_11d44
  %v2_11d54 = sub i32 %v1_11d4c, %v0_11d80.pre
  %v3_11d54 = icmp uge i32 %v1_11d4c, %v0_11d80.pre
  store i1 %v3_11d54, i1* %cpsr_c.global-to-local, align 1
  %v8_11d54 = icmp slt i32 %v2_11d54, 0
  store i1 %v8_11d54, i1* %cpsr_n.global-to-local, align 1
  %tmp197 = icmp ugt i32 %v1_11d4c, %v0_11d80.pre
  br i1 %tmp197, label %bb134, label %bb135

bb134:                                            ; preds = %dec_label_pc_11d54
  %v5_11d58 = and i32 %v0_11d80.pre, 28
  store i32 %v5_11d58, i32* @r3, align 4
  br label %bb135

bb135:                                            ; preds = %dec_label_pc_11d54, %bb134
  %v0_11d5c = phi i32 [ %v1_11d4c, %dec_label_pc_11d54 ], [ %v5_11d58, %bb134 ]
  %v1_11d5c = and i32 %v0_11d5c, 16
  %v2_11d5c = icmp ne i32 %v1_11d5c, 0
  store i1 %v2_11d5c, i1* %cpsr_c.global-to-local, align 1
  %v3_11d5c = mul i32 %v0_11d5c, 268435456
  store i32 %v3_11d5c, i32* @ip, align 4
  %v4_11d5c = icmp slt i32 %v3_11d5c, 0
  store i1 %v4_11d5c, i1* %cpsr_n.global-to-local, align 1
  br i1 %v2_11d5c, label %bb136, label %bb137

bb136:                                            ; preds = %bb135
  %v2_11d60 = inttoptr i32 %v1_11d38 to i32*
  %v3_11d60 = load i32, i32* %v2_11d60, align 4
  store i32 %v3_11d60, i32* @r4, align 4
  %v4_11d60 = add i32 %v1_11d38, 4
  %v5_11d60 = inttoptr i32 %v4_11d60 to i32*
  %v6_11d60 = load i32, i32* %v5_11d60, align 4
  store i32 %v6_11d60, i32* @r5, align 4
  %v7_11d60 = add i32 %v1_11d38, 8
  %v8_11d60 = inttoptr i32 %v7_11d60 to i32*
  %v9_11d60 = load i32, i32* %v8_11d60, align 4
  store i32 %v9_11d60, i32* @r6, align 4
  %v10_11d60 = add i32 %v1_11d38, 12
  %v11_11d60 = inttoptr i32 %v10_11d60 to i32*
  %v12_11d60 = load i32, i32* %v11_11d60, align 4
  store i32 %v12_11d60, i32* @r7, align 4
  %v13_11d60 = add i32 %v1_11d38, 16
  store i32 %v13_11d60, i32* %r1.global-to-local, align 4
  br i1 %v4_11d5c, label %bb138, label %.thread89

bb137:                                            ; preds = %bb135
  br i1 %v4_11d5c, label %bb138, label %.thread93

bb138:                                            ; preds = %bb137, %bb136
  %v1_11d64 = phi i32 [ %v13_11d60, %bb136 ], [ %v1_11d38, %bb137 ]
  %v2_11d64 = inttoptr i32 %v1_11d64 to i32*
  %v3_11d64 = load i32, i32* %v2_11d64, align 4
  store i32 %v3_11d64, i32* @r8, align 4
  %v4_11d64 = add i32 %v1_11d64, 4
  %v5_11d64 = inttoptr i32 %v4_11d64 to i32*
  %v6_11d64 = load i32, i32* %v5_11d64, align 4
  store i32 %v6_11d64, i32* @sb, align 4
  %v7_11d64 = add i32 %v1_11d64, 8
  store i32 %v7_11d64, i32* %r1.global-to-local, align 4
  br i1 %v2_11d5c, label %bb138..thread89_crit_edge, label %.thread91

bb138..thread89_crit_edge:                        ; preds = %bb138
  %v3_11d68.pre = load i32, i32* @r4, align 4
  br label %.thread89

.thread89:                                        ; preds = %bb138..thread89_crit_edge, %bb136
  %v3_11d68 = phi i32 [ %v3_11d68.pre, %bb138..thread89_crit_edge ], [ %v3_11d60, %bb136 ]
  %v2_11d68 = inttoptr i32 %v1_11d68 to i32*
  store i32 %v3_11d68, i32* %v2_11d68, align 4
  %v4_11d68 = add i32 %v1_11d68, 4
  %v5_11d68 = inttoptr i32 %v4_11d68 to i32*
  %v6_11d68 = load i32, i32* @r5, align 4
  store i32 %v6_11d68, i32* %v5_11d68, align 4
  %v7_11d68 = add i32 %v1_11d68, 8
  %v8_11d68 = inttoptr i32 %v7_11d68 to i32*
  %v9_11d68 = load i32, i32* @r6, align 4
  store i32 %v9_11d68, i32* %v8_11d68, align 4
  %v10_11d68 = add i32 %v1_11d68, 12
  %v11_11d68 = inttoptr i32 %v10_11d68 to i32*
  %v12_11d68 = load i32, i32* @r7, align 4
  store i32 %v12_11d68, i32* %v11_11d68, align 4
  %v13_11d68 = add i32 %v1_11d68, 16
  store i32 %v13_11d68, i32* %r0.global-to-local, align 4
  br i1 %v4_11d5c, label %.thread89..thread91_crit_edge, label %.thread93

.thread89..thread91_crit_edge:                    ; preds = %.thread89
  %v3_11d6c.pre = load i32, i32* @r8, align 4
  br label %.thread91

.thread91:                                        ; preds = %.thread89..thread91_crit_edge, %bb138
  %v3_11d6c = phi i32 [ %v3_11d6c.pre, %.thread89..thread91_crit_edge ], [ %v3_11d64, %bb138 ]
  %v1_11d6c92 = phi i32 [ %v13_11d68, %.thread89..thread91_crit_edge ], [ %v1_11d68, %bb138 ]
  %v2_11d6c = inttoptr i32 %v1_11d6c92 to i32*
  store i32 %v3_11d6c, i32* %v2_11d6c, align 4
  %v4_11d6c = add i32 %v1_11d6c92, 4
  %v5_11d6c = inttoptr i32 %v4_11d6c to i32*
  %v6_11d6c = load i32, i32* @sb, align 4
  store i32 %v6_11d6c, i32* %v5_11d6c, align 4
  %v7_11d6c = add i32 %v1_11d6c92, 8
  store i32 %v7_11d6c, i32* %r0.global-to-local, align 4
  br label %.thread93

.thread93:                                        ; preds = %bb137, %.thread89, %.thread91
  %v2_11d78 = phi i32 [ %v13_11d68, %.thread89 ], [ %v7_11d6c, %.thread91 ], [ %v1_11d68, %bb137 ]
  %v0_11d70 = load i32, i32* @r3, align 4
  %v1_11d70 = and i32 %v0_11d70, 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11d70 = icmp eq i32 %v1_11d70, 0
  br i1 %v2_11d70, label %.thread3, label %bb139

bb139:                                            ; preds = %.thread93
  %v1_11d74 = load i32, i32* %r1.global-to-local, align 4
  %v2_11d74 = inttoptr i32 %v1_11d74 to i32*
  %v3_11d74 = load i32, i32* %v2_11d74, align 4
  store i32 %v3_11d74, i32* %sl.global-to-local, align 4
  %v5_11d74 = add i32 %v1_11d74, 4
  store i32 %v5_11d74, i32* %r1.global-to-local, align 4
  %v3_11d78 = inttoptr i32 %v2_11d78 to i32*
  store i32 %v3_11d74, i32* %v3_11d78, align 4
  %v4_11d78 = load i32, i32* %r0.global-to-local, align 4
  %v5_11d78 = add i32 %v4_11d78, 4
  store i32 %v5_11d78, i32* %r0.global-to-local, align 4
  %v1_11d7c.pre = load i32, i32* @r3, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread93, %bb139
  %v0_11d9065 = phi i32 [ %v2_11d78, %.thread93 ], [ %v5_11d78, %bb139 ]
  %v1_11d7c = phi i32 [ %v0_11d70, %.thread93 ], [ %v1_11d7c.pre, %bb139 ]
  %v0_11d7c = load i32, i32* %r2.global-to-local, align 4
  %v2_11d7c = sub i32 %v0_11d7c, %v1_11d7c
  store i32 %v2_11d7c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d80

dec_label_pc_11d80:                               ; preds = %dec_label_pc_11d44, %.thread3
  %v0_11d9064 = phi i32 [ %v0_11d9065, %.thread3 ], [ %v1_11d68, %dec_label_pc_11d44 ]
  %v0_11d80 = phi i32 [ %v2_11d7c, %.thread3 ], [ %v0_11d80.pre, %dec_label_pc_11d44 ]
  %v1_11d80 = add i32 %v0_11d80, -32
  store i32 %v1_11d80, i32* @r2, align 4
  %v2_11d80 = icmp ugt i32 %v0_11d80, 31
  store i1 %v2_11d80, i1* %cpsr_c.global-to-local, align 1
  %v6_11d80 = icmp slt i32 %v1_11d80, 0
  store i1 %v6_11d80, i1* %cpsr_n.global-to-local, align 1
  %v3_11d84 = icmp ult i32 %v1_11d80, 30
  br i1 %v3_11d84, label %dec_label_pc_11d9c, label %dec_label_pc_11d88

dec_label_pc_11d88:                               ; preds = %dec_label_pc_11d80, %dec_label_pc_11d88.dec_label_pc_11d88_crit_edge
  %v0_11d90 = phi i32 [ %v24_11d90, %dec_label_pc_11d88.dec_label_pc_11d88_crit_edge ], [ %v0_11d9064, %dec_label_pc_11d80 ]
  %v0_11d8c = phi i32 [ %v0_11d8c.pre, %dec_label_pc_11d88.dec_label_pc_11d88_crit_edge ], [ %v1_11d80, %dec_label_pc_11d80 ]
  %v0_11d88 = load i32, i32* %r1.global-to-local, align 4
  %v1_11d88 = inttoptr i32 %v0_11d88 to i32*
  %v2_11d88 = load i32, i32* %v1_11d88, align 4
  store i32 %v2_11d88, i32* @r4, align 4
  %v3_11d88 = add i32 %v0_11d88, 4
  %v4_11d88 = inttoptr i32 %v3_11d88 to i32*
  %v5_11d88 = load i32, i32* %v4_11d88, align 4
  store i32 %v5_11d88, i32* @r5, align 4
  %v6_11d88 = add i32 %v0_11d88, 8
  %v7_11d88 = inttoptr i32 %v6_11d88 to i32*
  %v8_11d88 = load i32, i32* %v7_11d88, align 4
  store i32 %v8_11d88, i32* @r6, align 4
  %v9_11d88 = add i32 %v0_11d88, 12
  %v10_11d88 = inttoptr i32 %v9_11d88 to i32*
  %v11_11d88 = load i32, i32* %v10_11d88, align 4
  store i32 %v11_11d88, i32* @r7, align 4
  %v12_11d88 = add i32 %v0_11d88, 16
  %v13_11d88 = inttoptr i32 %v12_11d88 to i32*
  %v14_11d88 = load i32, i32* %v13_11d88, align 4
  store i32 %v14_11d88, i32* @r8, align 4
  %v15_11d88 = add i32 %v0_11d88, 20
  %v16_11d88 = inttoptr i32 %v15_11d88 to i32*
  %v17_11d88 = load i32, i32* %v16_11d88, align 4
  store i32 %v17_11d88, i32* @sb, align 4
  %v18_11d88 = add i32 %v0_11d88, 24
  %v19_11d88 = inttoptr i32 %v18_11d88 to i32*
  %v20_11d88 = load i32, i32* %v19_11d88, align 4
  store i32 %v20_11d88, i32* %sl.global-to-local, align 4
  %v21_11d88 = add i32 %v0_11d88, 28
  %v22_11d88 = inttoptr i32 %v21_11d88 to i32*
  %v23_11d88 = load i32, i32* %v22_11d88, align 4
  store i32 %v23_11d88, i32* %fp.global-to-local, align 4
  %v24_11d88 = add i32 %v0_11d88, 32
  store i32 %v24_11d88, i32* %r1.global-to-local, align 4
  %v1_11d8c = add i32 %v0_11d8c, -32
  store i32 %v1_11d8c, i32* %r2.global-to-local, align 4
  %v2_11d8c = icmp ugt i32 %v0_11d8c, 31
  %v1_11d90 = inttoptr i32 %v0_11d90 to i32*
  store i32 %v2_11d88, i32* %v1_11d90, align 4
  %v3_11d90 = add i32 %v0_11d90, 4
  %v4_11d90 = inttoptr i32 %v3_11d90 to i32*
  %v5_11d90 = load i32, i32* @r5, align 4
  store i32 %v5_11d90, i32* %v4_11d90, align 4
  %v6_11d90 = add i32 %v0_11d90, 8
  %v7_11d90 = inttoptr i32 %v6_11d90 to i32*
  %v8_11d90 = load i32, i32* @r6, align 4
  store i32 %v8_11d90, i32* %v7_11d90, align 4
  %v9_11d90 = add i32 %v0_11d90, 12
  %v10_11d90 = inttoptr i32 %v9_11d90 to i32*
  %v11_11d90 = load i32, i32* @r7, align 4
  store i32 %v11_11d90, i32* %v10_11d90, align 4
  %v12_11d90 = add i32 %v0_11d90, 16
  %v13_11d90 = inttoptr i32 %v12_11d90 to i32*
  %v14_11d90 = load i32, i32* @r8, align 4
  store i32 %v14_11d90, i32* %v13_11d90, align 4
  %v15_11d90 = add i32 %v0_11d90, 20
  %v16_11d90 = inttoptr i32 %v15_11d90 to i32*
  %v17_11d90 = load i32, i32* @sb, align 4
  store i32 %v17_11d90, i32* %v16_11d90, align 4
  %v18_11d90 = add i32 %v0_11d90, 24
  %v19_11d90 = inttoptr i32 %v18_11d90 to i32*
  %v20_11d90 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v20_11d90, i32* %v19_11d90, align 4
  %v21_11d90 = add i32 %v0_11d90, 28
  %v22_11d90 = inttoptr i32 %v21_11d90 to i32*
  %v23_11d90 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v23_11d90, i32* %v22_11d90, align 4
  %v24_11d90 = add i32 %v0_11d90, 32
  store i32 %v24_11d90, i32* %r0.global-to-local, align 4
  br i1 %v2_11d8c, label %dec_label_pc_11d88.dec_label_pc_11d88_crit_edge, label %dec_label_pc_11d98

dec_label_pc_11d88.dec_label_pc_11d88_crit_edge:  ; preds = %dec_label_pc_11d88
  %v0_11d8c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d88

dec_label_pc_11d98:                               ; preds = %dec_label_pc_11d88
  %v6_11d8c = icmp slt i32 %v1_11d8c, 0
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 %v6_11d8c, i1* %cpsr_n.global-to-local, align 1
  %v0_11d98 = load i32, i32* %r2.global-to-local, align 4
  %v1_11d98 = add i32 %v0_11d98, 32
  store i32 %v1_11d98, i32* @r2, align 4
  br label %dec_label_pc_11d9c

dec_label_pc_11d9c:                               ; preds = %dec_label_pc_11d80, %dec_label_pc_11d98
  %v1_11db0 = phi i32 [ %v0_11d9064, %dec_label_pc_11d80 ], [ %v24_11d90, %dec_label_pc_11d98 ]
  %v0_11da4 = phi i32 [ %v1_11d80, %dec_label_pc_11d80 ], [ %v1_11d98, %dec_label_pc_11d98 ]
  %v1_11d9c = urem i32 %v0_11da4, 32
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11d9c = icmp eq i32 %v1_11d9c, 0
  br i1 %v2_11d9c, label %.thread4, label %dec_label_pc_11da4

dec_label_pc_11da4:                               ; preds = %dec_label_pc_11d9c
  %v1_11da4 = and i32 %v0_11da4, 16
  %v2_11da4 = icmp ne i32 %v1_11da4, 0
  store i1 %v2_11da4, i1* %cpsr_c.global-to-local, align 1
  %v3_11da4 = mul i32 %v0_11da4, 268435456
  store i32 %v3_11da4, i32* %ip.global-to-local, align 4
  %v4_11da4 = icmp slt i32 %v3_11da4, 0
  store i1 %v4_11da4, i1* %cpsr_n.global-to-local, align 1
  br i1 %v2_11da4, label %bb140, label %bb141

bb140:                                            ; preds = %dec_label_pc_11da4
  %v1_11da8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11da8 = inttoptr i32 %v1_11da8 to i32*
  %v3_11da8 = load i32, i32* %v2_11da8, align 4
  store i32 %v3_11da8, i32* @r4, align 4
  %v4_11da8 = add i32 %v1_11da8, 4
  %v5_11da8 = inttoptr i32 %v4_11da8 to i32*
  %v6_11da8 = load i32, i32* %v5_11da8, align 4
  store i32 %v6_11da8, i32* @r5, align 4
  %v7_11da8 = add i32 %v1_11da8, 8
  %v8_11da8 = inttoptr i32 %v7_11da8 to i32*
  %v9_11da8 = load i32, i32* %v8_11da8, align 4
  store i32 %v9_11da8, i32* @r6, align 4
  %v10_11da8 = add i32 %v1_11da8, 12
  %v11_11da8 = inttoptr i32 %v10_11da8 to i32*
  %v12_11da8 = load i32, i32* %v11_11da8, align 4
  store i32 %v12_11da8, i32* @r7, align 4
  %v13_11da8 = add i32 %v1_11da8, 16
  store i32 %v13_11da8, i32* %r1.global-to-local, align 4
  br i1 %v4_11da4, label %bb142, label %.thread94

bb141:                                            ; preds = %dec_label_pc_11da4
  br i1 %v4_11da4, label %._crit_edge, label %.thread98

._crit_edge:                                      ; preds = %bb141
  %v1_11dac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb142

bb142:                                            ; preds = %bb140, %._crit_edge
  %v1_11dac = phi i32 [ %v1_11dac.pre, %._crit_edge ], [ %v13_11da8, %bb140 ]
  %v2_11dac = inttoptr i32 %v1_11dac to i32*
  %v3_11dac = load i32, i32* %v2_11dac, align 4
  store i32 %v3_11dac, i32* @r8, align 4
  %v4_11dac = add i32 %v1_11dac, 4
  %v5_11dac = inttoptr i32 %v4_11dac to i32*
  %v6_11dac = load i32, i32* %v5_11dac, align 4
  store i32 %v6_11dac, i32* @sb, align 4
  %v7_11dac = add i32 %v1_11dac, 8
  store i32 %v7_11dac, i32* %r1.global-to-local, align 4
  br i1 %v2_11da4, label %bb142..thread94_crit_edge, label %.thread96

bb142..thread94_crit_edge:                        ; preds = %bb142
  %v3_11db0.pre = load i32, i32* @r4, align 4
  br label %.thread94

.thread94:                                        ; preds = %bb142..thread94_crit_edge, %bb140
  %v3_11db0 = phi i32 [ %v3_11db0.pre, %bb142..thread94_crit_edge ], [ %v3_11da8, %bb140 ]
  %v2_11db0 = inttoptr i32 %v1_11db0 to i32*
  store i32 %v3_11db0, i32* %v2_11db0, align 4
  %v4_11db0 = add i32 %v1_11db0, 4
  %v5_11db0 = inttoptr i32 %v4_11db0 to i32*
  %v6_11db0 = load i32, i32* @r5, align 4
  store i32 %v6_11db0, i32* %v5_11db0, align 4
  %v7_11db0 = add i32 %v1_11db0, 8
  %v8_11db0 = inttoptr i32 %v7_11db0 to i32*
  %v9_11db0 = load i32, i32* @r6, align 4
  store i32 %v9_11db0, i32* %v8_11db0, align 4
  %v10_11db0 = add i32 %v1_11db0, 12
  %v11_11db0 = inttoptr i32 %v10_11db0 to i32*
  %v12_11db0 = load i32, i32* @r7, align 4
  store i32 %v12_11db0, i32* %v11_11db0, align 4
  %v13_11db0 = add i32 %v1_11db0, 16
  store i32 %v13_11db0, i32* %r0.global-to-local, align 4
  br i1 %v4_11da4, label %.thread94..thread96_crit_edge, label %.thread98

.thread94..thread96_crit_edge:                    ; preds = %.thread94
  %v3_11db4.pre = load i32, i32* @r8, align 4
  br label %.thread96

.thread96:                                        ; preds = %.thread94..thread96_crit_edge, %bb142
  %v3_11db4 = phi i32 [ %v3_11db4.pre, %.thread94..thread96_crit_edge ], [ %v3_11dac, %bb142 ]
  %v1_11db497 = phi i32 [ %v13_11db0, %.thread94..thread96_crit_edge ], [ %v1_11db0, %bb142 ]
  %v2_11db4 = inttoptr i32 %v1_11db497 to i32*
  store i32 %v3_11db4, i32* %v2_11db4, align 4
  %v4_11db4 = add i32 %v1_11db497, 4
  %v5_11db4 = inttoptr i32 %v4_11db4 to i32*
  %v6_11db4 = load i32, i32* @sb, align 4
  store i32 %v6_11db4, i32* %v5_11db4, align 4
  %v7_11db4 = add i32 %v1_11db497, 8
  store i32 %v7_11db4, i32* %r0.global-to-local, align 4
  br label %.thread98

.thread98:                                        ; preds = %bb141, %.thread94, %.thread96
  %v2_11dc4 = phi i32 [ %v13_11db0, %.thread94 ], [ %v7_11db4, %.thread96 ], [ %v1_11db0, %bb141 ]
  %v0_11db8 = load i32, i32* @r2, align 4
  %v1_11db8 = and i32 %v0_11db8, 4
  %v2_11db8 = icmp ne i32 %v1_11db8, 0
  store i1 %v2_11db8, i1* %cpsr_c.global-to-local, align 1
  %v3_11db8 = mul i32 %v0_11db8, 1073741824
  store i32 %v3_11db8, i32* @ip, align 4
  %v4_11db8 = icmp slt i32 %v3_11db8, 0
  store i1 %v4_11db8, i1* %cpsr_n.global-to-local, align 1
  br i1 %v2_11db8, label %bb143, label %bb144

bb143:                                            ; preds = %.thread98
  %v1_11dbc = load i32, i32* %r1.global-to-local, align 4
  %v2_11dbc = inttoptr i32 %v1_11dbc to i32*
  %v3_11dbc = load i32, i32* %v2_11dbc, align 4
  store i32 %v3_11dbc, i32* @r3, align 4
  %v5_11dbc = add i32 %v1_11dbc, 4
  store i32 %v5_11dbc, i32* %r1.global-to-local, align 4
  br i1 %v4_11db8, label %.thread109, label %bb145

.thread109:                                       ; preds = %bb143
  %v2_11dc0102 = inttoptr i32 %v5_11dbc to i16*
  %v3_11dc0103 = load i16, i16* %v2_11dc0102, align 2
  %v4_11dc0104 = zext i16 %v3_11dc0103 to i32
  store i32 %v4_11dc0104, i32* %r4.global-to-local, align 4
  %v6_11dc0105 = add i32 %v1_11dbc, 2
  store i32 %v6_11dc0105, i32* %r1.global-to-local, align 4
  %v3_11dc4111 = inttoptr i32 %v2_11dc4 to i32*
  store i32 %v3_11dbc, i32* %v3_11dc4111, align 4
  %v4_11dc4112 = load i32, i32* %r0.global-to-local, align 4
  %v5_11dc4113 = add i32 %v4_11dc4112, 4
  store i32 %v5_11dc4113, i32* %r0.global-to-local, align 4
  %v1_11dc8.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t196 = trunc i32 %v1_11dc8.pre to i16
  br label %bb146

bb144:                                            ; preds = %.thread98
  br i1 %v4_11db8, label %.thread106, label %.thread108

.thread106:                                       ; preds = %bb144
  %v1_11dc0.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_11dc0 = inttoptr i32 %v1_11dc0.pre to i16*
  %v3_11dc0 = load i16, i16* %v2_11dc0, align 2
  %v4_11dc0 = zext i16 %v3_11dc0 to i32
  store i32 %v4_11dc0, i32* %r4.global-to-local, align 4
  %v6_11dc0 = add i32 %v1_11dc0.pre, -2
  store i32 %v6_11dc0, i32* %r1.global-to-local, align 4
  br label %bb146

bb145:                                            ; preds = %bb143
  %v3_11dc4 = inttoptr i32 %v2_11dc4 to i32*
  store i32 %v3_11dbc, i32* %v3_11dc4, align 4
  %v4_11dc4 = load i32, i32* %r0.global-to-local, align 4
  %v5_11dc4 = add i32 %v4_11dc4, 4
  store i32 %v5_11dc4, i32* %r0.global-to-local, align 4
  br label %.thread108

bb146:                                            ; preds = %.thread109, %.thread106
  %v1_11dc8.off0 = phi i16 [ %v3_11dc0, %.thread106 ], [ %extract.t196, %.thread109 ]
  %v3_11dc8107 = phi i32 [ %v2_11dc4, %.thread106 ], [ %v5_11dc4113, %.thread109 ]
  %v4_11dc8 = inttoptr i32 %v3_11dc8107 to i16*
  store i16 %v1_11dc8.off0, i16* %v4_11dc8, align 2
  %v5_11dc8 = load i32, i32* %r0.global-to-local, align 4
  %v6_11dc8 = add i32 %v5_11dc8, -2
  store i32 %v6_11dc8, i32* %r0.global-to-local, align 4
  br label %.thread108

.thread108:                                       ; preds = %bb144, %bb145, %bb146
  %v3_11dd4 = phi i32 [ %v5_11dc4, %bb145 ], [ %v6_11dc8, %bb146 ], [ %v2_11dc4, %bb144 ]
  %v0_11dcc = load i32, i32* @r2, align 4
  %v1_11dcc = urem i32 %v0_11dcc, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11dcc = icmp eq i32 %v1_11dcc, 0
  br i1 %v2_11dcc, label %.thread4, label %bb147

bb147:                                            ; preds = %.thread108
  %v1_11dd0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11dd0 = inttoptr i32 %v1_11dd0 to i8*
  %v3_11dd0 = load i8, i8* %v2_11dd0, align 1
  %v4_11dd0 = zext i8 %v3_11dd0 to i32
  store i32 %v4_11dd0, i32* @r3, align 4
  %v4_11dd4 = inttoptr i32 %v3_11dd4 to i8*
  store i8 %v3_11dd0, i8* %v4_11dd4, align 1
  br label %.thread4

.thread4:                                         ; preds = %.thread108, %dec_label_pc_11d9c, %bb147
  %v2_11dd8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_11dd8, i32* @r5, align 4
  store i32 %v5_11d44, i32* @r6, align 4
  store i32 %v8_11d44, i32* @r7, align 4
  store i32 %v11_11d44, i32* @r8, align 4
  store i32 %v14_11d44, i32* @sb, align 4
  store i32 %v17_11d44, i32* @sl, align 4
  store i32 %v20_11d44, i32* @fp, align 4
  store i32 %v3_11cfc, i32* %r0.global-to-local, align 4
  store i32 %v8_11cfc, i32* @r4, align 4
  store i32 %v11_11cfc, i32* @lr, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  ret i32 %v3_11cfc

dec_label_pc_11dec:                               ; preds = %.thread2
  %v0_11dec = load i32, i32* %r2.global-to-local, align 4
  %v1_11dec = add i32 %v0_11dec, -4
  %v2_11dec = icmp ugt i32 %v0_11dec, 3
  store i1 %v2_11dec, i1* %cpsr_c.global-to-local, align 1
  %v6_11dec = icmp slt i32 %v1_11dec, 0
  store i1 %v6_11dec, i1* %cpsr_n.global-to-local, align 1
  %v3_11df0 = icmp ult i32 %v0_11dec, 2
  br i1 %v3_11df0, label %dec_label_pc_11fd8, label %dec_label_pc_11df4

dec_label_pc_11df4:                               ; preds = %dec_label_pc_11dec
  %v2_11df4 = load i32, i32* @r5, align 4
  store i32 %v2_11df4, i32* %stack_var_-40, align 4
  %v5_11df4 = load i32, i32* @r6, align 4
  %v8_11df4 = load i32, i32* @r7, align 4
  %v11_11df4 = load i32, i32* @r8, align 4
  %v14_11df4 = load i32, i32* @sb, align 4
  %v17_11df4 = load i32, i32* @sl, align 4
  %v20_11df4 = load i32, i32* @fp, align 4
  %v1_11df8 = sub i32 0, %v1_11d68
  %v1_11dfc = urem i32 %v1_11df8, 4
  store i32 %v1_11dfc, i32* %r5.global-to-local, align 4
  %v3_11e00 = mul nuw nsw i32 %v1_11dfc, 8
  store i32 %v3_11e00, i32* @ip, align 4
  %v1_11e04 = sub nsw i32 32, %v3_11e00
  store i32 %v1_11e04, i32* %lr.global-to-local, align 4
  %v1_11e08 = inttoptr i32 %v1_11d38 to i32*
  %v2_11e08 = load i32, i32* %v1_11e08, align 4
  store i32 %v2_11e08, i32* @r3, align 4
  %v4_11e08 = add i32 %v1_11d38, 4
  store i32 %v4_11e08, i32* %r1.global-to-local, align 4
  store i32 %v1_11dec, i32* %r2.global-to-local, align 4
  %v1_11e10 = and i32 %v1_11df8, 2
  %v2_11e10 = icmp ne i32 %v1_11e10, 0
  store i1 %v2_11e10, i1* %cpsr_c.global-to-local, align 1
  %v3_11e10 = shl i32 %v1_11df8, 31
  store i32 %v3_11e10, i32* %r5.global-to-local, align 4
  %v4_11e10 = icmp ne i32 %v3_11e10, 0
  store i1 %v4_11e10, i1* %cpsr_n.global-to-local, align 1
  %v2_11e14 = trunc i32 %v2_11e08 to i8
  br i1 %v4_11e10, label %bb148, label %thread-pre-split

bb148:                                            ; preds = %dec_label_pc_11df4
  %v4_11e14 = inttoptr i32 %v1_11d68 to i8*
  store i8 %v2_11e14, i8* %v4_11e14, align 1
  %v5_11e14 = load i32, i32* %r0.global-to-local, align 4
  %v6_11e14 = add i32 %v5_11e14, 1
  store i32 %v6_11e14, i32* %r0.global-to-local, align 4
  %v0_11e18.pr = load i1, i1* %cpsr_n.global-to-local, align 1
  br i1 %v0_11e18.pr, label %bb149, label %.thread-pre-split_crit_edge

.thread-pre-split_crit_edge:                      ; preds = %bb148
  %v0_11e1c.pr.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_11e1c.pr.pre, label %.thread-pre-split_crit_edge.thread-pre-split._crit_edge_crit_edge, label %.thread10

.thread-pre-split_crit_edge.thread-pre-split._crit_edge_crit_edge: ; preds = %.thread-pre-split_crit_edge
  %v1_11e1c.pre.pre = load i32, i32* @r3, align 4
  %extract.t193 = trunc i32 %v1_11e1c.pre.pre to i8
  br label %bb150

thread-pre-split:                                 ; preds = %dec_label_pc_11df4
  br i1 %v2_11e10, label %bb150, label %.thread10

bb149:                                            ; preds = %bb148
  %v1_11e18 = load i32, i32* @r3, align 4
  %v2_11e18 = and i32 %v1_11e18, 128
  %v3_11e18 = icmp ne i32 %v2_11e18, 0
  store i1 %v3_11e18, i1* %cpsr_c.global-to-local, align 1
  %v4_11e18 = udiv i32 %v1_11e18, 256
  store i32 %v4_11e18, i32* @r3, align 4
  %extract.t87 = trunc i32 %v4_11e18 to i8
  br i1 %v3_11e18, label %bb150, label %.thread10

bb150:                                            ; preds = %thread-pre-split, %.thread-pre-split_crit_edge.thread-pre-split._crit_edge_crit_edge, %bb149
  %v3_11e1c = phi i32 [ %v6_11e14, %bb149 ], [ %v6_11e14, %.thread-pre-split_crit_edge.thread-pre-split._crit_edge_crit_edge ], [ %v1_11d68, %thread-pre-split ]
  %v1_11e1c.off0 = phi i8 [ %extract.t87, %bb149 ], [ %extract.t193, %.thread-pre-split_crit_edge.thread-pre-split._crit_edge_crit_edge ], [ %v2_11e14, %thread-pre-split ]
  %v4_11e1c = inttoptr i32 %v3_11e1c to i8*
  store i8 %v1_11e1c.off0, i8* %v4_11e1c, align 1
  %v5_11e1c = load i32, i32* %r0.global-to-local, align 4
  %v6_11e1c = add i32 %v5_11e1c, 1
  store i32 %v6_11e1c, i32* %r0.global-to-local, align 4
  %v0_11e20.pr = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_11e20.pr, label %bb151, label %.thread10

bb151:                                            ; preds = %bb150
  %v1_11e20 = load i32, i32* @r3, align 4
  %v2_11e20 = and i32 %v1_11e20, 128
  %v3_11e20 = icmp ne i32 %v2_11e20, 0
  store i1 %v3_11e20, i1* %cpsr_c.global-to-local, align 1
  %v4_11e20 = udiv i32 %v1_11e20, 256
  store i32 %v4_11e20, i32* @r3, align 4
  br i1 %v3_11e20, label %.thread7, label %.thread10

.thread7:                                         ; preds = %bb151
  %v2_11e24 = trunc i32 %v4_11e20 to i8
  %v4_11e24 = inttoptr i32 %v6_11e1c to i8*
  store i8 %v2_11e24, i8* %v4_11e24, align 1
  %v5_11e24 = load i32, i32* %r0.global-to-local, align 4
  %v6_11e24 = add i32 %v5_11e24, 1
  store i32 %v6_11e24, i32* %r0.global-to-local, align 4
  %v0_11e28.pr.pr = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_11e28.pr.pr, label %bb152, label %.thread10

bb152:                                            ; preds = %.thread7
  %v1_11e28 = load i32, i32* @r3, align 4
  %v2_11e28 = and i32 %v1_11e28, 128
  %v3_11e28 = icmp ne i32 %v2_11e28, 0
  store i1 %v3_11e28, i1* %cpsr_c.global-to-local, align 1
  %v4_11e28 = udiv i32 %v1_11e28, 256
  store i32 %v4_11e28, i32* @r3, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread-pre-split_crit_edge, %bb150, %bb149, %thread-pre-split, %bb151, %.thread7, %bb152
  %v0_11e3431 = phi i32 [ %v6_11e1c, %bb150 ], [ %v6_11e14, %bb149 ], [ %v1_11d68, %thread-pre-split ], [ %v6_11e1c, %bb151 ], [ %v6_11e24, %.thread7 ], [ %v6_11e24, %bb152 ], [ %v6_11e14, %.thread-pre-split_crit_edge ]
  %v0_11e2c = load i32, i32* %r2.global-to-local, align 4
  %v1_11e2c = add i32 %v0_11e2c, -4
  %v2_11e2c = icmp ugt i32 %v0_11e2c, 3
  store i1 %v2_11e2c, i1* %cpsr_c.global-to-local, align 1
  %v6_11e2c = icmp slt i32 %v1_11e2c, 0
  store i1 %v6_11e2c, i1* %cpsr_n.global-to-local, align 1
  %v3_11e30 = icmp ult i32 %v0_11e2c, 2
  br i1 %v3_11e30, label %dec_label_pc_11fbc, label %dec_label_pc_11e34

dec_label_pc_11e34:                               ; preds = %.thread10, %dec_label_pc_11e3c
  %v0_11e40 = phi i32 [ %v0_11e50, %dec_label_pc_11e3c ], [ %v0_11e2c, %.thread10 ]
  %v1_11e4c = phi i32 [ %v4_11e4c, %dec_label_pc_11e3c ], [ %v0_11e3431, %.thread10 ]
  %v1_11e34 = and i32 %v1_11e4c, 28
  %v2_11e34 = icmp eq i32 %v1_11e34, 0
  br i1 %v2_11e34, label %dec_label_pc_11e5c.loopexit, label %dec_label_pc_11e3c

dec_label_pc_11e3c:                               ; preds = %dec_label_pc_11e34
  %v0_11e3c = load i32, i32* %r1.global-to-local, align 4
  %v1_11e3c = inttoptr i32 %v0_11e3c to i32*
  %v2_11e3c = load i32, i32* %v1_11e3c, align 4
  store i32 %v2_11e3c, i32* %r5.global-to-local, align 4
  %v4_11e3c = add i32 %v0_11e3c, 4
  store i32 %v4_11e3c, i32* %r1.global-to-local, align 4
  %v1_11e40 = add i32 %v0_11e40, -4
  store i32 %v1_11e40, i32* %r2.global-to-local, align 4
  %v0_11e44 = load i32, i32* @r3, align 4
  %v2_11e44 = load i32, i32* %lr.global-to-local, align 4
  %v7_11e44 = shl i32 %v2_11e3c, %v2_11e44
  %v8_11e44 = or i32 %v7_11e44, %v0_11e44
  store i32 %v8_11e44, i32* %r4.global-to-local, align 4
  %v1_11e48 = load i32, i32* @ip, align 4
  %v6_11e48 = lshr i32 %v2_11e3c, %v1_11e48
  store i32 %v6_11e48, i32* @r3, align 4
  %v2_11e4c = inttoptr i32 %v1_11e4c to i32*
  store i32 %v8_11e44, i32* %v2_11e4c, align 4
  %v3_11e4c = load i32, i32* %r0.global-to-local, align 4
  %v4_11e4c = add i32 %v3_11e4c, 4
  store i32 %v4_11e4c, i32* %r0.global-to-local, align 4
  %v0_11e50 = load i32, i32* %r2.global-to-local, align 4
  %v2_11e50 = icmp ugt i32 %v0_11e50, 3
  store i1 %v2_11e50, i1* %cpsr_c.global-to-local, align 1
  br i1 %v2_11e50, label %dec_label_pc_11e34, label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %dec_label_pc_11e3c
  %v1_11e50 = add i32 %v0_11e50, -4
  %v6_11e50 = icmp slt i32 %v1_11e50, 0
  store i1 %v6_11e50, i1* %cpsr_n.global-to-local, align 1
  %v3_11e58 = icmp ult i32 %v0_11e50, 2
  br i1 %v3_11e58, label %dec_label_pc_11fbc, label %dec_label_pc_11e5c

dec_label_pc_11e5c.loopexit:                      ; preds = %dec_label_pc_11e34
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_11e5c

dec_label_pc_11e5c:                               ; preds = %dec_label_pc_11e5c.loopexit, %dec_label_pc_11e58
  %v0_11ec438 = phi i32 [ %v1_11e4c, %dec_label_pc_11e5c.loopexit ], [ %v4_11e4c, %dec_label_pc_11e58 ]
  %v0_11e5c = phi i32 [ %v0_11e40, %dec_label_pc_11e5c.loopexit ], [ %v0_11e50, %dec_label_pc_11e58 ]
  %v1_11e5c = add i32 %v0_11e5c, -32
  store i32 %v1_11e5c, i32* %r2.global-to-local, align 4
  %v2_11e5c = icmp ugt i32 %v0_11e5c, 31
  store i1 %v2_11e5c, i1* %cpsr_c.global-to-local, align 1
  %v6_11e5c = icmp slt i32 %v1_11e5c, 0
  store i1 %v6_11e5c, i1* %cpsr_n.global-to-local, align 1
  %v3_11e60 = icmp ult i32 %v1_11e5c, 30
  br i1 %v3_11e60, label %dec_label_pc_11f90, label %dec_label_pc_11e64

dec_label_pc_11e64:                               ; preds = %dec_label_pc_11e5c
  %v0_11e64 = load i32, i32* @ip, align 4
  %v1_11e64 = add i32 %v0_11e64, -24
  %v2_11e64 = icmp ugt i32 %v0_11e64, 23
  store i1 %v2_11e64, i1* %cpsr_c.global-to-local, align 1
  %v6_11e64 = icmp slt i32 %v1_11e64, 0
  store i1 %v6_11e64, i1* %cpsr_n.global-to-local, align 1
  %v7_11e64 = icmp eq i32 %v0_11e64, 24
  br i1 %v7_11e64, label %dec_label_pc_11f34, label %dec_label_pc_11e6c

dec_label_pc_11e6c:                               ; preds = %dec_label_pc_11e64
  %v1_11e6c = add i32 %v0_11e64, -8
  %v2_11e6c = icmp ugt i32 %v0_11e64, 7
  store i1 %v2_11e6c, i1* %cpsr_c.global-to-local, align 1
  %v6_11e6c = icmp slt i32 %v1_11e6c, 0
  store i1 %v6_11e6c, i1* %cpsr_n.global-to-local, align 1
  %v7_11e6c = icmp eq i32 %v0_11e64, 8
  %v0_11ed4 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ed4 = inttoptr i32 %v0_11ed4 to i32*
  %v2_11ed4 = load i32, i32* %v1_11ed4, align 4
  store i32 %v2_11ed4, i32* %ip.global-to-local, align 4
  %v4_11ed4 = add i32 %v0_11ed4, 4
  store i32 %v4_11ed4, i32* %r1.global-to-local, align 4
  br i1 %v7_11e6c, label %dec_label_pc_11ed8, label %dec_label_pc_11e78

dec_label_pc_11e78:                               ; preds = %dec_label_pc_11e6c, %.dec_label_pc_11e78_crit_edge
  %v0_11ec4 = phi i32 [ %v24_11ec4, %.dec_label_pc_11e78_crit_edge ], [ %v0_11ec438, %dec_label_pc_11e6c ]
  %v0_11e80 = phi i32 [ %v0_11e80.pre, %.dec_label_pc_11e78_crit_edge ], [ %v1_11e5c, %dec_label_pc_11e6c ]
  %v0_11e7c = phi i32 [ %v0_11e7c.pre, %.dec_label_pc_11e78_crit_edge ], [ %v4_11ed4, %dec_label_pc_11e6c ]
  %v1_11e88 = phi i32 [ %v0_11e78.pre, %.dec_label_pc_11e78_crit_edge ], [ %v2_11ed4, %dec_label_pc_11e6c ]
  store i32 %v1_11e88, i32* %r4.global-to-local, align 4
  %v1_11e7c = inttoptr i32 %v0_11e7c to i32*
  %v2_11e7c = load i32, i32* %v1_11e7c, align 4
  store i32 %v2_11e7c, i32* %r5.global-to-local, align 4
  %v3_11e7c = add i32 %v0_11e7c, 4
  %v4_11e7c = inttoptr i32 %v3_11e7c to i32*
  %v5_11e7c = load i32, i32* %v4_11e7c, align 4
  store i32 %v5_11e7c, i32* %r6.global-to-local, align 4
  %v6_11e7c = add i32 %v0_11e7c, 8
  %v7_11e7c = inttoptr i32 %v6_11e7c to i32*
  %v8_11e7c = load i32, i32* %v7_11e7c, align 4
  store i32 %v8_11e7c, i32* %r7.global-to-local, align 4
  %v9_11e7c = add i32 %v0_11e7c, 12
  %v10_11e7c = inttoptr i32 %v9_11e7c to i32*
  %v11_11e7c = load i32, i32* %v10_11e7c, align 4
  store i32 %v11_11e7c, i32* %r8.global-to-local, align 4
  %v12_11e7c = add i32 %v0_11e7c, 16
  %v13_11e7c = inttoptr i32 %v12_11e7c to i32*
  %v14_11e7c = load i32, i32* %v13_11e7c, align 4
  store i32 %v14_11e7c, i32* %sb.global-to-local, align 4
  %v15_11e7c = add i32 %v0_11e7c, 20
  %v16_11e7c = inttoptr i32 %v15_11e7c to i32*
  %v17_11e7c = load i32, i32* %v16_11e7c, align 4
  store i32 %v17_11e7c, i32* %sl.global-to-local, align 4
  %v18_11e7c = add i32 %v0_11e7c, 24
  %v19_11e7c = inttoptr i32 %v18_11e7c to i32*
  %v20_11e7c = load i32, i32* %v19_11e7c, align 4
  store i32 %v20_11e7c, i32* %fp.global-to-local, align 4
  %v21_11e7c = add i32 %v0_11e7c, 28
  store i32 %v21_11e7c, i32* %r1.global-to-local, align 4
  %v1_11e80 = add i32 %v0_11e80, -32
  store i32 %v1_11e80, i32* %r2.global-to-local, align 4
  %v2_11e80 = icmp ugt i32 %v0_11e80, 31
  br i1 %v2_11e80, label %bb153, label %bb154

bb153:                                            ; preds = %dec_label_pc_11e78
  %v2_11e84 = inttoptr i32 %v21_11e7c to i32*
  %v3_11e84 = load i32, i32* %v2_11e84, align 4
  store i32 %v3_11e84, i32* %ip.global-to-local, align 4
  %v5_11e84 = add i32 %v0_11e7c, 32
  store i32 %v5_11e84, i32* %r1.global-to-local, align 4
  br label %bb154

bb154:                                            ; preds = %dec_label_pc_11e78, %bb153
  %v0_11e88 = load i32, i32* @r3, align 4
  %v4_11e88 = mul i32 %v1_11e88, 65536
  %v5_11e88 = or i32 %v0_11e88, %v4_11e88
  %v3_11e8c = udiv i32 %v1_11e88, 65536
  %v4_11e90 = mul i32 %v2_11e7c, 65536
  %v5_11e90 = or i32 %v4_11e90, %v3_11e8c
  store i32 %v5_11e90, i32* %r4.global-to-local, align 4
  %v3_11e94 = udiv i32 %v2_11e7c, 65536
  %v4_11e98 = mul i32 %v5_11e7c, 65536
  %v5_11e98 = or i32 %v4_11e98, %v3_11e94
  store i32 %v5_11e98, i32* %r5.global-to-local, align 4
  %v3_11e9c = udiv i32 %v5_11e7c, 65536
  %v4_11ea0 = mul i32 %v8_11e7c, 65536
  %v5_11ea0 = or i32 %v4_11ea0, %v3_11e9c
  store i32 %v5_11ea0, i32* %r6.global-to-local, align 4
  %v3_11ea4 = udiv i32 %v8_11e7c, 65536
  %v4_11ea8 = mul i32 %v11_11e7c, 65536
  %v5_11ea8 = or i32 %v4_11ea8, %v3_11ea4
  store i32 %v5_11ea8, i32* %r7.global-to-local, align 4
  %v3_11eac = udiv i32 %v11_11e7c, 65536
  %v4_11eb0 = mul i32 %v14_11e7c, 65536
  %v5_11eb0 = or i32 %v4_11eb0, %v3_11eac
  store i32 %v5_11eb0, i32* %r8.global-to-local, align 4
  %v3_11eb4 = udiv i32 %v14_11e7c, 65536
  %v4_11eb8 = mul i32 %v17_11e7c, 65536
  %v5_11eb8 = or i32 %v4_11eb8, %v3_11eb4
  store i32 %v5_11eb8, i32* %sb.global-to-local, align 4
  %v3_11ebc = udiv i32 %v17_11e7c, 65536
  %v4_11ec0 = mul i32 %v20_11e7c, 65536
  %v5_11ec0 = or i32 %v4_11ec0, %v3_11ebc
  store i32 %v5_11ec0, i32* %sl.global-to-local, align 4
  %v1_11ec4 = inttoptr i32 %v0_11ec4 to i32*
  store i32 %v5_11e88, i32* %v1_11ec4, align 4
  %v3_11ec4 = add i32 %v0_11ec4, 4
  %v4_11ec4 = inttoptr i32 %v3_11ec4 to i32*
  %v5_11ec4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11ec4, i32* %v4_11ec4, align 4
  %v6_11ec4 = add i32 %v0_11ec4, 8
  %v7_11ec4 = inttoptr i32 %v6_11ec4 to i32*
  %v8_11ec4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_11ec4, i32* %v7_11ec4, align 4
  %v9_11ec4 = add i32 %v0_11ec4, 12
  %v10_11ec4 = inttoptr i32 %v9_11ec4 to i32*
  %v11_11ec4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v11_11ec4, i32* %v10_11ec4, align 4
  %v12_11ec4 = add i32 %v0_11ec4, 16
  %v13_11ec4 = inttoptr i32 %v12_11ec4 to i32*
  %v14_11ec4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v14_11ec4, i32* %v13_11ec4, align 4
  %v15_11ec4 = add i32 %v0_11ec4, 20
  %v16_11ec4 = inttoptr i32 %v15_11ec4 to i32*
  %v17_11ec4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v17_11ec4, i32* %v16_11ec4, align 4
  %v18_11ec4 = add i32 %v0_11ec4, 24
  %v19_11ec4 = inttoptr i32 %v18_11ec4 to i32*
  %v20_11ec4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v20_11ec4, i32* %v19_11ec4, align 4
  %v21_11ec4 = add i32 %v0_11ec4, 28
  %v22_11ec4 = inttoptr i32 %v21_11ec4 to i32*
  %v23_11ec4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v23_11ec4, i32* %v22_11ec4, align 4
  %v24_11ec4 = add i32 %v0_11ec4, 32
  store i32 %v24_11ec4, i32* %r0.global-to-local, align 4
  %v0_11ec8 = load i32, i32* %fp.global-to-local, align 4
  %v1_11ec8 = and i32 %v0_11ec8, 32768
  %v2_11ec8 = icmp eq i32 %v1_11ec8, 0
  %v3_11ec8 = udiv i32 %v0_11ec8, 65536
  store i32 %v3_11ec8, i32* @r3, align 4
  br i1 %v2_11ec8, label %dec_label_pc_11f90.loopexit19, label %.dec_label_pc_11e78_crit_edge

.dec_label_pc_11e78_crit_edge:                    ; preds = %bb154
  %v0_11e78.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_11e7c.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_11e80.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11e78

dec_label_pc_11ed8:                               ; preds = %dec_label_pc_11e6c, %.dec_label_pc_11ed8_crit_edge
  %v0_11f24 = phi i32 [ %v24_11f24, %.dec_label_pc_11ed8_crit_edge ], [ %v0_11ec438, %dec_label_pc_11e6c ]
  %v0_11ee0 = phi i32 [ %v0_11ee0.pre, %.dec_label_pc_11ed8_crit_edge ], [ %v1_11e5c, %dec_label_pc_11e6c ]
  %v0_11edc = phi i32 [ %v0_11edc.pre, %.dec_label_pc_11ed8_crit_edge ], [ %v4_11ed4, %dec_label_pc_11e6c ]
  %v1_11ee8 = phi i32 [ %v0_11ed8.pre, %.dec_label_pc_11ed8_crit_edge ], [ %v2_11ed4, %dec_label_pc_11e6c ]
  store i32 %v1_11ee8, i32* %r4.global-to-local, align 4
  %v1_11edc = inttoptr i32 %v0_11edc to i32*
  %v2_11edc = load i32, i32* %v1_11edc, align 4
  store i32 %v2_11edc, i32* %r5.global-to-local, align 4
  %v3_11edc = add i32 %v0_11edc, 4
  %v4_11edc = inttoptr i32 %v3_11edc to i32*
  %v5_11edc = load i32, i32* %v4_11edc, align 4
  store i32 %v5_11edc, i32* %r6.global-to-local, align 4
  %v6_11edc = add i32 %v0_11edc, 8
  %v7_11edc = inttoptr i32 %v6_11edc to i32*
  %v8_11edc = load i32, i32* %v7_11edc, align 4
  store i32 %v8_11edc, i32* %r7.global-to-local, align 4
  %v9_11edc = add i32 %v0_11edc, 12
  %v10_11edc = inttoptr i32 %v9_11edc to i32*
  %v11_11edc = load i32, i32* %v10_11edc, align 4
  store i32 %v11_11edc, i32* %r8.global-to-local, align 4
  %v12_11edc = add i32 %v0_11edc, 16
  %v13_11edc = inttoptr i32 %v12_11edc to i32*
  %v14_11edc = load i32, i32* %v13_11edc, align 4
  store i32 %v14_11edc, i32* %sb.global-to-local, align 4
  %v15_11edc = add i32 %v0_11edc, 20
  %v16_11edc = inttoptr i32 %v15_11edc to i32*
  %v17_11edc = load i32, i32* %v16_11edc, align 4
  store i32 %v17_11edc, i32* %sl.global-to-local, align 4
  %v18_11edc = add i32 %v0_11edc, 24
  %v19_11edc = inttoptr i32 %v18_11edc to i32*
  %v20_11edc = load i32, i32* %v19_11edc, align 4
  store i32 %v20_11edc, i32* %fp.global-to-local, align 4
  %v21_11edc = add i32 %v0_11edc, 28
  store i32 %v21_11edc, i32* %r1.global-to-local, align 4
  %v1_11ee0 = add i32 %v0_11ee0, -32
  store i32 %v1_11ee0, i32* %r2.global-to-local, align 4
  %v2_11ee0 = icmp ugt i32 %v0_11ee0, 31
  br i1 %v2_11ee0, label %bb155, label %bb156

bb155:                                            ; preds = %dec_label_pc_11ed8
  %v2_11ee4 = inttoptr i32 %v21_11edc to i32*
  %v3_11ee4 = load i32, i32* %v2_11ee4, align 4
  store i32 %v3_11ee4, i32* %ip.global-to-local, align 4
  %v5_11ee4 = add i32 %v0_11edc, 32
  store i32 %v5_11ee4, i32* %r1.global-to-local, align 4
  br label %bb156

bb156:                                            ; preds = %dec_label_pc_11ed8, %bb155
  %v0_11ee8 = load i32, i32* @r3, align 4
  %v4_11ee8 = mul i32 %v1_11ee8, 16777216
  %v5_11ee8 = or i32 %v0_11ee8, %v4_11ee8
  %v3_11eec = udiv i32 %v1_11ee8, 256
  %v4_11ef0 = mul i32 %v2_11edc, 16777216
  %v5_11ef0 = or i32 %v4_11ef0, %v3_11eec
  store i32 %v5_11ef0, i32* %r4.global-to-local, align 4
  %v3_11ef4 = udiv i32 %v2_11edc, 256
  %v4_11ef8 = mul i32 %v5_11edc, 16777216
  %v5_11ef8 = or i32 %v4_11ef8, %v3_11ef4
  store i32 %v5_11ef8, i32* %r5.global-to-local, align 4
  %v3_11efc = udiv i32 %v5_11edc, 256
  %v4_11f00 = mul i32 %v8_11edc, 16777216
  %v5_11f00 = or i32 %v4_11f00, %v3_11efc
  store i32 %v5_11f00, i32* %r6.global-to-local, align 4
  %v3_11f04 = udiv i32 %v8_11edc, 256
  %v4_11f08 = mul i32 %v11_11edc, 16777216
  %v5_11f08 = or i32 %v4_11f08, %v3_11f04
  store i32 %v5_11f08, i32* %r7.global-to-local, align 4
  %v3_11f0c = udiv i32 %v11_11edc, 256
  %v4_11f10 = mul i32 %v14_11edc, 16777216
  %v5_11f10 = or i32 %v4_11f10, %v3_11f0c
  store i32 %v5_11f10, i32* %r8.global-to-local, align 4
  %v3_11f14 = udiv i32 %v14_11edc, 256
  %v4_11f18 = mul i32 %v17_11edc, 16777216
  %v5_11f18 = or i32 %v4_11f18, %v3_11f14
  store i32 %v5_11f18, i32* %sb.global-to-local, align 4
  %v3_11f1c = udiv i32 %v17_11edc, 256
  %v4_11f20 = mul i32 %v20_11edc, 16777216
  %v5_11f20 = or i32 %v4_11f20, %v3_11f1c
  store i32 %v5_11f20, i32* %sl.global-to-local, align 4
  %v1_11f24 = inttoptr i32 %v0_11f24 to i32*
  store i32 %v5_11ee8, i32* %v1_11f24, align 4
  %v3_11f24 = add i32 %v0_11f24, 4
  %v4_11f24 = inttoptr i32 %v3_11f24 to i32*
  %v5_11f24 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11f24, i32* %v4_11f24, align 4
  %v6_11f24 = add i32 %v0_11f24, 8
  %v7_11f24 = inttoptr i32 %v6_11f24 to i32*
  %v8_11f24 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_11f24, i32* %v7_11f24, align 4
  %v9_11f24 = add i32 %v0_11f24, 12
  %v10_11f24 = inttoptr i32 %v9_11f24 to i32*
  %v11_11f24 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v11_11f24, i32* %v10_11f24, align 4
  %v12_11f24 = add i32 %v0_11f24, 16
  %v13_11f24 = inttoptr i32 %v12_11f24 to i32*
  %v14_11f24 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v14_11f24, i32* %v13_11f24, align 4
  %v15_11f24 = add i32 %v0_11f24, 20
  %v16_11f24 = inttoptr i32 %v15_11f24 to i32*
  %v17_11f24 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v17_11f24, i32* %v16_11f24, align 4
  %v18_11f24 = add i32 %v0_11f24, 24
  %v19_11f24 = inttoptr i32 %v18_11f24 to i32*
  %v20_11f24 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v20_11f24, i32* %v19_11f24, align 4
  %v21_11f24 = add i32 %v0_11f24, 28
  %v22_11f24 = inttoptr i32 %v21_11f24 to i32*
  %v23_11f24 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v23_11f24, i32* %v22_11f24, align 4
  %v24_11f24 = add i32 %v0_11f24, 32
  store i32 %v24_11f24, i32* %r0.global-to-local, align 4
  %v0_11f28 = load i32, i32* %fp.global-to-local, align 4
  %v1_11f28 = and i32 %v0_11f28, 128
  %v2_11f28 = icmp eq i32 %v1_11f28, 0
  %v3_11f28 = udiv i32 %v0_11f28, 256
  store i32 %v3_11f28, i32* @r3, align 4
  br i1 %v2_11f28, label %dec_label_pc_11f90.loopexit18, label %.dec_label_pc_11ed8_crit_edge

.dec_label_pc_11ed8_crit_edge:                    ; preds = %bb156
  %v0_11ed8.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_11edc.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_11ee0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11ed8

dec_label_pc_11f34:                               ; preds = %dec_label_pc_11e64
  %v0_11f34 = load i32, i32* %r1.global-to-local, align 4
  %v1_11f34 = inttoptr i32 %v0_11f34 to i32*
  %v2_11f34 = load i32, i32* %v1_11f34, align 4
  store i32 %v2_11f34, i32* %ip.global-to-local, align 4
  %v4_11f34 = add i32 %v0_11f34, 4
  store i32 %v4_11f34, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f38

dec_label_pc_11f38:                               ; preds = %.dec_label_pc_11f38_crit_edge, %dec_label_pc_11f34
  %v0_11f84 = phi i32 [ %v24_11f84, %.dec_label_pc_11f38_crit_edge ], [ %v0_11ec438, %dec_label_pc_11f34 ]
  %v0_11f40 = phi i32 [ %v0_11f40.pre, %.dec_label_pc_11f38_crit_edge ], [ %v1_11e5c, %dec_label_pc_11f34 ]
  %v0_11f3c = phi i32 [ %v0_11f3c.pre, %.dec_label_pc_11f38_crit_edge ], [ %v4_11f34, %dec_label_pc_11f34 ]
  %v1_11f48 = phi i32 [ %v0_11f38.pre, %.dec_label_pc_11f38_crit_edge ], [ %v2_11f34, %dec_label_pc_11f34 ]
  store i32 %v1_11f48, i32* %r4.global-to-local, align 4
  %v1_11f3c = inttoptr i32 %v0_11f3c to i32*
  %v2_11f3c = load i32, i32* %v1_11f3c, align 4
  store i32 %v2_11f3c, i32* %r5.global-to-local, align 4
  %v3_11f3c = add i32 %v0_11f3c, 4
  %v4_11f3c = inttoptr i32 %v3_11f3c to i32*
  %v5_11f3c = load i32, i32* %v4_11f3c, align 4
  store i32 %v5_11f3c, i32* %r6.global-to-local, align 4
  %v6_11f3c = add i32 %v0_11f3c, 8
  %v7_11f3c = inttoptr i32 %v6_11f3c to i32*
  %v8_11f3c = load i32, i32* %v7_11f3c, align 4
  store i32 %v8_11f3c, i32* %r7.global-to-local, align 4
  %v9_11f3c = add i32 %v0_11f3c, 12
  %v10_11f3c = inttoptr i32 %v9_11f3c to i32*
  %v11_11f3c = load i32, i32* %v10_11f3c, align 4
  store i32 %v11_11f3c, i32* %r8.global-to-local, align 4
  %v12_11f3c = add i32 %v0_11f3c, 16
  %v13_11f3c = inttoptr i32 %v12_11f3c to i32*
  %v14_11f3c = load i32, i32* %v13_11f3c, align 4
  store i32 %v14_11f3c, i32* %sb.global-to-local, align 4
  %v15_11f3c = add i32 %v0_11f3c, 20
  %v16_11f3c = inttoptr i32 %v15_11f3c to i32*
  %v17_11f3c = load i32, i32* %v16_11f3c, align 4
  store i32 %v17_11f3c, i32* %sl.global-to-local, align 4
  %v18_11f3c = add i32 %v0_11f3c, 24
  %v19_11f3c = inttoptr i32 %v18_11f3c to i32*
  %v20_11f3c = load i32, i32* %v19_11f3c, align 4
  store i32 %v20_11f3c, i32* %fp.global-to-local, align 4
  %v21_11f3c = add i32 %v0_11f3c, 28
  store i32 %v21_11f3c, i32* %r1.global-to-local, align 4
  %v1_11f40 = add i32 %v0_11f40, -32
  store i32 %v1_11f40, i32* %r2.global-to-local, align 4
  %v2_11f40 = icmp ugt i32 %v0_11f40, 31
  br i1 %v2_11f40, label %bb157, label %bb158

bb157:                                            ; preds = %dec_label_pc_11f38
  %v2_11f44 = inttoptr i32 %v21_11f3c to i32*
  %v3_11f44 = load i32, i32* %v2_11f44, align 4
  store i32 %v3_11f44, i32* %ip.global-to-local, align 4
  %v5_11f44 = add i32 %v0_11f3c, 32
  store i32 %v5_11f44, i32* %r1.global-to-local, align 4
  br label %bb158

bb158:                                            ; preds = %dec_label_pc_11f38, %bb157
  %v0_11f48 = load i32, i32* @r3, align 4
  %v4_11f48 = mul i32 %v1_11f48, 256
  %v5_11f48 = or i32 %v0_11f48, %v4_11f48
  %v3_11f4c = udiv i32 %v1_11f48, 16777216
  %v4_11f50 = mul i32 %v2_11f3c, 256
  %v5_11f50 = or i32 %v4_11f50, %v3_11f4c
  store i32 %v5_11f50, i32* %r4.global-to-local, align 4
  %v3_11f54 = udiv i32 %v2_11f3c, 16777216
  %v4_11f58 = mul i32 %v5_11f3c, 256
  %v5_11f58 = or i32 %v4_11f58, %v3_11f54
  store i32 %v5_11f58, i32* %r5.global-to-local, align 4
  %v3_11f5c = udiv i32 %v5_11f3c, 16777216
  %v4_11f60 = mul i32 %v8_11f3c, 256
  %v5_11f60 = or i32 %v4_11f60, %v3_11f5c
  store i32 %v5_11f60, i32* %r6.global-to-local, align 4
  %v3_11f64 = udiv i32 %v8_11f3c, 16777216
  %v4_11f68 = mul i32 %v11_11f3c, 256
  %v5_11f68 = or i32 %v4_11f68, %v3_11f64
  store i32 %v5_11f68, i32* %r7.global-to-local, align 4
  %v3_11f6c = udiv i32 %v11_11f3c, 16777216
  %v4_11f70 = mul i32 %v14_11f3c, 256
  %v5_11f70 = or i32 %v4_11f70, %v3_11f6c
  store i32 %v5_11f70, i32* %r8.global-to-local, align 4
  %v3_11f74 = udiv i32 %v14_11f3c, 16777216
  %v4_11f78 = mul i32 %v17_11f3c, 256
  %v5_11f78 = or i32 %v4_11f78, %v3_11f74
  store i32 %v5_11f78, i32* %sb.global-to-local, align 4
  %v3_11f7c = udiv i32 %v17_11f3c, 16777216
  %v4_11f80 = mul i32 %v20_11f3c, 256
  %v5_11f80 = or i32 %v4_11f80, %v3_11f7c
  store i32 %v5_11f80, i32* %sl.global-to-local, align 4
  %v1_11f84 = inttoptr i32 %v0_11f84 to i32*
  store i32 %v5_11f48, i32* %v1_11f84, align 4
  %v3_11f84 = add i32 %v0_11f84, 4
  %v4_11f84 = inttoptr i32 %v3_11f84 to i32*
  %v5_11f84 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11f84, i32* %v4_11f84, align 4
  %v6_11f84 = add i32 %v0_11f84, 8
  %v7_11f84 = inttoptr i32 %v6_11f84 to i32*
  %v8_11f84 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_11f84, i32* %v7_11f84, align 4
  %v9_11f84 = add i32 %v0_11f84, 12
  %v10_11f84 = inttoptr i32 %v9_11f84 to i32*
  %v11_11f84 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v11_11f84, i32* %v10_11f84, align 4
  %v12_11f84 = add i32 %v0_11f84, 16
  %v13_11f84 = inttoptr i32 %v12_11f84 to i32*
  %v14_11f84 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v14_11f84, i32* %v13_11f84, align 4
  %v15_11f84 = add i32 %v0_11f84, 20
  %v16_11f84 = inttoptr i32 %v15_11f84 to i32*
  %v17_11f84 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v17_11f84, i32* %v16_11f84, align 4
  %v18_11f84 = add i32 %v0_11f84, 24
  %v19_11f84 = inttoptr i32 %v18_11f84 to i32*
  %v20_11f84 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v20_11f84, i32* %v19_11f84, align 4
  %v21_11f84 = add i32 %v0_11f84, 28
  %v22_11f84 = inttoptr i32 %v21_11f84 to i32*
  %v23_11f84 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v23_11f84, i32* %v22_11f84, align 4
  %v24_11f84 = add i32 %v0_11f84, 32
  store i32 %v24_11f84, i32* %r0.global-to-local, align 4
  %v0_11f88 = load i32, i32* %fp.global-to-local, align 4
  %v1_11f88 = and i32 %v0_11f88, 8388608
  %v2_11f88 = icmp eq i32 %v1_11f88, 0
  %v3_11f88 = udiv i32 %v0_11f88, 16777216
  store i32 %v3_11f88, i32* @r3, align 4
  br i1 %v2_11f88, label %dec_label_pc_11f90.loopexit, label %.dec_label_pc_11f38_crit_edge

.dec_label_pc_11f38_crit_edge:                    ; preds = %bb158
  %v0_11f38.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_11f3c.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_11f40.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11f38

dec_label_pc_11f90.loopexit:                      ; preds = %bb158
  %v6_11f40.le = icmp slt i32 %v1_11f40, 0
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 %v6_11f40.le, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_11f90

dec_label_pc_11f90.loopexit18:                    ; preds = %bb156
  %v6_11ee0.le = icmp slt i32 %v1_11ee0, 0
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 %v6_11ee0.le, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_11f90

dec_label_pc_11f90.loopexit19:                    ; preds = %bb154
  %v6_11e80.le = icmp slt i32 %v1_11e80, 0
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 %v6_11e80.le, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_11f90

dec_label_pc_11f90:                               ; preds = %dec_label_pc_11f90.loopexit19, %dec_label_pc_11f90.loopexit18, %dec_label_pc_11f90.loopexit, %dec_label_pc_11e5c
  %v1_11fb050 = phi i32 [ %v24_11ec4, %dec_label_pc_11f90.loopexit19 ], [ %v24_11f24, %dec_label_pc_11f90.loopexit18 ], [ %v24_11f84, %dec_label_pc_11f90.loopexit ], [ %v0_11ec438, %dec_label_pc_11e5c ]
  %v0_11f90 = load i32, i32* %lr.global-to-local, align 4
  %v1_11f90 = sub i32 32, %v0_11f90
  store i32 %v1_11f90, i32* @ip, align 4
  %v0_11f94 = load i32, i32* %r2.global-to-local, align 4
  %v1_11f94 = add i32 %v0_11f94, 32
  store i32 %v1_11f94, i32* %r2.global-to-local, align 4
  %v1_11f98 = add i32 %v0_11f94, 28
  %v2_11f98 = icmp ugt i32 %v1_11f94, 3
  store i1 %v2_11f98, i1* %cpsr_c.global-to-local, align 1
  %v6_11f98 = icmp slt i32 %v1_11f98, 0
  store i1 %v6_11f98, i1* %cpsr_n.global-to-local, align 1
  %v3_11f9c = icmp ult i32 %v1_11f94, 2
  br i1 %v3_11f9c, label %dec_label_pc_11fbc, label %dec_label_pc_11fa0

dec_label_pc_11fa0:                               ; preds = %dec_label_pc_11f90, %dec_label_pc_11fa0.dec_label_pc_11fa0_crit_edge
  %v1_11fb0 = phi i32 [ %v4_11fb0, %dec_label_pc_11fa0.dec_label_pc_11fa0_crit_edge ], [ %v1_11fb050, %dec_label_pc_11f90 ]
  %v1_11fac = phi i32 [ %v1_11fac.pre, %dec_label_pc_11fa0.dec_label_pc_11fa0_crit_edge ], [ %v1_11f90, %dec_label_pc_11f90 ]
  %v2_11fa8 = phi i32 [ %v2_11fa8.pre, %dec_label_pc_11fa0.dec_label_pc_11fa0_crit_edge ], [ %v0_11f90, %dec_label_pc_11f90 ]
  %v0_11fa4 = phi i32 [ %v0_11fb4, %dec_label_pc_11fa0.dec_label_pc_11fa0_crit_edge ], [ %v1_11f94, %dec_label_pc_11f90 ]
  %v0_11fa0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11fa0 = inttoptr i32 %v0_11fa0 to i32*
  %v2_11fa0 = load i32, i32* %v1_11fa0, align 4
  store i32 %v2_11fa0, i32* %r5.global-to-local, align 4
  %v4_11fa0 = add i32 %v0_11fa0, 4
  store i32 %v4_11fa0, i32* %r1.global-to-local, align 4
  %v1_11fa4 = add i32 %v0_11fa4, -4
  store i32 %v1_11fa4, i32* %r2.global-to-local, align 4
  %v0_11fa8 = load i32, i32* @r3, align 4
  %v7_11fa8 = shl i32 %v2_11fa0, %v2_11fa8
  %v8_11fa8 = or i32 %v0_11fa8, %v7_11fa8
  store i32 %v8_11fa8, i32* %r4.global-to-local, align 4
  %v6_11fac = lshr i32 %v2_11fa0, %v1_11fac
  store i32 %v6_11fac, i32* @r3, align 4
  %v2_11fb0 = inttoptr i32 %v1_11fb0 to i32*
  store i32 %v8_11fa8, i32* %v2_11fb0, align 4
  %v3_11fb0 = load i32, i32* %r0.global-to-local, align 4
  %v4_11fb0 = add i32 %v3_11fb0, 4
  store i32 %v4_11fb0, i32* %r0.global-to-local, align 4
  %v0_11fb4 = load i32, i32* %r2.global-to-local, align 4
  %v2_11fb4 = icmp ugt i32 %v0_11fb4, 3
  br i1 %v2_11fb4, label %dec_label_pc_11fa0.dec_label_pc_11fa0_crit_edge, label %dec_label_pc_11fbc.loopexit

dec_label_pc_11fa0.dec_label_pc_11fa0_crit_edge:  ; preds = %dec_label_pc_11fa0
  %v2_11fa8.pre = load i32, i32* %lr.global-to-local, align 4
  %v1_11fac.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_11fa0

dec_label_pc_11fbc.loopexit:                      ; preds = %dec_label_pc_11fa0
  %v1_11fb4 = add i32 %v0_11fb4, -4
  %v6_11fb4 = icmp slt i32 %v1_11fb4, 0
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 %v6_11fb4, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_11fbc

dec_label_pc_11fbc:                               ; preds = %dec_label_pc_11fbc.loopexit, %dec_label_pc_11f90, %dec_label_pc_11e58, %.thread10
  %v3_11fc0 = phi i32 [ %v4_11fb0, %dec_label_pc_11fbc.loopexit ], [ %v1_11fb050, %dec_label_pc_11f90 ], [ %v4_11e4c, %dec_label_pc_11e58 ], [ %v0_11e3431, %.thread10 ]
  %v0_11fbc = load i32, i32* %lr.global-to-local, align 4
  %v1_11fbc = and i32 %v0_11fbc, 16
  %v2_11fbc = icmp ne i32 %v1_11fbc, 0
  store i1 %v2_11fbc, i1* %cpsr_c.global-to-local, align 1
  %v3_11fbc = mul i32 %v0_11fbc, 268435456
  store i32 %v3_11fbc, i32* %r5.global-to-local, align 4
  %v4_11fbc = icmp slt i32 %v3_11fbc, 0
  store i1 %v4_11fbc, i1* %cpsr_n.global-to-local, align 1
  br i1 %v4_11fbc, label %bb159, label %thread-pre-split12

bb159:                                            ; preds = %dec_label_pc_11fbc
  %v1_11fc0 = load i32, i32* @r3, align 4
  %v2_11fc0 = trunc i32 %v1_11fc0 to i8
  %v4_11fc0 = inttoptr i32 %v3_11fc0 to i8*
  store i8 %v2_11fc0, i8* %v4_11fc0, align 1
  %v5_11fc0 = load i32, i32* %r0.global-to-local, align 4
  %v6_11fc0 = add i32 %v5_11fc0, 1
  store i32 %v6_11fc0, i32* %r0.global-to-local, align 4
  %v0_11fc4.pr = load i1, i1* %cpsr_n.global-to-local, align 1
  br i1 %v0_11fc4.pr, label %bb160, label %.thread-pre-split12_crit_edge

.thread-pre-split12_crit_edge:                    ; preds = %bb159
  %v0_11fc8.pr.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_11fc8.pr.pre, label %thread-pre-split12._crit_edge, label %.thread15

thread-pre-split12:                               ; preds = %dec_label_pc_11fbc
  br i1 %v2_11fbc, label %thread-pre-split12._crit_edge, label %.thread15

thread-pre-split12._crit_edge:                    ; preds = %.thread-pre-split12_crit_edge, %thread-pre-split12
  %v3_11fc856115 = phi i32 [ %v6_11fc0, %.thread-pre-split12_crit_edge ], [ %v3_11fc0, %thread-pre-split12 ]
  %v1_11fc8.pre = load i32, i32* @r3, align 4
  %extract.t84 = trunc i32 %v1_11fc8.pre to i8
  br label %bb161

bb160:                                            ; preds = %bb159
  %v1_11fc4 = load i32, i32* @r3, align 4
  %v2_11fc4 = and i32 %v1_11fc4, 128
  %v3_11fc4 = icmp ne i32 %v2_11fc4, 0
  store i1 %v3_11fc4, i1* %cpsr_c.global-to-local, align 1
  %v4_11fc4 = udiv i32 %v1_11fc4, 256
  store i32 %v4_11fc4, i32* @r3, align 4
  %extract.t85 = trunc i32 %v4_11fc4 to i8
  br i1 %v3_11fc4, label %bb161, label %.thread15

bb161:                                            ; preds = %thread-pre-split12._crit_edge, %bb160
  %v3_11fc8 = phi i32 [ %v3_11fc856115, %thread-pre-split12._crit_edge ], [ %v6_11fc0, %bb160 ]
  %v1_11fc8.off0 = phi i8 [ %extract.t84, %thread-pre-split12._crit_edge ], [ %extract.t85, %bb160 ]
  %v4_11fc8 = inttoptr i32 %v3_11fc8 to i8*
  store i8 %v1_11fc8.off0, i8* %v4_11fc8, align 1
  %v5_11fc8 = load i32, i32* %r0.global-to-local, align 4
  %v6_11fc8 = add i32 %v5_11fc8, 1
  store i32 %v6_11fc8, i32* %r0.global-to-local, align 4
  %v0_11fcc.pr = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_11fcc.pr, label %bb162, label %.thread15

bb162:                                            ; preds = %bb161
  %v1_11fcc = load i32, i32* @r3, align 4
  %v2_11fcc = and i32 %v1_11fcc, 128
  %v3_11fcc = icmp ne i32 %v2_11fcc, 0
  store i1 %v3_11fcc, i1* %cpsr_c.global-to-local, align 1
  %v4_11fcc = udiv i32 %v1_11fcc, 256
  store i32 %v4_11fcc, i32* @r3, align 4
  br i1 %v3_11fcc, label %bb163, label %.thread15

bb163:                                            ; preds = %bb162
  %v2_11fd0 = trunc i32 %v4_11fcc to i8
  %v4_11fd0 = inttoptr i32 %v6_11fc8 to i8*
  store i8 %v2_11fd0, i8* %v4_11fd0, align 1
  %v5_11fd0 = load i32, i32* %r0.global-to-local, align 4
  %v6_11fd0 = add i32 %v5_11fd0, 1
  store i32 %v6_11fd0, i32* %r0.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread-pre-split12_crit_edge, %bb160, %thread-pre-split12, %bb161, %bb162, %bb163
  %v3_11fe878 = phi i32 [ %v6_11fc0, %bb160 ], [ %v3_11fc0, %thread-pre-split12 ], [ %v6_11fc8, %bb161 ], [ %v6_11fc8, %bb162 ], [ %v6_11fd0, %bb163 ], [ %v6_11fc0, %.thread-pre-split12_crit_edge ]
  %v2_11fd4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_11fd4, i32* @r5, align 4
  store i32 %v5_11df4, i32* @r6, align 4
  store i32 %v8_11df4, i32* @r7, align 4
  store i32 %v11_11df4, i32* @r8, align 4
  store i32 %v14_11df4, i32* @sb, align 4
  store i32 %v17_11df4, i32* @sl, align 4
  store i32 %v20_11df4, i32* @fp, align 4
  %v0_11fd8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fd8

dec_label_pc_11fd8:                               ; preds = %dec_label_pc_11dec, %dec_label_pc_11cfc, %.thread15
  %v3_11fe8 = phi i32 [ %v1_11d68, %dec_label_pc_11dec ], [ %v3_11cfc, %dec_label_pc_11cfc ], [ %v3_11fe878, %.thread15 ]
  %v0_11fd8 = phi i32 [ %v0_11dec, %dec_label_pc_11dec ], [ %v0_11d04, %dec_label_pc_11cfc ], [ %v0_11fd8.pre, %.thread15 ]
  %v1_11fd8 = and i32 %v0_11fd8, 2
  %v2_11fd8 = icmp ne i32 %v1_11fd8, 0
  store i1 %v2_11fd8, i1* %cpsr_c.global-to-local, align 1
  %v3_11fd8 = shl i32 %v0_11fd8, 31
  store i32 %v3_11fd8, i32* @r2, align 4
  %v4_11fd8 = icmp ne i32 %v3_11fd8, 0
  store i1 %v4_11fd8, i1* %cpsr_n.global-to-local, align 1
  br i1 %v4_11fd8, label %bb164, label %bb165

bb164:                                            ; preds = %dec_label_pc_11fd8
  %v1_11fdc = load i32, i32* %r1.global-to-local, align 4
  %v2_11fdc = inttoptr i32 %v1_11fdc to i8*
  %v3_11fdc = load i8, i8* %v2_11fdc, align 1
  %v4_11fdc = zext i8 %v3_11fdc to i32
  store i32 %v4_11fdc, i32* @r2, align 4
  %v6_11fdc = add i32 %v1_11fdc, 1
  store i32 %v6_11fdc, i32* %r1.global-to-local, align 4
  br label %bb165

bb165:                                            ; preds = %dec_label_pc_11fd8, %bb164
  %v1_11fe8.off0 = phi i8 [ 0, %dec_label_pc_11fd8 ], [ %v3_11fdc, %bb164 ]
  br i1 %v2_11fd8, label %bb166, label %.thread16

bb166:                                            ; preds = %bb165
  %v1_11fe0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11fe0 = inttoptr i32 %v1_11fe0 to i8*
  %v3_11fe0 = load i8, i8* %v2_11fe0, align 1
  %v4_11fe0 = zext i8 %v3_11fe0 to i32
  store i32 %v4_11fe0, i32* @r3, align 4
  %v6_11fe0 = add i32 %v1_11fe0, 1
  store i32 %v6_11fe0, i32* %r1.global-to-local, align 4
  %v2_11fe4 = inttoptr i32 %v6_11fe0 to i8*
  %v3_11fe4 = load i8, i8* %v2_11fe4, align 1
  %v4_11fe4 = zext i8 %v3_11fe4 to i32
  store i32 %v4_11fe4, i32* @ip, align 4
  br label %.thread16

.thread16:                                        ; preds = %bb165, %bb166
  br i1 %v4_11fd8, label %bb167, label %bb168

bb167:                                            ; preds = %.thread16
  %v4_11fe8 = inttoptr i32 %v3_11fe8 to i8*
  store i8 %v1_11fe8.off0, i8* %v4_11fe8, align 1
  %v5_11fe8 = load i32, i32* %r0.global-to-local, align 4
  %v6_11fe8 = add i32 %v5_11fe8, 1
  store i32 %v6_11fe8, i32* %r0.global-to-local, align 4
  %v0_11fec.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_11fec.pre, label %bb169, label %.thread17

bb168:                                            ; preds = %.thread16
  br i1 %v2_11fd8, label %bb169, label %.thread17

bb169:                                            ; preds = %bb167, %bb168
  %v3_11fec116 = phi i32 [ %v6_11fe8, %bb167 ], [ %v3_11fe8, %bb168 ]
  %v1_11fec = load i32, i32* @r3, align 4
  %v2_11fec = trunc i32 %v1_11fec to i8
  %v4_11fec = inttoptr i32 %v3_11fec116 to i8*
  store i8 %v2_11fec, i8* %v4_11fec, align 1
  %v5_11fec = load i32, i32* %r0.global-to-local, align 4
  %v6_11fec = add i32 %v5_11fec, 1
  store i32 %v6_11fec, i32* %r0.global-to-local, align 4
  %v0_11ff0.pr = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_11ff0.pr, label %bb170, label %.thread17

bb170:                                            ; preds = %bb169
  %v1_11ff0 = load i32, i32* @ip, align 4
  %v2_11ff0 = trunc i32 %v1_11ff0 to i8
  %v4_11ff0 = inttoptr i32 %v6_11fec to i8*
  store i8 %v2_11ff0, i8* %v4_11ff0, align 1
  br label %.thread17

.thread17:                                        ; preds = %bb167, %bb168, %bb169, %bb170
  store i32 %v3_11cfc, i32* %r0.global-to-local, align 4
  store i32 %v8_11cfc, i32* @r4, align 4
  store i32 %v11_11cfc, i32* @lr, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  ret i32 %v3_11cfc

; uselistorder directives
  uselistorder i32 %v4_11fcc, { 1, 0 }
  uselistorder i32 %v4_11fc4, { 1, 0 }
  uselistorder i32 %v6_11fc0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v3_11fbc, { 1, 0 }
  uselistorder i32 %v0_11fb4, { 0, 2, 1 }
  uselistorder i32 %v4_11fb0, { 0, 2, 1 }
  uselistorder i32 %v2_11fa0, { 1, 0, 2 }
  uselistorder i32 %v1_11fb050, { 1, 0 }
  uselistorder i32 %v24_11f84, { 0, 2, 1 }
  uselistorder i32 %v17_11f3c, { 1, 0, 2 }
  uselistorder i32 %v14_11f3c, { 1, 0, 2 }
  uselistorder i32 %v11_11f3c, { 1, 0, 2 }
  uselistorder i32 %v8_11f3c, { 1, 0, 2 }
  uselistorder i32 %v5_11f3c, { 1, 0, 2 }
  uselistorder i32 %v2_11f3c, { 1, 0, 2 }
  uselistorder i32 %v1_11f48, { 1, 0, 2 }
  uselistorder i32 %v0_11f3c, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %v0_11f40, { 1, 0 }
  uselistorder i32 %v0_11f84, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v24_11f24, { 0, 2, 1 }
  uselistorder i32 %v17_11edc, { 1, 0, 2 }
  uselistorder i32 %v14_11edc, { 1, 0, 2 }
  uselistorder i32 %v11_11edc, { 1, 0, 2 }
  uselistorder i32 %v8_11edc, { 1, 0, 2 }
  uselistorder i32 %v5_11edc, { 1, 0, 2 }
  uselistorder i32 %v2_11edc, { 1, 0, 2 }
  uselistorder i32 %v1_11ee8, { 1, 0, 2 }
  uselistorder i32 %v0_11edc, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %v0_11ee0, { 1, 0 }
  uselistorder i32 %v0_11f24, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v24_11ec4, { 0, 2, 1 }
  uselistorder i32 %v17_11e7c, { 1, 0, 2 }
  uselistorder i32 %v14_11e7c, { 1, 0, 2 }
  uselistorder i32 %v11_11e7c, { 1, 0, 2 }
  uselistorder i32 %v8_11e7c, { 1, 0, 2 }
  uselistorder i32 %v5_11e7c, { 1, 0, 2 }
  uselistorder i32 %v2_11e7c, { 1, 0, 2 }
  uselistorder i32 %v1_11e88, { 1, 0, 2 }
  uselistorder i32 %v0_11e7c, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %v0_11e80, { 1, 0 }
  uselistorder i32 %v0_11ec4, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11e64, { 0, 2, 1, 5, 3, 4 }
  uselistorder i32 %v1_11e5c, { 2, 0, 1, 3, 5, 4 }
  uselistorder i32 %v0_11e5c, { 1, 0 }
  uselistorder i32 %v0_11ec438, { 2, 3, 0, 1 }
  uselistorder i32 %v0_11e50, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v4_11e4c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11e3431, { 1, 0 }
  uselistorder i32 %v4_11e20, { 1, 0 }
  uselistorder i32 %v4_11e18, { 1, 0 }
  uselistorder i32 %v6_11e14, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v3_11e00, { 1, 0 }
  uselistorder i32 %v1_11df8, { 1, 2, 0 }
  uselistorder i32 %v3_11dbc, { 1, 0, 2 }
  uselistorder i1 %v4_11db8, { 1, 0, 2 }
  uselistorder i32 %v3_11db8, { 1, 0 }
  uselistorder i32 %v2_11dc4, { 0, 1, 3, 2 }
  uselistorder i32 %v1_11db497, { 2, 1, 0 }
  uselistorder i32 %v13_11db0, { 1, 0, 2 }
  uselistorder i32 %v1_11dac, { 2, 1, 0 }
  uselistorder i1 %v4_11da4, { 0, 2, 1, 3 }
  uselistorder i32 %v3_11da4, { 1, 0 }
  uselistorder i32 %v0_11da4, { 0, 2, 1 }
  uselistorder i32 %v1_11db0, { 1, 0, 6, 5, 4, 3, 2 }
  uselistorder i32 %v24_11d90, { 0, 2, 1 }
  uselistorder i32 %v0_11d8c, { 1, 0 }
  uselistorder i32 %v0_11d90, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_11d80, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v0_11d80, { 1, 0 }
  uselistorder i32 %v0_11d9064, { 1, 0 }
  uselistorder i32 %v1_11d6c92, { 2, 1, 0 }
  uselistorder i32 %v13_11d68, { 1, 0, 2 }
  uselistorder i32 %v1_11d64, { 2, 1, 0 }
  uselistorder i1 %v4_11d5c, { 0, 2, 1, 3 }
  uselistorder i32 %v3_11d5c, { 1, 0 }
  uselistorder i32 %v0_11d80.pre, { 1, 4, 0, 3, 2 }
  uselistorder i32 %v1_11d4c, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v1_11d38, { 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 %v1_11d68, { 6, 3, 0, 13, 14, 2, 5, 4, 11, 10, 9, 8, 7, 12, 1 }
  uselistorder i32 %v6_11d2c, { 1, 0, 2 }
  uselistorder i32 %v1_11d24, { 0, 2, 1 }
  uselistorder i32 %v1_11d10, { 3, 2, 1, 0 }
  uselistorder i32 %v1_11d0c, { 1, 2, 0 }
  uselistorder i32 %v0_11d0c, { 0, 2, 1, 3 }
  uselistorder i32 %v11_11cfc, { 1, 0 }
  uselistorder i32 %v8_11cfc, { 2, 1, 0 }
  uselistorder i32 %v3_11cfc, { 2, 3, 7, 0, 1, 6, 4, 5, 8 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12 }
  uselistorder i32* %r4.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 23, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12, 13, 14, 24, 25, 21, 16, 15, 17, 18, 20, 19, 22, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 3, 37, 4, 38, 5, 39, 7, 6, 8, 9, 41, 11, 10, 12, 15, 14, 16, 13, 40, 17, 42, 43, 30, 18, 28, 2, 19, 31, 20, 29, 21, 32, 22, 34, 23, 33, 24, 25, 35, 26, 27, 36, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 38, 6, 39, 7, 8, 9, 40, 10, 41, 11, 42, 12, 13, 14, 15, 43, 35, 36, 37, 44, 45, 33, 16, 17, 29, 18, 30, 3, 28, 19, 20, 21, 22, 31, 23, 24, 25, 26, 27, 32, 34, 0, 1, 2 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 1, 0, 2, 4, 3, 6, 7, 5, 8, 10, 9, 11 }
  uselistorder i1* %cpsr_n.global-to-local, { 7, 8, 9, 10, 1, 11, 4, 3, 2, 12, 13, 14, 5, 6, 30, 31, 32, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i1* %cpsr_c.global-to-local, { 6, 5, 7, 8, 11, 9, 10, 12, 1, 13, 4, 3, 2, 14, 15, 16, 17, 28, 29, 30, 31, 34, 32, 33, 35, 18, 19, 20, 0, 21, 22, 23, 25, 24, 26, 27 }
  uselistorder i8 0, { 3, 11, 12, 7, 13, 14, 0, 6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 24, 25, 26, 9, 27, 28, 32, 29, 30, 31, 8, 33, 34, 35, 36, 37, 2, 4, 5, 38, 39, 40, 41, 42, 43, 44, 45, 46, 10, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder label %.thread17, { 3, 2, 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %.thread16, { 1, 0 }
  uselistorder label %bb165, { 1, 0 }
  uselistorder label %dec_label_pc_11fd8, { 2, 0, 1 }
  uselistorder label %.thread15, { 5, 4, 3, 1, 2, 0 }
  uselistorder label %bb161, { 1, 0 }
  uselistorder label %thread-pre-split12._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11fa0, { 1, 0 }
  uselistorder label %bb158, { 1, 0 }
  uselistorder label %bb156, { 1, 0 }
  uselistorder label %dec_label_pc_11ed8, { 1, 0 }
  uselistorder label %bb154, { 1, 0 }
  uselistorder label %dec_label_pc_11e78, { 1, 0 }
  uselistorder label %dec_label_pc_11e34, { 1, 0 }
  uselistorder label %.thread10, { 6, 5, 4, 1, 2, 3, 0 }
  uselistorder label %bb150, { 2, 0, 1 }
  uselistorder label %.thread4, { 2, 0, 1 }
  uselistorder label %.thread108, { 2, 1, 0 }
  uselistorder label %bb146, { 1, 0 }
  uselistorder label %.thread98, { 2, 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %dec_label_pc_11d9c, { 1, 0 }
  uselistorder label %dec_label_pc_11d88, { 1, 0 }
  uselistorder label %dec_label_pc_11d80, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %.thread93, { 2, 1, 0 }
  uselistorder label %bb135, { 1, 0 }
  uselistorder label %.thread2, { 4, 3, 1, 0, 2 }
  uselistorder label %bb132, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
}

define i32 @function_12008(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12008:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp21 = ptrtoint i8* %arg1 to i32
  %v3_12008 = load i32, i32* @r4, align 4
  %v6_12008 = load i32, i32* @r5, align 4
  %v9_12008 = load i32, i32* @r6, align 4
  %v12_12008 = load i32, i32* @r7, align 4
  %v15_12008 = load i32, i32* @lr, align 4
  %v5_1200c = icmp ugt i8* %tmp, %arg1
  %v11_1200c = icmp eq i8* %tmp, %arg1
  store i1 %v11_1200c, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp21, i32* @r5, align 4
  store i32 %arg2, i32* @lr, align 4
  store i32 %arg3, i32* @ip, align 4
  store i32 %tmp21, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v11_1200c, label %dec_label_pc_1204c, label %dec_label_pc_1202c

dec_label_pc_1202c:                               ; preds = %dec_label_pc_12008
  %v3_1202c = add i32 %arg3, %arg2
  store i32 %v3_1202c, i32* @r3, align 4
  %v4_12030 = icmp ult i32 %tmp21, %v3_1202c
  %v10_12030 = icmp eq i32 %tmp21, %v3_1202c
  store i1 %v10_12030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_12030, label %dec_label_pc_12038, label %dec_label_pc_12044

dec_label_pc_12038:                               ; preds = %dec_label_pc_1202c
  %v3_12038 = add i32 %tmp21, %arg3
  store i32 %v3_12038, i32* @r7, align 4
  %v4_1203c = icmp ugt i32 %v3_12038, %arg2
  %v10_1203c = icmp eq i32 %v3_12038, %arg2
  store i1 %v10_1203c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_1203c, label %dec_label_pc_1205c, label %dec_label_pc_12044

dec_label_pc_12044:                               ; preds = %dec_label_pc_12038, %dec_label_pc_1202c
  %tmp29 = bitcast i8* %arg1 to i16*
  %v6_12044 = call i32 @function_11cfc(i16* %tmp29, i32 %arg2, i32 %arg3)
  store i32 %v6_12044, i32* @r5, align 4
  br label %dec_label_pc_1204c

dec_label_pc_1204c:                               ; preds = %dec_label_pc_120d8, %dec_label_pc_120c8, %dec_label_pc_1211c, %dec_label_pc_1207c, %dec_label_pc_120a8, %dec_label_pc_120a0, %dec_label_pc_12074, %dec_label_pc_12008, %dec_label_pc_12044
  %v0_1204c = load i32, i32* @r5, align 4
  store i32 %v3_12008, i32* @r4, align 4
  store i32 %v6_12008, i32* @r5, align 4
  store i32 %v9_12008, i32* @r6, align 4
  store i32 %v12_12008, i32* @r7, align 4
  store i32 %v15_12008, i32* @lr, align 4
  ret i32 %v0_1204c

dec_label_pc_1205c:                               ; preds = %dec_label_pc_12038
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  %v2_12090 = urem i32 %arg2, 4
  br i1 %v5_1200c, label %dec_label_pc_12064, label %dec_label_pc_12090

dec_label_pc_12064:                               ; preds = %dec_label_pc_1205c
  %v2_12068 = urem i32 %tmp21, 4
  %v9_1206c = icmp eq i32 %v2_12090, %v2_12068
  store i1 %v9_1206c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1206c, label %dec_label_pc_12114, label %dec_label_pc_12074

dec_label_pc_12074.loopexit:                      ; preds = %dec_label_pc_1213c
  store i1 %v7_12144, i1* %cpsr_z.global-to-local, align 1
  %v0_12074.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_12074

dec_label_pc_12074:                               ; preds = %dec_label_pc_12074.loopexit, %dec_label_pc_12134, %dec_label_pc_12064
  %v2_1208412 = phi i32 [ %v4_12148, %dec_label_pc_12074.loopexit ], [ %v1_121488, %dec_label_pc_12134 ], [ %tmp21, %dec_label_pc_12064 ]
  %v0_12074 = phi i32 [ %v0_12074.pre, %dec_label_pc_12074.loopexit ], [ %v0_12134, %dec_label_pc_12134 ], [ %arg3, %dec_label_pc_12064 ]
  %v2_12074 = icmp eq i32 %v0_12074, 0
  store i1 %v2_12074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12074, label %dec_label_pc_1204c, label %dec_label_pc_1207c

dec_label_pc_1207c:                               ; preds = %dec_label_pc_12074, %dec_label_pc_1207c.dec_label_pc_1207c_crit_edge
  %v2_12084 = phi i32 [ %v5_12084, %dec_label_pc_1207c.dec_label_pc_1207c_crit_edge ], [ %v2_1208412, %dec_label_pc_12074 ]
  %v0_12080 = phi i32 [ %v0_12080.pre, %dec_label_pc_1207c.dec_label_pc_1207c_crit_edge ], [ %v0_12074, %dec_label_pc_12074 ]
  %v0_1207c = load i32, i32* @r6, align 4
  %v1_1207c = inttoptr i32 %v0_1207c to i8*
  %v2_1207c = load i8, i8* %v1_1207c, align 1
  %v5_1207c = add i32 %v0_1207c, 1
  store i32 %v5_1207c, i32* @r6, align 4
  %v1_12080 = add i32 %v0_12080, -1
  store i32 %v1_12080, i32* @ip, align 4
  %v7_12080 = icmp eq i32 %v0_12080, 1
  store i1 %v7_12080, i1* %cpsr_z.global-to-local, align 1
  %v3_12084 = inttoptr i32 %v2_12084 to i8*
  store i8 %v2_1207c, i8* %v3_12084, align 1
  %v4_12084 = load i32, i32* @r4, align 4
  %v5_12084 = add i32 %v4_12084, 1
  store i32 %v5_12084, i32* @r4, align 4
  %v0_12088 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12088, label %dec_label_pc_1204c, label %dec_label_pc_1207c.dec_label_pc_1207c_crit_edge

dec_label_pc_1207c.dec_label_pc_1207c_crit_edge:  ; preds = %dec_label_pc_1207c
  %v0_12080.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_1207c

dec_label_pc_12090:                               ; preds = %dec_label_pc_1205c
  store i32 %v2_12090, i32* %r2.global-to-local, align 4
  %v2_12094 = urem i32 %tmp21, 4
  %v9_12098 = icmp eq i32 %v2_12090, %v2_12094
  store i1 %v9_12098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12098, label %dec_label_pc_120c0, label %dec_label_pc_120a0

dec_label_pc_120a0.loopexit:                      ; preds = %dec_label_pc_120fc.dec_label_pc_120fc_crit_edge, %dec_label_pc_120fc.preheader
  %v7_12104.lcssa = phi i1 [ %v7_1210440, %dec_label_pc_120fc.preheader ], [ %v7_12104, %dec_label_pc_120fc.dec_label_pc_120fc_crit_edge ]
  store i1 %v7_12104.lcssa, i1* %cpsr_z.global-to-local, align 1
  %v0_120a0.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_120a0

dec_label_pc_120a0:                               ; preds = %dec_label_pc_120a0.loopexit, %dec_label_pc_120f4, %dec_label_pc_12090
  %v0_120a0 = phi i32 [ %v0_120a0.pre, %dec_label_pc_120a0.loopexit ], [ %v0_120f4, %dec_label_pc_120f4 ], [ %arg3, %dec_label_pc_12090 ]
  %v2_120a0 = icmp eq i32 %v0_120a0, 0
  store i1 %v2_120a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_120a0, label %dec_label_pc_1204c, label %dec_label_pc_120a8

dec_label_pc_120a8:                               ; preds = %dec_label_pc_120a0, %dec_label_pc_120a8.dec_label_pc_120a8_crit_edge
  %v0_120a8 = phi i32 [ %v0_120a8.pre, %dec_label_pc_120a8.dec_label_pc_120a8_crit_edge ], [ %v0_120a0, %dec_label_pc_120a0 ]
  %v1_120a8 = add i32 %v0_120a8, -1
  store i32 %v1_120a8, i32* @ip, align 4
  %v1_120ac = load i32, i32* @lr, align 4
  %v2_120ac = add i32 %v1_120ac, %v1_120a8
  %v3_120ac = inttoptr i32 %v2_120ac to i8*
  %v4_120ac = load i8, i8* %v3_120ac, align 1
  %v2_120b0 = icmp eq i32 %v1_120a8, 0
  store i1 %v2_120b0, i1* %cpsr_z.global-to-local, align 1
  %v3_120b4 = load i32, i32* @r5, align 4
  %v4_120b4 = add i32 %v3_120b4, %v1_120a8
  %v5_120b4 = inttoptr i32 %v4_120b4 to i8*
  store i8 %v4_120ac, i8* %v5_120b4, align 1
  %v0_120b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_120b8, label %dec_label_pc_1204c, label %dec_label_pc_120a8.dec_label_pc_120a8_crit_edge

dec_label_pc_120a8.dec_label_pc_120a8_crit_edge:  ; preds = %dec_label_pc_120a8
  %v0_120a8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_120a8

dec_label_pc_120c0:                               ; preds = %dec_label_pc_12090
  %v1_120c0 = urem i32 %v3_12038, 4
  %v2_120c0 = icmp eq i32 %v1_120c0, 0
  store i1 %v2_120c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_120c0, label %dec_label_pc_120f4, label %dec_label_pc_120c8

dec_label_pc_120c8:                               ; preds = %dec_label_pc_120c0
  %v1_120c8 = add i32 %arg3, -1
  store i32 %v1_120c8, i32* @ip, align 4
  %v2_120c8 = icmp eq i32 %arg3, 0
  %v7_120c8 = icmp eq i32 %arg3, 1
  store i1 %v7_120c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_120c8, label %dec_label_pc_1204c, label %dec_label_pc_120e0.preheader

dec_label_pc_120e0.preheader:                     ; preds = %dec_label_pc_120c8
  %v4_120cc = add i32 %v1_120c8, %tmp21
  store i32 %v4_120cc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_120e0

dec_label_pc_120d8:                               ; preds = %dec_label_pc_120e0
  %v1_120d8 = add i32 %v0_120f4.pre, -1
  store i32 %v1_120d8, i32* @ip, align 4
  %v2_120d8 = icmp eq i32 %v0_120f4.pre, 0
  %v7_120d8 = icmp eq i32 %v0_120f4.pre, 1
  store i1 %v7_120d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_120d8, label %dec_label_pc_1204c, label %dec_label_pc_120d8.dec_label_pc_120e0_crit_edge

dec_label_pc_120d8.dec_label_pc_120e0_crit_edge:  ; preds = %dec_label_pc_120d8
  %v1_120e0.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_120e0

dec_label_pc_120e0:                               ; preds = %dec_label_pc_120d8.dec_label_pc_120e0_crit_edge, %dec_label_pc_120e0.preheader
  %v0_120e4 = phi i32 [ %v4_120cc, %dec_label_pc_120e0.preheader ], [ %v1_120ec, %dec_label_pc_120d8.dec_label_pc_120e0_crit_edge ]
  %v1_120e0 = phi i32 [ %arg2, %dec_label_pc_120e0.preheader ], [ %v1_120e0.pre, %dec_label_pc_120d8.dec_label_pc_120e0_crit_edge ]
  %v0_120e0 = phi i32 [ %v1_120c8, %dec_label_pc_120e0.preheader ], [ %v1_120d8, %dec_label_pc_120d8.dec_label_pc_120e0_crit_edge ]
  %v2_120e0 = add i32 %v0_120e0, %v1_120e0
  %v3_120e0 = inttoptr i32 %v2_120e0 to i8*
  %v4_120e0 = load i8, i8* %v3_120e0, align 1
  %v1_120e4 = urem i32 %v0_120e4, 4
  %v2_120e4 = icmp eq i32 %v1_120e4, 0
  store i1 %v2_120e4, i1* %cpsr_z.global-to-local, align 1
  %v3_120e8 = inttoptr i32 %v0_120e4 to i8*
  store i8 %v4_120e0, i8* %v3_120e8, align 1
  %v0_120ec = load i32, i32* %r2.global-to-local, align 4
  %v1_120ec = add i32 %v0_120ec, -1
  store i32 %v1_120ec, i32* %r2.global-to-local, align 4
  %v0_120f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_120f4.pre = load i32, i32* @ip, align 4
  br i1 %v0_120f0, label %dec_label_pc_120f4, label %dec_label_pc_120d8

dec_label_pc_120f4:                               ; preds = %dec_label_pc_120e0, %dec_label_pc_120c0
  %v0_120f4 = phi i32 [ %arg3, %dec_label_pc_120c0 ], [ %v0_120f4.pre, %dec_label_pc_120e0 ]
  %v7_120f4 = icmp eq i32 %v0_120f4, 3
  store i1 %v7_120f4, i1* %cpsr_z.global-to-local, align 1
  %tmp53 = icmp ult i32 %v0_120f4, 4
  br i1 %tmp53, label %dec_label_pc_120a0, label %dec_label_pc_120fc.preheader

dec_label_pc_120fc.preheader:                     ; preds = %dec_label_pc_120f4
  %v1_120fc34 = add i32 %v0_120f4, -4
  store i32 %v1_120fc34, i32* @ip, align 4
  %v1_1210035 = load i32, i32* @lr, align 4
  %v2_1210036 = add i32 %v1_1210035, %v1_120fc34
  %v3_1210037 = inttoptr i32 %v2_1210036 to i32*
  %v4_1210038 = load i32, i32* %v3_1210037, align 4
  %v2_1210439 = icmp ugt i32 %v1_120fc34, 2
  %v7_1210440 = icmp eq i32 %v1_120fc34, 3
  %v2_1210841 = load i32, i32* @r5, align 4
  %v3_1210842 = add i32 %v2_1210841, %v1_120fc34
  %v4_1210843 = inttoptr i32 %v3_1210842 to i32*
  store i32 %v4_1210038, i32* %v4_1210843, align 4
  %v2_1210c44 = xor i1 %v7_1210440, true
  %v3_1210c45 = and i1 %v2_1210439, %v2_1210c44
  br i1 %v3_1210c45, label %dec_label_pc_120fc.dec_label_pc_120fc_crit_edge, label %dec_label_pc_120a0.loopexit

dec_label_pc_120fc.dec_label_pc_120fc_crit_edge:  ; preds = %dec_label_pc_120fc.preheader, %dec_label_pc_120fc.dec_label_pc_120fc_crit_edge
  %v0_120fc.pre = load i32, i32* @ip, align 4
  %v1_120fc = add i32 %v0_120fc.pre, -4
  store i32 %v1_120fc, i32* @ip, align 4
  %v1_12100 = load i32, i32* @lr, align 4
  %v2_12100 = add i32 %v1_12100, %v1_120fc
  %v3_12100 = inttoptr i32 %v2_12100 to i32*
  %v4_12100 = load i32, i32* %v3_12100, align 4
  %v2_12104 = icmp ugt i32 %v1_120fc, 2
  %v7_12104 = icmp eq i32 %v1_120fc, 3
  %v2_12108 = load i32, i32* @r5, align 4
  %v3_12108 = add i32 %v2_12108, %v1_120fc
  %v4_12108 = inttoptr i32 %v3_12108 to i32*
  store i32 %v4_12100, i32* %v4_12108, align 4
  %v2_1210c = xor i1 %v7_12104, true
  %v3_1210c = and i1 %v2_12104, %v2_1210c
  br i1 %v3_1210c, label %dec_label_pc_120fc.dec_label_pc_120fc_crit_edge, label %dec_label_pc_120a0.loopexit

dec_label_pc_12114:                               ; preds = %dec_label_pc_12064
  %v2_12114 = icmp eq i32 %v2_12090, 0
  store i1 %v2_12114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12114, label %dec_label_pc_12134, label %dec_label_pc_1211c

dec_label_pc_1211c:                               ; preds = %dec_label_pc_12114, %dec_label_pc_12124
  %v2_12128 = phi i32 [ %v5_12128, %dec_label_pc_12124 ], [ %tmp21, %dec_label_pc_12114 ]
  %v0_1211c = phi i32 [ %v0_12134.pre, %dec_label_pc_12124 ], [ %arg3, %dec_label_pc_12114 ]
  %v1_1211c = add i32 %v0_1211c, -1
  store i32 %v1_1211c, i32* @ip, align 4
  %v2_1211c = icmp eq i32 %v0_1211c, 0
  %v7_1211c = icmp eq i32 %v0_1211c, 1
  store i1 %v7_1211c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1211c, label %dec_label_pc_1204c, label %dec_label_pc_12124

dec_label_pc_12124:                               ; preds = %dec_label_pc_1211c
  %v0_12124 = load i32, i32* @r6, align 4
  %v1_12124 = inttoptr i32 %v0_12124 to i8*
  %v2_12124 = load i8, i8* %v1_12124, align 1
  %v5_12124 = add i32 %v0_12124, 1
  store i32 %v5_12124, i32* @r6, align 4
  %v3_12128 = inttoptr i32 %v2_12128 to i8*
  store i8 %v2_12124, i8* %v3_12128, align 1
  %v4_12128 = load i32, i32* @r4, align 4
  %v5_12128 = add i32 %v4_12128, 1
  store i32 %v5_12128, i32* @r4, align 4
  %v1_1212c = urem i32 %v5_12128, 4
  %v2_1212c = icmp eq i32 %v1_1212c, 0
  store i1 %v2_1212c, i1* %cpsr_z.global-to-local, align 1
  %v0_12134.pre = load i32, i32* @ip, align 4
  br i1 %v2_1212c, label %dec_label_pc_12134, label %dec_label_pc_1211c

dec_label_pc_12134:                               ; preds = %dec_label_pc_12124, %dec_label_pc_12114
  %v1_121488 = phi i32 [ %tmp21, %dec_label_pc_12114 ], [ %v5_12128, %dec_label_pc_12124 ]
  %v0_12134 = phi i32 [ %arg3, %dec_label_pc_12114 ], [ %v0_12134.pre, %dec_label_pc_12124 ]
  %v7_12134 = icmp eq i32 %v0_12134, 3
  store i1 %v7_12134, i1* %cpsr_z.global-to-local, align 1
  %tmp54 = icmp ult i32 %v0_12134, 4
  br i1 %tmp54, label %dec_label_pc_12074, label %dec_label_pc_1213c

dec_label_pc_1213c:                               ; preds = %dec_label_pc_12134, %dec_label_pc_1213c.dec_label_pc_1213c_crit_edge
  %v1_12148 = phi i32 [ %v4_12148, %dec_label_pc_1213c.dec_label_pc_1213c_crit_edge ], [ %v1_121488, %dec_label_pc_12134 ]
  %v0_1213c = phi i32 [ %v0_1213c.pre, %dec_label_pc_1213c.dec_label_pc_1213c_crit_edge ], [ %v0_12134, %dec_label_pc_12134 ]
  %v1_1213c = add i32 %v0_1213c, -4
  store i32 %v1_1213c, i32* @ip, align 4
  %v0_12140 = load i32, i32* @r6, align 4
  %v1_12140 = inttoptr i32 %v0_12140 to i32*
  %v2_12140 = load i32, i32* %v1_12140, align 4
  %v4_12140 = add i32 %v0_12140, 4
  store i32 %v4_12140, i32* @r6, align 4
  %v2_12144 = icmp ugt i32 %v1_1213c, 2
  %v7_12144 = icmp eq i32 %v1_1213c, 3
  %v2_12148 = inttoptr i32 %v1_12148 to i32*
  store i32 %v2_12140, i32* %v2_12148, align 4
  %v3_12148 = load i32, i32* @r4, align 4
  %v4_12148 = add i32 %v3_12148, 4
  store i32 %v4_12148, i32* @r4, align 4
  %v2_1214c = xor i1 %v7_12144, true
  %v3_1214c = and i1 %v2_12144, %v2_1214c
  br i1 %v3_1214c, label %dec_label_pc_1213c.dec_label_pc_1213c_crit_edge, label %dec_label_pc_12074.loopexit

dec_label_pc_1213c.dec_label_pc_1213c_crit_edge:  ; preds = %dec_label_pc_1213c
  %v0_1213c.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_1213c

; uselistorder directives
  uselistorder i32 %v4_12148, { 2, 0, 1 }
  uselistorder i32 %v0_12134, { 1, 0, 3, 2 }
  uselistorder i32 %v5_12128, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1211c, { 0, 2, 1 }
  uselistorder i32 %v1_120fc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_120f4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_120f4.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_120ec, { 1, 0 }
  uselistorder i32 %v0_120e4, { 1, 0 }
  uselistorder i32 %v1_120c8, { 1, 0, 2 }
  uselistorder i32 %v1_120a8, { 0, 2, 1, 3 }
  uselistorder i32 %v5_12084, { 1, 0 }
  uselistorder i32 %v2_12090, { 3, 1, 0, 2 }
  uselistorder i32 %tmp21, { 5, 2, 4, 0, 6, 1, 3, 8, 7, 9, 10 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 22, 13, 14, 15, 16, 23, 17, 18, 19, 20, 21 }
  uselistorder i32 %arg3, { 3, 0, 4, 6, 8, 7, 5, 9, 10, 1, 2, 11, 12 }
  uselistorder i32 %arg2, { 2, 0, 3, 4, 5, 1, 6, 7, 8 }
  uselistorder i8* %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1213c, { 1, 0 }
  uselistorder label %dec_label_pc_1211c, { 1, 0 }
  uselistorder label %dec_label_pc_120fc.dec_label_pc_120fc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_120a8, { 1, 0 }
  uselistorder label %dec_label_pc_120a0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1207c, { 1, 0 }
  uselistorder label %dec_label_pc_12074, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1204c, { 2, 0, 1, 4, 5, 3, 6, 8, 7 }
}

define i32 @function_12154(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12154:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12154 = icmp eq i32 %arg3, 0
  store i1 %v2_12154, i1* %cpsr_z.global-to-local, align 1
  %v3_12158 = load i32, i32* @r4, align 4
  store i32 %v3_12158, i32* %stack_var_-20, align 4
  br i1 %v2_12154, label %dec_label_pc_12268, label %dec_label_pc_12160

dec_label_pc_12160:                               ; preds = %dec_label_pc_12154
  %v1_12160 = urem i32 %arg2, 256
  store i32 %v1_12160, i32* @ip, align 4
  %v3_12164 = add i32 %tmp, %arg3
  store i32 %v3_12164, i32* %r2.global-to-local, align 4
  %v2_12168 = icmp ne i32 %arg3, 1
  store i1 %v2_12168, i1* %cpsr_c.global-to-local, align 1
  %v7_12168 = icmp eq i32 %arg3, 2
  store i1 %v7_12168, i1* %cpsr_z.global-to-local, align 1
  %v1_1216c = trunc i32 %arg2 to i8
  %v3_1216c = add i32 %v3_12164, -1
  %v4_1216c = inttoptr i32 %v3_1216c to i8*
  store i8 %v1_1216c, i8* %v4_1216c, align 1
  %v0_12170 = load i32, i32* @ip, align 4
  %v1_12170 = trunc i32 %v0_12170 to i8
  store i8 %v1_12170, i8* %arg1, align 1
  %v0_12174 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_12174 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v2_12174 = xor i1 %v1_12174, true
  %v3_12174 = or i1 %v0_12174, %v2_12174
  br i1 %v3_12174, label %dec_label_pc_12268, label %dec_label_pc_12178

dec_label_pc_12178:                               ; preds = %dec_label_pc_12160
  %v0_12178 = load i32, i32* %r3.global-to-local, align 4
  %v2_12178 = icmp ugt i32 %v0_12178, 5
  store i1 %v2_12178, i1* %cpsr_c.global-to-local, align 1
  %v7_12178 = icmp eq i32 %v0_12178, 6
  store i1 %v7_12178, i1* %cpsr_z.global-to-local, align 1
  %v0_1217c = load i32, i32* @ip, align 4
  %v1_1217c = trunc i32 %v0_1217c to i8
  %v2_1217c = load i32, i32* %r2.global-to-local, align 4
  %v3_1217c = add i32 %v2_1217c, -2
  %v4_1217c = inttoptr i32 %v3_1217c to i8*
  store i8 %v1_1217c, i8* %v4_1217c, align 1
  %v0_12180 = load i32, i32* @ip, align 4
  %v1_12180 = trunc i32 %v0_12180 to i8
  %v4_12180 = add i32 %tmp, 1
  %v5_12180 = inttoptr i32 %v4_12180 to i8*
  store i8 %v1_12180, i8* %v5_12180, align 1
  %v0_12184 = load i32, i32* @ip, align 4
  %v1_12184 = trunc i32 %v0_12184 to i8
  %v2_12184 = load i32, i32* %r2.global-to-local, align 4
  %v3_12184 = add i32 %v2_12184, -3
  %v4_12184 = inttoptr i32 %v3_12184 to i8*
  store i8 %v1_12184, i8* %v4_12184, align 1
  %v0_12188 = load i32, i32* @ip, align 4
  %v1_12188 = trunc i32 %v0_12188 to i8
  %v4_12188 = add i32 %tmp, 2
  %v5_12188 = inttoptr i32 %v4_12188 to i8*
  store i8 %v1_12188, i8* %v5_12188, align 1
  %v0_1218c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_1218c = load i1, i1* %cpsr_c.global-to-local, align 1
  %v2_1218c = xor i1 %v1_1218c, true
  %v3_1218c = or i1 %v0_1218c, %v2_1218c
  br i1 %v3_1218c, label %dec_label_pc_12268, label %dec_label_pc_12190

dec_label_pc_12190:                               ; preds = %dec_label_pc_12178
  %v0_12190 = load i32, i32* %r3.global-to-local, align 4
  %v2_12190 = icmp ugt i32 %v0_12190, 7
  store i1 %v2_12190, i1* %cpsr_c.global-to-local, align 1
  %v7_12190 = icmp eq i32 %v0_12190, 8
  store i1 %v7_12190, i1* %cpsr_z.global-to-local, align 1
  %v0_12194 = load i32, i32* @ip, align 4
  %v1_12194 = trunc i32 %v0_12194 to i8
  %v2_12194 = load i32, i32* %r2.global-to-local, align 4
  %v3_12194 = add i32 %v2_12194, -4
  %v4_12194 = inttoptr i32 %v3_12194 to i8*
  store i8 %v1_12194, i8* %v4_12194, align 1
  %v0_12198 = load i32, i32* @ip, align 4
  %v1_12198 = trunc i32 %v0_12198 to i8
  %v4_12198 = add i32 %tmp, 3
  %v5_12198 = inttoptr i32 %v4_12198 to i8*
  store i8 %v1_12198, i8* %v5_12198, align 1
  %v0_1219c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_1219c = load i1, i1* %cpsr_c.global-to-local, align 1
  %v2_1219c = xor i1 %v1_1219c, true
  %v3_1219c = or i1 %v0_1219c, %v2_1219c
  br i1 %v3_1219c, label %dec_label_pc_12268, label %dec_label_pc_121a0

dec_label_pc_121a0:                               ; preds = %dec_label_pc_12190
  %v2_121a0 = sub i32 0, %tmp
  %v1_121a4 = urem i32 %v2_121a0, 4
  store i32 %v1_121a4, i32* %r1.global-to-local, align 4
  %v0_121a8 = load i32, i32* @ip, align 4
  %v2_121ac = mul i32 %v0_121a8, 257
  store i32 %v2_121ac, i32* %r2.global-to-local, align 4
  %v1_121b0 = load i32, i32* %r3.global-to-local, align 4
  %v2_121b0 = sub i32 %v1_121b0, %v1_121a4
  %v1_121b4 = and i32 %v2_121b0, -4
  store i32 %v1_121b4, i32* %lr.global-to-local, align 4
  %v3_121b8 = add i32 %v1_121a4, %tmp
  store i32 %v3_121b8, i32* %r6.global-to-local, align 4
  %v3_121bc = mul i32 %v0_121a8, 16842752
  store i32 %v3_121bc, i32* %r3.global-to-local, align 4
  %v2_121c0 = mul i32 %v0_121a8, 16843009
  store i32 %v2_121c0, i32* @ip, align 4
  %v2_121c4 = add i32 %v1_121b4, %v3_121b8
  store i32 %v2_121c4, i32* %r5.global-to-local, align 4
  %v2_121c8 = icmp ugt i32 %v1_121b4, 7
  store i1 %v2_121c8, i1* %cpsr_c.global-to-local, align 1
  %v7_121c8 = icmp eq i32 %v1_121b4, 8
  store i1 %v7_121c8, i1* %cpsr_z.global-to-local, align 1
  %v5_121cc = inttoptr i32 %v3_121b8 to i32*
  store i32 %v2_121c0, i32* %v5_121cc, align 4
  %v0_121d0 = load i32, i32* @ip, align 4
  %v1_121d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_121d0 = add i32 %v1_121d0, -4
  %v3_121d0 = inttoptr i32 %v2_121d0 to i32*
  store i32 %v0_121d0, i32* %v3_121d0, align 4
  %v2_121d4 = xor i1 %v2_121c8, true
  %v3_121d4 = or i1 %v7_121c8, %v2_121d4
  br i1 %v3_121d4, label %dec_label_pc_12268, label %dec_label_pc_121d8

dec_label_pc_121d8:                               ; preds = %dec_label_pc_121a0
  %v0_121d8 = load i32, i32* %lr.global-to-local, align 4
  %v2_121d8 = icmp ugt i32 %v0_121d8, 23
  store i1 %v2_121d8, i1* %cpsr_c.global-to-local, align 1
  %v7_121d8 = icmp eq i32 %v0_121d8, 24
  store i1 %v7_121d8, i1* %cpsr_z.global-to-local, align 1
  %v0_121dc = load i32, i32* @ip, align 4
  %v1_121dc = load i32, i32* %r6.global-to-local, align 4
  %v2_121dc = add i32 %v1_121dc, 4
  %v3_121dc = inttoptr i32 %v2_121dc to i32*
  store i32 %v0_121dc, i32* %v3_121dc, align 4
  %v0_121e0 = load i32, i32* @ip, align 4
  %v1_121e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_121e0 = add i32 %v1_121e0, 8
  %v3_121e0 = inttoptr i32 %v2_121e0 to i32*
  store i32 %v0_121e0, i32* %v3_121e0, align 4
  %v0_121e4 = load i32, i32* @ip, align 4
  %v1_121e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_121e4 = add i32 %v1_121e4, -12
  %v3_121e4 = inttoptr i32 %v2_121e4 to i32*
  store i32 %v0_121e4, i32* %v3_121e4, align 4
  %v0_121e8 = load i32, i32* @ip, align 4
  %v1_121e8 = load i32, i32* %r5.global-to-local, align 4
  %v2_121e8 = add i32 %v1_121e8, -8
  %v3_121e8 = inttoptr i32 %v2_121e8 to i32*
  store i32 %v0_121e8, i32* %v3_121e8, align 4
  %v2_121ec = xor i1 %v2_121d8, true
  %v3_121ec = or i1 %v7_121d8, %v2_121ec
  br i1 %v3_121ec, label %dec_label_pc_12268, label %dec_label_pc_121f0

dec_label_pc_121f0:                               ; preds = %dec_label_pc_121d8
  %v0_121f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_121f0 = and i32 %v0_121f0, 4
  %v1_121f4 = or i32 %v1_121f0, 24
  store i32 %v1_121f4, i32* %r7.global-to-local, align 4
  %v1_121f8 = load i32, i32* %lr.global-to-local, align 4
  %v2_121f8 = sub i32 %v1_121f8, %v1_121f4
  store i32 %v2_121f8, i32* %lr.global-to-local, align 4
  %v0_121fc = load i32, i32* @ip, align 4
  store i32 %v0_121fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_12208 = icmp ugt i32 %v2_121f8, 30
  store i1 %v2_12208, i1* %cpsr_c.global-to-local, align 1
  %v7_12208 = icmp eq i32 %v2_121f8, 31
  store i1 %v7_12208, i1* %cpsr_z.global-to-local, align 1
  %v2_1220c = add i32 %v0_121f0, 12
  %v3_1220c = inttoptr i32 %v2_1220c to i32*
  store i32 %v0_121fc, i32* %v3_1220c, align 4
  %v0_12210 = load i32, i32* @ip, align 4
  %v1_12210 = load i32, i32* %r6.global-to-local, align 4
  %v2_12210 = add i32 %v1_12210, 16
  %v3_12210 = inttoptr i32 %v2_12210 to i32*
  store i32 %v0_12210, i32* %v3_12210, align 4
  %v0_12214 = load i32, i32* @ip, align 4
  %v1_12214 = load i32, i32* %r6.global-to-local, align 4
  %v2_12214 = add i32 %v1_12214, 20
  %v3_12214 = inttoptr i32 %v2_12214 to i32*
  store i32 %v0_12214, i32* %v3_12214, align 4
  %v0_12218 = load i32, i32* @ip, align 4
  %v1_12218 = load i32, i32* %r6.global-to-local, align 4
  %v2_12218 = add i32 %v1_12218, 24
  %v3_12218 = inttoptr i32 %v2_12218 to i32*
  store i32 %v0_12218, i32* %v3_12218, align 4
  %v0_1221c = load i32, i32* %r3.global-to-local, align 4
  %v1_1221c = load i32, i32* %r1.global-to-local, align 4
  %v2_1221c = or i32 %v1_1221c, %v0_1221c
  store i32 %v2_1221c, i32* %r3.global-to-local, align 4
  %v1_12220 = load i32, i32* %r2.global-to-local, align 4
  %v2_12220 = or i32 %v1_12220, %v1_1221c
  store i32 %v2_12220, i32* %r4.global-to-local, align 4
  %v0_12224 = load i32, i32* @ip, align 4
  %v1_12224 = load i32, i32* %r5.global-to-local, align 4
  %v2_12224 = add i32 %v1_12224, -16
  %v3_12224 = inttoptr i32 %v2_12224 to i32*
  store i32 %v0_12224, i32* %v3_12224, align 4
  %v0_12228 = load i32, i32* @ip, align 4
  %v1_12228 = load i32, i32* %r5.global-to-local, align 4
  %v2_12228 = add i32 %v1_12228, -28
  %v3_12228 = inttoptr i32 %v2_12228 to i32*
  store i32 %v0_12228, i32* %v3_12228, align 4
  %v0_1222c = load i32, i32* @ip, align 4
  %v1_1222c = load i32, i32* %r5.global-to-local, align 4
  %v2_1222c = add i32 %v1_1222c, -24
  %v3_1222c = inttoptr i32 %v2_1222c to i32*
  store i32 %v0_1222c, i32* %v3_1222c, align 4
  %v0_12230 = load i32, i32* @ip, align 4
  %v1_12230 = load i32, i32* %r5.global-to-local, align 4
  %v2_12230 = add i32 %v1_12230, -20
  %v3_12230 = inttoptr i32 %v2_12230 to i32*
  store i32 %v0_12230, i32* %v3_12230, align 4
  %v2_12234 = xor i1 %v2_12208, true
  %v3_12234 = or i1 %v7_12208, %v2_12234
  br i1 %v3_12234, label %dec_label_pc_12268, label %dec_label_pc_12238

dec_label_pc_12238:                               ; preds = %dec_label_pc_121f0
  %v0_12238 = load i32, i32* %r6.global-to-local, align 4
  %v1_12238 = load i32, i32* %r7.global-to-local, align 4
  %v2_12238 = add i32 %v1_12238, %v0_12238
  store i32 %v2_12238, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1223c

dec_label_pc_1223c:                               ; preds = %dec_label_pc_1223c, %dec_label_pc_12238
  %v0_12244 = phi i32 [ %v1_12260, %dec_label_pc_1223c ], [ %v2_12238, %dec_label_pc_12238 ]
  %v0_1223c = load i32, i32* %lr.global-to-local, align 4
  %v1_1223c = add i32 %v0_1223c, -32
  store i32 %v1_1223c, i32* %lr.global-to-local, align 4
  %v2_12240 = icmp ugt i32 %v1_1223c, 30
  %v7_12240 = icmp eq i32 %v1_1223c, 31
  %v1_12244 = inttoptr i32 %v0_12244 to i32*
  %v2_12244 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v2_12244, i32* %v1_12244, align 4
  %v3_12244 = add i32 %v0_12244, 4
  %v4_12244 = inttoptr i32 %v3_12244 to i32*
  %v5_12244 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12244, i32* %v4_12244, align 4
  %v0_12248 = load i32, i32* %r3.global-to-local, align 4
  %v1_12248 = load i32, i32* %r2.global-to-local, align 4
  %v2_12248 = add i32 %v1_12248, 8
  %v3_12248 = inttoptr i32 %v2_12248 to i32*
  store i32 %v0_12248, i32* %v3_12248, align 4
  %v0_1224c = load i32, i32* %r4.global-to-local, align 4
  %v1_1224c = load i32, i32* %r2.global-to-local, align 4
  %v2_1224c = add i32 %v1_1224c, 12
  %v3_1224c = inttoptr i32 %v2_1224c to i32*
  store i32 %v0_1224c, i32* %v3_1224c, align 4
  %v0_12250 = load i32, i32* %r3.global-to-local, align 4
  %v1_12250 = load i32, i32* %r2.global-to-local, align 4
  %v2_12250 = add i32 %v1_12250, 16
  %v3_12250 = inttoptr i32 %v2_12250 to i32*
  store i32 %v0_12250, i32* %v3_12250, align 4
  %v0_12254 = load i32, i32* %r4.global-to-local, align 4
  %v1_12254 = load i32, i32* %r2.global-to-local, align 4
  %v2_12254 = add i32 %v1_12254, 20
  %v3_12254 = inttoptr i32 %v2_12254 to i32*
  store i32 %v0_12254, i32* %v3_12254, align 4
  %v0_12258 = load i32, i32* %r3.global-to-local, align 4
  %v1_12258 = load i32, i32* %r2.global-to-local, align 4
  %v2_12258 = add i32 %v1_12258, 24
  %v3_12258 = inttoptr i32 %v2_12258 to i32*
  store i32 %v0_12258, i32* %v3_12258, align 4
  %v0_1225c = load i32, i32* %r4.global-to-local, align 4
  %v1_1225c = load i32, i32* %r2.global-to-local, align 4
  %v2_1225c = add i32 %v1_1225c, 28
  %v3_1225c = inttoptr i32 %v2_1225c to i32*
  store i32 %v0_1225c, i32* %v3_1225c, align 4
  %v0_12260 = load i32, i32* %r2.global-to-local, align 4
  %v1_12260 = add i32 %v0_12260, 32
  store i32 %v1_12260, i32* %r2.global-to-local, align 4
  %v2_12264 = xor i1 %v7_12240, true
  %v3_12264 = and i1 %v2_12240, %v2_12264
  br i1 %v3_12264, label %dec_label_pc_1223c, label %dec_label_pc_12268.loopexit

dec_label_pc_12268.loopexit:                      ; preds = %dec_label_pc_1223c
  store i1 %v2_12240, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_12240, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12268

dec_label_pc_12268:                               ; preds = %dec_label_pc_12268.loopexit, %dec_label_pc_121f0, %dec_label_pc_121a0, %dec_label_pc_12190, %dec_label_pc_12178, %dec_label_pc_12160, %dec_label_pc_12154, %dec_label_pc_121d8
  %v2_12268 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12268, i32* @r4, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_12260, { 1, 0 }
  uselistorder i1 %v7_12240, { 1, 0 }
  uselistorder i32 %v0_12244, { 1, 0 }
  uselistorder i32 %v0_121d8, { 1, 0 }
  uselistorder i32 %v3_121b8, { 1, 0, 2 }
  uselistorder i32 %v1_121b4, { 2, 1, 0, 3 }
  uselistorder i32 %v1_121a4, { 2, 1, 0 }
  uselistorder i32 %v0_12190, { 1, 0 }
  uselistorder i32 %v0_12178, { 1, 0 }
  uselistorder i32 %tmp, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r6.global-to-local, { 4, 0, 1, 2, 3, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 10, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 -24, { 1, 0 }
  uselistorder i32 -16, { 6, 0, 4, 5, 1, 2, 3 }
  uselistorder i32 30, { 3, 4, 1, 2, 0, 6, 7, 5 }
  uselistorder i32 -3, { 3, 2, 0, 1 }
  uselistorder i32 %arg3, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12268, { 0, 1, 7, 2, 3, 4, 5, 6 }
}

define i32 @function_12270(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12270:
  ret i32 %arg2
}

define i32 @function_12290(i32* %arg1) local_unnamed_addr {
dec_label_pc_12290:
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_12290 = load i32, i32* @r0, align 4
  %v1_12290 = inttoptr i32 %v0_12290 to i32*
  %v2_12290 = load i32, i32* %v1_12290, align 4
  %v2_12294 = icmp eq i32 %v2_12290, 0
  store i1 %v2_12294, i1* @cpsr_z, align 1
  %v3_12298 = load i32, i32* @r4, align 4
  store i32 %v3_12298, i32* %stack_var_-8, align 4
  store i32 %v0_12290, i32* %r4.global-to-local, align 4
  br i1 %v2_12294, label %dec_label_pc_122f4, label %dec_label_pc_122a4

dec_label_pc_122a4:                               ; preds = %dec_label_pc_12290
  %v0_122a4 = call i32 @function_12874()
  store i32 %v0_122a4, i32* @r0, align 4
  %v2_122ac = inttoptr i32 %v0_122a4 to i32*
  store i32 0, i32* %v2_122ac, align 4
  %v0_122b0 = call i32 @function_12874()
  %v1_122b4 = add i32 %v0_122b0, 4
  %v2_122b4 = inttoptr i32 %v1_122b4 to i32*
  %v3_122b4 = load i32, i32* %v2_122b4, align 4
  %v2_122b8 = icmp eq i32 %v3_122b4, 0
  br i1 %v2_122b8, label %dec_label_pc_122f4, label %dec_label_pc_122c0

dec_label_pc_122c0:                               ; preds = %dec_label_pc_122a4
  %v0_122c4 = load i32, i32* %r4.global-to-local, align 4
  %v4_122d0 = call i32 @function_12270(i32 240, i32 %v0_122c4, i32 129, i32 1)
  %v4_122d8 = icmp eq i32 %v4_122d0, -38
  br i1 %v4_122d8, label %dec_label_pc_122dc, label %dec_label_pc_122f4

dec_label_pc_122dc:                               ; preds = %dec_label_pc_122c0
  %v0_122e0 = load i32, i32* %r4.global-to-local, align 4
  %v2_122ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_122ec, i32* %r4.global-to-local, align 4
  %v4_122f0 = call i32 @function_12270(i32 240, i32 %v0_122e0, i32 1, i32 1)
  br label %dec_label_pc_122f4

dec_label_pc_122f4:                               ; preds = %dec_label_pc_122c0, %dec_label_pc_122a4, %dec_label_pc_12290, %dec_label_pc_122dc
  %v1_122f8 = phi i32 [ %v4_122d0, %dec_label_pc_122c0 ], [ %v0_122b0, %dec_label_pc_122a4 ], [ %v0_12290, %dec_label_pc_12290 ], [ %v4_122f0, %dec_label_pc_122dc ]
  %v2_122f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_122f4, i32* %r4.global-to-local, align 4
  ret i32 %v1_122f8

; uselistorder directives
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12270, { 1, 0 }
  uselistorder label %dec_label_pc_122f4, { 3, 0, 1, 2 }
}

define i32 @function_122fc(i32* %arg1) local_unnamed_addr {
dec_label_pc_122fc:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_12300 = load i32, i32* @global_var_1f6f4.257, align 4
  %v2_12304 = icmp eq i32 %v3_12300, 0
  store i1 %v2_12304, i1* @cpsr_z, align 1
  %v9_12308 = load i32, i32* @r6, align 4
  %v0_1230c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1230c, i32* @r4, align 4
  br i1 %v2_12304, label %dec_label_pc_12354, label %dec_label_pc_12320.preheader

dec_label_pc_12320.preheader:                     ; preds = %dec_label_pc_122fc
  %v2_12310 = add i32 %v0_1230c, 4
  store i32 %v2_12310, i32* @r6, align 4
  br label %dec_label_pc_12320

dec_label_pc_1231c:                               ; preds = %dec_label_pc_1233c
  %v2_1231c = inttoptr i32 %v0_12344 to i32*
  %v3_1231c = call i32 @function_12424(i32* %v2_1231c, i32 %v0_12348)
  store i32 %v3_1231c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12320.backedge

dec_label_pc_12320.backedge:                      ; preds = %dec_label_pc_1231c, %dec_label_pc_12320
  %v0_12320.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12320

dec_label_pc_12320:                               ; preds = %dec_label_pc_12320.backedge, %dec_label_pc_12320.preheader
  %v0_12320 = phi i32 [ %v0_12320.pre, %dec_label_pc_12320.backedge ], [ %v0_1230c, %dec_label_pc_12320.preheader ]
  %v1_12320 = inttoptr i32 %v0_12320 to i32*
  %v2_12320 = load i32, i32* %v1_12320, align 4
  store i32 %v2_12320, i32* @r5, align 4
  store i32 %v2_12320, i32* %r0.global-to-local, align 4
  %v4_12330 = call i32 @function_128c8(i32 %v2_12320, i32 1, i32* %v1_12320)
  store i32 %v4_12330, i32* %r0.global-to-local, align 4
  %v2_12334 = icmp eq i32 %v4_12330, 0
  store i1 %v2_12334, i1* @cpsr_z, align 1
  br i1 %v2_12334, label %dec_label_pc_1233c, label %dec_label_pc_12320.backedge

dec_label_pc_1233c:                               ; preds = %dec_label_pc_12320
  store i32 1, i32* @r2, align 4
  %v0_12340 = load i32, i32* @r5, align 4
  %v2_12340 = icmp eq i32 %v0_12340, 0
  %v0_12344 = load i32, i32* @r4, align 4
  store i32 %v0_12344, i32* %r0.global-to-local, align 4
  %v0_12348 = load i32, i32* @r6, align 4
  store i32 1, i32* @r3, align 4
  br i1 %v2_12340, label %dec_label_pc_12354.loopexit, label %dec_label_pc_1231c

dec_label_pc_12354.loopexit:                      ; preds = %dec_label_pc_1233c
  br label %dec_label_pc_12354

dec_label_pc_12354:                               ; preds = %dec_label_pc_12354.loopexit, %dec_label_pc_122fc
  %v1_12358 = phi i32 [ %v0_12344, %dec_label_pc_12354.loopexit ], [ %v0_1230c, %dec_label_pc_122fc ]
  store i32 %v9_12308, i32* @r6, align 4
  ret i32 %v1_12358

; uselistorder directives
  uselistorder i32 %v0_12344, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_12320.backedge, { 1, 0 }
}

define i32 @function_12360(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12360:
  store i32 %arg1, i32* @r3, align 4
  %v0_12360 = load i32, i32* @lr, align 4
  store i32 74636, i32* @lr, align 4
  %v1_12388 = call i32 @function_1239c()
  store i32 %v0_12360, i32* @lr, align 4
  ret i32 %v1_12388
}

define i32 @function_1239c() local_unnamed_addr {
dec_label_pc_1239c:
  %v0_123bc = call i32 @function_13464()
  ret i32 %v0_123bc
}

define i32 @function_123cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_123cc:
  ret i32 %arg2
}

define i32 @function_123f0(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_123f0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_123f0 = load i32, i32* @r4, align 4
  store i32 %v3_123f0, i32* %stack_var_-16, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_123fc

dec_label_pc_123fc:                               ; preds = %dec_label_pc_123fc.dec_label_pc_123fc_crit_edge, %dec_label_pc_123f0
  %v0_12408 = phi i32 [ %v0_12408.pre, %dec_label_pc_123fc.dec_label_pc_123fc_crit_edge ], [ %arg2, %dec_label_pc_123f0 ]
  %v0_123fc = phi i32 [ %v0_123fc.pre, %dec_label_pc_123fc.dec_label_pc_123fc_crit_edge ], [ %tmp, %dec_label_pc_123f0 ]
  %v1_123fc = inttoptr i32 %v0_123fc to i32*
  %v2_123fc = load i32, i32* %v1_123fc, align 4
  store i32 %v2_123fc, i32* %r4.global-to-local, align 4
  %v2_12408 = add i32 %v2_123fc, %v0_12408
  %v4_1240c = call i32 @function_128c8(i32 %v2_123fc, i32 %v2_12408, i32* %v1_123fc)
  %v2_12410 = icmp eq i32 %v4_1240c, 0
  store i1 %v2_12410, i1* @cpsr_z, align 1
  br i1 %v2_12410, label %dec_label_pc_12418, label %dec_label_pc_123fc.dec_label_pc_123fc_crit_edge

dec_label_pc_123fc.dec_label_pc_123fc_crit_edge:  ; preds = %dec_label_pc_123fc
  %v0_123fc.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_12408.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_123fc

dec_label_pc_12418:                               ; preds = %dec_label_pc_123fc
  %v0_12418 = load i32, i32* %r4.global-to-local, align 4
  %v2_1241c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1241c, i32* %r4.global-to-local, align 4
  ret i32 %v0_12418

; uselistorder directives
  uselistorder i32 %v2_123fc, { 1, 0, 2 }
}

define i32 @function_12424(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12424:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %v3_12424 = load i32, i32* @r4, align 4
  %v6_12424 = load i32, i32* @r5, align 4
  %v9_12424 = load i32, i32* @r6, align 4
  %v12_12424 = load i32, i32* @r7, align 4
  %v15_12424 = load i32, i32* @r8, align 4
  %v18_12424 = load i32, i32* @sl, align 4
  %v21_12424 = load i32, i32* @lr, align 4
  %v0_12428 = load i32, i32* @r3, align 4
  %v2_12428 = icmp eq i32 %v0_12428, 0
  %v0_1242c = load i32, i32* @r2, align 4
  store i32 %v0_1242c, i32* %r8.global-to-local, align 4
  %. = select i1 %v2_12428, i32 0, i32 128
  store i32 %., i32* %sl.global-to-local, align 4
  %v0_1243c = load i32, i32* @r0, align 4
  store i32 %v0_1243c, i32* @r6, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 99, i32* %r2.global-to-local, align 4
  %v2_1246427 = icmp eq i32 %arg2, 0
  br label %dec_label_pc_12464

dec_label_pc_1244c:                               ; preds = %dec_label_pc_1246c, %dec_label_pc_12464
  %v0_1244c = load i32, i32* @r6, align 4
  %v1_1244c = inttoptr i32 %v0_1244c to i32*
  %v2_1244c = load i32, i32* %v1_1244c, align 4
  %v1_12450 = load i32, i32* %r8.global-to-local, align 4
  %v9_12450 = icmp eq i32 %v2_1244c, %v1_12450
  store i1 %v9_12450, i1* @cpsr_z, align 1
  br i1 %v9_12450, label %dec_label_pc_12458, label %dec_label_pc_124fc

dec_label_pc_12458:                               ; preds = %dec_label_pc_1244c
  %v0_12458 = call i32 @function_12874()
  store i32 %v0_12458, i32* @r0, align 4
  %v0_1245c.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_12464.pre = load i32, i32* @r5, align 4
  %v1_1245c = add i32 %v0_1245c.pre, -1
  store i32 %v1_1245c, i32* %r2.global-to-local, align 4
  %v2_1245c = icmp eq i32 %v0_1245c.pre, 0
  %v2_12464 = icmp eq i32 %v0_12464.pre, 0
  store i1 %v2_12464, i1* @cpsr_z, align 1
  br i1 %v2_1245c, label %dec_label_pc_1247c, label %dec_label_pc_12464

dec_label_pc_12464:                               ; preds = %dec_label_pc_12424, %dec_label_pc_12458
  %v2_1246430 = phi i1 [ %v2_1246427, %dec_label_pc_12424 ], [ %v2_12464, %dec_label_pc_12458 ]
  %v0_1248429 = phi i32 [ %arg2, %dec_label_pc_12424 ], [ %v0_12464.pre, %dec_label_pc_12458 ]
  %v1_12504828 = phi i32 [ %v0_1243c, %dec_label_pc_12424 ], [ %v0_12458, %dec_label_pc_12458 ]
  br i1 %v2_1246430, label %dec_label_pc_1244c, label %dec_label_pc_1246c

dec_label_pc_1246c:                               ; preds = %dec_label_pc_12464
  %v1_1246c = inttoptr i32 %v0_1248429 to i32*
  %v2_1246c = load i32, i32* %v1_1246c, align 4
  %v2_12470 = icmp eq i32 %v2_1246c, 0
  store i1 %v2_12470, i1* @cpsr_z, align 1
  br i1 %v2_12470, label %dec_label_pc_1244c, label %dec_label_pc_12484

dec_label_pc_1247c:                               ; preds = %dec_label_pc_12458
  br i1 %v2_12464, label %dec_label_pc_124c0, label %dec_label_pc_1247c.dec_label_pc_12484_crit_edge

dec_label_pc_1247c.dec_label_pc_12484_crit_edge:  ; preds = %dec_label_pc_1247c
  %.pre = inttoptr i32 %v0_12464.pre to i32*
  br label %dec_label_pc_12484

dec_label_pc_12484:                               ; preds = %dec_label_pc_1246c, %dec_label_pc_1247c.dec_label_pc_12484_crit_edge
  %v2_1248c.pre-phi = phi i32* [ %.pre, %dec_label_pc_1247c.dec_label_pc_12484_crit_edge ], [ %v1_1246c, %dec_label_pc_1246c ]
  %v3_1248c = call i32 @function_123f0(i32* %v2_1248c.pre-phi, i32 1)
  br label %dec_label_pc_124c0

dec_label_pc_12494:                               ; preds = %dec_label_pc_124c4
  %v0_12494 = load i32, i32* %r7.global-to-local, align 4
  %v5_12498 = call i32 @function_123cc(i32 240, i32 %v0_124c4, i32 %v0_124d0, i32 %v2_124c4, i32 %v0_12494)
  %v4_124a0 = icmp eq i32 %v5_12498, -38
  br i1 %v4_124a0, label %dec_label_pc_124a4, label %dec_label_pc_124c4

dec_label_pc_124a4:                               ; preds = %dec_label_pc_12494
  %v0_124a4 = load i32, i32* %r4.global-to-local, align 4
  %v0_124a8 = load i32, i32* @r6, align 4
  %v0_124ac = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_124ac, i32* %r2.global-to-local, align 4
  %v5_124b8 = call i32 @function_123cc(i32 240, i32 %v0_124a8, i32 %v0_124ac, i32 %v0_124a4, i32 %v0_124ac)
  br label %dec_label_pc_124c4

dec_label_pc_124c0:                               ; preds = %dec_label_pc_1247c, %dec_label_pc_12484
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_124c4

dec_label_pc_124c4:                               ; preds = %dec_label_pc_12494, %dec_label_pc_124a4, %dec_label_pc_124c0
  %v0_124c4 = load i32, i32* @r6, align 4
  %v1_124c4 = inttoptr i32 %v0_124c4 to i32*
  %v2_124c4 = load i32, i32* %v1_124c4, align 4
  store i32 %v2_124c4, i32* %r4.global-to-local, align 4
  %v1_124c8 = load i32, i32* %r8.global-to-local, align 4
  %v9_124c8 = icmp eq i32 %v2_124c4, %v1_124c8
  %v0_124d0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_124d0, i32* %r2.global-to-local, align 4
  br i1 %v9_124c8, label %dec_label_pc_12494, label %dec_label_pc_124e0

dec_label_pc_124e0:                               ; preds = %dec_label_pc_124c4
  %v0_124e0 = load i32, i32* @r5, align 4
  %v2_124e0 = icmp eq i32 %v0_124e0, 0
  store i1 %v2_124e0, i1* @cpsr_z, align 1
  br i1 %v2_124e0, label %dec_label_pc_124fc, label %dec_label_pc_124e8

dec_label_pc_124e8:                               ; preds = %dec_label_pc_124e0
  store i32 %v3_12424, i32* @r4, align 4
  store i32 %v12_12424, i32* @r7, align 4
  store i32 %v15_12424, i32* %r8.global-to-local, align 4
  store i32 %v18_12424, i32* %sl.global-to-local, align 4
  store i32 %v21_12424, i32* @lr, align 4
  %v2_124f8 = inttoptr i32 %v0_124e0 to i32*
  %v3_124f8 = call i32 @function_123f0(i32* %v2_124f8, i32 -1)
  br label %dec_label_pc_124fc

dec_label_pc_124fc:                               ; preds = %dec_label_pc_1244c, %dec_label_pc_124e0, %dec_label_pc_124e8
  %v1_12504 = phi i32 [ 240, %dec_label_pc_124e0 ], [ %v3_124f8, %dec_label_pc_124e8 ], [ %v1_12504828, %dec_label_pc_1244c ]
  store i32 %v3_12424, i32* @r4, align 4
  store i32 %v6_12424, i32* @r5, align 4
  store i32 %v9_12424, i32* @r6, align 4
  store i32 %v12_12424, i32* @r7, align 4
  store i32 %v15_12424, i32* @r8, align 4
  store i32 %v18_12424, i32* @sl, align 4
  store i32 %v21_12424, i32* @lr, align 4
  ret i32 %v1_12504

; uselistorder directives
  uselistorder i32 %v0_124d0, { 1, 0 }
  uselistorder i32 %v2_124c4, { 1, 2, 0 }
  uselistorder i32 %v0_124c4, { 1, 0 }
  uselistorder i32 %v0_12464.pre, { 0, 2, 1 }
  uselistorder i32 %v21_12424, { 1, 0 }
  uselistorder i32 %v18_12424, { 1, 0 }
  uselistorder i32 %v15_12424, { 1, 0 }
  uselistorder i32 %v12_12424, { 1, 0 }
  uselistorder i32 %v3_12424, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 4, 3, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_123cc, { 1, 0 }
  uselistorder label %dec_label_pc_124fc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_124c4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_124c0, { 1, 0 }
  uselistorder label %dec_label_pc_12484, { 1, 0 }
  uselistorder label %dec_label_pc_12464, { 1, 0 }
}

define i32 @function_12508() local_unnamed_addr {
dec_label_pc_12508:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_12508 = load i32, i32* @r0, align 4
  %v0_1250c = load i32, i32* @r7, align 4
  store i32 %v0_1250c, i32* %stack_var_-4, align 4
  %v0_12510 = load i32, i32* @r2, align 4
  store i32 %v0_12510, i32* @ip, align 4
  %tmp = icmp ugt i32 %v0_12508, 2
  br i1 %tmp, label %.thread7, label %dec_label_pc_1251c

.thread7:                                         ; preds = %dec_label_pc_12508
  store i32 22, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12558

dec_label_pc_1251c:                               ; preds = %dec_label_pc_12508
  %v1_12528 = sub i32 0, %v0_12508
  store i32 %v1_12528, i32* %r0.global-to-local, align 4
  %v1_1252c = add i32 %v0_12508, 1
  %v2_1252c = icmp ult i32 %v1_12528, 2
  br i1 %v2_1252c, label %bb11, label %bb

bb:                                               ; preds = %dec_label_pc_1251c
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_1251c, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_1252c, %dec_label_pc_1251c ]
  %v0_1253c.pr = phi i32 [ 0, %bb ], [ %v1_1252c, %dec_label_pc_1251c ]
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v2_12534 = icmp eq i32 %v0_12510, 0
  br i1 %v2_12534, label %.thread, label %bb12

.thread:                                          ; preds = %bb11
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12558

bb12:                                             ; preds = %bb11
  %v2_1253c = icmp eq i32 %v0_1253c.pr, 0
  br i1 %v2_1253c, label %dec_label_pc_12558, label %dec_label_pc_12544

dec_label_pc_12544:                               ; preds = %bb12
  %v1_12544 = inttoptr i32 %v0_12510 to i32*
  %v2_12544 = load i32, i32* %v1_12544, align 4
  %v1_12548 = add i32 %v0_12510, 4
  %v2_12548 = inttoptr i32 %v1_12548 to i32*
  %v3_12548 = load i32, i32* %v2_12548, align 4
  %tmp13 = bitcast i32 %v2_12544 to float
  %tmp14 = call float @fabsf(float %tmp13)
  %v1_1254c = bitcast float %tmp14 to i32
  %v1_12550 = and i32 %v3_12548, -4
  store i32 %v1_12550, i32* %r3.global-to-local, align 4
  store i32 %v1_1254c, i32* %v1_12544, align 4
  %v5_12554 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_12554, i32* %v2_12548, align 4
  %v2_12558.pre = load i32, i32* %stack_var_-4, align 4
  %v1_1255c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12558

dec_label_pc_12558:                               ; preds = %.thread7, %.thread, %bb12, %dec_label_pc_12544
  %v1_1255c = phi i32 [ %v1_12528, %.thread ], [ %v1_12528, %bb12 ], [ %v1_1255c.pre, %dec_label_pc_12544 ], [ 22, %.thread7 ]
  %v2_12558 = phi i32 [ %v0_1250c, %.thread ], [ %v0_1250c, %bb12 ], [ %v2_12558.pre, %dec_label_pc_12544 ], [ %v0_1250c, %.thread7 ]
  store i32 %v2_12558, i32* @r7, align 4
  ret i32 %v1_1255c

; uselistorder directives
  uselistorder i32 %v0_12508, { 1, 2, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12558, { 3, 2, 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_12560(i32 %arg1) local_unnamed_addr {
dec_label_pc_12560:
  %stack_var_-16 = alloca i32, align 4
  %v2_12564 = ptrtoint i32* %stack_var_-16 to i32
  %v2_12570 = call i32 @function_125d0(i32 2, i32 %v2_12564)
  %v2_12574 = icmp eq i32 %v2_12570, 0
  br i1 %v2_12574, label %dec_label_pc_1257c, label %dec_label_pc_125bc

dec_label_pc_1257c:                               ; preds = %dec_label_pc_12560
  %v2_1257c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1257c, i32* @r4, align 4
  %v10_12588 = icmp sgt i32 %v2_1257c, 2147
  br i1 %v10_12588, label %dec_label_pc_125bc, label %dec_label_pc_1258c

dec_label_pc_1258c:                               ; preds = %dec_label_pc_1257c
  store i32 1000, i32* @r1, align 4
  %v0_12594 = call i32 @function_13f7c()
  %v0_125a0 = load i32, i32* @r4, align 4
  %v2_125a0 = mul i32 %v0_125a0, 1000000
  %v2_125a8 = sub i32 2147483647, %v2_125a0
  %v7_125b0 = icmp sgt i32 %v0_12594, %v2_125a8
  %v10_125b04 = add i32 %v2_125a0, %v0_12594
  %.v10_125b04 = select i1 %v7_125b0, i32 -1, i32 %v10_125b04
  br label %dec_label_pc_125bc

dec_label_pc_125bc:                               ; preds = %dec_label_pc_1258c, %dec_label_pc_1257c, %dec_label_pc_12560
  %storemerge = phi i32 [ -1, %dec_label_pc_12560 ], [ -1, %dec_label_pc_1257c ], [ %.v10_125b04, %dec_label_pc_1258c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 2147483647, { 4, 6, 0, 1, 2, 3, 5 }
}

define i32 @function_125c8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_125c8:
  %v0_125c8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_125c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_125c8
  %v3_125c8 = udiv i32 %arg2, 65536
  %v4_125c8 = mul i32 %arg2, 65536
  %v5_125c8 = or i32 %v3_125c8, %v4_125c8
  %v8_125c8 = and i32 %v5_125c8, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_125c8, %bb
  %v6_125cc = phi i32 [ %arg1, %dec_label_pc_125c8 ], [ %v8_125c8, %bb ]
  ret i32 %v6_125cc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_125d0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_125d0:
  %r4.global-to-local = alloca i32, align 4
  %v6_125d0 = load i32, i32* @r5, align 4
  %v9_125d0 = load i32, i32* @r6, align 4
  %v12_125d0 = load i32, i32* @r7, align 4
  %v2_125d8 = load i32, i32* @global_var_1f500.409, align 4
  %v2_125dc = icmp eq i32 %v2_125d8, 0
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_125dc, label %dec_label_pc_125f0, label %dec_label_pc_12630

dec_label_pc_125f0:                               ; preds = %dec_label_pc_125d0
  %v4_125f8 = call i32 @function_13494(i32 ptrtoint ([10 x i8]* @global_var_16744.411 to i32), i32 ptrtoint ([21 x i8]* @global_var_16750.413 to i32))
  %v2_12600 = icmp eq i32 %v4_125f8, 0
  store i1 %v2_12600, i1* @cpsr_z, align 1
  %storemerge = select i1 %v2_12600, i32 ptrtoint (i32* @global_var_12664.415 to i32), i32 %v4_125f8
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v4_1261813 = call i32 @function_128c8(i32 0, i32 %storemerge, i32* nonnull @global_var_1f500.409)
  %v2_1261c15 = icmp eq i32 %v4_1261813, 0
  %v2_12638.pre.pre16 = load i32, i32* @global_var_1f500.409, align 4
  br i1 %v2_1261c15, label %dec_label_pc_12630.loopexit, label %dec_label_pc_12624

dec_label_pc_12624:                               ; preds = %dec_label_pc_125f0, %dec_label_pc_12624._crit_edge
  %v2_12638.pre.pre17 = phi i32 [ %v2_12638.pre.pre, %dec_label_pc_12624._crit_edge ], [ %v2_12638.pre.pre16, %dec_label_pc_125f0 ]
  %v2_12628 = icmp eq i32 %v2_12638.pre.pre17, 0
  store i1 %v2_12628, i1* @cpsr_z, align 1
  br i1 %v2_12628, label %dec_label_pc_12624._crit_edge, label %dec_label_pc_12630.loopexit

dec_label_pc_12624._crit_edge:                    ; preds = %dec_label_pc_12624
  %v0_12610.pre = load i32, i32* %r4.global-to-local, align 4
  %v4_12618 = call i32 @function_128c8(i32 0, i32 %v0_12610.pre, i32* nonnull @global_var_1f500.409)
  %v2_1261c = icmp eq i32 %v4_12618, 0
  %v2_12638.pre.pre = load i32, i32* @global_var_1f500.409, align 4
  br i1 %v2_1261c, label %dec_label_pc_12630.loopexit, label %dec_label_pc_12624

dec_label_pc_12630.loopexit:                      ; preds = %dec_label_pc_12624, %dec_label_pc_12624._crit_edge, %dec_label_pc_125f0
  %v2_12638.pre.pre.lcssa = phi i32 [ %v2_12638.pre.pre16, %dec_label_pc_125f0 ], [ %v2_12638.pre.pre, %dec_label_pc_12624._crit_edge ], [ %v2_12638.pre.pre17, %dec_label_pc_12624 ]
  %v0_12634.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12630

dec_label_pc_12630:                               ; preds = %dec_label_pc_12630.loopexit, %dec_label_pc_125d0
  %v2_12638 = phi i32 [ %v2_12638.pre.pre.lcssa, %dec_label_pc_12630.loopexit ], [ %v2_125d8, %dec_label_pc_125d0 ]
  %v0_12634 = phi i32 [ %v0_12634.pre, %dec_label_pc_12630.loopexit ], [ %arg1, %dec_label_pc_125d0 ]
  call void @__pseudo_branch(i32 %v2_12638)
  store i32 %v6_125d0, i32* @r5, align 4
  store i32 %v9_125d0, i32* @r6, align 4
  store i32 %v12_125d0, i32* @r7, align 4
  ret i32 %v0_12634

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32* @global_var_1f500.409, { 2, 3, 0, 1, 4 }
  uselistorder label %dec_label_pc_12630.loopexit, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12624, { 1, 0 }
}

define i32 @function_12664(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12664:
  %v2_12678 = icmp eq i32 %arg1, 0
  br i1 %v2_12678, label %dec_label_pc_126d0, label %dec_label_pc_12680

dec_label_pc_12680:                               ; preds = %dec_label_pc_12664
  %v4_12684 = icmp eq i32 %arg1, -38
  br i1 %v4_12684, label %bb, label %dec_label_pc_126c0

bb:                                               ; preds = %dec_label_pc_12680
  br label %dec_label_pc_126c0

dec_label_pc_126c0:                               ; preds = %dec_label_pc_12680, %bb
  %storemerge = phi i32 [ -22, %bb ], [ %arg1, %dec_label_pc_12680 ]
  %v0_126c0 = call i32 @function_fb60()
  %v1_126c4 = sub i32 0, %storemerge
  %v2_126c8 = inttoptr i32 %v0_126c0 to i32*
  store i32 %v1_126c4, i32* %v2_126c8, align 4
  br label %dec_label_pc_126d0

dec_label_pc_126d0:                               ; preds = %dec_label_pc_12664, %dec_label_pc_126c0
  %v1_126d4 = phi i32 [ 0, %dec_label_pc_12664 ], [ -1, %dec_label_pc_126c0 ]
  ret i32 %v1_126d4

; uselistorder directives
  uselistorder i32 -22, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_126d0, { 1, 0 }
  uselistorder label %dec_label_pc_126c0, { 1, 0 }
}

define i32 @function_126dc(i32* %arg1) local_unnamed_addr {
dec_label_pc_126dc:
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_126dc = load i32, i32* @r4, align 4
  %v2_126e0 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_126f0 = call i32 @function_125d0(i32 0, i32 %v2_126e0)
  %v0_126f4 = load i32, i32* @r4, align 4
  %v2_126f4 = icmp eq i32 %v0_126f4, 0
  br i1 %v2_126f4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_126dc
  %v3_126f8 = load i32, i32* %stack_var_-16, align 4
  %v3_126fc = inttoptr i32 %v0_126f4 to i32*
  store i32 %v3_126f8, i32* %v3_126fc, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_126dc, %bb
  %v2_12700 = load i32, i32* %stack_var_-16, align 4
  store i32 %v3_126dc, i32* @r4, align 4
  ret i32 %v2_12700

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12710() local_unnamed_addr {
dec_label_pc_12710:
  %v1_12710 = load i32, i32* @r0, align 4
  ret i32 %v1_12710
}

define i32 @function_12714(i32 %arg1) local_unnamed_addr {
dec_label_pc_12714:
  store i32 %arg1, i32* @r0, align 4
  %v0_12714 = load i32, i32* @lr, align 4
  store i32 75560, i32* @lr, align 4
  %v1_12724 = call i32 @function_12710()
  store i32 %v1_12724, i32* @r1, align 4
  store i32 0, i32* @r2, align 4
  %v3_12748 = call i32 @function_12360(i32 6, i32 %v1_12724, i32 0)
  %v7_1274c = icmp eq i32 %v3_12748, -4
  br i1 %v7_1274c, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_12714
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_12714, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v3_12748, %dec_label_pc_12714 ]
  store i32 %storemerge, i32* @r0, align 4
  %v0_12754 = call i32 @function_fe0c()
  store i32 %v0_12714, i32* @lr, align 4
  ret i32 %v0_12754

; uselistorder directives
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_12768(i32 %arg1) local_unnamed_addr {
dec_label_pc_12768:
  %v1_12778 = load i32, i32* @r0, align 4
  ret i32 %v1_12778
}

define i32 @function_1277c() local_unnamed_addr {
dec_label_pc_1277c:
  %v1_1278c = load i32, i32* @r0, align 4
  ret i32 %v1_1278c
}

define i32 @function_12790(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12790:
  store i32 %arg1, i32* @r1, align 4
  store i32 %arg2, i32* @r2, align 4
  %v3_127bc = call i32 @function_12360(i32 3, i32 %arg1, i32 %arg2)
  store i32 %v3_127bc, i32* @r0, align 4
  %v0_127c0 = call i32 @function_fe0c()
  ret i32 %v0_127c0

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @function_127d0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_127d0:
  %v0_127dc = call i32 @function_fe0c()
  ret i32 %v0_127dc
}

define i32 @function_127e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_127e8:
  %v0_127f4 = call i32 @function_fe0c()
  ret i32 %v0_127f4
}

define i32 @function_12800(i32 %arg1) local_unnamed_addr {
dec_label_pc_12800:
  %stack_var_-16 = alloca i32, align 4
  %v2_12804 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_1281c = call i32 @function_13b3c(i32 %v2_12804, i32 %v2_12804)
  %v2_12820 = icmp eq i32 %v2_1281c, 0
  br i1 %v2_12820, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_12800
  %v3_12824 = load i32, i32* %stack_var_-16, align 4
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_12800, %bb
  %v1_12830 = phi i32 [ 0, %dec_label_pc_12800 ], [ %v3_12824, %bb ]
  ret i32 %v1_12830

; uselistorder directives
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_12834(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12834:
  store i32 %arg1, i32* @r1, align 4
  store i32 %arg2, i32* @r2, align 4
  %v3_12860 = call i32 @function_12360(i32 4, i32 %arg1, i32 %arg2)
  store i32 %v3_12860, i32* @r0, align 4
  %v0_12864 = call i32 @function_fe0c()
  ret i32 %v0_12864

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @function_12874() local_unnamed_addr {
dec_label_pc_12874:
  %ip.global-to-local = alloca i32, align 4
  %v3_12878 = load i32, i32* @global_var_1f04c.419, align 4
  store i32 %v3_12878, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12884.420 to i32))
  %v0_12880 = load i1, i1* @cpsr_z, align 1
  %v1_12880 = load i32, i32* @r0, align 4
  br i1 %v0_12880, label %bb, label %dec_label_pc_12874._crit_edge

bb:                                               ; preds = %dec_label_pc_12874
  %v2_12880 = load i32, i32* %ip.global-to-local, align 4
  %v5_12880 = sdiv i32 %v2_12880, 32768
  %v6_12880 = and i32 %v5_12880, %v1_12880
  store i32 %v6_12880, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12874._crit_edge

dec_label_pc_12874._crit_edge:                    ; preds = %dec_label_pc_12874, %bb
  %v0_12884 = load i32, i32* @lr, align 4
  %v1_12884 = urem i32 %v0_12884, 2
  %v2_12884 = icmp eq i32 %v1_12884, 0
  store i1 %v2_12884, i1* @cpsr_z, align 1
  ret i32 %v1_12880

; uselistorder directives
  uselistorder i32 %v1_12880, { 1, 0 }
  uselistorder label %dec_label_pc_12874._crit_edge, { 1, 0 }
}

define i32 @function_12890(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12890:
  %v1_128a4 = call i32 @unknown_ffff0fc0()
  ret i32 %arg1
}

define i32 @function_128c8(i32 %arg1, i32 %arg2, i32* %arg3) local_unnamed_addr {
dec_label_pc_128c8:
  %v3_128cc = load i32, i32* @global_var_1f050.423, align 4
  store i32 %v3_128cc, i32* @ip, align 4
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_128d8.424 to i32))
  %v0_128d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_128d4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_128c8
  %v2_128d4 = load i32, i32* @ip, align 4
  %v3_128d4 = load i32, i32* @r7, align 4
  %v4_128d4 = lshr i32 %v2_128d4, %v3_128d4
  %v5_128d4 = sub i32 32, %v3_128d4
  %v6_128d4 = shl i32 %v2_128d4, %v5_128d4
  %v7_128d4 = or i32 %v6_128d4, %v4_128d4
  %v9_128d4 = and i32 %v7_128d4, %arg1
  store i32 %v9_128d4, i32* @ip, align 4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_128c8, %bb
  %v2_128dc = load i32, i32* %arg3, align 4
  %v2_128e0 = sub i32 %arg1, %v2_128dc
  %v9_128e0 = icmp eq i32 %v2_128dc, %arg1
  br i1 %v9_128e0, label %bb2, label %bb3

bb2:                                              ; preds = %bb1
  store i32 %arg2, i32* %arg3, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  ret i32 %v2_128e0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_128f4(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_128f4:
  br label %dec_label_pc_128fc

dec_label_pc_128fc:                               ; preds = %bb, %dec_label_pc_128f4
  %v2_128fc = load i32, i32* %arg2, align 4
  %v2_12900 = sub i32 %arg1, %v2_128fc
  %v9_12900 = icmp eq i32 %v2_128fc, %arg1
  br i1 %v9_12900, label %bb, label %dec_label_pc_12910

bb:                                               ; preds = %dec_label_pc_128fc
  %v4_12908 = icmp eq i32 %v2_12900, 1
  br i1 %v4_12908, label %dec_label_pc_128fc, label %dec_label_pc_12910

dec_label_pc_12910:                               ; preds = %dec_label_pc_128fc, %bb
  ret i32 %v2_12900

; uselistorder directives
  uselistorder i32 %v2_12900, { 1, 0 }
  uselistorder label %dec_label_pc_12910, { 1, 0 }
}

define i32 @function_12918(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_12918:
  br label %dec_label_pc_12920

dec_label_pc_12920:                               ; preds = %bb, %dec_label_pc_12918
  %v2_12920 = load i32, i32* %arg2, align 4
  %v2_12924 = sub i32 %arg1, %v2_12920
  %v9_12924 = icmp eq i32 %v2_12920, %arg1
  br i1 %v9_12924, label %bb, label %dec_label_pc_12934

bb:                                               ; preds = %dec_label_pc_12920
  %v4_1292c = icmp eq i32 %v2_12924, 1
  br i1 %v4_1292c, label %dec_label_pc_12920, label %dec_label_pc_12934

dec_label_pc_12934:                               ; preds = %dec_label_pc_12920, %bb
  ret i32 %v2_12924

; uselistorder directives
  uselistorder i32 %v2_12924, { 1, 0 }
  uselistorder label %dec_label_pc_12934, { 1, 0 }
}

define i32 @function_1293c() local_unnamed_addr {
dec_label_pc_1293c:
  %v3_12940 = load i32, i32* @global_var_1f054.426, align 4
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_1294c.427 to i32))
  ret i32 %v3_12940
}

define i32 @function_12958() local_unnamed_addr {
dec_label_pc_12958:
  %v2_1295c = load i32, i32* @global_var_1f720.277, align 4
  %v2_12960 = icmp eq i32 %v2_1295c, 0
  %v0_12964 = load i32, i32* @r0, align 4
  store i32 %v0_12964, i32* @ip, align 4
  br i1 %v2_12960, label %dec_label_pc_129b8, label %dec_label_pc_12974

dec_label_pc_12974:                               ; preds = %dec_label_pc_12958
  %v3_12974 = load i32, i32* @global_var_1f72c.246, align 4
  %v1_12978 = add i32 %v0_12964, 8
  %v2_12980 = sub i32 -220, %v0_12964
  %v1_12984 = add i32 %v3_12974, -1
  %v2_12988 = and i32 %v1_12984, %v2_12980
  %v2_1298c = add i32 %v1_12978, %v2_12988
  store i32 %v2_1298c, i32* @r4, align 4
  %v1_12990 = add i32 %v2_1298c, 212
  store i32 1, i32* @r3, align 4
  %v2_12998 = inttoptr i32 %v0_12964 to i32*
  store i32 1, i32* %v2_12998, align 4
  %v1_1299c = load i32, i32* @ip, align 4
  %v2_1299c = add i32 %v1_1299c, 4
  %v3_1299c = inttoptr i32 %v2_1299c to i32*
  store i32 %v1_12990, i32* %v3_1299c, align 4
  %v3_129a0 = load i32, i32* @global_var_1f724.242, align 4
  %v0_129a4 = load i32, i32* @ip, align 4
  %v1_129a4 = load i32, i32* @r4, align 4
  %v2_129a4 = add i32 %v1_129a4, 208
  %v3_129a4 = inttoptr i32 %v2_129a4 to i32*
  store i32 %v0_129a4, i32* %v3_129a4, align 4
  %v0_129a8 = load i32, i32* @ip, align 4
  %v1_129a8 = load i32, i32* @r4, align 4
  %v2_129a8 = add i32 %v1_129a8, 4
  %v3_129a8 = inttoptr i32 %v2_129a8 to i32*
  store i32 %v0_129a8, i32* %v3_129a8, align 4
  %v2_129ac = load i32, i32* @global_var_1f720.277, align 4
  %v3_129b0 = inttoptr i32 %v1_12990 to i16*
  %v4_129b0 = call i32 @function_11cfc(i16* %v3_129b0, i32 %v2_129ac, i32 %v3_129a0)
  %v0_129b4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_129b8

dec_label_pc_129b8:                               ; preds = %dec_label_pc_12958, %dec_label_pc_12974
  %v1_129bc = phi i32 [ %v0_12964, %dec_label_pc_12958 ], [ %v0_129b4, %dec_label_pc_12974 ]
  ret i32 %v1_129bc

; uselistorder directives
  uselistorder i32 %v0_12964, { 0, 1, 3, 2, 4 }
  uselistorder i32 208, { 1, 0 }
  uselistorder i32 212, { 1, 0 }
  uselistorder label %dec_label_pc_129b8, { 1, 0 }
}

define i32 @function_129c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_129c4:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v6_129c4 = load i32, i32* @r5, align 4
  %v1_129c8 = add i32 %arg1, 12
  %v2_129c8 = inttoptr i32 %v1_129c8 to i32*
  %v3_129c8 = load i32, i32* %v2_129c8, align 4
  %v1_129d0 = add i32 %arg1, 20
  %v2_129d0 = inttoptr i32 %v1_129d0 to i32*
  %v3_129d0 = load i32, i32* %v2_129d0, align 4
  store i32 %v3_129d0, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  %v2_12a085 = icmp eq i32 %v3_129d0, 0
  br i1 %v2_12a085, label %dec_label_pc_12a10.thread, label %dec_label_pc_129e0.lr.ph

dec_label_pc_12a10.thread:                        ; preds = %dec_label_pc_129c4
  br label %dec_label_pc_12a10.dec_label_pc_12a40_crit_edge

dec_label_pc_129e0.lr.ph:                         ; preds = %dec_label_pc_129c4
  %v1_129fc = add i32 %arg1, 16
  %v2_129fc = inttoptr i32 %v1_129fc to i32*
  br label %dec_label_pc_129e0

dec_label_pc_129e0:                               ; preds = %dec_label_pc_129e0.lr.ph, %dec_label_pc_12a08
  %v0_12a3416 = phi i32 [ 0, %dec_label_pc_129e0.lr.ph ], [ %v0_12a3414, %dec_label_pc_12a08 ]
  %v0_12a1012 = phi i32 [ 0, %dec_label_pc_129e0.lr.ph ], [ %v0_12a1011, %dec_label_pc_12a08 ]
  %v0_12a00 = phi i32 [ %v3_129d0, %dec_label_pc_129e0.lr.ph ], [ %v1_12a00, %dec_label_pc_12a08 ]
  %v0_12a04 = phi i32 [ %v3_129c8, %dec_label_pc_129e0.lr.ph ], [ %v2_12a04, %dec_label_pc_12a08 ]
  %v1_129e0 = inttoptr i32 %v0_12a04 to i32*
  %v2_129e0 = load i32, i32* %v1_129e0, align 4
  store i32 %v2_129e0, i32* %r3.global-to-local, align 4
  switch i32 %v2_129e0, label %dec_label_pc_12a08 [
    i32 6, label %.thread
    i32 7, label %bb
  ]

.thread:                                          ; preds = %dec_label_pc_129e0
  %v2_129e8 = add i32 %v0_12a04, 8
  %v3_129e8 = inttoptr i32 %v2_129e8 to i32*
  %v4_129e8 = load i32, i32* %v3_129e8, align 4
  store i32 %v4_129e8, i32* %r3.global-to-local, align 4
  %v3_129ec = sub i32 %v3_129c8, %v4_129e8
  store i32 %v3_129ec, i32* @r4, align 4
  br label %dec_label_pc_12a08

bb:                                               ; preds = %dec_label_pc_129e0
  br label %dec_label_pc_12a08

dec_label_pc_12a08:                               ; preds = %dec_label_pc_129e0, %.thread, %bb
  %v0_12a3414 = phi i32 [ %v3_129ec, %.thread ], [ %v0_12a3416, %bb ], [ %v0_12a3416, %dec_label_pc_129e0 ]
  %v0_12a1011 = phi i32 [ %v0_12a1012, %.thread ], [ %v0_12a04, %bb ], [ %v0_12a1012, %dec_label_pc_129e0 ]
  %v3_129fc = load i32, i32* %v2_129fc, align 4
  store i32 %v3_129fc, i32* %r3.global-to-local, align 4
  %v1_12a00 = add i32 %v0_12a00, -1
  store i32 %v1_12a00, i32* @lr, align 4
  %v2_12a04 = add i32 %v3_129fc, %v0_12a04
  %v2_12a08 = icmp eq i32 %v1_12a00, 0
  br i1 %v2_12a08, label %dec_label_pc_12a10, label %dec_label_pc_129e0

dec_label_pc_12a10:                               ; preds = %dec_label_pc_12a08
  %v2_12a10 = icmp eq i32 %v0_12a1011, 0
  br i1 %v2_12a10, label %dec_label_pc_12a10.dec_label_pc_12a40_crit_edge, label %dec_label_pc_12a18

dec_label_pc_12a10.dec_label_pc_12a40_crit_edge:  ; preds = %dec_label_pc_12a10.thread, %dec_label_pc_12a10
  %v3_12a44.pre = load i32, i32* @global_var_1f728.243, align 4
  %v3_12a48.pre = load i32, i32* @global_var_1f72c.246, align 4
  %v2_12a4c.pre = load i32, i32* @global_var_1f720.277, align 4
  br label %dec_label_pc_12a40

dec_label_pc_12a18:                               ; preds = %dec_label_pc_12a10
  %v1_12a1c = add i32 %v0_12a1011, 16
  %v2_12a1c = inttoptr i32 %v1_12a1c to i32*
  %v3_12a1c = load i32, i32* %v2_12a1c, align 4
  store i32 %v3_12a1c, i32* %r3.global-to-local, align 4
  %v1_12a20 = add i32 %v0_12a1011, 8
  %v2_12a20 = inttoptr i32 %v1_12a20 to i32*
  %v3_12a20 = load i32, i32* %v2_12a20, align 4
  store i32 %v3_12a1c, i32* @global_var_1f724.242, align 4
  %v1_12a28 = add i32 %v0_12a1011, 20
  %v2_12a28 = inttoptr i32 %v1_12a28 to i32*
  %v3_12a28 = load i32, i32* %v2_12a28, align 4
  store i32 %v3_12a28, i32* %r3.global-to-local, align 4
  store i32 %v3_12a28, i32* @global_var_1f728.243, align 4
  %v1_12a30 = add i32 %v0_12a1011, 28
  %v2_12a30 = inttoptr i32 %v1_12a30 to i32*
  %v3_12a30 = load i32, i32* %v2_12a30, align 4
  store i32 %v3_12a30, i32* %r3.global-to-local, align 4
  %v2_12a34 = add i32 %v3_12a20, %v0_12a3414
  store i32 %v3_12a30, i32* @global_var_1f72c.246, align 4
  store i32 %v2_12a34, i32* @global_var_1f720.277, align 4
  br label %dec_label_pc_12a40

dec_label_pc_12a40:                               ; preds = %dec_label_pc_12a10.dec_label_pc_12a40_crit_edge, %dec_label_pc_12a18
  %v2_12a4c = phi i32 [ %v2_12a4c.pre, %dec_label_pc_12a10.dec_label_pc_12a40_crit_edge ], [ %v2_12a34, %dec_label_pc_12a18 ]
  %v3_12a48 = phi i32 [ %v3_12a48.pre, %dec_label_pc_12a10.dec_label_pc_12a40_crit_edge ], [ %v3_12a30, %dec_label_pc_12a18 ]
  %v3_12a44 = phi i32 [ %v3_12a44.pre, %dec_label_pc_12a10.dec_label_pc_12a40_crit_edge ], [ %v3_12a28, %dec_label_pc_12a18 ]
  store i32 %v3_12a48, i32* %r0.global-to-local, align 4
  %sum = add i32 %v2_12a4c, %v3_12a44
  %v2_12a54 = sub i32 0, %sum
  %v1_12a58 = add i32 %v3_12a48, -1
  %v2_12a5c = and i32 %v1_12a58, %v2_12a54
  store i32 %v2_12a5c, i32* %r3.global-to-local, align 4
  %v2_12a64 = add i32 %v2_12a5c, %v3_12a44
  %tmp = icmp ult i32 %v3_12a48, 4
  br i1 %tmp, label %bb38, label %.thread30

bb38:                                             ; preds = %dec_label_pc_12a40
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 4, i32* @global_var_1f72c.246, align 4
  br label %.thread30

.thread30:                                        ; preds = %dec_label_pc_12a40, %bb38
  %v3_12a70 = phi i32 [ 4, %bb38 ], [ %v3_12a48, %dec_label_pc_12a40 ]
  %v1_12a74 = add i32 %v2_12a64, 223
  %v2_12a78 = add i32 %v1_12a74, %v3_12a70
  %v1_12a7c = and i32 %v2_12a78, -4
  store i32 ptrtoint (i8** @global_var_1f6e8.330 to i32), i32* %r3.global-to-local, align 4
  store i32 %v2_12a64, i32* @global_var_1f728.243, align 4
  store i32 %v1_12a7c, i32* @global_var_1f6fc.261, align 4
  %tmp41 = icmp ult i32 %v1_12a7c, 281
  br i1 %tmp41, label %.thread31, label %dec_label_pc_12a98

.thread31:                                        ; preds = %.thread30
  store i32 ptrtoint (i32* @global_var_1f508.432 to i32), i32* @r0, align 4
  br label %dec_label_pc_12ab4

dec_label_pc_12a98:                               ; preds = %.thread30
  store i32 0, i32* @r0, align 4
  store i32 192, i32* @r7, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12ab4

dec_label_pc_12ab4:                               ; preds = %.thread31, %dec_label_pc_12a98
  %v0_12ab4 = call i32 @function_12958()
  store i32 %v0_12ab4, i32* @r4, align 4
  %v2_12abc = inttoptr i32 %v0_12ab4 to i32*
  store i32 %v0_12ab4, i32* %v2_12abc, align 4
  %v1_12ac0 = add i32 %v0_12ab4, 204
  store i32 %v1_12ac0, i32* %r0.global-to-local, align 4
  %v1_12ac4 = call i32 @function_13b78(i32 %v1_12ac0)
  store i32 %v1_12ac4, i32* %r0.global-to-local, align 4
  %v1_12ac8 = icmp slt i32 %v1_12ac4, 0
  br i1 %v1_12ac8, label %bb39, label %dec_label_pc_12ad8

bb39:                                             ; preds = %dec_label_pc_12ab4
  store i32 0, i32* %r3.global-to-local, align 4
  call void @llvm.trap()
  unreachable

dec_label_pc_12ad8:                               ; preds = %dec_label_pc_12ab4
  %v2_12ac8 = icmp eq i32 %v1_12ac4, 0
  br i1 %v2_12ac8, label %bb40, label %.thread3

bb40:                                             ; preds = %dec_label_pc_12ad8
  store i32 ptrtoint (i8** @global_var_1f6e8.330 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* bitcast (i8** @global_var_1f6e8.330 to i32*), align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12ad8, %bb40
  %v0_12ae8 = load i32, i32* @r4, align 4
  %v1_12ae8 = add i32 %v0_12ae8, 28
  store i32 %v1_12ae8, i32* %r0.global-to-local, align 4
  %v1_12af0 = add i32 %v0_12ae8, 136
  %v3_12af4 = inttoptr i32 %v1_12af0 to i32*
  store i32 %v1_12af0, i32* %v3_12af4, align 4
  store i32 ptrtoint (i32* @global_var_1f704.270 to i32), i32* %r3.global-to-local, align 4
  %v0_12afc = load i32, i32* %r0.global-to-local, align 4
  %v1_12afc = load i32, i32* @r4, align 4
  %v2_12afc = add i32 %v1_12afc, 28
  %v3_12afc = inttoptr i32 %v2_12afc to i32*
  store i32 %v0_12afc, i32* %v3_12afc, align 4
  %v0_12b00 = load i32, i32* %r3.global-to-local, align 4
  %v1_12b00 = load i32, i32* @r4, align 4
  %v2_12b00 = add i32 %v1_12b00, 156
  %v3_12b00 = inttoptr i32 %v2_12b00 to i32*
  store i32 %v0_12b00, i32* %v3_12b00, align 4
  store i32 %v6_129c4, i32* @r5, align 4
  %v1_12b08 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_12b08

; uselistorder directives
  uselistorder i32 %v1_12af0, { 1, 0 }
  uselistorder i32 %v0_12ab4, { 0, 2, 1, 3 }
  uselistorder i32 %v2_12a64, { 1, 0 }
  uselistorder i32 %v3_12a48, { 1, 0, 3, 2 }
  uselistorder i32 %v1_12a00, { 1, 2, 0 }
  uselistorder i32 %v0_12a1011, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 1, 5, 6, 0 }
  uselistorder i32 204, { 1, 0 }
  uselistorder i32 192, { 3, 0, 1, 2 }
  uselistorder i32 ptrtoint (i8** @global_var_1f6e8.330 to i32), { 3, 2, 1, 0 }
  uselistorder i32 223, { 4, 3, 0, 1, 2 }
  uselistorder i32* @global_var_1f720.277, { 1, 0, 2, 3, 4 }
  uselistorder i32* @global_var_1f72c.246, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1f728.243, { 1, 2, 0, 3 }
  uselistorder i32 %arg1, { 0, 2, 1, 3 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12ab4, { 1, 0 }
  uselistorder label %.thread30, { 1, 0 }
  uselistorder label %dec_label_pc_12a40, { 1, 0 }
  uselistorder label %dec_label_pc_12a10.dec_label_pc_12a40_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12a08, { 2, 1, 0 }
  uselistorder label %dec_label_pc_129e0, { 1, 0 }
}

define i32 @function_12b1c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12b1c:
  br label %dec_label_pc_12b24

dec_label_pc_12b24:                               ; preds = %dec_label_pc_12b24, %dec_label_pc_12b1c
  br label %dec_label_pc_12b24
}

define i32 @function_12b34(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12b34:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = trunc i64 %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_0 = alloca i32, align 4
  store i32 %arg4, i32* %stack_var_0, align 4
  %v6_12b34 = load i32, i32* @r5, align 4
  %v12_12b34 = load i32, i32* @r7, align 4
  %v15_12b34 = load i32, i32* @r8, align 4
  %v18_12b34 = load i32, i32* @sb, align 4
  %v21_12b34 = load i32, i32* @sl, align 4
  %v24_12b34 = load i32, i32* @fp, align 4
  %v0_12b44 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12b44, i32* @sl, align 4
  store i32 %arg3, i32* @r6, align 4
  %tmp235 = icmp ult i32 %tmp, 37
  br i1 %tmp235, label %dec_label_pc_12b64, label %dec_label_pc_12e00

dec_label_pc_12b54:                               ; preds = %dec_label_pc_12b64
  %v2_12b70 = inttoptr i32 %v3_12b64 to i8*
  %v3_12b70 = load i8, i8* %v2_12b70, align 1
  %v4_12b70 = zext i8 %v3_12b70 to i32
  store i32 %v4_12b70, i32* @r5, align 4
  %v6_12b70 = add i32 %v3_12b64, 1
  store i32 %v6_12b70, i32* %r2.global-to-local, align 4
  store i32 %v6_12b70, i32* %v2_12b64, align 4
  %v0_12b54 = load i32, i32* @r5, align 4
  %v7_12b58 = icmp eq i32 %v0_12b54, 32
  br i1 %v7_12b58, label %dec_label_pc_12b64.backedge, label %bb

bb:                                               ; preds = %dec_label_pc_12b54
  %v1_12b54 = add i32 %v0_12b54, -9
  %tmp236 = icmp ugt i32 %v1_12b54, 4
  br i1 %tmp236, label %dec_label_pc_12b98, label %dec_label_pc_12b64.backedge

dec_label_pc_12b64.backedge:                      ; preds = %dec_label_pc_12b7c, %dec_label_pc_12b54, %bb, %bb177
  %v0_12b64.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_12b64

dec_label_pc_12b64:                               ; preds = %dec_label_pc_12b34, %dec_label_pc_12b64.backedge
  %v2_12b74 = phi i32 [ %v0_12b64.pre, %dec_label_pc_12b64.backedge ], [ %v0_12b44, %dec_label_pc_12b34 ]
  %v1_12b64 = add i32 %v2_12b74, 4
  %v2_12b64 = inttoptr i32 %v1_12b64 to i32*
  %v3_12b64 = load i32, i32* %v2_12b64, align 4
  store i32 %v3_12b64, i32* %r2.global-to-local, align 4
  %v1_12b68 = add i32 %v2_12b74, 104
  %v2_12b68 = inttoptr i32 %v1_12b68 to i32*
  %v3_12b68 = load i32, i32* %v2_12b68, align 4
  %v3_12b6c = icmp ult i32 %v3_12b64, %v3_12b68
  br i1 %v3_12b6c, label %dec_label_pc_12b54, label %dec_label_pc_12b7c

dec_label_pc_12b7c:                               ; preds = %dec_label_pc_12b64
  store i32 %v2_12b74, i32* %r0.global-to-local, align 4
  %v1_12b80 = call i32 @function_13358(i32 %v2_12b74)
  store i32 %v1_12b80, i32* %r0.global-to-local, align 4
  store i32 %v1_12b80, i32* @r5, align 4
  %v7_12b8c = icmp eq i32 %v1_12b80, 32
  br i1 %v7_12b8c, label %dec_label_pc_12b64.backedge, label %bb177

bb177:                                            ; preds = %dec_label_pc_12b7c
  %v1_12b88 = add i32 %v1_12b80, -9
  %tmp237 = icmp ult i32 %v1_12b88, 5
  br i1 %tmp237, label %dec_label_pc_12b64.backedge, label %dec_label_pc_12b98

dec_label_pc_12b98:                               ; preds = %bb177, %bb
  %v0_12ba824 = phi i32 [ %v1_12b80, %bb177 ], [ %v0_12b54, %bb ]
  %v7_12b98 = icmp eq i32 %v0_12ba824, 45
  br i1 %v7_12b98, label %dec_label_pc_12bb4, label %bb178

bb178:                                            ; preds = %dec_label_pc_12b98
  %v8_12b9c = icmp eq i32 %v0_12ba824, 43
  br i1 %v8_12b9c, label %dec_label_pc_12bb4, label %.thread19

.thread19:                                        ; preds = %bb178
  br label %dec_label_pc_12bdc

dec_label_pc_12bb4:                               ; preds = %bb178, %dec_label_pc_12b98
  %storemerge160 = phi i32 [ 45, %dec_label_pc_12b98 ], [ 43, %bb178 ]
  store i32 %storemerge160, i32* @r4, align 4
  %v0_12bb4 = load i32, i32* @sl, align 4
  %v1_12bb4 = add i32 %v0_12bb4, 4
  %v2_12bb4 = inttoptr i32 %v1_12bb4 to i32*
  %v3_12bb4 = load i32, i32* %v2_12bb4, align 4
  store i32 %v3_12bb4, i32* %r2.global-to-local, align 4
  %v1_12bb8 = add i32 %v0_12bb4, 104
  %v2_12bb8 = inttoptr i32 %v1_12bb8 to i32*
  %v3_12bb8 = load i32, i32* %v2_12bb8, align 4
  %v3_12bbc = icmp ult i32 %v3_12bb4, %v3_12bb8
  br i1 %v3_12bbc, label %.thread27, label %dec_label_pc_13084

.thread27:                                        ; preds = %dec_label_pc_12bb4
  %v2_12bc0 = inttoptr i32 %v3_12bb4 to i8*
  %v3_12bc0 = load i8, i8* %v2_12bc0, align 1
  %v4_12bc0 = zext i8 %v3_12bc0 to i32
  store i32 %v4_12bc0, i32* @r5, align 4
  %v6_12bc0 = add i32 %v3_12bb4, 1
  store i32 %v6_12bc0, i32* %r2.global-to-local, align 4
  store i32 %v6_12bc0, i32* %v2_12bb4, align 4
  br label %dec_label_pc_12bcc

dec_label_pc_12bcc:                               ; preds = %.thread27, %dec_label_pc_13084
  %v0_12bcc = load i32, i32* @r4, align 4
  %v7_12bcc = icmp eq i32 %v0_12bcc, 45
  br i1 %v7_12bcc, label %.thread29, label %bb180

bb180:                                            ; preds = %dec_label_pc_12bcc
  br label %dec_label_pc_12bdc

.thread29:                                        ; preds = %dec_label_pc_12bcc
  br label %dec_label_pc_12bdc

dec_label_pc_12bdc:                               ; preds = %bb180, %.thread29, %.thread19
  %stack_var_-44.1 = phi i32 [ 0, %.thread19 ], [ 0, %bb180 ], [ -1, %.thread29 ]
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v1_12be0 = sub i32 1, %tmp
  store i32 %v1_12be0, i32* @r4, align 4
  %v2_12be0 = icmp ult i32 %tmp, 2
  br i1 %v2_12be0, label %bb181, label %.thread139

.thread139:                                       ; preds = %dec_label_pc_12bdc
  store i32 0, i32* @r4, align 4
  br label %bb182

bb181:                                            ; preds = %dec_label_pc_12bdc
  %v2_12be8 = icmp eq i32 %tmp, 0
  br i1 %v2_12be8, label %dec_label_pc_12cb4, label %bb182

bb182:                                            ; preds = %.thread139, %bb181
  %v0_12c00143 = phi i32 [ 0, %.thread139 ], [ %v1_12be0, %bb181 ]
  %v8_12bec = icmp eq i32 %tmp, 16
  br i1 %v8_12bec, label %dec_label_pc_12cb4, label %.dec_label_pc_12bf4_crit_edge

.dec_label_pc_12bf4_crit_edge:                    ; preds = %bb182
  %v0_12bfc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12bf4

dec_label_pc_12bf4:                               ; preds = %.dec_label_pc_12bf4_crit_edge, %dec_label_pc_12cb4
  %v0_12c00142 = phi i32 [ %v0_12c00143, %.dec_label_pc_12bf4_crit_edge ], [ %v0_12c00144, %dec_label_pc_12cb4 ]
  %v0_12bfc = phi i32 [ %v0_12bfc.pre, %.dec_label_pc_12bf4_crit_edge ], [ %v0_12cb4, %dec_label_pc_12cb4 ]
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12bfc = add i32 %v0_12bfc, ptrtoint (i32* @global_var_16772.435 to i32)
  %v3_12bfc = inttoptr i32 %v2_12bfc to i8*
  %v4_12bfc = load i8, i8* %v3_12bfc, align 1
  %v6_12bfc = zext i8 %v4_12bfc to i32
  store i32 %v6_12bfc, i32* @r2, align 4
  %v2_12c00 = icmp eq i32 %v0_12c00142, 0
  br i1 %v2_12c00, label %bb184, label %bb183

bb183:                                            ; preds = %dec_label_pc_12bf4
  store i32 10, i32* %r1.global-to-local, align 4
  br label %bb184

bb184:                                            ; preds = %dec_label_pc_12bf4, %bb183
  %v0_12c0c = phi i32 [ %tmp, %dec_label_pc_12bf4 ], [ 10, %bb183 ]
  %tmp238 = icmp ugt i32 %v0_12c0c, %v6_12bfc
  br i1 %tmp238, label %dec_label_pc_12c14, label %dec_label_pc_12dac

dec_label_pc_12c14:                               ; preds = %bb184, %dec_label_pc_12ce0
  %v0_12c2c = phi i32 [ %v0_12cec, %dec_label_pc_12ce0 ], [ %v0_12bfc, %bb184 ]
  %v0_12c24 = phi i32 [ %tmp, %dec_label_pc_12ce0 ], [ %v0_12c0c, %bb184 ]
  %v7_12c18 = icmp eq i32 %v0_12c24, 10
  br i1 %v7_12c18, label %dec_label_pc_12d7c.preheader, label %dec_label_pc_12c24

dec_label_pc_12d7c.preheader:                     ; preds = %dec_label_pc_12c14
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12d7c

dec_label_pc_12c24:                               ; preds = %dec_label_pc_12c14
  %v1_12c30 = add i32 %v0_12c2c, add (i32 ptrtoint (i32* @global_var_16771.437 to i32), i32 1)
  %v2_12c30 = inttoptr i32 %v1_12c30 to i8*
  %v3_12c30 = load i8, i8* %v2_12c30, align 1
  %v4_12c30 = zext i8 %v3_12c30 to i32
  store i32 %v4_12c30, i32* @fp, align 4
  store i32 %v0_12c24, i32* %r2.global-to-local, align 4
  %v1_12c38 = add i32 %v0_12c24, -1
  br label %dec_label_pc_12c3c

dec_label_pc_12c3c:                               ; preds = %.thread156, %dec_label_pc_12ce8, %dec_label_pc_12c24
  %v4_12d38107 = phi i32 [ %v4_12c30, %dec_label_pc_12c24 ], [ %v4_12cf0, %dec_label_pc_12ce8 ], [ %v6_13228, %.thread156 ]
  %v1_12c3c = phi i32 [ %v0_12c24, %dec_label_pc_12c24 ], [ 8, %dec_label_pc_12ce8 ], [ 16, %.thread156 ]
  %v0_12c3c = phi i32 [ %v1_12c38, %dec_label_pc_12c24 ], [ 7, %dec_label_pc_12ce8 ], [ 15, %.thread156 ]
  %v2_12c3c = and i32 %v0_12c3c, %v1_12c3c
  store i32 %v2_12c3c, i32* %r1.global-to-local, align 4
  %v4_12c3c = icmp eq i32 %v2_12c3c, 0
  br i1 %v4_12c3c, label %dec_label_pc_12c4c, label %dec_label_pc_12d28.preheader

dec_label_pc_12d28.preheader:                     ; preds = %dec_label_pc_12c3c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12d28

dec_label_pc_12c4c:                               ; preds = %dec_label_pc_12c3c
  %v2_12c54 = mul i32 %v1_12c3c, 23
  %v3_12c58 = udiv i32 %v2_12c54, 32
  store i32 ptrtoint (i32* @global_var_16768.439 to i32), i32* %r2.global-to-local, align 4
  %v1_12c60 = urem i32 %v3_12c58, 8
  %v2_12c64 = add i32 %v1_12c60, ptrtoint (i32* @global_var_16768.439 to i32)
  %v3_12c64 = inttoptr i32 %v2_12c64 to i8*
  %v4_12c64 = load i8, i8* %v3_12c64, align 1
  %v6_12c64 = zext i8 %v4_12c64 to i32
  store i32 %v6_12c64, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12c80

dec_label_pc_12c70:                               ; preds = %.thread34.dec_label_pc_12c70_crit_edge, %dec_label_pc_12ca8
  %v0_12c74 = phi i32 [ %v0_12c74.pre, %.thread34.dec_label_pc_12c70_crit_edge ], [ %v1_12cac, %dec_label_pc_12ca8 ]
  %v0_12c78 = load i32, i32* @fp, align 4
  %v1_12c78 = load i32, i32* @r4, align 4
  %v2_12c78 = load i32, i32* @r5, align 4
  %v7_12c78 = shl i32 %v1_12c78, %v2_12c78
  %v8_12c78 = or i32 %v7_12c78, %v0_12c78
  store i32 %v8_12c78, i32* @r4, align 4
  %v1_12c7c = add i32 %v0_12c74, add (i32 ptrtoint (i32* @global_var_16771.437 to i32), i32 1)
  %v2_12c7c = inttoptr i32 %v1_12c7c to i8*
  %v3_12c7c = load i8, i8* %v2_12c7c, align 1
  %v4_12c7c = zext i8 %v3_12c7c to i32
  store i32 %v4_12c7c, i32* @fp, align 4
  br label %dec_label_pc_12c80

dec_label_pc_12c80:                               ; preds = %dec_label_pc_12c4c, %dec_label_pc_12c70
  %v0_12e88122 = phi i32 [ %v6_12c64, %dec_label_pc_12c4c ], [ %v2_12c78, %dec_label_pc_12c70 ]
  %v4_12c88 = phi i32 [ %v4_12d38107, %dec_label_pc_12c4c ], [ %v4_12c7c, %dec_label_pc_12c70 ]
  %v0_12e28 = phi i32 [ 0, %dec_label_pc_12c4c ], [ %v8_12c78, %dec_label_pc_12c70 ]
  store i32 %v1_12c3c, i32* %r1.global-to-local, align 4
  %v2_12c84 = icmp ugt i32 %v0_12e28, 134217726
  %v8_12c84 = icmp eq i32 %v0_12e28, 134217727
  %v2_12c88 = xor i1 %v2_12c84, true
  %v3_12c88 = or i1 %v8_12c84, %v2_12c88
  br i1 %v3_12c88, label %bb186, label %bb187

bb186:                                            ; preds = %dec_label_pc_12c80
  %v7_12c88 = icmp ult i32 %v4_12c88, %v1_12c3c
  br i1 %v7_12c88, label %dec_label_pc_12c90, label %dec_label_pc_12e80

bb187:                                            ; preds = %dec_label_pc_12c80
  br i1 %v2_12c84, label %dec_label_pc_12e80, label %dec_label_pc_12c90

dec_label_pc_12c90:                               ; preds = %bb186, %bb187
  %v0_12c90 = load i32, i32* @sl, align 4
  %v1_12c90 = add i32 %v0_12c90, 4
  %v2_12c90 = inttoptr i32 %v1_12c90 to i32*
  %v3_12c90 = load i32, i32* %v2_12c90, align 4
  store i32 %v3_12c90, i32* %r2.global-to-local, align 4
  %v1_12c94 = add i32 %v0_12c90, 104
  %v2_12c94 = inttoptr i32 %v1_12c94 to i32*
  %v3_12c94 = load i32, i32* %v2_12c94, align 4
  %v3_12c98 = icmp ult i32 %v3_12c90, %v3_12c94
  br i1 %v3_12c98, label %.thread34.dec_label_pc_12c70_crit_edge, label %dec_label_pc_12ca8

.thread34.dec_label_pc_12c70_crit_edge:           ; preds = %dec_label_pc_12c90
  %v2_12c9c = inttoptr i32 %v3_12c90 to i8*
  %v3_12c9c = load i8, i8* %v2_12c9c, align 1
  %v4_12c9c = zext i8 %v3_12c9c to i32
  store i32 %v4_12c9c, i32* %r0.global-to-local, align 4
  %v6_12c9c = add i32 %v3_12c90, 1
  store i32 %v6_12c9c, i32* %r2.global-to-local, align 4
  store i32 %v6_12c9c, i32* %v2_12c90, align 4
  %v0_12c74.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12c70

dec_label_pc_12ca8:                               ; preds = %dec_label_pc_12c90
  store i32 %v0_12c90, i32* %r0.global-to-local, align 4
  %v1_12cac = call i32 @function_13358(i32 %v0_12c90)
  store i32 %v1_12cac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12c70

dec_label_pc_12cb4:                               ; preds = %bb181, %bb182
  %v0_12c00144 = phi i32 [ %v1_12be0, %bb181 ], [ %v0_12c00143, %bb182 ]
  %v0_12cb4 = load i32, i32* @r5, align 4
  %v7_12cb4 = icmp eq i32 %v0_12cb4, 48
  br i1 %v7_12cb4, label %dec_label_pc_12cbc, label %dec_label_pc_12bf4

dec_label_pc_12cbc:                               ; preds = %dec_label_pc_12cb4
  %v0_12cbc = load i32, i32* @sl, align 4
  %v1_12cbc = add i32 %v0_12cbc, 4
  %v2_12cbc = inttoptr i32 %v1_12cbc to i32*
  %v3_12cbc = load i32, i32* %v2_12cbc, align 4
  store i32 %v3_12cbc, i32* %r2.global-to-local, align 4
  %v1_12cc0 = add i32 %v0_12cbc, 104
  %v2_12cc0 = inttoptr i32 %v1_12cc0 to i32*
  %v3_12cc0 = load i32, i32* %v2_12cc0, align 4
  %v3_12cc4 = icmp ult i32 %v3_12cbc, %v3_12cc0
  br i1 %v3_12cc4, label %.thread36.dec_label_pc_12cd4_crit_edge, label %dec_label_pc_131fc

.thread36.dec_label_pc_12cd4_crit_edge:           ; preds = %dec_label_pc_12cbc
  %v2_12cc8 = inttoptr i32 %v3_12cbc to i8*
  %v3_12cc8 = load i8, i8* %v2_12cc8, align 1
  %v4_12cc8 = zext i8 %v3_12cc8 to i32
  store i32 %v4_12cc8, i32* @r5, align 4
  %v6_12cc8 = add i32 %v3_12cbc, 1
  store i32 %v6_12cc8, i32* @r2, align 4
  store i32 %v6_12cc8, i32* %v2_12cbc, align 4
  %v0_12cd4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12cd4

dec_label_pc_12cd4:                               ; preds = %.thread36.dec_label_pc_12cd4_crit_edge, %dec_label_pc_131fc
  %v0_12cec = phi i32 [ %v0_12cd4.pre, %.thread36.dec_label_pc_12cd4_crit_edge ], [ %v1_13200, %dec_label_pc_131fc ]
  %v1_12cd4 = or i32 %v0_12cec, 32
  %v7_12cd8 = icmp eq i32 %v1_12cd4, 120
  br i1 %v7_12cd8, label %dec_label_pc_1320c, label %dec_label_pc_12ce0

dec_label_pc_12ce0:                               ; preds = %dec_label_pc_12cd4
  %v0_12ce0 = load i32, i32* @r4, align 4
  %v2_12ce0 = icmp eq i32 %v0_12ce0, 0
  br i1 %v2_12ce0, label %dec_label_pc_12c14, label %dec_label_pc_12ce8

dec_label_pc_12ce8:                               ; preds = %dec_label_pc_12ce0
  %v1_12cf0 = add i32 %v0_12cec, add (i32 ptrtoint (i32* @global_var_16771.437 to i32), i32 1)
  %v2_12cf0 = inttoptr i32 %v1_12cf0 to i8*
  %v3_12cf0 = load i8, i8* %v2_12cf0, align 1
  %v4_12cf0 = zext i8 %v3_12cf0 to i32
  store i32 %v4_12cf0, i32* @fp, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12c3c

dec_label_pc_12d10:                               ; preds = %.thread38.dec_label_pc_12d10_crit_edge, %dec_label_pc_12d58
  %v0_12d18 = phi i32 [ %v0_12d18.pre, %.thread38.dec_label_pc_12d10_crit_edge ], [ %v1_12d0c, %dec_label_pc_12d58 ]
  store i32 %v1_12c3c, i32* %r1.global-to-local, align 4
  %v1_12d1c = load i32, i32* @r4, align 4
  %v2_12d1c = load i32, i32* @fp, align 4
  %v3_12d1c = mul i32 %v1_12d1c, %v1_12c3c
  %v4_12d1c = add i32 %v2_12d1c, %v3_12d1c
  store i32 %v4_12d1c, i32* @r4, align 4
  %v1_12d20 = add i32 %v0_12d18, add (i32 ptrtoint (i32* @global_var_16771.437 to i32), i32 1)
  %v2_12d20 = inttoptr i32 %v1_12d20 to i8*
  %v3_12d20 = load i8, i8* %v2_12d20, align 1
  %v4_12d20 = zext i8 %v3_12d20 to i32
  store i32 %v4_12d20, i32* @fp, align 4
  br label %dec_label_pc_12d28

dec_label_pc_12d28:                               ; preds = %dec_label_pc_12d28.preheader, %dec_label_pc_12d10
  %v0_12ff460 = phi i32 [ %v4_12d38107, %dec_label_pc_12d28.preheader ], [ %v4_12d20, %dec_label_pc_12d10 ]
  %v0_12fd0 = phi i32 [ 0, %dec_label_pc_12d28.preheader ], [ %v4_12d1c, %dec_label_pc_12d10 ]
  store i32 %v1_12c3c, i32* %r2.global-to-local, align 4
  %v3_12d34 = icmp ugt i32 %v0_12fd0, 119304645
  %v9_12d34 = icmp eq i32 %v0_12fd0, 119304646
  %v2_12d38 = xor i1 %v3_12d34, true
  %v3_12d38 = or i1 %v9_12d34, %v2_12d38
  br i1 %v3_12d38, label %bb189, label %bb190

bb189:                                            ; preds = %dec_label_pc_12d28
  %v7_12d38 = icmp ult i32 %v0_12ff460, %v1_12c3c
  br i1 %v7_12d38, label %dec_label_pc_12d40, label %dec_label_pc_12fd0

bb190:                                            ; preds = %dec_label_pc_12d28
  br i1 %v3_12d34, label %.dec_label_pc_12fd0_crit_edge, label %dec_label_pc_12d40

.dec_label_pc_12fd0_crit_edge:                    ; preds = %bb190
  br label %dec_label_pc_12fd0

dec_label_pc_12d40:                               ; preds = %bb189, %bb190
  %v0_12d40 = load i32, i32* @sl, align 4
  %v1_12d40 = add i32 %v0_12d40, 4
  %v2_12d40 = inttoptr i32 %v1_12d40 to i32*
  %v3_12d40 = load i32, i32* %v2_12d40, align 4
  store i32 %v3_12d40, i32* %r2.global-to-local, align 4
  %v1_12d44 = add i32 %v0_12d40, 104
  %v2_12d44 = inttoptr i32 %v1_12d44 to i32*
  %v3_12d44 = load i32, i32* %v2_12d44, align 4
  %v3_12d48 = icmp ult i32 %v3_12d40, %v3_12d44
  br i1 %v3_12d48, label %.thread38.dec_label_pc_12d10_crit_edge, label %dec_label_pc_12d58

.thread38.dec_label_pc_12d10_crit_edge:           ; preds = %dec_label_pc_12d40
  %v2_12d4c = inttoptr i32 %v3_12d40 to i8*
  %v3_12d4c = load i8, i8* %v2_12d4c, align 1
  %v4_12d4c = zext i8 %v3_12d4c to i32
  store i32 %v4_12d4c, i32* %r0.global-to-local, align 4
  %v6_12d4c = add i32 %v3_12d40, 1
  store i32 %v6_12d4c, i32* %r2.global-to-local, align 4
  store i32 %v6_12d4c, i32* %v2_12d40, align 4
  %v0_12d18.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d10

dec_label_pc_12d58:                               ; preds = %dec_label_pc_12d40
  store i32 %v0_12d40, i32* %r0.global-to-local, align 4
  %v1_12d0c = call i32 @function_13358(i32 %v0_12d40)
  store i32 %v1_12d0c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d10

dec_label_pc_12d64:                               ; preds = %.thread40.dec_label_pc_12d64_crit_edge, %dec_label_pc_12da8
  %v0_12d78 = phi i32 [ %v0_12d78.pre, %.thread40.dec_label_pc_12d64_crit_edge ], [ %v1_12d60, %dec_label_pc_12da8 ]
  %v0_12d64 = load i32, i32* @r4, align 4
  %v3_12d64 = mul i32 %v0_12d64, 8
  store i32 %v3_12d64, i32* @r2, align 4
  %v2_12d6c = mul i32 %v0_12d64, 10
  %v1_12d70 = load i32, i32* @r5, align 4
  %v2_12d70 = add i32 %v1_12d70, %v2_12d6c
  %v1_12d74 = add i32 %v2_12d70, -48
  store i32 %v1_12d74, i32* @r4, align 4
  store i32 %v0_12d78, i32* @r5, align 4
  br label %dec_label_pc_12d7c

dec_label_pc_12d7c:                               ; preds = %dec_label_pc_12d7c.preheader, %dec_label_pc_12d64
  %v0_13094 = phi i32 [ 0, %dec_label_pc_12d7c.preheader ], [ %v1_12d74, %dec_label_pc_12d64 ]
  %v0_12d80 = phi i32 [ %v0_12c2c, %dec_label_pc_12d7c.preheader ], [ %v0_12d78, %dec_label_pc_12d64 ]
  %v1_12d80 = add i32 %v0_12d80, -48
  store i32 %v1_12d80, i32* %r0.global-to-local, align 4
  %v2_12d84 = icmp ugt i32 %v1_12d80, 8
  %v7_12d84 = icmp eq i32 %v1_12d80, 9
  %v2_12d88 = xor i1 %v2_12d84, true
  %v3_12d88 = or i1 %v7_12d84, %v2_12d88
  br i1 %v3_12d88, label %bb191, label %bb193

bb191:                                            ; preds = %dec_label_pc_12d7c
  %v7_12d88 = icmp ugt i32 %v0_13094, 429496727
  %v13_12d88 = icmp eq i32 %v0_13094, 429496728
  br label %bb193

bb193:                                            ; preds = %dec_label_pc_12d7c, %bb191
  %v1_12d8c = phi i1 [ false, %dec_label_pc_12d7c ], [ %v13_12d88, %bb191 ]
  %v0_12d8c = phi i1 [ %v2_12d84, %dec_label_pc_12d7c ], [ %v7_12d88, %bb191 ]
  %v2_12d8c = xor i1 %v1_12d8c, true
  %v3_12d8c = and i1 %v0_12d8c, %v2_12d8c
  br i1 %v3_12d8c, label %dec_label_pc_13094, label %dec_label_pc_12d90

dec_label_pc_12d90:                               ; preds = %bb193
  %v0_12d90 = load i32, i32* @sl, align 4
  %v1_12d90 = add i32 %v0_12d90, 4
  %v2_12d90 = inttoptr i32 %v1_12d90 to i32*
  %v3_12d90 = load i32, i32* %v2_12d90, align 4
  store i32 %v3_12d90, i32* %r2.global-to-local, align 4
  %v1_12d94 = add i32 %v0_12d90, 104
  %v2_12d94 = inttoptr i32 %v1_12d94 to i32*
  %v3_12d94 = load i32, i32* %v2_12d94, align 4
  %v3_12d98 = icmp ult i32 %v3_12d90, %v3_12d94
  br i1 %v3_12d98, label %.thread40.dec_label_pc_12d64_crit_edge, label %dec_label_pc_12da8

.thread40.dec_label_pc_12d64_crit_edge:           ; preds = %dec_label_pc_12d90
  %v2_12d9c = inttoptr i32 %v3_12d90 to i8*
  %v3_12d9c = load i8, i8* %v2_12d9c, align 1
  %v4_12d9c = zext i8 %v3_12d9c to i32
  store i32 %v4_12d9c, i32* %r0.global-to-local, align 4
  %v6_12d9c = add i32 %v3_12d90, 1
  store i32 %v6_12d9c, i32* %r2.global-to-local, align 4
  store i32 %v6_12d9c, i32* %v2_12d90, align 4
  %v0_12d78.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d64

dec_label_pc_12da8:                               ; preds = %dec_label_pc_12d90
  store i32 %v0_12d90, i32* %r0.global-to-local, align 4
  %v1_12d60 = call i32 @function_13358(i32 %v0_12d90)
  store i32 %v1_12d60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d64

dec_label_pc_12dac:                               ; preds = %bb184
  %v0_12dac = load i32, i32* @sl, align 4
  %v1_12dac = add i32 %v0_12dac, 104
  %v2_12dac = inttoptr i32 %v1_12dac to i32*
  %v3_12dac = load i32, i32* %v2_12dac, align 4
  %v2_12db0 = icmp eq i32 %v3_12dac, 0
  br i1 %v2_12db0, label %.thread43, label %bb194

bb194:                                            ; preds = %dec_label_pc_12dac
  %v2_12db4 = add i32 %v0_12dac, 4
  %v3_12db4 = inttoptr i32 %v2_12db4 to i32*
  %v4_12db4 = load i32, i32* %v3_12db4, align 4
  %v2_12db8 = add i32 %v4_12db4, -1
  store i32 %v2_12db8, i32* %v3_12db4, align 4
  %v0_12dc8.pre = load i32, i32* @sl, align 4
  %v1_12dcc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_12dac, %bb194
  %v1_12dcc = phi i32 [ %v0_12c0c, %dec_label_pc_12dac ], [ %v1_12dcc.pre, %bb194 ]
  %v0_12dc8 = phi i32 [ %v0_12dac, %dec_label_pc_12dac ], [ %v0_12dc8.pre, %bb194 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v0_12dc8, i32* %r0.global-to-local, align 4
  %v7_12dcc = call i32 @function_132f4(i32 %v0_12dc8, i32 %v1_12dcc, i32 0, i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v7_12dcc, i32* %r0.global-to-local, align 4
  %v0_12dd0 = call i32 @function_fb60()
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_0, align 4
  %v2_12de8 = inttoptr i32 %v0_12dd0 to i32*
  store i32 22, i32* %v2_12de8, align 4
  %v2_12df0 = load i32, i32* %stack_var_0, align 4
  store i32 %v2_12df0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_12df4:                               ; preds = %dec_label_pc_132c4, %dec_label_pc_13298, %dec_label_pc_13264, %dec_label_pc_131a4, %dec_label_pc_12f94, %dec_label_pc_12f30, %dec_label_pc_12e00, %.thread43
  %v1_12dfc = phi i32 [ 0, %dec_label_pc_132c4 ], [ 0, %dec_label_pc_13298 ], [ %v1_12dfc.pre, %dec_label_pc_13264 ], [ %v2_131d4, %dec_label_pc_131a4 ], [ %v2_12fa8, %dec_label_pc_12f94 ], [ %v2_12f40, %dec_label_pc_12f30 ], [ %v0_12e1c, %dec_label_pc_12e00 ], [ %v2_12df0, %.thread43 ]
  store i32 %v6_12b34, i32* @r5, align 4
  store i32 %v12_12b34, i32* @r7, align 4
  store i32 %v15_12b34, i32* @r8, align 4
  store i32 %v18_12b34, i32* @sb, align 4
  store i32 %v21_12b34, i32* @sl, align 4
  store i32 %v24_12b34, i32* @fp, align 4
  ret i32 %v1_12dfc

dec_label_pc_12e00:                               ; preds = %dec_label_pc_12b34
  %v0_12e00 = call i32 @function_fb60()
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_0, align 4
  %v2_12e18 = inttoptr i32 %v0_12e00 to i32*
  store i32 22, i32* %v2_12e18, align 4
  %v0_12e1c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12e1c, i32* %r0.global-to-local, align 4
  %v0_12e20 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_12e20, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_12e34:                               ; preds = %bb198
  %v9_12eac = icmp eq i32 %v0_12eac, %v6_12e98
  br i1 %v9_12eac, label %dec_label_pc_12fc4, label %dec_label_pc_12e38

dec_label_pc_12e38:                               ; preds = %dec_label_pc_12fc4, %dec_label_pc_12e34
  %v0_12e38 = load i32, i32* @sl, align 4
  %v1_12e38 = add i32 %v0_12e38, 4
  %v2_12e38 = inttoptr i32 %v1_12e38 to i32*
  %v3_12e38 = load i32, i32* %v2_12e38, align 4
  store i32 %v3_12e38, i32* %r2.global-to-local, align 4
  %v1_12e3c = add i32 %v0_12e38, 104
  %v2_12e3c = inttoptr i32 %v1_12e3c to i32*
  %v3_12e3c = load i32, i32* %v2_12e3c, align 4
  %v3_12e40 = icmp ult i32 %v3_12e38, %v3_12e3c
  br i1 %v3_12e40, label %.thread44, label %dec_label_pc_12f84

.thread44:                                        ; preds = %dec_label_pc_12e38
  %v2_12e44 = inttoptr i32 %v3_12e38 to i8*
  %v3_12e44 = load i8, i8* %v2_12e44, align 1
  %v4_12e44 = zext i8 %v3_12e44 to i32
  store i32 %v4_12e44, i32* %r0.global-to-local, align 4
  %v6_12e44 = add i32 %v3_12e38, 1
  store i32 %v6_12e44, i32* %r2.global-to-local, align 4
  store i32 %v6_12e44, i32* %v2_12e38, align 4
  br label %dec_label_pc_12e50

dec_label_pc_12e50:                               ; preds = %.thread44, %dec_label_pc_12f84
  %v0_12e50 = load i32, i32* @r7, align 4
  %v1_12e50 = load i32, i32* @r5, align 4
  %v6_12e50 = shl i32 %v0_12e50, %v1_12e50
  %v0_12e54 = load i32, i32* @r8, align 4
  %v1_12e54 = icmp slt i32 %v0_12e54, 0
  %v1_12e58 = load i32, i32* @r6, align 4
  %v2_12e58 = load i32, i32* @sb, align 4
  %v7_12e58 = lshr i32 %v1_12e58, %v2_12e58
  %v8_12e58 = or i32 %v7_12e58, %v6_12e50
  %v6_12e5c = shl i32 %v1_12e58, %v1_12e50
  br i1 %v1_12e54, label %bb196, label %bb195

bb195:                                            ; preds = %dec_label_pc_12e50
  %v9_12e60 = shl i32 %v1_12e58, %v0_12e54
  br label %bb196

bb196:                                            ; preds = %dec_label_pc_12e50, %bb195
  %storemerge234 = phi i32 [ %v9_12e60, %bb195 ], [ %v8_12e58, %dec_label_pc_12e50 ]
  %v1_12e7c = phi i32 [ %v9_12e60, %bb195 ], [ %v8_12e58, %dec_label_pc_12e50 ]
  store i32 %storemerge234, i32* @r4, align 4
  %v0_12e68 = load i32, i32* %r0.global-to-local, align 4
  %v2_12e68 = add i32 %v0_12e68, ptrtoint (i32* @global_var_16771.437 to i32)
  store i32 %v2_12e68, i32* %r2.global-to-local, align 4
  %v0_12e6c = load i32, i32* @fp, align 4
  %v1_12e6c = urem i32 %v0_12e6c, 256
  store i32 %v1_12e6c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_12e74 = add i32 %v0_12e68, add (i32 ptrtoint (i32* @global_var_16771.437 to i32), i32 1)
  %v2_12e74 = inttoptr i32 %v1_12e74 to i8*
  %v3_12e74 = load i8, i8* %v2_12e74, align 1
  %v4_12e74 = zext i8 %v3_12e74 to i32
  store i32 %v4_12e74, i32* @fp, align 4
  %v2_12e78 = or i32 %v1_12e6c, %v6_12e5c
  br label %dec_label_pc_12e80

dec_label_pc_12e80:                               ; preds = %bb186, %bb187, %bb196
  %storemerge = phi i32 [ %v2_12e78, %bb196 ], [ %v0_12e28, %bb186 ], [ %v0_12e28, %bb187 ]
  %v0_12ea4 = phi i32 [ %v1_12e50, %bb196 ], [ %v0_12e88122, %bb186 ], [ %v0_12e88122, %bb187 ]
  %v0_12eb8 = phi i32 [ %v4_12e74, %bb196 ], [ %v4_12c88, %bb186 ], [ %v4_12c88, %bb187 ]
  %v0_12eac = phi i32 [ %v1_12e7c, %bb196 ], [ 0, %bb186 ], [ 0, %bb187 ]
  store i32 %storemerge, i32* @r6, align 4
  store i32 %v0_12eac, i32* @r7, align 4
  store i32 %v1_12c3c, i32* %r2.global-to-local, align 4
  %v3_12e84 = icmp ult i32 %v0_12eb8, %v1_12c3c
  %v1_12e88 = sub i32 32, %v0_12ea4
  store i32 %v1_12e88, i32* @sb, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  br i1 %v3_12e84, label %dec_label_pc_12e98, label %dec_label_pc_12eec

dec_label_pc_12e98:                               ; preds = %dec_label_pc_12e80
  %v6_12e98 = lshr i32 -1, %v0_12ea4
  %v7_12ea0 = shl i32 -1, %v1_12e88
  %v8_12ea0 = or i32 %v7_12ea0, %v6_12e98
  store i32 %v8_12ea0, i32* %r2.global-to-local, align 4
  %v1_12ea4 = add i32 %v0_12ea4, -32
  store i32 %v1_12ea4, i32* @r8, align 4
  %v6_12ea4 = icmp slt i32 %v1_12ea4, 0
  br i1 %v6_12ea4, label %bb198, label %bb197

bb197:                                            ; preds = %dec_label_pc_12e98
  %v7_12ea8 = lshr i32 -1, %v1_12ea4
  store i32 %v7_12ea8, i32* %r2.global-to-local, align 4
  br label %bb198

bb198:                                            ; preds = %dec_label_pc_12e98, %bb197
  %v1_12fc4 = phi i32 [ %v8_12ea0, %dec_label_pc_12e98 ], [ %v7_12ea8, %bb197 ]
  %tmp239 = icmp ugt i32 %v0_12eac, %v6_12e98
  br i1 %tmp239, label %dec_label_pc_12eb4, label %dec_label_pc_12e34

dec_label_pc_12eb4:                               ; preds = %bb198
  store i32 %v1_12c3c, i32* @r4, align 4
  br label %dec_label_pc_12f68

dec_label_pc_12ec0:                               ; preds = %dec_label_pc_12f5c
  %v0_12ec0 = call i32 @function_fb60()
  store i32 %v0_12ec0, i32* %r0.global-to-local, align 4
  %v3_12ec4 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_12ec4, i32* %r1.global-to-local, align 4
  %v1_12ec8 = urem i32 %v3_12ec4, 2
  store i32 34, i32* %r2.global-to-local, align 4
  %v2_12ed0 = icmp eq i32 %v1_12ec8, 0
  %v2_12ed4 = inttoptr i32 %v0_12ec0 to i32*
  store i32 34, i32* %v2_12ed4, align 4
  br i1 %v2_12ed0, label %dec_label_pc_13198, label %dec_label_pc_12edc

dec_label_pc_12edc:                               ; preds = %dec_label_pc_12ec0
  %v0_12edc = load i32, i32* %r2.global-to-local, align 4
  %v1_12edc = add i32 %v0_12edc, -34
  store i32 %v1_12edc, i32* %r2.global-to-local, align 4
  %v2_12ee4 = load i32, i32* %stack_var_0, align 4
  store i32 %v2_12ee4, i32* @r6, align 4
  store i32 %arg5, i32* @r7, align 4
  br label %dec_label_pc_12eec

dec_label_pc_12eec:                               ; preds = %dec_label_pc_12e80, %dec_label_pc_12fdc, %dec_label_pc_12fd0, %dec_label_pc_130d4, %dec_label_pc_130cc, %dec_label_pc_13198, %dec_label_pc_12edc
  %v1_12f04232 = phi i32 [ %arg5, %dec_label_pc_13198 ], [ %arg5, %dec_label_pc_12edc ], [ %v0_13108, %dec_label_pc_130cc ], [ 0, %dec_label_pc_12fd0 ], [ %v0_13108, %dec_label_pc_130d4 ], [ %v0_12eac, %dec_label_pc_12e80 ], [ %v5_12fec, %dec_label_pc_12fdc ]
  %stack_var_-44.2 = phi i32 [ %stack_var_-44.1, %dec_label_pc_13198 ], [ %v1_12edc, %dec_label_pc_12edc ], [ %stack_var_-44.1, %dec_label_pc_130cc ], [ %stack_var_-44.1, %dec_label_pc_12fd0 ], [ %stack_var_-44.1, %dec_label_pc_130d4 ], [ %stack_var_-44.1, %dec_label_pc_12e80 ], [ %stack_var_-44.1, %dec_label_pc_12fdc ]
  %v0_12eec = load i32, i32* @sl, align 4
  %v1_12eec = add i32 %v0_12eec, 104
  %v2_12eec = inttoptr i32 %v1_12eec to i32*
  %v3_12eec = load i32, i32* %v2_12eec, align 4
  %v2_12ef0 = icmp eq i32 %v3_12eec, 0
  br i1 %v2_12ef0, label %.thread47, label %bb199

bb199:                                            ; preds = %dec_label_pc_12eec
  %v2_12ef4 = add i32 %v0_12eec, 4
  %v3_12ef4 = inttoptr i32 %v2_12ef4 to i32*
  %v4_12ef4 = load i32, i32* %v3_12ef4, align 4
  %v2_12ef8 = add i32 %v4_12ef4, -1
  store i32 %v2_12ef8, i32* %v3_12ef4, align 4
  %v1_12f04.pre = load i32, i32* @r7, align 4
  br label %.thread47

.thread47:                                        ; preds = %dec_label_pc_12eec, %bb199
  %v1_12f04 = phi i32 [ %v1_12f04232, %dec_label_pc_12eec ], [ %v1_12f04.pre, %bb199 ]
  %v3_12f04 = icmp ule i32 %v1_12f04, %arg5
  %v9_12f04 = icmp eq i32 %v1_12f04, %arg5
  %v2_12f08 = xor i1 %v9_12f04, true
  %v3_12f08 = and i1 %v3_12f04, %v2_12f08
  br i1 %v3_12f08, label %dec_label_pc_12f94, label %dec_label_pc_12f0c

dec_label_pc_12f0c:                               ; preds = %.thread47
  %v3_131dc = load i32, i32* %stack_var_0, align 4
  br i1 %v9_12f04, label %dec_label_pc_131dc, label %dec_label_pc_12f10

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12f0c, %dec_label_pc_131dc
  store i32 %v3_131dc, i32* %r1.global-to-local, align 4
  %v1_12f18 = urem i32 %v3_131dc, 2
  %v2_12f1c = or i32 %v1_12f18, %stack_var_-44.2
  store i32 %v2_12f1c, i32* %r2.global-to-local, align 4
  %v4_12f1c = icmp eq i32 %v2_12f1c, 0
  br i1 %v4_12f1c, label %dec_label_pc_131a4, label %dec_label_pc_12f24

dec_label_pc_12f24:                               ; preds = %dec_label_pc_12f10
  store i32 %arg5, i32* %r2.global-to-local, align 4
  %tmp240 = icmp ugt i32 %v1_12f04, %arg5
  br i1 %tmp240, label %dec_label_pc_12f30, label %dec_label_pc_12f90

dec_label_pc_12f30:                               ; preds = %dec_label_pc_131ec, %dec_label_pc_12f24
  %v0_12f30 = call i32 @function_fb60()
  %v2_12f38 = inttoptr i32 %v0_12f30 to i32*
  store i32 34, i32* %v2_12f38, align 4
  %v2_12f40 = load i32, i32* %stack_var_0, align 4
  store i32 %v2_12f40, i32* %r0.global-to-local, align 4
  store i32 %arg5, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_12f50:                               ; preds = %.thread48.dec_label_pc_12f50_crit_edge, %dec_label_pc_12f80
  %v0_12f54 = phi i32 [ %v0_12f54.pre, %.thread48.dec_label_pc_12f50_crit_edge ], [ %v1_12f4c, %dec_label_pc_12f80 ]
  %v1_12f58 = add i32 %v0_12f54, add (i32 ptrtoint (i32* @global_var_16771.437 to i32), i32 1)
  %v2_12f58 = inttoptr i32 %v1_12f58 to i8*
  %v3_12f58 = load i8, i8* %v2_12f58, align 1
  %v4_12f58 = zext i8 %v3_12f58 to i32
  br label %dec_label_pc_12f5c

dec_label_pc_12f5c:                               ; preds = %dec_label_pc_13078, %dec_label_pc_1306c.dec_label_pc_12f5c.loopexit207_crit_edge, %dec_label_pc_12fc4, %.thread145, %dec_label_pc_12f50
  %v0_12f60 = phi i32 [ %v4_12f58, %dec_label_pc_12f50 ], [ %v6_130d8, %.thread145 ], [ %v0_12eb8, %dec_label_pc_12fc4 ], [ %v0_12f60.pre.pre, %dec_label_pc_1306c.dec_label_pc_12f5c.loopexit207_crit_edge ], [ %v0_1302c, %dec_label_pc_13078 ]
  %stack_var_-60.2.off0 = phi i32 [ %stack_var_-60.3.off0, %dec_label_pc_12f50 ], [ 10, %.thread145 ], [ %v1_12c3c, %dec_label_pc_12fc4 ], [ %v1_12c3c, %dec_label_pc_1306c.dec_label_pc_12f5c.loopexit207_crit_edge ], [ %v1_12c3c, %dec_label_pc_13078 ]
  store i32 %stack_var_-60.2.off0, i32* @r4, align 4
  %v3_12f60 = icmp ult i32 %v0_12f60, %stack_var_-60.2.off0
  br i1 %v3_12f60, label %dec_label_pc_12f68, label %dec_label_pc_12ec0

dec_label_pc_12f68:                               ; preds = %dec_label_pc_12f5c, %dec_label_pc_12eb4
  %stack_var_-60.3.off0 = phi i32 [ %stack_var_-60.2.off0, %dec_label_pc_12f5c ], [ %v1_12c3c, %dec_label_pc_12eb4 ]
  %v0_12f68 = load i32, i32* @sl, align 4
  %v1_12f68 = add i32 %v0_12f68, 4
  %v2_12f68 = inttoptr i32 %v1_12f68 to i32*
  %v3_12f68 = load i32, i32* %v2_12f68, align 4
  store i32 %v3_12f68, i32* %r2.global-to-local, align 4
  %v1_12f6c = add i32 %v0_12f68, 104
  %v2_12f6c = inttoptr i32 %v1_12f6c to i32*
  %v3_12f6c = load i32, i32* %v2_12f6c, align 4
  %v3_12f70 = icmp ult i32 %v3_12f68, %v3_12f6c
  br i1 %v3_12f70, label %.thread48.dec_label_pc_12f50_crit_edge, label %dec_label_pc_12f80

.thread48.dec_label_pc_12f50_crit_edge:           ; preds = %dec_label_pc_12f68
  %v2_12f74 = inttoptr i32 %v3_12f68 to i8*
  %v3_12f74 = load i8, i8* %v2_12f74, align 1
  %v4_12f74 = zext i8 %v3_12f74 to i32
  store i32 %v4_12f74, i32* %r0.global-to-local, align 4
  %v6_12f74 = add i32 %v3_12f68, 1
  store i32 %v6_12f74, i32* %r2.global-to-local, align 4
  store i32 %v6_12f74, i32* %v2_12f68, align 4
  %v0_12f54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f50

dec_label_pc_12f80:                               ; preds = %dec_label_pc_12f68
  store i32 %v0_12f68, i32* %r0.global-to-local, align 4
  %v1_12f4c = call i32 @function_13358(i32 %v0_12f68)
  store i32 %v1_12f4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f50

dec_label_pc_12f84:                               ; preds = %dec_label_pc_12e38
  store i32 %v0_12e38, i32* %r0.global-to-local, align 4
  %v1_12f88 = call i32 @function_13358(i32 %v0_12e38)
  store i32 %v1_12f88, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12e50

dec_label_pc_12f90:                               ; preds = %dec_label_pc_12f24
  br i1 %v9_12f04, label %dec_label_pc_131ec, label %dec_label_pc_12f94

dec_label_pc_12f94:                               ; preds = %dec_label_pc_131ec, %dec_label_pc_131dc, %dec_label_pc_12f90, %.thread47
  %v3_12f9c = ashr i32 %stack_var_-44.2, 31
  %v1_12fa0 = load i32, i32* @r6, align 4
  %v2_12fa0 = xor i32 %v1_12fa0, %stack_var_-44.2
  %v2_12fa4 = xor i32 %v1_12f04, %v3_12f9c
  %v2_12fa8 = sub i32 %v2_12fa0, %stack_var_-44.2
  %v3_12fa8 = icmp uge i32 %v2_12fa0, %stack_var_-44.2
  %v3_12fac = icmp eq i1 %v3_12fa8, false
  %v4_12fac = sub i32 %v2_12fa4, %v3_12f9c
  %v6_12fac = sext i1 %v3_12fac to i32
  %v7_12fac = add i32 %v6_12fac, %v4_12fac
  store i32 %v7_12fac, i32* %r2.global-to-local, align 4
  store i32 %v2_12fa8, i32* %stack_var_0, align 4
  store i32 %v2_12fa8, i32* %r0.global-to-local, align 4
  store i32 %v7_12fac, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_12fc4:                               ; preds = %dec_label_pc_12e34
  %tmp241 = icmp ugt i32 %storemerge, %v1_12fc4
  br i1 %tmp241, label %dec_label_pc_12f5c, label %dec_label_pc_12e38

dec_label_pc_12fd0:                               ; preds = %bb189, %.dec_label_pc_12fd0_crit_edge
  store i32 %v0_12fd0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v3_12ff462 = icmp ult i32 %v0_12ff460, %v1_12c3c
  br i1 %v3_12ff462, label %dec_label_pc_13020, label %dec_label_pc_12eec

dec_label_pc_12fdc:                               ; preds = %.thread50.dec_label_pc_12fdc_crit_edge, %dec_label_pc_13060
  %v0_12fe0 = phi i32 [ %v0_12fe0.pre, %.thread50.dec_label_pc_12fdc_crit_edge ], [ %v1_13064, %dec_label_pc_13060 ]
  %v0_12fe4 = load i32, i32* @r4, align 4
  %v1_12fe4 = load i32, i32* @r8, align 4
  %v2_12fe4 = add i32 %v1_12fe4, %v0_12fe4
  store i32 %v2_12fe4, i32* @r6, align 4
  %v3_12fe4 = icmp ult i32 %v2_12fe4, %v0_12fe4
  %v1_12fe8 = add i32 %v0_12fe0, add (i32 ptrtoint (i32* @global_var_16771.437 to i32), i32 1)
  %v2_12fe8 = inttoptr i32 %v1_12fe8 to i8*
  %v3_12fe8 = load i8, i8* %v2_12fe8, align 1
  %v4_12fe8 = zext i8 %v3_12fe8 to i32
  store i32 %v4_12fe8, i32* @fp, align 4
  %v0_12fec = load i32, i32* @r5, align 4
  %v1_12fec = load i32, i32* @sb, align 4
  %v4_12fec = zext i1 %v3_12fe4 to i32
  %v3_12fec = add i32 %v0_12fec, %v4_12fec
  %v5_12fec = add i32 %v3_12fec, %v1_12fec
  store i32 %v5_12fec, i32* @r7, align 4
  %v3_12ff4 = icmp ult i32 %v4_12fe8, %v1_12c3c
  br i1 %v3_12ff4, label %dec_label_pc_13020, label %dec_label_pc_12eec

dec_label_pc_13020:                               ; preds = %dec_label_pc_12fdc, %dec_label_pc_12fd0
  store i32 %v1_12c3c, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r0, align 4
  store i32 -1, i32* @r1, align 4
  store i32 %v1_12c3c, i32* @r2, align 4
  store i32 0, i32* @r3, align 4
  %v5_13014 = call i32 @function_1436c(i32 -1, i32 -1, i32 %v1_12c3c, i32 0)
  store i32 %v5_13014, i32* %r0.global-to-local, align 4
  %v0_13018 = load i32, i32* @r7, align 4
  %v3_13018 = icmp eq i32 %v0_13018, -1
  %v0_1306c = load i32, i32* @r6, align 4
  br i1 %v3_13018, label %dec_label_pc_1306c, label %dec_label_pc_13044

dec_label_pc_13044:                               ; preds = %dec_label_pc_13020, %dec_label_pc_1306c
  %v1_13024 = zext i32 %v0_1306c to i64
  %v2_13024 = load i32, i32* @r4, align 4
  %v3_13024 = zext i32 %v2_13024 to i64
  %v4_13024 = mul nuw i64 %v3_13024, %v1_13024
  %v5_13024 = udiv i64 %v4_13024, 4294967296
  %v6_13024 = trunc i64 %v5_13024 to i32
  %v7_13024 = trunc i64 %v4_13024 to i32
  store i32 %v7_13024, i32* @r8, align 4
  %v3_13028 = mul i32 %v2_13024, %v0_13018
  %v4_13028 = add i32 %v6_13024, %v3_13028
  store i32 %v4_13028, i32* @sb, align 4
  %v0_1302c = load i32, i32* @fp, align 4
  %v1_1302c = urem i32 %v0_1302c, 256
  store i32 %v1_1302c, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  %v3_13038 = icmp eq i32 %v4_13028, -1
  %v0_1302c.not = or i32 %v0_1302c, -256
  %v1_1303c = xor i32 %v0_1302c.not, 255
  store i32 %v1_1303c, i32* %r2.global-to-local, align 4
  br i1 %v3_13038, label %dec_label_pc_13078, label %dec_label_pc_13048

dec_label_pc_13048:                               ; preds = %dec_label_pc_13078, %dec_label_pc_13044
  %v0_13048 = load i32, i32* @sl, align 4
  %v1_13048 = add i32 %v0_13048, 4
  %v2_13048 = inttoptr i32 %v1_13048 to i32*
  %v3_13048 = load i32, i32* %v2_13048, align 4
  store i32 %v3_13048, i32* %r2.global-to-local, align 4
  %v1_1304c = add i32 %v0_13048, 104
  %v2_1304c = inttoptr i32 %v1_1304c to i32*
  %v3_1304c = load i32, i32* %v2_1304c, align 4
  %v3_13050 = icmp ult i32 %v3_13048, %v3_1304c
  br i1 %v3_13050, label %.thread50.dec_label_pc_12fdc_crit_edge, label %dec_label_pc_13060

.thread50.dec_label_pc_12fdc_crit_edge:           ; preds = %dec_label_pc_13048
  %v2_13054 = inttoptr i32 %v3_13048 to i8*
  %v3_13054 = load i8, i8* %v2_13054, align 1
  %v4_13054 = zext i8 %v3_13054 to i32
  store i32 %v4_13054, i32* %r0.global-to-local, align 4
  %v6_13054 = add i32 %v3_13048, 1
  store i32 %v6_13054, i32* %r2.global-to-local, align 4
  store i32 %v6_13054, i32* %v2_13048, align 4
  %v0_12fe0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12fdc

dec_label_pc_13060:                               ; preds = %dec_label_pc_13048
  store i32 %v0_13048, i32* %r0.global-to-local, align 4
  %v1_13064 = call i32 @function_13358(i32 %v0_13048)
  store i32 %v1_13064, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12fdc

dec_label_pc_1306c:                               ; preds = %dec_label_pc_13020
  %tmp242 = icmp ugt i32 %v0_1306c, %v5_13014
  br i1 %tmp242, label %dec_label_pc_1306c.dec_label_pc_12f5c.loopexit207_crit_edge, label %dec_label_pc_13044

dec_label_pc_1306c.dec_label_pc_12f5c.loopexit207_crit_edge: ; preds = %dec_label_pc_1306c
  %v0_12f60.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_12f5c

dec_label_pc_13078:                               ; preds = %dec_label_pc_13044
  %tmp243 = icmp ugt i32 %v7_13024, %v1_1303c
  br i1 %tmp243, label %dec_label_pc_12f5c, label %dec_label_pc_13048

dec_label_pc_13084:                               ; preds = %dec_label_pc_12bb4
  store i32 %v0_12bb4, i32* %r0.global-to-local, align 4
  %v1_13088 = call i32 @function_13358(i32 %v0_12bb4)
  store i32 %v1_13088, i32* %r0.global-to-local, align 4
  store i32 %v1_13088, i32* @r5, align 4
  br label %dec_label_pc_12bcc

dec_label_pc_13094:                               ; preds = %bb193
  store i32 %v0_13094, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_1309c

dec_label_pc_1309c:                               ; preds = %dec_label_pc_13164, %dec_label_pc_13094
  %v0_130d8 = phi i32 [ %v0_13174, %dec_label_pc_13164 ], [ %v0_12d80, %dec_label_pc_13094 ]
  %v0_13104 = phi i32 [ %v2_1316c, %dec_label_pc_13164 ], [ %v0_13094, %dec_label_pc_13094 ]
  %v0_13108 = phi i32 [ %v5_13170, %dec_label_pc_13164 ], [ 0, %dec_label_pc_13094 ]
  %v0_130cc = phi i32 [ %v1_13174, %dec_label_pc_13164 ], [ %v1_12d80, %dec_label_pc_13094 ]
  %v2_130a0 = icmp ugt i32 %v0_130cc, 8
  %v7_130a0 = icmp eq i32 %v0_130cc, 9
  %v2_130a4 = xor i1 %v7_130a0, true
  %v3_130a4 = and i1 %v2_130a0, %v2_130a4
  br i1 %v3_130a4, label %bb200, label %bb201

bb200:                                            ; preds = %dec_label_pc_1309c
  store i32 0, i32* @r2, align 4
  br label %bb201

bb201:                                            ; preds = %dec_label_pc_1309c, %bb200
  %v2_130a8 = xor i1 %v2_130a0, true
  %v3_130a8 = or i1 %v7_130a0, %v2_130a8
  br i1 %v3_130a8, label %bb202, label %bb203

bb202:                                            ; preds = %bb201
  store i32 1, i32* @r2, align 4
  br label %bb203

bb203:                                            ; preds = %bb201, %bb202
  %v3_130ac = icmp ugt i32 %v0_13108, 429496728
  %v9_130ac = icmp eq i32 %v0_13108, 429496729
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_130b4 = xor i1 %v9_130ac, true
  %v3_130b4 = and i1 %v3_130ac, %v2_130b4
  br i1 %v3_130b4, label %dec_label_pc_130c0, label %dec_label_pc_130b8

dec_label_pc_130b8:                               ; preds = %bb203
  br i1 %v9_130ac, label %dec_label_pc_130ec, label %dec_label_pc_130bc

dec_label_pc_130bc:                               ; preds = %dec_label_pc_130ec, %dec_label_pc_130b8
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_130c0

dec_label_pc_130c0:                               ; preds = %dec_label_pc_130ec, %bb203, %dec_label_pc_130bc
  %v1_130c0 = phi i32 [ 0, %dec_label_pc_130ec ], [ 0, %bb203 ], [ 1, %dec_label_pc_130bc ]
  %v0_130c0 = load i32, i32* @r2, align 4
  %v2_130c0 = and i32 %v0_130c0, %v1_130c0
  %v2_130c4 = icmp eq i32 %v2_130c0, 0
  br i1 %v2_130c4, label %dec_label_pc_130cc, label %dec_label_pc_13104

dec_label_pc_130cc:                               ; preds = %dec_label_pc_1318c, %dec_label_pc_130c0, %dec_label_pc_13104
  br i1 %v3_130a4, label %dec_label_pc_12eec, label %dec_label_pc_130d4

dec_label_pc_130d4:                               ; preds = %dec_label_pc_130cc
  store i32 ptrtoint (i32* @global_var_16772.435 to i32), i32* %r0.global-to-local, align 4
  %v2_130d8 = add i32 %v0_130d8, ptrtoint (i32* @global_var_16772.435 to i32)
  %v3_130d8 = inttoptr i32 %v2_130d8 to i8*
  %v4_130d8 = load i8, i8* %v3_130d8, align 1
  %tmp244 = icmp ult i8 %v4_130d8, 10
  br i1 %tmp244, label %.thread145, label %dec_label_pc_12eec

.thread145:                                       ; preds = %dec_label_pc_130d4
  %v6_130d8 = zext i8 %v4_130d8 to i32
  br label %dec_label_pc_12f5c

dec_label_pc_130ec:                               ; preds = %dec_label_pc_130b8
  %tmp245 = icmp ugt i32 %v0_13104, or (i32 shl (i32 ptrtoint (i32* @global_var_9999.442 to i32), i32 16), i32 ptrtoint (i32* @global_var_9999.442 to i32))
  br i1 %tmp245, label %dec_label_pc_130c0, label %dec_label_pc_130bc

dec_label_pc_13104:                               ; preds = %dec_label_pc_130c0
  %v2_13104 = mul i32 %v0_13104, 2
  store i32 %v2_13104, i32* %r1.global-to-local, align 4
  %v3_13104 = icmp ult i32 %v2_13104, %v0_13104
  %v3_13108 = mul i32 %v0_13108, 2
  %v4_13108 = zext i1 %v3_13104 to i32
  %v5_13108 = or i32 %v4_13108, %v3_13108
  store i32 %v5_13108, i32* %r2.global-to-local, align 4
  %v3_13110 = mul i32 %v5_13108, 4
  %tmp205 = udiv i32 %v0_13104, 536870912
  %v4_13114 = urem i32 %tmp205, 4
  %v5_13114 = or i32 %v3_13110, %v4_13114
  %v2_13120 = mul i32 %v0_13104, 10
  store i32 %v2_13120, i32* @r8, align 4
  %v1_13128 = and i32 %v0_130cc, 1073741824
  %v2_13128 = icmp ne i32 %v1_13128, 0
  %v3_13128 = ashr i32 %v0_130cc, 31
  %v4_13134 = zext i1 %v2_13128 to i32
  %v3_13134 = add i32 %v4_13134, %v5_13108
  %v5_13134 = add i32 %v3_13134, %v5_13114
  store i32 %v5_13134, i32* @sb, align 4
  %tmp246 = lshr i32 %v0_130cc, 31
  %v1_13138 = add nsw i32 %tmp246, -1
  store i32 %v1_13138, i32* @r4, align 4
  %v3_1313c = icmp uge i32 %v5_13134, %v1_13138
  %v9_1313c = icmp eq i32 %v5_13134, %v1_13138
  %v1_13140 = sub i32 -1, %v0_130cc
  %v2_13144 = xor i1 %v9_1313c, true
  %v3_13144 = and i1 %v3_1313c, %v2_13144
  br i1 %v3_13144, label %dec_label_pc_130cc, label %dec_label_pc_13148

dec_label_pc_13148:                               ; preds = %dec_label_pc_13104
  br i1 %v9_1313c, label %dec_label_pc_1318c, label %dec_label_pc_1314c

dec_label_pc_1314c:                               ; preds = %dec_label_pc_1318c, %dec_label_pc_13148
  %v0_1314c = load i32, i32* @sl, align 4
  %v1_1314c = add i32 %v0_1314c, 4
  %v2_1314c = inttoptr i32 %v1_1314c to i32*
  %v3_1314c = load i32, i32* %v2_1314c, align 4
  store i32 %v3_1314c, i32* %r2.global-to-local, align 4
  %v1_13150 = add i32 %v0_1314c, 104
  %v2_13150 = inttoptr i32 %v1_13150 to i32*
  %v3_13150 = load i32, i32* %v2_13150, align 4
  %v3_13154 = icmp ult i32 %v3_1314c, %v3_13150
  br i1 %v3_13154, label %.thread52.dec_label_pc_13164_crit_edge, label %dec_label_pc_1317c

.thread52.dec_label_pc_13164_crit_edge:           ; preds = %dec_label_pc_1314c
  %v2_13158 = inttoptr i32 %v3_1314c to i8*
  %v3_13158 = load i8, i8* %v2_13158, align 1
  %v4_13158 = zext i8 %v3_13158 to i32
  store i32 %v4_13158, i32* @r5, align 4
  %v6_13158 = add i32 %v3_1314c, 1
  store i32 %v6_13158, i32* %r2.global-to-local, align 4
  store i32 %v6_13158, i32* %v2_1314c, align 4
  %v0_13174.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13164

dec_label_pc_13164:                               ; preds = %.thread52.dec_label_pc_13164_crit_edge, %dec_label_pc_1317c
  %v0_13174 = phi i32 [ %v0_13174.pre, %.thread52.dec_label_pc_13164_crit_edge ], [ %v1_13180, %dec_label_pc_1317c ]
  store i32 %v0_130cc, i32* %r1.global-to-local, align 4
  store i32 %v3_13128, i32* @r2, align 4
  %v0_1316c = load i32, i32* @r8, align 4
  %v2_1316c = add i32 %v0_1316c, %v0_130cc
  store i32 %v2_1316c, i32* @r6, align 4
  %v3_1316c = icmp ult i32 %v2_1316c, %v0_1316c
  %v0_13170 = load i32, i32* @sb, align 4
  %v3_13170 = add i32 %v0_13170, %v3_13128
  %v4_13170 = zext i1 %v3_1316c to i32
  %v5_13170 = add i32 %v4_13170, %v3_13170
  store i32 %v5_13170, i32* @r7, align 4
  %v1_13174 = add i32 %v0_13174, -48
  store i32 %v1_13174, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1309c

dec_label_pc_1317c:                               ; preds = %dec_label_pc_1314c
  store i32 %v0_1314c, i32* %r0.global-to-local, align 4
  %v1_13180 = call i32 @function_13358(i32 %v0_1314c)
  store i32 %v1_13180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13164

dec_label_pc_1318c:                               ; preds = %dec_label_pc_13148
  %tmp247 = icmp ugt i32 %v2_13120, %v1_13140
  br i1 %tmp247, label %dec_label_pc_130cc, label %dec_label_pc_1314c

dec_label_pc_13198:                               ; preds = %dec_label_pc_12ec0
  %v2_1319c = load i32, i32* %stack_var_0, align 4
  store i32 %v2_1319c, i32* @r6, align 4
  store i32 %arg5, i32* @r7, align 4
  br label %dec_label_pc_12eec

dec_label_pc_131a4:                               ; preds = %dec_label_pc_12f10
  %v0_131a4 = call i32 @function_fb60()
  %v2_131ac = load i32, i32* %stack_var_0, align 4
  %v2_131b4 = add i32 %v2_131ac, -1
  %v3_131b4 = icmp ne i32 %v2_131ac, 0
  %v3_131bc = add i32 %arg5, -1
  %v4_131bc = zext i1 %v3_131b4 to i32
  %v5_131bc = add i32 %v3_131bc, %v4_131bc
  store i32 %v2_131b4, i32* %stack_var_0, align 4
  store i32 34, i32* %r2.global-to-local, align 4
  %v2_131cc = inttoptr i32 %v0_131a4 to i32*
  store i32 34, i32* %v2_131cc, align 4
  %v2_131d4 = load i32, i32* %stack_var_0, align 4
  store i32 %v2_131d4, i32* %r0.global-to-local, align 4
  store i32 %v5_131bc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_131dc:                               ; preds = %dec_label_pc_12f0c
  %v1_131e0 = load i32, i32* @r6, align 4
  %tmp248 = icmp ugt i32 %v3_131dc, %v1_131e0
  br i1 %tmp248, label %dec_label_pc_12f94, label %dec_label_pc_12f10

dec_label_pc_131ec:                               ; preds = %dec_label_pc_12f90
  %v0_131f0 = load i32, i32* @r6, align 4
  %tmp249 = icmp ugt i32 %v0_131f0, %v3_131dc
  br i1 %tmp249, label %dec_label_pc_12f30, label %dec_label_pc_12f94

dec_label_pc_131fc:                               ; preds = %dec_label_pc_12cbc
  store i32 %v0_12cbc, i32* %r0.global-to-local, align 4
  %v1_13200 = call i32 @function_13358(i32 %v0_12cbc)
  store i32 %v1_13200, i32* %r0.global-to-local, align 4
  store i32 %v1_13200, i32* @r5, align 4
  br label %dec_label_pc_12cd4

dec_label_pc_1320c:                               ; preds = %dec_label_pc_12cd4
  %v0_1320c = load i32, i32* @sl, align 4
  %v1_1320c = add i32 %v0_1320c, 4
  %v2_1320c = inttoptr i32 %v1_1320c to i32*
  %v3_1320c = load i32, i32* %v2_1320c, align 4
  store i32 %v3_1320c, i32* %r2.global-to-local, align 4
  %v1_13210 = add i32 %v0_1320c, 104
  %v2_13210 = inttoptr i32 %v1_13210 to i32*
  %v3_13210 = load i32, i32* %v2_13210, align 4
  %v3_13214 = icmp ult i32 %v3_1320c, %v3_13210
  br i1 %v3_13214, label %.thread54.dec_label_pc_13224_crit_edge, label %dec_label_pc_1328c

.thread54.dec_label_pc_13224_crit_edge:           ; preds = %dec_label_pc_1320c
  %v2_13218 = inttoptr i32 %v3_1320c to i8*
  %v3_13218 = load i8, i8* %v2_13218, align 1
  %v4_13218 = zext i8 %v3_13218 to i32
  store i32 %v4_13218, i32* %r0.global-to-local, align 4
  %v6_13218 = add i32 %v3_1320c, 1
  store i32 %v6_13218, i32* %r2.global-to-local, align 4
  store i32 %v6_13218, i32* %v2_1320c, align 4
  %v0_13228.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13224

dec_label_pc_13224:                               ; preds = %.thread54.dec_label_pc_13224_crit_edge, %dec_label_pc_1328c
  %v0_13228 = phi i32 [ %v0_13228.pre, %.thread54.dec_label_pc_13224_crit_edge ], [ %v1_13290, %dec_label_pc_1328c ]
  %v2_13228 = add i32 %v0_13228, ptrtoint (i32* @global_var_16772.435 to i32)
  %v3_13228 = inttoptr i32 %v2_13228 to i8*
  %v4_13228 = load i8, i8* %v3_13228, align 1
  %v6_13228 = zext i8 %v4_13228 to i32
  store i32 %v6_13228, i32* @fp, align 4
  %tmp250 = icmp ult i8 %v4_13228, 16
  br i1 %tmp250, label %.thread156, label %dec_label_pc_13240

.thread156:                                       ; preds = %dec_label_pc_13224
  store i32 16, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12c3c

dec_label_pc_13240:                               ; preds = %dec_label_pc_13224
  %v0_13240 = load i32, i32* @sl, align 4
  %v1_13240 = add i32 %v0_13240, 104
  %v2_13240 = inttoptr i32 %v1_13240 to i32*
  %v3_13240 = load i32, i32* %v2_13240, align 4
  store i32 %v3_13240, i32* %r2.global-to-local, align 4
  %v2_13244 = icmp eq i32 %v3_13240, 0
  br i1 %v2_13244, label %.thread57, label %bb206

bb206:                                            ; preds = %dec_label_pc_13240
  %v2_13248 = add i32 %v0_13240, 4
  %v3_13248 = inttoptr i32 %v2_13248 to i32*
  %v4_13248 = load i32, i32* %v3_13248, align 4
  %v2_1324c = add i32 %v4_13248, -1
  store i32 %v2_1324c, i32* %v3_13248, align 4
  br label %.thread57

.thread57:                                        ; preds = %dec_label_pc_13240, %bb206
  %v0_13254 = load i32, i32* @r6, align 4
  %v2_13254 = icmp eq i32 %v0_13254, 0
  br i1 %v2_13254, label %dec_label_pc_13298, label %dec_label_pc_1325c

dec_label_pc_1325c:                               ; preds = %.thread57
  %v0_1325c = load i32, i32* %r2.global-to-local, align 4
  %v2_1325c = icmp eq i32 %v0_1325c, 0
  br i1 %v2_1325c, label %dec_label_pc_132c4, label %dec_label_pc_13264

dec_label_pc_13264:                               ; preds = %dec_label_pc_1325c
  %v0_13264 = load i32, i32* @sl, align 4
  %v1_13264 = add i32 %v0_13264, 4
  %v2_13264 = inttoptr i32 %v1_13264 to i32*
  %v3_13264 = load i32, i32* %v2_13264, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_13270 = add i32 %v3_13264, -1
  store i32 0, i32* %stack_var_0, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v1_13270, i32* %v2_13264, align 4
  %v1_12dfc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_1328c:                               ; preds = %dec_label_pc_1320c
  store i32 %v0_1320c, i32* %r0.global-to-local, align 4
  %v1_13290 = call i32 @function_13358(i32 %v0_1320c)
  store i32 %v1_13290, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13224

dec_label_pc_13298:                               ; preds = %.thread57
  %v0_13298 = load i32, i32* @sl, align 4
  store i32 %v0_13298, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v8_132a4 = call i32 @function_132f4(i32 %v0_13298, i32 %tmp, i32 0, i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_0, align 4
  br label %dec_label_pc_12df4

dec_label_pc_132c4:                               ; preds = %dec_label_pc_1325c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_0, align 4
  br label %dec_label_pc_12df4

; uselistorder directives
  uselistorder i32 %v1_13290, { 1, 0 }
  uselistorder i32 %v6_13228, { 1, 0 }
  uselistorder i32 %v3_1320c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13200, { 1, 2, 0 }
  uselistorder i32 %v2_131d4, { 1, 0 }
  uselistorder i32 %v1_13180, { 1, 0 }
  uselistorder i32 %v1_13174, { 1, 0 }
  uselistorder i32 %v5_13170, { 1, 0 }
  uselistorder i32 %v2_1316c, { 1, 2, 0 }
  uselistorder i32 %v0_1316c, { 1, 0 }
  uselistorder i32 %v0_13174, { 1, 0 }
  uselistorder i32 %v3_1314c, { 1, 0, 2, 3 }
  uselistorder i1 %v9_1313c, { 1, 0 }
  uselistorder i32 %v5_13108, { 1, 0, 2 }
  uselistorder i8 %v4_130d8, { 1, 0 }
  uselistorder i1 %v9_130ac, { 1, 0 }
  uselistorder i1 %v7_130a0, { 1, 0 }
  uselistorder i32 %v0_130cc, { 2, 3, 0, 1, 5, 4, 6, 7 }
  uselistorder i32 %v0_13108, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v0_13104, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v1_13064, { 1, 0 }
  uselistorder i32 %v3_13048, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1302c, { 2, 0, 1 }
  uselistorder i64 %v4_13024, { 1, 0 }
  uselistorder i32 %v5_12fec, { 1, 0 }
  uselistorder i32 %v0_12fe4, { 1, 0 }
  uselistorder i32 %v2_12fa8, { 2, 1, 0 }
  uselistorder i32 %v2_12fa0, { 1, 0 }
  uselistorder i32 %v3_12f9c, { 1, 0 }
  uselistorder i32 %v1_12f4c, { 1, 0 }
  uselistorder i32 %v3_12f68, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-60.2.off0, { 0, 2, 1 }
  uselistorder i32 %v2_12f40, { 1, 0 }
  uselistorder i32 %v3_131dc, { 1, 0, 2, 3 }
  uselistorder i1 %v9_12f04, { 1, 2, 0 }
  uselistorder i32 %v1_12f04, { 3, 0, 2, 1 }
  uselistorder i32 %stack_var_-44.2, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v1_12ea4, { 0, 2, 1 }
  uselistorder i32 %v0_12eac, { 1, 0, 3, 2 }
  uselistorder i32 %v1_12e6c, { 1, 0 }
  uselistorder i32 %v3_12e38, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12e1c, { 1, 0 }
  uselistorder i32 %v0_12dc8, { 1, 0 }
  uselistorder i32 %v1_12d60, { 1, 0 }
  uselistorder i32 %v3_12d90, { 1, 0, 2, 3 }
  uselistorder i1 %v2_12d84, { 1, 0 }
  uselistorder i32 %v0_13094, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12d64, { 1, 0 }
  uselistorder i32 %v0_12d78, { 1, 0 }
  uselistorder i32 %v1_12d0c, { 1, 0 }
  uselistorder i32 %v3_12d40, { 1, 0, 2, 3 }
  uselistorder i1 %v3_12d34, { 1, 0 }
  uselistorder i32 %v4_12cf0, { 1, 0 }
  uselistorder i32 %v0_12cec, { 1, 2, 0 }
  uselistorder i32 %v3_12cbc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12cb4, { 1, 0 }
  uselistorder i32 %v1_12cac, { 1, 0 }
  uselistorder i32 %v3_12c90, { 1, 0, 2, 3 }
  uselistorder i1 %v2_12c84, { 1, 0 }
  uselistorder i32 %v0_12e28, { 1, 2, 0, 3 }
  uselistorder i32 %v1_12c3c, { 18, 17, 16, 7, 13, 12, 0, 1, 2, 8, 9, 10, 15, 5, 3, 6, 14, 11, 19, 4 }
  uselistorder i32 %v4_12d38107, { 1, 0 }
  uselistorder i32 %v0_12c24, { 0, 2, 1, 3 }
  uselistorder i32 %v0_12c0c, { 1, 2, 0 }
  uselistorder i32 %v0_12c00143, { 1, 0 }
  uselistorder i32 %v3_12bb4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12b80, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_12b64, { 2, 3, 0, 1 }
  uselistorder i32* %v2_12b64, { 1, 0 }
  uselistorder i32 %v2_12b74, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12b54, { 0, 2, 1 }
  uselistorder i32* %stack_var_0, { 1, 2, 3, 5, 6, 7, 8, 9, 10, 4, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %tmp, { 6, 5, 1, 4, 2, 3, 8, 9, 7, 0, 10 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 48, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 23, 19, 20, 21, 22, 24, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 6, 12, 9, 7, 8, 10, 11, 15, 13, 14, 19, 17, 16, 18, 21, 20, 25, 22, 23, 24, 2, 26, 28, 27, 33, 29, 30, 31, 32, 40, 37, 34, 35, 36, 38, 39, 42, 41, 47, 43, 44, 45, 46, 51, 48, 49, 50, 55, 52, 53, 54, 3, 56, 0, 1 }
  uselistorder i8 10, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_132f4, { 2, 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_16771.437 to i32), i32 1), { 1, 5, 4, 3, 2, 0, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_16772.435 to i32), { 0, 1, 3, 2 }
  uselistorder i32 45, { 2, 0, 3, 1 }
  uselistorder i32 (i32)* @function_13358, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 43, 0, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 113, 114, 115, 116, 101, 102, 103, 92, 93, 94, 95, 96, 97, 98, 2, 99, 100, 9, 10, 11, 5, 6, 7, 8, 104, 105, 106, 107, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3, 30, 31, 32, 33, 34, 35, 1, 36, 37, 38, 39, 40, 41, 42, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 108, 109, 111, 110, 112, 87, 88, 89, 4, 90, 91 }
  uselistorder i32 %arg5, { 3, 7, 8, 0, 9, 4, 5, 1, 2, 6 }
  uselistorder label %.thread57, { 1, 0 }
  uselistorder label %dec_label_pc_13224, { 1, 0 }
  uselistorder label %dec_label_pc_13164, { 1, 0 }
  uselistorder label %dec_label_pc_130cc, { 0, 2, 1 }
  uselistorder label %dec_label_pc_130c0, { 0, 2, 1 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %bb201, { 1, 0 }
  uselistorder label %dec_label_pc_13044, { 1, 0 }
  uselistorder label %dec_label_pc_12fdc, { 1, 0 }
  uselistorder label %dec_label_pc_12fd0, { 1, 0 }
  uselistorder label %dec_label_pc_12f5c, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_12f50, { 1, 0 }
  uselistorder label %dec_label_pc_12f10, { 1, 0 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %dec_label_pc_12eec, { 5, 3, 4, 1, 2, 6, 0 }
  uselistorder label %bb198, { 1, 0 }
  uselistorder label %dec_label_pc_12e80, { 2, 1, 0 }
  uselistorder label %bb196, { 1, 0 }
  uselistorder label %dec_label_pc_12e50, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %bb193, { 1, 0 }
  uselistorder label %dec_label_pc_12d7c, { 1, 0 }
  uselistorder label %dec_label_pc_12d64, { 1, 0 }
  uselistorder label %dec_label_pc_12d40, { 1, 0 }
  uselistorder label %dec_label_pc_12d28, { 1, 0 }
  uselistorder label %dec_label_pc_12d10, { 1, 0 }
  uselistorder label %dec_label_pc_12cd4, { 1, 0 }
  uselistorder label %dec_label_pc_12cb4, { 1, 0 }
  uselistorder label %dec_label_pc_12c90, { 1, 0 }
  uselistorder label %dec_label_pc_12c80, { 1, 0 }
  uselistorder label %dec_label_pc_12c70, { 1, 0 }
  uselistorder label %dec_label_pc_12c14, { 1, 0 }
  uselistorder label %bb184, { 1, 0 }
  uselistorder label %dec_label_pc_12bf4, { 1, 0 }
  uselistorder label %bb182, { 1, 0 }
  uselistorder label %dec_label_pc_12bdc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12bcc, { 1, 0 }
  uselistorder label %dec_label_pc_12b64, { 1, 0 }
  uselistorder label %dec_label_pc_12b64.backedge, { 3, 0, 2, 1 }
}

define i32 @function_132ec() local_unnamed_addr {
dec_label_pc_132ec:
  %v0_132ec = load i1, i1* @cpsr_z, align 1
  br i1 %v0_132ec, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_132ec
  %v1_132ec = load i32, i32* @sb, align 4
  %v20_132ec = add i32 %v1_132ec, 28
  %v21_132ec = inttoptr i32 %v20_132ec to i32*
  %v22_132ec = load i32, i32* %v21_132ec, align 4
  call void @__pseudo_branch(i32 %v22_132ec)
  %v0_132f0.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_132f0.pr, label %.thread, label %bb1

bb1:                                              ; preds = %bb
  %v1_132f0 = load i32, i32* @sb, align 4
  %v2_132f0 = add i32 %v1_132f0, 4
  %v3_132f0 = inttoptr i32 %v2_132f0 to i32*
  %v4_132f0 = load i32, i32* %v3_132f0, align 4
  %v23_132f0 = add i32 %v1_132f0, 32
  %v24_132f0 = inttoptr i32 %v23_132f0 to i32*
  %v25_132f0 = load i32, i32* %v24_132f0, align 4
  call void @__pseudo_branch(i32 %v25_132f0)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_132ec, %bb, %bb1
  %.0 = phi i32 [ undef, %bb ], [ %v4_132f0, %bb1 ], [ undef, %dec_label_pc_132ec ]
  ret i32 %.0

; uselistorder directives
  uselistorder label %.thread, { 2, 1, 0 }
}

define i32 @function_132f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_132f4:
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_132f4 = load i32, i32* @r4, align 4
  store i32 %v3_132f4, i32* %stack_var_-8, align 4
  %v1_132f8 = add i32 %arg1, 8
  %v2_132f8 = inttoptr i32 %v1_132f8 to i32*
  %v3_132f8 = load i32, i32* %v2_132f8, align 4
  store i32 %v3_132f8, i32* @ip, align 4
  %v1_132fc = add i32 %arg1, 4
  %v2_132fc = inttoptr i32 %v1_132fc to i32*
  %v3_132fc = load i32, i32* %v2_132fc, align 4
  store i32 %v3_132fc, i32* %lr.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v2_13308 = sub i32 %v3_132f8, %v3_132fc
  store i32 %v2_13308, i32* %r3.global-to-local, align 4
  %v2_1330c = or i32 %arg3, %arg2
  %v4_1330c = icmp eq i32 %v2_1330c, 0
  %v3_13310 = ashr i32 %v2_13308, 31
  store i32 %v3_13310, i32* %r4.global-to-local, align 4
  %v2_13314 = add i32 %arg1, 112
  %v3_13314 = inttoptr i32 %v2_13314 to i32*
  store i32 %arg2, i32* %v3_13314, align 4
  %v0_13318 = load i32, i32* %r2.global-to-local, align 4
  %v2_13318 = add i32 %arg1, 116
  %v3_13318 = inttoptr i32 %v2_13318 to i32*
  store i32 %v0_13318, i32* %v3_13318, align 4
  %v0_1331c = load i32, i32* %r3.global-to-local, align 4
  %v2_1331c = add i32 %arg1, 120
  %v3_1331c = inttoptr i32 %v2_1331c to i32*
  store i32 %v0_1331c, i32* %v3_1331c, align 4
  %v0_13320 = load i32, i32* %r4.global-to-local, align 4
  %v2_13320 = add i32 %arg1, 124
  %v3_13320 = inttoptr i32 %v2_13320 to i32*
  store i32 %v0_13320, i32* %v3_13320, align 4
  br i1 %v4_1330c, label %dec_label_pc_13340, label %dec_label_pc_13328

dec_label_pc_13328:                               ; preds = %dec_label_pc_132f4
  %v0_13328 = load i32, i32* %r4.global-to-local, align 4
  %v1_13328 = load i32, i32* %r2.global-to-local, align 4
  %v7_1332c = icmp sgt i32 %v0_13328, %v1_13328
  br i1 %v7_1332c, label %dec_label_pc_13328.dec_label_pc_13330_crit_edge, label %dec_label_pc_1333c

dec_label_pc_13328.dec_label_pc_13330_crit_edge:  ; preds = %dec_label_pc_13328
  %v1_13330.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13330

dec_label_pc_13330:                               ; preds = %dec_label_pc_1334c, %dec_label_pc_13328.dec_label_pc_13330_crit_edge
  %v1_13330 = phi i32 [ %v1_13330.pre, %dec_label_pc_13328.dec_label_pc_13330_crit_edge ], [ %v1_1334c, %dec_label_pc_1334c ]
  %v0_13330 = load i32, i32* %lr.global-to-local, align 4
  %v2_13330 = add i32 %v0_13330, %v1_13330
  store i32 %v2_13330, i32* %r3.global-to-local, align 4
  %v2_13334 = add i32 %arg1, 104
  %v3_13334 = inttoptr i32 %v2_13334 to i32*
  store i32 %v2_13330, i32* %v3_13334, align 4
  br label %dec_label_pc_13344

dec_label_pc_1333c:                               ; preds = %dec_label_pc_13328
  %v9_13328 = icmp eq i32 %v0_13328, %v1_13328
  br i1 %v9_13328, label %dec_label_pc_1334c, label %dec_label_pc_13340

dec_label_pc_13340:                               ; preds = %dec_label_pc_1334c, %dec_label_pc_1333c, %dec_label_pc_132f4
  %v0_13340 = load i32, i32* @ip, align 4
  %v2_13340 = add i32 %arg1, 104
  %v3_13340 = inttoptr i32 %v2_13340 to i32*
  store i32 %v0_13340, i32* %v3_13340, align 4
  br label %dec_label_pc_13344

dec_label_pc_13344:                               ; preds = %dec_label_pc_13330, %dec_label_pc_13340
  %v2_13344 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13344, i32* %r4.global-to-local, align 4
  ret i32 %arg1

dec_label_pc_1334c:                               ; preds = %dec_label_pc_1333c
  %v0_1334c = load i32, i32* %r3.global-to-local, align 4
  %v1_1334c = load i32, i32* %r1.global-to-local, align 4
  %tmp = icmp ugt i32 %v0_1334c, %v1_1334c
  br i1 %tmp, label %dec_label_pc_13330, label %dec_label_pc_13340

; uselistorder directives
  uselistorder i32 %v1_13328, { 1, 0 }
  uselistorder i32 %v0_13328, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder i32 %arg1, { 1, 4, 0, 8, 5, 7, 6, 3, 2 }
  uselistorder label %dec_label_pc_13344, { 1, 0 }
}

define i32 @function_13358(i32 %arg1) local_unnamed_addr {
dec_label_pc_13358:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13358 = load i32, i32* @r4, align 4
  store i32 %v3_13358, i32* %stack_var_-28, align 4
  %v1_1335c = add i32 %arg1, 112
  %v1_13360 = inttoptr i32 %v1_1335c to i32*
  %v2_13360 = load i32, i32* %v1_13360, align 4
  %v3_13360 = add i32 %arg1, 116
  %v4_13360 = inttoptr i32 %v3_13360 to i32*
  %v5_13360 = load i32, i32* %v4_13360, align 4
  store i32 %v5_13360, i32* @r2, align 4
  %v2_13364 = or i32 %v5_13360, %v2_13360
  %v4_13364 = icmp eq i32 %v2_13364, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v4_13364, label %dec_label_pc_133a8, label %dec_label_pc_13374

dec_label_pc_13374:                               ; preds = %dec_label_pc_13358
  %v1_13374 = add i32 %arg1, 124
  %v2_13374 = inttoptr i32 %v1_13374 to i32*
  %v3_13374 = load i32, i32* %v2_13374, align 4
  %v5_1337c = icmp slt i32 %v3_13374, %v5_13360
  br i1 %v5_1337c, label %dec_label_pc_133a8, label %dec_label_pc_13380

dec_label_pc_13380:                               ; preds = %dec_label_pc_13374
  %v9_13378 = icmp eq i32 %v3_13374, %v5_13360
  br i1 %v9_13378, label %dec_label_pc_1339c, label %dec_label_pc_13384

dec_label_pc_13384:                               ; preds = %dec_label_pc_1339c, %dec_label_pc_133a8, %dec_label_pc_13380
  %v1_13388 = phi i32 [ %arg1, %dec_label_pc_1339c ], [ %arg1, %dec_label_pc_13380 ], [ %v1_13388.pre, %dec_label_pc_133a8 ]
  %v2_13388 = add i32 %v1_13388, 104
  %v3_13388 = inttoptr i32 %v2_13388 to i32*
  store i32 0, i32* %v3_13388, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13390

dec_label_pc_13390:                               ; preds = %bb, %dec_label_pc_13400, %dec_label_pc_13384
  %v1_13398 = phi i32 [ %v1_13398.pre, %bb ], [ %v4_13400, %dec_label_pc_13400 ], [ -1, %dec_label_pc_13384 ]
  %v2_13394 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_13394, i32* @r4, align 4
  ret i32 %v1_13398

dec_label_pc_1339c:                               ; preds = %dec_label_pc_13380
  %v1_1339c = add i32 %arg1, 120
  %v2_1339c = inttoptr i32 %v1_1339c to i32*
  %v3_1339c = load i32, i32* %v2_1339c, align 4
  %v3_133a0 = icmp ult i32 %v3_1339c, %v2_13360
  br i1 %v3_133a0, label %dec_label_pc_133a8, label %dec_label_pc_13384

dec_label_pc_133a8:                               ; preds = %dec_label_pc_1339c, %dec_label_pc_13374, %dec_label_pc_13358
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_133ac = call i32 @function_13ab8(i32 %arg1)
  store i32 %v1_133ac, i32* %r0.global-to-local, align 4
  %v1_133b0 = icmp slt i32 %v1_133ac, 0
  %v1_13388.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v1_133b0, label %dec_label_pc_13384, label %dec_label_pc_133b8

dec_label_pc_133b8:                               ; preds = %dec_label_pc_133a8
  %v1_133b8 = add i32 %v1_13388.pre, 112
  %v1_133bc = inttoptr i32 %v1_133b8 to i32*
  %v2_133bc = load i32, i32* %v1_133bc, align 4
  %v3_133bc = add i32 %v1_13388.pre, 116
  %v4_133bc = inttoptr i32 %v3_133bc to i32*
  %v5_133bc = load i32, i32* %v4_133bc, align 4
  store i32 %v5_133bc, i32* @r2, align 4
  %v2_133c0 = or i32 %v5_133bc, %v2_133bc
  %v4_133c0 = icmp eq i32 %v2_133c0, 0
  br i1 %v4_133c0, label %dec_label_pc_133c8, label %dec_label_pc_13410

dec_label_pc_133c8:                               ; preds = %dec_label_pc_133b8
  %v1_133c8 = add i32 %v1_13388.pre, 4
  %v2_133c8 = inttoptr i32 %v1_133c8 to i32*
  %v3_133c8 = load i32, i32* %v2_133c8, align 4
  store i32 %v3_133c8, i32* %lr.global-to-local, align 4
  %v1_133cc = add i32 %v1_13388.pre, 8
  %v2_133cc = inttoptr i32 %v1_133cc to i32*
  %v3_133cc = load i32, i32* %v2_133cc, align 4
  store i32 %v3_133cc, i32* @ip, align 4
  br label %dec_label_pc_133d0

dec_label_pc_133d0:                               ; preds = %dec_label_pc_13458, %dec_label_pc_13454, %dec_label_pc_133c8
  %v0_133d0 = phi i32 [ %v3_1341c, %dec_label_pc_13454 ], [ %v3_1341c, %dec_label_pc_13458 ], [ %v3_133cc, %dec_label_pc_133c8 ]
  %v2_133d0 = add i32 %v1_13388.pre, 104
  %v3_133d0 = inttoptr i32 %v2_133d0 to i32*
  store i32 %v0_133d0, i32* %v3_133d0, align 4
  br label %dec_label_pc_133d4

dec_label_pc_133d4:                               ; preds = %dec_label_pc_13440, %dec_label_pc_133d0
  %v0_133d4 = load i32, i32* @ip, align 4
  %v2_133d4 = icmp eq i32 %v0_133d4, 0
  br i1 %v2_133d4, label %dec_label_pc_13400, label %dec_label_pc_133dc

dec_label_pc_133dc:                               ; preds = %dec_label_pc_133d4
  %v1_133dc = add i32 %v0_133d4, 1
  %v0_133e0 = load i32, i32* %r5.global-to-local, align 4
  %v1_133e0 = add i32 %v0_133e0, 120
  %v1_133e4 = inttoptr i32 %v1_133e0 to i32*
  %v2_133e4 = load i32, i32* %v1_133e4, align 4
  %v3_133e4 = add i32 %v0_133e0, 124
  %v4_133e4 = inttoptr i32 %v3_133e4 to i32*
  %v5_133e4 = load i32, i32* %v4_133e4, align 4
  %v0_133e8 = load i32, i32* %lr.global-to-local, align 4
  %v2_133e8 = sub i32 %v1_133dc, %v0_133e8
  %v3_133ec = ashr i32 %v2_133e8, 31
  %v2_133f0 = add i32 %v2_133e8, %v2_133e4
  %v3_133f0 = icmp ult i32 %v2_133f0, %v2_133e4
  %v3_133f4 = add i32 %v3_133ec, %v5_133e4
  %v4_133f4 = zext i1 %v3_133f0 to i32
  %v5_133f4 = add i32 %v4_133f4, %v3_133f4
  store i32 %v5_133f4, i32* @r2, align 4
  store i32 %v2_133f0, i32* %v1_133e4, align 4
  %v0_133fc = load i32, i32* @r2, align 4
  %v1_133fc = load i32, i32* %r5.global-to-local, align 4
  %v2_133fc = add i32 %v1_133fc, 124
  %v3_133fc = inttoptr i32 %v2_133fc to i32*
  store i32 %v0_133fc, i32* %v3_133fc, align 4
  br label %dec_label_pc_13400

dec_label_pc_13400:                               ; preds = %dec_label_pc_133d4, %dec_label_pc_133dc
  %v0_13400 = load i32, i32* %lr.global-to-local, align 4
  %v1_13400 = add i32 %v0_13400, -1
  %v2_13400 = inttoptr i32 %v1_13400 to i8*
  %v3_13400 = load i8, i8* %v2_13400, align 1
  %v4_13400 = zext i8 %v3_13400 to i32
  %v0_13404 = load i32, i32* %r0.global-to-local, align 4
  %v9_13404 = icmp eq i32 %v0_13404, %v4_13400
  br i1 %v9_13404, label %dec_label_pc_13390, label %bb

bb:                                               ; preds = %dec_label_pc_13400
  %v2_13408 = trunc i32 %v0_13404 to i8
  store i8 %v2_13408, i8* %v2_13400, align 1
  %v1_13398.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13390

dec_label_pc_13410:                               ; preds = %dec_label_pc_133b8
  %v1_13410 = add i32 %v1_13388.pre, 120
  %v1_13414 = inttoptr i32 %v1_13410 to i32*
  %v2_13414 = load i32, i32* %v1_13414, align 4
  %v3_13414 = add i32 %v1_13388.pre, 124
  %v4_13414 = inttoptr i32 %v3_13414 to i32*
  %v5_13414 = load i32, i32* %v4_13414, align 4
  %v1_13418 = add i32 %v1_13388.pre, 4
  %v2_13418 = inttoptr i32 %v1_13418 to i32*
  %v3_13418 = load i32, i32* %v2_13418, align 4
  store i32 %v3_13418, i32* %lr.global-to-local, align 4
  %v1_1341c = add i32 %v1_13388.pre, 8
  %v2_1341c = inttoptr i32 %v1_1341c to i32*
  %v3_1341c = load i32, i32* %v2_1341c, align 4
  store i32 %v3_1341c, i32* @ip, align 4
  %v1_13420 = sub i32 -1, %v2_13414
  %v2_13424 = add i32 %v2_133bc, %v1_13420
  %v3_13424 = icmp ult i32 %v2_13424, %v1_13420
  %v1_13428 = sub i32 -1, %v5_13414
  %v2_1342c = sub i32 %v3_1341c, %v3_13418
  %v3_13430 = add i32 %v5_133bc, %v1_13428
  %v4_13430 = zext i1 %v3_13424 to i32
  %v5_13430 = add i32 %v3_13430, %v4_13430
  %v3_13434 = ashr i32 %v2_1342c, 31
  %v7_1343c = icmp sgt i32 %v3_13434, %v5_13430
  br i1 %v7_1343c, label %dec_label_pc_13440, label %dec_label_pc_13454

dec_label_pc_13440:                               ; preds = %dec_label_pc_13458, %dec_label_pc_13410
  %v2_13440 = sub i32 %v2_133bc, %v2_13414
  store i32 %v2_13440, i32* @r2, align 4
  %v1_13444 = add i32 %v2_13440, -1
  %v2_13448 = add i32 %v1_13444, %v3_13418
  %v2_1344c = add i32 %v1_13388.pre, 104
  %v3_1344c = inttoptr i32 %v2_1344c to i32*
  store i32 %v2_13448, i32* %v3_1344c, align 4
  br label %dec_label_pc_133d4

dec_label_pc_13454:                               ; preds = %dec_label_pc_13410
  %v9_13438 = icmp eq i32 %v3_13434, %v5_13430
  br i1 %v9_13438, label %dec_label_pc_13458, label %dec_label_pc_133d0

dec_label_pc_13458:                               ; preds = %dec_label_pc_13454
  %tmp = icmp ugt i32 %v2_1342c, %v2_13424
  br i1 %tmp, label %dec_label_pc_13440, label %dec_label_pc_133d0

; uselistorder directives
  uselistorder i32 %v3_13434, { 1, 0 }
  uselistorder i32 %v3_1341c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_13414, { 1, 0 }
  uselistorder i32 %v4_13400, { 1, 0 }
  uselistorder i32 %v2_133e4, { 1, 0 }
  uselistorder i32 %v2_133bc, { 2, 0, 1 }
  uselistorder i32 %v1_13388.pre, { 9, 7, 8, 4, 3, 10, 5, 6, 2, 1, 0 }
  uselistorder i32 %v3_13374, { 1, 0 }
  uselistorder i32 %v5_13360, { 1, 2, 0, 3 }
  uselistorder i32 %v2_13360, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 104, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 1 }
  uselistorder i32 124, { 0, 2, 1, 3, 4 }
  uselistorder i32 %arg1, { 3, 2, 5, 0, 1, 4, 8, 7, 6, 9 }
  uselistorder label %dec_label_pc_13400, { 1, 0 }
  uselistorder label %dec_label_pc_13384, { 1, 0, 2 }
}

define i32 @function_13464() local_unnamed_addr {
dec_label_pc_13464:
  %stack_var_0 = alloca i32, align 4
  %v1_13464 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_13464, i32* @ip, align 4
  %v0_13470 = load i32, i32* @r1, align 4
  %v0_13478 = load i32, i32* @r3, align 4
  store i32 %v0_13478, i32* @r2, align 4
  ret i32 %v0_13470
}

define i32 @function_13494(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13494:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13498 = load i32, i32* @r4, align 4
  store i32 %v3_13498, i32* %stack_var_-36, align 4
  %v3_1349c = load i32, i32* @global_var_1f6f8.258, align 4
  %v1_134a0 = inttoptr i32 %v3_1349c to i32*
  %v2_134a0 = load i32, i32* %v1_134a0, align 4
  %v7_134a4 = icmp eq i32 %v2_134a0, 33
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %v0_134b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_134b0, i32* %r8.global-to-local, align 4
  br i1 %v7_134a4, label %.thread, label %dec_label_pc_134bc

.thread:                                          ; preds = %dec_label_pc_13494
  %v1_134a4 = add i32 %v2_134a0, -33
  br label %dec_label_pc_134e8

dec_label_pc_134bc:                               ; preds = %dec_label_pc_13494
  %v2_134bc = icmp eq i32 %v2_134a0, 0
  br i1 %v2_134bc, label %dec_label_pc_13560, label %dec_label_pc_134d4.preheader

dec_label_pc_134d4.preheader:                     ; preds = %dec_label_pc_134bc
  store i32 8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_134d4

dec_label_pc_134d4:                               ; preds = %dec_label_pc_134d4, %dec_label_pc_134d4.preheader
  %v0_134e0 = phi i32 [ 8, %dec_label_pc_134d4.preheader ], [ %v1_134e0, %dec_label_pc_134d4 ]
  %v2_134d8 = add i32 %v0_134e0, %v3_1349c
  %v3_134d8 = inttoptr i32 %v2_134d8 to i32*
  %v4_134d8 = load i32, i32* %v3_134d8, align 4
  %v1_134e0 = add i32 %v0_134e0, 8
  store i32 %v1_134e0, i32* %r1.global-to-local, align 4
  switch i32 %v4_134d8, label %dec_label_pc_134d4 [
    i32 33, label %dec_label_pc_134e8.loopexit
    i32 0, label %dec_label_pc_13560.loopexit17
  ]

dec_label_pc_134e8.loopexit:                      ; preds = %dec_label_pc_134d4
  br label %dec_label_pc_134e8

dec_label_pc_134e8:                               ; preds = %.thread, %dec_label_pc_134e8.loopexit
  %v0_134e8 = phi i32 [ %v0_134e0, %dec_label_pc_134e8.loopexit ], [ %v1_134a4, %.thread ]
  %v2_134e8 = add i32 %v0_134e8, %v3_1349c
  %v1_134ec = add i32 %v2_134e8, 4
  %v2_134ec = inttoptr i32 %v1_134ec to i32*
  %v3_134ec = load i32, i32* %v2_134ec, align 4
  %v1_134f0 = add i32 %v3_134ec, 44
  %v2_134f0 = inttoptr i32 %v1_134f0 to i16*
  %v3_134f0 = load i16, i16* %v2_134f0, align 2
  %v4_134f0 = zext i16 %v3_134f0 to i32
  %v2_134f4 = icmp eq i16 %v3_134f0, 0
  br i1 %v2_134f4, label %dec_label_pc_13560, label %dec_label_pc_13500

dec_label_pc_13500:                               ; preds = %dec_label_pc_134e8
  %v1_134f8 = add i32 %v3_134ec, 28
  %v2_134f8 = inttoptr i32 %v1_134f8 to i32*
  %v3_134f8 = load i32, i32* %v2_134f8, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_13504 = add i32 %v3_134ec, 42
  %v2_13504 = inttoptr i32 %v1_13504 to i16*
  %v3_13504 = load i16, i16* %v2_13504, align 2
  %v4_13504 = zext i16 %v3_13504 to i32
  %v2_13508 = add i32 %v3_134f8, %v3_134ec
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13514

dec_label_pc_13514:                               ; preds = %.thread4, %dec_label_pc_13500
  %v1_1354c38 = phi i32 [ %v0_1357c, %.thread4 ], [ 0, %dec_label_pc_13500 ]
  %v0_1354836 = phi i32 [ %v0_13548, %.thread4 ], [ -1, %dec_label_pc_13500 ]
  %v0_13538 = phi i32 [ %v1_13538, %.thread4 ], [ 0, %dec_label_pc_13500 ]
  %v0_13540 = phi i32 [ %v2_13540, %.thread4 ], [ %v2_13508, %dec_label_pc_13500 ]
  %v1_13514 = inttoptr i32 %v0_13540 to i32*
  %v2_13514 = load i32, i32* %v1_13514, align 4
  switch i32 %v2_13514, label %.thread4 [
    i32 1, label %.thread2
    i32 2, label %bb
  ]

.thread2:                                         ; preds = %dec_label_pc_13514
  %v2_1351c = add i32 %v0_13540, 4
  %v3_1351c = inttoptr i32 %v2_1351c to i32*
  %v4_1351c = load i32, i32* %v3_1351c, align 4
  %v5_1351c = add i32 %v0_13540, 8
  %v6_1351c = inttoptr i32 %v5_1351c to i32*
  %v7_1351c = load i32, i32* %v6_1351c, align 4
  %v3_13520 = sub i32 %v4_1351c, %v7_1351c
  %v3_13524 = add i32 %v3_13520, %v3_134ec
  store i32 %v3_13524, i32* %r5.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_13514
  %v2_13530 = add i32 %v0_13540, 4
  %v3_13530 = inttoptr i32 %v2_13530 to i32*
  %v4_13530 = load i32, i32* %v3_13530, align 4
  %v3_13534 = add i32 %v4_13530, %v3_134ec
  store i32 %v3_13534, i32* %r4.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_13514, %.thread2, %bb
  %v0_1357c = phi i32 [ %v1_1354c38, %.thread2 ], [ %v3_13534, %bb ], [ %v1_1354c38, %dec_label_pc_13514 ]
  %v0_13548 = phi i32 [ %v3_13524, %.thread2 ], [ %v0_1354836, %bb ], [ %v0_1354836, %dec_label_pc_13514 ]
  %v1_13538 = add i32 %v0_13538, 1
  store i32 %v1_13538, i32* %r1.global-to-local, align 4
  %v9_1353c = icmp eq i32 %v1_13538, %v4_134f0
  %v2_13540 = add i32 %v0_13540, %v4_13504
  br i1 %v9_1353c, label %dec_label_pc_13548, label %dec_label_pc_13514

dec_label_pc_13548:                               ; preds = %.thread4
  %v7_13548 = icmp eq i32 %v0_13548, -1
  br i1 %v7_13548, label %.thread8, label %bb71

bb71:                                             ; preds = %dec_label_pc_13548
  %v3_1354c = icmp eq i32 %v0_1357c, 0
  br i1 %v3_1354c, label %bb72, label %dec_label_pc_1356c

.thread8:                                         ; preds = %dec_label_pc_13548
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13560

bb72:                                             ; preds = %bb71
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13560

dec_label_pc_13560.loopexit17:                    ; preds = %dec_label_pc_134d4
  br label %dec_label_pc_13560

dec_label_pc_13560:                               ; preds = %dec_label_pc_13638, %bb72, %bb80, %dec_label_pc_13560.loopexit17, %dec_label_pc_134bc, %.thread16, %.thread8, %dec_label_pc_134e8, %dec_label_pc_1356c, %dec_label_pc_13608, %bb82, %dec_label_pc_13710
  %storemerge = phi i32 [ %v2_13714, %dec_label_pc_13710 ], [ 0, %bb72 ], [ 0, %bb82 ], [ 0, %dec_label_pc_13608 ], [ 0, %bb80 ], [ 0, %dec_label_pc_1356c ], [ 0, %dec_label_pc_134e8 ], [ 0, %.thread8 ], [ 0, %.thread16 ], [ 0, %dec_label_pc_134bc ], [ 0, %dec_label_pc_13560.loopexit17 ], [ 0, %dec_label_pc_13638 ]
  %v2_13564 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13564, i32* %r4.global-to-local, align 4
  ret i32 %storemerge

dec_label_pc_1356c:                               ; preds = %bb71
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_1356c = inttoptr i32 %v0_1357c to i32*
  %v2_1356c = load i32, i32* %v1_1356c, align 4
  %v2_13570 = icmp eq i32 %v2_1356c, 0
  br i1 %v2_13570, label %dec_label_pc_13560, label %dec_label_pc_13578

dec_label_pc_13578:                               ; preds = %dec_label_pc_1356c
  store i32 0, i32* %r6.global-to-local, align 4
  %v1_1357c = add i32 %v0_1357c, 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_135c0

dec_label_pc_13598:                               ; preds = %dec_label_pc_135d4
  switch i32 %v0_135e8, label %bb75 [
    i32 4, label %bb73
    i32 5, label %bb74
  ]

bb73:                                             ; preds = %dec_label_pc_13598
  store i32 %v2_135c8, i32* %sl.global-to-local, align 4
  br label %bb75

bb74:                                             ; preds = %dec_label_pc_13598
  store i32 %v2_135c8, i32* %r6.global-to-local, align 4
  br label %bb75

bb75:                                             ; preds = %dec_label_pc_135d8, %dec_label_pc_13598, %bb76, %bb77, %bb73, %bb78, %bb74
  %v0_13614 = phi i32 [ %v2_135c8, %bb78 ], [ %v0_1361455, %bb77 ], [ %v0_1361455, %bb73 ], [ %v0_1361455, %bb76 ], [ %v0_1361455, %bb74 ], [ %v0_1361455, %dec_label_pc_13598 ], [ %v0_1361455, %dec_label_pc_135d8 ]
  %v0_1361c = phi i32 [ %v0_1360853, %bb78 ], [ %v0_1360853, %bb77 ], [ %v2_135c8, %bb73 ], [ %v0_1360853, %bb76 ], [ %v0_1360853, %bb74 ], [ %v0_1360853, %dec_label_pc_13598 ], [ %v0_1360853, %dec_label_pc_135d8 ]
  %v0_1362c = phi i32 [ %v0_135f448, %bb78 ], [ %v0_135f448, %bb77 ], [ %v0_135f448, %bb73 ], [ %v2_135c8, %bb76 ], [ %v0_135f448, %bb74 ], [ %v0_135f448, %dec_label_pc_13598 ], [ %v0_135f448, %dec_label_pc_135d8 ]
  %v1_135f8 = phi i32 [ %v1_135f850, %bb78 ], [ %v1_135f850, %bb77 ], [ %v1_135f850, %bb73 ], [ %v1_135f850, %bb76 ], [ %v2_135c8, %bb74 ], [ %v1_135f850, %dec_label_pc_13598 ], [ %v1_135f850, %dec_label_pc_135d8 ]
  %v2_135ac = add i32 %v0_135b4, %v0_1357c
  %v3_135ac = inttoptr i32 %v2_135ac to i32*
  %v4_135ac = load i32, i32* %v3_135ac, align 4
  %v2_135b0 = icmp eq i32 %v4_135ac, 0
  %v1_135b8 = add i32 %v0_135b4, 8
  br i1 %v2_135b0, label %dec_label_pc_135f4, label %dec_label_pc_135c0

dec_label_pc_135c0:                               ; preds = %bb75, %dec_label_pc_13578
  %v0_1361455 = phi i32 [ %v0_13614, %bb75 ], [ 0, %dec_label_pc_13578 ]
  %v0_1360853 = phi i32 [ %v0_1361c, %bb75 ], [ 0, %dec_label_pc_13578 ]
  %v1_135f850 = phi i32 [ %v1_135f8, %bb75 ], [ 0, %dec_label_pc_13578 ]
  %v0_135f448 = phi i32 [ %v0_1362c, %bb75 ], [ 0, %dec_label_pc_13578 ]
  %v0_135c0 = phi i32 [ %v0_135b4, %bb75 ], [ 0, %dec_label_pc_13578 ]
  %v0_135b4 = phi i32 [ %v1_135b8, %bb75 ], [ 8, %dec_label_pc_13578 ]
  %v0_135e8 = phi i32 [ %v4_135ac, %bb75 ], [ %v2_1356c, %dec_label_pc_13578 ]
  %v2_135c0 = add i32 %v0_135c0, %v1_1357c
  %v3_135c0 = inttoptr i32 %v2_135c0 to i32*
  %v4_135c0 = load i32, i32* %v3_135c0, align 4
  %v7_135c4 = icmp eq i32 %v0_135e8, 6
  %v2_135c8 = add i32 %v4_135c0, %v0_13548
  br i1 %v7_135c4, label %bb76, label %dec_label_pc_135d4

bb76:                                             ; preds = %dec_label_pc_135c0
  store i32 %v2_135c8, i32* %r1.global-to-local, align 4
  br label %bb75

dec_label_pc_135d4:                               ; preds = %dec_label_pc_135c0
  %v2_135c4 = icmp ugt i32 %v0_135e8, 5
  br i1 %v2_135c4, label %dec_label_pc_135d8, label %dec_label_pc_13598

dec_label_pc_135d8:                               ; preds = %dec_label_pc_135d4
  switch i32 %v0_135e8, label %bb75 [
    i32 1879048176, label %bb77
    i32 1879048188, label %bb78
  ]

bb77:                                             ; preds = %dec_label_pc_135d8
  store i32 %v2_135c8, i32* %fp.global-to-local, align 4
  br label %bb75

bb78:                                             ; preds = %dec_label_pc_135d8
  store i32 %v2_135c8, i32* %sb.global-to-local, align 4
  br label %bb75

dec_label_pc_135f4:                               ; preds = %bb75
  %v2_135f4 = icmp eq i32 %v0_1362c, 0
  br i1 %v2_135f4, label %.thread16, label %bb79

bb79:                                             ; preds = %dec_label_pc_135f4
  %v3_135f8 = icmp eq i32 %v1_135f8, 0
  br i1 %v3_135f8, label %bb80, label %dec_label_pc_13608

.thread16:                                        ; preds = %dec_label_pc_135f4
  br label %dec_label_pc_13560

bb80:                                             ; preds = %bb79
  br label %dec_label_pc_13560

dec_label_pc_13608:                               ; preds = %bb79
  %v2_13608 = icmp eq i32 %v0_1361c, 0
  br i1 %v2_13608, label %dec_label_pc_13560, label %dec_label_pc_13610

dec_label_pc_13610:                               ; preds = %dec_label_pc_13608
  %v1_13610 = add i32 %v0_1361c, 4
  %v2_13610 = inttoptr i32 %v1_13610 to i32*
  %v3_13610 = load i32, i32* %v2_13610, align 4
  %v2_13614 = icmp eq i32 %v0_13614, 0
  br i1 %v2_13614, label %bb81, label %bb82

bb81:                                             ; preds = %dec_label_pc_13610
  store i32 0, i32* %fp.global-to-local, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_13610, %bb81
  store i32 %v1_13610, i32* %sl.global-to-local, align 4
  %v2_13620 = icmp eq i32 %v3_13610, 0
  br i1 %v2_13620, label %dec_label_pc_13560, label %dec_label_pc_1362c

dec_label_pc_1362c:                               ; preds = %bb82
  store i32 %v0_1362c, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_13650

dec_label_pc_13638.loopexit:                      ; preds = %dec_label_pc_136c4
  br label %dec_label_pc_13638

dec_label_pc_13638:                               ; preds = %dec_label_pc_13638.loopexit, %dec_label_pc_136f4, %dec_label_pc_1368c, %dec_label_pc_13680, %dec_label_pc_13668, %dec_label_pc_13650
  %v2_1363c = load i32, i32* %v2_13610, align 4
  %v0_13640 = load i32, i32* %sl.global-to-local, align 4
  %v1_13640 = add i32 %v0_13640, 1
  store i32 %v1_13640, i32* %sl.global-to-local, align 4
  %v0_13648 = load i32, i32* %r4.global-to-local, align 4
  %v1_13648 = add i32 %v0_13648, 16
  store i32 %v1_13648, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v2_1363c, %v1_13640
  br i1 %tmp, label %dec_label_pc_13650, label %dec_label_pc_13560

dec_label_pc_13650:                               ; preds = %dec_label_pc_13638, %dec_label_pc_1362c
  %v0_1368c = phi i32 [ %v1_13648, %dec_label_pc_13638 ], [ %v0_1362c, %dec_label_pc_1362c ]
  %v1_13650 = add i32 %v0_1368c, 12
  %v2_13650 = inttoptr i32 %v1_13650 to i8*
  %v3_13650 = load i8, i8* %v2_13650, align 1
  %v4_13650 = zext i8 %v3_13650 to i32
  store i32 %v4_13650, i32* %r1.global-to-local, align 4
  %tmp87 = urem i8 %v3_13650, 16
  %v1_13658 = zext i8 %tmp87 to i32
  %v6_1365c = lshr i32 39, %v1_13658
  %v1_13660 = urem i32 %v6_1365c, 2
  %v2_13660 = icmp eq i32 %v1_13660, 0
  br i1 %v2_13660, label %dec_label_pc_13638, label %dec_label_pc_13668

dec_label_pc_13668:                               ; preds = %dec_label_pc_13650
  %div = udiv i8 %v3_13650, 16
  %v3_1366c = zext i8 %div to i32
  %v6_13674 = lshr i32 1030, %v3_1366c
  %v1_13678 = urem i32 %v6_13674, 2
  %v2_13678 = icmp eq i32 %v1_13678, 0
  br i1 %v2_13678, label %dec_label_pc_13638, label %dec_label_pc_13680

dec_label_pc_13680:                               ; preds = %dec_label_pc_13668
  %v1_13680 = add i32 %v0_1368c, 14
  %v2_13680 = inttoptr i32 %v1_13680 to i16*
  %v3_13680 = load i16, i16* %v2_13680, align 2
  %v2_13684 = icmp eq i16 %v3_13680, 0
  br i1 %v2_13684, label %dec_label_pc_13638, label %dec_label_pc_1368c

dec_label_pc_1368c:                               ; preds = %dec_label_pc_13680
  %v4_13680 = zext i16 %v3_13680 to i32
  %v1_1368c = inttoptr i32 %v0_1368c to i32*
  %v2_1368c = load i32, i32* %v1_1368c, align 4
  %v0_13690 = load i32, i32* %r8.global-to-local, align 4
  %v0_13694 = load i32, i32* %r6.global-to-local, align 4
  %v2_13694 = add i32 %v0_13694, %v2_1368c
  store i32 %v2_13694, i32* %r1.global-to-local, align 4
  %v4_13698 = inttoptr i32 %v0_13690 to i8*
  %v5_13698 = call i32 @function_13b04(i8* %v4_13698, i32 %v2_13694, i32 %v3_1366c, i32 %v4_13680)
  %v2_1369c = icmp eq i32 %v5_13698, 0
  br i1 %v2_1369c, label %dec_label_pc_136a4, label %dec_label_pc_13638

dec_label_pc_136a4:                               ; preds = %dec_label_pc_1368c
  %v0_136a4 = load i32, i32* %fp.global-to-local, align 4
  %v2_136a4 = icmp eq i32 %v0_136a4, 0
  br i1 %v2_136a4, label %dec_label_pc_13710, label %dec_label_pc_136ac

dec_label_pc_136ac:                               ; preds = %dec_label_pc_136a4
  %v0_136ac = load i32, i32* %sl.global-to-local, align 4
  %v2_136ac = mul i32 %v0_136ac, 2
  %v2_136b0 = add i32 %v2_136ac, %v0_136a4
  %v3_136b0 = inttoptr i32 %v2_136b0 to i16*
  %v4_136b0 = load i16, i16* %v3_136b0, align 2
  %tmp88 = urem i16 %v4_136b0, -32768
  %v3_136b8 = zext i16 %tmp88 to i32
  %v0_136bc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_136bc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_136d4

dec_label_pc_136c4:                               ; preds = %dec_label_pc_136e0, %dec_label_pc_136d4
  %v1_136c4 = add i32 %v0_136f4, 16
  %v2_136c4 = inttoptr i32 %v1_136c4 to i32*
  %v3_136c4 = load i32, i32* %v2_136c4, align 4
  %v2_136c8 = icmp eq i32 %v3_136c4, 0
  %v2_136cc = add i32 %v3_136c4, %v0_136f4
  store i32 %v2_136cc, i32* %r1.global-to-local, align 4
  br i1 %v2_136c8, label %dec_label_pc_13638.loopexit, label %dec_label_pc_136d4

dec_label_pc_136d4:                               ; preds = %dec_label_pc_136c4, %dec_label_pc_136ac
  %v0_136f4 = phi i32 [ %v2_136cc, %dec_label_pc_136c4 ], [ %v0_136bc, %dec_label_pc_136ac ]
  %v1_136d4 = add i32 %v0_136f4, 2
  %v2_136d4 = inttoptr i32 %v1_136d4 to i16*
  %v3_136d4 = load i16, i16* %v2_136d4, align 2
  %tmp89 = urem i16 %v3_136d4, 2
  %v2_136d8 = icmp eq i16 %tmp89, 0
  br i1 %v2_136d8, label %dec_label_pc_136e0, label %dec_label_pc_136c4

dec_label_pc_136e0:                               ; preds = %dec_label_pc_136d4
  %v1_136e0 = add i32 %v0_136f4, 4
  %v2_136e0 = inttoptr i32 %v1_136e0 to i16*
  %v3_136e0 = load i16, i16* %v2_136e0, align 2
  %tmp90 = urem i16 %v3_136e0, -32768
  %v9_136ec = icmp eq i16 %tmp90, %tmp88
  br i1 %v9_136ec, label %dec_label_pc_136f4, label %dec_label_pc_136c4

dec_label_pc_136f4:                               ; preds = %dec_label_pc_136e0
  %v1_136f4 = add i32 %v0_136f4, 12
  %v2_136f4 = inttoptr i32 %v1_136f4 to i32*
  %v3_136f4 = load i32, i32* %v2_136f4, align 4
  %v2_136f8 = add i32 %v3_136f4, %v0_136f4
  %v3_136f8 = inttoptr i32 %v2_136f8 to i32*
  %v4_136f8 = load i32, i32* %v3_136f8, align 4
  %v0_136fc = load i32, i32* %r7.global-to-local, align 4
  %v0_13700 = load i32, i32* %r6.global-to-local, align 4
  %v2_13700 = add i32 %v0_13700, %v4_136f8
  store i32 %v2_13700, i32* %r1.global-to-local, align 4
  %v4_13704 = inttoptr i32 %v0_136fc to i8*
  %v5_13704 = call i32 @function_13b04(i8* %v4_13704, i32 %v2_13700, i32 %v3_136b8, i32 %v3_136f4)
  %v2_13708 = icmp eq i32 %v5_13704, 0
  br i1 %v2_13708, label %dec_label_pc_13710, label %dec_label_pc_13638

dec_label_pc_13710:                               ; preds = %dec_label_pc_136f4, %dec_label_pc_136a4
  %v0_13710 = load i32, i32* %r4.global-to-local, align 4
  %v1_13710 = add i32 %v0_13710, 4
  %v2_13710 = inttoptr i32 %v1_13710 to i32*
  %v3_13710 = load i32, i32* %v2_13710, align 4
  %v0_13714 = load i32, i32* %r5.global-to-local, align 4
  %v2_13714 = add i32 %v0_13714, %v3_13710
  br label %dec_label_pc_13560

; uselistorder directives
  uselistorder i32 %v3_136f4, { 1, 0 }
  uselistorder i32 %v0_136f4, { 0, 1, 4, 5, 3, 2 }
  uselistorder i16 %v3_13680, { 1, 0 }
  uselistorder i32 %v3_1366c, { 1, 0 }
  uselistorder i32 %v2_135c8, { 4, 5, 8, 7, 6, 3, 2, 0, 1 }
  uselistorder i32 %v0_135e8, { 0, 3, 2, 1 }
  uselistorder i32 %v0_135f448, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_135f850, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1360853, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1361455, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_13538, { 1, 2, 0 }
  uselistorder i32 %v0_13548, { 1, 0, 2 }
  uselistorder i32 %v0_13540, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_134e0, { 1, 0 }
  uselistorder i32 %v0_134e0, { 0, 2, 1 }
  uselistorder i32 %v2_134a0, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32* %r1.global-to-local, { 10, 11, 12, 13, 2, 3, 5, 4, 14, 6, 7, 8, 9, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 14, { 21, 0, 1, 16, 2, 11, 10, 5, 12, 6, 7, 8, 9, 13, 14, 3, 15, 17, 18, 19, 4, 20 }
  uselistorder i32 39, { 0, 2, 1 }
  uselistorder i8 16, { 1, 2, 0, 3, 4, 5, 6, 8, 7, 10, 9, 11, 12, 14, 13, 16, 15 }
  uselistorder i32 42, { 1, 0 }
  uselistorder i16 0, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder label %dec_label_pc_13638, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb75, { 5, 3, 0, 2, 6, 4, 1 }
  uselistorder label %dec_label_pc_13560, { 11, 0, 10, 9, 2, 5, 8, 3, 1, 6, 7, 4 }
  uselistorder label %.thread4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_134e8, { 1, 0 }
}

define i32 @function_13720(i32* %arg1) local_unnamed_addr {
dec_label_pc_13720:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8388636 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_13720 = load i32, i32* @r6, align 4
  %v12_13720 = load i32, i32* @r7, align 4
  %v15_13720 = load i32, i32* @r8, align 4
  %v18_13720 = load i32, i32* @lr, align 4
  %v2_13724 = load i32, i32* %arg1, align 4
  store i32 %v2_13724, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r8, align 4
  %tmp42 = icmp ugt i32 %v2_13724, 2147479551
  br i1 %tmp42, label %dec_label_pc_13884, label %dec_label_pc_13740

dec_label_pc_13740:                               ; preds = %dec_label_pc_13720
  store i32 ptrtoint (i32* @global_var_1f624.445 to i32), i32* @lr, align 4
  %v1_13744 = sub i32 0, %v2_13724
  %v2_13748 = load i32, i32* @global_var_1f624.445, align 4
  store i32 %v2_13748, i32* %r0.global-to-local, align 4
  %v3_13750 = urem i32 %v1_13744, 4096
  %v2_13754 = icmp eq i32 %v2_13748, 0
  %v2_13758 = add i32 %v3_13750, %v2_13724
  br i1 %v2_13754, label %dec_label_pc_13818, label %dec_label_pc_13760

dec_label_pc_13760:                               ; preds = %dec_label_pc_13740, %dec_label_pc_13818
  %v2_13860 = phi i32 [ %v2_13748, %dec_label_pc_13740 ], [ 0, %dec_label_pc_13818 ]
  %v1_13764 = sub i32 -1, %v2_13860
  %v3_13768 = icmp ult i32 %v2_13758, %v1_13764
  br i1 %v3_13768, label %dec_label_pc_13770, label %dec_label_pc_137a0

dec_label_pc_13770:                               ; preds = %dec_label_pc_13760
  %v3_13774 = load i32, i32* @global_var_1f6f8.258, align 4
  %v1_13778 = add i32 %v3_13774, -8388608
  %v2_13778 = icmp ugt i32 %v3_13774, 8388607
  %v7_13778 = icmp eq i32 %v3_13774, 8388608
  %v2_1377c = xor i1 %v2_13778, true
  %v3_1377c = or i1 %v7_13778, %v2_1377c
  br i1 %v3_1377c, label %bb, label %bb31

bb:                                               ; preds = %dec_label_pc_13770
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_13770, %bb
  %v0_1378812 = phi i32 [ %v2_13724, %dec_label_pc_13770 ], [ 0, %bb ]
  %v2_13780 = xor i1 %v7_13778, true
  %v3_13780 = and i1 %v2_13778, %v2_13780
  br i1 %v3_13780, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  store i32 %v1_13778, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v0_13788 = phi i32 [ %v0_1378812, %bb31 ], [ %v1_13778, %bb32 ]
  %v2_13784 = add i32 %v2_13860, %v2_13758
  store i32 %v2_13784, i32* %r0.global-to-local, align 4
  %v3_13788 = icmp ult i32 %v0_13788, %v2_13784
  br i1 %v3_13788, label %bb34, label %bb35

bb34:                                             ; preds = %bb33
  %v4_1378c = icmp ult i32 %v2_13860, %v3_13774
  store i32 %v3_13774, i32* %stack_var_-28, align 4
  br i1 %v4_1378c, label %.thread3, label %dec_label_pc_13838

bb35:                                             ; preds = %bb33
  store i32 %v3_13774, i32* %stack_var_-28, align 4
  br label %dec_label_pc_13838

.thread3:                                         ; preds = %bb34
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_137a0

dec_label_pc_137a0:                               ; preds = %dec_label_pc_13850, %dec_label_pc_13760, %.thread3
  store i32 ptrtoint (i32* @global_var_1f620.448 to i32), i32* @r6, align 4
  %v2_137a4 = load i32, i32* @global_var_1f620.448, align 4
  %v3_137ac = udiv i32 %v2_137a4, 2
  %v6_137b0 = shl i32 4096, %v3_137ac
  %v3_137b4 = icmp uge i32 %v2_13758, %v6_137b0
  %v2_13758.v6_137b0 = select i1 %v3_137b4, i32 %v2_13758, i32 %v6_137b0
  store i32 %v2_13758.v6_137b0, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v7_137e8 = call i32 @function_1128c(i32 0, i32 %v2_13758.v6_137b0, i32 3, i32 34, i32 -1, i32 0, i32 0)
  store i32 %v7_137e8, i32* %r0.global-to-local, align 4
  %v7_137ec = icmp eq i32 %v7_137e8, -1
  br i1 %v7_137ec, label %bb38, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_137a0
  %v1_137f0 = load i32, i32* @r7, align 4
  %v2_137f0 = load i32, i32* @r8, align 4
  %v3_137f0 = inttoptr i32 %v2_137f0 to i32*
  store i32 %v1_137f0, i32* %v3_137f0, align 4
  %v3_137f4 = load i32, i32* @global_var_1f620.448, align 4
  %v2_137f8 = add i32 %v3_137f4, 1
  %v2_137fc = load i32, i32* @r6, align 4
  %v3_137fc = inttoptr i32 %v2_137fc to i32*
  store i32 %v2_137f8, i32* %v3_137fc, align 4
  store i32 %v7_137e8, i32* %r2.global-to-local, align 4
  br label %bb39

bb38:                                             ; preds = %dec_label_pc_137a0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb39

bb39:                                             ; preds = %.thread7, %dec_label_pc_13884, %dec_label_pc_13870, %bb38
  %v0_13808 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_13808, i32* %r0.global-to-local, align 4
  store i32 %v9_13720, i32* @r6, align 4
  store i32 %v12_13720, i32* @r7, align 4
  store i32 %v15_13720, i32* @r8, align 4
  store i32 %v18_13720, i32* @lr, align 4
  ret i32 %v0_13808

dec_label_pc_13818:                               ; preds = %dec_label_pc_13740
  store i32 0, i32* @global_var_1f624.445, align 4
  br label %dec_label_pc_13760

dec_label_pc_13838:                               ; preds = %bb34, %bb35
  %v2_13838 = ptrtoint i32* %stack_var_-28 to i32
  %v2_1383c = icmp ugt i32* %stack_var_-28, inttoptr (i32 8388607 to i32*)
  %v2_13840 = icmp ne i32* %stack_var_-28, inttoptr (i32 8388608 to i32*)
  %v3_13840 = and i1 %v2_1383c, %v2_13840
  br i1 %v3_13840, label %bb40, label %bb41

bb40:                                             ; preds = %dec_label_pc_13838
  %v6_13840 = ptrtoint i32* %stack_var_-8388636 to i32
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_13838, %bb40
  %storemerge = phi i32 [ %v6_13840, %bb40 ], [ 0, %dec_label_pc_13838 ]
  %v0_13844 = phi i32 [ %v6_13840, %bb40 ], [ 0, %dec_label_pc_13838 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v3_13844 = icmp ult i32 %v0_13844, %v2_13784
  store i32 %v2_13838, i32* %stack_var_-28, align 4
  br i1 %v3_13844, label %dec_label_pc_13850, label %dec_label_pc_13870

dec_label_pc_13850:                               ; preds = %bb41
  %v3_13850 = icmp ult i32 %v2_13860, %v2_13838
  br i1 %v3_13850, label %dec_label_pc_137a0, label %dec_label_pc_13870

dec_label_pc_13870:                               ; preds = %dec_label_pc_13850, %bb41
  store i32 %v2_13860, i32* %r2.global-to-local, align 4
  store i32 %v2_13758, i32* %arg1, align 4
  %v0_1387c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1387c, i32* @global_var_1f624.445, align 4
  br label %bb39

dec_label_pc_13884:                               ; preds = %dec_label_pc_13720
  %v0_13884 = call i32 @function_fb60()
  store i32 %v0_13884, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_13890 = inttoptr i32 %v0_13884 to i32*
  store i32 12, i32* %v2_13890, align 4
  br label %bb39

; uselistorder directives
  uselistorder i32 %v7_137e8, { 1, 0, 2 }
  uselistorder i1 %v2_13778, { 1, 0 }
  uselistorder i32 %v3_13774, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v2_13860, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v2_13758, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v2_13724, { 2, 1, 3, 0, 4 }
  uselistorder i32* %stack_var_-28, { 3, 0, 2, 5, 1, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0, 4, 3, 5, 6, 10, 7, 8, 9 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 7, 3, 5, 6, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_1128c, { 1, 0 }
  uselistorder i32 34, { 0, 2, 5, 3, 4, 6, 8, 1, 7 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_13838, { 1, 0 }
  uselistorder label %bb39, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_137a0, { 0, 2, 1 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_13760, { 1, 0 }
}

define i32 @function_138a4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_138a4:
  %v0_138b4 = load i32, i32* @r3, align 4
  store i32 %v0_138b4, i32* @r2, align 4
  ret i32 %arg2
}

define i32 @function_138c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_138c8:
  %v0_138d8 = load i32, i32* @r0, align 4
  %v3_138d8 = inttoptr i32 %v0_138d8 to i16*
  %v4_138d8 = call i32 @function_11cfc(i16* %v3_138d8, i32 ptrtoint (i32* @global_var_1f62c.450 to i32), i32 8)
  ret i32 %v4_138d8
}

define i32 @function_138ec() local_unnamed_addr {
dec_label_pc_138ec:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_138ec = load i32, i32* @r4, align 4
  %v6_138ec = load i32, i32* @r5, align 4
  %v12_138ec = load i32, i32* @r7, align 4
  %v15_138ec = load i32, i32* @r8, align 4
  %v18_138ec = load i32, i32* @lr, align 4
  %v0_138f0 = load i32, i32* @r0, align 4
  store i32 %v0_138f0, i32* @r8, align 4
  %v0_138fc = load i32, i32* @r1, align 4
  store i32 %v0_138fc, i32* @r7, align 4
  %v0_13900 = load i32, i32* @r2, align 4
  store i32 %v0_13900, i32* @r6, align 4
  %tmp = icmp ult i32 %v0_138f0, 65
  br i1 %tmp, label %dec_label_pc_1391c, label %dec_label_pc_13908

dec_label_pc_13908:                               ; preds = %dec_label_pc_138ec
  %v0_13908 = call i32 @function_fb60()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13914 = inttoptr i32 %v0_13908 to i32*
  store i32 22, i32* %v2_13914, align 4
  %v0_13a58.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a58

dec_label_pc_1391c:                               ; preds = %dec_label_pc_138ec
  %v2_1391c = icmp eq i32 %v0_138fc, 0
  br i1 %v2_1391c, label %bb, label %dec_label_pc_13928

bb:                                               ; preds = %dec_label_pc_1391c
  store i32 0, i32* @r2, align 4
  br label %dec_label_pc_139f8

dec_label_pc_13928:                               ; preds = %dec_label_pc_1391c
  %v1_13928 = inttoptr i32 %v0_138fc to i32*
  %v2_13928 = load i32, i32* %v1_13928, align 4
  %v7_1392c = icmp eq i32 %v2_13928, 1
  store i1 %v7_1392c, i1* @cpsr_z, align 1
  %tmp31 = or i32 %v2_13928, 1
  %tmp32 = icmp eq i32 %tmp31, 1
  br i1 %tmp32, label %dec_label_pc_139b8, label %dec_label_pc_13934

dec_label_pc_13934:                               ; preds = %dec_label_pc_13928
  %v1_13934 = add i32 %v0_138f0, -1
  %v1_13938 = urem i32 %v1_13934, 32
  %v6_13940 = shl i32 1, %v1_13938
  store i32 %v6_13940, i32* %r5.global-to-local, align 4
  %v3_13948 = udiv i32 %v1_13934, 32
  store i32 %v3_13948, i32* %r2.global-to-local, align 4
  %v4_1394c = mul nuw nsw i32 %v3_13948, 4
  %v5_1394c = add i32 %v4_1394c, ptrtoint (i32* @global_var_1f62c.450 to i32)
  store i32 %v5_1394c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13950

dec_label_pc_13950:                               ; preds = %dec_label_pc_13950.dec_label_pc_13950_crit_edge, %dec_label_pc_13934
  %v1_13958 = phi i32 [ %v1_13958.pre, %dec_label_pc_13950.dec_label_pc_13950_crit_edge ], [ %v6_13940, %dec_label_pc_13934 ]
  %v0_13950 = phi i32 [ %v0_13950.pre, %dec_label_pc_13950.dec_label_pc_13950_crit_edge ], [ %v5_1394c, %dec_label_pc_13934 ]
  %v1_13950 = inttoptr i32 %v0_13950 to i32*
  %v2_13950 = load i32, i32* %v1_13950, align 4
  store i32 %v0_13950, i32* %r2.global-to-local, align 4
  %v2_13958 = or i32 %v2_13950, %v1_13958
  %v4_1395c = call i32 @function_128c8(i32 %v2_13950, i32 %v2_13958, i32* %v1_13950)
  %v2_13960 = icmp eq i32 %v4_1395c, 0
  store i1 %v2_13960, i1* @cpsr_z, align 1
  br i1 %v2_13960, label %dec_label_pc_13968, label %dec_label_pc_13950.dec_label_pc_13950_crit_edge

dec_label_pc_13950.dec_label_pc_13950_crit_edge:  ; preds = %dec_label_pc_13950
  %v0_13950.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13958.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13950

dec_label_pc_13968:                               ; preds = %dec_label_pc_13950
  %v3_1396c = load i32, i32* @global_var_1f6ec.253, align 4
  %v2_13970 = icmp eq i32 %v3_1396c, 0
  br i1 %v2_13970, label %dec_label_pc_13978, label %dec_label_pc_139b8

dec_label_pc_13978:                               ; preds = %dec_label_pc_13968
  store i32 ptrtoint (i32* @global_var_1f628.454 to i32), i32* %r4.global-to-local, align 4
  %v2_1397c = load i32, i32* @global_var_1f628.454, align 4
  %v2_13980 = icmp eq i32 %v2_1397c, 0
  br i1 %v2_13980, label %dec_label_pc_13988, label %dec_label_pc_139b8

dec_label_pc_13988:                               ; preds = %dec_label_pc_13978
  store i32 0, i32* @r3, align 4
  %v2_139a0 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_139a0, i32* @r2, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v2_139ac = call i32 @function_138a4(i32 175, i32 1)
  %v1_139b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_139b4 = inttoptr i32 %v1_139b4 to i32*
  store i32 1, i32* %v2_139b4, align 4
  br label %dec_label_pc_139b8

dec_label_pc_139b8:                               ; preds = %dec_label_pc_13978, %dec_label_pc_13968, %dec_label_pc_13928, %dec_label_pc_13988
  %v0_139b8 = load i32, i32* @r7, align 4
  %v1_139b8 = add i32 %v0_139b8, 132
  %v2_139b8 = inttoptr i32 %v1_139b8 to i32*
  %v3_139b8 = load i32, i32* %v2_139b8, align 4
  store i32 81124, i32* @r3, align 4
  store i32 81116, i32* @ip, align 4
  %v1_139c4 = inttoptr i32 %v0_139b8 to i32*
  %v2_139c4 = load i32, i32* %v1_139c4, align 4
  store i32 %v2_139c4, i32* @r5, align 4
  %v1_139c8 = and i32 %v3_139b8, 4
  %v2_139c8 = icmp eq i32 %v1_139c8, 0
  %v2_139cc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_139cc, i32* @r4, align 4
  br i1 %v2_139c8, label %bb25, label %bb24

bb24:                                             ; preds = %dec_label_pc_139b8
  store i32 81124, i32* @ip, align 4
  br label %bb25

bb25:                                             ; preds = %dec_label_pc_139b8, %bb24
  %v1_139d4 = or i32 %v3_139b8, 67108864
  store i32 %v1_139d4, i32* @lr, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v1_139dc = add i32 %v0_139b8, 4
  store i32 %v2_139c4, i32* %stack_var_-52, align 4
  %v3_139f0 = bitcast i32* %stack_var_-40 to i16*
  %v4_139f0 = call i32 @function_11cfc(i16* %v3_139f0, i32 %v1_139dc, i32 8)
  store i32 %v2_139cc, i32* @r2, align 4
  %v0_139f8.pre = load i32, i32* @r6, align 4
  %v0_13a04.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_139f8

dec_label_pc_139f8:                               ; preds = %bb, %bb25
  %v0_13a04 = phi i32 [ %v0_138f0, %bb ], [ %v0_13a04.pre, %bb25 ]
  %v1_139fc = phi i32 [ %v0_13900, %bb ], [ %v0_139f8.pre, %bb25 ]
  %v2_139f8 = icmp eq i32 %v1_139fc, 0
  %v3_13a00 = ptrtoint i32* %stack_var_-72 to i32
  %storemerge = select i1 %v2_139f8, i32 0, i32 %v3_13a00
  store i32 %storemerge, i32* @r3, align 4
  store i32 8, i32* @r5, align 4
  %v2_13a14 = call i32 @function_138a4(i32 174, i32 %v0_13a04)
  store i32 %v2_13a14, i32* @r0, align 4
  %v0_13a18 = call i32 @function_fe0c()
  store i32 %v0_13a18, i32* @r4, align 4
  %v2_13a1c = icmp eq i32 %v0_13a18, 0
  br i1 %v2_13a1c, label %dec_label_pc_13a28, label %bb28

bb28:                                             ; preds = %dec_label_pc_139f8
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a58

dec_label_pc_13a28:                               ; preds = %dec_label_pc_139f8
  %v0_13a28 = load i32, i32* @r6, align 4
  %v2_13a28 = icmp eq i32 %v0_13a28, 0
  br i1 %v2_13a28, label %bb29, label %dec_label_pc_13a34

bb29:                                             ; preds = %dec_label_pc_13a28
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a58

dec_label_pc_13a34:                               ; preds = %dec_label_pc_13a28
  %v3_13a38 = load i32, i32* %stack_var_-72, align 4
  store i32 %v3_13a38, i32* @r3, align 4
  %v1_13a3c = add i32 %v0_13a28, 4
  %v2_13a40 = add i32 %v0_13a28, 132
  %v3_13a40 = inttoptr i32 %v2_13a40 to i32*
  %v0_13a44 = load i32, i32* @r3, align 4
  %v1_13a44 = load i32, i32* @r6, align 4
  %v2_13a44 = inttoptr i32 %v1_13a44 to i32*
  store i32 %v0_13a44, i32* %v2_13a44, align 4
  %v0_13a48 = load i32, i32* @r5, align 4
  store i32 %v0_13a48, i32* %r2.global-to-local, align 4
  %v2_13a4c = ptrtoint i32* %stack_var_-60 to i32
  %v3_13a50 = inttoptr i32 %v1_13a3c to i16*
  %v4_13a50 = call i32 @function_11cfc(i16* %v3_13a50, i32 %v2_13a4c, i32 %v0_13a48)
  %v0_13a54 = load i32, i32* @r4, align 4
  store i32 %v0_13a54, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a58

dec_label_pc_13a58:                               ; preds = %bb29, %bb28, %dec_label_pc_13908, %dec_label_pc_13a34
  %v0_13a58 = phi i32 [ -1, %bb28 ], [ 0, %bb29 ], [ %v0_13a58.pre, %dec_label_pc_13908 ], [ %v0_13a54, %dec_label_pc_13a34 ]
  store i32 %v3_138ec, i32* %r4.global-to-local, align 4
  store i32 %v6_138ec, i32* %r5.global-to-local, align 4
  store i32 %v12_138ec, i32* @r7, align 4
  store i32 %v15_138ec, i32* @r8, align 4
  store i32 %v18_138ec, i32* @lr, align 4
  ret i32 %v0_13a58

; uselistorder directives
  uselistorder i32 %v0_13a28, { 1, 0, 2 }
  uselistorder i32 %v2_13950, { 1, 0 }
  uselistorder i32 %v0_13950, { 1, 0 }
  uselistorder i32 %v3_13948, { 1, 0 }
  uselistorder i32 %v0_138f0, { 1, 2, 0, 3 }
  uselistorder i32 (i16*, i32, i32)* @function_11cfc, { 2, 3, 5, 9, 4, 6, 7, 0, 1, 8 }
  uselistorder i32 (i32, i32)* @function_138a4, { 1, 0 }
  uselistorder label %dec_label_pc_13a58, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_139f8, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %dec_label_pc_139b8, { 3, 0, 1, 2 }
}

define i32 @function_13a7c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13a7c:
  store i32 %arg1, i32* @r0, align 4
  %v1_13a80 = add i32 %arg1, -32
  %tmp = icmp ult i32 %v1_13a80, 3
  br i1 %tmp, label %dec_label_pc_13a9c, label %dec_label_pc_13a90

dec_label_pc_13a90:                               ; preds = %dec_label_pc_13a7c
  %v0_13a98 = call i32 @function_138ec()
  br label %dec_label_pc_13a9c

dec_label_pc_13a9c:                               ; preds = %dec_label_pc_13a7c, %dec_label_pc_13a90
  %v0_13a9c = call i32 @function_fb60()
  %v2_13aa4 = inttoptr i32 %v0_13a9c to i32*
  store i32 22, i32* %v2_13aa4, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 22, { 2, 3, 5, 4, 0, 14, 6, 18, 7, 1, 15, 16, 8, 11, 9, 12, 10, 13, 17 }
  uselistorder i32 ()* @function_fb60, { 34, 33, 7, 14, 13, 12, 11, 10, 35, 32, 31, 6, 5, 4, 3, 9, 1, 0, 2, 15, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 8 }
  uselistorder label %dec_label_pc_13a9c, { 1, 0 }
}

define i32 @function_13ab8(i32 %arg1) local_unnamed_addr {
dec_label_pc_13ab8:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-9 = alloca i8, align 1
  store i32 %arg1, i32* @r4, align 4
  %v0_13ac4 = call i32 @function_13cec()
  store i32 %v0_13ac4, i32* %r0.global-to-local, align 4
  %v2_13ac8 = icmp eq i32 %v0_13ac4, 0
  br i1 %v2_13ac8, label %dec_label_pc_13ad0, label %dec_label_pc_13af8

dec_label_pc_13ad0:                               ; preds = %dec_label_pc_13ab8
  %v0_13ad0 = load i32, i32* @r4, align 4
  store i32 %v0_13ad0, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r2, align 4
  %v1_13adc = add i32 %v0_13ad0, 32
  %v2_13adc = inttoptr i32 %v1_13adc to i32*
  %v3_13adc = load i32, i32* %v2_13adc, align 4
  store i32 %v3_13adc, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v3_13adc)
  %v0_13ae8 = load i32, i32* %r0.global-to-local, align 4
  %v7_13ae8 = icmp eq i32 %v0_13ae8, 1
  br i1 %v7_13ae8, label %bb, label %dec_label_pc_13af8

bb:                                               ; preds = %dec_label_pc_13ad0
  %v4_13aec = load i8, i8* %stack_var_-9, align 1
  %v5_13aec = sext i8 %v4_13aec to i32
  br label %dec_label_pc_13af8

dec_label_pc_13af8:                               ; preds = %dec_label_pc_13ab8, %dec_label_pc_13ad0, %bb
  %storemerge = phi i32 [ %v5_13aec, %bb ], [ -1, %dec_label_pc_13ad0 ], [ -1, %dec_label_pc_13ab8 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_13af8, { 2, 1, 0 }
}

define i32 @function_13b04(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13b04:
  %tmp = ptrtoint i8* %arg1 to i32
  %v1_13b08 = inttoptr i32 %arg2 to i8*
  %v2_13b08 = load i8, i8* %v1_13b08, align 1
  %v3_13b08 = zext i8 %v2_13b08 to i32
  %v3_13b0c = load i8, i8* %arg1, align 1
  %v4_13b0c = zext i8 %v3_13b0c to i32
  %v9_13b10 = icmp eq i8 %v2_13b08, %v3_13b0c
  br i1 %v9_13b10, label %dec_label_pc_13b2c, label %dec_label_pc_13b34

dec_label_pc_13b1c:                               ; preds = %dec_label_pc_13b2c
  %v1_13b1c = add i32 %v0_13b1c, 1
  %v2_13b1c = inttoptr i32 %v1_13b1c to i8*
  %v3_13b1c = load i8, i8* %v2_13b1c, align 1
  %v4_13b1c = zext i8 %v3_13b1c to i32
  %v1_13b20 = add i32 %v0_13b20, 1
  %v2_13b20 = inttoptr i32 %v1_13b20 to i8*
  %v3_13b20 = load i8, i8* %v2_13b20, align 1
  %v4_13b20 = zext i8 %v3_13b20 to i32
  %v9_13b24 = icmp eq i8 %v3_13b1c, %v3_13b20
  br i1 %v9_13b24, label %dec_label_pc_13b2c, label %dec_label_pc_13b34

dec_label_pc_13b2c:                               ; preds = %dec_label_pc_13b04, %dec_label_pc_13b1c
  %v0_13b2c = phi i32 [ %v4_13b1c, %dec_label_pc_13b1c ], [ %v3_13b08, %dec_label_pc_13b04 ]
  %v1_13b349 = phi i32 [ %v4_13b1c, %dec_label_pc_13b1c ], [ %v4_13b0c, %dec_label_pc_13b04 ]
  %v0_13b20 = phi i32 [ %v1_13b20, %dec_label_pc_13b1c ], [ %tmp, %dec_label_pc_13b04 ]
  %v0_13b1c = phi i32 [ %v1_13b1c, %dec_label_pc_13b1c ], [ %arg2, %dec_label_pc_13b04 ]
  %v2_13b2c = icmp eq i32 %v0_13b2c, 0
  br i1 %v2_13b2c, label %dec_label_pc_13b34, label %dec_label_pc_13b1c

dec_label_pc_13b34:                               ; preds = %dec_label_pc_13b1c, %dec_label_pc_13b2c, %dec_label_pc_13b04
  %v1_13b34 = phi i32 [ %v4_13b0c, %dec_label_pc_13b04 ], [ %v4_13b20, %dec_label_pc_13b1c ], [ %v1_13b349, %dec_label_pc_13b2c ]
  %v0_13b34 = phi i32 [ %v3_13b08, %dec_label_pc_13b04 ], [ %v4_13b1c, %dec_label_pc_13b1c ], [ 0, %dec_label_pc_13b2c ]
  %v2_13b34 = sub nsw i32 %v1_13b34, %v0_13b34
  ret i32 %v2_13b34

; uselistorder directives
  uselistorder i32 %v4_13b1c, { 0, 2, 1 }
  uselistorder i32 %v4_13b0c, { 1, 0 }
  uselistorder i32 %v3_13b08, { 1, 0 }
  uselistorder label %dec_label_pc_13b34, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13b2c, { 1, 0 }
}

define i32 @function_13b3c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13b3c:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v3_13b64 = call i32 @function_12360(i32 162, i32 %arg1, i32 %arg2)
  store i32 %v3_13b64, i32* @r0, align 4
  %v0_13b68 = call i32 @function_fe0c()
  ret i32 %v0_13b68

; uselistorder directives
  uselistorder i32 ()* @function_fe0c, { 19, 29, 28, 27, 18, 16, 9, 8, 17, 26, 11, 7, 6, 5, 4, 14, 20, 25, 24, 13, 15, 23, 3, 10, 2, 1, 22, 21, 0, 12 }
  uselistorder i32 (i32, i32, i32)* @function_12360, { 7, 10, 6, 2, 9, 1, 5, 4, 8, 0, 3 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_13b78(i32 %arg1) local_unnamed_addr {
dec_label_pc_13b78:
  %v2_13b7c = load i32, i32* @global_var_1f6e4.332, align 4
  %v3_13b80 = load i32, i32* @r4, align 4
  %v6_13b80 = load i32, i32* @r5, align 4
  %v9_13b80 = load i32, i32* @r6, align 4
  %v15_13b80 = load i32, i32* @r8, align 4
  %v1_13b84 = and i32 %v2_13b7c, 32768
  %v2_13b84 = icmp eq i32 %v1_13b84, 0
  store i32 %arg1, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_128d8.424 to i32), i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f050.423 to i32), i32* @r6, align 4
  store i32 ptrtoint (i32* @global_var_1f04c.419 to i32), i32* @r4, align 4
  br i1 %v2_13b84, label %dec_label_pc_13c38, label %dec_label_pc_13ba0

dec_label_pc_13ba0:                               ; preds = %dec_label_pc_13b78
  %v3_13ba8 = load i32, i32* @global_var_1f6f8.258, align 4
  store i32 sub (i32 76056, i32 ptrtoint (i32* @global_var_128d8.424 to i32)), i32* @global_var_1f050.423, align 4
  store i32 sub (i32 75968, i32 ptrtoint (i32* @global_var_12884.420 to i32)), i32* @global_var_1f04c.419, align 4
  %v1_13c283 = inttoptr i32 %v3_13ba8 to i32*
  %v2_13c284 = load i32, i32* %v1_13c283, align 4
  %v2_13c2c6 = icmp eq i32 %v2_13c284, 0
  br i1 %v2_13c2c6, label %dec_label_pc_13c34, label %dec_label_pc_13bcc

dec_label_pc_13bcc:                               ; preds = %dec_label_pc_13ba0, %dec_label_pc_13c24
  %v0_13bd4 = phi i32 [ %v1_13c24, %dec_label_pc_13c24 ], [ %v3_13ba8, %dec_label_pc_13ba0 ]
  %v0_13bcc = phi i32 [ %v2_13c28, %dec_label_pc_13c24 ], [ %v2_13c284, %dec_label_pc_13ba0 ]
  %v7_13bcc = icmp eq i32 %v0_13bcc, 15
  br i1 %v7_13bcc, label %dec_label_pc_13bd4, label %dec_label_pc_13c24

dec_label_pc_13bd4:                               ; preds = %dec_label_pc_13bcc
  %v1_13bd4 = add i32 %v0_13bd4, 4
  %v2_13bd4 = inttoptr i32 %v1_13bd4 to i32*
  %v3_13bd4 = load i32, i32* %v2_13bd4, align 4
  %v1_13bd8 = inttoptr i32 %v3_13bd4 to i8*
  %v2_13bd8 = load i8, i8* %v1_13bd8, align 1
  %v7_13bdc = icmp eq i8 %v2_13bd8, 118
  br i1 %v7_13bdc, label %dec_label_pc_13be4, label %dec_label_pc_13c34

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13bd4
  %v1_13be4 = add i32 %v3_13bd4, 1
  %v2_13be4 = inttoptr i32 %v1_13be4 to i8*
  %v3_13be4 = load i8, i8* %v2_13be4, align 1
  %v7_13be8 = icmp eq i8 %v3_13be4, 54
  br i1 %v7_13be8, label %dec_label_pc_13bf0, label %dec_label_pc_13c34

dec_label_pc_13bf0:                               ; preds = %dec_label_pc_13be4
  %v1_13bf0 = add i32 %v3_13bd4, 2
  %v2_13bf0 = inttoptr i32 %v1_13bf0 to i8*
  %v3_13bf0 = load i8, i8* %v2_13bf0, align 1
  %v4_13bf0 = zext i8 %v3_13bf0 to i32
  %v1_13bf4 = add nsw i32 %v4_13bf0, -48
  %tmp = icmp ult i32 %v1_13bf4, 10
  br i1 %tmp, label %dec_label_pc_13c34, label %dec_label_pc_13c00

dec_label_pc_13c00:                               ; preds = %dec_label_pc_13bf0
  store i32 sub (i32 76020, i32 ptrtoint (i32* @global_var_128d8.424 to i32)), i32* @global_var_1f050.423, align 4
  store i32 sub (i32 75960, i32 ptrtoint (i32* @global_var_12884.420 to i32)), i32* @global_var_1f04c.419, align 4
  br label %dec_label_pc_13c34

dec_label_pc_13c24:                               ; preds = %dec_label_pc_13bcc
  %v1_13c24 = add i32 %v0_13bd4, 8
  %v1_13c28 = inttoptr i32 %v1_13c24 to i32*
  %v2_13c28 = load i32, i32* %v1_13c28, align 4
  %v2_13c2c = icmp eq i32 %v2_13c28, 0
  br i1 %v2_13c2c, label %dec_label_pc_13c28.dec_label_pc_13c34.loopexit_crit_edge, label %dec_label_pc_13bcc

dec_label_pc_13c38:                               ; preds = %dec_label_pc_13b78
  %v3_13c3c = load i32, i32* inttoptr (i32 -61444 to i32*), align 4
  store i32 sub (i32 -61472, i32 ptrtoint (i32* @global_var_1294c.427 to i32)), i32* @global_var_1f054.426, align 4
  store i32 sub (i32 -61536, i32 ptrtoint (i32* @global_var_12884.420 to i32)), i32* @global_var_1f04c.419, align 4
  store i32 sub (i32 -61504, i32 ptrtoint (i32* @global_var_128d8.424 to i32)), i32* @global_var_1f050.423, align 4
  %v7_13c70 = icmp sgt i32 %v3_13c3c, 1
  br i1 %v7_13c70, label %bb19, label %bb

bb:                                               ; preds = %dec_label_pc_13c38
  call void @llvm.trap()
  unreachable

bb19:                                             ; preds = %dec_label_pc_13c38
  %v7_13c74 = icmp eq i32 %v3_13c3c, 2
  br i1 %v7_13c74, label %bb20, label %dec_label_pc_13c34

bb20:                                             ; preds = %bb19
  store i32 sub (i32 75920, i32 ptrtoint (i32* @global_var_12884.420 to i32)), i32* @global_var_1f04c.419, align 4
  br label %dec_label_pc_13c34

dec_label_pc_13c28.dec_label_pc_13c34.loopexit_crit_edge: ; preds = %dec_label_pc_13c24
  br label %dec_label_pc_13c34

dec_label_pc_13c34:                               ; preds = %bb19, %dec_label_pc_13ba0, %dec_label_pc_13c28.dec_label_pc_13c34.loopexit_crit_edge, %dec_label_pc_13be4, %dec_label_pc_13bd4, %dec_label_pc_13bf0, %dec_label_pc_13c00, %bb20
  store i32 %v3_13b80, i32* @r4, align 4
  store i32 %v6_13b80, i32* @r5, align 4
  store i32 %v9_13b80, i32* @r6, align 4
  store i32 %v15_13b80, i32* @r8, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v2_13c28, { 1, 0 }
  uselistorder i32 %v1_13c24, { 1, 0 }
  uselistorder i32 %v0_13bd4, { 1, 0 }
  uselistorder void ()* @llvm.trap, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 10, { 0, 4, 3, 11, 50, 5, 51, 39, 1, 12, 32, 33, 13, 30, 31, 25, 26, 6, 34, 27, 28, 14, 2, 29, 35, 15, 36, 16, 37, 38, 17, 18, 19, 7, 40, 41, 42, 43, 20, 21, 44, 45, 46, 47, 48, 8, 49, 52, 53, 9, 54, 55, 56, 22, 57, 10, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 23, 68, 24 }
  uselistorder i32* @global_var_1f04c.419, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* @global_var_1f050.423, { 0, 2, 1, 3, 4 }
  uselistorder label %dec_label_pc_13c34, { 2, 7, 0, 6, 5, 3, 4, 1 }
  uselistorder label %dec_label_pc_13bcc, { 1, 0 }
}

define i32 @function_13cdc() local_unnamed_addr {
dec_label_pc_13cdc:
  %v0_13ce8 = load i32, i32* @r0, align 4
  ret i32 %v0_13ce8
}

define i32 @function_13cec() local_unnamed_addr {
dec_label_pc_13cec:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13cec = load i32, i32* @r4, align 4
  store i32 %v3_13cec, i32* %stack_var_-8, align 4
  %v0_13cf0 = load i32, i32* @r0, align 4
  %v1_13cf0 = add i32 %v0_13cf0, 74
  %v2_13cf0 = inttoptr i32 %v1_13cf0 to i8*
  %v3_13cf0 = load i8, i8* %v2_13cf0, align 1
  %v4_13cf0 = zext i8 %v3_13cf0 to i32
  store i32 %v4_13cf0, i32* @ip, align 4
  %v1_13cf4 = add i32 %v0_13cf0, 20
  %v2_13cf4 = inttoptr i32 %v1_13cf4 to i32*
  %v3_13cf4 = load i32, i32* %v2_13cf4, align 4
  %v1_13cf8 = add i32 %v0_13cf0, 44
  %v2_13cf8 = inttoptr i32 %v1_13cf8 to i32*
  %v3_13cf8 = load i32, i32* %v2_13cf8, align 4
  %v1_13cfc = add nsw i32 %v4_13cf0, -1
  %v2_13d00 = or i32 %v1_13cfc, %v4_13cf0
  store i32 %v2_13d00, i32* %r3.global-to-local, align 4
  %v3_13d04 = icmp uge i32 %v3_13cf4, %v3_13cf8
  store i1 %v3_13d04, i1* %cpsr_c.global-to-local, align 1
  %v9_13d04 = icmp eq i32 %v3_13cf4, %v3_13cf8
  store i1 %v9_13d04, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_13cf0, i32* %r4.global-to-local, align 4
  %v1_13d0c = trunc i32 %v2_13d00 to i8
  store i8 %v1_13d0c, i8* %v2_13cf0, align 1
  %v0_13d10 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_13d10 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_13d10 = xor i1 %v1_13d10, true
  %v3_13d10 = and i1 %v0_13d10, %v2_13d10
  br i1 %v3_13d10, label %bb, label %dec_label_pc_13cec..thread8_crit_edge

dec_label_pc_13cec..thread8_crit_edge:            ; preds = %dec_label_pc_13cec
  %v0_13d20.pre = load i32, i32* @ip, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_13cec
  %v4_13d18 = load i32, i32* @r0, align 4
  %v5_13d18 = add i32 %v4_13d18, 36
  %v6_13d18 = inttoptr i32 %v5_13d18 to i32*
  %v7_13d18 = load i32, i32* %v6_13d18, align 4
  store i32 %v7_13d18, i32* @ip, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13cec..thread8_crit_edge, %bb
  %v0_13d20 = phi i32 [ %v0_13d20.pre, %dec_label_pc_13cec..thread8_crit_edge ], [ %v7_13d18, %bb ]
  call void @__pseudo_cond_branch(i1 %v3_13d10, i32 %v0_13d20)
  %v0_13d24 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d24 = inttoptr i32 %v0_13d24 to i32*
  %v2_13d24 = load i32, i32* %v1_13d24, align 4
  store i32 %v2_13d24, i32* @r2, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13d2c = and i32 %v2_13d24, 4
  %v2_13d2c = icmp eq i32 %v1_13d2c, 0
  store i1 %v2_13d2c, i1* %cpsr_z.global-to-local, align 1
  %v2_13d30 = add i32 %v0_13d24, 20
  %v3_13d30 = inttoptr i32 %v2_13d30 to i32*
  store i32 0, i32* %v3_13d30, align 4
  %v0_13d34 = load i32, i32* %r3.global-to-local, align 4
  %v1_13d34 = load i32, i32* %r4.global-to-local, align 4
  %v2_13d34 = add i32 %v1_13d34, 16
  %v3_13d34 = inttoptr i32 %v2_13d34 to i32*
  store i32 %v0_13d34, i32* %v3_13d34, align 4
  %v0_13d38 = load i32, i32* %r3.global-to-local, align 4
  %v1_13d38 = load i32, i32* %r4.global-to-local, align 4
  %v2_13d38 = add i32 %v1_13d38, 28
  %v3_13d38 = inttoptr i32 %v2_13d38 to i32*
  store i32 %v0_13d38, i32* %v3_13d38, align 4
  br i1 %v2_13d2c, label %dec_label_pc_13d4c, label %.thread1

.thread1:                                         ; preds = %.thread8
  %v1_13d3c = load i32, i32* @r2, align 4
  %v2_13d3c = or i32 %v1_13d3c, 32
  store i32 %v2_13d3c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13d44 = load i32, i32* %r4.global-to-local, align 4
  %v3_13d44 = inttoptr i32 %v2_13d44 to i32*
  store i32 %v2_13d3c, i32* %v3_13d44, align 4
  br label %bb12

dec_label_pc_13d4c:                               ; preds = %.thread8
  %v0_13d4c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d4c = add i32 %v0_13d4c, 44
  %v1_13d50 = inttoptr i32 %v1_13d4c to i32*
  %v2_13d50 = load i32, i32* %v1_13d50, align 4
  %v3_13d50 = add i32 %v0_13d4c, 48
  %v4_13d50 = inttoptr i32 %v3_13d50 to i32*
  %v5_13d50 = load i32, i32* %v4_13d50, align 4
  %v2_13d54 = add i32 %v5_13d50, %v2_13d50
  store i32 %v2_13d54, i32* %r3.global-to-local, align 4
  %v0_13d58 = load i32, i32* @r2, align 4
  %v1_13d58 = and i32 %v0_13d58, 16
  store i32 %v1_13d58, i32* %r0.global-to-local, align 4
  %v2_13d58 = icmp eq i32 %v1_13d58, 0
  store i1 %v2_13d58, i1* %cpsr_z.global-to-local, align 1
  %v2_13d5c = add i32 %v0_13d4c, 4
  %v3_13d5c = inttoptr i32 %v2_13d5c to i32*
  store i32 %v2_13d54, i32* %v3_13d5c, align 4
  %v0_13d60 = load i32, i32* %r3.global-to-local, align 4
  %v1_13d60 = load i32, i32* %r4.global-to-local, align 4
  %v2_13d60 = add i32 %v1_13d60, 8
  %v3_13d60 = inttoptr i32 %v2_13d60 to i32*
  store i32 %v0_13d60, i32* %v3_13d60, align 4
  br i1 %v2_13d58, label %bb12, label %bb11

bb11:                                             ; preds = %dec_label_pc_13d4c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %bb12

bb12:                                             ; preds = %.thread1, %dec_label_pc_13d4c, %bb11
  %v2_13d68 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d68, i32* @r4, align 4
  %v1_13d6c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_13d6c

; uselistorder directives
  uselistorder i32* %r4.global-to-local, { 0, 4, 1, 2, 3, 5, 6 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 48, { 0, 3, 1, 2 }
  uselistorder i32 44, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder label %bb12, { 2, 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_13d70() local_unnamed_addr {
dec_label_pc_13d70:
  %v0_13d78 = call i32 @function_13e04()
  ret i32 %v0_13d78
}

define i32 @function_13d88(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d88:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_13d8c = icmp eq i32 %arg1, 0
  store i1 %v2_13d8c, i1* @cpsr_z, align 1
  br i1 %v2_13d8c, label %dec_label_pc_13df8, label %dec_label_pc_13d98

dec_label_pc_13d98:                               ; preds = %dec_label_pc_13d88
  %v1_13d98 = add i32 %arg1, 76
  %v2_13d98 = inttoptr i32 %v1_13d98 to i32*
  %v3_13d98 = load i32, i32* %v2_13d98, align 4
  %v3_13da0 = icmp sgt i32 %v3_13d98, -1
  call void @__pseudo_cond_branch(i1 %v3_13da0, i32 ptrtoint (i32* @global_var_13f10.474 to i32))
  %v0_13da4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13da4 = add i32 %v0_13da4, 20
  %v2_13da4 = inttoptr i32 %v1_13da4 to i32*
  %v3_13da4 = load i32, i32* %v2_13da4, align 4
  %v1_13da8 = add i32 %v0_13da4, 28
  %v2_13da8 = inttoptr i32 %v1_13da8 to i32*
  %v3_13da8 = load i32, i32* %v2_13da8, align 4
  %tmp = icmp ugt i32 %v3_13da4, %v3_13da8
  br i1 %tmp, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_13d98
  store i32 %v0_13da4, i32* %r0.global-to-local, align 4
  %v5_13dbc = add i32 %v0_13da4, 36
  %v6_13dbc = inttoptr i32 %v5_13dbc to i32*
  %v7_13dbc = load i32, i32* %v6_13dbc, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_13d98, %bb
  %.04 = phi i32 [ %v7_13dbc, %bb ], [ undef, %dec_label_pc_13d98 ]
  call void @__pseudo_cond_branch(i1 %tmp, i32 %.04)
  %v0_13dc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13dc8 = add i32 %v0_13dc8, 4
  %v2_13dc8 = inttoptr i32 %v1_13dc8 to i32*
  %v3_13dc8 = load i32, i32* %v2_13dc8, align 4
  %v1_13dcc = add i32 %v0_13dc8, 8
  %v2_13dcc = inttoptr i32 %v1_13dcc to i32*
  %v3_13dcc = load i32, i32* %v2_13dcc, align 4
  %v3_13dd0 = icmp ult i32 %v3_13dc8, %v3_13dcc
  %v9_13dd0 = icmp eq i32 %v3_13dc8, %v3_13dcc
  store i1 %v9_13dd0, i1* @cpsr_z, align 1
  br i1 %v3_13dd0, label %dec_label_pc_13dd8, label %dec_label_pc_13df8

dec_label_pc_13dd8:                               ; preds = %.thread6
  store i32 %v0_13dc8, i32* %r0.global-to-local, align 4
  %v1_13dec = add i32 %v0_13dc8, 40
  %v2_13dec = inttoptr i32 %v1_13dec to i32*
  %v3_13dec = load i32, i32* %v2_13dec, align 4
  call void @__pseudo_branch(i32 %v3_13dec)
  br label %dec_label_pc_13df8

dec_label_pc_13df8:                               ; preds = %.thread6, %dec_label_pc_13d88, %dec_label_pc_13dd8
  %v1_13e00 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_13e00

; uselistorder directives
  uselistorder i1 %tmp, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32 40, { 3, 4, 0, 5, 6, 1, 7, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 28, { 10, 28, 29, 11, 30, 31, 43, 44, 8, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0, 12, 1, 13, 2, 14, 3, 15, 4, 16, 5, 17, 6, 18, 7, 9, 20, 19, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 20, { 19, 60, 61, 95, 96, 97, 98, 87, 88, 89, 90, 91, 92, 93, 94, 4, 5, 24, 23, 6, 20, 7, 21, 8, 22, 25, 26, 9, 27, 10, 28, 0, 29, 18, 30, 31, 32, 34, 1, 33, 35, 36, 37, 38, 40, 41, 11, 39, 43, 42, 44, 45, 47, 48, 12, 46, 50, 49, 51, 52, 53, 54, 56, 57, 13, 55, 59, 58, 62, 63, 64, 65, 14, 66, 68, 67, 69, 70, 71, 73, 15, 72, 74, 75, 76, 79, 2, 77, 16, 78, 80, 82, 85, 3, 83, 17, 84, 86, 81 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_13df8, { 2, 0, 1 }
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_13e04() local_unnamed_addr {
dec_label_pc_13e04:
  %tmp = load i32, i32* @r0, align 4
  ret i32 %tmp
}

define i32 @function_13e04.1(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e04:
  %stack_var_-8 = alloca i32, align 4
  %v3_13e04 = load i32, i32* @r4, align 4
  store i32 %v3_13e04, i32* %stack_var_-8, align 4
  %v6_13e04 = load i32, i32* @lr, align 4
  %v0_13e08 = call i32 @function_13e68()
  %storemerge.in1 = inttoptr i32 %v0_13e08 to i32*
  %storemerge2 = load i32, i32* %storemerge.in1, align 4
  store i32 %storemerge2, i32* @r4, align 4
  %v2_13e1c4 = icmp eq i32 %storemerge2, 0
  br i1 %v2_13e1c4, label %dec_label_pc_13e24, label %dec_label_pc_13e14

dec_label_pc_13e14:                               ; preds = %dec_label_pc_13e04, %dec_label_pc_13e14
  %storemerge5 = phi i32 [ %storemerge, %dec_label_pc_13e14 ], [ %storemerge2, %dec_label_pc_13e04 ]
  %v1_13e14 = call i32 @function_13d88(i32 %storemerge5)
  %v0_13e18 = load i32, i32* @r4, align 4
  %v1_13e18 = add i32 %v0_13e18, 56
  %storemerge.in = inttoptr i32 %v1_13e18 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v2_13e1c = icmp eq i32 %storemerge, 0
  br i1 %v2_13e1c, label %dec_label_pc_13e24, label %dec_label_pc_13e14

dec_label_pc_13e24:                               ; preds = %dec_label_pc_13e14, %dec_label_pc_13e04
  %v2_13e28 = load i32, i32* @global_var_1f634.476, align 4
  %v1_13e2c = call i32 @function_13d88(i32 %v2_13e28)
  %v2_13e34 = load i32, i32* @global_var_1f634.476, align 4
  %v2_13e38 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e38, i32* @r4, align 4
  store i32 %v6_13e04, i32* @lr, align 4
  %v1_13e3c = call i32 @function_13d88(i32 %v2_13e34)
  %v0_13e40 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13e40, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13e24
  %v2_13e40 = load i32, i32* @r4, align 4
  %v3_13e40 = load i32, i32* @r6, align 4
  %v8_13e40 = lshr i32 %v2_13e40, %v3_13e40
  %v9_13e40 = and i32 %v8_13e40, %arg1
  call void @__pseudo_branch(i32 %v9_13e40)
  %v0_13e44.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13e44.pr, label %bb9, label %.thread

bb9:                                              ; preds = %bb
  %v2_13e44 = load i32, i32* @r4, align 4
  %v3_13e44 = load i32, i32* @r6, align 4
  %v8_13e44 = lshr i32 %v2_13e44, %v3_13e44
  %v9_13e44 = and i32 %v8_13e44, %arg1
  call void @__pseudo_branch(i32 %v9_13e44)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13e24, %bb, %bb9
  %v2_13e54 = call i32 @function_12290(i32* nonnull @global_var_1f63c.479)
  ret i32 %v2_13e54

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 (i32)* @function_13d88, { 2, 1, 0 }
  uselistorder label %.thread, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13e14, { 1, 0 }
}

define i32 @function_13e68() local_unnamed_addr {
dec_label_pc_13e68:
  %v2_13e74 = call i32 @function_122fc(i32* nonnull @global_var_1f63c.479)
  ret i32 ptrtoint (i32* @global_var_1f638.482 to i32)
}

define i32 @function_13e90(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13e90:
  ret i32 %arg2
}

define i32 @function_13eb0(i32 %arg1) local_unnamed_addr {
dec_label_pc_13eb0:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13eb0 = load i32, i32* @r4, align 4
  store i32 %v3_13eb0, i32* %stack_var_-8, align 4
  %v1_13eb4 = add i32 %arg1, 76
  store i32 %v1_13eb4, i32* %r4.global-to-local, align 4
  %v0_13eb8 = call i32 @function_12874()
  store i32 %v0_13eb8, i32* @r0, align 4
  %v2_13ec0 = add i32 %v0_13eb8, 76
  %v3_13ec0 = inttoptr i32 %v2_13ec0 to i32*
  store i32 0, i32* %v3_13ec0, align 4
  %v0_13ec4 = call i32 @function_12874()
  %v1_13ec8 = add i32 %v0_13ec4, 80
  %v2_13ec8 = inttoptr i32 %v1_13ec8 to i32*
  %v3_13ec8 = load i32, i32* %v2_13ec8, align 4
  %v2_13ecc = icmp eq i32 %v3_13ec8, 0
  br i1 %v2_13ecc, label %dec_label_pc_13f08, label %dec_label_pc_13ed4

dec_label_pc_13ed4:                               ; preds = %dec_label_pc_13eb0
  %v0_13ed8 = load i32, i32* %r4.global-to-local, align 4
  %v4_13ee4 = call i32 @function_13e90(i32 240, i32 %v0_13ed8, i32 129, i32 1)
  %v4_13eec = icmp eq i32 %v4_13ee4, -38
  br i1 %v4_13eec, label %dec_label_pc_13ef0, label %dec_label_pc_13f08

dec_label_pc_13ef0:                               ; preds = %dec_label_pc_13ed4
  %v0_13ef4 = load i32, i32* %r4.global-to-local, align 4
  %v2_13f00 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13f00, i32* %r4.global-to-local, align 4
  %v4_13f04 = call i32 @function_13e90(i32 240, i32 %v0_13ef4, i32 1, i32 1)
  br label %dec_label_pc_13f08

dec_label_pc_13f08:                               ; preds = %dec_label_pc_13ed4, %dec_label_pc_13eb0, %dec_label_pc_13ef0
  %v1_13f0c = phi i32 [ %v4_13ee4, %dec_label_pc_13ed4 ], [ %v0_13ec4, %dec_label_pc_13eb0 ], [ %v4_13f04, %dec_label_pc_13ef0 ]
  %v2_13f08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13f08, i32* %r4.global-to-local, align 4
  ret i32 %v1_13f0c

; uselistorder directives
  uselistorder i32 -38, { 9, 10, 11, 12, 17, 6, 14, 5, 13, 8, 7, 16, 15, 0, 1, 2, 3, 4 }
  uselistorder i32 (i32, i32, i32, i32)* @function_13e90, { 1, 0 }
  uselistorder i32 129, { 0, 1, 2, 3, 4, 13, 5, 6, 9, 10, 7, 8, 11, 12 }
  uselistorder i32 240, { 2, 4, 0, 5, 1, 3, 6, 15, 16, 21, 19, 20, 17, 18, 7, 8, 9, 10, 11, 12, 14, 13 }
  uselistorder i32 ()* @function_12874, { 26, 25, 24, 28, 27, 23, 22, 1, 0, 3, 2, 5, 4, 21, 20, 19, 18, 13, 12, 11, 10, 17, 16, 15, 14, 9, 8, 7, 6 }
  uselistorder label %dec_label_pc_13f08, { 2, 0, 1 }
}

define i32 @function_13f10(i32 %arg1) local_unnamed_addr {
dec_label_pc_13f10:
  %v0_13f18 = call i32 @function_1293c()
  %v1_13f1c = add i32 %v0_13f18, -176
  %v2_13f1c = inttoptr i32 %v1_13f1c to i32*
  %v3_13f1c = load i32, i32* %v2_13f1c, align 4
  store i32 %v3_13f1c, i32* @r5, align 4
  %v1_13f20 = add i32 %arg1, 76
  %v2_13f20 = inttoptr i32 %v1_13f20 to i32*
  %v3_13f20 = load i32, i32* %v2_13f20, align 4
  %v9_13f24 = icmp eq i32 %v3_13f20, %v3_13f1c
  store i1 %v9_13f24, i1* @cpsr_z, align 1
  br i1 %v9_13f24, label %dec_label_pc_13f74, label %dec_label_pc_13f30

dec_label_pc_13f30:                               ; preds = %dec_label_pc_13f10
  %v1_13f30 = add i32 %arg1, 80
  store i32 %v1_13f30, i32* @r6, align 4
  store i32 %v1_13f20, i32* @r4, align 4
  %v4_13f4411 = call i32 @function_128c8(i32 0, i32 %v3_13f1c, i32* %v2_13f20)
  %v2_13f4813 = icmp eq i32 %v4_13f4411, 0
  br i1 %v2_13f4813, label %dec_label_pc_13f74, label %dec_label_pc_13f54

dec_label_pc_13f54:                               ; preds = %dec_label_pc_13f30, %dec_label_pc_13f38.backedge
  %v0_13f54 = load i32, i32* @r4, align 4
  %v1_13f54 = inttoptr i32 %v0_13f54 to i32*
  %v2_13f54 = load i32, i32* %v1_13f54, align 4
  store i32 %v2_13f54, i32* @r2, align 4
  %v2_13f58 = icmp eq i32 %v2_13f54, 0
  store i1 %v2_13f58, i1* @cpsr_z, align 1
  br i1 %v2_13f58, label %dec_label_pc_13f38.backedge, label %dec_label_pc_13f60

dec_label_pc_13f60:                               ; preds = %dec_label_pc_13f54
  %v0_13f64 = load i32, i32* @r6, align 4
  store i32 1, i32* @r3, align 4
  %v5_13f6c = call i32 @function_12424(i32* %v1_13f54, i32 %v0_13f64)
  %v0_13f3c.pre.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13f38.backedge

dec_label_pc_13f38.backedge:                      ; preds = %dec_label_pc_13f60, %dec_label_pc_13f54
  %v0_13f3c.pre = phi i32 [ %v0_13f3c.pre.pre, %dec_label_pc_13f60 ], [ %v0_13f54, %dec_label_pc_13f54 ]
  %v0_13f38.pre = load i32, i32* @r5, align 4
  %v3_13f44 = inttoptr i32 %v0_13f3c.pre to i32*
  %v4_13f44 = call i32 @function_128c8(i32 0, i32 %v0_13f38.pre, i32* %v3_13f44)
  %v2_13f48 = icmp eq i32 %v4_13f44, 0
  br i1 %v2_13f48, label %dec_label_pc_13f74, label %dec_label_pc_13f54

dec_label_pc_13f74:                               ; preds = %dec_label_pc_13f30, %dec_label_pc_13f38.backedge, %dec_label_pc_13f10
  %storemerge = phi i32 [ 0, %dec_label_pc_13f10 ], [ 1, %dec_label_pc_13f38.backedge ], [ 1, %dec_label_pc_13f30 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 (i32*, i32)* @function_12424, { 1, 0, 5, 6, 2, 3, 4, 7 }
  uselistorder i32 (i32, i32, i32*)* @function_128c8, { 5, 0, 4, 6, 1, 7, 3, 21, 22, 15, 16, 17, 8, 9, 10, 11, 2, 12, 13, 14, 18, 19, 20 }
  uselistorder i32 ()* @function_1293c, { 2, 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13f74, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f54, { 1, 0 }
}

define i32 @function_13f7c() local_unnamed_addr {
dec_label_pc_13f7c:
  %v0_13f7c = load i32, i32* @r1, align 4
  %v1_13f7c = icmp slt i32 %v0_13f7c, 0
  %v2_13f7c = icmp eq i32 %v0_13f7c, 0
  %v0_13f80 = load i32, i32* @r0, align 4
  %v2_13f80 = xor i32 %v0_13f80, %v0_13f7c
  br i1 %v2_13f7c, label %dec_label_pc_14094, label %dec_label_pc_13f88

dec_label_pc_13f88:                               ; preds = %dec_label_pc_13f7c
  br i1 %v1_13f7c, label %bb, label %thread-pre-split

bb:                                               ; preds = %dec_label_pc_13f88
  %v2_13f88 = sub i32 0, %v0_13f7c
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_13f88, %bb
  %v1_14054 = phi i32 [ %v2_13f88, %bb ], [ %v0_13f7c, %dec_label_pc_13f88 ]
  %v1_13f8c = add i32 %v1_14054, -1
  %v7_13f8c = icmp eq i32 %v1_14054, 1
  br i1 %v7_13f8c, label %dec_label_pc_14034, label %dec_label_pc_13f94

dec_label_pc_13f94:                               ; preds = %thread-pre-split
  %v1_13f94 = icmp slt i32 %v0_13f80, 0
  br i1 %v1_13f94, label %bb84, label %bb85

bb84:                                             ; preds = %dec_label_pc_13f94
  %v2_13f98 = sub i32 0, %v0_13f80
  br label %bb85

bb85:                                             ; preds = %dec_label_pc_13f94, %bb84
  %v0_14088 = phi i32 [ %v0_13f80, %dec_label_pc_13f94 ], [ %v2_13f98, %bb84 ]
  %v3_13f9c = icmp uge i32 %v0_14088, %v1_14054
  %v9_13f9c = icmp eq i32 %v0_14088, %v1_14054
  %v2_13fa0 = xor i1 %v3_13f9c, true
  %v3_13fa0 = or i1 %v9_13f9c, %v2_13fa0
  br i1 %v3_13fa0, label %dec_label_pc_14040, label %dec_label_pc_13fa4

dec_label_pc_13fa4:                               ; preds = %bb85
  %v2_13fa4 = and i32 %v1_13f8c, %v1_14054
  %v4_13fa4 = icmp eq i32 %v2_13fa4, 0
  br i1 %v4_13fa4, label %dec_label_pc_14050, label %dec_label_pc_13fac

dec_label_pc_13fac:                               ; preds = %dec_label_pc_13fa4
  %v3_13fac = icmp ult i32 %v1_14054, 536870912
  br i1 %v3_13fac, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_13fac
  %v4_13fb0 = mul i32 %v1_14054, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_13fac, %.thread
  %v0_13fd0.pr40.ph = phi i32 [ %v4_13fb0, %.thread ], [ %v1_14054, %dec_label_pc_13fac ]
  %storemerge142 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_13fac ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb88
  %v0_13fd0.pr40 = phi i32 [ %v4_13fc4, %bb88 ], [ %v0_13fd0.pr40.ph, %.preheader.preheader ]
  %v1_13fc8 = phi i32 [ %v4_13fc8, %bb88 ], [ %storemerge142, %.preheader.preheader ]
  %v2_13fbc = icmp ugt i32 %v0_13fd0.pr40, 268435455
  br i1 %v2_13fbc, label %.thread3, label %bb86

.thread3:                                         ; preds = %.preheader
  br label %dec_label_pc_13fd0thread-pre-split.loopexit

bb86:                                             ; preds = %.preheader
  %v4_13fc0 = icmp ult i32 %v0_13fd0.pr40, %v0_14088
  br i1 %v4_13fc0, label %bb87, label %dec_label_pc_13fd0thread-pre-split.loopexit.loopexit

bb87:                                             ; preds = %bb86
  %v2_13fc4 = and i32 %v0_13fd0.pr40, 268435456
  %v3_13fc4 = icmp eq i32 %v2_13fc4, 0
  %v4_13fc4 = mul i32 %v0_13fd0.pr40, 16
  br i1 %v3_13fc4, label %bb88, label %dec_label_pc_13fd0.loopexit

bb88:                                             ; preds = %bb87
  %v2_13fc8 = and i32 %v1_13fc8, 268435456
  %v3_13fc8 = icmp eq i32 %v2_13fc8, 0
  %v4_13fc8 = mul i32 %v1_13fc8, 16
  br i1 %v3_13fc8, label %.preheader, label %dec_label_pc_13fd0thread-pre-split.loopexit.loopexit

dec_label_pc_13fd0thread-pre-split.loopexit.loopexit: ; preds = %bb88, %bb86
  %v1_13fdc52.ph = phi i32 [ %v1_13fc8, %bb86 ], [ %v4_13fc8, %bb88 ]
  %v0_13fd0.pr42.ph = phi i32 [ %v0_13fd0.pr40, %bb86 ], [ %v4_13fc4, %bb88 ]
  br label %dec_label_pc_13fd0thread-pre-split.loopexit

dec_label_pc_13fd0thread-pre-split.loopexit:      ; preds = %dec_label_pc_13fd0thread-pre-split.loopexit.loopexit, %.thread3
  %v1_13fdc52 = phi i32 [ %v1_13fc8, %.thread3 ], [ %v1_13fdc52.ph, %dec_label_pc_13fd0thread-pre-split.loopexit.loopexit ]
  %v0_13fd0.pr42 = phi i32 [ %v0_13fd0.pr40, %.thread3 ], [ %v0_13fd0.pr42.ph, %dec_label_pc_13fd0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13fd0thread-pre-split

dec_label_pc_13fd0thread-pre-split:               ; preds = %dec_label_pc_13fd0thread-pre-split.loopexit, %bb90
  %v1_13fdc50 = phi i32 [ %v1_13fdc52, %dec_label_pc_13fd0thread-pre-split.loopexit ], [ %v3_13fdc, %bb90 ]
  %v2_13fd448 = phi i32 [ %v0_14088, %dec_label_pc_13fd0thread-pre-split.loopexit ], [ %v2_13fd4, %bb90 ]
  %v0_13fd0.pr = phi i32 [ %v0_13fd0.pr42, %dec_label_pc_13fd0thread-pre-split.loopexit ], [ %v3_13fd8, %bb90 ]
  br label %dec_label_pc_13fd0

dec_label_pc_13fd0.loopexit:                      ; preds = %bb87
  br label %dec_label_pc_13fd0

dec_label_pc_13fd0:                               ; preds = %dec_label_pc_13fd0.loopexit, %dec_label_pc_13fd0thread-pre-split
  %v1_13fdc = phi i32 [ %v1_13fdc50, %dec_label_pc_13fd0thread-pre-split ], [ %v1_13fc8, %dec_label_pc_13fd0.loopexit ]
  %v2_13fd4 = phi i32 [ %v2_13fd448, %dec_label_pc_13fd0thread-pre-split ], [ %v0_14088, %dec_label_pc_13fd0.loopexit ]
  %v1_13fd8 = phi i32 [ %v0_13fd0.pr, %dec_label_pc_13fd0thread-pre-split ], [ %v4_13fc4, %dec_label_pc_13fd0.loopexit ]
  %v2_13fd0 = icmp slt i32 %v1_13fd8, 0
  br i1 %v2_13fd0, label %dec_label_pc_13fe4, label %bb89

bb89:                                             ; preds = %dec_label_pc_13fd0
  %v4_13fd4 = icmp ult i32 %v1_13fd8, %v2_13fd4
  br i1 %v4_13fd4, label %bb90, label %dec_label_pc_13fe4

bb90:                                             ; preds = %bb89
  %v3_13fd8 = mul i32 %v1_13fd8, 2
  %v2_13fdc = icmp slt i32 %v1_13fdc, 0
  %v3_13fdc = mul i32 %v1_13fdc, 2
  br i1 %v2_13fdc, label %dec_label_pc_13fe4, label %dec_label_pc_13fd0thread-pre-split

dec_label_pc_13fe4:                               ; preds = %bb89, %dec_label_pc_13fd0, %bb90
  %v2_13ff063 = phi i32 [ %v3_13fdc, %bb90 ], [ %v1_13fdc, %bb89 ], [ %v1_13fdc, %dec_label_pc_13fd0 ]
  %v1_13fe855 = phi i32 [ %v3_13fd8, %bb90 ], [ %v1_13fd8, %bb89 ], [ %v1_13fd8, %dec_label_pc_13fd0 ]
  br label %dec_label_pc_13fe8

dec_label_pc_13fe8:                               ; preds = %.thread13, %dec_label_pc_13fe4
  %v1_1401c = phi i32 [ %v4_1401c, %.thread13 ], [ %v2_13ff063, %dec_label_pc_13fe4 ]
  %v1_13ff0 = phi i32 [ %v1_1402c, %.thread13 ], [ 0, %dec_label_pc_13fe4 ]
  %v1_14020 = phi i32 [ %v4_14020, %.thread13 ], [ %v1_13fe855, %dec_label_pc_13fe4 ]
  %v1_13fec = phi i32 [ %v0_14018, %.thread13 ], [ %v0_14088, %dec_label_pc_13fe4 ]
  %v3_13fe8 = icmp ult i32 %v1_13fec, %v1_14020
  br i1 %v3_13fe8, label %.thread8, label %bb91

bb91:                                             ; preds = %dec_label_pc_13fe8
  %v3_13fec = sub i32 %v1_13fec, %v1_14020
  %v3_13ff0 = or i32 %v1_13ff0, %v1_1401c
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13fe8, %bb91
  %v1_13ff8 = phi i32 [ %v1_13fec, %dec_label_pc_13fe8 ], [ %v3_13fec, %bb91 ]
  %v1_13ffc = phi i32 [ %v1_13ff0, %dec_label_pc_13fe8 ], [ %v3_13ff0, %bb91 ]
  %v4_13ff4 = udiv i32 %v1_14020, 2
  %v6_13ff4 = icmp ult i32 %v1_13ff8, %v4_13ff4
  br i1 %v6_13ff4, label %.thread9, label %bb92

bb92:                                             ; preds = %.thread8
  %v3_13ff8 = urem i32 %v1_14020, 2
  %v4_13ff8 = icmp eq i32 %v3_13ff8, 0
  %v6_13ff8 = sub i32 %v1_13ff8, %v4_13ff4
  br i1 %v4_13ff8, label %.thread9, label %bb93

bb93:                                             ; preds = %bb92
  %v5_13ffc = udiv i32 %v1_1401c, 2
  %v6_13ffc = or i32 %v1_13ffc, %v5_13ffc
  br label %.thread9

.thread9:                                         ; preds = %bb92, %.thread8, %bb93
  %v1_14004 = phi i32 [ %v6_13ff8, %bb92 ], [ %v1_13ff8, %.thread8 ], [ %v6_13ff8, %bb93 ]
  %v1_14008 = phi i32 [ %v1_13ffc, %bb92 ], [ %v1_13ffc, %.thread8 ], [ %v6_13ffc, %bb93 ]
  %v4_14000 = udiv i32 %v1_14020, 4
  %v6_14000 = icmp ult i32 %v1_14004, %v4_14000
  br i1 %v6_14000, label %.thread10, label %bb94

bb94:                                             ; preds = %.thread9
  %v3_14004 = and i32 %v1_14020, 2
  %v4_14004 = icmp eq i32 %v3_14004, 0
  %v6_14004 = sub i32 %v1_14004, %v4_14000
  br i1 %v4_14004, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  %v5_14008 = udiv i32 %v1_1401c, 4
  %v6_14008 = or i32 %v1_14008, %v5_14008
  br label %.thread10

.thread10:                                        ; preds = %bb94, %.thread9, %bb95
  %v1_14010 = phi i32 [ %v6_14004, %bb94 ], [ %v1_14004, %.thread9 ], [ %v6_14004, %bb95 ]
  %v1_14014 = phi i32 [ %v1_14008, %bb94 ], [ %v1_14008, %.thread9 ], [ %v6_14008, %bb95 ]
  %v4_1400c = udiv i32 %v1_14020, 8
  %v6_1400c = icmp ult i32 %v1_14010, %v4_1400c
  br i1 %v6_1400c, label %thread-pre-split12, label %bb96

bb96:                                             ; preds = %.thread10
  %v3_14010 = and i32 %v1_14020, 4
  %v4_14010 = icmp eq i32 %v3_14010, 0
  %v6_14010 = sub i32 %v1_14010, %v4_1400c
  br i1 %v4_14010, label %thread-pre-split12, label %bb97

bb97:                                             ; preds = %bb96
  %v5_14014 = udiv i32 %v1_1401c, 8
  %v6_14014 = or i32 %v1_14014, %v5_14014
  br label %thread-pre-split12

thread-pre-split12:                               ; preds = %bb97, %.thread10, %bb96
  %v1_1402c = phi i32 [ %v1_14014, %bb96 ], [ %v1_14014, %.thread10 ], [ %v6_14014, %bb97 ]
  %v0_14018 = phi i32 [ %v6_14010, %bb96 ], [ %v1_14010, %.thread10 ], [ %v6_14010, %bb97 ]
  %v2_14018 = icmp eq i32 %v0_14018, 0
  br i1 %v2_14018, label %dec_label_pc_14028, label %bb98

bb98:                                             ; preds = %thread-pre-split12
  %tmp = icmp ult i32 %v1_1401c, 16
  br i1 %tmp, label %dec_label_pc_14028, label %.thread13

.thread13:                                        ; preds = %bb98
  %v4_1401c = udiv i32 %v1_1401c, 16
  %v4_14020 = udiv i32 %v1_14020, 16
  br label %dec_label_pc_13fe8

dec_label_pc_14028:                               ; preds = %thread-pre-split12, %bb98
  %v1_14028 = icmp slt i32 %v2_13f80, 0
  br i1 %v1_14028, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_14028
  %v2_1402c = sub i32 0, %v1_1402c
  br label %.thread16

.thread16:                                        ; preds = %bb103, %bb102, %bb100, %dec_label_pc_14034, %dec_label_pc_14028, %bb99
  %v1_14030 = phi i32 [ %v1_1402c, %dec_label_pc_14028 ], [ %v2_1402c, %bb99 ], [ %v2_14038, %bb100 ], [ undef, %dec_label_pc_14034 ], [ %v1_1404c80, %bb102 ], [ %v2_14048, %bb103 ]
  ret i32 %v1_14030

dec_label_pc_14034:                               ; preds = %thread-pre-split
  br i1 %v1_13f7c, label %bb100, label %.thread16

bb100:                                            ; preds = %dec_label_pc_14034
  %v2_14038 = sub i32 0, %v0_13f80
  br label %.thread16

dec_label_pc_14040:                               ; preds = %bb85
  br i1 %v3_13f9c, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_14040
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_14040, %bb101
  %v1_1404c80 = phi i32 [ %v0_13f80, %dec_label_pc_14040 ], [ 0, %bb101 ]
  br i1 %v9_13f9c, label %bb103, label %.thread16

bb103:                                            ; preds = %bb102
  %v4_14044 = ashr i32 %v2_13f80, 31
  %v2_14048 = or i32 %v4_14044, 1
  br label %.thread16

dec_label_pc_14050:                               ; preds = %dec_label_pc_13fa4
  %v2_14050 = icmp ugt i32 %v1_14054, 65535
  br i1 %v2_14050, label %bb104, label %.thread19

bb104:                                            ; preds = %dec_label_pc_14050
  %v2_14054 = and i32 %v1_14054, 32768
  %v3_14054 = icmp eq i32 %v2_14054, 0
  %v4_14054 = udiv i32 %v1_14054, 65536
  br i1 %v3_14054, label %.thread19, label %bb105

.thread19:                                        ; preds = %bb104, %dec_label_pc_14050
  %v0_1406070 = phi i32 [ %v1_14054, %dec_label_pc_14050 ], [ %v4_14054, %bb104 ]
  br label %bb105

bb105:                                            ; preds = %bb104, %.thread19
  %v1_14064 = phi i32 [ %v0_1406070, %.thread19 ], [ %v4_14054, %bb104 ]
  %storemerge = phi i32 [ 0, %.thread19 ], [ 16, %bb104 ]
  %v2_14060 = icmp ugt i32 %v1_14064, 255
  br i1 %v2_14060, label %bb106, label %.thread20

bb106:                                            ; preds = %bb105
  %v2_14064 = and i32 %v1_14064, 128
  %v3_14064 = icmp eq i32 %v2_14064, 0
  %v4_14064 = udiv i32 %v1_14064, 256
  br i1 %v3_14064, label %.thread20, label %bb107

bb107:                                            ; preds = %bb106
  %v2_14068 = or i32 %storemerge, 8
  br label %.thread20

.thread20:                                        ; preds = %bb106, %bb105, %bb107
  %v1_14074 = phi i32 [ %storemerge, %bb105 ], [ %storemerge, %bb106 ], [ %v2_14068, %bb107 ]
  %v1_14070 = phi i32 [ %v1_14064, %bb105 ], [ %v4_14064, %bb106 ], [ %v4_14064, %bb107 ]
  %v2_1406c = icmp ugt i32 %v1_14070, 15
  br i1 %v2_1406c, label %bb108, label %.thread21

bb108:                                            ; preds = %.thread20
  %v2_14070 = and i32 %v1_14070, 8
  %v3_14070 = icmp eq i32 %v2_14070, 0
  %v4_14070 = udiv i32 %v1_14070, 16
  br i1 %v3_14070, label %.thread21, label %bb109

bb109:                                            ; preds = %bb108
  %v2_14074 = add nsw i32 %v1_14074, 4
  br label %.thread21

.thread21:                                        ; preds = %bb108, %.thread20, %bb109
  %v4_1407c = phi i32 [ %v1_14074, %.thread20 ], [ %v1_14074, %bb108 ], [ %v2_14074, %bb109 ]
  %v5_14080 = phi i32 [ %v1_14070, %.thread20 ], [ %v4_14070, %bb108 ], [ %v4_14070, %bb109 ]
  %v2_14078 = icmp ugt i32 %v5_14080, 3
  %v7_14078 = icmp eq i32 %v5_14080, 4
  %v2_1407c = xor i1 %v7_14078, true
  %v3_1407c = and i1 %v2_14078, %v2_1407c
  br i1 %v3_1407c, label %bb110, label %bb111

bb110:                                            ; preds = %.thread21
  %v5_1407c = add nsw i32 %v4_1407c, 3
  br label %bb111

bb111:                                            ; preds = %.thread21, %bb110
  %v4_14080 = phi i32 [ %v4_1407c, %.thread21 ], [ %v5_1407c, %bb110 ]
  %v2_14080 = xor i1 %v2_14078, true
  %v3_14080 = or i1 %v7_14078, %v2_14080
  br i1 %v3_14080, label %bb112, label %bb113

bb112:                                            ; preds = %bb111
  %v8_14080 = udiv i32 %v5_14080, 2
  %v9_14080 = add i32 %v4_14080, %v8_14080
  br label %bb113

bb113:                                            ; preds = %bb111, %bb112
  %v1_14088 = phi i32 [ %v4_14080, %bb111 ], [ %v9_14080, %bb112 ]
  %v1_14084 = icmp slt i32 %v2_13f80, 0
  %v6_14088 = lshr i32 %v0_14088, %v1_14088
  %v2_1408c = sub i32 0, %v6_14088
  %v2_1408c.v6_14088 = select i1 %v1_14084, i32 %v2_1408c, i32 %v6_14088
  ret i32 %v2_1408c.v6_14088

dec_label_pc_14094:                               ; preds = %dec_label_pc_13f7c
  %v0_14098 = call i32 @function_f80c()
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_14080, { 1, 0 }
  uselistorder i1 %v7_14078, { 1, 0 }
  uselistorder i32 %v4_14070, { 1, 0 }
  uselistorder i32 %v1_14070, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14064, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_14064, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14054, { 1, 0 }
  uselistorder i32 %v0_14018, { 1, 0 }
  uselistorder i32 %v4_1400c, { 1, 0 }
  uselistorder i32 %v1_14014, { 1, 2, 0 }
  uselistorder i32 %v4_14000, { 1, 0 }
  uselistorder i32 %v1_14008, { 1, 2, 0 }
  uselistorder i32 %v4_13ff4, { 1, 0 }
  uselistorder i32 %v1_13ffc, { 1, 2, 0 }
  uselistorder i32 %v1_14020, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_13ff0, { 1, 0 }
  uselistorder i32 %v1_1401c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_13fdc, { 1, 0 }
  uselistorder i32 %v3_13fd8, { 1, 0 }
  uselistorder i32 %v1_13fd8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_13fd4, { 1, 0 }
  uselistorder i32 %v1_13fdc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13fc8, { 1, 0 }
  uselistorder i32 %v4_13fc4, { 2, 1, 0 }
  uselistorder i32 %v1_13fc8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_13fd0.pr40, { 1, 2, 0, 5, 4, 3 }
  uselistorder i1 %v3_13f9c, { 1, 0 }
  uselistorder i32 %v1_14054, { 5, 1, 6, 7, 3, 2, 0, 4, 8, 9, 10, 11 }
  uselistorder i32 %v2_13f80, { 1, 0, 2 }
  uselistorder i32 %v0_13f80, { 2, 1, 3, 4, 5, 0 }
  uselistorder i32 %v0_13f7c, { 2, 1, 0, 4, 3 }
  uselistorder i32 ()* @function_f80c, { 1, 0 }
  uselistorder i32 31, { 8, 10, 11, 12, 0, 13, 14, 18, 19, 15, 2, 3, 4, 5, 16, 6, 7, 17, 9, 1 }
  uselistorder i32 268435456, { 4, 5, 0, 1, 2, 3, 6, 7 }
  uselistorder i32 536870912, { 0, 2, 1 }
  uselistorder label %bb113, { 1, 0 }
  uselistorder label %bb111, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %.thread20, { 2, 0, 1 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread16, { 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_14028, { 1, 0 }
  uselistorder label %thread-pre-split12, { 0, 2, 1 }
  uselistorder label %.thread10, { 2, 0, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_13fe4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13fd0thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @function_140a8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140a8:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_140ac = call i32 @function_13f7c()
  ret i32 %v0_140ac
}

define i32 @function_140c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140c0:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_140c0 = sub i32 0, %arg1
  store i32 %v1_140c0, i32* %r0.global-to-local, align 4
  %v2_140cc = mul i32 %arg1, 2
  store i32 %v2_140cc, i32* %r2.global-to-local, align 4
  %v4_140cc = icmp eq i32 %v2_140cc, 0
  br i1 %v4_140cc, label %dec_label_pc_140c0.dec_label_pc_14204_crit_edge, label %bb

dec_label_pc_140c0.dec_label_pc_14204_crit_edge:  ; preds = %dec_label_pc_140c0
  %.pre = mul i32 %arg2, 2
  br label %dec_label_pc_14204

bb:                                               ; preds = %dec_label_pc_140c0
  %v3_140d0 = mul i32 %arg2, 2
  store i32 %v3_140d0, i32* %r3.global-to-local, align 4
  %v5_140d0 = icmp eq i32 %v3_140d0, 0
  br i1 %v5_140d0, label %dec_label_pc_14204, label %bb78

bb78:                                             ; preds = %bb
  %v5_140d4 = icmp eq i32 %v3_140d0, %v2_140cc
  br i1 %v5_140d4, label %dec_label_pc_14204, label %bb79

bb79:                                             ; preds = %bb78
  %v2_140cc.off = add i32 %v2_140cc, 33554431
  %tmp110 = icmp ult i32 %v2_140cc.off, 16777216
  br i1 %tmp110, label %dec_label_pc_14204, label %bb80

bb80:                                             ; preds = %bb79
  %v3_140d0.off = add i32 %v3_140d0, 33554431
  %tmp111 = icmp ult i32 %v3_140d0.off, 16777216
  br i1 %tmp111, label %dec_label_pc_14204, label %dec_label_pc_140e4

dec_label_pc_140e4:                               ; preds = %bb80
  %tmp = udiv i32 %arg1, 8388608
  %v3_140e4 = urem i32 %tmp, 256
  store i32 %v3_140e4, i32* %r2.global-to-local, align 4
  %tmp106 = udiv i32 %arg2, 8388608
  %v4_140e8 = urem i32 %tmp106, 256
  %v5_140e8 = sub nsw i32 %v4_140e8, %v3_140e4
  store i32 %v5_140e8, i32* %r3.global-to-local, align 4
  %v7_140ec = icmp ugt i32 %v4_140e8, %v3_140e4
  br i1 %v7_140ec, label %bb81, label %.thread11

bb81:                                             ; preds = %dec_label_pc_140e4
  store i32 %v4_140e8, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v1_140c0, i32* %r1.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_140e4, %bb81
  %v5_140fc = icmp ult i32 %v4_140e8, %v3_140e4
  br i1 %v5_140fc, label %bb82, label %bb83

bb82:                                             ; preds = %.thread11
  %v7_140fc = sub nsw i32 0, %v5_140e8
  store i32 %v7_140fc, i32* %r3.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %.thread11, %bb82
  %v0_14100 = phi i32 [ %v5_140e8, %.thread11 ], [ %v7_140fc, %bb82 ]
  %v0_14104 = load i32, i32* @lr, align 4
  %tmp112 = icmp ugt i32 %v0_14100, 25
  call void @__pseudo_cond_branch(i1 %tmp112, i32 %v0_14104)
  %v0_14108 = load i32, i32* %r0.global-to-local, align 4
  %v3_14108 = icmp sgt i32 %v0_14108, -1
  %v1_1410c = urem i32 %v0_14108, 8388608
  %v1_14110 = or i32 %v1_1410c, 8388608
  %v2_14114 = sub nsw i32 0, %v1_14110
  %v1_14110.v2_14114 = select i1 %v3_14108, i32 %v1_14110, i32 %v2_14114
  store i32 %v1_14110.v2_14114, i32* %r0.global-to-local, align 4
  %v0_14118 = load i32, i32* %r1.global-to-local, align 4
  %v3_14118 = icmp sgt i32 %v0_14118, -1
  %v1_1411c = urem i32 %v0_14118, 8388608
  %v1_14120 = or i32 %v1_1411c, 8388608
  %v2_14124 = sub nsw i32 0, %v1_14120
  %storemerge1 = select i1 %v3_14118, i32 %v1_14120, i32 %v2_14124
  store i32 %storemerge1, i32* %r1.global-to-local, align 4
  %v0_14128 = load i32, i32* %r2.global-to-local, align 4
  %v1_14128 = load i32, i32* %r3.global-to-local, align 4
  %v4_14128 = icmp eq i32 %v1_14128, %v0_14128
  br i1 %v4_14128, label %dec_label_pc_141ec, label %dec_label_pc_14130

dec_label_pc_14130:                               ; preds = %.thread16, %.thread17, %bb83
  %v0_14138 = phi i32 [ %v2_141fc, %.thread17 ], [ %v1_14128, %.thread16 ], [ %v1_14128, %bb83 ]
  %v0_1413c = phi i32 [ %v1_141f0, %.thread17 ], [ %v1_141f0, %.thread16 ], [ %storemerge1, %bb83 ]
  %v0_14134 = phi i32 [ %v1_14110.v2_14114, %.thread17 ], [ %v2_141f4, %.thread16 ], [ %v1_14110.v2_14114, %bb83 ]
  %v0_14130 = phi i32 [ %v0_14128, %.thread17 ], [ 1, %.thread16 ], [ %v0_14128, %bb83 ]
  %v1_14130 = add i32 %v0_14130, -1
  store i32 %v1_14130, i32* %r2.global-to-local, align 4
  %v7_14134 = ashr i32 %v0_1413c, %v0_14138
  %v8_14134 = add i32 %v7_14134, %v0_14134
  store i32 %v8_14134, i32* %r0.global-to-local, align 4
  %v14_14134 = icmp slt i32 %v8_14134, 0
  %v1_14138 = sub i32 32, %v0_14138
  %v6_1413c = shl i32 %v0_1413c, %v1_14138
  store i32 %v6_1413c, i32* %r1.global-to-local, align 4
  %v1_14140 = and i32 %v8_14134, -2147483648
  store i32 %v1_14140, i32* %r3.global-to-local, align 4
  br i1 %v14_14134, label %dec_label_pc_14148, label %dec_label_pc_14150

dec_label_pc_14148:                               ; preds = %dec_label_pc_14130
  %v1_14148 = sub i32 0, %v6_1413c
  store i32 %v1_14148, i32* %r1.global-to-local, align 4
  %v2_14148 = icmp eq i32 %v6_1413c, 0
  %v2_1414c = icmp eq i1 %v2_14148, false
  %v5_1414c = sext i1 %v2_1414c to i32
  %v6_1414c = sub i32 %v5_1414c, %v8_14134
  store i32 %v6_1414c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14150

dec_label_pc_14150:                               ; preds = %dec_label_pc_14130, %dec_label_pc_14148
  %v0_14188 = phi i32 [ %v6_1413c, %dec_label_pc_14130 ], [ %v1_14148, %dec_label_pc_14148 ]
  %v0_1418c = phi i32 [ %v8_14134, %dec_label_pc_14130 ], [ %v6_1414c, %dec_label_pc_14148 ]
  %v3_14154 = icmp ult i32 %v0_1418c, 8388606
  br i1 %v3_14154, label %dec_label_pc_14188, label %dec_label_pc_14158

dec_label_pc_14158:                               ; preds = %dec_label_pc_14150
  %v3_1415c = icmp ult i32 %v0_1418c, 16777214
  br i1 %v3_1415c, label %dec_label_pc_14174, label %dec_label_pc_14160

dec_label_pc_14160:                               ; preds = %dec_label_pc_14158
  %v1_14160 = urem i32 %v0_1418c, 2
  %v2_14160 = icmp ne i32 %v1_14160, 0
  %v3_14160 = udiv i32 %v0_1418c, 2
  store i32 %v3_14160, i32* %r0.global-to-local, align 4
  %v3_14164 = zext i1 %v2_14160 to i32
  %v6_14164 = zext i32 %v0_14188 to i64
  %v7_14164 = sub i32 33, %v0_14188
  %v8_14164 = zext i32 %v7_14164 to i64
  %v9_14164 = shl i64 %v6_14164, %v8_14164
  %v10_14164 = sub i32 32, %v0_14188
  %v11_14164 = shl i32 %v3_14164, %v10_14164
  %v12_14164 = zext i32 %v11_14164 to i64
  %v14_14164 = or i64 %v12_14164, %v9_14164
  %v15_14164 = trunc i64 %v14_14164 to i32
  store i32 %v15_14164, i32* %r1.global-to-local, align 4
  store i32 %v0_14130, i32* %r2.global-to-local, align 4
  %v2_1416c = icmp ugt i32 %v0_14130, 253
  br i1 %v2_1416c, label %dec_label_pc_14258, label %dec_label_pc_14174

dec_label_pc_14174:                               ; preds = %dec_label_pc_14188, %dec_label_pc_14160, %dec_label_pc_14158
  %v1_14178 = phi i32 [ %v1_14194, %dec_label_pc_14188 ], [ %v0_14130, %dec_label_pc_14160 ], [ %v1_14130, %dec_label_pc_14158 ]
  %v0_14178 = phi i32 [ %v5_1418c, %dec_label_pc_14188 ], [ %v3_14160, %dec_label_pc_14160 ], [ %v0_1418c, %dec_label_pc_14158 ]
  %v2_14178 = and i32 %v1_14178, 512
  %v3_14178 = icmp ne i32 %v2_14178, 0
  %v4_14178 = mul i32 %v1_14178, 8388608
  %v6_14178 = add i32 %v4_14178, %v0_14178
  %v7_14178 = zext i1 %v3_14178 to i32
  %v8_14178 = add i32 %v7_14178, %v6_14178
  %v22_14178 = icmp eq i32 %v8_14178, 0
  br i1 %v22_14178, label %bb84, label %bb85

bb84:                                             ; preds = %dec_label_pc_14174
  br label %bb85

bb85:                                             ; preds = %dec_label_pc_14174, %bb84
  %v0_14180 = phi i32 [ 0, %bb84 ], [ %v8_14178, %dec_label_pc_14174 ]
  %v2_14180 = or i32 %v0_14180, %v1_14140
  store i32 %v2_14180, i32* %r0.global-to-local, align 4
  ret i32 %v2_14180

dec_label_pc_14188:                               ; preds = %dec_label_pc_14150
  %v1_14188 = icmp slt i32 %v0_14188, 0
  %v2_14188 = mul i32 %v0_14188, 2
  store i32 %v2_14188, i32* %r1.global-to-local, align 4
  %v3_1418c = mul i32 %v0_1418c, 2
  %v4_1418c = zext i1 %v1_14188 to i32
  %v5_1418c = or i32 %v4_1418c, %v3_1418c
  store i32 %v5_1418c, i32* %r0.global-to-local, align 4
  %v1_14190 = and i32 %v3_1418c, 8388608
  %v2_14190 = icmp eq i32 %v1_14190, 0
  %v1_14194 = add i32 %v0_14130, -2
  store i32 %v1_14194, i32* %r2.global-to-local, align 4
  br i1 %v2_14190, label %dec_label_pc_1419c, label %dec_label_pc_14174

dec_label_pc_1419c:                               ; preds = %dec_label_pc_14188
  %tmp86 = udiv i32 %v0_1418c, 2048
  %v3_1419c = urem i32 %tmp86, 1048576
  %v4_1419c = icmp eq i32 %v3_1419c, 0
  br i1 %v4_1419c, label %bb87, label %.thread12

bb87:                                             ; preds = %dec_label_pc_1419c
  %v4_141a0 = mul i32 %v5_1418c, 4096
  store i32 %v4_141a0, i32* %r0.global-to-local, align 4
  %v2_141a4 = add i32 %v0_14130, -14
  store i32 %v2_141a4, i32* %r2.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_1419c, %bb87
  %v1_141b0 = phi i32 [ %v1_14194, %dec_label_pc_1419c ], [ %v2_141a4, %bb87 ]
  %v1_141ac = phi i32 [ %v5_1418c, %dec_label_pc_1419c ], [ %v4_141a0, %bb87 ]
  %v1_141a8 = and i32 %v1_141ac, 16711680
  %v2_141a8 = icmp eq i32 %v1_141a8, 0
  br i1 %v2_141a8, label %bb88, label %.thread13

bb88:                                             ; preds = %.thread12
  %v4_141ac = mul i32 %v1_141ac, 256
  store i32 %v4_141ac, i32* %r0.global-to-local, align 4
  %v2_141b0 = add i32 %v1_141b0, -8
  store i32 %v2_141b0, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %.thread12, %bb88
  %v1_141bc = phi i32 [ %v1_141b0, %.thread12 ], [ %v2_141b0, %bb88 ]
  %v1_141b8 = phi i32 [ %v1_141ac, %.thread12 ], [ %v4_141ac, %bb88 ]
  %v1_141b4 = and i32 %v1_141b8, 15728640
  %v2_141b4 = icmp eq i32 %v1_141b4, 0
  br i1 %v2_141b4, label %bb89, label %.thread14

bb89:                                             ; preds = %.thread13
  %v4_141b8 = mul i32 %v1_141b8, 16
  store i32 %v4_141b8, i32* %r0.global-to-local, align 4
  %v2_141bc = add i32 %v1_141bc, -4
  store i32 %v2_141bc, i32* %r2.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %.thread13, %bb89
  %v1_141c8 = phi i32 [ %v1_141bc, %.thread13 ], [ %v2_141bc, %bb89 ]
  %v1_141c4 = phi i32 [ %v1_141b8, %.thread13 ], [ %v4_141b8, %bb89 ]
  %v1_141c0 = and i32 %v1_141c4, 12582912
  %v2_141c0 = icmp eq i32 %v1_141c0, 0
  br i1 %v2_141c0, label %bb90, label %.thread15

bb90:                                             ; preds = %.thread14
  %v4_141c4 = mul i32 %v1_141c4, 4
  store i32 %v4_141c4, i32* %r0.global-to-local, align 4
  %v2_141c8 = add i32 %v1_141c8, -2
  store i32 %v2_141c8, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread14, %bb90
  %v0_141d4 = phi i32 [ %v1_141c8, %.thread14 ], [ %v2_141c8, %bb90 ]
  %v1_141d0 = phi i32 [ %v1_141c4, %.thread14 ], [ %v4_141c4, %bb90 ]
  %v2_141cc = icmp ugt i32 %v1_141d0, 8388607
  br i1 %v2_141cc, label %bb92, label %bb91

bb91:                                             ; preds = %.thread15
  %v3_141d0 = mul i32 %v1_141d0, 2
  store i32 %v3_141d0, i32* %r0.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %.thread15, %bb91
  %v3_141d8 = phi i32 [ %v1_141d0, %.thread15 ], [ %v3_141d0, %bb91 ]
  %v1_141d4 = phi i32 [ 0, %.thread15 ], [ 1, %bb91 ]
  %v4_141d4 = sub i32 %v0_141d4, %v1_141d4
  store i32 %v4_141d4, i32* %r2.global-to-local, align 4
  %v7_141d4107 = sub i32 %v1_141d4, %v4_141d4
  %v9_141d4 = and i32 %v7_141d4107, %v0_141d4
  %v10_141d4 = icmp slt i32 %v9_141d4, 0
  %v11_141d4 = icmp slt i32 %v4_141d4, 0
  %v2_141d8 = xor i1 %v11_141d4, %v10_141d4
  br i1 %v2_141d8, label %.thread75, label %bb93

.thread75:                                        ; preds = %bb92
  %v4_141dc = sub i32 0, %v4_141d4
  store i32 %v4_141dc, i32* %r2.global-to-local, align 4
  %v10_141e4 = lshr i32 %v3_141d8, %v4_141dc
  %v11_141e4 = or i32 %v10_141e4, %v1_14140
  store i32 %v11_141e4, i32* %r0.global-to-local, align 4
  br label %bb94

bb93:                                             ; preds = %bb92
  %v7_141d86672 = mul i32 %v4_141d4, 8388608
  %v8_141d86773 = add i32 %v7_141d86672, %v3_141d8
  %v5_141e0 = or i32 %v8_141d86773, %v1_14140
  store i32 %v5_141e0, i32* %r0.global-to-local, align 4
  br label %bb94

bb94:                                             ; preds = %.thread24, %bb105, %bb99, %dec_label_pc_1423c, %bb96, %dec_label_pc_1421c, %bb93, %.thread75
  %v1_141e8 = phi i32 [ %v5_141e0, %bb93 ], [ %v11_141e4, %.thread75 ], [ %v1_140c0, %dec_label_pc_1421c ], [ %arg2, %bb96 ], [ %v2_1423c, %dec_label_pc_1423c ], [ %v2_14240, %bb99 ], [ %v1_14280, %bb105 ], [ %v2_14280, %.thread24 ]
  ret i32 %v1_141e8

dec_label_pc_141ec:                               ; preds = %bb83
  %v2_141ec = icmp eq i32 %v0_14128, 0
  %v1_141f0 = xor i32 %storemerge1, 8388608
  store i32 %v1_141f0, i32* %r1.global-to-local, align 4
  br i1 %v2_141ec, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_141ec
  %v2_141f4 = xor i32 %v1_14110.v2_14114, 8388608
  store i32 %v2_141f4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14130

.thread17:                                        ; preds = %dec_label_pc_141ec
  %v2_141fc = add i32 %v1_14128, -1
  store i32 %v2_141fc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14130

dec_label_pc_14204:                               ; preds = %dec_label_pc_140c0.dec_label_pc_14204_crit_edge, %bb, %bb78, %bb79, %bb80
  %v2_14204.pre-phi = phi i32 [ %.pre, %dec_label_pc_140c0.dec_label_pc_14204_crit_edge ], [ 0, %bb ], [ %v3_140d0, %bb78 ], [ %v3_140d0, %bb79 ], [ %v3_140d0, %bb80 ]
  store i32 %v2_14204.pre-phi, i32* %r3.global-to-local, align 4
  %v3_14208 = sdiv i32 %v2_140cc, 16777216
  %v4_14208 = sub nsw i32 -1, %v3_14208
  %v2_140cc.off108 = add i32 %v2_140cc, 33554431
  %tmp113 = icmp ult i32 %v2_140cc.off108, 16777216
  br i1 %tmp113, label %.thread21, label %bb95

bb95:                                             ; preds = %dec_label_pc_14204
  %v2_14204.pre-phi.off = add i32 %v2_14204.pre-phi, 33554431
  %tmp114 = icmp ult i32 %v2_14204.pre-phi.off, 16777216
  br i1 %tmp114, label %bb102, label %dec_label_pc_14214

dec_label_pc_14214:                               ; preds = %bb95
  %v4_14214 = icmp eq i32 %v2_14204.pre-phi, %v2_140cc
  br i1 %v4_14214, label %dec_label_pc_14228, label %dec_label_pc_1421c

dec_label_pc_1421c:                               ; preds = %dec_label_pc_14214
  br i1 %v4_140cc, label %bb96, label %bb94

bb96:                                             ; preds = %dec_label_pc_1421c
  store i32 %arg2, i32* %r0.global-to-local, align 4
  br label %bb94

dec_label_pc_14228:                               ; preds = %dec_label_pc_14214
  %v4_14228 = icmp eq i32 %v1_140c0, %arg2
  br i1 %v4_14228, label %bb98, label %bb97

bb97:                                             ; preds = %dec_label_pc_14228
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb98

bb98:                                             ; preds = %dec_label_pc_14228, %bb97
  %v0_14230 = load i32, i32* @lr, align 4
  %v2_14230 = xor i1 %v4_14228, true
  call void @__pseudo_cond_branch(i1 %v2_14230, i32 %v0_14230)
  %v0_14234 = load i32, i32* %r2.global-to-local, align 4
  %v3_14234 = icmp ult i32 %v0_14234, 16777216
  br i1 %v3_14234, label %dec_label_pc_1423c, label %dec_label_pc_14248

dec_label_pc_1423c:                               ; preds = %bb98
  %v0_1423c = load i32, i32* %r0.global-to-local, align 4
  %v1_1423c = icmp slt i32 %v0_1423c, 0
  %v2_1423c = mul i32 %v0_1423c, 2
  store i32 %v2_1423c, i32* %r0.global-to-local, align 4
  br i1 %v1_1423c, label %bb99, label %bb94

bb99:                                             ; preds = %dec_label_pc_1423c
  %v2_14240 = or i32 %v2_1423c, -2147483648
  store i32 %v2_14240, i32* %r0.global-to-local, align 4
  br label %bb94

dec_label_pc_14248:                               ; preds = %bb98
  %v1_14248 = add i32 %v0_14234, 33554432
  store i32 %v1_14248, i32* %r2.global-to-local, align 4
  %v2_14248 = icmp ugt i32 %v0_14234, -33554433
  br i1 %v2_14248, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_14248
  %v1_1424c = load i32, i32* %r0.global-to-local, align 4
  %v2_1424c = add i32 %v1_1424c, 8388608
  store i32 %v2_1424c, i32* %r0.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_14248, %bb100
  %v0_14250 = load i32, i32* @lr, align 4
  %v2_14250 = xor i1 %v2_14248, true
  call void @__pseudo_cond_branch(i1 %v2_14250, i32 %v0_14250)
  %v0_14254 = load i32, i32* %r0.global-to-local, align 4
  %v1_14254 = and i32 %v0_14254, -2147483648
  store i32 %v1_14254, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14258

dec_label_pc_14258:                               ; preds = %dec_label_pc_14160, %bb101
  %v0_14258 = phi i32 [ %v1_14140, %dec_label_pc_14160 ], [ %v1_14254, %bb101 ]
  %v1_1425c = or i32 %v0_14258, 2139095040
  store i32 %v1_1425c, i32* %r0.global-to-local, align 4
  ret i32 %v1_1425c

bb102:                                            ; preds = %bb95
  store i32 %v4_14208, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  br label %.thread22

.thread21:                                        ; preds = %dec_label_pc_14204
  store i32 %v4_14208, i32* %r2.global-to-local, align 4
  %v4_1426c = sdiv i32 %v2_14204.pre-phi, 16777216
  %v5_1426c = sub nsw i32 -1, %v4_1426c
  store i32 %v5_1426c, i32* %r3.global-to-local, align 4
  %v2_14204.pre-phi.off109 = add i32 %v2_14204.pre-phi, 33554431
  %tmp115 = icmp ult i32 %v2_14204.pre-phi.off109, 16777216
  br i1 %tmp115, label %bb103, label %.thread22

.thread22:                                        ; preds = %bb102, %.thread21
  %v1_14270 = phi i32 [ %arg2, %bb102 ], [ %v1_140c0, %.thread21 ]
  store i32 %v1_14270, i32* %r1.global-to-local, align 4
  br label %bb103

bb103:                                            ; preds = %.thread21, %.thread22
  %v2_1427c = phi i32 [ %arg2, %.thread21 ], [ %v1_14270, %.thread22 ]
  %v1_14280 = phi i32 [ %v1_140c0, %.thread21 ], [ %v1_14270, %.thread22 ]
  %v3_14274 = mul i32 %v1_14280, 512
  store i32 %v3_14274, i32* %r2.global-to-local, align 4
  %v5_14274 = icmp eq i32 %v3_14274, 0
  br i1 %v5_14274, label %bb104, label %.thread24

bb104:                                            ; preds = %bb103
  %v4_14278 = mul i32 %v2_1427c, 512
  store i32 %v4_14278, i32* %r3.global-to-local, align 4
  %v6_14278 = icmp eq i32 %v4_14278, 0
  br i1 %v6_14278, label %bb105, label %.thread24

bb105:                                            ; preds = %bb104
  %v5_1427c = icmp eq i32 %v1_14280, %v2_1427c
  br i1 %v5_1427c, label %bb94, label %.thread24

.thread24:                                        ; preds = %bb103, %bb104, %bb105
  %v2_14280 = or i32 %v1_14280, 4194304
  store i32 %v2_14280, i32* %r0.global-to-local, align 4
  br label %bb94

; uselistorder directives
  uselistorder i32 %v2_14280, { 1, 0 }
  uselistorder i32 %v4_14278, { 1, 0 }
  uselistorder i32 %v3_14274, { 1, 0 }
  uselistorder i32 %v1_14280, { 3, 0, 1, 2 }
  uselistorder i32 %v1_14270, { 1, 0, 2 }
  uselistorder i32 %v2_14240, { 1, 0 }
  uselistorder i32 %v2_1423c, { 1, 0, 2 }
  uselistorder i32 %v0_14234, { 2, 1, 0 }
  uselistorder i1 %v4_14228, { 1, 0 }
  uselistorder i32 %v4_14208, { 1, 0 }
  uselistorder i32 %v2_14204.pre-phi, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v2_141fc, { 1, 0 }
  uselistorder i32 %v2_141f4, { 1, 0 }
  uselistorder i32 %v1_141f0, { 2, 1, 0 }
  uselistorder i32 %v4_141d4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_141d4, { 1, 0 }
  uselistorder i32 %v3_141d0, { 1, 0 }
  uselistorder i32 %v1_141d0, { 1, 0, 2 }
  uselistorder i32 %v4_141c4, { 1, 0 }
  uselistorder i32 %v1_141c4, { 1, 0, 2 }
  uselistorder i32 %v4_141b8, { 1, 0 }
  uselistorder i32 %v1_141b8, { 1, 0, 2 }
  uselistorder i32 %v4_141ac, { 1, 0 }
  uselistorder i32 %v1_141ac, { 1, 0, 2 }
  uselistorder i32 %v4_141a0, { 1, 0 }
  uselistorder i32 %v1_14194, { 0, 2, 1 }
  uselistorder i32 %v5_1418c, { 1, 0, 3, 2 }
  uselistorder i32 %v3_1418c, { 1, 0 }
  uselistorder i32 %v3_14160, { 1, 0 }
  uselistorder i32 %v0_1418c, { 0, 1, 4, 2, 3, 5, 6 }
  uselistorder i32 %v0_14188, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v1_14140, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v6_1413c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_14130, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v1_14128, { 3, 1, 2, 0 }
  uselistorder i32 %v0_14128, { 3, 2, 1, 0 }
  uselistorder i32 %storemerge1, { 1, 0, 2 }
  uselistorder i32 %v1_14110.v2_14114, { 2, 1, 0, 3 }
  uselistorder i32 %v4_140e8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_140d0, { 6, 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_140cc, { 0, 2, 4, 3, 1, 6, 5 }
  uselistorder i32 %v1_140c0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 6, 8, 9 }
  uselistorder i32* %r2.global-to-local, { 1, 0, 2, 3, 17, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 18 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 23, 4, 24, 5, 6, 25, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0, 26, 22, 27 }
  uselistorder i32 8388607, { 1, 0, 2 }
  uselistorder i32 4096, { 0, 6, 1, 2, 3, 10, 11, 7, 12, 13, 4, 8, 14, 9, 5 }
  uselistorder i32 2048, { 0, 13, 14, 10, 7, 6, 1, 2, 8, 9, 4, 11, 12, 3, 5, 15 }
  uselistorder i32 512, { 0, 1, 10, 7, 11, 8, 2, 9, 12, 3, 4, 13, 5, 14, 6, 15 }
  uselistorder i32 253, { 3, 0, 1, 2 }
  uselistorder i32 33, { 6, 5, 8, 1, 0, 2, 3, 4, 7 }
  uselistorder i32 25, { 0, 4, 5, 1, 3, 2 }
  uselistorder i32 8388608, { 11, 12, 13, 5, 14, 0, 6, 1, 7, 2, 3, 4, 8, 15, 9, 10 }
  uselistorder i32 %arg2, { 5, 6, 7, 0, 8, 4, 9, 1, 2, 3, 10 }
  uselistorder label %.thread24, { 2, 1, 0 }
  uselistorder label %bb103, { 1, 0 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_14258, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_14204, { 4, 3, 2, 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %dec_label_pc_14150, { 1, 0 }
  uselistorder label %dec_label_pc_14130, { 1, 0, 2 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
}

define i32 @function_14288() local_unnamed_addr {
dec_label_pc_14288:
  store i32 0, i32* @r3, align 4
  %v0_1428c = call i32 @function_14298()
  ret i32 %v0_1428c
}

define i32 @function_14290() local_unnamed_addr {
dec_label_pc_14290:
  %v0_14290 = load i32, i32* @r0, align 4
  %v2_14290 = icmp slt i32 %v0_14290, 0
  br i1 %v2_14290, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_14290
  %v2_14294 = sub i32 0, %v0_14290
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_14290, %bb
  %.0 = phi i32 [ %v2_14294, %bb ], [ undef, %dec_label_pc_14290 ]
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v0_14290, { 1, 0 }
  uselistorder i32 undef, { 4, 0, 1, 2, 3 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_14298() local_unnamed_addr {
dec_label_pc_14298:
  %ip.global-to-local = alloca i32, align 4
  %v0_14298 = load i32, i32* @r0, align 4
  store i32 %v0_14298, i32* %ip.global-to-local, align 4
  %v2_14298 = icmp eq i32 %v0_14298, 0
  %v0_1429c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_14298, i32 %v0_1429c)
  %v0_142a0 = load i32, i32* @r3, align 4
  %v1_142a0 = or i32 %v0_142a0, 1258291200
  %v0_142a4 = load i32, i32* @r0, align 4
  %v1_142f0 = add i32 %v1_142a0, -8388608
  %v0_142f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_142f8 = icmp ugt i32 %v0_142f8, 65535
  br i1 %v2_142f8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14298
  %v2_142fc = and i32 %v0_142f8, 32768
  %v3_142fc = icmp eq i32 %v2_142fc, 0
  %v4_142fc = udiv i32 %v0_142f8, 65536
  store i32 %v4_142fc, i32* %ip.global-to-local, align 4
  br i1 %v3_142fc, label %.thread, label %bb14

bb14:                                             ; preds = %bb
  br label %.thread

.thread:                                          ; preds = %bb, %dec_label_pc_14298, %bb14
  %v1_14308 = phi i32 [ %v0_142f8, %dec_label_pc_14298 ], [ %v4_142fc, %bb ], [ %v4_142fc, %bb14 ]
  %v1_1430c = phi i32 [ 23, %dec_label_pc_14298 ], [ 23, %bb ], [ 7, %bb14 ]
  %v2_14304 = icmp ugt i32 %v1_14308, 255
  br i1 %v2_14304, label %bb15, label %.thread1

bb15:                                             ; preds = %.thread
  %v2_14308 = and i32 %v1_14308, 128
  %v3_14308 = icmp eq i32 %v2_14308, 0
  %v4_14308 = udiv i32 %v1_14308, 256
  store i32 %v4_14308, i32* %ip.global-to-local, align 4
  br i1 %v3_14308, label %.thread1, label %bb16

bb16:                                             ; preds = %bb15
  %v2_1430c = add nsw i32 %v1_1430c, -8
  br label %.thread1

.thread1:                                         ; preds = %bb15, %.thread, %bb16
  %v1_14318 = phi i32 [ %v1_1430c, %.thread ], [ %v1_1430c, %bb15 ], [ %v2_1430c, %bb16 ]
  %v1_14314 = phi i32 [ %v1_14308, %.thread ], [ %v4_14308, %bb15 ], [ %v4_14308, %bb16 ]
  %v2_14310 = icmp ugt i32 %v1_14314, 15
  br i1 %v2_14310, label %bb17, label %.thread2

bb17:                                             ; preds = %.thread1
  %v2_14314 = and i32 %v1_14314, 8
  %v3_14314 = icmp eq i32 %v2_14314, 0
  %v4_14314 = udiv i32 %v1_14314, 16
  store i32 %v4_14314, i32* %ip.global-to-local, align 4
  br i1 %v3_14314, label %.thread2, label %bb18

bb18:                                             ; preds = %bb17
  %v2_14318 = add nsw i32 %v1_14318, -4
  br label %.thread2

.thread2:                                         ; preds = %bb17, %.thread1, %bb18
  %v1_14320 = phi i32 [ %v1_14318, %.thread1 ], [ %v1_14318, %bb17 ], [ %v2_14318, %bb18 ]
  %v1_14328 = phi i32 [ %v1_14314, %.thread1 ], [ %v4_14314, %bb17 ], [ %v4_14314, %bb18 ]
  %v2_1431c = icmp ugt i32 %v1_14328, 3
  br i1 %v2_1431c, label %bb19, label %.thread3

bb19:                                             ; preds = %.thread2
  %v2_14320 = add nsw i32 %v1_14320, -2
  br label %bb20

.thread3:                                         ; preds = %.thread2
  %v5_14324 = udiv i32 %v1_14328, 2
  %v6_14324 = sub i32 %v1_14320, %v5_14324
  br label %bb20

bb20:                                             ; preds = %bb19, %.thread3
  %v0_14328 = phi i32 [ %v6_14324, %.thread3 ], [ %v2_14320, %bb19 ]
  %v4_14328 = udiv i32 %v1_14328, 8
  %v5_14328 = sub i32 %v0_14328, %v4_14328
  %tmp = mul i32 %v5_14328, -8388608
  %v5_1432c = add i32 %v1_142f0, %tmp
  %v5_14330 = icmp slt i32 %v0_14328, %v4_14328
  br i1 %v5_14330, label %dec_label_pc_14350, label %dec_label_pc_14334

dec_label_pc_14334:                               ; preds = %bb20
  %v7_14334 = shl i32 %v0_142a4, %v5_14328
  %v8_14334 = add i32 %v5_1432c, %v7_14334
  store i32 0, i32* %ip.global-to-local, align 4
  %v25_14344 = icmp eq i32 %v8_14334, 0
  br i1 %v25_14344, label %bb21, label %bb22

bb21:                                             ; preds = %dec_label_pc_14334
  br label %bb22

bb22:                                             ; preds = %bb23, %dec_label_pc_14350, %dec_label_pc_14334, %bb21
  %v1_1434c = phi i32 [ %v8_14334, %dec_label_pc_14334 ], [ 0, %bb21 ], [ %v11_14360, %dec_label_pc_14350 ], [ 0, %bb23 ]
  ret i32 %v1_1434c

dec_label_pc_14350:                               ; preds = %bb20
  %v1_14350 = add i32 %v5_14328, 32
  %v6_14354 = shl i32 %v0_142a4, %v1_14350
  store i32 %v6_14354, i32* %ip.global-to-local, align 4
  %v1_14358 = sub i32 0, %v5_14328
  %v3_14360 = sub i32 -1, %v5_14328
  %v4_14360 = shl i32 1, %v3_14360
  %v5_14360 = and i32 %v4_14360, %v0_142a4
  %v6_14360 = icmp ne i32 %v5_14360, 0
  %v7_14360 = lshr i32 %v0_142a4, %v1_14358
  %v9_14360 = add i32 %v5_1432c, %v7_14360
  %v10_14360 = zext i1 %v6_14360 to i32
  %v11_14360 = add i32 %v10_14360, %v9_14360
  %v25_14360 = icmp eq i32 %v11_14360, 0
  br i1 %v25_14360, label %bb23, label %bb22

bb23:                                             ; preds = %dec_label_pc_14350
  br label %bb22

; uselistorder directives
  uselistorder i32 %v11_14360, { 1, 0 }
  uselistorder i32 %v5_1432c, { 1, 0 }
  uselistorder i32 %v5_14328, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v4_14328, { 1, 0 }
  uselistorder i32 %v0_14328, { 1, 0 }
  uselistorder i32 %v4_14314, { 2, 1, 0 }
  uselistorder i32 %v1_14314, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14308, { 2, 1, 0 }
  uselistorder i32 %v1_14308, { 1, 0, 2, 3 }
  uselistorder i32 %v4_142fc, { 2, 1, 0 }
  uselistorder i32 %v0_142f8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_142a4, { 1, 0, 2, 3 }
  uselistorder i32 3, { 68, 82, 69, 0, 25, 113, 36, 120, 83, 84, 85, 2, 86, 70, 71, 72, 73, 74, 75, 114, 5, 115, 116, 121, 117, 76, 37, 87, 26, 77, 39, 78, 3, 79, 80, 81, 38, 21, 88, 40, 89, 41, 90, 27, 91, 42, 92, 43, 93, 44, 45, 46, 47, 48, 49, 50, 51, 52, 1, 94, 6, 53, 54, 55, 56, 95, 57, 23, 22, 58, 96, 59, 28, 97, 8, 7, 60, 98, 29, 99, 10, 9, 61, 100, 30, 101, 102, 12, 11, 62, 103, 31, 104, 14, 13, 63, 32, 105, 64, 106, 16, 15, 65, 107, 33, 108, 18, 17, 66, 109, 34, 110, 20, 19, 67, 118, 35, 119, 24, 111, 4, 112 }
  uselistorder i32 -4, { 5, 4, 21, 0, 19, 22, 23, 24, 6, 7, 1, 8, 9, 10, 11, 12, 13, 14, 2, 20, 15, 3, 25, 16, 17, 18 }
  uselistorder i32 15, { 6, 7, 13, 0, 8, 9, 4, 5, 1, 10, 2, 11, 3, 12 }
  uselistorder i32 -8, { 13, 12, 22, 14, 15, 16, 17, 18, 11, 19, 20, 21, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 36, 41, 42, 43, 40, 44, 88, 45, 91, 92, 46, 47, 48, 94, 49, 50, 51, 52, 53, 54, 89, 95, 93, 55, 56, 57, 58, 90, 96, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 97, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87 }
  uselistorder i32 128, { 11, 10, 1, 9, 8, 12, 7, 6, 5, 4, 13, 0, 14, 15, 16, 2, 3, 17 }
  uselistorder i32 7, { 2, 1, 0, 23, 24, 25, 8, 28, 9, 26, 10, 27, 3, 11, 29, 12, 30, 13, 31, 14, 15, 16, 17, 32, 5, 33, 18, 34, 6, 35, 19, 36, 20, 37, 7, 38, 21, 39, 22, 41, 4, 40 }
  uselistorder i32 23, { 1, 2, 0, 9, 10, 14, 15, 4, 11, 3, 12, 5, 13, 6, 16, 7, 8 }
  uselistorder label %bb22, { 0, 1, 3, 2 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %.thread2, { 2, 0, 1 }
  uselistorder label %.thread1, { 2, 0, 1 }
  uselistorder label %.thread, { 2, 0, 1 }
}

define i32 @function_1436c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1436c:
  %v0_14374 = call i32 @function_14388()
  ret i32 %v0_14374
}

define i32 @function_14388() local_unnamed_addr {
dec_label_pc_14388:
  %sl.global-to-local = alloca i32, align 4
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %v3_14388 = load i32, i32* @r4, align 4
  store i32 %v3_14388, i32* %stack_var_-32, align 4
  %v12_14388 = load i32, i32* @r7, align 4
  %v21_14388 = load i32, i32* @sl, align 4
  %v0_1438c = load i32, i32* @r2, align 4
  store i32 %v0_1438c, i32* @r7, align 4
  %v0_14390 = load i32, i32* @r3, align 4
  store i32 %v0_14390, i32* @r8, align 4
  %v0_14394 = load i32, i32* @r0, align 4
  store i32 %v0_14394, i32* @sb, align 4
  %v0_14398 = load i32, i32* @r1, align 4
  store i32 %v0_14398, i32* @sl, align 4
  %v0_1439c = call i32 @function_149b8()
  %v1_1439c = sext i32 %v0_1439c to i64
  %v2_143a0 = load i32, i32* @r8, align 4
  %v3_143a0 = mul i32 %v2_143a0, %v0_1439c
  store i32 %v3_143a0, i32* @ip, align 4
  %v3_143a4 = load i32, i32* @r7, align 4
  %v4_143a4 = zext i32 %v3_143a4 to i64
  %v5_143a4 = mul nuw nsw i64 %v4_143a4, %v1_1439c
  %v6_143a4 = udiv i64 %v5_143a4, 4294967296
  %v7_143a4 = trunc i64 %v6_143a4 to i32
  %v8_143a4 = trunc i64 %v5_143a4 to i32
  %v1_143a8 = load i32, i32* @r1, align 4
  %v3_143a8 = mul i32 %v1_143a8, %v3_143a4
  %v4_143a8 = add i32 %v3_143a8, %v3_143a0
  %v2_143ac = add i32 %v4_143a8, %v7_143a4
  %v0_143b4 = load i32, i32* @sb, align 4
  %v2_143b4 = sub i32 %v0_143b4, %v8_143a4
  %v3_143b4 = icmp uge i32 %v0_143b4, %v8_143a4
  %v0_143b8 = load i32, i32* @sl, align 4
  %v3_143b8 = icmp eq i1 %v3_143b4, false
  %v4_143b8 = sub i32 %v0_143b8, %v2_143ac
  %v6_143b8 = sext i1 %v3_143b8 to i32
  %v7_143b8 = add i32 %v6_143b8, %v4_143b8
  store i32 %v7_143b8, i32* %sl.global-to-local, align 4
  %v1_143c4 = inttoptr i32 %tmp7 to i32*
  store i32 %v2_143b4, i32* %v1_143c4, align 4
  %v3_143c4 = add i32 %tmp7, 4
  %v4_143c4 = inttoptr i32 %v3_143c4 to i32*
  %v5_143c4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v5_143c4, i32* %v4_143c4, align 4
  %v2_143c8 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_143c8, i32* @r4, align 4
  store i32 %v12_14388, i32* @r7, align 4
  store i32 %v21_14388, i32* @sl, align 4
  ret i32 %v0_1439c

; uselistorder directives
  uselistorder i32 %v8_143a4, { 1, 0 }
  uselistorder i64 %v5_143a4, { 1, 0 }
  uselistorder i32 %v0_1439c, { 1, 0, 2 }
  uselistorder i32 %tmp7, { 1, 0 }
}

define i32 @function_143d0(i32 %arg1, i32 %arg2, i64 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_143d0:
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* @r3, align 4
  %tmp = trunc i64 %arg3 to i32
  store i32 %tmp, i32* @r2, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v21_143d0 = load i32, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg1, i32* @sb, align 4
  store i32 %arg2, i32* @sl, align 4
  %v0_143e4 = call i32 @function_14418()
  %v1_143e8 = load i32, i32* @r8, align 4
  %v2_143e8 = mul i32 %v1_143e8, %v0_143e4
  %v1_143ec = zext i32 %v0_143e4 to i64
  %v2_143ec = load i32, i32* @r7, align 4
  %v3_143ec = zext i32 %v2_143ec to i64
  %v4_143ec = mul nuw i64 %v3_143ec, %v1_143ec
  %v5_143ec = udiv i64 %v4_143ec, 4294967296
  %v6_143ec = trunc i64 %v5_143ec to i32
  %v7_143ec = trunc i64 %v4_143ec to i32
  %v3_143f0 = mul i32 %v2_143ec, %arg2
  %v4_143f0 = add i32 %v3_143f0, %v2_143e8
  %v2_143f4 = add i32 %v4_143f0, %v6_143ec
  %v0_143fc = load i32, i32* @sb, align 4
  %v2_143fc = sub i32 %v0_143fc, %v7_143ec
  %v3_143fc = icmp uge i32 %v0_143fc, %v7_143ec
  %v0_14400 = load i32, i32* @sl, align 4
  %v3_14400 = icmp eq i1 %v3_143fc, false
  %v4_14400 = sub i32 %v0_14400, %v2_143f4
  %v6_14400 = sext i1 %v3_14400 to i32
  %v7_14400 = add i32 %v6_14400, %v4_14400
  store i32 %v7_14400, i32* %sl.global-to-local, align 4
  %v1_1440c = inttoptr i32 %arg5 to i32*
  store i32 %v2_143fc, i32* %v1_1440c, align 4
  %v3_1440c = add i32 %arg5, 4
  %v4_1440c = inttoptr i32 %v3_1440c to i32*
  %v5_1440c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v5_1440c, i32* %v4_1440c, align 4
  store i32 %v21_143d0, i32* %sl.global-to-local, align 4
  ret i32 %v0_143e4

; uselistorder directives
  uselistorder i32 %v7_143ec, { 1, 0 }
  uselistorder i64 %v4_143ec, { 1, 0 }
  uselistorder i32 %v0_143e4, { 1, 2, 0 }
  uselistorder i32* @sb, { 4, 5, 50, 51, 6, 7, 52, 53, 55, 54, 57, 56, 58, 59, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 8, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 92, 99, 100, 101, 102, 103, 93, 94, 1, 95, 2, 96, 97, 0, 98, 9, 10, 15, 16, 11, 12, 13, 14, 104, 105, 106, 107, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 3, 42, 43, 44, 45, 46, 47, 48, 49, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 76, 78, 108, 109, 110, 111, 112, 113, 88, 89, 90 }
  uselistorder i32* @r8, { 14, 15, 117, 118, 223, 224, 225, 23, 0, 24, 25, 170, 171, 172, 173, 119, 120, 122, 121, 124, 123, 125, 126, 174, 175, 226, 227, 228, 1, 229, 230, 231, 2, 232, 233, 16, 127, 128, 129, 130, 4, 151, 152, 153, 176, 177, 5, 198, 199, 200, 201, 202, 203, 204, 6, 13, 211, 178, 179, 180, 181, 182, 183, 184, 185, 192, 193, 7, 194, 195, 8, 196, 197, 186, 9, 187, 188, 189, 190, 191, 205, 10, 206, 207, 208, 209, 210, 234, 235, 26, 27, 28, 29, 30, 31, 32, 18, 19, 20, 21, 22, 17, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 64, 65, 66, 68, 69, 70, 71, 72, 74, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 11, 90, 107, 108, 109, 110, 111, 112, 113, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 115, 116, 131, 133, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 146, 147, 149, 150, 212, 213, 3, 217, 214, 215, 216, 219, 218, 220, 221, 222, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 164, 165, 166, 12, 168, 169 }
  uselistorder i32* @sl, { 8, 9, 10, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 1, 103, 104, 105, 106, 107, 108, 2, 109, 110, 149, 150, 181, 182, 183, 184, 136, 137, 138, 139, 140, 141, 142, 143, 144, 151, 4, 164, 165, 0, 3, 172, 173, 174, 152, 153, 5, 160, 161, 162, 163, 154, 155, 156, 157, 158, 159, 166, 167, 168, 169, 170, 171, 185, 15, 17, 11, 12, 13, 14, 16, 18, 19, 21, 20, 26, 27, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 36, 34, 35, 6, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 85, 87, 88, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 133, 135, 175, 178, 176, 177, 179, 180, 146, 145, 7, 147, 148 }
  uselistorder i32 %arg5, { 1, 0 }
}

define i32 @function_14418() local_unnamed_addr {
dec_label_pc_14418:
  %fp.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v12_14418 = load i32, i32* @r7, align 4
  %v27_14418 = load i32, i32* @lr, align 4
  store i32 43984, i32* %r8.global-to-local, align 4
  %v0_14424 = load i32, i32* @r1, align 4
  %v1_14424 = icmp slt i32 %v0_14424, 0
  br i1 %v1_14424, label %dec_label_pc_147ac, label %dec_label_pc_1444c

dec_label_pc_1444c:                               ; preds = %dec_label_pc_14418
  store i32 0, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32* %r8.global-to-local, align 4
  %v0_1443c = load i32, i32* @r2, align 4
  store i32 %v0_1443c, i32* @r4, align 4
  %v0_14440 = load i32, i32* @r3, align 4
  %v1_1444c = icmp slt i32 %v0_14440, 0
  br i1 %v1_1444c, label %dec_label_pc_147c4, label %dec_label_pc_14454

dec_label_pc_14454:                               ; preds = %dec_label_pc_147ac, %dec_label_pc_1444c, %dec_label_pc_147c4
  %v0_1444090 = phi i32 [ %v0_1444089, %dec_label_pc_147c4 ], [ %v0_1444085, %dec_label_pc_147ac ], [ %v0_14440, %dec_label_pc_1444c ]
  %v1_14794 = phi i32 [ %v6_147c8, %dec_label_pc_147c4 ], [ %v0_1444085, %dec_label_pc_147ac ], [ %v0_14440, %dec_label_pc_1444c ]
  %v0_1449c60 = phi i32 [ %stack_var_-56.2, %dec_label_pc_147c4 ], [ -1, %dec_label_pc_147ac ], [ 0, %dec_label_pc_1444c ]
  %v0_145a8 = phi i32 [ %v1_147c4, %dec_label_pc_147c4 ], [ %v0_1443c84, %dec_label_pc_147ac ], [ %v0_1443c, %dec_label_pc_1444c ]
  %v1_144a0 = phi i32 [ %v0_1445828, %dec_label_pc_147c4 ], [ %v6_147b0, %dec_label_pc_147ac ], [ %v0_14424, %dec_label_pc_1444c ]
  %stack_var_-56.1 = phi i32 [ %v1_147d0, %dec_label_pc_147c4 ], [ -1, %dec_label_pc_147ac ], [ 0, %dec_label_pc_1444c ]
  %v2_14454 = icmp eq i32 %v1_14794, 0
  store i32 %v1_144a0, i32* @r7, align 4
  store i32 %v0_145a8, i32* %r6.global-to-local, align 4
  %v0_14460 = load i32, i32* @r0, align 4
  store i32 %v0_14460, i32* %sb.global-to-local, align 4
  br i1 %v2_14454, label %dec_label_pc_14468, label %dec_label_pc_14560

dec_label_pc_14468:                               ; preds = %dec_label_pc_14454
  %tmp = icmp ugt i32 %v0_145a8, %v1_144a0
  br i1 %tmp, label %dec_label_pc_14470, label %dec_label_pc_145a0

dec_label_pc_14470:                               ; preds = %dec_label_pc_14468
  %v2_14470 = icmp ugt i32 %v0_145a8, 65535
  br i1 %v2_14470, label %dec_label_pc_14950, label %dec_label_pc_14478

dec_label_pc_14478:                               ; preds = %dec_label_pc_14470
  %v2_14478 = icmp ugt i32 %v0_145a8, 254
  %v7_14478 = icmp eq i32 %v0_145a8, 255
  %v2_1447c = xor i1 %v7_14478, true
  %v3_1447c = and i1 %v2_14478, %v2_1447c
  br i1 %v3_1447c, label %bb, label %bb123

bb:                                               ; preds = %dec_label_pc_14478
  br label %bb123

bb123:                                            ; preds = %dec_label_pc_14478, %bb
  %v0_1449c58 = phi i32 [ %v0_1449c60, %dec_label_pc_14478 ], [ 24, %bb ]
  %v2_14480 = xor i1 %v2_14478, true
  %v3_14480 = or i1 %v7_14478, %v2_14480
  br i1 %v3_14480, label %bb124, label %.thread94

bb124:                                            ; preds = %bb123
  br label %.thread94

.thread94:                                        ; preds = %bb123, %bb124
  %v0_1449c5792 = phi i32 [ 32, %bb124 ], [ %v0_1449c58, %bb123 ]
  %v1_1448c53 = phi i32 [ 0, %bb124 ], [ %v0_1444090, %bb123 ]
  br i1 %v3_1447c, label %bb125, label %bb126

bb125:                                            ; preds = %.thread94
  br label %bb126

bb126:                                            ; preds = %bb186, %bb185, %.thread94, %bb125
  %v0_1449c = phi i32 [ 16, %bb186 ], [ %v0_1449c59, %bb185 ], [ %v0_1449c5792, %.thread94 ], [ %v0_1449c5792, %bb125 ]
  %v1_1448c = phi i32 [ %v1_1448c54, %bb186 ], [ %v1_1448c54, %bb185 ], [ %v1_1448c53, %.thread94 ], [ 8, %bb125 ]
  %v6_1448c = lshr i32 %v0_145a8, %v1_1448c
  %v4_14494 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32 36) to i32*), align 4
  %v2_14498 = add i32 %v4_14494, %v6_1448c
  %v3_14498 = inttoptr i32 %v2_14498 to i8*
  %v4_14498 = load i8, i8* %v3_14498, align 1
  %v6_14498 = zext i8 %v4_14498 to i32
  %v2_1449c = sub nsw i32 %v0_1449c, %v6_14498
  %v9_1449c = icmp eq i32 %v0_1449c, %v6_14498
  br i1 %v9_1449c, label %.thread2.thread20, label %bb128

.thread2.thread20:                                ; preds = %bb126
  %v3_144b024 = udiv i32 %v0_145a8, 65536
  store i32 %v3_144b024, i32* %r8.global-to-local, align 4
  br label %bb129

bb128:                                            ; preds = %bb126
  %v7_144a0 = shl i32 %v1_144a0, %v2_1449c
  %v2_144a4 = sub i32 32, %v2_1449c
  %v7_144a8 = shl i32 %v0_145a8, %v2_1449c
  store i32 %v7_144a8, i32* %r6.global-to-local, align 4
  %v8_144ac = lshr i32 %v0_14460, %v2_144a4
  %v9_144ac = or i32 %v8_144ac, %v7_144a0
  store i32 %v9_144ac, i32* @r7, align 4
  %v3_144b0 = udiv i32 %v7_144a8, 65536
  store i32 %v3_144b0, i32* %r8.global-to-local, align 4
  %v7_144b4 = shl i32 %v0_14460, %v2_1449c
  store i32 %v7_144b4, i32* %sb.global-to-local, align 4
  br label %bb129

bb129:                                            ; preds = %.thread2.thread20, %bb128
  %v0_144bc = phi i32 [ %v3_144b024, %.thread2.thread20 ], [ %v3_144b0, %bb128 ]
  %v0_144b8 = phi i32 [ %v1_144a0, %.thread2.thread20 ], [ %v9_144ac, %bb128 ]
  store i32 %v0_144b8, i32* @r0, align 4
  store i32 %v0_144bc, i32* @r1, align 4
  %v0_144c0 = call i32 @function_f6f8()
  %v0_144c4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_144c0, i32* %sl.global-to-local, align 4
  %v0_144cc = load i32, i32* @r7, align 4
  %v2_144d0 = call i32 @function_f7f4(i32 %v0_144cc, i32 %v0_144c4)
  %v0_144d4 = load i32, i32* %r6.global-to-local, align 4
  %v3_144d8 = urem i32 %v0_144d4, 65536
  store i32 %v3_144d8, i32* @r7, align 4
  %v2_144dc = mul i32 %v0_144c0, %v3_144d8
  %v0_144e0 = load i32, i32* %sb.global-to-local, align 4
  %v3_144e0 = udiv i32 %v0_144e0, 65536
  %v4_144e4 = mul i32 %v0_144c4, 65536
  %v5_144e4 = or i32 %v3_144e0, %v4_144e4
  %tmp191 = icmp ugt i32 %v2_144dc, %v5_144e4
  br i1 %tmp191, label %dec_label_pc_144f0, label %.thread95

dec_label_pc_144f0:                               ; preds = %bb129
  %v2_144f0 = add i32 %v5_144e4, %v0_144d4
  %v3_144f0 = icmp ult i32 %v2_144f0, %v5_144e4
  %v1_144f4 = add i32 %v0_144c0, -1
  store i32 %v1_144f4, i32* %sl.global-to-local, align 4
  br i1 %v3_144f0, label %.thread95, label %dec_label_pc_144fc

dec_label_pc_144fc:                               ; preds = %dec_label_pc_144f0
  %tmp192 = icmp ugt i32 %v2_144dc, %v2_144f0
  br i1 %tmp192, label %bb130, label %.thread95

bb130:                                            ; preds = %dec_label_pc_144fc
  %v5_14500 = add i32 %v0_144c0, -2
  store i32 %v5_14500, i32* %sl.global-to-local, align 4
  %v6_14504 = add i32 %v2_144f0, %v0_144d4
  br label %.thread95

.thread95:                                        ; preds = %bb129, %dec_label_pc_144fc, %dec_label_pc_144f0, %bb130
  %v1_14508 = phi i32 [ %v2_144f0, %dec_label_pc_144f0 ], [ %v5_144e4, %bb129 ], [ %v6_14504, %bb130 ], [ %v2_144f0, %dec_label_pc_144fc ]
  %v2_14508 = sub i32 %v1_14508, %v2_144dc
  store i32 %v2_14508, i32* @r4, align 4
  %v0_1450c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1450c, i32* @r1, align 4
  store i32 %v2_14508, i32* @r0, align 4
  %v0_14514 = call i32 @function_f6f8()
  store i32 %v0_14514, i32* @r5, align 4
  %v0_14520 = load i32, i32* @r4, align 4
  %v2_14524 = call i32 @function_f7f4(i32 %v0_14520, i32 %v0_1450c)
  %v0_14528 = load i32, i32* @r7, align 4
  %v1_14528 = load i32, i32* @r5, align 4
  %v2_14528 = mul i32 %v1_14528, %v0_14528
  %v0_1452c = load i32, i32* %sb.global-to-local, align 4
  %v3_14530 = urem i32 %v0_1452c, 65536
  %v4_14534 = mul i32 %v0_1450c, 65536
  %v5_14534 = or i32 %v3_14530, %v4_14534
  %tmp193 = icmp ugt i32 %v2_14528, %v5_14534
  br i1 %tmp193, label %dec_label_pc_14540, label %bb132

dec_label_pc_14540:                               ; preds = %.thread95
  %v1_14540 = load i32, i32* %r6.global-to-local, align 4
  %v2_14540 = add i32 %v1_14540, %v5_14534
  %v3_14540 = icmp ult i32 %v2_14540, %v5_14534
  %v1_14544 = add i32 %v1_14528, -1
  br i1 %v3_14540, label %bb132, label %dec_label_pc_1454c

dec_label_pc_1454c:                               ; preds = %dec_label_pc_14540
  %tmp194 = icmp ugt i32 %v2_14528, %v2_14540
  br i1 %tmp194, label %bb131, label %bb132

bb131:                                            ; preds = %dec_label_pc_1454c
  %v5_14550 = add i32 %v1_14528, -2
  br label %bb132

bb132:                                            ; preds = %.thread95, %dec_label_pc_14540, %dec_label_pc_1454c, %bb131
  %v0_14554 = phi i32 [ %v1_14544, %dec_label_pc_14540 ], [ %v1_14528, %.thread95 ], [ %v1_14544, %dec_label_pc_1454c ], [ %v5_14550, %bb131 ]
  %v1_14554 = load i32, i32* %sl.global-to-local, align 4
  %v4_14554 = mul i32 %v1_14554, 65536
  %v5_14554 = or i32 %v4_14554, %v0_14554
  br label %dec_label_pc_14574

dec_label_pc_14560:                               ; preds = %dec_label_pc_14454
  %v9_14560 = icmp eq i32 %v1_144a0, %v1_14794
  %tmp195 = icmp ult i32 %v1_144a0, %v1_14794
  br i1 %tmp195, label %dec_label_pc_1456c, label %dec_label_pc_1475c

dec_label_pc_1456c:                               ; preds = %bb156, %dec_label_pc_14560, %bb157
  br label %dec_label_pc_14574

dec_label_pc_14574:                               ; preds = %.thread13, %bb178, %dec_label_pc_14944, %bb145, %bb132, %dec_label_pc_1456c
  %v0_1458c = phi i32 [ %v5_148e8, %bb178 ], [ 1, %.thread13 ], [ %v1_14944, %dec_label_pc_14944 ], [ %v5_14750, %bb145 ], [ %v5_14554, %bb132 ], [ 0, %dec_label_pc_1456c ]
  %v2_14580 = icmp eq i32 %stack_var_-56.1, 0
  br i1 %v2_14580, label %dec_label_pc_14594, label %dec_label_pc_1458c

dec_label_pc_1458c:                               ; preds = %dec_label_pc_14574
  %v1_1458c = sub i32 0, %v0_1458c
  br label %dec_label_pc_14594

dec_label_pc_14594:                               ; preds = %dec_label_pc_14574, %dec_label_pc_1458c
  %v1_1459c = phi i32 [ %v0_1458c, %dec_label_pc_14574 ], [ %v1_1458c, %dec_label_pc_1458c ]
  store i32 %v12_14418, i32* @r7, align 4
  ret i32 %v1_1459c

dec_label_pc_145a0:                               ; preds = %dec_label_pc_14468
  %v2_145a0 = icmp eq i32 %v0_145a8, 0
  br i1 %v2_145a0, label %dec_label_pc_145a8, label %dec_label_pc_145b8

dec_label_pc_145a8:                               ; preds = %dec_label_pc_145a0
  store i32 0, i32* @r1, align 4
  store i32 1, i32* @r0, align 4
  %v0_145b0 = call i32 @function_f6f8()
  store i32 %v0_145b0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_145b8

dec_label_pc_145b8:                               ; preds = %dec_label_pc_145a0, %dec_label_pc_145a8
  %v0_14608 = phi i32 [ %v0_145a8, %dec_label_pc_145a0 ], [ %v0_145b0, %dec_label_pc_145a8 ]
  %v3_145bc = icmp ult i32 %v0_14608, 65534
  br i1 %v3_145bc, label %dec_label_pc_147dc, label %dec_label_pc_145c0

dec_label_pc_145c0:                               ; preds = %dec_label_pc_145b8
  %v3_145c4 = icmp ugt i32 %v0_14608, 16777214
  %v9_145c4 = icmp eq i32 %v0_14608, 16777215
  %v2_145c8 = xor i1 %v9_145c4, true
  %v3_145c8 = and i1 %v3_145c4, %v2_145c8
  br i1 %v3_145c8, label %bb134, label %bb135

bb134:                                            ; preds = %dec_label_pc_145c0
  br label %bb135

bb135:                                            ; preds = %dec_label_pc_145c0, %bb134
  %v1_145d869 = phi i32 [ 16777215, %dec_label_pc_145c0 ], [ 24, %bb134 ]
  %v2_145cc = xor i1 %v3_145c4, true
  %v3_145cc = or i1 %v9_145c4, %v2_145cc
  br i1 %v3_145cc, label %bb136, label %bb137

bb136:                                            ; preds = %bb135
  br label %bb137

bb137:                                            ; preds = %bb135, %bb136
  %v1_145d868 = phi i32 [ %v1_145d869, %bb135 ], [ 16, %bb136 ]
  br i1 %v3_145c8, label %bb138, label %bb139

bb138:                                            ; preds = %bb137
  store i32 8, i32* @ip, align 4
  br label %bb139

bb139:                                            ; preds = %bb137, %bb138
  br i1 %v3_145cc, label %bb140, label %bb141

bb140:                                            ; preds = %bb139
  store i32 16, i32* @ip, align 4
  br label %bb141

bb141:                                            ; preds = %._crit_edge, %bb161, %bb139, %bb140
  %v1_145d8 = phi i32 [ %v1_145d8.pre, %._crit_edge ], [ 8, %bb161 ], [ %v1_145d868, %bb139 ], [ %v1_145d868, %bb140 ]
  %v6_145d8 = lshr i32 %v0_14608, %v1_145d8
  %v0_145e0 = load i32, i32* %r8.global-to-local, align 4
  %v2_145e0 = add i32 %v0_145e0, 36
  %v3_145e0 = inttoptr i32 %v2_145e0 to i32*
  %v4_145e0 = load i32, i32* %v3_145e0, align 4
  %v2_145e4 = add i32 %v4_145e0, %v6_145d8
  %v3_145e4 = inttoptr i32 %v2_145e4 to i8*
  %v4_145e4 = load i8, i8* %v3_145e4, align 1
  %v6_145e4 = zext i8 %v4_145e4 to i32
  %v0_145e8 = load i32, i32* @ip, align 4
  %v2_145e8 = sub i32 %v0_145e8, %v6_145e4
  store i32 %v2_145e8, i32* %sl.global-to-local, align 4
  %v9_145e8 = icmp eq i32 %v0_145e8, %v6_145e4
  %v2_145f0 = load i32, i32* @r7, align 4
  br i1 %v9_145e8, label %.thread11, label %dec_label_pc_14604

.thread11:                                        ; preds = %bb141
  %v3_145f0 = sub i32 %v2_145f0, %v0_14608
  store i32 %v3_145f0, i32* @r4, align 4
  %v4_145f4 = urem i32 %v0_14608, 65536
  store i32 %v4_145f4, i32* %r8.global-to-local, align 4
  %v4_145f8 = udiv i32 %v0_14608, 65536
  store i32 %v4_145f8, i32* @r7, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_146bc

dec_label_pc_14604:                               ; preds = %bb141
  %v6_14604 = shl i32 %v2_145f0, %v2_145e8
  %v6_14608 = shl i32 %v0_14608, %v2_145e8
  store i32 %v6_14608, i32* %r6.global-to-local, align 4
  %v1_1460c = sub i32 32, %v2_145e8
  %v6_14610 = lshr i32 %v2_145f0, %v1_1460c
  store i32 %v6_14610, i32* @r4, align 4
  %v1_14614 = load i32, i32* %sb.global-to-local, align 4
  %v7_14614 = lshr i32 %v1_14614, %v1_1460c
  %v8_14614 = or i32 %v7_14614, %v6_14604
  %v3_14618 = udiv i32 %v6_14608, 65536
  store i32 %v3_14618, i32* @r7, align 4
  store i32 %v3_14618, i32* @r1, align 4
  store i32 %v6_14610, i32* @r0, align 4
  %v0_14628 = call i32 @function_f6f8()
  %v0_1462c = load i32, i32* @r7, align 4
  store i32 %v0_14628, i32* %fp.global-to-local, align 4
  %v0_14634 = load i32, i32* @r4, align 4
  %v2_14638 = call i32 @function_f7f4(i32 %v0_14634, i32 %v0_1462c)
  %v0_1463c = load i32, i32* %r6.global-to-local, align 4
  %v3_14640 = urem i32 %v0_1463c, 65536
  store i32 %v3_14640, i32* %r8.global-to-local, align 4
  %v2_14644 = mul i32 %v0_14628, %v3_14640
  %v3_1464c = udiv i32 %v8_14614, 65536
  %v4_14650 = mul i32 %v0_1462c, 65536
  %v5_14650 = or i32 %v4_14650, %v3_1464c
  %tmp196 = icmp ugt i32 %v2_14644, %v5_14650
  br i1 %tmp196, label %dec_label_pc_1465c, label %dec_label_pc_14668

dec_label_pc_1465c:                               ; preds = %dec_label_pc_14604
  %v2_1465c = add i32 %v0_1463c, %v5_14650
  %v3_1465c = icmp ult i32 %v2_1465c, %v5_14650
  %v1_14660 = add i32 %v0_14628, -1
  store i32 %v1_14660, i32* %fp.global-to-local, align 4
  br i1 %v3_1465c, label %dec_label_pc_14668, label %dec_label_pc_149a0

dec_label_pc_14668:                               ; preds = %dec_label_pc_14604, %dec_label_pc_149a0, %bb190, %dec_label_pc_1465c
  %v1_14668 = phi i32 [ %v6_149a8, %bb190 ], [ %v2_1465c, %dec_label_pc_1465c ], [ %v5_14650, %dec_label_pc_14604 ], [ %v2_1465c, %dec_label_pc_149a0 ]
  %v2_14668 = sub i32 %v1_14668, %v2_14644
  store i32 %v2_14668, i32* @r4, align 4
  %v0_1466c = load i32, i32* @r7, align 4
  store i32 %v0_1466c, i32* @r1, align 4
  store i32 %v2_14668, i32* @r0, align 4
  %v0_14674 = call i32 @function_f6f8()
  %v0_14678 = load i32, i32* @r7, align 4
  store i32 %v0_14674, i32* @r5, align 4
  %v0_14680 = load i32, i32* @r4, align 4
  %v2_14684 = call i32 @function_f7f4(i32 %v0_14680, i32 %v0_14678)
  %v0_14688 = load i32, i32* %r8.global-to-local, align 4
  %v1_14688 = load i32, i32* @r5, align 4
  %v2_14688 = mul i32 %v1_14688, %v0_14688
  %v3_14694 = urem i32 %v8_14614, 65536
  %v4_14698 = mul i32 %v0_14678, 65536
  %v5_14698 = or i32 %v4_14698, %v3_14694
  %tmp197 = icmp ugt i32 %v2_14688, %v5_14698
  br i1 %tmp197, label %dec_label_pc_146a4, label %dec_label_pc_146b0

dec_label_pc_146a4:                               ; preds = %dec_label_pc_14668
  %v1_146a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_146a4 = add i32 %v1_146a4, %v5_14698
  %v3_146a4 = icmp ult i32 %v2_146a4, %v5_14698
  %v1_146a8 = add i32 %v1_14688, -1
  br i1 %v3_146a4, label %dec_label_pc_146b0, label %dec_label_pc_14990

dec_label_pc_146b0:                               ; preds = %dec_label_pc_14668, %dec_label_pc_14990, %bb189, %dec_label_pc_146a4
  %v0_146b8 = phi i32 [ %v5_14994, %bb189 ], [ %v1_146a8, %dec_label_pc_146a4 ], [ %v1_14688, %dec_label_pc_14668 ], [ %v1_146a8, %dec_label_pc_14990 ]
  %v1_146b4 = phi i32 [ %v6_14998, %bb189 ], [ %v2_146a4, %dec_label_pc_146a4 ], [ %v5_14698, %dec_label_pc_14668 ], [ %v2_146a4, %dec_label_pc_14990 ]
  %v0_146b0 = load i32, i32* %sb.global-to-local, align 4
  %v1_146b0 = load i32, i32* %sl.global-to-local, align 4
  %v6_146b0 = shl i32 %v0_146b0, %v1_146b0
  store i32 %v6_146b0, i32* %sb.global-to-local, align 4
  %v2_146b4 = sub i32 %v1_146b4, %v2_14688
  store i32 %v2_146b4, i32* @r4, align 4
  %v1_146b8 = load i32, i32* %fp.global-to-local, align 4
  %v4_146b8 = mul i32 %v1_146b8, 65536
  %v5_146b8 = or i32 %v4_146b8, %v0_146b8
  store i32 %v5_146b8, i32* %fp.global-to-local, align 4
  %v0_146bc.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_146bc

dec_label_pc_146bc:                               ; preds = %.thread11, %dec_label_pc_146b0
  %v0_146c0 = phi i32 [ %v3_145f0, %.thread11 ], [ %v2_146b4, %dec_label_pc_146b0 ]
  %v0_146bc = phi i32 [ %v4_145f8, %.thread11 ], [ %v0_146bc.pre, %dec_label_pc_146b0 ]
  store i32 %v0_146bc, i32* @r1, align 4
  store i32 %v0_146c0, i32* @r0, align 4
  %v0_146c4 = call i32 @function_f6f8()
  %v0_146c8 = load i32, i32* @r7, align 4
  store i32 %v0_146c4, i32* %sl.global-to-local, align 4
  %v0_146d0 = load i32, i32* @r4, align 4
  %v2_146d4 = call i32 @function_f7f4(i32 %v0_146d0, i32 %v0_146c8)
  %v0_146d8 = load i32, i32* %r8.global-to-local, align 4
  %v2_146d8 = mul i32 %v0_146c4, %v0_146d8
  %v0_146dc = load i32, i32* %sb.global-to-local, align 4
  %v3_146dc = udiv i32 %v0_146dc, 65536
  %v4_146e0 = mul i32 %v0_146c8, 65536
  %v5_146e0 = or i32 %v3_146dc, %v4_146e0
  %tmp198 = icmp ugt i32 %v2_146d8, %v5_146e0
  br i1 %tmp198, label %dec_label_pc_146ec, label %.thread96

dec_label_pc_146ec:                               ; preds = %dec_label_pc_146bc
  %v1_146ec = load i32, i32* %r6.global-to-local, align 4
  %v2_146ec = add i32 %v1_146ec, %v5_146e0
  %v3_146ec = icmp ult i32 %v2_146ec, %v5_146e0
  %v1_146f0 = add i32 %v0_146c4, -1
  store i32 %v1_146f0, i32* %sl.global-to-local, align 4
  br i1 %v3_146ec, label %.thread96, label %dec_label_pc_146f8

dec_label_pc_146f8:                               ; preds = %dec_label_pc_146ec
  %tmp199 = icmp ugt i32 %v2_146d8, %v2_146ec
  br i1 %tmp199, label %bb143, label %.thread96

bb143:                                            ; preds = %dec_label_pc_146f8
  %v5_146fc = add i32 %v0_146c4, -2
  store i32 %v5_146fc, i32* %sl.global-to-local, align 4
  %v6_14700 = add i32 %v2_146ec, %v1_146ec
  br label %.thread96

.thread96:                                        ; preds = %dec_label_pc_146bc, %dec_label_pc_146f8, %dec_label_pc_146ec, %bb143
  %v1_14704 = phi i32 [ %v2_146ec, %dec_label_pc_146ec ], [ %v5_146e0, %dec_label_pc_146bc ], [ %v6_14700, %bb143 ], [ %v2_146ec, %dec_label_pc_146f8 ]
  %v2_14704 = sub i32 %v1_14704, %v2_146d8
  store i32 %v2_14704, i32* @r4, align 4
  %v0_14708 = load i32, i32* @r7, align 4
  store i32 %v0_14708, i32* @r1, align 4
  store i32 %v2_14704, i32* @r0, align 4
  %v0_14710 = call i32 @function_f6f8()
  %v0_14714 = load i32, i32* @r7, align 4
  store i32 %v0_14710, i32* @r5, align 4
  %v0_1471c = load i32, i32* @r4, align 4
  %v2_14720 = call i32 @function_f7f4(i32 %v0_1471c, i32 %v0_14714)
  %v0_14724 = load i32, i32* %r8.global-to-local, align 4
  %v1_14724 = load i32, i32* @r5, align 4
  %v2_14724 = mul i32 %v1_14724, %v0_14724
  %v0_14728 = load i32, i32* %sb.global-to-local, align 4
  %v3_1472c = urem i32 %v0_14728, 65536
  %v4_14730 = mul i32 %v0_14714, 65536
  %v5_14730 = or i32 %v3_1472c, %v4_14730
  %tmp200 = icmp ugt i32 %v2_14724, %v5_14730
  br i1 %tmp200, label %dec_label_pc_1473c, label %bb145

dec_label_pc_1473c:                               ; preds = %.thread96
  %v1_1473c = load i32, i32* %r6.global-to-local, align 4
  %v2_1473c = add i32 %v1_1473c, %v5_14730
  %v3_1473c = icmp ult i32 %v2_1473c, %v5_14730
  %v1_14740 = add i32 %v1_14724, -1
  br i1 %v3_1473c, label %bb145, label %dec_label_pc_14748

dec_label_pc_14748:                               ; preds = %dec_label_pc_1473c
  %tmp201 = icmp ugt i32 %v2_14724, %v2_1473c
  br i1 %tmp201, label %bb144, label %bb145

bb144:                                            ; preds = %dec_label_pc_14748
  %v5_1474c = add i32 %v1_14724, -2
  br label %bb145

bb145:                                            ; preds = %.thread96, %dec_label_pc_1473c, %dec_label_pc_14748, %bb144
  %v0_14750 = phi i32 [ %v1_14740, %dec_label_pc_1473c ], [ %v1_14724, %.thread96 ], [ %v1_14740, %dec_label_pc_14748 ], [ %v5_1474c, %bb144 ]
  %v1_14750 = load i32, i32* %sl.global-to-local, align 4
  %v4_14750 = mul i32 %v1_14750, 65536
  %v5_14750 = or i32 %v4_14750, %v0_14750
  br label %dec_label_pc_14574

dec_label_pc_1475c:                               ; preds = %dec_label_pc_14560
  %v3_14760 = icmp ult i32 %v1_14794, 65534
  br i1 %v3_14760, label %dec_label_pc_147f4, label %dec_label_pc_14764

dec_label_pc_14764:                               ; preds = %dec_label_pc_1475c
  %v3_14768 = icmp ugt i32 %v1_14794, 16777214
  %v9_14768 = icmp eq i32 %v1_14794, 16777215
  %v2_1476c = xor i1 %v9_14768, true
  %v3_1476c = and i1 %v3_14768, %v2_1476c
  br i1 %v3_1476c, label %bb147, label %bb148

bb147:                                            ; preds = %dec_label_pc_14764
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_14764, %bb147
  %v1_1477431 = phi i32 [ 16777215, %dec_label_pc_14764 ], [ 24, %bb147 ]
  %v2_14770 = xor i1 %v3_14768, true
  %v3_14770 = or i1 %v9_14768, %v2_14770
  br i1 %v3_14770, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_14774 = phi i32 [ %v1_1477431, %bb148 ], [ 16, %bb149 ]
  %v2_14774 = add nsw i32 %v1_14774, -1
  %v3_14774 = shl i32 1, %v2_14774
  %v4_14774 = and i32 %v3_14774, %v1_14794
  %v5_14774 = icmp ne i32 %v4_14774, 0
  %v6_14774 = lshr i32 %v1_14794, %v1_14774
  %v4_1477c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32 36) to i32*), align 4
  %v2_14780 = add i32 %v4_1477c, %v6_14774
  %v3_14780 = inttoptr i32 %v2_14780 to i8*
  %v4_14780 = load i8, i8* %v3_14780, align 1
  %v6_14780 = zext i8 %v4_14780 to i32
  %v3_14784 = and i1 %v5_14774, %v2_1476c
  br i1 %v3_14784, label %bb151, label %bb152

bb151:                                            ; preds = %bb150
  store i32 8, i32* @lr, align 4
  br label %bb152

bb152:                                            ; preds = %bb150, %bb151
  %v0_1478c33 = phi i32 [ %v27_14418, %bb150 ], [ 8, %bb151 ]
  %v2_14788 = xor i1 %v5_14774, true
  %v3_14788 = or i1 %v9_14768, %v2_14788
  br i1 %v3_14788, label %bb153, label %bb154

bb153:                                            ; preds = %bb152
  store i32 16, i32* @lr, align 4
  br label %bb154

bb154:                                            ; preds = %bb152, %bb153
  %v0_1478c = phi i32 [ %v0_1478c33, %bb152 ], [ 16, %bb153 ]
  %v2_1478c = sub i32 %v0_1478c, %v6_14780
  store i32 %v2_1478c, i32* %fp.global-to-local, align 4
  %v9_1478c = icmp eq i32 %v0_1478c, %v6_14780
  br i1 %v9_1478c, label %dec_label_pc_14794, label %dec_label_pc_14820

dec_label_pc_14794:                               ; preds = %bb154, %bb169
  %v3_14794 = icmp uge i32 %v1_144a0, %v1_14794
  %v2_14798 = xor i1 %v3_14794, true
  %v3_14798 = or i1 %v9_14560, %v2_14798
  br i1 %v3_14798, label %bb156, label %bb157

bb156:                                            ; preds = %dec_label_pc_14794
  %v7_14798 = icmp ult i32 %v0_14460, %v0_145a8
  br i1 %v7_14798, label %dec_label_pc_1456c, label %.thread13

bb157:                                            ; preds = %dec_label_pc_14794
  br i1 %v3_14794, label %.thread13, label %dec_label_pc_1456c

.thread13:                                        ; preds = %bb156, %bb157
  br label %dec_label_pc_14574

dec_label_pc_147ac:                               ; preds = %dec_label_pc_14418
  store i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32* %r8.global-to-local, align 4
  %v0_1443c84 = load i32, i32* @r2, align 4
  store i32 %v0_1443c84, i32* @r4, align 4
  %v0_1444085 = load i32, i32* @r3, align 4
  %v0_147ac = load i32, i32* @r0, align 4
  %v1_147ac = sub i32 0, %v0_147ac
  store i32 %v1_147ac, i32* @r0, align 4
  %v2_147ac = icmp eq i32 %v0_147ac, 0
  %v2_147b0 = icmp eq i1 %v2_147ac, false
  %v5_147b0 = sext i1 %v2_147b0 to i32
  %v6_147b0 = sub i32 %v5_147b0, %v0_14424
  store i32 -1, i32* @ip, align 4
  %v1_147b8 = icmp slt i32 %v0_1444085, 0
  br i1 %v1_147b8, label %dec_label_pc_147c4, label %dec_label_pc_14454

dec_label_pc_147c4:                               ; preds = %dec_label_pc_147ac, %dec_label_pc_1444c
  %v0_1444089 = phi i32 [ %v0_1444085, %dec_label_pc_147ac ], [ %v0_14440, %dec_label_pc_1444c ]
  %v0_1443c86 = phi i32 [ %v0_1443c84, %dec_label_pc_147ac ], [ %v0_1443c, %dec_label_pc_1444c ]
  %v0_1445828 = phi i32 [ %v6_147b0, %dec_label_pc_147ac ], [ %v0_14424, %dec_label_pc_1444c ]
  %stack_var_-56.2 = phi i32 [ -1, %dec_label_pc_147ac ], [ 0, %dec_label_pc_1444c ]
  %v1_147c4 = sub i32 0, %v0_1443c86
  store i32 %v1_147c4, i32* @r4, align 4
  %v2_147c4 = icmp eq i32 %v0_1443c86, 0
  %v2_147c8 = icmp eq i1 %v2_147c4, false
  %v5_147c8 = sext i1 %v2_147c8 to i32
  %v6_147c8 = sub i32 %v5_147c8, %v0_1444089
  %v1_147d0 = sub nsw i32 -1, %stack_var_-56.2
  br label %dec_label_pc_14454

dec_label_pc_147dc:                               ; preds = %dec_label_pc_145b8
  %v2_147dc = icmp ugt i32 %v0_14608, 254
  %v7_147dc = icmp eq i32 %v0_14608, 255
  %v2_147e0 = xor i1 %v7_147dc, true
  %v3_147e0 = and i1 %v2_147dc, %v2_147e0
  br i1 %v3_147e0, label %bb158, label %bb159

bb158:                                            ; preds = %dec_label_pc_147dc
  store i32 24, i32* @ip, align 4
  br label %bb159

bb159:                                            ; preds = %dec_label_pc_147dc, %bb158
  %v2_147e4 = xor i1 %v2_147dc, true
  %v3_147e4 = or i1 %v7_147dc, %v2_147e4
  br i1 %v3_147e4, label %bb160, label %.thread98

bb160:                                            ; preds = %bb159
  store i32 32, i32* @ip, align 4
  store i32 0, i32* @r3, align 4
  br label %.thread98

.thread98:                                        ; preds = %bb159, %bb160
  br i1 %v3_147e0, label %bb161, label %._crit_edge

._crit_edge:                                      ; preds = %.thread98
  %v1_145d8.pre = load i32, i32* @r3, align 4
  br label %bb141

bb161:                                            ; preds = %.thread98
  br label %bb141

dec_label_pc_147f4:                               ; preds = %dec_label_pc_1475c
  %v2_147f4 = icmp ugt i32 %v1_14794, 254
  %v7_147f4 = icmp eq i32 %v1_14794, 255
  %v2_147f8 = xor i1 %v7_147f4, true
  %v3_147f8 = and i1 %v2_147f4, %v2_147f8
  br i1 %v3_147f8, label %bb162, label %bb163

bb162:                                            ; preds = %dec_label_pc_147f4
  br label %bb163

bb163:                                            ; preds = %dec_label_pc_147f4, %bb162
  %v1_1480035 = phi i32 [ %v0_1444090, %dec_label_pc_147f4 ], [ 8, %bb162 ]
  %v2_147fc = xor i1 %v2_147f4, true
  %v3_147fc = or i1 %v7_147f4, %v2_147fc
  br i1 %v3_147fc, label %bb164, label %bb165

bb164:                                            ; preds = %bb163
  br label %bb165

bb165:                                            ; preds = %bb163, %bb164
  %v1_14800 = phi i32 [ %v1_1480035, %bb163 ], [ 0, %bb164 ]
  %v2_14800 = add i32 %v1_14800, -1
  %v3_14800 = shl i32 1, %v2_14800
  %v4_14800 = and i32 %v3_14800, %v1_14794
  %v5_14800 = icmp ne i32 %v4_14800, 0
  %v6_14800 = lshr i32 %v1_14794, %v1_14800
  %v4_14808 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32 36) to i32*), align 4
  %v2_1480c = add i32 %v4_14808, %v6_14800
  %v3_1480c = inttoptr i32 %v2_1480c to i8*
  %v4_1480c = load i8, i8* %v3_1480c, align 1
  %v6_1480c = zext i8 %v4_1480c to i32
  %v3_14810 = and i1 %v5_14800, %v2_147f8
  br i1 %v3_14810, label %bb166, label %bb167

bb166:                                            ; preds = %bb165
  store i32 24, i32* @lr, align 4
  br label %bb167

bb167:                                            ; preds = %bb165, %bb166
  %v0_1481837 = phi i32 [ %v27_14418, %bb165 ], [ 24, %bb166 ]
  %v2_14814 = xor i1 %v5_14800, true
  %v3_14814 = or i1 %v7_147f4, %v2_14814
  br i1 %v3_14814, label %bb168, label %bb169

bb168:                                            ; preds = %bb167
  store i32 32, i32* @lr, align 4
  br label %bb169

bb169:                                            ; preds = %bb167, %bb168
  %v0_14818 = phi i32 [ %v0_1481837, %bb167 ], [ 32, %bb168 ]
  %v2_14818 = sub i32 %v0_14818, %v6_1480c
  store i32 %v2_14818, i32* %fp.global-to-local, align 4
  %v9_14818 = icmp eq i32 %v0_14818, %v6_1480c
  br i1 %v9_14818, label %dec_label_pc_14794, label %dec_label_pc_14820

dec_label_pc_14820:                               ; preds = %bb154, %bb169
  %v1_1482c = phi i32 [ %v2_1478c, %bb154 ], [ %v2_14818, %bb169 ]
  %v6_14820 = shl i32 %v1_14794, %v1_1482c
  %v1_14824 = sub i32 32, %v1_1482c
  %v7_14828 = lshr i32 %v0_145a8, %v1_14824
  %v8_14828 = or i32 %v7_14828, %v6_14820
  store i32 %v8_14828, i32* %r8.global-to-local, align 4
  %v6_1482c = shl i32 %v1_144a0, %v1_1482c
  %v6_14830 = lshr i32 %v1_144a0, %v1_14824
  store i32 %v6_14830, i32* @r4, align 4
  %v7_14834 = lshr i32 %v0_14460, %v1_14824
  %v8_14834 = or i32 %v7_14834, %v6_1482c
  %v3_14838 = udiv i32 %v8_14828, 65536
  store i32 %v3_14838, i32* %sl.global-to-local, align 4
  store i32 %v3_14838, i32* @r1, align 4
  store i32 %v6_14830, i32* @r0, align 4
  %v0_14848 = call i32 @function_f6f8()
  %v0_14854 = load i32, i32* @r4, align 4
  %v2_14858 = call i32 @function_f7f4(i32 %v0_14854, i32 %v3_14838)
  %v0_1485c = load i32, i32* %r8.global-to-local, align 4
  %v3_14864 = urem i32 %v0_1485c, 65536
  store i32 %v3_14864, i32* @r7, align 4
  %v2_14868 = mul i32 %v3_14864, %v0_14848
  %v3_14870 = udiv i32 %v8_14834, 65536
  %v4_14874 = mul nuw i32 %v3_14838, 65536
  %v5_14874 = or i32 %v4_14874, %v3_14870
  %v9_14878 = icmp eq i32 %v2_14868, %v5_14874
  %v0_1487c = load i32, i32* %r6.global-to-local, align 4
  %v1_1487c = load i32, i32* %fp.global-to-local, align 4
  %v2_1487c = add i32 %v1_1487c, -1
  %v3_1487c = lshr i32 -2147483648, %v2_1487c
  %v4_1487c = and i32 %v3_1487c, %v0_1487c
  %v6_1487c = shl i32 %v0_1487c, %v1_1487c
  store i32 %v6_1487c, i32* @r5, align 4
  %v2_14880 = icmp eq i32 %v4_1487c, 0
  %v3_14880 = or i1 %v9_14878, %v2_14880
  br i1 %v3_14880, label %dec_label_pc_14898, label %dec_label_pc_14884

dec_label_pc_14884:                               ; preds = %dec_label_pc_14820
  %v2_14888 = add i32 %v0_1485c, %v5_14874
  %v3_14888 = icmp ult i32 %v2_14888, %v5_14874
  %v1_1488c = add i32 %v0_14848, -1
  br i1 %v3_14888, label %dec_label_pc_14898, label %dec_label_pc_1497c

dec_label_pc_14898:                               ; preds = %.thread104, %dec_label_pc_14884, %dec_label_pc_14820
  %v1_14898 = phi i32 [ %v5_14874, %dec_label_pc_14820 ], [ %v2_14888, %dec_label_pc_14884 ], [ %v1_1489841, %.thread104 ]
  %stack_var_-52.0 = phi i32 [ %v0_14848, %dec_label_pc_14820 ], [ %v1_1488c, %dec_label_pc_14884 ], [ %v4_14988.v1_1488c, %.thread104 ]
  %v2_14898 = sub i32 %v1_14898, %v2_14868
  store i32 %v2_14898, i32* @r4, align 4
  %v0_1489c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_1489c, i32* @r1, align 4
  store i32 %v2_14898, i32* @r0, align 4
  %v0_148a4 = call i32 @function_f6f8()
  store i32 %v0_148a4, i32* %r6.global-to-local, align 4
  %v0_148b0 = load i32, i32* @r4, align 4
  %v2_148b4 = call i32 @function_f7f4(i32 %v0_148b0, i32 %v0_1489c)
  %v0_148b8 = load i32, i32* @r7, align 4
  %v2_148b8 = mul i32 %v0_148a4, %v0_148b8
  %v3_148c4 = urem i32 %v8_14834, 65536
  %v4_148c8 = mul i32 %v0_1489c, 65536
  %v5_148c8 = or i32 %v4_148c8, %v3_148c4
  %tmp202 = icmp ugt i32 %v2_148b8, %v5_148c8
  br i1 %tmp202, label %dec_label_pc_148d4, label %dec_label_pc_148e0

dec_label_pc_148d4:                               ; preds = %dec_label_pc_14898
  %v1_148d4 = load i32, i32* %r8.global-to-local, align 4
  %v2_148d4 = add i32 %v1_148d4, %v5_148c8
  %v3_148d4 = icmp ult i32 %v2_148d4, %v5_148c8
  %v1_148d8 = add i32 %v0_148a4, -1
  store i32 %v1_148d8, i32* %r6.global-to-local, align 4
  br i1 %v3_148d4, label %dec_label_pc_148e0, label %dec_label_pc_1496c

dec_label_pc_148e0:                               ; preds = %dec_label_pc_14898, %dec_label_pc_1496c, %bb187, %dec_label_pc_148d4
  %v0_148e8 = phi i32 [ %v5_14974, %bb187 ], [ %v1_148d8, %dec_label_pc_148d4 ], [ %v0_148a4, %dec_label_pc_14898 ], [ %v1_148d8, %dec_label_pc_1496c ]
  %v1_148e4 = phi i32 [ %v6_14970, %bb187 ], [ %v2_148d4, %dec_label_pc_148d4 ], [ %v5_148c8, %dec_label_pc_14898 ], [ %v2_148d4, %dec_label_pc_1496c ]
  %v2_148e4 = sub i32 %v1_148e4, %v2_148b8
  %v4_148e8 = mul i32 %stack_var_-52.0, 65536
  %v5_148e8 = or i32 %v0_148e8, %v4_148e8
  %v3_148ec = udiv i32 %v5_148e8, 65536
  %v0_148f0 = load i32, i32* @r5, align 4
  %v3_148f0 = udiv i32 %v0_148f0, 65536
  %tmp203 = mul i32 %v3_148ec, -65536
  %v5_148f4 = add i32 %tmp203, -1
  %v6_148f4 = and i32 %v5_148e8, %v5_148f4
  %tmp204 = mul i32 %v3_148f0, -65536
  %v5_148f8 = add i32 %tmp204, -1
  %v6_148f8 = and i32 %v0_148f0, %v5_148f8
  %v2_148fc = mul i32 %v6_148f8, %v6_148f4
  %v2_14900 = mul i32 %v6_148f8, %v3_148ec
  %v2_14904 = mul i32 %v3_148f0, %v6_148f4
  %v2_14908 = mul nuw i32 %v3_148f0, %v3_148ec
  %v2_1490c = add i32 %v2_14900, %v2_14904
  %v3_1490c = icmp ult i32 %v2_1490c, %v2_14900
  br i1 %v3_1490c, label %bb171, label %bb172

bb171:                                            ; preds = %dec_label_pc_148e0
  %v2_14910 = add i32 %v2_14908, 65536
  br label %bb172

bb172:                                            ; preds = %dec_label_pc_148e0, %bb171
  %v0_14918 = phi i32 [ %v2_14908, %dec_label_pc_148e0 ], [ %v2_14910, %bb171 ]
  %v4_14914 = mul i32 %v2_1490c, 65536
  %v5_14914 = add i32 %v4_14914, %v2_148fc
  %v2_14918 = and i32 %v2_1490c, 32768
  %v3_14918 = icmp ne i32 %v2_14918, 0
  %v4_14918 = udiv i32 %v2_1490c, 65536
  %v7_14918 = zext i1 %v3_14918 to i32
  %v6_14918 = add nuw nsw i32 %v7_14918, %v4_14918
  %v8_14918 = add i32 %v6_14918, %v0_14918
  %v3_1491c = icmp ult i32 %v2_148e4, %v8_14918
  br i1 %v3_1491c, label %dec_label_pc_14944, label %dec_label_pc_14924

dec_label_pc_14924:                               ; preds = %bb172
  %v9_1491c = icmp eq i32 %v2_148e4, %v8_14918
  %. = zext i1 %v9_1491c to i32
  %v1_1492c = load i32, i32* %sb.global-to-local, align 4
  %v2_1492c = load i32, i32* %fp.global-to-local, align 4
  %v7_1492c = shl i32 %v1_1492c, %v2_1492c
  %v9_1492c = icmp uge i32 %v5_14914, %v7_1492c
  %v15_1492c = icmp eq i32 %v5_14914, %v7_1492c
  %v2_14930 = xor i1 %v9_1492c, true
  %v3_14930 = or i1 %v15_1492c, %v2_14930
  br i1 %v3_14930, label %bb175, label %bb176

bb175:                                            ; preds = %dec_label_pc_14924
  br label %bb176

bb176:                                            ; preds = %dec_label_pc_14924, %bb175
  %v4_14934 = phi i32 [ %., %dec_label_pc_14924 ], [ 0, %bb175 ]
  %v2_14934 = xor i1 %v15_1492c, true
  %v3_14934 = and i1 %v9_1492c, %v2_14934
  br i1 %v3_14934, label %bb177, label %thread-pre-split

bb177:                                            ; preds = %bb176
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb176, %bb177
  %v2_14938 = icmp eq i32 %v4_14934, 0
  br i1 %v2_14938, label %bb178, label %dec_label_pc_14944

bb178:                                            ; preds = %thread-pre-split
  br label %dec_label_pc_14574

dec_label_pc_14944:                               ; preds = %bb172, %thread-pre-split
  %v1_14944 = add i32 %v5_148e8, -1
  br label %dec_label_pc_14574

dec_label_pc_14950:                               ; preds = %dec_label_pc_14470
  %v3_14954 = icmp ugt i32 %v0_145a8, 16777214
  %v9_14954 = icmp eq i32 %v0_145a8, 16777215
  %v2_14958 = xor i1 %v9_14954, true
  %v3_14958 = and i1 %v3_14954, %v2_14958
  br i1 %v3_14958, label %bb180, label %bb181

bb180:                                            ; preds = %dec_label_pc_14950
  br label %bb181

bb181:                                            ; preds = %dec_label_pc_14950, %bb180
  %v1_1448c55 = phi i32 [ 16777215, %dec_label_pc_14950 ], [ 24, %bb180 ]
  %v2_1495c = xor i1 %v3_14954, true
  %v3_1495c = or i1 %v9_14954, %v2_1495c
  br i1 %v3_1495c, label %bb182, label %bb183

bb182:                                            ; preds = %bb181
  br label %bb183

bb183:                                            ; preds = %bb181, %bb182
  %v1_1448c54 = phi i32 [ %v1_1448c55, %bb181 ], [ 16, %bb182 ]
  br i1 %v3_14958, label %bb184, label %bb185

bb184:                                            ; preds = %bb183
  br label %bb185

bb185:                                            ; preds = %bb183, %bb184
  %v0_1449c59 = phi i32 [ %v0_1449c60, %bb183 ], [ 8, %bb184 ]
  br i1 %v3_1495c, label %bb186, label %bb126

bb186:                                            ; preds = %bb185
  br label %bb126

dec_label_pc_1496c:                               ; preds = %dec_label_pc_148d4
  %tmp205 = icmp ugt i32 %v2_148b8, %v2_148d4
  br i1 %tmp205, label %bb187, label %dec_label_pc_148e0

bb187:                                            ; preds = %dec_label_pc_1496c
  %v6_14970 = add i32 %v2_148d4, %v1_148d4
  %v5_14974 = add i32 %v0_148a4, -2
  store i32 %v5_14974, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_148e0

dec_label_pc_1497c:                               ; preds = %dec_label_pc_14884
  %tmp206 = icmp ugt i32 %v2_14868, %v2_14888
  br i1 %tmp206, label %bb188, label %.thread104

bb188:                                            ; preds = %dec_label_pc_1497c
  %v5_14980 = add i32 %v0_14848, -2
  %v6_14984 = add i32 %v2_14888, %v0_1485c
  br label %.thread104

.thread104:                                       ; preds = %dec_label_pc_1497c, %bb188
  %v4_14988102 = phi i32 [ %v5_14980, %bb188 ], [ %v1_1488c, %dec_label_pc_1497c ]
  %v1_1489841 = phi i32 [ %v6_14984, %bb188 ], [ %v2_14888, %dec_label_pc_1497c ]
  %v4_14988.v1_1488c = select i1 %tmp206, i32 %v4_14988102, i32 %v1_1488c
  br label %dec_label_pc_14898

dec_label_pc_14990:                               ; preds = %dec_label_pc_146a4
  %tmp207 = icmp ugt i32 %v2_14688, %v2_146a4
  br i1 %tmp207, label %bb189, label %dec_label_pc_146b0

bb189:                                            ; preds = %dec_label_pc_14990
  %v5_14994 = add i32 %v1_14688, -2
  %v6_14998 = add i32 %v2_146a4, %v1_146a4
  br label %dec_label_pc_146b0

dec_label_pc_149a0:                               ; preds = %dec_label_pc_1465c
  %tmp208 = icmp ugt i32 %v2_14644, %v2_1465c
  br i1 %tmp208, label %bb190, label %dec_label_pc_14668

bb190:                                            ; preds = %dec_label_pc_149a0
  %v5_149a4 = add i32 %v0_14628, -2
  store i32 %v5_149a4, i32* %fp.global-to-local, align 4
  %v6_149a8 = add i32 %v2_1465c, %v0_1463c
  br label %dec_label_pc_14668

; uselistorder directives
  uselistorder i1 %tmp206, { 1, 0 }
  uselistorder i32 %v5_14974, { 1, 0 }
  uselistorder i32 %v1_1448c54, { 1, 0 }
  uselistorder i1 %v9_14954, { 1, 0 }
  uselistorder i1 %v9_1492c, { 1, 0 }
  uselistorder i32 %v7_1492c, { 1, 0 }
  uselistorder i32 %v2_1490c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14900, { 1, 0 }
  uselistorder i32 %v3_148f0, { 2, 1, 0 }
  uselistorder i32 %v0_148f0, { 1, 0 }
  uselistorder i32 %v3_148ec, { 2, 1, 0 }
  uselistorder i32 %v5_148e8, { 3, 1, 0, 2 }
  uselistorder i32 %v2_148d4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_148c8, { 2, 3, 1, 0 }
  uselistorder i32 %v2_148b8, { 0, 2, 1 }
  uselistorder i32 %v0_148a4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1489c, { 1, 0, 2 }
  uselistorder i32 %v1_1488c, { 1, 0, 2 }
  uselistorder i32 %v2_14888, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_1487c, { 1, 0 }
  uselistorder i32 %v0_1487c, { 1, 0 }
  uselistorder i32 %v5_14874, { 1, 2, 0, 3 }
  uselistorder i32 %v3_14864, { 1, 0 }
  uselistorder i32 %v0_1485c, { 1, 2, 0 }
  uselistorder i32 %v0_14848, { 1, 3, 2, 0 }
  uselistorder i32 %v3_14838, { 1, 0, 3, 2 }
  uselistorder i32 %v0_14818, { 1, 0 }
  uselistorder i32 %v6_1480c, { 1, 0 }
  uselistorder i1 %v2_147f8, { 1, 0 }
  uselistorder i1 %v7_147f4, { 1, 2, 0 }
  uselistorder i1 %v7_147dc, { 1, 0 }
  uselistorder i32 %v1_147c4, { 1, 0 }
  uselistorder i32 %v0_1443c86, { 1, 0 }
  uselistorder i32 %v0_1444089, { 1, 0 }
  uselistorder i32 %v6_147b0, { 1, 0 }
  uselistorder i32 %v0_1444085, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1443c84, { 0, 2, 1 }
  uselistorder i1 %v3_14794, { 1, 0 }
  uselistorder i32 %v0_1478c, { 1, 0 }
  uselistorder i32 %v6_14780, { 1, 0 }
  uselistorder i1 %v2_1476c, { 1, 0 }
  uselistorder i1 %v9_14768, { 1, 2, 0 }
  uselistorder i32 %v5_14730, { 2, 1, 0 }
  uselistorder i32 %v1_14724, { 2, 1, 3, 0 }
  uselistorder i32 %v2_146ec, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v5_146e0, { 2, 3, 1, 0 }
  uselistorder i32 %v2_146d8, { 2, 0, 1 }
  uselistorder i32 %v0_146c4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_146a4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_14698, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14688, { 0, 2, 1 }
  uselistorder i32 %v1_14688, { 2, 1, 3, 0 }
  uselistorder i32 %v2_1465c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_14650, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14644, { 0, 2, 1 }
  uselistorder i32 %v3_14640, { 1, 0 }
  uselistorder i32 %v0_1463c, { 1, 2, 0 }
  uselistorder i32 %v0_14628, { 1, 0, 2, 3 }
  uselistorder i32 %v3_14618, { 1, 0 }
  uselistorder i32 %v4_145f8, { 1, 0 }
  uselistorder i32 %v2_145f0, { 1, 0, 2 }
  uselistorder i32 %v6_145e4, { 1, 0 }
  uselistorder i1 %v9_145c4, { 1, 0 }
  uselistorder i32 %v0_14608, { 9, 8, 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v5_14534, { 2, 1, 0 }
  uselistorder i32 %v1_14528, { 2, 1, 3, 0 }
  uselistorder i32 %v0_1450c, { 1, 0, 2 }
  uselistorder i32 %v2_144f0, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v5_144e4, { 2, 3, 1, 0 }
  uselistorder i32 %v2_144dc, { 2, 0, 1 }
  uselistorder i32 %v3_144d8, { 1, 0 }
  uselistorder i32 %v0_144d4, { 1, 2, 0 }
  uselistorder i32 %v0_144c0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_144b0, { 1, 0 }
  uselistorder i32 %v3_144b024, { 1, 0 }
  uselistorder i32 %v6_14498, { 1, 0 }
  uselistorder i32 %v0_1449c, { 1, 0 }
  uselistorder i1 %v7_14478, { 1, 0 }
  uselistorder i32 %v0_14460, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v1_144a0, { 6, 7, 5, 1, 2, 3, 4, 0, 8 }
  uselistorder i32 %v0_145a8, { 5, 6, 12, 11, 2, 9, 3, 1, 4, 7, 8, 10, 0, 13 }
  uselistorder i32 %v0_1449c60, { 1, 0 }
  uselistorder i32 %v1_14794, { 5, 6, 2, 12, 11, 4, 7, 3, 8, 9, 10, 0, 1, 13 }
  uselistorder i32 %v0_1444090, { 1, 0 }
  uselistorder i32 %v0_14440, { 2, 1, 0, 3 }
  uselistorder i32 %v0_1443c, { 1, 0, 2 }
  uselistorder i32 %v0_14424, { 1, 2, 0, 3 }
  uselistorder i32* %sl.global-to-local, { 0, 1, 4, 2, 3, 5, 6, 7, 10, 8, 9, 11 }
  uselistorder i32* %sb.global-to-local, { 2, 3, 4, 0, 5, 6, 7, 8, 1, 9 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 8, 5, 6, 3, 4, 7, 10, 13, 14, 9, 15, 11, 12 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 8, 9, 10, 3, 4, 5, 6, 11, 12, 7, 13 }
  uselistorder i32* %fp.global-to-local, { 0, 2, 3, 1, 4, 5, 7, 6, 8, 9 }
  uselistorder i32 65535, { 93, 94, 95, 96, 0, 1, 13, 12, 4, 5, 39, 40, 23, 41, 22, 42, 15, 14, 6, 24, 43, 25, 44, 46, 16, 45, 7, 47, 48, 27, 49, 26, 50, 51, 52, 53, 28, 54, 56, 17, 55, 8, 57, 58, 59, 60, 30, 61, 29, 62, 64, 18, 63, 9, 65, 66, 67, 68, 69, 70, 31, 71, 32, 72, 73, 19, 10, 74, 11, 33, 75, 34, 76, 79, 80, 20, 77, 78, 2, 81, 82, 35, 83, 36, 84, 87, 88, 21, 85, 86, 3, 89, 90, 37, 91, 38, 92 }
  uselistorder label %.thread104, { 1, 0 }
  uselistorder label %bb185, { 1, 0 }
  uselistorder label %bb183, { 1, 0 }
  uselistorder label %bb181, { 1, 0 }
  uselistorder label %dec_label_pc_14944, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb176, { 1, 0 }
  uselistorder label %bb172, { 1, 0 }
  uselistorder label %dec_label_pc_148e0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_14820, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %bb165, { 1, 0 }
  uselistorder label %bb163, { 1, 0 }
  uselistorder label %.thread98, { 1, 0 }
  uselistorder label %bb159, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_14794, { 1, 0 }
  uselistorder label %bb154, { 1, 0 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 3, 2, 1, 0 }
  uselistorder label %.thread96, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_146bc, { 1, 0 }
  uselistorder label %dec_label_pc_146b0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_14668, { 2, 1, 3, 0 }
  uselistorder label %bb141, { 1, 0, 3, 2 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %bb135, { 1, 0 }
  uselistorder label %dec_label_pc_145b8, { 1, 0 }
  uselistorder label %dec_label_pc_14594, { 1, 0 }
  uselistorder label %dec_label_pc_14574, { 2, 1, 0, 3, 5, 4 }
  uselistorder label %dec_label_pc_1456c, { 2, 0, 1 }
  uselistorder label %bb132, { 3, 2, 1, 0 }
  uselistorder label %.thread95, { 3, 1, 2, 0 }
  uselistorder label %bb129, { 1, 0 }
  uselistorder label %bb126, { 0, 1, 3, 2 }
  uselistorder label %.thread94, { 1, 0 }
  uselistorder label %bb123, { 1, 0 }
  uselistorder label %dec_label_pc_14454, { 2, 0, 1 }
}

define i32 @function_149b8() local_unnamed_addr {
dec_label_pc_149b8:
  %fp.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v12_149b8 = load i32, i32* @r7, align 4
  %v27_149b8 = load i32, i32* @lr, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  %v0_149cc = load i32, i32* @r3, align 4
  %v2_149cc = icmp eq i32 %v0_149cc, 0
  store i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32* @r4, align 4
  %v0_149d4 = load i32, i32* @r1, align 4
  store i32 %v0_149d4, i32* %r6.global-to-local, align 4
  %v0_149dc = load i32, i32* @r2, align 4
  store i32 %v0_149dc, i32* @r5, align 4
  %v0_149e0 = load i32, i32* @r0, align 4
  store i32 %v0_149e0, i32* %sb.global-to-local, align 4
  br i1 %v2_149cc, label %dec_label_pc_149e8, label %dec_label_pc_14ae4

dec_label_pc_149e8:                               ; preds = %dec_label_pc_149b8
  %tmp = icmp ugt i32 %v0_149dc, %v0_149d4
  br i1 %tmp, label %dec_label_pc_149f0, label %dec_label_pc_14b58

dec_label_pc_149f0:                               ; preds = %dec_label_pc_149e8
  %v3_149f4 = icmp ult i32 %v0_149dc, 65534
  br i1 %v3_149f4, label %dec_label_pc_14e88, label %dec_label_pc_149f8

dec_label_pc_149f8:                               ; preds = %dec_label_pc_149f0
  %v3_149fc = icmp ugt i32 %v0_149dc, 16777214
  %v9_149fc = icmp eq i32 %v0_149dc, 16777215
  %v2_14a00 = xor i1 %v9_149fc, true
  %v3_14a00 = and i1 %v3_149fc, %v2_14a00
  br i1 %v3_14a00, label %bb, label %bb86

bb:                                               ; preds = %dec_label_pc_149f8
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_149f8, %bb
  %v1_14a1035 = phi i32 [ 16777215, %dec_label_pc_149f8 ], [ 24, %bb ]
  %v2_14a04 = xor i1 %v3_149fc, true
  %v3_14a04 = or i1 %v9_149fc, %v2_14a04
  br i1 %v3_14a04, label %bb87, label %bb88

bb87:                                             ; preds = %bb86
  br label %bb88

bb88:                                             ; preds = %bb86, %bb87
  %v1_14a1034 = phi i32 [ %v1_14a1035, %bb86 ], [ 16, %bb87 ]
  br i1 %v3_14a00, label %bb89, label %bb90

bb89:                                             ; preds = %bb88
  store i32 8, i32* @ip, align 4
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  br i1 %v3_14a04, label %bb91, label %bb92

bb91:                                             ; preds = %bb90
  store i32 16, i32* @ip, align 4
  br label %bb92

bb92:                                             ; preds = %bb147, %.thread62, %bb90, %bb91
  %v1_14a10 = phi i32 [ 8, %bb147 ], [ 0, %.thread62 ], [ %v1_14a1034, %bb90 ], [ %v1_14a1034, %bb91 ]
  %v6_14a10 = lshr i32 %v0_149dc, %v1_14a10
  %v4_14a18 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32 36) to i32*), align 4
  %v2_14a1c = add i32 %v4_14a18, %v6_14a10
  %v3_14a1c = inttoptr i32 %v2_14a1c to i8*
  %v4_14a1c = load i8, i8* %v3_14a1c, align 1
  %v6_14a1c = zext i8 %v4_14a1c to i32
  %v0_14a20 = load i32, i32* @ip, align 4
  %v2_14a20 = sub i32 %v0_14a20, %v6_14a1c
  %v9_14a20 = icmp eq i32 %v0_14a20, %v6_14a1c
  br i1 %v9_14a20, label %.critedge, label %.thread2

.thread2:                                         ; preds = %bb92
  %v7_14a24 = shl i32 %v0_149d4, %v2_14a20
  %v2_14a28 = sub i32 32, %v2_14a20
  %v7_14a2c = shl i32 %v0_149dc, %v2_14a20
  store i32 %v7_14a2c, i32* @r5, align 4
  %v8_14a30 = lshr i32 %v0_149e0, %v2_14a28
  %v9_14a30 = or i32 %v8_14a30, %v7_14a24
  store i32 %v9_14a30, i32* %r6.global-to-local, align 4
  %v3_14a34 = udiv i32 %v7_14a2c, 65536
  store i32 %v3_14a34, i32* %r8.global-to-local, align 4
  store i32 %v3_14a34, i32* @r1, align 4
  store i32 %v9_14a30, i32* @r0, align 4
  %v7_14a40 = shl i32 %v0_149e0, %v2_14a20
  store i32 %v7_14a40, i32* %sb.global-to-local, align 4
  br label %bb94

.critedge:                                        ; preds = %bb92
  %v3_14a34.c = udiv i32 %v0_149dc, 65536
  store i32 %v3_14a34.c, i32* %r8.global-to-local, align 4
  store i32 %v3_14a34.c, i32* @r1, align 4
  store i32 %v0_149d4, i32* @r0, align 4
  br label %bb94

bb94:                                             ; preds = %.critedge, %.thread2
  %v0_14a44 = call i32 @function_f6f8()
  %v0_14a48 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14a44, i32* %sl.global-to-local, align 4
  %v0_14a50 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a54 = call i32 @function_f7f4(i32 %v0_14a50, i32 %v0_14a48)
  %v0_14a58 = load i32, i32* @r5, align 4
  %v3_14a5c = urem i32 %v0_14a58, 65536
  store i32 %v3_14a5c, i32* @r7, align 4
  %v2_14a60 = mul i32 %v0_14a44, %v3_14a5c
  %v0_14a64 = load i32, i32* %sb.global-to-local, align 4
  %v3_14a64 = udiv i32 %v0_14a64, 65536
  %v4_14a68 = mul i32 %v0_14a48, 65536
  %v5_14a68 = or i32 %v3_14a64, %v4_14a68
  %tmp152 = icmp ugt i32 %v2_14a60, %v5_14a68
  br i1 %tmp152, label %dec_label_pc_14a74, label %.thread57

dec_label_pc_14a74:                               ; preds = %bb94
  %v2_14a74 = add i32 %v5_14a68, %v0_14a58
  %v3_14a74 = icmp ult i32 %v2_14a74, %v5_14a68
  %v1_14a78 = add i32 %v0_14a44, -1
  store i32 %v1_14a78, i32* %sl.global-to-local, align 4
  br i1 %v3_14a74, label %.thread57, label %dec_label_pc_14a80

dec_label_pc_14a80:                               ; preds = %dec_label_pc_14a74
  %tmp153 = icmp ugt i32 %v2_14a60, %v2_14a74
  br i1 %tmp153, label %bb95, label %.thread57

bb95:                                             ; preds = %dec_label_pc_14a80
  %v5_14a84 = add i32 %v0_14a44, -2
  store i32 %v5_14a84, i32* %sl.global-to-local, align 4
  %v6_14a88 = add i32 %v2_14a74, %v0_14a58
  br label %.thread57

.thread57:                                        ; preds = %bb94, %dec_label_pc_14a80, %dec_label_pc_14a74, %bb95
  %v1_14a8c = phi i32 [ %v2_14a74, %dec_label_pc_14a74 ], [ %v5_14a68, %bb94 ], [ %v6_14a88, %bb95 ], [ %v2_14a74, %dec_label_pc_14a80 ]
  %v2_14a8c = sub i32 %v1_14a8c, %v2_14a60
  store i32 %v2_14a8c, i32* @r4, align 4
  %v0_14a90 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14a90, i32* @r1, align 4
  store i32 %v2_14a8c, i32* @r0, align 4
  %v0_14a98 = call i32 @function_f6f8()
  store i32 %v0_14a98, i32* %r6.global-to-local, align 4
  %v0_14aa4 = load i32, i32* @r4, align 4
  %v2_14aa8 = call i32 @function_f7f4(i32 %v0_14aa4, i32 %v0_14a90)
  %v0_14aac = load i32, i32* @r7, align 4
  %v2_14aac = mul i32 %v0_14a98, %v0_14aac
  %v0_14ab0 = load i32, i32* %sb.global-to-local, align 4
  %v3_14ab4 = urem i32 %v0_14ab0, 65536
  %v4_14ab8 = mul i32 %v0_14a90, 65536
  %v5_14ab8 = or i32 %v3_14ab4, %v4_14ab8
  %tmp154 = icmp ugt i32 %v2_14aac, %v5_14ab8
  br i1 %tmp154, label %dec_label_pc_14ac4, label %bb97

dec_label_pc_14ac4:                               ; preds = %.thread57
  %v1_14ac4 = load i32, i32* @r5, align 4
  %v2_14ac4 = add i32 %v1_14ac4, %v5_14ab8
  %v3_14ac4 = icmp ult i32 %v2_14ac4, %v5_14ab8
  %v1_14ac8 = add i32 %v0_14a98, -1
  store i32 %v1_14ac8, i32* %r6.global-to-local, align 4
  br i1 %v3_14ac4, label %bb97, label %dec_label_pc_14ad0

dec_label_pc_14ad0:                               ; preds = %dec_label_pc_14ac4
  %tmp155 = icmp ugt i32 %v2_14aac, %v2_14ac4
  br i1 %tmp155, label %bb96, label %bb97

bb96:                                             ; preds = %dec_label_pc_14ad0
  %v5_14ad4 = add i32 %v0_14a98, -2
  store i32 %v5_14ad4, i32* %r6.global-to-local, align 4
  br label %bb97

bb97:                                             ; preds = %.thread57, %dec_label_pc_14ac4, %dec_label_pc_14ad0, %bb96
  %v0_14ad8 = phi i32 [ %v1_14ac8, %dec_label_pc_14ac4 ], [ %v0_14a98, %.thread57 ], [ %v1_14ac8, %dec_label_pc_14ad0 ], [ %v5_14ad4, %bb96 ]
  %v1_14ad8 = load i32, i32* %sl.global-to-local, align 4
  %v4_14ad8 = mul i32 %v1_14ad8, 65536
  %v5_14ad8 = or i32 %v4_14ad8, %v0_14ad8
  br label %dec_label_pc_14b44

dec_label_pc_14ae4:                               ; preds = %dec_label_pc_149b8
  %v3_14ae4 = icmp uge i32 %v0_149cc, %v0_149d4
  %v9_14ae4 = icmp eq i32 %v0_149d4, %v0_149cc
  %v2_14aec = xor i1 %v9_14ae4, true
  %v3_14aec = and i1 %v3_14ae4, %v2_14aec
  br i1 %v3_14aec, label %dec_label_pc_14b3c, label %dec_label_pc_14af0

dec_label_pc_14af0:                               ; preds = %dec_label_pc_14ae4
  %v3_14af4 = icmp ult i32 %v0_149cc, 65534
  br i1 %v3_14af4, label %dec_label_pc_14d14, label %dec_label_pc_14af8

dec_label_pc_14af8:                               ; preds = %dec_label_pc_14af0
  %v3_14afc = icmp ugt i32 %v0_149cc, 16777214
  %v9_14afc = icmp eq i32 %v0_149cc, 16777215
  %v2_14b00 = xor i1 %v9_14afc, true
  %v3_14b00 = and i1 %v3_14afc, %v2_14b00
  br i1 %v3_14b00, label %bb99, label %bb100

bb99:                                             ; preds = %dec_label_pc_14af8
  br label %bb100

bb100:                                            ; preds = %dec_label_pc_14af8, %bb99
  %v1_14b0812 = phi i32 [ 16777215, %dec_label_pc_14af8 ], [ 24, %bb99 ]
  %v2_14b04 = xor i1 %v3_14afc, true
  %v3_14b04 = or i1 %v9_14afc, %v2_14b04
  br i1 %v3_14b04, label %bb101, label %bb102

bb101:                                            ; preds = %bb100
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  %v1_14b08 = phi i32 [ %v1_14b0812, %bb100 ], [ 16, %bb101 ]
  %v2_14b08 = add nsw i32 %v1_14b08, -1
  %v3_14b08 = shl i32 1, %v2_14b08
  %v4_14b08 = and i32 %v3_14b08, %v0_149cc
  %v5_14b08 = icmp ne i32 %v4_14b08, 0
  %v6_14b08 = lshr i32 %v0_149cc, %v1_14b08
  %v4_14b10 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32 36) to i32*), align 4
  %v2_14b14 = add i32 %v4_14b10, %v6_14b08
  %v3_14b14 = inttoptr i32 %v2_14b14 to i8*
  %v4_14b14 = load i8, i8* %v3_14b14, align 1
  %v6_14b14 = zext i8 %v4_14b14 to i32
  %v3_14b18 = and i1 %v5_14b08, %v2_14b00
  br i1 %v3_14b18, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  store i32 8, i32* @lr, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_14b2014 = phi i32 [ %v27_149b8, %bb102 ], [ 8, %bb103 ]
  %v2_14b1c = xor i1 %v5_14b08, true
  %v3_14b1c = or i1 %v9_14afc, %v2_14b1c
  br i1 %v3_14b1c, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  store i32 16, i32* @lr, align 4
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v0_14b20 = phi i32 [ %v0_14b2014, %bb104 ], [ 16, %bb105 ]
  %v2_14b20 = sub i32 %v0_14b20, %v6_14b14
  store i32 %v2_14b20, i32* %fp.global-to-local, align 4
  %v9_14b20 = icmp eq i32 %v0_14b20, %v6_14b14
  br i1 %v9_14b20, label %dec_label_pc_14b28, label %dec_label_pc_14d40

dec_label_pc_14b28:                               ; preds = %bb106, %bb130
  %v1_14b30 = phi i32 [ %v2_14b20, %bb106 ], [ %v2_14d38, %bb130 ]
  %v3_14b28 = icmp uge i32 %v0_149d4, %v0_149cc
  %v2_14b2c = xor i1 %v3_14b28, true
  %v3_14b2c = or i1 %v9_14ae4, %v2_14b2c
  br i1 %v3_14b2c, label %bb108, label %bb109

bb108:                                            ; preds = %dec_label_pc_14b28
  %v7_14b2c = icmp ult i32 %v0_149e0, %v0_149dc
  br i1 %v7_14b2c, label %dec_label_pc_14b3c, label %.thread3

bb109:                                            ; preds = %dec_label_pc_14b28
  br i1 %v3_14b28, label %.thread3, label %dec_label_pc_14b3c

.thread3:                                         ; preds = %bb108, %bb109
  br label %dec_label_pc_14b44

dec_label_pc_14b3c:                               ; preds = %bb108, %bb109, %dec_label_pc_14ae4
  br label %dec_label_pc_14b44

dec_label_pc_14b44:                               ; preds = %.thread3, %bb139, %dec_label_pc_14e64, %bb97, %bb122, %dec_label_pc_14b3c
  %v5_14b44 = phi i32 [ 0, %bb139 ], [ %v1_14b30, %.thread3 ], [ 0, %dec_label_pc_14e64 ], [ 0, %bb97 ], [ %v0_14d0c, %bb122 ], [ 0, %dec_label_pc_14b3c ]
  %v2_14b44 = phi i32 [ %v5_14e08, %bb139 ], [ 1, %.thread3 ], [ %v1_14e64, %dec_label_pc_14e64 ], [ %v5_14ad8, %bb97 ], [ %v5_14d08, %bb122 ], [ 0, %dec_label_pc_14b3c ]
  store i32 %v5_14b44, i32* @r1, align 4
  store i32 %v12_149b8, i32* @r7, align 4
  ret i32 %v2_14b44

dec_label_pc_14b58:                               ; preds = %dec_label_pc_149e8
  %v2_14b58 = icmp eq i32 %v0_149dc, 0
  br i1 %v2_14b58, label %dec_label_pc_14b60, label %dec_label_pc_14b70

dec_label_pc_14b60:                               ; preds = %dec_label_pc_14b58
  store i32 0, i32* @r1, align 4
  store i32 1, i32* @r0, align 4
  %v0_14b68 = call i32 @function_f6f8()
  store i32 %v0_14b68, i32* @r5, align 4
  br label %dec_label_pc_14b70

dec_label_pc_14b70:                               ; preds = %dec_label_pc_14b58, %dec_label_pc_14b60
  %v0_14bc0 = phi i32 [ %v0_149dc, %dec_label_pc_14b58 ], [ %v0_14b68, %dec_label_pc_14b60 ]
  %v3_14b74 = icmp ult i32 %v0_14bc0, 65534
  br i1 %v3_14b74, label %dec_label_pc_14e70, label %dec_label_pc_14b78

dec_label_pc_14b78:                               ; preds = %dec_label_pc_14b70
  %v3_14b7c = icmp ugt i32 %v0_14bc0, 16777214
  %v9_14b7c = icmp eq i32 %v0_14bc0, 16777215
  %v2_14b80 = xor i1 %v9_14b7c, true
  %v3_14b80 = and i1 %v3_14b7c, %v2_14b80
  br i1 %v3_14b80, label %bb111, label %bb112

bb111:                                            ; preds = %dec_label_pc_14b78
  br label %bb112

bb112:                                            ; preds = %dec_label_pc_14b78, %bb111
  %v1_14b9044 = phi i32 [ 16777215, %dec_label_pc_14b78 ], [ 24, %bb111 ]
  %v2_14b84 = xor i1 %v3_14b7c, true
  %v3_14b84 = or i1 %v9_14b7c, %v2_14b84
  br i1 %v3_14b84, label %bb113, label %bb114

bb113:                                            ; preds = %bb112
  br label %bb114

bb114:                                            ; preds = %bb112, %bb113
  %v1_14b9043 = phi i32 [ %v1_14b9044, %bb112 ], [ 16, %bb113 ]
  br i1 %v3_14b80, label %bb115, label %bb116

bb115:                                            ; preds = %bb114
  store i32 8, i32* @ip, align 4
  br label %bb116

bb116:                                            ; preds = %bb114, %bb115
  br i1 %v3_14b84, label %bb117, label %bb118

bb117:                                            ; preds = %bb116
  store i32 16, i32* @ip, align 4
  br label %bb118

bb118:                                            ; preds = %._crit_edge, %bb143, %bb116, %bb117
  %v1_14b90 = phi i32 [ %v1_14b90.pre, %._crit_edge ], [ 8, %bb143 ], [ %v1_14b9043, %bb116 ], [ %v1_14b9043, %bb117 ]
  %v6_14b90 = lshr i32 %v0_14bc0, %v1_14b90
  %v0_14b98 = load i32, i32* @r4, align 4
  %v2_14b98 = add i32 %v0_14b98, 36
  %v3_14b98 = inttoptr i32 %v2_14b98 to i32*
  %v4_14b98 = load i32, i32* %v3_14b98, align 4
  %v2_14b9c = add i32 %v4_14b98, %v6_14b90
  %v3_14b9c = inttoptr i32 %v2_14b9c to i8*
  %v4_14b9c = load i8, i8* %v3_14b9c, align 1
  %v6_14b9c = zext i8 %v4_14b9c to i32
  %v0_14ba0 = load i32, i32* @ip, align 4
  %v2_14ba0 = sub i32 %v0_14ba0, %v6_14b9c
  store i32 %v2_14ba0, i32* %sl.global-to-local, align 4
  %v9_14ba0 = icmp eq i32 %v0_14ba0, %v6_14b9c
  %v2_14ba8 = load i32, i32* %r6.global-to-local, align 4
  br i1 %v9_14ba0, label %.thread8, label %dec_label_pc_14bbc

.thread8:                                         ; preds = %bb118
  %v3_14ba8 = sub i32 %v2_14ba8, %v0_14bc0
  store i32 %v3_14ba8, i32* @r4, align 4
  %v4_14bac = urem i32 %v0_14bc0, 65536
  store i32 %v4_14bac, i32* %r8.global-to-local, align 4
  %v4_14bb0 = udiv i32 %v0_14bc0, 65536
  store i32 %v4_14bb0, i32* @r7, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_14c74

dec_label_pc_14bbc:                               ; preds = %bb118
  %v6_14bbc = shl i32 %v2_14ba8, %v2_14ba0
  %v6_14bc0 = shl i32 %v0_14bc0, %v2_14ba0
  store i32 %v6_14bc0, i32* @r5, align 4
  %v1_14bc4 = sub i32 32, %v2_14ba0
  %v6_14bc8 = lshr i32 %v2_14ba8, %v1_14bc4
  store i32 %v6_14bc8, i32* @r4, align 4
  %v1_14bcc = load i32, i32* %sb.global-to-local, align 4
  %v7_14bcc = lshr i32 %v1_14bcc, %v1_14bc4
  %v8_14bcc = or i32 %v7_14bcc, %v6_14bbc
  %v3_14bd0 = udiv i32 %v6_14bc0, 65536
  store i32 %v3_14bd0, i32* @r7, align 4
  store i32 %v3_14bd0, i32* @r1, align 4
  store i32 %v6_14bc8, i32* @r0, align 4
  %v0_14be0 = call i32 @function_f6f8()
  %v0_14be4 = load i32, i32* @r7, align 4
  store i32 %v0_14be0, i32* %fp.global-to-local, align 4
  %v0_14bec = load i32, i32* @r4, align 4
  %v2_14bf0 = call i32 @function_f7f4(i32 %v0_14bec, i32 %v0_14be4)
  %v0_14bf4 = load i32, i32* @r5, align 4
  %v3_14bf8 = urem i32 %v0_14bf4, 65536
  store i32 %v3_14bf8, i32* %r8.global-to-local, align 4
  %v2_14bfc = mul i32 %v0_14be0, %v3_14bf8
  %v3_14c04 = udiv i32 %v8_14bcc, 65536
  %v4_14c08 = mul i32 %v0_14be4, 65536
  %v5_14c08 = or i32 %v4_14c08, %v3_14c04
  %tmp156 = icmp ugt i32 %v2_14bfc, %v5_14c08
  br i1 %tmp156, label %dec_label_pc_14c14, label %dec_label_pc_14c20

dec_label_pc_14c14:                               ; preds = %dec_label_pc_14bbc
  %v2_14c14 = add i32 %v0_14bf4, %v5_14c08
  %v3_14c14 = icmp ult i32 %v2_14c14, %v5_14c08
  %v1_14c18 = add i32 %v0_14be0, -1
  store i32 %v1_14c18, i32* %fp.global-to-local, align 4
  br i1 %v3_14c14, label %dec_label_pc_14c20, label %dec_label_pc_14ed4

dec_label_pc_14c20:                               ; preds = %dec_label_pc_14bbc, %dec_label_pc_14ed4, %bb151, %dec_label_pc_14c14
  %v1_14c20 = phi i32 [ %v6_14edc, %bb151 ], [ %v2_14c14, %dec_label_pc_14c14 ], [ %v5_14c08, %dec_label_pc_14bbc ], [ %v2_14c14, %dec_label_pc_14ed4 ]
  %v2_14c20 = sub i32 %v1_14c20, %v2_14bfc
  store i32 %v2_14c20, i32* @r4, align 4
  %v0_14c24 = load i32, i32* @r7, align 4
  store i32 %v0_14c24, i32* @r1, align 4
  store i32 %v2_14c20, i32* @r0, align 4
  %v0_14c2c = call i32 @function_f6f8()
  %v0_14c30 = load i32, i32* @r7, align 4
  store i32 %v0_14c2c, i32* %r6.global-to-local, align 4
  %v0_14c38 = load i32, i32* @r4, align 4
  %v2_14c3c = call i32 @function_f7f4(i32 %v0_14c38, i32 %v0_14c30)
  %v0_14c40 = load i32, i32* %r8.global-to-local, align 4
  %v2_14c40 = mul i32 %v0_14c2c, %v0_14c40
  %v3_14c4c = urem i32 %v8_14bcc, 65536
  %v4_14c50 = mul i32 %v0_14c30, 65536
  %v5_14c50 = or i32 %v4_14c50, %v3_14c4c
  %tmp157 = icmp ugt i32 %v2_14c40, %v5_14c50
  br i1 %tmp157, label %dec_label_pc_14c5c, label %dec_label_pc_14c68

dec_label_pc_14c5c:                               ; preds = %dec_label_pc_14c20
  %v1_14c5c = load i32, i32* @r5, align 4
  %v2_14c5c = add i32 %v1_14c5c, %v5_14c50
  %v3_14c5c = icmp ult i32 %v2_14c5c, %v5_14c50
  %v1_14c60 = add i32 %v0_14c2c, -1
  store i32 %v1_14c60, i32* %r6.global-to-local, align 4
  br i1 %v3_14c5c, label %dec_label_pc_14c68, label %dec_label_pc_14ec4

dec_label_pc_14c68:                               ; preds = %dec_label_pc_14c20, %dec_label_pc_14ec4, %bb150, %dec_label_pc_14c5c
  %v0_14c70 = phi i32 [ %v5_14ec8, %bb150 ], [ %v1_14c60, %dec_label_pc_14c5c ], [ %v0_14c2c, %dec_label_pc_14c20 ], [ %v1_14c60, %dec_label_pc_14ec4 ]
  %v1_14c6c = phi i32 [ %v6_14ecc, %bb150 ], [ %v2_14c5c, %dec_label_pc_14c5c ], [ %v5_14c50, %dec_label_pc_14c20 ], [ %v2_14c5c, %dec_label_pc_14ec4 ]
  %v0_14c68 = load i32, i32* %sb.global-to-local, align 4
  %v1_14c68 = load i32, i32* %sl.global-to-local, align 4
  %v6_14c68 = shl i32 %v0_14c68, %v1_14c68
  store i32 %v6_14c68, i32* %sb.global-to-local, align 4
  %v2_14c6c = sub i32 %v1_14c6c, %v2_14c40
  store i32 %v2_14c6c, i32* @r4, align 4
  %v1_14c70 = load i32, i32* %fp.global-to-local, align 4
  %v4_14c70 = mul i32 %v1_14c70, 65536
  %v5_14c70 = or i32 %v4_14c70, %v0_14c70
  store i32 %v5_14c70, i32* %fp.global-to-local, align 4
  %v0_14c74.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14c74

dec_label_pc_14c74:                               ; preds = %.thread8, %dec_label_pc_14c68
  %v0_14c78 = phi i32 [ %v3_14ba8, %.thread8 ], [ %v2_14c6c, %dec_label_pc_14c68 ]
  %v0_14c74 = phi i32 [ %v4_14bb0, %.thread8 ], [ %v0_14c74.pre, %dec_label_pc_14c68 ]
  store i32 %v0_14c74, i32* @r1, align 4
  store i32 %v0_14c78, i32* @r0, align 4
  %v0_14c7c = call i32 @function_f6f8()
  %v0_14c80 = load i32, i32* @r7, align 4
  store i32 %v0_14c7c, i32* %sl.global-to-local, align 4
  %v0_14c88 = load i32, i32* @r4, align 4
  %v2_14c8c = call i32 @function_f7f4(i32 %v0_14c88, i32 %v0_14c80)
  %v0_14c90 = load i32, i32* %r8.global-to-local, align 4
  %v2_14c90 = mul i32 %v0_14c7c, %v0_14c90
  %v0_14c94 = load i32, i32* %sb.global-to-local, align 4
  %v3_14c94 = udiv i32 %v0_14c94, 65536
  %v4_14c98 = mul i32 %v0_14c80, 65536
  %v5_14c98 = or i32 %v3_14c94, %v4_14c98
  %tmp158 = icmp ugt i32 %v2_14c90, %v5_14c98
  br i1 %tmp158, label %dec_label_pc_14ca4, label %.thread59

dec_label_pc_14ca4:                               ; preds = %dec_label_pc_14c74
  %v1_14ca4 = load i32, i32* @r5, align 4
  %v2_14ca4 = add i32 %v1_14ca4, %v5_14c98
  %v3_14ca4 = icmp ult i32 %v2_14ca4, %v5_14c98
  %v1_14ca8 = add i32 %v0_14c7c, -1
  store i32 %v1_14ca8, i32* %sl.global-to-local, align 4
  br i1 %v3_14ca4, label %.thread59, label %dec_label_pc_14cb0

dec_label_pc_14cb0:                               ; preds = %dec_label_pc_14ca4
  %tmp159 = icmp ugt i32 %v2_14c90, %v2_14ca4
  br i1 %tmp159, label %bb120, label %.thread59

bb120:                                            ; preds = %dec_label_pc_14cb0
  %v5_14cb4 = add i32 %v0_14c7c, -2
  store i32 %v5_14cb4, i32* %sl.global-to-local, align 4
  %v6_14cb8 = add i32 %v2_14ca4, %v1_14ca4
  br label %.thread59

.thread59:                                        ; preds = %dec_label_pc_14c74, %dec_label_pc_14cb0, %dec_label_pc_14ca4, %bb120
  %v1_14cbc = phi i32 [ %v2_14ca4, %dec_label_pc_14ca4 ], [ %v5_14c98, %dec_label_pc_14c74 ], [ %v6_14cb8, %bb120 ], [ %v2_14ca4, %dec_label_pc_14cb0 ]
  %v2_14cbc = sub i32 %v1_14cbc, %v2_14c90
  store i32 %v2_14cbc, i32* @r4, align 4
  %v0_14cc0 = load i32, i32* @r7, align 4
  store i32 %v0_14cc0, i32* @r1, align 4
  store i32 %v2_14cbc, i32* @r0, align 4
  %v0_14cc8 = call i32 @function_f6f8()
  %v0_14ccc = load i32, i32* @r7, align 4
  store i32 %v0_14cc8, i32* %r6.global-to-local, align 4
  %v0_14cd4 = load i32, i32* @r4, align 4
  %v2_14cd8 = call i32 @function_f7f4(i32 %v0_14cd4, i32 %v0_14ccc)
  %v0_14cdc = load i32, i32* %r8.global-to-local, align 4
  %v2_14cdc = mul i32 %v0_14cc8, %v0_14cdc
  %v0_14ce0 = load i32, i32* %sb.global-to-local, align 4
  %v3_14ce4 = urem i32 %v0_14ce0, 65536
  %v4_14ce8 = mul i32 %v0_14ccc, 65536
  %v5_14ce8 = or i32 %v3_14ce4, %v4_14ce8
  %tmp160 = icmp ugt i32 %v2_14cdc, %v5_14ce8
  br i1 %tmp160, label %dec_label_pc_14cf4, label %bb122

dec_label_pc_14cf4:                               ; preds = %.thread59
  %v1_14cf4 = load i32, i32* @r5, align 4
  %v2_14cf4 = add i32 %v1_14cf4, %v5_14ce8
  %v3_14cf4 = icmp ult i32 %v2_14cf4, %v5_14ce8
  %v1_14cf8 = add i32 %v0_14cc8, -1
  store i32 %v1_14cf8, i32* %r6.global-to-local, align 4
  br i1 %v3_14cf4, label %bb122, label %dec_label_pc_14d00

dec_label_pc_14d00:                               ; preds = %dec_label_pc_14cf4
  %tmp161 = icmp ugt i32 %v2_14cdc, %v2_14cf4
  br i1 %tmp161, label %bb121, label %bb122

bb121:                                            ; preds = %dec_label_pc_14d00
  %v5_14d04 = add i32 %v0_14cc8, -2
  store i32 %v5_14d04, i32* %r6.global-to-local, align 4
  br label %bb122

bb122:                                            ; preds = %.thread59, %dec_label_pc_14cf4, %dec_label_pc_14d00, %bb121
  %v0_14d08 = phi i32 [ %v1_14cf8, %dec_label_pc_14cf4 ], [ %v0_14cc8, %.thread59 ], [ %v1_14cf8, %dec_label_pc_14d00 ], [ %v5_14d04, %bb121 ]
  %v1_14d08 = load i32, i32* %sl.global-to-local, align 4
  %v4_14d08 = mul i32 %v1_14d08, 65536
  %v5_14d08 = or i32 %v4_14d08, %v0_14d08
  %v0_14d0c = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_14b44

dec_label_pc_14d14:                               ; preds = %dec_label_pc_14af0
  %v2_14d14 = icmp ugt i32 %v0_149cc, 254
  %v7_14d14 = icmp eq i32 %v0_149cc, 255
  %v2_14d18 = xor i1 %v7_14d14, true
  %v3_14d18 = and i1 %v2_14d14, %v2_14d18
  br i1 %v3_14d18, label %bb123, label %bb124

bb123:                                            ; preds = %dec_label_pc_14d14
  br label %bb124

bb124:                                            ; preds = %dec_label_pc_14d14, %bb123
  %v1_14d2016 = phi i32 [ %v0_149cc, %dec_label_pc_14d14 ], [ 8, %bb123 ]
  %v2_14d1c = xor i1 %v2_14d14, true
  %v3_14d1c = or i1 %v7_14d14, %v2_14d1c
  br i1 %v3_14d1c, label %bb125, label %bb126

bb125:                                            ; preds = %bb124
  br label %bb126

bb126:                                            ; preds = %bb124, %bb125
  %v1_14d20 = phi i32 [ %v1_14d2016, %bb124 ], [ 0, %bb125 ]
  %v2_14d20 = add i32 %v1_14d20, -1
  %v3_14d20 = shl i32 1, %v2_14d20
  %v4_14d20 = and i32 %v3_14d20, %v0_149cc
  %v5_14d20 = icmp ne i32 %v4_14d20, 0
  %v6_14d20 = lshr i32 %v0_149cc, %v1_14d20
  %v4_14d28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32 36) to i32*), align 4
  %v2_14d2c = add i32 %v4_14d28, %v6_14d20
  %v3_14d2c = inttoptr i32 %v2_14d2c to i8*
  %v4_14d2c = load i8, i8* %v3_14d2c, align 1
  %v6_14d2c = zext i8 %v4_14d2c to i32
  %v3_14d30 = and i1 %v5_14d20, %v2_14d18
  br i1 %v3_14d30, label %bb127, label %bb128

bb127:                                            ; preds = %bb126
  store i32 24, i32* @lr, align 4
  br label %bb128

bb128:                                            ; preds = %bb126, %bb127
  %v0_14d3818 = phi i32 [ %v27_149b8, %bb126 ], [ 24, %bb127 ]
  %v2_14d34 = xor i1 %v5_14d20, true
  %v3_14d34 = or i1 %v7_14d14, %v2_14d34
  br i1 %v3_14d34, label %bb129, label %bb130

bb129:                                            ; preds = %bb128
  store i32 32, i32* @lr, align 4
  br label %bb130

bb130:                                            ; preds = %bb128, %bb129
  %v0_14d38 = phi i32 [ %v0_14d3818, %bb128 ], [ 32, %bb129 ]
  %v2_14d38 = sub i32 %v0_14d38, %v6_14d2c
  store i32 %v2_14d38, i32* %fp.global-to-local, align 4
  %v9_14d38 = icmp eq i32 %v0_14d38, %v6_14d2c
  br i1 %v9_14d38, label %dec_label_pc_14b28, label %dec_label_pc_14d40

dec_label_pc_14d40:                               ; preds = %bb106, %bb130
  %v1_14d4c = phi i32 [ %v2_14b20, %bb106 ], [ %v2_14d38, %bb130 ]
  %v6_14d40 = shl i32 %v0_149cc, %v1_14d4c
  %v1_14d44 = sub i32 32, %v1_14d4c
  %v7_14d48 = lshr i32 %v0_149dc, %v1_14d44
  %v8_14d48 = or i32 %v7_14d48, %v6_14d40
  store i32 %v8_14d48, i32* %r8.global-to-local, align 4
  %v6_14d4c = shl i32 %v0_149d4, %v1_14d4c
  %v6_14d50 = lshr i32 %v0_149d4, %v1_14d44
  store i32 %v6_14d50, i32* @r4, align 4
  %v7_14d54 = lshr i32 %v0_149e0, %v1_14d44
  %v8_14d54 = or i32 %v7_14d54, %v6_14d4c
  %v3_14d58 = udiv i32 %v8_14d48, 65536
  store i32 %v3_14d58, i32* %sl.global-to-local, align 4
  store i32 %v3_14d58, i32* @r1, align 4
  store i32 %v6_14d50, i32* @r0, align 4
  %v0_14d68 = call i32 @function_f6f8()
  %v0_14d74 = load i32, i32* @r4, align 4
  %v2_14d78 = call i32 @function_f7f4(i32 %v0_14d74, i32 %v3_14d58)
  %v0_14d7c = load i32, i32* %r8.global-to-local, align 4
  %v3_14d84 = urem i32 %v0_14d7c, 65536
  store i32 %v3_14d84, i32* @r7, align 4
  %v2_14d88 = mul i32 %v3_14d84, %v0_14d68
  %v3_14d90 = udiv i32 %v8_14d54, 65536
  %v4_14d94 = mul nuw i32 %v3_14d58, 65536
  %v5_14d94 = or i32 %v4_14d94, %v3_14d90
  %v9_14d98 = icmp eq i32 %v2_14d88, %v5_14d94
  %v0_14d9c = load i32, i32* @r5, align 4
  %v1_14d9c = load i32, i32* %fp.global-to-local, align 4
  %v2_14d9c = add i32 %v1_14d9c, -1
  %v3_14d9c = lshr i32 -2147483648, %v2_14d9c
  %v4_14d9c = and i32 %v3_14d9c, %v0_14d9c
  %v6_14d9c = shl i32 %v0_14d9c, %v1_14d9c
  store i32 %v6_14d9c, i32* @r5, align 4
  %v2_14da0 = icmp eq i32 %v4_14d9c, 0
  %v3_14da0 = or i1 %v9_14d98, %v2_14da0
  br i1 %v3_14da0, label %dec_label_pc_14db8, label %dec_label_pc_14da4

dec_label_pc_14da4:                               ; preds = %dec_label_pc_14d40
  %v2_14da8 = add i32 %v0_14d7c, %v5_14d94
  %v3_14da8 = icmp ult i32 %v2_14da8, %v5_14d94
  %v1_14dac = add i32 %v0_14d68, -1
  br i1 %v3_14da8, label %dec_label_pc_14db8, label %dec_label_pc_14eb0

dec_label_pc_14db8:                               ; preds = %.thread67, %dec_label_pc_14da4, %dec_label_pc_14d40
  %v1_14db8 = phi i32 [ %v5_14d94, %dec_label_pc_14d40 ], [ %v2_14da8, %dec_label_pc_14da4 ], [ %v1_14db822, %.thread67 ]
  %stack_var_-52.0 = phi i32 [ %v0_14d68, %dec_label_pc_14d40 ], [ %v1_14dac, %dec_label_pc_14da4 ], [ %v4_14ebc.v1_14dac, %.thread67 ]
  %v2_14db8 = sub i32 %v1_14db8, %v2_14d88
  store i32 %v2_14db8, i32* @r4, align 4
  %v0_14dbc = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_14dbc, i32* @r1, align 4
  store i32 %v2_14db8, i32* @r0, align 4
  %v0_14dc4 = call i32 @function_f6f8()
  store i32 %v0_14dc4, i32* %r6.global-to-local, align 4
  %v0_14dd0 = load i32, i32* @r4, align 4
  %v2_14dd4 = call i32 @function_f7f4(i32 %v0_14dd0, i32 %v0_14dbc)
  %v0_14dd8 = load i32, i32* @r7, align 4
  %v2_14dd8 = mul i32 %v0_14dc4, %v0_14dd8
  %v3_14de4 = urem i32 %v8_14d54, 65536
  %v4_14de8 = mul i32 %v0_14dbc, 65536
  %v5_14de8 = or i32 %v4_14de8, %v3_14de4
  %tmp162 = icmp ugt i32 %v2_14dd8, %v5_14de8
  br i1 %tmp162, label %dec_label_pc_14df4, label %dec_label_pc_14e00

dec_label_pc_14df4:                               ; preds = %dec_label_pc_14db8
  %v1_14df4 = load i32, i32* %r8.global-to-local, align 4
  %v2_14df4 = add i32 %v1_14df4, %v5_14de8
  %v3_14df4 = icmp ult i32 %v2_14df4, %v5_14de8
  %v1_14df8 = add i32 %v0_14dc4, -1
  store i32 %v1_14df8, i32* %r6.global-to-local, align 4
  br i1 %v3_14df4, label %dec_label_pc_14e00, label %dec_label_pc_14ea0

dec_label_pc_14e00:                               ; preds = %dec_label_pc_14db8, %dec_label_pc_14ea0, %bb148, %dec_label_pc_14df4
  %v0_14e08 = phi i32 [ %v5_14ea8, %bb148 ], [ %v1_14df8, %dec_label_pc_14df4 ], [ %v0_14dc4, %dec_label_pc_14db8 ], [ %v1_14df8, %dec_label_pc_14ea0 ]
  %v1_14e04 = phi i32 [ %v6_14ea4, %bb148 ], [ %v2_14df4, %dec_label_pc_14df4 ], [ %v5_14de8, %dec_label_pc_14db8 ], [ %v2_14df4, %dec_label_pc_14ea0 ]
  store i32 %stack_var_-52.0, i32* %r8.global-to-local, align 4
  %v2_14e04 = sub i32 %v1_14e04, %v2_14dd8
  %v4_14e08 = mul i32 %stack_var_-52.0, 65536
  %v5_14e08 = or i32 %v0_14e08, %v4_14e08
  %v3_14e0c = udiv i32 %v5_14e08, 65536
  %v0_14e10 = load i32, i32* @r5, align 4
  %v3_14e10 = udiv i32 %v0_14e10, 65536
  %tmp163 = mul i32 %v3_14e0c, -65536
  %v5_14e14 = add i32 %tmp163, -1
  %v6_14e14 = and i32 %v5_14e08, %v5_14e14
  %tmp164 = mul i32 %v3_14e10, -65536
  %v5_14e18 = add i32 %tmp164, -1
  %v6_14e18 = and i32 %v0_14e10, %v5_14e18
  %v2_14e1c = mul i32 %v6_14e18, %v6_14e14
  %v2_14e20 = mul i32 %v6_14e18, %v3_14e0c
  %v2_14e24 = mul i32 %v3_14e10, %v6_14e14
  %v2_14e28 = mul nuw i32 %v3_14e10, %v3_14e0c
  %v2_14e2c = add i32 %v2_14e20, %v2_14e24
  %v3_14e2c = icmp ult i32 %v2_14e2c, %v2_14e20
  br i1 %v3_14e2c, label %bb132, label %bb133

bb132:                                            ; preds = %dec_label_pc_14e00
  %v2_14e30 = add i32 %v2_14e28, 65536
  br label %bb133

bb133:                                            ; preds = %dec_label_pc_14e00, %bb132
  %v0_14e38 = phi i32 [ %v2_14e28, %dec_label_pc_14e00 ], [ %v2_14e30, %bb132 ]
  %v4_14e34 = mul i32 %v2_14e2c, 65536
  %v5_14e34 = add i32 %v4_14e34, %v2_14e1c
  %v2_14e38 = and i32 %v2_14e2c, 32768
  %v3_14e38 = icmp ne i32 %v2_14e38, 0
  %v4_14e38 = udiv i32 %v2_14e2c, 65536
  %v7_14e38 = zext i1 %v3_14e38 to i32
  %v6_14e38 = add nuw nsw i32 %v7_14e38, %v4_14e38
  %v8_14e38 = add i32 %v6_14e38, %v0_14e38
  %v3_14e3c = icmp ult i32 %v2_14e04, %v8_14e38
  br i1 %v3_14e3c, label %dec_label_pc_14e64, label %dec_label_pc_14e44

dec_label_pc_14e44:                               ; preds = %bb133
  %v9_14e3c = icmp eq i32 %v2_14e04, %v8_14e38
  %. = zext i1 %v9_14e3c to i32
  %v1_14e4c = load i32, i32* %sb.global-to-local, align 4
  %v2_14e4c = load i32, i32* %fp.global-to-local, align 4
  %v7_14e4c = shl i32 %v1_14e4c, %v2_14e4c
  %v9_14e4c = icmp uge i32 %v5_14e34, %v7_14e4c
  %v15_14e4c = icmp eq i32 %v5_14e34, %v7_14e4c
  %v2_14e50 = xor i1 %v9_14e4c, true
  %v3_14e50 = or i1 %v15_14e4c, %v2_14e50
  br i1 %v3_14e50, label %bb136, label %bb137

bb136:                                            ; preds = %dec_label_pc_14e44
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_14e44, %bb136
  %v4_14e54 = phi i32 [ %., %dec_label_pc_14e44 ], [ 0, %bb136 ]
  %v2_14e54 = xor i1 %v15_14e4c, true
  %v3_14e54 = and i1 %v9_14e4c, %v2_14e54
  br i1 %v3_14e54, label %bb138, label %thread-pre-split

bb138:                                            ; preds = %bb137
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb137, %bb138
  %v2_14e58 = icmp eq i32 %v4_14e54, 0
  br i1 %v2_14e58, label %bb139, label %dec_label_pc_14e64

bb139:                                            ; preds = %thread-pre-split
  br label %dec_label_pc_14b44

dec_label_pc_14e64:                               ; preds = %bb133, %thread-pre-split
  %v1_14e64 = add i32 %v5_14e08, -1
  br label %dec_label_pc_14b44

dec_label_pc_14e70:                               ; preds = %dec_label_pc_14b70
  %v2_14e70 = icmp ugt i32 %v0_14bc0, 254
  %v7_14e70 = icmp eq i32 %v0_14bc0, 255
  %v2_14e74 = xor i1 %v7_14e70, true
  %v3_14e74 = and i1 %v2_14e70, %v2_14e74
  br i1 %v3_14e74, label %bb140, label %bb141

bb140:                                            ; preds = %dec_label_pc_14e70
  store i32 24, i32* @ip, align 4
  br label %bb141

bb141:                                            ; preds = %dec_label_pc_14e70, %bb140
  %v2_14e78 = xor i1 %v2_14e70, true
  %v3_14e78 = or i1 %v7_14e70, %v2_14e78
  br i1 %v3_14e78, label %bb142, label %.thread61

bb142:                                            ; preds = %bb141
  store i32 32, i32* @ip, align 4
  store i32 0, i32* @r3, align 4
  br label %.thread61

.thread61:                                        ; preds = %bb141, %bb142
  br i1 %v3_14e74, label %bb143, label %._crit_edge

._crit_edge:                                      ; preds = %.thread61
  %v1_14b90.pre = load i32, i32* @r3, align 4
  br label %bb118

bb143:                                            ; preds = %.thread61
  br label %bb118

dec_label_pc_14e88:                               ; preds = %dec_label_pc_149f0
  %v2_14e88 = icmp ugt i32 %v0_149dc, 254
  %v7_14e88 = icmp eq i32 %v0_149dc, 255
  %v2_14e8c = xor i1 %v7_14e88, true
  %v3_14e8c = and i1 %v2_14e88, %v2_14e8c
  br i1 %v3_14e8c, label %bb144, label %bb145

bb144:                                            ; preds = %dec_label_pc_14e88
  store i32 24, i32* @ip, align 4
  br label %bb145

bb145:                                            ; preds = %dec_label_pc_14e88, %bb144
  %v2_14e90 = xor i1 %v2_14e88, true
  %v3_14e90 = or i1 %v7_14e88, %v2_14e90
  br i1 %v3_14e90, label %bb146, label %.thread62

bb146:                                            ; preds = %bb145
  store i32 32, i32* @ip, align 4
  br label %.thread62

.thread62:                                        ; preds = %bb145, %bb146
  br i1 %v3_14e8c, label %bb147, label %bb92

bb147:                                            ; preds = %.thread62
  br label %bb92

dec_label_pc_14ea0:                               ; preds = %dec_label_pc_14df4
  %tmp165 = icmp ugt i32 %v2_14dd8, %v2_14df4
  br i1 %tmp165, label %bb148, label %dec_label_pc_14e00

bb148:                                            ; preds = %dec_label_pc_14ea0
  %v6_14ea4 = add i32 %v2_14df4, %v1_14df4
  %v5_14ea8 = add i32 %v0_14dc4, -2
  store i32 %v5_14ea8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14e00

dec_label_pc_14eb0:                               ; preds = %dec_label_pc_14da4
  %tmp166 = icmp ugt i32 %v2_14d88, %v2_14da8
  br i1 %tmp166, label %bb149, label %.thread67

bb149:                                            ; preds = %dec_label_pc_14eb0
  %v5_14eb4 = add i32 %v0_14d68, -2
  %v6_14eb8 = add i32 %v2_14da8, %v0_14d7c
  br label %.thread67

.thread67:                                        ; preds = %dec_label_pc_14eb0, %bb149
  %v4_14ebc65 = phi i32 [ %v5_14eb4, %bb149 ], [ %v1_14dac, %dec_label_pc_14eb0 ]
  %v1_14db822 = phi i32 [ %v6_14eb8, %bb149 ], [ %v2_14da8, %dec_label_pc_14eb0 ]
  %v4_14ebc.v1_14dac = select i1 %tmp166, i32 %v4_14ebc65, i32 %v1_14dac
  br label %dec_label_pc_14db8

dec_label_pc_14ec4:                               ; preds = %dec_label_pc_14c5c
  %tmp167 = icmp ugt i32 %v2_14c40, %v2_14c5c
  br i1 %tmp167, label %bb150, label %dec_label_pc_14c68

bb150:                                            ; preds = %dec_label_pc_14ec4
  %v5_14ec8 = add i32 %v0_14c2c, -2
  store i32 %v5_14ec8, i32* %r6.global-to-local, align 4
  %v6_14ecc = add i32 %v2_14c5c, %v1_14c5c
  br label %dec_label_pc_14c68

dec_label_pc_14ed4:                               ; preds = %dec_label_pc_14c14
  %tmp168 = icmp ugt i32 %v2_14bfc, %v2_14c14
  br i1 %tmp168, label %bb151, label %dec_label_pc_14c20

bb151:                                            ; preds = %dec_label_pc_14ed4
  %v5_14ed8 = add i32 %v0_14be0, -2
  store i32 %v5_14ed8, i32* %fp.global-to-local, align 4
  %v6_14edc = add i32 %v2_14c14, %v0_14bf4
  br label %dec_label_pc_14c20

; uselistorder directives
  uselistorder i32 %v5_14ec8, { 1, 0 }
  uselistorder i1 %tmp166, { 1, 0 }
  uselistorder i32 %v5_14ea8, { 1, 0 }
  uselistorder i1 %v7_14e88, { 1, 0 }
  uselistorder i1 %v7_14e70, { 1, 0 }
  uselistorder i1 %v9_14e4c, { 1, 0 }
  uselistorder i32 %v7_14e4c, { 1, 0 }
  uselistorder i32 %v2_14e2c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14e20, { 1, 0 }
  uselistorder i32 %v3_14e10, { 2, 1, 0 }
  uselistorder i32 %v0_14e10, { 1, 0 }
  uselistorder i32 %v3_14e0c, { 2, 1, 0 }
  uselistorder i32 %v5_14e08, { 3, 1, 0, 2 }
  uselistorder i32 %v2_14df4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_14de8, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14dd8, { 0, 2, 1 }
  uselistorder i32 %v0_14dc4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_14dbc, { 1, 0, 2 }
  uselistorder i32 %v1_14dac, { 1, 0, 2 }
  uselistorder i32 %v2_14da8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_14d9c, { 1, 0 }
  uselistorder i32 %v0_14d9c, { 1, 0 }
  uselistorder i32 %v5_14d94, { 1, 2, 0, 3 }
  uselistorder i32 %v3_14d84, { 1, 0 }
  uselistorder i32 %v0_14d7c, { 1, 2, 0 }
  uselistorder i32 %v0_14d68, { 1, 3, 2, 0 }
  uselistorder i32 %v3_14d58, { 1, 0, 3, 2 }
  uselistorder i32 %v2_14d38, { 1, 2, 0 }
  uselistorder i32 %v0_14d38, { 1, 0 }
  uselistorder i32 %v6_14d2c, { 1, 0 }
  uselistorder i1 %v2_14d18, { 1, 0 }
  uselistorder i1 %v7_14d14, { 1, 2, 0 }
  uselistorder i32 %v5_14ce8, { 2, 1, 0 }
  uselistorder i32 %v0_14cc8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_14ca4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v5_14c98, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14c90, { 2, 0, 1 }
  uselistorder i32 %v0_14c7c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14c5c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_14c50, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14c40, { 0, 2, 1 }
  uselistorder i32 %v0_14c2c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_14c14, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_14c08, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14bfc, { 0, 2, 1 }
  uselistorder i32 %v3_14bf8, { 1, 0 }
  uselistorder i32 %v0_14bf4, { 1, 2, 0 }
  uselistorder i32 %v0_14be0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_14bd0, { 1, 0 }
  uselistorder i32 %v4_14bb0, { 1, 0 }
  uselistorder i32 %v2_14ba8, { 1, 0, 2 }
  uselistorder i32 %v6_14b9c, { 1, 0 }
  uselistorder i1 %v9_14b7c, { 1, 0 }
  uselistorder i32 %v0_14bc0, { 9, 8, 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i1 %v3_14b28, { 1, 0 }
  uselistorder i32 %v2_14b20, { 1, 0, 2 }
  uselistorder i32 %v0_14b20, { 1, 0 }
  uselistorder i32 %v6_14b14, { 1, 0 }
  uselistorder i1 %v2_14b00, { 1, 0 }
  uselistorder i1 %v9_14afc, { 1, 2, 0 }
  uselistorder i1 %v9_14ae4, { 1, 0 }
  uselistorder i32 %v5_14ab8, { 2, 1, 0 }
  uselistorder i32 %v0_14a98, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_14a90, { 1, 0, 2 }
  uselistorder i32 %v2_14a74, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v5_14a68, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14a60, { 2, 0, 1 }
  uselistorder i32 %v3_14a5c, { 1, 0 }
  uselistorder i32 %v0_14a58, { 1, 2, 0 }
  uselistorder i32 %v0_14a44, { 1, 0, 2, 3 }
  uselistorder i32 %v3_14a34.c, { 1, 0 }
  uselistorder i32 %v3_14a34, { 1, 0 }
  uselistorder i32 %v6_14a1c, { 1, 0 }
  uselistorder i1 %v9_149fc, { 1, 0 }
  uselistorder i32 %v0_149e0, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_149dc, { 9, 8, 12, 2, 10, 11, 1, 3, 4, 5, 6, 7, 0, 13 }
  uselistorder i32 %v0_149d4, { 5, 6, 4, 1, 7, 2, 3, 0, 8 }
  uselistorder i32 %v0_149cc, { 4, 6, 1, 5, 12, 11, 3, 7, 2, 8, 9, 10, 0, 13, 14 }
  uselistorder i32* %sl.global-to-local, { 4, 5, 8, 6, 7, 9, 10, 11, 2, 0, 1, 3 }
  uselistorder i32* %sb.global-to-local, { 3, 7, 8, 9, 4, 5, 1, 2, 0, 6 }
  uselistorder i32* %r8.global-to-local, { 5, 6, 7, 8, 11, 12, 9, 10, 13, 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 9, 10, 11, 12, 13, 14, 15, 7, 2, 3, 4, 6, 5, 8 }
  uselistorder i32* %fp.global-to-local, { 0, 8, 9, 1, 6, 2, 4, 3, 5, 7, 10 }
  uselistorder i32 32768, { 4, 5, 3, 2, 7, 0, 6, 1 }
  uselistorder i32 255, { 16, 17, 18, 10, 11, 12, 6, 7, 1, 0, 8, 13, 9, 4, 14, 5, 15, 2, 3 }
  uselistorder i32 254, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2 }
  uselistorder i32 (i32, i32)* @function_f7f4, { 7, 6, 5, 4, 3, 2, 9, 8, 21, 20, 19, 18, 17, 16, 11, 10, 12, 1, 15, 0, 14, 13 }
  uselistorder i32 ()* @function_f6f8, { 9, 8, 7, 6, 5, 4, 3, 11, 10, 21, 20, 19, 18, 17, 16, 15, 13, 12, 2, 1, 14, 0 }
  uselistorder i32 65536, { 4, 3, 177, 6, 7, 5, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 175, 39, 40, 38, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 81, 73, 82, 74, 83, 75, 84, 76, 85, 77, 86, 78, 87, 79, 88, 80, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 99, 101, 1, 102, 0, 2, 103, 104, 105, 106, 109, 107, 108, 110, 176, 112, 113, 111, 114, 115, 116, 117, 118, 119, 173, 120, 121, 122, 125, 126, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 139, 141, 174, 142, 143, 144, 145, 147, 146, 178, 150, 149, 148, 152, 151, 153, 154, 155, 157, 158, 159, 156, 161, 162, 160, 163, 164, 166, 167, 168, 165, 170, 171, 172, 169 }
  uselistorder i32 36, { 1, 2, 0, 4, 5, 3 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32 36) to i32*), { 1, 2, 0, 4, 5, 3 }
  uselistorder i32* @ip, { 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 12, 13, 14, 15, 16, 17, 18, 48, 49, 0, 50, 51, 22, 23, 21, 52, 53, 54, 55, 56, 89, 90, 91, 92, 19, 20, 60, 24, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 9, 25, 10, 26, 27, 5, 1, 6, 28, 29, 3, 30, 4, 7, 31, 8, 32, 80, 81, 11, 82, 83, 84, 85, 86, 87, 88, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 2, 71, 72, 73, 74, 75, 76, 77, 33, 34, 35, 36, 37, 57, 58, 59, 78, 79 }
  uselistorder i32 16777215, { 0, 7, 2, 6, 1, 8, 4, 11, 5, 9, 3, 10 }
  uselistorder i32 16777214, { 1, 0, 2, 5, 3, 4, 6 }
  uselistorder i32* @r2, { 84, 0, 5, 3, 85, 6, 86, 87, 88, 63, 89, 31, 33, 34, 35, 32, 7, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 36, 68, 126, 37, 127, 8, 154, 155, 156, 157, 158, 159, 103, 38, 128, 39, 129, 130, 131, 107, 108, 61, 104, 109, 40, 132, 41, 118, 119, 120, 121, 140, 141, 142, 143, 144, 136, 137, 138, 139, 145, 1, 146, 147, 133, 134, 135, 69, 70, 110, 112, 111, 42, 148, 149, 150, 151, 4, 64, 65, 71, 72, 75, 24, 25, 26, 27, 28, 29, 30, 43, 9, 12, 13, 10, 11, 2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 66, 67, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 105, 106, 113, 114, 115, 116, 117, 152, 153, 123, 122, 124, 125 }
  uselistorder i32* @r1, { 88, 89, 90, 91, 92, 93, 94, 95, 96, 0, 97, 98, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 99, 100, 6, 43, 68, 44, 20, 101, 45, 76, 119, 46, 102, 47, 48, 120, 121, 108, 109, 103, 104, 105, 110, 49, 122, 8, 77, 111, 7, 123, 124, 69, 2, 125, 70, 71, 36, 37, 38, 39, 40, 41, 42, 21, 24, 25, 22, 23, 4, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 50, 52, 53, 54, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 74, 3, 75, 126, 127, 1, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 106, 107, 112, 113, 114, 115, 116, 128, 129, 117, 118, 130, 9 }
  uselistorder i32* @r3, { 4, 32, 33, 5, 12, 3, 13, 9, 34, 46, 14, 15, 19, 20, 2, 21, 23, 22, 16, 35, 112, 47, 10, 17, 24, 81, 82, 83, 84, 85, 86, 7, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 6, 107, 108, 109, 110, 111, 48, 49, 50, 51, 52, 53, 54, 55, 8, 57, 58, 59, 60, 61, 69, 70, 71, 72, 73, 62, 63, 64, 65, 67, 68, 66, 74, 56, 39, 40, 11, 75, 76, 77, 78, 1, 26, 79, 18, 80, 25, 27, 28, 29, 30, 31, 36, 37, 38, 41, 42, 43, 44, 45 }
  uselistorder label %.thread67, { 1, 0 }
  uselistorder label %.thread62, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread61, { 1, 0 }
  uselistorder label %bb141, { 1, 0 }
  uselistorder label %dec_label_pc_14e64, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %bb133, { 1, 0 }
  uselistorder label %dec_label_pc_14e00, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_14d40, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %bb124, { 1, 0 }
  uselistorder label %bb122, { 3, 2, 1, 0 }
  uselistorder label %.thread59, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_14c74, { 1, 0 }
  uselistorder label %dec_label_pc_14c68, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_14c20, { 2, 1, 3, 0 }
  uselistorder label %bb118, { 1, 0, 3, 2 }
  uselistorder label %bb116, { 1, 0 }
  uselistorder label %bb114, { 1, 0 }
  uselistorder label %bb112, { 1, 0 }
  uselistorder label %dec_label_pc_14b70, { 1, 0 }
  uselistorder label %dec_label_pc_14b44, { 2, 1, 4, 5, 0, 3 }
  uselistorder label %dec_label_pc_14b3c, { 1, 0, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14b28, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb97, { 3, 2, 1, 0 }
  uselistorder label %.thread57, { 3, 1, 2, 0 }
  uselistorder label %bb92, { 0, 1, 3, 2 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
}

define i32 @function_14ee8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5) local_unnamed_addr {
dec_label_pc_14ee8:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_14ee8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14ee8, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_14ee8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_14ee8, %bb
  %v0_14eec = load i32, i32* %r1.global-to-local, align 4
  %v2_14eec = icmp eq i32 %v0_14eec, 0
  br i1 %v2_14eec, label %dec_label_pc_14ef4, label %dec_label_pc_14f24

dec_label_pc_14ef4:                               ; preds = %bb8
  %tmp = icmp ult i32 %arg3, 16
  br i1 %tmp, label %bb9, label %.thread2

bb9:                                              ; preds = %dec_label_pc_14ef4
  %v6_14ef8 = icmp eq i32 %arg4, 0
  br i1 %v6_14ef8, label %dec_label_pc_14f08, label %bb10

.thread2:                                         ; preds = %dec_label_pc_14ef4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14f30

bb10:                                             ; preds = %bb9
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14f30

dec_label_pc_14f08:                               ; preds = %bb9
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_14f08 = mul i32 %arg3, 4
  %v1_14f0c = load i32, i32* %r0.global-to-local, align 4
  %v2_14f0c = add i32 %v1_14f0c, %v3_14f08
  %v1_14f10 = add i32 %v2_14f0c, 4
  %v2_14f10 = inttoptr i32 %v1_14f10 to i32*
  %v3_14f10 = load i32, i32* %v2_14f10, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_14f10, i32* %arg5, align 4
  ret i32 0

dec_label_pc_14f24:                               ; preds = %bb8
  %tmp13 = icmp ult i32 %v0_14eec, 5
  br i1 %tmp13, label %bb11, label %bb12

bb11:                                             ; preds = %dec_label_pc_14f24
  store i32 1, i32* %r0.global-to-local, align 4
  br label %bb12

bb12:                                             ; preds = %dec_label_pc_14f24, %bb11
  %v0_14f2c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp13, i32 %v0_14f2c)
  br label %dec_label_pc_14f30

dec_label_pc_14f30:                               ; preds = %bb10, %.thread2, %bb12
  store i32 2, i32* %r0.global-to-local, align 4
  ret i32 2

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 2, 4, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 5, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_14f30, { 2, 0, 1 }
  uselistorder label %bb12, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_14f38(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5) local_unnamed_addr {
dec_label_pc_14f38:
  %v2_14f38 = icmp eq i32 %arg2, 0
  br i1 %v2_14f38, label %dec_label_pc_14f40, label %dec_label_pc_14f70

dec_label_pc_14f40:                               ; preds = %dec_label_pc_14f38
  %tmp = icmp ult i32 %arg3, 16
  br i1 %tmp, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14f40
  %v6_14f44 = icmp eq i32 %arg4, 0
  br i1 %v6_14f44, label %dec_label_pc_14f54, label %bb8

.thread2:                                         ; preds = %dec_label_pc_14f40
  br label %dec_label_pc_14f7c

bb8:                                              ; preds = %bb
  br label %dec_label_pc_14f7c

dec_label_pc_14f54:                               ; preds = %bb
  %v3_14f58 = mul i32 %arg3, 4
  %v2_14f5c = load i32, i32* %arg5, align 4
  %v2_14f60 = add i32 %v3_14f58, %arg1
  %v2_14f68 = add i32 %v2_14f60, 4
  %v3_14f68 = inttoptr i32 %v2_14f68 to i32*
  store i32 %v2_14f5c, i32* %v3_14f68, align 4
  ret i32 0

dec_label_pc_14f70:                               ; preds = %dec_label_pc_14f38
  %tmp11 = icmp ult i32 %arg2, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_14f70
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_14f70, %bb9
  %v0_14f78 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_14f78)
  br label %dec_label_pc_14f7c

dec_label_pc_14f7c:                               ; preds = %bb8, %.thread2, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32* @lr, { 3, 4, 63, 64, 65, 66, 67, 5, 6, 7, 8, 9, 93, 10, 11, 12, 13, 14, 17, 18, 19, 94, 95, 96, 125, 126, 15, 97, 98, 99, 100, 101, 102, 103, 104, 105, 20, 0, 2, 21, 22, 23, 24, 122, 123, 124, 25, 26, 27, 83, 84, 106, 107, 108, 73, 74, 75, 109, 110, 85, 86, 76, 77, 127, 128, 111, 112, 113, 51, 114, 115, 16, 28, 29, 30, 31, 32, 1, 36, 37, 38, 39, 40, 41, 42, 33, 34, 35, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 72, 78, 79, 80, 81, 82, 116, 117, 118, 87, 88, 89, 90, 91, 92, 119, 120, 121, 69, 70, 71, 129 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_14f7c, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @function_14f84(i32 %arg1) local_unnamed_addr {
dec_label_pc_14f84:
  %v1_14f84 = add i32 %arg1, 68
  %v2_14f84 = inttoptr i32 %v1_14f84 to i32*
  %v3_14f84 = load i32, i32* %v2_14f84, align 4
  ret i32 %v3_14f84
}

define i32 @function_14f90(i32 %arg1) local_unnamed_addr {
dec_label_pc_14f90:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_14f94 = add i32 %arg1, 8
  %v2_14f94 = inttoptr i32 %v1_14f94 to i32*
  %v3_14f94 = load i32, i32* %v2_14f94, align 4
  %v2_14f98 = icmp eq i32 %v3_14f94, 0
  br i1 %v2_14f98, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_14f90
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14f90, %bb
  %v2_14fac = xor i1 %v2_14f98, true
  call void @__pseudo_cond_branch(i1 %v2_14fac, i32 %v3_14f94)
  %v1_14fb8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_14fb8

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 0, 1, 2, 19, 3, 4, 5, 6, 7, 15, 20, 21, 22, 16, 23, 14, 24, 25, 9, 10, 8, 11, 12, 13, 17, 18, 26, 27 }
  uselistorder i1 true, { 0, 5, 6, 1, 2, 13, 14, 9, 10, 11, 3, 4, 12, 15, 16, 17, 18, 7, 8, 23, 24, 31, 32, 27, 28, 29, 19, 20, 30, 33, 34, 35, 21, 22, 25, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 48, 49, 52, 50, 53, 54, 55, 56, 57, 58, 59, 141, 62, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 114, 73, 74, 75, 76, 77, 121, 120, 78, 142, 133, 143, 144, 81, 145, 82, 83, 125, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 79, 80, 156, 157, 158, 112, 115, 132, 131, 94, 95, 96, 159, 97, 98, 122, 123, 127, 124, 128, 118, 126, 160, 119, 130, 161, 84, 162, 85, 86, 87, 163, 134, 135, 88, 89, 164, 136, 137, 90, 91, 165, 138, 139, 92, 93, 117, 166, 167, 129, 168, 99, 113, 100, 101, 102, 103, 104, 116, 105, 106, 107, 108, 109, 110, 111, 140 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_14fbc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14fbc:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v0_14fc4 = call i32 @function_16438()
  %v0_14fd0 = call i32 @function_16438()
  %v3_14fd4 = load i32, i32* @r4, align 4
  store i32 %v3_14fd4, i32* %stack_var_-48, align 4
  %v6_14fd4 = load i32, i32* @r5, align 4
  %v9_14fd4 = load i32, i32* @r6, align 4
  %v12_14fd4 = load i32, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32* %r5.global-to-local, align 4
  %v4_14fe4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32 32) to i32*), align 4
  %v2_14fe8 = icmp eq i32 %v4_14fe4, 0
  store i32 %v0_14fd0, i32* %r6.global-to-local, align 4
  %v1_14ff4 = add i32 %arg2, -2
  store i32 %v1_14ff4, i32* %r4.global-to-local, align 4
  br i1 %v2_14fe8, label %dec_label_pc_1502c, label %dec_label_pc_14ffc

dec_label_pc_14ffc:                               ; preds = %dec_label_pc_14fbc
  call void @__pseudo_branch(i32 %v4_14fe4)
  %v2_1500c = icmp eq i32 %v1_14ff4, 0
  br i1 %v2_1500c, label %.thread, label %dec_label_pc_1504cthread-pre-split

.thread:                                          ; preds = %dec_label_pc_14ffc
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_15014 = load i32, i32* %r6.global-to-local, align 4
  %v3_15014 = add i32 %v2_15014, 16
  %v4_15014 = inttoptr i32 %v3_15014 to i32*
  store i32 0, i32* %v4_15014, align 4
  br label %dec_label_pc_1501c

dec_label_pc_1501c:                               ; preds = %.thread, %.thread10, %dec_label_pc_151c4, %dec_label_pc_151b0, %dec_label_pc_1518c, %dec_label_pc_15164, %dec_label_pc_15064
  %v0_1501c = load i32, i32* %r2.global-to-local, align 4
  %v2_15024 = load i32, i32* %stack_var_-48, align 4
  store i32 %v2_15024, i32* %r4.global-to-local, align 4
  store i32 %v6_14fd4, i32* %r5.global-to-local, align 4
  store i32 %v9_14fd4, i32* %r6.global-to-local, align 4
  store i32 %v12_14fd4, i32* %r7.global-to-local, align 4
  ret i32 %v0_1501c

dec_label_pc_1502c:                               ; preds = %dec_label_pc_14fbc
  store i32 12, i32* %r2.global-to-local, align 4
  %v4_15034 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32 12) to i32*), align 4
  %v4_15038 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.484 to i32), i32 24) to i32*), align 4
  store i32 %v4_15038, i32* %r2.global-to-local, align 4
  %v2_1503c = sub i32 %v4_15034, %v4_15038
  %v3_15040 = sdiv i32 %v2_1503c, 8
  store i32 %v3_15040, i32* %stack_var_-52, align 4
  br label %dec_label_pc_1504c

dec_label_pc_1504cthread-pre-split:               ; preds = %dec_label_pc_14ffc
  %v3_1504c.pr = load i32, i32* %stack_var_-52, align 4
  br label %dec_label_pc_1504c

dec_label_pc_1504c:                               ; preds = %dec_label_pc_1504cthread-pre-split, %dec_label_pc_1502c
  %v0_15090.pre = phi i32 [ %v1_14ff4, %dec_label_pc_1504cthread-pre-split ], [ %v4_15038, %dec_label_pc_1502c ]
  %v1_15054 = phi i32 [ %v3_1504c.pr, %dec_label_pc_1504cthread-pre-split ], [ %v3_15040, %dec_label_pc_1502c ]
  %v2_15050 = icmp eq i32 %v1_15054, 0
  br i1 %v2_15050, label %dec_label_pc_15064, label %dec_label_pc_15080.preheader

dec_label_pc_15080.preheader:                     ; preds = %dec_label_pc_1504c
  %v2_15054 = add i32 %v1_15054, -1
  %v1_150b0 = add i32 %v0_15090.pre, 8
  br label %dec_label_pc_15080.outer

dec_label_pc_15064.loopexit:                      ; preds = %dec_label_pc_150dc
  br label %dec_label_pc_15064

dec_label_pc_15064:                               ; preds = %dec_label_pc_15064.loopexit, %dec_label_pc_1504c, %dec_label_pc_151a8
  store i32 9, i32* %r2.global-to-local, align 4
  %v1_1506c = load i32, i32* %r6.global-to-local, align 4
  %v2_1506c = add i32 %v1_1506c, 16
  %v3_1506c = inttoptr i32 %v2_1506c to i32*
  store i32 0, i32* %v3_1506c, align 4
  br label %dec_label_pc_1501c

dec_label_pc_15074:                               ; preds = %dec_label_pc_150d0
  %v3_15074 = icmp ult i32 %storemerge40, %v0_150d4
  br i1 %v3_15074, label %dec_label_pc_1507c, label %dec_label_pc_150ec

dec_label_pc_1507c:                               ; preds = %dec_label_pc_15074
  %v1_1507c = add nsw i32 %v3_15088, 1
  br label %dec_label_pc_15080.outer

dec_label_pc_15080.outer:                         ; preds = %dec_label_pc_1507c, %dec_label_pc_15080.preheader
  %v1_150dc.ph = phi i32 [ %v1_1507c, %dec_label_pc_1507c ], [ 0, %dec_label_pc_15080.preheader ]
  %v0_15080.ph = phi i32 [ %v0_15080, %dec_label_pc_1507c ], [ %v2_15054, %dec_label_pc_15080.preheader ]
  br label %dec_label_pc_15080

dec_label_pc_15080:                               ; preds = %dec_label_pc_15080.outer, %dec_label_pc_150e4
  %v0_15080 = phi i32 [ %v1_150e4, %dec_label_pc_150e4 ], [ %v0_15080.ph, %dec_label_pc_15080.outer ]
  %v2_15080 = add i32 %v0_15080, %v1_150dc.ph
  %tmp = icmp slt i32 %v2_15080, 0
  %v4_15084 = zext i1 %tmp to i32
  %v5_15084 = add i32 %v4_15084, %v2_15080
  %v3_15088 = sdiv i32 %v5_15084, 2
  %v3_1508c = mul i32 %v3_15088, 8
  %v2_15090 = add i32 %v3_1508c, %v0_15090.pre
  %v3_15090 = inttoptr i32 %v2_15090 to i32*
  %v4_15090 = load i32, i32* %v3_15090, align 4
  %v1_15094 = and i32 %v4_15090, 1073741824
  %v2_15094 = icmp eq i32 %v1_15094, 0
  %v2_15098 = or i32 %v4_15090, -2147483648
  %tmp82 = bitcast i32 %v4_15090 to float
  %tmp83 = call float @fabsf(float %tmp82)
  %v2_1509c = bitcast float %tmp83 to i32
  %storemerge = select i1 %v2_15094, i32 %v2_1509c, i32 %v2_15098
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v9_150a0 = icmp eq i32 %v2_15054, %v3_15088
  store i32 %v2_15090, i32* %r7.global-to-local, align 4
  br i1 %v9_150a0, label %dec_label_pc_150d0, label %dec_label_pc_150b0

dec_label_pc_150b0:                               ; preds = %dec_label_pc_15080
  %v2_150b4 = add i32 %v3_1508c, %v1_150b0
  %v3_150b4 = inttoptr i32 %v2_150b4 to i32*
  %v4_150b4 = load i32, i32* %v3_150b4, align 4
  %v1_150bc = and i32 %v4_150b4, 1073741824
  %v2_150bc = icmp eq i32 %v1_150bc, 0
  %v2_150c0 = or i32 %v4_150b4, -2147483648
  %tmp84 = bitcast i32 %v4_150b4 to float
  %tmp85 = call float @fabsf(float %tmp84)
  %v2_150c4 = bitcast float %tmp85 to i32
  %storemerge39 = select i1 %v2_150bc, i32 %v2_150c4, i32 %v2_150c0
  %v1_150c8 = add i32 %v2_150b4, -1
  %v2_150cc = add i32 %storemerge39, %v1_150c8
  br label %dec_label_pc_150d0

dec_label_pc_150d0:                               ; preds = %dec_label_pc_15080, %dec_label_pc_150b0
  %storemerge40 = phi i32 [ %v2_150cc, %dec_label_pc_150b0 ], [ -1, %dec_label_pc_15080 ]
  %v2_150d0 = add i32 %storemerge, %v2_15090
  %v0_150d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_150d4 = icmp ult i32 %v0_150d4, %v2_150d0
  br i1 %v3_150d4, label %dec_label_pc_150dc, label %dec_label_pc_15074

dec_label_pc_150dc:                               ; preds = %dec_label_pc_150d0
  %v9_150dc = icmp eq i32 %v3_15088, %v1_150dc.ph
  br i1 %v9_150dc, label %dec_label_pc_15064.loopexit, label %dec_label_pc_150e4

dec_label_pc_150e4:                               ; preds = %dec_label_pc_150dc
  %v1_150e4 = add nsw i32 %v3_15088, -1
  br label %dec_label_pc_15080

dec_label_pc_150ec:                               ; preds = %dec_label_pc_15074
  %v2_150ec = load i32, i32* %v3_15090, align 4
  %v1_150f0 = and i32 %v2_150ec, 1073741824
  %v2_150f0 = icmp eq i32 %v1_150f0, 0
  %v2_150f4 = or i32 %v2_150ec, -2147483648
  %tmp86 = bitcast i32 %v2_150ec to float
  %tmp87 = call float @fabsf(float %tmp86)
  %v2_150f8 = bitcast float %tmp87 to i32
  %v0_150fc = select i1 %v2_150f0, i32 %v2_150f8, i32 %v2_150f4
  %v2_150fc = add i32 %v0_150fc, %v2_15090
  %v1_15100 = load i32, i32* %r6.global-to-local, align 4
  %v2_15100 = add i32 %v1_15100, 72
  %v3_15100 = inttoptr i32 %v2_15100 to i32*
  store i32 %v2_150fc, i32* %v3_15100, align 4
  %v0_15104 = load i32, i32* %r7.global-to-local, align 4
  %v1_15104 = add i32 %v0_15104, 4
  %v2_15104 = inttoptr i32 %v1_15104 to i32*
  %v3_15104 = load i32, i32* %v2_15104, align 4
  %v7_15108 = icmp eq i32 %v3_15104, 1
  br i1 %v7_15108, label %.thread10, label %dec_label_pc_1511c

.thread10:                                        ; preds = %dec_label_pc_150ec
  %v1_15108 = add i32 %v3_15104, -1
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_15114 = load i32, i32* %r6.global-to-local, align 4
  %v3_15114 = add i32 %v2_15114, 16
  %v4_15114 = inttoptr i32 %v3_15114 to i32*
  store i32 %v1_15108, i32* %v4_15114, align 4
  br label %dec_label_pc_1501c

dec_label_pc_1511c:                               ; preds = %dec_label_pc_150ec
  %v1_1511c = icmp slt i32 %v3_15104, 0
  br i1 %v1_1511c, label %.thread38, label %dec_label_pc_15134

.thread38:                                        ; preds = %dec_label_pc_1511c
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_15128 = load i32, i32* %r6.global-to-local, align 4
  %v5_15128 = add i32 %v4_15128, 76
  %v6_15128 = inttoptr i32 %v5_15128 to i32*
  store i32 %v1_15104, i32* %v6_15128, align 4
  %v3_1512c = load i32, i32* %r2.global-to-local, align 4
  %v4_1512c = load i32, i32* %r6.global-to-local, align 4
  %v5_1512c = add i32 %v4_1512c, 80
  %v6_1512c = inttoptr i32 %v5_1512c to i32*
  store i32 %v3_1512c, i32* %v6_1512c, align 4
  br label %dec_label_pc_15154

dec_label_pc_15134:                               ; preds = %dec_label_pc_1511c
  %v1_15134 = and i32 %v3_15104, 1073741824
  %v2_15134 = icmp eq i32 %v1_15134, 0
  %v2_15138 = or i32 %v3_15104, -2147483648
  %tmp88 = bitcast i32 %v3_15104 to float
  %tmp89 = call float @fabsf(float %tmp88)
  %v2_1513c = bitcast float %tmp89 to i32
  %storemerge42 = select i1 %v2_15134, i32 %v2_1513c, i32 %v2_15138
  %v1_15140 = add i32 %storemerge42, 4
  %v2_15144 = add i32 %v1_15140, %v0_15104
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_1514c = load i32, i32* %r6.global-to-local, align 4
  %v2_1514c = add i32 %v1_1514c, 76
  %v3_1514c = inttoptr i32 %v2_1514c to i32*
  store i32 %v2_15144, i32* %v3_1514c, align 4
  %v0_15150 = load i32, i32* %r2.global-to-local, align 4
  %v1_15150 = load i32, i32* %r6.global-to-local, align 4
  %v2_15150 = add i32 %v1_15150, 80
  %v3_15150 = inttoptr i32 %v2_15150 to i32*
  store i32 %v0_15150, i32* %v3_15150, align 4
  br label %dec_label_pc_15154

dec_label_pc_15154:                               ; preds = %.thread38, %dec_label_pc_15134
  %v0_15154 = load i32, i32* %r6.global-to-local, align 4
  %v1_15154 = add i32 %v0_15154, 76
  %v2_15154 = inttoptr i32 %v1_15154 to i32*
  %v3_15154 = load i32, i32* %v2_15154, align 4
  store i32 %v3_15154, i32* %r2.global-to-local, align 4
  %v1_15158 = inttoptr i32 %v3_15154 to i32*
  %v2_15158 = load i32, i32* %v1_15158, align 4
  %v1_1515c = icmp slt i32 %v2_15158, 0
  br i1 %v1_1515c, label %dec_label_pc_15180, label %dec_label_pc_15164

dec_label_pc_15164:                               ; preds = %dec_label_pc_15154
  %v1_15164 = and i32 %v2_15158, 1073741824
  %v2_15164 = icmp eq i32 %v1_15164, 0
  %v2_15168 = or i32 %v2_15158, -2147483648
  %tmp90 = bitcast i32 %v2_15158 to float
  %tmp91 = call float @fabsf(float %tmp90)
  %v2_1516c = bitcast float %tmp91 to i32
  %v0_15170 = select i1 %v2_15164, i32 %v2_1516c, i32 %v2_15168
  %v2_15170 = add i32 %v0_15170, %v3_15154
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_15178 = add i32 %v0_15154, 16
  %v3_15178 = inttoptr i32 %v2_15178 to i32*
  store i32 %v2_15170, i32* %v3_15178, align 4
  br label %dec_label_pc_1501c

dec_label_pc_15180:                               ; preds = %dec_label_pc_15154
  %v3_15180 = udiv i32 %v2_15158, 16777216
  %v1_15184 = urem i32 %v3_15180, 16
  %v2_15184 = icmp eq i32 %v1_15184, 0
  br i1 %v2_15184, label %dec_label_pc_1518c, label %dec_label_pc_151a0

dec_label_pc_1518c:                               ; preds = %dec_label_pc_15180
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_15194 = load i32, i32* %r5.global-to-local, align 4
  %v2_15194 = add i32 %v0_15194, -38000
  %v2_15198 = add i32 %v0_15154, 16
  %v3_15198 = inttoptr i32 %v2_15198 to i32*
  store i32 %v2_15194, i32* %v3_15198, align 4
  br label %dec_label_pc_1501c

dec_label_pc_151a0:                               ; preds = %dec_label_pc_15180
  %v7_151a0 = icmp eq i32 %v1_15184, 1
  br i1 %v7_151a0, label %dec_label_pc_151c4, label %dec_label_pc_151a8

dec_label_pc_151a8:                               ; preds = %dec_label_pc_151a0
  %v7_151a8 = icmp eq i32 %v1_15184, 2
  br i1 %v7_151a8, label %dec_label_pc_151b0, label %dec_label_pc_15064

dec_label_pc_151b0:                               ; preds = %dec_label_pc_151a8
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_151b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_151b8 = add i32 %v0_151b8, -38016
  %v2_151bc = add i32 %v0_15154, 16
  %v3_151bc = inttoptr i32 %v2_151bc to i32*
  store i32 %v2_151b8, i32* %v3_151bc, align 4
  br label %dec_label_pc_1501c

dec_label_pc_151c4:                               ; preds = %dec_label_pc_151a0
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_151cc = load i32, i32* %r5.global-to-local, align 4
  %v2_151cc = add i32 %v0_151cc, -38008
  %v2_151d0 = add i32 %v0_15154, 16
  %v3_151d0 = inttoptr i32 %v2_151d0 to i32*
  store i32 %v2_151cc, i32* %v3_151d0, align 4
  br label %dec_label_pc_1501c

; uselistorder directives
  uselistorder i32 %v1_15184, { 2, 1, 0 }
  uselistorder i32 %v0_15154, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_15104, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_150d4, { 1, 0 }
  uselistorder i32 %v3_1508c, { 1, 0 }
  uselistorder i32 %v3_15088, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_15080, { 1, 0 }
  uselistorder i32 %v0_15080, { 1, 0 }
  uselistorder i32 %v2_15054, { 1, 0 }
  uselistorder i32 %v0_15090.pre, { 1, 0 }
  uselistorder i32 %v3_15040, { 1, 0 }
  uselistorder i32 %v1_14ff4, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 11, 12, 13, 14 }
  uselistorder i32 16777216, { 6, 1, 7, 0, 2, 3, 8, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 28, 27, 29, 30, 32, 31, 34, 33, 36, 35, 38, 37, 40, 39, 42, 41, 44, 43, 46, 45, 49, 47, 50, 48, 52, 51, 53 }
  uselistorder i32 80, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 76, { 0, 1, 2, 5, 3, 4, 6 }
  uselistorder i32 5, { 27, 0, 1, 25, 3, 2, 26, 15, 55, 16, 30, 17, 29, 18, 28, 5, 4, 31, 19, 32, 20, 33, 34, 21, 22, 23, 35, 7, 36, 8, 37, 38, 9, 39, 40, 10, 41, 42, 11, 43, 44, 45, 12, 46, 48, 47, 13, 49, 14, 54, 6, 50, 51, 24, 52, 53 }
  uselistorder i32 4, { 161, 162, 163, 8, 164, 9, 165, 268, 10, 196, 197, 160, 11, 12, 166, 269, 270, 404, 198, 199, 200, 116, 346, 347, 348, 53, 349, 350, 351, 352, 271, 272, 273, 167, 274, 275, 276, 277, 14, 13, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 0, 54, 55, 435, 1, 433, 434, 84, 201, 168, 169, 436, 437, 438, 15, 202, 203, 3, 16, 2, 17, 18, 19, 20, 21, 405, 406, 407, 408, 409, 410, 411, 413, 414, 412, 415, 416, 417, 22, 418, 56, 419, 158, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 23, 24, 204, 117, 25, 289, 118, 290, 119, 322, 323, 324, 325, 326, 327, 328, 353, 4, 26, 354, 355, 356, 357, 358, 359, 360, 377, 378, 379, 380, 381, 385, 386, 85, 361, 362, 363, 364, 365, 366, 373, 374, 375, 376, 367, 368, 369, 370, 371, 372, 382, 383, 384, 205, 206, 50, 49, 51, 298, 439, 120, 440, 441, 52, 121, 387, 388, 159, 27, 28, 86, 207, 62, 190, 87, 191, 208, 209, 29, 30, 211, 74, 89, 90, 192, 193, 170, 171, 92, 176, 177, 178, 173, 174, 175, 172, 91, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 58, 57, 212, 69, 213, 31, 214, 60, 59, 215, 32, 210, 216, 217, 222, 93, 224, 88, 225, 226, 223, 218, 94, 219, 220, 221, 227, 67, 66, 65, 228, 95, 33, 34, 35, 36, 37, 38, 229, 64, 63, 230, 68, 96, 231, 232, 233, 97, 234, 98, 99, 100, 235, 122, 236, 237, 61, 238, 239, 240, 123, 124, 101, 241, 39, 102, 243, 75, 244, 245, 125, 246, 248, 126, 127, 247, 103, 249, 76, 250, 251, 128, 252, 254, 129, 130, 253, 255, 104, 256, 77, 257, 131, 132, 258, 259, 260, 105, 78, 261, 262, 133, 265, 134, 135, 263, 264, 5, 106, 266, 79, 267, 291, 292, 136, 294, 137, 138, 293, 6, 70, 295, 107, 297, 80, 299, 300, 301, 139, 140, 302, 303, 304, 141, 305, 306, 108, 307, 7, 308, 81, 309, 109, 310, 311, 312, 142, 313, 314, 317, 143, 144, 111, 318, 315, 316, 71, 319, 110, 320, 82, 321, 389, 390, 145, 391, 392, 393, 113, 394, 114, 395, 398, 146, 147, 115, 399, 396, 397, 72, 112, 400, 83, 403, 148, 40, 329, 149, 41, 330, 150, 42, 331, 151, 73, 43, 332, 333, 152, 44, 334, 153, 45, 335, 154, 46, 336, 155, 47, 337, 156, 48, 338, 339, 157, 340, 341, 342, 343, 344, 345, 401, 402, 296, 242, 442 }
  uselistorder i32 -2147483648, { 4, 5, 6, 7, 8, 2, 3, 9, 10, 11, 12, 0, 1 }
  uselistorder i32 1073741824, { 4, 5, 6, 7, 8, 3, 0, 2, 1 }
  uselistorder i32 2, { 174, 6, 0, 1, 175, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 166, 18, 19, 20, 21, 22, 280, 281, 23, 269, 24, 25, 26, 81, 27, 28, 29, 30, 167, 31, 112, 168, 2, 282, 283, 169, 170, 79, 164, 159, 160, 161, 85, 162, 32, 80, 84, 86, 163, 3, 113, 171, 266, 243, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 250, 251, 208, 46, 165, 47, 48, 49, 50, 51, 115, 116, 114, 87, 88, 52, 95, 192, 193, 117, 189, 122, 190, 118, 191, 119, 194, 120, 183, 121, 182, 176, 177, 178, 179, 180, 181, 96, 184, 97, 185, 98, 186, 99, 187, 100, 188, 91, 53, 54, 195, 197, 198, 123, 172, 199, 124, 200, 126, 125, 196, 55, 101, 201, 128, 202, 127, 129, 203, 130, 204, 56, 57, 58, 131, 205, 132, 102, 59, 133, 134, 136, 137, 138, 206, 135, 139, 140, 141, 142, 143, 207, 89, 90, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 144, 219, 103, 220, 221, 222, 223, 225, 224, 145, 104, 226, 227, 228, 229, 231, 230, 146, 105, 232, 233, 147, 148, 149, 234, 235, 236, 237, 238, 241, 239, 240, 4, 60, 61, 62, 63, 64, 65, 150, 106, 242, 244, 245, 246, 248, 66, 247, 67, 68, 69, 70, 71, 72, 151, 107, 249, 252, 253, 254, 255, 256, 152, 153, 257, 154, 73, 5, 74, 75, 76, 77, 78, 155, 108, 258, 259, 82, 260, 264, 261, 262, 263, 156, 109, 265, 270, 83, 271, 111, 272, 157, 273, 277, 274, 275, 276, 158, 278, 110, 279, 92, 267, 93, 94, 268, 173 }
  uselistorder i32 -1, { 157, 158, 94, 159, 156, 160, 67, 68, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 70, 71, 173, 174, 175, 176, 69, 117, 263, 177, 178, 179, 180, 181, 182, 183, 0, 116, 114, 72, 73, 155, 184, 99, 100, 185, 1, 278, 279, 186, 95, 96, 2, 118, 267, 187, 268, 3, 131, 74, 4, 119, 288, 188, 75, 76, 280, 120, 281, 189, 154, 139, 140, 77, 78, 138, 135, 136, 137, 282, 283, 153, 121, 122, 123, 284, 285, 152, 190, 104, 293, 191, 192, 193, 105, 101, 102, 103, 133, 194, 294, 195, 196, 197, 198, 199, 200, 264, 97, 124, 269, 125, 270, 201, 286, 98, 141, 5, 202, 203, 204, 6, 205, 132, 290, 79, 80, 206, 207, 126, 115, 208, 209, 81, 82, 210, 83, 84, 211, 291, 289, 212, 213, 214, 90, 92, 7, 8, 292, 93, 91, 130, 134, 215, 13, 216, 14, 217, 10, 218, 271, 9, 219, 85, 15, 220, 221, 12, 222, 223, 224, 225, 11, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 265, 127, 266, 16, 245, 246, 108, 109, 106, 107, 247, 248, 17, 249, 112, 113, 110, 111, 250, 18, 251, 128, 272, 86, 19, 20, 23, 143, 273, 142, 274, 22, 144, 275, 21, 24, 25, 145, 276, 26, 27, 28, 29, 30, 252, 31, 87, 32, 33, 35, 253, 129, 34, 88, 36, 37, 38, 39, 40, 41, 42, 254, 43, 146, 277, 44, 45, 46, 255, 47, 48, 49, 50, 256, 51, 52, 53, 257, 54, 55, 56, 258, 57, 58, 59, 60, 61, 259, 62, 63, 64, 260, 65, 66, 89, 261, 262, 287, 147, 148, 149, 150, 151 }
  uselistorder i32 8, { 5, 79, 6, 80, 34, 32, 112, 35, 113, 33, 114, 37, 39, 40, 81, 36, 82, 38, 7, 75, 74, 28, 8, 9, 22, 10, 83, 115, 189, 85, 44, 86, 49, 41, 144, 145, 146, 26, 147, 116, 117, 118, 76, 77, 11, 50, 12, 27, 208, 209, 207, 210, 211, 212, 213, 190, 191, 192, 193, 194, 195, 196, 13, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 51, 148, 52, 53, 133, 134, 135, 136, 42, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 172, 173, 174, 54, 182, 55, 160, 161, 162, 163, 56, 171, 57, 164, 165, 166, 167, 168, 169, 170, 29, 175, 176, 177, 178, 179, 180, 181, 30, 214, 215, 216, 100, 101, 58, 73, 31, 14, 15, 23, 16, 17, 18, 19, 87, 59, 84, 78, 43, 88, 89, 90, 24, 25, 92, 20, 60, 93, 61, 94, 62, 95, 63, 96, 64, 97, 65, 98, 99, 91, 66, 67, 68, 102, 72, 45, 103, 104, 105, 106, 107, 108, 111, 109, 110, 2, 119, 121, 120, 3, 122, 123, 124, 125, 126, 127, 128, 4, 129, 132, 130, 131, 183, 186, 184, 185, 137, 46, 138, 47, 139, 48, 140, 69, 141, 71, 21, 142, 70, 143, 187, 188, 0, 1 }
  uselistorder i32 24, { 4, 59, 60, 7, 61, 5, 8, 6, 11, 12, 34, 35, 13, 9, 10, 79, 80, 14, 81, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 15, 83, 32, 33, 16, 47, 40, 51, 52, 48, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 50, 53, 54, 55, 56, 57, 17, 18, 0, 19, 20, 58, 21, 22, 23, 24, 1, 25, 26, 62, 27, 2, 65, 63, 64, 28, 29, 68, 30, 3, 69, 66, 31, 67 }
  uselistorder i32 12, { 2, 8, 9, 92, 93, 134, 135, 136, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 10, 11, 91, 12, 94, 95, 96, 97, 13, 98, 99, 14, 111, 116, 15, 100, 101, 102, 103, 110, 104, 105, 106, 107, 108, 109, 16, 112, 113, 17, 114, 115, 18, 3, 62, 19, 20, 42, 38, 39, 43, 44, 40, 31, 32, 30, 29, 33, 34, 35, 36, 37, 41, 45, 46, 47, 4, 48, 49, 50, 51, 53, 54, 55, 21, 56, 22, 57, 23, 58, 24, 59, 61, 60, 52, 117, 63, 25, 64, 26, 65, 27, 66, 28, 67, 68, 69, 70, 71, 72, 73, 74, 75, 5, 76, 77, 78, 79, 80, 6, 81, 82, 83, 84, 85, 86, 7, 87, 88, 89, 90, 118, 119, 120, 121, 0, 1 }
  uselistorder i32 16, { 97, 98, 99, 7, 100, 101, 102, 103, 0, 1, 149, 49, 51, 150, 52, 151, 50, 55, 56, 104, 57, 105, 53, 54, 8, 9, 10, 43, 11, 12, 2, 13, 14, 152, 153, 186, 187, 154, 64, 46, 155, 218, 219, 220, 221, 93, 206, 207, 208, 209, 210, 211, 212, 213, 94, 214, 215, 216, 217, 95, 65, 156, 188, 44, 48, 15, 16, 189, 190, 17, 86, 18, 47, 191, 19, 20, 87, 21, 22, 23, 88, 24, 25, 26, 89, 27, 28, 111, 66, 123, 124, 125, 126, 127, 29, 45, 30, 3, 31, 32, 33, 67, 112, 68, 113, 72, 109, 114, 110, 69, 106, 70, 107, 71, 108, 116, 117, 118, 96, 73, 74, 34, 90, 35, 36, 75, 115, 60, 59, 58, 119, 61, 120, 76, 77, 121, 78, 122, 79, 192, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 80, 138, 139, 81, 140, 62, 141, 142, 143, 144, 145, 37, 146, 147, 4, 82, 148, 157, 158, 159, 160, 161, 162, 5, 83, 163, 164, 165, 91, 38, 39, 40, 92, 166, 167, 168, 41, 42, 84, 85, 169, 170, 6, 63, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 181, 183, 184, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 202, 204, 205, 185 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 1, 2, 3, 10, 4, 5, 14, 15, 16, 17, 19, 20, 21, 6, 7, 8, 9, 11, 12, 13, 18 }
  uselistorder i32 -2, { 21, 0, 1, 6, 7, 3, 2, 5, 4, 8, 9, 14, 15, 11, 10, 13, 12, 20, 19, 16, 52, 18, 17, 34, 35, 36, 37, 38, 39, 46, 47, 48, 49, 40, 41, 43, 44, 45, 42, 50, 51, 27, 28, 29, 30, 31, 32, 33, 22, 23, 24, 25, 26 }
  uselistorder i32 32, { 48, 66, 67, 68, 46, 69, 70, 71, 50, 47, 51, 52, 53, 54, 42, 79, 55, 56, 72, 73, 3, 4, 57, 74, 75, 5, 76, 77, 58, 98, 89, 90, 91, 43, 92, 44, 93, 45, 94, 6, 95, 96, 97, 8, 7, 80, 81, 87, 41, 88, 82, 83, 84, 85, 86, 61, 62, 10, 9, 12, 11, 14, 13, 16, 15, 49, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 59, 60, 29, 63, 30, 65, 64, 31, 32, 33, 34, 0, 35, 36, 1, 37, 2, 38, 39, 40, 78 }
  uselistorder i32 ptrtoint (i32* @global_var_1f010.484 to i32), { 1, 2, 4, 5, 6, 0, 3, 7 }
  uselistorder i32* @r7, { 15, 160, 161, 162, 163, 164, 5, 165, 166, 167, 168, 169, 170, 171, 172, 173, 16, 17, 18, 19, 20, 6, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 174, 175, 176, 177, 56, 57, 58, 59, 268, 269, 2, 270, 178, 179, 180, 182, 181, 183, 0, 184, 13, 185, 186, 187, 338, 36, 271, 272, 273, 60, 61, 274, 275, 276, 62, 63, 64, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 188, 189, 190, 191, 192, 193, 194, 195, 231, 3, 1, 232, 233, 234, 235, 236, 277, 278, 279, 280, 281, 282, 293, 294, 295, 303, 304, 7, 283, 284, 285, 290, 291, 292, 286, 8, 287, 288, 289, 296, 297, 298, 299, 9, 300, 301, 302, 339, 340, 92, 93, 94, 95, 96, 97, 98, 99, 100, 305, 306, 14, 307, 65, 66, 67, 68, 69, 70, 71, 43, 52, 53, 44, 41, 10, 37, 38, 39, 40, 51, 42, 45, 46, 47, 48, 49, 50, 54, 55, 72, 73, 74, 75, 76, 77, 78, 308, 309, 310, 311, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 110, 111, 113, 114, 115, 116, 117, 11, 118, 12, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 128, 130, 131, 132, 135, 133, 134, 136, 137, 138, 148, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 4, 221, 218, 219, 220, 223, 222, 224, 225, 226, 227, 228, 229, 230, 316, 312, 313, 314, 315, 320, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267 }
  uselistorder i32* @r6, { 13, 16, 17, 14, 15, 328, 329, 330, 32, 33, 2, 34, 272, 273, 274, 275, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 1, 193, 194, 276, 3, 277, 278, 279, 281, 280, 282, 283, 284, 18, 19, 20, 21, 35, 36, 37, 38, 39, 40, 41, 42, 43, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 195, 196, 197, 198, 44, 45, 46, 47, 10, 11, 12, 22, 199, 200, 201, 244, 245, 246, 0, 247, 248, 249, 285, 286, 287, 288, 289, 4, 302, 303, 308, 309, 310, 311, 312, 313, 5, 290, 291, 292, 293, 298, 299, 300, 301, 294, 295, 296, 297, 304, 305, 306, 307, 341, 342, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 26, 27, 28, 29, 31, 30, 23, 24, 25, 74, 75, 76, 77, 78, 79, 86, 87, 88, 89, 90, 91, 92, 93, 80, 81, 82, 83, 84, 85, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 6, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 9, 116, 117, 118, 7, 119, 120, 121, 127, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 140, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 151, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 163, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 177, 172, 173, 174, 175, 176, 178, 179, 180, 181, 202, 203, 204, 210, 205, 206, 207, 208, 209, 213, 211, 212, 214, 215, 216, 217, 225, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 237, 232, 233, 234, 235, 236, 241, 238, 239, 240, 242, 243, 314, 315, 316, 322, 317, 318, 319, 320, 321, 325, 323, 324, 326, 327, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 8, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271 }
  uselistorder i32* @r5, { 26, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 27, 28, 29, 30, 31, 32, 33, 34, 5, 35, 640, 641, 642, 75, 76, 77, 78, 374, 6, 375, 376, 378, 379, 377, 380, 381, 382, 383, 7, 384, 385, 386, 387, 8, 388, 389, 390, 391, 392, 643, 654, 655, 540, 541, 542, 543, 9, 544, 545, 36, 37, 79, 0, 80, 81, 82, 83, 84, 85, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 393, 394, 395, 396, 86, 87, 88, 89, 397, 398, 399, 400, 401, 402, 513, 514, 515, 516, 517, 518, 1, 519, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 10, 568, 569, 570, 571, 572, 573, 574, 583, 584, 585, 586, 587, 588, 556, 557, 566, 567, 558, 559, 11, 560, 561, 562, 563, 564, 565, 575, 576, 12, 577, 578, 579, 580, 581, 582, 589, 13, 590, 591, 656, 657, 228, 229, 230, 231, 232, 14, 233, 234, 235, 236, 237, 90, 91, 92, 93, 94, 95, 592, 593, 594, 595, 596, 597, 598, 599, 600, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 44, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 62, 63, 64, 65, 66, 67, 38, 45, 46, 42, 43, 39, 40, 41, 16, 15, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 153, 154, 155, 4, 3, 156, 157, 158, 159, 160, 161, 162, 22, 163, 164, 165, 166, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 191, 183, 184, 185, 186, 187, 167, 168, 169, 170, 171, 172, 173, 174, 175, 601, 602, 603, 604, 605, 606, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 2, 214, 215, 216, 217, 218, 219, 220, 17, 221, 222, 223, 224, 225, 226, 227, 238, 239, 240, 241, 242, 23, 243, 244, 245, 246, 247, 248, 249, 24, 250, 25, 251, 252, 18, 253, 19, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 276, 277, 278, 279, 280, 284, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 297, 298, 299, 300, 301, 305, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 20, 316, 317, 318, 319, 320, 321, 322, 323, 326, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 341, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 403, 404, 405, 406, 407, 413, 408, 409, 410, 411, 412, 425, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 21, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 492, 486, 487, 488, 489, 490, 491, 501, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 607, 608, 609, 610, 611, 612, 619, 613, 614, 615, 616, 617, 618, 628, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539 }
  uselistorder i32* @r4, { 32, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 33, 34, 35, 36, 37, 10, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 380, 381, 11, 53, 54, 50, 51, 52, 55, 31, 56, 27, 57, 382, 383, 679, 680, 681, 384, 385, 87, 88, 89, 90, 579, 580, 386, 387, 388, 389, 391, 392, 393, 390, 394, 395, 0, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 5, 682, 683, 684, 685, 697, 698, 699, 686, 694, 695, 696, 581, 582, 583, 584, 91, 92, 585, 586, 588, 587, 58, 12, 59, 60, 700, 701, 93, 94, 95, 96, 97, 98, 99, 100, 101, 687, 688, 1, 689, 690, 2, 691, 3, 692, 693, 61, 62, 409, 412, 413, 63, 410, 411, 102, 103, 589, 590, 591, 592, 29, 30, 593, 594, 595, 596, 597, 598, 205, 206, 207, 414, 415, 416, 417, 418, 419, 420, 104, 105, 106, 107, 108, 109, 323, 324, 325, 599, 600, 519, 601, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 604, 638, 605, 606, 607, 608, 624, 626, 625, 13, 627, 628, 633, 634, 635, 636, 4, 637, 14, 609, 610, 611, 612, 613, 614, 615, 616, 621, 622, 623, 617, 618, 619, 620, 629, 630, 631, 632, 639, 640, 641, 642, 110, 111, 602, 603, 465, 466, 467, 468, 469, 702, 703, 704, 705, 220, 221, 222, 223, 224, 225, 226, 227, 228, 6, 229, 112, 113, 114, 115, 116, 117, 230, 231, 232, 233, 234, 643, 644, 15, 645, 646, 647, 118, 119, 120, 121, 122, 123, 124, 125, 285, 286, 255, 256, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 126, 127, 128, 129, 84, 64, 65, 66, 67, 68, 69, 70, 71, 72, 85, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 164, 165, 166, 7, 156, 157, 158, 159, 160, 161, 144, 145, 146, 147, 648, 649, 650, 651, 652, 167, 168, 169, 170, 86, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 28, 212, 213, 214, 215, 216, 217, 218, 8, 219, 235, 236, 9, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 266, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 290, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 16, 306, 307, 310, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 17, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 18, 339, 19, 340, 20, 341, 342, 344, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 421, 422, 423, 21, 424, 22, 425, 426, 23, 427, 428, 24, 429, 434, 435, 436, 437, 438, 439, 440, 441, 430, 431, 432, 433, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 25, 501, 502, 505, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 653, 654, 655, 656, 26, 657, 658, 661, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 675, 676, 677, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 672, 673, 674, 443, 444, 445, 678 }
  uselistorder i32 ()* @function_16438, { 1, 0 }
  uselistorder i32 1, { 660, 661, 662, 663, 535, 534, 121, 123, 124, 122, 125, 664, 126, 665, 666, 379, 59, 58, 803, 804, 805, 338, 806, 314, 311, 313, 312, 315, 667, 668, 669, 670, 339, 279, 280, 282, 281, 278, 227, 536, 316, 869, 277, 340, 0, 341, 88, 89, 87, 90, 696, 317, 697, 318, 319, 671, 384, 383, 415, 537, 224, 538, 260, 259, 539, 303, 306, 302, 304, 305, 385, 944, 870, 871, 807, 808, 529, 258, 416, 386, 417, 1, 2, 698, 544, 543, 542, 541, 540, 287, 286, 288, 872, 329, 546, 545, 145, 144, 873, 874, 380, 875, 328, 547, 164, 162, 168, 169, 165, 166, 167, 170, 163, 548, 809, 549, 73, 72, 71, 550, 267, 268, 269, 270, 271, 810, 811, 342, 812, 813, 814, 815, 816, 817, 818, 819, 820, 418, 821, 822, 823, 551, 76, 74, 75, 343, 252, 251, 419, 960, 3, 4, 291, 552, 553, 183, 554, 420, 555, 307, 308, 421, 171, 174, 173, 172, 175, 556, 63, 64, 62, 344, 672, 422, 60, 388, 387, 423, 557, 61, 961, 335, 558, 78, 79, 86, 77, 83, 82, 81, 80, 84, 85, 699, 700, 701, 702, 703, 704, 705, 706, 102, 103, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 559, 49, 43, 44, 45, 46, 53, 47, 55, 56, 51, 57, 50, 48, 52, 54, 389, 560, 561, 210, 563, 562, 101, 424, 191, 564, 853, 565, 301, 300, 299, 876, 105, 104, 106, 99, 320, 824, 825, 826, 827, 566, 530, 283, 284, 567, 568, 109, 111, 108, 107, 110, 854, 855, 856, 857, 858, 345, 859, 569, 256, 255, 257, 254, 253, 877, 181, 182, 346, 878, 879, 349, 350, 427, 880, 348, 881, 882, 883, 905, 906, 428, 907, 429, 909, 347, 908, 426, 911, 425, 910, 920, 921, 430, 922, 923, 924, 351, 431, 925, 570, 293, 294, 297, 298, 296, 295, 292, 352, 353, 434, 884, 435, 885, 433, 887, 432, 886, 354, 888, 355, 889, 356, 357, 358, 890, 330, 891, 331, 900, 901, 902, 903, 904, 261, 262, 264, 263, 265, 266, 362, 363, 438, 892, 361, 893, 894, 895, 364, 437, 897, 436, 896, 359, 360, 898, 899, 571, 157, 153, 160, 155, 154, 159, 158, 156, 161, 368, 369, 441, 912, 367, 913, 914, 915, 370, 440, 917, 439, 916, 365, 366, 918, 919, 572, 95, 93, 92, 97, 96, 94, 91, 98, 574, 573, 217, 216, 215, 575, 285, 764, 214, 834, 576, 211, 213, 212, 193, 192, 442, 962, 963, 964, 579, 578, 577, 28, 31, 30, 29, 27, 5, 6, 443, 580, 23, 21, 25, 26, 22, 24, 444, 741, 581, 223, 321, 926, 290, 742, 743, 744, 745, 324, 746, 583, 582, 14, 20, 18, 17, 15, 16, 19, 765, 336, 766, 337, 767, 585, 584, 747, 748, 749, 445, 586, 40, 41, 39, 38, 927, 928, 929, 332, 371, 7, 930, 322, 414, 931, 36, 35, 37, 688, 689, 690, 446, 750, 289, 932, 752, 751, 753, 33, 32, 34, 933, 587, 784, 588, 142, 141, 140, 139, 143, 768, 589, 179, 178, 177, 176, 180, 447, 691, 448, 692, 390, 693, 460, 694, 372, 707, 450, 708, 373, 461, 462, 676, 674, 451, 673, 675, 454, 452, 677, 453, 678, 679, 455, 680, 681, 458, 682, 683, 456, 684, 685, 457, 686, 687, 459, 695, 710, 709, 711, 463, 712, 713, 714, 464, 715, 659, 718, 717, 449, 716, 719, 720, 465, 721, 722, 723, 374, 730, 731, 325, 466, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 13, 129, 130, 131, 127, 128, 133, 132, 724, 725, 467, 726, 727, 468, 728, 729, 116, 115, 114, 120, 117, 118, 119, 113, 112, 469, 470, 604, 603, 309, 310, 934, 606, 605, 136, 135, 134, 137, 138, 473, 391, 732, 733, 392, 734, 471, 472, 474, 735, 736, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 619, 618, 617, 616, 615, 614, 613, 612, 611, 533, 610, 609, 608, 607, 67, 66, 65, 486, 326, 487, 620, 490, 489, 488, 737, 622, 621, 491, 492, 493, 738, 739, 494, 495, 740, 327, 496, 626, 625, 624, 623, 238, 237, 754, 760, 9, 375, 755, 497, 756, 8, 757, 381, 758, 376, 377, 759, 761, 762, 382, 763, 630, 629, 531, 532, 628, 627, 935, 393, 394, 202, 201, 200, 203, 199, 936, 10, 11, 12, 769, 770, 498, 771, 499, 772, 333, 334, 773, 774, 323, 775, 501, 776, 777, 502, 778, 500, 779, 503, 780, 781, 782, 634, 633, 632, 631, 229, 231, 230, 236, 235, 232, 234, 233, 785, 787, 504, 788, 786, 505, 636, 635, 246, 248, 249, 250, 245, 247, 789, 791, 506, 792, 790, 507, 396, 395, 508, 793, 637, 186, 188, 189, 190, 185, 187, 794, 509, 795, 398, 397, 796, 639, 638, 225, 226, 797, 799, 510, 800, 798, 511, 512, 801, 399, 802, 640, 240, 242, 243, 244, 239, 241, 828, 830, 513, 829, 514, 401, 400, 515, 832, 516, 833, 641, 194, 197, 198, 195, 196, 835, 836, 837, 838, 839, 840, 517, 841, 518, 842, 519, 406, 405, 520, 843, 404, 844, 402, 845, 403, 846, 647, 646, 645, 644, 643, 642, 146, 147, 150, 151, 152, 148, 149, 847, 850, 848, 849, 521, 409, 408, 522, 851, 407, 852, 648, 272, 274, 275, 276, 273, 937, 940, 938, 939, 523, 412, 411, 524, 941, 410, 942, 653, 652, 651, 650, 649, 204, 205, 207, 208, 209, 206, 860, 413, 525, 654, 68, 69, 70, 861, 862, 378, 526, 865, 527, 528, 866, 863, 864, 867, 868, 220, 219, 222, 218, 221, 943, 655, 184, 831, 656, 100, 783, 42, 657, 658, 228 }
  uselistorder label %dec_label_pc_15154, { 1, 0 }
  uselistorder label %dec_label_pc_150d0, { 1, 0 }
  uselistorder label %dec_label_pc_15080, { 1, 0 }
  uselistorder label %dec_label_pc_15064, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1501c, { 2, 3, 4, 5, 1, 6, 0 }
}

define i32 @function_151dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_151dc:
  %v0_151dc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_151dc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_151dc
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_151dc, %bb
  %v10_151e4 = phi i32 [ %arg1, %dec_label_pc_151dc ], [ 0, %bb ]
  ret i32 %v10_151e4

; uselistorder directives
  uselistorder i1 false, { 38, 39, 40, 42, 41, 43, 12, 13, 30, 15, 18, 17, 16, 23, 31, 32, 33, 14, 34, 35, 36, 37, 1, 3, 28, 20, 21, 4, 25, 2, 10, 11, 19, 5, 6, 7, 29, 22, 0, 8, 9, 26, 27, 24, 44 }
  uselistorder i1* @cpsr_z, { 5, 6, 8, 9, 1, 7, 10, 11, 23, 24, 2, 12, 13, 14, 15, 27, 28, 16, 29, 31, 33, 32, 30, 17, 18, 19, 20, 21, 34, 35, 36, 37, 38, 57, 58, 59, 67, 68, 69, 70, 39, 40, 41, 42, 43, 44, 0, 45, 53, 54, 55, 56, 46, 47, 48, 49, 50, 51, 52, 60, 61, 62, 63, 64, 65, 66, 3, 22, 25, 4, 26, 71, 72 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_16438() local_unnamed_addr {
dec_label_pc_16438:
  %v1_1643c = call i32 @function_11a84(i32 6)
  %v1_16444 = call i32 @function_11a84(i32 9)
  br label %dec_label_pc_16448

dec_label_pc_16448:                               ; preds = %dec_label_pc_16448, %dec_label_pc_16438
  br label %dec_label_pc_16448

; uselistorder directives
  uselistorder i32 9, { 6, 32, 33, 52, 53, 0, 55, 5, 45, 7, 36, 9, 34, 8, 10, 35, 29, 37, 4, 30, 38, 31, 11, 39, 12, 40, 13, 41, 14, 42, 15, 43, 16, 44, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 26, 2, 27, 59, 3, 46, 47, 28, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61 }
  uselistorder i32 (i32)* @function_11a84, { 2, 1, 0 }
  uselistorder i32 6, { 14, 62, 1, 15, 70, 52, 71, 4, 28, 29, 16, 27, 2, 30, 17, 31, 0, 18, 19, 20, 5, 21, 32, 33, 34, 6, 35, 36, 37, 38, 7, 39, 40, 41, 42, 8, 43, 9, 44, 45, 46, 22, 47, 10, 48, 49, 23, 50, 11, 51, 53, 24, 54, 55, 56, 57, 58, 25, 59, 12, 60, 63, 64, 65, 66, 67, 26, 68, 13, 69, 3, 61 }
}

define i32 @function_1644c() local_unnamed_addr {
entry:
  %v3_1644c = load i32, i32* @r0, align 4
  ret i32 %v3_1644c

; uselistorder directives
  uselistorder i32 0, {}
  uselistorder i32* @r0, { 92, 235, 236, 237, 238, 239, 240, 241, 242, 4, 243, 244, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 15, 245, 269, 270, 271, 18, 132, 61, 17, 35, 246, 247, 16, 53, 29, 34, 44, 133, 33, 248, 321, 322, 320, 105, 45, 56, 30, 26, 0, 22, 11, 134, 71, 272, 19, 43, 106, 21, 249, 72, 46, 1, 70, 264, 12, 73, 74, 75, 273, 63, 255, 250, 251, 24, 31, 64, 20, 47, 274, 28, 275, 10, 265, 266, 267, 268, 36, 76, 277, 278, 279, 91, 280, 281, 282, 299, 88, 306, 307, 89, 87, 308, 309, 77, 283, 284, 78, 5, 285, 79, 286, 287, 82, 295, 83, 84, 296, 297, 298, 288, 80, 289, 290, 291, 292, 81, 2, 293, 294, 300, 85, 301, 302, 303, 86, 3, 304, 305, 310, 135, 276, 224, 65, 256, 66, 67, 40, 41, 32, 9, 323, 324, 42, 325, 8, 27, 23, 311, 201, 312, 25, 202, 203, 204, 205, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 124, 125, 126, 127, 128, 129, 130, 131, 107, 108, 112, 113, 110, 111, 109, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 160, 161, 164, 165, 166, 167, 168, 169, 172, 170, 171, 162, 163, 173, 48, 49, 14, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 50, 187, 188, 189, 190, 191, 192, 193, 51, 13, 194, 195, 196, 197, 198, 199, 52, 200, 206, 54, 207, 208, 209, 210, 211, 212, 213, 7, 214, 215, 216, 217, 218, 219, 220, 221, 55, 222, 223, 313, 314, 6, 225, 226, 57, 227, 228, 229, 58, 230, 231, 59, 232, 233, 234, 60, 252, 253, 62, 257, 258, 259, 260, 68, 261, 262, 263, 69, 315, 316, 317, 90, 254, 318, 38, 39, 37, 319 }
}

declare i32 @unknown_ffff0fc0() local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16* @__decompiler_undefined_function_1() local_unnamed_addr

declare i8 @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare i64 @__decompiler_undefined_function_5() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #1

declare float @fabsf(float)

attributes #0 = { nounwind readnone }
attributes #1 = { noreturn nounwind }
